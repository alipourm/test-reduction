tryItOut("{yield }");
tryItOut("if([]) {let __noSuchMethod__ =  \"\" ; } else yield;");
tryItOut("this.zzz.zzz;");
tryItOut("0\nif( \"\" .__lookupGetter__(\"__proto__\")) {yield false;{}\t } else  if ((__iterator__)) return <y><z/></y>;");
tryItOut("/*infloop*/L:do {if(__noSuchMethod__.__count__ = ({__proto__ getter: eval,  get prop prototype () { return undefined }  })) {break M;return; } else {([,]);gc() } } while(<><xxx>{__parent__}</xxx></> ? ((<><x><y/></x></>).__defineSetter__)() : (__count__%= /x/ ));");
tryItOut("while((1e4 >= __parent__) && 0){return <x/>;; }\n");
tryItOut("let __iterator__ = [[]], __count__;export *; <employee id=\"1\"><name>Joe</name><age>20</age></employee> ");
tryItOut("if(this) { if ((yield undefined)) var __iterator__ = *::*, prop = ({a1:1}); else __iterator__}");
tryItOut("/*infloop*/for(var __iterator__; eval(\"let __parent__;\", (this / __count__)(+true, @foo)); [15,16,17,18].sort(({}).__lookupGetter__, ( '' .*.constructor))) {this.zzz.zzz;return ((uneval(<x><y/></x>.__proto__ = getter))); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype.__noSuchMethod__ in [prop, , __parent__, __noSuchMethod__, __iterator__] = <x><y/></x>.throw(<x><y/></x>)) yield  /x/g ;");
tryItOut("/*for..in*/for(var [__count____proto__] = this.__defineSetter__(\"__count__\", ([1,2,3,4].map).call) in [__proto__ if (false)]) {while((<x><y/></x>) && 0){{} }\n }");
tryItOut("let ([__noSuchMethod__, constructor, prototype, ], __proto__ = <x><y/></x>) { return <x><y/></x>; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in (yield window)) 1e-81;");
tryItOut("/*infloop*/while(((yield __iterator__.__iterator__ = (#2=<><x><y/></x></>))))");
tryItOut("do export */*\n*/; while(((function(q) { return q; })((this.__defineGetter__(\"__iterator__\", function(y) { yield y; function  __iterator__ () { return <x><y/></x> } ; yield y; })))) && 0);");
tryItOut("yield this");
tryItOut("let prototype;");
tryItOut("/*for..in*/M:for(let constructor(prop = <y><z/></y>) in ((([1,2,3,4].slice).apply)((prototype = #3={a:#3#}.throw(*))))){with(<x/>\t){let __noSuchMethod__ = 0x99;; } }");
tryItOut(";");
tryItOut("/*infloop*/for(prototype; <><x><\fy/></x></> * null != null--; #1=[undefined]()) ( /x/g );");
tryItOut("let(constructor = (({constructor:  '' }))) ((function(){prototype: [11,12,13,14]\f.some})());");
tryItOut("with({__count__: <x/> &= <><x><y/></x></>})export __parent__");
tryItOut("M:if(this.__defineGetter__(\"__parent__\", __proto__, __count__ = *)) {/*infloop*/M:do { } while(null.yoyo(<x/>).@*); } else  if (@foo .@x:: #2=({__proto__: <x><y/></x>})) {}");
tryItOut("if((p={}, (p.z = \n<><x><y/></x></>.yoyo( \"\" ))())) {if(false) {gc()return; }; }");
tryItOut("M:if( /x/g ) 3 else  if (<y><z/></y>) ((<><x><y/></x></>)); else {{}@foo; }");
tryItOut("throw __proto__;");
tryItOut("do ; while(((constructor = 1e81)) && 0);");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { if ((({ prototype: constructor }) = ({ set __proto__ __noSuchMethod__ () { yield this } , __parent__: 1.3 }))) let (({ __proto__: function::constructor, __parent__: __parent__ }) = (<><x><y/></x></> % [1,,]), ((({}).__lookupGetter__).call).call) { const __count__ =  /x/g , prototype = undefined; }} else {export *;return; }/*infloop*/for(<y><z/></y> /  \"\" .isPrototypeOf([<x><y/></x>].filter(({}).hasOwnProperty)); (<><x><y/></x></>.__defineSetter__(\"prototype\", Function)); ([, ({ __noSuchMethod__: ({ prop: __noSuchMethod__, __iterator__: __noSuchMethod__ }), __iterator__: __count__ }), __count__] = <x/>)) try { return; } catch(prop if (function(){for(let y in []);})()) { __parent__ = constructor; } finally { let((eval(\" \\\"\\\" \", __proto__)).@foo.throw( /x/g  ? <><x><y/></x></> : <x/>.unwatch(\"prototype\"))['prop'] = (<><x><y/></x></>.throw([,])).watch(\"__noSuchMethod__\", this.__defineGetter__(\"__noSuchMethod__\", (((uneval(<x><y/></x>))).throw(undefined)).__defineSetter__)), __proto__ = __iterator__.yoyo(<x><y/></x>)) ((function(){constructor = __iterator__;})()); } ");
tryItOut("M:do {/*for..in*/for((new Function(\"/*for..in*/for(var __iterator__ = new constructor() in <x><y/></x>) {[1,2,3,4].slicevar function::prop = 3.141592653589793; }\")) in ((<y><z/></y>)((__count__ = true))))throw *; } while((((#1=[#1#].@foo)[\nfunction::__parent__.(@foo)])) && 0);");
tryItOut("L: {yield;yield constructor; }");
tryItOut("/*for..in*/for(const [[], ] = [1,,] in (((@foo for each (__proto__ in prop)))(* *= <><x><y/></x></>))) while((prop) && 0)export prop;");
tryItOut("/*infloop*/for(let __iterator__; <><x><y/></x></>; (-1)) export __iterator__;");
tryItOut("{;yield <y><z/></y>; }");
tryItOut("do {return;var prop = [,,], __count__ = __proto__; } while(((__proto__ ? <x/> : <><x><y/></x></>)) && 0);");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("export __count__;\n{}\n");
tryItOut("L: {/*infloop*/L:for(const __count__; 1e-81; *::*) {const __noSuchMethod__ = <><x><y/></x\f></>; } }");
tryItOut("with(<xxx>{__noSuchMethod__}</xxx>)throw prototype;");
tryItOut("/*infloop*/for((uneval(({ __count__: function::__noSuchMethod__ }) = {}.__defineGetter__(\"prototype\", function  __count__ () {  } ))); (<xxx>{__noSuchMethod__}</xxx>); __noSuchMethod__.('fafafa'.replace(/a/g, ( /x/g ).__defineSetter__))) {with({__parent__: __parent__ = prototype})return [,]; const __proto__;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in @foo) {const  { yield; } , __noSuchMethod__; }");
tryItOut("if(new String()) {{gc()null; } } else  if (.2) {with( /x/g ){yield <x><y/></x>;; }export __proto__; } else return;");
tryItOut("L:if((function(y) { yield y; throw *;; yield y; }).call(window, )) let __count__, let prototype; = [,,]; else  if (((({prototype: <x><y/></x>, __proto__ setter: <><x><y/></x></> })).isPrototypeOf(( /x/g .isPrototypeOf(0/0) >>>=@foo)))\f) yield arguments;");
tryItOut("let (({ __parent__: ({ __noSuchMethod__: constructor, constructor: prototype }) }) = __proto__.__count__ = (yield prototype.__proto__ =  \"\" .__lookupGetter__(\"__parent__\"))) { constructor }");
tryItOut("yield;\n__iterator__ = <><x><y/></x></>, prop;\n");
tryItOut("/*infloop*/M:for(prop.prototype = (window.isPrototypeOf([,])); [,,]; [*::*].map(Math.sin)) throw null");
tryItOut("yield (0.1 &= <y><z/></y> >= new Array());");
tryItOut("export *\nreturn;");
tryItOut("M:with({__proto__: constructor.propertyIsEnumerable(\"function::__proto__\")});");
tryItOut("L: export *;");
tryItOut("while((this != false) && 0)export __noSuchMethod__;");
tryItOut("return;");
tryItOut("\n{( /x/ ); }\nif(3.141592653589793) return constructor; else  if (*) {gc()export constructor; } else {return; }\n\n");
tryItOut("return;");
tryItOut("/*infloop*/M:do {export window;yield; } while((prop = gc()));");
tryItOut("switch(false.* .@x:: get = __parent__) { default: break; break; switch(<x><y/></x>) { case 1: break; case 9: case 8: *; } }");
tryItOut("with({}) throw function::prop;");
tryItOut("do {break M; } while(((: (-3/0)().__iterator__)) && 0);");
tryItOut("L: {return  /x/g ; }");
tryItOut("/*infloop*/while([[]][<x><y/></x>].unwatch(\"__noSuchMethod__\") ? ({ get __proto__ __count__ (__parent__, prototype)\t {  }  }) : __iterator__){const constructor = this, prop; }M:if(<><x><y/></x></>) { if (<x><y/></x>) {{}*; } else const prototype = <x/>;}");
tryItOut("/*for..in*/for(let ( /* Comment */<x><y/></x>.__iterator__) in  /x/g .unwatch(\"prototype\").eval(this)) {/*for..in*/for(var __proto__.__parent__ in ((prop = window)(undefined.valueOf(\f\"number\"))))export *; }");
tryItOut("{return 4.; }");
tryItOut(" \"\"  const __iterator__;");
tryItOut("/*for..in*/for(var prototype =  '' (1e+81).__lookupSetter__(\"prototype\") in 3/0) {/*infloop*/for(let __count__; <><x><y/></x></>; this) __noSuchMethod__: <><x>//h\n<y/></x></> }");
tryItOut("while(( /x/ .unwatch(\"prototype\")) && 0){__iterator__;__noSuchMethod__ = __noSuchMethod__; }");
tryItOut("__count__ = __count__;");
tryItOut("/*infloop*/while(*)export prototype;");
tryItOut("let (prop = *, __noSuchMethod__ = <><x><y/></x></>) { ; }\n");
tryItOut("[];");
tryItOut("/*for..in*/for(let __proto__ = (this = this.__defineSetter__(\"__count__\", function  prop (__proto__, prop)<>\t<x><y/></x></>)) in (constructor.yoyo(__noSuchMethod__) .@x:: (({}).__lookupGetter__).call(true, <><x><y/></x></>, __proto__))) {do {export constructor;set; } while((new prototype.propertyIsEnumerable(\"prop\") - <x/> > null()) && 0); }");
tryItOut("if(-(this.__defineSetter__(\"prototype\", __proto__ = this)).eval((<y><z/></y>);\f)) {this.zzz.zzz; }");
tryItOut("with({constructor: let (__noSuchMethod__, prop) new ((<><x><y/></x></>).__defineSetter__\n)(false, <x>y/></x>)}){let (__proto__ = <x><y/></x>.prototype\f) { return; } }");
tryItOut("return ;");
tryItOut("if([<><x><y/></x></>]) { if (this) {} else {export prototype; }}");
tryItOut("/*infloop*/for(const constructor;  /x/ ; <x><y/></x>) (<x><y/></x>);");
tryItOut("L: ");
tryItOut("function(q) { return q; }");
tryItOut("if(null) { if (window) {continue ;break ; }} else (({}).hasOwnProperty).call\n const __noSuchMethod__;");
tryItOut("/*infloop*/for(let __noSuchMethod__; 1.2e3; <x><y/></x>) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.__iterator__ in <zzz>(__noSuchMethod__ +  '' .__proto__+=[__proto__])</zzz>) switch(<><xxx>{__parent__(__parent__ = prop)}</xxx></>) { case <employee id=\"1\"><name>Joe</name><age>20</age></employee>: yield;continue ;\nexport *;\nbreak; default: gc()case 2: /*infloop*/for(({ __proto__: prop, function::__iterator__: __proto__ }\t);  /* Comment */__parent__; this.__defineSetter__(\"__parent__\", (1 for (x in [])))) {throw ({a1:1}); }break; case 9: if( '' ) {yield; }break;  }");
tryItOut("yield 1e-81 in __parent__--;");
tryItOut("{yield; }");
tryItOut("if(<>__parent__ = window</>.((p={}, (p.z = 1e+81)()) && (0\n))) { if (--__proto__.(1e4)) L: {export *; }} else {{;const __proto__; }/*infloop*/for(const Math.pow; (uneval(null)); new (undefined)()) let prototype = window, __count__; }");
tryItOut("/*for..in*/for(const __proto__ = <x><y/></x> === <x><y/></x> in (this.zzz.zzz)) {; }\n");
tryItOut("/*infloop*/for(var __noSuchMethod__; <y><z/></y>;  /x/g ) {prop, __proto__; }");
tryItOut("L:if(yield #2=(__noSuchMethod__.(<x/>))) /*infloop*/M:do {var __count__ =  '' , prototype = <x/>;return; } while(#1=<><x><y/></x></>.hasOwnProperty(\"__parent__\"));\f");
tryItOut("/*infloop*/M:for(const ({ constructor(<x/>): ({ prototype: __noSuchMethod__ }), __parent__:  __noSuchMethod__ ({ constructor: [__iterator__, ] }) }) = #1=[this.__defineGetter__(\"__iterator__\", function (__parent__)3)]; __iterator__ = [[]] /= __parent__; eval(\"(<x><y/></x>)()\", window)) const constructor = 0/0;");
tryItOut("if( /x/  -= (Math.pow((p={}, (p.z = try {  } catch(constructor if (function(){export constructor;})()) { yield  \"\" ; } finally { break M; } )()), true))) { if ([(({__count__ getter: (window).__defineSetter__ }))].propertyIsEnumerable(\"__parent__\")) return <x/>;} else export prototype;");
tryItOut("/*infloop*/for(({ __iterator__: constructor }) = ({ __parent__: prototype, __iterator__: __count__ }); #2=[*::*.prop]; ((function  __proto__ (__iterator__, __proto__) { yield <><x><y/></x></> } ).call(__noSuchMethod__,  /x/g ))) {throw *;\nvar prototype;\n(<x><y/></x>); }");
tryItOut("/*infloop*/for(var ({ constructor: prop }) = false; (#2=[<y><z/></y>]); ((-0).__defineGetter__(\"__parent__\", Math.pow))) {export *;{} }");
tryItOut("{export *;(undefined); }");
tryItOut("{let __parent__, constructor;L:with(<x><y/></x>){yield this; } }");
tryItOut(" \"\" \n");
tryItOut("let (__count__) { switch(<x><y/></x>) { case 2: break;  } }");
tryItOut("/*infloop*/for(__proto__ = window.valueOf(\"number\"); false; __count__--) {if(__proto__.((arguments\n))) {const prototype = <><x><y/></x></>; }if(<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")) (<x><y/></x>); else  if (__parent__ = <x><y/></x>) {return return;;gc() } }");
tryItOut("this.zzz.zzz;");
tryItOut("let __parent__, __noSuchMethod__ = <x><y/></x>;");
tryItOut("L:if(\fnew <zzz>[z1]</zzz>((true\n))) { if ((new (<x><y/></x>).__iterator__ = new false\f())) if(__iterator__ %= @foo) (<x><y/></x>); else  if (this) {return window;(undefined).watch } else {(gc()); }} else (<><x><y/></x></>);\nexport *;\n");
tryItOut("with((@foo >= <x/>))continue ;return this;gc()");
tryItOut("{[,,z1].2; }");
tryItOut("M:if( /x/g ) {gc() } else  if (3) {const constructor, __parent__;export function::prototype; }");
tryItOut("{*; }");
tryItOut("if(new (function(y) { yield y; [1,2,3,4].slice; yield y; })(prototype, 0.1)) { if (__parent__ = (prototype ? ((yield (( /x/ .isPrototypeOf(window)).constructor = prototype = window))) : new ((\n<><><!--yy--></></>))((({ __proto__: prop, prototype: constructor }) = #2=({__noSuchMethod__: .2})), ( /x/g .throw(<x/>))))) {\n((-1));/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in this) <x><y/></x> } else /*for..in*/for(const __iterator__ in ((Math.sin)(new <x><y/></x>())))gc()}");
tryItOut("/*for..in*/M:for([prototype, constructor] = constructor = (((<y><z/></y>\n))(<x/>) = (prototype)) in this.__defineGetter__(\"__count__\",  /x/g )) {const prop, __iterator__ = prototype; }");
tryItOut("let (<><bbb xmlns=\"let (__count__ = window, __parent__) __parent__\"><!--yy--></bbb></>, __count__) { /*for..in*/M:for(const constructor in @foo) {{} } }");
tryItOut("\nwhile(([[]]) && 0)let __count__ = <><x><y/></x></>, __count__ = <><x><y/></x></> = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__.__count__ in  /x/g ) export __proto__;");
tryItOut("if(( /* Comment */window))  else {}");
tryItOut("constructor = __proto__;");
tryItOut("if((yield ({prop: @foo}))) const __proto__;");
tryItOut("[(<y><z/></y>.__lookupSetter__(\"__count__\"))].filter(/a/gi)");
tryItOut("{var __proto__ = null, prop = <><x><y/></x></>; }");
tryItOut("return \t1e+81.__proto__++;");
tryItOut("if(<y><z/></y> & <><x><y/></x></>) {__count__;let __proto__ = <y><z/></y>, __noSuchMethod__; } else  if ((prop.__defineSetter__(\"constructor\", function  __noSuchMethod__ (constructor) { yield (1 for (x in [])) } ))) prototype = <><x><y/></x></>;");
tryItOut("L: {__count__ = __parent__; }");
tryItOut("if(__parent__.__noSuchMethod__ = <><x><y/></x></>.@foo.@*) { if \r((uneval((this.zzz.zzz)))) export *;} else *::*;");
tryItOut("while((<><><ccc:ddd> </ccc:ddd></></>) && 0)export __parent__;");
tryItOut("let constructor = <><x><y/></x></>, constructor;switch((({ get prop() { yield #3={a:#3#} }  }))) { default: break; case __count__ = {}: break; case 0: export *;break;  } const prototype;");
tryItOut("do /*infloop*/for(var prop = ( ''  < 0/0); (<x><y/></x> >>> @foo)--; new Array( '' ) .@ new ( /* Comment */ /x/g )(null, -0)) gc() while(((<y><z/></y>.__noSuchMethod__ = new @foo(__proto__, <x><y/></x>))) && 0);");
tryItOut("{yield; }");
tryItOut("return let ([]) ( /* Comment */<y><z/></y>).yoyo(window.__defineGetter__(\"prototype\", (<y><z/></y>).__defineSetter__));");
tryItOut("/*for..in*/for(const __iterator__ in <><x><y/></x></>) prop\n");
tryItOut("/*infloop*/for(this.__defineSetter__(\"__parent__\", function  constructor (__count__, prototype) { yield <></> } ) <<  \"\" [<x><y/></x>]; <x/>.valueOf(\"number\"); ((<><x><y/></x></>.propertyIsEnumerable(\"prop\")).__lookupSetter__(\"__count__\"))) {switch(__count__%=<x><y/></x>) { case 9: return; }{return;yield; } }");
tryItOut("if((return)) throw (@foo /= <x><y/></x>); else  if (__proto__) {return <x/>;export *; }");
tryItOut("let (({ __proto__: __noSuchMethod__, constructor: __parent__ }) = window) { /*for..in*/M:for(let [__iterator__, __proto__] = <y><z/></y> in null) {{} } }");
tryItOut("/*for..in*/for(const __parent__ in ((({}).__lookupGetter__)((new String())))){if( '' ) gc() else  if ( /x/g ) gc() else __count__ }");
tryItOut("while((<><ccc:ddd><!--yy--></ccc:ddd></>.((prototype = prototype))) && 0)/*infloop*/L:for(prototype = <y><z/></y>; ([z1,,])(); *) {gc() }");
tryItOut("M:if(1e-81) { if (__proto__ = <><x><y/></x></>) {{} } else {; }}");
tryItOut("let (__iterator__ = (([1,2,3,4].slice)(this)), __parent__ = <><x><y/></x></>) { if(<x><y/></x>) { if (@foo) yield; else let __noSuchMethod__ = <y><z/></y>;} }\nif(1e+81) {throw <><x><y/></x></>; } else  if (true) {yield;yield <><x><y/></x></>; }");
tryItOut("switch((gc).call([], )) { default: break; continue ;break; gc()break; case ({__noSuchMethod__: 0/0}): return;break; const prototype;break;  } const __count__;");
tryItOut("/*infloop*/while(*)false");
tryItOut("/*infloop*/L:while((__proto__.__iterator__)){/*infloop*/for(const  = //h\nfalse; null; __proto__) yield null;switch( '' ) { default:  } }");
tryItOut("yield ((constructor.(@foo)).propertyIsEnumerable(\"__noSuchMethod__\"));");
tryItOut("break \n");
tryItOut("if(prototype = constructor) {\texport prototype;throw <><x><y/></x></>; } else  if ([15,16,17,18].some(({}).hasOwnProperty, constructor)) {yield; }");
tryItOut("throw StopIteration\nwhile((@foo) && 0){(<><x><y/></x></>);break ; }");
tryItOut("/*infloop*/for(yield > 1e4; ([<x><y/></x>].yoyo((1 for (x in []))([z1], __parent__))); *::*) export *;");
tryItOut("for(let y in []);");
tryItOut("switch((this.zzz.zzz)(__noSuchMethod__.__count__, <y><z/></y>)) { case prop: break; default: case ((p={}, (p.z = <x/>)())): break; case 2: throw __iterator__;break;  }");
tryItOut(",");
tryItOut("L:if(-1) { if (<x><y/></x>) {3.141592653589793{} } else continue ;}");
tryItOut("let __count__");
tryItOut("if((prop = __parent__ .@x:: [,,])) let (prop = *::* %= , __proto__) { __proto__ }");
tryItOut("if(<x/>) {\texport prototype; }");
tryItOut("if((#1# <<= __iterator__.__defineGetter__(\"__iterator__\", gc)).eval(__noSuchMethod__)) {/*infloop*/L:do Math.sin while(false); const prototype;const __parent__; } else yield *::*;");
tryItOut("(function (__proto__) { yield * } ).apply");
tryItOut("<><x><y/></x></>;");
tryItOut("/*infloop*/while((uneval(new function(y) { yield y; yield;; yield y; }()))){yield\ngc()L: __count__, __iterator__; }");
tryItOut("__noSuchMethod__;const __parent__;\nbreak ;\n");
tryItOut("let(__count__) { this.zzz.zzz;");
tryItOut("with((uneval(undefined))){ }\ndo {{}break L; } while((new (({}).__lookupGetter__)(*::*)) && 0);");
tryItOut("/*for..in*/for(var constructor(<x><y/></x>) in ([constructor]) = __parent__ = *::* - (this.zzz.zzz)) const prop, prototype;");
tryItOut("/*for..in*/for(prototype in \r((Math.pow)((__iterator__ = this)))){( /x/ ); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for( /x/g ; prop; <><x><y/></x></>) {break ; }");
tryItOut("if(constructor+=__noSuchMethod__) {const __proto__ = window, __iterator__; } else {break M; }");
tryItOut("/*for..in*/for(var (constructor = null['__parent__']) in let (constructor = <y><z/></y> in .2, [, __noSuchMethod__, , getter]) (window.propertyIsEnumerable(\"function::__iterator__\"))) with({}) let(__parent__ = (\fthis.__defineGetter__(\"constructor\", [1,2,3,4].map)\n)) ((function(){let(__iterator__, constructor = window) { ;})());");
tryItOut("/*infloop*/L:while((__iterator__ = <x><y/></x>))");
tryItOut("{do { if ((false.isPrototypeOf(<><x><y/></x></>))) } while((1e+81) && 0); }");
tryItOut("/*for..in*/for(prop.__parent__ in undefined) /*infloop*/do {yield  /x/ ;prop: ({__noSuchMethod__:  \"\" }) } while(-1);");
tryItOut("/*infloop*/do {__iterator__(__count__); } while(<>new Number(case <><x><y/></x></>: break; default: return;case 1: let constructor = [,,z1];case 1: case <y><z/></y>: break; case *: export prototype;)</>.valueOf(\"number\"));");
tryItOut("if((new RangeError(<><x><y/></x></>\n, #1#))) {yield;if(<x><y/></x>) { if ( /x/ ) {} else {(-1); }} }");
tryItOut("export __parent__; const \rset\ngc()");
tryItOut("/*for..in*/L:for(const __proto__(window) in true) {const __proto__ = <x><y/></x>, __parent__; }");
tryItOut("throw 1.2e3;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = let (prop = new [z1](<y><z/></y>, <><x><y/></x></>), prop) __noSuchMethod__.@foo( /* Comment */<x><y/></x>, <x><y/></x>) in (prototype = 1e81)(((-1) ?  /x/g  : ({a2:z2}))[W.\fisPrototypeOf(*)])) if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) yield 0.1; else  if (([1,2,3,4].slice)(prop getter: [1,2,3,4].map)) {gcgc() }");
tryItOut("try { this.zzz.zzz; } catch(__count__) { prop = prototype; } \n");
tryItOut("/*infloop*/for((new prop.__iterator__ getter= ({}).__lookupGetter__()); new (undefined)(); ) yield;\nprop;\n");
tryItOut("/*for..in*/M:for([__iterator__, prop] = this.constructor in (prop = prop) ? (this.__defineGetter__(\"__count__\", ({}).hasOwnProperty)) : (/*\n*/undefined\n.constructor)++) {do {return; }//h\n while(('fafafa'.replace(/a/g, (@foo).call)) && 0);\fdo const __parent__ = <x><y/></x>, __count__ = function(id) { return id }; while((__parent__.__parent__) && 0); }");
tryItOut(" get __iterator__ __proto__ (prop, prop)eval(\"{}\", <><x><y/></x></>)");
tryItOut("/*infloop*/while(constructor)break ;");
tryItOut("/*for..in*/for(let prototype in ((eval)(this)))");
tryItOut("do /*for..in*/L:for([__parent__, __parent__] = this in this) {'haha'.split } while(((1 for (x in []))(__noSuchMethod__ = <y><z/></y>, <y><z/></y>.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty) - ((new Function)(window)))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in null) let __iterator__, __iterator__ = __noSuchMethod__;");
tryItOut("M:with(<><bbb xmlns:ccc=\"( /* Comment */1e-81)\"><ccc:eee></ccc:eee></bbb></>){gc()yield <><x><y/></x></>; }");
tryItOut("/*infloop*/L:for(<><x><y/></x></>; this;  /x/ ) {yield null;break ; }");
tryItOut("/*infloop*/for(let [[], , , , ({ __noSuchMethod__: prop, __proto__: ({ prototype: prototype, __proto__: prop }) })] = (<><x><y/></x></>.__proto__).__noSuchMethod__ = __parent__; this; ([constructor.prototype = <y><z/></y> for ((<y><z/></y>)((-1)) in {}) for (prop in arguments)])) {gc()return; }");
tryItOut("/*infloop*/while(x::__proto__ = constructor){throw <><x><y/></x></>;gc() }");
tryItOut("this.zzz.zzz;");
tryItOut("L: var constructor;/*\n*/");
tryItOut("return -0 >= <><x><y/></x></>;");
tryItOut("/*infloop*/do {export *;__iterator__, __parent__ =  /x/ ; } while(null[false].eval((#1=[#1#].isPrototypeOf(<x><y/></x\n>))));");
tryItOut("L:if(#3={a:#3#} << window) {export *;__parent__, __iterator__; } else *::*;");
tryItOut("/*for..in*/for(let [({ __noSuchMethod__: [, , , , __count__] }), ({ constructor: [, , ] }), ] in (( \"\" )(__count__ =  \"\" , arguments))) with((this if ([,,z1]\f)))if( \"\" ) { if (null) return; else yield;}");
tryItOut("prop = __count__;");
tryItOut("L:switch((__parent__ =  /x/ )) { case __count__ = window: export *; }");
tryItOut("{this.zzz.zzz;/*infloop*/do yield; while(<><x><y/></x></>); }");
tryItOut("/*infloop*/L:for((__count__ = window.hasOwnProperty(\"prototype\")); undefined.prototype in (([z1]).watch).call(this, (function ([y]) { })(), [[]])\f; eval(\"this.zzz.zzz.eval((new RegExp([z1])))\", (Object(prop)))) {return <y><z/></y>;export *; }");
tryItOut("if(__proto__.( \"\"  .@x:: null)) {yield;M:if(({__noSuchMethod__ setter: ({}).hasOwnProperty, __parent__ getter: function\f  constructor (prop, prototype) { <x/>; }  })) { if (1e4) <y><z/></y>; else const __parent__, __count__ = [[1]];} } else  if (prototype = (window ^= [[]])) ({__proto__: (new (<y><z/></y>)(<y><z/></y>))}); else prop");
tryItOut("with({}) { return [({ __proto__: constructor, __noSuchMethod__: __proto__ }), [, __parent__], , prop] = <x/>.__iterator__ = prop = prop[<x/> , <y><z/></y> -= <><x><y/></x></>]; } ");
tryItOut("L:with(((prop = @foo =  '' .__lookupSetter__(\"__noSuchMethod__\")).valueOf(\"number\"))){yield  \"\" do (<><x><y/></x></>); while(((<y><z/></y>.prop = undefined.unwatch(\"__parent__\"))) && 0); }");
tryItOut("yield\n");
tryItOut("if(eval(\"export prop;\", constructor)) while((<x><y/></x>) && 0){export *; } else  if (((function (prop, constructor) { yield ( /x/  -= __parent__) } ).call((<x><y/></x>.(<x><y/></x>))[let (__parent__ = null)  '' ], ))) {(<x><y/></x>); } else {yield; }");
tryItOut("var prototype;");
tryItOut("do {/*infloop*/for(__iterator__.(*::*); (this.zzz.zzz); __proto__.__lookupGetter__(\"__noSuchMethod__\").*) [] } while((([\nwindow.@foo for (<x/> in ((({}) for each (__noSuchMethod__ in this))))])) && 0);");
tryItOut("__proto__ getter: function  __iterator__ (__parent__) { yield null } ");
tryItOut("/*infloop*/for(let __iterator__; @foo\n.watch(\"function::__proto__\", function(y) { yield y; export *;; yield y; }); (new (<y><z/></y>.valueOf(\"number\"))((1e+81)(), (yield window)))) {__parent__; }");
tryItOut("/*infloop*/for(prototype = constructor = <><x><y/></x></>.__lookupGetter__(\"__proto__\");  /x/ .isPrototypeOf(\t<><x><y\f/></x></>); (yield (!<><x><y/></x></> /= constructor))) __count__;\nL:if(*::*) yield; else gc()\n");
tryItOut("<><x><y/></x></>if(<><x><y/></x></>) {try { const __count__ = <><x><y/></x></>, prop = <><x><y/></x></>; } catch( \"\" ) { [1,2,3,4].map } finally { export *; } ; } else {function () { new Function } *; }");
tryItOut("do {export __parent__;throw window; } while((return.__lookupGetter__(\"prop\")) && 0);\n/a/gi\n");
