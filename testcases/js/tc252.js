tryItOut("/*infloop*/for(const constructor; (@foo.watch(\"constructor\", #1=[this])); (<><x><y/></x></>)[__proto__].__defineGetter__(\"function::constructor\", <x><y/></x>)) __noSuchMethod__");
tryItOut("M:with({each: [<><x><y/></x></>].sort(/a/gi)})__count__;\n__iterator__ = __iterator__, __noSuchMethod__;\n");
tryItOut("let (__count__ = function(id) { return id }) { with({prop: [(__proto__)(__proto__) for each (__noSuchMethod__ in  \"\" ) if (<><x><y/></x></>)]})gc() }");
tryItOut(" /x/ ;");
tryItOut("return;");
tryItOut("if(this.zzz.zzz .@*:: #0=[undefined]) {export constructor;(window); }");
tryItOut("if(<x/>) {\t } else  if (*) const __iterator__ = <><x><y/></x></>, __parent__ = @foo; else gc()\nL:if(<x><y/></x>) { if (this) } else {null;(1e81); } const __parent__;\n");
tryItOut("{}");
tryItOut("/*for..in*/for(constructor(window) in (((*::*).watch)(<><x><y/></x></>))){export __proto__;\t }");
tryItOut("/*infloop*/while(*::*.__lookupSetter__(\"__iterator__\"))gc()");
tryItOut("/*for..in*/for(constructor in (((1 for (x in [])))(__noSuchMethod__ = (__count__ for each (__count__ in *)))))/*for..in*/for(const [__noSuchMethod__, __parent__] = [15,16,17,18].filter(/a/gi, window) in function::__count__) { /x/g ;{} }");
tryItOut("L:while(((\n.2 << window.watch(\"__count__\"\t, (1 for (x in [])))) |= prototype.__noSuchMethod__ = __count__ = <x/> + <y><z/></y>.eval((++undefined.valueOf(\"number\")))) && 0){return  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in ((eval)(<>prototype</>))) Function");
tryItOut("if(prop.__defineSetter__(\"constructor\", Math.sin)) {/*for..in*/M:for(var [__count__, prop] = __iterator__ in *) {} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__ in *) {export *;yield (-1); }");
tryItOut("throw StopIteration;");
tryItOut("M:switch(__noSuchMethod__ = prototype) { case 2: break; default: with(function ([y]) { }){return (-0);prototype = 033; }case <><x><y/></x></>[[,,z1]]: constructor, __parent__ = *; }");
tryItOut("if(((false.isPrototypeOf(<y><z/></y>)).__defineGetter__(\"__parent__\", yield .2))) { if ((<x/>.@*.unwatch(\"__iterator__\").@*)) if(<y><z/></y>) { if (<x><y/></x>)  else yield [,,];} else {/*infloop*/for(var __parent__; null; [,,z1]) { }(<x><y/></x>).__defineSetter__ }}");
tryItOut("if([1,2,3,4].slice([z1].__iterator__ = <y><z/></y>, true)) /*for..in*/for(var [__parent__, prop] = -3/0 in <><bbb xmlns:ccc=\"__proto__.__parent__\"><ccc:eee></ccc:eee></bbb></>) if(<x/>) { if (<x><y/></x>) {yield <y><z/></y>; } else null;}");
tryItOut("if(__proto__+=new Math.pow()) yield ({a1:1}); else  if ((yield <x/> for (function::__count__ in true) for (return; in __noSuchMethod__))) {/*infloop*/for(var __iterator__ = <x/>; <><x><y/></x></>; <y><z/></y>) {const __iterator__; }M:if(__proto__) {export prototype; } else  if (false) continue ; }");
tryItOut("/*for..in*/for(const (__count__) in (([1,2,3,4].slice)( ||  /x/  <<  /x/ ))){yield <x><y/></x> }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __count__] = * >>= <x><y/></x> in []) ;");
tryItOut("M:if(({a1:1})) return; else export __parent__;");
tryItOut("M:if(-typeof __parent__) {let __iterator__, prop; } else  if (this) {false; }");
tryItOut("try { return; } finally { __parent__ = prototype; } ");
tryItOut("if(<x><y/></x>) {export __proto__;continue ; } else yield;");
tryItOut("const constructor, __count__;");
tryItOut("if([({prototype: ({constructor:  /x/g })})]) {<><y><z/></y></>; } else  if ((yield  \"\" .hasOwnProperty(\"__parent__\"))) if(*::*) continue M;");
tryItOut("do export constructor; while((this.zzz.zzz) && 0);");
tryItOut("L:if((new (#1# % @foo)())) { if ([<x/>].some( /x/g )) const __count__;} else /*infloop*/do {yield window; } while(__noSuchMethod__ = <y><z/></y>);");
tryItOut("/*infloop*/L:for(((<x><y/></x>.__defineSetter__(\"__count__\", (-0))))(({ /*\n*/__noSuchMethod__: prototype }) = <x/>[<x/>], void *::*); [15,16,17,18].filter((__iterator__.prop setter= (new Function(\"yield case 1: break; break; default: {};break; ;\"))).watch, ([__proto__, __iterator__, , , ] = <x><y/></x>.__parent__ = prototype)); (<><x><y/></x></>++)) {with({}) { export *; }  }");
tryItOut("gc() const __iterator__;");
tryItOut("export *;");
tryItOut("/*infloop*/for((uneval(null));  /x/g .prototype = 1e+81; (*::*.__defineSetter__(\"__iterator__\", 'haha'.split).@foo)) {function ([y]) { }const __noSuchMethod__ = <x/>, prototype; }");
tryItOut("if(<><x><y/></x></>) { if (this) yield; else ([z1]);}");
tryItOut("L: {/*infloop*/for(let __count__; arguments; window) {return; }(<><x><y/></x></>); }");
tryItOut("let (constructor) { let constructor = <x><y/></x>; }");
tryItOut("/*for..in*/for(var delete in (([1,,])(undefined)))constructor =  \"\" ;");
tryItOut("do if(constructor.prop =  /x/ ) { if (((p={}, (p.z = <><x><y/></x></>)()))(<x><y/></x>)) {yield prototype; } else {throw window; }} while((({ prototype: prop, prop: [, ]\f }) = this) && 0);");
tryItOut("if(@foo) {export *; } else  if (({a2:z2})) gc() else {continue ; }");
tryItOut("{export *;{<x><y/></x>; } }");
tryItOut("let(constructor) { try { return (function ([y]) { })(); } catch(__proto__) { with({}) { this.zzz.zzz; }  } finally { with({}) { try { Math.pow } catch(prop if (function(){export *;})()) { ; } catch(prototype if (function(){(<x><y/></x>);})()) { <><x><y/></x></>; } catch(__proto__ if <x/>) {  } catch(__iterator__) { @foo; }  }  } ");
tryItOut("{([]); }");
tryItOut("for(let y in [5,6,7,8]) try { with({}) { export __parent__; }  } finally { for(let y in [5,6,7,8]) export *; } ");
tryItOut("if(null) { if (((null)[function ([y]) { }])) throw *; else const prototype, __iterator__, prop/*\n*/;}");
tryItOut("throw 1.2e3");
tryItOut("/*for..in*/L:for((__noSuchMethod__) = [15,16,17,18].some((function  __count__ (prop, function::__count__) { yield [[1]] } ).apply, 1e+81) in this) {[1,2,3,4].slice }");
tryItOut("gc()");
tryItOut("with({}) { let(__iterator__) ((function(){for(let y in []);})()); } ");
tryItOut("for(let y in []);");
tryItOut("([1,2,3,4].slice).call const [{}];");
tryItOut("/*infloop*/M:do gc() while(@foo);");
tryItOut("if((new Error(new function ([], constructor)(<x><y/></x> && function (__parent__)<x/>)(), 1e+81))) __noSuchMethod__");
tryItOut("/*for..in*/for(let __proto__ in this) throw <><x><y/></x></>;");
tryItOut("(#1=[#1#]);");
tryItOut("return;");
tryItOut("/*for..in*/for(let [prop, constructor] = Number(function ([y]) { }, 3/0).isPrototypeOf((prop.__iterator__ getter= Math.sin)).unwatch(\"prop\") in this.zzz.zzz) {let function::setter;break L; }\f");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in __iterator__ = __parent__) {{} }");
tryItOut("with({constructor: ~false}){var __parent__;/*for..in*/for(const [__count__, __parent__] = [,,z1] in true) {} }");
tryItOut("L: {try { {} } finally { [1,2,3,4].slice } gc() }");
tryItOut("while((<x><y/></x>) && 0){<><x><y/></x></>; }");
tryItOut("/*for..in*/for([this.zzz.zzz] in <x/>)  if (delete window)");
tryItOut("for(let y in []);");
tryItOut("yield;");
tryItOut("while((((new -null) | <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> >> (++({a1:1}) /= 'haha'.split(__parent__,  /x/g ) ? __iterator__ = <><x><y/></x></>.propertyIsEnumerable(\"prop\") : new (__iterator__)( /x/ , function(id) { return id })))) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(let <x><y/></x> <= arguments.__noSuchMethod__ in [,,z1]) M:if(arguments) { if (__iterator__) return;} else const __proto__, prop = [];");
tryItOut("/*for..in*/for(const prototype.prop in (eval).call(<><x><y/></x></>, prop, <><x><y/></x></>)) with({__count__: ({__iterator__: 3.141592653589793 })})L: {export setter; }\nL: throw <y><z/></y>;var __iterator__, prototype =  '' ;");
tryItOut("{/*for..in*/for([__iterator__, prototype] = (new ((function (__noSuchMethod__) { return <x><y/></x> } ).apply)(<y><z/></y>)) in ({})) arguments;L:do {var  = <x><y/></x>; } while((prototype) && 0); }");
tryItOut("while(((@foo.__lookupSetter__(\"prop\").@*[({a2:z2}).__defineGetter__(\"delete\", function  constructor ()\f { return <><x><y/></x></> } ) >>>=(this for (prop/*\n*/ in function::__noSuchMethod__))])) && 0){export __iterator__;\nexport __iterator__; }");
tryItOut("let(__iterator__, __noSuchMethod__) ((function(){(prototype.(*::*));})());");
tryItOut("let (constructor, __count__) { @foo; }");
tryItOut("__proto__: <x/>if( /x/g [__iterator__]) export *; else  if ((this.__defineSetter__(\"__count__\", (export prototype;).__defineSetter__)))  { const __count__ = *, prop; }  else if([]) { if ( '' ) {export __noSuchMethod__; }} else return 0;");
tryItOut("switch(<x/>\n) { default: break L; }");
tryItOut("/*for..in*/for(const __parent__ = ((window)().watch(\"__count__\", Function)) in  '' ) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in this) function (__iterator__, prototype) { __proto__ }  }");
tryItOut("{/*infloop*/for(const prototype; __iterator__, __iterator__;; (__noSuchMethod__ = window)) {M:if(true) var prop, __proto__ = <x><y/></x>; else (<x><y/></x>); } }");
tryItOut("return;");
tryItOut("/*infloop*/do const __iterator__ = <><x><y/></x></>, __count__ = <y><z/></y>; while(((prop.propertyIsEnumerable(\"__count__\") for (__proto__ in __parent__) for each (constructor in this))));");
tryItOut("yield [this.__defineSetter__(\"__iterator__\", function(y) { yield y; (1e-81);; yield y; })].sort((Function).apply);");
tryItOut("let (__iterator__ = function(id) { return id }, prototype = *::*) { yield; }");
tryItOut("{\n }");
tryItOut("/*infloop*/prop");
tryItOut("throw <><x><y/></x></>;");
tryItOut("__iterator__\n/*infloop*/M:do yield; while(0.1);\n");
tryItOut("throw this.__defineGetter__(\"__iterator__\", function  __count__ () { yield 0/0 } )(); = __proto__;");
tryItOut("L: {}\n");
tryItOut("L: with({}) { let(__noSuchMethod__) ((function(){return *::*;})()); } ");
tryItOut("/*infloop*/for(let this.__defineGetter__(\"__iterator__\", [1])['prop'] = (__noSuchMethod__ = *::*).eval(__parent__ = <y><z/></y>, __noSuchMethod__ = *); (__proto__.__lookupSetter__(\"prototype\")); (__parent__.__parent__ getter= 'haha'.split)) /*infloop*/prototype const prototype;");
tryItOut("/*infloop*/while(((new Function(\"return;\")) instanceof \t(({ get function::__parent__ prototype (__noSuchMethod__) { return <>\f<x><y/></x></> } , __proto__: <><x><y/></x></> }))))/*for..in*/for(const undefined.prototype in *) gc()\t");
tryItOut("/*infloop*/do {set;function  prototype (){} } while(('haha'.split).call(this, ).__proto__);");
tryItOut("return;");
tryItOut("if(((p={}, (p.z = prototype = prototype)())) ? undefined : <x><y/></x>.propertyIsEnumerable(\"#1=[#1#]\").__noSuchMethod__) {yield <x/>;export prototype; }");
tryItOut("/*for..in*/for(let //h\nconstructor in  /* Comment */<x><y/></x> / (delete <><x><y/></x></>)) {throw [z1,,];if(true *= *::*) {(#1#); } else  if ( \"\"  && this) export *; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(const ((-1)) in yield (1e4.constructor).unwatch(\"__noSuchMethod__\")) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in prototype) {(<x/>); }");
tryItOut("yield <> get __parent__ __proto__ (__noSuchMethod__) { yield <><\tx><y/></x></> } </>;");
tryItOut("/*infloop*/do {return #0=({prop: new [z1,,]()});with({__count__: (__noSuchMethod__.((uneval(<><x><y/></x></>))))}){{continue L;/a/gi } } } while((constructor.unwatch(\"__count__\") in ([1,,])(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)) = window.prop = <x><y/></x> for each (__parent__ in  /x/ ) & __count__.constructor = <x><y/></x>.propertyIsEnumerable(\"prop\").hasOwnProperty(\"__count__\"));");
tryItOut("__count__.__noSuchMethod__ = __noSuchMethod__;");
tryItOut("let (__count__, [, prototype, prop, __count__, prop] = __count__+=*::*) { export __noSuchMethod__; }");
tryItOut("__proto__ = this;\nlet __noSuchMethod__;\n");
tryItOut("/*for..in*/M:for(var __iterator__('fafafa'.replace(/a/g, [1,2,3,4].slice)) in  \"\" ) {{}export *; }");
tryItOut("L:while((*) && 0)M:if(yield __count__.hasOwnProperty(\"__parent__\")) { if (let (__iterator__, prototype = false) (-0)) {function(y) { yield y; 3.141592653589793;; yield y; } }} else return;");
tryItOut("while((this) && 0)gc()");
tryItOut("do {let (prototype) { let __iterator__, prop; } } while((new <xxx>{__proto__}</xxx>([1], (__iterator__%=(window && <x/>)))) && 0);");
tryItOut("if(<><x><y/></x></>) var __parent__ = <><x><y/></x></>, prototype;");
tryItOut("var __count__ = @foo;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __parent__] = @foo in <><x><y/></x></>) {export *; }");
tryItOut("with({__noSuchMethod__: })({}).__lookupGetter__");
tryItOut("M:switch((({ __iterator__: __proto__, prototype: [, , constructor, __count__, prototype] }) = __count__)\t) { default: export __iterator__;break; break; return true; const prototype;break; case 4: break;  }");
tryItOut("let (({ __proto__: ({ prototype: __parent__ }), __parent__: __iterator__ }), __noSuchMethod__ = (p={}, (p.z = ('fafafa'.replace(/a/g, Math.pow)))())) { throw <x/>.propertyIsEnumerable(\"prop\") == window ^ __parent__; }\nM:if( /* Comment */(yield <><x><y/></x></>)(window << *,  /x/ )) { if ([11,12,13,14].map) {L:if(*) {export constructor;; } else  if (<x/>) continue ; else ;throw *; }} else {throw @foo;[1]; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in prototype) yield false;");
tryItOut("L:switch(function(id) { return id } %= prop = false) { default: break; case ([[1]].yoyo(<x><y/></x>)).__defineSetter__(\"prop\", [1,2,3,4].slice): break; with({({a1:1}): \t[z1,,] ? this :  '' }); }");
tryItOut("/*infloop*/M:do {this;; } while(([[]] ? <x/> : this.@*) @ ({a1:1}));");
tryItOut("throw null");
tryItOut("/*infloop*/M:for(each\t; ; ) /*infloop*/while(1e+81){const __noSuchMethod__ = <><x><y/></x></>, __parent__ = ({})const __count__; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in (<y><z/></y>.isPrototypeOf( { return  ''  } ))) (false); }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(window)return;");
tryItOut("L:with({function::prototype: ([15,16,17,18].some(eval, undefined))}\r){let prop = @foo, __count__ = <y><z/></y>;{} }\nL:if(<x><y/></x>) { if (<x><y/></x>) {export __count__; }} else gc()");
tryItOut("/*for..in*/for(const prototype in ((new Function)(__noSuchMethod__ = function::prototype))){export *;(1 for (x in [])) }");
tryItOut("return null;");
tryItOut("{gc()gc() }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__.__noSuchMethod__ in ((({ __proto__: __parent__ }))(eval(\"(new (((1 for (x in []))).call)(undefined))\", (new Function))))){if(__noSuchMethod__.prototype setter= ([1,2,3,4].map).call) Math.pow }");
tryItOut("{const __iterator__ = <y><z/></y>, __parent__ = *::*;/*infloop*/while(__noSuchMethod__[<><x><y/></x></>]){__parent__ = <y><z/></y>.@foo, __proto__ = yield, prop = <><x><y/></x></> } }");
tryItOut("L:while((prototype =  \"\" ) && 0){return  \"\" ;yield <y><z/></y>; }");
tryItOut("{; }");
tryItOut("if((eval(\"yield;\", __parent__))) { if ([15,16,17,18].filter(prototype, undefined)) L: {(0.1); }} else ;");
tryItOut("L: return;");
tryItOut("/*for..in*/for(let prototype = undefined ? prototype :  /x/g .hasOwnProperty(\"get\") in (<x><y/></x>.(true).throw(this.zzz.zzz))) {throw StopIteration; }");
tryItOut("with({}) { (this); } ");
tryItOut("let __noSuchMethod__ = <><x><y/></x></>, __iterator__ = <y><z/></y>\n");
tryItOut("{(null);break ; }");
tryItOut("if(break M) { if (5.0000000000000000000000) throw  '' ; else {yield @foo;__proto__; }}");
tryItOut("/*for..in*/for(var __noSuchMethod__ in <x><y/></x>) {throw  /x/g ;export *; }\n( /x/g );");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((Function)((this.(<x/>))))){\tconst prototype = 0x99; }");
tryItOut("if(@foo) { if ( '' ) ; else {return 0.1; }}");
tryItOut("/*infloop*/for( /x/ ; __proto__.__parent__; *) {constructor, prototype;{} }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) with({}) with({}) { let(({ __proto__: __iterator__ }), prototype) ((function(){return;})()); } ");
tryItOut("(__parent__);");
tryItOut("@foo;\ngc()\n");
tryItOut("if(((yield new String())) ? ([prototype].filter((<x><y/></x>).__defineSetter__)) in (uneval(<y><z/></y>)) : ([,] ? <><x><y/></x></> : <x><y/></x> > Boolean([1,,]))) {1e-81/*infloop*/for(<><x><y/></x></> == (__iterator__ >>= *::*); ((window)(({a2:z2}), <y><z/></y>)).yoyo(__proto__ = [,,z1]); (false for (__count__ in __proto__))) L: export prop; } else  if ([({ x::constructor: __parent__, prototype: __noSuchMethod__ }) = prop]) throw Number();");
tryItOut("/*infloop*/for(constructor; __proto__ * this; [15,16,17,18].\tsome(Math.sin, <><x><y/></x></>)) { const __noSuchMethod__; }\nlet __parent__ = <x/>\n\n");
tryItOut("let (prototype, __proto__ = @foo) { (function (prototype)[,]).call }");
tryItOut("\fwhile((eval(\"export *;\", prototype)) && 0)");
tryItOut("L:if((__noSuchMethod__ = constructor.__count__ = <><x><y/></x></> > (-1) .@*:: ([11,12,13,14].map))) { if (this.__defineSetter__(\"constructor\", Math.sin)) yield 1e+81 .@*:: throw *::*;} else {/*for..in*/for(__parent__ = (__noSuchMethod__ = 3.141592653589793) in *::*) {throw <x/>; }/*for..in*/for(const __count__ = [15,16,17,18].some(undefined, (function::__parent__ = 1e81)) in <y><z/></y>) const __count__ = function ([y]) { }, __parent__ = this; }");
tryItOut("/*for..in*/for(let __parent__ = (Function) in this.__defineGetter__(\"constructor\", prototype)) {yield;throw -1; }");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(const __iterator__ in (((@foo).watch)(.2)))const constructor = 1.3, __count__ = <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(({ __proto__: ({ __noSuchMethod__:  for (__parent__ in <y><z/></y>\n) for (@foo['__noSuchMethod__'] in <><x><y/></x></>) for each (prototype in <x><y/></x>) }), __parent__: ({ __count__: ({ __proto__: [, __proto__, __proto__, ] }), __count__: ({ prototype: ({ __iterator__: constructor }) }) }) }) = constructor = (__noSuchMethod__.unwatch(\"__count__\")); constructor = [z1,,]; [11,12,13,14].sort) {}");
tryItOut("throw constructor;");
tryItOut("if(0 / 1e4 :: <x><y/></x> in <x><y/></x>) yield; else /*infloop*/L:do {; } while(\f([[]] :: true));");
tryItOut("yield\n");
tryItOut("");
tryItOut("/*infloop*/for(var prop; (<x><y/></x> ? this : <x><y/></x>); -3/0) /*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x><y/></x>) {export __parent__;__count__ = prop, __iterator__ = *::*; }\nlet (__count__, __iterator__) { export __count__; }\n");
tryItOut("continue ;");
tryItOut("with({prototype: false > prototype = constructor})L:  /x/ ;");
tryItOut("/*for..in*/for(var constructor = constructor.__defineSetter__(\"prototype\", function () { return arguments } ) in (new (gc)( \"\"  .@x:: <y><z/></y>).@*)) {let prop = <><x><y/></x></>; }");
tryItOut("do {L: let __proto__; } while((this[<x><y/></x>]) && 0);");
tryItOut("yield (*::*.throw(@foo) >>= false);");
tryItOut("case ({ __iterator__: __count__, __count__: __parent__ }) = \tthis || <x><y/></x>: \nvar prototype = *;\n");
tryItOut("let([z1], __iterator__) { let(__count__ = [1,,] ..  /x/ ) { return\n");
tryItOut("(<x><y/></x>);");
tryItOut("yield [,];");
tryItOut("L:switch(#2=(Function).call( /x/ , )) { default: yield [(window if (__noSuchMethod__)) for ((this\t)(<y><z/></y>) in <x><y/></x>) if (prototype)];__parent__ = __iterator__;break; break;  }");
tryItOut(";");
tryItOut("/*infloop*/for(prototype; ((__noSuchMethod__ = //h\nthis) >  '' ); ({__proto__: *::*})) {/*infloop*/for(constructor; <x/>; __count__) export *;with({__parent__: (__count__.hasOwnProperty(\"__iterator__\"))}){} }");
tryItOut("with({__count__: this.zzz.zzz}){L:if(\fundefined) { if (<x><y/></x>) let __parent__, __noSuchMethod__ = <x><y/></x>; else {__parent__ =  /x/ , __count__ = <><x><y/></x></>;gc() }} }");
tryItOut("<!--yy-->");
tryItOut("/*infloop*/M:for(({ __noSuchMethod__: prototype }) = prototype.__proto__ setter= \n__parent__ getter: /a/gi.__lookupGetter__(\"prototype\"); __parent__; ([15,16,17,18].some(<y><z/></y>, (false)())).__parent__ = [1,,]) {/*infloop*/do /*for..in*//* nogeckoex bug 349964 */M: for  each(const (prototype) in undefined) {const __proto__ = <x><y/></x>, prop = *;export prototype; } while(this.__defineGetter__(\"__iterator__\", function  constructor (__proto__, prop) { return window } )); }");
tryItOut("/*for..in*/M:for(constructor = eval(\"throw new String(window);\", @foo.valueOf(\"number\")) in (new RangeError(this))) {{} }");
tryItOut("while((__iterator__ = __count__|=prototype = window) && 0)/*for..in*/L:for(var __count__ = const prototype = 1e4; ? window : 1e-81.hasOwnProperty(\"constructor\") in -3/0) M:while(( \"\" ) && 0)<><x><y/></x></>;\nfor(let y in []);\n");
tryItOut("do {const prototype, __noSuchMethod__; } while((@foo) && 0);");
tryItOut("let(__iterator__ = (gc).call((__count__ = window), )) { throw StopIteration;");
tryItOut("if(true) { if ((\f__count__.prototype getter= <y><z/></y>)) {yield *;break L; }} else export [[1]];");
tryItOut("L:if(undefined) export *; else  if (([](<x/>, <x><y/></x>))) {var prototype; }");
tryItOut("{break ;__proto__, prototype; }");
tryItOut("/*infloop*/do {. } while(<><x><y/></x></>);");
tryItOut("/*infloop*/for(let __noSuchMethod__; (typeof [ /x/g ]); yield eval(\";\", #1=[#1#])) ;");
tryItOut("for(let y in [])\n");
tryItOut("return;");
tryItOut("/*infloop*/for(const ({ __parent__: constructor }) = [[]]; (new (function  prototype (prototype)false)(prop: @foo)) > (yield __iterator__); (({__proto__ getter: ({}).__lookupGetter__ }))) {gcyield this; }");
tryItOut("do {constructor =  '' ; } while((Function) && 0);");
tryItOut("{export *;while((__count__ = @foo) && 0){} }");
tryItOut(" for (__iterator__ in true.isPrototypeOf(.2).eval([z1,,].isPrototypeOf(true))) for each (__count__ in [,,z1] , __iterator__)");
tryItOut("let(__iterator__) { function::__iterator__;");
tryItOut("do {__noSuchMethod__ = __iterator__; } while((<x><y/></x> && 1e+81) && 0);");
tryItOut("/*for..in*/for(constructor in ((Math.pow)((__noSuchMethod__.__noSuchMethod__).@*))){{if(({})) { if (#1#) (-0); else return;} } }");
tryItOut("if((constructor.unwatch(\"__noSuchMethod__\"))) {yield; }");
tryItOut("{(<x/>); }");
tryItOut("{<y><z/></y>;{throw <><x><y/></x></>; } }");
tryItOut("/*for..in*/for(prototype in ((function (function::function::__noSuchMethod__) {  } )( \"\" )))gc()");
tryItOut("if(window[4.]) {;return; } else  if (constructor\n) function () { return 3.141592653589793; } \n(<x/>)\nlet(__parent__) ((function(){for(let y in [5,6,7,8]) export *;})());");
tryItOut("<x><y/></x>");
tryItOut("/*for..in*/for([prop, __iterator__] = <><x><y/></x></> in <><x><y/></x></>) function(y) { yield y; export constructor;; yield y; }");
tryItOut("prototype = <><x><y/></x></>, __noSuchMethod__");
tryItOut("throw undefined;\nL: __parent__ = 1e81, prop =  \"\" ;\n");
tryItOut("let (__iterator__ = ()) { /a/gi }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in this) var function::__noSuchMethod__\n");
tryItOut("with({}) for(let y in [5,6,7,8]) yield 033;");
tryItOut("([<x><y/></x>].map(function(q) { return q; }) -= (constructor = __iterator__))");
tryItOut("/*infloop*/for(@foo * *::*; __iterator__.constructor = <><x><y/></x></>(<x><y/>\f</x>, this); this) __proto__ = <><x><y/></x></>, prototype = @foo;");
