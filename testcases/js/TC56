
tryItOut("/*infloop*/while(__noSuchMethod__ = ())var constructor, __iterator__ = window;");
tryItOut("M:if(yield .2.__defineSetter__(\"__noSuchMethod__\", /a/gi)) { if ([15,16,17,18].map(function  function::prototype (prop) { yield <><x><y/></x></> } , <x><y/></x>).valueOf(\f\"number\")) throw *;} else {}");
tryItOut("while((__proto__.__count__ = (*::* |= function ([y]) { })) && 0){export *;export *; }");
tryItOut("");
tryItOut("L:switch(prop.prototype) { default: export *;break; case 2: var prop, prototype;break; case 2: break; case 5: return;case 2: break;  }\n");
tryItOut("L:if(<x><y/></x>.(window)) {{}Function }");
tryItOut("if(RegExp(Iterator(#1=({__count__: <x><y/></x>}), window), undefined--.propertyIsEnumerable(\"prop\"))) { if (<y><z/></y> <= function(id) { return id }++) {;yield -3/0; }} else {yield <x><y/></x>;{} }");
tryItOut("M:while((undefined) && 0){throw <x/>; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(__parent__ = __noSuchMethod__ in window) __noSuchMethod__ = [z1], __count__;");
tryItOut("with({__noSuchMethod__: ( /x/  - this)}){M:if(<><x><y/></x></>) { if (<y><z/></y>) {return this;yield #1=[#1#]; }} else constructor, prototype; }");
tryItOut("/*for..in*/M:for(const __iterator__ in (((1 for (x in [])))(new (Math.sin)(<y><z/></y>, <x/>)))\f){M:if(prototype) var __parent__, __iterator__; else  if (*) {gc() } }");
tryItOut("this.zzz.zzz;");
tryItOut("L:with(__proto__ = __parent__)L: {; }");
tryItOut("M:do {return <><x><y/></x></>; }\t while((<x><y/></x>.valueOf(\"number\") /= eval(\"3\", null)) && 0);");
tryItOut("/*for..in*/ super ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in [true]) L: let constructor = {};");
tryItOut("L: continue M;");
tryItOut("/*for..in*/L:for(let [prototype, prop] = [true] in __count__ = prop) {const __count__, __proto__ = *::*;return window; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("let (__parent__) { function  __iterator__ (prototype, __count__)return [] }  }");
tryItOut("constructor = prop;");
tryItOut("switch(new (function(y) { yield y; {}; yield y; })(<x><y/></x>)) { default: case 5: throw __iterator__; }");
tryItOut("const constructor = *\n");
tryItOut("with(__proto__ *= <y><z/></y>)const undefined = *, __parent__;");
tryItOut("L:if( \"\" ) {; } else ({}).__lookupGetter__\n/*infloop*/do (function  __proto__ (__parent__) { export *; } ).call while(<x><y/></x>);");
tryItOut("M:if(*) {{} } else  if (@foo) {;export prop; } else {(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(const this in ((Math.pow)(prototype = function ([y]) { }\r)))yield constructor;while((window) && 0)return prop getter: eval;");
tryItOut("/*infloop*/for(const __proto__; -let (__iterator__) __proto__; (#1#)[\f<><x><y/></x></>.__lookupSetter__(\"__iterator__\")]) let __count__;");
tryItOut("/*infloop*/L:while(({ set __proto__(__iterator__, delete) { {} }  }))/*infloop*/do throw <x/>; while(__count__ = __iterator__);");
tryItOut("switch(yield window.throw( '' )) { \rcase 4:  }");
tryItOut("throw yield 5.0000000000000000000000; const prop;");
tryItOut("/*for..in*/M:for(let function::__noSuchMethod__ in new this) {const __proto__, gc(); }");
tryItOut("L:if(0\t(function(id) { return id })) {x::constructor;throw <><x><y/></x></>; } else  if (<x><y/></x>) export __iterator__;");
tryItOut("\t");
tryItOut("export *;");
tryItOut("const prop, __iterator__;");
tryItOut("with(<><x><y/></x></>){const __iterator__ = __parent__, __proto__;; }");
tryItOut("M:if((eval(\"\", false))) { if (__parent__) {__iterator__ }} else {prototype; }/*for..in*/for(let prop in ((*)(new ((yield <x><y/></x>;).__defineSetter__)(<><x><y/></x></>, <><x><y/></x></>)))){prop = <x><y/></x>, prototype; }");
tryItOut("if((({}).watch(\"prototype\", (new (prop)(<x><y/></x>)).__defineSetter__))) {gc() }\n/*for..in*/for(<x><y/></x> += this['__noSuchMethod__'] in (([1,2,3,4].slice)(constructor =  '' .eval( '' )))){/*for..in*/for(let __parent__ in (('haha'.split)(<y><z/></y>))){const __proto__; } }");
tryItOut("let(__iterator__ = @foo.__lookupGetter__(\"constructor\"), prop = (eval(\"<x><y/></x>\\n.constructor\", ({prototype getter: function(y) { yield y; __parent__; yield y; } })))) ((function(){with({}) { with({}) __proto__ = prop; } })());");
tryItOut("__proto__ = __proto__;");
tryItOut("try { try { var __iterator__; } catch(__parent__) {  for each (__parent__ in 4.) }  } catch(constructor if <><x><y/></x></>.isPrototypeOf(false)) { with({}) return *; } catch(prototype) { for(let y in [5,6,7,8]) return <><x><y/></x></>; } ");
tryItOut("if(__iterator__ =  /x/g ) {return -3/0; } else  if (<>\f</>) yield; else yield;");
tryItOut("/*for..in*/for(var true.eval(4.).__parent__ = <><>eval(\"*::*\", <><x><y/></x></> :: __parent__) .@x:: void  \"\" </></> in *) return;");
tryItOut("return;{}\nwith(3/0)/*\n*/prototype;");
tryItOut("return; const prop;");
tryItOut("with(+(__parent__ || 1e-81).__lookupSetter__(\"__parent__\")){M:if([11,12,13,14].some) { if (1e4) gc() else {<x><y/></x> }} }");
tryItOut("/*for..in*/L:for(var [constructor, __noSuchMethod__] = eval in __iterator__) {; }");
tryItOut("throw __count__;");
tryItOut("if(false(window, (-1))) {throw \n<x><y/></x>; } else (undefined);");
tryItOut("/*for..in*/L:for(prototype in (prop+=<><x><y/></x></>)) return 1e4;");
tryItOut("for(let y in []);");
tryItOut("L:do {/*for..in*//* nogeckoex bug 349964 */ for  each(var (<y><z/></y>)(null) in *::*) {null, __iterator__ =  /x/ ; } } while((__iterator__ = ) && 0);");
tryItOut("L:do switch(4.) { case 3: const __proto__ = undefined, function::__proto__ = <><x><y/></x></>; } while((this.zzz.zzz) && 0);");
tryItOut("with({}) { prototype = constructor;//h\n } ");
tryItOut("const __noSuchMethod__ = true;");
tryItOut("gc const __proto__;");
tryItOut("const __parent__;");
tryItOut("const prop = 0/0;");
tryItOut("with({prop: this.__defineGetter__(\"__count__\", (1.3).__defineSetter__)}){return; }__parent__ = __iterator__;");
tryItOut("{}");
tryItOut("(1 for (x in []))");
tryItOut("{yield;var __parent__; }");
tryItOut("M:while((constructor.__count__ getter= null) && 0){return <><x><y/></x></>;gc() }");
tryItOut("try { yield new (prototype || prototype)(); } catch(__parent__ if __proto__.prototype = eval(\"switch(*::*) { default:  }\",  \"\" .yoyo(({a2:z2})))) { throw StopIteration; } //h\ncatch(__proto__) { yield (constructor = <x/>); } finally { return [new Number(@foo)].filter(1e+81); } ");
tryItOut("/*for..in*/for(const [prop, __count__] = ([15,16,17,18].some((this).watch, __parent__)) in (<bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>\n)) /*infloop*/for(let __count__ = (undefined.isPrototypeOf(<x><y/></x>)); (new window()); (__noSuchMethod__) =  /x/ ) __parent__ = [1];");
tryItOut("L:if(<\f><x><y/></x></>.propertyIsEnumerable(\"__proto__\")) Math.sin");
tryItOut("/*infloop*/for(var __parent__; [[,,]].sort( '' ).unwatch(\"__noSuchMethod__\"); *) {([,,z1]); }");
tryItOut("yield <x/>;");
tryItOut("do {throw this;yield <y><z/></y>; } while((([15,16,17,18].some(this,  '' ))[({prop: <><x><y/></x></>.*,  get __iterator__ __count__ (__parent__, __parent__) { yield 033 } \t })]) && 0);");
tryItOut("if(-0) prop else yield;");
tryItOut("/*infloop*/M:while((yield [,,]).constructor){\n/*infloop*/for(const __noSuchMethod__; @foo; __iterator__)  /x/g ; }");
tryItOut("if((this.__defineGetter__(\"prop\", Function))) { if ((let (__noSuchMethod__) <><x><y/></x>\t</>).prop) {with({__proto__: (false &= constructor)})yield;return; } else (this.__defineGetter__(\"prop\", [1,2,3,4].slice));}");
tryItOut("/*for..in*/for(let [function::__parent__, __noSuchMethod__] = *::* in -1) {export __count__; }");
tryItOut("continue L;");
tryItOut("if(((__noSuchMethod__ &= <x/>) >= <><x><\fy/></x></>))  else  if (this.__defineGetter__(\"prototype\", <x/>)) {*;return __iterator__; }");
tryItOut("with({}) __parent__ = __count__;");
tryItOut("return prop");
tryItOut("{}\nexport prop;\n");
tryItOut("L:if((__noSuchMethod__ = <><x><y/></x></>)) { if (@foo) /*infloop*/while(typeof let (x::__count__, __proto__) this){const ;export *; } else L:if((constructor =  \"\" )) export __noSuchMethod__; else __parent__ = __parent__;}");
tryItOut("function  __proto__ (__parent__)[[]]");
tryItOut("/*infloop*/while(({prop: new -1(*, <y><z/></y>).__defineSetter__(\"set\", null) }))switch((new <x><y/></x>(@foo))) { case 7:  }");
tryItOut("/*infloop*/for(const __proto__ = (*::* >>= false); (({__noSuchMethod__: * })); ([ \"\" ])) {let __count__; }\nwhile((({prop: <x/>})) && 0);");
tryItOut("if((-1)) {constructor, __parent__ = window;throw *; } else yield __parent__;");
tryItOut("{}");
tryItOut("if( /x/g ) {/*infloop*/while(window)var function::prototype, __noSuchMethod__ =  /x/ ; }\n");
tryItOut("let ( window __proto__) {   }");
tryItOut("/*infloop*/do {function (__parent__)<><x><y/></x></> } while(<x/>);");
tryItOut("{return; }\n");
tryItOut("with({__parent__: <y><z/></y>})export __count__\nlet (prototype = -0.__lookupSetter__(\"__proto__\")) { with(__noSuchMethod__ = <x><y/></x>)\f{return;var prototype; } }");
tryItOut("if(constructor - <><x><y/></x></>) \f{/*infloop*/do {export *; } while( \"\" );( /x/g ).watch }");
tryItOut("/*for..in*/for(let \t((constructor)) in ((prop = ({a1:1}))(*::*)))__noSuchMethod__, prop;");
tryItOut("L:if((__parent__)[<><xxx>{prototype}</xxx></> - __parent__.__parent__ = (__noSuchMethod__ = <x/>).__count__ = this]) M:with(<><x><y/></x></>){yield <><x><y/></x></>;\f } else  if (()) {return;prototype; }");
tryItOut("if(window) {} else  if (0/0) {{}break M; }");
tryItOut("return <x><y/></x>;\nexport each;\n");
tryItOut("/*for..in*/for(var __count__ in ((({}).__lookupGetter__)(<x><y/></x>))){var __noSuchMethod__ = <x><y/></x>, prototype = *; }");
tryItOut("{throw *::*;return <><x><y/></x></>; }");
tryItOut("with({}) { throw prop; } ");
tryItOut("do return @foo; while((({__proto__: (@foo.propertyIsEnumerable(\"__proto__\")), constructor: <x/>.constructor = <x><y/></x> })) && 0);");
tryItOut("throw StopIteration;");
tryItOut("with((__parent__)){<x/>; }");
tryItOut("L:if(new Object(false, {}) @ 4. for each (constructor in <x><y/></x>)) { if (*) const prototype, __count__ = *; else {const prototype = <x><y/></x>, __noSuchMethod__ = <x/>;<y><z/></y> }}");
tryItOut("prop = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__.__parent__ in __parent__) {const __parent__, __parent__; }");
tryItOut("with(({prototype: constructor = constructor}))/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__.__iterator__ in <x/>) yield @foo;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = prototype in  \"\" ) ;");
tryItOut("/*infloop*/for(var constructor; <x/>; 0.1) {return undefined;; }");
tryItOut("throw <x><y/></x>;");
tryItOut("/*infloop*/for(({ constructor: __parent__, __parent__: __proto__ }) = (prototype.constructor setter=  '' ); new Iterator(); #1=[#1#].propertyIsEnumerable(\"prototype\")) {export *; }");
tryItOut("{return; }");
tryItOut("M:if((<x/> ? __noSuchMethod__ : <x/>)) { if ([11,12,13,14].map.propertyIsEnumerable(\"constructor\").eval(__parent__)) if(({  for (__count__ in true) __count__: (<x><y/></x>.(@foo)) })) { if (\nMath.pow) throw window;} else ; else break L;}");
tryItOut("with({__count__: *::*}){/*\n*/export __count__; }");
tryItOut("do throw <><x><y/></x></>; while((<><x><y/></x></> += <y><z/></y>.__defineSetter__(\f\"__proto__\", prop)) && 0);");
tryItOut("M:do {yield *::*;let __iterator__ = @foo; } while((__parent__ = (-1)) && 0);");
tryItOut("/*for..in*/for(const __proto__ = prototype in  /x/g ) function (__count__, constructor) { yield __proto__ } ");
tryItOut("yield <x/>;");
tryItOut("if(<x><y/></x>) { if (*::*) yield;} else return;");
tryItOut("gc()");
tryItOut("let ([], __noSuchMethod__) { {; /x/  } }");
tryItOut("return (3/0.isPrototypeOf(undefined));");
tryItOut("/*infloop*/do {L: {export *; }let __proto__;/*for..in*/M:for(const constructor in ((function (__count__, __iterator__) { return window } )(({a1:1}))))return; } while((prop = .2) in (constructor.yoyo(1.2e3)));");
tryItOut("{/*infloop*/L:for(var __iterator__; prop = prototype; __noSuchMethod__(1e-81) = ((uneval([,,])))) {var __proto__;export *; } }");
tryItOut("M:with(<x/>)<y><z/></y>;");
tryItOut("with({__proto__: ([11,12,13,14].some) * (__noSuchMethod__ = @foo)})/*infloop*/do var constructor = <y><z/></y>, __count__ = #1#; while(<x><y/></x>);");
tryItOut("L:while((this.__defineSetter__(\"__parent__\", function(q) { return q; })) && 0)/*infloop*/do  while(<y><z/></y>);");
tryItOut("throw StopIteration;");
tryItOut("with({\f__parent__: undefined}){prototype; }");
tryItOut("if(this.zzz.zzz > arguments) default:  else (null);");
tryItOut("__count__ = __proto__;");
tryItOut("/*for..in*/for(constructor in ((Function)(__iterator__.throw( /x/ )))){export *;{if(yield function ([y]) { }) {return <x><y/></x>; } } }");
tryItOut("/*infloop*/do  while(({__proto__ getter: [], __parent__: <y><z/></y> }) .@ new (({}).__lookupGetter__)(<x><y/></x>, __parent__));");
tryItOut("{if((*::* for \reach (__proto__ in __iterator__).yoyo(null === true))) { if (+ \"\" ) {gc() }} else const __count__, prototype = *::*; }");
tryItOut("/*infloop*/for(var __parent__; function::constructor = #1#/*\n*/ !== __count__ != <><x><y/></x></>[__proto__%=[constructor, constructor, __proto__, , __count__] = (-1) :: <x><y/></x>]; (uneval(<><x><y/></x></>))) {var prop, __parent__;L: /*for..in*/for(var __proto__ =  /x/  in undefined) export *; }");
tryItOut("let(__noSuchMethod__) { continue M;");
tryItOut(";");
tryItOut("let (constructor, yield = prop.__lookupGetter__(\"__noSuchMethod__\")) { __count__; }");
tryItOut("/*infloop*/do {/*infloop*/M:while((true &= (* === <x><y/></x>))){yield; }var __parent__, __proto__;if(.2) { if ([z1]) let __proto__, __parent__ =  '' ;} else (<x/>); } while(([15,16,17,18].filter(__noSuchMethod__, __iterator__ = <x><y/></x>)));");
tryItOut("[1,2,3,4].slice");
tryItOut("let __noSuchMethod__ = __parent__, __iterator__;");
tryItOut("/*infloop*/do {this;const constructor = <><x><y/><\r/x></>; } while(new ('haha'.split)(<><x><y/></x></>, <y><z/></y>));");
tryItOut("L:if(({__iterator__: [,,z1] })) /a/gi");
tryItOut("L:do {return;; } while(((this.zzz.zzz)) && 0);");
tryItOut("/*infloop*/for(var __proto__; [1,,]; ) return null\n");
tryItOut("L:switch(((prop)) = (@foo.__defineSetter__(\"constructor\", __iterator__).*)) { default: break; let __parent__ = *; }");
tryItOut("let (__parent__) { {return *::*;yield 4.; } }export *;");
tryItOut("/*for..in*/L:for(const (function  __noSuchMethod__ () { return <><x><y/></x></> } ())['__proto__'] in ((function  __count__ (prop, __proto__) { with(({}))var __parent__ = <x><y/></x>;\t } )([,,z1].__defineGetter__(\"prototype\", /a/gi))))({ __iterator__: constructor })");
tryItOut("/*for..in*/L:for(__iterator__ in  '' , constructor) {export *;if(true) { if ( \"\" ) ;} else {{}gc() } }");
tryItOut("L:if((new *())(__iterator__ = __parent__.valueOf(\"number\"), __count__ =  /x/ )) {yield;; } else  if (5.0000000000000000000000.eval(*::*)) {export *; }");
tryItOut("/*infloop*/for(((( /x/g ).watch()).__lookupGetter__(\"__proto__\")); (this.zzz.zzz); <><zzz>__parent__ = *</zzz></>) {__proto__ =  '' ;\nyield <><x><y/></x></>;\n }");
tryItOut("{export __proto__; }");
tryItOut("if(*::*) {export __parent__;gc } else (__parent__);");
tryItOut("for(let y in [5,6,7,8]) try { throw StopIteration; } catch(prop) { return; } ");
tryItOut("/*infloop*/for(prototype; ((yield !== __count__) .. \tprototype = ({}).unwatch(\"__iterator__\")); eval(\"(yield __count__)\", (eval(\" if ([1]).eval(window)\", prototype.unwatch(\"__count__\"))))) if((this.zzz.zzz)) { } else {return; }");
tryItOut("L: {/*infloop*/L:for(const __parent__; \fRangeError(); eval(\"({__parent__: <x><y/></x>, __count__ getter: new Function })\", [z1])) {null } }");
tryItOut("while((__proto__+=<y><z/></y> = this) && 0)var __proto__ = @foo;<><x><y/></x></>");
tryItOut("/*infloop*/while(<x><y/></x> <= <x><y/></x>){return; }");
tryItOut("if(let (__proto__ = <><x><y/></x></>, prop) prototype) throw <x><y/></x>;");
tryItOut("break ;");
tryItOut("var prop = <><x><y/></x></>");
tryItOut("/*infloop*/while((<x/>)(this)){{}<x><y/></x>; }");
tryItOut("return __iterator__ = false;");
tryItOut("/*infloop*/for(let __noSuchMethod__; (__noSuchMethod__ = <x><y/></x>); constructor.(undefined)) {{break ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 *//*\n*/M: for  each(var constructor in <x><y/></x>) export prop;const __parent__");
tryItOut("M:with({__proto__: prop.prop = #2=this\t});");
tryItOut("do L:if(<x><y/></x>) {continue M; } else  if (<><x><y/></x></>) {undefined;export *; } else {return; } while(([new let (({ prototype: prototype, constructor: __proto__ }) = , __noSuchMethod__) new (0/0)() for ([(-1) if (1e4)]['prop'] in 0.1) for (__parent__ in null) if ('fafafa'.replace(/a/g, eval))]) && 0);");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = (prop & null) in window) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in 'fafafa'.replace(/a/g, [1,2,3,4].map) in constructor = [[]].__defineSetter__(\"prototype\"\r, function  __iterator__ () { return 0.1 } )) {return <><x><y/></x></>;\n\nbreak ; }");
tryItOut("L:with((__noSuchMethod__ = *::*))<bbb xmlns:ccc=\"(new (1 for (x in []))(new (new Function(\"'haha'.split\"))(*::*), false)).__defineSetter__\"><ccc:eee></ccc:eee></bbb>");
tryItOut("constructor = prop;");
tryItOut("L:if(<><x><y/></x></>) { if ((-0)) __count__ else (prop);}");
tryItOut("__parent__;");
tryItOut("__parent__ = constructor;");
tryItOut("while((((3).call(__noSuchMethod__, prototype, ({a1:1})))) && 0){}");
tryItOut("/*for..in*/for(let __iterator__ in (([z1,,] |= __iterator__)(window)))do {return  /x/ ; } while((prototype) && 0);");
tryItOut("gc()\nprototype, __noSuchMethod__ = <x><y/></x>;");
tryItOut("if(__parent__ = 1e81) { if (<x><y/></x> @ *::*) return;} else {yield; }\n{}\n");
tryItOut("prop, prototype = <><x><y/></x></>;");
tryItOut("L:if((__noSuchMethod__ = <x><y/></x>)) {export *;var __count__ = prop; }");
tryItOut("/*for..in*/for(var ({prototype setter: 5.0000000000000000000000, __parent__: (<x><y/></x>[window]) })['constructor'] in (__count__.isPrototypeOf([,,]) in <><x><y/></x></>)) if((yield ((__proto__ = #1#)))) return __iterator__; else  if ((uneval(*::*.propertyIsEnumerable(\"__noSuchMethod__\")))) {\rfunction  __noSuchMethod__ () { yield <><x><y/></x></> } export __parent__; } else {yield undefined;{} }");
tryItOut("switch((window\n)) { case <x/>: case (new String(1e4)):  }");
tryItOut("return null; const __count__;");
tryItOut("do  get __proto__ __parent__ (__parent__(arguments)) { with(<><x><y/></x></>)return; } \n; while((let (__count__, __proto__ = this) <><x><y/></x></>.propertyIsEnumerable(\"__count__\").yoyo(((yield yield (1 for (x in [])))))) && 0);");
tryItOut("if(([z1,,].propertyIsEnumerable(\"__noSuchMethod__\"))) /*for..in*/for(let prop in  \"\" ) {export __iterator__; } else {/*for..in*/for(var [constructor, __parent__] = <><x><y/></x></> in <y><z/></y>) {return *::*;; } }");
tryItOut("let(constructor) ((function(){return;})());");
tryItOut("/*for..in*/M:for(const [__proto__, __parent__] = function  constructor (__iterator__)@foo in __parent__.constructor = eval(\"\\n\", <y><z/></y>)) {if(arguments) { if ( /x/g [<x/>]) {;; } else {function () { yield <x><y/></x> }  }}/*infloop*/while(({}).hasOwnProperty){switch(3/0) { default: break; break;  } } }");
tryItOut("do do {gc() } while((@foo) && 0); while(((function () { return ({a2:z2}) } ).__noSuchMethod__.__lookupSetter__(\"__parent__\")) && 0);");
tryItOut("__parent__;M:if(<x><y/></x> & prototype;) \f{{}gc() }");
tryItOut("L:if(([*].filter(function (__parent__, __iterator__)window)).throw(<><x><y/></x></> ? function ([y]) { } : *::*)) {break ;; } else { }");
tryItOut("__iterator__, __proto__");
tryItOut("/*for..in*/for(var [__parent__, prototype/*\n*/] = ({prototype: true, constructor: <><x><y/></x></> }) in true) {__proto__throw (-0); }");
tryItOut("let __parent__, prop = @foo");
tryItOut(" /*infloop*/while ");
tryItOut("yield;");
tryItOut("L:if(((this | <x/>).__defineSetter__).call(<x><y/></x>.valueOf(\"number\"), (new (function(q) { return q; })()), this.zzz.zzz)) {{throw [];let (__proto__ = <><x><y/></x></>, __noSuchMethod__) { yield *; } } } else  if ([(uneval(<y><z/></y>)).isPrototypeOf(1.3.propertyIsEnumerable(\"__noSuchMethod__\"))]) export __proto__; else  { return -3/0 } ");
tryItOut("{}\nreturn;\n");
tryItOut("/*infloop*/do {let __iterator__, function::__parent__; } while((-3/0)[window]);");
tryItOut("let __iterator__ =  /x/ , prototype =  /x/g ;");
tryItOut("let(__iterator__) ((function(){return;})());");
tryItOut("with({}) __count__ = constructor;");
