tryItOut("{/a/giconst prop = <x><y/></x>, __iterator__ = window; }\n/*infloop*/while(*::* for (prototype in this)){return <x><y/></x>; }\n");
tryItOut("for(let y in [5,6,7,8]) __proto__ = constructor;");
tryItOut("/*infloop*/for(var delete; __noSuchMethod__; 1e-81) \freturn;");
tryItOut("L:if([<y><z/></y>].sort(Math.sin)) { if ((({prototype: (Date(null, 0/0))[([15,16,17,18].sort(<x><y/></x>, [,]))]}))) /*infloop*/for(const __noSuchMethod__ = @foo; *::*; 1e81) {<ccc:ddd></ccc:ddd> }} else return [[1]];");
tryItOut("M:if((new 'haha'.split(<x/> ? <><x><y/></x></> : <x/>))) /*for..in*//* nogeckoex bug 349964 */ for  each( ''  in this) continue L; else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) return;");
tryItOut("if(({constructor: __noSuchMethod__})) export __parent__; else  if (<><x><y/></x></>.__lookupSetter__(\"__iterator__\").__defineGetter__(\"__parent__\", /a/gi)) {__proto__ = <x/>, __iterator__ = @foo\nexport __proto__;function::let, __count__ = <x><y/></x>; }//h\n else case true: \nyield export *;");
tryItOut("if((prop.watch(\"prop\", Math.sin).eval(this ?  ''  : (function ([y]) { })()).__noSuchMethod__ = (this).watch)) { if (this) \nL: {throw (-0);const __iterator__, __count__; } else {{}yield {}; }}");
tryItOut("if((({constructor: \nthis ? (__noSuchMethod__.__defineSetter__(\"__proto__\", Math.pow)) : <x><y/></x> }))) { if ((this.@foo)) while((yield (-0) === prototype) && 0){export *;function  __noSuchMethod__ (__noSuchMethod__, prototype)<><x><y/></x></> }} else {__parent__ = prop;\rexport *; }");
tryItOut("if((__proto__ = this.__defineSetter__(\"constructor\", function  prop (__iterator__, constructor)*::*))) { if ((new (({ get prototype __parent__ (__parent__)* }))())(({})(window).__count__ = 'fafafa'.replace(/a/g, 0x99))) {export __parent__; }} else /*for..in*/for(var [__noSuchMethod__, prop] = (<><x><y/></x></>) in __parent__) (false);");
tryItOut("let __noSuchMethod__; const prototype;");
tryItOut("if(<><x><y/></x></> ^= <><x><y/></x></>.prop) {yield #1#; }");
tryItOut("\nexport *;");
tryItOut("/*for..in*/for(const constructor = this.__defineGetter__(\"prop\", function(y) { yield y; yield;; yield y; }) in <><x><y/></x></>) {return;return true; }");
tryItOut("/*for..in*/M:for(var __proto__.__noSuchMethod__ in ((function(q) { return q; })((p={}, (p.z = (function ([y]) { })())()))))<><x><y/></x></>;;");
tryItOut("/*infloop*/for(var constructor; <><x><y/></x></>; <x><y/></x> | undefined) {}");
tryItOut("return;");
tryItOut("<><x><y/></x></>");
tryItOut("if([1]) { if ([1,2,3,4].slice === break ) \f{;if(<><x><y/></x></>) return; else  if ( '' ) {export *;constructor } else export *; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x><y/></x>) {}L:if( /x/ ) {[1]export *; } else  if (#1#) {var __count__, prop = __parent__; } }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor.__parent__ in  '' ) {L: {gc() } }");
tryItOut("if(033 /= [[1]]) { if ((* >>> prop)) {let __proto__ = *; } else {return; }}");
tryItOut("break L");
tryItOut("M\f:while(((new new Function())) && 0)\r{return;V }");
tryItOut("L: yield *;\nexport constructor; const prop;\n");
tryItOut("do __parent__, constructor =  /x/g ; while((this / (new *(__proto__, __count__))) && 0);");
tryItOut("\n");
tryItOut("with({}) for(let y in []);");
tryItOut("if(<bbb xmlns:ccc=\"((this)[(@foo & false)])\"><ccc:eee></ccc:eee></bbb>) /*for..in*/for(var (*)(function(id) { return id }) in ((({}).hasOwnProperty)(<\t><x><y/></x></>.yoyo(<x><y/></x>)))) else with(null.throw(case 2: default: break; (*);) ? /a/gi : (uneval(undefined))){const __parent__ =  \"\" ; }\n");
tryItOut("if(* .@*:: ((null)[this])) { if (3/0.valueOf(\"number\")) (true);} else {export *;\tyield prop; }");
tryItOut("/*for..in*/L:for(const [, ({ prototype: constructor }), ] in ((({}).__lookupGetter__)(__proto__ =  /x/g  /= undefined))){return;{} }");
tryItOut("if(__parent__ = undefined) gc() else  if (((<y><z/></y>)[<x><y/></x>])) continue ; else (false);");
tryItOut("/*for..in*/for([__count__, __parent__] = (this.__count__ =  /x/g ).constructor in constructor >>> <x/>.__lookupSetter__(\"__iterator__\")) {( '' ); }");
tryItOut("/*infloop*/do {;function () { yield [z1,,] }  } while(eval(\"var __proto__ = 0, getter;\", ({ set prototype prop (prop)__count__ })));");
tryItOut("if(((new Function).prototype)) {{return;break L; } }");
tryItOut("with({prop:  \"\" }){(<y><z/></y>); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for((__noSuchMethod__ .@ __proto__.@*); (constructor ::  \"\" ); true) {{} }");
tryItOut("L: prototype = prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in false) throw <x><y/></x>;");
tryItOut("M:with({ /* Comment */0.1: Function(<x><y/></x>)}){gc()continue M; }");
tryItOut("/*for..in*/for(const __iterator__ in <y><z/></y> + (* = prop)) {with(1e4){throw arguments; } }");
tryItOut("/*for..in*/for(var constructor in ((function () { yield <y><z/></y> } )(*)))return;");
tryItOut("L:if([,,z1]) { if ((<x><y/></x> for each (__count__ in *))) let __iterator__, prototype;} else var __noSuchMethod__, *::*;");
tryItOut("/*infloop*/for(var __proto__ = (-0); window; <x><y/></x>) gc()");
tryItOut("M:do yield; while(((eval(\"<x/>\", <><x><y/></x></>) for ([1]['__noSuchMethod__'] in window) for (prototype in this))) && 0);");
tryItOut("if([11,12,13,14].some) { if (undefined in this) let(prop, __iterator__) ((function(){throw StopIteration;})()); else {__parent__ = __count__;{} }}");
tryItOut("with({__noSuchMethod__: constructor.(<x/>)}){{} }");
tryItOut("let __iterator__ = window, prototype;");
tryItOut("/*for..in*/for([__noSuchMethod__, __noSuchMethod__] = (__iterator__ = constructor) in *) let __count__;");
tryItOut("if(__iterator__ = \t*::* >> \ntrue.throw(window.yoyo( \"\" ))) {var __iterator__ = this; /x/g \nlet __iterator__; } else  if (__parent__ = @foo.@*) {let __iterator__; } else {yield; }");
tryItOut("/*infloop*/for(var prop; (__parent__.valueOf(\"number\")) > yield window; 'fafafa'.replace(/a/g, Math.pow)) {-1; }");
tryItOut("if(4.) {throw @foo; } else  if ([[1]]) {__proto__;<>\f<\tx><y/></x></>; }");
tryItOut("if(((p={}, (p.z = __iterator__ = true)()))) {{} } else {return 3;; }");
tryItOut("/*infloop*/L:while((String())()){break L;continue ; }");
tryItOut("yield");
tryItOut("if((prototype = 5.0000000000000000000000)[([z1,,]).watch]) { if ((export *)) {L: (@foo); } else L:do {break L; } while((__count__.__parent__ = function ([y]) { }) && 0);}");
tryItOut(" { return ('fafafa'.replace(/a/g, 'haha'.split)) } ");
tryItOut("/*infloop*/for(var constructor; <x/>.unwatch(\"__proto__\");  \"\" ) /*infloop*/M:while(new (<x/>)() ? * : window % @foo)(prototype);");
tryItOut("/*infloop*/for(let __count__; this.__defineGetter__(\"prop\", @foo); this in <><x><y/></x></>) /*for..in*/for(let __iterator__ in undefined) {export *; }export prop;");
tryItOut("L:if((yield <><x><y/></x></> in __iterator__)) { if (*yyy) eval} else {<><x><y/></x></>;{} }");
tryItOut("let __iterator__ = __count__;");
tryItOut("if(*::*) {;yield; } else \f__parent__:  /x/g ");
tryItOut("/*infloop*/for(null -= ([11,12,13,14].sort)(); ((<x><y/></x>.valueOf(\"number\")).__defineSetter__(\"__parent__\", [1,2,3,4].slice)); yield ((yield <x/>))) {throw <x><y/></x>;{} }");
tryItOut("/*for..in*/for(const prop in (true.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; return;; yield y; }))) { }");
tryItOut("L:do yield; while((( for (__proto__.prototype in [1,,]) for (__parent__ in prototype) if (<y><z/></y>))) && 0);yield null;");
tryItOut("/*infloop*/while(<><x><y/></x></>)(prop);");
tryItOut("if(-0) {\freturn <x><y/></x>;throw [1]; } else  if (<y><z/></y>) {return <x><y/></x>; } else yield <>throw constructor;</>\f;");
tryItOut("/*for..in*/__iterator__for(var [prop, __count__] = __iterator__.__parent__ = return.unwatch(\"constructor\")\t in yield <x/>) switch(<x><y/></x>) { case 2: var __iterator__; }");
tryItOut("prop\t = __proto__;");
tryItOut("{M:if(*::*) try { __count__; } catch(__parent__ if (function(){return @foo;})()) { (1 for (x in [])) }  else  if (new (<x/>)()) {let __parent__, __count__ =  \"\" ; } else {yield <y><z/></y>; }if(<x><y/></x> = 3) var __parent__, constructor; else {let __count__ = <><x><y/></x></>, __parent__ = *;export constructor; } }");
tryItOut("if(this) { if (3/0)  /x/g \f; else {{}continue ; }}");
tryItOut("switch('fafafa'.replace(/a/g, (({}).hasOwnProperty).call)) { default: /*for..in*/L:for(var __proto__ = (prop = *::*) instanceof <><x><y/></x></>.__lookupSetter__(\"__iterator__\") in <y><z/></y>.throw( /x/ )) {(<y><z/></y>);/*for..in*/for(let [prop, __noSuchMethod__] = (prototype)[ /x/ ] in <><x><y/></x></>) gc() }case 8: break; case ({constructor: *::*,  set __parent__ __iterator__ () { return <x/> }  }): return ({a1:1});var function::prototype, __noSuchMethod__;break; case 8: /*for..in*/for(var [prop, __parent__] = [1] in [1]) let __noSuchMethod__ = , __iterator__;break; break; switch(prototype-=<x><y/></x>) { default: break; with({__iterator__: 1e81}){throw <x><y/></x>;\freturn; } }break; break; /*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in [,,z1]) {break M; }if('3.141592653589793) { if (<y><z/></y>) }{return;export prototype; }case 8: gcbreak;  }");
tryItOut("/*for..in*/for(var prop = (p={}, (p.z = <y><z/></y>[<><x><y/></x></>])()) :: (this\n) in (<x/> = prop) ? this.__defineSetter__(\"__noSuchMethod__\", (function ([y]) { }.__count__ = <><x><y/></x></>).__defineSetter__) : (p={}, (p.z =  \"\" )())) if(prop) { if (this) {var __count__ = 3;throw constructor; }} else { }");
tryItOut("for(let y in [5,6,7,8]) try {  } catch(prototype if (function(){yield eval;})()) { const __count__ = <x><y/></x>, __noSuchMethod__ = <><x><y//*\n*/></x></>; } catch(prototype) { (3.141592653589793); } ");
tryItOut("/*infloop*/for([, , , ] = ([ super ].map((new Function(\"gc()\")))); []; 'haha'.split) {/*for..in*/for(const  { \n }  = (let (__iterator__) constructor) in ) { }(<x><y/></x>); }\n");
tryItOut("/*infloop*/do {let __count__ = (function ([y]) { })(); } while( /x/ ['constructor'] = <><x><y/></x></> %= true);");
tryItOut("/*for..in*/for(var [__parent__, constructor] = __noSuchMethod__ in <y><z/></y>) {false; const prop }\ndo {( '' ); } while((<x><y/></x>) && 0);\n");
tryItOut("try { let __noSuchMethod__ =  \"\" , prototype; } catch(__parent__) { gc() } ");
tryItOut("with({}) { let(function::__iterator__, x::__proto__ = let (__parent__, prop) //h\n /x/ ) ((function(){return;})()); } ");
tryItOut("export *\n");
tryItOut("L:if(__proto__ = (<x><y/></x> *=  \"\" )) {{} } else  if (String(throw null;.( \"\" ))) {prop = *;return;");
tryItOut("for(let y in [5,6,7,8]) let(prototype = prototype.__noSuchMethod__ getter= <><x><y/></x></>, prototype = ((eval(\" \\\"\\\" \", <><x><y/></x></>)) .. this)) ((function(){with({}) /*for..in*/M:for(let [prop, constructor, prototype] = prototype in  /x/ ) export constructor;})());");
tryItOut("if((__proto__ = window)) {window['x::prop'] = __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(var __proto__ in null) /*infloop*/while(new ((<x><y/></x>++))(__iterator__)){<x><y/></x>;{} }");
tryItOut("if(((yield window)).__count__ = <>__parent__</> <= <><x><y/></x></>.@foo\f) { if (({__count__: (<><x><y/></x></>)[(-0)],  get __count__(let(prototype = *::*, __iterator__ =  \"\" ) ((function(){for(let y in []);})());)constructor })) /*for..in*/for(var constructor in ((function () { yield \n* } )((({__parent__: <><x><y/></x></>,  set __count__(__count__) { eval }  })))))<><x><y/></x></>; else {}M:switch(4.) { default: {}break; case (@foo === function::__parent__): break;  }}");
tryItOut("let (__proto__) { /*for..in*/for(const [__proto__, __parent__] = <x><y/></x>.propertyIsEnumerable(\"__count__\") in false\n) {prop = [,], __iterator__;gc() } }");
tryItOut("L:switch((\t(yield ('haha'.split(false, (-1))))) if (prototype / <><x><y/></x></>)) { default: ((0x99)(<y><z/></y>, undefined))case ((__proto__.throw(null).eval(<x><y/></x>.(window))).unwatch(\"__count__\")): @foobreak; case 6: return window;case ( '' .eval(<y><z/></y>)): if([11,12,13,14].map.eval(new <x/>(({a1:1}))\f)) /*for..in*/for(const prop in window) yield; else {gc() }break; yield [[]]\f;break; break; prototype = prop;break; case 5: let prop, prop = <><x><y/></x></>; }");
tryItOut("/*infloop*/L:for( = 'fafafa'.replace(/a/g, @foo); __proto__ = <x>\n<y/></x>; (function \t __iterator__ (__parent__)( /x/ .__defineGetter__(\"__parent__\", (__iterator__).apply) ? (kfunction (__noSuchMethod__) { return undefined } (window, *::*)) : __proto__ = null)(({constructor: 5.0000000000000000000000.__proto__ = *::*, __proto__: window.valueOf(\"number\") }).prop))) /*infloop*/M:while((@foo)[*]){__noSuchMethod__ = true; }");
tryItOut("throw constructor\nswitch(true) { case *: return;break; case {return <><x><y/></x></>; }: break; case <><x><y/></x></>: continue ;default: var prop;case 0: break; case 2: throw -0;break; case 5: let __parent__ = this, __iterator__ = *;break; yield;case 4: yield  '' ;break; case .2: continue ;case 3: function(q) { return q; }break; case 1: ;export __iterator__;break; case prototype: break; case  /x/g : throw <x/>;case 5: break ; }");
tryItOut("/*infloop*/for(var ({ __proto__: __count__ }) = (this.__defineGetter__(\f)\"__parent__\", (new Function(\"__count__ = <><x><y/></x></>, __proto__;\"))/); #1=({__iterator__: (__proto__ = <><x><y/></x></>)}); (new ((<x/>).apply)((undefined = null), let (__iterator__) <><x><y/></x></>))) {{while((__parent__) && 0){({}).hasOwnPropertycontinue ; } } }");
tryItOut("/*for..in*/for(const __proto__ in undefined) ");
tryItOut("/*for..in*/for(const __parent__ in 3) {if(undefined) yield  \"\" ;return; }");
tryItOut("(0/0);");
tryItOut("M:with({__proto__: <><><><x><y/></x></>.__noSuchMethod__ = (new Function(\"return prop;\"))</></>});{}");
tryItOut("L:if(eval(\"do throw this; while((function(id) { return id }) && 0);\", <><x><y/></x></>.isPrototypeOf(<y><z/></y>))) {export constructor;<x><\fy/></x>; } else gc()");
tryItOut("let (__iterator__, __proto__) { throw StopIteration; }");
tryItOut("/*infloop*/for(var __parent__; <y><z/></y>; __noSuchMethod__) (undefined)");
tryItOut("/*infloop*/M:for(const ({ __proto__: /*[] })' = window ^= new (Math.sin)(window, false); <y><z/></y>; <x><y/></x>.__count__ = <x/>) {if(*) let __count__, __noSuchMethod__ = (-1); else  if ( \"\" ) return; else (<><x><y/></x>\t</>); }");
tryItOut("with({}) with({}) { __iterator__, constructor; } ");
tryItOut("M:do export __parent__; while((__iterator__) && 0)\n");
tryItOut("if(<x/>.hasOwnProperty(\"__iterator__\")) const prop; else throw [,,];");
tryItOut("/*for..in*/for(var __count__ in @foo) ({}).__lookupGetter__ const ({ __count__: ({ prop: [, prototype, __iterator__, , __count__ = false] }), __iterator__: ({ prop: [] }) });");
tryItOut("/*infloop*/for(const [, ] = let (__iterator__ = this) (uneval(0.1)); window === <x><y/></x>; yield this.zzz.zzz) false;");
tryItOut("/*for..in*/L:for(__count__ = ([[1]] |=  \"\" ()).constructor = arguments.__iterator__ in this.zzz.zzz) {M:with({<x><y/></x>: __iterator__.__proto__ setter= ({}).__lookupGetter__})yield true; }");
tryItOut("/*for..in*/for(__noSuchMethod__(#1#) in return) yield <>__parent__</>;");
tryItOut("gc()");
tryItOut("throw __iterator__;");
tryItOut("with({}) return each;");
tryItOut("/*infloop*/L:do {/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>) __proto__ } while(new 0x99 >>= prop(* >= <y><z/></y>));");
tryItOut("with( /x/ ){<><x><y/></x></>; }");
tryItOut("if(((yield ( \"\"  if (<><x><y/></x></>)).__lookupGetter__(\"constructor\")))) __proto__, __proto__ = false\n/*infloop*/L:for(const prototype = *::*; <x><y/></x>; *) return true; else  if (prototype = false.yoyo(__proto__).yoyo(<><x><y/></x></>)) /*for..in*/for(let [prototype, prototype] = (<><x><y/></x></>)(<x><y/></x>) in *::*) (<x><y/></x>);");
tryItOut("/*infloop*/while(window ? * : ( /* Comment */({, __parent__: <><x><y/></x></> })))const __count__ = null, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in true[\t'x::__proto__']) export *;do export constructor; while(('fafafa'.replace(/a/g, (function  function::__noSuchMethod__ (__proto__)__iterator__)//h\n.apply)) && 0);");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prop] = constructor for each (prototype in 1e+81) , <>\t<x><y/></x></>.hasOwnProperty(\"__proto__\") in ({a1:1})) var __parent__ = <y><z/></y>, prop;");
tryItOut("L:if(eval(\"(new function (prototype) /x/ (<><x><y/></x></>))\", (uneval(<x><y/></x>)).@foo)) if(*) { if (<x/>) {yield; } else /*infloop*/for(__iterator__; __noSuchMethod__; <><x><y/></x></>) return;} else  if (Boolean(__iterator__) >= (({}).hasOwnProperty([[]],  /x/ ) for (prop in this)).hasOwnProperty(\"({ __iterator__: __parent__ })\")) {L:if() { if ([ /x/g ]) {const __parent__; }} else throw *::*;yield undefined; }");
tryItOut("/*infloop*/for(let constructor; 3/0; let (__count__ = (__count__ = __proto__)) (+-0)) {yield <x/>; }");
tryItOut("if(#0=[1e81]) { if (false) gc() else {return;/*infloop*/for(let prototype = true; this; 0.1) {continue M; } }}");
tryItOut(";");
tryItOut("return;");
tryItOut("/*infloop*/do export __proto__; while(((function  function::__count__ (__parent__) { yield ((1 for (x in []))).call(this, ) } \t).call(\r({__proto__: (({}).hasOwnProperty).call(<x/>, ), constructor: new (-1)() }), new (1e81)(), ((p={}, (p.z =  /x/ )())))));");
tryItOut("if(constructor) {{var __count__ = #3={a:#3#}; } } else yield constructor;");
tryItOut("constructor = __proto__;");
tryItOut("yield;\nconst __proto__, prototype;\n");
tryItOut("if(undefined ? null : *(*, undefined)) {{} } else {.2yield; }");
tryItOut("switch( '' ) { default:  }");
tryItOut("yield 3.141592653589793;return <x><y/></x>;");
tryItOut("let (prototype = [,] =  /x/g ) { export *; }");
tryItOut("{\n__parent__ = __iterator__; }");
tryItOut("let constructor;");
tryItOut("/*for..in*/for(const prop = <y><z/></y> in (yield (({ set __count__(__proto__) { return [z1,,] } , prop: <><x><y/></x></> }\r)))) (<x><y/></x>);");
tryItOut("/*for..in*/for(var *['prop'] in <x/> < false.__defineSetter__(\"prop\", (new Function(\"\\nvar __proto__, __noSuchMethod__ = __proto__;\\n\")))) /*for..in*/for(let __iterator__ in [undefined if (<><x><\fy/></x></>)]) {yield (#1=[#1#].hasOwnProperty(\"__iterator__\")); }");
tryItOut("{ }");
tryItOut("/*for..in*/for(var prop in ((({}).hasOwnProperty)(new ([1,2,3,4].map)().__noSuchMethod__ .. yield <x><y/></x>.(__noSuchMethod__)))){/*infloop*/for(var ({ prop: __parent__ }) = __iterator__.__iterator__ setter= function (prop) {  } ; new Date(); 'fafafa'.replace(/a/g, ({}).hasOwnProperty)) {return <x/>;throw  /x/ ; }[1]; }");
tryItOut("export *\n");
tryItOut("{yield  '' ;gc() }");
tryItOut("/*infloop*/for(<><x><y/></x></>; *; this) {return <y><z/></y>; }");
tryItOut("while((window.yoyo(this)) && 0)return [1,,];");
tryItOut("switch(new (constructor.__proto__ = this) in <><x><y/></x></>.__lookupGetter__(\"__iterator__\")(((__noSuchMethod__).__defineSetter__).apply(<x/>), (new Boolean(false.propertyIsEnumerable(\"__proto__\"), ({}))))) { default: break; var prop, constructor;case 2: default: gc()case prop: export *;break; case <x/> ?  ''  : this: while((new Math.sin(<x><y/></x>.watch(\"__noSuchMethod__\", ([,]).__defineSetter__))) && 0)return false;gc()break;  }");
tryItOut("if(constructor.prop = <y><z/></y>) {if([z1,,]) continue M; else {[1,2,3,4].map } } else  if (.*) if([__iterator__, , __noSuchMethod__] = (__count__.__proto__ = null)) {return;/*for..in*/for(const prop in __iterator__) {var __proto__ = [[1]], __proto__ = __parent__; } } else  if (((undefined.valueOf(\"number\"))[[z1,,] >  /x/ ])) yield; else if(__proto__) gc() else  if (<><x><y/></x></>) throw \fnull; else {return;gc() }");
tryItOut("switch(__parent__) { default:  }\nswitch(this) { case <x><y/></x>: throw this;\f }");
tryItOut("L: gc()\nvar prop = <y><z/></y>;");
tryItOut("/*infloop*/L:for(let prototype; new __proto__ = <><x><y/></x></>; __count__ = typeof ({}).__defineGetter__(\"__count__\", ([1,2,3,4].slice).apply).*) {break Lif(1.3) gc() else  if (this) {continue L; } else {{} } }");
tryItOut(";");
tryItOut("/*infloop*/while( \"\" ){export __iterator__;yield; }prototype;");
tryItOut("while((({__iterator__: <><x><y/></x></> , prototype >>> (*::*)( '' )++})) && 0){if(@foo) (__parent__); }");
tryItOut("do {(__parent__ = <x><y/></x>)yield\nthis; } while((*::*.isPrototypeOf(-0)) && 0);");
tryItOut("{/*infloop*/for(let [({ constructor: ({ __proto__: __count__ }) })] = (uneval(<x><y/></x>)); (<y><z/></y>.@*); new Object(<x/>, <><x><y/></x></>)) yield;if() continue L; else  if (\n__proto__ = ((p={}, (p.z =  /x/ )()))) {(window);export *; } }");
tryItOut("let __noSuchMethod__ = *::*, prop = true;");
tryItOut("this.zzz.zzz;");
tryItOut("if(false.__lookupSetter__(\"function::__iterator__\")) __proto__ = <x/>, __count__ =  /x/g ; else {return prop; }");
tryItOut("if(new (*)()) { if ((([1,2,3,4].slice).call).call((-0), @foo, null)) {throw  \"\" ;yield  '' ; }} else {{}export *; }");
tryItOut("if([ \"\" ].filter(({}).__lookupGetter__)) let __parent__ = <x><y/></x>, __iterator__ = __parent__;\t");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("M:if(null / function ([y]) { }.prototype) {Math.powgc() } else set, __iterator__;");
tryItOut("if(<>__count__ = <x><y/></x></>) { if (null) {continue M; } else break ;}");
tryItOut("/*infloop*/M:for(const __parent__; [] = ({ __parent__: prop }); ([('fafafa'.replace(/a/g, Math.sin)) for each (__iterator__ in @foo) for (__count__ in  \"\" )].eval(prop.__proto__ = (this.__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))))) {}");
tryItOut("{function  prop () { return new ( /x/ )() }  }");
tryItOut("/*for..in*/for(__proto__ = this.__defineSetter__(\"__proto__\", 3) in __parent__) {throw *::*;export *; }");
tryItOut("{;return (<y><z/></y> ^= <><x><y/></x></>); }");
tryItOut("while((__noSuchMethod__|=constructor) && 0)/*infloop*/for(this; [];  /x/g ) {export *;export __noSuchMethod__; }");
tryItOut("/*infloop*/do if( '' ['__parent__']|=<x><y/></x> >= \t<><x><y/></x></>--) /*infloop*/for(let prop = <x/>.isPrototypeOf(({a2:z2})); (window.yoyo(window)); (({a1:1}) / <x><y/></x>)) {yield; } else {throw this; } while((yield;)[(<x><y/></x>.(033) | ([<><x><y/></x></>]))]);");
tryItOut("/*infloop*/while((yield case __parent__.__iterator__ = this.__defineGetter__(\"__iterator__\", function (constructor, __proto__) { yield <x><y/\t></x> } ): ));");
tryItOut("/*for..in*/M:for(var [__proto__, __count__] = __noSuchMethod__ in <x><y/></x>) export __parent__;");
tryItOut("with({prop: <y><z/></y>(yield <x/>, ((this.*) &= [] ? *::* : <><x><y/></x></>))})let __count__ = (__noSuchMethod__|=<x/>), __iterator__ = new window(@foo);");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((<><x><y/></x></>)(this.yoyo([[]]))))var prop = function(id) { return id };");
tryItOut("let ([, , , , ]) { try { with({}) with({})  } finally { try {  } finally { export *; }  }  }");
tryItOut("/*infloop*/for(eval(\";\", arguments); #0=(uneval(true));  ''  ^ [,] || (uneval(*)).__proto__ = (new <><x><y/></x></>(<x><y/></x>,  /x/ ))) return;");
tryItOut("/*infloop*/for(<y><z/></y>; (__proto__()); [,,z1]) {with({__iterator__: 1.3}){let //h\n__proto__;export *; }/*for..in*/for(__parent__ in ((function (__noSuchMethod__) { const constructor, __proto__; } )( '' ))){yield; } }");
tryItOut("with({}) for(let y in []);");
tryItOut("let (__proto__, prototype) { __proto__ = __proto__; }");
tryItOut("/*infloop*/M:while(throw (function ([y]) { })();){{return 0.1;gc() } }");
tryItOut("M:do {gc(); } while((eval(\"<><x><y/></x></>\", .2)) && 0);");
tryItOut("/*for..in*/for(let prototype = \fnew 5.0000000000000000000000(-3/0) in __proto__ = <x><y/></x>) {Math.pow }");
tryItOut("{/*infloop*/for(__parent__ = (+window); ([15,16,17,18].sort(new Function, [window].sort(Math.pow))); (({__noSuchMethod__: <><x><y/></x></> }))) {export *; }try { yield; } finally { {} } \r }");
tryItOut("let (constructor = *::*) { yield *::*; }gc()\n");
tryItOut("if(((*::*.*))[(__proto__+=({}))]) L: throw false;");
tryItOut("/*infloop*/L:for(__parent__; <>yyy</>.(<><x><y/></x></>.__parent__ = yield); (-1)) throw <x/>;");
tryItOut("/*for..in*/for(var (prop()) in __noSuchMethod__, __proto__ =  \"\" ) return;");
tryItOut("L:with((1e-81.__defineSetter__(\"each\", (function ()[z1,,].isPrototypeOf(<x><y/></x>)).apply).throw(undefined.propertyIsEnumerable(\"__iterator__\")))){if(this >>> false) const __count__ =  /x/ ; else  if (<x><y/></x>.yoyo([z1])) {<x><y/></x>__parent__ } else @foo; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__, __noSuchMethod__.*.__noSuchMethod__ in true.__parent__) {const __proto__; }");
tryItOut("/*infloop*/for(var __parent__; ({}).__lookupGetter__(\nexport __noSuchMethod__, prototype = *::*); (prototype = -3/0) ? (<><x><y/></x></> += ({a1:1})) : (-1).throw(*)) {L: default: ({ __noSuchMethod__: [__count__] })break; /*infloop*/for(__noSuchMethod__.__iterator__; ({ function::prop: [, prop], constructor: ({ __parent__: __iterator__ }) }); null\f.hasOwnProperty(\"__count__\")) {yield *; }case 5: case (yield  /x/ ): break; case 4: break; /*for..in*/for(__count__ in ((new Function)(undefined)))throw *;break; with((<x><y/></x>.(#1#)))break L; }");
tryItOut("L: export *;");
tryItOut("/*for..in*/for(prop.constructor in (((function () { return (true.constructor) } ).apply)(new (null)(null))))break L; const prop;");
tryItOut("/*for..in*/for(const @foo['__noSuchMethod__'] in ((/a/gi)([11,12,13,14].sort))){gc() }");
tryItOut("/*infloop*/do {yield x::constructor;export constructor; } while((<x><y/></x> :: window));");
tryItOut("{L: {<><x><y/></x></>;yield <y><z/></y>; } }");
tryItOut("for(let y in []);");
tryItOut("if((<><x><y/></x></>.valueOf(\"number\")\f.watch(\"prop\", @foo))) {(<x/>); } else  if (__parent__ &= ({a1:1}) ? 1.2e3(<x><y/></x\t>) : <x/>++) const __count__, __count__ = 0.1;");
tryItOut("continue L;");
tryItOut("");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("with({__count__:  '' })let __parent__ =  \"\" ;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/for((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.([].unwatch(\"<x/>\"))).prop; (p={}, (p.z = <><x><y/></x></> && @foo.@*)()); __count__ = *::*\n.prototype) {/*infloop*/M:while( '' ){yield <><x><y/></x></>; } }");
tryItOut("break M;");
tryItOut("let prop;");
tryItOut("return *.eval(prototype) === [15,16,17,18].map((<x/>).__defineSetter__, 033);");
tryItOut(";");
tryItOut("/*infloop*/while((prototype = __proto__))let (__count__, __parent__ = <x><y/></x>) { return <><x><y/></x></>; }");
tryItOut("{do {var __noSuchMethod__ = @foo;<><x><y/></x></>; } while((<y><z/></y>) && 0); }");
tryItOut("throw *::*; const constructor;");
