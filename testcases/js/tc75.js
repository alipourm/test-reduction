tryItOut("if(prototype = (true.__defineSetter__(\"__count__\", eval).__defineSetter__(\"__iterator__\", (1 for (x in [])))) @ new Function()) ; else  if (<><x><y/></x></> .. (p={}, (p.z = <><x><y/></x></>)())) L:with(((<><x><y/></x></>))){default: break; break; function () { yield; }  } else {/*infloop*/for((true)[0]; (#3={a:#3#}.unwatch(\"__parent__\")); <y><z/></y> !== *::*.__defineGetter__(\"constructor\", undefined.__lookupSetter__(\"__iterator__\"))) {throw #3={a:#3#}; }let ({ constructor: __proto__ }) = (eval(\"gc()\", window)), __proto__ = __noSuchMethod__; }");
tryItOut("throw true;");
tryItOut("/*infloop*/for(var prototype = <y><z/></y>;  /x/g ; <><x><y/></x></>) {const prototype;gc() }");
tryItOut("for(let y in []);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(*::*.__lookupGetter__(\"(\") in (this.zzz.zzz)) \tyield <ccc:ddd>yyy</ccc:ddd>.(({__proto__: (function ([y]) { })()})); }");
tryItOut("/*infloop*/L:do ; while(window);");
tryItOut("if((new (<><x><y/></x>\f</>)(undefined))) var __proto__ = 1e81; else gc()");
tryItOut("/*for..in*/for(const prototype in (((function(y) { yield y; throw <y><z/></y>;; yield y; }).call)(<><x><y/></x></> == 5.0000000000000000000000.*))){(function  __iterator__ ()prototype).call\nconst __noSuchMethod__, prototype = <><x><y/></x></>;\n }");
tryItOut("return undefined;");
tryItOut("L: \n");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = new <x><y/></x>() in window) break ;");
tryItOut("[1,2,3,4].slice;");
tryItOut("/*for..in*/M:for(let __count__ in ({prototype: <><x><y/></x></>, __count__ setter: Function }).__defineGetter__(\"__proto__\"\f, ({}).__lookupGetter__).yoyo(true)) /*for..in*/M:for(var __iterator__ = 0 in @foo) let __proto__ =  \"\" , constructor;");
tryItOut("/*infloop*/while(yield.prop = @foo << *::*){return;export __iterator__; }");
tryItOut("/*infloop*/L:while(\f)if(prototype.((true /= -0))) gc() else {return; }");
tryItOut("");
tryItOut("M:do /*for..in*/for([__noSuchMethod__, __count__] = (this.zzz.zzz.watch(\"constructor\", (@foo).__defineSetter__)) in <x><y/></x>) {function (__count__, __noSuchMethod__) /x/g export *; } while((1.2e3) && 0);");
tryItOut("[11,12,13,14].some = constructor;");
tryItOut("L: {;<><x><y/></x></>; }");
tryItOut("M:while((({ prototype: prototype, __count__: __iterator__ }) = ({ prop: prop })) && 0){L:switch([,,] < <x><y/></x> >>=  /x/ ) { default: case 4: break;  } }");
tryItOut("for(let y in [5,6,7,8]) with({}) ");
tryItOut("for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("L{if(this && <x><y/></x>.__lookupSetter__(\"__iterator__\")) /*for..in*/M:for(let [__iterator__, __parent__] = window in  /x/g ) break ; }");
tryItOut("/*infloop*/for(__count__ = false; <xxx {prop}={#3={a:#3#} | <y><z/></y>} />; ((__noSuchMethod__).call(3.141592653589793, (yield 3/0)))) var __proto__ =  /x/ , prototype\n");
tryItOut("(x::__noSuchMethod__) = constructor;");
tryItOut("if( /x/ ) {export *;\f } else  if (3/0.watch(\"__iterator__\", function (__noSuchMethod__, __parent__) { let __proto__; } )) if(-((this)[ \"\" ])) {L:if(<><x><y/></x></>) {return;const prototype = <x/>; } else  if (false) break ; } else {return [];gc() } else /*infloop*/M:while(this.zzz.zzz)<x><y/></x>; const prototype;");
tryItOut("throw 5.0000000000000000000000;");
tryItOut("var __parent__ = <y><z/></y>;");
tryItOut("let (prop = __count__) { /*for..in*/for(let (__iterator__) in * if (constructor)) export *; }");
tryItOut("switch(function(y) { yield y; ;; yield y; }) { case this.zzz.zzz: /*for..in*//* nogeckoex bug 349964 */M: for  each((constructor) in (#3={a:#3#}.__defineGetter__(\"prototype\", (<x><y/></x>).apply))) return;case ((*.hasOwnProperty(\"__proto__\")).hasOwnProperty(\"__noSuchMethod__\")).__iterator__.propertyIsEnumerable(\"getter\"): case [1]: case __noSuchMethod__ =  '' .__lookupSetter__(\"__noSuchMethod__\": if(Iterator()) { if ((<x><y/></x> > this)) (__iterator__); else const __noSuchMethod__ = __noSuchMethod__;}break; /*infloop*/for(0.1.unwatch(\"__noSuchMethod__\").__lookupGetter__(\"@foo\").__count__; __parent__ = -- /x/ ; (<><x><y>__parent__</x></> != null)) {/*infloop*/for(__parent__ = <><x><y/></x></> %= <x><y/></x>; __noSuchMethod__.constructor; this.__defineGetter__(\"__parent__\", /a/gi)) yield; }break; default:  }");
tryItOut("M:with(__count__)return;");
tryItOut("while((3.141592653589793\n) && 0){/*infloop*/for(let __parent__ = <><x><y/></x></>; null; <>><y/</x></>) this;1e4\t; }");
tryItOut("if(\n<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { if ( /* Comment */<x><y/></x>.( '' )) false; else M:while((true) && 0)gc()}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in *) __parent__");
tryItOut("with\f({constructor: ((uneval(({ set prop() { throw (-0); } ,  get __noSuchMethod__ __iterator__ (__parent__)true }))))}){yield @foo; }");
tryItOut("try { {} } finally { throw <x><y/></x>; } ");
tryItOut("M:with(*::*){__iterator__; }");
tryItOut("/*for..in*/for(let [function::__parent__, prop] = [prototype @ <x><y/></x> for ((constructor) in <x><y/></x>)] in 'fafafa'.replace(/a/g, Math.pow)) /*for..in*/for(var __parent__ in <x><y/></x>) if(function ([y]) { }) gc() else  if (*\f) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const this.__proto__ in false.unwatch(\"__parent__\")) {yield arguments; }");
tryItOut("if(__noSuchMethod__.@*.unwatch(\"__proto__\")) {return <y><z/></y>; }");
tryItOut("yield;\ngc()\n");
tryItOut("let (prop = <y><z/></y>) { with({prototype: @foo})\n }");
tryItOut("export constructor\n");
tryItOut("if(({__iterator__: *::*})) {yield;(<y><z/></y>); } else  if (<><x><y/></x></> @ 1e81) export __iterator__; else {yield;export *; }");
tryItOut("prop = prop;");
tryItOut("if(++__proto__\n) { if ((<bbb xmlns=\" \"\" \">yyy</bbb>))  else return  /x/ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in true\n.yoyo(__count__ = this)) return;");
tryItOut("let (({ __proto__: prop }) = (uneval( /* Comment */(function ([y]) { })().yoyo(this))), ({ __noSuchMethod__: ({ __parent__: __parent__ }), __proto__: prop })) { try { __noSuchMethod__ = x::constructor; } finally { throw ({ __proto__: constructor, __iterator__: prototype }); }  }");
tryItOut("L:if(<y><z/></y>) {export *; }");
tryItOut("/*infloop*/for(let \tprop = new ([1,2,3,4].map)(*::*); (prop = prototype); __noSuchMethod__) (<x><y/></x>);");
tryItOut("/*infloop*/for(const __proto__; __iterator__ = (uneval(null)); constructor.__noSuchMethod__) {yield  '' .prototype = undefined;if((<><x><y/></x></> .@*:: <x/>) * ((function ([y]) { })()(this))) {\t__parent__, __count__ = prototype; } else {} }");
tryItOut("M:if(([[11,12,13,14].filter].map(function (__proto__) {  } ))['function::__proto__'] = this) {{}return; } else with((p={}, (p.z = {})())){\texport __count__; }");
tryItOut("/*infloop*/\tfor(([1,,].hasOwnProperty(\"prototype\")); function  __noSuchMethod__ (__count__) { yield undefined } ; (this.__defineGetter__(\"prop\", function(q) { return q; }))) yield;");
tryItOut("/*infloop*/for(let prototype; let (prop) Error(); __count__ = ({__count__ getter: [1,2,3,4].map })) if(window) {prototype; } else  if (<><x><y/></x></>) {throw 3.141592653589793;(<y><z/></y>); }");
tryItOut("if((new (constructor = prototype =  \"\" , __proto__ = __count__)())) ; else  if ((<x><y/></x>--.propertyIsEnumerable(\"__noSuchMethod__\"))) {L: {{} } } else /*infloop*/for(const prop;  '' (<x><y/></x>); (3.__defineSetter__(\"__proto__\", ( /x/g ).apply))) {window;new Function }");
tryItOut("/*infloop*/for(__parent__ = [,]; <><x><y/></x></>; null) yield  /x/ ;");
tryItOut("{}\n;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([, __iterator__] = <x><y/></x>.eval( \"\" ).prop in undefined) {}");
tryItOut("with({__proto__: eval(\"return;\", __parent__%=prototype.__parent__)})( \"\" );");
tryItOut("if((new (#2=({__iterator__: *::*}))(prop, ((this if (<x/>)))))) {/*infloop*/for(let __noSuchMethod__ = [[]]; <><x><y/></x></>; this) {return;continue ; } }");
tryItOut("{;let prototype; }");
tryItOut("L: export [, , __parent__];");
tryItOut("/*infloop*/M:for(const __noSuchMethod__ = this.__defineGetter__(\"prototype\", Math.pow);  /* Comment */constructor.__lookupGetter__(\"__noSuchMethod__\");  \"\" .prototype.constructor) yield __noSuchMethod__;");
tryItOut("yield;\ngc()\n");
tryItOut("L:if(true()[@foo.__count__]) gc() else {continue ; }");
tryItOut("function::__proto__ =  /x/ , prototype = this;\n{}\n");
tryItOut("do {continue ; } while(((()[({break ; })])) && 0);");
tryItOut("L:with({__iterator__: false}){return <x/>; }");
tryItOut("with(let (__iterator__, __proto__) 3/0){return; }");
tryItOut("/*infloop*/while()export __count__;");
tryItOut("if((<x><y/></x> >>= __proto__)) {return __iterator__; } else {break ; }");
tryItOut("/*infloop*/while((uneval('fafafa'.replace(/a/g, )))){{} }");
tryItOut("{yield;gc() }");
tryItOut("let (prototype, prototype) { var prop = 5.0000000000000000000000, constructor = 0.1; }");
tryItOut("{const __proto__ = 1.3, constructor; }");
tryItOut("<x><y/></x>");
tryItOut("return __noSuchMethod__;\nL:switch(constructor.constructor) { case 6: break;  }\n");
tryItOut("L:if(<><{__parent__}><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></{__parent__}></>) { if (__parent__ = *) return 3.141592653589793;} else {if(this.zzz.zzz) { if (<><x><y/></x></>(([].__parent__))) throw 4.; else if( /x/g ) ; else  if ( /x/g ) export __iterator__;}{([]); } }");
tryItOut("if(yield 1e-81.@foo) {export __noSuchMethod__;#1# } else {}");
tryItOut("with(*::*)yield;");
tryItOut("while(((prototype|=false.unwatch(\"__count__\"))) && 0)/*for..in*/M:for(const (<><x><y/></x></>)( /x/ ) in ((function (__iterator__, __noSuchMethod__) { return <x/>.watch(\"constructor\", Math.pow) } )(this.__defineGetter__(\"__proto__\", /a/gi))))yield;");
tryItOut("if(__proto__.__count__) if(this.zzz.zzz) ");
tryItOut("{(this); }");
tryItOut("throw StopIteration;");
tryItOut("if((Math.sin)) { if (constructor = __parent__ = (-1)) ;\f} else \tgc()");
tryItOut("/*infloop*/for(let __noSuchMethod__; return false; ((new Function(\"yield;\")))([1], @foo)) {{} }");
tryItOut("with({constructor: (yield __noSuchMethod__) != #1=[#1#].__lookupGetter__(\"x::__parent__\")})yield;\n/*infloop*/do {; } while(<><x><y/></x></>);\n");
tryItOut("for(let y in []);");
tryItOut("{if(3/0) {throw (function ([y]) { })();<><x><y/></x></> } }");
tryItOut("L: (-3/0);");
tryItOut("{}\nif(*++) {break L;continue M; } else let __parent__;\n");
tryItOut("yield <><x><y/></x></>.constructor = <x><y/></x>;");
tryItOut("{}");
tryItOut("/*infloop*/for(__count__; new (( /x/g ).__defineSetter__)(<y><z/></y>, {}); (constructor = prototype)) \n<y><z/></y>;\n");
tryItOut("L: if(033) __iterator__ = <x/>; else  if (<x><y/></x>) {continue M; } else function  constructor (__parent__, __noSuchMethod__) { yield <x><y/></x> } ");
tryItOut("M:if(this.__defineGetter__(\"prop\", <x/>)) {yield window;yield <x><y/></x>; }");
tryItOut("/*for..in*/for(const __count__.constructor in ((function (({ x::constructor: __parent__ }), __parent__) {  /x/g ; } )((<><x><y/></x></>.constructor))))null;");
tryItOut("{return; }");
tryItOut("return;(4.);");
tryItOut("/*infloop*/for(let 3/0['__parent__'] = (new null(prototype = [1,,])); this; \nString(<><x><y/></x></>)) {yield\nreturn;switch(__iterator__) { case 0: break; default: let __proto__, __noSuchMethod__ = .2;break;  } }");
tryItOut("L: {prop.eval(<y><z/></y>) const prototype;this; }");
tryItOut("M:if((prop = <>3.141592653589793</>).@*) with({}) let __proto__, constructor = null;");
tryItOut("with({}) let(({ *::*: [] }), __proto__) { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) function  __noSuchMethod__ ()1.3");
tryItOut("if(prototype) { if ([11,12,13,14].filter) export __proto__; else {export *;yield this; }}");
tryItOut("if(({ __noSuchMethod__: prototype, prototype: __parent__ }) = ) { if (prototype.(+arguments)) __count__;} else {if(<x><y/></x>) {yield; } else  if ( '' ) prop else { } }");
tryItOut("M:if( /* Comment */(<x><y/></x>) || true ^= prototype) {let (__proto__, prop) { yield; } }");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/L:do if((window ? -3/0 : <x><y/></x>)) { if (<x><y/></x>[<><x><y/></x></>]) {break ;gc() }} else {export *;__count__ } while(this.__defineGetter__(\"constructor\", function  __count__ () { return this ? window : arguments } ));");
tryItOut("let(__noSuchMethod__ = #3={a:#3#}) ((function(){( \"\" );})());");
tryItOut("do  while((( /* Comment */prototype)) && 0);");
tryItOut("/*infloop*/while((-(-1.__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))))for(let y in []);");
tryItOut("throw undefined;");
tryItOut("throw __proto__;");
tryItOut("if( { return function(id) { return id } } ) return;");
tryItOut("L: {const prop; }L:switch(<x><y/></x>.(1.3).yoyo((__parent__ + [1,,]))) { default: break; case 9: /*for..in*/for([__count__, __noSuchMethod__] = --this in  /x/g ) {{} } }\f");
tryItOut("while((this.__defineSetter__(\"prototype\", (1 for (x in [])))) && 0)with({__parent__: Function()}){Math.powcontinue M; }");
tryItOut("{}");
tryItOut("if( /x/ ) {}");
tryItOut("/*infloop*/L:do /*for..in*/for(var __noSuchMethod__ in window) {export __iterator__; } while((\n*::*));");
tryItOut("/*for..in*/for(var __parent__ = *::*.isPrototypeOf(window) in (setter)[ /x/ ].isPrototypeOf(null ? /*\n*/@foo : this)) {let (prop) { return 0x99; } }");
tryItOut("M:do return; while((#2=({constructor: <x><y/></x>})) && 0);");
tryItOut("*::*");
tryItOut("\nthrow constructor;");
tryItOut("/*for..in*/for(var __proto__ = {} in *::*) { }");
tryItOut("L:if([15,16,17,18].some(new Function,  /x/g )) { if ((new Function).apply()) {{}export __iterator__; } else {return *; }}");
tryItOut("undefined");
tryItOut("L:  const __parent__;");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("if((__proto__ = this.zzz.zzz)) {if(window) {var \tprototype = <x><y/></x>;let prop = <><x><y/></x></>; } else  if (*) {continue M; } }");
tryItOut("if(__iterator__ = <x><y/></x>) {__iterator__, __count__ = constructor; } else \t if (\t[11,12,13,14].filter) return; else {return; }");
tryItOut("try { __iterator__.__noSuchMethod__ = prototype; } finally { try { <bbb xmlns:ccc=\"[11,12,13,14].sort\"><ccc:eee></ccc:eee></bbb> } catch(__proto__ if (function(){({ __noSuchMethod__: prototype, __proto__: constructor }) = prop;})()) { __iterator__ = __iterator__; } catch(__parent__) { try { let(function::__proto__, __parent__) ((function(){__noSuchMethod__ = 3.141592653589793, prop = {};})()); } finally { let(function::__noSuchMethod__ = [[]], __iterator__ = <><x><y/></x></>) { break ; }  } finally { gc() }  } ");
tryItOut("/*infloop*/for(const prop;  /x/  << @foo; ) let(prop) ((function(){__noSuchMethod__ = (-1);})());");
tryItOut("throw StopIteration;");
tryItOut("do {/*infloop*/for(#1=[<x><y/></x>]; prop.__iterator__; [__count__]++) {;export *; } } while((window) && 0);");
tryItOut("/*infloop*/while(prototype){const __proto__ = <><x><y/></x></>\ntrue }");
tryItOut("L:while(((prototype.__parent__ = <x><y/></x>).hasOwnProperty(\"__noSuchMethod__\")) && 0){return;continue M; }");
tryItOut("/*for..in*/for([prototype, __count__] = (<x><y/></x>.__defineSetter__(\"prototype\", constructor)) in (false.__proto__ = __count__)) {(<x><y/></x>); }");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = <x/> in <x/>) prop");
tryItOut("this.zzz.zzz;");
tryItOut("return constructor/*\n*/\nreturn; const __noSuchMethod__\n/*for..in*/for(const __noSuchMethod__ = var __proto__, __count__ = <x/> in __noSuchMethod__) {/*infloop*/for( \"\" ; <x/>;  '' ) yield; }");
tryItOut("__parent__ = prototype.prototype;");
tryItOut("gc() const prototype;");
tryItOut("with((yield new ((new Function(\"break ;\")))( '' )) < constructor.((__count__)(<><x><y/></x></>)/*).*)L:if(false) { if (window) gc() else {(*::*);__noSuchMethod__ = <><x><y/></x></>; }}");
tryItOut("/*infloop*/while(((__iterator__ = <x/>) / prototype))if(false.hasOwnProperty(\"__noSuchMethod__\")) {export __noSuchMethod__;yield; }");
tryItOut("__parent__.__count__ const constructor;");
tryItOut("/*infloop*/L:do {} while(<><zzz>033</zzz></>);");
tryItOut("if((__proto__ = window)) yield; else {continue M; }");
tryItOut("with([11,12,13,14].sort){__noSuchMethod__ }");
tryItOut("if(0x99.propertyIsEnumerable(\"constructor\") .@x:: (eval)(<x><y/></x> for (prototype in 0.1), <><x><y/></x></>)) if(yield  /x/g .propertyIsEnumerable(\"__iterator__\")) { if ([11,12,13,14].filter) {export *; } else __proto__ = .2, prop;}");
tryItOut("if(<y><z/></y>) {; } else {yield *;export __noSuchMethod__; }");
tryItOut("L:with(({}))return __count__");
tryItOut("{yield ({prototype: 5.0000000000000000000000.__lookupGetter__(\"__noSuchMethod__\") }); }");
tryItOut("L: {export __proto__;; }");
tryItOut("return;");
tryItOut("if(__noSuchMethod__) const prop = <><x><y/></x></>, __count__\n/*infloop*/M:for(const ({ prototype: prop, function::__proto__: ({ constructor: __noSuchMethod__, __count__: [] }) }) = ([({ __parent__: prop\t, __proto__: __noSuchMethod__ }), var prototype = <><x><y/></x></>, prop;, __parent__, ] = [({ prop: prototype\f, constructor: __proto__ }), ({ __count__: __count__, __proto__: __count__ })].__noSuchMethod__ = __proto__ = ((yield yield this))); \f(eval(\"window(<><x><y/></x></>, *::*)\", __proto__.__count__ = <x><y/></x>)--); <x/>[__count__]) {while(( /x/ ) && 0)gc() }");
tryItOut("if((constructor = \nwindow)) /*for..in*/for([__proto__, constructor] = *::*.valueOf(\"number\") in <><x><y/></x></>) {let prop, __noSuchMethod__; } else  if (null) {throw <><x><y/></x></>;L:if(function ([y]) { }) yield function ([y]) { }; } else {{}\ngc()\n }");
tryItOut("/*infloop*/for((prop = (*::*)[__parent__]); this\t; null[this].valueOf(\"number\")) /*infloop*/do {export constructor; } while(0.1);");
tryItOut("/*infloop*/do /*for..in*/for(__iterator__ =  in null) var __proto__, constructor = ; while((<y><z/></y>).valueOf(\"number\"))");
tryItOut("return;\ncontinue ;\n");
tryItOut("let(__parent__ = *) { 1e4;");
tryItOut("M:\fwith({prop: __noSuchMethod__ = this}){<><x><y/></x></>; } const prototype;");
tryItOut("if(__iterator__) {yield null; } else var constructor = null;");
tryItOut("(this); const __parent__;");
tryItOut("if(true) {let (__noSuchMethod__, prototype = @foo) { /*for..in*/for(const constructor = <y><z/></y> in function ([y]) { }) {yield false;yield; } } } else with(this <= (('haha'.split).call).call(*::*, *, <><x><y/></x></>)){/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = <x/> in *) {//h\nyield ; }return; }");
tryItOut("L: M:while(((function  __parent__ (getter, __iterator__) { yield <><x><y/></x></> } ).call(__noSuchMethod__, null) <<= <x/>--) && 0){yield;let x::__iterator__; }");
tryItOut("__proto__");
tryItOut("export __count__;");
tryItOut("while(((-0) ^= __iterator__.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; })) && 0)do yield window; while(((((prop%=undefined) .@x:: undefined.watch(\"__parent__\", 'haha'.split)) for (__count__ in *) if (prop)) :: this <<= this.watch(\"prop\", __count__)) && 0);");
tryItOut("while(((__iterator__ = window)) && 0){/*infloop*/do return; while(<y><z/></y>); }");
tryItOut("if(@foo) (*); else  if (*) {continue M; } const __count__;");
tryItOut("/*for..in*/for(var prop = prototype.prop = __parent__ *= null in prop) {continue M;\nbreak M;\n__iterator__ = constructor; }");
tryItOut("L:while(( /* Comment */((window if (true))\r)) && 0)if(-undefined) throw __noSuchMethod__;");
tryItOut("if() /*for..in*/for(var __count__ in ((((({ constructor: __noSuchMethod__, constructor: __iterator__ }) = (__iterator__ = <><x><y/></x></>))).watch)((prototype-=<><x><y/></x></>.__lookupGetter__(\"__count__\"))))){var __proto__, __count__ = <x><y/></x>;{} } else  if ( '' ) {<><x><y/></x></> = __count__: <><x><y/\f></x></>, __iterator__ = <><x><y/></x></> }");
tryItOut("/*for..in*/L:for(prototype = <y><z/></y> -= window in arguments) return  \"\" ");
tryItOut("let(({ constructor: __parent__ }) = (.2.propertyIsEnumerable(\"__proto__\")), __proto__ = this) { throw __noSuchMethod__;");
tryItOut("L: function(y) { yield y; const prop = this;; yield y; } const __count__;");
tryItOut("do {continue L; } while((prop) && 0);");
tryItOut("const __count__\n");
tryItOut("/*for..in*/for(var __parent__ in ((((1 for (x in []))).apply)( /x/ ))){ }");
tryItOut("__parent__ = [z1,,];");
tryItOut("let(constructor = (__iterator__.throw(<x><y/></x>))) ((function(){/*infloop*/while(({ __noSuchMethod__: [__noSuchMethod__, , constructor], __noSuchMethod__: [, __noSuchMethod__, __parent__, , ] }) = new <x/>);})());");
tryItOut("if(constructor.valueOf(\"number\")) function () { return <y><z/></y> } ");
tryItOut("with(){{}return; }");
tryItOut("{/*infloop*/do <><x><y/></x></>; while(__proto__);continue M; }");
tryItOut("/*for..in*/for(__proto__ = Math.sin() in [,]) {yield;yield window; }");
tryItOut("/*infloop*/L:do {continue M;; } while(eval(\"<><x><y/></x></>;\", __iterator__.hasOwnProperty(\"constructor\")));");
tryItOut("if((<></>.__count__)) {throw <x><y/></x>.( \"\" ); } else  if (1e81) M:switch([15,16,17,18].sort(function(y) { yield y; throw __iterator__;; yield y; }, true)) { case 1: yield;break;  } const __iterator__; else {/*infloop*/do {export prop;return; } while(#1=<y><z/></y>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */((.2).__defineSetter__).call for  each(const __count__.__count__ in [[1]]) throw __count__;");
tryItOut("switch(4.) { case __iterator__ == <x/>:  }");
tryItOut("break L;");
tryItOut("/*for..in*/for(let prototype = __parent__ ? (*::*)(5.0000000000000000000000, window) : __proto__.(*::*).throw(__parent__ = false) in  \"\" ) var ({ constructor: __noSuchMethod__, __proto__: prop }) = [15,16,17,18].filter(constructor, <x><y/></x>);");
tryItOut("let(({ constructor: ({ constructor: ({ constructor: constructor }), __count__: __iterator__ }) }) = #1=[#1#]) ((function(){with({}) { return; } })());");
tryItOut("/*infloop*/for(<y><z/></y>.__count__; __parent__ = [__parent__].valueOf(\"number\"); [, , ({ __parent__: __noSuchMethod__ }), , prop] = ({prop: (({__proto__: this.__defineSetter__(\"prop\", function  __parent__ () { yield __parent__ } )})) })) /*for..in*//* nogeckoex bug 349964 */ for  each(let [,,z1].prototype in <><x><y/></x></>) continue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in ([prototype = <x><y/></x>])) let (__count__ = <y><z/></y>, __noSuchMethod__ = *) { let (prototype = <x><y/></x>, __iterator__ = <><x><y/></x></>) { yield <x><y/></x>; } }");
tryItOut("let (__proto__, constructor) { yield; }");
tryItOut("if((!<x><y/></x> <<= <x><y/></x>)) {L:if([,]) { if (window) prototype = this; else } } else  if (__noSuchMethod__.prop setter= (function () { yield this } ).apply) {yield true for each (constructor in 1.3) if (5.0000000000000000000000);var __count__ = <x><y/></x>, constructor = @foo; } else __parent__, constructor;");
tryItOut("let (__noSuchMethod__ = [__proto__, , ] = prototype, prop) { yield; }");
tryItOut("M:with(#1=(export *))/*infloop*/for(let __noSuchMethod__ = __parent__ =  \"\"  >>= ((*::* for (prop in function(id) { return id }))) ^= true.throw([1]); -3/0; this.yoyo(@foo)) {const __parent__ = <x><y/></x>, __parent__; }");
tryItOut("/*infloop*/for((prototype =  /x/ )['prototype'] = ( /x/g .eval(4.))[this.__defineGetter__(\"prototype\", function(q) { return q; })]; (!({ __noSuchMethod__: __noSuchMethod__ }) = prototype = this); ({ __proto__: __count__ }) = *::*.unwatch(\"constructor\")) {continue ;[1,2,3,4].map }");
tryItOut("L:if((+false).@*) (prototype) = constructor; else {/*infloop*/for(const __proto__ = <x/>; (Date()); ((uneval(window)))) ((function ([y]) { })()); }");
