tryItOut("with(<x><y/></x>)var __noSuchMethod__ = __iterator__, __parent__;");
tryItOut("yield;");
tryItOut("/*infloop*/L:do {throw *::*; } while(new String(this != __parent__));");
tryItOut("__parent__ = prop;");
tryItOut("/*infloop*/for(var ({ prop: ({ prototype: prop }), __parent__: [({ prototype: __noSuchMethod__/*\n*/, __count__: __proto__ }\f), __proto__, __iterator__] }) = prop.__parent__ setter= function (prop, prototype) { return true } ; .(\"prop\").valueOf(\"number\") + <x/>.__parent__; window for (prototype in <x><y/></x>)) {var __iterator__ = this;gc() }");
tryItOut("{}\n({a2:z2});\n");
tryItOut("/*for..in*/for(prop = let (__parent__, __iterator__) function(id) { return id } -= this.__defineGetter__(\"prop\", Math.pow) in __noSuchMethod__) {yield;; }");
tryItOut("L:with(__iterator__.__iterator__){/*for..in*/for(const __parent__.__count__ in true) if(prototype) {<y><z/></y>; }while(([15,16,17,18].some(Math.sin, *)) && 0)/a/gi }");
tryItOut("/*for..in*/for(var [prototype, __iterator__] = (this.__defineGetter__(\"constructor\", (1 for (x in [])))) in [__noSuchMethod__ for each (prototype in this)]) if(new set['prop'] = <x><y/></x>()) {continue ;yield undefined; } else  if ((++this) != <x><y/></x>.(1.3)) <x/>; else /*for..in*/for(var prototype in prototype) {let __parent__; }");
tryItOut("let(constructor, __proto__) ((function(){for(let y in [5,6,7,8]) yield __noSuchMethod__;})());");
tryItOut("if(((yield ([,,].__parent__)))) try { this.zzz.zzz; } finally { throw StopIteration; } ");
tryItOut("return (__proto__ = __proto__ :: __iterator__.__noSuchMethod__ = [1,,]);");
tryItOut("return\n/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype, __proto__ in prop) let prop = this, __iterator__ = <x><y/></x>;");
tryItOut("if(__iterator__ :: prototype) {return <y><z/></y>; } else \n");
tryItOut("/*infloop*/for(const constructor; __count__ = 1e4; prototype = (continue )) do {/*infloop*/for(var prop; __parent__; <x><y/></x>) ;yield; } while((__count__.prototype = <x><y/></x>\t) && 0);");
tryItOut("switch(function ([y]) { }) { case 4: yield 0/0;M:if(window.valueOf(\"number\")) return 0; else  if ((<><x><y/></x></> ? *::* : (-1))) {{} } else {{} }break; default:  }");
tryItOut("with({__parent__: (__noSuchMethod__ = 0x99)}){do export *; while((<x><y/></x>) && 0);return; }");
tryItOut("M:if(((uneval([15,16,17,18].map(gc, *)))).prototype) return <><x><y/></x></>; else  if (({prop: (function  constructor (__iterator__, __iterator__)<x/>()), __count__ setter: Math.sin/*\n*/ }) , {}) {(window);({ __iterator__: ({ __parent__: __count__ }) }) }");
tryItOut("/*infloop*/M:for(__parent__ = ({__proto__ }); ((yield *::*.__lookupGetter__(\"__parent__\"))); <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")) do return; while((Function) && 0);");
tryItOut("try { return (null.valueOf(\"number\")); } catch(__iterator__) { for(let y in []); } finally { yield  /* Comment */window; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in (window | __count__)) {; }\nreturn ((-0) <<= 1e4);");
tryItOut("/*infloop*/while(<y><z/></y>.hasOwnProperty(\"__proto__\"))throw  /x/g ;");
tryItOut("{(-1);break M; }");
tryItOut("/*for..in*/for(const prop in *::*) export prototype;");
tryItOut("/*for..in*/for(const function::__iterator__ in <><x><y/></x></>) {let __count__;gc() }");
tryItOut("/*for..in*/M:for(let prototype = prototype.__parent__ in prop) {export *;return; }");
tryItOut("L:if(@foo) gc()");
tryItOut("while(((([11,12,13,14].filter).__proto__)) && 0)/*for..in*/M:for(var __parent__ in ((__noSuchMethod__.constructor setter= gc)('fafafa'.replace(/a/g, /a/gi)))){{}/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 1e81) {break ;yield; } }if(({constructor: null.valueOf(\"number\")})) { if ((__noSuchMethod__ = false).valueOf(\"number\")) {var __iterator__ = <><x><y/></x></>, __noSuchMethod__; } else {export __proto__; const __parent__; const __proto__; }}\ngc()\n");
tryItOut("<><x><y/></x></>");
tryItOut("try { let(__count__, prototype = (yield (<><x><y/></x></> .@*:: <x><y/></x>))) { yield \n*::*; } catch(__count__) { <><xxx>{__iterator__}</xxx></>; } ");
tryItOut("throw undefined;return <x><y/></x>;");
tryItOut("if((this.__defineGetter__(\"prototype\", (function(id) { return id }).__defineSetter__) for each (prototype in this.__defineSetter__(\t\"__iterator__\", eval)))) {;/*for..in*/for(const [__iterator__, constructor] = this.__defineSetter__(\"__count__\", *::*) in  ''  !== <><x><y/></x></>) {export __proto__; } }");
tryItOut("with((function  __noSuchMethod__ (__iterator__, constructor) { throw *; } )(__iterator__)){export __proto__;export *\n }");
tryItOut("with({__proto__: __count__ = <><x><y/></x></>.throw(<x/>)}){constructor = __parent__; }");
tryItOut("L:if(__parent__.prop.*) do \t{let __proto__ = *; } while((window) && 0);");
tryItOut("/*for..in*/L:for(prototype in  /x/ ) ([[]])\nthrow  /x/g ; const constructor;");
tryItOut("if(( /x/g ).apply) {return; }");
tryItOut("return;");
tryItOut("throw [11,12,13,14].filter;export *;");
tryItOut("with({__noSuchMethod__: [15,16,17,18].filter(Math.sin, this)})try { var prop; } finally { var __proto__ = __proto__; } ");
tryItOut("{/*for..in*/for(__parent__ in <!--yy-->) {yield *; }export *; }");
tryItOut("do /*for..in*/for(let __count__ = (({ constructor: prototype, prototype: __parent__ }) = __noSuchMethod__ ^= undefined) in true) export *; while((prop.prototype = prototype === -- /x/g .isPrototypeOf([__proto__yield])) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = (__noSuchMethod__) in new Number(<x><y/></x>,  \"\" )) {return; } const __noSuchMethod__;");
tryItOut("gc()\nexport prototype;({ prototype: ({ prop: __parent__, __parent__: ({ constructor: __noSuchMethod__ }) }) }), prop");
tryItOut("{return __noSuchMethod__; }");
tryItOut("if(#1=[#1#]) { if ( /x/g .valueOf(\"number\")) return <x><y/></x>;} else {yield;1e+81; }\n");
tryItOut("throw StopIteration;");
tryItOut("1e-81");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = (((uneval(window)))\n) in <x><y/></x>) {return;break ;throw *::*; }");
tryItOut("/*for..in*/M:for(let __proto__ = __count__ in yield this.__defineGetter__(\"prop\", gc)) {{/*for..in*/for([prop, prop] = (function ([y]) { })() in <x/>) var __iterator__; }\t }");
tryItOut("M:if(<x><y/></x>.unwatch(\"__count__\")) {return;(__noSuchMethod__); } else  if (({}) * #1=[#1#]) {eval } else yield *::*;\t");
tryItOut("let (prop, prototype = <x/>) { __parent__, prototype = *; }");
tryItOut("L:if(( \"\"  & 3/0)) {var __noSuchMethod__; } else  if (null) 5.0000000000000000000000; else {[1,2,3,4].slice }");
tryItOut("{( '' ); }");
tryItOut("let (__iterator__ = [__parent__].map(([1,2,3,4].map).apply), ({ __count__: __iterator__ }) = function ([y]) { }) { {} }");
tryItOut("/*infloop*/for(const __proto__;  \"\" --; ((<y><z/></y> *= @foo) %=  /x/ )) /*for..in*/L:for(const prototype = undefined in 1.2e3) {{} }");
tryItOut("with((this.zzz.zzz) % )export prototype;");
tryItOut("while(((new ((<x/>).__defineSetter__)(<x><y/></x>, {}))) && 0)let (prop = this) { const constructor, __proto__; }");
tryItOut("");
tryItOut("/*infloop*/for(const __count__; #0=this || * * constructor; (eval)([,])['prototype'] = [<><x><y/></x></>]\n) L:if(constructor[<><x><y/></x></>]) {with(<x><y/></x>){throw  '' ; }(0); } else {return; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {\t(__iterator__); } while( /x/ .@foo);");
tryItOut("let (prototype, [[, ({ prop: [], __proto__: ({ __count__: constructor, constructor: __proto__ }) }), __parent__, ], , , __proto__, __proto__] = __iterator__) { switch(false) { default: let __parent__, prototype;case *: break;  } }");
tryItOut("let (constructor = yield  /x/ ) { var constructor, prototype = <><x><y/></x></>; }");
tryItOut("throw __count__;");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let \fyield constructor = ({a1:1})['__count__'] in (this.watch(\"constructor\", false)) && (let __parent__, __iterator__ = <x><y/></x>;.prototype = ([z1] += @foo))(#3={a:#3#}(<><x><y/></x></>, <><x><y/></x></>)++, (<x><y/></x> &= <x/>))) with(-0++){gc() }");
tryItOut("{if(@foo.yoyo(*::*))  }");
tryItOut("Math.pow");
tryItOut("{/*for..in*/for(const function::__parent__ = function::constructor.__count__ = *::* in <><x><y/></x></> % <x/>) __proto__ = *;; }");
tryItOut("/*infloop*/do throw  /x/ ; while(null);");
tryItOut("/*for..in*/for(const __proto__ = 0/0 in new (@foo).watch(this.__defineGetter__(\"constructor\", <x/>), <x><y/></x>)) {{{gc()continue ; }export *; } }");
tryItOut("/*for..in*/for(var [__count__, __iterator__] = ((constructor &= true))(#0=<><x><y/></x></>.@foo) in <ccc:ddd><!--yy--></ccc:ddd>) {if((__proto__.(prototype).isPrototypeOf(((uneval(<x><y/></x\t>))))))  '' ; else  if (this.zzz.zzz.__lookupSetter__(\"__parent__\")) {export *; } else (1e4); }");
tryItOut("with(this.zzz.zzz.__parent__/*\n*/ | yield null){gc()\nyield <x/>;\n }");
tryItOut("{/*for..in*/for(var [__parent__, prop] = #1# in <><x><y/></x></>) (__proto__); }");
tryItOut("yield;");
tryItOut("/*for..in*/for(var __count__ = this.__count__.* in (__parent__(false) = (\nthis))) do {;M:if(constructor) { if (false) {export *; }} else {<y><z/></y>;return; } } while(((p={}, (p.z = __count__.__lookupGetter__(\"__parent__\"))())) && 0);");
tryItOut("with({constructor: let (prop) __count__}){}");
tryItOut("let prototype; const __count__;");
tryItOut("switch(this == window) { default: M:with({__count__: false})(.2);break;  }");
tryItOut("/*infloop*/while(prop+=0x99(<><x><y/></x></>, constructor))\n/*infloop*/for(let constructor; *; <x/>) {yield; }");
tryItOut("if([, , ] = function(id) { return id }) throw <y><z/></y>;");
tryItOut("/*for..in*/for(let __proto__ in <><x><y/></x></>) throw <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(this.__defineSetter__(\"__count__\", (1 for (x in []))).prototype in ({a1:1}).propertyIsEnumerable(\"prototype\")) yield undefined;");
tryItOut(" '' ; const __iterator__;");
tryItOut("L: return\n/*infloop*/while(((.2 for each (__proto__ in this))).prop){break M; }");
tryItOut(";yield window;\t");
tryItOut("if((__iterator__)) {function(q) { return q; } } else yield;");
tryItOut("yield <x><y/></x>;\n{}\n");
tryItOut("let (__count__) { if(<x><y/></x>) gc() else  if (window) {const __parent__ = window;return; } }");
tryItOut("while(([[]]) && 0)switch(<x/>) { default: yield;break; case 5: break;  }");
tryItOut("/*for..in*/L:for(let __proto__ = (constructor = (function  __noSuchMethod__ (prop) /x/ )((gc()(true, <x><y/></x>)))) in * !== <y><z/></y>) {{} }");
tryItOut("/*infloop*/do { } while(*);\nvar __proto__\n");
tryItOut("{__proto__ }");
tryItOut("this.zzz.zzz;");
tryItOut("function () { const  { yield constructor } ; } ");
tryItOut("if( /* Comment */__count__.__defineSetter__(\"__parent__\", 0.1)) {M:if( \"\" ) {export constructor;return; } else {set;yield constructor; } } else  if (export * instanceof *) if(null) *; else  if (<y><z/></y>) export *; else {return try { gc() } catch(__noSuchMethod__ if <x/>) { {} } catch(__noSuchMethod__ if __noSuchMethod__) { gc() } ; } else return undefined;");
tryItOut("\n");
tryItOut("{__count__ = (-0) }");
tryItOut("function(y) { yield y; <x/>;; yield y; }\nyield;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in 1e81) {;__iterator__ = (-1); }");
tryItOut("let (__proto__ = (false.__defineSetter__(\"prototype\", 'haha'.split)), ({ __parent__: [[], , , ] }) = new (function () { return *::* } )(<x><y/></x>, __noSuchMethod__)) { /*infloop*/M:for(var __iterator__; new Exception(); [, ] = __count__.__iterator__ = this) /*infloop*/for(var x::constructor = __noSuchMethod__; <><x><y/></x></>; constructor) {export *; } }");
tryItOut("if(null) yield <><x><y/></x></>; else  if (({ })) /*for..in*/for(let __noSuchMethod__ in <y><z/></y>) {;; }{}");
tryItOut("throw StopIteration;");
tryItOut("break L;");
tryItOut("let(constructor = 0, prototype) { throw prototype;");
tryItOut("if((eval(\"<y><z/></y>\",  /x/ ))) {;gc() } else  if (1e+81 .@*:: 1.2e3) {{} }");
tryItOut("L:if(throw 1e4)  else  if (({ __noSuchMethod__:  \"\" , prop: __parent__ }) = [11,12,13,14].some) {yield;throw  '' ; } else export *;");
tryItOut("L:with((new <y><z/></y>())['fafafa'.replace(/a/g, [1,2,3,4].map)]){yyy }");
tryItOut("if(this.__defineSetter__(\"__proto__\", <y><z/></y>)) (function ([y]) { }); else ;");
tryItOut("let (({ __noSuchMethod__: prototype })) { /*infloop*/for(let constructor; *::*; {}) (<x/>); }");
tryItOut("switch((this.__defineGetter__(\"prop\", (prototype = -1.*)))) { default:  }");
tryItOut("/*for..in*/for([__count__, prop] = (eval).call([this].map(false), (<x><y/></x>\n)) in  /x/g  >>>=[,]) {yield; }");
tryItOut("let (__parent__ = undefined) { let constructor; }\n");
tryItOut("/*infloop*/while([let (constructor = this, __proto__) this if (<x><y/></x>)]){yield;export prototype; }");
tryItOut("with(\n{prototype: yield <><x><y/></x></>.__lookupGetter__(\"prop\")})/*infloop*/do {return;return; } while(new Number());");
tryItOut("/*for..in*/L:for(const __iterator__ = [[]] in <x><y/></x>) ");
tryItOut("if( /x/ ) { if (window) M:if(<x><y/></x>) [1,2,3,4].slice else {undefinedconst prop = this, prototype; }} else yield <x><y/></x>, 5.0000000000000000000000;");
tryItOut("if([, ({ __noSuchMethod__: [], __parent__: ({ constructor: ({ __parent__: __parent__ =  '' , __iterator__ }), __proto__: ({ //h\n__proto__: prototype, constructor: __noSuchMethod__ }) }) }), [({ __iterator__: [], __iterator__: __parent__ }), , , __noSuchMethod__], [({ __noSuchMethod__: constructor, __iterator__: ({ __parent__: constructor, getter: __count__ }) }), ({ __proto__: prototype }), ({ __count__: [__noSuchMethod__, , , ] }), prop, ], [, prop]] = prop = this.zzz.zzz) break ; else {break ;prop = *, constructor = <><x><y/></x></>; }");
tryItOut("{L:with(<><x><y/></x></>){(window); } }");
tryItOut(";");
tryItOut("/a/gi");
tryItOut("L:if(let (prop = __parent__) *.__lookupSetter__(\"__iterator__\")) { if (({})) export *;} else {<><x><y/></x></>;yield; }");
tryItOut("{for(let y in []); }");
tryItOut("/*for..in*/for(var (__proto__) in ((gc)(prototype.(<y><z/></y>))))with({__count__: <bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb>}){export __iterator__; }");
tryItOut(" /x/ .*['__iterator__'] = constructor;");
tryItOut("/*infloop*/for(const __parent__ = undefined; null === <x><y/></x>(({__noSuchMethod__, __noSuchMethod__: -0 }), window).@*; new (<y><z/></y>)(, <y><z/></y>)) (this);");
tryItOut("this.zzz.zzz;");
tryItOut("{yield <><x><y/></x></>;gc() }\n");
tryItOut("/*for..in*/for(prop in (((function (__count__, __iterator__) { return ([1].__lookupGetter__(\"prototype\")) } ).call)(window))){export *;/*infloop*/for(yield; <y><z/></y>; ({})) return 0; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in [z1]) if(window) return;/*for..in*/for(const __count__ = /*\n*/1e-81 in <x><y\f/></x>) {return;yield; }");
tryItOut("{<y><z/></y>; }");
tryItOut("/*infloop*/M:do /*for..in*//* nogeckoex bug 349964 */ for  each(let (prop) in eval(\" /x/ \", prototype).yoyo((({a1:1}).unwatch(\"__parent__\")))) const prop, try { continue M; } catch(constructor) { ; } finally {  }  = <><x><y/></x></>; while(((uneval(constructor))));");
tryItOut("{}\ngc()\n");
tryItOut("/*for..in*/for(const (constructor(<><x><y/></x></>)) in (([1,2,3,4].slice)(#1=[#1#]['__parent__'] = ([window]))))var prop = this, each = <><x><y/></x></>;");
tryItOut("if(__count__.__proto__ = @foo.@foo\f) { if (({constructor: })) /*infloop*/M:for(let ({ __iterator__: __iterator__, __noSuchMethod__: <x><y/></x> }) = this.__defineGetter__(\"prototype\", @foo); new (1e-81)(<x><y/></x>); new <><x><y/></x></>(__proto__)) {export *;return; } else {var __parent__, __noSuchMethod__;if(((yield <x><y/></x>))) throw prototype; else {yield window;let prop = *, __proto__ = <x><y/></x>; } }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __iterator__: ({ prop: [, ], prop.constructor: prototype }) }) in 033.__lookupSetter__(\"__count__\")) {yield *; }");
tryItOut("{export prop; }\nlet(__parent__, prototype) ((function(){return * ?  ''  : null;})());\n");
tryItOut("if([11,12,13,14].some !== (false)[<><x><y/></x></>].throw(window.__defineSetter__(\"prop\", function  prototype (__proto__) { yield {} } ))) { if ((new Array((function  __iterator__ (__proto__, __iterator__) { return * } )(<x><y/></x>)))) (1e+81); else {((({prototype: <x><y/></x>}))); }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in __count__)  /x/ ;");
tryItOut("with({prop: [[1]].__parent__.__defineGetter__(\"__count__\", new Function)})({a1:1});");
tryItOut("export __noSuchMethod__;M:if( /x/ ) let __proto__ =  \"\" ; else {yield; }");
tryItOut("switch(eval(\"*\", <y><z/></y>) .@*:: constructor.yoyo(<y><z/></y>)) { default: case <>\t<x><y/></x></>.eval({}.constructor = @foo): (<><x><y/></x\f></>)\n }");
tryItOut("{({});(null); }");
tryItOut("break M; const prop;");
tryItOut("L:switch((new (<><x><y/></x><//*\n*/>).call( /x/ , <><x><y/></x></>))) { default: ;break;  }");
tryItOut("/*infloop*/do {; } while((~<x/>));");
tryItOut("/*for..in*/M:for(__proto__ in ((((<><x><y/></x></>)).watch)(undefined && [1](--1e-81)))){gc() }");
tryItOut("/*infloop*/while(prototype){undefined; }");
tryItOut("L:if(<><x><y/></x></> != constructor) {export __parent__; } else  if (<><x><y/></x></>) break ;");
tryItOut("/*for..in*/for(prototype in (function  prop (prototype) { yield <x/> } )(<><x><y/></x></>)) { /x/g /*for..in*/M:for(let __proto__ in ((function(q) { return q; })(<x><y/></x>))); }");
tryItOut("yield *::*;\nexport __noSuchMethod__;\n");
tryItOut("try { throw constructor; } catch(__noSuchMethod__) { constructor; } ");
tryItOut("for(let y in [5,6,7,8]) prototype = __parent__;");
tryItOut("{export __iterator__;function (;, __noSuchMethod__) { (<><x><y/></x></>); } \n }");
tryItOut("/*for..in*/for(var __count__ in  /x/ .hasOwnProperty(\"__iterator__\")) /*for..in*/L:for(let [__parent__, __parent__] = [,,z1] in <y><z/></y>) *::*");
tryItOut("/*infloop*/L:do {if(new (window)()) {yield; const constructor; } else  if ( /x/ .isPrototypeOf(new ({})([1])) ^ prop = <x><y/></x>.(<y><z/></y>)) {return true; }L:do continue M; while(((p={}, (p.z = (-new (eval)(prop)))())) && 0); } while((uneval(window.prop.@*)));");
tryItOut("/*infloop*/M:for(const [, constructor] =  \"\" ; constructor-=<><x><y/></x></>; (new (function (__proto__, __iterator__) { (null); } )())) continue L;");
tryItOut("/*for..in*/for(const __parent__ in * >>= [,]) /*infloop*/for( /x/g ; constructor; constructor) {break ; }");
tryItOut("if(__parent__.__lookupGetter__(\"__proto__\")) export __parent__; else  if ((__parent__.( \"\" ) %= \n@foo)) yield  \"\" ; else function(y) { yield y; return [,];; yield y; }");
tryItOut("{yield; }");
tryItOut("{}\n");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/do {let __parent__ = <><x><y/></x <x/>.unwatch(\"prop\").__lookupGetter__(\"__parent__\") ></>, __iterator__throw <y><z/></y>; } while((arguments.isPrototypeOf([,,z1]))[(prop = ({}) in <y><z/></y>.isPrototypeOf([]))]);");
tryItOut("//h\nL: for(let y in [5,6,7,8]) yield ;");
tryItOut("const __iterator__ = *\nconst __proto__ = <x><y/></x>\r, prototype;");
tryItOut("if((let (__iterator__, __proto__ = @foo) window)) {yield <x><y/></x>; } else  if (__iterator__|=constructor) export *; else let prototype, __iterator__;");
tryItOut("let (prop = *) { /*for..in*/M:for(var prototype = ((<x/> > window).@*++) in 3/0.__iterator__) {/*for..in*/M:for(let [__noSuchMethod__, __count__] = new [,,]() in [1,,]) {(new Function(\"yield;\")) } } }");
tryItOut("L:if([ \"\" ].map('haha'.split)) gc() else export prop;");
tryItOut("L:if(([1,2,3,4].slice).call(__count__,  \"\" .__parent__)) with({prototype: __count__.(((<x/> <<= ) /x/ \t))})/*for..in*/for(var constructor in (( '' )(this))); else  if ((new (<><x><y/></x></>.__parent__)())) /*for..in*/L:for(let each in ((function(q) { return q; })(window))){{} }\n");
tryItOut("/*infloop*/M:for(let __count__; prototype.constructor =  ''  ? <y><z/></y> : <x><y/></x>; (Function).call(constructor = <y><z/></y>, false, 3)) {/*infloop*/for(<><x><y/></x></>; *; window) {continue M; }gc() }");
tryItOut("if((let (function::__proto__ = prop = <><x><y/></x></>, prototype) eval(\"export *;\",  /x/g ))) { if (__parent__) yield  /x/ ;} else {(new Function).call }");
tryItOut("export __count__;/*infloop*/for(const ({ __parent__: prototype }) =  /x/  :: prototype; prototype = this; (true.prop)) return '");
tryItOut("with({[__parent__] = *::*\n: false}){;var constructor = <><x><y/></x></>, __noSuchMethod__ =  '' ; }");
tryItOut("/*infloop*/do {yield; } while(prop); const __parent__;");
tryItOut("M:switch(<x/>.__lookupSetter__(\"__count__\")) { default: /*infloop*/M:while([1])break;  }");
tryItOut("if( /x/  ^ <x/>) { if (__iterator__) {var __noSuchMethod__ = <><x><y/></x></>, __iterator__ = false;export prototype; }} else {export *;return <x><y/></x>; }");
tryItOut("L:while((window) && 0){return;; }");
tryItOut("switch(null ? false : window) { case [].unwatch(\"prototype\"): break; /*for..in*/for(const __proto__ = 'fafafa'.replace(/a/g, gc) in (this.zzz.zzz)) if(prop = *::*) {yield;export __noSuchMethod__; } else  if (+__noSuchMethod__) {(prototype).watchexport *; }break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ ? <><x><y/></x></> : window['__iterator__'] in <x/>) false;");
tryItOut("/*for..in*/L:for(const __parent__ in (new (({}).__lookupGetter__)(<><x><y/></x></>, *::*))) {var prop; }");
tryItOut("/*infloop*/for(('fafafa'.replace(/a/g, function ()(<x/>)())); ((function () { return true } ).call(<x/> - *::*, 1e4 - true, #1#)).@foo; __proto__.__proto__) {let __proto__ = constructor, __count__ = 3.141592653589793;const __iterator__ = 4.; }");
tryItOut("L:if(<x/>) { if ((__count__ =  '' )) /*infloop*/for(this; function(id) { return id }; window) {export *;let __iterator__ = <><x><y/></x></>, constructor = window; }} else {__parent__ = <><x><y/></x></\n>; }");
tryItOut("switch(true) { default: const __count__ = __noSuchMethod__; }");
tryItOut("while(([ if (-1)]) && 0){/*infloop*/for(var __proto__; window; <><x><y/></x></>) ( \"\" );return; }");
tryItOut("/*infloop*/M:for(3; this;  /x/ ) export *;");
tryItOut("/*for..in*/for(let __parent__ in ((function  __count__ (({ prototype: ({ __count__: __noSuchMethod__, prop: __count__ }), __proto__: ({ 4.: prototype }) }), ({ constructor:  }))yield new eval(*, __parent__))(<y><z/></y>))){ }");
tryItOut("033\nreturn;\n([[]])\n\n");
tryItOut("/*infloop*/while(\nlet (__iterator__, __iterator__ = [[1]]) undefined)export *;");
tryItOut("{/*for..in*/for(let (<x><y/></x>) in ((*::*)(*::*)))while((undefined) && 0)yield;\tlet(prop, __parent__) { prop.constructor = __parent__; }");
tryItOut(" /x/ ");
tryItOut("if(void this) \t{yield;; } else ;");
tryItOut("/*for..in*/for([__count__, __parent__(constructor = [z1,,])] = ((({ __noSuchMethod__: __iterator__ }) = [prop, ])(constructor = <x><y/></x>, (((Function)(window, 1e81))(Exception(null, <x><y/></x>))))) in function::prototype.((__count__ = #1=[#1#]))) /*for..in*/for(let [\tconstructor, __noSuchMethod__] = .2.unwatch(\"__parent__\") in (1.2e3.unwatch(\"prototype\")).function::constructor) {continue ; }");
tryItOut("gc()\nif(__proto__ = prop) {[1,2,3,4].slice }");
tryItOut("if((<><x><y/></x></>.eval(window).propertyIsEnumerable(\"prototype\"))) { if ((#0=((typeof <x><y/></x>) * __noSuchMethod__ >>> this))) {/*for..in*/for(var prototype.prop in ((({}).hasOwnProperty)(constructor.*))){;; } }} else <\tx><y/></x>;\n");
tryItOut("/*infloop*/L:for(var ({ constructor: prop, __iterator__: ({ __count__: prop }) }) = (({ get __noSuchMethod__(constructor, __count__)\n__iterator__ })); [z1]; *::*) break M;");
tryItOut("M:if((prototype = ) === (__iterator__['constructor'] = function ([y]) { } >>= false)) {M:if((false ? <><x><y/></x></> : [,,z1])) {} else  if ((new <y><z/></y>(1e-81, @foo))) {} }' else if(constructor.throw(<><x><y/></x></>)) { if (let (__parent__ = 0x99) constructor >>= undefined % __noSuchMethod__//h\n) return; else {\fconst __iterator__ = @foo; }}");
tryItOut("if(window) {export /*\n*/*;break ; }");
tryItOut("L:with({__count__: null}){var __parent__; const prop; }");
