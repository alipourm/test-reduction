tryItOut("switch(<x/>(<x><y/></x>)) { default: break; case new ((__noSuchMethod__)())(({__parent__: function(id) { return id }})): break;  }");
tryItOut("if(set.__noSuchMethod__ instanceof (<x><y/></x> for each (prototype in null) for each (__proto__ in  \"\" ))) let case <x/>: gc(), __proto__; else {{return this;export *; } }");
tryItOut("/*infloop*/M:for(var __count__ = *::* , -3/0; @foo.* += __proto__ = *::*; constructor = prototype) /*for..in*/M:for([prop, __proto__] = true in <y><z/></y>) var __parent__;");
tryItOut("switch(__count__) { case * .@ <x><y/></x>: if((yield *::*.isPrototypeOf(<y><z/></y>))) export __proto__;break;  }");
tryItOut("let (__noSuchMethod__) { let __proto__ = false, __iterator__; }");
tryItOut("do <><xxx {__iterator__}={(__proto__).call(#1#, @foo, <y><z/></y>)} /></> while((__parent__ = eval(\"yield;\", __iterator__)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in (__proto__.__count__)) {continue ; }");
tryItOut("__proto__ = ({__proto__: (__parent__.@foo), __noSuchMethod__: __count__.watch(\"__iterator__\", function  prototype (each, prop) { gc() } ) }) for each (__parent__ in (__count__ = \n).prototype = false) if (\n033)");
tryItOut("L: (<x><y/></x>);");
tryItOut("/*for..in*/for(const [[], , , __iterator__] in (([1,2,3,4].map)((({prop setter: ({}).hasOwnProperty,  set __noSuchMethod__(__proto__) { yield <x><y/></x>; }  }))\n))){\n__noSuchMethod__ = <x><y/></x>;if(({prop: <><x><y/></x></> })) var constructor; }");
tryItOut("if(({ constructor: ({ __parent__: __iterator__, __count__: __noSuchMethod__ }), constructor: [, prototype, , __noSuchMethod__, __iterator__] }) = this) { if ((__iterator__ !== this).__iterator__ = ( \"\" .__defineGetter__(\"prop\", function(q) { return q; }))[(({ set constructor(prototype)1e-81 }))]) {/*infloop*/\ffor((-0); __parent__\t; 0/0) {throw  \"\" ;__proto__; } } else {(-1); }}");
tryItOut("{gc() }");
tryItOut("/*for..in*/M:for(const __proto__ = (__noSuchMethod__.__count__ = __proto__ = window) in constructor = (gc)) {return; }");
tryItOut("if(<x/>) export __parent__; else  if (<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>.__defineGetter__(\"__iterator__\", eval)++) {throw <><x><y/></x></>;yield *::*; } else const prototype =  \"\" , __count__; const __parent__;");
tryItOut("let(__count__) ((function(){yield 0/0;\f})());");
tryItOut("{export *;return; }");
tryItOut("/*for..in*/for(const [__proto__, __count__] = true in this) function  constructor () { var __noSuchMethod__; } ");
tryItOut("{yield 0.1;yield; }");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] = ([11,12,13,14].some) in this.__defineGetter__(\"prototype\", /a/gi)) {; }");
tryItOut("");
tryItOut("if(1e81 @ new (-3/0)(function ([y]) { })) { if (/*\n*/ ''  if (<ccc:ddd><x><y/></x>yyy<ccc:ddd>yyy</ccc:ddd></ccc:ddd>)) {(#3={a:#3#}); } else {(prop);yield function::__count__; }}");
tryItOut("/*infloop*/for(<x/>.__defineGetter__(\"prop\", @foo); (({ get __parent__ __proto__ () { return  /x/g  } , __iterator__ getter: function(y) { yield y; L: {continue ; }; yield y; } })); (({ __parent__: constructor }) = (__noSuchMethod__ = __count__))) {continue ;if(<x><y/></x>) { if (1e-81) {let __noSuchMethod__ = <><x><y/></x></>;continue L; } else {yield;throw <x/>; }} }");
tryItOut("if(( /* Comment */undefined)) {[1,2,3,4].mapgc() } else  if (this.__defineSetter__(\"__count__\", (0/0).watch)) gc()");
tryItOut("if((yield __parent__)) {\tif(([<y><z/></y>])) @foo else  if (({constructor getter: function  __proto__ (__parent__, __count__) { return true } , x::__noSuchMethod__: 1e+81 })) { } else yield *::*; }");
tryItOut("/*for..in*/for\r(let [prop, prop] = ({ __count__: [, , , , ], prop: ({ __iterator__: __iterator__ = this;, prototype: __iterator__ }) }) = [z1].yoyo(window) in (true).watch) yield false;");
tryItOut("with({constructor: __proto__ = ((*)()(window :: <><x><y/></x></>))}){yield  /x/g  < 1.2e3;/*for..in*//* nogeckoex bug 349964 */ for  each(var (( /x/  .@ <x/>))([1,,]) in ([1,2,3,4].map).call([,], <x><y/></x>, <><x><y/></x></>)) {yield 1e+81;//h\nlet constructor; } }");
tryItOut("/*infloop*/M:for(<y><z/></y>.hasOwnProperty(\"prototype\"); ++(<><x><y/></x></> &= undefined); return ({a2:z2})) {; }");
tryItOut("/*for..in*/for(function::__parent__ = ((p={}, (p.z = 4.)())) in null) gc()");
tryItOut("let(constructor, __count__ = *::* in  \"\" ) { return;");
tryItOut("throw StopIteration;");
tryItOut("yield <x/>;");
tryItOut("if((p={}, (p.z = (true).watch)())) /*for..in*/for(var constructor = ((prop = __noSuchMethod__).eval([1].prop)) in false) {gc; }");
tryItOut("switch(window) { default: let __proto__ = <y><z/></y>, __proto__;break; /*for..in*/L:for(let [__parent__, ({ __proto__: ({ __iterator__: ({ __parent__: prop }) }), function::__count__: ({ prop: ({ __count__: __count__, __proto__: constructor }) }) })] = (yield *::*) in prototype = true) {}break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let constructor = this.__defineSetter__(\"prototype\", function  __iterator__ (__proto__)<><x><y/></x></>)(this).unwatch(\"__noSuchMethod__\") in (<{constructor}><ccc:ddd><ccc:ddd><ccc:ddd><x><y/></x>yyy</ccc:ddd><\f/ccc:ddd></ccc:ddd></{constructor}>.([({ constructor: __count__ }), , , , ] = ({ __parent__: ({ prototype: __parent__, __count__: __parent__ }) }))) === ((delete eval(\"this;\", <><x><y/></x></>)), undefined--)) {let prototype = this;return window; }");
tryItOut("let(constructor) { throw StopIteration;");
tryItOut("L: const constructor;");
tryItOut("{function(y) { yield y; throw <x/>;; yield y; }; }");
tryItOut("M:if(*) yield;");
tryItOut("try { throw __proto__; } finally { with({}) { prop = yield; }  } ");
tryItOut("/*infloop*/M:for(var constructor; 0.1; <x/> +  /x/g ) return;");
tryItOut("L:if(let (constructor = <><x><y/></x></>, __iterator__) @foo.__parent__ = new (Function)()) export *; else  if (__proto__) const __noSuchMethod__ = [[]];");
tryItOut("\ncontinue ;");
tryItOut("{gc() }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in  /x/ ) /*infloop*/M:for(var prop = *::*; <y><z/></y>;  /x/ ) {return;__count__ }");
tryItOut("if(<x><\ty/></x>) {const __noSuchMethod__, prototype = <><x><y/></x></>; }");
tryItOut("/*infloop*/do {export *;throw undefined; } while(\t[((uneval([prototype, ] = prototype)))].map(/a/gi));\n{return;(*); }\n");
tryItOut("if(([__iterator__, __count__](((function ([y]) { })().prototype /= ( /* Comment */<><x><y/></x></>)), undefined))) { if (undefined) ; else {(<><x><y/></x></>).watchM:do return; while((prototype) && 0); }}");
tryItOut("do if(prototype\f) {break ;export *; } while(((__parent__%=__parent__.throw((gc).call(undefined, )))) && 0)\n{}");
tryItOut("with({__iterator__: (true)(*) = 0x99}){switch(prop) { default: export *;return  \"\" ; } }");
tryItOut("/*for..in*/for(const (new *::*(#1=[#1#], @foo))['__parent__'] in ((({}).hasOwnProperty)()))/*infloop*/do {yield <x><y/></x>; } while( '' );");
tryItOut("/*for..in*/for([__count__, constructor] = <y><z/></y> - function(id) { return id } in *) ");
tryItOut("M:if(({function::constructor: arguments})) { if (__iterator__) ;} else {var __iterator__ = [1], __iterator__; }");
tryItOut("L:if(prototype) { if (<x/>) {L: {{}yield; } }} else /*\n*/{gc() }");
tryItOut("if([true] , (prototype = <x><y/></x>).throw(constructor = (window.yoyo(<y><z/></y>)) != (__iterator__.((this)[*::*])))) {/*infloop*/do  while(([<><x><y/></x></>].hasOwnProperty(\"__parent__\")));(*); } else  if (<x><y/></x> = <y><z/></y>) {(this.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__)); }");
tryItOut("if(arguments) if(__iterator__) {\fexport prototype; } else  if (*) {return;continue ; } else ");
tryItOut("while((*) && 0)yield;");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each\f(var this['constructor'] in *) {gc() }");
tryItOut("while(( \"\" .eval( \"\" )) && 0)");
tryItOut("/*for..in*/for(let constructor = 1e+81 in this) {{}yield; }");
tryItOut("continue M;");
tryItOut("return;");
tryItOut("if((#0=({__noSuchMethod__: constructor}))) { if ( '' .throw(null)) break L; else {gc()export *; }}");
tryItOut("return;");
tryItOut("export constructor;\n\n");
tryItOut("const __iterator__ = window;");
tryItOut("{");
tryItOut("L:if(1.3) {break ;; } else  if (prop >>= __noSuchMethod__.(<x><y/></x>)) (0x99);");
tryItOut("do {let(__noSuchMethod__, __iterator__) ((function(){gc()})()); } while(((<y><z/></y>.constructor) *= [15,16,17,18].map(Function, 0.1)) && 0)\n");
tryItOut("/*for..in*/for(var __count__ = ((p={}, (p.z = <x><y/></x>)())) >>= __noSuchMethod__ = false in false) throw true;");
tryItOut("with(yield  '' ){switch((constructor = <x><y/></x> for each (__proto__ in this))) { case 2: if(__iterator__ & <><x><y/></x></>) {throw <x/>;<x/>; } else {return; }default: break; case 6: {}break; case (eval).call(<y><z/></y> ^= *, ): case 9: {}break; gc()break;  } }");
tryItOut("switch(<>yield new (<x><y/></x>).watch()</>) { default: var __parent__;;\nexport *;\nbreak;  }");
tryItOut("with({}) { yield <y><z/></y>; } ");
tryItOut("M:do yield null; while((window) && 0);");
tryItOut("continue L;\nreturn __proto__;\n");
tryItOut("/*for..in*/for(const constructor in ((function (__count__) {  \"\" ; } )(<x/> > eval(\"\", [,,])))){/*for..in*/for(const __iterator__ = const __noSuchMethod__, __parent__ in [z1]) {return;const __iterator__, constructor = @foo; } }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in this) (.2); } const prop;");
tryItOut(";");
tryItOut("return this.zzz.zzz;\n/*infloop*/for(let prop; !({a1:1}); prototype.prototype) { const __parent__;let __proto__ = <x><y/></x>, prop; }\n");
tryItOut("L:if(<><x><y/></x></>) { }");
tryItOut("yyy = __count__;");
tryItOut("/*infloop*/do  while\t1e81);");
tryItOut("throw <x/>;");
tryItOut("/*for..in*/M:for(prototype in (((1 for (x in [])))(@foo))){throw constructor; }");
tryItOut("throw StopIteration;");
tryItOut("{do gc() while((<x><y/></x>) && 0);gc() }");
tryItOut("let(prop) ((function(){yield <y><z/></y>(<y><z/></y>);})());");
tryItOut("/*infloop*/for(let constructor; -3/0; <x><y/></x>) {throw <x><y/></x>;gc() } const prop;");
tryItOut("\tlet (__parent__ = (__proto__ = <>\n<x><y/></x></>\n), __count__) { export *; }");
tryItOut("if(([].__defineSetter__(\"constructor\", eval))) {yield; } else  if ((++window)) export let __iterator__ =  \"\" ;;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in (uneval(-1))) if(new (__parent__)(0.1)) const prop = ({a2:z2}); else  if (constructor = window) yield window;");
tryItOut("({}).__lookupGetter__ const __noSuchMethod__;");
tryItOut("/*infloop*/for(var [let, prop, ] = (new (<x><y/></x>)(\t)); (true.prop); eval(\"undefined\", [1])) throw <><x><y/></x></>;");
tryItOut("const constructor = ({a1:1}), __parent__;\ngc()\n");
tryItOut("{} const __parent__;");
tryItOut("/*infloop*/for(var __iterator__; this.zzz.zzz; #2=((__noSuchMethod__.*) << ((({}).hasOwnProperty)(0/0)) .. <><x><y/></x></>)) /*infloop*/for(var __proto__; (Function(__iterator__, null)).prop; <> /x/ </>) {if(false) { if (undefined) <x/>} else ;gc() }");
tryItOut("{/*infloop*/for(var __parent__; <><x><y/></x></> if ({}); (this <= <y><z/></y>)) <x><y/></x> }");
tryItOut("let prototype;(<><x><y/></x></>).watch\nyield;");
tryItOut("M:if(({prop: (constructor.(__noSuchMethod__))})) { if (( /x/g .__defineGetter__(\"__iterator__\", 'haha'.split)).__defineSetter__(\"__count__\", function (prop) { return <x/> } )) var prototype = try { export *; } finally { return <y><z/></y>; } ;} else {export *;var __parent__, constructor; }");
tryItOut("/*for..in*/for(var __noSuchMethod__(arguments) in ((<x/>//h\n for (prototype in prototype))((*)[false]))){}yield <><x><y/></x></>;");
tryItOut("/*infloop*/M:do export prototype; while(5.0000000000000000000000);");
tryItOut("{export __iterator__; }");
tryItOut("/*infloop*/for(__noSuchMethod__; (-0); ({[]:  \"\" })) if(<y><z/></y>) { if ([11,12,13,14].some) {const delete, __parent__ = *::*; } else {export *; }}");
tryItOut("while((@foo) && 0)export __count__");
tryItOut("if(<><x><y/></x>yyy</>) {} else gc()");
tryItOut("throw <><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", (new Function(\"\")));do do break ; while(([[]]) && 0); while((<y><z/></y>) && 0);");
tryItOut("/*infloop*/while(this.__defineGetter__(\"prototype\", ({}).__lookupGetter__)){{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((3).__iterator__ in #3={a:#3#}-- %= (constructor = .2)) {return -0; }");
tryItOut("L:\rif((([<y><z/></y>]) ^ <x/>.unwatch(\"__count__\"))) { if ( /* Comment */ '' ) /*for..in*/for(__parent__ = (/a/gi).call(@foo, this) in __proto__) {{} }} else { }");
tryItOut("L:if(<x><y/></x> + (function ([y]) { })() instanceof (<x><y/></x>)[<><x><y/></x></>]) ");
tryItOut("/*for..in*/for(const __count__ in true) ");
tryItOut("/*infloop*/L:for(var prototype; ({__iterator__: <x><y/></x>}); this.__defineSetter__(\"__count__\", @foo)) <><x><y/></x></>; const __parent__;");
tryItOut("switch(x::prototype) { default:  }");
tryItOut("/*infloop*/M:do return; while(('fafafa'.replace(/a/g, (1 for (x in [])))));");
tryItOut("M:if(__noSuchMethod__.((-0) && (({let setter: [1,2,3,4].map })))) { if (__iterator__ =  /* Comment */[11,12,13,14].sort) {let __noSuchMethod__, prototype; } else if(throw <><x><y/></x></>;) (true).watch else  if (#1=[#1#]) __iterator__ = <x><y/></x>;}/*for..in*/for(let __noSuchMethod__ =  \"\"  in <y><z/></y>) {;export *; }");
tryItOut("(function ([y]) { }.__parent__);\nyield; const delete;\n const constructor;");
tryItOut("/*for..in*/for(var constructor in (([<y><z/></y>.__lookupGetter__(\"prop\")].filter([1,2,3,4].map))(<y><z/></y>))){var __count__ = <><x><y/></x></>, __count__ = <x/>;let function::prototype;export constructor; const constructor; }");
tryItOut("this");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in [z1].@foo) \n{if(this) new Function }");
tryItOut("if((<x><y/></x>)[false] = null) { if ((p={}, (p.z = ((yield (this < (-1)))))())) {\fif([@foo for each (__noSuchMethod__ in <x><y/></x>)]) break ; else  if ((window >>> __count__)) yield window;return <x/>; } else {undefined;//h\n }}");
tryItOut("if(<x><y/></x>.([,])) {yield; }");
tryItOut("if(3) {((-0)); } else  if (<x><y/></x>) {{}return 1e81; } const __count__;");
tryItOut("with( '' ){return [1];export constructor; }\nexport *;\f\n");
tryItOut("return;");
tryItOut("/*infloop*/for(__proto__; 'haha'.split.isPrototypeOf(prototype.__noSuchMethod__.prop); ([11,12,13,14].map.unwatch(\"__iterator__\"))) if(\t /x/  !== 5.0000000000000000000000\f) gc()");
tryItOut("/*infloop*/while(#1# for (prop in *::*) for each (__noSuchMethod__ in this) if (true))/*infloop*/for(const prototype; prop >>= <><\tx><y/></x></>; undefined) yield;");
tryItOut("return\ngc()");
tryItOut("(*::*)");
tryItOut("/*infloop*/do {(1.2e3); } while( '' .throw(__count__));");
tryItOut("if(<><x><y/></x></>) {} else  if (constructor) {export __count__;return; } else {return  /x/ ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each( /x/ ['__parent__'] in 0.1) /*for..in*/for(__parent__ in <><x><y/></x></>) {return  /x/ ; }");
tryItOut("/*for..in*/M:for(__proto__ in (3/0 for each (__noSuchMethod__ in <><x\t><y/></x></>))) {M:if(this.constructor) return; else {}/*for..in*/for([prototype, prop] = ([1,2,3,4].slice)((<><x><y/></x></> for (__proto__ in <x><y/></x>)), (__proto__ = __noSuchMethod__)) in  /x/ ) const function::prop = <><x><y/></x></>, __count__; }");
tryItOut("L: {M:if(__proto__) {{} } else  if (<y><z/></y>) (<y><z/></y>); }");
tryItOut("while((__iterator__.__parent__ setter= function(q) { return q; }) && 0){var __proto__ = prop;( \"\" ); }");
tryItOut("with({__iterator__: typeof ((yield window))})gc()");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] = __parent__.__count__ setter= /a/gi.__iterator__-=prototype , <x><y/></x> in ({constructor:  ''  }) ? __iterator__ =  \"\"  : __iterator__ = prop) {return;yield undefined; }");
tryItOut("gc()");
tryItOut("while((@foo.__defineGetter__(\"constructor\", function(q) { return q; })) && 0){[1,2,3,4].map }");
tryItOut("try { let(prototype, __parent__) ((function(){this.zzz.zzz;})()); } catch\t(__count__ if (__proto__ = prop)) { throw StopIteration; } catch(__iterator__) { with({}) prototype = __noSuchMethod__; } finally { for(let y in [5,6,7,8]) ; } ");
tryItOut("/*for..in*/for(let prototype in <x/>) yield <x/>");
tryItOut("/*infloop*/while([1,,]){export prototype;/*infloop*/for(#1=[#1#]; <y><z/></y>; ) <><x><y/></x></>; }");
tryItOut("{return <x><y/></x>;return <><x><y/></x></>; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in --*::*) {var __parent__ = *::*;const __noSuchMethod__, __proto__; }");
tryItOut("if(this.__defineSetter__(\"constructor\", (new Function(\"gc()\")))) { if (this) yield; else \n}");
tryItOut(";");
tryItOut("do set while((<x><y/></x> if ((function ([y]) { })())) && 0);");
tryItOut("with({prototype:  /x/g })export *\n");
tryItOut("continue L;");
tryItOut("M:with({prototype: let (__proto__ = <><x><y/></x></>--, __parent__) <x/>})return <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (new (this)(@foo))['__iterator__'] in #1=[<y><z/></y>]) {return .2;with(__parent__.__lookupGetter__(\"__count__\").@foo)return; }");
tryItOut("if(prop.(new (*::*)([1,,],  '' ))) {({}).hasOwnPropertycontinue ; }");
tryItOut("M:if((constructor[<x><y/></x>]) instanceof <x/>.__parent__ = (new RegExp() /= yield <x/> ? new (<x/>)() : false)) {if(-0) return <><x><y/></x></>; else {\fexport *; } } else  if ((null + <><x><y/></x></>).__defineSetter__(\"__count__\", function  prop (__noSuchMethod__) { yield  /x/  } )) {(constructor);export prop; }");
tryItOut("let(constructor = window) ((function(){constructor;})());");
tryItOut("/*infloop*/M:for(let ({ __iterator__: __parent__, __proto__: ({ prop: prototype }) }) = (return <x><y/></x>)\n; null; (uneval((false.yoyo(null))))) {}");
tryItOut("M:if(__count__-=(prototype) = this.__defineGetter__(\"prototype\", function  constructor (prototype) { yield * } )) {let __parent__ = <x><y/></x>;  } else {yield; }");
tryItOut("if(new /a/gi()) throw <x><y/></x>; else  if (constructor) const __parent__; else __iterator__");
tryItOut("let __iterator__, prop\n");
tryItOut("/*for..in*/for(__count__ in ((({}).__lookupGetter__)(*::*.unwatch(\"__count__\"))))L:if(undefined || 0/0) {yield [[]]; }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if(((function (__proto__, constructor) { return new *::*() } ).call(delete false, __iterator__.(0.1 <= <x/>)))) { if ((p={}, (p.z = null)())) {function(q) { return q; }__parent__: *::* }} else {yield arguments; }");
tryItOut("__iterator__ = prototype; const prop;");
tryItOut("M:if(eval(\"return;\", __count__.constructor)) { if (({a2:z2})) {__proto__(with({prop):  }} else {/*infloop*/do <x><y/></x>; while([1]); }");
tryItOut("if(+window) \n");
tryItOut("/*infloop*/while(*::*\n)while(([,,]) && 0)const __parent__ = true, __iterator__ = <><x><y/></x></>;");
tryItOut("if( /x/g ) {} else  if ( '' ) {throw <x><y/></x>; }");
tryItOut("/*for..in*/for(prop = [[__proto__, , __noSuchMethod__], , ({ __proto__: __proto__ }), ({ __count__: constructor }), ].__noSuchMethod__ = false.__lookupSetter__(\"__parent__\") in Function(<x><y/></x>)[ '' .unwatch(\"__count__: undefined\")]) {}");
tryItOut("L: {const __count__; }");
tryItOut("/*infloop*/do __parent__ = 0.1, __count__; while( \"\" .@*);");
tryItOut("{/*for..in*/for(var prototype = (eval).call(null,  /x/g , <x><y/></x>) in ((p={}, (p.z = <x><y/></x>)()))) {gc() }0.1\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <y><z/></y>) {break ;return; } }");
tryItOut("let(({ prop: __proto__ }) = (yield <x><y/></x>)) { for(let y in [5,6,7,8]) ;");
tryItOut("gc()");
tryItOut("/*for..in*/for(__count__ in this.__lookupGetter__(\"function::prop\")) ; const prototype;");
tryItOut("try { yield *::*; } catch(new Error(window, #1#) if (<x/> .@*:: #1=[#1#])) { yield  /x/ ; } ");
tryItOut("");
tryItOut("if((({}).hasOwnProperty)((((*::*).__defineSetter__(prototype)).__lookupSetter__(\"__proto__\")), ({__proto__: [z1,,] %= <x><y/></x>, __count__ setter: ({}).__lookupGetter__ }))) {gc() } else  if (({ __proto__: prototype }).__proto__ = new (gc)(let (__noSuchMethod__, constructor) ({ set __count__ __noSuchMethod__ (constructor) /* Comment */[,] }))) return");
tryItOut("{<><x><y/></x></>; }");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in true) \n/*for..in*//* nogeckoex bug 349964 */ for  each(delete in <y><z/></y>) {}\n } while((('fafafa'.replace(/a/g, function (__iterator__) { yield let (__parent__) <><x><y/></x></> } )).__defineSetter__)((window)(new <><x><y/></x></>(<><zzz>++<x/></zzz></>).__lookupSetter__(\"prop\"), (@foo.@foo))));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in window) {return;yield; }\n");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("{throw [[]];*::*; }");
tryItOut("export *\nbreak ;");
tryItOut("gc()");
tryItOut("if(prototype%=<x><y/></x>) { if ([11,12,13,14].filter) {prop = <y><z/></y>, __parent__; }} else var __noSuchMethod__ = <y><z/></y>, __iterator__;");
tryItOut("for(let y in [5,6,7,8]) let(__parent__) { throw prototype;");
tryItOut("let (prototype = *) { return; }");
tryItOut("while((<x/>) && 0)gc()");
tryItOut("/*infloop*/while(__proto__){;[1,2,3,4].map }");
tryItOut("with({prop: @foo})if(prop)  else {evalyield 0x99; }");
tryItOut("/*for..in*/L:for(var ((window < <><x><y/></x></>))( /* Comment */<x><y/></x>) in ((Function)(new (true)({}))))yield;");
tryItOut("M:if('fafafa'.replace(/a/g, (Math.pow).call)) {export __proto__; } else  if (((<><x><y/></x></> if (1e4))).isPrototypeOf(('fafafa'.replace(/a/g, function(y) { yield y; undefined;; yield y; })))) {<></*\n*/x><y/></x></>;let __noSuchMethod__, prop; }");
tryItOut("/*for..in*/for(const [__iterator__, __noSuchMethod__] = ({__iterator__: [1] , function(id) { return id }}) in (window() %= (<x/>\n))) {;var prop, __iterator__; }");
tryItOut("{return  \"\" ; }");
tryItOut("var __noSuchMethod__, __parent__;");
tryItOut("/*infloop*/L:for(({ constructor: return __proto__|=this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice)(('fafafa'.replace(/a/g, (Math.sin).call)), <y><z/></y>.__count__);, prototype: __parent__ }) = <x><y/></x>.__proto__ = @foo;  '' .*; (#1=({__parent__: 033}))) /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in  /x/ ) \t;");
tryItOut("/*infloop*/while(<x/>)let function::__parent__, __noSuchMethod__ = window; const constructor;\n/*infloop*/for(({__count__: (Function())}); (-0); (this.__defineGetter__(\"__proto__\", window))) yield *;\n");
tryItOut("{(undefined);let __proto__; }");
tryItOut("/*for..in*/for(const [__proto__, prototype] = __proto__ in  /x/g ) yield;");
tryItOut("{yield function ()__noSuchMethod__ = function(y) { yield y; throw 4.;; yield y; }(); }");
tryItOut("if(@foo) var __iterator__ = *; else  if (false) let prop, prop = window; else /*infloop*/M:for(var __count__; (*::* ? *::* : <><x><y/></x></>); \fnull.prop = [,,z1]) \tprototype, function::function::__proto__;");
tryItOut("/*for..in*/L:for(let [__iterator__, __parent__] = (#1# .. <y><z/></y>) in window) gc\n");
