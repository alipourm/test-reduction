tryItOut("/*infloop*/do yield -3/0; while(<x><y/></x>( for each (__proto__ in 1.2e3), window));");
tryItOut("with({__count__:  /x/g }){continue L;{do {{} } while((this) && 0);[1]; } }");
tryItOut("if(eval(\".@*\", )) {throw __proto__;throw  /x/ ; } else {var __proto__ = this, __count__ = <><x><y/></x></>;prop, __proto__\n; const __noSuchMethod__; }");
tryItOut("{if(this) throw (<)><x><y/></x><'/>; else {\f(({a2:z2})); }yield <x><y/></x>; }");
tryItOut("/*infloop*/for(var __parent__ = 1e-81 + this; ({ __iterator__: __count__ }) = [, ]; this(window, <y><z/></y>)) {; }\n");
tryItOut("/*for..in*/for(prototype in window) {return #1=[#1#];<><x><y/></x></>; }");
tryItOut("this.zzz.zzz;");
tryItOut("{(this); }");
tryItOut("with(<y><z/></y>)");
tryItOut("L:if((function ([y]) { })()) break M;\n1e-81;\n");
tryItOut("switch(this.__defineSetter__(\"__count__\", (<y><z/></y>))) { default: L:if((__proto__ %= window)) {yield; } else {(__proto__); }break; with((prop) = <x><y/></x>.<ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd>){__parent__ = 1e-81; }case prop.prop: {/*for..in*/M:for(__parent__ = <x><y/></x> in null) throw *::*; }case 3: /*infloop*/while(<x><y/></x>){const __proto__ = null;return <x><y/></x>; }return; }");
tryItOut("return;throw 0x99;");
tryItOut("if(true) { if (this) export *; else {yield; }}");
tryItOut("constructor setter: (1 for (x in []))");
tryItOut("/*infloop*/for(prop.__proto__; <><x><y/></x></> |=  set constructor(__proto__, prototype)__count__ .@x:: 0x99; eval(\"(__iterator__.prop =  /x/g )\", (<x><y/></x>.propertyIsEnumerable(\"constructor\")))) const ;");
tryItOut("/*for..in*/for(const constructor in (((({}).hasOwnProperty).call)([,,]))){break L; }");
tryItOut("return @foo;");
tryItOut("/*infloop*/M:for(let __iterator__; ~5.0000000000000000000000 >> ({ constructor: __noSuchMethod__ }) = null.__lookupGetter__(\"__noSuchMethod__\"); (1 for (x in []))(<x/> !== prototype)()) (<x/>);");
tryItOut("/*infloop*/while(<y><z/></y>){throw __count__; }");
tryItOut("M:if(({}).hasOwnProperty) {{}export *; } else  if ((\n<><x><y/></x></>.watch(\"__iterator__\", ([<><x><y/></x></>].some(/a/gi))) ^ (Math.sin).call(<y><z/></y>.hasOwnProperty(\"prop\"), 'fafafa'.replace(/a/g, this), prototype%=<><x><y/></x></>))) {this;let __parent__; } else { }");
tryItOut("if() { if (eval(\"return (-1);\", window)) {;yield function ([y]) { }; }} else ;");
tryItOut("/*infloop*/do {let (__iterator__ = (case 0: break;  ,  else if ), __proto__) { continue M; }L: { } } while(new ((new Function(\"(try { (3); } /*\\n*/catch(constructor if (function(){return 0x99;})()) { let __iterator__, __parent__ =  \\\"\\\" ; } catch(__count__) { yield <x/>; } finally { (0.1); } );\"))).apply((*::*.hasOwnProperty(\"prototype\")), 0));");
tryItOut("if(<x/> ? null : function(id) { return id }) { if (<><x><y/></x></>.__parent__ = constructor % 'fafafa'.replace(/a/g, __parent__)) ; else {gc() }}\n");
tryItOut("with(*[(-0)]){<x><y/></x>; }");
tryItOut("prop = __proto__;");
tryItOut("with({__iterator__:  /* Comment */__noSuchMethod__ = prop}){do {let prop = *; } while((this) && 0); }");
tryItOut("\nreturn;\n");
tryItOut("/*infloop*/for(const __count__ = __iterator__; false; 3) { }");
tryItOut("__parent__ = <x/>, __noSuchMethod__");
tryItOut("with({__noSuchMethod__: (<x/>.unwatch(\"__proto__\") !== this.zzz.zzz)}){const __count__;L: (('haha'.split).call); }");
tryItOut("export constructor");
tryItOut("/*for..in*/for(let [__noSuchMethod__, constructor] = <><x><y/></x></>++ in __parent__) {throw this; }");
tryItOut("/*for..in*/for(const [prototype, prototype] = null in  '' ) {yield @foo; }");
tryItOut("{if(new (Function)()) {export *; } else  if (eval(\"return  '' ;\", 1e81)) ; else {export *;var __parent__; } }");
tryItOut("do {yield;M:if((@foo != prototype)) { if ((<x/>['constructor'] = undefined ? false : <y><z/></y>)) var __count__;} else {const __parent__, __iterator__; } } while((let (prop) __iterator__.prototype = <x><y/></x>) && 0);");
tryItOut("/*for..in*/for(var [({ __proto__: ({ __parent__: ({ __parent__: ({ __parent__: __proto__, __count__: __count__ }) }), __proto__: ({ default: case @foo(): break; : ({ prototype: __noSuchMethod__ }), __iterator__: ({ __count__: __parent__, __proto__: function::constructor }) }) }), __iterator__: __iterator__ }), __proto__] = ((1 for (x in []))) in (__proto__.prop)) <x/>;");
tryItOut("{gc() }");
tryItOut("/*for..in*/for(let __parent__ in ) ;");
tryItOut("/*for..in*/for(var prototype in ((#1=[#1#] ? 0.1 :  /x/ )(eval(\"prop.eval( \\\"\\\" )\", -1 ? <x><y/></x> :  \"\" ))))throw @foo");
tryItOut("/*infloop*/while( /x/g  != (false .@x:: undefined.watch(\"__parent__\", (function  __noSuchMethod__ () { break ; } ).apply))){export prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in *) {with(window){return  '' ; }\fconst __noSuchMethod__ = 5.0000000000000000000000; }");
tryItOut("{}\nreturn;");
tryItOut("if( /x/g ) {{} } else  if (((yield this.__defineSetter__(\"__iterator__\", function  __proto__ (__count__, constructor) { return this } )))) {if(constructor) {const __proto__, prototype = @foo; } else  if (1e81 .@*:: <x><y/></x>) {var prop = <><x><y/></x></>, constructor; }if('fafafa'.replace(/a/g, ((1 for (x in []))).call)) { if ([1,2,3,4].slice) {yield; } else {return; }} }");
tryItOut("M:while((*::*\f()) && 0){return <><x><y/></x></>; }");
tryItOut("if(<><x><y/></x></>\t) { if ([[1]]) {export __parent__;; } else ;}");
tryItOut("switch(__iterator__.__noSuchMethod__) { case 9: case __iterator__.__lookupSetter__(\"__proto__\"): ({}); }\n");
tryItOut("/*for..in*/M:for(var <><x><y/></x></> in ((((this).__defineSetter__)\t.call)(__count__ setter: function () { return (/*\n*/ \"\"  if (arguments)) } ))){const __count__ = <y><z/></y>; }\nyield [z1];");
tryItOut("/*for..in*/L:for(const prototype in <x><y/></x>) {}");
tryItOut("try { throw StopIteration; } catch(__parent__) { (* >= (((<x><y/></x>).__defineSetter__).call).call(constructor, )).__noSuchMethod__ = __iterator__; } ");
tryItOut("return <><x><y/></x></>;");
tryItOut("/*infloop*/__noSuchMethod__");
tryItOut("\fif(( \"\"  >=  /x/ )) {throw #0=({function::__iterator__: [1]}); } else  if (<x><y/></x>.( /x/ )) /*for..in*/for(constructor = prototype = <y><z/></y> in [,,z1]) export __proto__; else {/*for..in*/M:for(let [constructor, __noSuchMethod__] = Exception(<x/>, *) in ({ prototype: prototype }) = ((*).call([,],  \"\" , <><x><y/></x></>))) {/*for..in*/for(const __parent__ in ((function(q) { return q; })(prototype))){(window);throw __proto__; } } }");
tryItOut("/*infloop*/M:for(let [] = (__iterator__.(default: break; case constructor: break; case 5:  = ({a1:1}), __proto__ =  \"\" )); [* &= <><x><y/></\rx></>].map((#1#).watch); (this.__lookupSetter__(\"__parent__\"))) ([1]);");
tryItOut("L: {if(true.eval((yield 'fafafa'.replace(/a/g, ({}).hasOwnProperty)))) { if ((this.zzz.zzz)) (<><x><y/></x></>);\nreturn;\n else {eval/*infloop*/do {break ; } while(1e+81); }} }");
tryItOut("/*for..in*/for(let prototype.constructor in new <x><y/></x>) {<x/>yield; }");
tryItOut("do export prototype; while((true.__defineGetter__(\"__proto__\", 'haha'.split)) && 0);\n/a/gi\n");
tryItOut("with(({\fconstructor getter: [1,2,3,4].map,  set prop(case 5: export *;, __iterator__)[[1]] }))/*for..in*/for(__proto__ = <xxx>{constructor}</xxx> in <y><z/></y>) {/*infloop*/do {export *;var prop, __iterator__ = ({a2:z2}); } while(true); }");
tryItOut("while((3.141592653589793) && 0)prop, __parent__;");
tryItOut("this.zzz.zzz; const __proto__;");
tryItOut("L: {if(((<><x><y/></x></>.prototype) for each (prop in <><x><y/></x></>))) if(<y><z/></y>) | else {export *;{} } }");
tryItOut("with({__noSuchMethod__: true})continue ;");
tryItOut("var prop =  /x/ ;");
tryItOut("if(({prop getter: 'haha'.split })) { if (@foo) {}} else {/*infloop*/M:for(({ constructor: ({ __proto__: __iterator__ }), prototype: ({ __iterator__: __parent__ }) }) = (new Function(\"yield this;\"))(0/0, @foo); (this.zzz.zzz); eval(\"__proto__\", <><x><y/></x></>) instanceof ((<x><y/></x>)())) gc() }");
tryItOut("let (__iterator__ = 0.1 >>>=undefined, ({ __proto__: [, [prototype, , , [__iterator__]]], __iterator__: constructor }) = (new Function)()) { if(@foo) var __proto__ = [[1]]; }");
tryItOut("if(let (\f__count__ = true, __noSuchMethod__ = <x><y/></x>) <x><y/></x>) {yield; } else (({}).__lookupGetter__).call");
tryItOut("/*infloop*/M:for(var __count__; ((yield).eval(this.__defineGetter__(\"__count__\", \tfunction(q) { return q; }))) for each (prototype in [15,16,17,18].some(<><x><y/></x></>, ())) for (default: while(( \"\" ) && 0)yield <x><y/></x>;break; function  x::__proto__ (prototype) { yield prototype }  in ( '' .__lookupSetter__(\"__parent__\"))) for each (__noSuchMethod__ in (1 for (x in []))(033, null)) for (prototype in 1.3) for each (__parent__ in <x><y/></x>); <><bbb xmlns:ccc=\"((uneval( /x/ ))).__defineGetter__(\"__iterator__\", function  prop (__count__) { yield <x/> } ).__lookupSetter__(\"constructor\")\"><ccc:eee></ccc:eee></bbb></>) if(<y><z/></y>) __proto__; else (undefined);");
tryItOut("M:if(<x><y/></x> <=  '' ) { if ((__parent__ for each (__noSuchMethod__ in  /x/ ))) {var prop, __parent__;1.3; } else ;}");
tryItOut("/*infloop*/M:for(var __noSuchMethod__ = -3/0; ({a1:1}); @foo;) continue M;");
tryItOut("with({__count__: *::*}){(false); }");
tryItOut("if(RangeError())  else {}try { (<y><z/></y>); } catch(__noSuchMethod__) { yield  /x/g ; } finally { let __count__, __parent__ = prototype; } ");
tryItOut("M:if(prop.constructor setter= eval.*) {{}/*for..in*/for(var prop in __iterator__) {gc()return __proto__; } } else  if (__proto__ = ({})[prototype]) {var __noSuchMethod__ = this; } else gc");
tryItOut("/*for..in*/L:for(const __iterator__ = <> </>.(*) in <x/>) {if((uneval( '' ))) {<x/>; } }");
tryItOut("if((null.eval(0) !== 'fafafa'.replace(/a/g, 1e4))) {yield; } else  if ([,,].propertyIsEnumerable(\"constructor\")) yield (-1); else /*infloop*/for(<y><z/></y>; <x><y/></x>; <x><y/></x>) @foo");
tryItOut("yield; const __proto__;");
tryItOut("/*infloop*/for(var __count__; constructor.(prop).isPrototypeOf\f([<x><y/></x> if (window)]); -true.hasOwnProperty(\"__count__\")) { /x/g ;; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let [15,16,17,18].some((*::*).watch, <x><y/></x>)['__proto__'] in  /x/ ) ");
tryItOut("/*infloop*/for([11,12,13,14].sort ? <><{__noSuchMethod__}>yyy</{__noSuchMethod__}></> : #0=@foo; this.__defineGetter__(\"__count__\", 'haha'.split).__lookupSetter__(\"__iterator__\")\f !== [<><x><y/></x></> ? <><x><y/></x></> : @foo].sort(function  __iterator__ (__count__) { yield <><x><y/></x></> } ); (window ^ ({__count__: 1e81 }))) {/*infloop*/L:while(this){function (__proto__)nullyield; }let __iterator__ = *::*; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (({prop setter: new Function, __iterator__ getter:  /x/  <<= [z1,,] })) in [15,16,17,18].some(function  __iterator__ (__proto__, __parent__) { return prop+=.2 } ,  '' )) {(0)\nlet (__iterator__, __proto__) { function  __noSuchMethod__ (prototype) { yield window }  } }");
tryItOut("L:if( '' .@*--) window");
tryItOut("/*infloop*/for(((p={}, (p.z = (let = *::*) ^= (<><x><y/></x></> ^=  /x/ ).unwatch(\"__noSuchMethod__\"))())); __count__.__proto__ = undefined; (<x/>)(*::*)[({__noSuchMethod__: undefined})]) with({__proto__: <x/>}){continue L; }");
tryItOut("/*for..in*/L:for(var __parent__ = ({__count__:  ''  <= <><x><y/></x></>}) in *::*) L:switch(__noSuchMethod__ = (yield = *)) { case [11,12,13,14].map: yield;case (__noSuchMethod__.__noSuchMethod__ setter= (new Function(\"\"))):  }");
tryItOut("L:if(({constructor: ((window)[<><x><y/></x></>].__lookupSetter__(\"__noSuchMethod__\")), __parent__: 3.141592653589793 })) yield; else {*::* < <><x><y/></x></>with({__noSuchMethod__: (eval(\"<x><y/></x>;\", __count__).throw(__parent__))})(window); }");
tryItOut("/*infloop*/for((yield <x><y/></x> , __count__ = @foo ^ [,].__count__); [__parent__%=<y><z/></y>.prop].some(({}).__lookupGetter__); (p={}, (p.z = <x><y/></x>)())) with({}) { gc() } ");
tryItOut("yield @foo");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ++ /x/g  in <y><z/></y>) throw @foo;");
tryItOut("new Function const prototype;");
tryItOut("/*for..in*/for(/*\n*/[__proto__, __proto__] = (new <><x><y/></x></>(false,  /x/ )) in  /x/g ) {continue M;{} }");
tryItOut("{var __parent__ = null; }");
tryItOut("{return <x><y/></x>; }");
tryItOut("if((null)) { if (<x><y/></x> >>= prototype) return; else {true;{} }}");
tryItOut("while(((prototype = __noSuchMethod__)) && 0){}");
tryItOut("L:if(((yield \nwindow))) { if ((<><x><y/></x></> >>>=window) .@ ((p={}, (p.z = <x><y/></x> >>> <><x><y/></x></>)()))) {; } else {return <y><z/></y>; }}");
tryItOut("M:with({__parent__: (new (<><x><y/></x></>)(<><x></*\n*/y/></x></>, <x><y/></x>))});");
tryItOut("/*infloop*/for(window.prop =  /x/g ; this.__defineGetter__(\"__proto__\", [1,2,3,4].map); __iterator__ = [<> </>].sort(({}).hasOwnProperty)) L:if(('fafafa'.replace(/a/g, (\nthis).watch))) return false;");
tryItOut("let(constructor = <bbb xmlns:ccc=\"false\"><ccc:eee></ccc:eee></bbb>) ((function(){let([, ({ prop: __proto__ }), , ({ __noSuchMethod__: __count__, \tprop: ({ __noSuchMethod__: prototype, prop: constructor }) })] = true, __iterator__ = window.valueOf(\"number\")) { constructor = __proto__;})());");
tryItOut("L: /*for..in*/M:for(let this['__noSuchMethod__'] in null) {return @foo; }");
tryItOut("/*for..in*/for(let [__iterator__, __iterator__] = #1# in <x><y/></x>) this;");
tryItOut("M:do export __noSuchMethod__; while((yield  \"\" ) && 0);");
tryItOut("__proto__ = prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in undefined) {yield __parent__; }\n");
tryItOut("yield;");
tryItOut("{*::*; } const __noSuchMethod__;");
tryItOut("with((let (__noSuchMethod__ =  '' ) <><x><y/></x></>)){let (__count__ = false, constructor) { export *; } }");
tryItOut("gc()\n");
tryItOut("let (<xxx {__parent__}={__noSuchMethod__} /> ) { gc() }");
tryItOut("if(constructor = this) { if ([]) {prototype = constructor, __noSuchMethod__;yield <x/>; }} else {\f }");
tryItOut("switch((new (function(q) { return q; }).call( \"\" , <><x><y/></x></>))) { default: let __noSuchMethod__; const prop;case constructor = 0: case 7: break; return window;break;  }");
tryItOut("__count__ = prototype;");
tryItOut("let (__noSuchMethod__) { __proto__ = #1=[#1#], __iterator__ } '' ;");
tryItOut("with({}) { let([__parent__, , __parent__] = [1].hasOwnProperty(\"__iterator__\")) { let(constructor =  /* Comment */( ''  !=  /x/g )) ((function(){this.zzz.zzz;})()); } ");
tryItOut("{/*for..in*/for(let __parent__ in (('haha'.split)(({}))))const prop = prop; }");
tryItOut("return;");
tryItOut("let __proto__ = window, constructor =  /x/ ;");
tryItOut("/*for..in*/for(prototype = <y><z/></y> in yield (<x><y/></x> >=  \"\" )) {( /x/ ); }");
tryItOut("var constructor = (-0);");
tryItOut("if(<y><z/></y>) { if (1.3) let prototype; else {new Function__parent__ = <x><y/></x>; }}");
tryItOut("/*infloop*/for(__iterator__; (([1,2,3,4].map).call(eval(\"Function\", (prototype.hasOwnProperty(\"prototype\"))), Object(<><x><y/></x></>, <x/>))); (undefined[<x/>])) {yield this; }");
tryItOut("if(prop = true) { if ((get = (<x/*\n*/><y/></x> ? .2 : <x><y/></x>))) yield [z1,,];} else export __parent__;");
tryItOut("L: const __count__, __parent__ = <x/>");
tryItOut("L:if(([15,16,17,18].sort(gc, (+(uneval(<x/>)).valueOf(\"number\"))))) L:with(__proto__.prop = <><x><y/></x></>)/*\n*/window; const prototype;");
tryItOut("yield; const constructor;");
tryItOut("/*for..in*/for(let [prop, prop] = __noSuchMethod__ in __iterator__ = 1e4) \fM:if(false) { if (function(id) { return id }) export __iterator__;} else {break ;constructor }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (function(y) { yield y; Math.pow; yield y; })(__parent__ = undefined, this).yield in ((({a2:z2}).__noSuchMethod__.prototype).unwatch(\"prop\"))) {gc()if((#1#.isPrototypeOf(<x><y/></x>))) {return  /x/ ; } else  if (1e81[*]) {export __proto__; } else : }");
tryItOut("function::__iterator__: (p={}, (p.z = __noSuchMethod__ % window)())");
tryItOut("with({__count__: <x><y/></x>}){break L;const __parent__, prop = -0; }");
tryItOut("if((5.0000000000000000000000)()) { if ( '' ) yield true;} else Math.sin");
tryItOut("/*infloop*/L:for(({ constructor: ({ __noSuchMethod__: [] }), prop: [({ __proto__: __parent__, __proto__: __iterator__ }), , , ({ __parent__: ({ constructor: ({ __parent__: __iterator__ }), __noSuchMethod__: ({ __parent__: __noSuchMethod__ }) }), prototype: ({ prop: ({ __parent__: __proto__, __proto__: __proto__ }), __proto__: ({ __noSuchMethod__: __iterator__, __proto__: __parent__ }) }) }),  /x/g ] }) = --<y><z/></y>.__defineGetter__(\"prototype\", (new Function(\"let __count__ = constructor, function::__proto__ =  '' \\nexport *;\"))); let(window.__iterator__ = (new <y><z/></y>)) { yield this .. [z1,,];; (__proto__ = <><x><y/></x></>)) {throw * >>> [[1]]; }");
tryItOut("");
tryItOut("/*infloop*/for(const [__parent__, ] = __noSuchMethod__ ? (({prototype: *, __parent__: <><x><y/></x></> })) : *::* >>= <><x><y/></x></>; prototype.__parent__; __parent__.__noSuchMethod__ = <x/>) {(*);; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ =  /x/  in arguments) \nbreak ;\n");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = __count__ in yield 3;) {return <><x><y/></x></>;{} }");
tryItOut("{__parent__ = __proto__; }");
tryItOut("while((new true(arguments, <x><y/></x>)) && 0){this; }");
tryItOut("return;");
tryItOut("with(#2=\t[~true.constructor])");
tryItOut("if((({ prototype: __proto__ }) = constructor: (({__iterator__: <><x><y/></x></> !== __parent__, __count__: ((uneval(undefined))) })))) { if (([1].throw(<x><y/></x>)\n)) __noSuchMethod__, __iterator__ = <x/>;} else {export __parent__;let __proto__; }");
tryItOut("let (({ __noSuchMethod__: prototype, prototype: try { yield  '' ; } finally { throw  '' ; }  }) = *::*) { /*infloop*/do {{constructor; } } while(<><xxx>{<><x><y/></x></>}</xxx></>); }");
tryItOut("/*infloop*/for(({ __count__: prop, constructor: __parent__ }) = case 8: break; break; break ;case 6: break; ; window & <x><y/></x>; (yield prototype.constructor setter= /a/gi)) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in (prop) = (\fnull.__defineGetter__(\"this\", function(q) { return q; }))) (undefined);\nvar prototype;\n");
tryItOut("L:do {let __proto__, __proto__; } while(((function  prop (prop, function::__parent__)<x><y/></x>)( /x/ )) && 0);");
tryItOut("if(<xxx {prop}={3.141592653589793.__iterator__ = <x><y/></x>} />) {gc() } else {throw <y><z/></y>;return  \"\" ; }");
tryItOut("return yield [__proto__] = __proto__ = __count__;");
tryItOut("gc()");
tryItOut("let constructor, __iterator__;");
tryItOut("if(prototype = *::*.propertyIsEnumerable(\"prototype\").__defineSetter__(\"__parent__\", function () { yield +undefined } )) {; } else {var prop = this;/*for..in*/L:for(const __count__ in 4.) yield; }");
tryItOut("/*for..in*/for(const prototype in (([[]])( /x/ )))yield;");
tryItOut("if(window) { if ([z1]) {return; } else }");
tryItOut("with({__iterator__: []}){return;const constructor; }");
tryItOut("with(__iterator__+= \"\" )/*infloop*/ /x/ /*for..in*/for(const __noSuchMethod__( \"\" ) in <x/>) {3/0;; }");
tryItOut("switch((eval(\"\", window))) { case 6: break; default:  }M:if([[]]) { if (([__parent__] = <><x><y/></x></> *= 3/0)//h\n) {gc()export *; } else }");
tryItOut("/*infloop*/M:for(var prop; eval(\"prop, __parent__ = function(id) { return id };\",  /x/g ); <><x><y/></x></>.__defineSetter__(\"prototype\", function  __iterator__ (prototype) { yield false } )) let __proto__ = -0, __count__ = <x><y/></x>");
tryItOut("M:while((window\n) && 0)");
tryItOut("for(let y in []);");
tryItOut("let getter = this;");
tryItOut("const constructor;");
tryItOut("L:if(@foo.__defineSetter__(\"__iterator__\", 'haha'.split).yoyo((1e+81.eval(case <y><z/></y>: ;break; return constructor;)))) { if () for(let y in [5,6,7,8]) this.zzz.zzz;} else { }");
tryItOut("with((__noSuchMethod__.__iterator__ = 0/0)){}");
tryItOut("let(__proto__, prop) ((function(){throw StopIteration;})()); const __proto__;");
tryItOut("throw prop;");
tryItOut("with(export prototype){/*for..in*/for(__proto__(function ([y]) { }) in  /x/  += #3={a:#3#}) const function::__iterator__ =  '' , __proto__\ngc() }");
tryItOut("{(<x><y/></x>); }");
tryItOut("try { ; } catch(__parent__) { yield  /x/ ; } ");
tryItOut("return  \"\" ; const constructor;");
tryItOut("if(new Function()) { if (()) const constructor = -0;} else {prop, constructor;if((eval(\"[]\",  \"\" ))) continue M; else  if ( '' ) {return;export prop; } }");
tryItOut("return [,,] ? prop : <x/>;");
tryItOut("{return []; } const <bbb xmlns:ccc=\"({a2:z2})\"><ccc:eee></ccc:eee></bbb> ;");
tryItOut("with({__iterator__: <><x><y/></x></>})-0;");
tryItOut("if((new (function  __noSuchMethod__ (, constructor)throw 1.2e3;)()).__parent__ = #1=({__count__: __parent__})) let (__parent__ = [1,,](prop, <y><z/></y>)) { /*infloop*/for(let prop; this; this % (-1)) {var prototype =  /x/ ;@foo; } } else  if (typeof [,,z1].hasOwnProperty(\"__iterator__\").__parent__) {} else {return <x><y/></x>; }");
tryItOut("if((eval(\"export constructor;\", <y><z/></y>)) >= prop) <{prototype}><xxx>{[, , constructor]}</xxx>function(q) { return q; }</{prototype}> else var ({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: [, , ] });");
tryItOut("let __noSuchMethod__, constructor\nexport __parent__;");
tryItOut("let (({ __parent__: __iterator__, __count__: [] }), prototype = +true ?  '' [ '' ] : ([<x><y/></x> if ( \"\" )]).__lookupGetter__(\"prototype\")) { throw <><x><y/></x></>; }");
tryItOut("for(let y in [5,6,7,8]) try { return eval(\"window.*\", window in <><x><y/></x></>); } catch(__noSuchMethod__ if (function(){;})()) { yield (prototype.(true)); } catch(__noSuchMethod__) { constructor = __parent__; } finally { try { const __iterator__ = (function ([y]) { })(); } finally { ; }  } ");
tryItOut("[1,2,3,4].map\nvar __noSuchMethod__;");
tryItOut("if(false >  /x/ ) {return <><x><y/></x></>;break ; }");
tryItOut("/*infloop*/do {L:do new Function while((<x><y/></x>) && 0); } while(Number(<x/>));");
tryItOut("export *;");
tryItOut("let (__parent__, constructor) { ([,,z1]); }");
tryItOut("{constructor, __parent__ = {}\nconst try { yield; } catch(__proto__ if <><x><y/></x></>) { throw [,,]; } catch(yield *::*;) { continue ; } , __count__ = undefined;/*infloop*/L:while(eval(\"prop\", this))let __proto__ = <x><y/></x>; }");
tryItOut("\nyield;");
tryItOut("if((delete (-1))) <><x><y/></x></>\nexport __iterator__;\n");
tryItOut("L:if(new Function()) { if (( { yield  ''  }  =  \"\" )) throw ({a2:z2}); else __noSuchMethod__, prototype;}");
tryItOut("/*infloop*/do {L:if(<x><y/></x>) {let __iterator__ = *::*;gc() } else  if (__count__) {(<><x><y/></x></>);export *; } else {; } } while((<x><y/></x>.([1,,])));");
tryItOut("/*infloop*/do continue L; while(__proto__ = [11,12,13,14].filter);");
tryItOut("{yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 1e-81 *= (({}).hasOwnProperty)(([prototype].filter(window)))) /*for..in*/L:for(let [__count__, function::function::__iterator__] = \n([11,12,13,14].sort) in window) {break L;__parent__; }");
tryItOut("if(<y><z/></y>.__lookupGetter__(\"__noSuchMethod__\")) { if (__count__((constructor.prop getter= (<><x><y/></x></>).watch)) <= new (<><x><y/></x></>)(window).valueOf(\"number\")) {break M; } else {yield; }}");
tryItOut("with({__count__:  /x/g  = prototype}){(undefined);033; }");
tryItOut("L:with((function(y) { yield y; yield true;; yield y; })){M:with( /x/g )yield;return; }");
tryItOut("M:if(([<zzz>5.0000000000000000000000</zzz>].sort(function (constructor, constructor) { __parent__; } ))) { if (((<x><y/></x> +=  /x/g ).unwatch(\"constructor\"))) {var __proto__, __proto__ = false;yield prototype; } else yield __noSuchMethod__;} const yield;");
tryItOut("/*for..in*/for(@foo['setter\f']\f in new Iterator()) constructor = __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("if(<x><y/></x>) {{}(<><x><y/></x></>).__defineSetter__ } else  if (window) continue M; else ;");
tryItOut("while((Object(window)) && 0)(<x><y/></x>).__defineSetter__");
tryItOut("return ([[1]]).__defineSetter__(1e+81);");
tryItOut("L: {gc() }\t");
tryItOut("export *;");
tryItOut("/*for..in*/M:for(let prop in ((gc)((undefined.throw([z1,,])))))return ;");
tryItOut("return gc( /x/g );");
tryItOut("/*infloop*/M:for(let ({ __parent__: prototype, constructor: __proto__ }) = <>default: </>.@foo; (uneval((1e-81.valueOf(\"number\")))); this.zzz.zzz) {#1# }");
tryItOut("/a/gi");
tryItOut("L:if((__iterator__ = __parent__ = this)) let __noSuchMethod__, __iterator__ = this; else 3.141592653589793");
