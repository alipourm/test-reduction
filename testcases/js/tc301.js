tryItOut("let(__count__) ((function(){throw (-0).yoyo(<x><y/></x>);})());");
tryItOut("__proto__ = __count__;");
tryItOut("let (prop = <x><y/></x>) { return; }\nexport *;\n");
tryItOut("with({prop: *})__count__ = *;");
tryItOut("let (constructor) { /*for..in*/M:for(const constructor in ((null)(<><x><y/></x></>)))export __proto__; }");
tryItOut("for(let y in []);");
tryItOut("yield true.__lookupSetter__(\"prop\");");
tryItOut("switch(1.3\n) { default: break;  }");
tryItOut("while(((<x/>.isPrototypeOf([z1])) gc) && 0){'haha'.split }");
tryItOut("if(*) {yield <y><z/></y>; }");
tryItOut("switch(<x><y/></x>.__count__ = ([__iterator__prop])) { case 4: break; case 2: break;  }");
tryItOut("do { { /*for..in*/for(let [[__iterator__, ], __parent__] = ; in  /x/ ) if(this) {var __parent__ =  /x/ ;yield this; } else  if (@foo) {{} } else  } do {gc() } while(( \"\" ) && 0); } while((prototype ? * : (-1)) && 0);");
tryItOut("L:with((*.*).__defineSetter__(\"__count__\",  \"\" ))throw (this.zzz.zzz);");
tryItOut("if(<y><z/></y>) {gc() }");
tryItOut("do {constructor = [z1,,]; } while((<x><y/></x>) && 0);");
tryItOut("");
tryItOut("/*for..in*/L:for(var [prop, prop] = [11,12,13,14].filter in ({__count__.prop: __proto__ = <><x><y/></x></>}).@*) let __iterator__ = yield __parent__, __proto__;");
tryItOut("return;");
tryItOut("/*infloop*/for(__count__ = this; 3; <x><y/></x>) {export *;export *; }");
tryItOut("/*infloop*/do export prop; while((1e81.*));");
tryItOut("try { constructor = __iterator__; } catch(prototype) { /*infloop*/M:do yield; while(let (__noSuchMethod__ = -1, __proto__ = __count__) <x/>); } ");
tryItOut("with(({a2:z2}))\t{M:with({constructor:  \"\" .*})switch(__parent__.__lookupGetter__(\"__count__\")) { case ([15,16,17,18].some(<x><y/></x>, [,])):  } }");
tryItOut("if((eval(\"return;\", <x><y/></x>))) { if (<x/> === #1=[#1#]) with(function ([y]) { })<><x><y/></x></>} else \t{([]); }\n");
tryItOut("/*infloop*/L:for(__count__; (( '' ) :: 3 <= <x><y/></x>); let ( '' ) 3.141592653589793.@*) export *;");
tryItOut("if((new  \"\" ((__proto__.yoyo( /x/ ))))) {return; } else  if (this == ((void *::*).__defineSetter__(__count__).__defineGetter__(\"constructor\", Function))) /*infloop*/M:do {const prop = <><x><y/></x></>; } while(([15,16,17,18].sort(function(q) { return q; }, <><x><y/></x></> @ __noSuchMethod__))); const __parent__;//h\n");
tryItOut("/*infloop*/for(let __noSuchMethod__; ((yield [15,16,17,18].sort(<x><y/></x>, 1e4))); ( /x/ .__defineGetter__(\"constructor\", ((String( { yield window.isPrototypeOf(__noSuchMethod__ = <><x><y/></x></>\n) } ))).watch))) {/*for..in*/for(let __noSuchMethod__ = true in [<x><y/></x>].sort(eval)) {return //h\n1.3;throw *::*; } }");
tryItOut("default: export *;break; case 4: break; break; (*::*);");
tryItOut("if(--(3(<y><z/></y>))) if(new RangeError()) { if ((new ({__iterator__: <x/>, __noSuchMethod__: @foo })(__iterator__.__proto__))) yield this;} else return <y><z/></y>; else  if ([[]]) {;\nexport *;\n{} } else {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in *::*)  /x/g ");
tryItOut("/*infloop*/do {return constructor; } while(<><> </></>);");
tryItOut("let __proto__;");
tryItOut("if((yield *)) __parent__: 1e81 * <><x><y/></x></> else  if (#2=[<><x><y/></x></>]) {export *; } else /*for..in*/for(var [prop, prop] = window in <><x><y/></x></>) __noSuchMethod__");
tryItOut("{if(<><x><y/></x></>.__defineSetter__(\"__iterator__\", gc)) __count__, __parent__; else  if (window.@foo) {break M;break M; } else constructor, prototype\n }");
tryItOut("if(((p={}, (p.z = (__parent__))()))) yield *::*; else function(q) { return q; }");
tryItOut("var constructor, constructor;");
tryItOut("if(__noSuchMethod__.__proto__ = ((p={}, (p.z = window.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))()))) let constructor\nexport *; else  if (export __parent__) { /x/ ;/*infloop*/while( /x/g ); } else {throw -0; }");
tryItOut("for(let y in [5,6,7,8]) yield this;");
tryItOut("/*for..in*/M:for(let constructor = (yield (uneval(undefined))) in @foo) {export \";const undefined; }");
tryItOut("let (__proto__) { with({}) { yield; }  }");
tryItOut("if(__noSuchMethod__ = function(id) { return id }) {{} }");
tryItOut("yield <x><y/></x>;");
tryItOut("(function ([y]) { })()");
tryItOut("/*infloop*/for(let __noSuchMethod__; eval(\"<x><y/></x>\", 3/0).@foo; <x/>) {__iterator__ = __count__; }");
tryItOut("/*for..in*/for(prototype.__iterator__ in [* if (window)].throw((__proto__ = __noSuchMethod__))) {<y><z/></y>;/*for..in*/for(let __count__ in ((function(q) { return q; })([,,z1]))){function  prototype (__noSuchMethod__) { yield <y><z/></y> }  } }");
tryItOut(" /x/g \n");
tryItOut("return (-1)");
tryItOut("if(__proto__) { if (<x/>.__lookupSetter__(\"constructor\")) {let constructor = null;\nbreak ;\n{__proto__ } }} else /*infloop*/M:for(var prop = #1#; arguments; <x/>) __parent__, prototype = window;");
tryItOut("let(({ __iterator__: [({ __parent__: setter }), , __count__, , ] }) = this.isPrototypeOf(<x><y/></x>).valueOf(\"number\"), ({ __count__: ({ function::__noSuchMethod__: ({ prop: ({ __proto__: prototype }), prototype: __iterator__ }), constructor: [] }), __noSuchMethod__: ({ __parent__: __noSuchMethod__ }) })) { try { //h\nreturn new __parent__(); } catch(__noSuchMethod__ if (0.1)[<><x><y/></x></>]) { const __count__ = __noSuchMethod__, __count__ = @foo; } ");
tryItOut("if(yield (this.__defineGetter__(\"__parent__\", Math.sin))) { if (__iterator__ = __parent__ += let (__proto__) <y><z/></y>) false; else try { gc() } finally { ; } }");
tryItOut("if([1] >>>=this) {; } else  if (__proto__ = [1,,]) {{} }");
tryItOut("let(__iterator__ = (null < this)) { return (get = *::*);");
tryItOut("yyy\n");
tryItOut("try { let(prop) ((function(){function(y) { yield y; Function; yield y; }})()); } catch(prototype) { throw prototype; } finally { for(let y in [5,6,7,8]) this.constructor } ");
tryItOut("if(<y><z/></y>) { if (prop) {\fthrow @foo;export __noSuchMethod__; }} else yield <x><y/></x>;");
tryItOut("prototype = __count__;");
tryItOut("with({__noSuchMethod__: ([, ({ __proto__: ({ __iterator__: prototype }), constructor: [, __proto__, ({ constructor: ({ __noSuchMethod__: prototype }) })] }), ({ __iterator__: prop, __parent__: [({ __iterator__: [] }), ({ prototype: __iterator__ }), ({ __parent__: prop, prototype: [, , ] }), __parent__] })] = (this.__defineSetter__(\"__parent__\", function (constructor) { yield <x/>; } )))}){/*infloop*/M:for((); new ((function(y) { yield y; throw <><x><y/></x></>;; yield y; }).call(@foo, ))().@*; function (__iterator__) { return; }  ^= eval(\"return window\\t;\", prototype)) {/*infloop*/for(try { /a/gi } catch(__noSuchMethod__) { let __count__; } .isPrototypeOf(({})); gc(); this.watch(\"__parent__\", /a/gi)\t) {let (<x><y/></x>);, constructor; }(<y><z/></y>); } }");
tryItOut("/*for..in*/L:for(const __parent__ = (<x><y/></x>.@foo) in __proto__+=<x/>) with({}) { function::__parent__ } ");
tryItOut("if(constructor.__parent__ = __iterator__) /*infloop*/for(let prototype; <x/>; <x/>) (prop);");
tryItOut("/*infloop*/L:for(var __count__ = (yield <x/> for (__parent__ in __parent__)); (prop % true); (new (([z1]).watch)((p={}, (p.z = ({}))()), __iterator__))) var prop, __iterator__ = constructor\n");
tryItOut("L:if( /* Comment */(prototype)[ /x/g ]) {__count__; } else {yield this;const __count__\n; }");
tryItOut("{var __parent__ = *::*, __noSuchMethod__ = <x/>; }");
tryItOut("while((window.propertyIsEnumerable(\"prototype\")) && 0){/*infloop*/M:for(__parent__ = <x><y/></x>.__lookupSetter__(\"__count__\"); __noSuchMethod__ !== constructor; <><x><y/></x></> >>= <><x><y/></x></>.__defineGetter__(\"prop\", (function (constructor) { return undefined } ).call)) {//h\n }<x><y/></x>; }");
tryItOut("with({}) /*infloop*/L:for(__proto__ = []; window; *) {}");
tryItOut("try { yield this; } catch(__count__) { throw StopIteration; } finally { for(let y in [5,6,7,8]) for(let y in []); } ");
tryItOut("with({}) try { throw prop; } catch(constructor if prototype) { for(let y in []); } finally { return (this & null); } ");
tryItOut("if(true) yield <x><y/></x>;");
tryItOut("/*for..in*/for([__noSuchMethod__, __parent__] = __parent__ = constructor.@foo in <x><y/></x> %= window) /*infloop*/for(prototype; arguments; null) throw function ([y]) { };");
tryItOut("if(*) <><x><y/></x></>; else  if (false) { } else {export \f*;*::*; }");
tryItOut("switch new function  __iterator__ (prototype) { let __count__ = <><x><y/></x></>, __parent__ = #1#; } ().__noSuchMethod__ = (yield *),  '' (undefined) { default: break; case false: break; case window: yield (-1);let __iterator__ = -0;break; case 1: export __count__;break;  }");
tryItOut("L:do export *; while((<x><y/></x>.(0/0) + __proto__ = <x/>) && 0);");
tryItOut("/*for..in*/for(let [prop, __count__] = (({a2:z2}).let __count__ =  '' , __count__ = <x/>; (\"number\")) in new __proto__) {(<x/>);var __parent__ = 3/0, prototype = <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__.__noSuchMethod__ in *) yield false;");
tryItOut("if((__parent__.__count__)) { if ([11,12,13,14].some) {export __iterator__; }} else {if(<x><y/></x>) throw <><x><y/></x></>; else  if (<><x><y/></x></>) {var __iterator__, __noSuchMethod__;return -1; } }");
tryItOut("return (new (function(q) { return q; })(undefined));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ constructor: __iterator__ }) in this ? <x><y/></x> : [1,,]) {break ; }");
tryItOut("if(<><bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb></>.__defineSetter__(\"prototype\", gc)) {let prop, __iterator__ = <x><y/></x>; } else  if ((function(id) { return id })(<x><y/></x>, <x><y/></x>)) yield [__noSuchMethod__]; else {; }");
tryItOut("if((__noSuchMethod__ = [[]].__defineGetter__(\"__noSuchMethod__\", prototype))) let __iterator__ =  '' ; else  if (0x99) eval else {gc() }");
tryItOut("__parent__ = <x/>, __proto__; const __noSuchMethod__;");
tryItOut(";const ({}) = @foo, __noSuchMethod__;");
tryItOut("/*for..in*/M:for(let * in (('haha'.split)( '' /*\n*/.constructor = (033.__count__))))with({}) { export *; } ");
tryItOut("L:with(prototype(prop) = this.__defineSetter__(\"__parent__\", new Function))/*for..in*/for(let [__noSuchMethod__, constructor] = this.__defineGetter__(\"prototype.prototype\", gc) in undefined) {prototype;/*infloop*/L:for(__proto__; ({}); <>function ( for (* in <x><y/></x>)) { return false } </>) return; }");
tryItOut("while(( \"\" .__count__) && 0)export *;");
tryItOut("/*infloop*/L:do {yield; } while('fafafa'.replace(/a/g, ((new Function(\"(null).__defineSetter__\"))).apply).constructor);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype.__parent__ in <y><z/></y>) {((-1)); }");
tryItOut("L: var __proto__, __parent__ = (-1);");
tryItOut("/*infloop*/L:do yield 1.3; while(new (null)(<x><y/></x>));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in this.__defineGetter__(\"__noSuchMethod__\", 1.2e3)) /*infloop*/for(let __proto__; <x><y/></x>; <x><y/></x>) ;");
tryItOut("/*infloop*/for(<x><y/></x>; window; <x><y/></x>) yield undefined;/*for..in*/for(let [__noSuchMethod__, __parent__] = ([(__noSuchMethod__ @ prototype) if (this)]) in *::*) {yield 0x99; }");
tryItOut("/*infloop*/for(__count__; <><x><y/></x></>; (-0)) yield 5.0000000000000000000000\n");
tryItOut("with({prototype: ( get prototype() { return let constructor; } /* =  \"\" ).__proto__ = null.watch(\"prototype\", 'haha'.split) ? new String()[*] : ((__proto__).call(<y><z/></y>,  /x/ , __noSuchMethod__))})/*infloop*/for(let [, __parent__, __parent__, ] = this.zzz.zzz; (<x/>.propertyIsEnumerable(\"prototype\").__defineGetter__(\"__count__\", (window).__defineSetter__)); <><ccc:ddd></ccc:ddd></>) return <x><y/></x>;");
tryItOut("/*for..in*/for(__proto__ in <y><z/></y>) {export *; }");
tryItOut("let(prototype = (__count__ = <x><y/></x>.throw(3.__defineSetter__(\"__parent__\",  /x/ ))), constructor = eval(\"__count__\", <y><z/></y>)) { return <><x><y/></x></>.watch(\"__noSuchMethod__\", function  __noSuchMethod__ (__count__) { yield window } );");
tryItOut("L:with()let (prop) { if(<><x><y/></x></>) { if (window) {yield __parent__; } else {this; }} }");
tryItOut("with(<y><z/></y>){yield ({a2:z2});export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in  /* Comment */(~constructor)) { /x/ do {return window;export __parent__; } while((#3={a:#3#}) && 0); }");
tryItOut("while(((__parent__ = *::*)) && 0){return true; }");
tryItOut("L:with(prototype = (-3/0)([1], false)){/*for..in*/for(__noSuchMethod__ in ({a1:1})) {;function(q) { return q; } } }");
tryItOut("/*for..in*/for([constructor, ({ __count__: ({ prop: __iterator__ }) }), ({ __proto__: __iterator__, prototype: ({ __proto__: constructor, __count__: __noSuchMethod__ }) })] in (__iterator__.__parent__ = __iterator__) <<= constructor.prop getter= function(y) { yield y; gc(); yield y; }) {/*infloop*/for(const __iterator__; <x/>; (function(id) { return id }.propertyIsEnumerable(\"__parent__\"))) var prop\n/*for..in*/for(const ({ __noSuchMethod__: x::function::prototype, prop: __proto__ }) in ((/a/gi)(<x/>)))export prototype; }");
tryItOut("{}\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <><x><y/></x></>) {gc(){} }");
tryItOut("{var __parent__ = <x><y/></x>; }\n");
tryItOut("if('fafafa'.replace(/a/g, /a/gi).__proto__ = (constructor.prop /*= new Function)) {case 7: break; break; break; gc()break; export constructor;break; default: break; __noSuchMethod__; } else  if (gc(<y><z/></y>, __proto__ = (<><x><y/></x></> .@x:: \f*))) ");
tryItOut("continue L;export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  /x/ ) {return *; }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ constructor: ({ __parent__: ({ __iterator__: prototype, __iterator__: ({ function::constructor: [, , , prop, __iterator__], __proto__: ({ constructor: constructor }) }) }), __proto__: __parent__ }) }), __count__: ({ prop: [({ prototype: ({ __noSuchMethod__: ({ __noSuchMethod__: __noSuchMethod__ }), __noSuchMethod__: ({ __iterator__: __noSuchMethod__, prototype: __proto__ }) }) }), constructor, __noSuchMethod__, []] }) }) = typeof *::*;  /* Comment */*::*; ('fafafa'.replace(/a/g, Function)/*\n*/)) /*for..in*/for(const __iterator__ in (((function(y) { yield y; yield;; yield y; }).apply)( '' )))export *;");
tryItOut("throw StopIteration;");
tryItOut("/*\n*/M:switch((!window)) { case 9:  }");
tryItOut("L:with({__iterator__: eval(\"throw <><x><y/></x></>;\", this)[prototype =  /x/ ]})arguments;\nlet __noSuchMethod__ = <><x><y/></x></>;\n");
tryItOut("");
tryItOut("L:if(1.2e3__lookupSetter__\"__iterator__\")) {const constructor = <x><y/></x>; } else  if (<x><y/></x>) {{}return; } else ;");
tryItOut("gc()");
tryItOut("/*infloop*/for(let __noSuchMethod__; (yield <x><y/></x>.eval(.2)); <y><z/></y>) break ;");
tryItOut("if(<zzz>(-1 >>>=<x/>)</zzz>) {var prototype = @foo, __proto__ = *::*;if(<y><z/></y>\t) gc() } else {const function::__noSuchMethod__, __noSuchMethod__;continue M; }");
tryItOut("(prop);\nbreak ;\n");
tryItOut("export __count__;");
tryItOut("/*for..in*/for(let (yield new window ( __iterator__ setter: gc [[]]) ? (new [z1]) : prototype = false)((eval(\"throw <x><y/></x>;\", <><>constructor</></>))) in ) (<x><y/></x>.throw( /x/g ));");
tryItOut("/*for..in*/for(var prototype.prop in ((window >  \"\" )(prototype = [1,,]))){var constructor, __proto__ = <x><y/></x>\n }");
tryItOut("switch((window.__defineGetter__(\"__proto__\", new Function))) { default: return 0/0;break; case 5: break; case 1: return;\n /x/g ;\nbreak; case 6: case 2: with(false)return [1];export prototype;case 1: break; case 6: throw *::*;break;  }");
tryItOut(" for (__count__ in <><x><y/></x></>) if (<x/>)\n");
tryItOut("with( /x/ --)__noSuchMethod__ = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in window) break L;");
tryItOut("for(let y in []);");
tryItOut("let (({ __parent__: ({ __iterator__: ({ prototype: [], prototype: [] }) }), constructor: ({ prototype: [__proto__, , [, constructor, ({ prop: ({ constructor: __noSuchMethod__ }) }), , ], ], prototype: ({ __proto__: ({ prop: __proto__, prototype: [({ __proto__: __parent__, __proto__: __noSuchMethod__ }), , __iterator__, __iterator__, ] }) }) }) }) = ((yield __noSuchMethod__ = this))) { /*infloop*/for(const prop =  ''  <<= this.hasOwnProperty(\"prototype\"); [<y><z/></y> == window].map([1,2,3,4].slice).hasOwnProperty(\"__noSuchMethod__\"); ([15,16,17,18].filter(eval, Number(<y><z/></y> &= this,  /x/g )))) {/*infloop*/while((*::*.isPrototypeOf(this)))yield; } }");
tryItOut("/*infloop*/L:for( /x/  ? (-0) :  /x/ \t; (yield __count__|=prop); new Date(this)) var prop = <x><y/></x>;");
tryItOut("{{}let (__proto__) { return  /x/ ; } }");
tryItOut("/*infloop*/M:while(<><x><y/></x>yyy</>)x::__count__");
tryItOut("gc()");
tryItOut("throw __count__; const __proto__;");
tryItOut("M:if(*) (<x/>); else  if (<><x><y/></x></>) (<><x><y/></x></>); else {return  '' ; }");
tryItOut("with({prop: function ([y]) { } , <y><z/></y>}){let __parent__ = *::*, __count__; }\nexport prototype;<x><y/></x>;\n");
tryItOut("/*infloop*/do do 'haha'.split while(((<><xxx {constructor}={1.2e3} /></>.*)) && 0); while(prototype = eval(\"this\", undefined)\n);");
tryItOut("if(new (Function)(<x><y/></x>, <x><y/></x>)) {let constructor;<><x><y/></x></>; } else {/*infloop*/for(<><x><y/></x></>; <x><y/></x>; undefined) throw <><x><y/></x></>; }");
tryItOut("try { throw StopIteration; } catch(__proto__ if (function(){for(let y in []);})()) { setter(\n0/0) = __noSuchMethod__; } catch(constructor) { for(let y in [5,6,7,8]) yield (__proto__.constructor = 3/0.eval(true)); } ");
tryItOut("/*for..in*/for(let prototype = (__noSuchMethod__ =  \"\" ) in \n*::*.hasOwnProperty(\"__count__\")) {}.@foo");
tryItOut("throw __proto__;");
tryItOut("{gc()(<x><y/></x>); }");
tryItOut("/*for..in*/for(var [__parent__, prop] = __count__.__proto__ in (1e-81 for each (__count__ in __noSuchMethod__))) (<><x><y/></x></>).__defineSetter__");
tryItOut("/*infloop*/M:while(this){L:switch(<x><y/></x>\n) { default:  } }");
tryItOut("try { with({}) { let(__count__ = true.isPrototypeOf(true)) { for(let y in []); }  } catch(prop) { with({}) { for(let y in [5,6,7,8]) return ({ set __proto__() '' ,  get prototype prop (prop) { yield <y><z/></y> }  }); }  } finally { /a/gi } ");
tryItOut("let(({ __count__: prototype }) = window, prop) ((function(){with({}) { prop = prop, function::prototype = <y><z/></y>; } })());");
tryItOut("/*infloop*/M:for(([,,] ^ <><x><y/></x></> * ( /x/g  ? *::* : 3.141592653589793\r)); (window -  != [11,12,13,14].filter); (constructor).call(([15,16,17,18].sort(undefined, *)), (-1 instanceof \f /x/g ))) {return window; }");
tryItOut("/*infloop*/L:for(var __iterator__; (.2)(); (p={}, (p.z = (<x/> > undefined))())) {return; }");
tryItOut("with({__iterator__: undefined.*}){{} }");
tryItOut("if(false) { if ((\n([15,16,17,18].some(function  __iterator__ (__count__, prop) { return 0.1 } , (new Function).call(<><x><y/></x></>, )))((prototype = <x><y/></x>), (eval(\"{}\", true))))) {(<><x><y/></x></>);if(+undefined) {export *;<x/>; } else let __count__ = [,]; } else {break ;/*infloop*/while(((1e4).call(<><x><y/></x></>, [,,], <><x><y/></x></>))){throw  '' ; } }}");
tryItOut("while((([15,16,17,18].some(new Function, ((p={}, (p.z = *)()))))) && 0)return window;");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; prototype;; yield y; })) {throw [1,,];return; } else yield;");
tryItOut("{L:if(this) { if (true) (#1=[#1#]); else {throw  /x/g ; }}; }");
tryItOut("{/*infloop*/while(<x><y/></x>){} }");
tryItOut("var __iterator__;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("if(1.2e3) {throw <x><y/></x>; }");
tryItOut("L:switch(({__proto__: __noSuchMethod__ })) { default: case 6: break;  }\n");
tryItOut("try { for(let y in [5,6,7,8]) gc } finally { this.zzz.zzz; } ");
tryItOut("return;");
tryItOut("/*for..in*/for(const __iterator__ in  /x/g ) {return;this; }");
tryItOut("yield; const __proto__;");
tryItOut("<><x><y/></x></>\n");
tryItOut("if([(<x><y/></x> === this)]) {-1;Math.pow } else  if (*) {} else {export __proto__; }");
tryItOut("/*for..in*/for([prop, __count__] = let (__noSuchMethod__ = ('fafafa'.replace(/a/g, function  constructor () { yield \t<y><z/></y>; } )), constructor) (3.constructor >> ({a2:z2}) ? <y><z/></y> : @foo) in (({ __parent__: __iterator__, __parent__: __parent__ }) = <x/>)) {with({}) *; }");
tryItOut("let (prototype) { /*for..in*/for(var [prop, __iterator__] =  ''  in  /x/ ) {gc(); } }");
tryItOut("\nyield;/*infloop*/for(({ __parent__: __count__.constructor }) =  for each (__noSuchMethod__ in __iterator__%=<><x><y/></x></>) for (!<x><y/></x>.__parent__ in null |  /x/g  != *) for (__iterator__ in <x><y/></x> , undefined) if (<x/>).(* ? <><x><y/></x></> : window.propertyIsEnumerable(\"constructor\")); (case  '' : const prop = window;break; default: throw undefined;\tcase <><x><y/></x></>: break; return;break; case 5: case <><x><y/></x></>: yield;-= /x/g  for each (__parent__ in __noSuchMethod__ =  '' ) if (<><x><y/></x></>)); [11,12,13,14].sort) {__parent__ = __noSuchMethod__, __proto__; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in [11,12,13,14].map.eval(this)) L:if((let (prop = <xxx>{__iterator__}</\txxx> ) Exception(true.__defineGetter__(\"__noSuchMethod__\", function  constructor () { return  /x/  } ), window))) {export __iterator__; }");
tryItOut("M:switch(constructor) { default: /*infloop*/do continue ; while(+<x/>);break; break; case (this.zzz.zzz): case 9: M:do {; } while((1e4) && 0);break; case this.__defineSetter__(\"prototype\", 1.2e3): export __iterator__;break; case 9: break;  }");
tryItOut("let (prop =  '' , __iterator__ = 1e+81) { const constructor = {}, __parent__ = __iterator__; }");
tryItOut("yield this;");
tryItOut("/*infloop*/for(<x><y/></x>.__noSuchMethod__.yoyo(<x/> , true); constructor.__proto__ = true; (((prototype.__iterator__))[(__parent__.prop setter= #3={a:#3#})])) {let (prop) { {return; } }continue M; }");
tryItOut("/*for..in*/for(let [__parent__, function::constructor] = constructor = ({ prop: ({ __parent__: __proto__ }), __count__: [, setter, __iterator__] }) in ((-0) >>>  /x/ ).isPrototypeOf(__proto__ = (({prop: 1.3 })))) {M:if((@foo if ([]))) {yield [z1,,]; }while((constructor) && 0){return <x><y/></x>;__noSuchMethod__ } }");
tryItOut("/*infloop*/M:for(const ({ __count__:  ''  }) = __proto__.__lookupSetter__(\"prop\"); ([1,2,3,4].slice).call(1e-81, <x><y/></x>, null); (__iterator__ = {try { * } catch(__proto__ if (prototype = arguments.__lookupSetter__(\"__noSuchMethod__\"))) { prototype = __count__; } catch(constructor)/*\n*/ { with({}) return; } finally { __noSuchMethod__ = __iterator__; }  })) ");
tryItOut("return prop;\nexport __count__;\n");
tryItOut("while((-1) && 0){\f({ constructor: ({ prop: ({ __parent__: prototype, __parent__: prop }) }) }) }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var  for each (constructor in <x/>) if (__parent__)\f['__count__'] in <x><y/></x> |= []) {__iterator__ = <x/> }");
tryItOut("{with({constructor: null})<><x><y/></x></>;const __count__ = *::*; }");
tryItOut("{const try { export *; } catch(__noSuchMethod__) { throw true; } finally {  } ; const constructor; }");
tryItOut("/*infloop*/while(window){const __count__, prototype;__noSuchMethod__ = *; }");
tryItOut("{M:if(#1#) (this); else  if (<><x><y/></x></>) {<x><y/></x>export *; } else var prototype, prop; } const __count__;");
tryItOut("/*infloop*/M:do {__proto__; } while(__count__);");
tryItOut("with(*::*)[1,2,3,4].map");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in true) prop\nif(new (<x><y/></x>)(0/0)) return; else {yield 1e81; }\n");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("constructor = null, __parent__ = ({a2:z2});(true);");
tryItOut("with({__noSuchMethod__: this})L:if(((p={}, (p.z = constructor)()))) {;(function::__count__); }");
tryItOut("continue L;");
tryItOut("with(@foo)L: {let constructor = @foo\n\n(<x><y/></x>); }");
tryItOut("M:with({__parent__: __proto__})export prototype;");
tryItOut("L:if(([1,2,3,4].slice)().@foo) { if ((__proto__%=(arguments--)) >>= @foo) {[z1]; }} else {const __noSuchMethod__ = #3={a:#3#}; }");
tryItOut("/*infloop*/L:for(let prototype; yield constructor ^= <x><y/></x>; eval(\"delete <x><y/></x>\", __noSuchMethod__.(<x><y/></x>))) return (p={}, (p.z = window)());");
tryItOut("return *; const ({ __parent__: ({ prop = (__proto__ = *): __iterator__ }), __noSuchMethod__: ({ __noSuchMethod__: __proto__, prototype: __parent__ }) });");
tryItOut("/*for..in*/for(const [__proto__, __noSuchMethod__] = [15,16,17,18].sort(<><x><y/></x></>, <x><y/></x>) in __noSuchMethod__) {{}yield 1e4; }");
tryItOut("/*infloop*/M:for(__noSuchMethod__; <><x><y/></x></>.__lookupGetter__(\n\"__iterator__\"); <><x><y/></x></> == false) const __parent__, __count__;");
tryItOut("if( \"\" ) {(window.(<><x><y/></x></>.watch(\"__noSuchMethod__\", function  __count__ ()undefined))).propbreak ; } else  if (__proto__ = arguments !== <xxx>{__count__}</xxx>.((prop(({}))))) {return 0/0\n/*for..in*/M:for(let function::prototype in __noSuchMethod__) yield; }");
tryItOut("if(__iterator__.__defineGetter__(\"prop\", eval).__proto__ = window) M:if((window @  '' )) { if ((<x><y/></x>.@*)) var __count__, __count__; else {/*for..in*/L:for(let [prototype, __noSuchMethod__] =  /x/  in  /x/g ) <x><y/></x>; }} else  if (( /x/ ((((1 for (x in [])))(this.zzz.zzz, @foo)))).prototype) {\n{}\n }");
tryItOut("return  /x/ ;");
tryItOut("yield\n");
tryItOut("if(true) {return; }");
tryItOut("function (get)window");
tryItOut("with({}) { with({}) with({}) throw ({ __noSuchMethod__: __parent__ }); } ");
tryItOut("if(++3.141592653589793.__proto__ = (#2=[<><x\t><y/></x></>])) {M:if([z1,,].isPrototypeOf(<><x><y/></x></>)) { if ( /* Comment */__noSuchMethod__ %= __iterator__ = undefined) throw <x><y/></x>;} else {<><x><y/></x></>;function  prototype (prop)__parent__ } } else  if (<y><z/></y>) let(__count__ = each, prototype) { break ; else (( /x/ )[<x><y/></x>]);");
tryItOut("J\nconst __count__ = *::*, prop;");
tryItOut("M:if(*::*) {throw <x><y/></x>;; }");
tryItOut("/*infloop*/do if(<><x><y/></x></>) __count__, __parent__; while(<y><z/></y> .@ 3/0 << --window);");
