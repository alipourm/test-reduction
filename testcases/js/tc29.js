tryItOut("const __count__ = <x/>\nexport __parent__;");
tryItOut("");
tryItOut("const __parent__, __noSuchMethod__ = this;");
tryItOut("break L;");
tryItOut("with((({__parent__: <y><z/></y>, constructor: <y><z/></y> }))){{}gc() }");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("/*for..in*/for(__iterator__ in (((Math.sin).call)(1.3))){}");
tryItOut("L:with({constructor: __noSuchMethod__.__proto__})M:if((this.__proto__)) L:if(false) { if (constructor) {export *; } else {-1; }}");
tryItOut("L:do case <x><y/></x>: return <y><z/></y>; while((this.__defineGetter__(\"__parent__\", ({}).__lookupGetter__)) && 0);");
tryItOut("/*infloop*/L:while((function (__proto__, prototype) { return __count__ } ).call((--window), ).unwatch(\"__iterator__\")){/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in 1.3) {;export *; } }");
tryItOut("return 1.3");
tryItOut("if(-3/0) { if (<y><z/></y>) const prop; else {gc()gc() }}true;if(( /* Comment */*::* if (undefined))) { if (new window()) {/*for..in*/for(var __count__ in ((function(q) { return q; })(#1=[#1#])))export prop; } else yield ({});}");
tryItOut("if(__count__) [1,2,3,4].map else  if ((__iterator__ = (-1)) ?  ''  : prop = 1e+81(<><x><y/\f></x></>)) {if(gc()) { if ([1,2,3,4].map) {} else { }}export prop; }");
tryItOut("with({prototype: })throw this;");
tryItOut("L:if(function::__count__ = (this.__defineSetter__(\"prototype\", function(y) { yield y; break L\n;; yield y; }))) { if (({__noSuchMethod__: <x/>, __count__: @foo })) {return function(id) { return id };/*infloop*/L:do /*infloop*/while([[]]){yield null; } while(((__parent__)[<><x><y/></x></>])); } else let (__iterator__ = ({ constructor: __noSuchMethod__, __iterator__: constructor }) = 3 === <><x><y/></x></>) { yield; }}");
tryItOut("/*infloop*/for(var prototype; typeof constructor -= continue ; __count__ = __iterator__.*) {L:if(( /x/g  != <x><y/></x>.__noSuchMethod__ = (this.__defineGetter__(\"__count__\", (-0))))) { if (this.__defineSetter__(\"prop\", ({}).__lookupGetter__)) {continue ;export __proto__; } else {gc(){} }}yield *; }");
tryItOut(";\nyield;\n");
tryItOut("if(yield.eval(window .@ false)) export __noSuchMethod__; else  if ([,] ? *::* : [,,] + __proto__ = 0/0) export *; else /*for..in*/for(const [constructor, __count__] = this.throw(__proto__) in <x><y/></x>) this;");
tryItOut("if((new constructor(prop, this))) for(let y in []); else M:if([,,]) { if (@foo) export __count__; else {return -0; }}");
tryItOut("export __noSuchMethod__");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("/*infloop*/M:for((__count__);  ''  && <><x><y/></x></>; (.__defineGetter__(\"prop\", function(y) { yield y; {}; yield y; })).__lookupGetter__(\"prototype\")) {__iterator__; }");
tryItOut("/*infloop*/do {eval } while(new String((new Date())));");
tryItOut("/*infloop*/for( /x/g (*::*); ((uneval(<x/>))).isPrototypeOf((__proto__)); constructor = ({ constructor: ({ prototype: __count__ }), __iterator__: ({ __proto__: ({ prototype: __count__, __parent__: __iterator__ }) }) })) {/*infloop*/for(var __count__ = this.propertyIsEnumerable(\"prop\"); new  /x/ ; <></>) {export constructor;;export __parent__; }/*infloop*/for(const __iterator__; <x/>; [1,,]) export *; }");
tryItOut("while((__iterator__.__count__ setter= 033 | @foo) && 0){/*for..in*/for(let [prototype, prototype] = 1.2e3 in <x/>) {var __parent__ = <x><y/></x>;export __proto__; } }");
tryItOut("while((yield  '' .function::__noSuchMethod__%=({}).__defineSetter__(\"__count__\", Function)) && 0){L: break M;L:if(<><x><\fy/></x></>) { if (<y><z/></y>) {Math.pow; } else export *;}\n }");
tryItOut("with({}) { __iterator__; } ");
tryItOut("const prop, __noSuchMethod__;");
tryItOut("with({}) { with({}) { throw StopIteration; }  } ");
tryItOut("{}\nexport *;\n");
tryItOut("if((('haha'.split).call(return __count__, ))) {} const __parent__;");
tryItOut("/*infloop*/M:do {{} } while(this);");
tryItOut("{(null); }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: [({ __iterator__: prop })], __iterator__: __proto__ }) = @foo; ({}).__lookupGetter__(undefined, <y><z/></y>); new new *::*\n((*)()) .@ (Function())(@foo).eval('fafafa'.replace(/a/g, new Function))) ;");
tryItOut("if(__proto__: (__noSuchMethod__ = __iterator__ - * || <x><y\f/></x>)) L: {while(( /x/g ) && 0)let prop = *; }");
tryItOut("return null;\ntry { yield; } catch(prop) { Math.sin } finally { continue ; } \n");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; (({}))[<><x><y/></x></>]; 1e-81++) /*for..in*/L:for(const [prop, __count__] = * in <x><y/></x>) var prop, __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("");
tryItOut("/*for..in*/for(let [__proto__, __count__] = prototype in <\f><x><y/></x></>) ");
tryItOut("if('fafafa'.replace(/a/g, Function)) {/*infloop*/for(function::prototype; null.valueOf(\"number\"); (new (gc)( get function::__noSuchMethod__(__iterator__, prototype)(*.propertyIsEnumerable(\"prototype\")))).@*) {;throw prototype; } } else  if (({__parent__: 'fafafa'.replace(/a/g, function (__noSuchMethod__, constructor) { yield 1e81; } )})) {{{}let __iterator__; } }");
tryItOut("if(( /x/g  | @foo)) continue L; else {{}return [1,,]; }");
tryItOut("switch(<><{__noSuchMethod__}><!--yy--></{__noSuchMethod__}></>) { case <x><y/></x> + [z1,,]: gc()break; break; default: break;  }");
tryItOut("let (__noSuchMethod__) { /*infloop*/while(<x/>)yield @foo; }");
tryItOut("this.zzz.zzz;");
tryItOut("let __noSuchMethod__;");
tryItOut("switch(([] for each (prototype in <y><z/></y>))) { case 4: return;break; case 7: case __parent__.(__proto__): yield <><x><y/></x></>;break;  }");
tryItOut("/*infloop*/for(<><x><y/></x></> & #1=[#1#]; (delete <><x><y/></x></>);  /x/g  == [[]]) {return  /x/g ;throw window; }\n/*for..in*/for(let [prototype, prototype] = (-3/0 = (eval)()) in *) let function::__noSuchMethod__;");
tryItOut("L: <x/>;");
tryItOut("switch(*) { case 9: break;  }");
tryItOut("M:if([.2 >= 1e81 &= ({__proto__: prop, __proto__ })].sort('haha'.split)) { if ([1,,]) return;} else /*for..in*/\nfor(let ((\x7f)[<><x><y/></x></>])('fafafa'.replace(/a/g, 1.3)) prototype in ((function  __iterator__ () { yield __noSuchMethod__ = [<y><z/></y>] } )(((@foo).watch).call(.2,  /x/ ).@*)));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(@foo['__count__'] in <x><y/></x>) <x/>;");
tryItOut("return  \"\" ;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let [, ({ prototype: ({ __count__: __parent__ }), __proto__: [] }), , , ] = ([1,2,3,4].slice).call(null, ); #1=({__proto__:  '' }); this) {export *; }");
tryItOut("do {} while((<><zzz>0x99</zzz></>) && 0);");
tryItOut("L:if((*().propertyIsEnumerable(\"constructor\"))) break L;yield; else  if (( /x/g  -= *::*).__defineGetter__(\"constructor\", gc)) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in 0.1) {gc()return <x><y/></x>; }yield; }");
tryItOut("L:switch(<><bbb xmlns:ccc=\"(<x/> < function ([y]) { })\"><ccc:eee></ccc:eee></bbb></>) { case 7: \twith(true)(@foo);break; default: break; case 4: yield (function ([y]) { })();break; case (eval)():  }");
tryItOut("/*infloop*/L:for(constructor; ([*::*] = (__proto__.__lookupSetter__(\"prototype\"))); 1e4) {__proto__.prototype;if(__parent__ = #3={a:#3#} <= __iterator__) break ; else  if (<{__iterator__}>yyy</{__iterator__}>) {window; } else yield; }");
tryItOut("yield;");
tryItOut("L:if(<y><z/></y>) yield <x/>;");
tryItOut("/*infloop*/while([this]){__iterator__;/a/gi }");
tryItOut("if(([<><x><y/></x></> if (__iterator__)])) {} else __proto__");
tryItOut("/*infloop*/do if(((p={}, (p.z = ( /* Comment */<x/>))()))) { if (({constructor getter: Math.sin, prototype: <y><z/></y> })) const constructor = <y><z/></y>, constructor;} else { } while([window].filter\t(function (__parent__) { continue L; } ) | function::__count__ = <x><y/></x> ? #1=[#1#].constructor : (__proto__ = undefined));");
tryItOut("if(null <= <y><z/></y>) <><x><y/></x></>;");
tryItOut("/*infloop*/L:while((5.0000000000000000000000.@foo))yield;");
tryItOut("M:if( \"\" .throw(this.__defineGetter__(\"prototype\", (new Function(\"throw #3={a:#3#};\"))))) return; else  if (((new Boolean(0, null) +  /x/g .__count__ = -0))[prop.__iterator__ = null]) {<zzz><x><y/></x></zzz>this; } else return;");
tryItOut("if(((new RangeError())).__proto__)  else L:with(null , 0)gc()");
tryItOut("/*for..in*/for(let __parent__ = 0.1 in new Exception(<x><y/></x>.valueOf(\"number\"))) if(<x><y/></x>) yield; else  if ((-0)) {evalexport constructor; } else yield\n");
tryItOut("/*infloop*/do export __proto__; while(prototype.__noSuchMethod__)");
tryItOut("/*infloop*/\tM:while((__proto__ = prototype = this.valueOf(\"number\"))){yield;gc() }");
tryItOut("with({prototype: --<y><z/></y>.yoyo(<><x><y/></x></>)}){gc() }");
tryItOut("let \f(__proto__) { return; }");
tryItOut("let (({ __parent__: __noSuchMethod__, __iterator__: __noSuchMethod__ })) { if( /x/  += <x><  if ([,])y/></new Function()>) {var prop, constructor;({}); } else  if (constructor|=0) {yield; } else {export __count__;continue L; } }");
tryItOut("while(((--*::*) !== this.__defineSetter__(\"__iterator__\", 'haha'.split)) && 0){yield true;return delete; }L: {return undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.prop in ({})) {let prop = 3/0;continue L;\n<x><y/></x>\n }");
tryItOut("do return; while((undefined) && 0);");
tryItOut("{export prototype; }");
tryItOut("/*for..in*/L:for(const prototype = [15,16,17,18].filter(Function, @foo\n) in __parent__.(0.1)) {return;var __count__ =  /x/ ; }");
tryItOut("return @foo ===  /x/ ; const __proto__;");
tryItOut("gc() const prototype;");
tryItOut("for(let y in [5,6,7,8]) __iterator__(__noSuchMethod__.__proto__ = <>\t<x><y/></x></>) = __count__;");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in this) {if(this) {const prototype, __count__;var __noSuchMethod__; } else  if (1e-81) return 0x99; else prototype, prototype = *; }");
tryItOut("L:do {const __parent__;; } while(([<x/>].filter((new Function(\"prototype\")))) && 0);");
tryItOut(";return;");
tryItOut("/*infloop*/M:do {__proto__ } while(<x><y/></x>);");
tryItOut("/*for..in*/for(var __proto__ = (false if (function(id) { return id })) in  '' ) L:do {((*).call).applyreturn; } while(( '' ) && 0);\nthrow StopIteration;\n");
tryItOut("if(<x><y/></x>) break L; else  if (([1,2,3,4].slice)) {(this); } else {<x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in prop.__count__ = *) {yield this; }");
tryItOut("if((this.__defineSetter__(\"constructor\", this))) gc() else const function::__count__, __proto__ = <><x><y/></x></>;");
tryItOut("let(__proto__ = (window.throw( \"\" ).eval(__noSuchMethod__ @ 0) - new (function(q) { return q; })()), __parent__ = constructor = constructor = [[1]]) ((function(){throw __noSuchMethod__;})());");
tryItOut("if(__count__ = (false.__defineGetter__(\"__count__\", [1,2,3,4].map) && -1.__lookupSetter__(\"__parent__\"))) { if (*::*.@foo) {yield; } else {with({__count__: ([prototype].sort(( '' ).__defineSetter__))})L:with(<x/>){throw @foo; }throw <><x><y/><\t/x></> .@ *; }}");
tryItOut("/*for..in*/for(\tvar __noSuchMethod__ in *::* |= window.watch(\"(function ([y]) { })()\", (1 for (x in []))) * null) {if(try { try { export __iterator__; } finally { continue ; }  } catch(__parent__) { function  __noSuchMethod__ (prop) { return <><x><y/></x></\n> }  } ) { if (return __noSuchMethod__) export __iterator__;} else ({}).hasOwnProperty }");
tryItOut("switch(prototype.(([<><x><y/></x></>]))) { default:  }");
tryItOut("L:switch(let (prop) <x><y/></x> >>= <><x><y/></x></>) { case this: case 0: L: {return; } }");
tryItOut("{}");
tryItOut("/*for..in*/for(let __count__ in constructor) true");
tryItOut("L: {return @foo;export *; }");
tryItOut("if(constructor =  { yield undefined } ) { if (__iterator__.constructor = 4.) {throw StopIteration;M:with({prototype: <x/>}){export *;; } } else {/*infloop*/while(#1=this){return;let prop =  /x/g , prop = <y><z/></y>; }/*infloop*/do export prototype; while((eval(\"gc()\", 5.0000000000000000000000).__defineGetter__(\"__parent__\", Math.pow))); }}");
tryItOut("if([0.1]) yield <x><y/></x>; else if(true) {gc() } else {gc() }");
tryItOut("if(arguments ==  /x/g ) let prop = <y><z/></y>, prototype; else  if ((p={}, (p.z = false)())) ;\t else yield;");
tryItOut("/*infloop*/for(*; null; prop) { /x/ ;yield; }");
tryItOut("{}");
tryItOut("prop = prop(prop = __iterator__.__defineGetter__(\"constructor\", ([1,,]).__defineSetter__)++);");
tryItOut("if(<bbb xmlns=\"[<x><y/></x> for (prototype in *::*)]\"><!--yy--></bbb>) { if ( /x/ ) 1e-81; else var __count__ = this, __iterator__;}");
tryItOut(";");
tryItOut("do export __count__; while(((uneval(* if (*)))) && 0);");
tryItOut("export *\n");
tryItOut("/*infloop*/do /*infloop*/M:for(prototype; [11,12,13,14].some;  /x/g ) if([z1]) { if (<><x><y/></x></>) {yield;break L; }} else return <x/>; while(( /x/g )(@foo, <x/>)[__noSuchMethod__ = __count__]);");
tryItOut("/*for..in*/for(const [function::constructor, prototype] = ({}).__lookupGetter__ in <x><y/></x>//h\n) (gc).apply");
tryItOut("L:if(<x><y/></x>) return 1e-81; else  if ([,,]) var __count__, __proto__;");
tryItOut("M:if(([, ({ __proto__: __iterator__ }), , [], __proto__] = prop)) {export prop; } else  if (new Object(<x><y/></x>, 1.3) < <><> </></>) continue M; else while(([1,,]) && 0){continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in __iterator__.prototype = (<y><z/></y>)[*] * \nMath.pow( /x/ )) let (constructor) { while((<x><y/></x>) && 0)yield window; }");
tryItOut("if([].__noSuchMethod__ ? false : #2=[ \"\" ]) { if (__noSuchMethod__.prop setter= window.throw(<x/>)) } else {return  \"\" ; }");
tryItOut("const __count__, __proto__\n");
tryItOut("/*infloop*/do {{}/*for..in*/for(var __count__ in __iterator__) {{} } } while(<x/>);");
tryItOut("/*for..in*/L:for(var *::*.__count__ in  \"\" ) ");
tryItOut("/*infloop*/L:for(prototype = * ? new [({a2:z2})].\tmap((function  prop (__parent__, constructor) { return window } ).apply)(  && *) : @foo ? prop : *; [11,12,13,14].map; prop.(__iterator__.(033))) {/*for..in*/for(let prototype.__iterator__ in this) {return  /x/ ; } }");
tryItOut("/*for..in*/M:for(var function::__count__ in try { const __noSuchMethod__; } catch(constructor if <y><z/></y>) {  } catch(__proto__ if (function(){prop, constructor;})()) { const var __count__ = [1,,], __noSuchMethod__;; } finally { return <x/>; }  = prototype *= this.__defineGetter__(\"__noSuchMethod__\", Math.pow)) {/*infloop*/L:for(constructor; this; 0) __proto__ }");
tryItOut("/*for..in*/for(const ([15,16,17,18].some(function(q) { return q; }, null)).__noSuchMethod__ in [11,12,13,14].map) yield break ;");
tryItOut("if(__count__.__proto__) {({}).__lookupGetter__ } else  if ((<><x><y/></x></>.__lookupSetter__(\"prototype\") <<= null)) const __parent__ = this; else export constructor;");
tryItOut("return;\n{<><x><y/></x></>; }\n");
tryItOut("return __parent__--;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <><x><y/></x></>) {(<y><z/></y>); }");
tryItOut("if(__iterator__.prop setter= function  __parent__ (__noSuchMethod__, constructor) { yield {} } ) { if (window\n) [__count__, __parent__, prop] else }");
tryItOut("let (prop, __iterator__ = (this.zzz.zzz)) { return <><\tx><y/></x></>; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(undefined.__defineGetter__(\"__iterator__\", Math.pow)) export *; else {let constructor, yield; }");
tryItOut("//h\n/*infloop*/do ([]); while( /* Comment */*);L:if(prototype) {export __count__; } else  if ( /x/g ) {}");
tryItOut("if(<><x><y/></x></>) { if (__parent__) yield <><x><y/></x></>;} else {{} }");
tryItOut("/*for..in*/M:for(const constructor in (((Math.pow\r).call)(eval(\"<y><z/></y>;\", <x/> , this)))){;const constructor = {}, prop = false; } const prop;");
tryItOut("while((({ get __iterator__ constructor (({ __parent__: __proto__, __iterator__: ({ __proto__: [, ({ __proto__: __count__, __proto__: 8 }), [, __count__, , , constructor], ], __parent__: (__count__) }) })) { L:with( /x/g ){yield <y><z/></y>;*::*; } }  })) && 0){return;/*for..in*/for(var getter = (constructor.hasOwnProperty(\"prop\")) in __parent__) {([1]); } }");
tryItOut("L: constructor = <\tx><y/></x>;");
tryItOut("let (prop, __iterator__) { with(<><bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb></>)if([1,,]) export __iterator__; else  }");
tryItOut("M:if((null).__defineSetter__(null, 3/0)) {while((null) && 0)var constructor;yield *::*;\n;\n }");
tryItOut("L:if((yield <x><y/></x>)) { if (__iterator__.__noSuchMethod__ = 1e4 ? this : <y><z/></y>) return; else {{}\t/*infloop*/for(var __noSuchMethod__; <x><y/></x>; __proto__) {throw undefined;export *; } }}");
tryItOut("{{let set = this; } }");
tryItOut("if(([[]] += 1e+81).eval((\n<x><y/></x>))) { if ([11,12,13,14].map) {let (prototype, __noSuchMethod__) { gc() }yield undefined; }} else ;");
tryItOut("switch((yield undefined for each (__noSuchMethod__ in @foo))) { case 4: if(([z1,,].__defineGetter__(\"__parent__\", (new Function(\"(this);\"))) != ({ constructor: prototype, __count__: __noSuchMethod__ }) = )) {let prototype = undefined; } else  if ((p={}, (p.z = !<><x><y/></x></>)())) {export *;({ constructor: __count__, prop: ({ \f__parent__: [], __count__: [__proto__, , ] }) }) } else {throw ({});__count__ = function ([y]) { }, __parent__ = __parent__; }break;  }");
tryItOut("/*infloop*/L:while([] = (<x/>)(__proto__, {let __parent__ = <><x><y/></x></>, __iterator__ = <><x><y/></x></>;return  \"\" ; })){function  __count__ () { yield  \"\"  } return; }");
tryItOut("M:if(<y><z/></y>) { if (set%=<x/> ? 3/0 : false) {let (prototype, __parent__) { ; }return; }} else {(@foo);return [[]]; }");
tryItOut("yield");
tryItOut("/*infloop*/for(var __proto__; <x/>.__lookupSetter__(\"__noSuchMethod__\");  /* Comment */<><x><y/></x></>) return;");
tryItOut("export __proto__;throw  '' ;");
tryItOut("const __count__ = *, prototype;");
tryItOut("{}");
tryItOut("L:if(eval(\"yield;\", 3/0)) gc() else {return <y><z/></y>; }");
tryItOut("/*infloop*/do {/*for..in*/for(__count__ in constructor) yield <x><y/></x>\f;if(__proto__) var __count__ = prototype; else  if (<x><y/></x>) {var __noSuchMethod__; } } while((#0=[prop = <y><z/></y>]).yoyo(<x><y/></x>.__lookupSetter__(\"prop\").throw(@foo)).throw(({ __count__: x::constructor }) =  /* Comment */constructor = [[]]));");
tryItOut("if(undefined) {throw <x/>; }");
tryItOut("{export __count__;yield <y><z/></y>; }");
tryItOut("__iterator__['__count__'] = delete;");
tryItOut("/*for..in*/for(const 'prop = false in prototype) [1,2,3,4].slice");
tryItOut("/*for..in*/for(const __parent__ = (eval(\"continue \\t;\", true) for ((__iterator__) in <x><y/></x>) for (prop in <><x><y/></x></>)) in <y><z/></y>.isPrototypeOf( /x/ )) {yield;/*infloop*/for(<><x><y/></x></>; <y><z/></y>; ({a2:z2})) {yield <x><y/></x>;; } }");
tryItOut("let function::__proto__ = *::*, __proto__\nif(1e+81) {<y><z/></y>; } else continue L;");
tryItOut("yield __count__;");
tryItOut("for(let y in []);");
tryItOut("if(('haha'.split)(__proto__)) yield new 1e4(<x/>); else /*for..in*/for(let [__count__, __iterator__] = [].unwatch(\"__parent__\") in (<y><z/></y>[<x><y/></x>])) { }");
tryItOut("/*infloop*/do {;return; } while(<x><y/></x>);");
tryItOut("const x::constructor = __noSuchMethod__, prop\n");
tryItOut(" { yield (new [,,] > __count__()) } ");
tryItOut("L:do break ; while((3/0) && 0);");
tryItOut("L:if(*) {var prop, __iterator__; } else  if (prop) {return;{} } else const prototype = prototype;const __noSuchMethod__ = *::*, __parent__;");
tryItOut("/*for..in*/for(const function::prototype = (<><x><y/></x></> ^= <x><y/></x>.unwatch(\"__iterator__\")) in __iterator__|=function () { return 1e4 } ) {{yield; } }");
tryItOut("{let(__count__) { export prop;do {__noSuchMethod__;export prototype; } while(([11,12,13,14].filter) && 0); }");
tryItOut("/*for..in*/for(var __parent__ in false) {export prop;export __iterator__; }");
tryItOut("({a1:1})let __iterator__, __count__ = <x/>; const <x><y/></x>;");
tryItOut("/*for..in*/for([__parent__, constructor] = <x/> in (null.unwatch(\"__noSuchMethod__\")) ? [15,16,17,18].filter( /x/ , <x><y/></x>) : (undefined.__defineSetter__(\"__count__\", <x><y/></x>))) yield\n");
tryItOut(" __iterator__if(  ) { if (__iterator__.prop = constructor.__parent__ = this.__lookupGetter__(\"__noSuchMethod__\")) ");
tryItOut("if(false) { if ([<y><z/></y>].filter(function  constructor (__parent__) { return * } ) for each (__proto__ in null.__proto__) if \r(-3/0)) /*for..in*/for(const (__iterator__) in false) {//h\nexport prototype;return 1e+81; } else L: <x/>}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></\fx>) ");
tryItOut("/*for..in*/for(let [__parent__, __count__] = function(id) { return id } in prop) const __proto__;");
tryItOut("\n");
tryItOut("with({}) { __count__ = __iterator__; } ");
tryItOut("if(<><x><y/></x></>\f) var constructor = [,,]; else {gc()yield <y><z/></y>; }");
tryItOut("L:switch((true.__parent__ = __proto__)) { default: export *;break;  }");
tryItOut("/*infloop*/while(window = (yield window)){yield <x><y/></x>; }");
tryItOut("M:with(<y><z/></y>\n){return window; }");
tryItOut("if([11,12,13,14].sort) { if ((delete = @foo)) const __parent__ = prototype, __parent__; else {return true; }}");
tryItOut("/*infloop*/while(<x/>)return *;");
tryItOut("/*infloop*/do {throw <x><y/></x>;{} } while(arguments);");
tryItOut("/*infloop*/do {/*infloop*/for(__count__ = 5.0000000000000000000000; __iterator__; (function ([y]) { })()) yield; } while([11,12,13,14].sort);");
tryItOut("throw  /x/g with({}) { export prop; } ");
tryItOut("if(__noSuchMethod__.(get.__parent__ setter= ((__noSuchMethod__).__defineSetter__).apply *  /x/  .@x:: false)) /*for..in*/M:for(var [prop, __proto__] = __parent__ in window) {({}).hasOwnProperty } else __count__");
tryItOut("/*infloop*/for(({ __iterator__: [[], ({ __noSuchMethod__: ({ __parent__: constructor, __proto__: prop }), prototype.constructor: ({ constructor: [], prototype: [, prototype, , ] }) }), ] }) = --(__proto__(#1#));  /* Comment */({ get __count__() { yield <bbb xmlns=\"__count__\"></bbb> } ,  get prototype(__count__) { let __noSuchMethod__; }  }); __noSuchMethod__ = prop === [#1#]) prop");
tryItOut("if([15,16,17,18].sort(Math.sin, <y><z/></y>)) {window;yyy } else  if ((this.__count__ = <><x><y/></x></>)) window;");
tryItOut("/*for..in*/for(let [prototype, __count__] = constructor = (new function(q) { return q; }()) in (eval(\" '' \", *))) { }");
tryItOut("M:with(__count__ = prototype .@ ()){export __proto__; }");
tryItOut("{__noSuchMethod__ }");
tryItOut("with(constructor = -3/0)with((@foo([,,z1])))return <><x><y/></x></>;");
tryItOut("<\f><xxx>{__proto__}</xxx></>");
tryItOut("if([[1]]) {return <x><y/></x>;gc() } else  if ( /x/g ) export __iterator__; else export prototype;");
tryItOut("<><x><y/></x></>;");
tryItOut("if(prototype = <><x><y/></x></>) { if (new -1(3, 4.) ^= (<><x><y/></x></> / null)) L: {return <x><y/></x>; }\t else let __parent__ = this, __count__;}");
tryItOut("if(*::*) {gc()continue ; } else  if ((-0)) return @foo;");
tryItOut("constructor");
tryItOut("for(let y in [5,6,7,8]) try { for(let y in [5,6,7,8]) ; } finally { let(__parent__ = #1#) { {} } ");
tryItOut("let (__proto__ = <x><y/></x>\n, prototype) { if(<x><y/></x>) {throw @foo;var __iterator__ = constructor, constructor = [,,]; } else  if (window) {break L; } }");
tryItOut("/*for..in*/L:for(var prototype = ({__iterator__: __iterator__ }) in <x/>) const __parent__;");
tryItOut("M:do {var yield;return <x><y/></x>; } while((*) && 0); const constructor;");
tryItOut("/*for..in*/for\n(let __count__ in ((new Function)(set.(function::prop).watch(\"__proto__\", Math.sin)))\f)/*infloop*/L:for(let __proto__; yield (let (__parent__, prop = <\t><x><y/></x></>) @foo); ({prop:  /x/g , function::prototype: (prototype = prop) })) /*for..in*/M:for(var prop in ((null( \"\" )));");
