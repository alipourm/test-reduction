tryItOut("/*for..in*/for(const constructor in ((function (prop) { return (@foo.eval(null)) } )((prop = ({a1:1})))))let __noSuchMethod__, __iterator__;");
tryItOut("if((__proto__ = <y><z/></y>)) {} else  if (\n<x><y/></x>) {return window; } else { }");
tryItOut("if((new (new Function)((yield <><x><y/></x></>) != (<><x><y/></x></> += <x><y/></x>)(constructor = new Error(<y><z/></y>), (prototype = <x><y/></x>)), [function::__iterator__, __parent__] = <x><y/></x>.__defineSetter__(\"prototype\", [1,2,3,4].map)))) if(0.1 <<= 5.0000000000000000000000) const __iterator__, prop; else  if (yield this) {throw false; } else {export constructor;throw ({}); } else  if ((p={}, (p.z = window.unwatch(\"__proto__\"))())) {yield (undefined[<y><z/></y>]); } else {M:with(this.__defineSetter__(\"prototype\", [1,2,3,4].slice))throw [z1];/*infloop*/while(<x/> == null)continue ; }");
tryItOut("while(( \"\" ) && 0)\n/*infloop*/M:for(const __noSuchMethod__; @foo; false) (__noSuchMethod__\n);\n");
tryItOut("([z1,,])\n__count__ }__parent__");
tryItOut("with({__noSuchMethod__: <x><y/></x>})");
tryItOut("L:if(null) {case new (<><x><y/></x></>)(undefined): break; default: break L;function::__proto__ = this, prop = try { yield window; } finally { ; } ;break; break;  } else  if (this) try { export *; } catch(__noSuchMethod__ if (function(){})()) { break L; } catch(__noSuchMethod__ if (function(){constructor = ({a2:z2});})()) { gc() } catch(__iterator__) { gc() } finally { return window; }  const __iterator__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: [, , x::__count__, ({ prototype: __parent__ })], __parent__: function::__noSuchMethod__ }) = undefined.watch(\"__noSuchMethod__\", gc); 3 >>>=<x><y/></x>.constructor = (prop); (this.zzz.zzz)) M:if(({prop:  })) false; else  if ((__iterator__.__parent__ getter= (({}).hasOwnProperty).apply)) break L; else ");
tryItOut("let (({ prop: [, __noSuchMethod__, prototype], __parent__: yield <y><z/></y>.constructor }) = (eval(\"export constructor;\", __count__)), __parent__) { L: {{} } }");
tryItOut("switch(<><xxx {__proto__}={this.__defineSetter__(\"__iterator__\", 'haha'.split)} /></>) { case 2: break; default: {}L:if(<x><y/></x>) [1,2,3,4].mapbreak; break; case undefined: case 6: if(let (prop = <><x><y/></x></>)  '' ) gc() else  if (( '' \n)) {let constructor = [1,,], prop = 0/0;const __noSuchMethod__ = <><x><y/></x></>; }break; prop = [], __iterator__ = null;break; case <zzz><><x><y/></x></></zzz>: case 7: break; ;break; case 9: break;  }");
tryItOut("/*infloop*/for(const __parent__; @foo; null) yield *::*;");
tryItOut("if((new /a/gi(<x><y/></x> ^ window))) {/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in *) {} } else  if (__iterator__.(( /x/g .throw(<x><y/></x>)))) do ; while(( /x/g  ? window : <x><y/></x>) && 0);");
tryItOut("L:if( /x/g .hasOwnProperty(\"constructor\")\t) {yield null; }");
tryItOut("M:while((<x/>) && 0)if(3) {new Function } else  if (prototype) throw undefined;");
tryItOut(" const __iterator__;");
tryItOut("/*infloop*/for(__noSuchMethod__ = void .2[*::*]; new ('haha'.split)(__count__); <></>) {do ; while(([z1,,]) && 0);throw *::*; }");
tryItOut("if((prototype =  '' )) gc()");
tryItOut("const prototype;");
tryItOut("/*for..in*/for(const __proto__ = (Object(<x><y/></x>, window)) in  '' ) {}");
tryItOut("with(3.141592653589793)return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in prototype) {return <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in  '' ) {return [];let __count__ =  /x/g , __iterator__ =  '' ; }");
tryItOut("{}");
tryItOut("/*infloop*/M:for(const __count__ = ({__proto__: undefined })++; (<x><y/></x>.yoyo((-1))).watch(\"__parent__\", ({}).hasOwnProperty); [__proto__.__noSuchMethod__ = <x/>]) L: while(( /x/ ) && 0)[1];");
tryItOut("/*infloop*/for(((#2=__iterator__).prototype); null + [,,] ? (this.__parent__) : null; window) \f{{; } }");
tryItOut("/*for..in*/for(let function::__iterator__ in  /* Comment */1e81.yoyo(function(id) { return id })) {L: {if(this) {__count__ = __count__, <x><y/></x> = <x/>;return [z1,,]; } else continue ;export __noSuchMethod__; } }");
tryItOut("if((prop = <x><y/></x>)) L: {export *; } else  if (prototype(__proto__:  \"\" ) / true.__count__) /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__(this) in true) with(true) /x/g ;");
tryItOut("if(((uneval(*)))) { if (-3/0.__defineGetter__(\"__iterator__\", function  __iterator__ (__noSuchMethod__, constructor)\f { return [[]] } )) {gc;/*for..in*/for(__noSuchMethod__ in ((function(y) { yield y; export __count__;; yield y; })(__proto__))){(@foo);yield; } } else {continue ; }}");
tryItOut("/*infloop*/L:while(<><x><y/></x></>)return;");
tryItOut("if((+__parent__.__noSuchMethod__ = (new Function)())) {__proto__; const __count__;constructor, prop; } else {let(__parent__) ((function(){;})()); }");
tryItOut("var __iterator__ = [1];");
tryItOut("return;");
tryItOut("if(<x/>) { if (window) {__proto__ = [1,,];const function::__noSuchMethod__ = <><x><y/></x></>, __parent__; } else export *;}\nwith(eval(\"<x/>\", __proto__ = ))/*for..in*/for(var __proto__ in  /x/ ) ;");
tryItOut("if(let (__noSuchMethod__ = <x/>) [,]) __proto__ else  if ((<x><y/></x> >>= (function ([y]) { })())) ( \"\" ); else yield;");
tryItOut("if(~function::__parent__.__noSuchMethod__) { if ((new ((<x><y/></x\t>.__parent__))((constructor.__proto__), undefined))) /*infloop*/while(@foo)break ; else gc()}");
tryItOut("M:if((p={}, (p.z = <x><y/></x>)())) { if (__count__ %= @foo) var __iterator__, __noSuchMethod__ = true;} else {yield; }");
tryItOut("yield;\nthrow prototype.watch(\"__proto__\", (undefined).__defineSetter__);\n\n{var prop = ({a1:1}), prototype = __count__; }");
tryItOut("");
tryItOut("{const __parent__ = <y><z/></y>, __proto__;return; }");
tryItOut("with({prototype: (this.__defineSetter__(\"prototype\", continue ))}){with({}) let(__noSuchMethod__ = __parent__ = <x><y/></x>, prop = *) ((function(){return this.__defineGetter__(\"__proto__\", function  __parent__ ()<x/>);})()); }");
tryItOut("/*for..in*/for(let constructor.__iterator__\t in ([({__proto__: {} })] || <x/> ? __count__ : <y><z/></y>.*)) if(false) { if (033 ?  ''  : 5.0000000000000000000000.@foo) gc()} else {1e4; }");
tryItOut("while((*::* ^ <y><z/></y>) && 0)var __count__ = true;");
tryItOut("return this;");
tryItOut("while((this) && 0)if(([( /x/g .isPrototypeOf(__parent__))])) { if ((~ /* Comment */<x/>)) {export prop;export *; }} else yield __count__;");
tryItOut("if(__proto__.__noSuchMethod__ setter= function(q) { return q; }\n :: ()) __noSuchMethod__.constructor");
tryItOut("export *;\nthrow [,,];\n");
tryItOut("{{undefined;const __noSuchMethod__ =  /x/g , prop = <x><y/></x>; } }");
tryItOut("/*for..in*/M:for(__iterator__ = ({ prop: __count__, __iterator__: __iterator__ }).eval((__count__ = this)) in 0.1) {return <><x><y/></x></>;gc() }");
tryItOut("yield \t<y><z/></y>\n/*infloop*/M:for(var constructor; 'fafafa'.replace(/a/g, /a/gi); (#1=({__noSuchMethod__: [[1]]}))) prop = <x><y/></x>;");
tryItOut("/*for..in*/for(let ({__iterator__: yield __iterator__ =  \"\"  ? #3={a:#3#} : constructor = __iterator__, __parent__ setter: (new Function(\"const prop;\")) }) in ((({throw [,,z1];; }).watch)(@foo % window !== ( '' ).__defineSetter__(null))))/*infloop*/L:for(let __iterator__ = @foo; this; @foo) {return 1.2e3;yield <x/>; }\nfalse;");
tryItOut("/*for..in*/for(const __noSuchMethod__([z1,,].watch(\"constructor\", new Function)) in constructor) return window;");
tryItOut("if(true) {return; } else  if (this.zzz.zzz >>= (<><x><y/></x></>.hasOwnProperty(\"__iterator__\")) ? ((-0)) : (3/0.__count__).yoyo((--*::*))) {/*for..in*/for(var prop in ((('haha'.split).apply)(*::*)))constructor = constructor: this }");
tryItOut("/*infloop*/do continue L; while(( \"\"  if (*)));");
tryItOut("/*infloop*/M:while((([1,2,3,4].map).call(({}).hasOwnProperty, <y><z/></y>)));");
tryItOut("{let (constructor = ({ prop: <y><z/></y>, __parent__: __parent__ })\f = __parent__ =  /x/ ) { var constructor } }");
tryItOut("if(*) {let (__parent__, __iterator__) { export constructor; }/*for..in*/for(var [constructor, constructor] = prop in false) { } }");
tryItOut("L:if(__iterator__.yoyo(<x><y/></x>)) { if () {} else [z1,,];}");
tryItOut("throw StopIteration;");
tryItOut("if(<><x><y/></x></>) export *; else  if ([,,]) {constructor }");
tryItOut("let (({ __proto__: __noSuchMethod__, __proto__: __count__ })) { /*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__( \"\" ) in <><x><y/></x></>) var setter = <x><y/></x>; }");
tryItOut("do if(__noSuchMethod__) {throw @foo; } else {window;({}).hasOwnProperty } while(([15,16,17,18].sort(/a/gi, 'fafafa'.replace(/a/g, function (__proto__) { throw -0; } )).__lookupGetter__(\"__proto__\")) && 0);");
tryItOut("return; const prop;");
tryItOut("L:do {constructor = __proto__; } while((<{__parent__}> </{__parent__}>.(true.__iterator__)) && 0);");
tryItOut("L:if(this.__defineSetter__(\"__count__\", ({}).__lookupGetter__)) { if \f(this) {export *; }} else {}");
tryItOut("{let x::function::prop = *::*, __count__ = window; }");
tryItOut("/*for..in*/for(const ({ __parent__: [] }) in  /x/g \n) {gc()throw this; }");
tryItOut("let(__proto__) { for(let y in [5,6,7,8]) let(__parent__) ((function(){{}})());");
tryItOut("/*for..in*/for(const __count__ in (new (<x/> >>>=*::*)(<><x><y/></x></>, __count__))) /*infloop*/while(<y><z/></y>){@foo;throw  /x/g ; }");
tryItOut("/*infloop*/for(let prototype; 1e-81.valueOf(\"number\"); @foo) {( \"\" ); }");
tryItOut("M:switch((function(q) { return q; }.throw(this.__defineGetter__(\"\", /a/gi)))) { case 1: (window);default: {export *;gc() }break; yield ({a1:1});case 9: case 8: /*infloop*/for(var __parent__ = <><x><y/></x></>;  /x/g ; prototype) yield; }");
tryItOut("/*for..in*/for(var __count__//h\n =  /x/g  in prototype) {yield; }");
tryItOut("this.zzz.zzz;");
tryItOut("(true);");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("L:while((((prototype))) && 0)M:while((new ( /x/g )()) && 0)while((prototype) && 0){export __noSuchMethod__; }");
tryItOut("");
tryItOut("return;");
tryItOut("*");
tryItOut("gc()\nif((__iterator__ % <><x><y/></x></>)) { if ()  set prop prop ()({}).hasOwnProperty();} else  function::constructor: .2{gc()return; }\n");
tryItOut("/*infloop*/for(const ({ __iterator__: ({ __proto__: __iterator__, prototype: __parent__ }) }) = new ( /x/g )((__count__), [,,z1]); 'fafafa'.replace(/a/g, <y><z/></y>); 4..yoyo(null)) {return window;(prototype); }");
tryItOut("try { for(let y in [5,6,7,8]) yield <x/>; } catch(prototype) { return  /x/ .constructor; } finally { try { this; } catch(__noSuchMethod__ if (function(){})()) {  }  } ");
tryItOut("yield\n");
tryItOut("if(__iterator__,  '' ) return; else  if (this) {gc()throw <><x><y/></x></>; } else yield this;");
tryItOut("with((yield window)){}");
tryItOut("L:do  while(() && 0);");
tryItOut("{if(<xxx>{prop}</xxx>.((__noSuchMethod__ = function(id) { return id }))) return; else  if ((__noSuchMethod__ = arguments ? eval(\"(var __iterator__ = window, constructor;);\", prototype) : (033))) {export __parent__; } else export __noSuchMethod__\n<><x><y/></x></>;(new Function(\";\")) }");
tryItOut("/*infloop*/L:for(const __noSuchMethod__ = @foo; __proto__; window) {throw <><x><y/></x></>;<x><y/></x>; }");
tryItOut("__proto__ = constructor;");
tryItOut("/*for..in*/L:for((({constructor getter: (<><x><y/></x></>).watch, __parent__: 3 }) .@*:: (__proto__)(prototype).unwatch(\"constructor\"))(void <><x><y/></x></> if (window)) in ((function(q) { return q; })(((__iterator__+=__noSuchMethod__) /= __iterator__ = (yield 0/0))))){( /x/g ); }");
tryItOut("/*infloop*/M:for(var __count__; ({ set prototype __parent__ () { return prop = <y><z/></y> & __proto__ } , constructor setter: function(q) { return q; } }); ( /x/  :: prop.__iterator__ getter= ({}).__lookupGetter__)) M:do yield <><x><y/></x></>; while(((3/0[this])) && 0);");
tryItOut("if([((<x><y/></x> != constructor).prop =  /x/g  == window) %= function(id) { return id }].some(new Function)) gc() else  if ((* !== prop)) L: false; else {/*for..in*//* nogeckoex bug 349964 */ for  each(prop.prototype in <y><z/></y>) {return __iterator__; }export *; }");
tryItOut("{}");
tryItOut("for(let y in []);");
tryItOut("M:switch(let (__noSuchMethod__ = (__count__%=window)) -3/0\t if (window)) { default: yield;\ncontinue ;\nbreak; /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in window.constructor) let __parent__ = <x/>, __parent__ = *::*;break; prototype = __count__;break;  }");
tryItOut("/*for..in*/for(__proto__ = (-0)[[11,12,13,14].map] in (<y><z/></y>.watch(\"__iterator__\", (033).__defineSetter__))) {{}\nthrow  \"\" ;\nM:with({prop: prototype.__iterator__ = null})yield; }");
tryItOut("let (__proto__, __noSuchMethod__) { /*for..in*/for(__count__ = prop(<x><y/></x>) in *) { } }");
tryItOut("if(( \"\" .eval(0)) %  '' )  else {return; }");
tryItOut("/*infloop*/do {yield; } while((__parent__.prototype setter= function(q) { return q; }));");
tryItOut("with({__parent__: ( '' .@*)})L:if(.(/hasOwnProperty(\"__parent__\"<> </><!--yy-->)) { if ((yield -1)) this; else {(*); }}");
tryItOut("__iterator__ = __proto__;");
tryItOut("/*infloop*/for(delete|=*::*; (yield function(id) { return id }); constructor = *) {yield <x/>;throw window; }");
tryItOut("with( /x/g  for each (prop in <y><z/></y>))return;");
tryItOut("do {with(new Math.sin(@foo > <><x><y/></x></>))/*for..in*/for(constructor in <><x><y/><///h\nx></>) {return;yield (-1); }with(@foo)throw this; } while((<><><x><y/></x></>.yoyo(this).@*</>) && 0);");
tryItOut("/*for..in*/for(const prototype = (-1)[true]['prototype'] in (((function () { M:with({__parent__: prop}){export __proto__; } } ).apply)((({prototype: <x/>, prop: (p={}, (p.z = *::*.unwatch(\"prototype\"))()) }))))){/*for..in*/for(let @foo in __iterator__) return <><x><y/></x></>;if((__count__ = __noSuchMethod__ = -0)) continue ; else  if ([1]) /*for..in*/M:for(let prototype in //h\nundefined) yield  /x/ ; else {L:if(<x/>) { if (<><x><y/></x></>\r) {yield; } else (<x/>);} } }");
tryItOut("while((constructor = *::*) && 0)yield this;");
tryItOut("/*for..in*/for([__iterator__, __parent__] = <y><z/></y> in ((window)--)) {(<y><z/></y>); }");
tryItOut("with({prop: __count__ , this.@foo}){return __iterator__; }");
tryItOut("export __proto__\n");
tryItOut("/*for..in*/for([__iterator__, __parent__] = void  ''  in  '' ) {var prop, __parent__; }");
tryItOut("if() { if (((<><x><y/></x></>).call(<x/>, <><x><y/></x></>, window))) {[[]]; } else {{yield  /x/ ; } }}");
tryItOut("/*infloop*/L:do {export constructor; } while(this for (__noSuchMethod__ in <y><z/></y>));");
tryItOut("/*infloop*/while(prop = *::*\f){eval\ncontinue ; }");
tryItOut("if(<x><y/></x> / null) {true; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let delete.__iterator__ in this.watch(\"__noSuchMethod__\", (constructor).watch) &= (*::* = <><x><y/></x></>)) switch(prop = #1#) { default: break;  }");
tryItOut("with({prop: (window)})yield  '' ;");
tryItOut("with({prop: __parent__ = <x><y/></x>}){with(*::*){yield __iterator__;__noSuchMethod__, constructor =  \"\" ; } }");
tryItOut("yield __iterator__\t.*;");
tryItOut("M:switch(<x><y/></x>) { case 5: -0,  /x/g break; case (let(prop = <x><y/></x>, __parent__) { (Math.sin).call): window; }");
tryItOut("{}");
tryItOut("L:if(#1#) {break M;const getter =  /x/g ; }");
tryItOut("*::*; const __parent__;");
tryItOut("{(undefined); }\n");
tryItOut("if(*) __proto__;");
tryItOut("M:with({prop: new Date()}){continue L;*::*; }");
tryItOut("L:with({__parent__: (this.zzz.zzz)}){throw null;export *; } const __parent__;");
tryItOut("({ constructor: yield.prop, prop: [({ prop: ({ prototype: ({ __proto__: ({ __count__: default: yield;case 3: break; case 9: ;break; case 8: let __count__ = *::*;case <><x><y/></x></>: throw prop;case 7: break; case 9: {}break; , prototype: __proto__ }) }) }) }), ({ function::__noSuchMethod__: [[, , __count__, , ({ __proto__: constructor })], __parent__, prototype(__noSuchMethod__)], prop: ({ prop: [, , ({ __iterator__: __noSuchMethod__, __iterator__: __count__ }), [, constructor, __parent__]], __count__: ({ __parent__: [, , , ], __parent__: ({ prototype: prop }) }) }) }), ({ __parent__: [, __parent__, ], __parent__: ({ __parent__: [({ prop: prototype }), ({ __iterator__: prop, __count__: __iterator__ }), , ] }) }), (<><x><y/></x></>)(<><x><y/></x></>)] }) = ( '' )()");
tryItOut("prototype, __proto__ = <><x><y/></x></>;");
tryItOut("let(__iterator__, __count__ = +1.3) ((function(){__noSuchMethod__ = __parent__;})());");
tryItOut("export prop;");
tryItOut("if(<><x><y/></x></>) { if (true) {(1e81);const constructor = <x/>, prototype = (-0); }} else export prototype;");
tryItOut("L: if( \"\" ) {} else  if (window) {gc()let __iterator__, __count__ = <><x><y/></x></>; }");
tryItOut("return;");
tryItOut("if((false.watch(\"__count__\", (<y><z/></y>).__defineSetter__))) { if ((Error())) {{} }} else {var constructor = constructor;export prop; }");
tryItOut("if([window].filter((function  __iterator__ () { return (-0) } ).call)) { if ( \"\" \n) let prototype = {}, __parent__; else export __parent__;}");
tryItOut("if((({__parent__: \n0/0.__defineSetter__\"__proto__\", [[]]) - (null ^ -3/0)}))) {/*infloop*/for(const ({ __noSuchMethod__: __iterator__ }) = new <x><y/></x>; __parent__ = __iterator__; [[[]] if (__iterator__)]) {return 1.2e3; } }");
tryItOut("var [, ];");
tryItOut("return;");
tryItOut("L:if(let (x::__proto__) <x/>) gc() else {const constructor = 0.1; }");
tryItOut("L: {yield <x><y/></x>;export *; }");
tryItOut("/*for..in*/for(const prototype in <y><z/></y>) export __iterator__\nreturn  '' ;");
tryItOut("with({__count__: (({prop: *::*}))})if((__proto__.__lookupSetter__(\"__parent__\"))) yield  \"\" ; else ;");
tryItOut("do export __iterator__; while((__proto__ = ((__count__.__proto__))((prop = 1e81).__defineGetter__(\"__parent__\", new Function)).isPrototypeOf(<><><ccc:ddd> </ccc:ddd></></>)) && 0);");
tryItOut(";\nreturn ;\n const __iterator__;");
tryItOut("__parent__");
tryItOut("{let constructor;return (@foo.hasOwnProperty(\"__count__\")); }");
tryItOut("if(((((({a2:z2}))(<x><y/></x>, true))[(__proto__ = __proto__)]))[this.__defineGetter__(\"function::__iterator__\", (new Function(\"continue ;\")))]) { if ((new Number(__parent__function (({ __count__: __noSuchMethod__, __proto__: prop })) { yield new <x/>(prop) } ) >>>=([,] && ))) x::__noSuchMethod__ else /*infloop*/while(false){(0/0); }}");
tryItOut("with({prop: ((__count__) =  '' )}){do {( '' ); } while(( /x/ ) && 0);\nyield <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x/> in constructor) {; }");
tryItOut("/*for..in*/for(prototype = __parent__ in ((/a/gi)(new ((({}).hasOwnProperty).call)())))prototype = function::constructor;");
tryItOut("/*infloop*/for(prop; false -=  '' ; (let (__noSuchMethod__, prototype = <x/>) (-0))) return;");
tryItOut("if((__proto__ = <x/>).__lookupGetter__(\"__iterator__\") - new Math.sin(this, true)) let __noSuchMethod__, __count__; else  if (([false if ((<x><y/></x> ? (-1) : ) += (window).__defineSetter__)])) {const prototype, __parent__; }");
tryItOut("/*infloop*/for(var [({ prop: __proto__, prop: [] }), [[, __proto__]]] = prototype; ; constructor = [,,z1] << <xxx {__iterator__}={<><x/></>} />) new Function");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("if(this.__defineSetter__(\"__proto__\", @foo).__lookupSetter__(\"prototype\")) /*infloop*/while(#3={a:#3#}){} else  if (__noSuchMethod__.(((gc).call(__count__, )))) do {continue ;yield <x><y/></x>; } while((0x99) && 0);");
tryItOut("");
tryItOut("gc()");
tryItOut("{}\nexport *;\n");
tryItOut("L:if((((-0) *= *.isPrototypeOf((__parent__.hasOwnProperty(\"__noSuchMethod__\")))).*)) //h\n{ if (({ set __proto__ __iterator__ (constructor) { yield undefined } , __proto__: window })) {if((__parent__|=(-1))) export prototype;with(<x><y/></x> - false){export prop; } }} else {export __parent__;\tthis .@  /x/ ; }");
tryItOut("/*infloop*/while((*::*--))continue M;");
tryItOut("/*for..in*/L:for(let __proto__ = 1e81 in \t[15,16,17,18].map((1 for (x in [])), (function ([y]) { } !== this))) <y><z/></y>;");
tryItOut("/*infloop*/while(([*::*].map( \"\" )) .@x:: <x><y/></x>){({}).hasOwnProperty }");
tryItOut("/*for..in*/for(let __proto__(<x><y/></x>.(__count__)) in ((window)(<x><y/></x\f>))) /*for..in*/for(const __proto__ = eval(\"/a/gi\", <x><y/></x>) in (new Function).call( /x/g , )) L:if((function ([y]) { })()) yield <><x><y/></x></>; else {}");
tryItOut("while((null) && 0)continue ;");
tryItOut("with((1.3 ^  /x/g )){/*infloop*/do {return;(*); } while(([[1]] %= .2)); }");
tryItOut("{'haha'.splityield <x><y/></x>; }");
tryItOut("M:with(- \"\" )yield @foo;");
tryItOut("/*infloop*/for(var prototype = each; <x><y/></x>; undefined) yield @foo;");
tryItOut("/*for..in*/for(let <><{__parent__}> </{__parent__}></> = <><bbb xmlns:ccc=\"<><><!--'yy'></></>\"><ccc:eee></ccc:eee></bbb></> in <x><y/></x> | <x><y/></x>) return [__iterator__];");
tryItOut("/*infloop*/while((({constructor: [this.__defineSetter__(\"prototype\", \t[1,,]) for each (prototype in *::*)], __proto__: __count__ -= __parent__[* .. \t*] })))let (__iterator__ = 0, prototype = prototype) { export *; }");
tryItOut("M:if(false @ __parent__.constructor = <y><z/></y>) { if (yield \tthis.__defineSetter__(\"prototype\", <\fx><y/></x>).__defineSetter__(\"constructor\", function ()(function ([y]) { })())) {<x><y/></x>.propertyIsEnumerable(\"@foo\")/*infloop*/for(false; *::*; <x><y/></x>) {(@foo);yield; } } else constructor = <><x><y/></x></>, __parent__\n}");
tryItOut("return new <><x><y/></x></>.isPrototypeOf(undefined)();");
tryItOut("/*for..in*/for(var \t__iterator__.__noSuchMethod__ in ((function(q) { return q; })( /x/g  ? *::* : <x><y/></x>)))y");
tryItOut("L:with({__parent__: <>(__iterator__ = this)</>}){(<x><y/></x>);gc }throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(\tconst ({ function::prop: [], constructor: __parent__ }) in ((({}).hasOwnProperty)(<><x><y/></x></> >>> prop = [1,,]))){while((<><x><y/></x></>) && 0)(<x/>);/*for..in*/M:for(const  { break ; }  in <x><y/></x>) {throw <><x><y/></x></>; } }");
tryItOut("{yield <><x><y/></x></>;{} }");
tryItOut("M:with(*.watch(\"prototype\", (1 for (x in [])))){let __count__ = 1.2e3, __proto__ = *; }");
tryItOut("for(let y in [5,6,7,8]) let(({ __iterator__: prototype })) ((function(){var __proto__;})());");
tryItOut("{return *::*;return\n }");
tryItOut("with({}) return;");
tryItOut("M:switch\t(\n<x/> || (<x/>.@foo)) { default: *::*break;  }");
tryItOut("do {continue M;yield __count__; } while(( '' ) && 0);");
tryItOut("{(0.1).__defineSetter__L:with([this])prototype }");
tryItOut("let(constructor) ((function(){export constructor;})());");
tryItOut("if((p={}, (p.z = <><>__iterator__</></>.yoyo(__noSuchMethod__.prop setter= (Math.pow).apply.isPrototypeOf(<><x><y/></x></> |= __parent__)))())) {var __count__, __parent__; } else {throw <><x><y/></x></> instanceof true; }");
tryItOut("if((* >>>=window)) { if ('fafafa'.replace(/a/g, (1e+81).watch)) if( /x/ ) continue ; else {(<><x><y/></x></>);const __parent__ = __iterator__, constructor; }}");
tryItOut("/*for..in*/for(constructor in this) {export __proto__;yield; }");
tryItOut(";window;");
tryItOut("/*infloop*/M:do {/*for..in*/for(let __noSuchMethod__ in <x><y/></x>) {}/*for..in*/M:for(constructor in (((1e+81).watch)((p={}, (p.z = [z1])())))){{}return; } } while(<x/>);");
tryItOut("switch((<><x><y/></x></> <= <><x><y/></x></>).hasOwnProperty(\"__parent__\") ? (p={}, (p.z = \f<x><y/></x>)()) : \fthis.zzz.zzz) { default: gc()yield;break; yield; }");
tryItOut("(1 for (x in []))/*infloop*/for(let __count__; [[]]; <x><y/></x>) {const __parent__, prototype = <x><y/></x>; }");
tryItOut("switch(window) { case <y><z/></y> |=  '' : break; throw <><x><y/></x></>; const prop;default: {}case 4: break;  }");
tryItOut("/*for..in*/for(var [__count__, constructor] = __iterator__ in constructor) {gc() }");
tryItOut("(window / function(id) { return id }) const __proto__;");
tryItOut("while((((*::*.valueOf(\"number\")) in 1e4.__count__)) && 0){continue ; }");
tryItOut("/*for..in*/for(prop in (('haha'.split)(prototype))){eval }");
tryItOut("/*for..in*/L:for(var this.__defineSetter__(\"prototype\", window) in (('haha'.split)(this)))/*infloop*/for(const __proto__; -0 , (function ([y]) { })(); [<y><z/></y>].some(function  __iterator__ (constructor, )window)) return;");
tryItOut("if(1.3) {prototype = null; } else {;yield; }");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></x>) return <x><y/></x>;prop; } while((__count__) && 0);");
tryItOut("/*infloop*/for(const ({ __iterator__: [prototype, , (0)(<x/>), ] }) = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; gc; 1e-81) /*for..in*/for(const __parent__ in  /x/g ) {yield;var __proto__ = 0, __proto__ = <y><z/></y>; }");
