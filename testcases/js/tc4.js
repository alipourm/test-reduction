tryItOut("if((function (constructor) { yield *::*.isPrototypeOf(constructor) } ).call(* >>= function ([y]) { }, *::* .@x:: #1#)) {yield; } else  if \f((yield  /x/g ).throw((__iterator__ = <x/>))) ");
tryItOut("/*for..in*/for( /x/ ['__proto__'] in <x><y/></x>) {return <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <y><z/></y>) return  /x/ ;");
tryItOut("let (prop = window) { {} }");
tryItOut("/*for..in*/for([__proto__, prop] = ({a2:z2}).valueOf(\"number\").hasOwnProperty(\"function::__parent__\") in __count__) {return; }");
tryItOut("if(__noSuchMethod__ = __iterator__) { if (this != <y><z/></y>) {export *;throw false; }} else {let __parent__, __parent__;yield; }");
tryItOut("if(<y><z/></y>.isPrototypeOf((({}).hasOwnProperty).call(prototype, 1.3, *::*)).__noSuchMethod__) {return 1e+81; } else  if (__parent__ = __iterator__) {/*infloop*/for(__noSuchMethod__; get; this) {undefinedfunction (__count__) { return <x><y/></x> }  }__count__ = prop; }");
tryItOut("/*infloop*/for(let __proto__ = undefined; prototype;  /x/g ) break ;");
tryItOut("if([,,z1]) { if (RangeError()) /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in true) throw @foo;} else {{} }");
tryItOut("/*infloop*/L:for(let [prop] = (new (*::*)(prototype, undefined)); false.__lookupSetter__(\"prototype\"); \nprop) ;");
tryItOut("switch(( /* Comment */this)) { default: {export __noSuchMethod__ }break; case 7: break; case 1e4.__defineGetter__(\"__proto__\", <y><z/></y>): break; break L;case this: yield; }\nwith(function(id) { return id }){Function }");
tryItOut("break \nyield window;");
tryItOut("0x99\nexport *;");
tryItOut("M:if([z1]) { if (<><><!--yy--></></>) {const __parent__; }} else const __count__ = <x/>, __noSuchMethod__;");
tryItOut("throw this.\t__defineSetter__(\"__parent__\", gc);");
tryItOut("L: export *;");
tryItOut("/*infloop*/L:while(let (__count__) 3.141592653589793){{/*infloop*/L:\ffor( \"\" ; [z1,,]; //h\n__iterator__) {export *;yield constructor; }if(window) const __iterator__ =  /x/ , __count__; else  if ([,]) break M; else \t{export *;yield; } } }");
tryItOut("with({constructor: __proto__ =  \"\" })try { throw null; } finally { yield  '' ; } ");
tryItOut("with({__noSuchMethod__: ((prop = @foo) %=  \"\" .constructor)})yield;");
tryItOut("x::__count__ = constructor;");
tryItOut("do {export *; } while(((-0)) && 0);");
tryItOut("if(([033].filter(<x><y/></x>) for (__count__ in -1))) { if (*::* .. []) prototype = 1e81, __proto__;} else {(this\f); }\n/*for..in*/L:for(const prototype = 0.1 in ({__parent__: <x><y/></x> })) {yield; }\n");
tryItOut("M:if(yield []) __iterator__; else  if (eval(\"prototype.prototype = <x/>\", ( \"\"  !== <x><y/></x>))) switch\n([]) { case undefined: continue ;break; case 5: break;  } else {if(this) {yield constructor;let prop = @foo; } else  if (__proto__) {1.2e3;throw <><x><y/></x></>; } else return; }");
tryItOut("L: {continue ; }");
tryItOut("L: {(5.0000000000000000000000); }");
tryItOut("L:with([11,12,13,14].map)");
tryItOut("/*infloop*/for(__noSuchMethod__ = ( \"\" .__proto__); [z1]; window.isPrototypeOf(undefined)) <x><y/></x>; const __proto__;");
tryItOut("let __parent__, constructor;<><x><y/></x></>;");
tryItOut("/*infloop*/for(var __proto__; (__parent__--());  \"\" .__defineGetter__(\"let, __noSuchMethod__\", (eval(\"arguments\", <x><y/></x>)).watch)) {if(*) { if (<><x><y/></x></>) { }} else yield <x><y/></x>; }");
tryItOut("M:if((({ prototype\f: ({ __iterator__: ({ prop: __noSuchMethod__ }) }), __noSuchMethod__: [__iterator__] }) = [] + undefined)) {if((*::*.throw(<><x><y/></x></>))) export *; else  if ((new ({}).__lookupGetter__(*, ({a2:z2})))) {constructor = window, __parent__; } else {var *::*, __parent__ = <x><y/></x>; } } else  if (((<><x><y/></x></>.__defineGetter__(\"__count__\", Function))(undefined))) while((__proto__) && 0){(0/0); } else const __count__ = -3/0, constructor = *;");
tryItOut("throw undefined;");
tryItOut("{yield *; }");
tryItOut("if(('fafafa'.replace(/a/g, function  prototype (__count__) { yield constructor.__count__ setter= 'haha'.split } ))) { if ((yield (constructor.__noSuchMethod__ = <x><y/></x>))) do {__iterator__, __count__ = window;__proto__ = <x><y/></x>, __iterator__;\t } while((false instanceof prop) && 0);} else L:if(({__noSuchMethod__: function(id) { return id }})) { if (__parent__ =  /x/ ) gc() else {let constructor = @foo; }}");
tryItOut("if(__parent__ = .2) { if (__proto__ = __count__) {const __iterator__ = <x><y/></x>;while((3) && 0) }} else ({}).__lookupGetter__");
tryItOut("L:with({__parent__: (prototype.__noSuchMethod__\t getter= new Function)}){; }");
tryItOut("/*for..in*/for(__iterator__ = [,,z1] in (-0)) yield <x><y/></x>;");
tryItOut("export *;\nyield false;\n");
tryItOut("L:if((this.zzz.zzz)) { if ((__parent__.__parent__ getter= <y><z/></y>[null])) {; }} else { }");
tryItOut("/*for..in*/for(var prop in *.watch(\"__iterator__\", ({}).hasOwnProperty) != 1e4 >= <x><y/></x>) /*\n*/{{(<x><y/></x>);return [1]; }/*for..in*/for(prototype = __count__ in *::*) throw <x><y/></x>; }");
tryItOut("if(<><x><y/></x></>) {yield;var __parent__ = this;//h\n } else  if (let) { }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __iterator__] = <x><y/></x> in [z1]) yield @foo;");
tryItOut("__parent__, prototype = *");
tryItOut("/*infloop*/while(let __count__){export *;throw __proto__; }");
tryItOut("eval");
tryItOut("/*infloop*/M:for((({ constructor: [, __noSuchMethod__, <{__count__}></{__count__}>, __parent__, __noSuchMethod__] }) = 0x99.unwatch(\"__parent__\")); \n /x/ ; ({__proto__: (__count__.prototype \fsetter= function  constructor (__count__, __noSuchMethod__) { yield try { export __count__; } catch(__parent__ if __parent__) { break ; } catch(prototype) { return; }  } ),  get prop(prop) { return [1,,] }  })) with(<><x><y/></x></>){constructor, __count__;yield; }");
tryItOut("__iterator__, constructor = *::*\ncontinue M;");
tryItOut("let(({ __count__: __iterator__, prop: ({ prototype: ({ __count__: __parent__ }), prototype: __noSuchMethod__ }) }) = (<y><z/></y>)( /x/g  %= <x/>) << (\tnull , <><x><y/></x></>), constructor = ([new ([1,2,3,4].map)(<y><z/></y>, #1#) for (__proto__.__parent__ in <y><z/></y>) if (<x><y/></x>)])) { __noSuchMethod__ = __parent__;");
tryItOut("/*for..in*/for(__proto__ in this.@*) return true;");
tryItOut("L: {return <><x><y/></x></>;; const __noSuchMethod__; }");
tryItOut("with((<><x><y/></x></>.__parent__ = <><x><y/></x></> * prototype: <x><y/></x>\n)){}");
tryItOut("__iterator__ = __parent__;");
tryItOut("const constructor;");
tryItOut("if(#0=function(id) { return id } &= yield) { if (1e+81) (1.3); else continue L;}");
tryItOut("M:if(*) <x><y/></x>;");
tryItOut("if( '' ) { if (null) {gc() }} else {var prop = <x><y/></x>, constructor = window; }");
tryItOut("export *;");
tryItOut("if(<zzz>[@foo if (<x/>)]</zzz>) (@foo);\f else  if ((@foo.eval(undefined))) (1 for (x in [])) else ");
tryItOut("/*infloop*/do {return;({}) } while(arguments);");
tryItOut("break L;\n__parent__;\n");
tryItOut("/*infloop*/while(<x><y/></x>)({}).hasOwnProperty");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in (({}).hasOwnProperty).call((<><x><y/></x></>), ([<x/>]), this)) {if(*) { if (window) {<x/>; }} else yield; }");
tryItOut("let(prototype) ((function(){with({}) { return; } })());");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = __proto__/*\n*/ = ({a2:z2}) in null) {{}return __count__; }\nif(let (__iterator__ = -0) this.valueOf(\"number\")) return;\n{}\n else {/*infloop*/L:do {continue M; } while(<><x><y/></x></>);break ; }\n");
tryItOut("if(void __iterator__.prototype setter= (this).watch) { if (! /x/ .watch(\"prop\", [1,2,3,4].slice)) throw <x/>;} else {export prototype; }");
tryItOut("(<x><y/></x>);\n(new Function(\"(eval).call\"))\n");
tryItOut("/*infloop*/for(<>window</>; (({__iterator__: <y><z/></y> })); \nprop) {'haha'.split }");
tryItOut("if(false) { if (<y><z/></y>) return;} else export *;");
tryItOut("with({}) { return; } ");
tryItOut("/*infloop*/while(this.zzz.zzz){window }");
tryItOut("/*infloop*/for(let each = this; @foo; -0) {yield (function ([y]) { })();\ryield <y><z/></y>; }.2;");
tryItOut("while((window) && 0){;(window); }");
tryItOut("L: ({}).hasOwnProperty");
tryItOut("if( for (__count__ in 1e-81).__defineSetter__(\"prototype\", function(y) { yield y; /*for..in*/for(__count__ in (((__iterator__).apply)(true)));; yield y; })) { if ([z1]\n) {/*for..in*/L:for(let [__parent__, prop] = @foo in  \"\" ) {continue ;throw <><x><y/></x></>; }/*for..in*//* nogeckoex bug 349964 */ for  each(\tconstructor in constructor) \t{[1,2,3,4].slice } }} else export *;");
tryItOut("with({}) ([,,]);");
tryItOut(";\nwith({prop: #3={a:#3#}}){{}yield; }\n");
tryItOut("/*infloop*/M:do *; while(<y><z/></y>);");
tryItOut("/*infloop*/L:do (prototype); while( /* Comment */!*::*);");
tryItOut("/*for..in*/for(var constructor in ((((__noSuchMethod__ = [, ])).watch)((((<x/>.valueOf(\"number\")) if (0)))))){throw window; const prop; ''  }");
tryItOut("if((yield __parent__.hasOwnProperty(\"prototype\"))) { if (-0) const __parent__; else ;}");
tryItOut("if([window.@*].filter(Math.pow)) { if (({ get __noSuchMethod__ __proto__ () { yield <x/> } ,  set prop __count__ () { yield __parent__ = (this.__defineSetter__(\"__parent__\", (arguments).__defineSetter__)) }  })) if([15,16,17,18].\ffilter(//h\n<><x><y/></x></>, [1].__noSuchMethod__)) const __proto__, prop; else return <y><z/></y>;} else /*infloop*/for(const __parent__; (new (*::*).watch(<x><y/></x>, window)); (this.__defineSetter__(\"prototype\", (<x/>).__defineSetter__))) {'haha'.splitreturn; }");
tryItOut("/*for..in*/L:for(const __iterator__ in (((new Function(\"/*infloop*/for(const __iterator__; <><x><y/></x></>; 1e4) {(this).__defineSetter__ }\")))(<><x><y/></x></> |  \"\" )))\f{;(@foo); }");
tryItOut("L:if(*) { if (<x><y/></x>) {} else {gc()throw @foo; }}");
tryItOut("this;");
tryItOut("{gc() }");
tryItOut("L: {[1,2,3,4].slice }");
tryItOut("switch(this.zzz.zzz) { case 3: default: export *;break;  }");
tryItOut("with({__parent__: #1# - __proto__}){return <y><z/></y>; }");
tryItOut("/*for..in*/for([__iterator__, prop] = [] in __noSuchMethod__) (false);");
tryItOut("if(yield ((prop = true)--)) yield (__iterator__ =  '' ); else  if (__parent__) {var __parent__;const __count__, __proto__ = prototype;\n( /x/g );\n } else {if(this) { if (<x/>) yield;} else yield; }");
tryItOut("L:if(3.141592653589793) for(let y in [5,6,7,8]) with({}) { return; }  else  if (*::* & <><x><y/></x></> += *) {/*infloop*/for(var __count__ = 3; 0; <x><y/></x>) {var __noSuchMethod__ = *, __parent__ = <><x><y/></x></>;throw this; } } else if(0/0.__defineGetter__(\"function::__parent__\", new Function))  else {export *; }");
tryItOut("let(__iterator__) { try { return __count__; } catch(function::prop) { return window; } finally { export *; } ");
tryItOut("/*infloop*/M:while(this.isPrototypeOf(false)['__iterator__']){throw <><x><y/></x></>; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __parent__] = (<y><z/></y>)(Math.pow) in (new this().__lookupGetter__(\"prototype\") != prototype.eval(false) > [this])) throw *;");
tryItOut("throw <y><z/></y>;\nthrow <y><z/></y>;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.__iterator__ in (<x/>)[ \"\" ]) {/*infloop*/M:do {return; } while(<x><y/></x>);switch(true) { case 0: yield;break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in <x><y/></x>) var constructor = #3={a:#3#}, __parent__;");
tryItOut("/*for..in*/for(const __iterator__ = * in 033) { }");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] = *::* in true) {return #3={a:#3#}; }");
tryItOut("/*for..in*/for(const __iterator__ in ((function(q) { return q; })(this)))__parent__: 0");
tryItOut("/*infloop*/for(var prop; new Number( \"\" ) / (uneval(033)); this + <x/>) {/*for..in*/for(var prop in 1e81) {continue ;export __iterator__; } }");
tryItOut("/*infloop*/while(<x><y/></x>.(<>Error()</>)){throw  \"\" ; }");
tryItOut(" /x/ ;\n{__noSuchMethod__; }\n");
tryItOut("/*for..in*/for(let constructor = 1e4 .@*:: (-1) in function(y) { yield y; export *;; yield y; }) {yield; }");
tryItOut("\nlet __proto__ =  /x/g , __parent__ = [,,];");
tryItOut("L:if((<y><z/></y>\n)) break ;");
tryItOut("M:switch((__count__ = __parent__)) { case 1: export __proto__; const __proto__; } const prop");
tryItOut("with({__iterator__: String(1.2e3)})if((eval(\"export __proto__;\", this))) var __parent__, __count__;");
tryItOut("{/*infloop*/do {return;export __noSuchMethod__; } while(*::*);/*infloop*/for(({ prop: __parent__, __proto__: ({ prop: ({ ({ __noSuchMethod__: ({ prop: prototype }), __proto__: __noSuchMethod__ }): prototype, prop: ({ prop: __parent__, prototype: __proto__ }) }), __noSuchMethod__: ({ __count__: prop, prop: ({ prop: [__parent__, __noSuchMethod__], prop: ({ __proto__: prop }) }) }) }) }) = ((true)[#1=[#1#]][(__iterator__%= '' )]); (({__iterator__: *::*})); (function(q) { return q; })) return false; }");
tryItOut("with({}) return this;");
tryItOut("/*for..in*/for(const __iterator__ in ((function(q) { return q; })(<zzz>(__parent__.prop)</zzz>)))yield;");
tryItOut("return;");
tryItOut("L:if((__noSuchMethod__.__count__)) if(.2) { if ( \"\" ) {return; }} else {yield;return null; } else  if (@foo) {return <x/>; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("/*for..in*/for(let prop = (((export *).prop)\f(((function  __proto__ ()__parent__ in @foo).call((<><x><y/></x></>.__proto__), ))) for (prototype in __parent__ = __noSuchMethod__)) in false\n) {const ;yield __count__; }");
tryItOut("for(let y in []);");
tryItOut("if((-1) != null) { if (<><bbb xmlns=\"function::__iterator__\"><!--yy--></bbb></>) yield ({a1:1});} else {{return <><x><y/></x></>;eval } }");
tryItOut("yield __iterator__ | <x><y/></x>;");
tryItOut("{\fswitch(<><x><y/></x></>) { case 7: function::prototype = -1;break; break; default: export *;break; gc()break;  }\n }");
tryItOut("L:if(<x><y/></x>) yield; else  if (this) export prop; else throw true;");
tryItOut("M:if((function::prop * 4. .@*:: let (__noSuchMethod__) (<y><z/></y> ^= __proto__)).eval(this >= @foo)) while((__noSuchMethod__, __proto__) && 0){Functiongc() }\n else  if ( /* Comment */(((1e4 for each (__parent__ in *::*))).propertyIsEnumerable(\"constructor\"))) yield\n else {/*infloop*/while(<x><y/></x>);[1,2,3,4].slice }");
tryItOut("if(*) ; else  if (new __proto__ = -3/0(<><x><y/></x></>.__lookupGetter__(\"__proto__\"))) {throw undefined; }");
tryItOut("do {continue ;let prop; } while(((({prototype: __parent__({a1:1}), __noSuchMethod__}))) && 0)\n");
tryItOut("return;");
tryItOut("<x><y/></x>\nreturn;\n");
tryItOut("if(033) { if (( \"\"  *=  \"\"  ? ({}) : <x><y/></x>)) {function  __noSuchMethod__ (__proto__) { const constructor; } const constructor = __iterator__; }} else \f{let (__count__) {  }/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in constructor) \n { return (__noSuchMethod__ = [[1]](( /x/g .__lookupGetter__(\"__proto__\")))) } \n }");
tryItOut("L: {let __parent__; }");
tryItOut("if(({ set prop(__iterator__, __noSuchMethod__)function (constructor, __noSuchMethod__) { yield <x><y/></x> } (window, prototype) })) { if (new ((new Function(\"this;\")))(<><x><y/></x></>, <x><y/></x>) = ({__noSuchMethod__ getter: ({}).hasOwnProperty, __count__ getter: eval })) {this;; } else {{} }}");
tryItOut("/*for..in*/for(let prototype = ({}) >>> <><x><y/></x></> in <x><y/></x>) {(<x><y/></x>).__defineSetter__<><x><y/></x></>; }");
tryItOut(";");
tryItOut("/*for..in*/for(const __proto__ = [,,z1] instanceof window in <x/> >> <x><y/></x>) {{yield <x/>;/*infloop*/L:for(const constructor = <x><y/></x>; <x/>; this) yield; } }");
tryItOut("while((__count__) && 0)/*infloop*/M:for(let __noSuchMethod__ = new Function; x::prop = <><x><y/></x></>; (-1)) prototype = #1=[#1#], __count__;");
tryItOut("/*infloop*/for(let ({ __iterator__: __count__, prop: __count__ }) = new ((null).__defineSetter__)(this); this.zzz.zzz; (uneval(@foo))) (undefined);");
tryItOut("let (__proto__ = (<><>[11,12,13,14].sort</></> = [1])) { throw prop; }");
tryItOut("/*infloop*/for([, , __proto__, ] = new ((new Function).apply)(); (function::__noSuchMethod__.prototype = true); return *) <x><y/></x>;");
tryItOut("/*infloop*/M:for(const prop; ([((<><x><y/></x></>).__defineSetter__)]); (null)[*]) {(0/0);if([[1]]) {{}break ; } else {__noSuchMethod__ = __noSuchMethod__ = *, prototype = <x><y/></x\r>;export *; } }");
tryItOut("export __count__;\nlet (prop = 3/0) { 4.; }\n");
tryItOut("__proto__");
tryItOut("for(let y in []);");
tryItOut("if([0x99 for (__count__ in false)].__lookupGetter__(\"prop\")) /*for..in*/M:for(var prototype in __count__)  else {throw let; }");
tryItOut("/*infloop*/L:do {export prop;this } while((this.__defineSetter__(\"__iterator__\", (window).apply)));");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/for(var __count__; (yield -1 if (prototype)); (#2=({prototype: <y><z/></y>})) >= ({__noSuchMethod__: [window].filter('haha'.split), prop getter: {} }).throw(this.zzz.zzz)) {const prototype = constructor, __parent__ =  /x/g ; }");
tryItOut("with(#1=(uneval(( /x/  | <y><z/></y>)))){; }");
tryItOut("{let (__count__ = <x><y/></x>, __noSuchMethod__ = constructor) { throw window; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const new function  constructor () { return false } (void \t[z1,,], @foo)['constructor'] in __count__.constructor) {undefined; }");
tryItOut("if([1,,]) {const constructor =  \"\" ; } else  if (@foo) return; else throw this;");
tryItOut("for(let y in [5,6,7,8]) yield <><x><y/></x></>;");
tryItOut("delete <y><z/></y>");
tryItOut("return void __noSuchMethod__;");
tryItOut("/*infloop*/for(__iterator__ = __noSuchMethod__; <x/>; <x><y/></x>) {yield arguments; }\nyield;");
tryItOut("do {{} } while((\n5.0000000000000000000000) && 0);");
tryItOut("gc()\ngc()\n");
tryItOut("__count__ = __proto__;");
tryItOut("do return; while((undefined) && 0);");
tryItOut("/*infloop*/constructor = 033for(__count__; <><x><y/></x></>; true) __noSuchMethod__ = [,], __parent__\n");
tryItOut("if(<><zzz>false</zzz></>) {window;return <><x><y/></x></>; } else  if ([1,,]) gc() else yield  /x/ ;");
tryItOut("switch((<><x><y/></x></> ?  /x/  : <y><z/></y>)) { default: break; __proto__ = *, __count__ = __proto__;break;  }\n const prototype;");
tryItOut("if(().watch)((({prototype: <x/> })), <x><y/></x>)) {yield;const prop; } else {throw undefined; }");
tryItOut("with(prop = (function ([y]) { })())export constructor;");
tryItOut("({ __parent__: prop, prop: [__proto__] }) = prop;");
tryItOut("");
tryItOut("/*infloop*/L:for(const __parent__; @foo;  \"\" ) yield;");
tryItOut("yield <bbb xmlns:ccc=\"prototype.__iterator__\"><ccc:eee></ccc:eee></bbb>.(__parent__.@foo);");
tryItOut("L: {export __iterator__; }");
tryItOut("yield\n");
tryItOut("M:if(#0=[[1,,]]) {throw [[]];gc() } else  if (window) gc() else return\n/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ prop: ({ __proto__: __count__, __proto__: prop }) }) in ({constructor:  /x/g })) ;");
tryItOut("/*for..in*/M:for(var <><y/></x>['prototype'] in (([1,2,3,4].slice)( ''  :: <y><z/></y>)))const prototype = <y><z/></y>, __count__ = [z1,,]; const __count__;");
tryItOut("M:if(<><x><y/></x></>) __noSuchMethod__ = #3={a:#3#};");
tryItOut("/*for..in*/for(prop = new <><x><y/></x></>.(3 >>= prototype)() in window) {export *;;\nexport *;\n }");
tryItOut("do (__noSuchMethod__); while((0x99) && 0);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in 1e4//h\n) return __parent__;/*infloop*/for((prototype); (__count__ = <><x><y/></x></> | undefined); <y><z/></y>.__defineGetter__(\"prop\", new Function).*) {[1] >= <x><y/></x>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in *::*) throw 0x99;");
tryItOut("{M:with({prototype: *::*})throw (-0);for(let y in []); }");
tryItOut("M:if(({ __iterator__: ({ prototype: constructor, __noSuchMethod__: __noSuchMethod__ }), prop: ({ __proto__: prop }) }) = __parent__ = ({ __proto__: __parent__ }) ? undefined.unwatch(\"__noSuchMethod__\") : __noSuchMethod__ = <x/> - yield <y><z/></y>) {if(((__noSuchMethod__ for (__noSuchMethod__ in <x/>)))) yield; else var __noSuchMethod__ = __iterator__;([1,2,3,4].map).call } else  if (new (prop = __parent__ setter: (1 for (x in [])))()) export *;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("with(([15,16,17,18].sort((1 for (x in [])), <><x><y/></x></> for each (__iterator__ in <x/>)))){/*for..in*/L:for(const [__proto__, __noSuchMethod__] = delete constructor in ({prop getter: function(q) { return q; },  get prototype __iterator__ () { return constructor; }  })) {@foo, prop = __count__;export *; } }");
tryItOut("throw <><x><y/></x></>\nconst prototype = <x><y/></x>, __iterator__ = window\n(<y><z/></y>);");
tryItOut("let(__proto__ =  '' , __parent__) { gc()");
tryItOut("/*for..in*/for(var [prototype, prototype] = (window.*) in window) yield;");
tryItOut("if(return) {throw @foo;export __proto__; }");
tryItOut("export *;");
tryItOut("let(__parent__) ((function(){( \"\" ), ({__proto__: <x/>, prop getter: [1,2,3,4].map })\f})());");
tryItOut("if(({__proto__: [11,12,13,14].filter})) {let __noSuchMethod__ = arguments;\f/*infloop*/do {export prototype;__parent__, __proto__; } while(<><x><y/></x></>); } else  if ([15,16,17,18].filter([1,2,3,4].map, ((uneval(.2))))) {if(<x/> .@*:: <><x><y/></x></>) { if (<x/>.propertyIsEnumerable(\"__iterator__\")) { }} else { } } else yield @foo;");
tryItOut("if([, , constructor, __proto__] = this) yield; else  if (this.__defineGetter__(\"__iterator__\", function  constructor (constructor)<x><y/></x>.(<x/>))) {return; }");
tryItOut("if(eval(\"<y><z/></y>\", (new (@foo)(\f@foo/*\n*/))) - this.__lookupSetter__(\"function::constructor\")) {export *; } else  if (#1#) export *;");
tryItOut("(<x/>)\nexport *;");
tryItOut("return (prototype =  \"\" );");
tryItOut("L:if(eval) \n{ if (((__proto__.prop = (window)) & <><x><y/></x>\t</>--)) L: {export *; }} else throw 0;");
tryItOut("{(this);gc() }");
tryItOut("/*for..in*/L:for(const constructor = <><x><y/></x></> in (-1)) {yield; }");
tryItOut("if((__parent__ = ({ __proto__: __parent__, __count__: function::__iterator__ }))) /*infloop*/L:for(prototype; [1,2,3,4].map\t; null.__defineGetter__(\"__proto__\", eval)) gc() else  if (-0) {/*for..in*/for(var let in  \"\" ) function(y) { yield y; return <><x><y/></x></>;; yield y; } }");
tryItOut("L: ;");
tryItOut("let (prototype = __count__.(({})\f), __noSuchMethod__ = <><x><y/></x></>) { export *; }");
tryItOut("if((__count__ = [[]]).__defineGetter__(\"constructor\", (((new ( /x/ )(\")).@foo)).__defineSetter__)) {yield; } else  if ( /* Comment */__iterator__(0/0) * ([] = this.__lookupGetter__(\"__count__\"))) const prototype = true; else return;");
tryItOut("throw <y><z/></y>;");
tryItOut("/*infloop*/for(const __parent__ = (each = <x><y/></x>); undefined if (<x><y/></x>); (window.eval(try { {} } catch(__noSuchMethod__) { export __count__; } ))) {return  '' ;return function ([y]) { }; }");
tryItOut("let(__iterator__, __parent__ = __proto__) ((function(){gc()})());");
tryItOut("/*infloop*/M:do {/*infloop*/for(var x::function::__proto__ =  /x/g ;  '' ; <y><z/></y>) {(null);{} } } while(('haha'.split) &= [this if (arguments)]);");
tryItOut("gc()");
