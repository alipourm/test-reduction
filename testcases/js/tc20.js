tryItOut("");
tryItOut("/*for..in*/for(const function () { return <x><y/></x> } (<y><z/></y>) in ((eval)(eval(\"if(default: break; ) {gc() } else  if (<><x><y/></x></>) return __count__; else (0);\", (<y><z/></y> for each (prototype in false)))))){export __parent__; }");
tryItOut("do /*infloop*/while(undefined); while((([z1] >>>=<x><y/></x>)) && 0);");
tryItOut("with(){3;; }");
tryItOut("const __proto__;");
tryItOut("if(__iterator__ = __iterator__) window;");
tryItOut("/*for..in*/for(let __parent__ = window in ((({a2:z2})))) gc()");
tryItOut("/*infloop*/for(var prototype; ; (uneval(set instanceof <><x><y/></x\n></>))) {__iterator__ }");
tryItOut("switch(*::* << window) { /*\n*/case 4: {arguments }break; with({}) let(set = (yield ({})),  ''  = window) ((function(){for(let y in []);})()); }");
tryItOut("if(--this++) break L; else { }");
tryItOut("if(-0 ?  ''  : false .@ ++this) { if ((__count__.__proto__ = set.prototype = __count__)) export __iterator__} else {L: break M;; }");
tryItOut(" let ");
tryItOut("L:if(<y><z/></y>) { if (window) export *; else export __parent__;} const constructor;");
tryItOut("/*infloop*/for(let constructor; (window.hasOwnProperty(\"__noSuchMethod__\")); ({ prop: __proto__, constructor: __proto__ })) /*infloop*/while( /x/g )return <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<x><y/></x>.(-0).prop in true +  \"\" ++) {/*for..in*/for(var [__count__, @foo] = <x><y/></x> in <><x><y/></x></>) {;return; }try { export *; } catch(__proto__ if (function(){return;})()) { (true); } catch(prototype if (function(){gc()})()) { Function } catch(prop if (function(){throw #1=[#1#];})()) { throw <x><y/></x>; } catch(prototype) { yield; } finally { {} }  }");
tryItOut("L: ;");
tryItOut("/*for..in*/for(var @foo.yield in __count__) export __count__;");
tryItOut("L:while(((<x><y/\f></x>.(arguments) ? new gc((<><x><y/></x></> instanceof (p={}, (p.z = ({a1:1}))()))) : (<x><y/></x> * true >= ([ /x/ ])))) && 0){return __noSuchMethod__;gc() const prop; }");
tryItOut("if(((<><x><y/></x></> if (false)))) {const __noSuchMethod__, __proto__ = this;export *; } else  if ( /* Comment */this) {export constructor; }");
tryItOut("yield ({} %=  '' );");
tryItOut("if((new (((__iterator__%=<y><z/></y>)).watch)(true,  '' ))) { if (__iterator__ = undefined) yield;} else if(__iterator__) { if (Object( /x/g , *::*)) {var __noSuchMethod__; } else { { return [[]] } yield; }}");
tryItOut("let (__parent__, __proto__) { do {export *; } while((__noSuchMethod__) && 0); }\n");
tryItOut("let (prop = (prototype\n)) { let prop; }");
tryItOut("while((window) && 0){; }");
tryItOut("throw <x/>\n");
tryItOut("this.zzz.zzz;");
tryItOut("L: break ;");
tryItOut("/*for..in*/for(const prop = Object() in +false) {if([constructor]) const prototype = window; else  if ([true]) {throw <><x><y/></x></>; /x/ ; } else throw __proto__;if(<y><z/></y>) { if (({a1:1})) {; }} else {__iterator__; }/ }");
tryItOut("export __iterator__;");
tryItOut("with( /* Comment */(let (__count__, __iterator__ = [,,]) undefined) -= new <><x><y/></x></>)/*infloop*/for(function::__noSuchMethod__ = <x><y/></x>; (<x><y/></x>.__defineGetter__(\"__parent__\", Function)); ((uneval(window)))) return 1e-81;\nundefined .@ <x><y/></x>\n");
tryItOut("yield  \"\" ;\nexport __parent__;\n");
tryItOut("{/*infloop*/while(__count__ = @foo){/*infloop*/while( /x/g ){gc() } }switch(((yield (window) % <x/>))) { default: for(let y in [5,6,7,8]) prop = __parent__;break; break;  } }");
tryItOut("/*infloop*/while(((new function (__count__) { return this } ()) ? <x/> : let (__parent__, __noSuchMethod__) 4.\n))prototype = undefined;\nbreak M;\n");
tryItOut("{continue L;if(__noSuchMethod__.prop = this) export *; else  if (prop.hasOwnProperty(\"constructor\"))  else {const __count__; } }");
tryItOut("/*infloop*/for(const prop; false; -0) <x><y/></x>");
tryItOut("/*infloop*/do {yield @foo; const prototype;export *;\f } while((new Number((function ([y]) { } for each (__parent__ in <x><y/></x>)))));");
tryItOut("M:with({__iterator__: (((1 for (x in []))).call)})gc()");
tryItOut("{export *;yield; }");
tryItOut(";");
tryItOut("/*infloop*/do __parent__: <y><z/></y>.__defineSetter__(\"__proto__\", function(q) { return q; }) while(@foo);");
tryItOut("L: {return; }\n");
tryItOut(" get __noSuchMethod__(__noSuchMethod__, ({ __iterator__: prop, __proto__: __count__ }))prototype.__noSuchMethod__ = undefined in (__parent__ = __parent__)");
tryItOut("constructor = <><x><y/></\tx></>, prop;export *;");
tryItOut("try { export __parent__; } catch(__parent__ if (function(){export x::constructor;})()) { var constructor = window; } finally { function  __parent__ (__noSuchMethod__, __iterator__) { return __proto__ }  } ");
tryItOut("with({constructor: <>try { export *; } catch(__iterator__) { export *; } </>}){(undefined);export prototype; } const prototype;");
tryItOut("with({prototype: false}){this; }\nFunction");
tryItOut("if((1 for (x in []))) let (__parent__ = <x><y/></x>) { gc() } else  if (({ prototype: prototype }) = (<><x><y/></x></>--)) yield prop;");
tryItOut("with({}) { __count__ = __count__; } ");
tryItOut("with({}) var __noSuchMethod__ = __noSuchMethod__;");
tryItOut("gc\nconst __count__, __proto__;\n");
tryItOut("let (__iterator__ = eval(\"([,,])(<><x><y/></x></>)\", (yield <x><y/></x>) ? <><x><y/></x></>.throw(<y><z/></y>) : *.hasOwnProperty(\"__noSuchMethod__\"))) { return true; }");
tryItOut("(1 for (x in [])) const __noSuchMethod__;");
tryItOut("with({constructor: 3.141592653589793}){export *; }");
tryItOut("with(prop){let __noSuchMethod__; }");
tryItOut("/*for..in*/for(const \t__proto__ = 1.2e3 in (new new Function()) :: prototype = @foo > ;) {const ;prototype }");
tryItOut("let ((__iterator__ = [[]])) { const __iterator__ = <x><y/></x>, __parent__ = <y><z/></y>; }");
tryItOut("switch((let (__proto__ = this) __iterator__.__proto__ = new (gc)(case 2: case 1: L:with({prop: 5.0000000000000000000000}){export constructor; }break; ,  /x/g )//h\n.__defineSetter__(\"constructor\", 'haha'.split))) { default: {}L: {export constructor; }break; break; break; case (*::*)[<><x><y/></x></>]: /*infloop*/for(var __iterator__ = ({a2:z2}); #3={a:#3#}; *::*) yield  '' ;case 8: __noSuchMethod__break;  }");
tryItOut("for(let y in [5,6,7,8]) return prototype.__defineGetter__(\"prop\", ((new Function(\"export __proto__;\"))).call)\nif(1e-81) {return; } else yield;\ngc()\n");
tryItOut("M:while((this) && 0){return [,,z1]; }");
tryItOut("/*infloop*/do if(true) let prop = 3; else export __iterator__; while( /x/g );");
tryItOut("for(let y in []);");
tryItOut("switch(new function (constructor) { export __proto__; } (('fafafa'.replace(/a/g, (true).watch)).propertyIsEnumerable\t(\"__noSuchMethod__\"), [15,16,17,18].sort(undefined, [,,z1]))) { default: case 6: {export *; }break; throw <y><z/></y>;case 5: break; case (__proto__.__proto__): case 5:  }");
tryItOut("{; }");
tryItOut("M:if(<x><y/></x>) {{}throw prop; } else  if (true) {var __parent__, __count__; } else {yield  /x/g ;{} } const __proto__;");
tryItOut("if(([constructor for each (constructor in undefined)]++) * <x><y/></x> in new String()) {([z1]);");
tryItOut("false;/*for..in*/for(var [__iterator__, __count__] = this in <x><y/></x>) {yield <x/>;\fyield  /x/g ; }/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __iterator__: __iterator__, prototype: prototype }) = ({ __iterator__: __proto__ }) in __noSuchMethod__ = <x><y/></x>) export *;");
tryItOut("while((@foo) && 0)/*infloop*/do ; while((this.zzz.zzz));");
tryItOut("L: {/*infloop*/while(this.__defineGetter__(\"__count__\", window)){{} }let([__parent__, ], __iterator__) { this.zzz.zzz; }");
tryItOut("/*infloop*/for((__count__); __proto__ = [,]; (<x><y/></x>[<><x><y/></x></>])(@foo.throw(<y><z/></y>), 3)) gc()");
tryItOut("( \"\" ); const constructor;");
tryItOut("yield\n");
tryItOut("with({}) gc()");
tryItOut("/*infloop*/L:do return; while(*);");
tryItOut("/*infloop*/do return; while(let (__proto__ = prototype) [z1,,]);");
tryItOut("/*infloop*/while(([11,12,13,14].sort))/*for..in*/M:for(var __proto__ in export *; = (-1) @ this.__defineSetter__(\"constructor\", function (__iterator__, ) { let __iterator__ = true; } )) {{yield <><x><y/></x></>;{} } }");
tryItOut("if(new ()(Error(#3={a:#3#}, <x/>),  /x/ )) {if(<x><y/></x>.unwatch(\"prop\")) { if (yield  '' ) {{let prop; } }} else throw <x><y/></x>;<><x><y/></x></>(constructor); }");
tryItOut("/*infloop*/L:do {switch(-3/0) { case 2: yield;case 4: throw null;break; default: let __parent__ =  '' , prototype;case window: break;  } } while(({ get prototype __proto__ ([, , ], __count__) { \nreturn; const __count__; } , __proto__: __parent__.prototype getter= eval }));");
tryItOut("/*infloop*/for(const __proto__; #1=({__noSuchMethod__: __count__}); ) /*infloop*/for(__iterator__; <y><z/></y>; null) {prototypelet [1,,] = 1.2e3; }");
tryItOut("export *\n");
tryItOut("if(.2 || <x/>.unwatch(\"__count__\")) {{} } else  if (__count__.(<>yyy</>)) {yield; }");
tryItOut("if(__noSuchMethod__.__noSuchMethod__) {(p={}, (p.z = <><x><y/></x></>)());do prototype =  \"\" , prop = @foo; while((this) && 0); }");
tryItOut("if((* for each (__proto__ in window))()) L:if(null) { if (false |  '' ) {(__noSuchMethod__); }} else yield; else {return <x><y/></x>; }");
tryItOut("L:with({__noSuchMethod__: yield = (++__proto__)}){0/0 = <><x><y/></x></>, __iterator__;let try { yield <y><z/></y>; } finally { ; } , prototype = <x><y/></x>; }");
tryItOut("/*infloop*/for(( /x/  | true); <x/>.__defineGetter__(\"__iterator__\", [[1]]); (this.__defineGetter__(\"constructor\", (new window()).call))) {yield\n{} }");
tryItOut("while((new prototype(<><x><y/> </x></>)) && 0){/*for..in*/for(var constructor = __iterator__ in  \"\" ) yield <><x><y/></x></>; }");
tryItOut("{throw {}; }");
tryItOut("{function (constructor) { return; }  }");
tryItOut("if( /x/ ) const __proto__; else  if (({ set prop(constructor, prototype) { return (<y><z/></y>.propertyIsEnumerable(\"__parent__\")) }  })) ;");
tryItOut("function  __parent__ (prop, each) { <y><z/></y>; } \nexport get;");
tryItOut("{export __proto__; }");
tryItOut("with({constructor: \nthis})export __proto__;");
tryItOut(" { yield 1.3 } \n");
tryItOut("if(new Math.sin(this, (-0)).@foo) prop; else  if (__proto__%=<x><y/></x>.isPrototypeOf(false in null)) return;");
tryItOut("L: return;");
tryItOut("let (__proto__, __count__ = (<x><y/></x> & <x/> === __count__.__lookupGetter__(\"__noSuchMethod__\"))) { while((4.) && 0){__iterator__ } }");
tryItOut("/*for..in*/for(var __parent__ in ((({}).__lookupGetter__)(Function(~this.throw(prototype = window))))){var __iterator__ = <><x><y/></x></>, constructor = ; }");
tryItOut("L:if(__parent__) {} else {; }");
tryItOut("/*infloop*/for(let let; __count__.prototype; this.__defineSetter__(\"prototype\", /a/gi)) gc()");
tryItOut("{{} }");
tryItOut("if(this) { if (this)  else [];}");
tryItOut("/*infloop*/for((([1,2,3,4].map)(<x/>, 1.3)); undefined; false <<= 1.2e3) {continue L;yield; }");
tryItOut("let(__parent__ = <x/>) ((function(){gc()})());");
tryItOut("/*infloop*/for(__count__; *::*; <x><y/></x>) {; }yield;");
tryItOut("/*infloop*/for(<><xxx>{__count__}</xxx></> .@*:: __parent__ = this; 1e+81; x::prop.__defineSetter__\t(\"__proto__\", Function)) {return (*::* == .2); }");
tryItOut("/*infloop*/M:for(let ({ __count__: __iterator__ }) = ( \"\" .valueOf(\"number\")); <x><y/></x>.(__noSuchMethod__)--; ((<y><z/></y>.prop).__defineSetter__(\"__proto__\", eval))) {yield; }");
tryItOut("/*infloop*/for(var __count__;  /x/ ; @foo) <x><y/></x>;");
tryItOut("yield false;");
tryItOut("/*infloop*/while(null){const __iterator__, __noSuchMethod__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (<xxx>{__iterator__}</xxx>.(<y><z/></y>.watch(\"__proto__\", function(q) { return q; }))) in ( /x/ .throw(@foo) &= <x><y/></x>.throw(null))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in @foo) {return true; } }");
tryItOut("{break ;var prototype = <y><z/></y>;{} }");
tryItOut("/*for..in*/for(prop in ((({}).hasOwnProperty)(([1,2,3,4].slice)())))<x><y/></x>");
tryItOut("return;");
tryItOut("/*infloop*/for(let ({ __parent__: __noSuchMethod__, prop: ({ __noSuchMethod__: __iterator__ }) }) =  /x/ ; ([1,2,3,4].map); (<><x><y/></x></> ? <><x><y/></x></> : null)) let (__noSuchMethod__, __proto__ = 0x99) { /*for..in*/for(const __iterator__ =  in <y><z/></y>) yield function::constructor; }");
tryItOut("/*for..in*/for(let __count__ in ((Math.pow)((({__proto__: ({__parent__: (__proto__.[] setter= [1,2,3,4].map)}),  get prototype __proto__ (__noSuchMethod__, constructor) { return __noSuchMethod__.__proto__ getter= [1,2,3,4].slice }  }))))){switch(<x><y/></x>) { case 4: L:if(({a2:z2})) { if (-3/0) let __iterator__, __iterator__; else const __iterator__;}break;  } }");
tryItOut("export *\n");
tryItOut("*");
tryItOut("for(let y in []);");
tryItOut("M:while(((\n<x><y/></x>) & 3/0.__defineGetter__(\"prop\", function  prototype (constructor)-0) === eval(\"(-1)\", <y><z/></y>)) && 0)yield;");
tryItOut("for(let y in []);");
tryItOut("let (prop) { let __noSuchMethod__ = constructor, __parent__ = *; }");
tryItOut("yield ({a2:z2});");
tryItOut("/*infloop*/do const prop; while((function::__parent__ = 3));");
tryItOut("{with(this){return; } }");
tryItOut("/*infloop*/for((#1=[#1#] >> #3={a:#3#})--; new (<y><z/></y>)((([1,2,3,4].slice).call(this.zzz.zzz, ))); @foo) /*infloop*/do {( /x/ ).applyM://h\ndo {throw *; } while((false) && 0); } while(null.throw('haha'.split));");
tryItOut("\fM:while((new Iterator()) && 0){/*infloop*/for(let ({ __parent__: ({ prototype: ({ prototype: __proto__ }), prop: delete }) }) = (++<><x><y/></x></>); (prototype); this .@*:: window.__proto__) { } }");
tryItOut("1e81; ;");
tryItOut("if(<x><y/></x> && <><x><y/></x></>) {} else break ;");
tryItOut("/*infloop*/L:for(this.__defineGetter__(\"__noSuchMethod__\", (function  __count__ () { return <x/> } ).call); <><x><y/></x></>\n; ((new Function(\"gc()\"))).call(*::*, null,  /x/g )) /*for..in*/L:for(const __count__ = (function (__iterator__) { export prototype; } ).call in 1e81) {}");
tryItOut("for(let y in []);");
tryItOut("M:with(({constructor setter: function(y) { yield y; do return; while((1e4) && 0);; yield y; } }))");
tryItOut("with({prop: Math.sin}//h\n)L:if((undefined)(window)) {return;<!--yy--> } else  if (delete window)  else {}");
tryItOut("{}");
tryItOut("__proto__ = __parent__;");
tryItOut("/*infloop*/for(var ({ __count__: @foo, __proto__: __parent__ }) = eval(\"<><x><y/></x></>\", window) instanceof !<><x><y/></x></>; new <x/>(__parent__, false); __iterator__.(1e+81)) ;");
tryItOut("if(( /* Comment */<x><y/></x>) |= (<x><y/></x> << *::*) if (<><//h\nx><y/></x></>)) L: break L;");
tryItOut("/*infloop*/for(let ({ prototype: constructor }) = this.throw(<x><y/></x>); true || <y><z/></y>; new Iterator(__parent__,  \"\" )) return;");
tryItOut("/*infloop*/while(yield (-0)){{} }");
tryItOut("throw constructor;");
tryItOut("do const __count__ = <x><y/></x>; while((((__noSuchMethod__ = <x><y/></x>) *= (this.__defineSetter__(\"__noSuchMethod__\", ((({}).__lookupGetter__).call).apply)) = (-0))) && 0);");
tryItOut("gc()\f");
tryItOut("return <><x><y/></x></>.__defineGetter__(\"function::__parent__\", [1,2,3,4].slice);");
tryItOut("with((({ constructor: ({ __parent__: constructor, __proto__: __noSuchMethod__ }), prop: __noSuchMethod__ }) = window)){let (__proto__ = <>\f<x\t><y/></x></>, __noSuchMethod__ = -1) { return; } }");
tryItOut("if(([].unwatch(\"__parent__\")).propertyIsEnumerable(\"constructor\")) {const constructor, __proto__;\t; }");
tryItOut("/*infloop*/M:do M:if(({__count__: <x/>,  get prop prototype () { yield; }  })) export *; else  if ( \"\" .__defineSetter__(\"__parent__\", (function (__parent__) { return function(id) { return id } } ).apply)) prop while( /* Comment */#1=[#1#]);");
tryItOut("do let(__parent__ = ('haha'.split).call(undefined, ), __parent__) { throw prototype; while(((\nthis.__defineGetter__(\"prop\", constructor))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in (<x><y/></x> % this)[delete [,,z1] in ]) {with({prototype: prop = this}){return  \"\" ;yield undefined; }if((\nprop)) var prop, __count__; else  if (((p={}, (p.z = window)()))) {export *;throw null; } }");
tryItOut("L: {do return; while((__parent__) && 0); }");
tryItOut("with({prop: (1e-81.__lookupSetter__(\"prototype\"))}){(false); }");
tryItOut("with({function::__count__: []})<><x><y/></x></>;\n/*infloop*/for(let ({ __proto__: ({ __count__: __noSuchMethod__, __iterator__: prop }) }) = [<x><y/></x>]; (*::*.hasOwnProperty(\"constructor\").eval(__iterator__.prop = this)); eval((uneval((prototype = <><x><y/></x></>))))) break ;\t\n");
tryItOut("try { let(prop, __count__) ((function(){throw __parent__;})()); } finally { (window); } ");
tryItOut("L:if((uneval(__parent__ >> <><x><y/></x></>))) { if (([15,16,17,18].map(function (constructor, prop) { yield  \"\"  } , (function ([y]) { })()))) {;return *; } else return;}");
tryItOut("throw StopIteration;");
tryItOut("if(new (false / [,,z1])('fafafa'.replace(/a/g, Math.sin), @foo)) { if (Object(<><x><y/></x></>, __noSuchMethod__)) {export *;return  \"\" ; }} else {yield;return <x><y/></x>; }");
tryItOut("undefined\n;");
tryItOut("return __count__.(*::*)\nif(this-- ? 1e-81 .@ false : undefined(<x><y/></x>).__lookupSetter__(\"__parent__\") ^=  /x/g (window)) { if (1e+81) {{}return arguments; } else {let constructor, __noSuchMethod__; try { 1e-81 } catch(__noSuchMethod__ if (__noSuchMethod__ = <><x><y/></x></>)) { {} }  /*\n*/continue M; }}");
tryItOut("L:do function::__proto__ = __proto__; while((033) && 0);");
tryItOut("/*infloop*/do {/*for..in*/for(prototype in //h\n(([z1])((-1))))export constructor; } while(__proto__);");
tryItOut("/*infloop*/for(const prototype; <x/>.__lookupGetter__(\"__noSuchMethod__\"); (__count__ >>= <x><y/></x>)) {this; }");
tryItOut("gc()");
tryItOut("M:while((<><x><y/></x></>.constructor = 1.2e3.unwatch(\"__parent__\")) && 0){export prototype; }");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = [z1] in (undefined)(window)) if(window) {return <y><z/></y>; } else {export *; }");
tryItOut("try { export *; } finally { continue ; } ");
tryItOut("throw this\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in [11,12,13,14].filter) {if(*::*) { if (*) (0/0);} else throw  \"\" ; }");
tryItOut("this.zzz.zzz;");
tryItOut("__iterator__.constructor = constructor;");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = ((<x/> for each (__noSuchMethod__ in true))) in <x><y/></x>) (1 for (x in []))");
tryItOut("M:switch([window.watch(\"prototype\", <x><y/></x>) if ( '' )]) { case ((__parent__ = (false ? <><x><y/></x></> : <x><y/></x>) >>>=(1.3 for (__noSuchMethod__ in 1.2e3)))(<><bbb xmlns=\" for each (prototype in __parent__ = <><x><y/></x></>) for each (each in <y><z/></y>)\">yyy</bbb></>)): /*infloop*/while([,,z1])/*infloop*/for(@foo; <y><z/></y>; function ([y]) { }) export constructor;break; default: case 3: /*infloop*/for(__proto__; window; <x><y/></x>) return;break;  }");
tryItOut("const __count__ = <><x><y/></x></>, setter = 1e81;");
tryItOut("{M:if(<y><z/></y>) throw [z1]; else  if (<x/>) return *;break ; }");
tryItOut("L:with({constructor: __proto__ = [,,] ? ({a1:1}) : <><x><y/></x></>})<y><z/></y>;");
tryItOut("if(<x/>.__lookupSetter__(\"__parent__\")) { if (__count__) ;} else let __count__ = undefined;");
tryItOut("M:if(.__noSuchMethod__.__defineSetter__(\"function::__count__\", Function) >> (new [#1=[#1#]]())((p={}, (p.z = ({/*infloop*/do 3/0 while(<x><y/></x>);yield constructor; }).__defineGetter__(\"__proto__\", ))()))) {while((+undefined) && 0){(prop); } }");
tryItOut("{throw #1#;; }");
tryItOut("do (new Function(\"var __count__ = <x><y/></x>;\")) while((__parent__) && 0);");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((function  prototype (__noSuchMethod__) { yield __parent__.__lookupGetter__(\"setter\") } )((*::*.hasOwnProperty(\"__parent__\"))))){\f /x/g  = 0.1, window = this;return true; }\n");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = __count__ = __parent__ = #1# + -1 = window.__lookupSetter__(\"__noSuchMethod__\") in (__iterator__.(([1,2,3,4].map)(false,  /x/g )) @ (function  __noSuchMethod__ (constructor)<x/>)())) {/*for..in*/(var __iterator__ = <><x><y/></x></> in constructor) function ([y]) { }; }");
tryItOut("<><ccc:ddd> </ccc:ddd></>");
tryItOut("let (function::constructor) { return; }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__iterator__%=<x><y/></x>\", [1,2,3,4].slice)){if(({a2:z2})) {let constructor = *;export *; } }");
tryItOut("let (__count__ = #1#, ({ prototype: __iterator__, constructor: [({ prop: __count__, __count__: __iterator__ }), ] }) = __parent__.constructor setter= new Function) { for(let y in []); }");
tryItOut("~");
tryItOut("if( /x/ ) { if (false) {const prop = prop; }} else {gc() }");
tryItOut("yield @foo\nconst __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in ({ constructor: __parent__ }) = false instanceof [[]]) ;");
tryItOut("(false);\nMath.sin\n");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var ({}).__lookupGetter__ >>>=<x><y/></x>.__parent__ in String()) {yield 4.; } }");
tryItOut("do throw false; while((*.__lookupSetter__(\"__count__\")) && 0);");
tryItOut("break ;");
tryItOut("/*infloop*/while(new false()){L:with({__count__: #1=[#1#]}){throw 4.; }(__noSuchMethod__); }");
tryItOut("while((__proto__ = *) && 0)gc()");
tryItOut("let __count__ = undefined, prop;");
tryItOut("let (constructor = <y><z/></y>) { return; }");
tryItOut("M:while((__iterator__ = export *;++.prop =  \"\" .__lookupGetter__(\"constructor\")) && 0){gc() }");
tryItOut(" /x/g ");
tryItOut("__parent__");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, *); <employee id=\"1\"><name>Joe</name><age>20</age></employee>; #2=[ /* Comment */this] === (({__count__: <><x><y/></x></> += constructor})).__lookupGetter__(\"__iterator__\")) with(let (__count__ = *::*, constructor = <x><y/></x>) prototype\n)/*for..in*/for(let prop = null in #1#) {return; }");
tryItOut("/*infloop*/for(let constructor; ~new (*::*)(this.__defineGetter__(\"__count__\", Function)); prop = prototype.__noSuchMethod__.prop) __parent__;");
tryItOut("/*infloop*/for(<y><z/></y>; *; <y><z/></y>) ");
tryItOut("prototype = ((constructor = (*::* if (<y><z/></y>))) = (this :: true.eval(yield * -  /x/g )))");
