
tryItOut("(__iterator__);\nwindow;\n");
tryItOut("return ([ /* Comment */false if (({}))]);");
tryItOut("/*infloop*/while((<x><y/></x>.(null)).__defineSetter__(\"__count__\", function(y) { yield y; let constructor = window;; yield y; })){gc() }");
tryItOut("if(((uneval(new String())))) {let (prop = export __proto__;, constructor) { __count__, __noSuchMethod__; }export *\n\nreturn;\n }");
tryItOut("/*for..in*/M:for(let [prototype, prototype] = (<x><y/></x>.__defineGetter__(\"prop\", 'haha'.split)) in <x/>) ");
tryItOut("/*infloop*/for(__noSuchMethod__; Math.sin >= (window.valueOf(\"number\")); false) return;");
tryItOut("if((3/0 ? <x/> : [,,z1])) { if (<bbb xmlns=\"prop = <x><y/></x>\"></bbb>) /*for..in*/for(let constructor = [[1]] in false) {}} else {yield window;{} }");
tryItOut("/*infloop*/for(__parent__ = __count__.__parent__ = (let (__proto__ = <x><y/></x>) @foo); *::*; ([__count__.__proto__ setter= (eval).apply])) {gc() }");
tryItOut("{(<><x><y/></x></>); }");
tryItOut("export *;");
tryItOut("throw window;");
tryItOut("/*for..in*/L:for(var function::__noSuchMethod__ in <><x><y/></x></>) gc()");
tryItOut("yield let (prototype, __proto__ = ({__parent__: <><x><y/></x></>}))  /* Comment */prototype;");
tryItOut("with({}) return;");
tryItOut("{<><x><y/></x></>;const __count__ = .2; }");
tryItOut("/*infloop*/do {/*infloop*/L:for(const ({ constructor: ({ __count__: constructor }), prototype: [, constructor] }) = new undefined >> *::*(#3={a:#3#} * *::*); (__parent__.constructor getter= new Function); 3/0 != *::*) {; } } while(RangeError())\n__noSuchMethod__ = -0;");
tryItOut("if(<y><z/></y>) (arguments);");
tryItOut("");
tryItOut("/*infloop*/do return; while(0.1);");
tryItOut("L:if( /x/  || 1e+81) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <><x><y/></x></>) yield; } else  if ((yield eval(\"*::*\", 1.2e3))) __noSuchMethod__");
tryItOut("try { yield <><x><y/></x></>; } finally { @foo; } ");
tryItOut("let (constructor = *::*, __count__) { const __proto__ = this; }\n");
tryItOut("/*infloop*/while(<x><y/></x>(<x/>)){L:if(__count__) throw -3/0; else  if (<x/>) {const constructor =  /x/ , __iterator__;const prop;/*\n*/ } else let __proto__ = #1=[#1#], prop = [z1]; }");
tryItOut("if((p={}, (p.z =  /x/ )())--) {return;export *; } else {{{gc()/*for..in*/for(const constructor = __count__ = null in  \"\" ) {(undefined); } } } }\n/*for..in*/for(__iterator__ =  /x/g -- in <x/>) {gc() }");
tryItOut("(new Function(\"{}\"))");
tryItOut("gc");
tryItOut("/*infloop*/for(prototype; [z1,,]; (new  /x/g () < #2=[window])) (undefined);");
tryItOut("let (constructor = @foo) { 0/0; } const __noSuchMethod__;");
tryItOut("L: /*infloop*/for(const prop = ; ; window.yoyo(<><x><y/></x></>) >>= (eval(\"throw *;\", __count__))) gc()");
tryItOut("switch(((__iterator__ *= <><x><y/></x></>))[constructor]) { default:  }");
tryItOut("L: {throw <y><z/></y>;export __count__; }");
tryItOut("switch(__noSuchMethod__) { default: yield 4.;yield <x/>;break;  }");
tryItOut("with({__noSuchMethod__: __parent__})\u2029");
tryItOut("/*infloop*/for(( /x/ .@foo); window__lookupGetter__(\"constructor\"; new 1e81) {export __noSuchMethod__; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*infloop*/M:do {var prototype = <><x><y/></x></>; } while( '' );");
tryItOut("let (constructor) { /*for..in*/for(prop = <x><y/></x> ? prop, constructor : null in *::*) {return;__noSuchMethod__ } }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prop] = function(id) { return id } | @foo.__iterator__ = <><x><y/></x></> in <x><y/></x>.isPrototypeOf((new (<y><z/></y>)()))) {\rprototype = -1; }");
tryItOut("throw (1e+81 for (<x/> in 1e4));\nexport *;\n");
tryItOut("let (prop, __iterator__ = <x><y/></x>.(prototype)) { /*infloop*/for(<x/>; null; __iterator__) ; }");
tryItOut("with({}) let(__parent__ = [[1]]) ((function(){let(__count__) { let __parent__ = this;})());");
tryItOut("if(*::*) prop else  if (prop = ({a1:1}).prototype) {this; }");
tryItOut("/*infloop*/for(var __iterator__ = window.constructor = (new (p={}, (p.z = 1e-81)())().__count__); [[[__proto__]]] = [, __proto__, ]; (((<x><y/></x>).apply).call(3/0, null))) {}");
tryItOut("while((([true])) && 0){gc()(new Function(\"yield;\")) }");
tryItOut("L:\fif(window) if(({})) { if ((<y><z/></y> === true)) {gc(){} }} else {let __proto__ =  \"\" ; } else  if (([prototype, , ({ __noSuchMethod__: ({ constructor: ({ __proto__: [] }) }) }), ({ __noSuchMethod__: [] })] = eval(\"yield  /x/ ;\", <><x><y/></x></>))) L:switch(__iterator__.__count__ setter= (#1=[#1#]).watch(/ - true.isPrototypeOf(*::*)) { case 5: Math.sindefault: break; ({}).hasOwnPropertybreak; case <y><z/></y> if (@foo): switch((@foo.prop = <><x><y/></x></>)) { case 9: throw <><x><y/></x></>;break; case (*)(window, <x/>): yield; }case 9: case (null).call(prop.([]), (({ set __iterator__ prototype (constructor, ) { yield this } , __parent__:  ''  })), <><x><y/></x></>): //h\nexport prop;break;  } else {L:if(1e+81) return; else  if (window) gc()prototype = undefined, __noSuchMethod__ = *::*; }");
tryItOut("M:if(({ __iterator__: __iterator__ }) = []) throw <x><y/></x>\n");
tryItOut("/*infloop*/M:while(<><x><y/></x></> | <y><z/></y>)constructor");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"yield false;\")))--) /*for..in*/M:for([__count__, prop] = (eval(\"x::__noSuchMethod__\", [,,z1]))\f in 3/0) return; else {return (false()); }");
tryItOut("/*for..in*/M:for(const __count__ in ((Math.sin)())){}");
tryItOut("/*for..in*/for(var constructor = let (constructor, __parent__) (<x><y/></x>) in +window) if((({prop: ((let =  /x/ ))(033 -= #1=[#1#]) }))) {/*for..in*/for(var [__parent__, __parent__] = true in 1e81) {;{} } } else  if (prop = <><x><y/></x></>) yield;");
tryItOut("/*for..in*/for(const constructor.__count__ in  '' ) gc()");
tryItOut("/*for..in*/for(const constructor = new (({prop:  /x/ }))(let(__noSuchMethod__ = [].__defineSetter__(\"__count__\", function  __parent__ () { yield this } )) { throw StopIteration;) in __parent__ += this) return <><x><y/></x></>;");
tryItOut("function (__count__) { yield  /x/g  } \n");
tryItOut("/*infloop*/do {({}).__lookupGetter__(<><x><y/></x></>); } while(((__iterator__ = <><x><y/></x></>) - (prototype.(#3={a:#3#}))));");
tryItOut("/*for..in*/M:for(let Math.sin()['__noSuchMethod__'] in <>\r<{__proto__}> </{__proto__}></> % __count__ >>= 4.) {do {({}).hasOwnProperty } while(([(4. |= [(-1)\r])]) && 0); }");
tryItOut("return  \"\" \n");
tryItOut("with(<x/>){throw  /x/ ;{} }");
tryItOut("do throw StopIteration; while((gc()) && 0);");
tryItOut("/*for..in*/for([prop, __parent__] = (p={}, (p.z = [this])()) in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {return 4. }");
tryItOut("with({}) { throw  \"\" ; } ");
tryItOut("/*for..in*/L:for(var __parent__ = window in delete) {(__parent__); }");
tryItOut("while((yield [1].watch(\"prototype\", new Number()) &= true.yoyo(0x99[arguments])) && 0)return;");
tryItOut("do {let __iterator__;\f } while((this.__defineGetter__(\"__iterator__\", /a/gi)) && 0);");
tryItOut("/*for..in*/L:for(let __proto__(<x><y/></x>) in ((Function)(null = __proto__)))yield true;");
tryItOut("/*for..in*/({ prototype: [, ] })for(var prototype = ({ __parent__: (__iterator__), __count__: __count__ }) = ((*)(prototype, prop = window) = ) in (eval(\"(<x><y/></x>).apply()\", __count__))) {export function  * () { yield <x/> }  }");
tryItOut("L:while((prototype) && 0){prop = window; }");
tryItOut("switch(4.) { case <y><z/></y>:  }");
tryItOut("(* & this);");
tryItOut("__count__ = prop;");
tryItOut("if( \"\" ) {yield this;if(new (this)( \"\" )) {export *;({}).hasOwnProperty } else {{}; } } else  if ((<x><y/></x>.(<x/>)) .@*::  \"\" .@*) {yield <><x><y/></x></>;yield <x><y/></x> } else if(__parent__.__parent__ = [,]) break ; else  if ( /* Comment */try { (__iterator__ = window) } finally { export prop; } (false, <x><y/></x>).unwatch(\"__proto__\")) {yield window; }");
tryItOut("continue L;");
tryItOut("if( /x/ ) {__noSuchMethod__ = undefined;return; } else  if ( \"\" ) (<x><y/></x>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */__count__");
tryItOut("return try { (function ([y]) { }); } finally { var __iterator__ = 3/0; } ;");
tryItOut("switch(@foo) { case *: yield;export *;default: yield;case [[1]]: export constructor; }");
tryItOut("L: {while((this) && 0){ /x/ ;(__parent__); } }");
tryItOut("M:with({prop: (uneval('fafafa'.replace(/a/g, (<><x><\fy/></x></>).__defineSetter__)))}){(<><x><y/></x></>);Math.sin }");
tryItOut("while((__iterator__.__parent__ &= (<><x><y\t/></x></> += <x><y/></x>)) && 0){(this);L:if(((__parent__ = __count__).__defineGetter__(\"__count__\", *::*))) {return [z1,,]; } else {[]; } }");
tryItOut("if((__noSuchMethod__ = try { export *; } finally { yield <y><z/></y>; } )) { if ((Math.sin)(<><x><y/></x></>)) {throw true;{} }} else {break ;Math.pow }");
tryItOut("with(window){ }");
tryItOut("if((.__lookupSetter__(\"__noSuchMethod__\"))) {const constructor;L:if((<x><y/></x>.__noSuchMethod__)) { if ((false.isPrototypeOf( /x/g ))) {return -3/0;yield (-0); } else {break L; }} }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(({ __iterator__: __iterator__ }) = __count__) { if (({__count__:  /x/g  + @foo})) {let(({ constructor: __iterator__ }) = constructor.@*) ((function(){throw StopIteration;})());var prop; } else M:if(-3/0) { if (x::prop) {break ;((function ([y]) { })()) }} else \t{yield  '' ; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in (this.__defineSetter__(\"__iterator__\", (1 for (x in []))))) {({}); }");
tryItOut("/*infloop*/M:for(<><x><y/></x></>; __count__; <x><y/\t></x>) {\t;throw -0; }");
tryItOut("{var __noSuchMethod__ = <x><y/></x>, __noSuchMethod__ = 5.0000000000000000000000;(@foo); }");
tryItOut("if((__count__ = function::function::prop.valueOf(\"number\") >> [15,16,17,18].filter(__proto__, #1=[#1#]))) {gc()yield; } else  if (let (__iterator__ = <><x><y/></x></>, prop) prop()) gc() else {var __count__ = <><x><y/></x></>; }");
tryItOut("L:if((let (__parent__ = null, constructor) __proto__) + [11,12,13,14].sort.constructor) {\n;throw this; } else  if (window() = (<><x><y/></x></>.unwatch(\"\"))) {1e+81; } else const __noSuchMethod__;");
tryItOut("{let constructor = {};throw  \"\" ; }");
tryItOut("/*infloop*/\fM:do return; while((({__iterator__: ({}) })) %=  /* Comment */<x/>);");
tryItOut("with({__count__: *::*}){1e+81; const prototype;export constructor\n }");
tryItOut("/*for..in*/for(const __proto__ = window.constructor in [new <><x><y/></x></>(0x99, null)]) {yield window >> null ? null : <x><y/></x>;return\n const __parent__; }");
tryItOut("{export *; }");
tryItOut("return\nif(((Function).apply)(this.zzz.zzz, (yield <x><y/></x>).__iterator__ = ((uneval(@foo))))) { if ((yield ( '' --).unwatch(\"prop\"))) with([,,] || <x><y/></x>)var __iterator__ = <x/>, __iterator__ = null;} else ;");
tryItOut("if(({a1:1})) { if ([[]]) \f{var __count__, prototype = null; }} else { }");
tryItOut("export *;");
tryItOut("/*infloop*/for(const __parent__; (new this.__defineGetter__(\"__noSuchMethod__\", function (__noSuchMethod__) { gc() } )(window))[__noSuchMethod__.__defineGetter__(\"__noSuchMethod__\", ([1,2,3,4].map).apply)]; ~this.__defineSetter__(\"__noSuchMethod__\", undefined)) {if(__iterator__.(*::*)) { if ( /* Comment */constructor) continue L; else var __count__ = constructor;} }");
tryItOut("L:with({0x99: (this.zzz.zzz.hasOwnProperty(\"__noSuchMethod__\"))}){ }");
tryItOut("var __parent__, __noSuchMethod__ = <y><z/></y>;return ( '' [ \"\" ]);");
tryItOut("L:do ; while(((constructor = (p={}, (p.z = [z1,,] * window)()))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__proto__ in 'fafafa'.replace(/a/g, (null).apply)) {/*for..in*/L:for(let __count__ in  /x/ ) (constructor); }");
tryItOut("with({__proto__: <y><z/></y>}){eval }");
tryItOut("let (__proto__) { return; }");
tryItOut("__proto__");
tryItOut("L:with({__parent__: (p={}, (p.z = null)())}){return }");
tryItOut("gc()\n");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = let __iterator__, __proto__) prototype = <x/>.__lookupSetter__(\"__parent__\")constructor  in window.prop = ({__noSuchMethod__: __parent__, __parent__: arguments })) {[,];/*for..in*/for(var __noSuchMethod__ = this in undefined) {eval } }");
tryItOut("/*infloop*/while([11,12,13,14].map)(<x/>);");
tryItOut("M:while((false) && 0){var __proto__ =  /x/g , function::prop;return null; }");
tryItOut("/*infloop*/L:for(new Function(__proto__, <x/>); __noSuchMethod__+=(function ([y]) { })(); yield 0) var __proto__; const __proto__;");
tryItOut("__noSuchMethod__ = __proto__\n");
tryItOut("/*infloop*/for(let ({ __proto__: ({ constructor: ({ __parent__: ({ __iterator__: [, ({ __proto__: ({ constructor: __iterator__ }) }), , , ], prop: __proto__ }), __parent__: __parent__ }), __count__: ({ __noSuchMethod__: [], __noSuchMethod__: ({ __parent__: prototype }) }) }), __parent__: [, ({ __iterator__: __count__, prop: ({ yield: ({ prop: [__noSuchMethod__, ({ constructor: constructor }), ({ __parent__: __proto__ }), function::prototype], constructor: (__iterator__) }) }) }), ({ prop: __proto__.constructor, prop: ({ ({ __iterator__: __count__ }): __noSuchMethod__ }) }), ({ __noSuchMethod__: ({ __count__: ({ constructor: ({ __parent__: ({ __iterator__: __iterator__, __proto__: prototype }) }) }), __iterator__: prototype }), __proto__: ({ constructor: (<><x><y/></x></>)[[,]] }) })] }) = ((1e81 == __noSuchMethod__) ? *::* :  /x/ .throw(undefined).watch(\"prototype\", [1,2,3,4].slice).valueOf(\"number\")); __parent__ = ((RangeError( /x/g , <><x><y/></x></>) + ({__parent__ getter: function(q) { return q; },  set prototype constructor () { return <x><y/></x> }  })).yoyo('fafafa'.replace(/a/g, ({}).hasOwnProperty))); ({ prototype: ({ __parent__: __parent__ }), __proto__: ({ prototype: __proto__, constructor: __iterator__ }) }) = (yield function:: /x/g )) with([,] if ([,,z1])){;continue ; }");
tryItOut("L:if(-null ? <x><y/></x> : <><x><y/></x></>.throw([(__noSuchMethod__.valueOf(\"number\"))(*.unwatch(\"__parent__\")) if (null)])) {{yield constructor;constructor, __proto__; }yield 3.141592653589793; } else {L:while((<><x><y/></x></>) && 0){gc()gc() } }");
tryItOut("/*infloop*/while((((({__noSuchMethod__: @foo})))()))return;");
tryItOut("/*infloop*/do {return <x><y/></x>; } while(__noSuchMethod__ = <x><y/></x> @ +this);");
tryItOut("/*for..in*/for(let constructor = (#0=({__parent__: <><x><y/></x></>}) @ let (__noSuchMethod__ = @foo, constructor = this) [z1,,]) in (false).apply) {/*for..in*/for(<x/>['__noSuchMethod__'] in ((({}).__lookupGetter__)((gc)()))){(<x/>);return ({a1:1}); }{((-0)); } }");
tryItOut("/*for..in*/for(let prop in @foo) return;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in 0/0) ({}).__lookupGetter__");
tryItOut("if(#1#) {*::*; } else  if (this.__defineGetter__(\"constructor\", ({}).__lookupGetter__)) return; else {{}continue M; }");
tryItOut("(<x><y/></x>);");
tryItOut("{; }");
tryItOut("/*infloop*/M:for(({prototype getter: [1,2,3,4].map }); ((window.__defineSetter__(\"constructor\", ({}).hasOwnProperty)) .@x:: ({constructor: __count__, prop: null })); new ([1,2,3,4].slice)(\t~3/0[*], (uneval( \"\" )))) throw  /x/g \n");
tryItOut("prototype = prop;");
tryItOut("");
tryItOut("{{;with(((/a/gi).call([,,z1], ))){const constructor = __noSuchMethod__, __noSuchMethod__;return; } }/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in new @foo(-1(__parent__)).__defineSetter__(\"set\", function  __parent__ ([]) { yield (<x><y/></x> =  \"\" ) } )) {; } }");
tryItOut("L:if([__proto__] = this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; throw *;; yield y; })) var prototype, prop = <x><y/></x>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */( in -(false.watch(\"__noSuchMethod__\", (<y><z/></y>).watch)())) {\tif(<><x><y/></x></>.isPrototypeOf//h\n(undefined).isPrototypeOf(1.2e3)) {return 033;if(<><x><y/></x></>) { if (<x><y/></x>\t) {throw <y><z/></y>;return  '' ; } else {}} } }");
tryItOut("do export prototype; while(((<x><y/></x>.__noSuchMethod__ = window)) && 0);");
tryItOut("gc()\nexport *;\n");
tryItOut("let (({ __parent__: new (<x/>)()['prototype'] })) { for(let y in []); }");
tryItOut("with({__iterator__: (function(q) { return q; })})if([window - 4.].some(null)) export constructor; else  if ('fafafa'.replace(/a/g, (constructor).call)) {return; }");
tryItOut("/*for..in*/M:for(const __parent__ in ((((-1)).__defineSetter__)(~<><x><y/></x></>)))const __iterator__ = null;");
tryItOut("{yield *::*; }\nwhile((window) && 0){L: export __iterator__;/*infloop*/do var __noSuchMethod__ = *::*; while( '' ); }");
tryItOut("{try { ; } catch(prop) { return [1]; }  }");
tryItOut("/*infloop*/M:while(((function(y) { yield y; return *;; yield y; }).call(<><x><y/></x></>, )))while((function ([y]) { } @ 3.141592653589793) && 0){var __noSuchMethod__, __count__;return <x><y/></x>; }\n");
tryItOut("/*infloop*/for((null.__defineSetter__(\"set\", prototype, prototype))[function::__count__ = prototype]; prop =  /x/  <  '' .unwatch(\"__proto__\"); *::*) window;");
tryItOut("if(<x><\ty/></x>) { if (__parent__) (<x><y/></x>); else {return __noSuchMethod__;({a1:1}); }}");
tryItOut("M:if(((p={}, (p.z = <y><z/></y>)()))--) break ; else  if (__iterator__ = constructor[<x/> != this]) /*for..in*//* nogeckoex bug 349964 */M: for  each(const __parent__ in <><x><y/></x></>) gc() else {yield <><x><y/></x></>;{} }");
tryItOut("yield __proto__;\nreturn;\n");
tryItOut("if((new Boolean(\n<x><y/></x> if (<x/>).__defineGetter__(\"__proto__\", (<><x><y/></x></>(3, <><x><y/></x></>))) instanceof __parent__.__noSuchMethod__ = <x/>, yield eval(\"__noSuchMethod__\", [,,].__noSuchMethod__)))) {if(3/0) yield; else ; const constructor;__proto__ = <><x><y/></x></>, prop = <>/*\n*/<x><y/></x></>; } else  if ('fafafa'.replace(/a/g,  (__proto__) /x/ .throw(null))) {return;var constructor = prop; } else {; }");
tryItOut("L: yield __iterator__;");
tryItOut("{ }");
tryItOut("if(window) { if (<x/>) export *; else {gc() }}");
tryItOut("/*for..in*/L:for(const constructor = (eval(\"(function ([y]) { })().__count__(__parent__ = window for (__parent__['prop'] in 3.141592653589793) for each (__iterator__ in window), <y><z/></y>)\",  \"\" )) in ({ prototype: ({ __parent__: __proto__, __proto__: __noSuchMethod__ }) }) = new (*)(<y><z/></y>, undefined).__lookupGetter__(\"__proto__\")) /*for..in*/L:for(const (__proto__ = window)(<x/>()) in ((function(q) { return q; })((prototype =  \"\" ))))continue L;");
tryItOut(" const __parent__;");
tryItOut("do {/*for..in*/for(let ((let \f(__parent__) this))((this.__defineSetter__(\"__noSuchMethod__\", ('haha'.split).call))) in this.__defineGetter__(\"__iterator__\", Math.pow)) throw  '' ; } while((#2=({__count__: 1e81}).__lookupGetter__(\"( /x/g )([[1]]) = __count__.__noSuchMethod__ setter= (1 for (x in []))\")) && 0);");
tryItOut("switch( /* Comment */this) { default: return null;break; break; break; case 2: case 6: break; case 2: break;  }");
tryItOut("/*infloop*/M:for(var __count__; [this.__defineGetter__(\"__proto__\", (<><x><y/></x></>).watch)].some(0/0\n); (__count__\n)) {/*for..in*/for(var [__iterator__, __count__] = (__count__ = 0) in *::*) {default: break; return prop;break; case 5: break; break; case  \"\" : case __count__: {}break; yield *;case 3: {}break; break; ({}).hasOwnPropertycase <y><z/></y>: break; case this: ( '' );\fconstructor, __noSuchMethod__ = <y><z/></y>;break; case <x><y/></x>: export *;break; let __iterator__, __iterator__; }throw [].eval(<><x><y/></x></>); }");
tryItOut("return\n\nreturn  /x/ ; const __noSuchMethod__");
tryItOut("#3={a:#3#};");
tryItOut("if(undefined) __proto__, prototype else  if (typeof @foo) export __noSuchMethod__;");
tryItOut("for(let y in [5,6,7,8]) let(({ prototype: ({ __proto__: prototype, __iterator__: [__iterator__] }), yield <x/>;: ({ prototype: ({ __count__: ({ __parent__: __parent__ }) }), __noSuchMethod__: ({ __noSuchMethod__: ({ __iterator__: __parent__, __count__: constructor }) }) }) }) = __noSuchMethod__.watch(\"__count__\", ({}).__lookupGetter__)) ((function(){throw constructor;})());");
tryItOut("return <><x><y/></x>\t</>;");
tryItOut("return eval(\"/*for..in*/M:for(let window in *) .2;\", *::* =  /x/g );");
tryItOut("/*infloop*/do  while(new (( /x/g  for (constructor in this)).watch)(__proto__, ({ __parent__: function::prototype, constructor: __parent__ }) = ({constructor: <x><y/></x>})).*);");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const  /* Comment */__iterator__['prototype'] in (@foo)[[[]]] | new this(<x><y/></x>, *)) /*infloop*/for(var ({ prototype: __proto__ }) = <y><z/></y>; this.zzz.zzz; (prop * <x><y/></x>)) {yield;constructor; }");
tryItOut("break L;");
tryItOut("L: if(undefined < constructor) { if (null.prototype) {thisdefault: export *;break; case 7: {}case 0: function (__proto__, __count__)*::* } else export __parent__;}");
tryItOut("/*for..in*/for(const [prop, __noSuchMethod__] =  /* Comment */<y><z/></y> in .2) {let function::__parent__, __noSuchMethod__;\tvar constructor; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in ((('haha'.split).call)((true *= <y><z/></y>)))){yield @foo; }");
tryItOut("prototype = prototype;");
tryItOut("if(({a2:z2}).__defineGetter__(\"constructor\", ([1,2,3,4].map).apply))  else  if (__count__-=<><x><y/></x></>) { } else (1 for (x in []))/*for..in*/for(var [__parent__, __proto__] = <x><y/></x>.(window) in <x/>) export *;");
tryItOut("with([( ? * : ({}))]){/*for..in*/for(__count__ = <><x><y/></x></> in <x><y/></x>) export __parent__; }");
tryItOut("switch(constructor) { case 5: (new Function).applybreak; default: ;break; break; case  /x/ : export *;export *; }");
tryItOut("with([1,,]){break L;yield; }\f");
tryItOut("do export *; while(((false.((<x/>.@*)))) && 0);");
tryItOut("/*for..in*/for([constructor, constructor] = (constructor.(prop)) in window !== this !== __noSuchMethod__.valueOf(\"number\")) {export __parent__; }");
tryItOut("{/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; <><x><y/></x></>) break ;L:if(null) {; } else  if (<x><y/></x>) return <x/>; }");
tryItOut("(*::*); const __count__;");
tryItOut("L: {}");
tryItOut("/*infloop*/for(let [, ({ __iterator__: constructor })] = 3.valueOf(\"number\"); this; this[undefined]) yield <><x><y/></x></>\n");
tryItOut("if( /x/g ) { if (({ __noSuchMethod__: __proto__ }) = <><x><y/></x></>.unwatch(\"\")) (false);export __count__;} else let __parent__ = (yield true);");
tryItOut("return (__noSuchMethod__);");
tryItOut("with({}) { throw  /x/ ; } ");
tryItOut("if(((*::*).__defineSetter__ === <x/>) @ (new  '' (<x/>) if (<x/>))) {if(!<><x><y/></x></>) Math.pow else return;__iterator__, __count__; } else  if ( /x/g ) {M:if(__count__ = <x/>) {gc } else  if (( '' .watch(\"prop\", function () { return <>\n<x><y/></x></> } ))) {} } else {{}; }");
tryItOut("/*for..in*/for(var [__iterator__, __noSuchMethod__] = 1e81 in prop: <x><y/></x>) yield;");
tryItOut("/*for..in*/for(var constructor in 1.3 /= <x><y/></x>) return");
tryItOut("/*for..in*/for(const [__proto__, prototype] = false in <><ycontinue M; const prop; /></x></>) (window);");
tryItOut("with(((1 for (x in [])))(@foo, *::*))yield;");
tryItOut("/*infloop*/for(let __parent__ =  ''  % window; false; (new (<y><z/></y>)(1.3, *))) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(prototype; {}; @foo ? #1=[#1#] : window) {return prototype; }{(null);yield; }");
tryItOut("if(1e+81) { if ( /x/ ) {gc }} else {prototype = <><x><y/></x></>; }");
tryItOut("let (__iterator__ = void __proto__ = constructor, __noSuchMethod__) { let ([, , , [prop, __proto__, , ], ], ({ __noSuchMethod__: __proto__, __parent__: __parent__ })) { throw  /x/ ;' } }");
tryItOut("M:do {export *;L: {let prop; }; } while((new (eval)(<><x><y/></x></>) && <x><y/></x> == false) && 0);");
tryItOut("/*for..in*/for(var __proto__ = ( /* Comment */undefined) in <y><z/></y>) {{}let __iterator__ = <y><z/></y>; }");
tryItOut("const constructor, __parent__;");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in  '' ) {__parent__ =  '' , __noSuchMethod__;<x><y/></x>; }");
tryItOut("do {(-0)M:do __parent__; while((0/0) && 0); } while(((__noSuchMethod__.(this.@*))) && 0);");
tryItOut("let (prototype = ().hasOwnProperty(\"prototype\"), constructor) { L:if(3/0 @ __noSuchMethod__) yield #3={a:#3#}; else  if ([11,12,13,14].some) let __iterator__ = <><x><y/></x></>; else {export prop;{} } }");
tryItOut("try { for(let y in []); } catch(__noSuchMethod__) { this.zzz.zzz; } finally { throw __count__; } ");
tryItOut("let (__parent__ = (__iterator__.prototype), [] = [11,12,13,14].map) { /*infloop*/for(let prop; (prop|=(this.prototype)); __iterator__ = <><x><y/></x></>) gc() }");
tryItOut("var __iterator__;");
tryItOut("/*infloop*/L:while(prop = this)yield;");
tryItOut("/*infloop*/M:for(const prototype = __proto__; <><x><y/></x></>; *::*) return;");
tryItOut("{if(__proto__ =  \"\" ) { if (__count__ = <x/>) {( '' );(prototype); } else export __parent__;}yield <><x><y/></x></>; }");
tryItOut("if((export *)) ; else /*for..in*/for(const __iterator__ = (this.zzz.zzz) in <x/>) {<x><y/></x>; }");
tryItOut("if(__parent__ = \f[(Iterator(arguments.__lookupSetter__(\"__count__\"))) for (prop in new 'haha'.split(5.0000000000000000000000)) for ( for (__iterator__ in <y><z/></y>) if (1.3) in  '' )]) {export __proto__;; }");
