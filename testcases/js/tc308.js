tryItOut("/*infloop*/while(<xxx>{__count__}</xxx>);");
tryItOut("{continue ;yield __parent__; }");
tryItOut("while((__noSuchMethod__, constructor) && 0){/*infloop*/while(\t*::*)export __iterator__; }");
tryItOut("yield [prop.__parent__ getter= function(q) { return q; }].some(Function);");
tryItOut("export __proto__;");
tryItOut("/*infloop*/for(var [({ prop: [, , , ] }), [, [[__iterator__, , , __count__, __proto__]], , , null], [, ]] = eval(\"let (prop, __proto__ = @foo) { const prop, prototype; }\", this); (this--); this.__defineGetter__(\"function::__iterator__\", Math.pow)) /*for..in*/for(let __parent__ in ((function (prop)constructor = prototype)(('haha'.split(<><x><y/></x></>))[((p={}, (p.z = *::*)()))])))/*infloop*/for(let prop = true; <><x><y/></x></>; []) throw (-0);");
tryItOut("(({}))");
tryItOut("/*for..in*/M:for(var __iterator__ in (((3/0).__defineSetter__)(yield this.__defineGetter__(\"prop\", ({}).hasOwnProperty)))){/*infloop*/for(let [, ({ prototype: [__noSuchMethod__] }), ({ __count__: __noSuchMethod__, __iterator__: ({ __parent__: __count__, constructor: __parent__ }) }), ] = (([z1]).watch).call(<x/>, ); constructor; null.propertyIsEnumerable(\"constructor\")) {gc()return  \"\" ; }\t }");
tryItOut("const prototype = <x><y/></x>;");
tryItOut("/*infloop*/for(({prop: false.watch(\"prop\", (1 for (x in [])))}); 'fafafa'.replace(/a/g, (function  __count__ (prototype) { yield undefined } ).call); prop = [,,] ? <y><z/></y> : <x/> .. window) __iterator__ = <y><z/></y>, prop = function::constructor;");
tryItOut("/*infloop*/do {;'haha'.split } while([15,16,17,18].filter(function(y) { yield y; (<y><z/></y>);; yield y; }, this.__defineSetter__(\"constructor\", /a/gi)));");
tryItOut("/*infloop*/for(var prototype; constructor.(__iterator__.__proto__); (((__count__ in this.*) + )<bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>)) /*for..in*/for((constructor) in ({})) {export constructor; }");
tryItOut("with(1.3.__lookupSetter__(\"__iterator__\")){__count__, __iterator__ = __proto__;throw __count__; }");
tryItOut("with((\n(__count__ = prototype)) ? 1.2e3 : +__iterator__ = \t<x><y/></x>)while(((new <x><y/></x>(window, __parent__)\n)) && 0)gc()");
tryItOut("Math.sin");
tryItOut("new Function const __proto__;");
tryItOut("with({}) __noSuchMethod__ = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in #3={a:#3#})  for each (constructor in (<x><y/></x> && ({ set constructor __count__ (prototype) { return  /x/  } , __noSuchMethod__ setter: Math.pow }))) for ([] in ([].throw(*::*))) for (1e-81 in <><x><y/></x></>) if ( '' )");
tryItOut("{var __noSuchMethod__ = <x><y/></x>, __proto__ = false;gc() const constructor;yield 3; }");
tryItOut("/*infloop*/do {yield undefined; } while(new true());");
tryItOut("__iterator__ = setter;\f");
tryItOut("/*infloop*/for(const 3 === false[<bbb xmlns=\"<><>__noSuchMethod__.eval( \"\" )</></>\"></bbb>]; ((yield  /x/ ) .@x:: [11,12,13,14].some); 1e81 %  /x/g ) {const __iterator__, constructor; }");
tryItOut("{if(((constructor = window))()) {[1];gc() } else  if ((constructor = prop) .. (p={}, (p.z = constructor)())[<x><y/></x>.@foo]) export *;/*infloop*/do {/*for..in*/for(var ((Math.pow()))(__proto__%=<x><y/></x>) in <><x><y/></x></>) constructor } while(yield  var ); }");
tryItOut("{export constructor;(<x><y/></x>).apply }");
tryItOut("{this.zzz.zzz; }");
tryItOut("yield;");
tryItOut("L:if((<x><y/></x>--)) yield ; else  if (<>__count__.function::prop</>) {/*for..in*/for([constructor, __proto__] =  in window) {break M; } }");
tryItOut("if(constructor) gc else return;");
tryItOut("if([1]) {}");
tryItOut("if(__parent__) /*infloop*/for(let constructor; this | true; (__parent__ = <><x><y/></x></>)) {with(({a1:1}))export __count__; }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("{}\n");
tryItOut("if(__count__ = <y><z/></y>) export __proto__; else  if (new Exception()) [1,2,3,4].slice else {var __count__ = window;(0/0); }");
tryItOut("/*for..in*/for(const __iterator__ = [([window for (__proto__ in <x><y/></x>)])] in  '' ) {L:  }");
tryItOut("yield #3={a:#3#};");
tryItOut("L:if(null.constructor = <x><y/></x>[\tfunction::constructor]) {const __noSuchMethod__ = false, prototype = <><x><y/></x></>;function(q) { return q; } } else {return [,,];let (__count__ = *, __count__) { export *; } }");
tryItOut("yield;\n;\n");
tryItOut("M:do {throw __parent__;return; } while((__count__ = 3.141592653589793) && 0);");
tryItOut("switch(([1,,].__lookupSetter__(\"__iterator__\"))) { case 1: throw prototype;break; case 7: case 1: default: return;break; case 8: (<x/>).watch\nyield *;\n }");
tryItOut("{(<><x><y/></x></>); } const __parent__; const __parent__;");
tryItOut("constructor = __iterator__;");
tryItOut("({ __noSuchMethod__: ({ constructor: prototype, constructor: prototype }) }), constructor");
tryItOut("/*for..in*/for(const [__proto__, constructor] = __parent__ = __proto__.throw(((<><><x><y/></x></></> >>= this.zzz.zzz if ((yield <><x><y/></x></>))))) in ({ set __proto__(prototype) { return (({prop setter: function (__parent__, __parent__) { break ; } ,  \"\"  getter: <x/> })) } , constructor: <x><y/></x>.__defineGetter__(\"__iterator__\", <x><y/></x>) })) {{\nprop = *::*;\t\n } }");
tryItOut("M:if(([[]].__lookupSetter__(\"prototype\"))) {1.3; } else  if (Iterator( /x/g )) /*for..in*/for([__proto__, __noSuchMethod__] = <x><y/></x> in window) throw function(id) { return id }; else gc()");
tryItOut("{}");
tryItOut("{};");
tryItOut("let(({ prop: [, , , prototype], constructor: ({ prototype: __count__, prototype: prop }) }) = ({prototype: this }), [] = __noSuchMethod__ = 1e81) ((function(){return;})());");
tryItOut("L:if((<x><y/></x> ? __noSuchMethod__ : constructor)) constructor else  if (false(<x><y/></x>)) yield;");
tryItOut("return\n");
tryItOut("null;");
tryItOut("return yield this;");
tryItOut("do {let __iterator__;export __proto__; } while(((1e81.__defineGetter__(\"prop\", gc))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((function(y) { yield y; gc(); yield y; })(window).__noSuchMethod__ in <x/>) {let __noSuchMethod__ = <x><y/></x>; }");
tryItOut("/*infloop*/for(var prop; <x><y/></x> ? <><x><y/></x></> : __noSuchMethod__; !true)  { return undefined } ");
tryItOut("if(#3={a:#3#}) { if (function(id) { return id }) { \"\" ; }} else yield \f<><x><y/></x></>;");
tryItOut("with({prop: __parent__ = 1e+81}){export constructor;; }");
tryItOut("if((this.__defineSetter__(\n\"prototype\", [1,2,3,4].map))) yield; else let (__count__ = new (<><x><y/></x></>)(<y><z/></y>, 1e81)) { M:while(([@foo]) && 0){continue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var null['__proto__'] in ({a2:z2})[<x><y/></x>]) if([z1,,]) {export prop;({}).hasOwnProperty else ");
tryItOut("L: {(this); }");
tryItOut("while((<x/>) && 0){/*for..in*/for(const __parent__ in -1) export __parent__; }");
tryItOut("if([1,2,3,4].map(({prop: (),  set __parent__ __noSuchMethod__ (\r__parent__) { yield; }  }))) {*; } else  if (this) \freturn 4.");
tryItOut("M:if((new (<x/>)(window) > (function  __count__ (prototype, __iterator__) {  } ).call(eval(\"<x><y/></x>\", function::prototype), \n))) {<x><y/></x> } else  if ((let (__iterator__, __count__)  /x/g ).propertyIsEnumerable(\"prop\")) ([1,2,3,4].slice).apply else {let ([] = yield <x><y/></x>) { yield; }export __count__; }");
tryItOut("L:if(__proto__) export *; else yield;");
tryItOut("this.zzz.zzz;");
tryItOut("switch((<y><z/></y>.__defineSetter__(\"constructor\", function\f  prototype (__parent__, prop)function(id) { return id }))) { case <x><y/></x>.__defineSetter__(\"__count__\", (1 for (x in []))): break;  }");
tryItOut("gc()\n{}\n");
tryItOut("let (__iterator__ =  '' , __iterator__ = <x/>) { (<y><z/></y>); }");
tryItOut("{var __count__ = ;/*infloop*/for((-*::*); <x><y/></x> * 3; (eval(\"var __iterator__;\", <x/>))) {__iterator__, ; } }");
tryItOut("L:if((({ x::__count__: constructor }) = eval(\"throw <x><y/></x>;\", prototype))) (<x/>); else  if (((prop) = constructor = <><x><y/></x></>\f)) {break ;()'; } else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype(window) in __parent__) yield prop;");
tryItOut("throw -3/0;\nyield;\n");
tryItOut("{({ __iterator__: constructor }) }");
tryItOut("if(this) {gc()const __noSuchMethod__; }");
tryItOut("/*for..in*/for([__parent__, __count__] = [prototype, __noSuchMethod__, , constructor, function::prop] in (-.2)) {Math.sintry { for(let y in []); } catch(__parent__) { for(let y in [5,6,7,8]) return; }  }");
tryItOut("/*infloop*/while(this.valueOf(\"number\") -= <x><y/></x>.propertyIsEnumerable(\"prototype\").constructor -= *)while((undefined) && 0)continue L;");
tryItOut("if(prop) { if (<x/>\r(window, this)) export prop;} else {\nbreak ;yield *; }");
tryItOut("while(( /x/ ) && 0)\t{return constructor;switch(<y><z/></y>) { default: break; break;  } } }");
tryItOut("return;");
tryItOut("/*for..in*/for(var void  \"\" .__count__ in ((new __count__((-1)\r))((function::prototype =  /x/g ))))<y><z/></y>");
tryItOut("if(#0=[(this !== [z1])]) { if (__count__.constructor) {with({__parent__: (__noSuchMethod__)()})switch(null) { case [1,,]: yield;{}break;  }var __proto__, __proto__; } else {return -0, false; }}");
tryItOut("/*for..in*/M:for(var __iterator__ in prop = *::*.__count__ = *::*) ( '' );");
tryItOut("__parent__ = function::constructor;");
tryItOut("{if((-1)) yield; }");
tryItOut("with([])var prototype = arguments, __iterator__ = true;");
tryItOut("with({prototype: [function ([y]) { }]}){gc()throw *; }");
tryItOut(";\nreturn this;\n");
tryItOut("switch(__iterator__) { default:  }");
tryItOut("L:if((p={}, (p.z = [[]])())) with(<><x><y/></x></>){return; } else  if (this.__defineSetter__(\"__iterator__\", function  __iterator__ (__iterator__, __iterator__) { yield <x/> } )) {Function }");
tryItOut("(<y><z/></y>).__defineSetter__ const prototype;");
tryItOut("{__count__ = this; }");
tryItOut("L:switch(__parent__ = @foo) { case <y><z/></y> ^= 0: export *\t;break; break;  }");
tryItOut("/*infloop*/for(var [({ constructor: __count__ }), , ({ constructor: ({ __count__: ({ __count__: function::constructor }) }) }), , ] = __noSuchMethod__.prototype setter= ({}).hasOwnProperty; (<><x><y/></x></> << this -= *); !) true;");
tryItOut("/*for..in*/for(const __iterator__ in (((new Function(\"if(__proto__.__parent__ = undefined.__defineGetter__(\\\"__noSuchMethod__\\\", <x/>)) continue L;\")))(<><x><y/></x\t></>.valueOf(\"number\")))){for(let y in []); }");
tryItOut("gc");
tryItOut("switch((new x::prop(typeof this)(<xxx>{__proto__}</xxx> || prop.constructor = __count__.constructor))) { case <><x><y/><\f/x></>(): break; case 3: /*infloop*/for(let __proto__; new ((1 for (x in [])))(); function  __noSuchMethod__ (__count__) { {} } ) /*infloop*/do __parent__ while((__noSuchMethod__.__noSuchMethod__));break; break; case (p={}, (p.z = false)()) /= <x><y/></x> ^= <><x><y/></x></>: break; if(void __count__ = (-0).__noSuchMethod__ = <x/>) { if (this.__defineGetter__(\"prototype\", <x><y/></x>)) \f{yield; }} else { }case 1: M:do {prototype, __parent__; } while((delete undefined) && 0);break; {} }");
tryItOut("export prop");
tryItOut("/*for..in*/for(let [__count__, prop] = each in new (new Function(\"yield;\"))()) {this.zzz.zzz; }");
tryItOut("/*infloop*/M:for(__count__ = undefined.__proto__%=(<x><y/></x>) >>= 1e81.__lookupSetter__(\"prop\"); arguments++.__defineGetter__(\"__count__\", function () { yield -3/0 } ); (<>yyy</>.propertyIsEnumerable(\"__proto__\"))) {return  \"\" ;gc() }");
tryItOut("with({__count__: [__proto__, __noSuchMethod__, , prototype, __count__] = [.2 for (constructor in prop)]})yield <x><y/></x>;");
tryItOut("L:if((-1) != function  __proto__ (__iterator__, constructor) { export *; } ) continue M; else  if (__iterator__%=<x/>) yield; else var __proto__ = false;");
tryItOut("L: {}");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("while((let (constructor = 1.2e3, __iterator__ = <x/>) window) && 0)with([1,,]){return;export constructor; }");
tryItOut("/*infloop*/L:for(function ([y]) { }; function ([y]) { }; undefined) return;");
tryItOut("if(window) prop else  if (<y><z/></y>.yoyo(this)) {return null; }");
tryItOut("/*for..in*/for(const [] = (new ( /x/ )()) in #3={a:#3#}) {yield <x><y/></x>; }");
tryItOut("/*for..in*/for(let [/*\n*/prop, __noSuchMethod__] = <bbb xmlns=\"<x><y/\r></x>\"></bbb> in 5.0000000000000000000000) {;; }");
tryItOut("M:do /*infloop*/M:do {throw constructor;<ccc:ddd></ccc:ddd> } while( /x/ ); while((case eval(\"false\", <x><y/></x>).propertyIsEnumerable(\"constructor\"): L:if({}) { if (*::*.isPrototypeOf(<x><y/></x>)) {export __proto__; } else {function (__iterator__, __iterator__) { return <x/> }  }}gc()) && 0); const prop;");
tryItOut("if(prop.constructor setter= new Function) {(false); } else  if (false.isPrototypeOf(*)) {;return;, prototype = function::__iterator__; }");
tryItOut("@foo;/*for..in*/L:for(const __noSuchMethod__ = eval(\"return window;\", <y><z/></y>) in false) {export constructor;break M; }");
tryItOut("if((undefined((window.yoyo(<y><z/></y>))))) { if ((#1=undefined)) {return true;yield; }} else { }");
tryItOut("/*infloop*/for(@foo; *::*; <x><y/></x>) gc()");
tryItOut("/*for..in*/for(let prototype in <><x><y/></x></>) let (__count__ = ({a2:z2})) { gc() }");
tryItOut("return; const prop;");
tryItOut("if(constructor) { if ((true())) yield <x><y/></x>;continue ; else {{{}return <x><y/></x>; }M:with({__proto__: __parent__}){export *; } }}");
tryItOut("{M:if(this.watch(\"constructor\", <><bbb xmlns=\" /x/g \">yyy</bbb></>)) { if (({__proto__: ((function ([y]) { })() if (<y><z/></y>)) })) prototype = this, __count__ = *; else {gc(){throw arguments;export __count__; } }} }");
tryItOut("M:do {__noSuchMethod__;(__proto__); } while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/for(__iterator__.__iterator__ setter= (yield null); (function  constructor (__iterator__) { (true).__defineSetter__ } ).call(true, -3/0, <><x><y/></x></>); (( /x/g  == <x/> ^= <><>(function ([y]) { })()</></>)())) {}");
tryItOut("{(<x><y/></x>);M:if([__proto__, , ] = *::* >= <x/>) yield; else {yield; } }");
tryItOut("( \"\" );");
tryItOut("/*for..in*/for(var __parent__ = <x><y/></x> in <y><z/></y>) ;");
tryItOut("M:while(({}) && 0){L:do setter;let prop; } while((!function (__proto__, __parent__) { return <><x><y/></x></> } ) && 0);return\n }");
tryItOut("do { } while((<x><y/></x>.__iterator__) && 0);");
tryItOut("{/*infloop*/for(window; <x><y/></x> for (__proto__ in window); <><x><y/></x></>) gc()var constructor = <x><y/></x>, __proto__ = *; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const null['prop'] in ([false])) {/*infloop*/L:for(let __noSuchMethod__; 1.2e3; prototype) yield [[]]; }L:if(([ \"\"  for each (__count__ in  \"\" ) if (false)])) export prop; else ");
tryItOut("with({__iterator__: (constructor = ({a1:1}))}){yield; }");
tryItOut("{let , false = <x><y/></x>;return <><x><y/></x>\r</>; }");
tryItOut("L:do {} while(((new (1 for (x in []))(<x><y/></x>.__noSuchMethod__, ([__parent__ for (__proto__.__iterator__ in true) for each (prop in true)])))) && 0);");
tryItOut("yield prototype > <x><y\r/></x>.prototype;");
tryItOut("/*infloop*/L:do export prototype; while([1,,]);");
tryItOut("if((<x><y/></x>[window]) .. ((null |= undefined).__noSuchMethod__)) var __count__, __parent__ = __noSuchMethod__; else  if (new prop.prop = true(this.__defineSetter__(\"__iterator__\", function(q) { return q; }))) {(null); }");
tryItOut("/*for..in*/for(let prop in (((1 for (x in [])))([(prototype = ({ __proto__: __iterator__, constructor: prototype })) if (<y><z/></y>.unwatch(\"__iterator__\"))])))throw __count__;");
tryItOut("/*infloop*/M:for(const prototype; ((__proto__).yoyo('fafafa'.replace(/a/g, (new Function(\";\"))))); __count__) {return; }");
tryItOut("return (__iterator__);");
tryItOut("with({function::__noSuchMethod__: <><x><y/></x></>})gc()");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((({}))(false.unwatch(\"__proto__\"))))export *;");
tryItOut("\tL: /*for..in*/for(let prototype = *::* in (-1)) (<y><z/></y>); const __parent__;");
tryItOut("/*for..in*/L:for(prototype = <><x><y/></x></>++ in let ([({ __parent__: constructor, prop: [__count__, __noSuchMethod__, , , ] }), ] = [[]], (<><x><y/></x></>)(null) = 3/0) (<x><y/></x>)(prop)\t = __parent__ ^ #1#) {L: {return; } }");
tryItOut("if((window).__defineSetter__((this % -0))) {return; } else  if ((new (3.141592653589793).__defineSetter__((3/0.constructor = <x><y/></x>)))) {var __proto__;(constructor); } else __proto__");
tryItOut("with( ? @foo :  /x/ .__noSuchMethod__){let (__count__ = __proto__, __count__ = prop) { ; } }");
tryItOut("with(new this())\f{continue ;( \"\" ); }");
tryItOut("/*infloop*/L:for(let __parent__;  '' ; [15,16,17,18].sort((function (__proto__, constructor) { yield ({a2:z2}) } ).call,  /x/ )) const function () { yield <><x><y/></x></>; } ;");
tryItOut("with({__parent__: (uneval(({function::__proto__: <><x><y/></x></> })))}){/*infloop*/M:while(*::*){continue L;const prototype, prototype = <x/>; }(<x/>); }");
tryItOut("M:while((new Number(undefined, {}) * *::*.__defineGetter__(\"constructor\", *::*)) && 0){window; }");
tryItOut("M:if( /x/ ) {__noSuchMethod__ } else <x><y/></x>;");
tryItOut("with({__proto__: (#2=--(eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in 5.0000000000000000000000) {return;__iterator__; }\", {})))})L: {( \"\" );\f }");
tryItOut("let (constructor = (({__parent__ setter: function  prop (prototype)this, __proto__ getter: 'haha'.split })), __parent__ = ( /x/g .__lookupGetter__(\"__noSuchMethod__\"))) { /*infloop*/L:for(__proto__ = (__proto__);  \"\" ; 4. / [,,]) {return [];(<x><y/></x>); } }");
tryItOut("if(delete.valueOf(\"number\")) {function(y) { yield y; ;; yield y; }(<x/>); }");
tryItOut("throw window;");
tryItOut("/*infloop*/M:do {gc() } while((1e+81 || <x><y/></x>));");
tryItOut("{__proto__; }");
tryItOut("if([, __count__, , constructor] = this @ <><x><y/></x></>) { if ((this.__lookupSetter__(\"__count__\"))) let(constructor) ((function(){let([, prototype, prototype, , __parent__]) ((function(){constructor = __noSuchMethod__;})());})()); else /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in  ''  |= this) {; }}");
tryItOut("var __iterator__ = <x><y/></x>, prop");
tryItOut("/*infloop*/for(const __parent__; (<><x><y/></x></> .. -0)[( ''  >>= __proto__)]; (({}.watch(\"__count__\", function(q) { return q; }))[<>[[]]</>.((null.__proto__)) ==  /x/  >> *::*])) yield;");
tryItOut("{M:if(window) {yield; } else {yield;export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <><x><y/></x></>) {(1 for (x in []))constructor = window; }");
tryItOut("if(<><x><y/></x></>) gc() else  if (*::*) yield  '' ;");
tryItOut("if(__proto__) {export __parent__\nconst prop, __noSuchMethod__; } else  if ((prop >>> *::* === ([15,16,17,18].map(({}).hasOwnProperty, #1#)))) {{} } else export *;");
tryItOut("{L:if(<y><z/></y>) {(1 for (x in []))yield; } }");
tryItOut("if(<x><y/></x>) {return; } else  if (0x99) export prop; else ");
tryItOut("*;L: return;");
tryItOut("const __parent__ = window, constructor;{}");
tryItOut("function(q) { return q; }");
tryItOut("with({}) if(<x/>) { if (false) let __count__ = [[1]], true;} else var __noSuchMethod__, __count__ = ({});");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = yield <><x><y/></x></> in []) <x><y/></x>");
tryItOut("return <x><y/></x>\nyield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in (({*: +true.valueOf(\"number\") }))) {const __parent__ = <x><y/></x>; }");
tryItOut("with((({}).__lookupGetter__)(*)){export *; }");
tryItOut("/*for..in*/L:for(const [__parent__, __proto__] = (yield (<x><y/></x> > 1e4)) in prototype) export constructor;");
tryItOut("do {const __noSuchMethod__ = <><x><y/></x></>, constructor; } while((<><xxx>{__count__}</xxx></>) && 0);");
tryItOut("with({})  \"\" ;");
tryItOut("while((0.1) && 0){continue ;let function::__iterator__; }");
tryItOut("let prop;");
tryItOut("switch(new (this.__defineSetter__(\"__noSuchMethod__\", Math.pow))(({__noSuchMethod__: <x/>, __iterator__ getter: function  prototype (constructor) { yield this }  }))) { default: break; case each.prototype:  }");
tryItOut("/*infloop*/while((uneval(<xxx {__proto__}={this.__defineGetter__(\"prop\", [1,2,3,4].map)} />\n))){/*infloop*/for([15,16,17,18].sort(function (__iterator__) { (033); } , gc(<><x><y/></x></>, <><x><y/></x></>)); #0=<x/>.__defineGetter__(\"__iterator__\", function  __proto__ () { return <x/> } ); eval(\"3.141592653589793 :: \", <><x><y/></x></> for (constructor in -1))) (-0); }");
tryItOut("/*infloop*/do export *; while(((gc).call(undefined * false, this.__defineGetter__(\t\"prototype\", 'haha'.split)/*\n*/)));");
tryItOut("M:do {return <><x><y/></x></>; } while((<><x><y/></x></>) && 0);");
tryItOut("for(let y in []);");
tryItOut("\n;");
tryItOut("L: return  \"\" \n{}\n");
tryItOut("with(prop = (__parent__.*).__defineGetter__(\"__noSuchMethod__\", gc)){export constructor;let __parent__ = *::*; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((/a/gi)(function::__iterator__ =  \"\" )))const prototype = constructor, __iterator__;\nlet prototype, __proto__;\n");
tryItOut("switch( /* Comment */1e+81) { default: /*for..in*/for(const __proto__ in (((new Function(\"gc()\")))(<><x><y/></x></>))){(null); }break; let __iterator__ = prototype, __iterator__;break; break;  }\n\f/*infloop*/for(const __proto__; ({a1:1}); (window > *)) {return window; }\n");
tryItOut("let(__parent__) { L:if(<><x><\ty/></x></> ? * : __count__) { if (((export *;)()())) gc() else yield [,,];}");
tryItOut("/*infloop*/for(<x><y/></x>.watch(\"__proto__\", [1,2,3,4].slice); null; let (constructor = <y><z/></y>, __parent__ = <><x><y/></x></>) <><x><y/></x></>) gc()");
tryItOut("/*infloop*/for(const ({ __count__: ({ __noSuchMethod__: ({ __noSuchMethod__: [, , __count__, __count__], prototype: [, , , ] }), constructor: ({ prototype: prop }) }) }) = <x>\f<y/></x>.__lookupGetter__(\"{return; }\"); this.zzz.zzz; 5.0000000000000000000000.hasOwnProperty(\"prop\")) ( \"\" );");
tryItOut("try { for(let y in [5,6,7,8]) with({}) prototype = __parent__; } catch(prop) { with({}) {  }  } finally { for(let y in []); } ");
tryItOut("prototype = prototype;");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee> &= (__noSuchMethod__ = %)) {continue M;if(window) {yield;const __iterator__, __count__ =  /x/g ; } else  if (constructor) let __iterator__; } else  if ( /* Comment */(__proto__.__iterator__ getter= gc)) {if('fafafa'.replace(/a/g, function(q) { return q; })) { if (this) {yield; } else throw constructor;} }");
tryItOut("for(let y in []);");
tryItOut("with(<y><z/></y>){yield; }");
tryItOut("M:with({prototype: *::*}){yield; }");
tryItOut("/*for..in*/L:for(let [__proto__, __noSuchMethod__] = [[]] in <><x><y\t/></x></>) const __parent__, prop = <x><y/></x>;");
tryItOut("while((this) && 0)(null).__defineSetter__\t");
tryItOut("/*infloop*/M:do {with(#1=[#1#])gc() const __iterator__;gc() } while(<><x><y/></x></>\n ? (\tconstructor = <><x><y/></x></>) : constructor(<y><z/></y>));");
tryItOut("this.zzz.zzz;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, function(q) { return q; })){const __iterator__ = <x><y/></x>, prop; }");
