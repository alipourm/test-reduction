tryItOut("if(function(id) { return id }) continue ; else  if (window) {({}).__lookupGetter__(<x><y/></x>); }\n");
tryItOut("/*infloop*/for(({ __iterator__: ({ prop: prototype, __parent__: [, , ({ __count__: __noSuchMethod__ }), ({  '' : window })] }), constructor: ({ __parent__: ({ prop: prop }) }) }) = [11,12,13,14].filter; eval(\"/*infloop*/L:for(const [] = * - @foo; (true); 'fafafa'.replace(/a/g, (<x><y/></x>).watch)\\r) continue L;\", (new (/a/gi)(<><x><y/></x></>) * eval(\"(<y><z/></y>);\", this))); eval(\"let (__noSuchMethod__ = __parent__) { prop; }\", <><x><y/></x></>)) {L:with(<><x><y/></x></>)break ; }");
tryItOut("with({constructor: 3}){(constructor);throw 1.2e3; }");
tryItOut("(this);");
tryItOut("/*for..in*/M:for(const prop = prototype.prop setter= gc in ) {with({}) { break M; }  }");
tryItOut("/*infloop*/M:while(eval(\" /x/ \", #3={a:#3#}))return; const function::function::constructor\t;");
tryItOut("do /*for..in*/\fM:for(var (__proto__) in ((({}).hasOwnProperty)((\n__iterator__)))){continue ;throw window; } while(((({ get __count__()let (__noSuchMethod__, __proto__ = prototype) undefined.propertyIsEnumerable(\"getter\") }))) && 0);");
tryItOut("if((prototype).call((#2=[true]), )) let prototype = *::*, prop = constructor; else  if ( /* Comment */* :: __count__.__count__ getter= (function   (__proto__) { yield; } ).call) {; }");
tryItOut("{Functiongc() }switch( /x/ .__lookupGetter__(\"__iterator__\")) { default: case 3: gc()break; break; case window: <x/>; const __proto__;case [({__noSuchMethod__ setter: eval })].some(eval): with({__iterator__: (prototype.__parent__)});break;  }");
tryItOut("switch(@foo) { case 3: /*infloop*/do {export *; } while(<><x><y/></x></>);break; default: break; case 9: do ({}).__lookupGetter__ while((constructor) && 0);case prop.__parent__ getter= try { return 0.1; } catch(prop) {  } : propbreak; case 7: while((__iterator__ =  /x/ ) && 0){; \"\" ; }throw __iterator__;case 9: /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in this) { }break; L:if(<><x><y/></x></>\n) {return;__parent__; } else  if (__noSuchMethod__ = prop) []; else {throw __iterator__;return; }break; case  /x/g : (prototype);break;  }");
tryItOut("do {/*infloop*/while((<><x><y/></x></> , null))continue M; } while((prototype.__noSuchMethod__ = (function ([y]) { })()) && 0);");
tryItOut("/*for..in*/for(var __proto__ = Function((({a1:1}) if (prototype))) in <zzz>[,,z1]</zzz>.((yield null))) {/*for..in*/for(const (__noSuchMethod__) in (((1 for (x in [])))(#1=[#1#])))\t{return  /x/ ; } }");
tryItOut("for(let y in []);");
tryItOut("yyy\n const __count__;");
tryItOut("switch(__noSuchMethod__) { default: if(<x/>) ; else  if (*) yield;case 1: case 0: break ;/break; break;  }");
tryItOut("/*for..in*/for(__noSuchMethod__ = ({ set __parent__() { yield <x/> }  }) in <ccc:ddd></ccc:ddd>) yield;");
tryItOut("throw prop;");
tryItOut("<y><z/></y>\n");
tryItOut("yield (__proto__ = x::__iterator__);");
tryItOut("if(true) yield <x\f><y/></x>; else  if (.2) continue ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = <><x><y/></x></>.* in false.__lookupSetter__(\"setter\")) {export prototype;export *; }");
tryItOut("/*infloop*/M:do {gc() } while(__noSuchMethod__);");
tryItOut("let(prop = undefined, prop) { let __noSuchMethod__ =  \"\" , constructor = 1e4;");
tryItOut("/*for..in*/L:for(const [__parent__, __noSuchMethod__] =  /* Comment */window <= ((-1)) in <x><y/></x>) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in ( ''  < *::*).isPrototypeOf( \"\" )) yield this.__defineGetter__(\"__noSuchMethod__\", Function);");
tryItOut("let(constructor, __parent__ = new undefined.@foo(function () { yield this } )) { __proto__ = __noSuchMethod__;");
tryItOut("let(prop, __proto__) { for(let y in [5,6,7,8]) with({}) { constructor = setter; } ");
tryItOut("/*for..in*/L:for(var [__parent__, constructor] = Boolean((eval(\"#1#\", #1#)).__defineSetter__(\"__parent__\", function  __parent__ (__parent__, __noSuchMethod__) { return window } )) in delete <x/>) /*infloop*/\tfor(const prop; prop.__parent__; (constructor)(undefined.__lookupGetter__(\"__noSuchMethod__\") <<= __proto__ = <x/>.eval(Error([1], *::*)))) {{gc() } }");
tryItOut("let ( /x/ .__defineGetter__(\"prop\", eval) = (\nprop.(false)).__lookupSetter__(\"each\"), __noSuchMethod__) { L: (<x><y/></x>); }");
tryItOut("while(((Error())) && 0){return;/*infloop*/L:while(true){export __count__;{} } }");
tryItOut("/*for..in*/for(var __count__ = (new gc()()) in <x>/*\n*/<y/></x>) {\rconst __parent__ = prop, prop = window; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("L: if(@foo) { if (<><x><y/>\t</x></>) {yield; } else {break L; }}");
tryItOut(" /x/ ;let (__count__) { return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in [,,z1]) {throw false; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.__proto__ in .__defineSetter__(\"__count__\"[1,2,3,4].map)) {;return; }");
tryItOut("if(prop) /*for..in*/M:for(let __iterator__ in ((Math.sin)(<x><y/></x>))){{} } else export *");
tryItOut("if(({ try { ; } catch(function::__count__) { ; } finally { {} } : __noSuchMethod__ }) = [, [, __proto__]]) M:with({__parent__: prototype})return  \"\" ; else  if ((__iterator__ = ({ __parent__: prop, __parent__: [] }))) export *;\nyield;\n");
tryItOut("with({prototype: (this.__defineSetter__/*\n*/(\"__proto__\", Math.pow) .@ <x><y/></x>.__lookupSetter__(\"prototype\")).eval(prop.(<><x><y/></x></>) , false.valueOf(\"number\"))})yield;");
tryItOut("yield __parent__.__parent__ = <><bbb xmlns=\"window\"> </bbb></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in <><x><y/></x></>) {return <x><y/></x>; }");
tryItOut("let(prop, x::__count__) ((function(){for(let y in [5,6,7,8]) return arguments;})());");
tryItOut("M:switch([] = ) { case <x><y/></x>: (<y><z/></y>);default: let __proto__ = <><x><y/></x></>;break; case 2: break; case 6: <x/>;case 9: yield; }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: prop, __parent__: default: {(#1=[#1#]); }break;  }) = <><x><y/></x></>; __count__ = <x/>; constructor =  /x/g ) {export *; }");
tryItOut("/*infloop*/M:do export __noSuchMethod__; while([]);");
tryItOut("{let prop, __noSuchMethod__; }");
tryItOut("return <x><y/></x>;\nexport *;\n");
tryItOut("break M;\nyield constructor.(<><x><y/></x></>);\n");
tryItOut("if((prop-=undefined.propertyIsEnumerable(\"constructor\"))) { if (([<y><z/></y>])) {<x/>; } else { }}");
tryItOut("return #0=\f/*infloop*/for( /x/ ; [,,]; getter|=<><x><y/></x></>) prop\n");
tryItOut("L: throw ((function(q) { return q; }).call(3, false))\nvar constructor = 3, constructor = __proto__;\nconst __count__ = 1e4;\n");
tryItOut("yield true\n");
tryItOut("while((<y><z/></y>) && 0){M:while((([throw __proto__\nreturn;].map(eval))) && 0)yield;return; }");
tryItOut("throw StopIteration;");
tryItOut("return;break ;");
tryItOut("if(<x><y/></x>) yield; else {<x><y/></x>export *; }gc()");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__.__parent__ = __parent__;");
tryItOut("/*for..in*/for(const __count__ ? @foo :  '' .prototype in (* ? prototype : <><x><y/></x></>) .@x:: typeof  \"\" ) let (prototype, __noSuchMethod__) { (prop); }");
tryItOut("L:if(+gc) { if ( '' ) {/*infloop*/for(void (prototype = -3/0); __count__ = 'fafafa'.replace(/a/g, /a/gi); this.__defineSetter__(\"__noSuchMethod__\", eval)) export __proto__;switch(<x/>) { case 9: throw  '' ;break;  } } else {/*for..in*/for([__noSuchMethod__, __noSuchMethod__] in ((Function)(window .@ null(++<x><y/></x>))))export __count__ }}");
tryItOut("{export prototype; }");
tryItOut("yield;");
tryItOut("/*infloop*/M:while(3)let(__noSuchMethod__ = let prop = 0/0, prototype) { throw StopIteration;");
tryItOut("do {yield; } while(((null.eval(<><x><y/></x></>))) && 0);");
tryItOut("L:if(true) 033; else {return; }");
tryItOut("/*for..in*/for(//h\nlet __proto__ = new ([1,2,3,4].slice)(<y><z/></y>.__defineGetter__(\"constructor\", gc), *) in undefined) {yield;return; }");
tryItOut("let (__count__ =  /x/ , constructor = <><x><y/></x></>) { ; }");
tryItOut("L:do {let prop;break ; } while((#2=true) && 0)\n");
tryItOut("/*for..in*/for\t(get = let (__count__ = <x><y/></x>, __iterator__ = -1) eval(\"gc()\", <><x><y/></x></>) in <y><z/></y>) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x><y/></x>) {0/0gc() }yield; }");
tryItOut("");
tryItOut("with({}) { return; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <><x\n><y/></x></>) {const __parent__ = ({});(null); }");
tryItOut("/*for..in*/for(const __iterator__.(*::*)['getter'] in (([1,2,3,4].slice)(new <y><z/></y>( /x/ , constructor))))/*infloop*/for(let __iterator__; #1=this; constructor ^= __iterator__) {var prop, constructor = true; }");
tryItOut("if((eval(\"/*for..in*//* nogeckoex bug 349964 */M: for  each(prop in (1e+81)) {switch(({__parent__ setter: eval, constructor: * })) { default: break; function  __proto__ (__proto__) { yield false } break; case (~<y><z/></y>): yield undefined;break;  } }\", new Object()))) {;\nyield ({a1:1});\n/*infloop*/do {export __noSuchMethod__; } while(<x><y/></x>); } else  if (true[prop].throw((eval(\"__noSuchMethod__\",  /x/ ) >>= (this .@x:: undefined)))) const prototype = __parent__;");
tryItOut("L:switch((new Exception(((this.__defineSetter__(\"__count__\", ('haha'.split\f).call)) .@ ), *::*['prototype']-=prop.__iterator__ setter= function(q) { return q; }))) { default: let(constructor = <x><y/></x>, __count__ = this) { __proto__;case let (({ __noSuchMethod__: constructor, prototype: __iterator__ }) = * >= window, __iterator__) (this.zzz.zzz): case __proto__ =  /x/g .eval(window).__lookupGetter__(\"prop\"):  }");
tryItOut("with(( /x/ .__count__)){return; }");
tryItOut("/*infloop*/while((Math.sin(1.2e3\n)));");
tryItOut("with({__count__: (( /* Comment */<y><z/></y>).hasOwnProperty(\"__iterator__\"))});");
tryItOut("throw __iterator__; const prop;");
tryItOut("while((<y><z/></y> *= <x/>) && 0)prototype = __iterator__;");
tryItOut("/*for..in*/for([prototype, __iterator__] = (((-1))[<x><y/></x>]) in  '' ) {{;prototype = [], __proto__; } }");
tryItOut("/*infloop*/for(const __iterator__ = <><x><y/></x></>; <x><\fy/></x>; @foo) continue ;");
tryItOut("/*for..in*/for(const __proto__ in ((/*\n*/function  __proto__ (__parent__) { return -1; } )(window)));");
tryItOut("/*infloop*/while((new (new String(<x/>).throw(<><x><y/></x></>.watch(\"prop\", -1)))(Date(new [1,2,3,4].map())))){(<y><z/></y>); }");
tryItOut("{{export x::prop; } }");
tryItOut("L: {yield; }");
tryItOut("true\n");
tryItOut("gc()\n(@foo);");
tryItOut("__count__ = __iterator__;");
tryItOut("");
tryItOut("let (__noSuchMethod__ = (++(new (undefined)(<x><y/></x>)).__parent__ = <><bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb></>.eval(<bbb xmlns=\"<><x><y/></x></>\">yyy</bbb>.([,]))), prop = ([<x><y/></x> << undefined].map(@foo))) { /*for..in*/for(__parent__ in ((({}).hasOwnProperty)(__iterator__.prop = ))){let __proto__ = @foo; } }");
tryItOut("if(<><xxx {__count__}={<><x><y/></x></>.__proto__} /></>) {;<x><y/></x>; } else return;");
tryItOut("const constructor = __iterator__, constructor;\n__iterator__ = *::*;\n");
tryItOut("if(this.zzz.zzz) <y><z/></y>; else  if (__proto__.__count__) {} else break ;");
tryItOut("if((__iterator__ | undefined).isPrototypeOf(([({ __noSuchMethod__: __count__, prop: prop }), , __count__, , ({ prototype: __parent__ })] = __iterator__))) { if (this.zzz.zzz) gc()} else (@foo ?  ''  :  '' );");
tryItOut("yield prop|= /x/g ['__parent__'] = let (prop) *::*;");
tryItOut("L: try {  } catch(__iterator__) { ( '' ); } finally { ({}).hasOwnProperty } ");
tryItOut("return;");
tryItOut("L: {if(prop) { if ( /x/ ) const function::prototype, prototype = ; else break ;} }");
tryItOut("if(yield __proto__+=( /x/g )[033]) return;");
tryItOut("if(__proto__) __iterator__, __iterator__;\f else  if (window) {yield; }");
tryItOut("L: const __count__ = *, function::__count__ = <x><y/></x>;");
tryItOut("/*for..in*/for(let prototype in (((<><x><y/></x></> <= [,,]).valueOf(\"number\"))(this.zzz.zzz)))return;");
tryItOut("if(new (({__iterator__: this.__defineSetter__(\"prop\", function (function::__count__) { yield undefined } ) }))(false, prop.*)) export constructor; else  if ((-<><x><y/></x></>.__defineGetter__(\"__proto__\", <><x><y/></x></>).__lookupGetter__(\"prototype\"))) {export prototype; }");
tryItOut("yield [,,z1];");
tryItOut("gc()\nexport delete");
tryItOut("if((prototype.__proto__ = *[<><x><y/></x></>]['prop'] = __parent__ = <><x><y/></x></>.propertyIsEnumerable(\"prototype\"))) var __proto__, return true;; else  if (Error((([z1,,] = @foo) > <x/> !== -0))) {/*for..in*/L:for(var prototype in  \"\" )  const prop;; } else return");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in <x><y/></x>) {export __noSuchMethod__; }");
tryItOut("{M:if(<x><y/></x>) continue ; else  if ((#1=[#1#] /= window)) {[,,z1];constructor = <y><z/></y>.throw([<x/> for each (function::__parent__ in <x><y/></x>)]), try { gc() } finally { yield <><x><y/></x></>; }  } else {/a/gi } }");
tryItOut("__count__ = prototype;");
tryItOut("throw arguments;");
tryItOut("/*infloop*/M:for(var ({ constructor: [(new ((yield <><x><y/></x></>))(-3/0.*))['__proto__'], , ], prop: 'fafafa'.replace(/a/g, function  prototype (prototype) { return <><x><y/></x></> > __count__ } ) }) = ; (p={}, (p.z = new ( '' )( \"\" ).hasOwnProperty(\"prop\").__defineGetter__(\"prototype\", Function))()); constructor = <x/>) {let (({ __proto__: __proto__, prototype: ({ __count__: ({ __noSuchMethod__: __noSuchMethod__ }) }) }), [, \t({ constructor: prototype, prop: prop }), []] = #3={a:#3#}(<><x><y/></x></>)) { L:if(<y><z/></y>.valueOf(\"number\")) { if (({: <><x><y/></x></>, __proto__: <><x><y\r/></x></> })) yield [z1,,]; else ( /x/g );} } }");
tryItOut("return false;");
tryItOut("{(__iterator__.__lookupGetter__(\"__parent__\")); }");
tryItOut("{[[1]].__noSuchMethod__ =  \"\" ;let  /x/g ; }");
tryItOut("/*for..in*/for(const (__parent__) in <><x><y/></x></\t>) let constructor, __parent__ = undefined;");
tryItOut("if(this) if((<><x><y/></x></>.@foo)) { if (5.0000000000000000000000.__defineGetter__(\" '' \", (new Function(\" if (constructor)\")))) return;} else {export *; } else  if ((new ((window).__defineSetter__)()) + Object(<x><y/></x>, window)) const __count__ = false; const __noSuchMethod__\n;");
tryItOut("{}");
tryItOut("export __proto__\n( /x/ );\n/*for..in*/for(__parent__ = +\nfunction ([y]) { } in  \"\"  @ <><x><y/></x></>) function  __count__ (__count__, __proto__)true\n");
tryItOut("/*for..in*/L:for(var __proto__ = (4.) in <x/>) {return;/*infloop*/while(<x/>)yield <x/>; }");
tryItOut("L:if(this instanceof <><x><y/></x></>) { if (({constructor: null.__defineGetter__(\"(<x><y/></x>)([1])\", Math.pow)})) {/*infloop*/L:for(let function::__proto__; __proto__; true) {prototype;(<x><y/></x>); } } else let __proto__ = prototype, __proto__ = @foo;}");
tryItOut("if( /x/g ) {<><x><y/></x></>;var __noSuchMethod__, __iterator__;let __proto__; }");
tryItOut("/*for..in*/for(var [x::__proto__, prototype] = [1,,] in window != ({})) {return; }");
tryItOut("/*infloop*/for(let ({ __parent__: constructor }) = (((*::* < @foo)[\rexport *])); <x/>; (let (__noSuchMethod__ = <><x><y/></x></> in * | <><x><y/></x></>) ((function  __parent__ (__parent__, __iterator__) { return (function::__parent__ .@*:: [,]) } )(__noSuchMethod__.__parent__ getter= (new Function(\"window;\")))))) yield;\nreturn 5.0000000000000000000000;\n");
tryItOut("with(new eval(\"<x/> = [];\", <><x><y/></x></>)());{}\nconst __proto__ = __parent__, prop = this;\n");
tryItOut("/*for..in*/for(constructor = (new (.2)()) |= __noSuchMethod__ in <x><y/></x>) {export *;gc() } const __proto__;");
tryItOut("do {return; } while((this) && 0); const prototype;");
tryItOut("let __iterator__\nthrow <><x><y/></x></>;");
tryItOut("L:switch(this.__defineGetter__(\"__noSuchMethod__\", <x><y/></x>)++) { default: tcase <><x><y/></x></>\n[prop.(this)]: break; case (__parent__.__parent__): break; break;  }");
tryItOut("with((({prototype: -1})))return 3;");
tryItOut("/*for..in*/M:for(var #2=prototype\n in (yield  \"\" ) <<= this > this) {yield 0/0;/*infloop*/for(__parent__; __parent__; (__count__)()) export prototype; }");
tryItOut("yield *.__defineSetter__(\"prototype\", function  __parent__ ()<y><z/></y>);");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, __count__] = false += prototype in [1,,]) {throw  /x/ ;export prototype; }");
tryItOut("export __iterator__\n");
tryItOut("var __noSuchMethod__ = <y><z/></y>, __count__\nL:switch( /x/g .valueOf(\"number\")) { case <y><z/></y>.__lookupGetter__(\"constructor\"): ;break;  }");
tryItOut("\twhile((<><x><y/></x></>) && 0){(function(y) { yield y; {}; yield y; }); }");
tryItOut("L:do {true{} } while(((uneval(new Number(constructor) << <x><y/></x>.(<x/>))).eval(prototype.unwatch(\"__noSuchMethod__\"))) && 0);");
tryItOut("switch(*::* && <><x><y/></x></>.isPrototypeOf((<y><z/></y> , <y><z/></y>))) { default: return @foo;break;  }");
tryItOut("return true;\nreturn;\n");
tryItOut("if( { break L; }  = <x/>) { if (*::*)  else {break M;\t }}");
tryItOut("with( ? window ===  /x/g  : <>4.</>){L:if(<><x><y/></x></>) { if ([,,]) gc()} else {__count__, __noSuchMethod__; }{continue ; } }");
tryItOut("if() *::*; else  if (*::*\n) {break M; }");
tryItOut("/*infloop*/L:\ffor(const __count__; (<x><y/></x>.isPrototypeOf(3/0)); __noSuchMethod__ = export *; /= *::* * <><x><y/></x></>) yield;");
tryItOut("with({}) throw StopIteration;");
tryItOut("{if(<y><z/></y>.*) {const __count__; /x/g  } else  if (window[ /x/g ]) {break L;return; } else return; }");
tryItOut("__parent__ = __parent__;");
tryItOut("with(({ set __proto__ __count__ () { return (p={}, (p.z = constructor)()) }  }))with( /x/g |=1.3 % [z1]){try { let __noSuchMethod__; } catch(__noSuchMethod__ if <x><y/></x>) { return function ([y]) { }; } finally { ( /x/ ).__defineSetter__ } ; }");
tryItOut("return;");
tryItOut("/*infloop*/for(__noSuchMethod__.constructor|=__noSuchMethod__ / window; constructor & (({}).__lookupGetter__(-0,  '' )); __count__.throw(<><x><y/></x></>)) constructor;");
tryItOut("if(* |= <><x><y/></x></>) { if (prop.propertyIsEnumerable(\"constructor\")) {{}; } else yield  /x/g ;}");
tryItOut("switch(new function  __proto__ (prop)continue M;([1,2,3,4].slice)) { default: break; while(( /x/g ) && 0){return; };break; case 9: return;break;  }");
tryItOut("/*for..in*/for(const prop = prop = @foo in constructor) {#1#; }");
tryItOut("/*infloop*/for(__proto__ = <ccc:ddd><!----></ccc:ddd>; <><x><y/></x></>; 0.1) return;");
tryItOut("return this.zzz.zzz;");
tryItOut("/*for..in*/M:for(var __parent__ = (prototype+=__iterator__) in __parent__) {(<x><y/></x>); }");
tryItOut("/*infloop*/do {/*for..in*/M:for(var [prototype, constructor] = (q) in <x/>.throw(<x><y/></x>)) ;const constructor, __iterator__; } while(((new Function).call(this, *).eval(<><x><y/></x></>)).prop);");
tryItOut("/*for..in*/M:for(var ((constructor['prop'])) in ([11,12,13,14].map)) {L:if(false ? null : <x><y/></x>) (constructor); }");
tryItOut("export __noSuchMethod__\ngc()");
tryItOut("{{} }");
tryItOut("/*infloop*/__iterator__ = __parent__");
tryItOut("L:if(Function(this / <><x><y/></x></>)) /*infloop*/do break ; while(let (prop = <><x><y/></x></>, prototype) <><x><y/></x></>); else  if ((new __parent__)) break M; else L:if((__count__ = 0.1 << (function (prototype, prototype) { yield <x><y/></x> } ) >= (true !=  /x/ ))) { if (__proto__ = *.unwatch(\"__iterator__\")) L: prop} else {prototype{export __parent__; } }");
tryItOut("__iterator__;");
tryItOut("const prop;");
tryItOut("{/*for..in*/for(var __noSuchMethod__ = (<y><z/></y> || null) in constructor) {/*infloop*/for(let __noSuchMethod__; window;  \"\" ) {__proto__ =  /x/g ;throw <><x><y/></x></>; } } }");
tryItOut("while(((<x><y/></x> if (__count__))) && 0){break ; }");
tryItOut("with(3)__iterator__ = this");
tryItOut("/*infloop*/for(const ({ __parent__: ({ yield: [[], ] }) }) = constructor = __count__; eval(\"__parent__.__iterator__.propertyIsEnumerable(\\\"prototype\\\")\",  '' .@foo.__count__); this.__defineGetter__(\"constructor\", (function(q) { return q; }).apply)) export *");
tryItOut("M:if([]) {prop = undefined; } else  if (({})) return; else {export prop; }");
tryItOut("L: {/*for..in*/L:for//h\n(var __parent__ = this *= function(id) { return id } in constructor) {export *; }/*infloop*/M:for(<><x><y/></x></>; <><x><y/></x></>; prop) {yield;__parent__; } }");
tryItOut("with({}) { let(__parent__ = [null]) ((function(){__proto__ = __noSuchMethod__;})()); } ");
tryItOut("return;");
tryItOut("/*for..in*/M:for(let (__noSuchMethod__)(<y><z/></y>) in window) {throw window;throw *::*; }\nlet (prototype) { break ; }");
tryItOut("L:\tswitch(this.__defineSetter__(\"constructor\", Math.sin)) { case 6: {gc() }break;  }");
tryItOut("if((false ..  \"\" ))  else  if ((p={}, (p.z = <y><z/></y>)())) {export *;var __proto__, prop; } else {return;yield; }yield @foo;");
tryItOut("yield\n");
tryItOut("if(eval(\"[1,,].valueOf(\\\"number\\\")\", (this.__defineSetter__(\"__proto__\", new Function)))) { if ((({ constructor: ({ __iterator__: ({ : , prop(/: __iterator__ }'), constructor: ({ __noSuchMethod__: __proto__, prop: __iterator__ }) }), __proto__: ({ __count__: ({ __proto__: __count__ }) }) }) = [, ])) M:if(this.__defineGetter__(\"__count__\", gc)) {var __noSuchMethod__;<><x><y/></x></>; } else  if ((__noSuchMethod__.__noSuchMethod__ = let (__proto__) undefined)) continue M; else export *} else {with({__iterator__: @foo.throw([z1,,])})(this); }");
tryItOut("prop = constructor;");
tryItOut("break L\ngc()");
tryItOut("export prototype");
tryItOut("/*infloop*/while([(<><x><//h\ny/></x></> .@x:: @foo)]){export __iterator__; }");
tryItOut("return;");
tryItOut("let (({ __noSuchMethod__: ({ constructor: __count__, set: __iterator__ = window, prop =  /x/  }), __iterator__: ({ __proto__: __noSuchMethod__ }) })) { yield __proto__; }");
tryItOut("/*for..in*/for(let [prototype, __parent__] = (uneval(this)) in null) <x><y/></x>");
tryItOut("with({__parent__:  \"\" })return;");
tryItOut("/*infloop*/for(\n#0=({x::__count__: 1e4}); (yield (<x><y/></x>.__iterator__ = *).constructor); <><x><y/></x></> % *.unwatch(\"function::prototype\")) ");
tryItOut("const __parent__ = undefined, constructor = #3={a:#3#};");
tryItOut("{throw 0/0;/*for..in*/for(const __proto__ = *::* in [1]) (<x><y/></x>); }");
tryItOut("if([,,z1]) break L; else {/*infloop*/while('fafafa'.replace(/a/g, function (__iterator__) '' ))var __proto__; }\n/*for..in*/for(var __iterator__ = yield new [,,]() in this.yoyo(0)) if((yield window)) gc() else {{}continue L; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in window) {break M;with(__iterator__){export __parent__; } }continue ; }");
tryItOut("L:if(true.isPrototypeOf(<x/>).propertyIsEnumerable(\"constructor\")) ;");
tryItOut("with({__parent__: 0})throw <>\t<x><y/></x></>;");
tryItOut("/*for..in*/for(const (__count__) in ((yield @foo))) /*for..in*/L:for(prototype in ~<x><y/></x>) {;break ; }");
tryItOut("M:with({__noSuchMethod__: [(prop).watch]}){/*for..in*/for(__count__ in false) return;if(<x><y/></x>) { if (1.3) {Function/*\n*/ } else {__noSuchMethod__;function(y) { yield y; export *;; yield y; } }} }");
tryItOut("/*infloop*/L:while(null){yield;throw __noSuchMethod__; }");
tryItOut("{switch(((new function(y) { yield y; yield  /x/ ;; yield y; }(<x><y/></x>, this)) if ( /x/ ))) { case 9:  }L: {const __count__ = function(id) { return id }, function::__count__ = <x><y/></x>;let __parent__, __parent__ =  /x/g ; } }");
tryItOut("yield .2;");
tryItOut("if((new Function).call( '' , ).propertyIsEnumerable(\"__noSuchMethod__\")) { if ([11,12,13,14].sort) const __count__ = [z1,,];} else {(<> gc() <y/)</x>;; }");
tryItOut("with({}) throw prototype;");
tryItOut("switch(<x><y/></x>) { default: return;export *;break; case window:  }\n");
tryItOut("if(*) { if (-({constructor getter: [1,2,3,4].map })) yield <y><z/></y>; else {yield; }}");
tryItOut("return  '' ;");
