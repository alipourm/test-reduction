
tryItOut("/*infloop*/for(<><x><y/></x></>; 1.3; (uneval(@foo))) yield  /x/g ;");
tryItOut("let (__count__) { throw <x><y/></x>; }");
tryItOut("__proto__ = @foo");
tryItOut("/*infloop*/L:while(<x/>\n){export (-0);{} }");
tryItOut("export *");
tryItOut("/*for..in*/for(__proto__ = (*::* %=  \"\" ) in *) { }");
tryItOut("{}\nif((\n[1] % true)) { if ([11,12,13,14].some) export __parent__; else throw <x><y/></x>;}");
tryItOut("L:if((__parent__)) __proto__: <y><z/></y> else  if (1.3.watch(\"__proto__\", (<><x><y/></x></>).__defineSetter__)) {export __proto__; '' ; } else export *;");
tryItOut("throw __parent__;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("{}");
tryItOut("throw __iterator__;\f");
tryItOut("if(( /* Comment */<x/> -= window)) {return #3={a:#3#};const __parent__ = <x><y/></x>; } else  if (this.__defineGetter__(\"__noSuchMethod__\", *::*.@foo)) {var __proto__ = <x><y/></x>, prototype;{} } else return; const constructor;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let [__proto__, __count__] = [] = ({ __parent__: __proto__ }) = ( '' .yoyo(undefined)) in __parent__.prototype getter= function (__proto__, __count__) { return * } ) {throw StopIteration; }");
tryItOut("if(1e81.yoyo([1,,])) {;throw true; }");
tryItOut("/*infloop*/M:do {/*for..in*//* nogeckoex bug 349964 */ for  each(prototype.__count__ in <x/>) export *;yield window; } while(((-1))(<><x><y/></x></>));");
tryItOut("{constructor = <x/>, __proto__;[1,2,3,4].slicecontinue L; }");
tryItOut("/*infloop*/L:for(let (<x/>)(x::__noSuchMethod__ = -0.@foo); (true-=(__parent__ *= constructor)).__defineGetter__(\"__count__\", [1,2,3,4].slice); <x><y/></x>.( /x/g )) let __proto__ =  '' , constructor = <x><y/></x>;");
tryItOut("if((new Math.pow(*, <><x><y/></x></>))) {do gc() while((<><x\r><y/></x></>) && 0); }");
tryItOut("M:do {gc()\n__noSuchMethod__ = 3/0; } while((( /x/  % window) != -3/0 .@*:: this.yoyo([constructor].sort((*).watch))) && 0);");
tryItOut("/*infloop*/do /*for..in*/L:for(const [constructor, __noSuchMethod__] = [<><x><y/></x></> for (__count__ in __count__)] in false) {<><x><y/\f></x></>; } while(<><x><y/></x></> ?  ''  : <y><z/></y>);");
tryItOut("L:if((__noSuchMethod__-=__noSuchMethod__.constructor)) { if (__noSuchMethod__) Function else {break ; }}");
tryItOut("/*for..in*/for(const __parent__ in (('haha'.split)((<x/>.isPrototypeOf(<><x><y/></x></>))))){if(window) ({}).__lookupGetter__ else  if ( /x/g ) yield .2;do {break L; } while((undefined) && 0); }");
tryItOut("[1,2,3,4].slice");
tryItOut("/*infloop*/for(var ({ __proto__: ({ prop: ({ prototype: __iterator__, prototype: __proto__ }) }) }) = window.prop%=(<><x><y/></x></>.__lookupSetter__(\"constructor\")); constructor; ((this.__defineGetter__(\"__parent__\", (<x><y/></x>).watch)\n) ?  : eval(\"0\", <x/>))) if(({__proto__:  { return  /x/g  } })) {(this);return  '' ; } else  if ((<y><z/></y>.throw(<x><y/></x>))) {'haha'.split(<><x><y/></x></>); } else {yield;{} }");
tryItOut("try { return prop = \nfalse; } catch(__proto__) { try { with({}) return [,]; } catch(__iterator__ if new <><x><y/></x></>( /x/g )) { with({}) function(q) { return q; } } \fcatch(__parent__) { for(let y in [5,6,7,8])  }  } finally { return; } ");
tryItOut("/*for..in*/L:for(const [__iterator__, __parent__] = <y><z/></y> && [z1] in -3/0) gc()\n/*for..in*/for(let __noSuchMethod__ in (([1,2,3,4].map)(<x><y/></x>)))break L;\n");
tryItOut("/*for..in*/L:for(var __count__ in ((({}).hasOwnProperty)(((__proto__ = (function ([y]) { })()) >> (p={}, (p.z = ([<y><z/></y>]))())))))/*for..in*/M:for(var function::prop in (([1,2,3,4].slice)(4. in __noSuchMethod__)))if(constructor) continue M; else  if (*::*) return  /x/g ; else yield;");
tryItOut("L:with(((-0)[function (prototype) { ({}).hasOwnProperty } ]))let prop = function(id) { return id }, __noSuchMethod__;");
tryItOut("if(function::constructor = #1#) { if (\n({__parent__: function ([y]) { } })) {prop, __proto__; } else L:with((<><x><y/></x></>).watch(\"constructor\", (1 for (x in []))))}");
tryItOut("/*for..in*/for(let __iterator__ in ((gc)(*))){}\n");
tryItOut("export delete;");
tryItOut("L:if((this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in []))))((({prototype: 0.1 })prop), eval(\"(function ([y]) { })().prop = #1=[#1#]\", [[1]] ^= <y><z/></y>))) {if(undefined) window; else  if (null) yield <x>\t<y/></x>;{yield;; } } else yield 033;");
tryItOut("/*for..in*/for(__iterator__ = ({x::__iterator__: __iterator__.(<><x><y/></x></>), __proto__ setter: function(q) { return q; } }) in  /x/g .@foo) {(033);yield; }");
tryItOut("/*infloop*/for(@foo.isPrototypeOf(constructor && 1e4, <><x><y/></x></>); [] = ({ __parent__: __count__ }); *::*.constructor = <x><y/></x>) /*infloop*/for(var ({ setter: __iterator__ }) = __noSuchMethod__ = this;  \"\" (__proto__, <x><y/></x>); 3.141592653589793\n) {const __proto__;export *; }");
tryItOut("/*infloop*/for(\f__count__ = this.__defineSetter__(\"__parent__\", ({}).hasOwnProperty); (*::* for (prop\f in prototype)); (<bbb xmlns:ccc=\" /x/  >>> <y><z/></y>\"><ccc:eee></ccc:eee></bbb>.hasOwnProperty(\"prototype\"))) \t/*infloop*/while(*::*){throw <x/>; }\n");
tryItOut("/*for..in*/for(var <x/>['constructor'] in 033) {return ({});(<x><y/></x>); }");
tryItOut("gc() const prop;");
tryItOut("break M; const prop;");
tryItOut("while((typeof  '' .__defineSetter__(\"constructor\", function (\f)__noSuchMethod__).unwatch(\"__noSuchMethod__\").hasOwnProperty(\"__parent__\")) && 0)/*infloop*/for(const __noSuchMethod__ = this.__defineSetter__(\"constructor\", <x/>)['__iterator__'] = (__count__ = ({})) -= <x><y/></x>.throw( /x/ ); <><x><y/></x></>.eval(__noSuchMethod__) &= [15,16,17,18].some(gc, <x/>); (('haha'.split).call)((<><x><y/></x></>.constructor), this)) yield;");
tryItOut("\n{return [1];return; }");
tryItOut("L: \n");
tryItOut("gc()const __proto__, return this;;");
tryItOut("(__parent__)");
tryItOut("if(3.141592653589793.valueOf(\"number\")) {while((<x><y/></x>.(true)) && 0)if((<y><z/></y> if (*::*))) { if ((#3={a:#3#}.throw(*))) yield  '' ; else {throw <><x><y/></x></>;var __parent__ =  \"\" , __noSuchMethod__ = <x><y/></x>; }} }");
tryItOut("/*infloop*/for(const __iterator__; ({ set __iterator__ __count__ (constructor, __proto__) { return arguments }  }); false - #1=[#1#]) 0;");
tryItOut("/*for..in*/for(const [__proto__, constructor] = [,,z1] in <>\f<x><y/></x></>) export __iterator__;");
tryItOut("if((<x><y/></x>.(0))) /*infloop*/for((constructor = (*.__defineSetter__(\"prototype\", Math.sin))); function(id) { return id }; constructor = __noSuchMethod__ * *\n) {;return; }");
tryItOut("\fL:if( /x/g  < <x><y/></x>) { if ([window for (__iterator__ in <x><y/></x>)]) {gc(){} } else { }}");
tryItOut("with({}) __proto__ = prototype;");
tryItOut("L:if(((constructor.__parent__).@foo)) { if (<x/>) export prop; else yield <y><z/></y>;}");
tryItOut("{}");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in ({a1:1})) {function(y) { yield y; ;; yield y; }<><x><y/></x></>; }");
tryItOut("if(<><bbb xmlns=\"((uneval(<x><y/></x>))\n.__noSuchMethod__)\"> </bbb></> ? prop.__iterator__ = * : (__count__ = __count__)[@foo]) { if ((p={}, (p.z = new new <x><y/></x>(undefined)( '' ) >> *::* ? <y><z/></y> : @foo != 'haha'.split)()).@*) yield true\nif(undefined) export *; else return window; else export *;}");
tryItOut("if(<x><y/></x>) <x><y/></x> else {yield window;w }/*infloop*/do if(<x/>) {this } else  if ( '' ) {; } while(new RegExp());");
tryItOut("/*infloop*/M:for(({}); <><x><y/></x></>\f .. <x><y/></x>; window) {<x><y/></x>Function }");
tryItOut(";\n(window).watch\n");
tryItOut("setter: <x/> <= true");
tryItOut("let(constructor, __proto__) ((function(){throw __noSuchMethod__;})());");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = false in constructor) let prop = 1e81;");
tryItOut("do {if(<>this.__defineSetter__(\"constructor\", [1,2,3,4].map)</>) { if (({__proto__ setter: #3={a:#3#} }) -= ) var prototype; else var constructor, function::__iterator__;}/*for..in*/M:for(var [__iterator__, prop] = *::*.isPrototypeOf(<x/>) in __parent__) {{} } } while((new ({}).hasOwnProperty(( /* Comment */{}))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>.(function::__noSuchMethod__)) {export *;(<x/>); }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var prop = (__noSuchMethod__ = prototype\n) in (+<x/> >=  '' )) {/*for..in*/for(var [__noSuchMethod__, __proto__] = .eval(033) in __parent__ for each (__count__ in <><x><y/></x></>)) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __iterator__) yield; } }");
tryItOut("/*infloop*/do {let __count__;{} } while(()); const prototype;");
tryItOut("(1 for (x in []))const constructor = __parent__ = __iterator__, prop =  \"\" ;");
tryItOut("/*for..in*/for([__iterator__, __count__] = ( /x/g ) in  /x/  :: <x/>.@*) {/*for..in*/for(prototype in  /x/g ) { }M:\tif(<x><y/></x>) {export *; } else  if (<y><z/></y>) {throw <><x><y/></x></>;export *; } else {} }");
tryItOut("switch(constructor.__noSuchMethod__ = {; const __count__;export *;\nwith({prototype: \r[z1,,]}){throw window;var prop = {}, __proto__; }\n }) { default: break; case this.__defineGetter__(\"prop\", [(null.*)]): L:if(<x/>.__defineSetter__(\"__count__\",  /x/ ).hasOwnProperty(\"__count__\")) __count__.@foo; else  if (this) {{} } else {__noSuchMethod__; }switch(false) { case 8: break;  }case 5: break; case 7: break;  }");
tryItOut("/*for..in*/L:for( var prop =  in ) {gc() }");
tryItOut("{;continue M; }");
tryItOut("/*for..in*/M:for(var constructor in (((1 for (x in [])))((new (<x><y/></x>.__defineSetter__(\"__parent__\", ({}).hasOwnProperty).unwatch(\"__noSuchMethod__\"))()))))/*for..in*/for(let __parent__ = (p={}, (p.z = <y><z/></y>.watch(\"__proto__\", Math.sin))()) in (this >>>= /x/g )++) gc()");
tryItOut("/*infloop*/for(const ({ __count__: constructor }) = [<><x><y/></x></> .@x:: <y><z/></y> for (* in <x><y/></x>) for (__count__ in false)]; *::*.propertyIsEnumerable(\"prop\") @ __iterator__ = 0x99; (uneval([[]]))) {}");
tryItOut("if(<y><z/></y>) {gc()(<><x><y/></x></>); } else  if (__count__ =  \"\" ) gc() else {{}gc() }\n");
tryItOut("throw prop;");
tryItOut("/*infloop*/for(<><x><y/></x></>; <x/>; #1=[#1#]) export *;");
tryItOut(";throw <y><z/></y>;/*for..in*/for(let prop in (((this.__defineGetter__(\"prop\", <><x><y/></x></>.*)))(new RegExp(eval(\"this.__defineSetter__(\\\"constructor\\\", eval)\", [11,12,13,14].filter))))){if(({})) { if (*) {(function::__parent__); }} else {export prototype; } }");
tryItOut("__proto__ = __proto__;");
tryItOut("{const prop = [,,z1];yield; }");
tryItOut("/*for..in*/for(var [__count__, __count__] = delete  /x/g  in __count__.valueOf(\"number\")) if(false /= __count__) window; else constructor;{}");
tryItOut("this.zzz.zzz;");
tryItOut("return;");
tryItOut("if(__proto__.__defineSetter__(\"constructor\", function  __iterator__ (__iterator__) { return <x/> } )) {L:with(null)__iterator__; }");
tryItOut("let(__parent__) ((function(){{}})());");
tryItOut("{return  \"\" ; } const __parent__;");
tryItOut("let (__noSuchMethod__) { <y><z/></y>; }");
tryItOut("/*infloop*/for(new function(q) { return q; }(); (new function  (-1) (prop) { return  /x/  } (({a1:1}))); ((p={}, (p.z = new Function)()))) return <><x><y/></x></>;");
tryItOut("do {do {let __parent__; } while((3/0) && 0)\t;(undefined); } while((this.zzz.zzz) && 0);");
tryItOut("if( '' ) { if (*) {}} else {gc() }\n");
tryItOut("L:with([,,z1]){M:with({prototype: null}){*; } }");
tryItOut("throw __parent__");
tryItOut("/*for..in*/L:for(const constructor = [ for (prototype in (this.__defineSetter__(\"__noSuchMethod__\", 'haha'.split))) if (<{prototype}></{prototype}>) for (__count__() in (<x/>.eval( '' )))] in ([, , , __parent__] = ((p={}, (p.z = this)())))) {/*infloop*/for((yield [z1,,]); [15,16,17,18].some(function (prop) { yield (__proto__ = <y><z/></y> for (* in <x><y/></x>) for (__parent__ in <><x><y/></x></>)) } , (1e-81 instanceof try { (@foo); } catch(prototype if __parent__) { throw *; } catch(function::__count__) { continue ; } finally { export constructor; } .constructor = [].eval(033))); /a/gi(RangeError(<><x><y/></x></>))) {var constructor = [z1]; } }");
tryItOut("yield <x/>\ncontinue ;");
tryItOut("for(let y in [5,6,7,8]) (3/0);");
tryItOut("do {(this); } while((1e4) && 0);\nif(const __iterator__ = <x/>, each) new Function else function  __proto__ (__proto__, __noSuchMethod__) { let __parent__; } \n");
tryItOut("L:switch(<x/> ^= undefined) { case ([prototype]): {}case 3: L:if(this) {gc()yield; } else continue M;default:  }");
tryItOut("with({__parent__: [((this)[<x/>])].some((new Function).call)}){const __iterator__, constructor;if(1.2e3) { } }");
tryItOut("{if((eval(\"<><x><y/></x></>.isPrototypeOf([z1])\", (<><x><y/></x></>.__defineSetter__(\"constructor\", <><x\n><y/></x></>))))) /*for..in*/for(var __proto__.__proto__ in ((Math.sin)(__iterator__ = <x><y/></x>)))return <><x><y/></x></>; else  if ((([11,12,13,14].filter)[<><x><y/></x><//h\n/>.__proto__])) {yield;yield <x><y/></x>; } else if((p={}, (p.z = <><x><y/></x></>)())) {return this; } else  if (@foo) {}/*for..in*/for(var function::constructor in (('haha'.split)(prototype = 3))){{}{} } }");
tryItOut("while((function(id) { return id }) && 0)switch(__iterator__ = __iterator__) { case 1:  }");
tryItOut("/*for..in*/for(__iterator__['constructor'] in ((([1,2,3,4].slice).apply)(<bbb xmlns=\"('fafafa'.replace(/a/g, eval))\"><!--yy--></bbb>)))M:with(eval(\" if (prop)\", <x/>).hasOwnProperty(\"__count__\")){{}gc() }");
tryItOut("L:if([,] &= <x><y/></x>) {{} } else yield true;");
tryItOut("/*infloop*/do {} while(5.0000000000000000000000);");
tryItOut("L: { const __parent__;yield  '' ; }L:if((3.@*)) { if ((yield __parent__)) continue M; else this;}");
tryItOut("/*for..in*/for(let __parent__ in <y><z/></y>) {([[1]]);<><x><y/></x></> }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in [15,16,17,18].map(<><x><y/></x></>, <x><y/></x>)) /*for..in*/for(var __noSuchMethod__ = ({}) in this)  /x/g ");
tryItOut("{return;/*for..in*/L:for(const prototype = <><x><y/></x></> in <><x><y/></x></>) ([,,z1]); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in this) {gc()prototype, prototype; }\nreturn;");
tryItOut("/*infloop*/do yield; while([[1,,] if (__noSuchMethod__)]);");
tryItOut("/*for..in*/for(const [prop, __proto__] = 'fafafa'.replace(/a/g, ((new (#1=[#1#])()).@*).apply) in (__proto__.prop)) var __count__ =  \"\" ;");
tryItOut("{with({prototype: [[ /x/  ^ window for (prototype in window) if (<><x><y/></x></>)]].some((new Function(\"break \\n\")))}){return undefined\n\tlet __iterator__ = <><x><y/></x></>; } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/(constructor)-=1e-81++do if(({__noSuchMethod__: (new Function).prototype, __noSuchMethod__: (this.__defineGetter__(\"constructor\", [1,2,3,4].slice))(undefined.__count__, function ([y]) { }) })) {if(<><x><y/></x></>) { if (window) } else {var __iterator__, constructor = prop; } } else const __count__; while(null);");
tryItOut("with({for(let y in []);: (1e-81 >>> <x/>) && (__count__|=<><x><y/></x></>)}){let constructor; }");
tryItOut("if(this) {/*for..in*/for(var prototype in window) {return <><x><y/></x></>; }/*infloop*/M:for(__proto__; {return *;return; }; [<x><y/></x>.hasOwnProperty(\"__count__\")].some((new Function).call)) throw prototype; } else  if (constructor = null.__defineGetter__(\"__count__\", Math.sin)) continue ;");
tryItOut("/*infloop*/for((new Math.pow(__parent__ = __count__)); <x><y/></x> ? __iterator__ : <x><y/></x>; (({}).__lookupGetter__)(this.zzz.zzz, @foo)) break L;");
tryItOut("L: {}");
tryItOut("with(*){export *;(prop); }");
tryItOut("if((uneval(<x/>))) ; else export *;");
tryItOut("return this");
tryItOut("L:  for (constructor in <x><y/></x>) for each (__iterator__ in <><x><y/></x></>)\n<><x><y/></x></>;");
tryItOut("if(prop = eval(\"__proto__\", eval(\"break ;\", (__noSuchMethod__ <= null)))) { if (({ prop: ({ function::__proto__: ({ prop: __noSuchMethod__, prop: prop }) }), constructor: ({ prototype: ({ __count__: constructor }) }) }) = __proto__) {break ;/*for..in*/L:for(const __count__ in (((*::*).watch)([,,z1])))return *; } else export __proto__;}");
tryItOut("switch((<x><y/></x>.isPrototypeOf((__proto__)))) { case 9: L: \t{const prototype; }break; break; case 5: export prop;break; case 0:  }");
tryItOut("/*infloop*/while((!(eval(\"<><x><y/></x></>\", 4.))).valueOf(\"number\"))const constructor, prototype;return;");
tryItOut("/*infloop*/for(const [, , __count__, __iterator__, ] = constructor: __proto__.__noSuchMethod__; (uneval((function ([y]) { })().watch(\"__parent__\", <x/>))); *::*|=(<><x><y/></x></>.yoyo(this))) { }");
tryItOut("if((__count__ = (this.watch(\"constructor\", (Function).call)))) {do try { (-0); } catch(__noSuchMethod__) { (__noSuchMethod__); } finally { (<><x><y/></x></>); }  while((undefined) && 0); } else  if ((gc).call(({ prop: __noSuchMethod__ }) = prop(*::*, window),  /* Comment */0x99)) {(<><x><y/></x></>);gc() }");
tryItOut("/*for..in*/for(let [\f__proto__, prop] = ({ prop: constructor }) in prototype) export *");
tryItOut("prototype = __iterator__;");
tryItOut("let (__count__ = <><xxx {__proto__}\f={[[, , ], __count__] = prototype.yoyo(__count__ = __proto__)} /></>) { const constructor = [1], __count__ = @foo;\t const function::prototype; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*/for(prop = <><x><\fy/></x></> .@ <x><y/></x> in eval(\"{} ? <x><y/></x> : 1.3\", 3)) {for(let y in [5,6,7,8]) try { yield @foo; } catch(prototype if <x><y/></x>) { yield; } catch(__noSuchMethod__ if  \"\" ) { return null; }  }");
tryItOut("<x/>/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in this) ;");
tryItOut("while(((new  \"\" ([1]).__lookupGetter__(\"__noSuchMethod__\"))) && 0){{const __noSuchMethod__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (this)( \"\" ) in (constructor)(null) = prototype|=prop.__iterator__) if((<y><z/></y> <<= null.unwatch(\"__count__\") for ((prototype) in ))) <><x><y/></x></> else {L:if( '' ) let __iterator__, __iterator__; else var __parent__ = <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in (new (({}).hasOwnProperty)(__parent__.prototype getter= ({}).__lookupGetter__, this))) let (prototype = undefined, __parent__ =  \"\" ) { /*infloop*/for(<x/>; function ([y]) { }; <><x><y/></x\n></>) {{\f} } }");
tryItOut("__proto__, ({ __parent__: [({ __iterator__: [__noSuchMethod__, \f, function::prop, __noSuchMethod__], prototype: [, __iterator__, __parent__] }), , ] })");
tryItOut("if(window.isPrototypeOf(5.0000000000000000000000)) {__iterator__; }");
tryItOut("/*infloop*/for(this.zzz.zzz; ({\t__count__: __proto__}); (yield (new function(y) { yield y; ; yield y; }(*::*,  '' ))).throw(<{__proto__}><ccc:ddd><x><y/></x> </ccc:ddd></{__proto__}>)) var prop;");
tryItOut("/*infloop*/for(var prototype = this.zzz.zzz;  /* Comment */window;  '' ) {let (__count__ = __iterator__, __count__ = window) { export *; }([1,,]).call }");
tryItOut("{with({}) { this.zzz.zzz; }  }");
tryItOut("const __noSuchMethod__\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let new (<><x><y/></x></>)(<y><z/></y>, [1])((new -1(<><x><y/></x></>, null))).__proto__ in ( \"\"  |= __noSuchMethod__)) {throw prototype;new Functionwhile((__iterator__[export *;]) && 0){;(true); } }");
tryItOut("/*for..in*/for([prototype, __proto__] = eval(\"export *;\", this).unwatch(\"constructor\") in prototype = 0/0) { const __proto__; }");
tryItOut("gc()");
tryItOut("/*for..in*/for(const prop in ((function  yield (__proto__) { return this.__defineSetter__(\"constructor\", (<y><z/></y>).watch) } )(({ __proto__: \r({ function::__parent__: ({ constructor: [] }) }), __iterator__: ({ __iterator__: prop }) }) = ({prototype: ([((!null))(eval(\"this\", true), __proto__)].map(function(y) { yield y; ; yield y; })), __proto__ setter: (new (undefined)(*::*) ? (__parent__.throw(5.0000000000000000000000)) : (p={}, (p.z = <><x><y/></x></>)())).__defineSetter__ })))){const __proto__; }");
tryItOut("/*infloop*/for(var (<><x><y/></x></>)(<x><y/></x>) = new Iterator(((new Function(\";\")))(<x><y/></x>), <><x><y/></x></>); <bbb xmlns:ccc=\"undefined\"><ccc:eee></ccc:eee></bbb><!--yy-->.((({__iterator__: \nthis}))); ((__iterator__).__defineSetter__ < <x><y/></x> *= *)) {__count__ }");
tryItOut("/*infloop*/while((<y><z/></y>.__parent__ = *::*)){export *;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for(var function::constructor = [15,16,17,18].filter(function(q) { return q; }, <><x><y/></x></>); ; (({constructor setter: Math.pow,  set prop prototype (__iterator__) { yield window }  })).__noSuchMethod__.propertyIsEnumerable(\"constructor\")) {{} }");
tryItOut("{try { throw  '' ; } catch(__parent__ if  ''  & __noSuchMethod__) {  } catch(__proto__ if (function(){return;})()) { __count__, prop = .2; } catch(__count__) { {} } finally {  }  }");
tryItOut("let (__noSuchMethod__) { (if((<y><z/></y>.*\n)) {()) {yield;yield; }}var prop, __noSuchMethod__; }");
tryItOut("default: break; yield;continue ;break; ");
tryItOut("gc()");
tryItOut("while((*::*) && 0)__noSuchMethod__");
tryItOut("return Object((*::* >> *::*), @foo);");
tryItOut("/*for..in*/L:for(const __parent__ in __parent__.__proto__) constructor: (__iterator__ = @foo.hasOwnProperty(\"__proto__\"))");
tryItOut("do 0/0; while(([z1,,]) && 0);");
tryItOut("try { __iterator__ = __proto__; } catch(prop) { let(__proto__ = (function (__count__) { return  /x/  } )(), constructor) { [__parent__] } finally { for(let y in []); }  const __parent__;");
tryItOut("/*for..in*/for(const __proto__ in ((!constructor++)((this.__defineGetter__(\"__parent__\", [1,2,3,4].slice)).throw((eval(\"let { }, __parent__;\", this))))))with({prototype: RegExp(4.)})export prop;");
tryItOut("L:if(({ set __proto__(__iterator__) { return __noSuchMethod__ } ,  get constructor(__parent__, __parent__) { return @foo }  }).hasOwnProperty(\"__proto__\")) {([,]);(@foo); } else  if (new new Function(*.prototype, {})) yield;");
tryItOut("let( { M:if(window) {export *; } else  if ({}) {export __proto__; }\n/*infloop*/do {;, constructor; } while(prototype);\n } ) { yield <><x><y/></x></>;");
tryItOut("if(([@foo for (prop in <x><y/></x>)])()) { if (__count__%=<><x><y/></x></> ^  /x/ .watch(\"__parent__\", (new Function(\"{}\")))) {throw window; } else {{}{} }}\nyield;\t(3);");
tryItOut("if(window.yoyo({}) & this) gc()yield;");
tryItOut("while(( /x/  in <y><z/></y>) && 0)L: <x/>\n{yield *::*; }\t");
tryItOut("let(({ constructor: [({ __parent__: ({ __iterator__: __proto__ }) }), prop, __parent__, ], __iterator__: Boolean(0/0) }) =  /x/g ) ((function(){with({}) {}})());");
tryItOut("{{}{[z1];throw false;\r } }");
tryItOut("return __proto__; const __iterator__;");
tryItOut("with('fafafa'.replace(/a/g, ({}).__lookupGetter__))#3={a:#3#}");
tryItOut("L: continue L;");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in new (0x99)(constructor, window)) const __proto__, prototype;");
tryItOut("{if((__noSuchMethod__.hasOwnProperty(\"prop\") <= <x><y/></x> >>> 1e+81)) gc() else  }");
tryItOut("M:if(<x/>) { if (({})) <x><y/></x>; else return;}");
tryItOut("export __iterator__;");
tryItOut("for(let y in [5,6,7,8]) return (<x/> / this);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in __proto__) {yield\n }");
tryItOut("if(@foo) __count__, __noSuchMethod__ else  if (<x/>) return undefined;");
tryItOut("while((__parent__ -= <x><y/></x>) && 0)gc()");
tryItOut("yield <><x><y/></x></>;");
tryItOut("/*infloop*/for(var constructor;  \"\" .eval(033); __parent__.__parent__) return *::*; const ;");
tryItOut("/*infloop*/for(<x/>;  '' ;  /x/g ) {var __parent__; }\n<x><y/></x>;");
tryItOut("L: {throw <><x><y/>\r</x></>;let __proto__ = window, __count__ = <><x><y/\t></x></>; }");
tryItOut("while((this.__defineGetter__\f(\"constructor\", gc)) && 0){let(__iterator__) ((function(){for(let y in [5,6,7,8]) try {  } finally { return  /x/g ; } })()); }");
tryItOut("1e81;");
tryItOut("/*for..in*/for([__iterator__, __proto__] = (Exception(*::*, [z1])).prop = constructor.({ __proto__: ({ __iterator__: __proto__, prop: __parent__ }) }) getter= __noSuchMethod__.__noSuchMethod__ in __proto__) {this.zzz.zzz; }");
tryItOut("L:switch([prop.watch(\"__proto__\", function  prop (try { break ; } finally { break M; } , prototype) { <x><y/></x> } )].map('haha'.split)) { default: /*for..in*/for(__count__ in false) /*infloop*/for(this; __proto__; 4.) __proto__; }");
tryItOut("if(<bbb xmlns=\"([<x><y/></x>])\"></bbb>) { if ((1.3 <<= 1.3)) return <><x><y/></x></>;} else /*for..in*/for(let prototype in ((({}).hasOwnProperty)(true)))yield this; const prop;L:while((<><x><y/></x></>) && 0)var __iterator__, __iterator__ = true;");
tryItOut("/*for..in*/M:for(let ({ __noSuchMethod__: ({ constructor: __parent__\f }), __noSuchMethod__: ({ constructor: ({ __noSuchMethod__: ({ __iterator__: __noSuchMethod__ }), __iterator__: ({ prop: __parent__, __noSuchMethod__, __noSuchMethod__ = <x><y/></x>: constructor }) }) }) }) in (((__iterator__))(__iterator__ = export *))){var __parent__, prop = (-1);let (({ prototype: ({ prototype: __iterator__ }) })) { Math.sin } }");
tryItOut("(prototype ? <x/> :  '' )\nwith(\nthis){}");
tryItOut("with({prop: Function});");
tryItOut("L:with(<x><y/></x>)");
tryItOut("with({constructor: })L: {(<y><z/></y>\t); }");
tryItOut("{;var __iterator__; }");
tryItOut("{export *;const __iterator__; }");
tryItOut("L:with(new (prototype.(new Array(undefined)))(@foo %= false, <><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", eval))){export *; }");
tryItOut("/*for..in*/L:for(var prototype(new <x/> %= <><x><y/></x></>(<><x><y/></x></>.constructor, false)) in ((new Function)(- /x/ .propertyIsEnumerable(\"__iterator__\"))))/*infloop*/L:for(033 .@x::  /x/ .hasOwnProperty(\"__count__\"); (new (Function)(String())); (<x><y/></x>)(Array(<><x><y/></x></>),  \"\" )) gc()");
tryItOut("if(__parent__ =  \"\" ) L:if(([1,2,3,4].map).call((@foo).watch( /x/g ), @foo = false)) {; } else  if (*) __count__, window = <x><y/></x>;");
tryItOut("/*infloop*/L:for(let ({ prototype: prototype }) = new <x/>(, this); <x><y/></x>.(<x/>); __proto__) var __iterator__ = this;");
tryItOut("/*infloop*/for(__count__; (((false)(false)))[__count__.(<x><y/></x>)]; ('fafafa'.replace(/a/g, function(q) { return q; })).hasOwnProperty(\"__parent__\")) {yield;export *; }");
tryItOut("/*for..in*/for(var [prototype, __count__] = <x/> in window) return __count__;");
tryItOut("false;");
