tryItOut("if(<bbb xmlns=\"this\"> </bbb>) {var __proto__, __iterator__;<><x><y/></x></>; } else  if ((window.unwatch(\"__noSuchMethod__\"))) export prototype; else ;/*for..in*//* nogeckoex bug 349964 */ for  each(prop in constructor) {let __count__, __parent__;export prop; }");
tryItOut("L:with({prop: (prop|=<x><y/></x>)}){{} }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/L:for(const __proto__ = void (__parent__(0x99)) in <y><z/></y>) {{} const prop; }");
tryItOut("return;");
tryItOut("/*infloop*/L:for(let [] = new (<y><z/></y>)(this.__defineSetter__(\"prop\", [1,2,3,4].slice)); <bbb xmlns=\"prop, []\"><ccc:ddd>yield (-0).unwatch(\"prototype\")<!--yy--></ccc:ddd></bbb>; (<><x><y/></x></> .. undefined)) {L:switch((this.__defineSetter__(\"constructor\", gc) ? <x><y/></x>.throw(#1=[#1#]) : -1 >>> <><x><y/>/*\n*/</x></>)) { case 2: /*infloop*/while((yield window))@foo;break; /*infloop*/while(<x/>){{} }break;  }M:while(([,]) && 0){<y><z/></y>;1e81; } const function::constructor; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (__iterator__%=<y><z/></y>\f); this.zzz.zzz.__lookupSetter__(\"prototype\")) {{}return this; }");
tryItOut("{yield constructor; }");
tryItOut("/*for..in*/for(const prop((new (([1,2,3,4].map).apply)())) in eval(\"(<y><z/></y> %= prototype)\", __noSuchMethod__ =  /x/ .hasOwnProperty(\"__noSuchMethod__\"))) {/*for..in*/for(var __noSuchMethod__.constructor in (((constructor = undefined).__defineSetter__)(@foo.__count__.__lookupGetter__(\"__proto__\")))){prop = 3.141592653589793, __noSuchMethod__;yield; }/*infloop*/while( \"\" )3.141592653589793; }");
tryItOut("/*infloop*/for(__iterator__ =  /x/ ; 1e4; this) var __iterator__ = -1;");
tryItOut("return __count__ = [, __iterator__, [], [, __proto__, prototype, ]];");
tryItOut("return;");
tryItOut("with('fafafa'.replace(/a/g, __parent__.__parent__)){__parent__ }");
tryItOut("do {export constructor;(let); } while((({delete: false,  set __noSuchMethod__ __noSuchMethod__ (*::*, undefined, __proto__)#3={a:#3#} }).__proto__) && 0);");
tryItOut("");
tryItOut("if(prop = try { throw this; } finally { <employee id=\"1\"><name>Joe</name><age>20</age></employee> }  % constructor) if(this != <x><y/></x>) export __count__; else __count__; else yield;");
tryItOut("{break ; }");
tryItOut("/*infloop*/do {const __noSuchMethod__; } while(-1.propertyIsEnumerable(\"prototype\"));");
tryItOut("M:with(false >>>=window){throw StopIteration; }");
tryItOut("if((function ([y]) { })()) break ; else {const prop = <y><z/></y>, __count__;return; }");
tryItOut("/*for..in*/L:for(var (__parent__) in __noSuchMethod__.constructor) ");
tryItOut("/*infloop*/for(const [] = (033.isPrototypeOf(<><x><y/></x></>)); new Function((prototype.([,])),  /* Comment */*); (({constructor setter: /a/gi, prop: true }))) 'haha'.split");
tryItOut("L: {__count__ = [[]], prototype;__iterator__ = 1.3; }");
tryItOut("/*infloop*/for(const __proto__; prop = (null); (<x/>)[<x><y/></x>]) {/*for..in*/for(const __parent__ = 3 in undefined) \nvar __count__, prototype = <x/>;export prototype; }");
tryItOut("L:if([[1]]) with(yield (-1)){gc(); } else __count__, __iterator__ = -3/0;");
tryItOut("(__proto__);\nreturn;\n");
tryItOut("/*infloop*/for(prototype(<x><y/></x>) = this.__defineGetter__(\"__proto__\", ([1,2,3,4].map).call); 3/0.__count__;  /* Comment */0x99.watch(\"delete\", [1,2,3,4].slice)) return;");
tryItOut("M:while((prototype) && 0){*\n; }");
tryItOut("var prototype;");
tryItOut("/*infloop*/for( \"\" ; __iterator__; undefined) {return; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in ((function(q) { return q; })(__count__.__proto__ setter= (@foo).__defineSetter__)))throw 5.0000000000000000000000.__lookupGetter__(\"__noSuchMethod__\");");
tryItOut("/*infloop*/M:for(const __iterator__; __count__ = <x><y/></x>; ((yield  \"\" ))) throw  \"\" ;");
tryItOut("/*infloop*/; Date( /* Comment */null); (<x><y/></x>.(#1=[#1#]).unwatch(\"__count__\") % (3/0)(function(id) { return id }) = Number())) {function (__noSuchMethod__, __noSuchMethod__) { yield window }  }\n((1.3)[({a1:1})]\r);\n");
tryItOut("while((this.zzz.zzz ? new function (__iterator__)window() : (-1 *= window)) && 0){@foo;; }");
tryItOut("try { let(prop = [1].hasOwnProperty(\"prototype\")) { throw StopIteration; } finally { prototype = prop; } ");
tryItOut("export *;");
tryItOut("/*infloop*/for(const prop; (*::* << @foo); (__parent__ = true.*)) {yield  /x/ ;export *; }");
tryItOut("const __noSuchMethod__ = x::prop, __noSuchMethod__;");
tryItOut("switch((.(false--))) { case <y><z/></y>: case 8: return <><x><y/></x></>;break; /*for..in*//* nogeckoex bug 349964 */ for  each( in undefined) case 9:  }");
tryItOut("with((uneval(<y><z/></y>))){__iterator__ = constructor; }");
tryItOut("/*infloop*/for(let __proto__; (new ((function(y) { yield y; (__noSuchMethod__);; yield y; }).apply\r)(*::*) >>>=[[<x><y/></x>].__defineSetter__(\"constructor\", [1,2,3,4].slice)]); function(y) { yield y; {}; yield y; }(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) .. ([<xxx {constructor}={(p={}, (p.z = true)())} />])) {return __iterator__.__parent__ = []; }");
tryItOut("prop");
tryItOut("do export __count__;\nconst __proto__, __proto__ = ({a2:z2});\n while((eval(\"/*for..in*/for(__proto__((prototype)) in undefined) ( \\\"\\\" );\", ((uneval( /x/ ))))) && 0);");
tryItOut("L:if(new [z1](null, .2)) { if (~<x/>) ;\n\n} else M:do const prop = window; while((<x><y/></x>) && 0);");
tryItOut("/*infloop*/do {default: {}break; case <x><y/></x>: ;break; case null: break; case <x/>: yield;case <><x><y/></x></>: break ;break; throw <x/>;break; case __iterator__: break; break; break; break; export *;break; yield 0/0;break; case false: throw <><x><y/></x></>;break; case <x/>: break; do {throw false; } while(( /x/g ) && 0) } while((__iterator__.prototype));");
tryItOut("gc(){export __count__;export *; }");
tryItOut("/*infloop*/while(new [1,,]().unwatch(\"__parent__\")){; }");
tryItOut("try { constructor = __proto__; } catch(__proto__ if (function(){return;})()) { return; } catch(__iterator__ if ({function::__proto__: <x><y/></x> >>> <x><y/></x> })) { with({})  } catch(__proto__ if (function(){with({}) { with({}) { throw __count__; }  } })()) { try { return; } finally { let \f(__noSuchMethod__, prop = [,]) { gc() } }  } catch(\fprototype) { /*for..in*/for(var __parent__ = <y><z/></y> in  '' ) {var constructor;break\f ; } } ");
tryItOut("{break ;{} }");
tryItOut("M:while((([-3/0])) && 0)export __proto__\nundefined;");
tryItOut("with({}) let(__parent__ = true, prop = <><x><y/></x></>--) ((function(){prototype.__iterator__ = __parent__;})());");
tryItOut("/*infloop*/while(__parent__.@foo)(0.1);");
tryItOut("/*for..in*/for(var [prop, __parent__] = <><zzz>__noSuchMethod__</zzz></> in window) /*infloop*/while(3/0){\f__noSuchMethod__ =  /x/ ; }");
tryItOut(" const __iterator__;");
tryItOut("L:if(((null.valueOf(\"number\")).valueOf(\"number\"))) do let __noSuchMethod__ = 3/0, __iterator__ = __parent__; while((~[,,] |= eval(\"({}).__lookupGetter__\", undefined)) && 0); else  if (each( '' .__lookupGetter__(\"__noSuchMethod__\")) = ( /x/g  instanceof 3/0).hasOwnProperty(\"prototype\")) {throw new Math.pow(*); } else export *;");
tryItOut("do {yield; } while((<x/>) && 0);");
tryItOut("with({constructor: prototype = <x/>}){/*for..in*/for(var prop in new (Function)(delete false, (-0))) {(window); } }");
tryItOut("var __proto__, __iterator__; const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in ([] = function(y) { yield y; return;; yield y; })) {break L;gc }");
tryItOut("M:switch((eval)(({prop: window }), (__noSuchMethod__)(<x><y/></x>))) { default: switch(<x><y/></x>.(window)) { case ((*)[<x><y/></x>]): break; if() { if ((this.zzz.zzz)) {gc(); }} else {}break; default: break;  }break; break;  }");
tryItOut("try { let(({ __count__: ({ __count__: ({ constructor: ({ __noSuchMethod__: ({ __noSuchMethod__: __proto__, constructor: __iterator__ }) }), __parent__: ({ __iterator__: prop, __count__: ({ constructor: ({ constructor: __proto__, __iterator__: __iterator__ }) }) }) }), prop: constructor }) })) ((function(){(this[@foo])(<><!--yy--></>) = __parent__;})()); } catch(constructor) { /*infloop*/do return; while(*); } ");
tryItOut("L:do if([z1]) {var prototype;L: var __noSuchMethod__ = ({}), __parent__; } while(((__proto__.(function  __noSuchMethod__ (null) { yield <><x><y/></x></> } (constructor)))) && 0)");
tryItOut("/*for..in*/for([prototype, __count__] = ({constructor: --window, __parent__: ({var __noSuchMethod__, prop = <x><y/></x>; }) }) in (__noSuchMethod__.__noSuchMethod__ setter= false)) export *;");
tryItOut("while(( /x/g ) && 0){(window); }");
tryItOut("/*for..in*/for(var __parent__.__parent__ in [,,]) {let prototype; }");
tryItOut("/*for..in*/for(prototype in <x><y/></x>) {export __noSuchMethod__; }");
tryItOut("(1 for (x in []))\n-1;\n");
tryItOut("let (__proto__ = 0.1, __noSuchMethod__ = -1) { return; ({ __count__: __count__, __count__: __iterator__ }), constructor  } for each (constructor in <><x><y/></x></>) ");
tryItOut("(null)(<x><y/></x>)");
tryItOut("/*infloop*/for(true; (arguments >= <y><z/></y>); __noSuchMethod__|=([,])[<x><y/></x>]) {export *; }");
tryItOut("const __noSuchMethod__ =  '' , __count__ = false\nif(false) {} else  if (<x/>) {export *;return; } else gc()");
tryItOut("if(window) gc() else  if (*) <><x><y/></x></>");
tryItOut("{M:if([undefined.*]) {break ;this; } else  if (__count__|=__iterator__.eval(1.2e3)) {export *; } else switch([,,z1]) { default: export prototype; } }");
tryItOut("export __count__;");
tryItOut("/*for..in*/for(var __count__ in (((new Function(\"export __proto__;\")))(<y><z/></y>)))gc()");
tryItOut("L: do ( /x/g ); while((<><x><y/></x></>) && 0);");
tryItOut("/*for..in*/for(let [prop, constructor] = ( /* Comment */null) in (eval(\"<y><z/></y>;\", prop))) if(#1=[#1#]) {(null); const __iterator__; } else  if ([15,16,17,18].some(new Function, 4.))  for each (constructor in false) for (constructor in <x><y/></x>) else return 3/0;");
tryItOut("/*infloop*/\ffor(true; prototype = [15,16,17,18].some(function (prototype, prop)this, <y><z/></y>); (<y><z/></y> % <><x><y/></x></>)) /*infloop*/while(null){export prototype; }");
tryItOut("let (({ __noSuchMethod__: prop, constructor: constructor }) = []) { let __iterator__; }");
tryItOut("M:while((prototype = <x><y/></x> <= <x><y/></x>) && 0)M:with(3/0)(@foo);");
tryItOut("for(let y in [5,6,7,8]) yield prototype\nif(({prop:  /x/g , prop getter: function(q) { return q; } }) %= (*.__lookupGetter__(\"__noSuchMethod__\") ^= ([,,].__lookupSetter__(\"setter\")))) { if (this) <xxx {__proto__}={ \"\" } />} else gc()");
tryItOut("do return (<><x><y/></x></>--); while((('fafafa'.replace(/a/g, (function () { return <x/> } ).apply))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (*.__lookupSetter__(\"constructor\")).__defineSetter__ in let (prototype)  '' ) {/*infloop*/for(yield ([1][ '' ]); @foo.valueOf(\"number\"); (((new Function(\"return;\")))(new  /x/g ( \"\" )))) /*for..in*/for(let prototype = #2=({prop: ()}) in yield undefined) {<y><z/></y>\ncontinue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype(0x99) in ((uneval(prop)))) {gc()while((this || function(id) { return id }) && 0)<x><y/></x>; }");
tryItOut("L:do switch((p={}, (p.z = (033 , <y><z/></y>))())) { default: {continue ; }break; case 4: if((({ get __iterator__(__parent__, prop) { yield \t<><x><y/></x></>.__parent__ = new <x/>(<y><z/></y>) } , prototype:  /x/g  .@*:: <x/> }))) {gc() } else  if () \tbreak; case @foo: var __proto__;case (function(y) { yield y; __parent__ = ({a1:1});; yield y; })(): break; case this.propertyIsEnumerable(\"__iterator__\"): yield;break;  } while(((++n)) && 0);");
tryItOut("if(var __noSuchMethod__ =  '' .valueOf(\"number\")) /*for..in*/for(var prop in __iterator__)  for each (__proto__ in <><x><y/></x></>) for (__proto__ in <x/>) else {with(<x><y/></x>)while(( '' ) && 0)yield <x/>; }");
tryItOut("/*infloop*/for(let *; @foo.__noSuchMethod__; 0/0.eval( /* Comment */true)) {return; }");
tryItOut("{{}yield (__count__ = prop).yoyo(constructor|=true); }");
tryItOut("/*infloop*/M:for(var function::__noSuchMethod__; ({ prop: prop,  { yield <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> } : ({ prototype: [__iterator__, prototype, ({ __iterator__: prototype })] }) }) = prop .@ <><x><y/></x></>; <y><z/></y>) <x><y/></x>");
tryItOut("try { let(__count__, __proto__) { return; } finally { this.zzz.zzz; } ");
tryItOut("M:switch(function ([y]) { }\n) { default: /*infloop*/while(__noSuchMethod__ = @foo){; }case (__parent__. { yield (new (<>return @foo;</>)( /x/g , <y><z/></y>)) } ): export *;break; case : Functioncase 3: /*for..in*/M:for([prototype, __iterator__] = new (1 for (x in []))(constructor = null) in window) {export prototype;let constructor = [1], constructor; }break; case 6: return  /x/ ;break; case default: return <x><y/></x>;break; const __noSuchMethod__, __iterator__;break; break; : break;  }\t");
tryItOut("/*for..in*/for(const function::prop in __iterator__) const prop = @foo, constructor;");
tryItOut("switch(null %= false) { case 'fafafa'.replace(/a/g, (({}).hasOwnProperty).apply//h\n): gc()default: break; break; case 8:  }");
tryItOut("gc()");
tryItOut("this.zzz.zzz;");
tryItOut("with({__parent__: (__proto__ = undefined)}){; }");
tryItOut("/*infloop*/do return 0/0; while((!(\n(*.__proto__ = *)-- > function ([y]) { })) for each (prop in (( /x/ .propertyIsEnumerable(\"__noSuchMethod__\")).constructor) , <zzz> /x/g </zzz>) if (__count__ = *::*)//h\n);");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((*::*.__defineGetter__(\"__proto__\", (function ([y]) { }).__defineSetter__)))(--<x><y/></x>))){{if(window) {(function::__noSuchMethod__);*; } else  if ([,])  }(__iterator__); }");
tryItOut("/*infloop*/do ; while(__noSuchMethod__ = <y><z/></y>);");
tryItOut("with({}) ;");
tryItOut("let(prototype = yield <x><y/></x> ? * : __iterator__ = window, __parent__ =  '' ) { let(({ prototype/*\n*/: [, prop, ], __iterator__: ({ __noSuchMethod__: constructor }) }), __iterator__) ((function(){yield <x/>();})());with(null){switch\t((new (function  __parent__ (__parent__, constructor) \"\" )(<><x><y/></x></>, <x/>))) { default: return;(__count__);case 7: export *;break;  } }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in window) continue M; }");
tryItOut("return ('fafafa'.replace(/a/g, [1,2,3,4].slice));");
tryItOut("prop setter: {export __count__;(false); }");
tryItOut("/*for..in*/for(const __parent__ = this.__defineGetter__(\"__parent__\", #2=<x/>.isPrototypeOf(__count__)) in 1e+81 >>> undefined) {export *;gc() }");
tryItOut("yield <><x><y/></x></>;\nyield ({a1:1});\n\nL:do {return; } while(((yield <><x><y/></x></>)) && 0);\n");
tryItOut("gc()");
tryItOut("with(){}");
tryItOut("/*infloop*/for(prototype; @foo; __noSuchMethod__) {return __count__; }");
tryItOut("/*for..in*/for(let __count__ = 3/0.*.eval(String() - (({a1:1}).valueOf(\"number\")).__lookupSetter__(\"__iterator__\")) in new this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))(__parent__+=this, this).unwatch(\"__iterator__\")) gc()");
tryItOut("if((new (/*\n*/<><bbb xmlns=\"prop\"><!--yy--></bbb> </>)(constructor = prop.__parent__, __proto__\n.__parent__ = (function ([y]) { })().propertyIsEnumerable(\"delete\")))) {this; } else  if (3++) /*infloop*/while(__iterator__ = <!--yy--> 0x99){yield; }");
tryItOut("<y><z/></y>;\nlet constructor = *::*;\n");
tryItOut("function::__parent__ = prototype;");
tryItOut("/*infloop*/L:for(var __iterator__; 3.141592653589793 ? (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(prop = __proto__)) : (<x><y/></x>.( \"\" ) /= <><x><y/></x></> /= [1,,]).yoyo(this[ \"\" ]); (constructor.constructor getter= new Function)) {/*infloop*/do {} while((<x><y/></x>.hasOwnProperty(\"prop\"))); }");
tryItOut("M:if((typeof [11,12,13,14].sort)) { if \n((true.hasOwnProperty(\"__proto__\"))) {export prop;export *; }} else {; }");
tryItOut("/*infloop*/while((this.zzz.zzz))yield;");
tryItOut("M:if((yield prototype + prototype)) { if (new this\n((gc)(prop,  \"\" ),  /* Comment */this)) {return; } else yield;}");
tryItOut("with({}) with({}) { ; } ");
tryItOut("return *;continue M;");
tryItOut("/*for..in*/for(var prop(*\n) in ((Function)(3/0))){/*infloop*/while(<x><y/></x>){{}__parent__; } }");
tryItOut("with((((function (constructor, __proto__) { var __count__; } )(window, *)) >>>=constructor = <y><z/></y>))<x><y\t/></x>");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((new Function(\"if([[]]) export __proto__; else  if (<y><z/></y> ^ <><x><y/></x></> !== (<><x><y/></x></> , constructor)) { }\")))(new RangeError(<x/>))))/*infloop*/while(undefined){return; }");
tryItOut("do window; while((([11,12,13,14].sort)) && 0);");
tryItOut("while(((((('fafafa'.replace(/a/g, (1 for (x in [])))).__count__))[this.__proto__])) && 0){{throw <x><y/></x>;/*for..in*/for(4. in (((<><x><y/></x></>).__defineSetter__)(false.__lookupSetter__(\"prototype\")))){const __noSuchMethod__ = undefined, __iterator__ = null;const prototype = <><x><y/></x></>, __parent__ = __proto__; } } }");
tryItOut("/*infloop*/while(*){return <y><z/></y>; }");
tryItOut("let (prototype = ({a1:1})) { /*for..in*/for([function::__parent__, x::__iterator__] = void 1e-81.@* in (false(<><x><y/></x></>, <><x><y/></x></>)) ^ <x><y/></x> == <y><z/></y>.*)  }");
tryItOut("{;with({prototype: <x><y/></x>}){export function::prop; } }");
tryItOut("while((((eval)(prop))) && 0)return;");
tryItOut("throw #3={a:#3#};/*infloop*/L:for(let prototype = (({ set prop __count__ () { return  /x/  }  })); let (__noSuchMethod__ = *::*) false.__lookupSetter__(\"prop\"); this.__defineSetter__(\"constructor\", (*::*).call))  const __count__;");
tryItOut("while(( '' \n.propertyIsEnumerable(\"__parent__\")) && 0){export __count__; }");
tryItOut("do {let (constructor) { x::__proto__ = <>__proto__</>, prop = <><x><y/></x></>; } } while((prototype = <x/>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__(<x/>) in ({a2:z2})) {return #3={a:#3#}; }");
tryItOut("/*infloop*/while(((window.valueOf(\"number\")\f)([11,12,13,14].sort, <y><z/></y>))){break M;export __noSuchMethod__; }");
tryItOut("return <x/> -= <><x><y/></x>\t</>;");
tryItOut("\ngc()\n");
tryItOut("/*infloop*/while(1e81.__noSuchMethod__.isPrototypeOf(( '' .yoyo(<y><z/></y>))))var prototype = arguments, constructor = __iterator__;");
tryItOut("throw <x><y/></x>\n");
tryItOut("with({}) yield (yield (<><x><y/></x></>.eval(0/0)));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in [z1]) {/a/giexport prototype; }");
tryItOut("let __count__ = null, __parent__;\nif((yield <x><y/></x>)) { if (false.*) 3;} else ({}).hasOwnProperty\n");
tryItOut("/*for..in*/for(const __iterator__.prop in <y><z/></y>) {let __count__, constructor = <><x><y/></x></>;throw <y><z/></y>; }");
tryItOut("{{} }");
tryItOut("{return;;gc() }");
tryItOut("{if(__parent__+=(()(function ([y]) { }, (function ([y]) { })()))) { if (eval(\"*\", \t<><x><y/></x></>)) var __noSuchMethod__, prototype; else {{} }} }");
tryItOut("{}");
tryItOut("{( /x/g );__noSuchMethod__; }");
tryItOut("while((--((uneval(<><x><y/></x></>)))) && 0)");
tryItOut("let (({ prop: __noSuchMethod__ }) = <x><y/></x>[*::*], __count__) { gc() }");
tryItOut("if(<x><y/></x>[this]) { if (*) {return 3.141592653589793; } else {function  __iterator__ (__iterator__, __parent__) { const __proto__; } return 1e-81; }}");
tryItOut("if(({ __iterator__: <y><z/></y>.__noSuchMethod__, __parent__: ({ constructor: ({ __parent__: constructor, prop: __noSuchMethod__ }) }) }) = return  /x/ ) {/*for..in*//* nogeckoex bug 349964 */ for  each(let function::constructor in *) {*::*;throw this; }__count__; }");
tryItOut("{if(__proto__) {yield; } else  if (5.0000000000000000000000) gc()do {yield; } while((((<x><y/></x>case ((function(q) { return q; })()): break; default: break; case ([1,2,3,4].map).call([,,z1] % false <=  /x/g , --this, prototype = false): function  constructor () { __parent__; } case 6: break; break; case 1: break; case if( /x/g ) { if (@foo) export *;} else {return;([1,2,3,4].map).apply }: continue M;case (__parent__ = 0x99 > ) / ++ /x/g : /*infloop*/for(let __iterator__; [,,z1]; <x><y/></x>) (null);case [15,16,17,18].sort(null, constructor.constructor getter= (<x><y/></x>).__defineSetter__): (<x><y/></x>);break; case 8: export *;break; ))) && 0); }");
tryItOut("/*infloop*/for(let __proto__; ({ get prop(prototype, __iterator__) { yield <><x><y/></x></> } , prop: <x/> }).__parent__; ({}).hasOwnProperty(3/0)) break L;");
tryItOut("M:while((\f(<!\f--yy-->.((new ([z1] /= 0 &= (new (null)([,,z1]))))).__lookupSetter__(\"prototype\"))) && 0){if((__proto__ = __noSuchMethod__ > true(function ([y]) { }, undefined))) {const prop;yield <x/>; } else  if (new Function()) let __parent__ =  /x/ ; else {continue M; }/*for..in*/M:for(__count__.prop in this.__defineGetter__(\"__count__\", ({}).__lookupGetter__)) return;\f }");
tryItOut("if(String()) {yield;gc() } else  if ([15,16,17,18].map((function(q) { return q; }).call, this)) return *;");
tryItOut("/*infloop*/for([,]; (); (-3/0.valueOf(\"number\") .@*:: <><x><y/></x></>)) {__noSuchMethod__;{} }");
tryItOut("<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>");
tryItOut("L:with({__proto__: (__proto__.prop getter= (1 for (x in [])))}){/*infloop*/for(#1=[#1#];  /x/ ; *::* if (0x99)) {{} } }");
tryItOut("let (({ __noSuchMethod__: __noSuchMethod__ }) = \n({a2:z2}).throw(({a2:z2}).watch(\"prototype\", 'haha'.split)), ({ let: __iterator__, __iterator__: __noSuchMethod__ })) { yield (let (__proto__ = (function ([y]) { })()) constructor); }");
tryItOut("throw __noSuchMethod__; const __proto__;");
tryItOut("let (__iterator__, __noSuchMethod__ = new *().hasOwnProperty(\"prop\") if ((function (prop, __noSuchMethod__) { yield __count__ } )())) { /*for..in*/for(const __proto__ = ({constructor:  /x/ ,  get prop() { yield <> \"\" </> }  }) in  \"\"  >>= <x><y/></x>) {return; } }");
tryItOut("/*for..in*/for(var __iterator__ in prop = <x><y/></x>) {this; }");
tryItOut("constructor = prop, __count__\n");
tryItOut("export function::prop;");
tryItOut("<x><y/></x>");
tryItOut("{prop = <x><y/></x>, prototype; }");
tryItOut("if(null) { if (new (Math.sin)(0/0) .@ (<><x><y/></x></>)) {__noSuchMethod__ = [,], __parent__; } else {gc() }}");
tryItOut("/*infloop*/while( { return prototype } )[]");
tryItOut("return 0;");
tryItOut("(<x><y/></x>)\n(function(q) { return q; }).call");
tryItOut("M:while((arguments) && 0){gc(){} } const function::constructor;");
tryItOut("return (((<y><z/></y>))()\n);");
tryItOut("with({}) let prop = undefined, prop = <><x><y/></x></>\n");
tryItOut("export delete; const __parent__;");
tryItOut("return  /x/g ;");
tryItOut("if(window) {if(#1=[#1#]) { if (<x/>) \f{__iterator__; }} else {{}yield <><x><y/></x></>; }return; } else {yield <x><y/></x>; }");
tryItOut("/*for..in*/M:for([prototype, __noSuchMethod__] = [,].prototype = <><x><y/></x></>.throw(<y><z/></y>.__lookupSetter__(\"__proto__\")) in (-0).__parent__) ");
tryItOut("/*for..in*/for(var __parent__ in [,,]) export prop;");
tryItOut("with({__iterator__:  /* Comment */(this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty))}){/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in \n '' ) continue L; }");
tryItOut("switch(()) { default: break; break; break; case 8: ;break; case 9:  }");
tryItOut("if(eval(\"(eval(\\\"window\\\", new (-0)(window, *)))\", [z1,,] === <x><y/></x>)) M:while((yield <><x><y/></x></>) && 0){default: let __iterator__;break; yield; } else {with({__parent__: <><x><y/></x></>})k }");
tryItOut("/*for..in*/for(let __proto__ in (((false).__defineSetter__)(((<x><y/></x>)[<><x><y/></x></>]))))return 1e+81;");
tryItOut("if((* >>=  \"\"  :: constructor = new (<x><y/></x>)())) { if ('fafafa'.replace(/a/g, [1,2,3,4].map)) {/*infloop*/for(({ __noSuchMethod__: __parent__ }) =  /x/g  / prop; constructor; (__noSuchMethod__ = <><x><y/></x></>)) {return arguments; } }} else switch( /x/ ) { default:  } const __proto__;");
tryItOut("M:switch((<><xxx>{prop}</xxx></>.propertyIsEnumerable(\"prop\"))) { \tcase 1e81: break; default: gc()\nvar prop =  /x/ ;\ncase 3: break; case 7: continue'  constructor, __iterator__ L;case new function  __iterator__ (__count__) { return 1e81 } ([z1].eval(window), @foo): throw .2;break; case 9: break;  }");
tryItOut("{yield this; }");
tryItOut("{if(#3={a:#3#}) {export __noSuchMethod__;function  __count__ () { yield this }  } else {; }gc() }");
tryItOut("return <x/>\neval");
tryItOut("/*infloop*/L:for(<x/>; <><x><y/></x></>; <x><y/></x>) export *; const prototype;");
tryItOut("return *;\nif(*) gc()\n");
tryItOut("/*infloop*/do {*;var __proto__; } while(new (/a/gi(<><x><y/></x></>)) <<= #1# *=  \"\" (false.unwatch(\"__parent__\").watch(\"__count__\", Math.pow))\n);");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*/for(const constructor in ((eval)(-3/0.@*.propertyIsEnumerable(\"__proto__\"))))__parent__ = <x/>;");
tryItOut("this");
tryItOut("if(({prop setter: eval })) {/*infloop*/do { } while(<x><y/></x>);/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__() in __noSuchMethod__) export *;\nthrow <x/>;\n } else  if (eval(\"(<><x><y/><\\n/x></>.unwatch(\\\"prop\\\")++)\", </*\n*/><>window <= __iterator__</></>)) {while((<><x><y/></x></> && this) && 0)var __count__; }");
tryItOut("/*for..in*/++(!\t(3.@foo)) in [15,16,17,18].map((new Function(\";\")),  /* Comment */true)) /*infloop*/for(var prototype; [[z1]].map(Function); yield @foo) do export *; while(( /x/g ) && 0);");
tryItOut("if(window(<x><y/></x>)) {; } else  if (__count__) { }");
tryItOut("{export __count__;L: export *; }");
tryItOut("/*for..in*/for(let ((Boolean()\n)) in ((function  constructor () { var constructor; } )((__iterator__.__parent__ = <x><y/></x>.(*))))){/*for..in*/for(__iterator__ = __noSuchMethod__ = <x><y/></x>.__parent__\f in <x><y/></x>) <x><y/></x>;/*for..in*/for\t(let __iterator__ in <y><z/></y>) return; }");
tryItOut("let (__iterator__ = (this)[<><x><y/></x>\t</>]) { /*infloop*/for(var __noSuchMethod__; this.__defineGetter__(\"__iterator__\", ({}).__lookupGetter__); prototype.isPrototypeOf(undefined)) /*infloop*/for(var __noSuchMethod__ = 1e-81; <x><y/></x>; [,]) {{} } }");
tryItOut("do {return <x><y/></x> } while((\nfalse.hasOwnProperty(\"__proto__\")) && 0);");
tryItOut("if(*::* | this) {var constructor, constructor = @foo;const __parent__; }");
