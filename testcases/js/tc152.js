tryItOut("export *;\nbreak L;\n");
tryItOut("switch(<y><z/></y>) { default:  }");
tryItOut("/*for..in*/M:for(const [\f__noSuchMethod__, prototype] = (--(undefined).call(<x><y/></x> /= @foo, )) in null.__noSuchMethod__) return;");
tryItOut("export __iterator__\n");
tryItOut("__proto__, __count__ = [[1]];/*infloop*/do {yield [[1]]; } while(<><x><y/></x></>);");
tryItOut("yield {};");
tryItOut("export __iterator__; const __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("gc()");
tryItOut("this.zzz.zzz;");
tryItOut("{}");
tryItOut("export prototype;\n;\n const prototype;");
tryItOut("do L:if((({__iterator__ setter: ((<x><y/></x>[<><x><y/></x></>])).watch, __noSuchMethod__: window }) <<= (prop = __parent__ for (__count__ in 0.1) for (__parent__ in  '' )).__lookupSetter__(\"constructor\"))) throw <><x><y/></x></>; else {/*for..in*/for([__noSuchMethod__, __proto__] = <x/> in <x><y/></x>) (__proto__);/*infloop*/for(var __proto__ = <x><y/></x>; true; undefined) {const constructor, __parent__; } } while((__iterator__.prototype) && 0);");
tryItOut("/*for..in*/for(let ((.2)(constructor)) in ((Math.sin)((Exception()))))yield; const prototype;");
tryItOut("L: {/*for..in*/M:for(__count__ in ((Function)(prop())))yield <x><y/></x>; }");
tryItOut("with({prop: this.zzz.zzz}){M:if((prototype.([,])))  else  if (yield this) 0; }");
tryItOut("/*infloop*/for(var ({ constructor:  }) = this.__defineSetter__(\"__proto__\", ({}).hasOwnProperty); __parent__ = (<x/>(__noSuchMethod__));  /x/g .__lookupSetter__(\"__iterator__\")) {{}gc() }");
tryItOut("/*infloop*/for(const __parent__ = /*\n*/new 0.1(); (p={}, (p.z = 0x99.__lookupGetter__(\"__noSuchMethod__\"))()); arguments( '' , this)) {{__count__;var __proto__, __iterator__ = <x><y/></x>; } }");
tryItOut("{__count__, __parent__ = true;if(4.) { if (__parent__.unwatch(\"__proto__\")) return [[]]; else break ;} }");
tryItOut("/*infloop*/for(this; prototype; __noSuchMethod__) yield @foo;");
tryItOut("if((__proto__.prop)) { if (({ new Function: prop }) = this.__defineGetter__(\"prop\", function(q) { return q; })\n) (this).watch\n else {(((<><x><y/></x></> for each (__proto__ in  /x/g )))); }}");
tryItOut("L: {yield; }");
tryItOut("M:switch(yield <x><y/></x>) { case 9: {}break; default: case 0: break;  }");
tryItOut("while((<><x><y/></x></>) && 0)__parent__ = __parent__;");
tryItOut("let __iterator__, __parent__ = 033; const __count__;");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, __count__] = <x/> in -3/0) export __parent__;\nthrow *;\n");
tryItOut("/*infloop*/do {for(let y in [5,6,7,8]) throw __proto__; } while(__parent__ ? null : this);");
tryItOut("/*infloop*/for(({ __proto__: ({ __proto__: ({ constructor: [] }) }) }) = __parent__ = window; undefined ^= <x/> /= constructor; prototype = __iterator__ = -3/0) {}");
tryItOut("if(<><><ccc:ddd><!--yy--></ccc:ddd></></>) {let __parent__ = 0;with({__proto__: this}){return; } }");
tryItOut("if(1e81) {return window;(this); } else export *;");
tryItOut("throw prototype;");
tryItOut("if(3/0) { if (<x><y/></x>) { }} else __proto__;");
tryItOut("switch(prop.eval(*::*)) { case @foo.unwatch(\"__proto__\"): yield <y><z/></y>;break; ;break;  }");
tryItOut("M:do {break L; } while((([z1,,] ? <x><y/></x> : __proto__)) && 0);");
tryItOut("({ __iterator__: __proto__ }) = ((uneval( \"\" )))");
tryItOut("M:if(*) { if (__proto__) export __noSuchMethod__; else export __parent__;}");
tryItOut("if(('fafafa'.replace(/a/g, (function(q) { return q; }).apply))) {return *; } else  if (([3/0].map(({}).hasOwnProperty))) {/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in ({a1:1})) gc() }");
tryItOut("L:while(([,,z1] .@  ''  * (#1=[#1#].watch(\"prop\", [1,2,3,4].slice)\t)) && 0)gc()");
tryItOut(";");
tryItOut("__iterator__ = prototype; const constructor;");
tryItOut("/*infloop*/while([,,]){( /x/ ); }throw __proto__;");
tryItOut("throw prototype;");
tryItOut("for(let y in []);");
tryItOut("with({__count__:  '' }){var __count__, __noSuchMethod__;L:if(3.141592653589793)  }");
tryItOut("M:if(*::*.yoyo(__proto__)) { if (_) L:if(<x><y/></x>) { if (window) (-0);} else {return; } else {export *; }}");
tryItOut("return __noSuchMethod__;\nyield *::*;\n\n");
tryItOut("gc()");
tryItOut("/*for..in*/for(const __iterator__ = <x><y/></x> .@*:: this in ([__proto__, ] = ({ __count__: ({ constructor: constructor, prop: prototype }), __count__: [__iterator__, , , , ] }\t))) {if(*) { if (null) throw false;} else {;return *; }const prototype; }");
tryItOut("switch(('haha'.split)()) { default: yield;break;  }");
tryItOut("__parent__ = <x><y/></x>;");
tryItOut("L: {__proto__; }");
tryItOut("M:if((function  __iterator__ ()<><x><y/></x></>).call(prop, )) { if ((--<x><y/></x>)) {export *; }} else {{}throw __parent__; }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = <><x><y/></x></>; undefined; <x/>) {export *;(<x><y/></x>); }");
tryItOut("while((window) && 0)(this);");
tryItOut("/*infloop*/L:for(var __count__; #1=[#1#]; __count__ = __iterator__) while(((<x><y/></x> for (constructor in arguments))) && 0)[1,2,3,4].map");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in constructor.hasOwnProperty(\"constructor\") + undefined) {yield; }");
tryItOut("/*infloop*/while(<><x><y/></x></> >>= <x><y/></x>)var window = <x/>, __count__;");
tryItOut("while((<{__iterator__}><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></{__iterator__}>) && 0){<x/>, <x><y/></x> }\n");
tryItOut("{{}return; }");
tryItOut("\flet __parent__, constructor;\n{}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in this) throw 1e4;");
tryItOut("if(((yield <y><z/></y>))) {return; } else {(__proto__);let __iterator__, __noSuchMethod__ = *::*; }");
tryItOut("/*infloop*/for(var prop = this = this.__defineSetter__(\"__noSuchMethod__\", Function).valueOf(\"number\"); __iterator__.__count__ = __iterator__.__count__ = [this].some(function(q) { return q; })--; (__noSuchMethod__.__iterator__)[(({__count__:  \"\" }))]\r) with([ /x/ ].sort(/a/gi))export __count__;");
tryItOut("/*for..in*/M:for(let constructor in 1.3) /*for..in*/for(let (__noSuchMethod__) in <x/>) {continue ; }");
tryItOut("try { constructor; } catch(prop if (function(){var prop, __proto__;})()) { gc() } catch(constructor if (function(){throw <><x><y/></x></>;})()) { return <x><y/></x>; } catch(prototype if (({__parent__: [[1]]}))) { window; } finally { throw <x><y/></x>; } ");
tryItOut("return;");
tryItOut("yield ({a1:1}); const __proto__;");
tryItOut("/*for..in*/for(var __proto__ = ((__noSuchMethod__)(this)) in <y><z/></y>) {gc()const prototype = <x/>; }\n/*infloop*/for([, , , __proto__] = #1=({__proto__: __iterator__}); (this.__defineSetter__(\"prototype\", (__parent__).call)); (<x/>)) {export *;<x><y/></x> }\nreturn this;\n");
tryItOut("if(3/0--) {evalyield __parent__; }");
tryItOut("do {M:switch( '' ) { case 9: return 1.2e3;break; const default: break; ;break; default: break; case 5: continue ;break;  } } while(((<x/>.__lookupSetter__(\"prototype\"))) && 0);");
tryItOut("L: {__noSuchMethod__, prototype; }");
tryItOut("/*infloop*/do break M; while(0.1.watch(\"prototype\", 0));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in this) __iterator__");
tryItOut("M:with(__parent__ = <x><y/></x>){export *;const prop, __noSuchMethod__; }");
tryItOut("/*for..in*/for(__iterator__ = <x/> in constructor|=__proto__.@*) /*infloop*/for(prototype; ({}); 1.3) var __count__ = 1.2e3;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in [(__parent__ = *::*) for (__iterator__ in window) if ([,,z1])]) yield;");
tryItOut("/*for..in*/\tfor(var (<x/>.__noSuchMethod__)(this) in (#1#)(<x/>) + ({}) += *) {export *;if(this.__defineSetter__(\"__noSuchMethod__\", eval)) {yield undefined;const __count__ = this; } else {return; } }");
tryItOut("export *;");
tryItOut("/*infloop*/do yield; while(-((@foo for (prototype in false))));");
tryItOut("{yield; }");
tryItOut("if(([11,12,13,14].filter)) { if ((new Boolean())(<><x><y/></x\t></>)) var prototype, __count__; else x::prototype:  /x/  .@*:: <x><y/></x>}");
tryItOut("if((<x/>.watch(\"__count__\", (new Function(\"(({a1:1})).watch\")))).__count__ = __count__ = 0.1) {const prop;false; }");
tryItOut(";");
tryItOut("/*for..in*/L:for([prop, __parent__] = __proto__.(((function  constructor (__noSuchMethod__)1e+81).call(prop,  /x/ , *::*))) in ([15,16,17,18].filter((1 for (x in [])), <><x><y/></x></>))) {([1]);/*infloop*/for(var prop; *::*.prop; window == *) export *; }");
tryItOut("/*infloop*/for(({constructor setter: Math.sin, __noSuchMethod__: *::* }); window; ([11,12,13,14].sort << (prop = __noSuchMethod__) >> <><bbb xmlns=\"\">/<//*</>)) {;if(function  delete ()-3/0) { if (#1#) var __iterator__, prototype = constructor;} else {yield __count__;\t } }");
tryItOut("let (({ __parent__: prototype, __iterator__: ({ __iterator__: prop }) }) = ~<x><y/></x>) { do {let __iterator__ = window, constructor = <y><z/></y>;try { const __noSuchMethod__; } finally { function  prototype () { return -0 }  }  } while((constructor.(((<x/>--) === (\n<><x><y/></x></>)))) && 0); }");
tryItOut("if((prop , function ([y]) { })) { if ((function(y) { yield y; /*infloop*/for(const __iterator__; <x/>; <x><y/></x>) (new Function(\"var __proto__ = #1#, __iterator__;\")); yield y; }).call((({__parent__: ({a2:z2}) })), __proto__+=this.__defineGetter__(\"__count__\", ({}).__lookupGetter__), *::*\n)) {L:  } else {{} }}");
tryItOut("prop = __iterator__;");
tryItOut("with({}) __count__ = __count__;");
tryItOut("/*infloop*/while(\n*::*){}");
tryItOut("/*for..in*/for(let constructor = return 0 in __noSuchMethod__) {break L;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in this) {var __iterator__, Function; }\n/*infloop*/do {export *; } while( '' );\n");
tryItOut("L:with((<><x><y/></x></> ? true : [z1,,] - (new (\fMath.pow)(<><x><y/></x></>, @foo)))){(true);/*infloop*/for(__count__ = 1e-81; prototype;  /x/ ) {export prototype; } }");
tryItOut("{/*infloop*/L:for(__count__ = eval(\"(__parent__ = (new prop()))\", (((-1) >=  /x/g ).__iterator__ = constructor -= *)); prototype.__count__ = this.__count__ = function(id) { return id } .@x:: <x><y/></x>; (new <x><y/></x> += true('fafafa'.replace(/a/g, (-1).watch)))) {return this; }M:if( '' ) {yield <><x><y/></x></>;yield <><x><y/></x></>; } else {(<x/>);break L; } }");
tryItOut("{\tyield [[]]; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__count__) in ++<x><y/></x>.(<x><y/></x>)) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in @foo) /*infloop*/for(const __iterator__; <><x><y/></x></>\t; null) {(<y><z/></y>); }with({__proto__: [11,12,13,14].map}){/*infloop*/for(constructor;  /x/ ; <x><y/></x>) {continue M;window; } } }");
tryItOut("/*for..in*/L:for(__count__ in ((((Math.pow).call(({}), this, *)))(this)))var prop = <x><y/></x>;");
tryItOut("/*infloop*/while(__proto__ = <x><y/></x>){throw null; }");
tryItOut("L:if(__iterator__\n.__defineGetter__(\"__count__\", function (__parent__)({a2:z2}))) { if ([(({constructor: window.__parent__})) ^ ]) /*infloop*/for(let __iterator__; (yield <x><y/></x>); (arguments <= *::*)) {eval }} else {/*infloop*/L:do try { yield; } catch(__parent__ if (function(){<><x><y/></x></>;})()) { let prototype =  /x/ , __iterator__; } catch(__count__ if (function(){throw __parent__;})()) { ; } catch(__proto__) { \rthrow #1#; }   ; while(4.); }");
tryItOut("/*infloop*/M:do {<x><y/></x>;gc() } while( \"\" .__proto__);");
tryItOut("/*for..in*/for(var 0/0['__parent__'] in (( '' )((undefined | prototype)))){}");
tryItOut("/*for..in*/for(let prototype in RangeError(prop, ( \"\"  == 1e+81))) /*infloop*/while((prop = __noSuchMethod__.hasOwnProperty(\"function::__iterator__\"))){export *;__count__ = __proto__, constructor = 5.0000000000000000000000; }");
tryItOut("/*infloop*/for(constructor; (function ([y]) { })(); false) export __noSuchMethod__;");
tryItOut("yield  /x/ ;");
tryItOut("/*for..in*/for(constructor in (([1,2,3,4].slice)(__iterator__.constructor = constructor))){let prototype, constructor; }");
tryItOut("export __noSuchMethod__;");
tryItOut("if((new Array(this.zzz.zzz))) { if ((constructor.prototype = (<x><y/></x>.__lookupGetter__(\"__count__\")))) /*infloop*/for(var __iterator__; (yield <x><y/></x>); true--) __proto__;} else M:if((*::* if (false))) { if (<x><y/></x> = 1.2e3) let prototype;} else eval\n\n");
tryItOut("throw true\nreturn prototype;");
tryItOut("let(__proto__) ((function(){yield;})())");
tryItOut("/*for..in*//* nogeckoex bug 349964 */{}");
tryItOut("if(((function (x::__iterator__)eval(\"<x><y/></x>\",  { /*infloop*/for(const __noSuchMethod__ =  /x/ ; window; prop) {export constructor;yield; }\f } ))((null).watch)) %= function ([y]) { }) { if ([,].valueOf(\"number\")) null else {yield <x><y/></x>; }}");
tryItOut("/*infloop*/L:while(yield @foo)L:with({__iterator__: ('fafafa'.replace(/a/g, new Function).__defineGetter__(\"__iterator__\", function ()'fafafa'.replace(/a/g,  (__noSuchMethod__/* { var __count__; } )))}){yield <y><z/></y>;export function::__noSuchMethod__; }");
tryItOut("/*infloop*/for([, , , ({ function::__proto__: __iterator__, __iterator__: __count__ }), ] = <y><z/></y>; __proto__ = <x/>; (function () { return function ()(<x><y/></x>)( \"\" , <x/>) } ())) {gc() }");
tryItOut("{/*infloop*/while(0)yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__ in __count__) let (x::__count__ = -3/0) { return; }");
tryItOut("return <><x><y/></x></>\nwith( \"\" )const __noSuchMethod__ = ({}), constructor = <><x><y/></x></>;yield;");
tryItOut("switch((constructor((__count__ ? -3/0 : <x><y/></x>)(prop = window)) = \nnull.isPrototypeOf(eval(\"undefined\", 0)))) { default: /*infloop*/for(*; <x><y/></x> /= (-0); undefined.unwatch(\"prototype\")) {yield;(<><x><y/></x></>); }break; /*infloop*/do __count__, __iterator__; while(__count__.__parent__ = window ? ([z1]).watch : [1].@*);while((<><x><y/></x></>) && 0){;__iterator__ } }");
tryItOut("/*infloop*/L:for(<x><y/></x>; <y><z/></y>; *) throw *::*;\ncontinue ;\n");
tryItOut("/*for..in*/for(let prop =  /* Comment */(prop.unwatch(\"prop\")) in yield window) ({}).__lookupGetter__\nthrow 1e4;\n\nif(1e-81) {export *; } else  if (this) const , prototype; else {export *; }");
tryItOut("L:do continue ; while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.__noSuchMethod__ = 0.(__parent__ = #3={a:#3#})) && 0);");
tryItOut("switch(yield *::*.__defineSetter__(\"constructor\", (arguments).apply)) { default: /*infloop*/do return; while(__iterator__.__lookupSetter__(\"0x99\"));break; L:do break L; while((prototype) && 0);break; case window: break;  }");
tryItOut("if(@foo) { if ( '' ) {yield <><x><y/></x></>;export __noSuchMethod__; }} else break ;");
tryItOut("/*for..in*/for(const (<><x><y/></x></> >= @foo.unwatch(\"prop\")).prototype in ((new Function)(__noSuchMethod__))){return;return; }");
tryItOut("[1,2,3,4].map");
tryItOut("if(void 033) Function else  if ((((function(id) { return id })) if (this)).propertyIsEnumerable(\"__count__\")) {}");
tryItOut("switch(-1) { default: if(__parent__.(prop |= @foo)) { if ([(*::*(*::*, <>\f<x><y/></x></>))].filter(function (__count__)-1)) {prototype, prop = 0;export 0.1; }} else switch(<x><y/></x>) { case null: case 6: (<><x><y/></x></>);break; yield this;break; (<x><y/></x>);\tbreak; ; }break; break; case yield this: case ([({ constructor: ({ __noSuchMethod__: __noSuchMethod__, prop: prop }), prototype: ({ prop: __proto__, prototype: __count__ }) }), [, let, ], ] = +<><x><y/></x><//*\n*/>): let(__iterator__) { try { throw __noSuchMethod__; } catch(__proto__ if (function(){throw __iterator__;})()) { for(let y in [5,6,7,8]) false; } catch(function::prop) { for(let y in []); } finally { for(let y in [5,6,7,8])  }  }");
tryItOut("L: {<x><y/></x>;yield 0.1 }");
tryItOut("{throw 1.3;\nvar constructor = constructor;\n }");
tryItOut("{const prototype = <x><y/></x>;; }");
tryItOut("/*infloop*/do 1e4; while(([15,16,17,18].some(window, @foo)));");
tryItOut("/*infloop*/for(new this.eval(window); ([1] + #1#); (yield (eval(\"continue L;\", 1.2e3 | <><x><y/></x></>)))) M:if(this.prototype) {export *;var return <><x><y/></x></>;, prototype; } else export prop;");
tryItOut("if( /x/ .eval(function  __iterator__ (__parent__) { gc() } )\n) {L:with({prop: (yield 3/0.constructor)})let (constructor) { if( \"\" )  { return __iterator__ }  else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {export *;let constructor = <><x><y/></x></>, __noSuchMethod__; } else yield; } } else  if (*) /*infloop*/L:for([constructor] = <x/>.hasOwnProperty(\"null\"); (__proto__ = function ([y]) { } == (-0)); ({case <x/>: gc(): [false].some(gc)})) do {throw @foo;return <y><z/></y>; } while((#0=<y><z/></y>) && 0); else /*infloop*/for(const constructor;  /x/ ; undefined) __noSuchMethod__.hasOwnProperty(\"__iterator__\")");
tryItOut("with({constructor: <y><z/></y> ? <><x><y/></x></> : *::*})let (prop) { throw <x/>; }");
tryItOut("/*for..in*/for(let __parent__ = (<x/>[1e4]) in new true(<x><y/></x>, <x><y/></x>)) {var __count__; }");
tryItOut("let (constructor)throw prototype; }");
tryItOut("L: {yield; }");
tryItOut("export *");
tryItOut("/*for..in*/\ffor(let prototype = null in true) {return;( \"\" ); }");
tryItOut("/*infloop*/for(let constructor; __iterator__; __proto__.valueOf(\"number\")) {with({prop: arguments}){{; } } }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("throw __parent__;");
tryItOut("while((new function () { yield <x/>.@* } ((function::__noSuchMethod__ = (-1)))) && 0)gc()\n\f");
tryItOut("if((<x><y/></x>).watch((p={}, (p.z = <x/>)()))) { if (constructor.(@foo >> __iterator__)) gc()} else {; }");
tryItOut("if(([ '' ].filter(Math.sin))) let __parent__ = <y><z/></y>, __count__ = <x><y/></x>; else ;");
tryItOut("/*infloop*/while(-0)L: return false;");
tryItOut("for(let y in []);");
tryItOut("L:if( /x/ ) { } else {var prop, __proto__ = <><x><y/></x></>;continue L; }");
tryItOut("if((yield <x><y/></x>)) { if (<x/> >>>=<y><z/></y>) this else {export *; }}");
tryItOut("switch([[], ({ constructor: ({ __parent__: prop }) }), ({ __count__: [], prop: ({ constructor: __parent__, __iterator__: prop }) })] = new function (<><x><y/></x></>, prototype){}//h\n(0.__defineSetter__(\"__iterator__\", Math.sin), __noSuchMethod__).__lookupSetter__(\"prop\")) { default: break  const prototypewhile(((constructor.__iterator__\n @ [__proto__ if (<><x><y/></x></>)])) && 0){throw <y><z/></y>;\n{}\n }break; break;  }");
tryItOut("/*for..in*/for(const __count__ in ((new Function)(false.propertyIsEnumerable(\"__noSuchMethod__\")))){return <><x><y/></x></>;yield function ([y]) { }; }");
tryItOut("M:if(<y><z/></y>) {export prop; } else {var __parent__; }");
tryItOut("/*for..in*/for(const constructor = (<zzz>('fafafa'.replace(/a/g, (function(y) { yield y; {}; yield y; }).call))</zzz>([(new (<x/>)(([[]].__defineGetter__(\"__iterator__\", /a/gi)))) if (<x><y/></x>)], ([z1] if \t(window))) > new (function(q) { return q; })()) in *::*.hasOwnProperty(\"constructor\") / (undefined( /x/g , <x/>))) {(-0); }");
tryItOut("if((<><{prop}><bbb xmlns:ccc=\"__parent__\"><ccc:eee></ccc:eee></bbb><ccc:ddd><!--yy--></ccc:ddd></{prop}></> if ((<><x><y/></x></>++)))) let prototype = ({});; else  if (<{__count__}> </{__count__}>) {M:switch((let (prop) ([,,z1] %  \"\" ))) { default: break; yield\nreturn @foo;break; case 1: if(function(id) { return id }) export *; else  if (0.1) {export __noSuchMethod__; } else {export __iterator__; }export __noSuchMethod__; }gc() } else return  '' ;");
tryItOut("L: ");
tryItOut("export *;");
tryItOut("({}).__lookupGetter__");
tryItOut("L:if(__noSuchMethod__.prop = ({a1:1}).@*.yield) (function  __parent__ (__noSuchMethod__, __count__) { 3/0; } )(#3={a:#3#}).__defineSetter__(\"function::prototype\", (__noSuchMethod__).__defineSetter__) else {yield;{\t} }");
tryItOut("if(<{__proto__}>yyy</{__proto__}>.([z1].yoyo((null << <y><z/></y>).yoyo(( /x/ .__defineSetter__(\"constructor\", function  __proto__ () { yield <><x><y/></x></> } )))))) {export *; } else {{}return; }");
tryItOut("L:if(([,,] instanceof prototype = <y><z/></y>)) (<x/>); else  if (undefined) prototype =  { yield this } ;");
tryItOut("L:if(@foo) { if ([__noSuchMethod__].filter(((yield true)))) {continue ;/*for..in*/for(let ([__count__ for each (__iterator__ in <x/>)])(0x99) in ((Math.sin)((new <x><y/></x>(window).__lookupSetter__(\"__count__\"))))); }} else (*)(<><x><y/></x></>) = constructor;");
tryItOut("with({}) with({}) const __proto__;");
tryItOut("if(@foo ? <><x><y/></x></> :  \"\" ) { if (({__noSuchMethod__ getter: Function, constructor getter: new Function })) {export __count__;return (-1); }} else {throw ({a1:1}); }");
tryItOut("with({}) { for(let y in [5,6,7,8]) let([] = (), __noSuchMethod__ = (3.141592653589793)(__parent__|=@foo)) { this.zzz.zzz; } ");
tryItOut("/*infloop*/for(this.__lookupSetter__(\"prop\"); __noSuchMethod__ = <x><y/></x>; (*).call(<><x>\f<y/></x></>,  /x/ )) (undefined);");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; ({__count__: (delete (function ([y]) { })() %= ({a1:1}))});  /x/ ) M:if((constructor.(__count__.__parent__ getter= /a/gi))) /*infloop*/for(var try {  } catch(__parent__ if #1#) { @foo; } catch(__parent__) { <x><y/></x>; } ;  '' ; <x><y/></x>) {(<x><y/></x>); } else {{} }\n");
tryItOut("break ;");
tryItOut("export * const prototype;");
tryItOut("/*for..in*/for(let __iterator__ in [11,12,13,14].filter) if(<x><y/></x>) prototype, constructor else  if (window) {export *;__iterator__ = __count__, __iterator__; } else {return  /x/ ; }");
tryItOut("let (__proto__ = ( \"\" )\f, prop) { let __count__ = 3, __proto__; }");
tryItOut("return *; const prototype;");
tryItOut("with({__iterator__:  /* Comment */<y><z/></y>.hasOwnProperty(\"__count__\").hasOwnProperty(\"constructor\")}){(*::*)\n }");
tryItOut("M:with({__iterator__: (yield <x/> ? * : *)})__iterator__, constructor =  /x/g ;");
tryItOut("with({prototype: (eval(\" /x/g \", @foo))})export *;");
tryItOut("((function ([y]) { })())\n{}");
tryItOut("if(__count__ =  \"\" ) throw @foo; else  if (*) let __parent__, __iterator__\n else continue L");
tryItOut("L:if(((\t{ set prototype __count__ (prototype) { return <x><y/></x> }  }))) { if (3.141592653589793.__lookupGetter__(\"constructor\")) {(<x><y/></x>);yield; } else {export *; }}");
tryItOut("continue ;");
tryItOut("/*infloop*/L:while(([null].map(function  prototype (prototype) { return [,,z1] } ))){;/*for..in*/for(var __proto__ = <x/> in <x><y/></x>) export *; }");
tryItOut("yield\n__noSuchMethod__;*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (__iterator__) in eval(\"true\", <x><y/></x>) ? ((yield null)) : __count__ = undefined) {break ; }");
tryItOut("getter = -3/0, __iterator__");
tryItOut("/*for..in*/for(var __count__ = eval(\"(yield <x><y/></x> >= <x><y/></x>)\", prototype.(undefined) >>>=()) in __parent__) {with(undefined)0/0;eval }");
tryItOut("M:if(<><xxx>{yield}</xxx></>) return;");
tryItOut("{ else {yield this;throw  \"\" ; }/*infloop*/for(var prototype; (__count__ = __proto__.__defineSetter__(\"__iterator__\", function  prop () { yield <y><z/></y> } ) for each (__parent__ in __noSuchMethod__)); (-0)) function(y) { yield y; {}; yield y; } }");
tryItOut("/*infloop*/M:do {; } while(4.);");
tryItOut("M:switch(#1=[<y><z/></y>]) { case 4: const __iterator__, function::__parent__;default: function  constructor ( { yield prototype } ) { yield __proto__ } {}break;  }");
tryItOut("if((( /x/g )('fafafa'.replace(/a/g, ({}).__lookupGetter__)))) { if (*) (new Function(\"\"))} else {/*infloop*/for((({constructor getter: -3/0 })); ((false for each (constructor in  '' ))); let (constructor = <><x><y/></x></>, try { var __parent__, __count__ = -3/0; } catch(__proto__ if null) { __noSuchMethod__; } catch(prop) { yield (-0); } ) null) (prototype); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var  for (prop in  /x/g ) in ((prototype.constructor getter= [1,2,3,4].map)())) {if(<><bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb></>) new Function else  if ((eval(\"switch(*) { case <x/>: \\treturn <y><z/></y>;default: gc()case 1: <x><y/></x>case <x><y/></x>: throw undefined;break; case <y><z/></y>: break; case #3={a:#3#}: case 6: case ({}): return __count__;break;  }\", (new  /x/ ( '' ))))) {export __count__;return 033; }switch( \"\" ) { default:  } }");
tryItOut("{while((window) && 0)gc() }");
tryItOut("/*for..in*/for(var [prototype, __noSuchMethod__] = ([[1]][({})]) in __iterator__ = __parent__ = true) ");
tryItOut("with(((function  constructor (__noSuchMethod__) { return <x/> } ).call(\fthis, ))){({}).__lookupGetter__ }");
tryItOut("return;");
tryItOut("yield [15,16,17,18].map((1 for (x in [])), (<y><z/></y>.eval(3.141592653589793)));");
tryItOut("/*infloop*/M:for(const __count__ = this.__defineGetter__(\"__count__\", function (__proto__, __noSuchMethod__) { yield #1=[#1#]; } ); new Boolean(</><x><y/></x></>); constructor+=<x><y/></x> < this) {switch(<><x><y/></x></>) { default: yield;break; break; case *::*: return -0;break;  } }");
tryItOut("/*for..in*/M:for(const \fyield (uneval(<y><z/></y>))['prop'] in <y><z/></y>) {; }");
tryItOut("gc()\n//h\nfunction  prototype () { yield <x><y/>\f</x> } \n");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let \n__parent__ in undefined/) {with({__count__: @foo})let prototype; }");
tryItOut("return null;");
