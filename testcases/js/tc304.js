tryItOut("return (new function (__iterator__) { yield constructor } ([prop if (prop)], __parent__));");
tryItOut("L: /*for..in*/for([__parent__, prototype] = ((p={}, (p.z = this)())) in window) return;");
tryItOut("/*for..in*/for([(new \nconstructor = 3, prototype = undefined;(prototype ? true : [,],  \"\" ))].some(Math.pow) = <x><y/></x>.__lookupGetter__(\"prototype\").__count__ = this.__defineGetter__(\"__proto__\", <><x><y/></x></>) in ((prototype = __count__) >= prototype.(<y><z/></y>))) {yield <y><z/></y>; }");
tryItOut("if(<x><y/></x>) {1e81;var constructor = prop, prototype; } else  if (({})) {(<><x><y/></x></>);return; }");
tryItOut("if(([11,12,13,14].map).yoyo(__iterator__ = #1=[#1#].valueOf(\"number\"))) {constructor; } else  if (window) {}");
tryItOut("L:do {/*infloop*/for(let prototype; ( /x/g .eval(__iterator__)) |= export *; ([(yield true)].filter((1 for (x in []))))) {export __proto__;gc() }export constructor; } while((0.1) && 0);");
tryItOut("/*infloop*/for(let __noSuchMethod__; function ([y]) { }; window.* >>>=<x/> += <x><y/></x>) /*for..in*/M:for(prototype in ((undefined)(-3/0.__defineGetter__(\"constructor\", (new Function(\"continue ;\")))))); const __count__;");
tryItOut("/*for..in*/for(const function::__iterator__(<x><y/></x>) in __iterator__) {let prop; }");
tryItOut("while(( /x/g ) && 0){do {function(q) { return q; } } while((undefined) && 0); }");
tryItOut("if(4.) {<y><z/></y>; }");
tryItOut("do {throw .2; } while((<y><z/></y>) && 0);");
tryItOut("{}");
tryItOut("/*infloop*/for(((yield <xxx>{__noSuchMethod__}</xxx>)) % .prop; (eval(\"(<x/>.__defineSetter__(\\\"prototype\\\", @foo)\\n)[(uneval(-1)).@*]\", ((constructor).__count__ = (((new Function(\"return;\"))).call(1e81, false, undefined))))); continue ) \nreturn [z1,,];");
tryItOut("if(<x><y/></x>.(<x><y/></x>)++) {/*for..in*/for(__parent__.constructor in null) if( '' ) {;\t } else  if (#3={a:#3#}) return 1.2e3; } else {do {yield; } while((__count__.__defineGetter__(\"__noSuchMethod__\", function () { yield 3/0 } )) && 0); }");
tryItOut("/*infloop*/do {yield undefined; } while(({ __count__: function::__iterator__ }) = __parent__);");
tryItOut("/*for..in*/for(var prop in window) {const __count__ = <y><z/></y>, constructor; }");
tryItOut("if(__iterator__) {var prototype, prototype; } else  if (<x><y/></x>.(window)) /*for..in*/for(let __noSuchMethod__ in ) {;yield *::*; }");
tryItOut("/*for..in*/for(let prototype in (((1 for (x in [])))(__noSuchMethod__))){export *; }");
tryItOut("if(eval(\"<x><y/></x>\", this)) {(1e-81);export *; }");
tryItOut("/*infloop*/do L: (@foo); while((__proto__.__count__));");
tryItOut("return  \"\" ;");
tryItOut("yield __parent__;");
tryItOut("let (__parent__\t) { ([z1,,]); }");
tryItOut("throw __noSuchMethod__;");
tryItOut("with((<x/>.__defineGetter__(\"prop\", (1 for (x in []))))()){return;yield; }");
tryItOut("L: return [[]];");
tryItOut("if((<>constructor</> , 1e4.__defineGetter__(\"__count__\", function (__iterator__) { return function::__parent__ } )).__lookupSetter__(\"__count__\")) { if (new *::*\f.__lookupSetter__(\"prop\")(let (constructor =  \"\" ) prop)) let prop = <><x><y/></x></>;} else ");
tryItOut("L:if((gc())\n) yield <><x><y/></x></>;");
tryItOut("while((<><x><y/></x></>) && 0){break L;(<x><y/></x>); }");
tryItOut("try { __parent__ = constructor; } catch(__proto__)//h\n { throw __iterator__; } finally { let(__proto__) { throw @foo; } ");
tryItOut("if(window) {export __proto__; } else  if (1e81) \fthrow <x/>;");
tryItOut("this.zzz.zzz;");
tryItOut("if(<x><y/></x>.hasOwnProperty(\"prototype\")) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in true) continue M; ({ prototype: ({ prototype: [__iterator__, prop, , try { return constructor; } finally { return; } ], function::constructor: ({ prop: prop, __proto__: constructor }) }), constructor: ({  { yield [] } : __parent__, prop: prop }) }) =  /x/g  ");
tryItOut("");
tryItOut("export *\n");
tryItOut("L: {(<x><y/></x>); }");
tryItOut("var prop, __proto__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__([z1,,].eval(false).propertyIsEnumerable(\"__iterator__\")) in [,,] , false) /*for..in*/for([__iterator__, constructor] = throw <x><y/></x>; |= undefined in <><x><y/></x></>) {throw false;{} }");
tryItOut("M:if(__noSuchMethod__ =  '' ) {let __count__ = 0, prototype = null;export *; } else  if ( \"\" ) (__proto__); else const __parent__, __parent__;");
tryItOut("return;");
tryItOut("while((1.3) && 0){switch([<><x><y/></x></> for (__parent__ in <x><y/></x>)]) { case 9: ;case 3: var constructor = false, prototype; } }");
tryItOut("/*infloop*/while([__count__, , prop, , ] = (__noSuchMethod__ + (function ([y]) { })()))return;");
tryItOut("return <><x><y/></x></> = __noSuchMethod__ = <zzz><><x><y/></x></></zzz>;");
tryItOut("return;");
tryItOut("/*for..in*/for(let [prop, prop] = <y><z/></y> in undefined) {prototype; }");
tryItOut("{{([[]]); } }");
tryItOut("/*for..in*/for(let __parent__ in <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {throw __count__;gc() }");
tryItOut("/*infloop*/for(__proto__ = <x/>; null; false) {; }");
tryItOut("for(let y in [5,6,7,8]) ;");
tryItOut("do {[1,2,3,4].slice } while((prototype) && 0);");
tryItOut("with({__iterator__: (new (__parent__-=<x><y/></x> && <x><y/></x> >> (yield ((function(y) { yield y; ( \"\" );; yield y; })())))((new <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>(this.zzz.zzz, [ \"\" ])), 1e-81))})continue M;");
tryItOut("/*infloop*/M:for\f(const prototype = 1e81 instanceof constructor = __noSuchMethod__; __iterator__ <<=  /x/g ; (__parent__.constructor getter= -3/0)) {gc() }");
tryItOut("if(({prototype: [15,16,17,18].map(gc,  '' ) = (<x><y/></x>.throw(<x><y/></x>)) })) { if (null.@foo) (-0);} else M:do (<><x><y/></x></>); while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/M:for(var __iterator__; (prop = __count__.watch(\"constructor\", /a/gi)); \n0) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in function(id) { return id }) {continue ; }export *;");
tryItOut("while((true) && 0){return new (gc)(<x/>); }");
tryItOut("this\n\nreturn  /* Comment */ '' ;\n");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in  /x/ ) ;");
tryItOut("if(( /x/ )) { if ([11,12,13,14].map) yield;} else {}\n");
tryItOut("if((__iterator__ = __iterator__)) {throw true; }");
tryItOut("constructor.constructor = __iterator__;");
tryItOut("let (__proto__, prop) { /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <><x><y/></x></>) const __noSuchMethod__, try { gc() } catch(__noSuchMethod__) { {} } ; }");
tryItOut("continue M\n");
tryItOut("/*for..in*/for(let <><x><y/></x></>, [1] in null) {const __proto__ = <y><z/></y>;while((<x><y/></x>) && 0){} }");
tryItOut("/*infloop*/L:for(var __noSuchMethod__ = ; true.*; new function (__noSuchMethod__)function(id) { return id }(3/0).valueOf(\"number\")) {yield this; }");
tryItOut("this.zzz.zzz;");
tryItOut("do __noSuchMethod__ = prop; while((window) && 0);");
tryItOut("/*infloop*/L:for(prop = (*.propertyIsEnumerable(\"constructor\")); ((__proto__[<y><z/></y>]) = <y><z/></y>); [11,12,13,14].sort) {throw function::__count__; }");
tryItOut("{throw  \"\" ;yield; }");
tryItOut("switch(<><x><y/></x></>) { default: gc()break;  }");
tryItOut("switch(({__count__: (p={}, (p.z = 3)()) })) { case 9: if(<x><y/></x>) { if (1.3) /*\n*/{__proto__ = ({})return; } else __noSuchMethod__ = window, __count__ = *::*;}break; default: break;  }");
tryItOut("L:if(<x><y/></x>) { if (window) {yield __parent__;yield *; }} else {return;return __noSuchMethod__: *::*; }");
tryItOut("yield;");
tryItOut("(true)\nvar function::__parent__ = [,,], __noSuchMethod__;");
tryItOut("M:do return 1e81; while(( /x/g ) && 0);");
tryItOut("if(window[*]) {(#1#); } else  if (__count__ = {} = window) {let constructor = [[]], __count__; }");
tryItOut("/*for..in*/for(const prototype in <x><y/></x> >>> <x><y/></x>) {continue \nvar __iterator__;const prototype = <><x><y/></x></>; }");
tryItOut("if((get = window).watch(\"prop\", Function)) {return;yield; } else {;let __noSuchMethod__ = prototype; }");
tryItOut("/*for..in*/for(__count__ in (((@foo).__defineSetter__)((__iterator__ =  \"\" ))))yield prop;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = let (constructor, __count__)  /x/g  in  /x/g ) {var __parent__, __parent__ = <y><z/></y>;continue L; }\nthrow  '' ;");
tryItOut("yield constructor = @foo;");
tryItOut("/*for..in*/M:\nfor(var __count__ in ((window)(default: break; )))\treturn;, __proto__;");
tryItOut("/*infloop*/{let constructor; }for(\rlet __count__ = Function > <><x><y/>\f</x></>; (uneval(arguments)); [z1,,]) {/*infloop*/for(var ({ __count__( '' ): ({ __proto__: constructor }) }) = <x/>.hasOwnProperty(\"__proto__\") ? this == 1.3 : this.__proto__; this.__defineGetter__(\"prop\", function  __proto__ () { return * } ); (Math.pow).call(__iterator__ -= *::*, prototypefunction ([y]) { })) {yield; } }");
tryItOut("with(<><x><y/></x></>)return;");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = (0.1.watch(\"__parent__\", ({}).__lookupGetter__) | ++[[1]]).unwatch(\"__iterator__\"), __count__) ((function(){for(let y in [5,6,7,8]) yield --((__proto__).__parent__ = ( /* Comment */constructor));})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in (<x><y/></x>.propertyIsEnumerable(\"__proto__\")))  { let __proto__; } ");
tryItOut("L:if((window.throw(true))) { if (@foo.prop) {yield;const __iterator__ = <x><y/></x>, __proto__; }} else {break ; }");
tryItOut("/*infloop*/for(let prop = window; (-1); true) __parent__");
tryItOut("/*for..in*/for(constructor in ((function (prop, __proto__) { throw __proto__; } )(#2=({constructor: window})))){const prop; }");
tryItOut("constructor, constructor\n");
tryItOut("if(( /* Comment */5.0000000000000000000000)) (@foo); else  if ((delete function ([y]) { })) {{}continue ; } else {}");
tryItOut("M:while(((prop = this)) && 0){(function (constructor) { yield __count__.({ constructor: function::__proto__ }) setter= <y><z/></y> @ this.__defineGetter__(\"__proto__\", function  get (__count__) { yield *::* } )__parent__ } ).call; }");
tryItOut("throw <><><ccc:ddd><!--yy--></ccc:ddd></></>;");
tryItOut("/*infloop*/L:do return (function ([y]) { })(); while(<x><y/></x>)");
tryItOut("if(eval(\"<><x><y/></x></>\", <x><y/></x>)) {let prop = #1=[#1#];yield [,,z1]; } else  if (0 /= <x><y/></x>) ;");
tryItOut("M:if((<><x><y/></x></> for each (prototype in <><x><y/></x></>)/*).valueOf(\"number\")) {<x/>;throw arguments; } else  if ([(-0 if (prototype))].some((function::__parent__.(<y><z/></y>)))) gc() else ;");
tryItOut("/*for..in*/L:for(const prototype in ((this)(({each:  /x/g })))){const __parent__ = <><x><y/></x></>;yield; }");
tryItOut("M:with(__parent__)yield true;");
tryItOut("/*infloop*/for(*::*; [Array()]; (yield ( /x/ ).call(<><xxx>{__parent__}</xxx></>, (window -= <><x><y/></x></>), <x><y/></x> ^ <><x><y/></x></>)\f)) {\rexport *; }");
tryItOut("if(0.1) { if (*::*) __iterator__, constructor = <x/>;} else ");
tryItOut("export *; const __count__;");
tryItOut("let prop, __parent__ = <x><y/></x>\n/*infloop*/for(prototype =  /x/ .watch(\"prototype\", <><x><y/></x></>); new __noSuchMethod__(arguments)\t.__parent__; (#3={a:#3#}[false] %= (p={}, (p.z = <y><z/></y>)()))) switch((RegExp(undefined, *::*))) { default: gc()break; case <x/> -= [,,]: ; }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("if(yield ((<><x><y/></x></> === <x><y/></x>)(null.valueOf(\"number\"), *) if (<x/>))) __count__ else  if (__iterator__ = __parent__\t) {}");
tryItOut("if(({__proto__: (__noSuchMethod__.(<><x><y/></x></>)) }).yoyo(<bbb xmlns=\"<x><y/></x>\"> </bbb>).__proto__ = (let (__parent__ =  /x/ ) 'fafafa'.replace(/a/g, (this).watch))) {while(( /x/ ) && 0)break L; } else  if (((new Boolean())[([3.141592653589793].some(window))]).__defineSetter__(\"prototype\", Math.sin)) (true);");
tryItOut("if(<><>yyy</></>) {yield <x><y/></x>;{export *; } } else  if ([__proto__] = window.__defineSetter__(\"__count__\", __parent__)) {gc(); }");
tryItOut("if(true) { if (<x/>) yield <><x><y/></x></>; else {}}");
tryItOut("L:if((new (033)(new  (<x/>.yoyo( switch ).hasOwnProperty(\" return \")), *::*))) ((p={}, (p.z = -3/0)())\f.__noSuchMethod__ = ( /x/g )[<y><z/></y>]).__defineSetter__");
tryItOut("{;export *; }");
tryItOut("L:do {/*for..in*/for(var [__proto__, __noSuchMethod__] = 033.propertyIsEnumerable(\"__noSuchMethod__\") in 1.2e3) var ; } while((([11,12,13,14].some)) && 0);");
tryItOut("return (((__iterator__)-=[<y><z/></y> for (__proto__ in <x><y/></x>)]) << __count__);");
tryItOut("/*infloop*/for(prop; \f__proto__ = window == this.eval(1e81); <x><y/></x>.unwatch(\"__count__\")) /*for..in*/for(prop(\n<x/>) in ((function (__noSuchMethod__) { yield (1.2e3.__defineGetter__(\"constructor\", function () { yield 0/0; } )) } )(((/a/gi)(__noSuchMethod__ = <x><y/></x>, window)))))/*for..in*/L:for(var [__count__, __iterator__] = <x/> in 3.141592653589793) {{} \"\" ; }");
tryItOut("do eval while(((constructor.__proto__) @ try { <x><y/></x>; } catch(__count__ if <><x><y/></x></>) { /a/gi } catch(__noSuchMethod__) { return *; } ) && 0);");
tryItOut("if( /x/g ) {\t@foo;const __count__; } else return  /x/ ;");
tryItOut("try { return [1]; } catch(prototype if __count__) {  } finally { export *; } ");
tryItOut("L: if(__parent__) export *; else  if (__proto__) gc() else ");
tryItOut("/*for..in*/for(__noSuchMethod__ in *) __noSuchMethod__");
tryItOut("/*for..in*/for(let prototype in ((//h\nprototype%=<>__count__.prototype</>)(__iterator__))){var __parent__, prototype = @foo;yield; } const prototype;");
tryItOut("yield");
tryItOut("L:with({__count__: String(<x><y/></x>.(<x/>))})\n");
tryItOut("if(true <= constructor) { if (({ __proto__: [, prototype, , __count__, ], function::__iterator__: ({ []: ({ __parent__: __iterator__ }), prop: __noSuchMethod__ }) }) = (1e4 ? <y><z/></y> : <x><y/></x>).eval(new (0/0)(*))) throw {};\nreturn false;\n else export prototype;}");
tryItOut("/*infloop*/while(true.eval(__noSuchMethod__)){export prop;let  enum ; }");
tryItOut("/*for..in*/for(const prototype = new try { {} } finally { gc() } () in window in constructor) {{} const __iterator__\nreturn;export *; }");
tryItOut("return (__iterator__ = window);");
tryItOut("yield #3={a:#3#};");
tryItOut("if(<><x><y/></x></>) var __proto__, __count__ = <x/>; else {break ; }");
tryItOut("yield this ? __count__ , <x><y/></x> : ({prototype: <><x><y/></x></> });");
tryItOut("try { with({}) try { return; } catch(__noSuchMethod__) { const __noSuchMethod__ = <x><y/></x>; }  } catch(__proto__) { for(let y in []); } ");
tryItOut("/*infloop*/L:while([ '' ].some(function(y) { yield y; Function; yield y; })){yield <><x><y/></x></>;export *; }");
tryItOut("let (({ __parent__: __proto__ })) { return <><x><y/></x></>;\nlet (__parent__ = null, __proto__ = window) { {} }\n }");
tryItOut("this.zzz.zzz;");
tryItOut("return *::*;");
tryItOut("throw ({a1:1});");
tryItOut("([[1]]);");
tryItOut("L:if(<><x><y/></x></>.__proto__) /*infloop*/L:do {yield;export *; } while(1.3); else {const __parent__ = this, __iterator__;throw function ([y]) { }; }");
tryItOut("M:if((__count__ = window).hasOwnProperty(\"__proto__\")) {throw <><x><y/></x></>;gc() } else  if ((*::* = ({ set __iterator__ __proto__ (constructor) { {}\n } ,  get prop __proto__ () { return window }  }))) {return __parent__; }");
tryItOut("{yield <x><y/></x>; }");
tryItOut("/*infloop*/for(let __proto__; (__iterator__ = __iterator__); (String(<x/>))) {return;{} }");
tryItOut("with(('fafafa'.replace(/a/g, [1])))let (__iterator__ = true.__lookupSetter__(\"__proto__\"), __noSuchMethod__) { /*for..in*/for(let prop in __proto__) {{} } }");
tryItOut("/*for..in*/for(__parent__ in [[]]) {export function::__proto__;return (function ([y]) { })(); }");
tryItOut("if((prototype = null)( \"\"  ? undefined : <><x><y/></x></>, *::*).__defineGetter__(\"__parent__\", function  constructor (__count__) { return  \"\" .* } ) ? (__proto__ = <x/>)\n : <y><z/></y>) if(window) return this; else  if (window) {({}).__lookupGetter____count__ } else {gc()export __count__; }");
tryItOut("L: {continue ;try { break ; } catch(__noSuchMethod__) { return; } finally { return <y><z/></y>; }  }");
tryItOut("with({prototype: prototype.(__noSuchMethod__.prop getter= ({}).hasOwnProperty)}){(({}).__lookupGetter__).applylet (__parent__ = function::constructor) { return; } const __count__; }");
tryItOut("switch(<x><y/></x>) { case 0: break;  }");
tryItOut("/*infloop*/while((#1#).watch()){gc()/*for..in*/L:for(let constructor = <x><y/></x> in (function ([y]) { })()) var constructor = 1e4; }");
tryItOut("if(<><x><\ty/></x></>) { if (<><x><y/></x></>) const prop = __count__, prop;} else {(undefined).watch }");
tryItOut("do {{continue ; } } while(((++*) && .2) && 0);");
tryItOut("{if(<x/>) {export *; }const prop; }");
tryItOut("gc()");
tryItOut("/*infloop*/do (<x><y/></x>); while(*::*);");
tryItOut("{const prop; }");
tryItOut("var constructor, __iterator__;");
tryItOut("if(__iterator__ = <x><y/></ __proto__ x>) {/*infloop*/do {return <x/>; } while(this);prototype; } else  if (((prop)) , (yield (let (constructor = <y><z/></y>, __proto__) (((new Function(\";\"))).call( \"\" , *))))) if( \"\" ) { if ([[]]) @foo;} else {([1]); } else return;");
tryItOut("with({})  /x/g  = prop;");
tryItOut("if(window[<><x><y/></x></>]) break L;");
tryItOut("/*infloop*/do return [z1]; while(RangeError());");
tryItOut("{/*infloop*/while(<x/>.propertyIsEnumerable(\"prototype\"))return undefined; }");
tryItOut("L:if(this.__defineGetter__(\"__parent__\", false)) continue L; else  if ) /*(<\fx><y/></x>); else /*\n*/*;");
tryItOut("/*for..in*/for(const __iterator__ = --this in ;) return;");
tryItOut("/*infloop*/for(let ({ function::prototype: __iterator__, prototype: __noSuchMethod__ }) = prop((<x><y/></x>.watch(\"prop\", [1,2,3,4].map))) = <><bbb xmlns=\"<><x><y/></x></>\"></bbb></>; __count__ = __proto__;; (<x><y/></x> || @foo).constructor) [1,2,3,4].sliceexport *;");
tryItOut("L: if(window) yield; else  if (()) {export prototype; }");
tryItOut("if((prop.throw(<><x><y/></x></>.__lookupGetter__(/*\n*/\"prototype\")))) { if (('fafafa'.replace(/a/g, function ()))) {continue ;yield <><x><y/></x></>; }} else {yield;yield window; }");
tryItOut("constructor;;");
tryItOut("function::constructor;yield 3/0;");
tryItOut("/*infloop*/for(var __parent__; window; #1=[#1#]) ");
tryItOut("L: <x><y/></x>");
tryItOut("switch((@foo).__proto__ =  /x/g .__defineGetter__(\"constructor\", eval)) { case (uneval(__count__ = <y><z/></y>.watch(\"constructor\", (<x/>).apply))): with(*::* || <><x><y/></x></>)export __iterator__; }");
tryItOut("/*infloop*/for(let __proto__; <><xxx {__proto__}={(this['constructor'] = {})} /></>; __count__|=<y><z/></y>.propertyIsEnumerable(\"__parent__\")) M:with({prototype: window.prop}){(this); }");
tryItOut("for(let y in [5,6,7,8]) break L;");
tryItOut("return;\nfunction (prop) { return *::* } \n");
tryItOut("L:if((new Date().yoyo(window |=  '' ))) Math.powvar getter = -3/0, prop = 1e-81; else /*for..in*/for(const constructor in window) ; const prototype;");
tryItOut("M:with({__count__: (yield __proto__ < ({a1:1}))}){;var __count__; }\n");
tryItOut("{}");
tryItOut("/*for..in*/for(const <x><y/></x>['prop'] in (new ()((-1)))) continue ; const prototype;\n/*infloop*/for(get; 'fafafa'.replace(/a/g, [1,2,3,4].slice); [undefined :: [1,,]].sort(function (function::__iterator__, let) { return * } )) with([z1])break M;\n");
tryItOut("({ __proto__: __count__ }) = __iterator__;");
tryItOut("export 3.141592653589793;");
tryItOut("if(void __count__) {var function::__count__ = true;(__count__: <y><z/></y>); } else  if (({ prototype: constructor }) = <><x><y/></x></> &  /x/ ) {gc() }");
tryItOut("throw function(id) { return id }\n");
tryItOut("var __count__;");
tryItOut("/*for..in*/for(const __parent__ = (<x/>)(<x><y/></x>) = function ([y]) { }.constructor in <y><z/></y>) {gc() }");
tryItOut("{} const __iterator__\n");
tryItOut("prop = constructor;");
tryItOut("/*infloop*/propdo {__noSuchMethod__, __proto__;throw <x><y/></x>; } while(__proto__.__proto__ getter= function(q) { return q; });");
tryItOut("if(((uneval(let (__iterator__ = <x><y/></x>, prop) 4.)))) { if ((export constructor)) {/*for..in*/for(let [constructor, __noSuchMethod__] = <><x><y/></x></> in this) {var __count__ = {gc };var __noSuchMethod__ = __iterator__; } }} else gc()");
tryItOut("M:if(@foo)  '' ; else {}");
tryItOut("/*infloop*/for((__parent__ = function (prop, __proto__)4.); (*.watch(\"__noSuchMethod__\", gc).throw(__count__ = <x/>)); (__noSuchMethod__ = ~'fafafa'.replace(/a/g, /a/gi))) /*infloop*/for(true; <><x><y/></x></>; <x/>) {break M;export *; }");
tryItOut("(__noSuchMethod__)");
tryItOut("(prop)(<><x><y/></x></>) = __count__;");
tryItOut("/*infloop*/while(3/0)return;");
tryItOut("/*for..in*/for(let [__iterator__, prop] = prototype =  /x/  in <x><y/></x>) return 5.0000000000000000000000;");
tryItOut("{break ; }");
tryItOut("let __count__;");
tryItOut("__count__");
tryItOut("if(<x><y/></x>) yield; else {export *;<x/>; }");
tryItOut("if(__noSuchMethod__(__iterator__) = (new ((1 for (x in [])))([[1]]))) export delete;");
tryItOut("{yield <><x><y/></x>\t</>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <><x><y/></x></>.__iterator__.__proto__ in <x/>) {if(true | __iterator__) ; else {__noSuchMethod__ = [z1,,], prop =  '' ;\n{}\n }break ; }");
tryItOut("let (({ =: ({ prototype: ({ prop: prototype, constructor: [__count__, , , , __parent__] }), prototype: [] }), __iterator__: prototype })) { let (({ prototype: ({ prototype: __iterator__ }) }) = (true)[<><x><y/></x></>], __count__) { /*for..in*/M:for(const __noSuchMethod__ = ({__count__: <x/>, prop getter: Math.pow }) in @foo) export __noSuchMethod__; } }");
tryItOut("__noSuchMethod__.__iterator__ = prop;");
tryItOut("/*infloop*/for([(<><x><y/></x></>.yoyo(<><x><y/></x></>))(prototype)].map((function ()({ prototype: [], constructor: ({ __iterator__: prototype }) }) = __iterator__ = break M;.throw((Function(null)))).call); <><x><y/></x></>[prop]; __iterator__ = undefined) __count__ = prototype;");
tryItOut("if((eval(\"<y><z/></y>\",  '' ))) {export __iterator__;export prop; } else  if ((undefined.hasOwnProperty(\"__count__\"))) {const constructor =  /x/g , __proto__; }");
