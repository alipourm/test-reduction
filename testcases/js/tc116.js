tryItOut("with(__noSuchMethod__){return; }(*).__defineSetter__");
tryItOut("for(let y in [5,6,7,8]) try { with({}) {} } catch(__parent__) { for(let y in [5,6,7,8]) export *; } ");
tryItOut("if(( /* Comment */<x><y/></x>.hasOwnProperty(\"prop\") ? [true for each (__iterator__ in [z1,,])] : __parent__.prop = new (<x><y/></x>)())) {let (__parent__, constructor) {  }yield; }");
tryItOut("/*infloop*/M:for((__noSuchMethod__|=<><x><y/></x></>--); ((uneval(<x><y/></x>))); <><bbb xmlns:ccc=\"<><x><y/></x></>.__defineGetter__(\"__parent__\", (<y><z/></y>).apply)\"><ccc:eee></ccc:eee></bbb></>) {export prototype; }");
tryItOut("/*for..in*/for(const constructor in <x><y/></x>) {export constructor; }");
tryItOut("while(([__proto__ = window].throw(function(id) { return id })) && 0){throw *;yield; }");
tryItOut("L:switch(__proto__.__proto__ getter= 'haha'.split) { case 5: {}break; case (<x/>.__parent__) for each (prototype in __noSuchMethod__) if (*::*): let <x><y/></x>;break; default: break;  }");
tryItOut("L: ;");
tryItOut("/*for..in*/for(let [__proto__, __count__] = (prop\n) *= *::*\n in __count__ = <><x><y/></x></> ? this.yoyo(__iterator__) : (({__noSuchMethod__ getter: function(y) { yield y; return;; yield y; } })) |= return; = __count__.__defineSetter__(\"__noSuchMethod__\", <x><y/></x>)) {return __proto__, prop;function::__proto__ = switch(<x/> @  /x/ ) {  }if(this) { if (this) {const __iterator__ = {}; }} else {const __proto__, __count__ = true;(@foo); } }");
tryItOut("const prop, __proto__ = this;");
tryItOut("if((arguments != <x/>)) {export *; } else  if (new ('haha'.split)((new (<><x><y/></x></>)()), ( /x/g ))) ");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in .2) {{} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x><y/></x>.__noSuchMethod__ in (this << function ([y]) { })) yield __iterator__;");
tryItOut("/*infloop*/M:for((<><x><y/></\fx></>.unwatch(\"__iterator__\") for ( \"\" .constructor in undefined) for each (__iterator__ in -0)); (<x><y/></x>.throw(window)); <y><z/></y>) /*infloop*/do var constructor = 3; while(__iterator__);");
tryItOut("/*for..in*/for(var [x::__count__, __count__] = <y><z/></y> in {}) {break L;return; }");
tryItOut("/*for..in*/for([prototype, prop] =  '' [window] in [prop] = yield <x><y/></x> !== (<y><z/></y>).call(this, <x/>, prop = *::*)) if(<x><y/></x>) __noSuchMethod__, __proto__; else  if (({a1:1})) {gc() } else try { export *; } finally { export *; } ");
tryItOut("do f while(( \"\"  *= null) && 0);");
tryItOut("__parent__ = __proto__;");
tryItOut("for(let y in []);");
tryItOut("M:do {; } while((<x><y/></x>) && 0);");
tryItOut("export *;");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/do /*infloop*/for(let prototype = null; -3/0;  /x/ ) {yield; } while(false);");
tryItOut("{}return;");
tryItOut("while(((new <x><y/></x>).watch(\"prop\", function  __iterator__ () { yield (((yield <x><y/></x>).unwatch(\"prop\")).hasOwnProperty(\"prop\")) } )) && 0)export *;");
tryItOut("with(<x/> /= this.zzz.zzz)if((yield <><x><y/></x></> ? null : <x><y/></x>)) {;{gc() } } else  if (window[__iterator__]) function () { yield <x/> } ");
tryItOut("/*infloop*/M:for(constructor = #3={a:#3#}; 'fafafa'.replace(/a/g, prototype); eval(\"0\", window)) const __parent__;");
tryItOut("/*infloop*/for(constructor = ([11,12,13,14].sort) >>>=*::*; (<x/>)(__proto__) = [@foo].filter\t(<x/>); (function(y) { yield y; const __proto__;; yield y; }((this.watch(\"prop\", function  __proto__ () { yield __noSuchMethod__ } )), new #1=[#1#]( /x/ , false)))) {}");
tryItOut("if(this.eval(false).__defineSetter__(\"__noSuchMethod__\", <x/>)) { if ([11,12,13,14].sort >= this.__defineGetter__(\"__count__\", Math.sin)) ;} else {/*infloop*/while(*::*.valueOf(\"number\"));with(({__count__:  \"\" })){yield; } }");
tryItOut("if(true ? [,,] : *) let __iterator__, __parent__; else  if ([15,16,17,18].some(Math.pow, <x><y/></x> for each (__count__ in __noSuchMethod__))) {export *; } else {{}throw @foo; }");
tryItOut("/*infloop*/L:for(<x/> != *.@foo; (window.unwatch(\"constructor\")); (++-0)) {@foo; const constructor; }");
tryItOut("/*for..in*/for(const [prototype, constructor] = Function([ '' ].some('haha'.split)) in [,,z1]) /*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in prop) {yield;{\r} }");
tryItOut("with({}) return prototype =  '' ;");
tryItOut("");
tryItOut("let (constructor = #1=prop.(0)) { {continue ;__proto__, prop = <x><y/></x>; } }");
tryItOut("if([ /x/g .__lookupSetter__(\"constructor\")].sort( /x/ )) {(1e81); } else  if (prop) return\n");
tryItOut("gc");
tryItOut("(__parent__)\t\n");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("M:if(<y><z/></y>) { if (<><x><y/></x></>) {}} else export *;");
tryItOut("return\nexport constructor\nreturn;");
tryItOut("if((this.zzz.zzz)) {gc() } else {export *;L:with( /x/ \n){ } }");
tryItOut("/*for..in*/L:for(const __parent__ in (((([<x><y/></x> for (prop in *::*)])).watch)(this.__defineGetter__(\"prop\", function () { return prop = constructor } ))))var __parent__;");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.__parent__ in ((#0=<x>\t<y/></x>))) yield;");
tryItOut("L:if(yield false) { if (undefined *= this) {yield 5.0000000000000000000000; }} else let prototype = 1e-81, prop = prototype;");
tryItOut("(5.0000000000000000000000 *= this)\n");
tryItOut("if(this.throw(arguments)) { if ((<x/>)( '' ) .@x:: __count__.__count__) <y><z/></y>; else }");
tryItOut("/*infloop*/for( /x/ .hasOwnProperty(\"033\"); 3 &= null; <x/>) export __noSuchMethod__;");
tryItOut("export * const __proto__; const prototype");
tryItOut("M:with({prototype:  /x/ })__proto__yield;\n/*infloop*/for(var __parent__ = undefined;  /x/ ; <x/>) throw this;\n");
tryItOut("M:with(#3={a:#3#})/*infloop*/do {window; } while(*)\n");
tryItOut("L:if((--<x><y/></x>.valueOf(\"number\"))) {} else  if ([11,12,13,14].sort) {export *; } else var prop, prop;");
tryItOut("/*infloop*/for((this.__defineGetter__(\"__noSuchMethod__\", /a/gi)); arguments; new ( /* Comment */(null.unwatch(\"__parent__\").prop = {}.prototype))(constructor)) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var (((yield <><x><y/></x></>)))( \"\"  for (prop in <x><y/></x>)) in *.*) {try { gc() } catch(constructor) { return undefined; } with(*::*)let __proto__ = #3={a:#3#};export prop; }<y><z/></y>; }");
tryItOut("do yield  \"\" ; while((new Math.sin(<><x><y\t/></x></> *= *)) && 0);");
tryItOut("with({__proto__: __noSuchMethod__ = <x><y/></x>.__parent__\n})return <x><y/></x>\n");
tryItOut("/*for..in*/M:for(let constructor in ((function(y) { yield y; {}; yield y; })(new Object(this.valueOf(\"number\")++, (this.__defineSetter__(\"prop\", [1,2,3,4].slice)))))){export *;export constructor\n(<x><y/></x>) }");
tryItOut("let (__iterator__, constructor = getter) { yield; }");
tryItOut("if() { if ([15,16,17,18].filter(Math.pow, ({ __count__: prototype, prototype: __noSuchMethod__ }) = (void (<><x><y/></x></>.__proto__ = <x><y/></x>)))) {yield __count__; }\f else {yield *::*;var __proto__, __count__ = <x><y/></x>\t\f; }}\nswitch((({__parent__: (*)() }))) { default: if(@foo) {{}gc() }break; case (p={}, (p.z = <y><z/></y>)()): case 7: export *;break; case 8: yield;break;  }");
tryItOut("if([, , ] = <x><y/></x> ..  /x/ ) { if ([<><x><y/></x></>]) (<x/>); const __proto__;} else {L:if(*::* @ 1.3) return this; }");
tryItOut("L: {var __parent__ = <><x><y/></x></>, prototype; }");
tryItOut("L:while((yield gc()) && 0)continue L;");
tryItOut("do while((undefined) && 0){export *; }\r while((<>new (<x><y/></x>)(<x><y/></x>, <><x><y/></x></>)</>.(__count__)) && 0);");
tryItOut("let(__iterator__ = __iterator__) ((function(){constructor =  /x/g ;})());");
tryItOut("/*infloop*/for(var __count__ = (true |= <><x><y/></x></>); constructor; (new ([1,2,3,4].map)(<y><z/></y>))) (@foo)\n/a/gi");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __iterator__] =  ''  in false) var prototype = 0.1, __count__\n/*for..in*/M:for(const __parent__ in (((<y><z/></y>).call)((function ([y]) { })())))<y><z/></y>");
tryItOut("/*for..in*/for(const __iterator__ = true < window in ({ get undefined(__proto__) { return  /x/g  @ false } , __proto__: window })) {if((<><x><y/></x></>)) {export prop; } else  if ( \"\" ) {;(<y><z/></y>); }new Function(<y><z/></y> , ({a2:z2})), *\n }");
tryItOut("<employee id=\"1\"><name>Joe</name><age>20</age></employee><ccc:ddd></ccc:ddd>");
tryItOut("while(((#0= /x/  , (function(q) { return q; }).call([1,,]\t, []))) && 0){yield;export *;\nreturn;\n }");
tryItOut("if(<y><z/></y>) {L: constructor = <xxx {__parent__}={<y><z/></y>} /> } else {M:if([11,12,13,14].filter) {var \t__parent__, __proto__; } else return;export *;\n(null);\n }");
tryItOut("with({prop: 1.2e3})export __proto__;");
tryItOut("if(({a1:1})) {return;/*for..in*/for(constructor = this in 5.0000000000000000000000) break M; } else throw <x><y/></x>\n/*infloop*/for( /x/ ; @foo; <x/>) <x><y/></x>");
tryItOut("L: {let __iterator__ = ( /* Comment */(prototype.constructor getter= Math.sin)); }");
tryItOut("/*infloop*/M:for(({ __proto__: ({ constructor: __proto__, : constructor }), __noSuchMethod__: ({ __iterator__: ({ __iterator__: constructor }) }) }) = __parent__; (<x><y/></x>)(<y><z/></y>, @foo); \n__count__ = let (prototype = <x><y/></x>, __proto__) prop.__lookupSetter__(\"__iterator__\")) getter");
tryItOut("M:do Math.pow while(( \"\" ) && 0);");
tryItOut("return;");
tryItOut("return");
tryItOut("for(let y in [5,6,7,8]) with({}) ");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("let ([, __proto__, ({ __proto__: __proto__ })] = {} .. false, __proto__) { if([1](undefined, [])) export __noSuchMethod__; else  if (<>\t<x><y/></x></>.watch(\"__proto__\", function (__parent__) { return window } )) (<x><y/></x>); else export *; }");
tryItOut("M:switch(#1=[#1#]) { default: {throw <y><z/></y>; }case 7: let (__parent__ = <x><y/></x>) { continue M; }break; case 8: /*infloop*/do /*for..in*/for(let [__proto__, prop] = 5.0000000000000000000000 in __parent__) {( /x/ );continue M; } while((<>/*\n*/<x><y/></x></> , __parent__.yoyo(__count__.hasOwnProperty(\"__iterator__\"))).__defineSetter__(\"prototype\", eval));break; /*infloop*/M:do __iterator__ = <><x><y/></x></>, __count__ = @foo; while(*::*);case 1: L:with((__proto__ in *))yield <><x><y/></x></>;break; case [[]].__proto__ = this: /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in *::*) {const prototype;{export __parent__;yield; } }break; /*infloop*/for(__proto__; ((__parent__.prop getter= [1,2,3,4].slice))(); null) case 0: yield;yield;break; break; case  '' ['__noSuchMethod__'] = prototype: break; case @foo.watch(\"__count__\", function  __iterator__ () { yield <x><y/></x> } ): return;break;  }");
tryItOut("yield <x/>;/*for..in*/for(let constructor = function(id) { return id } *= __parent__.prototype setter= <><x><y/></x></> in ((p={}, (p.z = <><x><y/></x></>)()))) ");
tryItOut("/*for..in*/for(function::__count__ in ((new Function)(0x99)))\freturn window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in ({__count__: .2 })) ;");
tryItOut("/*infloop*/do if(((<y><z/></y>).__defineSetter__).call(({}).hasOwnProperty(<x><y/></x>, *::*), ([<x><y/></x>].map([1,2,3,4].slice)), 1e-81)) {(1.2e3);prop, __parent__ = 1.3; } else  if (<><x><\ty/></x></>.prop) yield <x/>; while(([,,].*)(__iterator__ = *, <><x><y/></x></>).unwatch(\"__iterator__\"));");
tryItOut("return <x><y/></x>;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <x><y/></x>/*\n*/ < true) {let constructor =  /x/g ;/*for..in*/for(const __iterator__.prototype in (([1,2,3,4].map)(eval(\"(function ([y]) { })()\", <x/>))))export *; }\t");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in [15,16,17,18].map(((Math.pow).call).call,  /x/ )) L: return true;");
tryItOut("continue ;");
tryItOut("return;");
tryItOut("/*for..in*/for(let [__iterator__, __iterator__] = ('fafafa'.replace(/a/g, /a/gi)++.prop), (delete <y><z/></y>) in [11,12,13,14].some) L:while(((<><x><y/></x></> ===  /x/ )) && 0)/*for..in*/for(const prototype in *::*) {yield; }");
tryItOut("M:if(({prototype: (033),  get __proto__() { <x/>; }  })) { if ((([z1,,][3.141592653589793]).throw(Function()))) ( /x/g );} else { }L:if(({__parent__ setter: this })) {throw prop; } else  if (null !== <x><y/></x>) {return;export __noSuchMethod__; } else ;");
tryItOut("let(__count__) ((function(){yield;})());");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let constructor = ([<><x><y/></x></>].filter([1,2,3,4].map).__count__.watch(\"prop\", ({}).__lookupGetter__)) in <x/>) {return;gc() }");
tryItOut("switch(\f<x><y/></x>) { \fcase 3: case 1: (window);break; constructor = 1e-81;break; default: throw getter;break; case 7: let __iterator__ = <x><y/></x>;break;  }return;");
tryItOut("return  /x/ ;");
tryItOut("var __noSuchMethod__ = __parent__, __noSuchMethod__;\t");
tryItOut("throw @foo;{arguments; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (window[constructor])) {}");
tryItOut("export *;var __count__ = <><x><y/></x></>;");
tryItOut("if(<y><z/></y>) {var __proto__ = <x/>, __count__ = @foo;return []; } else  if (<x><y/></x>) prop = <><x><y/></x></>; else ([[1]]);");
tryItOut("{const constructor = <><x><y/></x></>;return 1.2e3; }");
tryItOut("__parent__ = __parent__;");
tryItOut("/*infloop*/L:do @foo; while((new __noSuchMethod__( '' ).@*));");
tryItOut("/*infloop*/for((( \"\"  < window))[constructor = default: break; case this.__defineSetter__(\"prop\", new Function): ;.valueOf(\"number\")]; ((function ([y]) { })())[ /x/g ].hasOwnProperty(\"prototype\"); yield <x/>.propertyIsEnumerable(\"prototype\")) {var __proto__, __iterator__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (__iterator__.constructor = <x> __noSuchMethod__ = ({}), __parent__<y/></x>); [false].watch(\"__proto__\", [1,2,3,4].map)) function  __parent__ (__proto__) { gc() } ");
tryItOut("{return  \"\" ;return <><x><y/></x></>; }");
tryItOut("L: (<><x><y/></x></>).__defineSetter__");
tryItOut("/*for..in*/L:for(var new (function(q) { return q; })(true, *).*['__iterator__'] in ((({}).__lookupGetter__)(-3/0))){__noSuchMethod__ = <x><y/></x>, __parent__;{let __parent__ = @foo;return; } }");
tryItOut("with(*::*){return 1.3; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let [__parent__, prop] = (@foo = *::*--) in <x/>) ;");
tryItOut("gc()/*infloop*/for(const ({ prop: __parent__ }) = this ^= true; (false .@*:: <x/>); __iterator__ *= <x><y/\t></x>) {/*infloop*/for(let __iterator__; null; <y><z/></y>) var prop = <x><y/></x>; }");
tryItOut("/*infloop*/for(var constructor = (__iterator__-=((prototype) = [15,16,17,18].filter(__count__, true)) >>>  \"\" ); __count__ if (constructor); (p={}, (p.z = (void 4. > new ([[]])()))())) {return <y><z/></y>;switch(__proto__.__count__ = [[1]]) { case 7: break;  } }");
tryItOut("/*for..in*/L:for(let [__iterator__, __noSuchMethod__] = <x><y/></x>.constructor in (__parent__ if (prop))) {__iterator__ = <x/>\nconst __parent__ =  /x/g , __parent__;\nL:if(((<x><y/></x>).__defineSetter__).call(5.0000000000000000000000.propertyIsEnumerable(\"constructor\"),  \"\" )) export __proto__; }");
tryItOut("if(null) L: {yield <y><z/></y>;yield; } else {__parent__ = true;do {export constructor;{} } while((new (eval)(( /x/g  >>> <x><y/></x>))) && 0); }");
tryItOut("with(__parent__ = <x><y/></x>){var prop, prototype;throw false; }");
tryItOut("with({function::__proto__: undefined % -<x/>}){throw  '' ; }");
tryItOut("return (__iterator__.eval(((constructor)[ '' ])));");
tryItOut("with({__parent__: ((window && <x/>).watch(\"__iterator__\", window))})M:if(window) (this);");
tryItOut("while(((p={}, (p.z = <y><z/></y>)())) && 0)<><x><y/></x></>;");
tryItOut("let(__noSuchMethod__ = (__count__ = (<x><y/></x> for each (prop in *::*))) ? (<><x><y/></x></>.throw(3)) : *) { let(prop.__parent__ =  /x/g ) { with({}) try { const __proto__; } catch(__proto__ if true) { const __iterator__ = [[1]], __noSuchMethod__ =  \"\" ; } catch(__iterator__ if @foo) { 1e-81; } catch(prototype) { yield @foo; } finally { throw <x><y/></x>; } ");
tryItOut("L: ");
tryItOut("M:if((uneval(<><x><y/></x></>.throw(@foo)))) { if (((!<><x><y/></x></> for each (__iterator__ in constructor) for each (prop in  /x/g ) for each (constructor in window)))) if(<x><y/></x>) 'haha'.split else {var __parent__; }} else /*for..in*/for(const prototype: true in  /x/g ) {export __parent__;export prop; }");
tryItOut("do {export __count__; } while(((this *= <x/>)) && 0);");
tryItOut("/*for..in*/for(var [constructor, constructor] =  \"\"  in @foo) {return; }");
tryItOut("L:with({prototype: new Date((((({}).__lookupGetter__).apply)()), ((uneval(-0))))}){throw *::*; }");
tryItOut("constructor");
tryItOut("if(new Function) { if (*::*)  /x/g } else {let prop;return __count__; }");
tryItOut("{ }");
tryItOut("{;throw <y><z/></y>; }");
tryItOut("/*infloop*/for(prototype; __noSuchMethod__.__noSuchMethod__ getter= ({}).__lookupGetter__; (new ([15,16,17,18].some(({}).hasOwnProperty, <x><y/></x>))((#1# % __iterator__).propertyIsEnumerable(\"function::{export *;\\rthrow  /x/g ; }\"), constructor = prototype,  { return 3.141592653589793 }   >>> __noSuchMethod__)).__defineSetter__(\"__proto__\", (new (function::__iterator__)(5.0000000000000000000000, undefined))\n)) {if((this.hasOwnProperty(\"let\"))) {;let __proto__, __iterator__; } else  if (this.__defineSetter__(\"__iterator__\", __proto__)) {(prop);; } else {; }if(<x/> !== <><x><y/></x><\f/>) var setter = undefined, __count__ = .2; else  if ((undefined.isPrototypeOf(false)) != <y><z/></y>) {{}1e-81; } else {<x><y/></x>;this; } }");
tryItOut("{break ;break ; }");
tryItOut("/*infloop*/do let prototype, __proto__ = 0/0; while(false);");
tryItOut("with({}) { with({}) ; } return [1,2,3,4].slice(<><x><y/></x></>);");
tryItOut("/*infloop*/M:for((5.0000000000000000000000.__noSuchMethod__ = (p={}, (p.z = (prop = window.hasOwnProperty(\"__noSuchMethod__\")))())); 1e+81.__lookupSetter__(\"__count__\"); !__count__) yield true");
tryItOut("L:switch(window) { default: if(4.) yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let [constructor, __proto__] = arguments.watch(\"__noSuchMethod__\", ({}).__lookupGetter__) in <x><y/></x>) {yield  /x/ ; }");
tryItOut("let (prop) { gc()\n }");
tryItOut("/*infloop*/M:for(let __iterator__; #1=[#1#].@*; (<><x><y\t/>\r</x></>)[({})]) /*infloop*/for(this; 1.3; prototype) {let , __count__;throw window; }");
tryItOut("/*infloop*/for(var prototype; arguments.unwatch(\"__proto__\"); __noSuchMethod__.__proto__ = *::*) ([]).watch\n");
tryItOut("/*infloop*/for([] = new (new Function)((eval).call(null, *)); __iterator__ = (function ([y]) { })(); this.zzz.zzz) {return; }");
tryItOut("/*infloop*/L:for(null; \t__iterator__; (eval(\"(window.propertyIsEnumerable(\\\"__count__\\\"))\", [1,2,3,4].map(+)))) ((__proto__));");
tryItOut("M:switch(([*])) { default: yield <x><y/></x>;break;  }");
tryItOut("M:if(eval(\"return;\", new (1 for (x in []))(//h\ntrue, <><x><y/></x></>))) break ; else  if (({__parent__: (( \"\" )[prototype]) })) {yield; }");
tryItOut("{yield  /x/g ;-3/0; }");
tryItOut("export *;");
tryItOut("yield");
tryItOut("for(let y in [5,6,7,8]) return __iterator__;");
tryItOut("let __count__;");
tryItOut("do yyy; while((<x><y/></x>) && 0);");
tryItOut("/*for..in*/L:for(let prop in (([1,2,3,4].slice)((((.__defineGetter__(\"__count__\", (1 for (x in [])))) for (__count__(__proto__) in <x/>))))))gc()");
tryItOut("/*for..in*/L:for(var <x><y/></x>.valueOf(\"number\").__proto__ in ((Math.sin)((__parent__ = prop)))){case 5: break; gc()/*infloop*/for(let __iterator__ = export __count__;; <x><y/></x>; 1.2e3) return  /x/g ; }");
tryItOut("let (prototype) { /*infloop*/while(__count__ = *::*) const __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <><x><y/></x></>) {break ; }");
tryItOut("\n/*infloop*/do {throw StopIteration; } while(__noSuchMethod__.(__proto__));\n");
tryItOut("return;");
tryItOut("{L: {let __proto__ = 033; } }");
tryItOut("L: {var __noSuchMethod__;[]; }");
tryItOut("/*infloop*/M:for((prop.((yield @foo.unwatch(\"__proto__\")))); <x/>; (yield typeof  /x/ ++)) {const prototype = <y><z/></y>, prototype = window;/*for..in*/for(let prototype in @foo)  }");
tryItOut("switch( /* Comment */undefined) { default: case 0: /*infloop*/while(( '' ))gc()if((++-1)) return;break; let prototype; }");
tryItOut("/*infloop*/do {export __parent__; } while(new (<y><z/></y>)());");
tryItOut("throw StopIteration;");
tryItOut("with(({ constructor: ({ constructor: __parent__, __count__: __proto__ }) }) = 5.0000000000000000000000 *= (\n<y><z/></y>))/*infloop*/L:for([ '' ].propertyIsEnumerable(\"__noSuchMethod__\"); ([this for (__parent__ in ({}))]); ( /x/  += {})) {const prop, __iterator__ = <x><y/></x>; }");
tryItOut("L: /*infloop*/\fdo {gc()\nfunction (__proto__, __parent__) { return  ''  } \n } while(new ([<x/>])((window ? <x><y/></x> : *)));");
tryItOut("/*infloop*/for(({ __proto__: ({ prop: (prototype), constructor: ({ prototype: __noSuchMethod__ }) }), prototype: ({ __parent__: __iterator__, __parent__: ({ yield: [, , [], __noSuchMethod__], prototype: ({ prop: [] }) }) }) }) = ((()()) %= window *= __iterator__);  /* Comment */get.isPrototypeOf(); ([, , ({ constructor: constructor, prototype: ({ __iterator__: [, , __proto__] }) }), , ] = ((constructor = 4. <<= @foo.propertyIsEnumerable(\"__noSuchMethod__\") += ({__noSuchMethod__: *::* }).constructor) / <x/>))) {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in 'fafafa'.replace(/a/g, 033)) {export *;var __count__ = <x><y/></x>; }");
tryItOut("{/*infloop*/L:for([__parent__, ({ __count__: __count__, __proto__: __noSuchMethod__ }), __noSuchMethod__, ({ constructor: __noSuchMethod__ }), [get, ]] = true; new <x/>(__parent__, 1.3); <y><z/></y> ? <><x><y/></x></> : <x><y/></x>) {var __iterator__, __noSuchMethod__ = <x/>; } }");
tryItOut("L:if(__parent__.constructor = <><x><y/></x></>) {export constructor;break ; } else arguments;");
tryItOut("/*infloop*/for(var __iterator__; (getter.__lookupSetter__(\"__parent__\")); __proto__--) ");
tryItOut("/*for..in*/for(var [__count__, __count__] = (+__noSuchMethod__) in prototype = <><x><y/></x></>) {__parent__do  ''  while((__noSuchMethod__\n) && 0); }");
tryItOut("/*for..in*/for(const constructor in ((function () { yield 5.0000000000000000000000 } )( /x/g ))){yield __count__;export __noSuchMethod__; }");
tryItOut(";");
tryItOut("if(eval(\"(uneval(<x/>))\", constructor[<x><y/></x>])) gc() else  if (false) {gc() }");
tryItOut("do if(__noSuchMethod__ = <y><z/></y>) throw *; else return; while((({ __parent__: ({ __count__: __iterator__ }) }) = *) && 0);");
tryItOut("");
tryItOut("if(__count__ =  /x/g ) gc() else  if (({prop getter: function(y) { yield y; yield;; yield y; }, prototype: *::* })) {(arguments); }\t");
tryItOut("let(prototype = window) { let(__proto__ = <x/>) ((function(){function (prop, __iterator__)[1]})());");
tryItOut("/*infloop*/do export constructor\nvar __count__ = 1.3, __noSuchMethod__ = null; while(__count__ = (0x99.throw(<><x><y/></x></>)) &= ({__iterator__ getter: ( '' ).watch, prop:  /x/g  }));");
tryItOut("prop = __parent__;");
tryItOut("/*for..in*/for(var prototype(<x><y/></x>) in <y><z/></y>) {continue M; }");
tryItOut("/*for..in*/for(const prototype in (('haha'.split)( \"\" )))return;");
tryItOut("/*for..in*/M:for(var __proto__ = new new Function(window) in <x><y/></x>) {yield;throw __parent__; }\n/*infloop*/L:for(\fvar constructor; *::*; <x/>) try { <><x><y/></x></>; } finally { *::*; } ");
tryItOut("/*for..in*/for(let constructor = <><x><y/></x></>.hasOwnProperty(\"constructor\") in <y><z/></y>) {export prop;gc() }");
tryItOut("if((((__count__ = #1=[#1#]) if (<><x><y/></x></>)).__lookupSetter__(\"prototype\"))) {switch(this.__defineSetter__(\"prototype\", function(q) { return q; })) { case 6: (3/0);break; <x/>;case 9: break;  }yield;L: throw window;\r } else  if (new ([11,12,13,14].sort)()) export __iterator__; else \fif((#1={ })) /*for..in*/for([constructor, function::__parent__] = ([11,12,13,14].filter) in <y><z/></y>) {var __proto__ =  \"\" , prop; } else  if (__count__.(({ get __iterator__ __parent__ () { let __iterator__, constructor = 4.; }  }) += <x><y/></x>\n)) {{} }");
tryItOut("L:if(false &= <>__count__</>) {} else {/*infloop*/do {constructor = [1], __iterator__ = <x/>; } while([z1,,](<><x><y/></x></>));gc() }");
tryItOut("if(__parent__.__noSuchMethod__ = []) { if (<xxx {__iterator__}={(constructor = *)} />) /*for..in*/for(let prototype in *::*) {yield __proto__;gc() }} else {export __proto__;yield prototype; }");
tryItOut("/*for..in*/for(const false in ((({}).hasOwnProperty)(this.__defineGetter__(\"__count__\", Math.sin))))__proto__ = this;");
tryItOut("L:do {with((__proto__ = <><x><y/></x></> ? (<x/> .@x:: #1#) : __proto__.(*::*))){throw null;return; } } while(((__proto__ = __proto__+=null).__parent__) && 0);");
tryItOut("M:if(<>(__noSuchMethod__ = this)(window > *)</>) export *;");
tryItOut("if(this.__defineGetter__(\"prop\", [1,2,3,4].slice)) { if (new (1e-81 - prop)(__count__ = *::*)) 0.1; else {export *;{} }}");
tryItOut("M:if( /x/ ) { if (1.2e3) } else {export *;var __proto__ = *; }");
tryItOut("/*for..in*/prototype");
tryItOut("with({prop: }){return undefined;try { return; } finally {  }  }");
tryItOut("const constructor = <x><y/></x>, __iterator__\n");
tryItOut("if((window for each (constructor in window))) {return __iterator__; } else  if ([11,12,13,14].some) {}");
tryItOut("{throw \n@foo; }");
tryItOut("/*infloop*/for([15,16,17,18].filter(({}).__lookupGetter__, (__proto__.__lookupGetter__(\"constructor\"))); #1= '' ; let (__noSuchMethod__ = this.__defineSetter__(\"function::setter\", (false).__defineSetter__), __iterator__) (eval(\"export set;\", function::__parent__ =  /x/ ))) {L:with({prop: <x><y/></x>.(<x><y/></x>)})(window); }");
tryItOut("if((p={}, (p.z = 1e81)())) break M; else {export __proto__;L: {gc()break M; } }");
