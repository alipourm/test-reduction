tryItOut("/*infloop*/for(constructor;  \"\"  <= __parent__; <x><y/></x>.__lookupGetter__(\"__count__\")) {export constructor; }");
tryItOut("var __count__ = <><x><\ry/></x></>\n;");
tryItOut("/*for..in*/for(({ __count__: [], __count__: ({ __parent__: constructor, __count__: ({ __proto__: __noSuchMethod__ }) }) }) in [__iterator__ = <x/>]) {yield *::*;gc()(this); }");
tryItOut("with({}) { throw constructor; } ");
tryItOut("{}return;");
tryItOut("switch(yield prop) { case 4: break; with(prop)return false;{} }");
tryItOut("throw prototype;");
tryItOut("<y><z/></y>");
tryItOut("while((new (function(q) { return q; })(this <<= <x/>)) && 0){if(( \"\" .unwatch(\"__count__\")) < (({ set prototype(__proto__, __iterator__) { return; } , let: (false\n) }))) {export prop; } else  if (this.__defineSetter__(\"__noSuchMethod__\", (__count__).__defineSetter__).@foo) {{}constructor = prop, __proto__ = false } }");
tryItOut("\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var x::__proto__() in (p={}, (p.z = --<y><z/></y>)()).isPrototypeOf([,,z1])) ");
tryItOut("return #1=({prototype: ({ constructor: __parent__, prototype: prop }) = __proto__.@*});");
tryItOut("yield constructor\n<y><z/></y>;");
tryItOut("M:if(constructor) {(({})); } else  if ([]) return; else {; }");
tryItOut("M:while((.2 && [,,z1]) && 0)yield (-0);");
tryItOut("/*for..in*/for(let __count__ in  \"\" .yoyo([[1]])) M:if((@foo.hasOwnProperty(\"__parent__\"))) {throw  '' ;<x><y/></x>; } else  if ((({a2:z2}).unwatch(\"prototype\"))) {continue ; } else {{} }");
tryItOut("return []\n");
tryItOut("/*infloop*/for(const __noSuchMethod__ = #3={a:#3#}; false;  '' ) throw window;\n/*for..in*//* nogeckoex bug 349964 */ for  each\t(var [__iterator__, constructor, , ] in ( /x/g  for each (prototype in <x><y/></x>) for each (__parent__ in <x><y/></x>))) export *;\n");
tryItOut("{gc() }");
tryItOut("let (__noSuchMethod__ =  /x/g .hasOwnProperty(\"__iterator__\"), __noSuchMethod__ = new (({}).__lookupGetter__)((__proto__ =  /x/g ))) { yield undefined\nthrow [,,z1]; }");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = false in prototype = [,]) {{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in __count__ = 1e+81) {}");
tryItOut("prototype = <x><y/></x>, get;\nif('fafafa'.replace(/a/g, function  /a/gi (__iterator__, __noSuchMethod__) { return *::* } )) {prop }\n");
tryItOut("with({}) let([] = -3/0.__lookupGetter__(\"prop\")) ((function(){let(__noSuchMethod__) { with({}) { return; } })());");
tryItOut("export constructor;yield <x><y/></x>;");
tryItOut("do (false); while((new (this)([z1,,]).__defineSetter__(\"function::__parent__\", function (__parent__) { let (constructor = [z1], __count__ =  /x/g ) { function ([y]) { }; } } )) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/prop");
tryItOut("/*for..in*/for(var prototype in *::*) {continue M;{} }");
tryItOut("return\n");
tryItOut("with({__parent__: <y><z/></y>}){let constructor = __noSuchMethod__, __count__; }");
tryItOut("with({prototype: <y><z/></y>})var __parent__;");
tryItOut("with({each: yield *::*--}//h\n){__parent__ = prototype; }");
tryItOut("new Function");
tryItOut("with({constructor: constructor}){gc() }");
tryItOut("/*infloop*/for(let __proto__; (this.__defineGetter__(\"prop\", function(y) { yield y; export *;; yield y; }) .. (prototype)); try { Math.sin } catch(__count__ if (function(){throw #1=[#1#];})()) { yield  /x/g ; } catch(__proto__ if __count__) { [1,2,3,4].map } {} = false.watch(\"prototype\", (1 for (x in [])))) {/*infloop*/do {{} } while(prototype)\n{} }");
tryItOut("/*infloop*/while(eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in window) <><x><y/></x></>;\", [,,z1])){yield <x><y/></x>; const __iterator__; }");
tryItOut("with({#1#: }){return; }");
tryItOut("return <x/>;");
tryItOut("with(eval(\"<><x><y/></x></>;\", (prototype = <y><z/></y>).@foo)){/*for..in*/for(var __noSuchMethod__ in window) return;export prototype; }");
tryItOut("export *;");
tryItOut("/*infloop*/while(([ /x/ \n for (yield <><x><y/></x></> >>  '' ['__noSuchMethod__'] in this.__defineSetter__(\"__parent__\", let(__noSuchMethod__ = __iterator__) ((function(){break M;})());)) for each (__count__ in constructor = __count__) for ((__noSuchMethod__) in [1].eval(#3={a:#3#})) for each (__iterator__ in __iterator__) for each (function::__noSuchMethod__ in 1e+81) for each (__noSuchMethod__ in <x><y/></x>)])){__proto__, prop = (function ([y]) { })();\nif(set) {[1,2,3,4].map } else  if (window) @foo; else {<x><y/></x>;[z1,,]; }\n }");
tryItOut("yield <y><z/></y>;");
tryItOut("export *");
tryItOut("{}");
tryItOut("/*infloop*/<><x><y/></x></>.propertyIsEnumerable(\"__proto__\")");
tryItOut("/*infloop*/for(<x/>; this; <><x><y/></x></>) var prop, prototype;");
tryItOut("/*infloop*/L:for(-0[constructor];  /x/g  = 0; <><x><y/></x></>.yoyo(*)) {}");
tryItOut("if(-window.isPrototypeOf(<><x><y/></x></>)) throw this; else {let prop, __noSuchMethod__;try { for(let y in []); } finally { return; }  }");
tryItOut("return *::*;");
tryItOut("/*infloop*/while(<><x><y/></x></>.eval(this)\n){throw 3; }");
tryItOut("L:with({prop: {}|=0x99})");
tryItOut("*::*;");
tryItOut("{(true);export *; }");
tryItOut("let __parent__, prototype;;");
tryItOut("yield ({__iterator__: <x/> });");
tryItOut("{__count__, constructor = false; }");
tryItOut("if( /x/g ) { if (([({}) if (<x/>)])) gc() else continue L;}");
tryItOut("");
tryItOut("if(*) { if (1e81) {export *;window }} else \f__iterator__;");
tryItOut("with(<x/>);");
tryItOut("let(__parent__ = this.__defineGetter__(\"prototype\", new Function), [] = yield new 1.3()) { break M;");
tryItOut("let constructor = <x><y/></x>, prototype = <><x><y/></x></>;");
tryItOut("with({}) { return; } ");
tryItOut("/*infloop*/do {var __iterator__ = *, __iterator__; } while((prop));");
tryItOut("yield ; const __proto__;");
tryItOut("/*infloop*/for(const prototype; ({^: window, __proto__: (constructor = <y><z/></y>) }); new function  prototype ()\f__count__.eval(<><x><y/></x></>)(--#1=[#1#].__lookupSetter__(\"__count__\"), (*::*.propertyIsEnumerable(\"__proto__\")))) {return;return\n/*for..in*/for(const __noSuchMethod__ in ((this)(.2)))return\nexport *; }");
tryItOut("<><x><y/></x></>;");
tryItOut("/*infloop*/while();");
tryItOut("/*for..in*/for(const [prop, __count__] = constructor = prototype =  \"\"  in ((false for each (__proto__ in *)))) {}");
tryItOut("/*for..in*/for(__parent__ in <><x><\ty/></x></>) /*infloop*/L:do {export __noSuchMethod__; } while(window);");
tryItOut("switch(([-3/0])) { case this.zzz.zzz: break; with({constructor: __parent__})gc()break;  }");
tryItOut("/*for..in*/M:for(const (__count__) in  /x/ ) {this }");
tryItOut("/*infloop*/for(const __count__; (( \"\" )(prototype) = constructor.(<y><z/></y>)); this.zzz.zzz) {yield *; }");
tryItOut("if( > [[]]) return (function ([y]) { })(); else  if (__count__ getter: new Function.watch(\"__noSuchMethod__\", <x><y/></x>)) {(<><x><y/></x></>);throw [[1]]; }");
tryItOut("if( \"\" ) { if (false) {break L;throw 0/0; }} else const __proto__, constructor =  /x/g ;");
tryItOut("L: /*infloop*/for(var prototype; function (__proto__) { yield <x><y/></x> } ; ((p={}, (p.z = @foo)()))) return 0x99;");
tryItOut("/*for..in*/for(var prototype = (__proto__ = <><x><y/></x></>) in function ([y]) { }) var __proto__ = 1e81, prop;");
tryItOut("let (({ __parent__: prop }) = this === <><x><y/></x></>) { const __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L:\t for  each((prop).constructor in (new <><x><y/></x></>((-0), <x/>))) {throw this; }");
tryItOut("<y><z/></y> = __proto__.constructor\n");
tryItOut("L: {{} }");
tryItOut("if( new ) { if (window) break ;} else break M;");
tryItOut("if(false <<= prop) {yield  /x/ ; } else  if ((window.*)) { }");
tryItOut("M:with({__parent__: __parent__ = <y><z/></y>})prototype");
tryItOut("yield __iterator__ = <x/>;");
tryItOut("/*for..in*/for(let __iterator__ = (undefined.prototype = [[1]])[new <><x><y/></x></>] in <><x><y/></x></>) {export __proto__;export *; }");
tryItOut("M:while((new Function(<><x><y/></x></>, <x><y/></x>) *= new __iterator__(<x><y/></x>, [[]])) && 0){<><x><y/></x></>;throw .2; }//h\n");
tryItOut("if(*.__proto__ =  /x/ ) { if ([ /x/ ]) {(<x><y\f/></x>); }} else export __noSuchMethod__;");
tryItOut("with(prop =  /x/ ){if(<x><y/></x>) { if (({a2:z2})) {export *; } else {var __noSuchMethod__; }} }");
tryItOut("if((__noSuchMethod__%=<y><z/></y>)) return [z1]; else  if (#2=({({ __iterator__: __count__, __count__: __count__ }): window.throw(1.2e3)})) ");
tryItOut("(this);export *;");
tryItOut("do {yield undefined;\nprop: <x><y/></x>\n{} } while((prototype.prototype = (__iterator__ =  /x/ )) && 0);");
tryItOut("M:with(window if (window)){const prop, prototype = <y><z/></y>;gc }");
tryItOut("/*for..in*/L:for(prototype = 3 in (uneval(*::*))) {/*infloop*/L:do {throw __proto__; } while(prototype = 0x99); }");
tryItOut("{const __noSuchMethod__, __iterator__ = true; }");
tryItOut("/*infloop*/for(__parent__ > <x><y/></x>; (p={}, (p.z = ([15,16,17,18].filter(null, window.__defineGetter__(\"prop\", 'haha'.split))))()); (((function(q) { return q; })()).propertyIsEnumerable(\"__parent__\"))) {/*infloop*/M:do yield; while(<x><y/></x>); }");
tryItOut("switch( .watch(\"__proto__\", ((yield constructor)).__defineSetter__)) { case new RegExp(): break ;default: /*for..in*/for(let prototype = true in null) break;  }");
tryItOut("L: (*);");
tryItOut(" const __iterator__;");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*infloop*/do yield; while(<x><y/></x>);");
tryItOut("if(__iterator__ = function ([y]) { }) {prop = <x><y/></x>;{} } else  if ([15,16,17,18].map(({}).__lookupGetter__, __parent__)) break ;\n;\n");
tryItOut("/*infloop*/do {/*infloop*/for(this.__defineGetter__(\"__iterator__\", <x><y/></x>); let (prop = <x/>) true.valueOf(\"number\"); -#1#) /*for..in*/for(var -3/0.prototype in ((false)({} ? <><x><y/></x></>\f : prop: )))export *;export *\nexport *; } while((<x/>.__parent__).constructor = __proto__.__iterator__);");
tryItOut("for(let y in [5,6,7,8]) constructor = __noSuchMethod__;");
tryItOut("{return this; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = 0x99 in @foo) throw prototype;");
tryItOut(" const prop\n;");
tryItOut("/*for..in*/M:for(const prop in ((eval)(1e-81))){/*for..in*/for(const constructor in constructor, __iterator__ =  /x/ )  }");
tryItOut("let (__count__ = <x><y/></x>, delete) { continue ; }");
tryItOut("/*infloop*/while()");
tryItOut("/*for..in*/M:for(var __proto__ = (new (([1,2,3,4].map).call(<x/>, ([])(033)))()) in #1#.propertyIsEnumerable(\"__noSuchMethod__\")) {gc()gc }");
tryItOut("/*for..in*/for([constructor, __iterator__] = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in yield [11,12,13,14].filter) {{}((<y><z/></y>).watch).call }");
tryItOut("'haha'.split const constructor;");
tryItOut("/*for..in*/for((prototype) in (((this).call)(({__noSuchMethod__: this}))))");
tryItOut("let(prototype = (__count__.valueOf(\"number\")).__lookupSetter__(\"function::prop\"), __count__.prop) { let(constructor =  /* Comment */<><x><y/></x></>, __count__ = __noSuchMethod__) ((function(){with({}) let(__count__) { throw constructor;})());");
tryItOut("/*for..in*/for(__iterator__ in __noSuchMethod__) {var __count__ = <><x><y/></x></>, __count__;r }");
tryItOut("let(__noSuchMethod__ =  /* Comment */<><x><y/></x></>) { return (<><x><y/></x></>).call(<x><y/></x>, true, <><x><y/></x></>);");
tryItOut("do {Functionreturn null; } while((false) && 0);");
tryItOut("do {if( /x/ ) export __noSuchMethod__; } while(((#2=[__noSuchMethod__.prototype setter= eval])) && 0);");
tryItOut("/*for..in*/for(yield  /x/g ['__count__'] in ((gc)([({ __parent__: ({ __proto__: [, __count__, __parent__, , each] }) }), ].@foo))){return  /x/g ; }\n");
tryItOut("<zzz>((@foo.__iterator__))((new <x><y/></x>( '' , <y><z/></y>)), (@foo !== []))</zzz>");
tryItOut("let (get = this) { (<><x><y/></x></>); }");
tryItOut("if(new function(y) { yield y; yield true;; yield y; }(@foo)) { if ( /x/g )  else {{*;const __proto__, __proto__ = #3={a:#3#}; }/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in *)  }}");
tryItOut("/*infloop*/for(let __proto__; <x/> | true %= ().isPrototypeOf(this.__defineSetter__(\"__parent__\", true).unwatch(\"prototype\")); 'fafafa'.replace(/a/g,  '' )) yield <x><y/></x>;");
tryItOut("{{} }");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("let (__iterator__, __parent__ = *) { return  /x/g ; }");
tryItOut("with({__iterator__: __proto__.__noSuchMethod__}){export constructor; }");
tryItOut("if( /x/g ) <><x><y/></x></>;");
tryItOut("if(prop = (#2=[(({constructor: *::*}))].isPrototypeOf(prototype.prototype = <><x><y/></x></>[throw __proto__;]))) { if (function::prototype%=window.__lookupSetter__(\"prototype\")) yield * .@ this;} else continue M;");
tryItOut("M:with({__iterator__: return}){L:if( '' ) return <x/>; else  if (arguments) ( '' ); else (@foo);let (constructor = <><x><y/></x></>, prototype) { throw (-0); } }");
tryItOut("do {return; } while((*::* << <><x><y/></x></>) && 0);");
tryItOut("[]");
tryItOut("\fif((#2=#1=[#1#])) { if ( '' ) let __parent__, constructor = false;} else {return;export prop; }\n");
tryItOut("let (__parent__ = (function(q) { return q; }).call(({a1:1}), <x/>,  /x/g ).__defineGetter__(\"__iterator__\", (Math.sin).apply), __count__ =  /* Comment */[*].sort(({}).hasOwnProperty)) { if(<><{}><!--yy--></{}></>) {return;[,,z1] } else  if ((window.__defineGetter__(\"__iterator__\", Math.pow))) ( /x/ ); else M:with(null){return;let prototype; } }");
tryItOut("/*for..in*/for(var [constructor, __count__] = \nthis.__defineSetter__(\"__parent__\", <y><z/></y>) in (function (__parent__) { const __parent__ =  /x/ ; } ).call(<><x><y/></x></>, )) {continue ; }");
tryItOut("/*infloop*/L:while([z1] ? @foo : *)export *;");
tryItOut("yield;var __parent__ = __iterator__, constructor;");
tryItOut("M:if([11,12,13,14].sort) { if ((this.zzz.zzz)) (<x><y/></x>).__defineSetter__} else yield <x><y/></x>;");
tryItOut("gc()\nexport *;\n");
tryItOut("/*infloop*/for(const [] = (new function  __count__ (__iterator__) '' (__count__, *)); typeof <bbb xmlns:ccc=\" /x/g \"><ccc:eee></ccc:eee></bbb>.((eval(\"this\", null))); try { export __count__; } catch(__proto__ if (function(){yield <x/>;})()) { prop, __iterator__; } catch(constructor) { throw <x><y/></x>; } finally { gc() }  = 3/0.__proto__) while((new (<><x><y/></x></>)(1e4, <x/>)) && 0){export *;export *; }");
tryItOut("if([(yield __proto__) for each (__noSuchMethod__ in ([null].map(prototype)))]) { }");
tryItOut("switch(prototype) { default: {} }");
tryItOut("/*for..in*/for(const __parent__.prop in [15,16,17,18]\f.sort((new Function(\"export *;\")), true)) {__iterator__ = constructor, __proto__ = <x/>\nM:if(([11,12,13,14].filter)) { if ( /x/g .set = constructor.propertyIsEnumerable(\"prototype\")) yield; else {(__iterator__);throw *::*; }}yield; }");
tryItOut("switch(__proto__(#1=[#1#])-=undefined) { default: export __parent__;break;  }");
tryItOut("while((Boolean((p={}, (p.z = (<><x><y/></x></>.__defineSetter__(\"prop\", (1 for (x in [])))))()), <><x><y/></x></>)) && 0)/*infloop*/M:do const __count__, constructor; while([,].__lookupGetter__(\"prototype\"));");
tryItOut("/*for..in*/for(var constructor = constructor in __iterator__) {export *; }");
tryItOut("/*infloop*/while(<x><y/></x>)function () { return @foo } ");
tryItOut("switch((undefined.__lookupSetter__(\"prop\"))) { case [<x><y/></x>].some(function (__iterator__) '' ): break;  }");
tryItOut("throw __iterator__;");
tryItOut("M:if(( \"\" )[<><x><y/></x></>]) yield null; else ( '' );");
tryItOut("if(@foo) /*for..in*/for(__parent__ in this) {__proto__ }");
tryItOut("while((__iterator__ = <><x><y/></x></>) && 0)break ;");
tryItOut("with(1.3){([,,]);switch(<y><z/></y>) { case -1: export __proto__;break;  } }");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("if(yield  '' ) {yield #1=[#1#];if(() %= Array()) { if ((4. != __noSuchMethod__)) {;gc() }} else {;var __count__ = 3, arguments = [[1]]; } }");
tryItOut("break L;var __proto__, __iterator__;");
tryItOut("let(__iterator__ =  , *::* -= window.yoyo(window)) ((function(){throw StopIteration;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in [1,2,3,4].map(null, *)) this.zzz.zzz;");
tryItOut("while(((this.__defineSetter__(\"constructor\", prototype).unwatch(\"__parent__\"))) && 0){gc()gc() }");
tryItOut("/*for..in*/M:for(let __parent__ in __parent__) {with({constructor: (1e81.unwatch(\"__noSuchMethod__\") if (({a1:1})))}) }");
tryItOut("with( \"\" )yield;");
tryItOut("while((*::* || true ? window + <y><z/></y> : <x/>\n <<= (0x99.__noSuchMethod__)) && 0){if(({__parent__: window })) {const __iterator__ = <x><y/></x>, __count__ = (-1);gc } else  if (([z1].*)) const prototype = *; }");
tryItOut("if(this.__defineGetter__(\"prototype\", (1 for (x in [])))) let __parent__;");
tryItOut("(<x><y/></x>)\n");
tryItOut("L:if(let (prop, prototype) (Error(<><x><y/></x></> == *::*))) yield; else  if ({} - (function ([y]) { })().__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) (this); else {export __parent__; }");
tryItOut("yield prop = <y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\");");
tryItOut("let(prop, __iterator__) { <><x><y/></x></>;");
tryItOut("with(constructor = 5.0000000000000000000000)");
tryItOut("{gc() }");
tryItOut("if(window != [,]) yield;");
tryItOut("L: constructor = *;");
tryItOut("yield;");
tryItOut("while((@foo) && 0){export __proto__;; }return <y><z/></y>;");
tryItOut("if(<y><z/></y>) {export *; } else  if (((Math.pow for each (__iterator__ in <y><z/></y>)))) {export *;export *; } else throw <x/>; const __parent__;");
tryItOut("while(( ''  if ([]) - delete <x/>) && 0){{break ;\nexport *;\n }var __noSuchMethod__, constructor; }");
tryItOut("M:do {M:if(<x><y/></x>()) {var __count__ = window; } else  if ((new ( /x/g )())) {<x/>; } } while(((this.zzz.zzz for each (__parent__ in  /x/ ))) && 0);");
tryItOut("__count__ = <y><z/></y>, __parent__ = constructor;");
tryItOut("/*infloop*/for(var [, __proto__, ] = (<y><z/></y>[ '' ]); <><x><y/></x></>; 1e4) return;");
tryItOut("try { this.zzz.zzz; } catch(__parent__) { this.zzz.zzz; } finally { return /*\n*/* ? <><x><y/></x></> : <y><z/></y>; } ");
tryItOut("with\n(*::*)while((<x/>) && 0)\fthrow *;");
tryItOut("/*infloop*/while(( ''  | <><x><y/></x></>)[(( '' .__defineGetter__(\"each\", 1e-81)) + (window != <x><y/></x>))])return false;");
tryItOut("L:with( /x/g ){gc()yield <y><z/></y>; }\n\n");
tryItOut("if([15,16,17,18].map(Math.pow, <x><y/></x>)) { if (<><x><y/></x></> + undefined) {prototype = <><x><y/></x></>, __parent__; }} else {export *;export __noSuchMethod__; }");
tryItOut("L:do {var prop = <x/>, __count__; } while((({ constructor: [({ constructor = __noSuchMethod__;: __iterator__, __count__: [constructor, , __noSuchMethod__] }), ({ __noSuchMethod__: [, , constructor, ] }), constructor], getter: prop }) = ({ __iterator__: __parent__ })) && 0);");
tryItOut("/*infloop*/do {yield; } while(<><x><y/></x></>(window, *));");
tryItOut("if( /* Comment */*::*) { if ( '' .__defineSetter__(\"__iterator__\", function (prop) { return <x><y/></x> } )) 0.1} else break L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in [,]) {return; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for([__parent__, __proto__] = null in window) \n");
tryItOut("if(window[this] && false in <y><z/></y>) let (({ prototype: __proto__, __noSuchMethod__: prop }) =  /x/ .unwatch(\"__iterator__\"), prototype) { return; } else  if (<xxx>{__proto__}</xxx>.(((void <x><y/></x>))(eval(\"gc()\", @foo).hasOwnProperty(\"__iterator__\")))) {throw 4.; }");
tryItOut("let (prop, __count__) { continue L; }");
tryItOut("with({}) ;");
tryItOut("L:if((Function([z1,,].__count__ = [], ))) continue ; else  if (new Exception(<><x><y/></x></>,  /x/g )++) {return window;if({throw <x><y/></x>; }) { if (*::*[this]) {{}continue M; }} else export *; }\f");
tryItOut("/*for..in*/for(const (prop)\t in  /x/ ) {((p={}, (p.z = (false == __noSuchMethod__))()));/*infloop*/for(this; prototype; prop) {yield; } }");
tryItOut("/*for..in*/for(let __count__.prototype in ((Math.sin)(__iterator__ = __proto__)))(4.);");
tryItOut("if() {gc() } else  if (<bbb xmlns=\"<><x><y/></x></>\"> </bbb>) export __iterator__; else { }");
tryItOut("for(let y in [5,6,7,8]) M:if(__count__) { if ([z1] != ({a1:1})) {}} else yield;");
