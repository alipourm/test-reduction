tryItOut("/*infloop*/M:for((this.zzz.zzz); *; [([1,,].__lookupSetter__(\"prototype\").throw(((({a1:1}))[<><x><y/></x></>])))]) {/*for..in*/for(const prop in (({__noSuchMethod__: *::*, function::__noSuchMethod__: <x><y/></x> }))) {false;break L; } }");
tryItOut("{{}yield; } const prototype;");
tryItOut("while((let (prototype = <><x><y/></x></>, __parent__ = *::*) (<><x><y/></x></> ::  /x/ )) && 0){while((window) && 0)yield; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:for(((this.zzz.zzz))(\n(), (~<y><z/></y>)) .@x:: ( '' ).eval(<><x><y/></x></>.watch(\"setter\", (prop).__defineSetter__)) % Exception(<x><y/></x>, [,]); this.zzz.zzz || [z1]; new (null)(( /x/ .watch(\"__parent__\", <x><y/></x>)), constructor) + (yield (__iterator__ = prototype))) {/*for..in*/for(prototype in ((function(y) { yield y; L: gc(); yield y; })((({ get __count__ __count__ (__count__, __iterator__) { {} }  }))))){if(*::*) { if (prototype) {function(q) { return q; } }} else {break ;const constructor = 0.1, __noSuchMethod__; } } }");
tryItOut("with(this.__defineSetter__(\"export *;\", (1 for (x in [])))){function (__noSuchMethod__, __parent__) { return [z1] }  }\n<><x><y/></x></>;");
tryItOut("/*infloop*/while( /* Comment */__proto__)throw *;");
tryItOut("M:if(this.__defineGetter__(\"__parent__\",  \"\"  instanceof each).eval((new [[]](@foo, {}) & (<><x><y/></x></>(__proto__, <x><y/></x>))))) L:if(constructor.constructor = (yield null)) yield;");
tryItOut("while(( '' .isPrototypeOf((-1))) && 0){var constructor, __noSuchMethod__ = <x/>, __parent__ = <x><y/></x> = this; }");
tryItOut("if(*::*.@foo)  ''  = 4., __parent__ = undefined; else {constructor, __noSuchMethod__ = <x><y/></*\n*//x>;let __count__; }");
tryItOut("let (({ prototype: [], prototype: ({ __iterator__: ({ constructor: __count__, __proto__: ({ constructor: ({ prototype: __iterator__ }) }) }), prop: [] }) }), __noSuchMethod__) { this; }");
tryItOut("if(prop.\t( '' ).propertyIsEnumerable(\"prop\")) { if (__noSuchMethod__) ((yield <x><y/></x>).__defineSetter__(\"__count__\", ({}).__lookupGetter__)); else L: {gc; }}");
tryItOut("let (prop = ({a2:z2}), prototype = <y><z/></y>) { [1]; }");
tryItOut("/*infloop*/while((*::*)( /x/ , undefined)){yield <><x><y/></x></>;export *; }");
tryItOut("L:if(__noSuchMethod__) ({}).__lookupGetter__");
tryItOut("let (__count__ = new (function  __noSuchMethod__ (__count__, constructor) { yield  ''  } )\t(1e4.eval(true)), ({ prototype: ({ __parent__: ({ __count__: [], __iterator__: ({ __proto__: ({ __iterator__: yield }), __count__: ({ __parent__: __noSuchMethod__, __iterator__: prototype }) }) }), prop: __iterator__ }) }) = (this.__defineGetter__(\"__count__\", Math.sin))) { /*for..in*/for(let this.__defineGetter__(\"__count__\", (1 for (x in []))).constructor in <><x><y/></x></> + this) {((function () { yield; } ).apply).apply; } }");
tryItOut("/*for..in*/for(let [__parent__, constructor] = (+prototype = (new (null)(this,  \"\" ))) in ) {yield; }");
tryItOut("M:if((@foo ^= 3/0)) {let __noSuchMethod__, constructor = undefined;export __proto__; } else  if (({__proto__: yyy })) {{} } else ");
tryItOut("with({prop: eval(\"Function\", [])})return var prototype = <x><y/></x>, constructor = .2;;");
tryItOut("if( /* Comment */this) return @foo; else  if ((<x/>.__defineGetter__(\"__proto__\", *))) Function else {throw 1e81; }");
tryItOut("");
tryItOut("do var __iterator__ = 1.2e3, __iterator__; while(([] = 1e-81) && 0);");
tryItOut("if((0(false))) { if (default: .prototype = *::*) Math.pow else {(@foo);<x><y/></x>; }}");
tryItOut("if(yield <><x><y/></x></>) yield  /x/ ;(-3/0);\nexport *;\n else {do {prototype = @foo, prop\n } while((@foo ^= __noSuchMethod__ = constructor) && 0); }");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = eval(\"void arguments\", (new <y><z/></y>())) in ({__noSuchMethod__: 1.2e3})) {gc()throw #1=[#1#]; }");
tryItOut("L:with({__noSuchMethod__: *}){yield;let prop = <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in prop) {continue ;yield; }");
tryItOut("/*for..in*/for(const __iterator__ in (this.zzz.zzz)) {export __parent__; }");
tryItOut("export *\n");
tryItOut("{if((yield [[1]])) var prop, __iterator__ = #3={a:#3#}; }");
tryItOut("return <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <x><y/></x>.__parent__['__iterator__'] in  /x/ .isPrototypeOf(<x><\ty/></x>)) return *;");
tryItOut("/*infloop*/while(undefined.prototype)gc()/*for..in*/for(prop in (((1 for (x in [])))((window === __proto__))))if(null) { if (null) {;__proto__ = <><x><y/></x></>, __iterator__; } else Math.pow}");
tryItOut("yield ((p={}, (p.z = constructor)()));");
tryItOut("{new Function/*for..in*/for(const [__noSuchMethod__, __proto__] = 1e+81 in  /x/ ) const prop = #1#; }");
tryItOut("gc()");
tryItOut("/*infloop*/M:do /*for..in*/L:for(const __iterator__ = [,] in  /x/g ) export *; while((eval(\"throw @foo;\", __count__) for (this in <y><z/></y>) for each (constructor in  /x/g )));");
tryItOut("L: {export *; }");
tryItOut("for(let y in [5,6,7,8]) (function ([y]) { });");
tryItOut("/*infloop*/for([15,16,17,18].filter([1,2,3,4].map,  '' ).prop; new ((.2).apply)(); __proto__ = this.__defineSetter__(\"__noSuchMethod__\", (Function).apply)) const __iterator__;");
tryItOut("for(let y in []);");
tryItOut("if(prop = __noSuchMethod__) {(<x><y/></x>);throw #1#; } else  if (<><x><y/></x></>.valueOf(\"number\")) {}");
tryItOut("do prop, __count__ while((<x><y/></x>) && 0);");
tryItOut("while((constructor.__iterator__\r = eval(\"eval(\\\"prototype\\\\f = window\\\", (undefined)[[]])\", __count__ = true :: 1.3)) && 0){ }");
tryItOut("if(<x><y/></x>) { if (<><x><y/><\r/x></>) {return *; }} else continue M;\nif((*::* >>>=this) ? () : [prototype].some(({}).__lookupGetter__)) {/*infloop*/do continue ; while(this);throw <><x><y/></x></>; } else {yield;/*for..in*/for(const __count__ in <x/>) export __count__; }\n");
tryItOut("{throw <><x><y/></x></>;5.0000000000000000000000; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in false.valueOf(\"number\")) constructor = prototype;");
tryItOut("new Function");
tryItOut("/*for..in*/for(prototype[\f'__noSuchMethod__'] in ((Math.pow)(<><x><y/></x></> >= \f[z1]))){export  '' ; }");
tryItOut("/*infloop*/for(var constructor;  /* Comment */null; constructor) {if(eval(\"{}\", null)) { if (<x><y/></x>.watch(\"__iterator__\", \t({}).hasOwnProperty) | (yield  /x/ .constructor setter= function (__noSuchMethod__) { return <x><y/></x> } )) {/*for..in*/for(__noSuchMethod__ in undefined) {(window); }<y><z/></y>; }} else if(3.141592653589793) { if (<y><z/></y>) {yield <><x><y/></x></>; }} else ; }");
tryItOut("with((let __count__, __parent__) >= (yield \f<x><y/></x>.(this))){let = prototype;with(<><x><y/></x></>.__lookupGetter__(\"__iterator__\"))yield; }");
tryItOut("with({}) return *::*; const __iterator__;");
tryItOut("{var prototype = <x><y/></x>, __noSuchMethod__ = #1=[#1#]; }");
tryItOut("do /*infloop*/for(constructor; false;  /x/ ) return;break ; while(((({__noSuchMethod__: ({prototype getter: function () { throw  /x/ ; }  }) }))) && 0);");
tryItOut("L: {with(#2=[.2]){gc()return; }var __iterator__ =  /x/ ; }");
tryItOut("/*for..in*/for(var __count__ in (((1 for (x in [])))(<><x><y/></x></> & <x><y/></x>)))");
tryItOut("M:if(constructor *= 3/0\n) M:do {return; } while((__count__) && 0);");
tryItOut("while(((eval(\"__count__ <<= *\", (\nconstructor.__lookupGetter__(\"__iterator__\"))))) && 0)constructor = !<><x><y/></x></>, __noSuchMethod__;");
tryItOut("/*infloop*/for(window; true; __parent__) {return;export __parent__; } const constructor;");
tryItOut("try { try { try { __noSuchMethod__ = prop; } finally { let(prototype = return <x><y/></x>;) { __iterator__ = __iterator__; }  } catch(__proto__ if (function(){let(__proto__ = <><x><y/></x></> ? [,,z1] : (<x><y/></x> == 3.141592653589793), __iterator__) ((function(){<y><z/></y>;})());})()) { return .__lookupSetter__(\"prop\").__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; /*for..in*/for(const prototype in constructor) {const constructor = __parent__, constructor;<x><y/></x>; }; yield y; }); }  } catch(__noSuchMethod__) { ; const __iterator__; } ");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] = null in ({a1:1})) yield @foo;");
tryItOut("{<><x><y/></x></> - <y><z/></y>return; }");
tryItOut("yield (({prop getter: 'haha'.split, __noSuchMethod__: * }));");
tryItOut("if(0/0.__lookupGetter__(\"__count__\")) { if ((this.zzz.zzz :: *::*)) {__parent__, constructor = 3; } else {yield;export prototype; }}");
tryItOut("gc()\nyield  '' ;\n");
tryItOut("__parent__\n");
tryItOut("/*infloop*/M:for(let  '' ['prototype']; <x><y/></x>; (({constructor getter: Function,  set __count__() { return; }  }))) {true; }");
tryItOut("/*infloop*/for(const __count__; (({ : __iterator__ }) =  { M:if([[]]) {yield;let __parent__; } else  if ( /x/ ) __proto__; } ); new (__proto__['__iterator__'] = new ((-0))(<x><y/></x>, <x/>))) /*infloop*/for(var __proto__; (prop = this.__defineSetter__(\"x::__parent__\", (<x><y/></x>).apply)); function(q) { return q; }.__defineGetter__(\"__proto__\", function  __proto__ (, __iterator__) { yield __iterator__ } )) switch(this.__defineSetter__(\"__noSuchMethod__\", function (__iterator__, constructor) { return window } )) { default: export *;break;  }");
tryItOut("do {yield; } while((prototype.prototype getter= function(q) { return q; }) && 0);");
tryItOut("M:if((prop|=0.1)) {const __iterator__ =  \"\" ; } else  if ((this)([[1]], constructor)) {var __count__,  { yield  \"\"  } ; } else {<xxx {__count__}={({__noSuchMethod__: [z1] }) ? __parent__%= ''  : this ?  /x/  : <y><z/></y>} /> }");
tryItOut("const prop;");
tryItOut("break ;");
tryItOut("L: yield;");
tryItOut("var ({ constructor: constructor, __parent__: __parent__ }) = eval( /x/ , <x><y/></x>), __noSuchMethod__; const __proto__;");
tryItOut("/*infloop*/for(.unwatch(\"__iterator__\"); ((__parent__) >>>=let (prop = -(#1# = [z1,,])) arguments); prototype.eval( /x/g ).isPrototypeOf(--#1=({constructor: <y><z/></y>}))) /*infloop*/do ; while(([<x/>]));");
tryItOut("/*for..in*/for(const __proto__ = (__iterator__.(yield (<><x><y/></x></>.yoyo(0x99)))) for each (x::__parent__ in Object((constructor = #1=[#1#]), window)) for (__noSuchMethod__((prop)(<><x><y/></x></>)) in (new ('haha'.split)((eval(\"<>case  /x/g .watch(\\\"<x/>\\\", gc)\\t: ;case 0: break; let(constructor = <><x><y/></x></>) ((function(){{}})());break; </>\", <><x><y/></x></>))))) if (window) in [,,z1]) {throw  /x/ ; }");
tryItOut("function(q) { return q; }");
tryItOut("export __count__;");
tryItOut("/*infloop*/L:while(<x><y/></x>.__defineGetter__(\"prop\", (1 for (x in []))))break \n");
tryItOut("M:if('fafafa'.replace(/a/g, .__proto__)) yield  \"\" ; else prototype;");
tryItOut("if(<y><z/></y>) {export __noSuchMethod__; } else  if (window) {} else {const __iterator__ = constructor;__iterator__, prototype = ({a2:z2}); }");
tryItOut("if(new (__count__).__defineSetter__(<><x><y/></x></>, window) .@ new function(q) { return q; }((window / null), <x><y/></x>)) var __iterator__ = window, constructor = <x><y/></x>; else {export prop; }");
tryItOut("L:with(<</>){yield;gc() }");
tryItOut("for(let y in []);");
tryItOut("yield;");
tryItOut("L:if(let (__count__) (uneval(<y><z/></y>))) {const prototype; } else {<><x><y/></x></>; }");
tryItOut("<!--yy-->");
tryItOut("; const (())( /x/g  ^ );");
tryItOut("/*for..in*/for(let constructor in [z1,,] ? <x><y/></x> : #3={a:#3#}) {yield <x><y/></x>;return; }L:switch((({ set prop prop () { yield (eval).call } ,  set prototype(__parent__) { yield <><x><y/></x></> }  }))) { default:  }");
tryItOut("/*for..in*/for(const x::constructor = .2 in __count__) {{}*::*; }");
tryItOut("{}var __noSuchMethod__, __proto__ = null;\nif((yield this)) throw <><x><y/></x></>; else  if (undefined(#1=[#1#], __iterator__)) gc()\n");
tryItOut("L: {gc()prototype;if(prototype = []) /*infloop*/L:for(-3/0; <x><y/></x>; <><x><y/></x></>) return 033; }");
tryItOut("/*for..in*/for(const prop in (__count__)\t.__noSuchMethod__ =  /x/ [({})]) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in ([<x><y/></x>])) do {(-1);return this; } while((prop) && 0);throw new -3/0(*, gc()); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  /x/g ) {throw ; }");
tryItOut("/*for..in*/for(const prop in ((*::*.watch(\"prototype\", [1,2,3,4].slice))(let (__count__ =  /x/ , __noSuchMethod__ = <><x><y/></x></>) window))){export *; }");
tryItOut("if(eval(\"new [1,2,3,4].map()\", 3.141592653589793.watch(\"__noSuchMethod__\", <><x><y/></x></>))) { if (__count__ + @foo) export __proto__\n} else {throw  \"\" ; }");
tryItOut("if(({ constructor: constructor, __parent__: __count__ }) = __iterator__) {{yield;arguments; } }");
tryItOut("while((true[<x/>\f]) && 0)const __iterator__, constructor = #1#;");
tryItOut("for(let y in []);");
tryItOut("if(( ''  if ([15,16,17,18].sort(true,  '' )))) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__.prototype in __noSuchMethod__) {(0x99); }");
tryItOut("/*for..in*/M:for(__count__ in (([1,,])(window)))export *;");
tryItOut(" const __parent__;");
tryItOut("export *;");
tryItOut("switch([z1,,].(this.__defineGetter__(\"false\", Math.sin))) { case (this.prop): break M;break; case  >  \"\" : <employee id=\"1\"><name>Joe</name><age>20</age></employee> }");
tryItOut("/*infloop*/for((yield ()); ((__iterator__ = null) *= (<><x><y/></x></>)) ^= (window :: undefined).unwatch(\"function::__proto__\"); __proto__ %= #3={a:#3#}) <y><z/></y>;");
tryItOut("gc()");
tryItOut("<x><y/></x>\n");
tryItOut("let (prototype, prop = [__iterator__, __count__] = \n<><x><y/></x></>) { {/*infloop*/while((<x><y/></x>.hasOwnProperty(\"__count__\"))){yield;; } } }");
tryItOut("break ;");
tryItOut("return __iterator__;");
tryItOut("(<x><y/></x>);");
tryItOut("__noSuchMethod__");
tryItOut("if(([].valueOf(\"number\").__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }))) yield;");
tryItOut("/*infloop*/M:for(((__noSuchMethod__)); get = this.isPrototypeOf(arguments) ===  /x/g ; new Boolean(<><x><y/></x></>)) /*infloop*/L:for(let ({ prop: prop }) = new ((((<x><y/></x>).watch).apply).call)(arguments, prototype);  /x/g  = 1e4; (0.propertyIsEnumerable(\"__proto__\"))) yield __proto__;");
tryItOut("/*infloop*/for(const prototype; <><x><y/></x></>; <><x><y/></x></>) {const prop;const __proto__ = window, prop; }");
tryItOut("return\n");
tryItOut("with((undefined.hasOwnProperty(\"prop\")))/*infloop*/M:while(( '' .unwatch(\"constructor\"))){export *;gc() }\nif( \"\" ) {break ;yield; } else  if (<><x><y/></x></>) {export let;export __count__; } else return;");
tryItOut("do  while((([[]] ,  '' )) && 0);");
tryItOut("");
tryItOut("/*infloop*/for(let prop; @foo; __count__) {{} }");
tryItOut("L: {; }\nreturn;\nexport __iterator__;\n\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((yield this.__defineGetter__(\"prop\", 'haha'.split)))['__iterator__'] in @foo) __parent__, __noSuchMethod__;");
tryItOut("while(([11,12,13,14].some) && 0){do {__noSuchMethod__export *; } while((((uneval(4.)).__lookupGetter__(\"__proto__\"))) && 0); }");
tryItOut("{/*infloop*/L:do {export prototype; } while([11,12,13,14].sort); }");
tryItOut("if(*.hasOwnProperty(\"__count__\")) {/*for..in*/M:for(let __parent__ = __iterator__\f.throw(@foo)\f in __parent__) const prototype, constructor = <x><y/></x>;yield  \"\" ; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (([1,2,3,4].map)( /x/g ))){'haha'.splitexport constructor; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = this in <x><y/></x>.(__proto__)) return;");
tryItOut("throw <><x><y/></x></>");
tryItOut("M:if() { if (*.__defineGetter__(\"__iterator__\", ([,]).watch)) {gc() } else {export *;export *; }}");
tryItOut("if(<bbb xmlns=\" \"\" \"><ccc:ddd> </ccc:ddd></bbb>) {export *; }");
tryItOut("let (({ __noSuchMethod__: [({ prop: __count__ })] }) = function ([y]) { } .@*:: ('haha'.split).call(true, ) * <xxx {__iterator__}={false.yoyo((-0))} />) { L:if(<><x><y/></x></>) export prop; }");
tryItOut("/*infloop*/while((uneval(prototype))){prototype;{} }");
tryItOut("this.zzz.zzz;");
tryItOut("return <x/>;");
tryItOut("/*for..in*/for(let [prototype, __noSuchMethod__] = this in (let (__iterator__ = 0x99, __iterator__ = <y><z/></y>) <x><y/></x>--)) {M:with({prop: (prop.eval(window))})/*infloop*/for((__proto__ = __proto__); #0=({prototype: 5.0000000000000000000000}); (yield constructor)) {throw (function ([y]) { })(); }/*infloop*/for(let __proto__; undefined; __proto__+=(<x><y/></x> ? 1e81 : <x><y/></x>)) {throw [,]; } }");
tryItOut("{if(<><x><y/></x></>.hasOwnProperty(\"__count__\")) {var 0.1, __noSuchMethod__ = <><x><y/></x></>;gc() } else  if ((let (__proto__ = <x/>, __iterator__) 1.2e3)) {throw <x><y/></x>;gc() } }");
tryItOut("M:if(true) export *; else  if ('fafafa'.replace(/a/g, (1 for (x in [])))) gc()");
tryItOut("M:if(new Function()) { if (new (({prop: <y><z/></y>,  for each (__proto__ in 033) for (__noSuchMethod__ in  \"\" ) })).valueOf(\"number\") |= {}) if(eval(\"( '' );\", 'fafafa'.replace(/a/g, function ()1e81))) *::*; else if((gc).call((gc).call( /x/ , ), <x/>.__defineGetter__(\"prop\", (this).__defineSetter__), <x/>)) return <x><y/></x>; else  if (prop = __proto__) export \t__proto__\n else do throw @foo; while(((null).call(<><x><y/></x></>, @foo)) && 0);}");
tryItOut("for(let y in [5,6,7,8]) yield ([z1] /= new <y><z/></y>(<x/>));");
tryItOut("with({}) { throw prop; } ");
tryItOut("__iterator__ = __proto__;");
tryItOut("(window);");
tryItOut("with({}) throw StopIteration;");
tryItOut("L:if(new false) function  prop (constructor, __parent__)__iterator__ else  if (if(<x/>.hasOwnProperty(\"__proto__\")) {export *;export *; } else return (function ([y]) { })().unwatch(\"__iterator__\")) {yield *\nyield <x><y/></x>; } else {;{} }");
tryItOut("{{} }");
tryItOut("/*infloop*/for(const ({ __proto__: [prop, , __proto__, prototype, ] }) = ; [var __count__;.unwatch(\"prop\") for each (__iterator__ in  /x/g ) if (<><x><y/><\r/x></>)]; prop) {return <><x><y/></x></>; }");
tryItOut("L: {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in (p={}, (p.z = <x><y/></x>.throw(<x/>))()) &= (new [1,2,3,4].map())) {/*for..in*/for(const this['prop'] in ((/a/gi)( ))){;\nlet constructor;\ndefault: function(y) { yield y; constructor =  /x/g ;; yield y; } } }");
tryItOut("continue L;\nyield;\n\n");
tryItOut("if(<x><y/></x>.isPrototypeOf([]) != __iterator__ + (true).call(*, *)) { if ((*::*.propertyIsEnumerable(\"prototype\").__defineSetter__(\"__count__\", function ([y]) { }) , __iterator__.__count__)) {let (prototype = <x><y/></x>) {  { export *; }  }(<y><z/></y>); } else M:if(0/0) {} else }");
tryItOut("({}).__lookupGetter__");
tryItOut("if(( /* Comment */<><bbb xmlns=\"constructor\"><!--yy--></bbb></>)) {export setter;if(3.141592653589793) {\fvar __parent__ = <x><y/></x>; } } else  if (function ([y]) { }.__lookupGetter__(\"prop\").__noSuchMethod__) /*infloop*/for(this.__defineGetter__(\"__proto__\", gc); (1 for (x in []))(prop%=prop, undefined); (__parent__ = <>try { return; } catch(__parent__) { throw __iterator__; } </>.@foo) <<= ({constructor: *, __iterator__ setter: propfunction  prototype (__proto__, __noSuchMethod__) { return ({}) }  })) {break L;/*for..in*/for(const [function::__count__, prop] = 5.0000000000000000000000 in __proto__) {(({}).hasOwnProperty).callyield; } }");
tryItOut("M:if(prop = (prototype = [<x/>])) {return; }");
tryItOut("if(__parent__ = <x><y/></x>.(<y><z/></y>)) {/*infloop*/M:while([this])(<x><y/></x>).__defineSetter__ } else  if ((throw yield  '' )) {const prop = this;; } else Math.sin");
tryItOut("{{}export *; }");
tryItOut("do {export constructor; } while((('fafafa'.replace(/a/g, 033))) && 0);");
tryItOut("/*for..in*/L:for([__parent__, __count__] = false in <x><y/></x>) {var prop; }");
tryItOut("let (prototype = <x><y/></x>, __parent__) { yield *; }");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __iterator__) {return;let __count__, __parent__; } } while(([prop]));");
tryItOut("return __noSuchMethod__|=<><x><y/></x></>;");
tryItOut("switch(((yield window)))\t { case (): break; case false.unwatch(\"__noSuchMethod__\")\t: export __count__;break;  }");
tryItOut("/*for..in*/for(var __proto__ = <x><y/></x> in null) return 033;\nyield;\n");
tryItOut("with({}) throw prototype;");
tryItOut("null const constructor;");
tryItOut("/*for..in*/for(let __iterator__ in (((1 for (x in [])))(*)\f)){yield <x><y/></x>;@foo; }");
tryItOut("switch((yield (__proto__ = window)).__lookupGetter__(\"__noSuchMethod__\")) { case this.__defineGetter__(\"prop\", (1 for (x in []))): gc()case 7: return;break; default: (eval).callbreak;  }");
tryItOut("/*infloop*/L:while(<><x><y/></x></>){}");
tryItOut("if(({constructor: this, __count__ getter: (window).__defineSetter__ })) { if ((uneval(.2))) {new Functionlet __parent__, __parent__; }} else export __proto__;");
tryItOut("prop = __iterator__;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __iterator__] = (Boolean(<\tx><y/></x>))(__proto__|=<x><y/></x>.throw([15,16,17,18].sort(window, [,,z1])), <y><z/></y>) in (__proto__ ? try { yield yield 1e4; } finally { with({}) { 3/0; }  }  : *)) {{/*infloop*/M:while(<x><y/></x>);/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in  /x/g ) (<x/>); } }");
tryItOut("/*for..in*/for(let (__count__) in ((function(y) { yield y; export __iterator__;; yield y; })((({}).hasOwnProperty)())))/*infloop*/while([,,z1] >>> <x/>)constructor;");
tryItOut("switch([]) { case *::*: break ;case 5: Math.pow }");
tryItOut("{{} }");
tryItOut("/*for..in*/");
tryItOut("{/*infloop*/for(const constructor; ({__count__ setter: gc, __parent__: window }); prop.__parent__ = <x/>) {yield; }L: export *\f; }");
tryItOut("if(this) (__proto__);");
tryItOut("{/*infloop*/do {return;break M; } while(<y><z/></y>);prop = __parent__, prop; }\nthrow <><x><y/></x></>\f;\n");
tryItOut("{let prop = (-1) += <y><z/></y>; }");
tryItOut("{}\n");
tryItOut("if(__proto__.(<><x><y/></x></> >>> /></x>)) constructor, __parent__ = false; else {return (-1); }");
tryItOut("return new (function(q) { return q; })( '' , constructor);");
tryItOut("L: {*;export *; }");
tryItOut("/*for..in*/\ffor(const [__parent__, __iterator__] = 033 < prototype in @foo) yield;");
tryItOut("/*for..in*/for(var <x><y/></x>.function::prototype in ((([ /x/ ]).__defineSetter__)(let (constructor, __count__ = __iterator__ = <x><y/></x>) ({__noSuchMethod__: 1e81 })))){; }");
tryItOut("with((new RegExp(this)).watch(\"__noSuchMethod__\", Function))/*infloop*/L:for(<y><z/></y>; (*['__noSuchMethod__'] = __count__); <x/>) break M;");
tryItOut("/*for..in*/L:for(this.__proto__ in __proto__ ^= @foo) {(<></>);gc }");
tryItOut("/*infloop*/while((__count__ = *::*)[__count__ = 0]){(<><x><y/></x></>); }");
tryItOut("do {L:if(this.zzz.zzz) const __count__; else  if ([15,16,17,18].sort([1,2,3,4].slice,  /x/ )) yield;const prototype = <x><y/></x>, __count__ =  \"\" \nconst __noSuchMethod__ = 1e-81, prop = prop; } while((\t /* Comment */__count__ = __iterator__.unwatch(\"prototype\")) && 0);");
tryItOut("with(<x/>){throw this;const __proto__; }");
tryItOut("while(((*.__defineSetter__(\"__proto__\", function  __iterator__ (__proto__) { return  \"\"  } ) if (*))) && 0);");
tryItOut("/*for..in*/for(const __count__ = ([this].map(Math.sin)) in window) let __count__, constructor;");
tryItOut("/*infloop*/for(let __parent__ = ({constructor: constructor = 1.3, __parent__: <x><y/></x>.((-0)) }); new Boolean(); prop.prop.__proto__ = (let (constructor = -1) 3/0)) {{} }");
tryItOut("yield (p={}, (p.z = __proto__.valueOf(\"number\"))());");
tryItOut("continue ;");
tryItOut("L: var __parent__ = *::*;");
tryItOut("L: /*for..in*/for([prop, prototype] = ( /x/g )() in <><x><\ty/></x></>) var constructor = __proto__, __iterator__;");
tryItOut("if(return <x><y/></x>;.__defineSetter__(\"<><x><y/></x></>\", /a/gi) if (eval(\"(__proto__ = window)\", undefined.__defineSetter__(\"prototype\", (new Function(\"(function(q) { return q; }).apply\")))))) {/*infloop*/for(prop; __proto__; *::*) let __proto__, __parent__; }");
tryItOut("/*for..in*/for(const [, , __proto__] in ((function(q) { return q; })((-1 != (<><x><y/></x></>.watch(\"constructor\", [1,2,3,4].map))))))gc()");
