tryItOut("/*infloop*/for(-<y><z/></y>; ; * = ((__proto__.prototype) ? * : __count__ = [11,12,13,14].map)) ");
tryItOut("M:while((<x/>) && 0)return <>\f<x><y/></x></>;");
tryItOut("/*for..in*/for(const constructor = (let (__noSuchMethod__) <><x><y/></x></>.eval((function ([y]) { })())) in ( ''  .@ (yield @foo))) {/*for..in*/for(var __iterator__ = [__proto__].map(function  __iterator__ (__iterator__, __count__) { yield function(id) { return id } } ) in true) (new Function(\"gc()\")) }");
tryItOut("if(({}).__lookupGetter__()) {with({prop: *::*}){continue ;gc } } else __proto__, __iterator__;");
tryItOut("yield <x/>;\nbreak ;\n");
tryItOut("let(constructor = throw function::__iterator__) { throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in [15,16,17,18].sort((undefined).watch, <><x><y/>/x></> !== <x/>)) {/*for..in*/M:for(__noSuchMethod__ = [null for each (prototype in this)] in this) {__parent__, constructor;yield; }__iterator__ = __noSuchMethod__; }");
tryItOut("return ((<><x><y/></x></>)[ /x/ ] ? [,,] : (eval(\"while((<><x><y/></x></>) && 0){gc()gc() }\", true)))\n");
tryItOut("/*for..in*/M:for([__parent__, prototype] = -#1=[#1#] in *::*) (function(id) { return id });");
tryItOut("__parent__ = __count__;");
tryItOut("yield true;let (prop, __noSuchMethod__ = <><x><y/></x></>) { export prototype; }");
tryItOut("let (({ prototype: , __noSuchMethod__: __proto__ = <x><y/></x>.eval(function (getter) { return <><x><y/></x></> } ).prototype }), prop) { {continue ;/*for..in*/for(const [__iterator__, __parent__] = __iterator__ in [[]]) (<y><z/></y>);yield <y><z/></y>; } }");
tryItOut("/*infloop*/while(prop){{}export *; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*infloop*/do {export __count__;; } while((yield this.__defineGetter__(\"__proto__\", Math.pow)));");
tryItOut("with({}) __iterator__ = prototype;");
tryItOut("with(constructor.(<y><z/></y>)){M:with(null ? this : throw <x><y/></x>;){window; } }");
tryItOut("throw constructor;");
tryItOut("do {const __noSuchMethod__ = <><x><y/></x></>; } while(((<><x><y/></x></>.propertyIsEnumerable(\"__count__\"))) && 0);");
tryItOut("if(let (__iterator__) true\f) __iterator__; else with({__parent__: <x/>}){<x/>;[1,,]; }");
tryItOut("let prop =  /x/ , __proto__ = __noSuchMethod__\n");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] = __proto__ in window) {const prop =  \"\" , prop = [1,,];(#1=[#1#]); }");
tryItOut("L:if((this === <x><y/></x>)) { if (#3={a:#3#}) @foo else const __iterator__ = undefined;}");
tryItOut("/*infloop*/do {/*infloop*/for(<y><z/></y>; null; __parent__) {throw ({a2:z2});; } } while('haha'.split);");
tryItOut("with( /x/ ){M:if(true) return @foo; else  if (<><x><y/></x></>) export __iterator__; }");
tryItOut("/*infloop*/for((yield [,].@foo); (eval(\"if(__iterator__.*) { if ((undefined.__lookupSetter__(\\\"__proto__\\\"))) } else @foo;\", [,,] += this).valueOf(\"number\")); (<x><y/></x>.( '' ).eval(([15,16,17,18].map( /x/ , undefined))))) if(<><x><y/></x></> >=  \"\" ) {return <><x><y/></x></>;([,]); } else  if (( /* Comment */prop = <x><y/></x>)) {gc() }");
tryItOut("/*infloop*/for(this; 1e+81.propertyIsEnumerable(\"constructor\"); (eval(\";\", [,]))) {const __noSuchMethod__ = this, __count__ = null; }");
tryItOut("/*infloop*/L:for(( /x/ ).call(__proto__,  /x/ ); <x><y/></x>;  /x/ .__defineSetter__(\"__iterator__\", function (prop) { yield <><x><y/></x></> } )) {throw <><x><y/></x></>;\nlet __parent__ = constructor, constructor;\n }");
tryItOut("L:if(constructor = function::__count__) Math.pow else {var __parent__;export *; }");
tryItOut("Function");
tryItOut("/*for..in*/M:for(var  = (--<y><z/></y>) in <><x><y/></x></>) {; }");
tryItOut("with({__count__: (#0=[__noSuchMethod__.__proto__ = <><x><y/></x></>])}){case [1,,]: break; case function ([y]) { }: {/*infloop*/do {prop = <y><z/></y> } while(__noSuchMethod__ =  /x/ );; }break;  }");
tryItOut("\nif(__noSuchMethod__ = __noSuchMethod__ ? eval(\"return <><x><y/></x></>;\", <><x><y/></x></>) : -1) (1e4); else  if ((0x99 != ([15,16,17,18].filter((null).__defineSetter__, window)))) {gc() }");
tryItOut("{/*for..in*/for(let [__count__, constructor] = prototype.prop in 5.0000000000000000000000) export __parent__;break M; }");
tryItOut("{/*for..in*/for([__count__, constructor] = ( /* Comment */<><x><y/></x></>) in <><x><y/></x></>) {__iterator__, __iterator__ = __proto__;continue ; }M:while((__noSuchMethod__ = [z1,,]) && 0){if(<x><y/></x>) break M; else  if ([[]]) {let prop; } }(window) }\n__count__, __noSuchMethod__;\n");
tryItOut("with({}) try { ({}).__lookupGetter__ } finally { return; } ");
tryItOut("{}\n");
tryItOut("with({__proto__: *}){continue ; }");
tryItOut("/*infloop*/while((1e-81 >> <x><y/></x>)){yield; }");
tryItOut("{return; }");
tryItOut("if((yield (__noSuchMethod__.prototype ? 1e+81.prop : {export *; } = <><x><y/></x></>))) {__iterator__ = undefined; } else  if ( /x/g ) {yield;yield @foo; }");
tryItOut("with({}) let(constructor = *::*.yoyo(null).__noSuchMethod__) { <y><z/></y>.prototype = __count__;");
tryItOut("/*for..in*/for(const prototype; in (((new Function(\"for(let y in [5,6,7,8]) let prototype = window, prop = __iterator__;\")))(([] = this))))/*for..in*/for(let [__noSuchMethod__, constructor] = prototype = [1,,] in  \"\" ) yield window;");
tryItOut("with({prop: ([15,16,17,18].some(((new Function(\"return;\"))).call, (function ([y]) { })()))})/*for..in*/for(let prop in (((<x><y/></x>).__defineSetter__)(*))){function  constructor () { yield <x/> }  }");
tryItOut("{-1;gc() }");
tryItOut("/*for..in*/L:for(var __iterator__ in <x/>) {return <y><z/></y>\t; }");
tryItOut("let (__iterator__ = window) { true; }");
tryItOut("yield;\n__parent__ = <><x><y/></x></>, __proto__ = [z1,,];\n");
tryItOut("/*for..in*/for(const __proto__(yield *) in ({ get __count__ __proto__ (__count__) { yield 1e4 } , __noSuchMethod__: <y><z/></y> })) let (__count__ = <><x><y/></x></>, __noSuchMethod__ = <><x><y/></x></>) {  }");
tryItOut("/*for..in*/for(prop = (!3/0) in (function ([y]) { })()) yield;");
tryItOut("/*for..in*/for(let __noSuchMethod__.__proto__ in <y><z/></y>) {yield;false }");
tryItOut("prototype = false;");
tryItOut("/*for..in*/for(const __iterator__ in (({ prototype: prototype, prop: __proto__ }) = null)) while((typeof *.__proto__) && 0)continue L;");
tryItOut("/*infloop*/for(__count__; false; <y><z/></y>) const this = *, __proto__ = null;");
tryItOut("/*infloop*/for(<x><y/></x>; function ([y]) { }; <><x><y/></x></>) const function::__proto__, prop = __noSuchMethod__;");
tryItOut("with({__count__: (new Iterator().__defineGetter__(\"prototype\", [1,2,3,4].map))})throw prototype;");
tryItOut("try { let(prop, constructor) ((function(){yield true;})()); } catch(__count__ if (function(){try { continue ; } catch(__count__) { __parent__; } finally { return; } })()) { throw constructor; } catch(__noSuchMethod__ if (function(){__noSuchMethod__ = prop;})()) { with({}) yield <x><y/></x>; } ");
tryItOut("if([__parent__, __parent__, constructor, prototype] = (eval(\"export *;\", <y><z/></y>))) while((<x/>) && 0)const prop = <x><y/></x>, constructor = window;");
tryItOut("export __proto__;Q/*for..in*/L:for(var [prototype, prototype] = [,,] in __iterator__) constructor");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in undefined) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__.constructor in __count__ = null) export *;");
tryItOut("/*for..in*/for(var constructor = ( /x/ .__noSuchMethod__) in  \"\" ) {export *; }");
tryItOut("/*for..in*/L:for(const [prototype, __noSuchMethod__] = (-0) in <x><y/></x>) let prop, __iterator__;");
tryItOut("with({__noSuchMethod__: prototype++}){__iterator__ = [1,,], constructor = [1,,]; }");
tryItOut("if(__proto__.(<><x><y/></x></>)) L: {;; } else {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__.__parent__ in window) /*for..in*/for(var __iterator__ in ((<x/>)((* %= 0))))throw  '' ;");
tryItOut("{; }");
tryItOut("prototype = __count__;");
tryItOut("{/*infloop*/while((this.zzz.zzz))do {yield (-0); } while((#3={a:#3#}) && 0);var prop = [null for (__noSuchMethod__ in function::__proto__)]; }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*for..in*/for(const ('fafafa'.replace(/a/g, #1=[#1#]))(<><x><y/></x></> + #1#) in (<x><y/></x>).__defineSetter__(1.3, function ([y]) { })) {undefinedexport *; }");
tryItOut("/*for..in*/for(var [__proto__, prototype] = <x><y/></x>.(prop) in prototype = []) return (<x><y/></x> for each (prototype in __noSuchMethod__)).@foo;");
tryItOut("gc()\n");
tryItOut("if(prototype.__defineSetter__(\"__count__\", true)) 0.1 else yield\n");
tryItOut("while(() && 0){ }");
tryItOut("L\t: { { yield [[1]]; }  }");
tryItOut("{{}yield  \"\" ; }");
tryItOut("/*for..in*/M:for(const constructor.__count__ in (constructor.__noSuchMethod__ getter= function(y) { yield y; ; yield y; })) yield <><x><y/></x></>;");
tryItOut("with({__count__: new ('haha'.split)()}){\f<><x><y/></x></>\n }");
tryItOut("if(<><x><y/></x></> * undefined) {throw constructor; } else  if ([(<x/>.valueOf(\"number\") if ( /x/g ))].sort(function (__parent__) { return <y><z/></y>.__defineGetter__(\"__noSuchMethod__\", 'haha'.split) } )) {return <x><y/></x>;L: {Math.sincontinue ; } }");
tryItOut("\ngc()\n");
tryItOut("__proto__ = prop;");
tryItOut("{}");
tryItOut("/*infloop*/while/*\n*/((@foo /= <><x><y/></x></>))throw *;const prop, __parent__;\nif(__proto__)  else {; }\n");
tryItOut("/*infloop*/while((yield ((__count__))) ^= (new undefined(<><x><y/></x></>, prop))(*::*,  '' )){yield;{} }");
tryItOut("throw function::prop;");
tryItOut("export *\nexport __iterator__;");
tryItOut("throw __count__;");
tryItOut("if((p={}, (p.z = [new @foo(true, <><x><y/></x></>)].some(({}).hasOwnProperty))())) { if (#0=({__noSuchMethod__: ((\neval(\"yield  /x/ ;\", undefined))(this.__defineGetter__(\"__parent__\", [1,2,3,4].map)))})) {with(*::*){return;case 7: gc()break; case 7: throw  \"\" ; }return; } else {{};//h\n }}");
tryItOut("/*for..in*/for(const __parent__.constructor in ([z1,,] += 3.141592653589793)) (*::*);");
tryItOut("if((#1#)[<y><z/></y>]) prototype, __count__");
tryItOut("/*infloop*/for(4.; <x><y/></x>(); <x><y/></x>.__defineGetter__(\"constructor\", eval)) return  /x/ ;\n/*for..in*/for(const constructor = window in <x><y/></x>) {{} }\n");
tryItOut("");
tryItOut("/*for..in*/M:for(((yield 5.0000000000000000000000.eval(<x/>))) in __iterator__ = this) do {yield; } while((<><x><y/></x></> > 033) && 0);");
tryItOut("/*for..in*/for\n(const __iterator__ =  /x/g  in (({prototype: <><x><y/>\f</x></>}))) {/*infloop*/M:for((1.2e3 >= <><x><y/></x></>).__proto__; __noSuchMethod__ = <><x><y/></x></>; (eval(\"(new  /x/ (#1=[#1#]))\", prop))) {if(this.__defineGetter__(\"__iterator__\", new Function)) { if (<x/>--) {let prototype, __count__;export *; }} else {yield 1e-81; }/*infloop*/for(const __iterator__;  /* Comment */<><x><y/></x></>; 1e-81.hasOwnProperty(\"prop\")) export __proto__; } }");
tryItOut("let (__parent__ = this, __iterator__ = 1.2e3) { yield; }");
tryItOut("return <><x><y/></x></>;\nreturn false;\n");
tryItOut("/*infloop*/M:do {export *;const prop = <><x><y/></x></>; } while(__iterator__.__iterator__);");
tryItOut("{/*for..in*/for(let [__proto__, prop] = 1e81 in <y><z/></y>) {var prototype, __noSuchMethod__;(<x/>); }<x/>; }");
tryItOut("switch([z1,,]) { case 4: default: null;case  \"\" : case <><x><y/></x></>: break; {} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prop in true) {export prop;__iterator__, constructor = [1,,]; }");
tryItOut("/*for..in*/for(let __parent__ in ((({}).__lookupGetter__)(new ( /x/g )().unwatch(\"__count__\"))))let (prop = false) { \f(<x><y/></x>); const __iterator__; }");
tryItOut("with({prop: <x>\t<y/></x>}){constructor, prop = window;const prop = constructor, prototype = 0; }__count__;");
tryItOut("continue ; const prototype;if(this.zzz.zzz + this >>> __parent__ .@ this.zzz.zzz) {return  /x/ ;with({prop:  /x/g })(<><x><y/></x></>); } else  if (( \"\" .yoyo( \"\" )) != (({__noSuchMethod__: window}))) {yield @foo;break ; } else {export *;; }");
tryItOut("let (prop = *::*, prototype = (({__parent__: __parent__ = .2}))) { let prop; }");
tryItOut("switch(<x><y/></x> % window) { default: break; const prototype = __noSuchMethod__;break; break;  }");
tryItOut("return @foo");
tryItOut("{var prototype; }");
tryItOut("yield *; const __count__;");
tryItOut("/*for..in*/for(this.__count__ in ((1e+81).apply)(0/0, [,,z1])) continue ;let (__iterator__, constructor = window) { <x><y/></x> }");
tryItOut("if(null) { if (true) {{} }} else throw *::*\n");
tryItOut("if(033) {yield {};return; }");
tryItOut("/*infloop*/for(__noSuchMethod__ = [null]; ((p={}, (p.z = ([<><x><y/></x></> for each (constructor in window)]))())); this.zzz.zzz >>= (*)) {yield ({});const __proto__ = {}; }");
tryItOut("/*infloop*/do {{}return; } while(<x><y/></x>);");
tryItOut("L: {;/*infloop*/L:for([*::* for (__count__ in <x><y/></x>)]; (prop = 1e81);  \"\" ) export *; }");
tryItOut("for(let y in [5,6,7,8]) yield (uneval(__parent__.__noSuchMethod__ = [,,]));");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ((true\n))(({a1:1})) in (prop.({ prop: __iterator__, prop: __noSuchMethod__ }).watch(\"__proto__\", gc))) {let (({ __noSuchMethod__: prop })) { L:if(prototype) {let constructor = <x><y/></x>; } } }");
tryItOut("/*for..in*/for(let prop = null & (__noSuchMethod__[this]) in ((function ([,,].@foo['prop']) { return [null] } )(( ''  :: <x><y/></x>)[033.*]))){L: {<><x><y/></x></>; }if(__noSuchMethod__) {export prop; } }");
tryItOut("do export *; while((<zzz>//h\nnull</zzz>) && 0);");
tryItOut("/*infloop*/for(true.__defineGetter__(\"__proto__\", (<x/>).watch); ([[1]] / false); ({ get prototype()[z1,,] })) 3/0;");
tryItOut("yield 1.2e3;");
tryItOut("\twhile(([__noSuchMethod__]) && 0){prop = <x><y/></x>;[,]; }");
tryItOut("this.zzz.zzz;");
tryItOut("\n");
tryItOut("yield;");
tryItOut("if(({ constructor: [,  if (<><x><y/></x></>), constructor], prop: [[]] }) = constructor) { if (['fafafa'.replace(/a/g, (1 for (x in []))) for (<y><z/></y>.yoyo(<y><z/></y>) in  /* Comment */null) if (let __iterator__, __count__)]) {{} } else (1 for (x in []))}");
tryItOut("(this); const __count__;");
tryItOut("/*for..in*/for(let //h\n__parent__ in ((gc)(({__parent__: __parent__.__count__ = (prop = <y><z/></y>) }))))let __iterator__ = *::*, constructor = *;");
tryItOut("/*infloop*/L:for(var constructor = (*::*)[false]; @foo['prop'] = * >= *::*; (<><x><y/></x></> in <><x><y/></x></> === <x><y/></x\f>)) {yield; }");
tryItOut("/*infloop*/L:for(const __iterator__; <x><y/></x>.( /x/ ); ({__iterator__:  \"\"  }).__noSuchMethod__) if([z1]) {return @foo; } else  if (false) {gc()\rexport *; }");
tryItOut("if() {;/*infloop*/while( /x/ ){{} }\n } else {try { return; } catch(prop) { var __count__ = <><x><y/></x></>; } finally { export prototype; }  }");
tryItOut("{break \nwindow;L:if((#2=({constructor: 1e4}))) prop; }");
tryItOut("try { for(let y in []); } finally { with({}) with({}) throw false; } ");
tryItOut("L: {export __iterator__; }");
tryItOut("/*for..in*/for(const __iterator__ in @foo.unwatch(\"prop\")) {throw [,,z1];; }");
tryItOut("if((p={}, (p.z = (-0))()) % (__iterator__ = 1e4.eval(function(y) { yield y; var constructor = undefined;; yield y; }(<y><z/></y>)))) /*for..in*/M:for(const prototype = 'fafafa'.replace(/a/g, function  __iterator__ (__noSuchMethod__, __parent__) { const __noSuchMethod__, __noSuchMethod__; } ) in  /x/ ) {gc() } else L:while((#2=[(this.__defineSetter__(\"__count__\",  /x/ ))]) && 0){\r }");
tryItOut("/*infloop*/for([11,12,13,14].map; 1.2e3.__defineGetter__(\"__parent__\", ([1,2,3,4].map).call); (((*::*.__count__)))) yield  /x/g ;");
tryItOut("/*for..in*/for(var constructor in <x/>) {gc() }");
tryItOut("/*infloop*/while(null){{} }");
tryItOut("while(( /* Comment */prop.get getter= function(y) { yield y; export *;; yield y; }) && 0)__parent__, __parent__ = true;");
tryItOut("L:if(<x><y/></x>) throw  \"\" ; else  if (-3/0) {break L; }");
tryItOut("(function(id) { return id });");
tryItOut("let (__noSuchMethod__) { yield <x/>; const __iterator__; }");
tryItOut("/*for..in*/L:for(let prototype in this) {{}; }");
tryItOut("\fif((__proto__[<x/>])(__iterator__ = <x><y/></x>.__iterator__)) { if (<><x><y/></x></>\f.__count__ = <y><z/></y>) {{}do {{}const <><x><y/></x></>, prototype; } while(( ''  .@*:: this) && 0); }} else {L: {export __count__; }\nfunction   \"\"  (x::prop) { yield <><x><y/></x></> } \n }");
tryItOut("while((prop) && 0){/a/gi }");
tryItOut("this;\nvar prototype = (<x><y/></x> if ((function ([y]) { })()))--, ({ __noSuchMethod__: ({ __iterator__: prototype, constructor: __parent__ }), x::prototype: ({ constructor: __parent__ }) });\n");
tryItOut("switch((({ __iterator__: prop, __noSuchMethod__: constructor }) = ([,] >>>  '' ))) { default: let constructor, __parent__ = this;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (({__noSuchMethod__: __parent__ = __proto__ for (__count__.__count__ in *) if (<x><y/></x>), prototype: new (gc)(this.__defineGetter__(\"prototype\", (function  __noSuchMethod__ (prototype, prototype) { yield window } ).call)) }))(__noSuchMethod__.throw(5.0000000000000000000000)) in <><x><y/></x></>) {export __iterator__; }");
tryItOut("/*infloop*/L:for(constructor; null; null) gc()");
tryItOut("/*for..in*/for((\n033)(<x><y/></x>++) in __noSuchMethod__.(new (new Function)( '' , prop))) ");
tryItOut("/*infloop*/M:for((yield (<x><y/></x>(<x><y/></x>)).isPrototypeOf(--false)); window.__lookupGetter__(\"__iterator__\"); (.2.unwatch(\"__iterator__\")).__lookupSetter__(\"__iterator__\")) {if(__noSuchMethod__ = <><x><y/></x></>) var __parent__ = <y><z/></y>, prop; }");
tryItOut("return;");
tryItOut("__iterator__ = prototype;");
tryItOut("L: {export *;__proto__ = @foo, __noSuchMethod__ = -0; }");
tryItOut("L: {*;\n\n }");
tryItOut("/*infloop*/\tdo {/*infloop*/for([,,] .@ *::*; 1e4; ({__noSuchMethod__: <x/>, __parent__: <x><y/></x> })) {}\n } while();");
tryItOut("do  while((((return <y><z/></y>;).unwatch(\"__proto__\"))) && 0);");
tryItOut("if(<zzz>(constructor = 0x99)</zzz>) {return; }");
tryItOut("/*infloop*/for(let function::constructor; @foo; (uneval(typeof this))) yield;");
tryItOut("yield *::*;");
tryItOut("M:while((([15,16,17,18].filter(__count__, @foo))) && 0){}");
tryItOut("for(let y in []);");
tryItOut("throw true; const __noSuchMethod__;");
tryItOut("L: {var prop }");
tryItOut("if((__count__ = ({__noSuchMethod__ getter: Math.sin, __proto__ setter: (new Function(\"throw  /x/ ;\")) }))) {function(id) { return id } }");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("with(<><x><y/></x></>)((-0));");
tryItOut("L: do {{}const __noSuchMethod__; } while(((-[,])) && 0);{ \"\" \n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [11,12,13,14].sort) M:with(this.zzz.zzz)export prototype;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ constructor: [, , , __iterator__, ], prop: __noSuchMethod__ }) }) = __parent__.constructor; (new (Math.pow)((throw  '' ), *::*));  for (constructor.constructor in <><x><y/></x></>()) for (__iterator__ in ({ *::*: prototype }) = ({ __iterator__: prop }))) {const __iterator__;; }");
tryItOut("/*infloop*/do return < x__noSuchMethod__</></x>; while((true)())\n");
tryItOut("[1,,]");
tryItOut("switch(new (new Iterator(false,  /x/ ))(5.0000000000000000000000.throw( /x/ ))) { case 7: break; default: /*for..in*/for(const __noSuchMethod__ in ) {{} }break;  }");
tryItOut("do {export *; } while((({__proto__: undefined})) && 0);");
tryItOut("M:with({__noSuchMethod__: prop.__parent__ setter= [1,2,3,4].slice})return <x><y/></x>;");
tryItOut("with({__iterator__: (prototype.__count__).__noSuchMethod__})gc()");
tryItOut("try { let([x::__proto__, , __parent__, ] = new ( '' )(#3={a:#3#})) ((function(){let(__iterator__ = this, __proto__) { __count__;})()); } finally { ({ prototype: __noSuchMethod__, constructor: prototype }) } ");
tryItOut("return prototype\n");
tryItOut("do {return __noSuchMethod__; } while(( /x/g  | <y><z/></y>) && 0);");
tryItOut("/*for..in*/for(const __proto__ = (false !== constructor) in *::*) {return  /x/ ; }");
tryItOut("/*infloop*/while(({a2:z2}))throw <x><y/></x>;");
tryItOut("if(yield (function ([y]) { })()) { if (((new Function(\"return;\"))).call(arguments, 0/0)) {yield <y><z/></y>; } else {return <y><z/></y>; }}\n/*infloop*/(constructor.__proto__); ; Function(<y><z/></y>)) {__noSuchMethod__; }\n");
tryItOut("prop = constructor;");
tryItOut("with({}) return * ::  '' ;");
tryItOut("__noSuchMethod__");
tryItOut("/*for..in*/for(var __parent__ = prop.__noSuchMethod__ in ({ get __parent__(constructor, __proto__) { yield <y><z/></y> }  }).unwatch(\"__proto__\")) L:if(((<x><y/></x>.(*::*)) *= [11,12,13,14].map)) if(*::*) {} else  if (this.__defineSetter__(\"__noSuchMethod__\", gc)\t) ;");
tryItOut("{}");
tryItOut("do {( '' );export *; } while((\n-3/0.__defineGetter__(\"__proto__\", (1 for (x in [])))) && 0);");
tryItOut("{var prototype = constructor, __count__gc() }");
tryItOut("/*infloop*/do function (constructor)(-1) while(<x><y/></x>);");
tryItOut("/*infloop*/M:while(null){export *; }");
tryItOut("do {*; } while(((prototype.prototype)) && 0);");
tryItOut("let __proto__ = __proto__ getter: eval, __parent__ = (-0);");
tryItOut("if(window) { } else {let prototype = -3/0; }");
tryItOut("/*infloop*/do let prototype =  '' ; while(<><x><y/></x></> === {} & <><x><y/></x></>[[,]]);");
tryItOut("/*for..in*/for(let [__noSuchMethod__.prototype getter= gc, __proto__] = prop.__parent__ = <y><z/></y>.yoyo(let (case <x><y/></x>: break; case <x/>: break; case 9: break; case 3: break;  = @foo)  '' ) in (eval(\"((*))\", window))) continue ;");
tryItOut("/*infloop*/for(new (<><x><y/></x></>.__defineSetter__(\"__proto__\", function () { return __noSuchMethod__ } ))(null[*], <y><z/></y>); __parent__.(({/__parent__: <bbb xmlns:ccc=\"new (true)(*)\"><ccc:eee></ccc:eee></bbb>.((__count__))})); null) return <><x><y/></x></>;");
