
tryItOut("/*for..in*/for(const [__proto__, __count__] = <x><y/></x> in  /x/ ) {{} }\nbreak \tL;");
tryItOut("if(<x><y/></x>) { if (({a1:1})) this;} else {{} }");
tryItOut("/*infloop*/while(null.__proto__ = true){yield;throw true; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(var [([__parent__] = ([1,,].__lookupSetter__(\"__iterator__\")( /x/g .__noSuchMethod__++, yield  /* Comment */<><x><y/></x></>))), prototype] = this.zzz.zzz == this.zzz.zzz in <y><z/></y>.__defineGetter__(\"__count__\", (Function).apply).__defineGetter__(\"prototype\", function(y) { yield y; [1,,]; yield y; })) {; }");
tryItOut("return <x/>;export *;");
tryItOut(";");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((function(q) { return q; })(1e4))){(function(y) { yield y; break M;; yield y; }).apply }");
tryItOut("/*for..in*/for(const prop = ({ __parent__: prototype, __noSuchMethod__: function::__parent__ }) = (__proto__.__proto__) in ( ''  .@*:: constructor)) {throw prop; }");
tryItOut("/*infloop*/M:for(__iterator__ = __parent__; <><x><y/></x></>; (({prop = *, __proto__; })[false])) export __proto__;");
tryItOut("if((<y><z/></y> .@x:: default: eval.watch(\"__count__\", function () { yield constructor } ))) <x/>; const __parent__; else  if (<x/>) return window; else {}");
tryItOut("/*infloop*/for(@foo .@ <y><z/></y>; __noSuchMethod__|=window; (__noSuchMethod__.(({a2:z2})))(null)) {(window);break L; }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in ((({}).hasOwnProperty)(null)))var __proto__,  { yield -1 }  =  /x/ ;");
tryItOut("constructor = __parent__;");
tryItOut("let (__proto__) { export *; }");
tryItOut("/*infloop*/for(var __count__; eval(\"var constructor = @foo;\", <><x><y/></x></>.__proto__)(((<x><y/></x>.(<x><y/></x>)))[window <= <x><y/></x>]); 033) continue ;");
tryItOut("yield window !== null;");
tryItOut("if(new ((new Function(\"return <x><y/></x>;\")))(__noSuchMethod__ = prop)) export __noSuchMethod__; else export *;");
tryItOut("__iterator__ = __proto__;");
tryItOut("/*infloop*/for(let [({ constructor: __proto__, [,] }), ] = ((uneval(undefined))) :: null; constructor = 0/0.unwatch(\"__count__\"); __parent__[window.__defineSetter__(\"__noSuchMethod__\", constructor) , yield this]) L: const __noSuchMethod__;");
tryItOut("{M:while((window) && 0){gc() } } const __parent__;");
tryItOut("{L:with({__count__: <zzz>({a2:z2})</zzz>.(__parent__ = prop)})const __parent__ = <y><z/></y>, prototype = <y><z/></y>; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__.__parent__ in ((null)((/a/gi)(this)))){yield <y><z/></y>; }");
tryItOut("this.zzz.zzz;");
tryItOut("with({__parent__: ((yield (([1,2,3,4].slice).call(.2, (arguments.__defineSetter__(\"__parent__\", new Function)).__lookupSetter__(\"__noSuchMethod__\")))))})M:if(({a2:z2})) {} else {(new Function(\"export __proto__;\"))yield undefined; }");
tryItOut("");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(this.yoyo(window))) in this.__defineSetter__(\"__noSuchMethod__\", ({ __parent__: ({ prop: ({ prototype: __count__, prototype: __parent__\t }), __parent__: ({ constructor: __count__ }) }), __count__: __parent__ }))) {while((\fundefined) && 0)/*for..in*/for(const [prop, __parent__] = ( /* Comment */(<y><z/></y>)[[[1]]]) in (yield *::*)) {function::prototype, constructor;if([,]) {const constructor = prop, prototype = this; }\f else  if (<x><y/></x>) export __count__; } }");
tryItOut("/*infloop*/L:for(__iterator__ <<  /x/ ; __iterator__ = __parent__; <><x><y/></x></>) {var __parent__, __parent__ = <x/>; }");
tryItOut("/*for..in*/for(const constructor.prototype in [11,12,13,14].map) this.zzz.zzz;");
tryItOut("yield  /x/ ;");
tryItOut("do default: let __proto__, __noSuchMethod__ = <x/>case 1: case 3: break;  while(((p={}, (p.z =  '' )())) && 0);");
tryItOut("/*infloop*/M:for(__count__; this.zzz.zzz; (({__proto__: <><x><y/></x></>}))) let prototype;");
tryItOut("do {throw <><x><y/></x></>; } while((__iterator__: function::__iterator__) && 0)\n");
tryItOut("/*infloop*/M:for(({ prototype: __iterator__ }) = (<y><z/></y>.yoyo(-3/0)) /= ((typeof (<x><y/></x>.isPrototypeOf(this)))); -1; __proto__.prop = false) {gc()return; }");
tryItOut("L:with((__proto__ = this.__proto__))return;");
tryItOut("{const __parent__ = <><x><y/></x></>;{} }");
tryItOut("/*infloop*/do {yield; } while(prop);\nexport __proto__;\n");
tryItOut("/*for..in*/L:for(const __count__ = ([15,16,17,18].sort(({}).hasOwnProperty, <x><y/></x>)) in true) export *\nlet (__parent__ = <x><y/></x>, prototype) { \n(<x><y/></x>);\n }");
tryItOut("yield;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(<x><y/></x>;  /x/g ; [1]) {export *;{} }");
tryItOut("if(<x/> ? <><x><y/></x></> : [[1]]) { if ( /x/ ) \texport __noSuchMethod__; else {export *;__parent__; }}");
tryItOut("/*infloop*/for(var prototype = ( /* Comment */.__count__); \t(uneval(window ?  /x/  : <x><y/></x>)); __count__, __count__) {break M;return <y><z/></y>; }");
tryItOut("/*infloop*/do {gc()break ; } while([11,12,13,14].sort);");
tryItOut("export prototype;");
tryItOut("while((({a2:z2})) && 0){Math.pow\ngc()\n }");
tryItOut("try { this.zzz.zzz; } finally { for(let y in []); } ");
tryItOut("let(__proto__, __noSuchMethod__ = *.__lookupGetter__(\"__parent__\")) { throw (constructor);");
tryItOut("__iterator__{}");
tryItOut("const __parent__;");
tryItOut("/*for..in*/for(let __iterator__ in (((this.__defineGetter__(\"prototype\", function  __noSuchMethod__ (getter, prototype) { yield * } )).watch(\"__noSuchMethod__\", ({}).__lookupGetter__))(<x><y/></x>.isPrototypeOf(<x/>)))){let x::__noSuchMethod__, __count__;throw <y><z/></y>; }");
tryItOut("if(yield this.yoyo(<y><z/></y>)) { if (((undefined += this).__defineGetter__(\"prototype\", Math.sin)).isPrototypeOf((this.zzz.zzz))) throw <x><y/></x>;\t else if(window.__lookupSetter__(\"x::__count__\")) {return; } else  if ((<x/> .. 3)) {return; } else __proto__;}");
tryItOut("/*infloop*/for(let __count__; __count__ = .2; 1e4) var __count__ = *, __noSuchMethod__ = <y><z/></y>;");
tryItOut("/*infloop*/for(var __iterator__; prop.constructor =  '' .__lookupGetter__(\"__proto__\").__lookupSetter__(\"__proto__\"); *()) {yield  /x/g ;{continue ; } }");
tryItOut("switch(undefined) { case undefined: default: break; break;  }");
tryItOut("; const __parent__;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for(var [({ __parent__: __count__, __iterator__: [] }), [], ({ constructor: [prototype, , prototype, , ({ prop: ({ __iterator__: __noSuchMethod__ }), each: __proto__ })] })] = ([(!0x99)]\f.filter(({}).hasOwnProperty)); <{prop}> </{prop}>; (let (__count__) ((<x><y/></x>.__parent__))(<><bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb></>)-=this.__defineSetter__(\"__iterator__\", <><x><y/></x></>)).__noSuchMethod__) /*infloop*/while(((Function)(__iterator__, [11,12,13,14].sort))){let __parent__ = @foo, constructor;/*infloop*/for(prop; *::*; undefined) continue L; }");
tryItOut("L: {/*infloop*/do { /x/g prototype } while(prototype.(<x/>));L:if( /x/ ) { if (null) prop = <x/>, prop; else {yield; }} }");
tryItOut("let(constructor = 'fafafa'.replace(/a/g, [1,2,3,4].slice)) { for(let y in [5,6,7,8]) return [11,12,13,14].some;");
tryItOut("L:if( { return <><x><y/></x></> } ) { if ((prop = *::*)) let __proto__;} else {yield constructor; }");
tryItOut("return;yield;");
tryItOut("/*infloop*/for(let ({ constructor: __proto__ }) = #1=[<x><y/></x>]; ; (<x><y/></x>)(<x/>).@*) /*infloop*/do yield; while(-0);");
tryItOut("/*infloop*/do ;\nyield; else  if (<><x><y/></x></>{}\n while(( /x/ \n.valueOf(\"number\")));");
tryItOut("/*infloop*/L://h\nwhile(__noSuchMethod__)export *;");
tryItOut("gc()");
tryItOut("if(~<><x><y/></x></>--) { if ( \"\" [*]) ;prop =  \"\" } else {1e-81;var __count__; }");
tryItOut("\nvar __parent__ = this, prototype;\n");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; [<><x><y/></x></>] .. ((uneval(({a1:1})))); (this.valueOf(\"number\"))\n) export *");
tryItOut("/*infloop*/M:for((((<x><y/></x>).__defineSetter__).apply).call(0, <x><y/></x>).hasOwnProperty(\"__iterator__\"); (this.__defineSetter__(\"__noSuchMethod__\", <x/>)); Date(<x/>)) do (<x><y/></x>); while((__proto__) && 0);");
tryItOut("do continue L; while(((<x><y/></x>.__defineSetter__(\"prototype\", function(q) { return q; }))['__iterator__'] = eval(\"export *;\", {}) ? <> /x/ </>.__lookupSetter__(\"__count__\") : (--(new function () { yield  \"\"  } ()))) && 0);");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function(q) { return q; })((<><x><y/></x></>)[function(id) { return id }])))if(yield new \tfunction  constructor (__proto__) { return <><x><y/></x></> } (<y><z/></y>))  get function::__proto__([__noSuchMethod__, , constructor//h\n, __noSuchMethod__], __proto__) { yield void (__noSuchMethod__ = <x><y/></x>) }  else  if (([1.3])) {export prototype; } else {}");
tryItOut("if(__parent__ = <><x><y/></x></>) {; } else  if (@foo) var prop =  /x/g ;");
tryItOut("/*infloop*/while(<><x><y/></x></>){yield;let prop; }");
tryItOut("L:with({__parent__:  \"\"  >  '' .unwatch(\"__count__\") -= __iterator__ = this}){;; const __iterator__; }");
tryItOut("with(\fwindow){(__noSuchMethod__);(*); }");
tryItOut("L:if('fafafa'.replace(/a/g, __parent__)) { if ((0\n) <<= ()) {gc()const prop; } else return <x><y/></x>;}");
tryItOut("L:do return; while(( /x/g ) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in ({ get ({ __count__: prototype })(__noSuchMethod__) { return ~(let (constructor = true, prototype) prop.prototype = false) }  })) ");
tryItOut("{return this; }\n/*for..in*/for(var [prototype, __parent__] = (prop.prototype = (({__iterator__: *, prototype setter: Math.pow }))) for each (__iterator__ in false.__proto__ = <><x><y/></x></>) if (@foo()) in ((let (prototype, prototype) window).valueOf(\"number\"))) {returnyield window; }");
tryItOut("{}\ngc()\n");
tryItOut("if([,,z1]) { if (<y><z/></y> ? 3.propertyIsEnumerable(\"constructor\") : __noSuchMethod__) true; else {/*infloop*/L:do throw <x/>; while(\tthis); }}");
tryItOut("__count__");
tryItOut("return;");
tryItOut("M:while((yield this) && 0);");
tryItOut("/*infloop*/do {{}export __parent__; } while((({}).__lookupGetter__).call((function ([y]) { })(), <x><y/></x>, __noSuchMethod__));");
tryItOut("while((((uneval((function ([y]) { })())))) && 0)var __proto__;");
tryItOut("if(-@foo) {/*infloop*/L:while(prototype){continue ;this }export *;gc() } else  if ((Function(<><x><y/></x> != __parent__ <= (return)</>))) switch(prop.valueOf(\"number\")) { case 4: break; break L;break; var __proto__ =  '' ;default: /a/gibreak;  }");
tryItOut("M:while((null) && 0)return 1.2e3;");
tryItOut("/*for..in*/for(prototype in ((function  __parent__ (prop) { throw prototype; } )(*::* >= true)));");
tryItOut("return @foo;");
tryItOut("yield @foo;");
tryItOut("/*for..in*/for(const prop in  \"\" ) {<ccc:ddd> </ccc:ddd> }");
tryItOut("prop\n");
tryItOut("yield <x><y/></x>; const __count__;");
tryItOut("with({yield: *}){return; }");
tryItOut("if(__count__ for (__parent__ in <><x><y/></x></>).valueOf(\"number\")) new Function else  if (__proto__ = window) { } else {( /x/g ).watchthrow <y><z/></y>; }");
tryItOut("L: do /*for..in*/L:for((@foo)(__proto__ = 0.1) in (((__parent__ = <><x><y/></x></>).__defineSetter__)(window.@*))){yield  /x/g \nexport *;\nexport *; } while(([__parent__ + <><x><y/></x></>].sort(gc).propertyIsEnumerable(\"prototype\")) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__.prototype in (<x/>\n)) {break L; }");
tryItOut("/*for..in*/M:for(var __iterator__ in ((Math.sin)(this.__defineSetter__(\"__iterator__\", @foo(undefined, 3))))){Math.pow(*); }");
tryItOut("with((<x/> /= <x/>)){return; }");
tryItOut("switch( \"\" ) { case 6: break; case this.__defineGetter__(\"__proto__\", function(q) { return q; }): break;  }");
tryItOut("do continue M; while((*::*.isPrototypeOf(window)([15,16,17,18].sort(Math.sin, window))) && 0);");
tryItOut("return;");
tryItOut("L:if(<y><z/></y>.*.__lookupGetter__(\"__parent__\")) { if (<!--yy-->.(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) >> #2=[undefined]) if((uneval(this))) { if (undefined.__defineGetter__(\"__parent__\", (this).__defineSetter__)) function  __parent__ (prototype) {  }  else {{}; }}} else {if(<x><y/></x>)  else throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let prototype in new __noSuchMethod__((<x/>.__defineGetter__(\"__proto__\"\t, new Function)).prop)) {}\n");
tryItOut("return (window.isPrototypeOf(null).prop);");
tryItOut("{return; }");
tryItOut("yield <x/>;");
tryItOut("let (__noSuchMethod__, __noSuchMethod__) { export prop; }");
tryItOut("if(<x><y/></x>.(this)) continue L; else  if (({ get __noSuchMethod__(__count__, constructor) { yield <x/> } , __noSuchMethod__: ~ /x/  })) {__proto__ = <y><z/></y>, constructor = window; } else {const __parent__ = null, constructor = <y><z/></y>;export __proto__; }");
tryItOut("{/*infloop*/M:do {({});yield; } while(<x><y/></x>.prop = (-0)); }");
tryItOut("/*for..in*/for(__count__.__count__ in (((<x><y/></x>.(*::*)).apply)(<><x><y/></x>yyy</>.(true++)))){export prop;; }");
tryItOut("/*for..in*/for(var prototype in <x><y/></x>) const __parent__, prototype;");
tryItOut("/*infloop*/while(@foo << window){yield;break M; }");
tryItOut("{{return *::*;gc() } }");
tryItOut("/*infloop*/for(let prop; ({prototype getter: ({}).hasOwnProperty }); (this > <x><y/></x>.isPrototypeOf(__count__.( '' ) %= yield 4.))) <x><y/></x>;");
tryItOut("/*infloop*/M:for(window; <y><z/></y>; [z1,,]) {}");
tryItOut("with({}) { let(prop = false) { let prop = *::*; } \n");
tryItOut("/*for..in*/for(const __count__ =  in ( /* Comment */<x><y/></x>)) const __iterator__ =  /x/ , prototype;");
tryItOut("/*infloop*/L:do eval while(5.0000000000000000000000 = -0);");
tryItOut("while((this.zzz.zzz) && 0){Function }");
tryItOut("with({__noSuchMethod__: null})yield;");
tryItOut("yield \n<y><z/></y> ^= [11,12,13,14].filter;");
tryItOut("return true\n");
tryItOut("let __noSuchMethod__ = @foo;\f");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in arguments) return #3={a:#3#};\n/*infloop*/for(prototype =  /x/g ; <x><y/></x>.isPrototypeOf( \"\" ); this.__defineGetter__(\"__parent__\", function (__parent__, __proto__)window)) const constructor = window;\n");
tryItOut("L: if(<><x><y/></x></>) { if (<x><y/></x>)  else break ;}");
tryItOut("/*for..in*/L:for(var __iterator__ = new Exception() in Function(*, (<><x><y/></x></>)[<x><y/></x>] ^= ({prototype: @foo }))) __parent__ = __parent__;");
tryItOut("switch(({__noSuchMethod__: this})) { case ((yield #1=({__proto__: *::*}))): break; default: if(<><x><y/></x></>)  /x/g ; else  if (true) yield <x/>; else let prop = .2\nbreak;  }");
tryItOut("/*for..in*/L:for(__count__ in (([1,2,3,4].slice)(#0=({__count__:  /x/g ++, prop getter: setter }))))__count__, <x><y/></x>;\nyield;\n");
tryItOut("{return;yield; }");
tryItOut("{if(this.watch(\"__count__\", ({}).hasOwnProperty)) export *; else  if ((false)[ '' ]) {let prop, prototype = <><x><y/></x></>; } }");
tryItOut("if(true) {__noSuchMethod__ = 1e-81, prototype; } else  if (<x/>) {__proto__ }");
tryItOut("/*infloop*/for(*; each.prototype; (<x/>)[<x><y/></x>]) { /x/ ; /x/g ; }");
tryItOut("for(let y in [5,6,7,8]) export constructor; const constructor;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("/*infloop*/for(1e4; *; (function  __proto__ ()@foo).call) yield;");
tryItOut("__noSuchMethod__ = @foo");
tryItOut("/*for..in*/for(const [__count__, __proto__] = [(3.141592653589793 ? __noSuchMethod__ : <x><y/></x>)].filter(function () { yield; } ) in this) yield <><x><y/></*\n*//x></>; const __iterator__;");
tryItOut("switch(<><x><y/></x></>.propertyIsEnumerable(\"__proto__\")) { case 1: switch(*::* .@x:: <x><y/></x>) { case 3: case __noSuchMethod__ = null: export prototype;default:  }break; default: return <><x><y/></x></>; }");
tryItOut("do __proto__ = __iterator__; while((<x/>\n) && 0);");
tryItOut("/*for..in*/for(const __parent__ in 3.141592653589793) new Function");
tryItOut("break ;");
tryItOut("switch(let (__count__ =  /x/ , __iterator__) true) { case 0: break; {}break;  }");
tryItOut("continue M");
tryItOut("/*for..in*/L:for(let [__iterator__, __noSuchMethod__] = this in undefined in 3/0) {yield <x><y/></x>; }");
tryItOut("yield [new String(window) for each (yield <x><y/></x> in ((yield window)))];");
tryItOut("\nvar __proto__ = <><x><y/></x></>, __iterator__ = *\n const prototype;");
tryItOut("/*infloop*/L:while(<x><y/></x>)yield;");
tryItOut("if((__noSuchMethod__ = false)) { if (<y><z/></y> ?  /x/  : [[]].valueOf(\"number\")) {__parent__; } else {yield *; }}");
tryItOut("M:do throw __count__; while((new  /x/g (this)) && 0);");
tryItOut("with({__iterator__: eval(\"((uneval(<><x><y/></x></>))((!prop), <><x><y/></x></>))\", __noSuchMethod__ = *)}){u }");
tryItOut("for(let y in [5,6,7,8]) with({}) { throw __count__; } ");
tryItOut("/*for..in*/for(let __parent__ in ((function  function::__proto__ (__count__) { yield (<><x><y/></x></> !== @foo) } )(this ? (((__iterator__).watch).call(<x><y/></x>)) : new RegExp(<><x><y/></x></>, true).@*))){ \"\" export __parent__\n; }");
tryItOut("false;");
tryItOut("do {(true); } while((<><x><y/></x></>.yoyo(<y><z/></y>)) && 0); const prop;");
tryItOut("/*infloop*/M:for(prototype = (({a2:z2}))(this); (x::constructor for (constructor in __noSuchMethod__)).eval( /* Comment */false); __proto__.__count__ getter= window) yield;\ngc()\n");
tryItOut("{/*infloop*/for(var prototype; ; [11,12,13,14].some) new Function }");
tryItOut("yield;");
tryItOut("yield <><x><y/></x\f>\f</>;");
tryItOut("/*for..in*/for(let __iterator__ in ((\n#1=({__count__: <><x><y/></x></>}))(constructor = ({ prop: __noSuchMethod__ })))){/*for..in*/for((prototype) in ((\f'haha'.split)(<y><z/></y>)))[1,2,3,4].map{export *;function(q) { return q; } } }\n");
tryItOut("if((<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", 0.1))[(window.__defineGetter__(\"__count__\", (Math.pow).apply))].__proto__ = <bbb xmlns:ccc=\"(new (@foo)(window))\"><ccc:eee></ccc:eee></bbb>.(this.__defineSetter__(\"__iterator__\", function(y) { yield y; ; yield y; }))) { if (this()) {export constructor; } else this.zzz.zzz;}");
tryItOut("/*for..in*/for(let __count__ in ((((typeof __count__).__count__).__defineSetter__)((((uneval((yield ({a1:1})))) = (((uneval([z1]))).*.hasOwnProperty(\"__proto__\"))).yoyo(~ '' )))))gc()");
tryItOut("with({}) continue L;");
tryItOut("/*infloop*/for(undefined.__defineGetter__(\"constructor\", Function); [15,16,17,18].some(function(y) { yield y; function  let (prototype, function::prop)case null: break; ; yield y; }, <x/>); <bbb xmlns=\" '' \"><!--yy--></bbb>.__iterator__) {/*infloop*/for(++<x><y/></x>; [ if (__proto__)] &= prop+=<x/>; (function(q) { return q; }(3/0, prop)).constructor) ;{let constructor = this, prop;const __iterator__ =  \"\" ; } }");
tryItOut("/*for..in*/for(const __parent__ = __count__.prototype|=\n<x><y/></x> in #0=({__count__: (yield this)})) {;const yield = <y><z/></y>; }");
tryItOut("with({__count__: constructor = function ([y]) { }})do return; while((let (constructor) (constructor = this)) && 0);");
tryItOut("if( /* Comment */((<x><y/></x>.//h\n__defineGetter__(\"__noSuchMethod__\", function (prop, __proto__) { yield <><x><y/></x></> } )) !== ([prototype].some(window))).hasOwnProperty(\"__count__\")) {break L;/*infloop*/for(const __parent__; <x><y/></x>; <y><z/></y>) return {}; } else  if ((([[]])(false, <x/>))) export *;");
tryItOut("M:with({__proto__: ((('haha'.split)()) <= constructor.__parent__ getter= Function)}){export *;<x><y/></x>; }\t");
tryItOut("/*infloop*/for(<y><z/></y>; \n<x/>; typeof *) [1,2,3,4].slice");
tryItOut("do return; while((--(__parent__ <= -0)) && 0);");
tryItOut("/*for..in*/for([constructor, function::prop] = *::* in -3/0) continue ;");
tryItOut("/*infloop*/L:do break M; while(<><x><y/></x></>);");
tryItOut("(<x><y/></x>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in  /x/ ) {yield prototype; }");
tryItOut("L:if([,,z1]) ; else  if (<x/>.*) {return; }");
tryItOut("if(window ? @foo.eval(<><x><y/></x></>) : window % <><x><y/></x></>) { if ((delete  /x/ ) for ({export *; } in <x/>)) export function::__parent__;} else {var prop = <x/>; }");
tryItOut("if(<x/>.yoyo(*::*))   else  if (prototype =  /x/ ) {{}@foo } else M:with(((p={}, (p.z = undefined)())))return;");
tryItOut("if(*) {yield prototype; } else  if (<y><z/></y>.throw(<x><y/></x>)) {return;export *; } else yield;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("throw \n");
tryItOut("/*infloop*/for(__noSuchMethod__; (undefined & <>><y/><x></>.valueOf(\"number\")); <x><y/></x> > <><x><y/></x></>.__lookupSetter__(\"constructor\")) <x/>\nL:while((<x><y/></x>) && 0)export *;");
tryItOut("{with({__parent__: -0}){yield 1.3;(new Function(\"gc()\")) } }");
tryItOut("const __iterator__ = <><x>y<zzz>*::*</zzz> ></x</>;continue \n");
tryItOut("do M:if((({a2:z2})[.2])) {gc()yield; } else return; const function::__noSuchMethod__; while(( /* Comment */[z1,,] .@x::  '' ) && 0);");
tryItOut("with(let (__iterator__ = [1,,], __iterator__ = __proto__) (((window).watch)\n)(__parent__, 1e81) << <x><y/></x> /= -3/0.hasOwnProperty(\"__iterator__\") >>>=(__count__)[@foo]){export __parent__;\t__noSuchMethod__; }");
tryItOut("{let (({ prototype: __proto__.__parent__, __iterator__: __parent__.__parent__ }), __noSuchMethod__) { (0.1) } }");
tryItOut("if(eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in constructor) \", <x/>)) let __iterator__ = @foo; else  if ((prototype.(true).*)) 4. else {(*);const __parent__ = __count__; }");
tryItOut("");
tryItOut("if(3/0 >>>=<><x><y/></x></>) const __count__ = 1.3; else  if (@foo.__defineGetter__(\"__count__\", eval)) __proto__ = @foo else {return; }");
tryItOut("if(prop) prototype = <><x><y/></x></> else var __iterator__;");
tryItOut("yield ;");
tryItOut("if(<><x><y/></x></>.watch(\"__noSuchMethod__\", function (__iterator__, constructor\f) { return  ''  } )) {const __noSuchMethod__;({}); } else  if (((this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; gc(); yield y; })).unwatch(\"prototype\"))) {; } else {break L; }");
tryItOut("/*for..in*/for(var [__parent__, __parent__] = eval(\"<x/>;\",  \"\"  / <><x><y/></x></>) in function::prototype = *) M:switch(<y><z/></y>) { case 9: break;  }");
tryItOut("/*infloop*/while((new ([1,2,3,4].map)()))return this;");
tryItOut("/*for..in*/for(var prototype = ++*::*.hasOwnProperty(\"constructor\") in <x><y/></x>[<x/>]) {evalyield __count__; }");
tryItOut("yield <x><y/></x> = <x/>.throw((uneval(function(id) { return id }))) == new <x/>();");
tryItOut("try { \flet(__iterator__, constructor = __proto__) ((function(){export __iterator__;})()); } catch(prop) { let(|=, prop) { (this); } finally { let(prop = true) ((function(){yield undefined;})()); } ");
tryItOut("for(let y in []);");
