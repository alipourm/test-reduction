
tryItOut("/*infloop*/do {yield null; } while( '' .__defineSetter__(\"__iterator__\", prop));");
tryItOut("{/*infloop*/do <y><z/></y>; while([15,16,17,18].filter([1,2,3,4].map, <x><y/></x>[<y><z/></y>]).__noSuchMethod__ = (yield  '' ).watch(\"constructor\", function  __count__ () { return ([033]) } ).hasOwnProperty(\"prototype\")); }");
tryItOut("/*infloop*/do {function(q) { return q; } } while(5.0000000000000000000000);");
tryItOut("/*infloop*/M:for(<x><y/></x>.(<><x><y/></x></>); ; ([this for each (prototype in false)] &= __parent__%=null)) { }");
tryItOut("while(( /* Comment */#3={a:#3#}) && 0)*export *; const __iterator__;");
tryItOut("*::*");
tryItOut("/*infloop*/L:for(<x\t><y/>\f</x>\n; <x><y/></x>.(3.141592653589793).*; (({prop: prop = yield}))) continue ; const constructor;");
tryItOut("/*infloop*/while(new Math.pow([,,], 033))continue L;\nthrow #1=[#1#];\n");
tryItOut("return [1,,]\n");
tryItOut("with((<{constructor}><!--yy--></{constructor}>.(this.__defineGetter__(\"__noSuchMethod__\", (0).watch)))){(yield [1]).__defineSetter__/*for..in*/for(var [__proto__, prototype] = (3.141592653589793 .@ window) in <y><z/></y>\t) { } }");
tryItOut("/*for..in*/for(__iterator__ = [,,] in this.zzz.zzz) if(__parent__.( /x/g ).__defineGetter__(\"__iterator__\", [1,2,3,4].map)) const prop = <x><y/></x>; else  if (([][<x><\ty/></x>])) {; }");
tryItOut("with({constructor: <>({ set prop(__proto__, constructor) { break M; } , __count__: (\n#1#) })</>})/*for..in*/for(const * = !<y><z/></y> in __count__) yield __noSuchMethod__;");
tryItOut("return;");
tryItOut("/*infloop*/for(const __iterator__; (this.__defineGetter__(\"constructor\", [1,2,3,4].slice)); (throw -1)) {with({__parent__: false}){(({a2:z2}));const constructor; } }");
tryItOut("break ;\nlet __proto__;\n");
tryItOut("if(*) /*infloop*/for(<><x><y/></x></>; 4.; 0) break ; else {export prop;return; }");
tryItOut("constructor = constructor;");
tryItOut("if(({__count__ setter: eval,  get prototype __parent__ (__iterator__)(<x><y/></x>.propertyIsEnumerable(\"__iterator__\")) })) { if (new (({constructor: false}))()) with(<x><y/></x>.eval(__iterator__)){export constructor;yield; }} else {return; }(/*\n*/<x><y/></x>);\n;\n");
tryItOut("__proto__ = __count__");
tryItOut("this.zzz.zzz;");
tryItOut("prop, __noSuchMethod__;gc()\nreturn <><x><y/></x></>;");
tryItOut("/*infloop*/M:do {yield true; } while((0 && window));");
tryItOut("with(<><x><y/></x></>.valueOf(\"number\"))yield __parent__;");
tryItOut("throw false;\nvar __noSuchMethod__;\n");
tryItOut("/*infloop*/M:do if(window) {export constructor;return 0x99; } else {/*infloop*/L:for( \"\" ; </*\n*/><x><y/></x></>; this) export __count__; } while(<><xxx>{__proto__}</xxx></>.prototype);");
tryItOut("/*infloop*/L:while(prototype = ({ constructor: __iterator__, __proto__: __noSuchMethod__ }))/*for..in*/for([, , __noSuchMethod__, \r, ] in (((<y><z/></y> ? {} : <><x><y/></x></>).watch)((eval(\" /x/ \\f.propertyIsEnumerable(\\\"__noSuchMethod__\\\")\", this)))))false;");
tryItOut("if( '' ) {<y><z/></y>; }");
tryItOut("if(<x><y/></x>) { if ([ '' ].sort(return;)) {return;__count__ = 1e4, constructor; }} else return;");
tryItOut("prototype = __iterator__;");
tryItOut("throw <><x><y/></x></>\n/*for..in*/for(let [__iterator__, __noSuchMethod__] = ({{(window); } }) in window) export *;\n");
tryItOut("L:if((window.@*.hasOwnProperty(\"prop\"))) [__parent__, , , , prototype] = [z1] else gc()");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __count__: <ccc:ddd></ccc:ddd> }), constructor: ({ __proto__: (__proto__), constructor: ({ __noSuchMethod__: [, ({ function::__noSuchMethod__: __iterator__ }), ], __noSuchMethod__\t: \nreturn;\n }) }) }) = [11,12,13,14].sort; (prop.(yield)); eval(\"#0=this ? prototype : __noSuchMethod__\", void 1e81)) {/*infloop*/do {return } while((false));return; }");
tryItOut("for(let y in [5,6,7,8]) break M;");
tryItOut("with({constructor: (+@foo) % ({a1:1}).constructor}){yield; }");
tryItOut("if(((eval).call(<x><y/></x>, <x><y/></x>, function::__proto__))) return; else  if (((function (__iterator__, prop)<x><y/></x>).apply)(@foo, @foo)) yield 0; else {yield;export prop; }with((<y><z/></y>.__lookupSetter__(\"__parent__\"))){return; }");
tryItOut("/*for..in*/L:for(var [__iterator__, \tx::prop] = constructor =  \"\"  in <x/>) {; }");
tryItOut("return;");
tryItOut("/*for..in*/for(var constructor = (this.__defineGetter__(\"false\", ({}).hasOwnProperty)) in (uneval(__proto__+=([11,12,13,14].sort)))) {/*for..in*//* nogeckoex bug 349964 */ for  each( /x/  in (<x><y/></x>.(window))(__noSuchMethod__.(*), <x/>)) const constructor = <><x><y/></x></>, prop; }");
tryItOut("/*infloop*/for((p={}, (p.z = __count__)()); <ccc:ddd><ccc:ddd><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></ccc:ddd></ccc:ddd> + <x><y/></x>; window) {return; }\n");
tryItOut("if((this.__defineSetter__(\"constructor\", true))) let ;, constructor = <y><z/></y>; else  if (<x/> .@*:: prototype) {throw 1e4;return window; } else gc()");
tryItOut("throw <x/>;");
tryItOut("with({}) constructor = constructor;");
tryItOut("do {__parent__, __count__/*\n*/; } while(([1,,]) && 0);");
tryItOut("/*for..in*/L:for(let  /x/  in (((<y><z/></y>.throw(null)).constructor)( /* Comment */*::*)))/*for..in*/for([prototype, __noSuchMethod__] = window in <><x><y/></x></>) return;");
tryItOut("if((__parent__ ? [prototype] : ([*]))[ \"\" ]) { if (({ __proto__: __count__, __noSuchMethod__ = (__noSuchMethod__ = <><x><y/></x></>): __parent__ }) = __iterator__) /*infloop*/for(__count__ = (({constructor: 5.0000000000000000000000})); null; (#2=*)) export *; else /*infloop*/for(__noSuchMethod__; <y><z/></y> instanceof true; __iterator__.watch(\"__parent__\", function \f __proto__ () { yield [z1] } )) {export prop;delete; }}");
tryItOut("let (constructor = __iterator__ = {}) { (@foo); }");
tryItOut("with({__proto__:  \"\" })let __count__ = <><x><y/></x></>;");
tryItOut("switch((uneval((this.__defineSetter__(\"prop\", function () { return constructor; } ))))) { case 0: break; case 8: export *;default: break; const prop = window([,,]);/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__(let (prototype) <><x><y/></x></>) in <x/>) yield *::*; }");
tryItOut("__parent__ = <><x><y/></x></>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <bbb xmlns=\"(uneval( /x/ )).__defineGetter__(\"__count__\", Math.sin)\">yyy</bbb>) {(false);\nlet __iterator__ = <x/>, __noSuchMethod__;\n }");
tryItOut("/*infloop*/for((yield window >> <x/>); (@foo -= <x/>); <>__count__ = <x><y/></x></>) {break ; /x/g ; }");
tryItOut(" get __proto__() {  /x/  } catch(__count__) { for(let y in []); } finally { ((__proto__ = prototype |= __iterator__ = .2)); } ");
tryItOut("with(<x><y/></x>)let prototype;");
tryItOut("M:do {}\n while((Number(export constructor, this)\n.__parent__) && 0);");
tryItOut("{L: {} }");
tryItOut("with(3.141592653589793){export prop;yield 0; }");
tryItOut("export *\nif(<><x><y/></x></>) { if (this) {}} else {{} }\nyield 0;\n");
tryItOut("/*infloop*/for(([, ({ __parent__: __proto__, __parent__: prototype }), , , ]\f = ({__iterator__: (3/0 == null) })); \n033; (<><x><y/></x></>.unwatch(\"constructor\"))) {(0/0); }");
tryItOut("var __count__ = <x><y/></x>, __count__");
tryItOut("/*infloop*/for(const constructor; __count__ = <x><y/></x>.@foo; prototype.watch(\"__noSuchMethod__\", setter.__iterator__ = prototype)) {\f } const __proto__;");
tryItOut("do \n{} while((__count__(false.@foo) = <><x><y/></x></> :: 1e-81) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<><x><y/></x></>['__count__'] in __parent__.(({prop setter: function(y) { yield y; yield -3/0;; yield y; },  get __count__(prop, __proto__) /x/g  }))) if(*) {;((({}).hasOwnProperty).apply).call } else  if (function::prop) return this; else {{}yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const prop; __count__\f = (gc).call( '' , ); ([z1,,] == -1)) yield;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <x/>.eval(((uneval(<y><z/></y>))))() in (Boolean(prop >>> <><x><y/></x></>, <x><y/></x>.eval(prototype)))) break L; const __parent__;");
tryItOut("do (@foo); while((({ __proto__: __count__, __count__: __parent__ }) = __count__) && 0);");
tryItOut("L:if(\tundefined.yoyo(undefined).@*) return <x><y/></x>; else  if (export prototype) gc() else {/*infloop*/L:do {prototype: (function(q) { return q; } == [1])export *; } while(prop%=<y><z/></y>); }");
tryItOut("/*for..in*/for(let [__proto__, prototype] = false in  /x/g ) {yield;(__count__); }");
tryItOut("/*infloop*/for(const constructor; let.yoyo(3); ((<x><y/></x>.__proto__ for each (prototype in <x/>) if ( /x/ )))(({ __iterator__: prototype, __proto__: __parent__ }) = * <<  /x/ ,  /* Comment */ '' )) (function::__count__);");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/L:for(var constructor; 0; __iterator__ = <><x><y/></x></>) M:switch(null) { case 9: break;  }");
tryItOut("(<x/>); const prop;");
tryItOut("[1,2,3,4].map const __proto__;");
tryItOut("M:with((({a1:1}).throw(@foo).__defineGetter__(\"__proto__\", function  __parent__ (__noSuchMethod__, prototype)1e81)))var __count__, prop = __iterator__;");
tryItOut("L: {L:if(this.__defineGetter__(\"constructor\", function  __noSuchMethod__ (\tconstructor, getter) { yield *::* } )) {export constructor\f;window; } }");
tryItOut("M:switch(__proto__.prototype) { case <y><z/></y>.unwatch(\"__proto__\"):  }");
tryItOut("{undefined\n__noSuchMethod__throw <x><y/></x>; }");
tryItOut("L:switch(eval(\"return 1.2e3\", [[1]] @ <y><z/></y>)) { case 'fafafa'.replace(/a/g, __iterator__): break; continue ;break;  }");
tryItOut("/*infloop*/M:do {L:if(__iterator__) { if ( '' ) yield;} else {function(y) { yield y; ; yield y; }{} } } while(case (yield 1.3) | this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"/*for..in*/for([__noSuchMethod__, prototype] =  /x/g  in true) export __noSuchMethod__;\"))): break; default: case (<y><z/></y> && <><x><y/></x></>\r)[__proto__.(false).watch(\"__count__\", function(q) { return q; })]: let(prototype = new [1,,]({})) { try { ; } finally { yield; } break; );");
tryItOut("M:switch(<y><z/></y>) { default: break;  }");
tryItOut("/*infloop*/for(let __noSuchMethod__; prop = 0/0; (( /x/g ).call( /x/ , {}, -1))) {return <><x><y/></x></>;; }");
tryItOut("{throw  '' ;throw ({}); }");
tryItOut("if(new Function(yield, <x/>)) { if (this.__defineSetter__(\"prop\", function(y) { yield y; do /*\n*/__noSuchMethod__; while((({prop: <x><y/></x>, __parent__: <><x><y/></x></> })) && 0);; yield y; })) {break L; } else {continue ;(-1); }}");
tryItOut("/*for..in*/for(var __noSuchMethod__ in <y><z/></y>) {; }");
tryItOut("for(let y in [5,6,7,8]) prop = prototype;");
tryItOut("do {continue ; } while((<x><y/></x>.(*)) && 0);");
tryItOut("L:if(this |= prototype) {return; } else {let __iterator__, constructor; }");
tryItOut("do {return <><x><y/></x></>;while((<y><z/></y>) && 0){throw  \"\" ; }(this)\r\nwhile((window ? {} : constructor) && 0){<x><y/></x> = (function ([y]) { })();__proto__, __iterator__ = arguments; } } while((<y><z/></y>\n) && 0);");
tryItOut("throw  \"\" ;");
tryItOut("let(constructor = @foo) { return <><x><y/></x></>;");
tryItOut("with(__parent__ = (~@foo) *= (constructor = __count__)){if(undefined) yield function  prop (prop)undefined; else  if (<x><y/></x>) {}M:if(<y><z/></y>) {throw <x><y/></x>; } }");
tryItOut("(1 for (x in []))");
tryItOut("/*infloop*/for([<x><y/></x>] for ((-1).function::__count__ in G) for each (prop in undefined); __noSuchMethod__ = 1e+81\n; (__parent__)) yield;");
tryItOut("L: /*infloop*/for(prop = window; [[1]]; __noSuchMethod__) yield prop;");
tryItOut("/*infloop*/while(\n(function(id) { return id }.__lookupSetter__(\"constructor\"))){;gc() }");
tryItOut("break \nM:if(((<y><z/></y> * <x><y/></x>))()) {continue L;export __count__; }");
tryItOut("do {/*infloop*/for(*; [];  /x/g ) return;function(q) { return q; } } while(([1] == <x><y/></x> >>> [__noSuchMethod__]) && 0);");
tryItOut("{__parent__, prop = <><x><y/></x></>\nthrow [z1,,]; }");
tryItOut("throw *;");
tryItOut("/*infloop*/for(let [({ __count__: __count__.__proto__ })] = function  constructor (__iterator__) { return; } ; <x><y/></x>.propertyIsEnumerable(\"prototype\"); (<><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\"))) yield <><x><y/></x></>;const prototype;");
tryItOut("M:with((arguments.__defineGetter__(\"prop\", function  constructor (__noSuchMethod__, __iterator__) { yield [z1] } )))export *;\nlet prop;\n");
tryItOut("M:if(constructor = [[]]) { if ((__parent__.prop.__defineSetter__(\"__iterator__\", gc))) if([] = (this.__defineGetter__(\"prop\", (new Function(\"yield *::*;\"))))) { if (this.zzz.zzz) throw null;} else {yield;continue M; }} else {; }");
tryItOut("if(<><x><y/></x></>) { if (1.2e3) {(1.2e3);export *; } else  { yield <x><y/>\f</x> } }");
tryItOut("switch\f(({constructor: <y><z/></y>\f, __iterator__ setter: eval })) { case 0: var constructor;break; default: case __parent__: return <x><y/></x>;break;  }");
tryItOut("if(<y><z/></y>) {return window; } else  if (prop) {yield; } else let \tprototype;");
tryItOut("with(__iterator__)");
tryItOut("L:if([3 if (true)]) {<x/>;export *; } else let | = #1=[#1#];");
tryItOut("if(<><x><y/></x></> - __noSuchMethod__) { if (0.1) {yield; } else {__parent__ = <x/>, __proto__ = <x><y/><\t/x> }}");
tryItOut("break ;");
tryItOut("/*infloop*/while((Array(window) ? \f[<><x><y/></x></> for (setter in 5.0000000000000000000000)] : eval(\"undefined\", this)))return <><x><y/></x></>;");
tryItOut("/*for..in*/for(const prop.__noSuchMethod__ in ((*)((let (__iterator__) <x><y/></x>)))){throw <y><z/></y>;gc() }");
tryItOut("/*infloop*/for(const prop; 'fafafa'.replace(/a/g, Math.pow); #0=[new Date()]) {if((\n__noSuchMethod__)) __proto__ = [z1]; else {continue M;yield window; }yieldif(1e81) {prop } else  if (<><x><y/></x></>.isPrototypeOf(<x/>)) gc() }");
tryItOut("with( /* Comment */1.2e3 !== prototype.__parent__ = window)if(<><x><y/></x></>) return window; else  if (__proto__) {return -1;gc() }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in 'fafafa'.replace(/a/g, <><x><y/></x></>) >>= (__noSuchMethod__.prop = this.__defineSetter__(\"__count__\", Math.pow))) {let (__count__ = null) { const constructor = [1,,], __iterator__ = *; }with({}) { return; }  }{yield; } }");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/L:for(let prop in ((new Function)((<x><y/></x> !== *::*) >>>=1.3 ? <><x><y/></x></> : __parent__ .@*:: [[1]].__defineSetter__(\"__proto__\", <x><y/></x>))))return true;");
tryItOut("do {({});break ; } while((false) && 0);");
tryItOut("with(eval(\"yield  /x/ ;\", this) .@*:: ({__noSuchMethod__: <x><y/></x> for (__proto__ in window)})){prop;yield; }yield new function(q) { return q; }();\f");
tryItOut("{try { return *::*; } finally { continue M; }  }");
tryItOut("with({}) let(__noSuchMethod__ = typeof  /x/g ) { throw *::*;");
tryItOut("if(<x><y/></x>.(prototype)) throw this; else  if (eval(\"if(<x/>) {} else  if (this) {return #3={a:#3#}; }\", ('fafafa'.replace(/a/g, <><x><y/></x></>)))) {gc()__iterator__; } else yield;");
tryItOut("/*infloop*/M:for(let ({ prop: prototype, set: __parent__ }) = (true)(window); this <= <x><y/></x>; (uneval(__proto__))) {window;export *; }");
tryItOut("{if( \"\"  ? null : window) { if ((*::*)[<>[, __noSuchMethod__, , , ]</>]) throw *; else gc()} }");
tryItOut("{var constructor;with(true)gc }");
tryItOut("/*infloop*/do {let __count__ = argumentsreturn; } while(this.zzz.zzz\n);");
tryItOut("eval(\"<><x><y/></x></>()\", <x><y/></x>.(<x><y/></x>))while((({prototype: <x/>,  get __iterator__ __noSuchMethod__ (__parent__, __count__) { yield 3.141592653589793 }  })) && 0){let [, [], , ({ __noSuchMethod__: __noSuchMethod__ })]//h\n = (new prototype( \"\" )), ({ function::__noSuchMethod__: constructor }) = new (*::*)( '' , -1); }");
tryItOut("/*for..in*/L:for([prototype, constructor] = @foo in <><x><y/></x></>) {return <x><y/></x>; }");
tryItOut("{/*infloop*/for(var __iterator__ = *; __count__; /*\n*/<><x><y/></x></>) {(this); }{} }");
tryItOut("if(@foo) 4. else  if (([11,12,13,14].map)) {return; } else {return;; }\n[, __proto__] = ( ''  for each (__iterator__ in __noSuchMethod__)), __noSuchMethod__ = undefined;\n");
tryItOut("/*for..in*/for(let __noSuchMethod__ = /*infloop*/while( \"\" ).__count__ in ([let (__proto__ = <x/>) prop for (__proto__ in <x><y/></x>) for each (constructor in arguments)])) {/*for..in*/for(let [__proto__, __proto__] = (-0) <= __noSuchMethod__ in 'fafafa'.replace(/a/g, function (prop) { yield * } )) {if(window.valueOf(\"number\")) export __noSuchMethod__; else  if (__proto__.isPrototypeOf([,,])) break L; } }");
tryItOut("while((constructor.__iterator__ = <x/> - *) && 0)return 3.141592653589793;");
tryItOut("/*infloop*/for(true; window;  '' ) {[1,2,3,4].slice } const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x/>) ;");
tryItOut("var __parent__ = <><x><y/></x></>");
tryItOut("M:with(<x><y/></x>.propertyIsEnumerable(\"__parent__\"))let __parent__;");
tryItOut("if(*) return;");
tryItOut("L:with({prop: this.__defineSetter__(\"__iterator__\", (new Function(\"let __count__ =  \\\"\\\" ;\")))}){/*infloop*/M:while(window){continue M; } }");
tryItOut("if('fafafa'.replace(/a/g, (Math.pow).apply)) { if (-3/0) {var function::__iterator__;L: {return prototype; } } else {with(window.throw(5.0000000000000000000000))yield; }}");
tryItOut("with({__iterator__: <x><y/></x>.*}){var <><x><y/></x></> = <x><y/></x>; }");
tryItOut("return;");
tryItOut("/*for..in*/for(let __parent__(__iterator__.(this.zzz.zzz)) in ((Math.sin)(yield eval(\"gc()\", <><x><y/></x></>)))){gc(); }");
tryItOut("var __noSuchMethod__ = <><x><y/></x></>\n");
tryItOut("/*for..in*/for(var function::function::constructor in (([1])(({}) @ <x><y/></x>))){true }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in  /x/g ) {\tprototype =  '' , __parent__;yield; }");
tryItOut("/*for..in*/for(__parent__ in ((<y><z/></y>)(__parent__ = window)))M:if( \"\" ) { if (undefined) {const __count__ = <y><z/></y>; }}\f else {return;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(set in *::* || (__count__.(__parent__))) yield <x><y/></x>;");
tryItOut("/*for..in*/M:for(prop in ((/a/gi)((new (3/0)((<><x><y/></x></>)[ /x/g ]))))){}\n");
tryItOut("{({}).__lookupGetter__/*for..in*/for(var __parent__ in ((new Function)(*)))yield; }");
tryItOut("L:if([1e81 for (__iterator__ in 3.141592653589793)]) yield null; else  if (((<x><y/></x>))) {return null; }");
tryItOut("/*infloop*/for(__iterator__; (yield <><x><y/></x></>); [15,16,17,18].filter(({}).__lookupGetter__,  \"\" .propertyIsEnumerable(\"__count__\"))) {if(((0/0)(<x><y/></x>))) { if ( /x/ ) {break M; } else { }} }");
tryItOut("break M");
tryItOut("/*infloop*/while(<><x><y/></x></>--)export *;");
tryItOut("throw StopIteration\n");
tryItOut("if(\f0) {throw __proto__; }");
tryItOut("if(( '' .__parent__ = *)) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const ((<x/>).__defineSetter__)['prop'] in prop) gc()");
tryItOut("M:with(yield <x><y/></x>)yield;");
tryItOut("{null; } const prototype;");
tryItOut("M:switch([,,] +  /x/ ) { default: case constructor: let constructor;break;  }");
tryItOut("export *;");
tryItOut("L:do {break ; } while((0.1) && 0);");
tryItOut("L:if('fafafa'.replace(/a/g, (1 for (x in [])))\f) throw <y><z/></y>;");
tryItOut("if(new (({}).hasOwnProperty)().__defineSetter__(\"__iterator__\", Math.pow).watch(\"__noSuchMethod__\", 'haha'.split)) {\fexport *;__count__, <x/> = 3.141592653589793; } else  if (0.1.__defineSetter__(\"delete\", *)) {let prototype, prop = __parent__;(<x><y/></x>); }");
tryItOut("let (__proto__) { new Function }");
tryItOut("switch(<x><y/></x>) { default: case <x><y/></x>: case window: evalbreak; yield <x><y/></x>;break; __noSuchMethod__;break;  }");
tryItOut("L: {function(y) { yield y; export *;; yield y; }var __count__, __parent__; }");
tryItOut("switch(true ? <x><y/><\n/x> :  /x/g ) { default: gc()break; case 6: __count__ = null ? 0/0 : [,,z1];break; case +__iterator__ = \f1.3: /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <><x><y/></x></>) return; }");
tryItOut("with(__iterator__.__lookupSetter__(\"prototype\").__lookupSetter__(\"__noSuchMethod__\"))(1e81)");
tryItOut("L: gc()");
tryItOut("try { return; } catch(__count__) { break ; } finally { export *; } ");
tryItOut("L: {export prototype;do ; while((@foo) && 0); }");
tryItOut("__proto__ = __proto__;");
tryItOut("/*for..in*/for(const prop in *::*) {let __parent__ = #1=[#1#], __parent__;break ; }");
tryItOut("/*infloop*/while([<><x><y/></x></>].map(([1,2,3,4].map).apply)){export *; }");
tryItOut("{/*for..in*/L:for(const constructor = __iterator__ = 5.0000000000000000000000.__noSuchMethod__ in false) gc()\n/*infloop*/do {let let = <y><z/></y>, __noSuchMethod__ = <y><z/></y>; } while(this.__defineGetter__(\"-0\", (new Function(\"{}\")))\n); }");
tryItOut("M:switch(\".__defineGetter__(\"__iterator__\", (-0))) { default: /*for..in*/for(let __proto__ = this.yoyo(window) in new new ([1,2,3,4].slice)()) {/*infloop*/for(let __iterator__ = (<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")) ? (__noSuchMethod__.constructor setter= Function) : __parent__; let (__parent__) <x><y/></x> ? ((<y><z/></y>)(*)) : new (__noSuchMethod__)(<y><z/></y>, <y><z/></y>); (p={}, (p.z = <><x><y/></x></>)()) &= <>prop</>) return <x><y/></x>; }break;  }");
tryItOut("/*infloop*/for(const [, ({a1:1}).__parent__, , ] = 3/0.constructor; [1]; true) {gc()var __proto__, __count__;\nyield;\n }");
tryItOut("/*infloop*/M:do continue M; while(__noSuchMethod__);");
tryItOut("/*infloop*/for(var __proto__ = this; prop; <y><z/></y>) {export __noSuchMethod__;continue M; }");
tryItOut("@foo");
tryItOut("gc\nyield;");
tryItOut("throw StopIteration");
tryItOut("L: let __iterator__ = <x><y/></x>, prototype;");
tryItOut("for(let y in []);");
tryItOut("if(__proto__.(__proto__|=)) /*infloop*/do {yield window; } while(let (__proto__) (prototype.__defineGetter__(\"prop\", [1,2,3,4].slice))); else  if ( /x/  === @foo) {( /x/g );\nreturn;\f\n }");
tryItOut("switch(<><bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb></> >> false) { case <>window</>.(1.3) & <x><y/></x> ^ (function ([y]) { })() == <x><y/></x> <= <x><y/></x>: break; case  \"\" .__lookupSetter__(\"prototype\"): break;  }");
tryItOut("{yield [z1,,];export prop; }");
tryItOut("let((constructor) = this.__defineSetter__(\"prototype\", Math.sin)) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(const  { return -3/0 }  = ({}); window; <><x><y/></x></>) {function(y) { yield y; export prop;; yield y; } }");
tryItOut("/*infloop*/do case 5: {}__count__ = this, __noSuchMethod__\ndefault: case 2: export __noSuchMethod__;break; break; case __parent__\r = *::*: return undefined; while(0/0);");
tryItOut("return @foo;");
tryItOut("throw  '' ;");
tryItOut("yield new <x><y/></x>();");
tryItOut("/*for..in*/for(var __iterator__ = (yield false .. <y><z/></y> <<= (* << ({a2:z2}))) in __proto__.__count__ setter= gc) {return; }");
tryItOut("if(<><x><y/></x></> & *) { if (this.__lookupSetter__(\"__iterator__\")) prop, __proto__ = @; else {break L;yield __noSuchMethod__; }}");
tryItOut("let (\tprototype) { with({__iterator__: #1=[#1#]})/*infloop*/for(([15,16,17,18].some(function (__iterator__)prototype, __iterator__)); new this; __proto__.unwatch(\"__count__\")) let __proto__, constructor = <y><z/></y>; }");
tryItOut("yield;");
tryItOut("prop = __noSuchMethod__;");
tryItOut("const __iterator__ = __noSuchMethod__, __noSuchMethod__ = window;switch( /x/g ) { default: break; break;  }");
tryItOut("/*infloop*/for(__count__; this; [<x><y/></x> for each (__count__ in <x/>)]) /*infloop*/for(window; this; -0) { /x/  }");
tryItOut("/*infloop*/do {yield;<x/>;return  /x/g ; } while('fafafa'.replace(/a/g, Function) = (true)[<x><y/></x>]);while((null) && 0){let __iterator__ =  /x/g ; } const prototype;");
