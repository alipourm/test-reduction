tryItOut("let(({ prop: ({ __noSuchMethod__: ({ constructor: try { ((function ([y]) { })()); } finally { let __iterator__ = <x><y/></x>; }  }) }), constructor: __noSuchMethod__ })) ((function(){return  /x/ ;})());");
tryItOut("__iterator__;\n\n");
tryItOut("with(window){const constructor, __iterator__; } const prop;");
tryItOut("if((<><x><y/></x></>.__lookupGetter__(\"__iterator__\"))) throw <><x><y/></x></>; else  if (this.__defineGetter__(\"constructor\", Math.pow)) throw <x/>;");
tryItOut("L: return;");
tryItOut("/*infloop*/for(prop = get; (p={}, (p.z = <y><z/></y>.isPrototypeOf(null) ? <x/> : ('fafafa'.replace(/a/g, @foo)))()); <x><y/></x>.(this)) ;\nthrow <y><z/></y>;\n");
tryItOut("gc()\nexport *;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <x/>) {yield this; }");
tryItOut("/*infloop*/for(let __iterator__ = eval(\"if(({__iterator__ setter: prop,  get prop(__noSuchMethod__, *::*)null }) > prototype setter: gc) { if (false.@foo.({ __parent__: __count__ })) {var constructor, __noSuchMethod__; } else __proto__ = <x/>, __noSuchMethod__;}\", *); <><x><y/></x></>(<><x><y/></x></>, window)[(__parent__ = <y><z/></y>)]; \tnew Function(new (gc)(<x><y/></x>, 4.).__lookupGetter__(\"__proto__\"))) {; }");
tryItOut("/*for..in*/for(const [getter, prototype] = __proto__ = new (__noSuchMethod__).watch(__parent__ | {{}; }, <><x><y/></x></>) in (yield ((uneval(*))))) {yield; }");
tryItOut("L: {/*infloop*/do ( '' ); while([11,12,13,14].some);/*infloop*/for(const __proto__; (({__count__: __noSuchMethod__, __noSuchMethod__: @foo })); (RangeError())) {return <y><z/></y>;export __noSuchMethod__; } }");
tryItOut("if(@foo) {return []; } else ");
tryItOut("/*infloop*/do /*for..in*/M:for(let constructor = arguments in <x><y/\t></x>) {return this;yield; } while(((null , (-1) ? (window.__parent__) : undefined.__lookupSetter__(\"__noSuchMethod__\")))[[z1].valueOf(\"number\")]);");
tryItOut("with({}) { let(__noSuchMethod__, __parent__ = (__parent__ = (new *(<x/>, *)))) ((function(){gc()})()); } ");
tryItOut("M:if(this.__defineSetter__(\"__noSuchMethod__\", 'haha'.split)) <bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb>\n/*infloop*/while((this.__defineGetter__(\"prototype\", this)))if([]) { if (0x99) let __count__; else return window;}\n");
tryItOut("/*for..in*/for(__iterator__ in <x><y/></x>) gc()");
tryItOut("switch(prototype(<x><y/></x> / __iterator__) = (yield ((<><x><y/></x></>.__count__ = *).__defineSetter__(\"function::__noSuchMethod__\", [1,2,3,4].slice)))) { case (__count__ *= window.__lookupSetter__(\"prototype\")): let prop, constructor = true;gc()break; case 7: break; default: {/*infloop*/L:for(const constructor; true; [1,,]) export __iterator__; }/*for..in*/for(let null in (([1,2,3,4].slice)(<zzz><><x><y/></x></></zzz>))){return;yield undefined; }case constructor.constructor: export *;break;  }");
tryItOut("/*for..in*/for(var __parent__ in (-3/0.__lookupSetter__(\"[]\")) > prototype = prototype) 'haha'.split\n{}");
tryItOut("\t{do {let prototype;let constructor; } while((<><x><y/></x></>) && 0)\n/*infloop*/do {<x/>;(eval).call } while(yield @foo;);yield; }");
tryItOut("let (prototype, function::__count__) { throw __count__; }");
tryItOut("with(-<y><z/></y>)export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__proto__) in <x><y/></x>.(this)) {continue ; }");
tryItOut("/*infloop*/M:for(const __proto__; this.__lookupSetter__(\"__parent__\"); default: let (__count__) { (<x><y/></x>); }) yield -1;");
tryItOut("/*infloop*/for(({ constructor: [] }) = new Object(constructor+=-1, <><x><y/></x></>); __parent__;  \"\" ) /*for..in*/for(let [constructor, __iterator__] = * in  \"\" ) {{} }");
tryItOut("if(function  constructor (<employee id=\"1\"><name>Joe</name><age>20</age></employee>, __parent__)(\n<x><y/></x>.__defineGetter__(\"prototype\", [,,z1]))) {return; } else  if ((new (new Function(\"(<x><y/></x> > __parent__), \"))())) __iterator__ else {if(<x><y/></x>) { if (__iterator__) const prop; else {yield;{} }}{} }");
tryItOut("while((prop) && 0)( /x/g );");
tryItOut("if(Math.pow( \"\" , <><x><y/></x></>)) {{}const __proto__; } else gc()\n;\n");
tryItOut("L: throw window\t;");
tryItOut("{\t{yield prototype\t; } }");
tryItOut("M:switch((({constructor: window, __parent__ getter: Math.sin }))) { case 4: switch(new [1,,]) { default: __noSuchMethod__ = window, prototype = <x/>;break;  } }");
tryItOut("{throw <y><z/></y>;*::* }");
tryItOut("/*infloop*/for(this; __proto__;  /x/ ) {<x><y/></x>;yield; }");
tryItOut("with(function  ( \"\" ); (prop) { yield; } (window, 1.3))throw <x><y/></x>; const prototype;");
tryItOut("var __parent__, __count__;\nyield false;\n");
tryItOut("break L;");
tryItOut("{gc()\nexport *;\n\nconstructor = #3={a:#3#};if(null) {export *;return  /x/ ; } else  if ( /x/g ) continue ; }");
tryItOut("yyy");
tryItOut("with({}) for(let y in [5,6,7,8]) window;");
tryItOut("L: {if(+constructor) return; else  if (this.__lookupGetter__(\"__iterator__\")) const __proto__, __iterator__;yield; }");
tryItOut("/*infloop*/do {return <x/>; } while(<x/>.hasOwnProperty(\"prop\"));");
tryItOut("if(\n(({ prototype: __proto__ }) = <x><y/></x> .@ .2 = [((__proto__.__noSuchMethod__ = <><x><y/></x></>))(this) for (constructor.__iterator__ in  /x/g ) for ((set) in undefined)])) const __iterator__ = -1, prototype = <x><y/></x>; const prototype;return  '' ; else {{} }");
tryItOut("/*for..in*/for(__count__ in (((([(__iterator__ = #3={a:#3#}) instanceof ((__count__.prototype getter= [1,2,3,4].slice) ? (@foo.__count__ = this) :  /x/  ^= prop)].some(new Function))).__defineSetter__)(({ __parent__: ({ __iterator__: __noSuchMethod__ }), __iterator__: __proto__ }) = (*::* >> null))))return;");
tryItOut(" \"\" ;");
tryItOut("with({__count__: ({ constructor: ({ __count__: __count__ }), constructor: ({ __noSuchMethod__: ({ prototype: __count__ }) }) }) = ({__count__ getter: function(q) { return q; },  set __iterator__(__count__) { yield (p={}, (p.z = (function ([y]) { })())()) }  })})/*for..in*/for(const __parent__ = Function() in window) yield __parent__;");
tryItOut("with({prototype: (__proto__ = <x><y/></x>)})gc()");
tryItOut("with({function::__proto__: __parent__ = <x/>}){return; }");
tryItOut("do prototype; while((( .@ function  constructor () { yield 3 } (<><x><y/></x></>) &= true)) && 0); const prop;");
tryItOut("with({prototype: <x/>}){(@foo); }");
tryItOut("if(({})) { } else var __parent__ = window;");
tryItOut("(function::__noSuchMethod__.propertyIsEnumerable(\"__parent__\")); const __parent__;");
tryItOut("const __noSuchMethod__, __proto__\n\t");
tryItOut("with({}) return;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:do {return -0; } while((({}).__lookupGetter__)(this,  /x/g ));");
tryItOut("/*infloop*/do {yield;{} } while(((try {  } finally { gc() } .(this)).constructor = this));");
tryItOut("{}");
tryItOut("/*infloop*/for(String(); this.zzz.zzz; Error((function (__proto__, __noSuchMethod__) { while((#3={a:#3#}) && 0) } ((prop = undefined.@*), [-0].filter(({a2:z2})))))) {export *;{<ccc:ddd><x><y/></x></ccc:ddd>yield  /x/g ; } }");
tryItOut("if(new [z1,,](true)((null.propertyIsEnumerable(\"__iterator__\")), null)) return;");
tryItOut("break ;");
tryItOut("for(let y in [])");
tryItOut("with((__iterator__:  /x/  = null.__noSuchMethod__)){/*infloop*/for(prop = (true.watch(\"__noSuchMethod__\", (1 for (x in [])))); __noSuchMethod__ = []; (.2 for (__iterator__ in false))) {yield *;; } }");
tryItOut("/*for..in*/L:for(var ((-3/0.eval(set))((1e+81.isPrototypeOf(this)))) in (yield [1,,])) {{} }");
tryItOut("M:while((window) && 0)export __count__;");
tryItOut(" for (__proto__ in (new (gc/*\n*/)()\t))");
tryItOut("\n");
tryItOut("var ({ prototype: [[], ({ __proto__: __noSuchMethod__, B: __iterator__ })] }), __parent__;");
tryItOut("M:if([11,12,13,14].map) { if ([0/0]) var __count__;} else ( /x/ )\nthrow <><x><y/></x></>\n");
tryItOut("let prop = <x><y/></x>, prop = window; const __proto__;");
tryItOut("if(3/0 / (__noSuchMethod__) >>>=1e-81.valueOf(/*\n*/\"number\")\n) { if ([11,12,13,14].map) export prop;} else if(<x><y/></x>\t) let __proto__ = false, constructor;");
tryItOut("do  while(((false.throw(false))) && 0);");
tryItOut("return <x><y/></x>.(undefined);");
tryItOut("/*for..in*/for(const [__noSuchMethod__, constructor] = __noSuchMethod__ =  /x/  in <x><y/></x>--) ");
tryItOut("if(<x><y/></x>) yield <y><z/></y>; else  if (<y><z/></y>) {return; } else  '' ");
tryItOut("L:if([[]]) { if (function::__proto__) function  prop () { return <x/> }  else export *;}");
tryItOut("return;");
tryItOut("L: {yield prototype;__noSuchMethod__ = <x>\t<y/></x>; }");
tryItOut("L:if((<y><z/></y> .@x:: <><x><y/></x></> , <y><z/></y>.__iterator__ = <x><y/></x>(null, []))) return 'fafafa'.replace(/a/g, []); else {__proto__ = window, constructor = constructorprop; }");
tryItOut("if((new Function(<y><z/></y>))) export *; else {var __noSuchMethod__;export *; }");
tryItOut("{return;yield this; }");
tryItOut("if(false.__defineSetter__(\"prototype\", function  __proto__ (__noSuchMethod__, prototype) { return *::* } ) >>>=[[]]) yield  /x/ ;");
tryItOut("/*for..in*/for([prop, __count__] = this.watch(\"prototype\", [1,2,3,4].slice) in *) {}");
tryItOut("try { yield ([1,,].throw(<x/>)); } catch(prop) { prop = prop; } ");
tryItOut("switch\r((-0)) { case 9: /*for..in*/for(const __count__ = /*for..in*/for(let [__proto__, __noSuchMethod__] = (prototype.throw(new ([,,z1])())) in  /x/ ) {(false); } in yield function::function::prototype) if(<x/>) return <x/>; else throw  /x/g ;break; case *: yield (<x><y/></x>.(<x/>));break; const __iterator__ = @foo; }");
tryItOut("M:if(((4. , <x/>) ^ false.eval(this))) {(<y><z/></y>);yield; } else  if ((new (({ function::constructor: prototype, __count__: __proto__ }) = <x><y/></x>.(<><x><y/></x></>), constructor = *::*)(<><x><y/></x></> -  \"\" , (yield *::*)))) <><x><y/></x></>; else {\nreturn;; }");
tryItOut("if(eval(\"(__parent__.__count__ = (__iterator__ = *))\", (-1))) {*; } else export prototype; const prototype;");
tryItOut("try { prop = prototype; } catch(constructor if (function(){with({}) let(__count__) { var __proto__ = true;})()) {  super  } catch(({ __parent__: ({ __noSuchMethod__: [__parent__, , , ] }) }\t) if this) { with({}) throw __iterator__; } catch(set if ((<x/> %= *)[ /* Comment */*])) { let(__proto__) { throw StopIteration; } catch(__noSuchMethod__) { for(let y in [5,6,7,8]) return; } finally { yield (new (1e+81)(__parent__)); } ");
tryItOut("with(*::*){return;export *; }");
tryItOut("if(__parent__\t) /*infloop*/for(const constructor; true; undefined) { }");
tryItOut("/*infloop*/L:for(([((-1)[true])]); (+(__iterator__.(033))); <><xxx {__parent__}={eval(\"[[1]]\", 0/0)} /></>) {\f{var prop = <x><y\t/></x>; } }");
tryItOut("return;");
tryItOut("/*for..in*/for(setter = new (window.__lookupGetter__(\"__iterator__\"))() in (p={}, (p.z = null)())) \t/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in 0) <><x><y/></x></>;");
tryItOut("yield <>\t<x><y/></x></>\n");
tryItOut("if(prototype.(<x><y/></x>)) (this.__defineSetter__(\"__proto__\", __noSuchMethod__)); else {export __iterator__;throw prop = __noSuchMethod__; }");
tryItOut("do {throw <y><z/></y>; } while((<x><y/></x>) && 0);");
tryItOut("/*for..in*/L:for(const __proto__ in var prototype = <x><y/></x>, prop = <x><y/></x>;) {{} }\n");
tryItOut("if(([15,16,17,18].some(eval, new ((*::*).call)((~this), <x><y/></x>)))) {return;/*for..in*/for(let prop =  \"\" .__parent__ = <x/> in <x><y/></x>) return  \"\" ;\t } else  if (\n<x><y/></x>) while((*(<x/>)) && 0)/*for..in*/for(let __noSuchMethod__ in (([1,2,3,4].slice)( \"\" )))constructor = [[]], constructor = <y><z/></y>;");
tryItOut("switch(({ prototype: prop, \t__count__: let }) = (yield [[]])) { case 6: continue ;case function(id) { return id } - 1.2e3: ({}).hasOwnPropertybreak;  }");
tryItOut("/*infloop*/do {{} } while([15,16,17,18].filter(Function, __iterator__.__iterator__));");
tryItOut("with({}) for(let y in [5,6,7,8]) if(( \"\" )[undefined]) let __parent__; else  if (<x><y/></x>.__lookupGetter__(\"constructor\")) return <y><z/></y>; else {[1,2,3,4].mapgc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <y><z/></y>) __parent__ = prop;");
tryItOut("{with({constructor: (true)()}){[1,,]; } }");
tryItOut("if( ''  >>> window)  else {; }");
tryItOut("/*infloop*/for(const ({ prop: __count__, __count__: prototype }) = <><>__parent__([,]) = ((uneval( /x/g )))</></>; *; (__noSuchMethod__.\t__proto__ setter= function  __proto__ (__proto__)window)) L: export prop;");
tryItOut("if((({constructor: this))) <><x><y/></x></>.yoyo(__proto__)) {yield;gc() } <ccc:ddd>yyy</ccc:ddd>  else  if ( default:  ({__proto__: false}){gc()return .2; } else  if (constructor.__proto__) yield; else {export *;do {let __count__ = ({a2:z2}); } while((<><x><y/></x></>) && 0); }");
tryItOut("/*infloop*/while(\n@foo){continue L;yield <x><y/></x>; }");
tryItOut("try { yield __proto__; } throw <x><y/></x>; } finally { return; } ");
tryItOut("/*infloop*/while(window){return @foo; }");
tryItOut("while(((__iterator__ = arguments)()) && 0);");
tryItOut("L:with( '' ){/*infloop*/while(__proto__ =  '' ){; } }");
tryItOut("let (__proto__ = false) { return <x/>; }");
tryItOut("/*for..in*/for(x::__proto__ in ((function(q) { return q; })(<x/>.valueOf(\"number\")))){undefinedcontinue L; }");
tryItOut("L:if(<x><y/></x>) ; else  if (<x><y/></x>\t) {export *; }");
tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = @foo in <><x><y/></x></>) export \tprototype;");
tryItOut("/*for..in*/for(prototype in ((new Function)(__count__ = [z1,,])))if(<x><y/></x>) return;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prop] = __count__ = (prototype = false) in ({ __proto__: ({ <x/>: prototype, yield: __noSuchMethod__ }) }) = (({}).hasOwnProperty)) {if([] = new (<x><y/></x>)()) { if ([, , ] = 3) if(<x><y/></x>) { if (window) (@foo); else {gc() }} else gc()} const __proto__;/*infloop*/while(<bbb xmlns=\"__proto__ = <x><y/></x>.isPrototypeOf([,,].isPrototypeOf(<x><y/></x>))\"><!--yy--></bbb>){gc()return [,,z1]; } }");
tryItOut("while((this.__defineGetter__(\"prop\", <x/>)) && 0)return;");
tryItOut("with({}) export *;");
tryItOut("if(<><x><y/></x></>(this for (__count__ in <x><y/></x>))) { if (window) const prop = __noSuchMethod__;} else {; }");
tryItOut("do {(<><x><y/></x></>);L:with({__count__: new <x><y/></x>.__defineGetter__(\"__proto__\", ({}).__lookupGetter__)(033.eval(<><x><y/></x></>),  \"\" )})gc() } while((__proto__ = <><xxx {__iterator__}={@foo in prototype >>> <x/>} /></>) && 0);");
tryItOut("yield <x><y/></x>;\nif(({})) throw <><x><y/></x></>; else {yield; }\n\nfunction  __iterator__ (__count__, __parent__) { continue ; } ");
tryItOut("/*infloop*/M:for(let __count__; <x><y/></x> >>> @foo; (<x/>)) yield;");
tryItOut("with({prop: [].propertyIsEnumerable(\"__count__\")})/*infloop*/while(++#1=[#1#]){return;export *; }");
tryItOut("/*for..in*/for([__iterator__, __parent__] = true in (__proto__ = <><x><y/><\f/x></>)) if(yield \tyield __iterator__.prop getter= function (__iterator__, __proto__) { return * } ) { if (window.__iterator__ = (({ set prop constructor (__iterator__) { yield undefined } , __proto__: <y><z/></y> })).__defineGetter__(\"__parent__\", ({}).__lookupGetter__)) {yield; }} else null;/*for..in*/M:for([constructor, __count__] = <>++__parent__.__lookupGetter__(\"prototype\")</> in (yield )) *;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__iterator__ in <><x><y/></x></>) {return constructor;new Function }");
tryItOut("if((({prop: -0 > null}))) { if (new #3={a:#3#}()) {if( \"\" ) { if ([1]) {break M;{} } else {4.; }} }} else let __count__ = __proto__, __count__;");
tryItOut("{break ; }");
tryItOut("/*infloop*/while(this\n >>> <y><z/></y>.__lookupGetter__(\"prop\")){do {(__count__);const __iterator__; } while((function(id) { return id }.yoyo(prototype)) && 0); }");
tryItOut("let __proto__;");
tryItOut("with(((p={}, (p.z = this)()))){(1e-81); const __proto__; }");
tryItOut("while((((yield <x><y/></x>))) && 0)return <><x><y/></x></>;");
tryItOut("if( '' ) { if (__proto__.prop) {<y><z/></y>; }} else {(*::*);<y><z/></y> } const prop;");
tryItOut("-3/0(5.0000000000000000000000) = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const /*infloop*/for(const ({ prototype: ({ constructor: __noSuchMethod__ }) }) = (\ftrue[*::*.__defineSetter__(\"__proto__\", function (prototype, function::prop) { <x><y/></x>; } )]); (__proto__ < *::*); (__count__ = constructor))  in \ffunction () { (<y><z/></y>); } (yield ({ set prototype(), prop: <y><z/></y> }), ({__parent__: __noSuchMethod__ =  /x/ }))) /*infloop*/M\t:do var constructor, __iterator__; while(prop.__count__ getter= <x><y/></x>);");
tryItOut("/*infloop*/L:do {L: {return; }/*infloop*/for((let (__proto__, __iterator__ = __iterator__) @foo); __noSuchMethod__.prop; [11,12,13,14].filter) export constructor; } while((([,,z1] * __proto__.constructor).__defineSetter__(\"constructor\", function(q) { return q; })));");
tryItOut("/*infloop*/while(<y><z/></y>){throw <x><y/></x//h\n>;var prop = <><x><y/></x></>; }");
tryItOut("if( /x/ ) gc() else  if (delete !({a2:z2})) {}");
tryItOut("with({constructor: <y><z/></y>})return  '' ;");
tryItOut("L: {(function ([y]) { })();if(0x99) export *; else  if (<\t><x><y/\t></x></>) ; }");
tryItOut("L: break M;");
tryItOut("if(((({prototype getter: function () { ; } , prototype: [ \"\" ].map(({}).hasOwnProperty) }) for (prop.__noSuchMethod__ in @foo) for each (__parent__ in constructor) for each (__proto__ in null)))) { if ((window\f <<= true).unwatch(\"prop\") == __parent__ = -1) {let prototype = #1#, constructor;L:do set; while((<x><y/></x>) && 0); }} else function ()false");
tryItOut("/*infloop*/M:for(prop; new (new Function)(); __proto__ ^ [1,,].isPrototypeOf(<x><y/></x> && <x/>)) break L;");
tryItOut("let (({ __noSuchMethod__: ({ __count__: prototype }) }) = null)\t { /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in [15,16,17,18].filter(( '' ).__defineSetter__, (*::*[1.3]))) (constructor);( /x/ ); }");
tryItOut("{/*infloop*/for([,,z1];  /x/ ; null) export *; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = (\n__iterator__); in ([[]])(null)) {export *; }");
tryItOut("if((@foo--)) if(<><x><y/></x></>) {true; } else  if (true) {export __noSuchMethod__; }");
tryItOut("L:with({__count__: (__iterator__ = <><x><y/></x></>) + ('fafafa'.replace(/a/g, (1 for (x in []))))}){for(let y in []);/*infloop*/L:while(<x><y/></x>)yield\n }");
tryItOut("/*infloop*/for(__iterator__; <><bbb xmlns=\"*\"><xxx>{__noSuchMethod__}</xxx></bbb><ccc:ddd><!--yy--></ccc:ddd></>; eval(\"((<x/>)[false])\", <x/>.__parent__try { break M; } catch(prototype) { return; }  = 0x99 >>= \t* :: <x/>) , window) {switch(__count__ = null) { case function(id) { return id }: return;break;  }with({__iterator__: prop}){export  /x/ ; } }");
tryItOut("if([<><x><y/></x></> for each (__proto__ in true)]) {/*\n*/ if ((function  __parent__ () { let prototype = __proto__; } )(__iterator__ setter: function  __noSuchMethod__ () { const prototype =  /x/ ; } )) {return; } else {constructor, __proto__ = *::*;; }}");
tryItOut("null;");
tryItOut("/*for..in*/for(constructor.constructor in #1[~this]) throw prototype;");
tryItOut("with({}) try { \nlet(prop = this) {  } catch(__count__ if (function(){for(let y in [5,6,7,8]) return;})())/*\n*/ { __count__ = constructor; } finally { return; } ");
tryItOut("do {__iterator__ } while((<x/>) && 0)\n");
tryItOut("/*infloop*/while(<x><y/></x>++){return; }");
tryItOut("/*for..in*/for(let let = window.throw(this.__iterator__) in ((\f__parent__ <<= <><x><y/></x></>).hasOwnProperty(\"x::set\"))) gc()");
tryItOut("if(1e+81) { } else {1.3;(<><x><y\f/></x></>); }\nswitch(1e4) { default: yield undefined;break; case __proto__: case 1: break; case [1,,]: break; case 6: throw prop;\t }");
tryItOut("\ttry { function(y) { yield y; {}; yield y; } } finally { gc() } \n(window)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in yield __noSuchMethod__) return <x><y/>\n</x>;");
tryItOut("/*for..in*/for(__count__ = __proto__ = <x/>.yoyo(<x><y/></x>) in ('haha'.split).call(<y><z/></y>, )) let (__noSuchMethod__, prototype) { let prototype; }");
tryItOut("if(1e81) ; else  if (undefined) ; else let __noSuchMethod__ = <y><z/></y>;");
tryItOut("/*infloop*/M:while(++<x><y/></x>) /x/g ;");
tryItOut("{return;gc() }");
tryItOut("/*infloop*/do /*infloop*/do {prototype; } while(([,] = eval(\"undefined\", <x><y/></x>))); while([11,12,13,14].filter);");
tryItOut("this.zzz.zzz;");
tryItOut("return;");
tryItOut("/*for..in*/for(var __parent__ = __proto__ = prototype in [1,,]) throw 0.1;");
tryItOut("L: gc()");
tryItOut("case -3/0: {if(@foo) {throw true;(case  /x/ : break; ); } else  if (__noSuchMethod__ =  { yield <x><y/></x> } ) {while((<x/>) && 0) { yield 0.1 } /*infloop*/M:for(const ({ __parent__: set, prop: __parent__ }) =  /* Comment */<x><y/></x>; 'fafafa'.replace(/a/g, [1,2,3,4].slice); __proto__ = ({a1:1})) {break L;export __count__; } } else with({__count__: *}){__noSuchMethod__ = <y><z/></y>, prop;let __noSuchMethod__; }M:switch(<><x><y/></x></>) { default:  }try { {} } finally { export *; }  }\nwith({}) { throw __iterator__; } break; with( /x/ ){;export constructor; }break; /*infloop*/for(constructor; function  __parent__ ()(<y><z/></y>.__count__).eval(Exception(<y><z/></y>)); [true].sort(Math.pow)) {const __proto__ = *::*;return  \"\" ; }{} const __iterator__;break; gc()break; case (({ prototype: __iterator__, __count__: ({ __count__: __parent__, prop: __noSuchMethod__ }) }) = <y><z/></y>) in __proto__.__iterator__: break; case __iterator__.__iterator__ = function::__proto__-=#3={a:#3#}: break; ");
tryItOut("do {return <x/>;export prop; } while((<x><y/></\fx>) && 0);");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/for(let prop = true in null) export prop;");
tryItOut("L:if([11,12,13,14].some) { if (1e81) {}} else {return *; }");
tryItOut("let (<employee id=\"1\"><name>Joe</name><age>20</age></employee> = prop = *) { /*for..in*//* nogeckoex bug 349964 */\r for  each(let (prop) in <y><z/></y>) {if(<x/>) {} } }");
tryItOut("/*infloop*/while(({a2:z2}).__lookupGetter__(\"__noSuchMethod__\")){var __count__ =  \"\" , __iterator__;yield; }");
tryItOut("prototype = 3/0;");
tryItOut("/*infloop*/M:for(const ({ prototype: __noSuchMethod__, constructor: __parent__ }) = <y><z/></y>.valueOf(\"number\"); (delete Array(({__noSuchMethod__ getter: function(q) { return q; } }))); Function(constructor = *::*) >= @foo) window\nwith((({prop: #3={a:#3#}}) ::  /* Comment */<><x><y/></x></> >>>=(new Function())).prototype)yield <x><y/></x>;");
tryItOut("L:switch((3 , arguments.watch(\"__parent__\", false))) { default: ;break; case ({__iterator__: window}): export constructor;break; case 8: break; export *;break; break;  }");
tryItOut("/*for..in*/for(__parent__ in (((function  __noSuchMethod__ () { yield; } .__defineGetter__(\"prototype\", ( \"\" .watch)).__defineSetter__)(new Object(<x/>, 1.3)([1][<x/>]))))try { return  \"\" ; } catch(__proto__) { export *; } finally { export __noSuchMethod__; } \nexport __noSuchMethod__;yield;\n");
tryItOut("{if((prototype = *::*)) { if ((__proto__ if (*)).__defineGetter__(\"__iterator__\", null)) export __iterator__;} else {export *; { throw @foo; }  }__parent__ = <x><y/></x>; }");
tryItOut("/*infloop*/for(let __iterator__; (p={}, (p.z =  /x/ )()).propertyIsEnumerable(\"constructor\"); (( /x/g )( /x/g , <><x><y/></x></>)) === *) {this.zzz.zzz; }");
tryItOut("M:with({prototype: })/*for..in*/for(var prototype in *) {continue ; }");
tryItOut("/*infloop*/for(<><x><y/></x></>.throw(@foo); @foo.throw(<><x><y/></x></>); \n[15,16,17,18].sort((function ([y]) { })(), <x/>)) {try { {} } catch(__proto__ if <><x><y/></x></>) { continue ; } catch(prop if  /x/g ) { throw window; } catch(constructor) { gc() } finally { return false; }  }");
tryItOut("return __parent__.__defineSetter__(\"constructor\", Math.sin);");
tryItOut("yield [prototype.try { delete, __count__ = __parent__ } catch(prototype) { ; } finally {  } ].map(({}).hasOwnProperty);");
tryItOut("/*for..in*/for(__proto__ in __proto__ = 3) L: {yield;var __noSuchMethod__, prop; }");
tryItOut("while(((this).call()) && 0){if(<><zzz><x><y/></x></zzz></>) break M; else  if (((yield 0.1)) & undefined.watch(\"__parent__\", /a/gi)) {continue ;(__iterator__); } else {return; } }\nwith({prop: ((__noSuchMethod__ = 1e+81).hasOwnProperty(\"__count__\"))}){throw true; }");
tryItOut("if(([15,16,17,18].sort(Math.sin, *.propertyIsEnumerable(\"__noSuchMethod__\")))) {prop, __noSuchMethod__;yield; } else  if (<><bbb xmlns:ccc=\"#3={a:#3#}\"><ccc:eee></ccc:eee></bbb></>) {gc()var constructor, __iterator__ =  \"\" ; } else {constructor;const __proto__ = ; }");
tryItOut("L:if(prop = {}) { if (3) /*infloop*/M:while(window){return \t<><x><y/></x></>;export prop; } else {new Functiongc }}");
tryItOut("/*infloop*/M:while(__proto__.__count__ = new ()()){let constructor; }");
tryItOut("/*infloop*/for(const prototype; new [1,2,3,4].map\t(); yield (__iterator__ = this)) {gc() }");
tryItOut("{} const constructor;");
tryItOut("/*infloop*/do /*for..in*/for(const __proto__ in ((#3={a:#3#})((/a/gi).call(null, __count__, <><x><y/></x></>))))@foo = function(id) { return id }, __proto__ = <><x><y/></x></>; while(let (prototype = __count__, __proto__ = <x><y/></x>) (new Number(function(id) { return id })));");
tryItOut("{with({prop: <x><y/></x> =  '' }){; }{__parent__, __noSuchMethod__ =  /x/ ( /x/ ); } }");
tryItOut("(__noSuchMethod__);");
tryItOut("/*for..in*/for(__proto__ in  set __iterator__(__proto__)* instanceof @foo) function  __iterator__ (constructor) { window; } ");
tryItOut("if(__proto__ = <y><z/></y>) {{}L: {export *; } } else  if (([<><x><y/></x></>].map(Math.sin))) {/*infloop*/for(__iterator__; [,,z1]; <y><z/></y>) {{}(<><x><y/></x></>); } }");
tryItOut("M:if(<><x><y/></x></>+= \"\" ) (new 'haha'.split(this, [,,z1])); else {if(<x><y/></x>) const __parent__ = <><x><y/></x></>; else  if (*)  }");
tryItOut("do continue ; while((this.__defineSetter__(\"prop\", [1,2,3,4].map)) && 0);");
tryItOut("{throw <><x><y/></x></>; }");
