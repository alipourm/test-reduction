tryItOut("export __noSuchMethod__\n");
tryItOut("/*infloop*/for(constructor = (uneval(false)).unwatch(\"__noSuchMethod__\"); @foo;  '' --.valueOf(\"number\") = [__parent__, [], ]) {(<><x><y/></x></>); }");
tryItOut("this.zzz.zzz;");
tryItOut("while(( /* Comment */[1,,].__iterator__) && 0){let (__parent__) { const __noSuchMethod__; } }");
tryItOut("<><x><y/></x></>");
tryItOut("let(#2=[window] = 0x99 -= <y><z/></y>, prop) { with({}) yield;");
tryItOut("if(window) {} else  if (this) ; else ;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let prop.constructor = (__proto__.prototype.isPrototypeOf(<y><z/></y>)) @ __iterator__.__noSuchMethod__; ('haha'.split(<><x><y/></x></> % <><x><y/></x></>, [1]) < [15,16,17,18].some(new Function, window)); <!--\tyy-->) gc()");
tryItOut("if(__proto__) export __count__; else  if ((<y><z/></y>.propertyIsEnumerable(\"prop\")).__lookupSetter__(\"__iterator__\")) {export *\n{/*infloop*/while(*::*){ } } } else {\n(1.3);return [15,16,17,18].sort(( \"\" ).\fwatch, <x><y/></x>); }");
tryItOut("/*infloop*/while(\f*){continue ;gc() } const delete;");
tryItOut("let (__parent__) { export *; }");
tryItOut("if(({__noSuchMethod__:  /x/ }) >>= <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(<x/>)) {\r{if(true) *::*; else  if ( \"\" ) {<x><y/></x>; } else export *;\n;\n } } else  if (constructor = [__noSuchMethod__, ] = 0/0 %= <x/>) {with(constructor){throw false; } } else {<x><y/></x> *= @foo.__count__ = constructor; }");
tryItOut("/*infloop*/for(const (__count__); let (__parent__) this = __count__; \fnew [1,2,3,4].slice(<y><z/></y>)) {; }");
tryItOut("var __parent__ = __parent__, __proto__;");
tryItOut("/*for..in*/M:for(let constructor in (((__count__ = <x><y/></x>).call)(#2=[*])))if((__proto__ =  \"\" )) {break ;return; } else  for each (prop in #3={a:#3#}) for each (prop in <y><z/></y>)");
tryItOut("return this;");
tryItOut("return [[]];");
tryItOut("M:if(([11,12,13,14].sort ? <y><z/></y> : __noSuchMethod__ = <x/>)) { if (constructor.prop getter= function  constructor () { yield constructor: <><x><y/></x></> + this } ) {/*for..in*/for(let __proto__ in (((<><x><y/></x></>).watch)(window))){return __count__;'haha'.split } } else {/*infloop*/for(let prop = (__count__)((__noSuchMethod__ = null)); (new (Function)()) ? (eval(\"<x/>\", __proto__)) : (eval(\"*\", <><x><y/></x></>)); Error(<x><y/></x>,  /x/g )) {(null); }if([,,z1])  else  }}");
tryItOut("if(([15,16,17,18].sort(({a2:z2}), (null.__defineGetter__(\"__count__\", function  __iterator__ (prop) { yield *::* } ))))) {L:if(true === <y><z/></y>.isPrototypeOf((function (prototype, __parent__ = *)-1).call(<><x><y/></x></>, ))) {return;return __proto__; } else  if (<><x><y/></x\t></> ^ __parent__) {;({a1:1}); }\f else yield; } else  if (<y><z/></y>) {throw __proto__;export *; }");
tryItOut("if([<><zzz>*::*</zzz>.'(*\n)</> for each (<x><y/></x> in true)]) var __count__; else  if (([1,,].*)) {; }");
tryItOut("let(true) { let(({ __count__: prop }), __iterator__ = [1,,]) ((function(){let(constructor = <><x><y/></x></>, __count__ = __proto__) { export __iterator__;})());");
tryItOut("/*for..in*/for(let prop = (<><x><y/></x></> for each (prop in __iterator__)) in <x><y/></x>.__lookupGetter__(\"__count__\")) @foo");
tryItOut("L:switch([11,12,13,14].filter) { case 2: L: {(({}).__lookupGetter__).call } }");
tryItOut("if(export prop;.unwatch(\"prototype\")) __iterator__ = 4., __proto__ = <><x><y/></x></>;");
tryItOut("if([,,z1].__proto__ = 1e81(window.__defineSetter__(\"__count__\", function(y) { yield y; (*::*);; yield y; }))) {gc() } else  if ((this.__defineSetter__(\"__parent__\", ))) with({__proto__: <x><y/></x>.(<x/>)})let __iterator__ = prop, __iterator__; else var constructor;");
tryItOut("return  /* Comment */((p={}, (p.z = ((*::*)[<x/>]))()))\n;");
tryItOut("with({}) var __count__ = (new Error(<x><y/></x>));");
tryItOut("{for(let y in [5,6,7,8]) with({}) { throw __count__; }  }");
tryItOut("throw window;with(((constructor = true).__lookupGetter__(\"prop\")))let __count__ = <y><z/></y>;( '' );");
tryItOut("switch(__parent__) { default: break; break; case 8: /*infloop*/do var __count__; while(({}).call);break; case 3: /*infloop*/for(const ({ __iterator__: __proto__, __count__: prop }) = (__iterator__ = ({a2:z2})); __count__.prop = <x/> ? __parent__ : true.unwatch(\"__count__\"); [15,16,17,18].some(__iterator__, (void [,,]))) {{}\n }break; case 6: if(__count__ = <y><z/></y>) {break M;export *; }break; case (__proto__.(<x><y/></x>))[(yield (constructor)[undefined])]: (window);if( /x/ ) const __count__, prop; }");
tryItOut("/*infloop*/while(<x><y/></x>)continue ;");
tryItOut("{for(let y in []); }");
tryItOut("with({}) { for(let y in []); } \n/*infloop*/for(__noSuchMethod__; false; <x><y/></x>) {export *;let constructor = <x><y/></x>; }");
tryItOut("L:do {[1,2,3,4].mapif(<>> >= [[1]]) throw prototype; else  if (-0) {return window;gc() } else return 1e4; } while((({__parent__ setter: function () { return 'fafafa'.replace(/a/g, *) }  })) && 0);");
tryItOut("if([z1,,]) {{}yield; } else  if ([15,16,17,18].filter((1 for (x in [])), new ([1,2,3,4].map)( /x/ ))) export *;");
tryItOut("if(this.zzz.zzz) switch(this.__defineSetter__(\"__count__\", <x><y/></x>)) { case (__count__.constructor = null.yoyo(-1)): /*for..in*/M:for(let [prototype, function::prop] = [1] in prop) {Q }break;  }");
tryItOut("x::__iterator__ = __noSuchMethod__;");
tryItOut("with({}) { __proto__ = __noSuchMethod__; } ");
tryItOut("L:if((@foo && [[]] < (\n<x><y/></x>.eval(prototype = <x><y/></x>)))) {break ;/*\n*/switch(this) { default:  }\n }");
tryItOut("throw @foo;\n-3/0;\n");
tryItOut("/*for..in*/for(prop in ((function(q) { return q; })([[1]].prop))){export __parent__;if((delete <x/>)) let __count__ = -1, __count__; else  if ((prop.__count__ = *::*)) {const __iterator__; } else {continue M; } }");
tryItOut("/*infloop*/while((<y><z/></y>.throw(<x><y/></x>))){gc(); }");
tryItOut("L:if() const set = window, __count__;");
tryItOut("while(( /x/g ) && 0){const __count__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(new Function(prop = throw {}; % @foo == undefined); [(window)].sort((1 for (x in []))); <xxx>{get}</xxx>) /*infloop*/for(true.yoyo(-3/0.*); (constructor.constructor = <x><y/></x>.eval(constructor.__lookupGetter__(\"__iterator__\"))); ((-1).hasOwnProperty(\"__count__\")) @ new RegExp(prop = <x><y/></x> for (__count__ in this))) return;");
tryItOut("/*infloop*/L:while(__parent__.(<x><y/></x>)++){throw []; }");
tryItOut("/*infloop*/do gc() while(({ get prototype __noSuchMethod__ () { /*for..in*/for(let [prop, constructor] =  ''  in function(id) { return id }) {export __proto__; } } , constructor: ({this getter: function(q) { return q; } }) }));");
tryItOut("case 3: default: case [RegExp().__lookupGetter__(\"__count__\")].some(gc): if(*::*.__noSuchMethod__ = false) { if \n(([[]].eval(this) || #2=[<><x><y/></x></>])) {continue ;yield; }} else {; }break; case #1=(prop.__proto__ getter= function(q) { return q; }): case 6: /*for..in*/for([, ] in *) /*for..in*/for(const __parent__ = window in <x><y/></x>)  '' break; /*for..in*/for(let (__count__) in ((3/0)(window.unwatch(\"prop\")))){let __iterator__;yield __noSuchMethod__; }break; break; yield  /x/g ;break; ");
tryItOut("with({}) { let(__proto__ = [<x><y/></x> ? default: break; case 7: gc()(<//h\nx><y/></x>);break; __parent__, prototype = 3.141592653589793; :  /x/g \f].map(<x><y/></x>) == ((this.__defineGetter__(\"__iterator__\"\n, ([,]).watch)).__defineSetter__(\"prop\", /a/gi))) ((function(){throw prop;})()); } ");
tryItOut(";");
tryItOut("\twith({prop: __noSuchMethod__})while((((__noSuchMethod__.constructor setter= function (constructor) { yield [1] } ) >= [,,z1].propertyIsEnumerable(\"prototype\"))) && 0){{} }");
tryItOut("L:while((false) && 0)return;");
tryItOut("let(__parent__ = <bbb xmlns:ccc=\"<y><z/></y> +  \"\" \"><ccc:eee></ccc:eee></bbb>, constructor = [11,12,13,14].some) { with({}) __proto__ = __noSuchMethod__;");
tryItOut("__iterator__");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/let __noSuchMethod__ = @foo, __noSuchMethod__ = constructor;");
tryItOut("if(<><x><y/></x></>) { if (3/0) let __parent__ = prototype;} else {yield 1e-81; }");
tryItOut("/*infloop*/L:while(this &= undefined){export *;return  '' ; }");
tryItOut("if(([1,2,3,4].slice).apply) { if (prototype) {yield <><x><y/></x></>; } else {(<y><z/></y>); }}");
tryItOut("{M:with(<x><y/></x>)var  get __proto__(prototype)<y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in this) break ;");
tryItOut("{/*for..in*/for(__iterator__ in constructor) {yield <y><z/></y>; }if(prop) prop; else {{} } }");
tryItOut("return;");
tryItOut("M:with(this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"return <x/>;\")))){[1,2,3,4].map }");
tryItOut("{(*); }");
tryItOut("/*for..in*/M:for(const prototype in <x><y/></x>) {yield; } const __parent__;");
tryItOut("M:\rif(((p={}, (p.z = <><x><y/></x></>)()))) {{}/*for..in*//* nogeckoex bug 349964 */ for  each(function::constructor(<x><y/></x>) in (<x/>.yoyo(window))) {return;\nreturn;\n } }");
tryItOut("if((({__iterator__: ('fafafa'.replace(/a/g, window)),  get __count__() { return (__parent__.prop = <><x><y/></x></>) }  }))) { if (window == <y><z/></y>.hasOwnProperty(\"(<y><z/></y>.hasOwnProperty(\\\"__noSuchMethod__\\\"))\")) {for(let y in [5,6,7,8]) var prop, __count__ = true;L:with('fafafa'.replace(/a/g, 'haha'.split)){throw @foo; } } else {const prop = (<><x><y/></x></> ? this : <><x><y/></x></>), __noSuchMethod__; }}");
tryItOut("__count__\n");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("throw __iterator__;");
tryItOut("if(((yield window))) return;");
tryItOut("");
tryItOut("do /*infloop*/while((#1=[#1#])(<x><y/></x>)){const __iterator__ = __iterator__, __count__;yield <x><y/></x>; } while((this.zzz.zzz) && 0);");
tryItOut("prototype: ((function ([y]) { })() ? 033 : false) != <x><y/>\t</x> = argumentsM:with({__parent__: (Function())})break \nlet (__count__) { /*for..in*/L:for([__proto__, __proto__] = window in (function ([y]) { })()) {export *;((1 for (x in []))).call } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ((prototype)) in 0.1) /*infloop*/for(constructor%=1e4; (<x><y/></x>++); (function  constructor (__proto__, __iterator__)({ prop: __iterator__, __proto__: __iterator__ })).call(<><x><y/></x></>, true, <y><z/></y>)) let __proto__ = null, __parent__;");
tryItOut("/*infloop*/do return <x/>; while(window , [,,z1]);");
tryItOut("while((({prototype: (prop = null) && (__parent__)()})) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __parent__: __noSuchMethod__ }) in <x><y/></x>.(-3/0)) let prototype, __proto__;/*infloop*/for(var __parent__ = [,]; true; true) const prototype = null;M:if() { if (((<x><y/></x> == this))(<><x><y/></x></>.__lookupGetter__(\"prototype\"))) export *; else } }");
tryItOut("/*for..in*/try { try { for(let y in [5,6,7,8]) ; } catch(__parent__ if (function(){try { let __parent__ = @foo; } catch(constructor if *::*) { return; } catch(__proto__ if (function(){ /x/g ;})()) { var __noSuchMethod__ = @foo; } catch(__count__) { return null; } finally { let __proto__, __count__ = <><x><y/></x></>; } })()) { with({}) { __noSuchMethod__; }  }  } catch(__iterator__ if __iterator__ = this) { let(constructor =  '' ) ((function(){let(__count__, __proto__) { break ;})()); } catch(constructor) { prop = __noSuchMethod__; } finally { let(constructor = ((<><x><y/></x></>)()), __noSuchMethod__ = <x/>) { yield ([window].some(prototype)); } for(const __noSuchMethod__ = <><x><y/></x></> in  constructor getter: [1,2,3,4].map<><x><y/></x></>) __parent__, __iterator__");
tryItOut("/*infloop*/for(({ constructor: ({ prop: __proto__, __proto__: __proto__ }), prop: __count__ }) = ( ''  == @foo) -= let (__iterator__) <><x><y/></x></>; ([].hasOwnProperty(\"__noSuchMethod__\")); this.__defineSetter__(\"__noSuchMethod__\", (<x><y/></x>).apply)) {/*infloop*/do 5.0000000000000000000000; while([__parent__] = __parent__.propertyIsEnumerable(\"__proto__\")); }");
tryItOut("/*infloop*/for(__parent__ = <x><y/></x>; undefined(); this) ");
tryItOut("this.zzz.zzz;");
tryItOut("with({constructor: prototype}){export *; }");
tryItOut("switch(constructor-=(-1)) { case  '' : (new Function(\"<x><y/></x>, __parent__;\")) const constructor;break;  }");
tryItOut("/*for..in*/for(__proto__ in (((3.141592653589793).watch)((@foo.propertyIsEnumerable(\"prototype\")))\f))const function::__count__ =  /x/g , __iterator__;");
tryItOut("with({__parent__: (new ([1,2,3,4].slice)(prototype.__count__ = Date(<x><y/></x>), (<><x><y/></x></>.__count__ = [z1])) .@x:: [15,16,17,18].filter((<x><y/></x>).prototype watch, * >>= @foo))})yield; const __count__;");
tryItOut("{const prototype, constructor = <><x><y/></x><\t/>;while(((prop = @foo)) && 0)export *; const prototype }");
tryItOut("__noSuchMethod__, __proto__ =  \"\" ");
tryItOut("if(({ set prototype(__proto__, __parent__) { return *::* }  })) { if (<x/>.@*) throw <x/>;} else {/*infloop*/for(<x><y/></x>; <y><z/></y>; <x><y/></x>) {__noSuchMethod__;yield; } }");
tryItOut("do gc() }new (this)(<><x><y/></x></>).propertyIsEnumerable(\"__count__\")  while(((__iterator__.@*)) && 0);");
tryItOut("L: with({}) { continue L; } ");
tryItOut("/*infloop*/for(var __noSuchMethod__.prop = .*;  \"\"  < arguments; [,,z1] ? __count__ : <><x><y/></x></>) {export *; }");
tryItOut("if(__noSuchMethod__) { if (yield (yield null)) {{export *;\n;\nvar __parent__ = <x><y/></x>; }if(<x/>) var  x::__proto__ = 0.1, prop = *::*; else  if (1.2e3.valueOf(\"number\")) const prototype, constructor; else {break M; } } else /*infloop*/for(__count__ = 0/0; __iterator__; <><x><y/></x></>) {}}");
tryItOut("L: eval");
tryItOut("while(((__count__ = false for (prototype in <x><y/\f></x>) for each (__parent__ in __iterator__))) && 0){null.__proto__ = null;[, __parent__, , , constructor] }");
tryItOut("if(({}).__parent__ = <x><y/></x>) /*for..in*/for(__iterator__ in  /x/g ) @foo; else  if (((this.__defineGetter__(\"__count__\", (<y><z/></y>).call)).@*)) {let __iterator__ = <><x><y/></x></>, __proto__ = <><x><y/></x></>; } else {let __iterator__;if(__noSuchMethod__ :: false) return; else  if (__iterator__) {gc() } else {break ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype(this) in __count__) {export x::__parent__; }");
tryItOut("{ /x/ ; }");
tryItOut("prototype = __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop.__parent__ in <x><y/></x>) {return;{} }");
tryItOut("/*for..in*/for(const __count__ in (((++(function ([y]) { })()).watch)((function () { yield true; } ).call(*, ).constructor)))for(let y in []);");
tryItOut("if(Array((0/0.throw( \"\" ))).watch(\"__iterator__\", function (__parent__) { return ((constructor =  '' ) *= __proto__ = <y><z/></y>) } )) { if (__proto__.__proto__ = (<x><\fy/></x> >>>=<><x><y/></x></>)) {yield;yield <><x><y/></x>\t</>; } else {for(let y in []); }}");
tryItOut("if(0x99 ?  \"\"  : <><x><y/></x></>) {__count__: __iterator__ -= <x/>__noSuchMethod__ getter: function () { yield <x><y/></x> }  } else export __count__;");
tryItOut("let (constructor = <x><y/></x>) { throw <y><z/></y>; }");
tryItOut("L:if(<x><y/></x>.@foo) {/*infloop*/do {{} } while({} ^ *); } else  if ( '' .eval(<x/>)) {{yield;const __noSuchMethod__; }const constructor; }");
tryItOut("/*infloop*/for(__count__; @foo; *::*) {var __proto__ = <y><z/></y>, prop = [,];\f }");
tryItOut("/*infloop*/while(this === <x><y/></x>){{} }");
tryItOut("var constructor;");
tryItOut("for(let y in []);");
tryItOut("let(prototype, __proto__) { for(let y in [5,6,7,8]) __count__ = 3.141592653589793;");
tryItOut("<>new /a/gi(new ('haha'.split)((* >>> ({a2:z2}))).propertyIsEnumerable(\"constructor\"), <x><y/></x>())</>, new (function (prototype, <x/>) { (-1); } )()");
tryItOut("/*infloop*/for(var __noSuchMethod__; new ({}).__lookupGetter__(@foo).@foo; (function(id) { return id })) {export constructor;var __proto__, __noSuchMethod__ = [1]; }");
tryItOut("{M:with(<x><y/></x>)continue L\nexport __parent__; }");
tryItOut("for(let y in []);");
tryItOut("M:with(<y><z/></y>){if(true.__count__) export __parent__; else (<x/>); }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, 1e4-- instanceof (false.__proto__)] = window in (this << <x/>.@*)) {function ([y]) { };with(((1.2e3.propertyIsEnumerable(\"__noSuchMethod__\")).throw(({prototype: (function ([y]) { })(), prototype getter: [1,2,3,4].map }))))yield; }");
tryItOut("prototype = prototype;");
tryItOut("/*for..in*/for([__parent__, __parent__] = (new (0 -=  '' )(, <x/>.valueOf(\"number\"))) in \nnew (__noSuchMethod__)()) throw StopIteration;");
tryItOut("\rL: export *;");
tryItOut("/*infloop*/M:for(this.throw(<y><z/></y>); [((uneval(<><x><y/></x></>)))].some(function(y) { yield y; yield <x/>;; yield y; }); <x><y/></x>.(__parent__)) return  /x/g .__proto__ = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in [15,16,17,18].filter(({}).__lookupGetter__, (({}).__lookupGetter__).call([z1], ))) with({constructor: <x><y/></x>}){({}).__lookupGetter__ }");
tryItOut("if((3.141592653589793.yoyo(<x/>))) {{}__count__, constructor; } else  if (()) break M;");
tryItOut("with({}) for(let y in [5,6,7,8]) return\n");
tryItOut("const prototype, __iterator__ = *;");
tryItOut("return\n\nfor(let y in [5,6,7,8]) throw prop;");
tryItOut("if(__proto__ = (*).call((new (this)()), false.watch(\"constructor\", ({}).hasOwnProperty))) { if (<x><y/></x>.propertyIsEnumerable(\"prototype\").propertyIsEnumerable(\"prop\")) M:if(<x><y/></x>.( /x/g )) {return <x><y/></x>;<><x><y/></x></>; } else  if (3/0.@foo) {{yield; } } else if(<x><y/></x> || 1.3) { if (<y><z/></y>) {var constructor = <y><z/></y>;export *; }} else {constructor }}");
tryItOut("");
tryItOut("{}L:while(((uneval(this))) && 0){return (-1);return; }\n/*for..in*/M:for(constructor in (( '' )((@foo).throw(new (function (prop) { yield prototype } )())))){@foo; }");
tryItOut("<><x><y/></x></>\nreturn;\n");
tryItOut("if(false) { if (((<x><y/></x>.(__iterator__))[0.1])) {gc() } else {const prop, prototype; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in (<><x><y/></x></> || <><x><y/></x></>)) {/*for..in*/for(var __count__ in ((eval)(<x/>\t)))export *;continue  }");
tryItOut("/*for..in*/for(const __proto__ in (('haha'.split)((1 for (x in []))))){throw this; }");
tryItOut("with({__count__: (__count__.__count__ getter= ((new Function(\";\"))).apply)}){return <y><z/></y>;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ prop: __count__ }) in -3/0) {export __parent__;; } const __noSuchMethod__;");
tryItOut("with({__noSuchMethod__: ((new ([1,2,3,4].slice)()))[ /x/ ]}){let __count__ = *::*;while((<x><y/></x>) && 0){break M; } }");
tryItOut("const __parent__ = *::*;");
tryItOut("M:if(<><x><y/></x></>) { if (undefined) {continue L; } else return;}");
tryItOut("/*for..in*/for(var constructor in (((function (__count__, __count__) { return <><x><y/></x></>.valueOf(\"number\") } ).call)())){/*for..in*/for(const [__iterator__, __parent__] = (p={}, (p.z = <x><y/></x>)()) in <x><y/></x>) {yield;export constructor; }return __noSuchMethod__: <x/>; }");
tryItOut("/*for..in*/ for ((this)([[1]]) in 0) for (prototype in __parent__)");
tryItOut("return;break ;");
tryItOut("let (__parent__ = this, __parent__ =  '' ) { continue M; }");
tryItOut("__proto__ = __count__;");
tryItOut("/*for..in*/for(const prototype = <><x><y/></x></> in __count__) {return;yield; }if(function () { return <><x><y/></x></>; } (@foo).throw(new (*)(<><x><y/></x></>))) {<x/>\n } else  if ((function(y) { yield y; return constructor;; yield y; })(<xxx>{__proto__}</xxx>.(( /x/g  + window)), <><x><y/></x></>)) {yield; } else { }\n");
tryItOut("/*infloop*/L:while(break )if(eval(\"continue ;\", *)) return __iterator__; else export *;");
tryItOut("do /*infloop*/for(const prototype; [15,16,17,18].filter(@foo, *::*); [-0].some(__proto__)) {const __count__, default: break; return;break; case 8: {}; } while((([case 2: , , ({ __noSuchMethod__: prop, constructor: __iterator__ })].function::__noSuchMethod__)) && 0);");
tryItOut("/*for..in*/for(__proto__ in ((function  __parent__ (prototype, __parent__)<x><y/></x>)(constructor)))throw ({});\nMath.sin\n");
tryItOut("L:with({__count__: (<x><y/></x>.(@foo) ?  ''  : window.__defineGetter__(\"__iterator__\", eval))})with({__count__: false})let prototype =  \"\" \nreturn 1.2e3;");
tryItOut("yield this.__defineSetter__(\"__noSuchMethod__\", eval);");
tryItOut("return ({})\nthrow window\n/*for..in*/for(var __count__ = __noSuchMethod__ = <x/> in .2) [,,z1];");
tryItOut("{let prototype = __iterator__; }");
tryItOut("/*infloop*/for(const __count__; new <><x><y/></x></>.__proto__ = *--; (<zzz>true</zzz>.propertyIsEnumerable(\"__parent__\"))) {if(gc()) { if (#1=<x><y/></x> ? constructor.eval(<y><z/></y>) : __parent__) { } else {yield; }}/*for..in*/for(prop in <><x><y/></x></>) { for ;var __iterator__ = undefined, prototype = <x><y/></x>; }\n }");
tryItOut("/*for..in*/M:for([__count__, __proto__] = window.isPrototypeOf([,,z1]) in __parent__.__proto__ getter= [1,2,3,4].map) {continue ;/*infloop*/do {;let __proto__ = <><x><y/></x></>, __count__; } while((3 if (true))) }");
tryItOut("L: {yield;return [,,z1]; }");
tryItOut("if(__noSuchMethod__(0.1) = true) { if ((#2= /x/ )) constructor;} else yield <x><y/></x>;");
tryItOut("let (({ __noSuchMethod__: ({ __count__: function::prototype }) })) { gc()\n__parent__;\n } const __noSuchMethod__;");
tryItOut("yield #2=({function::__proto__: this});");
tryItOut("if(((({each: prototype = window })).apply(__noSuchMethod__.__noSuchMethod__ = (eval(\"(function () { yield  /x/g  } )(1e81)\", (prop = <y><z/></y>)))))) {export __iterator__; } else  if (prototype = <><{__noSuchMethod__}><x><y/></x> </{__noSuchMethod__\f}></>) {gc()\n;\n }");
tryItOut("/*for..in*/for(const __parent__ = ({}).__lookupGetter__(<x><y/></x>, <y><z/></y>) in <x><y/></x>\n) export function::__noSuchMethod__;");
tryItOut("{; }");
tryItOut("if(<x><y/></x>) { if ((-1)) } else {var prototype, __count__ =  /x/g ;export *; }");
tryItOut("L:if((new ((<><x><y/></x></>\f).__defineSetter__).call((p={}, (p.z = this.__lookupGetter__(\"prop\"))()), (<><x><y/></x></>.constructor)).*)) let({throw <><x><y/></x></>;break ; }) ((function(){return;})()); else throw <> /x/ </>;");
tryItOut("( '' )\n");
tryItOut("/*infloop*/L:do /*for..in*/L:for(const __count__ in [z1][null]) {continue M;throw (this);; } while(return);");
tryItOut("throw prop;");
tryItOut("yield undefined.__lookupSetter__(\"__count__\");");
tryItOut("\tif( \"\" ) yield ({}); else {/a/gi }");
tryItOut("\ftry { return; } finally { export *; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in ) {break ;export __count__; }");
tryItOut("/*for..in*/for(var (3/0)(null |=  \"\" ) in (('haha'.split)(#2=([window]))))M:if(window) this; else export __noSuchMethod__\nlet (__proto__) { var __parent__, constructor = __parent__: this; }");
tryItOut("{const prop = <><x><y/></x></>;yield; }");
tryItOut("/*for..in*/for(const  \"\"  in (((new Function(\"{}\")))(((033).valueOf(\"number\").__defineSetter__(\"__parent__\", function  prototype ()[[1]])))))\n");
tryItOut("do {M:if(false) { } else  if (#1#) {return; } else {{\f} }return\n } while((false += ({__count__:  /x/g })) && 0);");
tryItOut("constructor");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><bbb xmlns:ccc=\"__proto__ = <y><z/></y>\"><ccc:eee></ccc:eee></bbb></>['constructor'] in Function(<x/>, <x><y/></x>)) throw StopIteration;");
tryItOut("while((<><zzz>this.__defineSetter__(\"__noSuchMethod__\", (1e+81).__defineSetter__)</zzz></>) && 0){let(({ prop: __noSuchMethod__, prop: prototype })) { with({}) export *; }");
tryItOut("/*infloop*/M:for(var __iterator__ = window; #1#; [[1]]) yield <><x><y/></x></>;");
tryItOut("L:if() (this); else  if (\n(__parent__)[this]) {export *; } else return  \"\" ;");
tryItOut("M:if(this.__defineSetter__(\"__iterator__\", ( \"\" ).apply)) var constructor; else  if (constructor = #3={a:#3#}) {yield; } else {throw @foo; }");
tryItOut("; const constructor\n");
tryItOut("/*for..in*/for(var __noSuchMethod__ = [(__parent__ = undefined for each (constructor in false) if (*::*))] in __count__ = constructor) {<x><y/></x>; }");
tryItOut("while((*::*) && 0){3\nL: export *; }");
tryItOut("/*for..in*/for(const  /x/  in constructor) const __proto__, __proto__\nif(__iterator__.__noSuchMethod__ setter= <x><y/></x>.__defineGetter__(\"__iterator__\", *)) {export __proto__;; } else  if ((<x/>.prop)) {if(033) return; else  if (<x/>) export __parent__; }");
tryItOut("M:do return [this].filter(function  __iterator__ (prop) { return  /x/g  } ); while((([__noSuchMethod__].sort( /x/g ))) && 0);");
tryItOut("/*for..in*/for(const prop =  /x/g  in 3/0) ");
tryItOut("L:if(*.__defineGetter__(\"prototype\", Math.sin)) {{return;return; } } else  if (__count__ = <x><y/></x> << __noSuchMethod__.(true)) __iterator__ = this;");
tryItOut("/*for..in*/for(let __proto__ = <y><z/></y> in yield prop.prop = __count__:  /x/g  -= window) /*for..in*/for([constructor, __proto__] = [,,] in ([[1]] * undefined)) return <x/>;");
tryItOut("try { case RangeError(<x><y/></x>, false) | +<y><z/></y>: break;  } finally { return null; } ");
tryItOut("/*infloop*/do {prototype = <x/>; } while(this.__defineSetter__(\"__noSuchMethod__\", eval));");
tryItOut("");
tryItOut(";\nyield;\n");
tryItOut("/*infloop*/for(var __proto__; (({}) < *.valueOf(\"number\")); prop.prop setter= Function.__defineSetter__(\"__count__\", <x><y/></x>)) {M:switch(<>(p={}, (p.z = <><x><y/></x></>)())</>) { default: break; while((<y><z/></y>) && 0)return this;break; /*infloop*/for(({prototype: __proto__.__lookupGetter__(\"let\")});  /x/g .*; eval(\"-0.constructor\", yield *)) {with({__noSuchMethod__: [1,,]})throw this; }break; ([z1,,]);if('haha'.split) {var constructor =  '' ; }break; let __count__, constructor;case ((constructor.@*)(<> /x/ </>) = ): break; break; var __parent__ = <y><z/></y>, prop = <y><z/></y>;case .2: (null);break; break;  }let (constructor = null, constructor = *) { L:while(( '' ) && 0)var __iterator__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\t for  each(const __count__ in *::*) {var __count__ = *, function::__noSuchMethod__;Math.pow }");
tryItOut("yield;");
tryItOut("gc()");
tryItOut("with( '' )/*for..in*/for(var __count__ = prop in *::*) {export *; }");
tryItOut("/*for..in*/for(let prop in let (__parent__ = *::*) __parent__) {yield *;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in (__proto__ ? <><x><y/></x></> : window)) {(<x><y/></x>); }");
tryItOut("yield\nlet __count__ = <y><z/></y>, __parent__;");
tryItOut("M:if((eval(\"while((<x><y/></x>) && 0){return;return; }\", function::__noSuchMethod__))) {yield;yield this; } else  if (constructor = 1.3) ({});");
