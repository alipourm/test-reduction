tryItOut("let (__count__, prop) { let (__proto__ = null <<= __noSuchMethod__) { return; } }");
tryItOut("M:if(__proto__ = [z1,,]) { if ((1.3.__lookupGetter__(\"prop\"))) M:if( /x/ ) {null; } else  if (true) (__noSuchMethod__); else return;} else {(<><x><y/></x></>); }");
tryItOut("L:if(this >>> <><x><y/></x></>) {let __parent__ = 1e4, __proto__ = undefined;M:with({__parent__: __count__})gc() }");
tryItOut("let(__iterator__) ((function(){yield new <><x><y/></x></>(__iterator__).prototype;})());");
tryItOut("yield <y><z/></y>;return *::*;");
tryItOut("L: try { let __iterator__ = __parent__, __count__ = window; } catch(prototype) { var prototype, __parent__; } ");
tryItOut("__iterator__ = function::prop;");
tryItOut("\fL:do {{} } while(((function::__iterator__ = <><x><y/></x></>.*.__lookupSetter__(\"prop\"))) && 0);");
tryItOut("yield  /x/ \n/*for..in*//* nogeckoex bug 349964 */ for  each(const <x><y/></x> in <x><y/></x>) return delete;");
tryItOut("do {yield; } while((constructor) && 0);");
tryItOut("if(__count__ = false) if(([(1e+81).call(constructor = __iterator__, eval(\"[1,,]\", @foo), null)].map(Math.pow))) { if (this.__defineGetter__(\"constructor\", ({}).__lookupGetter__)) {gc() } else {(window); }} else  if (new function(q) { return q; }(yield [,].isPrototypeOf(*::*).__count__)) ");
tryItOut("with({}) { with({})  } ");
tryItOut("/*for..in*/for(const __count__ in ((new Function)(let (__noSuchMethod__ = <y><z/></y>)  '' ))){}");
tryItOut("/*infloop*/L:  for(const [({ __proto__: __iterator__ }), , , [], ] = (prototype = constructor); <xxx {__parent__}={ '' } />.(<x><y/></x>.({)); (function ([y]) { })()) {return <x/>;\tvar __proto__ = <x><y/></x>; }");
tryItOut("if(<><x><y/></x></> <<= <x><y/></x>) { if (\n) yield window;} else {const constructor, prop = undefined; }");
tryItOut("/*for..in*/for(let constructor in ((<x/>)(<y><z/></y>)))const getter;return; const __noSuchMethod__;");
tryItOut("L:switch(__iterator__.(new (function::constructor.prop = <><x><y/></x></>)()))/*\n*/ { default: break; case 8:  }");
tryItOut("with({}) __iterator__ = __proto__;");
tryItOut("do while(((__proto__-=<x><y/></x>.yoyo((eval.__defineSetter__(\"__parent__\", function  __noSuchMethod__ (prop)#1#))))) && 0){var __iterator__ = prop; } while(((\n(new ([1] ::  /x/  != __iterator__.__count__ = <><x><y/></x></>)(String((\nwindow),  /x/g ), __noSuchMethod__ = prototype))).valueOf(\"number\")) && 0);");
tryItOut("/*infloop*/for(var __count__; 3/0 -= <x><y/></x>; (new (*)())) let __parent__");
tryItOut("/*infloop*/do {export __noSuchMethod__;gc() } while(__count__ = <><x><y/></x></>);");
tryItOut("let(prop) { let(__proto__, __noSuchMethod__) { try { yield (constructor.__noSuchMethod__); } finally { with({}) { var __parent__, constructor; }  } ");
tryItOut("{return <y><z/></y>;break ; }\tfor(let y in [5,6,7,8]) __count__ = <x/>, __iterator__ = this; const prop;");
tryItOut("/*infloop*/M:do const __proto__, __iterator__; while((*::*.*.isPrototypeOf(((4.).watch(arguments)))));");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("L:while(( \"\"  *= [[1]].unwatch(\"__parent__\") for (constructor in [1,,]) if (eval(\"{}\", <><x><y/></x></>))) && 0){/*infloop*/for(var getter; (1.2e3.isPrototypeOf(<x><y/></x>)); new (this)(<x><y/></x>, <><x><y/></x></>)) {__parent__ = *, __count__ = false;throw <x/>; } }");
tryItOut("for(let y in []);");
tryItOut("if(({__noSuchMethod__: ++prop, constructor: __noSuchMethod__ = -3/0 }).propertyIsEnumerable(\"__iterator__\")) { if ((<><x><y/></x></> && <x><y/></x>)) let try {  } catch(setter) { ; } ; else (<><x><y/></x></>);}");
tryItOut("/*infloop*/L:for(let __parent__; void (uneval(<x/>)); new [15,16,17,18].filter((<><x><y/></x></>).watch, this :: null)()) yield false;");
tryItOut("/*infloop*/while((__proto__.__count__ = <x/>))throw this;");
tryItOut("with({__count__: new (*::*[null])()})yield <x/>;");
tryItOut("L:if((new ( /x/g )(-1)).__defineGetter__(\"__noSuchMethod__\", __noSuchMethod__)) { if (case <x/>: break; return\ncase 3: gc()break; break; /*infloop*/for(var __proto__ = __count__; __noSuchMethod__; <x/>) {throw (-0);yield __count__; } > undefined) /*infloop*/for(eval(\"(false > (function ([y]) { })())\", \t__proto__ !== window); null >> undefined[(<x/>++)]; ( /x/g  = 3.141592653589793 -= @foo.valueOf(\"number\"))) {export *; }} else {yield; const prop; }");
tryItOut("/*infloop*/for(prototype.({ prop: __parent__.__count__, __iterator__: __noSuchMethod__ }) getter= (function(y) { yield y; if(<x><y/></x>.([])) yield; else {<x><y/></\fx>export *;\f }; yield y; }).call; ({ __noSuchMethod__: constructor, constructor: __count__ }) = [prop, [__proto__, prop], , __parent__, __iterator__]; (prototype = constructor = [])) __noSuchMethod__ = [], __proto__;\nconst __proto__;\n");
tryItOut("this.zzz.zzz; const constructor;");
tryItOut("if((.(prototype = *::*).unwatch(\"get\"))) {const \tprop = 3.141592653589793, prop = <x><y/></x>;new Function } else  if (<x><y/></x>.__defineGetter__(\"prop\", 'haha'.split)) return *::*;");
tryItOut("{}\nyield;\n");
tryItOut("if(<><x><y/></x></>) {yield;let __noSuchMethod__; } else  if (prototype) {let __noSuchMethod__, __noSuchMethod__ = <y><z/></y>; } else var __parent__ = *;\nconst __parent__ = @foo;\n");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(<x/>) { if (this) {const case 2: break; case 5: function(y) { yield y; yield ({});; yield y; }break; default: __count__;break; ;yield; }} else \tlet __count__ = [[1]], prop = prop;if((<x><y/></x>.__lookupGetter__(\"x::__noSuchMethod__\"))) {.2\f;yield; } else (new Function(\"return prop;\"))");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("/*infloop*/L:for((__count__.__noSuchMethod__+=*::*); delete <><bbb xmlns=\"<y><z/></y>\">yyy</bbb></>.(window !== window); this.__defineSetter__(\"prototype\", ({ __parent__: __count__, constructor: __parent__ }) = <x><y/></x>.(*::*)) .@*:: (- /x/ ) :: [11,12,13,14].filter) L:if(@foo) { if (<x><y/></x> ? this : false) return;} else var __parent__;");
tryItOut("if(constructor = -3/0) {export *; } else  if (({prop: #1#, prototype setter: <x/> })) __noSuchMethod__, __iterator__ = <><x><y/></x></>;");
tryItOut("if(constructor.propertyIsEnumerable(\"__iterator__\")) {constructor = __proto__, __parent__;return; } else  if ((this.zzz.zzz)) {const __count__ = this;/*infloop*/while(<><x><y/></x></>)*; } else ");
tryItOut("/*infloop*/M:do {export __parent__;{} } while((this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map)));");
tryItOut("if((constructor = __proto__.eval())) {export prototype; /x/ ; } else {return __proto__;return; }");
tryItOut("with({__count__: constructor.__parent__})prop;\n{}\n");
tryItOut("if(<x/>) { if (this) gc() else {/*infloop*/ for(@foo; <y><z/></y>.*; (p={}, (p.z = ({a2:z2}))())) yield; }}");
tryItOut("if(this) { if (new (constructor.constructor)((yield 3.141592653589793))) {function(id) { return id }\n; }} else {var __count__; }");
tryItOut("if(#1#) return;");
tryItOut("with({}) { try { try { let(__noSuchMethod__, __iterator__ = undefined) ((function(){yield constructor = [[]];})()); } finally { with({}) { let(prototype) ((function(){@foo;})()); }  }  } catch(prop) { yield (new ((*).apply)()); } finally { export __count__; }  } ");
tryItOut("/*for..in*/for(let [z1,,].prop in (((({ __parent__: __proto__\f }) = constructor).__defineSetter__)(new Number(constructor)))){let __iterator__, __proto__ = false;{} }");
tryItOut("/*for..in*/for(const prototype = [.2].sort((*::*).__defineSetter__) >>> <y><z/></y>.@* in @foo.__count__) {export *; }");
tryItOut("/*for..in*/for(__count__ in <x><y/></x>) {let constructor = <><x><y/></x></>; } const prop;");
tryItOut("/*infloop*/while(({__iterator__: this.__defineSetter__(\"__iterator__\", <x/>)})){do gc() while((function ([y]) { }) && 0); }");
tryItOut("switch( \"\" ) { default: return (function ([y]) { })(); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x><y/></x>) {yield;export __count__; }");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, (*++).__defineSetter__); this.__defineSetter__(\"prototype\", function(y) { yield y; /*infloop*/for(const __iterator__; (let (__count__ = this, constructor = undefined) 0/0); (let (__iterator__) <> { return  super  } </>each (prop in -0) for each (__parent__ in __count__))) {;throw __noSuchMethod__; }; yield y; }); (window.__iterator__ = <><x><y/></x></>).eval(( /x/g .valueOf(\"number\")))) {return; }");
tryItOut("/*infloop*/L:while((eval(\"export __noSuchMethod__;\", (true.unwatch(\"__iterator__\").__iterator__)))\t @ this for each (prop in this)){if((__noSuchMethod__ in <><x><y/></x></>).__count__ = (yield undefined)) {{}prototype = <x><y/></x>, prototype; } else ; }");
tryItOut("do function  __noSuchMethod__ ()<><x><y/></x></> while(((function (function::prop, prototype) { if([z1]) { if (eval(\"({})\", <x><y/></x>)) {yield [1,,]; }} else export *; } (let __parent__))) && 0);");
tryItOut("/*infloop*/L:while(__noSuchMethod__ = (<x><y/></x>.(window))){var __noSuchMethod__; }");
tryItOut("yield;");
tryItOut("if(((new Function)())) {(undefined); } else export __count__\nexport *;");
tryItOut("L: /*for..in*/M:for(__noSuchMethod__ in <x><y/></x>) <x/>");
tryItOut("gc()");
tryItOut("{}");
tryItOut("__iterator__ = yield;");
tryItOut("L: L:if(({})) var __count__; else  if (prototype) (<x/>); else ([1,2,3,4].slice).apply");
tryItOut("with({constructor: (([11,12,13,14].some).isPrototypeOf((function ([y]) { }.valueOf(\"number\"))))}){let (constructor = [[]], function::<!--yy-->) { continue ; }L:do const __parent__; while((({a1:1})) && 0); }");
tryItOut("L: if( /= (prop\t.__count__ = function ([y]) { }.throw(<y><z/></y>))) { if (<xxx>{prototype}</xxx>) {(true); } else {const function::__proto__; }}");
tryItOut("let (__noSuchMethod__) { with([1] >>> ({}))return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in #0=<><x><y/></x></>) return;");
tryItOut("with(1.2e3.hasOwnProperty(\"prototype\"))(this)\n");
tryItOut("if((new 'fafafa'.replace(/a/g, eval) <= (eval(\"({__noSuchMethod__: <><x><y/></x></> })\", (<x><y/></x>.valueOf(\"number\")))))) { if ((<x><y/></x> .@*:: this.__defineGetter__(\"constructor\", eval))) /*infloop*/for(let __iterator__; (prototype =  '' ); (@foo.hasOwnProperty(\"__noSuchMethod__\"))) let function::__noSuchMethod__, __proto__ = <x><y/></x>; else {gc()/*for..in*/M:for(prototype in __noSuchMethod__) {export __noSuchMethod__; } }}");
tryItOut("/*infloop*/for(*; false; <x/>.unwatch(\"prototype\")) {let constructor = <x><y/></x>, __iterator__;throw <x><y/></x>; }\nreturn;");
tryItOut("/*for..in*/for(var [prop, __count__] = true in [,,]) #3={a:#3#};");
tryItOut("L:if((new Number(undefined)).*) {__iterator__, __iterator__;break M; } else  if ( /* Comment */1e4) continue L; else ");
tryItOut("/*for..in*/for(let *::*['__count__'] in ((new (({}).__lookupGetter__)())(<><zzz>__parent__ = (-0)</zzz></>))){let prototype, constructor; }");
tryItOut("M:if((Function())) {return this; } else ");
tryItOut("L:with((new (Math.pow).apply())){continue ; }");
tryItOut("if(yield (#2=[<x><y/></x>]) >  \"\"  for (prototype in constructor)) { if ((new Boolean((this.zzz.zzz)))) M:if(<><x><y/></x></>) } else if(__proto__) {(function(y) { yield y; export prototype;; yield y; }).call } else  if (@foo) {break ; }");
tryItOut("L:with({__count__: (<x><y/></x>.valueOf(\"number\"))}){return this;const __iterator__, __parent__ = __parent__; }");
tryItOut("L:with([1].unwatch(\"__parent__\"))M:if('fafafa'.replace(/a/g, [1,2,3,4].map) + this /= window.propertyIsEnumerable(\"__count__\")) { if ([] = [, __proto__]) M:with(window){var prop, window; }} else yield\n{}");
tryItOut("throw StopIteration;");
tryItOut("{L:if(prop) {return; } }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("{<><x><y/></x></>\t; }");
tryItOut("if((-0).\t__count__) {(*::*); } else {export __parent__;export *; }");
tryItOut("{/*infloop*/M:for(undefined; <x/>; <><x><y/></x></>) {([z1]);yield <x/>; } }");
tryItOut("/*infloop*/M:do {yield  /x/ ;throw  \"\" ; } while(<x/>);");
tryItOut("/*for..in*/for(let [z1,,] in ([z1,,])[<x/>]) {throw <><x><y/></x></\t>; }");
tryItOut("let prototype = <><x><y/></x></>, __noSuchMethod__\nexport *;\nwindow;\n");
tryItOut("/*for..in*/for(var prop in ((function  __noSuchMethod__ (__proto__, __iterator__) { with({__count__: (<x><y/></x>.(3.141592653589793))})return  /x/ ; } )(constructor = <x><y/></x>.@foo))){/*infloop*/for(const ({  /x/g : prototype, __noSuchMethod__: __count__ }) = __count__ = <x><y/></x>; \nprop; this[window]) return; }");
tryItOut("for(let y in [5,6,7,8]) with({}) let(__iterator__, prop) ((function(){let(__proto__ = (prototype = prototype), constructor = new <><x><y/></x></>(constructor, *)) { this.zzz.zzz;})());");
tryItOut("/*for..in*/for(__proto__ = (prop = (p={}, (p.z = 1.3)())) << prop = <><x><y/><\t/x></> in -0 = <><x><y/></x></>) return;");
tryItOut("if((this.__defineSetter__(\"x::__iterator__\", ({}).__lookupGetter__)).__noSuchMethod__) export *; else  if (this =  /x/ ) {return window; }");
tryItOut("if([15,16,17,18].filter(({}).hasOwnProperty, constructor)) {;{} } else {{}<x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */prop");
tryItOut("with({}) {(0/0);undefined; }");
tryItOut("if(((function  constructor (__proto__)undefined).call).call(((__iterator__ = <x/>)), (prop/* = 033), [z1,,].*)\f) /a/gi else switch(\n<><x><y/></x></>) { export __noSuchMethod__; }");
tryItOut("if(*::*.valueOf(\"number\")) return; else  if (*) ; else gc()");
tryItOut("do {(1.3);let __parent__, __iterator__; } while((( \"\"  ^= <><x><y/></x></>)) && 0);");
tryItOut("M:if((new ([15,16,17,18].map(function  __count__ ([], constructor)\f { return; } , ( /x/ ).watch)))) ;");
tryItOut("L:do ; while(((yield [,,z1])) && 0);");
tryItOut("{throw prototype;/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__ in [,,z1]) var __iterator__; }");
tryItOut("try { for(let y in []); } \fcatch(__proto__ if prop = *::*) { return; } catch(prop if (function(){with({}) yield eval (-1);})()) { with({}) { (({})); }  } catch(__parent__) { let({yield;export prop; }) { continue M; }  const __parent__;");
tryItOut("/*infloop*/M:for([, __count__, ] = [1,,]\n;  /x/g ; @foo) {;export prototype; }");
tryItOut("throw StopIteration;");
tryItOut("L: {yield; } const __noSuchMethod__;");
tryItOut("/*infloop*/for(let ({ each: constructor, __count__: [] }) = ([11,12,13,14].filter); (prop.prop getter=  '' ).@foo; __proto__ = <x><y/></x>) {<y><z/></y>; }");
tryItOut("{export *; }");
tryItOut("L:if('fafafa'.replace(/a/g, Math.sin)) { if (<><bbb xmlns:ccc=\" /* Comment */window\"><ccc:eee></ccc:eee></bbb></>) L: {export *; }} else {function(y) { yield y; ; yield y; }let (function ([y]) { })(), __noSuchMethod__; }");
tryItOut("continue M;\nyield <><x><y/></x></>;\nif((eval(\"prop.(<><x><y/></x></>)\", @foo.eval(arguments))).propertyIsEnumerable(\"__count__\")) { if (this.__defineGetter__(\"__iterator__\", Math.pow)) with({__iterator__: <y><z/></y> ? 1e4 : 1e-81}){*::*; }} else return;");
tryItOut("if(*) { if (this) {(__parent__); } else return *::*;}");
tryItOut("__iterator__.__count__ getter= Math.sin;");
tryItOut("yield ([0x99].sort(new Function));");
tryItOut("/*infloop*/for((prototype.@foo)[prototype = 3.141592653589793++.*];  '' ; [(yield <x/>)].isPrototypeOf((({ function::prop: prop }) = ({ __iterator__: __parent__ })))) gc()");
tryItOut("break ; const __iterator__;");
tryItOut("if(new Boolean()) {yield window;/a/gi }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*infloop*/\ffor((constructor%=(yield function(id) { return id })); ((__parent__ = __noSuchMethod__).__lookupGetter__(\"__parent__\")); eval(\" \\\"\\\"  -= __iterator__\", __count__.__count__ = __noSuchMethod__)) {do {yield;return; } while((<y><z/></y>.yoyo(<x/>)) && 0); }");
tryItOut("/*infloop*/for(window; undefined; #1=[#1#]) {\fbreak L; }");
tryItOut("{}");
tryItOut("for(let y in []);");
tryItOut("export constructor");
tryItOut("/*for..in*/for(let [__count__, constructor] = (({__parent__: <><x><y/></x></>.unwatch(\"__noSuchMethod__\") })) && (#0=({__proto__: (eval(\"1.2e3\", *::*))})) in (prototype-=({a2:z2}))) let __count__;");
tryItOut("/*infloop*/for(const [, __count__.prop, [({ __iterator__: __count__, __parent__: prop }), __count__, __parent__], ] = (yield @foo if (<><x><y/></x></>)); prop+= /x/ ; arguments) {prototype = <y><z/></y>, __parent__ = window; }");
tryItOut("\rreturn prototype\nexport constructor;");
tryItOut("/*for..in*/L:for([prototype, prop] = (new #1#)[(__parent__.__parent__)] in *::*) export *;");
tryItOut("/*for..in*/for(let (window ? __parent__ : <x><y/></x>)(<><x><y/></x></>.valueOf(\"number\")) in 0x99) {\f}\n set prop(__proto__default: break; break;  )\t { return ('fafafa'.replace(/a/g, 0x99))() } \n");
tryItOut("yield __parent__ = true;");
tryItOut("/*for..in*/for(const (constructor) in <><x><y/></x></>) const __count__ = (-0), __parent__ = *::*;");
tryItOut("let (({ __noSuchMethod__: constructor, __iterator__: __noSuchMethod__ }) =  /x/  << *::*, prototype = <x><y/></x>) { export __count__; }");
tryItOut("L:do {function  constructor () { (<><x><y/></x></>); }  } while((__iterator__ = <y><z/></y>) && 0);");
tryItOut("L: export __count__;");
tryItOut("{export *;/*for..in*/for(var __parent__ in (((function(y) { yield y; yield;; yield y; }).call)(this.__defineGetter__(\"__iterator__\", try { prototype = <x><y/></x>, __parent__ = <x><y/></x>; } finally { var constructor = <y><z/></y>, __iterator__ =  /x/ ; } function  __noSuchMethod__ (__parent__, __iterator__)__proto__)))){return; } }");
tryItOut("{return; }");
tryItOut("if(( /x/  << window)) { if ((<><x><y/></x></>.unwatch(\"prototype\") for each (__count__ in true) for each (prop in prop))) {throw __proto__; } else {__count__; }}");
tryItOut(";if(<><x><y/></x></>) { if (*::*) constructor, __parent__} else ");
tryItOut("switch([,,z1]) { default: ;case 6: break;  }");
tryItOut("L:if([[1]]) { if (function ([y]) { }) ({}).__lookupGetter__ else constructor = this;}");
tryItOut("/*for..in*/for(var [constructor, __noSuchMethod__] = __iterator__ in (uneval(.2))) {return (-1);\f }");
tryItOut("prop.__proto__ = prop;");
tryItOut("/*infloop*/M:for(<><x><y/></x></>.__defineGetter__(\"constructor\", ({}).__lookupGetter__); prototype = window; delete <x><y/></x>) return;");
tryItOut("\f/*infloop*/L:for(<><x><y/></x>\f</>.eval(window); [] & <><x><y/></x></>; <x/> .. null) {break M; }\n");
tryItOut("/*infloop*/while((({ [[1]] < window['__count__']: constructor }) = ([11,12,13,14].map).throw(new (constructor)(-0, prop))('fafafa'.replace(/a/g\f, function (__proto__, __count__)<><x><y/></x></>))))return;");
tryItOut("M:if(<y><z/></y>) { if ((constructor.__noSuchMethod__ = new (__parent__)((false.__lookupSetter__(\"__parent__\")), *.unwatch(\"__count__\")))) gc()} else {/*for..in*/for(var [prop, __count__] = prototype.constructor =  '' ++ in __iterator__ = *::*) {__noSuchMethod__;4.; } }");
tryItOut("let(__proto__) { ;");
tryItOut("(0.1);");
tryItOut("L:if(0) { if (this.zzz.zzz) return;} else {[1,,];yield; }");
tryItOut("/*for..in*/for(const ((set)) in ((({}).__lookupGetter__)(( != new ((new (function (prop, __proto__) { return __count__ } )()))(<><x><y/></x></>, <x/>) === (__count__)))))let __iterator__, __proto__ = null;");
tryItOut("return;");
tryItOut("/*infloop*/L:for((yield __iterator__); false / prototype; [,,z1]) break M;");
tryItOut("__iterator__, __count__ = arguments;");
tryItOut("if((yield (__count__.watch(\"__proto__\", @foo)))) {/*for..in*/for(const  { {} }  = this in  /x/ ) {const yield; }{} }");
tryItOut("/*infloop*/for(let __iterator__ = ({ get __count__ __proto__ (__noSuchMethod__) { (@foo); } ,  set __parent__ prototype (__parent__) { yield #3={a:#3#} }  }); !constructor; ([z1].prop)) {export __count__; }");
tryItOut("/*infloop*/L:for(var constructor = <><x><y/></x></>; (-0); -3/0)  ");
tryItOut("/*infloop*/for(let this; ((Math.sin).call(<y><z/></y>, __parent__.__proto__ getter= Math.pow)); 0x99((), [({})].sort('haha'.split))) yield;");
tryItOut("if(((p={}, (p.z = (<><y/><)x>)()))) { if (constructor = true) ; else {__noSuchMethod__ =  \"\"  }}\nreturn  '' ;\n");
tryItOut("M:while((window.__iterator__) && 0){throw window; }");
tryItOut("/*for..in*/for([prop, __proto__] = .2[({a1:1})] in *) {yield prop =  /* Comment */window;<x/>; }");
tryItOut("if(window) {export __iterator__; } else  if (([15,16,17,18].some((function  __count__ (__count__, ({ __parent__: __noSuchMethod__ })) { yield (prop = {export *; })[<y><z/></y> != *] } ).apply, __iterator__((<x><y/></x> <<= this).__defineGetter__(\"__iterator__\", new Function))))) ;");
tryItOut("M:if(({__iterator__ getter: ({}).__lookupGetter__ })) { if ((typeof window)) {var prop, __iterator__ =  \"\"  } else {/*infloop*/M:do let __iterator__ = <><x><y/></x></>; while( \"\" ); }}");
tryItOut("/*infloop*/while((!this))'haha'.split");
tryItOut("if(<><x><y/></x></>\n) return; else {}");
tryItOut("yield window;/*for..in*/for([constructor, __parent__] = (([,,]).__defineSetter__(<x><y/></x>)) in <x><y/\t></x>) return;");
tryItOut("/*for..in*/for(var __iterator__ in window) {const ; }");
tryItOut("/*infloop*/for(({prop: ( /* Comment */(yield  /x/ )) }); __proto__.(([1,2,3,4].slice)(export *;)); (prop = ({a2:z2}).isPrototypeOf((p={}, (p.z = this.__defineSetter__(\"prop\", function  __noSuchMethod__, __proto__ = [] (prop) { return false } ))())))[(__proto__ .@x:: __count__.constructor setter= 'haha'.split)]) {if((eval(\"(function(id) { return id });\", ((__iterator__ = __noSuchMethod__).@foo)))) { if (<x><y/></x> >>>=true) return window else {export *;export __iterator__; }}if(({.2: ({__iterator__: <x><y/></x> }), __iterator__: <><x><y/></x></> })) if(*::*) { if ( '' ) {yield  '' ; } else export *;} else throw __iterator__; }");
tryItOut("let(__proto__) ((function(){var function::__count__ = <x/>;})());");
tryItOut("__iterator__ = window, function::__parent__ = #1#;");
tryItOut("while((({__iterator__: (p={}, (p.z = [,] ?  \"\"  : <y><z/></y>)()), __proto__: (<x><y/></x>.@*) })) && 0)/*\n*/{const __parent__, __proto__;(this); }if(true.yoyo( \"\" )) return <x><y/></x>; else ;");
tryItOut("/*infloop*/for(([[eval(\"yield  /x/g ;\", prop = ({a1:1}))]].some(function(q) { return q; })).__lookupGetter__(\"__iterator__\"); (#2=({prototype: false})); let (constructor = *, __noSuchMethod__ = window) .2.isPrototypeOf((__count__.prototype = (__parent__ = <><x><y/></x></>)))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__(<x/>) in <x/>) export prototype;/*infloop*/for((void ({a1:1}).__defineSetter__(\"__parent__\", @foo\n >>>=this ? __parent__ : <x><y/></x>)); ()[<x><y/></x> || false].eval(({ __parent__: __count__, __iterator__: prototype }) = ()); prototype.constructor) M:switch(eval(\"setter\", 3)) { case 7: /*for..in*/for(var __count__ in (((new Function(\"gc()\")))(-__count__))){export *; } } }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = [11,12,13,14].sort in function::function::prototype.((<><x><y/></x></>.yoyo(window)))) {if(({prototype: true }).unwatch(\"__parent__\")) {; } else  if ([11,12,13,14].some.prototype = <x><y/></x>.propertyIsEnumerable(\"prop\")) export prototype; }");
tryItOut("/*infloop*/L:for(var [] = #2=[ /x/ ];  \"\"  .. (constructor.__proto__);  /x/ ) {for(let y in []);do throw window; while((('fafafa'.replace(/a/g, (window.valueOf(\"number\"))).propertyIsEnumerable(\"__proto__\"))) && 0); }");
tryItOut("{}\n");
tryItOut("(prototype) = __proto__;");
tryItOut("L:while((eval(\"[[1]]\", window)\n) && 0){/*infloop*/M:for(/a/gi( var ,  { export __iterator__; } ); (__iterator__%=function ([y]) { }); typeof __parent__|=<><x><y/></x></>) /*for..in*/L:for(var __iterator__ = \f__iterator__ in 033) {1e4;return try { return  '' ; } catch(__parent__ if (function(){(window);})()) { yield; } catch(prototype) { ({}).hasOwnProperty } finally { gc() } ; } }");
tryItOut("__proto__ = __proto__;");
tryItOut("do break L; while((((*::* >>> this) - ([15,16,17,18].map((new Function(\";\")), this)) .@*:: .2().throw(<><x><y/></x></>)())) && 0);");
tryItOut("do continue L; while((3.141592653589793) && 0);");
tryItOut("/*for..in*/for(const __iterator__ in ((function  __iterator__ (__parent__) { yield <y><z/></y> } )(true\n)))continue ;");
tryItOut("/*for..in*/for(let __parent__ in <x><y/></x> @ new Number([1])) {({}).__lookupGetter__gc() }");
tryItOut("//h\nprototype = constructor;");
tryItOut("L: gc()");
tryItOut("try { this.zzz.zzz; } finally { this.zzz.zzz; } ");
tryItOut("var prop");
tryItOut("with({prototype: this.__defineGetter__(\"__count__\", new Function)}){window;let (__noSuchMethod__, __count__ =  /x/g ) { constructor, __proto__; } }{}");
tryItOut("while((((__proto__) = let ( \"\" , prototype = window) <><x><y/></x></>)) && 0){/*for..in*/L:for(__proto__ in ((/a/gi)(@foo))){{}let (prototype, __parent__ = @foo) {  /x/ ; } } }");
tryItOut("/*infloop*/do {return <x><y/></x>; } while(<y><z/></y>);/*infloop*/while(this){__parent__ = <x><y/></x>; }");
tryItOut("/*infloop*/do {export __proto__; } while(@foo);");
tryItOut("M:switch(function ([y]) { }) { default: return @foo; }");
tryItOut("if(([,].propertyIsEnumerable(\"__count__\"))) {__iterator__;return [[]] } else  if (this.__defineGetter__(\"prototype\", (new Function(\"break ;\")))) {/*infloop*/M:while((<x><y/></x>)(1e81))__proto__ = @foo, constructor = <x/>; }");
tryItOut("{} const __proto__;");
tryItOut("/*for..in*/for(let __iterator__ =  /* Comment */.2 >>>=4.(yield <><x><y/></x></>) in 3.141592653589793) if(new (/a/gi()).__lookupGetter__(\"constructor\")()) {yield * } else  if (this > false for (({ __count__: __count__ }) in export *;) for each (__proto__ in [1,,]) for each (__parent__ in undefined)) /*infloop*/for(<x><y/></x>; 3/0; 3.141592653589793) (Math.pow).call");
tryItOut("/*infloop*/for(constructor.(__count__-=[1,,]); [new Function(x::prop)].some(((1 for (x in []))).apply); <><>yyy</></>) {/*for..in*/for(let __noSuchMethod__ in ((<><x><y/></x></>)(5.0000000000000000000000.@*))){with({__iterator__: (__iterator__ = [,,])}){(undefined); } } }");
tryItOut("return @foo;");
tryItOut("if(__proto__ !== ( /* Comment */<x><y/></x>)) return; else yield;");
tryItOut("if(<x/>) {/*infloop*/for(<x><y/></x>; <x><y/></x>; <x><y/></x>) break ; }");
tryItOut("M:do return; while((function  __iterator__ (prototype) { throw @foo; } ()) && 0);");
tryItOut("if(1e-81.__lookupGetter__(\"__proto__\")) {export *;gc() } else  if ([null].map(eval)) yield;");
tryItOut("/*infloop*/__iterator__, __noSuchMethod__");
