tryItOut("/*infloop*/L:for(constructor; ; (constructor.prototype)) {L:if(({__count__: 1.2e3, prop getter: ({}).__lookupGetter__ })) { if (({constructor: <x><y/></x>,  get prop() { return undefined }  })) {;export *; } else {let prototype = <x><y/></x>, __count__ = this; }} }");
tryItOut("/*for..in*/for([each, __count__] = new (<><x><y/></x></>)() in <><x><y/></x></>) export *;");
tryItOut("for(let y in []);");
tryItOut("L: {return true; }");
tryItOut("if(yield undefined instanceof <x/>) yield ([15,16,17,18].filter((true).__defineSetter__, ((yield <x><y/></x>))));");
tryItOut("let (__proto__ = (<x><y/></x>[3.141592653589793]), [({ __proto__: ({ constructor: __count__, (/a/gi).call: prop }) }), __proto__, ]) { /*infloop*/for(({constructor: (-1)}); ; RegExp(<><x><y/></x></>))  '' ; }");
tryItOut("yield false;");
tryItOut("if((__noSuchMethod__.(<x><y/></x>)).hasOwnProperty(\"__noSuchMethod__\")) {const yield;\ngc()\n } else  if ([11,12,13,14].filter ^ __iterator__((function ([y]) { })())) throw 3.141592653589793;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/\tfor(var __count__ in (('haha'.split)(<x><y/></x>.__count__ = true))){return; }");
tryItOut("if(1e+81) { if (default: ) [1,2,3,4].slice else Math.sin}");
tryItOut("{const constructor, __count__; }");
tryItOut("/*infloop*/while(<x/>)");
tryItOut("var __iterator__ = <x/>; const x::__count__;");
tryItOut("M:if(__count__ = false) {let (__parent__ = (function ([y]) { })(), __iterator__) { const constructor, __proto__ = <x/>; } } else  if (return 1e4) {/*infloop*/for((<x/> .@ [z1]); (1e4.propertyIsEnumerable(\"__parent__\")); *::*\n) {export __iterator__;yield ({a1:1}); }(null); } else {L: Math.sin }");
tryItOut("yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <x/>()) {/*for..in*/for(constructor in (function ([y]) { })()) {__count__ = <x><y/></x>, __parent__ = <x><y/></x>; } }");
tryItOut("continue \nyield this");
tryItOut("yield;");
tryItOut("if((eval(\"window\", <><x><y/></x></>))) while((<x/>) && 0)export __iterator__;");
tryItOut("if([false]++) \f\n\n else \f{{}(@foo); }");
tryItOut("/*for..in*/for(let __count__ in <>window</>) /*infloop*/while([z1]){, __proto__ = this; }");
tryItOut("for(let y in []);");
tryItOut("{L: throw this;if(window\n) {} else ; }");
tryItOut(")/*for..in*/L:for(const prototype in ((<x><y/></x>)(<>try { ; } finally { with({}) { (__parent__); }  } </>)))\nconst prototype = <y><z/></y>, prop; ({ prop: __count__ }) ");
tryItOut("/*infloop*/do if(<zzz> /x/g </zzz>.constructor = function ([y]) { }) (function(id) { return id })\n while(Array().__defineGetter__(\"x::prototype\", function(y) { yield y; return;; yield y; }))");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <><x><y/></x></> in *) export __proto__;");
tryItOut("\rif((this.zzz.zzz)) {; } else {yield; }");
tryItOut("/*for..in*/M:for([__iterator__, prototype]\f = this.watch(\"__iterator__\", ({}).__lookupGetter__) in ({prototype getter: R })) {}");
tryItOut("/*infloop*/for(__iterator__ = <y><z/></y>; this; prototype) @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const (new Date([]))(({}) || ([1,2,3,4].map)((<bbb xmlns:ccc=\"'fafafa'.replace(/a/g, function (__parent__) { throw true; } )\"><ccc:eee></ccc:eee></bbb>.watch(\"__count__\", 'haha'.split)))) in (new 'haha'.split())) with({__parent__: prototype})(-1); const __iterator__;");
tryItOut("let ([]) { var constructor = (uneval(@foo)).__defineSetter__(\"__parent__\", /a/gi); }");
tryItOut("while((1.3) && 0){throw __count__; }");
tryItOut("/*for..in*/M:for(var [prop, __noSuchMethod__] =  /x/g  in <x><y/></x>) yield <x><y/></x>;");
tryItOut("/*for..in*/L:for(var [__iterator__, constructor = this] = yield yyy in [z1] ? 0x99 : true in (yield ({__proto__ setter: function(q) { return q; } }))) let(__noSuchMethod__, __iterator__) { return;");
tryItOut("/*infloop*/do {const constructor = *, __proto__ = __noSuchMethod__;return; } while((<y><z/></y> >= <x><y/></x>));");
tryItOut("L:with({__proto__: \n<x><y/></x>.__defineSetter__(\"__count__\", (prototype = .2))}){/*for..in*/M:for(var __proto__ in ((Math.sin)(@foo))){continue L;yield (gc).call; }var __iterator__ = window; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <y><z/></y>.throw(*::*) in .2) {let delete, prop = __count__ = <x/>, prototype;export prop; }");
tryItOut("L:with((__iterator__ = (<x><y/></x> == true), __noSuchMethod__ = <><x><y/></x></>))/*infloop*/for(var __parent__ = .2; [1]; 0.1) {return; }");
tryItOut("if((false.\ryoyo(<x><y/></x>) === true.eval(0))) { if ((<x><y/></x>.hasOwnProperty(\"prototype\"))) export __count__; else yield;}");
tryItOut(" continue ");
tryItOut("let ( = (eval(\"gc()\", <x/>)), __proto__ = __proto__ = #1#) { {({ __iterator__: __count__, prototype: __iterator__ }) = ( /x/ [#3={a:#3#}].propertyIsEnumerable(\"prop\")) } }");
tryItOut("M:do {throw <y><z/></y>; } while(((<x><y/><///h\nx>.(window))) && 0);");
tryItOut("while((((prop.isPrototypeOf(__noSuchMethod__ = #3={a:#3#})) <<= @foo , __noSuchMethod__)) && 0){/*for..in*/L:for(prop.prototype in (( /x/ )()))let __noSuchMethod__ = #3={a:#3#}; }");
tryItOut("var __noSuchMethod__ =  '' , prototype = <><x><y/></x></>;");
tryItOut("/*for..in*/for(__iterator__(__count__[this]) in ((Math.pow)(new (break M;function __iterator__ (__parent__) { yield prop } )(<y><z/></y>, null)((new Array()))))){/*infloop*/while((((1 for (x in []))).call(__count__, window)))let constructor, __parent__; }");
tryItOut("{/*infloop*/while(<><bbb xmlns=\"new (Math.pow)( /x/g )\"><employee id=\"1\"><name>Joe</name><age>20</age></employee><ccc:ddd><!--yy--></ccc:ddd></bbb></>){export prototype;export *; } }");
tryItOut("/*infloop*/for(prototype = window; constructor+=(*); new (true.__lookupGetter__(\"constructor\"))((<><x><y/></x></> * <x/>))) __noSuchMethod__;");
tryItOut("/*for..in*/for(let prototype in true) {(@foo); }");
tryItOut("prop = __proto__;");
tryItOut("try { var __noSuchMethod__, __proto__; } catch(constructor) { export *; } finally { yield undefined; } ");
tryItOut("{{} }");
tryItOut("");
tryItOut("{throw <x><y/></x>;__count__ = [033].some(function(y) { yield y; return  \"\" ;; yield y; }) }");
tryItOut("if(((uneval(<y><z/></y>))())) {continue L\n([,]);return @foo; } else  if (eval(\"{}\", (return window))) {return;function ([y]) { }; }\n");
tryItOut("{L:switch((yield (function ([y]) { })() % <y><z/></y>.__defineSetter__(\"__proto__\", function (prototype, __iterator__) { yield ({a1:1}) } ).*)) { default: break; case 8: throw <xxx>{__iterator__}</xxx>;break; case let (prototype,  \"\" , * = this) @foo: throw StopIteration;break; case 1: case <x><y/></x> instanceof <x><y/></x>: case (<><x><y/></x></> && @foo): break; /*for..in*/M:for(const [,]['prototype'] in ((<xxx>{constructor}</xxx>)((prototype = <y><z/></y>))))<x><y/></x>;case *::*.__defineGetter__(\"__count__\", (@foo).apply): break; case eval(<x/>[-3/0],  \"\" ): {}case <x/> != __noSuchMethod__.__lookupGetter__(\"__proto__\"): const prop;<x><y/></x>case <x><y/></x> === *: {return  /x/ ; }break; case 2: yield <><x><y/></x></>; } }");
tryItOut("/*for..in*/L:for(__iterator__ = (<x><y/></x> | <x><y/></x>//h\n) in ({})) {export __noSuchMethod__;let __noSuchMethod__ = this; }");
tryItOut("switch((new constructor())) { default: var prop;break; case __iterator__ = -0: let (__proto__, __noSuchMethod__) { let __count__ = #1#, __noSuchMethod__; }return *::*;break;  }");
tryItOut("/*for..in*/L:for(var [__iterator__, prop] = __count__ in <><x><y/></x></>) yield;");
tryItOut("export prop; const __count__");
tryItOut("let ((__noSuchMethod__ = 1.3)(__parent__ = <><x><y/></x></>) = <><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\"), prototype = (__proto__.__proto__)) { let constructor = *::*, prototype = __iterator__; }");
tryItOut("M:while((3/0.isPrototypeOf(@foo)) && 0){return *::*; }");
tryItOut("M:with({__proto__: #2=window})( /x/ );");
tryItOut("with({}) prototype = prop;");
tryItOut("with({constructor: __parent__ =  '' }){const __proto__ = <><x><y/></x></>;\n{}\n }");
tryItOut("/*infloop*/for(__noSuchMethod__ = <x><y/></x>; <x/>; export *;) {let __proto__;{} }");
tryItOut("throw StopIteration; const __proto__;");
tryItOut("L:if(({prop: <x><y/></x>, __proto__ getter: ({}).__lookupGetter__ })) {let (prop) 5.0000000000000000000000 } else let prototype = undefined;");
tryItOut("/*for..in*/M:for(const [__iterator__, prototype] = this.__defineSetter__(\"prop\", function  __parent__ ({true; }, __iterator__)\t { return @foo } ) in 0) {<><x><y/></x></>; }");
tryItOut("for(let y in []);");
tryItOut("if(<bbb xmlns:ccc=\"({__proto__: true})\"><ccc:eee></ccc:eee></bbb>) {yield;L:switch(@foo) { case  \"\" : yield; } }");
tryItOut("/*infloop*/L:for(let ({ __parent__: constructor, <x/>: [[[__parent__], , [constructor, ]], , ] }) = ((*::*.prop) , (function(y) { yield y; return;; yield y; }).call(<x><y/></x>, )).__defineGetter__(\"__parent__\", new (<x><y/></x>, this)()); ((function::prototype = undefined).__lookupSetter__(\"* - <x/>\")); <y><z/></y>) (<x><y/></x>);");
tryItOut("/*infloop*/L:do yield <x><y/></x>\n*::*; while(~(__proto__.__lookupSetter__(\"__count__\")));");
tryItOut("/*infloop*/while(new [1,2,3,4].map(3, <y><z/></y>));");
tryItOut("/*for..in*/for(var [__proto__, __parent__] = (((new Function(\"{}\"))).call(*, <><x><y/></x></>, @foo)) in <x>\r<y/></x>) __parent__");
tryItOut("/*infloop*/while(([__parent__ = __proto__ / *::* if (((-1)).call(*::*, (-1)))].__lookupGetter__(\"prop\")))false, <y><z/></y>");
tryItOut("prototype = [[1]]; const __iterator__;");
tryItOut("/*infloop*/do {yield;yield; } while(__parent__ = true);");
tryItOut("switch\t([1,,] ?  /x/  : gc()) { default: {} }");
tryItOut("if((__noSuchMethod__.__iterator__ = constructor)) return; else  if ((<y><z/></y> + prop)) {}");
tryItOut("/*infloop*/for(var ({ prop: __count__ }) = window; -*::*; (prototype.(false))) return;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for(const __proto__; (this.__defineGetter__(\"prop\", Math.sin) && (new RegExp( /x/g , ([15,16,17,18].map((this).apply, __noSuchMethod__ = <><x><y/></x></>))))); (uneval((RangeError(-1, __parent__))))) let (__iterator__ = <x><y/></x>, prototype) { 1e+81; }");
tryItOut("if((<x/>.hasOwnProperty(\"prop\")).prototype) {; } else  if ((this.__defineGetter__(\"constructor\", <><x><y/></x></>))) (<><x><y/></x//h\n></>); else {;; }");
tryItOut("with({}) { try { const __noSuchMethod__ =  /x/g , __parent__; } catch(prop) { const constructor = <><x><y/><\f/x></>, __proto__; } finally { return this; }  } ");
tryItOut("do gc() while(( \"\" .unwatch(\"__count__\")) && 0);");
tryItOut("/*infloop*/while((<x><y/></x> ? @foo : <y><z/></y>)++){yield window; }\nif(<x><y/></x>) { if ( /x/ ) {gc() }} else var __proto__ = this, constructor = <x/>;\n");
tryItOut("/*for..in*/for(__proto__ = function  __iterator__ () { return <><x><y/></x></> }  in  /x/g .isPrototypeOf(<y><z/></y>)) {\twhile(( /x/ ) && 0)export *;{} }");
tryItOut("let __count__, __iterator__; const prop;");
tryItOut("L: {gc()\n/*infloop*/for(let [, , ({ __iterator__: __noSuchMethod__, __parent__: __iterator__ }), ] = <><x><y/></x></>['constructor']|=(constructor = __iterator__); (<><x><y/></x></> /= 'fafafa'.replace(/a/g, (3.141592653589793).__defineSetter__)); (prop = [,,z1])) {return; } }");
tryItOut("if(*::* === constructor += new Function()) {let prototype = [,,], __noSuchMethod__ = __parent__; } else  if (('haha'.split)( '' )) {constructor = __iterator__, __noSuchMethod__ = <x><y/></x>; } else \nyield; const __noSuchMethod__;");
tryItOut("if(window) { if ((__iterator__)) {const __parent__ = false, constructor = <x><y/></x>; } else {null;;\n\n }}");
tryItOut("M:if(<bbb xmlns:ccc=\"__proto__.__count__ setter= function (__count__, __proto__)+(-1) .. <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>) {do export prop; while((<x/>) && 0); } else  if ( /= 4.) return; else L: {yield (function ([y]) { })(); }");
tryItOut("for(let y in []);\nif(((({}).hasOwnProperty)())) ([,,z1]); else  if (__iterator__.\t__proto__) if(0.1) { if (<><x><y/></x></>) function  prototype (constructor) { return @foo } } else {{}{} }\n");
tryItOut("try { throw <x><y/></x>; } finally { yield; } ");
tryItOut("/*for..in*/for(let constructor in ((({}).hasOwnProperty)((undefined.eval(#1=[<><x><y/></x></>]).constructor = *::*)))){throw  '' ; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/for(var [] = prototype.valueOf(\"number\"); __count__ :: 033\n; this.zzz.zzz -  /* Comment */__parent__)  const __parent__;");
tryItOut("if(undefined) { if (undefined) yield prototype; else __proto__;}");
tryItOut("this.zzz.zzz;");
tryItOut("if(prototype = this.zzz.zzz) {gc } else {L:with(undefined){{export __count__;export *; }; }let __iterator__; }");
tryItOut("throw __iterator__;");
tryItOut(";");
tryItOut("{L: export __parent__; }");
tryItOut("if( '' ) {gc() } else {gc()(<x><y/></x>); }");
tryItOut("\f__iterator__ = *::*, __parent__\n");
tryItOut("{throw <><x><y/></x></>; }");
tryItOut("L:while(((({ __count__: __iterator__ }) = __noSuchMethod__ > __iterator__, x::__proto__ = (-0).isPrototypeOf( \"\" ))) && 0)\t{; }");
tryItOut("/*infloop*/L:for(var __proto__ = *::* |= false; ({}).hasOwnProperty; prop = <> </>) export window\n");
tryItOut("const __parent__ = __noSuchMethod__, x::__iterator__ = __noSuchMethod__;gc()");
tryItOut("/*infloop*/for(([15,16,17,18].map((function (__proto__, __count__) { var __noSuchMethod__ = this, prop; } ).call, @foo)).__defineSetter__(\"__iterator__\", <><x><y/></x></>++); __iterator__ = __count__.(({}).__lookupGetter__);  /* Comment */<x><y/></x> / ({prop: <><x><y/></x></>})--) \f{continue L; }");
tryItOut("L:if(<bbb xmlns:\tccc=\"(new  >>= (this.eval(__noSuchMethod__: ( /x/  *= false)))[])\"><ccc:eee></ccc:eee></bbb>) with({prototype: [,]})yield {}; else  if (<><x><y/></x></>.__defineGetter__(\"__parent__\", gc) % <x><y/></x> ?  /x/g  : <><x><y/></x></>.__lookupGetter__(\"prop\")) ; else {}");
tryItOut("let (__iterator__ = throw window) { yield\n }");
tryItOut("yield;");
tryItOut("export __iterator__;\nthrow <x><y/></x>;\n");
tryItOut("{throw #3={a:#3#}; }");
tryItOut("with( /x/g  <<= <x/>--)with({__proto__: <x><y/></x>})yield;");
tryItOut("/*infloop*/L:while((eval(\"prop = <y><z/></y>\",  /* Comment */(<x><y/></x>)(5.0000000000000000000000, function::__noSuchMethod__).__defineSetter__(\"prototype\", (new Function(\"yield;\"))))))this;");
tryItOut("if((prototype)(false[1e4])) \t{export \t*;export *; } else {export *; }");
tryItOut("with(([15,16,17,18].sort(/a/gi, window.unwatch(\"__count__\") <<= constructor /= 1e-81)))/*for..in*/M:for(var [prototype, __count__] = [1] in [1,,]) export *;");
tryItOut("Function");
tryItOut("/*infloop*/for(let ({ yield: [, \t], __count__: [] }) = -3/0; (true()); (3/0 * null).__parent__) {{}export *; }");
tryItOut("");
tryItOut("return");
tryItOut(";");
tryItOut("var prototype = false\n");
tryItOut("L:do {/*infloop*/for(const constructor = <x><y/></x>;  \"\" ; <x><y/></x>) [,,z1];let __noSuchMethod__ = @foo; } while(((<y><z/></y> ^ eval(\"0/0\", @foo)[constructor = 5.0000000000000000000000])) && 0);/*for..in*/for(const prototype =  '' [*] in <> { yield ({a1:1}) } </>) (true);");
tryItOut("with(5.0000000000000000000000.){export __proto__; }");
tryItOut("\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in [[]]) return {};");
tryItOut("\fM:switch(((<x><y/></x>).watch(<x/>, <><x><y/></x></>).__defineGetter__(\"__iterator__\", function(y) { yield y; let function::constructor;; yield y; }).isPrototypeOf(((__noSuchMethod__ >= null))[(p={}, (p.z = *)())]))) { default: break; case 6: return (prototype = * >>= RangeError(__parent__, prototype));break;  }");
tryItOut("throw prototype;");
tryItOut("/*infloop*/for((#0=({__noSuchMethod__: [,,]}) >>> ); <y><z/></y>.__defineSetter__(\"constructor\", this); (yield <x/> |= (eval(\"(<x><y/></x>);\", *)))) {(__proto__);switch(__parent__) { case 2: return;break; case 7:  } }");
tryItOut("if(<x><y/></x>) {<x/>; } else {__count__, __noSuchMethod__;; }");
tryItOut("/*infloop*/while((4.--)){yield 1.2e3;/*for..in*/for(var [__parent__, prop] = <x><y/></x> in <x/>) yield window; }M:if(eval(\"L:if( '' ) { if (3) (function ([y]) { })(); else export prop;}\", -undefined)) {return <><x><y/></x></>;(__count__); } else  if ((function ([y]) { })() < 0.1) {export *; }");
tryItOut("let (prototype, __noSuchMethod__) { if(([<><x><y/></x></>].filter(function(q) { return q; }))) { if ((this.zzz.zzz)) {throw 033;;export *; } else function(q) { return q; }} }");
tryItOut("prop = __proto__;");
tryItOut("constructor = prop;");
tryItOut("with({}) { try { try { let(__parent__ = {}) { continue ; } catch(constructor) { return; } finally { __parent__ = prototype; }  } catch(__noSuchMethod__ if (__iterator__ = #1=[window])) { yield ( /* Comment */[z1,,]) ? (<y><z/></y>/*\n*/ if (<><x><y/></x></>)) :  \"\" .valueOf(\"number\"); } catch(let) { /*infloop*/M:for(prototype = prototype; null; <x/>) {constructor } }  } ");
tryItOut("{{ }const ({ constructor: prototype, __parent__: [] }) = (prop = __proto__), __iterator__; }");
tryItOut("switch((({ set __parent__  /x/g  (__noSuchMethod__) { return <x/>; }  }).throw(this.zzz.zzz))) { case (p={}, (p.z = <x><y/></x>)()): let (__count__ = prop) { yield <x/>; }default: break; case 3: break M; }");
tryItOut("/*infloop*/do {({a2:z2});__count__ } while(constructor);");
tryItOut("/*for..in*/for(const prototype in (('haha'.split)(*::*)))");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/M:for(var __parent__; ({__count__: <><x><y/></x></>[<x><y/></x>]}); function ([y]) { }) if(return) -0");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("with({}) { {} } ");
tryItOut("with(<x/>)return  /x/g ;export __noSuchMethod__;");
tryItOut("/*for..in*/for(var ({ __noSuchMethod__: ({ prop: __count__, __noSuchMethod__: __noSuchMethod__ }) }) in (function(q) { return q; })) yield;");
tryItOut("/*infloop*/M:for((*::*.unwatch(\"__iterator__\")); (p={}, (p.z = 1e-81)()); (constructor.isPrototypeOf( /x/g ))) return arguments;");
tryItOut("__proto__ = __proto__;");
tryItOut("let __noSuchMethod__, __iterator__;");
tryItOut("\n");
tryItOut("if(prop%=@foo++) { if ((function(q) { return q; })(({__noSuchMethod__: this}),  '' )) {{} }} else ;");
tryItOut("let(constructor, __proto__ =  \"\" ) ((function(){export prop;})());");
tryItOut("do {} while(((this.__defineGetter__(\"__noSuchMethod__\", function (__count__, prototype) { yield ({a2:z2}) instanceof -0 } )\t)) && 0);");
tryItOut("with(__iterator__){gc()return; }");
tryItOut("do /*infloop*/L:for(const __parent__ = true; this;  '' ) {export constructor;\freturn; } while(((*::*)[[z1]]) && 0);");
tryItOut("return;");
tryItOut("with(this.__defineSetter__(\"__parent__\", set))return void  /x/ ;");
tryItOut("switch(true.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)) { case 6: /*for..in*/L:for(let __parent__ = (yield <y><z/></y> <= <x><y/></x>) in <y><z/></y>) {/*for..in*/M:for(let __iterator__ in [z1,,]) {; } }case yield Date(@foo, prop): (*);break; default: if( /x/ ) var __count__ = __proto__; else  if (<><x><y/></x></>) false.eval(1e-81) else const constructor,  switch ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in  /x/g ) {}");
tryItOut("/*infloop*/do ");
tryItOut("if(Number(new ([])(<x><y/></x>, 5.0000000000000000000000), window)) {const constructor = *::*;Math.pow } else  if (-0) var __proto__ = this, __proto__ = this\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __proto__.constructor in undefined) do return #3={a:#3#}; while((new Error()--) && 0);");
tryItOut("M:if(__proto__) {/*infloop*/M:for(var __proto__ = __iterator__ = <x/>; * /= <x><y/></x>; __proto__ = @foo) /*for..in*/L:for(const prototype in this) yield; } else  if ( /* Comment */[*] + <x><y/></x> *= undefined(<x><y/></x>(), -0)) L:with((#1=({prop: prototype%=<x><y/></x>}))){(({a2:z2})); } else {with({prototype: constructor = null})/*for..in*/for(var __count__ = __iterator__ in __iterator__) {; } }");
tryItOut("(new Array(<><x><y/></x></>, <y><z/></y>))\n/*infloop*/for(__count__; (<><x><y/></x></>);  /x/g ) {__proto__ = 1e+81, prototype; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = \rthis.zzz.zzz .@ * in eval(\"( /* Comment */ \\\"\\\" ) *= export prototype;.constructor\", <><bbb xmlns=\"((new Function(\"constructor = true\"))).call(<x/>, <><x><y/></x></>,  \"\" )\">yyy</bbb></>)) {yield; }");
tryItOut("/*for..in*/L:for(__count__.__noSuchMethod__ in prototype) var __proto__;");
tryItOut(";\n/*for..in*/for(const \f__count__ in ((function(q) { return q; })(#1#))){{}export *; }\n\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__ in __count__, prop +=  '' ) (<x><y/><\n/x>)\n'haha'.split");
tryItOut("var __iterator__, __iterator__;");
tryItOut("\texport prop; const __noSuchMethod__;");
tryItOut("export __count__;");
tryItOut("yield 0(++*::*);");
tryItOut("{[1,2,3,4].mapthrow true; }");
tryItOut("throw __iterator__;");
tryItOut("return\n");
tryItOut("/*infloop*/M:while(null.hasOwnProperty(\"__noSuchMethod__\"))return;");
tryItOut("with(({constructor: false }))new ([11,12,13,14].map) .@ *::* && ({a2:z2}), (0/0 for (__count__ in <x><y/></x>))");
tryItOut("if(({__noSuchMethod__: *::* })) ( \"\" );");
tryItOut(" if ((__noSuchMethod__ + (<x><y/></x> ? <><x><y/></x></> :  '' )))");
tryItOut("while((([, __proto__] = ({ prop: __parent__, prop: constructor }))) && 0){/*for..in*/L:for(__count__ in undefined) if(__noSuchMethod__) {gcreturn 0; } else  if (*::*) const prototype = <y><z/></y>, constructor; else ((<y><z/></y>).watch).applygc() }");
tryItOut("/*for..in*/for(let (prop = 0x99.* -=  /* Comment */[[]].unwatch(\"__count__\")) in (([1,2,3,4].slice)((([15,16,17,18].filter(function(y) { yield y; let prop, constructor = *;; yield y; }, ({a2:z2}))).watch(\"__noSuchMethod__\", function(q) { return q; }))))){/*infloop*/M:do {prop(<x/>); } while(( /* Comment */(\nfunction ([y]) { })));try { return [[]]; } finally { throw [,,z1]; }  }");
tryItOut("/*infloop*/do {return <x><y/></x>; } while( /* Comment */<x/>);");
tryItOut("/*for..in*/for(let prototype = constructor.__lookupSetter__(\"__proto__\") in @foo) {continue ; }");
tryItOut("yield <x/>;");
tryItOut("if(<x/> || <x><y/></x>) {(({a2:z2}));yield; } else  if ((<xxx {__proto__}={__parent__} />.([15,16,17,18].filter\t(/a/gi, 3.141592653589793)))) {yield; }");
tryItOut("/*for..in*/for(let __iterator__ = __iterator__.prop = <x><y/>\f</x>.__lookupGetter__(\"__parent__\") in <><x><y/></x></>) {}");
tryItOut("with({prop: (new Function).call(<y><z/></y>, )})(__noSuchMethod__);");
tryItOut("if((prototype.\fconstructor =  /x/g .@foo)) { if ((function  prototype (prop) { yield <y><z/></y> } )()) export *; else (<y><z/></y>);}");
tryItOut("L: L:if(function(id) { return id }) ; else  if (prop) {; } else throw <><x><y/></x></>;return;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (({a2:z2}) *= -0)) {let prototype = null, __iterator__; }");
tryItOut("/*infloop*/for([z1,,].__count__; window(false); [function(id) { return id } if (__count__)]) {yield; }");
tryItOut("yield;");
tryItOut("/*infloop*/L:for((((prototype.__lookupGetter__(\"__proto__\"))).apply)(<x><y/></x>['constructor']); <xxx {__iterator__}={<x/>} /> << (yield *::*.__noSuchMethod__); [11,12,13,14].sort) {this.zzz.zzz; }");
tryItOut("/*infloop*/do {with({prop: <></>})export prototype;function () { return arguments } \n(true); } while((uneval(__noSuchMethod__.__iterator__))); const prop;");
tryItOut(";");
tryItOut("/*for..in*/for(let __count__ = (\ndelete [11,12,13,14].filter) in ((<x/> |= <><x><y/></x></>))((<x><y/></x>.(this)))) {/*for..in*/for(let (__proto__) in @foo) {gc() }/*for..in*/for(const [constructor, __parent__] = undefined.yoyo([__iterator__ for (__noSuchMethod__ in  '' ) for each (constructor in #1=[#1#])]) in (prototype.valueOf(\"number\"))) /*infloop*/M:for(eval(\"yield this;\", 3.141592653589793); [11,12,13,14].filter; null .@x::  \"\" ) yield true; }");
tryItOut("return;");
tryItOut("/*infloop*/L:for(var [({ __iterator__: ({ __iterator__: ({ __proto__: [__parent__], __count__: ({ prototype: __noSuchMethod__, prop: __parent__ }) }), prop<>prototype = constructor</>:  }), function::__iterator__: ({ prototype: ({ constructor: prop }), constructor: ({ __iterator__: ({ __noSuchMethod__: __parent__, __proto__: constructor }) }) }) }), ({ __parent__: __parent__, __parent__: [, [__iterator__, , ], , , ] }), , ({ prop: ({ __count__: __iterator__ }) })] = +constructor = ({a2:z2})//h\n.valueOf(\"number\"); __iterator__ & <x><y/></x>; (window.__defineGetter__(\"prop\", undefined) != (__proto__.prototype = @foo)())) ( /x/g .eval((-0))){gc() }");
