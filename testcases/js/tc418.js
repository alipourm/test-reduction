tryItOut("/*for..in*/M:for(const __count__ in window) {continue M;break ; }");
tryItOut("if([z1]-- += <><x><y/></x></>) /*for..in*/for(let __parent__ = <x><y/></x> in null) gc() else  if (delete  '' ) const , __iterator__; else break \t\n{return;const __count__, prototype = 1e4; }");
tryItOut("if(constructor) yield; else  if (*) yield;");
tryItOut("if(__count__.__parent__ = [({ __proto__: prop }), ({ constructor: __proto__ }), __noSuchMethod__, ({ __iterator__: __noSuchMethod__ })] = [({ __parent__: __parent__, prop: prototype })] %= (window.__defineGetter__(\"__noSuchMethod__\", eval))--) {/*for..in*/for(let <><x><y/></x></> =  /x/g  in window) yield; }");
tryItOut("/*infloop*/for(var __iterator__; new Boolean() && (.2.isPrototypeOf(window)); <x><y/></x>.watch(\"prototype\", gc)) Math.pow");
tryItOut("with({}) { export *; } ");
tryItOut("if(((#1=[#1#]).watch)(0/0)) { if ([__noSuchMethod__ = <><x><y/></x></>, __count__ =  '' ]) { \"\" ;break ; } else {return undefined;gc() }}");
tryItOut("{ }");
tryItOut("/*for..in*/for(let prop in  /* Comment */ \"\" ) {let(__noSuchMethod__) ((function(){let(__parent__ =  /x/ .eval(#1#)) ((function(){for(let y in []);})());})());if(*::*) {/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x><y/></x>) return (-0); } else  if ( /* Comment */ /* Comment */(prototype = x::__count__)) {while((( \"\"  |= *)) && 0){let prototype;__noSuchMethod__; } } }");
tryItOut("{if(<><x><y/></x></>) { if (window)  else {yield <x><y/></x>;const __parent__, prop; }} }");
tryItOut("L:do {{} } while(((this.__defineSetter__(\"__iterator__\", 'haha'.split))) && 0);");
tryItOut("if(#1#) { if (3/0) {let __proto__ = ({}); { return __parent__ }  } else yield;}\n__noSuchMethod__ = this, __noSuchMethod__ = <><x><y/></x></>;\n");
tryItOut("with({__parent__: ( \"\" [true]).__lookupSetter__\f(\"(__parent__.constructor = ([__parent__]))\")}){M:switch(<><x><y/></x></>) { default: yield;break; case 1: yield; } }");
tryItOut("function () { export *; } {}");
tryItOut("L: return;");
tryItOut("L: return;");
tryItOut("let (__proto__) { /*for..in*/for(__proto__ in ((1e81)(__iterator__)))export prototype; }");
tryItOut("{return; }\n");
tryItOut("with({constructor: 0.1(<x><y/></x>,  \"\" )}){/*infloop*/for(let __proto__; false; undefined) gc }");
tryItOut("switch(window) { default: case [15,16,17,18].filter(((prop).watch).apply, __noSuchMethod__ =  '' ): break; case 5: break; break;  }");
tryItOut("export __proto__");
tryItOut("switch(<y><z/></y>) { case 3: break; default: break; break;  }");
tryItOut("if(yield __parent__) { if ([11,12,13,14].some.__lookupSetter__(\"__parent__\")) /*for..in*/for(__parent__ in ((this)(__noSuchMethod__ = [[]])))throw <x><y/></x> else /*infloop*/for(const __iterator__; (033 in __iterator__); window &= <x><y/></x>) throw <x><y/></x\t>;}");
tryItOut("/*infloop*/L:while(window.isPrototypeOf(033) != __count__()){/*infloop*/for(const __parent__; (null.__iterator__ = prop);  /* Comment */arguments) return;break ; }");
tryItOut("gc()\n\n\nconst Function, __proto__;\n");
tryItOut("let __noSuchMethod__ = <><x><y/></x></>, prototype = [[]]\n{}");
tryItOut("/*for..in*/for([constructor, __proto__] = (yield window.valueOf(\"number\")) in prop.__proto__ setter= [1,2,3,4].map) {yield;yield [window.__defineGetter__(\"__count__\", ({}).__lookupGetter__) for ((__iterator__) in  \"\" ) for each (__proto__ in -0)]; }");
tryItOut("/*for..in*/for(var __iterator__, prop in ((gc)(window .. __noSuchMethod__))\t){; }");
tryItOut("L:if() null; else  if (<><x><y/></x></>) {__parent__;export *; }(<><x><y/></x></>);");
tryItOut("const __iterator__, let = *;");
tryItOut("let(prop = (prop = 3/0), ({ __count__: prop }) = ({<> </> })) ((function(){this.zzz.zzz;})());");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (-0)) var __noSuchMethod__; }");
tryItOut("yield;try { for(let y in []); } catch(__count__) {  } ");
tryItOut("(0);\nreturn\n");
tryItOut("/*infloop*/do {(1 for (x in [])); } while(yield <><x><y/></x></>);");
tryItOut("/*for..in*/for(let constructor = (({}).hasOwnProperty)((eval)(0, -0)) in (constructor) <  \"\" ) {return __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("{( '' );break L; }");
tryItOut("let (function::prop) { yield;\nlet constructor;\n }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in (p={}, (p.z = this)())) {} }");
tryItOut("return this.__defineSetter__(\"__count__\", (eval).call);");
tryItOut("L:with(try { {} } catch(constructor if <x/>) { const __iterator__ = 0x99; } catch(__parent__) { let prototype, __noSuchMethod__; } ){function  __count__ (try { ( '' ); } catch(prototype if (function(){;})()) { export *; } catch(constructor if (function(){continue ;})()) { yield; } catch(__iterator__ if <x><y/></x>) { (new Function(\"export function::prop;\")) } ) { yield <><x><y/></x></> }  }");
tryItOut("throw prototype;");
tryItOut("const ({ __count__: __iterator__ }) = 3/0.valueOf(\"number\"), ({ __count__: __proto__, constructor: __noSuchMethod__ }) = 1e81\n([<><x><y/></x></>].filter([1,2,3,4].map));");
tryItOut("M:if(<xxx {__count__}={yield ({}).hasOwnProperty(<><x\f><y/></x></>)} /> for each (prototype in ({ prop: constructor, __iterator__: __parent__ }) = __iterator__)) {if(__count__) { if (({})) } else {}let prototype; }");
tryItOut("if(({})) {*; } else  if ( '' ) {gc()throw <><x><y/></x></>; } else set =  /x/g , prototype = <><x><y/></x></>;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = window in (prototype = (-0))) {let __iterator__ = __count__, __iterator__ = false; } const __count__;");
tryItOut("/*for..in*/for(let constructor = window in <x><y/></x>) gc() const constructor;");
tryItOut("switch((\f<x><y/></x>\t @ #1#)) { default: ; }");
tryItOut("if((<y><z/></y>)) \n{ if (([this.__defineSetter__(\"__iterator__\", (-0))\f]) for (__parent__(true) in this)) {const __count__ = __noSuchMethod__; } else {var __proto__ = 0, prototype;break M; }}");
tryItOut("/*infloop*/L:for(__proto__ + *; new function  x::__proto__ () { export __iterator__; } (); this.__defineSetter__(\"constructor\", eval\f)\f) {<x><y/></x>;{} }\n");
tryItOut("var prototype = <x><y/></x>;");
tryItOut("{try { (<x><y/></x>); } finally { window; }  }");
tryItOut("[1,2,3,4].slice");
tryItOut("do {__count__ = __iterator__, <x><y/></x>;(*); const __count__; } while((new (function  __noSuchMethod__ (__count__) { return -0 } )(true, window)) && 0);");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in (window .@*:: ((prototype = window) > <><x><y/></x></> %= <><x><y/></x></>))) {while(((<><\tx><y/></x></>.eval(0.1))(window.__count__ = <x/>,  \"\" )) && 0){throw <x><y/></x>; }{} }");
tryItOut("L:if(<><x\t><y/></x></>) { if (true()) {let prototype = [,,], prototype =  '' ;let function::__proto__; }} else {export *; }");
tryItOut("let (__parent__ = true) {  /x/ ; }");
tryItOut("/*for..in*/for(((Number(window, *::*).unwatch(\"__noSuchMethod__\")))( ''  :: @foo) in (((1 for (x in [])))(new ((1 for (x in [])))(eval(\"window\", <><x><y/></x></>), (yield *::*))))){if( /x/g ) <x><y/></x>; else  if (prop) window; }");
tryItOut("/*infloop*/for(let function::__count__; #2=({__noSuchMethod__: undefined.watch(\"prop\", new Function)})++; ()[<x><y/></x>] %= <><x><y/></x></> / null) /*infloop*/for(let __parent__; (function ([y]) { })(); <><x><y/></x></>) @foo;\nif(__count__.__iterator__ getter= ( \"\" )[this]) { if (([[z1] >> [1] + () for (__proto__ in <y><z/></y>.__defineSetter__(\"__parent__\", gc))])) var prop = #3={a:#3#}, __parent__ = -3/0; else /*infloop*/while(__noSuchMethod__.isPrototypeOf(({a2:z2})))export *;}\n");
tryItOut("/*infloop*/L:for(const __count__, __proto__ = window.propertyIsEnumerable(\"prototype\"); 1.2e3; ('haha'.split).call(@foo, ({}))) {export *;var __count__, constructor =  /x/ ; }");
tryItOut("__parent__(this);");
tryItOut("with({}) try { undefined; } catch(constructor) { export prop; } ");
tryItOut("if(this.zzz.zzz) {prototype;break ; } else  if ((yield ({ get prop(constructor, __iterator__) { continue ; } ,  set prop(__parent__, __parent__) { return <x><y/></x> }  }))) export __parent__; else return;");
tryItOut("/*infloop*/for(var __proto__ = ( /x/  > 3); \t<x><y/></x>.__lookupSetter__(\"constructor\"); undefined @ true) {export ;export *; }");
tryItOut("yield  /x/ ; const __parent__;");
tryItOut("with({prop: \f[ '' ]}){export *; }\nfunction  __count__ (__proto__, __noSuchMethod__) { yield <x><y/></x> } \n");
tryItOut("with({__parent__: constructor})return  \"\" ;\n /x/g ;\n");
tryItOut("{Math.powexport *; }");
tryItOut("prototype");
tryItOut("return (this.prototype = 0/0 >>= (void <y><z/></y>));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in this) const prototype = 3/0;\n/*infloop*/for(var prop = <x><y/></x>; *::*; <><x><y/></x></>\n) {throw <x/>;var __iterator__ = true; }\n");
tryItOut("");
tryItOut("/*infloop*/for(const __parent__ = false; __iterator__; this) {export *; }");
tryItOut("/*for..in*/for(let prototype in (true.watch(\"__iterator__\", Math.sin)).valueOf(\"number\")) {let __parent__ = this, __proto__; }");
tryItOut("try { for(let y in []); } finally { __count__ = prop; } ");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("/*for..in*/for(let __parent__.__iterator__ in <x><y/></x>) return  /x/g ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__.__iterator__ in this.__defineSetter__(\"constructor\", Function)) \t{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in yield __proto__) (null);");
tryItOut("return;");
tryItOut("/*infloop*/L:while((( /* Comment */this.__defineSetter__(\"__count__\", 'haha'.split)).yoyo(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)))/*for..in*/for(var [__count__, __proto__] = ((prop = ({a2:z2})) || ([this.__defineSetter__(\"__count__\", function  __noSuchMethod__ (prototype, prop)<><x><y/></x></>) for (__iterator__ in prototype)\t if (<x><y/></x>)])) in [*Function].watch(\"constructor\", Math.sin)) with({__iterator__: this})");
tryItOut("if(*) { if (__proto__) return;} else { /x/ yield; }");
tryItOut("/*infloop*/for(const return; = <x><y/></x>; (-0); __noSuchMethod__) {let __count__ = [1], prop = <y><z/></y>;yield; }");
tryItOut("while((<y><z/></y>) && 0){yield <x/>; }");
tryItOut("if((p={}, (p.z = __count__)())) {throw <y><z/></y>; } else {yield <><x><y/></x></>;yield __proto__; } const constructor;");
tryItOut("{yield;gc() }");
tryItOut("/*infloop*/for(let __count__ = (/a/gi).call(constructor, ); yield this; [4. if (<x><y/></x>)]) with({__proto__: [,]}){export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in [11,12,13,14].some) yield;");
tryItOut("L:if([15,16,17,18].map([1,2,3,4].map, (yield (([z1,,])))\n)) {if(([15,16,17,18].sort(({}).__lookupGetter__, <x/>))) { if (window * <x><y/></x>) {return 0.1; } else {(new Function)( \"\" ,  /x/ ) }}if(#2= '' ) {{const prototype =  /x/g , __noSuchMethod__; /x/ ; } } }");
tryItOut("yield <><x><y/></x></>\n\n");
tryItOut("throw prototype;");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, prop] = (__count__ =  /x/g ) in new Iterator(false).__iterator__) {export prop;; }");
tryItOut("/*infloop*/for(setter; [[]].constructor\t = <x/> /= ([__parent__]\r); *::*) {M\t:switch((function  constructor ()<><x><y/></x></>)(*::*) ? Exception() : [<x><y/></x>.(<><x><y/></x></>)].some(null)) { case 3: ;break;  } }");
tryItOut("with({}) yield <y><z/></y>;");
tryItOut("with(window)yield <><x><y/></x></>\n");
tryItOut("/*infloop*/for(var __noSuchMethod__; (this.__defineSetter__(\"prop\", <><x><y/></x></>)); __noSuchMethod__.(<><x><y/></x></>)) if((window\n)) {;(({a1:1})); }");
tryItOut("let __count__ = <y><z/></y>;");
tryItOut("/*infloop*/for((({prototype getter: ({}) })); constructor = function::constructor; null) if(__count__ = __parent__) continue ; else {__proto__return <\tx><y/></x>; }");
tryItOut("/*infloop*/L:while(while((-3/0 .. <x/> | (Math.pow).call(__proto__,  /x/g ,  \"\" )) && 0){/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = @foo in @foo) {(<y><z/></y>);export __parent__; }(@foo); })with((__iterator__.__parent__ = null.__defineSetter__(\"__proto__\", <y><z/></y>)))prop, constructor = 0;");
tryItOut("do  while((__proto__) && 0);");
tryItOut("if([11,12,13,14].some) { if (0) {var __count__, prop = [,,];export *; } else {{} }}\nyield;/*infloop*/do __proto__ while(<><x><y/></x></>)\n/*for..in*/for(let __parent__ in ((Math.pow)(033))){let __proto__ = 3; }");
tryItOut("/*infloop*/for(var ({ prop: __noSuchMethod__ }) = ; \t(window.prototype = {}.watch(\"__iterator__\", function(q) { return q; })); this.__defineGetter__(\"prototype\", eval)) {yield; }");
tryItOut("{with({}) { __proto__ = __noSuchMethod__; }  }");
tryItOut("M:with({prop: [,,z1] >>= <x><y/></x>}){__parent__, __iterator__;(<y><z/></y>); }");
tryItOut("for(let y in [5,6,7,8]) yield prop: window &=  /x/ ;");
tryItOut("if(((__parent__.__iterator__.throw(__parent__ = #1#)) == continue L;)) { if (window == __noSuchMethod__) return  /x/g ;} else {function  prototype (__count__, __noSuchMethod__) { return null }  }");
tryItOut("/*infloop*/do {let (__count__, __count__) { ({ __noSuchMethod__: ({ __parent__: __count__, __proto__: __noSuchMethod__ }), __count__: ({ __proto__: __parent__ }) }) } } while( /x/ ()); const __noSuchMethod__;");
tryItOut("<x><y/></x>;");
tryItOut("with(#1=[<><x><y/></x></>]){prop; }");
tryItOut("/*for..in*/for(var prototype in ((new Function)(@foo))){yield; }\nconst __iterator__ = undefined, __proto__ = <x><y/></x>;");
tryItOut("while((this.__defineGetter__(\"prop\", <><x><y/></x></>;)) && 0){/*infloop*/do {return *; } while((function::__parent__ = undefined));(((<x><y/></x>.eval(constructor)))[(* | prop)]); }");
tryItOut("{with({__proto__: eval(\"L:if(*::*) { if (@foo) break ;} else const constructor, prototype;\", ({}).isPrototypeOf(__proto__))}){throw  /x/g ;//h\n; } }");
tryItOut("if(prop.__parent__ getter= (undefined).watch\f.__parent__ = (* =  '' )) {/*for..in*/for(__iterator__ in <x/>) {(__iterator__);' } }");
tryItOut("L:if((({ get __proto__(__noSuchMethod__) {  /x/g ; }  }))) yield prop.eval(<x><y/></x>);");
tryItOut("L:while(((this.__defineGetter__(\"constructor\", /a/gi))) && 0){if(false) {function (constructor, __count__)__proto__ }\n{}\n }");
tryItOut("if(([({ __parent__: __count__ }), [({ __parent__:  /x/ , __proto__: __noSuchMethod__ }), , , ({ __noSuchMethod__: prop, __parent__: prop }), ({ ({ constructor: __count__ }): constructor })], [[__noSuchMethod__, __iterator__], ({ __noSuchMethod__: __count__ }), , prototype], ] = Boolean(<x/>, <x><y/></x>))) yield <y><z/></y>; else  if (__proto__ =  '' ) {throw __iterator__;export constructor; }");
tryItOut("switch(prop\f%=<><x><y/></x></>.valueOf(\"number\")) { default: break; yield <><x><y/></x></>;\n(prototype);\n\n;break; break; /*for..in*/for(let delete in ((Math.sin)(((uneval( )))))){yield <y><z/></y>; }break; gc()case export *: break; case <y><z/></y>: export *;break;  }");
tryItOut("with({}) for(let y in []);");
tryItOut("\n");
tryItOut("/*for..in*/for(var __proto__ in ([@foo].sort(null) != __iterator__.__defineSetter__(\"__proto__\", [1,2,3,4].map))) {L: {throw <y><z/></y>;return ({a1:1})\n; } }");
tryItOut("for(let y in []);");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) return <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>;");
tryItOut("let (prototype = (__count__.(4..eval( '' )))[<><xxx>{prototype}</xxx></>.__count__ = ], constructor = this.__defineSetter__(\"__proto__\", Math.pow)) { switch([z1,,]) { case constructor = (yield <y><z/></y>) * eval(\"((p={}, (p.z = <x/>[3])()))\", (#1=[#1#][this]) >>> (-0)): {let prototype = 0.1, constructor; }break; default: case 7: export *; } }");
tryItOut("throw <x><y/></x>\n");
tryItOut("/*for..in*/for(let [prop, __parent__] = (false).call(__noSuchMethod__, )(({ set <xxx>{__iterator__}</xxx> __count__ (__iterator__, __count__) { yield prop = *\f } , prop: [15,16,17,18].filter(<y><z/></y>, window) })) in ((__noSuchMethod__ for (prototype in *::*)))) return;");
tryItOut("if(*.throw(<><x><y/></x></>) !== delete window) { if (prototype.((__count__ =  /x/g ))) {return;return; } else ((({}).hasOwnProperty).apply).apply}");
tryItOut("prop = __noSuchMethod__;");
tryItOut("M:do {} while(((__proto__ = (<y><z/></y>\n))) && 0);");
tryItOut("with(this.zzz.zzz)return <x><y/></x>;");
tryItOut("/*for..in*/L:for([prop, __parent__] = (constructor = (constructor|=window)).propertyIsEnumerable(\"__count__\") in {}.__defineGetter__(\"__noSuchMethod__\", (function  prop ()<><x><y/></x></>).call)) gc()");
tryItOut("let(__parent__) { return ({__parent__ getter: ((-1)).__defineSetter__, set: (-constructor) });");
tryItOut("while((prototype ? __proto__ : <><x><y/></x></>) && 0)if(@foo) ; else  if (<x/>) __parent__ = , prototype;");
tryItOut("with({}) { with({}) { throw <><x><y/></x></>; }  } ");
tryItOut("/*for..in*/for([prototype, constructor] = __parent__.(! \"\" .__defineSetter__(\"__count__\", [1,2,3,4].map)) in @foo) while(((window)()) && 0){export __iterator__\f; }");
tryItOut("M:with({__count__: ({ __proto__: (-3/0)(__noSuchMethod__: *) }) = (({<><><x/></></>: typeof <x><y/></x>}))}){if(prop) {export prototype; } else  if (<x><y/></x>) ( /x/ ); }");
tryItOut("if(__proto__) let constructor; else var __count__ = <x/>;");
tryItOut("let ((__count__) = new RangeError(<><x><y/></x></>, {})) { /*infloop*/while(<x/>)constructor; }");
tryItOut("{<><x><y/></x></>;yield <x><y/></x>; }");
tryItOut("L: with(@foo){}");
tryItOut("/*for..in*/for(const <zzz>RangeError((<x/>\n))</zzz> in (((eval(\"<x/>\", @foo) for (__noSuchMethod__ in __count__) for ((__parent__) in  /x/ ) if (<y><z/></y>)))((__count__.__proto__ setter=  \"\" ) >>> ([true].sort(function  __proto__ (__noSuchMethod__)undefined))))){yield; }");
tryItOut("L:with( /x/g ){return <y><z/></y>;yield {}; }");
tryItOut("yield;");
tryItOut("if(3/0) [[]]; else  if (window) {export *; } else {yield (-1); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <><x><y/></x></>) {undefined; }");
tryItOut("L: {return; }");
tryItOut("let (__noSuchMethod__ = 1.3, constructor) { gc() }");
tryItOut("(<y><z/></y>/*\n*/['__proto__'] = window.__defineSetter__(\"__proto__\", *::*)), eval(\"yield;\",  /x/g ).@*");
tryItOut("__count__ = __count__;");
tryItOut("if(((__parent__ = false)(__parent__.(__noSuchMethod__), 1e81))) { if (this) M:switch(this.\t__defineSetter__(\"__parent__\", (yield <y><z/></y>).watch)) { default: break; case eval(\"new (\\nprop.yoyo(<><x><y/></x><\\n/>))(({a2:z2}))\", (this.__defineGetter__(\"prop\", null))): case 0: break;  } else {M:if(<y><z/></y>) var __count__ = prototype, default: const prototype = <><x><y/></x></>, __iterator__;break; ; else  if (@foo) yield  { return this } ; else let __iterator__;if(<x/>) export \r__noSuchMethod__; else const __noSuchMethod__; }}");
tryItOut("export *;");
tryItOut("/*for..in*/for(__iterator__ = new Function in (eval(\"{}\", <y><z/></y>))) return;");
tryItOut("L:if([11,12,13,14].sort.unwatch(\"__proto__\") , __noSuchMethod__ ? @foo : __proto__) if(<x><y/></x>) {<y><z/></y>;{} } else  if (<y><z/></y>) {( \"\" ); } else return; else  if (__proto__) let(__noSuchMethod__ = <><x><y/></x></>, prototype = <x><y/></x>) ((function(){(1 for (x in []))})()); else {if(constructor = 0/0, __proto__) return <><x><y/></x></>;yield; }");
tryItOut("/*infloop*/for(const  \"\" ; <><x><y/></x></>\f; [1]) prototype = __parent__;");
tryItOut("if(new Object(<><x><y/></x></>)) { if ([*].sort([1,2,3,4].map)) {}} else yield __count__;");
tryItOut("/*infloop*/while((undefined !== <x><y/></x>));");
tryItOut("/*infloop*/L:for(const [] = ({a1:1}).yoyo(<x/>); function(id) { return id }.throw(*::*); <><x><y/></x></> %= undefined) ;");
tryItOut("/*for..in*/for(const [__proto__, constructor] = __iterator__+=0.1 in (yield ({__proto__: <x><y/></x> });.__lookupSetter__(\"__iterator__\") >= __parent__ = <x><y/></x>.([,,z1]))) {//h\ngcreturn  /x/ ; const __count__; }");
tryItOut("/*for..in*/M:for(let [__proto__, __count__] = (<x><y/></x>.(<x/>)) in let (constructor, prop) (function::__parent__.__lookupGetter__(\"__count__\"))) ;");
tryItOut(";");
tryItOut("/*infloop*/for(var __count__ = @foo >= <x><y/></x>; new Function(<x><y/></x>, <y><z/></y>)() != <><x><y/></x></>.__defineGetter__(\"prototype\", ({}).hasOwnProperty); null) {M:if(<><>__proto__</></>) { if (0) {(({__parent__ getter: function  prop (__noSuchMethod__)0/0, __proto__ getter: __count__ })), [,] }} else M:if(<x><y/></x>) {; } undefined  }");
tryItOut("L:if(this ? <x><y/></x> : (-1) ? __count__ = true : false) { if ((__count__ = true)) {/*infloop*/while(yield this){yield __count__;const constructor = null, prototype; } } else {throw @foo; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\flet function::__iterator__ in  ''  === __count__) {; }");
tryItOut("L:switch(('fafafa'.replace(/a/g, [1,2,3,4].map) for each (<> </> in __count__ = __parent__) for each (__parent__ in <><x><y/></x></>) for each (__proto__ in *) for each (__noSuchMethod__ in constructor))) { default: break;  }");
tryItOut("{(3);throw window\n }");
tryItOut("(0/0);");
tryItOut("if(String(<y><z/></y>.hasOwnProperty(\"__proto__\"), 3)) {; } else  if (this.__defineGetter__(\"prototype\", function  constructor (__proto__, __parent__)<x><y/></x>).@foo) {yield window; } else ()(__parent__); }");
tryItOut("do return; while((<x/>) && 0);");
tryItOut("do {let __count__, prop = <><x><y/></x></>\n } while((__proto__ = new ((gc).apply).call(*::*)) && 0);");
tryItOut("while((<xxx {prototype}={({ set prototype __noSuchMethod__ () { yield <x/> :: this } , ({ __count__: ({ function::__count__: __proto__ }) }) = ({ prop: ({ prototype: constructor, constructor: prop }), __noSuchMethod__: constructor }): (throw <x><y/></x>) })} />) && 0){{} }");
tryItOut("(<y><z/></y>)\n\nthrow <x><y/></x>;\n");
tryItOut("prototype");
tryItOut("M:if(window) throw null;");
tryItOut("do /*for..in*/for(const prop = (typeof  \"\" .propertyIsEnumerable(\"__noSuchMethod__\")) in __iterator__) {export *; } while(((this.__defineGetter__(\"__iterator__\", <x/>).__lookupGetter__(\"__iterator__\"))) && 0);");
tryItOut("yield *::* == <><x><y/></x></>--;");
tryItOut("if(this.zzz.zzz) (*); else while((({a2:z2})) && 0){function  prop () { ; } this; }");
tryItOut("__proto__ = prop;");
tryItOut("/*for..in*/for(prop in ((Function)(this.__defineSetter__(\"__iterator__\", __parent__))));");
tryItOut("yield;");
tryItOut("if(new Object().*) { if (1.2e3 .@*:: this) do yield function ([y]) { }; while((constructor) && 0);} else if(({}).__lookupGetter__(4.) || __iterator__.isPrototypeOf(window)) { if ((([1,2,3,4].map)().isPrototypeOf(prototype) for (<y><z/></y>['__count__'] in <><x><y/></x></>) if ([,,z1]))) {__proto__ = <\fx><y/></x>, __parent__ =  '' ; } else {export __proto__; }}");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] = --({a1:1}) / this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; return true;; yield y; }) in  { (<><x><y/></x></>); } .__defineGetter__(\t\"__parent__\", [1,2,3,4].map)) this");
tryItOut("L: break ;");
tryItOut("yield new <x><y/></x>(({a2:z2}) >>= <x><y/></x>, <x/>);");
tryItOut("L: /*for..in*/for(let  in 3.141592653589793) {if( \"\" ) {gc()yield ({}); } else  if ([,]) yield; }");
tryItOut("/*infloop*/M:for(__count__; window; 0) return;");
tryItOut("return;\nexport prop\n\n");
tryItOut("/*for..in*/for(let let.prop in ((function  var __parent__; ()<><x><y/></x></>.*)(((__count__).watch)(<><x><\fy/></x></>, <y><z/></y>)))){/*infloop*/for(<><x><y/></x></>; <x/>; true) yield; }");
tryItOut("{yield; }");
tryItOut("/*infloop*/do {__iterator__, x::__noSuchMethod__ = __noSuchMethod__;export prototype; } while(this)");
tryItOut("(1 for (x in []))");
tryItOut("/*for..in*//* nogeckoex bug 349964 */=");
tryItOut("/*for..in*/L:for(const __parent__ in ((([11,12,13,14].map).__defineSetter__)(__iterator__ @ [])))\ngc()");
tryItOut("if(this.__defineSetter__(\"__iterator__\", /a/gi).__defineGetter__(\"prop\", (([null if (window)])).watch)) /*for..in*/M:for(var [1,2,3,4].map in ((new Function)(window))){} else return;");
tryItOut("if() {(false); } else  if (([11,12,13,14].filter)) {export __proto__; }\nlet __count__;");
tryItOut("/*infloop*/do {do (<><x><y/></x></>); while((1.3) && 0);/*for..in*/for(const [prototype, prototype] = true.constructor = * in __parent__) {} } while(<>[15,16,17,18].map(({}).hasOwnProperty, 1e4)</>);");
tryItOut("/*for..in*/for(let prototype in (prop.(((function () { yield 1.2e3 } ).call(<>try { ; } catch(__proto__) { ; } </>,  \"\" .propertyIsEnumerable(\"__proto__\"),  '' ))))) M:with(({}).hasOwnProperty(*).__defineSetter__(\"__parent__\", /a/gi))try { throw  /x/ ; } catch(__noSuchMethod__ if (function(){(<y><z/></y>);})()) { export __noSuchMethod__; } catch(__iterator__) { {} } finally { ([,,z1]); } ");
tryItOut("M:while((-1) && 0){(<><x><y/></x></>); }throw this;");
tryItOut("/*infloop*/for(let __parent__; ((({prototype: function(id) { return id } }))(eval(\"3\", .2), \t(new ( '' )(<y><z/></y>)) && (delete <y><z/></y>))).prop; ({ prototype: __noSuchMethod__ }) = new Function(<><x><y/></x></>)) /*for..in*/for(var [__parent__, constructor] = (this.__defineGetter__(\"__parent__\", prototype)) in null) {continue M; }");
tryItOut("{do {let function::__iterator__; } while((<x><y/></x>.propertyIsEnumerable(\"prop\")) && 0); }");
tryItOut("<employee id=\"1\"><name>Joe</name><age>20</age></employee>");
