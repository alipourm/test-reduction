tryItOut("/*infloop*/for((this.__defineGetter__(\"__parent__\", ({}).__lookupGetter__)) ,  /x/g  &= [11,12,13,14].sort; __iterator__ = __noSuchMethod__; ((-) + -0\n)) {export constructor; }\n");
tryItOut("if((function::__noSuchMethod__)) { if (()()) {throw <y><z/></y>; }} else export __noSuchMethod__;\t");
tryItOut("if((undefined.propertyIsEnumerable(\"__noSuchMethod__\") ? (<x/> for each (prototype in this)) : (this = <x><y/></x>))) { if (('fafafa'.replace(/a/g, (<x><y/></x>).watch))) throw <x/>;} else ");
tryItOut("/*infloop*/for((constructor = @foo.valueOf(\"number\")); ([<y><z/></y>, __iterator__, __iterator__, prototype, ] = <x/>[[[1]]]).valueOf(\"number\"); __count__.(<x><y/></x>) /= (new (({}).__lookupGetter__)(false, window)).@*) {gc() }");
tryItOut("if(((__proto__.prop).throw((null .. *)))\n) {throw <x><y/></x>;L:if(<x><y/></x>) {return true; } else  if (-0) export *; } else  if (({prop: constructor = <x><y/></x>.valueOf(\"number\")})) return constructor;");
tryItOut("constructor = __count__;");
tryItOut("function(q) { return q; }\nreturn;");
tryItOut("if(let (prop, prop) \f[11,12,13,14].some) { if (( /* Comment */constructor%=true)) (__proto__);} else {return x::__count__; }");
tryItOut("return this;");
tryItOut("M:do {return true;/*infloop*/do __iterator__ = *::*, __parent__; while((new (function () { yield undefined } )(*))); } while((getter) && 0);");
tryItOut("{;M:if([11,12,13,14].sort) function () {  }  else  }");
tryItOut("/*for..in*/for(let [constructor, prototype] = ([11,12,13,14].sort) in \f(new function(y) { yield y; ;; yield y; }(@foo.__iterator__ = <><x><y/></x></>))(window.__lookupGetter__(\"__parent__\"), constructor < <x><y/></x>)) { }");
tryItOut("return window;");
tryItOut("while(( /x/g ()) && 0)L:if(#1#) { if (null) {break ; } else function  prototype () { export __parent__; } }");
tryItOut("/*infloop*/for(var prototype; (constructor =  '' )[<><x><y/></x></>]; gc()\n) (__proto__).__defineSetter__");
tryItOut("/*infloop*/M:do ; while(__iterator__.__count__ setter= (this)(this));");
tryItOut("let (__parent__) { var constructor, prop; }");
tryItOut("return;");
tryItOut("L:switch((uneval((eval(\"(<x><y/></x>);\", __count__.( \"\" )))))) { default: (__count__ = <><x><y/></x></> __parent__, prop = prototype; const constructor/*;)break; __noSuchMethod__;break;  }");
tryItOut("/*infloop*/for(const prop; true; undefined) continue/*\n*/ L;");
tryItOut("do {let (__proto__, __proto__) { export *; }/*for..in*/L:for(let [constructor, []] =  /x/g  ^= 1e+81 in undefined) {(window);export __noSuchMethod__; } } while((<><{constructor}><xxx {prop}={__count__} /><!--yy--></{constructor}></>--) && 0);");
tryItOut("if((((({}).hasOwnProperty).call).call([,], ))) {gc()let __parent__ = @foo, __proto__ = <x><y/></x>; } else  if () {break L;; } else {yield <x/>; }");
tryItOut("let (__iterator__, __count__ = *) { return -0; }");
tryItOut("/*infloop*/while(constructor){var __noSuchMethod__; }");
tryItOut("return; const __noSuchMethod__\n");
tryItOut("M:do /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__(<x><y/></x>) in 3 .@ <><x><y/></x></>) {gc()__proto__ } while((function(q) { return q; }(({__parent__: prop = prop; })).unwatch(\"__iterator__\")) && 0);");
tryItOut("/*infloop*/M:for(const [, , ] = (new (window)() .@*:: <><x><y/></x></> >>= (3.141592653589793).__defineSetter__); <x><y/></x>.(window); prop.__lookupGetter__(\"__iterator__\").isPrototypeOf((<><x><y/></x></> % [1]))) ");
tryItOut("( \"\" );\nfalse\n");
tryItOut("/*for..in*/for([__parent__, prop] = ((-3/0 for (constructor in #1=[#1#]))) in window) {\texport *; }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("if(<x/>) {break L; } else  if ([,]) yield;");
tryItOut("var __count__ = <><x><y/></x></>, __parent__;\r\n/*for..in*/L:for(const __parent__ in __proto__.__count__) { }");
tryItOut("M:do {with({prototype:  /x/ })throw *::*; } while((this.zzz.zzz) && 0);");
tryItOut("do {with((++__proto__))({let __iterator__ = window, constructor; });return ({a1:1}); } while(((({ __parent__: __count__, prop: __proto__ }) = (1e4 for (__proto__ in @foo)))) && 0);");
tryItOut("if((<x><y/></x>() for each (__parent__ in __proto__ = __noSuchMethod__) for each (__count__ in __proto__ = <><x><y/></x></>) for (try { throw <y><z/></y>; } catch(__proto__ if (function(){__noSuchMethod__(<x><y/></x>) = __parent__;})()) { for(let y in [5,6,7,8]) const getter = <y><z/></y>, __count__; } catch(prop) { __noSuchMethod__ = __parent__.prototype; } finally { return; }  in <y><z/></y>))) { if (<x/>) {do throw [z1,,]; while(((new gc(<><x><y/></x></>, <x/>))) && 0); }} else {return;while(( /x/ .watch(\"__proto__\", (Math.pow).call)) && 0)const prop = false; }");
tryItOut("/*infloop*/while(([([prototype, , ] = <y><z/></y> > <y><z/></y>)])){{}const prop; }");
tryItOut("if((new ((new Function(\"gc()\")))([z1]))) { if (\n(__count__.constructor = this())) {/*for..in*/L:for(__proto__ in [,,]) {(false); } }} else {{} }");
tryItOut("while((<y><z/></y>.prop) && 0)__noSuchMethod__");
tryItOut("this.zzz.zzz;");
tryItOut("(#3={a:#3#})\nM:while((yield <><x><y/></x></>) && 0)1e-81;");
tryItOut("var constructor, prototype\nfunction(q) { return q; }");
tryItOut("return *::*; const prop;");
tryItOut("export __noSuchMethod__;");
tryItOut("{switch([[1]]) { case @foo: return;break;  }/*for..in*//* nogeckoex bug 349964 */ for  each(var [, , , , ({ prop: __noSuchMethod__, __proto__: __count__ })] in (({ set prop __count__ (__noSuchMethod__)<><x><y/></x></> }))) {/*for..in*/for(__noSuchMethod__ in ((function (__proto__) { const #3={a:#3#}, constructor = undefined; } )(null))){const __noSuchMethod__; } } }");
tryItOut("M:with(0x99)return <x><y/></x\t>;");
tryItOut("switch(this.__defineGetter__(\"prop\", [1]).__iterator__) { default: break; return *;break; case (<x/>++) == ((({__count__:  /x/g  })))[prototype.(({a2:z2}))]: (<><x><y/></x></>); const __count__;case 9: {let @foo; }case 6: break; case 7: break; break;  }");
tryItOut("L: ,");
tryItOut("export *;");
tryItOut("return;");
tryItOut("if([,,z1] != null < 0x99) __parent__ = <x><y/></x>, __iterator__ = *::*; else  if (#1=(( /x/g )[this] for each (__proto__ in __iterator__) for (__proto__ in constructor)).new <><x><y/></x></>(__count__, #1#)\f['__noSuchMethod__']) L:with({__iterator__: (uneval(constructor))}){(window); }");
tryItOut("if(null.__defineGetter__(\"prop\", /a/gi)) { if ((<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")).__defineGetter__(\"__parent__\", 'haha'.split)) {this; } else {return (__proto__)(<x><y/></x>); }}");
tryItOut("{L: {return null; } }");
tryItOut("for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("/*infloop*/for(var __parent__; window.__parent__; prototype.__noSuchMethod__ setter= ( /x/g ).watch) __parent__, __noSuchMethod__ = false\nwith([11,12,13,14].map)__proto__");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(const __iterator__ = (<y><z/></y> = prop); prop|=*::*; <y><z/></y>.__lookupGetter__(\"__iterator__\")) {let prop;return *::*; }");
tryItOut("/*for..in*/for(let prop.prop in  /x/ ) if(({prototype: new (<>({ __count__: __iterator__ })</>)([[]]) })) yield; else  if (__iterator__ = __noSuchMethod__) if( /x/ ) {throw *::*; } else continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.__count__ in ({<bbb xmlns=\"prototype = ({a1:1})\"><ccc:ddd><x><y/></x></ccc:ddd></bbb> })) {const prop, __iterator__; }");
tryItOut("{gc() }");
tryItOut("{(<x><y/></x>); }");
tryItOut("/*infloop*/while({}.*)export *;");
tryItOut("M:if(let (\t({ __parent__: [, , , ({ constructor: __count__, constructor: constructor })], prop: __parent__ }), ({ __proto__: ({ __proto__: __parent__ }), __count__: [__noSuchMethod__, constructor, ] })) constructor) yield; else  if (\nfunction(y) { yield y; ; yield y; }(__count__: (new ((new Function(\"export *;\")))\f( /x/ , __noSuchMethod__)))\n) let __count__, __proto__; else {with({__count__: [1,,]})<x><y/></x> }");
tryItOut("switch() { case 9: yield <x><y/></x>;break;  }\n");
tryItOut("/*for..in*/for([__noSuchMethod__, prop] = this.__defineGetter__(\"__count__\", (1 for (x in [])))() * this.__defineGetter__(\"__noSuchMethod__\", (@foo).call) in *) {/*infloop*/M:do if(3.constructor) {yield; } while(-0);var prop; }");
tryItOut("do break ; while(([1,2,3,4].slice()) && 0);");
tryItOut("/*infloop*/M:for(prototype = <x><y/></x> @ __iterator__.throw(++@foo); prop.eval([]); (false ^= <><x><y/></x></> ? true : ({a1:1}))) export *;");
tryItOut("switch(prototype = 1.3 in window) { case  /* Comment */true.yoyo(prototype): if((true % __count__ < this.__defineSetter__(\"__parent__\", #1=[#1#]) + __parent__.propertyIsEnumerable(\"get\") ^=  \"\" .watch(\"__parent__\", (new Function(\"throw {};\"))))) {yield; }default: case 5: /*for..in*/L:for(let prop in (('haha'.split\f)(new Object(0/0, <x><y/></x>))))gc()break; case 2: break; break;  }");
tryItOut("let (__noSuchMethod__ = #1#, __parent__) { do {return; } while((<x/>) && 0); }");
tryItOut("/*for..in*/for(const <y><z/></y> in window.watch(\"constructor\", (window).__defineSetter__)) {with(__parent__){yield <y><z/></y>; }(window); }");
tryItOut("if(false) { if (constructor =  /x/g ) {Math.powexport *; } else /*\n*/}");
tryItOut("/*infloop*/for(var ({ function::__noSuchMethod__: prop }) = <y><z/></y>; this.__defineGetter__(\"__proto__\", 'haha'.split); *) if(__count__) yield; else  if ([z1,,]) gc() else let prototype, prototype = 3/0;");
tryItOut("let(x::constructor = prototype[<><x><y/></x></>]) ((function(){<><x><y/></x></>;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in (-0)) ;");
tryItOut("/*for..in*/for(const prop in (((this.zzz.zzz).__defineSetter__)(eval(\"export __proto__;\", 1e+81))))L: {__count__;export *; }");
tryItOut("M:do return; while(((yield *::* === 0)) && 0);");
tryItOut("M:if(*) {var constructor = <><x><y/></x></>; } else  if ( /x/ ) export *; else yield;/*for..in*/for(let constructor = RegExp(prototype = <\f><x><y/></x></>,  '' ) in *::*) {constructor = <x/>;M:with({__count__: @foo}){break L; } }");
tryItOut("L: {gc()/*for..in*/for(var constructor in ((function  prop (prop) { yield (window ? try {  } catch(__proto__ if (function(){return;})()) { throw <x><y/></x>; } \tcatch(__noSuchMethod__ if @foo) { ; } catch(__iterator__ if (function(){export *;})()) { return; } catch(__parent__) { __parent__ = <y><z/></y>; }  : *::*) } )(prototype.watch(\"__proto__\", 3/0)))){const __count__ = [,];const prototype; } }");
tryItOut("return null;");
tryItOut("L:if(*) { if (*) {(<><x><y/></x></>);export __parent__; } else <ccc:ddd></ccc:ddd>}");
tryItOut("with(this .@*:: <x/>){export __proto__;gc() }");
tryItOut("/*for..in*/for(let function::__iterator__ in <x/>) {/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <y><z/></y>) function(q) { return q; }throw  /x/g ; }\nif( '' ) {prop, prop;export *; } else {const prop = 1e+81, __noSuchMethod__ = <x><y/></x>; }\n");
tryItOut("if(({ __noSuchMethod__: [x::__count__], __iterator__: ({ __parent__: constructor, prop: __parent__ }) }) = <xxx>{__count__}</xxx>.__lookupGetter__(\"prop\")) { if (.2) yield true;} else {return;break ; }");
tryItOut("for(let y in [])");
tryItOut("yield <><x><y/></x></>;");
tryItOut("/*infloop*/M:do yield; while(eval(\"undefined\", constructor));");
tryItOut("return\nlet __proto__;");
tryItOut("/*for..in*/for(const [, [__count__, __proto__, prop], [, __iterator__, , __noSuchMethod__, __noSuchMethod__], __noSuchMethod__] in ((({}).__lookupGetter__)((this.__defineGetter__(\"__iterator__\", function (__iterator__) for (__parent__ in <x><y/></x>))) ? new Math.pow(@foo, <><x><y/></x></>) : prop.__proto__ setter= *::* ? new (({a1:1}))(this, (function ([y]) { })()) :  \"\" .watch(\"prop\", [1,2,3,4].map))))L: {}");
tryItOut("switch(<x><y/></x>.(__parent__)) { default:  }");
tryItOut("/*infloop*/do {export x::__parent__\n } while(let (({ __noSuchMethod__: __proto__, constructor: constructor })) return [1]);");
tryItOut("const prototype = false, __noSuchMethod__;\n([[]]);\n");
tryItOut("with({prop: (#1=<><x><y/></x></>)}){let (__iterator__) { const prototype = <x/>, prop; } }");
tryItOut("/*infloop*/for(let ({ __count__: ({ __noSuchMethod__: ({ constructor: [, [], __noSuchMethod__, __noSuchMethod__.__count__, ], __noSuchMethod__: function::__iterator__ }) }), __parent__: ({ (prototype(({__iterator__: __count__, __count__: [,,z1] }))): prototype, __proto__: __parent__ }) }) = -3/0 if ([[1]]) -= (prototype.function::prototype setter= ({}).__lookupGetter__).__defineSetter__(\"each\", /a/gi); ({__parent__: #1=this.eval((<x><y/></x>.(<x/>)))})++; new String()) L: __parent__;");
tryItOut("/*for..in*/M:for(constructor =  /x/  in __iterator__) {let __count__ = this;\n[1,2,3,4].slice }");
tryItOut("/*infloop*/L:for(false === 1.2e3++.@foo; <><x><y/></x></> for each (__noSuchMethod__ in  /x/ ); new ((-1) for each (__count__ in this))) new Function");
tryItOut("case (prop = __proto__) *= __count__ = <><x><y/></x></>: export __count__;break; break; case <><xxx {prototype}={prop} /></>: return 4.;break; ");
tryItOut("(<><x><y/></x></>);return 1e+81;");
tryItOut("//h\n(((false).watch)); const __parent__;");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("L:do {yield; } while((arguments === [[1]]) && 0); const __iterator__;");
tryItOut("if((yield eval(\"function::__noSuchMethod__ = <x/>, prop = <x><y/></x>;\", [11,12,13,14].some))) if(({ get prop <x/> () { return __noSuchMethod__ }  })) {function  prop (prop)({})export *; } else  if (eval(\"\\n( /x/g .@*)\", (window.__noSuchMethod__.__proto__))) ; else  if (#2=[prop.__parent__ = this.__defineGetter__(\"prop\", gc)]) /*infloop*/do __parent__ = [,,], __iterator__ = undefined; while(this.__defineSetter__(\"__count__\", <x><y/></x>)); else if(prototype) { if (false) {var __proto__ = *::*, __iterator__;yield <x><y/></x>; }} else ");
tryItOut("/*infloop*/for(undefined; <><x><y/></x></>; <y><z/></y>) throw *;");
tryItOut("L:if(([<y><z/></y> for each (prop in undefined)])) {} else {if(<><x><y/></x></>) {return  '' ; } else  if (<x/>) {prototype;{} } else ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x/>.propertyIsEnumerable(\"__proto__\")['__iterator__'] in <y><z/></y>) {;throw @foo; }");
tryItOut("return constructor; const prop;");
tryItOut("let(constructor = *::*) ((function(){return undefined.throw( '' \f) for each (__parent__ in 033) for (__noSuchMethod__ in arguments);})());");
tryItOut("do if(this) {gc() } else  if (true) [1,2,3,4].map else <><x><y/></x></> while((<x><y/></x>.yoyo(window)) && 0);");
tryItOut("L:if(eval(\"1e-81\", false)) { if (<y><z/></y>) 1e4} else /*for..in*/for(__count__ = .2 in  '' ) yield @foo;");
tryItOut("let (__parent__) { gc() }");
tryItOut("if(((yield undefined)) ? __iterator__ for (prototype in (function ([y]) { })()).unwatch(\"__count__\") : __proto__.(this.__defineGetter__(\"__proto__\", 0))) __proto__ = window;");
tryItOut("__proto__, __noSuchMethod__\n");
tryItOut("do function  __noSuchMethod__ (__noSuchMethod__, prototype) { return function::__count__ }  while((*) && 0);");
tryItOut("gc()\nreturn;");
tryItOut("let prototype\nyield *;");
tryItOut("/*infloop*/M:for(let __parent__ = <x><y/></x>; <x/>; *) gc()");
tryItOut("/*for..in*/for(var [__parent__, prop] =  ''  ^= false in  /x/ ) ;");
tryItOut("throw StopIteration;");
tryItOut("export *;");
tryItOut("/*infloop*/for(constructor;  %= [15,16,17,18].filter(window, ( ''  .@ undefined)); this % <><x><y/></x></> ::  \"\" .yoyo(*)) {return @foo;export *; }\nexport __count__");
tryItOut("/*for..in*/for(const __iterator__ in <><x><y/></x></>) yield -3/0;");
tryItOut("/*for..in*/for(var [constructor, prop] = \n<y><z/></y>.__defineGetter__(\"__noSuchMethod__\", Math.sin) in \n \"\" .eval(undefined)) {for(let y in []); }");
tryItOut("");
tryItOut("function (prop)<x/>");
tryItOut("/*for..in*/for(const [__noSuchMethod__, this] = <x/> in 0/0) {return; }\n");
tryItOut("if(({__noSuchMethod__: this.zzz.zzz,  get __parent__ __count__ () { yield ({prototype: <x/>, __count__: * }) }  })) {export *;let __parent__ = @foo; }");
tryItOut("if(constructor) {const __noSuchMethod__;\f } else  if (<x/>) {gc() } else return;");
tryItOut("do {if(#1#) { if ([[]]) @foo; else let __parent__ = window, constructor;} } while((constructor.throw(@foo) === __proto__ ^ 5.0000000000000000000000) && 0);");
tryItOut("/*for..in*/M:for(const [__proto__, prototype] = function(id) { return id }\n in arguments) {yield;const __noSuchMethod__; }/*infloop*/do {(<><x><y/></x></>);{} } while(#3={a:#3#})\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__.__proto__ in (prototype = *::* for each (each in <y><z/></y>) for (prop in <><x><y/></x></>))) {if(033[window]) export *; else {export __iterator__;yield; }\n }");
tryItOut("let(__iterator__) ((function(){return;})());");
tryItOut("return <y><z/></y>;");
tryItOut("/*infloop*/for((__noSuchMethod__.prototype = try { yield; } catch(__parent__) { (<><x><y/></x></>); } ); Date(window); [let __iterator__]) {/*infloop*/L:for(__proto__ = 0/0; 3.141592653589793; this) {yield [z1]; }yield; }");
tryItOut("{throw null; }");
tryItOut("L:\fif(-1.hasOwnProperty(\"__parent__\").__iterator__ = __noSuchMethod__ = -3/0) {export __iterator__\nyield; }");
tryItOut("M:if(<xxx>{prototype}</xxx>) /*for..in*/for((prototype) in undefined) { { yield <x><y/></x> } [1,2,3,4].slice } else  if (((p={}, (p.z = ((@foo) :: true))()))) let (__proto__ = 5.0000000000000000000000, constructor) { export *; } else {L:while((__noSuchMethod__) && 0){continue ; } }");
tryItOut("if(- /x/g ) { if () {__proto__, __iterator__ } else {let prop;__iterator__ = #3={a:#3#}; }}");
tryItOut("if(<y><z/></y>) { if (__parent__) __proto__ = *::*, prototype; else {export *;export *; }}");
tryItOut("L:with({prototype: yield <><x><y/></x></> >>>=[,]}){gc()\t }");
tryItOut("/*infloop*/M:for(eval(\"typeof \", new ((function (__count__, constructor) { yield; } ).apply)()); this.__defineGetter__(\"__parent__\", function(q) { return q; }); (undefined :: <y><z/></y>)) {{yield export *;; }//h\n/*infloop*/for(__iterator__; ([1,,] = (<x><y/></x> for each (__parent__ in arguments))); [, [, , ], , ({ prototype: __noSuchMethod__, constructor: __iterator__ })] = (1 for (x in []))( /x/g , __count__) %= this) eval const __iterator__; }");
tryItOut("function::__proto__.__iterator__ = __count__;");
tryItOut("/*for..in*/for(prototype in ((new Function)('fafafa'.replace(/a/g, (1 for (x in []))))))let prop = <><x><y/></x></>;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(var __iterator__ = window; <x/>; <x/>) {const __proto__;throw <x><y/></x>; }");
tryItOut("switch(this.__defineGetter__(\"prototype\", (/a/gi).apply)) { default: let (({prop: this})) { for(let y in [5,6,7,8]) <y><z/></y> = __proto__; }break; case this.zzz.zzz: return  '' \nthrow <><x><y/></x></>;case  /x/ : case 3: if((this.zzz.zzz)) { if (<x><y/></x>.propertyIsEnumerable(\"prop\")) {(true);break M; } else export prop;}break; case (constructor = ({a1:1})): break; break;  }");
tryItOut("with(__noSuchMethod__ = 5.0000000000000000000000)prototype");
tryItOut("with(<y><z/></y>)with((.2.@*)){yield <><x><y/></x></>; }");
tryItOut("return this;");
tryItOut("if(<y><z/></y>) { if (<y><z/></y>) yield 1.2e3; else false;}");
tryItOut("switch(Iterator(constructor = 0, 0.1)) { case [(window.hasOwnProperty(\"constructor\").unwatch(\"__noSuchMethod__\"))].some((~(function  __iterator__ () { yield; } ))): /*infloop*/do {false; } while(window ? 1e+81 /= 0x99 : ~<x><y/></x>);break; <x><y/></x>break;  }");
tryItOut("return;");
tryItOut("switch((yield (uneval(null)))) { default: throw prototype;break; case (this.__defineSetter__(\"prototype\", function () { yield <x><y/></x> } )).* = (<x><y/></x>.@foo) .. __noSuchMethod__ =  \"\"  if (true ? <x><y/></x> :  for ) >>>=__count__.constructor = <x/>(1e81, prop): for(let y in [5,6,7,8]) __proto__ = this;case <x><y/></x>.(<><x><y/></x></>) << 1.2e3: return;break; gc(); }");
tryItOut("{return;export prototype; }");
tryItOut("M:if(this.zzz.zzz.hasOwnProperty(\"prop\")) {switch(window) { case 0: break;  }gc() } else __parent__");
tryItOut("/*infloop*/for(__parent__ = window; prop = @foo; this) var constructor, __count__;");
tryItOut("with({constructor: __iterator__((delete null))}){/*infloop*/M:do /*infloop*/L:do \t{return #1#; } while(#1#); while(.2.__lookupSetter__(\"__count__\"));/*infloop*/M:for( /x/ ; false;  \"\" ) {export *;__count__ = (-1), __noSuchMethod__; } }");
tryItOut("if([false] * this.__defineSetter__(\"__count__\", Math.pow)) constructor; else  if ( in <x/>.__noSuchMethod__) {yield;return this; } else return window;");
tryItOut("throw StopIteration;");
tryItOut("throw window;");
tryItOut("with({__parent__: (function  constructor (__iterator__, __parent__)true).call( \"\" , this)}){with( /x/g )function () { return *::* }  }");
tryItOut("L:if(@foo) { if ((-0)) prop = window} else {return; }");
tryItOut("let(__noSuchMethod__ = 'fafafa'.replace(/a/g, [1,2,3,4].map) ? (<y><z/></y>).call(<x><y/></x>, 5.0000000000000000000000) : this.zzz.zzz /= (function ([y]) { }).watch(<x><y/></x>, <x><y/></x>).valueOf(\"number\")) ((function(){break M;})());");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prop] = (~[,,z1]) in 3.141592653589793) gc()");
tryItOut("L:if(1.3) { if ( /x/g ) gc()} else throw function(id) { return id };\t\nexport *;\n");
tryItOut("__noSuchMethod__");
tryItOut("while((0/0 @ this) && 0)if(prop = <x><y/></x>) {{}export *; } else  if ( /x/g ) {gc() }");
tryItOut("L: M:if(*::*) eval else yield;/*infloop*/L:for(this; window; null) return;");
tryItOut("L:if((Object( /* Comment */* if ([,,])))) { if ((<x><y/></x>.(<><x><y/></x></>).__parent__ = (__parent__ = ({let getter: 'haha'.split,  get constructor(__iterator__) { return this }  })))) L:if( /x/g ) { if (<x/>) {throw [1,,];const constructor; }} else export *;function  function::__parent__ (__count__, prototype)null else /*for..in*/M:for(let __proto__ in ((function(q) { return q; })(<><x><y/></x></>))){;{} }gc()}");
tryItOut("if(__noSuchMethod__.constructor getter= (1 for (x in [])))  else  if ([*::*]) {return undefined;yield  '' ; }");
tryItOut("__iterator__");
tryItOut("throw StopIteration;");
tryItOut("yield *\n{}");
tryItOut("do {(<y><z/></y>);[15,16,17,18].some(new Function, <y><z/></y>).__defineGetter__(\"__count__\", [1,2,3,4].map), __iterator__ } while(([1,2,3,4].slice) && 0);");
tryItOut("if([window].map(function(y) { yield y; {yield *;const __count__ = prototype; }; yield y; })) { if (#1=[null]) break ;} else {export constructor;return <><x><y/></x></>; }");
tryItOut("/*for..in*/for([__proto__, prototype] = prototype.__noSuchMethod__ in 0) \f{{} }");
tryItOut("switch( '' ) { default: break M;break;  } const prototype;");
tryItOut("if((*::* = prototype, constructor ? this : <> { export *; } </>)) { if (+ \"\" .hasOwnProperty(\"prop\")) {; }} else {{} }");
tryItOut("break' L");
tryItOut("/*infloop*/L:while((#1=[void (__parent__ =  '' )].__defineSetter__(\"prop\", ({}).hasOwnProperty))){M:if((function ([y]) { })()) { if (1.2e3) {([1,2,3,4].slice).applyyield; }} else {return \n<x><y/></x>; }/*infloop*/for(var x::__parent__; <><x><y/></x></>.prop = <x><y/></x\f>; ) {export *;[1,2,3,4].map } }\f");
tryItOut("{__parent__ =  /x/g , __noSuchMethod__ = <y><z/></y>; }");
tryItOut("if( '' .yoyo(({a2:z2}))) ; else  if (throw  '' ) yield <x><y/></x>; else {/*infloop*/L:for(var __iterator__; ({__iterator__: __count__}); ({__count__: this})) ; }");
tryItOut("throw __count__;");
tryItOut("if((this.__defineGetter__(\t\"prop\",  /x/g ))) {export __noSuchMethod__;<x/>; } else  if (#1=({__iterator__: <><x><y/></x></>})) export *;\n");
tryItOut("/*infloop*/L:for(let __parent__; function::prop = this; <x><y/></x> <xxx {__count__}={1e81} /><x><y/></x> .yoyo((let (__noSuchMethod__) <x/>))) return window;");
tryItOut("\t\n");
tryItOut("for(let y in [5,6,7,8]) let(prototype = [15,16,17,18].map(function(q) { return q; }, __count__).valueOf(\"number\")) { for(let y in []);");
tryItOut("return (undefined.watch(\"constructor\",  '' ));");
tryItOut("do {break L;export __iterator__; } while(( /x/  ?  \"\"  :  /x/g ) && 0);");
tryItOut("throw  /x/g ;");
tryItOut("if(this.__defineSetter__(\"constructor\", (<><x><y/></x></>.__lookupGetter__(\"constructor\")).__defineSetter__)) {} else  if (this.__defineGetter__(\"__proto__\", (( /* Comment */ '' ).watch).apply)) {yield; } else {/*for..in*/L:for(const [__noSuchMethod__, __iterator__] = <x/>.__parent__ in constructor) {gc()(5.0000000000000000000000); } }");
tryItOut("L: {if(<x><y/></x>) {{}; } else {}if([1], <><x><y/></x></> :: 1.2e3) {yield window; } else  if (<y><z/></y>.valueOf(\"number\")) yield <x><y/></x>; }");
tryItOut("switch(this /= __proto__) { case 7: case 'fafafa'.replace(/a/g, [1,2,3,4].slice).watch(\"constructor\", gc): constructorbreak; ; }");
tryItOut("if(((new Function(\"yield;\")))()) const setter; else  if (<><x><y/></x></> , <x><y/></x>) {;var __parent__ = <x><y/></x>; } else throw *::*;");
tryItOut("{break L;{return;{} } }");
tryItOut("if(constructor) { if (void  /x/g ) yield window;} else {{}{} }");
tryItOut("__iterator__");
tryItOut("if(window) {var prop =  \"\" , constructor = <><x><y/></x></>; }");
tryItOut("Math.sin");
tryItOut("L:while((<x><y/></x>) && 0){let prototype = @foo; }");
tryItOut("L: const __noSuchMethod__, prop;");
tryItOut("L: {L:with(<x><y/></x>)export *; }");
