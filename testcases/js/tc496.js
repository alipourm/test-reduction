tryItOut("if(<y><z/></y>) {break M;prop = @foo, constructor =  '' ; } else  if (<><x><y/></x></>) {throw [,,];gc() } else {[1,2,3,4].mapyield ({}); }");
tryItOut("/*for..in*/for(__count__ in (<><x><y/></x></>[[,,z1]].__iterator__ = (__parent__ = __noSuchMethod__))) M:if(new Function) { if ( /x/  @ *) let __count__, __count__;} else (<x/>);");
tryItOut("switch( \"\" ) { default: eval }");
tryItOut("export prototype\n");
tryItOut("with({constructor: new function  __noSuchMethod__ () { yield <x/> } ()}){var prop, constructor = arguments; }");
tryItOut("yield 3.141592653589793 .@x:: this %= prop.__proto__ getter= function  __proto__ (__noSuchMethod__, __proto__) { return 5.0000000000000000000000 } ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__(3) in null) {}");
tryItOut("{export *; }");
tryItOut("L:switch(1e81 & <x><y/></x>) { default: ;case ~this.__defineGetter__(\"prototype\", [1,2,3,4].slice): break;  const __count__;break;  }");
tryItOut("prototype = __iterator__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (undefined @  /x/ ())) {do {{if(window) throw <x><y/></x>; else prototype: #1=[#1#]  } } while(((new Function(\"throw false;\"))(throw  /x/ ;, window)) && 0); }");
tryItOut("if(<><x><y/></x></>) { if (-0) {let __parent__ = <><x><y/></x></>;export __iterator__; }} else <y><z/></y>");
tryItOut("if((new (function  prop (({ __noSuchMethod__: [({ __parent__: __iterator__ }), , ({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: __proto__ })] }), __parent__) { return [[]][true] } )(constructor = [11,12,13,14].map))) if(<y><z/></y>) { if (false) {yield *; } else continue ;}");
tryItOut("throw StopIteration;");
tryItOut("L: {if( \"\" ) { if (true) {}} else {Math.pow } }");
tryItOut("/*for..in*/L:for(var [__iterator__, __parent__] = __count__.__noSuchMethod__ in (\n@foo).prop = prop--.yoyo([11,12,13,14].filter))  const constructor;");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("switch((Boolean(__iterator__ = <y><z/></y>, window))) { default: if(RangeError(__proto__)) {throw <y><z/></y>; } else  if (__noSuchMethod__ = <><x><y/></x></>) export __count__;break; break;  }");
tryItOut("/*infloop*/for(__count__ = @foo; *; default: (1 for (x in []))break; case 4: break; ) {export *;yield @foo; }");
tryItOut("{L: {gc() }<x/>; }");
tryItOut("if(((function (__proto__) { yield __proto__ } ).apply('fafafa'.replace(/a/g, ({}).hasOwnProperty), <><x><y/></x></>))) { if ((((<x><y/></x> + -1)).watch)(({__proto__: [1]}), #1=undefined)) yield <y><z/></y>; else {;*; }}");
tryItOut("L: {(<>function::__count__</>.__lookupGetter__(\"__iterator__\"));L:if([<x><y/></x>].map([1,2,3,4].map)) { if ({} !== undefined ? (({})( '' )) : * *= <x><y/></x> = *) ; else throw constructor;}\nL: {yield null; } }");
tryItOut("/*infloop*/for(const prop; prop.__parent__; (<><x><y/></x></>).__defineSetter__.__defineSetter__(\"prop\", [1,2,3,4].map)) {const  \"\"  = <x/>;let (__proto__ = <><x><y/></x></> ^ <y><z/></y>) { export *; } }");
tryItOut("/*infloop*/M:for(prototype = (this.zzz.zzz ^ (function::__iterator__ = <><x><y/></x></>)); [({})].filter((new Function(\"eval\"))); (false.eval(5.0000000000000000000000))) {<x/>gc() }");
tryItOut("yield;");
tryItOut("if(__noSuchMethod__) { if ((__count__ = [].valueOf(\"number\"))) return <><x><y/></x></>; else let __parent__, prop = <><x><y/></x></>;}");
tryItOut("{var __proto__, prototype; }");
tryItOut("do {(1 for (x in [])){}\f } while((*::*) && 0);");
tryItOut("let (function::prop = __noSuchMethod__ = new function (__iterator__, __proto__) { return constructor = __count__ } (4..prototype), __iterator__) { with({}) return <y><z/></y>; }");
tryItOut("/*for..in*/for(var prop.constructor in ((function(q) { return q; })(-(\f[15,16,17,18].map(undefined, <y><z/></y>)))))with(<bbb xmlns:ccc=\"false\"><ccc:eee></ccc:eee></bbb>)*::*;");
tryItOut("switch((-1)) { case 8: <><x><y/></x></>;break; break M;break; ;break; break; return __parent__;case 9: break; case 1: break; break; case prototype:  }");
tryItOut("do {function () { return (-0) } break L; } while((1.3) && 0);");
tryItOut("with({}) { for(let y in [5,6,7,8]) return prototype; } ");
tryItOut("L:switch(*) { default: break; case 5: /*infloop*/L:for(const ({ constructor: ({ __proto__: __count__ }) }) = window != <><x><y/></x></>.hasOwnProperty(\"prototype\"); __parent__ = <x><y/></x>; this.__defineGetter__(\"x::<x><y/></x>\", this)) {{}yield; }break;  }");
tryItOut("{eval\nwith({})  }");
tryItOut("throw  /x/g ;\nyield  \"\" ;\n");
tryItOut("continue L\nyield;");
tryItOut("const __parent__ = null\nexport *\f;");
tryItOut("do return; while(((prototype ? false : <x><y/></x>).unwatch(\"constructor\")) && 0);");
tryItOut("/*for..in*/M:for(let __count__ in ((function(q) { return q; })(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>))){throw false; }");
tryItOut("with((<><x><y/></x></>.__count__)){break ;{} }");
tryItOut("if( = __parent__) { if ([,,] .@x:: *) {{} }} else {export __parent__;var prototype =  \"\" , __noSuchMethod__ = this; }");
tryItOut("({}).hasOwnProperty");
tryItOut("if(let (constructor, __proto__ = window) __noSuchMethod__+=__iterator__) { if ((__count__)(<y><z/></y>)) {break L;with({prop: this})let __iterator__, prototype; } else return <x><y/></x>;}");
tryItOut("with({__noSuchMethod__: <><>(yield <x><y/></x>) .@ #1=[#1#] ? __noSuchMethod__ : <x><y/></x><bbb xmlns=\"<y><z/></y>\"><xxx>{prop}</xxx></bbb><employee id=\"1\"><name>Joe</name><age>20</age></employee></></>})<y><z/></y>");
tryItOut("/*infloop*/M:while(\n<y><z/></y>.hasOwnProperty(\"__iterator__\"))1e4;");
tryItOut("export __proto__; const prototype: *;");
tryItOut("/*for..in*/for(let prop in ((<x><y/></x>)(<y><z/></y>))){let prototype =  \"\" ;return function ([y]) { }; }");
tryItOut("/*infloop*/for(var prop; [,]; true) { /x/ ;continue M; }");
tryItOut("prop = __noSuchMethod__;");
tryItOut("with({}) yield;");
tryItOut("{var return [,,z1]; const prop;, __parent__;gc() }");
tryItOut("try { with({}) { this.zzz.zzz; }  } finally { prototype.(__iterator__).__defineSetter__(\"prop\", (Math.pow).apply); } ");
tryItOut("yield\nif([11,12,13,14].map) {switch(window) { default: break;  }\f }");
tryItOut("let (__iterator__ = <><x><y/></x></>) { (0/0); }");
tryItOut("if((#1#--)) { if (<x><y/></x>) {__proto__ = *::*, prop; }} else 0/0;");
tryItOut("__proto__ = constructor;");
tryItOut("throw window;");
tryItOut("/*infloop*/L:do {<x/>;function(y) { yield y; var __iterator__, constructor = [,,z1];; yield y; } } while(<x><y/></x>);");
tryItOut("throw __parent__\n");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = (-__iterator__) <= <x><y/></x>.__lookupGetter__(\"prototype\").__defineSetter__(\"__parent__\", eval) in ([this if (<><x><y/></x></>)])) {/*infloop*/L\t:for(const prototype; __noSuchMethod__ = ; let (__count__) constructor) *::*return <><x><y/></x></>; }");
tryItOut("M:if((__parent__ =  /x/g )) { if (([11,12,13,14].some)) {<x><y/></x>; } else gc()}");
tryItOut("{export prototype;throw *; }");
tryItOut(";\n__parent__ = <>prototype</>;\n");
tryItOut("/*infloop*/for(prototype; .2; __count__ = (Object(__proto__ % window))) L: {gc() }");
tryItOut("with({prop: (uneval((function  __iterator__ () { yield 3.141592653589793 } ( '' , window)--)))}){with({__noSuchMethod__: this})throw <x><y/></x>; }");
tryItOut("L: {M:if(constructor =  '' ) { if ((new Iterator())) const __noSuchMethod__ = null, __iterator__ = <x/>; else {gc() }} }");
tryItOut("switch((@foo for each (prop in window))) { default: return;case (*::*.__lookupSetter__(\"__count__\")): case ('fafafa'.replace(/a/g, (((__parent__).watch).apply).call)):  }");
tryItOut("L:with({__count__: [z1]}){yield; }");
tryItOut("do {break ;return <x/>; } while((<><x><y/></x></>.watch(\"__count__\", ((__proto__).__defineSetter__).apply)) && 0);");
tryItOut("/*infloop*/for(let prop = ; .eval(<x/>); __noSuchMethod__ = __parent__ >> 0/0.yoyo(true)) {const prop = prop; }");
tryItOut("if(null) export constructor; else ");
tryItOut("/*for..in*/for(const __count__ in ((({}).hasOwnProperty)(eval(+<x><y/></x>, <x/>))))while(([-1]) && 0){export __iterator__; }");
tryItOut("__parent__ = __count__;");
tryItOut("L:with(void __iterator__ @ 1e-81){<y><z/></y>;/*for..in*/for(var __noSuchMethod__ = * in <x><y/></x>) {(function  __count__ () { throw window; } ).apply } }");
tryItOut("/*infloop*/while([[z1,,] for each (constructor in @foo)][__noSuchMethod__ !== function ([y]) { }])var __parent__ = <><x><y/></x></>, __count__;\t");
tryItOut("/*infloop*/L:do {gc()M:if(__noSuchMethod__) { if (__iterator__) gc() else __parent__;} } while(new (function (constructor, __iterator__)<x><y/></x>).apply());");
tryItOut("/*for..in*/for([prototype, __parent__] = (uneval(<><x><y/></x></>)) in @foo) {yield;gc() }\n{{}try { yield new (Function)(this.__defineSetter__(\"__proto__\", undefined), *); } catch(__noSuchMethod__) { [,].prototype = prototype; } finally { for(let y in [5,6,7,8]) let(__parent__ =  \"\" ) { export prop; }  }");
tryItOut("/*for..in*/for(const __iterator__ in --function(id) { return id }) \f{/*infloop*/M:for(<x/> .@ ({a2:z2}); __noSuchMethod__ = <x><y/></x>; --__iterator__ =  /x/g , prototype =  '' ) {let __count__, prototype = <><x><y/></x></>; } }");
tryItOut("L:if(((yield ([15,16,17,18].sort(function () {  } , * || ({__count__: <><x><y/></x></>, __parent__: #3={a:#3#} })))))) {gc()gc() } else  if (false.yoyo(this).@foo.__iterator__) /*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <x><y/></x>) {; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = prop%=this in 1e81) {throw <x/>; }\n/*for..in*/M:for(const *::*['prop'] in  /x/g ) {gc() }\n");
tryItOut("/*infloop*/do {/*infloop*/M:while(<x><y/></x>){var __parent__, constructor = undefined;let __count__ = <><x><y/></x></>, __parent__ = ({}); }break ; } while((prototype = <><x><y/></x></> || ( /x/g )(<><x><y/></x></>, <x><y/></x>)));");
tryItOut("if(__parent__ = @foo.propertyIsEnumerable(\"__count__\")([<x><y/></x>].sort(function(y) { yield y; export prop;; yield y; })) %= ((-1).eval(<x><y/></x>)\n)) {/*infloop*/for(prop; [,,z1]; <x/>) {export __proto__; } } else  if ((*::*)(1e4)|=[this]) {gc() const __noSuchMethod__;[z1]; } else \f{if(<><x><y/></x></> ? <y><z/></y> : null) {break ;yield; } else  if (*::* % undefined) {{}const __parent__, __iterator__; } else {yield;export *; } }");
tryItOut("switch(\n /x/ ) { default: constructor;break; case 1: break;  }");
tryItOut("if((({__parent__: undefined: [15,16,17,18].some(/a/gi, prototype)}))) {yield; } else  if (Math.sin) prop, __iterator__;");
tryItOut("if(<x><y/></x>) return; else let prop, __noSuchMethod__ = __parent__;");
tryItOut("/*for..in*/for(let (__parent__) in ((function  __count__ () { yield #2=(1e+81,  /x/ (<x><y/></x>, __noSuchMethod__)) } )(this.__defineGetter__(\"prop\", function () { return (__proto__ = *::*).@* } )))){((function ([y]) { })()); }");
tryItOut("return;\ngc()\n");
tryItOut("\n");
tryItOut("L:if([]) { if ([1]) {yield false; } else return;}");
tryItOut("if(prop) {throw <x/>;(*);\f }");
tryItOut("if(#1=window.throw(constructor.__iterator__)) { if (Date()) /*for..in*/for([__iterator__, __noSuchMethod__] = prop = true in false) {<><x><y/></x></>; }} else {}");
tryItOut("try { {gc()yield <x><y/></x>; } } catch(__iterator__ if (function(){try { eval } catch(__count__ if (function(){})()) { continue M; } catch(yield if (function(){export *;})()) { throw *::*; } catch(__noSuchMethod__) { throw true; } })()) { throw __proto__; } catch(__proto__) { if(<><x><y/></x></>.@foo) { if (eval(\"{}\", *)) return; else yield;} } finally { with({}) { yield []\f; }  } ");
tryItOut("const __iterator__ = <x/>, __iterator__ = 4.;");
tryItOut("/*for..in*/M:for(var prototype in  /x/g ) return;");
tryItOut("/*for..in*/for(let [__proto__, __iterator__] = (yield (function(id) { return id }++)).watch(\"__parent__\", function () { return * } ) in <x><y/></x> ? undefined : 0) L:  /x/g ");
tryItOut("with({prop: ( ''  for (constructor in <><x><y/></x></>))})return 0x99\n;");
tryItOut("if(( /* Comment */(constructor.watch(\"function::constructor\", /a/gi\f)))) (<x><y/></x>).apply else (<x><y/></x>);");
tryItOut("if((<><x><y/></x></>)(<x><y/></x>) = __noSuchMethod__(__iterator__.([false].sort(function(q) { return q; }))) = (;.unwatch(\"constructor\"))[[this].filter(function(q) { return q; })]\r) /*for..in*/M:for(var __proto__ = (-1) in <y><z/></y>) {}");
tryItOut("L: {throw <><x><y/></x></>;yield this; }");
tryItOut("/*infloop*/while(<y><z/></y>){/*for..in*/L:for(__proto__ = false in undefined) {yield; }if([(<x><y/></x> /= __noSuchMethod__)]) ; else  if (@foo) { } }");
tryItOut("{if(function(id) { return id }) {(*); } else  if (__noSuchMethod__) {(1.3);{} } else {throw 4.; } }");
tryItOut("/*infloop*/for(const constructor; [<x/>.valueOf(\"number\")].some({}) *= [[1]] %= <><x><y/></x></>.__lookupGetter__(\"__proto__\"); <y><z/></y>) {if((true ..  /x/ )) { if (#1#--) break ; else {(__noSuchMethod__.__iterator__), /*\n*/__iterator__ ? (p={}, (p.z = -3/0)()) : *.hasOwnProperty(\"__parent__\")export __parent__; }} }");
tryItOut("if(__proto__ >> <><x><y/></x></>) yield __noSuchMethod__.let; else export *;");
tryItOut("while(( for each (__proto__ in *::*) for (prop in 3)) && 0)gc()");
tryItOut("var prop;");
tryItOut("0.1");
tryItOut("/*for..in*/for(const (__parent__) in <x/>) if(<x/>) yield prop; else return;");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in function ([y]) { }) let __parent__, prototype = <y><z/></y>;");
tryItOut("/*infloop*/for(({ __parent__: [], __iterator__: prototype }) = [((false)(__noSuchMethod__)) for each (__count__ in ({a2:z2})) if (<><x><y/></x></>)]; (this.__defineSetter__(\"__parent__\", new Function)); __count__\n) let constructor, __count__;");
tryItOut("continue ;if(0/0) {gc()gc() } else  if (this) var prop = *::*;");
tryItOut("if(null) { if (window) {return;yield true; } else {return; }}");
tryItOut("with({__count__: [*::* for (__noSuchMethod__ in this)]})return;");
tryItOut("with([__count__])export constructor;");
tryItOut("export *;\nreturn <x><y/></x>;\n");
tryItOut("{if(__noSuchMethod__ = [].__parent__) gc() else  if ([[,]]) prop = undefined; }");
tryItOut("while((((<x/>).call(null, ))) && 0){return @foo; }");
tryItOut("let(__proto__) ((function(){(-0);})());");
tryItOut("do {with({__iterator__:  \"\" })if([1,,]) {prototype: undefined } else  if (<x><y/></x>) return; else {return <x><y/></x>;(*); } } while((let (prop = <x/>) [1]) && 0);");
tryItOut("M:if(window) {yield  /x/ ;{} } else  if (({prototype: ('fafafa'.replace(/a/g, (eval(\"const prop = *, __proto__;\", false)).__defineSetter__))})) throw <x/>; else default: *;case 3: gc()let __noSuchMethod__;break; ");
tryItOut("/*infloop*/for(__count__+=__count__ = ({}); __parent__ = #1#; new Array()) let (__noSuchMethod__, constructor = [,]) { gc }");
tryItOut("if(<{constructor}><!--yy--></{constructor}>) {return  /x/ ;{} } else  if (prototype = this.__defineGetter__(\"prototype\", ({}).hasOwnProperty)) yield prop;\nreturn x>@foo<y/>< prototype, __iterator__/x>;\n else {yield;__count__, __count__; }");
tryItOut("throw @foo;");
tryItOut("/*for..in*/for(prototype in window.propertyIsEnumerable(\"__noSuchMethod__\")) while((('haha'.split).call(this, )) && 0){export __proto__; }");
tryItOut("let __iterator__, __count__ =  /x/g \n");
tryItOut("/*infloop*/for(window; ({constructor: @foo);  /* Comment */false) {export __parent__;continue ; }");
tryItOut("let(prototype, __proto__ = ({constructor: __noSuchMethod__ << [,,z1]})) ((function(){return;})());");
tryItOut("/*infloop*/for(var ({ prototype: __parent__, __noSuchMethod__: __parent__ }) = constructor|=(this.zzz.zzz); __count__ |  /x/g  >>= *::*.__defineSetter__(\"__proto__\", ({}).hasOwnProperty) % window.*; ((yield *::*))) {(0/0);if((<y><z/></y> <= *)) { if (*) {yield;; }} else {export *;yield; } }");
tryItOut("<ccc:ddd> </ccc:ddd>");
tryItOut("let (constructor = new (<><x><y/></x></>)(<x><y/></x>.prop, #3={a:#3#}), __noSuchMethod__ = [15,16,17,18].filter(Math.sin, <x><y/></x//h\n>)) { gc }");
tryItOut("{throw  \"\" ;gc() }");
tryItOut("yield ((Function).apply());");
tryItOut("with(prop){let constructor, __parent__ = 0x99;( /x/ ); }");
tryItOut("yield <><x><y/></x></> >>= <x><y/></x>.yoyo(({ set prop __noSuchMethod__ (__noSuchMethod__, __noSuchMethod__)<y><z/></y> }));");
tryItOut("yield {}\nyield\nexport prototype;");
tryItOut("(-3/0)");
tryItOut("L:with(__parent__)break ;");
tryItOut("M:switch((<y><z/></y>[0x99])) { case 1: switch(<><x><y/></x></>) { case 7: break;  }([,,z1])\nbreak; break;  }");
tryItOut("/*for..in*/for(__parent__ in ((Math.pow)([] = Exception(+prototype.(<x><y/></x>), (__parent__ = __iterator__)))))yield (yield false);");
tryItOut("if(prototype = <y><z/></y>) {function(q) { return q; } } else  if ((({a2:z2}).propertyIsEnumerable(\"__noSuchMethod__\"))) {__iterator__ = .2, __count__; } else yield <y><z/></y>;");
tryItOut("if((__noSuchMethod__.__iterator__ getter= __noSuchMethod__) .. <x><y/><x>\r) ;(*::*);");
tryItOut("L: /*for..in*/for(__proto__ = __proto__ = window in constructor) {{} }");
tryItOut("if(__count__.constructor = constructor.isPrototypeOf(@foo)) { if ((yield ([<x/>].map(gc)))) return; else {(<x/>); }}");
tryItOut("with({prototype: <x/>})throw @foo;");
tryItOut("/*infloop*/L:for(this.propertyIsEnumerable(\"constructor\"); prototype.([z1]); (return--)) L: {throw [[]]; }");
tryItOut("L:with({__iterator__: [[, ], prop, constructor, [, , , []]] = window}){L: with(/*\n*/__iterator__ =  /x/g ){true; }/*infloop*/for(var ({ prototype: constructor, constructor: __noSuchMethod__ }) = (-0) @ 3.141592653589793; continue M;; ((<x><y/></x>).call(<>__count__</>, constructor))) {return  \"\" ; } }");
tryItOut("{} const prototype;");
tryItOut("return true;");
tryItOut("{{([z1,,]);switch(<x><y/></x>) { default:  } } }");
tryItOut("while(((<x/>)) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <y><z/></y>)  '' ;if(undefined) {this; } else {function::function::__iterator__;return <><x><y/></x></>; } }");
tryItOut("if(constructor) {;prototype; } else  if (*) /*infloop*/for(let __count__ = __noSuchMethod__; *;  /x/ ) {throw undefined; } else export *\n");
tryItOut("if(__proto__.prototype getter= Function) { if (__iterator__ = 1e81) {; }} else /*for..in*/for(__count__ in ((Math.pow)( /x/ )))function (__count__) { return  /x/  } ");
tryItOut("for(let y in []);");
tryItOut("{/*for..in*/for(const __count__ in ((function  __parent__ () { return this } )([]))){; } }");
tryItOut("/*infloop*/while(<x><y/></x> .@  /x/ ){gc()export *; }");
tryItOut("with({}) return;");
tryItOut("/*for..in*/for(let [constructor, function::constructor] = <x/> / [,,z1] in [[15,16,17,18].map(true, null)]) return [z1,,];");
tryItOut("return;");
tryItOut("let (__iterator__) { /*for..in*/for(constructor in ((<x><y/></x>)([z1]))){var __count__, __count__;__count__ = (-0); } }");
tryItOut("yield <y><z/></y>\n");
tryItOut("L:if((<x><y/></x> + 1e+81)) {var __proto__, __proto__ = window;export *; } else {}");
tryItOut("switch(#1=[#1#]) { default: __count__, __count__;break;  }");
tryItOut("throw prototype;");
tryItOut("if(prototype.prototype = constructor) {yield []; }");
tryItOut("with({}) { let(constructor, [, prop, , , ] = null) { try { return; } catch(prototype if (function(){__noSuchMethod__(1e-81) = __noSuchMethod__; { throw StopIteration; } catch(__proto__) { {} } finally { for(let y in []); }  } ");
tryItOut("{yield __parent__;switch(window) { case <x/>: ;break;  } } const prop;");
tryItOut("with({}) { with({}) this.zzz.zzz; } ");
tryItOut("if( /x/g ) { if (*::*) throw undefined; else prototype = null;}");
tryItOut("/*infloop*/for(__parent__ = <y><z/></y>; [, __iterator__]; [[1]]) @foo;");
tryItOut("{}");
tryItOut("if((yield (1.3 << undefined.@*))) /*for..in*/for(var prop in ((new Function)(#3={a:#3#})))throw this; else  if (__proto__ = undefined) {yield this.__defineSetter__(\"constructor\", function () { yield 0/0 } );{} } else M:if(<zzz>window</zzz>) {var __noSuchMethod__ =  /x/ , prop; } else throw __noSuchMethod__;");
tryItOut("let (__count__ = this.zzz.zzz, prop) { 'haha'.split\nif(<x><y/></x>) { if (__iterator__) undefined; else {0.1; }} } const constructor;");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((#0=<><x><y/></x></>).__defineSetter__)((({prototype: false}).unwatch(\"__proto__\")) instanceof (*.__proto__ = ({this }))))){/*for..in*/for(let [__proto__\f, constructor] = <><x><y/></x></> in false) {constructor, __iterator__ = <x/>;window; }__proto__; }");
tryItOut("this.zzz.zzz;\nM:with(-3/0);\n");
tryItOut("/*for..in*/for([constructor, constructor] = prop.isPrototypeOf(__proto__) in [z1,,](5.0000000000000000000000)) yield\n");
tryItOut("/*for..in*/for(__count__ in [] = prototype) {if([15,16,17,18].map((({}).hasOwnProperty).call, false)) { if (3/0.__lookupGetter__(\"__parent__\")) {}} else {}/*for..in*//* nogeckoex bug 349964 */ for  each(prototype([z1]) in (__parent__.@foo)) return 1.3; }");
tryItOut("/*for..in*/for(__count__ in ((function  __proto__ () { yield ~((function (__parent__) { return return; | *::* } )([15,16,17,18].filter('haha'.split, [,,]), (uneval(<y><z/></y>)))) } )(((uneval(__noSuchMethod__ = window))))))try { for(let y in []); } catch(__iterator__) { (@foo); } finally { for(let y in []);\t } \t");
tryItOut("do {[1,2,3,4].map } while(((uneval((__proto__'.unwatch(\"__parent__\")))) ? ({__iterator__: (function ([y]) { })(), __count__ setter: eval }) : (prototype = yield;.@*)) && 0);");
tryItOut("return;");
tryItOut("with({}) yield \f__proto__.@*;");
tryItOut("L:with({__noSuchMethod__: (<><zzz>*</zzz></> & __iterator__ = <><x><y/></x></> <<= prototype)}){/*for..in*/for(var x::prop in ([ \"\" .__lookupGetter__(\"__proto__\")].map([,,]))) L:with(((__parent__).throw(<><x><y/></x></>).watch(\"__iterator__\", Math.sin)))return *; }");
tryItOut("if(new (<y><z/></y> instanceof *::*)()) {with(window){{} } } else {throw window\n\nthrow ({a1:1}); }");
tryItOut("let (__iterator__ = 0/0, __parent__ =  /x/g ) { yield this; }\n;");
tryItOut(";");
tryItOut("/*infloop*/for((__parent__ = 0); <x><y/></x> ?  \"\"  : <x><y/></x/*\n*/>; ({__noSuchMethod__: __iterator__.(.2), __proto__: (prototype = [1,,]) })) [1,2,3,4].map");
tryItOut("if((function (__proto__, __noSuchMethod__) { yield <><x><y/></x></> } )(<y><z/></y> + <x/>, <><x><y/></x></>)) { }");
tryItOut("L: if(@foo) {0x99 } else  if (#3={a:#3#})  '' ; else {}");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/for(constructor = (uneval( /x/g  ? __count__ :  /x/ )); * .@  '' ; prototype = this) {{}M:switch(false) { default:  } }");
tryItOut("do {/*infloop*/while((((undefined).watch).call)(<><x><y/></x></>))<x><y/></x>;/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <x/>) {<x/>; } } while((((function(q) { return q; }).call(<x><y/></x>,  \"\" ,  /x/g ).__lookupGetter__(\"[__count__, constructor, , ({ __count__: constructor }), ]\")) =  /x/g ) && 0);");
tryItOut("while((__iterator__.__iterator__ \fgetter= 'haha'.split) && 0){gc()\n }{/*for..in*/for(var prop in ((true)(((function ([y]) { })())))){; } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const prop; (({ constructor: __parent__ }) =  '' ); function::constructor) (*::*);");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x><y/></x>) {(<x><y/></x>);break L; } while( '' );");
tryItOut("{return;continue ; }");
tryItOut("with({__proto__: (new (function () { return null } )(__proto__, null))}){(<><x><y/></x></>); }");
tryItOut("if(false.__noSuchMethod__ = null) throw  /x/g ; else  if ( /x/ ) export *\n");
tryItOut("M:if((({a1:1}))[arguments].throw(export *;[-1])\f) return <x/>; else  if (#3={a:#3#}\f) yield false; else export constructor;");
