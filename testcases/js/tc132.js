tryItOut("/*for..in*/for(prototype = this in (uneval(null))++) while(([[1]]) && 0){export __parent__; }");
tryItOut("{} const __count__;");
tryItOut("return __parent__.prop = this.zzz.zzz\f;<>* && <x><y/></x></>");
tryItOut("return");
tryItOut("yield");
tryItOut("if(([z1,,] instanceof prototype.__defineSetter__(\"__iterator__\", prop))) { if ((<x><y/></x>[prop] if (window))) {export *;prototype = (-0), __count__ = <y><z/></y>; } else {}}");
tryItOut("L: {return [each.__proto__ = this];with({prop: false})/*\n*/{var prototype = *::*, __noSuchMethod__ = 5.0000000000000000000000; } }");
tryItOut("var prop;\nreturn <><x><y/></x></>;\n");
tryItOut("return ({prototype: (-0), __proto__: false });");
tryItOut("with({prop: let (1e-81 = *) 1e81})[11,12,13,14].sort;");
tryItOut("let (__iterator__ = @foo.prop & this) { /*infloop*/for([[1]]; new (constructor)(window); \n1.2e3) {gc() } }");
tryItOut("{continue ;break M; }");
tryItOut("/*for..in*/for(const __parent__ in <x><y/></x>) {export prototype; }\nyield;");
tryItOut("with({prop: yield prop.prop})if('fafafa'.replace(/a/g, function (__iterator__) { return null } )) {M:if(prop) ; else {export \t*;return; } }");
tryItOut("(<x><y/></x>);");
tryItOut("if(((({set getter: function(y) { yield y; let __noSuchMethod__;; yield y; }, __count__ setter: function(y) { yield y; yield;; yield y; } })).watch(\"prop.@foo\", Function).eval(yield <y><z/></y>.watch(\"__noSuchMethod__\", [1,2,3,4].map)) ^= return).__iterator__) /*infloop*/for(__count__; typeof <><x><y/></x></>; window /= window)  else  if ((uneval(eval(\"new ((yield undefined--))()\", [,])))) with({__count__: [z1,,]})throw this.throw(this);");
tryItOut("with({__iterator__: __noSuchMethod__.__proto__}){for(let y in []);M:if(this.unwatch(\"__iterator__\")) constructor; }");
tryItOut("with((L:while((function  prop () { var prototype; } (window, undefined)) && 0){let __proto__ = <><x><y/></x></>, __proto__ = window; } = (3.141592653589793)))return  { yield @foo } ;\nfunction (constructor, __noSuchMethod__) { yield window } \n");
tryItOut("for(let y in []);");
tryItOut("{; }");
tryItOut("{L: {<x><y/></x>;throw 3; } }");
tryItOut("M:if(__proto__ = case __count__: .hasOwnProperty(\"__parent__\")) return; const __iterator__;");
tryItOut("/*infloop*/L:for(({ prototype: constructor.__count__ }) =  \"\" .watch(\"__parent__\", new Function); [-0].filter(eval) + constructor; __noSuchMethod__) {throw 1.2e3;__noSuchMethod__; }");
tryItOut("while((\n__noSuchMethod__.__noSuchMethod__ getter= function(q) { return q; }) && 0){}\n");
tryItOut("/*for..in*/for(let __proto__ =  in ({ get __count__ __noSuchMethod__ (__iterator__)({__iterator__ getter: (1 for (x in [])),  set prototype() { export *; }  }) })) {{}export *;\n(this);\ntry { return; } catch(__proto__) { ; }  }");
tryItOut("L: {if( /* Comment */window.__lookupSetter__(\"prototype\")((__parent__+=\n<y><z/></y>), <><x><y/></x></> ? -3/0 :  \"\" )) {M:if(<><x><y/></x></\t>) undefined; else  if (#1=[#1#]) {return 0/0; } else return; } }");
tryItOut("let (__parent__ = window, [z1,,]) { {} }");
tryItOut("{if(<x/>) {return;<x><y/></x>; } else  if (1e+81) {const constructor, prop =  '' ;export *; } }");
tryItOut(" set __noSuchMethod__(__parent__.prop, __noSuchMethod__)__noSuchMethod__");
tryItOut("/*infloop*/for(let prototype = @foo; 1e+81; <x><y/></x>) return;");
tryItOut("/*infloop*/L:for([({ __count__: __noSuchMethod__, __iterator__: ( \"\" )(__noSuchMethod__) }), , __iterator__, []] = let (prop = <x><y/></x>) true << this; new Boolean(<><x><y/></x></>.hasOwnProperty(\"__parent__\")); <>\f<bbb xmlns=\"<x><y/></x>\"><zzz> '' </zzz></bbb></> .@  /* Comment */this) __proto__.__noSuchMethod__ = prototype;");
tryItOut("gc()");
tryItOut("if((set)(<y><z/></y>, <x/>).__lookupGetter__(\"prop\")) /*infloop*/do (<x><y/></x>); while(<x><y/></x>); else constructor;");
tryItOut("with({constructor: __proto__.prop = ([*]) > <y><z/></y>}){function(q) { return q; } }");
tryItOut("{(__count__); }\n");
tryItOut("with(1e4)export prototype;");
tryItOut("/*for..in*/L:for(let constructor.*::* in (((([1,2,3,4].map(function::constructor.prop =  '' ))).__defineSetter__)(((Math.pow)(<y><z/></y>)) * (({__iterator__ setter: new Function }))))){yield;const __count__; }");
tryItOut("/*for..in*/for(let [, __iterator__, , prop, constructor] in ((function (__iterator__) { yyy } )(this.__defineGetter__(\"prop\", function(y) { yield y; @foo;; yield y; })))){var __count__ = <y><z/></y>, prototype; }");
tryItOut("with({}) return;");
tryItOut("");
tryItOut("try { export *; } catch(prop) { constructor setter: 'haha'.split } finally { throw this; }  const __proto__;");
tryItOut("if(this.watch(\"constructor\", function (__proto__, prop)<><x><y/></x></>)) return; else  if (({__iterator__: (Error( '' )) })) let prototype;");
tryItOut("do {(1 for (x in [])) } while(((([] ? __noSuchMethod__ : <y><z/></y>).prop)) && 0);");
tryItOut("/*infloop*/do with({}) { return function(id) { return id }; }  while(3);");
tryItOut("if((\n[1,,])) {return \twindow;throw [[]]; } else  if (__noSuchMethod__.__parent__) {throw  /x/ ;window.__parent__ }");
tryItOut("__count__ = __count__;");
tryItOut("/*for..in*/L:for(const [__proto__\t, x::constructor] = \r(eval(\"export *;\", (__count__ = <><x><y/></x></>))) in (this.isPrototypeOf(@foo))) return;");
tryItOut("while(((prototype = [(<x><y/></x>.( /x/g ))])) && 0)with(((__proto__) = window :: <x><y/></x>))yield true;");
tryItOut("/*infloop*/while(prototype = @foo)if(__iterator__.__parent__ setter= Function) {yield this;( /x/ ); } else  if ((p={}, (p.z =  /x/ )())) {(undefined);\n }");
tryItOut("do ( \"\" ); while((<x><y/></x>.__parent__ = *) && 0);");
tryItOut("if([constructor.__iterator__ getter= (new Function(\"var prototype, __count__ = constructor;\"))]) { if (window ? <><x><y/></x></> :  /x/g ) {{} }} else {continue L; const constructor; }");
tryItOut("throw arguments;/*infloop*/for(__proto__ = <x><y/></x>; null; <><x><y/></x></>) {}");
tryItOut(";");
tryItOut("L:if((function(y) { yield y; with(window); yield y; })((<x><y/></x>.__lookupGetter__(\"prop\")), <x><y/></x>)) { if ((({__iterator__:  /x/  }) >>= new /a/gi(__iterator__, @foo)\t)) {;{} } else {{}yield; }}");
tryItOut("if((-((this)(<x/>)))) { if ((#2=[this.__defineSetter__(\"__noSuchMethod__\", function (constructor) { __proto__ = true; } )])) <y><z/></y>;} else {return;{} }");
tryItOut("{L: export *;( { (@foo); } ); }");
tryItOut("(<x/>)\n");
tryItOut("L:switch(window) { default: return;break;  }");
tryItOut("if((({ get constructor() { yield  \"\"  } , prototype: @foo }))) {<\t><x><y/></x></>; } else  if (this.zzz.zzz) ");
tryItOut("/*infloop*/for(prototype; <x/>; ({a1:1})) {; }");
tryItOut("if(__iterator__ = [\t({ __noSuchMethod__: prop, __iterator__: __proto__ })]) throw 4.;gc() else  if ([1,,]\n.@foo.throw(<><xxx {__iterator__}={<y><z/></y>.\runwatch(\"constructor\")} /></>)) {<x><y/></x>; } else return;");
tryItOut("while((__iterator__.(<x/>)) && 0)<bbb xmlns:ccc=\"@foo.__defineGetter__(\"__noSuchMethod__\", (({}).hasOwnProperty).apply)\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*for..in*/for([__proto__, __proto__] = <y><z/></y> for (constructor in <x/>) in eval(\"#1=[eval(\\\" '' \\\", <x><y/></x>)]\", prop))  const constructor;");
tryItOut("return;");
tryItOut("let prop = ({}), constructor = 3;\n(window);\n");
tryItOut("yield  /x/g \n");
tryItOut("/*for..in*/for(var prop in (033.hasOwnProperty(\"__noSuchMethod__\") <= ({ __noSuchMethod__: ({ constructor: __parent__ }) }) = window\n)) {__noSuchMethod__, __noSuchMethod__;[1,2,3,4].map }");
tryItOut("/*infloop*/for(var __count__; ((({constructor: (window.prop), constructor setter: (1 for (x in [])) }))\f[([z1,,] %= window)]); <y><z/></y>.* ?  /* Comment */(*.__defineGetter__(\"__proto__\", [1,2,3,4].map)) : new /a/gi(1.3--)) {L:if(\t*::*.hasOwnProperty(\"prop\")) { if ((0x99 << 5.0000000000000000000000)) {} else {}} }");
tryItOut("");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/L:for(let __count__ in ((function (({ __noSuchMethod__: __noSuchMethod__ }))\f<x/> .@x:: new *(*::*, <x><y/></x>) === true)((prop.__iterator__)))){L: {gc()yield; }(*); }");
tryItOut("if(((p={}, (p.z = <><x><y/></x\f></>)()))) {([1]); }\n\f/*for..in*/for(const prop in ((<x><y/></x>)(<><x><y/></x></>)))return .2;\n");
tryItOut("/*infloop*/while(__parent__)/*infloop*/for(__iterator__; new function(y) { yield y; return this\r;; yield y; }(null);  /x/ ) {gc() }");
tryItOut("throw __parent__;");
tryItOut("; const __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("{let __count__, __iterator__; }");
tryItOut("/*for..in*/for(var __parent__ in (((__noSuchMethod__ = <y><z/></y>))(window.yoyo((function ([y]) { })()))\f))/*for..in*/for(const __count__ in [,]) {export __proto__; }");
tryItOut("throw *::*\nwith({}) let([] = __count__ = <y><z/></y>) ((function(){let(__count__) ((function(){prototype = __noSuchMethod__;})());})());");
tryItOut("if(<><x><y/></x></> :: [z1]) yield @foo; const __count__;");
tryItOut("/*infloop*/L:while(eval(\"!new (*::*)(<x/>, <x><y/></x>)\",  )){(<y><z/></y>); }");
tryItOut("/*infloop*/M:while(<y><z/></y> instanceof true--)while(( '' ) && 0)throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(var constructor.__proto__ in (([1,2,3,4].slice)(*::* =  /x/  > \n<x/>.hasOwnProperty(\"prototype\")))){/*for..in*/for(const __count__ in this) {prop =  \"\" ; }export __proto__; }");
tryItOut("/*for..in*/for(const (__noSuchMethod__.yoyo(@foo))/*\n*/(__iterator__) in ((Function)([,]))){if(\t<x/>.unwatch(\"__proto__\") /= new *::*(<x><y/></x>, *::*)) {} else  if (prototype) {/*for..in*/for(var [__parent__, constructor] = * in <y><z/></y>) {throw <y><z/></y>; } } else throw __proto__; }");
tryItOut("/*infloop*/for(const __count__; [__proto__ = <><x><y/></x></> for ((__parent__) in \n<><x><y/></x></>)]; (this.__defineGetter__(\"prop\", function  constructor (__count__, __iterator__) { yield <x><y/></x> } )).prop = (this).\twatch((<><x><y/></x></>)).__defineSetter__(\"prototype\", ({}).__lookupGetter__)) {L:if(1e4.hasOwnProperty(\"prototype\")) { if (3.141592653589793 -= 1.2e3) {{} } else return  '' ;} }");
tryItOut("if( /x/ ) { if (([<><x><y/></x></>].filter(new Function))) prop, __proto__ = <x><y/></x>; else var __count__ = <><x><y/></x></>;}");
tryItOut("__parent__.__parent__ = [15,16,17,18].filter( /x/g , ({a2:z2})) += [[[]]].map('haha'.split);");
tryItOut("for(let y in [5,6,7,8]) continue ;");
tryItOut("while((*) && 0){return; }");
tryItOut("let(__count__) ((function(){let(__count__, __iterator__) { with({}) return;})());");
tryItOut("while(((\fthis <= null)) && 0)");
tryItOut("const __parent__ = (-0) /= <><x><y/></x></>, __noSuchMethod__ = *::*\n/*for..in*/for(__noSuchMethod__ in (((gc).call)(false))){yield __proto__; }");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: ({ __iterator__: ({ __iterator__: constructor }), prototype: ({ __parent__: __parent__, __iterator__: __parent__ }) }), prototype: ({ constructor: __proto__ }) }) = <x><y/></x>.hasOwnProperty(\"__proto__\").__lookupSetter__(\"__iterator__\"); (<x/>)(f).*; (<x/> for (__parent__ in try { return <x><y/></x>; } catch(prototype) { yield *::*; } ) for (prototype in -3/0))) {let __noSuchMethod__\nvar __iterator__; const __count__;__noSuchMethod__; }");
tryItOut("if(this ? <><x><y/></x></> : *::* >>= (\")) { if (<><x><y/></x></>.isPrototypeOf(3)) throw <x/>; else {;M:with({__iterator__: <><x><y/></x></>})yield; }}");
tryItOut("/*infloop*/for(*::*; undefined; __proto__) {return  /x/ ;return; }");
tryItOut("/*infloop*/do {/*infloop*/do {gc()yield <x><y/></x>; } while(<y><z/></y>);gc() } while((((Math.sin)((new (this)(__count__, prototype)))) .. ([this.yoyo( /x/ )].sort([1,2,3,4].map))));");
tryItOut("return this ^ <x><y/></x>;");
tryItOut("__iterator__ = __proto__;");
tryItOut("do yield [(*::*.eval(<x><y/><\n/x>)) for (__proto__ in <x/>) for each (constructor in undefined)]; while((([15,16,17,18].filter(({}).hasOwnProperty, this)).isPrototypeOf(this--.@*)) && 0);");
tryItOut("try { __proto__ = constructor; } catch(__proto__.__noSuchMethod__) { return; } ");
tryItOut("throw StopIteration;");
tryItOut("__proto__ = 3.141592653589793 |= ({prop: (__iterator__ = <x><y/></x>) }).__noSuchMethod__ = __count__;");
tryItOut("export prototype;\nreturn;\n");
tryItOut("return __iterator__");
tryItOut("throw this; const __count__\n");
tryItOut("if(prop = ([let ([], prop = __count__) (<x><y/></x> >>> *).eval((<x><y/></x>\n))].map(function  x::__iterator__ (constructor) { {} } ))) gc() else  if (new (__count__ = (<><x><y/></x></> || <x><y/></x>))(((function(id) { return id }).watch))) {{}{prop = ({}); } }");
tryItOut("switch((<x><y/></x>)[<><x><y/></x></>]) { case (prototype.__parent__ = * < this): if(([15,16,17,18].filter([1,2,3,4].map, <x><y/></x>))) yield false; else  if ((-1)) {} else var __iterator__, prototype = <><x><y/></x></>; }");
tryItOut("/*infloop*/L:while(({ __iterator__: prop }) = (true.*).isPrototypeOf([1,2,3,4].slice).propertyIsEnumerable(\"constructor\"\f))yield (({a1:1}).watch(\"prop\", gc));");
tryItOut("L: if(<><x><y/></x></>.*) { if (#0=\r[@foo.prop]) yield; else gc()}");
tryItOut("L:if((undefined.unwatch(\"prop\"))) { if ((__noSuchMethod__ = <x><y/></x>)) yield; else {return; }}");
tryItOut("M:with(\n<y><z/></y>.__count__){constructor(<x/>) = #3={a:#3#}.__proto__;if(++__noSuchMethod__(window) = this.zzz.zzz) __iterator__ = 0/0\n({}).hasOwnProperty else {([[1]]); } }");
tryItOut("(<x><y/></x> ?  ''  : <><x><y/></x></>);\nbreak M;\n");
tryItOut("L:if(eval(\"null\",  '' )) {do {export __count__;export __iterator__; } while((<x/>.__defineSetter__(\"__count__\", (*::*).__defineSetter__)) && 0); }");
tryItOut("{{}switch((#2=[__noSuchMethod__])) { default: break; break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in arguments) {gc() }");
tryItOut("return;");
tryItOut("L:switch(([#3={a:#3#}.hasOwnProperty(\"function::__proto__\") if (3/0)])) { default: [1,2,3,4].slicecase 2: \nexport *;\ncase 2: break; case -0 >>>=function(id) { return id }: with( /x/g )yield;break;  }");
tryItOut("let ([({ prop: prototype, __parent__: __iterator__ })], __iterator__ = ()) { let __count__ = null, __parent__ = [z1,,]; }");
tryItOut("/*infloop*/M:for(var __iterator__; yield <x><y/></x>;  :: __iterator__ .. 1.2e3.hasOwnProperty(\"__noSuchMethod__\")) yield <><x><y/></x></>;");
tryItOut("this.zzz.zzz;");
tryItOut("switch((<><x><y/></x></>.hasOwnProperty(\"__parent__\")) @ 3.141592653589793) { case 9: break; case 3: /*for..in*/for(var __noSuchMethod__ in new Function( /x/g , <><x><y/></x></>)) {; const __count__;export *; }break; break; break;  }");
tryItOut("\n*;return <x/>;");
tryItOut("if([] for (constructor in <x/>).unwatch(\"prototype\")) return;");
tryItOut("if() {__parent__ = <x><y/></x>var __noSuchMethod__ = 0/0; } else  if (0) ; else ");
tryItOut("/*for..in*/for(const prototype in *::*) {const __parent__; }");
tryItOut("/*for..in*/M:for(const [prop, __parent__] = ((__noSuchMethod__) if (<x/>).__lookupSetter__(\"constructor\")) in ([11,12,13,14].map)) if(window) if(null) { if ( \"\" ) continue ; else {{}export __parent__; }}");
tryItOut("var __parent__ = <x><y/></x>;");
tryItOut("/*infloop*/L:for(let __proto__; setter; @foo) (<x><y/></x>);");
tryItOut("yield <x><y/></x> >= (<x><y/></x> %= @foo).valueOf(\"number\");");
tryItOut("this.zzz.zzz\n");
tryItOut("L:with({__iterator__: <><x><y/></x></>})const __count__, function::__parent__;;");
tryItOut("constructor = prototype;");
tryItOut("/*infloop*/M:for(([1e+81]); <x><y/></x>; eval(\"<x><y/></x>\", <><x><y/></x></>)) \fexport __iterator__;");
tryItOut("L: {L: continue ;<x><y/></x>; }");
tryItOut("L:if(new gc((__proto__ = <y><z/></y>)(({a2:z2}).throw(<x/>)), (prop = (prop = null)))) { if ((true >=  '' ).eval(1.3 = <y><z/></y>)) {var constructor = [[]], __parent__ = 3/0; }} else const __proto__ = <x/>;");
tryItOut("let (constructor = __noSuchMethod__ = ({__noSuchMethod__: this,  get __parent__(prototype, constructor) { yield [z1] }  }), __parent__) { ; }");
tryItOut("continue M;\nfunction(y) { yield y; __proto__, __iterator__;; yield y; }\n");
tryItOut("/*infloop*/M:for(let each; new RegExp(__proto__ = [,,z1]); [[1]]) with({__parent__: __count__.__parent__})return;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, constructor] = ((new (eval)(<x><y/></x>, )).propertyIsEnumerable(\"prop\")) in eval(\"throw function::__noSuchMethod__;\", __count__)) (<><x><y/></x></>);");
tryItOut("return;");
tryItOut("with( /x/g ){<x><y/></x>; }");
tryItOut("if(window) {(*);(<><x><y/></x></>).watch }");
tryItOut("L:switch(<x><y/></x>) { case <x/>:  }");
tryItOut("do {(1e+81);export *;\n{}\n } while((this.zzz.zzz) && 0);");
tryItOut("continue ;{}");
tryItOut("/*infloop*/for(<><x><y/></x></>; <x><y/></x>; window) {__parent__: <><x><y/></x></>export *; }");
tryItOut("if((eval(\"this\", 5.0000000000000000000000))) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __parent__ = __proto__;) {export __count__;return <x/>; }");
tryItOut("M:with((void -3/0).call(__count__:  /x/g , ))* & *;");
tryItOut("{/*infloop*/for(var \t({ prop: __count__ }) =  ''  % 1.3; (function  __count__ (each) { yield <x/> } )( /x/ .hasOwnProperty(\"__proto__\")); ({ set prop(prototype) { yield null }  })) {continue ;return; } }");
tryItOut("/*for..in*/for(var __parent__ in __iterator__ = <><ccc:ddd>yyy</ccc:ddd></>) {break M;with([11,12,13,14].map){return; } }");
tryItOut("/*for..in*/for(let [[, throw @foo;, , ], prototype] = (eval(\"this.zzz.zzz\", new ( /x/g )(prop))) in (({__noSuchMethod__: constructor }))[-1])  \"\" ;");
tryItOut("var prop = <x><y/></x>, constructor;");
tryItOut("try { return <><x><y/></x></>; } catch(prototype if [z1,,] =  \"\" ) { (prop); } finally { continue ; } ");
tryItOut("/*for..in*/for(let [__parent__, __proto__] = (<> </>.(__count__.valueOf(\"number\"))) in yield __noSuchMethod__.@*) {(false);/*infloop*/M:for(let prop; <y><z/></y>; null) {throw  \"\" ; } }");
tryItOut("if(((<x><y/></x>)( /x/ , __iterator__))) *::*; else gc()");
tryItOut("/*infloop*/while(<ccc:ddd></ccc:ddd>.((*::*.yoyo(<><x><y/></x></>))))switch( { return (prop = __proto__) } ) { case 0:  }");
tryItOut("{}\nthrow <x><y/></x>;\n");
tryItOut("default: if( '' .propertyIsEnumerable(\"prop\")) /*for..in*/for([prop, __iterator__] = <x><y/></x> in  \"\" ) {( '' ); }break; break; case [1,,] + <x/>: case 5: \n const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__.__parent__ in <x/> ? <><x><y/></x></> : <><x><y/></x></>) return;");
tryItOut("/*for..in*/for(const function  __noSuchMethod__ (prop) { return <x><y/></x> < [z1,,] } (true) in (((new Function(\"/*for..in*/M:for(var [__iterator__, __iterator__] = (undefined.throw()) in *) { }\")))((~new (new Function(\"if((__count__).watch(@foo)) <x><y/></x>; else  if (( /x/g  instanceof 4.)) ({}).__lookupGetter__ else {continue L; }\"))(this.zzz.zzz, window))))){yield 0x99 == <>\t<x><y/></x></>; }");
tryItOut("/*for..in*/for(var prototype = (__noSuchMethod__ = __noSuchMethod__ >>> (function ([y]) { } / true)) in <x/>.__lookupGetter__(\"prop\")) yield;");
tryItOut("var prototype;");
tryItOut("window;\ngc()\n\nvar __parent__");
tryItOut("/*infloop*/while(this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)){return;{} }");
tryItOut("/*for..in*/for([__noSuchMethod__, __count__] = (new <><x><y/></x></>(window instanceof -3/0,  \"\" ).unwatch(\"__count__\")) in (prop%=true)) {@foo;/*infloop*/L:\ffor(var this = []; arguments; *) {__proto__ = 1e81; } }");
tryItOut("try { throw constructor; } catch(prop) { try { export __parent__; } catch(__count__) { __proto__, prop; }  } ");
tryItOut("{if(this) { if ( super ) var constructor, __parent__ = *;} else throw __iterator__;<{constructor}></{constructor}> }");
tryItOut("while((<x><y/></x>) && 0){return;return; }");
tryItOut("/*for..in*/for(let prototype in <y><z/></y>) ;");
tryItOut("({ __count__: ({ prototype: ({ __iterator__:  ''  }), constructor: [] }), __proto__: [__iterator__, , __iterator__, [({ __parent__: __parent__ }), , constructor]] })");
tryItOut("with({}) for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/do return; while(*::* in Boolean(this));M:do {{yield [,,];yield *::*; } } while(((1e-81 in [,]) /= (Math.pow)) && 0);");
tryItOut("if((*.__defineSetter__(\"__iterator__\", this\f)).hasOwnProperty(\"__proto__\")) {/*for..in*/for(__iterator__ in ((<x><y/></x>)((<><x><y/></x></>)[prototype])))(-0);let __count__, __parent__;throw <x><y/></\tx>; } else if(prototype.prototype = __parent__ = 0x99) { if (( /x/ .eval(<x><y/></x>))) {/*infloop*/L:for(<x/>; 'fafafa'.replace(/a/g, window); <x/>) {{const prototype = <><x><y/></x></>;yield  \"\" ; } } } else export *;/}");
tryItOut("with(true){switch(__noSuchMethod__) { case 3: this;default: <><x><y/></x></>; } } const __count__");
tryItOut("/*infloop*/for(const __proto__; new <><x><y/></x></>( { yield <x/> } ); \nwindow.__parent__ = new (033)(<y><z/></y>, this)) {;/*for..in*/for(var prop = * in window) {-3/0; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in {}) export __iterator__;");
tryItOut("throw [1,,];");
tryItOut("throw 1e4;\nyield;\n");
tryItOut("L:with((-0))");
tryItOut("( /x/g ).watch\nif((yield __proto__ <<= this)) {let __proto__ = <y><z/></y>; } else {; }");
tryItOut("if(yield <x><y/></x>) { if (\n__parent__) } else ;");
tryItOut("/*infloop*/for(__count__; <y><z/></y>; (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice))) while((this) && 0){export __count__; }");
tryItOut("/*for..in*/\tM:for(let [constructor, prop] = [(__parent__ = [, [, \f[__count__, , x::prototype, , ], , , __proto__], (\f{ __count__: ({ __count__: __iterator__, __count__: __noSuchMethod__ }), prototype: __count__ }), \t])] in __noSuchMethod__.__defineSetter__(\"constructor\",  /x/ )) /*for..in*/for(const (prototype) in ((({}).hasOwnProperty)(<><x><y/></x></> *= <y><z/></y>)))null;");
tryItOut("let(__count__ = #0=[Exception()], __parent__) { function::__count__ = __noSuchMethod__;");
tryItOut("if(((constructor = <x><y/></x>)())) { if ((*::*.__lookupSetter__(\"prop\"))) if(__noSuchMethod__ = return <x><y/></x>;) {(-0)<><x><y/></x></>; } else {{} }}");
tryItOut("if(({a1:1})) { if (this) }} else {__iterator__ = *; }");
tryItOut("/*for..in*/L:for(var [prop, prototype] = [z1] in <x/>) [[1]]");
tryItOut("if(-eval(\"(p={}, (p.z = ({a2:z2}))())\", ({__iterator__: <><x><y/></x></>}))) /*infloop*/for(const prop;  /x/g ; <y><z/></y>) {break L; }");
tryItOut("/*infloop*/for(*::*; <y><z/></y>;  /x/ ) {throw *::*;gc() }");
tryItOut("if(false) {yield;return *; } else throw <><x><y/></x></>\n\n(<><x><y/></x></>)\nbreak ;\n");
tryItOut("M:if(this.__defineSetter__(\"({ prop: [, ({ prototype: [], __count__: __proto__ }), [({ __parent__: prototype })], ({ prop: ({ __proto__: __parent__ }) }), ] })\", [typeof this])) /*for..in*/for(__parent__ = --false in <><x><y/></x></>) {} else  if ((p={}, (p.z = @foo)())) if((new (prop)())) { if (this >> prototype) /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <><x><y/></x></>) throw <x/>; else {let __parent__ = [z1], __iterator__ = @foo; }}");
tryItOut("if(prop =  /* Comment */<x><y/></x>.propertyIsEnumerable(\"prop\")) let (__parent__) { {}\f }");
tryItOut("__iterator__");
tryItOut("/*for..in*/for(let __iterator__ in null) {yield; }");
tryItOut("/*infloop*/while(*::*)export *\n{gc() }");
tryItOut("do {if(constructor) {(arguments); } else  if ([,,]) {new Function } } while(((__proto__.__noSuchMethod__ = <><x><y/></x></> for each (__iterator__ in <><x><y/></x></>) if (<x><y/></x>))) && 0);");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = this, __proto__ = undefined) ((function(){export *;})());");
tryItOut("((function(id) { return id })[ /x/ ] for each (yield in <x/>) if (undefined)) { default: case this ? yield 3 : return: break;  }");
tryItOut("let(prototype = (new (constructor.constructor = 1e+81, #1#)(__iterator__))) ((function(){return;})());\nthrow <x/> ? [,,z1] : *::*;\n");
