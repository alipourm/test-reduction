tryItOut("{/*for..in*/for(let __noSuchMethod__ in (new (<x/>.__proto__)())) yield; }");
tryItOut("constructor =  '' ; const __noSuchMethod__;");
tryItOut("/*infloop*/while(<x><y/></x>){yield; }");
tryItOut("L: {function(y) { yield y; throw __proto__;; yield y; }{} }");
tryItOut("L: {([(@foo(-1, *::*)) > new (function  constructor () { yield [[1]] } )()].map(eval)); }");
tryItOut("(false)");
tryItOut("{let constructor = *;__noSuchMethod__, __proto__ = function(id) { return id }; }");
tryItOut("if(<x/>) export *; else {var __proto__ = [], prototype/*for..in*/L:for(let prototype in 0/0) {{}__iterator__ = <x><y/></x>, prop; } }");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/for(let ({ __proto__: [], __iterator__: //h\n[__parent__] }) = (function::constructor|=__iterator__); <><x><y/></x></> @ 5.0000000000000000000000.__defineGetter__(\"function::prop\", undefined); <><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb></>) prop");
tryItOut("with({}) { ; } ");
tryItOut("switch((({__iterator__: {}, prototype: <x><y/></x> }))) { default: export __count__;break; break; case function::__count__ = constructor:  }");
tryItOut("while((1e4) && 0){yield this; }");
tryItOut("return;");
tryItOut("");
tryItOut("do {export prototype; {  }  } while((__count__.throw(<x><y/></x>)) && 0);\n;\n");
tryItOut("/*for..in*/M:for(var __count__ in ((*)(\t<x/>)))var __proto__ = <x><y/></x>, __proto__;");
tryItOut("if((__noSuchMethod__ = [15,16,17,18].map(eval, __noSuchMethod__).eval(({}).__lookupGetter__))) {yield; } else  if (new [,,] ^ [,,z1]++) {return;prototype; } else continue M;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (window.throw(*::*)) <= (__count__ = prop)) {let constructor = 1.3; }");
tryItOut("with(<x><y/></x>.__count__){/*for..in*/for(function::prop = [,,z1] in <y><z/></y>) export *;N\nreturn;\n }");
tryItOut("if((__noSuchMethod__ = __iterator__ = <><x><y/></x></>)) {;export prototype; } else  if (eval(\"return \\t<></>;\", ((p={}, (p.z = ((p={}, (p.z = <x><y/></x>)())))())))) { } else /*for..in*/for(let __parent__ in ((function  __iterator__ (__count__) { return 3/0 } )(<><x><y/></x></>))){break ; }\n");
tryItOut("switch([] = []) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in  /x/g .__defineGetter__(\"get\", (1 for (x in [])))) {(*);export __proto__; } }");
tryItOut("if((x::__proto__.__proto__ = function (__noSuchMethod__) { yield __count__ } ()).isPrototypeOf(({__count__: <x><y/></x>.(<x><y/></x>), __noSuchMethod__: function(id) { return id }-- }))) yield function::__iterator__;");
tryItOut("M:if((RegExp(__iterator__, <x><y/>\f</x>))) with(constructor.(<y><z/></y>)){;{} } else prototype;\nexport *;\n");
tryItOut("L: {gc()var this; }");
tryItOut("\nthrow ();");
tryItOut("__parent__ = __count__;");
tryItOut("with(eval(\" /* Comment */[1]\", window)){return;var __count__; }");
tryItOut("let (__noSuchMethod__ = each, __count__) { yield -0; }");
tryItOut("/*infloop*/L:for(__iterator__; (p={}, (p.z = <x/>.@* .@ (yield 1e+81.watch(\"constructor\", 'haha'.split)))()); (1.2e3.hasOwnProperty(\"__proto__\")).propertyIsEnumerable(\"__noSuchMethod__\")) let (__parent__, __proto__) { export *; }");
tryItOut("do const __iterator__ = <><x><y/></x></>; while((prop = false) && 0);");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] = * >> 0x99 in  /x/g ) export __count__\n { return (-1) } ");
tryItOut("{(this); }");
tryItOut("switch(<x><y/></x>) { case 8: ; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = ([1,2,3,4].map).call(<><x><y/></x></>, <x><y/></x>, ({a1:1})) in null) {yield *;(<!--yy-->); }");
tryItOut("with({}) Function");
tryItOut("yield <zzz></zzz>.(((1e+81 @ 1.2e3) for ((<><x><y/></x></>) in <><x><y/></x></>) if (<><x><y/></x></>)));");
tryItOut("for(let y in []);");
tryItOut("constructor = __proto__;");
tryItOut("try { __noSuchMethod__.constructor = prototype; } finally { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) gc() } ");
tryItOut("L: {/*infloop*/for(*::*; [,,]; true) {throw prop;(0x99); } }");
tryItOut("do gc() while(() && 0); const __count__;");
tryItOut("/*infloop*/do throw __count__; while(\n(yield (function::__parent__ = *)));");
tryItOut("let(__iterator__ = (__proto__ =  \"\" )) ((function(){})());");
tryItOut("L: {let (prototype, __proto__ = throw [z1];) { export \f*; }if(__parent__+=<x/>) yield; const __iterator__; }");
tryItOut(";\n__noSuchMethod__ = null, prototype = *;\n");
tryItOut("return  /x/g \n");
tryItOut("let (__iterator__) { gc() }\n/*for..in*/for(var __noSuchMethod__ in <x><y/\f></x>) constructor;");
tryItOut("{throw  /x/ ; }");
tryItOut("L: {gc() }");
tryItOut("{let (prop =  '' ) { const __iterator__, prop/*\n*/; } }");
tryItOut("switch(({prototype: 0/0 << ({a1:1})}).hasOwnProperty(\"__noSuchMethod__\")) { default: continue Lcase (p={}, (p.z = --window)()): case ((\n<x><y/></x>).yoyo([<x/>.* for each (__iterator__ in undefined)])): /*infloop*/M:for(prototype; this.__defineGetter__(\"__proto__\", <y><z/></y>); ()) {var __noSuchMethod__ = <x><y/></x>, __count__; const prototype; }break; return;const __parent__, constructor = { \"\" ;let function::__parent__; } }");
tryItOut("L: {yield;(<x/>); }");
tryItOut("L:while((<x/>) && 0)const __count__ = <><x><y/></x></>, __noSuchMethod__ = prop;");
tryItOut("/*infloop*/L:do export __iterator__; while(undefined);");
tryItOut("L: yield <x/>;");
tryItOut("/*infloop*/  (const prototype; __parent__ '' ) export __count__;");
tryItOut("/*for..in*/for(let prototype in (([1,2,3,4].map)//h\n([,,z1])))export prototype;");
tryItOut("do {yield;yield <x><y/></x>; } while(( \"\" ) && 0);");
tryItOut("let(prop) ((function(){return;})());");
tryItOut("/*for..in*/L:for(let [prop, prototype] = (__proto__.__noSuchMethod__ getter= Math.sin.constructor) in constructor) {function ([y]) { };throw #1#; }");
tryItOut("L:with({__parent__: delete #3={a:#3#}}){export *; }");
tryItOut("L: {gc()throw undefined; }");
tryItOut("/*for..in*/for(const __proto__.constructor in <><x><y/></x></>.__lookupGetter__(\"__parent__\")) export *;");
tryItOut("{{}return <><x><y/></x></>; }");
tryItOut("if(__proto__.function::constructor setter= Function) {/*for..in*/for(const constructor in ((__proto__ = prototype)(prop)))return;{} } else  if ((let (__count__ = false, prototype) window.throw(([<><x><y/></x></>].map(( \"\" ).watch))))) {}");
tryItOut("__count__\nlet __count__ = <><x><y/></x></>, __count__ = 4.;");
tryItOut("if((uneval(1e+81)).*) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__(<><x><y/></x></>) in  '' ) {return {};return  /x/ ; } } else break ;");
tryItOut("/*infloop*/while(([11,12,13,14].map)){break M; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = eval(\"<x/>\", yield <y><z/></y>) in ({function::__proto__: constructor, constructor setter: new Function })) do {return null;; } while(((constructor = *::*)) && 0);");
tryItOut("L:do {__iterator__, prototype\n(__parent__);yield; } while((delete <><x><y/></x></> >>>=this.zzz.zzz) && 0);");
tryItOut("M:with((__noSuchMethod__)(__count__, 0 if (<x/>)))(<><x><y/></x></>);");
tryItOut("/*for..in*/for(var constructor in this.__defineSetter__(\"prototype\", eval)) yield @foo;");
tryItOut("/*infloop*/do break M; while([])\nif(([<x><y/></x>])) gc() else  if (null ? <><x><y/></x></> : *::*.__lookupSetter__(\"__count__\")) {return <x><y/></x>; } else ");
tryItOut("/*for..in*/for(const (new Date(__iterator__ ^ window, <><x><y/></x></>))(#0=[window]) in (([1,2,3,4].map)(__parent__ = <y><z/></y>.hasOwnProperty(\"constructor\"))))((<x><y/></x>.hasOwnProperty(\"__proto__\")));");
tryItOut("M:if(\n#1=[#1#][__noSuchMethod__]) {yield;/*for..in*/for(const prototype in ((Math.pow)(__iterator__))){let constructor;var prop, prop = this; } } else  if ((yield false).throw(__parent__ in __parent__)) {throw <x><y/></x>;export __noSuchMethod__; } else {with({__noSuchMethod__: [[1]]}){@foo{} }yield; }");
tryItOut("{let __parent__ = @foo, __proto__ = *; }");
tryItOut("/*infloop*/for(prop; ( /x/ .propertyIsEnumerable(\"prop\"));  '' --) {}");
tryItOut("while(((p={}, (p.z = <><x><y/></x></>)())) && 0)break L;");
tryItOut("return __iterator__;");
tryItOut("let(__iterator__ = , __count__ = [11,12,13,14].map) ((function(){let(__proto__, __parent__) ((function(){throw StopIteration;})());})());");
tryItOut("throw this;");
tryItOut("if(false) return []; else  if ([[]]) {(@foo);gc } else {let __count__, constructor; }");
tryItOut("if(<x><y/></x>) {let __noSuchMethod__ = prop, <><x><y/></x></>;export prop; } else {yield [z1,,]; }");
tryItOut("function  __proto__ ()<x><y/></x>\nprototype = <x><y/></x>;\n");
tryItOut("/*infloop*/do (eval(\"<><x><y/></x></>;\", -1)); while(let __iterator__);");
tryItOut("/*infloop*/while(prop = __iterator__)@foo;");
tryItOut("L:if((eval(\" /x/g \", false))) yield; else  if (*::*.watch(\"prop\", Math.pow)--) {var prototype = prototype;; } else {export *; }");
tryItOut("/*for..in*/\ffor(const [function::__parent__, prop['__proto__']] = () in  '' ) return <y><z/></y>;");
tryItOut("yield (__parent__.__parent__).watch(\"__noSuchMethod__\", (1 for (x in [])))");
tryItOut("if(([1,2,3,4].slice)(<x><y/></x>)) {gc() } else  if ((1e-81 instanceof <y><z/></y>)) throw <><x><y/></x></>; else {break L;return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const __count__ in <x><y/></x>) yield this;");
tryItOut("if(this) -0");
tryItOut("while(([15,16,17,18].map(*::*, yield \f<x/>;.valueOf(\"number\"))) && 0){#3={a:#3#};\nconst __noSuchMethod__;\nexport __proto__; }");
tryItOut("/*for..in*/L:for(var prototype = (eval(\"yield;\", <x/>)) in <x/>) continue ;");
tryItOut("/*for..in*/for(let [get, __parent__] = 1e81 in ( \"\"  for (constructor in <x><y/></x>))) (true);");
tryItOut("return <><x><y/></x></>");
tryItOut("if( '' .__lookupGetter__(\"__noSuchMethod__\")) { if ((__parent__.constructor setter= [1,2,3,4].map)) L: yield; else {}} const constructor;");
tryItOut("/*for..in*/M:for(__count__ in <x/>) function(q) { return q; }\n{}\n");
tryItOut("/*for..in*/for(const constructor = this in prop.__proto__) \n");
tryItOut("{const prototype, __iterator__;with(<x><y/></x>)export *; }");
tryItOut("while(([[<><x><y/></x></> if (prop)] for ((window)(<y><z/></y>) in null)]) && 0){/*infloop*/for(const __proto__; ((yield  /x/g )); __noSuchMethod__) function(q) { return q; } }");
tryItOut("M:switch((yield new ([11,12,13,14].map)(<x/> >>>=1.2e3, __iterator__))) { case <x><y/></x>.__noSuchMethod__: break; /*infloop*/do if(constructor) export *; else {__count__ } while(__count__ = false);break; break; __iterator__ = <y><z/></y>;L:with({1e-81: this})return;default: break; case 6:  }");
tryItOut("/*infloop*/for(window .. this; prototype.(1e+81);  /* Comment */<y><z/></y>) yield  \"\" ;");
tryItOut("M:with(<><>prop = this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map)</></>){return __count__;L:if(export *) { if (++<y><z/></y>.__count__) [1,2,3,4].map} else export __noSuchMethod__; }");
tryItOut("with({constructor: <x/>(arguments, *)})return __noSuchMethod__ = <x><y/></x>;");
tryItOut("L:with(*::*){function::__proto__, prototype;(; }");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__.__iterator__ in undefined.__count__) ");
tryItOut("export *;");
tryItOut("with({}) { each = prop; } ");
tryItOut("{{}M:with({__proto__: [window].sort(*)}){const __iterator__ = ({a1:1});return prototype; } }");
tryItOut("throw prototype;\nvar prop = \f<><y><z/></y></>, prototype;\n");
tryItOut("/*for..in*/L:for(prototype in ((Math.pow)([z1]))){export __count__;\n }");
tryItOut("M:with(this.zzz.zzz)return <x/>;");
tryItOut("/*for..in*/for(let prototype in ((-0)(<><x><y/></x></>)))function  __proto__ (yield) { return prototype } ");
tryItOut("M:if(-0) {function  prototype (constructor, prototype) { return; } export __count__; }\nyield;\n");
tryItOut("L: {M:if(1e-81.isPrototypeOf(<y><z/></y>)) {__count__ = <x><y/></x>;return *::*; } else yield; }");
tryItOut("/*for..in*/for(__proto__.prop in window) {gc()let __parent__, prototype; }");
tryItOut("with(__proto__)//h\n{export *;\fvar __noSuchMethod__ = <y><z/></y>, prop\n }");
tryItOut("with({function::__iterator__: true.__lookupGetter__(\"__iterator__\")}){var each = window, __proto__;return; }");
tryItOut("with(window)let __parent__ = this;");
tryItOut("/*for..in*/L:for(var __count__ in (('haha'.split)(window)))yield;");
tryItOut("if(<zzz>[15,16,17,18].some( /x/g , (1.2e3 - yield;))</zzz> if (1e-81))  else  if ((this.__defineGetter__(\"__noSuchMethod__\", function  __noSuchMethod__ () { return * } ))[null]) gc()\n else {/*infloop*/for(let constructor = false;  '' ;  /x/g ) {break L;export *; } }");
tryItOut("L:if(let (__noSuchMethod__ =  '' ) window) { if (true) return window; else {return;__proto__ }}");
tryItOut("/*infloop*/while(<><x><y/></x></>){(function ([y]) { }); } const __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("L:with({__parent__: new (Number())(__proto__+=#1# >= new <x><y/></x>(), __parent__.(__iterator__ = 0x99))}){if(window) {/*for..in*/for(constructor in ((Function)(@foo))){}return __count__; } }");
tryItOut("M:if(<x><y/></x>--) {if(__count__) {export __parent__;let prototype =  '' , prop =  '' ; } else {throw @foo; }let ({return *::*; }) { const __parent__ = prop, __proto__; } }");
tryItOut("with({}) { throw __noSuchMethod__; } ");
tryItOut("if(new ({}).hasOwnProperty(__proto__ = ~([null].filter((<x><y\f/></x>).__defineSetter__)), (__proto__.( \"\" )))) { if (([, , , , __iterator__] = [1])) {gc()if((with({function::__iterator__: <x/>}){const __proto__ = *; })) ; else  if (new ((eval(\"try {  } finally { let ; } \", 0x99)))((p={}, (p.z = <x/>)()), true)) (prototype); else const __count__, __proto__ = *; }} else gc()\nvar __iterator__ =  '' , __noSuchMethod__;");
tryItOut("throw prop;");
tryItOut("export __iterator__");
tryItOut("do {} while((<zzz>__proto__ ?  \"\"  : this</zzz>) && 0);");
tryItOut("with({__proto__: __parent__})/*infloop*/while((#2=[(uneval(<><x><y/></x></>))] % new window(this))){gc()/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in *)  }");
tryItOut("return;");
tryItOut("/*infloop*/for(const ({ __count__: [\f, constructor, , prop, ], __parent__: ({ __noSuchMethod__: __iterator__ }) }) = ({prop: <x/> & prototype }); 3.141592653589793.prototype = <><x><y/></x></>.__lookupGetter__(\"prop\"); <><x><y/></x></> << [,,z1] |= window) export *;");
tryItOut("yield;");
tryItOut("export *\f;");
tryItOut("/*infloop*/for(var __parent__;  /x/g .isPrototypeOf(<><x><y/></x></>); (constructor.__proto__ =  \"\" .__defineSetter__(\"__count__\", function ()<x><y/></x>))) (constructor);");
tryItOut("with((prototype.constructor)){;if( /x/g ) {throw <x/>; } else {break ; } }");
tryItOut("L: export *;");
tryItOut("{constructorvar __proto__ = ({}); }");
tryItOut("L:do {case  /x/ : return;break; with(<y><z/></y> ? *::* : *::*)gc() } while((new Math.sin( /x/ , undefined).hasOwnProperty(\"__count__\")) && 0);");
tryItOut("if(<x><y/></x>) {; }");
tryItOut("L:if(*.hasOwnProperty(\"<x><y/></x>\") , (1 for (x in []))) {if(false) { if (__proto__ =  /x/ ) {;yield __parent__; } else {*::*;continue M; }}__parent__,  { yield -1 }  = true\nexport *; } else {if([[1]]) { if (*) (#3={a:#3#});} else ((-1)).watchexport *; }");
tryItOut("L: {{} }");
tryItOut("if(__noSuchMethod__) ; else  if (<><x><y/></x></>) throw *::*; else return *::*;");
tryItOut("gc()");
tryItOut("{export __count__;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in #2=<x><y/></x>) yield;");
tryItOut("{/*for..in*/for(__noSuchMethod__ in __proto__) {yield;throw  \"\" ; } }");
tryItOut("while(((p={}, (p.z = (1e4 && <><x><y/></x></>))())) && 0){continue M\n }");
tryItOut("if(( /x/ )[<><x><y/></x></>]) {return;(<y><z/></y>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x/>.isPrototypeOf(__parent__ = <><x><y/></x></>)) {returnL: export *; }");
tryItOut("/*infloop*/do __iterator__; while(({ __proto__: prototype, __count__: constructor }) = @foo);");
tryItOut("const __count__, __proto__;\n(<x/>);\n");
tryItOut("with({__proto__: (new [1,2,3,4].map())[constructor]})return;");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in undefined) yield;{var constructor, __count__ =  /x/ ;{} } }");
tryItOut("/*for..in*/for(let constructor = yield <x/> in yield __proto__.(3)) {break M;M:do if(null) {var __parent__, prop;{} } else  if ((-1)) {var __parent__ = @foo;throw window; } while(((++.2)) && 0); }");
tryItOut("const __proto__;");
tryItOut("/*infloop*/for(var prop; undefined; window) return;");
tryItOut("throw <><x><y/></x></>;");
tryItOut("gc()");
tryItOut("throw StopIteration;");
tryItOut("while((__parent__-=[] == gc()[*::* ^ <x><y/></x>]) && 0){/*for..in*/(function (__parent__) { var __parent__, __noSuchMethod__ = <x><y/></x>; } )((prop ^ 0.1)))function(q) { return q; }\t }");
tryItOut("if([11,12,13,14].map) /*for..in*/for([__iterator__, constructor] =  /x/  in *) {return; } else  if (prototype.__noSuchMethod__ setter= function(q) { return q; } ^= (-1.prototype = __proto__)) let __count__ = *::*; else if(eval(\"export *;\", __count__.__count__ getter= (new Function(\"export *;\")))) {export *; } else  if (({delete: <y><z/></y>, function::prototype: * })) {var prototype =  /x/g ;const __iterator__, __iterator__; }");
tryItOut("while((undefined / ()) && 0){}\nyield;\n");
tryItOut("/*infloop*/for(let constructor = *; __proto__ = this.__defineGetter__(\"__parent__\", (new Function(\"(3/0);\"))); typeof this.__defineSetter__(\"constructor\", (new Function(\"__count__;\")))) {switch( /x/g ) { default: (*);break;  } }");
tryItOut("{return;_ }");
tryItOut("break L\nyield __proto__");
tryItOut("{} const prototype;");
tryItOut("try { yield .2; } catch(__count__ if  /* Comment */(*\n).yoyo(((<y><z/></y>);)(constructor = <y><z/></y>, ({a1:1})))) { for(let y in []); } catch(__proto__) { ((<x/>))['__parent__'] = constructor; } finally { L: throw <x/>; } ");
tryItOut("if(((<x/>)).unwatch(\"__noSuchMethod__\").propertyIsEnumerable(\"__iterator__\")) throw <y><z/></y>; else  if ((__noSuchMethod__.([,,])) @ [1,2,3,4].slice) /*infloop*/L:for((1e81 <= <><x><y/></x></>.watch(\"prop\", gc)); this.zzz.zzz; null\n) {/*infloop*/while( '' ){export __noSuchMethod__; }yield <x><y/></x>; }");
tryItOut("if(({ __count__: __noSuchMethod__ })|=true) { if ((new String([1,,], this))) {if(\nwindow) {__noSuchMethod__ = __parent__;;__count__ setter: (<><x><y/></x></>).apply } else  if (({prototype: *::*})) {continue ;({}).__lookupGetter__ } else {let __iterator__ =  /x/g , __count__; } }} else {gc() }");
tryItOut("/*for..in*/for(let prototype in (new (function(y) { yield y; while(([]) && 0)break M;; yield y; })())) {(<x><y/></x>); }");
tryItOut("L:while((({ prototype: [({ constructor: ({ prototype: __count__, __iterator__: __count__ }) }), __count__], __count__: ({ constructor: __noSuchMethod__ }) })) && 0){__noSuchMethod__ }");
tryItOut("yield\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while(__count__){export __parent__; }");
tryItOut("/*for..in*/for(let __parent__ in (((new Function(\"{}\")))(@foo))){; }");
tryItOut("L: __parent__ = prop;");
tryItOut("{window;throw @foo; }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if(@foo.prototype = __count__.__proto__ = undefined) { if (__noSuchMethod__.prop setter= Math.sin) {(prop);break ; }} else yield;");
tryItOut("gc()\n/*infloop*/M:for(--<><x><y/></x></>; 1e81.prototype = function ([y]) { }; .2 - *::*) {}\n");
tryItOut("/*for..in*/for(var __proto__ = prototype in <><bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb></>) L: return;");
tryItOut("while(([]) && 0)\n");
tryItOut("L: {}");
tryItOut("{let constructor, __parent__; }");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = new function  prop () { return @foo } (prototype%=null, function ([y]) { }) in <x/>) return <x><y/></x>\f;");
tryItOut("if((__iterator__.__lookupGetter__(\"__proto__\")).__proto__ = (p={}, (p.z = *::*)())) (__parent__);");
tryItOut("/*for..in*/for(const [__proto__, __count__] = ({__iterator__: __count__}) in false) {{} }");
tryItOut("M:if(this.__defineSetter__(\"__noSuchMethod__\", Math.pow)) export *; else  if (*--) {const __noSuchMethod__ = window, __proto__ = <><x><y/></x></>; } else {export constructor; }");
tryItOut("continue ;");
tryItOut("return  ''  .@x:: window.isPrototypeOf((0x99.eval(prototype)));");
tryItOut("/*for..in*/for(prop.prop in ((@foo)(\ntrue))){(<><x><y/></x></>);; }");
tryItOut("while((window) && 0){return <x/>;{} }");
tryItOut("__parent__ = __proto__;");
tryItOut("while(((prop.prototype)) && 0){L:if(constructor( /x/g ,  \"\" )) function (prototype) { yield <><\nx><y/></x></> } if(this) { if (@foo) {let __count__, __count__ = true; }} else {throw <x/>;let __proto__ =  /x/g , __noSuchMethod__ = __parent__; } }");
