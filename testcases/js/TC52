
tryItOut("if(__parent__) {/*infloop*/for((((function  __proto__ (__parent__, __count__) { return true,  /x/  } )(true)) in (undefined.prototype = window)); ({ __count__: __count__ }) = 3;  /x/ ) \tvar __parent__ = <y><z/></y>, __parent__ = <y><z/></y>; }");
tryItOut("/*for..in*/for(let __iterator__ in prototype) export __iterator__;");
tryItOut("* = constructor;");
tryItOut("export __count__; const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in true) {gc() }");
tryItOut("return <><x><y/></x></>.valueOf(\"number\") for each (prototype in this) for each (__count__ in null);");
tryItOut("if(([] = [,])) {[z1,,]; }");
tryItOut("if(prop) { }");
tryItOut("/*for..in*/for(let __proto__ = 1e4 in <><x><y/></x></>) {yield <x><y/></x>;continue L; }");
tryItOut("if((<x/> ?  case  : <x><y/></x>).__lookupGetter__(\"__parent__\")) {yield; } else return;");
tryItOut("/*for..in*/for(let [<><x><y/></x></>, prototype] = <x><y/></x> in #1#) ;");
tryItOut("do {([,,z1]); } while(( { yield [1,,] } (*::*, <><x><y/></x></>).yoyo((({prototype: *::* })))) && 0);");
tryItOut("/*infloop*/for(let  '' .__proto__ = (<x><y/></x> ? [1] : 0x99.hasOwnProperty(\"__noSuchMethod__\")); -0; 1e4;) yield <y><z/></y>;");
tryItOut("if(* ? <y><z/></y> : 4.) return; else  if (let (__count__ = null, undefined = __iterator__) true) ; else yield <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)(<><zzz>this</zzz></> == [(function (__noSuchMethod__, __count__) { constructor; } (this, function ([y]) { }))]) in (__iterator__ =  /x/ )) {M:with(this.(<x/>))yield <x/>; }");
tryItOut("L:with({prototype: 1e81})let constructor = <><x><y/></x></>\n/*infloop*/M:for(let ({ prototype: ({ __noSuchMethod__: prop }), prop: __noSuchMethod__ }) = 0 != <y><z/></y>; (new (1 for (x in []))(this, *::*)); false ^= undefined) {(<x><y/></x>).apply }");
tryItOut("throw prop;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = false.__noSuchMethod__ =  /x/g  @  /x/  in null) __noSuchMethod__, __noSuchMethod__");
tryItOut("with({}) { try { {} } catch(prototype) { return; } finally { yield; }  } ");
tryItOut("if((eval(\"(function ([y]) { })()\", #3={a:#3#}))) {continue L;var __iterator__, prototype = <x><y/></x>; } else  if (new (this)(<x><y/></x>, -1) @ window.unwatch(\"__noSuchMethod__\")\t) {var __noSuchMethod__ =  \"\" , __iterator__; }");
tryItOut("if(__iterator__.unwatch(\"__count__\")) {export *;export *; }");
tryItOut("for(let y in [5,6,7,8]) break M;");
tryItOut("gc()");
tryItOut("(__iterator__);\nexport prototype;\n");
tryItOut("{\n }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __iterator__] = [,,z1] in function(id) { return id }) continue M\n");
tryItOut("throw StopIteration;");
tryItOut("do {{}return <><x><y/></x></>; } while(('fafafa'.replace(/a/g, (this).watch)) && 0);");
tryItOut("switch(prototype.prop setter= function  prototype ()prop = <x/>) { case 0: case #2=({__count__: <x><y/></x>}): break; export *;break;  }");
tryItOut("if(<><x><y/></x></>) {continue L;const __count__; } else export prop;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((3/0)(window))){/*for..in*/for(let prototype.prop in ({a2:z2})) {(<><x><y/></x></>); } }");
tryItOut("/*infloop*/L:for\t((eval(\"__noSuchMethod__\", true) =  '' .__defineGetter__(\"__iterator__\", eval).prototype = * instanceof null); (yield 'fafafa'.replace(/a/g, eval)); this.zzz.zzz) {/*for..in*/for(const __proto__(__parent__) in ((function  prototype ([,,]) { return __noSuchMethod__ } )( /x/g ))){(__proto__); }export *; }");
tryItOut("/*for..in*/for(prop = (__noSuchMethod__ = <x><y/></x>) in prop = []) /*infloop*/L:do {export __proto__;return (-0); } while(constructor.__parent__); const prototype;");
tryItOut("/*for..in*/for(const prop = -- in (p={}, (p.z = ({constructor: <y><z/></y>, [], __proto__: 0x99 }))())(null)) {var constructor = window;let __count__ = this; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __proto__: ({ __proto__: [({ prop: ({ __iterator__: prop, __parent__: ({ constructor: __count__, __parent__: __noSuchMethod__ }) }), prop: ({ __iterator__: ({ prototype: __noSuchMethod__ }), __iterator__: ({ __noSuchMethod__: prototype }) }) }), constructor, , , prop] }) }) }) = <y><z/></y>.__proto__.__count__; export prototype.hasOwnProperty(\"__iterator__\"); __noSuchMethod__.(<><bbb xmlns=\"let (__iterator__, prop = gc;) constructor = *\"><ccc:ddd> </ccc:ddd></bbb></>)) /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__(this.__defineSetter__(\"constructor\", false)) in __iterator__) {const constructor, constructor =  /x/g ; }");
tryItOut("L: {/*infloop*/for( \"\" ; this; <x/>) {return <y><z/></y>;export *; }break ; }");
tryItOut("function  constructor (__iterator__, __parent__) { return window } ");
tryItOut("L: break ;");
tryItOut("if(let prototype = [], __parent__;) yield; else  if (window./*\n*/isPrototypeOf(<x><y/><\t/x>)) {;/*for..in*/M:for(const __parent__ in  /x/ ) {const __iterator__ = undefined, __count__; } }");
tryItOut("continue ;\n\n");
tryItOut("if(@foo.hasOwnProperty(\"__iterator__\")) if(false) {(033); } else export __iterator__;");
tryItOut("if((([<x><y/></x>].map(Math.pow))[(__noSuchMethod__ !== 0.1)])) {}");
tryItOut("do let __parent__ = window; while((*::*\n) && 0);");
tryItOut("L:do yield (-0); while((__parent__) && 0);");
tryItOut("if((__noSuchMethod__ |= <><x><y/></x></>)) { if ([,,].constructor) return;} else {new Function }");
tryItOut("L:if((new  /* Comment */[1] <= (({prototype: -3/0})))) prototype.__parent__");
tryItOut("yield undefined.propertyIsEnumerable(\"prop\")\n");
tryItOut("/*for..in*/for(let [__proto__, __count__] = (({ __parent__: [, , ({ __parent__: prototype }), , ] }) = __parent__.prop-=__noSuchMethod__ = @foo)[#1=[#1#]] in this.__defineGetter__(\"prop\", prop) <<= ( /* Comment */*::*)) throw @foo\nreturn (-1)");
tryItOut("return  /x/g \nreturn;");
tryItOut("if(new *()[<><><x><y/></x></></>]) {/*for..in*/L:for(let [__noSuchMethod__, constructor] = {} in prototype) {const __count__ = <y><z/></y>; } }");
tryItOut("/*for..in*/for(var constructor = this in <x><y/></x>) throw <><x><y/></x></>;");
tryItOut("{while((@foo.__lookupSetter__(\"__noSuchMethod__\")) && 0)yield  /x/ ; }");
tryItOut("if((__count__ = <x><y/></x>.(<><x><y/></x></>)).constructor) ");
tryItOut("if(<x/>) //h\n{if(({a2:z2})) { if (window) __proto__; else {throw this; }}throw (__count__ =  '' ); }");
tryItOut("if((__proto__ = 1e81 in prop)) {return; } else  if (('fafafa'.replace(/a/g, ({}).hasOwnProperty))) let __noSuchMethod__ = @foo, __count__;");
tryItOut("/*for..in*/for(var (__proto__) in <x/>) {prop, constructor;export *; }");
tryItOut("/*for..in*/for(const __parent__ = <x><y/></x>.constructor in window) {/*\n*/throw <><x><y/></x></>;export *; }");
tryItOut("let (__iterator__ = ((eval(\"(new Function(\\\"{}\\\"))\",  '' )).*)) { let(({ constructor: __count__ }), ({ prop: __proto__, __iterator__: set }) = <y><z/></y>) { let(prototype = ((function (constructor, __noSuchMethod__)this).call(<><x><y/></x></>, ))) { let(prototype, __noSuchMethod__ = <><x><y/></x></>) { return __noSuchMethod__; }");
tryItOut("if((new ((new window(<x><y/></x>)))(( '' .@foo)))) {} else  if (__parent__(window)) ");
tryItOut("/*for..in*/M:for(const __iterator__ in #2=[@foo for each (__parent__ in <x><y/></x>)]) switch( /x/ ) { case 4: break;  }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((constructor)(arguments)))yield;");
tryItOut("if(<y><z/></y>) { if (-1.throw(<x><y/></x>)) /*for..in*/M:\ffor(let [constructor, prop] = -3/0 in <x><y/></x>) {{} } else prototype.__noSuchMethod__}");
tryItOut("if((p={}, (p.z = (__proto__.isPrototypeOf(<x><y/></x>)))())) if(([15,16,17,18].map(function  __iterator__ (__proto__, prototype) { *<y><z/></y>  } , <><x><y/></x></>))) { if ((<><x><y/></x></>.*)) {continue ; }} else const __iterator__, __count__; else  if ((constructor = constructor.(<x><y/></x>))) {/*infloop*/for(var __count__; *::*; window) {prototypebreak M; } } else /*for..in*/for(const constructor = (true.__count__ = <><x><y/></x></>) ? __proto__ = <y><z/></y> :  /x/g  in <x><y/></x>) ;");
tryItOut("M:if(throw StopIteration;.(__parent__ = function ([y]) { })) { const prop; } else  if (1e-81 + 4.\n) export *;");
tryItOut("const __parent__ = null, function::__count__ = [z1];\nif(@foo .@x:: __noSuchMethod__) {let constructor, __parent__ = __parent__; } else  if (1.2e3.eval(function(id) { return id })) {export *; }\n");
tryItOut(";");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("(new <><x><y/></x></>(<x><y/></x>) -  \"\" .\funwatch(\"__iterator__\")) > *");
tryItOut("__parent__ = __parent__;");
tryItOut("/*infloop*/do {let __parent__;/*for..in*/for(const constructor in function ([y]) { }) var __proto__; } while((p={}, (p.z = false)()));");
tryItOut("/*infloop*/for(<y><z/></y>; (__proto__.__proto__ setter= Math.sin); ( /x/  <= new RangeError(get)) * * === <><x><y/></x></> >>>=4.\t) /*infloop*/M:for(__proto__; __noSuchMethod__ = this; <y><z/></y>.throw(@foo)) {}");
tryItOut("while((([1,2,3,4].slice)(__proto__.constructor getter= {}, (new <><x><y/></x></>()))) && 0){ const __count__; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; <><></></>; delete <><x><y/></x></>++) return 0/0;");
tryItOut("if(({__noSuchMethod__: <x><y/></x> })) { if ( '' ) {gc() } else export __noSuchMethod__;}");
tryItOut("/*for..in*/for(const prop in let (__parent__, __proto__ = window) <x/>) export __noSuchMethod__;");
tryItOut("M:with({prop: __iterator__})__noSuchMethod__ =  /x/g ;");
tryItOut("{if( /x/ ) { if ((([z1] >> prototype)) ^= ({prop: prototype == <><x><y/></x></>, prototype getter: ({}).hasOwnProperty })) (getter);} else {export constructor; }prop.__proto__ = prototype; }");
tryItOut("/*for..in*/for(var prop = (<x><y/></x>) in window) {/*for..in*/for(let __iterator__ = this.zzz.zzz - function ([y]) { } .@ <><x><y/></x></> in <><x><y/></x></>) \f{gc()gc() } }");
tryItOut("/*infloop*/do {(window);return; } while(const __proto__ = <x/>;);");
tryItOut("while(((window)(null) = Function(__iterator__,  /x/ )((new (this.__defineGetter__(\"__iterator__\",  /x/g ))([15,16,17,18].map(eval, false), <x/>)))) && 0){var set; }");
tryItOut("");
tryItOut("if((new (eval)())) { if ((( /x/  , this ? ( /x/ .*) : new Number([1,,], <x><y/></x>)))(window, (new <x><y/></x>(<><x><y/></x></>, this)))) throw __iterator__ = <><x><y/></x></>; else {with(!<x/> .. (<><x><y/></x></> /= *))__count__; }}");
tryItOut("export __count__; const __proto__;");
tryItOut("throw StopIteration;");
tryItOut("throw __parent__;");
tryItOut("M:switch(*) { default: {var prototype; }break; case true: with(( /x/g  !=  /x/ ))export __parent__;/*infloop*/M:for(var __proto__; __iterator__ = *::*; <x><y/></x> ? <><x><y/></x></> : <><x><y/></x></>) /*infloop*/while(<><x><y/></x></>){{}let constructor; }case .__parent__: /*for..in*/L:for(let __proto__ in <><x><y/></x></>) export __iterator__;break;  }");
tryItOut("/*for..in*/for(const __proto__ = *::* in window) {let prop = (-1), __iterator__; }");
tryItOut("/*infloop*/for([__count__, __noSuchMethod__] = eval(\"this\",  /x/ ); new <x><y/></x>(); false.unwatch(\"constructor\")) {__proto__;return <><x><y/></x></>; }");
tryItOut("export *;");
tryItOut("L: {; }");
tryItOut("/*for..in*/for(var __count__ = prototype.prototype getter= __iterator__ in window) (__iterator__);");
tryItOut("/*infloop*/do const prototype, __count__ = null; while(window .@ this);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in -3/0) {;gc() } }");
tryItOut("if(__noSuchMethod__) { if (<><x><y/></x></>) {let __parent__;{} } else throw __proto__;}");
tryItOut("throw {}\n");
tryItOut("while((this) && 0){with({}) yield constructor = #1#; }");
tryItOut("if(((new Function(\"return 4.;\")))( /* Comment */__parent__.(<y><z/></y>), *::*.propertyIsEnumerable(\"prop\"))) yield *;");
tryItOut(" { yield new Date(prototype) } ");
tryItOut("/*infloop*/M:do {{} } while((__count__.__parent__ = 1e-81.yoyo(#0=*::*)));");
tryItOut("throw *;");
tryItOut("if(eval(\"__noSuchMethod__ = prop.prototype = <><x><y/></x></>\",  /x/ )) { if (continue ) export *; else var __noSuchMethod__ = [], function::__parent__;}");
tryItOut("with({__noSuchMethod__: [z1,,]}){if(this) null; else break L;try { (function ([y]) { })(), function(id) { return id } } catch(__parent__) { yield *::*; } finally { export __iterator__; }  }");
tryItOut("M:with({__count__: prototype = __noSuchMethod__})throw __parent__;");
tryItOut("switch((-1)) { default: export prop;gc()break; /*for..in*/for([prototype, constructor] = false[true] in __parent__ = *::*) throw  \"\" ;break; case (__count__.__count__): /*infloop*/for(<><x><y/></x></>; *; 0.1) ;return  /x/ ;case (__parent__.__noSuchMethod__ setter= null): let (prop) { continue ; }break; case 6:  }");
tryItOut("/*for..in*/L:for(var [__proto__, __count__] = (p={}, (p.z = (new Function(this)))()) in ((<>\t<x><y/></x></>)(<x><y/></x>, 1e-81))) /*infloop*/for('fafafa'.replace(/a/g, __noSuchMethod__); <><x><y/></x></>; 1e-81) /*infloop*/M:while( /x/g )throw *::*;");
tryItOut("with((yield window));");
tryItOut("/*infloop*/while({} === [[]].throw(prop)){yield; }");
tryItOut("L: export __noSuchMethod__;");
tryItOut("/*infloop*/do {L:if(window) { if (<x><y/></x>)  else prototype;} } while( /x/ );");
tryItOut("with(<><x><y/></x></>.throw(__noSuchMethod__)){export *;return null; }\n");
tryItOut("constructor = __count__;");
tryItOut("if((({prop: *::*.yoyo(<x><y/></x>)}))) L: continue L; else  if (true in *.setter) {M:if(({a1:1})) { if (<y><z/></y>) {var __proto__ =  /x/ ;function  prototype () {  }  } else {(<x><y/></x>\t).watchexport *; }} }");
tryItOut("L:with({prototype:  \"\" }){;let __parent__, __parent__; }");
tryItOut("export __count__;\nwindow\n(*::*);\n");
tryItOut("/*infloop*/for( \"\" ; ({ get __parent__() { yield  /x/ ; }  }); __proto__ = null) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in window) /*infloop*/for(prop = *::*; __proto__; constructor) __count__ }");
tryItOut(";");
tryItOut("/*infloop*/for( /x/ .eval(<y><z/></y>); (prop.__count__[let (__proto__ = __count__|=this) ([,] ? -undefined : (eval(\"yield;\", <><x><y/></x></>)))]); prototype =  '' ) /*for..in*/for(__count__ in (((new Function(\"return window;\")))(({}).hasOwnProperty()))){}");
tryItOut("with((uneval(new (*::*)(<y><z/></y>)))){continue L; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in (('haha'.split)(1.3)))export __noSuchMethod__;");
tryItOut("/*for..in*/for(var [(p={}, (p.z = *)()).__proto__, prop] = <><{prototype}></{prototype}></> in  '' ) {const __count__ = __iterator__; }");
tryItOut("return;");
tryItOut("let(({ constructor: ({ prop: <x/>\n }) }) = ((__iterator__)[@foo]), __iterator__ = ([1,,] & window >>>=__noSuchMethod__.throw((-1) .@x:: <x><y/></x>))) ((function(){throw <><>yyy</></>;})());");
tryItOut("return eval(\"return prop;\", [<><x><y/></x></>.__lookupGetter__(\"__iterator__\")]);");
tryItOut("/*infloop*/do function  constructor (each) { export function::__parent__; }  while(1.3);");
tryItOut("var __iterator__ = <></>, __proto__ = <><x><y/></x></>\f\n");
tryItOut("M:while(((new (this .@x:: <x/>)((__iterator__ = -0)))) && 0){;{let constructor, __count__; } }");
tryItOut("if((#2=1e4)) {if(*::*) { if (4.) __count__} else {yield <x/>;function  __proto__ (__parent__) { __count__, constructor; }  }let __noSuchMethod__ = <y><z/></y>, constructor = <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in Array()) /*for..in*/for(var __count__ in ;) let __parent__, __iterator__ = 0/0;");
tryItOut("gc()");
tryItOut("L:if(eval) { if (((this.__defineGetter__(\"prop\", function () { export __iterator__; } ))--)()) {(__parent__); }} else var prototype;");
tryItOut("/*infloop*/do {break M;undefined; } while( \"\" );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in this) /*for..in*/for(var [__parent__, getter] = <x/> .@ constructor.valueOf(\"number\") in <x><y/></x>) yield <><x><y/></x></>;");
tryItOut("function \t(prop) { yield <x/> } ");
tryItOut("if(([null].sort(function  prop (prototype, function::prop) { return; } ))(*::*, <x><y/></x>)) {const __count__; } else  if ( if (({ __proto__: [//h\n__count__, , prop, ] }) = <x/> <<= <x><y/></x>.valueOf(\"number\"))) export prop; else let __noSuchMethod__ = 3;");
tryItOut("let (constructor = *) { yield false\nexport __proto__; }");
tryItOut("/*infloop*/for(const __count__; constructor.__iterator__ getter= ({prop setter: function(q) { return q; }, prop setter: gc }).eval(__parent__ = undefined); __iterator__ % false) with({prop: <x/>});");
tryItOut("let (({ __count__: default: break; case 9: break; case 4: (<x/>);break; case 8: , __count__: prop })) { export constructor; }");
tryItOut("/*for..in*/for(let [prop, __count__] = (#1=({constructor: this})) in 1e4) if(__noSuchMethod__) export *; else  if (undefined) {}");
tryItOut("gc()\nvar constructor;");
tryItOut("export *;");
tryItOut("M:while(( '' ) && 0)var __parent__, __iterator__ = true;");
tryItOut("M:if(<y><z/></y>) {return function ([y]) { };true } else  if ((<><x><y/></x></> |= window)) yield prototype; else {;/*for..in*/for(var getter = ([15,16,17,18].map(Math.sin,  /x/ )) in <x><y/></x>) {<><x><y/></x><\f/>;; } }");
tryItOut("/*for..in*/for(const [__count__, __proto__] = (({ prop: constructor, __parent__: prop }) = (__noSuchMethod__.__parent__).__lookupSetter__(\"__parent__\")) in (__parent__ = ({case 3:  }))) {do {export __iterator__; } while((*::*) && 0); !  if (\nfunction (__count__, __count__) { var __count__, function::prop; } ) }");
tryItOut("/*for..in*/for(let __proto__ = ( \"\" )[function ([y]) { }] = 1.2e3 - <><x><y/></x></> in ~this) {do <><x><y/></x></>; while((window) && 0);/*for..in*/for(let prototype.__proto__ in (('haha'.split)(<x><y/></x>++)))export *;\nyield <><x><y/></x></>;\n }");
tryItOut(" get __proto__([], __count__) { return ((p={}, (p.z = (null\n).yoyo(<><x><y/></x></> <= <><x><y/></x></>).prop = 'fafafa'.replace(/a/g, (1 for (x in []))))())) } ");
tryItOut("(-0);");
tryItOut("( \"\" )\n");
tryItOut("yyy");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(x::prototype in  '' ) {return;export __iterator__; }");
tryItOut("/*for..in*/M:for(let <bbb xmlns:ccc=\"prop = <x><y/></x>.__lookupGetter__(\"__proto__\")\"><ccc:eee></ccc:eee></bbb> = ({constructor: [<y><z/></y>],  set __iterator__(__count__) { yield; }  }) in new ((eval).call)()) {/*for..in*/for(var prototype = <x/> in  '' ) return\n }");
tryItOut("{{var __count__ = [], prototype; } }");
tryItOut("");
tryItOut("let prototype = <x><y/></x>;");
tryItOut("/*for..in*/for(__count__ = this.__defineGetter__(\"prop\", ((yield)).watch) in (yield [15,16,17,18].map((new Function(\"{}\")),  /x/ ))) {if(let (__iterator__, prototype = @foo) true) yield; else /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <x>\n<y/></x>) {throw <y><z/></y>; } }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in []) gc() while(((null.yoyo(((p={}, (p.z = __noSuchMethod__)()))))) && 0);");
tryItOut("switch(this.zzz.zzz.__count__ = ()) { default: L: { }break; /*for..in*/for(let constructor(-3/0.__lookupSetter__(\"function::__noSuchMethod__\")) in (eval(\"(gc())\", this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; export __iterator__;; yield y; }))).yoyo(<xxx>{__proto__}</xxx>)) if(@foo) case new (<><x><y/></x></>)( /x/g , __parent__).throw(<><x><y/></x></>.prototype = (function ([y]) { })()).*: break; break; /*for..in*/M:for(var prop = constructor.valueOf(\"number\") in this) return constructor;break; M:switch((<x><y/></x> % 5.0000000000000000000000)[ \"\" .propertyIsEnumerable(\"prototype\")]) { case <x/>: true\n }break; break; break; case 0: (window ? @foo : <y><z/></y>);break; case 3: let x::prop, __proto__ = prototype =  /x/g ;;break; case 1: break;  }");
tryItOut("/*infloop*/for(new RangeError(); (<x><y/></x>--); (-0) <<= <x><y/></x>) M:if(*::*) { if (*) let __proto__ = prop;} else {(<><x><y/></x></>);throw *::*; }");
tryItOut("/*infloop*/for(const [prop, [, []], ({ __noSuchMethod__: ({ __iterator__: __noSuchMethod__, __iterator__: each }), __parent__: ({ __iterator__: __iterator__, __parent__: __noSuchMethod__ })\t }), , __iterator__] = (__proto__ = null); ; this) {{return <x><y/></x>; }return  /x/ ; }");
tryItOut("if(__noSuchMethod__ = this .@ window + true) ;");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/for(var function::__iterator__ = *::*; (yield window); [15,16,17,18].map(function(y) { yield y; yield;; yield y; }, .2\f)\n * ((Math.pow).call(<{__iterator__}><!--yy--></{__iterator__}>, ))) ({ __parent__: prop })");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].slice)) {if((yield null.__defineSetter__(\"__count__\", ({}).hasOwnProperty))) (<x/>); else {\nthis;\n } } else  if ((p={}, (p.z = (<><x><y/></x></>).call((this.zzz.zzz), <><x><y/></x></>))())) false;");
tryItOut("/*infloop*/for(let __proto__; __proto__.__noSuchMethod__; this.zzz.zzz) {/*infloop*/M:for(__parent__; [1]; <xxx>{__parent__}</xxx>) {return *;const prototype = null, __noSuchMethod__; }yield; }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in #1#) yield this;");
tryItOut("L:while((( /* Comment */false)) && 0){constructor = 1e-81, prototype;export *; } const __iterator__.__proto__;");
tryItOut("const __iterator__ = <><x><y/></x></>, __iterator__; const __noSuchMethod__;");
tryItOut("/*infloop*/for(<x/>; <>\f<x><y/></x></>;  /x/ ) {\tfunction (delete, __count__)@foo }\nlet delete = __iterator__, __noSuchMethod__;");
tryItOut("/*infloop*/M:while(((<x/>.constructor)( \"\"  ? <><x><y/></x></> : <x/>, __proto__)).__noSuchMethod__ = prototype.prototype)return true;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in window.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }).propertyIsEnumerable(\"__iterator__\")) {/*infloop*/L:while(undefined){__parent__; }yield; }");
tryItOut("do  while(((([1,2,3,4].slice)([[]], <x><y/></x>))) && 0);");
tryItOut("/*for..in*/L:for(let prototype in ((<y><z/></y> < <x><y/></x>)(true ^=  \"\" ))){Math.pow }");
tryItOut("/*infloop*/do return <x><y/></x>; while(<x><y/></x>);");
tryItOut("while((new (({}).__lookupGetter__)(<x><y/></x>,  '' )) && 0)if( \"\" ) {return []; } else { }");
tryItOut(" '' ;");
tryItOut("if((gc).call((function(q) { return q; }(-0, --undefined)), (let (({ __noSuchMethod__: constructor, prototype: prototype }), constructor) [15,16,17,18].sort((new Function(\"return;\")), (~*))))) export __proto__; else break M;");
tryItOut("let (__count__ = this) { ; }");
tryItOut("if((true\n) === this.__defineGetter__(\"__count__\", Math.sin)) { if (((this.eval(prop)) >>>=<x/>.yoyo(__parent__)[*::* if (@foo)])) {{}/*for..in*//* nogeckoex bug 349964 */M: for  each(let prototype([z1,,]) in *) export *; } else //h\n{const prototype = @foo, __iterator__ = undefined;throw <x><y/></x>; }}");
tryItOut("with({__count__: @foo})export __count__;");
tryItOut("/*infloop*/for(prop; (<x><y/></x>.@foo).constructor = <x><y/></x>.propertyIsEnumerable(\"__count__\"); ((uneval(<x><y/></x> && this)))) {{let function::__count__ = 1.2e3; } }");
tryItOut("/*infloop*/for(const __iterator__ = false; <x/>; function(id) { return id }) return @foo;");
tryItOut("/*for..in*/M:for(let prototype = (new window(this, <><x><y/></x></>).isPrototypeOf((<x/>.propertyIsEnumerable(\"constructor\")))) in <x><y/></x>--) {continue ;let (__iterator__ = *::*, __proto__ = function(id) { return id }) { return; } }");
tryItOut("let (__iterator__) { const __noSuchMethod__, __noSuchMethod__; }");
tryItOut("if((p={}, (p.z = prop = window)())) M:if(0/0) {export *;yield; } else  if ((new Error(<><x><y/></x></>, <x><y/></x>))) {( /x/ ); }");
tryItOut("do \f while((\f-0.hasOwnProperty(\"__proto__\")) && 0);");
tryItOut("/*for..in*/for(const [prop, __iterator__] = <><x><y/></x></> in <x/>) return false;");
tryItOut("/*infloop*/for(__proto__;  /* Comment */__proto__; (p={}, (p.z = (p={}, (p.z = (__count__.unwatch(\"__parent__\").hasOwnProperty(\"constructor\")))()))())) {/*infloop*/for((<x><y/></x>) = [11,12,13,14].map.watch(\"__proto__\", (false).call( \"\" , <x/>)); this.__defineSetter__(\"__count__\", (new Function(\";\"))); <xxx {__noSuchMethod__}={(<><x><y/></x></>\n)} />) {/*infloop*/while(__iterator__)return;let __noSuchMethod__ = null; } }");
tryItOut("if((new (window)()).prop) yield __parent__; else {/*for..in*/for(var __proto__ =  /x/  === <x><y/></x> in <x><y/></x>) throw [z1]; }");
tryItOut("/*infloop*/for([1,2,3,4].map; prototype.__parent__ = (0x99 instanceof 1.2e3);  /x/g .*) yield let;");
tryItOut("export *;");
tryItOut(" \"\" \n/*for..in*/for(__count__ in false) {export *; }");
tryItOut("if(new ({}).hasOwnProperty()) return; else {yield; }");
tryItOut("L:if(__noSuchMethod__) { if (undefined) {export *;var __noSuchMethod__ = window, prototype = <x/> }} else {yield;continue ; }");
tryItOut("{(<x/>);{} }");
tryItOut("for(let y in []);\nL:with({prop: window.watch(\"__count__\", /a/gi)}){{break ;const __noSuchMethod__ = -1; } }\n");
tryItOut("with({prop:  { yield <x/>.__count__ = window } .@foo})M:with({__iterator__: new new Function( \"\" , <><x><y/></x></>)})default: case ((false)[\t#3={a:#3#}] ? (new ([1,2,3,4].slice)( /x/g )) : false.watch(\"__iterator__\", (<x><y/></x>).__defineSetter__)).propertyIsEnumerable(\"__proto__\"): yield\nreturn true;");
tryItOut("with({function::__parent__: ()})gc() const constructor");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const \t({ function::__count__: __iterator__ }) in 0/0) {yield; }");
