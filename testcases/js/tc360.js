tryItOut("(<x><y/></x>);");
tryItOut("M:if((__parent__ = <><x><y/></x></>)[(false)].__defineSetter__(\"prototype\", ((this.__defineGetter__(\"__iterator__\", (new Function(\"(undefined.__defineSetter__(\\\"yield\\\", new Function))\"))))).__defineSetter__)) {var constructor; const prop; } else  if (('fafafa'.replace(/a/g, {return;return this; }))) {( '' );gc() } else {with({__proto__: @foo})export <x/>;return; }");
tryItOut("/*infloop*/do {if(null) { if (null) {<x><y/></x>; } else ({a2:z2});}__parent__, __iterator__ = *::*; } while(());");
tryItOut("const __parent__ = <><x><y/></x></>, __count__;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("throw <x><y/></x>;let __proto__\n");
tryItOut("var __parent__, __iterator__;");
tryItOut("with({prop: ( >= (({}).valueOf(\"number\") if (@foo)))})let(__noSuchMethod__ = <x/>) ((function(){;})());");
tryItOut("{var __parent__\n/*infloop*/M:for(var constructor; <x><y/></x\t>; <y><z/></y>) {const prop;var constructor = null; }while((<x/>) && 0); }");
tryItOut("{if(<y><z/></y>.yoyo(<x><y/></x>)) export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__['__parent__'] in -0) M:with(0x99){ }");
tryItOut("L: /*for..in*/M:for(__proto__ = __count__ in  '' ) {;yield; }");
tryItOut("/*infloop*/for([z1]; this; <y><z/></y>) throw @foo;");
tryItOut("if([[1]]) {<x/> }");
tryItOut("for(let y in []);");
tryItOut("{gc()if((constructor-=window)) {({ prototype: prop })export *; } else  if ([,] >>= #1=[#1#]) {(undefined);yield @foo; } }");
tryItOut("switch(prototype.constructor) { case 9: break;  }");
tryItOut("L: break L;");
tryItOut("/*infloop*/do {let __noSuchMethod__; } while(undefined);");
tryItOut(" if ( \"\" )\n");
tryItOut("with({prototype: undefined})(1 for (x in []))");
tryItOut("yield\nthrow  \"\" ");
tryItOut("/*for..in*/for(var [__parent__, (__proto__.(<><x><y/></x></>) != new @foo)] = eval(\"(Exception())\", __proto__ = __count__) in ({__noSuchMethod__: <x/>})) /*for..in*/for(var (constructor|=('fafafa'.replace(/a/g, 'haha'.split)))(constructor.prototype getter= function () { return null } ) in typeof <x><y/></x>.(/*\n*/(-1))) {let constructor = <x/>, __noSuchMethod__ = 1.2e3;return 3.141592653589793; }");
tryItOut("/*for..in*/L:for(var (window >> <x/>).__count__ in ((eval)(this.__defineSetter__(\"prototype\", [1,2,3,4].slice).valueOf(\"number\")))){export __count__; }");
tryItOut("/*infloop*/L:for(let __count__; this; (__iterator__.__proto__ getter= \t(<x/>).__defineSetter__)) {<x><y/></x>constructor; }");
tryItOut("const prototype = this, __parent__ = <x><y/></x>\n");
tryItOut("let (constructor.__noSuchMethod__) { export *; }");
tryItOut("while((<x/>) && 0)continue ;");
tryItOut("const __proto__ = this, __parent__;{window;return this; }");
tryItOut("/*for..in*/for(__parent__ in (((<x><y/></x>.(1e+81)))(*.watch(\"prototype\", (this).__defineSetter__) :: (* .@x:: __proto__)))){yield; }");
tryItOut("M:with(__noSuchMethod__){return <x/>\f;yield; }\nlet (__count__ = false, __proto__ = __iterator__) { gc() }");
tryItOut("/*for..in*/M:for([prop, prototype] = [[]] in #3={a:#3#}) const __count__ = <x/>;");
tryItOut("\nif(__count__)  else {<x><y/></x>; }");
tryItOut("L:if((<x><y/></x>\n)) var prop = window, __iterator__; else {/*infloop*/for(let __parent__;  '' ; (#1=[#1#].__defineSetter__(\"prototype\", function  __noSuchMethod__ (__count__, constructor) { function  prototype () { throw  /x/g ; }  } \t))) break L; }");
tryItOut("/*infloop*/do {yield 1e+81; } while(Number())");
tryItOut("gc()\nwindow;\n");
tryItOut("return window ? *::* : function(id) { return id };");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <x><y/></x>)  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in #3={a:#3#}) {return __count__;const __iterator__ = <><x><y/></x></>, constructor = <x/>; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*infloop*/for((__parent__ = <x/> > (prototype.__iterator__ = this)); this + <x/> ? (*::*.eval(this)) : <y><z/></y>.hasOwnProperty(\"__proto__\") |= ([,] <<= (__iterator__.(<><x><y/></x></>)).__lookupSetter__(\"prototype\")); \f({ __count__: __noSuchMethod__.constructor }) = (p={}, (p.z = ({a2:z2}))()).propertyIsEnumerable(\"__count__\")) if(#3={a:#3#}) { if (('fafafa'.replace(/a/g, Math.sin)(yield null *= <y><z/></y>, <x><y/></x>))) {if({}) {return;function(y) { yield y; ; yield y; } } else  if (1e-81) @foo; } else gc()}");
tryItOut("yield;");
tryItOut("/*for..in*/for(let [prototype, constructor] = \n{} ? __count__ : * instanceof -0 in (eval(\"<x><y/></x>\\n\", this = window))(new Iterator())) {switch( '' ) { default:  } }");
tryItOut("L:if(<x/>) if(true) {let __count__ = <x><y/></x>; } else  if ([z1]) {undefined;const prop; }\n else /*for..in*//* nogeckoex bug 349964 */ for  each(var let (__parent__ = __iterator__, prop = arguments) <x><y/></x> in <><x><y/></x></>) {return;return __iterator__; }");
tryItOut("L:if(undefined) break M; else  if (true) {__proto__ = <x/>; }");
tryItOut("let (__parent__ = this.zzz.zzz) { if(new ((true)[ \"\" ])()) if(({prop: true }) >>= #0=({__proto__: __proto__})) let __count__, __count__; else  if (undefined)  else  if (eval(\"M:if((false.*)) {yield *::*; } else  if (__count__ = __parent__) return 1e81;\", __proto__.__count__ = #1=[#1#].*)) throw window; else L: {__parent__ = ({}), __noSuchMethod__ = __iterator__;function (function::__parent__) { return <x><y/></x> }  } }");
tryItOut("if([]) export function::prototype; else  if (__proto__) (<x/>)\n");
tryItOut("M:with({__noSuchMethod__: (\r__iterator__)})({prototype: 1e81 });");
tryItOut("do if( /x/ ) {function(q) { return q; }const __parent__ = @foo; } while((<x><y/></x>) && 0); const __parent__;");
tryItOut("for(let y in []);");
tryItOut("L: ;");
tryItOut("if(<xxx {__proto__}={<><x><y/></x></>[ /x/ ]} />.(({__proto__:  '' (__proto__, [z1,,]) !== yield [1]}).hasOwnProperty(\"__parent__\")) ? (new Function).call(({__count__: undefined }), __proto__).isPrototypeOf(<><\f>~<x/></></>) : ((3.141592653589793 if (window))).throw((-1))) (function(q) { return q; }).apply else L:while((()) && 0) /x/g ;");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:for(let __parent__ = __count__.(<x><y/></x>); (const __iterator__ = prototype, __parent__ = @foo);  /x/ ) let (prop, constructor = this) { gc() }");
tryItOut("L: break ;");
tryItOut("/*for..in*/<>(((<><x><y/></x></>)) == <><x><y/></x></>)</>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <x><y/></x>) { }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("let (constructor = (+(this % 5.0000000000000000000000) ^ (*.__defineSetter__(\"__noSuchMethod__\", Function))), __iterator__ = window) { M:while((!'fafafa'.replace(/a/g, /a/gi)) && 0)export *; }");
tryItOut("\t\n<x/>\neval");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((<x><y/></x>)(__parent__))){yield *::*; }");
tryItOut("/*infloop*/while(new (Math.pow)(([,].@foo), [z1,,]))(new Function(\"(this);\"))");
tryItOut("M:if([, ({ prototype: ({ prototype: __noSuchMethod__, constructor: prop }) })] = (0/0.valueOf(\"number\"))[(__iterator__.(this))]) {throw <x/>; } else {/*infloop*/L:for(({ function::prop: __noSuchMethod__, __iterator__: __count__ }) = __parent__ = <><x><y/></x></>; undefined; (({ get __count__(__count__) { return <y><z/></y> }  }))) {throw  /x/ ;1.3; } }");
tryItOut("with({\f<><bbb xmlns:ccc=\"<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>\"><ccc:eee></ccc:eee></bbb></>: ({__iterator__: this})}){/*infloop*/for(let __iterator__ =  \"\" ; 5.0000000000000000000000; prop) ; }");
tryItOut("continue L\n");
tryItOut("let (__parent__ = [15,16,17,18].some('haha'.split, __proto__)) { \n }");
tryItOut("while(( \"\" ) && 0){return prototype; }\nM:with({constructor: this})export __noSuchMethod__;");
tryItOut("if(this.zzz.zzz) { if (({__count__: __proto__, delete: (window.valueOf(\"number\")) })) {continue L;return ({}); } else {/*infloop*/while(undefined)return 0x99;throw *; }} const constructor;");
tryItOut("/*infloop*/for(let constructor; __noSuchMethod__; <x><y/></x>) return <x><y/></x>;");
tryItOut("/*infloop*/while(eval(\"constructor = 3;\", [<x><y/></x>])){/*for..in*/for(__count__ in <x><y/></x>) {yield [,]; } }");
tryItOut("gc()\nexport *;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (yield *).@*) (__parent__);");
tryItOut("gc()\n");
tryItOut("L: (3.141592653589793)");
tryItOut("break ;yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/></x>) return;");
tryItOut("/*infloop*/for(let __count__ = (new null()); <>((yield *::*((-0).eval(__proto__) .@*:: (p={}, (p.z = *::*)()))))</>; this.zzz.zzz) {L:if(__iterator__ = [z1]) return prototype; else {gcthrow null; } }");
tryItOut("if(() ? __count__ = *::* : prototype = [prototype, prop, __count__]) break ; else  if (prototype = (-3/0 <<= *.throw(prop.__proto__ = @foo))) {var __iterator__ = #1#, __noSuchMethod__; } else return;");
tryItOut("try { try { with({}) yield <y><z/></y>; } catch(constructor) { gc() }  } finally { this.zzz.zzz; } ");
tryItOut("continue M;return; const __proto__;");
tryItOut("switch((gc).call(1.2e3, <y><z/></y>) >= __iterator__.constructor.eval(<zzz>__iterator__.__proto__</zzz>)) { case 9: break;  }");
tryItOut("prototype = __count__;");
tryItOut("");
tryItOut("if(<><x><y/></x></>) export __proto__; else  if (@foo) [1,2,3,4].slice else var window, prototype = function ([y]) { };");
tryItOut("for(let y in [5,6,7,8]) __iterator__ = __iterator__;/*for..in*/for(var __proto__ in #1#) ");
tryItOut("return (({ __count__: ({ __count__: __noSuchMethod__ }), __count__: [({ prototype: prototype }), [], ] }) = ({ __iterator__: [], prototype: __iterator__['__count__'] }));");
tryItOut("throw prop;");
tryItOut("this.zzz.zzz;");
tryItOut("if(('fafafa'.replace(/a/g, <><x><y/></x></>))) {let constructor = false; }");
tryItOut("/*for..in*/for(const __proto__ = (new yield (('haha'.split)())) in <>(yield  \"\" )</>.(((<x><y/></x>)((function ([y]) { })())))) M:if((constructor = eval(\"{}\", *))) { if ( '' ) {gc() }} else {export *; }");
tryItOut("if(this.__defineSetter__(\"__count__\", ({}).hasOwnProperty)) {constructor = <y><z/></y>, __noSuchMethod__;L:if([z1]) {const constructor =  '' ;throw  /x/g ; } } else  if (<><x><y/></x></>.@* <<= [z1]) \f{yield <><x><y/></x></>;break ; } else <x><y/></x>;");
tryItOut("switch(( /* Comment */(prototype.function::__iterator__))) { default: /*infloop*/for(let prop = .2 ? <><x><y/></x></> : arguments; (__noSuchMethod__+=<x/>); (0.propertyIsEnumerable(\"__proto__\"))\n) {{} }case 9: /*infloop*/while([constructor].sort((new Function(\"({});\"))))export __count__; const __noSuchMethod__;case  '' : break; {}break;  }");
tryItOut("with(arguments <<= (this.zzz.zzz)){if(<x><y/></x>) { if ([,]) {(eval).apply }} else let __iterator__, __proto__ =  \"\" ; }");
tryItOut("M:with({prototype: (true.__lookupGetter__(\"constructor\")) += prop}){(<y><z/></y>); }");
tryItOut("/*infloop*/do {;if(<x><y/></x>) { if (*::*) yield  /x/ ;} else export __noSuchMethod__ } while{<x/>{{} } } (__noSuchMethod__=");
tryItOut("return;");
tryItOut("/*infloop*/M:for(var //h\nprototype; this.zzz.zzz <= ++null; ( { gc() } .__lookupGetter__(\"__iterator__\"))) if(function::__iterator__ = this) {[1]; } else  if (<><x><y/></x\r></>) {( /x/g ).watch } else export *;");
tryItOut("let ([], ({ __count__: __noSuchMethod__, ({ __parent__: __count__ }): [[__iterator__, ({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: prototype }), __noSuchMethod__, [], [, , , , ]]] })) { return; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(('haha'.split).apply()) { if ((p={}, (p.z = prop = 033)())) ;} else {const __iterator__;return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = 0 == __proto__ in ({a1:1})) {yield; }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = (yield <x/> & ({__iterator__: undefined })) in true) {with((function ([y]) { })()){ /x/ ;1.2e3; }\n(1e-81);( /x/g ); }");
tryItOut("/*infloop*/for(prototype; eval(\"export prop;\", ((yield <x><y/></x>))); (this.__defineGetter__(\"constructor\", ('haha'.split).apply))) {if((<><x><y/></x></> ? [[]] : [[]])) try { continue L; } catch(prop) { return <x><y/></x>; } __iterator__ = 1e4 }");
tryItOut("{return; }");
tryItOut("M:if(( /x/g  if (arguments))) {;export *; }");
tryItOut("return;");
tryItOut("switch(0.1) { case \n<><x><y/></x></>: try { @foo; } finally { {} } break; default: ( /x/g );break;  }");
tryItOut("{prop }");
tryItOut("break \n");
tryItOut("let (this = __iterator__) { const __proto__; }\n");
tryItOut("/*for..in*/for(constructor = <><zzz>(((new Function(\"\")))())</zzz></> in ((uneval(this.__defineSetter__(\"__count__\", (1 for (x in []))) >>= undefined >>= __noSuchMethod__)))) {{}if(prototype) {gc(); } else  if (window) {}for(let y in []); }");
tryItOut("if(new function ()[prototype for each (__parent__ in this)]()) \t{yield } else  if ((gc())) {/*for..in*/for(let function::__parent__(eval(\"<><x><y/></x></>\", <x/>)) in prototype) {continue M;yield this; }break ; } else if((yield prop)) continue L; else {yyy { return null }  }");
tryItOut("{return @foo;break L; }");
tryItOut("/*infloop*/M:while(!(eval(\" /x/  - window\", 0x99)))do  while((RegExp(<y><z/></y>, *)) && 0);");
tryItOut("/*infloop*/for(var ({ prototype: constructor, prototype: __parent__ }) = this.__defineSetter__(\"prop\", function  prototype (constructor, __noSuchMethod__) { return  ''  } ); (this.zzz.zzz); [11,12,13,14].sort) gc");
tryItOut("yield");
tryItOut("yield constructor");
tryItOut("M:switch([[]]) { default: break;  }");
tryItOut("do throw  '' ; while(((gc())) && 0);");
tryItOut("do  while((let (__noSuchMethod__ = this) (<x><y/></x>.yoyo( '' ))) && 0);");
tryItOut("/*infloop*/while(__count__.yoyo(prototype = (constructor.(<><x><y/></x></>))))return;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for(constructor; <x><y/></x>; *::*) ; const __iterator__;");
tryItOut("let (constructor = (this.zzz.zzz)) { /*infloop*/for((*::*--) *= window.<x/> * #1# ? <><x><y/></x></> : <><x><y/></x></>; [, __parent__, , , ] = __parent__; eval(\"constructor - <y><z/></y>\", <x><y/></x>.hasOwnProperty(\"prop\").isPrototypeOf(\tthis.__defineGetter__(\"constructor\", ({}).hasOwnProperty)))) var constructor, __proto__ }");
tryItOut("prop");
tryItOut("if(( /* Comment */new [1,2,3,4].map()\n).__noSuchMethod__) {/*for..in*/for(const __proto__ = [#0=({__parent__: false}) if (0)] in <x><y/></x>) /*for..in*/for(var prototype in @foo) {{}return; } } else yield this;");
tryItOut("yield (prop if (*::*))\n\rreturn  '' ;");
tryItOut("let(constructor = ((let (prop = ({})\f) arguments) .@ <><x><y/></x></>.yoyo( \"\" )), [({ prop: __iterator__, __iterator__: prop }), , , constructor] = constructor = window * ((1 for (x in []))).call( /x/g , __count__)) ((function(){let(__noSuchMethod__(prototype), __parent__) ((function(){(let (__proto__ = <x><y/></x>) \fwindow);})());})());");
tryItOut("gc()\nreturn [z1,,];\n");
tryItOut("try { let(prop, __parent__) ((function(){;})()); } catch(__parent__) { __parent__ = prop; } ");
tryItOut("if((*::* if (<x><y/></x>))) {export constructor;constructor, __noSuchMethod__; } else  if (window.__lookupGetter__(\"prototype\").__defineSetter__(\"constructor\", 'haha'.split)) throw __proto__; else {break ; }");
tryItOut("let (__proto__) { this; }");
tryItOut("/*infloop*/for(eval(\" /x/ \", <x/>); (constructor =  '' ); * for (__count__ in window)) /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in window) ;");
tryItOut("let(({ prop: prototype }) = [null for (let in  /x/ )], __count__) { this.zzz.zzz;");
tryItOut("let (__proto__, __proto__ = *::*) { __count__, constructor; }");
tryItOut("with({}) { yield (<x><y/></x>)(); } ");
tryItOut("if((__iterator__.([1,,].valueOf(\"number\")))) L:if(#1#) {{}yield; } else  if (prototype .@ <><x><y/></x></>) return; else  if (([15,16,17,18].some(function(y) { yield y; export __iterator__;; yield y; }, \n<><x><y/></x></>).throw(eval(\"throw this;\", window) for (__count__ in window)))) {export *; } else {throw  \"\" ;{yield; } }");
tryItOut("if(({ constructor, prop = null: prototype }) = (-1).watch(\"prototype\", gc)) M:while(( /x/ ) && 0)yield prototype;");
tryItOut("L: M:while((*) && 0)yield; const __iterator__\nvar __iterator__ = constructor, __noSuchMethod__;");
tryItOut("if(<y><z/></y> = prop) { if (this.__defineGetter__(\"__iterator__\", /a/gi)) {gc() }\t else {/*infloop*/do {{}(*::*); } while(*::*); }}\n");
tryItOut("/*for..in*/L:for(const __count__ in eval(\"if(<><x><y/></x></>) {return <><x><y/></x></>; }\", #1=({constructor: @foo}))) {\fexport *; }");
tryItOut("with({__proto__: (<x/> -= <y><z/></y>).@*}){gc(){; } }");
tryItOut("let(__parent__, __noSuchMethod__ = ( /x/g  += __iterator__)) { __parent__ = prop;");
tryItOut("if((- /x/g ) != [1,,] = <x><y/></x>) { if (true) } else {return;\n{} }");
tryItOut("/*for..in*/for(let [prototype, []] = ({ constructor: __proto__, __count__: prototype }) = __noSuchMethod__ in <x><y/></x>) {<><x><y/></x></> }");
tryItOut("/*infloop*/M:for(const __proto__; (this.__defineSetter__(\"__count__\", Math.sin)); (<x><y/></x>).throw((<><x><y/></x></> for each (constructor in *::*).prop))) {/*infloop*/for(prop; <><x><y/></x></> instanceof window; yield __parent__) \f{break ;yield; } }");
tryItOut("{}var __proto__; const prototype;");
tryItOut("let constructor = ({}), __proto__ =  /x/ ;/*infloop*/for(prop; * ? <x/> : 1e-81.@*; \f((([z1,,] >>= window.hasOwnProperty(\"prop\")) -= 3/0.@*).propertyIsEnumerable(\"__parent__\"))) {yield x::__parent__;L:while((prototype.(<x><y/></x>)) && 0)prototype = <><x><y/></x></>; }");
tryItOut("\f{let __count__, constructor = <><x><y/></x></>; }");
tryItOut("if((({prototype:  /x/g  }) |= prop-=prop)) { if (({a2:z2}).__proto__ = prop) {gc(){} } else {export *;yield null; }}");
tryItOut("*if(window) {yield  \"\" ; } else {yield; }\n");
tryItOut("/*infloop*/for(var constructor = (new <y><z/></y>\n((uneval(this)))); (constructor = <><x><y/></x></>); (window.__count__)) (*::*);");
tryItOut("if([1]) {} else  if (window)  else throw <x><y/></x>;");
tryItOut("while(([11,12,13,14].some) && 0)M:if(new (__proto__.valueOf(\"number\"))((undefined[<><x><y/></x></>]))) { if (([1].__proto__ = (__proto__ = <x/>)) = new (({}).hasOwnProperty)(prop.__count__ getter= (1 for (x in [])))) {@foo; } else /a/gi}");
tryItOut("if( '' ) {{} } else  if (<x><y/></x>) (new Function(\"export *;\")) const __count__;");
tryItOut("{gc()({ __proto__: __count__, __count__: prop }); }");
tryItOut("throw StopIteration;");
tryItOut("do {} while((this.yield) && 0);");
tryItOut("if(constructor) {yield <><\rx><y/></x></>; } else {Math.pow }\nexport __count__;");
tryItOut("export *;");
tryItOut("M:do {; } while((*::*) && 0);");
tryItOut("let (__count__, constructor) { if(__parent__.((delete <x><y/></x>))) { if (<x><y/></x>.throw(window).__iterator__) {continue ;let constructor = 1e+81; } else throw __noSuchMethod__;} }");
tryItOut("while(((({ __proto__: __parent__, __proto__: __iterator__ }) = __noSuchMethod__.throw(eval))) && 0){gc()if(<x><y/></x>) {var __parent__; } else {return;let __iterator__; }\n(\t[1,2,3,4].slice).apply\n }");
tryItOut("L: /*infloop*/do gc() while(false);");
tryItOut("do return <><x><y/></x></>; while((prototype = constructor) && 0);");
tryItOut("/*for..in*/for(var __proto__ = (__iterator__.__noSuchMethod__ setter= function  prop (prototype, __proto__) { return <y><z/></y> } ) in !((yield function ([y]) { })) ?  '' .__lookupGetter__(\"prototype\") : constructor-=this) {if(((uneval(( /x/g  <<= <x/>)))) ? @foo += <x><y/></x> : (this.__defineGetter__(\"prop\", (function(y) { yield y; export *;; yield y; }).apply))) {/*infloop*/M:for(*; null;  /x/g ) const prop = null; } else  if (@foo) var __iterator__ = this; else {const __iterator__, let = *::*;{} }/*for..in*//* nogeckoex bug 349964 */ for  each(({ __count__: prototype, constructor: __noSuchMethod__ }) in true) {const __noSuchMethod__;return <><x><y/></x></>; } }");
tryItOut("/*infloop*/for(window << -0; (033.__lookupGetter__(\"function::__iterator__\")); 3.141592653589793) {with({}) { function (__count__, prop)__noSuchMethod__ } continue L; }");
tryItOut("{throw function::prototype;switch(((__noSuchMethod__.watch(\"__count__\", function  __noSuchMethod__ (constructor, __parent__)<><x><y/></x></>)).watch(\"__iterator__\", [1,2,3,4].map))) { default: /*infloop*/while(3){;{} }break; break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var <x><y/></x> in <><x><y/></x></>)  /x/ ;");
tryItOut("/*infloop*/M:while((<x><y/></x> += __parent__))prop = <x/> ^= function(id) { return id }['prop']");
tryItOut("with({}) { throw <x/>; } ");
tryItOut("with({}) { let(get, __iterator__) { yield (((uneval(this)))--); } ");
tryItOut("M:if(! \"\"  ^ true ?  /x/  : null) {/*for..in*/for(let __proto__ in <y><z/></y>) constructor = __iterator__; } else  if (function  prop (constructor, prop) { return <><x><y/></x></> } ) 1e-81;");
tryItOut("switch([1]) { case 4.:  }");
tryItOut("with({prototype: __proto__}){export function::__count__; }");
tryItOut("/*infloop*/while(new Array((-1))){evalconst __proto__ = 4.; }");
tryItOut("{var __iterator__, __iterator__; }");
tryItOut(";");
tryItOut("throw true;\nlet __proto__;\n");
tryItOut("if([prototype setter: gc]) {return;throw window; } else  if (({__proto__ setter: (1 for (x in [])) })) /*for..in*/M:for(const __proto__ in ((new Function)(prototype))){;export *; }");
tryItOut("if([11,12,13,14].some) yield; else  if (let (prop = <y><z/></y>, __parent__) <><x>\r<y/></x></>.__defineSetter__(\"__parent__\", prototype)) { } else window;");
tryItOut("if(function(id) { return id }) yield; else {; }");
tryItOut("let(({ prototype: __parent__(true) }) = \nprop.__noSuchMethod__ setter= function  __iterator__ () { (<x><y/></x>); } ) { return prototype;");
tryItOut("try { (<y><z/></y>); } finally { export __iterator__; } ");
tryItOut("return __parent__: <></>.().yoyo( '' .hasOwnProperty(\"prop\").__defineSetter__(\"prototype\", [1,2,3,4].slice));");
tryItOut("gc()");
tryItOut("gc()");
tryItOut("gc()");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("if((({ set __noSuchMethod__() { yield __proto__ } , __count__: __count__ }))) { if (new (yield.hasOwnProperty(\"__proto__\"))) {export __parent__; }} else {export __iterator__;(function ([y]) { })() }\n/*infloop*/for(__proto__ = #1=[#1#]; (({__parent__ setter: ([1,2,3,4].map).apply, __iterator__ setter: (new Function).call })); <><x><y><x></>) {var prop = 0, prop; }");
tryItOut("/*for..in*/for(var <x/>.__iterator__ in (([1,2,3,4].slice)(*::*))){yield undefined;if(<x><y/></x>.(null)) const __proto__ = *, __proto__; else  if (*) throw (function ([y]) { })(); }");
tryItOut("throw *::*;");
tryItOut("{throw <x><y/></x>; }gc const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let this['__proto__'] in <x><y/></x>) ");
tryItOut("/*for..in*/L:for(var [x::constructor, __noSuchMethod__] = (new ((let (__parent__, __count__) eval(\"\", __count__).propertyIsEnumerable(\"prototype\")))(Date(* >= [z1], <x><y/></x>), (new yield (<x/> if (<><x><y/></x></>))()))) in (Iterator((uneval(*)), undefined.unwatch(\"__noSuchMethod__\")))) {yield 4..__defineGetter__(\"prop\", (<y><z/></y>).__defineSetter__); }");
tryItOut("if( \"\" ) { if (<x/>) {return; }} else return\n\nthrow null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((new (#1=0.1,  \"\" )))((<x><y/></x> / *::*.watch(\"__count__\", (\tfunction  __proto__ (__iterator__, constructor) { yield <x><y/></x> } ).call))) in new 'fafafa'.replace(/a/g, this)(<zzz>false</zzz>.(new *::*()), (constructor++))) {[constructor, __iterator__] = constructor;if((__noSuchMethod__ = [1,2,3,4].slice)) {with({__iterator__: __proto__})yield;{} } else if(<><x><y/></x></>()) ( /x/ ).__defineSetter__ }");
tryItOut("if(<x><y/></x>) {gc()__proto__; } else  if (prototype) continue L; else return;");
tryItOut("return Exception((__parent__ = (this.valueOf(\"number\")).valueOf(\"number\")));");
