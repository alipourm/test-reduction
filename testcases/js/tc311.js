tryItOut("M:with({constructor: @foo for (constructor in constructor)}){/*for..in*/for(let [__iterator__, __proto__] = *\n in null) export prop;/*infloop*/for((yield constructor);  '' ; *::* in true) {__count__ } } const each;");
tryItOut("/*for..in*/for(__parent__ = window in __noSuchMethod__) {{}1e+81; }");
tryItOut("break ;");
tryItOut("if((<y><z/></y> instanceof (#1=[<x><y/></x>]) &= 3.141592653589793.constructor = 1.2e3))  else /*\n*/(false);");
tryItOut("while((yield (<><x><y/></x></>)(<x><y/></x>, 0.1)) && 0)let(__noSuchMethod__ = window !== <y><z/></y>, __parent__) { let(function::__parent__ = false) {  '' ;");
tryItOut("switch(constructor = true[*::*.__lookupGetter__(\"__count__\")]) { default: break; case 7: (<><x><y/></x></>);break; \f }");
tryItOut("while(((<><x><y/></*\n*//x></>.__lookupGetter__(\"__proto__\") ? prop = @foo : null.hasOwnProperty(\"__count__\")).propertyIsEnumerable(\"__count__\")) && 0)yield;");
tryItOut("/*infloop*/L':while(__parent__ =  /x/ )({}).__lookupGetter__");
tryItOut("/*for..in*/for(let @foo.prototype in (((\n<x/>))(++(<x><y/></x>.__defineGetter__(\"constructor\", __iterator__)))))<x/>;");
tryItOut("if(<x/> .@ <><x><y/></x></>) { if (@foo) throw @foo;} else {{} }");
tryItOut("let (function ([y]) { })() = <><x><y/></x></>, let; const __noSuchMethod__;");
tryItOut("export *");
tryItOut("return null;");
tryItOut("/*for..in*/for(let __proto__ in 3.141592653589793) yield;");
tryItOut("L:if(<x/>) ");
tryItOut("false; const __parent__;");
tryItOut("switch(function (__count__, prop) { return [] } (<x><y/></x>, this)) { default: let (__iterator__, prop = __noSuchMethod__) { {; } }break;  }");
tryItOut("{export *; }");
tryItOut("/*infloop*/while(5.0000000000000000000000 +=  /x/ )this;");
tryItOut("/*infloop*/for(eval(\"[-0 for each (__parent__ in  \\\"\\\" )]\", __parent__.propertyIsEnumerable(\"__count__\")); __parent__; __parent__ = __proto__.([])) {return  /x/g ;__iterator__; }");
tryItOut("try { throw StopIteration; } catch(__parent__) { let(constructor = window <= <x><y/></x>, ({ __count__: [[, __iterator__, , __count__], __parent__, , [prop, __noSuchMethod__, ], ] }) = [1,,]) { __iterator__ = __parent__; } finally { let(({ __iterator__: [({ __parent__: __proto__ }), ], function::prop: [, , __count__, , [,]] }) = __noSuchMethod__ = true.hasOwnProperty(\"__proto__\")) ((function(){this.zzz.zzz;})()); } ");
tryItOut("throw default: do const constructor, __parent__ = <x><y/></x>; while((#1=[#1#]) && 0);break; case <><x><y/></x></> |= <x/>: ;");
tryItOut("M:if(new Array(~constructor)) { if (*::*--) {<y><z/></y>; } else return this;}");
tryItOut("M:if(([] = (\nwindow))) {/*infloop*/do #1=[#1#]; while(([3.141592653589793].filter(prop) += __parent__ = __parent__ = prototype));yield <><x><y/></x></>\nlet __count__ = <x><y/></x>; }");
tryItOut("/*for..in*/prototype");
tryItOut("M:do yield; while((constructor) && 0);");
tryItOut("/*infloop*/M:while(null)yield;");
tryItOut("L: {yyy({}).hasOwnProperty }");
tryItOut("yield ((*::* ? <x><y/></x> : @foo).@*);");
tryItOut("/*infloop*/do with({__noSuchMethod__: (constructor = false)}){ } while(('haha'.split).call( /* Comment */1e81, ));");
tryItOut("/*infloop*/for({(#1#);{} }.eval(<x/>); (prop = __parent__).propertyIsEnumerable(\"__iterator__\"); (constructor = [].constructor)) {__proto__ = [z1]; } const __proto__/*infloop*/for(let prop =  /x/g ; prototype; 1e-81) {__proto__ =  \"\" ;break ; }");
tryItOut("if( /x/ ) continue ; else {yield <><x><y/></x></>;gc() }");
tryItOut("yield <x><y/></x>;");
tryItOut("L:while((<bbb xmlns=\"\"><!--yy--></bbb>.(if(__iterator__.(__noSuchMethod__)) { if ( set __iterator__() { yield 1.3 } .__lookupSetter__(\"__iterator__\")) {let __noSuchMethod__, __iterator__ = <\f><x><y/></x></>; }} else  instanceof #3={a:#3#}.__lookupGetter__(\"constructor\"))) && 0){/*for..in*/for(let __proto__ in ((function  __noSuchMethod__ () { yield (uneval(({a2:z2}))) } )((yield #1=[#1#])))){__count__\n }{} }");
tryItOut("let (prop, (prop)) { {} }");
tryItOut("/*for..in*/for(prototype in ((function  prop () { return .2 } )(<y><z/></y>)))\n");
tryItOut("L:if(1.2e3) { if (<y><z/></y>) {case true: case <x><y/></x>: throw __iterator__;break; constructor = window, constructor; }} else return <x><y/></x>;");
tryItOut("if(this.__defineSetter__(\"__parent__\", (<x/>).watch)) __count__ = <x><y/></x>, constructor =  '' ; else  if (([[]] - <><x><y/></x></>)) {break L; }");
tryItOut("try { __parent__ = __parent__, prop = window; } catch(__parent__ if (function(){return;})()) { ; } finally { {} } ");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(prototype in 1.3) {({}).hasOwnProperty }");
tryItOut("L:if((({}).hasOwnProperty).call(<y><z/></y>, <x><y/></x>).*) {{}; } else  if ((((1 for (x in []))).call(constructor =  \"\" , ([15,16,17,18].map(function  constructor (__count__, prototype) { return {} } , ;.__lookupSetter__(\"__parent__\"))), Math.sin))) const __count__;");
tryItOut("/*infloop*/L:while((__parent__.(__proto__)) .@*:: ( /x/g  .@x:: <y><z/></y>))<!--yy-->");
tryItOut("/*infloop*/for(var __parent__; __parent__ = void <x><y/></x>; Function(0.1, 3/0)) {__proto__; }");
tryItOut("with({__parent__: ('haha'.split)(<y><z/></y> ^ <x><y/></x>, new (<><x><y/></x></>)(;))}){{} }");
tryItOut("return  '' ;");
tryItOut(" new ");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in [(yield *::*)]) gc()\n\n/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <><x><y/></x></>) yield <><x><y/></x></>;");
tryItOut("if(((true).unwatch(\"__noSuchMethod__\"))) { if (function::({ __iterator__: ({ prop: __proto__, prototype: prototype }) })) {__noSuchMethod__;\fif(#1#) { if (__proto__) {let prop, prototype = @foo;continue ; } else {({}).hasOwnPropertyyyy }} } else gc()}");
tryItOut("while((1.3) && 0){let __parent__ = 3/0;let  = <y><z/></y>; }");
tryItOut("throw 3.141592653589793; const prototype;");
tryItOut("if(((function (__proto__, prototype) { yield <x><y/></x> } ).call((<y><z/></y> || <x><y/></x>), prototype = 1e-81;, <x><y/></x>))) {undefined;break ; } else  if (eval(\"try { continue ; } catch(__count__ if window) { return; } \", )) return;");
tryItOut("/*infloop*/for(var __noSuchMethod__; let (prop =  /x/g , prototype = <x/>) <><x><y/></x></>; (eval(\"this.__defineSetter__(\\\"prototype\\\", (new Function(\\\"yield;\\\")))\", <><x><y/></x></>.isPrototypeOf(true)))) {(function ([y]) { })(); }");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(var (constructor) in [11,12,13,14].filter.propertyIsEnumerable(\"__noSuchMethod__\")) {/*for..in*//* nogeckoex bug 349964 */ for  each(let delete in -0) {const __iterator__ =  '' ; } }");
tryItOut("__parent__, prototype = <x/>; const constructor;");
tryItOut("/*infloop*/for(const [({ prototype: prop }), , , ] = __iterator__.prop = __noSuchMethod__ = *::*; (p={}, (p.z = new Date())()); prototype = ({__count__: window,  get __parent__ __noSuchMethod__ (__parent__, __parent__) \"\"  }) ? (1e+81) : (prototype = <><x><y/></x></>)) with( /x/g )yield window;");
tryItOut("/*for..in*/for(__parent__ =  /x/  in true) window\n/*for..in*/for(const __iterator__ in <><x><y/></x></>) gc()");
tryItOut("L: {const prop, constructor;throw <x/>; }");
tryItOut("/*infloop*/M:while(<zzz>([this.zzz.zzz].some((eval(\"function (constructor) { return *::* } \", ({a2:z2})))))</zzz>)do {yield <><x><y/></x></>; } while((__parent__) && 0);");
tryItOut("if(__count__ = (((__noSuchMethod__ @ this))())) { if ([1]) //h\n{yield;; }} else {throw <><x><y/></x></>; }");
tryItOut("L:with({__proto__: }){let __iterator__ = __count__;constructor; }");
tryItOut("L:with((<bbb xmlns=\"*++\">yyy</bbb>.(<x><y/></x>.__count__)))/*for..in*/for(const prototype = prop.__iterator__/*\n*/ in <x><y/></x>) {break M; }");
tryItOut("while((<><zzz>prototype.@*</zzz></>) && 0){L:if( /x/g ) { if (<x><y/></x>) this;} else {;export /*\n*/__iterator__; }; }");
tryItOut("/*infloop*/do case 5: export __count__;break; break;  while(__iterator__.__parent__ getter=  '' .__parent__ = <><x><\ry/></x></> - (({__iterator__: this })).unwatch(\"__noSuchMethod__\"));");
tryItOut("let(__parent__) ((function(){/*infloop*/for(window; <><x><y/></x></>\r; false) var __iterator__;})());");
tryItOut("if((new window())) constructor, __proto__ = true;");
tryItOut("/*infloop*/do {<><x><y/></x></>, <><x><y/></x></>; } while(__noSuchMethod__);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:for(new (new Function)(4.); window[prototype(<x><y/></x>) = __noSuchMethod__ % window.unwatch(\"prototype\")]; (eval(\"([__count__].some(Math.pow))\", (<x><y/></x>.hasOwnProperty(\"prototype\")))) != (new <x><y/></x>().unwatch(\"prototype\"))) {/*for..in*/for(let __iterator__ in ((__count__)((<><x><y/></x></>.__iterator__)))){const constructor, prop;yield; } }");
tryItOut("/*for..in*/for(__count__ in ((({__count__: __count__ = <><x><y/></x></>}))(constructor))){(this.__defineGetter__(\"constructor\", ({}).hasOwnProperty).unwatch(\"__iterator__\")), nullprototype setter: [1,2,3,4].map }");
tryItOut("if(<x><y/></x>.(this) === <><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb></> , \n(4..__defineGetter__(\"__iterator__\", function ()<y><z/></y>)).__proto__) do {return  '' ;return; } while(( if ([[1]])) && 0); else  if (true && (1.2e3 <= 1e81)\n.valueOf(\"number\")) with(new (/a/gi)(033)){ }");
tryItOut("/*infloop*/do return *::*; while(this.__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))));");
tryItOut("throw <x/>;");
tryItOut("");
tryItOut("M:do {var __count__, __noSuchMethod__ = prototype;; } while((([15,16,17,18].map([1,2,3,4].map, <><x><y/></x></>))) && 0);");
tryItOut("let ([, prototype] = (<x><y/></x> || * *= 3.141592653589793)) { /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <x/>) {L:switch(prop) { case undefined: default: yield 1e81;break; case 0:  } } }");
tryItOut("L:do if(__proto__) __iterator__ else  if (<x><y/></x>) {yield; }export __proto__; while((Array(<x/>.throw(false))) && 0);");
tryItOut("if((<y><z/></y>.watch/*\n*/(\"__parent__\", function  constructor ( { return @foo } ) { yield window } ))) { if ((<y><z/></y> >>>=1e-81)) [[1]]; else {}}");
tryItOut("/*infloop*/while(\f([15,16,17,18].some(<x/>, undefined))(__parent__) = ((Math.pow)(let (prototype) true))){return [,,];\n(<x><y/></x>);\n[1,2,3,4].slice }");
tryItOut("switch((eval(\"let __count__ = false;\", @foo))) { default: break;  }");
tryItOut("if(constructor.constructor setter=  /x/ ) {export __proto__;throw [[]]; } else  if (function::__iterator__: <x><y/></x>.(yield [z1])) {{} } else {;(<x><y/></x>).watch }\n");
tryItOut("/*for..in*/for(prototype = <y><z/></y> in <><x><y/></x></>) var prototype = <><x><y/></x></>;");
tryItOut("if(<x><y/></x>) yield; else  if ( /x/ ) {export prop\t; }");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; (constructor);  /* Comment */eval(\"break M;\", (<><x><y/></x></>.watch(\"prop\", Function))) * \nthis) try {  } catch(__proto__) { throw *; } finallythrow <x><y/></x>; } '");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <y><z/></y>) __iterator__, __noSuchMethod__ = <y><z/></y>;");
tryItOut("{export *; }");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = this.__defineSetter__(\"__count__\", function(y) { yield y; export __count__;; yield y; }) in <x/>) {{}return null; }");
tryItOut("{/*infloop*/M:do ; while(*::*);{} }");
tryItOut("switch(-1) { default: break;  }");
tryItOut("if(1e-81) continue ; else {export *; }\nif(-3/0) window; else {return 3.141592653589793;function  __proto__ ()this }");
tryItOut("/*infloop*/for(__proto__; false.isPrototypeOf(<y><z/></y>); prototype.__noSuchMethod__ = (<x/>)) return;");
tryItOut("");
tryItOut("/*for..in*/M:for(const [__count__, prototype] = false in *) export __proto__;");
tryItOut("let(__proto__ = RegExp()) { let(prop = undefined) { ");
tryItOut("{/*for..in*/L:for(\flet prop in ((Function)((eval(\"window\", <y><z/></y>) < <><x><y/></x></>.eval( /x/g  === this))))){(<y><z/></y>);const prop = 1e81; } }");
tryItOut("switch(this.__defineGetter__(\"constructor\", new Function)) { default: /*for..in*/for(const __proto__ in \ttrue) {(1 for (x in [])) }export *;break; case 7: case this.zzz.zzz: let (__proto__, __count__) { function (prototype) { return __parent__ }  }case new Function(): <x/>break;  }");
tryItOut(";");
tryItOut("with(({ __count__: __count__ })\f = ({ __iterator__: __count__, __noSuchMethod__: __noSuchMethod__ })){let __noSuchMethod__ = <><x><y/></x></>\ndo return; while((([15,16,17,18].map(Function, <y><z/></y>))) && 0); }");
tryItOut("/*infloop*/for(const [prototype, ] = ((new Function(\"yield (-1);\")))(__noSuchMethod__); <><x><y/></x></>; (p={}, (p.z = <><x><y/></x></>)())) throw ({});");
tryItOut("export __count__;\nyield;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in (this.zzz.zzz)) {if(<><x><y/></x></>\n) { if (<x/> >= this) return  \"\" ; else yield @foo;} }");
tryItOut("/*infloop*/for(const prototype; __proto__ = (new [,])(<x/> & 1e+81); ([11,12,13,14].filter)) return;");
tryItOut("L: {const prototype, __proto__; }");
tryItOut("do {export * } while((false) && 0);");
tryItOut("let __count__;");
tryItOut("/*infloop*/for(var __count__; window; ((<x><y/></x>.*)([z1] ||  ''  == 033.yoyo(*::*), [<x><y/></x>]))) M:do |= while((<x><y/></x>) && 0);");
tryItOut("if(this.zzz.zzz) let prop, __iterator__;");
tryItOut("if(<><x><y/></x></>.propertyIsEnumerable(\"__proto__\")) {eval }");
tryItOut("with({prototype: , /a/gi)})\t{'haha'.split }");
tryItOut("L:do with({}) return ({a2:z2}); while((Error((prototype\n)('haha'.split()), -3/0)) && 0);");
tryItOut("{__iterator__, constructor = <><x><y/></x></>; }");
tryItOut("export *;");
tryItOut("/*infloop*/for( /x/g ; (this.zzz.zzz); (new (<x/>)())) do export __iterator__; while((prototype) && 0);");
tryItOut("M:with({__count__: (new ([1,2,3,4].map).call()(Math.pow)).*.unwatch(\"__noSuchMethod__\")})");
tryItOut("/*infloop*/L:for(__proto__; (__proto__(null) = (constructor = ({})) > (__parent__ = (uneval(true)))); prop.__noSuchMethod__ *= this.__defineGetter__(\"prop\", function \t(__noSuchMethod__)__iterator__) if (<><x><y/></x></>)) /*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype in <><x><y/></x></>) continue ;");
tryItOut("if([15,16,17,18].sort( \"\" , <x><y/></x>.(prototype)).watch(\"__parent__\", (prop = \f<><x><y/></x></>))) {throw *::*;/*infloop*/while(@foo) } else  if ('fafafa'.replace(/a/g, Math.pow)//h\n) this;");
tryItOut("if((p={}, (p.z = *::*)()).propertyIsEnumerable(\"__count__\")) /*for..in*/L:for(let each in <><x><y/></x></>) export prop; else {yield --3.141592653589793;__parent__ = -3/0; }");
tryItOut("return;\n/*for..in*/M:for(constructor =  ''  in <><x><y/></x></>) {( '' ); }\n");
tryItOut("/*for..in*/for(var prototype.__parent__ in (( ? (let (constructor = __iterator__, constructor) prop) : ((function(q) { return q; })(( \"\"  .@x:: 0), <><x><y/></x></>)))(prototype = <x><y/></x>.(*))))return  '' ;");
tryItOut("/*infloop*/do <><x><y/></x></>; while(([z1].__defineSetter__(\"prop\", Function)));");
tryItOut("if([(( '' )(<x><y/></x>, <x><y/></x>)) for (__proto__ in #1#) if (({}))]) {let __iterator__, __proto__ = <x\f><y/></x>;\n<y><z/></y>;//h\n\n }");
tryItOut("/*infloop*/for(const __parent__; constructor.<><x><y/></x></>.__iterator__; __noSuchMethod__.eval([15,16,17,18].some(((1 for (x in []))).apply, prop)) .@*:: (uneval(<><x><y/></x></>))) {/*for..in*/for(let __iterator__ in ((window)( '' )))yield constructor;M:if((({ __count__: ({ prop: constructor, prop: prototype }) }) = *.__lookupGetter__(\"__count__\").yoyo(window .@x:: [[]]))) { if ((new Function(\"\"))([11,12,13,14].sort)) __count__ = window; else __count__, function::__count__ =  \"\" ;} }");
tryItOut("switch(this) { default: export __parent__;break;  }\nreturn;");
tryItOut("let (__proto__) { /*infloop*/L:do /*for..in*/for(let [__proto__, __iterator__] =  /x/g  in constructor) {return  /x/ ; } while(__noSuchMethod__--); }");
tryItOut("yield null;");
tryItOut("for(let y in [5,6,7,8]) try { __iterator__, prop; } catch(constructor if -3/0) { const prototype; } catch(constructor if (function(){throw <y><z/></y>;})()) { (prototype).watch } finally { ; } ");
tryItOut("/*for..in*/for(var prototype in ((//h\nfunction(y) { yield y; ; yield y; })(<x><y/></x>)));");
tryItOut("let (prop, __parent__) { export __parent__; }");
tryItOut("let (prototype) { gc }let __noSuchMethod__ = let (__iterator__) <x/>.__count__;");
tryItOut("/*for..in*/for(__count__ in ) /*infloop*/do constructor = <><x><y/></x></>, constructor = 3/0; while(@foo);\n\n");
tryItOut("return __proto__.__parent__ setter= ({}).__lookupGetter__;");
tryItOut("with((uneval([z1])))if(this.__defineSetter__(\"__parent__\", eval)) { if (__parent__ = this) {return;return *::*; }} else function(q) { return q; }");
tryItOut("M:with(<><x><y/></x></>){export __proto__;yield; }");
tryItOut("M:with({constructor: ((yield prop))}){yield;export *; }");
tryItOut("/*infloop*/for(__count__; __iterator__; prop.__parent__ = (yield  ''  %= __count__)) yield 4.");
tryItOut("export __proto__; const __iterator__;");
tryItOut("let(prototype) ((function(){this.zzz.zzz;})());");
tryItOut("return null;");
tryItOut("do {([z1]);gc() } while(((*::*.hasOwnProperty(\"<x><y/></x>\"))) && 0);");
tryItOut("");
tryItOut("var __proto__ = *;");
tryItOut("/*infloop*/L:for(let __parent__; .@*; #1#) {/*for..in*/for(let __proto__ in ((({}).__lookupGetter__)(true)))const __parent__;export *; }\n/*infloop*/M:do {} while([({a2:z2}) for each (constructor in <><x><y/></x></>)]);");
tryItOut("if((constructor)[[1]][let (prop = <x><y/></x>, __count__) this]) { if ((p={}, (p.z = [1,,])())) {;\nconstructor;\n } else {break L;/*for..in*/M:for(prop =  /x/g  in 1e4) {continue ;gc() } }}");
tryItOut("L: yield;");
tryItOut("M:switch(__count__) { default: export *;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  /x/g ) {const prop = <x><y/></x>;break L; }");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/while(<x><y/></x> ?  /x/g  : [z1,,]){gc() }");
tryItOut("do throw (window([], <><x><y/></x></>)); while((yield (*).unwatch(\"setter\")) && 0);");
tryItOut("return const constructor.__noSuchMethod__;");
tryItOut("if(<y><z/></y>) { if (*) yield; else { \"\" ;gc() }}");
tryItOut("/*infloop*/do {let __proto__ = null; } while(*::* >> <x><y/></x> ?  \"\"  : (function  __parent__ (constructor, __parent__)3/0()));");
tryItOut("try { throw StopIteration; } finally { __parent__ = __noSuchMethod__; } ");
tryItOut("/*for..in*/for(var function::__proto__ =  ''  in *) {__count__; }");
tryItOut("prop = ((-3/0 <= <x/>).valueOf(\"number\"))");
tryItOut("with((p={}, (p.z = new (function (__iterator__, __proto__) \"\" )( /x/ , <><x><y/></x></>))()) >>= try { __count__ = __count__; } catch(__parent__ if (function(){yield (true.constructor);})()) { with({}) { for(let y in [5,6,7,8]) let(prototype = <x/>) ((function(){const function::__iterator__ = this, prop = -1;})()); }  } catch(__count__) { L: {gc()yield <x><y/></x>; } } finally { for(let y in [5,6,7,8]) throw __proto__; } ){export __noSuchMethod__\ncontinue ; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; ; this) {with({}) continue M; }");
tryItOut("if(yield 0/0) {gc()return this; } else {export *; }");
tryItOut("{function(y) { yield y; __iterator__; yield y; } }");
tryItOut("let (__count__ = null.__count__) { {} }");
tryItOut("if(null.__defineSetter__(\"__noSuchMethod__\", gc)) { if ((__parent__ = -3/0)) {;break L; } else {yield 3/0;{} }}");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = (~__noSuchMethod__ .. prop) in  /x/ ) with(*::*.__defineGetter__(\"constructor\", 'haha'.split)){; }");
tryItOut("yield ([1,2,3,4].slice).apply;");
tryItOut("__count__ = <y><z/></y>;continue \nM:with({__count__: __proto__}){}");
tryItOut("L:while((<x/>) && 0)<x/>;");
tryItOut("{{/*infloop*/while(<x><y/></x>.__count__ = __iterator__){{} } }if(3/0.__defineGetter__(\"__parent__\", (eval).__defineSetter__) ? (+__iterator__) : (({ __noSuchMethod__: __count__ }) = window.isPrototypeOf(<y><z/></y>))) { if ((this instanceof [,,])) return *;} else {this;export prop; } }");
tryItOut("/*for..in*/for(__parent__ in ((function () { let prop = <><x><y/></x></>, @foo = 1e-81; } )()))yield;");
tryItOut("constructor = prop;");
tryItOut("var __noSuchMethod__ = <x><y/></x>;//h\nexport prop;");
tryItOut("let(__proto__) { with({}) { throw x::__iterator__; } ");
tryItOut("M:if(((uneval(((uneval(<><x><y/></x></>))).throw((<><x><y/></x></>--))())))) M:with(([[]])[(-1)]){[1,2,3,4].slicethrow arguments; } else  if (this.__defineSetter__(\"prototype\", <x><y/></x>) ? [15,16,17,18].some(Math.sin, false) : 4.[*::*]) {/*infloop*/for(let __proto__; null; prototype) {; }export *; }");
tryItOut("{var prop; }");
tryItOut("/*for..in*/for(const prototype in ((((let (__count__) __iterator__)).watch)(new this(<x/>, <x><y/></x>))))/*infloop*/do {({}).__lookupGetter__ } while((__parent__ = 1e+81));");
tryItOut("let (prop, __iterator__) { (x::__parent__); }");
tryItOut("with((({}).hasOwnProperty)){return;const -1 = <><x><y/></x></>; }");
tryItOut("export *;do {<x><y/></x>; } while(((prop = [z1])) && 0);");
tryItOut("/*for..in*/for(__iterator__ in true) (<x><y/></x>);");
tryItOut("M:with({__parent__: ((__proto__ |= [1,,]\r).constructor = (false == <><x><y/></x></>))}){gc()( /x/g ); }");
tryItOut("L:with([11,12,13,14].some)if((let (__iterator__ = <><x><y/></x></>) #3={a:#3#} ^= (++3).propertyIsEnumerable(\"prototype\"))) {throw <y><z/></y>;continue L; } else  if (this.@*) if(*::*) { }");
tryItOut("L: /*infloop*/for(const ({ prop:  { yield <y><z/></y> .@ null }  }) = ({}).hasOwnProperty(); (({__noSuchMethod__:  \"\" })); (window ^ 1e81 /= this)) {throw <><x><y/></x></>;return <><x><y/></x></>; }");
tryItOut("switch((prop.__count__ = new (Math.sin)((({prop: <y><z/></y>, __noSuchMethod__ setter: /a/gi }))))) { case 0:  }");
tryItOut("switch((0.1 &= (*.__defineSetter__(\"__proto__\", gc)))) { function(y) { yield y; const constructor;; yield y; }default: throw <x><y/></x>([z1,,],  /x/ ) ? (new <y><z/></y>(<y><z/></y>)) : __parent__ = <x><y/></x>;break;  }");
tryItOut("M:if(({ __parent__: [] }) = (prop = function(id) { return id }).propertyIsEnumerable(\"__count__\")//h\n) <x><y/></x>.eval( /x/g ); else  if ((@foo)[(* , <x><y/></x>)]) (1 for (x in [])) else /*for..in*/for(__parent__ in ((this)(prototype.prop setter= function(y) { yield y; yield;; yield y; }))){function(q) { return q; }export *; }");
tryItOut("/*for..in*/for(let __proto__ = __parent__ in <><x><y/></x></>) gc()");
tryItOut("throw StopIteration;");
tryItOut("prop\n");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("/*infloop*/M:for([] = __count__.__count__ = <y><z/></y>; this.__defineGetter__(\"__proto__\", (/a/gi).apply); this) {yield; }");
tryItOut("throw prop;");
tryItOut("function  __count__ (__parent__) { //h\n } ");
tryItOut("if(<x><y/></x>) let constructor;");
tryItOut("if(((#1=[#1#] , <x><y/></x>) ? ({__count__: (this)() }) : this.zzz.zzz)) /*for..in*/for(const prototype = [,,] in <x/>) continue L else {const __noSuchMethod__ = 1e4;yield; }");
tryItOut("if((<bbb xmlns=\" /x/ \"><!--yy--></bbb>.__lookupGetter__(\"__parent__\").yoyo(\n<x><y/></x>[<><xxx>{prototype}</xxx></>]))) {while((<x/>) && 0){({}).hasOwnProperty }{return;yield <x><y/></x>; } }");
tryItOut("{__count__ = *, __iterator__;var function::__count__ = *::*, constructor = arguments; }");
tryItOut("if(__count__) true;");
tryItOut("constructor = 0;\n(*::*);\n");
tryItOut("for(let y in [5,6,7,8]) return (\n<x><y/></x>);");
tryItOut("gc()");
tryItOut(";");
