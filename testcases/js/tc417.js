tryItOut("if(arguments.__count__ > ()) {;return; } else /*infloop*/do {let (__noSuchMethod__ = <><x><y/></x></>) { return  \"\" ; } } while(this.__defineSetter__(\"__parent__\", new Function));");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (-3/0.yoyo( '' ) ? __iterator__ : null)) if((p={}, (p.z = <><x><y/></x></>.__defineSetter__(\"__iterator__\", (-3/0).call))())) {gc() } else  if ((this = ([1,,].prototype))) {(this);<><x><y/></x></>; } else this");
tryItOut("/*infloop*/for(const (__count__) = ('fafafa'.replace(/a/g, ({}).__lookupGetter__)).__lookupGetter__(\"prop\") <= new true().hasOwnProperty(\"__noSuchMethod__\"); ( /* Comment */let (constructor) <x><y/></x>.([]))\n; new RangeError(constructor.@foo, <x><y/></x>)\n) (<x><y/>//h\n</x>);");
tryItOut("/*infloop*/for(const __proto__; this; <xxx>{__iterator__}</xxx>) {; }");
tryItOut("throw <><x><y/></x></>;let prototype;export __parent__;\n( '' );\n");
tryItOut("if(new String()) { if (<><x><y/></x></>.isPrototypeOf(<>__noSuchMethod__ = false</>)) (-0); else {@foo;{} }}");
tryItOut("/*for..in*/for(const [__count__, __parent__] = this.__defineSetter__(\"__count__\", (new Function(\"/*for..in*/for(var [constructor, __parent__] = __count__ in  '' ) {const [1];;constructor =  /x/ , let; }\"))) in <><x><y/></x></> , 1e4) {/*for..in*/for(const __proto__ = prototype.propertyIsEnumerable(\"prop\") in *::*) {yield;gc() }let(__noSuchMethod__ = true) { continue ; }");
tryItOut("yield prop.__iterator__ = (new (({}).__lookupGetter__)(.2) for each (__iterator__ in 033));");
tryItOut("/*infloop*/\ffor(constructor =  /x/g ; __proto__%=#1=[#1#]; @foo.__lookupSetter__(\"__parent__\")) {export constructor;yield <x/>; }");
tryItOut("if((new (null).__defineSetter__(this, null)(((<x/> if (<x><y/><\f/x>))) in <><x><y/></x></>))) { if (('fafafa'.replace(/a/g, ((1 for (x in []))).call))) {do {const __proto__;var __proto__; } while((1e4) && 0); } else {((__noSuchMethod__ = __noSuchMethod__));M:if(<><x><y/></x></>.throw( \"\" )) { if ([15,16,17,18].some(Math.pow, function::prototype)) {continue L; }} else {break L;break L; } }}");
tryItOut("/*infloop*/for(({ __proto__: prototype, constructor: constructor }) = *; ((window).__defineSetter__)(prop >> this) = ('fafafa'.replace(/a/g, function  __noSuchMethod__ (__proto__, __count__)<y><z/></y>)); ([__count__, , __parent__, ] = try { try { break ; } catch(prototype if (__iterator__ = <></>)) { ; } catch(prop if (function(){const __noSuchMethod__, constructor = *::*;})()) { export *; } catch(prop) { <x/>; } finally { yield; }  } catch(__parent__) { __iterator__ = __noSuchMethod__; } finally { continue ; } )) {prototype = window;/*infloop*/for(@foo; __noSuchMethod__; window) ; }");
tryItOut("/*infloop*/for(((uneval([*::*.prop].sort(__noSuchMethod__) .@x::  \"\" .yoyo(<x><y/></x>)))); __parent__; (constructor.( /x/ )).prop)  { return ((yield __parent__: <>prototype</> *=  \"\" ).prop) } ");
tryItOut("/*infloop*/for(let ({ __iterator__: __noSuchMethod__ }) = new ([1,2,3,4].slice)(true); ({ get __count__() { gc() } ,  set prop(prototype, function::__noSuchMethod__)delete%=* }); (new <x><y/></x>([window if (false)], true))) gc()\n;\n");
tryItOut("/*infloop*/for(var __proto__; (({ set constructor(prototype, __parent__) { yield this.__defineGetter__(\"constructor\", <y><z/></y>) } , constructor setter: *::* })); new <><x><y/></x></> in <><x><y/></x></>(undefined, constructor for (__parent__ in 1e81))) {yield  '' ; }");
tryItOut("const __iterator__ = <y><z/></y>;");
tryItOut(" { return <x><y/></x>.(3/0) } ");
tryItOut("throw StopIteration;");
tryItOut("do {M:if( \"\" ) {} else {yield; } } while((__iterator__ = <><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", function (function::function::__iterator__) { yield null } )) && 0);");
tryItOut("export prop;\nyield <><x><y/></x></>;\n");
tryItOut("/*for..in*/M:for(let (constructor) in (prop.__parent__ = <y><z/></y>\n)) function ()'fafafa'.replace(/a/g, new Function).__iterator__");
tryItOut(";");
tryItOut("/*for..in*/for(let prototype = <><x><y/></x></>.isPrototypeOf(this) in arguments.valueOf(\"number\")) {}");
tryItOut("do {with(window){} } while((this.__defineGetter__(\"prototype\", gc)) && 0);");
tryItOut("{}\nwith(__parent__){let , __count__ = undefined;/a/gi }");
tryItOut("with( /* Comment */continue L;)/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in __iterator__ = this ? <><x><y/></x></> : #1=[#1#].__iterator__ = __proto__.__count__) {<x><y/></x>;{yield {};yield true; } }");
tryItOut("window.hasOwnProperty(\"delete\") = __parent__;");
tryItOut("/*for..in*/for((('fafafa'.replace(/a/g, ((new Function).apply).call)))((uneval(<x/>)) ? <x><y/></x> : <><x><y/></x></>.watch(\"__proto__\", [1,2,3,4].map)) in #3={a:#3#} .@  \"\" ++) {if(__noSuchMethod__) {let function::__noSuchMethod__ = <><x><y/></x></>, __proto__; } else {{} }continue ;\n/*for..in*/for(__count__ in #1#) <x><y/></x>\n }");
tryItOut("with({__iterator__: ( /* Comment */<x><y/></x>)\n})export __count__;");
tryItOut("function::prototype = constructor;");
tryItOut("/*for..in*/for(let __proto__ in prop = <x/> >>>=__count__-=__iterator__.__defineSetter__(\"constructor\", __count__ = <><x><y/></x></>)) {throw undefined }");
tryItOut("/*infloop*/while(true.__lookupSetter__(\"__noSuchMethod__\"))export *;");
tryItOut("throw 1e81;\n/*infloop*/do export __parent__; while(false); const prototype;\n");
tryItOut("/*for..in*/for(var prop.__count__ in ((Math.pow)([,].eval(null)))){yield  '' \nif(#1=[#1#]) yield <x/>; else  if ([,]) {} const __count__;return; }");
tryItOut("{gc()/*for..in*/for(const [prop, prototype] = ({}).__lookupGetter__ in <x/>) {yield  /x/ ;continue L; } }");
tryItOut("M:if(this) /*for..in*/M:for(var [__count__, __count__] = __noSuchMethod__ = window in constructor) yield; else  if (<x/> @  \"\" ) {export *; } else {with({}) { yield window; } let __count__ = false; }");
tryItOut("return;");
tryItOut("with({__count__: prop = ('fafafa'.replace(/a/g, function(q) { return q; })) = [1]}){{}yield  '' .__defineSetter__(\"prop\", 0x99).valueOf(\"number\"); }");
tryItOut("/*infloop*/while(#1=[#1#])yield <><x><y/></x></>\nL:if( \"\" )  this  else yield @foo;");
tryItOut("/*infloop*/do const  set constructor() { return undefined }  = <y><z/></y>, getter; while(new Exception());");
tryItOut("/*infloop*/for(<x/>; (* , <>\f<x><y/></x></> > (__count__ = undefined)); (#3={a:#3#} - [[1]] , <><x><y/></x></>[undefined])) {{} }");
tryItOut("return ('fafafa'.replace(/a/g, function  prop ([, , , constructor], __count__)prop));");
tryItOut("prop");
tryItOut("export *;");
tryItOut("/*for..in*/for(let prototype = @foo in (* in [15,16,17,18].filter(function(y) { yield y; export *;; yield y; },  \"\" ))) {return *;/*infloop*/for(let prototype; __iterator__ = undefined; [1,2,3,4].map()) export __count__, prototype =  /x/ ; }");
tryItOut("for(let y in []);");
tryItOut("yield ((__count__ = __iterator__ if (<><x><y/></x></>)).unwatch(\"prop\"));");
tryItOut("throw __count__;");
tryItOut("__iterator__");
tryItOut("Function");
tryItOut("let (*, prop) { /*infloop*/for(var prop = <><!\t--yy--></>; __count__; *::*) {return; } const __noSuchMethod__; }");
tryItOut("__proto__ = true, __iterator__ = <><x><y/></x></>");
tryItOut("__parent__ = prop;");
tryItOut("/*for..in*/for(var __count__ = [({ __noSuchMethod__: __parent__ }), ] = constructor.(<y><z/></y>) in  /x/ .unwatch(\"__noSuchMethod__\")) __proto__;");
tryItOut("if(()) {{yield @foo;continue ; }(new Function(\"<><x><y/></x></>;//h\\n\")) } else  if (__count__ = [, , ({ __iterator__: __iterator__ }), __iterator__, ]) {const <><x><y/></x></> = Function, __count__ = function(id) { return id };L: ; }");
tryItOut("L:if(new ([1])(5.0000000000000000000000)) yield; else  if (@foo.__defineGetter__(\"constructor\", ({}).__lookupGetter__)) yield; else *;");
tryItOut("switch(prototype = *) { default: gc()break; break; case gc: with({prototype: <><x><y/></x></> if (undefined).hasOwnProperty(\"__count__\")})break; prop;case 8: break; case 4: __parent__ }");
tryItOut("if((__proto__\f.constructor = <x/>) << prop >>> (+<><x><y/></x></>.\tunwatch(\"prop\"))) <x><y/></x>; else  if (((__iterator__.__count__ = <y><z/></y>.throw(<y><z/></y>) for each (prop in false) for (__noSuchMethod__ in <x/>) for each (constructor in 0.1)))) ;");
tryItOut("if([__proto__\n if (<x><y/></x>.@foo)]) { if (window) export constructor; else {return <><x><y/></x></>; }}");
tryItOut("/*infloop*/L:for(let __noSuchMethod__; (this <<= *.propertyIsEnumerable(\"__iterator__\").prototype); [[], ({ constructor: ({ __count__: prop }), __parent__: ({ __count__: __proto__ }) }), , prototype] = this) yield this.zzz.zzz;");
tryItOut("");
tryItOut("\n");
tryItOut("if(5.0000000000000000000000) null");
tryItOut("<x/>;\n-3/0; const set;\n");
tryItOut("if(this -= undefined) {(1 for (x in [])) }");
tryItOut("with({}) try { L:if(*) yield <><x><y/></x></>; } catch(prop if (function(){with({}) { 5.0000000000000000000000; } })()) { __iterator__ = __proto__; } catch(__count__) { let(__parent__ = arguments, __count__ = -3/0) { return; } finally { this.zzz.zzz; } ");
tryItOut("this.zzz.zzz;");
tryItOut("if(((*).call( /x/g , <><x><y/></x></>,  '' )) .@*:: this.unwatch(\"__noSuchMethod__\")) {} else  if ((<y><z/></y> ? <><x><y/></x></> : this ? new (*::*).watch(this, window) : prop.prop = 3/0)) return @foo;\n/*infloop*/for(let __noSuchMethod__ = [1,,]; true; 3.141592653589793) var __noSuchMethod__, __count__;\n");
tryItOut("{return <x><y/></x>;throw <x/>; }");
tryItOut("/*infloop*/for(let prop = 0x99.__defineGetter__(\"function::__parent__\", function(q) { return q; }); <><x><y/></x></> += window[<x/> !== <x><y/></x>]; [15,16,17,18].sort(__proto__, false--)) { }");
tryItOut("L: {if((eval(\"<x/>\", <><x><y/></x></>))) { if (__count__ = *::*) {null; } else {(<x><y/></x>);gc }} }");
tryItOut("{{(*);return this; }L: ; }");
tryItOut("while(([]) && 0)return;");
tryItOut("throw __noSuchMethod__\nif(prop.hasOwnProperty(\"constructor\")) { if (\n<><x><y/></x></> ^ @foo.__defineSetter__(\"__noSuchMethod__\", (new Function(\"export constructor;\")))) gc()} else {const __iterator__ = <x><y/></x>; }");
tryItOut("yield window\nL:with(new ()(<x/>, <y><z/></y>))gc()");
tryItOut("{/*infloop*/L:for(__parent__+=true; <x/>.(<x><y/></x>); -0[0]) {{} }export *\n }let __iterator__, prototype;");
tryItOut("{yield 'fafafa'.replace(/a/g, function  __proto__ (__noSuchMethod__) { yield this } ); }");
tryItOut("with({prototype: #2=({__noSuchMethod__: [,,z1]})});");
tryItOut("gc()\nswitch(__proto__ = constructor) { default: break;  }\n");
tryItOut("gc()");
tryItOut("{break M; }");
tryItOut("if(((function (prop)<><x><y/></x></>).call)(<x/>, <x><y/></x>)) {/*for..in*/for(let default: return;break; export __iterator__;break;  in (('haha'.split)((({ function::__iterator__: __iterator__ }) = ({ __count__: __noSuchMethod__ })))))function  __count__ (__noSuchMethod__) { yield; }  }");
tryItOut("M:if((yield (undefined.__lookupGetter__(\"__parent__\")) >= prop = false)) export *; else  if (null) for(let y in [5,6,7,8]) export __proto__;L: {if([[]]) { if (undefined) ({}).__lookupGetter__ else return;}__iterator__; }");
tryItOut("switch((void <><x><y/></x></>.__proto__.constructor\t)) { case 0: var prop, __count__;break; const __count__, prop; }");
tryItOut("/*infloop*/for(; ((p={}, (p.z = __noSuchMethod__ = <x><y/></x> ? <x><y/></x> :  /x/g  .@x:: false)()));  < <>\f<x><y/></x></>.valueOf(\"number\")) continue M;");
tryItOut("var __iterator__;");
tryItOut("{/*infloop*/do {yield null;break ; } while( '' );yield <x><y/></x>; }");
tryItOut("/*for..in*/for(let [constructor, constructor] = (<y><z/></y> << (-- '' )).hasOwnProperty(\"__count__\") in ) if( \"\" ) { if ( '' ) throw prototype; else var constructor = undefined, __proto__ = 0;}");
tryItOut("__parent__");
tryItOut("M:if(*) { if \f((0/0 &= @foo)) {<x/>; }} else {constructor; }");
tryItOut("/*infloop*/for(null.__lookupSetter__(\"prototype\"); __proto__ = (Function).call(__noSuchMethod__, ).yoyo(new Iterator() ? 1.2e3[*::*] : ++*::*); (__noSuchMethod__)[[[]]]) return;");
tryItOut("throw StopIteration;");
tryItOut("if(( '' .throw( \"\" ))) export *; else  if ((uneval([,,z1]))) {let __count__ = window, prop =  /x/g ; } else {\fexport *; }");
tryItOut("L: /*for..in*/for(let __count__ = <x><y/></x> in __count__) {gc() }");
tryItOut("if(({__iterator__ getter: __count__ })) let (__proto__ = __count__, prop) { switch(null) { default: /*infloop*//*\n*/while(this)__parent__ = <><x><y/></x></>, x::constructor = [1,,];case 4: let false;case 2: case 5: (*);case prototype: export *;break;  } } else  if ((yield (3.141592653589793.eval(#1#)))) continue M; else yield <><x><y/></x></>;\nthrow <y><z/></y>;\n");
tryItOut("/*for..in*/L:for(const prototype.__proto__ setter= prototype['__proto__'] in ((({__parent__: <xxx {__noSuchMethod__}={(~[[1]])} />, __noSuchMethod__:  /* Comment */(__proto__, __proto__[*::*]) })) for (<y><z/></y> in *::*([\f<x><y/></x>].sort(Math.pow), window))return; if (<><x><y/></x></>))) {(<x><y/></x>); }");
tryItOut("yield (this || <x/>);");
tryItOut("{<x><y/></x> } const __iterator__;");
tryItOut("return\n{}/*infloop*/for(var __count__ = undefined , <><x><y/></x></>; __iterator__.__noSuchMethod__; (({a2:z2}) %= *)) {throw <><x><y/></x></>;const __proto__; }\n");
tryItOut("if((5.0000000000000000000000.unwatch(\"__noSuchMethod__\"\f))) { if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {export __proto__; } else export __proto__;}");
tryItOut("while((5.0000000000000000000000) && 0)continue M\nfunction(q) { return q; }");
tryItOut("{/*for..in*/for([__noSuchMethod__, __count__] = (this.__defineSetter__(\"__iterator__\", function (constructor.prop getter= ({}).__lookupGetter__, prototype) { return (yield #1=({constructor: <><x><y/></x></>})) ? function(q) { return q; }(0/0, [,]) : (yield (__proto__ = null)) } )) in 'fafafa'.replace(/a/g, function (__parent__, prop)<><x><y/></x></>)\n) yield;const prototype; }");
tryItOut("/*for..in*/M:for(var (__noSuchMethod__) in ((function(q) { return q; })(@foo\n)))throw window;");
tryItOut("/*infloop*/L:for(null.__defineSetter__(\"prototype\", ({}).hasOwnProperty); (let (__proto__, prop = <><x><y/></x></>) [,]); (__iterator__ = 3)) break ;");
tryItOut("const __proto__ = __proto__;M:if(this.zzz.zzz) try { let prop, window; } catch(__noSuchMethod__) { gc() }  else  if ('haha'.split()) <y><z/></y>;");
tryItOut("yield;");
tryItOut("/*infloop*/while(0x99 ? false : [,,z1]){return null;function (__proto__, __parent__) \"\"  } const __noSuchMethod__;");
tryItOut("/*infloop*/L:do {if(([,].__proto__ = <x/>)) ; } while(constructor);");
tryItOut("throw constructor;");
tryItOut("{; }");
tryItOut("if(([15,16,17,18].some(eval, this\n))) {export constructor;; } else  if (+ /* Comment */__noSuchMethod__.unwatch(\"__count__\")) {if((+1e+81)) { if (<x/>.yoyo(*)) {function(y) { yield y; eval; yield y; }let __noSuchMethod__ =  /x/ ; } else export *;} } else throw prop;");
tryItOut("yield\n");
tryItOut("/*for..in*/L:for(constructor in  '' ) const __iterator__, __noSuchMethod__ = <x><y/></x>;");
tryItOut("/*for..in*/for(const constructor in <y><z/></y>) (<x><y/></x>).watch");
tryItOut("switch((({__proto__: yield.__count__ setter= (<><x><y/></x></>).__defineSetter__}))) { case 4: gc()break; break; default: case 2: __proto__;break; case 4: throw false; const prototype;break;  }");
tryItOut("let (__parent__.constructor, prototype = (__proto__ = 4.)) { /*infloop*/for(var __noSuchMethod__; Date(); (new Function(\"{}\"))(<x><y/></x>, <><x><y/></x></>)) <><y><z/></y></>\nreturn <x><y/></x>;\n }");
tryItOut("/*infloop*/do {do {{ '' ; }; } while((function(id) { return id }) && 0); } while(<><><!--yy--></></>);");
tryItOut("/*infloop*/for(const __proto__;  \"\" .unwatch(\"__proto__\"); <x/>) {/*infloop*/while(true){@foo;{} } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__.__iterator__ in <x><y/></x>) {constructor = <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = (__iterator__ = __parent__)(__count__ =  /x/ ).isPrototypeOf(prop.eval(<x><y/></x>) += <x/> || true / __proto__.__count__ = ({__parent__ setter: function(y) { yield y; 033; yield y; } })) in  /x/g ) {function () { var __parent__ = <x><y/></x>, __proto__; }  }");
tryItOut("if(<x><y/></x>) { if (1e4) {var prop, prop; }} else { }");
tryItOut("/*infloop*/for(let ({ constructor: ({ __parent__: __noSuchMethod__, <x><y/></x>: __noSuchMethod__ }) }) = (new Boolean()); (<y><z/></y> < window &=  \"\" .valueOf(\"number\")); (<x><y/></x> ^= <><x><y/></x></>)) {/*for..in*/for(let [__proto__, __proto__] =  ''  in <x><y/></x>) {yyy } }");
tryItOut("{gc()if(prop) throw 3.141592653589793; }");
tryItOut("/*infloop*/M:while(((p={}, (p.z = <x><y/></x>)())))if([15,16,17,18].sort(({}).hasOwnProperty, [1,,]) >> \nthis\f) let (__proto__, __noSuchMethod__ = [z1,,]) { /*infloop*/for(<y><z/></y>; this; *::*) {return;{} } } else export *;");
tryItOut("(true);");
tryItOut("if(eval(\"return;\", @foo.valueOf(\"number\"))) /*for..in*//* nogeckoex bug 349964 */M: for  each(var function::__proto__ in window) {const prop, __parent__; } else {const function::__proto__, __noSuchMethod__; }");
tryItOut("return;");
tryItOut("/*for..in*/for(var __proto__ in ((((uneval(true))).watch)((uneval(<x><y/></x>))))){}\n{}\n");
tryItOut("/*infloop*/M:for(let __count__ = <x><y/></x>;  '' ; window) {{} }");
tryItOut("switch([z1]) { default:  }");
tryItOut("L:\twith({constructor: constructor.__proto__ getter= function () { yield __parent__ } })/*for..in*/for(const prototype = (false).call(3, {let __iterator__ = prop;(false); }) in <y><z/></y>) {__noSuchMethod__ = @foo, const __proto__ =  \"\" , constructor; = <x><y/></x>;yield  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ prototype: prop, prototype: __count__ }) in <x><y/></x>) {let __parent__;export __iterator__; }");
tryItOut("if((Math.sin()) ? eval(\"__iterator__.__noSuchMethod__ =  \\\"\\\" \", undefined) : undefined) if((__proto__|=((uneval(this.zzz.zzz))))) {{}yield <><x><y/></x></>; } else  if ((__noSuchMethod__.() if (<><x><y/></x></>.unwatch(\"__count__\")))) 'haha'.split else yield window; else  if (( else if .__lookupSetter__(\"__proto__\"))) /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x/>) {}");
tryItOut("/*for..in*/for(__iterator__ in <x><y/></x>) gc()");
tryItOut("L:if(prop) {throw <y><z/></y>; } else  if ((new *(window)).__parent__) ([]);");
tryItOut("__count__ = __parent__;");
tryItOut("return ([1,,].isPrototypeOf(<x/>) -  /x/ ).__iterator__;");
tryItOut("/*for..in*/for(var prototype = <x><y/></x> in <><x><y/></x></>) break ;");
tryItOut("with(~ /x/g .valueOf(\"number\"))let __parent__;");
tryItOut("<x><y/></x>");
tryItOut("{while(([z1,,]) && 0){yield; }{} }");
tryItOut("let (__proto__) { L:with({({ __count__: ({ __noSuchMethod__: __proto__, constructor: ({ constructor: __proto__ }) }) }): (.2()).@foo}){yield <x><y/></x> | __proto__; } }");
tryItOut("/*for..in*/for(const __proto__ in null) {export *; }");
tryItOut("gc() const prototype;");
tryItOut("L:if(<><>*::*</></>) {var function::constructor, __iterator__ = @foo; } else prototype");
tryItOut("/*for..in*/for(let __parent__ in (([1,2,3,4].map)(this)))gc()");
tryItOut("with({}) { return; } ");
tryItOut("return <y><z/></y> ^= true.__defineGetter__(\"constructor\", ([11,12,13,14].filter).watch);");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.throw( /x/g )) {return;([,]); } else  if ((yield 0/0)) {(function  __parent__ () /x/g ).callreturn; }");
tryItOut("if(<x><y/></x>) throw function ([y]) { }; else  if (0.1) throw <><x><y/></x></>;");
tryItOut("L:switch([, , ] = return ( /x/ (@foo, function ([y]) { }));) { default: break; case 9: export *;break; case  /x/ .hasOwnProperty(\"prototype\"): break;  }");
tryItOut("/*for..in*/for(let [__count__, prototype] = (new Iterator()).propertyIsEnumerable(\"prop\").yield in (new <x/>(<y><z/></y>)).eval((*\n))) {yield <x/>;export prototype;\nyield;\n }");
tryItOut("{}");
tryItOut("if([1,,] >= 1e-81) continue L; else {export __proto__;throw this; }");
tryItOut("{if(null.@*) { if (__noSuchMethod__['__proto__']) {yield 0.1;export __count__; } else return __parent__ setter: <y><z/></y>;} }");
tryItOut("if(<><x><y/></x></>) {(<><x><y/></x></>);let prototype; } else {;return; }");
tryItOut("L:with(([true if (this.zzz.zzz)])){( \"\" ([11,12,13,14].filter))if(__proto__.watch(\"prototype\", function(y) { yield y; {}; yield y; })) { if (prop) {\f } else yield window;} }");
tryItOut("/*for..in*/for(var constructor = __parent__+=1.2e3 in <x/> >>= <y><z/></y>) export prop;");
tryItOut("let(({ __proto__: __parent__ }), __count__) ((function(){return (delete __count__);})());");
tryItOut("/*for..in*/for(const __parent__ in __count__ = 0/0) {/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in undefined) {let __iterator__;3.141592653589793; } }");
tryItOut("/*infloop*/M:for(const prototype; false.__count__ = *; <x><y/></x>) ([1,,]);");
tryItOut("L:if((* >= __noSuchMethod__)) {gc()(this); } const prototype;");
tryItOut("let(__noSuchMethod__ = ((undefined).watch)(<x/>)) ((function(){throw StopIteration;})());");
tryItOut("/*for..in*/for(const (yield <x><y/></x>).__count__ in new 'haha'.split(false)) {{} }");
tryItOut("if(<x><y/></x>) { if (*) yield;} else ");
tryItOut("/*for..in*/for(__count__ in prototype: <x><y/></x>) gc()");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("let (__proto__ = __parent__.__iterator__ = yield null, __noSuchMethod__ = ({ __count__: __count__, __noSuchMethod__: __proto__ }) = __count__ = *::*) { {return <x/>;(<x/>); } }");
tryItOut("/*infloop*/for(__iterator__; (\n*); eval(\"\", false)) {yield; }");
tryItOut("with((new function (__iterator__).2())--)/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in this) return\n");
tryItOut("let (__proto__ = prop++) { gc() }");
tryItOut("let (__noSuchMethod__, prototype = function  __iterator__ (__count__, __noSuchMethod__) { /*for..in*/L:for(let __iterator__ in ((( \"\" ).__defineSetter__)(<x/>)))yield  /x/ ; } ) { with({}) for(let y in [5,6,7,8]) return; }");
tryItOut("/*for..in*/M:for(__parent__ in ((((this.zzz.zzz)).watch)(function ([y]) { })))export __proto__;");
tryItOut("M:with({constructor: new (this)()}){throw prototype;export *; }");
tryItOut("for(let y in []);");
tryItOut("let(({ prop: constructor }) = this.__defineGetter__(\"prop\", [1,2,3,4].map), prop) ((function(){throw __iterator__;})());");
tryItOut("let (__proto__ = <x/>) { export *; }");
tryItOut("{export __iterator__; }\nyield prototype;");
tryItOut("throw __noSuchMethod__;");
tryItOut("M:if((let (function::__noSuchMethod__ = <x/>.__parent__ = *, __count__ = (3.141592653589793.propertyIsEnumerable(\"__iterator__\"))) 'fafafa'.replace(/a/g, ({}).__lookupGetter__).propertyIsEnumerable(\"__parent__\")))) { if (1.2e3 ? <><x><y/></x></>.unwatch(\"prop\") : (#2=({__noSuchMethod__: (\t(function(y) { yield y; gc; yield y; }).call(__count__,  { return  \"\"  } , ({a1:1})))})).watch(\"__count__\", [1,2,3,4].map)) \nvar constructor = *::*, __parent__; else /*infloop*/do {(<x><y/></x>); } while(new __iterator__);}");
tryItOut("if(1.2e3) {return 5.0000000000000000000000; } else ;");
tryItOut("switch((([] ?  \"\"  : [,,]) -= __iterator__['prop'] = (eval(\"null;\", @foo)))) { case <employee id=\"1\"><name>Joe</name><age>20</age></employee>: break;  }");
tryItOut("if((yield this)) { if (this.zzz.zzz <<= 0 && case 5: break; break; /*infloop*/while(export *)return;break; case 2: var __noSuchMethod__, __proto__;) yield;} else \tM:do  while(((uneval((__noSuchMethod__ = this)))) && 0);");
tryItOut("if(undefined) { if (__proto__) {[1,2,3,4].slice } else {; }}");
tryItOut("n\nyield <x><y/></x>;\n const prototype;");
tryItOut("if((--window)) 3/0; else @foo;");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; ({constructor: true.watch(\"__count__\", Function), __noSuchMethod__ getter: [1,2,3,4].slice }); new String(null)((<><x><y/></x></>)[<><x><y/></x></>], #1#)) with({__noSuchMethod__: <y><z/></y>})let __parent__;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __count__ }) = (yield __noSuchMethod__ = __noSuchMethod__;); <x/>; (3.__lookupGetter__(\"constructor\"))) {/*for..in*//* nogeckoex bug 349964 */\t for  each(const __parent__ in this) {gc(); }gc() }");
tryItOut("/*infloop*/for([z1,,].__noSuchMethod__ = <x><y/></x>; ('fafafa'.replace(/a/g, [1,2,3,4].map))[<x/>]; ( /* Comment */this)) {{ }export __noSuchMethod__//h\n\nyield; const __count__;const __noSuchMethod__; }");
tryItOut("/*infloop*/for(const prototype; (p={}, (p.z = ([,,]))());  /x/ .__lookupGetter__(\"constructor\")) {throw this;return; }");
tryItOut("let (constructor) { (#1#); }");
tryItOut("let (__parent__ = window, constructor = .2) { var function::__iterator__, prop =  \"\" ; }");
tryItOut("let(prop = ((yield window > (<x><y/></x>.@foo)))) ((function(){return (this.__defineGetter__(\"__noSuchMethod__\", eval).eval(this.zzz.zzz));})());");
tryItOut("/*infloop*/do const __parent__; while(#1=[#1#]);");
tryItOut("gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__\t in [[1]]) {var prop =  /x/ , __proto__ =  /x/ ; }");
tryItOut("/*infloop*/L:do /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <><x><y/></x></>[__count__]) {while(([15,16,17,18].map(function  prop (constructor, prop) { <y><z/></y>; } , __proto__)) && 0)const constructor;/*infloop*/while(__iterator__)__noSuchMethod__, __parent__ } while(new (eval)(((uneval(prop))), <><x><y/></x></>));");
tryItOut("with((prop.__noSuchMethod__ ? export * : function  __noSuchMethod__ (prototype, prop)(-1)))if(<x><y/></x>) break L;");
tryItOut("if([ for (__proto__ in function(id) { return id }) for (this['__count__'] in #1=[#1#])]) {let (function::prototype, prototype) { while((Boolean(window)) && 0)L:while((*::*) && 0)(\t0).apply } } else  if ((__count__.([]))) L: {export constructor; } else undefined;");
tryItOut("");
