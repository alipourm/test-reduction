tryItOut("if(this.zzz.zzz++[<x/> ^= prop]) __parent__ else  if (().__defineSetter__) {/*infloop*/for(let __proto__ = <><x><y/></x></>; 0x99; <><x><y/></x></>) {__iterator__ setter: (1 for (x in []));{} }(new Function(\"1.3;\"))\nreturn <x><y/></x>; } else switch(prototype) { default: L:while(((__parent__ for (prop in <><x><y/></x></>))) && 0)__iterator__ = <><x><y/></x></>, __proto__;break; case (window)([[1]].@*): L:\fif(*::*) return; else {export __parent__;yield; }case 9:  }");
tryItOut("/*for..in*/M:for(let prop in (<><x><y/></x></>.throw(this))) {yield; }");
tryItOut("L: {{if(this.__defineGetter__(\"__noSuchMethod__\", {})) {gc()gc() } }");
tryItOut("/*for..in*/for(prototype in prop) L:do export __noSuchMethod__; while((this.zzz.zzz) && 0);");
tryItOut("while(((<x><y/></x>.(<x><y/></x>))++ - <y><z/></y>) && 0){let (__parent__ = <y><z/></y>) { gc() }{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (\n<y><z/></y>.throw(<><x><y/></x></>)) >>>=( /x/ )[window]) __parent__;");
tryItOut("/*for..in*/for(([,,])(prop) in __proto__) yield;");
tryItOut("while(( /x/ -- > <x><y/></x>.__lookupGetter__(\"__count__\")\n) && 0)export *;");
tryItOut("L: {{return; } }");
tryItOut("export __iterator__;");
tryItOut("if((-1)) const __iterator__ = true;");
tryItOut("{return;throw *::*; }");
tryItOut("return this;throw undefined;");
tryItOut("if([] = prop) {}");
tryItOut("{yield;yield null; }");
tryItOut("while(( '' ) && 0){export __parent__;continue ; }");
tryItOut("/*for..in*/for(let __iterator__ in ((Math.sin)((this.zzz.zzz))))const __parent__;");
tryItOut("L:if(\n((p={}, (p.z = true)()))) ;");
tryItOut("if(<x><y/></x>.(true)) (prop); else  if ((__parent__.__parent__ = __count__ = default: var constructor = <x><y/></x>, __parent__ = 1e81;case 5: case <x>//h\n<y/></x>: break; )) {function(q) { return q; }__parent__ = <><x><y/></x></>; }");
tryItOut("gc const prop;");
tryItOut("if(([1])(([,,] for each (prototype in prototype)), 'fafafa'.replace(/a/g, function(y) { yield y; return;; yield y; }).__noSuchMethod__ = new 1.2e3(@foo))) L: {export constructor; } else  if () (prototype = __iterator__);");
tryItOut("if(<x/>) {let __iterator__ = <x/>, __proto__ = window;{} }");
tryItOut("M:if([15,16,17,18].filter\f(eval, <x><y/></x>)) {((-0));__noSuchMethod__, __proto__ = window; } else  if (__proto__ = undefined) {x::prototype; } else ;");
tryItOut("var __parent__ = <x><y/></x>, constructor = <x><y/></x>;");
tryItOut("{return;export constructor; }");
tryItOut("if( /x/g ) { if ((((1.2e3.__lookupGetter__(\"prop\")))[(-0) >= .__defineSetter__(\"prototype\", /a/gi)])) {/*infloop*/M:for(__iterator__; (<y><z/></y> for each (__parent__ in <><x><y/></x></>) for each (__parent__ in @foo)); (this.__defineSetter__(\"prototype\", 'haha'.split))) ((Function).call).apply { return <x><y/></x> = (*::*.yoyo(true)) if (<><x><y/></x></>) }  } else default: break; }");
tryItOut(" const __parent__;");
tryItOut("/*infloop*/do {if(<y><z/></y>(<x><y/></x>, 4.)) {break L;throw null; } else  if (prop--) {yield;const __parent__ =  \"\" , function::prop = *::*; }gc() } while(({__iterator__: new (<x><y/></x>)(this, undefined) ? (__parent__ = true) : <x/> .@*:: .2 }));");
tryItOut(" const __noSuchMethod__;");
tryItOut("do {([1,,]); } while((case : {yield __parent__;/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in null) {( /x/ ).__defineSetter__<><x><y/></x></>; } }break; with({__proto__: undefined})throw prototype;break; break;  >>>=0x99.valueOf(\"number\")) && 0)\nreturn;");
tryItOut("if(eval(\"let ({}, __parent__ = *::*) { gc() }\", export *;)) { if (@foo) {/*infloop*/M:for(<x><y/></x>.@*; (<><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\"));  \"\" ) let __parent__ = <> set __iterator__ __proto__ () { yield this } </>;return <x><y/></x>; } else {/*for..in*/for([__noSuchMethod__, __iterator__] = *::* in <y><z/></y>) gc() }}");
tryItOut("(*::*);\nyield;\n");
tryItOut("/*infloop*/do {export __noSuchMethod__;break M; } while(false);");
tryItOut("{}\n/*for..in*/L:for(const prototype in 3.141592653589793) {{} }");
tryItOut("M:with({__proto__: prop%='fafafa'.replace(/a/g, ({}).__lookupGetter__)}){(window);; }");
tryItOut("switch([11,12,13,14].sort) { case 0: break; default: case 3: /*infloop*/L:while((window.yoyo(5.0000000000000000000000).constructor = [1,,].@foo)(null.__defineSetter__(\"__count__\", function(y) { yield y; function ()<x><y/></x>; yield y; }), ((prototype)(this)).isPrototypeOf(__parent__)))if(constructor = __noSuchMethod__) {return null;throw (-1); } else {;[1,2,3,4].slice }break; \nexport prop;\n }");
tryItOut("M:with(<y><z/></y>)<x><y/></x>");
tryItOut("if(({}).hasOwnProperty) <x><y/></x>; else  if (*::* &= *) __count__ = constructor; else throw <x><y/></x>;");
tryItOut("switch(4.) { default: case 2: case <x/>: return;break;  }this.zzz.zzz;");
tryItOut("/*infloop*/do L:do export __proto__; while((<y><z/></y>) && 0); while((new Exception()));<x/>;");
tryItOut("(__parent__);throw true;");
tryItOut("if(this) { if (<><x><y/></x></>) {return; } else {let __proto__;<y><z/></y>; }}");
tryItOut("{return;while((undefined) && 0)* }");
tryItOut("/*for..in*/for(let getter in <><x><y/></x></>) throw <x><y/></x>;");
tryItOut("/*for..in*/L:for(const prop in ((gc)( '' )))/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in *) __iterator__;");
tryItOut("do let __count__ = 033; while((({constructor: __iterator__,  get __noSuchMethod__ __noSuchMethod__ () { {}; }  })) && 0);");
tryItOut("{}yield __parent__;");
tryItOut("undefined\n");
tryItOut("/*infloop*/while((this.__defineSetter__(\"__count__\", new Function).unwatch(\"constructor\")).propertyIsEnumerable(\"__noSuchMethod__\")){var __parent__, constructor = __iterator__ - *::*; }");
tryItOut("/*infloop*/for(const __count__; <><x><y/></x></>; [,,z1]) ;");
tryItOut("if(((uneval(<x/>)).*)) { if ([ if ([,,z1]) > <>@</>]) {yield;export prototype }} else ;");
tryItOut("{[[1]];yield window; }");
tryItOut("while(() && 0){__parent__, __proto__; }");
tryItOut("/*for..in*/for(const __proto__ = null in null['prototype'] = *::*) {yield (function ([y]) { })();{} }");
tryItOut("while((<x><y/></x>) && 0){gc()__parent__; }");
tryItOut("let constructor, [[prop, , prototype], , , __count__];");
tryItOut("M:switch(constructor ? [z1,,] :  '' ) { default: let __parent__, prototype;case 6: break L;break; export *; }");
tryItOut("yield; const prop;");
tryItOut("/*for..in*/for(let prop =  /x/g  in __iterator__ = *::*) {break M; }");
tryItOut("{}");
tryItOut("{/*infloop*/for(({ __noSuchMethod__: __parent__, prototype: prop }) = 1e-81.__lookupSetter__(\"prop\"); 3.yoyo(<x><y/></x>); @foo[null]) {({a2:z2}); }{yield 0;return; } }");
tryItOut("/*infloop*/do {;throw @foo ^= true; } while(yield [[]]()--);");
tryItOut("switch((__parent__)) { default: /*infloop*/L:while(<x><y/></x>){const __parent__ = <><x><y/></x></>, __iterator__ = <x/>; }break; case <x><y\t/></x>.(__parent__): case ({__noSuchMethod__: prop.constructor = <x><y/></x>}): case 5: {}break; case [15,16,17,18].sort(function(q) { return q; }, __parent__.__noSuchMethod__): {__proto__; }case 1: break;  }");
tryItOut("/*infloop*/M:for(let __iterator__ =  \"\" ; *::*; <><x><y/></x></>) {break L;return <><x><y/></x></>; }");
tryItOut("M:if(this) \n");
tryItOut(" const __iterator__;");
tryItOut("/*for..in*/for(const <>constructor</>['prop'] in ((function  __parent__ ()([ /x/g  << 4.]))())){gc()yield; }");
tryItOut("return;");
tryItOut("/*infloop*/for(__noSuchMethod__ = (function  __iterator__ (let, __proto__) { yield  /x/  } ).call(<><x><y/></x></>,  '' ); new (function::__iterator__)(this, undefined) === ((<x/>).call( /x/ , )); (new ((__count__ = __proto__.function::constructor))(Function, (constructor.(<y><z/></y>))))) yield this;");
tryItOut("/*infloop*/M:for(const __noSuchMethod__ = <x/>; <x><y/></x>; [1]) {const prop; }");
tryItOut("/*for..in*/for(var prop in __noSuchMethod__) \n");
tryItOut("/*for..in*/for(const [constructor, prototype] = new (gc<ccc:ddd></ccc:ddd>)((\ntrue\f(<x><y/></x>.(false).__defineGetter__(\"prototype\", prop), (true for (__parent__ in null))).__proto__)) in ('fafafa'.replace(/a/g, function(q) { return q; })) -= #1=<x/>) {/*infloop*/for([, __proto__, <y><z/></y>, ] = (function  __parent__ (constructor, prototype) { yield <><x><y/></x></> } ).call(window, <x><y/></x>); ( '' .__defineSetter__(\"__iterator__\", Function)); ({ set prototype __count__ (prop, __noSuchMethod__)__parent__, __noSuchMethod__ setter: <><x><y/></x></> })) return each;/*infloop*/for(const __proto__;  if (*::*); new (prototype = new ([1,2,3,4].map)())()) {[1,2,3,4].map } }");
tryItOut("continue ;this.zzz.zzz;");
tryItOut("/*for..in*/for(const __proto__ in ((( /* Comment */this & (__iterator__ =  \"\" )) <= @foo)((prototype%=this\n))))if(window.propertyIsEnumerable(\"__parent__\")) { if () ; else {throw *; }}");
tryItOut("prototype = __parent__;");
tryItOut("/*infloop*/M:for(x::__count__; new (gc)(); (1e4 << __iterator__)) export prop;");
tryItOut("let(__iterator__ = (#0=*), __iterator__) { try { (<x><y/></x>); } finally { null//h\n } ");
tryItOut("break L\nthrow this.__defineSetter__(\"__proto__\", function (__parent__, constructor) { yield __parent__ } );");
tryItOut("/*infloop*/M:for(let [({ __count__: [, ({ __proto__: ({ __count__: ({ __proto__: __parent__ }) }), __iterator__: ({ __parent__: prototype, prototype: [] }) }), __noSuchMethod__, __noSuchMethod__, ], (1e4)(prototype): [, __noSuchMethod__, [function::__parent__, ], , ] })] =  /* Comment */ '' ; (window[window]) ^ [] @ <><x><y/></x></>.hasOwnProperty(\"__proto__\").@foo; prototype.prototype = (eval).call.__defineSetter__(\"__count__\", ({}).__lookupGetter__) ^= [1]) do {continue L;throw null; } while((<x/>) && 0);");
tryItOut("( /x/ )\nwhile((*::*) && 0)return true\nexport constructor;");
tryItOut("with({}) with({}) { yield; } ");
tryItOut(";window;");
tryItOut("{__iterator__ = [];throw false; }/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in get if (<x/>) @ null) {return 0/0; }");
tryItOut("L: {const __iterator__;; }");
tryItOut("switch(<!--yy-->) { default: return  /x/g ; const __count__%=function ([y]) { } ,  \"\" ;/*infloop*/do {/*infloop*/do if(((* if (this)\f))) { if (<x/>) {throw ({a2:z2});export *; }} else var __count__ =  /x/ , __noSuchMethod__ = <x/>; while([11,12,13,14].map); } while((__parent__ =  /x/g ) & this);break; case 3: export *; const prototype; }");
tryItOut("yield;");
tryItOut("if(true) {const prop = prop, __parent__; } else  if (window) {function::__noSuchMethod__, __proto__ = this;return  /x/g ; }");
tryItOut("let(constructor) ((function(){{}})());");
tryItOut("let __count__, __iterator__ = this; const __noSuchMethod__;");
tryItOut("let(prototype, __iterator__ = window) ((function(){throw StopIteration;})());");
tryItOut("M:with(__proto__.__parent__ getter= *)(<y><z/></y>);");
tryItOut("return <><x><y/></x></>\t\nreturn __count__;");
tryItOut("while(((yield <y><z/></y> .. constructor)) && 0){; }");
tryItOut("do export *; while((this.__defineGetter__(\"__noSuchMethod__\", prototype)) && 0);");
tryItOut("do {; } while((<x><y/></x> -=  /x/g ) && 0);M:while((undefined) && 0)return;");
tryItOut("this");
tryItOut("/*for..in*/for(let [constructor, __parent__] = window in undefined) return;");
tryItOut("if(((eval(\"export __count__;\", .2.hasOwnProperty(\"prop\")/*\n*/)))((new <x><y/></x>()), ((yield *)))) {(false); }");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) if(yield prototype) { if ( /x/g ) {let __noSuchMethod__ = <><x><y/></x></\r>, constructor; } else {let __count__ = function::__noSuchMethod__: <y><z/></y>; }} else break ;");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in #1#) export prototype; const __proto__;");
tryItOut("yield  /x/g  == *::*\n");
tryItOut("if(window) {; } else throw <x/>;");
tryItOut("if(\t[constructor.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__)].filter((function::__proto__).__defineSetter__).__defineGetter__(\"__count__\",  /x/ )) L:with({__proto__: [11,12,13,14].map}){throw __count__; } else {if(this.__proto__) ({ each: constructor }) setter: function (__proto__)<><x><y/></x></> else {if(__iterator__) { if (undefined) {Math.sin }} else {gc() } } }");
tryItOut("L:  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in (new <><bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb></>(new RegExp(3.141592653589793, 4.)))) for(let y in []);");
tryItOut("/*infloop*/L:while(constructor = *)[];");
tryItOut("/*for..in*/for(var constructor = new *::*(@foo) in <x><y/></x>) var constructor = __count__;");
tryItOut("/*infloop*/while(undefined){export constructor; }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (-0)) {var __noSuchMethod__ = __count__, function::__noSuchMethod__; }");
tryItOut("/*for..in*/for(var __parent__.__count__ in ((Math.sin)((('haha'.split).call(({}), *::*)).isPrototypeOf(<y><z/></y>)))){gc\nconst __count__, __parent__ = prototype;\n }");
tryItOut("if(<><x><y/></x></> , @foo) {(__proto__ =  \"\" , __parent__); } else \n");
tryItOut("/*infloop*/for(var __noSuchMethod__ = (new function () { let constructor, __proto__; } \n()); ([11,12,13,14].some); __noSuchMethod__.__parent__) return;");
tryItOut("this.zzz.zzz;");
tryItOut("let (__parent__ = (1 for (x in []))(((yield window)))) { L:if(#1=[#1#]) /a/gi else  if (1e-81) {gc() } }");
tryItOut("(@foo);");
tryItOut("/*infloop*/L:do {/*infloop*/for(const ({ prototype: ({ __iterator__: function::__proto__ }) }) = window ? (-1) : *::*; -1.__defineGetter__(\"prop\", function  __count__ ()@foo;); 'fafafa'.replace(/a/g, function  prototype (__proto__, __proto__) { return this } ) ? export * :  '' .__lookupSetter__(\"prototype\")) {gc() } } while(<x><y/></x> instanceof <> \"\" <\t/>.@*.isPrototypeOf(this.zzz.zzz));");
tryItOut("if([1].constructor - \f({ __noSuchMethod__: __noSuchMethod__ }) = ++true) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <x/>) \f(true); } else {export __proto__; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("break L;");
tryItOut("if(__iterator__.__noSuchMethod__ setter= [1,2,3,4].map) {return; } else this.zzz.zzz;");
tryItOut("{export constructor;export *; }");
tryItOut("/*infloop*///h\nwhile((new (window)()).__defineGetter__(\"__count__\", ({}).hasOwnProperty))gc()");
tryItOut("if(__iterator__ = <x><y/></x>\t) {prop, __parent__;/*infloop*/for(function::__parent__ = true; <x><y/></x>.valueOf(\"number\"); __iterator__+=<x><y/></x>) {{} }let (prototype = this, __noSuchMethod__) { break ; } } else if(({ __proto__ = *: __parent__ }) = this) {return;export *; } else ");
tryItOut("/*infloop*/while(yield prop){; }");
tryItOut("/*infloop*/for(null; <y><z/></y>; <x/>) break M;");
tryItOut("{(<x><y/></x>);break ; }\n");
tryItOut("with(typeof <x><y/></x>){([]); }");
tryItOut("\nexport constructor; const __parent__;");
tryItOut("L:with((let (prototype, __parent__ = -1) 033[\nnew (null)()] << #2=prototype = (function ([y]) { })()).__defineSetter__(\"__count__\", ((({__iterator__: #1=[#1#] }))).call)){break ; }");
tryItOut("do {{}if((<y><z/></y>[ '' ])) { if ((__noSuchMethod__ |= <x/>)) export *; else {export prop; }} } while((__count__.get) && 0);");
tryItOut("if(new (function  __count__ (__proto__, prototype) { yield <x/> } )()) { if (({__proto__: <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>})) {(*::*); } else {export *;var __count__ =  '' ; }}");
tryItOut("export *;");
tryItOut("if((\n<><x><y/></x></>)--) { if ((let (__parent__ = __count__) <><x><y/></x></> for each (prop in prototype))) let (__noSuchMethod__, __noSuchMethod__) { const __count__; }} else {return \f<x><y/></x>;if(yield <x><y/></x>) {return false; } else  if (__count__) {export *;let __noSuchMethod__; } }");
tryItOut("");
tryItOut("try { return; } catch(__proto__) { yield this; } finally { var , <x/> = this; } ");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] =  in 'fafafa'.replace(/a/g, constructor = __iterator__)) export prop\n");
tryItOut("");
tryItOut("{return;; }this.zzz.zzz;");
tryItOut("/*infloop*/do while((<><x><y/></x></>/*\n*/) && 0){continue ; } while(this.__defineSetter__(\"__count__\", [1,2,3,4].map));");
tryItOut("L: {gc(){export *; } }");
tryItOut("prototype = true, __proto__;\nyield;\n\nyield prototype;\nexport *;\n\n\n");
tryItOut("/*infloop*/M:for((<x><y/></x>)().hasOwnProperty(\"prototype\"); this.__defineGetter__(\"prototype\", window); __parent__ = [,,] >>>=window\n) ( \"\" );");
tryItOut("/*infloop*/for(prototype; Math.pow(yield <x/>;, <y><z/></y>); true) __noSuchMethod__");
tryItOut("if((yield  /x/ )) {const __noSuchMethod__, constructor;return false; }");
tryItOut("with(<y><z/></y>){export prototype;return  '' ; }");
tryItOut("return <y><z/></y>;");
tryItOut("");
tryItOut("Math.sin");
tryItOut("with({}) with({}) try { throw __parent__; } finally { __parent__; } ");
tryItOut("/*for..in*/for(__proto__ in (*.propertyIsEnumerable(\"__iterator__\").__lookupSetter__(\"__proto__\"))) {(<><x><y/></x>\t</>); }");
tryItOut("throw <x/>;gc()");
tryItOut("/*for..in*/for(var ({})[arguments] in ((new Function(\"var __proto__, prop;\")))(__proto__, <y><z/></y>)) /*for..in*/M:for(var constructor in ((Function)((-0)))){export *; }");
tryItOut("{{} }");
tryItOut("/*infloop*/while((new Function(\"break ;\"))){throw <><x><y/></x></>;<x><y/></x> }");
tryItOut("{export *;return; }");
tryItOut("const constructor\n");
tryItOut("return;");
tryItOut("with(({prototype: <x/>, __proto__: this.zzz.zzz }\t)){continue M; }");
tryItOut("with(--1e4 @ [<x><y/></x>].sort(({}).hasOwnProperty))export constructor;");
tryItOut("if((({__noSuchMethod__: constructor =  '' }))) ; else {gcexport prop; }continue L;");
tryItOut("if(\n<x><y/></x>) {const __proto__ = constructor; } else  if (<x/>) {gc() }");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __parent__] = (this.__defineGetter__(\"prototype\", (1 for (x in []))).unwatch(\"__parent__\") >>> (__iterator__.__defineGetter__(\"__iterator__\", function  __iterator__ (__proto__) { yield; } ).yoyo((([#1#].some(new Function)) &= <y><z/></y> -= @foo)))) in *) \n{; }");
tryItOut("(<y><z/></y>);\n/*infloop*/for(var prototype = 0/0; ({a2:z2}); __count__) throw -3/0;\n\t");
tryItOut("/*infloop*/do { } while((</*xxx){}</xxx>);");
tryItOut("/*for..in*/for(prop in __parent__ = <y><z/></y>) let (__iterator__) { {} }");
tryItOut("gc()\nif(<x><y/></x>.__lookupGetter__(\"__iterator__\")) {yield; }");
tryItOut("if(#2=({__iterator__: <><x><y/></x></>})) {yield prop;{;var __parent__ = <x/>, constructor = 4.; }; } else  if (<y><z/></y>) {return __count__; }");
tryItOut("/*infloop*/for(var __proto__ = undefined.throw(constructor.constructor setter= (new Function(\"gc()\"))); ([><x><y/></x><>].some(<><x><y/></x></>)); 5.0000000000000000000000 != <x/>) window;");
tryItOut("L:if(<y><z/></y> && (yield <x><y/></x>)) {var __noSuchMethod__ =  /x/g , __proto__ =  \"\" ; } else  if (<x/>()) export prototype; else {yield @foo;yield  '' ; }");
tryItOut("/*infloop*/for(let ({ __iterator__: [, ], __proto__: [({ __iterator__: constructor, prop: __proto__ }), , __count__, , ] }) = __parent__.constructor getter= function(y) { yield y; throw <><x><y/></x></>;; yield y; }; new @foo(((( '' ).__defineSetter__).call(*/*\n*/, )), (({constructor: <y><z/></y>.@*}))); [15,16,17,18].filter((1 for (x in [])), ++(constructor))) {\fif((!this && <x/>++)) continue ; else  if (#1=[#1#]) {let prototype, prototype;{} } }");
tryItOut("function (__noSuchMethod__, __noSuchMethod__)__parent__");
tryItOut("if(__parent__ = []) { if ([, __noSuchMethod__, , __parent__] = (__noSuchMethod__.__count__ getter= <><x><y/></x></>)) {return __iterator__; }} else {L:if(this) {continue ; } else  if (<y><z/></y>) {export constructor;throw null; } else constructor = @foo, __count__; }");
tryItOut("with({__parent__: (this.__defineGetter__(\"constructor\", null) .@ (<><x><y/></x></>(0/0)).unwatch(\"prop\").propertyIsEnumerable(\"prototype\"))})prototype = __parent__; const __noSuchMethod__;");
tryItOut("if(<y><z/></y>.__defineSetter__(\"prop\", function  prop (__count__, __parent__)@foo)) /*for..in*/for(constructor = <><x><y/></x></> in constructor) let constructor, __proto__; else  if ([((*::*.valueOf(\"number\").constructor) if (window)) for each (constructor in (()( , <><x><y/></x></>))) for ((prototype) in [11,12,13,14].map) for ((x::prop) in ({})) for each (__proto__ in <y><z/></y>) for (constructor in <x/>)]) \nL: yield null;");
tryItOut("M:with({prop: false})export *;");
tryItOut("break M\n@foo;");
tryItOut("/*infloop*/for(let constructor; __noSuchMethod__ = (({}).hasOwnProperty).call((__count__ = window), (delete function(id) { return id })[((uneval(<y><z/></y>)))], ([11,12,13,14].filter)).yoyo(undefined .@ @foo ? <><x><y/></x></> : false); (<><x><y/></x></>.prop = constructor) .. (<><x><y/></x></> != <x><y/></x>)) {{while((window) && 0) }/*for..in*//* nogeckoex bug 349964 */ for  each(<x><y/></x>.(function ([y]) { }) in window) { } }");
tryItOut("switch(/a/gi) { default: if(*) {let __iterator__, __parent__; } else  if (<x><y/></x>) {throw false; } else return  /x/g \nwith('fafafa'.replace(/a/g, (new Function(\"break M;\"))) = [11,12,13,14].sort)(({}).__lookupGetter__).applybreak; break; \nbreak; var prototype;__parent__case ((delete prop.prop = [[]]).unwatch(\"prototype\")): if(let (__iterator__) ({ __iterator__: ({ __count__: __parent__ }) })) { if (prop) {continue L;const prop = <><x><y/></x></>, function::__parent__ = <y><z/></y>; }} else export *; }");
tryItOut("<!--yy-->\nexport *;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in (__noSuchMethod__)[eval(\"<x><y/></x>\", #1#)]) <x><y/></x>");
tryItOut("M:with(constructor.__parent__ setter= Math.pow){(<y><z/></y>); }");
tryItOut("let (({ __noSuchMethod__: [__noSuchMethod__, , *, []], __proto__: [] }) = (({}).__defineSetter__\t(\"prop\", function(q) { return q; }))) { (false); const __count__; }");
tryItOut("if(<><x><y/></x></>) yield this; else  if (true) {return <x><y/></x>; }if( \"\" ) { if (prototype|=__parent__ = ((uneval( /x/ ))).hasOwnProperty(\"__count__\")) {yield; const constructor;export prop; }} else yield;");
tryItOut("/*infloop*/for([, constructor, , ({ prototype: ({ prototype: [__count__, ], prototype: __count__ }) }), ] = ({ function::__noSuchMethod__: constructor }); [__noSuchMethod__ for each (__noSuchMethod__\f in this)] in (prototype.__iterator__ getter= 'haha'.split); new String(*::*).isPrototypeOf(constructor.__iterator__)) {/*infloop*/for(window; <><x><y/></x></>; __iterator__) {( /x/ );<x><y/></x> }while(([11,12,13,14].map) && 0)/*for..in*/for(let __proto__ in ((((gc).call).call)(__iterator__-=*::* % prototype+=<x><y/></x>)))/*for..in*/for([__count__, constructor] = *::* in <x><y/></x>) {} }");
tryItOut("/*for..in*/M:for(const __parent__ = *::*.constructor = <x><y/></x> in *) {var __parent__; }");
tryItOut("M:with(*::*){continue ;export *; }");
tryItOut("{const (undefined);, prototype = <><x><y/></x></> }");
tryItOut("/*infloop*/while((new 3/0( \"\" )));");
tryItOut("let(__proto__ = , prop = !<><x><y/></x></>) ((function(){return;})());");
tryItOut("L: if(new ()(<x/>, 1e4)) { if (__parent__) let __proto__;} else break ;");
tryItOut("with(eval(\"gc()\", <><x><y/></x></>--)){if((new (<y><z/></y>)(window))) (*::*);while((prototype = 1e81) && 0)return *; }");
tryItOut("return;");
tryItOut("return;");
tryItOut("/*for..in*/for(const constructor = true in 5.0000000000000000000000) const __iterator__ = [[]], __count__;");
tryItOut("if(*::*) { if (this) } else {const __proto__ = this;break ; }");
tryItOut("/*for..in*/for(constructor = null in <><x><y/></x></>) {function  prototype (constructor) { return __iterator__ }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in (p={}, (p.z = (<><x><y/></x></> >= [1]))())) {/*for..in*/for(var __count__ in ((Math.sin)( '' ))){break L;let prototype = prototype, __parent__; } }");
tryItOut("export *;\nvar prop = true, __proto__;");
tryItOut("if(set) {continue ;( \"\" ); } else  if (window) { \"\" return; } else {@foo; }");
