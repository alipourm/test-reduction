tryItOut("/*infloop*/for(let constructor; <x/>; (p={}, (p.z = (uneval(new new Function())))())) {/*infloop*/do {throw try { setter } finally { throw <><x><y/></x></>; } ; } while(yield [ \"\" ]);export *//h\n; }");
tryItOut("{{let __count__;continue ; } }");
tryItOut("if(this) { if ((<y><z/></y>)[0/0]) {const __proto__ = <><x><y/></x></>; } else ;}");
tryItOut("with({prop: [1]['__proto__']})#1=[#1#];");
tryItOut("var __iterator__\nthrow __parent__;");
tryItOut("L: {throw [,]; }\n/*for..in*/for(__proto__ in __noSuchMethod__.__iterator__ = (<><x><y/></x></>.hasOwnProperty(\"__count__\"))) {return;gc() }");
tryItOut("/*infloop*/L:for(*::*; (__noSuchMethod__.prototype); //h\n({ function::function::prop: __parent__, __proto__: __count__ }) = ({ prototype: __parent__ })) L:if(<y><z/></y>) {(this); } else  if (3/0) {{} } else (false);");
tryItOut("/*infloop*/while(((/a/gi)()))L:switch((<xxx {prototype}={{} .@x:: -1} />.(new (<x><y/></x> >>=  \"\" )(({ set __iterator__ prop (constructor, __proto__)<x><y/></x>, \f\rprototype: <y><z/></y> }))))) { case <><x><y/></x></>.@*: L: {}Math.sinbreak; break;  }");
tryItOut("with(((__noSuchMethod__ for (prop in  '' )))){(eval).callreturn <y><z/></y>; }");
tryItOut("yield (new (1 for (x in []))(<x><y/></x>))(Object(), <><xxx {constructor}={<><x><y/></x></>} /><!--yy--></>);");
tryItOut("with({constructor: ([1][__iterator__.([1])]'}){let(__count__, prop =  '' ) ((function(){return;})());(<x><\fy/></x>); }");
tryItOut("/*infloop*/do {yield;throw __parent__; } while((eval(\"@foo\", window).valueOf(\"number\"))(@foo));");
tryItOut("M:if( /* Comment */__proto__) { if ((p={}, (p.z = this.zzz.zzz)())) if(<><x><y/></x></>) {export __noSuchMethod__;yield *::*; } else throw null;} else with({__proto__: <x><y/></x> || <y><z/></y>}){(function ([y]) { }); }");
tryItOut("M:switch(null) { default: break; case 9: break; /*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in [,]) var prop = [1,,], prop = <x/>; }");
tryItOut("/*infloop*/M:for(const __proto__ = \n(__proto__).watch; #1=[#1#] |= __iterator__; (<x><y/></x> if (prototype) == ([false for each (\f__noSuchMethod__ in (function ([y]) { })())]))) yield this;");
tryItOut("return \n__proto__;");
tryItOut("if(new (0x99).watch(__iterator__) .@x:: String() <<= true) { if (<bbb xmlns:ccc=\"( \"\"  if ( '' )) - (window())\"><ccc:eee></ccc:eee></bbb>) {L: yield; } else {if(<x><y/></x>) ([z1]); else  if (1.3) yield  /x/g ;\f }}\f");
tryItOut("{export *;if(([1,,])( /x/ , <x><y/></x>)) {(window); } }");
tryItOut("M:while((this) && 0){(window);; }");
tryItOut("while((<x/>) && 0)let __noSuchMethod__ = prop, __iterator__ = 0/0;");
tryItOut("M:if(true) { if (<><x><y/></x></>) export *; else {__count__ = function::__count__; }}");
tryItOut("do /*infloop*/for(const function::prop = window; ({}); <x/>) export __noSuchMethod__; while((new RegExp().__proto__) && 0);");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__count__\", ({}).hasOwnProperty))gc()");
tryItOut("const prototype = 3/0;\n/*infloop*/while(prop.prototype = __count__(<x><y/></x>.__lookupGetter__(\"__parent__\"), prop))export *;\n");
tryItOut("with({}) { yield; } ");
tryItOut("L:if(__parent__ = <><x><y/></x></>) ;\t");
tryItOut("{return; }");
tryItOut("let(prototype) ((function(){let(__noSuchMethod__ = <x><y/></x>) ((function(){})());})());");
tryItOut("with({__count__: (let (prototype = <xxx {__noSuchMethod__}={.2 > <><x><y/></x></>} />) export *[({__count__: <y><z/></y>.unwatch(\"constructor\") })])}){let ({ __noSuchMethod__: __iterator__ }) =  /x/g  .@ *::*, __parent__; }");
tryItOut("/*for..in*/for(let __iterator__ = (<><x><y/></x></>\n)[@foo.__defineGetter__(\"x::__noSuchMethod__\", Math.pow)] in @foo(prop)) gc()");
tryItOut("/*infloop*/for(({ __proto__: ({ constructor: prop }) }) = (\neval(\"<x/>\", <x><y/></x>)); new (<><x><y/></x></>.prototype)((__noSuchMethod__ = this)); (((constructor.@*))((p={}, (p.z = arguments)())))) (<x/>).__defineSetter__");
tryItOut("L: {;export *; }\nlet prop, __count__ =  \"\" , prototype;\n/a/gi\n\nreturn <x><y/></x>;");
tryItOut("L:if([(__proto__) = (p={}, (p.z = <x/>)())].sort(function(q) { return q; })) { if (*) /*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in ((function(q) { return q; })(window, *))) yield; else /*infloop*/while((.2 = \f))if(__iterator__.isPrototypeOf(<x><y/></x>)) { if (prototype) {(<x><y/></x>); }} else {prop; }}");
tryItOut("throw StopIteration;");
tryItOut("L:do {} while((<xxx>{__proto__}</xxx>.((* === window.yoyo(5.0000000000000000000000)))) && 0);");
tryItOut("do {throw false; } while((<x/>) && 0);");
tryItOut("{\n }");
tryItOut("/*infloop*/for(--undefined /= *.hasOwnProperty(\"__parent__\") .@*:: (({ __count__: function::__iterator__, __count__: __proto__ }) = <><x><y/></x></>.unwatch(\"prop\")); (yield __parent__ %= 1e4 < window % Function(([__count__]))); this.__defineSetter__(\"prop\", (eval(\"window\", __parent__)))) {switch(this) { case this &= <><x><y/></x></>: break;  } }");
tryItOut("L:if((<x/>.isPrototypeOf(*::*))) { if ((<x/>.__lookupGetter__(\"constructor\")[__count__ = undefined])) {[,,z1]; } else {export __proto__; }}");
tryItOut("{}");
tryItOut("export *;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in ({a1:1})) {yield; }\n");
tryItOut("if(new String([] = [this].sort(function  prop (__parent__, __count__) { return ({a2:z2}) } ), (-1)(__parent__))) {yield; } else {const __noSuchMethod__ = arguments;; }");
tryItOut("/*for..in*/for(var __parent__(constructor) in ((Iterator((new -1(<><x><y/></x></>, <x><y/></x>) ? (+prototype) : <x><y/></x>)).hasOwnProperty(\"__proto__\"))(__count__ = new <xxx>{__iterator__}</xxx>.((-1)[<x/>])(#0=prop = <y><z/></y>, <y><z/></y> ?  ''  : 4. - (-0).valueOf(\"number\"))))){/*infloop*/for(({ __noSuchMethod__: __count__, set: [, __noSuchMethod__] }) = (<x><y/></x> ? <><x><y/></x></> : [1,,]); (__parent__[__count__ @ prototype]); (true)(<y><z/></y>)) break ; }");
tryItOut("yield\n");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__ = #3={a:#3#}, __proto__: __proto__, __noSuchMethod__: ({ prototype: ({ __iterator__: ({ __count__: __noSuchMethod__, prop: prototype }), __noSuchMethod__: ({ __iterator__: \f__noSuchMethod__, constructor: prototype }) }), __parent__: [, __noSuchMethod__, prop, ({ __count__: ({}) })] }) })\f =  /x/  +=  \"\" .*; <><{__parent__}>yyy</{__parent__}></>; (p={}, (p.z = ([11,12,13,14].some))())) /*infloop*/do yield __proto__; while(--__iterator__)");
tryItOut("if(([] = (( /x/ )[window])))  new ");
tryItOut("with({__iterator__: -0})3/0;");
tryItOut("for(let y in [5,6,7,8]) let(__parent__ = [,,] @ arguments) ((function(){return yield false;})());");
tryItOut("with((({__iterator__: __proto__.throw(<x><y/></x>)}))){<x><y/></x>;return prop; }");
tryItOut("with({constructor: (({constructor: this})())})if(3.141592653589793) { if (null) ({}).hasOwnProperty else {var prop; }}");
tryItOut("/*for..in*/for(var ({ prototype: ({ constructor: ({ __iterator__: __proto__ }), __iterator__: ({ __count__: __parent__, __iterator__: ({  /x/g : __parent__, prototype: __iterator__ }) }) }) }) in ((function () { yield  /x/g .__lookupGetter__(\"__noSuchMethod__\")-- } )((new Math.pow(__proto__.(__count__.__count__ setter= (true).watch), prop =  /x/  , this.zzz.zzz)))))/*infloop*/L:for(constructor; ([window].sort(<x/>)); <x/>) {;; }");
tryItOut("/*infloop*/for(__parent__(<><x><y/></x></>) = (p={}, (p.z = *::*)()); (<><x><y/></x></>.eval(@foo)); new Function()) {export *;true; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (prop) in window >>>=this) this;");
tryItOut("/*for..in*/for(let constructor in ((new Function)(*::*)))try { return {}; } catch(__count__ if __proto__) {  { yield [z1] }  } finally { <x><y/></x>; } \nexport prop;");
tryItOut("/*infloop*/for(*::*; #1=[#1#]; prop)  \"\" ;");
tryItOut("with({prop:  /x/g })/*for..in*/for(const __noSuchMethod__ in (((true).__defineSetter__)(__noSuchMethod__.prop getter= (1.2e3).__defineSetter__)))return -0;");
tryItOut("/*infloop*/for(const __iterator__; window; this.__defineSetter__(\"prototype\", function () { return  /x/  } )) /*infloop*/for(const prototype;  \"\" \n; (uneval(<y><z/></y>))) return 4.\nbreak L;");
tryItOut("/*infloop*/for(((yield [({ constructor: case 8: break;  }), ({ let __parent__ = 1e-81, __iterator__;: [__noSuchMethod__, , __noSuchMethod__], [,].*: prop })] = [({ __iterator__: ({ prop:  /x/ , __proto__: function::__proto__ }), __iterator__: [__count__] }), , ({ constructor: __parent__, prop: [prop, ] }), , []])); new (( /x/g ).watch).apply(prototype).unwatch(\"prop\"); ((({__noSuchMethod__: this})) if (undefined))\n/*\n*/) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in Exception()) export *; }");
tryItOut("{return (new <y><z/></y>);yield; }");
tryItOut("/*infloop*/L:do {throw <x><y/></x>; } while((@foo.@*).__lookupGetter__(\"constructor\").unwatch(\"__proto__\"));");
tryItOut("{(#1#);\nexport *;\nprop.prototype = __iterator__; }");
tryItOut("{}L:with(<><x><y/></x></>)export __iterator__;");
tryItOut("{yield -0;; }if(this) { if (prop) return; else {yield; }}");
tryItOut("while((((function (__parent__ setter: Function) { yield 0.1 } ).call).call(<x><y/></x>.__lookupSetter__(\"__proto__\"), __count__.__proto__ = ({a1:1}) <<= (<><x><y/></x></> == window))) && 0){ }");
tryItOut("/*for..in*/for(const __iterator__ = *::* in <>\f<x><y/></x></>) {export __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ( __count__, __parent__ { __proto__: ({ __iterator__: prop }) }) in eval(\"window\", *)) {if(<><x><y/></x></>) yield;const __count__, __count__ = <><x><y/></x></>; }");
tryItOut("with(((4.).@* < new (eval(\"<><x><y/></x></>\",  /x/ ))(window.@foo)))yield\n");
tryItOut("");
tryItOut("yield prop;\nvar prop;\n");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (prototype = ({})).__parent__ in 1e+81.__lookupSetter__(\"__noSuchMethod__\"//h\n).valueOf(\"number\")) /*infloop*/for(prop; *::*; <><x><y/></x></>) {{}; }");
tryItOut("with({constructor: __count__})var constructor = prototype;");
tryItOut("let(constructor, prototype) { this.zzz.zzz;");
tryItOut("while((__proto__.constructor ? <><x><y/></x></>.eval(<y><z/></y>).throw((__count__ = <y><z/></y> & __proto__.__noSuchMethod__ = *::*)).@foo : *) && 0){({}).__lookupGetter__ }");
tryItOut("with(__count__ = {} if \t( \"\" ))yield;");
tryItOut("/*infloop*/for(({prototype: ((p={}, (p.z = [<x><y/></x>.valueOf(\"number\")].some(({}).hasOwnProperty))())) }); [[]] ? let (prototype, __parent__)  && (yield false) : __proto__.( /x/ ); __parent__+=({__parent__:  '' })) if(<x/>) var __proto__, prototype = [,,]; else  if ((function ([y]) { })()) {throw  /x/ ; }");
tryItOut("if((p={}, (p.z = ((.2 for (prop in 0))))())) { if (\t(yield ({})) | __noSuchMethod__ = 1e81) /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in -3/0) export *; else {}}");
tryItOut("break M;");
tryItOut("/*infloop*/for(let __iterator__; ({a1:1}).isPrototypeOf(<xxx {prop}={__count__ = undefined} />.((\nnull))); new ((new RegExp(window, <><x><y/></x><\f/>)).watch)()) <zzz><y><z/></y>.hasOwnProperty(\"constructor\")</zzz>");
tryItOut("{var prop = *::*, constructor = @foo; }");
tryItOut("/*infloop*/L:for(var ({ prototype: __count__, __parent__: prototype.__noSuchMethod__ }) = __parent__ = (( \"\" )[<x/>]); ++<x/> >> <><x><y/></x></>; --) {break L; }");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = ++prototype = constructor in new Function(({ __parent__:  }) = __iterator__.(<x><y/></x>))) {with({__proto__: <><x><y/></x></>})gc() }");
tryItOut("/*for..in*/for(const __count__ in (([1,2,3,4].map)((<x><y/></x> != false) - ([[]] instanceof 0/0)))){(constructor); }");
tryItOut("return 1.2e3 ? <><x><y/></x></> : *::*;");
tryItOut("/*for..in*/M:for(var (-1 == *)(prop.throw( /x/g )) in eval(\" /x/g \", [,,])) {let setter = __proto__;; }");
tryItOut("if(((Exception( /x/ , true)) %= [<><x><y/></x></>].some([1,2,3,4].slice))) gc() else  if ((!#1=[#1#])(void (constructor = 0.1), ({constructor:  /x/ .*}))) return this;");
tryItOut("M:while((prototype = -0) && 0)L:with( /x/g .hasOwnProperty(\"__noSuchMethod__\") | prop){(<x><y/></x>);switch(<y><z/></y>(*::*, 1e+81)) { case 7: default: gc()break;  } }");
tryItOut("switch([arguments]) { default: (window); }");
tryItOut("{{if(({__noSuchMethod__ getter: function  prop () { export *; } , prop: delete (<x/>.watch(\"__noSuchMethod__\", function(y) { yield y; gc(); yield y; })) })) { if ( '' ) yield;} else {(true);export *; } } }");
tryItOut("let (__proto__, __noSuchMethod__ = <x><y/></x>) { function  __parent__ (prop, <x><y/></x>)* }");
tryItOut("with([1])");
tryItOut("while((!constructor.__count__) && 0){export prototype; }");
tryItOut("throw StopIteration;");
tryItOut("{/*infloop*/for(prop = <x><y/></x>; __parent__; <><x><y/>\f</x></>) {yield 1e4;export __parent__; }yield <><x><y/></x></>; }");
tryItOut("({ prop: \t[({ __iterator__: [, ({ prototype: [constructor, , , ({ getter: prop, __noSuchMethod__: __proto__ })] }), ({ __iterator__: [({ prop: prop }), ], __count__: ({ __noSuchMethod__: ({ __proto__: ({ __parent__: ({ __parent__: ({ __proto__: __iterator__, prototype: constructor }) }), prototype: ({ __count__: ({ prototype: __count__, prop: constructor }), prototype: ({ __parent__: constructor, constructor: __proto__ }\t) }) }), function::__proto__: ({ constructor: ({ __parent__: [__parent__, ], __iterator__: ({ constructor: prototype, __parent__: __noSuchMethod__ }) }), __count__: ({ __proto__: [], __count__: __noSuchMethod__ }) }) }), prototype: [, , ]\f }) }), , ], prop: prop }), , , , ] })");
tryItOut("if(#0= '' ) {__parent__ = __count__, __noSuchMethod__;const __noSuchMethod__, __count__; }");
tryItOut("break \n/*infloop*/do {{} } while(yield k);");
tryItOut("let(prototype) ((function(){{throw <y><z/></y>; }})());");
tryItOut("/*infloop*/M:do {break L; } while(eval(\"*\", function ([y]) { }));");
tryItOut("if(({__proto__: true}) .@*:: <x><y/></x>['__parent__']-=eval(\"0\", *::*)) yield  /x/ ;");
tryItOut("/*for..in*/for(prototype in (((__noSuchMethod__ = eval(\"{}\", window)))(__iterator__.__lookupSetter__(\"__proto__\"))))L:with(__parent__){throw <y><z/></y>;break ; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (([1,2,3,4].slice)(this)))export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype in <x><y/></x>) {/*for..in*/for([__count__, constructor] = <x><y/></x> in __proto__) throw this; }");
tryItOut("var ({ prop: __proto__.prototype, __iterator__: ({ prop: ({ __noSuchMethod__: [__iterator__, , , __proto__] }), constructor: [({ __iterator__: prototype, constructor: __count__ }), []] }) }), [__count__, ({ __iterator__: ({ K: __proto__ }) }), [constructor, , ], __noSuchMethod__, ];");
tryItOut("if((new Function(\";\"))()) { if (( /x/g  != *)) if( /x/ )  else  if (this) (this); else {while((@foo) && 0)yield <x><y/></x>; }}");
tryItOut("M:switch() { case this.__defineGetter__(\"__parent__\", Math.pow): return <x/>.prototype = <y><z/></y>.hasOwnProperty(\"__noSuchMethod__\") for (__iterator__.prop in <x><y/></x>) if ( '' );break; (-0);default: case 6: let (constructor = <x><y/></x>, __noSuchMethod__) { /*for..in*/M:for(__iterator__ = prototype in <x/>) {<x/>return @foo; } }case new (([1,2,3,4].slice).call)((<x/>.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty))): __iterator__;break;  }");
tryItOut("gc()");
tryItOut("{(<><x><y/></x>\t</>);return; }");
tryItOut("with({constructor: (yield (constructor !==  /x/ ))}){export prototype;while((__iterator__) && 0){let constructor = 3;__count__ =  /x/ ; } }");
tryItOut("L:with((__noSuchMethod__)){yield this\nyield;\nfunction  __noSuchMethod__ (prototype, __proto__) { yield <x><y/></x> } \n }");
tryItOut("return");
tryItOut("throw 0;return;");
tryItOut("( set function::prototype __noSuchMethod__ (__iterator__) { (<x/>).watch } );return; const __proto__;");
tryItOut("{(#1#); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in [,,z1]) let __iterator__, __parent__\nwith({setter: <y><z/></y>})export *;");
tryItOut("/*for..in*/for(__parent__ in \nthis) {yield\nreturn; }");
tryItOut("M:with(((__parent__.__noSuchMethod__).watch(\"constructor\", function (__noSuchMethod__, __count__) { yield (<><x><y/></x></> <  /x/ ).yoyo(@foo) } )))if(<> /x/  </>) /*for..in*/for([__noSuchMethod__, __noSuchMethod__] = (<x><y/></x> ^= null) in <><x><y/></x></>) {export *; }");
tryItOut("M:while((yield <><x><y/></x></>) && 0){__count__ }");
tryItOut("gc()");
tryItOut("throw __count__;\n(*::*)\n");
tryItOut("do if( ''  ? <><x><y/></x></> :  /x/ (__count__ <<= @foo,  /x/ )) { if (__iterator__.prop getter= (function(q) { return q; }).apply) {prop, prop = <x/>; }} else {export *; } while(((\t__iterator__ = * > *::* =  \"\"  + prop ? (yield *) : window.yoyo(<x/>) for each (prototype in ((<y><z/></y>[0]).watch(\"prototype\", (( /* Comment */ /x/g )).__defineSetter__))) for (__parent__ in ([3.141592653589793].filter(arguments))))) && 0);");
tryItOut("/*infloop*/do {break ;return <x><y/></x>; } while(null);");
tryItOut("yield\nlet __count__ = __proto__, __proto__ = true;");
tryItOut("{(<x/>);/a/gi }\nL:switch(prototype.prototype) { case void __proto__: (__parent__);case 5:  }\n");
tryItOut(" const __count__;");
tryItOut("/*infloop*/M:do {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 1.3) {} } while((({ constructor: constructor }) = []) %= (new Function(<y><z/></y>)));");
tryItOut("L:if(constructor.(new RangeError(<><x><y/></x></>))) { if ((yield (p={}, (p.z = constructor)()))) __count__.__noSuchMethod__ setter= (new Function(\"gc()\"))} else {let __proto__, prop;return; }");
tryItOut("/*for..in*/for(const [__count__, __proto__]<y><z/></y><y><z/></y>{{}throw [,]; }");
tryItOut("with({__noSuchMethod__: (new (constructor(<><x><y/></x></>) = ({ __iterator__: [, [, __parent__, , prototype, ], ], __parent__: prototype }) = --<x/>)())}){with({__noSuchMethod__: ({})}){if((__proto__ = <><x><y/></x></>)) ; } }");
tryItOut("let (__parent__ = ({}).hasOwnProperty()) { \t{if(.2) { if (this) throw *::*;} else {export *;<x/> } } }");
tryItOut("{const __parent__, prop; }");
tryItOut("/*infloop*/for(var prop; *::*; (false.__iterator__ = \tprop = true)) M:while(((Function).call(false, )) && 0){; }");
tryItOut("return ({ prop: ({ __proto__: ({ prototype: prototype }), function::__noSuchMethod__: __count__ }) }) = prop = 1e4 &= (<><x><y/></x></>)(*);");
tryItOut("(Math.pow).call");
tryItOut("/*infloop*/for(const ({ constructor: prop }) = (-<x/> / #1=[#1#] | 0x99); ({a2:z2}).isPrototypeOf((prop = <x><y/></x>)); (uneval(<x/>))) {yield <x><y/></x>;(window).__defineSetter__ }");
tryItOut("yield (([__iterator__ =  \"\" ] if (<x/> > prototype)));");
tryItOut("/*infloop*/while([, , ({ function::__parent__: prop }), ({ __count__: prototype, __proto__: prototype })])/*for..in*/for(const [prototype, constructor] = 1e4 in <x><y/></x>) let prototype = undefined, __iterator__;");
tryItOut("if((p={}, (p.z = export __proto__)())) { if (this.zzz.zzz) {return <><x><y/></x></>[({})]; } else {; }}");
tryItOut("L:if(prototype) {continue M;(false); }");
tryItOut("return window\n");
tryItOut("/*infloop*/M:for(var __count__; 0;  /* Comment */this) {export __parent__;export *; }");
tryItOut("if(this.zzz.zzz) {var prototype =  \"\" , constructor = 3.141592653589793;prop, constructor = function(id) { return id }; } else ( /x/ );\nyield;continue ;\n");
tryItOut("/*for..in*/for(let __noSuchMethod__ = ([[]])(true,  '' ) in this) {/*for..in*/M:for(var __count__ in <\f><x><y/></x></>) continue M; }");
tryItOut("with(3/0)continue ;");
tryItOut("let (__noSuchMethod__ = [<x><y/></x>] % prototype.@*) { yield; }");
tryItOut("if((#2=constructor)) { if (__count__) {continue ;export __count__; } else var __parent__;}");
tryItOut("/*infloop*/for(var [({ constructor: __proto__, __noSuchMethod__: [, , ] })] = (<x/>.@foo)[<x><y/></x>]; [<x><y/></x>].map((1 for (x in []))); [window .@ 1.2e3].filter(<y><z/></y>)) {switch(<x/>) { default: case 1: return; }continue ; }");
tryItOut("{export *;{} }");
tryItOut("{} const __noSuchMethod__;");
tryItOut("if(prototype.(<x><y/></x>.valueOf(\"number\"))) { if (((x::setter.prop = [,,z1])[(return)])) {{} \"\" ; } else {const __parent__;var prototype = 0/0; }}");
tryItOut("let(prop) ((function(){{}})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in  /x/g .__lookupGetter__(\"__iterator__\").__lookupSetter__(\"prototype\")) do {__iterator__;switch(0) { default: return;break;  } } while(((__parent__.prototype = (__iterator__ * <x><y/></x>))) && 0);");
tryItOut("/*infloop*/while(<x><y/></x>){break M;export __count__; }");
tryItOut("<x><y/></x> const constructor\n");
tryItOut("{return;M:if( /x/g ) __proto__ else  if (this) {throw []; } else yield\f\n }");
tryItOut("try { return; } finally { with({}) { return; }  } ");
tryItOut("/*infloop*/M:for(0.1; @foo; __count__) {@foo;{} }");
tryItOut("/*for..in*/for(var prop = new (())() instanceof new new null(<x><y/></x>)(({a2:z2}), <y><z/></y>) in ({: this})) {({}).hasOwnProperty }");
tryItOut("while((()) && 0)__iterator__(undefined , <x><y/></x>.yoyo(__iterator__)) = __proto__;");
tryItOut("L:switch(new yield <x/>(<xxx {prototype}={[<><x><y/></x></>default: ]} />, ( /x/ .watch(\"set\", 1e4)))) { default: case eval(\"*::* .@*:: @foo\", (prototype+=__noSuchMethod__)): break; case 1: /*infloop*/M:while(__noSuchMethod__ =  \"\" )\fif(__iterator__) return; else {let __count__ =  /x/g ; }break; export __count__; }");
tryItOut("for(let y in []);");
tryItOut("const __count__ = <><x><y/></x></>, __noSuchMethod__ = ({a1:1});");
tryItOut("if((3/0)(constructor, #1#).propertyIsEnumerable(\"__iterator__\")) L:if(<y><z/></y> > <x><y/></x>) { if (false) const prototype = true, __iterator__;} else {{}yield  /x/ ; } else  if (#2\r=[ /x/ ]) new (new Function(\"return;\"))(<x><y/></x>)\nconst prop = -3/0;");
tryItOut("/*infloop*/M:for(<>{}</> ^= __proto__ = __iterator__; <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(<x><y/></x> ?  /x/g  : this); new (())()) {function::__parent__ = 0/0, __parent__{yield; } }");
tryItOut("{/*for..in*/for(var prototype in (((new Function(\"continue L;\")))(<x><y/></x>.__lookupGetter__(\"__count__\"))))return <x><y let constructor = this; /> get __count__(__parent__, __proto__) { return __iterator__ = (function ([y]) { })() } /x>var __noSuchMethod__ =  '' , __iterator__ = <><x><y/></x></>; }");
tryItOut(";");
tryItOut("L:do M:if([[]] ?  \"\"  : <><x><y/></x></>) yield this; else  if (false) {export *;(<x><y/></x>); } else {(#1#);\r } while(((eval(\"return;\", (({}).hasOwnProperty).apply.*))) && 0);");
tryItOut("if(yield __noSuchMethod__) { if (<y><z/></y>) ;} else {export __count__;export constructor; }");
tryItOut("\n{}");
tryItOut("\nif( '' ) {return;export *; } else  if (<><x><y/></x></>) {export __noSuchMethod__;(null); } else let __proto__ = #3={a:#3#};");
tryItOut("(arguments)\n/*infloop*/for(<x/>; [1]; this) {return;eval }");
tryItOut("with(*){gc() }");
tryItOut("export __proto__;");
tryItOut("/*for..in*/for(let prop in <x/>) export *\n\nL:if((uneval(<x/>))) export *;\n");
tryItOut("L:if((*::*.unwatch(\"__noSuchMethod__\"))) { if (<x/>) {const __count__, prototype = 0;let __iterator__ = <x><y/></x>, prop;\n } else {return (function ([y]) { })();(<><x><y/></x></>); }}");
tryItOut("export * const __noSuchMethod__; const __count__;/*\n*/");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = __iterator__ =  in <y><z/></y>) /*infloop*/L:do {gc() } while(<x/>);");
tryItOut("if((uneval(prototype.(__parent__)))) gc() else  if (__iterator__: __parent__ =  /x/g .__lookupSetter__(\"__parent__\")) {let __parent__; } else {__proto__, __proto__; }/*for..in*/L:for(let prop = <x><y/></x> in window) {throw  \"\" ; }");
tryItOut("do {break L;export *; } while((__iterator__ = <x><y/></x>) && 0);");
tryItOut("if(*::*) {this }");
tryItOut("/*for..in*/for(let __count__ in __count__) __count__;");
tryItOut("prototype getter: Math.pow = prototype;");
tryItOut(" { return Math.sin } ");
tryItOut("switch(constructor = <x><y/></x>\n) { default: break;  }");
tryItOut("{yield  /x/g ; }\n__count__: *::*");
tryItOut("var __iterator__ = this << undefined;");
tryItOut("if(<><x><y/></x></>) return constructor\nexport __count__;");
tryItOut("/*infloop*/for(let __proto__; __proto__ = [window for (__noSuchMethod__ in __iterator__.prototype = __proto__)*::*]; new (<employee id=\"1\"><name>Joe</name><age>20</age></employee>)(constructor[<x><y/></x>], eval(\"'haha'.split\", *::*))\r) with({__proto__: (constructor = __iterator__ || <x/>)}){ ''  }");
tryItOut("{throw <y><z/></y>;constructor = 5.0000000000000000000000; }");
tryItOut("gc()export *;");
tryItOut("yield prop\n");
tryItOut("/*for..in*/for((this['yield']) in ((function  __proto__ () { yield (~(__iterator__)) } )(({__count__: (yield <x><y/></x>),  set __parent__()'fafafa'.replace(/a/g, this) }))))var *.__count__;");
tryItOut("let (prototype = ((p={}, (p.z = 0x99)()).@*)) { switch([].@foo) { case <><><x/></></>:  } }");
tryItOut("let (__count__, constructor) { /*for..in*/for(var [__noSuchMethod__, __iterator__] = [z1,,] in <x><y/></x>) {;export __iterator__; } } const __parent__;");
tryItOut("yield ({a2:z2}); const prototype;");
tryItOut("if((eval(\"Error(.2, window)\", <x><y/></x>.eval(__iterator__)) for (__parent__ in  /x/g  === 1e81) if (<><x><y/></x></>))) undefined; else  if (yield __iterator__.__noSuchMethod__ getter= 'haha'.split) {return; }");
tryItOut("/*infloop*/L:for((*::* &= @foo); prototype++; (prop = undefined)) {}");
tryItOut("L:with({__parent__: <x/>}){let 3.141592653589793, __iterator__ = ; }");
tryItOut("/*infloop*/do let prototype;\f while(prop);");
