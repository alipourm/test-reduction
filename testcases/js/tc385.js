tryItOut("\nbreak ;\n");
tryItOut("M:while((<x><y/></x>) && 0)continue ;");
tryItOut("switch(x::prop) { case <><x><y/></x></>: export *;break; case 9: return *;default: return;break; case null: throw <y><z/></y>;case prototype: return <><x><y/></x></>; }");
tryItOut("M:if((yield [[1]] < [[1]])\f) {export constructor; } else {return {};'haha'.split }");
tryItOut("gc()");
tryItOut("(prop) = prototype;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __proto__] = yield  /x/g  in this) {{const __count__; } }");
tryItOut("L: M:\tif(0.1) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in  /x/  = <x><y/></x>) {(-0); }");
tryItOut("gc() const constructor j ;");
tryItOut("with({}) let(__parent__, __count__) { let(prop = null, __iterator__) { return;");
tryItOut("\ngc()");
tryItOut("/*infloop*/for(let prototype; ({}); <><x><y/></x></>) break M;");
tryItOut("switch( /x/ .__defineGetter__(\"__iterator__\", [1,2,3,4].map) ^ [__proto__].*) { case 8: break; yield *::*break; (<><x><y/></x></>);case 5: /*for..in*//* nogeckoex bug 349964 */L: for  each(let ((new Function(\"'haha'.split\"))).call(1e81, <y><z/></y>) in  /* Comment */<x><y/></x>) function::__noSuchMethod__, prototypedefault: break; case (new <y><z/></y>.__iterator__ = ({a2:z2})(1e4)): /*for..in*/for(const __noSuchMethod__ = (-0) in #1=[#1#]) export prop; }");
tryItOut("with(((__iterator__)([,], function(id) { return id }).__lookupGetter__(//h\n\"__noSuchMethod__\"))){var prototype, constructor = __proto__;return; }");
tryItOut("{{} }");
tryItOut("prop = ({__proto__: __count__, prototype setter: ((1 for (x in []))).apply }), __iterator__");
tryItOut("throw __iterator__;");
tryItOut("while(([[1]].eval( /x/ )) && 0){let __parent__ = *, __proto__;var __proto__ = #3={a:#3#}; }");
tryItOut("M:switch([]) { case undefined: var __iterator__ = <><x><y/></x></>, __noSuchMethod__; }");
tryItOut("{{prototype; } }");
tryItOut("{M:if(window) {let prop = <><x><y/></x></>, prototype = <><x><y/></x></>;let __parent__ = <x><y/></x>, prototype = [1,,]; } else  if ( \"\" ) { } else {function  prototype (__iterator__, prop) { return <><x><y/></x></> }  } /x/ ; }");
tryItOut("if(<x/>) {return <x/>; } else  if ((function ([y]) { })()['prototype'] =  \"\" ) gc()");
tryItOut("with({}) return;");
tryItOut("let(__proto__, prototype) { with({}) { try { let([, __noSuchMethod__], __iterator__) { with({}) { gc() }  } catch(__proto__ if (*.eval(undefined))) { for(let y in [5,6,7,8]) with({}) export prop; } catch(x::prototype) { this.zzz.zzz; }  } ");
tryItOut("/*for..in*/for(let prop in eval(\"<><x><y/></x></>\", -0)) {M:while((true) && 0){return;throw [1]; }export *; }");
tryItOut("");
tryItOut("yield <><x><y/></x></>;");
tryItOut("let(prop = (--)) ((function(){let(__parent__ = ((p={}, (p.z = <x/>)())), __iterator__ = false) { throw StopIteration;})());");
tryItOut("with({prop: (#2=[1,,])}){/*for..in*/\tfor(<><x><y/></x></> = constructor in <><x><y/></x></>) { } }");
tryItOut("/*infloop*/while(window){; }");
tryItOut("while((eval(\"L:if() {throw window; } else return;\", *::*)) && 0)/*for..in*/for(const __iterator__ in [[__parent__] <<= __parent__ = undefined]) with({constructor: @foo})({}).hasOwnProperty");
tryItOut("(@foo);");
tryItOut("if( ) ");
tryItOut("/*infloop*/do {return <x><y/></x>;(<x><y/></x>); } while([(this.__defineSetter__(\"constructor\", (1 for (x in []))))].map(function(q) { return q; }));");
tryItOut("M:with(<><x><y/></x></>)yield <><x><y/></x></>;");
tryItOut("with({}) throw __parent__;");
tryItOut("/*for..in*/for(let (<><x><y/></x></>)(<x><y/></x>) in ((({}).hasOwnProperty)([1,,].eval( /x/ )))){export *;throw false; }");
tryItOut("{ for each (prototype in function (__iterator__) { return true } (@foo, *::*)) for ((__parent__ = prop).yoyo( /* Comment */this)['delete'] in let (constructor) (-0)) for (__count__ in window) if (false)return ((<x><y/></x>)(window, this)); }");
tryItOut("/*for..in*/for(var prototype in ( ''  ? * : <><x><y/></x></>) for each (prototype in this)) throw prototype;");
tryItOut("\fif(<x/>) {prop, __noSuchMethod__;return; }");
tryItOut("for(let y in [5,6,7,8]) yield *::*;");
tryItOut("__count__ = constructor;");
tryItOut("return (constructor) == ([[]].__noSuchMethod__) * prototype = null;");
tryItOut("(1e+81);/*infloop*/while(<x><y/></x>%=<><x><y/></x></>){return; }");
tryItOut("gc()\nbreak ;\n");
tryItOut("do yield; while((([,,z1], <>(1 for (x in []))</>)) && 0);");
tryItOut("with({}) with({}) let(__parent__ = __parent__, __noSuchMethod__ = this) { export *;");
tryItOut("M:if((<><x><y/></x></>)) { if ((((yield <x><y/></x>.yoyo( '' ))).isPrototypeOf(({prop: __count__ = __parent__ >= @foo,  get prop(__count__) {  get __parent__(prop, __proto__) { yield @foo }  }  })))) /*infloop*/for(constructor = __iterator__; <x><y/></x>; <x/>) {export *;(-1); }} else <x><y/></x>");
tryItOut("L:if( \"\" .__noSuchMethod__ = 3.141592653589793) __noSuchMethod__ else {break ;__noSuchMethod__ }");
tryItOut("let (__proto__ = ({ set __noSuchMethod__ prototype () { return __count__ }  })) { return; const __noSuchMethod__; }\n");
tryItOut("{{( \"\" );yield 1e-81; } }");
tryItOut("switch(( /* Comment */(#2=({prop: (<x><y/></x>[ '' ])})))\t) { case 3: break;  }");
tryItOut("L:with(@foo + true === (yield prototype)){/*for..in*/L:for(let __parent__ = ([<><x><y/></x></>]) in this) {throw <><x>/*\n*/<y/></x></>;yield -0; }/*for..in*/for(const __iterator__ = <x/> in undefined) {function  __noSuchMethod__ (__count__) { return this } export *; } }");
tryItOut("/*for..in*/for(var  in ((function  __parent__ ()gc())(*))){var __count__;\n(*::*);\n }");
tryItOut("export *\nyield @foo;");
tryItOut("if(({prop: <x><y/></x>, prop setter: /*\n*//a/gi })) gc() const prop; else export prop;");
tryItOut("/*infloop*/for(const ({ constructor: ({ __parent__: ({ __proto__: __noSuchMethod__ }) }), __count__: ({ delete: ({ constructor: __noSuchMethod__, prototype: prop }) }) }) = <><xxx>{prop}</xxx></>; ( /x/g )(true); eval(\"\", window)) let (__parent__) { export *; }");
tryItOut("/*for..in*/L:for(__iterator__ = (void ((eval(\"return 1e81;\", <x/*>\n<y/></x)).isPrototypeOf(0x99 + <x><y/></x>))) in <x><y/></x> , <><x><y/></x></>) {<y><z/></y>;const __noSuchMethod__ = @foo, __count__ =  /x/ ; }");
tryItOut("/*infloop*/L:for(const __noSuchMethod__ = __iterator__.prop; <><x><y/></x></>; \n<><x><y/></x></>) export __count__;");
tryItOut("(@foo);;");
tryItOut("if([15,16,17,18].sort(function(q) { return q; }, eval(\"\", (*).watch))) const prop;\nlet __noSuchMethod__;\n else  if ((this.__defineGetter__(\"__proto__\", new Function))) {{}return <y><z/></y>;__noSuchMethod__; } else switch(prototype) { case x::__count__: default: function(q) { return q; }case  '' : ;break; case 1: case 0: ;break; yield  '' ;case 5: break; case @foo: throw #1=[#1#];break; case @foo: const prop = undefined;case 7: break; case  /x/g : constructorbreak; ; }");
tryItOut("export *\n");
tryItOut("if(({__proto__: <x/>.hasOwnProperty(\"__noSuchMethod__\"),  set prototype __parent__ (__proto__) { {} }  })) {<y><z/></y>;export __iterator__; } else  if ([15,16,17,18].sort(/a/gi, true)) {Function }");
tryItOut("/*for..in*/for([__count__, prop] = <y><z/></y> in this << <x><y/></x>(prototype.__parent__-=(__iterator__ = __noSuchMethod__), (p={}, (p.z = window)()))) if((function  prop (constructor, __proto__) { gc } )()) { if (([15,16,17,18].sort(({}).hasOwnProperty, prototype)).eval(__noSuchMethod__)) } else /*for..in*/for([prototype, prototype] = 3.141592653589793 in <><x><y/></x></>) let __iterator__ =  case , constructor;");
tryItOut("/*infloop*/while(yield __noSuchMethod__ = __count__.@* if ( /* Comment */ '' ))let __iterator__, __noSuchMethod__;");
tryItOut("/*infloop*/do return; while((new prop(1.3, undefined)));");
tryItOut("if() {(*::*).__defineSetter__\n } else  if ((__iterator__)) {__count__: 1e4let prop, __count__ =  /x/ ;Function }");
tryItOut("; const __proto__;");
tryItOut("L: break ;/*for..in*/for(let constructor in <><x><y/></x></>) export prop;");
tryItOut("/*infloop*/while((<x><y/></x>.(null) ? (prototype.__defineGetter__(\"__iterator__\", <x\t><y/></x>))\n : (<><x><y/></x></>(<y><z/></y>, prototype)) < (this) !=  '' .__defineSetter__(\"__parent__\", ({}).hasOwnProperty)))/*for..in*/for([__parent__, __count__] = this.__defineSetter__(\"prop\", ({}).hasOwnProperty) in __proto__) {M:if(*) { if (5.0000000000000000000000) [1,2,3,4].map} else {export prototype;yield; } }");
tryItOut("{-1; }");
tryItOut("/*infloop*/\ffor(let __proto__; each = <y><z/></y>; <><x><y/></x></>.@*) let __proto__; const constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((\n[1]) === [15,16,17,18].filter(null, <x/>))['x::__parent__'] in <x><y/></x>.(<x/>)) {const __parent__;yield true; }");
tryItOut("switch((<x><y/></x>)(__proto__, *)) { case (({__count__: (({constructor: new __noSuchMethod__.prop = __count__(<><bbb xmlns=\"function ([y]) { }\"></bbb></>, <x><y/></x>.(<x><y/></x>)) }))\r,  set __proto__(prop)new (true.constructor = this).yoyo(*::*)() })): break; case 8: /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor.x::__parent__ in (<y><z/></y>.prop)) Functionbreak; /*for..in*/for(let [] in (((new Function(\"/*infloop*/for(@foo; @foo; this) return <><x><y\\f/></x></>;\")))(__proto__.__iterator__ = <x/> & try { <><x><y/></x></>; } catch(__proto__) { let __parent__; } ))){{}/*for..in*/for(var x::__parent__ = 'fafafa'.replace(/a/g, Function) in this) {return <x/>;[__proto__, export *;, , prototype] } }break;  }");
tryItOut("with({}) { return; } ");
tryItOut("L: {const prop, __parent__ =  /x/ ; }");
tryItOut("/*for..in*/for(__count__ = this.__defineGetter__(\"__iterator__\", (<x><y/></x>).watch) in true) yield window;");
tryItOut("{<><x><y/></x></> }");
tryItOut("L:do {while((<><x><y/></x></>) && 0){ /x/ [1,2,3,4].slice } } while((new [1,2,3,4].map(constructor.(false))) && 0);");
tryItOut("/*infloop*/M:for(const __count__; true /= <y><z/></y>.propertyIsEnumerable(\"__count__\"); __noSuchMethod__) { { yield new ((<><x><y/></x></>.hasOwnProperty(\"constructor\")) <<= (((0).__defineSetter__).call(3.141592653589793, ))) } yield; }");
tryItOut("L:with({__parent__: <x/>}){L: {break M;<x/>; }; }");
tryItOut("__iterator__ = __proto__\n");
tryItOut("if(*::*.__proto__-=(( '' ).watch).call(this.zzz.zzz, )) {yield;gc() } else {gc() }\nthis.zzz.zzz;");
tryItOut("if((0/0.prop)) { if (+({})) { } else {<><x><y/></x></>return false; }}");
tryItOut("/*for..in*/for(var prototype = [,,z1] in <x/>) {(<x><y/></x>); }");
tryItOut("L: {return; }");
tryItOut("/*for..in*/M\t:for(var [prop, __count__] = (new (<x><y/></x>).apply(this, ({}))) in <><x><y/></x></>) __parent__;");
tryItOut("with({__iterator__: <x/> -=  /x/ })gc()");
tryItOut("while(((new ([1,2,3,4].slice)(-3/0, *))) && 0){\f{} }");
tryItOut("throw (void *::*).isPrototypeOf(<y><z/></y>.isPrototypeOf(<><x><y/></x></>));");
tryItOut("with(0.1)[1,2,3,4].slice");
tryItOut("var __count__;yield");
tryItOut("while((new (null)(1e-81, <y><z/></y>).*) && 0){/*infloop*/L:while(this)function(q) { return q; } }");
tryItOut("/*for..in*/L:for(let __parent__ = new [<x><y/></x> for each (__parent__ in <y><z/></y>)].unwatch(\"__noSuchMethod__\")(@foo *= true /= <x><y/></x>, <><x><y/></x></>.isPrototypeOf( /x/g )) in  /x/ .prototype = 5.0000000000000000000000) var , __noSuchMethod__\n\n;");
tryItOut("while(((<x/>.hasOwnProperty(\"prop\"))) && 0){{@foo;gc() } }");
tryItOut("yield (p={}, (p.z =  /x/g )()).__lookupGetter__(\"__count__\").@foo;");
tryItOut("__parent__ =  /x/ ;\n\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let (yield <x><y/></x> .. 3).__noSuchMethod__ in  /* Comment */<y><z/></y>) {const prototype = (-1), __iterator__ = *::*;prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (<><x>constructor<y/></x></>)(window) in (constructor = <x><y/></x>)) {} const prop;");
tryItOut("/*infloop*/while(<x><y/></x>.isPrototypeOf(5.0000000000000000000000))continue L");
tryItOut("<x><y/></x>;");
tryItOut("L:if(constructor.prop) { if ((new RegExp((this.__defineSetter__(\"__iterator__\", function  __proto__ (__count__, constructor) { return __parent__ } ) >>>=({const __count__, constructor = this;: __count__-=({}), __iterator__ getter: [1,2,3,4].map })), (prototype = constructor = prototype)))) {{}/*infloop*/for(var constructor = []; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; window)  for (__proto__ in __proto__.(<>prop</>)) for each (constructor in ({a2:z2})) }} else yield (new (function(y) { yield y; yield;; yield y; }).call(this.__defineGetter__(\"prototype\", (function  __proto__ \f(prop)4.).call), <><x><y/></x\f></>));");
tryItOut("/*infloop*/for(0/0 :: true ? -1 : [,,z1]++.throw( /* Comment */function(id) { return id }) <= 'fafafa'.replace(/a/g, Function).prototype; (constructor.(window) *= eval(\"var __iterator__;\", 0/0)); prop.prop) {return \t<y><z/></y> * (-1);yield; }");
tryItOut("if(new <x><y/></x>(__iterator__, <y><z/></y>)) {switch(@foo) { default: if(<y><z/></y>) {continue ; } else  if (<><x><y/></x></>) {;; } else ;break;  } } else  if (try { yield 0.1; } catch(__noSuchMethod__) { yield (yield  '' ); } ) \f/*for..in*/M:for(var prop in ((function () { yield <><x><y/></x></> } )(@foo))){gc() }\n\t else __iterator__, __proto__ = -0;");
tryItOut("if(<x/>) { if (__iterator__) return constructor; else {}}");
tryItOut("if(4.) {let __iterator__ = [z1,,], __proto__; } else  if (<y><z/></y>) export *;");
tryItOut("let (__count__, __noSuchMethod__) { /*for..in*/M:for([constructor, __count__] = ( /x/ )[<><x><y/></x></>] in <x/>) {(({a1:1})); } }");
tryItOut("__noSuchMethod__ = __noSuchMethod__['__proto__'] = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in __noSuchMethod__ = <y><z/></y>(function(id) { return id })) eval");
tryItOut("with({}) { return <><bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb></>; } ");
tryItOut("if(*) { if (\fundefined) 1e+81;} else {let __proto__;(undefined); }");
tryItOut("{}");
tryItOut("let(({ prototype: <x/>, prop: __iterator__ })) { yield prototype.__defineSetter__(\"constructor\", /a/gi);");
tryItOut("/*infloop*/for(#2=({__count__: undefined}); ((*::* for each (__proto__ in [,,z1]))); [,]) {yield __iterator__; /x/ ; }");
tryItOut("try { for(let y in [5,6,7,8]) (<x><y/></x>); } catch(__iterator__) { return; } ");
tryItOut("let(__iterator__ = __noSuchMethod__ =  /x/ ) ((function(){with({}) { (#3={a:#3#}); } })());");
tryItOut("{} const __noSuchMethod__;");
tryItOut(";/*for..in*/M:for(var __iterator__ in  /x/ ) {throw *;; }");
tryItOut("with({prototype: <><x><y/></x></>})return;");
tryItOut("while(((__noSuchMethod__ = true)) && 0){let function::prototype;#1#;var function::constructor = [,,z1]; }");
tryItOut("M:switch(__iterator__ = <x/>) { default: case <><x><y/></x></>: yield __noSuchMethod__;break; var __parent__ = this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\t for  each(var __count__ in (new (([1,2,3,4].slice).call)(window)) + prop = prototype) throw StopIteration;");
tryItOut("/*for..in*/L:for(const [__count__, prop] = (typeof (<y><z/></y>.yoyo( /x/ ))) in  /x/ ()) /*infloop*/for(<x><y/></x>; <x><y/></x>; {}) gc()");
tryItOut("L:while(((yield (<x/> if (<><x><y/></x></>))\t)) && 0)let prop = <><x><y/></x></>;");
tryItOut("with({}) return;");
tryItOut("/*for..in*/M:for(let prop.__iterator__ in <x/>.__defineSetter__(\"__count__\", function  constructor (return;, __parent__) { export __count__; } ).constructor = <><x><y/></x></>.prototype) while((@foo) && 0){/*infloop*/M:for(__noSuchMethod__; <x><y/></x>; <y><z/></y>) {(__noSuchMethod__); } }");
tryItOut("with(prototype.(<><x><y/></x></>))yield *::*;");
tryItOut("with({}) { 'haha'.split } ");
tryItOut("/*infloop*/for(const __noSuchMethod__; <x><y/></x> ? this : [,,]; ({ __proto__: __parent__ }) = #2=[this]) ");
tryItOut("gc()\nreturn;");
tryItOut("while((<x/>) && 0){__count__, __parent__ = <>/a/gi(undefined, ({a2:z2}))['__count__']</>; }");
tryItOut("let(__count__, prop = <><x><y/></x></>) ((function(){try { return [[1]]; } catch(__parent__) { export prototype; } })());");
tryItOut("L: \n");
tryItOut("do /*infloop*/while(__proto__.prototype){* } while(((prototype.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map))) && 0);");
tryItOut("L:if(__noSuchMethod__ =  \"\" ) let __count__; else  if (__parent__.__noSuchMethod__ getter= ({}).__lookupGetter__.__proto__) <x/> = <x><y/></x>;");
tryItOut("if(#2=[0/0.__defineSetter__(\"prop\", <><x><y/></x></>)]) { if (*::*.yoyo(<x/>)--) {{}switch(1e4) { case <x><y/></x>: __parent__: ({})break; let __count__ = __noSuchMethod__;default: export __count__;let let, constructor = <x><y/></x>; } }} else for(let y in []);");
tryItOut("__proto__");
tryItOut("continue L;");
tryItOut("return #3={a:#3#};\nexport *;\n");
tryItOut("if(eval(\"__iterator__.__defineSetter__(\\\"setter\\\", [1,2,3,4].slice)\", {})) {let __proto__ = [[1]], function::constructor = *::*;__proto__; } else  if ((uneval(<x><y/></x>))) ; else {continue ;(window); }");
tryItOut("let constructor = [z1,,], __iterator__ = <x/>;");
tryItOut("this.zzz.zzz;");
tryItOut("switch((undefined)[ \"\" ]) { default: /*infloop*/for(let __iterator__; <y><z/></y>; { }) {export __count__; }break; case 4: export *;break; break;  }");
tryItOut("L:if(window) { if (@foo) {gc()continue ; } else {<y><z/></y>; }}");
tryItOut("if(__count__ = *.@foo) { if ((__parent__.([<y><z/></y>].sort([1,2,3,4].map)))) {[1];L: {__parent__, __proto__;let prototype, __count__; } } else {export __count__;<><x><y/></x></>yyy }}");
tryItOut("with({}) prop = prototype;");
tryItOut("/*for..in*/M:for(constructor.__parent__ in ((gc)( /x/ , __count__))) let (__count__, prop = true) { {return; } }");
tryItOut("/*infloop*/for(const __parent__; <><x><y/></x></>(<><x><y/></x></>, this); <x/>) {/*for..in*/for(var function::__parent__ = true.constructor in __iterator__) {prototype, __iterator__;yield *; } }");
tryItOut("{}");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; function  __noSuchMethod__ (__noSuchMethod__, constructor) { yield @foo } (); __iterator__.x::__noSuchMethod__) <x><y/></x>;");
tryItOut("break ;M:if((typeof <x><y/></x>)) { if (*.__lookupGetter__(\"__proto__\")) export *;} else {; }");
tryItOut("if(window) throw 3.141592653589793; else  if (this.__proto__) ; else {yield;function (__parent__) { yield; }  }\n");
tryItOut("{/*for..in*/for(const __count__ in window) var prop;yield; }");
tryItOut("const __noSuchMethod__, __parent__ = window");
tryItOut("if((<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\"))) yield; else {gc() }");
tryItOut("/*infloop*/for(var ({ prop: __iterator__, __count__: ({ function::__parent__: ({ ({ __proto__: function::__noSuchMethod__ }): __proto__, __noSuchMethod__: __count__ }), __proto__: ({ prop: ({ __parent__: prototype, __noSuchMethod__: __noSuchMethod__ }) }) }) }) = (__count__.__count__); __proto__.*; __iterator__ = (yield <x><y/></x>)) {null; }\nyield; const __iterator__;\n");
tryItOut("var prototype = <y><z/></y>, constructor\nconst __parent__;");
tryItOut("for(let y in [5,6,7,8]) yield __parent__ = *;");
tryItOut("M:if(#2=[<x><y/></x> = <><x><y/></x></>\r]) throw  /x/g ; else  if (__count__ = *) {continue ;(window); } else {export prop; }\n");
tryItOut("/*infloop*/for(__parent__; __noSuchMethod__; (<x><y/></x> ? (function ([y]) { })() : window).watch(\"prototype\", (( \"\" ).__defineSetter__)\t.call)) /*infloop*/for(let __parent__;  '' ; #1#) { }");
tryItOut("let (prototype = ( for each (constructor in @foo) if (<>\f<x><y/></x></>))) { /*infloop*/for(const __count__ =  /x/g ; [1,,]; [z1]) {(<><x><y/></x></>);constructor = undefined; }\ngc()\n }");
tryItOut("; const constructor;");
tryItOut("/*infloop*/L:while((#0=[prop] ? window.eval(<><x><y/></x></>) : (prop = <x/>).watch(\"constructor\", function(y) { yield y; throw StopIteration;; yield y; }))){(<x><y/></x>); }");
tryItOut("let (__noSuchMethod__) { const constructor, __proto__; }");
tryItOut("with( \"\" ){ /x/g ; }");
tryItOut("/*for..in*/for(var prototype in ((<><x><y/></x></>)(<y><z/></y>))){return <x/>; }");
tryItOut("/*infloop*/for(var __parent__; __count__; <y><z/></y>) <x/>;");
tryItOut("throw __noSuchMethod__;");
tryItOut("M:switch(Number( /x/g ) /= prototype = function ([y]) { }) { default: throw true;break; case 3: /*infloop*/while(__count__)\t{ } }");
tryItOut("if(*) {break M;return; } else  if (<x><y/></x>) export prototype; else {};");
tryItOut("if([1]) var __noSuchMethod__; else {yield prop; }");
tryItOut("try { gc() } catch(prototype if (function(){export __parent__;})()) { ; } ");
tryItOut("{export *; }");
tryItOut("/*infloop*/for(var [] = (*::*.__count__); __noSuchMethod__ =  \"\" ; -3/0 += <><x><y/><\f/x></>) {(<x><y/></x>).call }");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("if((yield (prototype.__noSuchMethod__ = (__noSuchMethod__)))) throw []; else  if ((eval(\"__parent__ = \", 'fafafa'.replace(/a/g, [1,2,3,4].map)))) if(prototype.(__proto__)) { if (this >>> __proto__) {break ; }} else {}");
tryItOut("if((function (__iterator__) /x/g ).call( /x/ , this, arguments)) { if (<x><y/></x>) {return prototype; } else { }}\n");
tryItOut("/*infloop*/for(var let; __proto__ = 4.; new (<><x><y/></x></>)(((p={}, (p.z = <x><y/></x>)())), undefined)) {let constructor, __proto__; }");
tryItOut("/*for..in*/for(__proto__ in ( ''  *= (function ([y]) { })())) {__iterator__ =  \"\" , prop; }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = (*::*.function::prototype).watch(\"__parent__\", function () { gc() } ); (typeof ([1].__proto__.@foo.throw(gc))); ['haha'.split]) {let (prototype) { var __noSuchMethod__ = *; }let (__parent__ = ({a1:1})) { window; } }");
tryItOut("{M:switch(__parent__ += constructor.hasOwnProperty(\"__iterator__\")) { default: export __noSuchMethod__; }/*for..in*/for(const [prop, __count__] = prototype =  \"\"  && (p={}, (p.z =  /x/ )()) in <y><z/></y>.propertyIsEnumerable(\"__iterator__\")) {yield;const prototype, prop; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in ({a2:z2})) return -0;");
tryItOut("/*infloop*/L:for(__noSuchMethod__; [[11,12,13,14].filter\t for each (__parent__ in  '' ) if (*)]; Exception(<x><y/></x> == <><x><y/></x></>.isPrototypeOf(<x><y/></x>.(<><x><y/></x></>)), prop = window)) export prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__ in this) constructor, constructor = <x><y/></x>\n");
tryItOut("gc()");
tryItOut("let(__iterator__ = <y><z/></y>) ((function(){export __count__;})());");
tryItOut("/*for..in*/for(var eval(\"this\", <x><y/></x>) in () <<= ('haha'.split)(<x><y/></x>, true)) {export *;return; }");
tryItOut("/*for..in*/for(({ __count__: prototype, __iterator__: constructor }) in (((({}).__lookupGetter__).call)(({ set __proto__ prototype (prototype) { return <y><z/></y> }  })))){/a/gi/*infloop*/M:for(var __noSuchMethod__;  /x/ ;  \"\" )  '' ; }");
tryItOut("export prototype\n");
tryItOut("/*for..in*/\nfor(__parent__ in __proto__.__count__) {__count__; }");
tryItOut("/*infloop*/M:do {yield;export *; } while(@foo.constructor);");
tryItOut("do {yield __parent__;export *; } while((true) && 0);");
tryItOut("while((__parent__ = * >= (('haha'.split)([11,12,13,14].map, <x><y/></x>))) && 0)prop = constructor;");
tryItOut("try { gc() } catch(__noSuchMethod__.prop if @foo = <x/>) { return 1.2e3; } ");
tryItOut("if(window) {export constructor;yield; } else  if (this) window;");
tryItOut("M:with('fafafa'.replace(/a/g, [,]))gc()");
