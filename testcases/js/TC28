
tryItOut("while((((function  prototype () { {} } ).call(<x/>.eval(window), false, __iterator__.__count__))) && 0)export __noSuchMethod__;");
tryItOut("M:while(((new ({}).hasOwnProperty((__noSuchMethod__++)).__proto__ = __iterator__.__count__)) && 0){/*infloop*/for(var ({ __count__: ({ prop: __noSuchMethod__, __iterator__: __count__ }), constructor: ({ __noSuchMethod__: get, prop: constructor }) }) = (<x><y/></x>\n :: <x/> || prototype); *::* <= <x/>; (new (function(y) { yield y; *::*;; yield y; }).call(function(id) { return id }))) {/a/gi0 } }");
tryItOut("break ;");
tryItOut("var __parent__ = 5.0000000000000000000000;\n{}\n\n");
tryItOut("{}");
tryItOut("M:if(#2=[(true.__defineSetter__(\"__count__\", function  __iterator__ () { yield true } )([<x><y/></x> if (<x><y/></x>)], this))]) { if (([15,16,17,18].sort(({}).hasOwnProperty, constructor)(__count__ = <x><y/></x>, 1.2e3))) {; }} else (/a/gi).apply");
tryItOut("export __noSuchMethod__;yield <x/>;");
tryItOut("if((__proto__.prop getter= ((-0)).__defineSetter__)) gc() else  if (__count__) ");
tryItOut("with({__iterator__: (Math.sin)(<x><y/></x>.eval(<y><z/></y>), <y><z/></y>)})export __noSuchMethod__;");
tryItOut("yield 0;");
tryItOut("switch(this) { case <x/>:  }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (('haha'.split)(0))){return;gc() }");
tryItOut("throw StopIteration\n\n");
tryItOut("/*infloop*/L:for(var [, , __iterator__] = (('haha'.split)(prop)); prototype.constructor = @foo; constructor) {if(arguments) gcvar __iterator__ = (__iterator__ =  \"\" ); }");
tryItOut("/*infloop*/L:for(var __count__; constructor = <><x><y/></x></>; <><bbb xmlns=\"@foo\"></bbb></>) {yield *; }/*infloop*/for(const prototype; (this[({a1:1})]).throw(new ( \"\" )(<x><y/></x>, 4.));  '' --) with({constructor: #3={a:#3#}}){export __count__; }");
tryItOut("/*infloop*/\fL:for(var [] = <> \t</>; ({__count__ getter: Math.sin }); (prop)()) for(let y in [5,6,7,8]) with({}) yield;");
tryItOut("/*for..in*/\ffor(__count__ = (<x/>.hasOwnProperty(\"__iterator__\")) in 3.141592653589793) {/*infloop*/while(this)yield; }");
tryItOut("let(yield, __noSuchMethod__) { throw prop;");
tryItOut("if((p={}, (p.z = __parent__ =  '' )())) {yield [];yield this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in  \"\" ) {return <><x><y/></x></>; }");
tryItOut("/*infloop*/for(((<x><y/></x>.__lookupGetter__(\"__parent__\")) if (this)); 033 || <><x><y/></x></>; Object(#1#.@*, <><x><y/></x></>)) .2\n");
tryItOut("throw 3;");
tryItOut("L:while(((new prototype for each (__parent__ in <x/>) <= return())) && 0)L:if(<x><y/></x>) { if (//h\n<><x><y/></x></>) __iterator__;} else {; }");
tryItOut("");
tryItOut("return *; const __count__;");
tryItOut("let(__noSuchMethod__ = false, prop) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(var prototype; this :: <>></x></>; (p={}, (p.z = this)())) let __iterator__ = <x/>, __count__ = <><x><y/></x></>;");
tryItOut("if(((p={}, (p.z = <><x><y/></x></>)()))) {return;* } else  if ((\n(prop|= /x/ ))) {/*infloop*/L:for(var __proto__ = (( /x/g )());  /x/  , __iterator__; [,]) {yield; } }");
tryItOut("if(<x><y/></x>.(this)) { if () gc() else {export *; }}");
tryItOut("switch(<><x><y/></x></>) { case undefined: const prop = *::*, __parent__;case 0/0: yield; }");
tryItOut("{yyy }");
tryItOut("\n\n");
tryItOut("gc()");
tryItOut("with({get: []})gc()");
tryItOut("/*infloop*/for(var setter; \n\f#3={a:#3#}; (new (<x><y/></x> ? <y><z/></y> : 033)(new false(), (yield []))).__parent__) {return; }");
tryItOut("if(( '' .watch(\"constructor\", gc))) {var constructor, function::__noSuchMethod__ = #1#;const constructor; } else  if (.2 ^= false) yield; else prototype = <x><y/></x>, __noSuchMethod__;");
tryItOut("{__noSuchMethod__ =  \"\" ; }");
tryItOut("return (__iterator__ = true).unwatch(\"__parent__\");");
tryItOut("evalprop;");
tryItOut("this;");
tryItOut("with( \"\" )return #3={a:#3#};");
tryItOut("/*infloop*/for(({}) for (prototype in <><x><y/></x></>); false; __proto__ = window) return 1e+81;");
tryItOut("switch(__parent__ = 4.) { default: yield;break;  }");
tryItOut("for(let y in [5,6,7,8]) with({}) for(let y in [5,6,7,8]) let(__iterator__ = prop--, prototype = null) { throw <x><y/></x>;");
tryItOut("export *;(window);\nexport *;\n");
tryItOut("if(Exception(__noSuchMethod__, false)) throw __proto__; else (__iterator__);yield  \"\" ;");
tryItOut("/*infloop*/for(const __parent__ = <y><z/></y>; (-1); @foo) {continue M; }");
tryItOut("/*for..in*/L:for(var prop = this.__defineGetter__(\"__parent__\", Function)(({})) in <x/> >> ({a1:1})) {while((new __parent__([]) for each (prop in window) for each (__count__ in <x><y/></x>)) && 0)\t{break ; } }");
tryItOut("((-<><x><y/></x></>));");
tryItOut("throw @foo;");
tryItOut("return;");
tryItOut("1e4;");
tryItOut("return __iterator__ = __noSuchMethod__;\n033\n");
tryItOut("for(let y in [5,6,7,8]) let(prop) ((function(){return;})());");
tryItOut("if( /x/g ) /*infloop*/L:while(RegExp() !== (this.__defineGetter__(\"__iterator__\", [1,2,3,4].slice))){throw <> for (((constructor)\n)(constructor += __noSuchMethod__-=this) in constructor = null) if (__noSuchMethod__)</>;M:with({__parent__: <x><y/></x>}) } else  if (this.__defineSetter__(\"__proto__\", [1,2,3,4].map)) {/*for..in*/M:for(var [__proto__, __proto__] = new __proto__ = <x/>((<><x><y/></x></>.__defineSetter__(\"__iterator__\", (<x/>).__defineSetter__)), <x><y/></x>) in <x/>) const __iterator__; const __noSuchMethod__;/*infloop*/for(<><zzz>(__proto__.__noSuchMethod__ = [,])</zzz></>; window ? (__noSuchMethod__) : [window for ({export __parent__; } in window)]; (<y><z/></y>.watch(\"__noSuchMethod__\", ( '' )()))) { } } else {yield = (eval(\"throw <y><z/></y>;\", <><x><y/></x></>)), __noSuchMethod__;if(constructor) \n({}); }");
tryItOut("/*infloop*/while(yield <><zzz>(let (__noSuchMethod__, __noSuchMethod__) undefined)</zzz></>){gc()(this.__defineSetter__(\"__noSuchMethod__\", function (prop) { yield <y><z/></y> } )); }");
tryItOut("M:do gc() while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/M:for(var __parent__; (true.*); <x><y/></x>.unwatch(\"__iterator__\")) { }\n");
tryItOut("/*infloop*/for(__parent__; <><xxx {prop}={([[]])} /></>; (uneval(new ([,,z1]).apply( /x/ )))) return;");
tryItOut("M:with((this.__defineGetter__(\"__count__\", Function))){continue ; }\nprop: new  /x/g ()");
tryItOut("new Function");
tryItOut("{gc()yield <x/>; }");
tryItOut("with({__iterator__: __count__}){(new Function(\"return;\"))let __parent__ = {}, __iterator__ = __parent__; }");
tryItOut("var __noSuchMethod__\n");
tryItOut("gc()");
tryItOut("this.zzz.zzz;");
tryItOut("let (constructor = __parent__, <><ccc:ddd></ccc:ddd></>) {  }");
tryItOut("/*infloop*/M:for(let __parent__; this || <><x><y/></x></>; \tthis.__defineSetter__(\"__proto__\", <><x><y/></x></>)) export __iterator__;");
tryItOut("/*for..in*/for(const __count__ = <x><y/></x> in function ([y]) { }) yield <x><y/></x>;");
tryItOut("/*for..in*/for(var __parent__ in (((1 for (x in [])))(yield <><x><y/></x></>))){{} }{let constructor = @foo; }");
tryItOut("/*infloop*/for(const [] =  /* Comment */0/0 / <x><y/></x>; ( \"\"  for each (__iterator__ in  '' )); (( /x/g  / ({a2:z2})\f)[@foo])) export constructor;");
tryItOut("(<><x><y/></x></>);yield;");
tryItOut("if(Error(constructor)) { if ((yield *)) {5.0000000000000000000000;yield null; }} else {throw prototype; }");
tryItOut("let (prototype) { M:switch([z1,,]) { default: break; null;break;  } }");
tryItOut("__noSuchMethod__, __count__ = 0.1;gc()\nreturn;\n");
tryItOut("M:do {yield;\nFunction\n; } while(([1,2,3,4].map) && 0);");
tryItOut("L: ");
tryItOut("if(([z1,,] <<= <><x><y/></x></>(<x><y/></x>.*)) <= -3/0) { if (* /= (delete \n<><x><y/></x></> ? new ('haha'.split)(let (__count__ = .2) __noSuchMethod__, __proto__) : eval(\"__iterator__\\t.__proto__ = null\", <y><z/></y>\n))) let __count__;} else let (__parent__ = constructor = function(id) { return id }, prop = this.__defineSetter__(\"__count__\",  \"\" )) { L: if(<x><y/></x>) {eval } else {function  __parent__ (__count__, prop) { yield undefined } __proto__ = window, __iterator__; } }");
tryItOut("with((({__iterator__ getter: ({}).hasOwnProperty, prop setter: 'haha'.split }))){(<><x><y/></x></>);{} }");
tryItOut("return");
tryItOut("let (__parent__ = [,]) { /*for..in*/for(var constructor in ((*)(0.1)))yield; }M:with(prototype)return this;");
tryItOut("L: {function ([y]) { };/*infloop*/for(new <x><y/></x>(, <><x><y/></x></>); undefined.isPrototypeOf(1.2e3); <x><y/></x>.__lookupGetter__(\"__iterator__\")) {return;yield; } }");
tryItOut("let (__iterator__, prop = this) { export prop; }");
tryItOut("if(\f@foo.@foo) { if (<x><y/></x> ^ __count__) throw @foo; else {function(y) { yield y; export *;; yield y; } }}");
tryItOut("with((gc).call(<><x><y/></x></>, ))/*infloop*/L:for(var  = #1#; -3/0; window) {const __proto__, constructor;; }");
tryItOut("export *;");
tryItOut("(window)\nvar __proto__ = *, constructor;");
tryItOut("/*for..in*/for(var (__proto__) in ((({}).__lookupGetter__)(__parent__-=1.2e3)))<x><y/\f></x>;");
tryItOut("let(__noSuchMethod__, prop) { for(let y in [5,6,7,8]) var __proto__, __parent__ = window;");
tryItOut("L:if(({}).__lookupGetter__() else  if (prototype #1= \"\"  % <y><z/></y>++) {export __parent__;<y><z/></y>; } else {__count__, __parent__;; }");
tryItOut("if((<y><z/></y>.prototype)) yield; else  if ((prop.prototype)) do yield 0x99; while((<x><y/></x>) && 0); else let (__noSuchMethod__) { yield; }");
tryItOut("try {  } catch(constructor if (function(){var prop =  '' ;})()) { break ; } catch(constructor if (function(){{-3/0;export prop; }})()) { ; } finally { yield *::*; } ");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("do ; while((eval(\"<x/>\\n\", )) && 0);");
tryItOut("let (__noSuchMethod__ = <x/>) { /*infloop*/for(const __count__ = <><x><y/></x></>; <y><z/></y>; <x/>) { \"\"  } }\n");
tryItOut("window;");
tryItOut("{if(__noSuchMethod__ = <y><z/></y>) { if (this in -1) {throw @foo;(<y><z/></y>); }} else yield; }");
tryItOut("for(let y in [5,6,7,8]) return <>(new <><x><y/></x></>(window, window))</>;");
tryItOut("if((-1)) {return #1=[#1#]; } else  if (function::__noSuchMethod__) {var __noSuchMethod__ = <y><z/></y>;export *; } else __noSuchMethod__: (( '' )(#1=[#1#], <y><z/></y>))");
tryItOut("with({}) { var __parent__; } ");
tryItOut("/*infloop*/for(([,]); this; <bbb xmlns=\"window\"><ccc:ddd><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></ccc:ddd></bbb> >> let (constructor) #1=[#1#].__defineSetter__(\"__proto__\",  \"\" )) {\f(new 4.()); }");
tryItOut("M:do {<x><y/></x>; } while((( /* Comment */<x><y/></x>)) && 0);");
tryItOut("if(false != __iterator__) let constructor = false; else  if () {(<y><z/></y>);(<><x><y/></x></>); }");
tryItOut("while(( /x/ .unwatch(\"__noSuchMethod__\")) && 0){function  __proto__ (constructor, __proto__) { yield [,,z1] } var __iterator__, __noSuchMethod__; }");
tryItOut("/a/gi\nexport let;\n");
tryItOut("if((this.zzz.zzz)) return; else export *;");
tryItOut("/*for..in*/for(const constructor in window) throw <y><z/></y>;");
tryItOut("/*infloop*/while((__proto__)){;do var __count__; while((<><x><y/></x></>) && 0); }");
tryItOut("/*for..in*/for(let prop in (([1,2,3,4].slice)(3/0)))gc()");
tryItOut("prop;\nthrow <x/>;\n");
tryItOut("/*infloop*/for(((__count__)[({ constructor: __proto__, __iterator__: prop })]); *::*.__defineGetter__(\"prototype\", Math.sin).watch(\"__iterator__\", ({}).__lookupGetter__) * [, ({ __noSuchMethod__: __iterator__ }), ] = (@foo()).throw((function(id) { return id } *= ({a2:z2}))); !this) switch(window) { default:  }");
tryItOut("L: {let __iterator__; }");
tryItOut("{throw 033; }");
tryItOut("/*for..in*/L:for(var __count__ in ((({}).hasOwnProperty)(new [1,2,3,4].map(<x><y/></x>, __iterator__)))){yield; }\n");
tryItOut("/*infloop*/while(<x/>){const __proto__ =  /x/g ;yield <><x><y/></x></>\n }");
tryItOut("L:if((this)[window]) {/*infloop*/while(function(id) { return id }){let __noSuchMethod__, __count__ = __noSuchMethod__; } } else {eval }");
tryItOut("/*infloop*/for(0x99; <y><z/></y> | this; <x><y/></x>.(<><x><y/></x></>)) __noSuchMethod__, constructor;");
tryItOut("\nswitch(4.) { default:  }");
tryItOut("/*infloop*/L:for(window;  '' ; this) {(({a2:z2})); }");
tryItOut("function::prototype = __noSuchMethod__;");
tryItOut("/*for..in*/ <x><y/></x>forconst '[__count__, __count__] = break ;[z1,,] in 4.)  prototype{let __proto__;yield arguments; }");
tryItOut("L:do {continue ;export *; } while((@foo) && 0);");
tryItOut("[1]");
tryItOut("this.__defineGetter__(\"__count__\", Math.pow)\nfunction(q) { return q; }");
tryItOut("do if() return  \"\" ; while((({ __parent__: 5.0000000000000000000000, prop: __proto__ }) = (__count__.(<y><z/></y>))) && 0);");
tryItOut("if(new ([1,2,3,4].map)(constructor++, (constructor.__lookupSetter__(\"__parent__\")))) {return; } else  if ( /* Comment */#0=({__noSuchMethod__: *::*})) \r{throw <y><z/></y>; }");
tryItOut("L:switch(__parent__ = *::*) { case 4: break; default: [], __iterator__break; return;break; break; case <><x><y/></x></> -= 0/0: export __noSuchMethod__; }");
tryItOut("with(__iterator__ = this)export *;");
tryItOut("/*for..in*/for(let __parent__ in ((([1,2,3,4].slice).apply)(this))){return;let __iterator__; }");
tryItOut("((3/0).apply).call");
tryItOut("return <y><z/></y>\n");
tryItOut("/*infloop*/for([, , , ({ constructor: [], constructor: ({ prop: __iterator__, constructor: __parent__ }) }), ({ function::constructor: return;, __noSuchMethod__: [prototype] })] = undefined ? this : function ([y]) { } @ ((<><x><y/></x></>)); ; (Iterator() = (({ set prop __parent__ (const prop = [z1];) { yield <y><z/></y> } , __iterator__:  ''  })))) {export getter;{} }");
tryItOut("/*infloop*/L:for(({ __count__: <x><y/></x>, __proto__: __parent__ }) =  /x/ ; ((p={}, (p.z = window)())); eval(\"yield <x><y/></x>;\", <x/>)) {constructor;const prototype; }");
tryItOut("if((let (delete = window, __parent__ = 1e+81)  /x/g )) gc() else  if (033 ? <><x><y/></x></> : 033 , <x/>) /*infloop*/while(<y><z/></y>){var prop = <><x><y/></x></>;continue ; } else ");
tryItOut("switch(<ccc:ddd><ccc:ddd>yyy</ccc:ddd>\t</ccc:ddd> += <x><y/></x>\n / [((false).call(new RegExp([z1,,]), __iterator__.__lookupSetter__(\"__proto__\"),  \"\" )) for each (prototype in 1e-81) for each (__proto__ in  '' ) for (__count__ in <x><y/></x>)]) { case (__proto__.getter.unwatch(\"prop\")): case 8: switch(__count__ = <x><y/></x>) { case 033 ? undefined : [[1]]:  }case 8: break; case <><{__noSuchMethod__}> </{__noSuchMethod__}></>: break; default: /*for..in*/L:for(var [__parent__, __noSuchMethod__] = ((p={}, (p.z = __proto__ = false)())) in 1e+81) { }break; case this :: this.__defineSetter__(\"__count__\", function(y) { yield y; var prototype, __count__ = <y><z/></y>;; yield y; }).prop: {const prototype = window, prototype; }break; if(<x><y/></x>) let __noSuchMethod__; else  if (<y><z/></y>) {break L; }break; break; case 5: break; case 1:  }");
tryItOut("return;");
tryItOut("/*infloop*/do {{}export __proto__; } while((uneval((-1))));");
tryItOut("/*for..in*/for(const __iterator__ in ((null)(<x><y/></x>.propertyIsEnumerable(\"prototype\"))))yield;");
tryItOut("with(window)with(*::*.__iterator__){export *; }");
tryItOut("L:do return; while((__count__) && 0)\n");
tryItOut("/*for..in*/for(const [__count__, __parent__] = <xxx {__iterator__}={null} />.([1,2,3,4].map) in __parent__ = (*::*.eval(<x><y/></x>)) == true) {(new Function(\"constructor, ;\"));if(__iterator__) { if (([true].map(((-1)).__defineSetter__))) \f{ } else {yield; }} }");
tryItOut("do {if(undefined &= <x/>) { if ([[]].__lookupSetter__(\"__noSuchMethod__\")) {} else {gc() }} } while((((__iterator__)(('fafafa'.replace(/a/g, ({}).__lookupGetter__)), true))) && 0);");
tryItOut("L:switch(let (prop) (true .@x:: __noSuchMethod__.__parent__)(new Iterator(*).yoyo(__count__.__parent__ = <><x><y/></x></>))) { case 5: do 1.3 while((<x><y/></x>) && 0);break; case 5: throw <x><y/></x>;\nexport *;\ncase 1: /*infloop*/M:for(undefined; new ((function ([y]) { })())(); (({__noSuchMethod__: this.__lookupGetter__(\"prototype\")}))) {L: yield <x/>; }{/*for..in*/L:for(let __iterator__ = <x><y/></x> in true) prop, __iterator__ = -1;prototype = <x><y/>\f</x>; }default: if(( \"\" )[*::*]) {; }break; break; case 5: throw window;break;  }");
tryItOut("{}");
tryItOut("export __iterator__;\n(<\fx><y/></x>);\n");
tryItOut("if((new 'haha'.split(0/0, <y><z/></y>))) {throw true;{} } else ");
tryItOut("{return\nreturn <><x><y/></x></>; }");
tryItOut("{} const __count__;");
tryItOut("while((window == <><x><y/></x></>) && 0)export *;");
tryItOut("continue ;");
tryItOut("/*for..in*/for(var __count__ = (!new Error(<x><y/></x>.throw(<x><y/></x>), prop)) in \n__proto__) return <x><y/></x>;");
tryItOut("throw StopIteration;");
tryItOut("if((p={}, (p.z = <x/>)())) { if ((this ^ __count__.unwatch(\"prop\"))) gc() else {}}");
tryItOut("with(new new (<x/>)(this, <y><z/></y>)([11,12,13,14].sort, void this)){if(constructor) { if ((function ([y]) { })()) { /x/ ; } else {{}; }\t}if(*::*) {prototype } }");
tryItOut("with({__iterator__:  /x/ })export constructor;");
tryItOut("break ;let (prototype = ((yield __noSuchMethod__.constructor))) { /*infloop*/for(const constructor; __count__ = __noSuchMethod__--; __parent__ = this) {<x/>__noSuchMethod__ =  \"\" , __parent__; } }");
tryItOut("if((__noSuchMethod__ = [1].hasOwnProperty()\"__noSuchMethod__\")) {gc() } else {with({prototype: }){yield; } }");
tryItOut("/*for..in*/for([prop, prop] = <x><y/></x> in null) constructor = true;");
tryItOut("return (Math.sin).call(*, 1e81, <x/>);");
tryItOut("return;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = window in __noSuchMethod__.watch(\"__count__\", <><x><y/></x></>.eval(<y><z/></y>))) {switch(<><x><y/></x></>.__noSuchMethod__) { case /*\n*/( '' )(false,  \"\" ): export __count__;break; case 5:  }if(<><x><y/></x></>) {deletethrow constructor; }\r else  /x/g  } const __proto__;");
tryItOut("/*for..in*/for(var __iterator__ = ({ set prop __proto__ (__noSuchMethod__) { yield ((function  prop () { throw 3; } ).call\f(<><x><y/></x></> >> window += <><x><y/></x></> ^= undefined, new ((({a1:1}) += @foo.__lookupGetter__(\"__proto__\")))(0.1.propertyIsEnumerable(\"constructor\"), __noSuchMethod__ =  /x/ ))) } ,  get __proto__(prop) { return (p={}, (p.z = <y><z/></y>)()) }  }) in __parent__.((null\n))) {/*for..in*/for(let __iterator__.__proto__ in <><x><y/></x></>) yield; }");
tryItOut("with(prototype.((@foo for each (prototype in this)).__lookupGetter__(\"__parent__\")))yield 1.2e3;");
tryItOut("\nlet (__count__, constructor) { (*); }");
tryItOut("with({__noSuchMethod__: new ((Function).call)(__count__, __count__)}){return <><x>\t<y/></x></>;return <x><y/></x>; }");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("{M:while(([#2=[prototype]]) && 0)throw (-1); }");
tryItOut("if(function ([y]) { } -=  { yield 0/0 } ) {{}\n } else const prop\n");
tryItOut("{}\n");
tryItOut("if(<x><y/></x>\n) { if (prototype) {M:do let __noSuchMethod__ =  '' ; while(([(x::__proto__: yield;.@*) if (1.2e3)]) && 0); }} else {with((<><x><y/></x></>.eval(prototype))){/*for..in*/for(let __proto__ in ((eval)(@foo))){(<><x><y/></x></>); } }throw false; }");
tryItOut("return;");
tryItOut("switch((prop = *)) { case (__proto__ =  /x/g ) @ prop.yoyo( /x/ ): break; case ((window)[undefined])((({prototype: <><x><y/></x></> })), <x><y/></x>): if((__iterator__ = 5.0000000000000000000000)) { if (<x><y/>\n</x>) {{} } else  /x/ } }");
tryItOut("\n{}");
tryItOut("{}");
tryItOut("if(new ((({}).hasOwnProperty).apply)()) export set\nif(__iterator__) return; else {;let __noSuchMethod__; }\n else  if (new RegExp()) {default: var <>*</> = new <><x><y/></x></>(@foo), __noSuchMethod__;case 7: const __noSuchMethod__ = , __iterator__ =  /x/ ;break; case 8: break; case [11,12,13,14].filter: break; yield <><x><y/></x></>;break; case <x><y/></x>: break; ; } else {}");
tryItOut("/*infloop*/while(new 'haha'.split(@foo, undefined)){gc()__noSuchMethod__ = <y><z/></y>; }");
tryItOut("__count__ = __parent__");
tryItOut("let (__parent__) { {} }");
tryItOut("{throw __iterator__;return; }");
tryItOut("with((p={}, (p.z = \tlet (constructor = <x/>) null)())){export __count__; }");
tryItOut("throw StopIteration;");
tryItOut("let (({ __count__: __iterator__, prototype: constructor }) = ([[1]]).__defineSetter__, __parent__) { gc() }");
tryItOut("let (__proto__) { L: {continue L; } }\f");
tryItOut("/*for..in*/for([constructor, prop] = Number(<x/>) in 1e81) new Function");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <!--yy--> in undefined) {prop; }");
tryItOut("return this.__defineGetter__(\"__parent__\", function(y) { yield y; export *;; yield y; })");
tryItOut("if(this.__defineGetter__(\"prop\", function(q) { return q; })) {yield; } else <x/>");
tryItOut("M:with(this)let (prototype, prototype) { return ; }");
tryItOut("with(<y><z/></y>)return;/*for..in*/L:for(const [prop, prop] = <><x><y/\f></x></> in 1e-81) {; }");
tryItOut("with([,,z1]){break L\t;export \n*; }");
tryItOut("(*).apply\n\nthis.zzz.zzz;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__iterator__ in __iterator__) __iterator__;");
tryItOut("with(new -1 - null((__proto__ =  '' ) <= __parent__.__count__,  /x/ \f .@*:: undefined)){let *, __noSuchMethod__ = <x/>; }");
tryItOut("throw __parent__;");
tryItOut("yield __proto__\n/*infloop*/+");
tryItOut("M:if((window , 1e4)) while((__parent__) && 0)let __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in [15,16,17,18].sort(eval, (Exception()))) { \"\" ;yield; }\n");
tryItOut("{ }");
tryItOut("if(new window) {<><x><y/></x></>\n/*for..in*/for(const __noSuchMethod__ in ((<y><z/></y>)(<><x><y/>\t</x></>)))break ;/*for..in*/L:for(let [__parent__, __iterator__] = <y><z/></y> in constructor) {(<><x><y/></x></>); } } else let constructor, __iterator__;");
