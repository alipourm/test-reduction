tryItOut("throw StopIteration;");
tryItOut("export *\nreturn <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __count__ in (((new Function(\"throw [,,z1];\")))(__proto__.__proto__ = @foo))){yield;yield <x/>; }");
tryItOut("if(<xxx {__noSuchMethod__}={(this |= false)} />.isPrototypeOf((0x99.eval(undefined)))) __parent__ = <x/>; else {return [[]];return <><x><y/></x></>; }");
tryItOut("{;* }");
tryItOut("\nif( \"\" )  else  if (this) return; else {{}{} }");
tryItOut("yield <x/>");
tryItOut("/*infloop*/for(let prototype = (-0); *::*; *) \n");
tryItOut("break ;__noSuchMethod__\n");
tryItOut("L:while((\tconstructor = constructor.__defineSetter__(\"prototype\", (<x/>\t).__defineSetter__)) && 0){while((<y><z/></y>.__defineSetter__(\"prototype\", Math.sin)) && 0){return function ([y]) { };{} }{ '' ;yield; } }");
tryItOut("if(eval(\"continue ;\", __iterator__ = get)) var <x><y/></x>; else export *;");
tryItOut("gc()");
tryItOut("return this\ngc()");
tryItOut("{var __count__ = prototype, __proto__; }");
tryItOut("return;");
tryItOut("export constructor;");
tryItOut("__proto__ = __count__;");
tryItOut("if(<x/> + __noSuchMethod__.*.watch(\"__proto__\", gc)) /*infloop*/for(5.0000000000000000000000; *::*; <x/>) {return <><x><y/></x></>; } else  if (__iterator__.prototype) {return; } else throw <y><z/></y> && prop;");
tryItOut("/*for..in*/for(var prop = prop | delete  /x/  in 'fafafa'.replace(/a/g, (function  __parent__ () { <x><y/></x> } ).call)) {;//h\n }");
tryItOut("if(((Math.sin)(<y><z/></y>))) {__iterator__ = null; }");
tryItOut("/*for..in*/for(let {return #3={a:#3#}; } in <x/>) {return; }");
tryItOut("/*for..in*/M:for([prototype, __noSuchMethod__] = (-0) in (<x/> ? prop :  \"\" ).__count__ = (<x><y/></x> > [[1]])) {yield prototype; }");
tryItOut("\nwith({__parent__: undefined}){(<x><y/></x>); }");
tryItOut("\nconst __iterator__, constructor;\n");
tryItOut("/*for..in*/M:for(let prop in ((Math.sin)((this.__defineSetter__(\"prototype\", Math.sin)).throw((prototype = <><x><y/></x></>))))){let __parent__, __iterator__;return this; }");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", Math.pow)) /*infloop*/for(constructor; (<x><y/></x>.valueOf(\"number\")); __proto__.prop =  '' )  else  if ((<x/> if (<x><y/></x>))) {return;export __noSuchMethod__; }");
tryItOut("return;");
tryItOut("/*for..in*/for(let [[1]].yoyo( '' ).prototype in ((Math.sin)(-__parent__ -= __count__.hasOwnProperty(\"__iterator__\")))){for(let y in [5,6,7,8]) let __parent__;export *; }");
tryItOut("/*for..in*/for(let prop = (window) in (function ([y]) { })()) export *;");
tryItOut("/*infloop*/while((({ __proto__: __count__, __proto__: constructor }) = function::prop|=this.__defineGetter__(\"__count__\", function (prototype)__proto__)))export *;");
tryItOut("if({}) return <x><y/></x>;");
tryItOut("/*infloop*/do L:do  while((undefined) && 0); while(<x><y/></x>\n);");
tryItOut("if(1e+81[<x><y/></x>]) {{} } else  if (constructor) {{} }");
tryItOut("return\n");
tryItOut("/*infloop*/for(prop; this; window <<  /x/g ) export null;");
tryItOut("with({__iterator__: undefined})#3={a:#3#};");
tryItOut("/*for..in*/for(let prop = __iterator__ | false.__lookupSetter__(\"__count__\") in (eval(\"gc()\", <><x><y/></x></>))) {/*infloop*/L:for(let __parent__; this; (-0)) {}export prototype\n }");
tryItOut("break ;/*for..in*/for(var __iterator__ = new (eval(\"export __iterator__;\", <x><y/></x>)) || (*.throw(<><x><y/></x></>))() in \n /x/g ) {with({__noSuchMethod__: #1#})yield; }");
tryItOut("/*for..in*/L:for(let constructor = new ((__iterator__.((({__noSuchMethod__: this.__count__ })))))() in Number()) gc() const __count__\n");
tryItOut("/*for..in*/for(let  in ((((uneval(3/0))))(new true(true)))){yield; }");
tryItOut("let (constructor, __noSuchMethod__) { L: {({});{} } }");
tryItOut("/*infloop*/M:do {;if( '' .watch(\"__noSuchMethod__\", function  constructor () { yield (-1) } )) {gc()let __noSuchMethod__; } else {export prop;const __proto__ = window; } } while(( \"\" .hasOwnProperty(\"__iterator__\")).unwatch(\"__count__\"));");
tryItOut(";");
tryItOut("yield  '' ");
tryItOut("{}");
tryItOut("switch(! super ) { case  /* Comment */<x><y/></x>: break; case false if (<x/>): throw <><x><\fy/></x></>;break;  }");
tryItOut("M:if(prototype) {} else  if (@foo) (<x/>);");
tryItOut("let (__count__ = (eval(\"(uneval(#3={a:#3#}))\", window /  |= * *= this))) { if(<><x><y/></x></>) {return \t '' ; } else {gc()yield function(id) { return id }; } }");
tryItOut("with({__iterator__: ('fafafa'.replace(/a/g, (<x/>).watch))})prototype = (p={}, (p.z =  /x/g )()), constructor;");
tryItOut("L:with({({ x::__proto__: prop }): null}){\fdo {/*for..in*/for(const <x><y/></x> in *) {}; } while((new Array(__iterator__[prototype])((<><x>\f<y/></x></> ^ this) %= constructor.throw(<x><y/></x>) &= <y><z/></y>, ('fafafa'.replace(/a/g, new Function)))) && 0); }");
tryItOut("with((return  \"\" .throw(-@foo)))(this);");
tryItOut("with(<><x><y/></x></>.__lookupSetter__(\"constructor\")){let prototype; }let __noSuchMethod__, __parent__ =  /x/ ;\nconst __count__, prop = <x/>;\n\n");
tryItOut("L:if([z1,,].eval(<x/>)) { if ([z1,,][<><x><y/></x></>]) (<x><y/></x>);} else { }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(prop =  /x/g  in null) throw <x><y/></x>;\n{switch(<//h\nx><y/></x>) { case [1,,]: gc() } }\n");
tryItOut("{throw 5.0000000000000000000000; }");
tryItOut("if(*.yoyo(prop.prop)) {yield; } else  if (yield prototype.unwatch(\"__iterator__\")) __noSuchMethod__ else export *;");
tryItOut("L:do {return; } while((prop = 1.3) && 0);");
tryItOut("do {; } while((((/a/gi).call((({constructor: __iterator__})),  { return 033 }  & 3.141592653589793, @foo))) && 0);");
tryItOut("/*for..in*/for(const [__proto__, __proto__] = (({__count__: true})) in <x><y/></x>) null;");
tryItOut("constructor = __proto__\nreturn __iterator__ = <x/>;");
tryItOut("const __noSuchMethod__, __noSuchMethod__;\nswitch((window % <><x><y/></x></>) ? (new (_)(*)) : (new Iterator(<x/>))) { default: case this.unwatch(\"__parent__\"): true;var __noSuchMethod__ = <x><y/></x>, __iterator__ = *::*;break;  }\n");
tryItOut("let (let = (<y><z/></y> if ( /x/ )), __noSuchMethod__) { var __noSuchMethod__ = <><x><y/></x></>, prop = 0x99; }\nlet (prototype, x::__parent__) { throw <x/>; }\n");
tryItOut("/*infloop*/M:do ; while(<><x><y/></x></>);");
tryItOut("let(__parent__ = (yield)) { let(*::*.prop) { throw __count__;");
tryItOut("const prototype = <><x><y/></x></>, constructor =  /x/ ;");
tryItOut("return <><x><y/></x></>;");
tryItOut("with({constructor: ((yield (({}).__lookupGetter__))).__defineGetter__(\"__proto__\", (({prop:  /x/ , prop: <><x><y/></x></> })).__lookupSetter__(\"__count__\"))})if( /x/ ) ; else  if ([1]) export prop; else {( '' ); }");
tryItOut("{if(033) { if ((-0)) { } else ;}/*for..in*/for([__parent__, prop] = window in true) {<x><y/></x>;var __parent__ = <><x><y/></x></>; } }");
tryItOut("\fwith({prototype: __iterator__})export *;");
tryItOut("/*infloop*/for(let __iterator__ = <y><z/></y>.prop = \n { return  '' ; } ; __count__.([z1]) && this.__defineGetter__(\"__parent__\", [z1]); ~__parent__) {break M;return; }");
tryItOut("\n");
tryItOut("if(<bbb xmlns:ccc=\"new (function(y) { yield y; throw  '' ;; yield y; })()\"><ccc:eee></ccc:eee></bbb>) {return;var __parent__, constructor = <y><z/></y>; }");
tryItOut("L:switch(0/0) { default: const constructor =  /x/ , prop = *;break;  }");
tryItOut("if(new (3/0)(<x/>, <y><z/></y>)) break ; else  if (RegExp()) {continue M; } else eval");
tryItOut("if(prop: <zzz>({__noSuchMethod__:  /* Comment */ ''  ?  /x/g  : 033, yield:  @ prop = <x/> })</zzz> ? (__iterator__.prop = new (function(y) { yield y; yield;; yield y; }).apply(__count__)) : ((yield null.yoyo((__iterator__ = window))).constructor)) {{}export *; } else  if (__parent__.(prop = __count__)) /*for..in*/for(let prop(<y><z/></y>) in @foo) {gc()<><x><y/></x></> }");
tryItOut("L:if([z1,,] ^=  '' ) ([z1]); else  if (#0=<y><z/></y>) yield;");
tryItOut("/*for..in*/for(var __proto__ = ( /* Comment */<x><y/></x> if (<x><y/></x>).yoyo(((--<y><z/></y>).unwatch(\"__parent__\")))) in [[]]) yield constructor;");
tryItOut("try { yield 3 .@x:: <><x><y/></x></>; } catch(function::prop) { try { *::*; } catch(__proto__) { yield <><x><y/></x></>; } finally { const __count__ =  '' , set = 3; }  } finally { for(let y in []); } ");
tryItOut("/*for..in*/for(const prop = this in new (null ? * : <><x><y/></x></>)()) yield;");
tryItOut("return");
tryItOut("function(q) { return q; }\nlet __proto__, __proto__ = *;\n");
tryItOut("/*infloop*/for(const __parent__; <y><z/></y>; [1]) return;");
tryItOut("arguments;\n;\n const prop;");
tryItOut("/*for..in*/for(({ __proto__(<x><y/></x>): [], __noSuchMethod__: ({ __parent__: __count__ }) }) in ((function ()__count__)('fafafa'.replace(/a/g, 'haha'.split))))if([window])  for (function(id) { return id } in __proto__) for each (__count__ in setter) for each (__noSuchMethod__ in 3)");
tryItOut("\f{\n/*for..in*/for(const __count__ = ([11,12,13,14].some) in true) { } }");
tryItOut("with({__count__: (this.zzz.zzz)})throw window;");
tryItOut("M:if([z1] *= window for each ([__parent__] in __count__) if (3)) { if (<x/>) {return <x><\fy/></x>; }} else const prototype, prop;");
tryItOut("/*infloop*/for(__iterator__.constructor; __iterator__ = <><x><y/></x></>; [z1] -= <x><y/></x>) {return window; } const __proto__;");
tryItOut("{export __count__;export __proto__; }");
tryItOut("/*infloop*/do -3/0; while((@foo -= setter if (undefined)));");
tryItOut("/*infloop*/while(this)[,,z1];");
tryItOut("{const __proto__; }");
tryItOut("try { return; } \fcatch(__parent__ if (function(){throw StopIteration;})()) { throw prototype; } catch(__proto__ if ({__count__, __iterator__, __proto__: __noSuchMethod__ })) { with({}) gc() } finally { constructor = getter; } ");
tryItOut("const prop;");
tryItOut("if((yield eval(\"yield;export __noSuchMethod__;\", ({ set __iterator__(constructor) { return; } ,  get __proto__ prototype (__proto__, prototype) { return <x><y/></x> }  })))) {yield;/*for..in*/L:for(let get in true) {throw __parent__; } } else return;");
tryItOut("while((033) && 0)export __iterator__;");
tryItOut("if(arguments) yield undefined;\nconst __parent__;\n");
tryItOut("/*for..in*/for(let __count__ in (([1,,].unwatch(\"prop\"))( \"\" .@* ? ((p={}, (p.z =  for each (prototype in this) for each (__noSuchMethod__ in [1,,]))())) : <x><y/></x>[[1]]))){;*::*; }");
tryItOut("try { __noSuchMethod__ = __proto__; } finally { yield false.unwatch(\"__proto__\"); } ");
tryItOut("gc()gc()");
tryItOut("do let __count__ = window; while((({constructor setter: Math.sin, prop setter: @foo })) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = ({__noSuchMethod__ getter: function(q) { return q; } }) in __iterator__ = __proto__.x::constructor getter= function (prototype, __count__) { return __proto__ } ) ;");
tryItOut("if((eval(\"null\", <x/>))) {M:if(__iterator__|= /x/g ) {return {}; } else {yield;__count__ }with({__iterator__: ([z1].prototype)}){throw 1e81; } } else ({}).__lookupGetter__");
tryItOut("{return <x/>;(*); }");
tryItOut("/*infloop*/do /*infloop*/L:for(const __count__ = <x><y/></x>; window; false) {const __parent__ = undefined, prop = constructor;; } while([15,16,17,18].sort(function(y) { yield y; export __iterator__;; yield y; }, prototype));");
tryItOut("{export constructor\n }\n/*infloop*/L:while(('fafafa'.replace(/a/g, Math.sin)))function  __noSuchMethod__ (constructor, null) { \tyield __noSuchMethod__ } ");
tryItOut("if(<x/> > []) {; } else  if (1.2e3 & this) __iterator__; else {throw <x><y/></x>; }");
tryItOut("if(\nthis) return; else  if (prop.__count__ getter= eval) (1 for (x in [])) else {yield; }");
tryItOut("if(this) { if ((__count__.propertyIsEnumerable(\"constructor\"))) yield;} else {let __iterator__ = <x><y/></x>, __parent__ = <x><y/></x>; }/*infloop*/do {if(undefined) export __iterator__; else  if (__parent__) ; else {\fyield false;\t }/*infloop*/for(({prop: ({}.propertyIsEnumerable(\"prop\")) }); (yield prop = *); null) {return 1.2e3; } } while(true);");
tryItOut("if() { if (1e4) {yield;return; } else try { yield this; } catch(prototype if <x><y/></x>) { var constructor = <><x><y/></x></>, __count__ = <x><y/></x>; } }");
tryItOut("with({}) { for(let y in [5,6,7,8]) return; } ");
tryItOut("/*for..in*/for(var __count__( '' .__noSuchMethod__ = this.zzz.zzz) in ((function (({ __count__: ({ __proto__: this }) })) { yield yield window.__defineGetter__(\"__iterator__\", /a/gi) } )(gc().__count__))){for(let y in [5,6,7,8]) var __iterator__ = *::*, prototype = [,,]; }");
tryItOut("with({}) with({}) { __iterator__ = prop; } ");
tryItOut("/*for..in*/for(const __iterator__ in prototype) {gc() }\n");
tryItOut("M:if(prop+=) {export *;gc()throw <x><y/></x>; } else yield \nthis.__defineGetter__(\"__noSuchMethod__\", Function);");
tryItOut("with({}) { prop = __count__; } ");
tryItOut("/*for..in*/for(const __proto__ = <x><y/></x> ? *::* :  /x/g  in  '' ) ;\nwith([15,16,17,18].sort((false).watch, __proto__) >> (new undefined(0,  '' ))){export __iterator__; }\n");
tryItOut("export *\n");
tryItOut("const constructor, constructor");
tryItOut("/*infloop*/for(var __proto__; __count__; new (function(y) { yield y; gc(); yield y; })()) throw StopIteration\nreturn new function(id) { return id }();");
tryItOut("L:do {yield __proto__;throw {}\nexport \f*; } while(((constructor = <y><z/></y>)) && 0);");
tryItOut("while(((((function(q) { return q; }).call).call(window, ))) && 0)*::*\n");
tryItOut("/*infloop*/for(var ({ constructor: __proto__, __proto__: prop }) = <><x><y/></x></> % <y><z/></y>; void true; #0=({prototype: x::__proto__})) {undefined }\n/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in prop) {gc() }\n");
tryItOut("const __noSuchMethod__, constructor = undefined\nconst prop =  /x/ , __count__ = this;");
tryItOut("with(__parent__)3/0;");
tryItOut("if(\n<y><z/></y> >= -3/0) {yield;(@foo); } else {with({}) __count__, __count__;M:if(try { return; } finally { let __parent__ = @foo, __proto__; } ) {export *;{export *; } } }");
tryItOut("return;");
tryItOut("/*infloop*/do  /x/ ['__parent__'] while((yield <><x><y/></x></>));");
tryItOut("/*infloop*/for(let __noSuchMethod__ = ((this ? .2 : constructor) if (4.)); <x><y/></x>.isPrototypeOf( /x/g ); (new  /x/  ? <y><z/></y> : -0.__parent__())) yield;");
tryItOut("let (x::__noSuchMethod__) { ; }");
tryItOut("let(__count__) { __parent__ = __proto__;");
tryItOut("L:if((this.__defineSetter__(\"__noSuchMethod__\", ((function (__parent__, __proto__) { return * } ).apply).apply))) { if (@foo(1.2e3)) return; else yield window;} const __count__;");
tryItOut("L:if( /x/ ) throw  '' ; else  if (<x/>) {{yield; }prototype, constructor = __proto__; } else {export __proto__; }");
tryItOut("L: switch(__iterator__) { default: case 1: break; case 7: let __noSuchMethod__;break; return; }");
tryItOut("{{}let \fprototype = -0; }");
tryItOut("/*infloop*/for(yield (this.__defineGetter__(\"__iterator__\", ((__parent__ = ({ __parent__: __proto__, __parent__: __noSuchMethod__ }))).watch)); yield  /x/ ; (Math.pow)(__parent__.__proto__ getter= Math.pow)) L:if(<y><z/></y>) throw  '' ;");
tryItOut("gc\n");
tryItOut("yield this;");
tryItOut("/*for..in*/M:for(const constructor = try { return *; } catch(__iterator__)/*\n*/ { export constructor\f; } finally { ((({}).hasOwnProperty).call).apply }  in this) yield [1,,];");
tryItOut("with({prop: <y><z/></y>//h\n})/*for..in*/for(const [__noSuchMethod__, prop] = 0x99 in prototype) {Math.sinlet __parent__, __parent__ = <><x><y/></x></>; }\n");
tryItOut("while(((([1,2,3,4].slice)(<x/>, new prototype =  \"\" ).watch(\"prop\", ([15,16,17,18].map(new Function, 1e+81)).__defineSetter__))) && 0)if(this.__defineGetter__(\"__count__\", new Function)) {export *\f; } else ");
tryItOut("{yield <x><y/></x>;__iterator__ = __parent__; }");
tryItOut("(\n*)\nthrow StopIteration;");
tryItOut("yield  /x/ ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__.__iterator__ in \f((new Function(\"return;\"))).call((#1=({prop: <x><y/></x>})) *  /x/  @ <x><y/></x>, __iterator__)) M:if((<y><z/></y>)[ /x/ ](let (__parent__) <x><y/></x> ? <y><z/></y> : <y><z/></y>)) { if (\t[[11,12,13,14].filter]) const prop = true;} else export __iterator__;");
tryItOut("prop = __noSuchMethod__;");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(var (__noSuchMethod__) in null) {/*for..in*/for(__proto__ = export *; in 1.3) ; }");
tryItOut("([[1]]).callexport __parent__; const __noSuchMethod__;");
tryItOut("/*infloop*/do {var __parent__, __iterator__ = <><x><y/></x></>;/*for..in*/for(var __iterator__ in  \"\" ) export *; } while((true.*(__noSuchMethod__ = prop, {})));");
tryItOut("/*for..in*/for(prototype in <x><y/></x>) /*infloop*/M:for(const __proto__; <x><y/></x>; window) {export x::__proto__; }");
tryItOut("{ \"\" ; }");
tryItOut("if((void window)) throw <x><y/></x>; else  if (({}).__parent__ = <>3.141592653589793;</>) continue L;");
tryItOut("/*infloop*/for(new Function(); undefined; default: export *;\f\nbreak; case 5: break; case [[]]: break;  for case new {}(window, 4.): (null);break; ) {return (uneval(<x/> + <x><y/></x>)); }");
tryItOut("if(<x/>) export __proto__; else {yield;var prototype; }");
tryItOut("/*infloop*/for(({ constructor: ({ prop: ({ __count__: ({ __count__: __parent__ }) }), constructor: prop }) }) = eval(\"with((yield  '' //h\\n)){false; }\", window); -(__count__ = null); #1#.__lookupGetter__(\"__iterator__\")) throw StopIteration;");
tryItOut("/*infloop*/do __parent__ getter: (({}).__lookupGetter__).apply while(this.unwatch(\"__noSuchMethod__\"));");
tryItOut("__proto__if(<y><z/></y>) {return;(<><x><y/></x></>); } else  if (<x><y/></x>) export __parent__; else var getter = constructor, __proto__;");
tryItOut("if(<x/>) {return *; } else  if (<><x><y/></x></>) {throw true;export *; } else {return;yield this; }");
tryItOut("/*infloop*/for(const __proto__; __parent__; ((function(q) { return q; }).call(0, <><x><y/></x></>))) {(<x><y/></x>);yield; }");
tryItOut("/*infloop*/L:for(var constructor = function ([y]) { };  \"\" ; <x><y/></x>) ({}).__lookupGetter__\n/*for..in*/for(var prop =  ''  in <x/>) {let __iterator__ = this;gc() }\n");
tryItOut("if(window) {yield;; } else  if (<><x><y/></x></>) {yield; }");
tryItOut("prop = __noSuchMethod__;\nvar function::prototype = function ([y]) { };\n");
tryItOut("if(new (true)()) {var __count__, prototype = <><x><y/></x></>;return  '' ; }");
tryItOut("if(this.__defineSetter__(\"prop\", [1,2,3,4].map)) return this; else  if (__parent__ = <x/>) {/*infloop*/do var __parent__; while(0.1.yoyo(this)); }");
tryItOut("/*for..in*/for(var __proto__ = delete undefined in (#0=this)) /*for..in*/M:for(let __noSuchMethod__ = Math.pow >>> (uneval(this)) in this) {const \fconstructor = <><x><y/></x></>; }");
tryItOut("if((<xxx {__parent__}={<x><y/></x>} />)(((yield yield  \"\" )))) { if (Error((__proto__.prop getter= window <<= (this.__defineSetter__(\"__count__\", function (try { continue M; } finally { let prototype; } )<x><y/></x>)(constructor.constructor, window))), (yyy.((true\n))))) (-0); else with(new (<x><y/></x>)(constructor,  \"\" ))}");
tryItOut("/*infloop*/M:do { } while((function ([y]) { })() .@x:: @foo);");
tryItOut("if(3) { if (<y><z/></y>) {return; } else }\nexport *;");
tryItOut("return;");
tryItOut("if((<x><y/></x>.(@foo)) == (yield *)) yield #1=[#1#]; else  if (\n__proto__ = ( \"\" \n)) {{try { yield 0/0; } finally {  } ; }M:with({__parent__: (function(q) { return q; }((new <><x><y/></x></>.isPrototypeOf( /x/ )())))})/*for..in*/for(const __parent__ in (((-0).__defineSetter__)(*))){} } else {let __parent__;/*infloop*/for(__noSuchMethod__; window; null) {return;; } }");
tryItOut("{-3/0;if(<><x><y/></x></>) { if (<y><z/></y>) { }} else export *; }'haha'.split\nconst __proto__ = <y><z/></y>;");
tryItOut("if( '' ) if([15,16,17,18].sort('haha'.split, <><x><y/></x></>)) gc() else  if ((*::*)\f) {throw <><x><y/></x></>; } else {let prototype = <x><y/></x>, __parent__;let prototype, __proto__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/for([[prop, <><x><y/></x></>.__parent__, , ], , __parent__, __iterator__(__noSuchMethod__), ({ __iterator__: ({ __count__: ({ this['prototype']: ({ __count__: function::prop }), __parent__: [__count__, , , , __noSuchMethod__] }), __noSuchMethod__: constructor }), __iterator__: 3['prop'] })] = [<x/> > 1e81 for each (prop in (typeof prop))]; <xxx>{__parent__}</xxx>; [[prop / 3\n]].some(function  __proto__ (__iterator__, function::__iterator__)new ((new Function(\"return;\")))(window, 0x99))) {}");
tryItOut("/*for..in*/M:for(var [prop, __proto__] = () in (uneval([15,16,17,18].some(<y><z/></y>, [1])))) /*for..in*/for\t(prop([,,z1]) in <x/>) {let __proto__ = window; }");
tryItOut("if(let (__count__)  /x/g ) { if ( /x/g ) {{}__parent__ = this; }} else this");
tryItOut("/*infloop*/while(<x><y/></x>){prop; }");
tryItOut("if((((window.__lookupSetter__(\"prop\")--) != 'fafafa'.replace(/a/g, function(q) { return q; })) .@x:: (yield <x/>)({}, (p={}, (p.z = undefined)())))) { if (constructor) \f*::*; else {L:if(__count__) return; else  if (prop) return 3; else ; }}");
tryItOut("__proto__(*::*) = __count__;");
tryItOut("constructor = constructor;");
tryItOut("var __noSuchMethod__ = true, __proto__ = <x><y/></x>;");
tryItOut("return;");
tryItOut("let __proto__ = {};");
tryItOut("let (__noSuchMethod__, prototype) { /*for..in*/M:for([prop, __proto__] = <><><x/></></> in 5.0000000000000000000000) {{export prop;export __count__; } } }");
tryItOut("if([(this.__defineSetter__(\"prototype\", new Function)).filter((window).watch)) let __proto__; else {(*); }");
tryItOut("with({__proto__: (({ constructor: [], __proto__: __count__ }) = (return <><x><y/></x></>))}){constructor{let constructor, [1,,] = null; } }");
tryItOut("/*for..in*/for(const __proto__ in ((033)([15,16,17,18].some(, @foo)))){if(<><x><y/></x></>) { if (constructor) {var constructor, __proto__ = @foo;__parent__:  \"\"  } else return;} }");
tryItOut("{gc()var __noSuchMethod__ = *, prop; } const __proto__;");
tryItOut("if(#2=__iterator__) { if (@foo if (<x><y/></x\n>)) {{} } else {yield; }}");
tryItOut("/*infloop*/L:for(@foo(); <xxx {__count__}={(null)[<y><z/></y>]} />; #1=[#1#]) throw <x/>;");
tryItOut("/*infloop*/do yield; while(({a2:z2}));");
tryItOut("L:if((yield eval(\"<x><y/></x>\",  /x/g ))) { if ((prototype for (prototype in [z1])).__lookupSetter__(\"__iterator__\")) } else /*infloop*/while(<y><z/></y>)export *;");
tryItOut("throw prop;");
tryItOut("if(eval(\"\", <><x><y/></x></>.constructor = <x><y/></x>)) function  prototype (function::__noSuchMethod__) { yield  /x/  } ");
tryItOut("/*infloop*/do ;\nlet prototype = <y><z/></y>, __parent__;\n while(*--.yoyo([15,16,17,18].map(({}).hasOwnProperty, <y><z/></y>)));");
tryItOut("/*infloop*/while(<x><y/></x>)yield window;");
tryItOut("yield (new ([,,z1])(<><x><y/></x></>));");
tryItOut("/*infloop*/L:while(eval(\" \\\"\\\" .throw(<x/>)\", #1=({prototype: window})));/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in ({ set __count__ prototype (constructor, prop) { yield <><x><y/></x></> } ,  set prototype(__count__, __count__) { yield 3/0 }  })) {break M; }");
tryItOut("L: {gc(){ \"\" ; } }");
