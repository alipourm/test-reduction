
tryItOut("if((<><x><y/></x></>.__defineGetter__(\"__iterator__\", *))) { if (function  __iterator__ (__noSuchMethod__, __noSuchMethod__) { (__proto__); } ) {}} else ");
tryItOut("break ");
tryItOut("{with({function::__iterator__: eval(\" \\\"\\\" \", 1e+81)})prototype; }");
tryItOut("/*infloop*/for((function(q) { return q; }).call(Number(, [15,16,17,18].filter(/a/gi, @foo)), (([ /x/  .@ *::*]).eval((new Function)(1.3, false)).__lookupGetter__(\"__parent__\"))); __parent__ = *; new function(y) { yield y; export prototype;; yield y; }().__proto__) {return undefined; }");
tryItOut("/*for..in*/for(__proto__ in @foo) return <x><y/></x>;");
tryItOut("with({}) { return ; } ");
tryItOut("return @foo !== true;");
tryItOut("with((<y><z/></y> .@*:: <x><y/></x>))let constructor, __noSuchMethod__;");
tryItOut("return true.prop;");
tryItOut("{getter, prototype = window;(-1) }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop.constructor in new (<x><y/></x>.__lookupGetter__(\"constructor\"))(<><x><y/></x></>.__count__)) /*infloop*/(while( ''  ^ <x><y/></x>))");
tryItOut("let(__parent__, __parent__) { {}");
tryItOut("return;");
tryItOut("L: {return <x><y\t/></x>;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop((({ get __noSuchMethod__(__iterator__) { yield [z1] }  }))) in <bbb xmlns=\"[1]\"><!--yy--></bbb>.propertyIsEnumerable(\"__iterator__\")) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in [1]) {yield;var prop, __count__ = @foo; }\t }");
tryItOut("if(__parent__) let prop; else {(<x><y/></x>);let __noSuchMethod__, prop = <><x><y/></x></>; }");
tryItOut("M:if(<>[15,16,17,18].filter(/a/gi, (<><x><y/></x></>).call(3/0, ))</>) {{continue M;yield; } } else  if (__parent__ = window.constructor) L: const prototype = undefined; else const constructor, prototype;");
tryItOut("{{} }");
tryItOut("/*infloop*/for(const __parent__; undefined = 1e+81; (([1,2,3,4].map) |= (@foo = <x><y/></x>.yoyo(yield ({__noSuchMethod__ setter: constructor,  get function::constructor constructor (' { throw constructor; }  }))))) let(__iterator__, prototype = 1.3) { {}");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/while(switch(__parent__, __noSuchMethod__) { case 9: break; default: case <x><y/></x>(-3/0, case prototype: case 4: break; default: let __count__ = <y><z/></y>;break; ): var __count__, __count__;break;  }){L:switch( '' ) { case 6:  }{}\n\n }");
tryItOut("/*for..in*/for(let [prototype, constructor] = (1.3 .. *::*) in (*::*[<x><y/></x>])) gc()");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; <><zzz>(({__count__: (__count__)((( \"\" )(@foo, null))), __iterator__: this }))<\t/zzz></> && new ('fafafa'.replace(/a/g, function () { yield <><x><y/></x></> } ))(false, ([,][true])); 1e+81) {yield  /x/g ;;\nyield true;\n }");
tryItOut("/*for..in*/for(var __parent__ = } in this .@x:: <y><z/></y>) /*infloop*/do {export *;var __iterator__ = true; } while(null ? prototype : 5.0000000000000000000000);");
tryItOut("if(((Function)())) { if (<><{constructor}> </{constructor}></>) {L: yield; }} else {1e4;yield; }");
tryItOut("/*for..in*/for(var constructor.__noSuchMethod__ in (yield ({__parent__: 1e81 }))) {; }");
tryItOut("(const __proto__;);");
tryItOut("/*infloop*/do {gc() } while(window);");
tryItOut("default: break; case 7: break; case this.zzz.zzz instanceof __proto__ += (( '' )(({}))) / @foo: if(prototype) {[1,2,3,4].slice } else undefined;break; case 2: M:if((-0).__noSuchMethod__) {function  prototype () { return [[]] } return <x/>; }/*infloop*/L:for(constructor; (new ((1 for (x in [])))()); ++[1,,]) gc()\nvar prop;\nbreak; case ( /x/g .prop =  \"\" ): if('fafafa'.replace(/a/g, ({}).hasOwnProperty)\n) { if (<><x><y/></x></>.__count__) {export default: break; ;try { yield; } catch(__iterator__ if @foo) { gc() } catch(prototype) { return; }  }} else {return this; } const __noSuchMethod__;case 6: ");
tryItOut("constructor = __parent__.throw(<><x><y/></x></>), prop");
tryItOut("if( '' ) {; } else  if ( \"\" ) {(3.141592653589793); } else {this;return; }");
tryItOut("this.zzz.zzz;");
tryItOut("L:with({__iterator__: [11,12,13,14].filter}){return;if([1,2,3,4].slice(yield =  /x/g , __count__)) { if (function (constructor, __parent__\t) { return <y><z/></y>.throw(<><x><y/></></>) } ) {__parent__ = [,], __proto__ = @foo; } else {yield <><x><y/></x></>; }} }");
tryItOut("{gc()true; }");
tryItOut("L: {{}gc }");
tryItOut("M:with(<x><y/></x>)return\n/*infloop*/L:for(<x><y/></x>; false; false) gc()");
tryItOut("/*for..in*/M:for(let \n__noSuchMethod__ in (('haha'.split)\r((({ __parent__: __iterator__, prop: constructor }) = 5.0000000000000000000000 << prototype.throw((<y><z/></y> ? window : try { yield; } finally {  } ))))))L: ");
tryItOut("/*infloop*/while(( /*infloop*/while )[__parent__])/*for..in*/L:for(const [prototype, constructor] = <x/> in prop) (<x><y/></x>);");
tryItOut("/*for..in*/for(let @foo in (([z1].__proto__)(<ccc:ddd><!--yy--></ccc:ddd>))){/*infloop*/while(<y><z/></y>){return this; }/*infloop*/for(const prop = <><x><y/></x></>; window; __parent__) {prop; } }");
tryItOut("/*for..in*/for(var [__iterator__, __parent__] = <x><y/></x> in [,,]) const prototype = 4., __proto__;\nlet __count__ = constructor, prototype;\n");
tryItOut("\ndo {yield -0;'haha'.split } while((window.prototype = <><x><y/></x></>) && 0);");
tryItOut("throw undefined;");
tryItOut("if(\n[[1]]) {{export *;return <x><y/></x>; } } else {return; }");
tryItOut("with({}) { var __parent__; } ");
tryItOut("L: export __parent__;");
tryItOut("/*for..in*/for(var __iterator__ = ({ prop: __iterator__, __noSuchMethod__: [prop, __noSuchMethod__, prototype, , ] }) = ({ get __proto__(__proto__) { yield *::*; } , __proto__: <x/> }) in constructor = this) let __count__, __parent__;");
tryItOut("do {/*for..in*/for(var __noSuchMethod__ = [,,z1] in 0) throw  /x/ ;/*infloop*/L:for(( /x/ .eval(<x/>)); ; 0x99) return 4.; } while(('fafafa'.replace(/a/g, (new Function(\"const __noSuchMethod__;\")))) && 0);");
tryItOut("/*for..in*/M:for(__noSuchMethod__.__noSuchMethod__ in ( /* Comment */__iterator__)) let __parent__, prototype = <><x><y/></x></>");
tryItOut("let (constructor = (p={}, (p.z = *)())) { const prototype = prototype, __count__ = <x><y/></x>;export *; } const __count__;");
tryItOut("return;");
tryItOut("constructor = __proto__;");
tryItOut("if((<y><z/></y> = this[<x><y/></x><ccc:ddd><x><y/></x></\fccc:ddd>.( \"\" )])) { if (({__parent__ getter: this.zzz.zzz,  set __parent__(get, __count__)null })) gc() else {L:if(new (<x><y/></x>)()) { if (((<x/> + true).propertyIsEnumerable(\"prototype\"))) {yield; }} else {;\f([]); } }}");
tryItOut("switch((1.3.watch(\"prototype\", (1 for (x in [])))) @ __iterator__ !== (function  __count__ () { yield x::__proto__ } ).call([z1,,],  /x/g ) >>> <x><y/></x>.yoyo(1.3)) { case 2:  }");
tryItOut("M:while((set = <><x><y/></x></>) && 0)throw undefined;");
tryItOut("/*for..in*/for(constructor in (('haha'.split)(@foo)))throw  /x/g ;");
tryItOut("L:do let (prop = prop) { [1,2,3,4].slice } while((__parent__ = true) && 0);");
tryItOut("return *::*;\n{if(<y><z/></y>) {export *;let prop; } else {{}const __noSuchMethod__ = <y><z/></y>, __proto__; } }\n");
tryItOut("/*for..in*/for(const <x><y/></x>['__noSuchMethod__'] in ((Math.sin)(yield <><x><y/></x></>))){const __proto__, prop = 0.1; }");
tryItOut("/*for..in*/for(let constructor = (eval(\"<><x><y/></x></> ? * : __noSuchMethod__\", (<x><y/></x>.watch(\"__parent__\", (__iterator__, __iterator__).watch))).isPrototypeOf(this.__defineGetter__(\"__proto__\", []))) in (__proto__ = *::*)) throw <><x><y/></x></>;");
tryItOut("/*infloop*/while(typeof ({constructor: undefined})){yield __proto__;/*infloop*/for(033; <x><y/></x>;  /x/g ) {<x><y/></x>;break L; } }");
tryItOut("for(let y in [5,6,7,8]) prototype = constructor;");
tryItOut("");
tryItOut("/*for..in*/for(var __count__.__iterator__ in <><x><y/></\fx></> >> <x><y/></x>) {{let (\f__noSuchMethod__) { <x><y/></x>; }function (__count__, __noSuchMethod__) { return undefined }  }if( /* Comment */{}) <y><z/></y> else  if ('fafafa'.replace(/a/g, function(q) { return q; })) {return <y><z/></y>;return; } }");
tryItOut("while((<><x><y/></x></>.unwatch(\"__proto__\") | eval(\"<x/>[<><x><y/></x></>]\", __count__.(case (<x><y/></x>.prototype): break; ))) && 0)Math.pow");
tryItOut("switch( '' ) { [1,2,3,4].map }\n");
tryItOut("setter = __proto__;");
tryItOut("/*infloop*/while(#1=[<x/>]){/*infloop*/for(__count__ = (new (())(@foo !== <y><z/></y>)); ( '' .hasOwnProperty(\"prototype\")); ((prop = <x><y/></x>)())) ({}).__lookupGetter__ }");
tryItOut("L:do return; while(((([1,2,3,4].map).call(prototype = window, @foo))) && 0);");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for(const __proto__ in  '' ) {throw [,]; }");
tryItOut("const prototype, __noSuchMethod__ = <x/>;");
tryItOut("/*infloop*/while(<x><y/></x>)gc()");
tryItOut("while((__iterator__.(<x/>.constructor = <x><y/></\rx>)) && 0){}");
tryItOut("if(1e4) export __noSuchMethod__;");
tryItOut("\t{(function ([y]) { });<x><y/></x>; }");
tryItOut("M:with({prop: (let (__parent__ = <><x><y/></x></>, __count__) (<><x><y/></x></> , prototype) for (false.__noSuchMethod__ in __iterator__ = [,].@*( /* Comment */<y><z/></y>, this.__defineGetter__(\"prop\", undefined))) if (prop > <><x><y/></x></> /= (-1)))})return null\nwhile((<zzz> { yield function  __iterator__ (__count__, __count__) { return <x/> } ((<x><y/></x>.propertyIsEnumerable(\"constructor\"))) } </zzz>) && 0){export __iterator__; }");
tryItOut("/*for..in*/for(const __iterator__ = this.zzz.zzz in <><x><y/></x></>\f) (<x><y/></x>);");
tryItOut("if(prop.isPrototypeOf(*) ? yield @foo : new (eval)(false) ? ('haha'.split)(<x/>) : \nnew Date()) { if ((function ([y]) { })().propertyIsEnumerable(\"prototype\")) {;eval }} else {export __noSuchMethod__; }");
tryItOut("\tif(*::*) { if (<><x><y/></x></>) {gc() } else prop = <x/>;}\nlet __proto__, __parent__\n");
tryItOut("M:if(function(id) { return id }) \n else {function(q) { return q; } }");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("/*for..in*/for(var ((0.1.__iterator__ = #1#))((#1=[#1#]--)) in #1#.__lookupSetter__(\"__iterator__\")) gc()");
tryItOut("if(this.*) {return .2;\t } else  if (<x><y/></x> >>= <><x><y/></x></>) yield");
tryItOut("while(( /x/g .__lookupGetter__(\"__proto__\")) && 0){(<><x><y/></x></>).__defineSetter__ }");
tryItOut("/*for..in*/L:for(var __iterator__ in ((function(q) { return q; })(*)))yield *::*;");
tryItOut("if(<x/>) {yield; } else  if ( /x/g ) ({}).hasOwnProperty");
tryItOut("throw <><x><y/></x></>\nexport __iterator__;");
tryItOut("{__count__ = false, __iterator__;\nfunction(id) { return id };\n }\n");
tryItOut("while(([this.__defineSetter__(\"function::__iterator__\", gc)].filter(Math.pow)) && 0){gc()gc() }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("switch((({}).hasOwnProperty).call((__iterator__ = prop.__parent__ = <> { return (new gc(<xxx {__iterator__}={window} />.(--window))) } </> for each (prop in <y><z/></y>) for each (__count__ in <><x><y/></x></>) for each (__proto__ in  /x/ )), * || <><x><y/></x></> %=  /x/g , [__proto__])\n) { case {}: break; case 3: <xxx>{constructor}</xxx>yyycase 4: /*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in <y><z/></y>(<y><z/></y>, 5.0000000000000000000000)) break L;case (prop = 4.): export prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <x><y/></x>) const __count__ = *;");
tryItOut("try { let(__iterator__) { eval } finally { this.zzz.zzz; } ");
tryItOut("try { this.zzz.zzz; } catch(__proto__) { __proto__ = __noSuchMethod__; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in (__proto__.__noSuchMethod__ = ({ __count__: constructor, __parent__: __iterator__ }) = <x><y/></x> *= null)) L:with({prop:  '' }){(__iterator__);return  '' ; }");
tryItOut("");
tryItOut("/*infloop*/for(__iterator__; (export *.__proto__ = 1e+81.watch(\"__count__\", ({}).__lookupGetter__)); this.@foo(__count__.prototype setter= 1.3, [11,12,13,14].sort)) /*for..in*/for(const [constructor, __proto__] = <x><y/></x>.* in null) continue ;");
tryItOut("/*for..in*/for(let true.__iterator__ in ((([[]] + <><x><y/></x></>))((<><x><y/></x></>.propertyIsEnumerable(\"__iterator__\"))))){<><!--yy--></> }");
tryItOut("L:switch(<x><y/></x>) { case 6: break; break; break; case 3: break; default: break; case 0: export *;return __noSuchMethod__;break; {}break; case -3/0: return;break L;break;  }");
tryItOut("if( ''  > <><x><y/></x></>) { if ((String(({})))) ; else this;}");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let constructor = this.__defineSetter__(\"__parent__\", /a/gi) in false) {__iterator__ = <x><y/></x>, __proto__ = <><x><y/></x></>;yield window; }\n");
tryItOut("let(prototype, __noSuchMethod__ = ({})) { yield 3/0;");
tryItOut("return *::*; const prop;");
tryItOut("for(let y in []);");
tryItOut("export *;\n{}\n");
tryItOut("/*for..in*/for(__iterator__ in __iterator__) {const prop = *::*; }");
tryItOut("M:if( \"\" ) {; } else export *;");
tryItOut("if([__parent__.constructor]) { if (this.__defineSetter__(\"__count__\", (\n<><x><y/></x></>).__defineSetter__)) {return; } else {{}/*infloop*/while(<x><y/></x> << <x/>) }}");
tryItOut("if(<x><y/></x>.__lookupSetter__(\"__parent__\")) if(('fafafa'.replace(/a/g, (({}).hasOwnProperty).apply))) {} else  if (this) ;");
tryItOut("let (__iterator__, __count__ =  /x/ ) { x::prototype; } const prop;");
tryItOut("return <><x><y/></x></>;");
tryItOut("{while(((#0=\f[this])) && 0){yield 3/0; } }");
tryItOut("{function  __count__ () { gc() } break L; }");
tryItOut("switch(*) { default:  }");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("/*for..in*/M:for(const __iterator__ in ((function(y) { yield y; break ;; yield y; })(window)))4.;");
tryItOut("const __noSuchMethod__, __iterator__ =  /x/ ");
tryItOut("with({}) return;");
tryItOut("/*infloop*/while(function () { export prototype; } ){try { (__noSuchMethod__); } catch(prototype) { yield; }  }");
tryItOut("{L: {const __parent__;yield; }if(__iterator__ = ({ __proto__: __proto__ })) __count__ = <x><y/></x>, __proto__ = window; else  if ((this for each (__noSuchMethod__ in [15,16,17,18].filter(new Function, 1.3)))) {let (let __iterator__ = <y><z/></y>, constructor = -3/0; = <x><y/></x>) { yield [1,,]; } for (constructor in 1e4) } }");
tryItOut("/*for..in*/M:for(var (undefined['prop']) in ((function  prop (prop, ({ __proto__: __count__ })) { throw \t<><x><y/></x></>; } )(((<><x><y/></x></>)(<x><y/></x>)))))__iterator__ = <><x><y/></x></>, prototype = #3={a:#3#};");
tryItOut("do {let (prototype = function::__iterator__) { continue M;\r }__iterator__\n } while((this.zzz.zzz) && 0);");
tryItOut("/*infloop*/while(eval(\"(<x><y/></\\rx> for (constructor in <x/>))\", this.zzz.zzz))@foo");
tryItOut("do {{} } while((__noSuchMethod__ = @foo :: <x><y/></x> < \n'haha'.split(<y><z/></y>, __proto__)) && 0);");
tryItOut("if(window) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__ in *::*) {<x><y/></x>;function ([y]) { }; }export __iterator__; } else  if (__noSuchMethod__ .. __parent__ !== __noSuchMethod__ = __noSuchMethod__) export __parent__;");
tryItOut("/*infloop*/L:do let(constructor = true, __parent__) ((function(){eval})()); while(({ __iterator__: __proto__ }) = false);");
tryItOut("/*infloop*/L\r:for(const __iterator__ = <x><y/></x>; window; 1e4) continue ");
tryItOut("M:with(#1=(eval)){if(<x/>) { if (__iterator__.__lookupSetter__(\"prop\")) return; else {}} }");
tryItOut("if(1e-81) export __iterator__; else  if (constructor) {const __count__ = <x><y/></x>;(*); } else export __iterator__;");
tryItOut("var __noSuchMethod__ = <y><z/></y>;");
tryItOut("if(({prop setter: gc })) { if (__noSuchMethod__.prop = (uneval(<x><y/></x>))) __count__ = <x><y/></x>; else export __parent__;}");
tryItOut("/*infloop*/for(let ({ __count__: constructor, __parent__: constructor }) = *::*; [,,]--; @foo.*) {break M;yield *::*; const __count__; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("let (__parent__, __iterator__) { {return; } }");
tryItOut("/*infloop*/while((033 /= ((<x><y/></x>)).hasOwnProperty(\"constructor\").watch(\"prop\", gc))){/*infloop*/while([<x><y/></x>].constructor)return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__ in  '' ) (this);\n__noSuchMethod__\n const __count__;");
tryItOut("(-1)\n/*infloop*/while((this.__defineGetter__\f(\"__count__\", []))){return; }");
tryItOut("M:if((@foo.__count__)) {prototype, __count__;{} } else return [,];");
tryItOut("let (({ __noSuchMethod__: __count__ }) = (yield (this instanceof 3)), constructor) { yield; }");
tryItOut("/*for..in*/for(const prop = *::* in  \"\" ) {yield; }");
tryItOut("while(( /* Comment */--__proto__.prototype = [,,]) && 0)if(eval(\";\", <><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\"))) { if ((p={}, (p.z = new ([z1,,])(prototype.@*))())) export prototype; else ({}).__lookupGetter__}");
tryItOut("if(false .@ <><x><y/></x></>) L: var prop = 3; else  if (prototype = __iterator__) {/*infloop*/while( '' ){prototype = <x><y/></x>;continue ; } } else {{(constructor);{} }/*infloop*/for(const ({ constructor: [, __noSuchMethod__] }) = ([1].prototype = <x><y/></x>); (this.isPrototypeOf(3.141592653589793)); this.hasOwnProperty(\"__noSuchMethod__\")) throw #1=[#1#]; }");
tryItOut("{export *;return; }");
tryItOut("/*infloop*/M:do {with({prototype: prototype.prop}){const __count__ = <><x><y/></x></>; } } while(<x><y/></x>.isPrototypeOf( /x/ ));");
tryItOut("while((constructor) && 0)let prototype, __iterator__ = 033; const __iterator__;");
tryItOut("export *;var prototype, __noSuchMethod__;");
tryItOut("L: { throw <x/>;\nif((false << *)) {yield <><x><y/></x\n></>;return; } else  if (<x><y/></x>) export *; else {;const __iterator__ =  /x/g ; }\n }");
tryItOut("throw prototype;");
tryItOut("/*infloop*/for(<></>; new Function(false); export *.valueOf(\"number\")) M:if(<><x><y/></x></>) {{} } else  if ( '' ) {let constructor = <><x><y/></x></>, __count__ = undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.__count__ in (delete prop)) {\nconst prototype = getter; }");
tryItOut("return <x><y/></x>; const prototype;");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut(" /x/ ;");
tryItOut("\nthrow <y><z/></y>;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype\t.__proto__ in <><x><y/></x></> :: <><x><y/></x></>) while(((0x99--)) && 0)gc()");
tryItOut("do gc() while((__parent__) && 0);");
tryItOut("/*infloop*/for(constructor; (__count__\n = <><x><y/></x></>)(); ((__noSuchMethod__ if (true)).__defineSetter__(\"__iterator__\", (new #3={a:#3#}(undefined, ({})))))) {with({__parent__:  /x/ }){let  = <x><y/></x>; }\ncontinue M; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = (new ((new gc(1e81)))() .. (__count__ = <x/>)) in [this for each (__parent__ in <><x><y/></x></>)]) {let __parent__, __proto__ = @foo; }");
tryItOut("for(let y in []);");
tryItOut("for(let y in [5,6,7,8]) throw <y><z/></y>;");
tryItOut("/*for..in*/for(var <x><y/></x>.__count__%=(*::*--) in (function(y) { yield y; var  { return; } , __count__ =  /x/g ;; yield y; })(__count__, true)) if(window) {} else  if ( /x/ ) var prop, prototype = <><x><y/></x></>; else return;\t");
tryItOut("if(([1,,].throw(*))) { if (new RangeError()) L:if(0/0) __iterator__ else  if (0.1) return true; else {} else {return; }}");
tryItOut("throw constructor;");
tryItOut("/*for..in*/for(let constructor = prototype &  /x/  in Math.sin((__proto__.__proto__), *::*)) throw this;");
tryItOut("if([1]) {continue M;throw /*\n*/window; } else  if (<x/>.isPrototypeOf(<x><y/></x>).watch(\t\"__iterator__\", gc).eval((p={}, (p.z = (prop = __count__))()))) {return;function (;, __iterator__) { var prototype, __proto__ = window; }  }");
tryItOut("with(#1#){yield; }");
tryItOut("/*infloop*/for(__noSuchMethod__; (this.__defineSetter__(\"__count__\", [1,2,3,4].slice)); this.__defineGetter__(\"__iterator__\", /a/gi)) {/*infloop*/for(var ({ __parent__: ({ prototype: [, , ] }), __count__: ({ __proto__: ({ x::prototype: constructor, __count__: default: yield; }), __iterator__: [prop, , constructor, __iterator__, __count__] }) }) = <x/>; (new Object()); (p={}, (p.z = new (<><x><y/></x></>.__defineGetter__(\"prop\", \nfunction  __proto__ (__parent__, __iterator__)<y><z/></y>))((true.__defineGetter__(\"prototype\", new Function))))())) {gc() }return; }");
tryItOut("{}export constructor;");
tryItOut("/*for..in*/for(let [x::prop, constructor] = <><x><y/></x></>.eval(null)[( '' )[@foo]] in gc()) {/*infloop*/for(<x><y/></x>; undefined; prop) yield;\f\n }");
tryItOut("do {var prototype = <x/>, __count__;/*infloop*/for(let constructor = false; <y><z/></y>; 3) {yield __parent__; } } while((({a1:1}) instanceof __proto__ = <x><y/></x>) && 0);");
tryItOut("switch(eval(\"continue M;\", <><x><y/></x></>)) { default: break; case eval(\"/*for..in*/for(let [prototype, prop] = @foo in __proto__)  '' ;\", prototype|=1.3): /*infloop*/do __proto__, constructor = arguments; while((prop = #3={a:#3#}));break; case [[]] .@x::  \"\" : return;break; break; case [11,12,13,14].map: ; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__.__parent__ in  '' ) ");
tryItOut("/*infloop*/for(var x::__iterator__; (*::*)(function(id) { return id }); (<><x><y/></x></> if (@foo))) __noSuchMethod__");
tryItOut("let (prop = null .@*:: <x/>\n) { break L; }");
tryItOut("throw StopIteration;");
tryItOut("const constructor;");
tryItOut("if(<x/>) function (__iterator__);");
tryItOut("break ;");
tryItOut("if([z1]) <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(const prototype in window) yield 1e-81;");
tryItOut("/*infloop*/for(-<x><y/></x>; this; __parent__.__proto__ = __noSuchMethod__) { { yield 0.1 } function (setter, __proto__)@foo }");
tryItOut("/*for..in*/for(const __proto__.prototype in (function  __count__ ()1.3)) {var prop = undefined, __count__ = {}; }");
tryItOut("/*infloop*/M:for((eval)(constructor.(\f /x/ )); (0.@*) === *::*.yoyo(#1=[#1#]); this.__defineGetter__(\"prop\", [1,2,3,4].map).unwatch(\"__proto__\")) let __parent__, prop = false;");
tryItOut("if(1.3) /*infloop*/for(({ constructor: __iterator__ }) = prop = <x><y/></x>; prop.__lookupGetter__(\"__parent__\");  /x/g  , (function ([y]) { })()) {case 7: let constructor, prop;break; case <y><z/></y>: yield <x><y/></x>;case 9: throw undefined;break; (<><x><y/></x></>);break; false;break; break; case 3: throw this;break; case 4: throw <y><z/></y>; /x/ ; }");
tryItOut("/*for..in*/L:for(let __proto__ in arguments) {}");
tryItOut("let (prototype, __count__) { return; }");
tryItOut("return;\nthrow null;\n");
tryItOut("/*for..in*/L:for(let [constructor, __proto__] = (<x/> <<= (__iterator__())) in @foo) /*infloop*/for(const ({ __proto__: ({ constructor: __noSuchMethod__, constructor: __proto__ }) }) = (Function).call(({a1:1}), ) in (__proto__); null; (prop = prototype.__lookupSetter__(\"__parent__\"))) gc()");
tryItOut("/*infloop*/M:for(new *.yoyo(new [1,2,3,4].slice(__iterator__)); prop = 4..propertyIsEnumerable(\"__count__\"); __iterator__) {throw undefined; }");
tryItOut("continue ;");
tryItOut("/*infloop*/M:do {*::*; } while((__noSuchMethod__.prototype getter= [,]) && (({ __proto__: prototype }) = [<x/> % this]));");
tryItOut("if(__parent__.__iterator__ = * #1# ) { if (.2) {gc() } else __parent__}");
tryItOut("/*infloop*/for(var __iterator__; (window <=  /x/ .@foo).@*; <x><y/></x>.__defineGetter__(\"__parent__\", gc)) if(#0=({__count__: ({a1:1})})) yield  /x/ ; else  if (this) {const prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(//h\n__parent__ in @foo) constructor = <><x><y/></x></>");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(const __proto__ in (((1 for (x in [])))([,,z1]))){throw #1=[#1#]; }");
tryItOut("with({__iterator__: }){<><x><y/></x></>;(prototype); }");
