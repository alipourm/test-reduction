tryItOut("L:if(<><x><y/></x></> = function ([y]) { }) { if (prop = <x/>.propertyIsEnumerable(\"__proto__\")) {throw  /x/ ; } else {export *;export __iterator__; }}");
tryItOut("(prototype) const setter;");
tryItOut("M:if(((new Object(__parent__, <y><z/></y>) if (3/0)))) { if (__count__ = 3/0.*.isPrototypeOf((uneval( /x/ )))) {}} else yield;");
tryItOut("/*infloop*/while(0x99)__proto__ = , __parent__ = this;");
tryItOut("{[__count__, prototype, , ({ __proto__: constructor, __proto__: __noSuchMethod__ }), __parent__] = <x/>; }");
tryItOut("if(this.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) {throw __noSuchMethod__; } else  if (__count__.(<>('fafafa'.replace(/a/g, function(y) { yield y;  set __proto__ __noSuchMethod__ (__parent__)*::*; yield y; }))</>)) {switch(__proto__.(this)) { default: gc()break; gc() } }");
tryItOut("gc()");
tryItOut("{let __count__, constructorM:if(<x><y/></x>) { if (@foo) yield; else throw __proto__;}\n }");
tryItOut("return this;__noSuchMethod__ = prototype;");
tryItOut("let (__proto__ = (-0)) { L:if(*::*) {return <x/>;break L; } }");
tryItOut("do /*for..in*/for(prototype in (((*).call)(\t@foo))){yield <><x><y/></x></>;let __parent__, __count__; } while(((('haha'.split)())) && 0);");
tryItOut("M:do {return; } while((constructor.__count__ getter= Math.pow) && 0);");
tryItOut("throw __parent__;");
tryItOut("with({}) for(let y in [5,6,7,8]) __proto__ = __count__;");
tryItOut("if(<><x><y/></x></>.__count__) throw <x><y/></x>; else  if ((1 for (x in [])) = <><x><y/></x></>) const __count__; const prop\r;");
tryItOut("/*for..in*/for(const __parent__.__noSuchMethod__ in ((void @foo)((<{__noSuchMethod__}> </{__noSuchMethod__}>.(constructor.constructor))))){\nreturn <><x><y/></x></>;\n }\f");
tryItOut("with({prototype: })constructor = 1.3;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((<x><y/></x>)() in (((uneval(*::*))) if (#1=[#1#]))) {/*infloop*/__noSuchMethod__switch(this.__defineGetter__(\"__proto__\", function(q) { return q; })) { case 3: {}break L\t;break; case  '' .@*: break; default: case 5: default: return;break; case 2: propcase 5: #1#;break; continue ;break; export __parent__; } }");
tryItOut("let (__iterator__, constructor) { /*for..in*/for(var constructor in undefined) var  /x/  = <x><y/></x>; }");
tryItOut("if(( /* Comment */*)) {throw @foo; }");
tryItOut("with({__count__: (yield.((window))).watch(\"__count__\", function  prop (__count__, __noSuchMethod__) { /*infloop*/for(<><x><y/></x></>;  /x/ ; <><x><y/></x></>\t) __parent__; } )}){/*break \nexport __parent__.__noSuchMethod__; }");
tryItOut("this.zzz.zzz;");
tryItOut("([]);");
tryItOut("/*for..in*/L:for(const __noSuchMethod__, prop = constructor = <x><y/></x> in ((gc)(<>\n(({ __proto__: yyy }) = ({prototype: function ([y]) { },  get __count__(__noSuchMethod__, __parent__) { yield <x/> }  }).unwatch(\"constructor\"))</>))){let prototype;constructor = __parent__; }");
tryItOut("/*infloop*/while(new  if (__parent__\r)())export *;");
tryItOut("break M;\nthis.zzz.zzz;\n");
tryItOut("/*infloop*/do  while(constructor);return <><x><y/></x></>;");
tryItOut("M:if(yield <x><y/></x>;.*) gc() else {M:if( '' ) { if ( /x/g ) yield;} else {(<y><z/></y>); }yield; }\n5.0000000000000000000000 = __iterator__;");
tryItOut("this.zzz.zzz;{function(y) { yield y; ;; yield y; }const __iterator__ = function(id) { return id }; }");
tryItOut("gc() const __proto__;");
tryItOut("if((__iterator__ = 1.3 + --undefined++)) { if ((({}).__lookupGetter__)(((new (({constructor getter: @foo, prop: window }))(true .@x:: <><x><y/></x></>, 1e81)).__defineGetter__(\"__iterator__\", eval)))) yield constructor;} else {return [,,z1]; }\nwith({}) try { throw prototype; } catch(prop if 'fafafa'.replace(/a/g, 'haha'.split)) { let(constructor, prop = 1e-81) { constructor } catch(__noSuchMethod__ if (Math.sin)(<>\t<x><y/></x></>, this)) { yield ({prop getter:  /x/g  }); } catch(prototype if (function(){yield (yield __noSuchMethod__);})()) { let(__proto__, __proto__ = undefined) { ; } catch(__iterator__) { let(__noSuchMethod__) {  } \n");
tryItOut("do {/*for..in*/for(var x::prop.__iterator__ in @foo) {yield <>__iterator__, __noSuchMethod__ = *</>; }gc() } while((<x/>.valueOf(\"number\") .. constructor = true .. -__count__) && 0);");
tryItOut("/*for..in*/M:for(var [__iterator__, __parent__] = <x><y/></x> in prototype) {<><x><y/></x></>;export prototype; }");
tryItOut("if(<><x><y/></x></>.valueOf(\"number\")) {gc() } else  if (({ prototype: ({ __noSuchMethod__: __noSuchMethod__, new <x><y/></x>(0x99): [] }), constructor: __iterator__ }) = prop >> <x/>) <bbb xmlns:ccc=\"eval(\"@foo\", <!--yy-->)\"><ccc:eee></ccc:eee></\fbbb> else {return;(true); }");
tryItOut("if(true) { if ((constructor = *::*)) {M:if(prop.valueOf(\"number\")) (033); else  if ([[[]]]) {return this; } } else constructor}");
tryItOut("/*for..in*/M:for(this.__defineSetter__(\"this.__parent__\", <><bbb xmlns=\"((window)()).unwatch(\"constructor\")\"><!--yy--></bbb></>) in ((Function)(((__count__ = \fcase 5: break; ).yoyo(1e+81 ? @foo : <x><y/></x>))))){return __noSuchMethod__; }");
tryItOut("L:if([1]) {let __noSuchMethod__;var __count__ = *, __iterator__ = *; } else  if (<x><y/></x>.yoyo(false)) {yield  \"\" ;export prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each([] in (__iterator__%=prototype)) {/*infloop*/M:for(const __parent__; function::__parent__.propertyIsEnumerable(\"__iterator__\"); yield;) return <x/>; }");
tryItOut("do ; while(((prototype = <><x><y/></x></>)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in null) {yield;let let = [[]]; }");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].slice)++) {L: /*infloop*/L:for(var prop = <y><z/></y>; arguments;  /x/ ) {var __count__;throw __noSuchMethod__; } } else  if ((__noSuchMethod__ = window :: this[window] >> (({ try { break ; } finally { yield __parent__; } : __iterator__, __parent__: this }) = (window.hasOwnProperty(\"constructor\"))) >>>=<><x><y/></x></>.isPrototypeOf(__parent__))) {/*infloop*/for(var __iterator__; yield prototype = (({prop setter: function  __noSuchMethod__ (__parent__)<x><y/></x>, __noSuchMethod__:  \"\"  })); [1,2,3,4].slice((prop if (<x><y/></x>)))) {export *;continue ; } } else {/*infloop*/for(var __count__ =  /x/g ; 0.1; constructor) {function (prop, __count__)1e+81 }if(__proto__) { if (((new Function(\"return 3/0;\")))(@foo, null) == ([,,].__defineSetter__(\"__parent__\", Math.sin))) var __proto__ = <x><y/></x>;} else export __iterator__; }");
tryItOut("M:do {/a/gi[1,2,3,4].slice/*for..in*/__count__for(const __iterator__ in ((\t<!--yy-->)(*::*)))__proto__ = <x><y/></x>, prototype = *::*; } while((([new (this)() for (prop in <><x><y/></x></>) for each (prop in <x/>) if ( \"\" )].propertyIsEnumerable(\"__iterator__\"))) && 0);");
tryItOut("/*for..in*/L:for(prototype in *::*.eval()) {throw @foo;{} }");
tryItOut("/*infloop*/while(@foo){this }");
tryItOut("__iterator__ = __proto__;");
tryItOut("if(({constructor:  /x/ , __iterator__:  /x/  }))  else  if (undefined--) {gc() } else ");
tryItOut("for(let y in []);");
tryItOut("do {break ; } while((<x/>) && 0);");
tryItOut("with({}) { throw __count__; } ");
tryItOut("{}");
tryItOut("for(let y in []);");
tryItOut("switch(((__noSuchMethod__ .@ __proto__).call(((yield [, , __count__])), eval(\"0.1;\", <y><z/></y>) << __iterator__ = __iterator__ / ((<x><y/></x>)[[1,,]])))) { default: case false: L:if(__count__ .@x:: ({a2:z2}).__iterator__ = [11,12,13,14].map) {yield  /x/ ; } else  if (((p={}, (p.z = 1.3)())((<><x><y/></x></> if (null))))) {let constructor = @foo, __noSuchMethod__;\tprototype = undefined; } else return;case (new [1,2,3,4].slice(this.__defineSetter__(\"constructor\", Math.sin), true)): break; break; case prototype = -1 = ([15,16,17,18].sort([1,,], *::*)):  }");
tryItOut("/*infloop*/for(constructor = (<><x><y/></x></> &= [[1]]); prototype.watch(\"__iterator__\", function  __iterator__ ()({})); .(prop = (__proto__) = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)) do {const x::__noSuchMethod__; } while((*) && 0);");
tryItOut("/*for..in*/for(let prop in \f) let __proto__;");
tryItOut("return\n");
tryItOut("return 0");
tryItOut("Math.sin");
tryItOut("for(let y in []);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const __count__ = prototype; <bbb xmlns:ccc=\t\"__count__.function::__count__ getter= ({}).__lookupGetter__\"><ccc:eee></ccc:eee></bbb>; (new function  __parent__ () { return window } ()).*) {export *; { yield [ /* Comment */<x/>] }  }");
tryItOut("/*for..in*/M:for(const new function (__proto__, prototype) { return prototype; } ().unwatch(\"__iterator__\") in ((({}).__lookupGetter__)(__iterator__ = *::*))){{if([15,16,17,18].filter(<y><z/></y>, (-0))) { if (<x><y/></x>.(<x/>)) {break ;export __parent__; }} else export *; } }");
tryItOut("throw prototype;");
tryItOut("L: {gc(){} }");
tryItOut("/*for..in*/for(__count__ in ((({ set __proto__()__proto__ = <><x><y/></x></>, __iterator__: (__proto__.constructor) }))(*::*.__lookupSetter__(\"prop\")))){{export __proto__; } }");
tryItOut("for(let y in []);");
tryItOut("this.zzz.zzz;");
tryItOut("__noSuchMethod__, ({ __noSuchMethod__: prop, prototype: prototype }) = yield ?  /x/g  : <x/>(<y><z/></y>)");
tryItOut("/*infloop*/L:for(let constructor; #0= \"\" ; (__parent__.((function(y) { yield y; gc(); yield y; }(, case 7: .__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map)))))) if(0.1)  else {//h\n__parent__, prototype; }");
tryItOut("/*infloop*/while([(@foo >= ({})) for each (__parent__ in *) if (@foo)]){yield;var prop =  \"\" ; }");
tryItOut("/*for..in*/\fL:for(var prototype in ((this.zzz.zzz)(((<x><y/></x>)(<x/>, <x><y/></x>)) % <><x><y/></x></>))){if(-0) export <><x><y/></x></>; else  if (5.0000000000000000000000) {__parent__ = 1e81; }export __proto__; }");
tryItOut("with({constructor: <><!--yy--></>})let (constructor = new (({a2:z2})).__defineSetter__(<x/> || *::*), __count__) { /*for..in*/L:for(var  /x/ .@foo.prop in *) {(({a1:1}));var __noSuchMethod__ = __count__, prototype; } }");
tryItOut("export *;");
tryItOut("/*for..in*/L:for(var __parent__ in 'fafafa'.replace(/a/g, (function () { yield <x><y/></x> } ).apply)) {constructor = -3/0;L:if(__count__ = true) L: (.2); }\n");
tryItOut("if([<><x><y/></x></> for (__count__ in [,])]) { if (void return) const prototype, __noSuchMethod__; else {<x><y/></x> }}");
tryItOut("L:if(constructor = prop) if((*)()) {export *; } else  if ((<><x><y/></x></>.@foo)) export prototype; else { { yield <x><y/></x> } *::*; }");
tryItOut("/*infloop*/for(constructor; <><xxx {__noSuchMethod__}={([<y><z/></y> != prototype].filter((this.zzz.zzz)))} /></>; <><x><y/></x></>.watch(\"__noSuchMethod__\", function(y) { yield y; throw function::constructor;; yield y; }) >> 1e+81 ..  /x/ ) {if(new (new (<x><y/></x>)(window))(null - @foo, function::__count__)) return 1e81; else  if (<x><y/></x>((prop), undefined)) {gc()throw [z1]; } else {throw var prop = <></>;;window; } }");
tryItOut("/*infloop*/while(eval(\"__parent__.__parent__ = <x/>\", <x/>)){return <x/>; }");
tryItOut("for(let y in []);");
tryItOut("try { <><x><y/></x></>; } catch(prototype if (function(){throw <><x><y/></x></>;})()) { return <><x><y/></x></>; } catch(__count__) { ; } finally { (<x><y/></x>); } ");
tryItOut("return true;");
tryItOut("M:switch( /x/g ) { case 6: break; gc()break; default: break;  }");
tryItOut("with(#1=[#1#]){if((@foo.valueOf(\"number\") | constructor.__iterator__ = eval(\"<x><y/></x>\", <x/>))) __parent__ = <><x><y/></x></>, constructor; else  if (\n__parent__ = <><x><y/></x></>)  else ; }");
tryItOut("do var __count__ = <x><y/></x>; while((*::*) && 0);");
tryItOut("/*for..in*/for(var prop = <>(('fafafa'.replace(/a/g, function  __proto__ (\t) { yield <x/> } )) for (__noSuchMethod__ in this) for (__iterator__ in 5.0000000000000000000000))</>.((constructor.( /x/ )) >> __proto__.( \"\" )) in <><x><y/></x></> *=  /x/g  ? (window.valueOf(\"number\")) : this.zzz.zzz .@*::  ''  for each (constructor in constructor).isPrototypeOf(( /x/ .*)) != new <><x><y/></x></>(0/0, 1e+81)) constructor = undefined, constructor =  /x/g ;");
tryItOut("/*for..in*/M:for(prop(yield 033; <<= (-0)) in let (constructor) *) M:with((0\t.yoyo(<x><y/></x>)))export *;");
tryItOut("if(<><x><y/></x></> > 1e81) throw [[]]; else  if (__iterator__.__iterator__ getter= Math.pow) {}");
tryItOut("switch(window.unwatch(\"__proto__\")) { case 4: /*infloop*/for(var __noSuchMethod__ = undefined; 1e+81; [1]) {break ; }L: {{}var constructor; }break; case [function ([y]) { }]: yield;break; export *; }");
tryItOut("gc()if(prop =  \"\" ) { if (null\n) {export *;yield; } else {gc()export __noSuchMethod__; }}\n'haha'.split\n");
tryItOut("__iterator__;/*infloop*/L:for([]; (1 for (x in [])); (new ([1,2,3,4].map)(<><x><y/></x></>))) return;");
tryItOut("yield;export __count__");
tryItOut("__iterator__ = constructor;");
tryItOut("if((yield 0/0.unwatch(\"__iterator__\"))) { if (([1,2,3,4].slice).call) M:if((({ get __count__ __parent__ ()false, __count__: (-0) }))) ([1]); else  if (<y><z/></y>) return; else {const __noSuchMethod__ = window; }} else \fthrow this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in __noSuchMethod__ =  '' ) {const constructor = <><x><y/></x></>, __parent__;continue L; }");
tryItOut("if((this.zzz.zzz))  for each (__parent__ in (*::*.hasOwnProperty(\"prop\"))) for (setter.__proto__ in prop.constructor = this |= <y><z/></y>) for (constructor in new  /x/ ())");
tryItOut("/*infloop*/for(let ({ ({ __iterator__: __count__ }): ({ prop: constructor, prop: ({ constructor: [], constructor: constructor }) }), __parent__: ({ prototype: ({ prop: ({ __proto__: ({ __proto__: ({ constructor: function::__count__ }) }), prototype: ({ __parent__: [__parent__, prototype, , let] }) }) }), __count__: constructor }) }) = #3={a:#3#}; ((@foo if (<><x><y/></x></>))); ([,,z1].hasOwnProperty(\"prop\")) %= __noSuchMethod__[ '' ] .@ window.throw(<><x><\fy/></x></>)) if(((new ((1 for (x in [])))(<><x><y/></x></>)) >>= (uneval(prototype)))) {gc() }");
tryItOut("");
tryItOut("/*infloop*/for((({prototype: (-0) }))++; [[1]]; (get = (((<x/>).watch).call(this, )))) {return;return; }");
tryItOut("/*infloop*/M:for(const constructor;  /x/ \t;  \"\" ) {var __proto__, __parent__ = window;\nyield;\n;[1,2,3,4].slice }");
tryItOut("{const constructor = ({a1:1}), function::__noSuchMethod__ = null; }\n(<><x><y/></x></>)\nfor(let y in []);");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].slice)) {throw __noSuchMethod__;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__ in <x/>) {; }");
tryItOut("switch(this.__defineGetter__(\"__proto__\", (function  __count__ (constructor, getter) { return [z1] } ).apply)) { default: ;break;  }");
tryItOut("{let (__parent__, constructor) {  } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do return <><x><y/></x></>; while( /x/g .__noSuchMethod__);");
tryItOut("return ( /x/ .__defineSetter__(\"__parent__\", eval));");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <x/>) {yield <x/>;continue M; }");
tryItOut("{M:with({prop: __iterator__}){constructor; }{ /x/g ; } }");
tryItOut("with({__noSuchMethod__: (({ __proto__: ({ prototype: \t__parent__, __parent__: __count__ }) }) = __count__)}){export *;L:if((++<x><y/></x>)) { if (<x><y/></x>) @foo;} else {{} } }");
tryItOut("do {/*infloop*/do {/*for..in*/for(const __proto__ in undefined) yield;if(constructor) {} else return; } while(( /x/g ).__defineSetter__(((p={}, (p.z = 4.)()))).__noSuchMethod__);{export *; } } while((new RegExp()) && 0);");
tryItOut("/*for..in*/M:for(const [prop, prop] = constructor = window in prop) yield;");
tryItOut("L: {\tvar __parent__ = false, __parent__ = <x><y/></x>; }");
tryItOut("if(this.zzz.zzz) { if (([undefined for each (__iterator__ in <x><y/></x>)] /= this.zzz.zzz)) {M:switch(yield 0/0) { default: break; case 3:  \"\" ;case 5: const __count__ = 3, __count__ = <><x><y/></x></*\n*//>; } }} else /*infloop*/\fL:for(__noSuchMethod__; <x><y/></x>;  \"\" ) {let function::prop, __noSuchMethod__; }");
tryItOut("let ([__count__, __noSuchMethod__, case 8: break; case 1e4: evaldefault: break; prototype;break; break; case window: prototype: [[1]]break; case 5: break; ([]);break; case 7: case prop: ;break; , prop, prop]) { {} } const __noSuchMethod__;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*for..in*/__count__for([prototype, prototype] = 0x99[<y><z/></y>] in <><x><y/></x></>) {yield <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in (<x/>)) (window);");
tryItOut("do do {yield <x/>; } while((<><bbb xmlns:ccc=\"(yield  /x/ )\"><ccc:eee><//h\n/ccc:eee></bbb></>) && 0); while(((__count__.yoyo(this))) && 0);");
tryItOut("let(constructor, ({ __iterator__: __noSuchMethod__ })) ((function(){prototype = prototype;})());");
tryItOut("/*infloop*/L:for(__count__; (break ); (__count__.__iterator__ = window\n)) /*for..in*/for(let [__noSuchMethod__, __iterator__] = false.throw(null) in <><x><y/></x></>) {(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(const __noSuchMethod__; window; <y><z/></y>) {gc()throw  \"\" ; }");
tryItOut("{prototype; }");
tryItOut("return  /x/g ;");
tryItOut("/*infloop*/do {/*for..in*/for(var [__iterator__, __noSuchMethod__] = 'fafafa'.replace(/a/g, gc) in <y><z/></y>) /*for..in*/M:forprototype = null in ({a2:z2})) (<x><y/></x>); get constructor __parent__ (constructor, __iterator__) { yield prototype = <x/> }  } while((<x><y/></x>.throw(__iterator__)));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in new \n(([<><x><y/></x></> ..  \"\" ]))()) /*infloop*/for(const ({ constructor: ({ prop: ({ prototype:  set __iterator__ prototype (__count__) { \ntrue; } , __noSuchMethod__: ({ __count__: __noSuchMethod__, __proto__: __parent__ }) }), __iterator__: ({ __noSuchMethod__: ({ __count__: prop, prototype: prototype }), __parent__: __noSuchMethod__ }) }), __noSuchMethod__: [] }) = __proto__.__proto__ = [11,12,13,14].sort; #3={a:#3#}.* <= arguments.eval( /x/g ); null.@foo) {}");
tryItOut("M:if(<><x><y/></x></>) { if ((<><x><y/></x></>.__lookupGetter__(\"prototype\"))) {(<y><z/></y>); }} else {( /x/g );gc() }");
tryItOut("L: {export *;\nreturn this;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in <><x><y/></x></>) {(1e+81);continue L; }\n{}\n");
tryItOut("switch(( /* Comment */<employee id=\"1\"><name>Joe</name><age>20</age></employee> || 3/0.__lookupGetter__(\"__count__\")))\f { default: break; case 2: let(prototype = undefined) ((function(){prop = function(id) { return id }, constructor = (-0);})());case __count__ = #1#: break; break; break; case  /x/ : case 7: throw 0x99;break;  }");
tryItOut("if(prop) {return <><x><y/></x></>;return; } else  if ([1,2,3,4].map(((__parent__--)), 0x99)) gc()");
tryItOut("/*for..in*/for(var (__count__) in <x><y/></x>) {return  /x/g ;return; }");
tryItOut("L: throw StopIteration;");
tryItOut("while((*::*) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in true) {yield false;*::*; }export __noSuchMethod__; }");
tryItOut("if(1e-81 ? window : undefined) { if (prop.( /x/g )) {const __parent__ =  \"\" ;return <x/>; } else {let __parent__;1e81; }}\nthis");
tryItOut("/*for..in*/for([__iterator__, __proto__] = *::* in undefined) {/*for..in*/M:for(constructor in (([,,])(<y><z/></y>)))set = false; }");
tryItOut("throw  /x/ ;\ndo export *; while(((new (__proto__)(constructor, __parent__))) && 0);\n");
tryItOut("with({__parent__: __iterator__ = ((Math.sin).call(033, __noSuchMethod__))})with((eval(\";\", null))){ }");
tryItOut("L: {if([15,16,17,18].sort(new Function, window)) L:if(false) { if (\n<x/>) } else throw <><x><y/></x>\r</>; else  if ( '' ) {; } }");
tryItOut("L:with(){export *; const __parent__;with( \"\" ){continue L;export *; } }");
tryItOut("/*for..in*/for(const prop in (([1,2,3,4].map)(<><xxx {prop}={({ __proto__: __noSuchMethod__ }) = \f<><x><y/></x></> ^= [window].filter(function  __iterator__ (constructor, __proto__) { ; } )} /></>))){/*infloop*/M:for(var [] = __noSuchMethod__; (__noSuchMethod__ = ({a2:z2})); <x><y/></x>.throw(<><x><y/></x></>) += (new (window)())) return; }");
tryItOut(";");
tryItOut("yield <y><z/></y>");
tryItOut("__iterator__ = __parent__;");
tryItOut("yield window\n");
tryItOut("return;if([,,z1]) {/*infloop*/for(4.; @foo; __proto__) x::__parent__, constructor = <y><z/></y>;if( /x/g ) let __proto__ = window, __noSuchMethod__ = arguments; else  if (prototype) {break ;export *; } } else  if ([15,16,17,18].\fsort((1 for (x in [])), (constructor.valueOf(\"number\")))) {if(function::prototype) { if (undefined) {return; }} else gc()continue ; } else L:switch(let.yoyo(function ([y]) { })) { default: \nbreak;  }");
tryItOut("/*for..in*/for(let __parent__ in true) yield;L:with({__count__: new Function(*::*)}){const __proto__; }");
tryItOut("this");
tryItOut("/*for..in*/for(prop(<><x><y/></x></> * __proto__) in ((1e-81 >>> *)(constructor.yoyo(window))))let __count__ = __iterator__, __count__ = *::*;");
tryItOut("/*infloop*/while(<x/> >>= new Error()){with( /x/ )export *; }");
tryItOut("__iterator__\nreturn 3.141592653589793;");
tryItOut("/*for..in*/L:for(*::*['__iterator__'] in ((eval)(<y><z/></y>.@* != 1.3 -= <y><z/></y>))){<><x><y/></x></>; }");
tryItOut("for(let y in []);");
tryItOut("{{const __noSuchMethod__; }export __count__; }");
tryItOut("{/*for..in*/for(let [prototype, __iterator__] = <><x><y/></x></> in  /x/ ) {}return; const prop; }");
tryItOut("\nL:with(1.2e3){yield <y><z/></y>; }");
tryItOut("if(<xxx>{__parent__}</xxx>.(++\fnull)) {/*infloop*/while(([ /x/g ].filter(033)))return  /x/ ; } else  if (__count__-=({prototype: (/a/gi).call(-0, ) })) return false.__parent__;");
tryItOut("/*infloop*/for(function::__parent__; 4.; (-1)) export *;");
tryItOut("<x><y/></x>;");
tryItOut("L: if(new (__iterator__ =  /x/g )()) { if (arguments) ;} else gc()");
tryItOut("/*for..in*/for(constructor in prototype = 3.141592653589793) {gc() }");
tryItOut("/*infloop*/for(prototype = 'fafafa'.replace(/a/g, [1,2,3,4].map); this.zzz.zzz; \tthis.zzz.zzz) {do ; while((window) && 0); }");
tryItOut("new ({ prototype: [] })().__iterator__ = prop;");
tryItOut("/*for..in*/L:for(const prop = false > @foo in (Number(*::* ? <x/> : null, ({a1:1})))) yield;");
tryItOut("L:if(0) <><x><y/></x></> else  if (x::prototype: <y><z/></y>) {yield <x><y/></x>;export function::__parent__; }");
tryItOut("{return;/*for..in*/for(var var __parent__ = function(id) { return id }; in ((({}).__lookupGetter__)(__parent__ = 1.3))){return [[1]];gc() } }");
tryItOut("yield;");
tryItOut("L:while((*) && 0){throw  \"\" ;/*for..in*/L:for(prop in ((Math.pow)(<x><y/></x>))){yield; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in ((<x><y/></x> for (__parent__ in window)))) {constructor = <><x><y/></x></>, __parent__ = arguments;let __proto__ = <y><z/></y>, prototype; }");
tryItOut("{yield <y><z/></y>; }");
tryItOut("return;");
tryItOut("/*for..in*/for(let __iterator__ in ({})) throw true;");
tryItOut("L:while((({__iterator__: <x><y/></x>.__parent__ })) && 0)yield prototype = window;\f");
tryItOut("{L: {yield;return; } }");
tryItOut("/*for..in*/for(let constructor in ((<x><y/></x>.yoyo([,,]))(5.0000000000000000000000.__lookupSetter__(\"__parent__\")))){export *; }");
tryItOut("gc()\nlet (__parent__, each = prototype) { const __iterator__, prop; }\n");
tryItOut("/*infloop*/L:for(var __proto__ = __parent__.eval(<x/>).constructor; this | ({a1:1}); __noSuchMethod__ = gc().__lookupSetter__(\"__proto__\")) { /x/ #1#/*\n*/ }");
tryItOut("M:with({setter: <x><y/></x>.yoyo(window)})var prop = <x><y/></x>;");
tryItOut("{yield <><x><y/></x></>; }");
tryItOut("if(( /* Comment */*).watch(\"prototype\", Function)\t) L:if(<x><y/></x>.eval(0/0)) { if (window) ( '' );} else var __parent__; else  if (yield export *) {const __noSuchMethod__, prototype;with({prototype: <x/>})yield this; }");
tryItOut("throw constructor;");
tryItOut("/*infloop*/do /*for..in*/for(__proto__ = *::* in __proto__) {throw  '' ; } while(-__noSuchMethod__ = <><bbb xmlns=\"new <><x><y/></x></>()\">yyy</bbb></>);");
tryItOut("/*infloop*/fordefault: break; (var __noSuchMethod__<xxx>{__parent__}</xxx> throw StopIteration;; __count__.__count__) const constructor = __noSuchMethod__;");
tryItOut("let (prop = __iterator__) { {if(-3/0) {@foo; } else {yield; }\nL: {let prop = 1e81, __count__ =  \"\" \n }\n } }");
tryItOut("/*infloop*/while(<x/>)return;");
tryItOut("yield [z1,,];");
tryItOut("if(0x99) __count__;");
tryItOut("with({__count__: Boolean(([,,].hasOwnProperty(\"__iterator__\")), (eval(\" /x/g \", <><x><y/></x></>)))}){\f\f }");
tryItOut("let __proto__\nif(<y><z/></y>) {yield;let delete = 4.; } else  if (@foo) ");
tryItOut("/*infloop*/for((eval(\"if(0.1) let __proto__ = #3={a:#3#};\", <><x><y/></x></>) .@x:: (\t(function  __proto__ () { export *; } ).apply)( '' )); (<x><y/></x>.__proto__ = (--<x><y/></x>)); each.__parent__ = <x><y/></x>) {; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("do \f{export __count__;prototypereturn; } while((__proto__ = __parent__) && 0);");
tryItOut("with((function (__proto__) { <y><z/></y>; } )((-0), -0))M:switch(@foo) { case <y><z/></y>: {throw -1;yield <x><y/></x>; }break;  }");
tryItOut("/*infloop*/for(var prototype; eval(\"__iterator__\", window).@foo; [15,16,17,18].map((1 for (x in [])), (-1))) {const __parent__ =  /x/ ; }");
tryItOut("do {while((__parent__) && 0)'haha'.splitreturn <y><z/></y>\f; } while((<y><z/></y>) && 0);");
tryItOut("{throw ({a1:1}); }");
tryItOut("{}\n");
tryItOut("Math.sin\nexport constructor;");
tryItOut("{/*infloop*/L:for(let ({ __parent__: ({ __parent__: prototype }), __noSuchMethod__: __noSuchMethod__ }) = <><xxx>{__parent__}</xxx></>.constructor; 1.2e3; this.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)) L:if(prop) {} else {const prototype = this; }export *; }");
tryItOut("/*infloop*/do { '' ;/*infloop*/for(({ __noSuchMethod__: __count__ }) = *(1e4); this;  \"\" .unwatch(\"__parent__\")) {export *;export __parent__; } } while(void (new function  __iterator__ (prototype) { return prototype } (<><x><y/></x></>)).watch(\"prop\", function(q) { return q; }));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var 3/0 in null) {export *;return <y><z/></y>; }");
