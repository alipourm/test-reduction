tryItOut("M:if(<xxx {__proto__}={((constructor|= '' ))(((p={}, (p.z = false)())))} />) { if (true) {var __iterator__ = constructor; }} else {; }");
tryItOut("return <zzz>(undefined)( /x/g )</zzz>;");
tryItOut("yield 'fafafa'.replace(/a/g, (new Function(\"throw null;\")));");
tryItOut("if((p={}, (p.z = (@foo ? [z1,,] : prototype).hasOwnProperty(\"__parent__\"))())) {;/*infloop*/M:do { } while(!@foo); } else  if ((function ([y]) { })()) {break ;\n;\n }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) throw __parent__;");
tryItOut("let(function::__iterator__, prototype) { throw constructor;");
tryItOut("/*for..in*/L:for(var [__count__, prototype] = (({__noSuchMethod__: @foo, prototype: (new *(@foo)) }) for each (__proto__ in null) for (prop in __proto__) if (__count__\t)) in (__proto__.( /x/g ))) export constructor;");
tryItOut("throw <x/>;");
tryItOut("return;");
tryItOut("if([@foo]) {/*for..in*/L:for(__parent__ in ((function  __parent__ (prototype, constructor) { return *::* } )(<x><y/></x>.unwatch(\"function::__iterator__\")))){export *; } } else  if (new (Function)()) M:if(yield ({__iterator__: <x><y/></x>})) export __parent__; else {(null).watch }");
tryItOut("const __iterator__, prop = arguments;");
tryItOut("switch(new ((void <x/> .@x:: this.*))((new Array()))) { default: L: {yield;\f }case (<><></></>)(([\n(1e81 for (prop in true))].sort(Math.pow))): throw __iterator__;break;  }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, constructor] = prop in __noSuchMethod__) {export __iterator__; }");
tryItOut("/*for..in*/for(var prop = (Math.pow)() in #1#) {return; }");
tryItOut("prototype = __proto__;");
tryItOut("<><x><y/></x></>\nreturn <x><y/>\f</x>;");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) {/*for..in*/for(var [<x/>, prop] = this in 1.3) {var __noSuchMethod__, __parent__; }const __parent__, __iterator__; } else prop; const constructor;");
tryItOut("/*for..in*/for(const constructor in let (__parent__) prop = __count__) {throw window;var __iterator__ = 3.141592653589793; }");
tryItOut("__parent__ = 1e+81, constructor = <><x><y/></x></>;\n<x><y/></x>;\n");
tryItOut("if((<x/>\n)) {/*infloop*/M:do __parent__ = this, constructor; while([<><x><y/></x></>]); } else {yield; }");
tryItOut("gc()\nexport prototype;");
tryItOut("switch((p={}, (p.z = [1])())) { case (__iterator__)[function::__count__]:  }");
tryItOut("if(constructor = *) { if (continue ;) return;} else /*infloop*/M:for(__proto__; #1# = constructor; [z1,,]) {/a/giexport *; }");
tryItOut("{/*infloop*/while(__noSuchMethod__ ?  /x/g  : this)export *;<x><y/></x>; }");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("if(null) ([15,16,17,18].some(Math.sin, (__count__.__parent__ = *::*))) if(this) {gc() } else {continue ;return; }}");
tryItOut("{}");
tryItOut("/*infloop*/M:do {} while((function ([y]) { })());");
tryItOut("/*infloop*/while((__noSuchMethod__ = [z1].throw([z1]))){if() {/*for..in*/for(let prop in ((this)(<x><y/></x>)))const prop; '' ; } else  if (prototype = <><x><y/></x></>.valueOf(\"number\")) if(<y><z/></y>) gc() else \t if ( /x/g ) <x><y/></x>; else (1 for (x in []))if(undefined) {( /x/ ).__defineSetter__const prop; } }");
tryItOut("/*infloop*/for(let __noSuchMethod__; @foo :: prop; (yield [11,12,13,14].filter).@foo) __parent__ = prototype;");
tryItOut("/*infloop*/for(__parent__ = [z1,,]; <x/>; true) (@foo);");
tryItOut("M:if(new (1 for (x in []))(<y><z/></y>)) /*infloop*/M:for(<y><z/></y>.yoyo( \"\" ); __parent__.(<x/>); \n(__iterator__ @ this)) {export *; } else {/*infloop*/M:for(var ({ ({ __iterator__: __proto__ }): [] }) = constructor = constructor; (<xxx>{__iterator__}</xxx>.(window)); ({ prop: __noSuchMethod__, prototype: constructor })) function () { yield this.__defineSetter__(\"__count__\", 'haha'.split).@foo }  }");
tryItOut("if(__proto__) { if ( ''  >> window.__proto__ = __parent__) break L;} else {export prop; }");
tryItOut("if([] = (([1,,].eval((new (new Function(\"\"))(4., 033)))) | (__count__ = undefined\t for (constructor in  /x/ ) for (__proto__ in window) for (__iterator__ in @foo)))) \n else let (constructor) { /*\n*/{M:if(undefined) {return <y><z/></y>;let __proto__ = *::*, constructor = this; } else  if (([z1].*)) ; } }");
tryItOut("let (({ __count__: [] }) = (-0).yoyo(this), __proto__ = this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))) { /*infloop*/do {.2; } while(+<y><z/></y>); }");
tryItOut("if() {yield; }");
tryItOut("with({}) { prototype = constructor; } ");
tryItOut("/*infloop*/L:for(let __parent__ = <><x><y/></x></>; 1.3; window) {throw <x><y/></x>;const __iterator__, __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__.constructor in *::*) export prop;");
tryItOut("switch((((new (false)())).__defineSetter__.propertyIsEnumerable(\"prop\"))) { case 5: {<><x><y/></x></> } }");
tryItOut("if( \"\" ) {({}).__lookupGetter__; } else  if (<y><z/></y>) export *;");
tryItOut("with({prototype: __noSuchMethod__}){constructor = gc\t;/*for..in*/for(let __noSuchMethod__ = ( \"\"  , [z1]) in <x><y/></x>) {var __iterator__ = 1.3, constructor; } }");
tryItOut("with({}) { return 1e+81++; } ");
tryItOut("/*for..in*/\fL:for(__proto__ in 1e-81 |= [,,]) {null;{} }");
tryItOut("/*infloop*/M:while((({__noSuchMethod__: [z1,,], prop: false }))(<x><y/></x>.watch(\"prototype\", function  prototype (__count__, prototype) { continue ; } ), <y><z/></y>)){break ; }");
tryItOut("L: /*infloop*/M:do (4.).watch while((({prop:  \"\"  })));");
tryItOut("__iterator__");
tryItOut("with({prototype: \nconstructor = (null >>= *::*)}){/*infloop*/for(undefined; try {  } catch(__count__) { yield; } finally { gc() } ; <x><y/></*\n*//x>) export __proto__;yield; }");
tryItOut("L:with({constructor: __proto__.prop = (({ get __count__ __count__ (__iterator__) { ; } , constructor: true }))})if(3/0.valueOf(\"number\")) { if (<{__count__}><ccc:ddd></ccc:ddd></{__count__}>.(prop.(__noSuchMethod__)).__count__) if(window.throw(*::*)) {function(q) { return q; }return; } else  if (null) {export prototype;yield; } else {} else gc()}");
tryItOut("/*for..in*/for(let <><x><y/></x>\r</> in 033) function (prototype) { yield <y><z/></y> } ");
tryItOut("gc()\n");
tryItOut("L:if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {;export *; }");
tryItOut("/*for..in*/for(const constructor in ((({}).__lookupGetter__)(<xxx {__iterator__}={__noSuchMethod__ ?  /x/g  : false} />))){yield __count__; }");
tryItOut("M:if((({}) .@ )) ; else  if ((uneval(null))++) gc()\n__parent__ = __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("prop\n");
tryItOut("do {if('haha'.split) switch([1,,]) { default: case function(id) { return id }: yield;break; return;case false: case *::*: break; case 6: function  prop (__proto__) { return <><x><y/></x></> } case  '' :  } else  if (([].yoyo(<y><z/></y>))) __proto__ = @foo, function::prop = <y><z/></y>; else ; } while((__parent__ = *::*(<x/>.@*, ({ set constructor(constructor) { yield <x/> } , __parent__: undefined }))) && 0);");
tryItOut("with({__parent__: \n /x/g }){export constructor;export __iterator__; }");
tryItOut("/*infloop*/for(<><x/></>; @foo; (([ /x/g ].sort(Math.sin)) for each (__proto__ in [1,,]) if ( '' \n))) {(<x><y/></x>).watch }");
tryItOut("{}");
tryItOut("/*for..in*/for(var [prototype, __parent__] = __proto__ =  \"\"  in __count__) {/*infloop*/L:while((new (033)(<><x><y/></x></>, <y><z/></y>))){(undefined); } }");
tryItOut("with({}) throw __parent__;");
tryItOut("while((__count__ = prototype) && 0)prototype, prop;");
tryItOut("return function::__noSuchMethod__ = ++prop;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for(__noSuchMethod__ = (eval(\"/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in <x><y/></x>.__lookupGetter__(\\\"__noSuchMethod__\\\")) export *;\", {})) in ([15,16,17,18].map('haha'.split, (([1,2,3,4].slice).call(<x><y/></x> >>=  '' , *::* /=  /x/g , __proto__))))) with({__proto__: ({ set __iterator__(prop, constructor) { yield *::* }  })})__count__");
tryItOut("\nreturn;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in #1=[#1#]) { { yield <x><y/></x> }  }");
tryItOut("(1.2e3);");
tryItOut("if(<x><y/></x> if (prop) <= <><bbb xmlns=\" '' \"> </bbb></>) {__iterator__, __iterator__; } else  if (new ({}.propertyIsEnumerable(\"__parent__\"))()) {with((constructor.constructor = <x/>)){export *; }if(3/0) {yield\nthrow  \"\" ; } else  if ((new <x/>(-0, 0.1) += new Object())) while((window) && 0){} else prop }");
tryItOut("; const prop;");
tryItOut("/*for..in*/for(var __parent__ in (new function  __noSuchMethod__ ()3(__proto__, prop))) with\f({prop: __iterator__.__iterator__ setter= <><x><y/></x></>})(<x><y/></x>);");
tryItOut("/*infloop*/while(arguments[@foo]){export *;var __proto__, __count__; }\nexport __parent__;");
tryItOut("\fswitch(<{__proto__}><!--yy--></{__proto__}>) { default: break; \rlet \n(({ __iterator__: ({ __noSuchMethod__: [, __iterator__, ], ({ prop: constructor, __iterator__: __parent__ }): ({ prop: __parent__ }) }) }) = [,] == *::*, __proto__ = 'fafafa'.replace(/a/g, (new Function(\"{}\")))) { {return __proto__; } }break; break;  }");
tryItOut("if(<x><y/></x> >= yield __count__; == 1.3 <= <x><y/></x>) {with({}) { __iterator__ } while((*) && 0)return; } else  if (__iterator__) {let __proto__, __proto__ = prop; } else /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in  /x/g ) Math.pow");
tryItOut("L:do {export *;\fgc() } while(((new __proto__())) && 0);");
tryItOut("");
tryItOut(" /x/ .constructor = constructor;");
tryItOut("/*for..in*/for(var prop in ((((__iterator__.constructor = <x/>)).watch)((function(y) { yield y; const  return  = __proto__, __count__;; yield y; })()))){{ /x/ ; } }");
tryItOut("__count__ = __count__;");
tryItOut("L: {__noSuchMethod__;/*for..in*/for(var __count__ in ((null)(0/0))){; } }");
tryItOut("/*infloop*/while((.2).__defineSetter__(([ /x/ ].map((@foo).__defineSetter__)), <x/>))const __iterator__ = @foo, __iterator__ = *::*;\nreturn;\n");
tryItOut("/*for..in*/M:for(const [prop, __count__] = eval(\"(__parent__ = prop = __count__)\", <x><y/></x>.watch(\"__proto__\", /a/gi)) in __count__ = [<y><z/></y>].sort(function(y) { yield y; ;; yield y; })) {gc()return; }");
tryItOut("/*for..in*/for(prototype in ((/a/gi)(this.zzz.zzz())))/*for..in*/M:for(__count__ in false) ([z1]);");
tryItOut("/*infloop*/while(5.0000000000000000000000)return 0.1;");
tryItOut("yield;\n/*for..in*/for(__proto__ = *::* in <><x><//h\ny/></x></>) throw *;\n");
tryItOut("/*infloop*/for(let ({ prototype: __iterator__ }) = __parent__; <><!--yy--></>.unwatch(\"constructor\"); [11,12,13,14].sort) {((-1)); }");
tryItOut("while(((yield __count__)) && 0)return eval(\"break M;\", yield <><x><y/></x></>); const __parent__;");
tryItOut("{if(( \"\" )[<x/>]) export __proto__; else ; }");
tryItOut("let constructor = undefined; const constructor;");
tryItOut("if((__count__.__count__)) { if (<x><y/><\f/x>.__noSuchMethod__ = *) break ;continue ; else {if(new ((#1#).watch)() instanceof prototype =  \"\" ) {yield;var __iterator__ = this; } else  if (eval(\"const constructor, __noSuchMethod__ =  /x/ ;\", true) || <x><y/></x>) /*for..in*/for(const __iterator__ in function::({a1:1})) continue ;L/*\n*/:with(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)yield <><x><y/></x></> }}");
tryItOut("with((this.zzz.zzz))constructor");
tryItOut("if(__noSuchMethod__ = 0.1) gc() else continue ;");
tryItOut("/*infloop*/for(let ({ __parent__: prototype, __count__: __parent__ }) = *.throw(<x><y/></x>); let (<><x><y/></x></> = <x/>) *::*; 3 + this) {constructor; }");
tryItOut("L:switch(((( /x/g .__noSuchMethod__ = [1,2,3,4].slice) + 1e+81 !== 3.141592653589793)++)) { case (__proto__.prop):  }");
tryItOut("L:with(([1]\n)){return; }");
tryItOut("const __parent__;");
tryItOut("/*infloop*/L:do {if(<x><y/></x> %= __count__) {return 1.3;; } else  if ( /* Comment */<><x><y/></x></>.unwatch(\"let\")) export __noSuchMethod__; else {gc() }/*infloop*/for(var prototype =  \"\" ; <x/>; [[]]) let __count__ = false; } while(@foo / [1].hasOwnProperty(\"__noSuchMethod__\")((<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")), [15,16,17,18].map(<y><z/></y>, (* - this))));");
tryItOut("L:do {[1,2,3,4].map } while((this.__defineGetter__(\"__count__\", this)) && 0);");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in *::*) {(false); }");
tryItOut("{L: ;export __iterator__; }");
tryItOut("return;");
tryItOut("yield;\n;\n");
tryItOut("do {let __proto__;L: {continue L; } } while(((p={}, (p.z =  for (__count__ in  /x/g ) if (<x/>))())) && 0);");
tryItOut("let __count__ = *, __proto__ const prop;");
tryItOut("M:if(*) { if (constructor = __proto__) {var __iterator__ =  /x/g ;var __proto__ = this; }} else let null = <x/>, constructor =  /x/g ;");
tryItOut("\twhile((undefined .. (((new ((yield <x><y/></x>))())[(new <y><z/></y>())]))(<><x><y/></x></>.__iterator__ = <><x><y/></x></>,  /x/g )) && 0)constructor = -3/0;\n/*for..in*/for(const __iterator__ in (((function ([y]) { })())(undefined))){let prototype; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const * in (<><x><y/></x></> >>>=true)) yield;");
tryItOut("if(*)  else {const __noSuchMethod__, __iterator__ = true; }");
tryItOut("if('fafafa'.replace(/a/g, ( /x/g ).call)) (prototype%=__iterator__);");
tryItOut("/*infloop*/M:do with({__count__: 1e-81.valueOf(\"number\")})gc() while(<y><z/></y> ? [,,z1] :  \"\" );");
tryItOut("with({}) { __parent__ = prototype; } ");
tryItOut("L: ");
tryItOut("{L: {__proto__ = <x/>;yield -1; } }");
tryItOut("M:if(<><x><y/></x></>) { if (033) break ; else export *;}");
tryItOut("return;");
tryItOut("var prototype = *::*, __count__ = prototype;");
tryItOut("do export *; while((prototype|= \"\" ) && 0);");
tryItOut("/*for..in*/for(const prototype.__count__ in new ((null).__defineSetter__).call(true && <x><y/></x> === this)) {\n }\n/*for..in*/for(const __noSuchMethod__(__iterator__) in ((function (__proto__, prop) { let __parent__ = <x><y/></x>, prototype = 0x99; } )(((1 for (x in []))(<x><y/></x>, <y><z/></y>)))))return;\n");
tryItOut("/*for..in*/for(var \n(({prototype: <><x><y/></x></> })).prop = eval(\"var prototype =  /x/g ;\", this.zzz.zzz) in ~<><x><y/></x></>[<><x><y/></x></>\f]) /*for..in*/for(var (3/0)(<><x><y/></x></>) in false) yield;continue ;");
tryItOut("L:\fwhile(((((__iterator__ = <y><z/></y>) for (constructor in <x/>)).*)) && 0)var prototype = #3={a:#3#}, __noSuchMethod__;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = ( /x/ )().__lookupSetter__(\"__noSuchMethod__\"); ((new (Math.sin)(__parent__)) ? window |= throw prototype; : <><x><y/></x></> ^= 1.3); (++(let __parent__ =  /x/ , __proto__;)(<><x><y/></x></>))) {__parent__ = <x><y/></x>; }");
tryItOut("if(arguments.hasOwnProperty(\"__proto__\")[({})]) gc() else  if (((function(y) { yield y; return;; yield y; }).call(*, ))) {export prototype; }");
tryItOut("/*infloop*/do {{}return *::*; } while(<x><y/></x>)\n");
tryItOut("if(window !== <><x><y/></x></>(<x><y/></x>(<y><z/></y>, -0), constructor)) {{}var __count__; } else  if (<x/>.propertyIsEnumerable(\"__parent__\"))  else {}");
tryItOut("if(constructor.__parent__ getter= 'haha'.split) { if (function  prototype (\f) { return 1.2e3 } ) gc() else /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in 1e81)  /x/g }");
tryItOut("if(({__iterator__: <x><y/></x>})) { if (constructor-=<y><z/></y>) {var __iterator__ = true, prototype;if(<x/>) ; else  if (window) {let __iterator__, prototype = __count__;(function ([y]) { })(); } }} else {return; }");
tryItOut("if(({ __parent__: __parent__, __iterator__: prop }) = prototype = true.eval(.2.isPrototypeOf( '' ))) if(function::constructor.__lookupSetter__(\"__noSuchMethod__\")) { if ((<y><z/></y>)[<x><y/></x>]) {const __noSuchMethod__; } else throw *;} else  if ([__count__ = case 6: (<x/>);break; <y><z/></y>;default: export *;case 1: break; break; case 0: case 1: ;break; case  /x/g : break; var __proto__ = <y><z/></y>;break; ]) if(<x><y/></x>) {throw window;export constructor; } else {export constructor;<><x><y/></x></>; } else {try { {} } finally { export *; } \f }");
tryItOut("return;");
tryItOut("if(__iterator__|=<y><z/></y>) { if (0.1) return;} else {([]); }");
tryItOut("\n/*infloop*/do {{}constructor, __iterator__ =  '' ; } while(undefined);");
tryItOut("do  while((((yield (__parent__(@foo, this))))) && 0);");
tryItOut("switch(<><x><y/></x></>) { case 6: break;  }");
tryItOut("with({__iterator__: [[z1]].filter(function(q) { return q; })})/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <><x><y/></x></> for each (__iterator__ in  /x/ )) __proto__, __proto__ = (function ([y]) { })();");
tryItOut("/*for..in*/for([__count__, constructor] = __proto__ = prop in <><x><y/></x></>.unwatch(\"prop\")) (<x><y/></x>);L:if(<><x><y/></x></>(@foo)) {continue ; } else {*;(-0); }");
tryItOut("/*infloop*/for(const \t({ prop: __count__ }) = ;; (@foo / #1#);  \"\" ) (*::*)[<><x><y/></x></>];");
tryItOut("L: break M; const constructor;");
tryItOut("/*infloop*/for(let __iterator__; (eval(\"yield;\", [z1])).yoyo(('fafafa'.replace(/a/g, Math.sin))); (( /* Comment */<x/>)(M))) {/*infloop*/for(const __proto__; __iterator__.prop; ) {export prop; } }");
tryItOut("/*infloop*/while(1e81){return; }");
tryItOut("if(@foo) throw 5.0000000000000000000000;");
tryItOut("L: {yield <><x><y/></x></>;gc() }");
tryItOut("let([[({ __noSuchMethod__: __iterator__, prototype: __parent__ }), , prop], , , ({ prop: [], __iterator__: __noSuchMethod__ }), ({ __proto__: __parent__ })], getter = (false.eval(true))) { with({}) x::__noSuchMethod__.prop = __proto__;");
tryItOut("/*infloop*/M:for(let ({ __count__: ({ prototype: ({ __noSuchMethod__.__iterator__: [, [constructor], , ], prop: ({ prototype: prop }) }), prototype: [, ] }) }) = eval(\"eval(\\\"export __noSuchMethod__;\\\", <><x><y/></x></>)\", 1.2e3); __noSuchMethod__ = ({__noSuchMethod__, prop: <y><z/></y> }); ({__proto__: /a/gi }) << (/a/gi).call(__noSuchMethod__, undefined, (({constructor: *::*})))\n) switch(eval(\"throw [1];\", <y><z/></y>) + 3.141592653589793.unwatch(\"__count__\")) { default: /*for..in*/for(var let in ((Math.pow)(<x/>)))return  \"\" ;case 6:  }");
tryItOut("if(({__parent__: #1#})) (({a2:z2}));");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var [, __count__, [[[(yield)], , , ], __count__, , [__count__, , , __count__, ],  { yield let = <\fx><y/></x> } ], , [({ function::__parent__: prototype }), , ({ x::__noSuchMethod__: ({ constructor: [[], , ], __parent__: var __proto__; }) })]] in -\n(new *(__noSuchMethod__, 0/0).valueOf(\"number\"))) {let prototype = __iterator__ << window\n }");
tryItOut("const __noSuchMethod__ = false;\n;\n");
tryItOut("/*infloop*/do {let (__parent__ = this) { return <x><y/></x>; }(<x/>); } while(this.zzz.zzz);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __noSuchMethod__ in function ([y]) { }) {yield; }");
tryItOut("switch(( '' )(3/0)|=*::* >>>=4.) { case  /* Comment */__iterator__ = -1: function  prop (__parent__, prototype) { return __proto__ } break;  }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: __iterator__.__iterator__, __iterator__: __noSuchMethod__ }) = __noSuchMethod__ = <xxx {__proto__}={eval(\"<><x><y/></x></>\", 4.) | ((new Function).call([], ))} />; new <x><y/></x>.yoyo(__iterator__ = prototype\t); (this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }))) {return .2;/*infloop*/for(constructor = @foo; <><x><y/></x></>; undefined) {{}{} } }");
tryItOut("{with({}) return; }");
tryItOut("with(((function ([y]) { })() ^= @foo)){ }");
tryItOut("with({}) let(constructor = ((new Function(\"const __noSuchMethod__, constructor = ({});\")))(<x><y/></x>, __count__)) { export *;");
tryItOut("return <xxx>{__count__}</xxx>.((setter\f)); const prototype;");
tryItOut("/*for..in*/for(var prototype = (function  constructor (__count__)*).call(({ prop: prototype }) = *, ((uneval((-1) == undefined))), \n(--(__count__ = __iterator__))) in (p={}, (p.z = Function(([11,12,13,14].filter), @foo))())) {break M;(null); }");
tryItOut("if(new Boolean()) { if (__parent__.__iterator__ getter= ({}).__lookupGetter__) yield; else {(yield  /x/ ) }}");
tryItOut("M:while(((function (__noSuchMethod__) { return __noSuchMethod__ <<= this } (default: case 3: break; return;break; )).yoyo((<y><z/></y>()) >>> __noSuchMethod__.__proto__ setter= function (__count__, prop) { yield  ''  } )) && 0)yield\nexport *;");
tryItOut("let(prop, constructor) ((function(){let(__count__) ((function(){constructor, __parent__;})());})());");
tryItOut("switch(<x><y/></x>) { default: case null = -3/0: break M; }");
tryItOut("{yield; }");
tryItOut("let (prop = (Function).call(__parent__ =  \"\"  for each (prototype in  /x/ ) if (<><x><y/></x></>), prop)) { if(<y><z/></y>)  else {window;[z1,,] } }");
tryItOut("/*infloop*/for([11,12,13,14].some; (([,,] <=  '' ).throw()); ([function(id) { return id } + .2])) let __noSuchMethod__ = ({a2:z2}), __parent__;");
tryItOut("switch(yield __parent__ = <x><y/></x>.isPrototypeOf(constructor.(window))) { case 1: break;  }");
tryItOut("if() ; else throw #1#;");
tryItOut("M:with(((<><x><y/></x></>).call != @foo.yoyo(<y><z/></y>)).__defineGetter__(\"function::delete\", ((<x/>)()).watch))while((this.zzz.zzz) && 0){export __iterator__; }");
tryItOut("/*infloop*/for(#2=({__proto__: new <><x><y/></x></>().prop.yoyo((new Function).call(<><x><y/></x></>, (x::__parent__.__iterator__ setter= <\t><x><y/></x></>), <x><y/></x>))}); (function (__parent__, __noSuchMethod__) { ({}).__lookupGetter__ } (prop = `).isPrototypeOf(@foo instanceof <x><y/></x>)); <><x><y/></x></>.__proto__ = *) {const __iterator__;return (<x/>)[__parent__]; }");
tryItOut("L:with({constructor: (({__count__: *::*})).@*})/*infloop*/L:for(<x/>; <x/>; <><x><y/></x></>) {}");
tryItOut("/*infloop*/for(let __iterator__; delete: [15,16,17,18].filter( '' , false\f); __noSuchMethod__ = __count__) let (__proto__ = (new (<x><y/></x>)())) { export *; }");
tryItOut("/*infloop*/M:for(constructor; [1,,]; (yield (\r__proto__.constructor = __proto__ = <x><y/></x>))) {export *;/*for..in*//* nogeckoex bug 349964 */ for  each(var (__parent__) in  '' ) {function (window) { return function ([y]) { } } {} } }");
tryItOut("let prototype = <y><z/></y>, __noSuchMethod__;");
tryItOut("/*infloop*/for(const __proto__ = (({__noSuchMethod__: <x><y/></x>,  set __proto__ __proto__ (__parent__) { return (function ([y]) { }[<y><z/></y>]) }  })); #1#--; <x/>) {L:with({__parent__: #1=[#1#]}){const prop = null, __proto__; } }");
tryItOut("/*infloop*/L:for(@foo; __iterator__; undefined = (yield 0)) {var constructor;constructor.(<x><y/></x>) }");
tryItOut("L: {gc()arguments; }");
tryItOut("with({__proto__: (<x><y/></x> for (function::__parent__ in <><x><y/></x></>))})L: gc");
tryItOut("{}\ngc()window;");
tryItOut("/*for..in*/for([prop, constructor] = this - <x><y/>\f</x> in <x/>) /*for..in*/for(const [__iterator__, __proto__] = [,,] in 1e4) {(({})); }");
tryItOut("{break L;throw __parent__; } const __proto__;");
tryItOut("/*infloop*/do {/*for..in*/for(prototype in arguments) prop, __proto__ = __count__; } while(__proto__ = (window + <x><y/></x>));");
tryItOut("/*infloop*/while([<x><y/></x>].some(prop)){continue L; }");
tryItOut("yield [11,12,13,14].some;");
tryItOut("switch(1e+81) { default: /*infloop*/for((<x><y/></x> <=  /x/g ); #1=({prop:  '' }); (String(window))) {; } }");
tryItOut("switch( \"\" .__count__ = <x/>) { default: with(\n[[], , prototype, ({ __proto__: constructor })] = new Boolean()){if([[]]) gc() else  if (<x><y/></x>) \tthrow <x><y/></x>; else prop, __iterator__;<ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd> }case 3: break; case 7: break; case eval(\"yield <><x><y/></x></> .@*:: (\\\"__noSuchMethod__\\\")\", ( /* Comment */true)): case ([(( /x/ )[null])] = (this >>= #1=[#1#]))[(eval(\"<x/>\", __parent__).__iterator__)]:  }");
tryItOut("do yield \nwindow; while((<x><y/></x> - *) && 0);");
tryItOut("export __count__\n(false);\n");
tryItOut("let (__parent__) { /*for..in*/for([prototype, prop] = window in <x/>) prop = undefined; }");
tryItOut("const prop, __proto__\nyield;");
tryItOut("if({}) {break M;continue M; }\nif(<><x><y/></x></>.eval(null) * null && 033) { if (((yield *))) {*;yield #3={a:#3#}; }} else {}");
tryItOut("/*infloop*/for((eval(\"0/0\", yyy).throw(@foo)); ({__proto__: new (<x/>)(window), constructor: __count__ = @foo }).hasOwnProperty(\"__count__\"); (new (({}).hasOwnProperty)(__count__ .. 1.3.__lookupSetter__(\"prototype\"))) >>>=yield (this.zzz.zzz)) {/*infloop*/for(const ({ __parent__: __proto__, prototype: [, ] })\f =  /x/g  ? <y><z/></y> : <><x><y/></x></>; <x/>; constructor) (function::__parent__).__defineSetter__ }");
tryItOut("L:if(((function ()this)()).throw( /x/g )) <><x><y/></x></>; else  if ( \"\"  .@x:: <x><y/></x>.watch(\"prototype\", function(y) { yield y; {}; yield y; })) {033; }");
tryItOut("L: {__parent__; }");
tryItOut("L: {let constructor, constructor = false;yield var prop; }");
tryItOut("L:if((__parent__ @ <x><y/></x>.propertyIsEnumerable(\"function::__iterator__\")) * (<zzz><y><z/></y>.*</zzz>.prototype)) /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in 3) { \"\" ; } else  if ( /* Comment */(-0 for each (__parent__ in 0.1))) {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const this.zzz.zzz(<xxx>{__parent__}</xxx> !== (\f(this)(<><x><y/></x></>) = ([,,](false)))) in prototype.__parent__) export prototype;");
tryItOut("throw __count__;");
tryItOut("{(<><x><y/></x></>);export __noSuchMethod__; }");
tryItOut("/*infloop*/M:for(({ prop: __noSuchMethod__, __count__: try { gc() } finally {  }  }) = [__count__]; <{prototype}> </{prototype}>; yield  { yield constructor }  >>> *) {yield  '' ;const __proto__, prop = constructor; }");
tryItOut("with(<x><y/></x>){}");
tryItOut("this.zzz.zzz;");
