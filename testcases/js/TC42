
tryItOut("L: {yield;/*for..in*/for(var constructor(<><x><y/></x>\t</>) in <><x><y/></x></>) {if(<x><y/></x>) { if (this) {gc() } else {yield;(*); }\t} } }");
tryItOut("/*for..in*/for(const __parent__ in <x><y/></x> ? <><x><y/></x></> : window .@*:: __parent__ .@  \"\" ) ({if((let (prototype) this)) {gc() } else {return @foo; }) \"\" ; }");
tryItOut("/*for..in*/M:for(constructor = * in  /x/ ) {return undefined; }");
tryItOut("with({prototype: ([<x><y/></x>.(*)\n].some(function(q) { return q; }))}){let __proto__, __noSuchMethod__ = null;gc() }");
tryItOut("/*infloop*/L:do gc() while(undefined);");
tryItOut("{throw window\nreturn;/*for..in*/for(let (3/0)(<><x><y/></x></>) in *) ; }");
tryItOut("this.zzz.zzz;");
tryItOut("gc()");
tryItOut("/*for..in*/for(const yield = prop in __count__) gc()");
tryItOut("for(let y in []);");
tryItOut("with({__iterator__: (p={}, (p.z = <x><y/></x>)())}){const __iterator__, prototype = *::*;throw <x/>; }");
tryItOut("/*infloop*/for(prototype = ++<y><z/></y>; (this instanceof * += 3/0.valueOf(\"number\")); <bbb xmlns=\"1e+81\"> </bbb>.((*::*.__defineGetter__(\"__noSuchMethod__\", this)))) /*for..in*/for(var __parent__ = constructor in <><x><y/></x></>) {export *; }");
tryItOut("(null).__defineSetter__");
tryItOut("/*for..in*/for(let [prop, constructor] = eval(\"undefined\", 1e+81) in (eval(\"1e+81\", @foo))[<x/>]) {return __iterator__\nprototype = *::*, constructor; }");
tryItOut("gc()");
tryItOut("yield (*::*)[<x><y/></x>];");
tryItOut("/*for..in*/M:for(var [__parent__, __noSuchMethod__] = * in <y><z/></y>) Math.pow");
tryItOut("/*for..in*/for([prototype, constructor] =  /* Comment */({ set constructor(prototype) { const __iterator__, __parent__ = undefined; } , __count__ setter: gc }) != __count__ = ((continue ; if (this)).yoyo(<x><y/></x>.isPrototypeOf(@foo).__defineGetter__(\"__parent__\", (new Function(\"yield;\"))))) in /a/gi) {if((prototype ?  ''  : (-0) %= __parent__ = ({}))) { if ((1.2e3 >>> [z1,,])) const __iterator__; else {return;if(<x/>) {yield <y><z/></y>;yield window; } else  if (<y><z/></y>) throw true; else {{} } }}yield;{} }");
tryItOut("{let (prototype) { yield; }{} }");
tryItOut("do {__iterator__break L; } while(((constructor.constructor getter= eval) + [z1].hasOwnProperty(\"constructor\")) && 0);");
tryItOut("prop = __parent__;");
tryItOut("M:while((true) && 0){{}<><x><y/></x></>; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in __iterator__ ? return  ''  : __count__ .. <y><z/></y>) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x/>) export *;");
tryItOut("return *::*");
tryItOut("/*infloop*/for(({ __iterator__: null }) = __iterator__; this.zzz.zzz; +\f(*.throw(prototype).*)) {const __proto__;let __proto__; }");
tryItOut("/*for..in*/for(const __parent__ = new RangeError( /x/ , @foo) in <x><y/></x>) {yield <x><y/></x>;{} }");
tryItOut("{/*infloop*/for(this; true; this) {}export prop; }");
tryItOut("do {let __iterator__, prototype = undefined;const __count__ = __count__; } while((prop = 0.1.*) && 0);");
tryItOut("L:switch((function ([y]) { } / __parent__)) { case 2:  }");
tryItOut("/*infloop*/for(const ({ __proto__: ({ __parent__: __count__ }) }) = __noSuchMethod__ = null; x::__noSuchMethod__; [z1]) do let __iterator__; while((@foo) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const ({ __parent__: [prototype, ], prop: __noSuchMethod__ }) in this.__defineSetter__(\"__proto__\", Function)) {/*infloop*/while(__count__ = <><x><y/></x></>(<x/>))true{prototype =  /x/ , __proto__ = <x><y/></x>;/* } }");
tryItOut("export prototype;");
tryItOut("if(__noSuchMethod__.isPrototypeOf((<x/> & *))) yield; else  if ( /* Comment */-0.__lookupGetter__(\"__count__\")) {let __proto__; } else {/*infloop*/for(yield (uneval(this)); ((1 for (x in []))).call(); new <><x><y/></x></>(<><x><y/></x></>,  /x/ )) {throw <x/>;yield; }if(<x/>) {throw this; } else throw <x><y/></x>; }");
tryItOut("{do undefined; while((__parent__) && 0);export *\n/*infloop*/for(let prop = false; <x><y/></x>; true) export *; }");
tryItOut(" for each (__iterator__ in <><xxx>{__parent__}</xxx></>) if ({} *= <y><z/></y> & <x/>)");
tryItOut("L:with(null){;export *; }");
tryItOut("L: \n;\n");
tryItOut("/*for..in*/for(const  '' ['__noSuchMethod__'] in ((function (__count__) { return @foo } )( /x/ ))){export *;; }");
tryItOut("*;");
tryItOut("L\t: {with(*::* % false.yoyo((#1#.watch(\"constructor\", Math.pow)))){;yield <><x><y/></x></>; } }");
tryItOut("this.zzz.zzz;");
tryItOut("L:with({__proto__: (new (typeof ({}))(<><x><y/></x></>)) / 3 ::  '' }){{}/*\n*/ }");
tryItOut("if(((p={}, (p.z = (-0).prop)()))) { if ((prototype.__count__)) {yield *::*;with(4.)\f{return <><x><y/></x></>; } } else {*::*;[1,2,3,4].map }}");
tryItOut("return null;");
tryItOut("{return; }");
tryItOut("/*infloop*/for(var __proto__; (\nconstructor); ((function (prototype, __noSuchMethod__) { /a/gi } ).call((RegExp( '' ,  /x/g )), case window: L:with({constructor: ('haha'.split)()})do  while((<><x><y/></x></>) && 0);break; default: ;break; /*for..in*/for\f(let __iterator__ in 0/0) {throw *;const __proto__ = <x/>; }break; case 2: break; ))) {gc()var constructor, constructor = (-1); }");
tryItOut("{do export *; while((false) && 0); }");
tryItOut("constructor = __count__;");
tryItOut("let (prop = __noSuchMethod__.(this)((*.hasOwnProperty(\"prop\")))) { export let\nfalse; }");
tryItOut("if(*::*) { if (<><x><y/></x></>) } else {export constructor; }");
tryItOut("/*infloop*/for([<><x><y/></x></>]; new (function(q) { return q; })( \"\" , this); (false.throw(__noSuchMethod__))) with( /x/g ){return null;<><x><y/></x></> }");
tryItOut("let prop;");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; *; window) return;");
tryItOut("/*for..in*/for(const [__count__, __parent__] = <>(<><x><y/></x></> -= <y><z/></y> ? this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; export __parent__;; yield y; }).__defineGetter__(\"__noSuchMethod__\", gc) : <x><y/></x>.( /x/g ))</> in (new Function)(({})\t).*) /*infloop*/L:for(let __proto__; (/a/gi); ({ __parent__: __iterator__ }) = *::*) {throw  /x/ ; }");
tryItOut("try { const __count__; } catch(get if prop) { let __count__; } catch(__count__) { gc() } ");
tryItOut("/*\n*/switch(delete 1.2e3) { default: break;  }");
tryItOut("yield -0");
tryItOut("prop, prop = ;");
tryItOut("{/*for..in*/for(var __count__ in ((function(q) { return q; })(new ([1,,])()))){const getter, prototype = null;prop, __proto__ = 3/0; } }");
tryItOut("throw <x/>;");
tryItOut("/*infloop*/for(let (\n{ __noSuchMethod__: ({ __noSuchMethod__: prop, constructor: constructor }) }) = (__noSuchMethod__ = prototype); <y><z/></y>; @foo) {export __count__;continue L; }");
tryItOut("/*infloop*/for(__iterator__; try { return __count__; } finally { var prop, __proto__ = {}; } ;  /x/ ) {throw 1.3;{} }\n");
tryItOut("L:with()M:switch(@foo) { case new  /x/ (<><x><y/></x></>) / constructor.__defineGetter__(\"__proto__\", [1,2,3,4].map): export __parent__; }");
tryItOut("{var constructor, prop;export *; }");
tryItOut("{let __proto__ = <x><y/></x>; }");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ in ((({}).hasOwnProperty)(({prop: __proto__ = new <x/>() }))))return false;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(prototype; <x/>.yoyo(false); prop.constructor) {throw *; }");
tryItOut("M:if(eval(\"[] ^ __count__\", __iterator__.__count__)) let __proto__, __parent__; else  if (* >>= __noSuchMethod__ = <><x><y/></x></>) ; const prop;");
tryItOut("M:if((-0)) { if ((prop = __proto__).__defineGetter__(\"__iterator__\", ({}).__lookupGetter__)) {with((yield ( /x/g )[<><x><y/></x></>]))if(<><x><y/></x></>) {return *; } else  if (null) {(.2).watch } else let constructor; }} else {}");
tryItOut("with((this.__defineGetter__(\f\"M:with({prop: [15,16,17,18].sort((<><x><y/></x></>).watch, (__count__ in *))})continue ;\", function  __iterator__ (constructor) { if(1.2e3) throw window; } ))){{export *; } }");
tryItOut("/*infloop*/M:for(var __count__; ~arguments.__lookupSetter__(\"__proto__\"); (.\f__defineSetter__(\"x::(__parent__)\", (new Function(\"gc()\"))))) gc()");
tryItOut("{gc() }");
tryItOut("return;");
tryItOut("while((1e-81) && 0)if(new ([1,2,3,4].slice)(__noSuchMethod__)) const prototype = [z1,,]; else  if (eval(\"@foo\", this) <= new (<y><z/></y>)(*,  /x/ ))  /x/ ;");
tryItOut("/*for..in*/for(const <><x><y/></x></>['__noSuchMethod__'] in ((Math.sin)((this++)))){<><x><y/></x></>;yield; }\n");
tryItOut("/*infloop*/L:for(var constructor = @foo; __parent__; false) (1 for (x in [])) const __parent__;");
tryItOut("\nvar prototype = <x><y/></x>, constructor = <x><y/></x>;");
tryItOut("((({__count__:  /x/ })) / 0.1.__count__.eval((({__proto__: @foo})))).watch");
tryItOut("with({}) { ; } ");
tryItOut("with({}) { let(prototype = <x/>, prop) ((function(){return [,];})()); } ");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("L:if([__noSuchMethod__, ] = ({ prototype: [, , ], __proto__: ({ __noSuchMethod__: ({ __proto__: __count__, prop: __count__ }), __noSuchMethod__: __proto__ }) }) = this.zzz.zzz.isPrototypeOf({} >> <><x><y/></x></>)) for(let y in []); else  if (prop) /*for..in*//for([prototype, __count__] = ( /* Comment */ '' ) in <><x><y/></x></>) {([,,]);gc() }");
tryItOut("/*infloop*/for(var prop; <><x><y/></x></>; <x><y/></x>) ");
tryItOut("{let __iterator__; }");
tryItOut("/*infloop*/do {return;return  /x/g ; } while(*::*);");
tryItOut("/*infloop*/while((new (function(y) { yield y; let constructor = ({a1:1});; yield y; })()))yield <x><y/></x>");
tryItOut("let (__noSuchMethod__ = (__proto__ =  '' )) {  }");
tryItOut("let (prop = ((uneval(<x><y/></x>)))) { if(false) { if ((-0)) const __proto__; else } }");
tryItOut("/*infloop*/for(let __parent__ = ((gc).call(\ttrue, false).__defineSetter__(\"__count__\", function (({ __iterator__: __proto__ })) { gc() } ) .@*:: __count__); constructor =  '' ; (__parent__.yoyo(__parent__ = __noSuchMethod__) for (__iterator__ in (function () { return true } ).call(.2, )))) if(<x><y/></x>) {*::*{} } else {*::*;export __iterator__; }");
tryItOut("with(__noSuchMethod__ = this)let \f(prototype =  /x/ ) { return\n }");
tryItOut("while((4.(<><x><y/></x></>, <x><y/></x>)) && 0){continue L;return  /x/ ; }with({constructor: ( /x/  || @foo)})const prototype;");
tryItOut("let (prop = [__proto__ = __proto__] .@x:: [11,12,13,14].sort) { with(new ((new Function(\"{}\")))((*.__lookupSetter__(\"__noSuchMethod__\").propertyIsEnumerable(\"__proto__\")), *::*.@*))throw  '' ; }");
tryItOut("while((window.valueOf(\"number\").__lookupSetter__(\"__iterator__\")) && 0){; }");
tryItOut("do window; while((-0) && 0);");
tryItOut("/*infloop*/for(var __noSuchMethod__; (([1,2,3,4].slice).call((-3/0(constructor: undefined)), )); <><xxx>{prop}</xxx></>) export *;");
tryItOut("L://h\nwhile(((-(-0).@foo)) && 0)yield  '' ;");
tryItOut("/*for..in*/for//h\n(const constructor in __proto__) {yield true;var __noSuchMethod__, __count__ = prop, prototype = <x/>; }");
tryItOut("var constructor = [[1]]\n");
tryItOut("switch(__iterator__.__noSuchMethod__.eval(((p={}, (p.z =  /x/ )())))) { default: break;  }");
tryItOut("if(window) /*infloop*/for(({}); undefined; true) {const __count__ = window;gc() } else { }");
tryItOut("return <x/>;");
tryItOut("/*infloop*/L:for(const constructor; [,,z1];  \"\" ) ");
tryItOut("/*infloop*/for(let __iterator__; <><x><y/></x></>; 0) {(<y><z/></y>);window; }eval");
tryItOut("throw __parent__;");
tryItOut("if((function (__iterator__) { yield this; } ).call(yield  /x/g  .@x:: new Iterator(), (#0=[new RegExp()]))) { if (gc) /*infloop*/while(window){let prop = <x><y/></x>; } else {{}[1,2,3,4].slice }}");
tryItOut("if(({ get constructor(__noSuchMethod__)<x><y/></x> })) { if ([11,12,13,14].filter) {/*for..in*/for(let __parent__ in [,,]) {; } }} else gc()");
tryItOut("let ++, __parent__;");
tryItOut("/*infloop*/for(__noSuchMethod__.( \"\"  <<= ++false); new (<y><z/></y>)(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.([1])); new (__count__ = (uneval(<x/>)))(undefined,  /x/ .isPrototypeOf([]).hasOwnProperty(\"__count__\"))) {yield <x/>; }");
tryItOut("return; const __count__;");
tryItOut("if(*::*) {__proto__ = -0;export constructor; }");
tryItOut("return; const prop;");
tryItOut("return null;return;\ncontinue ;\n");
tryItOut("/*infloop*/while(\n__count__)this;");
tryItOut("/*for..in*/for(__parent__ = this.zzz.zzz in this .@ this) {return;var __noSuchMethod__ = undefined, __iterator__ = null; }");
tryItOut("gc()/*for..in*/for(var __noSuchMethod__ in ((({}).__lookupGetter__)( /* Comment */@foo))){}");
tryItOut("export constructor;");
tryItOut("{/*infloop*/while(eval(\"-3/0 .@*:: __parent__\", prototype.__iterator__))/*infloop*/do {{} } while( /x/ );with(*::*)gc()L:with({__parent__: <y><z/></y>})return <x/>; }");
tryItOut("/*infloop*/while(((yield ({__noSuchMethod__: \n(<x><y/></x>) })))){constructor; }{if(__parent__) {yield; } else  if ( /x/ ) export __noSuchMethod__; }");
tryItOut("/*infloop*/for(let __iterator__ = <x><y/></x>.prop for each (__count__ in *) if (*);  \"\" ; __iterator__.__defineSetter__(\"__noSuchMethod__\", /a/gi)) /*for..in*/for(const [constructor, __parent__] = prototype in 1e+81) var constructor, prototype = <x/>\nexport prop;");
tryItOut("/*infloop*/while(__proto__){(<><x><y/></x></>); }\n{}");
tryItOut("throw prototype; const __iterator__;");
tryItOut("/*infloop*/while((-0)){break L; }");
tryItOut("yield 0.1");
tryItOut("throw StopIteration;");
tryItOut("with({__count__: __parent__.(<><x><y/></x></>)})with({constructor:  /x/ })let __iterator__;");
tryItOut("if(( '' .@foo)) {{} } else switch(<><x><y/></x></>) { default:  }\n");
tryItOut("if(eval(\"<><x><y/></x></>\", <><x><y/></x></>)) /*infloop*/while((__noSuchMethod__ =  /x/ )){}");
tryItOut("if(__proto__) { if (/a/gi) /*infloop*/M:for(const __noSuchMethod__; __noSuchMethod__, ({ prototype: prototype, __noSuchMethod__: [, ({ __parent__: ({ __count__: __noSuchMethod__ }), __parent__: __count__ }), prototype, ] }); @foo) /*for..in*/M:for(var __count__ in __proto__) __parent__; else if(\nnull) { if ([-0].filter(Math.sin)) {yield;; } else {throw true;; }}}");
tryItOut("yield\n");
tryItOut("do <x><y/></x> while((__parent__) && 0);");
tryItOut("M:do {throw StopIteration; } while(([,,z1]) && 0);");
tryItOut("with({__count__: this === (-0)})do {break ; } while((__noSuchMethod__.__count__ = <><x><y/></x></>) && 0);");
tryItOut("/*for..in*/for(__parent__ = this in true) (<y><z/></y>);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:for(let __iterator__; (this.__defineSetter__(\"__parent__\", 'haha'.split)); #2=[true]) {let (__iterator__ = window) { with({__count__: undefined})break ; } }");
tryItOut("{__proto__ = 3/0;; }");
tryItOut("gc()\n/*infloop*/for(__proto__; ((yield  /x/ ).propertyIsEnumerable(\"__parent__\")); ({ set constructor __iterator__ () { yield ({__parent__: #3={a:#3#}}) } ,  set __parent__(constructor, constructor) { return (({ get constructor __parent__ ()#1=[#1#], __noSuchMethod__: @foo }).watch(\"constructor\", function::__parent__)) }  })) {proplet __iterator__ =  /x/ , prop = <y><z/></y>; }");
tryItOut("M:with({constructor: (({ __noSuchMethod__: __proto__ }) = *::*.yoyo(window))})export *;");
tryItOut("for(let y in [5,6,7,8]) throw <y><z/></y>['prop'];");
tryItOut("Function");
tryItOut("{\treturn  '' ;{} }");
tryItOut("if(__proto__) {if((function(q) { return q; })) continue ;break L; } else {/*for..in*/for(let [__count__, __proto__] = null in 1e81) yield this;/*infloop*/do throw *; while(033); }");
tryItOut("if(<x/>) __iterator__ else  if (window) yield; else {return *::*; } const __proto__;");
tryItOut("/*infloop*/L:while(this.__defineGetter__(\"__parent__\", __parent__.x::prototype setter= <x/>)){{} }\f");
tryItOut("M:if(((({ constructor: __count__, __parent__: __proto__ }) = \t<><x><y/></x></>) | (return) .@*:: __count__\n)) { if (<zzz>new function  __iterator__ (constructor) { return <y><z/></y> } (<y><z/></y>)</zzz>) {do export *; while(((new <x><y/></x> .@ true())) && 0); }} else {/*for..in*/for(const [,,] - ({a1:1})['__count__'] in (((<x><y/></x>.hasOwnProperty(\"__proto__\")))((<><x><y/></x></> .@*:: <x><y/></x>))))if((-1)) {export *;{} } else  if (<x><y/></x>) {constructor;yield <x><\ny/></x>; } else yield null; }");
tryItOut("if((new Function(\"const __iterator__;\")).throw(__iterator__.prototype%=<><x><y/></x></> >>>=<x/>)) { if ((function(q) { return q; })(#0=<x><y/></x>)) {if(((uneval((new (( \"\" ).watch)(1e-81)))))) { if (([( /x/g )()])) {let prop, __count__ = <><x><y/></x></>; }} else {/*infloop*/for(constructor = <><x><y/></x></>; prop; __count__) {{}yield; } } }} else /*infloop*/M:while((__proto__ .@*:: -1 for ((prop)(function(id) { return id }) in (function ([y]) { })()) for each (prop in null))){return <><x><y/></x></>;var prop, __parent__ = arguments; }");
tryItOut("/*infloop*/for(let __parent__ = ( \"\" ++); <><x><y/></x></>; <x><y/></x>.hasOwnProperty(\"prop\")) return __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype(<x/>) in *::*.__iterator__ = window) {yield;let prototype = (-1); }");
tryItOut("{(this)\n }");
tryItOut("throw __parent__;");
tryItOut("with({}) { for(let y in [5,6,7,8]) return prototype; } ");
tryItOut("if((__proto__ = window instanceof @foo) , ([11,12,13,14].filter)) export *; else  if (+<y><z/></y>) yield; else {try { return *::*.eval(({})); } catch(prototype) { try { with({}) return 'fafafa'.replace(/a/g, /a/gi); } catch(__count__) { this.__defineSetter__(\"__iterator__\", (new Function(\"continue ;\")))['prop'] = __count__; }  } finally { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) Function } /*infloop*/for(var __noSuchMethod__ = \n<><x><y/></x></> && @foo; export *; (yield [,,z1]) ? (yield  \"\" ) : #1#[(<x/>).call(__proto__ = prototype, )]) {export *;window; } }");
tryItOut("/*infloop*/M:for(prototype = __iterator__; 'fafafa'.replace(/a/g, Math.sin); 1.2e3.__noSuchMethod__) {L: let (__noSuchMethod__ = <><x><y/></x></>) { var __iterator__ = []; } }");
tryItOut("try { yield; } finally { return; } ");
tryItOut("{return @foo; }");
tryItOut("let (__count__) { var __iterator__ = window, yield = null; }");
tryItOut("/*for..in*/for(let prototype in <><x><y/></x></> > (function ([y]) { })()) while((*) && 0)const __noSuchMethod__ = @foo, x::set = 3.141592653589793; const __count__;");
tryItOut("return;");
tryItOut("if((#2=<><x><y/></x></> ? function ([y]) { } : *)) { if ([,]) {yield @foo;//h\n\f } else {export __proto__; }  if (window)}");
tryItOut("throw <><x><y/></x></>");
tryItOut("do {yield <y><z/></y>;export __noSuchMethod__; } while((*) && 0);");
tryItOut("let (prop = (/a/gi).call) { gc() }");
tryItOut("with(constructor = <><x><y/></x></>.__lookupGetter__(\"__parent__\")){/*infloop*/M:do {gc()continue M; } while(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(prototype = <x/>; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (yield  { return 4. } )) {;let function::prop, prop; }\nreturn <x><y/></x>;");
tryItOut("const prop = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("let (prop =  \"\" ) { yield; }");
tryItOut("with({}) { let(__noSuchMethod__ = __parent__.__lookupGetter__(\"__iterator__\")) { yield [ \"\" ]; } ");
tryItOut("yield  /x/ ;\n/*infloop*/for(__proto__ = __iterator__; ({__parent__: (#2=({prototype: 1e81}))}); (0.throw(undefined)).isPrototypeOf(new <employee id=\"1\"><name>Joe</name><age>20</age></employee>)) {yield function(id) { return id };var prototype, __proto__; }\n");
tryItOut("/*infloop*/do export *; while(__proto__);");
tryItOut("return;");
tryItOut("break M;");
tryItOut("switch([11,12,13,14].filter) { case (([1,2,3,4].map).call(null, ((constructor.prototype setter= Math.pow)(constructor.__iterator__, ((1.3 for (__iterator__ in <x><y/></x>))))), (([1,2,3,4].slice)()))): break; case 0: return;case 6: case arguments\n: {} }");
tryItOut("if(prototype(<x/>)+=( '' )) {export __count__; } else /*infloop*/for(prototype = true; this; *::*) prototype;");
tryItOut("M:if((Iterator(, undefined))) {prop, prop = [z1]; } else {continue M; }");
tryItOut("if(({__parent__ setter: function (__noSuchMethod__) { yield (prototype) } , constructor setter: (__parent__.__proto__ = <x><y/></x>).__defineSetter__ }) ? (new (Math.pow)(this, [[1]])) : ((yield ((function(y) { yield y; export *;; yield y; }).call).call(try { (true); } catch( \"\" ) { yield this; } .yoyo(this), )))) with({}) function(y) { yield y; ; yield y; } else /*for..in*/L:for(const __count__ = __iterator__ in  '' ) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in  /* Comment */delete  \"\" ) {{while((__iterator__ = (__proto__ = prototype)) && 0)break L; } }");
tryItOut("with(undefined){if(1e4) { if (1.2e3) {[z1]; }} else {(<x><y/></x>); }prototype }");
tryItOut("L: {gc() }");
tryItOut("if('fafafa'.replace(/a/g, (__noSuchMethod__).__defineSetter__)) { if ((let (__proto__ = <x><y/></x>, prototype = window) true)) {__count__ }} else return __parent__;");
tryItOut("/*infloop*/for(__noSuchMethod__; (({prop getter: false }))((new (3)())); prototype.valueOf(\"number\")) {constructor; }");
tryItOut("\nreturn *;\n");
tryItOut("/*infloop*/for([1]; (new function(y) { yield y; yield;; yield y; }(<x><y/></x>, 3.141592653589793)); true.__lookupSetter__(\"prototype\")) if(*) export constructor;");
tryItOut("continue M;");
tryItOut("M:do let(constructor) { yield [z1,,]; while(((yield -3/0)) && 0)");
tryItOut("if((* && @foo)) {function(y) { yield y;  /x/ ;; yield y; }return <><x><y/></x></>; } else  if ((\nfunction ([y]) { })) if(([<><x><y/></x></>])) { if ((p={}, (p.z = *::*)())) return;} else {{} /x/g ; } else {/*for..in*/for(const [__proto__, __count__] = <y><z/></y> in {}) {false; }({}).hasOwnProperty }");
tryItOut("let (constructor, prototype) { (<y><z/></y>); }\n");
tryItOut("/*for..in*/L:for(const prop = (<><x><y/></x></> ? null : window) in 033) {}");
tryItOut("{/*for..in*/for(var __count__ in window) {yield; } }");
tryItOut("L:if(default: yield *::*;case window: constructor = *::*;) {(<x><y/></x>);continue ; } else {try { gc() } catch(prop) { return this; } export __count__; }");
tryItOut("{}");
tryItOut("return;");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [5,6,7,8]) with({}) { (null); } \n");
tryItOut("if(true) throw  \"\" ; else  if (({a2:z2})) return;");
tryItOut("do {prototype = <x><y/></x>; } while(((let (__count__ = ({}).__lookupSetter__(\"__iterator__\")) ([[true for (__count__ in @foo)] for (__iterator__ in *)]))()) && 0);");
tryItOut("/*for..in*/for(const ({ __count__: ({ get: prop, constructor: prop }) }) in ((gc)((prop = true)() >> (({})-- ^ *::*.hasOwnProperty(\"__proto__\"))))){yield; for (__iterator__ in ((window)(((1 for (x in []))), ('fafafa'.replace(/a/g, (-1))++)))) for (__iterator__.prop in ([({a2:z2}).watch(\"__parent__\", <><x><y\r/></x></>)].map(function () { (arguments); } )) && __noSuchMethod__ = <x><y/></x>.__lookupGetter__(\"__iterator__\")) for (prototype in (undefined\n)) for ((__parent__ = *)[' goto '] in *::*) }");
tryItOut("/*for..in*/L:for(const (this.zzz.zzz)( /x/g  ? @foo : function(id) { return id })\f in <y><z/></y>) {const constructor = <x><\ty/></x>, __noSuchMethod__ = <y><z/></y>;(__count__); }");
tryItOut("/*for..in*/L:for(let __count__.__iterator__ in <x><y/></x>) {if(<x><y/></x>) { if (prototype) gc()} else const __count__, __noSuchMethod__; } const __count__;");
