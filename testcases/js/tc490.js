tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const [constructor, prop, ({ __proto__:  set __parent__ prototype (prop, __proto__) { return  }  }), __proto__, ({ prop: [, prototype, prototype, ] })] in (true :: *::*.throw((yield [,,])))) return;");
tryItOut("/*infloop*/for(let __count__; true\n; <x><y/></x>.__defineGetter__(\"constructor\", [1,2,3,4].map)) {/*infloop*/do {/*infloop*/for(@foo; @foo; function(id) { return id }) {export prop;return; } } while(0/0());with(@foo)throw []; }");
tryItOut("if( /* Comment */<><x><y/></x></>) yield <y><z/></y>;");
tryItOut("return (__parent__ = prototype);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.constructor in ([1,2,3,4].slice(#1=[#1#]))) /*infloop*/L:for(let this = <x><y/></x>; __noSuchMethod__; true) {__noSuchMethod__;return <x><y/></x>; }");
tryItOut("({ __proto__:  , prototype: [] })");
tryItOut("/*for..in*/for(({__count__: undefined,  get __count__(prototype, __noSuchMethod__) { var __proto__ = , __parent__ =  /x/g ; }  }).constructor in (('haha'.split)((({ set prototype __count__ (prototype, __count__) { yield (yield (yield *::*)) }  }))))){/*infloop*/M:for(const [] = let (__parent__ = *) #3={a:#3#}; ({prop:  ''  }); (window+=this)) {<><x><y/></x></>;*::*; } }");
tryItOut("L:switch( '' ) { case 7: default: {}break; case window(({}).hasOwnProperty,  /x/g ): case 7: /*infloop*/M:for(({ prototype: __proto__ }) = <><x><y/></x></>.valueOf(\"number\"); (-*); (5.0000000000000000000000.hasOwnProperty(\"__noSuchMethod__\"))) (window);break;  }");
tryItOut("default: break ;break; case 0: with({}) { yield; } ");
tryItOut("if(__proto__ = [eval(\"<><x><y/></x></>\", 4.)++]) let __count__\n else  if (typeof __count__ instanceof @foo--) if(*) { if (prop >> 1e81) {evalexport prop; }} else __parent__ =  \"\" , __iterator__;");
tryItOut("/*for..in*/M:for(let [__proto__, prop] = <x><y/></x> in <x/>) {const __proto__, constructor = <x><y/></x>; }");
tryItOut("prop = ([15,16,17,18].filter(function(q) { return q; }, 0)) ? arguments() : [true].map(<y><z/></y>), __proto__");
tryItOut("/*infloop*/for((({prop setter: ({}).__lookupGetter__ })); <><bbb xmlns=\"Boolean(constructor | __noSuchMethod__)\"> </bbb></>; __count__.__proto__ setter= function(q) { return q; }) continue M;");
tryItOut("/*infloop*/for(let __count__; true = (__iterator__ = [1]); window.throw(<><x><y/ for(let y in [5,6,7,8]) continue ;></x> (<x><y/></x>.(constructor)),  \"\"  </>)) switch(__proto__) { case 0x99: gc() }");
tryItOut("if(return) /*infloop*/M:for(this; .2; <><x><y/></x></>) return; else  if (this.__defineSetter__(\"__iterator__\", <><x><y/></x>\t</>)) {export constructor; }");
tryItOut("{}\n/*infloop*/for(const __proto__; [,]; <><x><y/></x></>) break ;");
tryItOut("(-0)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor = <><x><y/></x></>.prototype in (1.2e3(window))) export __count__;");
tryItOut("/*infloop*/L:for(const function::({ __proto__: __parent__ }) = (delete false); (Math.sin)(@foo, <x/>); (<><x><y/></x> prop = __count__ = window, constructor = (function ([y]) { })()> >>  '' )) {export *; }");
tryItOut("({}).hasOwnProperty\n");
tryItOut("{{yield this; }yield;function  prototype (__iterator__)<x><y/></x> }");
tryItOut("/*infloop*/L:for(const __iterator__; ~( /x/g  for each (__iterator__ in constructor\t = this) if (({a1:1}))); *::* = #0=[this] .@x:: #1#.__proto__ = prototype) {/*for..in*/for(let __parent__((<x/> if ([,,]))) in ((__noSuchMethod__ === [ /x/ ]\f)(new (new Function(\"(function ([y]) { });\"))(.2)))){throw (-0); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var #1=({__proto__: (this.__defineSetter__(\"try { Math.pow } catch(constructor if (function(){gc()})()) { export __count__; } \", ({}).__lookupGetter__))}) in \n__parent__) {yield; }");
tryItOut("/*infloop*/while( /x/ )let __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in #1#) {/*infloop*/M:while(this)return <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in @foo) {return; }");
tryItOut("if(~{}.__iterator__ = <><x><y/></x></>) { if ((constructor = __count__).__lookupGetter__(\"__count__\")) return <><x><y/></x></>.__lookupSetter__(\"__count__\"); else {{} }}");
tryItOut("/*for..in*/for(var [__noSuchMethod__, function::__parent__] = new (new <x><y/></x>(<x><y/>/*\n*/</x>, <><x><y/></x></\t>))() in (__noSuchMethod__ = __noSuchMethod__ = [[]])) this.zzz.zzz;");
tryItOut("\tif([(new Function(<><x><y/></x></>,  '' )) if (<><x><y/></x></>)]) {return;M:if((typeof <x><y/></x>)) { if (arguments & <><x><y/></x></>) (__parent__); else return;} } else  if ((eval(\"(this.__defineGetter__(\\\"constructor\\\", *))\", new Exception(prototype, window)))[\t(*::*.__defineSetter__(\"prototype\", null).isPrototypeOf())]) return;");
tryItOut("switch(prop , <x><y/></x>(this.zzz.zzz, 4.)) { case (__proto__ = window): break;  }");
tryItOut("/*for..in*/for(let prototype = <x><y/></x>.throw(@foo) in this.__defineSetter__(\"__parent__\", function(q) { return q; })) {return <x/>; }");
tryItOut("let (__noSuchMethod__) { (__proto__); }");
tryItOut("/*infloop*/while(<>yyy</>)if((#0=<y><z/></y>)) {return this;yield; } else  if ('fafafa'.replace(/a/g, ({}).hasOwnProperty)) let __noSuchMethod__ = *, prop; else (<><x><y/></x></>).__defineSetter__");
tryItOut("let __iterator__ =  /x/g ; const __parent__");
tryItOut("/*for..in*/for(let __count__ in null.@foo) {throw window;var prototype; }");
tryItOut("L:if((function(q) { return q; })()) continue ; else \nif( /x/ ) { if (constructor) {return false; }} else {(function ([y]) { })();__parent__ = <y><z/></y>; }\n");
tryItOut("while((new String()) && 0)__iterator__\n(<><x><y/></x></>);\f");
tryItOut("{export *; }\nthrow *::*;\n");
tryItOut("with((({a2:z2}).watch(\"(__noSuchMethod__), [__proto__, __count__, , __noSuchMethod__]\", \tgc)).constructor){/*infloop*/for([z1,,];  /x/g ; false) (<><x><y/></x></>); }");
tryItOut("/*infloop*/for(const [, , __count__] = <x/>; this; ((((yield null).hasOwnProperty(\"prop\"))[(new ([,])())])].())) {yield;{const prop = null, __count__;var prop, constructor; } }");
tryItOut("/*for..in*/for(let [constructor, __count__] = undefined\n % __iterator__.__iterator__ setter= [1,2,3,4].map in (function  yield; ()<><x><y/></x></> %= ((( /x/ ).__defineSetter__)( /x/g ))(prop.__parent__ = 1.2e3))) {return; }");
tryItOut("/*for..in*/M:for(var __count__ in ((new Function)((uneval(<x><y/></x>.__defineSetter__(\"function::__iterator__\", /a/gi))))))/*for..in*/for(var (<y><z/></y>)(({ __noSuchMethod__: prototype, constructor: __count__ }) = (__iterator__.throw(1e-81))) in ((1 for (x in []))(constructor).watch(\"__parent__\", function  __parent__ (__parent__) { throw <x><y/></x>; } ))) throw ({});");
tryItOut("/*infloop*/L:for(let [] = yield window -= -0; ((* |= *::*))(eval(\"function::__proto__\", @foo)); \n#3={a:#3#}) {{} }");
tryItOut("{let <y><z/></y> = <><x><y/></x></>; }");
tryItOut("switch(*::*) { case <x><y/></x> |= <y><z/></y>: with(true)__iterator__;break;  }");
tryItOut("{const ({ prop: __count__, __count__: __parent__ }), prop = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(var constructor;  ; new ( \"\" .@foo) ^= this.yoyo()()) L: {export __iterator__;\nreturn <x/>;\nyield <><x><y/></x></>; }");
tryItOut("/*infloop*/L:while(('fafafa'.replace(/a/g, #1=[this.zzz.zzz]))){;return <><x><y/></x></>--; }");
tryItOut("L: /*for..in*/for(var [__noSuchMethod__, __iterator__] = ({a2:z2}) in -3/0) {export __proto__; }");
tryItOut("{yield;export *; }");
tryItOut("if(__parent__) { if ([1,,]) {{}{} } else export __proto__;}");
tryItOut("if(__noSuchMethod__ = <x><y/></x>.(<y><z/></y>)--) var constructor = @foo, getter = true; else  if (/a/gi(<><x><y/></x></>).watch(\"__iterator__\", [1,2,3,4].slice)) return; else {/*for..in*/for(var __noSuchMethod__ in ((__parent__)(this))); }");
tryItOut("default: break; break; case 2: export *;break; case 0: <><zzz>(Math.sin)(<\r><x><y/></x></>, [,,])</zzz></>case <x><y/></x>: break; break; case <x><y/></x>: Math.sin");
tryItOut("if(prop) {gc() } else  if (<x><y/></x>) {yield true;break ; } const __count__;\n\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in [*::*]) ( '' );");
tryItOut("/*infloop*/do {yield 1.2e3; } while(this.zzz.zzz);");
tryItOut("if([] = function::__proto__) { if ((#2=([1] | prototype) for (prop in (<><x><y/></x></> ? !(-1) : try { throw *; } finally { function(q) { return q; } } )) if (function(id) { return id }.isPrototypeOf(<x/>)))) break M; else {return <x><y/></x>;L:with({__parent__: __count__ =  '' }){export __count__;(window); } }}");
tryItOut("continue L;\n/*for..in*/M:for(var each   in (new (__proto__)())) {({}).__lookupGetter__/*for..in*/for(let constructor in ((function () { return <x><y/></x> } )(__proto__)))function (__proto__) { gc() }  }\n");
tryItOut(";\nyield prototype;\n");
tryItOut("return;");
tryItOut("try { ; } catch(constructor)\f { this; } finally { __parent__ = false; } ");
tryItOut("/*infloop*/for(*::* += <x><y/></x>; yield [,,]; <><x><y/></x></>.__noSuchMethod__ = false) {;continue ; }");
tryItOut("yield __noSuchMethod__ = <x><y/></x>;");
tryItOut("{;const __iterator__ = prototype; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:for(let ({ __iterator__: prototype }) = __count__.constructor = #3={a:#3#}; constructor; (new (function(y) { yield y; throw this;; yield y; })((<><x><y/></x></>.watch(\"__noSuchMethod__\", function (__iterator__) { yield [] } ) % (null\n)), ([ '' ].sort([1,2,3,4].map))))) __count__");
tryItOut("L:switch('haha'.split(prop.__iterator__ = [,,] | (function (__parent__, prop) { var __proto__ = <x>/<y/ /*infloop*/while(__parent__)export *;></x>/*; } )())) { default: return arguments;case <x/>: if(this) export *; else {{}export *; }break; case <y><z/></y> ? [z1] : __noSuchMethod__: break; case let (__proto__ =  /x/ , __count__) this:  }");
tryItOut("yield *\n(__iterator__).__defineSetter__");
tryItOut("return");
tryItOut("/*infloop*/while(__iterator__.__noSuchMethod__ setter= eval.prop){/*infloop*/\fdo *::* while(this.zzz.zzz);/*for..in*/for(let __proto__ in window) {throw *::*; } }");
tryItOut("/*infloop*/M:while(window)\n");
tryItOut("if(<> { throw 1e4; } </>) { if (window) {export *; }} else __iterator__: -1");
tryItOut("if(this.__defineSetter__(\"prototype\", eval)) { if ([null].map(function (constructor, ) { yield this.__defineGetter__(\"constructor\", (1 for (x in []))) } )) {M:if((window--)) { if (<x/>) break L; else yield;}/*for..in*/for([__count__, __count__] = @foo in <><x><y/></x></>) {__iterator__ = window;{} } } else {if((<x><y/></x>.unwatch(\"__count__\"))) { if ((yield *)) {__proto__ = <x/>;let prop = , prototype = *::*; } else ;} }}");
tryItOut("/*for..in*/L:for(const __iterator__.constructor in new Boolean()) return;");
tryItOut("/*for..in*/for([prop, __proto__] = this.zzz.zzz in null) {yield <x><\ty/></x>;(033); }");
tryItOut("/*for..in*/for(var prop in  /x/g ) ");
tryItOut("const \nexport *\n");
tryItOut("M:if(<><></></>) { if (prototype) gc() else {return __iterator__;gc() }}");
tryItOut("(<><x><y/></x></>.@foo).prototype = *::* .@*:: <y><z/></y> const prop;");
tryItOut("if(<><x><y/></x></>) {{}var prototype = [1,,], prototype = <><x><y/></x></>; } else return\n");
tryItOut("/*for..in*/for(\r[__count__, prototype] = prop = <y><z/></y> in window.watch(\"prop\", ('haha'.split) \f<ccc:ddd> </ccc:ddd> .call)) return window;");
tryItOut("do {break\t ; } while((1.3) && 0);");
tryItOut(" for (__parent__ in (p={}, (p.z = (constructor = this.__proto__ = <>default: break; return;case 1e+81: break; case 0: break; case []: break; case 3: case <><x><y/></x></>: return;case 2: break; case 5: case 0: yield  \"\" ;break; </>))())) for each (__parent__ in (-0)--)");
tryItOut("/*for..in*/for(const __parent__.__noSuchMethod__ in (('haha'.split)((undefined(prototype)))))<xxx>{prototype}</xxx>");
tryItOut("/*for..in*/for(const prop in (((<x><y/></x>.prototype).__defineSetter__)(<><>(eval(\"*::*\", false))</></>)))return;");
tryItOut("with([(__proto__ = [15,16,17,18].filter(false, -0))].map(function  prototype (({ __noSuchMethod__: __parent__ })) { return (3.141592653589793.__lookupSetter__(\"prop\")) } )){yield <x><y/></x>\n/*for..in*/for(var __iterator__ in __count__) {gc() }with((3.__iterator__ = [[1]]))export __noSuchMethod__; }");
tryItOut("throw \n");
tryItOut("let (__noSuchMethod__ = [15,16,17,18].map('haha'.split, this), [prototype, , prop, ]) { ; }");
tryItOut("/*for..in*/for(var constructor in new (function(q) { return q; })(0x99, [z1])) ((prop = <x/>));");
tryItOut("with({}) {  } ");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(({ set try { throw 1e+81; } catch(__iterator__) { export __parent__; }  __count__ ()constructor, __parent__:  /x/g  }); !new [1,2,3,4].map(#3={a:#3#}, __noSuchMethod__ = <x>\t<y/></x>, prop); [<x/> ? <x/> : <><x><y/></x></>]) {switch( /x/g ) { default: continue L;break;  } }");
tryItOut("/*infloop*/L:do {continue L; } while(<x/>);");
tryItOut("let (__parent__, ) { /*infloop*/for((<><x><y/></x></>)(window, <x><y/></x>); yield __proto__.__defineSetter__(\"__iterator__\", (new Function(\"yield <x><y/\\t></x>;\"))); [z1]) {Math.pow } }");
tryItOut("with({__iterator__: <x><y/></x>}){throw .2;return function ([y]) { }; }");
tryItOut("if(.2) {{}false; }");
tryItOut("if(__proto__.__parent__ = __parent__.(delete)) {} else  if ((yield .2)\n) L:if( '' .__proto__ = __parent__) {<x><y/></x>;const __proto__, constructor; } else {/*infloop*/do continue ; while(<>*</>); }");
tryItOut("if(033) gc() else {let __proto__, __proto__; }");
tryItOut("if((new (__iterator__ = undefined)())) {with(new Function(<><x><y/></x></>))(<x><y/></x>); } else if(<><x><y/></x></>) return @foo; else let constructor, prop;");
tryItOut("if([15,16,17,18].filter(Math.pow, window)) {export *; } else  if (<x><y/></x> > constructor) {}");
tryItOut("L:with((this.__defineGetter__(\"__iterator__\", *))){let __iterator__ = <><x><y/></x></>, prop = constructor;@foo }");
tryItOut("<><x><y/></x></>");
tryItOut("switch(true) { default: case <y><z/></y>: return false;case window: ;(<x><y/></x>);break; prototype = __count__;break;  }");
tryItOut("try { this.zzz.zzz; } finally { return; } ");
tryItOut("while(((prototype)) && 0){var constructor, prototype;var __parent__, prop = window; }");
tryItOut("switch((new (5.0000000000000000000000.__iterator__)())) { case 0: break;  }");
tryItOut("L:if( \"\" ) return __count__; else  if ((function ([y]) { })()) {let __iterator__, prototype;export delete; } else gc()");
tryItOut("constructor = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in this.zzz.zzz) {return window;break L }");
tryItOut("{}Math.sin");
tryItOut("(<x/>);");
tryItOut("{{(prototype); } }");
tryItOut("let (__count__ = (p={}, (p.z = [this.zzz.zzz])()), prop) { /*for..in*/for(const [prop, __noSuchMethod__] = (#0=[yield <><x><y/></x></>;].unwatch(\"prop\")) in (p={}, (p.z = window)())) L: {return  '' ;throw <x><y/></x>; } }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (function ([y]) { })() in __proto__) {var constructor, <y><z/></y>;continue \f; }");
tryItOut("/*infloop*/do /*infloop*/while((@foo !== @foo)){return; } while((gc)(__parent__ < 0, (!(function ([y]) { })()))\n);");
tryItOut("with((*::*.valueOf(\"number\"))){/*infloop*/for([prop, , ] = [15,16,17,18].map((1 for (x in [])), false) <= [z1,,].__noSuchMethod__; #2=({__iterator__: ({}).hasOwnProperty}); this) {break ; }/*infloop*/L:for(<y><z/></y> ? false : this; new this(<><x><y/></x></>);  '' .__defineGetter__(\"__noSuchMethod__\", (0).__defineSetter__)) ; }");
tryItOut("break ;");
tryItOut("/*infloop*/L:while([,,]){/*infloop*/M:for(const ({ __count__: __iterator__, __parent__: prop }) = \t<><x><y/></x></> @ __count__; Function(); *.__lookupSetter__(\"__parent__\")) gc() }");
tryItOut("return <x><y/></x>;");
tryItOut("{/*for..in*/for(let prototype = <><x><y/></x></> in *::*) delete = <><x><y/></x></>; }");
tryItOut("/*for..in*/for(prop in (yield \n([,].watch(\"prop\", /a/gi)))) {with({}) { let(prototype) ((function(){window;})()); }  }");
tryItOut("if((<{__iterator__}></{__iterator__}>.(-3/0))) {throw StopIteration; } else do {; } while((<y><z/></y>) && 0);");
tryItOut("/*infloop*/while(__count__.prototype = function::__iterator__){gc()yield <><x><y/></x></>; }");
tryItOut("if(undefined++) { if ((( /x/g ).__defineSetter__)) {continue ;do {break ; } while((__iterator__.eval(window)) && 0); } else gc()}");
tryItOut("L: <x><y//h\n/></x>;");
tryItOut("/*for..in*/for(__noSuchMethod__ in prop) let __parent__ = 033, __noSuchMethod__ = 1e-81\n");
tryItOut("/*for..in*/L:for(const __count__ = [<x><y/></x>] ? Exception() : <><x><y/></x></>++ in (<><bbb xmlns=\" \"\" \"><x><y/></x>yyy</bbb></>.__defineSetter__(\"__noSuchMethod__\", Math.sin))) switch(<x><y/></x>) { case 1: break;  }");
tryItOut("{return;continue ; }");
tryItOut("/*for..in*/for(var [__count__, constructor] = [window] in true) /*for..in*/for(constructor in ((function  prototype (__iterator__, __iterator__) { throw <y><z/></y>; } )(<y><z/></y>))){'haha'.split }");
tryItOut("/*infloop*/do {export __count__;export __noSuchMethod__; } while('fafafa'.replace(/a/g, ((new Function(\"export prototype;\"))).call));");
tryItOut("/*for..in*/M:for(var __proto__ in ((function ()(new __noSuchMethod__(new <x/>.unwatch(\"constructor\")((p={}, (p.z = *::*)()), 3))))(prototype = constructor;))){yield 3/0; }");
tryItOut("__proto__ = [[1]] , undefined;");
tryItOut("L:if(true <= @foo) {let __noSuchMethod__;export constructor; }");
tryItOut("/*infloop*/L:for(#0=((Math.pow).call( /x/ , )).@*; (1e+81.valueOf(\"number\")); <{__proto__}></{__proto__}>) export *;");
tryItOut("export function::__noSuchMethod__\n{ }");
tryItOut("const prototype, __noSuchMethod__ = this\nthis\n");
tryItOut("do return .2;\n;\n while((eval(\"if(window) { if ([]) /a/gi else {return *::*; }}\",  /x/g  &= <x/>)) && 0);");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = __iterator__ in [[1]]) {return <y><z/></y>;throw __noSuchMethod__; }");
tryItOut("/*for..in*/for(constructor = () in window) /*for..in*/for(var __proto__ = window % <x><y/></x> in <x><y/></x>) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(var constructor = <x><y/></x>(({a2:z2}), @foo) in <x><y/></x>) {constructor;return (function ([y]) { })(); }");
tryItOut("/*for..in*/for(let __count__ in (((new Function(\"export *;\")))((function ([y]) { })())))const constructor, __parent__ = @foo;");
tryItOut("/*for..in*/for(const [__parent__, (prototype)] = (<x/>)(, 'haha'.split)\f in 1.3) gc()");
tryItOut("yield");
tryItOut("while((eval()) && 0)throw [z1];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x><y/></x>) var __proto__;");
tryItOut("L:do yield;break ; while((((uneval(false))).@foo) && 0);");
tryItOut("if(((uneval((__parent__ = 1.3))))) { if (window.__lookupGetter__(\"__proto__\").yoyo([z1,,])) {case 8: ; }} else (#1=[#1#]);");
tryItOut("[1,2,3,4].map\nvar __parent__ =  /x/ ;\n");
tryItOut("(*)\nif(__iterator__) yield  /x/g ;");
tryItOut("{{/*infloop*/do var function::constructor, function::__noSuchMethod__ = [[1]]; while(this.__defineSetter__(\"__parent__\", eval)); } }");
tryItOut("L:if((__parent__)[<y><z/></y>]) { if ((this.__defineSetter__(\"__parent__\", (Math.pow).apply))) gc() else {throw [,,z1]; }}\nexport *;\n");
tryItOut("M:while((*) && 0){}");
tryItOut("switch(yield (__count__.__noSuchMethod__)) { default: break; case 9: break;  }");
tryItOut("if((__parent__.__parent__ = (constructor.__parent__) - <x/>)) /*for..in*/for(let __noSuchMethod__ = prop.prop = __iterator__ in <x><y/></x>) gc() else  if (( /* Comment */(__count__) = prototype = <y><z/></y>)) { }");
tryItOut("L: {export *; const __parent__; }");
tryItOut("/*infloop*/for((new [[]]()); (function ([y]) { })() for (constructor in constructor); (#2=({__proto__:  \"\" }))) {/*infloop*/while(__parent__){__proto__; } }");
tryItOut("with({prop: new String()})gc()");
tryItOut("/*for..in*/for(constructor({}) in (this.hasOwnProperty(\"prototype\"))) M:if(@foo) {export __noSuchMethod__; } else ");
tryItOut("/*infloop*/for(__proto__.__parent__ =  '' ; [prototype, , , ] = (this.__defineSetter__(\"constructor\", Function)); ( '' .watch(\"prop\", <ccc:ddd><>[,,]</>yyy</ccc:ddd>))) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in ( \"\" )((-1))) {let ([1,2,3,4].map, __noSuchMethod__ = <><x><y/></x></>) { {} }yield; } }");
tryItOut("gc()\nvar prop = <x><y/></x>;\n");
tryItOut("yield ({a1:1});");
tryItOut("/*infloop*/for(__noSuchMethod__.__parent__ setter= <><x><y/></x></>; prototype = -1; ({ set constructor(__count__) { var <x><y/></x>; }  }).__lookupGetter__(\"__parent__\")) gc()");
tryItOut("/*for..in*/M:for(let [prop, __parent__] = <><!--yy--></> in (uneval( /x/g \n)).__lookupSetter__(\"__proto__\")) {export \fprop; }");
tryItOut("{break L;var __proto__, __noSuchMethod__; }");
tryItOut("__parent__;while((yield) && 0){return;{} }");
tryItOut("[1,2,3,4].slice");
tryItOut("with((<x><y/><//*\n*/x> + *::*))return <x/>;");
tryItOut("with({}) { let(__iterator__ = this(), __parent__ = __proto__ ? __proto__ : this) ((function(){__parent__})()); } ");
tryItOut("M:if(#0=<x/>) {if(({a1:1})\n) { if (__parent__ = [1]) {;export *; } else {{} }} } else  if (__parent__ = typeof <><x><y/></x></> ? (let (__iterator__ = null) <x><y/></x>) : this.zzz.zzz) {export *; } else constructor = <x><y/></x>.constructor = __proto__.prototype");
tryItOut("switch(this) { case 3: break; case 9: break; case undefined.propertyIsEnumerable(\"__count__\"): break;  }");
tryItOut("L: {yield <><x><y/></x></>;{}\f }");
tryItOut("/*infloop*/for(let __proto__; 'fafafa'.replace(/a/g, new Function); yield return -1) return;");
tryItOut("with({__proto__: [(__proto__ = new (false)(<y><z/></y>))]}){/*for..in*/for(const __proto__ in this.__defineSetter__(\"prototype\", gc)) {const __iterator__, __count__ = 033; } }");
tryItOut("/*infloop*/for(let __proto__; (<>yyy</> - (({ prop: __iterator__, constructor: prop }) = __proto__)); undefined) {M:if(__proto__) {({ __parent__: ({ __proto__: constructor }) })/*for..in*/for(const [__iterator__, prop] = constructor in <x/>) yyy__iterator__ = window, __proto__ = window; } }");
tryItOut("/*infloop*/M:for((* ? prototype : [,,] for each (__parent__ in <><x><y/></x></>) for each (__parent__ in prototype)); (<y><z/></y> == <y><z/></y>); prop) break ");
tryItOut("for(let y in []);");
tryItOut("if((({a1:1}) for each (prototype in gc()) for (__iterator__ in *::*))) return window; else  if ((uneval(<y><z/></y>)) if (undefined)) /*infloop*/for(const __proto__; __parent__; <x><y/></x>) return 1e-81; else {gc() }");
tryItOut("/*infloop*/for(\n /x/ \f; [[1]]; [15,16,17,18].some((1 for (x in [])), null in <x/>)) /*for..in*/for(let [__count__, prototype] =  /x/  in <y><z/></y>) throw this;");
tryItOut("(\f@foo);export prop;");
tryItOut("if(function(id) { return id }) yield; else  if (true) export __proto__;");
tryItOut("{; }");
tryItOut("/*infloop*/L:for(__parent__; undefined.isPrototypeOf(<x/>); true) {prop = window;return false; }");
tryItOut("/*infloop*/for(({ __count__: constructor }) = prop = (<><x><y/></x></> == <x><y/></x>); *::*.unwatch(\"__proto__\"); (<x/>)(<x><y/></x>) = .__lookupGetter__(\"__parent__\")) {var __count__ = this;with(<x><y/></x>); }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = Math.pow((false <= this), prototype) in 'fafafa'.replace(/a/g, (function(id) { return id }).watch)) {export __iterator__\n\n }");
tryItOut("{/*infloop*/for(var [] = ; prototype.isPrototypeOf(<><x><y/></x></>); delete <x/>.yoyo([z1])) throw <><x><y/\f></x></>; }");
tryItOut("do  while(([[11,12,13,14].map]) && 0);");
tryItOut("/*infloop*/L:do (@foo); while(<x/>);");
tryItOut("{throw ([prototype if (<><x><y/></x></>\r)]);/*infloop*/for([] = window ^ __iterator__.__count__; (new RegExp())++; ('fafafa'.replace(/a/g, (<><x><y/></x></>).__defineSetter__))) export *; }");
tryItOut("M:if([__noSuchMethod__ for ( /x/ ['__count__'] in <x><y/></x>) if (set)]) var __iterator__: <><x><y/></x></>;");
tryItOut("/*for..in*/for(const constructor = true in  /x/ ) {new Functionreturn; }");
tryItOut("with({prototype: eval(\"new RegExp(<x><y/></x> ? this :  /x/ , [,,])\", (-1).eval(<y><z/></y>))})break ;\nlet (__proto__ = @foo, prop = undefined) { gc() }\n");
tryItOut("try { for(let y in [5,6,7,8]) throw __parent__; } catch(__parent__ if (function(){return ({gc() });})()) { this['__proto__'] = __count__; } ");
tryItOut("while((prototype = if(<xxx {constructor}={<x/>} />) {yield;throw [z1,,]; } else  if ((prototype)) {return;return; }) && 0){if(<x><y/></x>.__iterator__ = [ '' ].map(function(q) { return q; })) { if (5.0000000000000000000000.__count__) {export *;return; }} else {export __iterator__;yield; }if(window %= 5.0000000000000000000000) {yield;break ; } else  if (--true) {yield; } }");
tryItOut("let(({ __count__: __parent__, setter: prop }) = (this.__defineSetter__(\"__proto__\", (new Function(\"(*::*);\")))), __parent__ = @foo) ((function(){for(let y in []);})());");
tryItOut("with((@foo in window))(@foo);");
tryItOut("/*infloop*/for(<><x><y/></x></>['prop'] = (__noSuchMethod__.__noSuchMethod__ setter= null %= <y><z/></y> >>> <><x><y/></x></>); ((@foo.constructor).yoyo( /x/ [undefined])) ? function(id) { return id }++ : new <><x><y/></x></>()((true.hasOwnProperty(\"__noSuchMethod__\")), 0x99); (uneval(<><x><y/></x></>))) export prop; const constructor;");
tryItOut("switch( \"\" ) { default: export *;break; return;break; break;  }");
tryItOut("-0");
tryItOut("{const __count__ = 5.0000000000000000000000, prototype;(<x><y/></x>); }<><x><y/></x></>;");
