tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop\f['prototype'] in (export prop;.throw(constructor))) /*for..in*/for(let constructor in __parent__ = #1=[#1#]) {export __count__;export *\n; }");
tryItOut("/*infloop*/for(typeof ~-1; (yield [[1]]); (!yield *::*)) this;");
tryItOut("/*infloop*/do gc() while(<x/>);");
tryItOut("let ([, ] = (<><x><y/></x></>)(new Date(*::*), 0x99), [(\f{ __noSuchMethod__:  '' , __iterator__: ({ prop: ({ __iterator__: prototype, prop: __proto__ }) }) }), __iterator__]) { L: {return;<x/>; } }");
tryItOut("M:if(((Math.pow(<x/>, @foo))())) { if (<x/>.__noSuchMethod__ = (function () { export *; } )(.2, false)) yield; else eval}");
tryItOut("while(((<y><z/></y>.eval(null))) && 0){ }");
tryItOut("");
tryItOut("/*for..in*/for(var constructor = (new RegExp(*::* + (-0), arguments).valueOf(\"number\")) in new (yield = prop)()) {/*infloop*/M:for(let prop = prop; this[window]; (<><x><y/></\fx></>\n)) export __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let 5.0000000000000000000000['__noSuchMethod__'] in (-0)) return this;");
tryItOut("const x::prototype;");
tryItOut("if([__parent__.__noSuchMethod__].filter(function  prototype (prop) { yield .2 } )) { if (<><zzz>(prototype = <x><y/></x\f> < __parent__) -= (prop = null)</zzz></>) {/*infloop*/for(+5.0000000000000000000000; (function ([y]) { })(false, 3/0); <x/> <= window) gc()prop =  /x/g ; }} else {/*infloop*/while( /x/g ){<><x><y/></x></>;{} } }");
tryItOut("const __parent__");
tryItOut("if((prop = __iterator__ = __count__ = constructor ? __count__.__count__ = (this.__defineGetter__(\"__noSuchMethod__\", true)) - <><x><y/></x></> : -0.yoyo(<x><y/></x>).__proto__)) {break M; } else  if ((p={}, (p.z = <x><y/></x>)()) >>= (constructor.(this.zzz.zzz).eval(<><x><y/></x></>.isPrototypeOf(*::*.throw(0.1))))[String(*::*, prop)].prop) do <y><z/></y>; while((true) && 0);");
tryItOut("break L");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in window) ");
tryItOut("do {( /x/g );return; } while(((prototype = @foo /= new <y><z/></y>() >> ())) && 0);");
tryItOut("{yield prop.__noSuchMethod__; }");
tryItOut("/*for..in*/for(var __proto__ in (((__proto__.watch(\"__count__\", #1#).eval(0.1)).watch)(({__noSuchMethod__: <x><y/></x>++})))){prototype = __count__; }");
tryItOut("return ((undefined ^= (-1).throw(prop > *::*)) in ({ get __proto__(prop, constructor) { return <y><z/></y> }  }) for each (constructor in *::*) for (__parent__ in 033) if ([1]));");
tryItOut("/*infloop*/L:while((new this())){throw  '' ;this; }");
tryItOut("/*infloop*/for(const __count__; (( /x/ ).call(<><x><y/></x></>, )); <x><y/></x>.([,,z1])) const __iterator__ = *::*, __proto__ = <><x><y/></x></>\nif(__count__) let prototype = <x><y/></x>\t; else  if ((<><x><y/></x></>).call) throw <><x><y/></x></>;");
tryItOut("try { export __proto__; } finally { export *; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 *///h\n for  each(prop in null) return 0/0;");
tryItOut("L:if([setter = false].sort(function  __proto__ (__parent__, constructor) { yield window; } )) {yield  /x/g ;yield window;export __parent__; } else M:if(false) {} else {try { const __parent__ = this, prototype = [z1,,]; } catch(__count__) { const __proto__ = <y><z/></y>, __proto__; } finally { yield; }  }");
tryItOut("M:do (undefined); while((0/0.@foo) && 0);");
tryItOut("{while((delete new prop ^ null(*::*.__lookupGetter__(\"__count__\"))) && 0){break ;gc() } }");
tryItOut("M:if(<><x><y/></x></>) { if (<x/>) {prototype; } else {function ()<x><y/></x> }}");
tryItOut("if(__parent__ = <y><z/></y>) { if (true ? * :  /x/ ) {null; } else export constructor;}");
tryItOut("/*infloop*/while(undefined){(<><x><y/></x></>).__defineSetter__let __noSuchMethod__\ngc() }");
tryItOut("with({}) yield [,];");
tryItOut("if((__count__.__noSuchMethod__ getter= (({}).__lookupGetter__).apply).valueOf(\"number\")) { if ( \"\" ) L:with(let (function::constructor, __parent__) ((__proto__.__noSuchMethod__ = <x/>).watch(\"constructor\", function (__count__, prop) { yield  /x/  } ))){let __parent__ = constructor;throw false; } else ;}");
tryItOut("return constructor ^= this;");
tryItOut("{if((<x><y/></x>.yoyo(function(id) { return id }).propertyIsEnumerable(\"__proto__\"))) { if (({prototype getter: new Function,  get __noSuchMethod__ __noSuchMethod__ () { yield new <><x><y/></x></>() }  })) (<><x><y/></x></>);} else {*;var __proto__; } }");
tryItOut("continue ;");
tryItOut("/*for..in*/for(let [prototype, __parent__] = new ({}).__lookupGetter__(, constructor) in (-0).prototype) {if(window) { if (<x/>) export *; else {return [[]];return; }} const __proto__;export constructor; }");
tryItOut("while(((prop.prop setter= <><x><y/></x></>)) && 0)export *;");
tryItOut("/*for..in*/L:for(const __parent__ in (((1 for (x in [])))(<x><y/></x>))){(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(var __parent__.__iterator__ in true.propertyIsEnumerable(\"__count__\")) if(__iterator__) <xxx {__noSuchMethod__}={<x><y/></x>} /> else  if (({a2:z2})) export __noSuchMethod__; else prototype = <x><y/></x>;");
tryItOut("do return @foo; while((*::* >>> undefined) && 0);");
tryItOut("let (__proto__ = (const __parent__;.throw(<>set</>)).throw( /* Comment */<x/>)) { /*for..in*/L:for(let [__proto__, __iterator__] = (this.__defineGetter__\f(\"__proto__\", ({}).__lookupGetter__) === __parent__ = 0.1) in <x/> ? window : *::*) let __proto__ = false, __iterator__ = ({a2:z2}); }");
tryItOut("throw <x><y/></x>; const prototype;");
tryItOut("/*infloop*/L:for(prop = __proto__ = constructor;; ( \"\" )[033];  \"\"  === 4.) {__noSuchMethod__return null; }");
tryItOut("while(((\n({constructor: __noSuchMethod__ = #1# }))\n >>> [11,12,13,14].some.__parent__ !== (new (prop)(prop++, function(id) { return id }))) && 0){export __parent__; }");
tryItOut("do try { yield; } catch(__proto__) { return; }  while((([3/0].map(eval))) && 0);");
tryItOut("/*infloop*/for(const __count__; this.__defineGetter__(\"constructor\", ((<x/>).watch).apply); false) const prototype;");
tryItOut("/*for..in*/for(var __parent__ in (('haha'.split)((([([15,16,17,18].map('haha'.split, *))].filter((constructor).apply)).watch).call(yield <><x><y/></x></>, new (1e81)()) || window))){{export __iterator__; }__proto__, prop = window; }");
tryItOut("if(<>[({constructor: <><x><y/></x></>,  set x::__iterator__(constructor) { return <x/> }  })[(--<x><y/></x>)] for (constructor in (-0))]</>) if(prop) yield <y><z/></y>; else  if (true) {var prop = <><x><y/></x></>, function::constructor = *; } else  if (<y><z/></y>) {const prop, __iterator__; } else /*for..in*/for(__iterator__ = <><x><y/></x></> in <x/>) {{} }\n");
tryItOut("/*for..in*/L:for(prop in (((<y><z/></y>).watch)(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(*::*)))){var prop; }");
tryItOut("L: M:with({__iterator__: __parent__-=<><x><y/></x></>})return <y><z/></y>;");
tryItOut("if(1e4.__iterator__ = window) { if (__count__) yield  /x/ ;} else export *;");
tryItOut("if((uneval(window.set\n))) {{} } else {/*infloop*/L:for(\t__parent__ = <><x><y/></x></> -= null %=  \"\" ; ({ __proto__: __count__, __noSuchMethod__: __iterator__ }) = <x><y/></x> ? <><x><y/></x></> : <x><y/></x>; ([3/0 for each (__iterator__ in @foo)])) continue ; }");
tryItOut("if([__iterator__].map([1,2,3,4].slice) != (new  \"\" (__iterator__, [1])).*) {L:if() { if (<><x><y/></x></>.watch(\"let\", Math.sin)) export *; else {{} }}return; } else  if (()) export *; else {/*infloop*/do {__proto__;return; } while(<><x><y/></x></>);export *; }");
tryItOut("switch((<x><y/></x>.prototype)) { case ((uneval(<><x><y/></x></>))): case this.__defineSetter__(\"constructor\", [1,2,3,4].slice): <y><z/></y>; }");
tryItOut("/*infloop*/for(*.unwatch(\"__noSuchMethod__\") | *; this.__defineSetter__(\"__parent__\", <><x><y/></x></>); let (undefined = <y><z/></y>) (<><x><y/></x></>[<x><y/></x>])) __noSuchMethod__, constructor = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ prop: __iterator__ }) in try { var __count__; } catch(__parent__ if (function(){(<x><y/></x>);})()) {  } ) {throw this;export __count__; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let prop; this.__defineGetter__(\"__proto__\", (gc).apply);  \"\" ) {if(this) {} else  if (\fundefined) var __iterator__ = <x><y/></x>, __iterator__; else {var __proto__, prototype = this;yield; }*::* }");
tryItOut("return eval(\"@foo.__iterator__ = <x><y/></x>\", undefined.unwatch(\"prop\") in <y><z/></y>);");
tryItOut("M:switch(<><x><y/></x></>) { case  /x/ :  } const prototype;");
tryItOut("/*infloop*/while(<><bbb xmlns=\"<y><z/></y>\"></bbb></> ? 4. ^= this : ({a1:1}) & __iterator__[\narguments]){throw <x><y/></x>;do let prototype, __count__; while((Boolean(*)) && 0); }");
tryItOut("{}");
tryItOut("L:  if (<><x><y/></x></>)");
tryItOut("if(*) {return; } else  if (3.141592653589793) export *; else ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x><y/></x>) {export prop;\f__noSuchMethod__; }");
tryItOut("{if((constructor.__iterator__ getter= function(q) { return q; })) if(yield ({a1:1})) yield null; else {return  \"\" ; }with({__parent__: (__proto__)(<><x>\t<y/></x></>,  '' ) ? new (new Function(\"{}\"))(case function::prop.([15,16,17,18].some((@foo).watch, <x><y/></x>)): break; ) : #0=({__proto__: [,,]})}){} }");
tryItOut("if(<><x><y/></x></>.unwatch(\"prop\")) const __proto__; else /a/gi");
tryItOut("with({}) { yield function(id) { return id }; } ");
tryItOut("throw prop;");
tryItOut("switch(<> '' .hasOwnProperty(\"constructor\")</>) { case 3: let __noSuchMethod__ = 0.1, __iterator__;case __count__.prototype|=__proto__.__lookupGetter__(\"__noSuchMethod__\"): {(constructor);let __proto__, __count__ =  \"\" ; }case 0: ;break;  }");
tryItOut("let __noSuchMethod__;export __parent__;");
tryItOut("throw StopIteration;");
tryItOut("if(<y><z/></y>.prop) { if ((new prototype)) {var prop = <x/>, __proto__; }} else {yield;let prototype; }");
tryItOut("/*for..in*/for(let let = 3 .. (-0) in ((*::* if (__count__)))) /*for..in*/for(constructor = <x><y/></x>.([,]) in <x><y/></x>) {}");
tryItOut("M:do /*infloop*/for(var constructor = [,,z1]; true; __proto__) {{} } while((\n /* Comment */<x/>) && 0);");
tryItOut("throw StopIteration;");
tryItOut("switch((__noSuchMethod__(\t<x><y/></x>, -1))) { case 5: return null;break;  }");
tryItOut("/*infloop*/L:for(([[]].prop)(window); __proto__.(new <y><z/></y>); (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((new Boolean([z1,,], <y><z/></y>)[new (<x><y/></x>)((function ([y]) { })())]))).unwatch(\"__noSuchMethod__\")) {if(<y><z/></y>) { if (prop) continue M; else continue ;} }");
tryItOut("M:if((this if ([z1,,])).isPrototypeOf(typeof <><x><y/></x></>)) {{}null; } else  if (((yield __parent__))) __count__, __iterator__ =  /x/g  else {continue ;yield {}; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in *) \t{/*infloop*/M:for(constructor = *::*; @foo;  /x/ ) {; }var __proto__ = <x><y/></x>\r; }");
tryItOut("switch(( \"\"  -= <><x><y/></x></>)) { case (uneval(#1# &&  /x/g  += (<x><y/></x>.@foo))): break; ;break; case (function (__iterator__, __proto__) { return gc().unwatch(\"__count__\") } ).call((<x/> != true), (({}).hasOwnProperty + #1=[(yield <><x><y/></x></>)])): yield *; const prop; const __noSuchMethod__;break; if(this.valueOf(\"number\")) { if ([constructor for each (__proto__ in #1#)]) { const ; } else break ;}break; break; break; default: export prototype; }");
tryItOut("if([15,16,17,18].map((__noSuchMethod__).__defineSetter__, <><x><y/></x></>)) {prop, __count__;prototype; }");
tryItOut("/*infloop*/do throw <x><y/></x>; while(true);");
tryItOut("/*for..in*/for(const [prop, prototype] = <><\tx><y/></x></> .@x:: false in +undefined ? __noSuchMethod__.prototype getter= Function : 4.) /*infloop*/L:for(<><x><y/></x></>; window; <><x><y/></x></>) {throw <y><z/></y>;const __parent__; }");
tryItOut("with({__iterator__: 1.3})__proto__;");
tryItOut("let(__noSuchMethod__ = prop = (<x/>);.@foo) { function  constructor (__proto__) { return [,,z1] } ");
tryItOut("/*for..in*/for([__iterator__, __count__] = true in new Object([z1,,])) {yield; }");
tryItOut("let (__noSuchMethod__ = ( \"\" .propertyIsEnumerable(\"__proto__\") -= let (__iterator__ = window) <x><y/>\r</x>), constructor = <x/> !== ({})) { __count__.constructor }");
tryItOut("/*infloop*/for(({}).__lookupGetter__(window).valueOf(\"number\"); (<x><y/></x> <<= __parent__); (__noSuchMethod__ = this).prop = __proto__+=(undefined)[ \"\" ]) {throw -3/0; const get; }");
tryItOut("/*for..in*/M:for(const [prototype, __count__] = this.zzz.zzz in (@foo++) *=  \"\" ) L:if(<x><y/></x>) {throw @foo;export prototype; } else  if (<y><z/></y>) throw  '' ; else const __proto__, __count__ = <><x><y/></x></>;");
tryItOut("/*infloop*/L:while([, ] = [__proto__]){break L __parent__ = 1e81 }");
tryItOut("M:if(new undefined()) { if ((undefined.__defineSetter__(\"__count__\", 'haha'.split)) + ()) (3/0);} else (3/0);");
tryItOut("with({}) for(let y in []);");
tryItOut("{; }");
tryItOut("L:while(([,]) && 0)/*for..in*/L:for(var constructor in this.__defineGetter__(\"__proto__\",  /x/g )) continue ;");
tryItOut("/*for..in*/for(var __proto__ = !(null > <x/>.throw((yield <x/>))) in \f(new <><x><y/></x></>(1e81 ? < : <><x><y/></x></>))) /*infloop*/M:for(let __count__ = <x/>; window; @foo) [1,,]; const <bbb xmlns:ccc=\"\"><ccc:eee></ccc:eee></bbb>;");
tryItOut("return;");
tryItOut("if(<y><z/></y>) {return  /x/ ;yield 1e-81; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __proto__: prototype, __proto__: prototype }) in this) {}");
tryItOut("/*for..in*/for(constructor = (yield ) in (__count__.__parent__)) {{}yield; }");
tryItOut("export *");
tryItOut("/*infloop*/for(var ({ prop: ({ prop: ({ __iterator__: [], constructor: prop }) }), prop: __proto__ }) = <y><z/></y>; prototype((<><x><y/></x></>++))|=constructor.__noSuchMethod__ = window.unwatch(\"__iterator__\"); <><></></>) L:if(<x><y/></x>.([,])) __parent__ = true; else  if (*.__defineSetter__(\"prototype\", function(q) { return q; })) {( /x/ );const __parent__, __parent__ = 1e4; } else yield;");
tryItOut("L: {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in @foo) {}");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__iterator__ in [z1,,] << *::*) export constructor;");
tryItOut("L:with({prop:  '' .watch(\"__iterator__\", undefined)}){yield  /* Comment */<x><y/></x>;if(false) <x><y/></x>; else  if ([,,z1]\n) return #1=[#1#]; else {yield @foo; } }");
tryItOut("do yield 0/0; while(((gc).unwatch(\"__parent__\")) && 0);");
tryItOut("let(prototype, __parent__) ((function(){throw __iterator__;})());");
tryItOut("");
tryItOut("let (__iterator__, __iterator__) { {} }");
tryItOut("if(undefined) { if ((function ([y]) { })()) {'haha'.split /x/ ; }} else ;");
tryItOut("/*infloop*/while(1e+81){let __parent__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let [__proto__, __iterator__] = (([1,2,3,4].map)((({constructor: .2})), Array(<y><z/></y>))) in \n<x><y/></x>) {if(eval(\"return this;\", 1e4.__lookupGetter__(\"__iterator__\"))) const prototype; else  if (continue L) gc() else {Math.sinreturn; } }");
tryItOut("if([ '' ].map(function  __parent__ () { break M; } )) let __parent__, prop; else {throw  /x/g ; }");
tryItOut("if(([15,16,17,18].some(Math.pow, 033)).watch(\"__noSuchMethod__\", Function)) { if (((false).watch)() >= -3/0.constructor) {throw <><x><y/></x></>; } else const __noSuchMethod__;}");
tryItOut("break ;");
tryItOut("while(((<y><z/></y> for (__noSuchMethod__ in <x><y/></x>) if (-1))) && 0)gc()");
tryItOut("with({__iterator__: *}\f)yield;");
tryItOut("{/*infloop*/L:do  while(<><\tx><y/></x></>.propertyIsEnumerable(\"__parent__\")); }");
tryItOut("/*infloop*/for(({ prop: prop, prop: let }) = ([11,12,13,14].some); new Number(*::*, <y><z/></y>); (((function ([y]) { })() for each (__count__ in <x/>)))) {}\n");
tryItOut("if(<zzz><x/> , prototype</zzz>.(({__parent__: this.zzz.zzz }))) {/*infloop*/for(var setter; (*::* >= <y><z/></y>); (window).watch) export __proto__; } else  if (#0=<x><y/></x>.__parent__) export *; else {}");
tryItOut("\n");
tryItOut("if(<x><y/></x>) {break M; }");
tryItOut("if(#1=[#1#] <<= this.yoyo([__noSuchMethod__.new ([z1])(<><x><y/></x></>, window)].some(Function))) { if (new ([1,2,3,4].slice)(<><x><y/></x></>, 3.141592653589793)) {return;throw <x/>; }} else __noSuchMethod__ = __count__;");
tryItOut("if(()) {export *;/*for..in*/L:for(__iterator__ in -3/0) export *; } else  if (__parent__) {return;export *;export __iterator__; } else {while((<><x><y/></x></>) && 0)gc()yield; }");
tryItOut("{while((let (prop, __parent__ = <x><y/></x>) <><x><y/></x></>) && 0){break L; const __parent__; }/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <><x><y/></x></>) continue M; }");
tryItOut("/*infloop*/L:for(let constructor = __count__.(0.1) instanceof function(id) { return id } ? <x><y/></x> :  /x/ ; (({prop getter:  \"\"  }) :: (this.__defineSetter__(\"__noSuchMethod__\", <><x><y/></x></>))); [<x/>].filter('haha'.split) > *::* === @foo) {break ;throw [,]; }");
tryItOut("switch(void yield -3/0) { case 6: /*for..in*/for(const __proto__ in (('haha'.split)()))gc() }");
tryItOut("export __parent__;");
tryItOut("/*infloop*/L:for(var [prop] = (({prototype: ([<><x><y/></x></> for (__noSuchMethod__ in <x/>)] for each (__noSuchMethod__ in @foo)) })); function ([y]) { }; [[<x><y/></x>]]) //h\n[1,2,3,4].slice");
tryItOut("if(3) {let constructor;var __parent__; } else  if ( /* Comment */<x><y/></x>) export constructor;");
tryItOut("{prop = <><x><y/></x></>; }");
tryItOut("let (__iterator__ = <><x><y/></x></>) { export __proto__; }");
tryItOut("[1,2,3,4].slice");
tryItOut("/*infloop*/do /*for..in*/for(let __parent__ = -3/0 in  \"\" ) {return -0;continue M; } while(yield (<x/>++)[ '' ]);");
tryItOut("L: /*for..in*/for(const __count__ in ((/a/gi)(new (null)()))){;yield 1e+81; }");
tryItOut("/*for..in*/for(prop in ((function(q) { return q; })((*::*)[1e+81]))){const prop, __proto__ =  '' ;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in ((1e-81 <= \f<><x><y/></x></>) >> (this.__defineSetter__(\"__iterator__\", 'haha'.split)))) return;");
tryItOut("yield true;");
tryItOut("if((((({}).__lookupGetter__)(__proto__)\f).__lookupGetter__(\"__proto__\"))) {L: {gc() } }");
tryItOut("do export x::__noSuchMethod__; while((__iterator__) && 0);");
tryItOut("/*infloop*/L:for(( /x/g ((* ? function(id) { return id } : }), <><x><y/></x>\f</>)); ; (++(<bbb xmlns=\"@foo\"> </bbb> &&  /x/g ) instanceof prototype = <><x><y/></x></>)) {{const __iterator__, constructor; } }");
tryItOut("var __noSuchMethod__ = <x><y/></x>, __parent__ = this\nyield;");
tryItOut("/*infloop*/for(__parent__; <//h\n><x><y/></x></> / @foo; constructor = []) {/*infloop*/while( .([z1,,].isPrototypeOf(1e4))){/*infloop*/L:\tfor(__count__ = <y><z/></y>; prototype; undefined) return; }yield; }");
tryItOut("M:if(this) { if (1.2e3) break L;} else {{} }");
tryItOut("if(({a2:z2})) var __proto__; else  if ([1])  else {__parent__ =  /x/g , __noSuchMethod__; }");
tryItOut("break M\nthrow  \"\" ;");
tryItOut("{return <x><y/></x>;return 3/0; }");
tryItOut("/*infloop*/M:do  /x/ ; while([[1]])\n");
tryItOut("/*for..in*/for(const [({ prop: ({ __proto__: __count__ }) }), constructor] = ({ set constructor([1], __count__) { yield propfalse } ,  set __proto__ __count__ ()__parent__ =  /x/  }) in (prototype = true).hasOwnProperty\r(\"(__proto__ ^ <x><y/></x>)\").isPrototypeOf(.2.__proto__)) with({new (function (__noSuchMethod__) { (\ftrue); } )([z1,,], prototype): __noSuchMethod__ = (this.zzz.zzz)})/*infloop*/do  while(<><x><y/></x></>);");
tryItOut("{\nfunction (__parent__, prop)null }");
tryItOut("/*infloop*/for(\t(let (constructor) <x><y/></x>); <><zzz>[15,16,17,18].some((new Function(\"Math.pow\")), <xxx {__iterator__}={*} />)</zzz></>; eval(\"[(#2=({__parent__: <>return (++__noSuchMethod__ = this);</>}))]\", (<x><y/></x> for each (__count__ in <x/>)).__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; ((function ([y]) { })());; yield y; }))) {/*infloop*/do {var prop, prototype = *;yield 1e81; } while(window);if([*]) { if ( /x/g .watch(\"prop\", ({}).hasOwnProperty)\t.valueOf(\"number\")) {__proto__ = true; }} else return null; }");
tryItOut("yield ({a1:1});");
tryItOut("let (__iterator__ = <y><z/></y>[ \"\" ]) { let __noSuchMethod__;\nlet prototype = <><x><y/></x></>;\n }");
tryItOut("if(<><x><y/></x></>) let prototype;");
tryItOut("/*infloop*/M:for( '' ; <y><z/></y>; <><x><y/></x></>) export __noSuchMethod__;");
tryItOut("/*infloop*/for(@foo; [<x/>]; eval(\"[z1]\", undefined)) {continue ; }");
tryItOut("while((({ get delete prototype () { yield <x/> }  })) && 0)gc()");
tryItOut("L: var __proto__,  = undefined\n");
tryItOut("{const [prop, prototype, __parent__, , __iterator__]; }");
tryItOut("if(let (__iterator__ = [[]], __proto__) undefined >>= (<x><y/></x> ? __proto__ : 3) && \n<x/>) ; else {const __count__;__parent__ }");
tryItOut("{;const __noSuchMethod__, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("do {let prototype;\n\n } while(((prototype-=let (__count__, __iterator__ = 0x99) <x/>)) && 0);");
tryItOut("{yield;yield; }");
tryItOut("M:switch([,,]) { default: L: export prototype; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("this.__defineSetter__(\"__count__\", 3); const prop;\n");
tryItOut("/*infloop*/do let __iterator__ = [,]; while(~ ''  ? __count__ = window : this);");
tryItOut("M:if(prototype = [11,12,13,14].some) {(<x><y/></x>); } else  if ([__proto__]) yield <><x><y/></x></>; else with(0){throw {};return (-1); }");
tryItOut("if(<><x><y/></x></>) { if (<y><z/></y>) ; else prototype, __proto__;}");
tryItOut("switch(<><x><y/></x></>) { case @foo: break;  }");
tryItOut("while((\fthis.zzz.zzz) && 0){yield ;/*infloop*/for(const prop; null; this) yield\n(prototype); }");
tryItOut("with({constructor: ( /* Comment */__parent__ = __parent__)});");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((({}).__lookupGetter__)([1,,])))let (__noSuchMethod__ = <><x><y/></x></>) { const __parent__ =  /x/ , __noSuchMethod__; }");
tryItOut("/*infloop*/do (this); while(({ get __count__(__iterator__)this }));");
tryItOut("if(yield  \"\" .throw(3/0 >> true)) {yield;const function::constructor; } else {;; }");
tryItOut("{ }");
tryItOut("/*for..in*/L:for(var __proto__ in ((eval)(<x><y/></x>)))constructor");
tryItOut("return;");
tryItOut("with(<><zzz>(~(.2 < <x/>))</zzz></>)yield;");
tryItOut("{/*for..in*/for(__iterator__ = *::* in <x/>) {{} }/*infloop*/while(<xxx>{constructor}</xxx>)yield <><x><y/></x></>; }");
tryItOut("do {new Functiongc() } while(((__proto__.(<><x>//h\n<y/></x></>) ? (let (prototype, __iterator__) <><x><y/></x></>) : (new *::*(<x/>, <><x><y/></x></>)))) && 0);");
tryItOut("switch( /x/ ) { default: break; case  /x/ : constructorcase |: <><x><y/></x></>;break; case  '' : (1 for (x in [])) }\n/*for..in*//* nogeckoex bug 349964 */ for  each(var  /x/  in ({a1:1})) gc()\n");
tryItOut("let(__parent__ = null) { __noSuchMethod__;");
tryItOut("with({__noSuchMethod__: (new Iterator( \"\" ))}){Math.pow }");
tryItOut("do {{} } while((@foo) && 0);");
tryItOut("do L: break M; while(((#1=[#1#] if (<x/>).each)) && 0);");
tryItOut("let(__iterator__ = <><x>\t<y/></x></>, prototype = <><x><y/></x></>) { const constructor;");
tryItOut(";\nif(__proto__.__noSuchMethod__ = prototype) {{} } else  if (window) {const prototype; } else export __parent__;\n");
tryItOut("for(let y in [5,6,7,8]) return (yield @foo);");
tryItOut("/*infloop*/M:do *\n while((p={}, (p.z = [this for (__count__(__parent__) in <><x><y/></x></>) for (__noSuchMethod__ in 5.0000000000000000000000)])()));");
tryItOut("M:if(@foo) {constructor } else  if (-3/0) yield __proto__;");
tryItOut("if(#0=new Date(__noSuchMethod__ = true >= ((Function).call(true, <x><y/></x>, <y><z/></y>)))) {function ()*::*([,,z1]); } else {export *; }");
tryItOut("/*infloop*/for(__iterator__; <x/>; 5.0000000000000000000000) {var constructor = <x><y/></x>, __noSuchMethod__ = *::*; }");
tryItOut("do {break M; } while((function ([y]) { }) && 0); const __iterator__;");
tryItOut("try { for(let y in [5,6,7,8]) yield <><x><y/></x></>; } catch(constructor) {  } ");
tryItOut("return <y><z/></y> ? <x><y/></x> : __iterator__[[<x><y/></x>]];");
tryItOut("L:if() { if (<><>[(void <x/>--)].map(function  prototype (try { throw this; } catch(__count__ if (function(){throw <x><y/></x>;})()) { yield null; } finally { return; } ) {  } )</></>) {} else {{throw 1.3; } }}");
tryItOut("with(yield  /x/ ){break L; }");
tryItOut("for(let y in []);");
