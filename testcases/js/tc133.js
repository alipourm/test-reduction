tryItOut("if([ \"\" ]) { if ((true.isPrototypeOf(<><x><y/></x></>)).throw( \"\" .__lookupGetter__(\"__count__\")(constructor = *::*))) if(false) export *; else  if (function ([y]) { }) {continue L; } else {var __count__ = prototype, __iterator__ = <><x><y/\f></x></>; } else }");
tryItOut("{{}return; }");
tryItOut("return\n");
tryItOut("L:while(((constructor = ({}))) && 0){let __count__;try { return; } finally { {} }  = <x/>; }");
tryItOut("/*infloop*/while((*::* ^= <x><y/></x>) |= (window <= *)){const __parent__, prop = ({});L:if(({ __noSuchMethod__: __proto__, __proto__: prototype }) = constructor = __proto__) const __iterator__, prop = @foo; else  if (prop = eval(\" '' \", <><x><y/></x></>)) function(y) { yield y; export *;; yield y; } else {window; } }");
tryItOut("/*for..in*/for(let constructor in ((/a/gi)(<y><z/></y>))){let constructor = arguments, [function::constructor, , , prototype];export *; }");
tryItOut("if((new ((constructor .. __noSuchMethod__))()).@foo) ;");
tryItOut("/*infloop*/do yield *; while(__iterator__.__parent__ = <><x><y/></x></>);");
tryItOut("with({}) with({}) __iterator__ = constructor;");
tryItOut("L:if(({__parent__:  \"\" .prop, prop: ({}).hasOwnProperty((({prop: __parent__.__lookupGetter__(\"constructor\") })), let (__count__, prop =  /x/g ) <><x><y/></x></>) })) {/*infloop*/for(false--; prop = __parent__; 'fafafa'.replace(/a/g, <><x><y/></x></>)) {const try { gc() } finally { gc() }  = window; }/*infloop*/M:while(<x/>)export *; } else ");
tryItOut("with(*)var __proto__ = <x/>; const __noSuchMethod__;");
tryItOut("if(\fthis.__defineGetter__(\"prop\", function  constructor (__noSuchMethod__, __iterator__) { yield 1e81 } )) gc() else {return; }");
tryItOut("if((@foo)) {(<x><y/></x>);/*for..in*/for([__parent__, prop] = [11,12,13,14].filter in *::*) undefined; }");
tryItOut("/*infloop*/for(((yield (prototype%= /x/g ))); 0x99 !== *::*; Boolean()) ;");
tryItOut("{<><x><y/></x></>;const __iterator__, constructor = []; }");
tryItOut("M:if(((__iterator__ = (-0))++ for (__parent__ in <><x><y/></x></>) for each (prototype in __noSuchMethod__))) {/*for..in*/for([prop, prototype] =  \"\"  in [,,z1] ? <x><y/></x> :  \"\" ) {throw <><x><y/></x></>; } } else  if (((#2=[(.2.*)].unwatch(\"prop\"))(<xxx>{__noSuchMethod__}</xxx>[( /* Comment */this.__defineGetter__(\"constructor\", function(q) { return q; }))], (\t(yield <x><y/></x>))))) if(__iterator__.(<><x><y/></x></> += <x><y/></x>)) { if (((@foo for each (__noSuchMethod__ in *::*)))) yield;} else /*for..in*/for(var __count__ = null in *::*) {<x><y/></x> } else {yield;/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__ in  /x/ ) gc() const constructor; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((yield (<x/>.@*))(*::* -= <x/> >>> <x><y/></x>))){break M;L: {prop; const __proto__;return <x/>; } }");
tryItOut("/*infloop*/L:while(-0.hasOwnProperty(\"prop\"))(<><x><y/></x></>);");
tryItOut("return prototype;");
tryItOut("/*for..in*/for(var __iterator__ =  ? (this.__defineGetter__(\"__noSuchMethod__\", (1e+81).watch)) : +3/0 in <y><z/></y>) {/*for..in*/M:for(var __noSuchMethod__ in ((eval)(this))) /x/ ; }");
tryItOut("/*infloop*/for(__count__; (<><x><y/></x></> +  /x/ \n); [this.__defineSetter__(\"__count__\", /a/gi)]) {}");
tryItOut("/*for..in*/for(var __iterator__ in ({__iterator__: (\nfunction(id) { return id }).@foo,  set function(y) { yield y; yield;; yield y; }(__proto__, __parent__) { throw 1e4; }  })) do {{} } while(((__noSuchMethod__ = window)) && 0);");
tryItOut("export __noSuchMethod__;");
tryItOut("{returnif(prototype = constructor()) {} else  if (<bbb xmlns=\"__noSuchMethod__.__parent__\"><employee id=\"1\"><name>Joe</name><age>20</age></employee> </bbb>) {return; } }");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("if(((p={}, (p.z = *)()))) {/*for..in*/for(let constructor in (([[1]])(<y><z/></y>)));let __parent__ = <x><y/></x>, __parent__ = <x><y/></x>\nwindow; } else /*for..in*/M:for([constructor, prop] = (yield) in 033 *= <x><y/></x>) (<x><y/></x>);");
tryItOut("/*infloop*/do return ((p={}, (p.z = __noSuchMethod__ >>= *::*)())); while(({__noSuchMethod__: * }) % new (((1 for (x in []))).apply)( \"\" ).prototype);");
tryItOut("L: {{} }");
tryItOut("M:if(<x/>) {let constructor = <x/>;export *; } else  if ([,,z1]++) {var __proto__; }");
tryItOut("{var __count__ = [,,]; }");
tryItOut("/*for..in*/for(const __proto__(<y><z/></y>) in (let (constructor = function(id) { return id }, __iterator__) yield [,]) >>> ([false if (<x><y/></x>)]) instanceof (({}).hasOwnProperty)(<x/>)) yield;");
tryItOut("/*for..in*/for(__iterator__ = new (1 for (x in []))(prototype, 1.3) in *::*) \nyield __noSuchMethod__;");
tryItOut("__iterator__ = ({ __iterator__: \f[<{prop}><ccc:ddd><!--yy--></ccc:ddd></{prop}>yyy, []] });");
tryItOut("__count__ = prototype;");
tryItOut("/*for..in*/for(const [prop, __count__] = __iterator__ in <y><z/></y>) {gc() } const __iterator__;");
tryItOut("function(q) { return q; }");
tryItOut("/*for..in*/for(const prop in ((__iterator__)(<x><y/></x>))){break M;yield; }\n const __parent__;");
tryItOut("__iterator__ = __iterator__;");
tryItOut("/*for..in*/for(const [prototype, __parent__] = (p={}, (p.z = *)()) in <x><y/></x>) {continue M; }");
tryItOut("switch([, , ]) { default: /*for..in*/for(const __parent__ in true) const __count__; }");
tryItOut("return; const prototype;");
tryItOut("/*for..in*/for(const prop = this in [*::*, -1 * null.hasOwnProperty(\"__noSuchMethod__\")].sort([1,2,3,4].map)) yield; const prop;");
tryItOut("/*infloop*/L:while(__count__ = ([1,2,3,4].slice)){}");
tryItOut("with(((yield window)))__parent__;");
tryItOut("export *;");
tryItOut("/*for..in*/for(var __parent__ in ((gc)(window @ this)))-0;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype = <x><y/></x>.__iterator__ in undefined.watch(\"prototype\", ({}).__lookupGetter__)) const prototype = 0x99; const __count__;");
tryItOut("if(<y><z/></y>) let prop, __parent__;");
tryItOut("/*infloop*/for(__parent__ ? undefined : 0--; (prototype);  /x/g ) /*infloop*/for(({a2:z2}); -3/0; @foo) \n");
tryItOut("L: throw @foo;");
tryItOut("if( \"\" ) { }");
tryItOut("throw StopIteration;");
tryItOut("\nreturn [,];");
tryItOut("do {M:if((yield new arguments())) { if ( \"\"  /  \"\" ) yield <><x><y/></x></>;} else {export __noSuchMethod__; } } while(((__count__ = [z1])) && 0);");
tryItOut("{break M;var prop =  '' ; }");
tryItOut("/*for..in*/for(constructor in ((function  constructor (({ prototype: ({ function::__parent__: ({ __count__: __iterator__ }), __iterator__: ({ __noSuchMethod__: __noSuchMethod__ }) }) }))([z1,,] ? <><x><y/></x></> : true ? window : -__iterator__))(<x><y/></x> .. <><x><y/></x></> >= <x><y/></x> .. 1.3))){export __iterator__; }");
tryItOut("{let __count__ = <x><y/></x>if(@foo -= <><x><y/></x></>) { if (eval(\"(<x><y/></x>);\", constructor)) return *::*;} else  }");
tryItOut("for(let y in []);");
tryItOut("do {} while((<x><y/></x>) && 0);");
tryItOut("{throw undefined;gc() }");
tryItOut("/*for..in*/for(var //h\n__proto__ in 1e4) break ;");
tryItOut("gc()\nyield  \"\" ;\n");
tryItOut("throw <x><y/></x> in @foo;");
tryItOut("M:if(<y><z/></y>) { if ((__parent__ = this)) ;} else yield <x/>;");
tryItOut(" /x/ ;export constructor;");
tryItOut("with((prototype = __noSuchMethod__))throw *;");
tryItOut("M:if( /x/g ) (undefined);");
tryItOut("prop");
tryItOut("throw @foo; const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <x/>) export __parent__;");
tryItOut("return");
tryItOut("/*infloop*/for(<><x><y/></x></>; <x><y/></x>; []) { }");
tryItOut("do {let constructor;while(('fafafa'.replace(/a/g, <y><z/></y>)) && 0)with({__count__: this}){export *;const __iterator__ = constructor, constructor = <x><y/></x>; } } while((__count__) && 0);");
tryItOut("function  __iterator__ (prototype, prop) { return  /x/  }  const prop;");
tryItOut("L: false;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <\r> '' </>) break L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in 1e-81) {let __parent__ = prototype, __iterator__;yield 3; }");
tryItOut("if((uneval(__iterator__))) {throw prop;export *; } else {; }");
tryItOut("__noSuchMethod__ = #3={a:#3#}\n(window);");
tryItOut("this.zzz.zzz;");
tryItOut("let (__noSuchMethod__ = <x/> .@x:: __count__, prop = ({ __parent__: __noSuchMethod__, __iterator__: prototype }) = (prototype = __iterator__)) { if(1e+81) {{}(null); } else  if (new Function(<><x><y/></x></>)) {gc() } }");
tryItOut("/*infloop*/while(![11,12,13,14].some){/*for..in*/for(var __parent__ = true in prototype) {export __iterator__;yield  '' ; }yield; }");
tryItOut("/*for..in*/for(var [constructor, function::prop] = false in \fnew window.valueOf(\"number\")(*, <x/>)) if(<x/>) {export *;const __parent__ = -0, __iterator__; }");
tryItOut("L: {return *::*;if(this.__defineSetter__(\"__count__\", (<><x><y/></x></>).__defineSetter__)) { if ( /* Comment */(__noSuchMethod__ = prop)) throw  \"\" ;} else {break ;return; } }");
tryItOut("let (<y><z/></y>).__defineSetter__ = [[1]], __proto__\n/*for..in*/L:for(const __noSuchMethod__ in __proto__) {return; }");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {if(eval(\"gc()\", <><x><y/></x><\f/>) ? <x><y/></x>.propertyIsEnumerable(\"function::__noSuchMethod__\") : this >>= (function ([y]) { })()) (new Function(\"export *;\")) else {;yield; }yield (-0);yield *::*; } else  if ((__noSuchMethod__.__count__ = (__parent__+=1e4))) if(__noSuchMethod__ = (@foo.isPrototypeOf(true))\t) {return  /x/ ; } else  if (([z1,,].isPrototypeOf(*::*)).__noSuchMethod__) (0); else {/*\n*/if((#0=[ /x/ ])) {@foo } else  if (eval(\"<y><z/></y> || 1e81\", constructor <= null)) gc() }");
tryItOut("let (({ __noSuchMethod__: ({ __proto__: __count__, __noSuchMethod__: constructor }), constructor: [, prototype] }) = constructor = #1=[#1#]) { {}const __iterator__ = function ([y]) { }; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("{var __noSuchMethod__ = 0x99; }");
tryItOut("/*for..in*/for(var __parent__ in ((({}).hasOwnProperty)(3/0))){__parent__ = window(prop); }\nif(window)  \"\" ;");
tryItOut("let (prop = * | prototype, __count__.isPrototypeOf(prop).eval((__count__ = ((p={}, (p.z = true)())))) ? new prototype|= /x/  : __proto__) { {} }");
tryItOut("/*for..in*/for(let __proto__ in ((function  __proto__ ()<employee id=\"1\"><name>Joe</name><age>20</age></employee>)([11,12,13,14].map)))export *;");
tryItOut("export *;");
tryItOut("gc()");
tryItOut(" const __count__;");
tryItOut("return -0;");
tryItOut("L:if(window.hasOwnProperty(\"__iterator__\")) /*infloop*/do yield *; while(<x/>); else  if (__count__.(try { __count__ = __proto__; } finally { throw StopIteration; } ))  set __iterator__ __proto__ () { {gc() } } ");
tryItOut("/*infloop*/for(var [__noSuchMethod__, ] = -null.@*; ((yield 0/0)); ({__count__: new <><x><y/></x></>(<x><y/></x>, <x><y/></x>) })) {M:switch((*::* -= 0)) { default: do {return <><x><y/></x></>;yield __parent__; } while((<x><y/></x>) && 0);break;  }yield __iterator__.prototype; }");
tryItOut("yield ((new Function(\";\"))(<x><y/></x>));");
tryItOut("/*infloop*/while( /x/ .__noSuchMethod__ = * in (yield *::*)){export __iterator__; }");
tryItOut("throw StopIteration;");
tryItOut("if((<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>)(#3={a:#3#})) throw @foo.__defineSetter__(\"constructor\", (new Function(\"var __iterator__ = x::__count__;\"))); else  if (( if (<><x><y/></x></>)--).__lookupGetter__(\"__count__\")) if((eval(\"([15,16,17,18].sort((new Function(\\\"{}\\\")), this))\",  \"\" ))) { if (prototype = ((undefined).call(window, )) + (p={}, (p.z = ((Math.sin)--))())) {yield undefined; }} else {{ }gc() } else let set;");
tryItOut("/*infloop*/do {{} } while(<x/>);");
tryItOut("/*for..in*/for(var __noSuchMethod__ =  \"\"  in ()[<x><y/></x>]) break M;");
tryItOut("L: {continue ;export constructor/; }");
tryItOut("/*for..in*/for(__count__ = <y><z/></y> in constructor)  set constructor __noSuchMethod__ (set, prop) { yield false } ");
tryItOut("yield\n");
tryItOut("yield\n");
tryItOut("{yield;; }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*for..in*/for(({ __proto__: set }) in (('haha'.split)((window || <x/>)[ /x/  | __count__]))){gc()throw this; }");
tryItOut("if(#1=[#1#]) {( /x/ );(#3={a:#3#}); } else var constructor, constructor;");
tryItOut("yield ([,,z1].throw(<x><y/></x>));");
tryItOut("{gc() }");
tryItOut("let __proto__ = <x><y/></x>\n__parent__ = __count__;");
tryItOut("/*for..in*/for(__iterator__ in constructor-=<><x><y/></x></> /= null) {{} }");
tryItOut("/*infloop*/L:while(((new ((\n<x><y/></x>))())( /x/ ))){yield\nif(<y><z/></y>) {(-3/0); } }");
tryItOut("prop.__count__ getter= 'haha'.split, <x><y/></x>");
tryItOut("/*for..in*/for(const __count__ = new ({}).__lookupGetter__(*::*.@foo, [@foo]) in new Exception( /x/ )) {do {return;prop =  set __noSuchMethod__(__count__, __noSuchMethod__) { yield [z1] } ; } while(([11,12,13,14].some) && 0); }");
tryItOut("if( \"\" ) { if (#3={a:#3#}) {export __iterator__;window/*\n*/; } else yield;}\n{}");
tryItOut("{return true; }");
tryItOut("/*infloop*/for(const prototype; \n<x><y/></x>; (true.prototype)) {}");
tryItOut("let (__noSuchMethod__) { throw <x><y/></x>; }");
tryItOut("L:with(3 > <y><z/></y>)export *;");
tryItOut("while((([,] + 4. for each (__noSuchMethod__ in ) for each (prototype in 5.0000000000000000000000))) && 0);");
tryItOut("L:with(new eval(__count__))({}).__lookupGetter__");
tryItOut("/*infloop*/do {break M; } while(());");
tryItOut("do yield; while(((new (constructor)())) && 0);");
tryItOut("switch((<bbb xmlns=\"__noSuchMethod__\"><x><y/></x><!--yy--></bbb>)) { case 4: if( '' ) {(1e81);export constructor; }default: break; case 9:  }");
tryItOut("/*for..in*/for(let constructor = [(\ntrue)] in (prop = @foo >>>=*::*)\f) /*infloop*/M:for(let __iterator__; (<x><y/></x>.propertyIsEnumerable(\"prototype\")); 3.141592653589793) {function  __noSuchMethod__ ()windowgc() }");
tryItOut("/*infloop*/M:do ; while(new (__count__ = __parent__)());");
tryItOut("/*for..in*/for(let __proto__ = (this.propertyIsEnumerable(\"function::function::__parent__\")) in [[]]) {<x><y/></x>;yield; }");
tryItOut("let (prop = ([1,2,3,4].slice).call(\n<x><y\r/></x>, (eval(\"const prototype = function(id) { return id }, constructor;\", (__parent__ = *::*))))) { do {if(<x/>) { if (@foo) {; }} else export *;(window).__defineSetter__ } while((__count__.(3/0.unwatch(\"prop\") === (\nwindow))) && 0); }");
tryItOut("L:if((Object(__proto__ = __noSuchMethod__, 3/0).@* for (yield.__noSuchMethod__ in this.__defineSetter__(\"__parent__\", <x/>)))) {/*infloop*/M:for(prop;  '' ;  /x/ ) {gc()export __noSuchMethod__; } } else  if (this.__defineGetter__(\"__count__\", (new Function(\"export __count__;\")))) {return 3/0;/*infloop*/L:while( \"\" ) } else {export __count__; }");
tryItOut("M:if((<y><z/></y>.unwatch(\"__noSuchMethod__\"))) {return;; } else  if ((yield [,,z1]).(null.propertyIsEnumerable(\"prototype\").unwatch(\"prototype\"))) {gc() } else {yield;export prototype; }");
tryItOut("{1.2e3;if(<y><z/></y>.__iterator__ =  \"\" ) {prototype } else const __proto__; }");
tryItOut("with((__iterator__%=@foo))/*for..in*/for(const [__parent__, __count__] = [z1] in false) ");
tryItOut("M:if( '' ) {export __proto__;#1# }");
tryItOut("M:switch(1.3) { case prototype: break;  } const __iterator__;");
tryItOut("L:if((Math.sin).call) return *::*; else  if (/a/gi) throw  \"\" ; else {function  function::prop (__iterator__, __noSuchMethod__)3/0 }");
tryItOut("/*for..in*/for(const __count__ = <zzz><><x><y/></x></></zzz> in __count__) false;");
tryItOut("gc()");
tryItOut("L: ;");
tryItOut("yield;");
tryItOut("yield prop.prototype setter= (new Function).apply;");
tryItOut("{return;yield  \"\" ; }");
tryItOut("let (__iterator__ =  /x/g , __noSuchMethod__ = false) {  const __iterator__\n }");
tryItOut("switch((function(y) { yield y; return;; yield y; })) { case (((<y><z/></y>.__parent__))[((<><x><y/></x></>)())\t]): break; while((this) && 0)yield;break;  }\n");
tryItOut("if(prototype = prototype.__noSuchMethod__ \fsetter= function  prototype (constructor, __parent__) { yield; } ) { if (-0) {(prototype);continue M; } else prototype, constructor = @foo;}");
tryItOut("var constructor, __noSuchMethod__;const __count__, constructor;");
tryItOut("let(__noSuchMethod__ = #1=({__count__: (prototype.__noSuchMethod__ = this)}), __proto__) ((function(){return eval(\"Function\", (uneval(<x><y/></x>)));})());");
tryItOut("/*infloop*/for(const ({ constructor: [prop] }) = undefined; (__proto__.prototype getter= -0) + (033 ? function(id) { return id } : <x/>); (/*\n*/*::*).call(null,  \"\" )) yield constructor;");
tryItOut("return\nlet __parent__;");
tryItOut("if(-0) { if ((new (new (({}).hasOwnProperty)(yield <x/>)).__defineSetter__())) {return <x><y/></x>; } else {if( /x/g .isPrototypeOf(constructor).unwatch(\"prototype\")) { if (window.__lookupGetter__(\"__count__\")) {[1,2,3,4].map } else {yyy }} }}");
tryItOut("/*infloop*/M:for((__noSuchMethod__ = constructor = case *::*: break; case 7: break; case 6: try { yield false; } catch(__parent__) { __iterator__; } default: break; case window: case -3/0: break; case 8: continue ;const __proto__ =  \"\" , prop;case [,]: throw __parent__;); let __parent__, yield = ((0/0)()); /a/gi(__iterator__).watch(\"__count__\", (([ /x/ ])).__defineSetter__) ? [, ({ __parent__: [({ __iterator__: ({ __count__: __count__ }) }), , __count__], function::__count__ = #3={a:#3#}['prop']: [] })] : ()) {with({__iterator__: (function(q) { return q; })([z1])})export *;/*for..in*/for(const __count__ = .2 ^= <x><y/></x> in 5.0000000000000000000000.@*) return  \"\" ; }");
tryItOut("export *;return;\nexport prototype;\n");
tryItOut("if(* .@*:: @foo)  '' ; else {M:if(*) return; else {gc()yield __iterator__; }const __proto__ = undefined, prop = [,,]; }");
tryItOut("return +true;");
tryItOut("let (__iterator__ = __proto__ = <x><y/></x>.(<><x><y/></x></>)) { throw __noSuchMethod__; }");
tryItOut("/*for..in*/for(__parent__ in ((Math.pow)( /x/ ))){const constructor, __parent__ = constructor;return  /x/g ; }");
tryItOut("if(({__parent__: __parent__.__proto__ getter= gc })) L:if(<x><y/></x>.__noSuchMethod__) { if (new false) {new Functionyield; } else yield 1e+81;}");
tryItOut("if(({__parent__: (yield __noSuchMethod__)})) {/*infloop*/for([1,,]; <y><z/></y>; <x/>) {constructor } }");
tryItOut("/*for..in*/for(const prototype = ({__count__: [1].propertyIsEnumerable(\"__count__\"),  get  '' () { yield prototype = <><x><y/></x></> }  }) in window) ;");
tryItOut("/*infloop*/for(prototype; <><x><y/></x></>; @foo /  /x/g ) return;");
tryItOut("with({__parent__: ({__count__ getter: this.__defineGetter__(\"prop\", gc) })})with((<x><y/></x>.watch(\"__count__\", ([1,2,3,4].slice).apply).__lookupSetter__(\"prototype\")))/*infloop*/for(window; <x/>; __noSuchMethod__) throw __iterator__;");
tryItOut("M:if([({__proto__: window})]) throw undefined; else  if ((({}) ? @foo['constructor'] = <y><z/></y> ? <><x><y/></x></>.throw(<><x><y/></x></>) : <x/> :  /x/g  = *)) {}({}).hasOwnProperty else return;");
tryItOut("if([z1]) {return; }");
tryItOut("let (__parent__) { /*infloop*/for((function () { yield 0.1 } )(this); (({__iterator__: false })); (<y><z/></y>)(prototype,  /x/g )) {export __parent__; } }");
tryItOut("__proto__ = 033, __proto__ = undefined;");
tryItOut("L: gc()");
tryItOut("with({__count__: ({constructor: prop = <><x><y/></x></> }) >= ((prop = 033).__lookupSetter__(\"__noSuchMethod__\"))}){L:if((({a2:z2}) !== __count__)) { if (new (new __count__(<x><y/></x>, prop))() .. (constructor)( /x/ , *)) const constructor;} else {yield; } }");
tryItOut("{continue ; }");
tryItOut("if(<y><z/></y> || new Function) { if ( for ( '' .constructor in <x><y/></x>) if ()) {throw this; }} else {;<x/>; }");
tryItOut("{/*for..in*/for(let __proto__ = 'fafafa'.replace(/a/g, (true)\t.__defineSetter__) in prop) ; }");
tryItOut("if(({ __count__: ({ __parent__: prototype }), __noSuchMethod__: [, constructor, __iterator__, __iterator__] }) = ({ __noSuchMethod__: [, __count__, , constructor, ], prototype: ({ prop: __count__, __noSuchMethod__: prop }) })) {if((__iterator__|=window)) {{}; } else  if (constructor = *) {yield; } } else {let (__proto__) { <y><z/></y>; } }");
tryItOut("/*infloop*/for(({ prop: ({ __proto__: __parent__ }), __count__: __iterator__ }) = let (__parent__, constructor = 1.2e3) null; __parent__ =  /x/ --; (typeof -3/0)) {gc() }");
tryItOut("undefined;");
tryItOut("L:with(<><x><y/></x></>.@*)let __parent__ = *::*;");
tryItOut("if(new (function (__noSuchMethod__, constructor).2)(((function  prototype (constructor, __proto__) { yield (-0) } )(constructor && (-1), <x><y/></x>)), <x/>.__lookupSetter__(\"__parent__\"))) /*infloop*/for(let __noSuchMethod__ = <><x><y/></x></>;  /x/ ; (-1)) export *; else return <y><z/></y>;");
tryItOut("let (prototype) { return prop; }");
tryItOut("L:with({__proto__:  = <>(false ? <y><z/></y>.propertyIsEnumerable(\"prop\") : __count__ = window)</>}){this.__defineSetter__(\"prototype\", window);/*infloop*/for(prototype; <x/>; <x/>.@foo) ; }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */L: for  each((__noSuchMethod__) in 3/0) { switch  }");
tryItOut("if(([11,12,13,14].some)) {throw this;/*infloop*/M:for((<x><y/></x>.(<x><y/></x>)); void function(id) { return id };  \"\" \n) var function::__proto__; } else  if (this.__defineGetter__(\"constructor\", let (__noSuchMethod__ = <><x><y/></x></>, each = function(id) { return id }) <x><y/></x>)) {return  /x/ ;/*for..in*/M:for(const prototype in ((function  function::__count__ (__iterator__) { yield <x><y/></x> } )(*::* .. <x/>))){<x><y/></x>; } } else return <><x><y/></x></>");
tryItOut("/*infloop*/while((__iterator__.constructor setter= 'haha'.split).__lookupGetter__(\"__noSuchMethod__\")){/*infloop*/M:for(null; (-0); <y><z/></y>)  }");
tryItOut("throw StopIteration;");
tryItOut("L:while(([11,12,13,14].filter) && 0){continue M; }");
tryItOut("; const __proto__\f;");
tryItOut("M:while((#1#) && 0);");
tryItOut("yield;");
tryItOut("if(true) throw <><x><y/></x></>;\t else  if (<><x><y/></x></>) var __proto__; else {prop = *::*; }");
tryItOut("/*infloop*/L:for(var __proto__; (__noSuchMethod__.__count__ getter= (new Function(\"\"))); #1#) yield;");
tryItOut("L:with(@foo){switch(<x><\ty/></x>) { case 4: break;  } }");
tryItOut("{\t__parent__; const prototype;\nconst prop = [,,], __iterator__ = x::__parent__; }");
tryItOut("L: return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <x><y/></x>) \f{({ __noSuchMethod__: __iterator__, prototype: ({ __proto__: prototype }) }) }");
tryItOut("do {/*infloop*/for(let __noSuchMethod__ =  /x/g ; <x><y/></x>; window) {eval } } while((constructor|=null.__proto__) && 0);");
tryItOut("/*infloop*/{let (__proto__ = 1e+81, __parent__) { {} }/*for..in*/for(const __parent__ in ((new Function)(<y><z/></y>)))export __parent__; }__count__ setter: (true.__noSuchMethod__).watch while(({prop: true, \fprop: [,,z1] })(/);");
tryItOut("prop = .__proto__, constructor = <><><x><y/></x></></>.propertyIsEnumerable(\"__count__\")");
tryItOut("M:if(((Math.sin)(undefined)))  else  if (true getter: Function++.*) {L: export __proto__;export *; }");
tryItOut("let(__noSuchMethod__ = this, prop = <><</>) ((function(){throw 1e+81;})());");
