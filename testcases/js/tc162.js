tryItOut("let(prototype) ((function(){{}})()); const __parent__;");
tryItOut("L:if(<x/>) ; else {;(this); }");
tryItOut("with({__iterator__: <><x><y/></\fx></>}){export *; }");
tryItOut("{function ([y]) { };yield; }");
tryItOut("while(((this.__defineSetter__(\"__count__\", function  prototype () { throw 0/0; } ))) && 0){__parent__ = <x/>;export constructor; }");
tryItOut("break ;");
tryItOut("L:if((({ set constructor() { gc() } , __count__ setter: <zzz>__count__ = <><x><y/></x></></zzz> }))) { if (*::*) if(prototype = @foo) { if (<x/>) {{} } else (<x><y/></x>);}} else {do ; while((@foo.__defineGetter__(\"prototype\", function(y) { yield y; return <x><y/></x>;; yield y; })) && 0);with(<><x><y/></x></>){const __parent__, __iterator__; } }");
tryItOut("M:if(\n<x><y/></x>[3]) { if ((Function((<><x><y/></x></>)()))) {;{} } else {{}continue ; }}\n");
tryItOut("if(0.1) { if (this) return;} else {export *; }M:switch(null) { case <><x><y/></x></>:  }");
tryItOut("if(<x><y/></x>.unwatch(\"prototype\")) {gc()export __proto__; } else  if (window) break M; else yield;");
tryItOut("with({}) { return; } ");
tryItOut("(<x><y/></x>)\n");
tryItOut("/*infloop*/for(let ({ constructor: ({ __proto__: ({ constructor: prop }), prototype: ({ constructor: __iterator__ }) }), prop: __parent__ }) = (p={}, (p.z = <><x><y/></x></>)()); 0/0.watch(\"prop\", 'haha'.split); __noSuchMethod__ getter: null) yield;");
tryItOut("L:with({constructor: this.__defineSetter__(\"__iterator__\", ([1,2,3,4].slice).call) .@*:: [3/0] << (().__iterator__)}){return;{return; } }");
tryItOut("export __iterator__;/*infloop*/for( /x/g ;  /x/ ; <><x><y/></x></>) prototype, __proto__;");
tryItOut("/*for..in*/for(var constructor in ((*::*)(((<><x><y/></x></>(this, @foo)) for (prototype in this) if (<y><z/></y>)))))__iterator__");
tryItOut("M:if(<><x><y/></x></> ? <x><y/></x> :  '' ) { if (@foo .@ this) {yield; }} else {throw window; }");
tryItOut("return <><x><y/></x></>;gc()\n");
tryItOut("return;");
tryItOut("let(({ __count__: __proto__, prop: __noSuchMethod__ }) = eval(\"var prototype;\", this)) { yield <x><y/></x>;");
tryItOut("for(let y in []);");
tryItOut("with({__noSuchMethod__: __parent__/*\n*/.((gc).call(undefined, *::*))}){prototype; }");
tryItOut("do {/*infloop*/do return; while(({__proto__: *::* }));yield  /x/ ; } while(((((yield <x><y/></x>)) && window)) && 0);");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, \tMath.sin) |= [11,12,13,14].sort; <><x><y/></x></>.propertyIsEnumerable(\"__count__\"); (__parent__.(*::*))) {const prototype = #1=[#1#], __count__ = @foo; }");
tryItOut("while((*::* < this) && 0){; } const __noSuchMethod__;");
tryItOut("M:do {const constructor = false;throw *::*; } while((<x><y/></x>\n) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__parent__) in  \"\" ) (case 0: export  /x/g ;break; export prop;break; );");
tryItOut("{return; }");
tryItOut("/*infloop*/do {gc() } while(-3/0 >>= <x><y/></x>);");
tryItOut("if(new Exception()) { if ((true if (__noSuchMethod__))) with([1,,].watch(\"constructor\", (<><x><y/></x></>)//h\n.__defineSetter__)){export __iterator__;\f }} else {switch(<><zzz>[11,12,13,14].sort</zzz></>) { case 5: default: break; export __proto__;case false: if(null) {gc() }break;  } }");
tryItOut("\nL:with(({ get prop() { return 1e-81 }  }))export __iterator__;\n");
tryItOut("/*infloop*/while(prototype = __proto__);");
tryItOut("set");
tryItOut("yield function::constructor;");
tryItOut("/*infloop*/L:for(__parent__; \ntrue; __count__ < <><x><y/></x></>) {(undefined);{{<x><y/></x> } } }");
tryItOut("/*for..in*/for([prop, let] = ({ __noSuchMethod__: ({ __iterator__: prop, __noSuchMethod__: __count__ }) }) = \t in 3/0) {export *;break ; }");
tryItOut("let (try { try { for(let y in []); } catch(__iterator__) { return; }  } catch(__iterator__ if *) { __noSuchMethod__ = prototype; } ) { with((<x><y/></x>.).@*)yield; }");
tryItOut("let (prop = function(q) { return q; }) { L:if(0.1) {{}export __proto__; } else  if (__proto__) {export *;gc() } }");
tryItOut("return <x><y/></x>;\nexport *;\n");
tryItOut("/*infloop*/while(* * <><x><y/></x></> /= #2=1e-81){/*infloop*/while(false)break L; }");
tryItOut("continue ;\n /x/g \nexport *;\n");
tryItOut("if(this.__defineSetter__(\"__proto__\", (gc).apply)) {/*infloop*/for(__count__; __noSuchMethod__ = prototype; 1.3.isPrototypeOf(<x><y/></x>)) throw *;{export __count__;yield <x><y/></x>; } } else  if (eval(\"continue L;\", <><ccc:ddd><>yyy</></ccc:ddd></>)) {/*infloop*/for(var __noSuchMethod__ = <zzz\r> /x/ </zzz>; prototype.(({__count__: __noSuchMethod__ })); *) {return;{} }let __iterator__, constructor = null; }");
tryItOut(";");
tryItOut("return;");
tryItOut("true;");
tryItOut("/*for..in*/for(constructor in [1,,]) ({a2:z2})\n;");
tryItOut("return window;");
tryItOut("while((<x><y/></x>) && 0)prop, prototype = null;");
tryItOut("<y><z/></y>, <><x><y/></x></\n");
tryItOut("throw new __proto__\nlet __parent__;");
tryItOut("do {gc() } while((prop) && 0);");
tryItOut("L: continue ;");
tryItOut("let (__parent__ = eval(\"try {  } finally { continue M; } \", window.eval(<y><z/></y>)), setter = (*.__defineGetter__(\"prop\", (new /a/gi()).watch))) { let(__parent__ = (@foo--) , new @foo()//h\n) { throw StopIteration; }");
tryItOut("/*for..in*/for([__count__, prop] = -1 in [[1]]) return <x><y/></x>;");
tryItOut("/*infloop*/do {/*infloop*/for(var __parent__ = <y><z/></y>; function(id) { return id }; [z1]) {gc() } const __parent__; } while(__count__.__count__);");
tryItOut("function(q) { return q; }");
tryItOut("if(__proto__ != new Error(<x/>)) /*for..in*/for(let __count__ in window) const __iterator__ = const __count__ = <><x><y/></x></>, prototype = 3/0;; else  if (eval(\"throw null;\", <x><y/></x>)) {<x><y/></x>;gc() const __noSuchMethod__; }");
tryItOut("while(((<><zzz>-0</zzz></>[(((uneval( '' )))--)])) && 0)/*infloop*/ { M:while((this) && 0)<><x><y/></x></>; } ");
tryItOut("let(__count__) ((function(){throw StopIteration;})());");
tryItOut("if((__iterator__.yoyo(null))) {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __noSuchMethod__ in constructor) {}");
tryItOut("switch((__iterator__ = *) && (@foo >>> window)) { default: gc() }");
tryItOut("with(let (__count__) ([11,12,13,14].sort)){export __parent__;; }");
tryItOut("__noSuchMethod__");
tryItOut("M:while(((this.zzz.zzz)) && 0){var __iterator__ = <x/>;L: {yield;throw <x><y/></x>; } }");
tryItOut("if(Exception(<x><y/></x>)) {yield; } else  if (new Boolean()) {break L; }");
tryItOut("for(let y in []);");
tryItOut("{var prototype =  \"\" ;; }");
tryItOut("switch(<x/>) { case 2: export __parent__;break; default: yield undefined;break; break; case this.__defineGetter__(\"constructor\", (((<><x><y/></x></>.__parent__) !== (*::*.unwatch(\"prototype\")) if (true))).watch): yield;yield;break; break; case true: break; break;  }");
tryItOut("__parent__");
tryItOut("return (*::* / __noSuchMethod__)\n");
tryItOut("M:if(<xxx>{__noSuchMethod__}</xxx>) { if (@foo) {yield true; }} else {export *;{} }");
tryItOut("{with({__proto__: <><> </></>})export *;continue ; }");
tryItOut("; const prototype;");
tryItOut("/*for..in*/for(const [__parent__, \t__iterator__] = ((p={}, (p.z = (let (__proto__, prop) [,,z1]))())) in <x><y/></x>) {break L{} }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__proto__\", *::*)){const __count__ = *::*; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in [let (__noSuchMethod__, prototype) this.zzz.zzz].some((function  __parent__ ()#1#).call)) ((( /x/ ).watch).call).call");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__count__ in window.propertyIsEnumerable(\"__proto__\")) {/*infloop*/while(__proto__){0/0; }/*infloop*/do /*infloop*/for(__proto__; null; <\n><x><y/></x></>) {yield;{} } while(this.zzz.zzz); }");
tryItOut("if( /x/ ) {yield this;yield @foo; } else  if ((++@foo for (prototype.__count__//h\n in this))) if(<><x><y/></x></>) { if \f(<><x><y/></x></>) } else {let __count__ = <x><y/></x>, prototype;( /x/ ); } else  /x/g ");
tryItOut("yield  '' ;");
tryItOut("switch((<x><y/></x>.(<><x><y/></x></>))) { case <><>__proto__ = -3/0</></>: break L;yield;break; var __count__ = this; }");
tryItOut("/*for..in*/M:for(var __iterator__ in  /x/ ) {;var __noSuchMethod__ = @foo; }");
tryItOut("return;");
tryItOut("while((arguments) && 0)yield <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(var [prop, , , ({ __count__: <zzz>( /* Comment */<><x><y/></x></> .@x:: (null % 1e4))</zzz>, constructor: ({ __proto__: __iterator__ }) })] = __iterator__.__count__ getter= function(y) { yield y; prototype, prototype;; yield y; }; (yield  /x/g ); ((uneval((<x><y/></x>.unwatch(\"__proto__\")))))) gc()");
tryItOut("with([](__count__ % false)){}");
tryItOut("(true);");
tryItOut("if(((__count__%=undefined) -= )) {const __proto__;return; } else  if (function(q) { return q; }) let (constructor = undefined, prototype) { export *; } else {export constructor;let constructor, __count__; }");
tryItOut("if(\n@foo) return; else  if (yield <><x><y/></x></>)  \"\" ; else {__count__, __proto__; }");
tryItOut("/*infloop*/L:for( /* Comment */0x99++; (function(y) { yield y; continue L;; yield y; }(*::*, __iterator__)); //h\n<x/>) yield;");
tryItOut("/*infloop*/M:for((__proto__.(let (__proto__) <><x><y/></x></>)); <><x><y/></x></>.isPrototypeOf(arguments); ({a2:z2}) - this) L:if(@foo) yield;");
tryItOut("return [false if (prototype)];");
tryItOut("L:do {continue M; } while((__iterator__) && 0);");
tryItOut("with(__parent__ * undefined)yield <x><y/></x>;");
tryItOut("if( /x/ ) continue ; else  if (<><x><y/></x></>) const __count__; else {return @foo; }");
tryItOut("/*infloop*/do {; } while((p={}, (p.z = true % *)()));");
tryItOut("/*infloop*/for(const constructor = __iterator__, prop; (prop = (({prop: (<><x><y/></x></> ? arguments : constructor), prop setter: <><x><y/></x></> }))); ( /* Comment */__count__)) {/*infloop*/do {export __noSuchMethod__; } while((<>__proto__</> ? 3.141592653589793 : window)); }");
tryItOut("/*for..in*/for(constructor = [,,z1] in  '' ) {{} }");
tryItOut("M:while((eval(\" set prop(prop)this\", (uneval(true)))) && 0)/*infloop*/for(let constructor; this;  '' ) const __proto__;");
tryItOut("/*infloop*/do let __parent__ = *::*, __parent__ = #1=[#1#]; while((<x><y/></x>.__noSuchMethod__).*);");
tryItOut("/*infloop*/for(var [__noSuchMethod__, ({ prototype: ({ __noSuchMethod__: ({ __noSuchMethod__: ({ constructor\f: __count__ }) }), __count__: ({ prototype(<x/>): ({ prop: constructor, constructor: __proto__ }) }) }) }), window, [undefined for (__iterator__ in .2)]['constructor']] = (p={}, (p.z = __iterator__ = prototype)()); return.__iterator__.yoyo((\n( /* Comment */-1))); (constructor = <x><y/></x>)) {let prop, __count__; }");
tryItOut("with({__noSuchMethod__: <y><z/></y>})gc()");
tryItOut("/*infloop*/for(__noSuchMethod__; (new Array(1e81,  /x/ )); (prototype[<><x><y/></x>\n</>]) instanceof (eval(\" /x/ ;\", <x/>))) {let __parent__, __count__;with(null){let __count__ =  \"\" , __count__; } }");
tryItOut("#1=new Date(undefined)");
tryItOut("/*infloop*/for(const ({ prop: ({ __count__: [__parent__, prop, , ] }), __count__: null }) = (++ \"\" ); ( /x/g  - (-0)--);  /x/ (__proto__.constructor = [z1,,],  \"\" )) {throw arguments;<><x><y/></x></>; }");
tryItOut("yield ((yield (*::* ? false > * : ([<x><y/></x> for each (function::__parent__ in  '' )]))));");
tryItOut("if(let (__count__ = __parent__) (<x><y/></x>.__defineGetter__(\"prototype\", 'haha'.split))) { if (prop.__iterator__ = <><x>//h\n<y/></x></> >= true) M:if(#3={a:#3#}) ( /x/g ); else throw this; else {throw true; }}");
tryItOut("/*for..in*/for(var __iterator__.__iterator__ in false) { \"\" ;eval }");
tryItOut("if((* @ 0.1).__noSuchMethod__) {throw  '' ; } else  if (*::* == <x/>\r) {continue ; } else *, <x/>");
tryItOut("/*infloop*/while(eval(\"window\",  /x/ )){[1,2,3,4].sliceyield <x/>; }");
tryItOut("if(({ __proto__: __count__ }) = \nfunction ([y]) { }) {return <y><z/></y>(); }");
tryItOut("/*for..in*/for(let (((/a/gi)(<x><y/></x>, null)))((/a/gi).call( /x/ , __proto__)) in (((new Function).apply)(((new Boolean(<x/>,  /x/g )).prop))))if(window >= __proto__) {break L;return; } else  if (__iterator__.__parent__ getter= eval) {return; } else {break ;gc() }");
tryItOut("__count__ = window\n");
tryItOut("{;L:if(this) { if (3) return {};} else {return <y><z/></y>; } }");
tryItOut("/*for..in*/for(var [constructor, __count__] = <x/> in <x/>) {return; }");
tryItOut("let(__proto__ = ([z1] >> <x><y/></x> |= __proto__.(function(id) { return id }))) { return #1=[#1#] && __parent__;");
tryItOut("/*infloop*/for(__proto__ = *::*.@*; (@foo.watch(\"window\", function  constructor () { yield  /x/g  } ))[((constructor ? [] : 0).unwatch(\"__parent__\"))]; (Exception(true, __proto__) @ eval(\"setter\", ({a1:1})) .@ [15,16,17,18].some(function  constructor ()__proto__, __proto__ = <><x><y/></x></>))) {let (__count__ = window, __noSuchMethod__) {  } }");
tryItOut("/*infloop*/for(var prototype; __parent__ =  /* Comment */window; ([,,z1]--.yoyo((yield *)))) let constructor = this.*, ({ __proto__: function::__parent__ });");
tryItOut("with({__noSuchMethod__: (typeof constructor = <y><z/></y>.__defineGetter__(\"__noSuchMethod__\", Function))})(null);");
tryItOut("{}");
tryItOut("{function(q) { return q; }L: try { export __proto__; } finally { {} }  }");
tryItOut("L:with({__count__: (new <x/>(( /* Comment */),  '' ))})/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x><y/></x>) break ;");
tryItOut("M:with(function::__proto__.get setter= ('haha'.split).apply){@foo; }");
tryItOut("let (__proto__, __proto__ = __count__) { continue L;\nvar __parent__;\n }");
tryItOut("with({}) yield <x><y/></x>.propertyIsEnumerable(\"constructor\");");
tryItOut("while((window) && 0){ }");
tryItOut("this.zzz.zzz;");
tryItOut("gc\n/*for..in*/for([function::prototype, __noSuchMethod__] =  /x/  >>> <><x><y/></x></> in <x><y/></x>) (<><x><y/></x></>);");
tryItOut("throw prop;");
tryItOut("\tif((new Function)['prototype'] =  /x/ ) /*for..in*/M:for(var [__proto__, prop] = yield <y><z/></y> in 0.1) {const prototype = false; } else {new RangeError(); }");
tryItOut("/*for..in*/\ffor(const prototype in [[1]]) L:with({prop: this}){}");
tryItOut("if([11,12,13,14].map) throw false;");
tryItOut("switch(gc()) { S }");
tryItOut("{/*for..in*/for(let ({ constructor: __proto__, prop: __count__ }) in undefined) break ; }");
tryItOut("if(<x><y/></x>.@*.valueOf(\"number\")) constructor; else throw  \"\" ;");
tryItOut("{let function::prototype = (<x><y/></x> /= @foo); }\n/*infloop*/M:do {\flet constructor; } while(prototype);\n");
tryItOut("{yield;continue M; }");
tryItOut("L:if(break ;) let (constructor, __iterator__\t) { return <><x><y/></x></>; } else  if (this) {yield <x/>; }");
tryItOut("{break M; }");
tryItOut("/*for..in*/for(var each in let getter: function () {  } ) return;");
tryItOut("for(let y in [5,6,7,8]) let (__iterator__ = __parent__, __proto__ = <x><y/></x>) { gc() }");
tryItOut("L: let (__iterator__, prop =  '' ) { gc() }\n{}");
tryItOut("let __noSuchMethod__ = window; const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <><x><y/></x></>) let (constructor) { export prop; }");
tryItOut("return\n(1 for (x in []))");
tryItOut("/*infloop*/for(({ __count__: prop }) = \ncase <><x><y/></x></>: break; case null: continue L;break; break; const __noSuchMethod__ = [[]], prop = undefined;case <><x><y/></x></>: throw  /x/g ;break; default: const x::__proto__;break;  ? constructor : arguments; constructor; (+constructor()) gc()");
tryItOut("do ; while(([]) && 0);");
tryItOut("if(this) {yield; } else  if (<y><z/></y>) ; const prop;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(({}) in ((function (__parent__.constructor) { yield ((uneval(}))) } )(#2=false))){export *;/*infloop*/for(__count__ = __noSuchMethod__; @foo; <y><z/></y>) {} }");
tryItOut("\n");
tryItOut("if( /x/g .eval(*::*)) yield; else  if ( '' .unwatch(\"prototype\")) {export *;; } else return;");
tryItOut("/*infloop*/for(({ __noSuchMethod__: prop }) = this[prop]; <x/> ^ prototype; <><x><y/></x></>) [[1]];");
tryItOut("<x><y/></x>");
tryItOut("yield (__count__ ? <x/> : <><x><y/></x></>);");
tryItOut("M:with(1e4){yield *::*; } const constructor;");
tryItOut("{const prop, __proto__ = <x><y/></x>; }");
tryItOut("/*infloop*/while(1.3 > window)export *;");
tryItOut("/*infloop*/while((eval(\"__proto__.__proto__ = @foo\", window.__lookupSetter__(\"delete\")))){let (__proto__ = *::*, constructor = eval(\"<x><y/></x>\",  /x/g )) { break L; const constructor; } }");
tryItOut("L: {const prop; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(#3={a:#3#} = @foo; (({ get __parent__(({ constructor: __iterator__ }), constructor) { return __noSuchMethod__ = <x><y/></x> }  })); ('fafafa'.replace(/a/g, (<x><y/></x>).__defineSetter__))) {throw 033;[[1]], __count__; }");
tryItOut("for(let y in []);");
tryItOut("L:switch([[]].propertyIsEnumerable(\"__iterator__\")) { default: case 9: case this: yield;break; case (yield false): case  /* Comment */window <<= null: break;  }");
tryItOut("return;");
tryItOut("/*infloop*/for(Iterator(); let (function::__proto__) ({a1:1}); this.__defineSetter__(\"prototype\", 'haha'.split)) __parent__ = undefined");
tryItOut("let (__noSuchMethod__, prop) { const prop =  '' , __count__ = <x><y/></x>; }\n/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = (new <y><z/></y>()).__defineGetter__(\"[({ __noSuchMethod__: prototype }), , , , ]\", ({}).__lookupGetter__) in ((new (*::*).__defineSetter__()).valueOf(\"number\"))) yield  /x/ ;");
tryItOut("(<><x><y/></x></>)");
tryItOut("try { try { for(let y in []); } catch(__proto__) { return <x/>.propertyIsEnumerable(\"__count__\"); } finally { this.zzz.zzz; }  } catch(setter if (function(){(({}).__lookupGetter__.<><x><y/></x></>);})()) { for(let y in []); } catch(prototype) { prototype, prop = <x/>;\f } finally { __count__ = prototype; } ");
tryItOut("do return; while(( \"\" .__lookupSetter__(\"__parent__\")) && 0);");
tryItOut("/*for..in*/for(const prop in (((<><x><y/></x></>.*).watch)(<><xxx>{__proto__}</xxx></>))){const __noSuchMethod__;export *; }");
tryItOut("L:with(@foo)gc() const constructor;");
tryItOut("L:if([(-1.propertyIsEnumerable(\"prototype\")).unwatch(\"__noSuchMethod__\")].map((1 for (x in []))) !== eval(\"[15,16,17,18].filter(prototype, this)\", null)) return; else {break M; }");
tryItOut("return (this.zzz.zzz);");
tryItOut("{with({__parent__:  '' }){gc() }do {yield; } while((<><x><y/></x></>) && 0); }");
tryItOut("L:if(\f[(\n<y><z/></y>)]) { if (window.__lookupGetter__(\"__iterator__\")) {yield\n(__noSuchMethod__); }} else {const __parent__;yield [[]]; }");
tryItOut("/*for..in*/for(var prop = this |= this in <><x><y/></x></>) {window; }");
tryItOut("return <x/>;");
tryItOut("yield;");
tryItOut("{");
tryItOut("if(1e4) /*for..in*/for(let __parent__ in *::*) {__count__; } else  if ((eval(\"this\",  '' )).__count__ = (yield <x><y/></x>).__defineSetter__(\"constructor\", [1,2,3,4].map)) {let prototype, constructor; }");
tryItOut("{prop, __noSuchMethod__;const prop = 033, prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("function::prop");
tryItOut("/*infloop*/M:do {export *;return @foo; } while(.2);\nconst __iterator__ = [1], __noSuchMethod__;\n");
tryItOut("{throw *::*; const __noSuchMethod__; }");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("with({__parent__: [#1#].some(const prop;)})<x/>;");
tryItOut("let (window, {}) { (1 for (x in [])) }");
tryItOut("for(let y in [5,6,7,8]) let(1e81 = <><x><y/></x/*\n*/></>.unwatch(\"__count__\")) ((function(){throw StopIteration;})());");
tryItOut("/*for..in*/L:for(var [__count__, ({ __parent__: __count__, constructor: [__parent__] })] = * :: <x><y/></x> in !<x><y/></x>) /*infloop*/for(const ({ prop: constructor }) =  /x/ .__iterator__; ({__proto__ getter: Function }); (__noSuchMethod__.(__parent__: * = 3.141592653589793))) if((this.zzz.zzz)) {throw <><x><y/></x></>;export *; } else  if ((<x/> ? 3.141592653589793 : <x><y/></x>)) return false;");
tryItOut("do {return <x><y/></x>; } while((@foo) && 0);");
tryItOut("{}");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in  '' ) {;yield; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("if(let (__count__, __noSuchMethod__) .2.throw(<x/>)) { if (()) {function () { const constructor = <x><y/></x>, prop = *; }  }} else {if((true).call(__count__, (-1), <x/>)) { if ((window)[ /x/ ]) throw <y><z/></y>; else throw 5.0000000000000000000000;}export *; }\nvar __proto__ = [,,], __parent__ = <><x><y/></x></>;");
tryItOut("yield;export __parent__;");
tryItOut("/*for..in*/for(const __proto__ in null) {; }");
