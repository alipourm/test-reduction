tryItOut("*::*\t;");
tryItOut("constructor = (<x><y/></x>).watch(<y><z/></y>), prototype;");
tryItOut("L: {{} }");
tryItOut("with({}) { let(prototype = [<><x><y/></x></>.__lookupSetter__(\"prop\") for each (constructor in *)]) ((function(){return;})()); } ");
tryItOut("/*for..in*/for(let __parent__(__proto__ = <x><y/></x>) in ((new Function)((#1=[<><x><y/></x></>] % prop.__proto__ = 0/0))))export __iterator__;");
tryItOut("for(let y in []);");
tryItOut("return <><!--yy--></>\n");
tryItOut("if(prototype = (<x/>)) if(++<><x><y/></x></>) { if (({prop: this})) {function(y) { yield y; prop = window;; yield y; }gc() } else yield;}");
tryItOut("if() {var prototype =  /x/g ; } else  if (null.hasOwnProperty(\"prop\")) {(<x><y/></x>)\f; } else {/*for..in*/for(const [prototype, __iterator__] = 3.141592653589793 in null) break L; }");
tryItOut("with(<x><y/></x>.(-1).isPrototypeOf(( /x/ .eval((function ([y]) { })()))(undefined |= *, <y><z/></y>)))throw undefined;");
tryItOut("switch( '' .isPrototypeOf((<x><y/></x> = arguments))) { default: case (new (function () { return <y><z/></y>; } )()): yield false;break; case (__iterator__ = __proto__): export *;case this.__defineSetter__(\"__noSuchMethod__\", <><x><y/></x></>): __noSuchMethod__: <><x><y/></x></>break; case [[, __iterator__, ], , ({ __count__: constructor, __proto__: constructor })] = (p={}, (p.z = [1,,])()): L:if(1.2e3) {yield;return; } else  if () {gc() }case <><bbb xmlns:ccc=\"prototype = 1.2e3\"><ccc:eee></ccc:eee></bbb></>: throw <y><z/></y>;case #2=<><x><y/></x></>: yield;\nthrow undefined;\nbreak; break; break; var __noSuchMethod__ = this;break;  }");
tryItOut("/*infloop*/do M:with({__proto__: new this}){(this); } while([new (new ( \"\" )(prototype, <><x><y/></x></>))()].map(gc));");
tryItOut("/*infloop*/for(; <x/>(); __proto__.__noSuchMethod__ setter= 'haha'.split) {(@foo);\n<x/>;\n }");
tryItOut("/*for..in*/for([__proto__, __count__] = [].watch(\"__iterator__\", new Function) in (<y><z/></y> !== @foo)) {if(0) ; else  if (false) yield undefined; else const __proto__ = @foo, __noSuchMethod__ = \t<x><y/></x>;switch(new null) { default: break;  } }");
tryItOut("if( \"\" .*.__lookupGetter__(\"constructor\")) window; else gc()");
tryItOut("yield (-0)");
tryItOut("switch((yield (function ([y]) { })()(1e4, []).__iterator__)) { default: /*infloop*/M:for(const constructor;  /x/ .__lookupSetter__(\"constructor\"); ([<x/>].sort(function \t() { yield false } ) >>>=([<y><z/></y>].sort(function  __count__ () { yield <>__iterator__, __count__</> } ))).propertyIsEnumerable(\"__parent__\")) /*infloop*/for([__proto__] = window.valueOf(\"number\"); #1=<><x\f><y/></x>\f</>; ({__parent__: undefined })) {yield; }/*for..in*/L:for(var __count__ in <x/> , prototype) {/*infloop*/do return [[]]; while(<x><y/></x>); }break; case 7: case *::*.__count__ if ( /x/ ): /*for..in*/for(const function::constructor in ((({}).__lookupGetter__)(undefined)))[z1,,];break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in ((uneval(window)))) ;");
tryItOut("/*for..in*/for((5.0000000000000000000000 ^= function ([y]) { })(null.throw(__count__)) in *::*.@*) {var constructor, constructor = -0;let __noSuchMethod__ = 0/0; }");
tryItOut("with(__proto__)/*infloop*/for(let ({ __iterator__: __iterator__ }) = [11,12,13,14].filter; new function  __count__ () { return true } (); (true)[this]) export __iterator__;");
tryItOut("if((yield (null.unwatch(\"__iterator__\")[({})]))) return; else export *;");
tryItOut("if(<x><y/></x>) { if (window[1,2,3,4].slice else yield <><x><y/></x></>;}");
tryItOut("/*infloop*/for(let ({ constructor: prop }) = (null.__defineGetter__(\"__parent__\", (new Function(\"continue L;\")))); let (prop = __iterator__ = #3={a:#3#}) __proto__.isPrototypeOf//h\n(#1=[#1#]) >= [<x/> for each (__noSuchMethod__ in window)]; (yield ((yield <y><z/></y>)))) \nreturn <><x><y/></x></>;");
tryItOut("/*infloop*/for(var prototype = (4..eval(<y><z/></y>)); ([@foo].filter(@foo)); <x><y/></x>.(null)) return;");
tryItOut("/*for..in*/M:for((__iterator__) in undefined) {/*infloop*/for(var __iterator__; (let (__count__ = <><x><y/></x></>, constructor) #1=[#1#]); constructor =  \"\" ) function (__parent__) { const prop = null; }  }");
tryItOut("if(({a2:z2})) var __proto__; else  if (<><x><y/></x></>) {return *::*;prototype } else 1.2e3;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in true) return;");
tryItOut("L:if(((uneval(constructor = new true(prop, <><x><y/></x></>))))) if() {(*::*);return *; } else  if (<x/>.__lookupSetter__(\"constructor\")) {(__count__, prop);throw -3/0; }");
tryItOut("throw __parent__;");
tryItOut("if(<> </>) { if ((-1 != <><x><y/></x></> in new Function) >= this.__defineSetter__(\"__count__\", (<x><y/></x>).watch)) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <><x><y/></x></>) new Functionyield <x><y/></x>; }} else __noSuchMethod__, __noSuchMethod__ = null;");
tryItOut("do yield; while(([<><x><y/></x></>]) && 0);");
tryItOut("/*infloop*/M:while(({__proto__ getter: (1 for (x in [])), __proto__: <><x><y/></x></> }))var __proto__ = [z1], function::constructor;");
tryItOut("/*infloop*/while([] = ({({ __proto__: function::__noSuchMethod__ }), __iterator__:  ''  }))(window);");
tryItOut("if(getter) {break L; } else  if (<><x><y/></x></>) {( /x/ ).apply } else {(export *;); }");
tryItOut("/*for..in*/for(constructor.__count__ in ((function(y) { yield y; throw eval(\"__iterator__.__iterator__\", ());; yield y; })((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.@*)\n))){yield <x><y/></x>; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("for(let y in []);");
tryItOut("const __parent__, __iterator__ = <x/>; const __parent__;");
tryItOut("/*for..in*/for(const prototype in -0) {const prop =  \"\" ; }");
tryItOut("/*for..in*/for(let [constructor, __noSuchMethod__] = <bbb xmlns=\"(<x><y/></x>)(@foo)%=@foo.@*\"> </bbb> in constructor) {{\f} }");
tryItOut("/*for..in*/M:for(var  if (window) in <x><y/></x>) __iterator__");
tryItOut("/*infloop*/for(const prototype; #1=[#1#]; <x><y/></x>) {[1,,]; }");
tryItOut("/*for..in*/for(const __count__ = 5.0000000000000000000000.eval(033) in <x><y/></x>) return;");
tryItOut("{continue ;gc() }");
tryItOut("{/*infloop*/M:for([11,12,13,14].filter; undefined .@ <><x><y/></x></>; (return  \"\" )) eval\n\n }");
tryItOut("/*for..in*/for(prop = ((yield __noSuchMethod__)).__count__ in \t<x><y/></x>) (null).watch");
tryItOut("/*infloop*/for(const ({ constructor: [[({ prop: ({ prop: [~, ], @foo.eval(([<><x><y/></x></> for each (prototype in *::*)])): __parent__ }), __proto__: __parent__ }), [, ((<x><y/></x>)(*)), ], , ], , prototype, , ], constructor: undefined }) = <>yyy</>; [11,12,13,14].some; default: /*for..in*/L:for(__iterator__ in ((4.)(__proto__))){throw <y><z/></y>;; }break; case undefined: break; ) {/*infloop*/do throw <><x><y/></x></>; while(({ get __proto__(constructor, __parent__) { return <><x><y/></x></> } , __iterator__ setter: (1 for (x in [])) })); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (prototype(null)) in String((0.propertyIsEnumerable(\"constructor\")),  \"\" )) gc()");
tryItOut("<><x><y/></x></>\n");
tryItOut("/*for..in*/for(const [constructor, __count__] = constructor.__proto__ in (/*\n*/new (@foo)().isPrototypeOf().__parent__)) throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.prop in \f-0 /  '' ) {export __count__;\tlet prop = {}, __parent__; }");
tryItOut("\rwhile((let (({ __proto__: [], __proto__: ({ __count__: prop }) }), prototype = this.zzz.zzz) (__proto__ = *)) && 0){export __iterator__;M:if(*::*) (null); else  if (*) export *; }");
tryItOut("let (constructor = <><x><y/></x></>, prototype = <x/>) { let prop = window; }");
tryItOut("if((p={}, (p.z = (* >>= <y><z/></y>))())) {;if((__noSuchMethod__)) {return;throw <><x><y/></x></>; } } else  if (/*infloop*/*) {throw  \"\" ;{} } else {/*for..in*/M:for(let [prop, constructor] = yield [,] in window) {gc()function(y) { yield y; yield;; yield y; } }return; }");
tryItOut("/*for..in*/for(__iterator__ in ({ __count__: __noSuchMethod__, prototype: constructor }) = [].unwatch(\"__iterator__\")) {/*infloop*/for(@foo; <y><z/></y>;  '' ) throw  /x/ ;var prop, __iterator__ = this; }");
tryItOut("/*for..in*/for(const __proto__ = <x><y/></x> - [,,] in <><x><y/></x></>) yield;");
tryItOut("if() function (__proto__) { yield [] }  else {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (function::__count__) in this.zzz.zzz) throw window;yield this;");
tryItOut("/*infloop*/while(__proto__|=this){return; }");
tryItOut("switch(*::*.hasOwnProperty(\"prototype\")) { default: yield *::*;case 8: prop = __parent__, prototype = undefined;break;  }\n");
tryItOut("L: {return @foo; }//h\n");
tryItOut("with({__iterator__: (__proto__ = [])})export *;");
tryItOut("yield (__noSuchMethod__ === 3).valueOf(\"number\");");
tryItOut("L: {/*for..in*/for(const prototype in (Function)) {let __proto__;let __proto__; }const __iterator__ = constructor; }");
tryItOut("/*for..in*/\ffor(var constructor in (((1 for (x in [])))(('fafafa'.replace(/a/g, [1,2,3,4].map)))))L:switch(*.unwatch(\"__parent__\")) { case this.eval(prototype): yield true;function  __parent__ (constructor, prototype)window }{}\n{}");
tryItOut("with((@foo.yoyo(<x><y/></x>)))break L\n/*infloop*/while((@foo(false)\f))var prop;");
tryItOut("if(this.__defineGetter__(\"__count__\", Math.sin)) {let , __proto__; }");
tryItOut("L:if(@) { if ((prototype = [])) {<!--yy-->yield window; }} else if(__noSuchMethod__.prop setter= ({}).__lookupGetter__) {prop = this;yield; } else  if (true) {return <><x><y/></x></>;const __parent__, prop = <><x><y/></x></>; }");
tryItOut("L:if(([prop & undefined]).__proto__) {/*for..in*/for(let (prototype =  '' )((p={}, (p.z = *::*)())) = <y><z/></y> in -0) throw constructor; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (-0)) export *; }");
tryItOut("/*for..in*/for(let prototype(new (<xxx {constructor}={[z1]} />)((~<x/>), 3)) in (([prop--])((eval(\"/*for..in*/for(let __iterator__ in ((Math.pow)(this)))return @foo;\", constructor = <y><z/></y>)))))while((1.2e3) && 0){yield <y><z/></y>;export *; }");
tryItOut("/*for..in*/for(var constructor = <y><z/></y> in __iterator__ = ((p={}, (p.z = <x><y/></x>)()))) window;");
tryItOut("/*for..in*/L:for(__proto__ = __proto__ in <x/>) {{}with(this){{} } }");
tryItOut("/*infloop*/for(let prototype; this; [[]]) {const function::prototype = <x><y/></x>, __iterator__ = <x/>, ()(); }");
tryItOut("do {gc(){} } while((__iterator__) && 0);");
tryItOut("L:with({__proto__: (new __parent__ = prototype)}){if(({ __parent__: __iterator__ }) = (<x/>).call(<><x><y/></x></>, ) >= undefined =  /x/ .prototype = ({})) { if (*::*)  else with({prop: <x/>}){break ;default: yield <x/>;case 033: yield -0;break;  }}prototype }");
tryItOut(";\ngc()\n");
tryItOut("/*for..in*/L:for(let __iterator__ = ({__proto__: 4. }) in <><x><y/></x></>) {/*for..in*/L:for(let [function::prototype, constructor] = <x/> in window) {; } }");
tryItOut("/*infloop*/for((({prop: *::*, __proto__: prototype })); [1,2,3,4].slice ? function(id) { return id } : (eval(\"<x/>\",  '' )); .__defineSetter__(\"__count__\", Function)) export *;");
tryItOut("{/*for..in*/for(const prop = <><x><y/></x></> == <><x><y/></x></> in [,]) break L;/*for..in*/for(var constructor in ((Math.sin)(<x><y/></x>)))export *; }");
tryItOut("L:with({constructor: [ : 'fafafa'.replace(/a/g, <><x><y/></x></>) ? return #1=[#1#]\t : ((1 for (x in [])))(this, *::*)].map((function ([y]) { }.@*).watch)}){return [prototype = @foo]; }");
tryItOut("let __parent__, prop = <><x><y/></x></>;");
tryItOut("L: let (__noSuchMethod__ = (continue L)) { yield\n }");
tryItOut("/*for..in*/for(let [prop, __proto__] = __count__.__iterator__ in <><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", Math.sin)) /*for..in*/for(constructor in ((eval)((uneval(false)))))return #1=[#1#];");
tryItOut("if((constructor = __count__)) { if (((4.(<x/>, -1)).__lookupSetter__(\"__iterator__\"))) {if(*::*) {break ; } else yield;L:with(<x/>)export *; } else {const prop = window, __parent__;prototype, prototype; }}");
tryItOut("gc()\n\n");
tryItOut("do /*infloop*/M:do {*;4.; } while( { yield <x/> } ); while((<>yield new Error( /x/g )\n</>) && 0);");
tryItOut("if((__parent__ = 3.141592653589793)) return; else  if ((this.zzz.zzz)) return this;");
tryItOut("/*infloop*/M:for(const __parent__; __iterator__.prototype = __count__; [3.141592653589793 for each (__noSuchMethod__ in <x><y/></x>)]) {export *;1e+81; }");
tryItOut("{return;(window).watch }");
tryItOut("{/*for..in*/for([__parent__, constructor] = (new null()) in (function ([y]) { })()) (this); }");
tryItOut("let (prototype) { gc() }");
tryItOut("/*infloop*/for(const ({function::__parent__ getter: function () { yield (p={}, (p.z = 4.)()) }  }) = ([11,12,13,14].filter).yoyo(this in *); (yield (prop = <><x><y/></x></>)); (this.zzz.zzz)) /*infloop*/while(+@foo){(this); }");
tryItOut("const prototype, __proto__ = <x/>;");
tryItOut("if((new Error())) { if (Number()) {(new Function(\"__proto__;\")) } else export __iterator__;}\n\n");
tryItOut("if(@foo) { if (({__noSuchMethod__ setter: ({}).hasOwnProperty, __noSuchMethod__: <><x><y/></x></> })) return <x/>; else {export prop; /x/g  }}");
tryItOut("if(new ( /x/ )( /x/ )) {const prototype = __noSuchMethod__ =  '' , function::__proto__, constructor;return; }");
tryItOut("throw prototype;");
tryItOut("/*infloop*/L:for(const ({ __count__: [, __noSuchMethod__, constructor, __parent__], prop: constructor }) = delete @foo; __noSuchMethod__: <><x><y/></x></>; function  __iterator__ (__noSuchMethod__) { return <><x><y/></x></> } (window, 0)) {export *;const , __noSuchMethod__ = function(id) { return id }; }");
tryItOut("for(let y in []);");
tryItOut("let(__proto__, ({ __iterator__: constructor, __noSuchMethod__: __proto__ }) = (prototype.(undefined))) { return prototype = prop;");
tryItOut("if((window)(__noSuchMethod__) <<= ('fafafa'.replace(/a/g, function(y) { yield y; continue L;; yield y; }))) {(0x99);__parent__, constructor = prop; } else  if ((yield *)(__proto__.__parent__) = new ((-1)\n)(<><x><y/></x></\t>, <x><y/></x>)) throw [z1];");
tryItOut("throw __count__;");
tryItOut("let(__parent__ = ({ constructor: function::prop }) = [z1]) { return <!--yy-->.__defineSetter__(\"function::__iterator__\", function (__noSuchMethod__, !) { yield  ''  } );");
tryItOut("/*infloop*/M:do {} while(1e4);\nyield null;\n");
tryItOut("return <x><y/></x>\nreturn\nwhile((+null) && 0){throw  /x/ ;return <x><y/></x>; }");
tryItOut("/*infloop*/while(null)/*for..in*/L:for(const __parent__ in ((function(id) { return id })(false | @foo))){yield @foo;yield; }");
tryItOut("/*infloop*/for(let [, ({ __parent__: ({ __count__: ({ __iterator__: [[, prop, function::prototype, __count__, ], ], prop: prototype }) }) }), ] = (yield 033.__proto__); this.__defineGetter__(\"__count__\", function(q) { return q; }); this) throw  \"\" ;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in *::*) yield null;");
tryItOut("while((constructor = 5.0000000000000000000000) && 0){constructor = [,,z1];gc() }");
tryItOut("/*infloop*/L:do {(null); } while(eval(\"(yield <y><z/></y>)\", <><x><y/></x></>.@*));");
tryItOut("throw StopIteration;");
tryItOut("if(*.__lookupSetter__(\"prototype\")) continue ; else yield  '' ;\nthrow 1e+81;\n");
tryItOut("M:if(( \"\" .valueOf(\"number\"))) {; } else  if ( /* Comment */__proto__ = <y><z/></y>) var __noSuchMethod__, prototype; else {continue ;\f }");
tryItOut("{}\n");
tryItOut("/*infloop*/for(prototype = __proto__ = __proto__[({ set prototype __parent__ (__iterator__)__iterator__ })]; <> </>; \n<>'fafafa'.replace(/a/g, function  constructor (prop) { (constructor); } )</>) /*for..in*/for(__count__ in ((function  __parent__ () { return  ''  } )(3))){const __iterator__ = window, __count__;(@foo); }\n__noSuchMethod__;\n");
tryItOut("let(({ prototype: [, __iterator__, __iterator__] }), (\f{ prop: __count__ })) { (prototype)(*) = __noSuchMethod__\nwith(<x><y/></x>){ ''  }");
tryItOut("L: let (__count__, __iterator__ = <x><y/></x>.*) { let __noSuchMethod__ =  { return ++__noSuchMethod__%=*::* } ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (033)(033) in *::*) {yield; }");
tryItOut("if(new true()) var __noSuchMethod__; else  if (this) return;");
tryItOut("{}");
tryItOut("export __proto__");
tryItOut("/*infloop*/for(var ({ constructor: [, __proto__, __proto__, ] }) = Iterator(undefined); ({constructor: false.valueOf(\"number\") }); this << set) break M;");
tryItOut("{continue ; }");
tryItOut("M:if() {} else  if ('fafafa'.replace(/a/g, gc)) {var prototype, __iterator__ = <x/>;yield <><x><y/></x></>; } else {export __count__;throw  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in __proto__) undefined;");
tryItOut("export __proto__;");
tryItOut("M:with(){var prototype = ({a1:1});gc() }");
tryItOut("({}).hasOwnProperty\n");
tryItOut("\t__parent__, prop;");
tryItOut("let (__proto__, prop) { gc() }");
tryItOut("/*for..in*/L:for(const [__parent__, (__iterator__-=<x><y/></x>).constructor] = (yield \t(typeof 4.)) in *) {let (yield;) { __iterator__ =  '' , prop; } }");
tryItOut("try { with({}) export constructor; } catch(prop if new Number(({}), <x><y/></x>).__defineGetter__(\"constructor\", (window).__defineSetter__)) { let(prototype = this, prop = <y><z/></y>) { __iterator__; } finally { with({}) { constructor = <x><y/></x>, __parent__; }  } ");
tryItOut("M:while(( /x/ ) && 0){yield; }");
tryItOut("L:if(<y><z/></y> &= [,,z1]) { if ((prototype = <y><z/></y>)) __count__, prototype = __proto__;} else {null;const __noSuchMethod__ = undefined; }M:switch((p={}, (p.z = __parent__)()).eval((function ([y]) { })())) { default: break; break; case __proto__.prototype setter=  \"\" : break; case this: case (<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })):  }");
tryItOut("L:with({[({ __parent__: __proto__ }), ]: <zzz>new (<x/>)(window)</zzz> >>> (([<x/> for (__parent__ in <><x><y/></x></>)].unwatch(\"prop\")))})return  /x/ ;");
tryItOut("L: {const prototype = undefined, __iterator__ = 1.2e3; }");
tryItOut("if(let (__noSuchMethod__, prop) <x/> = constructor) { if (yield (<bbb xmlns=\"null\">yyy</bbb>)) let __proto__;} else /*infloop*/for(const __iterator__; @foo; window) {export __parent__; }");
tryItOut("/*infloop*/M:for((undefined.constructor =  '' )(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)%=(prop(window) = <><x><y/></x></>.prototype = <><x><y/></x></>); yield this.__defineSetter__(\"prototype\",  \"\" ).eval([<x/>].sort(([,,z1]).watch)); (let (__noSuchMethod__ = [z1,,]) gc().valueOf(\"number\") |= yield true ? new Date(__noSuchMethod__ = 0/0, <><x><y/></x></>.hasOwnProperty(\"__iterator__\").propertyIsEnumerable(\"constructor\")) : this.__defineGetter__(\"(__iterator__)\", function (__proto__) { yield; } ))) (( /x/ ).__defineSetter__).call\nyield;\n");
tryItOut("M:if(( /x/  :: __count__)) {gc()'haha'.split } else  if (prototype|=window) {arguments;continue L; } else true;");
tryItOut("{}\n const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <y><z/></y>) {return [[]];{} }");
tryItOut("/*for..in*/for(var prop.__count__ in <x><y/></x>) {yield;; }");
tryItOut("return *.propertyIsEnumerable(\"function::prototype\");");
tryItOut("L:while((constructor = constructor.@*) && 0)const __iterator__ =  /x/g , __count__\n");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = eval(__count__.constructor getter= Math.pow) in <><x><y/></x></> == @foo) @foo;");
tryItOut("default: return <x><y/></x>;break; if( '' ) continue L; else  if (([,,].@foo\n).@*) {let constructorexport *; } else if(window) { if ('haha'.split()) { }} else { }");
tryItOut("{yield <>(prop = function ([y]) { }).__defineSetter__</>;(__noSuchMethod__); }");
tryItOut("/*for..in*/M:for(let __iterator__ in ((('haha'.split).apply)(<x/>))){yield; /x/ ; }");
tryItOut("/*for..in*/for(let __proto__ in __proto__ = false)  const __proto__;");
tryItOut("return;");
tryItOut("constructor;");
tryItOut("/*infloop*/while( /x/g )prototype =  /x/g , __parent__ = this;");
tryItOut("{}[1,2,3,4].slice");
tryItOut("if((#1=[#1#].hasOwnProperty(\"__count__\"))) {return; } else  if ( /* Comment */<x><y/></x>) /*for..in*/for(let __iterator__ = this in <><x><y/></x></>) const prototype, constructor;");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(let ({ __noSuchMethod__: __parent__ }) in ((('haha'.split)\f.call)((#0=[let (__count__ = []) #3={a:#3#}])[<><x><y/></x></> =  '' ])))/*infloop*/for(0.1; this;  \"\" ) {yield *;(prop); }");
tryItOut("/*infloop*/for((#2=({prop: this}));  '' [(({__noSuchMethod__: (gc)(prop) }))]; RangeError(([\ryield @foo].filter([,,])), ((<><x><y/></x></>.@foo for (<y><z/></y> in null) if (true))))) {const __noSuchMethod__ =  /x/ ;__parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(3/0 in *) {return;__noSuchMethod__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (new Exception( '' )) ?  ''  : (<y><z/></y>/ |= @foo)['__parent__'] in new Function()) const __parent__ = null, __count__ = <y><z/></y>;");
tryItOut("/*for..in*/for(\t in ((function(q) { return q; })(new ( /x/g )(__iterator__.( /x/g ), <x><y/></x>))))yield <x><y/></x>;");
tryItOut("let (__iterator__ = prop, prop) { yield <x><y/></x>; }");
tryItOut("let (__proto__ = (function  __iterator__ () { yield  \"\"  } ).call(<><x><y/></x></>, @foo)) { const prop = <\fx><y/></x>; const __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (<><x><y/></x></> <= window) in ) {return; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = (__count__ in this) in __proto__) {const __iterator__;gc() }");
tryItOut("var __parent__ = null ==  /x/ , prop;\nconst __iterator__ = false, prototype;\n");
tryItOut("/*for..in*/L:for(__iterator__ in ((function (prototype) { return {} } )( '' )))var prototype = <x><y/></x>, prototype;");
tryItOut("L:if((({}).hasOwnProperty)(export *, (prototype))) {yield ({a2:z2}); }");
tryItOut("if({}) {__count__; }");
tryItOut("if(({__noSuchMethod__ getter: new Function, __iterator__: <>true</>.constructor })) { if ((prototype = this *= window)) {(<y><z/></y>); const undefined; } else {export __noSuchMethod__; }}");
tryItOut("/*for..in*/L:for(__iterator__ in @foo.watch(\"__count__\", (({}).hasOwnProperty).apply)++) /*\n*/{M:if((++<><x><y/></x></>)) {let __noSuchMethod__ = prop;yield; } else  if (( \"\" .hasOwnProperty(\"__proto__\"))) yield <x><y/></x>; else return __proto__;/*for..in*/for(__proto__ =  ''  in <x><y/></x>) {(__proto__);\t } }");
tryItOut("if(undefined .@ Object()) {(<x><y/></x>);yield; } else  if (*) yield window;");
tryItOut("/*infloop*/for(var __count__;  \"\" .eval(<x><y/><\f/x>) :: <x><y/></x> if (*); function(id) { return id }) __iterator__ = __iterator__;");
tryItOut("{(undefined); }");
tryItOut("(this)(<x><y/></x>)\nL:if(<><x><y/></x></>) { if (<x><y/></x>) {return <><x><y/></x></>;__count__ = __count__, prototype; } else {export *; }}\n");
tryItOut("L:if((- \"\" ) -= window\n) { if (Function()) /*for..in*/L:for((1e81 @ 033)['__noSuchMethod__'] in ((function () { yield __noSuchMethod__.__count__ } )(false))){;/*infloop*/for(*::*; __proto__; #3={a:#3#})  /x/ ; } else constructor;}");
tryItOut("switch([z1] :: [1]) { case 4: break;  }");
tryItOut("/*infloop*/for(const ((yield [z1,,])) = 'fafafa'.replace(/a/g, (new Function(\";\"))); +(__iterator__+= /x/g ); [null].some((__parent__ = prop).apply)) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in  \"\" .watch(\"prop\", *::*)) {throw #1#; }");
tryItOut("do Function while((3/0.hasOwnProperty(\"__parent__\")) && 0);");
tryItOut("/*for..in*/for(const [constructor, set] = [11,12,13,14].filter in  /* Comment */[11,12,13,14].some) return <y><z/></y>;");
tryItOut("/*for..in*/M:for(__proto__ in prop) {;continue L; }");
tryItOut("if(__count__+=undefined.yoyo([,,])) {with({__iterator__: <x/>.constructor})break L;export *;\f }");
tryItOut("export *");
tryItOut("L:with(__parent__\n);");
tryItOut("/*infloop*/M:do L: {var __iterator__ = *::*;export *; }\t while(('fafafa'.replace(/a/g, ((({}).hasOwnProperty).apply).apply)));");
tryItOut(" for (__parent__ in 1.2e3)with({__iterator__: -4. = void 0}){({}).hasOwnProperty const __proto__; }");
tryItOut("switch(*::* == function(id) { return id }) { default:  }");
tryItOut("/*infloop*/\nfor(let __noSuchMethod__ = this; ; __proto__ = (<x/>.yoyo(*::*).throw(new (<y><z/></y>)(*::*, prototype)))) {break M;Math.pow }");
tryItOut("if(<x/>) if(prop.constructor = this) {true;M:with({__count__: false}){return constructor;continue ; } }");
tryItOut("/*for..in*/for(const [__count__, __parent__] = this.zzz.zzz in eval(\"/*infloop*/for(prototype =  /x/g ; <x><y/></x>; #1#) yield;\", constructor = <x><y/></x>)) {}");
tryItOut("with(__proto__(eval(\"gc()\", <><x><y/></x></>)) = [15,16,17,18].map(<y><z/></y>, [[]]))");
tryItOut("{yield (-0); }\n");
tryItOut("gc()\n__proto__, prop = [z1];");
tryItOut("/*for..in*/for([__parent__, __iterator__] =  /* Comment */ ''  in ((!constructor.(this.@foo))[__proto__]))  goto ");
tryItOut("(<><x><y/></x></>);");
tryItOut("while((let (prop = <x><y/></x>) false) && 0){}");
tryItOut("{}{}");
tryItOut("return (<x><y/></x> *= *::*);");
tryItOut("yield;");
