tryItOut("<><>(0x99.constructor)</></>");
tryItOut("/*for..in*/L:for(var [let, __parent__] = 0/0 in arguments <<= <x><y/></x> - [z1].isPrototypeOf(<><x><y/></x></>)) {gc() }");
tryItOut("yield (-1).__defineGetter__(\"__noSuchMethod__\", eval);");
tryItOut("return window\n\nlet prototype, __iterator__ = ({a1:1});");
tryItOut("/*infloop*/for(const constructor = ((p={}, (p.z = <x><y/></x>)())) &= Iterator(false, <x><y/></x>); [1,,].valueOf(\"number\"); #0=[({__noSuchMethod__: null})]) {do {prototype = this;gc() } while((<x><y/></x>) && 0)\n(__noSuchMethod__ = []); }");
tryItOut("if(window > window) new Function");
tryItOut("let(__iterator__, prototype) ((function(){with({}) { with({}) { try { __iterator__; } catch(constructor) { (null); }  }  } })())\n");
tryItOut("M:switch((.constructor)) { default: export *;case <y><z/></y>.unwatch(\"constructor\"): gc()break;  }");
tryItOut("__parent__ = ({ __noSuchMethod__: __proto__ }), <y><z/></y>.__defineSetter__(\"__count__\", gc)");
tryItOut("with(({ prop: [({ __count__: __proto__, __parent__: prototype }), , __noSuchMethod__, ], prop: ({ __parent__: ({ constructor: __iterator__, __parent__: prototype }) }) }) = ({ __parent__: ({ __proto__: ({ prototype: __noSuchMethod__, __noSuchMethod__: __proto__ }), __proto__: [, , , ] }) }))yield;");
tryItOut("export __proto__;\nreturn;\n const __parent__;");
tryItOut("/*for..in*/for(let prop = (this.zzz.zzz) in (__noSuchMethod__.__count__)) {export *;gc() }");
tryItOut("/*infloop*/L:for(new ((1 for (x in [])))(__proto__ = <><x><y/></x></>, <y><z/></y>).*;  /x/g ; 3) {__proto__, prototype = <y><z/></y>; }");
tryItOut("/*for..in*/for(var prototype = new ((__noSuchMethod__ = 1e+81))() in [1,,]) if(this.valueOf(\"number\") >>= false) { if (undefined.__defineGetter__(\"__parent__\", function (__noSuchMethod__, prop)<y><z/></y>) ? 3 : constructor.__parent__ = <x/>) {export *;\r }} else var __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("var prop");
tryItOut("/*infloop*/M:do {<><x><y/></x></>; } while(this.zzz.zzz.@foo);");
tryItOut("/*infloop*/while((( '' )()))/*for..in*//* nogeckoex bug 349964 */M: for  each(prop in window) <y><z/></y>;");
tryItOut("/*for..in*/for(let prototype in ((function(y) { yield y; gc() const prototype;; yield y; })(\nnew function (__parent__)undefined()))){{}L:if(()) (<><x><y/></x></>); }");
tryItOut("{return\nexport *;yield  /x/g ; }");
tryItOut("{;undefined; }");
tryItOut("/*infloop*/do {break ; } while((let (constructor = this, __parent__ = arguments) __iterator__));");
tryItOut("/*infloop*/for(var [, ({ __iterator__: prototype, __noSuchMethod__: __noSuchMethod__ }), prop, , ({ __count__: __noSuchMethod__, prop: prototype })] = <xxx { <xxx>{__noSuchMethod__}</xxx> __parent__}{window}  <y><z/></y> />.(this.__defineSetter__(\"setter\", 'haha'.split)); __parent__ = <y><z/></y>; __proto__ = <x><y/></x>) <y><z/></y>;");
tryItOut("/*for..in*/for(const prop in (('haha'.split)(yield)))/*for..in*/for(let __proto__ in window) {(@foo);export __parent__; }\f");
tryItOut("do {export __parent__; } while((<y><z/></y>) && 0);");
tryItOut("try { throw __parent__; } finally { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) for(let y in []); } ");
tryItOut("M:with({__parent__: ( \"\" .prototype.watch(\"__iterator__\", function(q) { return q; }) ? [({constructor setter: function  prop () { yield false }  })].filter(function (__count__, __proto__) { return let getter = <><x><y/></x></> } ) : (function(id) { return id } & (function(q) { return q; }).call(<y><z/></y>, <x><y/></x>)))}){if((__count__ , prop.__count__)) prop, __count__; }//h\n");
tryItOut("if(constructor = (function ([y]) { })().__lookupGetter__(\"__proto__\")) { if (<y><z/></y>) /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in *) <x><y/></x><!--yy-->} else {throw this; }");
tryItOut("{prototype, prop; }");
tryItOut("constructor = constructor;");
tryItOut("[[]]\n");
tryItOut("return ([,,])[ /x/g .__defineSetter__(\"__count__\", function () { return <x><y/></x>.isPrototypeOf(<x><y/></x>) } )];");
tryItOut("{__proto__;function (prototype, __parent__) { return; }  }");
tryItOut("if(<x><y/></x>) {constructor; } else  if (*::*) {throw *::*;; } else {gc()const __count__, __noSuchMethod__ = window; }function::function::prop, delete;");
tryItOut("/*for..in*/M:for(const [__count__, __iterator__] = * in <><x><y/></x></>) ");
tryItOut("/*for..in*/M:for(let [__proto__, __count__] = this.unwatch(\"__noSuchMethod__\") in this) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in (void <x><y/\t></x>)) throw __iterator__\n/*infloop*/do  while(*::*);");
tryItOut("__count__, prop = <x><y/></x>;");
tryItOut("/*for..in*/for(var [__parent__, __parent__] = [this.__defineGetter__(\"prototype\", <><x><y/></x></>).__iterator__] in ((null *= <x/>).__noSuchMethod__) > (yield  /x/ )) function(id) { return id };");
tryItOut("gc() const __count__;");
tryItOut("{<x/>; }");
tryItOut("/*infloop*/for(let prop = null &= Array([,,z1]); this ? <><x><y/></\fx></> : <><x><y/></x></>; (* <= false)((((/a/gi).call).call(<y><z/></y>.constructor, )), ( /x/g  = ))) {<y><z/></y>;yield; }");
tryItOut("let (__proto__) { return; }");
tryItOut("");
tryItOut(" = prop\ndo {[[]]; } while(('fafafa'.replace(/a/g, [1,2,3,4].slice).eval(((function ([y]) { })()).call(({a1:1}), ))) && 0);\n");
tryItOut("throw prop;");
tryItOut("do __count__, __parent__ = undefined; while((*) && 0);");
tryItOut("return [15,16,17,18].filter(function(y) { yield y; return;; yield y; }, ({a1:1}));");
tryItOut("/*for..in*/for(prototype in function ([y]) { }) (new Function(\"var __iterator__;\"))\n");
tryItOut("M:do let __count__; while((++(<><x><y/></x></>)( /x/ , .2)) && 0);");
tryItOut("/*for..in*/M:for(var [prop, __noSuchMethod__] = (__proto__ = __count__.prop setter= [1]) in (eval(\"gc()\", __iterator__))) {}");
tryItOut("var __parent__\nreturn;");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = (yield <><x><y/></x>\f</>) .@*:: (__proto__ = (this).call(<y><z/></y>, )) in this) /*infloop*/M:for(let ({ __noSuchMethod__: __iterator__ }) = Math.sin().yoyo((<><x><y/></x></> for each (__count__ in prototype))); [z1,,]; this.unwatch(\"prototype\").__lookupSetter__(\"prop\")) {/*infloop*/M:do break ; while( /x/g )\n(prototype);; }");
tryItOut("/*infloop*/for(prop; ( set __proto__ prop (prop, prototype) { window; }  |= *::*); ({}).hasOwnProperty((window/*\n*/ && <x><y/></x>))) switch((prop.(this))) { case 4: break; case 2: throw prop;break; break; default: __iterator__ = <><x><y/></x></>;break; case 6: {;{} }break;  }");
tryItOut("{{throw this; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in (<x><y/></x>()).watch(\"__noSuchMethod__\", Math.sin)) {{} }");
tryItOut(" for (constructor in @foo) for (__parent__ in <x><y/></x>)\n{}\n const prototype;");
tryItOut("M:if(yield (({__iterator__: ((function ([y]) { })().__defineSetter__(\"__noSuchMethod__\", Math.sin)), __count__ getter: *::* }))) (false); else let (constructor = (-1), __iterator__) {  }");
tryItOut("/*for..in*/for(const __count__ in ({})) {break ;<><x><y/></x></>; }");
tryItOut("if(arguments) { } const __iterator__;");
tryItOut("while((eval(\"<x><y/></x>\",  /x/g )) && 0){export *;continue L; }");
tryItOut("yield (__noSuchMethod__)();");
tryItOut("{; }");
tryItOut("/*for..in*/ null ");
tryItOut("yield (RangeError());\nfunction::prop = <x><y/></x>;\n");
tryItOut("while((({ __proto__: ({ ({ __count__: ({ __parent__: __parent__, __count__: __iterator__ }), constructor: __iterator__ }): [, prototype, ], __noSuchMethod__: [] }), __parent__: ({ prop: [__noSuchMethod__, prop, , prop, __noSuchMethod__] }) }) = this) && 0){/*infloop*/while((__proto__ = 1e-81)((({a2:z2})([[]],  '' ))).@*){L:if(<><x><y/></x></>) gc() else {yield;{} } }switch((0.1)(window,  \"\" )) { default:  } }");
tryItOut("yield;");
tryItOut("({}).__lookupGetter__\n");
tryItOut("let prototype, __proto__;");
tryItOut("let (__parent__ = eval(\"if(__parent__) {yield this; }0/0;\", )) { /*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __noSuchMethod__: __count__ }) in <x/>) (<><x><y/></x></> :: <><x><y/></x></>); }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) ");
tryItOut("L:if(new __proto__.__noSuchMethod__()) return; else  if ((({__noSuchMethod__ setter: (<x><y/></x>).\f__defineSetter__, __iterator__: new <x/> })))  { yield yield <x><y/></x> .@*:: <x><y/></x>.__defineGetter__(\"__count__\", ({}).hasOwnProperty) }  else {{}export __iterator__; }");
tryItOut("export __proto__; const __proto__;");
tryItOut("try { export prop; } catch(__noSuchMethod__) { var set = function(id) { return id }, function::__noSuchMethod__; } ");
tryItOut("/*infloop*/do {/*for..in*/M:\tfor(const function::prop in (((#1=[#1#]).__defineSetter__)(true))){(<x><y/></x>); } } while(this);");
tryItOut("export *");
tryItOut("throw 1e81;");
tryItOut("/*infloop*/for(const constructor; this.__defineGetter__(\"__count__\", Math.sin); __noSuchMethod__ =  /x/ ) {033 }");
tryItOut("export *\n(this)\nexport *");
tryItOut("gc()");
tryItOut("while((\t!-1) && 0)/*for..in*/for(let __noSuchMethod__ in undefined) {}\n(1 for (x in []))");
tryItOut("if(undefined) {; }");
tryItOut("/*infloop*/while(__proto__: (*) ? constructor.prototype setter= function (constructor, @foo) { __noSuchMethod__, prop }  : ((eval(\"const __iterator__ = null;\", 1e4))))while(((function(y) { yield y; (-1); yield y; }).call(<><x><y/></x></>, 4., *)[]) && 0)prop = @foo");
tryItOut("let ([(__iterator__%=this.__defineSetter__(\"__iterator__\", function(y) { yield y; return <x/>;; yield y; }\r)), ({ __proto__: [, constructor, ], __parent__: ({ __proto__: ({ prototype: prototype, __iterator__: prop }) }) }), [[[__iterator__, , , __parent__], [, __proto__, , function::__noSuchMethod__, prop\r], __parent__, ({ prototype: __noSuchMethod__, prop: prototype }), ], ], ]) { while((1.2e3) && 0){var __noSuchMethod__ = <><x><y/></x></>, __parent__ =  /x/ ;gc() } }");
tryItOut("if((0.__defineGetter__(\"constructor\", (<y><z/></y>).watch))) {return; } else /*infloop*/for(*;  /x/ ; [1,,]) return;");
tryItOut("{/*infloop*/for(var __noSuchMethod__; (__iterator__.__iterator__); null) {}(window); }");
tryItOut("__count__ = 3;");
tryItOut("/*for..in*/for(let (<x><y/></x>.unwatch(\"prop\"))(((<y><z/></y>))) in ((1e-81.valueOf(\"number\"))(get = <x><y/></x>)))prop const constructor;");
tryItOut("if(<x><y/></x>) {{}{} } else  if ([z1,,]) [[1]]; else {{}var __parent__ = this; }");
tryItOut("/*for..in*/for(var [__parent__, __noSuchMethod__] = let (__iterator__, constructor = (<><x><y/></x></>.valueOf(\"number\"))) -0 in window.__defineSetter__(\"__count__\", function  __noSuchMethod__ (__count__) { yield <><x><y/></x></> } )) const constructor =  '' ;");
tryItOut("M:do {yield; } while((*.propertyIsEnumerable(\"prototype\")) && 0);");
tryItOut("try { with({}) gc } catch(prop) { this.zzz.zzz; } /*infloop*/for(this.zzz.zzz; __count__.__proto__ = *; 1e-81) continue ;");
tryItOut("do {/*for..in*/for(var prop in <x><y/></x>) {yield this;throw 3/0; } } while((null) && 0);");
tryItOut("/*for..in*/for(var __iterator__ in (((1 for (x in [])))( /x/ )))yield false;");
tryItOut("L: prop = *::*, __proto__ = *; const prop;");
tryItOut("if(<x><y/></x>.__lookupSetter__(\"function::prototype\") & (new [1,2,3,4].slice(<y><z/></y>))) eval else return;\n[1,2,3,4].slice\n");
tryItOut("yield (( /x/ \f).call(0/0, #1#, <x/>));");
tryItOut("M:do {yield; } while((({a1:1})) && 0);");
tryItOut("export *;");
tryItOut("switch(__parent__) { default: break; return <x><y/></x>;case this.zzz.zzz: /*infloop*/L:do <><x><y/></x></>; while(<><!--yy--></>); }");
tryItOut("/*infloop*/L:while(Exception(.2) instanceof (__proto__.(<x><y/></x>))){switch(1e+81) { default: ; } }");
tryItOut("prototype = prototype;");
tryItOut("gc()\n");
tryItOut("if((null if (\f<><x><y/></x></>))) { if (undefined.__defineGetter__(\"__parent__\", function\r  __noSuchMethod__ (__iterator__)window) ? __iterator__.prototype : constructor-=<><x><y/></x></>) L: { } else {Math.powyield __count__ = prop; }}");
tryItOut("do {__parent__; }\t while((new Function(yield  /x/ , true)) && 0);");
tryItOut("{@fooif(window) this.__defineGetter__(\"__noSuchMethod__\", window), this.__defineGetter__(\"prop\", ({}).hasOwnProperty) = (__parent__ = prototype/*\n*/) else {} }");
tryItOut("L: return;");
tryItOut("if(<><></></>) { if (constructor.prop) {(window); } else export __parent__;}");
tryItOut("throw StopIteration;");
tryItOut("throw prop;");
tryItOut("const __iterator__ = prototype, prototype = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in null) export prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <y><z/></y>) yield;");
tryItOut("switch(this.yoyo(<x/>)) { case \nwindow: gc()break;  }");
tryItOut("L:if((yield false)) let prototype\t; else  if (<x/>.__lookupSetter__(\"__count__\")) export *; else return window;");
tryItOut("{export constructor; }");
tryItOut("switch(window) { default: break; case 7: case *::*: break; break;  }");
tryItOut("L:if(([this.__defineGetter__(\"constructor\", function(q) { return q; }).throw(<><x><y/></x></> ?  /x/g  : this)])) /*infloop*/M:for(var constructor; <x><y/></x>; undefined) {return 1.3; }");
tryItOut("L:if((yield yield void window\f)) return; else  if ((({ __noSuchMethod__: __count__, __noSuchMethod__: __parent__ }) = ({ function::prototype: __proto__, __parent__: [__iterator__, , __noSuchMethod__, ] }))) {export *; }\nwhile((<y><z/></y>) && 0){}\n");
tryItOut("/*for..in*/M:for(let [prototype, prototype] = <y><z/></y> in let (__iterator__, constructor)  /* Comment */function ([y]) { }) {yield 3/0;[z1,,]; }");
tryItOut("L:while((<><x><y/></x></>) && 0)return 1.3;");
tryItOut("L:if((new (<><x><y/></x></>).apply(Iterator(window), __parent__))) { if (constructor = (<y><z/></y>.eval([[1]])) >>= delete [\n<x/>]) if( /x/  <= <x/>) { if (this.zzz.zzz) {{}break M; }} else {<><x><y/></x></> = undefined;{} } else if(('fafafa'.replace(/a/g, ({}).hasOwnProperty)).eval((uneval(0)))) {__parent__yield; } else {;continue \fL; }}");
tryItOut("\neval\n");
tryItOut("if(__iterator__.(<><x><y/></x></>).__lookupSetter__(\"__parent__\")) {; } else {export __noSuchMethod__;(4.); }");
tryItOut("do gc()//h\n while((__proto__) && 0);");
tryItOut("constructor");
tryItOut("with((new (this)()))((function ([y]) { })());");
tryItOut("M:if((<x><y/></x> .@x:: <x><y/></x> &= (prop.__parent__))) return; else do {yield; } while((constructor.( /x/ )) && 0);");
tryItOut("M:do yield <><x><y/></x></>; while(((1.3.__parent__)) && 0);");
tryItOut("do {with(__parent__.throw(@foo) .@ delete <x><y/></x>){/*infloop*/M:while((<x/>.yoyo(3.141592653589793)))return <>__noSuchMethod__, prototype</>; } } while((<y><z/></y>) && 0);");
tryItOut("while((1.2e3) && 0)/*for..in*/for(var function::__proto__ = window in [[1]]) {continue M;export prototype; }");
tryItOut("{var {{} }; }");
tryItOut("case 9: break; default: L: ( '' );/*infloop*/L:for(new Function(); (<x><y/></x>.valueOf(\"number\")); true.unwatch(\"__parent__\")) { }break; case 8: /*infloop*/do [1,2,3,4].map while(<x/>);case 9: case (new (function ([y]) { })()()): gc()break; case __count__.prop setter= function  __count__ ()null: break; ");
tryItOut("export *\n");
tryItOut("/*infloop*/for(__parent__; <{__parent__}>yyy</{__parent__}>; (prototype = <><x><y/></x></>)) {}\nfunction (prototype) { ; } ).call");
tryItOut("__iterator__ = prototype;");
tryItOut("let([]) ((function(){return ( /* Comment */prop) ?  prototype = ((<x/>(undefined)))[this.__defineSetter__(\"__iterator__\", eval)](<x><y/></x>.(window)) : ;})());");
tryItOut("if(yield <x><y/></x>) {gc() } else  if (<y><z/></y>) var prop = <><x><y/></x></>, __noSuchMethod__ = get; else break L\n");
tryItOut(";\n({}).__lookupGetter__\n\n");
tryItOut("/*infloop*/M:for(new function  __noSuchMethod__ () { yield <y><z/></y> } (this, <x><y/></x>);  /x/ .__lookupGetter__(\"prototype\"); *.yoyo(-3/0)) Math.sin");
tryItOut("/*infloop*/for((void (function ([y]) { })()); null; (({a1:1})++)) /*infloop*/for(__proto__; 4.; window) {throw __parent__; }");
tryItOut("do {export \tconstructor; } while((__proto__) && 0);");
tryItOut("if(__iterator__ = __proto__ /= new function  __proto__ (({ __count__: __noSuchMethod__ })) { yield (({}).__lookupGetter__)(constructor,  /x/ ) } (this, <y><z/></y>)--) {\ngc()\n }if( \"\" \n instanceof <x><y/></x>) each setter: new Function else 'haha'.split const (<x><y/></x>.__defineGetter__(\"__iterator__\", ({}).__lookupGetter__)).__iterator__;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = (function (__noSuchMethod__) { yield <x><y/></x> } )([z1,,], @foo) in <><x><y/></x></>) __noSuchMethod__ = this, __noSuchMethod__;");
tryItOut("while((((yield <y><z/></y>))) && 0){{} }");
tryItOut("with({prototype: __count__.(<x/>).__lookupSetter__(\"__noSuchMethod__\")}){L:with(<><x><y/></x></>){throw @foo;1.3; } }");
tryItOut("/*for..in*/M\t:for(__count__ = (new Object()) in this.__defineGetter__(\"__parent__\", Math.pow).__defineSetter__(\"__noSuchMethod__\", (((1 for (x in []))).call(<><x><y/></x></>, this) *= (<><x><y/></x></>)(*::*)).__defineSetter__)) yield (__parent__ for each (constructor in  '' ));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <><x><y/></x></>) {yield *; }");
tryItOut("if(<x><y/></x>) gc() else return;");
tryItOut("{var __count__ = function ([y]) { }; }");
tryItOut("__proto__ = true, __noSuchMethod__ = new (*::*)(@foo, <x><y/></x>)");
tryItOut("/*infloop*/for(const prop; new (<x/>.@foo)(); *::*.(this.__defineGetter__(\"__parent__\", [1,2,3,4].map))) ;");
tryItOut("if() ");
tryItOut("/*for..in*/for(let __iterator__ = window in (({}) << \f[z1,,]).@*) {return; }");
tryItOut("/*for..in*/L:for(const [__parent__, __count__] = (this.zzz.zzz) in <y><z/></y>) {let __count__; }");
tryItOut("/*infloop*/M:for(<x/>; *::*; <><x><y/></x></>) {<zzz><><x><y/></x></></zzz\n> }");
tryItOut("{if(<><x><y/></x></>.valueOf\f(\"number\")) __count__ = <><x><y/></x></>; else  if (null !== this) yield <x><y/></x>; else (<><x><y/></x></>); }");
tryItOut("yield\n{}");
tryItOut("with(<><x><y/></x></>){<y><z/></y> }");
tryItOut("/*for..in*/for(var constructor in __proto__) break M;");
tryItOut("yield (__noSuchMethod__(this));export *;");
tryItOut("throw prototype\nM:if(eval(\"return false;\", window))  else  if (function(y) { yield y; export *;; yield y; }) var prop = *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in prototype.__proto__ setter= true ? arguments\n :  /x/  /= <><x><y/></x></> instanceof (<x><y/></x> .@*:: __noSuchMethod__)) function ()1e4");
tryItOut("gc()\ngc()");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in new (#3={a:#3#})(3/0, false)) (constructor)\n");
tryItOut("/*for..in*/for(var constructor in ((function(q) { return q; })((__iterator__ = *::*))))false;");
tryItOut("/*infloop*/for(([15,16,17,18].map((<x/>).__defineSetter__, window)) <=  ''  & window; 1e81.__count__ = __parent__; ({ prototype: __noSuchMethod__ }) = [[1]]++) {throw <><x><\ny/></x></>; }");
tryItOut("if((({ __noSuchMethod__: [], prototype: __proto__ }) = (({ get __proto__ constructor (constructor, __proto__)<x/> >= <><x><y/></x></> }))) @ __count__.hasOwnProperty(\"prop\").yoyo( /x/ .throw(<><x><y/></x></>))) {[,,z1]; const prototype; }");
tryItOut("if(undefined) (1 for (x in []))");
tryItOut("L: {var __parent__, constructor;{prototype = __noSuchMethod__; } }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__proto__\", ([[]]).watch))/*for..in*/for(const [__proto__, __noSuchMethod__] = <x><y/></x> in  /x/g ) {gc()yield; }");
tryItOut("{/*for..in*/L:for(const __iterator__ in (((new Function(\"export __proto__;\")))(true)))var __proto__ = <x/>, __parent__ = false; const __parent__; }");
tryItOut("if((prototype >>= <><x><y/></x></>)) { if ((new (__proto__ = <x/>)(((new ((1 for (x in [])))(arguments)).@foo)))) M:with(({({ __noSuchMethod__: prop, __iterator__: constructor }): ({}).eval('fafafa'.replace(/a/g, (/a/gi).call))})) else return;}");
tryItOut("if((( \"\" .__defineSetter__(\"__count__\", window)).\r__defineSetter__(\"__noSuchMethod__\", (#1=[#1#]).watch)[function::prop(@foo)])) ( /x/g ).__defineSetter__ else  if () {return; }");
tryItOut("with({prop: (@foo.unwatch(\"prop\"))})throw <y><z/></y>;");
tryItOut("if([z1]) { if (this.__defineSetter__(\"prop\", function  __parent__ () { yield arguments } )) {({}).__lookupGetter__ }} else {break ; }");
tryItOut("/*infloop*/L:for((null ||  \"\" .__lookupSetter__(\"__proto__\")).eval(((__iterator__)) %= ); constructor.propertyIsEnumerable(\"__iterator__\").prop = ({prototype: 1e+81 }) ? new (gc)(<x><y/></x>) : __iterator__.__iterator__ = *::* % (-0); [*].some( ''  >>>=*)) throw @foo;");
tryItOut("try { throw StopIteration; } \fcatch(__proto__ if ~((uneval(let __proto__ = arguments;)))++) { ; } prop, __noSuchMethod__finally { let (constructor =  \"\" ) { ;\t } } ");
tryItOut("/*for..in*/for(var __parent__ in eval(\"continue L;\", __parent__(<><x><y/></x></>, this) > <><x><y/></x></> << <x><y/></x> &= *--)) ((this[prop]))((__iterator__ = __noSuchMethod__))");
tryItOut("if(__iterator__ = (+ /x/g )[prop-=window]) { if (<x><y/></x>.( \"\" )((<y><z/></y> &= []), __noSuchMethod__ = true)) {return (<y><z/></y>\n); }} else {this.zzz.zzz;export prototype; }");
tryItOut("L:if(window) export *; else __noSuchMethod__, __parent__");
tryItOut("yield\nyield #1=[#1#];");
tryItOut("/*infloop*/do {/*infloop*/for([z1]; __proto__; *::*) {gc() } } while([ /x/g .yoyo(<><x><y/></x></> ^= null /= (yield ({a2:z2})))].some(({}).hasOwnProperty));");
tryItOut("{/*for..in*/for(var constructor = 0/0 in null) {return *; }export __iterator__; }");
tryItOut("return;");
tryItOut("{yield; }");
tryItOut("{([z1]);throw 0/0; }\n(<><x><y/></x></>);\f\n\n");
tryItOut("let (set) { if(this) {*::* instanceof this; } else  if ((-1)) {([1]);const prop = 1e4, __noSuchMethod__; } }");
tryItOut("M:while((*) && 0)export *;");
tryItOut("with({__parent__: <x><y/></x>.throw(<><x><y/></x></>) <= <x/>.constructor = <><x><y/></x></>.__lookupSetter__(\"__count__\")})let (__parent__) { return; }");
tryItOut("with({__parent__: eval(\"yield [1,,];\", true)})throw false.@*;");
tryItOut("yield ((x::__iterator__ = <><x><y/></x></>)[(__count__.__iterator__)])\n");
tryItOut("/*for..in*/for([__proto__, constructor] = __proto__, __parent__ in (<x><y/></x>)) ");
tryItOut("__parent__//h\n = function::__proto__;");
tryItOut("/*infloop*/for(var __proto__ = this; __noSuchMethod__; *) throw __proto__;");
tryItOut("__noSuchMethod__");
tryItOut("if((eval(\"prop = (__parent__.( \\\"\\\" ))\", * .@x:: null))) export constructor; else gc()");
tryItOut("if(this.zzz.zzz) {const prototype = <x><y/></x>; } else {yield #1# if (<><x><y/></x></>); }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((((eval(\"export *;\", [z1]))).__defineSetter__)((arguments == <y><z/></y>)(__iterator__.__noSuchMethod__ getter= <x><y/></x>)))){/*infloop*/for(prototype; __parent__; null) continue ; }");
