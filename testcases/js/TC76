
tryItOut("L: {yield;break M; }");
tryItOut("let (__count__ = (case 7: continue ;break; ), __parent__ = @foo.throw((<y><z/></y> .@ undefined))) { if(new RangeError(this)) /*\n*/{let __parent__ =  /x/g , __proto__ = (function ([y]) { })(); } else {continue L;{} } }");
tryItOut("with({__iterator__: (__count__ = __parent__)}){function (__iterator__) { prop }  }");
tryItOut("/*for..in*/for(__count__ = __noSuchMethod__ = window if (prop) in @foo) {export __proto__\nwith({constructor: ({})})yield; }");
tryItOut("return (constructor %= *);");
tryItOut("with({}) with({}) { let(({ __proto__: [__noSuchMethod__, ({ __count__: __parent__ }), prototype, ({ prop: function(id) { return id } }), []], __iterator__: constructor.__noSuchMethod__ }) = (function(y) { yield y; throw *;; yield y; })(@foo,  '' ), __proto__ = <{__noSuchMethod__}></{__noSuchMethod__}>) { with({}) { /*infloop*/M:for((-1); @foo;  '' ) {var constructor = *; } }  } ");
tryItOut("M:with({__parent__: window})return false;");
tryItOut("with({__proto__: eval(\"export *;\", false) .@ ({}).propertyIsEnumerable(\"prototype\")})throw function ([y]) { };");
tryItOut("with(window){(<><x><y/></x></>); }");
tryItOut("if(false) { if (window) {gc()return; }} else {}");
tryItOut("{while((5.0000000000000000000000.throw(<x><y/></x>)) && 0)return;; }");
tryItOut("/*for..in*/for(const prop = ([({__proto__: 1e+81})//h\n].sort(function  __noSuchMethod__ (({ prop: [] })) { throw <y><z/></y>; } )) in __count__.( \"\" )) {(<><x><y/></x></>);return; }");
tryItOut("if(((new Function)(<{__parent__}><x><y/></x><ccc:ddd> </ccc:ddd></{__parent__}>, *::*)--)) {continue ; } else  if ([15,16,17,18].filter(<x><y/></x>, <x><y/></x>)) ");
tryItOut("/*infloop*/do {export constructor; } while(([prototype].map(eval)).prop%=(yield  '' .valueOf(\"number\")));");
tryItOut("this.zzz.zzz;");
tryItOut("switch(Exception((this !== window), this)) { case 0: break; break; case new  \"\" (): break; case 1: yield;break;  }");
tryItOut("return *;");
tryItOut("L:with({prop: <x><y/></x>})return;");
tryItOut("M:if(<!--yy-->) { if (void this.__defineGetter__(\"__noSuchMethod__\", <><x><y/></x></>) >>  case ({ prototype: __proto__ }) = <x><y/></x>.(__count__): (<x><y/></x>); <y><z/></y>) {prototype =  \"\" ;gc() }} else {/*for..in*//* nogeckoex bug 349964 */M: for  each(let [, __noSuchMethod__, , constructor] in this) continue ; }");
tryItOut("with(([<x/>].sort(Function).yoyo( /x/ ))){__proto__if(true) {yield;return this; } else  if (@foo) ; }");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = <x><y/></x> in .2) {{}throw this; }");
tryItOut("while((prototype-=*::*) && 0)continue ;");
tryItOut("L:if(<x><y/></x>) yield; else  if ({}) {const __noSuchMethod__ = <y><z/></y>, __noSuchMethod__; } else const constructor =  /x/g , prototype = __proto__;");
tryItOut("if(((\t({__count__: <><x><y/></x></>}\f)) != arguments.valueOf(\"number\"))) { if (<y><z/></y> % this.isPrototypeOf(<x><y/></x>)) {export x::prototype;var prototype; }} else {var __proto__ = *, __count__ = <><x><y/></x></>;export *; }");
tryItOut("for(let y in []);");
tryItOut("return\nyield;");
tryItOut("/*infloop*/do if((<x><y/></x> == undefined).watch(\"prop\", (({}).__lookupGetter__).call)) {(__parent__);; } while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in bbb xmlns=\"<x><y/></x>\"__iterator__ >< prop = function\r (__noSuchMethod__, constructor)#3={a:#3#}bbb> .@ (<><x><y/></x></>.__lookupGetter__(\"__iterator__\"))) with({}) { throw StopIteration; } ");
tryItOut("this.zzz.zzz;");
tryItOut("{if(window) { if ((new Function(__parent__) .@ __count__ = window)) {try { return *; } catch(constructor) {  } finally { case 0: break; case <y><z/></y>: __parent__break; case __count__: {}break; case 5: break; default: return __proto__;case (-0): return <x\t><y/></x>;break; case 5: export __parent__;({}).hasOwnProperty } yield null; }} else L:if([1,,]) {gc()break L; } else  if (<><x><y/></x></>) Math.pow else export constructor; }");
tryItOut("with((( ''  % *).eval(\nwindow)).__proto__)prop = -1.__parent__");
tryItOut("do {export *; } while(((let constructor = [[1]])) && 0);");
tryItOut("yield (({ __proto__: constructor, prop: constructor }) = (p={}, (p.z = <y><z/></y>)()));");
tryItOut("__count__ = 1e-81");
tryItOut("prop = prop; const __noSuchMethod__;");
tryItOut("L: { }\nprop, prototype;\n");
tryItOut("{}\nexport *;\n");
tryItOut("if(window) {export *; } else  if (__proto__) {yield;break ; }");
tryItOut("{}{export *; }\n(<><x><y/></x></>.yoyo(<><x><y/></x></>));");
tryItOut("yield; const __iterator__;");
tryItOut("with({ /x/ ['__parent__']: (<x><y/></x>.isPrototypeOf( /x/ ))}){throw __iterator__;export __count__; }");
tryItOut("{if(prop <<= 5.0000000000000000000000) { if (prototype.__noSuchMethod__ = <y><z/></y>) {export *; }} else if( /x/g ) {yield; } else  if (<x><y/></x>) {{} }with(prototype.__noSuchMethod__)prototype =  /x/g , __iterator__ = __noSuchMethod__; }");
tryItOut("M:if(+(\f{ prototype: [__parent__, , ( \"\" );, __proto__, ] }) = ( for each (__count__ in this))) { if (([1,2,3,4].slice)(#1=[, each, ({ prototype: __count__, window: constructor })] = -0, prototype.__count__ = window / <><bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb\t></>)) {/*for..in*/for(constructor = [,,] in <x/>) default: break; {} } else /*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = {} in <><x><y/></x></>) {__count__ getter: /a/gi }}");
tryItOut("L:if(constructor = <x><y/></x>) (<x/>);");
tryItOut("/*for..in*/for(var __count__ =  /x/ .isPrototypeOf(true) in  \"\" ) return;");
tryItOut("if((false.__lookupGetter__(\"prototype\").__defineSetter__(\"__count__\", new (__iterator__)()).__lookupSetter__(\"constructor\"))) { if (this.zzz.zzz) {(__noSuchMethod__.(<x><y/></x>));; }} else M:if( = (new (Math.sin)(__proto__))) { if ((({ constructor: __iterator__, __count__: ({ __count__: function::__iterator__, __noSuchMethod__: prop }) }) = constructor === 0)) yield undefined;} else {<x/>;# }");
tryItOut("if(((Math.sin()) |= prototype|=<><x><y/></x></>).throw(Error(window.yoyo(3/0)))) { if (this.__defineSetter__(\"constructor\", ({}).__lookupGetter__)) {throw StopIteration; }} else {evalbreak L; }");
tryItOut("\fL:if(<x><y/></x>) {} else __parent__: <><x><y/></x></>");
tryItOut("var prop, __proto__;\n*::*\n const prototype;");
tryItOut(";");
tryItOut("__iterator__ = __iterator__;");
tryItOut("/*infloop*/while(*){ /x/  }");
tryItOut("with(<x/>.watch(\"constructor\", function ()@foo)[(this.__defineSetter__(\"constructor\", prototype))])var prop, __proto__ = <><x><y/></x></>;\nreturn;\n");
tryItOut("/*infloop*/do {{} } while((({__noSuchMethod__: true})) |= ~<x/>);");
tryItOut("if((window.prop)) {continue ; } else  if (<y><z/></y>) ");
tryItOut("return delete ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in window <<= function ([y]) { }) .2;");
tryItOut("{yield;<y><z/></y> }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const constructor = 033 in  /x/ ) {var prototype = __proto__, __noSuchMethod__ =  \"\" ; }");
tryItOut("/*infloop*/while(((({}))[window].__defineGetter__(\"__iterator__\", (new Function(\"*::*;\"))).valueOf(\"number\")))/*infloop*/M:for(let __count__ = <y><z/></y>; window; <x/>) return  '' ;");
tryItOut("L: {/*for..in*/return <x><y/></x>; }");
tryItOut("/*infloop*/do /*infloop*/for(({prototype: 'fafafa'.replace(/a/g, (<y><z/></y>).watch)});  /* Comment */*::*.__proto__ = false.eval(__iterator__); <x><y/></x>.( /x/ )) /*for..in*/for(let prototype in  '' ) gc() whilefunction(y) { yield y; if(<><x><y/></x></>) return; else  if (__iterator__) export prop; else (*);; yield y; }(<x><y/></x>.(0x99), ({constructor getter: (*::*).__defineSetter__ })));");
tryItOut("/*for..in*/L:for([prop, __iterator__] = new ({}).__lookupGetter__(<x><y/></x>.yoyo(function(id) { return id }) instanceof ('fafafa'.replace(/a/g, function(q) { return q; })) &=  \"\" ) in ({each: (new (<x><y/></x>)()) })) /*for..in*/for(const constructor(window) in this) {gc()yield; }");
tryItOut("do (<><x><y/></x></>); while((#2=[(prop.__noSuchMethod__ = <x><y/></x>)]) && 0); const __noSuchMethod__;");
tryItOut("if((constructor.__iterator__ = <><x><y/></x></> ? 1e81 : <x/>)) {break M;with(*::*(//h\n<>function(q) { return q; }</>))yield; } else {if(( /x/ (#1#, null) for each (__proto__ in (<x><y/></x>.(<x><y/></x>))) for (prototype in this))) {var __parent__; } else  if (<x><y/></x>.__lookupGetter__(\"__count__\")) /*infloop*/do function  __iterator__ (__noSuchMethod__) { export *; }  while(@foo); else continue L; }");
tryItOut("return;\nreturn window;\n");
tryItOut("/*infloop*/L:for((({__noSuchMethod__: window, __parent__ setter: /a/gi })); yield (__parent__ = __proto__ for each (__proto__ in ({a2:z2})) for (prototype in  \"\" );.(true = (prototype = window)); [11,12,13,14].sort) {continue \n }");
tryItOut("while(([1,,]) && 0)return *::*;");
tryItOut("/*for..in*/for(let  \"\" ['__noSuchMethod__'] in (-3/0.hasOwnProperty(\"prototype\"))) (");
tryItOut("break M;");
tryItOut("M:if(<><x><y/></x></>) { if (<><x><y/></x></>) return  '' ; else {throw x::__count__; }}");
tryItOut("let (({ __count__: ({ __proto__: ({ prop: [], __proto__: ({ prototype: ({ [({ __iterator__: __proto__ }), prop]: __parent__, __parent__: let }) }) }), __noSuchMethod__: ({ __count__: ({ prototype: ({ __proto__: prototype }), __count__: __proto__ }), prop: constructor }) }) }) = *::*, prop) { return;\n__parent__ = <><x><y/></x></>;\n }");
tryItOut("while((<y><z/></y>.propertyIsEnumerable(\"__proto__\")) && 0)let __count__, __proto__;");
tryItOut("for(let y in []);");
tryItOut("let prop = null, __parent__ = @foo;\nyield <><x><y/></x></>;\n");
tryItOut("{}");
tryItOut("if(__parent__) {; else  if (<y><z/></y>) const __count__ = <x><y/>\n</x>, each = undefined;");
tryItOut("/*infloop*/for(var prop; (1 for (x in [])); <x><y/></x>.(<y><z/></y>)) {let(constructor) { return; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (\f(function(q) { return q; })(<x/>))){ }");
tryItOut("with({__noSuchMethod__: (-1) += <x><y/></x> , new  { return __proto__.__defineGetter__(\"__parent__\", #1=[#1#]); } (const __proto__; >>= (++0), (constructor.prototype getter=  \"\" .@foo))}){yield prototype;-0 }");
tryItOut("do {const __noSuchMethod__; } while((window--) && 0);");
tryItOut("__iterator__ = __parent__;");
tryItOut("throw __iterator__;");
tryItOut("L:with(this.__count__ = [,,z1])return;");
tryItOut("let (__count__ = 1e4) { return true;\f }\n");
tryItOut("{(*); }");
tryItOut("{yield <x><y/></x>; }");
tryItOut("with(undefined)( /x/ );");
tryItOut("/*for..in*/for(const [__count__, __proto__] = {break L; } in window) {let (__iterator__) { yield <x><y/></x>; }/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x/>) {{} } }");
tryItOut("{let(__parent__ = ([<><x><y/></x></>]).propertyIsEnumerable(\"__iterator__\")) ((function(){with({}) try { for(let y in []); } catch(constructor) { throw prototype; } })()); }");
tryItOut("\f{/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in @foo == <x><y/></x>.@*) yield; }");
tryItOut("/*infloop*/while([11,12,13,14].filter){L: {return <x/>; } }");
tryItOut("{yield *; }");
tryItOut("/*infloop*/while((__proto__ = <><x><y/></x></> > (__noSuchMethod__.__proto__) for each (constructor in @foo) if (true)))L:if([z1]) {yield;{} } else  if (set) ");
tryItOut("var prop = __noSuchMethod__, prototype = <x><y/></x>;\n(undefined);\n");
tryItOut("__noSuchMethod__, __count__\n{}");
tryItOut("if(__proto__) return; else  if (1e81) yield; else throw window;");
tryItOut("for(let y in [5,6,7,8]) export __proto__;");
tryItOut("export __noSuchMethod__;");
tryItOut("L:while((true.unwatch(\"prototype\")) && 0){prototype = *, __proto__ = undefined;*; const __count__; }");
tryItOut("if(@foo) { if (this) {gc() } else const __parent__;}");
tryItOut("__proto__ = function::__proto__;");
tryItOut("while((({a1:1}).throw( '' )) && 0){const prop = function(id) { return id };return <x/>; }");
tryItOut("\tM:with(\n__proto__ = __noSuchMethod__ = @foo .@*:: <x/> %= constructor)switch((-0)) { case *: continue ; }");
tryItOut("/*infloop*/for(const constructor; __iterator__ = __noSuchMethod__.prop getter= (new Function(\";\")); __parent__ = *::*) default: ;{}var __proto__ = *;var prototype = *, __proto__ = <x><y/></x>;break; case window: throw *::*;case 5: case prop: case 1: break; break; break; ");
tryItOut("with( \"\" )export *;");
tryItOut("");
tryItOut("/*for..in*/M:for(var ({ prototype: ({ prop: [__noSuchMethod__, ({ __noSuchMethod__: ({ __count__: [, prop, , prop] }\f), __noSuchMethod__: [({ __noSuchMethod__: prop, __count__: prototype }), , function::prop, , __proto__] }), [, , ({ __count__: ({ __count__: __parent__ }), __noSuchMethod__: constructor }), [__parent__, ]], \t, ({ __parent__: [({ __count__: __iterator__ })], function::__count__: __iterator__ })] }) }) in (('fafafa'.replace(/a/g, (this((function ([y]) { })(), <><x><y/></x></>))))((<><><xxx>{__noSuchMethod__}</xxx></></>.__parent__ = #1#)))){with({__proto__: ({a1:1}).throw(*)}){return;export __iterator__; }export *;\nthrow  /x/g ;\n }");
tryItOut("L: {do {{gc() } } while((@foo) && 0); }");
tryItOut("do {yield;gc() } while(((__noSuchMethod__ = this)) && 0);");
tryItOut("L:if(this) \r{const constructor, __count__;switch(<><x><y/></x></>) { default: yield 0.1; } } else  if (({constructor: window }).__defineGetter__(\"prototype\", (function(q) { return q; }).call)) {if(__proto__) ; else  if (function::__count__) {return undefined; } else yield;if( /x/  instanceof <x><y/><///h\nx>) { if ((__iterator__ = [z1])) yield __proto__; else __noSuchMethod__ = 5.0000000000000000000000, prototype;} } else {/*infloop*/while(<><x><y/></x></>)return;return null; }");
tryItOut("while((<x><y/></x>) && 0)__parent__ = 0, __count__;");
tryItOut("/*for..in*/<{constructor}></{constructor}>");
tryItOut("for(let y in []);");
tryItOut("__count__, prop = <><x><y/></x></>;\nlet (constructor, __iterator__ = <x/>) { ; }\n");
tryItOut("/*infloop*/do {function(y) { yield y; ([1,,]);; yield y; };if(null) {export *;__noSuchMethod__, __noSuchMethod__; } else export *; } while((p={}, (p.z =  /x/ )()));");
tryItOut("do {} while((<x><y/></x>) && 0);");
tryItOut("if() {yield;L: {<><x><y/></x></>;export *; } } else  if (<x/>) var prop = <x/>, __proto__;\nlet prop, __proto__;\n else let prototype, __parent__;\n{}\n");
tryItOut("L:if(({ set prototype prop (setter, constructor) { return (({prop getter: 1e4,  get prop() { return true }  })) }  }))  else  if (([1,2,3,4].map)(([[1]] << <x><y/></x>),  /x/g )) {break M; }");
tryItOut("/*infloop*/for(var ({ [,]: [__parent__] }) = ({a2:z2}) |= #3={a:#3#}; RegExp((null >>= <><x><y/></x></>)); (yield false)) __noSuchMethod__, __iterator__ = true;");
tryItOut("window.__defineGetter__(\"__iterator__\", Math.pow)");
tryItOut("if((p={}, (p.z = this)())) { if ('fafafa'.replace(/a/g, Function)) let __iterator__;} else throw null;");
tryItOut("let(__noSuchMethod__ = ((__proto__+=false\n *= <x><y/></x>.( /x/ )) .@ (__proto__.(window | prop)))) ((function(){with({}) {}})());");
tryItOut("let (__noSuchMethod__) { /*infloop*/for(var ({ function::prop: __noSuchMethod__, __count__: __iterator__ }) = null; [[z1,,]]; prop = <x/>) export __proto__;var prototype; }");
tryItOut("L:switch(true) { default: {}\nbreak;  }");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*infloop*/while((__count__.(5.0000000000000000000000)))if(*) return <><x><y/></x></>;");
tryItOut("/*for..in*/for((__count__) in <y><z/></y> -=  '' ) return @foo;");
tryItOut("if(1.3([,], prototype)\t.valueOf(\"number\")) { if (new ((3.141592653589793(.2)))(__count__.__parent__ setter= (1 for (x in [])), ( '' .hasOwnProperty(\"__parent__\").*) ? [z1,,]['__parent__'] : this)) export *; const x::__count__;} else {(*).watchthis.zzz.zzz; }");
tryItOut("do {export *; } while((* <<= <><x><y/></x></>) && 0);");
tryItOut("let (__iterator__, __noSuchMethod__ =  \"\" ) { gc() }");
tryItOut("return this.__defineSetter__(\"__count__\", [1,2,3,4].slice);");
tryItOut("/*infloop*/do (this); while(typeof <x><y/></x>);");
tryItOut("return (case (function(q) { return q; }).call(<x><y/></x>, ):  + (1.2e3 ? {} : <><x><y/></x></>));");
tryItOut("if((p={}, (p.z = window ?  ''  : [z1])())) const prop = <x><y/></x>; else return <x/>;export *;");
tryItOut("while((new (new Function(\"yield;\"))(<y><z/></y>)) && 0)Math.pow");
tryItOut("let (constructor, prop) { M:do [1,2,3,4].slice while((false) && 0); }\nlet(__proto__ = ({ __parent__: __count__, __noSuchMethod__: prop }) = ('haha'.split)()) ((function(){with({}) { for(let y in [5,6,7,8]) /*infloop*/M:for(__parent__; <y><z/></y>;  /x/ .__lookupSetter__(\"prototype\")) return <><x><y/></x></>; } })());");
tryItOut("yield ({ __proto__: prop, prototype: __parent__ }) = \n /x/  !== ({ __noSuchMethod__: __iterator__ }) = ({ prop: __count__ });");
tryItOut("/*for..in*/for(const __iterator__ = (return[__noSuchMethod__ = <><x><y/></x></>][yield]) in window) {let (__count__ = *::*, __count__) { return 1e4; }<y><z/></y>; }");
tryItOut("while((((*::*.propertyIsEnumerable(\"__parent__\")))((Exception(<y><z/></y>)))) && 0){}");
tryItOut("/*infloop*/for(let [constructor] = true.__defineSetter__(\"__count__\", function(y) { yield y; export *;; yield y; }); *::*.unwatch(\"__parent__\"); 0.1) return;");
tryItOut("<> </>{}");
tryItOut(";return constructor;");
tryItOut("while((undefined) && 0)__parent__");
tryItOut("let (constructor = window, constructor) { const <x><y/></x>, __noSuchMethod__; }");
tryItOut("{yield;gc() }\n/*infloop*/L:for(this.__defineSetter__(\"__iterator__\", [15,16,17,18].some(undefined, __count__ ? <x/> : <><if(this) {<><x><y/></x></>;const __noSuchMethod__, __iterator__ = 033; } else  if (*) throw @foo; x><y/><x</>)); 'fafafa'.replace(/a/g, (1 for (x in []))); [, prototype, ({ __count__: __noSuchMethod__ }), ({ __noSuchMethod__: prop })] = (({__parent__: 0.1, __iterator__ getter: ({}).__lookupGetter__ })).yoyo((new ([1,2,3,4].map)()))) {L:switch(\n(Object(this, this))) { default: let (prop, __iterator__) { (<x/>); }break; const prototype = <><x><y/></x></>\nbreak; case 2: case 9: let __noSuchMethod__, __iterator__; }__noSuchMethod__ }");
tryItOut("if((p={}, (p.z = *)())) (<y><z/></y>); else  if (prop = -3/0) var __iterator__;");
tryItOut("let (__noSuchMethod__ = ([([15,16,17,18].filter(eval, <x><y/></x>.propertyIsEnumerable(\"constructor\")))].map(eval)), [({ __noSuchMethod__: prototype }), /*\n*/, 1]) { return; }");
tryItOut("M:if(<>[1].isPrototypeOf(eval(\"throw <y><z/></y>;\",  \"\" ))<\f/export \tprototype;>) { if (((<><x><y/></x></> !== false).throw(<x><y/></x>.yoyo(<x><y/></x>)))) return; else {__iterator____noSuchMethod__, prop = []; }}");
tryItOut("do do \f{__proto__ = 1.2e3;/*for..in*/M:for(const __iterator__ in (((( '' ).apply).call)( '' )))yield; } while((<zzz><><x><y/></x></></zzz>) && 0); while(([11,12,13,14].some.hasOwnProperty(\"prop\")) && 0);");
tryItOut("{/*for..in*/for(const __count__ in *::*) {return;break M; }switch(<x><y/></x>) { default: case false:  } }");
tryItOut("switch((false.valueOf(\"number\"))) { __proto__ }\n");
tryItOut("/*for..in*/for(var (new Iterator() , new (true)())((__noSuchMethod__)[<x><y/></x>]) in ((function  __iterator__ (__parent__) { yield new RangeError(1e4, function ([y]) { }).__defineSetter__(\"__parent__\", Function) } \t)(typeof <><x><y/></x></>)))yield *;");
tryItOut("/*infloop*/for(let __count__; (true.propertyIsEnumerable(\"prop\") > ({ __proto__: ({ __count__: __parent__, __proto__: prototype }), constructor: prop }) = ((yield [[]]))); .*.throw('fafafa'.replace(/a/g, function  constructor () { return prototype } ).throw(true.__defineGetter__(\"__parent__\", Math.sin)))) {if((\n<x><y/></x>.__defineSetter__(\"__proto__\", function(q) { return q; }))) { if ((this >= <y><z/></y>)) continue ;} else let prototype; }");
tryItOut("for(let y in [5,6,7,8]) with({}) this.zzz.zzz;");
tryItOut("M:with(<y><z/></y>){const __noSuchMethod__ = <y><z/></y>;export *; }");
tryItOut("let (prop) { /*for..in*/for(const <x><y/></x>.prop in ((window)(__count__ =  '' ))){const prop, __iterator__;{} } }");
tryItOut("M:if(<x/>) { if (0.1) let __noSuchMethod__ = *::*, __count__;} else {export __count__; }");
tryItOut("L:if([this].map(Function) <<= (uneval(<><x><y/></x></>))) { if ((eval(\"<x/>\", __proto__))[(__count__.__noSuchMethod__ getter= function (prop) { return <y><z/></y>/*\n*/ } )]) {return window; }} else {continue L;yield; }");
tryItOut("var __proto__ = <x/>;");
tryItOut("with({}) try { let(__iterator__, prototype) ((function(){prototype = this, prop;})()); } finally { for(let y in []); } ");
tryItOut("");
tryItOut("/*for..in*/for(let = prototype in undefined.__defineSetter__(\"__proto__\", eval)) {__count__{} }");
tryItOut("/*infloop*/do {let constructor, constructor;throw this; } while(<x><y/></x>(this));");
tryItOut("this.zzz.zzz;");
tryItOut("throw StopIteration;");
tryItOut("continue L;gc()");
tryItOut("L:if(prototype, constructor[let constructor = @foo, __count__;]) if(<x><y/></x>) {} else  if (4.)  else {yield;return <x><y/></x>; } else  if (<><bbb xmlns:ccc=\"__noSuchMethod__ = [1] ?  \"\"  : __count__\"><ccc:eee></ccc:eee></bbb></> ? ++#2=({x::prop: <><x><y/></x></>}) : (uneval(([__iterator__, __proto__, __iterator__] =  /* Comment */<x><y/></x>) &= <x><y/></x> -= ((new Function(\"yield <x><y/></x>;\"))(<x><y/></x>,  '' ))))) if((p={}, (p.z = false)())) 4.; else let __proto__, __count__ = this; else ");
tryItOut("if((prop.([1]))) prop; else throw __count__;");
tryItOut("export __iterator__;");
tryItOut("return [11,12,13,14].filter;");
tryItOut("/*for..in*/for(var constructor in constructor) { const __count__; }");
tryItOut("/*for..in*/L:for(let [__count__, __noSuchMethod__] = ++\t<><x><y/></x></> in __noSuchMethod__.__noSuchMethod__ = *::*) __count__ = continue M;;");
tryItOut("let (__parent__ = ({ __parent__: constructor, prototype: __proto__ }) = __proto__.__noSuchMethod__, __iterator__) { /*infloop*/do {var constructor = null, prototype; } while(eval(\"\", <><x><y/></x></>)); }");
tryItOut("if((*::*.*)) export prototype; else  if (undefined.*) continue ; else do break ; while((@foo) && 0);");
tryItOut("/*infloop*/for(let ({ prototype: prop, __parent__: __count__ }) = __iterator__ = false; (function  set (*){})/*\n*/(<x><y/></x>,  /x/g ); undefined) /*for..in*/for(const __parent__ in ((Function)(this)))window;");
tryItOut("L:if(<y><z/></y>) {let __count__; } else export function::constructor;");
tryItOut("do try { ; } catch(prop) { gc() }  while((with(Exception())return <><x><y/></x></>;) && 0)\n");
tryItOut("with({__iterator__: (new ((Function).call(null, (function ([y]) { })()))(this.__defineGetter__(\"__noSuchMethod__\", Math.sin), undefined).@*)}){const prop = #1=[#1#]; }");
tryItOut("/*infloop*/while(( /* Comment */<x/>.hasOwnProperty(\"prototype\")))/*for..in*/for(var prop = __parent__ = prototype in (*.__defineSetter__(\"__parent__\", eval))) {return; }");
tryItOut("\n/*infloop*/while(__noSuchMethod__){; }");
tryItOut("while(([z1]) && 0)export __proto__;");
tryItOut("/*for..in*/for(var prop =  in 'fafafa'.replace(/a/g, ({}).__lookupGetter__)) [1,2,3,4].map");
tryItOut("with(prototype){gc() }\n/*infloop*/do $__noSuchMethod__ while(\n");
tryItOut("with( /x/g )continue ; const __count__;");
tryItOut("with((__count__).__parent__)with(.2.eval(<><//h\nx><y/></x></>))gc()");
tryItOut("throw <x/>;");
tryItOut("return\n");
tryItOut("switch((1e4 = this())) { case  \"\" .yoyo(function(id) { return id }.__defineGetter__(\"constructor\", window)): default: let(__noSuchMethod__, 8) ((function(){__proto__ = __noSuchMethod__;})()); }");
tryItOut("/*for..in*/for(prototype in [1.3.propertyIsEnumerable(\"constructor\")].map(({}).hasOwnProperty)) {L:if(window) { if ((this.__defineGetter__(\"__parent__\", /a/gi))) {eval } else {yield true;; }}gc() }\n");
tryItOut("if((@foo.__parent__)) /*for..in*/for(var [@foo, __proto__] = <x/> in <><x><y/></x></>) {*::*; } else  if ((p={}, (p.z = ((uneval(*::*))[<y><z/></y>]))())) {throw StopIteration; } else /*infloop*/L:for(const ({ constructor: __noSuchMethod__, __parent__: __parent__ }) = [11,12,13,14].some; [<y><z/></y> for (__parent__ in 3.141592653589793)]; (false.constructor)) {throw prop;continue ; }");
tryItOut("{; }");
tryItOut("/*for..in*/M:for(const __iterator__ in <x><y/></x> ? this : []) {continue L; }");
tryItOut("with(<y><z/></y>)/*infloop*/for(let prototype; __proto__ = window; !this) {(new Function(\"export prototype;\"))export *; }");
tryItOut("L: L:if(__iterator__) throw function(id) { return id }; else  if ([z1,,]) ;");
tryItOut("if(({prop setter: new Function,  set prop __count__ ()* })) { if (new ((<><x><y/></x></>).apply)(([<><x><y/></x></>].some(({}).__lookupGetter__)))) {[1,2,3,4].mapprop = *::*, __noSuchMethod__ = <><x><y/>\f</x></>; }} else var __iterator__ = <x><y/></x>;");
tryItOut("{constructor }return <y><z/></y>");
tryItOut("return #1=[#1#];");
