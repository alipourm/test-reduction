tryItOut("/*infloop*/while((prototype = <y><z/></y>)){let (__noSuchMethod__) { (arguments); }return <><x><y/></x></>; }");
tryItOut("if(<><x><y/></x></>.unwatch(\"prototype\") for (__parent__ in <y><z/></y>) for (prototype in <><x><y/></x></>) :: (false - undefined)) <><x><y/></x></>; else /*infloop*/M:while(* == <y><z/></y>){return;export *; }");
tryItOut("(prototype);");
tryItOut("let (__noSuchMethod__ =  '' ) { export prop; }");
tryItOut("throw StopIteration;");
tryItOut("var __count__;");
tryItOut("{}");
tryItOut("/*infloop*/while()L:if(__noSuchMethod__) { if (window) {(this); }} else {const __count__, __count__ =  /x/ ;throw *::*, <><x><y/></x></>; }");
tryItOut("L:if((return;)) yield  /x/g ; else  if ((<x><y/></x>.propertyIsEnumerable(\"__parent__\"))) {let __parent__, __parent__ = <x><y/></x>;; }");
tryItOut("/*for..in*/for(var [__count__, constructor] = [!3/0].some(/a/gi) in *::* -= (function ([y]) { } >> *)) /*for..in*/for(const __noSuchMethod__ in (((new Function(\"throw <y><z/></y>;\")))(<x><y/></x>))){export function::__count__;gc() }");
tryItOut("{/*infloop*/for(var prototype; [1]; [,,z1]) var constructor;yield; }");
tryItOut("L:switch(<><x><y/></x></>) { default: yield; }\t");
tryItOut("if(__proto__ if (*)) { if (set(false)) {/*infloop*/M:for(<><x><y/></x></>; <y><z/></y>; <y><z/></y>) {constructor = this; } }} else {gc()gc() }");
tryItOut("with({}) with({}) { this.zzz.zzz; } \n/*for..in*/for(function::gc() in ((Math.sin)(((p={}, (p.z = 'fafafa'.replace(/a/g, Math.pow))())).valueOf(\"number\"))))gc()\n");
tryItOut("/*infloop*/while([15,16,17,18].some(<x/>(<><x><y/></x></>), (-1) .. null += constructor)){with( /x/ )export *; const __count__; }");
tryItOut("while(( /* Comment */(*.unwatch(\"prop\")).constructor = ((<y><z/></y> + constructor))[[11,12,13,14].filter].throw(typeof <y><z/></y>)) && 0)return;");
tryItOut("/*infloop*/for(const __count__; new (function  prototype (prop)1.3)(--<><x><y/></x></>, constructor); null) {Function }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = ({ constructor: ({ __noSuchMethod__: ({ prototype: __noSuchMethod__, __parent__: ({ __noSuchMethod__: [__parent__, , , , ] }) }) }), __parent__: __proto__.constructor }) = window in __parent__.prop setter= function () { if( \"\" ) export *; else  if (<x><y/></x>) yield; else const __noSuchMethod__ = prototype; } ) export *;\nlet __iterator__;\n");
tryItOut("/*for..in*/L:for((/const  let __iterator__ = window x::__iterator__ in (()((({a2:z2}).hasOwnProperty(\"__parent__\")\r))))/*for..in*/for(const ([3.141592653589793(<><x><y/></x></>)]) in (((new Function(\";\")))(((uneval(function ([y]) { }))))))return  ;yield;");
tryItOut("gc()");
tryItOut("L:if({}) { if ( \"\"  %= <x><y/></x>.__proto__ = window.__count__.__defineGetter__(\"prop\", Math.pow) in prototype = false) gc() else {/*infloop*/for(var prototype; [] |  \"\" ; constructor = <><x><y/></x></>) {1.3; }with({yield: null}){(#1=[#1#]); } }}");
tryItOut("/*for..in*/for(var *['__iterator__'] in gc) (eval).apply");
tryItOut("let ([]) { throw arguments;\nL: {return (function ([y]) { })();yield; }\n }");
tryItOut("var __proto__\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in *::*) {break M; }");
tryItOut("if((<x><y/></x>)( \"\" ) = 0.unwatch(\"prototype\")) { if (({prop setter: eval, constructor: (<x><y/></x>[[,,z1]]) }).__lookupGetter__(\"prototype\")) } else ");
tryItOut("#1=[#1#]");
tryItOut("try { /*for..in*/for(let __noSuchMethod__ in  /x/ ) {throw __noSuchMethod__;throw get; } } catch([]) { throw prototype; } ");
tryItOut("(0x99); const __count__;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((({}).__lookupGetter__)(<x><y/></x>.( '' ))))return;");
tryItOut("L:do {if(<>new ({a1:1}) for each (constructor in  \"\" )(<x<y/>/>.isPrototypeOf(undefined))</>)  } while((__proto__ = (Number((<><x><y/></x></> if (<y><z/></y>)),  /x/g ))) && 0);");
tryItOut("const __iterator__, __iterator__ = null;");
tryItOut("prop = __parent__;");
tryItOut("yield;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while(@foo)var prop, constructor;");
tryItOut("let(({ __count__.prototype: ({ constructor: prop }), prop: (\f{ __parent__: constructor, __count__: set }) })) { let(__noSuchMethod__, constructor = <><x><y/></x></>) ((function(){try { return; } catch(prototype) { gc() } })());");
tryItOut("M:if(<><x><y\f/></x></>) { if \t([z1].__iterator__) {constructor;return window; } else export __proto__;}");
tryItOut("if(<y><z/></y>) { if ([<><x><y/></x></>]) export prop;} else {return;return this; }");
tryItOut("do if(window) {gc() } else  if (__noSuchMethod__) yield  /x/g ; while(('fafafa'.replace(/a/g, gc)) && 0);");
tryItOut("L:if(this.__defineGetter__(\"__iterator__\", 0/0) === eval(\";\", -1).__lookupSetter__(\"__iterator__\")) yield *; else  if (eval(\"(yield prototype)\", [15,16,17,18].sort(([z1]).watch, prop.__proto__))) /*infloop*/do ; while(0.1);");
tryItOut("/*for..in*/for(let [constructor, __proto__] = __parent__ in @foo.propertyIsEnumerable(\"__noSuchMethod__\")) {if(<y><z/></y>) {return;yield; }\tM:with({__count__: __parent__ = <x><y/></x>.valueOf(\"number\")}){throw (-1); } }");
tryItOut("/*for..in*/for(let __noSuchMethod__.prop in (false.unwatch(\"__parent__\"))) /*infloop*/M:for(let __noSuchMethod__ = @foo; [1,,]; <><x><y/></x></>) yield *::*;");
tryItOut("with({__noSuchMethod__: (Math.pow((eval(\"eval\", (3/0.__defineGetter__(\"prop\", [1,2,3,4].slice))))))}){((eval(\"[z1]\", __count__))); }");
tryItOut("\n");
tryItOut("if(__noSuchMethod__.throw(<\t><x><y/></x></>)) {(<y><z/></y>); } else  if ((function (prototype, __iterator__)true).call( /x/ , )) {gc()yield; } else ");
tryItOut("do /*infloop*/for(const __iterator__; [,,z1];  /x/ ) {{}throw this; } while(( /* Comment */[z1]) && 0);");
tryItOut("{for(let y in []); }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = __noSuchMethod__.__iterator__ getter= function () { return [1,,] } ; constructor = __noSuchMethod__; <><x><y/></x></>--) {{}prototype, __iterator__ =  \"\" ; }");
tryItOut("{{} }");
tryItOut("let(prototype) ((function(){let(__count__ = (new (3.141592653589793)()\n)) ((function(){throw StopIteration;})());})());");
tryItOut("/*infloop*/for( /x/ ; <x><y/></x>.(null);  /x/  in <x><y/></x>) {throw  '' ; }");
tryItOut("while((<><zzz></zzz></>.throw(window)) && 0)export *;");
tryItOut("/*infloop*/while(([[]])().propertyIsEnumerable(\"__parent__\")){{export __proto__;return __proto__; } }");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in (function ([y]) { })()) {return  /x/ ; } } while(__count__, __proto__);");
tryItOut("with({__parent__: eval(\"\\nreturn [1,,]\", return)}){export *; }");
tryItOut("break ;\n\nM:if(({__iterator__: continue ;})) {yield <x><y/></x>; } else  if ((uneval(1e81))) {throw <x><y/></x>;yield false; }\t else var __count__ = prop;\n");
tryItOut("/*infloop*/M:while(<y><z/></y> %=  '' ){export __parent__;return null; }");
tryItOut("let(prop = function(id) { return id }, __parent__) ((function(){yield  /x/g ;})());");
tryItOut("/*for..in*/L:for(var prop = ((uneval(<x><y/></x>))) in true) {export *; }");
tryItOut("/*infloop*/for(#3={a:#3#}; 1.3; <y><z/></y>) {const prop, __count__ = prop; }");
tryItOut("gc()");
tryItOut("L: gc()");
tryItOut("constructor = __count__\nreturn;");
tryItOut("<xxx>{__noSuchMethod__}</xxx>");
tryItOut("L:if(function  prop (__noSuchMethod__, __noSuchMethod__)<y><z/></y>()) { if ((<x><y/></x> <= @foo\n)) {/*for..in*/for([__proto__\t, __noSuchMethod__] = __iterator__ in <x/>) __count__ = 0x99, constructor; } else {/*infloop*/L:for(let __noSuchMethod__ = this; window; <x/>) ; }}");
tryItOut("/*for..in*/for(constructor in \n[1,,] >  '' ) L:if(let (__noSuchMethod__ = (@foo .@*:: ({a1:1})), __proto__) <><xxx>{prop}</xxx></>) {yield null; } else  if (()) export *;");
tryItOut("L:do {export *; } while((true.<x/>) && 0);");
tryItOut("/*for..in*/for([constructor, constructor] = String(<y><z/></y>, @foo) in prototype) {/*infloop*/while(<x><y/></x> % .2)L:with({__noSuchMethod__: #0=\t[<x><y/></x>]})continue ;yield #1# ? *::* : [z1]; }");
tryItOut("/*for..in*/M:for(var [__count__, prototype] = <x/>.__lookupSetter__(\"__parent__\") in window) {return; }");
tryItOut("__proto__; const __proto__;");
tryItOut("L:if(*::*) {throw function(id) { return id };; }\n");
tryItOut("(new Function(\"gc()\")) const __iterator__;");
tryItOut("/*infloop*/do return; while(((p={}, (p.z = window)())).__lookupGetter__(\"__proto__\"\t));");
tryItOut("let __count__;");
tryItOut("/*infloop*/L:for(var constructor; *.constructor || ( /x/ [yield;]); ((({__count__: * })) .@ (<><x><y/></x></>.unwatch(\"__iterator__\")))) ");
tryItOut("do {{yield  \"\" ;/a/gi } } while(( '' .isPrototypeOf(window)) && 0);");
tryItOut("if(({ set __iterator__(__iterator__) { return @foo } \t, __noSuchMethod__: __proto__ })) {gc() } else export constructor;");
tryItOut("'haha'.split\n/*for..in*/L:for(var const __parent__ = null; = /a/gi in <x><y/></x>) yield <x><y/></x>;\n");
tryItOut("while(((<x><y/></x>.(__proto__))) && 0)for(let y in [5,6,7,8]) __count__ = prototype");
tryItOut("L: (<x><y/></x>);");
tryItOut("if(<y><z/></y>\n) { if (prototype.prototype = 'fafafa'.replace(/a/g, 1.3).__lookupSetter__(\"__iterator__\")) {__noSuchMethod__ = [,]; } else (function ([y]) { })\nwith({prop: ( /x/g  << this)}){throw <y><z/></y>;throw  /x/g ; }}");
tryItOut("/*infloop*/for(true; <><x><y/></x></>; __iterator__) const , __noSuchMethod__;");
tryItOut("{}");
tryItOut("/*for..in*/M:for(var prototype in (prototype.isPrototypeOf((yield <x><y/></x> instanceof <x><y/></x>)))) {{}/*for..in*/for([prototype, //h\n__noSuchMethod__] = this.__defineSetter__(\"__count__\", Math.pow) in (uneval(prototype))) return __parent__; }");
tryItOut("while((new Iterator(__parent__ .@x:: <><x><y/></x></>)) && 0){if(<x/>) { if (true) {var __count__;; } else {let __noSuchMethod__ = *;yield; }} }");
tryItOut("let (({ prop: ({ x::__noSuchMethod__: prototype, prototype: __noSuchMethod__ }) }) = false) { /*for..in*/for(__parent__ in <x/>) throw this; }");
tryItOut("if((__iterator__)) const __parent__; else  if ([15,16,17,18].filter(gc, prototype = 1.3 /=  /x/ )) {/*infloop*/while() }");
tryItOut("{}");
tryItOut("if(constructor = 033) { if (4.) ;} else {; }");
tryItOut("let (this =  /x/g --.isPrototypeOf(*::*\n)) { let(__proto__) ((function(){for(let y in [5,6,7,8]) with({}) break ;})()); }");
tryItOut("{{{export constructor; } } }");
tryItOut("/*infloop*/do /*infloop*/for(__parent__ = <x/>; eval(\"continue L;\", null).__lookupSetter__(\"constructor\"); 3 ? true : <><x><y/></x></>) {prop = @foo;const each = <x/>; } while(typeof <x/>);");
tryItOut("/*for..in*/for(var __proto__() in ((false)(function ([y]) { } -= <x/>)))false;");
tryItOut("/*infloop*/for( /x/ ; __noSuchMethod__; __count__) export *;");
tryItOut("/*infloop*/do {__noSuchMethod__ = <><x><y/></x></>; } while(<><x><y/></x></>);");
tryItOut("let (__noSuchMethod__ = ((this.zzz.zzz).hasOwnProperty(\"__proto__\")) &= ([ /x/ ]), __noSuchMethod__ = new (1 for (x in []))(\t<x><y/></x>.__defineSetter__(\"constructor\", new Function), <x><y/></x>)) { while((((new Function(\"return;\")))(<>\t<x><y/></x></>, <x/>)) && 0)yield; }");
tryItOut("gc()");
tryItOut("if((yield *.isPrototypeOf(<x/>))) { if (.(null instanceof this))  else let __proto__;} const __noSuchMethod__;");
tryItOut("L:do {<><x><y/></x></><{__iterator__}> </{__iterator__//h\n}> } while(((<><x><y/></x></>.@*) === #1=({__iterator__: null})) && 0);");
tryItOut("while(() && 0)M:if() export constructor; else  if (eval(\"this\", <><x><y/></x></>)) \tthrow  /x/ ;");
tryItOut("/*for..in*/for(var function::__parent__ in undefined) var __proto__ = yield;;");
tryItOut("if(5.0000000000000000000000(( /x/g .propertyIsEnumerable(\"__parent__\")))) { if (__count__ = <x/>) break M;} else export __proto__;");
tryItOut("L:if([new RegExp(<\fx><y/></x>) if (function ([y]) { })]) export __noSuchMethod__; else  if (__iterator__ =  \"\" ) yield <><x><y/></x></>;");
tryItOut("switch((window.@*).watch(\"prop\", ({}).__lookupGetter__).hasOwnProperty(\"x::constructor\")) { case null -= ++<y><z/></y>: /*infloop*/for(const __parent__ = (typeof <y><z/></y>);  /x/ \f ?  /x/g  : false; this) {var __proto__ = 0/0; }break; case 3: break; case 8: case 4:  }");
tryItOut("\n");
tryItOut("function ()<x><y/></x> const constructor;");
tryItOut("L: {let(<><zzz><><x><y/></x></\t>.__lookupGetter__(\"[,,z1]\")</zzz></> = (*::* <<= null)) { return; }");
tryItOut("M:while(((#1=({a2:z2}))) && 0)throw window;");
tryItOut("/*infloop*/do with(@foo .. true){yield <y><z/></y>; } while(__count__);");
tryItOut("switch((null.*.prop).unwatch(\"__noSuchMethod__\")) { default: break; break; var __count__\n;case 1: [1,2,3,4].slicecase 4: if([1,,]) { if (prop) {yield <x><y/></x>; }} else {let __proto__, prop = __proto__; }case __iterator__ = <x/>: with({__iterator__: (__proto__ = (-1))}){yield;gc() }break; ; }");
tryItOut("/*infloop*/do const __proto__; while(this);");
tryItOut("this.zzz.zzz;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in false) {(<><x><y/></x></>);if(<x><y/></x>.( \"\" )) {throw  /x/ ; } else throw -3/0; } }");
tryItOut("L:if(<x/> ==  '' ) { if (#2=[true]) {throw <><x><y/></x></>;return null; }} else function  constructor (__count__)<y><z/></y>, [1,,] const __parent__;");
tryItOut(";");
tryItOut("export __proto__;");
tryItOut("/*infloop*/M:while(<x><y/></x>)function(y) { yield y; export *;; yield y; }\nreturn;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ({constructor: <x/>})) gc()");
tryItOut("const setter, __iterator__\nyield prop = <x><y/></x>\n\n;\n");
tryItOut("__iterator__ = <x/>\nreturn;\n");
tryItOut("with(({constructor getter: undefined })){if(<><x><y/></x></>) {break ; } else  if (prop) yield; else  }");
tryItOut("with({}) let(__iterator__ = undefined, constructor = <y><z/></y>.hasOwnProperty(\"__iterator__\")) ((function(){with({}) return (\n /x/g );})())\nlet (prototype) { /*infloop*/M:for(const <x><y/></x>; prop; 1.2e3) {function(y) { yield y; var __parent__, prop = 1e81;; yield y; }throw  /x/g ; }throw this\nreturn false; }");
tryItOut("switch(([[1]].yoyo(\t<x/>))) { case 8: case  /x/g :  }");
tryItOut("/*for..in*/for(let __proto__.__noSuchMethod__ in new Function) M:with(\f__proto__.((-1))){var __noSuchMethod__;(false); }");
tryItOut("/*for..in*/M:for(const constructor in [<y><z/></y> if (function(id) { return id })]) let prototype = 0x99, __parent__;");
tryItOut("L: {constructor = __proto__; }");
tryItOut("break ;\n/*infloop*/while(__noSuchMethod__ = true){throw <><x><y/></x></>;gc() }\n(<><x><y/></x></>);\n\n");
tryItOut("(prop);");
tryItOut("/*for..in*/for(constructor = ( ''  instanceof this) in prototype = @foo) C");
tryItOut("/*infloop*/for(let __iterator__; <x/> ?  /x/  : <><x><y/></x></> < __iterator__.constructor getter= eval; prop = __noSuchMethod__ = @foo) {true__count__ = this; }");
tryItOut("yield");
tryItOut("/*infloop*/do (true); while(new (@foo)());return\nyield <><x><y/></x></>;");
tryItOut("let(prop = *.eval(*), __noSuchMethod__) ((function(){return 1e4;})());");
tryItOut("/*infloop*/do  while((prop = constructor));");
tryItOut("<{__iterator__}><ccc:ddd>yyy</ccc:ddd></{__iterator__}>");
tryItOut("yield *;");
tryItOut("*;");
tryItOut("gc()");
tryItOut("__count__");
tryItOut("with({}) with({}) { let(__count__) { for(let y in []); } ");
tryItOut("gc()");
tryItOut("let __parent__ = [], __count__;");
tryItOut("prop, __iterator__");
tryItOut("throw <x/>;\nreturn this;\n");
tryItOut("/*for..in*/for(let [constructor, __parent__] = eval(\"with( /x/  == <x/>){<><x><y/></x></>;{} }\", let (__count__, <bbb xmlns:ccc=\"yield this\"><ccc:eee></ccc:eee></bbb>) 3.141592653589793 -= <x/> > typeof (prototype.function::__proto__ setter= Math.sin)) in [15,16,17,18].sort(eval,  '' )) /*for..in*/for([x::prop, __parent__] =  /* Comment */this in constructor = constructor = false) {return *; }");
tryItOut("if(__proto__ = -3/0) { } else  if ((new ((1 for (x in [])))(null))) gc() else return __proto__;\nswitch([11,12,13,14].some) { case 'fafafa'.replace(/a/g, function  __iterator__ (__proto__, __noSuchMethod__) { return  \"\"  } ): /*for..in*/for(let prop =  /x/g  in null) export __proto__; }\n");
tryItOut("if(<><xxx>{__noSuchMethod__}</xxx></>) { if ((__parent__|=(<><x><y/></x></>(__parent__, <x><y/></x>)))) (prop); else yield;}");
tryItOut("return;");
tryItOut("while((#1=[#1#] ? (<x/>)(this\t) : *[__proto__]) && 0){let prototype;yield; }");
tryItOut("switch(null <<  \"\" ) { default:  set __count__ __noSuchMethod__ (__iterator__, __parent__) { return *::*.unwatch(\"__iterator__\") } break;  }");
tryItOut("while((arguments()) && 0)/*infloop*/for(each; [11,12,13,14].filter; (new <><x><y/></x></>(@foo))) yield <><x><y/></x></>;");
tryItOut("/*for..in*/M:for([function::this.__defineGetter__(\"prototype\", ({}).hasOwnProperty), __noSuchMethod__] = 'fafafa'.replace(/a/g, <x><y/></x>).valueOf(\"number\") in *::*) {Math.pow }");
tryItOut("if((this(<ccc:ddd>@foo</ccc:ddd>))) { if ((false ? window : window.__count__)) {return;/*for..in*/for(var [__proto__, __proto__] = false in (function ([y]) { })()) throw null\n\tcontinue ; }} else return <><x><y/></x></>;");
tryItOut("/*for..in*/for(var __parent__ = (({prototype:  \"\" }) , ( '' .hasOwnProperty(\"prototype\"))) in (<x/>.@*)) with({prototype: <><x><y/></x></>}){gc }");
tryItOut("/*infloop*/for(__parent__; (uneval((function(y) { yield y; var __parent__ = [,,z1], prototype = null;; yield y; }).call(*::*, <><x><y/></x></>) >> (__iterator__ = 0x99))); \fthis.__defineSetter__(\"__proto__\", window)) {return <x/>; }\f");
tryItOut("switch( /x/ ) { default: break ;break;  }");
tryItOut("with({}) export __proto__;");
tryItOut("/*for..in*/for((__iterator__)((*.__defineGetter__(\"__iterator__\", 'haha'.split))) in (((1 for (x in [])))( /* Comment */return))){0.1; }");
tryItOut("\f");
tryItOut("{}");
tryItOut("{export __iterator__;var __proto__; };");
tryItOut("if(__noSuchMethod__) {const __count__ = ({a2:z2});export *; } else  if (this) throw constructor\n");
tryItOut("export constructor; const __iterator__;");
tryItOut("let (__parent__) { return ({a2:z2}); }");
tryItOut("return");
tryItOut("if(((<x><y/></x>.__lookupGetter__(\"prop\")).yoyo(#3={a:#3#}.unwatch(\"__iterator__\")))) { if (eval(\"<x><y/></x>\",  /x/ ) .@*:: (__count__ > [,])) {return <x><y/></x>;window; } else {Math.powwith({prototype: {}}){export constructor; } }}");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __iterator__ in this.__defineGetter__(\"__count__\", ({}).__lookupGetter__)) {let __parent__ = constructor; }");
tryItOut("/*infloop*/L:for(prototype; ~eval(\"[]\", [[]]); prop.eval((prototype.hasOwnProperty(\"__noSuchMethod__\")))) ");
tryItOut("if(<><x><y/></x></>) { if (0/0) __proto__ = <x/>, prototype;} else throw <x><y/></x>;");
tryItOut("/*infloop*/do {var prop = <x><y/></x>, __iterator__ = this;\t } while( /x/g );");
tryItOut("L:if(*.propertyIsEnumerable(\"__count__\")) throw <x><y/></x>; else {const prototype =  /x/g ;return <x><y/></x>; }\n");
tryItOut("if(prop.(this)) {throw <x><y/></x>;let __count__, constructor; } else  if ((this.yoyo(0/0))) {{}{} }");
tryItOut("throw StopIteration;");
tryItOut("if([z1,,]) <><x><y/></x></>; else  if (( /* Comment */(false , (-0)))) Function");
tryItOut("\nexport __proto__;\nexport __iterator__;\n");
tryItOut("/*infloop*/M:for(let ({ __noSuchMethod__: [prototype, , [, , prop, constructor, \n], [, ]], __count__: [] }) = try {  } catch(__count__) { -0; } ; window ? @foo : __proto__; ((({__proto__: 5.0000000000000000000000})))[\n<><x><y/></x></>]) {/*infloop*/do {__iterator__; } while(#1#); }");
tryItOut("do {var __count__;var __proto__ = <x><y/></x>; } while((<y><z/></y>) && 0);");
tryItOut("/*for..in*/for(const [__count__, function::__iterator__] = (__noSuchMethod__ = window).* in  \"\" ) {}\n");
tryItOut("if(true) {if(window) function  prop (__proto__)this else  if (@foo) {return; } else return <x/>;return; }");
tryItOut("yield #3={a:#3#};");
tryItOut("yield;");
tryItOut("/*for..in*/M:for(let __proto__ in (( { ; } )( /x/  %= <x><y/></x>)))yield constructor;");
tryItOut("let(constructor = <><x><y/><\f/x></>) ((function(){return __parent__;})());");
tryItOut("if(([11,12,13,14].filter if ())) switch(<y><z/></y>) { default: break;  } else try { (<x/>); } catch(x::__count__) { __parent__ = __iterator__; } , prototype = <x><y/></x>, prototype = <y><z/></y>;");
tryItOut("L:if( '' ((( \"\" )(<x><y/></x>)),  '' )) continue L; else {yield; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {throw <x/>\ngc(){} } while(<><> /x/g </></>);");
tryItOut("if(<>(false)( '' , constructor)</>) { if ((prop = (<x><y/></x> === <x><y/></x>))) {;export *; } else {yield true; }}");
tryItOut("L:do {{} } while((__proto__) && 0);");
tryItOut("M:if(this -= *::*) __count__ = prop; else let __noSuchMethod__, __iterator__ = <x/>; const __proto__;");
tryItOut("({}) ? true ? <x/> : .2 : window[window].__defineSetter__(\"__noSuchMethod__\", function(q) { return q; })");
tryItOut("/*for..in*/M:for(var __parent__ in ((* .@x:: <><x><y/></x></>.__defineSetter__(\"prototype\", [1,2,3,4].map))(\n<x>\t<y/></x>\n))){gc()\nexport prop; }");
tryItOut("/*for..in*/for(const ( \"\" )(*::*) in <><x><y/></x></>) yield this\n");
tryItOut("yield this");
tryItOut("{}function  prop (__noSuchMethod__, prototype) { export *; } ");
tryItOut("do yield @foo; while(((*.throw(<y><z/></y>))//h\n) && 0)\n");
tryItOut("with({function::prop: <><x><y/></x></>}){continue M; }");
tryItOut("with({__iterator__: ( \"\" ).call(function ([y]) { }, )}){return; }\n{var prototype, prototype = <><x><y/></x></>; }");
