tryItOut("while((#1=[ /* Comment */true]) && 0);");
tryItOut("/*infloop*/for(this.__proto__; (undefined)[*]; [].yoyo(<x/>)) const constructor; const __noSuchMethod__;");
tryItOut("export *\n");
tryItOut("if(__parent__) {__noSuchMethod__yield <><x><y/></x></>; } else {return;continue ; }\n");
tryItOut("gc()");
tryItOut("return (1.3.__iterator__ = (-0));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in [[1]] >> 033 ? ((<x><y/></x>)) : __proto__ = 3) { let prop = [,]; }");
tryItOut("L: {var __count__, __parent__; }");
tryItOut("const prototype = , constructor\nexport prop;");
tryItOut("/*for..in*/for((@foo || window)(#1#) in (constructor.(@foo)(<y><z/></y>))) {\n/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in [z1,,]) throw [,]; }");
tryItOut("switch((true.__noSuchMethod__ =  /x/ )) { default: [1,2,3,4].slice }");
tryItOut("if(-0) { if (__noSuchMethod__.__count__.yoyo( /* Comment */(-1).isPrototypeOf((* for each (__count__ in @foo))))) {/*infloop*/for(prototype; <><x><y/></x></> += prototype; (<><x><y/></x></>.throw(@foo))) {throw @foo; } }} else with( \"\" ){yield <><x><y/></x></>;export __proto__; }");
tryItOut("/*for..in*/for(const __proto__ = true in let (prop = null) (<x><y/></x>.__defineGetter__(\"__proto__\", (1 for (x in []))))) {if(__count__ = <><x><y/></x></>) yield; else  if (false) {function(y) { yield y; export __parent__;; yield y; }throw <y><z/></y>; }; }");
tryItOut("if(true.__iterator__) { if (--(__noSuchMethod__ = <y><z/></y>)) {return; }} else  const prototypeexport prototype;");
tryItOut("L: { /x/g ;L: { /x/ ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <><x><y/></x></>) {; }/*for..in*/for(var __noSuchMethod__ in (('haha'.split)(new (function(y) { yield y; return __iterator__;; yield y; })()))){(function (__iterator__, prop) /x/ ).callfunction(q) { return q; } }");
tryItOut("if(this)  else ");
tryItOut("let (__count__ = 3/0, __noSuchMethod__ =  \"\" ) { yield; }");
tryItOut("const __iterator__ = 0x99, __noSuchMethod__ = true;");
tryItOut("/*infloop*/while((<><x><y/></x></> - [z1,,])){let constructor;export constructor; }");
tryItOut("/*infloop*/for(var __iterator__; ('fafafa'.replace(/a/g, function(q) { return q; })); * |= prop = __count__ ? (<x><y/></x>.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) : <><x><y/></x></>) {( '' );/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in false) { } }");
tryItOut("with({}) { __noSuchMethod__ = prop; } ");
tryItOut("__count__ = __parent__;");
tryItOut("if(__proto__ < ().__iterator__ = (yield -3/0)) yield <x><y/></x>; else  if ( /* Comment */(1e-81.__iterator__)) {return; } else while(( /x/ ) && 0)window;");
tryItOut("/*infloop*/for(['fafafa'.replace(/a/g, -1) / [*::* for each (prop in <><x><y/></x></>)].map(Math.pow)]; (void __count__ = <><x><y/></x></>); *::*.hasOwnProperty(\"__count__\")\f) {L: const constructor, constructor = null; }");
tryItOut("/*for..in*/for(__parent__ = window.__defineSetter__(\"__iterator__\", function ()constructor).isPrototypeOf(1.3 ? @foo : *) in constructor) throw #1=[#1#];");
tryItOut("if(*--) L:do {} while(( /x/ ) && 0); else  if (<xxx {__proto__}={({ get prototype(__parent__, constructor) { return <x><y/\n></x> } , __noSuchMethod__:  \"\"  })} />) yield; else /*for..in*/for(let __count__ = <x><y/></x> in #1#) break ;");
tryItOut("__parent__ = prototype;");
tryItOut("L:with(new Error(<x><y/></x>)){/*infloop*/L:for(var prop; <><x><y/></x></>; @foo) {export __iterator__; } }//h\n");
tryItOut("{export *;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in (({__proto__ getter: /a/gi }))) prop");
tryItOut("{(window).__defineSetter__let __iterator__, __count__ = 0; } const prop;");
tryItOut("/*infloop*/\nM:do {const constructor, __noSuchMethod__; } while(@foo)\n-0");
tryItOut("L: {yield <><x><y/></x></>;return this; }");
tryItOut("return\nreturn <x><y/></x>; const prop;;");
tryItOut("/*for..in*/for(constructor in ((*::*)(<!--yy-->))){Function }");
tryItOut("var constructor\nyield;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((/a/gi)(({a1:1})))){export __iterator__; }");
tryItOut("with({__iterator__: undefined})return <x><y/></x>;");
tryItOut("/*infloop*/do { '' ; } while((Function)(window, true) >>>= \"\" .*);\nyield false;\n");
tryItOut("M:with((({ __proto__: __iterator__ }) = ('haha'.split).yoyo(3))){/*for..in*/for(let constructor in ((({}).hasOwnProperty)(export *))){function  __proto__ ()<x><y/></x> }L:with(<x><y/></x>)export __proto__; }");
tryItOut("/*infloop*/__iterator__for(var [prop] = @foo.eval(true) || window.watch(\"constructor\", [1,2,3,4].slice) !== undefined <<= window; <><bbb xmlns:ccc=\"5.0000000000000000000000.__defineGetter__(\"__parent__\", function (__noSuchMethod__, prop) { return; } )\"><ccc:eee></ccc:eee></bbb></> ? (new Function(\"__proto__\"))(<><x><y/></x></>) : *; (this.__defineSetter__(\"__noSuchMethod__\", function (__proto__) { yield (<x><y/></x> /= <x><y/></x>) } ))) let __parent__ = <x><y/></x>, function::prop;");
tryItOut("do {; } while((null.prop =  \"\" .propertyIsEnumerable(\"__noSuchMethod__\")) && 0);");
tryItOut("const __noSuchMethod__, __count__ = ;");
tryItOut("if([[[1]] for each (__proto__ in <y><z/></y>)]) {break ; } else  if (([@foo].some(this))) gc() else {Math.pow }");
tryItOut("(<x/>;");
tryItOut("with({__parent__: (new ((<y><z/></y>\t.prototype))(<><x><y/></x></>))}){return; }");
tryItOut("/*infloop*/for(var __count__; let (constructor = null, prototype)  ''  <= __noSuchMethod__ = #3={a:#3#}; true.yoyo(<y><z/></y>)) for(let y in [5,6,7,8]) with({}) { throw 3/0; } ");
tryItOut("throw StopIteration;");
tryItOut("{/*infloop*/for(new ((-0)())((<x/>)[prototype]); (().prototype = (@foo.eval(<x/>))); [15,16,17,18].some('haha'.split, __iterator__) ^= <y><z/></y>) export prop; }");
tryItOut("switch((eval(\".2.@foo\", this.__defineSetter__(\"__count__\", ([1,2,3,4].slice).call))[<x/>])) { default: break; L: {{} }case <x><y/></x>.({}) += <><>(__noSuchMethod__)</></>: break; case 0: /*for..in*/for(let propyield 1e-81 @ <y><z/></y> in *::*.__lookupSetter__(\"__iterator__\")break; break; (constructor) = prop;break; const __iterator__;break; break; break; case 7: /*infloop*/while(__proto__ = window\f){prototype = prop;([[1]]); }break; case function (__parent__)__proto__ = <y><z/></y>(*::*.isPrototypeOf(<><x><y/></x></>)--): break;  }");
tryItOut("/*infloop*/for(const constructor; this.__defineSetter__(\"yield\", [1,2,3,4].slice); *::*) {; }");
tryItOut("if(#1#) {throw  /x/ ;return  /x/ ; } else  if (prototype.__iterator__ = (-0)) ");
tryItOut("/*for..in*/for(var prototype in ((/a/gi)(__count__)))(__iterator__);/*\n*/");
tryItOut("M:if((eval(\"false\", 5.0000000000000000000000))) { if (yield this >>= (__iterator__%=(-0)))  else (<><x><y/></x></>);}");
tryItOut("L: while(( /x/ ) && 0)let __parent__\nyield -3/0;");
tryItOut("let (__proto__ = <y><z/></y> if ((function ([y]) { })())) { export *; }");
tryItOut("/*for..in*/for(let __count__ = (__count__ = <x><y/></x>) in *::*) {L: gc }");
tryItOut("/*infloop*/for(let __noSuchMethod__; (undefined.hasOwnProperty(\"__noSuchMethod__\")); <{prop}><ccc:ddd> yyy</ccc:ddd></{prop}>) return; const constructor;");
tryItOut("({}).__lookupGetter__");
tryItOut("with((__count__ = 1.3)){/*infloop*/do { } while([]);M:if(eval(\"prop;\", *) ? eval(\"({__proto__:  /x/g })\", (1.3.__parent__ = __parent__)) : function (prototype) { yield <x><y/></x> } () instanceof (constructor.<x><y/></x> setter= Function)) { if (prototype >=  '' ) const __noSuchMethod__ = <x><y/></x>; else /*for..in*/for(let [constructor, prop] = <x><y/></x> in  /x/g ) {thisyield; }} }");
tryItOut("");
tryItOut("/*for..in*/for(__proto__ in (((Math.pow).apply)(([15,16,17,18].filter(({}).hasOwnProperty, (-3/0.yoyo(*::*)))))))with({constructor:  '' .__count__ = <\fx><y/></x>})return;");
tryItOut("if((constructor for each (prop in true))) {export *; } else  if (<x/>()) return undefined; else {export prototype;yield <x/>; }");
tryItOut("if(__iterator__.constructor = [11,12,13,14].map) {L:if(__proto__) export prototype; } else  if (<y><z/></y>) 0.1;\nreturn [[]];\n");
tryItOut("switch(prototype) { default: const __proto__ = ({a2:z2});case *: <x><y/></x>;case  /x/g : throw <><x><y/></x></>;case false: export constructor;break; case 9: break; case <x/>: Math.powcase 4: case 5: ([z1]);break; export __proto__;break; case 6: continue L;break;  }");
tryItOut("L: for(let y in [])\n");
tryItOut("/*infloop*/for(__count__; 1e+81; <x><y/></x>) __proto__ = this, __count__;");
tryItOut("with(\t(__iterator__) = prop(window, <x/>))(gc).call");
tryItOut("if((__parent__ = <x/>)) {var __count__ = <x><y/></x>, __parent__;throw __parent__; }");
tryItOut("return;");
tryItOut("with({__parent__: prop.prototype = new Error([,,], function::prop)})if(<y><z/></y>.*) { if (<y><z/></y>) return <><x><y/></x></>; else export *;}");
tryItOut("with({}) { throw prop; } ");
tryItOut("M:if((function(y) { yield y; return ({prop getter: return ({}); });; yield y; }).call(__iterator__ = <x><y/></x>, new (<x><y/></x>)()).eval(__parent__ = window.prototype = prop)) { if ((gc)(({constructor: this.__defineGetter__(\"prop\", /a/gi)}), (@foo.propertyIsEnumerable(\"__parent__\"))).* >>> (constructor([[1]]) = (null ? <><x><y/></x></> : <>continue L;</>)).isPrototypeOf(function::function::__parent__ = *)) let prop; else {M:switch(constructor.(this.zzz.zzz)) { Math.pow }/*infloop*/while(1e+81) }}");
tryItOut("if(let (__count__ = (eval(\"<><x><y/></x></>\", prototype)), prop = this) new [[]]( /x/g , <x><y/></x>)) {null;/*\n*/L: __proto__; }");
tryItOut("/*infloop*/M:for((--).propertyIsEnumerable(\"__count__\"); ([this.__defineGetter__(\"constructor\",  /x/g )].filter(function (__count__) { yield new \fgc() } )); (eval(\"export *;\",  '' .yoyo(__parent__)))) {break ; }");
tryItOut("return -1; const prop;");
tryItOut("if((__iterator__ = __iterator__)) { if (.2.unwatch(\"prop\")) return;} else (uneval(1e4)) = null .. -1 > __noSuchMethod__, [, __proto__, __count__]");
tryItOut("/*infloop*/do return 1e4; while((new (function  constructor (__parent__)<x><y/></x>)() >>= new ((1 for (x in [])))()));");
tryItOut("if(__count__ = *::*) \t{L: if((this.__defineGetter__(\"__count__\", [1,2,3,4].slice))) { if (<y><z/></y>) var __noSuchMethod__ = prototype;} else ; }");
tryItOut("/*infloop*/for(prop = window.propertyIsEnumerable(\"__noSuchMethod__\"); new Array(); (return)) const function::__proto__;");
tryItOut("/*infloop*/M:do gc() while(#0=(new (constructor: ({__iterator__: [[1]] }))((new ((<x><y/></x>).call)(<x><y/></x>)), *::*)));");
tryItOut("M:while((({prop: default: /*infloop*/while(true){continue ; }break; })) && 0){while((<><x></*\n*/y/></x></> <=  \"\" ) && 0); }");
tryItOut("for(let y in []);");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <><x><y/></x></>.@*) return;");
tryItOut("/*for..in*/for(let prototype = true in @foo) {//h\nexport __count__;constructor; }");
tryItOut("with(__parent__){<x><\ty/></x>; }");
tryItOut("if(([11,12,13,14].map)) { if (__iterator__./*prototype)) throw @foo;} else {return;prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in ((p={}, (p.z = <></>)()))) {}");
tryItOut("  { yield __iterator__.__proto__ }  with((void new ({ __proto__: __iterator__ }) =  /x/g ()){}\ndefault: (<y><z/></y>);<y><z/></y>;case <><x><y/></x></>: constructorbreak; case 2: gc()break; case 2: {}break; case 4: break; ");
tryItOut("/*for..in*/for(var __count__.prop in (('haha'.split)(<><>.2</></>))){return [[]];yield; }");
tryItOut("gc()");
tryItOut("with(<x/> ? <x><y/></x> :  /x/g ){export __iterator__; }");
tryItOut("L:if(0.1.__defineSetter__(\"setter\", [1,2,3,4].slice).hasOwnProperty(\"__noSuchMethod__\")) let prop = *, __proto__; else {break ; }");
tryItOut("let (__iterator__ = (((<bbb xmlns:ccc=\"function(y) { yield y; const __count__, prototype = #3={a:#3#};; yield y; }()\"><ccc:eee></ccc:eee></bbb>).__defineSetter__)(([15,16,17,18].sort((1 for (x in [])), <x/>))))) { return; }");
tryItOut("{prop = <x/>; }");
tryItOut("prototype =  /x/ ;");
tryItOut("M:do /*infloop*/do {const <><x><y/></x></>; } while(@foo); while(((const constructor = <x><y/></x>, prop;.unwatch(\"prototype\"))) && 0);");
tryItOut("gc()\n");
tryItOut("return #0=({__proto__: new window( \"\" , <><x><y/></x></>)})");
tryItOut("/*infloop*/L:for(const [__noSuchMethod__, ] = __parent__ = __iterator__; (prop = __noSuchMethod__ for each (__proto__ in 1.3) for (__parent__ in <x><y/></x>)); __proto__.prop = (__iterator__ = <><x><y/></x></>)) ");
tryItOut("while((<x><y/></x>) && 0){__iterator__ = window;return 1e4; }");
tryItOut("M:if(( ''  %= ( /x/ .throw( /x/ )))) let(__count__ = <x><y/></x>) { ; else {let(__parent__ = 1.2e3) { __iterator__ = __parent__; }");
tryItOut("switch(((yield <><x><y/></x></>))) { default: constructor;break;  }");
tryItOut("with({__noSuchMethod__: (true.__proto__ = <><x><y/></x></>)\f})3");
tryItOut("/*for..in*/L:for(const [constructor, __proto__] = 3.141592653589793 in eval(\"\", (false)[3])) {return 033;let __noSuchMethod__ = this;/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in [,]) yield; const prop; }");
tryItOut("const __noSuchMethod__ =  \"\" , __noSuchMethod__ = <y><z/></y>\n\n");
tryItOut("try { export constructor; } finally { throw  '' ; } ");
tryItOut("/*infloop*/while((-0)){if(this.zzz.zzz.unwatch(\"prop\")) { if (new (1 for (x in []))()) return; else {/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__.prop in <><x><y/></x></>) export __iterator__; }}[];\nif(window) {return 3.141592653589793; } else {yield; }\n }");
tryItOut("/*for..in*/L:for(const [__parent__, constructor] = undefined[function ([y]) { }](this.propertyIsEnumerable(\"constructor\"), <x/>) in (yield 'fafafa'.replace(/a/g, /a/gi))) {let (__noSuchMethod__) { gc() }return; const __count__; }");
tryItOut(" { /*for..in*/M:for(var prop in  \"\" ) {continue ;export prop; } } ");
tryItOut("if(__parent__+=(p={}, (p.z = *::*)())) yield;");
tryItOut("/*for..in*/for(const __proto__ in ({<>yyy</>: <><x><y/></x></> })) {{__parent__ =  \"\" , __parent__ = <><x><y/></x></>; }__parent__ = [[1]], __count__; }");
tryItOut("/*infloop*/M:do /*infloop*/L:for(__count__.prop|=prototype ? @foo : <x><y/></x>; ([1,2,3,4].slice)(*::*) .@*:: (<x><y/></x>.(<><x><y/>/x></>)); <x/> && <><x><y/></x></>) {continue ;{} } while(this);");
tryItOut("try { let constructor = <x/>, __proto__; } catch(__count__) { export *; } ");
tryItOut("(new Function(\"let __noSuchMethod__;\")) const __iterator__;");
tryItOut("let (__count__, __proto__) { gc() }");
tryItOut("if(__proto__) return;");
tryItOut("if(((this.__defineSetter__(\"get\", (this).__defineSetter__) !== (prototype.(( /* Comment */window)))) for each (__parent__ in (undefined++)) if (<x><y/></x>))) { if (constructor = [<x><y/></x>]) {} else let (__proto__ = <x><y/></x>, prop =  '' ) { gc() }}");
tryItOut("return window\n");
tryItOut("let (__count__, __parent__) { /*infloop*/M:for(var [, ({ <><><ccc:ddd></ccc:ddd></></>: __count__ })] = undefined.__lookupGetter__(\"prop\"); ((gc).call(({prop: <x><y/></x> }), )); (/a/gi((window .@*:: [1,,]).@foo).propertyIsEnumerable(\"__iterator__\"))) {L:with({prop: undefined.__count__ = <><x><y/></x></>}){gc() }/*infloop*/while([15,16,17,18].some(function (constructor, __iterator__) { yield window; } , #1=[#1#]))var __parent__ = <x><y/></x>; } }");
tryItOut("export prop; const __parent__;");
tryItOut("/*for..in*/for(let __proto__ = prop = ((<x><y/></x>\f -= /*\n*/<x><y/></x>)) in (eval(\"yield;\", new this()))) if([z1,,].unwatch(\"__count__\")) { if (<><x><y/></x></>.isPrototypeOf(<x/>)) break ;/*\n*/} else {gc()continue M; }");
tryItOut("/*for..in*/for(const __parent__ in (((this).watch)(prototype = .2)))yield;");
tryItOut("/*infloop*/L:while(\n<x/>){/*for..in*/for(__parent__ in (((1 for (x in [])))( /x/g ))\t){export prop;prop }/*infloop*/do {yield;yield; } while(yield __parent__); }");
tryItOut("/*infloop*/while(1.3 -= <y><z/></y>)/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <x/>) continue M;");
tryItOut("{let __iterator__ =  /x/g , __parent__ = true; }");
tryItOut("L: []");
tryItOut(" get prop set (constructor) { yield -3/0-- } ");
tryItOut("if(__count__.__iterator__ = __noSuchMethod__ ? (p={}, (p.z = (uneval(<x/>)))()) : [(yield false) for ( /x/ .constructor in *::*) if (]) yield; else return <><x><y/></x></>;");
tryItOut("with({__iterator__: (null.prototype).*}){prop()['constructor'] = __proto__;__proto__, prototype = false; }");
tryItOut("/*for..in*/M:for(let __count__ =  /x/g .__noSuchMethod__ in (__parent__.(\n@foo))) {/*for..in*/M:for(__count__ in (p={}, (p.z = <><x><y/></x></>)())) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in this) {null;var __noSuchMethod__ = [,,z1], __count__ = undefined; } } }");
tryItOut("/*infloop*/while(/a/gi)throw function ([y]) { };");
tryItOut("throw StopIteration;");
tryItOut("if(new Iterator(, prototype)) { if ((({ prop: prototype }) = (__parent__.__noSuchMethod__ setter= 3))) __parent__ = [,,]} else ;");
tryItOut("if(@foo) { if (prop) {(__proto__); }} else {export constructor; }const prototype, __proto__ = [,,z1];");
tryItOut("M:if(<y><z/></y>) gc() else  if (1.2e3) yield; else {Math.pow{} }");
tryItOut("__iterator__");
tryItOut("/*infloop*/for( '' ; <><x><y/></x></>; prop) {<x><y/></x>throw ; }");
tryItOut("let(prop = <y><z/></y>) { for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("let (__proto__, constructor = ([[1]] >=  /x/g )) { with(__proto__ = ({a2:z2})){throw <><x><y/></x></>; } }");
tryItOut("{(1e-81).watch }");
tryItOut("do {const prop; } while((let (__count__ = true, prop =  '' ) this) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in *::*) {(constructor); }");
tryItOut("L: {L:if(this) {__noSuchMethod__ = __count__, __noSuchMethod__;export __proto__; }\nthrow prop, prototype;\n }");
tryItOut("gc()\n/*for..in*/for(__iterator__ = (#1#.unwatch(\"__parent__\")) in window) {continue ;(0/0); }");
tryItOut("/*for..in*/for(constructor in false.__count__) \n");
tryItOut("if((p={}, (p.z =  /x/g )())) {var __proto__ = window;; } else  if (<x/>) {(-1);const __iterator__ = <x><y/></x>, __noSuchMethod__ = /a/gi;  for each (__iterator__ in <x/>)  else break ;");
tryItOut("if([15,16,17,18].some(function(q) { return q; }, (false.@foo))) 4.; else  if ([] = ((p={}, (p.z = <x><y/></x>)()))) prop;");
tryItOut("if(*::*) yield -0; else  if (arguments) (033); else { }");
tryItOut("__parent__: -3/0 for (prop in  /x/g )");
tryItOut("let __noSuchMethod__; const __proto__;");
tryItOut("gc()");
tryItOut("M:if(undefined) return; else  if (x::__iterator__ = <x/>) 0; else let prop = @foo;");
tryItOut("export prop\nyield; const __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("{/*for..in*/M:for(let __count__ = @foo in .2) const __noSuchMethod__ = #1#, __parent__;return <x/>; }");
tryItOut("if((let ((<x><y/></x>)( /x/g )) __proto__ = <x><y/></x>)) {throw 5.0000000000000000000000 * null ? <x><y/></x>.__noSuchMethod__ : {const break M; = -3/0; };/*infloop*/for(__noSuchMethod__ = this; window; this)  }");
tryItOut("yield  /x/ ;");
tryItOut("while(((#0=({__iterator__: arguments}))) && 0)const prop = @foo;");
tryItOut("while((.__parent__) && 0);\n( '' );\n");
tryItOut("if( set __iterator__ prop (__noSuchMethod__) { return false } .hasOwnProperty(\"prototype\")) { if (constructor = window) {let __noSuchMethod__;(function(id) { return id }); } else yield;}");
tryItOut("let(__noSuchMethod__ = prototype.@*, prototype = prototype-=__noSuchMethod__.unwatch(\"__proto__\")) { throw StopIteration;");
tryItOut("/*for..in*/for(var window in __iterator__) {Math.pow }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in true.*) yield <x><y/></x>;");
tryItOut("if((this.propertyIsEnumerable(\"__noSuchMethod__\"))) { if ( /x/g ) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  '' ) {export __proto__; } const __iterator__; } else return;export prototype;}");
tryItOut("/*for..in*/for(const <><x><y/></x></> in (__proto__ = __parent__) , * >  \"\" ) \n{;export *; }");
tryItOut("throw <x/>;");
tryItOut("yield (<xxx {__iterator__}={ '' .prototype} />.(<x/>.yoyo(new String(([,,z1] !=  \"\" ),  /x/g ))));");
tryItOut("yield");
tryItOut("return;");
tryItOut("M:if((window <= undefined)) { if ((yield new ( /x/ )( /x/ ))) function  __count__ (__iterator__, __noSuchMethod__) { yield function(id) { return id } }  else try {  return;{gcyield; } catch(prop) { [1,2,3,4].slice } }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("/*infloop*/M:for(window == __iterator__.__noSuchMethod__ = #1=[#1#] <= __count__ = null; new (window)(<x><y/></x>); (-0.unwatch(\"__noSuchMethod__\").throw(([z1,,]--)))) Math.sin");
tryItOut("L: {<><x><y/></x></>;return <>null</>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype = <y><z/></y>['prop'] in  /x/ )  '' \nyield <x/>\nreturn (function ([y]) { })();");
tryItOut("throw StopIteration");
tryItOut("L: /*for..in*/for(let [constructor, constructor] = (let.prototype = __proto__) in new ((function ([y]) { })())(3/0)) { }");
tryItOut("if(constructor) { if ((function ([y]) { })(prop)) ; else {__count__yield true; }}");
tryItOut("{yield __proto__;var __noSuchMethod__; }");
tryItOut("if(constructor = this) { if ((<y><z/></y> >>> <><x><y/></x></>)) {yield; }} else throw __parent__;");
tryItOut("let (__parent__ = 1.3) { while((({})) && 0)export prototype; }");
tryItOut("/*for..in*/for(let __count__ = #1=[<x><y/></x>] in *) L:if(<x/>) break ;");
tryItOut("var __noSuchMethod__ = 3/0;\nreturn;\n");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in (undefined.unwatch(\"__parent__\"))) export *; }");
tryItOut("if(__noSuchMethod__) {/*for..in*//* nogeckoex bug 349964 */ for  each(let null in window) {true; }\rL: ; }");
tryItOut("__proto__: ({ __count__: [], prototype: ({ prop: __noSuchMethod__, __noSuchMethod__: __iterator__(<><x><y/></x></>) }) }) = __parent__");
tryItOut("return;");
tryItOut("switch(((new null ? __count__ : *::*()))((<x/>)(__proto__), <bbb xmlns:ccc=\"@foo\"><ccc:eee></ccc:eee></bbb>)) { default: case arguments: break;  }");
tryItOut("for(let y in []);");
tryItOut("while((__proto__ = true) && 0){\tL: {yield;throw <x/>; } }");
tryItOut("(this);\n\rgc()\n");
tryItOut("<y><z/></y>;");
tryItOut("/*infloop*/for(var __iterator__ = -=; <x/>.*; (true.propertyIsEnumerable(\"prototype\"))) /*for..in*/M:for(const [prop, __proto__] = ~function::__iterator__ in 4.) {const prop/*\n*/;; }");
tryItOut("if(<x/>.unwatch(\"__parent__\")) {constructor, prototype = @foo; } else  if (false | [] ? [15,16,17,18].some(__count__, __noSuchMethod__) : null) {var __noSuchMethod__, __count__; } else yield <x/>;");
tryItOut("/*for..in*/for(constructor in (((function(q) { return q; }\f).call(<x><y/></x>,  '' ,  \"\" ))[(-<><x><y/></\fx></>)][[,].unwatch(\"constructor\")])) var __count__, prop\n");
tryItOut("with((({ prop: prototype, __count__: ({ __count__: getter }) }) = this.__defineSetter__(\"prototype\", [1,2,3,4].map)))const prop = (uneval(1.2e3));");
tryItOut("");
tryItOut("/*infloop*/for(({ __noSuchMethod__: constructor, prototype: ({ __noSuchMethod__: ({ yield: ({ constructor: \t[__parent__, ({ __proto__: __proto__ }), ({ \t__count__: prototype })] }), __parent__: constructor }), constructor: ({ let: ({ __iterator__: ({ prototype: __parent__ }), __parent__: [, , , , ] }) }) }) }) = yield (__count__.valueOf(\"number\")).__lookupGetter__(\"__iterator__\"); x::__proto__.prop % 1e-81; ([11,12,13,14].filter)[\t<xxx>{prototype}</xxx>]) {L: {return <x/>; } }");
