tryItOut("{<y><z/></y>; }");
tryItOut("/*infloop*/do {continue ;{} } while(this);");
tryItOut(" { return __iterator__ = this\n } ");
tryItOut("/*for..in*/for(let [prototype, __iterator__] = true in 1e81) {<x><y/></x>let __parent__ = ;, __parent__; }");
tryItOut("if(!null) throw @foo; else  if ((*(1e4, #3={a:#3#}))) return;");
tryItOut("if(arguments << true) { if ((yield this.__iterator__.propertyIsEnumerable(\"__noSuchMethod__\"))) \ffalse; else export *;}");
tryItOut("do {yield <x><y/></x>.__defineSetter__(\"prototype\", [1,2,3,4].slice);do {return\n } while((Object(null)) && 0); } while((constructor.__noSuchMethod__ setter= function () {  } ) && 0);");
tryItOut("L:if(<x><y/></x> .@ <x><y/></x>) function(y) { yield y; yield;; yield y; } else {throw  '' ; }\n");
tryItOut("/*infloop*/while((*::* |= <x/>))return __count__;");
tryItOut("if( /* Comment */[] = ( \"\"  >>>= \"\" .valueOf(\"number\")) += prototype: ([null].some(<><x><y/></x></>))) { if (((yield ({ get __count__ prop (prop) { return ({a1:1}) }  })))) if( '' ) {} else  if ([]) {{yield <x>\f<y/></x>; } }} else /*infloop*/do /*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in <><x><y/></x></>) {{}Math.sin } while((yield ([<x/> for each (constructor in <x/>)])));");
tryItOut("/*for..in*/for(const [function::__proto__, __count__] = ((yield ({ __iterator__: constructor, prototype: ({ prop: [, prop, , ({ prototype: __proto__,  { export prototype; } : constructor })], __noSuchMethod__: function::__noSuchMethod__ }) }) =  '' )) in (<bbb xmlns=\"*::*\">yyy</bbb>.(undefined .@ this))) {var constructor = <x><y/></x>, constructor = <x><y/></x>;((function  __count__ (__parent__) { return @foo } )((<><x><y/></x></> >= <x/>))) }");
tryItOut("/*for..in*/for([__iterator__, constructor] = __parent__ = [,,] in <><x><y/></x></>) { }\n");
tryItOut("({ __proto__: constructor })");
tryItOut("yield <y><z/></y>;");
tryItOut("/*infloop*/for(let <><x><y/></x><\t/>.__noSuchMethod__; <x><y/></x>.valueOf(\"number\"); __iterator__ = <x><y/></x>) <x><y/></x> ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in this) {var __proto__, constructor; }");
tryItOut("return arguments; const prop;");
tryItOut("/*for..in*/for([function::constructor, __parent__] = (prototype.prop) in <x/> ? @foo : __proto__) {{3/0; } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var [prop, __proto__] = <><xxx>{constructor}</xxx></> in ((function (__proto__, yield) '' ).call(<><x><y/></x></>.throw(<x/>), <x><y/></x>.hasOwnProperty(\"__proto__\")))) {/*infloop*/do {yield;return; } while(<><x><y/></x><\t/>); }");
tryItOut("let constructor, prop';");
tryItOut("M:if(window.prop = __count__) yield  /x/g ; else  if ((new Boolean())\n) {const __proto__ = prop;L:if(({__iterator__: false, constructor: * }).watch(\"__iterator__\", /a/gi)) throw __noSuchMethod__; else return; } else with(<x/>[<x/>])throw prop; const __noSuchMethod__;");
tryItOut("if((uneval((p={}, (p.z = [,,])())))\f) export *; else {yield <x><y/></x>; }");
tryItOut("{return __noSuchMethod__; }");
tryItOut("if((__noSuchMethod__.prop) & yield [[1]]) { if (--new ((0/0).apply)()) {L:do {yield <><x><y/></x></>;(true); } while((null) && 0); }} else ");
tryItOut("/*for..in*/for((null)(*::*) in ((__parent__)(__iterator__ = @foo.prop = (new (gc)(true))))) /x/g  const __count__;");
tryItOut("if(<y><z/></y>) let __proto__, __iterator__; else  if (*::*) *::*; else {M\t:with({x::__parent__: ((uneval(__proto__)))}) for each (prop in __noSuchMethod__) for (prop in ({a1:1})) }");
tryItOut("let (__count__ = (__parent__ = prop.*)) { if( '' ) { if ([] = *::*.throw(<x><y/></x>) <= prop = <><x><y/></x></>) {export prototype;while((<x/>) && 0){(({})); } } else <x/>;} }");
tryItOut("if((eval(\"<x/>.__lookupSetter__(\\\"prop\\\")\", __parent__))) \nvar constructor = <x><y/></x>;\n else  if ([__parent__] = prop.__count__ = null) {false;/*infloop*/for(const constructor; 5.0000000000000000000000.propertyIsEnumerable(\"prototype\"); true) {gc()continue M; } }");
tryItOut("if( \"\"  |=  '' ) {<y><z/></y> } else  if (window.@foo) {let __iterator__ =  '' ;(<y><z/></y>); } else {#3={a:#3#}; }");
tryItOut("();\nreturn;\n");
tryItOut("__parent__ = __parent__;");
tryItOut("/*for..in*/for(([1,2,3,4].slice(this, window))(this.zzz.zzz) in [default: break; .eval(window)]) /*for..in*//* nogeckoex bug 349964 */ for  each(constructor in *) yield [];");
tryItOut("return;");
tryItOut("if(<x><y/></x>.(__parent__) <= * ^= window) {try { var __proto__, __count__ = this; } finally { 0; } throw *; } else  if (++<xxx {__noSuchMethod__}={<x><y/></x> ?  /x/  : <x><y/></x>\t} />.(this.propertyIsEnumerable(\"__count__\"))) {export *;; } else throw constructor;");
tryItOut("__iterator__.prototype = __proto__;");
tryItOut("if((__iterator__.__proto__)) {throw <><x><y/></x></>; } else {gc()throw window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in <y><z/></y>) return <><x><y/></x></>;");
tryItOut("L: {break ;/*for..in*/for\t(var [prototype, __count__] = this in <><x><y/></x></>)  }");
tryItOut("{break L; }");
tryItOut("/*infloop*/while(window){throw __noSuchMethod__; }");
tryItOut("yield this\n");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("if([15,16,17,18].some(({}).prototype, (*.__parent__).__proto__ = __iterator__.prototype)) Math.sin else {/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = <> </> in (constructor.__noSuchMethod__)) /*for..in*/M:for(let __proto__ = <><x><y/></x></>.eval(*::*) in *::*) {; } }");
tryItOut("/*infloop*/while(Error(#0=({prototype: setter}), (new (undefined)(<x/>, <x/>)))){{var __parent__ = <x><y/></x>; } }");
tryItOut("if(<y><z/></y>) {return; }");
tryItOut("if(this[<y><z/></y>]) { if (new __parent__()) throw <x><y/></x>; else 1e81;}");
tryItOut("break L; const  prototype;");
tryItOut("const __count__\n/*infloop*/for(var set = null; window;  '' ) {( '' ); }");
tryItOut("if(try { return; } catch(constructor if (function(){throw <x/>;})()) { yield; } catch(prop) { yield __proto__; } finally { <x/>; } ) { if (new Math.pow(#1=[#1#]) >>> -(-0)) {return <x><y/></x>;; }} else {{}return __noSuchMethod__; }");
tryItOut("/*infloop*/for(var __noSuchMethod__\t; <x/> - <><x><y/></x></>; (([z1].__defineSetter__(\"prototype\", function(y) { yield y; break ;; yield y; })).isPrototypeOf( ^=  '' .yoyo(<y><z/></y>)))) return;");
tryItOut("/*for..in*/for(prop.constructor in ((function(y) { yield y; /*for..in*/for(var [__noSuchMethod__, __count__] = <y><z/></y>++ in  \"\" ) (<y><z/></y>).apply; yield y; })([15,16,17,18].filter((<x><y/></x>).call, 1.2e3))))export *;");
tryItOut("/*infloop*/M:for(const __proto__; [Date(__parent__) if (__count__)];  /* Comment */null) \f{do {(<x><y/></x>); } while((0x99) && 0);var function::__proto__, __iterator__; } const constructor;");
tryItOut("for(let y in [5,6,7,8]) __count__.prop = __parent__;");
tryItOut("if(<x><y/></x>) undefined;");
tryItOut("function(q) { return q; }\nundefined; /x/ \n");
tryItOut("L: {\nreturn;prototype; }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: ({ prop: [__count__] }) }) = (p={}, (p.z = eval(\"constructor.throw( /x/g );\", prop))()); (yield <x><y/></x>).propertyIsEnumerable(\"constructor\"); (<><x\f><y/></x></>)(#1=[#1#]) .@*:: (((new (function  __count__ () { return #1# } )())).watch)()) M:with((undefined & 3.141592653589793)){\texport __iterator__;gc() }");
tryItOut("{yield <><x><y/></x></>; }\f");
tryItOut("/*for..in*/L:for(var __count__ in {}) /*infloop*/for((\n \"\" ); \twindow; #2=[__parent__]) export *;");
tryItOut("M:do ; while((__noSuchMethod__ =  /x/g ) && 0);");
tryItOut("/*infloop*/do /*for..in*/for(const ([]) in each.prop = [15,16,17,18].filter('haha'.split, true)) {do {window{} } while((<x><y/></x>) && 0); } while([11,12,13,14].\fmap);");
tryItOut("__count__ = prop;");
tryItOut("M:while((true\t.constructor) && 0){;throw <x><y/></x>; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((new function ()0(<x><y/></x>)).__defineSetter__)(<x><y/></x>.(*::*))))(false);");
tryItOut("/*infloop*/M:for(prototype; (eval(\"/*infloop*/for(const constructor = new Number(<><x><y/></x></>, arguments); function ([y]) { } > .2; (0.1 !== *)) {return __noSuchMethod__;; }\", ('fafafa'.replace(/a/g, new Function))) ^= ([({ __iterator__: prop }), , , ] = (__parent__ =  '' ))); (uneval(<y><z/></y> for each (constructor in *::*).__defineGetter__(\"__iterator__\", null)))) yield;");
tryItOut("L:switch(this.__defineGetter__(\"__proto__\", 'haha'.split)) { default: break; /*for..in*/for(var constructor in ((<><x><y/></x></>.prototype = -3/0)(eval(\"this\", @foo).*))){(3/0); }break; case 5: if(__parent__ = this.__defineGetter__(\"prototype\", (Math.pow).call)) {yield (false @ window); }break;  }");
tryItOut("return;");
tryItOut("if(this) *::*\nexport *;");
tryItOut("do {} while((#0=({constructor: this.__defineSetter__(\"__parent__\", (1 for (x in [])))})) && 0);");
tryItOut("export __count__;{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let RangeError()['prototype'] in <x>\n<y/></x>) {yield; }");
tryItOut(";if(<x><y/></x>) {break M; } else {yield;; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in [,,]) while(((__count__(__noSuchMethod__))) && 0){(this); }");
tryItOut("if(__count__|=(p={}, (p.z = <y><z/></y>)())) { if ((__count__ = <x/>).@foo) /*for..in*/for(__parent__ = window.__parent__.eval(<x><y\f/></x>) in [[]]) {}} else {const prototype, constructor; }");
tryItOut("for(let y in []);");
tryItOut("\n");
tryItOut("/*for..in*/for(prop in  /x/ ) <y><z/></y>;");
tryItOut("\nreturn  /x/ ;");
tryItOut("M:with({__parent__: (({a2:z2}) <= -1)})<x><y/></x>;");
tryItOut("L:do {if(window) { if (__proto__) __parent__ = <x><y/></x>;} else <x><y/></x>; } while((function::__noSuchMethod__) && 0);");
tryItOut("{throw <x><y/></x>; }");
tryItOut("/*infloop*/M:for(prototype; (__count__ = 0.1).throw(<><x><y/></x></>); [prototype = <><x><y/></x></>].some(Math.pow)) {continue ; }");
tryItOut("<x/>");
tryItOut("let (__noSuchMethod__, __parent__ = 1e-81 .@x:: null.__lookupGetter__(\"__noSuchMethod__\")) { /*for..in*/L:for(prop in ((function () { yield 5.0000000000000000000000 } )(new Date(window)))){3.141592653589793;__parent__, __noSuchMethod__ = [1,,]; } }");
tryItOut("if(<y><z/></y>) {export __proto__; } else  if (Number(@foo, <x/>)) //h\n{let constructor = #1#, __count__; } else /*infloop*/for(const __iterator__; __noSuchMethod__; <><x><y/></x></>) ");
tryItOut("if((let (prop = ({a1:1}), __parent__ =  '' ) <y><z/></y>)()) false; else  if ((((arguments)[@foo]).valueOf(\"number\").__iterator__ = -0)) {/*infloop*/for(var __iterator__; <><bbb xmlns=\"({a1:1})\"><x><y/></x> </bbb></>; (true !==  /x/  >> 033)) {{}if(true) { if (null) const prop, prototype = __noSuchMethod__; else this.__defineGetter__(\"prop\", prop = this)} }/*infloop*/for(const ({ prop: __noSuchMethod__, __proto__: __parent__ }\f) = (--<><x><y/></x></>); (yield getter); yield true) {let __proto__ = 1e81, __iterator__;yield; } } else {{}\n{}\nexport *; }");
tryItOut("/*infloop*/for(const constructor; eval >>>=Function; (new (eval(\"(this.__defineSetter__(\\\"prop\\\", (new Function(\\\"var constructor, prototype;\\\"))))\", <x><y/></x>.(<x/>)))([11,12,13,14].some))) switch(window) { default: break;  }");
tryItOut("export *\nreturn;");
tryItOut("L:switch(this.zzz.zzz) { case ((function(id) { return id })((-0)) = ({prototype: <x/> |= [,,z1]})): default: case <x/> / <x><y/></x>--: break; case this << (function ([y]) { })().throw(<><'y/><try { var setter = <x><y/></x>, constructor; } finally { gc() } /x> <= undefined): continue ; }");
tryItOut("/*infloop*/while(false = this.__defineGetter__(\"__noSuchMethod__\", gc)){<x><y/></x> }");
tryItOut("yield __parent__;");
tryItOut("/*for..in*/L:for(const constructor = ({ get \f__count__() { return __count__ }  }) in __iterator__ = window) const prototype, __parent__;");
tryItOut("{throw null }");
tryItOut("/*infloop*/for(-(__parent__ instanceof <x/>); yield null .. 1e+81.eval((<><x><y/></x></> ? <><x><y/></x><\f/> : arguments.isPrototypeOf(<><x><y/></x></>))); ( \"\" .throw(<y><z/></y>))) {/*infloop*/for(const prop =  /x/ ;  \"\" ;  \"\" ) {let yield; }yield 1e81; }");
tryItOut("if(__proto__.__parent__ getter= function  __proto__ (__parent__, __iterator__) { return [,] } ) {{throw function ([y]) { };return; } } else \t if (({a2:z2}).eval(this)) {/*infloop*/while(null)export *\nwith((({})))return  '' ; }");
tryItOut("/*for..in*/for([prototype, __count__] = ((uneval(Function))) in 1e-81) { }");
tryItOut("return <x/>;");
tryItOut("throw prop;");
tryItOut("do prototype, __proto__ while(((\nfalse.* ^ 3.141592653589793.propertyIsEnumerable(\"constructor\"))) && 0);");
tryItOut("while(((constructor = <x/> *= (this.__defineSetter__(\"__parent__\", ({}).hasOwnProperty)))(__iterator__, new this.__defineGetter__(\"__parent__\", Function))) && 0){/*for..in*/for(let __parent__ = <><x><y/></x></> in *::*) {gc(){} } }");
tryItOut("with({prop: typeof <x><y/></x>.prototype = __iterator__})export __parent__;");
tryItOut("let (__parent__ = undefined, prop) { let prototype; }");
tryItOut("throw __parent__;");
tryItOut("L:switch(__proto__ = (-0).__defineGetter__(\t\"__parent__\", ({}).hasOwnProperty)) { case 1: break;  }");
tryItOut("/*for..in*/for(__proto__ in (p={}, (p.z = prop ^= *::*)()).__lookupGetter__(\"constructor\")) M:if(__proto__ = __iterator__) ; else /*for..in*/for(__iterator__ in ((gc)(false)))export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in (p={}, (p.z = null)())) return <y><z/></y>;\nwith(<><x><y/></x></>\t)\n");
tryItOut("/*infloop*/for( /x/  || <><x></*\n*/y/></x></>; *::*.unwatch(\"__proto__\"); ((1e4.valueOf(\"number\") += __iterator__ = <x/>).constructor)) {/*for..in*/for(const __count__ = (let (constructor, prototype) window.__defineGetter__(\"prototype\",  \"\" )) in this) {gc() } }");
tryItOut("L: {/*infloop*/for(constructor; undefined; #1=[#1#]) export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in #3={a:#3#}) yield  /x/ ;");
tryItOut("/*for..in*/M:for(([z1,,])(window) in <><x><y/></x></>) {yield prop;return; }");
tryItOut("case prototype: break; break; __count__ = <y><z/></y>break; default: do (<y><z/></y>); while((({__iterator__: <><x><y/></x></> })) && 0);break; yield \n<x/>;/*for..in*/for(let __iterator__ = <x><y/></x> in this) let constructor = true, constructor =  /x/ ;if(([,]--)) { if (true.propertyIsEnumerable(\"__parent__\")) {yield <y><z/></y>;yield; }} else [[1]];break; ");
tryItOut("with(__proto__ = <y><z/></y>)if(__iterator__) { if (prop) function  constructor (constructor\t) { return window }  else {gc()(Math.pow).apply }}");
tryItOut("switch(({ get __iterator__() { return  \"\" , this }  })) { default: break; break; case 7: break;  }");
tryItOut("yield eval(\"__count__, prop\", (constructor = prototype));");
tryItOut("do gc() while(() && 0);");
tryItOut("__iterator__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__.__iterator__ in [[1]]) {return; }");
tryItOut("let(__iterator__ = <><x><y/></x></>) ((function(){return undefined;})());");
tryItOut("{return;return; const __proto__; }");
tryItOut("/*infloop*/for([({ __count__: __parent__ }), [, __noSuchMethod__, ({ __parent__: ({ __count__: ({ prototype: [__proto__, __iterator__, __iterator__, prop] }) }), __parent__: ({ constructor: __noSuchMethod__ }) }), ({ __iterator__: ({ __noSuchMethod__: __proto__, __parent__: ({ __proto__: ({ prototype: __parent__ }) }) }) }), ]] = 1.3; __noSuchMethod__; this[<><x><y/></x></>]) {\n/*infloop*/for(let __count__; undefined; undefined) return  '' ;\n }");
tryItOut("let __proto__, __noSuchMethod__\n");
tryItOut("M:if((uneval(#1#)).__defineGetter__(\"prop\", (<><x><y/></x></>).__defineSetter__)) export *; else  if ((gc).call(-0, )) {yield; }");
tryItOut("{{}yield; }");
tryItOut("/*for..in*/L:for(var (-1)(window) in *) {export *;Math.pow }");
tryItOut("if(1e-81.__iterator__ =  /* Comment */<x/>) {yield @foo;let prop; }");
tryItOut("with({__count__: yield [z1]})this;");
tryItOut("with({}) { L: {export *; } } ");
tryItOut("return (void  \"\"  >= function::__parent__ = *);\nyield false;\n");
tryItOut("if(__proto__) {let __parent__; }");
tryItOut("/*infloop*/do {if((this.zzz.zzz)) {let constructor = <x><y/></x>;; } else  } while(prop = (*::*.yoyo( /x/g )));");
tryItOut("/*infloop*/M:do gc() while((constructor = <><x><y/></x></>));");
tryItOut("/*for..in*/for(const  for each (__proto__ in ((__count__ = this)[\n<><x><y/></x></>])[<x><y/></x>.__defineGetter__(\"__count__\", /a/gi/*\n*/)]) if (__noSuchMethod__%=yield *::*)(({prop: ((__proto__)[ /x/g ]), __iterator__ getter: ({}).__lookupGetter__ }) === constructor) in ((eval(\" /x/ ;\", ().eval(0 ? <x><//h\ny/></x> : arguments)))(({ get __parent__ __parent__ ({ __noSuchMethod__: __count__ }), __parent__) { return; } ,  set prototype __count__ (__count__) { gc() }  })\t)))gc()");
tryItOut("if(window) (.2);");
tryItOut("export *;");
tryItOut("continue L;");
tryItOut("L:if(( /* Comment */__noSuchMethod__.(let __parent__, __count__ = this;.watch(\"each\", function (__proto__, __count__) { yield; } )))) { if (yield ((__noSuchMethod__.(<><x><y/></x></>))[__count__ = @foo])) { }} else {continue M; }");
tryItOut("with({constructor: window})(__parent__.__parent__)");
tryItOut("/*for..in*/for(const prop in (this.zzz.zzz)) switch(<x><y/></x>.throw(*::*)) { case (eval(\"export prop;\", <><x><y/></x></>).throw(<>#3={a:#3#}</>)): break L;\t }");
tryItOut("M:if(new Boolean()) export *; else  if (window) /*for..in*/for(var __parent__ in (((eval / __parent__.__count__ = @foo))(<zzz> /x/ </zzz>)))> else {/*for..in*/for(var getter = * && [z1] in ([] >>> {})) {/*for..in*//* nogeckoex bug 349964 */__parent__: __count__ = <x><y/></x>[<><x><y/></x></>] } }");
tryItOut("__parent__ = __parent__;");
tryItOut("__parent__ = __iterator__;");
tryItOut("/*infloop*/for(__proto__.__parent__ = prop = ({ [__count__, __iterator__, constructor]: [], __iterator__: __parent__ })\t; new -(prop =  '' )((\n<y><z/></y>), void  /* Comment */[[]]); this) throw StopIteration;");
tryItOut("/*infloop*/for(var prop = (<><x><y/></x></> >> __proto__); <x/> % @foo; <x\f><y/></x> & <y><z/></y>) {let function(y) { yield y; throw prop;; yield y; }, constructor = [,,]; }\ncontinue ;");
tryItOut("for(let y in [5,6,7,8]) eval(\"__proto__\", <x><y/></x>);");
tryItOut("if((new ((Math.sin)(<x><y/></x>, *::*)).watch((( \"\" )())\n, (<x><y/></x>.( /x/ ))))) /*infloop*/do {var prop = [[]];({a1:1}); } while(false);");
tryItOut("switch(-@foo--) { case <x><y/></x>.prototype = prop.__count__ = #3={a:#3#}: return;default: break; case 1: {}break;  }");
tryItOut("/*for..in*/for(let (prototype) in ({a2:z2})) {(window)\nreturn <> default: var __proto__ = this;break; <x><y/></x>/>; }");
tryItOut("gc() const __proto__;");
tryItOut("switch((new (prop.__noSuchMethod__ getter= Math.sin)(new RangeError(), (new ({}).hasOwnProperty(5.0000000000000000000000) >>= ([z1,,])[<><x><y/></x></>])))) { default: break; case __iterator__ = arguments]: yield ({__count__: 1.2e3 });break;  }");
tryItOut("if(<x/>) { if ( \"\" ) export __iterator__;} else yield;");
tryItOut("if(__count__ = prototype) ; else  if ((default: break; gc()break; case 2: var __iterator__ = [,,z1], prototype = <x><y/></x>;yield;case 1: break; .throw(<><x><y/></x></\f>))\n.propertyIsEnumerable(\"constructor\")) {switch((let (constructor, __count__) [])) { default: break; /*for..in*/for(constructor in ((<x/>)(<><x><y/></x></>)));case 9: /*for..in*/for(const __noSuchMethod__.prototype in ((((new Function(\"export prototype;\"))).apply)(<x><y/></x>.__count__ = *)))yield;continue ;break;  } } else with(([1,,] if (window)).eval(#1#)){yield;; }\t");
tryItOut("/*infloop*/L:do let prop; while(undefined);;");
tryItOut("{}");
tryItOut("{break L; } const __parent__;");
tryItOut("/*for..in*/for(var prototype in <{constructor}><ccc:ddd> </ccc:ddd></{constructor}>.(0.__lookupSetter__(\"prop\")) << (function(q) { return q; }).call(@foo, true, *)) {;/*infloop*/M:do this while(<x><y/></x>()); }");
tryItOut("/*infloop*/for(this; (p={}, (p.z = ++[,,z1].__lookupGetter__(\"__proto__\").__noSuchMethod__ = <><x><y/></x><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></>)()); ([<x><y/></x>].filter(Math.pow)) .@x::  /x/ ) <x><y/></x>; const constructor;");
tryItOut("let __iterator__ =  /x/ , __iterator__;");
tryItOut("/*infloop*/do {yield;gc() } while(@foo);");
tryItOut("/*infloop*/M:for(let __count__; (__count__.prop = true).@*; ( /x/g  == (p={}, (p.z = #1=[#1#])()))) {do {([1,,]); } while((<><zzz><x/></zzz></>) && 0); }");
tryItOut("if(yyy) ; else  if ( for each (__noSuchMethod__ in <ccc:ddd><x><y/></x><!--yy//h\n--></ccc:ddd>) for each (__count__ in <y><z/></y>)) throw @foo; else { }");
tryItOut("{(function ([y]) { }); }");
tryItOut("\nexport *;");
tryItOut("with((__count__ = <><x><y/></x></>))const __proto__, __proto__ = throw StopIteration;;");
tryItOut("L:with(<x/> , @foo)/*for..in*/M:for(var __iterator__ = 0 in [[1]]) var prop = {}; const __noSuchMethod__;");
tryItOut("prop");
tryItOut("with(undefined){<x/>;\nexport __iterator__;\n }");
tryItOut("if(({constructor: (null) })) { if (*.__proto__ = constructor , ((gc)(function(id) { return id }, __proto__))) ({}).__lookupGetter__} else {var __iterator__ = undefined;export prop; }");
tryItOut("/*infloop*/M:while(<x/>.yoyo(null))gc()\ngc()");
tryItOut("/*infloop*/for(__proto__.__parent__; __count__(({__noSuchMethod__:  \"\"  })\f .@*:: false, (<><x><y/></x></> -= <x/>)); *::*) M:while((#1=[#1#]) && 0)let constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <><x><y/></x></>) prototype;");
tryItOut("(<><x><y/></x></>);\nL:do {break L; } while(( /x/ ) && 0);\n");
tryItOut("L:if(<x><y/></x> >= (window).call( /x/ , )) #1=[#1#]; else {yield <x><y/></x>; }");
tryItOut("switch((*::*.eval(<y><z/></y>))) { default: ; }");
tryItOut("let(__parent__ = ({ prop: prop, prop: __noSuchMethod__ }), __parent__) { return <><> /x/ </></>;");
tryItOut("");
tryItOut("if(eval(\"(({__count__: (prototype)(null,  /x/g )}))\", (<x><y/></x>)[true])) { if ([15,16,17,18].some(({}).hasOwnProperty, <x/>).yoyo(<x><y/></x> < *::*)) {yield @foo; } else M:if(__count__) __proto__ = window; else function (__iterator__, prop)<x/>}");
tryItOut("with({}) with({}) { return; } ");
tryItOut("/*infloop*/do {throw null;let __count__, prototype = true; } while((<x><y/></x>\n));");
tryItOut("return;");
tryItOut("L:if((yield [15,16,17,18].map(__parent__ = Array(), __parent__ = @foo, undefined)).prototype) { if (<><x><y/></x></> <<= <><x><y/></x></>.__lookupGetter__(\"prototype\")) /*for..in*/for(const __count__ in (((new Function(\"/*infloop*/for(const constructor; new Object(); (function () { return <y><z/></y> } ).apply()) continue ;\")))([, ] = (this.__defineSetter__(\"__noSuchMethod__\", <x><y/></x>).valueOf(\"number\")))))__noSuchMethod__ = arguments, __count__;} else export *;\nexport __count__;\n const prototype;");
tryItOut("/*infloop*/M:do yield <y><z/></y>; while((( /x/ ++)).__defineSetter__(( ''  .@x:: <><x><y/></x></>)((<><x><y/></x></>.yoyo(__parent__)), (uneval(false)))));");
tryItOut("let (constructor) { export __proto__; }/*infloop*/M:for(const __proto__; constructor; ( \"\" .watch(\"prototype\", (1 for (x in []))) for each (__parent__ in <><x><y/></x></>) if (<y><z/></y>))) if(<x/>) {return this//h\n; } else  if (this) x::prototype, constructor = 0/0;");
tryItOut("/*infloop*/L:for(<x/>;  /* Comment */1.2e3; ({__parent__: <x><y/></x>})) {; }");
tryItOut("let ([1] = [__count__].map(gc), __count__ = undefined.__lookupSetter__(\"prop\")) { throw <x/> }");
tryItOut("M:if(new RegExp()) let __iterator__; else export *;");
tryItOut("/*infloop*/L:do {} while(prop);");
tryItOut("/*for..in*/for(const prototype = constructor = 'fafafa'.replace(/a/g, Math.pow).@foo in <xxx {function::prop}={__parent__ = <x/>} /><>constructor = <><x><y/></x></></><!--yy-->) {gc()with({}) yield <x/>; }");
tryItOut("if([*].throw([[1]].map(gc))) { if ((__parent__.( '' ))) {/*infloop*/do export constructor; while(<x/>.propertyIsEnumerable(\"prototype\")); } else with((-1))gc()}");
tryItOut("var prototype = 0/0, __noSuchMethod__");
tryItOut("return;");
tryItOut("/*infloop*/for(const [prop, ({ getter: __iterator__, __count__: ({ __count__: [] }) }), __iterator__, __proto__] = ((gc).apply)(4..propertyIsEnumerable(\"__parent__\"), G.__lookupGetter__(\"__count__\")); ({__iterator__: __parent__}); (yield __iterator__)\f) {while((this) && 0){} }");
tryItOut("/*for..in*/for(const __parent__.__noSuchMethod__ in <><x><y/></x></>) yield 0x99;");
tryItOut("L: return null;");
tryItOut("{/*infloop*/L:while(<x><y/></x> &= window){gc()return true; }( ); }");
tryItOut("@foo");
tryItOut("if(prototype =  '' ) {var prototype; } else  if (((<x><y/></x>) < [[[1]]])) {prototype = null, __iterator__;return; } else const __iterator__;");
tryItOut("prop = __proto__;");
tryItOut("/*infloop*/for(var prototype; ((<><x><y/></x></> if (prototype))).hasOwnProperty(\"__noSuchMethod__\"); new prop = <y><z/></y>(__count__ = <x><y/></x>)) {throw __proto__; }");
tryItOut("do continue M; while((window) && 0);L:switch(window) { default: case  '' : var __iterator__, prototype;case <x><y/></x>: break; case <x><y/></x>:  }");
