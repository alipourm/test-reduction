tryItOut("if((({prototype: ({a2:z2}), __noSuchMethod__: @foo })) .@*:: <x><y/></x>) {continue M; } else  if ((__parent__ = 5.0000000000000000000000)) if(true) ; else  if (this) <x><y/></x>; else {<x/>;throw <><x><y/></x></>; }");
tryItOut("\rswitch(<x><y/></x>) { default: throw true;break; case *: ;break; const prop = undefined;break; break; case undefined: break; case <x/>: {}break; case <y><z/></y>: yield;break; case 4: return -3/0;break; case <><x><y/></x></>: break;  }\nyield;\n");
tryItOut("/*for..in*/for(const __count__ = this > 1.2e3 << (uneval(1.2e3)) in this) export *;");
tryItOut("L:if([15,16,17,18].filter(function  __parent__ ()__noSuchMethod__,  /x/g )) {undefinedthrow window; } else  if (~<x><y/></x> .. <x/>.eval(<x><y/></x>)) {L:do {} while(( /x/g ) && 0);yield <x><y/></x>; }");
tryItOut("let (__proto__ = (prop.unwatch(\"constructor\")).eval(<x><y/></x>.__defineSetter__(\"prop\", [z1]))) { L: gc() }\nswitch([this.zzz.zzz].sort(Math.pow)) { case 4: break; break;  }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor(this.yoyo(__parent__)) in this.__defineGetter__(\"__noSuchMethod__\", gc)) {gc()L: {prop; } }");
tryItOut("/*for..in*/for(__noSuchMethod__ = eval(\"<x/>\", <x/>) in undefined) {export __count__;__parent__; }");
tryItOut("return (__noSuchMethod__.__noSuchMethod__);");
tryItOut("if(eval(\"__iterator__.__proto__\", ([(__noSuchMethod__%=window)].map((new Function(\"Function\")))))) if(#1=[#1#]) return 0/0; else {} else *, *");
tryItOut("constructor = __proto__;");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = (window([1], this)).__defineGetter__(\"constructor\", 'haha'.split).yoyo(this.__defineSetter__(\"prototype\", function () { yield * } ).__lookupSetter__(\"prop\")) in true ? __iterator__ : [,,]) {/*infloop*/L:while((<y><z/></y>.eval(@foo)))function (prototype) { yield __parent__ } export *;window; }");
tryItOut("with({}) __parent__ = __proto__;");
tryItOut("for(let y in [5,6,7,8]) try { (function ([y]) { })(); } finally {  } ");
tryItOut("{}");
tryItOut("return *;");
tryItOut("{yield;gc() }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("if(__iterator__: (__noSuchMethod__)) { if (\ryield <x><y/></x>.*.propertyIsEnumerable(\"prop\")) {continue M; } else /*for..in*/L:for(let __count__ in 5.0000000000000000000000) {; }}");
tryItOut("/*for..in*/\tfor(const [__proto__, prototype] = [,] in false) {{}(#1#); }\ncontinue M;");
tryItOut("with({prop: <><x><y/></x></>.watch(\"__proto__\", <x/>)})switch(<y><z/></y>) { case 3:  }");
tryItOut("if(new prototype().watch(\"prop\", (<><x><y/></x></> < __parent__))) /*for..in*/for(var __iterator__ in ((function (prototype) { true; } )(({constructor: window })))){export __parent__; } else {/*infloop*/for(let __count__; window; <y><z/></y>) const prop, __iterator__ = __count__; }");
tryItOut("with({__proto__: (null)(yield)}){yield <><x><y/></x></>;let prototype = <x><y/></x>, prop = <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__parent__) in window) __iterator__ getter: function(q) { return q; }");
tryItOut("M:if(((eval(\"[1]\", prop)) @ <x><y/></x>.*)) {/*for..in*/for(__iterator__ in true) {prototype; } } else  if ((-undefined :: [<y><z/></y> for (__count__ in *)])) return; else const prop =  '' , __count__;");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */M: for  each(var [1]['prototype'] in *::*) {if(*::*()) {([,]);false } else  if (eval(\"(\\nprototype = __count__)\", eval(\"throw <><x><y/></x></>;\", <x><y/></x>))) var __count__; else {} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.__iterator__ in <>[__parent__, , ] = (prop = false)</>) {gc()/*for..in*/for(prototype in <>'<x><y/></x>eval(\"1.3\", undefined).unwatch(\"constructor\") </>) {yield; } }");
tryItOut("L:with({__parent__: (<x><y/></x>.__lookupGetter__(\"__count__\")\f != this.__defineGetter__(\"__parent__\", Math.pow))})if(undefined) { if ( /x/g ) {(<x/>); }} else export *;");
tryItOut("with({}) return *;");
tryItOut("switch(prop) { case (this.zzz.zzz): break; default: break; case (({__iterator__: __parent__.__defineSetter__(\"prototype\", new Function)})): case 9: break; while((yield <><x><y/></x></>) && 0)return;break; {}break; break; case false &= <x/>: /*for..in*/for(let __proto__ in (((new Function(\"{}\")))(#1#)))break;  }");
tryItOut("/*for..in*/L:for([constructor, __count__] = __count__ = (033.hasOwnProperty(\"x::__count__\")) in typeof this) {{export *;; }/*infloop*/L:do {yield; } while(*); }");
tryItOut("export __proto__; const __parent__;");
tryItOut("if((new (([1,2,3,4].map).apply)( /x/ , <x/>) if (3)) , __parent__.()) return let (__count__) prop %= [[]] || 3; else  if (<x/>) {gc() } else M:with(eval(\"null\",  '' )){throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for((__parent__) in ((({}).hasOwnProperty)((function(q) { return q; }()))))/*infloop*/while(<y><z/></y>)gc()");
tryItOut("gc()\n(this);");
tryItOut("M:if(__count__.__noSuchMethod__) { if (*::*) {while((__noSuchMethod__.__parent__) && 0){throw prop; } }} else {{} }");
tryItOut("with((({ get __count__(__proto__, __noSuchMethod__\r) { yield -3/0 } , __iterator__: <y><z/></y> })))/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in true) yield *::*;");
tryItOut("<x><y/></x>;");
tryItOut("do if(undefined) function(q) { return q; } else  if (<x><y/></x>(@foo, <><x><y/></x></>)) {gc() } else {/*for..in*/for([constructor, __noSuchMethod__] = null in <x><y/></x>) case 9:  } while((<x><y/></x>.hasOwnProperty(\"constructor\")) && 0);");
tryItOut("throw __parent__;\n\fif([,,] .@ <x><y/></x>) (prop);\n");
tryItOut("with(new (this.__defineGetter__(\"__proto__\", function(q) { return q; })\f)((@foo in *::*), (({}).__lookupGetter__)).eval(<x><y/></x> * []))break ;");
tryItOut("/*for..in*/for(let prototype = (eval(\"<x><y/></x>\", <><x><y/></x></>)) in (__parent__.__noSuchMethod__ = <x/>)) {export prototype; }");
tryItOut("let ((function(y) { yield y; yield;; yield y; } in ([15,16,17,18].map( \"\" , #1#)))) { switch(null) { case 9: break; default: gc()break; case 7: M:with(Math.pow)({ __parent__: ({ yield: [] }) })case 3: with({get: null.yoyo(<x><y/></x>)}){gc() }break; {{}constructor, __parent__; }break;  } }");
tryItOut(";/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in __count__) yield;");
tryItOut("M:switch(eval(\"[[]]\", <x/>).__defineSetter__(\"__noSuchMethod__\", function(q) { return q; })) { default: Function const constructor;break;  }");
tryItOut("#1=[#1#];");
tryItOut("/*infloop*/while(__noSuchMethod__ = [[]]\n){/*infloop*/\tfor(var prop; <><x><y/></x></>.__defineSetter__(\"constructor\", ({}).__lookupGetter__); [null]) (<y><z/></y>); }");
tryItOut("/*for..in*/for(const prototype in ((gc)(function  __noSuchMethod__ (\nprototype, __count__) { yield  /x/  && (function ([y]) { })() } ))){null((let (prop = <x><y\t/></x>, __proto__) constructor)); }");
tryItOut("if((let (__proto__ = <x/>.yoyo(<><x><y/></x></>)) [3].sort(({}).__lookupGetter__))) L:if((<x/> in <x><y/></x>)) /*infloop*/do let __parent__ = <x><y/></x>, __proto__; while(function ([y]) { }); else  if (* ? __proto__.(<x/>) : (<><x><y/></x>/>)(this, null)) {;; } else  if ((__parent__)) __proto__; else {var __count__, __iterator__ = false;let __count__ = <><x><y/></x></>, __count__ = this; }");
tryItOut("let (__parent__ = -((<x><y/></x>).__defineSetter__)(undefined, function ([y]) { })) { break ; }");
tryItOut("let(prototype, prop) ((function(){for(let y in [5,6,7,8]) export *;})());");
tryItOut("L: {let (prototype = <x><y/></x> += @foo, constructor = <><x><y/></x></>\n) { /*infloop*/do {const __iterator__ = @foo, prototype;; } while( /x/ .__lookupGetter__(\"__iterator__\").isPrototypeOf((__proto__.prototype setter= this))); } }");
tryItOut("");
tryItOut("if(prop != window) { if ((yield false && __noSuchMethod__.prop)) {Math.sinreturn  /x/ ; } else this;\f}");
tryItOut("L: {return;{} } const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in <><x><y/></x\t></> & [,]) {if(*::*.yoyo([,,z1])) { if (null ? <y><z/></y> : __count__.unwatch(\"__iterator__\")) \t{function () { yield <x/> }  } else throw prop;}(__parent__); }");
tryItOut("<!--yy-->");
tryItOut("__iterator__((eval(\"[z1,,]\", this))) = __iterator__;");
tryItOut("{<y><z/></y> }");
tryItOut("return [<x/> for (__iterator__ in <><x><y/></x></>)];");
tryItOut("if(new (function(q) { return q; })(__count__.__noSuchMethod__)) {return; } else  if (({constructor: yyy, constructor: window }).hasOwnProperty(\"constructor\")) {__count__ = true;throw  /x/g ; } else {{} }");
tryItOut("if((constructor = [,]).watch) { if ((eval(\"export let;\", this.zzz.zzz))) {export \t;return __parent__; }} else {return <x><y/></x>; }");
tryItOut("throw StopIteration;");
tryItOut("if(undefined) { if (0.1) {return; } else (window);}");
tryItOut("throw __noSuchMethod__;");
tryItOut("return  '' ;");
tryItOut("throw __proto__;");
tryItOut("while((eval(\"<x><y/></x> for (__count__ in <><x><y/></x></>)\", (new (<y><z/></y>)().unwatch(\"function::prototype\")))) && 0)(*::*);");
tryItOut("if(({ __iterator__: __iterator__ }) = constructor) { if (this) {return;yield  /x/ ; } else {<><x><y/></x></>;__count__, __parent__ }}");
tryItOut("let ([, prototype] = <y><z/></y>, prop = [z1,,]) { {yield;export *; } }");
tryItOut("return;");
tryItOut("/*for..in*/for(var __iterator__ = export __iterator__ in (yield ({__noSuchMethod__: function (prop, __iterator__) { yield; }  @ [__parent__], __proto__: <x><y/></x>.@foo }))) {yield this;/*infloop*/M:do {} while(__proto__ = __noSuchMethod__); }");
tryItOut("L: ;");
tryItOut("do /*for..in*/for(let __count__ in __proto__ ? x::constructor : <y><z/></y> != <x><y/></x>.__defineSetter__(\"__iterator__\", function  __proto__ (constructor, constructor))) {(<y><z/></y>);__count__ = <y><z/></y>; } while((((-1) >= <x/>)) && 0);");
tryItOut("if((eval(\"M:with({constructor: <x><y/></x>})return <><x\\f><y/></x></>;\", new (function (prop, __iterator__) { yield @foo } )(<x/>, <x><y/></x>).propertyIsEnumerable(\"__count__\")))) { if ( /x/  >> [,,] .@ undefined[ /x/g ]) return;} else {export __noSuchMethod__;/*for..in*/for(const prototype.__proto__ in <y><z/></y>) {throw __count__;'haha'.split } }");
tryItOut("/*infloop*/for(let [__noSuchMethod__, ({ constructor: prototype, __iterator__: __noSuchMethod__ }), __iterator__, ] = (prop.__proto__); (eval(\"let constructor = <x><y/></x>;\", <x/>)).__defineSetter__(\"__iterator__\", function () { <y><z/></y>; } ); ~1e-81) {;__noSuchMethod__; }");
tryItOut("if(5.0000000000000000000000) {/*for..in*/for(const [prop, __proto__] = ({constructor: null }) in  /x/ ) throw 3.141592653589793;switch(yield __noSuchMethod__ = window) { case (<><x><y/></x></>.@foo): break; default: yield prop;break; L:if(<><x><y/></x></>) { if (<><x><y/></x></>) throw 0;} else {#1= }L: {var __count__, prop;export prototype; } } } else .2;");
tryItOut("/*infloop*/for(const ({ __parent__: prop }) = *::* :: this; undefined.__defineSetter__(\"__count__\", function(q) { return q; });  /x/g ) {throw true;export __noSuchMethod__; }");
tryItOut("let (prop = true) { return; }");
tryItOut("L: {yield; }");
tryItOut(";");
tryItOut("if(constructor.prop getter= Math.pow) __iterator__ = window, prop; else {( /x/g );break ; }");
tryItOut("return;");
tryItOut("/*for..in*/for(const prop(((uneval(@foo))))/*\n*/ in true.watch(\"__count__\", 1e81)) gc()");
tryItOut("/*infloop*/L:while((null)(<x><y/></x>, <y><z/></y>))gc()");
tryItOut("for(let y in [5,6,7,8]) return <> </>.((eval(\"Function\", *)));");
tryItOut("if(if([15,16,17,18].sort(eval, this)) yield false; else  if (true.@foo) {{} } else [[1]]; % prop.(constructor)) {if(delete this) {throw <><x><y/></x></>; } else  if (([* for each (__proto__ in this) in window) for (constructor in null)])) {L: throw <y><z/></y>; } } else  if (({constructor: this})) ");
tryItOut("/*infloop*/do {([,,]); } while(window);");
tryItOut("yield\n");
tryItOut("L: return;");
tryItOut("do {export *; } while((window) && 0);");
tryItOut("throw  /x/ ; const __count__;");
tryItOut("/*for..in*/for(let [__proto__, __noSuchMethod__] = (new ((function::__parent__ = window).throw(4.))(<><xxx>{prop}</xxx></>)) in (window['__proto__'] = __parent__.(<y><z/></y>))) /*infloop*/M:for(prototype; (yield Boolean( '' )); 3/0) {[1,2,3,4].slice }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in (prop.__iterator__ = #2=({prop: __noSuchMethod__}) >>> 1.2e3(<x/>,  '' ))) { \"\" ; }");
tryItOut("/*infloop*/while\t(<><x><y/></x></>){return prototype;\fyield true; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __proto__) export __iterator__;");
tryItOut("switch(((<x>\f<y/></x>.__defineSetter__(\"__count__\", function __parent__, prototype))))()) { case 9: return @foo;break; case 3: break; case eval(\"\", *::*): ;default: return; const prop; }");
tryItOut("M:if(undefined.unwatch(\"__parent__\") >>> this.zzz.zzz) { if (__parent__ :: (<x><y/></x>.watch(\"__noSuchMethod__\", ({}).__lookupGetter__) !=  '' .__defineSetter__(\"constructor\", -0))) {(false);\t }} else {{}const prototype = this; }");
tryItOut("M:with(null)return;");
tryItOut("if(prop) export __noSuchMethod__; else  if (<x>\t<y/></x>) yield  /x/g ; else (<x><y/></x>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (@foo)(@foo) in <y><z/></y>) {yield <><x><y/></\tx></>; }");
tryItOut("prop = __noSuchMethod__;");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, ([1,2,3,4].slice).call); (this.__defineSetter__(\"__parent__\", <y><z/></y>));  /x/  == false ^  \"\" .@foo) { }");
tryItOut("/*infloop*/M:for(new Object(*.yoyo(false), function ([y]) { }); prop = [z1]\f; <>__noSuchMethod__</>) {with({__parent__:  '' })throw *;yield; }");
tryItOut("{const __iterator__, __count__;export *; }");
tryItOut("{const <x><y/>\f</x>;const __proto__ = <><x><y/></x></>; }");
tryItOut("try { yield; } finally { yield __count__ = constructor; } ");
tryItOut("/*infloop*/L:for(function::__noSuchMethod__.__count__ = {yield null;gc() } /= false .@*::  /x/g ; (__count__ = <><x><y/></x></>); (__proto__--)[[z1,,].__defineSetter__(\"prototype\", function  prop (__proto__, __iterator__) { return [1,,] } )]) {( }");
tryItOut("L:with((this.__defineSetter__(\"__parent__\", function (__parent__) /x/ ))){{} }");
tryItOut("/*for..in*/for(let [constructor, prototype] = yield  \"\"  in [,,]) {M:with(false){const prop = 1e-81; }let __count__, function::prototype; }");
tryItOut("/*for..in*/M:for(let (Error(3 >= <x><y/></x>, false))['__iterator__'] in ({ prototype: __iterator__ }) = ({ constructor: __parent__, __noSuchMethod__: function::__noSuchMethod__ })) {__count__ = *, __proto__ = <><x><y/></x></>;;/*for..in*/for(let __iterator__ in ((function  __iterator__ ()@foo)(__proto__ = <><x><y/></x></>)))return; }");
tryItOut("(new ([1,2,3,4].map)(*::*)).__defineSetter__\n");
tryItOut("do {export __proto__;gc() } while((this.__defineSetter__(\"__proto__\", gc)) && 0)");
tryItOut("if((<y><z/></y>).__defineSetter__ = #3={a:#3#}) ;export __iterator__; else  if ((( \"\" [__count__ =  '' ;]) , #0=[this])) {} else {export *;/*for..in*/L://h\nfor(let __noSuchMethod__ = (()(0/0, <><x><y/></x></>)) in constructor) prototype = <x/>, __count__; }");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = (({}).__lookupGetter__)((3.141592653589793[<><x><y/></x></>]), <y><z/></y>) in <><x><y/></x></>) {undefinedconst __noSuchMethod__; }");
tryItOut("if(window ? this.zzz.zzz : !(let (__parent__ = constructor, prototype = <x/>)  /x/g )) { if (this.__defineGetter__(\"__iterator__\", throw StopIteration;)) /*infloop*/for(<><x><y/></x></>;  \"\" ; *) export prop;} else {if(prop\f = -1) {return; } else { /x/ ;<><x><y/></x></>; } }");
tryItOut("let (__noSuchMethod__ = <><x><y/></x></>, __proto__) { let __parent__ = __proto__ = <><x><y/></x></>, prop; }");
tryItOut("/*for..in*/L:for(const __proto__ in ((function (constructor) )(*)))yield  \"\" ;");
tryItOut("/*infloop*/for(var __noSuchMethod__; [15,16,17,18].sort(<x><y/></x>, <y><z/></y>); this.__defineGetter__(\"prototype\", (__parent__).watch)) eval");
tryItOut("if(prototype = @foo <<= (*::* >>= __noSuchMethod__)) { if (undefined) {{} }} else {var __noSuchMethod__, constructor; }");
tryItOut("if( /x/g ) {return;return; } else gc()");
tryItOut("{{}\n{}\n*::*; }\nif(<x><y/></x>--) { if ((__count__ = window)) {{}return; }} else /a/gi\n");
tryItOut("if(@foo.__defineSetter__(\"prototype\", window)) { if (@foo >>>=4.) __parent__; else with({}) var constructor = 4.;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in ) {yield; }");
tryItOut("return\n");
tryItOut("let (constructor =  /x/g  |= __noSuchMethod__ = export *;) { gc() }");
tryItOut("with(__iterator__ | function(id) { return id }){return;0.1; }");
tryItOut("/*infloop*/L:while(-*)({}).__lookupGetter__");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("yield <><x><y/></x></>;");
tryItOut("with({}) { throw <><x><y/></x></>; } ");
tryItOut("with(this){break L;{} }");
tryItOut("return; const __noSuchMethod__;");
tryItOut("{return;\f }");
tryItOut("{switch((\t033--) >>= __iterator__.__count__) { default: with({__count__: delete.prototype = new Error( /x/ )})constructor = __parent__;\fbreak; case 5: case this.zzz.zzz: if((* ? arguments : prototype)) do {gc(){} } while(((prototype =  \"\" )\f) && 0)\n } }");
tryItOut("if((false.constructor)) {gc() } else null\nvar __proto__;");
tryItOut("{}");
tryItOut("do /*infloop*/for(var prop = this; -1; (function ([y]) { })()) {break L; } while((*) && 0);");
tryItOut("/*for..in*/M:for(const [__count__prop] = __iterator__  in ) {export *; }");
tryItOut("if(prop) {return; } else  if (({__proto__: <x/>, __count__: <y><z/></y> })) {throw 3.141592653589793; }");
tryItOut("if((<x><y/></x>.valueOf(\"number\"))) { if ((('haha'.split).call((p={}, (p.z = 0.1)()), <><x><y/></x></>))) throw [z1,,];} else ");
tryItOut("switch(window(<x/>, false) in ) { default: case 3: let (({ __count__: ({ __count__: __noSuchMethod__, prototype = *::*: __iterator__ }), __iterator__: [__count__, __parent__, __count__, function::__iterator__] }), [] = constructor.__count__ =  '' ) { /*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in #3={a:#3#}) <x><y/></x> }break;  }");
tryItOut("try { export *; } finally { ; } ");
tryItOut("/*infloop*/for([({ __noSuchMethod__: ({ prop: __count__, __noSuchMethod__: [({ __iterator__: ({ __iterator__: __parent__, __parent__: prototype }), prototype: constructor }), , ] }) }),  /* Comment */<><x><y/></x></>, constructor.__noSuchMethod__, , ] = Array(__proto__, (null.unwatch(\"__parent__\") -= (__parent__ = window) , new (window).__defineSetter__((-0) -= this, <x></</x>))); __noSuchMethod__; yield <x><y/></x>.unwatch(\"prop\")) {{}var prop = window; }");
tryItOut("prototype = __iterator__;");
tryItOut("M:if((constructor = <x><y/></x>)) {export prototype;yield;\f }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__.__iterator__ in 3.141592653589793++.@foo) return ;");
tryItOut("/*infloop*/while( { yield (\f(\ntypeof 033)) } ){(<x/>);; }");
tryItOut("/*for..in*/M:for(__parent__ = this.__parent__ in 0) {let __iterator__ = 1.3; }");
tryItOut("with({__count__: (__iterator__ = ())})/*infloop*/L:for(const ({ prop: __parent__.__parent__, constructor: __count__ }) = __proto__ = 1e+81.@foo\n; new function(y) { yield y; /*for..in*/for(let __iterator__ in (((<><x><y/></x></>).__defineSetter__)(<><x><y/></x></>))){(); }; yield y; }().__defineGetter__(\"prototype\", undefined.__lookupGetter__(\"__iterator__\")); ( '' )( \"\" .__iterator__)) {return; }");
tryItOut("/*infloop*/for(undefined; [11,12,13,14].filter; <x><y/></x> < [1]) {export prop; }");
tryItOut("M:switch((__proto__.__iterator__ getter= __noSuchMethod__)) { default: case <><x><y/></x></>.constructor: break ;break;  }");
tryItOut("switch(this) { default: case Date(): break;  }");
tryItOut("");
tryItOut("L: {let (constructor) { let __noSuchMethod__, prototype = 1.2e3; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (<><x><y/></x></>)(<x><y/></x>) in __count__ = <x><y/></x>) let __count__ = <x><y/></x>, prop;");
tryItOut("switch(this) { case 2:  }");
tryItOut("if(__noSuchMethod__) { if (<><x><y/></x></>) \f{gc()gc() }} else {eval }");
tryItOut("/*for..in*/for(var __iterator__ = (/a/gi)() in 3.141592653589793) {with({constructor:  /x/g }){throw <y><z/></y>;; }yield; }");
tryItOut("L: {let __noSuchMethod__, __parent__;var prototype, prop; }");
tryItOut("M:with({__noSuchMethod__: __count__ = *.__lookupSetter__(\"prototype\")})yield this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in this) __iterator__;");
tryItOut("[,];");
tryItOut("/*for..in*/for(var prop = ({ __parent__: __iterator__, prototype: ({ __proto__//h\n: __parent__ }) }) = this.@foo in yield [1] , (new function (__proto__)[](({__noSuchMethod__: {}, prototype setter: (1 for (x in [])) }), true))) /*infloop*/for( \"\" ; (<y><z/></y>.@foo); <><>yyy</><!--yy--> </>) throw ({a2:z2});");
tryItOut("if( /x/g ) {throw <><x><y/></x></>; } else  if (false) {export *;\tprototype = __parent__; } else {export __proto__;export __iterator__; }\nif(<y><z/></y>) { if (<x><y/></x>) const  ; else __parent__;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var this.prototype in <y><z/></y>) {} const __parent__;");
tryItOut("with([, ({ __iterator__: [], __proto__: ({ 4.: __parent__, function::prop: __parent__ }) }), ({ __parent__: ({ __parent__: __noSuchMethod__ }), __noSuchMethod__: function::function::__proto__ })] = __parent__ = <y><z/></y>){with(new function  __proto__ (prop) { yield (-1) } (__proto__, <><x><y/></x></>))yield; }");
tryItOut("/*infloop*/while((__noSuchMethod__)[(*.@*)]){}");
tryItOut("/*infloop*/for(const __iterator__; #1=({__count__: <x><y/></x> % <y><z/></y>}); constructor.__iterator__ = ([1,2,3,4].map).call(null, *, constructor)) yield;");
tryItOut("switch(window) { case *::*: default: case <x><y/></x>: break; yield;break; case 1: function  prototype (__parent__)constructorbreak; case 8: ;break;  }");
tryItOut("{for(let y in []); }");
tryItOut("return;");
tryItOut("/*for..in*/M:for(const [__proto__, __count__] = (<y><z/></y>++.__proto__) in (<><x><y/></x></>)(this)) {export *;<y><z/></y>; }");
tryItOut("/*for..in*/for(const [__parent__, prototype] = true in <y><z/></y>) {throw arguments; }");
tryItOut("while((<x><y/></x>.([z1,,]) .@x:: (undefined\n)) && 0)return (({}).__lookupGetter__).call;");
tryItOut("with((--<x/>))var prop = <x/>; const prototype");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in this) {yield; }");
tryItOut("/*infloop*/for(const [__iterator__] = @foo[<y><z/></y>].@foo; ~<x/>; 0.1) export *;");
tryItOut("/*for..in*/for(let prop = <x><y/></x> in  \"\" ) throw window; const __count__;");
tryItOut("for(let y in [5,6,7,8]) return  '' ;\nprop, __proto__;\n");
tryItOut("with({__noSuchMethod__: ({ __proto__: __count__ }) = constructor.watch(\"__noSuchMethod__\", new Function)}){L:if((function::__count__).__defineSetter__(\t\"__proto__\", /a/gi)) export __iterator__; }");
tryItOut("M:with({__iterator__:  /x/g }){let __parent__; }");
tryItOut("if(this.__defineGetter__(\"__proto__\", ((1 for (x in []))).call)) const __parent__, __noSuchMethod__; else yield;");
tryItOut("var __proto__ =  /x/g , __proto__ = {}\n");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("break \n");
tryItOut("with({__noSuchMethod__: <y><z/></y>})yield;");
tryItOut("yield this.zzz.zzz;");
tryItOut("while(([(1.2e3.throw(-0))(@foo)]) && 0){export prototype\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in __iterator__) {{} } }");
tryItOut("while((\n<x><y/></x>) && 0){<x><y/></x>;continue ; }");
tryItOut("do {if((<x/>)()) yield <x/>; else  if (function(id) { return id }\n) yield (-1); } while(((__count__ = ([11,12,13,14].map))) && 0);");
tryItOut("/*for..in*/for(prototype in ((new Function)((new *()).throw(( ''  :: #1#)))))throw *;\nreturn;\n\n1.3;\n");
tryItOut("this.zzz.zzz;");
tryItOut("yield window;");
tryItOut("yield window;");
tryItOut("L: ");
tryItOut("/*infloop*/L:do __noSuchMethod__ =  { return constructor } ; while(<x><y/></x>[__count__]);");
tryItOut("if(new (([ /x/  ? 1e+81 : this]))(__parent__ = eval(\"(<y><z/></y>);\", *), new function (function::__iterator__, __noSuchMethod__) { gc() } (__noSuchMethod__))) { if ((this = *)) __parent__; else yield;}");
tryItOut("if(<x><y/></x>--) { if (4.) {{}(this); } else {<y><z/></y>{} }}");
tryItOut("/*for..in*/for(let __proto__ = (__parent__.prototype setter= Math.pow) in <y><z/></y>) ");
tryItOut("with( set __count__(__parent__, __iterator__) { yield (__parent__ =  /x/g --) } ){var __parent__, __iterator__; }");
