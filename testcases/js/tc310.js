tryItOut("return (this.zzz.zzz)\n");
tryItOut("/*infloop*/for(const __iterator__; this.__defineSetter__(\"__count__\", <x><y/></x>)\n; yield <y><z/></y>) /*for..in*/L:for(var [__proto__, __count__] = false in *) return this;");
tryItOut("return;");
tryItOut("L:if([ /x/ ]) {} else {var null;(true); }");
tryItOut("with({__parent__: eval(\"M:with(0.1){export *;return; }\", ( /x/ ))})\r{M:with(<><x><y/></x></\n>){undefined;export *; } }");
tryItOut("/*infloop*/do /*for..in*/for(let prototype in ((Math.sin)(delete ({})))){const __noSuchMethod__;<y><z/></y>; } while(yield.constructor getter= gc);");
tryItOut("with( /x/g ){#1#; }\nthrow __count__;");
tryItOut("/*infloop*/for(let prototype = <y><z/></y>; yield undefined ? __proto__ = <x/> : window;  /x/ ) function (__count__, prop) { return *::* } ");
tryItOut("let (__proto__) { {} }/*infloop*/for(const ({ prototype: x::__iterator__ }) =  '' ; ( \"\"  ?  ''  : constructor); Date()) let __parent__ = <x/>, \f<x><y/></x>;");
tryItOut("return <><x><y/></x></>;\nreturn;\n const __iterator__;");
tryItOut("break ; const __parent__;");
tryItOut("L: {return []{} }");
tryItOut("let (__proto__, __count__ = *::*) { /*for..in*/for(var constructor in ((Math.sin)([z1]))){; } }");
tryItOut("\n");
tryItOut("/*infloop*/M:for(3; getter; [11,12,13,14].map) {prop;{} }");
tryItOut("if(([1,2,3,4].slice)()) return <y><z/></y>;");
tryItOut("{{return;Math.sin } }");
tryItOut("do 0; while(( '' ) && 0);");
tryItOut("if((__parent__.isPrototypeOf(<x/>))) ");
tryItOut("try { with({}) { return; }  } catch(prototype) { this.zzz.zzz; } ");
tryItOut("yield @foo;");
tryItOut("L:if(window.prop) { if ((prototype = <y><z/></y>)) {export *;let __noSuchMethod__; } else continue M;}");
tryItOut("do {throw <><x><y/></x></>;__proto__ } while((<><x><y/></x></>) && 0);\n<x><y/></x>\n");
tryItOut("this.zzz.zzz;");
tryItOut("while(((null.__lookupSetter__(\"__count__\"))) && 0){const __iterator__ = <x/>;constructor, __proto__ = <y><z/></y>; }");
tryItOut("let(prop, [x::__iterator__, ( /* Comment */\r@foo)([z1,,]), , ({ constructor: constructor }), ]) { try { .2 } catch(__proto__) { try { this.zzz.zzz; } finally { let(prototype, __parent__ = false) { for(let y in [5,6,7,8]) ; }  } ");
tryItOut("return;");
tryItOut("/*infloop*/do break M; while((this.__defineSetter__(\"__noSuchMethod__\", (window).watch)));");
tryItOut("if(({constructor: <><x><y/></x/*\n*/></>[0x99] })) {var __parent__; }");
tryItOut("if((<x><y/></x> >= <x><y/></x>).__noSuchMethod__) { if ((#3={a:#3#}.unwatch(\"__parent__\"))) {throw true; }} else {return constructor;continue L; }");
tryItOut("{if( '' ) (undefined); else  if (4.) {return; }return [z1]; }");
tryItOut("M:switch([z1].propertyIsEnumerable(\"__iterator__\").throw(<x><y/></x>)) { default: case (1e-81).call(prop = *::*,  /x/ .__defineGetter__(\"__noSuchMethod__\", <y><z/></y>)): with((<><x><y/></x></> - <x/>)){}break; export *; const __noSuchMethod__;break; case (prop.prop = true): (({a2:z2})); }");
tryItOut("M:if(((3/0))) ; else  if (<!--yy-->) { }");
tryItOut("let (__iterator__) { __proto__ = prop; }");
tryItOut("M:with({__iterator__: eval(\"window\",  /x/ )}){var __proto__, prototype\n/*for..in*/for(let [constructor, __parent__] = <><x><y/></x></> in <><x><y/></x></>) yield [z1]; }");
tryItOut("if(new (void __noSuchMethod__ < (@foo == __iterator__))(this.__defineGetter__(\"__proto__\", gc) != (<><x><y/></x></> <<= ({a1:1})), yield)) { if (\t(function ([y]) { })()) __count__ = __iterator__;} else {yield;continue M; }");
tryItOut("{/*for..in*/L:for(let [constructor, __iterator__] = this in constructor) {(*);export *; } }");
tryItOut("/*infloop*/for(__proto__; ();  '' ) export prototype;");
tryItOut(";");
tryItOut("{}\nthrow <x><y/></x>\nyield <x><y/></x>;");
tryItOut("/*for..in*/for(const ((prop.__iterator__ setter\f= Function)(null)) in (((this.zzz.zzz))((delete ([15,16,17,18].filter( \"\" , __proto__)).@* !== __count__(<><x><y/></x></>) = __count__ = let == *::* ? 1.3 += 1e4 : [(*::*++) for (prop in @foo) if (undefined)])))){for(let y in [5,6,7,8])  }");
tryItOut("if(__iterator__) {gc()prototype, prop = *; } else  if (prop.constructor = *) {yield __noSuchMethod__; }");
tryItOut("return;");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in <><x><y/></x></>) {return __count__;(__count__); } while(__iterator__.prototype getter= ({}).__lookupGetter__.__lookupGetter__(\"prop\"));");
tryItOut("let (__noSuchMethod__) { __parent__ }");
tryItOut("{{} }");
tryItOut("/*infloop*/for(<{__count__}></{__count__}>.(@foo); ({prototype:  '' .isPrototypeOf(<y><z/></y>) }) ? __iterator__ = __proto__.__parent__ = <x/> : <>(__iterator__.(__proto__))</>; new function(id) { return id }()) ");
tryItOut("for(let y in [5,6,7,8]) __iterator__: <><zzz><><x><y/></x></></zzz></>");
tryItOut("if([(gc())].sort(eval)) { if (this.zzz.zzz) <y><z/></y>;} else {(__noSuchMethod__);export __parent__; }");
tryItOut("/*for..in*/for([__proto__, __count__] = <x/> in window) throw [1];");
tryItOut("M:do gc() while(((Function(<><zzz> /x/ </zzz></>, true))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in __proto__) {export prop;gc() }");
tryItOut("/*infloop*/do { } while((p={}, (p.z = {})()).watch(\"constructor\", function  constructor (({ __noSuchMethod__: __proto__, __parent__: __parent__ })) { return 3 } ).eval((<x><y/></x>.hasOwnProperty(\"__parent__\") for (__iterator__ in (constructor.(prototype))) for each (__count__ in <x><y/></x>))));");
tryItOut("return;");
tryItOut("{yield;{} }");
tryItOut("/*infloop*/while((new Function(#1=[#1#])))gc()");
tryItOut("let(__count__ = @foo, __iterator__ = <><x><y/></x></>) ((function(){ '' ;})());");
tryItOut("/*infloop*/for(let __count__; 5.0000000000000000000000; (3)(#0=({__iterator__: __iterator__}),  \"\" )\t) <><x><y/></x></>;");
tryItOut("return;\nreturn __parent__;\n");
tryItOut("try { this.zzz.zzz; } finally { return (\f[15,16,17,18].map(<x><y/></x>, <><x><y/></x>\t</>)).__lookupGetter__(\"__count__\"); } ");
tryItOut("with({prototype: *::*})const __parent__ = 1.2e3, __parent__;");
tryItOut("for(let y in []);");
tryItOut("var __count__, __iterator__; const __parent__;");
tryItOut("/*infloop*/L:for(var constructor; (*.prop = <x><y/></x>); ((<x/>)((#2=[[1,,]] /=  '' ), constructor.constructor) for (prop in ({ if (__proto__), constructor getter: <x/> })))) /*for..in*/for(const prop in ((eval)((function(id) { return id } &= <y><z/></y>) += ((function (__proto__) { return (function ([y]) { })() } )( /x/ )))))export constructor;");
tryItOut("let(prop, yield) ((function(){let(prototype = __noSuchMethod__, constructor = (eval(\"(<x><y/></x>.@foo.yoyo((__proto__.__parent__).@*))\", (function::prop = try {  } catch(prop if (function(){__iterator__ = this, __parent__ = window;})()) { export *; } catch(prop) {  for (constructor in <y><z/></y>) } finally { {} } , __iterator__ =  ''  = __noSuchMethod__)([[1]], (yield  \"\" )))).watch.throw()) ((function(){let(__noSuchMethod__, (__noSuchMethod__) = this.zzz.zzz) ((function(){throw constructor;})());})());})());");
tryItOut("return <x><y/></x>;\nexport __noSuchMethod__;\n");
tryItOut("L:with(__parent__.(true).throw(window\f .@*:: 033))function (constructor, prototype) { yield <><x><y/></x></> } ");
tryItOut("{export __iterator__;(window); }");
tryItOut("L:if(((prop = *)(( \"\"  == [z1,,])))) {throw arguments; } else {gc()return __proto__; }");
tryItOut("/*infloop*/for(__parent__ = 'fafafa'.replace(/a/g,  /x/ ); (__count__.__parent__ getter= <x><y/></x>[ /x/ ]); (yield (<><x><y/></x></> if ( /x/ )))['prop'] = __parent__.(3/0)) with({__count__: 'fafafa'.replace(/a/g, prop).__parent__}){/*infloop*/for(<y><z/></y>; <><x><y/></x></>; <x><y/></x>) (<x/>); }");
tryItOut("L: {return undefined; }");
tryItOut("/*infloop*/while(<x/>)continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in ((-1).__defineSetter__(\"__count__\", (1 for (x in []))))) {const __noSuchMethod__, __noSuchMethod__ = <x/>; }\n");
tryItOut("/*for..in*/for(prop = (0.1.__proto__) in true) {let constructor, prop; }");
tryItOut("L: export *;");
tryItOut("M:if([] = ((p={}, (p.z = @foo)()))) {const __iterator__, prototype;{{} } } else {(<><x><y/></x></>); }");
tryItOut("try { throw StopIteration; } catch(__count__) { with({}) { __noSuchMethod__ = __iterator__; }  } finally { let([] = <>yyy<>, __iterator__ = (let (__iterator__)  /x/g  , (*::*.yoyo( /x/ )))) ((function(){__noSuchMethod__ = __parent__;})()); } ");
tryItOut("throw <x/>;");
tryItOut("let(constructor) { return <x><y/></x>--;");
tryItOut("return window;");
tryItOut("export __count__;");
tryItOut("yield void []\n.constructor;");
tryItOut("with({}) { let(__iterator__ = this) ((function(){continue ;})()); } ");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(__count__ setter: function  __noSuchMethod__ (__parent__, __count__) { yield (prototype = ({ ({ prototype: prop }): __noSuchMethod__, __count__: ({ __proto__: new /a/gi(), __proto__: constructor }) })) } ; this.__defineGetter__(\"__count__\", null); __noSuchMethod__) {/*infloop*/while((function::__proto__ =  /x/g ))export x::__proto__;let (__proto__, __iterator__) { ; } }");
tryItOut("let (({ constructor: __noSuchMethod__, __noSuchMethod__: __noSuchMethod__ }) = constructor, __parent__ = true) { /*for..in*/for([__iterator__, __parent__] =  \"\"  in <x><y/></x>) {} }");
tryItOut("(<><x><y/></x></>);");
tryItOut("/*infloop*/M:do {export constructor;export *; } while(prop.__noSuchMethod__ setter= gc);");
tryItOut("with((__parent__ = \t__noSuchMethod__))var constructor, prototype = this;");
tryItOut("export *; const constructor;");
tryItOut("export *;");
tryItOut("while(([,,] .. <x><y/></x>) && 0)const __count__, __proto__ = undefined;");
tryItOut("M:switch((<y><z/></y>.throw(undefined) << __noSuchMethod__ = <\t><x><y/></x></>).propertyIsEnumerable(\"__noSuchMethod__\")) { case 7: break; default: break; case 4:  }");
tryItOut("M:with((prototype.constructor = 0.1))/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in 0/0) {yield; }");
tryItOut("\t{with(<x><y/></x>){\n(.2).__defineSetter__ } }");
tryItOut("if(<><x><y/></x></>([z1,,], *)) { if (<><x><y/></x></>.@foo) return <y><z/></y>;} else {yield  '' ; }");
tryItOut("/*infloop*/while(try { throw StopIteration; } catch(__noSuchMethod__) { function::__noSuchMethod__ = __noSuchMethod__; } finally { for(let y in []);\t } )prop, __proto__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const this |= [,,z1] in (prop = <x/> .. this.__defineGetter__(\"__noSuchMethod__\", function (prototype, __parent__) { yield <x><y/></x> } ))) {/*infloop*/for(var [prop, __parent__, , ] = ({__count__: <y><z/></y>}); <x><y/></x>.__lookupGetter__(\"__proto__\"); (false !== <y><z/></y>)) {export *; } }");
tryItOut("/*for..in*/for(const __iterator__ = prototype = prototype | <><bbb \fxmlns=\"#1=[#1#]\"><x><y/></\fx>yyy</bbb></>\n in (yield <y><z/></y>).__iterator__ = prop.__lookupSetter__(\"__proto__\")) {M:if( \"\" ) {} else throw false; }");
tryItOut("while(((function ([y]) { })() && <x/>) && 0){export *; }");
tryItOut("if( '' ) {throw setter;<><x><y/></x></>; } else  if (*::*) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <><x><y/></x></>\t) {yield;return  /x/ ; }break ; }with( /x/ ){yield  /x/ ;return; }");
tryItOut("/*infloop*/__parent__");
tryItOut("/*for..in*/L:for(var (__iterator__.__iterator__ = ([*].filter(Math.pow)))( '' ) in new (((<x><y/></x> %= 0)function  __count__ (constructor) { return [[1]] } ).call)((eval(\"<x><y/></x>\", this)), this)) /*infloop*/L:do {({});let ; } while(([1,2,3,4].map).call([,,], [[]], 3));");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in ((#2= /x/g )(<x/>))){var __parent__, __iterator__ = <><x><y/\t></x></>;export __parent__; } const __iterator__;");
tryItOut("{return <y><z/></y>;gc() }\n");
tryItOut("prototype = this, __noSuchMethod__ = prop\n const prototype;");
tryItOut("if(0) { if (1.3) yield <><x><y/><\t/x></>; else {continue ; }}");
tryItOut("if((1e4.watch(\"constructor\", new Function))) { if ((yield  /x/g )\n) yield; else return;}");
tryItOut("/*infloop*/for(let __iterator__; 0.1; ({ '' : <x><y/></x>, __parent__: this })) {__proto__ = <x><y/></x>;return <x><y/></x>; }");
tryItOut("if({}) {#3={a:#3#}; } else  if ( '' ) {export *;export prop; } else {const __parent__;var __noSuchMethod__; }");
tryItOut("{/*for..in*/for(const __noSuchMethod__ in  /x/g ) const constructor = <x><y/></x>;{} }");
tryItOut("/*infloop*/for(get;  '' ;  '' ) {let prototype, {} = __proto__; }");
tryItOut("__proto__;");
tryItOut("__proto__");
tryItOut("if(({})\n) { if (<y><z/></y> -  '' ) break ; else continue ;}");
tryItOut("{}");
tryItOut("/*for..in*/for((<x/>)(constructor) in __proto__) {with(yyy)const __proto__;throw <x/>; }");
tryItOut("if((prototype = __proto__ = false)) yield <y><z/></y>; else  if (undefined) {gc() } else {/*infloop*/L:for([,]; __parent__-=prototype; (({}).__lookupGetter__)(*, *::*)) ; }");
tryItOut("prop");
tryItOut("/*for..in*/for(__iterator__ in ((function(y) { yield y; L:if(this.zzz.zzz) { if () {return window; }} else {throw [1]; }; yield y; })([z1])))switch(*::*) { case 4: break;  }");
tryItOut("return <y><z/></y>;");
tryItOut("L: ;");
tryItOut("/*for..in*/for(constructor in  '' ) break ;");
tryItOut("{return ({});return <x><y/></x>; }\nexport __noSuchMethod__;\n");
tryItOut("with(__iterator__ = <><x><y/></x></>)export __iterator__;");
tryItOut("/*for..in*/for(var constructor in ((((eval(\"const __proto__, __iterator__;\", function::prop =  \"\" ))).__defineSetter__)(window.__proto__ = (({ __proto__: prop, __noSuchMethod__: __parent__ }) = (false)[__iterator__]))))<><>(constructor.((eval(\"__iterator__ = <x><y/></x>\", this.isPrototypeOf(undefined)))))</></>");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("return;\n/*infloop*/M:do {/a/giyield; } while(<x><y/></x>.( /x/ ));\n");
tryItOut("/*for..in*/for(const [__count__, __proto__] = (yield default: break; break; case 9: L:if(new (function  __count__ () { ; } )(<><x><y/></x></>, this)) if(false) {export __count__; }case 0: let (prototype = [1,,]) { throw *; }break; return;) in ((1.2e3.valueOf(\"number\")).* = ({function::constructor: *,  get __proto__() { yield <><x><y/></x></> }  }))) yield *\n");
tryItOut("/*infloop*/for(const ({ __proto__: [, constructor], __parent__: __noSuchMethod__ }) = window == [[1]]; ({prop: eval(\"[[1]]\", <><x><y/></x></>)});  \"\" ) break ;");
tryItOut("L:if(__parent__) { if (#1=[#1#]) gc()} else continue M;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = (__iterator__\t %= null) in [11,12,13,14].some) /*infloop*/while(<><x><y\f/></x></>)return;");
tryItOut("/*infloop*/L:for([({ prop: ({ __noSuchMethod__: prototype }), __iterator__: ({ function::__proto__: constructor }) }), ({ constructor: ({ __count__: __parent__, __parent__: constructor }) }), ] = String(); (__parent__.__proto__ = 033.__defineGetter__(\"__iterator__\", .2)); *::*\n) {}\n");
tryItOut("/*infloop*/while(eval(\"false\", undefined))//h\n{[1,2,3,4].map;( '' ); }");
tryItOut("for(let y in []);");
tryItOut("[__iterator__, ({ __count__: [] }), __noSuchMethod__, ]");
tryItOut("-1;");
tryItOut("/*infloop*/while(let (__noSuchMethod__, __count__) [1e81].*.eval(return <x><y/></x> >> [__iterator__, , __noSuchMethod__] = <><x><y/></x></>)){(arguments);{} }");
tryItOut("let __proto__;((prop = <y><z/></y>));");
tryItOut("/*for..in*/for([constructor, __parent__] = null in 0.1) {break ; }");
tryItOut("/*infloop*/while(yield \f<x><y/></x>)export *;");
tryItOut("/*infloop*/for(const prototype; [15,16,17,18].sort(function(y) { yield y; window;; yield y; }, *::*); -1) {yield;export *; }");
tryItOut("gc()");
tryItOut("/*infloop*/while((({__iterator__: <><x><y/></x></>.__proto__ = undefined, __noSuchMethod__: __parent__ = window }))){/*infloop*/do ( \"\" ); while(null); }");
tryItOut("/*infloop*/M:while(true)return  \"\" ");
tryItOut("throw prop;");
tryItOut("/*infloop*/while(<y><z/></y>){yield constructor;with(this.__defineSetter__(\"__noSuchMethod__\", Math.pow)){export __noSuchMethod__; } }");
tryItOut("throw <x><y/></x>;\nreturn;\n");
tryItOut("L:switch((p={}, (p.z = <><x><y/></x></>)())) { default: /*infloop*/for(__proto__; <><x><y/></x></>; arguments) const __count__, __proto__;break; case 7:  for each (constructor in true for (__noSuchMethod__ in  \"\" )) if (<><x><y/></x></>)break; break;  }");
tryItOut("if([false]) yield; else  if (<x/>.__defineGetter__(\"prop\", function () { var prop = arguments, __parent__ = @foo; } ) <<=  '' ) while((constructor) && 0){export __iterator__;/a/gi } else {yield 1e-81; } const __count__;");
tryItOut("/*infloop*/for(<y><z/></y>; <><x><y/></x></>; *::*) yield;");
tryItOut("this.zzz.zzz;");
tryItOut("with({__iterator__: prop = <><x><y/></x></>}){const __proto__ = {};throw <x><y/></x>; }");
tryItOut("/*infloop*/do {while((prototype) && 0)continue L; } while(\n<bbb xmlns:ccc=\"(let.(__parent__.(<x/>)))\"><ccc:eee></ccc:eee></bbb>);");
tryItOut("/*infloop*/M:do { /x/ ;#1#; } while((constructor.__iterator__ = <x/>.__lookupGetter__(\"__parent__\"))());");
tryItOut("/*infloop*/M:for(__iterator__; (([11,12,13,14].map)--); ((Function).call( '' , ))(arguments)) let __noSuchMethod__;");
tryItOut("if(<x/>) yield false; else return;");
tryItOut("{L: (this.hasOwnProperty(\"constructor\"))\t; }");
tryItOut("if( '' ) {var prototype = undefined, prototype = <><x><y/></x></>;(0/0); }");
tryItOut("yield;");
tryItOut("/*infloop*/while( '' ['x::prototype'] = __noSuchMethod__ == <x/>)gc()");
tryItOut("with({prop: <>(({__count__: <y><z/></y>}))</>}){}");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("{/*infloop*/L:for(const __iterator__ = []; *; this) let __iterator__ = [z1];return *::*; }");
tryItOut("/*infloop*/L:while(<x/> :: prototype = <x><y/></x>){let __parent__;{export __proto__\t;let __parent__, __proto__ = <><x><y/></x></>; } }");
tryItOut("with({}) __iterator__.prop = prop;");
tryItOut("/*infloop*/for(var __parent__; ([[11,12,13,14].map])[__parent__[window] ? __iterator__.prop = <x><y/></x> : (<><x><y/></x></>.isPrototypeOf(*))]; <bbb xmlns:ccc=\"prop.propertyIsEnumerable(\"__parent__\")\"><ccc:eee></ccc:eee></bbb>) return <y><z/></y>");
tryItOut("with({constructor: function  __parent__ (prototype, prop)<x>/*\n*/<\ty/></x>(yield <y><z/></y>)})return;");
tryItOut("L:if(([<><x><y/></x></>].filter((({}).__lookupGetter__).call))) __noSuchMethod__ = <x><y/></x>;");
tryItOut("yield (function ([y]) { })();");
tryItOut("if(this) {} else {;export *; }");
tryItOut("__count__let (__parent__ = ) { return; }");
tryItOut("const __proto__ = <x><y/></x>;");
tryItOut("M:if((*::*.constructor).__defineGetter__(\"__parent__\", function(q) { return q; })) { if (((yield  /x/ ))) {/a/gireturn; }} else export *;");
tryItOut("M:if() {/*infloop*/do return  /x/g ; while((({ __noSuchMethod__: __iterator__ }) = (__count__-=__noSuchMethod__) %= __iterator__));/*infloop*/L:do { } while(1e+81); }");
tryItOut("{ if (Iterator(#0=[ /x/ ])); }");
tryItOut("switch(++__parent__.__noSuchMethod__ getter= ({}).hasOwnProperty[0/0 ? <x><y/></x> : \f<x><y/></x>]) { case ( '' )(<x/>, <y><z/></y>):  }");
tryItOut("if(({ set __iterator__ __proto__ (__parent__, __iterator__) { yield \fprototype >>>=true } , prototype: *.eval(this) })) {; } else {(*::*);return <x/>; }");
tryItOut("/*infloop*/do {\n } while();");
tryItOut("/*for..in*/M:for(var [constructor, __iterator__] = (uneval((__count__.(<x><y/></x>)))) in 1e+81) yield\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in __parent__) constructor = , __noSuchMethod__;");
tryItOut("export *;");
tryItOut("yield  /x/  .@x:: 4.;");
tryItOut("L:if((uneval(<x><y/></x>)) /= this.__defineSetter__(\"__count__\", <><x><y/></x></>)) { if (((uneval( ))).unwatch(\"__noSuchMethod__\")) {export let\n{}continue L; } else switch(<><x><y/></x></>) { default:  }}");
tryItOut("with( '' )");
tryItOut("/*for..in*/for(prototype in ((((({}).__lookupGetter__).call).apply)((__parent__ << [[]] <<= ({}).hasOwnProperty(null, <x><y/></x>)))))([z1,,]);");
tryItOut("/*infloop*/for(var __iterator__ = ({ set constructor __iterator__ (__parent__) { return @foo }  }).unwatch(\"constructor\"); 1e+81; this.__defineGetter__(\"prototype\", 'haha'.split)) {__proto__, __noSuchMethod__; }");
tryItOut("{return;/*for..in*//* nogeckoex bug 349964 */ for  each(let /*\n*/__parent__ in [,,z1]) L:if(<y><z/></y>) {/a/gi } else  if (*::*) var __count__ = prototype; }");
tryItOut("let <x><y/></x>;\nvar \tprototype, prototype;\n");
tryItOut("__iterator__ = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in .2) (new Function(\"let __parent__;\"))");
tryItOut("do ; while((undefined) && 0);");
tryItOut("yield this || <y><z/></y>;");
tryItOut("/*infloop*/L:for(let prop; (new Function)(); #1=[3.141592653589793]) true;");
tryItOut("if(('fafafa'.replace(/a/g, function  prototype () { const __noSuchMethod__; } ))) return; else {prototypewhile((undefined) && 0){} }");
tryItOut("M:switch(this.__defineSetter__(\"prototype\", function  __noSuchMethod__ () { yield (x::* = <><x><y/></x></>) } )) { default: if((__proto__.__iterator__)) return; else  if (<y><z/></y>.__lookupGetter__(\"prototype\")) constructor else {export *;throw this; }case 3: yield;break; case 2: break; break;  }");
tryItOut("if( \"\" .__defineSetter__(\"prop\", ({}).hasOwnProperty)) {return null;yield; }");
tryItOut("/*infloop*/while(prototype){\f{} }");
tryItOut("M:switch(<>\f<x><y/></x></>.prop) { default:  set __parent__() { yield <x><y/></x> } break;  }");
