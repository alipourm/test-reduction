tryItOut("let (<y><z/></y>, @foo = let (__count__) __noSuchMethod__, __iterator__) { /*for..in*/L:for([__proto__, __noSuchMethod__] = *::* in @foo) export *; }");
tryItOut("/*for..in*/for([1,,]['constructor'] in [1,2,3,4].map(false, undefined)) {-- Function");
tryItOut("/*infloop*/for(let [, , ] = <><x><y/></x></> = *; (<x/> ? <y><z/></y> : <><x><y/></x></>); (p={}, (p.z =  '' )())) const __parent__, __parent__;\t");
tryItOut("break L;");
tryItOut("/*for..in*/for(var constructor in ((eval)((new RegExp( /x/g , *::*).prop).@foo))){4.; }");
tryItOut("throw StopIteration;");
tryItOut("L:with({__iterator__: ~[]})throw <x><y/></x>;");
tryItOut("if(let (__iterator__ = __noSuchMethod__)  /x/ .__defineGetter__(\"constructor\", (<x><y/></x>).__defineSetter__)) { if ([,,]) {while(((__parent__.__count__ = <y><z/></y>)) && 0)let __count__ =  /x/g , __iterator__ = <y><z/></y>; } else throw window;}");
tryItOut("throw <x><y/></x>;");
tryItOut("M:if(__count__ = ({ prototype: [[, , __count__, , ], {[1,2,3,4].map/*\n*/continue ; }, [, prototype], , [__count__, __iterator__, prop]] }) = ({ prop: __count__ })) /*for..in*/for(var __count__ = *::* in window) function  __parent__ () { ( /x/ ).__defineSetter__ }  else {(window); }");
tryItOut("with({}) for(let y in []);");
tryItOut("{} const constructor;");
tryItOut("{let prototype = prototype, __noSuchMethod__ = __count__;; }");
tryItOut("yield undefined;\nconst prop, <><x><y/></x></> = <x/>;\n");
tryItOut(" get __count__ __iterator__ (prototype) { throw __count__; } ");
tryItOut("switch(<x><y/></x> !== undefined) { case eval(\"let __iterator__ = __proto__;\", [[1]]): break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in this) /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in #1=[#1#]) return prototype");
tryItOut("L:switch(arguments) { default: if(<><x><y/></x></>) {*;const __count__ = <x><y/></x>; }break;  }");
tryItOut("{gc()const prop; }");
tryItOut("if(({__noSuchMethod__: ( /x/g (<x><y/></x>))})) {export __count__;__iterator__\nfunction  prop () { return ({a2:z2}) }  } else  if (<y><z/></y>) if(1e81) return; else  if ((<><x><y/></x></>.constructor = *)) export *;");
tryItOut("/*for..in*/M:for(let __proto__ = [11,12,13,14].filter.isPrototypeOf(__count__.throw(this)) in window.\t__defineSetter__(\"__proto__\", this)) eval");
tryItOut("L:if((({}).isPrototypeOf(<x><y/></x>))) {__noSuchMethod__ =  '' , prototype; } else  if ((<><x><y/></x></>.yoyo(<><x><y/></x></>) &= (this.unwatch(\"__parent__\")))) yield; else  { export *; } ");
tryItOut("with(new (Array( get prototype(__noSuchMethod__, __iterator__)<x><y/></x>))())L: {var __count__ = <y><z/></y>;\f }");
tryItOut("/*infloop*/L:do {L:while(( {  /x/ ; } ) && 0)/*for..in*/for(let __count__( \"\" ) in ((Math.pow)((new (<><x><y/></x></>)(constructor, <y><z/></y>)))))const __parent__, prototype; } while(({__proto__ setter: function (__count__ getter: 'haha'.split) { return this .@x:: <x><y/></x> } , __iterator__: __noSuchMethod__.prop }));");
tryItOut("if(__proto__ =  \"\" .yoyo(({default: continue L;case 9: yield;break; case <><x><y/></x></>: break; case 4: break;  \"\" ;break; case 7: break; case  \"\" : case 4: return;case <y><z/></y>: case <x><y\n/></x>: break; case 8: break; case 5: (({}).__lookupGetter__).callcase 9: ;case <x><y/></x>\t: break; break; ;break;  }))) __iterator__;");
tryItOut("");
tryItOut("/*infloop*/for( /x/g ; function(id) { return id }; this) ");
tryItOut("switch(new (({}).hasOwnProperty)()) { default:  }");
tryItOut("let(__count__ = -0) { const __noSuchMethod__ = <><x><y/></x></>, prototype = __proto__ = (<><x><y/></x>)</>;");
tryItOut("if([({a1:1})]) (<x><y/></x>); else {yield <x/>;{} }");
tryItOut("{/*infloop*/do export prototype; while(@foo); }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = (<><x><y/></x></> && <><x><y/></x></>) in prototype.__iterator__ setter= function(y) { yield y; const __parent__ = <y><z/></y>;; yield y; }) if(RangeError(<x><y/></x>)) continue ;");
tryItOut("yield;");
tryItOut("{L\f:if((prototype =  \"\" .__iterator__)) { if ( \"\" ) {let prop = (function ([y]) { })(), prototype = undefined; }} else {if(<y><z/></y>) { if (<y><z/></y>) constructor else @foo;} } }");
tryItOut("return __proto__ = this.unwatch(\"prop\").eval(window);");
tryItOut("L:if((window.propertyIsEnumerable(\"__noSuchMethod__\"))) {export prop;const prop = true, prop = [,,z1]; } else {{export __noSuchMethod__;yield false;\n__proto__ = @foo, __iterator__;\n }gc() }");
tryItOut("/*for..in*/for([prototype, prop] = ~( \"\"  :: <x/>) in __count__) {return <x><y/></x>; }");
tryItOut("gc()\n");
tryItOut("if((let = ({}).__lookupGetter__((p={}, (p.z = 0.1)()), <><x><y/></x></>))) { if (..(const __count__ = <x/>;)) {export prototype;throw prop; }} else break \n");
tryItOut("L: /*for..in*/for(var __iterator__ in 1e4) ");
tryItOut("with({constructor: new (<x><y/></x>.(<x><y/></x>))(( '' .throw(<y><z/></y>)), <x><y/></x>)}){yield; }");
tryItOut("/*infloop*/for(const [] = (return;); <>yyy</>; (new (({}).hasOwnProperty)\f((prototype ? undefined : <><x><y/></x></>.hasOwnProperty(\"__proto__\")), 3/0(<><x><y/></x></>)))) {;/*infloop*/L:for(let __parent__ = <x/>; __iterator__.__lookupGetter__(\"constructor\"); (null.__proto__ = window)(<x><y/></x>.__lookupSetter__(\"prop\"))) ; }");
tryItOut("return <><x><y/></x></>; const __iterator__;/*infloop*/for(var __iterator__; Error().__lookupSetter__(\"__proto__\"); constructor) {yield\nfunction  __parent__ (constructor) { function(q) { return q; } } false; }");
tryItOut("M:while((<><x><y/></x></> + __proto__) && 0){yield __proto__;continue M; }");
tryItOut("L: {gc() }");
tryItOut("this.zzz.zzz;");
tryItOut("if(<{ for each (prototype in __iterator__ = undefined) for each (prototype in <x/>)}></{ for each (prototype in __iterator__ = undefined) for each (prototype in <x/>)}>) { if ((let (__noSuchMethod__, prop = 0/0) <x><y/></x>\n)) } else with(<x/>){;return null; }");
tryItOut("do {let (__iterator__ =  /x/ , prop) { return undefined; }gc() } while(((true.__lookupSetter__(\"__noSuchMethod__\") && this << window) %= ({ __iterator__: [], prop: __count__ }) = __parent__ = <x><y/></x>) && 0);");
tryItOut("/*for..in*/for(var prototype = #2=({constructor: <x/>}) in __count__) yield;");
tryItOut("if(<x/> instanceof 1e81) break M; else  if (new <><x><y/></x></>) {export *; /x/g ; } else {; }");
tryItOut("let constructor");
tryItOut("L: {this;(__noSuchMethod__); }");
tryItOut("/*for..in*/for([prop, __parent__] = (({ __iterator__: prop, prototype: [, prop] }) = (1e-81 = <x><y/></x>) < (<xxx {__proto__}={constructor} />.(({__parent__: *, __parent__ setter: ((new Function(\"let constructor;\"))).call })))) in (function (prototype, __proto__) { var __parent__, constructor = *; } ).call(new ((-0))(window), ).eval(<zzz>undefined</zzz>)) /*for..in*/for(var delete in eval(\"constructor\", <><x><y/></x></>)[(\n@foo)]) {gcevalswitch([[1]] && <y><z/></y>.yoyo(__noSuchMethod__)) { default: case 0:  } }");
tryItOut("/*for..in*/for(let [constructor, __noSuchMethod__] = eval(\"3/0\", __proto__).yoyo((null @ *)) in <></>) {function(y) { yield y; /a/gi; yield y; } }");
tryItOut("M:if(__count__.__noSuchMethod__ = <><x><y/></x></>) {__count__;Function } else  if (((constructor.delete for each (__noSuchMethod__ in this) for ((<><x><y/></x></>)(<x><y/></x>) in <><x><y/></x></>) if (__noSuchMethod__)))) {/a/gi }");
tryItOut("if(<y><z/></y>) {}");
tryItOut("L:with({__parent__: [<y><z/></y> for each (__proto__ in @foo)]}) /x/g ; const __noSuchMethod__;");
tryItOut("{gc()if(undefined @  \"\" ) { if (function ([y]) { }.hasOwnProperty(\"prop\")) let __iterator__ = *::*, __iterator__ = -0; else let constructor;} }");
tryItOut("if(window) ({}).__lookupGetter__ else  if (new Array(<y><z/></y>, <><x><y/></x></>)) {with({prototype: (<x/>.yoyo(arguments)).isPrototypeOf((function  prototype () { var __proto__ = <><x><y/></x></>; } )(*, <x/>))}){L: __proto__: @foo } }");
tryItOut("M:with((<y><z/></y> instanceof false.hasOwnProperty(\"prototype\")))do yield; while((__parent__) && 0);");
tryItOut("while((constructor) && 0)");
tryItOut("/*infloop*/M:for(var [__proto__, , __iterator__, ({ __noSuchMethod__: /, __count__: __count__ }), ] = #0=function  constructor (yield) { yield <x><y/></x> } ; *.__lookupGetter__(\"__count__\"); (function::__proto__ = [11,12,13,14].filter)) {with({__noSuchMethod__: prototype = <x><y/></x>.(<y><z/></y>)})continue ;\f{} }");
tryItOut("/*for..in*/M:for([__parent__, __proto__] = @foo.prop in new Exception((prototype.isPrototypeOf(*::*)))) {if(window) export *; else  if (false) {throw prototype; } else {yield __count__; }yield this; }");
tryItOut("\ntry { window } catch(__proto__ if (function(){*::*;})()) { return <y><z/></y>; } finally { yield undefined; } ");
tryItOut("try { const __proto__ = __count__, __proto__; } finally { return <y><z/></y>; } ");
tryItOut("{yield; }");
tryItOut("let(prop, ({ __iterator__: ({ __parent__: constructor }) }) = (<y><z/></y>).call(*::*,  /x/ , this)) { with({}) yield (yield ({ set __proto__ prototype ()<x><y/></x> }));");
tryItOut("M:\fwhile((@foo.valueOf(\"number\")) && 0){/*for..in*/for(const prop = true\f in <y><z/></y>) yield;{} }");
tryItOut("let(prop, __proto__ = this) ((function(){const __proto__;})());");
tryItOut("/*for..in*/M:for(var __iterator__ in (((#1=[#1#]).__defineSetter__)(new (<x><y/></x>)().valueOf(\"number\"))))return;");
tryItOut("throw true;");
tryItOut("/*infloop*/L:while(<y><z/></y>\n){return <x><y/></x>; }");
tryItOut("__iterator__ = __parent__;");
tryItOut("{;{} }");
tryItOut("switch(<y><z/></y>) { case 1:  }");
tryItOut("if((<><x><y/></x></> for each (prototype in undefined))) {var __parent__, constructor;new Function } else {{} }");
tryItOut("let (__proto__, prop = <y><z/></y>) { \n\n }");
tryItOut("L: if([15,16,17,18].some(function  __proto__ (__noSuchMethod__)this,  /x/ )) yield this; else  if (yield <x><y/></x>) {export *; }");
tryItOut("/*for..in*/for(let (__iterator__) in {return (function ([y]) { })() for (__iterator__ in window &  /x/g ) if (__count__ &=  '' ) }) switch(({ constructor: prop, prop: __proto__ }) = *::* >>> false) { default: let __parent__ = <y><z/></y>, __proto__;case 1: break; (<x><y/></x>);break;  }");
tryItOut("/*infloop*/for( /x/g ; <><x><y/></x></>; 3/0) {let __iterator__, __noSuchMethod__; }\n");
tryItOut("yield\n;");
tryItOut("while(((p={}, (p.z = this)())) && 0)while(([15,16,17,18].sort(function  prototype (__count__) { return <x><y/></x> } , (<y><z/></y>\n))) && 0)gc()");
tryItOut("L: throw <><x><y/></x></>;");
tryItOut("/*infloop*/while(eval(\"return <x><y/></x>;\", let (__noSuchMethod__) constructor))return");
tryItOut("if(({__iterator__ getter: (this).__defineSetter__ })) { if (this) {(arguments);; } else {__iterator__ }}");
tryItOut("");
tryItOut("/*for..in*/for(const __parent__ = (prop.hasOwnProperty(\"__count__\")) in <x/>) ;var prototype = 5.0000000000000000000000, prototype;");
tryItOut("(<><x><y/></x></>);");
tryItOut("return gc;");
tryItOut("for(let y in [5,6,7,8]) __iterator__ = __noSuchMethod__;");
tryItOut("L: switch(1e81) { default: break; case 8: case [z1,,]: break; case (<x><y/></x>).watch: break; case 7: break;  }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <><x><y/></x></>) {var x::__iterator__ = *::*; } }");
tryItOut("{if( /x/ ) {(*::*);; } else  if (window) {{} }return; }");
tryItOut("try { for(let y in [5,6,7,8]) return; } catch(prototype) { yield; } finally { __iterator__ = __parent__; } ");
tryItOut("{}\nthrow \nthis;\n const constructor;");
tryItOut("/*for..in*/for(let [prototype, __iterator__] = [,,].watch(\"__proto__\", new Function) in [0/0 if (@foo)]) break ;({ __noSuchMethod__: [], __proto__: ({ __parent__: constructor }) })");
tryItOut("let(constructor) ((function(){const __noSuchMethod__ = <><x><y/></x></>;})());");
tryItOut("do export \n(this)\n/*for..in*/for(__proto__ in ((function(y) { yield y; export __count__;; yield y; })(\fthis / <x><y/></x>)))let __iterator__; while(((__iterator__ >>= new (false)(default: break; return  /x/g ;case <x/>.__lookupGetter__(\"__proto__\"): const prop;case prop = ({prototype setter: new Function\t,  get __iterator__(__proto__) { return window }  }): ).eval(__proto__ = [,,z1].valueOf(\"number\")))) && 0);");
tryItOut("/*for..in*/M:for(prop in prototype = <x/>.@*) {;throw false; }");
tryItOut("try { break M; } catch(__noSuchMethod__) { {}\r } ");
tryItOut("L:with(let (__noSuchMethod__, prototype) *::*){return <x><y/></x>; }");
tryItOut("return;");
tryItOut(";");
tryItOut("do {with({}) { __proto__ = #3={a:#3#}; }  } while(((#1=[#1#].__proto__ = <x/>.__lookupGetter__(\"prop\").watch(\"__parent__\", /a/gi))) && 0);");
tryItOut("for(let y in [5,6,7,8]) __proto__ = __count__;");
tryItOut("/*infloop*/for(__iterator__; new ({}).hasOwnProperty(<x><y/></x>); (([15,16,17,18].sort(null, <><x><y/></x></>)) || [15,16,17,18].map(function  __proto__ (prop, prop) { return [1] } ,  /x/g ))) with({__iterator__: false})yield;");
tryItOut("/*infloop*/while([z1]++){return;window; }");
tryItOut("if(__proto__ = ({ prop: constructor })) { if (window % prototype.__count__) (arguments);} else {/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in [z1])  }");
tryItOut("M:if(<y><z/></y>) ");
tryItOut("/*infloop*/for([z1,,] .@*:: @foo; (-1 ?  \"\"  : [1]); undefined.propertyIsEnumerable(\"__parent__\")) {throw __parent__; }");
tryItOut("if('fafafa'.replace(/a/g,  /x/ )) \r{ if (var constructor = 0x99, prop = this) {function(q) { return q; } } else {return  /x/g ; }}");
tryItOut("let (__parent__ =  /x/g , prototype) { ; }");
tryItOut("M:with({__proto__: this.zzz.zzz}){break ;export prop; }");
tryItOut("while((\fnew __proto__()) && 0)return 3.141592653589793\n");
tryItOut("if(prototype - undefined) ; else  if (__proto__ = <x><y/></x>)  else function(q) { return q; }");
tryItOut("while(((this.__defineSetter__(\"prototype\", __noSuchMethod__))) && 0){;(this); } const prototype;");
tryItOut("throw __proto__;");
tryItOut("if( /x/  >>>  set __proto__ prop (__proto__, prototype)(this).watch((<x/>)(*::*))) {switch(.2) { default:  } } else  if (new (this %=  /x/g )) /*infloop*/for(var prop = __iterator__; prototype; window) prop = @foo, __proto__ = __noSuchMethod__ else return;");
tryItOut("/*for..in*/for(let (*::*.__proto__)(({ set prop __noSuchMethod__ (__proto__, prop) { return (prototype = <x/>) } , __proto__: (__parent__ .@x:: #1=[#1#]) })) in ({prototype: <y><z/></y>(0.1, __count__)})) /*infloop*/M:while(__count__)( /x/ );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in ([1,2,3,4].map)(((-0) &&  /x/ ).yoyo(@foo.__defineSetter__(\"__proto__\", function(q) { return q; }) % (false)), <> { ; } </> && #1=[#1#])) {return;/*infloop*/M:do {export *; } while(<x><y/></x>); }");
tryItOut("M:if((let (__proto__ = constructor, constructor) (constructor = (p={}, (p.z = this)())))) { if (((eval(\"if(#2=({__noSuchMethod__: function::__parent__})) { if (( \\\"\\\"  ^= \\f@foo)) {} else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in this) {return; } }}\", eval(\"let ;\", null)))[<x/> | *::*])) continue ;} else ");
tryItOut("\n/*infloop*/L:for(var constructor; __proto__; undefined) {Function }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in ()) continue ;");
tryItOut("/*infloop*/L:for(var __iterator__; <><x><y/></x></>; this) ( /x/ );");
tryItOut("/*for..in*/for(__parent__ in null) {export *; }");
tryItOut("return null.prototype;");
tryItOut("M:if(3/0) { if (<x><y/></x>) const prototype; else undefined['constructor']}\n '' \n\n");
tryItOut("with({}) let([constructor], __count__ =  '' ) ((function(){let(__count__ = <x><y/></x>, __count__) { <><x><y/></x></>})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var <x/>([delete <y><z/></y>].sort(new Function)) in (({constructor: undefined,  get __count__() { let prop, __iterator__ = 3.141592653589793; }  }))) {{} }");
tryItOut("if(prop = [z1,,]) { if (Number(@foo, 1e81)) prototype, prototype; else {; }}");
tryItOut("export __proto__;if( /x/g ) {(this); } else  if (constructor) {var prop;(<><x><y/></x></>); } else const prototype;");
tryItOut("/*infloop*/while((this.zzz.zzz)()){{}/*for..in*/for(var __proto__ in __noSuchMethod__) export __noSuchMethod__; }");
tryItOut("*return 8;");
tryItOut("/*infloop*/for(let set; __iterator__.__proto__ getter= Math.sin.throw(([,,] !=  /x/g ).call(({a2:z2}).valueOf(\"number\"), )).__lookupGetter__(\"prop\"); eval(\"var prop;\", <x/>)) M:if( ? <x/>[@foo = window] : (prop) = <><x><y/></x></> << <><x><y/></x></>) {var let, prop; } else /*for..in*/for(__noSuchMethod__ =  ''  in <y><z/></y>) yield;");
tryItOut("let prop = window; const __proto__; const __parent__;");
tryItOut("/*for..in*/for(const __iterator__ = <x><y/></x>.throw( /x/ ) in <x><y/></x>) {yield 3;yield default: case window: return __parent__;break; case <><x><y/></x></>: break; ; }");
tryItOut("let (__parent__, prop = 3/0() * (prop.hasOwnProperty(\"__count__\"))) { export __count__\nreturn\n1e4; }");
tryItOut("let __count__;");
tryItOut("return this; const prop;");
tryItOut("{with(<x/>){(this);yield; } }");
tryItOut("export prop;");
tryItOut("prototype = *::*;{}");
tryItOut("prototype = prototype;");
tryItOut("try { throw __count__; } catch(prop if (function(){for(let y in []);})()) { [({ __noSuchMethod__: constructor })] } catch(__proto__ if (this.zzz.zzz)) { this.zzz.zzz; } ;");
tryItOut("throw 0.1\n(*::*);");
tryItOut("");
tryItOut("if(<><x><y/></x></>) throw function(id) { return id };");
tryItOut("return window;/*infloop*/do (<x><y/></x>); while(false);");
tryItOut("/*infloop*/constructorfor([[]]; true; <x/>) throw <x><y/></x>;");
tryItOut("M:if(#1#.throw(@foo)) { if (__proto__ = @foo) let constructor, x::__noSuchMethod__ = <y><z/></y>; else {gc{} }}");
tryItOut("let (prop = (null ? 1.2e3 : *::* -=  /x/ .__parent__ = <><x><y/></x></>) /= (new ({}).__lookupGetter__().eval(let (prop = <y><z/></y>) <x><y/></x>)), __noSuchMethod__ = this.__defineSetter__(\"function::__noSuchMethod__\", window)) { /*infloop*/for(<xxx {prototype}={window} />; ; (prop = <><x><y/></x></>)) ; }");
tryItOut("do += while(() && 0);");
tryItOut("yyy");
tryItOut("if((<><x><y/></x></>.watch(\"__count__\", eval)) != [z1].unwatch(\"constructor\").unwatch(\"__parent__\")) {return this; } else  if ((({}).__lookupGetter__).call(window, undefined ?  /x/g  : 1e4\t\n)) return function(id) { return id }\n");
tryItOut("if(<x><y/></x>.( '' )) {switch((* >= <y><z/></y>)) { default: [1,2,3,4].slice } } else  if (prop.__iterator__) {return *::*;yield [z1]; }");
tryItOut("if(<y><z/></y>) {return .2; } else  if (1e+81) continue M;");
tryItOut("('fafafa'.replace(/a/g, /a/gi));");
tryItOut("/*for..in*/for(__parent__ in (true for each (__count__ in function(id) { return id }))) ;");
tryItOut("if((this.zzz.zzz.watch(\"__iterator__\", (<y><z/></y>).watch))) {export *;yield; } else  if (<><x><y/></x></>.__defineGetter__(\"constructor\", ({}).__lookupGetter__).hasOwnProperty(\"__parent__\")) var __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("gc()");
tryItOut("switchwindow[*].prototype {  }");
tryItOut("/*infloop*/for(var ({ __count__: __noSuchMethod__, __parent__: __noSuchMethod__ }) = prop = prop; [15,16,17,18].some(gc, 3); this.__defineGetter__(\"__parent__\", __iterator__)) {M:do return  /x/ ; while(([[1]]) && 0); }");
tryItOut("{if((yield <y><z/></y>.unwatch(\"__iterator__\"))) ; else {export each; }let (__parent__ = this.propertyIsEnumerable(\"__noSuchMethod__\"), prop) { {} } }");
tryItOut("switch(((-0) for (( '' (.2)).function::getter in __noSuchMethod__))) { case 4: /*infloop*/do export prototype; while(null);break; default: Math.sincase 6: yield  \"\" ;case 1: break; break;  }");
tryItOut("throw __proto__;");
tryItOut("{return;yield <><x><y/></x></>; }");
tryItOut("{break M; }");
tryItOut("{L: {export prototype; } }");
tryItOut("let(__noSuchMethod__ = Function, prototype = false) { __noSuchMethod__ = __parent__ = <><x><y/></x></>;");
tryItOut("with({constructor: __proto__}){{}continue ; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__.prototype in __proto__.prototype getter= (function(y) { yield y; constructor =  /x/g , __proto__ = *;; yield y; }).apply) M:do {throw *::*; } while((*::*) && 0);");
tryItOut("let(prototype =  /x/ ) ((function(){var __count__ = 1e4;})());");
tryItOut("window;");
tryItOut("yield;");
tryItOut("do M:if(<y><z/></y>) { if (<x/>) let; else yield;} while((prop) && 0);");
tryItOut("if(new (gc)() >= (<><x><y/></x></>[@foo]) , __parent__.throw(__parent__).eval(this.__defineGetter__(\"__count__\", __noSuchMethod__ = 1e81, __count__ = function(id) { return id }))) /*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in <y><z/></y>) { } else  if (get = <><x><y/></x></>) {}\nL:if(void 1.3) { if ((export __iterator__)) {yield  /x/ ; } else {yield 5.0000000000000000000000; }} else ;");
tryItOut("/*for..in*/L:for(var [__iterator__, constructor] = / in ({a2:z2})) {export *; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; <zzz>*::* = (@foo)()</zzz>; [1,,]) {(<><x><y/></x></>)\n }");
tryItOut("/*infloop*/for(void -1; __noSuchMethod__ = <><x><y/></x></>;  ''  -= null) [1,2,3,4].slice");
tryItOut("export __parent__;");
tryItOut("let (__iterator__ = __parent__) { __iterator__ = window }");
tryItOut("return (prop[<x><y/></x>]);");
tryItOut("yield;");
tryItOut("__proto__.prop = __count__;");
tryItOut("{;{} }");
tryItOut("let(({ __count__: ({ constructor: __proto__, __count__: prop }), prototype: \t({ prop: prototype }) })) ((function(){return;})());");
tryItOut("try { let(__proto__) { (prototype) = __parent__; } catch(__iterator__) { return [11,12,13,14].sort; } finally { this.zzz.zzz; } ");
tryItOut("L: {window; }");
tryItOut("{}\nbreak L;");
tryItOut("with({__proto__: <></>})/*infloop*/M:while(<x/>){export *;(<><x><y/></x></>); }");
tryItOut("with({__noSuchMethod__: (<><x><y/></x></>(<><x><y/></x></>))})__proto__");
tryItOut("/*infloop*/for(let constructor; typeof false; (p={}, (p.z = <y><z/></y>)())) {return; }");
tryItOut("yield; const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in false) { }");
tryItOut("M:do {var constructor, __proto__;\n;\ncontinue ; } while((yield <y><z/></y> >>> new ('haha'.split)( '' )) && 0);");
tryItOut(" export ");
tryItOut("if( /* Comment */*) {yield;throw undefined; } else  if (<ccc:ddd><x><y/></x><x><y/></x>yyy</ccc:ddd>) throw <><x><y/></x></>;");
tryItOut("if(__proto__) {yield <x><y/></x>;break M; }");
tryItOut("/*for..in*/M:for(__proto__ in (([1,2,3,4].map)(<x/> &= constructor /= prop.__proto__%=__proto__.throw(<x><y/></x>))))let (__proto__) { export __parent__; }");
tryItOut("while((window.@*) && 0){let (__iterator__ = let (prototype) (true <= <x/>)) { *::*; const __proto__; } }");
