tryItOut("/*for..in*/for(let __iterator__ in []) {}");
tryItOut("L:with({__iterator__: (<x><y/></x>.watch(\"prop\", [1,2,3,4].slice))}){*::*__iterator__; }");
tryItOut("/*for..in*/M:for(new Boolean((__iterator__.prototype = undefined), (this.__defineGetter__(\"prop\", false)))['prop'] in (((function(q) { return q; }).watch)((new (-0)(<x><y/></x>))))){try { this.zzz.zzz; } finally { let(__count__ = __noSuchMethod__, prototype = <><x><y/></x></>) ((function(){export *;})()); }  }");
tryItOut("constructor.__noSuchMethod__ = constructor;");
tryItOut("L:if(__parent__ = <><x><y/></x></>.unwatch(\"constructor\") >>= \n \"\" .__defineGetter__(\"__iterator__\", /a/gi)) {const [, , __parent__, x::__proto__], prototype = prototype; } else L:do let prop = *; while((*) && 0);");
tryItOut("yield false;");
tryItOut("if(1e4) return @foo; else  if (({a2:z2})) const __proto__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(__count__ = <y><z/></y> in <><x><y/></x></>) return <><x><y/></x></>;");
tryItOut("v");
tryItOut("let (constructor) { var ; }return;");
tryItOut("if(function::prop = @foo) { if (prototype = (__iterator__.__iterator__ getter= 'haha'.split)) return <y><z/></y>; else { /x/g let __count__ = ({}), __proto__ =  \"\" ; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__(__iterator__;) in @foo) continue ;");
tryItOut("{var __proto__ = <><x><y/></x></>;with({__count__: __iterator__}){export __proto__; } const yield\n }");
tryItOut("/*infloop*/do {return;continue M; } while\f((new Iterator(__iterator__,  /x/g ) for (__proto__ in *) for (prototype in true)));");
tryItOut("/*infloop*/do throw *; while(__proto__ = *);");
tryItOut("while(((void (#2=this))) && 0)/*infloop*/do {yield <x><y/></x>; } while({});");
tryItOut("if(\texport __proto__;.watch(\"prototype\", function ([], __count__)function  __count__ () { return prop } \t(__noSuchMethod__, <><x><y/></x></>))) {L:with({__noSuchMethod__: (this)})return <x/>; } else yield;\n{;return window; }\n");
tryItOut("{/*infloop*/for(false; <y><z/></y> = <><x><y/></x></>; <><x><y/></x></>.unwatch(\"__proto__\")) {throw 0/0;throw *; }yield  \"\"  }");
tryItOut("if((Function)) (1 for (x in []))");
tryItOut("/*for..in*/for(const constructor in \t \"\" ) export __proto__;");
tryItOut("/*for..in*/for(var [__proto__, __count__] = (({ __iterator__: __count__, __proto__: [constructor] }) = prototype) in ([*undefined]) ? !window : new ([1,2,3,4].slice)(window, undefined)) /*infloop*/for(const __noSuchMethod__; (<x><y/></x>\t.hasOwnProperty(\"constructor\").__count__); (({ constructor: __noSuchMethod__ }) = #1=[#1#])) yield *::*");
tryItOut("/*for..in*/for(let constructor = function ([y]) { } in __count__ in  /x/g .unwatch(\"__proto__\")) {with({}) { let constructor =  \"\" ; }  }");
tryItOut("if(@foo.__defineGetter__(\"__count__\", (eval).apply) @ (new {}(.2, <> { return false } </>)).__proto__) return; else /*for..in*/M:for(const __parent__ = 5.0000000000000000000000.throw(*::*) in this && this) ");
tryItOut("M:do {constructor = window, __iterator__ = undefined;let __noSuchMethod__ = <x><y/></x>, prop; } while(((uneval([15,16,17,18].some(function  function::__iterator__ (prop, __noSuchMethod__) { gc() } , this)))) && 0);");
tryItOut("/*for..in*/\tfor(__count__ = __iterator__ in <><x><y/></x></>) ({ __parent__: ({ x::__proto__: prop }) })");
tryItOut("/*for..in*/for(__parent__ in <x/> >> *::*.valueOf(\"number\")) continue L;");
tryItOut("if( /x/g .valueOf(\"number\")) { if ((__count__ = \f1e81)) {yield; } else {<y><z/></y>;\r }}\n");
tryItOut("for(let y in []);");
tryItOut("if(<x><y/></x>.eval(<><x><y/></x></>) && \n '' ) {/*infloop*/while(this){yield <x><y/></x>;; } } else  if ([new (Math.pow)(window,  \"\" ) in Exception() if (prop\f =  /x/g )]) __count__, constructor = <x><y/></x>; else L: yield;");
tryItOut("M:with(<><bbb xmlns=\"function(q) { return q; }(<x><y/></x>, <x><y/></x>)\"></bbb></>){__parent__, constructor = __noSuchMethod__;/*infloop*/for(constructor; *; 1e4) {break M;return <><x><y/></x></>; } }");
tryItOut("/*infloop*/do {__parent__, __iterator__; } while(<x><y/></x>.throw(<x><y/></x>).__lookupSetter__(\"prop\"));");
tryItOut("/*infloop*/for((__count__ >>>= /x/ ); ({ __noSuchMethod__: ({ __noSuchMethod__: prop, constructor: __noSuchMethod__ }), __proto__: ({ __noSuchMethod__:  }) }) = (yield 'fafafa'.replace(/a/g, prop)); new ([1,2,3,4].slice)(*)) {evalfor(let y in []); }");
tryItOut("3.141592653589793");
tryItOut("switch(this) { default: break; export prototype;break;  }");
tryItOut("let (prototype, __noSuchMethod__) { continue M; }");
tryItOut("/*infloop*/do {break ;{} } while(1e4);");
tryItOut("break M; const __parent__;");
tryItOut("{break M; } const __noSuchMethod__;");
tryItOut("/*for..in*/for(const __parent__ = (-0) in prototype) {yield;export *; }\f");
tryItOut("with({}) ; const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (0)(0/0) in true) {return; }");
tryItOut("if( /x/ .throw(*)) { if ((-<><x><y/></x></>)) {yield; } else /*infloop*/for([,,]; <x><y/></x>; <x><y/></x>) (-1)}");
tryItOut("let (__parent__ = @foo, prototype = <x/>) { {{} } }");
tryItOut("export __noSuchMethod__; const prototype;");
tryItOut("M:with({__count__: ((<><x><y/></x></>)() ? ([<><x><y/></x></>].sort(false)) : *::*.eval(3.141592653589793))})if(1.2e3) {(<x/>);return; }");
tryItOut("if(@foo) ; else  if (<><x><y/></x></>) {yield <y><z/></y>; }");
tryItOut("{ const __proto__; }");
tryItOut("var __noSuchMethod__;");
tryItOut("/*infloop*/L:while((__noSuchMethod__)){/*infloop*/for(*; prototype; \rwindow) yield *; }");
tryItOut("/*infloop*/while( /* Comment */true((<x><y/></x>.(<y><z/></y>)) += <x/>, __parent__.prop = (typeof <x><y/></x>))){}");
tryItOut("return <y><z/></y>");
tryItOut("{var getter = <><x><y/></x></>, prototype = undefined\t;/*infloop*/while(this.__defineGetter__(\"__count__\", Function)){(<><x><y/></x></>); } }");
tryItOut("if(<><x><y/></x></>) return; else  if (<><x><y/></x></>) {(true)\f;export prototype; }");
tryItOut("{}");
tryItOut("([1,2,3,4].map).call\nconst __iterator__ = this & this, prototype\n");
tryItOut("throw __noSuchMethod__.function::constructor;");
tryItOut("do let __iterator__,  = <x><y/></x>; while((true) && 0);prop");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __proto__] = @foo in *) {;throw undefined; }");
tryItOut("with({__count__: {}})return <x/>;");
tryItOut("M:if(true) {(__iterator__); } else  if ((([15,16,17,18].filter( /x/g , prototype = {})).propertyIsEnumerable(\"__iterator__\"))) return __parent__; else {Functionvar __proto__, __noSuchMethod__; }");
tryItOut("let(constructor, __iterator__ = false) ((function(){for(let y in []);})());");
tryItOut("const prototype = 3.141592653589793, prop = true\n\n");
tryItOut("continue ;");
tryItOut("M:switch(__count__) { default: while(((-0)) && 0)if(*) yield undefined; else  if (*::*) const __parent__ = this, __iterator__ = <><x><y/></x></>;break; break;  }");
tryItOut("/*for..in*/for(__iterator__ = constructor in arguments) {yield <><x><y/></x></>;{} }");
tryItOut("M:with((__count__.constructor setter= true)){if(null) if([,,]) {yield; } else  if (({ __iterator__: prop, prop: ({ __parent__: __parent__ }) })) export __iterator__; else {<><x><y/></\tx></>; }if((undefined\n)) return; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((this.__defineGetter__(\"__count__\", gc)).call)((-->%=<><x><y/></x></>))))throw <><x><y/></x></>;");
tryItOut("L:if([,]) {break M; } else  if ((( /x/g \n).valueOf(\"number\")) ? (__noSuchMethod__ = this.isPrototypeOf(<x><y/></x>.eval(*))) : new new Function(<><x><y/></x></>)((-0), <y><z/></y>)) /*infloop*/while(undefined) \"\"  else {{export *;export __iterator__; }yield; }");
tryItOut("{if(prop :: (@foo.eval(undefined))) /*infloop*/bfor(const __iterator__; -*; (__noSuchMethod__ = __noSuchMethod__)) yield;{(@foo); } }");
tryItOut("while((this) && 0)let __count__, setter = window\n<x><y/></x>");
tryItOut("__count__ = prop;");
tryItOut("");
tryItOut("(<x><y/></x>);");
tryItOut("{/*infloop*/for(const __count__; __parent__;  \"\" .hasOwnProperty(\"__iterator__\")) {export *;([1]); } }");
tryItOut("let (__proto__, __parent__) {  if (<><x><y/></x></> <<= __count__.watch(\"__noSuchMethod__\", (function  __parent__ () { const prop = <y><z/></y>, __count__; } ).apply)) }");
tryItOut("if(({__parent__: <y><z/></y> })) {yield 3/0; } else  if ((yield [,,z1])) {/*infloop*/M:for(true; window; -1) return ({a2:z2}); } else prop;");
tryItOut("gc()");
tryItOut("/*for..in*/for(let __parent__.constructor in ((true.__proto__ = null.propertyIsEnumerable(\"__count__\"))(([__noSuchMethod__, , [, prop, ], prop] = prototype)))){ }");
tryItOut("let (__noSuchMethod__ = ([__proto__].some(eval))) { yield *::*; }");
tryItOut("throw 033;");
tryItOut("let (({ prototype:  })) { if(<x><y/></x>) { if ((__count__ = window)) {yield;break ; }} else {return; } }");
tryItOut("with({}) __proto__ = prototype;");
tryItOut("with({__noSuchMethod__: false ^ this}){export __noSuchMethod__; }");
tryItOut("/*for..in*/for(__iterator__ in [[]]) (@foo);");
tryItOut("/*for..in*/for(const [constructor, prop] = __count__ = \t<x><y/></x> in 033) prototype = null, prop\n");
tryItOut("/*for..in*/for(let __parent__ = window in (([1,2,3,4].slice)((__proto__ = <x/>.valueOf(\"number\"))))){function(y) { yield y; break L;; yield y; } }");
tryItOut("return (function ({})<y><z/></y>).call(<x><y/></x>, <x><y/></x>,  /x/g )\nif(({a1:1})) gc()");
tryItOut("{return  \"\" ; }");
tryItOut("do {var ;, x::__parent__;/*infloop*/do return undefined; while(0/0); } while((({ prototype: prop, __parent__: [] }) = <y><z/></y> ?  ''  : window >>>=.2) && 0);");
tryItOut("do x::constructor; while((x::__iterator__ = <x/>) && 0);");
tryItOut("let(__iterator__) { return;");
tryItOut("M:if(([<x><y/></x>.(1.3)])) { if (([window])) \r{prop;(<x/>); } else /*infloop*/for(let __count__; undefined .@ *; (__count__.(<x><y/></x>))) false;}");
tryItOut("with({}) for(let y in [5,6,7,8]) export *;/*for..in*/M:for(__parent__ =  if (<><x><y/></x></>) in *) {continue M;(true); }\n");
tryItOut("M:if(/*\n*/__noSuchMethod__) { if (<x/>) {return <x><y/></x>;prototype, prop = <x><y/></x>; } else {let __count__ = ({a1:1});throw <x><y/></x>; }}");
tryItOut("/*for..in*/for(const  /x/g  += <x><y/></x>.__lookupSetter__(\"__count__\").prototype in ((({}).hasOwnProperty)(()))){/*for..in*/for(let prop in ((function (__iterator__, __proto__) { return [15,16,17,18].some(([15,16,17,18].sort(new Function, true)), ((<><x><y/></x></>)(<><x><y/></x></>, arguments))[(yield *)]) } )(new 'haha'.split(<><x><y/></x></>, prop)))){continue M; } }");
tryItOut("/*infloop*/do L:if(<><x><y/></x></>) {(new Function(\"__count__;\"))break M; } else  if (<x/>) {yield;prototype; } else return; while(__parent__ = ({__parent__: <x><y/></x> }));");
tryItOut("do throw <x><y/></x>; while((('haha'.split)(eval(\"arguments\", *) < this, (\n '' ))) && 0);");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = ('fafafa'.replace(/a/g, __noSuchMethod__)) in <><x><y/></x></>) const constructor;");
tryItOut("{(false);return window; }");
tryItOut("continue M;");
tryItOut("/*for..in*/M:for(var __iterator__ in ((({}).hasOwnProperty)(@foo .@ undefined))){return;yield; }");
tryItOut("if(<x/>) __iterator__; else  if (*) {gc() }\nexport *;\n");
tryItOut("try { throw prototype; } catch(__count__ if <x><y/></x> * <x><y/></x>) { return; } catch(function::__noSuchMethod__ if ((Math.sin).call(<><x><y/></x></> <<= <x><y/></x>, this--, ))) { /*\n*/for(let y in []); } ");
tryItOut("L: {gc() const __proto__;if(Math.pow(<x/>, prototype)) { if ({}) return prop; else {; }} }");
tryItOut("/*for..in*/for(let (({}))[ /x/g ]['__parent__'] in ([<y><z/></y>] && <x><y/></x>.(@foo))) yield <x><y/></x>;");
tryItOut("yield;");
tryItOut("{yield function::constructor; }");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { if ((((eval).call)()) ? @foo : 0.__lookupGetter__(\"prototype\")\n) {<x><y/></x>/*infloop*/while(<x><y/></x>){var constructor;throw  \"\" ; } }} else {if(this) { if (null) {yield; } else function  prop () { gc() } } }");
tryItOut("/*infloop*/do {export prop; } while(Function(yield [<x><y/></x> for each (prototype in ({a1:1}))]));");
tryItOut("with({}) { throw __iterator__; } ");
tryItOut("if(__proto__ = <><x><y/></x></>) { if (this) gc()} else var __parent__, __parent__ =  '' ;");
tryItOut("/*infloop*/for(var __proto__ = (Math.sin).call(window, ); (prop.__iterator__); (* .@ 3).yoyo(({__count__ setter: 'haha'.split,  set __iterator__ prop (function (__count__, __iterator__) { return this.__defineGetter__(\"prop\", (<x><y/></x>).watch) } , prototype) { yield * }  }))) {/*for..in*/for(prototype in function(id) { return id }) (true);/*for..in*/M:for(var __count__ =  /x/g  in undefined) {return <x><y/></x>; } }");
tryItOut("{}\n");
tryItOut("if(constructor.__count__) { if (({__proto__ setter: 'haha'.split, __proto__: /*\n*/undefined })) {(this);'haha'.split } else var prop = <y><z/></y>;}");
tryItOut("/*for..in*/for(let [prototype, __count__] = (<><x><y/></x></>.valueOf(\"number\")) in <x><y/></x>) yield;");
tryItOut("yield <y><z/></y>;");
tryItOut("/*infloop*/do /*infloop*/for(let __count__ = ((1 for (x in []))).call(null, ); true; __iterator__.unwatch(\"__iterator__\")) while(( /x/ ) && 0){return; } while(for(let y in []););");
tryItOut("if((@foo .. *::* !=  /x/ .__count__ = null)) do {export prototype; } while((prop = constructor) && 0);");
tryItOut("prop, __proto__ = set\n\n/*infloop*/for(__parent__+=*; 0.yoyo( \"\" ); (this.valueOf(\"number\"))) {/a/gi; }\n");
tryItOut("/*infloop*/M:while(#1#)if([0.1\n for (<><x><y/></x></>.prototype in <x><y/></x>) for each (prototype in function(id) { return id })]) {(<><x><y/></x></>);return; } else  if (<><bbb xmlns:ccc=\" /x/ \"><ccc:eee></ccc:eee></bbb></>) {return [z1]; } else {var prop =  /x/g ; }");
tryItOut("/*infloop*/do /*\n*/return __parent__; while((this.zzz.zzz));");
tryItOut("/*infloop*/for(let prototype; (false).call(arguments, let (__iterator__ =  \"\" \n) [15,16,17,18].map([], (<><x><y/></x></>.throw(export *;)))); let (prototype) 5.0000000000000000000000) let (__parent__ = #3={a:#3#}) { export __parent__; }");
tryItOut("if(<x><y/></x>) {} else  if ((((window).watch).call(__proto__, <><x><y/></x></>))) export *; else {{}return <><x><y/></x></>; }");
tryItOut("throw constructor;\n{continue ;if(window) yield; else return <x><y/></x>; }\n");
tryItOut("if((Array(this.zzz.zzz, <x><y/></x>.(prototype)) + (false+=((p={}, (p.z = function ([y]) { })()))))) { if (Iterator().*) with(null += function(id) { return id }){yield @foo; } else {yield ((uneval(__iterator__))); }}");
tryItOut("throw  /x/g ;\ngc()\n");
tryItOut("/*infloop*/while((__parent__))export *;");
tryItOut("/*for..in*/for(let prop in ((function(q) { return q; })(* >>= (({}).__lookupGetter__).call(<y><z/></y>, this)))){gc()yield; }");
tryItOut("gc()");
tryItOut("L: M:switch(<x><y/></x>) { case  /x/ : break; default: ;break;  }\nwhile((<x><y/></x>) && 0)export *;");
tryItOut("/*for..in*/for(let [constructor, constructor] = true in ({__count__ getter: Function, prototype:  \"\"  in <x><y/></x> })) {if([__iterator__yield  ;]) /*for..in*/M:for(__count__ in this) {yield; } else  if (yield continue L;) return; else {export *; }if(void __noSuchMethod__) {export *; } else  if (this) {[1,2,3,4].map/*for..in*/for(var __iterator__ in (([z1,,])(__noSuchMethod__))) } else {} }");
tryItOut("/*infloop*/do gc() while([[1]]);");
tryItOut("switch(( /x/ ['constructor'] = [[]] :: <><x><y/></x></>.__noSuchMethod__ = (yield  \"\" ))) { default: case  /x/g .__defineGetter__(\"__noSuchMethod__\", function (prop, __parent__) { return window } ): break;  }");
tryItOut("gc() const constructor;");
tryItOut("if(__count__) { if (*) {/a/gi }\f else {(<x/>); }}return;");
tryItOut("/*infloop*/for(let ({ constructor: [, ] }) = (p={}, (p.z = [<y><z/></y>])()); new (this)((({__noSuchMethod__ getter: Math.pow, constructor\n getter: (<><x><y/></x></>).watch })), true); ((prop = 5.0000000000000000000000 for each (__noSuchMethod__ in true) for each (prototype in <x><y/></x>)))) ");
tryItOut("{if() yield; }");
tryItOut("");
tryItOut("return;");
tryItOut("/*infloop*/L:for(const ({ __count__: [, ({ prototype: __iterator__, prop: prototype })] }) = \nthis.__defineSetter__(\"__proto__\", Math.pow) || ( ''  ^ true | (prop = prototype)); window; 3/0) {(__parent__);__noSuchMethod__ = 3, __parent__ = {__proto__ = undefined; }; }\nif(__count__) break ; else  if (__proto__.prop) export *;");
tryItOut("switch(eval(\"export __proto__;\", <><x><y/></x></> <<= this)) { case (__parent__ = __proto__ = 1e81): default: break;  }");
tryItOut("/*infloop*/while(({ get __iterator__()try { export *; } catch(__proto__) { yield; } finally { (<y><z/></y>); } , prop: ({a1:1}) })){return @foo;switch(<x><y/></x>) { case <x><y/></x> + function(id) { return id }: break; default: return; } }");
tryItOut(" for (__parent__ in 4.) if (-3/0)");
tryItOut("if(this.__parent__ = *) { if (prototype) {yield <x><y/></x>; }} else {if((*::* instanceof 1e81))  else {return this; } }");
tryItOut("M:with({__proto__: [1,,]})/*for..in*//*\n*/for(var [__iterator__, prototype] = ({ prop: <zzz>null</zzz> }) = yield false in (#3={a:#3#})) {yield ({});/*infloop*/for(var __count__; 1e+81; <x><y/></x>) {( \"\" );let constructor, getter; } }");
tryItOut("L: {}");
tryItOut("/*for..in*/for(const prop in Number(prototype = \n \"\" , (<x/>.unwatch(\"prop\")))) do {} while((new ((this).__defineSetter__)(<><x><y/><///h\nx></>, function ([y]) { })) && 0);");
tryItOut("M:if(false) if(<><x><y/></x></>) { if (__count__) {continue ; }} else {return; }");
tryItOut("with(undefined.isPrototypeOf( \"\" ) :: ((null)).propertyIsEnumerable(\"prototype\")){return <x><y/></x>.__lookupGetter__(\"__noSuchMethod__\"); }");
tryItOut("/*for..in*/for(const prototype = <x/> in <><x><y/></x></>) return constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in 5.0000000000000000000000) {var __iterator__ =  /x/ ;break M; }");
tryItOut("M:with((eval(\"(window);\", (1e4.unwatch(\"__iterator__\"))())))(*::*);\nyield <><x><y/></x></>;\n");
tryItOut("while(((__noSuchMethod__.__proto__ = __proto__)) && 0){;let __proto__; }");
tryItOut("try { try { throw prop; } catch(__count__) { for(let y in []); } finally {  }  } catch(__proto__ if undefined) { constructor = //h\nprototype; } catch(__noSuchMethod__ if (function(){try { throw StopIteration; } catch(constructor) { try { let(constructor) ((function(){<x/>;})()); } finally { try { export *; } catch(prototype) { export __iterator__; }  }  } finally { let([__iterator__, prop] = __noSuchMethod__.__proto__ = <x><y/></x>, prototype = <x/>) { let(continue M; = <><x><y/></x></>) { yield @foo; } })()) { yield ((__proto__[@foo] | @foo) ? (__parent__.__iterator__ = <x/>).__defineSetter__(\"__iterator__\", new Function).unwatch(\"prototype\") : prototype = null.__iterator__); } catch(__noSuchMethod__) { yield try { yield; } finally\n { __proto__ = __noSuchMethod__; } ; } ");
tryItOut("if([(p={}, (p.z = (\t<x><y/></x>.__lookupSetter__(\"__count__\")))())]) gc() else  if ([let (__proto__) [1]].some((__count__).call)) {gc() }");
tryItOut("let(__proto__ = ({}), prop) { yield yield (__noSuchMethod__.__iterator__+=this);");
tryItOut("/*infloop*/while({})export *;");
tryItOut("/*infloop*/for(let ({ __count__: ({ __count__: ({ prop: __parent__, __parent__: [, ] }), constructor: [, , , ] }) }) =  /x/ .throw(({/*infloop*/for(let __noSuchMethod__ = .2; <x><y/></x>; <x/>) prop = ({a1:1}) }\n).__lookupGetter__(\"function::__count__\") .@x:: new (function  prototype (__parent__, __parent__)window)()); (Function).call(); (__iterator__+=prototype /= [1])) let __count__ = true;");
tryItOut("if(prototype = <><x><y/></x></> !== this ^= this) {const __parent__;{} } else  if (* ? constructor = arguments : constructor) {export *;return; }");
tryItOut("let(__proto__ = ((<x><y/></x> for (__iterator__ in undefined)))) ((function(){throw prop;})());if((this.zzz.zzz)) ; else  if (<x/>) {gc() }");
tryItOut("{function (__iterator__) { __count__; }  }");
tryItOut("if(((uneval(false)))) prop else  if ((__proto__)[<><x><y/></x></>]) return undefined; else let __parent__ = [z1];");
tryItOut("yield;with({}) return (true);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 0.1) {let prototype; }");
tryItOut("/*for..in*/for(const [__proto__, __count__] = \t++(__noSuchMethod__.__proto__ = <x/>) in @foo\f) {const __count__;export *; }");
tryItOut("return this;");
tryItOut("const __noSuchMethod__ = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((yield <><x><y/></x></>));");
tryItOut("{export __iterator__; }\n");
tryItOut("if((__count__ = <x><y/></x>.__defineSetter__(\"{continue ; }\", [z1])) ? (({__count__: 0/0})) : [null].some(Math.sin).isPrototypeOf(<><x><y/></x></>.throw(*::*))) if(*::*) yield; else {__iterator__ = 1e81, __iterator__ = <><x><y/></x></>;export constructor; } else {; }");
tryItOut("continue ;let __proto__ = window, __iterator__ = <x><y/></x>;");
tryItOut("if((())) { if ((let (prototype = <><x><y/></x></>;) <x><y/></x>)) {var __iterator__ = *;return <><x><y/></x></>; }} else {;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in (constructor.__noSuchMethod__ = new function () { return constructor } (0, <x><y/></x>))) {yield;\nconst constructor = *;\n }\n");
tryItOut("/*infloop*/L:for((@foo)(.2); (void <y><z/></y>.__lookupGetter__(\"__iterator__\")); this -= __iterator__.( /x/g )) do continue M; while(((p={}, (p.z = (@foo)(<x/>, *::*))())) && 0);");
tryItOut("if(((yield false))) { if ((\n(function ([y]) { })())) return;} else { }");
tryItOut("L:with( \"\" )throw true;");
tryItOut("with({}) let __noSuchMethod__ = .2, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("if(__noSuchMethod__|=get = <x><y/></x> >> window) { if (constructor.(({a1:1})) ? __iterator__ = constructor : gc()) {M:do const __proto__; while((this.__defineSetter__(__parent__ , (new Function(\"export __parent__;\")))) && 0);if(((([1,2,3,4].slice).call).call(([,,] !== @foo), ))) export *; else {{} '' ; } }} else <x><y/></x>");
tryItOut("return\n");
tryItOut("M:do ; while((0/0) && 0);");
tryItOut("for(let y in []);");
tryItOut("for(let y in []);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:\ffor(__count__ = let (prop = (prop & 3/0)) prop.__proto__|=new Boolean() in ((\n#1#) , constructor = --[<y><z/></y>])) {M:do  while(((p={}, (p.z = 'fafafa'.replace(/a/g, @foo))())) && 0);; }");
tryItOut("prop\nyield *;\n");
tryItOut("M:if(<>-true <= 1e-81</>) { if (<x><y/></x> ? *::* : <x/>) constructor = <x><y/></x>; else {constructor; }}");
tryItOut("{M:if((__parent__-= /x/ )) {export __iterator__; } else {(3/0);return; } }");
tryItOut("try { let(__iterator__) ((function(){export *;})()); } finally { let(__proto__) { const prototype = *, prototype = @foo; } ");
tryItOut("continue L;");
tryItOut("{}\n");
tryItOut("M:if( \"\"  < __count__) { if (1e-81.throw( /x/ ) ^ (<y><z/></y>.isPrototypeOf(<x><y/></x>))) {let __parent__ = 3/0;Function } else {break ;export *; }}");
tryItOut("if(( /x/g  &= function::__proto__ = this)) {/*infloop*/do {} while(this.__defineSetter__(\"constructor\", /a/gi)); } else try { yield <{__parent__}> </{__parent__}>; } catch(constructor) { let(__iterator__ = ([@foo]), __proto__ = ({ __proto__: __iterator__ }) = constructor !== this) { return; } ");
tryItOut("let (__count__) { continue M\nthrow <><x><y/></x></>; }");
tryItOut("/*infloop*/for(let [, ] = [*::*].map(/a/gi); delete __noSuchMethod__.__proto__ = window; [z1]) .2\n; const let;");
tryItOut("if(*) {}\nreturn 4.; else  if ((uneval(__noSuchMethod__)) += <><x><y/></x></>.hasOwnProperty(\"__parent__\")//h\n) {{}let __proto__; } else {{}let (constructor, __proto__ = false) {  } }");
tryItOut("/*for..in*/for(var __iterator__ = __parent__.propertyIsEnumerable(\"prop\") in __count__ != window) {(({}).__lookupGetter__).apply<y><z/></y>; }");
tryItOut(";");
tryItOut("/*infloop*/for(this;  /x/ .eval(this); undefined) {throw <x><y/></x>; }");
tryItOut("if((<x><y/></x>.__lookupGetter__(\"__proto__\")\n)) {const 3/0; } else  if ((<x><y/></x> for each (prototype in <x><y/></x>))) yield;");
tryItOut("{__count__ = __noSuchMethod__; }");
tryItOut("switch(__noSuchMethod__) { default: break \f; }yield  /x/g ;");
