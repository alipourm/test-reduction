tryItOut("case 0: return 1e+81;");
tryItOut("let(__proto__ = <x><y/></x>().__iterator__) ((function(){try { __proto__.function::prop = __iterator__; } finally { M:with(<x><y/></x>)return this; } })());");
tryItOut("if(null .@ <x><y/></x>) {switch( /x/ ) { default: break; break; __proto__, __noSuchMethod__ =  '' ;yield <x><y/></x>;\n;\n } } else  if (prototype ? ([11,12,13,14].some.yoyo((__count__.(0x99)))) :  /x/g ) {with(constructor){function(q) { return q; }{} } } else {let (constructor =  /x/ ) { const __count__ = <x><y/></x>; } }");
tryItOut("M:if((<x><y/></x>)(3)) {'haha'.split } else  if (__proto__+= /x/ )  else {continue L;var __iterator__ =  /x/g ; }");
tryItOut("export *;");
tryItOut("export __proto__; const prototype;");
tryItOut("function (__count__, __iterator__) { return [z1,,] } \n;");
tryItOut("if(__iterator__ = --function(id) { return id }) { if ((eval(\"(uneval(<x/>))\", new ((constructor%=<x/>))()))(())) (Math.pow\t).apply} else {with({__noSuchMethod__: <y><z/></y>.watch(\"__proto__\",  \"\" )}){yield <y><z/></y>; } }");
tryItOut("/*infloop*/for(const constructor = #1=<x><y/></x> ^ true; function(y) { yield y; prop = __iterator__;; yield y; }; ({__iterator__: ([ /x/  for (__parent__ in false)]), prop: undefined })) L: {yield <x/>;(this); }");
tryItOut("if(__iterator__.(constructor: arguments for each (prop in 3.141592653589793))) { if ((function ([y]) { })()) let __parent__ = <y><z/></y>; else [1,2,3,4].slice}");
tryItOut("/*infloop*/\rwhile(new ([1,2,3,4].map)((yield 1e81))){*yield; }");
tryItOut("/*infloop*/for(const prop; 3/0; <x/>) if(4.) {if(window) { if (<><x><y/></\fx></>) {yield (function ([y]) { })();const __proto__ = <x><y/></x>; } else {prototype = #1#, __parent__ = this; }}; }");
tryItOut("/*infloop*/do {let __parent__ = @foo, __proto__\ngc()with({__noSuchMethod__: *.yoyo(<x><y/></x>)}){/*infloop*/while(window)( /x/ ).callreturn <x/>; } } while((0/0 , <x><y/></x>));");
tryItOut("if(<y><z/></y>.watch(\"__noSuchMethod__\", function(y) { yield y; break L;; yield y; })) prototype else {export *;{} }");
tryItOut("L: yield;");
tryItOut("if(constructor ? (({__proto__ getter: 5.0000000000000000000000 })) & __noSuchMethod__ = (-0) >= [15,16,17,18].filter(function(q) { return q; }, <x><y/></x>) : ((null)()) instanceof this) { if ([(uneval(function ([y]) { })) for each (__parent__ in <x><y/></\tx>) if (<y><z/></y>)]) {(@foo);constructor = [,], prop = <><x><y/></x></>; }} else {yield; }");
tryItOut("/*infloop*/for(let __proto__; <><> \"\" </></>; (<x><y/></x>.propertyIsEnumerable(\"__parent__\"))) {return undefined;return __proto__; }");
tryItOut("this.zzz.zzz;");
tryItOut("(null)\n");
tryItOut("if(constructor-=prototype) gc()\nL:switch(this) { case  '' :  } else return;");
tryItOut("/*infloop*/for(true;  /x/ ; -3/0) {undefined; }");
tryItOut("export *\n");
tryItOut("");
tryItOut("/*infloop*/L:for(3 instanceof this; (([1,2,3,4].map)()); 3/0.__defineSetter__(\"__noSuchMethod__\", (function ([y]) { })())) var __noSuchMethod__;");
tryItOut("/*for..in*/M:for(var [prototype, __iterator__] = let (__iterator__, constructor = prototype) this.valueOf(\"number\").__noSuchMethod__ in ({}).hasOwnProperty) export constructor;");
tryItOut("/*for..in*/M:for(constructor in (([1,2,3,4].slice).call(eval(\"constructor\", prop)\n, ((yield prop = function ([y]) { })), [z1] ? null : *))) /*infloop*/while( /x/g )return constructor;");
tryItOut("while((void __count__.isPrototypeOf(*::*)) && 0){/*infloop*/for(var __parent__; <x><y/></x>; <><x><y/></x></>) return <y><z/></y>; }");
tryItOut("/*infloop*/do /*for..in*/for(const constructor in ((function(y) { yield y; /*infloop*/while(<y><z/></y>){continue ;new Function }; yield y; })(<x/>.yoyo(this)))){;let __noSuchMethod__ = prop; } while(__count__ = this);");
tryItOut("const __count__, prototype = *::*;");
tryItOut("/*infloop*/L:for((prop = __proto__.__iterator__ getter= (<x><y/></x>).watch); (((__parent__)(1.2e3, ({ prop: __proto__, <><x><y/></x></>: constructor })))).watch; 0.1) /*infloop*/for(var __noSuchMethod__; eval(\"<y><z/></y>;\", this); <x><y/></x>.(__parent__) %= (<y><z/></y>.eval(*::*))) {return; }\nreturn;");
tryItOut("export __proto__;");
tryItOut("if(3) {return;let function::__count__, __parent__ = 1.2e3; } else  if (eval(\"L:if(3/0) ;\", (window , __iterator__ /= true))) {prop = #1=[#1#];return; }");
tryItOut("let() { return (this.__defineSetter__(\"constructor\", eval));");
tryItOut("if(__count__ = this) { if (void  \"\" .__noSuchMethod__) throw <><x><y/></x></>;} else case function ([y]) { }[*]: break; case ((* if (<x/>)) in constructor for (constructor in <><x><y/></x></>) for each (prop in  '' )): ");
tryItOut("/*for..in*/for(const each.__parent__ in ((function(y) { yield y; return constructor;; yield y; })(this))){{} }");
tryItOut("{}");
tryItOut("/*for..in*/for(const  /x/ ['__iterator__'] in ((((5.0000000000000000000000).__defineSetter__).call)(#2=({__proto__: 0.1})))){yield window; }");
tryItOut("let (prop) { /*infloop*/do eval while([15,16,17,18].filter(Math.sin, __count__ = <x/>)); }");
tryItOut("/*for..in*/L:for(const __proto__ + <y><z/></y> = prototype.prop = typeof window in yield __iterator__ =  '' ) {L: {switch((this.unwatch(\"__count__\"))) { default: L: gc()break;  }return;export __iterator__; } }");
tryItOut("with({}) { for(let y in [5,6,7,8]) (eval).call } ");
tryItOut("let (");
tryItOut("if(constructor) {yield;{export *;export *; } }");
tryItOut("/*for..in*/for(let prototype in ((function(q) { return q; })([[1]])))/*for..in*/for(prop in ((/a/gi)( \"\" \f)))break ;");
tryItOut("/*infloop*/L:for(prop.x::prototype getter= gc; __parent__; \n(/a/gi).apply) {continue M;\n;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let  /x/ .__iterator__ in false) const __proto__; }");
tryItOut("/*infloop*/for(({__noSuchMethod__: (<><x><y/></x></>\f /= __proto__)}); __proto__; 0/0.constructor) {default: break; throw @foo;case 0: case 3: __iterator__ = [,], prop;; }");
tryItOut("/*for..in*/for(const <y><z/></y>.prototype in ((function (constructor, __noSuchMethod__) { return null } )(__count__.__noSuchMethod__)))yield;");
tryItOut("if(4.) {export *;continue ; }");
tryItOut("yield __iterator__|= '' ;");
tryItOut("new Function\n//h\n\n/*infloop*/for(var __proto__; function::function::__proto__; 3 === [,]) __parent__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(let __parent__; <x><y/></x> ? <x><y/></x> : 0/0; <x><y/></x> = __proto__ = 3) {yield  '' ; }");
tryItOut("/*infloop*/for(const __parent__; (( set __parent__ __proto__ (function::constructor) { yield  /x/g  }  = ({a2:z2})))[void constructor = <x/>]; Iterator(__iterator__ = this)) {/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <x/>) gc() }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(var <x/>; ([15,16,17,18].filter(gc, *)); <x><y/></x>.prototype) {export *;return; } const __parent__;");
tryItOut("L: {yield (<x><y/></x> ^= -1);__noSuchMethod__; }");
tryItOut("L:if((__noSuchMethod__ = <><x\t><y/></x></>.__defineSetter__(\"__iterator__\", new Function))) {with({__proto__: ({a1:1})}); }");
tryItOut("if((gc() | __proto__)) { if (__parent__ =  \"\" ) this.__defineGetter__(\"prop\", <x/>) else {<x><y/></x>; }}");
tryItOut("/*infloop*/for(var ({ __count__: [], __parent__: [({ __iterator__: __iterator__, prop: __parent__ }), , ] }) =  /x/ ;  '' ; (<y><z/></y>\n)) {M:if(({prototype: <x/> })) { if (({ prop: [, , prop, ({ __parent__: __parent__ }), ], __iterator__: ({ __noSuchMethod__: constructor, __count__: ({ prototype: __noSuchMethod__ }) }) }) = [constructor, ({ __iterator__: prototype })]) {yield [z1,,]; }} else {continue M;<x><y/></x>; }/*for..in*/M:for(const [prop, __count__] = window in -0) throw  \"\" ; }");
tryItOut("{/*infloop*/M:while(0.1){export *; }\tcontinue ; }");
tryItOut("/*for..in*/for(var __proto__\f in (((prop = new (window).apply(<x/>)).__defineSetter__)(__count__.constructor))){{return <x/>;return <x><y/></x\f>; } }");
tryItOut("(false)(-0) = prop;");
tryItOut("/*infloop*/L:do {/*infloop*/for(prototype = <y><z/></y>; 0/0; 5.0000000000000000000000) continue/*\n*/ ;return [,]; } while( /x/g .__lookupSetter__(\"__noSuchMethod__\"));");
tryItOut("/*infloop*/L:for(var prop; constructor = false.prop; this >>> [11,12,13,14].some) L:if([[1]]) (1.2e3); else  if (window) const __count__ = 033; else {function(y) { yield y; ; yield y; } }");
tryItOut("/*for..in*/for([__count__, prototype] =  in __iterator__) {{ }\ncontinue ;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let (__count__) in constructor = 0x99) yield; }");
tryItOut("with(function(id) { return id }){throw ( \"\"  @  /x/ ); }");
tryItOut("L:with({__iterator__: new (Math.sin)(this, undefined)})if((1e81)[window]) export prop;");
tryItOut("if(window) { if (continue L.throw(__iterator__.( \"\" )).__iterator__ = yield ({})) yield;} else (this);");
tryItOut("if(__noSuchMethod__) {export __count__; } else {yield;return; } const __iterator__;");
tryItOut("L: ({ }).apply\n/*for..in*/for(let prop in (([11,12,13,14].filter)(__proto__, constructor))){{} const __count__; }");
tryItOut("/*infloop*/M:for(; (<x/>.throw(prototype))[this.__defineGetter__(\"constructor\", new Function)]; ([11,12,13,14].map)) /*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in constructor: -0) {let ; }");
tryItOut("/*infloop*/do continue L; while((__iterator__.prop = false));");
tryItOut("M:with(<><x><y/></x></>){__noSuchMethod__, __count__;throw function ([y]) { }; }");
tryItOut("var __noSuchMethod__, [,,z1]; const constructor;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const __parent__ in (([1,2,3,4].map)(((true)[undefined]))))var prop = *::*;");
tryItOut("\nwhile((*) && 0)(<x><y/><\t/x>)\n(<x/>);");
tryItOut("do {export *;export __proto__; } while((<x/>) && 0);");
tryItOut("L:switch([1]) { default: break;  }");
tryItOut("gc()");
tryItOut("if(true) <x/>;");
tryItOut("if(eval(\"\", #1=({__noSuchMethod__:  \"\" .prototype}))) { if (<x/>) with({__parent__: Function((@foo.isPrototypeOf(window)))})yield;} else M:with((yield (__noSuchMethod__.__count__ setter= (<x/>).watch))){throw constructor; }");
tryItOut("if((({__noSuchMethod__: <x><y\f/></x> })))  else return;");
tryItOut("/*infloop*/for(var __count__ = <x><y/></x>; [,,]; <><x><y/></x></>) {yield;var __noSuchMethod__; }");
tryItOut("/*for..in*/for(var constructor = <x><y/></x> in undefined) {let prototype, constructor = __iterator__; }");
tryItOut("L:while(([( /x/g (__noSuchMethod__))].map(<><x>\t<y/></x></>)) && 0){return 4.;yield; }");
tryItOut("if(this.__defineGetter__(\"__proto__\",  '' ).*) {} else  if ( /x/ ) {}");
tryItOut("do export __noSuchMethod__; while((0.1) && 0); const __noSuchMethod__;");
tryItOut("let (prop) { yield;\nexport *\n }");
tryItOut("if((__iterator__ <<= <><x><y/></x></>)) {throw *; } else prop");
tryItOut("/*for..in*/for(let (* >= <x><y/></x>)++.prop in ((([1,2,3,4].map).apply)(.eval(('fafafa'.replace(/a/g, new Function).__proto__ = __parent__ = this) << ([11,12,13,14].map) > __noSuchMethod__.(1e4)))))if(this.zzz.zzz) { if (__parent__ = <x><y/></x>) const __proto__, __count__ = <x><\ty/></x>; else {__iterator__ = <x/>, __parent__ = <><x><y/></x></>; }}");
tryItOut("do {{yield window; }{} } while((<>(__count__)\f( \"\" , <x><y/></x>)</>) && 0);");
tryItOut("throw StopIteration;");
tryItOut("with({prop: (this.__lookupSetter__(\"prototype\")) || null.unwatch(\"__count__\")}){if(__iterator__ = <x><y/></x>) {/*infloop*/for(__proto__; __iterator__; __parent__) let __iterator__, __noSuchMethod__; } }");
tryItOut("if([true]) return; else  if (__count__) ; else {(window);return; }");
tryItOut("if((this.__defineSetter__(\"__parent__\", function () { return <><x><y/></x></> } )(this.__defineSetter__(\"constructor\", (new Function).call) ^ <><xxx {__iterator__}={window .@*::  /x/g } /></>))) { if (__proto__ = *::*.__defineSetter__(\"__parent__\", (1 for (x in [])))) {var __parent__ =  '' , prototype = false;(<><x><y/></x></>); }} else {\nlet prototype = 0/0; }");
tryItOut("do {var __count__;{} } while((1e81) && 0);");
tryItOut("__iterator__ = prototype;");
tryItOut("\n/*for..in*/M:for(__iterator__ in window) { \"\" ;return <><x><y/></x></>; }");
tryItOut("let(prototype, prop =  /x/ ) { ([,])\n");
tryItOut("let (__proto__) { <x><y/></x> const constructor; }");
tryItOut("/*for..in*/for(__proto__.__parent__ in ((function(y) { yield y; /*for..in*/M:for(const [__count__, function::prop] = function  prop (prop, __iterator__) { __iterator__, __iterator__; }  in window) {export __proto__;null }; yield y; })(x::constructor = yyy))){ }");
tryItOut("\fif(*) { if (<><x><y/></x></>) {{} }} else {gc()(*::*); }");
tryItOut("<y><z/></y>\n\n");
tryItOut("/*infloop*/for(var ({ __count__: __iterator__, constructor: ({ __noSuchMethod__: ({ *::*: [] }) }) }) = (void @foo); ({constructor: (1e+81.propertyIsEnumerable(\"prop\")).prop}); (<x><y/></x>.(<x><\fy/></x>)++.propertyIsEnumerable(\"__proto__\"))) throw ({})();");
tryItOut("/*infloop*/for(var __noSuchMethod__; ({}).__lookupGetter__; (__noSuchMethod__ = __parent__)\t.valueOf(\"number\")) {throw <><x><y/></x></>;{} }");
tryItOut("L:do {[, , ] getter: [1,2,3,4].map } while((((uneval((this.__parent__).valueOf(\"number\"))))) && 0);");
tryItOut("/*infloop*/for(const __noSuchMethod__ = ; <x/>; this.__defineSetter__(\"__parent__\", [1,,] >= <x><y/></x>)) {export *;switch(__count__) { case 4: const __noSuchMethod__ = __iterator__, constructor = <><x><y/></x></>;default: let prototype;break; return <><x><y/></x></>;break; case 1: break; case 8: {}break; case <><x><y/></x></>: function  prop (__proto__) { yield __noSuchMethod__ } break; let prop = 0x99, __parent__;break; {}break; break; case 5:  }\n }");
tryItOut("{}");
tryItOut("with({}) return;");
tryItOut("/*infloop*/M:do __noSuchMethod__; while(<y><z/></y>);");
tryItOut("with({constructor: prop.__iterator__ setter=  \"\" })[1,2,3,4].slice");
tryItOut("/*for..in*/M:for(let [__count__, __count__] = (null instanceof  /x/ ) - ; in let prototype, __iterator__) return\n");
tryItOut("with({}) { [1,2,3,4].slice } ");
tryItOut("L: {try { yield -1; } catch(__count__) { throw <x/>; }  }\n<bbb xmlns:ccc=\"__iterator__.__noSuchMethod__\"><ccc:eee></ccc:eee></bbb>");
tryItOut("if((<y><z/></y>.hasOwnProperty(\"__count__\")).__defineGetter__(\"constructor\", /a/gi)) { if (yield window) yield;} else {return [[1]]; }");
tryItOut("if(__iterator__.prototype = (prop(null) = (-1 in __proto__))) {export *;yyy } else  if (p) {/*infloop*/while(@foo){return; '' ; } prop, __noSuchMethod__ throw  \"\" ;");
tryItOut("\n");
tryItOut("/*infloop*/for(const prototype; <x/>; __noSuchMethod__ = [,]) *::*");
tryItOut("__count__ = <><x><y/></x></>['__iterator__'] = __proto__;");
tryItOut("break \n/*for..in*/L:for(var __proto__ in *::*) {}");
tryItOut("/*infloop*/while(({a2:z2})){let prototype; }");
tryItOut("/*infloop*/for(prototype; <x><y/></x>.(false) - this.zzz.zzz; [__parent__ if (window)]) \f{/*for..in*/for(__noSuchMethod__ = constructor.__noSuchMethod__ in 1e81) {{}([]); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in <><x><y/></x></>[this]) ;//h\n");
tryItOut("/*for..in*/for(var __noSuchMethod__(--false) in __parent__.__iterator__) {if(__noSuchMethod__(<><x><y/></x></>, <y><z/></y>)) do break ; while((({__proto__: <x><y/></x>})\t) && 0); else  if ((({ set prop __noSuchMethod__ () { return __proto__ }  }).propertyIsEnumerable(\"__parent__\")) instanceof <y><z/></y>) {continue M; } }");
tryItOut("while((prototype = <x><y/></x>.watch(\"__noSuchMethod__\", function (constructor) { yield __parent__.__iterator__ getter= ({}).__lookupGetter__ } )) && 0)const __noSuchMethod__;");
tryItOut("if({}) { if (window) {; }} else {({}); }");
tryItOut("/*infloop*/for((new (eval)(<x><y/></x>,  '' ) += prototype if ( '' )); <zzz>new <><x><y/></x></>.prop((<x><y/></x> *= @foo), <><x><y/></x></>)</zzz>; arguments ^ <y><z/></y>) {gc()/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <><x><y/></x></>) { } }");
tryItOut("return <x><y/></x>;{return function::__count__.eval(@foo); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__(function ([y]) { }.prototype getter= (<><x><y/></x></>).watch) in 5.0000000000000000000000) /*infloop*/for(let __parent__ = window; window; window) {getter =  /x/g ; }");
tryItOut("/*for..in*/M:for(var [__iterator__, __noSuchMethod__] = ({ {const __parent__, __proto__ = <x><y/></x> }: ({ __proto__: [prototype], __count__: [prop, ] }) }) = (p={}, (p.z = this)()) in (Object(((null)), this))) for(let y in []);");
tryItOut("");
tryItOut("yield\n");
tryItOut("let(prop, __noSuchMethod__ = (eval(\"yield;\", (-0)) if (false))) ((function(){return;})());");
tryItOut("M:if(((yield window))) {(1e4);gc() } else {<x><y/></x> }");
tryItOut("/*infloop*/do /*for..in*/L:for(var prototype =  ''  in  '' ) {{} } while([5.0000000000000000000000].map(function  __parent__ (__parent__) { let prop = arguments; } ));");
tryItOut("/*for..in*/L:for(constructor = __iterator__ in @foo) var __proto__;");
tryItOut("/*infloop*/for(({ getter: ({ prop: __parent__, __noSuchMethod__: __proto__ }), prop: prototype }) = __noSuchMethod__.prototype = (new RegExp()); !false.valueOf(\"number\"); (({ __iterator__: __iterator__, __parent__: __parent__ }) = 1e4)) {/*for..in*/for(var __iterator__ in window.prototype = [z1]) throw this; }");
tryItOut("with\n(this.__defineSetter__(\"__count__\", __proto__ = window && 'fafafa'.replace(/a/g, function () { return <><x><y/></x></> } ))){(({}).__lookupGetter__).applylet (__proto__ = *::*) { gc() }{} }");
tryItOut("{}");
tryItOut("prototype");
tryItOut("while((constructor = <x/>-- && (__count__.__lookupSetter__(\"prototype\"))) && 0){;yield +[<><x><y/></x></>].filter(Function); }");
tryItOut("try { gc() } finally { export *; } ");
tryItOut("yield [__noSuchMethod__\n].sort(('haha'.split).call);");
tryItOut("switch(\t /x/  if (undefined.__lookupGetter__(\"__count__\"))++) { case (new String()): /*for..in*/M:for(const [__proto__, constructor] = 1e-81 in .2) {return; }break; case ({a2:z2}) != 3.141592653589793 %= <bbb xmlns:ccc=\"<x\t><y/></x> === <y><z/></y>\"><ccc:eee></ccc:eee></bbb>: prototypebreak; break;  }");
tryItOut("with({prototype: (uneval(<y><z/></y>.__lookupSetter__(\"constructor\")))})/*infloop*/L:do {{3/0; }return; } while((uneval(false)));");
tryItOut("/*infloop*/do {__noSuchMethod__ = ({prop: (this.zzz.zzz),  set get __proto__ ()(uneval(<><x><y/></x></>)) })\t, ({ __iterator__: prop }) } while(\n\n([11,12,13,14].filter))");
tryItOut("L:with//h\n({__proto__: new Function(<x\t><y/></x>, <x/>)})throw let (constructor = false) 3;");
tryItOut("L:if(prop = @foo) break ; else  if (__noSuchMethod__[null]) {/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in undefined) ; }");
tryItOut("/*for..in*/for(__proto__ in <x><y/></x>) {gc() }");
tryItOut("with((([1,2,3,4].slice)(this,  \"\" )))__iterator__, __count__\n");
tryItOut("throw constructor;");
tryItOut("/*infloop*/while(prototype = yield @foo){break M\n{}\f }");
tryItOut("/*for..in*/for(let constructor in (((new Function(\"<x/>;\")))())) with({}) { <><><x><y/></x></> </><{__parent__\n}><ccc:ddd></ccc:ddd></{__parent__}> } ");
tryItOut("");
tryItOut("(<>__parent__ = false</>);");
tryItOut("/*infloop*/M:for(__noSuchMethod__; window.__lookupGetter__(\"__proto__\"); constructor.(<><x><y/></x></>)) return <x/>;");
tryItOut("yield this;");
tryItOut("/*infloop*/L:for(<>function ([y]) { }.__lookupSetter__(\"prop\")</>; 5.0000000000000000000000.__lookupGetter__(\"__noSuchMethod__\").*; undefined.@foo) yield false;");
tryItOut("/*for..in*/for(var [prototype, constructor] = + \"\" (5.0000000000000000000000) in []) {/*infloop*/do {yield;; } while(<x><y/></x>);const prototype = undefined\nvar __proto__, __count__ }");
tryItOut("M:with({__count__: #1=({a1:1})}){;var prototype = <x/>, __proto__ = __parent__; }");
tryItOut("/*infloop*/while((new Number( '' ).__defineSetter__(\"__parent__\", *::*)))");
tryItOut("gc()\nwith({prop: 'fafafa'.replace(/a/g, @foo)}){__proto__;(((function ([y]) { })()).watch).apply }\n");
tryItOut("/*for..in*/for(let __count__ in true( /x/g , __parent__)((this.__defineSetter__(\"constructor\", function  prototype ()<x><y/></x>)), @foo)) {M:do #1=[#1#] while(((<x/>[undefined])) && 0);export __proto__; }");
tryItOut("gc()");
tryItOut("L:switch(-3/0 :: [,,].isPrototypeOf(<x/>)) { default: <><x><y/></x></>' }");
tryItOut("{throw __count__;L:if(this.__defineGetter__(\"yield\", __parent__)) { if (prototype = eval(\"yield <x/>;\", false) >>> <><bbb xmlns:ccc=\"__proto__\"><ccc:eee></ccc:eee></\fbbb></>) var __iterator__\nexport *;} else continue ; }");
tryItOut("/*infloop*/L:for(__proto__; window; 1e-81) {;export __parent__; }__parent__, __proto__ = __iterator__;");
tryItOut("/*infloop*/for(((uneval(__parent__ * <><\tx><y/></x></>))); <x/>.propertyIsEnumerable(\"__count__\"); __parent__ = (void <><x><y/></x></>)) {M:if(false :: <x><y/></x>) throw <x/>; else  if ((yield  \"\" )) {prototype, try { ; } catch(__iterator__ if <x><y/></x>) { continue L; } catch(__count__ if <y><z/></y>) { ({}).__lookupGetter__/*\n*/ } catch\t(__parent__) { throw <y><z/></y>; } ;return [,]; }let (prototype, prop) { 1e-81; } }");
tryItOut("yield;let __proto__ = __noSuchMethod__, __count__\nyield @foo;");
tryItOut("let(constructor) ((function(){let(__noSuchMethod__ = ((({ get constructor(__noSuchMethod__, __count__)#1=[#1#] }))[<x><y/></x>.__defineGetter__(\"__parent__\", Function)])) { try { ; } catch(prototype if (Array()++)) { return; } catch(__count__) { let(__iterator__ = true,  ) { export *; } finally { return null ^= (-0); } })());");
tryItOut("let __iterator__ = window, prop\n");
tryItOut("gc()/*infloop*/M:do throw {}; while(<x><y/></x>);");
tryItOut("if(033 .@ {}.__defineSetter__(\"prototype\", ({}).hasOwnProperty)) {/*for..in*/M:for(let __parent__ in ((Math.pow)(prototype))){var __proto__;(function ([y]) { })(); } } else {return <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(let __count__ in (( { var __proto__ = <x/>, __noSuchMethod__; } )(this))){return;*; }");
tryItOut("/*for..in*/for(var constructor in (((1 for (x in [])))( /* Comment */__noSuchMethod__))){'haha'.split }");
tryItOut("if(prop) let(constructor = ((__iterator__).call(<x><y/></x>, <x><y/></x>,  \"\" ))) ((function(){with({}) { yield __iterator__; } })()); else /*infloop*/do {return <><x><y\t/></x></>;window; } while( :: prop = prop);");
tryItOut("/*for..in*/for([__parent__, __count__] = [[<x/> for each (__proto__ in <><x><y/></x></>) if (*)] for (prop([z1]) in *) for (__noSuchMethod__.__noSuchMethod__ in 1e4) for (__iterator__ in <y><z/></y>)][eval(\"return 4.;\", Boolean(<x><y/></x>) += (<><x><y/></x></> if (window)))] in delete *::*) /*infloop*/L:do {/*infloop*/for(let constructor = __noSuchMethod__; <x><y\n/></x>;  /x/ ) {gc() }break L; } while(<x/>);");
tryItOut("/*infloop*/for(var [] = <x/>.watch(\"constructor\", function(y) { yield y; return;; yield y; }); ! '' ; ({ set prop()0x99, prototype getter: [1,2,3,4].map })) throw constructor;");
tryItOut("if((prop = __count__)) {export __proto__; } else  if ( \"\"  >>> false) [1,2,3,4].slice");
tryItOut("{if(function ([y]) { }) ; else  if ([[]]) {continue ; } else {continue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in \t[1,,]) {false;( '' ); } const __proto__;");
tryItOut("__proto__\ngc() const constructor;\n");
tryItOut("prop = constructor;");
tryItOut("with({}) { yield; } ");
tryItOut("throw __parent__;");
tryItOut("while(([prototype = undefined].map(function(q) { return q; })) && 0){/*infloop*/M:for( export __count__; this; this.__defineGetter__(\"setter\", [1,2,3,4].slice)\t;  \"\" .valueOf(\"number\")) export prop;{} }");
tryItOut("L:if( /* Comment */this.prototype = (null.propertyIsEnumerable(\"prop\")).function::__count__) {while((false) && 0){yield; } const prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(const {} in  '' ) export *;");
tryItOut("/*infloop*/do yield -1; while([1]);");
tryItOut("{throw constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in ({})) (false);");
tryItOut("{{};\n\n }");
tryItOut("M:do L:while((<x><y/></x>.__defineGetter__(\"__iterator__\", (<x/>).call)) && 0)window; while(((({ constructor: prototype }) =  \"\"  ^= <><x><y/></x></>)) && 0);");
tryItOut("try { yield ({prototype: <><x><y/></x></> }); } finally { yield 1e-81; } ");
tryItOut("/*for..in*/L:for(var __parent__ in true.__count__ = window) {/*for..in*/L:for(const <><x><y/></x></> in  /x/g ) {return 1e4;{} }gc() }");
tryItOut("if(((0x99 for each (__iterator__ in <><x><y/></x></>))).hasOwnProperty(\"prop\")) { if ((([<x/>]) & yyy.__defineGetter__(\"*::*\", function  function::__noSuchMethod__ (__noSuchMethod__)(<x><y/></x> |= [,,]).@foo))) {if((__noSuchMethod__.prototype = [<y><z/></y>])) { } else  if (<x><y/></x>(try { __noSuchMethod__ = [[]] } finally { ; } )) {throw undefined;{} } else {var constructor, __iterator__;export __iterator__; } }} else return; const constructor;");
tryItOut("{/*for..in*/for(__count__ in true) {;eval } }");
tryItOut("if([1.2e3 === <x/> for each (__iterator__ in ({})) for (__proto__ in x::__parent__)]) export *; else  if ((new (<x><y/></x>)(3.141592653589793)[<x/> /= <x><y/></x>]))  else {return; }");
tryItOut("L:do yield; while((new <y><z/></y>()) && 0);");
tryItOut("let(__noSuchMethod__) { for(let y in []);");
