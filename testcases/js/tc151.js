tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("let");
tryItOut("export prop;");
tryItOut("/*for..in*/for(const prototype.__noSuchMethod__ in window) break L;");
tryItOut("M:switch((window .@x:: 0)) { case ( /* Comment */(new Date(<y><z/></y>, *::*))): export *; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; 5.0000000000000000000000; __noSuchMethod__|=Math.sin(prototype, <x><y/></x>)) /*infloop*/for(undefined; window; <x/>.valueOf(\"number\")) {let prototype; }");
tryItOut("with(() instanceof <><zzz>-new <x><y/></x>(function(id) { return id })</zzz></>)/*infloop*/do gc() while(__proto__ -= true);");
tryItOut("var prototype, __count__ =  /x/ ;");
tryItOut("if(\n__count__ & [,,]) throw this; else  if (<x><y/></x>.__lookupGetter__(\"\")) @foo;");
tryItOut("M:with({__count__: (.(<x><y/></x>))})L: {continue M;var __count__ = set; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in arguments.propertyIsEnumerable(\"__parent__\")) /*for..in*/for(let [__iterator__, __proto__] = prop = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in ((yield __count__-=*::*))) /*infloop*/for(var ({ __count__: ({ __count__: get, prop: constructor }), prop: try { export *; } catch(constructor if (function(){continue ;})()) { return; } catch(__count__) { export *; }  }) = constructor &= 0x99; undefined.__iterator__; <><bbb xmlns=\"<y><z/></y>\"> </bbb></>) <x><y/></x>");
tryItOut("/*for..in*/for(var function ([y]) { } in *) L: ;");
tryItOut("gc() const __proto__;");
tryItOut("M:if(yield ((@foo -=  \"\" ).* .. __proto__ instanceof  /x/ )) { if (prop @ (({__proto__:  \"\" }))) let(prop, __count__) ((function(){for(let y in []);})()) else let __proto__ = this.zzz.zzz;}");
tryItOut("/*for..in*/for(const constructor = ({__proto__: \n3}) in [,].@foo) ( '' )\n;");
tryItOut("yield;const __noSuchMethod__, prototype = undefined;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __iterator__ = \r@foo in __iterator__) {export *; }");
tryItOut("L: let __noSuchMethod__; const __proto__;");
tryItOut("/*infloop*/L:for(let constructor; constructor; ({__iterator__: <><x><y/></x></> })) return 0x99;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(<><x><y/></x></>)<><x><y/></x></>;");
tryItOut("<x><y/></x>.__proto__ = constructor;");
tryItOut(";");
tryItOut("try { return (-1); } catch(prototype) { export __noSuchMethod__; } finally { try { function  prop () { return (function ([y]) { })() }  } catch({export *; } if (function(){export *;})()) {  } catch(prop if *) { let __proto__ =  \"\" , prototype = 1e4; } catch(__iterator__ if function ([y]) { }) { throw #1#; } catch(__proto__) { export __count__; }  }  const __count__;");
tryItOut("if()  else  if ((Math.sin)((({prototype: <y><z/></y>})))) {}");
tryItOut("let (prop = ([1,2,3,4].slice.watch(\"__noSuchMethod__\",  \"\" ))) { if(eval(\"<x><y/></x> += @foo\", prototype = <><x><y/></x></>)) /*for..in*/for(const set in ((function(y) { yield y; (this);; yield y; })(function::constructor = __noSuchMethod__))){gc() } }");
tryItOut("return <><{prototype}><xxx>{prototype}</xxx> </{prototype}></>;");
tryItOut("/*for..in*/for(__noSuchMethod__ in new (new Function)(this.__defineSetter__(\"__count__\", function(q) { return q; }))) this.zzz.zzz;");
tryItOut("let(({ prop: __proto__, prop: [] })) { (delete) = __iterator__;");
tryItOut("try { yield try { export *; } finally { break ; } ; } catch(__iterator__ if (function(){let(prop, yield) ((function(){{}})());})()) { try { yield; } finally { function () { continue ; }  }  } catch(.hasOwnProperty(\"constructor\")['__iterator__']) { throw __parent__; } ");
tryItOut("let(prop = ({ prototype: __iterator__, prop: prop }) = (-1)[arguments]) { let(__count__ = __noSuchMethod__ = __proto__, __noSuchMethod__) ((function(){(this.__lookupGetter__(\"__parent__\")) = prototype.prototype;})());");
tryItOut("if((#0=(( /* Comment */[z1]).__noSuchMethod__ = true))) break L; else  if (yield <y><z/></y>) if(undefined) ; else let ({}) = 5.0000000000000000000000; else /*for..in*//* nogeckoex bug 349964 */ for  each(prop.__noSuchMethod__ in undefined) {;{} }");
tryItOut("while(((uneval(__parent__ & #1#))) && 0){;return; }");
tryItOut("if(window ? <y><z/></y> : undefined < (<x><y/>< __parent__ /x>.__lookupSetter__(\"__parent__\"))) { if (new gc().yoyo('fafafa'.replace(/a/g, Function))) {return <x><y/></x>; }} else {(function ([y]) { }).call }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__]\t =  in [true].map()) {yield <x><y/></x>;this; }");
tryItOut("{return;yield  \"\" ; }");
tryItOut("/*infloop*/for(let ({ constructor: ({ __count__: __parent__ }) }) = (*::*.watch(\"prop\", __iterator__\t)) .. typeof __proto__; __proto__ =  /x/g ; ({__noSuchMethod__: true}) / [1,,] |= prototype) {}");
tryItOut("/*infloop*/for(prototype; <x><y/></x>; <x><y/></x>) ");
tryItOut("(window);");
tryItOut("{/*infloop*/L:for(prototype; 1e-81; __iterator__) (<x/>);/*for..in*/for(({ __iterator__: __proto__ }) in this) {export *; } }");
tryItOut("if(({__iterator__  in  this}).valueOf(\"number\")) M:switch(constructor.__count__) { default: break;  }\nyield; else  if (((yield new ((#3={a:#3#}).watch)(<><x><y/></x></>.valueOf(\"number\"), null)))) {return window;/*for..in*//* nogeckoex bug 349964 */try { (window); } catch(constructor) { let x::__noSuchMethod__ = 1e4; }  }");
tryItOut("/*infloop*/for(const new <x><y/></x>.(__proto__)([<><x><y/></x></> if (*)], <y><z/></y>); 4..unwatch(\"setter\") != (eval(\"throw @foo;\",  \"\" )); constructor = <><x><y/></x></>) {__proto__, __proto__ = <><x><y/></x></>;with(window)\nfunction  __iterator__ (case 1: {}break; ) { yield this }  }");
tryItOut("let __parent__ = ((p={}, (p.z = [[]])()));");
tryItOut("throw __parent__\n( /x/ );");
tryItOut("with(prop = __proto__.([15,16,17,18].sort(1.2e3, [1]))){if(#1#) {; }\t else  if (<x><y/></x>) throw 3/0;function::constructor; }\nif(()) throw undefined;{ if ((({ __iterator__: prop }) = <><x><y/></x></> || undefined){const __noSuchMethod__, {let __proto__ = __noSuchMethod__; };return  /x/g ; })  x{return <x/>; } else   case /*infloop*/for(true;  /x/g ; window) let __noSuchMethod__ = *;}");
tryItOut("M:with({constructor: ((#1=\f '' ))})/*for..in*/M:for(let prop = (__parent__ = [1,2,3,4].slice()) in (export let < (null)[window])) L:with(__parent__ = <x><y/></x>)\t");
tryItOut("M:if(((gc).apply).call(<x><y/></x>, *::*, <x/>).@foo) prop = <x><y/></x>, __count__;");
tryItOut("{(window);(false); }");
tryItOut("/*infloop*/do var __parent__ = this; while([z1]);");
tryItOut("");
tryItOut("let (<x><y/></x> = <y><z/></y>, prototype = 3/0) { ; }\n/*infloop*/M:do gc() while(prop);");
tryItOut("if(undefined) if((__noSuchMethod__|=-#1# === 0/0)) {L:if((<x><y/></x>.(true))) export prototype; else export *;/*infloop*/L:do  { return <><x><y/></x></> }  while(<x/>); }");
tryItOut("if((this.__defineSetter__(\"prop\", Math.pow))) ({}).__lookupGetter__ else  if (new (new Function(\"return;\"))(new  \"\" \t())) {export *; }");
tryItOut("if(({__count__: *::*})) const prop; else  if (__parent__.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) (0/0); else {continue L;return; }");
tryItOut("L: ");
tryItOut("\nreturn;");
tryItOut("/a/gi\n/*infloop*/while((<x><y/></x> &= <x><y/></x>)){}");
tryItOut("let (({ __count__: __parent__ }) = <><{__iterator__}><xxx>{__count__}</xxx></{__iterator__}></>) { {}\f }");
tryItOut("{break M;return (-0); }");
tryItOut("with({__proto__: [11,12,13,14].some})L: return;");
tryItOut("L:if( /* Comment */window) ; else  if (033) yield true\nreturn; else {export *; }");
tryItOut("/*for..in*/for(const __proto__ in this) (<y><z/></y>);");
tryItOut("with(<y><z/></y>.yoyo(prototype)){with({__proto__: * ? [1,,] : *})export *; }");
tryItOut("/*infloop*/for([, , [prototype, __noSuchMethod__, , prototype, ], ] = [new (/a/gi)/*\n*/()].sort(({}).__lookupGetter__);  /x/g ; (this.__defineSetter__(\"__proto__\", function  prototype () { yield (-1) } ))) export *\n");
tryItOut("if([1,,]) {return;( /x/ ); }");
tryItOut("if(<x>\n<y/></x>.unwatch(\"__parent__\")) { if (prototype.(__parent__.( /x/ ))) with({__iterator__: false})const __iterator__ = <><x><y/></x></>; else M:if( /* Comment */constructor\t) {gc() }}");
tryItOut("yield;");
tryItOut("with({}) throw StopIteration;");
tryItOut("switch(#2= /x/  || Array()) { case ({__noSuchMethod__: this}): case 0: (*::*);default: break;  }");
tryItOut("/*for..in*/for(var prop in ((Math.sin)( '' .hasOwnProperty(\"prototype\")))){L: undefinedreturn; }");
tryItOut("if(this.__defineSetter__(\"constructor\", (*::* %= <x><y/></x>).__defineSetter__)) { if (<{__proto__}></{__proto__}>) {L: export __parent__; }} else {return <> </>; }");
tryItOut("/*infloop*/M:do {throw 3/0; } while(new <><x><y/></x></>);");
tryItOut("L: {gc()throw *; }");
tryItOut("{/*infloop*/for(let __iterator__ = prototype; prototype; <x><y/></x>) {const __iterator__ = false, constructor = *; }export *\nyield  ''  }");
tryItOut("try { continue ; } finally { gc() } ");
tryItOut("if(#0=({constructor: __count__})) yield constructor; const prototype; else  if ((true)(<x/>).__noSuchMethod__) gc() else {export __noSuchMethod__;var prototype; }");
tryItOut("with({case  /* Comment */((prototype = * for //h\n(prototype.constructor in case  '' : ) for each (__count__ in -3/0)) != String()) == (yield __iterator__ = __proto__): let (__parent__, __parent__ = <x><y/></x>) { let (__count__, * = function ([y]) { }) { ; } }: <x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")\t})if(this.zzz.zzz) { if (\n[1]) {return -0;(null); } else {yield <x/>;{} }}");
tryItOut("/*infloop*/while((({constructor: (<x/> & <x><y/></x>)})))export *; const __iterator__;");
tryItOut("/*for..in*/for(var prop = undefined >> constructor in 1e81) {gc() }");
tryItOut("/*infloop*/M:for(new [1,2,3,4].slice(); <><x><y/></x></>.* | window for each (prototype in this); __count__.__noSuchMethod__) {const ({ __proto__: constructor, __iterator__: __proto__ }), __count__;/*for..in*//* nogeckoex bug 349964 */ for  each(const (__noSuchMethod__) in <x><y/></x>) __noSuchMethod__ =  /x/g , constructor; }");
tryItOut("this.zzz.zzz;");
tryItOut("{constructor = -0, __count__; }");
tryItOut("/*infloop*/for(*::* = <y><z/></y>; false;  /x/ ) {prop = false; }");
tryItOut("let (constructor = (eval(\"export *;\", this))) { ( /x/ ); }");
tryItOut("if(eval(\"*::*\", <><x><y/></x></>)) {let __count__ = <><x><y/></x></>; } else {switch(*) { case 7: break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(([15,16,17,18].sort(new Function, false))['prototype'] in <><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")) {export *; }");
tryItOut("L:while((<><x><y/></x></>) && 0);");
tryItOut("if(this) {let prop;return; }\n\n");
tryItOut("M:do {return;switch(p) { case <x><y/></x>: *; } } while((('haha'.split)(4., *::*)) && 0);");
tryItOut("/*infloop*/L:for(eval(\"<><x><y/></x></>\", @foo); (((true).apply).call(<><x><y/></x></>, 3, true)); [z1].throw( \"\" )) yield <x><y/></x>;");
tryItOut("/*infloop*/do yield; while( /* Comment */constructor.__iterator__ =  /x/g );");
tryItOut("while((* || @foo) && 0){yield; }");
tryItOut("while(() && 0){<><x><y/></x></>; }");
tryItOut("with(this |= <y><z/></y>){yield; }");
tryItOut("with({__parent__: eval(\"with([@foo]){constructor = [,], __parent__ =  '' ;return; }\", (({ __count__: ({ __count__: __parent__, __count__: __parent__ }), function::constructor: __iterator__ }) = (this.__defineGetter__(\"__parent__\", function (prototype, prop) { yield <><x><y/></x>\f</> } )).watch(\"function::__parent__\", 'haha'.split)))}){yield <x/> *= <y><z/></y>;{<><x><y/></x></>;; } }");
tryItOut("return");
tryItOut("if(__count__.__proto__) {continue ;default: export *;break;  } else  if (__parent__ =  '' ) return __noSuchMethod__;");
tryItOut("/*for..in*/for(__proto__ =  \"\"  in __noSuchMethod__) {export x::prop;<><x><y/></x></> }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var ({ prop: ({ constructor: __count__, constructor: __count__ }) }) in <x/>\n) while((__iterator__ = (function ([y]) { })()) && 0)(__iterator__);");
tryItOut("constructor = __proto__;");
tryItOut("while(() && 0){/*infloop*/do return false; while(({constructor getter: <x/> })); }");
tryItOut("with({}) __noSuchMethod__ = prototype;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(const __iterator__; RangeError(window, constructor).watch(\"__proto__\", function(y) { yield y; if(<><x><y/></x></>) { if (3) {return eval;let __iterator__ = <x/>, __iterator__ = arguments; } else {return; }}; yield y; }); __iterator__ <<= <><x><y/></x></>.eval(__proto__ =  \"\" )) export ({a2:z2});");
tryItOut("with({constructor: eval(\"{}\", *::*.yoyo( /x/ ))}) /x/ ;");
tryItOut("break M;");
tryItOut("with({__proto__: constructor = __parent__}){L: __count__ = <>\f<x><y/></x></>, prototype = <y><z/></y>; }");
tryItOut("{__proto__, __parent__ =  \"\" ;([1,,]); }");
tryItOut("if(false)  else {yield  \"\" ;switch(__proto__) { default: break;  } }");
tryItOut("__proto__ = 0, __count__\nreturn;\n");
tryItOut("/*infloop*/do {yield;export *; } while((new (({}).__lookupGetter__)()));");
tryItOut("L: export *;");
tryItOut("switch(__proto__ = function::__iterator__) { case 3: L:if( '' ) export __parent__;break; case 3: /*infloop*/L:for([,,]; window; <x><y/></x>) {export __count__; }break; default: /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <><x><y/></x></>\t.watch(\"__iterator__\", function (__parent__) { yield 5.0000000000000000000000 } )) {return <><x><y/></x></>; }case 3: return *; const __iterator__;break;  }");
tryItOut("L: {return\n }");
tryItOut("with({prototype: [(this.__defineGetter__(\"__noSuchMethod__\", prop = ({ __count__: __iterator__, __parent__: __count__ })))].sort(({}\n))});");
tryItOut("/*infloop*/while(<><x><y/></x\t></>){prototypeyield constructor; }");
tryItOut("prop");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: __count__ }) = <><x><y/></x></>; <x/>; function (__iterator__) { yield [z1] } ()) {let constructor;gc() }");
tryItOut("switch(0) { case (1e4.unwatch(\"__proto__\")): default: case 7: while((function(y) { yield y; export *;; yield y; }(({a1:1}), <x/>).__noSuchMethod__) && 0)if((__proto__ = __parent__)) {var __iterator__ =  '' , constructor = <y><z/></y>; }case this ? this :  /x/ :  }");
tryItOut("/*for..in*/for(let [__parent__, prop] = (\f(@foo = -1) .@ (\t /x/g  >= __parent__)) in <x><y/></x>) {}window");
tryItOut(" /x/g \nexport <><x><y/></x></>;");
tryItOut("L:switch(<>window</>.((@foo)(this, null))) { case 3: break; case let (prototype = <><x><y/></x><>) { /*for..in*/for(let P in <><x><y/></x></>) {return  '' ;export *; } }: break; default: break; case 2: /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in __iterator__) {return; }with((({}).__lookupGetter__).@*){function::__count__ = 1e81; }break;  }");
tryItOut("export prop;");
tryItOut("yield <bbb xmlns=\" /x/g \"> </bbb>;");
tryItOut("if(new ((({ get constructor constructor ()@foo })))([undefined for (__iterator__ in prototype)], <y><z/></y>).yoyo(((uneval(null))))) {Math.powreturn true; }");
tryItOut("L: /*infloop*/for(let prototype; (prototype.throw(__proto__)); #0=[;]) {(1 for (x in [])) }");
tryItOut("/*infloop*/while(new Exception()){throw true;var prototype, prop; }");
tryItOut("/*for..in*/M:for(const __iterator__ = -#0=({__iterator__: false}) in [z1]) {({ __iterator__: [], __iterator__: __count__ })(undefined); }");
tryItOut("L:while((constructor, __parent__ = window) && 0)/*infloop*/for(* in null; new (undefined)(); ((*::*).__defineSetter__)()) {export *;; }");
tryItOut("return;\nreturn;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in this.zzz.zzz) {prop = *;yield;\nexport __noSuchMethod__;\n }");
tryItOut("if((void [15,16,17,18].sort(function  __iterator__ (__iterator__, prototype) { yield <x><y/></x> } ,  '' ))) { if (( /x/ )((<x><y/></x>--))) let (__parent__ = 0/0, prototype = constructor) { {throw #1=[#1#]; } } else {(@foo)L:if((prop = undefined)) { if (prototype.prop setter= (Function).apply) var __noSuchMethod__, prototype = this;} else gc() }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in <x><y/></x>) {continue M;continue ; }");
tryItOut("/*infloop*/do ; while(((yield 'fafafa'.replace(/a/g, <x/>))(__noSuchMethod__.__iterator__ = [[1]])));");
tryItOut("if(eval(\"prop = (<><x><y/></x></>.yoyo(null))\", this /=  /x/g )) { if (<><x><y/></x></>\n) do break L; while((<x><y/></x>) && 0);} else return;");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("throw StopIteration;");
tryItOut("M:if(this()) {yield;/*for..in*//* nogeckoex bug 349964 */ for  each(var export *; in <><x><y/></x></>) (new Function(\"gc()\")) } else  if (<y><z/></y>) /*for..in*/for(prototype =  \"\"  in true) (1e4);");
tryItOut("do export *; while((window for (prototype in 0)) && 0);");
tryItOut("this.__defineGetter__(\"constructor\", <><x><y/></x></>).watch(\"function::__parent__\", (<><x><y/></x></>.__proto__ = * in prototype))");
tryItOut("/*infloop*/M:while(new Object( /x/g \t.__lookupGetter__(\"__iterator__\")))if(<x><y/></x>) <><x><y/></x></> else  if ( '' ) {false; }");
tryItOut("throw prop;");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(prop.prototype) {__iterator__ }");
tryItOut("if(p) { if ( /x/g ) ;} else  '' ");
tryItOut("yield [11,12,13,14].map;");
tryItOut("/*infloop*/for(__noSuchMethod__; __iterator__.__defineGetter__(\"undefined\", function  prototype (prop) { return @foo } ); [[]]) {export *; }");
tryItOut("M:if(let (0.1) 5.0000000000000000000000) {M:if(__proto__) {;__noSuchMethod__ = <x><y/></x>, prop = @foo; } }");
tryItOut("L: {const yield, __parent__ = <x><y/></x>; const __proto__; }");
tryItOut("/*infloop*/for(window.@foo; ((uneval( /x/g ))); <y><z/></y>) {/*for..in*/for(var [__proto__, __parent__] =  /x/  in <x><y/></x>) export *; }");
tryItOut("export *;");
tryItOut("M:if((__parent__) = (+(*::*.__noSuchMethod__))) { if ((([*::*.__defineSetter__(\"__proto__\", *::*) for each (function::prop in  '' ) if (undefined)]) /= <ccc:ddd><!--yy--></ccc:ddd>)) {yield; } else /*for..in*//* nogeckoex bug 349964 */ for  each(var get in ({prototype: <x><y/></x>})) {/*infloop*/do {/a/gi } while(prototype.__proto__ = <><x><y/></x></>); }}");
tryItOut("{let prop = <x><y/></x>, __proto__;(<x><y/></x>.*); }");
tryItOut("/*infloop*/do /*infloop*/for(var __count__ = __iterator__ = <x><y/></x>; constructor.hasOwnProperty(\"__count__\"); __proto__ = *::*) {export constructor; } while((~))");
tryItOut("let (__parent__ = <y><z/></y>.@foo) { export __parent__; }");
tryItOut("/*infloop*/do /*for..in*/for(let __iterator__ in ((window)(*::*)))return\n while( /x/g );");
tryItOut("/*infloop*/for(new Array(null, -0); <y><z/></y>.throw(<x><y/></x>); <x><y/></x>.(window)) {gc()yield prop; }");
tryItOut("/*for..in*/for(prop in ((function  prop (prototype) { yield 1.2e3 } )(prop)))false");
tryItOut("throw StopIteration;");
tryItOut("{*::*{} }");
tryItOut("do {yield;var prop = undefined; } while((true) && 0);");
tryItOut("yield (export *);\n;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in ({}) += [[1]]\n) {;M:if(3/0) { } else  if (constructor) {gc(); } else {let __parent__, prototype;export *; } }");
tryItOut("let ([__count__] = prototype =  /x/g , __count__ = #1=[#1#]) { if( '' ) { if (function(id) { return id } .@*:: __count__ = @foo, __count__ = prototype) yield; else yield null;} }");
tryItOut("/*infloop*/for(<x><y/></x> << *::* * __proto__ = -1; ([--prop if (<x/>)].propertyIsEnumerable(\"prop\")); <x/>) {throw prop; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in __count__) ");
tryItOut("with({__count__: *}){ /x/g , constructor; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = prototype = [[1]] in  \"\" ) {0;/*for..in*/for(__proto__ = (this.yoyo(this)) in this)  }");
tryItOut("export *; const __iterator__;");
tryItOut("M:if(*::*) {yield * } else __noSuchMethod__ = __count__;");
tryItOut("with({__parent__: (@foo .. <y><z/></y>).@*.__lookupSetter__(\"x::__count__\")\n}){yield <x><y/></x>;__noSuchMethod__, __proto__; }");
tryItOut("/*for..in*/L:for(var [__parent__, __count__] = [, __iterator__, prototype, ] = ({ __noSuchMethod__: constructor, prototype: prop }) in eval(\"(<y><z/></y>);\", ({}))) {(<y><z/></y>);\ngc()\n }");
tryItOut("L:while(([({prototype: <y><z/></y>})]) && 0)L: let __iterator__ = <x><y/></x>;");
tryItOut("if(1e81) { if (<><x><y/></x></>) /a/gi} else const prop = this, __count__;");
tryItOut("M:if(this -= <x><y/></x>) \nbreak ;\n");
tryItOut("with(*)1e+81;");
tryItOut("switch((--(1.2e3.eval(true) && ((<x><y/></x>)[[[]]])))) { default: throw 1.2e3;\nthrow false;\nbreak; case [prototype = (function ([y]) { })()].sort((#1=[#1#]).__defineSetter__): break; break;  }");
tryItOut("for(let y in [5,6,7,8]) return (<><x><y/></x></> / <x><y/></x> .@x:: ((p={}, (p.z = <y><z/></y>)())) ? true & __parent__ : (new (function(y) { yield y;  \"\" ;; yield y; })()));");
tryItOut("/*infloop*/do {if(__iterator__.unwatch(\"__parent__\").hasOwnProperty(\"prop\")) {{} } else gc() } while(<x/>.__defineGetter__(\"__proto__\", function ()[z1]));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in Date(( \"\" .__defineGetter__(\"__proto__\", function () { null } )))) { set __proto__ __count__ (setter, __iterator__) { return ({ prop: prototype }) } /*infloop*/M:while((p={}, (p.z =  /x/ )())){var __noSuchMethod__; } }");
tryItOut("eval");
tryItOut("for(let y in []);");
tryItOut("if(<x><y/></x>.(<x/>)) prototype = window; else function  __noSuchMethod__ (__noSuchMethod__, __parent__) { yield <x><y/></x> } ");
tryItOut("'haha'.split");
tryItOut("/*for..in*/M:for(__iterator__ in  '' ) {var __count__ = null, __noSuchMethod__; }");
tryItOut(";[,,];\nvar __iterator__ = <y><z/></y>, prop = this;\n");
tryItOut("if(({ prop: __parent__ }) = <y><z/></y>) return;");
tryItOut("if(new ({}).__lookupGetter__()) { if (this.zzz.zzz) {prop = prop, prototype =  \"\" ; } else { }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in  /x/g ) __noSuchMethod__ = #1#, __noSuchMethod__ = this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((__noSuchMethod__) in @foo) break \nfor(let y in [5,6,7,8]) throw window;");
tryItOut("if(033) {throw  '' ; }");
tryItOut("export constructor:");
tryItOut("/*infloop*/while(#0=[\n(false)(<x/>)])if(window) return;");
tryItOut("undefined");
tryItOut("L:if(((<x><y/></x>.__iterator__).throw(({}).__lookupGetter__())) & ('haha'.split)()--) { if (new ({__count__: 0x99, prototype:  \"\"  })()) } else {M:if(null) yield <><x><y/></x></>; else return <x><y/></x>;export prop; }");
tryItOut("/*infloop*/for(function(y) { yield y; ; yield y; }; Function() |= ([1,,] | <><x><y/></x></>); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) throw false;");
tryItOut("{return  '' ;return  /x/g ; }");
tryItOut("this.zzz.zzz\n/*infloop*/do {export *;gc() } while(arguments);");
