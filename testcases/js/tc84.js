tryItOut("/*infloop*/for(__parent__; (new +<x><y/></x>()); RegExp(@foo, @foo)) L: ;");
tryItOut("switch(@foo) { case ({__iterator__: ({__proto__: prop}) }): break;  }");
tryItOut("break L\n\nthrow undefined;\n");
tryItOut("L\f:if((let (__proto__ = this, __parent__) (new RangeError(arguments, <><x><y/></x></>)) % [11,12,13,14].map)) export prototype; else  if (<><ccc:ddd><!--yy--></ccc:ddd></>) /*infloop*/while(<x><y/></x>){; }");
tryItOut("let(__iterator__ = __parent__.__proto__) { this.zzz.zzz;");
tryItOut("{{}let __noSuchMethod__ = <><x><y/></x></>; } const __count__;");
tryItOut("let(constructor, __proto__ = (<xxx {__count__}={(prop.watch(\"prop\", gc))} />.(__proto__))) ((function(){for(let y in []);})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in window) {with({x::__count__: <x><y/></x>}){} }");
tryItOut("if(<>({ prop: constructor, __count__: __iterator__ })</>.valueOf(\"number\")) { if (<x><y/></x>.__lookupGetter__(\"__iterator__\")) {yield <><x><y/></x></>;<y><z/></y> } else {(Math.sin).callthrow prototype; }}");
tryItOut("for(let y in [5,6,7,8]) with({}) [1,2,3,4].map");
tryItOut("L:if(<y><z/></y>) { if ((<x/>)) if(window) //h\n{ if (1e81) yield;} else {const __proto__ = <><x><y/></x></>;return null; } else 'haha'.split}");
tryItOut("/*for..in*/for(const [constructor, prop] = (({ prototype: prototype, __parent__: [, , [, , , ]] }) = let (__noSuchMethod__, __noSuchMethod__) <x><y/></x>.throw(<y><z/></y>) *= (undefined > undefined)) != [__iterator__, , ({ prop: __iterator__ })] = new new [1,2,3,4].slice(window)((new (@foo)())) in [__proto__] = <><x><y/></x></>.__lookupGetter__(\"constructor\")) {throw 4..watch(\"__iterator__\", function(y) { yield y; function  prototype (<x/>, __noSuchMethod__) /x/g ; yield y; }); }");
tryItOut("/*infloop*/L:for(1e81; <><x><y/></x></>; __iterator__%=<><x><y/></x></>) {var __count__ = window;export *; }\n");
tryItOut("/*for..in*/for(const constructor in ((Math.sin)(window)))let __count__, __count__;");
tryItOut("let (constructor, __iterator__) { /*for..in*/for(const ((1 for (x in []))())['__count__'] in ((function(y) { yield y; __count__ = prop, constructor;; yield y; })((#1=window >>>=<><x><y/></x></>)))) for (constructor.prototype in <x><y/></x> % __parent__) for each (__count__ in <><x><y/></x></>) if (1e81) }");
tryItOut("let constructor, __parent__;");
tryItOut("/*for..in*/for(let prop = ((this.zzz.zzz).hasOwnProperty(\"__count__\"))//h\n in #2=[<x><y/></x>]) (this ? <x><y/></x> : [z1,,]);");
tryItOut("/*for..in*/for(var prototype in <><x><y/></x></>\t) ;");
tryItOut("/*for..in*/L:for(var prop in ((Math.pow)(__iterator__ = *)))function  __proto__ (__iterator__, prop)[[]]");
tryItOut("if(prop.__parent__ = [z1,,]) {with(<bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb>)[z1] } else {var constructor, prototype = 1e4; }");
tryItOut("try { {}\nreturn __proto__;\n } catch(__proto__) { this.zzz.zzz; } ");
tryItOut("try { yield; } catch(__parent__ if (function(){{}})()) { var constructor; } finally { (<y><z/></y>); } ");
tryItOut("while((let (__count__ = 5.0000000000000000000000, __parent__) <><x><y/></x></> :: true) && 0)let (prototype) { this.zzz.zzz; }");
tryItOut("/*infloop*/do {yield  '' ; } while(__iterator__ = __noSuchMethod__.prop = <x><y/></x>);");
tryItOut("L:with(((@foo.watch(\"__proto__\", Function)).valueOf(\"number\")))<x><y/></x>");
tryItOut("let(prop = __iterator__.__count__ getter= 'haha'.split) ((function(){try { gc() } catch(__count__) { prototype; } })());");
tryItOut("/*for..in*/for([prototype, __iterator__] = \nwindow in  { (<y><z/></y>); } , __count__) {(undefined); }");
tryItOut("throw __noSuchMethod__;");
tryItOut("try { return; } catch(prop) { let(constructor = <><x><y/></x></>.__lookupGetter__(\"x::__count__\"), prop) { __proto__ = __count__; } ");
tryItOut("var constructor = window\nexport __parent__;");
tryItOut("L: {{} }");
tryItOut("/*for..in*/for(var constructor = ((__count__ = [] .. new __proto__ = <><x><y/></x></>([[]])).call((__proto__.__noSuchMethod__ setter= ({}).hasOwnProperty), <y><z/></y>)) in [arguments ?  \"\"  : window].some(Function)) {/*infloop*/M:for(prop; @foo; <><x><y/></x></>) yield 3;(@foo); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__.prop in (__count__ = ({constructor: (prototype.__proto__ = [15,16,17,18].some(Math.sin, 1e-81)),  set __noSuchMethod__() { return [let (constructor = (-1)) <x><y/></x>].some(<x><y/></x>) }  }))) {if(((#2=[new <><x><y/></x></>()])(__parent__ = __parent__, \tnew <x/>(<x/>)))) var prop = __noSuchMethod__; else  if ((\n[[1]])) {break ; } }");
tryItOut("if(window) gc() else {({});export prototype; }\nlet __noSuchMethod__ = (-0), __noSuchMethod__;");
tryItOut("/*for..in*/for(const <x><y/></x> in ((this)(undefined)))(null)\t;");
tryItOut("if(__noSuchMethod__.((this.zzz.zzz))) gc() else  if ((\n '' )(<x><y/></x>.*)) prop\f\n");
tryItOut("/*for..in*/for([prototype, __parent__] = <x><y/></x>.__defineGetter__(\"__count__\", Function) in <><x><y/></x></>) /*infloop*/for(let constructor; <x><y/></x>; *) yield;");
tryItOut("if(yield null) {if(window /  /x/g ) {throw [z1,,]; } else {yield <x/>;break M; }if(null.__defineGetter__(\"__proto__\", function  prototype (constructor, __iterator__) { yield @foo } )) {(null);new Function } else  if ((new gc() for each (prop in <x><y/></x>) if (-0))) {yield undefined; } }");
tryItOut("/*infloop*/for(const [, ({ __count__: [, ({ __noSuchMethod__: ({ __count__: __iterator__, __iterator__: __noSuchMethod__ }), prototype: __proto__ }), ({ __count__: ({ __iterator__: constructor }), __proto__: __parent__ }), ] }), ] = ({ prototype: prop }) = [this for (__parent__ in <x><y/></x>)] << (<x/> >>= undefined)[<><x><y/></x></> ^= [1]]; (<><x><y/></x></>\n); ({})) {/*infloop*/while(([,]))window; }");
tryItOut("switch(((yield Function))) { default: <x><y/></x>break;  }");
tryItOut("with({}) { __count__ = [1,,]['prop'] = prop; } ");
tryItOut("/*infloop*/M:for(__noSuchMethod__; function ([y]) { } -= null; null) {*;; }");
tryItOut("M:switch(3 ? <x/> : *::*) { default: break;  }");
tryItOut("M:while((([,,z1].*)) && 0){with(*){yield  '' ; } }");
tryItOut("L: {let __count__; }\n");
tryItOut("L:do export __noSuchMethod__; while((@foo for (__noSuchMethod__ in prop)) && 0);");
tryItOut("if(\twindow) {yield true;return <><x><y/></x></>; } else  if ([[1,,]].some((window).__defineSetter__)) {with(__proto__){{}continue M; }; } else if(<x><y/></x>.propertyIsEnumerable(\"__count__\")) {yield <x><y/></x>; } else  if (<><x><y/></x></>.eval( /x/ )) yield <x/>; else ");
tryItOut("while((<y><z/></y>\n) && 0){}");
tryItOut("let ( { yield __iterator__ = *::* } , __proto__ = (__count__.__count__ = <x><y/></x>)) { {} }");
tryItOut("yield 0;");
tryItOut("");
tryItOut("let([] = new <x><y/></x>) ((function(){throw prop;})());");
tryItOut("/*for..in*/for(let constructor = new (this)(window, *) in <><x><y/></x></>) const prototype = <x/>;");
tryItOut("let(({ __iterator__: constructor, prototype: ({ __count__: __count__ }) }), __iterator__) { let(({ prototype: [constructor, , __noSuchMethod__, constructor, ], __noSuchMethod__: __noSuchMethod__ }), constructor) ((function(){for(let y in []);})());");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) with({}) { export *; } ");
tryItOut("/*for..in*/M:for(var prototype in (((1 for (x in [])))(this.isPrototypeOf(0x99)))){export __iterator__;{} }");
tryItOut("if(this.__defineSetter__(\"__parent__\", Math.sin)) {/*infloop*/M:do return; while(((<x/>).__lookupSetter__(\"__noSuchMethod__\")));/*infloop*/for(({ __parent__: prop }) = __proto__.prop getter= (<y><z/></y>).watch; <><x><y/></x></> > <y><z/></y>; <><x><y/></x\t></>)  { yield __parent__ >>>=<x><y/></x> }  } else  if (constructor =  '' .__lookupGetter__(\"__proto__\")) {while((__proto__ = #1#) && 0){export *;case 2: null;break; default: export *;break; break; case [z1,,]: yield;__noSuchMethod__ = ({})break; case <><x><y/></x></>: gc() } }");
tryItOut("break ;");
tryItOut("let __noSuchMethod__\n");
tryItOut("{}\nvar __proto__ = delete;\n");
tryItOut("throw constructor;");
tryItOut("/*for..in*/for(var [__iterator__, __count__] = 1e-81.__parent__ = *::* in <y><z/></y>) const prototype = <x/>, __noSuchMethod__ = __noSuchMethod__;");
tryItOut("{export *; }");
tryItOut("yield;");
tryItOut("if(*::*.__defineSetter__(\"__iterator__\", (1 for (x in [])))) { if ((((Function).apply).apply).call([], true)) [z1,,] else {}}");
tryItOut("if(@foo) break ; else  if (<x/>) {yield; } else throw <x><y/></x>;");
tryItOut("const __count__ = <x><y/></x>, constructor = ({});");
tryItOut("while((*) && 0)throw @foo;");
tryItOut("do yield; while((true) && 0)");
tryItOut("if(<\fx><y/></x> ? window : __noSuchMethod__ == x::__proto__ = 0) <><x><y/></x></>;");
tryItOut("/*for..in*/M:for(let __iterator__ in ((eval)(1.2e3 if (prop).__lookupGetter__(\"__noSuchMethod__\"))))yield this;");
tryItOut("\flet __iterator__ = __parent__, __proto__ = __count__");
tryItOut("L: {/*infloop*/for( /x/g  .@x:: 3/0; <x/>.watch(\"__iterator__\"\t, (window).apply)\t; 1e+81\n) {/*for..in*/for\f(let __parent__ in ((function  constructor (prototype, __parent__)*)( \"\" )))throw <x/>; } }");
tryItOut("with(yield)gc()");
tryItOut("/*infloop*/do {return this;/*infloop*/L:for(null; <><x><y/></x></>; <x><y/></x>) export __iterator__; } while(false);");
tryItOut("if((constructor.__proto__ setter= new Function)) { if (*::* &=  /x/ ) {L: return;export __parent__; } else }");
tryItOut("M:if(*::*) { if (*::*) {{} } else throw 4.;}");
tryItOut("/*for..in*/M:for(const [constructor, prototype] = ({__count__: window, __parent__: <><x><y/></x></> }) in 3.141592653589793) {gc() const __iterator__; }");
tryItOut("do yield __parent__; while(((__iterator__; const constructor; @ __iterator__(this.__defineGetter__(\"__parent__\", (new Function(\"{}\")))))) && 0);");
tryItOut("return constructor() ^ false.__lookupSetter__(\"__proto__\");");
tryItOut("break M");
tryItOut(";");
tryItOut("switch(1.2e3) { default: continue ;break; ( /x/ );case 7: break;  }");
tryItOut("if((__proto__ = (false :: <x><y/></x>))) { if (3.141592653589793 <<= (-0).throw(let (constructor = window) 1e-81) ? #1=[.2] : <y><z/></y> .@  /x/  > (-0)) /*infloop*/while( \"\" )} else {(({__count__: <x/>}));{} }");
tryItOut("__count__;\nif(<x><y/></x>) { if (null) {; }} else { }\n");
tryItOut("{} const __proto__;");
tryItOut("__iterator__ = __noSuchMethod__(/;");
tryItOut("M:if(<bbb xmlns:ccc=\"new Iterator( /* Comment */ '' , [*::*])\"><ccc:eee></ccc:eee></bbb>.(({ __proto__: __iterator__, constructor: ({ (__count__.prop): [__noSuchMethod__, __iterator__, ], x::constructor: [] }) }) =  /x/g )) {yield @foo\ngc() } else {yield #3={a:#3#}\nthrow [[1]];return [1]\n }");
tryItOut("/*for..in*/for(let ({ __noSuchMethod__: ({ __proto__: [({ prototype: ({ <x><y/></x>: __iterator__, x::prop: prop }) }), ({ prop: [], __noSuchMethod__: getter })], delete: ({ prop: constructor, __parent__: ({ __iterator__: ({ __count__: constructor, prototype: __count__ }), __noSuchMethod__: ({ constructor: prototype, __iterator__: __parent__ }) }) }) }), __noSuchMethod__: __proto__ }) in ((((#0=({__count__: false}) !== ('fafafa'.replace(/a/g, 'haha'.split))) -= window).watch)((*::* <<= __proto__((new ([1,2,3,4].map)(__count__, <y><z/></y>)).yoyo(0.1.watch(\"__iterator__\", eval))))))){let __parent__; }");
tryItOut("try { __parent__ = *::*, __noSuchMethod__; } catch(__count__ if (function(){const __proto__ = __iterator__, __noSuchMethod__ = <><x><y/></x></>;})()) { yield <x><y/></x>; } finally { ; } ");
tryItOut("");
tryItOut("/*infloop*/while((#1# @ window))");
tryItOut("yield  \"\" ;");
tryItOut("let prototype = <x/>");
tryItOut("<><x><y/></x></>;");
tryItOut("with({__iterator__:  \"\" .\nhasOwnProperty(\"prototype\")})yield;");
tryItOut("/*for..in*/L:for(const constructor = this.__defineSetter__(\"prototype\", (1 for (x in []))) in @foo) {export prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("return;");
tryItOut("if(((eval(\"{}\", <y><z/></y>)))[([undefined].filter(false))]) { if (( /* Comment */ '' ) ? <x/> <= * : <y><z/></y> / <x><y/></x>) ; else {\nreturn; }}");
tryItOut("if((__parent__+=<><x><y/></x></>) :: <{__parent__}> </{__parent__}>) {var __parent__, __noSuchMethod__ =  \"\" ;return this;\f }");
tryItOut("/*infloop*/while(*){export __parent__;export *; }");
tryItOut("do {return;gc() } while((undefined) && 0);");
tryItOut("/*infloop*/L:while( for (* in this.zzz.zzz) if (@foo.__defineSetter__(\"__count__\", /a/gi)))if(*) {gc()var __iterator__ =  /x/g , __count__; }");
tryItOut("/*infloop*/L:for(const __proto__; \nwindow; 0x99. do ) export *;");
tryItOut("M:if(((this.__defineSetter__(\"prop\", (( \"\" ).__defineSetter__).apply).__defineSetter__(\"constructor\", function () { return; } ))[(this.__defineSetter__(\"constructor\", ({}).hasOwnProperty)).yoyo(*::*)])) { if (undefined(<>{}</>, this)[false.__lookupSetter__(\"prototype\")]) export prop; else {export *;yield; }}");
tryItOut("break ;");
tryItOut("return;");
tryItOut("throw 5.0000000000000000000000;");
tryItOut("if(<><x><y/></x></>) { if ([z1,,]) {export constructor;[[]]; } else { }}");
tryItOut("return;\nwith({}) { __parent__ = __noSuchMethod__; } \n");
tryItOut("(window)\n{}");
tryItOut("\nM:if(false ^= null >>>=this.__defineGetter__(\"__parent__\", prototype) *  /* Comment */<><x><y/></x></>) return; else {return 5.0000000000000000000000;export __parent__; }");
tryItOut("let(__proto__, __count__ = <y><z/></y>.prototype) { this.zzz.zzz;");
tryItOut("return (<y><z/></y>--);");
tryItOut("");
tryItOut("gc()\n{}");
tryItOut("{const constructor\n{}yield; }");
tryItOut("/*infloop*/__iterator__while((yield <><x><y/></x></>))/*infloop*/for(let __iterator__; null; undefined) <><x><y/></x></>;continue ;");
tryItOut("if({}.__defineSetter__(\"constructor\", (new Function(\"return <x/>;\")))) { if ((__iterator__ = <x/> .@ <x><y/></x>).isPrototypeOf(-0.valueOf(\"number\").watch(\"__iterator__\", (*).__defineSetter__))) yield;} else L:if(__proto__ = this) {/*for..in*/L:for([__count__, __noSuchMethod__] = *::* in true) {yield  /x/ ;return [[]]; }\f }");
tryItOut("if(<><x><y/></x></> || false) { if ((false.__defineSetter__(\"constructor\", <><x><y/></x></>))) (<y><z/></y>);} else export *;");
tryItOut("/*infloop*/for(({ [1,,] - 1.2e3 == ({a1:1}).prop\t: __proto__ }) =  /x/g ; <><><!--yy--></></>.__lookupGetter__(\"constructor\"); __proto__ = [,,].__iterator__) {/*for..in*/for(let __noSuchMethod__.__count__ in [1,,]) {<x><y/></x>; }/*for..in*/for(var __parent__ in (({__noSuchMethod__ getter: Math.pow, prototype setter: __iterator__ }))) let (function::__proto__, constructor) { return; } }");
tryItOut("/*for..in*/for(let __count__\t = ({} >= this) in (let (get = this.__defineSetter__(\"prototype\", (1 for (x in []))), __parent__) prototype)) {L:switch(true) { case 4:  }if(*::*) return <><x><y/></x></>; else export *; }");
tryItOut("let __proto__ =  /x/g ;yield <x/>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/L:for(__iterator__ = ((new function(q) { return q; }(<x/>, <x/>))(__count__)) in (prototype.(*::*))) export constructor;");
tryItOut("switch((uneval(<><x><y/></x></>))) { default: case <x><y/></x>.propertyIsEnumerable(\"prop\"):  }");
tryItOut("switch(<><bbb xmlns:ccc=\"({__count__: eval(\"var __count__ = *::*;\", null)})\"><ccc:eee></ccc:eee></bbb></>.__noSuchMethod__ = prop.prop getter= Math.sin.yoyo([15,16,17,18].map(window, [[1]]))) { case (yield (uneval(null.yoyo( \"\" )))).yoyo(<{constructor}><ccc:ddd><!--yy--></ccc:ddd></{constructor}>.(this)): with({__iterator__:  \"\" }){ } const __noSuchMethod__;case 1: if(((new Math.sin())())) { if (function ([y]) { } for (__iterator__ in this)) {; } else var get;}break; break; /*infloop*/for(__count__;  /x/ ; this) {continue ;; }\nexport constructor;\ndefault: break; case 1:  }");
tryItOut("/*for..in*/for(var <y><z/></y> !== export __count__;['function::__count__'] in 033) yield  /x/ ;");
tryItOut("{return;L: {var __iterator__ = <x><y/></x>; } }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = 0x99; <><x><y/></x></>; function(id) { return id }) {__proto__ }");
tryItOut("var prop = #3={a:#3#}; const __iterator__;");
tryItOut("continue L\n");
tryItOut("{var __count__;/*infloop*/while((uneval(#1=[#1#])))prototype, __count__; }");
tryItOut("if((new (( { yield <x><y/></x> } ).__defineSetter__)( /x/ ))) ; else  if (({a1:1})++) yield; else let __noSuchMethod__ = [[]], constructor;");
tryItOut("{return; }");
tryItOut("/*infloop*/L:while(4.){__noSuchMethod__ = <x><y/></x>; }");
tryItOut("export __noSuchMethod__;");
tryItOut("yield ({__iterator__:  ''  });");
tryItOut("/*infloop*/while(prop = <x><y/></x>){throw #3={a:#3#};yield this; }M:if(<x><y/></x> >=  \"\" ) ' else  if ((<><x><y/></x></>.throw(<y><z/></y>))) {return {}; } else 0/0;");
tryItOut("if(<y><z/></y>) { if (1e-81) const constructor;} else {{}export __count__; }yield;");
tryItOut("if((constructor.(__iterator__))) if((Function)) { if ((<><x><y/></x></>)(-0, __parent__)) {gc() }} else ; else export __proto__;");
tryItOut("if(([constructor])) {switch(<x><y/></\tx>(undefined, constructor)) { default: if(prop = *::*) {((-0));yield __iterator__; } else var __parent__, __count__;case  '' :  }M:with({constructor: true}){__count__ = <x/>, prototype; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((false)(*) in <><x><y/></\tx></>) {M:switch(<><x><y/></x></>) { default: let __iterator__ =  \"\" ;case this: break; case __parent__: case *: break;  } } const prop\nwith( \"\" )var constructor = <x/>, __iterator__;");
tryItOut("with({__parent__: window / <><x><y/></x></>})yield;");
tryItOut("L:with((<x><y/></x> * * if (@foo)))if(null) var __proto__; else  if (<><x><y/></x></>) return; else (let.constructor setter= [,,].valueOf(\"number\"))");
tryItOut("M:if((eval(\"(uneval( \\\"\\\" ))\", [<x><y/></x>].filter(function  x::__parent__ (__parent__)__proto__)))) {var __parent__;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in window) (<x/>);\n\n");
tryItOut("/*infloop*/for(false; <x><y/></x> === <><x><y/></x></> <= prototype.(prop, each); [11,12,13,14]\t.map) {{continue M; } }");
tryItOut("switch(constructor.__proto__ getter= Math.pow) { \tdefault: (); }");
tryItOut(" for each (__proto__ in [<x/> if ( /x/g )]) for each (__proto__ in -3/0) for each (constructor in <x/>) for (__count__ in (-1)) const __iterator__;");
tryItOut("L: yield;");
tryItOut("/*infloop*/for(<y><z/></y>.__parent__; ([true].map([1,2,3,4].slice).__lookupGetter__(\"__iterator__\")); (({ get __count__ prototype (__count__) { return <y><z/></y> }  })).prototype) {__parent__: let (prop = .2) undefined[1,,]; }\nwith(null)if(window) {export *;gc() } else  if ( /x/ ) var __iterator__;");
tryItOut("{export __proto__; }");
tryItOut("/*for..in*/M:for(const __proto__ in window) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in arguments) {var __proto__, __noSuchMethod__;let __parent__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in ({__parent__: [15,16,17,18].some(function  __noSuchMethod__ (__parent__, __count__)<x/>, __iterator__)})) {}");
tryItOut("if([[1]]) {gc() } else throw StopIteration\n");
tryItOut("with(false)L:if([<><x><y/></x></> for (x::__iterator__ in <x><y/></x>\t)].__lookupGetter__(\"__iterator__\")) { if ((prototype.delete getter= <y><z/></y>)) throw 3.141592653589793;} else yield;");
tryItOut("/*infloop*/for(const __iterator__ = (__noSuchMethod__ = <><x><y/></x></>); <x/>; (this.zzz.zzz)) {let  continue , __iterator__; }");
tryItOut("with( /* Comment */0/0)export constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__/*\n*/ in #1=[#1#]) <>\r<x><y/></x></>;");
tryItOut("/*for..in*/for(let [prop, __iterator__] = 3/0 in  /x/ ) {[1,2,3,4].slice(false); }");
tryItOut("if(window) { if (()) throw (undefined ^ <><x><y/></x></>);} else Function");
tryItOut("/*infloop*/do (<x/>); while(this.valueOf(\"number\"));");
tryItOut("export *;\n(function ([y]) { })();\n\ndo {switch(*) { default:  } } while(((new 5.0000000000000000000000())\t) && 0);\n");
tryItOut("");
tryItOut("export *; const prototype;");
tryItOut("if(({ let.__proto__: __proto__, __iterator__: ({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: __noSuchMethod__ }) }) = <><x><y/></x></> ? this : <x><y/></x>.isPrototypeOf(!<><x><y/></x></>)) { if (({ __parent__: constructor, constructor: [] }) = <><bbb xmlns:ccc=\" /x/  >>>=__iterator__\"><ccc:eee></ccc:eee></bbb></>) if(4.) { } else {if(<><bbb xmlns=\"<x/> ? @foo : [,,z1]\"><ccc:ddd><ccc:ddd><x><y/></x><!--yy--></ccc:ddd></ccc:ddd></bbb></>) {gc()throw constructor; } else  if (([15,16,17,18].filter(new (__noSuchMethod__)(<><x><y/></x></>, <y><z/></y>), (constructor = <><x><y/></x></>)))) if(false) { if (window\t) {gc() }} else {<x><y/></x>; }export *\nwindow; }}");
tryItOut("/*infloop*/while((new ([1,2,3,4].slice)( /x/g ).__parent__ = (uneval(*))--)){/*infloop*/for(var ({ __iterator__: __iterator__, prototype: [prop, __proto__, ] }) = ~<><x><y/></x></>; .2; (Date() ? undefined ? [z1,,] : __noSuchMethod__ : __parent__ = window)) {M:while((<><x><y/></x></>) && 0)3.141592653589793; }if([__iterator__,  { return constructor-=*::* } ] = __proto__) export *; else {yield; } }");
tryItOut("while((*) && 0)/*for..in*/for(let __iterator__ in  /x/g ) {}\n__parent__ = <><x><y/></x></>, __iterator__;\n");
tryItOut("{let __count__ = [,], __noSuchMethod__ = constructor;'haha'.split }");
tryItOut("{/*infloop*/for(let [({ x::constructor: prop, __count__: constructor }), , , , ] = ({__proto__: this.zzz.zzz }); (this.__defineGetter__(\"__noSuchMethod__\", /a/gi)); ((new Object( set __noSuchMethod__ prototype () { yield .2 } )).@foo)) {export __count__; }gc() }");
tryItOut("/*infloop*/do break ; while(1.2e3 *= this.__defineGetter__(\"__iterator__\", ([1,2,3,4].slice).apply))\nreturn;");
tryItOut("with({}) ;");
tryItOut("/*infloop*/L:for(var __count__ = [15,16,17,18].filter(function  prop () { yield @foo } , case 0: let constructor;break; default: break; function  __noSuchMethod__ (__iterator__) { return * } break; break; case 6: var __proto__, constructor = @foo;break; case <x><y/></x>: (this).__defineSetter__); __parent__ << -0; (((__count__).watch).call(*, ))) function(id) { return id }");
tryItOut("/*infloop*/M:for(__iterator__; *; ({a2:z2})) gc()");
tryItOut("__iterator__ = prop;");
tryItOut("/*infloop*/for(let __iterator__ = this; <><x><y/></x></>.__count__; eval(\"<><x><y/></x></>\", *::*)) export __iterator__");
tryItOut("/*infloop*/for(( /x/ .__parent__ = this) @ (new function  __iterator__ (__iterator__) { return __noSuchMethod__ } ()); #3={a:#3#} === *; __proto__.(undefined)) {if(*::*) const constructor = *; else  if (( /* Comment */*::*)) yield null; else export prototype; }");
tryItOut("/*for..in*/L:for(let [prop, __noSuchMethod__] = ((<x><y/></x> , false) <<= __parent__ = false) in <><x><y/></x></>) throw <x/>;");
tryItOut("if((constructor.prop setter= Math.pow) - 'fafafa'.replace(/a/g, (1 for (x in [])))) { if ((<y><z/></y>.watch(\"__iterator__\", (new Function(\"__count__;\"))))) return __noSuchMethod__.__iterator__;} else {if(eval(\"([, ] = eval(\\\"return;\\\", <x><y/></x>))\",  /x/  .@*:: 3.141592653589793)) { if (this.__defineSetter__(\"__count__\", this)) ;} else let prototype = <><x><y/></x></>, constructor = <x/>; }");
tryItOut("M:switch( /* Comment */(\n({a1:1}) >>> yield window)) { default: with((__noSuchMethod__ = <x/>)){return;let __noSuchMethod__; }break; case Math.sin: throw ( /x/g .__lookupGetter__(\"__iterator__\") .. (null ? <><x><y/></x></> : *) / __noSuchMethod__.propertyIsEnumerable(\"__noSuchMethod__\"));break; case 8: {true; }case 8: case __proto__ = __iterator__:  }");
tryItOut("if((function ([y]) { })()()) export null; else  if ((new ((gc()))([ /x/g ] <<= (this.__defineGetter__(\"prototype\", function  __noSuchMethod__ (constructor) { ; } )))).__defineSetter__(\"__iterator__\", [1,2,3,4].map)) if(([,,].__iterator__)) { if (({a1:1})) let __iterator__, prototype; else export *;}");
tryItOut("<y><z/></y>{}");
tryItOut("<x><y/></x>;");
tryItOut("/*infloop*/do yield; while((eval(\"return;\", (eval(\";\", ({a2:z2}))))));");
tryItOut("throw __iterator__;");
tryItOut("if(true) throw <><x><y/></x></>; else  if (@foo) {let __parent__ = 1e-81; } else {gc() }");
tryItOut(" const __parent__;");
tryItOut("prop = __proto__;");
tryItOut("switch((#1=*::*)) { case 8: let constructor = 1e4;break;  }");
tryItOut("if(*) yield this; else  if (<x/>) {\ffunction (constructor) { throw <x><y/></x>; }  }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in ((/a/gi)((({__noSuchMethod__: <><x><y/></x></>,  set prototype __proto__ (__proto__) { yield <x/> }  }))))){yield;yield __proto__; }");
tryItOut("{return;\rexport *; }");
tryItOut("yield [,,];");
tryItOut("{L:if(__iterator__ <<= this) gc else  if (let = <x><y/></x>) gc() else yield <x><y/></x>;null; }");
tryItOut("let(constructor = <><x><y/></x></>.prototype, constructor) ((function(){throw __iterator__;})());");
tryItOut("{const prop; }");
tryItOut("export *;");
tryItOut("L: /*infloop*/M:for(prop; throw undefined; null) do {export *;export *; } while((<><x><y/></x></>) && 0);");
