tryItOut("with({constructor: __count__, prop})const __proto__ = *, __parent__;");
tryItOut("return <y><z/></y>;");
tryItOut("L:while((([1,2,3,4].map).apply.throw(<><x><y/></x></> ? <x/> : <x><y/></x>)) && 0);(undefined);");
tryItOut("M:if(3.141592653589793) {var __proto__ = <x/>;\n(this);\nyield  \"\" ; }");
tryItOut("L:with((((prototype)).__defineSetter__(\"function::__iterator__\", Math.pow)))/*infloop*/L:for(__proto__ =  /x/g  >>= __parent__; eval; [((__iterator__ = this).__proto__)]) {L: gc()yield; }");
tryItOut("/*infloop*/for(typeof arguments; --__count__; *) (null);");
tryItOut("this;\n(__noSuchMethod__);\n");
tryItOut("with({}) { return prop = [z1]; } ");
tryItOut("while((__parent__.__noSuchMethod__ = true\t) && 0)export *;");
tryItOut("if(gc() for each (__count__ in typeof 1e81) for (prop in <x><y/></x>) if ((-0))) {export __noSuchMethod__;__iterator__; } else  if (this.__defineSetter__(\"constructor\", ({}).__lookupGetter__)\n) {/*infloop*/L:for(let constructor = 1e81; function::__noSuchMethod__; <x/>) (window);/*infloop*/for(let prototype; <x/>; <x><y/></x>) {return ({}).hasOwnProperty; } } else {;yield false; }");
tryItOut("with(*){export *; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("do export *; while(((null.eval(*::*))) && 0);");
tryItOut("continue L;yield;");
tryItOut("export __iterator__;");
tryItOut("{yield;export let; }");
tryItOut("/*for..in*/for(let __parent__ = <x><y/></x> &= null.isPrototypeOf(<><{__iterator__}><ccc:ddd><!--yy--></ccc:ddd></{__iterator__}></>) in ({__count__: <y><z/></y>})) /*for..in*/L:for(__iterator__ in <x><y/></x>) /a/gi");
tryItOut("/*for..in*/for(var [constructor, constructor] = new Iterator() in <x/>.constructor) {@foo;yield; }if(<y><z/></y>) { if (((<x><y/></x>.(0.1)) / false %= window)) (({})); else /*for..in*/M:for(var <y><z/></y> in undefined) (<><x><y/></x></>);}");
tryItOut("\nvar constructor, __count__;\n");
tryItOut("{continue M;gc() }");
tryItOut("( /x/g )");
tryItOut("try { yield <x><y/></x>; } catch(__count__ if <x><y/></x>) { break ; } catch(prop) { continue ; } ");
tryItOut("let (__noSuchMethod__) { continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({prop: -3/0, function::prototype: 0 }).__lookupGetter__(\"prototype\").__parent__ in Number(@foo, <><x><y/></x></>) ^ window ^ <x><y/></x>) /*infloop*/for(const ({ __iterator__: __proto__ }) = let prop =  /x/g , set; (void <><x><y/></x></>); <x><y/></x>++) {return; }");
tryItOut("if(((3/0.eval(__parent__)) != (<><x><y/></x></> >> __proto__) >> ([prop] = <><x><y/></x></>))) {if((undefined % (-1))) L:switch( '' ) { default: export *; } }");
tryItOut("/*infloop*/for(var [11,12,13,14].some['prototype'] = (let (prop, constructor = <x/>) (function ([y]) { })()); ((Math.pow).call(@foo, <y><z/></y>.propertyIsEnumerable(\"__iterator__\")) for each (constructor in false)); \fnew function  get (constructor, __iterator__) { return 1e81 } ()) /*for..in*/for(__parent__ in -3/0) {yield true; }{yield <x/>;let __parent__ = [z1,,], __noSuchMethod__; }");
tryItOut("try { __count__ = __proto__; } finally { yield [, , [({ ({ __iterator__: ({ prop: __iterator__, __iterator__: prototype }), __count__: __iterator__ }): ({ __parent__: __parent__, prototype: __count__ }) }), ({ constructor: ({ __parent__: [prop, , __iterator__, , ], prop: __parent__ }), __iterator__: ({ __noSuchMethod__: __noSuchMethod__ }) }), ({ prop: [[], , [yield *;, prop, , __noSuchMethod__], , ({ constructor: __proto__ })] }), ], __iterator__] = (<{__proto__(<><x><y/></x></>)}><!--yy--></{__proto__(<><x><y/></x></>)}>++); } ");
tryItOut("switch(prototype) { case window: break;  }");
tryItOut("{L: {<x><y/></x>\nthrow @foo\nvar prop = this; } }");
tryItOut("let (__count__ = [, , ] = prototype.constructor.__lookupGetter__(\"__proto__\")) { /*infloop*/for(__iterator__ = <x/>; new ((<><x><y/></x></>).watch)(__iterator__\r); prop)  }");
tryItOut("/*infloop*/L:while(<y><z/></y>){let __proto__; }");
tryItOut("yield;gc()");
tryItOut("/*for..in*/L:for([__parent__, __iterator__] = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(4. instanceof <x><y/>\f</x>) in <><xxx {prop}={this--} /></>) {prototype, prop; const constructor;export *; }");
tryItOut("break L;export constructor;");
tryItOut("/*infloop*/while(((<><x><y/></x></>)(*::*))){if(\n<y><z/></y>) ;let (prototype = + /x/ , [, __proto__]) { ; } }");
tryItOut("/*infloop*/do {__noSuchMethod__;function  prop () { return window } \f const constructor; } while(let = default: break; break; break; );");
tryItOut("let prototype, __iterator__ = []; const constructor;");
tryItOut("with(@foo){return <x/>; }");
tryItOut("if(constructor = constructor .@ __proto__ = <><x><y/></x></>) { if (((<y><z/></y> >>= true)(<x><y/></x>.watch(\"__proto__\", true))))  else {let __count__, __parent__; }}");
tryItOut("/*infloop*/M:for(var ({ __noSuchMethod__: constructor }) = (*::*.@*((<x/>++.eval(( '' .unwatch(\"__iterator__\")))))); __proto__.__iterator__ = __noSuchMethod__; new (((function  constructor (constructor, __noSuchMethod__)-0).apply).__lookupSetter__(\"prop\") -= (((prop = (p={}, (p.z =  \"\" )())) += *) ^ ))(((eval(\"yield;\", #3={a:#3#}))++) > let (prototype = window, __iterator__) <x><y/></x>)) with(this){}\n; const __noSuchMethod__;");
tryItOut("if(false) { if ((<x><y/></x>.(<x><y/></x>//h\n))) @foo;} else gc()");
tryItOut("__iterator__ = x::__parent__;");
tryItOut("let (prop = 1.2e3 !=  /x/ ) { <x><y/></x>; }");
tryItOut("new Function");
tryItOut("if(new Boolean( \"\" ,  /x/ ) << (<><x><y/></x></> for each (prop in 1e-81))) {export __noSuchMethod__; } else  if ((new Function(this))) {function(y) { yield y; yield __proto__;; yield y; } \"\" ; } else L: {break ;prop; }");
tryItOut("with({prototype: (*.__noSuchMethod__ = false)})M:if(*) {; } else  if (*) {;let prop = ({a2:z2}), __parent__ =  /x/ ; }");
tryItOut("var __iterator__, constructor;");
tryItOut("/*for..in*/for(var __proto__ in ((gc)(this.zzz.zzz))){with(window){; }__parent__ = [z1,,]; }");
tryItOut("/*for..in*/for(__proto__ = __iterator__ = (<x/>.*) >>= <zzz>null.isPrototypeOf([[1]])</zzz> in  \"\" .valueOf(\"number\") = [({ prototype: __count__, prototype: setter }), , ] = (((new Function(\"(1 for (x in []))\"))).call(({a2:z2}).__defineGetter__(\"__iterator__\", (1 for (x in []))), ))) prop = function::__noSuchMethod__;");
tryItOut("");
tryItOut("return;");
tryItOut("do {*/*infloop*/for(<x><y/></x>; {}; 3/0) {const __iterator__, __count__ = 1.3;var __proto__, __iterator__ = __parent__; } } while((1.3.__defineSetter__(\"__parent__\", Math.pow) ? <y><z/></y>.__noSuchMethod__ = <><x><y/></x></> : ((-3/0)(<x><y/></x>))) && 0);");
tryItOut("with({}) let(__count__) { gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in __proto__ <<= undefined) if(this) { if (__noSuchMethod__) yield;} else ");
tryItOut("while((((__parent__))) && 0)return __iterator__;");
tryItOut("/*infloop*/for(([(#1=({constructor: ([#1#].filter([1,2,3,4].slice))}) >= __iterator__.throw((*::*.propertyIsEnumerable(\"__noSuchMethod__\")))) if (constructor)]); (this.__defineGetter__(\"__proto__\", new Function)).@foo; yield __iterator__.unwatch(\"__iterator__\")(let (__count__ = true, function::prototype) this, prop.prototype)) gc()");
tryItOut("/*infloop*/while(__count__.__iterator__)export *;");
tryItOut("if((<><x><y/></x></> !== [,,])) { if (delete ) yield; else }");
tryItOut("while((new new (eval)( \"\" )([15,16,17,18].map(((new (function (__parent__) { yield [1] } )(*::*))).__defineSetter__, + /x/g .yoyo(__noSuchMethod__)))) && 0){{} }");
tryItOut("/*infloop*/M:while(/*\n*/ < (void (-0).isPrototypeOf( /x/ ))){{return;const __count__ = <><x><y/></x></>, prototype, __count__; }/*infloop*/for(const __iterator__ = window;  /x/ ; false) {; } }");
tryItOut("{throw <><x><y/></x></>;; }");
tryItOut("<x/>");
tryItOut("L:with(__noSuchMethod__ = __count__)/*infloop*/for(<y><z/></y>; __proto__.__count__; [15,16,17,18].map(function () { return * } , [z1,,])) <{__noSuchMethod__}><zzz>__count__.propertyIsEnumerable(\"__parent__\")</zzz>\f<ccc:ddd><ccc:ddd><x><y/></x><x><y/></x></ccc:ddd></ccc:ddd></{__noSuchMethod__}>");
tryItOut("yield <><x><y/></x></>");
tryItOut("L: {/*infloop*/\twhile((eval)){<y><z/></y>;if(<x><y/></x>.prototype) throw *; else  if (<x><y/></x>[<><x><y/></x></>]) let prototype = true; else  } }");
tryItOut("/*infloop*/for(const __count__; __proto__.yoyo(prototype getter: (undefined).apply); null .. <><x><y/></x></>) /*infloop*/for( /x/ ;  /x/g ; <x/>) { }");
tryItOut("return ()(__count__);");
tryItOut("/*for..in*/L:for(const [prototype, __noSuchMethod__] = <><bbb xmlns:ccc=\"(yield function(id) { return id }) - <x><y/></x>--\"><ccc:eee></ccc:eee></bbb></> / (uneval(this.__defineGetter__(\"prototype\", false))) in (__proto__ = prop)(({}), undefined) * <><bbb xmlns:ccc=\"<y><z/></y>++\"><ccc:eee></ccc:eee></bbb></>) /*for..in*//* nogeckoex bug 349964 */ for  each(var arguments.constructor in  .((new (new Function(\"{}\"))( '' , <><x><y/></x></>)))) ;");
tryItOut("if(<> <x><y/></x>.unwatch(\"prototype\")) {return;{} } else  if ((new (function  prop () { yield  \"\"  } )(window for each (__count__ in 0/0), <><x><y/></x></>))) L:if(<><x><y/></x></>) { if (<x/>) {;var constructor; }} else {{}{} } else export __count__;");
tryItOut("if((p={}, (p.z = function(q) { return q; }(this))())) {continue M; } else  if ((function (__proto__) { __iterator__; } )(*::* >= <x/>)) M:do {throw this; } while((-0) && 0); else {; }");
tryItOut("L:if(undefined) yield; else {}");
tryItOut("1.3");
tryItOut("with({prop: __noSuchMethod__ = [], constructor = [1]})prototype;");
tryItOut("export *");
tryItOut("let (__count__ = #1#, __count__ = <bbb xmlns=\" \"\" .valueOf(\"number\")\"><employee id=\"1\"><name>Joe</name><age>20</age></employee><zzz> { yield ({prop: 0}) } </zzz><x><y/></x></bbb>) { if(([15,16,17,18].sort(window, <x><y/></x>))) {return constructor; } else  if (({<x><y/></x> })) let prop =  '' , __proto__ = @foo; else {[1,2,3,4].map }(1 for (x in [])) }");
tryItOut("/*for..in*/for(let [constructor, __count__] = 3 in function ([y]) { }) {var prop; } const __count__;");
tryItOut("L:if(<x><y/></x>) {const function::__parent__, __count__; } else  if (new (<x><y/></x>)()) {return <x><y/><;function  __proto__ () { __count__ = ; }  }");
tryItOut("L:if(try { export __parent__; } catch(__count__) { ; } finally { const __noSuchMethod__; } ) /*for..in*/L:for(constructor =  \"\"  in *) {gc() } else  if ([11,12,13,14].some) {gc() } else ;");
tryItOut("if(@foo) {yield true;(prototype); } else throw @foo;");
tryItOut("M:if(<><x><y/></x></>) { if (prototype) {(#1=[#1#]).__defineSetter__ }} else let prototype, __count__ = 1.2e3;");
tryItOut("/*infloop*/do export *; while( /x/g )");
tryItOut("if(<><x><y/></x></>.prototype = -1) {} else  if ((((new  /x/ ((-0), 1.3) if (@foo)) @ <x><y/></x>.((-0))) >>> ( \"\" .__defineSetter__(\"__iterator__\", (eval).call)))) 0");
tryItOut("return;");
tryItOut("if([__noSuchMethod__, , ] = prototype) { if (<x><y/></x>.__defineSetter__(\"__parent__\", (function (constructor)<x/>).apply).yoyo((p={}, (p.z = 0)())).unwatch(\"__proto__\")) {break ;export *; } else (this);}");
tryItOut("if((1e-81.*.__count__++)) {throw null;gc() const constructor; } else  if ([, try { throw @foo; } catch(__parent__ if  { yield ((__parent__.__iterator__).throw(1e81[({a2:z2})])) } ) { export prototype; } finally { eval } , prototype, , ] = export *;) return  /x/g \n else const __iterator__, __count__ = <x><y/></x>;");
tryItOut("/*infloop*/for(__parent__; <y><z/></y> - (-1); ([__count__].filter(Function))) let prototype = prop;");
tryItOut("let (__count__) { ; }");
tryItOut("switch( '' .__defineSetter__(\"__noSuchMethod__\", eval)) { case prototype = (__iterator__ == this): break; default: (window);\n;\ncase <y><z/></y> ? false : this: break; case 0: break;  }");
tryItOut("/*for..in*/for(let [constructor, __count__] = (function(y) { yield y; yield true;; yield y; })().__defineGetter__(\"__iterator__\", (new Function(\"return false;\"))) in new Function((function ([y]) { })())) {yield <x><y/></x>;continue L; }");
tryItOut("/*infloop*/for(var __iterator__; this ==  /x/ ; __iterator__.isPrototypeOf(({a1:1}))) {gc()<y><z/></y>; }with({__noSuchMethod__: eval(\"<x/>\", <x/>)}){if(window) {var __noSuchMethod__ = __iterator__, __iterator__; } else  if (this) {<><x><y/></x></>;; } }");
tryItOut("/*infloop*/for([z1,,](*::*, prop); <x><y/></x>.( \"\" ); (({prop: __proto__}))) let __parent__, __parent__ = *;");
tryItOut("/*infloop*/do {*::*; } while(([this for each (__iterator__ in window)]));");
tryItOut("/*infloop*/for(__proto__; (yield ((yield <x/>))); (uneval(1e81[<x/>]))) {L: yield 1e+81; }");
tryItOut("{\tfunction  __parent__ () { return <x><y/></x> } \f }");
tryItOut("L: {while((new Number(new Math.pow())) && 0){(<x><y/></x>);export *; } }");
tryItOut("do {yield this; } while((('fafafa'.replace(/a/g, ({}).__lookupGetter__))) && 0);");
tryItOut("\nreturn;\n");
tryItOut("try { for(let y in []); } catch(__parent__ if ((function ([y]) { }.unwatch(\"prototype\")))(__proto__ = prop)) { this.zzz.zzz; } ");
tryItOut("/*infloop*/\ffor(const [] = 0; ( /* Comment */__noSuchMethod__).__lookupSetter__(\"prop\").__lookupGetter__(\"constructor\"); try { __noSuchMethod__ = __count__; } catch(__iterator__) { for(let y in [5,6,7,8]) yield; } finally { with({}) { for(let y in []); }  } ) return;");
tryItOut("/*infloop*/for((<x><y/></x>\t--); ('fafafa'.replace(/a/g, @foo)); (((1 for (x in []))).call(undefined, <x><y/></x>, this))) yield <x/>;");
tryItOut("/*infloop*/while(~prototype = <><x><\ry/></x></>.propertyIsEnumerable(\"prop\"))if(gc().valueOf(\"number\").propertyIsEnumerable(\"__count__\")) {{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.__iterator__ in constructor.prop) {return <x><y/></x>;\nreturn;\n }");
tryItOut("if((p={}, (p.z = constructor)())) {return null;let __parent__, __noSuchMethod__ = constructor; } else const __parent__ = <><x><y/></x></>, __proto__ =  \"\" ;");
tryItOut("/*for..in*/for(const  in ((({}).__lookupGetter__)(([, __noSuchMethod__, ({ __noSuchMethod__: prototype }), ({ constructor: __parent__, prototype: delete })] = (function ([y]) { }.watch(\"__iterator__\", [1,2,3,4].slice))).unwatch(\"(new String((false , 1e+81)))\") |= (uneval((__count__ ^ \t<><x><y/></x></>))))))yield <xxx {__count__}={<x/>} />;");
tryItOut("\nconst __parent__ = #3={a:#3#}");
tryItOut("if(prototype =  /x/g ) { if ((uneval(prop = *::*))) {(window); } else {export *; }}");
tryItOut("\nexport prototype;");
tryItOut("switch((let (prop) arguments)) { default: if(<><x><y/></x></>) {throw null;yield *; } else  if (this) {; } }");
tryItOut("/*infloop*/for(prop; ((true).watch((undefined\n))) /= ({ __count__: __count__, __count__: __iterator__ }) = [, ]; __proto__ = (new new Function(new true())).(this =  /x/g )) /*for..in*/for(var prototype = [11,12,13,14].sort in ++(* | this)) {((Boolean(null % undefined, __parent__ setter: Function))); }");
tryItOut("with({}) for(let y in []);");
tryItOut("/*for..in*/M:for(var [, __noSuchMethod__] = new Number().__parent__ in (prototype.__noSuchMethod__)) L:switch( /x/g .unwatch(\"__parent__\")) { default: {;const __proto__, __iterator__; } }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if([function ([y]) { }].sort(Function)) yield; else  if ([<x/>].*) {L:if(new (<x><y/></x>)(window, [,,z1])) {const let, __noSuchMethod__;(arguments); } else  if (new (1.2e3)(null, [,,z1])) {__proto__, __noSuchMethod__; }export *; }");
tryItOut("gc()\nif(( /x/  .. [1].__defineSetter__(\"constructor\", function(q) { return q; }))) yield <y><z/></y>; else  if (<x/> += #3={a:#3#}) {function(q) { return q; }__noSuchMethod__ =  '' ; }\n");
tryItOut("/*for..in*/M:for(var __proto__ in (-1 <<  '' )) {switch(#1=[#1#]) { default: continue M;break;  } }");
tryItOut("/*infloop*/for(const prop = new (/a/gi)(<x><y/></x>); [(prop = [1])]; <x/>().watch(\"__count__\", ({}).hasOwnProperty)) {export __iterator__; }");
tryItOut("let(constructor = ({}.prop)) ((function(){this.zzz.zzz;})());");
tryItOut("yield\n[constructor]");
tryItOut("prop = __iterator__;");
tryItOut("/*infloop*/for(((3/0)(*, __count__).__defineSetter__(\"({ prop: prototype })\", Math.pow)); eval(\"(*)[@foo]\", <x><y/></x> .@*:: get); [z1,,].eval(this).*) (true);");
tryItOut("/*infloop*/L:for(((__count__.watch(\"__count__\", [1,2,3,4].slice))).call((yield (uneval(({ __parent__: [] }) = (this.__defineSetter__(\"__count__\", function(y) { yield y; break ;; yield y; }))))), ); <x/>; <y><z/></y>.yoyo( /x/ ) = [[, ({ __iterator__: __parent__ }), ({ __count__: __parent__, prototype: __proto__ })], , , , ]) return ();");
tryItOut("yield <><x><y/></x></>;");
tryItOut("L:if(<x><y/></x>) { if (<y><z/></y>) } else export *;");
tryItOut("/*for..in*/for(let [__count__, prototype] = __iterator__.__count__ getter= gc in (function ([y]) { })()) {export __parent__;export *; }");
tryItOut("/*for..in*/for(var constructor = (((Function)(('haha'.split)(), <x><y/></x> -= __noSuchMethod__)).__lookupSetter__(\"prop\")) in this) /*infloop*/while(@foo /  /x/g ){(this); }");
tryItOut("/*infloop*/for(var __iterator__; ({ set prop __count__ (prop, prototype) { yield <y><z/></y> }  }); <><x><y/></x></> | <><x><y/></x></>) yield __proto__;");
tryItOut("/*infloop*/do <>#1=this</>yyy while(__proto__ .@x:: *::*\n);");
tryItOut("export *;throw *");
tryItOut("{/*infloop*/for(__noSuchMethod__; delete  '' .prototype setter= [1,2,3,4].slice; (__count__) = this.zzz.zzz) return;{} }");
tryItOut("/*for..in*/L:for(const prototype in (((-1).__defineGetter__(\"__count__\", Math.pow))( '' ))){var __parent__, prop = each;function ([y]) { }; }");
tryItOut("/*for..in*/for([function::__parent__, __count__] = 1e4 in <x/>) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in ({throw StopIteration;,  set __count__(constructor, prototype) { yield this }  })) /*for..in*/M:for(let prototype.constructor in ({})) var constructor = <x><y/></x>;");
tryItOut("do {let new Function;yield <x><y/></x>; } while((#1=['fafafa'.replace(/a/g, function  constructor () { return window } )]) && 0);");
tryItOut("{yield; }");
tryItOut("return (new continue L;(null, <><x><y/></x></>));");
tryItOut("( '' );");
tryItOut("if(<><x><y/></x></> << null) { { yield  ''  } ; } else  if (([15,16,17,18].filter(({}).__lookupGetter__,  '' ))) {export *;export *; }\n");
tryItOut("if(__proto__ = __proto__) {if(false) { if (<x><y/></x>) __proto__ = window; else let __proto__ = this, __count__ = <><x><y/></x></>;}yield *::*; } else {yield (-0); }");
tryItOut("if(new Date(1e81, (*::* || *::*) if (<x><y/></x>))) {{}if(<x><y/></x>) (-0) else  if (0x99) gc() else var __iterator__, __noSuchMethod__; }");
tryItOut("/*for..in*/L:for( /* Comment */var prop, __parent__\f in  ''  .. function(id) { return id }.unwatch(\"__iterator__\")) L:if(<><x><y/></x></> == 1e81) { if (<x><y/></x>) let __proto__, prototype;} else {gc()export *; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("M:if(({ constructor: each }) = ((* ? #3={a:#3#} : #1=[#1#]) + \n<x/>)) (*);");
tryItOut("if((<x><y/></x>.(<x><y/></x>)).__iterator__) {if(window) {export __noSuchMethod__; } else  if ((uneval(false))) continue L; else ( set __proto__(__noSuchMethod__) { yield true } );if(<><x><y/></x></>) export __proto__; } else  if (__proto__.constructor) {(this);/*infloop*/for(let ({ __count__: prop, __proto__: ({ prototype: prop, constructor: ({ prop: prop, __proto__: __noSuchMethod__ }) }) }) = prop.((yield prop)); @foo >= __proto__; new @foo(undefined, <x><y/></x>)) {continue ;var __noSuchMethod__, prototype; } } else with({constructor: ((function ([y]) { })() && [z1,,])}){let (prop) { return  /x/ ; } }");
tryItOut("/*infloop*/M:for(-3/0 ^ __count__; this >>= this; <x><y/></x> * 0/0) {continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in __iterator__) {({a2:z2}); }");
tryItOut("prop;");
tryItOut("throw 0x99; const __proto__;");
tryItOut("if(null) {__parent__;with([,]){export prop;return; } } else  if (<y><z/></y>.__iterator__) <zzz>[]</zzz> else if(@foo) { if ([[]]) {yield; }} else continue M;");
tryItOut("/*for..in*/M:for(var prop = <y><z/></y> in [,,z1]) <x><y/></x>");
tryItOut("(__parent__);export *;");
tryItOut("switch(window) { default: if((-1) !==  /x/ ) {gc()yield; }case <x/>: var __iterator__, prototype = true;break; case 4: break; break;  }");
tryItOut("false;");
tryItOut("do ; while((__parent__) && 0);");
tryItOut("/*infloop*/for(var function::function::constructor; <><x><y/></x></>; (function ([y]) { })()) {(constructor); for each //h\n(__parent__ in ((p={}, (p.z = #3={a:#3#})()) ? [15,16,17,18].map([1,2,3,4].map, #3={a:#3#}) : (new (<x><y/></x>)()))) for (constructor in new Exception(__count__)) for (constructor in #3={a:#3#}) for each (constructor in <x/>) }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.__parent__ in <><x><y/></x></>) var __count__ = <x><y/></x>;\nexport *;\n");
tryItOut("/*infloop*/L:for((this--); new ({}).__lookupGetter__() @ <x><y/></x>.(prop); (this)[<x><y/></x>].yoyo(prototype.((window)))) ;");
tryItOut("return  '' ;");
tryItOut("if(__proto__.__count__ =  /x/g ) {/*infloop*/do {return  /x/g ;function () { return this }  } while(__noSuchMethod__); } else  if ((<><x><y/></x></>)) {yield <x><y/></x>; } else {/*infloop*/for(false; *::*; true) ; }");
tryItOut("/*infloop*/M:while(__proto__.watch(\"__iterator__\", new Function)) { return window } ");
tryItOut("return 0x99;");
tryItOut("/*for..in*/M:for(var prototype = constructor in false) (*::*);");
tryItOut("throw  /x/ ;");
tryItOut("gc()");
tryItOut("([z1]);\neval\n");
tryItOut("/*infloop*/while( /x/g ){var __proto__, get; }");
tryItOut("{throw <><x\t><y/></x></>; }");
tryItOut("L: yield __proto__; const constructor;");
tryItOut("for(let y in [5,6,7,8]) const constructor, constructor = __proto__;");
tryItOut("if(__count__ =  '' , __noSuchMethod__;) { if ('fafafa'.replace(/a/g, ({}).hasOwnProperty)) var prototype;} else /*for..in*/for(const [__count__, __iterator__] = <x/> in  '' ) {const prop = __proto__, prop = this; }");
tryItOut("yield __proto__;");
tryItOut("yield  \"\" ;");
tryItOut("if(__parent__) export prop; else with(((<><ccc:ddd></ccc:ddd></>.(({prototype: window,  set prop __iterator__ (__count__, prop) { return <y><z/></y> }  }))))[[[]]]){/*infloop*/for(let __noSuchMethod__; [15,16,17,18].filter('haha'.split, *::*); constructor) {if(<x><y/></x>) ; else {return;; } } }");
tryItOut("let(__proto__, prototype) ((function(){yield __iterator__.__lookupSetter__(\"__parent__\");})());");
tryItOut("with({}) __parent__ = __parent__;");
tryItOut("/*for..in*/for(const window / @foo in (('haha'.split)((yield prop.__noSuchMethod__ = *::*.propertyIsEnumerable(\"__iterator__\"))))){({}).hasOwnProperty__iterator__;\nif(*::*) { if (__count__) this; else yield ({a1:1});}\n }");
tryItOut("/*for..in*/for(let [__proto__, constructor] = void constructor in [,,]) export *; const __parent__;");
tryItOut("if(__proto__) constructor, __count__; else  if ( /x/ ) {(<><x><y/></x></>);return 1e-81; }");
tryItOut("/*infloop*/for(__iterator__; 1.2e3; __parent__) *");
tryItOut("if([[1]].__lookupSetter__(\"__noSuchMethod__\")) {{}yield; } else  if (yield ((({}).__lookupGetter__).call((yield __proto__ for each (prototype in null) for each (prop in  /x/g )), (<><x><y/></x></> for (__iterator__ in prop)), Math.sin()))) if(this.zzz.zzz) //h\n{ if (\n@foo) {let __noSuchMethod__ = this;yield; }} else {const __count__ = <x/>, __noSuchMethod__; }");
tryItOut("throw StopIteration;let (__count__, __proto__ = <x><y/></x>) { (<><x><y/></x></>).call }\f");
tryItOut("/*infloop*/for(const __noSuchMethod__ = @foo;  /x/ ; true) return;");
tryItOut("L:if(*::*) {const prototype;yield window; } else  if (((Function).call(eval(\"gc()\",  \"\" ), ).isPrototypeOf<y><z/></y>.throw(3)))) yield \f<><x><y/></x><\n/>;");
tryItOut("M:while(({}) && 0){3; }");
tryItOut("continue ;");
tryItOut("{/*for..in*/for(const get = __noSuchMethod__ in <x><y/></x>) {var __proto__; }var prototype =  /x/ ; }");
tryItOut("/*for..in*/for(let @foo in ([__noSuchMethod__ = <><x><y/></x></>]./*\n*/sort(-3/0))) {yield;if(!(({constructor: [[1]],  get constructor prototype (__count__)true }))) {if(__proto__) {const constructor = <><x><y/></x></>; } else  if (@foo) {return window; } else {export __count__;const __noSuchMethod__; } } else const __iterator__; }");
tryItOut("L: ;\nL: L:if(null) { if (true) continue ; else gc()}\n");
tryItOut("/*infloop*/M:for(let (eval(\"<><x><y/></x></>\", constructor)).watch = (new (([11,12,13,14].some))(__noSuchMethod__%=4.,  for (prototype in 1.3) if \f(yield))); [1]++; ({prototype: ([1,,] +=  /x/g )})) {yield; }");
tryItOut("if(<><x><y/></x></>) ; else  if (constructor) {;function  constructor (x::__count__, __iterator__)__parent__ } else { }");
tryItOut("/*for..in*/for(let prototype in ((({}).hasOwnProperty)(new ({ __noSuchMethod__: ({ __count__: constructor, __iterator__: [] }), __noSuchMethod__: constructor }) =  /x/g  , <x><y/></x>.unwatch(\"__proto__\")))){/*for..in*/for(var constructor = 'fafafa'.replace(/a/g, (__noSuchMethod__).call) in null) {yield; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in {throw [z1,,]; }.watch(\"__iterator__\", /a/gi)) {with(<x><y/></x>.(true)){return;return *::*; } }/*infloop*/for(var __noSuchMethod__; __proto__--; (p={}, (p.z = ((yield true)))())) {{(undefined); } }");
tryItOut("{return \r<x><y/></x>;while(((window(this, <x><y/></x>))) && 0)export *; }");
tryItOut("L:with({__noSuchMethod__: [1,2,3,4].map}){export __count__; }\nlet(constructor = eval(\"yield;\", <x><y/></x>)) { __noSuchMethod__ = __proto__;");
tryItOut("while((<x/>) && 0){export __count__; }");
tryItOut("yield");
tryItOut("do gc() while(() && 0);");
tryItOut("if(false) yield; else {export *;yield 1e4; }");
tryItOut("try { window; } catch(__count__) { break M; } finally { return this; } ");
tryItOut("L:with({__noSuchMethod__: (String())}){if([,,]) { if (1.3) {continue ;; }} else {export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in let (__count__ = <><> \"\" </></>) !([1,2,3,4].map)) if( /x/ ( \"\" )) { if ([]) yield __parent__; else {\n}}");
