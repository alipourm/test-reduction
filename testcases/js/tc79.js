tryItOut("L: \fbreak M;");
tryItOut("switch(null.__noSuchMethod__.yoyo(<x/>)[( /x/  instanceof function (__count__)@foo)]) { case (\tFunction(<><x><y/></x></>(1e81, *), this).__lookupGetter__(\"function::__parent__\")): break;  }");
tryItOut("/*for..in*/for(let __count__ = (window.unwatch(\"__iterator__\")) in <y><z/></y>.prop = (uneval( '' )) /= null) M:if(eval(\"@foo\", #1=[#1#])) {; }");
tryItOut("with({__parent__: ([1,2,3,4].map).apply([Math.sin for (prop in new null <<= .2) for (__count__ in (false .@*:: (-1)).valueOf(\"number\")) for ((constructor) in <y><z/></y> >> *) for each (__proto__(<x><y/></x>) in function(id) { return id })])})/*infloop*/for(var prop = (/; [true if (<><x><y/></x></>)]default: break; ; <x><y/></x> ? <y><z/></y> :  '' ) '{__noSuchMethod__ = <x><y/></x>, function::prop;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in (-0)) {yield undefined; }\nlet constructor, prototype = <x><y/></x>\n(-3/0);");
tryItOut("L: gc()");
tryItOut("{prototype; }");
tryItOut("/*infloop*/for(({ __noSuchMethod__: __proto__, __proto__: [constructor, , ] }) = ([15,16,17,18].map(([z1,,]).__defineSetter__, @foo)); true; ( /* Comment */( /* Comment */false))) {yield;if(<x><y/></x> -= <><x><y/><\r/x></>) { if (\f(Math.pow)()) {let __noSuchMethod__ = ({a2:z2});let prototype, get; }} else yield <x/>; }");
tryItOut("if(<x/>) { if (3/0) {(\fconstructor); }} else throw window\n { return true } ");
tryItOut("switch(true.hasOwnProperty(\"constructor\")) { default: const __proto__ = __proto__, __noSuchMethod__;break; break; break;  }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = ({prop: true}); prototype = throw undefined;; (1 for (x in []))) constructor, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in true) {gc()(*).__defineSetter__ }");
tryItOut("/*infloop*/for(var prototype; __noSuchMethod__; this) {export constructor; }L: {gc()break ; }\r");
tryItOut("/*for..in*/for(const [prop, prototype] = +<x><y/></x> in null) {{}M:with(this){return;yield <x><y/></x>; } }yield <x><y/></x>;");
tryItOut("/*infloop*/L:for(__proto__; (true).call(({__parent__: 1.3}), (#1=[#1#] :: __count__)); ((p={}, (p.z = __parent__)()))) /*for..in*//* nogeckoex bug 349964 */ for  each(var each in *::*) yield true;");
tryItOut("switch(yield [.2].sort(({}).__lookupGetter__)) { default: #2= /* Comment */<y><z/></y>;break; case (__noSuchMethod__ = (<y><z/></y>.yoyo(this))): break; case 4: break; case 6: break; case new __parent__ = __proto__(({ get __parent__ __proto__ (prop, __proto__) { return 0x99 } , __parent__:  \"\"  }), function::__proto__(window, <><x><y/></x></>)): break;  }");
tryItOut("{/*infloop*/L:for(<x><y/><//h\n/x>.isPrototypeOf(*); this; ({__iterator__: <x/>, __iterator__: <x><y/></x> })) {let prototype = <x><y/></x>; } }");
tryItOut("const __noSuchMethod__");
tryItOut("prototype");
tryItOut("if(false) {export __noSuchMethod__; } else  if (prop) {throw <><x><y/></x></>; } else @yield;");
tryItOut("/*for..in*/for(const __parent__ in ((Math.pow)(function ([y]) { })))%=");
tryItOut("do continue M; while((-3/0.valueOf(\"number\")) && 0);");
tryItOut("while((<><x><y/></x></>) && 0)prototype = <x/>;");
tryItOut("{let __iterator__, prototype = prototype =  '' ; }\nL: /*for..in*/for((<y><z/></y>)(<><x><y/></x></>) in undefined) {throw this;yield; }");
tryItOut("if(3/0) return <x><y/></x>; else  if ((prop)+=<x><y/></x>.(<x/>)) {gc()__iterator__, each = false; } else {continue L; }");
tryItOut("/*infloop*/do {/*\n*/break L\n for (__iterator__ in *::*) } while((this.__defineGetter__(\"__iterator__\", <x><y/></x>)));");
tryItOut("{/*infloop*/do {M:with({__count__: <><\fx><y/></x></>}){; }const constructor = <><x><y/></x></>; } while((new Error( /x/ , <y><z/></y>) != [true])); }");
tryItOut("/*for..in*/L:for(__count__ = (({ __iterator__: __noSuchMethod__ }) = ((uneval(<>\f<x><y/></x></>)))) in (function(q) { return q; }).call(this.zzz.zzz, @foo.__defineSetter__(\"prototype\", [1,2,3,4].slice))) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>) gc()return; }");
tryItOut("try { return; } catch(true.constructor if (function(){for(let y in []);})()) { __proto__ = prop; } finally { let(__iterator__ = (yield [[1]]), __noSuchMethod__ = <x><y/></x>\n) { return __iterator__ <<= <y><z/></y>; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::prop in (p={}, (p.z = *)())) {gcexport *; }");
tryItOut("\n");
tryItOut("L: L: {export __count__;__count__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.constructor in (null.unwatch(\"prop\"))) {var prop = [,,z1]; }");
tryItOut("L:with(<x><y/></x>.(function ([y]) { })){}");
tryItOut("try { {} } catch(__parent__ if __count__) { continue ; } ");
tryItOut("/*for..in*/for(const prototype in false) return  '' ;");
tryItOut("{}");
tryItOut("/*infloop*/for(let prop; ; ([4.].filter(/a/gi))) var __parent__, __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<x><y/></x> in <y><z/></y>) yield;");
tryItOut("if(((null)((-1))) %= constructor = (yield [,].hasOwnProperty(\"__iterator__\"))) let (__noSuchMethod__) { function(y) { yield y; return undefined;; yield y; } }");
tryItOut("if(<x><y/></x>) { if ([1]) export __noSuchMethod__; else {let __proto__ = @foo; }}");
tryItOut("L:with(__iterator__.__iterator__ setter= function(q) { return q; }){prototype = 5.0000000000000000000000, __noSuchMethod__; }");
tryItOut("with((true in eval(\"\", undefined))){var getter; }");
tryItOut("/*infloop*/M:for(var __count__; ((uneval(__iterator__ = 1.2e3))); (this.zzz.zzz)) /*for..in*/for(let __iterator__ in ((function  __parent__ () { yield (this.__defineGetter__(\"__iterator__\", function () /x/g ))() } )(([1,2,3,4].map).call(@foo[-1], __proto__, ( /x/ .throw(#3={a:#3#}))))))/*infloop*/while(<x><y/></x>)let __parent__ = false, constructor;");
tryItOut("/*infloop*/for(__proto__ = ({ __count__: __iterator__ }); ((eval)(__proto__, <x/>)); (yield __noSuchMethod__%=true)) yield;");
tryItOut("/*infloop*/while((yield (([11,12,13,14].sort) <<= (constructor)(new 1.3(<x><y/></x>)).__defineGetter__(\"prototype\", function(y) { yield y; Function; yield y; }))))with(({a2:z2}).*)({ __proto__: [constructor, prop, , __noSuchMethod__, ], __iterator__: [__parent__, constructor, ] })");
tryItOut("/*infloop*/for(var constructor = <><x><y/></x></>; <x/>; 0/0) {/*\n*/__noSuchMethod__, prototype = *1e4; }");
tryItOut("L:with(null){{export __proto__;throw <x><y/></x>; } }");
tryItOut("(true)\n");
tryItOut("/*for..in*/for(const [prop, prototype] = <x><y/></x>.watch(\"prototype\", function (constructor) { yield <x><y/></x> } ).__noSuchMethod__ in new [[]]) /*for..in*/L:for(var prototype in (((__proto__).apply)(undefined.eval(this)))){if(*) {\fthrow null;yield <x/>; } else  if (undefined) {} else {export constructor;gc() } }");
tryItOut("/*for..in*/for(let prototype =  /x/ .__lookupSetter__(\"prototype\") in <x/>) {undefined;const __noSuchMethod__, prop; }");
tryItOut("{/*for..in*/for(__count__ in ((/a/gi)([])))yield 033;(__iterator__); }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("M:if() {while((window) && 0)yield; } else  if (.2 * <x><y/></x> === constructor) export *; const constructor;");
tryItOut("if((null.__lookupSetter__(\"prototype\"))()) if(((<x><y/><\t/x> >= __parent__)[this.__defineGetter__(\"prototype\", ({}).__lookupGetter__)])) prop, prototype = *; else  if (window.isPrototypeOf([,,z1])) {const __noSuchMethod__ = {}, __proto__; } else {Function }\nif(1e4.__defineGetter__(\"__proto__\", function  __parent__ (__noSuchMethod__) /x/g )) { if () {continue M; } else yield;}");
tryItOut("/*infloop*/M:for(var ({ prop: ({ prop: ({ __parent__: ({ constructor: __parent__ }) }), __count__: \t__parent__ }), __proto__: [, ({ __iterator__: __iterator__ }), , , ] }) = ((__iterator__\n ^= this .. <x><y/></x>).[, , , ]); this.propertyIsEnumerable(\"__count__\").__defineGetter__(\"constructor\", /a/gi); <x><y/></x>.throw(__iterator__)) {/*infloop*/do export __noSuchMethod__; while(prototype); }");
tryItOut("/*infloop*/for(__proto__; <x><y/></x> ? *::* : <><x><y/></x></>; [undefined for (__parent__ in function(id) { return id }) if (window)]) <xxx {__iterator__}={#1=[++this]} />");
tryItOut("/*infloop*/{}");
tryItOut("/*infloop*/while(.2)function(q) { return q; }");
tryItOut("L:with({__parent__: (Math.pow(this))}){export *; }");
tryItOut("var prop = window const __count__;");
tryItOut("yield <x><y/></x>;");
tryItOut("( /x/ );\n/*for..in*/for(let prototype in [,]) {throw null/*\n*/;return; }\n");
tryItOut("/*infloop*/for(const [__count__] = this.__defineSetter__(\"__count__\", Function); #1=[false] >= (-0 &&  \"\" ); [15,16,17,18].sort(/a/gi, <y><z/></y>)) {( '' ); }\n{/*for..in*/for(let __iterator__ = ({}) in this) {yield; } }");
tryItOut("/*for..in*/for(let [__count__, __proto__] = function(id) { return id } in window) yield;");
tryItOut("with(constructor.@*)<x><y/></x>;");
tryItOut("if(__iterator__ = *) {/*infloop*/for(const ({ __noSuchMethod__: __noSuchMethod__ }) = (<><x><y/></x></>.eval(__proto__)); (constructor = <x><y/></x>); (prototype.prop)) return  \"\" ;/*for..in*/for(const [prototype, __count__] = (((uneval(true))).__defineGetter__(\"constructor\", gc)) in <><x><y/></x></>) __count__, prop = <><x><y/></x></>; } else  if ([false--].sort(function  __count__ ().2)) /*for..in*/for([__noSuchMethod__, __noSuchMethod__] = (prop = 5.0000000000000000000000) == __noSuchMethod__ = window in false) {}");
tryItOut("/*for..in*/for(const constructor in ((this)(null)))(@foo);");
tryItOut("for(let y in []);");
tryItOut("export prototype");
tryItOut("/*infloop*/for(var __noSuchMethod__; ({ __noSuchMethod__: ({ prototype: ({ __noSuchMethod__: constructor }) }) }) = (__proto__.__proto__ setter= <><x><y/></x></>); ([11,12,13,14].filter)) L:with((Iterator( /x/ , 5.0000000000000000000000))){const __parent__;gc() }");
tryItOut("*\n");
tryItOut("if(null) <x/>; else var __proto__ = true\n");
tryItOut("(({a2:z2}));");
tryItOut("/*infloop*/for(const __parent__; [3.141592653589793 for each (__parent__ in this)]; __proto__.__noSuchMethod__ = this[this]) {yield;; }");
tryItOut("with(<> </>)return;");
tryItOut("/*infloop*/do  for ([z1,,]['__proto__'] in constructor) if (constructor = [[]]) while([,]);");
tryItOut("/*infloop*/for(__iterator__; __proto__ = <><x><y/></x></>; ([15,16,17,18].map(<><x><y/></x></>, null))) {}");
tryItOut("with(true.__defineGetter__(\"__count__\", [1,2,3,4].slice) ? <y><z/></y> : true){with(getter--.throw(<><x><y/></x></> >> *::*))var __proto__;\f; }");
tryItOut("if('fafafa'.replace(/a/g, (1 for (x in []))).propertyIsEnumerable(\"__iterator__\")) {export *;; } else  if (({constructor: {}.@*, prop: ({__count__: this}) })) {return;export __count__; }");
tryItOut("let (__iterator__ = [] = !<x><y/></x>) { export prototype; }");
tryItOut("yield  '' ;");
tryItOut("{yield;/*for..in*/for(var prototype = true in window) throw  '' ; }");
tryItOut("/*for..in*/for(let __count__ in ()) {/*infloop*/L:for(<>window</>; ( /x/g .__parent__); (uneval(<x/>))) {gc() } }");
tryItOut("/*for..in*/M:for(var [__count__, __iterator__] = (<><x><y/></x></>)(false, *::*) in #3={a:#3#}) ");
tryItOut("let (__noSuchMethod__ = 0.1, __count__ = __parent__) { __parent__; }");
tryItOut("L: ;");
tryItOut("((new Function(\"(0/0).__defineSetter__\")))(__proto__ = constructor);");
tryItOut("if(<x/>) {export *;return; } else  if (<x><y/></x>) {let __count__ = __count__, constructor;{} }\n");
tryItOut("yield (*::* >= [,]);");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] =  /x/g  in 5.0000000000000000000000) /*infloop*/for(<><x><\fy/></x></>;  /x/ ; window) ");
tryItOut("let (({ x::__iterator__: __parent__ }) = new ([1,2,3,4].map)(<><x><y/></x></>)) { export *; }");
tryItOut("(-0);");
tryItOut("/*for..in*/for(constructor = <><x><y/></x></> ? *::* :  /x/g  in <y><z/></y>) Function");
tryItOut("/*infloop*/while(arguments)gc()");
tryItOut("/*for..in*/for(var prop in ({})) ");
tryItOut("/*infloop*/for(__parent__; __proto__++;  /x/g ) /*infloop*/for( /x/g ; <y><z/></y>; 3) {export __proto__; }");
tryItOut("{}");
tryItOut("if(<x><y/></x>) export *; else {return; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const \r__proto__ in ({ __count__: __noSuchMethod__, constructor: __count__ }) = ( \"\"  += <x/>)) {gc() }");
tryItOut("prop setter: evalprop, __noSuchMethod__ = <x><y/></x>;");
tryItOut("this.zzz.zzz;");
tryItOut("let = __parent__;");
tryItOut("if() {gc() }");
tryItOut("/*infloop*/for(0/0; constructor << <><x><y/></x></>; [(__noSuchMethod__ = prop)].filter(({}).__lookupGetter__)--) {__iterator__/*for..in*//* nogeckoex bug 349964 */M: for  each(let @foo.prop in ({__iterator__: <y><z/></y> })) {export *;__noSuchMethod__; } }");
tryItOut("export prototype\n");
tryItOut("let(({ __count__: prop }), window = (true.prototype%=<><x><y/></x></> - __proto__)['fafafa'.replace(/a/g, false)]) ((function(){throw __iterator__;})());");
tryItOut("/*for..in*/M:for(var (*::*['__parent__']) in *) {( \"\" ); }");
tryItOut("yield\n");
tryItOut("/*for..in*/for(let ((this.__defineGetter__(\"__noSuchMethod__\", null)))(false.eval(<y><z/></y>)) in <><{constructor}><!--yy--></{constructor}></>) throw __iterator__;");
tryItOut("return setter;\n\n");
tryItOut("M:if((@foo.__lookupSetter__(\"prop\"))) {var constructor, prop = 0.1;continue ; }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in ((function (__proto__, prototype)(new (Function)(let prototype = 0/0, ( /* Comment */window))))(<x><y/></x>.__lookupGetter__(\"__parent__\"))))/*infloop*/for(const ({ __count__:  \"\"  }) = (window)(<x><y/></x>, window); (yield __noSuchMethod__ <<= window);  /x/ ) {export prop; }");
tryItOut("/*infloop*/for(let __proto__; ({__noSuchMethod__ setter: 0x99,  set __proto__ __proto__ () { return this.__defineGetter__(\"constructor\", <><><y ({ __iterator__: __proto__, prototype: ({ __noSuchMethod__: ({ __parent__: ({ __iterator__: prop, constructor: __noSuchMethod__ }) }) }) })//xprototype, __proto__></>) }  }); <y><z/></y>) {(window); const __iterator__; }");
tryItOut("with({__noSuchMethod__: (uneval(true)).([(true >>> constructor) for each (__count__ in *::*) for each (__iterator__ in <x><y/><\t/x>)]).yoyo(eval(\"this\", ))})/*for..in*/for(let [__count__, constructor] = __parent__.__iterator__ = constructor in undefined) /*infloop*/L:for(let __noSuchMethod__ =  \"\" ; *::*; 1e-81) {return; }");
tryItOut("/*for..in*/for(let [constructor, each] = 1e81 in <><x><y/></x></>) {return; }");
tryItOut("/*infloop*/L:for(var ({ __iterator__: function::__noSuchMethod__ }) = ({ get __parent__ constructor () { yield  \"\"  }  }); prop = <><x><y/></x></>.watch(\"*\", (1 for (x in [])));  /x/g ((<x><y/></x>.(<y><z/></y>))(), <bbb xmlns:ccc=\"(prototype =  /x/ )\"><ccc:eee></ccc:eee></bbb>)) do yield 3; while((__parent__ = 'fafafa'.replace(/a/g, Function)) && 0);");
tryItOut("/*for..in*/for(let [__proto__, prop] = <xxx>{__noSuchMethod__}</xxx>.((3.141592653589793 ? -3/0 :  /x/g )).propertyIsEnumerable(\"constructor\") in new __count__([, , prototype, __parent__], <x/>)) {export __proto__; }");
tryItOut("/*for..in*/for(var [({ __iterator__: return;, x::__proto__: __count__ }) = [window if ([[]])], (([11,12,13,14].filter).prototype), __parent__] =  %= (033.__proto__) in __count__\f = true) {break M; const prototype;export *; }");
tryItOut("/*infloop*/do /*infloop*/do <bbb xmlns=\"(*::*.propertyIsEnumerable(\"__proto__\")--)\"> </bbb> while(__iterator__.prototype, constructor = <><x><y/></x></>); while((constructor.__proto__));");
tryItOut("with({constructor: (Math.pow).call((this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)),  \"\" \n)}){yield; }");
tryItOut("if((function::prop = null)) { if (this) const __iterator__ = false; else gc()}");
tryItOut("/*for..in*/for(var __proto__ in ((prototype = window)(1.2e3))){1e-81; }\n");
tryItOut("/*for..in*/for(const __parent__ in ((<><x><y/></x></>)((yield @foo))))continue ;");
tryItOut("let function::__parent__,  { \tvar __proto__ = this; } \n");
tryItOut("if((constructor.__parent__ getter= function (__parent__, __count__) { yield /a/gi } )) with(null || this){{} } else  if (#2=({constructor: <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>})) {null;/*for..in*/for(const __parent__ = 0.1 in window) {gc() } } else {var prop = false, prop, __count__;(prop\t);(__parent__); }");
tryItOut("/*infloop*/do export __proto__; while([0x99].sort((-1)));");
tryItOut("{yield <><x><y/></x></>;export *; }");
tryItOut("return;");
tryItOut("L: {if(__count__) { if (this) {yield; }} else export prototype;let __iterator__, __iterator__; }");
tryItOut("/*for..in*/for(const [__parent__, __proto__] = try { {} } catch(constructor) { yield; } finally { /a/gi }  in prototype =  /x/g ) {/*infloop*/for(const constructor = <><x><y/></x></>; <><x><y/></x></>; undefined) {\texport __noSuchMethod__;break L; } }");
tryItOut("/*infloop*/do with(<y><z/></y>){; } while(( /x/  .@ @foo));");
tryItOut("M:if() /*for..in*/for(constructor in (([1,2,3,4].map)([,].propertyIsEnumerable(\"__count__\")//h\n))) \"\" ;");
tryItOut("return ({})");
tryItOut("/*infloop*/for(prop = undefined if (<><x><y/></x></>); 'fafafa'.replace(/a/g, gc); <x><y/></x>.eval(<x/>)) Function");
tryItOut("var __iterator__ =  '' , __parent__; const __noSuchMethod__;");
tryItOut("if( /x/g ) var __iterator__; else  if ( /x/ ) yield <y><z/></y>; else var __parent__ = 1e+81, let;");
tryItOut("L: export *;{; }");
tryItOut("__proto__ = __iterator__;");
tryItOut("if((<y><z/></y>).call(*::*\n, <x/>.isPrototypeOf( /x/g ), <x><y/></x>)) return;");
tryItOut("return null.eval(__count__);");
tryItOut("let(each = false, prototype = ({})) { const __proto__, prop = <><x><y/></x></>;");
tryItOut("switch((* for each (__proto__ in true))) { case 6: gc()break;  }");
tryItOut("M:if(new (function ()*::*)(<><x><y/></x></>,  '' )) { if (this.zzz.zzz) let __proto__; else if(<>\t<x><y/></x></>) {yield; } else  if (\t<x><y/></x>) {yield __iterator__; }}");
tryItOut("yield (({__count__:  /x/g })\n)[__noSuchMethod__ = __proto__].__iterator__;");
tryItOut("let (__proto__ = <x><y/></x> .@x:: <x><y/></x>) { __iterator__ = __noSuchMethod__, __count__ = <><x><y/></x></>; }");
tryItOut("{{} }\nreturn  /x/ ;\n");
tryItOut("if(3.141592653589793) ; else  if (this) {const case 5:  = false, prop = <><x><y/></x></>;return @foo; } else {}");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x>) {}\nconst __parent__;");
tryItOut("let constructor\n");
tryItOut("do if(undefined)  else (this); while((null if (<x><y/></x>)) && 0);");
tryItOut("/*infloop*/for(\tconst constructor = [[]]; <x><y/></x>; [1,,]) break L;");
tryItOut("throw StopIteration;");
tryItOut("return <x><y/></x>;return\n");
tryItOut("/*infloop*/for(__parent__ =  if ((undefined != <><x><y/></x></>)); new (window.isPrototypeOf(function ([y]) { }) <= (.2)(__proto__))(((<x/>.@*) ..  /x/g )); prop = (\n(__noSuchMethod__ = <>x><y/><__proto__ = this/#1=[#1#].prototypex></> .@*:: ((p={}, (p.z = (prop >= <y><z/></y>))()))).watch(\"__iterator__\", /a/gi))) {{export *; }/*for..in*/for(let prototype = ([1,2,3,4].map)(([window].map([1,2,3,4].slice)).watch(\"__noSuchMethod__\", (new Function(\"export *;\")))) in \n(({}).watch(\"__iterator__\", (<x/>).call))) return; }");
tryItOut("return (this.__defineGetter__(\"__count__\", function ( try ) { /*for..in*/L:for(const prototype in <x/>) yield; } ));");
tryItOut("if( '' ) {return <x><y/></x>;\f{} } else {return this; }");
tryItOut("L: var __parent__;");
tryItOut("/*for..in*/for(const ({ constructor: __iterator__, __count__: __noSuchMethod__ }) = __proto__ = @foo.__noSuchMethod__ in ((function  __parent__ () { yield __noSuchMethod__ = (this.__defineGetter__(\"__proto__\", ({}).hasOwnProperty)) } )( /x/ ))){L:if(({a1:1})) {throw *; } else  if ((uneval(<><x><y/></x></>))) {__count__ } else __noSuchMethod__, constructor;/*infloop*/for(prop; (__noSuchMethod__.__iterator__); ((-3/0)[ /x/g ])) {let __count__ = *, prop = this } }");
tryItOut("setter: falseexport *\nswitch(.2) { case 0: yield  '' ; }");
tryItOut("switch(([this].sort(().call)).__defineGetter__(\"prop\", function(q) { return q; })) { case (window.@*.@*).__lookupGetter__(\"__noSuchMethod__\"): while(([eval(\" /x/ \", constructor)].some((1 for (x in [])))) && 0)switch(( /x/g  === <x/>.throw(((/a/gi)())))) { default: break;  }break; /*infloop*/L:while(1e81.isPrototypeOf((window))){/*for..in*/for(let [__proto__, constructor] = <><x><y/></x></> in <x><y/></x>) {export export *;;break ; }prototype, prototype; }break; case 3:  }");
tryItOut("/*for..in*/for(const constructor.prototype in  \"\" ) M:do {export *;const __count__, #3={a:#3#}; } while((<><x><y/></x></>) && 0);export *;");
tryItOut("while((__count__|=<x><y/></x>.(*)) && 0){/*infloop*/do gc() while( /x/g ); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __count__) return;");
tryItOut("switch((( '' .throw(<><x><y/></x></>))).__defineSetter__) { default: break; return __iterator__;\n/*infloop*/{}\ncase 6: if((<><x><y/></x></>)(null)) throw __proto__; else  if (__proto__ =  /x/g .__lookupGetter__(\"prop\")) /*infloop*/M:while(function(id) { return id }){export *; } else prototype;break; case 9: L:while((<bbb xmlns:ccc=\"-0.__lookupGetter__(\"__iterator__\")\"><ccc:eee></ccc:eee></bbb>) && 0){; }case 7: (<x/>);break; break; case 0: break; case 7: case __proto__ = @foo: break;  }");
tryItOut("with((__proto__)){/*infloop*/for(let __count__; null; __noSuchMethod__) constructor = undefined;export constructor; }");
tryItOut("{if(\n.2) { if (new ((this).watch).call(<><x><y/></x></>, [1,,])) ;} else {export *;constructor = <><x><y/></x></>; }let (__noSuchMethod__ = window, __count__) { {} } }");
tryItOut("/*infloop*/for(<x><y/></x>; <x/> , *::*; undefined\n) {throw <x><y/></x>; }");
tryItOut("if(new (eval(\"\",  '' ))(<><x><y/></x></>)) { if (prop =  \"\" ) {let prop; }} else {__count__;{} }");
tryItOut("break ;");
tryItOut("L: ; const __count__;");
tryItOut("/*infloop*/for(var [,,] = this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"break L;\"))).*; new ([15,16,17,18].some(function \n() { return undefined } , window)).throw(undefined)(); yield 3/0) {([,,]); }");
tryItOut("/*for..in*/for(let __parent__ in [15,16,17,18].map(({}).__lookupGetter__,  /x/ )) {/*for..in*/for( let(__proto__, function::__iterator__) ((function(){gc()})());[1,,] in ((/a/gi)(Object(constructor, false))))throw undefined; }");
tryItOut("break L; const __count__;let prop = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in __proto__) {const __parent__;export __noSuchMethod__; }");
tryItOut("with({prototype: window})\nif(3/0 ? undefined : *::*)  else {export prototype; }");
tryItOut("/*for..in*/L:for(const this['__iterator__'] in ((/a/gi)((__iterator__.(<><x><y/></x></> & window))))){let __parent__ =  \"\" , prop = 3.141592653589793;const __proto__, constructor = this; }");
tryItOut("with({}) (__noSuchMethod__(3.141592653589793) = [1,2,3,4].map);");
tryItOut("/*infloop*/for(__parent__; __iterator__; var __count__{return 1e4;constructor; }");
tryItOut("with({prop: (this.__defineSetter__(\"__proto__\", function(q) { return q; }))}){M:if(constructor) {let __count__ = 3/0;(let __noSuchMethod__, prototype = <><x><y/></x></>;).apply } else export *; }");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("try {  } catch(\fconstructor) { yield #1#; } ");
tryItOut("switch(prop.__lookupSetter__(\"__proto__\")) { default: let __parent__ = <x><y/></x>;break; case 0: yield;break;  }");
tryItOut("M:if(#0=[__count__.__parent__]) yield __iterator__;");
tryItOut("if(4.) {/a/gi } else  if (this) export *; else var prototype = null, __iterator__ = @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __noSuchMethod__) {throw  '' ; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(__proto__.__proto__)yield (yield window);");
tryItOut("{if(<x><y/></x>) break M; else let __iterator__ = 0x99; }");
tryItOut("let (__iterator__ = 'fafafa'.replace(/a/g, __count__), __proto__) { /*for..in*/for([__parent__, function::__parent__] = *::* in prototype = constructor) {{} } }");
tryItOut("if((new (function  constructor ()<x><y/></x>).apply())) { if (<y><z/></y>) {return true;continue ; } else {gc() }}");
tryItOut("__parent__ = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((((uneval(*::*))) instanceof \tconstructor = *::*))({}) in ({__parent__: (eval(\"@foo\", -3/0)),  set prop prop () { return (new function(y) { yield y; ;; yield y; }((\n<y><z/></y>), this)) }  })) L:if(__iterator__\n) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("M:switch((<><x><y/></x></>.throw(null))) { default: {/*infloop*/while(0/0){throw @foo;export __parent__; } }{}case 2: /*infloop*/do *::* while((const prop)); }");
tryItOut("{while(((window--.isPrototypeOf(let <=  \"\" ))) && 0){return window;continue M; } }");
tryItOut("{const <x/>, __proto__ =  '' ; }");
tryItOut("do return @foo ? this : true; while(( /x/ .*.prop = ( ''  >>> <x><y/></x>//h\n++).__defineGetter__(\"prototype\", 'haha'.split)) && 0);");
