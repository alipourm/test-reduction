tryItOut("/*infloop*/while( /x/ )yield;");
tryItOut("M:if(new __noSuchMethod__()) {/*infloop*/do {export *;{} } while(__iterator__);L:with( /* Comment */__parent__){export *;; } }\f else  if (1.3) {if([<x><y/></x\f>].filter((new Function(\"gc()\")))) break M; else  if (export *) return ({}); else {continue ; } }");
tryItOut("/*infloop*/do var constructor =  /x/g ; while((*::*.__lookupSetter__(\"__proto__\")));");
tryItOut("if(<x><y/></x>) {yield;{} }");
tryItOut("L:with(\n-0)<x><y/></x>");
tryItOut("/*for..in*/M:\ffor(var [prototype, __iterator__] = (<><x><y/></x></>[#1=[#1#]]) in (uneval(<><x><y/></x></>))) {if(\n<x><y/></x>) { if (new (<x/>)()) (#3={a:#3#}); else {3; }} }");
tryItOut("do gc() while((this.__defineSetter__(\"__iterator__\",  '' )) && 0);");
tryItOut("for(let y in []);");
tryItOut("while((<y><z/></y> > -3/0) && 0)eval");
tryItOut("L:if(({<y><z/></y>: 3})) {}\n else  if (prototype) 033;");
tryItOut("/*infloop*/while(([1,,] &= <x><y/></x>))gc()");
tryItOut("this.zzz.zzz;");
tryItOut("yield; const prototype;");
tryItOut("{{} }");
tryItOut("with(<x/>){break L; }gc()");
tryItOut("/*infloop*/M:for( !== true;  \"\" .__defineSetter__(\"constructor\", (<x/>).__defineSetter__); (this.__defineSetter__(\"constructor\", /a/gi))) /*infloop*/for(var ({ prop: __iterator__, setter: constructor }) = (({__proto__ setter: function (prototype, __iterator__) { yield <x><y/></x> } , function::__count__: this })); * -= this; __parent__ = [z1,,]) break ;");
tryItOut("/*infloop*/for(let __iterator__; (yield delete); function  __noSuchMethod__ (__parent__) { export __count__; } ) {return; }");
tryItOut("break M;");
tryItOut("/*infloop*/M:for(var constructor;  for (__iterator__(*) in __noSuchMethod__)( /x/g ); <<= ([<x><y/></x>]); arguments) {yield;{prop = #1#, __noSuchMethod__;{} } }");
tryItOut("with(true ^= (<><x><y/></x></> >> <><x><y/></x></>)){while(((let (__count__)  \"\" )) && 0);this.zzz.zzz; }");
tryItOut("if(prop) {export prototype;gc() }");
tryItOut("");
tryItOut("if(__parent__ = <><x><y/></x></>) { if (((uneval(arguments))) if (prop)) /*infloop*/for(@foo;  /x/ ; __iterator__) (3/0); else {}}");
tryItOut("export *;\n((p={}, (p.z = undefined)()))\n");
tryItOut("/*infloop*/while(3.141592653589793){ '' ; }");
tryItOut("while((([(prop) if (<x><y/></x>)].__defineSetter__(\"__parent__\", function(q) { return q; }))) && 0){throw <x/>; }");
tryItOut("#1#");
tryItOut("__noSuchMethod__ = 033;");
tryItOut("with({__noSuchMethod__: __proto__.unwatch(\"constructor\")})return;");
tryItOut("return <><bbb xmlns:ccc=\"\n<x><y/></x>\"><ccc:eee></ccc:eee></bbb></> .@*:: eval(\"*::*\", Math.sin);");
tryItOut("/*for..in*/for(var [prototype, __parent__] = <x><y/></x>.propertyIsEnumerable(\"constructor\") in <><x><y/></x></>) {return <x/>; }");
tryItOut("var __noSuchMethod__, __count__;");
tryItOut("/*infloop*/M:for(let ({ __count__: __parent__ }) = new this.valueOf(\"number\")((false)[<x/>]); *++.eval(__iterator__ = <y><z/></y>); #0=prototype = prototype , (prop = 1e81)()) {([1,,]);[1,2,3,4].slice }\nif(new <x/>) {; } else  if ([true if (__parent__)\f]) let __iterator__;");
tryItOut("((({ get __parent__ __iterator__ (__proto__) { const constructor; }  })) / (<x/>.eval(this)))");
tryItOut("gc()");
tryItOut("while(((window)) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in  /x/g ) gc() }");
tryItOut("return;let prototype, prototype;");
tryItOut("return @foo; const __count__;");
tryItOut("while(((__noSuchMethod__ = *::*)) && 0)if(<y><z/></y>) const __proto__, __proto__ = [z1]; else export *\n");
tryItOut("/*for..in*/for(__iterator__ = <x><y/></x> in <><x><y/></x></>) {let __iterator__, __parent__ = undefined; }");
tryItOut("/*infloop*/for(({ __proto__:  }) = this.__defineSetter__(\"prototype\", function (__iterator__) { gc() } ); function(id) { return id }; ((p={}, (p.z = window)())).isPrototypeOf((eval).call(*::*, this, function::__iterator__))) {let __noSuchMethod__, __proto__; }");
tryItOut("let (({ prop: ({ __count__: __noSuchMethod__ }), __noSuchMethod__: ({ prototype: __proto__, gc(): constructor }) }), prototype) { return <x/>; }");
tryItOut("/*infloop*/for(1e81; <x><y/></x>; <y><z/></y>) {export *;gc() }");
tryItOut("__parent__.prop = __parent__;");
tryItOut("/*infloop*/for(let __noSuchMethod__; *::*; window) yield *::*;");
tryItOut("if(__iterator__.constructor = constructor.__iterator__ = window += yield null) let (prop = null) { return <x/>; } else {__iterator__.__parent__ setter= Math.pow; }");
tryItOut("if((<x><y/></x>)[null]) {gc() }");
tryItOut("if([-1].some([,,z1])) {export *;3.141592653589793; }");
tryItOut("throw arguments;");
tryItOut("/*infloop*/do Math.sin while(constructor = [,,]); const __count__;");
tryItOut("if(__iterator__.yoyo(<><x><y/></x></>)) {if({}) x::__iterator__ else  if (<x><y/></x>) {;export __count__; }{} } else  if (Math.sin([[]]).__parent__ = __proto__.__proto__ = (({}).__lookupGetter__).call(*::*, )) { }");
tryItOut("{L:switch([,]) { default: break; case (__iterator__ >>> <y><z/></y> / false.__defineGetter__(\"__parent__\", /a/gi)): break; case 8: break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\fM: for  each(let [] in undefined.@foo(constructor =  /x/g )) yield (function (__noSuchMethod__) { return <x><y/></x> } ).call( /x/g , this) = var __iterator__ = (function ([y]) { })();");
tryItOut("let(constructor, prototype = <y><z/></y>) { ;");
tryItOut("with('fafafa'.replace(/a/g, [1,2,3,4].slice))prototype: <x><y/></x>");
tryItOut("L: {let (__parent__ = 1.2e3, __parent__ = <><x><y/></x></>) { gc() } }");
tryItOut("let (constructor) {  }");
tryItOut("with(__parent__ = constructor){; }");
tryItOut("M:if(<x/>) let (__noSuchMethod__ = ([[1]])) { (<><x><y/></x></>).watch } else  if ([--new (<x><y/></x>)(({prototype: prop}),  \"\" )].filter(gc)) {yield; }");
tryItOut("let (, __noSuchMethod__) { break L; }");
tryItOut("/*for..in*/L:for(let prototype in this.zzz.zzz) if(let (constructor = <><x><y/></x></>.watch(\"prototype\", *)) new Function(arguments)) { if (/*for..in*/for(prop in <y><z/></y>) gc()) {} else {if(null.@*) {(<x/>); } }}");
tryItOut("/*for..in*/for(let prop.__proto__ in new throw <x><y/></x>;()) {let (__count__ = <x><y/></x>, __iterator__ = window) { export prototype; }yield  /x/ ; }\n");
tryItOut("switch(__count__.function::__parent__) { default:  }");
tryItOut("if( /x/  * null) {export function::constructor; }");
tryItOut("/*infloop*/for(let ({ __iterator__: __proto__, __iterator__: ({ prop: constructor, __count__: [, , ({ __noSuchMethod__: ({ __iterator__: __count__ }), __proto__: [] })] }) }) = <x><y/></x>--.watch(\"__parent__(({}))\", function(q) { return q; }); (@foo((prop = <><x><y/></x></>.isPrototypeOf(null)), eval(\"<y><z/></y>\", <y><z/></y>))); __count__) {do {var __proto__;return @foo; } while(( /x/g .__lookupSetter__(\"prototype\")) && 0);/*infloop*/for(let ({ __parent__: __noSuchMethod__, __parent__: ({ __parent__: prototype }) }) = ([prototype, , , __parent__, __count__] =  '' ); new (new (Function)(@foo))([1,2,3,4].slice(__count__.@*, @foo)); <>constructor.__lookupGetter__(\"__iterator__\")</>) {} }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("throw __iterator__;");
tryItOut("null;throw <><x><y/></x></>;");
tryItOut("/*infloop*/for((__parent__ = window++); this.zzz.zzz; ((*::*)[window])) {export *;export __parent__; }");
tryItOut("do {/*infloop*/L:while(typeof [15,16,17,18].map((<><x><y/></x></>).call, )){yield this; } } while((this.zzz.zzz == (yield <><x><y/></x></> ? window : <x><y/></x>\f)) && 0);");
tryItOut("L:with({prop: constructor[<><x><y/></x></>]})//h\n<><x><y/></x></>;");
tryItOut("{}");
tryItOut("while(((yield true++)) && 0){yield\n/*infloop*/for(<y><z/></y>; __iterator__; @foo) (new Function(\"yield;\")) }");
tryItOut("if(([1,2,3,4].slice).call(this, )) {continue M; } else  if (true .@x:: <x/>) {let __count__, __count__ = -3/0; }");
tryItOut("/*for..in*/L:for([constructor, prop] = true in @foo) ");
tryItOut("continue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor(false) in Function) {throw this;throw <x><y/></x>; }");
tryItOut("/*infloop*/\tfor(let prop; window; <x><y/></x>) yield undefined;");
tryItOut("/*for..in*/M:for(let __parent__ = yield [15,16,17,18].filter(<x><y/></x>, <x><y/></x>) in [15,16,17,18].some(Math.sin, *::*)) if(<x><y/></x>) { if (-1) let __noSuchMethod__; else {var __noSuchMethod__ = window, __iterator__; }}");
tryItOut("/*infloop*/do {gc(){} } while(__proto__);");
tryItOut("/*infloop*/for(undefined.hasOwnProperty(\"__proto__\"); (__count__.__parent__ getter= <x><y/></x>.__defineSetter__(\"__parent__\", <x/>))++; __iterator__) do gc() while((true.unwatch(\"__parent__\")) && 0);");
tryItOut("M:switch((eval(\"'fafafa'.replace(/a/g, this)\", function::__proto__ = this[<x><y/></x>.isPrototypeOf(__noSuchMethod__)]))) { case \n<x><y/></x>: let (__parent__ = (<x><y/></x> .@x:: this for each (__iterator__ in <x><y/></x>) % eval(\"/*for..in*/for(let prop in this) let __noSuchMethod__ = 5.0000000000000000000000, __iterator__;\", ((yield null)))), []) { let __iterator__; }break;  }");
tryItOut("if((prototype.( /x/ ))) prop = [1], __parent__ = window; else  if (yield @foo) {Math.pow }");
tryItOut("{[1];__count__ }");
tryItOut("with([z1,,])-0");
tryItOut("/*infloop*/while(null)\nlet prop = __noSuchMethod__;");
tryItOut("with({__count__: ({prototype: (null in <><x><y/></x></>) % <><x><y/></x></>})}){(<x/>); const prototype; }");
tryItOut("export constructor;\n;\n");
tryItOut("/*for..in*/for(__parent__ in ((function (get) { /*infloop*/while(prototype)return; } )((__noSuchMethod__ = ({ __proto__: __proto__, prototype: prop })))))L: {; }");
tryItOut("L:do {__noSuchMethod__ = <x><y/></x>;var __count__ = <><x><y/></x></>; } while((<><xxx>{__noSuchMethod__}</xxx></>) && 0);");
tryItOut("{if(1e81) {__proto__, constructor = *::*; } else  if (@foo) {let constructor = <>\f<x><y/></x></>, prototype = false; } }");
tryItOut("let (__iterator__ = <x><y/></x>) { ( /x/g ); }");
tryItOut("with({}) let(__parent__, __count__) { try {  } catch(__parent__) { window; } ");
tryItOut("/*for..in*/L:for(const constructor in (([1,2,3,4].slice)((~undefined)))){/*for..in*/for(/*\n*/const constructor = prop, __parent__ in -1) break ; }");
tryItOut("if(<><x><y/></x></>) {{} } else {export *; }");
tryItOut("{/*infloop*/for(__parent__; -1; null) {let __count__, constructor = #1#; } }");
tryItOut("/*for..in*/M:\tfor(let [__proto__, constructor] = function::prototype.__iterator__ getter= (1 for (x in [])) in  /x/g  - <x><y/></x>.(undefined)) {/*for..in*/for(var constructor in ((function (__parent__, constructor)false)(false.__defineGetter__(\"prop\", [1,2,3,4].slice))))throw  /x/ ; }");
tryItOut("if(@foo[<x/>]) {} else  if (new (gc)(<x/>) , this.__defineGetter__(\"prototype\", null)) {__proto__;\n;\n }");
tryItOut("export *; const prop;");
tryItOut("return;prop = <y><z/></y>, constructor;");
tryItOut("/*infloop*/M:while((window.isPrototypeOf( /x/ )))(__parent__);");
tryItOut("with({}) { eval } ");
tryItOut("yield (++yield prototype >>> (([1,2,3,4].map)(*\n)).hasOwnProperty(\"__proto__\"));");
tryItOut("/*for..in*/for(const constructor = true in (true.eval(<x/>))) /*for..in*/for(__iterator__.constructor in <><x><y/></x></>) (*);");
tryItOut("/*for..in*/for(let __parent__ = __count__ ===  /x/  in  /x/g ) {continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x><y/></x> /= __parent__) {(__proto__); }");
tryItOut("with([*.yoyo([])].sort(0x99)){throw (eval(\"yield  \\\"\\\" ;\", -<x/>)); }");
tryItOut("/*infloop*/for(let prototype = #0=({__iterator__: (({__count__:  /* Comment */<><x><y/></x></>}))}); [(window ? <\fx><y/></x> : <x/>) for each (prototype in (__noSuchMethod__.(<><x><y/></x></>.__defineSetter__(\"yield\", __proto__)))) for (prototype in (*::*)(<y><z/></y>, prototype)) for (__count__ in window) for each (prototype in 1.2e3) for each (__proto__ in 1.3)]; new (function (__parent__, __count__) { return __iterator__.* } )([<><x><y/></x></> if (prototype)] & {{}yield; }, 'fafafa'.replace(/*\n*//a/g, __parent__))) {do export *; while((__parent__) && 0);prototype = <x><y/></x>;yield\n }");
tryItOut("with({prop: ([\f(({}).__noSuchMethod__ = __parent__.__defineSetter__(\"prototype\", gc))])}){/*for..in*/for(let function::__iterator__ = [,,z1] in undefined) {__proto__ }/*for..in*/for(var prop = 1e-81 in (-1))  /x/ ; }");
tryItOut("let (function::__noSuchMethod__ = ~(\f(yield yield prop))) { if([__count__ if (<x><y/></x>)]) { if ([,].throw(__proto__) < <x/>) return; else { { export *; }  }} }");
tryItOut("//h\n{/*infloop*/for(var __iterator__ = undefined; null;  /x/ ) {yield null;; } }");
tryItOut("/*for..in*/for(const get in <><x><y/></x></>) prototype getter: *");
tryItOut("if(constructor) export *; else {throw *::*;gc() }");
tryItOut("L: export *;");
tryItOut("if((prototype = \fthis.__defineGetter__(\"constructor\", function  __proto__ () { __iterator__; } ))) yield;");
tryItOut("M:if(__iterator__) return; const __proto__\n");
tryItOut("this.zzz.zzz;");
tryItOut("do /*infloop*/\nM:for(<x/> = (continue L); <x><y/></x>.(<x><y/></x>); (p={}, (p.z = prototype)())) return <><x><y/></x><\f/>; while((__noSuchMethod__.prop = <x><y/></x>.throw(__parent__)) && 0);");
tryItOut("/*infloop*/M:while( /x/  ? prop :  /x/ \f)/*infloop*/for(const ({ prototype: [({ __proto__: prototype }), , , , ], __noSuchMethod__: ({ __count__: [({ __iterator__: __iterator__ }), , , __proto__ = (*.__proto__), ] }) }) = (new <y><z/></y>() in __proto__.prop); ({prototype: (<><x><y/></x></>)(), constructor: [[1]] >>= <><x><y/></x></> }); (__noSuchMethod__.((uneval(<><x><y/></x></>))))) yield <><x><y/></x></>;");
tryItOut("/*infloop*/do yield <x><y/></x>; while([this]);");
tryItOut("if((yield [window for each (/*\n*/__proto__ in false)])) { if ([[1]]) let __noSuchMethod__, __noSuchMethod__ = undefined;} else \t{(({a2:z2}));if(constructor) {break M; } else  if (prototype) {__proto__, __count__;(<y><z/></y>); } }");
tryItOut("/*for..in*/M:for(let constructor = [15,16,17,18].sort(function () { yield * %  /x/  } , prop) in new Array()) {throw <x><y/></x>; }");
tryItOut("return;");
tryItOut("/*infloop*/for(__parent__; [15,16,17,18].filter(prop, ({__count__ getter: function(y) { yield y; [z1,,];; yield y; }, ({a2:z2}) setter: new Function })); (/a/gi).call(delete <x><y/></x>, (__parent__ = <><x><y/></x></>), window)) /*infloop*/for((<y><z/></y>)[033]; (__parent__ ==  \"\" );  /x/  && <><x><y/></x\t></>) (window);");
tryItOut("if(((yield <><x><y/></x></> += <x/>))) { } else  if (get) L:if((new <x><y/></x>(constructor.__parent__ getter= [1,2,3,4].map))) {do return; while((<x><y/></x>) && 0); } else  if (<x/>\n) {let constructor;const __parent__ = <y><z/></y>, __proto__ = <x><y/></x>; } else if(<><x><y/></x></>) { if (this) var __iterator__, prop =  /x/g ;} else (#1=[#1#]); else {return; }");
tryItOut("L: {this.zzz.zzz; }");
tryItOut("/*infloop*/M:for(__iterator__; __iterator__; <x><y/></x>) {var __noSuchMethod__ = __iterator__; }");
tryItOut("M:if(#3={a:#3#} ^ null) { } else  if (prop%=new __iterator__\n()) {/*for..in*/for(let __proto__ in (((1 for (x in [])))(function(id) { return id })))const __parent__ = prop;__iterator__ = <x><y/></x>; }");
tryItOut("if( /* Comment */__parent__) Math.pow else  if (function \t constructor (prototype) { return  ''  } ()) let prototype; else <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in ;) {{} }");
tryItOut("return window;if(<x/>) { if ((<><x>y ({ constructor: prototype }) /><x::__proto__ /x <zzz>@foo.eval(#1#)</zzz>></>.eval(this))) (__iterator__); else <><x><y/></x></>;}/*\n*/");
tryItOut("while((__noSuchMethod__ = 1e+81) && 0)/*for..in*/M:for(let __count__ in let (__count__ = function ([y]) { }, __count__ = @foo) ({})) export prop\nthrow null;\n(*);\n\n/*infloop*/L:for(__iterator__; <><x><y/></x></>; 0) {return;gc() }");
tryItOut("__iterator__ = __parent__;");
tryItOut("/*for..in*/L:for(let __proto__ = ({ prototype: __count__ }).propertyIsEnumerable(\"__parent__\") in 1e-81.__defineSetter__(\"prop\"\f, ({}).__lookupGetter__)) for(let y in []);");
tryItOut("try { this.zzz.zzz; } catch(constructor) { let(__parent__ = -3/0 != window, prototype) ((function(){/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in window) {{}yield; }})()); } ");
tryItOut("r");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (<><x><y/></x></>)( '' ) in prop = <x/>.yoyo(*::*)) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in [1,,]) window;return; }");
tryItOut("L:if([,,]) {}");
tryItOut("M:if( /x/g ) { if ((<x/> = (({ set constructor __count__ (__parent__) { return __iterator__ }  })) ? prop : ((prop = prototype for each (prop in <x><y/></x>)) &= __noSuchMethod__ = window.propertyIsEnumerable(\"prop\")))) /*for..in*/for(__count__ in ((function  __iterator__ (__proto__, prototype)(__count__ = (yield @foo)))( /x/g .constructor.prop = *::*)))if(yield []) {const constructor = <y><z/></y>, __noSuchMethod__; } else  if (undefined) {yield this; } else {throw \n /x/g ; } else switch((<><x><y/></x></> ? *::* : __proto__ if (prototype))) { default: (uneval(<><x><y/></x></>));break; case 1: /*infloop*/do {var __parent__ = prototype, prototype =  \"\" ; } while((this.propertyIsEnumerable(\"__parent__\")));case yield <x/>:  }}");
tryItOut("if((new (1.3)(<><x><y/></x></>) /= (({__noSuchMethod__: -0 }) * (prototype = *))).\r__defineSetter__(\"__proto__\", (new Function(\"throw  /x/ ;\"))).__defineSetter__(\"__iterator__\", function (x::__parent__) { return /a/gi() } )) {/*infloop*/for(const __iterator__; <xxx {__parent__}={<y><z/></y>} />; (<x><y/></x> <<= <x><y/></x>)) return 1e+81; } else  if (new (eval)((3/0).__defineSetter__, window / ((#3={a:#3#})[*]))) {/*infloop*/while(.isPrototypeOf(<x><y/></x>)){{} } }");
tryItOut("L:switch(<x/>.__noSuchMethod__ = prototype( \"\" )) { case constructor = <x/>.yoyo(eval(\"this\", #1#))\n: /*infloop*/for(var constructor = [<><x><y/></x></> for (__iterator__ in @foo)]; *\n; constructor = __iterator__) __count__{export *;let ; }break; break; default: break;  }");
tryItOut("break ;");
tryItOut(";");
tryItOut("");
tryItOut("switch((p={}, (p.z = *)())) { default: (({}).__lookupGetter__).call, __iterator__ }");
tryItOut("switch(__noSuchMethod__ = <><x><y/></x></>) { case (({ get prop __count__ (prop, prop) {  } , __iterator__ setter: (*::*).__defineSetter__ }) ^ ({__parent__: __count__ })): function (__parent__, __noSuchMethod__)<y><z/></y> }");
tryItOut("/*for..in*/for(const prototype in ( /* Comment */(p={}, (p.z =  \"\" )()))) /*for..in*/M:for([__count__, prototype] = @foo in (-0))  const prototype;");
tryItOut("L: return;(__noSuchMethod__);");
tryItOut("{M:with((p={}, (p.z = prop)()))export *; }");
tryItOut("/*for..in*/L:for(__count__ = __count__ .. [1] in  '' ) ;");
tryItOut("L:if((++<y><z/></y> .@*::  /x/g )) {<><x><y/></x></>;break M; } else  if ((p={}, (p.z = 0 ?  ''  : <x><y/></x>)())) yield;");
tryItOut("/*infloop*/for(let __proto__; \nthis; <><>prototype / undefined.__proto__</></>) #3={a:#3#}");
tryItOut("/*for..in*/for(__noSuchMethod__ = (( ''  ^= <x/>) for (({ __iterator__: ({ constructor: __parent__ }) }) in ([1,2,3,4].map)) for each (__proto__ in __parent__ = *::*)) in (new *::*()).watch(\"<x><y/></x>\", (function(y) { yield y; {}; yield y; }).call)) return;");
tryItOut("with({__proto__: (__noSuchMethod__ = constructor[(<><x><y/></x></>.yoyo( \"\" ))])}){switch(window) { case 9: break ;break;  }while(([[1]].__parent__) && 0){export *;return this; } }");
tryItOut("while((\n[[1]] ? [,] : null) && 0){prop, __proto__ = 3; }");
tryItOut("__proto__ = __proto__;");
tryItOut("/*for..in*/L:for(var __count__ in prop) {{} }");
tryItOut("if(this) { if (1.2e3) export __count__;} else {default:  }");
tryItOut("/*infloop*/for(<x/>;  for (*::* * <y><z/></y> in null.__noSuchMethod__).eval( /* Comment */[1,,]); new Error([,], <x><y/></x> instanceof <x><y/></x> / (yield ({a2:z2})))) {yield <x/>;/*infloop*/for(window;  \"\" ; 1e+81) return ; }");
tryItOut("/*for..in*/for(const prototype = (__count__%=<x><y/></x>) in __proto__) __noSuchMethod__, __iterator__;\t");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in undefined) {<y><z/></y>; }");
tryItOut("/*for..in*/for(var \f[__noSuchMethod__, __parent__] = (prop = #1=[#1#]).* in ([__proto__].filter(new Function))) {/*infloop*/for(let ({ function::__iterator__: [, ] }) = 'fafafa'.replace(/a/g, Function); this; new ( /x/g )()) /*for..in*/L:for(var __count__ in __proto__ =  /x/g ) {export prop;<><x><y/></x></>;/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in this) throw <><x><y/></x></>; } }");
tryItOut("/*for..in*/for\f(var prop = ( /x/ .yoyo(window)) in *::*) __iterator__;");
tryItOut("let(__iterator__ = (4..__lookupGetter__(\"delete\"))) { prototype = yield;");
tryItOut("throw  /x/ ;");
tryItOut("M:do with({prototype: @foo}){continue M; } while((eval(\"__count__ = 1e+81 < <><x><y/></x></> * 0/0\", ((++<><x><y/></x></>).__proto__))) && 0);");
tryItOut("with((let (prop) [[1]]))/*infloop*/for(__parent__; __proto__; *::*) ;");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = (<><x><y/></x></>.valueOf(\"number\")) in <bbb xmlns=\"(this.__defineGetter__(\"__iterator__\", Math.pow))\"><!--yy--></bbb>) /*infloop*/do {export __noSuchMethod__; } while((<xxx>{__parent__}</xxx>.(<x><y/></x>.(null))));");
tryItOut("/*infloop*/for(var prop = ({ __noSuchMethod__: [, , ] }) = (new (({}).__lookupGetter__)()); <x><y/></x>(prototype.unwatch(\"constructor\")); (<x/> instanceof prototype)) export __iterator__;");
tryItOut("(prop)\n");
tryItOut("export __noSuchMethod__\ncontinue L;");
tryItOut(" set prop(__count__) { yield ({ __noSuchMethod__: __count__, __parent__: __noSuchMethod__ }) = <x/>.__iterator__ = <y><z/></y> } \n");
tryItOut("M:if(*::*) { if (new false(set = *, __count__ = <x/>)) {yield -1; }} else return;");
tryItOut("{with({prototype: this}){{} } }");
tryItOut("let (constructor = true) { while(( /x/g ) && 0){__count__ } }");
tryItOut("yield <x/>;\nL: {(<><x><y/></x\f></>);export __noSuchMethod__; }\n");
tryItOut(";");
tryItOut("with({__noSuchMethod__: constructor})gc()");
tryItOut("{let __count__, prototype; }");
tryItOut("let (__iterator__) { /*infloop*/L:for(__noSuchMethod__; window; yield <y><z/></y>) ; }");
tryItOut("with({__proto__: <xxx {function::__noSuchMethod__}={prop = 3.141592653589793.__defineSetter__(\"__iterator__\", (<><x><y/></x></>).watch)} />.(eval(\"yield prototype;\", (<><x><y/></x></>.propertyIsEnumerable(\"prop\"))))}){yield  '' ; }");
tryItOut("L:do {case <><x><y/></x></>: {true;Math.sin }break; throw 1.3;case <x/>: return;break; export constructor;break;  } while((033) && 0);");
tryItOut("with({}) { for(let y in [5,6,7,8]) ; } ");
tryItOut("/*for..in*/for(var constructor in eval(\"export prop;\", false)) {/*for..in*/for(let 033(__iterator__) in ((({}).hasOwnProperty)(\fnew (function  __noSuchMethod__ (prop)function(y) { yield y; var __proto__, __iterator__;; yield y; })()))){yield 0/0; } }");
tryItOut("M:if((__proto__ = ({a1:1}))) {const prototype = __parent__; } else  if (__proto__) (true);");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = __count__ = <x><y/></x>.hasOwnProperty(\"prop\") in ( \"\" .__defineGetter__(\"constructor\", (constructor).call))) return <x><y/></x>.(*);");
tryItOut("/*for..in*/for(const __parent__ = this in  \"\" ) const prototype = undefined, __parent__;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (({a2:z2})).call(*, __count__) | --[,,]) __proto__ = __parent__;");
tryItOut("try { throw StopIteration; } catch(__parent__ if new ((1 for (x in [])))(<x><y/></x>)) { try { gc() } catch(__count__) { gc() } finally { yield <x><y/></x>; }  } catch(constructor if (function(){with({}) { try { ([,,z1]); } catch(constructor) { /a/gi } finally { yield <><x><y/></x></>; }  } })()) { for(let y in [5,6,7,8]) let(__proto__) ((function(){const __parent__;})()); } catch(delete 1.3 if (function(){throw prototype;})()) { (false)(<x><y/></x>.(*)) = function::prototype; } catch(__noSuchMethod__ if <y><z/></y>) { let(__count__ = __iterator__.*, __iterator__) ((function(){__noSuchMethod__ = __count__;})()); } catch(__parent__) { for(let y in [5,6,7,8]) with({}) [,,z1] } finally { with({}) { \r(constructor)(null) = __parent__; }  } ");
tryItOut("if(+<x><y/*\n*//></x>) {L:if(__count__.__parent__ = (function ([y]) { }.throw( /x/ ))) {/*infloop*/while(undefined){<x><y/></x>;let __iterator__; }let __iterator__ =  /x/ ; } else  if (new function(y) { yield y; let (prototype = *) { yield; }; yield y; }()) /*for..in*/for([__parent__, __iterator__] = <x><y/></x> in <y><z/></y>) yield <><x><y/></x></>; } else  if ( = typeof this) switch((undefined)[1e4]) { case (function  __count__ () { yield window } ). __count__ call(undefined/*, ): L:if(<x><y/></x>) {yield (function ([y]) { })(); }break;  }");
tryItOut("if(<x><y/></x>) { if (<x/>) export constructor; else gc()}gc()");
tryItOut("/*infloop*/for(let __count__; (*::* << null).__lookupGetter__(\"prototype\"); (__count__.__defineSetter__(\"prototype\", [1,2,3,4].map).(((({ set __proto__ __proto__ () { return @foo } , __parent__ getter: <><x><y/></x></> })) &= (this.zzz.zzz) << __proto__.(<><x><y/></x></> , [[1]]))))) undefined");
tryItOut("/*for..in*/M:for(const __iterator__ in <><x><y/></x></>) return  /x/g ;");
tryItOut("/*infloop*/do {{} } while( \"\" );");
tryItOut("let (__proto__) { prototype = (-0); }");
tryItOut("for(let y in []);");
tryItOut("switch(__noSuchMethod__|=window) { case 5: /*infloop*/do {/*for..in*/for(var [__noSuchMethod__, prototype] = <y><z/></y> in arguments) {break ;const delete = prop; } } while(constructor.__count__);break; break; yield; }");
tryItOut("{if(<y><z/></y>) { if (1.2e3) yield 1.2e3; else {<x><y/></x>; }} }");
tryItOut("__proto__, __parent__;");
tryItOut("/*infloop*/for(var ({ __proto__: [, ], __iterator__: ({ prop: prototype }) }) = ((p={}, (p.z = ((prop.__count__).propertyIsEnumerable(\"__noSuchMethod__\")))())); new Object() ^= 'haha'.split; ((function (*::*['prop'], prototype)__parent__.(({a1:1}))).call( /x/g .__defineSetter__(\"__count__\", (<x/>).apply).eval((*::*.throw(this)))[__count__ = <x/>], __parent__))) {({}).__lookupGetter__break M; }");
