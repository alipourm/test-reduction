tryItOut("return;");
tryItOut("L:if(((~4.))(new undefined(<x><y/></x>), <x><y/></x>)) {/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>) {throw  /x/ ; } } else {}\nif((this.__defineGetter__(\"constructor\", -1))) __count__; else  if (3 ?  ''  : 0x99) {export *; }");
tryItOut("{{}/a/gi }");
tryItOut("L:while((<x><y/></x>) && 0){ /x/ ; }");
tryItOut("/*infloop*/for(var [, ] = __proto__ = __noSuchMethod__;  for (__parent__ in 3.141592653589793) for each (__count__ in (function ([y]) { })()); ([, __noSuchMethod__, __proto__, ] = prototype = -0)) return;");
tryItOut("let (, prop =  '' ) { let prop, __count__ = prototype; }");
tryItOut("{}");
tryItOut("with({}) { yield <x><y/></x> -=  /x/ ; } ");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(({ __proto__: __noSuchMethod__ }) = ( /x/g  * *); @foo; (<>@foo</> ) || function(id) { return id } != prototype) {/a/gi(@foo); }");
tryItOut("/*infloop*/for(undefined; @foo; 4.) {yield __iterator__; }");
tryItOut("continue M;\ntrue;\n");
tryItOut("L:if(@foo) { if (prototype) {const __parent__ = window, constructor = @foo; } else {yield; }}");
tryItOut("/*infloop*/for(var ({ __iterator__: __count__, __parent__: __proto__ }) = (<><x><y/></x></>).call(<x/>, ); (typeof <x/>); __parent__ = prop) constructor: undefined");
tryItOut("with({}) prop = __noSuchMethod__\n");
tryItOut("{const prototype; }");
tryItOut("switch('fafafa'.replace(/a/g, function  __count__ () { /*infloop*/try { for(let y in [5,6,7,8])  /x/ ; } catch(constructor if (new ((p={}, (p.z = <x/>)()))())) { for(let y in [5,6,7,8]) yield; } finally { __noSuchMethod__ = prototype; }  } )) { default:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let undefined in <y><z/></y>) {(new Function(\"yield;\"))let prop = <x><y/></x>; }");
tryItOut("if((3.141592653589793.@foo) & (eval(\"true\", @foo))) { if (__parent__.(<y><z/></y>)) {export *; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in this) {break ;__iterator__ }break L; }}");
tryItOut("/*for..in*/L:for(const (function::prototype) in \n__count__) export __parent__;");
tryItOut("/*for..in*/for(const prototype = (('haha'.split)(null, __iterator__) if (( /x/g )())) in true) gc()");
tryItOut("/*for..in*/for(var yield in ((Math.sin)(function(id) { return id } ? window : * | ((p={}, (p.z =  /x/ ( /x/g ))()))))){continue L;return; }");
tryItOut("with({__parent__: <y><z/></y> &= <y><z/></y>}){/*infloop*/for(var prop = new Iterator(__parent__); eval(\"export prop;\", (((window).watch).call([[1]], null)).__parent__ = [,,z1]);  /x/g ) {M:if( '' ) { if (new new Function(1.2e3, prototype)) { } else prop = <x><y/></x>;} } }");
tryItOut("return (prototype.valueOf(\"number\"));");
tryItOut("/*infloop*/M:for(let [({ __iterator__: __parent__ }), ] = ((__noSuchMethod__.(( \"\" .yoyo({})))).isPrototypeOf(#1=((yield window)))); [new Number(null.throw( '' )--)]; [].some((constructor = constructor ? __noSuchMethod__ if (window) : (1.2e3.eval(<><x><y/></x></>).__proto__)).watch)) {throw eval(\"/*infloop*/L:while(prototype)export x::__proto__;\", [1]); const __iterator__; }");
tryItOut("return 5.0000000000000000000000;");
tryItOut("<><x><y/></x></>\n\ngc() const prop;");
tryItOut("M:do {with({__iterator__: new (<><>yyy</></>)()}){var prop = *::*, __iterator__;; } } while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>) && 0);");
tryItOut("/*infloop*/do {{break L;function (__parent__) { yield prop }  } } while(4.-- ? new ([1,,])(<><x><y/></x></>) : eval(\" \\\"\\\" \", window) += yield = __proto__ = 033)");
tryItOut("let(__count__, prototype = <x/>) ((function(){let(__iterator__) { continue L;})());");
tryItOut("__count__");
tryItOut("[, , , ]");
tryItOut("{{return;return this; } }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__ = (eval(\"([1,,]);\", undefined))(-1.__lookupSetter__(\"__noSuchMethod__\"), <x><y/></x>): [function::yield, ({ constructor: [], __count__: ({ __iterator__: __noSuchMethod__ }) }), __parent__], __iterator__: [(let.prototype)] }) = -1 || prop; (({}).__lookupGetter__).call((uneval(<><x><y/></x></>)), ( \"\" )[false].prototype, (({ __count__: ({ __proto__: prop }), prop: constructor }) = let (__count__ = true, __iterator__ = 4.) <x/>\n)); null > __iterator__ =  \"\" ) {return; }");
tryItOut("/*for..in*/for(let constructor = ({ __iterator__: ({ __parent__: __proto__ }), __parent__: ({ __noSuchMethod__: prototype, *::*: __proto__ }) }) = this in  /x/g ) {(*);break M; }");
tryItOut("/*for..in*/for(const <><x><y/></\tx></> in ((({}).hasOwnProperty)((constructor.constructor getter= [1,2,3,4].slice)))){gc() }");
tryItOut("while(((__parent__ = [,]).throw(prototype = <x/>)) && 0){return; }");
tryItOut("/*infloop*/M:while((let (({ prototype: ({ prop: ({ __noSuchMethod__: constructor, prototype: __parent__ }), __iterator__: ({ __parent__: __count__, function::__iterator__: prop }) }) })) (new <x/>)))export constructor;\ngc()\n");
tryItOut("__noSuchMethod__ = __count__;\nexport prop;\n");
tryItOut("export *;\n/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <\t><x><y/></x></>) const constructor = ({a2:z2}), __noSuchMethod__ = __parent__;\n");
tryItOut("if((('haha'.split).apply)) {; }");
tryItOut("/*for..in*/for(let constructor = <x><y/></x> in window) {yield;; }");
tryItOut("/*infloop*/for(const __proto__; (((( /x/ ).call(<x><y/></x>, __proto__ = @foo)))); (<>undefined %  /x/ </>.(this.__defineGetter__(\"let\", <><x><y/></x></>))).throw((Object(__iterator__, __count__ = (*::*)[[1,,]])))) {do export __proto__; while((eval(\";\", false)) && 0);\n/*for..in*/for(const __noSuchMethod__ in ((function (prop, constructor)<><x><y/></x></>)( /x/g ))){(1 for (x in [])) }\n }");
tryItOut("L:with({__iterator__: <zzz>(([1,,]).__defineSetter__).call(<><x><y/></x></>, ).hasOwnProperty(\"__parent__\")</zzz>})/*for..in*/for(var (undefined)(<y><z/></y>) in ((<><x><y/></x></>)(({}).__lookupGetter__().propertyIsEnumerable(\"prototype\")))){yield <x><y/></x>; }");
tryItOut("/*for..in*/for(__parent__ in new ((constructor.eval(*::*)))()) /*infloop*/for(<x><y/></x>; <x><y/></x>; <><x><y/></x></>) {throw <x/>;__count__ = 3.141592653589793, constructor = 1e4; }");
tryItOut("while(((this).watch(__count__, <x><y/></x>)) && 0){return; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; <><bbb xmlns=\"function::__proto__ ^= __noSuchMethod__\">yyy</bbb></>; (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(set :: ([this]).prototype))) {break L; const __count__;yield ; }");
tryItOut("if([11,12,13,14].some .. new ((0/0)[[z1]])()) {\fvar __proto__\n }\nwith(#1#){export *;break L; }");
tryItOut("if((yield  ''  = this)) yield <><x><y/></x></>;");
tryItOut("if(__parent__.__noSuchMethod__ getter= function  __iterator__ () { const __parent__, constructor = window; } ) {Math.pow }");
tryItOut("([z1]); const prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("switch(eval(\"[1,2,3,4].map\", (__count__.@foo))) { case 3/0: case (__noSuchMethod__ = <><x><y/></x></>): (<x><y/></x>).__defineSetter__break; L:if(__count__) throw <y><z/></y>;break;  }");
tryItOut("with(<><x><y/></x><\f/>.watch(\"window\", 'haha'.split))yield  /x/g ;");
tryItOut("if(__noSuchMethod__) { if (yyy) gc() else (new Function(\"(true);\"))\n{}}");
tryItOut(";{}");
tryItOut("(<y><z/></y>)(<y><z/></y>) = constructor;");
tryItOut("L:if(() % this) [1,2,3,4].slice");
tryItOut("function(id) { return id };");
tryItOut("with({}) for(let y in [5,6,7,8]) throw StopIteration; const __iterator__;");
tryItOut("if((({getter: 033, constructor getter: function  prop ()<><x><y/></x></> })\n ? (033 in __iterator__ = false) : (undefined.propertyIsEnumerable(\"prototype\")))) {} else  if (break M[\r(new Function(\"export *;\"))++ for each (constructor in (<x/> > ({}))) for each (({ prototype: ({ constructor: __noSuchMethod__ }), __count__: __proto__ }) in <x><y/></x>) for (* in let).isPrototypeOf((new (([1,,]).call)(undefined += /*\n*/ \"\" .propertyIsEnumerable(\"__iterator__\"))))]) (<x><y/></x>);");
tryItOut("{while((5.0000000000000000000000) && 0){([1]);(<y><z/></y>); } }");
tryItOut("L:switch(-1) { case 8: default: case 2: return <><x><y/></x></>;case 1: const __noSuchMethod__;case 8: break; throw  /x/ ;case  \"\" : break ;case @foo: break; case 6: case 1: case <><x><y/></x></>: (constructor); }");
tryItOut("if(Math.pow((void <><x><y/></x></>)) || __iterator__ = yield ({a1:1})) {<><x><y/></x></>; } else {; }");
tryItOut("Mdo {/*for..in*/M:for(let __proto__ in ((new Function)(<x><y/></x>))); } while((({ __noSuchMethod__: [__proto__, ] }) = [<><x><y/></x></>]) && 0);");
tryItOut("let(prop = Function) { throw StopIteration;");
tryItOut("let ((__proto__ = (yield [11,12,13,14].\fsort)) = [](__iterator__.__defineGetter__(\"prop\", ({a2:z2})),  /x/ )) { var prototype, prototype = this; }");
tryItOut("/*for..in*/M:for([prototype, __noSuchMethod__] = constructor = *::* in <><x><y/></x></>) gc()\n");
tryItOut("M:switch(__count__|=<x><y/></x>) { case (<y><z/></y> *= *): {}break;  }");
tryItOut("while((new <><x><y/></x></>()) && 0){yield <x><y/></x>;throw undefined; }");
tryItOut("/*for..in*/for(let __count__(1.2e3) in prototype) yield <x><y/></x>;");
tryItOut("L:if(<y><z/></y>) { if (({ prototype: __parent__ }) =  /x/ ) if(<x><y/></x>) ; else } else let __parent__ = <x/>, __count__ = <x><y/></x>;");
tryItOut("{; }");
tryItOut("return __parent__;");
tryItOut("throw <y><z/></y>\n");
tryItOut("/*infloop*/M:for(prototype; <x><y/></x>.__defineSetter__(\"__parent__\", eval); window.unwatch(\"constructor\")) (-3/0);");
tryItOut("L:if(undefined) { if (#1=({a2:z2})) export __count__; else <y><z/></y>;}");
tryItOut("/*infloop*/for(let __noSuchMethod__; yield eval(\"let __parent__ = <><x><y/></x></>, constructor = function::prop;\", __iterator__.__parent__); <><x><y/></x><ccc:ddd><!--yy--></ccc:ddd></>.(0.1 in  /x/g )) <x/>");
tryItOut("do /*infloop*/for(__count__ = new Iterator(prop, #1#); (<></>.eval(<x><y/></x>.(<x><y/></x>)) >>= 3); #0=({__count__: (<><x><y/></x></>.__parent__ = window)})) [z1,,]; while(((new (<y><z/></y>)().valueOf(\"number\"))) && 0);");
tryItOut("with({}) with({}) yield (prop.prop = window);");
tryItOut("prop: (__proto__).call(this.__defineSetter__(\"__parent__\", (this)[<><x><y/></x></>]), ([[]].isPrototypeOf([11,12,13,14].filter)))");
tryItOut("/*for..in*/for(const __noSuchMethod__ = <x/> in undefined) {}");
tryItOut("/*infloop*/for(var prototype; {}; <y><z/></y>) {(<><x><y/></x></>);const __count__; }\n");
tryItOut("export *;throw  \"\" ;");
tryItOut("M:if((*.__lookupGetter__(\"__count__\"))) {throw <><x><y/></x></>\n/*infloop*/L:for(__parent__ = [1]; constructor.__defineGetter__(\"__count__\", Function); <><x><y/></x></>.*) {let __proto__;; }");
tryItOut("/*for..in*/for(const __iterator__ in *) var __iterator__ = [1,,], prototype;");
tryItOut("if(new (/a/gi)(({a2:z2}).*)) if((@foo.yoyo(<><x><y/></x></>) = false.hasOwnProperty(\"prototype\"))) { }");
tryItOut("var constructor = null;\nreturn <x><y/></x>;\n");
tryItOut("L:with({prototype: <x/>}){}");
tryItOut("<x/>;(<><x><y/></x></>);");
tryItOut("gc()\nif(window) undefined; else  if (<ccc:ddd><xxx {prop}={prop} /><!--yy--></ccc:ddd>.((<y><z/></y> *= 1e81))) <x/> else <><x><y/></x></>;");
tryItOut("/*infloop*/while(new (Math.pow)(true, __iterator__)){yield;return *; }");
tryItOut("/*infloop*/for(__iterator__; ({}); <><zzz>(Function)</zzz></>) {yield 033;switch( /x/g  / 0) { default: 1.3(yield;);break; break; case 7: break; case (p={}, (p.z = <x><y/></x>)()): return;\nreturn <y><z/></y>;\nbreak; case 5: break; break; break;  } }");
tryItOut("if(\t(prototype = __count__) - \n /* Comment */<><x><y/></x></>) {export __parent__;while((<x><y/></x>) && 0)\t{(prototype).watchyield; } } else  if ((yield (({ __count__: __noSuchMethod__, __count__: function::__count__ }).isPrototypeOf(this)))) continue M;");
tryItOut("with(eval(\"[<><x><y/></x></>].sort(function  __noSuchMethod__ (__proto__, __proto__){})\", (prototype = prototype))){/*for..in*/L:for(__proto__ in ((<x/>)(3.141592653589793))){(<x/>);; } }");
tryItOut("while((<y><z/></y>) && 0){throw @foo for each (__iterator__ in gc()); }");
tryItOut("const __noSuchMethod__ = null;");
tryItOut("throw 3.141592653589793;");
tryItOut("if(-1 in [z1,,]) gc() else gc()");
tryItOut("do {/*infloop*/do {if(<y><z/></y>) { }L: {gc()let __noSuchMethod__ = <><x><y/></x></>; } } while(({ __parent__: __parent__ }) = ( /x/g  >>> <x><y/></x>));/*infloop*/do {yield window; } while(function(id) { return id }.eval(@foo)); } while((\nnull.__defineSetter__(\"function::prop\", <y><z/></y> === [])) && 0);");
tryItOut("L: {export __iterator__;if(constructor = __iterator__) L:with({prop: 5.0000000000000000000000}); else gc() }");
tryItOut("/*for..in*/M:for(var [__proto__, __parent__] = true in  /x/ ) {export *;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/while(__noSuchMethod__.prototype getter= (3).__defineSetter__){return @foo; }");
tryItOut("with({prototype: (__noSuchMethod__)}){<><x><y/></x></>;null; }");
tryItOut("with((0))yield;");
tryItOut("do {{} } while((prop) && 0)\n");
tryItOut("break M;\nvar __count__ =  '' , __noSuchMethod__;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var \n<><x><y/></x></>.constructor in (new Function(\"true\"))) eval");
tryItOut("{/*infloop*/L:do /*for..in*/for(let __iterator__ in  /x/ ) let __noSuchMethod__ = <y><z/></y>, __count__; while([__parent__, , , __noSuchMethod__, ] = __count__ = <><x><y/></x></>); }");
tryItOut("yield  ''  <  '' ;");
tryItOut("/*infloop*/for(0/0 ? <y><z/></y> : <y><z/></y>; (window.throw(<x/>)); ) {yield;throw false; }");
tryItOut("/*for..in*/for((<x><y/></x>) in ((function(q) { return q; })(( /x/g .@foo))))/*for..in*/L:for(var __proto__ = (__parent__.((function ([y]) { })())) in this) ");
tryItOut("__count__, prop = new Boolean();");
tryItOut("throw <x/>;");
tryItOut("/*infloop*/L:while(<x/>){export *; } const __count__;");
tryItOut("/*infloop*/M:while((~<><x><y/></x></>.prototype = __parent__ = ()){L:if(__noSuchMethod__) { if ((4..isPrototypeOf((<y><z/></y>.valueOf(\"number\"))))) {this;@foo; } else yield;} }");
tryItOut("/*infloop*/for(var __proto__ = <y><z/></y> === #1#; __count__; (Math.sin).call(__iterator__, prop) ? *::* : (uneval(4.))) {__parent__ = <><x><y/></x></>, __proto__ = function(id) { return id };{} }");
tryItOut("/*infloop*/for(*::* % 1e-81; 1.3.isPrototypeOf(false); <x/>.valueOf(\"number\")) {gc() }\n");
tryItOut("with(__count__){( /x/g ).applyyield; }");
tryItOut("/*infloop*/L:do {;export *; } while(( /* Comment */(constructor)).__defineSetter__(\"prop\", getter getter: [1,2,3,4].map));");
tryItOut("L: {((*::*.__lookupGetter__(\"prototype\")));/*infloop*/for(let [({ __proto__: __noSuchMethod__, prop: constructor }), , , , ({ __count__: prop })] = prop =  \"\" ; (yield  /x/ ).isPrototypeOf((<x><y/></x>.constructor)); __proto__.( \"\" )) yield; }");
tryItOut("switch([z1]) { case 7: break;  }");
tryItOut("/*infloop*/do {if(5.0000000000000000000000) { if (window) var prop = <x/>;} else {throw  \"\" ; } } while(__proto__.__noSuchMethod__ = this);");
tryItOut("/*infloop*/while(void  /x/ );");
tryItOut("return prototype = 0;\ngc()\n");
tryItOut("M:if([1]) { if (*::*) } else __proto__ const __noSuchMethod__;");
tryItOut("{/*infloop*/for(var ({ __parent__: constructor }) = ({__proto__: [[1]] + this }); ((yield prop).__count__); (__count__ = <x><y/></x>.(<><x><y/></x></>))) constructor, __parent__; }");
tryItOut("{throw <x/>; }");
tryItOut("M:do {gc() } while((false.__lookupSetter__(\"prototype\")) && 0);");
tryItOut("/*for..in*/for(var __iterator__ in *) {yield; }");
tryItOut("L:if(new __iterator__ = <><x><y/></x></>) {continue M;\fthrow <x><y/></x>; } else  if ([(<x><y/></x>.@foo)]) export __noSuchMethod__;");
tryItOut("gc()\n;\n");
tryItOut("1.3;");
tryItOut("{M:if(<x><y/></x>) {( /x/g ); } else  if (<><x><y/></x></>) {yield <>\n<x><y/></x></>;prop } else const  \"\"  = *; }");
tryItOut("with()const function::__proto__ =  \"\" , __count__ =  \"\" ;");
tryItOut("if((this.__defineGetter__(\"set\", eval))) /*infloop*/L:for(let; 0.__parent__ =  \"\" ;  /* Comment */<y><z/></y>) {throw __iterator__; }");
tryItOut("let (({ prototype: __parent__ }), prototype) { /*for..in*/for(const __parent__ in ((new Function)(false.prototype)))if(({ __proto__: [, __count__], constructor: prototype }) = prop) {export *; } else {function  __proto__ (__proto__) { yield 3.141592653589793 } export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var 3.141592653589793\f['__noSuchMethod__'] in 0/0) var __parent__ = __parent__, prototype;");
tryItOut("L: {return; }");
tryItOut("/*for..in*/for(const __parent__ in ((eval)(let (function::__proto__) <y><z/></y>)))(null);");
tryItOut("{ }");
tryItOut("if(#1=[#1#])  /x/g ; else  if ((__count__((3.141592653589793--)))) prop = <x><y/></x>\n;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <y><z/></y>) {; }");
tryItOut("do /*infloop*/for(const __count__ =  '' ; true; -1) {export *;const __count__, __count__; } while((this.zzz.zzz) && 0);");
tryItOut("yield yield  /x/ ;;");
tryItOut("throw __parent__;");
tryItOut("__parent__");
tryItOut("{export *;do {yield; } while((this.__defineGetter__(\"__proto__\", function (__proto__) { yield <y><z/></y> } )) && 0); }");
tryItOut("do { /x/  } while((3.141592653589793) && 0);");
tryItOut("((<x><y/></x>.(<><x><y/></x></>)))\ntry { {} } catch(prototype if (function(){prototype = 3.141592653589793;})()) { (#1#); } catch(\n if @foo) { export *; } catch(__count__ if (function(){{}})()) { {} } catch(__proto__ if (function(){yield;})()) { return <><x><y/></x></>; } catch(constructor) { __parent__ = <><x><y/></x></>; } finally { <x><y/></x> } ");
tryItOut("/*infloop*/M:for(var __proto__ = [11,12,13,14].sort; (this)((this.zzz.zzz), (Array(<><x><y/></\fx></>, this))); new Date()) {if(eval(\"export *;\", <x><y/></x>)) { if ((0 if ( /x/g ))) {} else yield 3/0;} }");
tryItOut("let (__iterator__, __noSuchMethod__) { export __proto__; }");
tryItOut("M:if(1e-81.watch(\"prop\", function (prop, __count__) { yield constructor } ).__iterator__) {<x><y/></x> }");
tryItOut("(<x><y/></x>);");
tryItOut("/*for..in*/for(let __noSuchMethod__.__parent__ in (<x><y/></x>.__defineGetter__(\"__proto__\", Math.sin))) {yield <y><z/></y>; }");
tryItOut("do {gc()(<x><y/></x>); } while(((__noSuchMethod__.(__noSuchMethod__))) && 0);");
tryItOut("{prototype = __parent__; }");
tryItOut("/*infloop*/while(__noSuchMethod__ =  { {}function  __iterator__ (__proto__, __count__) { yield * }  } ){(<><x><y/></x></>);gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in null.propertyIsEnumerable(\"constructor\")) {([,,z1]); }");
tryItOut("/*for..in*/for(let (0.1)(window) in (((false).watch)((__parent__ = __proto__)))){yield @foo;yield *; }");
tryItOut("/*infloop*/for(let [, , [[prop, __iterator__, __proto__]], ] = (__proto__ = yield /= <x><y/></x>); (new @foo.unwatch(\"prop\"));  /x/ )  '' ;");
tryItOut("L: throw ({});");
tryItOut("/*for..in*/for(var [__parent__, prop] = window.@foo in new function(q) { return q; }(<x><y/></x>)) __count__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <y><z/></y>) yield  \"\" ;");
tryItOut("/*infloop*/do {let constructor = <x/>; } while(__proto__ = 4..watch(\"prop\", 5.0000000000000000000000));");
tryItOut("/*infloop*/for(const __iterator__; #1=({__iterator__: <><x><y/></x></>}).watch(\"__noSuchMethod__\", 'haha'.split); set) {export *;(@foo); }");
tryItOut("/*infloop*/do {} while([1] >>> window);");
tryItOut("while((constructor) && 0){throw *; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("{{let prototype = {};(<y><z/></y>).__defineSetter__ } }");
tryItOut("/*for..in*/M\t:for(let constructor = ((this)[]).__defineSetter__(\"__parent__\", <x/>) in <x/>) if([[,]].some(false)) { if (eval(\"undefined\", true)) {{}yield this; } else {export *;return <x><y/></x>; }}");
tryItOut("return;");
tryItOut("{} const prototype;");
tryItOut("{function(y) { yield y; ( /x/g );; yield y; }; }");
tryItOut("\f@foo const __iterator__;");
tryItOut("L:do var __parent__ = this, __proto__ = <x><y/></x>; while(((* .@*:: *::*)) && 0);let(({ __parent__: ({ constructor: ({ constructor: __iterator__ }) }) }) = ((function ([y]) { })() >>> this > \t(this >  \"\" ) , this.__defineGetter__(\"prop\", (new Function(\"throw this;\")))), __proto__) ((function(){for(let y in [5,6,7,8]) throw StopIteration;})());");
tryItOut("/*infloop*/for(let __count__.constructor = <><bbb xmlns=\"-3/0 += (<><x><y/></x></> < <x/>)\"></bbb></>; [1,,]; (this.zzz.zzz ? [__parent__, , __iterator__, , ] = (((0.1)((*.__count__),  '' ))) : <y><z/></y>--)) {with({constructor: null | (__iterator__) && [<><x><y/></x></>]}){{} }L: \t{switch( '' ) { case <><x><y/></x></>: L:with({__noSuchMethod__: -0})let __noSuchMethod__ = prototype, __iterator__ = <y><z/></y>;(undefined);case 4: ;break; yield <y><z/></y>;default: yield;break; case 0:  } } }");
tryItOut("__parent__");
tryItOut("[1,2,3,4].map\n;\n\nwhile(((<x/> %= <x><y/></x>)) && 0){const __parent__; }\nexport *;\n");
tryItOut("let <><x><y/></x></>, prop;");
tryItOut("/*infloop*/M:do  while(export constructor);");
tryItOut("/*infloop*/for(const prototype; (yield __noSuchMethod__.prototype =  /x/g ); Function((*.propertyIsEnumerable(\"prop\")))) ;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in [1,,]) {function () { <><x><y/></x></> }  }L:if(__proto__.(window)) constructor = 5.0000000000000000000000, __proto__ = <><x><y/></x></>; else  if (((-0 if (({}))))) {yield;throw __iterator__; } else yield <x><y/></x>; }");
tryItOut("if( /* Comment */this) { if (<y><z/></y>) /*for..in*/for(__proto__ in ((function(y) { yield y; /*for..in*/L:for(__proto__ = prop in <><x><y/></x></>) {var __proto__; }; yield y; })((undefined.__iterator__))))yield;} else {export __noSuchMethod__;return; }");
tryItOut("if(eval(\"0/0\", window)) { if ((prototype)) {M:while((0x99) && 0){var __parent__ = window; } } else const __count__;}");
tryItOut("/*infloop*/L:do {if(this) { if (window) { }} else yield  /x/ ;gc() } while(this.__defineSetter__(\"__iterator__\", /a/gi)); const __iterator__;");
tryItOut("while((prop = __parent__.hasOwnProperty(\"prop\")) && 0){export *; }\nM:if(<><x><y/></x></>) const __iterator__, function::__parent__; else  if ((( /x/g  for (__count__ in @foo)))) {}");
tryItOut("/*infloop*/for(const __count__; (this.__defineSetter__(\"__count__\", eval)); __parent__) {/*for..in*/for(let return; in function () { return <x><y/></x> } ) {return null;function (__iterator__, __parent__)__noSuchMethod__\nexport __iterator__;\n } }");
tryItOut("L: {;yield <x><y/></x>; }");
tryItOut("if(undefined <<= @foo) { if (constructor+=__parent__.__proto__) throw *;} else [,];");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/for(__parent__ in ((({}).hasOwnProperty)(<x/>))){{} }");
tryItOut("if(prototype.eval(window)) { if ((*::* instanceof 1e+81)) {{} }} else export __iterator__;");
tryItOut("__parent__ = constructor");
tryItOut("/*infloop*/do {gc()yield this; } while((({constructor: (<><x><y/></x></>)(null, 1e+81), __proto__: [window if (#1=[#1#])] })))\n/*infloop*/while( /x/g )return;");
tryItOut("if(<><x><y/></x></>.yoyo([z1,,])) {export *;({a1:1}); } else  if ((Math.sin)((5.0000000000000000000000++)) undefined else var __proto__, __count__ = <x\t><y/></x>;");
tryItOut("/*for..in*/for(var __parent__ in ((/a/gi)((arguments.__defineSetter__(\"__noSuchMethod__\", Math.sin)).propertyIsEnumerable(\"prop\")))){gc()let prop =  /x/ , prop = [z1]; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("if((constructor.(<x><y/></x>) for each (__noSuchMethod__ in <x/>['prop'\f]) for (prop in default: break; case 0: return;;break; ;break; case 6: ))) {*::* } else do var __proto__, __iterator__ = <x><y/></x>; while((3) && 0);");
tryItOut("M:if(3.141592653589793) /*for..in*/for(let prop in ((({}).__lookupGetter__)([z1,,])))export *;let (prototype) { return; } else  if (this.zzz.zzz) ");
