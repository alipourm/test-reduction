tryItOut("/*infloop*/do {prototype } while(.propertyIsEnumerable(\"__iterator__\")); const __proto__;");
tryItOut("/*infloop*/do let(prototype = true, __noSuchMethod__) ((function(){return <><x><y/></x></>;})()); while([11,12,13,14].map);");
tryItOut(" set __count__ __parent__ (__parent__) { yield __proto__.@foo } ");
tryItOut("yield (p={}, (p.z = [,])());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (new Exception()).constructor in ({__noSuchMethod__: <x><y/></x>.throw( \"\" )})) yield;");
tryItOut("export *;");
tryItOut("/*for..in*/M:for(const constructor(3 %  /x/ ) = (__parent__.__parent__ = 1e-81)((<x/> = undefined).@*) in (((#3={a:#3#}).watch)())) yield __iterator__/* = ;");
tryItOut("L:if(@foo * __iterator__) {constructor = null;throw [,,z1]; } else  if (0/0) {;{} } else yield;");
tryItOut("/*for..in*/for(var __iterator__ = ({prototype: __noSuchMethod__ =  \"\" .watch(\"__noSuchMethod__\", /a/gi), __parent__: prototype.(({a2:z2})) }) in __count__.__iterator__ = new undefined(this)) {return;return 1.3; }");
tryItOut("with(*::*)/*for..in*/for([__count__, __proto__] =  /x/g  in 3.*) {gc()L:if(['<x><y/></x>]) { if (String(constructor)) return 3.141592653589793; else window;} }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <><x><y/></x></>) {with({__count__: function ([y]) { }})yield 0.1; } while((this) && 0);");
tryItOut("/*infloop*/for(var prop; ([15,16,17,18].sort((__count__).apply,  '' )).__defineSetter__(\"__count__\",  /x/ ); [getter, , prototype, prop] = (let (prop = <x><y/></x>.__defineGetter__(\"prototype\", function(q) { return q; }), prop) window.hasOwnProperty(\"__count__\"))) {export *;(<y><z/></y>).__defineSetter__ }");
tryItOut("/*infloop*/do throw undefined; while(new <x><y/></x>(prototype));");
tryItOut("{L:if([,]) { if ([1,,]) {export *;(<y><z/></y>); }} else {[1,2,3,4].mapgc() }do { \"\" ;break M;//h\n } while((((__proto__)[(1 for (x in []))()])) && 0); }");
tryItOut(";yield <x><y/></x>;");
tryItOut("(1 for (x in []))");
tryItOut("M:do {while((({a2:z2}).__defineSetter__(\"__parent__\", (new Function(\"constructor;\")))) && 0){; } } while(((<x><y/></x> in eval(\"#1=[#1#]\", *))) && 0)\ndo {with(<y><z/></y>){var __parent__ = <>__iterator__ = window, <x><y/></x></>, prop; } } while(((new new Function(\n /x/ ,  '' ) /= yield 1e+81 - <x/>)) && 0);");
tryItOut("/*for..in*/for(let [prototype, __count__] =  in prop setter: this.__defineGetter__(\"__iterator__\", (function (constructor)*::*).call)) export *;");
tryItOut("{__count__; }");
tryItOut("L:if(String(<x><y/></x>)) { if ([z1] %= 1.2e3)  else yield;}");
tryItOut("with({}) for(let y in [5,6,7,8]) with({}) const __iterator__;");
tryItOut("__count__ = prop;");
tryItOut("L:switch((this.__defineGetter__(\"__iterator__\", 3))((({ set __parent__(__proto__, constructor) { Math.pow }  })), [,])) { case 5: default: throw __count__;break; case 1: propvar constructor = ({});case (( /x/g ) += __noSuchMethod__.valueOf(\"number\")): let prototype;{}break; case 4: break;  }");
tryItOut(";");
tryItOut("(({}).__lookupGetter__).call");
tryItOut("switch(__count__.(<><x><y/></x></>)) { default: case (__noSuchMethod__ ? -0 : <y><z/></y>):  }");
tryItOut("continue ; const constructor;");
tryItOut("switch((<x><y/></x> |= get)) { case __parent__ = (__count__ = <x/>): break; default:  }");
tryItOut("/*for..in*/for(let __parent__ = (uneval(yield 4..__proto__)) in eval(\"('fafafa'.replace(/a/g, (__parent__ = <x/>).watch))\", window)) if(@foo) { if (<y><z/></y>) (function  __count__ () { return this } ).apply} else const prop = function(id) { return id };");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (this)(3) in <><x><y/></x></>) const __count__;");
tryItOut("L:with({__count__: ((-1)).call(*::*, <x><y/></x>, <><x><y/></x></>)}){export __noSuchMethod__;(constructor); }");
tryItOut("if( \"\" ) return [[]]; else  if (prop.constructor = ()) ");
tryItOut("if(-0 |= *::*) export *; else {export __count__; }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in constructor = (prototype =  /x/ )) {/*infloop*/for(getter.__proto__; <x><y/></x> <<= <y><z/></y>; prototype.prototype = this) {throw [[]]; }break ; const __noSuchMethod__; }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("return; const constructor;");
tryItOut("while((__iterator__ = true) && 0)const __iterator__ = window, prototype;");
tryItOut("/*for..in*/L:for(const __proto__ in <><x><y/></x></>.prototype) {__noSuchMethod__ = __count__; }");
tryItOut("while((this.__defineGetter__(\"prototype\", ({}).hasOwnProperty)) && 0)/*for..in*/for(__count__ = __noSuchMethod__ = undefined in window) {}");
tryItOut("if((<x><y/></x>)([[]]) = \n0) { if (<><bbb xmlns=\"-0 , window\">yyy</bbb></>) function(y) { yield y; export *;; yield y; }} else export *;");
tryItOut("/*infloop*/do {/*infloop*/M:for( /x/g .__lookupGetter__(\"__parent__\"); window.eval( '' ); 3.141592653589793 /= *::*) {function (constructor, constructor) { return ({a1:1}) } let __proto__ = __noSuchMethod__; }return (eval(\"<><x><y/></x></>\", <x><y/></x>)); } while(this.__defineSetter__(\"constructor\",   prop (constructor) { return window } ) &= yyy);");
tryItOut("");
tryItOut("{export __count__; }");
tryItOut("{M:if( '' ) { if ( \"\" ) {yield;throw 033; }} else {prototype = true; }gc() }");
tryItOut("with({}) let(constructor) { try { __noSuchMethod__ = __proto__; } catch(__count__) { return let (constructor, constructor) <x/>; } ");
tryItOut("/*infloop*/for(prop; ({ __count__: [, ] }) = ((__count__.prop setter= function (__iterator__, constructor) { (__parent__); } ).__lookupGetter__(\"prop\")); new Date(<x><y/></x>.(this), true)) with((new window([[1]], undefined)))*;");
tryItOut("/*for..in*/L:for(var [<>window</>, __parent__] = <x/> in this) {let __proto__; }");
tryItOut("var prototype;");
tryItOut("/*for..in*/for(var [__proto__, __parent__] = <x><y/></x> in __noSuchMethod__) var __count__ = <x><y/></x>, set;");
tryItOut("while(((constructor === ('fafafa'.replace(/a/g, function(q) { return q; })))) && 0)switch(this) { default: break;  }");
tryItOut("let (prototype) { if((delete <y><z/></y>.@*)) { if (function::prop.(this.__defineSetter__(\"constructor\", function (__parent__, __parent__) { return #1=[#1#] } ))) {export *;return *; }} else (*::*); }");
tryItOut("throw __parent__;");
tryItOut("return;yield 1.2e3; const __proto__;");
tryItOut("if((#0=[constructor])) { if (<><x><y/></x></>.__iterator__ = <y><z/></y> for each (__proto__ in <x/>) for (__parent__.prop in prototype) if ((-0))) {throw window; }} else {throw (function ([y]) { })(); }");
tryItOut("/*infloop*/L:for(let prototype; (new *::*).prop; !<x><y/></x>) throw  /x/ ;");
tryItOut("if( /* Comment */(-0)) {while((()) && 0){function(id) { return id }; } }");
tryItOut("switch(constructor.(window)) { case 1: break; case __proto__ = (__noSuchMethod__\n): break; default: __iterator__, prototype = *; }");
tryItOut("(this);\nexport *;\n");
tryItOut("M:if(this.zzz.zzz) {gc() } else  if ((__count__.__defineSetter__(\"constructor\", function  constructor (prototype, __iterator__) { export constructor; } ))) {(-1);return  /x/ ; }");
tryItOut("let(__parent__, __noSuchMethod__) ((function(){this.zzz.zzz;})());");
tryItOut("");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prototype] = __noSuchMethod__.(<><x><y/></x></>) in *::*) M:if( \"\" ) { if ([,]) export *; else Math.pow}");
tryItOut("prop const prop;");
tryItOut("this.zzz.zzz;");
tryItOut("throw prototype;");
tryItOut("");
tryItOut("\nwith({__parent__: false ? true : this}){gc()if( /x/g ) continue M; else  if (*) {prototype, __iterator__ = [];{} } }");
tryItOut("L: {with(!<x><y/></x>.constructor = ((*::* for (__proto__ in [,])))){<xxx>{__iterator__}</xxx> } }");
tryItOut("while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) && 0)__proto__ = prop;");
tryItOut(" { yield let } ");
tryItOut("with({(new (this)(false))\f: prototype = <y><z/></y>.yoyo((__noSuchMethod__.__noSuchMethod__))})switch(<><x><y/></x></>) { case 8: break;  }\n");
tryItOut("__parent__, __parent__ = [,,];");
tryItOut("if( '' ) \f{yield; }");
tryItOut("with({}) constructor = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in (.@foo)) {/*infloop*/M:for(({ constructor: let, prop: [, ] }) = (this.__defineGetter__(\"__count__\", (-0))); [(__iterator__.(*::*))]; [[]]) /*infloop*/for(var __count__; null--; ({__iterator__: <><x><y/></x></>, new Function(constructor, (-0)) setter: (this).watch })) {break M; } }");
tryItOut("if(this) let __noSuchMethod__; else  if (<><x><y/></x></>)  else {yield prop; }");
tryItOut("{; }");
tryItOut("throw StopIteration;");
tryItOut("export *\nyield;");
tryItOut("if((({ __noSuchMethod__: ({ __noSuchMethod__: __noSuchMethod__, constructor: constructor }), __iterator__: [, ({ x::__iterator__: function::prop, __proto__: constructor }), , ] }) = (constructor.__iterator__))) { if (({__proto__: (\n<y><z/></y>)}) * (Array(<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")))) {export *\f;/*infloop*/L:for(__proto__; __iterator__; prop.function::__count__ getter= Function) L: {export __iterator__; } }} else /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in  /x/ ;) 0.1;");
tryItOut("/*infloop*/while((this)){{}{{} } }");
tryItOut("/*infloop*/L:for(prop; <x><y/></x>.__iterator__ = ({a1:1}).throw(eval(\"<><x><y/></x></>\", true)); __parent__ = 1e4) return true;");
tryItOut("with(<x><y/></x>.* < (({ prop: [prop, , __iterator__, 0], prototype: prop }) ? __proto__ : window).valueOf(\"number\"))continue L;");
tryItOut("if(( \"\" .__defineSetter__(\"each\", (1 for (x in []))) :: <><x><y/></x></> === *::*)) {constructor;yield; } else  if ((p={}, (p.z = <x><y/></x>)()) ? <zzz>this</zzz>.((this.__defineGetter__(\"__noSuchMethod__\", <x><y/></x>))) : let (__iterator__) <y><z/></y>) yield this;");
tryItOut("if(<x/>[<x/>.isPrototypeOf(0/0)]) { if (([<y><z/></y>])) {yield; } else {throw -0; }}");
tryItOut("/*infloop*/M:while((this.zzz.zzz))yield;");
tryItOut("L: ;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prop] = [[1]] === * in export *; + #1#) with(<><x><y/></x></>)yield [[1]];");
tryItOut("var __iterator__, __count__ =  /x/ ;;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*for..in*/for(const this.zzz.zzz in ((gc)((/a/gi(.2, false)))))export *;");
tryItOut("let(prototype = (-0)) { yield;");
tryItOut("/*for..in*/for(var [prototype, __parent__] = * in __parent__) yield;");
tryItOut("switch(<y><z/></y>) { case 1: with({__parent__: (({ constructor: __iterator__, __iterator__: __iterator__ }) = prop = true)}){{}let __iterator__ = (-1), prop; }break; /*for..in*/for(let __proto__ = 'fafafa'.replace(/a/g, function  __proto__ (__count__) { yield  \"\"  } ) in <><x><y/></x></>) {yield  \"\" ; } }");
tryItOut("let constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("{var __proto__ = <><x><y/></x></>; }");
tryItOut("with(({ prop: __noSuchMethod__ }) = ~({}) & false)");
tryItOut("L: if(+(<><x><y/></x></>)[ /x/ ]) {{} } else  if (! '' ) export get;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in <x><y/></x>) {/a/givar __count__ = @foo, prop = this; }");
tryItOut("let(__noSuchMethod__ =  \"\" , __count__ = prop) ((function(){export __iterator__;})());");
tryItOut("if(<><{function::__count__}><ccc:ddd></ccc:ddd></{function::__count__}></>) L:if(3.141592653589793) {export *; } else  if (<><x><y/></x></>) throw [[]];");
tryItOut("L: {}");
tryItOut("let ([, , ({ constructor: __count__ }), , ] = (#2=({__proto__: 3.141592653589793}))) { L:if(window) {return *::*; } else  if ((constructor.constructor = <><x><y/></x></>)) {export *;let ; } }");
tryItOut("with({}) with({}) return;");
tryItOut("let __count__;");
tryItOut("return  '' .yoyo(<><x><y/></x></>);");
tryItOut("with({__proto__: undefined}){break ;function(q) { return q; } }");
tryItOut("for(let y in [5,6,7,8]) <><x><y/></x></>");
tryItOut("__iterator__;return\nlet (prop = <><x><y/></x></>, var __count__;) { (window); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in yield 1.3) yield return this;;");
tryItOut("L:if((prop for (__iterator__ in [[1]]))) { if (<y><z/></y>.throw(<y><z/></y>)) {return <><x><y/></x></>;/*infloop*/for(*::*; <><x><y/></x></>; @foo) {gc()const __noSuchMethod__; } }} else export __count__;");
tryItOut("yield (prop = __noSuchMethod__ = function(id) { return id });");
tryItOut("/*infloop*/L:for(~<y><z/></y>.watch(\"prop\", *::*); ([(<y><z/></y>.*)].some(Math.sin)); constructor = undefined instanceof <><x><y/></x></>) {__count__;yield; }");
tryItOut("yield;\n( /x/ );\n\n;\n");
tryItOut("prototype = false;continue L;");
tryItOut("try { throw StopIteration; } catch(__parent__ if (function(){__noSuchMethod__.prototype = prop;})()) { with({}) { {} }  } catch(constructor) { with({}) { return; }  } ");
tryItOut("/*infloop*/do L: {var __parent__, __count__;continue M; } while(delete .2);");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, Function); #1=[#1#]; __proto__(false) = (({constructor: this,  set __count__ prop (__count__) { const __noSuchMethod__, __parent__; }  }))) {M:if(this) { '' ;throw function(id) { return id }; } }");
tryItOut("M:switch(this , #1=[#1#]) { case 3: ;break;  }");
tryItOut("with({__proto__: (yield)}){if(window &= window) let prototype = <><x><y/></x></>; }");
tryItOut(";");
tryItOut("return;");
tryItOut("if(new undefined()) /*infloop*/while(<><x><y/></x></>.isPrototypeOf(*::*))const __parent__ = 3/0\t; else <><x><y/></x></>;");
tryItOut("/*infloop*/do {export *; } while(const __count__ = function  constructor (__iterator__) { yield <y><z/></y> } , __parent__ = @foo);");
tryItOut("/*for..in*/for(constructor = ({ constructor: prototype }) = ((__count__) = constructor) in window += <x><y/></x>) M:if( \"\"  <<= *) 1e-81; else  if (()) {; }");
tryItOut("L: let (delete) { var __proto__ = this, __count__ = null; }");
tryItOut("throw  \"\" ;");
tryItOut("/*infloop*/for(let constructor = @foo; <y><z/></y>; true) {yield; }");
tryItOut("/*for..in*/M:for(__parent__ in ((new Function)()));");
tryItOut("yield [1,,];");
tryItOut("yield 1e81; const prototype;");
tryItOut("/*infloop*/M:while(this ? @foo : this.__lookupGetter__(\"__proto__\")){}");
tryItOut("{}");
tryItOut("{[[]]\nreturn (3.__defineGetter__(\"prototype\", function (__noSuchMethod__)1.3));/*infloop*/M:for(<y><z/></y>; prop; __iterator__) {throw 3;throw window; } }");
tryItOut("@foo = yield;;");
tryItOut("for(let y in []);");
tryItOut("switch(__parent__ = <y><z/></y>) { default:  }");
tryItOut("with({__proto__: __iterator__}){return; }");
tryItOut("( \"\" );");
tryItOut("L: constructor;");
tryItOut("if([__proto__].filter(Math.pow).propertyIsEnumerable(\"__proto__\").__count__ = constructor.__iterator__) { if (5.0000000000000000000000) { = null, __proto__;__proto__ }} else {gc()/*infloop*/do { } while(<x/>); }");
tryItOut("M:if((([*::*]) @ 0/0 ^ *::*).__lookupGetter__(\"prototype\")) throw  \"\" ; else  if ((({ set prototype constructor (__parent__, __proto__) { yield undefined } , __iterator__: arguments }))) {<><x><y/></x></> } else {return <><x><y/></x></>; }");
tryItOut("L: throw <y><z/></y>; const __count__; const prop;");
tryItOut("let (prop = ({a1:1}), __parent__) { const __iterator__; }");
tryItOut("for(let y in []);");
tryItOut("while((<x/>) && 0)\t{throw \f \"\" ; }");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("(<x/>)\n");
tryItOut("yield;");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/L:for(let __parent__ = <x/>; undefined; <y><z/></y>) const function::prop; const prototype;");
tryItOut("return <x/>;\nif(0x99.__lookupGetter__(\"prop\")) { if (<y><z/></y>.isPrototypeOf(<><x><y/></x></>)) var __iterator__, prop = [,,]; else {(function(id) { return id }); }}\n");
tryItOut("if([11,12,13,14].filter) {/*for..in*/for(var prototype in ((({}).__lookupGetter__)(constructor)))export *; } else {return <><x><y/></x></>;return prop\f; }");
tryItOut("if((yield (new [,,z1]())) & (yield <x><y/></x> + __noSuchMethod__)) { if ((@foo.__defineGetter__(\"__proto__\", this))) {((-1)).callif(<x/>.__lookupSetter__(\"__count__\")) yield window; else  if (<y><z/></y>.__lookupSetter__(\"__count__\")) __proto__; else {export *;return; } } else {return; }}");
tryItOut("with({__proto__: [prop, , prototype] =  ''  ^  /x/ })\f{{export *;<y><z/></y>; } }");
tryItOut("let(__parent__, __noSuchMethod__ = (null.prototype getter= Math.pow)) ((function(){yield <><bbb xmlns=\"[,]\">\f<ccc:ddd> </ccc:ddd></bbb></>;})());");
tryItOut("__proto__ = __proto__\nexport *;\n(this);\n");
tryItOut("return;");
tryItOut("M:if((constructor = <x/>)) { if (__count__ = <y><z/></y>) {/*for..in*/for(let __parent__ in @foo) {x::prototype } }} else /*for..in*/for(let prop = window in true) ");
tryItOut("let (__noSuchMethod__) { /*for..in*/__proto__ }");
tryItOut("*");
tryItOut("/*infloop*/M:for(var yield; get.__count__ setter= default: case  /x/g : case 7: break; export __iterator__;case 0x99: export __iterator__;break; case 5: gc()break; case 3: break; case prop: prototype, prop;case 7: <><x><y/></x></>;break; return;break; case 8: break; ;break; ; constructor.__noSuchMethod__) {(new Function(\"((new Function(\\\"@foo\\\"))).apply\")) }");
tryItOut("let(__parent__, prototype) { ;");
tryItOut("M:if(({ __parent__: __proto__, prop: prop }) = <x/> < 3/0) {} else  if (( \"\" .valueOf(\"number\"))) {yield;export constructor; } else {}");
tryItOut("switch(<x/>) { default:  }");
tryItOut("/*infloop*/while(this){const constructor;return; }");
tryItOut("([<><x><y/></x>/*\n*/</> if ([z1,,])])");
tryItOut("/*infloop*/M:for(let function::__proto__; (new function  __noSuchMethod__ () { delete =  /x/g , __count__ = * } ( '' , default: ) ^ ([15,16,17,18].some(<></>, false))); __noSuchMethod__.([[]].__defineSetter__(\"__proto__\", ('haha'.split).call))) return;");
tryItOut("/*for..in*/L:for(constructor.yield in this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"gc()\")))++) /*infloop*/do /*infloop*/for(let __iterator__ = 0; <x/>; this) {throw 5.0000000000000000000000; } while((!4. instanceof (true\n)));");
tryItOut("(<><x><y/></x></>);\n;\n\nthis.zzz.zzz;");
tryItOut("if( ''  !== <><x><y/></x></>) export *; else  if ((uneval( /x/g ))\n) {M:if((#1#)(<x><y/></x>)+=new Function) continue ; else  if (new ((constructor = *))((let (constructor = *::*) *::*), void  /x/g .__defineGetter__(\"__iterator__\", 1.3))) let __parent__, prop; }");
tryItOut("do export __count__; while((\n[z1]) && 0);");
tryItOut("/*for..in*/L:for(let [false, prop] = this(<x><y/></x>) in (undefined)[ /x/ ].__defineGetter__(\"__count__\", /a/gi)) var prototype;");
tryItOut("for(let y in []); const let;");
tryItOut("__proto__");
tryItOut("/*infloop*/do {(<x/>);/*for..in*/for(const (function ([y]) { })() in __count__) {var prop; } } while((void ~this));");
tryItOut("/*infloop*/for(const __count__;  '' ; 0.1.__lookupSetter__(\"prop\").propertyIsEnumerable(\"constructor\")) /*for..in*/L:for(var (((<y><z/></y> if (*)) ? 033.__parent__ : arguments))([,,z1].hasOwnProperty(\"__iterator__\")) in ([1,2,3,4].slice)) prototype([[]]) = constructor;");
tryItOut("if(--({})) var __noSuchMethod__, __noSuchMethod__ else  if (__count__.(__proto__)) /*infloop*/for(, = ((<><x><y/></x></>)([[1]], window)); [[1]]; <x><y/></x> ? <><x><\ty/></x></> :  /x/g .valueOf(\"number\")) let __parent__ = false, prototype = @foo; else {constructor =  \"\" ; }");
tryItOut("export *; const prop;");
tryItOut("continue M;");
tryItOut("M:if(<x><y/></x>) {let prototype; } else  if (this <= null) {const __parent__;yield false; } else return;return;");
tryItOut("return #3={a:#3#}.valueOf(\"number\");");
tryItOut("return; const constructor;");
tryItOut("if((new this([[]], null))) { if ((__proto__.(<x/>))) (<x><y/></x>); else if((__parent__ ? __iterator__ : -0)) {const __parent__, case 2: yield;break; case 0: throw this;case 8: return false;break; default: break; ; } else gc()}\n/*for..in*/for([prototype, __noSuchMethod__] = <bbb xmlns=\"new Array(<x><y/></x>) .@ __proto__ = __parent__\"> </bbb> in ({a1:1}) &= this[<><x><y/></x></>]) this");
tryItOut("with({}) { __proto__ = __iterator__; } ");
tryItOut("M:if(((-0))(<><x><y/></x></>, <x><y/></x>\t)) yield; else {yield ( /* Comment */<x><y/></x>); }");
tryItOut("with( /* Comment */constructor){function(y) { yield y; gc(); yield y; }{} }");
tryItOut("if(<y><z/></y>.__parent__ =  ''  *= <x><y/></x>) {if((uneval(__count__.prototype))) { if (prototype.__proto__ setter= (([11,12,13,14].some)).__defineSetter__) {case 4: break;  }/*\n*/} else ;({}).__lookupGetter__ } else  if (-1 !== __proto__ = window, prop = <x><y/></x>.__defineGetter__(\"__proto__\", function  __count__ () { gc() } )) const constructor = ({a1:1}), __parent__ = window; else L:if(*) break ; else yield 0;");
tryItOut("with(({ __iterator__: prototype }) = ([11,12,13,14].sort)){if(()) {return; } else {var __proto__ =  '' ;gc() }/*infloop*/do {return <x><y/></x>; } while((<x><y/></x>.(<><x><y/></x></>))); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\fL: for  each(constructor in eval(\"()\", export *)) {{{} }L:do __count__; while((void <x/>.__lookupGetter__(\"__proto__\")) && 0); }");
tryItOut("if( /x/g .isPrototypeOf(false)) { if ((this)) {function  prop (__iterator__)<x><y/></x>{} } else var constructor, prototype = <x><y/></x>;}");
tryItOut("L:if(new ((({__noSuchMethod__: <><x><y/></x></>, __count__: <><x><y/></x></> })[(let (__count__ = <x><y/></x>) [1])]))(((-1) .@ this).__lookupSetter__(\"prototype\").__lookupGetter__(\"prototype\"), [eval(\"function(q) { return q; }\", <x/>)].some(/a/gi) === __proto__.__noSuchMethod__)) { if ((prototype = __proto__)) let __proto__ = {}, prop = (-1);} else gc()\n");
tryItOut("/*infloop*/L\t:for(let prop; new Math.sin(#3={a:#3#}); 1e81) {<><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__parent__.prop)3.141592653589793) in ( '' .__lookupGetter__(\"__count__\"))) {do {{yield window; }let function::function::__noSuchMethod__, __proto__ = <>return <x><y/></x>;</>; } while(((( /* Comment */prop) @ [1,2,3,4].map.*)) && 0); }");
tryItOut("if(<x><y/></x>[undefined]) { if ((true)(case this: let __noSuchMethod__ = <><x><y/><\f/x></>, constructor = null;)) const prop, __parent__; else {yield; }}");
tryItOut("/*for..in*/for((<x><y/></\fx>) in 'haha'.split) {{}export *; }");
tryItOut("let (__iterator__, (@foo)(<><x><y/></x></>)) { L:while((constructor = function(id) { return id }) && 0)continue M; }");
