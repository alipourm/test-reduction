tryItOut("let (__noSuchMethod__ = <x><y/></x>, __iterator__) { var constructor = <x><y/></x>, prototype =  /x/ ; }");
tryItOut("switch(3.141592653589793[<x/>]) { case ( \"\" ): break;  }");
tryItOut("/*infloop*/M:do {{export *; } } while(__proto__);");
tryItOut("\f<><x><y/></x></>;");
tryItOut("return  \"\" ;");
tryItOut("switch('fafafa'.replace(/a/g, \ffunction  prop (__parent__, __parent__)false)) { case  /x/ : break; [z1,,]break; /*infloop*/M:for(var ({ constructor: __count__ }) = (__proto__ = this); ~[15,16,17,18].map(function (prototype, __parent__) { yield <y><z/></y> } \t, function ([y]) { }); function ([y]) { }) gc()break; case 1: break; break; case 2: prop, __iterator__ = [[]];break; return  \"\" ;break; case (\n /x/ ):  } const __parent__;");
tryItOut("/*for..in*/for(__proto__ = (this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"\"))))[(<>prototype, constructor</>.yoyo(<y><z/></y>)).*] | __noSuchMethod__.valueOf(\"number\").__parent__ = this++ in <x><y/></x>.(__iterator__)) break ;");
tryItOut("export *;/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.__parent__ in <y><z/></y>) prototype = 1e81, constructor = __count__;");
tryItOut("L: continue ;");
tryItOut("/*infloop*/M:for(var __proto__; this; .2) return @foo;");
tryItOut("if((p={}, (p.z = (window ? <x><y/></x> : <x/> @ ((uneval(<><x><y/></x></>)))))())) break ; else  if (prototype =  \"\" ) /*infloop*/for(let prop;  '' ;  \"\" ) {let __iterator__ =  '' ; } else M:if(yield false) var prototype, prop = -1; else  if () export *;");
tryItOut("switch(__parent__ = <x><y/></x>) { case (<><x><y/></x></>.__defineSetter__(\"__iterator__\", eval)): Functiondefault:  }");
tryItOut("{if(<x><y/></x>) {prototype; } else  if (3/0) {continue ; }\n/*for..in*/:for(constructor = window in <y><z/></y>) {{} } }");
tryItOut("if((<><x><y/></x></>.__defineSetter__(\"prop\", (1 for (x in []))) instanceof (( /x/g )(prop, <x><y/></x>))) | ([15,16,17,18].sort(<x><y/></x>, <><x><y/></x></>).propertyIsEnumerable(\"__noSuchMethod__\")).__iterator__) do <><x><y/></x></>; while((([15,16,17,18].sort(function ()[z1], true))) && 0); else  if (( /* Comment */ /x/g )) Math.pow");
tryItOut("if(([z1]).call(<x/>.unwatch(\"prototype\"), (p={}, (p.z = <><x><y/></x></>)()), [,,z1])) {((-0));return <><x><y/></x></>; } else  if (#1=[1,,]) yield true\nyield (eval(\"(@foo);\", __noSuchMethod__)) & <x/>++ for each (__iterator__ in function(id) { return id }) if \n(window);");
tryItOut("do export prop; while(((this).watch) && 0);");
tryItOut("if([[]]) return; else  if (<x><y/></x>) var prototype = function(id) { return id }, prop; else gc()");
tryItOut("switch((window)) { default: break; case 9: (<x><y/></x>); }");
tryItOut("{let prop = *::*\n }");
tryItOut("M:while(((this.__defineGetter__(\"function::prototype\", function  __proto__ (__proto__) { <x/>; } ))) && 0)/*infloop*/for(let <><x><y/></x></>.prototype = arguments;  /x/g ; #1=[#1#]) (<><x><y/></x></>);");
tryItOut(";");
tryItOut("{gc() }");
tryItOut("throw true;");
tryItOut("switch([z1,,]) { default: break; case <><x><y/></x></>: <y><z/></y>;break; ( '' ); }");
tryItOut("/*for..in*/M:for(__count__ = ( /* Comment */<><x><y/></x></>) in [__noSuchMethod__].map( \"\" )) {/*infloop*/M:for(<x><y/></x>;  '' ; [,,z1]) let prop; }");
tryItOut(" for each (__proto__ in [11,12,13,14].filter) for (yield in \r*::*.watch(\"__proto__\", ({}).hasOwnProperty)) for (((/a/gi).call(<x><y/></x>, ))(<y><z/></y>) in <y><z/></y>) for (constructor in false) for (prop in <y><z/></y>)\n");
tryItOut("{gc()\n\nfalse; }");
tryItOut("let (__iterator__ =  /x/g , __noSuchMethod__) { yield; }\n\n");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = (<><x><y/></x></> >> []) in (({__noSuchMethod__: 1.2e3, __proto__ setter: (@foo).watch }))) {yield *;M:if([z1,,]) { if (this.__defineGetter__(\"set\", function(id) { return id }) ? ((<y><z/></y>)()) : <><x><y/></x></> & <y><z/></y>) export constructor; else L:if(function(id) { return id }) {const prop = constructor;<y><z/></y>; }} }");
tryItOut("/*for..in*/for(var __parent__.prototype in ((function(q) { return q; })((__iterator__ = (function ([y]) { })())))){continue M; }");
tryItOut("const __iterator__, constructor = *\n{(({a1:1}));('haha'.split).call }");
tryItOut("if('fafafa'.replace(/a/g, *::*)) { if ((__count__.__proto__ = ([15,16,17,18].sort([1,2,3,4].slice, null)).throw(prop))) export prototype\nreturn -0; else {const __count__, __proto__ =  /x/g ;switch(<><x><y/></x></>) { case arguments: break;  } }}");
tryItOut("L:with(this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))/*for..in*/for(const __proto__ in ((gc)([] = []))){/*infloop*/for(let __proto__ =  /x/g ;  '' ; [[]]) ; }");
tryItOut("with({}) let(__proto__, [({ __iterator__: __count__ }), ({ __noSuchMethod__: __count__ }), __proto__]) { with({}) let(__iterator__ = (p={}, (p.z = <x><y/></x>)())) { return;");
tryItOut("return;");
tryItOut("L:with(__count__(<x><y/></x>)-=this.__defineSetter__(\"__count__\", 3/0)){/a/githrow false; }");
tryItOut("/*infloop*/do {{gc()(@foo); }(0.1); } while(({prototype: yield 0/0 }));");
tryItOut("let ([({ constructor: [prototype] }), , ({ prototype: ({ __count__: constructor, __proto__: __proto__ }), constructor: [__parent__, constructor, constructor] }), , prototype] = (new ([1])(window,  /x/ )).*) { L:if(__noSuchMethod__ = #1=[#1#]) { if (-undefined) {export *; }} else {yield;return <><x><y/></x>\t</>;\f } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::constructor.__iterator__ in __iterator__) {return;return; }\n");
tryItOut("yield prototype = ((prop.__proto__ = __noSuchMethod__))() instanceof [15,16,17,18].some(/a/gi, window)\f;");
tryItOut("if(<y><z/></y>) ; else  if (this) {true; } else const prototype, __noSuchMethod__;");
tryItOut("/*infloop*/for(const prop = <y><z/></y>; (this = *::*); [__iterator__ for each (__noSuchMethod__ in @foo)]) {export constructor;continue L; } const __proto__;");
tryItOut("switch((__noSuchMethod__).__defineSetter__(\"__proto__\", Math.sin).yoyo((@foo <= this))) { case this.zzz.zzz: default: break; case 1: throw prop;break; case this: return;break;  } const ({ __count__: ({ __noSuchMethod__: [], __iterator__: ({ __count__: __parent__ }) }) });");
tryItOut("return;");
tryItOut("L:if((new function  __parent__ () { {} } (<x/> == *, [,,]))) { if (__iterator__.__lookupGetter__(\"__parent__\")) ; else M:if(<y><z/></y>) { if (1.3) {return window; }} else {; }}");
tryItOut("throw try { export *; } finally { break M; } \n");
tryItOut("/*for..in*/for(setter in ((/a/gi)( \"\" ))){ }");
tryItOut("/*for..in*/for(let (__proto__) in ((Function)(<><x><y/></x></>.constructor = 1e81)))gc");
tryItOut("\tM:with({__proto__: ((__count__.__count__ = this.propertyIsEnumerable(\"x::__noSuchMethod__\")) .@ __count__)}){break ;<><x><y/></x></>; }");
tryItOut("break L;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = (__count__ = window) in (-1)) prototype");
tryItOut("{/*infloop*/for(let prototype; <><zzz>{}</zzz></>; __proto__) ({}).hasOwnPropertyexport *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L\n: for  each(const constructor in  \"\" ) {const prototype, __noSuchMethod__ =  /x/ ; }");
tryItOut("if((String().__proto__)) { if ((#2=[prototype]) in <><x><y/></x></>.__defineSetter__(\"prototype\", ((('haha'.split).apply).apply).apply)) {break L;/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <!--yy-->) gc() } else }");
tryItOut("with({prototype: [prototype.constructor setter= ([1,2,3,4].slice).apply].sort(Function)}){while(((eval(\"return this;\", (typeof __iterator__) ? window >= 3/0 : (this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; ;; yield y; }))))) && 0)continue L; }");
tryItOut("switch(false) { default: break M;break; yield <x/>; }");
tryItOut("let ([] = __iterator__.prop = __proto__.__proto__ = (prototype = (-1))) { gc() }");
tryItOut("for(let y in [5,6,7,8]) __iterator__ = 4.;\nbreak ;\n");
tryItOut("let(yield, constructor = (new  '' ) <<= window -= *::*) { /*infloop*/while(true > __noSuchMethod__)yield false;");
tryItOut("/*infloop*/while(<zzz>window > @foo.yoyo((__parent__ = window))</zzz>){M:if([11,12,13,14].some) { if (delete *) {const __iterator__, constructor = *::*; }} else {export __noSuchMethod__; }break ; }");
tryItOut("/*for..in*/for(let __proto__ in ((null)((*::* < ( /x/g .eval(undefined))))))throw <y><z/></y>;");
tryItOut("L:while((<x/> / this\t) && 0) /x/g ;");
tryItOut("L: break M;");
tryItOut("/*for..in*/for(//h\nconst [prop, __noSuchMethod__] = constructor = <><x><y/></x></> in true) {yield window; }");
tryItOut("for(let y in []);");
tryItOut("if(null.x::__noSuchMethod__) ; else  if (delete (eval(\"4.\", <x><y/></x>))) continue ;");
tryItOut("if([15,16,17,18].filter(({}).hasOwnProperty, 1e+81)) {return [1];eval } else {}");
tryItOut("with([[]]){;null; }\n");
tryItOut("/*infloop*/for(prototype.x::__count__ getter= (1 for (x in [])); new ((prop = <x><y/></x>) != (this.__defineGetter__(\"__count__\", function () { gc() } )))(); 'fafafa'.replace(/a/g, [z1])) yield;");
tryItOut("({ get prop __noSuchMethod__ (yield, prop) { return this }  })\n\n");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = <bbb xmlns:ccc=\"prop.prop\"><ccc:eee></ccc:eee></bbb> in [*] | *::*) (new Function(\"gc()\"))\n__parent__;\n");
tryItOut("const __proto__, prop = undefined;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const  in (new prop())) L: {__proto__ = *::*; }");
tryItOut("prop = prop;");
tryItOut("yield; const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x/>) {const constructor; }");
tryItOut("/*infloop*/for(([15,16,17,18].filter(this,  /x/g  !== __iterator__.valueOf(\"number\"))); (let (constructor, __iterator__ = <x/>) prototype.prop setter= (({}).hasOwnProperty).apply); @foo ?  '' .__defineSetter__(\"prototype\", (try { export *; } finally { gc() } ).__defineSetter__) : __noSuchMethod__.propertyIsEnumerable(\"1.2e3.throw(<x/>)\")) {gc()while((false) && 0){let __parent__; }\n }");
tryItOut("*::*;\nyield;\n");
tryItOut("(function ()#1=[#1#]).apply\n");
tryItOut("if(((((new (this)()).__lookupGetter__(\"__noSuchMethod__\")))[<bbb xmlns:ccc=\"<x><y/></x>.(<>\t<x><y/></x></>)\"><ccc:eee></ccc:eee></bbb>.(({constructor: .2 }))])) {;if(({__parent__:  \"\" , __count__ setter: function (function::__parent__) { yield @foo }  })) {({}).__lookupGetter__ } else /a/gi; } else /*infloop*/M:while([,,])export prototype;");
tryItOut("L: {yield;yield 0; }");
tryItOut("{ }");
tryItOut("let (function::__proto__ = <y><z/></y>) { export *; }");
tryItOut("do /*infloop*/for(__parent__ = __noSuchMethod__; (true); <><x><y/></x></> ? 5.0000000000000000000000 : <><x><y/></x></>) yield <y><z/></y>; while(() && 0);");
tryItOut("L:if( '' .__proto__) {/*for..in*/M:for(var __parent__ in <y><z/></y>) window;{} } else {{} }");
tryItOut("do {} while((({a1:1})) && 0);");
tryItOut("let (__noSuchMethod__, __parent__ = (yield <><x><y/></x></>)) { {set;return; } }");
tryItOut("if((-0)) { if (<y><z/></y>) yield 0; else return prototype;}");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in (<x><y/></x>.((-1)).valueOf(\"number\")) /*infloop*/for(var ({ __parent__: ({ __proto__: ({ constructor: ({ constructor: ({ prototype: __parent__, __parent__: constructor }) }), prototype: prototype }) }) }) = __iterator__; ((uneval(([1,2,3,4].map()) instanceof this <= window))); (__count__.valueOf(\"number\")).call()) {/*for..in*/for(__iterator__ in ((({}).__lookupGetter__)(window))){return; }return; }");
tryItOut("/*infloop*/for([getter] = constructor.(((function  __noSuchMethod__ (prop, __count__) { yield <x><y/></x> } \t)(*::*))); eval(\"window\", false); ) {return  /x/g ;throw <><x><y/></x></>; }");
tryItOut("if(false) var __count__ = *::*, default: case 7: {}case 9: gc()break; var prototype;[1,2,3,4].mapbreak; var prop = window, __noSuchMethod__;yield;break; case <x><y/></x>:  = [1]; else  if (<x><y/></x>) {var __parent__ = <><x><y/></x></>; } else {}\nif([11,12,13,14].sort) { if ( > #1=[#1#]) { } else {__iterator__;export __noSuchMethod__; }}\n");
tryItOut("L: return 4.;");
tryItOut("if(eval(\"1e-81\", window)) throw  '' ;");
tryItOut("case 5: break; ");
tryItOut("\ngc()");
tryItOut("/*for..in*/for(const __proto__ = [<><x><y/></x></>] in <y><z/></y>.yoyo((function ([y]) { })())) return");
tryItOut("if([(uneval(<x><y/></x>))].some((1 for (x in [])))) M:while(([]) && 0){break ; } else {(1 for (x in [])) }");
tryItOut("M:if([15,16,17,18].filter([1,2,3,4].map, true)) {} else  if ((new Function(\"M:do {new Functiongc() } while((@foo) && 0);\"))(undefined, new <x><y/></x>(__noSuchMethod__))) continue ; else {return\n__parent__, __count__ = (function ([y]) { })();let __iterator__ }");
tryItOut("return; const prop;");
tryItOut("do {export __noSuchMethod__; } while(((\n(<><x><y/></x></>)[<x><y/></x>])) && 0);");
tryItOut("function(y) { yield y; export *;; yield y; }");
tryItOut("gc()(<><x><y/></x></>);");
tryItOut("L:if(let (/*for..in*/for(prototype = __noSuchMethod__ in  { return window } ) export __count__; =  \"\" ) ({__iterator__: 'fafafa'.replace(/a/g, ({}).__lookupGetter__)})) { if (delete this.__defineGetter__(\"constructor\", eval(\"window\", #1#))) {throw <><x><y/></x></>;if(false) { if (window) {{} } else (function(q) { return q; }).apply} }} else {return <y><z/></y>;\f }");
tryItOut("function  __parent__ () { yield __parent__ } ");
tryItOut("L: Math.sin");
tryItOut("if(prototype ? false : *) {}");
tryItOut("/*infloop*/L:for(try { throw StopIteration; } finally { try { const __proto__ = arguments, __iterator__; } finally { {} }  } ; 0/0; (new ((new Function(\"export *;\")))())) {1e81L:if(<x><y/></x>) { if ( \"\" ) { \"\" ; } else Math.sin} }");
tryItOut("yield eval(\"(<><x><y/></x></>)[@foo]\", ([z1]()) ^ [15,16,17,18].map(Math.pow, <x/>));");
tryItOut("if(<x><y/></x>) { if (0) {<y><z/></y>; } else {export *; { yield constructor }  }}");
tryItOut("/*infloop*/M:for(#2=[__proto__|=__proto__.__defineGetter__(\"window\", function (constructor, prototype) { return .2 } )]; arguments.@*; ([<><x><y/></x></> for (prop in  \"\" )].map(Function))) export __proto__;/*infloop*/for((eval(\"gc()\", <x><y/></x>)); <x><y/></x>;  /x/ .__lookupSetter__(\"prop\")) export *;");
tryItOut("if((__iterator__.__proto__ = ((<x/> if (<><x><y/></x></>))))) { if (([(({ get __count__ __count__ () { yield \n* }  }))].map(Math.sin).hasOwnProperty(\"__iterator__\"))) L:if( /x/ ) { if ( '' ) <x/>;} else {gc } else {throw <x><y/></x>; }}");
tryItOut("do {yield;if(<y><z/></y>) @foo; } while((\f([<x><y/></x>.unwatch(\"__parent__\") for each (__iterator__ in null) for (prototype in 3.141592653589793)])) && 0);");
tryItOut("yield *::*;");
tryItOut("/*for..in*/for(const [__parent__, __noSuchMethod__] =  \"\" .__defineGetter__(\"<><x><y/></x></>\",  /x/ ).yoyo(((uneval((Math.pow).call(<y><z/></y>, ))))) in ((yield  \"\" ))) with({__proto__: <><x><y/></x></>}){prototype =  /x/ ;; }");
tryItOut("/*for..in*/for(var [function::__noSuchMethod__, __count__] = (__noSuchMethod__ = <x/>).eval(function(q) { return q; }) >>> this.zzz.zzz in (this.zzz.zzz).isPrototypeOf([15,16,17,18].map(function (__count__) { <y><z/></y>; } , []))) {gc() }");
tryItOut("/*for..in*/for constructor(var (yield 3/0.isPrototypeOf(false).yoyo(typeof <x/>)).prototype in ( constructor = window, prototype (this.__defineGetter__(\"constructor\", @foo))((__count__.isPrototypeOf(*::*)) .@ new (\n /x/  if (__proto__) >>> (<x/>)()).isPrototypeOf(__parent__)(constructor, <x><y/></x>)))){ }");
tryItOut("\n /x/g ;\n");
tryItOut("{/*infloop*/L:for(<x/>; (({__count__: (p={}, (p.z = true)())})); 1e-81 ? [1] : 5.0000000000000000000000) __parent__ = 0; }");
tryItOut("if((1.3 >>>=#3={a:#3#}.valueOf(\"number\"))) constructor = <y><z/></y> else {__iterator__;export __iterator__; }L: {{}i }");
tryItOut("{gc()if((function (prop) { yield ({}) } )()) { if (<x><y/></x>.__lookupGetter__(\"__parent__\")) <><x><y/></x></> else } }");
tryItOut("/*for..in*/for(var prop in (((1 for (x in [])))(constructor = __count__)))with({prop:  \"\" })const function::prototype = constructor, __parent__ = this;");
tryItOut("{var prop; }");
tryItOut("{/*infloop*/for(let __proto__; [try { ({}).__lookupGetter__ } catch(__count__) { yield; } .function::constructor].filter((function(y) { yield y; return window;( '' );; yield y; }\f).apply); [false for (constructor in *)]) {yield null; }let(prop = ([[]].valueOf(\"number\"))) { yield __iterator__ =  \"\" ; }");
tryItOut("new Object(this)");
tryItOut("default: break; ");
tryItOut("do {export __parent__;constructor = __iterator__, __noSuchMethod__ = __count__; } while(([15,16,17,18].some([1,2,3,4].map, let constructor =  /x/ , yield; = 033)) && 0);");
tryItOut("if(#1#) {if([1]) window; } else  if ([<><{prop}><ccc:ddd><x><y/></x><!--yy--></ccc:ddd></{prop}></>]) {yield;__noSuchMethod__, function::prototype; } else {Math.sin }");
tryItOut("/*infloop*/while((-0)){<y><z/></y>continue ; }");
tryItOut("if(this += prop) {__iterator__, __iterator__ = this;const constructor = __parent__; }\f");
tryItOut("if(<y><z/></y>) { if (function(q) { return q; }(<x/>)) gc() else var __proto__;}\nlet(__proto__) { export *;");
tryItOut("if(prototype) {yield; }");
tryItOut("/*for..in*/L:for(const [__iterator__, __proto__] = [11,12,13,14].some in ([([15,16,17,18].map(<><x><y/></x></>, @foo))]) <<= (yield  /x/ .__lookupGetter__(\"__parent__\"))) {{yield;/a/gi } }");
tryItOut("M:with(__proto__ = false){{}switch([(window)(@foo, <><x><y/></x></>)]) { default: export *;break;  } }");
tryItOut("L:while((({__parent__ getter: new Function })) && 0)( /x/ );");
tryItOut("{}");
tryItOut("with(5.0000000000000000000000)export __count__;");
tryItOut("/*for..in*/L:for(const __iterator__ = @foo in default: break; break; break L;break; ) \f{{} }");
tryItOut("with(!+((p={}, (p.z =  '' )()) ? (()[*::*]) : __count__ = <x/>)){<y><z/></y>; }");
tryItOut("/*infloop*/while(<><x><y/></x></>)var constructor = <x><y/></x>;");
tryItOut("let(({ __noSuchMethod__: __count__, __iterator__: __iterator__ }) = (false.valueOf(\"number\")), __proto__) ((function(){for(let y in []);})())\n");
tryItOut("switch([<><x><y/></x></>.__defineGetter__(\"__count__\", gc) for each (__iterator__ in 3.141592653589793) for each (constructor in *) if (window)]) { case (RegExp(window | false, undefined)): return prop;break; default: break;  }");
tryItOut("/*infloop*/L:do <x><y/></x>; while(<><x><y/></x></>);");
tryItOut("if((constructor.__proto__) = ({})) let prototype = -1 * this, [, , ];");
tryItOut("L:with([ /x/ ].some((1 for (x in [])))){if(#1=[#1#]) { if (<><x><y/></x></>) {export __count__; }} else export *;M:with(<x><y/></x> < <x><y/></x>){(<x><y/></x>).__defineSetter__yield; } }");
tryItOut("M:while((yield ( /* Comment */__parent__ = 3).throw([,,z1]())) && 0){;gc()constructor; }");
tryItOut("return;");
tryItOut("if((p={}, (p.z = <x><y/></x>)())) /*for..in*/for(var [__iterator__, prop] = @foo in this) <y><z/></y>; else  if (( \"\"  - 1e81)) return; else (({a2:z2}))");
tryItOut("/*infloop*/M\t:for(*::*;  '' ; 1e4) {export *;throw window; }");
tryItOut("if(<y><z/></y>) { if (*::*) {export __noSuchMethod__; } else {}}");
tryItOut("L:if((new (({ __proto__: ({ __parent__: __proto__, -1['__noSuchMethod__']: [, __parent__, , ] }), __count__: __iterator__ }) = (({ __parent__: prototype }) = (__count__ = __proto__).isPrototypeOf(<y><z/></y>))\f)([,,z1].yoyo(undefined)))) {export __noSuchMethod__;[,,z1] >> <><x><y/></x></>; } else  if (([<><x><y/></x></>])[(gc).call(0x99, *::*, <x><y/></x>)]) return;");
tryItOut("case arguments: continue L;case 4: const __parent__, constructor;break; case 7: ");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = 'fafafa'.replace(/a/g, new Function) in <x><y/></x>.(*::*)) export prop;");
tryItOut("let (constructor = [11,12,13,14].sort, prototype) { export __count__; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(let [__proto__, __count__] = constructor in (__count__ = <><x><y/></x></>)) ");
tryItOut("{L: {{}return (function ([y]) { })(); } }");
tryItOut("if((function  prop (__parent__) { return <y><z/></y> } ).call(<x><y/></x>, __noSuchMethod__,  /x/ )) {{gc() } } else  if ((__proto__)) @foo else ;");
tryItOut("case this.__defineSetter__(\"prototype\", (1 for (x in []))): /*infloop*/for(var prototype; window.hasOwnProperty(\"constructor\"); ({}).hasOwnProperty) throw prop;break; break; ");
tryItOut("gc() const __count__;");
tryItOut("return\nyield prop =  /x/ ;");
tryItOut("if(~__count__+=true.valueOf(\"number\")) {{}; } else {gc()<x><y/></x>; }");
tryItOut("let (__parent__ = ([<>__parent__ = <y><z/></y></>].sort('haha'.split))) { /*infloop*/while(<y><z/></y>){__parent__;Math.pow } }");
tryItOut("with({}) var __count__ = -0, __iterator__;");
tryItOut("/*for..in*/for(const [prop = prototype, __iterator__] = eval(\"#1=({prop: prototype: 0/0.hasOwnProperty(\\\"__count__\\\")})\", function ([y]) { }) in  \"\"  << * if (__iterator__)) return 1.2e3.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; });");
tryItOut("/*for..in*/for(prop in ((Math.pow)((return)))){export *;(<x/>); }");
tryItOut("{/*infloop*/for(let prop; this >>= window((-0)); [undefined.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)]) if((<><x><y/></x></> && this)) {gc() } else  if (window) return;return; }");
tryItOut("if(<x/>()) __noSuchMethod__ else { }");
tryItOut("with( \"\" ){continue L; }");
tryItOut("let(__noSuchMethod__) { for(let y in [5,6,7,8]) __proto__ = __noSuchMethod__;");
tryItOut("/*infloop*/M:for(prototype; @foo; ((*::*.__count__).isPrototypeOf(yield @foo))) {(<y><z/></y>).__defineSetter__ }");
tryItOut("L:if(eval(\"export __iterator__;\", (false)())) { if ([,,z1][window]) {[1,2,3,4].slice } else {yield;; }}");
tryItOut("/*for..in*/M:for(var constructor in ((Function)(delete *::*)))var constructor = 1.2e3;");
tryItOut("/*for..in*/for([constructor, __iterator__] = <><x><y/></x></>-- || undefined++ in <><ccc:ddd><!--yy--></ccc:ddd></>) ;");
tryItOut("L:with({__count__: __parent__ = prototype, __iterator__})-3/0;");
tryItOut("L:with(-<><x><y/><\t/x></>.isPrototypeOf(*::* << *).propertyIsEnumerable(\"__iterator__\")){continue M;\nvar __count__ = this, constructor = 0.1;\n }");
tryItOut("__iterator__ = __count__;");
tryItOut("L:if(this) {return; } else  if (constructor.( /x/ )) {let __count__, __noSuchMethod__ = 0.1;export *; } else (3.141592653589793);");
tryItOut("L:if(((p={}, (p.z = [ __iterator__*::*])())))  else yield false\n");
tryItOut("/*infloop*/do {} while(arguments);");
tryItOut("with((.2 = (({ get constructor prototype (constructor, __count__) { return <><x><y/></x></> } , __parent__: false })))){if((var __parent__ = window, constructor)) { if (__iterator__.prop setter= function(q) { return q; }) {;; }} else <x/>\fthrow <x><y/></x>\nlet (__proto__ =  /x/g ) { ; } }");
tryItOut("M:while((--~__iterator__) && 0)throw __count__;");
tryItOut("yield __iterator__+=0x99;");
tryItOut("while((({ set constructor()__iterator__ }) @ (new function(y) { yield y; ; yield y; }().__defineGetter__(\"__iterator__\", [1,2,3,4].map))) && 0){export *; }");
tryItOut("while((Exception()) && 0){(this);let __count__; }");
tryItOut("if((true ^= <><x><y/></x></>.propertyIsEnumerable(\"null\"))) { if (RangeError(null.__defineSetter__(\"constructor\", ({}).hasOwnProperty))) ( '' );} else {/*infloop*/for(const __noSuchMethod__; <y><z/></y>; <y><z/></y>) (this); }");
tryItOut("L:with(<x/> < [z1])-3/0;");
tryItOut("/*for..in*/L:for(let (#3={a:#3#})(<><x><y/></x></>) in ((({}).hasOwnProperty)(('haha'.split)(1e4, *::*))))throw  \"\" ;");
tryItOut("\fL:switch((new (([1,2,3,4].map).apply)(\t))) { case 9: continue ;break; break;  }");
tryItOut("/*infloop*/for(__proto__.__count__ - 'fafafa'.replace(/a/g, ({}).hasOwnProperty); 0x99.__lookupGetter__(\"__count__\"); ([,,] <<= <x><y/></x>)) {(1.2e3); }");
tryItOut("/*infloop*/M:while((-1 /= *))yield <x><y/></x>;");
tryItOut("break ;yield <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(var #3={a:#3#} = __noSuchMethod__ in <y><z/></y>) (true);");
tryItOut("*::*;");
tryItOut("/*for..in*/M:for(prototype = this.zzz.zzz in 0x99) if(this.__defineGetter__(\"__count__\", function  prototype (__iterator__, __parent__) { yield  \"\"  } )) throw undefined;");
tryItOut("{continue ;{} }");
tryItOut("if([__proto__ = window if (__proto__)]) {export __proto__; } else  if ((new Iterator().__lookupGetter__(\"__iterator__\").watch(\"__proto__\", (([this if (<><x><y/></x></>)])).watch))) {const __iterator__, __count__ = true\n } else /*infloop*/for(@foo;  /x/g ; <y><z/></y>) {{} }");
tryItOut("with({constructor: <x/>})yield;");
tryItOut("let ([[, , [, __parent__], ], [], , , constructor]) { do {(<x><y/></x>);L:with({__iterator__: (this)[arguments]})gc() } while((({__count__: #1=([,,z1] | <x/>)/*\n*/, constructor: ([15,16,17,18].sort(({}).__lookupGetter__, undefined).__defineSetter__(\"prop\"//h\n,  { {} } )) })) && 0); }");
tryItOut("throw StopIteration;");
