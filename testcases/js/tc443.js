tryItOut("if(<x><y/></x>.propertyIsEnumerable(\"__iterator__\")) { if (void <x><y/></x>) {gc()const let; } else const  { ; } , __iterator__ = 033;}");
tryItOut("M:if(try { __proto__.constructor; } finally { return; } ) {throw [[]];throw [[]]; } else  if ( '' .propertyIsEnumerable(\"__parent__\") instanceof -1.*) ;");
tryItOut("prototype = prototype;");
tryItOut("L:while(((<y><z/></y> @ window).watch(\"prop\", function  __parent__ (__iterator__, [({ __iterator__: prop, prototype: prototype }), [], ({ prototype: __noSuchMethod__ }), , ]) { yield (false.unwatch(\"prototype\") <<= *::*) } )) && 0)__parent__ = __iterator__, __parent__ const __noSuchMethod__;");
tryItOut("/*infloop*/for(*::*.valueOf(\"number\"); (function::__noSuchMethod__ = ({ __noSuchMethod__: prototype, __noSuchMethod__: constructor })); (/__noSuchMethod__.watch(\"prototype\", ({}).__lookupGetter__)) {if(#1=[window].__count__) { if (__count__.__count__ = __iterator__) {continue L; }} else break L;prototype; }");
tryItOut("/*infloop*/for(<y><z/></y>.hasOwnProperty(\"prop\"); (false.__noSuchMethod__); [15,16,17,18].map(this, __count__)) ;");
tryItOut("if(false ^ <y><z/></y>) { if (([1,2,3,4].slice).call(<x><y/></x>, -1, ({a1:1}))) {export *; }} else *;");
tryItOut("/*infloop*/while(this){{} }");
tryItOut("/*infloop*/while(prototype = ([1,2,3,4].map()).*){export *;throw window; }");
tryItOut("for(let y in []);");
tryItOut("if((this.@foo).@*) (<x><y/></x>); else  if (Iterator()) {function  __noSuchMethod__ (constructor) /x/g return; }");
tryItOut("/*infloop*/M:do {const __count__ = [,,];let function::prototype, constructor; } while((<><x><y/></x></>.__defineGetter__(\"__proto__\", (new Function(\"var __parent__ = this, prototype;\")))));");
tryItOut("let(constructor = (*++), __noSuchMethod__ = window[<x><y/></x>]) ((function(){let(prototype) { for(let y in [5,6,7,8]) const constructor = window;})());");
tryItOut("/*infloop*/while(constructor = <><x><y/></x></>){yield 3/0;const __proto__, constructor = <y><z/></y>; }");
tryItOut("__proto__ = __proto__;");
tryItOut("(.2);\nwhile(([1] .@*:: window.isPrototypeOf(yield this)) && 0)throw @foo;\ncontinue L;\n\n");
tryItOut("yield;yield;for(let y in []);");
tryItOut("with(false)export *;");
tryItOut("let (prop) { M:if(undefined.eval(*::*)) break M; else  if (true) {<y><z/></y>;yield undefined; } }\n(0)\nbreak ;\n");
tryItOut("( '' );");
tryItOut("/*infloop*/while(({constructor:  /x/g })){<><x><y/></x></>;return; }");
tryItOut("M:if(#1=/*\n*/({__parent__: (__count__ = (@foo.__defineSetter__(\"prop\", this)), constructor.__lookupGetter__(\"__parent__\") ? __parent__ = window |= prop.prop getter= (<x><y/></x>\f).watch : (Math.sin))})) { if (( /x/  >>>=<x><y/></x>)) {export __proto__; } else {yield <y><z/></y>; }}");
tryItOut("if(new (<x/> >= false)(<x/>.hasOwnProperty(\"__proto__\"))) {(;);yield; } else  if ((yield  /* Comment */[z1,,])) return *::*; else /*infloop*/while(<x/>)export __parent__;");
tryItOut("/*infloop*/for(var __proto__;  /x/g ; undefined) var __parent__ = true, __proto__;");
tryItOut("/*for..in*/for(__proto__ = window in <><x><y/></x></>) let constructor;");
tryItOut("yield try { (*); } catch(constructor) { return; } finally {  } ;");
tryItOut("M:if((({__count__: (uneval(<><x><y/></x></>)) >= [<><x><y/></x></>].__lookupSetter__(\"constructor\") &=  /x/g }))) M:switch(*::*) { default: break; case 2: gc()case *: prop =  \"\" ;break; case 5: break;  } else  if (__count__ = (__noSuchMethod__.__iterator__ setter= function (x::__noSuchMethod__, prop) { {} } ) .@x:: ) if(__parent__ =  \"\" .valueOf(\"number\")) { if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) var prop = ({a1:1});} else {return 033; } else {let (prop) { /*for..in*/for(let [__noSuchMethod__, __iterator__] = window.__iterator__ = prototype in  /x/ ) {case 1: (this ? new (<><x><y/></x></>)(this, 1.3) : __parent__.throw(*))const \f__parent__, __parent__ = <y><z/></y>; } } }");
tryItOut("let (prop = ([1,2,3,4].slice).call((function ([y]) { })(), ), ({ __proto__: __count__ })) { /*infloop*/M:for((new RangeError(__iterator__)); *.watch(\"__parent__\", function  prototype ()<x/>); ({__count__: this, __iterator__: __proto__ }) ? <><x><y/></x></> : __noSuchMethod__.yoyo( /x/g )) yield this; }");
tryItOut("/*for..in*/for(var  in <><x><y/>\t</x></>) {gc()yield; }");
tryItOut("/*for..in*/for([prop, prop] = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in <x><y/></x>) {yield;this; }");
tryItOut("gc()");
tryItOut("/*for..in*/for(constructor = new Exception() in let (prototype = <><x><y/></x></>, __iterator__ = 3/0) <><x><y/></x></>) (__noSuchMethod__)\n\n");
tryItOut("let(__proto__ = (this.__defineGetter__(\"__count__\", function(y) { yield y; yield  \"\" ;; yield y; })), yield) ((function(){prototype = prop;})());");
tryItOut("M:if(*::*) { if (null) {} else }");
tryItOut("yield;");
tryItOut("with({}) { this.zzz.zzz; } \n{(@foo);gc() }");
tryItOut("/*infloop*/do return ({a1:1}); while(<x><y/></x>);");
tryItOut("/*for..in*/for(let prototype = [<x><y/></x> if (@foo)] in (this)[0/0]) ");
tryItOut("with({__count__: <><x><y/></x></>})( /x/ );");
tryItOut("while(((([11,12,13,14].some)[(<x><y/></x>.__lookupSetter__(\"prop\"))])) && 0)/*infloop*/do {throw 1e+81;switch(0x99) { default: case 8: case <x><y/></x>: return [[1]];break; yield;case this:  } } while((((prototype)(-0, <x><y/></x>))));");
tryItOut("{let constructor, __noSuchMethod__ = <x/>;return <><x><y/></x></>; }");
tryItOut("with(({ prototype: __proto__, prototype:  }) = <x><y/></x>.propertyIsEnumerable(\"__proto__\"))__noSuchMethod__ = [1,,], prototype;gc()");
tryItOut("with({}) let(({ getter: ({ constructor: __count__, __count__: prop }), __noSuchMethod__: __iterator__ }), prototype) { return (({__count__ getter: gc }));");
tryItOut("return\n\n");
tryItOut("yield function::constructor;\nreturn this;\n");
tryItOut("/*infloop*/do let __count__, __count__; while((yield this));");
tryItOut("/*for..in*/for(let (//h\n( /* Comment */windowthis))(yield += (yield *)) in <x><y/></x>.(undefined)) /*for..in*/for([__noSuchMethod__, __noSuchMethod__] = function::__parent__+=null in constructor) gc()");
tryItOut("throw prototype;");
tryItOut("continue ;");
tryItOut("/*for..in*/M:for(var __count__ = true in 3) ;\nyield <>yyy</>;\n");
tryItOut("yield null;");
tryItOut("for(let y in []);");
tryItOut("continue ;\ngc()\n");
tryItOut("__count__ = __count__;");
tryItOut("if(<y><z/></y>.prop = <x><y/></x>) {export __count__; } else  if (new ((this.*))([ \"\" ]).__lookupSetter__(\"__parent__\")) if((__count__ = <><x><y/></x></>)) { if (<x><y/></x>) this else {__proto__;(.2); }} else {/*infloop*/do yield <x><y/></x>; while(--prototype); }\nL:do with({__iterator__:  '' })Math.pow while(( \"\" .valueOf(\"number\")) && 0);\n");
tryItOut("try { throw StopIteration; } catch(__parent__) { __parent__ = __iterator__; } finally { throw prototype; } ");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const __proto__ = (new (Math.sin)(<y><z/></y>, 0x99)) in (([,,] >= __noSuchMethod__).watch(\"__parent__\", function  __proto__ (prop) { {} } )).prop) /*for..in*/for(var __parent__ in [,,]) prop, prop = <x><y/></x>;");
tryItOut("this.zzz.zzz;");
tryItOut("if( '' ) yield; else (@foo)\n");
tryItOut("if(<x/>) {__iterator__ = this;@foo; } else  if ((*::* ? __parent__ : <x><y/></x>)) {(this);{} }");
tryItOut("if(*.__defineGetter__(\"constructor\", <x/>)) { if (String(<><x><y/></x></>).__lookupSetter__(\"prop\") .@x:: 1e4.__lookupGetter__(\"__iterator__\")) {with({}) { let(({ <x><y/></x>: function::prototype }) = <><x><y/></x></>.*, __iterator__ = this) ((function(){__noSuchMethod__ = __proto__;})()); }  }} else L:if(let|=[[1]]) {({}).hasOwnProperty((function ([y]) { })()); } else  if ([15,16,17,18].filter((1 for (x in [])), <x/>)) {yield <><x><y/></x></>; } else {const prop = ({a1:1}), constructor = <x><y/></x>; }");
tryItOut("if(({prop:  /x/g })) {} else  if ((+undefined).@foo) {break ;{} } else {/*for..in*/for(const [constructor, __parent__] = .2 in ({a2:z2})) \f{yield <y><z/></y>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__ in undefined) {{break M; }export *; }");
tryItOut("if(({__count__: let (__proto__ = *::*, __iterator__) this})) {throw new (<x><y/></x> .. <><x><y/></x></>);/*for..in*/L:for(var [__parent__, __count__] = (<x/>.__iterator__ = @foo) in this.__defineGetter__(\"__proto__\", (new Function(\"export prop;\")))) {<x/>; } }");
tryItOut("switch(*) { default: case 3: let __iterator__ = window;case function(id) { return id }: break; break;  }");
tryItOut("/*infloop*/for(const prop; Math.pow; arguments['window'] = __parent__ = null) yield;");
tryItOut("L: export __parent__\f;");
tryItOut("if(new (({ __noSuchMethod__: ({ __iterator__: __count__, __count__: prototype }), __noSuchMethod__: ({ constructor: __proto__ }) }) = /*\n*/new Error())(__count__(<x><y/></x>), ())) yield; else  if (__parent__ = __count__) {yield null;yield <x><y/></x>; } else {if(@foo) { /x/g ; } else  if (undefined) /*infloop*/for(const [__proto__] =  /x/  .@ constructor;  /* Comment */ /x/g ; [z1]) {continue L; } }");
tryItOut("L:do /*infloop*/for(const prototype; <x/> <= 3.141592653589793; new 1.2e3(<y><z/></y>)) (<y><z/></y>); while((__noSuchMethod__.__proto__ = window) && 0);");
tryItOut("");
tryItOut("M:if(prototype|=constructor = *) {yield; } else /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <x><y/></x>) {break L;const __proto__; }\ngc()\nreturn;\n");
tryItOut("let (({ __iterator__: ({ __count__: prototype }) })) { if( '' ) yield; else  if ([z1,,]) {*; } }");
tryItOut("__count__ = __count__;");
tryItOut("/*for..in*/for(__noSuchMethod__ in function(y) { yield y; let __parent__, constructor = <><x><y/><//h\n/x></>;; yield y; }) {let prototype, __count__;continue \n }");
tryItOut("yield [ \"\" .eval(<><x><y/></x></>)];");
tryItOut("/*infloop*/while(prototype)continue ; const prop;");
tryItOut("while(((({__iterator__ getter: /a/gi }))) && 0){/*infloop*/M:while(@foo){var __count__; }/*infloop*/for(let [] = 'fafafa'.replace(/a/g, ({}).hasOwnProperty);  /x/ ; undefined == <x><y/></x>) __count__: this }");
tryItOut("/*for..in*/for(constructor\n = 3/0 in <x/>) {yield;(this); }");
tryItOut("L: const __proto__ = false, __noSuchMethod__ = this;\f");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] =  /x/ .__defineSetter__(\"prop\", function(y) { yield y; var prop, prop;; yield y; }).valueOf(\"number\") in __parent__) yield; const __noSuchMethod__;");
tryItOut("/*infloop*/while(new ({}).hasOwnProperty(1.3))continue ;");
tryItOut("M:if(<>__parent__ =  '' </>.isPrototypeOf(prop)) { if (({__iterator__: (5.0000000000000000000000 for each (@foo in *::*))})) /*for..in*/for(__noSuchMethod__ in ((function (__proto__) { return (function ([y]) { })() } )([1,,]))){__count__;let __noSuchMethod__ = this; } else var prop = null; const __parent__;}");
tryItOut("/*infloop*/do {break ;/*infloop*/for(const __noSuchMethod__ = *::*; __proto__; <x/>) {continue M;(__noSuchMethod__); } } while(__parent__['__count__']+=( /* Comment */function ([y]) { }));");
tryItOut("if((((uneval(<x><y/></x>))).__lookupGetter__(\"__parent__\")) % --<x><y/></x>.(undefined)) { if ((yield [15,16,17,18].sort(function(y) { yield y; ;; yield y; }, this) || (yield  /x/ ))) {throw  '' ; } else { }}");
tryItOut("if(this |= <x><y/></x> %= ([11,12,13,14].sort || delete *)) (<><x><y/></x></>); else {/*for..in*/L:for(let __iterator__ in __parent__) {yield;(*); } }");
tryItOut("for(let y in [5,6,7,8]) try { gc() } catch(prop) {  } ");
tryItOut("let (({ __iterator__: __proto__, __noSuchMethod__: ({ __noSuchMethod__: __iterator__, __noSuchMethod__: constructor }) }) = <><x><y/></x></> .@*:: *::*, prototype = <y><z/></y> / <y><z/></y>) { throw <><x><y/></x></>.__defineSetter__(\"prop\", function (__iterator__) { (null); } ); }");
tryItOut("/*infloop*/do {} while(((*)));");
tryItOut("L:do @foo = false; while((<y><z/></y>) && 0);");
tryItOut("L:if(*) let prototype; else  if (-1) yield; else (constructor);");
tryItOut("/*infloop*/for(prop.prop; 'fafafa'.replace(/a/g, window.getter); 'fafafa'.replace(/a/g, Math.pow)) {export *;/*infloop*/L:for(let __proto__; __proto__%=constructor; (yield this.zzz.zzz)) let prototype = -0\n }");
tryItOut("M:if(({ get __iterator__ each (({ constructor: get(@foo), __count__: ({ __iterator__: ({ <x/>: __noSuchMethod__, __parent__: ({ constructor: ({ constructor: __parent__, prop: __iterator__ }), __proto__: ({ __iterator__: prototype, constructor: __parent__ }) }) }) }) }), __count__) { yield __proto__.prop setter= [1,2,3,4].slice }  })) { if (__proto__.__iterator__ getter= [1,2,3,4].slice) export *\nyield 033;} else {export *; }");
tryItOut("M:if(__proto__) {} else  if ((uneval('fafafa'.replace(/a/g, 'haha'.split))).__lookupSetter__(\"__proto__\")) {throw (({}) &= __count__.*); } else {yield; }");
tryItOut("let (__parent__ = (({prop getter: gc, __noSuchMethod__: function(q) { return q; } })), prop) { let __noSuchMethod__, __noSuchMethod__ = this; }");
tryItOut("/*infloop*/while(<y><z/></y>%=this.__defineSetter__(\"__iterator__\", (-0).__defineSetter__).__defineSetter__(\"prop\", function ()<x><y/></x>))*::*;");
tryItOut("{yield; }\nreturn;");
tryItOut("while((<x><y/></x> += window .@*:: <x><y/></x>.(null)) && 0)\f{if((this)(<x><y/></x>)) {with({__parent__: window}){export __iterator__; } }\nconst __iterator__ = __count__;yield <><x><y/></x></>; }");
tryItOut("if((false)(<x><y/></x>.(prototype))) { } else #3={a:#3#}");
tryItOut("let(__proto__, __proto__) ((function(){let(__parent__ = 0, constructor = this.__defineSetter__(\"__noSuchMethod__\", Function)) ((function(){{}})());})());");
tryItOut("/*for..in*/for(let undefined ?  ''  : true in ((new function  prop (prop)[[1]](<><x><y/></x></>.__lookupSetter__(\"__count__\")))((({a1:1}) -= <><x><y/></x></> .@ window .@*:: true)))){let prototype = __iterator__, constructor;prop; } const prototype;");
tryItOut("with({}) { prop = prop = [,,]; } ");
tryItOut("/*infloop*/for(var __count__; [[1]]; ({prop: this.__defineSetter__(\"constructor\",  '' ) })) {} const __parent__;");
tryItOut("*::*\n");
tryItOut("/*infloop*/for(prop; <xxx>{__proto__}</xxx>; ((-0) && (constructor.eval(1.2e3)))) {let (prototype, __iterator__) { export *; } }");
tryItOut("if(<x><y/></x>.unwatch(\"prototype\")) {{__iterator__ = <><x><y/></x></>, __proto__;return <x/>\t; }continue M; } else  if ((\nwindow.eval(({a2:z2})))) {if(<x/>) { if ([[]]) ;} else {continue ;( /x/g ); } }");
tryItOut("yield 1e4 >>> __parent__(*::*);");
tryItOut("if(<x><y/></x>) {return;gc() } else  if (<x><y/></x>) {export prop;return constructor; } else {undefined;break M; }");
tryItOut("/*infloop*/while(undefined)gc\n");
tryItOut("{} const __parent__;");
tryItOut("/*for..in*/M:for([prototype, __iterator__] = ( /x/  in function(id) { return id } :: <x><y/></x>) in <><bbb xmlns=\"[1,,]\"><x><y/></x><ccc:ddd>constructor</ccc:ddd></bbb></>.eval((prop(<><x><y/></x></>')))) {/*infloop*/for(*::*; __parent__; <x/>) {export *; } }");
tryItOut("with(([,,] .@ this.propertyIsEnumerable(\"__parent__\"))){constructor = <x><y/></x>, __proto__ = prototype; }");
tryItOut("/*infloop*/for(1e+81;  /x/g ; <y><z/></y>) break L;");
tryItOut("/*infloop*/L:for(var prop; ({a1:1}); (* == __parent__ =  /x/g .propertyIsEnumerable(\"true;\"))) {for(let y in [5,6,7,8]) gc() }");
tryItOut("/*infloop*/M:do 1.3 while(#0=[[,]]);");
tryItOut("with({prototype: <x><y/></x> >>= __proto__})return;");
tryItOut("if((<><xxx {__iterator__}={function ([y]) { }} /></>.throw(<xxx {prototype}={+((1e-81 for each (__noSuchMethod__ in  '' ))) &= __parent__ === null} /> ))) /*for..in*/for([constructor, prototype] = __proto__ in prototype) {(<x/>);; } else continue ;");
tryItOut("if( /* Comment */[] < (({}).hasOwnProperty).call(3/0, <><x><y/></x></>)) {{} { return @foo }  } else  if (0/0) {yield <x/>;gc() }\t");
tryItOut("/*infloop*/L:do L:with((([1,,] | undefined).\r__count__ = (<x><y/></x>())))/*infloop*/while('fafafa'.replace(/a/g, new Function)){break L; } while(__noSuchMethod__.__count__);");
tryItOut("/*infloop*/for(([15,16,17,18].some(/*\n*/Math.pow,  /x/ )); <><xxx>{prop}</xxx></>; <><x><y/></x></> ?  /x/g  : true) var __iterator__;");
tryItOut("/*infloop*/for(let prototype = (eval(\"yield;\", <><x><y/></x></>)).watch(\"__iterator__\", Function); undefined; #0=[(((p={}, (p.z = .2)()) for each (__count__ in this) for (__proto__ in *::*)const prototype = __count__;))]) M:with((true.unwatch(\"prototype\"))){return; }");
tryItOut("if((prototype = this for (prototype in true)).valueOf(\"number\")) { if ((__noSuchMethod__.([[]]))) {; }} else ");
tryItOut("__iterator__, prototypeexport *\n(<><x><y/></x></>);");
tryItOut("let(__proto__ = eval(window, [1].propertyIsEnumerable(\"__proto__\"))) { this.zzz.zzz;");
tryItOut("/*infloop*/M:for(var [, [({ __proto__: ({ prototype: __noSuchMethod__ }), __count__:  \"\" .prop }), , prototype]] = ( /* Comment */var __noSuchMethod__ = false); @foo; ( /x/  >>>=<x/>)) {export *;const __parent__ = prop; }");
tryItOut("<xxx {\f__iterator__}={this / <><x><y/></x></>} />\r.((('fafafa'.replace(/a/g, <y><z/></y>)) >>>=(<x/>(<x/>,  \"\" )).__proto__ = (<x><y/></x>.__count__ = this)))");
tryItOut("/*for..in*/for((new [z1])((({ __proto__: [__parent__, ], __proto__: [*::*, , __noSuchMethod__] }) = this.__defineSetter__(\"constructor\", \ffunction  prop () {  } ))) in ((new ((prototype = null).watch)([(<y><z/></y> == true)].some(<><x><y/></x></>)))([[]])))if(__parent__ =  '' ) export prototype; else  if (constructor = -3/0.constructor = *) return undefined;");
tryItOut("let __iterator__ = this, prototype\n");
tryItOut("if(@foo.__defineSetter__(\"constructor\", 'haha'.split)) {export __iterator__;throw undefined; } else  if ([z1,,] for (prototype in *::*)) ");
tryItOut("/*for..in*/L:for(let prop = *::* in true) {var __noSuchMethod__, constructor;return []; }\nwith(__noSuchMethod__){; }\n");
tryItOut("let __parent__");
tryItOut("try { with({}) { var prop, __iterator__ =  /x/ ; }  } finally { yield delete <x><y/></x>; } ");
tryItOut("if((#0=({prototype: window}))) { if (<x/>) {;export prototype\t; } else /*infloop*/for(<>yyy<!--yy--></>;  \"\" ; #1=[#1#]) {; }}");
tryItOut("L:while(((prototype)(window)) && 0)gc()");
tryItOut("let (__proto__) { with({prop: ( \"\" .*)}){yield; } }");
tryItOut("return;");
tryItOut("if(this) { if (try { var __iterator__; } finally { return #1=[#1#]; } .watch(\"prototype\", function(y) { yield y; return;; yield y; })) function () { yield; } } else M:if((uneval( /x/g )).__iterator__ = (<><x><y/></x></>)) {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __proto__: [] }) in <x/>) {export *;return; }");
tryItOut("{let(prototype) { var __count__ = this, constructor = [,,]; }");
tryItOut("if((__parent__ = __count__.constructor setter= [1,2,3,4].map.isPrototypeOf(function(id) { return id }))) { if ([[1]]) let (constructor) { L: {eval } } else {return 1e-81; }}");
tryItOut("L:while((([({ each: __count__, prototype: __iterator__ }), , , ] = ({ __count__: constructor }))) && 0){yield; }");
tryItOut("//h\nif([15,16,17,18].some( /x/g ,  /x/ )) {throw #3={a:#3#}; } else {window;var prototype, constructor = <><x><y/></x></>; }");
tryItOut("case (prototype = \r<y><z/></y>): export *;");
tryItOut("/*infloop*/while(__count__){var __iterator__ = <x><y/></x>; }");
tryItOut("/*infloop*/do throw <x/>; while(yield #1=[#1#].__defineSetter__(\"constructor\", /a/gi));");
tryItOut("if((({__parent__: undefined, __proto__ setter: [1] }))) window; else  if (delete <x/>) {return; } else {false; }");
tryItOut("if(<bbb xmlns=\"<x><y/></x>\">yyy</bbb>) { if (({__parent__: prototype -= this})) {/a/gireturn; } else {<x/>; }}");
tryItOut("{with(window)export __proto__; }");
tryItOut("let(__parent__, prop) { throw prototype;");
tryItOut("M:if((prop.__count__.@*.@*)) {({a2:z2})throw __parent__; } else  if (Date(@foo, window)) {{}return *; } else {gc }");
tryItOut("yield <x><y/></x>; const __iterator__;");
tryItOut("if(([1,2,3,4].slice)([1,,], <><x><y/></x></>)) {export __count__;case __parent__ = <x><y/></x>: break; case 9: gc() }\nfalse\n");
tryItOut("if((((0x99 >= @foo))(<y><z/></y>.hasOwnProperty(\"constructor\"), <x><y/></x>))) { if (constructor-=<y><z/></y>) if(__iterator__) {var __count__ = <x/>; } else  if (true) {;yield @foo; }} else let __count__;(<><x><y/></x></>);");
tryItOut("if(<><x><y/>\r</x></>) { if (<x><y/></x>) {const __parent__, __count__; }} else {export __count__; }");
tryItOut("/*for..in*/for(__iterator__ = ((this in <x/>).watch(\"__parent__\", Function)) in <><x><y/></x></> + false) {;; }");
tryItOut("if(new (function  __iterator__ (prototype, __iterator__) { return __noSuchMethod__ = null } )(this.__defineGetter__(\"constructor\", false), #0=({function::prototype:  /x/ }))) /*for..in*/for(var [__iterator__, __iterator__] = 3.141592653589793 in  '' ) let __count__, [[]] = <x><y/></x>; else  if (0/0) /*for..in*/for(const __proto__ = *::* in constructor) {;yield  /x/ ; }");
tryItOut("for(let y in []);");
tryItOut("export *;");
tryItOut("yield [11,12,13,14].map;");
tryItOut("{throw __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in arguments) __count__return  '' ;");
tryItOut("/*infloop*/for(((__noSuchMethod__+=this.__defineSetter__(\"constructor\", new Function))[3/0]); #1#; @foo &= 0/0()) {function (constructor, __parent__)constructorwith({}) (<y><z/></y>); }");
tryItOut("M:\tif(true) yield; else  if (window) {var function::prototype = 0.1;export *; } else (1 for (x in []))");
tryItOut("L:if((#1=[[15,16,17,18].some(gc, <x/>)])) {/*for..in*/M:for(__proto__ in (((-0))((prop))))window, function::__parent__ = *; } else {yield;/*for..in*/for(const __count__ = <><x><y/></x></>.__lookupSetter__(\"__proto__\") in <x><y/></x>) {return  '' ; } }");
tryItOut("this.zzz.zzz;");
tryItOut("with({constructor: .2})export x::__parent__;");
tryItOut("yield\n\nlet(__parent__ = 'fafafa'.replace(/a/g, 'haha'.split).eval(<x><y/></x>.valueOf(\"number\").@*)) ((function(){constructor = (prototype = true === prop = prototype), __noSuchMethod__ = <x><y/></x> .@x:: <><x><y/></x></>;})());");
tryItOut("/*infloop*/while( { return  /* Comment */ /x/  } ){/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/></x> |= <y><z/></y>) {}with({__proto__: (__proto__ = *::*.__defineSetter__(\"setter\", @foo))}){throw try { <><x><y/></x></> } finally { yield; } ;/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (-0)) {const __proto__ = this; } } }");
tryItOut("L:if(()) {}");
tryItOut("L:while((this) && 0){export prototype;* }\n");
tryItOut("L: {export *;<><x><y/></x></>; }");
tryItOut("return window\n");
tryItOut("/*infloop*/while(*)");
tryItOut("L:switch(*) { default: break; case (*)(({a2:z2})): switch(window) { default:  } }");
tryItOut("throw <><x><y/></x></>\nyield 033;");
tryItOut("with({}) { let(constructor) ((function(){__proto__ = __noSuchMethod__;})()); } ");
tryItOut("/*infloop*/for(const [__count__, prop, __iterator__, ] = 0.1; <x/>.hasOwnProperty(\"__count__\"); let (x::__count__, __iterator__ =  /x/ ) <x/>) { }");
tryItOut("/*infloop*/ if (((__proto__.watch(\"prototype\", ({}).__lookupGetter__) for each (__noSuchMethod__ in this) if ( '' ))))");
tryItOut("yield;\nyield <x><y/></x>;\n");
tryItOut("L: {const __parent__; }");
tryItOut("if((yield  /x/g )) { if (((({prop: __iterator__ })).__defineSetter__(\"__parent__\", <x/>))) gc()} else return; const __parent__;");
tryItOut("if((function  __parent__ (prop) { yield [,] } )((__count__%=window))) /*infloop*/do continue M; while(<>\f<x><y/></x></>);[1,2,3,4].map else {3/0continue ; }");
tryItOut("/*infloop*/do let(prop = 1e4) ((function(){yield;})()); while(__parent__);");
tryItOut("M:if((let (__count__ = <x><y/></x>) constructor.hasOwnProperty(\"__count__\")(new ([1,2,3,4].map)(({}).hasOwnProperty)))) return <y><z/></y>; else __count__;");
tryItOut("/*for..in*/for(const prototype = getter = 3 in __count__ = <x/>) {return <y><z/></y>;export get; }");
tryItOut("/*for..in*/for(let 1e4 %= (p={}, (p.z = 5.0000000000000000000000)())['prototype'] in ((  __noSuchMethod__ \r( <x><y/></x>__noSuchMethod__) { yield (false if (<x><y/></x>)) } )(new <x/>()))){continue L; }");
tryItOut("if(<><x><y/></x></>) {break ;gc() } else {const __parent__ = <><x><y/></x></>, __count__ = true; }");
tryItOut("/*for..in*/for(__parent__ in ((eval)(<x/> * <><x><y/></x></>.__lookupSetter__(\"__proto__\").hasOwnProperty(\"prototype\"))))if(null) yield undefined; else __proto__;");
tryItOut("L: {return <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__iterator__) in 0x99) {return __count__.__defineSetter__(\"__noSuchMethod__\", (new Function(\"return;\"))); }");
tryItOut("L:if(__noSuchMethod__.prototype = undefined) {break M;var __parent__, prop; } else  if (<y><z/></y> ^  /x/ ) {} else {with({constructor: (#1=[#1#])[ \"\" ]}){if(function::__iterator__) {(null); } else  if (true) {<><x><y/></x></>; } } }");
tryItOut("yield;");
tryItOut("export __iterator__;\nvar __proto__, __count__ =  /x/ ;\n");
tryItOut("/*infloop*/do {yield } while(__iterator__ = 'fafafa'.replace(/a/g, Function));");
tryItOut("with({constructor: (function(q) { return q; }(constructor.constructor getter=  /x/g ++, [15,16,17,18].filter([1,,], {})))}){export *; }");
tryItOut("/*for..in*/for(let __noSuchMethod__.prototype in @foo) gc()");
tryItOut("/*infloop*/do {(<><x><y/></x></>);{} } while(4..eval( \"\" ) ^= (this for (__noSuchMethod__ in @foo)));");
tryItOut("0.1");
tryItOut("let(prototype = ++<x><y/></x>) ((function(){prototype = __noSuchMethod__;})());");
tryItOut("L:with({prototype: (__count__ = (( \"\" )))}){return <x><y/></x>;return true; }");
