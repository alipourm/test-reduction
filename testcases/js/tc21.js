tryItOut("with({constructor: (delete -3/0)})if(null) { if (__proto__) export *;} else {yield [1];return this; }");
tryItOut("");
tryItOut("/*for..in*/for(let __iterator__ in (('haha'.split)(<><x><y/></x></>))){return;@foo; }");
tryItOut("(false)\n");
tryItOut("let (constructor, prototype = (new new Function(__proto__)).eval(((-0) != (0/0.eval(<{__noSuchMethod__}><!--yy--></{__noSuchMethod__}> ))))) { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) yield  /x/ ; }");
tryItOut("/*for..in*/for(__count__ in (__count__+=<x><y/></\nx>.(this))) L:if((uneval((yield <x><y/></x>)))) {var __noSuchMethod__ = window; }");
tryItOut("yield\nreturn <><x><y/></x></>;");
tryItOut("if(this.__defineSetter__(\"__parent__\", function (__iterator__)__count__)) /*infloop*/while(<y><z/></y>){const prop = -3/0, constructor;function () { return __count__ }  }");
tryItOut("let (__parent__) { yield; }");
tryItOut("");
tryItOut("/*infloop*/for(__noSuchMethod__; [[1]]; true) return function ([y]) { };");
tryItOut("if(<x/>) (<x><y/></x>);");
tryItOut("/*infloop*/M:do eval while(((typeof (__proto__ = [z1])).prop = <><bbb xmlns=\"[prototype, , __noSuchMethod__, , ] = (uneval(null))\"><{constructor}> </{constructor}>yyy</bbb></>));");
tryItOut("if(new Boolean(__count__: @foo %= #1# += (__noSuchMethod__)[undefined])) { if (false) yield  /x/g ;\n(this);\n else {return; }}");
tryItOut("return");
tryItOut("/*for..in*/for(__count__ = new this() in new let (__count__, prototype) prop((__proto__), 1e81)) /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in 1.3) {return <><x><y/></x></>; }L: yield;");
tryItOut("/*infloop*/for(let __parent__; (<x><y/></x>.__defineGetter__(\"constructor\", [1,2,3,4].map) >>> this.eval(<x><y/></x>))[this.__defineSetter__(\"prototype\", function  __iterator__ (__proto__, __noSuchMethod__) { return <x><y/></x> } )]; this.__defineGetter__(\"constructor\", (Function).call) + (<y><z/></y>).prop = (-1)) {export __noSuchMethod__; }");
tryItOut("/*infloop*/L:for((([1,2,3,4].slice).call(new (Function)().__lookupGetter__(\"__proto__\"), )); @foo; __iterator__ = __noSuchMethod__) /*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in  '' ) /*for..in*/for(__count__ in ((([1,,]).call)(<x/>)));");
tryItOut("/*infloop*/for(prop; __iterator__.unwatch(\"constructor\"); arguments) {undefined; }");
tryItOut("{if(3.hasOwnProperty(\"__iterator__\")) {throw undefined;throw <y><z/></y>; } else  if (eval(\" /x/ \", <x/>)) { } }");
tryItOut("export *\nM:with(new Number([,,z1], window))yield;");
tryItOut("let prop = this, prop = <y><z/></y>\n");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("yield <x/>");
tryItOut("/*for..in*/for(var __count__ in ((({}).hasOwnProperty)(__proto__).hasOwnProperty(\"prop\").unwatch(\"__iterator__\"))) {constructor = prop;const constructor = <><x><y/></x></>; }");
tryItOut("(-1)\n");
tryItOut("/*infloop*/for(constructor; prototype.(<y><z/></y>); new function  prop (__iterator__) { yield <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\") } (033 %=  /x/g , <employee id=\"1\"><name>Joe</name><age>20</age></employee>)) ;");
tryItOut("prototype.__noSuchMethod__\nif(new #1#()) {__parent__ = this, __iterator__; } else  if (<y><z/></y>) ;");
tryItOut("/*infloop*/M:for(const __count__; (<><x><y/></x>\t</> *= 3.141592653589793)\n; Boolean(throw <x/>; = *, <><x><y/></x></>)) {export *; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; new (Function)(#1=[#1#], prop); (prototype = 1.2e3)) {let prototype = 5.0000000000000000000000; }");
tryItOut("{/*for..in*/for(let (1e4)(@foo) in (((*::*(0.1, 4.)))(window)))throw <x/>;L:if((yield <>window <<= <x/></>)) yield __proto__ = <y><z/></y>; }");
tryItOut("return <x><y/></x>; const <x><y/></x>, __count__;");
tryItOut("{continue M;*; }");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = 3.141592653589793 in #1#) ((function ([y]) { })()).watch");
tryItOut("{export *; const __parent__;/*infloop*/do {export *;return; } while(@foo / __parent__); }");
tryItOut("with({__noSuchMethod__: [11,12,13,14].map})const __parent__;");
tryItOut("let(__proto__) ((function(){yield;})());");
tryItOut("switch((.__defineGetter__(\"prop\", ({}).__lookupGetter__))) { default: export getter\ncase 8: break;  }");
tryItOut("yield;\n6\n");
tryItOut("do {if(this.zzz.zzz) { if (__parent__) {break M; } else break ;}M:with( /x/ ){#1# } } while(((function  prototype (__noSuchMethod__) { return <y><z/></y> .. __proto__.hasOwnProperty(\"prop\") } )(function  prop () { yield new  \"\" ( '' , @foo) } )) && 0);");
tryItOut("yield undefined; const __iterator__\n/*infloop*/for(prop = 033; *::*; __parent__) {yield;break M; }");
tryItOut("switch(@foo === constructor) { case 5: gc()case 0: with(<y><z/></y>){let __parent__ = <x><y/></x>, __iterator__; }break;  }");
tryItOut("if(__noSuchMethod__) var __proto__ =  \"\" , #3={a:#3#};");
tryItOut("L:with( /* Comment */prop)export prop;");
tryItOut("L:while((void <x/>) && 0){try { gc() } catch(prototype if <><x><y/></x></>) { return; } constructorfinally { var prop = __count__, %; }  }if(null.__iterator__ ? __proto__ *= <x><y/></x> : (+0.1)) {(<><x><y/></x></>); } else  if (window(<x><y/></x>, <x/>)) __iterator__ =  '' ; else {<><x><y/></x></>;throw [,]; }");
tryItOut("{with(__parent__ = <><x><y/></x></>.unwatch(\"constructor\") >>> (({__proto__: 033,  get __parent__ __noSuchMethod__ (prop\f) { return <><x><y/></x></> }  })((__count__ =  /x/g ),  \"\" ))){export *;return prototype+=<x><y/></x>; } }");
tryItOut("if(([ /x/g ].filter(1e-81))) /*infloop*/M:for(var __count__ >>> prop; (((yield this))[((1.3)(this, [1]))]); ({ __proto__: __count__, prototype: __noSuchMethod__ }) = __noSuchMethod__.__noSuchMethod__ = @foo) {} else  if ((__proto__++ ? * @ //h\n<><x><y/></x></> : prototype) .@*:: String((function ([y]) { })()) ? (null.throw( \"\" )) : --<x><y/></x>) if(function(id) { return id } in this) { if ((constructor = __parent__))  else Math.sin} else {yield false;const __iterator__ = __count__; }M:with({prototype: <x><y/></x>}){*; }");
tryItOut("with(__parent__ += <x><y/></x>--)return;");
tryItOut("return;");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("yield (__iterator__ = <><x><y/></x></>( \"\" , __parent__)\f);");
tryItOut("if(+undefined) {\n }");
tryItOut("/*infloop*/do if((new window(__noSuchMethod__, (function ([y]) { })()))) {gc() } else return; while(window);");
tryItOut("throw StopIteration;");
tryItOut("{throw __noSuchMethod__;{} }");
tryItOut("do (let (prototype, __proto__) <x><y/></x>); while(((function ([y]) { })()) && 0);");
tryItOut("/*for..in*/for([prop, __iterator__] = [15,16,17,18].some(Math.pow, <x><y/></x>) in (<x><y/></x>)) L: ({a1:1});");
tryItOut("with(<><x><y/></x></>)with({constructor: this}){ }");
tryItOut("do gc() while((yield <x><y/></x>) && 0); const __proto__;");
tryItOut("/*infloop*/for(__iterator__ + <x><y/></x>; true @ 1e+81; this) /*infloop*/L:do {break L; } while(__parent__)\n/*infloop*/for((( \"\" .@*))(this ^  \"\" )//h\n = (__noSuchMethod__.prop =  /x/ ) for each (__iterator__ in <y><z/></y>); prop.constructor = <><x><y/></x></>.unwatch(\"constructor\"); [1,,].function::prop) {L: yield; }");
tryItOut("/*for..in*/for(var [__proto__, prop] = this >>> <><x><y/></x></> in this.__defineGetter__(\"prop\", function  prototype () { yield <><x><y/></x></> } )) gc()");
tryItOut("/*for..in*/for(prototype in ((function (__noSuchMethod__)(__count__ = function::__proto__) ? <y><z/></y> == @foo : (constructor = __parent__))(prop.((3 >> *::*))))){let (__count__ =  /x/ ) { gc() }if((function::prop = <x><y/></x>)) {{} } else  if (undefined) yield false; }");
tryItOut("return");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("if(__parent__ = prop) return *; else  if (this.__defineGetter__(\"__parent__\", (/a/gi).apply) ? <x/> : (( /x/g  for each (delete in true))) if (function ([y]) { })) {throw <x><y/></x>; } else if(function::prop) { } else gc()");
tryItOut("M:with(#1=[#1#])return [,];");
tryItOut("/*infloop*/for(let ({ __count__: __iterator__ }) = this.zzz.zzz; (Math.pow).call(this, <x/>, <><x><y/></x></>); ({ __proto__: __proto__, __noSuchMethod__: __proto__ }) = function ([y]) { }.__noSuchMethod__) {export constructor;{} }");
tryItOut("if(((__proto__)[[1,,]])) { if ((((1 for (x in [])))(window, @foo))) /*infloop*/while(<x/>){var x::__parent__, prop; }} else if(function(id) { return id }) let __iterator__ = <x><y/></x>, prototype = <><x><y/></x></>;");
tryItOut("switch((__parent__\n)) { case 0: while(((uneval(<x><y/></x>)) == <x><y/></x>) && 0){gc() }break; case *::* .@*:: <x/>: let prop = 1e4;break; default:  }");
tryItOut("let(__parent__) ((function(){{}})());");
tryItOut("throw *;yield");
tryItOut("let __iterator__; const __iterator__;");
tryItOut("try { return ) ( /x/ ).call; } catch(__count__ if (({ get __proto__ prototype () { return 0 < @foo } , __parent__ setter: [1,2,3,4].slice }))['prototype']-=__noSuchMethod__ in true === <y><z/></y>) { yield ({ __iterator__: __proto__ }) = (this.__defineGetter__(\"__iterator__\", (<><x><y/></x></>).__defineSetter__)); } ");
tryItOut("return true.watch(\"constructor\", default: break; case [<><x><y/></x></> for each (prop in .2)]: ).__defineSetter__(\"__proto__\", 'haha'.split).*;( \"\" ).watch\n");
tryItOut("if( /x/ ) {{}gc() }");
tryItOut("with((*.eval(this))){ }");
tryItOut("export constructor;");
tryItOut("throw StopIteration");
tryItOut("switch(__iterator__ = [((null)())]) { case ({__iterator__ setter: eval,  set __proto__ __proto__ () { {} }  }) .@*:: #3={a:#3#}: do let __iterator__, prototype = <x><y/></x>; while(((this\n)) && 0);default: break; break;  }");
tryItOut("L: let prototype = <><x><y/></x></>;");
tryItOut("/*infloop*/L:for(var [({ prototype: [[__parent__, ({ __proto__: this['__parent__'], __noSuchMethod__: ({ __iterator__: ({ constructor: __parent__ }) }) }), __iterator__, ], [, [({ __count__: ({ prototype: __iterator__ }) })]]], __proto__: ({ __iterator__: __proto__ }) }), ({ prototype: __parent__ }), , , ] = constructor.prop ,  /x/ .__defineGetter__(\"__count__\", (prototype).watch); __iterator__.__noSuchMethod__ = void (-1.__lookupGetter__(\"constructor\")); (new Number()).eval((yield false).isPrototypeOf( /* Comment */false))) {return;yield arguments; }");
tryItOut("{<x><y/></x>;return window;throw null; }");
tryItOut("M:while((<><x><y/></x></>) && 0)gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.__parent__ in \nnew __parent__()(this)) throw __iterator__;");
tryItOut("L:while((((function  <y><z/></y> (constructor, __proto__\f) { yield (<x><y/></x>.isPrototypeOf(*)) } )(<y><z/></y>)) ^= ({ __noSuchMethod__: ({ function::prop: prop, prop:  ''  }), __noSuchMethod__: __parent__ }) = ) && 0)try { export x::prototype; } catch(prototype) { export *; } finally { function (__count__, __count__) { break M; }  } ");
tryItOut("/*infloop*/for(({ x::0.1: ({ prop: prop }) }) = ({ constructor: ({ __count__: __proto__, function::__parent__: ({ prop: __parent__, prop: __noSuchMethod__ }\t) }) }); ((__noSuchMethod__.__count__ getter= function(y) { yield y; break M;; yield y; }))(<y><z/></y>.__defineGetter__(\"function::__iterator__\", Math.sin)); ( /x/  * __parent__)) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype = <><x><y/></x></>.prototype in yield 3.141592653589793) {@foo;__noSuchMethod__ }");
tryItOut("if(('fafafa'.replace(/a/g, (new Function(\"{}\"))) >> <x/>)) const __noSuchMethod__; else  if (function(y) { yield y; {let __iterator__, __count__; }; yield y; }(try { gc() } catch(__iterator__ if (function(){;})()) { (__parent__); } catch(__noSuchMethod__ if  \"\" .eval(#3={a:#3#})) { prototype = *, prototype } catch(__iterator__ if window) { yield; } )) {L:if(0x99) (undefined); else  if ( /x/g ) {( /x/ );return; } } else prototype = this, prototype = <y><z/></y>;");
tryItOut("M:if(([[]].@foo).__lookupSetter__(\"__noSuchMethod__\")) __count__, prototype =  '' ; else  if ([1,2,3,4].slice([((function ([y]) { })().yoyo(<x><y/></x>))], eval(\"(-1)\", <><x><y/></x></>))) {/*infloop*/do yield __iterator__; while(<><x><y/></x></>); } else /*for..in*/L:for(var [__proto__, prop] = <><x><y/></x></> in this) export *");
tryItOut("for(let y in []);");
tryItOut("{__noSuchMethod__;gc() } const __proto__;\n\nif((__count__ = __iterator__)) {const __proto__ = 0x99;((/a/gi).apply).apply } else  if ( /x/g .__defineSetter__(\"function::__parent__\", eval)) ;\n");
tryItOut("return;");
tryItOut("with(<y><z/></y>)gc()");
tryItOut("if(<x/> <= this) break L; else  const __parent__;");
tryItOut("/*for..in*/for(let x::constructor in (((<y><z/></y>).watch)((-0))))yield <x><y/></x>;");
tryItOut("/*infloop*/for((Function()); (prototype.prototype getter= undefined)(); ((({__proto__: 0.1})).@*)) [1,2,3,4].map");
tryItOut("/*infloop*/for(let __proto__; prop = ({ constructor: ({ throw this;\t: __parent__ }) }); __parent__ = <x><y/></x> && (uneval(window))) {continue ; }");
tryItOut("L: {var __iterator__, __proto__;\nlet __proto__ = <x/>;\n }");
tryItOut("M:if(this) { if ([1,,]) const constructor =  '' , constructor = this; else {throw __noSuchMethod__;let: <y><z/></y> }}");
tryItOut("L: {if(({({ __parent__: 1e+81['__noSuchMethod__'], __iterator__: ({ __count__: __iterator__, __iterator__: ({ prop: __proto__ }) }) }): <xxx>{prototype}</xxx> })) {/*for..in*/for(let [function::__proto__, __proto__] = * in undefined) break M;; } else  if ((<x><y/></x>.@foo)) export *;/*for..in*/for(let __proto__ =  in prop) switch(@foo) { case <x/>: *::*break;  } }");
tryItOut("/*for..in*/for(var __parent__ = 'fafafa'.replace(/a/g, Function) in false.unwatch(\"__count__\").isPrototypeOf(constructor = __noSuchMethod__)) {export *;yield; }");
tryItOut("yield;");
tryItOut("try { ; } finally { throw window; } ");
tryItOut("{}");
tryItOut("/*for..in*/L:for(let getter: ({__noSuchMethod__: ({})}) in ((Math.sin)((-0.__defineGetter__(\"__proto__\", ( /x/ ).__defineSetter__)) .@x:: ((yield 1e81))))){/*infloop*/for(var __parent__; this.__defineSetter__(\"__noSuchMethod__\", (@foo).watch); new function (__parent__) { export prototype; } ()) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in @foo) {eval }while((<><x><y/></x></>) && 0)let prototype =  /x/g , __count__ = {}; }yield; }");
tryItOut("");
tryItOut("\f{return <><x><y/></x></>;return; }\nprototype = <x><y/></x>, prop;");
tryItOut("\n");
tryItOut("switch(constructor = __noSuchMethod__) { case 1: case [new Error() for (__iterator__ in 0.1) for each (__noSuchMethod__ in -0)]: /*for..in*/M:for(const constructor = __iterator__ = <><x><y/></x></> in this) {throw 3.141592653589793; }default: break; case 9: {}break; case 4: throw #1#;break; break; case 3: __iterator__; }");
tryItOut("/*infloop*/for(const __proto__; __parent__.([(prop = 1.2e3) *= <><x><y/></x></>.watch(\"__proto__\", ( \"\" ).watch)]); prototype\t) /*infloop*/for(constructor; 3 ^=  /x/g ; constructor = *::*) yield this;");
tryItOut("L:if(<>delete \n /x/ </>.(\n(__proto__ = <x><y/></x>))) { if \f(window.__iterator__ = prop.prototype = <><x><y/></x></>) if(((<x><y/></x>).watch).call(<x/>,  \"\" )) const prototype; else  if (__parent__ = __iterator__) {; }} else throw undefined;");
tryItOut("let (__parent__ = __proto__.__noSuchMethod__ getter= [1,2,3,4].map, setter = [[,,] for (__count__ in 1.2e3)]) { if(0/0 .@*:: 4.) {function () { export *; } export *; } else {yield {};throw  /x/ ; } }");
tryItOut("if(this) {<><x><y/></x></>;{} } else  if (#3={a:#3#}(})) var \t__count__ = 1e-81;");
tryItOut("let (__count__) { let(({ constructor: __parent__ })) ((function(){with({}) { return <><x><y/></x></>; } })()); }");
tryItOut("/*infloop*/do <bbb xmlns=\"window\"> </bbb> while(0x99);");
tryItOut("{/*infloop*/for(const __parent__ =  '' ; <y><z/></y>; *) {; } }");
tryItOut("do {for(let y in [5,6,7,8]) __iterator__ = constructor; } while((new prototype.prototype = <y><z/></y>((eval(\"__proto__\", this)), <x><y/></x>).throw((__proto__ = <><x><y/></x></> -= ((yield 3))))) && 0);");
tryItOut("/*infloop*/while((new Iterator(prop = -3/0,  /x/g ))){gc()/*for..in*//* nogeckoex bug 349964 */ for  each(let function::prototype\f in <><x><y/></x></>) {return;L:with(undefined){var __noSuchMethod__;__iterator__ = this; } } }");
tryItOut("if(({ __iterator__: [, __noSuchMethod__, ({ prop: constructor, constructor: 4. })] }) =  /x/ .throw(yield <x><y/></x>;)) (<y><z/></y>); else export *;");
tryItOut("try { this.zzz.zzz; } catch(__count__) { prop = __count__; } ");
tryItOut("if([11,12,13,14].some) ; else  if (__parent__.__noSuchMethod__ setter= (__iterator__).watch) ;");
tryItOut("if(\t((( /x/g )[__count__]) for (__iterator__ in window.*) for (1e81 in ((<x><y/></x> for (__noSuchMethod__ in window)))) for each (__count__ in undefined))) {/*for..in*/M:for(const [__iterator__, prototype] =  /* Comment */<x><y/></x> in undefined) {(0.1); } } else  if ( /x/g ) var prop, __parent__;");
tryItOut("gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in .__count__ = (<y><z/></y> >>= true)) {{}if((uneval(@foo))) return <><x><y/>\t</x></\f>; else  if (<><x><y/></x></>) {export each;gc() } else continue L; }");
tryItOut("let (__iterator__) { __count__;\n<x/>{}\n }");
tryItOut("with(__proto__ = 3 !== function  __noSuchMethod__ (prototype, __noSuchMethod__)1e81){/*for..in*//*\n*/M:for(const __noSuchMethod__ in window) const __noSuchMethod__ = false, __iterator__ = null;/*for..in*/M:for([prop, __count__] = \n<y><z/></y> in  /x/g ) <y><z/></y>; }");
tryItOut(";return;");
tryItOut("M:if(this) const prototype, constructor; else  if (constructor) return  /x/ ;");
tryItOut("yield undefined");
tryItOut("return;\n\t__parent__, __noSuchMethod__ = <><x><y/></x></>;\n");
tryItOut("if(this.throw(prototype)) {gc()export *; } else  if (3/0) export __count__;");
tryItOut("if(__iterator__.__count__ setter= [1,2,3,4].map) { if (<y><z/></y>) {/*\n*/(0x99);let (__count__ = ( \"\" ).__defineSetter__(\"__count__\", <><x><y/></x></>), ({ __noSuchMethod__: __noSuchMethod__ })) { throw <x/>; } } else {default: {}break; case prop: break;  }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) {({ constructor: prop }) }");
tryItOut("/*for..in*/for(const __parent__ in <zzz><><x><y/></x></></zzz>) switch(this.__defineSetter__(\"prop\", __proto__)) { case 8: /*for..in*/for(__parent__ in (((1 for (x in [])))(1e4))){yield null;export *; }prop =  /x/g , prop = <><x><y/></x></>;break; default: case window: constructor, __proto__; }");
tryItOut("/*infloop*/for(__proto__; function  prop (__count__) { yield ( '' .eval( \"\" )) << __proto__.watch(\"constructor\", [1,2,3,4].map) } ;  /x/g ) /*infloop*/while(this){throw true;<><x><y/></x></>; }");
tryItOut("let(__parent__ = false) { let(prop = <><x><y/></x></>, __noSuchMethod__ = <x/>) ((function(){{}})());");
tryItOut("/*infloop*/for(var prototype = this;  /x/g ; <x/>) ;");
tryItOut("/*for..in*/for(const __proto__ = let (__noSuchMethod__, __proto__) new (<x/>)(<x/>, <><x><y/></x></>) in <x/>) {L: export prototype;const prop, prop; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("{var __parent__; }");
tryItOut("/*infloop*/do yyy while([[1]]);");
tryItOut("while((__iterator__.(this)) && 0)throw this;\t");
tryItOut("/*for..in*/for(var prop in prop) let constructor;");
tryItOut("/*infloop*/for((yield [({__proto__: __count__ *= <x/>, yield; })]); this.__defineSetter__(\"__proto__\", ((<x/>.valueOf(\"number\"))).watch) >> ((__count__ = (@foo)) += __count__); (Math.pow)) {{yield <><x><y/></x\t></> .@*:: window; } }");
tryItOut("switch( /x/g  !== <><x><y/></x></>) { case #2=<x><y/></x>: return;break;  }\n");
tryItOut("let __iterator__ = 0/0;");
tryItOut("L: (<><x><y/></x></>)");
tryItOut("/*infloop*/L:for(const prop; ({ constructor = ((<x><y/></x>.(<><x><y/></x></>)).propertyIsEnumerable(\"constructor\")): prototype, prototype: ({ __iterator__: prop, constructor: __count__ }) }) = []; *.@foo) {gc(){} }");
tryItOut("switch( \"\"  &= <y><z/></y>) { default: /*infloop*/for(const __parent__ = __noSuchMethod__; <><x><y/></x></>; prototype) {gc()( '' ); }break;  }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (new <><x><y/></x></>().valueOf(\"number\")).prototype in  /* Comment */<y><z/></y>.unwatch(\"__parent__\")) {__iterator__ = __parent__; }");
tryItOut("prop;");
tryItOut("/*infloop*/while((@foo(__parent__, @foo)))yield;");
tryItOut("/*for..in*/for(const [prop, function::prototype] = <><x><y/></x></> in this) gc()");
tryItOut("/*infloop*/for(<y><z/></y>.watch(\"__parent__\", this); ([1,2,3,4].slice).call(*, ); <x/>.@foo) 'haha'.split");
tryItOut("L: {const __count__, __parent__ =  /x/g ;; }");
tryItOut("if(<x/>) gc() else export *;/*infloop*/for(({a2:z2}); __count__; #1#) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const ({ __noSuchMethod__: prop, __parent__: __noSuchMethod__ }) in <x/>) {;gc() }");
tryItOut("/*infloop*/M:for(0; (false.__lookupGetter__(\"prop\")); Object(@foo.@foo, __iterator__)) true;");
tryItOut("/*infloop*/do Function while([undefined].sort((<><x><y/></x></>).__defineSetter__));");
tryItOut("return (eval(\"new ( \\\"\\\" )(*::*)\", prop, constructor.eval(function ([y]) { })));");
tryItOut("let(__proto__ = (-1), constructor) { new Function");
tryItOut("yield (<x/> > @foo)[((0.1[null])[eval(\"<><x><y/></x></>\", 033)])];");
tryItOut("let (({ prototype: constructor, __noSuchMethod__: ({ __proto__: __iterator__ }) }) = (yield *::*), constructor) { for(let y in []); }");
tryItOut("/*infloop*/for(constructor; (Function());  for (prop in constructor) = __iterator__) {if(<y><z/></y> && <><x><y/></x></>) __proto__ = [z1] else  if (<x/>) return;({}).hasOwnProperty }");
tryItOut("__noSuchMethod__ = window, __proto__;");
tryItOut("M:if( /x/ ) <><x><y/></x></>; else {function(y) { yield y; gc; yield y; }(<x><y/></x>, <y><z/></y>);while((*::*++ > *::*(__iterator__)) && 0){__parent__ = <y><z/></y>; } }");
tryItOut("/*for..in*/for(__noSuchMethod__ in --undefined(<y><z/></y>, true)) {gc()\n/*for..in*/for(__count__ =  /x/  in 3.141592653589793 -= undefined) {prop;throw <x><y/></x>; } }");
tryItOut("");
tryItOut("switch( /x/ ) { default: export prototype;break; case <y><z/></y>.isPrototypeOf(null): break; case new (1e4)(<y><z/></y>): {return; }case 5: throw <><x><y/></x></>;break; case __count__ = __parent__:  }");
tryItOut("if(<x><y/></x> >>>  \"\" ) return *::*;");
tryItOut("L: {let ; }\nbreak ;");
tryItOut("/*infloop*/M:for(var __proto__; (__parent__.constructor+=(new Function(\"yield;\"))(*,  /x/g ).eval(({ set __noSuchMethod__ __proto__ () { yield [*::*.isPrototypeOf(window)].map([1,2,3,4].slice) }  }))); ()) {L:with(prop)continue ;{} }");
tryItOut("{throw window; }");
tryItOut("/*for..in*/for(var prototype = __count__ in window) {continue ;const prototype = <x/>; }");
tryItOut("throw (__count__);");
tryItOut("with({}) { for(let y in [5,6,7,8]) throw StopIteration; } ");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(var prop = [([__count__ = new (<x><y/></x>)(<x><y/></x>, <><x><y/></x></>)]) += (constructor =  /x/ [__parent__.__noSuchMethod__ = __proto__.prop])].filter('haha'.split) in new (<x><y/></x>)()) return\n");
tryItOut("let (prototype = window.yoyo(prototype), constructor) { return; }");
tryItOut("let(__count__ = true) { (<x><y/></x>); /*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in *::*) {}");
tryItOut("/*infloop*/M:for(let ({ __count__: __noSuchMethod__ }) = (false ? <y><z/></y> : #1=[#1#]); __proto__ = [,,] ? ((<><x><y/></x></>)[true]) : __parent__ = #3={a:#3#}; eval(\"<y><z/></y>\", [,,])) ");
tryItOut("for(let y in []);");
tryItOut("if((1e81 for (__count__ in __count__) .@x:: ({a1:1}))) {gc() } else let __parent__ = (function ([y]) { })(), __parent__ = <><x><y/></x></>;");
tryItOut("/*for..in*/M:\rfor(let [prop, __noSuchMethod__] = (null ? <x/> : arguments.hasOwnProperty(\"__count__\"))++ in prototype--) /*infloop*/for(let ({ prototype: ({ prop: prototype }) }) = ((__parent__-=(function ([y]) { })()).hasOwnProperty(\"__noSuchMethod__\")); ( \"\" .__count__); ( \"\" .@* ? Boolean((eval(\"with({__parent__: 1.3})return <><x><y/></x></>;\", constructor|=<><x><y/></x></>)(@foo = undefined))) : 'fafafa'.replace(/a/g, ({}).__lookupGetter__))) L:if((function (__proto__, __parent__) { yield <x><y/></x> } )()) {var __count__, prototype;(arguments); } else  if (__iterator__ = <y><z/></y>) {yield true;(<><x><y/></x></>).watch } else {var __noSuchMethod__, function::constructor = constructor;constructor }");
tryItOut("/*infloop*/L:while(({__count__ setter: (#3={a:#3#}\n) })){{}{} }");
tryItOut("/*infloop*/do /*for..in*/L:for(__iterator__ = ((yield *) + false) in -1 ^ <y><z/></y>) {const __parent__, prop = this;{throw <y><z/></y>;return __proto__; } } while((this.__defineSetter__(\"prop\", Math.sin) == *::*));");
tryItOut("{[, ], __noSuchMethod__ = <x/>; }");
tryItOut("<><x><y/></x></>;");
tryItOut("switch(this.__defineGetter__(\"__parent__\", eval)) { case __iterator__ = this.hasOwnProperty(\"__iterator__\"):  }");
tryItOut("if(@foo) { if (undefined) {let __noSuchMethod__, __iterator__;function(q) { return q; } } else (undefined);}");
tryItOut("if(( /x/ .__defineSetter__(\"constructor\", (new Function(\"gc()\"))).constructor = (__parent__ ? <><x><y/></x></> : [1]))) throw function(id) { return id }; else  if (prop = 0x99) {export *; } else {}");
tryItOut("if(<x><y/></x>) {return try { (({}).hasOwnProperty).apply } catch(__noSuchMethod__ if (function(){yield <><x><y/></x></>;})()) { return; } ; } else  if (1e81) export __iterator__; else const constructor;__parent__ = <x/>, get; const prop;");
tryItOut("/*infloop*/while(<y><z/></y>.__defineSetter__(\"__proto__\",  /x/ )){throw null;(new Function(\"x::constructor;\")) }");
tryItOut("({ __noSuchMethod__: ({ __parent__: constructor }) })(0x99); const prop;");
tryItOut("{L:if(false) return __count__; else {({}).hasOwnProperty }throw undefined; }");
tryItOut("{export __parent__;export *; }");
tryItOut("<x><y/></x>;");
tryItOut("if(__iterator__.__proto__) { }");
tryItOut("M:\tdo ; while(((/a/gi)(<x><y/></x>, __proto__)) && 0); const __proto__;");
tryItOut("/*for..in*/for(__parent__ in ((({}).__lookupGetter__)(<><x><y/></x></>)))yield <><x><y/></x></>;");
tryItOut("L:do {(#1=<!--yy-->);export *; } while(( \"\" .*) && 0);");
