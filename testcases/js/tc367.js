tryItOut("L: {}");
tryItOut("/*infloop*/for(const __count__; (<><x><y/></x>\f</> for (__noSuchMethod__ in <x/>)); (eval(\"false\", true) * (\n<x><y/></x>))) {export __count__; }");
tryItOut("prototype = __count__;");
tryItOut("if(true) { if ([] = (<x><y/></x>.([z1]))) export *; else {break L;gc() }}");
tryItOut("/*for..in*/for(__iterator__ = ((<><x><y/></x><//h\n/>)()) in [z1] ? *::* :  \"\" ++) {yield; }");
tryItOut("/*for..in*/for(const __proto__ in true > 1e+81) const prop;");
tryItOut("/*infloop*/do  while(this);");
tryItOut("let(constructor) ((function(){({ __noSuchMethod__: __iterator__, __noSuchMethod__: [] })})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [__iterator__, ({ prop: prototype, prop: __proto__ }), , prototype] in new ( '' )().__defineGetter__(\"prototype\", 'haha'.split)) throw true;");
tryItOut("M:if(@foo) {M:if(0x99) {;yield; } else  if (false) gc() }\n else  if ((true >= false) % let (prop = __noSuchMethod__) <y><z/></y>.throw((window.throw(<x><y/></x>)) = arguments for each (__proto__ in true))) {/*infloop*/L:do @foo; while(null.__parent__); }");
tryItOut("switch(({ get __noSuchMethod__() { (function::prototype); } ,  set constructor __count__ ()prop = <x/> })) { default: break; if((((({}).__lookupGetter__)(<><x><y/></x></>, *::*)) :: constructor = <y><z/></y> << constructor.valueOf(\"number\"))) const prop =  /x/ ;break; case 1: try { with({}) { export __parent__; }  } catch(__parent__) { <x><y/></x> = constructor; } finally { try { gc() } catch(__noSuchMethod__ if (function(){__iterator__, prop;})()) { var __count__ = <x/>, __count__ = #3={a:#3#}; } finally { [1,2,3,4].map }  } break; case 4: case (new ( '' )(this)): yield (-0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in prop) if(((function () { const prop, __noSuchMethod__ = <x><y/></x>; } )())) {let prop;return; }");
tryItOut("L: {({}); }");
tryItOut("M:if() {/*for..in*/for(let prop = true in <x><y/></x>) {continue ;throw <y><z/></y>; } } else  if ((prop = new {}(constructor)\n)) {<x><y/></x>;\nyield;\n }");
tryItOut("if(new Function(<x><y/></x>, undefined)\n) {with(<><x><y/></x><\t/>);M:if(new String(window)) {(<><x><y/></x></>);__count__, __parent__ } else  if (\tnew (<y><z/></y>)(false, *::*)) {gc() } else {gc()throw  '' ; } } else  if (('fafafa'.replace(/a/g, function  __count__ ()<x><y/></x>))) {yield __parent__ = <x><y/></x>.__proto__ =  \"\" .constructor; } else {this.zzz.zzz;yield; }");
tryItOut("return;");
tryItOut("if((undefined.__lookupGetter__(\"__noSuchMethod__\"))) {*;/a/gi }");
tryItOut("switch([prop].some(function(y) { yield y; return;; yield y; })) { case 1: case 6:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in 'fafafa'.replace(/a/g, Function)) { }");
tryItOut("throw (__parent__);");
tryItOut("/*infloop*/do \t; while(eval(\"1e+81.__lookupGetter__(\\\"prototype\\\")\", this));");
tryItOut("if(gc) { if (('fafafa'.replace(/a/g, function(q) { return q; })) in __count__ = * ?  \"\"  : <x><y/></x>)  else {return;yield -1; }}");
tryItOut("{return;constructor, prop; }");
tryItOut("/*for..in*/for(var [] in (((new Function(\"(prototype);\"))/*\n*/)(let __noSuchMethod__, constructor = 3)))__parent__ = [1,,], prototype;");
tryItOut("this =  /x/ ;");
tryItOut("/*infloop*/for(this.__defineSetter__(\"__count__\", function(y) { yield y; yield;; yield y; });  /x/  ^ <x/>; <x><y/></x>(this)) {return;var __count__; }");
tryItOut("/*infloop*/while(new (( /* Comment */1e81).valueOf(\"number\"))())");
tryItOut("{export constructor\n }");
tryItOut("this.zzz.zzz;");
tryItOut("yield (new ((new Function(\"return;\"))).apply( '' , function(id) { return id }));");
tryItOut("__noSuchMethod__; const __iterator__;");
tryItOut("switch(<x/>) { default:  }");
tryItOut("/*infloop*/for(const __count__ = __proto__.*; __parent__.prototype = ({__iterator__: null,  set __proto__ constructor () { yield true }  }); typeof <x><y/></x>.yoyo( /x/ ).@foo) {/*infloop*/for(\r__parent__ = new (@foo)(window) ? __iterator__.unwatch(\"__count__\") : (gc).call(window, <x><y/></x>, ({a2:z2})); (yield  /* Comment */ /x/ )\t; __iterator__ = __proto__) let __count__ = [[]];L:if(undefined) { if (new (eval(\"<y><z/></y>\",  /x/g ))([[]],  '' )) yield; else Function} }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if([<x><y/></x>]['constructor'] = __iterator__.prototype.__defineGetter__(\"prop\", (1 for (x in [])))) /*for..in*/for(let constructor in @foo) {let constructor = <><x><y/></x></>, __noSuchMethod__;yield; } else  if ((new  ''  .@ *.__lookupGetter__(\"__parent__\")()))  else gc()");
tryItOut("/*infloop*/do {throw [,,]; const __proto__; } while(@foo);");
tryItOut("/*for..in*/for(__parent__ = (yield <x><y/></x>.isPrototypeOf(<><x><y/></x></>)) in prop.__proto__ getter= function (prop, __count__) { const prototype; } ) {(__proto__); }");
tryItOut("/*infloop*/do let __noSuchMethod__; while((yield ({__proto__: yield  ''  })));");
tryItOut("/*infloop*/while(((new ({a1:1})((((function ([y]) { })())(<x><y/></x>, @foo))).__defineGetter__(\"prop\", function  __count__ (__proto__, __proto__) { yield; } )).throw(null).__iterator__))/*infloop*/while(5.0000000000000000000000)__parent__ = this;");
tryItOut("L:with({__parent__: \n<x/>})");
tryItOut("/*for..in*/M:for([constructor, __count__] = function  __parent__ () { return constructor }  in <><x><y/></x></>) {{}export *; }");
tryItOut("if(-constructor) {; } else  if ((((Math.pow).call(<><x><y/></x></>, <y><z/></y>, window)))() >= function (__proto__, __proto__)this(<x><y/></x>)) {return undefined;yield; } else {L:if(__iterator__) { if (this) gc() else yield <><x><y/></x></>;} }");
tryItOut("with({__iterator__: (#0=<y><z/></y>.eval((-0)) ? eval(\"return -0;\", (let (__iterator__ = return x::__noSuchMethod__;, __proto__) <y><z/></y>)), eval(\"{}\", (undefined && this)) : new Object(this, this))}){; }");
tryItOut("M:if(++<><x><y/></x></>) const prototype, __proto__ else  if (this.__defineSetter__(\"__parent__\", gc) !== prototype = [11,12,13,14].sort.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty).__noSuchMethod__ = ({__parent__: ({__iterator__: [z1,,] })})) /*for..in*/for(const __parent__ in ((Math.pow)(function ([y]) { } ^ <x/>)))throw <x><y/></x>; else if((-3/0 = #1=[#1#].hasOwnProperty(\"constructor\"))) {export __iterator__; } else  if (new String(this)) break L; else {export *; }");
tryItOut("/*infloop*/while(z)/*infloop*/M:for(var [, [[, __iterator__, ~, __parent__, ], [__parent__, , ], ], __noSuchMethod__, ] = __parent__; __proto__.prototype getter= Function; (\tvoid prop = <><x><y/></x></>)) ({}).hasOwnProperty const __count__;");
tryItOut("let ([], yield) { M:if(new Object( /x/ , undefined)) {__parent__, prop = <y><z/></y>;return; } }");
tryItOut("yield;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((window)(eval(\"gc()\", <><x><y/></x></>))))return;");
tryItOut("{continue M;return <y><z/></y>; }");
tryItOut("prop");
tryItOut("export *;");
tryItOut("with(#3={a:#3#} ? <x/> : this)if(<x><y/></x>) { if (<><x><y/></x></>) {gc()throw false; } else yield;}");
tryItOut("if(<y><z/></y>) { if (3) export *;} else {var __parent__ = <><x><y/></x></>, set; }");
tryItOut("/*infloop*/for(__iterator__.__noSuchMethod__ =  /x/g ; prop( /x/ ) = (<><x><y/></x></>)();  \"\"  >> <><x><y/></x></>.@foo) {}");
tryItOut("L:if(({a1:1})) while((<><x><y/></x></>) && 0){export __parent__; } else  if () {/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in null) {const prototype = -0, __count__ = <><x><y/></x></>; } }");
tryItOut("M:switch(__proto__.__noSuchMethod__ setter= function (__proto__) { throw  /x/ ; }  >>> this(__count__ = __count__, [ /x/  for each (prototype in prototype)])) { case 2: break;  }");
tryItOut("if(this.zzz.zzz) {/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in <x><y/></x>) const __proto__; } else  if (({ set function::__parent__(constructor, constructor) { with({__parent__: *}){; } }  })) if(__noSuchMethod__) { if (<x><y/></x>) {break L; /x/g  } else {;gc() }} else with({N: <><x><y/></x></> !=  /x/g })yield;");
tryItOut("/*infloop*/while(this)false;");
tryItOut("if(<><>__iterator__</></>) /*infloop*/while((({ get constructor prototype (__proto__, __parent__)window, __iterator__: <x><y/></x> })))({a1:1});");
tryItOut(" \nconst __parent__ = <><x><y/></x></>, prototype;");
tryItOut("__noSuchMethod__ = each;");
tryItOut("if([15,16,17,18].map(gc, ({}))) ;");
tryItOut("with({__iterator__: (__proto__.constructor = [])}){;gc() }");
tryItOut("{/*for..in*/L:for(constructor in (((new Function(\"export __parent__;\")))(<x><y/></x>))){export *; } }");
tryItOut("if(new ((<x><y/></x>)[__proto__])(((uneval([,,]))).__defineSetter__(\"__noSuchMethod__\", Function), true in <x><y/></x>)) { if ((function(id) { return id }.yoyo(false))) {return #1#;gc() }} else /*infloop*/for(__noSuchMethod__; 1e4; this) {gc() }");
tryItOut("{yield;yield; } const *['prop'];");
tryItOut("this.zzz.zzz;");
tryItOut("throw prop;");
tryItOut("let(prop, __proto__) ((function(){let(__parent__) ((function(){yield true;})());})());");
tryItOut("if(__iterator__ = prototype) (__proto__); else  if (<bbb xmlns=\"(-1)\"> </bbb>.(new RegExp(<><x><y/></x></>))) {<x/>; } else {*::*;; }");
tryItOut(" for each (8 in prototype = (function::__iterator__+=[z1,,]))");
tryItOut("switch(<y><z/></y>) { default: break;  }");
tryItOut("/*for..in*/for(const constructor = #0=[this] in __iterator__) {(@foo); }\nwith( '' )throw 3;");
tryItOut("with(( = <x><y/></x> | (\n__noSuchMethod__)))<xxx>{constructor}</xxx>");
tryItOut("L:with([11,12,13,14].map\f){undefined; }");
tryItOut("if(<><x><y/></x></>(*::*)) throw __count__; else  if ([15,16,17,18].some(Math.sin, <x/>)) {export *; }");
tryItOut("/*infloop*/for(let __proto__; (yield this.__defineGetter__(\"__count__\", [1,2,3,4].slice)); this.__defineSetter__(\"constructor\", Function)) break ;");
tryItOut("(constructor).__defineSetter__\nyield window;");
tryItOut("/*for..in*/M:for/*\n*/(var __count__ = (p={}, (p.z = 1e+81)()) in (__iterator__.__proto__ getter= undefined)) {let (prototype, constructor) { ; }/*for..in*/for(let prototype =  /x/g  in <><x><y/></x></>) {{} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__ in this) {continue M; }");
tryItOut("if( /x/g ) {yield __proto__;{} } else  if (<><x><y/></x></>) yield this; else window");
tryItOut("export *\n(1e4);");
tryItOut("{(true); }");
tryItOut("try { yield new Function(); } catch(prototype if (function(){__noSuchMethod__ = __parent__;})()) { throw __count__; } catch(constructor) { let(__iterator__, __count__) { continue L; } ");
tryItOut("do {prop; } while((__proto__) && 0);");
tryItOut("{\f/*infloop*/for(\nprop.__lookupSetter__(\"__proto__\"); (__parent__ = ({prototype: ({}) }/*\n*/)); [15,16,17,18].map((<x><y/></x>).__defineSetter__, false)) {export *;if(033) {;throw #3={a:#3#}; } else  if ([,,z1]) (<x><y/></x>); else {yield; } } }");
tryItOut("continue L");
tryItOut("/*infloop*/for(const ({ __iterator__: constructor }) = [] = 5.0000000000000000000000.__defineGetter__(\"constructor\", <><x><y/></x></>)--.watch(\"__iterator__\", gc); this.__defineSetter__(\"constructor\", function (__iterator__, __noSuchMethod__) { return <x><y/></x> } ).propertyIsEnumerable(\"prototype\"); <y><z/></y> :: this.__defineSetter__(\"__proto__\", window)) {[1,2,3,4].map }");
tryItOut("var __proto__ = 0, prop;");
tryItOut("for(let y in [5,6,7,8]) yield (()).__defineGetter__(\"__noSuchMethod__\", new Function)\nL: yield;");
tryItOut("M:if(__iterator__ = <x><y/></x>) { if (function (prop, __parent__)033/*\n*/) export *; else {<y><z/></y>; }}");
tryItOut("/*infloop*/while(window %=  '' ){gc() }");
tryItOut("let (__noSuchMethod__) { gc() }");
tryItOut("if( /x/ ) {export *; } else {(<><x><y/></x></>).watch }");
tryItOut("M:switch(this.zzz.zzz) { default:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (prototype) in 033) return;");
tryItOut("L:if( /x/g ) {(__count__);yield setter; } else  if (<><x><y/></x></>) {} const __parent__;");
tryItOut(" for (__iterator__ in  { yield null[*] } )\n");
tryItOut("L: {throw <x/>;W; }");
tryItOut("{L:while((@foo) && 0){export *;export __parent__; } }");
tryItOut("if(@foo) yield; else yield;");
tryItOut("if(__count__.prop = prototype) {(-3/0);yield <><x><y/></x></>; } else  if (prop) {false }");
tryItOut("export __proto__");
tryItOut("let (__parent__) { M:with({__noSuchMethod__:  /x/ .__parent__ = <y><z/></y>})var __iterator__, __count__ = []; }");
tryItOut("switch(var __noSuchMethod__ = <><x><y/></x></>) { case @foo: if([__count__ = prop]) { if ((<><x><y/></x></>)(this.__defineGetter__(\"__noSuchMethod__\", function  __iterator__ (constructor) { return <><x><y/></x></> } ))) {break ;throw <x/>; }} else {let constructor; }default: break;  }");
tryItOut("/*infloop*/do  while((new (window)(constructor)));export function::constructor;");
tryItOut("return __count__;");
tryItOut("with(<y><z/></y> != <><x><y/></x></>(__count__.__lookupGetter__(\"constructor\")))L: {if( '' ) export constructor; else yield; }");
tryItOut("if( \"\" ) {;let constructor, __noSuchMethod__; }");
tryItOut("return\nexport __proto__;");
tryItOut("yield;");
tryItOut("if( \"\" .eval(null) if (<><x><y/></x></>)) return undefined; else  if ('fafafa'.replace(/a/g, gc)) {{} }");
tryItOut("__parent__ = <x><y/></x>\n");
tryItOut("do {var prototype = <\t><x><y/></x></>;return; } while((yield;) && 0);");
tryItOut("/*infloop*/for(let constructor;  /* Comment */; this.zzz.zzz) {{let (__noSuchMethod__ = prop = 0/0, __noSuchMethod__) { export constructor; } } }");
tryItOut("/*infloop*/M:for(prototype = __iterator__.__lookupSetter__(\"prop\"); 1.2e3; __noSuchMethod__ = [[1]]) {var __proto__; }");
tryItOut("/*infloop*/for(__parent__; ('fafafa'.replace(/a/g, function  __proto__ (prototype, __count__)window)); __iterator__ = prop) {export __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <x><y/></x>['__count__'] in <x/>) yield __iterator__;");
tryItOut("/*infloop*/M:for(var ({ prototype: [, , __iterator__], __count__: [, , , ({ __parent__: [({ __iterator__: prototype, prop: function::constructor })] }), ] }) = (p={}, (p.z = ({a1:1})())()); this.__defineGetter__(\"constructor\", function(y) { yield y; ;; yield y; }); (Function((each = [__iterator__, , ])))) (<y><z/></y>);");
tryItOut("if(@foo &= true.eval(RangeError(@foo))) { if (<>\f<zzz>function::__proto__</zzz></>) {<x/>; }} else {export constructor;export __iterator__; }");
tryItOut("switch(this) { default: const constructor;break; case 2: export *;( /x/ );break; case <x><y/></x>: continue L;break; __iterator__, __count__;break; case @foo: break;  }");
tryItOut("/*infloop*/L:for(let __proto__; ; <x><y/></x>.(@foo)) {(__proto__);<><x><y/></x></>; }\nreturn <><x><y/></x></>;");
tryItOut("{export *;; }");
tryItOut("with({}) { with({}) { prop = __count__; }  } ");
tryItOut("M:if(0x99.throw(0)) { if (constructor-=(new <x/>()) & ([__iterator__]).throw(null / __proto__)) ({}).hasOwnProperty else const prototype;}");
tryItOut("throw StopIteration;");
tryItOut("return constructor;");
tryItOut("/*infloop*/for(new <><x><y/></x></>(); <x><y/></x>.(__noSuchMethod__); <><x><y/></x></>(false)) {yield __count__;export *; }");
tryItOut("<y><z/></y>;{<><x><y/></\tx></>; }");
tryItOut("/*for..in*/for(const eval(\"{}\", <x/>) in __proto__ = 0) {\f/*for..in*/for(let __count__ = (window.__defineSetter__(\"__iterator__\", Math.sin)) in <x><y/></x>) export *;yield; }");
tryItOut("/*for..in*/L:for(var __count__ = (new [1,2,3,4].map()) in (__proto__)) {throw 0;/*\n*/return this; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in this) ");
tryItOut("if((new Object(prototype.constructor)).__defineGetter__(\"prototype\", ( /* Comment */*::*).watch)) /*infloop*/while((new ((Math.sin).call)().yoyo((__noSuchMethod__ = __parent__)))){export *; } else  if ((([(uneval(1.2e3))].some(Math.pow)) & (/a/gi).yoyo(((<x/> for (function::constructor in 1e81)))().@*) ^ true)) L:with( /x/g ){} else {yield new Number(true, __parent__);yield (function(id) { return id }.constructor); }");
tryItOut("M:switch(case 1: break; ) { default: break;  }");
tryItOut("export prototype\nFunction");
tryItOut("while((@foo) && 0){if((__count__.prototype =  '' )) { if ((__proto__ = __parent__)) return true; else {var __parent__ = *::*, __parent__ = <x/>;break L; }} \"\" ; }");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = <xxx>{__iterator__}</xxx>.__defineSetter__(\"__noSuchMethod__\", ) in [4.]) /*for..in*/for(__proto__ in ((function (yield, constructor)(-0))(__parent__)))const prototype = <x/>;\n/*for..in*/for(let __iterator__ = [15,16,17,18].some(gc, undefined) in <x/>) \f{__parent__ = <x><y/></x>, __noSuchMethod__; }\n");
tryItOut("if(undefined) ; else return [[1]];");
tryItOut("while((<x><y/></x>) && 0){}");
tryItOut("/*for..in*/L:for(let constructor = window in <x/>) {return constructor; }");
tryItOut("do {M:while(((function::constructor = this)) && 0)/*infloop*/for(const prototype = <><x><y/></x></>; *; this)  /x/ ; } while((this.__defineGetter__(\"constructor\", function(y) { yield y; default: break; case 7: break; case 7: ;break; case 2: break; const ;case *: yield 0x99;break; continue L; yield y; })) && 0);");
tryItOut("{let (this = <y><z/></y>.valueOf(\"number\")) { let(prototype = <y><z/></y>, <y><z/></y>) { export constructor; } }");
tryItOut("do {prototype } while((<y><z/></y>) && 0); const prototype;");
tryItOut("while((Function) && 0){{throw  \"\" ; }{} }");
tryItOut("do if(3.141592653589793) {} else continue ; while((<x><y/></x>.__defineGetter__(\"__iterator__\", ('haha'.split).apply)) && 0);");
tryItOut("L:do return *::*; while((.2 - __noSuchMethod__ = <><x><y/></x></>) && 0);");
tryItOut("if(window.(<x><y/></x>.unwatch(\"prop\"))) {(<><x><y/></x></>);return prop = <y><z/></y>; } else /*infloop*/L:for(const [] = 'fafafa'.replace\f(/a/g, (<x><y/></x>).watch); try { (<>(x><y/></x>)</>); } finally { yield <x><y/></x>; } ; <x/>.@foo) {gc{yield; } }");
tryItOut("/*for..in*/for(const __count__ in (((new Function(\"return false;\")))(eval(\"return <y><z/></y>;\", (@foo.propertyIsEnumerable(\"getter\"))) >>> this))){with(*) '' ; }");
tryItOut("if(__proto__.__noSuchMethod__ = ((constructor.prop getter= function  constructor () { yield (-3/0 |= 0x99) } ) <= yield (<><x><y/></x></>.__noSuchMethod__))) {export __proto__;return <x><y/></x>\n;do {__parent__; } while((__noSuchMethod__.unwatch(\"__count__\")) && 0); } else  if (((__noSuchMethod__.prototype = ([true for (__noSuchMethod__ in this)]).*))()) if(#0=__count__ =  /x/ ) switch( /x/ ) { case {}:  } else gc() else /*infloop*/for(<>[,]</>; (function ([y]) { })().yoyo((x::__parent__ = <><x><y/></x></>)); __proto__ = <x><y/></x>) {export __iterator__; } const __proto__;");
tryItOut("/*for..in*/for(var [prototype, __parent__] =  ''  in 3/0) var prototype =  \"\" ;");
tryItOut("/*for..in*/for(const [constructor, prototype] = @foo in (-1)) {let prop = __noSuchMethod__; }");
tryItOut("yield __iterator__;");
tryItOut("with({getter: ([*::*]) + #0=*}){propreturn;export __iterator__; }");
tryItOut("with({constructor: ({a2:z2})})const __proto__;");
tryItOut("if(<> </>) { if (arguments) ;} else do {yield false;yield; } while((true) && 0);");
tryItOut("M:while((new ([[]])()) && 0)L:if(1.3) /*infloop*/L:for(<x/> .@*:: 3.141592653589793; ; constructor = <><x><y/></x></>) (this); else /*infloop*/for(prototype = <x><y/></x>; __iterator__; {}) {return constructor = <x/>;(__parent__); }");
tryItOut("{export *; const constructor;prototype = prototype; }");
tryItOut("if((?.eval(*)) || Date()) { if (({}).__lookupGetter__(__parent__)) var __proto__ = true, __count__;} else {}");
tryItOut("/*infloop*/L:for((~this).isPrototypeOf(<x/>); ((export __count__))[ '' .yoyo(<><x><y/></x></>)]; __noSuchMethod__) {var prop;gc() }");
tryItOut("let (prop, constructor = (__parent__.(<y><z/></y>)).*) { if((new __count__ if (<y><z/></y>))) const __noSuchMethod__, __parent__ = undefined; else ; }");
tryItOut("/*infloop*/for(<x><y/></x>.prototype instanceof (<x/> ? window : [1]); <y><z/></y>; prop = undefined) {return  \"\" ; }");
tryItOut("/*infloop*/while(constructor = <>\f<x><y/></x></>)#1=[#1#];");
tryItOut("{/*for..in*/M:for(const __noSuchMethod__ in __count__) {gc()__proto__; }\nswitch(constructor.__iterator__ = this) { default: break;  } }");
tryItOut("L: return true;");
tryItOut("/*for..in*/M:for(const [__proto__, prototype] = [(constructor.([15,16,17,18].sort(({}).hasOwnProperty,  /x/ )))].map(gc) in __parent__ .@x:: this.setter) __parent__: undefined");
tryItOut("let(__parent__ = eval(\"export __count__;\", __proto__).yoyo((__count__.prototype = null))) { throw StopIteration;");
tryItOut("yield <x><y/></x>;");
tryItOut("if(((<><x><y/></x></>)[true])) { if (<y><z/></y> :: <><x><y/></x></>) throw  '' ; else [1,,]}");
tryItOut("/*for..in*/for(let [constructor, __parent__\t] = ((this.__defineGetter__(\"__proto__\", gc)) ^= __parent__ = <y><z/></y>).valueOf(\"number\") in #2=([<><x><y/></x></>].map(eval))) \nyield;\n");
tryItOut("/*infloop*/for(let __parent__; let (__proto__ = null) <y><z/></y>.isPrototypeOf(<bbb xmlns:ccc=\"[(uneval(<><x><y/></x></>)) if (<x><y/></x>)]\"><ccc:eee></ccc:eee></bbb>); [,,]().throw((<><x><y/></x></>.__lookupGetter__(\"__proto__\")))) ;");
tryItOut("/*for..in*/for(__parent__ = (function::prototype.__noSuchMethod__ = -<><x><y/></x></>) in __noSuchMethod__ = 1e-81\t) {{gc()export prop; }{} }");
tryItOut("switch((<zzz><x><y/></x></zzz>.(new (Math.sin)()))) { default:  }");
tryItOut("return -1.@* << 'fafafa'.replace(/a/g, (eval).call);");
tryItOut("/*for..in*/for(const prototype = (Iterator(([,,z1].__proto__), 033)) in (-1)) {{}gc() }");
tryItOut("const constructor = __iterator__, prop = #1=[#1#];");
tryItOut("prop = __noSuchMethod__;");
tryItOut("__parent__ = constructor;");
tryItOut("if(yield;.__defineGetter__(\"__iterator__\", function () { yield #1=[#1#]; } ))  else  if (true.__proto__) {{}return this; }");
tryItOut("for(let y in [5,6,7,8]) let(({ @foo: __count__ })) { export *;");
tryItOut("const __parent__, __noSuchMethod__\n");
tryItOut("if(('fafafa'.replace(/a/g, function (__iterator__) { yield <x><y/></x> } ))) prototype.propertyIsEnumerable(\"__proto__\");");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in @foo) const __count__ = window, __count__;");
tryItOut("if(arguments) {yield;{} } else  if (#1#) {export *;export constructor; } else {throw <x><y/></x>;{} }");
tryItOut("if(eval(\"<x><y/></x>.prop\", [15,16,17,18].map( /x/g , 1e4))) ({ constructor: __proto__, prop: *::* }) = true else  if ((new Function(\"gc()\"))(this).throw(this.zzz.zzz)) {yield;; }");
tryItOut("/*infloop*/for(let ([]\t) (yield <x><y/></x> for (__parent__ in false)); .@*; (({ __parent__: ({ function::__parent__: ({ __noSuchMethod__\f: prop, __parent__: ({ __proto__: prop }) }) }) }) = this ^ <><x><y/></x></> ^= #3={a:#3#} | this)) {/*infloop*/L:for(let __proto__ = this.zzz.zzz; (void 0).yoyo([15,16,17,18].filter((1 for (x in [])), 3/0)); new Object(export __count__, new (function () { return false } )())) {switch(*::*) { case <x/>: yield prototype; } } }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = [15,16,17,18].sort(({}).__lookupGetter__, (<ccc:ddd><!--yy--></ccc:ddd>.(prototype = -0.prop))) in (() |= <><x><y/></x></> :: null)) break M\n");
tryItOut("L:if(__proto__) { if (([1].__defineSetter__(\"constructor\", (1 for (x in []))))) /*infloop*/for(let [] = ( /* Comment */__noSuchMethod__ = *); constructor.prototype setter= function (prototype) { yield <y><z/></y> } ; (this())) {yield arguments; }} else /*for..in*/");
tryItOut("{for(let y in [5,6,7,8]) ; }");
tryItOut("default: break; break; ");
tryItOut("L:with(new String()){__count__ = (prop = *::*) }");
tryItOut("with(this.__defineGetter__(\"__noSuchMethod__\", (<x><y/></x>).watch)){yield export *;; }");
tryItOut("this.zzz.zzz;");
tryItOut("if() /*infloop*/M:do {export *; } while(window); else  if ((1.2e3.propertyIsEnumerable(\"__proto__\")) % *::*.valueOf(\"number\")) {L: {const __iterator__, __parent__;return #1=[#1#]; }let (constructor = constructor) { {gc } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((prop.prop) in ((__iterator__ = __parent__).@foo).throw((<><bbb xmlns:ccc=\"undefined\"><ccc:eee></ccc:eee></bbb></> >>= @foo))) {/*for..in*/for(const __iterator__ = <bbb xmlns=\"<y><z/></y>\"><ccc:ddd><x><y/></x></ccc:ddd></bbb>.valueOf(\"number\") in __parent__ = __noSuchMethod__ = ({a1:1})) while((this ^ <x><y/></x>) && 0){export *;export __count__; } }");
tryItOut("L:if(<><x><y/></x></>) var __noSuchMethod__ = <><x><y/></x></>, __proto__ = 4.;");
tryItOut("/*for..in*/L:for(__proto__ = (new function (__proto__) { return * } ( /x/ )) in <x><y/></x>) { get __parent__() ''  }");
tryItOut("switch([1,,]) { default: break;  }\n/*infloop*/L:for((__iterator__.__noSuchMethod__); (p={}, (p.z = ( /x/  === __proto__))()); [] for each (__count__ in <y><z/></y>) if (this)) break M;\n");
tryItOut("/*for..in*/L:for(constructor in ((([1,2,3,4].slice).call)( ''  !== null))){; }\nconst __iterator__ = 3, __proto__ = try { return; } catch(__proto__ if <x><y/></x>) { export *; } catch(prop) { __noSuchMethod__ } finally { let prototype; } ;\n");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) __parent__ = __parent__;");
