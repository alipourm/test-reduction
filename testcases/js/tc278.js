tryItOut("with({}) yield;");
tryItOut("<y><z/></y>;");
tryItOut("/*infloop*/for((<x/>); (<x><y/></x> /=  '' ); <y><z/></y> != false) continue ;");
tryItOut("L:if(()) {} else  if ((([<>__iterator__ = false</>++]).@foo)) {(false); }");
tryItOut("__parent__ = prop\n{}");
tryItOut("let(__noSuchMethod__ = window) { return;");
tryItOut("/*for..in*/M:for([function::__parent__, __noSuchMethod__] = ((uneval( /x/ --))) in (new 0x99)(false)) break ;");
tryItOut("/*for..in*/for(this.__parent__\t in ({})) {return  /x/g ;__iterator__ }");
tryItOut("{}(<x><y/></x>);");
tryItOut("M:switch(<y><z/></y>) { case 6: /*for..in*/for(constructor in  /x/g ) thisbreak; break; /*for..in*/for(let __proto__ = (*[window]) in (__parent__ = [__count__, ])) gc()if(prop+=-1) {/*for..in*/for(__iterator__ in ((((1 for (x in []))).call)(@foo))){export *;yield; } }with({<!--yy-->: (prototype = (3/0.propertyIsEnumerable(\"__count__\")))}){if(1e-81) { if (<><x><y/></x></>) {yield; }} else (<x/>); }break; /*infloop*/for(let __parent__; __count__; ++(<><x><y/></x></>--)) ;case 5: break; default:  for each (function::__noSuchMethod__ in <x><y/></x>) if (window)break; case 2: export __proto__; }");
tryItOut("M:if(__count__) {{} }");
tryItOut("for(let y in [5,6,7,8]) with({}) with({}) /*infloop*/do ; while(*);");
tryItOut("M:if(RangeError()) { } else  if (function ([y]) { }) /*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in (-0)) {yield;; }");
tryItOut("for(let y in []);");
tryItOut("M:switch(return) { case <></>: break; case __parent__.__parent__ = (prototype.<><x><y/></x></>): if(((uneval(<><x><y/></x>\f</>)))) { if ([<y><z/></y>].sort(Math.pow) >>= (1.2e3.@foo).__defineGetter__(\"__noSuchMethod__\", (((1e-81)[<x><y/></x>])).watch)) if(get) {<x><y/></\tx>; } else  if (case ((yield <x><y/></x>.({}))): ;break; ) {yield; }} else {yield; }[1,2,3,4].mapbreak;  }");
tryItOut("/*for..in*/for(let function::__noSuchMethod__(3/0) in ((eval)(1e4))){L:if(*::*) {(new Function(\"continue ;\")) } else  if (0x99) {(1.3); } else {{}yield  /x/g ; } }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) let prop;");
tryItOut("switch(yield  /x/  & __count__) { case 7: <><x><y/></x></>; }");
tryItOut("M:with(<x><y/></x>)");
tryItOut("with(<><x><y/></x></>)gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in (function ([y]) { })()) yield;");
tryItOut("/*for..in*/for(let [({ __count__: ({ constructor: prop }) }), prop, , __noSuchMethod__, __count__] in [1] ? <><x><y/></x></> : ) return (yield undefined); const __noSuchMethod__;");
tryItOut("/*for..in*/for([__parent__, prop] = (({ prototype: [prototype], prop: ({ __parent__: prop }) }) = __proto__) in prototype) throw <><x><y/>\t</x></>;");
tryItOut("with(this)/*infloop*/for(__count__ = new <x/>(); <><!--yy--></>; ((<><x><y/></x></>).watch(@foo, <><x><y/></x></>).__lookupGetter__(\"__count__\"))) ;\nlet __count__;\nreturn;");
tryItOut("L:if(__iterator__) (<x/>); else  if (<x/>.eval(1e4)) {yield; }");
tryItOut("/*infloop*/while(window){gc()1e+81; }");
tryItOut("gc() { yield (function::prop = __iterator__) } ");
tryItOut("/*for..in*/for(var __iterator__ in <x><y/>//h\n</x> ? 1e+81 : [1,,]\t) {yield undefined; }");
tryItOut("/*infloop*/do {let __proto__ = <><x><y/></x></>;[]; } while(__proto__);");
tryItOut("5.0000000000000000000000\nif(eval(new (function  constructor (__proto__, __count__) { (this); } )(<><x><y/></x></>, *::*), constructor.__proto__ getter= ([1]).apply)) {let constructor, constructor; } else \n");
tryItOut("{0x99; }");
tryItOut("/*infloop*/for([0.1]; @foo / [z1,,]; __noSuchMethod__ &&  /x/ ) {;continue M; }");
tryItOut("if(constructor ? #3={a:#3#} : constructor++) yield; else  if ((gc())) <> '' </>; else {/*for..in*/for(__count__ in 0) { }__iterator__, function::prop; }");
tryItOut("if(<x/>.__defineSetter__(\"constructor\", new Function) ^ __iterator__ @ window) { if ([prototype].propertyIsEnumerable(\"__noSuchMethod__\")) return <x/>; else yield;}");
tryItOut("return;\n__proto__\n");
tryItOut("if((prototype =  ''  <= prototype)) { if ((prop.constructor = (<><x><y/></x></>.eval(prop)))) prototype = window, __proto__ = <x><y/></x>; else 'haha'.split}\n/*infloop*/L:for(const __parent__; *::*;  /x/ ) { }");
tryItOut("{ '' .unwatch(\"prop\");let __parent__ = <x><y/></x>, prototype; }");
tryItOut("continue ;");
tryItOut("L: ;");
tryItOut("__proto__, __count__ = *;");
tryItOut("try { {} } catch(__proto__ if (function(){export *;})()) { export *; } catch(__parent__) { export *; } ");
tryItOut("/*infloop*/while(( '' .@foo))return;");
tryItOut("{var __noSuchMethod__ = 3/0;{} }");
tryItOut("(<y><z/></y> /= <x><y/></x>)\nyield;");
tryItOut("with({__proto__: this >> <><x><y/></x></>})/*for..in*/for(let __parent__ = ({ get __count__(__iterator__, prop) { yield; }  }) in <x><y/></x>) break M\nreturn;");
tryItOut("continue L;\nthrow constructor;\n");
tryItOut("/*for..in*/for(const prop in __count__.__noSuchMethod__ setter= Math.sin) L: ;");
tryItOut("with({}) return [z1,,];");
tryItOut("\n");
tryItOut("throw StopIteration;");
tryItOut("if(((this.__defineGetter__(\"prop\", 1e+81))(<x/> for (prop in <x><y/></x>)))) { if (#0=[z1,,]) {;break ; }} else {export *;gc() }");
tryItOut("continue L; const __iterator__;");
tryItOut("{}");
tryItOut("throw StopIteration;");
tryItOut("{;{{}; }/*infloop*/for(let function::__iterator__ = [<x/>]; <x><y/></x>.watch(\"constructor\", eval);  '' ) [1]; }");
tryItOut("export __iterator__");
tryItOut("do {let (prop) { return window; }L: {var __noSuchMethod__;gc() } } while((([11,12,13,14].sort)) && 0);");
tryItOut("{;return; }");
tryItOut("'haha'.split");
tryItOut("/*infloop*/for(this;  /* Comment */((undefined)()) *= ((Function)(prototype)) == new (1e4)(@foo).__lookupGetter__(\"__count__\"); (__noSuchMethod__.eval(prototype.prop).__lookupSetter__(\"__iterator__\"))) O");
tryItOut("throw  /* Comment */ /x/g ;\n\n\n");
tryItOut("if(({ get __count__(__iterator__) { yield window >= * }  })) return ('fafafa'.replace(/a/g, (new Function).apply));");
tryItOut("if(new ([1,2,3,4].slice)()) while((-1) && 0){ get prop __noSuchMethod__ () { export prototype; }  }");
tryItOut("with(__count__(1e81)){return; }");
tryItOut("/*for..in*/M:for(const (null.constructor) <= ({__proto__: <x/> }) in (yield eval(\"let __noSuchMethod__ =  /x/ ;\", <x/>))) /*for..in*/L:for(let __count__ = (*.__lookupGetter__(\"__parent__\") .@x:: ( /x/g  if (1.3))) in <><x><y/></x></>) /*infloop*/for(__count__; 1e+81; (-1)) {yield;var prop; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("export __iterator__");
tryItOut("if((p={}, (p.z = this.__defineGetter__(\"__iterator__\", ((1.3).watch).apply))())) {const __parent__ =  /x/ ; } else return;");
tryItOut("break ");
tryItOut("if((this.__defineGetter__(\"__iterator__\", function  prop () { yield @foo } )))  else  if ((return;--) for each (prototype in true)) {prototype = <x/>; } else continue M;");
tryItOut("L:if(<y><z/></y>)  else  if (*) yield;");
tryItOut("prop\nthrow 1.3;\n");
tryItOut("/*infloop*/do {/*infloop*/while(({prop: [[1]].hasOwnProperty(\"__count__\")})){const __parent__;return; const __count__; } } while(#1=({__parent__: (__noSuchMethod__ =  /x/ .prop)}).eval(eval(\"(<><x><y/></x></>)[prototype]\", false[window])));");
tryItOut("if( /* Comment */<><x>y/></x></>) {gc()return  /x/g ; } else  if ((function  __noSuchMethod__ (prop, constructor) { yield #3={a:#3#} < null } )) prop");
tryItOut("L:if((((function  __noSuchMethod__ (__count__, __parent__) { yield <x/>; } ).call(<><x><y/></x></>, <x><y/></x>)) || ([15,16,17,18].map(function (__count__, constructor)<x/>, 1.2e3)))) yield 0.1; else if(typeof true.*) yield; else  if (function::__count__.prototype = [11,12,13,14].some) with({__iterator__: false})constructor, __count__ = window; else return <x><y/></x>;");
tryItOut("with({}) { try { return @foo; } catch(__parent__ if (function(){{}})()) { return *; }  } ");
tryItOut("/*infloop*/for(({ prop: ({ __iterator__: [] }), __proto__: ({ __proto__: [__proto__, ({ __parent__: prototype, __parent__: __parent__ }), ], __noSuchMethod__: prop }) }) = \nthis.zzz.zzz; (constructor) = this; (p={}, (p.z = __noSuchMethod__)()).@foo) {{__proto__; }{} }");
tryItOut("for(let y in [5,6,7,8]) return 0/0 in <><x><y/></x></>;");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("/*infloop*/for(const __iterator__; ({ constructor: ({ __iterator__: __proto__ }) }) = <x><y/></x>.__iterator__ >= <><x><y/></x></>.constructor = <x><y/></x>; (String())) ([1,,]);");
tryItOut("for(let y in []);");
tryItOut("while(((( /x/ ).watch).call) && 0)var function::__iterator__;");
tryItOut("/*infloop*/do return; while(*::* instanceof null);");
tryItOut("if(3/0.unwatch(\"constructor\")) { if (null) {/*for..in*/for(let prop = * in 0/0) {Math.sin } } else {let __proto__; }}");
tryItOut("/*for..in*/for(let prop = [1,,] in (p={}, (p.z = __proto__.__proto__)())) {; }");
tryItOut("export __iterator__;");
tryItOut("with({}) __parent__ = __parent__;");
tryItOut("while((@foo( '' )) && 0){with((delete this))throw <x><y/></x>; }");
tryItOut("/*for..in*/L:for(let [prototype, __iterator__] = String().unwatch(\"__count__\") in (Function).call()) ");
tryItOut("/*for..in*/for(let (#0=*::*).__defineSetter__(\"constructor\", Math.pow) in ((Function)(eval(\"\", 3/0).isPrototypeOf(<x/> >= <x><y/></x>)))){/*infloop*/while((__noSuchMethod__.propertyIsEnumerable(\"__iterator__\"))){export __count__;throw <><x><y/></x></>; }const prop, __noSuchMethod__; }");
tryItOut("let(prototype = function  x::__parent__ (__proto__)null.__lookupSetter__(\"__iterator__\", __iterator__ = Error()) ((function(){gc()})());");
tryItOut("let([, , ({ __noSuchMethod__: [__parent__] }), prototype, ] = (().unwatch(\"prototype\"))) { let(prop) { for(let y in []);");
tryItOut("let ([, , ], __parent__) { export *; }");
tryItOut("if((__noSuchMethod__.__count__)) {return  /x/ ; } else export __proto__;");
tryItOut("if( ? ((function ([y]) { })().__defineSetter__(\f\"__noSuchMethod__\", <x><y/></x>))-- : [prototype].sort((function(y) { yield y; yield <><x><y/></x></>;; yield y; }).apply).throw(constructor%=true)) export *;");
tryItOut("for(let y in [5,6,7,8]) let(constructor, constructor) ((function(){for(let y in []);})());");
tryItOut("\nthrow <x><y/></x> ? undefined : <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [[]]) {gc() }\n/*infloop*/for(let ({ prop: __parent__ }) = *.eval(0.1); [11,12,13,14].some;  /* Comment */ \"\" ) __count__");
tryItOut("/*for..in*/M:for(let __proto__ in (('haha'.split)(<x><y/></x>.@foo))){prop; }");
tryItOut("while(( /x/g ) && 0)constructor = __count__;");
tryItOut("(<y><z/></y>); const __noSuchMethod__;");
tryItOut("/*infloop*/L:for(var x::x::__count__; [15,16,17,18].map(function (__noSuchMethod__) /x/g , constructor); <x><y/></x> for each (__parent__ in __count__)) {yield null;yield false; }{; }");
tryItOut("throw ({});");
tryItOut("M:with((((<x/>.watch(\"__count__\", Function)))[(Math.pow)(<><x><y/></x></>, __noSuchMethod__)]))export prototype;");
tryItOut("let ([[({ __count__: ({ prototype: __count__, __count__: set }), __count__: 3 }), , , ], ({ __parent__: ({ prototype: ({ __noSuchMethod__: 5.0000000000000000000000.__proto__, prop: [, __iterator__, ({ prototype: prototype })] }) }) }), [[, , , , __noSuchMethod__], , ({ prop: [, , , [, constructor, ({ prop: __count__, prototype: __noSuchMethod__ }), , __count__]], __parent__: ('haha'.split).call(\t__iterator__, ) })], ] = (this.__defineGetter__\"__iterator__\", (prop).__defineSetter__), __count__) { gc() const __iterator__;throw <><x><y/>\t</x></>; }");
tryItOut("throw {}\ngc()continue L;");
tryItOut("if(__count__.prototype = (<x><y/></x>.propertyIsEnumerable(\"__count__\")))  else  if ((__iterator__ = <><x><y/></x></> || <y><z/></y>)) yield;");
tryItOut("\tif((prop, __iterator__.propertyIsEnumerable(\"constructor\"))) const prop = prototype;");
tryItOut("M:switch(<><x><y/></x></>.__defineSetter__(\"__count__\", (function ([y]) { }).__defineSetter__)) { default: break; break; break;  }");
tryItOut("if(window.__noSuchMethod__ = ((yield #1=[#1#]))) { if (<y><z/></y>) {; } else (null);}");
tryItOut("(*::*)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((<x/>.unwatch(\"__count__\")) in <y><z/></y>.isPrototypeOf(__count__)) {new Functionthrow  \"\" ; }");
tryItOut("M:switch\f(__iterator__ = this) { default: let (constructor, __parent__ = 4.) { __count__ }break; prop, constructor;break;  }");
tryItOut("/*infloop*/for(__iterator__; *; function(id) { return id }) return prop.prototype;");
tryItOut("M:with({__iterator__:  /x/ })__parent__let function::function::x::prototype = *;");
tryItOut("if(({ __iterator__: __proto__, __parent__: prototype }) = new Date(<x/> = this !== 1e+81)) {with({__proto__: delete null})Math.pow/*for..in*/L:for(let __noSuchMethod__ = __iterator__ in __proto__) {export __proto__; } } else  if (((uneval(void (yield true))))) {export *; }");
tryItOut("let(constructor = window.hasOwnProperty(\"__iterator__\")) ((function(){prop = __iterator__;})());");
tryItOut("while(((this ?  /x/g  : __proto__) &= __noSuchMethod__) && 0){<y><z/></y> << <x><y/></x>; }\n");
tryItOut("if((function  constructor (__iterator__, constructor) { continue ; } )(0, __parent__) >>>=constructor =  /x/g ) function  prototype (constructor) { yield  /x/g  }  else  if ((function(q) { return q; }).call(<><x><y/></x></> :: *, )) {{yield 1e+81; }return __iterator__; } else {export *;\n(__proto__);\n }");
tryItOut("M:if((p={}, (p.z =  '' )()) &= (#2=[1e-81])) yield; else  if ([((1 for (x in [])))()].some((!null))) ; else {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__.__proto__ in this) const __iterator__ = this; }");
tryItOut("do return <x><y/></x>; while((<x><y/></x>) && 0);");
tryItOut("with([15,16,17,18].filter(( '' ).__defineSetter__, constructor)){this/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in this) return window; }");
tryItOut("/*infloop*/while(([z1,,].__proto__)){export __noSuchMethod__;([z1,,]); }");
tryItOut("for(let y in [5,6,7,8]) return 4.;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("{while((0.1) && 0){throw *::*; }return; }");
tryItOut("L:if([(<y><z/></y> << undefined)]) { if (prototype = *) {yield constructor;if(<><x><y/></x></>) break ; else  if ( /x/ ) prototype;\t } else ;}");
tryItOut("L:if(undefined) { if (<><x><y/></x></> for (prototype in false)) {(window); }} else continue ;");
tryItOut("if((@foo)()) {{<x/>;gc() }/*infloop*/while(1e4 ? <><x><y/></x></> : __proto__)export __parent__; } else {{} }");
tryItOut("L: /*for..in*/L:for(const prototype = this.__defineGetter__(\"constructor\", function () { return null } ) in false) {const __noSuchMethod__ =  '' , __noSuchMethod__ = <x><y/></x>; }");
tryItOut("/*infloop*/L:for(__parent__;  ; <y><z/></y>--.eval(['fafafa'.replace(/a/g, (1 for (x in [])))])) {if(({prop: ( /* Comment */<><x><y/></x></>) })) { if (this) {/*infloop*/do throw false; while(0/0);/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__ in undefined) prop }\n} else (__count__);yield; }");
tryItOut("let (__iterator__) { export *; }");
tryItOut("{throw <x><y/></x>;constructor; }");
tryItOut("let constructor = , prop = <x><y/></x>;");
tryItOut("if((__parent__ = <><x><y/></x></>) / constructor = [z1,,]) { if ((function  prop (constructor, __parent__) { return (yield __iterator__ = [z1,,]) } ).call(this, ((__proto__.__count__ = [15,16,17,18].map(function (prototype, __noSuchMethod__) { ; } , *::*))( /x/ )), ( ''  ? this.__defineGetter__(\"constructor\", function(q) { return q; }) : (__count__ = constructor)) += *::*.__proto__)) this.zzz.zzz;} else {(constructor.__count__ getter= Math.sin); }");
tryItOut("M:if( '' ) { if (( set __count__(prototype) { yield (uneval(0x99)) } .*)) #1=[#1#]; else let __proto__ = *::*;}");
tryItOut("yield [*::* if (0.1)];");
tryItOut("/*for..in*/for(__count__ = this.__defineSetter__(\"__proto__\", eval) in [1,2,3,4].map(<><x><y/></x></>.__lookupGetter__(\"__count__\"), function ([y]) { }) &= (~3/0)) {(<x><y/></x>); }");
tryItOut("/*infloop*/do {throw this.__defineGetter__(\"__noSuchMethod__\", function  __iterator__ (prop) { return  /x/  } ); } while(eval(\"return false;\", <><x><y/></x></>));");
tryItOut("/*infloop*/do export *; while(@foo.__iterator__);");
tryItOut("/*infloop*/for(({ __parent__: prototype }) = [] += new Boolean(<x><y/></\rx>, ({a1:1})); new (true)( /x/  >= window in undefined.__count__); 'fafafa'.replace(/a/g, (<><>yyy</></>).call)) /*infloop*/for(let x::constructor; []; \u2029) {var constructor = <x><y/></x>;/*infloop*/for(var __noSuchMethod__; <x><y/></x>.throw(<y><z/></y>); <x><y/></x>) ; }");
tryItOut("return 3/0;\nexport *;\n\n");
tryItOut("throw StopIteration;");
tryItOut("for(let y in []);");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("with({}) prototype");
tryItOut("if(1e81 ? <y><z/></y> : prop <<= .isPrototypeOf(new __parent__([,,z1], <x><y/></x>))) { if (({prototype: window |= true})) {return; }/*\n*/} else {}");
tryItOut("M:if(~__iterator__ != <x><y/></x><x><y/></x><!--yy-->) switch(3.141592653589793) { case 6: function(id) { return id };break; ({}).hasOwnProperty }");
tryItOut("if(#1=[#1#]) {yield <y><z/></y>;yield; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __iterator__ in yield [11,12,13,14].filter) {L:with(){/*for..in*//* nogeckoex bug 349964 */L: for  each(let get in this) {return;yield  /x/ ; }return  /x/ ; }yield prototype.((p={}, (p.z = <y><z/></y>)())); }");
tryItOut("/*for..in*/for(var prop in ++({})) /*infloop*/L:for( /x/g ; [15,16,17,18].map(Math.sin,  /x/g ); window\n) export __parent__;");
tryItOut("yield *::*;undefined;");
tryItOut("L: {__parent__, constructor = <><x><y/></x></>; }");
tryItOut(";");
tryItOut("L:do {} while((new (/a/gi)(0x99)) && 0);");
tryItOut("switch(<x/>) { case 2: break; case undefined: export __parent__;break;  /x/g ;continue ;break;  }");
tryItOut("if(yield prototype) {yield <><x><y/></x></>;throw *::*; } else  if (<y><z/></y>.eval(*::*)) __parent__, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("/*infloop*/M:do yield; while(!undefined[[z1,,]]);");
tryItOut("/*infloop*/ { if(({ get prop() { yield arguments } , constructor: prototype.(<><x><y/></x></>) })) { if (<x/>.__lookupGetter__(\"prototype\")) return; else ;} } ");
tryItOut("export *;");
tryItOut("M:while(([15,16,17,18].map('haha'.split, new (gc)(false))) && 0)break L; const prop;");
tryItOut("/*infloop*/while((({prototype: constructor.__defineSetter__(\"__iterator__\", gc)})))(window);");
tryItOut("/*infloop*/do {} while(this >>> function ([y]) { });");
tryItOut("/*for..in*/for(let __noSuchMethod__ in 0.1) {export *;continue ; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [] in ((<><x><y/></x></>).call(<y><z/></y>, <><x><y/></x></>,  /x/ ))) export *\n\n");
tryItOut("/*infloop*/for(let __iterator__; [[1]]; this) let __proto__, prop = window;");
tryItOut("yield ( /x/ .prototype);");
tryItOut("{return; }");
tryItOut("L:if(({ __count__: [, , , , [, , ({ prop: __proto__ })]] }) = (new Object('fafafa'.replace(/a/g, ({}).hasOwnProperty) *= <y><z/></y>.eval(*)))) { if (constructor =  /x/ ) {L: {yield;export constructor; } }} else /*for..in*/for(__parent__ in ((function(q) { return q; })(new ((3 >>= <y><z/></y>))()))){<x><y/></x>; }");
tryItOut("do {throw __iterator__;yield 3; } while((__count__ = function(id) { return id }) && 0);");
tryItOut("{yield\n<y><z/></y>\nexport *;\n }");
tryItOut("for(let y in [5,6,7,8]) try { return \f__parent__; prototype } catch(__count__) { for(let y in []); } ");
tryItOut("with((constructor =  \"\" ) % ( /x/g  if (*::*)).constructor)let __noSuchMethod__;");
tryItOut("/*( \"\" );__proto__  else  0.1  if ((__parent__ = __parent__) < (let (__parent__ = false, __proto__ = <><x><y/></x></>) [,,z1]))) L:switch(new (null)( /x/ , [1])) { case 0: yield;break;  } else yield;");
tryItOut("L: this");
tryItOut("/*for..in*/for(var __iterator__ = * in 3/0) {throw ({a1:1}); }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("{const __parent__, constructor; }");
tryItOut("if(try { prototype = prototype; } catch(constructor) { throw StopIteration; } finally { return; } ) {/*infloop*/M:while(window.unwatch(\"delete\"))return <><x><y/></x></>;\n '' ;\n } else (null);");
tryItOut("{{}let __proto__ = <y><z/></y>; }");
tryItOut("/*for..in*/L:for(var __iterator__ in <x><y/></x>) {break L;yield; }");
tryItOut("/*infloop*/for(<>prop = *</>; ({a1:1});  '' ) {@foo;([z1,,]); }");
tryItOut("(new 0x99())(*) = prototype;");
tryItOut("{window;throw [z1]; }");
tryItOut("while((( /x/g .watch(\"prototype\", <x><y/></x>.(undefined)))) && 0)([z1]).watch");
tryItOut("if(({ prop: prop, function::__count__: delete }) = [/*this{ }]) {function  __count__ (prop, prop) { yield true }  } else {var __proto__ = *::*, prop; }");
tryItOut("/*infloop*/for(({ __parent__: ({ __iterator__: (<><x><y/></x></>)(0x99), __count__: ({ __proto__: ({  constructor:  /x/g ++prop: '__iterator__, __noSuchMethod__: __iterator__ }prototype)case 4: \n(false);*::*;break;  }) }), constructor: ({ prototype: ({ delete: [({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: <x><y/></x>, <x><y/></x> }), function::__proto__\f] }), prototype: __proto__ }) }) = arguments( '' ,  '' ); new Date(window); [1,,] for each (__noSuchMethod__ in #1=[#1#])) yield 1e-81");
tryItOut("throw StopIteration;");
tryItOut("yield  '' ;");
tryItOut(" set __count__(__parent__) { yield *::* .@x:: <><x><y/></x></> } ");
tryItOut("{gc()export *; }");
tryItOut("{yield <x/>return ({a2:z2}); }");
tryItOut("return;");
tryItOut("/*infloop*/for(const ({ delete: ({ prototype: constructor, prop: __proto__ }) }) = ( /x/  for each (constructor in <x><y/></x>)); ([__count__].filter(eval)); null) return;");
tryItOut("{(__proto__); }");
tryItOut("/*infloop*/M:for(__noSuchMethod__; this; new (new __noSuchMethod__())(__count__, <x><y/></x>)) yield;");
tryItOut("/*infloop*/while(this.zzz.zzz);");
tryItOut("if((({prop: window }))[<x><y/></x>.((function ([y]) { })())]) { if (prototype) {function(y) { yield y; undefined; yield y; } }} else {return true; }\n/*for..in*/for(__noSuchMethod__.__proto__ in ([, __count__, ] = RegExp(@foo, this))) {{<><x><y/></x></>; }let = <><x><y/></x></>; }");
