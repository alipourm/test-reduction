tryItOut("yield #1=[#1#].__defineGetter__(\"__proto__\", Function);");
tryItOut("prototype, __noSuchMethod__");
tryItOut("/*for..in*/L:for(var __proto__ in false) {; }");
tryItOut("/*for..in*/for(var prop in (((__count__ =  /x/ ))(yield window ^= (-1)//h\n))){yield; }");
tryItOut("if(*::*) { if (*::*) {/a/gi } else {prop; }}");
tryItOut(";");
tryItOut("{/*for..in*/for(const __count__.__proto__ in @foo) __noSuchMethod__;L:with({__proto__: <><x><y/></x></>}){export *; } }");
tryItOut("with({__noSuchMethod__:  /x/g })Function");
tryItOut("[1,2,3,4].slice\nreturn __proto__;");
tryItOut("gc() const prop;");
tryItOut("/*for..in*/for(var [__proto__, __proto__] = __parent__ = prop in undefined) L: {;let prototype, prototype = function(id) { return id }; }");
tryItOut("with({__proto__: __count__ = constructor.constructor = (this.zzz.zzz)})const __parent__;");
tryItOut("/*infloop*/for(let get = ({ __parent__: constructor, __parent__: __count__ }) = []; (1e+81)(); (__noSuchMethod__ = __noSuchMethod__)) ;");
tryItOut("{export *;gc() }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in *::*) const prop;if(eval(\"(<x><y/></x>.hasOwnProperty(\\\"__count__\\\"))\", prop = 5.0000000000000000000000)) { if (((return __noSuchMethod__).__lookupSetter__(\"__count__\") for each (__proto__ in prop) for ((<x><y/></x>)(arguments) in null) for (each in <x><y/></x>))) {function (__parent__) { return  /x/g  }  }} else {gc() } }");
tryItOut("switch(this.__lookupGetter__(\"prop\")) { default: M:if(function ([y]) { }) { if (4.) { } else {}}return __noSuchMethod__; }");
tryItOut("switch(this.__defineGetter__(\"__count__\", constructor = [,,z1])) { default: case 2: return;break; case 7: return __noSuchMethod__;break; case 9: ({}).hasOwnPropertybreak;  }");
tryItOut("/*infloop*/M:while(((<x><y/></x> = <y><z/></y>) , delete [z1,,] |= <><x><y/></x></>))const .2 = this, __proto__ = window;");
tryItOut("if(((function  prop (__iterator__) { yield  ''  } ).call(this,  \"\" , window))) { if (__proto__) (<x><y/></x>); else  case }");
tryItOut("L:with(window)");
tryItOut("M:while((-1) && 0)__noSuchMethod__ = <x/>;");
tryItOut("throw StopIteration;");
tryItOut("let(__parent__ = new (function ()window)(\n \"\" )\n, __iterator__ = <x/>.throw(<x><y/></x>)) ((function(){throw StopIteration;})());");
tryItOut("/*infloop*/M:do ; while(({}));");
tryItOut("with({}) { gc() } ");
tryItOut("for(let y in []);");
tryItOut("continue ; const __parent__;");
tryItOut("throw <>\t<x><y/></x></> const prototype;do ; while((prototype.__iterator__ = window ? arguments in String(<><x><y/></x></>, <x><y/></x>) : var prototype = <x/>) && 0);");
tryItOut("if(<x/>) yield; else  if (__parent__) {; } else {'haha'.splitgc() }");
tryItOut("let (prop) { gc() }");
tryItOut("let (constructor) { throw window; }");
tryItOut("/*infloop*/M:do {return  /x/ ; } while((constructor = <><x><y/></x></>))\nexport *;");
tryItOut("constructor = __proto__;");
tryItOut("/*infloop*/for(var __parent__; <y><z/></y>; null) gc()");
tryItOut("M:switch(({ __noSuchMethod__: function::function::prop,  get __noSuchMethod__ function::prop (__count__) { return <x><y/></x> } : __proto__ }) = __parent__ = * >>>=eval(\"~prop.__iterator__\", default: gc()break; )) { case ( /* Comment */__noSuchMethod__.__proto__ = <x><y/></x>): gc()break; case 5: export *;break; return;return null;default: case 2: break; case 2: if( \"\" ) { if (false) throw <y><z/></y>;} else <x><y/></x>;break; case 5: case 8:  }");
tryItOut("if(( <= prop.hasOwnProperty(\"__proto__\"))) { } else  if (<x/> for each (prototype in true) .@ (__parent__.eval(undefined))) {export __count__;let __noSuchMethod__, __iterator__; } else if(4.) { if (#3={a:#3#}) {gc(); } else yield \t<x><y/></x>;}");
tryItOut("try { throw StopIteration; } catch(prop if (function(){let (__count__ = __iterator__ = [[1]] | <x/>, prop = prototype = constructor) { continue L; }})()) { throw __iterator__; } catch(prop) { with({}) throw StopIteration; } ");
tryItOut("return;");
tryItOut("if((this.zzz.zzz)) {return (-0);(*); } else  if ((__proto__ = * ==  /x/  >> ({constructor: __proto__.prop}))) let (prototype = <y><z/></y>) {  } else {let (__count__ = [z1], __iterator__ = <x><y/></x>) { return <x/>; } }");
tryItOut("L: {const prop;function(y) { yield y; /*infloop*/for(3; 0/0; <x><y/></x>) gc(); yield y; } }");
tryItOut("__parent__");
tryItOut("L: var __noSuchMethod__\n");
tryItOut("/*for..in*/for(let prototype in ((function(y) { yield y; export prop;; yield y; })(#1=({__count__: this}))))break ; const __proto__;");
tryItOut("export *\n");
tryItOut("({ __noSuchMethod__: __parent__, __iterator__: __parent__ }) = __iterator__;");
tryItOut("do {let (__iterator__, prop = 0/0) { ( '' ).call }\tconstructor = prop; } while((new (constructor = *::*)(__parent__ = <x/>)) && 0);");
tryItOut("yield;");
tryItOut("if(__noSuchMethod__) export constructor; else {throw __iterator__;break ; }");
tryItOut("/*infloop*/L:for(let ({ __count__: function::__proto__ }) = <><></></>; prototype = <x/> ? *::* : 1e81.eval(<x><y/></x>); <><xxx>{prototype}</xxx></>) {/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in prop = <><x><y/></x></>) {function(y) { yield y; var //h\n__count__ = __iterator__;; yield y; } }yield #1#; }");
tryItOut("/*infloop*/while((yield [,,z1]//h\n)){/*for..in*/L:for(const __noSuchMethod__ = new (@foo)(<x/>) in (function ([y]) { })()) {<x><y/></x>; } }");
tryItOut("with({}) prototype setter: function(y) { yield y; throw throw 0.1;;; yield y; }");
tryItOut("return;");
tryItOut("export *;");
tryItOut("let(__proto__, yield  { return let (__proto__ = prop, prototype) 1e+81 }  %= <x><y/></x>;) ((function(){prop = constructor;})());");
tryItOut("/*for..in*/for(let [__noSuchMethod__\f, ] = <zzz>(prototype.__proto__ <= true.@* %= [[]].yoyo(#3={a:#3#}).constructor)</zzz> in #0=({prototype: this})--) {/*infloop*/M:while(this){yield;gc() }L:if(<><x><y/></x></>) { if ([1,,]) {export *;var __count__, constructor; } else {export constructor; }} }");
tryItOut("if( /x/ ) { if (function(y) { yield y; continue ;; yield y; }(@foo, 033)) this;} else yield <y><z/></y>;");
tryItOut("throw StopIteration;");
tryItOut("with(#3={a:#3#})");
tryItOut("switch(<x/>.valueOf(\"number\")) { default: export __proto__; }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/L:for(let [prototype, __parent__] = ({__proto__: prototype.(<><x><y/></x></>) }) in 5.0000000000000000000000.watch(\"__parent__\", gc).propertyIsEnumerable(\"prop\")) if([z1]) {yield *;export constructor; }");
tryItOut(" \"\" ['__noSuchMethod__'] = prototype;");
tryItOut("Function");
tryItOut("/*infloop*/for(let ({ prop: ({ prop: ({ constructor: constructor, constructor, __noSuchMethod__: [] }), __parent__: ({ __noSuchMethod__: [({ prop: (window)(<y><z/></y>), __iterator__: ({ __count__: __count__, prototype: [] }) })] }) }), constructor: [, , [({ prototype: (window)(window) }), , ({ __iterator__: ({ constructor: __noSuchMethod__, each: (__iterator__)(<><x><y/></x></>) }), __count__: ({ __proto__: arguments }) }), , [, ({ __count__: constructor([1]) })]]]\f }) = window; <x><y/></x>.constructor; ((1e+81.throw(.2)(<><x><y/></x></>.eval(true)))( /* Comment */prop)--)) {/*infloop*/for([z1]; <x><y/></x>;  /x/ ) true }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if(this.zzz.zzz) {}\n");
tryItOut("if( '' ) { } else /*for..in*/for(const __count__ in ((([]).watch)(<><x><y/><\f/x></>)))yield;");
tryItOut("/*infloop*/for(var __parent__ = [11,12,13,14].filter ? (\n@foo) : 1.2e3 , __proto__; window; @foo ? <x><y/></x>[__proto__] : arguments) {function (__noSuchMethod__, __parent__) { yield @foo }  }");
tryItOut("/*infloop*/for(let __noSuchMethod__; (window.valueOf(\"number\")) % ([15,16,17,18].map('haha'.split, (<x><y/></x>)(__proto__))); @foo *= (<x><y/></x> !== 5.0000000000000000000000)) export constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in  /x/g ) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in [(*).yoyo((-1 == *))].map([1,2,3,4].map)) {yield;if(#1=[#1#]) {export __proto__;const function::constructor, __noSuchMethod__ = __count__; } else  if (<x/>) {return; } }");
tryItOut("let(constructor = undefined(), __count__ = __parent__ =  '' ) ((function(){let(prop, __parent__) { return throw 0;})());");
tryItOut("if(function  'haha'.split (prototype, constructor) { __iterator__ = <y><z/></y>; } ) __parent__ else {yield;(true); }");
tryItOut("{M:if(*.__lookupSetter__(\"prop\")) {window(-1); } else  if (<x/>.@*) {gc() }/*infloop*/for(var ({ function::__count__: let(function::__count__ = (__iterator__.__count__ = 1e4), __proto__ = (/*\n*/<x/>.__lookupGetter__(\"__iterator__\"))) ((function(){return (<x><y/></x>);})());, prop: [, __parent__, , , ] }) = new ((1 for (x in [])))(); (gc)(<x><y/></x>); (({prop: __count__ = [1,,],  get ({ function ([y]) { }: constructor, __noSuchMethod__: __count__ })(__count__)<x><y/></x> }).valueOf(\"number\"))) {let constructor = 1e+81, __proto__;{} } }");
tryItOut("/*infloop*/while(<x><y/></x> % <x><y/></x>)export *;");
tryItOut("/*infloop*/for(var constructor; [1]; (this.__defineGetter__(\"__parent__\",  \"\" ) / function  __noSuchMethod__ ()/*\n*/ { export prop; } )) L:with({__noSuchMethod__: ({__noSuchMethod__: false, each: <><x><y/></x></> })}){__proto__ = @foo, __proto__ =  '' ; }");
tryItOut("export *;\ncontinue ;;\n");
tryItOut("/*for..in*/for(__noSuchMethod__.prototype in ((eval)(<x/> , (( /x/g  for (__noSuchMethod__ in <><x><y/></x></>)) for each (__iterator__ in __proto__))))){continue  }\t");
tryItOut("switch(true <= ({a2:z2})) { default: case 8: case constructor: export *;\nwith(false)throw false;\nbreak; ;case (function  __proto__ () { return this } ).call(*::*, <y><z/></y>, window) &= __proto__: break; case 9: const prototype;gc() }");
tryItOut("M:if( '' )  else {let (__noSuchMethod__) { return; }/*infloop*/for(const __noSuchMethod__; <x/>; *) {return <x/>; } }");
tryItOut("");
tryItOut("switch(#0=({prototype: window})) { default: const __iterator__; }");
tryItOut("yield [z1,,];");
tryItOut("<x/>");
tryItOut("return true;");
tryItOut("if(new (/a/gi)()) { if () {/*for..in*/for(const __parent__ = <><x><y/></x></> in 3.141592653589793) {return true; }/*infloop*/for(let __iterator__; this;  /x/g ) throw <x><y/></x>; } else {return; }}");
tryItOut("L: {/*infloop*/M:for(@foo.__proto__; \f \"\" ; __iterator__ |= <><x><y/></x></> ? __noSuchMethod__ : Array(033).isPrototypeOf(([,] ^= <x><y/></x>))) {var prototype, __proto__; } }");
tryItOut("for(let y in []);");
tryItOut("if([[]]) {continue M; } else ");
tryItOut("if(((new Function(\"export *;\"))(({ prototype: ({ prototype: prototype, __proto__: prototype }), constructor: constructor }) =  ? <y><z/></y>.propertyIsEnumerable(\"constructor\") : <y><z/></y>, [15,16,17,18].map([1,2,3,4].slice, <x><y/></x>)))) {throw <><x><y/></x></>; } else /*for..in*/for(const (__proto__) in *::*) {<><x><y/></x></>; }");
tryItOut("let (({ prototype: constructor }) = (*)(__proto__).__defineGetter__(\"constructor\", (true.__defineGetter__(\"__count__\", <y><z/></y>)).watch)) { yield  ? (new false(*)) : <y><z/></y>.propertyIsEnumerable(\"__proto__\"); }");
tryItOut("/*for..in*/for(const [constructor, __proto__] = (<x/> if (\f<><{__iterator__}>yyy</{__iterator__}></>)) in (__proto__ = (-0)) < <><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", ({ __proto__: __noSuchMethod__ }) = [11,12,13,14].filter)[ /x/g  <= window]) {__noSuchMethod__; }");
tryItOut("if(<x><y/></x>)  else  if (true) {\fprop; } else {return; }");
tryItOut("if(<><x><y/></x></>) {let __count__ = <x><y//h\n/></x>, prop = <y><z/></y>;; }");
tryItOut("throw <x/>;");
tryItOut("/*infloop*/for(const __iterator__ = __count__; ({__count__: <x><y/></x> }); new Object(<x/>, <><x><y/></x></>)) {(<x><y/></x>).watch }");
tryItOut("if( /x/g ) yield; else  if (4..throw(new 1e-81(<><x><y/></x></>, window))) { } else M:if((__noSuchMethod__).watch) {return undefined;constructor = @foo; } else  if (null)  { return (-0); } ");
tryItOut("; const __count__");
tryItOut("yield \n;");
tryItOut("let(__iterator__) ((function(){yield ((<><x><y/></x></> for (__count__ in <x><y/></x>)));})());");
tryItOut("/*for..in*/for(let constructor in <x><y/></x>) {export *;do {throw true;var prop = __parent__, prop = 1.3; } while(( /x/g ) && 0); }\nif(window) { if (<><x><y/></x></>) return <x><y/></x>;} else {var __count__;export *; }");
tryItOut("{if('fafafa'.replace(/a/g, function (__proto__, constructor) { return <><x><y/></x></> } ).__lookupSetter__(\"prototype\")) if(new true) { if (5.0000000000000000000000 for each (__proto__ in 1.2e3)) __noSuchMethod__;} else {export *; } }");
tryItOut("with({}) throw StopIteration;\nif(<x/>) { if (this) {export *; }} else return;\n");
tryItOut("(<x><y/></x>);");
tryItOut("/*for..in*/L:for\f(const prototype in ((/a/gi)([1])))yield;");
tryItOut("M:(p={}, (p.z = ([<>prop, constructor</> for each (__count__ in *)]))())) do {{}return <y><z/></y>; } while(((Math.sin)) && 0); else  if (<x/>.__proto__ case 3: ) ");
tryItOut("/*infloop*/do return; while(@foo);");
tryItOut("{(@foo);var prop = <x/>; }");
tryItOut("/*for..in*/for(const [prototype, __noSuchMethod__] = __iterator__.__noSuchMethod__ = ({a2:z2}) >>>=#1=[#1#]\r in ((eval)())(([11,12,13,14].map)[ /x/ ], 5.0000000000000000000000)) while((1.3 :: undefined) && 0)export constructor;");
tryItOut("if(<x><y/></x>) export *; else prototype");
tryItOut("/*infloop*/do {;{;export constructor; } } while(((yield undefined.isPrototypeOf((( /x/  != this) < (p={}, (p.z = true)())))) /= this.zzz.zzz));");
tryItOut(" for (__parent__ in __count__(this.zzz.zzz)) for each (__proto__ in ([this.zzz.zzz]))");
tryItOut("if(Boolean(<><x><y/></x></>, *)) { if (prototype = constructor = let) {export __count__;; }} else var prototype =  \"\" ;");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; true.unwatch(\"__iterator__\") >=  \"\" .eval(null); Number((p={}, (p.z = ((p={}, (p.z = prop)())))()))) {{} }");
tryItOut("L:if(0) { if (<y><z/></y>) if({}) { if (window) yield; else {const __iterator__ = <x><y/></x>, prototype = 033; }} else {/*for..in*/for(const [__noSuchMethod__, prototype] = (__count__.(this)) in *) {([1,,]);; }break L; }}");
tryItOut("/*for..in*/for(prototype = [[1]] in 1e+81) gc()");
tryItOut("/*for..in*/for(const function::constructor in <x><y/></x>) {const <><x><y/></x></> = *; }");
tryItOut("/*infloop*/do const constructor, __parent__; while(/a/gi());");
tryItOut("if(#2=({__proto__: (\nyield this) |= Function(true >>= this) >>  \"\" })) {/*infloop*/for(let __parent__; __proto__; window) throw 3/0; } else  if ((({ prop: prototype }) = (1 for (x in [])))([11,12,13,14].sort) ? new <><x><y/></x></>.unwatch(\"__count__\") : eval(\"()\", (__iterator__.prototype = (*)[\t[1].throw(*::*)]))) gc() const __noSuchMethod__; else \f{if(<x/>) {yield window; } const __proto__; }");
tryItOut("{L:if(<x><y/></x>.(-0)) { if (eval(\"0\", <x><y/></x>)) let __iterator__;} else throw <><x><y/></x></>; }");
tryItOut("switch(__noSuchMethod__) { case  /x/ : break;  }");
tryItOut("with({}) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in (eval(\" '' \", 0.1))) {Function }");
tryItOut("if((void <><xxx {__parent__}={((@foo for (__parent__ in <><x><y/></x></>)))} /></>)) {{throw @foo;export *; } }");
tryItOut("if(( /* Comment */<x><y/></x>)) {throw <x><y/></x>; } else  if (true << true) {}");
tryItOut("if((<y><z/></y> = <x><y/></x>)) {export prop; } else  if (__count__) throw window;");
tryItOut("/*infloop*/for((({__count__: __count__})) = (String(__count__) for ((__count__) in -3/0)); let (__count__ =  {  } ) throw __iterator__; &= (!([11,12,13,14].some)); this.__defineSetter__(\"function::prototype\", new Function)) export (__count__);");
tryItOut("if([@foo for each (__proto__ in  '' )])  else  if (3.141592653589793) this else export prototype;\nthrow <>__parent__</>;\n");
tryItOut("return\n");
tryItOut("[z1,,];");
tryItOut("if(5.0000000000000000000000 < this) { if ((new new [1,,].__defineGetter__(\"constructor\", <><x><y/></x></>)())) yield;} else {<x/>;; }");
tryItOut("export prototype;\nif(<><x><y/></x></>) {@fooyield <y><z/></y>; } else  if ( \"\" ) {continue ;let __parent__, __count__ = *; } else {(<><x><y/></x></>);function (__noSuchMethod__, __count__) { ; }  }\n");
tryItOut("/*infloop*/for\r(const __proto__;  /x/g .watch(\"function::prop\", try { continue L; } catch(prop) { const __parent__ = __noSuchMethod__, __count__; } finally { {} } ).constructor; ) {3.141592653589793;continue M; }");
tryItOut("if(({a2:z2})) ");
tryItOut("M:if(__noSuchMethod__ = *::*.watch(\"__proto__\", Math.sin)) {with({prop: (Function).call(__parent__, function(id) { return id })}){export * }return <x><y/></x>; }");
tryItOut("if(window) {let __parent__, prop = <x><y/></x>; } else  if (null.unwatch(\"__noSuchMethod__\")) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __proto__ in  \"\" ) {yield <><x><y/></x></>; }var __parent__ = window, __noSuchMethod__ = <><x><y/></x></>; } else return;");
tryItOut("do {gc() } while((window) && 0);");
tryItOut("with({__parent__: (true.__lookupSetter__(\"prop\"))}) { return ((yield null.propertyIsEnumerable(\"__iterator__\"))) } ");
tryItOut("/*infloop*/L:while(<x/>)prop = __parent__;");
tryItOut("while(([11,12,13,14].sort + yield *::* ? (function(q) { return q; }(prototype, <x><y/></x>)) : yield *) && 0){/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in null) throw false; }");
tryItOut("if((yield (yield constructor\t = [].valueOf(\"number\")))) { if (3) /*for..in*/for(const [__iterator__, __parent__] = (let (set = [,,]) <><x><y/></x></>) in null) {yield;continue M; } else {/*for..in*/L:for(var __count__ = ![1e+81] in <y><z/></y>) undefined }}");
tryItOut("with(0)yield this;");
tryItOut("/*for..in*/for(let __count__(false) in @foo) {export __parent__; }");
tryItOut("if(<y><z/></y>) {return <y><z/></y>; } else  if ([z1,,]) {yield; } else {const prop = 033;throw <y><z/></y>; }");
tryItOut("{return;const prop; }");
tryItOut("yield <><ccc:ddd></ccc:ddd></>.({} for each (__iterator__ in arguments));");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = window in <x><y/></x>) return null;");
tryItOut("/*for..in*/for(var [constructor, constructor] = *::* in <x><y/></x>.\t(<x><y/></x>)) {const constructor, prop = false;throw <y><z/></y>; }");
tryItOut("L:with({__iterator__: this.__defineGetter__(\"__parent__\", Math.sin)}){{}yield 1e-81; }");
tryItOut("M:if(eval(\"export *;\", *::*).throw( \"\" .isPrototypeOf(<><x><y/></x></>))) { if ((<><x><y/></x></>.eval(false))) { } else }");
tryItOut("if(true) {export prototype;return this; } else  if (let (__noSuchMethod__, __noSuchMethod__) window) {(<><x><y/></x></>); } else \n__iterator__, __noSuchMethod__;");
tryItOut("switch(this.__defineGetter__(\"prototype\", (new Function(\"return __proto__;\")))) { case __iterator__: while(((eval(\"<><x><y/></x></>\", arguments) *= __proto__ = (function ([y]) { })())) && 0){yield __proto__;; }case 6: var __parent__ = -3/0;break; break; default: return; }");
tryItOut("throw  /x/g ;");
tryItOut("L:with({__count__: ({})}){gc() }");
tryItOut("/*infloop*/for(const ({ constructor: ({ __count__: prop }), __count__: ({ __proto__: ({ __noSuchMethod__: ({ __count__: __count__, __parent__: __parent__ }) }) }) }) = (new 'haha'.split()); __parent__ = (new window(function::__proto__)); n) break ;");
tryItOut("if(false :: @foo) {const getter, __iterator__; }");
tryItOut("throw __iterator__;");
tryItOut("do /*for..in*/for(const __proto__ in ((new Function)( /x/ )))throw window; while((( ''  = null)) && 0);");
tryItOut("\tif((0x99 -= @foo)) {gc()if(.2) return; else  if (function ([y]) { }) {'haha'.split } else ;/*\n*/ }");
tryItOut("{return;let __noSuchMethod__ = window, __iterator__ = 0; }");
tryItOut("/*infloop*/M:while(\tprop = null){yield 5.0000000000000000000000;@foo; }");
tryItOut("(1 for (x in []))");
tryItOut("do {/*infloop*/L:for(prototype; this; [z1,,]) {return <><x><y/></x></>; }{{} } } while(((function(y) { yield y; ; yield y; } += <x/>)) && 0);");
tryItOut("if(1.3) { if ([,]) {const __noSuchMethod__;{} }} else {return <x><y/></x>;([1,2,3,4].map).call }while((<><x><y/></x></>) && 0)new Function");
tryItOut("/*infloop*/for(var ({ __parent__: ({ __proto__: ({ __noSuchMethod__: ({ __noSuchMethod__: [[__proto__, , ], , __count__] }), __proto__: ({ constructor: ({ __iterator__: ({ __proto__: prototype, prop: __iterator__ }) }), __count__: L:switch(<>prop: __parent__ =  /x/ </>) { case <y><z/></y>: return *::*; } }) }) }), prototype: [, ] }) = this.__defineSetter__(\"__proto__\", ((__iterator__ = __count__)).watch) .@ eval(\"<x><y/></x>\", <x/>).eval(({constructor: <y><z/></y>})); <x><y/></x>.(<y><z/></y>); <y><z/></y>) {if(<x><y/></x>) { if (<y><z/></y>) {var __count__;__proto__ = 033; } else (-1)}/*infloop*/do yield; while((yield [[]] <<= *::*).__defineSetter__(\"prototype\", 'haha'.split)); }");
tryItOut("/*infloop*/do /*infloop*/for(var prop = <><x><y/></x></>; \n<x><y/></x>; <x><y/></x>) var __count__ = *::*; while(([] = ({ prototype: prop, __proto__: constructor })));");
tryItOut("/*for..in*/L:for(var constructor in *::*) {export *; }");
tryItOut("/*infloop*/for(String(<><x><y/></x></>, <x/>); new (prototype)(undefined, <x/>); __parent__.yoyo(1e4)) gc()");
tryItOut("{/*infloop*/while((<><x><y/></x></>.hasOwnProperty(\"constructor\"))){{}continue ; } }");
tryItOut("if((prototype = *::*)) {(yield).__defineSetter__function  constructor (prop)r }");
tryItOut("/*for..in*/for(const __proto__ in  /x/ ) {}\t");
tryItOut("/*infloop*/M:while(({ get __parent__() { constructor(window) }  }))export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in true) export __noSuchMethod__;");
tryItOut("let (__iterator__ =  /x/g ) { export *; }");
tryItOut("/*for..in*/for(let __parent__.__count__ in delete <{__count__}> </{__count__}>.((({__iterator__: 5.0000000000000000000000, __parent__: this })))) {yield [[]]; }");
tryItOut("M:if(<><zzz> /x/ </zzz></>) L:if(__parent__) { if ( /x/g ) {{} }} else {}");
tryItOut("switch((<><x><y/></x></>.__proto__)) { default: {var __proto__; }break; switch(prop) { case <y><z/></y>: break;  }#1=[#1#];case __parent__+=__iterator__: {} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in ((<><x><y/></x></>.hasOwnProperty(\"prototype\"))[*])) do  while((this) && 0);");
tryItOut("while(((new Function(\"/*for..in*/for(let __noSuchMethod__ in ((function(q) { return q; })(prop))){return <><x><y/></x></>;throw window; }\"))()) && 0)break L;");
tryItOut("/*infloop*/L:while(this.__defineGetter__(\"__iterator__\", function (__iterator__, __iterator__) { export *; } )){yield; }");
tryItOut("M:with(let (__noSuchMethod__) (function ([y]) { })())/*for..in*/for(let prototype = <><x><y/></x></> in this) {throw <x><y/></x>;return 1e81; }");
tryItOut("L: /*infloop*/M:for(const __proto__; 5.0000000000000000000000;  /x/g ) const __proto__ =  '' ;");
tryItOut("if(this) (.2);");
tryItOut("\f/*for..in*/for(const __noSuchMethod__ in *::*) /a/gi\narguments\n\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in {}) break L;");
tryItOut("/*for..in*/for(let __proto__['__proto__'] in <x><y/></x>++) {<x><y/></\fx>; }");
tryItOut("constructor = prototype;");
tryItOut("if((delete ((yield function ([y]) { })))) {break ;return; } else  if (Error((0/0))) {return;break ; }");
tryItOut("/*infloop*/for(let __iterator__; __iterator__ = prop; __parent__+= \"\" ) yield 1e81;");
tryItOut("<x><y/></x>");
tryItOut("__proto__ = __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(var ({ constructor: (false)(<><x><y/></x></>) }) = __noSuchMethod__.prototype = window; ((uneval(#1=[#1#])).throw(<x><y/></x>)); (yield \r /* Comment */[1,,])--) {while(((function ([y]) { }.prop)) && 0){(<x/>).__defineSetter__gc() } }");
tryItOut("/*infloop*/while( '' ){break ; }");
tryItOut("/*for..in*/for(const constructor =  /x/g  in <x/>()) //h\n{if(<x/>.@foo) throw <x><y/></x>; }");
tryItOut("/*infloop*/for(var prop = window .. true; (--<x/>); ({ __proto__: __proto__ }) = new (<><x><y/></x></> = <x><y/></x>)( '' , *::*)) export __noSuchMethod__;");
tryItOut("switch( '' ) { default: break; case <> set __count__ __count__ (prop, __iterator__)<y><z/></y></>: continue L;<x><y/></x>case 7: break; ;var __count__ = false, prop;break; case false: break;  } const __noSuchMethod__;");
tryItOut("L:if(.2) { if (<x/>) {yield; } else {let prop, __parent__ = <><x><y/></x></>; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in [,] / <><x><y/></x></>) {yield *::*; }");
tryItOut("if(__iterator__.prototype =  /x/ ) {__noSuchMethod__; }");
