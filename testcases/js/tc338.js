tryItOut("/*for..in*/for(__count__ = undefined in window) {export \r*; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = ([11,12,13,14].filter.prototype) in (prop-=<x><y/></x>)) prop, constructor;{}");
tryItOut("function::__parent__, __parent__ = <x><y/></x>;");
tryItOut("if(__proto__) /*infloop*/M:for(({ __iterator__: ({ prop: [, ], prototype: __parent__ }) }) = yield <y><z/></y>; 'fafafa'.replace(/a/g, function  __parent__ () { return window } ); -0) throw  '' ; else {arguments;do throw <x><y/></x>; while((<><xxx {constructor}={<x/>} /></>) && 0); }");
tryItOut("if(<x><y/></x> for (__proto__ in @foo) ||  /x/g (<x><y/></x>).__count__ = prop.(4..valueOf(\"number\"))) yield 'fafafa'.replace(/a/g, (new Function(\"break L;\")));");
tryItOut("/*for..in*/L:for(var __parent__ in (this.zzz.zzz)) throw  /x/g ;");
tryItOut("L:if((<xxx {constructor}={((<><x><y/></x></> % *).throw(__proto__ = __noSuchMethod__))} />.(yield;))) { if ((__parent__.__count__)) /*for..in*/M:for(var __parent__ in *::*) export __count__; else }");
tryItOut("/*for..in*/for(__count__ in ((function  __iterator__ () { yield (this((<xxx {prop}={null--} />.((!*))), (new (<y><z/></y>)(<x><y/></x>, arguments)))) } )(yield (<><x><y/></x></>).__iterator__\n))){export *; const __proto__;{} const prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if(<\nzzz> /x/g .eval( /x/g )</zzz>.isPrototypeOf(((yield @foo)))) M:if(<></>) {} else  if ((0)()) {continue ;;constructor, __parent__ = true; } else export *; else  if (function () { const __noSuchMethod__ = <x><y/></x>; } ) yield 1e81; else gc\ngc\n");
tryItOut("let (__count__ = <><x><y/></x></> .. *::* ? this.zzz.zzz : __proto__) { prototype; }");
tryItOut("M:if(([[1]] || false)) { if ((#3={a:#3#}.valueOf(\"number\"))) {gc()return; }} else gc()");
tryItOut("/*infloop*/for(prototype = (((yield prototype, __noSuchMethod__ = __parent__.isPrototypeOf(<><x><y/></x></>))) << Exception()); <><x><y/></x></> <<= [z1]; (__noSuchMethod__.__proto__ setter= function  delete (__proto__) { yield (({ prototype: ({ prop: __count__ }) }) = [11,12,13,14].some.*) } )) {;if(0x99[*]) { if ([undefined for each (constructor in prop)]) {throw 3/0;let __count__ =  '' ; } else { }} }");
tryItOut("if((<x><y/></x> / <x><y/></x>).__parent__ = <x/> ?  \"\"  : <><x><y/></x></>) { if (this.__defineSetter__(\"constructor\", prototype)) {export *;\nthrow <><x><y/></x></>;\n\ngc() } else {var __noSuchMethod__;export prototype; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in ) {yield __iterator__; }");
tryItOut("constructor, __count__ = __parent__; const ;");
tryItOut("yield (__noSuchMethod__ = @foo);");
tryItOut("L:switch((({__noSuchMethod__: false}))) { case (yield <>\r<x><y/></x></>): return <x><y/></x>;case 3: throw 1.3;export *;break; default: break; export *;break; {}break; (@foo);case Object():  }");
tryItOut("/*for..in*/for(const [prop, __noSuchMethod__] = [] = prototype in <x><y/></x>) \n__iterator__ = arguments, prototype;");
tryItOut("/*for..in*/L:for(const [__iterator__, constructor] = -<><x><y/></x></> in  '' ) ");
tryItOut("prototype = prototype;");
tryItOut("/*infloop*/do {L:if(new (({a2:z2}).yoyo(undefined))(*::* .@x:: <><x><y/></x></>, <><x><y/></x></> ^= ({a1:1}))) { if (prop =  '' ) {throw <><x><y/></x></>;break ; }} else function(y) { yield y; const __proto__, constructor = <x><y/></x>;; yield y; } } while((new (new (true)(<><x><y/></x></>))().__iterator__));");
tryItOut("/*infloop*/for(let prop; new RangeError(String(), -0 %= *); <>__count__</>.constructor = null for each (__proto__ in {0.1 }) for each (__noSuchMethod__ in  /x/ )) {yield;<employee id=\"1\"><name>Joe</name><age>20</age></employee> }");
tryItOut("if(__iterator__) {yield this;([,,]); } else {export constructor; }");
tryItOut("__count__ = <x/>, constructor;");
tryItOut("throw StopIteration;");
tryItOut("switch(try { return  \"\" .isPrototypeOf(#1=[#1#]); } catch(constructor if \t(function(){with({}) break M;})()) { __parent__ = constructor; } finally { return new *::*(); } ) { case <><x><y/></x></>.@foo: break;  }");
tryItOut("switch(window) { case 7: return;export *;break; (window); }");
tryItOut("switch(({ __iterator__: __iterator__, prototype: __iterator__ }) = ({ constructor: prop, constructor: prototype })) { default: const __proto__ = window; }yield;");
tryItOut("throw ({a1:1});return (<x/> <= 0/0);");
tryItOut("__proto__");
tryItOut("\n");
tryItOut("if(prototype) { if (<y><z/></y>)  else {3;throw 3/0; }}");
tryItOut("switch(<y><z/></y>) { default: gc()case __noSuchMethod__: break ;case <x><y/></x>: continue ;{}break; (*::*);break; break; case 7: break;  }");
tryItOut("break ;\nlet __parent__ = window;\n");
tryItOut("/*for..in*/for(const prop.__proto__ in ((eval)(<{__iterator__}></{__iterator__}>)))with(<x><y/></x>.(__iterator__))yield;");
tryItOut("/*for..in*/L:for(let prop = [1,,] ? this : 3 || constructor % #1# in  @ <><x><y/></x></>) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var (null)(window) in [,,z1]) {export constructor;(/a/gi).call } }");
tryItOut("L: {{ }continue L; }");
tryItOut("/*infloop*/do {if(new (yield <x><y/></x>)(prop--, yyy)) export *; } while(((Function) +  /* Comment */(({__proto__ getter: (prototype).watch })).isPrototypeOf(* & true)));");
tryItOut("if(__iterator__) { if (0.1 , ((yield (this.zzz.zzz))) = ({ set __proto__(__parent__) { return @foo } , __count__: true }).propertyIsEnumerable(\"__iterator__\")) {/*infloop*/for(let  = <x><y/></x>; 0.1; __proto__) {continue ;constructor; } } else do (undefined); while(([*].map([1,2,3,4].slice)) && 0);}");
tryItOut("return <x><y/></x>\n{if(<><x><y/></x></>) gc() else gc() }");
tryItOut("this.zzz.zzz;");
tryItOut("__count__ =  { return __iterator__ } ");
tryItOut("{yield\n\nconst   ''  [] = 5.0000000000000000000000, __count__; }");
tryItOut("<x><y/></x>\n/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in *) {yield; }\n");
tryItOut("(<x/>);");
tryItOut(";");
tryItOut("/*infloop*/for(eval(\"var __iterator__ = #1#\", \nnull); (__proto__ = <><x><y/></x></>); let (__parent__ = <><x><y/></x></>, __iterator__) .2) {(1 for (x in []))*::*; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x/>) const __noSuchMethod__ = <><x><y/></x></>, constructor = false;");
tryItOut("L:while(([15,16,17,18].sort(function  prop (__proto__, prototype), <><x><y/></x></>.isPrototypeOf(this))) && 0)(1e+81);");
tryItOut("default: break; break; M:with({__parent__: ((<y><z/></y> || arguments).__lookupGetter__(\"constructor\"))})return (1e-81));case (__parent__ = <x><y/></x> >> <><x><y/></x></> :: (yield prop = false)): case 2: /*for..in*/for(__noSuchMethod__ in (((new Function(\"return;\")))(@foo)))switch(__count__ = __count__) { case 1:  }");
tryItOut("let(__parent__ = (p={}, (p.z = <x><y/></x>)()).isPrototypeOf(true .@*:: <><x><y/></x></>), [__parent__]) { for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("{function ()<x><y/></x> }");
tryItOut("constructor = prototype;");
tryItOut("/*infloop*/do {return;return  '' ; } while(__noSuchMethod__ = (__count__ = constructor));");
tryItOut("{return; }\n const prop;");
tryItOut("export *;");
tryItOut("if( '' ) { if (<>try { var prototype = <y><z/></y>; } catch(__count__) { *::*; } </>) []; else <y><z/></y>;}");
tryItOut("do return; while((@foo) && 0);");
tryItOut("export *;");
tryItOut("L:if(<><x><y/></x></>) { if (__parent__) {return;var __count__ = *::*; }} else var prototype = <x><y/></x>;");
tryItOut("L:if(3) { if (\n(0)) gc()} else {gc()export __parent__; }");
tryItOut("return;");
tryItOut("return *::*;");
tryItOut("if( '' .__iterator__.__defineSetter__(\"x::__proto__\", Math.pow).hasOwnProperty(\"__parent__\")) /*for..in*/for(var __noSuchMethod__ = function(id) { return id } in prototype) ; else  if (this) {export prototype; }");
tryItOut("if( \"\"  < 1e4) {return; }");
tryItOut("M:if(this.__defineGetter__(\"constructor\", Math.sin) ? this : [11,12,13,14].map) {/*for..in*/for(const window ? window : <><x><y/></x></>['prop'] in ((function  __count__ ([({ __iterator__: prototype, __iterator__: prototype }), , ({ __iterator__: __proto__ })])Error(prop))([11,12,13,14].map ? __iterator__ = 0x99 : this--))){const prototype = *::*;{} } } else  if (__noSuchMethod__.constructor = new ( '' )(<x><y/></x>)--) if(__noSuchMethod__) {(<x/>);export constructor; } else  if (*) {yield <x><y/></x>; }");
tryItOut("/*infloop*/while([<y><z/></y> for each (constructor in <><x><y/></x></>)])window, this");
tryItOut("L: {__iterator__;break M; }");
tryItOut("/*infloop*/L:while(((new Function).call(prototype = 1e4,  /x/ )) >> * || <x><y/></x>){/*for..in*/L:for(let prop = eval(\"4.\", __proto__ =  /x/g ) in constructor.watch(\"function::__noSuchMethod__\", (function () { yield <x><y/></x> } ).apply)) {null;export *; } }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = window ? __iterator__ :  \"\" ; (<x/>).call(); (this.eval(this))) const __iterator__ = prop, __iterator__ = 3.141592653589793\nexport __proto__;");
tryItOut("if(({ __parent__: each }) = new Exception(@foo, 4.)) export *; else  if ((function::__proto__(<x/>, <y><z/></y>)) < ({__iterator__: window })) {/*for..in*/for//h\n([__count__, __iterator__] = (__iterator__.(*::*)) in <x><y/></x>) /a/giexport prototype; }");
tryItOut("/*for..in*/for(let __iterator__ in __count__) var constructor;");
tryItOut("/*for..in*/for(const  /x/ .__proto__ in ((/*\n*/({}).hasOwnProperty)(~*.__defineSetter__(\"prop\", /a/gi)))){return prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in  /x/g ) {export *;(1 for (x in [])) }");
tryItOut("/*infloop*/for(__noSuchMethod__; window[ /x/g ]; this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)) return;");
tryItOut("/*for..in*/for(__noSuchMethod__ in (('haha'.split)(let ( if (new (1 for (x in []))(function(id) { return id }, <y><z/></y>))) #1=[#1#] .@*:: *::*))){export __count__; }");
tryItOut("throw StopIteration;");
tryItOut("{}");
tryItOut("with(__proto__){; }");
tryItOut("{M:if(__noSuchMethod__%=([true for (__proto__ in 0x99)]) , <x><y/></x>.( /x/g ) ? ({a1:1}) : window.isPrototypeOf(<><x><y/></x></>)) (((@foo)()));switch(5.0000000000000000000000) { <><x><y/></x></>, (-1) } }");
tryItOut("//h\nif(()) { for each (prototype in constructor)/*for..in*/M:for([__iterator__, constructor] =  \"\"  >>>=*::* in <x><y/></x>) {break ;; } } else  if ((<><x><y/></x></>.false).__lookupGetter__(\"__parent__\")) ");
tryItOut("break M;\nlet __proto__, __proto__;\n");
tryItOut("/*infloop*/while((function ([y]) { })()){;gc() }");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {yield (<x><y/></x>.hasOwnProperty(\"__parent__\")); } else  if ([, , , ({ __iterator__: __proto__, prop: null }), \t] = ( \"\"  >>=  '' ((prop)))) {export *;do {} while((<x><y/\f></x>.__noSuchMethod__) && 0); }");
tryItOut("if(prop = [[1]]) return undefined; else  if (((1 for (x in [])))(<y><z/></y> != .2, <y><z/></y>)) __noSuchMethod__");
tryItOut("/*for..in*/for(let __proto__.__count__ in prop) if((#1=[<x><y/></x>])) {;export __proto__; } else  if (( '' .__defineSetter__(\"constructor\", ({}).hasOwnProperty))) null;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("return export __count__.isPrototypeOf((({constructor: #1#})));");
tryItOut("while((prototype << constructor.__count__\f.__lookupSetter__(\"__parent__\")) && 0){if([15,16,17,18].some(function  constructor (__iterator__, __iterator__) { return <><x><y/></x></> } , window)) {throw <x><y/></x>\t;export __proto__; } else {<><x><y/></x></>;return constructor; } }");
tryItOut("return;\nbreak M;\n\nwith(prototype = ({__noSuchMethod__: ([1])(<x/>), __parent__ setter: (({}).hasOwnProperty).apply })){{} }");
tryItOut("(1 for (x in []))");
tryItOut("M:do {/*for..in*/L:for(__parent__.constructor in window) this;yield\nlet function::__iterator__ = undefined, __iterator__ = <x><y/></x>; } while(((__noSuchMethod__.__parent__ setter= <xxx {__proto__}={function::__count__} />.__defineGetter__(\"__iterator__\", this -= <x/>))) && 0);");
tryItOut("L:if(Function(@foo)) { if (RegExp((([1,2,3,4].map).apply).call(this, <x><y/></x>), true)) gc() else yield;}\ncontinue ;\n");
tryItOut("/*for..in*/for(var prop in @foo) this.zzz.zzz;");
tryItOut("/*infloop*/for(prop; (( \"\"  .@*:: <ccc:ddd> </ccc:ddd> if (null)) @ (function ([y]) { })()) > ((<x><y/></x> ? null : false)(<x/> in <x/>) = *::*.prototype); (yield __noSuchMethod__ = try { yield; } catch(__noSuchMethod__) { let __noSuchMethod__, __parent__; } .__lookupGetter__(\"__noSuchMethod__\")) === @foo ? <y><z/></y> : this) {(false > <y><z/></y>);\nyield <x><y/></x>;__noSuchMethod__; }");
tryItOut("throw prototype;");
tryItOut("__parent__ = ({ get __count__(__iterator__, __noSuchMethod__) { return yield @foo }  })");
tryItOut("/*for..in*/for(let prop in (prop)[*]) {var __count__;return prototype; }");
tryItOut("yield;");
tryItOut("L:while((false) && 0){break L; }");
tryItOut("export __parent__;");
tryItOut("with({function::__proto__: !yield prop})do {if(__proto__(<y><z/></y>) = (__parent__ = <y><z/></y>)) return; else  if (3.watch(\" /x/ \", <><x><y/></x></>) + (<x><y/></x> .. <x/>)) yield <x/>; else {return;const __iterator__; } } while(([<y><z/></y>].filter(function(y) { yield y; gc(); yield y; }) || <x><y/></x>.isPrototypeOf(<x><y/></x>) .@ function::__parent__ =  \"\" .__lookupSetter__(\"constructor\")) && 0);");
tryItOut("L: {throw null;__proto__; }__parent__;");
tryItOut("throw ({ prop: let, __parent__: __proto__ });");
tryItOut("if((-1.hasOwnProperty(\"__noSuchMethod__\"))) { if (__proto__) let __noSuchMethod__; else {(0);(__parent__); }}");
tryItOut("L: prototype = false.__iterator__, __iterator__ = <x><y/></x>;");
tryItOut("(<x><y/></x>)( /x/g ) = __proto__;");
tryItOut("/*infloop*/for(__parent__ = ([1,,][null]) = .valueOf(\"number\"); [(<x><y/></x>)[<x><y/></x>]].some((new Function).call); ({ __count__: ({ __iterator__: ({ __iterator__: __noSuchMethod__ }) }) }) = prototype) return (<x/>)[this].prop = constructor.(<x/>);");
tryItOut("let(prop = 'fafafa'.replace(/a/g, function  __parent__ () { return  } )) { return (__iterator__).watch(\"__iterator__\", function () { yield true /= this } );");
tryItOut("/*infloop*/[z1,,]");
tryItOut("L:if(([15,16,17,18].map((window).watch, @foo))) do /*infloop*/while(this)__iterator__ getter: eval while(((constructor.(<x><y/></x>))) && 0); else  if ((function::__count__.__parent__ setter= [1,2,3,4].map)) {(<x/>);(this).call } const prototype;");
tryItOut("{} const constructor;");
tryItOut("if(function  __count__ (__noSuchMethod__) { yield true } ) __parent__ (window.hasOwnProperty(\"__iterator__\"), 4.)) { if ((__iterator__.__proto__ getter= <y><z/></y>)) {return;export __count__; } else {return;yield; }}");
tryItOut("/*infloop*/L:while(false *= false >= new (gc)(<x><y/></x>))return <><x><y/></x></>;");
tryItOut("/*infloop*/for(prop.(*); __proto__ @ 1.2e3 .@x:: @foo; (new ((({}).hasOwnProperty).call)(1e4, *))) {continue M; }\nyield;");
tryItOut("\n/*infloop*/for((3 ^ (this.__defineSetter__(\"__proto__\", (function  __iterator__ ()*).apply))); (window | false); [this for (__parent__ in <x><y/></x>)]) throw window");
tryItOut("let(({ __iterator__: [], __iterator__: ({ constructor: constructor, __count__: ({ constructor: __iterator__, __iterator__: ({ prop: __count__ }) }) }) }), prototype, prototype) ((function(){with({}) { {} } })());");
tryItOut("if(typeof ({a1:1}).@foo(3.__defineSetter__(\"__noSuchMethod__\", function  __proto__ (__proto__) { export __noSuchMethod__; } ))) {switch(((uneval((this.zzz.zzz))))) { case  /x/g --: break; __iterator__, prop; }L:if((yield  \"\" ).throw((prototype = <><x><y/></x></>))) {{}gc() } } else  if (<x><y/></x>[null] >> (String(false.isPrototypeOf(<y><z/></y>)))) {export *;<y><z/></y>; }");
tryItOut("{;L:do  /x/g ; while((new ((*).watch)(*)) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var x::__parent__ in null && <><x><y/></x></>) {let __count__, __noSuchMethod__;gc() }");
tryItOut("let(prop = __count__.__proto__ = [] ? <x/> : false && ({ prototype: [__count__, [, constructor]] }), ({ prop: ({ __proto__: ({ __proto__: prototype, get: __proto__ }), __noSuchMethod__: [] }) }) = (constructor\n.(1.3)).isPrototypeOf(__parent__)) { try { throw __noSuchMethod__; } catch(__parent__) { try { return; } catch(__parent__ if (function(){yield constructor;})()) { yield; } catch(__parent__ if  '' ) { ; } catch(__proto__ if <x><y/></x>) { yield true; } catch(set) { ; }  } finally { try { export __count__; } catch(constructor if this) { prototype:  /x/g ; } catch(__noSuchMethod__ if (function(){yield;})()) {  /x/ ; }  } ");
tryItOut("switch((<><x><y/></x></> += prop.propertyIsEnumerable(\"__proto__\"))) { case (String()): break; default: /*for..in*/for(var yield in ((Function)(( /x/ )[({a2:z2})])))L:if(@foo) \t{ if ([15,16,17,18].sort(((new Function(\"return;\"))).call, undefined)\n != (*::* @ @foo)\t) {L: {export *; } }} else /*for..in*/for(let constructor in ((Function)(<x/>)))__proto__ setter: ((({}).__lookupGetter__).call).call\t }");
tryItOut("/*for..in*/for(let (prop(({a1:1}))) in ( /* Comment */<x><y/></x>)) const __parent__;");
tryItOut("return\n");
tryItOut("while(((__noSuchMethod__.__proto__)) && 0){/*infloop*/do ; while(__iterator__.__iterator__ setter= 4.); }");
tryItOut("break M\n");
tryItOut("with({}) __parent__ = __count__;");
tryItOut("if(prop = [, ]) { if (prototype+=<><x><y/></x></>) /*infloop*/M:for(const prototype; ((uneval(#3={a:#3#}))); __noSuchMethod__.(window)) {}} else M:if(<><x><y/></x></>) { if (null) {(null);__proto__; } else {throw @foo; }}");
tryItOut("export prototype;");
tryItOut("{{} }");
tryItOut("/*for..in*/for(const [__iterator__, ] in (\n(true +=  '' ) === (({ get get(function::__proto__, __iterator__) { return #1# } ,  set prototype(constructor, __count__) { gc() }  })))) __parent__");
tryItOut("function(y) { yield y; return;; yield y; }\nvar constructor = set;");
tryItOut("let(constructor) ((function(){yield;})());");
tryItOut("let(__proto__) ((function(){try/* { <><x><y/></x></>; } catch(constructor if <><x><y/></x></>) { let prototype = <x><y/></x>, __parent__; } finally { x::prototype = window, constructor; } })());");
tryItOut("/*infloop*/M:for((new *( /x/ , <x><y/></x>)); this; <y><z/></y> === -1.__noSuchMethod__.isPrototypeOf(__count__.__defineGetter__(\"__iterator__\", new Function))) 'haha'.split");
tryItOut("return");
tryItOut("M:if(undefined.__defineGetter__(\"__count__\", 5.0000000000000000000000).unwatch(\"constructor\")) export __count__; else  if ([typeof <x/>].sort(gc)) let __count__; else {__parent__continue ; }");
tryItOut("/*for..in*/for([prototype, prop] = //h\n({ prop: constructor }) = 0x99 , <x><y/></x> in (yield this)) (false);");
tryItOut("/*infloop*/for(prop.([15,16,17,18].map((1 for (x in [])), __noSuchMethod__ = <x><y/></x>yyy)); (this for (__proto__ in *)); <y><z/></y>) {/*for..in*/M:for(var [prop, __parent__] = new (<x><y/></x>).watch( /x/g , false) in @foo) var __iterator__, __noSuchMethod__ =  /x/g ; }");
tryItOut("{export prototype;L:if( '' ) {export *;throw arguments; } else {export *; } }");
tryItOut("return;\nMath.pow\n");
tryItOut("switch(window) { default: yield;break; yield window;break; case new (function ([y]) { })()(window, undefined): {}break;  }\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  /x/g ) {(<><x><y/></x></>); }");
tryItOut("M:if((__noSuchMethod__)) <x><y/></x>; else  if ((0/0 ^=  '' )) /*infloop*/for(prop = <x><y/></x>; (-1); <x/>) {return;throw prop; } else const __proto__;");
tryItOut("L:\twith({constructor: <y><z/></y>.*})with(0x99){const prototype = null;; }");
tryItOut("/*infloop*/M:for(__proto__ = (<><x><y/></x></>.__lookupSetter__(\"__parent__\")).watch(\"__noSuchMethod__\", (new Function(\"var prop = 1e4;\"))); ((__iterator__) = ({ set constructor(function::__count__, __count__) { return [1,,] }  })); __iterator__) {__parent__\nthrow <><x><y/></x></>;\n }");
tryItOut("/*infloop*/do {yield  '' ;throw <x/>; } while((<x/> for (prototype in <><x><y/></x></>))[true]);");
tryItOut("L:switch((uneval(([null].sort(function  __parent__ (__parent__, constructor) { (<x><y/></x>); } ))))) { default: case 6: ([1,2,3,4].slice).applycase (({prop: (yield <x><y/></x>.( '' )), prop: (let (__iterator__) [,] >> new (function () { yield; } )(@foo, <x/>)) })): break; case 2: yield <y><z/></y>;break; break; case 5: break; break; case *.*: break;  }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ = 3.141592653589793 in this) ;{continue L;if(*) return; else  if (prop) yield; else {export prototype; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor['prop'] in ~4. ?  \"\"  : this.eval(undefined instanceof constructor)) break ;");
tryItOut("{continue L; }");
tryItOut("switch(()(__count__))) { default: /*for..in*/for(const (1e-81.constructor)((__noSuchMethod__.yoyo(<x><y/><\f/x>))) in @foo) (constructor).__defineSetter__case (__iterator__.__count__).unwatch(\"__iterator__\"): if( /x/ ) M:if(-1) {yield @foo; } else ; else {if((prop = this)) { if ((__noSuchMethod__--)) {{}return <x><y/></x>; } else export *;} }case 8: break; /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in false) /*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in  '' ) {{}continue M; }case 6: break;  }");
tryItOut("if(@foo\n.prototype = *::*) <x><y/>\f</x> else  if ((![,])) {yield *::*;{} }");
tryItOut("export __iterator__\nwith({__count__: this.zzz.zzz})return true;");
tryItOut("var __iterator__, __proto__ = undefined;");
tryItOut("__count__ = __proto__;");
tryItOut("while(((/a/gi)(this)) && 0){gc() } const delete;");
tryItOut("yield *;");
tryItOut("if({}) {var constructor, prototype;return  '' ; } else  if (<x/>) {yield; } else throw <x/>;");
tryItOut("var prop = __count__;");
tryItOut("switch(this) { default: (prototype).watchcase __count__:  }");
tryItOut("throw __iterator__;");
tryItOut("*::*;");
tryItOut("/*for..in*/M:for(const __iterator__ in ((Function)((new RangeError((yield __parent__ = 1e81)))))){gc()return <x><y/></x>; }");
tryItOut("/*infloop*/for(<xxx {__parent__}={this} />.__lookupGetter__(\"constructor\"); ( /* Comment */__proto__);  \"\"  % ({a1:1})) return <><x><y/></x></>\n");
tryItOut("gc()\nvar let = this;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) ;");
tryItOut("gc()");
tryItOut("let ([({ __iterator__: ({ __count__: ({ let: constructor, prop: __proto__ }), __iterator__: ({ __parent__: prop }) }) }), ({ __parent__: ({ prototype: ({ __proto__: [({ __proto__: constructor }), , ], __count__: ({ __noSuchMethod__: constructor }) }), __noSuchMethod__: __parent__ }) }), [[({ __noSuchMethod__: ({ __parent__: ({ prop: __iterator__, prop: constructor }), __noSuchMethod__: ({ __count__: __parent__ }) }) }), , __noSuchMethod__], ({ constructor: ({ __count__: [prop, , , ({ __noSuchMethod__: prop }), ] }) }), , [, ({ __noSuchMethod__: ({ __parent__: ({ __noSuchMethod__: __proto__, prop: __noSuchMethod__ }) }), prop: ({ __proto__: [, __parent__, , __count__], __iterator__: [__count__, ] }) }), , , ]]]) { {let __proto__ = __iterator__, __iterator__;with(true((5.0000000000000000000000[*]),  /x/g ))switch(<x><y/></x>) { case <x><y/></x>:  } } }");
tryItOut("{gc()yield;\t const prototype; }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prop] = (null |= __proto__) in this) L: return");
tryItOut("/*infloop*/do yield (3.141592653589793.yoyo(*)); while(__proto__ = <x><y/></x> in <x><y/></x>['__iterator__'] = <x/> >>>  \"\" );");
tryItOut("L:if(prop) { if (1.2e3) {return <x/>; }} else return *;");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("L: /*for..in*/for(let (function (__parent__, __count__)<x><y/></x>).call() in (((1 for (x in [])))((this &= *)))){throw 0;/*infloop*/do {const prop = <><x><y/></x></>; } while((-1)); }");
tryItOut("{while(((Function(prop) if (*::*))) && 0){throw this;'haha'.split } }");
tryItOut("if(false\n) {const constructor = <x><y/></x>;{} } else  if ((<><x><y/></x></>.__count__) < new (<><x><y/></x></>)(<x/>, <><x><y/></x></>)) export __proto__;");
tryItOut("{try { const __count__, __count__ = @foo; } catch(delete if 0.1) { return (-0); } catch(prototype) { {} } ; const ({ __proto__: ({ __proto__: prototype }) }); }");
tryItOut("if(({a1:1}))  else  if ([*::*]) {let __parent__ = prototype.constructor = (<x><y/></x> %= function(id) { return id }); }");
tryItOut("/*infloop*/for(var __noSuchMethod__; null; -3/0) export *;");
tryItOut("/*infloop*/for(new Function(); []; (typeof <><x><y/></x></>)) {throw function(id) { return id };yield false; }");
tryItOut("for(let y in []);");
tryItOut("constructor = constructor;");
tryItOut("if(\nnew function  __parent__ ()<y><z/></y>()--) { if (--(function(id) { return id }[ \"\" ])) {return <><x><y/></x></>; }} else {/*for..in*/for(__iterator__(<><x><y/></x></>) in ((<y><z/></y>)((<y><z/></y> in  /x/ )))){}export constructor; }");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("/*infloop*/L:for(-1; false; *) let (__noSuchMethod__ = <><x><y/></x></>) { (*::*); }");
tryItOut("/*infloop*/while((this.__defineGetter__(\"prop\", (1 for (x in [])))))export *;");
tryItOut("{/*infloop*/while(()){continue ; }throw [z1,,]; }");
tryItOut("throw -0;\t const __noSuchMethod__;");
tryItOut("export *;\nexport __iterator__;\n\nlet __parent__, __parent__ = 1e+81;\n");
tryItOut("export *");
tryItOut("for(let y in [5,6,7,8]) let(__noSuchMethod__) { for(let y in [5,6,7,8]) with({}) { var prop; } ");
tryItOut("if(([1,,](window, <><x><y/></x></>))) {/a/gi }");
tryItOut("/*infloop*/for(({ prop: constructor }) = ; (constructor)-=(this.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)); [,,z1]) {return; }if(<><zzz>this.zzz.zzz</zzz></>) { if ((({prop: <y><z/></y>}))\n) {throw \t<x><y/></x>;var prop; } else { }}");
tryItOut("this.zzz.zzz;");
tryItOut("(null);\nreturn ({__noSuchMethod__ getter: __noSuchMethod__, __noSuchMethod__: false })\f;\n");
tryItOut("/*for..in*/for(const __parent__ = ( /x/g [<x><y/></x>])(<><x><y/></x></>.__proto__) in ((true).__defineSetter__)) {do {[1]; } while((([1,2,3,4].map(<y><z/></y>))) && 0);if(true) { if (window) {const function::__parent__ = *::*;return; } else {{} }} }");
tryItOut("if(*::* %= <x/>) { if ((yield 0/0)) export prop; else {export *;return  \"\" ; }}");
tryItOut("");
