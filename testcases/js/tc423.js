tryItOut("with({__parent__: 1.2e3.unwatch(\"__noSuchMethod__\")}){export *; }");
tryItOut("return;");
tryItOut("switch((Error())) { case (Error()): case (({ constructor: prop, __noSuchMethod__: __noSuchMethod__ }) =  ''  < *.valueOf(\"number\")): /*infloop*/for(constructor; (-1).watch(\"__noSuchMethod__\", [1,2,3,4].slice); __count__ = <x><y/></x>) {throw <x/>; }return;break;  }");
tryItOut("yield; const prop;");
tryItOut("gc()if(<x><y/></x> === __parent__) ({}).hasOwnProperty else {{}var prop, __count__ =  /x/ ; }");
tryItOut("M:if((({ __count__: __iterator__ }) = ([15,16,17,18].some((new Function(\"throw this;\")), <x><y/></x>)))) { if (Function(delete this, <x><y/></x>))  else throw <y><z/></y>;}");
tryItOut("/*infloop*/L:for(var prop; true.unwatch(\"__iterator__\"); (p={}, (p.z = function(id) { return id })())) if(()) {yield function ([y]) { }; } else  if (<x><y/></x>\n) {let __count__;/a/gi } else yield;");
tryItOut("L:if(*::* / <><x><y/></x></>) { if (([<x><y/></x>])\n) return @foo; else return #3={a:#3#};}\n{while((yield <><x><y/></x></>) && 0)(false)constructor ; }");
tryItOut("if(({a2:z2}).__lookupSetter__(\"constructor\")) { if (each.*) {<zzz>({prop: arguments })</zzz>yield; }} else +");
tryItOut("throw constructor;var __count__;");
tryItOut("yield; const constructor;");
tryItOut("if(([] = <><x><y/></x></>.unwatch(\"prop\"))) { if ((new 'haha'.split(1e+81, undefined))) {} else {yield; }}");
tryItOut("var __iterator__, __proto__");
tryItOut("if((1e+81)[[[]]]) (<x/>); else {(constructor);gc() }");
tryItOut("let (constructor) { yield; }");
tryItOut("gc()");
tryItOut("with([[1]] if (true)){constructor =  '' , prop = @foo; }");
tryItOut("L:if( /x/ .propertyIsEnumerable(\"__parent__\")) {/*for..in*/for(const __count__ in (([1,2,3,4].slice)(true))){with(prototype)throw prototype; } }");
tryItOut("L:if( /* Comment */(new Array(__parent__))) {L: {L: {const constructor, __noSuchMethod__;gc() } } }");
tryItOut("/*for..in*/for(const prototype = [yield if (true)] in <x/>) {/*\n*/; }");
tryItOut("switch((({ constructor: ({ __noSuchMethod__: __proto__ }) }) = <y><z/></y> @ 0 !== ({a2:z2}))) { default: with({}) return window;break; case (__count__ = this.__lookupGetter__(\"__parent__\").*): switch(Object()) { case (eval(\"yield;\", (<><x><y/></x></>.__defineGetter__(\"__proto__\", <x><y/></x>)))): gc() }if( if ) { } else  if ((<x><y/></x>.(<y><z/></y>))) {/*infloop*/L:do {export prototype; } while(<><x><y/></x></>); } else {export *;continue ; }case RegExp( \"\" ): export prototype; const prototype;{}break; case 5: break; break; export prop;break; case 2: export prop;break; case 8: yield __parent__;break; case 0: break;  }");
tryItOut("let (__noSuchMethod__) { /*for..in*/for(const __proto__.__proto__ in <x><y/></x>) yield 5.0000000000000000000000; }");
tryItOut("/*for..in*/L:for(const constructor in (((new Function(\"const __parent__ = true;\")))(constructor)));");
tryItOut("/*infloop*/for(var __parent__; case 7: return;break; ; this) yield;export __parent__;");
tryItOut("<><x><y/></x></>;");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("let (({ __parent__: constructor, __noSuchMethod__: constructor }), __parent__) {  '' ; }");
tryItOut("/*for..in*/M:for(var ({ __proto__: [__proto__, [, , ({ __count__: [__proto__, prop] }), [, ({ __noSuchMethod__: ({ __iterator__: __noSuchMethod__, __iterator__: prop }), __parent__: [__count__, prop, , __count__] }), ({ prop: ({ prototype: __proto__ }), __iterator__: (//h\n{ prototype: __proto__, prop: throw <><x><y/></x></>; }) })], ], [[], , constructor]], prop: [, ({ function::__count__(\t(@foo.__defineGetter__(\"constructor\", ({}).__lookupGetter__)) .@x:: prop = this): (__iterator__) }), , ] }) in ((new Function)(<x/>)))with\f({constructor: undefined})gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__.__iterator__ in this.__defineGetter__(\"__count__\", (eval).apply)) {L:if([15,16,17,18].filter(Math.sin, prototype) |= __count__ = *::*) {var prototype; } else  if (*::*[{}.valueOf(\"number\")\f]) {let __parent__, __iterator__; }export *;\n{}\n }");
tryItOut("{}");
tryItOut("L:with((new (new Function(\"return;\"))( /x/ ))){return undefined; }");
tryItOut("yield true * ({ constructor: ({ __parent__: prop }), constructor: __count__ }).throw(({__proto__ getter: (gc).call }))\n");
tryItOut("throw arguments\n");
tryItOut("if(( /* Comment */<></*\n*/x><y/></x></> - <x><y/></x>)) {/*infloop*/for(new (prototype)(*); (this.__defineGetter__(\"__proto__\", __parent__)); *) continue ;{} } else {; }");
tryItOut("/*for..in*/for(let __proto__ in ((Math.pow)((<y><z/></y> <<  /* Comment */l))))if(false) {return; } else  if (<x/>) { }");
tryItOut("if(__noSuchMethod__ & <x/>) switch(null) { case 8: yield window;var =, __proto__ = false; } else  if (__noSuchMethod__ = *, constructor = #3={a:#3#}) {__noSuchMethod__: \f__proto__let __proto__ = <x><y/></x>; }");
tryItOut("L: {<x/>; }");
tryItOut("/*infloop*/for(__count__;  \"\" ; <x/>) export *;");
tryItOut("with(null)switch(<><x><y/></x></>) { default: ;break; break; case 5:  }\nreturn false;");
tryItOut("if(( \"\" .hasOwnProperty(\"prototype\"))) { } else  if (window) {gc() }\nyield window;\n");
tryItOut("{;yield; }");
tryItOut("switch(*::*/* %= <y><z/></y>) { default: {let __count__ = __parent__;; } }");
tryItOut("/*infloop*/for(var constructor =  \"\" ; __iterator__; __count__) throw this;");
tryItOut("this.zzz.zzz;");
tryItOut("{yield <><x><y/></x></>;var __parent__ = <x><y/></x>; }");
tryItOut("L: \t{throw __parent__; }");
tryItOut("if(new function  __count__ () { return #1# } ([[z1]].sort(function  prototype ()<x/>))) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>) {{}export *; }yield; }");
tryItOut("__iterator__ = __parent__;");
tryItOut("do return; while((__proto__ = __noSuchMethod__ = __proto__) && 0);");
tryItOut("let (prop) { export __iterator__; }");
tryItOut("(prototype)");
tryItOut(" { yield  /x/g  += undefined.valueOf(\"number\").watch(\"__parent__\", [1,2,3,4].slice) } ");
tryItOut("if(<y><z/></y>) { if (<x><y/></x>) { }} else {return <y><z/></y>; }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: constructor }) = (<x><y/></x>.propertyIsEnumerable(\"__parent__\"))(<x/>[this], (window for (__count__ in  '' ))); *; let (__parent__) (function (__proto__) { yield prop; } ).call(prop|=1e-81.watch(\"prototype\", [1,2,3,4].map), [] -  /x/ , null)) if([15,16,17,18].filter(<><x><y/></x></>, -3/0)) { if (new (((-0) >> [,]))(('haha'.split), true)) var prototype =  \"\" ; else yield 1.3;}");
tryItOut("if(window ? <x><y/></x> : [1]) {throw <y><z/></y>; } else  if (prop.__parent__ = @foo != (<x><y/></x> | <x><y/></x>)) return;");
tryItOut("/*infloop*/M:for(let prop; (({a2:z2})++); <y><z/></y>) {}");
tryItOut("/*infloop*/for(const constructor; const __noSuchMethod__, prop.propertyIsEnumerable(\"__proto__\"); !undefined) {export __proto__; }");
tryItOut("let ([({ __proto__: __count__, __parent__: __iterator__ }), , ], ({ __count__: __proto__, __noSuchMethod__: __parent__ })) { \tif(<>3/0</>) { if ((<><x><y/></x></> +=  /x/ )) {yield (-1);const __count__ = <><x><y/></x></>; }} else {yield; } }");
tryItOut("/*infloop*/for((*::*.__iterator__); \n-1; <y><z/></y> ?  /x/  : *::*) if(0/0) return false; else  if (*::*) throw [[1]];\ngc()\n");
tryItOut("with({__proto__: @foo}){export __proto__; }");
tryItOut("switch(constructor.*) { default: break; case [(new *::*())]: case <><bbb xmlns:ccc=\"'fafafa'.replace(/a/g, ({}).__lookupGetter__)\"><ccc:eee></ccc:eee></bbb></>: do // while((<><x><y/></x></>) && 0);case new <x/>.yoyo(let (__iterator__ = \n1.3)  /x/ .watch(\"__count__\", function  __parent__ (__count__, __count__) { yield window; } )): break; case ((<bbb xmlns=\"prop =  \"\" \"><xxx>{constructor}</xxx></bbb>['prototype']%=this.__defineGetter__(\"prop\", *))[(let (__proto__ = 1e+81) #1#.unwatch(\"__proto__\") for each (<><x><y/></x></>.prop.__count__ in typeof  \"\" .eval(<y><z/></y>.@foo)) if (0x99.propertyIsEnumerable(\"constructor\")))]): break;  }");
tryItOut("if(window.__proto__) \tyield false; else {export *;__iterator__; }");
tryItOut("/*infloop*/M:for([this].filter(window);  \"\" .__lookupGetter__(\"__parent__\"); *::*) {const __noSuchMethod__, prop = __count__; }");
tryItOut(";");
tryItOut("/*infloop*/for(this.__defineSetter__(\"constructor\", function (__count__)__iterator__); prototype = <x><y/></x>; ( /x/ ++)) yield true;");
tryItOut("export *\nbreak L; const __iterator__;");
tryItOut("if(eval(\"null ? false : __parent__\", \n/a/gi ^= 1e81.hasOwnProperty(\"__proto__\"))) {L: {if(1e4) { if //h\n([]) {let prop, prop = constructor;throw ({a2:z2}); }} else throw -1; } } else  if   { yield -window >>= * ? __count__ = (uneval( '' )) : (0.1 .@x:: window) } ((*.valueOf(\"number\").__lookupGetter__(\"constructor\"))) while((@foo) && 0){let __count__, (-0) = prototype;yield 4.; } else {gc()return; }");
tryItOut("/*infloop*/\nfor([] = constructor; eval(\"/*for..in*/for(const __iterator__ in (((<x><y/></x>).watch)(prototype))){window; }\", <y><z/></y>)++.isPrototypeOf([15,16,17,18].some([1,2,3,4].slice, [15,16,17,18].filter(this, 3/0))); (false >>= prototype).@foo :: __proto__ = prop = #3={a:#3#}) var __proto__ = 3, __parent__;{}");
tryItOut("033;\nL: {return; }\n");
tryItOut("M:switch(( '' )[<y><z/></y>]) { case (__count__ = 1e81): break;  }");
tryItOut("while((this) && 0){let prototype = <x/>;return; }");
tryItOut("{let prototype, function::constructor = 3/0;export prop; }");
tryItOut("<x><y/></x>");
tryItOut("if(__proto__) { if (__count__, constructor) {/*for..in*/for(let constructor\f in #3={a:#3#})  } else export *;}");
tryItOut("L:with({__iterator__: let (constructor =  /x/g  @ [z1], __proto__ = *) <><bbb xmlns=\"*\"><x><y/></x>yyy</bbb></>}){(window); }");
tryItOut("let(__parent__, prototype) ((function(){with({}) let(({ __noSuchMethod__: [__noSuchMethod__] }) =  /x/g .hasOwnProperty(\"__proto__\"), __count__ = (function ([y]) { })().prop) { for(let y in [5,6,7,8]) __iterator__ = constructor;})());");
tryItOut("/*infloop*/while(({__noSuchMethod__: [], __iterator__: 3/0 }))let ([__parent__, , , ], prop = ([#1#].sort(new Function))) { (__iterator__); }");
tryItOut("/*infloop*/prop: (new function(q) { return q; }())");
tryItOut("/*infloop*/do {__iterator__ = <x/>, function::__parent__ = (-0); } while(new <x/>(<x><y/></x>, this));");
tryItOut("M:do {yield <><x><y/></x></>; } while((null) && 0);");
tryItOut("break M;");
tryItOut("/*infloop*/while(RangeError(false.prop, <><x><y/></x></>)){throw <x/>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for(var __proto__; this.__defineSetter__(\"__parent__\", __iterator__); !<x><y/></x>) /*infloop*/for(const __iterator__; <!--yy-->; prototype = <><x><y/></x></>) break M;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (__count__.prototype getter= (1 for (x in [])) .@*::  /x/g  *  '' ) in __count__.__proto__ -= ({x::constructor setter: /a/gi, prototype setter: ({}).__lookupGetter__ })) {export __noSuchMethod__;1.2e3;Math.sin }");
tryItOut("with({constructor: (<x><y/></x>.__defineSetter__(\"prop\", Function))}){break L; }");
tryItOut("{let __proto__, __proto__ = <><x><y/></x></>;\ndo  while((<><x><y/></x></>) && 0);\n }");
tryItOut("if(((/a/gi).call)) {} else  if ([, , , , __proto__] = <y><z/></y>.__noSuchMethod__) (<x><y/></x>);");
tryItOut("/*infloop*/while((p={}, (p.z = this)()))L: <x><y/></x>;");
tryItOut("/*infloop*/M:for(let __proto__ = (yield ({prop: 0x99})); ( /x/  .@ *);  '' .eval((function ([y]) { })()) & *.valueOf(\"number\")) const __count__;");
tryItOut("/*infloop*/do 'haha'.split\n\n while(([15,16,17,18].filter(*::*, <x/>.valueOf(\"number\"))));");
tryItOut("/*infloop*/while(*::*){(<x><y/></x>);function (constructor, constructor) { return undefined }  }");
tryItOut("M:if((<y><z/></y> ? [1,,] : __count__)() ? <y><z/></y> : (__noSuchMethod__ = this)) constructor;");
tryItOut("/*for..in*/M:for(var [__iterator__, __proto__] = <><xxx>{constructor}</xxx><\t/> in true % 0\n) throw <x/>.@*;");
tryItOut("for(let y in []);");
tryItOut("let (prototype = <><x><y/></x></>.@foo--, __noSuchMethod__ = <x><y/></x>--) { export __iterator__; }");
tryItOut("let (__iterator__ = typeof window, prop) {  }");
tryItOut("if(true ? (#1=1e81) : __iterator__.prototype setter= <><x><y/></x></>) {}");
tryItOut("/*for..in*/L:for(const (__noSuchMethod__) in 0) {}");
tryItOut("with({__iterator__: {}});");
tryItOut("(new Function(\"throw <x><y/></x>;\"))");
tryItOut("if( \"\"  |= <x><y/></x>) { /x/ ; } else  if (3/0.throw(<>\f<x><y/></x></>) @ 0x99 << 1.2e3)  '' ;");
tryItOut("with(eval(\"throw __proto__;\", *::*).__iterator__ = eval(\"/*infloop*/M:for(const __iterator__ = *::*; #3={a:#3#}; false) yield __count__;\", (* % __proto__))){return (constructor|=*); }");
tryItOut("/*infloop*/do if( /x/g .__lookupSetter__(\"__count__\")) {} else  if ((prop+= \"\" )) {yield;__proto__ } else {export constructor;yield *; } while([[11,12,13,14].sort if (__count__ = prop = *::*)]);");
tryItOut("{}\n/*for..in*/for(let (constructor) in ((\t({}).hasOwnProperty)(#0=new (5.0000000000000000000000)((-1), @foo))))\n");
tryItOut("if(false) {Functionswitch(*) { case __parent__: {}break;  } } else  if ((( /* Comment */('fafafa'.replace(/a/g, ((new Function(\"export *;\"))).apply)).hasOwnProperty(\"__count__\")) &= (({ prop: [], constructor: prototype }) = (uneval( '' ))))) {{}gc() } else L:if(<x><y/></x>++) {return *; } else  if (false - null) (true);");
tryItOut("throw function::prototype;");
tryItOut("/*infloop*/L:for(__iterator__ = 1.2e3.propertyIsEnumerable(\"__count__\"); (__count__ && x::prop).yoyo(new undefined -= -0(<x><y/></x> >>>=<><x><y/></x></>)); [15,16,17,18].sort(gc, this) = new (1e81)( /x/g )) {/*for..in*/L:for(let [constructor, __count__] = __proto__ =  /x/g  in ({a2:z2})) {} }");
tryItOut("L:do {{} } while((__count__-=this.__defineGetter__(\"__iterator__\",  for (constructor in <><x><y/></x></>))) && 0);");
tryItOut("/*infloop*/for(var __noSuchMethod__; this; window) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop.__iterator__ in <y><z/></y>) export *;");
tryItOut("/*for..in*/for(let constructor in (yield case 7: ;;break; default: break; break; /*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = null in try { return; } catch(__count__) { prototype, prototype; } finally { export prototype; } ) return;case 3: break; )) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in this) {yield;export *; }((-0)); }\n/*infloop*/while(__proto__ = window)3/0");
tryItOut("/*infloop*/for(const __count__; //h\n3.141592653589793 /  /x/ ; ({__proto__: {}})) break ;");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("if(this ? window : <x><y/></x>) { if (null) var prototype; else export *;}");
tryItOut("if((eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in prototype) const __count__, constructor = true\\nreturn prop;\", [,,]((-0).__noSuchMethod__, try { gc() } catch(constructor) { yield __iterator__; } ) | eval(\"(<x><y/></x> > *::*)\", prop -= window)))) { if (((<x><y/></x>.( '' )) ^ (__noSuchMethod__ = ))) {if(new window) { if (5.0000000000000000000000) {yield; }\n} else {gc()return <x><y/></x>; }return this.zzz.zzz; }} else {switch(('fafafa'.replace(/a/g, 'haha'.split))) { default: continue ;break;  }yield [,,]; }");
tryItOut("return;");
tryItOut("while(((({ __iterator__: constructor, prototype: ({ constructor: __iterator__ }) }) = (*::* .@x:: @foo))) && 0)while((true.propertyIsEnumerable(\"constructor\")) && 0){;export *\t; }");
tryItOut("{__proto__ = @foo;export __parent__;{continue L; } }");
tryItOut("/*for..in*/for(prop = this.zzz.zzz in ((__proto__ = <x><y/></x>) for (constructor in this.zzz.zzz.__defineSetter__(\"__proto__\", <x><y/></x>\t)) for each (prototype in (new window)) for (__parent__((-0)) in  \"\" ) if (<><x><y/></x></>))) {}");
tryItOut("L: export *;");
tryItOut("let(__iterator__) { try { yield <x><y/></x>; } finally { {} } ");
tryItOut("do {(((1 for (x in []))).apply); } while((throw x::function::__proto__; &= ((-1).__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))) && 0);");
tryItOut("let constructor = undefined, __iterator__ = __proto__\nbreak M;");
tryItOut("do {(window); } while((__parent__ && prototype) && 0);");
tryItOut("if(({__proto__: <y><z/></y>, __iterator__: __proto__ })) export *; else  if (((-this).__lookupGetter__(\"constructor\"))) export *; else L:  \"\" ;");
tryItOut("/*for..in*/M:for(let [__proto__, prototype] = ({ __noSuchMethod__: ({ __noSuchMethod__: __noSuchMethod__ }) }) = (new (yield false)(constructor = <x><y/></x>, <x/>)) in (eval(\"return null;\", ((-1) ? __count__ : 0/0 ? null.\f__lookupGetter__(\"function::prop\") : this.__defineGetter__(\"constructor\", function (prototype, prop) { yield; } ))))) /*for..in*/for(const __parent__ = (window.yoyo(<x><y/></x>))((false || *), <y><z/></y>) in ! /x/g ) {throw <x/>; }");
tryItOut("while((([-0])) && 0){yield; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const __iterator__ = (\n<x/>) in *::*) /*for..in*/M:for(const [__parent__, __noSuchMethod__] =  \"\"  in  \"\" ) var prop;");
tryItOut("/*for..in*/for(var [prop, get] = (__parent__+=(p={}, (p.z = (({__count__: this})))())) in new (<><x><y/></x></>.propertyIsEnumerable(\"prop\"))()) <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in ) export prototype;");
tryItOut("return __parent__;(({__noSuchMethod__ setter: (new Function(\"__parent__\")) }));");
tryItOut("if( '' ) { } else return [,];");
tryItOut("/*infloop*/for(((<x><y/></x> if (<x><y/></x>))); true; ( /x/  /= -true >> [1].yoyo(<x><y/></x>) if (<x><y/></x>))) /*\n*/{/*infloop*/while(<x/>)Math.sin }\nif(constructor =  /x/ ) yield true; else  if (void __iterator__.isPrototypeOf((<y><z/></y>)())) throw function ([y]) { };");
tryItOut("with((({prop: ({__proto__: (<><x><y/></x></>)(({a1:1}))}).eval(yield <y><z/></y>.__lookupSetter__(\"__noSuchMethod__\")['__iterator__']-=([<x><y/></x>]).*)}))){do {yield  \"\" ; } while((false) && 0); }");
tryItOut("export *;");
tryItOut("/*infloop*/L:for(prop--; (prop = @foo); (true())\f) {const __noSuchMethod__;function  __count__ () { <x><y/></x>; }  }\n/*for..in*/for(let (constructor.__proto__) in (((<x/>.*.@*).watch)((new yield yield this()))))return;");
tryItOut("if(__iterator__.((({constructor: <x><y/></x>})))) { if ((([11,12,13,14].map).__defineSetter__(\"constructor\", ({}).__lookupGetter__))) /*infloop*/do {} while(@foo);(new Function(\";\"))} else throw __iterator__ =  \"\"  >>= this;");
tryItOut("return <x><y/></x>\n{export constructor;L: {gc()return; } }");
tryItOut("yield;");
tryItOut("/*for..in*/for(__iterator__ = __noSuchMethod__ = <x><y/></x>.(<x><y/></x>) in #2=({a1:1})) {do {/*for..in*/for(const prototype = window in *) throw -1; } while(((#3={a:#3#}.@foo)) && 0); }");
tryItOut("/*infloop*/for( /* Comment */!#1=[#1#]; (new (Function)/*()) if (eval(\"{}.eval(1e4)\", [[1]].propertyIsEnumerable(\"__parent__\"))); __iterator__) {yield;throw __count__.prop = [z1,,]; }");
tryItOut("if((<x/>.propertyIsEnumerable(\"prop\"))) let function::__noSuchMethod__ = <>(<x><y/)></x></>\t;");
tryItOut("if(true) {export *; }");
tryItOut("L:with(this)let __proto__ = 0.1, constructor = <><x><y/></x></>;\n{}\n");
tryItOut("if((<x><y/></x>[<><x><y/></x></> .@*:: @foo\n])) {/*infloop*/do {export *;\f } while( /* Comment */ \"\" );const prototype = [], __count__; } else {const __count__ = constructor, constructor = undefined;__parent__; }");
tryItOut("L: {L:if(<y><z/></y>) return; else  if (5.0000000000000000000000) {yield; } }");
tryItOut("L:switch( \"\"  .. <x/>) { case 0: (<x><y/></x>);default: /*for..in*/for(const __iterator__ in ((Math.sin)(<x><y/></x>))){{}export prop\t; } }");
tryItOut("do throw __proto__; const constructor; while(((yield prop)) && 0);");
tryItOut("function  __count__ (__parent__, prop)\r { return -3/0; } window");
tryItOut("throw StopIteration;");
tryItOut("if((({prop setter: <x/>,  get prop() { yield *-- }  }))) /*infloop*/while((new Function(__iterator__)))return -1; else  if (yield (new Function(\"gc()\"))) return; else {function  __proto__ () { export __proto__; }  }");
tryItOut("/*for..in*/for(let  /x/g  in (((__noSuchMethod__ = --3))(('fafafa'.replace(/a/g, eval) >>= (false)([z1,,]))))){/*for..in*//* nogeckoex bug 349964 */L: for  each(const <x/>.propertyIsEnumerable(\"__iterator__\").__noSuchMethod__ in prop.prototype) {/*infloop*/while((null.prototype))null;__proto__ = __parent__; } }");
tryItOut("if(__count__ = <x/> ? <y><z/></y> : __noSuchMethod__ *= null) {/*infloop*/for(var ({ prototype: [__iterator__, , , __iterator__] }) =  \"\" .__lookupSetter__(\"prototype\"); <employee id=\"1\"><name>Joe</name><age>20</age></employee>; __iterator__ = ((yield constructor))) export __parent__; } else  if ((((*::*).watch).call)(arguments, __proto__)) {return;/*for..in*/for(let prop in <y><z/></y>)  }");
tryItOut("/*infloop*/for(let prop; <x/>.@foo.__lookupSetter__(\"__iterator__\"); (*\n)) yield *::*; const \tprop;");
tryItOut("with((this.__defineGetter__(\"__iterator__\", (new Function(\"1e-81\")))));");
tryItOut("/*for..in*/for(let __parent__ =  ''  | 1.2e3 in <><x><y/></x></>) {var constructor; }");
tryItOut("gc()");
tryItOut("with(__count__ = [,,z1])(this);");
tryItOut("/*for..in*/for(prop in ((1e81 < [[1]])(constructor = (__parent__)())))return;");
tryItOut("M:if(this.__defineGetter__(\"__proto__\", *::*)) export __noSuchMethod__; else {var constructor; }");
tryItOut("/*infloop*/M:do {throw <x><y/></x>\nbreak M; } while((this.zzz.zzz));");
tryItOut("if(new (<><x><y/></x></>)()) { if (1.3 if (<y><z/></y>)) {yield;__parent__, __parent__ = window; } else {(function ([y]) { })();const __parent__, constructor; }}");
tryItOut("with({__iterator__: ( /* Comment */(__count__.(<y><z/></y>)))})continue L;");
tryItOut("(export __noSuchMethod__;)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in <><x><y/></x></>) {const __count__, function::__proto__; }");
tryItOut("/*infloop*/for(( \"\"  || <x><y/></x> %= window.isPrototypeOf(__iterator__)); let (prop, __iterator__ = <x><y/></x>) *::* @ __iterator__ = __proto__; ({__parent__ getter: (<><x><y/></x></>).watch, prototype:  /x/  }).__defineSetter__(\"__iterator__\", function(q) { return q; })) yield #3={a:#3#};");
tryItOut("if( /x/ ) { if ((__count__.*.prototype = eval(\"*::*\", *))) {do {return;yield (-1); } while(((<x><y/></x>.(<x/>))) && 0);{} } else {if(__proto__.__noSuchMethod__) { if (this.__defineSetter__(\"prop\", function (prototype)<x><y/></x>)) {{}null; }} else function (prototype, prop) { return prop } yield; const __iterator__;//h\n }}");
tryItOut("if(window) {let constructor = @foo, prototype; }");
tryItOut("return <x><y/></x> == this;");
tryItOut("let (constructor = 0.1) { let __noSuchMethod__; }");
tryItOut("M:with({prototype: (window ? (*\n) : [15,16,17,18].some((new Function(\"export prototype;\")),  /x/ ).__lookupSetter__(\"__iterator__\"))}){default: break; yield;break; this\r }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:do {{} } while((gc()).__iterator__ = -#3={a:#3#} ? <y><z/></y> : (prop = <x/>.isPrototypeOf(*.prop = null)));");
tryItOut("M:with({__noSuchMethod__: <><>yyy</></>})this");
tryItOut("if( /* Comment */(-0)) {if(<y><z/></y>) { if (<x/>) throw __iterator__; else {return <x/>;export *; }}/*infloop*/for(prop+=<x><y/></x>; *::*.__lookupSetter__(\"__count__\"); <y><z/></y>++) return; }");
tryItOut("return\n\nyield <x/>\n");
tryItOut("{({a1:1});/*infloop*/while((-1)){return;\fconstructor; } }\n{{1e-81;__count__ = this, __noSuchMethod__; }throw <x><y/></x>; }\n\n");
tryItOut("__parent__.__noSuchMethod__ = __noSuchMethod__.__count__;");
tryItOut("L: {gc() }");
tryItOut("if(void *.__defineSetter__(\"__iterator__\", (1 for (x in []))) .@ #1=[ /x/ ]++) export *; else {/*for..in*/for(const <><bbb xmlns=\"true.@foo\">yyy</bbb></> = -3/0 in *) {export *;L: yield -3/0; }throw 3.141592653589793; }");
tryItOut("/*for..in*/for(var [prototype, __parent__] = this / <x><y/></x> in <><x><y/></x></> > <x><y/></x>) ");
tryItOut("this.zzz.zzz;");
tryItOut("if(Error(<x/>).__defineSetter__(\"constructor\", [1,2,3,4].slice)) {let __count__ = <><x><y/></x></>, __parent__; } else  if (<x/>) {{} }");
tryItOut("/*for..in*/L:for(var ({ prop: prop, __iterator__: export *; }) in \n__iterator__) L: /*infloop*/M:while(<><x><y/></x></>)export prop;");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(const prototype = [window if (false)]; this.__defineSetter__(\"constructor\", (1 for (x in []))); @foo for each (__proto__ in function ([y]) { }) for each (constructor in #1=[#1#])) gc()");
tryItOut("let (__proto__ = <bbb xmlns=\"(prototype = __count__)\"><!--yy--></bbb>) { return; }");
tryItOut("/*infloop*/for(let prop =  '' .isPrototypeOf([1,,]); ((@foo)(<x/>) = (uneval(3.141592653589793))); (({ get __proto__ __parent__ (__iterator__, prototype) { export *; } , function::__count__: ({}) }))) __iterator__ = __proto__, __iterator__ = <><x><y/></x></>");
tryItOut("if((({constructor: function(id) { return id }}))) { if ([this].filter('haha'.split)) {var __parent__; } else /*for..in*/for(let [__count__, __noSuchMethod__] = [z1,,] in ({})) yield;}");
tryItOut("let __parent__ = [,,], __proto__ = <><x><y/></x></>\n");
tryItOut("do {yield undefined; } while((((window >>> <><x><y/></x></> for (prop(<><x><y/></x></>) in <x/>) for each (__count__(0) in 0.1) if ( /x/ )))) && 0);");
tryItOut("M:while((<!--yy-->.(@foo == 0/0)) && 0){{}return; }");
tryItOut("/*for..in*/for(const __count__ in this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)) {continue ;const __noSuchMethod__ = *::*, prop = *::*; }");
tryItOut("for(let y in []);");
tryItOut("while((<y><z/></y>) && 0){__count__;return <x><y/></x>; }");
tryItOut("/*for..in*/for(const prop = this.propertyIsEnumerable(\"__proto__\") in *::*) {const __parent__, Math.sin;; }");
tryItOut("/*infloop*/do throw prototype; while(new ((__proto__.watch(\"prototype\", window)), 1e4));");
