
tryItOut("if( '' .constructor) { if (<><x><y/></x></> > <><x><y/></x></>) const __count__;} else {const constructor, prototype = window;export *; }");
tryItOut("if(<><x><y/></x></> :: <y><z/></y>) { if ((__noSuchMethod__.prototype getter= new Function)) {throw true;return; }} else {yield  /x/ ;(function(id) { return id }); }");
tryItOut("/*infloop*/for(#0=[<x><y/></x>\n]; [].__count__; __iterator__ = <x/>) do {(*); } while((<><x><y/></x></>) && 0);");
tryItOut("/*for..in*/for(((<x/>)( /x/ )) in ((function (({ prototype: ({ __noSuchMethod__: [], __proto__: ({ __iterator__: ({ __iterator__: prototype }) }) }), __proto__: [] }), prototype) { yield new Iterator([[1]], @foo) & new (-0) } )((<xxx>{__proto__}</xxx>.(({__proto__: this}))))))/*infloop*/do  /x/g  while([[1]]);");
tryItOut("var prototype, prop =  '' ; const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const  \"\" .__proto__ in new gc()) M:if(new (<><x><y/></x></>)((({}).hasOwnProperty).apply, prototype) % (*.valueOf(\"number\"))) \t__count__.__noSuchMethod__ else  if (.2 ?   : this.__lookupGetter__(\"__count__\")) ;");
tryItOut("L:if( /x/ ) throw <><x><y/></x>\t</>;");
tryItOut("with(<x><y/></x>)var __count__, __iterator__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(let constructor; ([11,12,13,14].sort); <><x><y/></x></> ? <><x><y/></x></> :  \"\" ) {const __iterator__;yield; }");
tryItOut("/*infloop*/for(let ({ prop: ({ constructor: ({ __iterator__: prototype }) }) }) = (new Exception((__proto__ = (-0).*)));  \"\" .__lookupGetter__(\"__parent__\") += yield [z1,,]; this.zzz.zzz) M:if(__iterator__.(<x><y/></x>\f)) let function::prototype = *::*, __proto__; else {if(033) prototype else {break ; } }");
tryItOut("(let (function::__noSuchMethod__) <y><z/></y>);");
tryItOut("try { let(__count__) { <y><z/></y>; } finally { for(let y in [5,6,7,8]) yield []; } ");
tryItOut("/*for..in*/for(__parent__.__noSuchMethod__ in this.unwatch(\"__count__\")) {yield;[,]; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = ((yield 0) -=  '' ).yoyo(*::*['constructor'] = __proto__ = this) in 0x99) return;");
tryItOut("with({}) throw StopIteration;");
tryItOut("with({__count__: *::* for each (__noSuchMethod__ in @foo) if (3/0)}){const prototype, constructor = <x><y/></x>;var __iterator__ = *::*; }");
tryItOut("return __noSuchMethod__;");
tryItOut("L:if((() if (.(constructor)))) /*for..in*/for(let [prototype, __proto__] = prototype in 1e-81 = null) {export __iterator__;{} }");
tryItOut("/*infloop*/\tfor(let prop; <x/>.@*; ) {return 3;{} }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(__count__.(1.3)) { if ([15,16,17,18].sort([1,2,3,4].slice,  \"\" )) {break M; } else continue M;}");
tryItOut("__proto__, __count__ = <y><z/></y>;");
tryItOut("/*infloop*/do if(typeof <><x><y/></x></>) <x/>; while(*::* ? <><x><y/></x></> : <y><z/></y>);");
tryItOut("do (new Function(\"continue M;\")) while((((function  __count__ ()window).call(this, (prop = false), .2).__lookupGetter__(\"__iterator__\"))) && 0);");
tryItOut("/*for..in*/for(let prototype = new (continue ;)(<><x><y/></x></>, @foo) in (<x/> * [1])) with({}) { this.zzz.zzz; } ");
tryItOut("/*for..in*/for(let __proto__ in prop, __count__ = [1]) if(('fafafa'.replace(/a/g, (1 for (x in []))))) {break ;return <><x><y/></x></*\n*//>; }");
tryItOut("break M;");
tryItOut("yield");
tryItOut("/*for..in*/for(const prototype = [11,12,13,14].some in  \"\" .watch(\"prototype\", function(q) { return q; })) {yield  '' ;; }");
tryItOut("/*infloop*/while(yield (function () { return  ''  } )( /* Comment */ '' , @foo)){gc()L:do { } while((<x><y/></x>) && 0); }");
tryItOut("L:with(function::__iterator__ = ((Math.sin)())){<x><y/></x> }");
tryItOut("throw StopIteration;");
tryItOut("(constructor) = setter\n");
tryItOut("do {} while((*) && 0);");
tryItOut("export *; const prop;");
tryItOut("L: M:do {export *;yield  /x/ ; } while((<x/>) && 0);");
tryItOut("/*infloop*/do if( /x/ ) { if (<x><y/></x>) {} else export *;} while(\fyield [1].__count__.eval(prop =  \"\" ));");
tryItOut("if(<x><y/></x>) { if () ; else yield;}");
tryItOut("{({a2:z2});let prototype; }");
tryItOut("/*for..in*/for(const __iterator__ in __parent__ = -0) with(constructor)constructor;");
tryItOut("L:if('fafafa'.replace(/a/g, function  __parent__ ()[[[1]] if (.2)].watch(\"__iterator__\", function  __parent__ (({ function::__iterator__: __count__, constructor: __proto__ })) { yield __parent__.@foo } ))) for(let y in [5,6,7,8]) __parent__ = __iterator__;");
tryItOut("{return; }if((__noSuchMethod__ = @foo)) return; else  if (this)");
tryItOut("L: {continue M;L:with({__iterator__: -0})yield; }");
tryItOut("{gc()with({prototype: <><x><y/></x></>}){[1,2,3,4].slice } }");
tryItOut("{/*for..in*/L:for(var __iterator__ = (prototype = ({ __proto__: __noSuchMethod__, constructor: constructor })) in @foo) 'haha'.split }");
tryItOut("for(let y in [5,6,7,8]) yield (this.__lookupGetter__(\"__iterator__\"));");
tryItOut("yield;return;export __noSuchMethod__;");
tryItOut("/*infloop*/while(true < <x><y/></x>)constructor");
tryItOut("let (prototype) { /*for..in*/for(var __iterator__ in function ([y]) { }) export *; }");
tryItOut("throw __count__;");
tryItOut("let (__noSuchMethod__, prop = this) { /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>) \tyield; }");
tryItOut("switch((new (<><x><y/></x></>.yoyo(1e81))((__noSuchMethod__.(<x/>)).__lookupGetter__(\"constructor\")) || [15,16,17,18].map(function  __iterator__ ( , prop)<y><z/></y>, false.__defineSetter__(\"prop\", (1 for (x in [])))))) { case (1e4.throw(false)): L:if(this.zzz.zzz) { if (prop = ({__parent__ setter: undefined() })) return undefined;} else {const prototype; }default:  }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(<x>\t<y/></x> in 1e4) {{gc() } } }");
tryItOut("/*for..in*/for(__count__ in <><x><y/></x></>.__iterator__ = @foo) {if([<x><y/></x>]) {return;this; } else return; }");
tryItOut("/*infloop*/while(undefined.\fpropertyIsEnumerable(\"constructor\")){return <><x><y/></x></>;throw @foo; }");
tryItOut("{/*infloop*/for(__iterator__ = 0x99; (uneval(__iterator__)); <x/>) {export *; } }");
tryItOut("/*infloop*/for(__count__ = __parent__.@*; [[1]]; *::*[<><x><y/></x></>]) break \n/*for..in*/for(let ({ __iterator__: [] }) in (new (<x/>)())) {L: <x><y/></x>; }");
tryItOut("/*for..in*/L:for(var [constructor, constructor] = <x/>.yoyo(constructor) in ) switch(getter) { case <y><z/></y>: Math.sinbreak;  }");
tryItOut("break L;");
tryItOut("/*infloop*/L:while(eval(\"1e+81\", <x/>))break L;");
tryItOut("/*infloop*/for(<><x><y/></x></> ? *::* : <x/>.hasOwnProperty(\"__parent__\").__lookupGetter__(\"constructor\"); ({__iterator__ setter: 'haha'.split });  '' [1e-81]) if(undefined.eval(*)) export *; else {let yield; }");
tryItOut("/*infloop*/for(__count__ = <y><z/></y>; <x><y/></x>; 1.3) {break L; }\n");
tryItOut("L: yield;");
tryItOut("export *");
tryItOut("{}\n\nconst prop = ([,,]);");
tryItOut("/*for..in*/for(var //h\n[__noSuchMethod__, constructor] = window in __proto__ = ({a2:z2})) {let __iterator__;var constructor = <x><y/></x>, constructor = __noSuchMethod__; }");
tryItOut("return *::*\n");
tryItOut("throw *::*\nL:if(([11,12,13,14].sort)) {let constructor; } const prototype;");
tryItOut("/*for..in*/M:for(let __count__ in @foo) {{}<x/>; }");
tryItOut("export prop;");
tryItOut("L:with\t({constructor.__noSuchMethod__: [(this ^=  /x/g )]})/*for..in*/for(let (((prop, __parent__)()))((let (__proto__)  /x/ )) in *) yield;");
tryItOut("{;M:if(<x><y/></x>.*.unwatch(\"__count__\")) {L:while((window) && 0)let __iterator__ = <x><y/></x>; } }");
tryItOut("M:if(constructor) export *;return <><x><y/></x></>;");
tryItOut("__proto__ = __count__;");
tryItOut("if(__proto__.constructor.@foo) {new Function } else  if (3/0) {yield <><x><y/></x></>\n } else return new (({}).hasOwnProperty).apply();");
tryItOut("with({}) { throw __proto__; } ");
tryItOut("L: {export *;yield this; }");
tryItOut("if(<x><y/></x>[this]) export *;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while(<y><z/></y>)let __parent__;");
tryItOut("let(prop) ((function(){this.zzz.zzz;})());");
tryItOut("var __noSuchMethod__");
tryItOut("try { return; } catch(__count__ if (function(){throw StopIteration;})())\t { __noSuchMethod__ = __count__; } finally { for(let y in []); } ");
tryItOut("if(new function () { return <x/> |= <x><y/></x> } ()) L: {throw *;export prop; } else for(let y in []);");
tryItOut("if(__count__ = prop ? new ((1 for (x in [])))(({})) : yield  /x/ ) { if (({ prototype: __count__ }) = constructor / this) yield; else return;}");
tryItOut("/*for..in*/for(let [__parent__, prototype] = \n /x/g .watch(\"prototype\", <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) in <x/>) {M:switch(*::*) { case 5.0000000000000000000000: var __proto__;__iterator__, constructor;break;  } }");
tryItOut("if(__proto__ =  /x/ ) { if (null > <><x><y/></x></>) {yield false; }} else throw null;");
tryItOut("break ;export *;");
tryItOut("L: Math.pow");
tryItOut("/*infloop*/while(<><x><y/></x></>)const __iterator__ = 0/0, __parent__ = ({});");
tryItOut("{/*infloop*/for(__iterator__ =  \"\" ; this;  \"\" ) constructor;\f }");
tryItOut("if((-<y><z/></y>)) {return <x/>; } else  if ((throw #1=[#1#])) constructor");
tryItOut("if( \"\" ) { if (window) {}} else {var __count__ = <y><z/></y>, constructor; }");
tryItOut("do {while(((( /x/g  .@ 4.))()) && 0){yield;switch( '' ) { case [,,z1]: default: break; break; case 6: break; __iterator__;break;  } } } while((<x/>.eval(this)) && 0);");
tryItOut("(__count__) = __iterator__;");
tryItOut("/*for..in*/for(let __count__ in false) {[1,2,3,4].sliceyield __parent__; }");
tryItOut("while((eval(\"{}\", ({ case 0: break M;break; : __proto__ }) = <y><z/></y>.__defineGetter__(\"prototype\", <x><y/><\t/x>))) && 0)function (__noSuchMethod__, __proto__) { yield 5.0000000000000000000000; } ");
tryItOut("if(<x><y/></x>) continue ; else {const __count__, set; }");
tryItOut("{gc()return; }");
tryItOut("if(Boolean(null ? <x><y/></x> : *::*)) null; else  if (new <x><y/></x>.(<><x><y/></x></>)(@foo, 0x99)) {gc()let __count__, prop = -0; }");
tryItOut("switch((p={}, (p.z = *::*)())) { default: __parent__ = 1.3;break;  }");
tryItOut("L:switch(this.zzz.zzz) { default: break;  }");
tryItOut("return;");
tryItOut("return *\n");
tryItOut("/*infloop*/for(let __proto__ = *::* | <><x><y/></x></>; (eval(\"( /x/ );\", 3.141592653589793 < -1)); ({ constructor: __noSuchMethod__, __parent__: __count__ }) = [, __iterator__]) ;");
tryItOut("{1.3;function (prop) { return function ([y]) { } }  }\nif(this.__defineGetter__(\"__count__\", 'haha'.split)) var __noSuchMethod__ = *, __proto__;\n");
tryItOut("{L: throw true; }");
tryItOut("L:with((prototype.prototype.yoyo((yield <y><z/></y>)))){let __parent__ = constructor;/*for..in*/for(let __count__ in <x><y/></x>) {Math.sin } }");
tryItOut("<x><y/></x>\n const prototype;");
tryItOut("yield undefined;");
tryItOut("\n");
tryItOut("if((Iterator(*::*.valueOf(\"number\"), __noSuchMethod__))) {(0x99)\nthis; } else {with([[]]){/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in @foo) {export __iterator__;gc() }throw 3/0; }((-0)(false)); }");
tryItOut("/*infloop*/do __proto__ while(<x><y/></x>);");
tryItOut("/*infloop*/do prototype = __proto__; while(eval(\"undefined\", ({prop: <><x><y/></x></> })));");
tryItOut("with({prop: __proto__}){/*infloop*/L:while(<><x><y/></x></>.@foo)export *; }");
tryItOut("let(prop = (~[__noSuchMethod__ = *])) { let(({ prop: [, ], __proto__: ({ __iterator__: __count__ }) }) = (__count__.__noSuchMethod__)) { yield (Math.sin).call((<y><z/></y> .@ <><x><y/></x></>), (Math.sin)());");
tryItOut("/*infloop*/do {function  __noSuchMethod__ () { export __proto__; }  } while(<x/>);");
tryItOut("with(<x\t><y/></x>(undefined))let __proto__ = this, __count__;");
tryItOut("L:with({__proto__: prototype.prop setter= ('fafafa'.replace(/a/g, function(y) { yield y; export __count__;; yield y; })).watch})while((this.zzz.zzz) && 0)break ;");
tryItOut("/*for..in*/for(let prop(3) in ((function(y) { yield y;  '' ;; yield y; })((new Function(\"export *;\"))(@foo, export constructor;))))return <x/>;");
tryItOut("L:switch(<xxx>{__count__}</xxx> / __count__.__lookupSetter__(\"__iterator__\")) { case {{}export prop; }: break; case constructor = (-1): (new Function(\"return <><x><y/></x></>;\"))default: switch((function (constructor)window\f).call(window.isPrototypeOf\f(<x><y/></x>), <y><z/></y>, true)) { case 7: break;  }break; case --<><x><y/></x></>.__iterator__ %  /* Comment */true--: gc()break; yield;case 0: break ;break; case <x/>.eval(@foo): yield;\ncontinue M;\nreturn <><x><y/></x></>;break; if(<x/>)  else  if ([,,z1]) ;break;  }");
tryItOut("for(let y in []);");
tryItOut("if([,,z1] > __proto__) { if (case 8: if(undefined) constructor = <><x><y/></x></>; else  if (<><x><y/></x></>) 'haha'.split else {(1e81);throw window; }case -<y><z/></y>: yield;break; ) break L; else __proto__;}");
tryItOut("/*for..in*/for(__count__ in ((/a/gi)(<x/>)))yield 5.0000000000000000000000;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ __iterator__: __proto__ }) }) = __count__ = <x/>(); yield [,].valueOf(\"number\"); (*::*)[-3/0] .@x:: \t4.) break ;");
tryItOut("/*infloop*/for(<y><z/></y> >>= (__iterator__ = constructor|=[1]); ('fafafa'.replace(/a/g, [[]])); \ndelete <x><y/></x>) {gc() }");
tryItOut("L: yield function(q) { return q; };");
tryItOut("/*infloop*/do /*infloop*/M:do {const \tconstructor, __count__;(<x/>); } while((this.__defineSetter__(\"prototype\", ((new Function(\"export *;\"))).apply))); while(#1=[([<x><y/></x>])]);");
tryItOut("L:switch( '' ) { default: M:with(this.__defineSetter__(\"constructor\", ({}).hasOwnProperty))\r{[,]; } }");
tryItOut("for(let y in []);");
tryItOut("{<x><y/></x>/*\n*/;with({constructor: <><x><y/></x></>})continue L; }");
tryItOut("if(([ /x/ ]).__lookupSetter__(\"__count__\")) /*for..in*/for(const [constructor, __noSuchMethod__] = <employee id=\"1\"><name>Joe</name><age>20</age></employee> in <x/>) if(@foo) { if (*::*) export prototype; else __parent__, __proto__ =  \"\" ;} else  if (prop = __noSuchMethod__ = __parent__) ( /x/ );");
tryItOut("with(1e-81)");
tryItOut("M:switch(@foo ? *::* : <><x><y/></x></>) { case (undefined && __count__): break;  }");
tryItOut("/*infloop*/do __iterator__, constructor = __parent__; while(({function::constructor: <x><\ry/></x>}));");
tryItOut("throw  '' ;");
tryItOut("({ __count__: ({ __parent__: __noSuchMethod__ }) })");
tryItOut("if( { yield __iterator__ = <x><y/></x> }  in __noSuchMethod__%=<x><y/></x> instanceof false) /*infloop*/L:do yield null; while(__count__ = __noSuchMethod__); else /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  /x/ ) {return;break M; }");
tryItOut("{/*for..in*/L:for(let __count__ = false in *) 3; }");
tryItOut("M:if(({ constructor: ({ __count__: prototype }) }) = <x/> .@ 1e+81) var prop = false;");
tryItOut("switch([,,] < __noSuchMethod__) { case (-1): break;  }");
tryItOut("{return; }\nwhile((yield *) && 0){let __iterator__ = 1e+81, prototype = <x><y/></x>; }");
tryItOut("return\neval(\"yield;\", ({a1:1}));");
tryItOut("continue L");
tryItOut("/*infloop*/for(<x/> ^ null; (({__count__: null})); 'fafafa'.replace(/a/g, [1,2,3,4].slice)) switch(<x/>) { case <x><y/></x>: return; }");
tryItOut("let(__count__) { prototype = __proto__;");
tryItOut("with(false){}");
tryItOut("switch([15,16,17,18].some(function(y) { yield y; ({});; yield y; },  /x/ )) { case  \"\" .yoyo(false): L:if(false) __parent__: <x><y/></x> else  if ([,,z1]) {{} } else {__parent__continue M; }break; ;break;  }");
tryItOut("{/*for..in*/for(var __iterator__ = <x/> in  '' ) {yield; } }");
tryItOut("yield\nL:if(true) gc() else  if (__parent__) yield  '' ;");
tryItOut("if(new [[]](1e81,  \"\" )) continue L; else var ;;");
tryItOut("L: {const __iterator__ =  \"\" , prop = [z1,,]; }");
tryItOut("let (prop = <x/>, constructor) { {} }");
tryItOut("prototype.__count__ = __noSuchMethod__;");
tryItOut("if(Object((<x><y/></x>)[prop], 0.1)) {yield this; } else {(new Function(\"prototype = -3/0;\")) }");
tryItOut("while((((__proto__ = __proto__) instanceof [prop].sort((gc).call)\n)) && 0)/*infloop*/M:for(let ({ constructor\r: __parent__.__count__ }) = new undefined >>> 1.3(( /x/ )[true ? true :  \"\" ]); prototype; true) yield <><x><y/></x></>;if((new (([1,2,3,4].map).call(0.1))(((({a2:z2}));), .2))) {;; } else  if (yield <x/>) return prototype;");
tryItOut("/*for..in*/for([__parent__, prop] = undefined in  \"\" ) {gc()return; }");
tryItOut("if(1.2e3) {\freturn __proto__; } else  if (<y><z/></y>) yield;\n(undefined)\n\n");
tryItOut("/*for..in*/for(const setter(new Date(window, @foo)) in (('haha'.split)([11,12,13,14].some)))yield;\n{}\n");
tryItOut("throw #0=({constructor: *}); const __count__;");
tryItOut("let (__iterator__ = window, prop) { let constructor, prop = <x><y/></x>; }");
tryItOut("do {throw (this);if(prototype = <y><z/></y>) {{gc()var __count__ = prop; } } else  if ((uneval((p={}, (p.z = null)()))) *  ''  ^ *::*) continue M; } while(({if([15,16,17,18].filter(function  __noSuchMethod__ ()false, ({})--)) {let __count__, __proto__ = <y><z/></y>;; const prop; } else  }) && 0);");
tryItOut("/*for..in*/L:for(var __count__ = (new ()(<x><y/></x> ? <x><y/></x> : <x><y/></x>, *)) in <><x><y/></x></> for each (constructor in <x><y/></x>)\t) {throw  /x/g ; }");
tryItOut("yield <x><y/></x>;\nyield undefined;\n\n");
tryItOut("{(<x><y/></x>); }");
tryItOut("/*for..in*/for(const __proto__ in ((new Function)([] = prototype))){/*for..in*/for(const __proto__ in {}) {export *; }L: {export prop; } }");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(__proto__ in constructor(window) = <x\f><y/></x>) {do {break M;return undefined; } while(( set __parent__(__parent__, constructor) { return [,] } ) && 0);/*for..in*/for([__noSuchMethod__, __proto__] = *::* in <x/>) {Math.sinlet prototype; } }");
tryItOut("/*for..in*/for(__iterator__ = *::*.unwatch(\"__proto__\")++ in this) {export *; }/*for..in*/");
tryItOut("/*for..in*/L:for(const __iterator__ = (prototype >> @foo) in ((constructor = <y><z/></y>) for (__noSuchMethod__ in [z1]) for each (__iterator__ in *))) {var __parent__, constructor; }");
tryItOut("L: ( /x/ );");
tryItOut("constructor = 0/0;;");
tryItOut("throw true\nconst __parent__, __proto__;");
tryItOut("if([[1]].@foo) { if ((3.eval(*::*))) yield <><x><y/></x></>; else {export *; }}");
tryItOut("with(3/0){}");
tryItOut("/*infloop*/for(({ prop: prototype }) = prototype.isPrototypeOf(__noSuchMethod__); (<x/> @ <x><y/></x>); new (Function)(<x><y/></x>)) <!--yy-->");
tryItOut("throw StopIteration;");
tryItOut("do return; while(((__proto__ = __proto__)) && 0);");
tryItOut("M:with((false.propertyIsEnumerable(\"__parent__\")).eval(new Error(window.unwatch(\"__noSuchMethod__\"), <x><y/></x>)))var __noSuchMethod__, constructor;");
tryItOut("{[1,2,3,4].map }");
tryItOut("{if(null) gc() else  if ([z1]) function(id) { return id }; else gc(); }");
tryItOut("{;var __count__ = __noSuchMethod__; }");
tryItOut("yield this;");
tryItOut("/*infloop*/for(const ({ __proto__: [[__iterator__], ({ __noSuchMethod__: [] }), , __noSuchMethod__, []], constructor: constructor }) = ([0x99 for each (__iterator__ in (__count__.prop setter= function  __noSuchMethod__ (prototype, __noSuchMethod__) { yield 0x99 } )) for each (__count__ in <y><z/></y>)__noSuchMethod__ = this]); (\n /x/g .*); eval(\"((uneval(this if (<x/>))))\", prototype.prop getter= Math.sin)) gc()arguments;");
tryItOut("/*for..in*/for(const [__proto__, let] = (({__count__ getter: ([1,2,3,4].map).apply })) in  /x/ ) switch(({prop: <><x><y/></x></>})) { default: break; break;  }");
tryItOut("with({__proto__: __iterator__ ^ __noSuchMethod__})yield;");
tryItOut("/*for..in*/L:for(const constructor = *.isPrototypeOf(<><x><y/></x></>) in <x><y/></x>) {gc()break ; }");
tryItOut("do {switch(\n__noSuchMethod__) { case 0: var __parent__ = this, __iterator__; }let __count__ = undefined; } while((((__parent__.__iterator__ setter= function  __proto__ () { return arguments }  | (<x><y/></x>\t ? 5.0000000000000000000000 : <y><z/></y>)).__iterator__ = (p={}, (p.z = (<x><y/></x>.throw(this)))()))) && 0);");
tryItOut("throw <x/>;");
tryItOut("/*for..in*/for(const constructor in eval(\"/*for..in*/for(const __noSuchMethod__ = ((window.throw(window)) for ((<x/>)(<><x><y/></x></>) in prototype)) in this) return <><x><y/></x></>;\", ++new Error(({a2:z2})))) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in new this(<x/>, <><x><y/></x></>)) {while((<><x><y/></x></>) && 0){return prop;(<x><y/></x>); } }");
tryItOut("if(((this)().propertyIsEnumerable\f(\"__iterator__\"))) __noSuchMethod__ = <x><y/></x>, prop; else  if (__count__.propertyIsEnumerable(\"prototype\")) {yield <><x><y/></x></>;return <><x><y/></x></>; } else {{yield __proto__; }gc() }\n");
tryItOut("var prop, false = @foo; const prop;");
tryItOut("/*infloop*/M:for(prototype; <><x><y/></x></>; [z1,,]) return;");
tryItOut("/*infloop*/for(prototype; <><x><y/></x></>; <x/>) {gc() }/*\n*/");
tryItOut("return;");
tryItOut("with((<x><y/></x>)( \"\" ) ? <x><y/></x>.propertyIsEnumerable(\"<x><y/></x>\") : (return))export *; const delete;");
tryItOut("if([z1]) { if ( \"\" ) {/a/gi } else {continue L;throw -3/0; }}\nlet __proto__ = function(id) { return id }, __noSuchMethod__ = this;\n");
tryItOut("if( \"\" ) const __count__ = [1,,]; else {@foo }");
tryItOut("*; const prototype;\ngc()\n");
