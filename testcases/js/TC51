
tryItOut("break ;");
tryItOut("var __parent__ = <x><y/></x>;");
tryItOut("((-1).__lookupGetter__(\"constructor\"))");
tryItOut("/*infloop*/do {continue ;const __parent__, __noSuchMethod__ = __iterator__; } while(<x><y/></x> /= 1e4.yoyo(function(id) { return id }));");
tryItOut("if( /x/g .__parent__) ([[1]]); else prop, prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const prop in prototype |= x::__parent__.eval(@foo).@*) {if(__count__) { if (*::*) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <x><y/></x>) {yield; }gc() }} else export prop; }");
tryItOut("/*for..in*/for(var __proto__.constructor in (prototype.constructor)) {export *;/*for..in*/M:\tfor(var [prototype, __proto__] = *::* ? ({a1:1}) : <x><y/></x> in window) yield; }");
tryItOut("\nthrow *::*;");
tryItOut("/*infloop*/for(({ prop: __noSuchMethod__, __proto__: prototype }) = <{__noSuchMethod__}><!--yy--></{__noSuchMethod__}>; --__noSuchMethod__ & null.propertyIsEnumerable(\"__iterator__\"); __count__.prop + (p={}, (p.z = @foo)())) /*infloop*/do {let prototype; } while(undefined);");
tryItOut("{gc()window }");
tryItOut("__count__ = prototype;");
tryItOut("if([11,12,13,14].some) export prop; else  if (eval(\" \\\"\\\"  /= *\", *::*.throw(<x><y/></x>))) let prop = <y><z/></y>, prototype;");
tryItOut("/*infloop*/M:for(const __iterator__; prop = (prototype = .2 >>> 0.1.eval(<y><z/></y>)); ( /x/g  ? window : [,])) {yield; }");
tryItOut("with( /x/g )(<x><y/></x>);");
tryItOut("if((<><x><y/></x></>.isPrototypeOf(<x/>))) const prop, prototype =  \"\" ; else  if (eval(\"#3={a:#3#}\", <>\f<x><y/></x></>)) {export x::__iterator__; } else yield;");
tryItOut("M:with(*::*){/*infloop*/for(const __parent__ = window; <x; false) gc() }");
tryItOut("let(constructor = [((p={}, (p.z = <y><z/></y>)()))], ({ __noSuchMethod__: constructor })) { M:with({__iterator__: (constructor = true)})return *;");
tryItOut("let(constructor = undefined, __iterator__) ((function(){export __iterator__ *constructor;})());");
tryItOut("while((new Exception(<x><y/></x>)) && 0)gc()");
tryItOut("/*infloop*/for(let __noSuchMethod__ = <x/>;  \"\" ; <x><y/></x>) const __noSuchMethod__ = <x/>, __proto__ = <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((constructor = ( \"\"  ^ false)) in ({__noSuchMethod__ })) /*for..in*/for(var __parent__ in 3.141592653589793) throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(const [__iterator__, constructor] = false for each (__iterator__ in <><x><y/></x></>) & void <><x><y/></x></> .. __proto__ = constructor = #3={a:#3#}[__proto__] in (new (1e-81)(<y><z/></y>,  '' ))) /*infloop*/while(false){return;export *; }");
tryItOut("");
tryItOut("while((@foo) && 0){yield *::*;throw *; }");
tryItOut("try { export *; } catch(__noSuchMethod__ if (.__iterator__ = this)) { with({}) yield (({ get __proto__(__count__)prop })).__defineSetter__(\"__noSuchMethod__\", Function); } catch(setter) { this.zzz.zzz; } ");
tryItOut("M:if(<><x><y/></x></>) (this); else  if ( /x/ ) const __noSuchMethod__, __iterator__; else {let constructor; } const __parent__;");
tryItOut("with((function ([y]) { })()){throw [1,,];export *; }");
tryItOut("/*for..in*/for(\rvar __noSuchMethod__ in ((({}).__lookupGetter__)(new Object(4., ({__iterator__: #1# }))))){if(let (__proto__, prototype =  \"\" ) this) { if (null :: <y><z/></y>) {yield;return }} else export *; }");
tryItOut("if(<x><y/></x>.@foo) throw __parent__; else  if (let (x::constructor = [z1,,]) //h\n<><x><y/></x></>) {gc() }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __iterator__, __count__: [] }); <><x><y/></x></>\n; (<x><y/></x>\n)) {throw <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __count__ in <><x><y/></x></>) ({ __parent__: [] })");
tryItOut("/*for..in*/for(let ([,,z1].prototype).constructor in (((new Function(\"M:do {yield this;return 0x99; } while((1e4) && 0);\")))((new (@foo)(true))))){{}prop; }");
tryItOut("/*infloop*/for(constructor; (function ([y]) { } ? undefined : (-1)); *::*) {__iterator__; }");
tryItOut("if(this) { if (<x><\ry/></x>) break M;} else {(<x/>);let __proto__ = prop, __proto__; }");
tryItOut("if() export constructor; else  if (({__proto__: <x><y/></x> }) .@*:: <><x><y/></x></> .@ [1,,]) {throw false;gc() }");
tryItOut("/*for..in*/for(let [prototype, __proto__] = eval(\"new ('haha'.split)()\", <x><y/></x>.@foo) in (({__parent__: *}))) {/*infloop*/do yield; while(<y><z/></y>); }");
tryItOut("if(<y><z/></y> ? null :  /x/ .@foo) {export *;throw #1=[#1#]; } else {/*for..in*/for(var [\f__count__, __parent__] = (yield <x/>) in <x/>) export *; }");
tryItOut("{switch(prototype = window\n) { case 3: M\f:if(String([],  '' )) { if ((({ set __count__ __count__ () /x/g  }))) {; } else {gc() }}break; case 7: default: break;  } }");
tryItOut("if(new true()) {;let __noSuchMethod__, __count__ = <y><z/></y>; } else  if (\n) ({}).hasOwnProperty(<><x><y/></x></>);");
tryItOut("/*infloop*/for(let prop; this >= #1#.unwatch(\"prototype\"); __proto__ = false) {/*infloop*/do  while(window);export __noSuchMethod__; }");
tryItOut("gc()");
tryItOut("/*for..in*/for(let constructor = (*::*)(*, window) in this) continue ;");
tryItOut("\freturn <><x><y/></x></>;\n(([ \"\"  for each (__noSuchMethod__ in window)] instanceof ((uneval(<x><y/></x>)))));\n");
tryItOut(";");
tryItOut("return new new Math.sin()([11,12,13,14].filter, 5.0000000000000000000000) , ([11,12,13,14].filter);");
tryItOut("with({__noSuchMethod__: ({}).__lookupGetter__}){/*for..in*/for(let __iterator__ in 1e+81) {return;*::*; } }");
tryItOut("window;constructor;");
tryItOut("throw  get constructor(prop, __count__)constructor;\nyield 3.141592653589793;\n");
tryItOut("if(typeof true) let prototype = #1=[#1#];");
tryItOut("/*for..in*/for(const prototype in  /x/g \n) throw 3/0; const __iterator__; const prop;");
tryItOut("/*for..in*/M:for(const __parent__ in ((Function)(new ()(prototype, ( /x/g \n))))){gc()let (__proto__) { /*infloop*/L:for(__iterator__; function(id) { return id }; <><x><y/></x></>) (1 for (x in [])) const prop; } }");
tryItOut("let(__proto__ = (null ? window : <><x><y/></x></>\r)) { with({}) function::__proto__ = __parent__;");
tryItOut("let (__parent__) { export *; }");
tryItOut("let(prop = window, __iterator__ = @foo) ((function(){(1e81);})());");
tryItOut("while((<><xxx {function::prop}={<><xxx {__proto__}={<x/>} /></>} /></>) && 0){/*infloop*/for(var __count__; .2; true) yield <x><y/></x>\n; }");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("with({}) constructor = prop;");
tryItOut("{break ;__proto__ = <y><z/></y>, prototype; }");
tryItOut("");
tryItOut("if((*(this, __proto__))) {; } else  if ( /x/  ^= <x/>) { }");
tryItOut("/*for..in*/for\n(var [__count__, __noSuchMethod__] = __parent__.(*::*.yoyo(#3={a:#3#})) in 0x99.__noSuchMethod__) /*infloop*/L:for(let __noSuchMethod__; eval(\" /x/ \", window); (*::*)) {export constructor;function(y) { yield y; try { __noSuchMethod__ } catch(__parent__) { new Function } finally { export __parent__; } ; yield y; } }");
tryItOut("do { const __count__;/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in -0) {if(5.0000000000000000000000) { if (window) throw this;} else {[1,2,3,4].map; }var __noSuchMethod__ = undefined; } } while((((p={}, (p.z = <x/>)())).yoyo((* === -1--.eval(Math.pow)))) && 0);");
tryItOut("throw StopIteration;");
tryItOut("export *;");
tryItOut("with(<x/>){throw <><x><y/\f></x></>;const __parent__ = set, __noSuchMethod__, __iterator__ = -0; }");
tryItOut("/*infloop*/L:for([] = <x><y/></x>; ({__parent__: function ([y]) { }}); (Array(undefined, prototype))) export *;\r");
tryItOut("/*infloop*/for(let __proto__ = case 8: ; <y><z/></y>; window) (this);");
tryItOut("/*for..in*/for(const [__iterator__, __noSuchMethod__] = typeof <y><z/></y> in <xxx {prop}={__noSuchMethod__.(true)} />) /*for..in*/M:for(var __count__ = \n \"\" \n in <><x><y/></x></> <<  /x/ ) {yield; }");
tryItOut("{/*for..in*/M:for(const __iterator__ = [(<><x><y/></x></>.__lookupSetter__(\"__parent__\")) for each (__iterator__ in <x/>)].eval((<x><y/></x> if (<><x><y/></x></>))) in <><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")) ; }");
tryItOut("{/*infloop*/do with( /x/g  ::  '' ){continue \f; } while(({__proto__: (this.__defineGetter__(\"constructor\", [1,2,3,4].map))})); }");
tryItOut("/*infloop*/for(const __parent__;  /x/g ; *::*) throw window;");
tryItOut("with({__count__:  \"\" }){var constructor =  /x/g ; }");
tryItOut("{export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ ? __parent__[-0] : this['prototype'] in <zzz>((-1)([,], <x><y/></x>))</zzz>) with({}) for(let y in []);");
tryItOut("if(prototype.__proto__) {gc() } else throw __count__;");
tryItOut("/*for..in*/L:for(const prop in *) {export prototype; }");
tryItOut("{; }");
tryItOut("with({constructor: false})export *\n");
tryItOut("if((function  __parent__ (__parent__, __iterator__) { yield (\n*::*)(true.eval(window), <><x><y/>\r</x></>) } ).call(({}), <x><y/></x> / 4..yoyo())) {M:do {yield 0x99\f;var prop, __count__ = <><x><y/></x></>; } while((window) && 0);L:do {var prototype = <x/>, __parent__ = 3/0; } while((1.3) && 0);(1 for (x in [])) } else {export __count__; }");
tryItOut("/*for..in*/for([constructor, prop, , ] in (((prototype = prototype).watch)(window))){var __parent__, __proto__ = null; }\f");
tryItOut("/*infloop*/for([[, [, ], __proto__], , ] = .2; (@foo\t.__parent__); this.__defineSetter__(\"-3/0\", 'haha'.split).propertyIsEnumerable(\"constructor\")) {/*infloop*/for(var __parent__; (prop = __proto__ ? <x><y/></x> : window.__lookupGetter__(\"prototype\")); __parent__.hasOwnProperty(\"__iterator__\")) if(*::*;) { if (new Iterator(<><x><y/></x></>, gc())) gc() else return;}/*infloop*/do /*infloop*/for(var __proto__; undefined.__noSuchMethod__; __iterator__ = <y><z/></y>) constructor while((<y><z/></y> += <x><y/></x>)); }");
tryItOut("throw *; const __parent__;");
tryItOut(" const prototype;");
tryItOut("let(prototype = <x><y/></x>) ((function(){export __noSuchMethod__;})());");
tryItOut("/*for..in*/for(const __iterator__ = *::*.isPrototypeOf( /x/g ) in ( \"\" .@*)) /*infloop*/for(let __proto__; #3={a:#3#}; 3.141592653589793) {let = this, __parent__ = prototype;export *; }");
tryItOut("with({__parent__: (true <= constructor)}){L: export __count__;\t/*infloop*/L:for(const prototype = <y><z/></y>; function(id) { return id }; window) __count__ = <x><y/></x>, __proto__; }");
tryItOut("while(([] = @foo['__count__']) && 0){do var prop; while((\f1.3) && 0)\nthrow 3; }");
tryItOut("/*infloop*/M:for(let ({ __iterator__: __count__, constructor: __count__ })/*\n*/ = (( /* Comment */*)(__iterator__ = <><x><y/></x></>, undefined)); ({__parent__ getter: (0x99).__defineSetter__,  set prototype constructor (prop) { yield  }  }); null || *++) {export *; }");
tryItOut("M\f:do const __count__ = window, __parent__ = <x/>; while((__proto__) && 0);");
tryItOut("return <y><z/></y>;");
tryItOut("yield;");
tryItOut("var constructor = window\n(([-3/0])); const __parent__;");
tryItOut("\ttry { let constructor, prop; } finally { return *::*; } ");
tryItOut("L: L: export *;");
tryItOut("L: do __iterator__ while((@foo) && 0);");
tryItOut("{/*for..in*/for(var [__iterator__, prop] = <y><z/></y> in @foo) continue ; }");
tryItOut("/*infloop*/for(0x99; __parent__.__noSuchMethod__; <><x><y/></x></>) return;");
tryItOut("L:if(new function(q) { return q; }(<x/>, __parent__)) { if (( /* Comment */null) |= [3]) yyy;} else return this;");
tryItOut("return;return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__ in ) {do export *; while(( /x/ ) && 0); }");
tryItOut("with(([((033)( '' , this)) for (constructor in <><x><y/></x></>)].__defineGetter__(\"__parent__\", ({}).__lookupGetter__) >>= __noSuchMethod__.constructor = ).__defineSetter__(\f\"__count__\", (__iterator__ = (#1#)(window, *::*)[<x/>] :: ()))){return; }");
tryItOut("with(null)var prototype = <><x><y/></x></>;");
tryItOut("/*for..in*/for(const [prop, __iterator__] = (__noSuchMethod__)+= /* Comment */ /x/g  / <><x><y/></x></> in (new (((<x/>)(this, <x><y/></x>)))())) {switch( /x/g .__noSuchMethod__ = <x><y/></x>) { default: return constructor;break;  }/*infloop*/for(prototype; <x/>; yield /= <><x><y/></x></>) ( \"\" ); }");
tryItOut("throw undefined;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for \t each(const __noSuchMethod__ in this *=  '' ) {gc()export prop; }");
tryItOut("{{;export *; }<y><z/></y>; }");
tryItOut("for(let y in []);");
tryItOut("(([11,12,13,14].some));");
tryItOut("this.zzz.zzz;");
tryItOut("while((Error(__count__ = undefined,  '' )) && 0){yield; }");
tryItOut("/*for..in*/M:for(const prop in function ([y]) { }) {let prop, __noSuchMethod__ = @foo;export __count__; }");
tryItOut("yield ({a1:1})\n/*for..in*/for(prototype in ((function ( for (({ __count__: ({ __count__: constructor }), __iterator__: ({ @foo: __proto__ }) }) in __parent__ = x::__iterator__ = <y><z/></y>.yoyo((constructor.(undefined)))) if (__count__ = <x><y/></x>)) { return <x><y/></x>; } )((-1.__defineSetter__(\"__parent__\", ({}).__lookupGetter__)))))/*infloop*/for(var ({ __count__: ({ prop: prop, __parent__: __proto__ }), __iterator__: prototype }) = <x/>.__proto__ = this; <><zzz><><x><y/></x></></zzz><\t/>; constructor) {/*for..in*/for(let __noSuchMethod__ in <x><y/></x>) gc()gc() }");
tryItOut("/*infloop*/for(var __count__; <y><z/></y>; <x><y/></x>) break L;");
tryItOut("/*for..in*/for(let __iterator__ = ( /* Comment */null) in *::*) return;");
tryItOut("\n(<x><y/></x>);\nthrow <><x><y/></x></>;\n");
tryItOut("return true.__lookupSetter__(\"__iterator__\");");
tryItOut("do {if((null.isPrototypeOf(#3={a:#3#}))) throw  '' ; else  if (<><x><y/></x></>) {yield;gc() } else break ;if(eval(\"#3={a:#3#}\", false)) { if (<x/>) /*infloop*/for(let prototype; 3; *) return 0.1; else {yield;yield; }} } while((__count__\n %= window\n) && 0);");
tryItOut("/*for..in*/for(let prototype in (__count__)[__iterator__]) {throw undefined; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in  \"\" ) yield; const __proto__;");
tryItOut("switch( '' ) { case 9: ( \"\" );return;break; case 1: break; ;default: case constructor: break; case 3: break;  }");
tryItOut("switch(constructor) { default: ;break; case 8: yield  /x/ ; }");
tryItOut("while(('fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; })) && 0){break L; }");
tryItOut("L:if(new <><x><y/></x></> instanceof  /x/ (window != new Function(try { yield constructor; } catch(__noSuchMethod__ if <y><z/></y>) { {} } catch(__noSuchMethod__ if  /x/ ) { {} } catch(__noSuchMethod__) { (<\f><x><y/></x></(/); } ), (#2=({constructor: function () { return prototype.__count__ = each } })))) {var __noSuchMethod__, __proto__ =  '' ; }");
tryItOut("if([<x><y/></x> for (prop in -0)]) return <y><z/></y>; else  if (<x><y/></x>.unwatch(\"constructor\")) <x><y/></x><ccc:ddd></ccc:ddd>");
tryItOut("{/*for..in*/L:for(prototype in <x/>) {yield; } }");
tryItOut("/*infloop*/for(*.prototype; (([15,16,17,18].map([[]], ((__parent__ if ( \"\" ))))) ? [11,12,13,14].filter.valueOf(\"number\") : (__parent__.(([((<x/> for (constructor in <x><y/></x>)))].filter(3.141592653589793))))); true.__defineGetter__(\"__iterator__\", [1,2,3,4].slice)) const ({ __count__: __noSuchMethod__, prototype: __iterator__ }) = this, __count__ = <x><y/></x>;");
tryItOut("L: gc()");
tryItOut("/*for..in*/M:for(let (eval(\";\", (__noSuchMethod__))) in *::*.hasOwnProperty(\"prototype\")) {export prop; }");
tryItOut("/*infloop*/do {/*for..in*/for(let [__proto__, prototype] = (-1) in  \"\" ) {yield;; } } while(<{__proto__}></{__proto__}>);");
tryItOut("/*infloop*/M:do /*for..in*/for(let __parent__ in ((/a/gi)( '' )))<y><z/></y>; while((new ((new Function(\";\")))(__iterator__, [z1,,]).throw(([__proto__].filter(/a/gi)).__lookupSetter__(\"prop\")) >= ((1.2e3)())\n));");
tryItOut("__iterator__;");
tryItOut("let ([], __count__) { (null <<= <><x><y/></x></>.__defineGetter__(\"({ constructor: ({ __iterator__: prop }), __noSuchMethod__: __count__ })\", ({}).hasOwnProperty)); }");
tryItOut("/*infloop*/for(var <x/>.hasOwnProperty(\"__count__\"); (<x><y/></x>.__parent__.__defineSetter__(\"constructor\", function (constructor, constructor)(<y><z/></y>[<><x><y/></x></>]))); try { yield constructor.__count__ getter= (new Function(\"throw false;\")); } finally { return; } ) function::__iterator__ = <><x><y/></x></>;");
tryItOut("if(true.unwatch(\"__noSuchMethod__\")) __proto__, {if(*) {return <><x><y/></x></>; } else  if (<x/>) {return <><x><y/></x></>;yield; } else {export __parent__;; } }");
tryItOut("{do true; while(( /x/ ) && 0); }");
tryItOut("with(\f<><x><y/></x></>){return 1e+81; } const constructor;");
tryItOut("{( /x/ );export *; }");
tryItOut("let __proto__ = -1;");
tryItOut("/*for..in*/L:for(const [__count__, __count__] = ( /x/g .prototype) in __noSuchMethod__(<x><y/></x>)) export *;");
tryItOut("throw this\nlet prototype = <x><y//*\n*/></x>;");
tryItOut("L:if((false.__iterator__.isPrototypeOf((Math.pow)(([__parent__ for each (__parent__ in *::*)]))))) {throw 0.1; } else  if (window.yoyo(prop)) {yield this;continue ; }");
tryItOut("if(prototype) { if (<y><z/></y>) {yield false; }} else {(*); }");
tryItOut("while((__parent__) && 0)return;");
tryItOut("L:switch((new (window)(prototype = 1e4, window))) { case __noSuchMethod__.__proto__ getter= eval: /*infloop*/do yield; while(((p={}, (p.z =  \"\" )())));yield  /x/ ;break;  }");
tryItOut("/*infloop*/M:for(var [] = (new (1 for (x in []))(this.__defineGetter__(\"prototype\", ((3.141592653589793).watch).call).*, [__noSuchMethod__ if ([z1,,])])); ; #0=[<y><z/></y>] .@x:: (window.propertyIsEnumerable(\"__parent__\"))) {{}export __parent__; }");
tryItOut("function(q) { return q; }\nreturn\n");
tryItOut("if(false) /*infloop*/while( \"\" ){yield undefined; }");
tryItOut("if(<y><z/></y>) {L: {const prop; } }");
tryItOut("/*infloop*/do #1#; while((({case @foo: {}break;  })));");
tryItOut("L: return constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x><y/></x> .. <x><y/></x>) {return this; }");
tryItOut("");
tryItOut("this.zzz.zzz;");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in *) var prototype;");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = (() for (constructor in <x><y/></x>\t) for each (__proto__ in window)) in  /x/ ) let prototype = *, __parent__ = prototype;");
tryItOut("/*infloop*/while(__noSuchMethod__)while((function::constructor(<><x><y/></x></>)+=__parent__ =  /x/g ) && 0){{}export __noSuchMethod__; }");
tryItOut("L:do {/*infloop*/do {__parent__ = <x><y/></x>return window; } while(<y><z/></y> .. let (__count__ = <x/>)  if (<><x><y/></x></>\r)); } while(( \"\" ) && 0);");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("if(<y><z/></y>) break M;");
tryItOut("if({}) yield window; else  if (<x/>) {} else return;");
tryItOut("L:if(prop / <y><z/></y>) { if (prototype = __iterator__+=undefined++.__parent__ = constructor.__iterator__ = window >> #1# || \ftrue.__lookupGetter__(\"__parent__\")) {/*infloop*/while(null %= window.__count__)undefined;switch((__parent__ = try {  } catch(prop) { export prototype; } )) { default: break;  } }} else {throw  \"\" ;var prototype = -1; }");
tryItOut("while(((prop =  /x/g )(new Error(<x><y/></x>.constructor))) && 0)\f{(*).watch }\n{;<x/>; }");
tryItOut("/*infloop*/while(__iterator__){}\n/*for..in*/M:for(var [prototype, __proto__] = prop = [[]] in window) { }export *\n/*for..in*/L:for(const [__count__, __parent__] = <><x><y/></x></> in null) {let __parent__ = <x><y/></x>, __proto__ = 3.141592653589793; }");
tryItOut("if(constructor.hasOwnProperty(\"constructor\") << new new (-0)(<><x><y/></x></>, <x><y/></x>)()) { } else {{} }");
tryItOut("throw window;");
tryItOut("let (__count__ = ({ get __proto__(({ __proto__: ({ __noSuchMethod__: __proto__, __count__: __proto__ }) }))[this].some(new Function) }) @ (<x/>)(<!--yy-->)) { continue \n }");
tryItOut("do yield *; while((<y><z/></y>) && 0);");
tryItOut("/*infloop*/M:do break L; while(constructor);");
tryItOut("/*infloop*/L:for(\nconst __proto__; new Error(constructor, undefined); <ccc:ddd></ccc:ddd> = ) gc()");
tryItOut("null;");
tryItOut("/*infloop*/do function (__parent__, __iterator__) { return false }  while(<><x><y/></x>/*\n*/</>);");
tryItOut("if((.yoyo((-1)))[<!--yy-->]) { if ([15,16,17,18].some(({}).__lookupGetter__, new 1.3(null, *) instanceof ((Math.sin)()))) /*infloop*/L:for(__count__; 1.3; undefined) var __iterator__ = @foo, __count__; else {/*for..in*/for(var constructor = ((-0.*)((new Function(\"(0x99);\")))+=[({ __noSuchMethod__: __parent__, constructor: __parent__ }), , ] = (<y><z/></y>.__lookupSetter__(\"__parent__\"))) in new __proto__(this)) {//h\n\n } }}");
tryItOut("/*for..in*/for(prop in *::*) __noSuchMethod__\n");
tryItOut("/*for..in*/for([prop, __proto__] = ((true(undefined)++) >>= <><x><y/></x></> >>>= /x/ ) in ^ < undefined) {/*infloop*/for(prop = yield; 1.2e3; window) {yield <x><y/></x>;const __iterator__, constructor; }yield; }");
tryItOut("/*infloop*/for(prototype; (new (__count__)(<x><y/></x>, <x><y/></x>)); (__proto__ || ()[true])) export *;");
tryItOut("/*infloop*/for((((Math.pow)(033, false) ? window.propertyIsEnumerable(\"__iterator__\") : yield <y><z/></y>) ? <><x><y/></x></> :  /* Comment */window); (__iterator__|=(eval(\"yield @foo;\", undefined))); [constructor].some('haha'.split).__defineGetter__(\"__iterator__\", Function)) {break L;constructor }");
tryItOut("/*infloop*/while(*::*){(({a2:z2})); }");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/M:for(var __parent__ in (__proto__)(( /x/g ))) {/*infloop*/do continue \nbreak \tM while([z1].eval(<y><z/></y>)); }");
tryItOut("L: {/*infloop*/while(((__noSuchMethod__).__defineSetter__).call(*::*, )){yield;export *; } }");
tryItOut("try { export prop; } finally { const prototype, prototype; } ");
tryItOut("if(__proto__.(null)) null; else  if (<><x><y/></x></>) throw <x><y/></x>;");
tryItOut("for(let y in [5,6,7,8]) return ({ __count__: ({ __proto__: __count__ }), __noSuchMethod__: ({ __parent__: ({ __parent__: __iterator__, __noSuchMethod__: __noSuchMethod__ }), __proto__: __noSuchMethod__ }) }) = \neval(\"throw null;\", 0.1);");
tryItOut("L: ");
tryItOut("for(let y in [5,6,7,8]) let(prototype, yield = constructor) { prototype = __iterator__;");
tryItOut("switch([1,,]) { default: if(this.eval(<><x><y/></x></>)) {return;export *; } else  if (--({})) {export __parent__;__noSuchMethod__, __count__ = constructor; }case <><x><y/></x></>:  }");
tryItOut("if(<x><y/></x>) { if (<x/>) {gc()throw <x><y/></x>; }} else throw prototype, __count__;");
tryItOut("/*infloop*/for(const ({ prop: ({ <x><y/></x>.__count__++: ({ __iterator__: [({ prototype: __parent__ }), , , [, , ]], constructor: __proto__ = ;, constructor = window }), __parent__: ({ constructor: ({ constructor: ({ __proto__: __noSuchMethod__ }) }) }) }), function::prototype: [[], new null(__parent__, <y><z/></y>)['__noSuchMethod__'], , <x><y/></x>, ] }\t) = (* ? __parent__ : false); __proto__; __proto__ = (eval(\"__proto__.__parent__ = <\\tx><y/></x>\", (-1)[prop]))) (<><x><y/></x></>);");
tryItOut("if((<x/>.eval(<><x><y/></x></>))) { if (prop = RegExp()) var __proto__, setter; else {throw <x><y/></x>; }}");
tryItOut("return (1e81).call(<x><y/></x>, @foo, *::*).*;");
tryItOut("/*infloop*/do let __iterator__ =  /x/g ; while( /* Comment */#1=[#1#]);");
tryItOut("/*infloop*/for((__proto__.__iterator__);  '' .watch(\"__parent__\", /a/gi);  /x/ ) {/*infloop*/do {export *;const __parent__ = __count__; } while([,,z1] instanceof [,,z1] += @foo);with({__iterator__: <y><z/></y>})yield }");
tryItOut("/*infloop*/for(prop; try { ; } catch(prop if (function(){export *;})()) { {} } finally { (<x><y/></x>); } ; <x/>) {<y><z/></y>;__proto__ }\n");
tryItOut("if((__iterator__.__proto__ = window .@ [z1])) {throw  \"\" ;throw @foo; } else {yield true;let constructor =  /x/g , __iterator__ = window; }");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", (({__proto__: <y><z/></y> })))) { if (( /x/g .unwatch(\"__proto__\") for each (__parent__ in 0/0) if (window))) {true }} else if(prototype = *::*) { if (<y><z/></y>) gc()} else ");
tryItOut("if(gc()) {export __iterator__;{/*infloop*/for(\n<y><z/></y>;  /x/ ; window) throw [z1,,];if(__parent__) break M; else  if (*) yield <x><y/></x>; } } else /*infloop*/for(let __count__; __proto__; (__proto__ = <x/>)) {return; }");
tryItOut("*;");
tryItOut("/*infloop*/while(<x><y/></x>\f.@foo)var __iterator__, __proto__ = <x><y/></x>;");
