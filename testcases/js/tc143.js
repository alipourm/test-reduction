tryItOut("gc()");
tryItOut("L:if(.2.eval(@foo)) with({}) {  /x/g ; } ");
tryItOut("return <><x><y/></x></>\n");
tryItOut("with({}) try { return true; } catch(__parent__ if *) { constructor = *::*, __parent__; } catch(prototype if (function(){__noSuchMethod__, prop;})()) { return; } ");
tryItOut("/*for..in*/L:for(const [constructor, __count__] = <x/> in eval(\"yyy\", undefined)) {;return; }");
tryItOut("if(((yield __noSuchMethod__))) { if (__iterator__.__parent__ getter= 'haha'.split) var __proto__ = [,]; else {;; }}");
tryItOut("/*infloop*/for(({ __iterator__: eval(\"<x><y/></x>\",  /x/g ) }) = +@foo.unwatch(\"__proto__\");  '' [this];  /x/g ./*\n*/unwatch(\"__proto__\")) {let (prop, __count__) {  }( /x/g ); }");
tryItOut("with({__parent__: [__iterator__, ({ constructor: [({ __iterator__: __proto__ }), , [({ __noSuchMethod__: prototype, prototype: prototype }), ({ __noSuchMethod__: __proto__ }), ({ __proto__: constructor, __noSuchMethod__: constructor }), ]], prototype: __parent__ }), ] =  ''  %= *::*.throw(*::*)})");
tryItOut("/*for..in*/for(constructor in ++([11,12,13,14].filter)) {yield;yield *::*; }");
tryItOut("/*for..in*/for(var __iterator__ in (( /x/ )(delete @foo))){}");
tryItOut("/*infloop*/while(__proto__ = try {  } catch(__parent__) { gc() } finally { *::*; } ){const prop = <y><z/></y>; }");
tryItOut("if(__count__%=__count__ = [[]].unwatch(\"__noSuchMethod__\")) yield; else  if (1e4) return; else /*infloop*/L:for(let prop; ((0.1.watch(\"prototype\", null)).__lookupSetter__(\"prototype\")); (([1,2,3,4].map)(new function  __proto__ () { return this } (), <x><y/></x>))) {/*for..in*/for(let __count__ = 1e+81 in this) gc()\f }");
tryItOut("do export constructor; while((<x/>) && 0);");
tryItOut("{throw false;__count__; }");
tryItOut("if(({__proto__: __proto__,  set __noSuchMethod__ __count__.__count__ (({ __iterator__: [, __count__, ], __proto__: __proto__ }))\nthis.zzz.zzz }) <<= 0x99[<x/>] = yield function(id) { return id }.@foo) {__parent__;return false } else /*for..in*/L:for(const constructor in ((__noSuchMethod__)( /x/g )))");
tryItOut("L: {L: gc() }");
tryItOut("/*for..in*/for(var [function::prototype, constructor] = [ /x/ ].sort(( '' ).call).__defineGetter__(\"prototype\", [1,2,3,4].map) in yield this.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)) {}");
tryItOut("/*infloop*/\tfor(eval(\"(arguments >= @foo)\", <y><z/></y>); 'fafafa'.replace(/a/g, new Function); \tthis.__defineGetter__(\"constructor\", ) let (__parent__ = gc(), __iterator__) { if(prototype) {undefined } }");
tryItOut("function(q) { return q; }");
tryItOut("/*for..in*/for((__proto__) in (([<x><y/></x>])(#1#))){with({__count__: @foo}){<><x><y/></x></>; } }");
tryItOut("yield undefined.__defineSetter__(\"prop\", function (__parent__) { return <y><z/></y> } );");
tryItOut("/*infloop*/L:for(const [, ] = (prop+= '' .valueOf(\"number\")); <y><z/></y>.constructor; prototype++ .@ eval(\"(yield <x><y/></x>)\", <x/> == <x><y/></x>).unwatch(\"constructor\")) break L;");
tryItOut("M:while(([15,16,17,18].map(-1, (eval(\"<x/>\", <x/>)))) && 0){do (window); while((__count__.__defineSetter__(\"prototype\", function(y) { yield y; export *;; yield y; })\n) && 0);export constructor; }");
tryItOut("/*infloop*/for(const ({ __proto__: constructor, __proto__: __noSuchMethod__ }) = __count__; new Date(); true .. constructor) return;");
tryItOut(" const constructor;");
tryItOut("{continue\t M;throw <x><y/></x>; }");
tryItOut("/*infloop*/for(const ({ __parent__: ({ prototype: ({ __count__: __parent__, __proto__: __parent__ }), prop: [] }) }) = 0x99; ((window[constructor]))[({}).@*].@*; eval(\"var __proto__, __proto__ = [z1,,];\", *::*).prototype = <><x><y/></x></>++) for(let y in []);");
tryItOut("if((__count__.(@foo))) {yield #1=[#1#]; } else const __noSuchMethod__\n");
tryItOut("{\tgc() }");
tryItOut("throw prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in case 7: case 5: break; ) {yield __proto__; }");
tryItOut("for(let y in []);");
tryItOut("let(prop = <x/>) ((function(){for(let y in [5,6,7,8]) export prototype;})())\n");
tryItOut("gc()");
tryItOut("while((0) && 0)export __parent__; const constructor;");
tryItOut("(undefined);");
tryItOut("if(__noSuchMethod__) ");
tryItOut("if() throw <x/>\t; else  if (++\tprop -= <x/> | __iterator__ = (-0) >>> (<x/>)[[[]]].@foo) {(033); } else ;");
tryItOut("/*for..in*/for(var __iterator__ in (eval(\"<x><y/></x>.throw(*::*)\", <x><y/></x> %= __count__))) {/*infloop*/L:do __parent__, __count__; while(<x><y/></x>);throw @foo; }");
tryItOut("do {if(__proto__)  return  else return  '' ; } while(((Math.pow)(new function (__count__, __proto__) { return 1e-81 } (<x/>))) && 0);");
tryItOut("/*infloop*/for(undefined; *::*; <x><y/></x>) {;{} }");
tryItOut("for(let y in []);");
tryItOut("var __iterator__ = <y><z/></y>, __count__ = constructor; const prop;");
tryItOut("L:if(({__proto__: void ({prototype: <x><y/></x> })})) { if (@foo) switch(({}).watch(\"__count__\", function (__iterator__) { yield <x><y/></x> } )) { case 3: return true;break; default:  }} else {while((<x><y/></x>) && 0){yield *::*;export __proto__; }with({prop: window.isPrototypeOf(0)}); }");
tryItOut("let(constructor, __count__ = undefined) ((function(){yield;})());");
tryItOut("L: M:with({__iterator__: __noSuchMethod__ getter: Math.pow |= <><x><y/></x></>})return __proto__;");
tryItOut("@foo;");
tryItOut("L:with({__parent__: <><x><y/></x></>.isPrototypeOf(Number())}){\nbreak ;\n }");
tryItOut("if(<x/>.__lookupSetter__(\"constructor\")) {let constructor = null;; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for('fafafa'.replace(/a/g, (1 for (x in []))) in ((function  prototype ()window).call)(eval(\"L:if(<x><y/></x>) break M; else  if (function ([y]) { }) (<y><z/></y>).watch else {{} }\", ( /* Comment */(0.1.__count__))), ((this.__defineSetter__(\"__parent__\", function(y) { yield y; return <><x><y///h\n></x></>;; yield y; }))))) /*infloop*/for(var ({ prop: \t__noSuchMethod__ }) = <><x><y/></x></>.prop; __proto__.prop; (<x><y/></x> ?  /x/g  : __proto__)) {return .2;yield; }");
tryItOut("gc()\n");
tryItOut("M:do throw true; while((this.watch(\"prop\", /a/gi)) && 0);");
tryItOut("(this).watch const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in constructor.((new function(id) { return id }()))) let(__parent__, each = <><x><y/></x></>) { prop = prototype;");
tryItOut("L:if(<><x><y///h\n></x></>) return;");
tryItOut("if(true > ((prototype.__noSuchMethod__ getter= <y><z/></y>))()) { if (((this.__defineGetter__(\"__proto__\", function  constructor (prop)*::*))--)) /*infloop*/for(var prototype;  /x/g ; true) const __noSuchMethod__ = prototype, constructor = true; else /*for..in*/for(const __parent__ = window in ({a1:1})) {__noSuchMethod__; }}");
tryItOut("if(true) { if (new <x><y/></x>( /x/ ,  /x/g )) {gc()continue ; } else const prototype = *::*;}");
tryItOut("if(eval(\"prop.__count__ = (let (__noSuchMethod__ = this) prototype.__iterator__ setter= function () /x/g )\", __iterator__.((yield <><x><y/></x></>)))) const constructor = prop, __noSuchMethod__ = <><x><y/></x></>\n else  if (<x/>) {throw *::* } else yield <><x><y/></x></> , __noSuchMethod__;");
tryItOut("let (prototype, ({ __iterator__: __parent__, __proto__: __count__ })) { M:with({prop: [15,16,17,18].filter(true,  \"\" )})yield; }");
tryItOut("if(window) {yield;; } else export __noSuchMethod__;");
tryItOut("with((__iterator__ = [,,z1] ^ <><x><y/></x></>.isPrototypeOf(this))){<bbb xmlns=\"#1=[#1#] == 1e-81\"> </bbb><ccc:ddd></ccc:ddd> const __iterator__;gc() }");
tryItOut("/*infloop*/for([({ __proto__: ({ __count__: [constructor, __parent__ = window, , ], __proto__: prototype }) }), [], yield] = @foo; 3.141592653589793;  \"\" ) {L:if(1.2e3) { if (<x><y/></x>) {throw *; }} else {var prototype;yield <x/>; }/*infloop*/for(<x><y/></x>; <><x><y/></x></>;  /x/ ) <x/>; }");
tryItOut("if(+this :: <x/> >>= <><x><y/></x></>) { if (*::*.watch(\"constructor\", (<x/>).watch) == *::*.eval(-0)) {/*for..in*/L:for(let __noSuchMethod__ = __parent__ = [z1,,] in function(id) { return id }) {return [1,,];let constructor = <x><y/></x>, prototype = 033; } } else {try { for(let y in []); } finally { yield yield (this.__defineGetter__(\"prop\", (1 for (x in [])))); }  }}");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let prototype = true in [[]]) yield __parent__");
tryItOut("{var constructor; }");
tryItOut("with({}) { return (undefined.__parent__) && true; } ");
tryItOut("{gc()\n(function::__parent__, __parent__ = <>set</>);/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in  /x/ ) let function::__count__, prototype = __parent__; }");
tryItOut("with(1e+81){return; }");
tryItOut("while(((false |= <x><y/></x> & ((<x><y/></x>)))) && 0){/*for..in*/for(__noSuchMethod__ in <x><y/></x>) {yield @foo\nyield; } const prop; const \f__iterator__; }");
tryItOut("let (__iterator__, prop) { /*for..in*//* nogeckoex bug 349964 */M: for  each(const <y><z/></y>['x::-1'] in 0.1) {; } }");
tryItOut("/*for..in*/for(var constructor in ((Math.sin)((-1)-- ?  /x/g \n : this)))/*for..in*/for([__parent__, function::__noSuchMethod__] = true in <><x><y/></x></>) __noSuchMethod__");
tryItOut("let(prop = [ in ]) { for(let y in []);");
tryItOut("(let (({ __iterator__: ({ __proto__: __count__ }), prop: __proto__ }) = \nthis, __iterator__ = __parent__ in x::prototype) ({prop:  '' ,  set __proto__() { yield this; }  })), this.zzz.zzz");
tryItOut("/*infloop*/__iterator__");
tryItOut("do var prop = true; while((this) && 0);");
tryItOut("/*infloop*/do {(<y><z/></y>); } while(*::*);");
tryItOut("with(__count__ = <y><z/></y>){break M\nreturn; }");
tryItOut("while((eval(\"arguments\", null)) && 0){return; }");
tryItOut("with({prop: this.__defineGetter__(\"__count__\", function (get, __iterator__) { yield 3/0 } )})/*for..in*/for(const __parent__ in __noSuchMethod__) {gc() }");
tryItOut("M:if(__iterator__.__lookupGetter__(\"__noSuchMethod__\")) {gc(); } else {continue L;break ;\f }");
tryItOut("/*infloop*/M:do {throw false;L:with(<y><z/></y>)yield #1#; } while(prop)");
tryItOut("{var __proto__ = constructor; }");
tryItOut("/*infloop*/for(var __count__ = *.__defineGetter__(\"prop\", Math.pow); __noSuchMethod__ = *::*; [11,12,13,14].some) ");
tryItOut("*\nfunction (__count__, __parent__) { return * } ");
tryItOut("{var __parent__; }");
tryItOut("(null).__defineSetter__");
tryItOut("{yield <><x><y/></x></>; }");
tryItOut("let __count__ = false, __parent__ = true");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("__iterator__ = constructor;");
tryItOut("{false;\tif(this) gc() else  if (prototype) {throw null; } }");
tryItOut("/*for..in*/for(var __iterator__ = #1=[false] in *) {return 1e-81;yield; }");
tryItOut("\fyield <x><y/></x>\n");
tryItOut("if(((constructor = <x><y/></x>) ? !<><x><y/></x></> : #2=[({})]).eval(((function(y) { yield y; return <x><y/></x>;; yield y; }).call(__parent__, )))) return; else /*infloop*/L:while(! '' ){; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in window) ([1,2,3,4].map).apply");
tryItOut("\tlet __iterator__.__parent__, __iterator__;");
tryItOut("do {export *; } while(((uneval([ ''  if (<y><z/></y>)]))) && 0);");
tryItOut("/*for..in*/for(__noSuchMethod__ in [,,]) {return; }");
tryItOut("if(new (-0)([z1,,]++, (prop.__defineSetter__(\"prop\", 3/0)))) { if ((({prop getter: function  constructor (prototype, __iterator__) { yield @foo.unwatch(\"__iterator__\") }  }))) throw 3;} else {if( /x/g ) {const __iterator__ = #1=[#1#], __proto__; } else let __count__;continue L; }");
tryItOut("if(__parent__+=<{__count__}><ccc:ddd><x><y/></x><ccc:ddd></ccc:ddd></ccc:ddd></{__count__}>.(new *(<y><z/></y>, true))) /*infloop*/L:while( /x/ )({}).hasOwnProperty else {/*infloop*/L:do {prototype = 1e4, prototype = __count__; } while( \"\" );\t const __count__; }");
tryItOut("/*infloop*/for(__noSuchMethod__; (([1,2,3,4].map).call(<x><y/></x>, ).hasOwnProperty(\"prop\")); (<x><y/></x> in \r({constructor: prop}))) {let __iterator__; }");
tryItOut("Math.sin\ntrue;");
tryItOut("if(0/0) { if (this.zzz.zzz) if((new ( \"\" )([<y><z/></y>].filter((function(q) { return q; }).call), [[]]).prototype = (#0=__count__ = null))) { if (<y><z/></y>) {continue ;yield; } else {;export __parent__; }} else if(__iterator__\f.__count__) { if (__proto__-=) {\nlet prop = <x/>; }} else continue M;}");
tryItOut("");
tryItOut("__parent__ = __parent__;");
tryItOut("{/*for..in*/for([__count__, __proto__] = [15,16,17,18].some(new Function, this) in *::*) {yield; }\f<x><y/></x>; }");
tryItOut("/*infloop*/do /*for..in*/L:for(__parent__ = __noSuchMethod__ = 033 in  \"\" ) {export *;throw *; } while(__parent__.(<xxx>{prop}</xxx>));");
tryItOut("/*infloop*/L:for(<x><y/></x> >>>=1.2e3; <bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb> < [11,12,13,14].sort; ((uneval(window.valueOf(\"number\"))))) (constructor).__defineSetter__");
tryItOut("while((<><x><y/></x></> != null) && 0)/*infloop*/for(const __noSuchMethod__ = [,,z1].isPrototypeOf(false); #1#.@* ? __noSuchMethod__.(undefined) : (null)[[1]].__parent__; Array(false, <y><z/></y>)) ");
tryItOut("{export constructor;throw (function ([y]) { })(); }");
tryItOut("throw StopIteration\n/*infloop*/do throw function(id) { return id }; while(window);");
tryItOut("with({prop: prototype = <x/>}){const __proto__; }");
tryItOut("/*infloop*/for(let __parent__; ((({__count__: (*::* >= <><x><y/></x></>)})).__defineGetter__(\"__noSuchMethod__\", new (<><x><y/></x></>)(<><x><y/></x></>, <x><y/></x>)).prop); (let (constructor = false, __noSuchMethod__) #3={a:#3#})) {/*for..in*/for(let [__iterator__, __count__] = (export \f__noSuchMethod__) in 0x99) {yield;let constructor = 0.1; } }");
tryItOut("/*infloop*/for([] = __noSuchMethod__.function::__iterator__ getter= Math.sin instanceof (<x/>.__proto__) >>= false.propertyIsEnumerable(\"__proto__\"); __count__ = __parent__; function(id) { return id }) {__iterator__ = this, prop;(__noSuchMethod__); }");
tryItOut("/*infloop*/while(((Math.sin)(window, prop) -= ([15,16,17,18].filter(function(y) { yield y; function (__count__) /x/g ; yield y; }, 0.1).__proto__))) { return window } ");
tryItOut("M:if(<><x><y/></x></>) yield; else (1 for (x in []))\n");
tryItOut("/*infloop*/for( /* Comment */undefined; prop = window; (__noSuchMethod__ = true)) return;");
tryItOut("/*infloop*/M:do {; } while(this.__defineGetter__(\"__iterator__\", function(y) { yield y; ; yield y; }));");
tryItOut("{if( \"\" ) {(<x/>);throw (-1); } else {(<><x><y/></x></>);yield <x><y/></x>; }/*infloop*/for(true; (function ([y]) { })().__defineGetter__(\"__count__\", Math.sin); window) {gc() } }");
tryItOut("{return ({ __iterator__: __count__, __proto__: constructor })<><x><y/></x></> || false;M:with({__proto__: ((Math.pow)( /* Comment */<x><y/></x>))})throw [[1]]\nconstructor = <x/> }");
tryItOut("this.zzz.zzz;");
tryItOut("const \t__noSuchMethod__; const __iterator__;");
tryItOut("{gc() }");
tryItOut("M:while((void  \"\" ) && 0)(<x><y/></x>);");
tryItOut("while(((eval(\"yield  /x/ ;\", false) ? <><x><y/></x></> : new <x><y/></x>(window, [z1]))) && 0){var prop = prop; }");
tryItOut("if(({ __noSuchMethod__: ({ __parent__: __noSuchMethod__, __iterator__: __proto__ }) }) = ({ prop: __noSuchMethod__, __parent__: [] })) undefined else {var __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::__noSuchMethod__ in <><x><y/></x></>) {export constructor; }");
tryItOut("return this.__defineGetter__(\"__count__\", 0)++.__parent__ = __count__((function(y) { yield y; ;; yield y; }).call(<x><y/></x>, )) = [[, __proto__, ], __proto__, , __proto__, ({ __parent__: __iterator__ })] = ((prop = @foo) ? ({constructor: *}) : 'fafafa'.replace(/a/g, (new Function(\"const __count__ = false, prop = 0;\"))));");
tryItOut("if(@foo) export *;");
tryItOut("eval(\"__iterator__;\", <><x><y/></x></>)['prototype'] = prop;");
tryItOut("/*for..in*/M:for(prop in prototype) {3/0 }");
tryItOut("L: {/*infloop*/for(var prop = <x><y/></x>; <x><y/></x>; window) var __parent__, __proto__ = [,,z1]; }");
tryItOut("let(__noSuchMethod__ = this.__defineGetter__(\"constructor\", (new Function(\"return __count__;\")))) { throw prop;");
tryItOut("{if((new (window)())) { if ( /x/ .hasOwnProperty(\"__noSuchMethod__\")) {}} else let __parent__ = true, prototype; }");
tryItOut("return new (function  prop (undefined) { yield @foo } )(<><x><y/></x><\f/>, (-0));");
tryItOut("if( /x/g ) var __iterator__; else  if (true) { } else {<><x><y/></x></>;yield <y><z/></y>; }");
tryItOut("let (__parent__ = (uneval(window)), __proto__) { L:if( /x/g .throw(*) ? <y><z/></y> >>>=<x><y/></x> : yield null >>= void -3/0) {return; } else {/*infloop*/do {yield undefined;; } while(<x/>);var __iterator__ = false; } }");
tryItOut("this.zzz.zzz;");
tryItOut("__proto__ = __count__, ({ __proto__: ({ __count__: __parent__ }) });");
tryItOut("switch( \"\" ) { case 0: switch(__count__ = 1.3) { default: M:switch(<><x><y/></x></>) { case <x><y/></x>: const __parent__ =  /x/ , constructor = undefined;break; default: break; export *;case true: case  '' : break; break; case 0: throw <x><y/></x>; }break;  }break;  }");
tryItOut("{/*infloop*/do export *; while( /x/ );yield *;; }");
tryItOut(" /x/g \n");
tryItOut("while((#1=({__noSuchMethod__: 1e-81})) && 0)continue M;");
tryItOut("export *\n");
tryItOut("while((((__parent__ == @foo)())) && 0)with(({a2:z2}))let (__parent__, __parent__) { let (__noSuchMethod__ = *, constructor) { yield  /x/g ; } }\f");
tryItOut("/*infloop*/do export *; while(#0=__proto__+=<><x><y/></x></>);");
tryItOut("switch(({__proto__ getter: (function(y) { yield y; (undefined);; yield y; }).apply })()) { default: ;break; break; const prototype = 1.2e3, __count__;break;  }");
tryItOut("let   if ([z1])__iterator__, __proto__ = undefined;\n'haha'.split\n");
tryItOut("M:if(undefined | <x/>) { if ((<x><y/></x>( \"\" , [[1]]))) export *; else 0.1}");
tryItOut("/*infloop*/while(0x99 < function(id) { return id }){export *; }\n{/*for..in*/L:for(const constructor = @foo[undefined] in <x><y/></x>.propertyIsEnumerable(\"__count__\")) {with({prop: @foo})export __noSuchMethod__;1e+81; }yield prototype; }");
tryItOut("{try { ((-1)); } \fcatch(__parent__ if <><x><y/></x></>) { const __count__ = <y><z/></y>, __parent__; } catch(constructor if prototype) { let constructor; }  }");
tryItOut("(return this.isPrototypeOf(()))");
tryItOut("{return *::*; }");
tryItOut("throw StopIteration;");
tryItOut("if(*::*) { if (getter = -3/0.*) {yield; } else {__iterator__;export *; }}");
tryItOut("gc()\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [__parent__] in (__iterator__ = ({ __parent__: __proto__(this), prop: [__count__, ] }))) /*infloop*/L:for(__noSuchMethod__ = new 'haha'.split(); this.zzz.zzz; prototype.constructor = constructor.__parent__ getter= eval) {var constructor, __noSuchMethod__ =  /x/g ; }");
tryItOut("with({}) { __iterator__, constructor; } ");
tryItOut("/*for..in*/for(__count__ in ((Function)((p={}, (p.z = window)()))))*\n");
tryItOut("/*infloop*/M:for(let __proto__;  /x/ .(\"__count__\"__proto__); ((function(y) { yield y; (#3={a:#3#});; yield y; })(*, <x><y/></x>))) { }\n");
tryItOut("/*infloop*/do ; while((window)(this));");
tryItOut("if((<bbb xmlns:ccc=\"1e+81\"><ccc:eee></ccc:eee></bbb>.(constructor = null))) {{}yield; } else  if (!1.3 in window) { } else {export __iterator__; }");
tryItOut("/*infloop*/do {(this);throw (Math.pow()); } while(((yield (({__iterator__: true})).watch(\"__noSuchMethod__\", gc))));");
tryItOut("if((this.hasOwnProperty(\"__noSuchMethod__\"))) {return function(id) { return id };return; } else  if (__iterator__: (*.valueOf(\"number\")) *= __iterator__ = <x/>) return null;");
tryItOut("/*infloop*/M:do {/*for..in*/M:for(const constructor = null in (new (<><x><y/></x></>)(<><x><y/></x></>, ({})))) {return constructor; }L:if(<><x><y/></x></>) const __iterator__ = <y><z/></y>; else  if (function ([y]) { }) gc() } while( /x/g );");
tryItOut("L: export *;");
tryItOut("L:if(arguments) var __count__;");
tryItOut("M:if((yield @foo)) { if (new (this.__defineSetter__(\"__count__\", <x/>))(__iterator__.__proto__ = <x><y/></x>)) var __iterator__ = this;} else {__iterator__, prototype;__proto__, delete = <x/>; }");
tryItOut("/*infloop*/do return  /x/g ; while( /x/ );");
tryItOut("/*for..in*/M:for(__iterator__.__parent__ in [(('fafafa'.replace(/a/g, *)) @ ( \"\"  in this))])  for (__proto__ in __noSuchMethod__) for (__proto__ in [[11,12,13,14].some for each (__count__ in <y><z/></y>) for each (__iterator__ in )]) for (prop(<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })) in __proto__.__iterator__) if (<><x><y/></x></>)");
tryItOut("/*infloop*/M:while([1,2,3,4].map){; }");
tryItOut("/*for..in*/for(const __parent__ in true) {(\n@foo);return <><x><y/></x></>; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in 0x99) throw [1,,];");
tryItOut("/*infloop*/for(let prototype; 'fafafa'.replace(/a/g, ({}).hasOwnProperty); ([prototype = <y><z/></y>.valueOf(\"number\")].some((new Function(\"var prop;\"))))) gc()\nreturn;\n");
tryItOut("while((new (prototype < *::*)(function ([y]) { }.isPrototypeOf(undefined), <x><y/></x>)) && 0)return null;");
tryItOut("/*for..in*/L:for(let [prop, x::constructor] = @foo in <><x><y/></x></>) ;");
tryItOut("if(((let (constructor = this, constructor = []) (uneval( /x/ ))) + void  for each (__iterator__ in <><\fx><y/></x></>) for (prototype in *))) {export __count__; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(new (<x><y/></x>)(false,  /x/g )) { if ((__parent__.__defineSetter__(\"__proto__\", (<x><y/></x>).watch))) {prop = 0/0; }} else ");
tryItOut("throw StopIteration;");
tryItOut("switch(String(\nwindow, window)) { case 9: if((yield *::*) :: (undefined.__count__) ^= [z1,,]++) { if ([1,,][<><x><y/></x></>]) continue ; else yield <x><y/></x>;}break; case 0: return <><x><y/></x></>; /x/ ;\n*;\nbreak; case new ( \"\" )(): break; default: {}break; case 1: break; case 7: const __proto__;break;  }");
tryItOut("if() (__iterator__) else  if ((new ((-3/0).call)())) /*infloop*/L:for(const __proto__; (__noSuchMethod__ = <><x><y/></x></>--); (window || 0)) {{gc() } } else {yield window;constructor }");
tryItOut("if(this) {return this; } else {;yield; }");
tryItOut("case undefined: ( /x/g );break; return;");
tryItOut("switch(this.__defineGetter__(\"let\", (1 for (x in []))) /= #1= \"\" ) { default: /*infloop*/while(__count__ = window/*\n*/.__defineSetter__(\"prop\", /a/gi)){(__proto__); }break; case new RegExp(<><x><y/></x></>, __count__) ? prototype.__iterator__.hasOwnProperty(\"__parent__\") : (eval(\"yield;\",  finally )): /*for..in*/M:for(const [prop, prop] = *::* in <x><y/></x>) return true; }");
tryItOut("return <><x><y/></x></>");
tryItOut("/*for..in*/for(const __iterator__.__noSuchMethod__ in (__proto__.__proto__ = (prototype = 4.))) {M:if(this) {} else  if (<x/>) {{} } else {export *;gc() }var prop = #1=[#1#]; }");
tryItOut("/*infloop*/L:for(const prototype = __count__.isPrototypeOf({return @foo;continue M; })[<y><z/></y>.eval(this)]; let.constructor; __proto__ = 3/0)  const __noSuchMethod__;");
tryItOut("with({}) with({}) { yield __iterator__; } ");
tryItOut("{}\nprop");
tryItOut("M:while(([this for (__count__ in <><x><y/></x></>)]) && 0)export constructor;");
tryItOut("export  /x/ \n");
tryItOut("with(__parent__ = (prototype.prop = *)){continue ;var __iterator__ = <><x><y/></x></>; }");
tryItOut("{}");
tryItOut("if(true) {let(({ prototype: __iterator__ })\t = [window].map(Math.sin), __parent__ = yield;) { this.zzz.zzz;return [[]]; }");
tryItOut("return;");
