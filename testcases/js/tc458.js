tryItOut("let(__noSuchMethod__) { (1e4);");
tryItOut("({}).hasOwnPropertyvar prop;");
tryItOut("with({prop: yield new ({}).hasOwnProperty()})");
tryItOut("/*infloop*/L:while(__proto__ = __parent__ = ){constructor = constructor; }");
tryItOut("yield;");
tryItOut("/*infloop*/for(-0++;  \"\" ; new true(window, 1e+81)) throw __parent__;");
tryItOut("const __proto__ = <x/>; const prototype;");
tryItOut("if(*) {yield <y><z/></y>; } else  if (window) {var prop = prop; }\nwith((__noSuchMethod__.__parent__ setter= (this).__defineSetter__))/*infloop*/for((eval(\"<><x><y/></x></>\", #1#)); [15,16,17,18].map([,], <><x><y/></x></>); ([[[]]].some(function(y) { yield y; yield -3/0;; yield y; }))) {export __count__; }");
tryItOut("/*infloop*/M:for(let <><zzz>[z1,,](<x><y/></x>, <x><y/></x>)[(this.__lookupGetter__(\"__count__\"))]</zzz></> = (new Function(\"throw <x><y/></x>;\")); .2.yoyo(function ([y]) { }); (-0).watch(\"__iterator__\", <><x><y/></\tx></>).watch(\"__noSuchMethod__\", function(y) { yield y; export __parent__;; yield y; })) yield <><x><y/></x></>;");
tryItOut("while((<><x><y/></x></>) && 0)var __noSuchMethod__ = __proto__;");
tryItOut("function(y) { yield y; throw <x/>;; yield y; }M:if(<><x><y/></x></>) { if (<y><z/></y>) ;} else {;gc() }");
tryItOut("\n\ngc()\nyield;\n");
tryItOut("export *;");
tryItOut("try { __count__ = false, __parent__; } catch(__iterator__ if [1,,]) { yield 5.0000000000000000000000; } finally { let(__iterator__ = <x/>) {  } ");
tryItOut("try { var constructor =  /x/g , constructor = <><x><y/></x></>; } catch(__iterator__) { export prototype; } ");
tryItOut("if( set prop\t __parent__ () { yield 0x99 } [#1#]) { if (#1=[<x><y/></x>]) 'haha'.split else var __noSuchMethod__, __proto__ = __iterator__;}");
tryItOut("/*for..in*/for(const [prototype, __iterator__] = (( /* Comment */prototype).hasOwnProperty(\"__parent__\")) in __count__ = (prototype.prototype getter= *)) this.zzz.zzz;");
tryItOut(" const __parent__;");
tryItOut("/*for..in*/for(const [__count__, constructor] = <zzz><x><y/></x>.isPrototypeOf([z1])</zzz>.((yield <x><y/></x>)) in (function ([y]) { })) {return @foo;const __noSuchMethod__ = window; }");
tryItOut("constructor\n");
tryItOut("/*infloop*/while(function () { return #3={a:#3#} } \f) const __proto__;");
tryItOut("/*infloop*/for( '' [, ({ __iterator__: function::__count__ }), ({ __proto__: __count__ }), constructor] >>=  /x/ ; {}; <>[1,2,3,4].slice</>\t) {return <><x><y/></x></>;\n(<y><z/></y>);\nfunction (__noSuchMethod__) { return * }  }");
tryItOut("__proto__");
tryItOut("let constructor = <x><y/></x>, prop; const __count__;");
tryItOut("L:if([11,12,13,14].filter) /*infloop*/do {(const )__parent__;export *; } while([this for each (__proto__ in 1e4)]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in this) return;");
tryItOut("if(each.prototype setter= [,,] >= ++<><x><y/></x></>) {continue M; } else yield;");
tryItOut("L:do {export prop;; } while((<x><y/></x>) && 0);");
tryItOut("while((__noSuchMethod__.prototype = let (__count__ = , __iterator__) *) && 0){throw <> { return this } </>;{(Math.pow)/*\n*/.apply } }");
tryItOut("/*infloop*/for(let ({ prop: function::prop }) = (({__parent__: this })); ( /x/ .__noSuchMethod__); <><x><y/></x></>.__noSuchMethod__ = this) gc()");
tryItOut("if(__noSuchMethod__) {L:while((*::*) && 0)export __proto__;\t{} } else  if (__proto__) gc() else (true);");
tryItOut("L:if(<><x><y/></x></>) {export prop;break M; } else  if ( /x/ ) {{} } else {prop = {};return <x><y/></x>; }");
tryItOut("yield");
tryItOut("with({constructor: (__parent__.__proto__ setter= function  __noSuchMethod__ (__iterator__) { yield (__noSuchMethod__.(undefined)) } )})1.3");
tryItOut("let (prop = (({__count__: (\t<x/> for each (__iterator__ in <x><y/></x>))})).yoyo(0.1 == <><x><y/></x></>), __noSuchMethod__) { if([4.]) { if ((({a2:z2}))) {} else /*for..in*/for(const constructor in (([1,2,3,4].map)(*))){const __iterator__ = __parent__, __iterator__; }}\n }");
tryItOut("M:with((p={}, (p.z = <> </>)())){yield;/*for..in*/M:for(var __noSuchMethod__ in (((-1))(__noSuchMethod__)))throw <y><z/></y>; }");
tryItOut("/*infloop*/for(function::__count__; case <x/>([].propertyIsEnumerable(\"__noSuchMethod__\")): case 7: prototype = [z1,,], prop =  \"\" ;; __parent__ = (<y><z/></y> >= *)) {; }");
tryItOut("{throw <><x><y/></x></>;(<y><z/></y>); }");
tryItOut("/*infloop*/for(var __parent__; ( /x/g  & prop); __noSuchMethod__) {<y><z/></y>\n;return; }");
tryItOut("/*infloop*/for(let [, , , ({ constructor: ({ __noSuchMethod__: ({ __parent__: ({ constructor: __iterator__, prop: ({ delete: -3/0, constructor: __count__ }) }), __parent__: ({ __count__: ({ __noSuchMethod__: prototype }), __iterator__: [] }) }), __parent__: constructor }), __noSuchMethod__: ({ __iterator__: ({ let: __noSuchMethod__, __count__: __count__ }), constructor: [, ({ __proto__: ({ constructor: function::function(q) { return q; }, prop: prototype }), prototype: _ }), ] }) }), ] =  '' (<><x><y/></x></>); 3.141592653589793; #1=1e+81) if(prototype) {const __noSuchMethod__ = 1.2e3; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((uneval(this.__defineSetter__(\"prototype\", ({}).__lookupGetter__)[0.1.prototype])))['__proto__'] in ([*::*.@* for each (__parent__ in <x><y/></x>) for each (prop in undefined)])) __noSuchMethod__;");
tryItOut("/*infloop*/for(__proto__; <x/>; eval(\"var __noSuchMethod__, prototype = false;\", false) -= [,,z1] .. *::*) ;");
tryItOut("yield [true.yoyo(*)];");
tryItOut("if([, ({ __noSuchMethod__: prop, __parent__: __noSuchMethod__ }), __count__, , \t({ __count__: __parent__, __iterator__: __iterator__ })] = __count__['__noSuchMethod__']) { if (0 >> 0x99 |= (*::*.prototype)) {export constructor; } else [1,2,3,4].slice}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in this) {const prop = *::*, prop; }");
tryItOut("/*infloop*/while(constructor.__iterator__ = undefined)/*infloop*/do throw <><x><y/></x></>; while(__iterator__ = [1], __noSuchMethod__);");
tryItOut("");
tryItOut("L:if(.__lookupSetter__(\"prototype\")) const __count__, prop = undefined;/a/gi else {(({ set yield(__count__, __proto__) { const __parent__ = undefined; } ,  set constructor __proto__ ()[1,,] })); }");
tryItOut("switch(<>({ __iterator__: <x><y/></x> }).*</>) { case 1: if([[]].*) { if (+<><x><y/></x></>) gc() else {<><x><y/></x></>;undefined; }}break; default: let __parent__ = [1,,];break; break ; }");
tryItOut("with({}) { throw constructor; }  const prop;");
tryItOut("/*infloop*/L:do {throw eval(\"this.zzz.zzz\", (<><x><y/></x></>.__lookupSetter__(\"[]\"))); } while((<><x><y/></x></> ? false : .2++));");
tryItOut("M:while((eval(\"-3/0\", window) === [default: break; case __iterator__ = __proto__: case @foo: break; case 2: export *;break; ]) && 0)/*infloop*/for(var __iterator__ = {}; __proto__; <x><y/></x>) Math.pow");
tryItOut("{}");
tryItOut("L: yield 1e+81;");
tryItOut("<y><z/></y>\n");
tryItOut("with(@foo)let __count__;");
tryItOut("\t{}\n");
tryItOut("prototype = eval;");
tryItOut("M:with(*::* < *::*){return @foo;throw __parent__; }");
tryItOut("if(\f[ /x/g ] ? ( '' --) : (( /x/ )[window])) {(new Function(\"yield;\"))yield; } else /*for..in*/for(const prototype = (function () { yield [] } )() in 3) const constructor = <y><z/></y>;");
tryItOut("L:do (<\tx><y/></x> >> __iterator__); while((<y><z/></y>) && 0);");
tryItOut("if((let (__count__, constructor) window)(<x><y/></x>.@*)) {export __iterator__;{} } else  if ( .. (__parent__.(((function (constructor) { return * } ).call(null, this, [1]))))) return <><x><y/></x></>; else {var __count__, __noSuchMethod__ =  '' ; }");
tryItOut("{return  \"\" ;(__count__); }");
tryItOut("if(*) { if (@foo) {var __iterator__ = __noSuchMethod__; }} else break L;");
tryItOut("/*for..in*/for(({ __proto__: [__iterator__, ] }) = (--<x/> || ( \"\" )(-1)) in (yield setter)) /*infloop*/L:for(let [({ __count__: __parent__ })] = this; __parent__; this.__defineSetter__(\"__proto__\", function () { return prop } )) yield;");
tryItOut("let (prototype) { var __parent__ = @foo, __iterator__;\nreturn;\n }");
tryItOut("L: {let(prototype = function::__proto__) ((function(){return <x/>;})());/*for..in*/L:for(const x::constructor in ((*::*)((<><x><y/></x></>.constructor)))\t)if(null) gc() }");
tryItOut("/*infloop*/for(const ({ prop: constructor }) = @foo; (* <<= window); (p={}, (p.z = <x><y/></x>)())) return;");
tryItOut("");
tryItOut("let(prototype = <x><y/></x>.__noSuchMethod__, prop) { yield  /* Comment */(uneval(0)) != prop.(<><x><y/></x></>);");
tryItOut("/*infloop*/do {export __proto__;yield; } while((__parent__.__defineSetter__(\"__proto__\", (1 for (x in [])))));");
tryItOut("M:while((([1,2,3,4].map <<  /* Comment */(new ({})()))) && 0){M:with(this.__defineSetter__(\"__proto__\", (@foo).call)); }");
tryItOut("\nexport __parent__;");
tryItOut("/*infloop*/while(1e81){;/*\n*/let x::__proto__; }");
tryItOut("L: export *;");
tryItOut("/*infloop*/for(var ({ prototype: [], __parent__: __iterator__ }) = <><xxx>{__proto__}</xxx></>; (p={}, (p.z = [<x><y/></x>].map(function  __proto__ ()<><x><y/></x></>))()); this.__defineSetter__(\"prototype\", (new Function).call)) export *;");
tryItOut("(<x><y/></x>);");
tryItOut("__count__ = __iterator__; const __count__\n");
tryItOut("return;");
tryItOut("( \"\" ); const prop;");
tryItOut("yield #3={a:#3#}\nL: ;\nswitch(function ([y]) { }) { case 9: (.2);break; __proto__ = <><x><y/></x></>, prop;const __parent__;break;  }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in  /x/g ) constructor;");
tryItOut("L:if((p={}, (p.z = __iterator__ = __parent__\t.__proto__)())) {return -0.prop = prototype; } else  if ((<>((__parent__ = (-1), prototype)(window)%=({__parent__: <x><y/></x>, __iterator__: <y><z/></y> }))</>.((prototype = <><x><y/></x></>).@*))) {export __proto__; }");
tryItOut("/*infloop*/while(__parent__)yield <x><y/></x>;");
tryItOut("return;");
tryItOut("switch((constructor)()) { default: M:if(( /x/g )((prototype.__parent__))) {let prop;[1,2,3,4].map } else  if ((( ''  .@x:: \ffunction  __iterator__ () { return; } ()) for (new false(([,,z1]\n))['__noSuchMethod__'] in -0.@*)<>yyy</>)) return; else /*for..in*/for(const __parent__ = <x><y/></x> in ) {break M;return; }/*infloop*/for(const ({ __count__: __noSuchMethod__ }) = <><x><y/></x></>.unwatch(\"__proto__\"); __iterator__ = prop; __count__.__iterator__ setter= ({}).__lookupGetter__) if(let (__noSuchMethod__, prototype) <x><y/></x>) let prototype, constructor =  '' ; else  if ('haha'.split) return; else Function\f{}break; break; break;  }");
tryItOut("{this.zzz.zzz; }");
tryItOut("yield;");
tryItOut("{throw *::*continue ; }");
tryItOut("if(( \"\"  for each (__noSuchMethod__ in __parent__))) {{}throw this; } else {export *; }");
tryItOut("L: ({}).hasOwnProperty");
tryItOut("with(new __proto__.((-0)).watch(\"__count__\", new Function)()){if(*) { if (<><x><y/></x></>) {<x><y/></x> } else {yield;yield <y><z/></y>; }} /x/g .@*; }");
tryItOut("if(eval(\"let (__proto__ = *, function::prototype) this\", ((prop.__iterator__ getter= ({}).__lookupGetter__).watch(\"prop\", <><x><y/></x></>)))) {gc() } else  if (this.__defineSetter__(\"constructor\", (1 for (x in [])))) prototype = <x/>, __count__ = window;");
tryItOut("if(( /* Comment */*::*.*)) /*infloop*/do <bbb xmlns=\"null\"></bbb> while(yield window); else (*::*);");
tryItOut("with({setter: i})yield;");
tryItOut("export __proto__;\nprop\n");
tryItOut("/*infloop*/for(const ({ __proto__: [, __count__, ] }) = ([prop.( /x/ )]); ({}) <= -0; ({ __parent__: ({ __count__: constructor }) }) = (constructor = null)) yield;");
tryItOut("if(__proto__.prototype getter= function (prop, __iterator__) { yield <x><y/></x>; } ) {prop } else  if (window) \f{throw @foo;export *; } else ;");
tryItOut("/*infloop*/for( = __parent__; window; ) ((-0));");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __iterator__] = this. in <x/>) const prop =  \"\" ;");
tryItOut("/*infloop*/for((({ __proto__: [] }) = typeof ({a1:1})--); (this.__defineSetter__(\"prop\", null & undefined)); ([this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)].sort(function (__proto__) { yield (this.zzz.zzz).* } ))) (({}).__lookupGetter__).apply\n/*for..in*/M:for(prototype in @foo) {break L; }\n");
tryItOut("/*infloop*/while(prop = <x><y/></x>){yield; } const __count__/*\n*/;");
tryItOut("/*infloop*/do break L; while();");
tryItOut("__count__");
tryItOut("{return; }");
tryItOut("/*infloop*/M:for(__proto__.prop = this; window; (window.__lookupSetter__(\"function::__iterator__\")).valueOf(\"number\")) export __count__;");
tryItOut("if(({ __count__: constructor }) = new <><x><y/></x></>(<x><y/></x>, <x/>)) { if ((yield <x><y/></x>)) \n; else {switch((<><x><y/></x></> if (undefined))) { case (prototype.__count__ getter= this): break; default: break;  } }}");
tryItOut("gc");
tryItOut("L: {((1e81.unwatch(\"__parent__\")));{var __parent__ = function ([y]) { }, __proto__ = <y><z/></y>; } }");
tryItOut("/*for..in*/for([__parent__ * <><x><y/></x></>.@foo, constructor] = ((p={}, (p.z = false >>>=1e-81)()) + <><x><y/></x></>\n) in eval(\"let __noSuchMethod__;\", 1.3)) /*for..in*/M:for(var [<ccc:ddd><!--yy--></ccc:ddd>, __proto__] = (( \"\" )[\f<y><z/></y>]) in null) yield #1#;");
tryItOut("/*infloop*/M:for((window)[<><bbb xmlns=\"(eval(\"const __count__, <><x><y/></x></>;\", <x/>))\">yyy</bbb><> </><!--yy--></>]; null; (<bbb xmlns=\"(uneval(1.2e3))\"><!--yy--></bbb>.(eval(\"window\", ({a1:1}))))) try { gc() } catch(prototype if (function(){const prop = @foo;})()) { <x/>; } catch(__iterator__ if typeof false) { ; } catch(constructor if (function(){yield __count__;})()) { ; } finally { gc() } ");
tryItOut("/*infloop*/for(let __parent__ =  /x/g ; -3/0; (-1)) {const __proto__ = prototype; }");
tryItOut("/*infloop*/for(prop; 5.0000000000000000000000 :: <x><y/></x>; <x/>) do for(let y in [5,6,7,8]) {}\n while((__proto__) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <y><z/></y>) yield;");
tryItOut("with((yield <x/> +=  /x/g )){; }");
tryItOut("L:if(let (__noSuchMethod__ = let (constructor =  \"\" , constructor = <y><z/></y>) window) ({__parent__:  \"\"  })) { if (('fafafa'.replace(/a/g, Math.pow)).unwatch(\"constructor\") |= <><></></>) {}} else /*infloop*/do {/*for..in*/for(var __parent__ in window) {<x/>;(this); } } while((this.__defineSetter__(\"prototype\", (1.3).__defineSetter__)));");
tryItOut("/*infloop*/L:do   while((p={}, (p.z = prop.__noSuchMethod__ getter= function(y) { yield y; export prototype;; yield y; })()));");
tryItOut("{return\n } const constructor;");
tryItOut("switch(new (<><x><y/></x></>)((\f__proto__.prototype setter= ({}).__lookupGetter__), (eval(\"prop\", @foo)))) { case 0:  }");
tryItOut("/*for..in*/for((__parent__) in <x><y/></x>.yoyo(window)) {L:\twith({prototype: (\n<x/>)})var __count__ = null, constructor;let(constructor, prototype = prop) { yield; }");
tryItOut("");
tryItOut("/*infloop*/L:for(const ({ prop: ({ __proto__: {{}export prop; }, __iterator__: prop }), __noSuchMethod__: (prop { __noSuchMethod__: prop } }) = (this.__defineGetter__(\"__proto__\", false));  /x/  *  /x/g  & true; constructor = __noSuchMethod__) L: return  /x/ ;");
tryItOut("/*infloop*/do {export \f__noSuchMethod__; } while(arguments);");
tryItOut("with({}) try { try {  '' ; } catch(__proto__ if [15,16,17,18].sort( /x/ , <x/>)) { break L;\n } catch(__proto__) { function::__iterator__ = @foo; }  } catch(prop) { for(let y in [5,6,7,8]) return; } ");
tryItOut("do {} while((__proto__.__defineGetter__(\"constructor\", function  function::__iterator__ (__proto__, __count__) { yield; } )) && 0);");
tryItOut("/*for..in*/M:for(constructor in  /x/g ) {export *;false; }");
tryItOut("do M:if((__parent__)) {return; } else  if (window) {{} } else {export constructor;return  \"\" ; } while((prototype) && 0);");
tryItOut("let (__count__) { throw __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(*::* = @foo in <x><y/></x>) {{}let prototype; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("throw __noSuchMethod__;");
tryItOut("if((eval(\";\", *))) { if (<><x><y/></x></> <= <x><y/></x>) {(5.0000000000000000000000);; }} else yield #1=[#1#];");
tryItOut("{/*for..in*/for(var #3={a:#3#} in <x><y/></x>) {;yield; } }");
tryItOut("/*infloop*/for([true.throw((__count__ = window)) for each (__noSuchMethod__ in __noSuchMethod__) if (<><x><y/></x></>)]; (*::*.__proto__ = constructor = *::*); eval(\"\", [1e-81])) {switch(undefined) { default: break; with({}) { throw break L;; } break; case 2: break; case 0.1: prototype =  /x/g , __proto__;/*infloop*/while([z1]) }break L; }");
tryItOut("L:if(<><bbb xmlns=\"constructor\"></bbb></> .@ set.__lookupSetter__(\"__proto__ for (__proto__ in __count__)\")) {{}while((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) && 0)gc() }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("do {throw @foo;<><x><y/>\f</x></> } while((function ([y]) { }) && 0);");
tryItOut("let (__iterator__ = false) { switch((({a2:z2}).hasOwnProperty(\"__proto__\"))) { default: const prop =  \"\" , __proto__ = __count__;/*\n*/break;  } }");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("*::*let __iterator__ = <y><z/></y>;");
tryItOut("let (({ __noSuchMethod__: ({ prop: ({ prototype: [({ __count__: __proto__ }), [], __noSuchMethod__, __iterator__], constructor: ({ __parent__: 0.1 }) }), __parent__: ({ __iterator__: [({ __parent__: __iterator__ }), , __noSuchMethod__, ({ delete: try { ; } catch(__iterator__) { continue ; }  }), prop] }) }), __proto__: [, ({ prop: ({ __count__: ({ constructor: constructor }), @foo: __iterator__ }), __proto__: setter }), ({ __proto__: [], __count__: [({ (<x><y/></x>).watch: prototype }), ({ __proto__: __iterator__, __iterator__: prototype })] }), ({ __count__: constructor, prototype: [, ({ constructor: __proto__ })] })] }) = <x/>+=<><x><y/></x></>) { /*for..in*/M:for(__noSuchMethod__ = <x><y/></x> in -1) gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (prototype = <x/>) in *.throw(<x><y/></x>)) return arguments;");
tryItOut("with(--)prop;");
tryItOut("M:if((yield ((p={}, (p.z = <x/>)())))) if(<><x><y/></x></>) { if (null) {}} else {yield *;null; } else {/*for..in*//* nogeckoex bug 349964 */M: for \n each(var constructor in <x/>) {constructorthrow this; } }");
tryItOut("return <><bbb xmlns=\" /x/g ()\"><xxx>{__count__}</\nxxx><!--yy--></bbb></>;");
tryItOut("with({}) { throw __count__; } ");
tryItOut("return *\n");
tryItOut("throw __parent__;");
tryItOut("return *;");
tryItOut("with({}) 'haha'.split");
tryItOut("return;gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((new constructor())(this.__defineSetter__(\"prop\", /a/gi)) in (uneval(0x99)).__lookupSetter__(\"prop\")) let (constructor) {  }");
tryItOut("(<x><y/></x>);");
tryItOut("/*infloop*/while(<x><y/></x>.eval(__noSuchMethod__ <= window)){;; }");
tryItOut("if(<><x><y/></x></>) { if (delete <x><y/></x>) return <><x><y/></x></>; else export *;}");
tryItOut("yield;");
tryItOut("with([z1].valueOf(\"number\")){return  \"\" ; }");
tryItOut("/*for..in*/M:for(var prop((__iterator__ ? true : false)) in #0=[ \"\" ]) {export __count__;export __count__; }\f");
tryItOut("L:if(try { return; } finally { __iterator__ = __iterator__; } ) gc()\nconst x::__proto__ = @foo, __count__;\n else  if (1e+81) {return *::*; } else export __noSuchMethod__;");
tryItOut("yield #1#.eval(<x><y/></x>);");
tryItOut("/*infloop*/do return __parent__; while(@foo);");
tryItOut("yield;continue /*;");
tryItOut("throw <y><z/></y>;");
tryItOut("if((this.__defineSetter__(\"prop\", window))) {export prop;; }\n");
tryItOut("M:do  set __proto__(prototype) { return window }  while((<x><y/></x>) && 0);");
tryItOut("L:switch(@foo) { default: case 3: with(<><x><y/></x></>)var __iterator__ = *::*;break;  }");
tryItOut("if((<><x><y/></x></>.propertyIsEnumerable(\"prop\"))) export prop;");
tryItOut("throw prop;");
tryItOut("M:with({__count__: new Array(#1=[#1#].constructor = prop, true)}){([1]); }");
tryItOut("/*for..in*/for(var prop in ((((return).__defineSetter__)(__iterator__))((__count__ = <x><y/></x>).__defineSetter__(\"__proto__\", <x><y/></x>) .@*::  /* Comment */__proto__.__iterator__ setter= eval))){switch(constructor = 1.2e3) { default: case  ''  %= null: gc()break;  } }");
tryItOut("with(<x/>.__parent__){;<><x><y/></x></>; }");
tryItOut("if((({})())) {throw false;prop = __count__; }");
tryItOut("if((({ constructor: ({ prototype: ({ __iterator__: __parent__ }), __noSuchMethod__:  { return [11,12,13,14].sort }  }) }) = ({ __parent__: [__count__, \f[, , [], constructor], , prop], constructor: prototype }))) {export prop;const __parent__; }");
tryItOut("do {{<x><y/></x>;if(null) ({}).__lookupGetter__ else  if ([1,,]) {yield;(<x><y/></x>); } }L: continue ; } while((new Error((this.@foo))) && 0);");
tryItOut("L: {return return;; }");
tryItOut("with({__noSuchMethod__: __count__ = -3/0})");
tryItOut("/*for..in*/M:for(let constructor = ((<x/>)(__parent__.isPrototypeOf(window))) in true) {throw __iterator__; }");
tryItOut("let (prototype = <><x><y/></x></>, constructor = <x><y/></x>) { yield; }\ngc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ((p={}, (p.z = false)()))(<x/>) in <x><y/></x>) {let __parent__ = *;const __count__, constructor = __proto__; }\nwith(<><x><y/></x></>)var __noSuchMethod__ = [,];\n");
tryItOut("do {prop;; } while((window.throw(false)) && 0);");
tryItOut("{gc()<xxx {__iterator__}={<x><y/></x>} /> }");
tryItOut("if(#2=({constructor: [z1]})) {(__proto__).__defineSetter__\n{}\n } else  if (delete __noSuchMethod__.__lookupSetter__(\"__parent__\")) let __parent__, __iterator__ =  /x/g ; else {3.141592653589793 }");
tryItOut("switch(-0) { default: export *;break; case window: {} }");
tryItOut("export *; const prototype;");
tryItOut("let(__proto__) { return;");
tryItOut("with({__count__: ((yield __iterator__) for each (function::__proto__ in false) for each (__proto__ in  /x/g ))}){{export *; } }");
tryItOut("let(constructor) ((function(){})());");
tryItOut("L:if(4.) { if (<><x><y/></x></>) return window; else {throw 1.2e3;((-1)); }}");
tryItOut("/*infloop*/L:for(constructor; window; []) throw <x><y/></x>;\nM:if((<x><y/></x>.(true))) yield function(id) { return id }; else break M;\n");
tryItOut("/*infloop*/for(const function::__iterator__; (((p={}, (p.z =  \"\" )())) &= this.__defineGetter__(\"constructor\", 'haha'.split))(function (__count__) { yield <x><y/></x> } , true >>= <x/>); new Number([,,z1], -3/0)) {if(typeof __count__) break ; else  if ((<><x><y/></x></>)) gc() }");
tryItOut("/*infloop*/for(let constructor; ((<x/>).__defineSetter__).call(__iterator__ = [[]], ) >>> ((*)[this] >>  \"\" .hasOwnProperty(\"__iterator__\")); <x><y/></x>.(window)) {(<><x><y/></x></>);if(<x/>) {export *;export __parent__; } else  if ((function ([y]) { })()) export __noSuchMethod__; }");
tryItOut("export __count__; const __proto__;");
tryItOut("M:if(this) (gc).apply else  if (this) {let constructor = 3.141592653589793, __proto__ = 033;const __iterator__ = <><x><y/></x></>, prop; }\n\nlet constructor;\n");
tryItOut("\ncontinue ;");
tryItOut("M:if(null / this >>> -0 .@*:: <><x><y/></x></>) {falseyield <><x><y/></x></>; } else {(<x/>); }");
tryItOut("if(/a/gi(new Object(<x/>, prop) * undefined, <><x><y/></x></>.prototype =  \"\" [__count__ = <><x><y/></x></>])) return; else {/*infloop*/L:while(*::*){var __noSuchMethod__ =  /x/g ; }var __noSuchMethod__, __iterator__;\nif(window) { if ( /x/ ) { } else yield this;}\n\r }");
tryItOut("switch(__count__.prototype =  '' .__defineSetter__(\"__parent__\", null)) { default:  }");
tryItOut("/*infloop*/for((++(<x><y/></x>.prototype = undefined)); constructor =  /x/g  /= (x::prototype = @foo); (prototype.__iterator__ %= <><zzz>-0</zzz></>)) false;");
tryItOut("/*infloop*/for(const (\f{ prop: constructor, __proto__: ({ __iterator__: ({ __count__(undefined): ({ __proto__: [, , , __proto__], constructor: [, , ({ prototype: __iterator__, __parent__: __noSuchMethod__ }), ({ __iterator__: __proto__, prop: prototype }), ] }), __iterator__: ({ __parent__: ({ __count__: __proto__, __noSuchMethod__: prop }), __noSuchMethod__: __proto__ }) }), __parent__: ({ true: prototype, prototype: ({ __proto__: __iterator__ }) }) }) }) = <><x><y/></x></> <= <y><z/></y>; constructor; (this.__defineGetter__(\"constructor\", [1,2,3,4].slice))\f[0 >>= (function ([y]) { })()]) {do {/*for..in*/for(let __noSuchMethod__ = <x><y/></x>.(0x99) in <><x><y/></x>\f</>) {var constructor = * } } while((true ? <x><y/></x> : <x/>) && 0); }");
