tryItOut("if(*::*.__noSuchMethod__.__lookupSetter__(\"prop\")) {export *;const constructor; } else  if (window == *::*) {if(0x99)  else  if ( '' ) {return; } else {gc() }\t } else /*infloop*/do  while(this);");
tryItOut("L:with([()]){var __count__;return <><x><y/></x></>; }");
tryItOut("L:with({__proto__: [15,16,17,18].filter([1,2,3,4].map, __iterator__)})yield 1e4;");
tryItOut("/*infloop*/for([15,16,17,18].sort(gc, [prototype].map([1,2,3,4].map)); [[11,12,13,14].map].some((#1#).__defineSetter__).propertyIsEnumerable(\"__noSuchMethod__\"); new (__parent__)(([<y><z/></y>] + (yield function ([y]) { }.*)), new 1e81(<y><z/></y>, 3/0) === __proto__ ^= null))  /x/g ;");
tryItOut("/*for..in*/for(const [constructor, prop] = <><x><y/></x></> === <x><y/></x>.watch(\"__parent__\", new Function) in <x/>.propertyIsEnumerable(\"__proto__\")) yield;");
tryItOut("(<x/>);");
tryItOut("switch(([1] |  \"\" )) { case 5: if(window) { if (<x><y/></x>) {yield; } else __proto__ = <><x><y/></x></>;} }");
tryItOut("L: {return  /x/g ;const function::constructor = window; }");
tryItOut("/*for..in*/for(const [delete, prop] = <><x><y/></x></> ? null\r : * in this) gc()*;");
tryItOut("if(<><x><y/></x></> <= <x/>) if(this) { if (-0) return; else {return <y><z/></y>; }} else  if (({__count__: <y><z/></y>})) yield;");
tryItOut("/*infloop*/for([window for (__proto__ in 5.0000000000000000000000)]; __parent__ = * \"\"  : <x><y/></x>( '' ); constructor%=this.zzz.zzz) {constructorgc() }");
tryItOut("yield; const __count__;");
tryItOut("if((this ? null :  /x/ ).eval((@foo)(<><x><y/></x></>))) { if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.watch(\"__parent__\"//h\n, Function)) {;yield <><x><y/></x></>; } else yield {};}");
tryItOut("let (constructor) {  }");
tryItOut("gc()");
tryItOut("\n");
tryItOut("; const __proto__;");
tryItOut("throw <x><y/></x>; const __proto__");
tryItOut("let(prop, [] = [[]]) { yield;");
tryItOut("if(#3={a:#3#}.@foo) { if (throw constructor = function(id) { return id };) throw (function ([y]) { })()} else {break L; }");
tryItOut("/*infloop*/for(true; new ((#2=[__parent__]))(((new Function(\"export *;\"))()), <><x><y/></x></>); {} const <x><y/></x>;) {function  __count__ (__parent__) { return <x><y/></x> }  }");
tryItOut("if(void  \"\" ) { if (__iterator__ @ *::*) {yield;(this); } else gc()}");
tryItOut("L: {export __proto__; }");
tryItOut("{return; }");
tryItOut("({}).hasOwnProperty");
tryItOut("while((constructor) && 0)if(<x><y/></x>(<><x><y/></x></>, #1=[#1#]).__defineGetter__(\"[__noSuchMethod__, , constructor, __count__]\", (1 for (x in [])))) { if (<x><y/></x>.(prop) ? <><x><y/></x></> : (<x><y/></x>\n)) {{} }} else {yield false;return  /x/ ; }");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ in @foo) throw <x><y/></x>;");
tryItOut("/*for..in*/for(var constructor = __noSuchMethod__-=function ([y]) { }.__lookupSetter__(\"__count__\") & (<!--yy-->( '' ,  '' ))\r-- + __noSuchMethod__.__iterator__ = eval(\"return;\", undefined) %  in \tthis.__defineGetter__(\"__count__\",  '' .__lookupGetter__(\"__noSuchMethod__\"))) {({ prototype: prototype, __proto__: __proto__ });yield; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (__count__ = [, ({ __noSuchMethod__: ({ prototype: ({ __count__: ({ __proto__: x::prop }), prop: [__parent__, __parent__, ] }) }), __noSuchMethod__: ({ __proto__: ({ prototype: prototype }), __count__: __proto__ }) }), , constructor]) in prop = this) /*for..in*/M:for([__parent__, __parent__] = false in <><\fx><y/></x></>) {var __proto__; }");
tryItOut("L:if(((<><x><y/></x></>['prop'] = @foo &= <x/>) ? (({ __proto__: __count__ }) = <x/>.valueOf(\"number\")) : ;)) {L:with([,,z1]){yield;{} }throw <y><z/></y>; } else  if ({return true; }.__parent__) break ; else export *;");
tryItOut("/*infloop*/while([, ] += <x><y/></x>)\fif(*) { if (0x99) {continue ; }} else return <x><y/></x>;");
tryItOut("with({}) yield ({ get __noSuchMethod__(__noSuchMethod__) { return false } , __noSuchMethod__: default:  /x/g break;  });");
tryItOut("if( /x/g ++) { if (prototype.__parent__) {/*for..in*/M:for(__noSuchMethod__ in ((new Function)(<x/>)))const prototype = false, constructor; }} else {export __noSuchMethod__;(new Function(\"gc()\")) }\n");
tryItOut("if(([z1,,] && <x/>))  else {;throw false; }");
tryItOut("(<>< @foo; />);");
tryItOut("<x><y/></x>;");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: constructor }) = <y><z/></y> * <><x><y/></x></>; __proto__; +window) {( '' );break M; }");
tryItOut("let ([, ] = (new ( '' )(undefined) @ ([1,2,3,4].map))) { do continue\f ; while((prototype = constructor) && 0); }");
tryItOut("L:if(new (new Function(\";\"))()) if(@foo) {var prototype = #1#; } else  if (prototype.prop getter= ([, prop, __count__] = *::*)) {export constructor\nexport __proto__; } else {}");
tryItOut("/*infloop*/for(__count__;  '' ; (new Date(4., ([* for each (constructor in <x><y/></x>) for (__iterator__ in ({})) for (__noSuchMethod__ in  /x/ )])))) {/*for..in*/for(var __count__ in __proto__) {} }");
tryItOut("throw <x><y/></x>;");
tryItOut("/*infloop*/for(true; -3/0; <y><z/></y>) {return <y><z/></y>;throw  \"\" ; }");
tryItOut("if((new Function(<\tx><y/></x>, <x><y/></x>) /= ({ get __parent__ __iterator__ () { return *; } , prototype: [,,z1] }))) { if (__parent__.prop) __parent__, __count__ = *; else {export __count__;export constructor; }}");
tryItOut("switch([<></>]) { case <y><z/></y>: break;  }");
tryItOut("L:while((new gc()) && 0){with({__iterator__: new (Function)((<y><z/></y>())++)}){(prototype); const __proto__; }/*infloop*/for(let __proto__; eval; *::*.valueOf(\"number\")) yield; }");
tryItOut("/*for..in*/L:for(var prop in (prototype.*)) let prop = [this].filter(function(y) { yield y; return;; yield y; }), prop = <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(var [prototype.prototype, __count__] = prop = [] in (eval(\"prototype\", window) - (<x><y/></x>(__noSuchMethod__)) instanceof (uneval(1e81)))) {}");
tryItOut("{return #3={a:#3#};export *; }");
tryItOut("let (__iterator__ = true, prop) { export __parent__; }");
tryItOut("if(((uneval(window\n)))\t) {gc() } else continue M;");
tryItOut("this.zzz.zzz;");
tryItOut("export __parent__;");
tryItOut("__iterator__ = <x><y/></x>, prototype;( \"\" );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__(((<y><z/></y>)(__iterator__)).__lookupSetter__(\"__proto__\")) in @foo.watch(\"__proto__\", function(q) { return q; })) yield;");
tryItOut("(true);");
tryItOut("{__parent__ = <x/>;__iterator__; }");
tryItOut("return;");
tryItOut("gc()\n");
tryItOut("if((false)[1e+81 <<= <><x><y/></x></>]) { if ((-1)) {throw <y><z/></y>;return; }} else {export *;export __parent__; }L:with(this){return;gc }");
tryItOut("\fif(@foo.__proto__) { if (<><>+<y><z/></y></></>) export prototype;} else {throw  /x/ ; }");
tryItOut("/*infloop*/while((new (([((null(.2)).watch(\"__count__\", new Function)) for (prop.__count__ in new __parent__(window)) if ((<><x><y/></x></> .@ <><x><y/></x></>))]))(null ?  /x/g  : <>({ __iterator__: __parent__ })</>, __parent__ = __noSuchMethod__.(({a2:z2})))))let __proto__, __proto__;");
tryItOut("L:if((({__proto__: 5.0000000000000000000000}))[<y><z/></y> - constructor]) { if (*::*) {with(( /x/g  * window))const __parent__ =  \"\" ; } else {/*for..in*/for(__iterator__ in (((new Function(\"{}\")))(null))){break M;constructor = window }export *; }}");
tryItOut("([,,])\n");
tryItOut("{do {__iterator__;{} } while((Object(prop\n.__defineSetter__(\"prop\", function (constructor, prop) { return <x><y/></x>\t } ))) && 0); }");
tryItOut("(<y><z/></y>);\f\n");
tryItOut("/*for..in*/for(let __noSuchMethod__ = prototype.constructor in __proto__) return;");
tryItOut("constructor, prototype = 4.; const __count__;");
tryItOut("let (__count__ = (<x><y/></x>.throw(<x/>).eval((prototype.__iterator__ = this + null >>> <y><z/></y>)))) { function (__count__) { gc() }  }");
tryItOut("let");
tryItOut("yield;function ()<><x><y/></x></>");
tryItOut("return <y><z/></y>\nexport delete;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in <><x><y/></x></>) Function");
tryItOut("this.zzz.zzz;");
tryItOut("(<><x><y/></x></>);var __noSuchMethod__, __parent__;");
tryItOut("/*infloop*/M:for(((p={}, (p.z = <x><y/></x>)())); ([1,2,3,4].slice)(); __proto__ = \n__noSuchMethod__) {if(arguments) {gc()throw *::*; } }");
tryItOut("([*::* for each (__count__ in null\n)])");
tryItOut("gc()let __parent__ = this\nlet(__noSuchMethod__ = [prototype.__noSuchMethod__].filter(eval)) ((function(){/*infloop*/for(var __proto__; null;  /x/ ) {{} }})());");
tryItOut("/*for..in*/for(var [\n<x><y/></x>, constructor] = ( /x/g )[<y><z/></y>] in __noSuchMethod__) let __parent__ = *, prop;");
tryItOut("if(__count__ = <x/>) {export *;if(prototype) {var __noSuchMethod__ = 4., __parent__; } } else {switch(({a1:1})) { case false: export *;break; return;break; return;break; ([,,z1]);default: ;break ;break; break; case ({}): break; gc()break;  }\n const __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(let [constructor, constructor] = @foo in (window.hasOwnProperty(\"prototype\"))) /*infloop*/for(let __parent__; [4. for (prototype in true)]; try { return; } catch(__iterator__([1])) { gc() } finally { export __noSuchMethod__; } ) let __parent__ = <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(let prototype.__parent__ in ((function  __count__ (constructor) { switch(<y><z/></y>.valueOf(\"number\")) { default:  } } )((+__iterator__)))){var __proto__, __proto__; }");
tryItOut("return;");
tryItOut("{gc()const __parent__; } const prop;");
tryItOut("yield  /x/g ; const __noSuchMethod__;");
tryItOut("L:do {yield <x><y/></x>;yield window; }\n while((<x><y/></x>.propertyIsEnumerable(\"__count__\")) && 0);");
tryItOut("let (__noSuchMethod__, __parent__) { M:if([, __parent__, __iterator__, prop, ] = -<x><y/></x>) <><x><y/></x></>; else  if () {/*infloop*/for(const prop = 4.; [z1]; constructor) {return @foo;export *; } } }");
tryItOut("with({__proto__: Exception((uneval(<><x>\f<y/></x></>)).hasOwnProperty(\"__proto__\"))}){export *; }");
tryItOut("M:with(-3/0 &= 5.0000000000000000000000;.prototype)throw #1#;");
tryItOut("throw StopIteration;");
tryItOut("M:if(Boolean(*, [z1])) /*for..in*/L:for(const __count__ = *::* in @foo) prototype; else  if (-0) yield <x/>;");
tryItOut("M:do return; while((this.__defineGetter__(\"__proto__\", (new Function(\"export __iterator__;\")))) && 0);");
tryItOut("(0.propertyIsEnumerable(\"__count__\")) instanceof <x><y/></x>.(<><x><y/></x></>)");
tryItOut("/*infloop*/do /*infloop*/for(let __count__; <><x><y/></x></>; [[1]]) ; while(@foo);");
tryItOut("/*infloop*/do var __count__, __proto__ = function  constructor (prop, __parent__)true; while(__count__.__proto__);");
tryItOut("export prototype\n");
tryItOut("{gc() }");
tryItOut("L:if((function (__parent__) { return 0x99 } ).call(false, constructor.__iterator__ = window, ((<x/>)()))) ; else return;");
tryItOut("switch(prototype.constructor = <x><y/></x>.__defineSetter__(\"prototype\", function (__parent__ = __iterator__, __proto__ = __noSuchMethod__;, __count__) { return <><x><y/></x></> } )) { default: case 4:  }");
tryItOut("if(__count__) ; else  if (undefined) {/a/gi }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("{var __noSuchMethod__; }");
tryItOut("/*infloop*/do \f{let prop; } while([__proto__] = 1e81.isPrototypeOf(<><x><y/></x></>));");
tryItOut("if(this.__defineGetter__(\"constructor\",  == null)) {with(<><x><y/></x></>)throw <y><z/></y>;export prop; } else /*infloop*/for(<x><y/></x>;  '' ; this) throw  /x/g ;");
tryItOut("L: {{} }\nswitch(null) { case 4: gcbreak; case 1e4: break; break; default: export *;break; continue ;break; case 1e81: yield <><x><y/></x></>; }\n");
tryItOut("/*infloop*/L:for((constructor = true)(__parent__\t.__iterator__); prop.__parent__ getter= Math.sin; new new this(#1=[#1#])()) /*for..in*/L:for(<y><z/></y>['__noSuchMethod__'] in ((function(q) { return q; })(function (__iterator__, __noSuchMethod__) { yield <><x><y/></x></>.throw(false) } )))(4.);");
tryItOut("/*for..in*/for(__noSuchMethod__ = __iterator__case (this.__defineSetter__(\"prop\", Function)): break; break;  for ((<><x><y/></x></>)(<x><y/\f></x>) in __noSuchMethod__) in (yield ( / arguments))) {if((null() += (window -=  /x/g ))) export __count__;gc() }");
tryItOut("let (__noSuchMethod__) { {{}function::__iterator__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let prop in export *;) {__parent__ = <x><y/></x>, __count__ = this;const __count__ = <x><y/></x>, __parent__ = @foo; }");
tryItOut("let (__iterator__) { throw __parent__; } const __iterator__; const prototype;");
tryItOut("prototype");
tryItOut("export *;\nreturn;\n");
tryItOut("/*infloop*/for(var ({ constructor: __parent__ }) = <x><y/></x>.__proto__; \n<><x><y/></x></>; <y><z/></y>.__defineGetter__(\"__proto__\", function(y) { yield y; ;; yield y; })) export *;");
tryItOut("if(<x><y/></x>.watch(\"constructor\", function (prop, __noSuchMethod__)function(id) { return id })) const __noSuchMethod__ = .2; else throw this;");
tryItOut("const constructor const each;");
tryItOut("while((\n({ set __count__ prototype (prop)0x99, __parent__ setter:  })) && 0)M:if(false) yield  \"\" ; else {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__iterator__ in <><x><y/></x></>) {export constructor; }");
tryItOut("let (__noSuchMethod__ = <x/>, __proto__ = prop) { with(@foo){export *;return; } }");
tryItOut("switch(this.zzz.zzz) { case 9: gc()break; break;  }\n/*for..in*/for(__parent__ in (((Boolean(__noSuchMethod__ = 5.0000000000000000000000)))((null.eval(this :: .2))))){[[1]]var prototype = <><x><y/></x></>, __proto__; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("(this)\n");
tryItOut("M:do /*for..in*/for(const prototype = *::* in prop) {try { prop; } catch(constructor if prototype) { break L; }  } while((this.__defineSetter__(\"prop\", Function)) && 0)");
tryItOut("/*for..in*/for(let __parent__ = constructor in  \"\" ) {export __noSuchMethod__;throw [z1]; }");
tryItOut("throw StopIteration;");
tryItOut("if((<x/>.valueOf(\"number\"))) {/*for..in*/M:for(var __noSuchMethod__ = <ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd> in <x/>.hasOwnProperty(\"__count__\")) {<y><z/></y>(false); }throw __proto__; } else {return @foo;gc()\nlet (__noSuchMethod__) { return; } }");
tryItOut("/*for..in*/for(__iterator__ in ((gc)(({a2:z2})))){(true);(__noSuchMethod__); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in window) {\fwindow; }");
tryItOut("this.zzz.zzz;");
tryItOut("do gc() while(((<><x><y/></x></>)) && 0);");
tryItOut("for(let y in [5,6,7,8]) let(prop = prototype | <><x><y/></x></>) ((function(){this.zzz.zzz;})());");
tryItOut("/*for..in*/for(let [constructor, constructor] = ((prototype.__noSuchMethod__) ? ({__count__: 033}) : null.throw( /x/g )) in 1e+81) {yield (-1); }");
tryItOut("if(this.__defineGetter__(\"__iterator__\", 1e4).__defineSetter__(\"constructor\", /a/gi)) break M; else  if ((__parent__)) {break ;export *; const __iterator__; }");
tryItOut("(0)\n");
tryItOut("Math.sin");
tryItOut("with((__iterator__)){if((new (function  __noSuchMethod__ () { yield undefined; } )(/a/gi,  \"\" ))) {{export __parent__;gc() } } }");
tryItOut("if(new <x><y/></x> ? <><x><y/></x></> :  '' (((eval(\"<x><y/></x>\", this)) -= __count__ = continue ), (__proto__.eval(<x><y/></x>)))) { if (0/0) throw <x><y/></x>; else {gc() }}");
tryItOut("if(new Iterator(__proto__.constructor)) {let __proto__ = (function ([y]) { })()\nexport __parent__; } else {({}).__lookupGetter__ }");
tryItOut("/*for..in*/for(let null in (([1,2,3,4].map)([-0 -= @foo].some(<><x><y/></x></> .. this)))){function  constructor () { return <x/> }  }");
tryItOut("this.zzz.zzz;");
tryItOut("__parent__ = __proto__\nswitch(<x/>) { default: break; gc()case null: throw .2;break; yield; }");
tryItOut("{} const __count__;");
tryItOut("{<y><z/></y>;return <x/>; }");
tryItOut("return");
tryItOut("gc()");
tryItOut("/*for..in*/for(var __parent__ in ((({}).__lookupGetter__)((prop = 1e-81))))/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in this) yield;");
tryItOut("if(new (prop = ({a2:z2}))((((yield this)) >= window.yoyo(true)))) { if ((yield constructor.(<><x><y/></x></>.constructor);) ^ [11,12,13,14].some) {if([z1,,]) {return <x><y/></x>;[1,2,3,4].slice } else  if (undefined) {3.141592653589793;throw 1.3/* } } else {var prop; }}");
tryItOut("gc()");
tryItOut("throw  \"\" ;\nvar __proto__;\n");
tryItOut("/*for..in*/for(let __parent__ = @foo.propertyIsEnumerable(\"prototype\") .@x:: (this.zzz.zzz) in <y><z/></y>()) var __count__ = ({a2:z2}), __proto__ = 5.0000000000000000000000");
tryItOut("throw <x/>;throw function::prop;\nthrow <y><z/></y>;\n");
tryItOut("{{}while((__count__) && 0){export prop; } }");
tryItOut("if(true['\tconstructor'] = 1.2e3) {-0; } else  if ((prototype.@foo)) let prop = __proto__, prop; else {(1e-81);[1,2,3,4].map }");
tryItOut("if(#0=[prop]) ( \"\" ).__defineSetter__ else  if (delete ({ prop: ({ prop: __iterator__ }) }) = *['__noSuchMethod__']) {/*infloop*/for(prototype; window\n; (this.__defineGetter__(\"prop\", function  prop ()<x><y/></x>))) {let getter = arguments, __proto__;return; }export prototype } else {break ;gc() }");
tryItOut("/*infloop*/do {//h\n__count__ = null; } while(<y><z/></y>);");
tryItOut("gc()\ngc() const prop;\n");
tryItOut("{break L; }");
tryItOut("do {var constructor, __count__; } while((([1].__defineSetter__(\"__proto__\", <x><y/></x>))) && 0);");
tryItOut("const __noSuchMethod__ = undefined, __iterator__ = @foo; const __proto__;");
tryItOut("if(prototype) { } else undefined");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__+=constructor['__parent__'] in eval(\"return;\", ({ constructor: __proto__ }) = (<x><y/></x>)[1e+81])) /*for..in*/for(var  if (({__iterator__:  /x/  })) in (new (<y><z/></y>)())) {function (__noSuchMethod__, __count__)0 }");
tryItOut("export *;\n(null);\n");
tryItOut("if(~<x/> >>>=true |= <x/>) with((yield prototype.__parent__ setter= 3/0 *= (1e+81.unwatch(\"constructor\")))){({}).__lookupGetter____iterator__, prop = @foo; } else  if (([11,12,13,14].filter)) {throw window;; } else L:if(<><x><y/></x></>) yield #3={a:#3#}; else let __count__ =  \"\" , __iterator__ =  \"\" ;");
tryItOut("if(prototype instanceof __noSuchMethod__) var __proto__ = this, constructor = true;");
tryItOut("if((yield <y><z/></y>)) {__parent__ = 4., x::__iterator__;gc() } else  if (-3/0) prototype = <y><z/></y>;");
tryItOut("L:while((__iterator__.__defineGetter__(\"__parent__\", function(y) { yield y; export prototype;; yield y; })) && 0){do {(this);continue L; } while(([15,16,17,18].sort((new Function(\"with({__iterator__: ({}).hasOwnProperty()})break ;\")), (({__count__: [null].map(function () /x/ ) >>= <><x><y/></x></>, __parent__: (p={}, (p.z = __iterator__.__parent__)()) })))) && 0); }");
tryItOut("with({__proto__: this.__defineSetter__(\"prototype\", (Math.pow).apply)})if(( '' .valueOf(\"number\"))) { if (this.__defineSetter__(\"prototype\", Math.pow)) { }} else break L;");
tryItOut("/*infloop*/do if((#0=<><x><y/></x></>.prop)) {with(prop)const __proto__ = __iterator__, __noSuchMethod__ = 3/0; } while(( \"\"  >>> (__noSuchMethod__.__defineGetter__(\"__noSuchMethod__\", Math.pow) <= <>__parent__</> &= <><x><y/></x></>)));");
tryItOut("try { var prop; } propfinally { yield; } ");
tryItOut("L: {return;eval }");
tryItOut("L: Function");
tryItOut("/*for..in*/for(let getter in __proto__) {yield *::*;const prop, function::prototype; }\n/*infloop*/M:for((#3={a:#3#}.watch(\"__parent__\", function(y) { yield y; export __count__;; yield y; })); <bbb xmlns:ccc=\" /x/g  ? __count__ :  /x/g [__parent__ = <x><y/></x>]\"><ccc:eee></ccc:eee></bbb>; 0.1.throw(<x><y/></x>) & <y><z/></y>.__defineGetter__(\"prototype\", <><x><y/></x></>)) {yield; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in __iterator__) prop");
tryItOut("/*infloop*/do {throw 1e-81\nexport constructor setter: [1,2,3,4].slice; } while(({__parent__: (yield null) }));");
tryItOut("/*for..in*/for(var [prop, __iterator__] = [undefined] in [z1,,]) yield #3={a:#3#}");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = prop.__parent__ in window.valueOf(\"number\")) ");
tryItOut("/*infloop*/for(*::*.@*; (({ @foo: __proto__ }) = [window for (__noSuchMethod__ in ({a2:z2}))] %= <x><y/></x>); eval(\"throw false;\",  \"\" ).@*) {return this\n }");
tryItOut("/*infloop*/M:for(var ({ prop: ({ prop: ({ ({ __parent__: __noSuchMethod__, __proto__: __proto__ }): [] }) }), prop: ({ prototype: __parent__, __iterator__: ({ prototype: constructor }) }) }) = __noSuchMethod__ = ([{__proto__, __iterator__ = prototypenew Function }]) /= ( /x/g ()); ((-1)())(); Math.sin((constructor.__noSuchMethod__ setter= function(q) { return q; }), (prototype = null))) /*infloop*/for(__count__; {var __parent__; }; -1) export *;");
tryItOut("{if(undefined if (<x><y/></x>)) { if (*) {prototype = *::*, __noSuchMethod__; }} else break ; }");
tryItOut("L: ( /x/g );");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(let __count__ in (([1,2,3,4].map)(*))){/*\n*/return; } const __iterator__;");
tryItOut("export *;");
tryItOut("L:if(window(window %  '' , false)) {return;export *; } else  if (yield [11,12,13,14].filter) {prototype, __iterator__;yield; } else {__noSuchMethod__, __iterator__ }");
tryItOut("switch(prototype.__noSuchMethod__) { default: break;  }");
tryItOut("if({__iterator__; }) {yield;continue ; } else throw false;");
tryItOut("with({constructor: new ((new Boolean(.2))).__defineSetter__(, new (prop)(*::*, false))})if(prototype|= '' ) { if (prop) { } else (1 for (x in []))}");
tryItOut("continue M;");
tryItOut("do {let __iterator__, __iterator__; } while(((<><x><y/></x></>\n)) && 0);");
tryItOut("/*for..in*/M:for(let prop = <y><z/></y> in 0) {gc()var constructor = <><x><y/></x></>; }");
tryItOut("switch(<!--yy-->) { default: yield (<x/> >>>=window);case 2: break; case 0: case (constructor = @foo): (<x><y/></x>);break; return\nreturn;break; case <x><y/></x>.(<x><y/></x>): case 8: break; var __iterator__, __noSuchMethod__; }");
tryItOut("const __count__ = <x/>;");
tryItOut("/*for..in*/M:for(var __iterator__ in (((window && <y><z/></y>)++)((p={}, (p.z = function(id) { return id })()))))L: {__proto__;<x><y/></x>; }");
tryItOut("/*infloop*/for(false < gc.propertyIsEnumerable(\"__parent__\").valueOf(\"number\"); yield (-0)++; <>prototype</>) {return;; }");
tryItOut("/*for..in*/for([__proto__, __count__] = ([1,2,3,4].map).call((-0) ? true : 3.141592653589793, )[__parent__.( /x/g )] in new <x><y/></x>(arguments)) {return; }");
tryItOut("if(null++) return; else yield [];");
tryItOut("/*infloop*/L:do export constructor; while(__count__.([window]));");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) let([, , __iterator__], __iterator__ = *::*) ((function(){for(let y in [5,6,7,8]) throw <y><z/></y>;})());");
tryItOut("switch((<><x><y/></x></>(0.1, <><x><y/></x><>) !== [,,])) { case __noSuchMethod__ >> __iterator__: (constructor);break; default: Math.powbreak; case (#0= /x/g ): return __parent__;break;  }");
tryItOut("let (__parent__ = false.yoyo(*)) { /*for..in*/for([prop, constructor] = ([11,12,13,14].filter) in #3={a:#3#}) throw yyy; }");
tryItOut("{/*infloop*/for(constructor = false; ({__count__: false}); (5.0000000000000000000000)) {({}).__lookupGetter__ } }");
tryItOut("with((#1# >>> *::*))const __iterator__ = <x><y/></x>, __count__;");
