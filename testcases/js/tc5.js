tryItOut("for(let y in [5,6,7,8]) constructor = prototype;");
tryItOut("L: {yield;export *; }");
tryItOut("try {  { yield (<x><y/></x>.(<><x><y/></x></>)) }  } catch(prototype if (!__proto__) >>>=(<><x><y/></x></> for each (x::__parent__ in 0/0)).__defineSetter__(\"__count__\", /a/gi)) { let(export prop;) { export constructor; } catch(prototype) { constructor = constructor; } ");
tryItOut("while((false.yoyo([,])) && 0){continue ;return; }");
tryItOut("{const export *; = <x>\t<y/></x>; }");
tryItOut("(((<x><y/></x>)(false)));");
tryItOut("/*for..in*/for(const \t__iterator__ in false) {; }");
tryItOut("while(() && 0)/*infloop*/while(((case 4: yield __parent__;break; return;break; default: break; case *: yield;case []: yield <><x><y/></x></>;break; export __iterator__;break; case 9: break; ([,,]);case 0: (function ()<y><z/></y>).callbreak; case true: break; )(*,  '' ))){yield;export *; }");
tryItOut("with({: (Math.pow).call(this.hasOwnProperty(\"__parent__\"), [prop, __noSuchMethod__, constructor, constructor, __iterator__] = (constructor = <><x><y/></x></>), null == 5.0000000000000000000000)})/*infloop*/L:if(window) return; else {export __parent__; }\nconst prop = arguments, __iterator__;\n");
tryItOut("/*for..in*/for(__iterator__ in true) if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) if(this) {let __noSuchMethod__ = <x><y/></x>; } else __parent__, __noSuchMethod__ = [[]];");
tryItOut("({ prop: __noSuchMethod__ })");
tryItOut("if(__noSuchMethod__.__proto__ = ({__noSuchMethod__ setter: gc, prop getter: gc }))  /x/g ; else yield <y><z/></y>;");
tryItOut("/*infloop*/M:for(__proto__ = <x><y/></x>; <><x><y/></x></> | let __count__;; -<x><y/></x>) ({}).watch");
tryItOut("if(((-0).__noSuchMethod__ = window)[window]) throw <y><z/></y>;");
tryItOut("{true;*; }");
tryItOut("if(@foo.__parent__ ? this.zzz.zzz : yield @foo) {let x::__iterator__, __proto__;(*::*); } else  if (((<x><y/></x>)(__iterator__) = <x><y/></x>.(<x><y/></x>)).@foo) {let prop, __parent__ = prototype;if(<x><y/></x>) { if (<y><z/></y>) {return;throw @foo; } else throw <><x><y/></x></>;} }");
tryItOut("/*for..in*/for(const __iterator__ = * in window) {{} }");
tryItOut("if(__iterator__ = <x/>) { if ((__parent__ = *::*).eval((-1) ?  ''  : null)) export __proto__; else export constructor;}");
tryItOut("constructor = __iterator__;");
tryItOut("for(let y in [5,6,7,8]) yield (prototype) = (@foo.throw(*::*));");
tryItOut("/*infloop*/M:while(__count__.prototype = \r*::*){prop = <y><z/></y>, __count__; }");
tryItOut("while((undefined) && 0)var constructor = __proto__, constructor;");
tryItOut("return;/*infloop*/for((-0); [15,16,17,18].map((<x/>).call, (1e4.throw(@foo)) &= -3/0); __iterator__.__iterator__) {const __proto__ = *::*; }");
tryItOut("/*for..in*/for(let __iterator__ = (__parent__.__defineGetter__(\"__noSuchMethod__\", (new Function(\"break M;\")))) in [[1]].eval(<x><y/></x>)) {let __proto__;if(this.zzz.zzz) { if (<><x><y/></x></> < *::*) let __parent__ = <x><y/></x>, __count__;} else const prototype; }");
tryItOut("/*infloop*/for(prop; <><x><y/></x></>.__defineSetter__(\"constructor\", function  __proto__ (__count__ getter: function (__noSuchMethod__, prop) { yield <y><z/></y> } ) { yield <x/>; } ); ((<><x><y/></x></>)())) {export __proto__; }");
tryItOut("with((<x/>.eval(__count__.(1e4).isPrototypeOf(({__count__:  '' }))))){while((__parent__ = prop = <x><y/></x>) && 0)return; }");
tryItOut("break M\n");
tryItOut("do let __count__, prop; while((<x/>) && 0);");
tryItOut("if(<><>undefined</></>) {/*for..in*/for(let [__noSuchMethod__, __count__] = <x/> in this) yield; } else  if (<x/>) {throw null; } else {{} }");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in @foo) {#1=[#1#]yield window; } } while([11,12,13,14].some);");
tryItOut("if(<><bbb xmlns=\"'fafafa'.replace(/a/g, [1,2,3,4].map)\">yyy</bbb></>) {while((null) && 0)export *; } else  if (if((prototype = <><x><y/></x></>)) { if (window.valueOf(\"number\")) {return <x><y/></x>; }} else const __parent__, __count__) let (({ prop: ({ __parent__: prop }), __proto__: __proto__ })) { if((!this)) {yield <><x><y/></x></>; } else  if (<y><z/></y> ? *::* >> __parent__, <><x><y/></x></> : <x/>) {if(true)  }\t else {(<><x><y/></x></>);;export __noSuchMethod__; } } else {prototype.constructor, __iterator__continue M; }");
tryItOut("{throw <><x><y/></x></>; }");
tryItOut("switch([,,z1]) { case (({ prototype: [] }) = (new (constructor.(function(id) { return id } .@*:: <x/>)((uneval(__parent__ = 1.3))))): case 2: if((<x><y/></x>.__defineSetter__(\"prototype\", Math.pow))(({prototype setter: function(y) { yield y; {}; yield y; } }).__defineSetter__(\"__iterator__\", function (__proto__) { yield -3/0 } ), (__count__.constructor getter= function(q) { return q; }))) {continue L;yield <x/>; }case 8: continue L\f; }");
tryItOut("/*infloop*/L:while(null)/*infloop*/for(let ({ __proto__: ({ __noSuchMethod__: [[, __proto__]], constructor:  '' ['function::constructor'] }) }) = new ('haha'.split)(); RegExp(<x><y/></x>).yoyo((<><x><y/></x></>)[__noSuchMethod__]); (+ /x/g .__lookupSetter__(\"__parent__\"))) /*infloop*/L:for(let [] = (<><x><\ty/></x></>)[[,,]]; *; (new (@foo)(1.2e3, <x><y/></x>))) switch(window) { case <><x><y/></x></>: break;  }");
tryItOut("with((p={}, (p.z = ((-1) + window))())){/*for..in*/for(let __count__ = ++(constructor = <x><y/></x>) in __proto__ = __iterator__ = [1,,]) {yield;export *; }this.zzz.zzz; }");
tryItOut("{export prototype;return ({__count__: this }); }");
tryItOut("let(__noSuchMethod__ = __proto__[3], x::constructor = #1#) ((function(){with({}) { prop; } })());");
tryItOut("if([,,]) { if (__noSuchMethod__.prototype = @foo) {continue ;continue ; } else /*for..in*/for(var __parent__ = window in window) gc()}");
tryItOut("/*for..in*/for(prototype =  /x/  in -1) <y><z/></y>;");
tryItOut("if(this.__defineSetter__(\"__iterator__\", (1 for (x in []))) :: __parent__) gc()");
tryItOut("if(window) var __iterator__, __noSuchMethod__ = <y><z/></y>; else  if (@foo) throw this;return;");
tryItOut("return \n(1.3.throw( '' .propertyIsEnumerable(\"__proto__\")))[(({__count__: <x/>.hasOwnProperty(\"constructor\"), prototype getter: (__count__).watch })) == ];");
tryItOut("switch(arguments) { default: ;break; case (<x/>.@foo): ;break;  }");
tryItOut("/*infloop*/while((({__count__ getter: <x><y/></x>,  set __proto__()<x><y/></x> }) if (__noSuchMethod__))){gc()M:if(*::*.eval(#1#)) { if ((<><x><y/></x></>.unwatch(\"prop\"))) } else break ; }");
tryItOut("/*for..in*/L:for(var __iterator__ in [ '' ]) let __noSuchMethod__ = function(id) { return id };");
tryItOut("L:if((constructor = __count__) .. prop = __proto__) {gc() }");
tryItOut("L:if([<bbb xmlns=\"function(id) { return id }\"><!--yy--></bbb><!--yy-->].sort([1,2,3,4].map)) { if ( /x/ ) {M:with(__parent__)yield prototype; } else {/*infloop*/for(let constructor = function(id) { return id } :: __parent__; 1e+81 .@ false; eval(\"({ set __parent__() { throw <x><y/></x>; } ,  set __noSuchMethod__() { gc() } /*\\n*/ })\",  /* Comment */undefined)) __count__; if (*) }}");
tryItOut("/*for..in*/for(__parent__ = this.__defineSetter__(\"__parent__\", (<><x><y/></x></>).__defineSetter__) in undefined) {\t__proto__ = <><x><y/></x></>;throw this; }");
tryItOut("/*infloop*/L:for(({ prop: prop }) = __noSuchMethod__; new *[<x><y/></x>]() != this.__defineSetter__(\"constructor\", ({}).__lookupGetter__)\r; undefined.@foo(new /a/gi())) {if(__iterator__: 3/0(<x/>)) default: break;  else  if (1.2e3) return case *: ;break; break; case 9: break; break; case 0: break; default: break; throw <x><y/></x>;break; case 0: throw __proto__//h\n;{}case this: break; export __noSuchMethod__;break; case 0: break; break; ;return ({a1:1}); }");
tryItOut("<!--yy-->");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __proto__] = ()[<bbb xmlns:ccc=\"(\n<x/>)\"><ccc:eee></ccc:eee></bbb>] in eval(\"switch([] -= (-1)) { case <><x><y/></x></>: do continue M; while((prototype) && 0); }\", ({} for (function::function::__proto__ in  /x/ )))) L:switch(window) { default: break; break;  }\n\nreturn;");
tryItOut("with({}) { with({}) __parent__ = function::prototype; } ");
tryItOut("/*for..in*/for(let constructor = #1=[__noSuchMethod__ = [z1,,]] in yield *::*) if(<y><z/></y>) {;break M; } else  if (window) var __count__;");
tryItOut("L: ");
tryItOut("with({__iterator__: 'fafafa'.replace(/a/g, (*::*).__defineSetter__)})");
tryItOut("/*\n*/if((this.__defineSetter__(\"get\", null))( ''  .. [,])) while((false.__lookupGetter__(\"__iterator__\")) && 0)export *; else  if (if(*.__lookupGetter__(\"__count__\")) {let __proto__; } else {{} }) {{export *\t; }L:with(constructor){__noSuchMethod__; } }");
tryItOut("return;");
tryItOut("/*infloop*/for(yield (__count__ = [,]).__lookupGetter__(\"prop\") << ((p={}, (p.z = (__noSuchMethod__ = 1.3.__defineSetter__(\"prototype\", new Function)))())); (({__iterator__ getter: ({__iterator__: this}) })).__defineGetter__(\"constructor\", null.*); @foo) {continue L;; }");
tryItOut("/*for..in*/for([__count__, __parent__] = <y><z/></y> in [[]]) export *\n/*infloop*/do export __iterator__; while(__iterator__);");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((function(y) { yield y; ;; yield y; })(-#1=[#1#].watch(\"__parent__\", function  constructor (\t({ __proto__: __parent__, prop: prop }))__count__ =  \"\" )))){const constructor; }");
tryItOut("let(({ prototype: [] }) = this.zzz.zzz) { with({}) try { throw <y><z/></y>; } catch(constructor) {  } finally { {} } ");
tryItOut("/*for..in*/for(let [prop, __iterator__] =  /x/  || constructor\n in <y><z/></y>) this; const constructor;");
tryItOut("if(<><x><y/></x></>) let function::__iterator__ = 0x99, constructor;");
tryItOut("throw StopIteration;");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("try { (*::*.watch(\"__parent__\", new Function)); } finally { throw prop; } ");
tryItOut("with({}) { return {}; } ");
tryItOut("if('haha'.split(<x><y/></x>, 0x99).prototype) throw arguments; else  if ([11,12,13,14].filter) {<y><z/></y>;break M; } else gc()");
tryItOut("L:if( \"\" ) {let <><x><y/></x></>;;var __parent__ =  /x/ ; } else {throw undefined; }");
tryItOut("/*infloop*/for(var __parent__ = ( /* Comment */<x><y/></x> if (@foo)) = this; \n[[1]]; <><zzz>new (Math.sin)()</zzz></>) {switch(false.propertyIsEnumerable(\"prototype\")) { case let (getter = <\t><x><y/></x></>) __proto__: if(new  /x/g ()) {(<x><y/></x>); } else throw {};break;  }/*infloop*/do ({}).__lookupGetter__ while(*::*); }");
tryItOut("this.zzz.zzz;");
tryItOut("if(({__parent__: this })) __noSuchMethod__ else  if (<y><z/></y>.isPrototypeOf(__count__)\r) {constructor = window, __iterator__ = <y><z/></y>; }");
tryItOut("return window;");
tryItOut("{yield; }");
tryItOut("L:if((new Object(this ..  { return <><x><y/></x></> } , ((Function)(false, *)) @ x::__count__) if (([(this.prop) for each (__count__ in 1.2e3) for each (__proto__ in this) if ( /x/ )])))) { if ((new Function.eval([11,12,13,14].map))) /*infloop*/for(__count__ = (__count__.(prototype)); __iterator__ = __count__; ({ __iterator__: __parent__ }) = __count__) {/*infloop*/while(<><x><y/></x></>)prototype;/*for..in*/for([__count__, __proto__]\f = (function ([y]) { })() in this) gc }} else /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  '' ) ;");
tryItOut("M:if( if (undefined) = __noSuchMethod__) /*infloop*/L:while([<><x><y/></x></> if (<x><y/></x>)]){export *;break M; }");
tryItOut("M:if(__noSuchMethod__) { if (<><x><y/></x></>) {(this).__defineSetter__ } else {throw false;yield; }}\n\n");
tryItOut("return ((false += this) && (<x/>)(null, <><x><y/></x></>));");
tryItOut("/*infloop*/for(const __parent__ =  '' ; @foo; <y><z/></y>) {return <x><y/></x>; }\nif(*::*) { if (__iterator__) const __proto__;} else {(<x><y/></x>); }");
tryItOut("gc()\n(<x/>);\n");
tryItOut("while(((__proto__ = <xxx {__noSuchMethod__}={<x/>} />)) && 0)let __parent__ = <x><y/></x>, __proto__ = <y><z/></y>; const prop;");
tryItOut("gc()");
tryItOut("Function");
tryItOut("L:if((p={}, (p.z = *)())) {} else  if ((({__proto__: ((new <x><y/></x>()).__iterator__ = (new Iterator([1], prop)))}))) {} else {throw this; }");
tryItOut("with(<><x><y/></x></>)break M;");
tryItOut("switch(__proto__.__noSuchMethod__ getter= (#0=[<><x><y/></x></>]).watch) { default: break ;break;  }");
tryItOut("const __count__\n");
tryItOut("with(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.__iterator__){let (__noSuchMethod__) { /*for..in*/for(var prop = *::* in *) {;var __parent__ = this, __proto__ = undefined; } }throw <><x><y/></x></>; }{let prototype = 0.1;export __iterator__; }");
tryItOut("while((prototype) && 0){export *;yield; }");
tryItOut("/*for..in*/for([__count__, __count__] =  \"\"  in .2) var prototype;");
tryItOut(";\n/*infloop*/for(__parent__;  '' ; <><x><y/></x></>) __proto__ = <x/>;\n");
tryItOut("do (0/0); while((<x/> && <><x><y/></x></>) && 0);");
tryItOut("L: this;");
tryItOut("this.zzz.zzz;");
tryItOut("if(__proto__.__count__ = arguments) { if ((__proto__.__count__) >= typeof prop = window = (-0), __iterator__;) ; else return;}");
tryItOut("for(let y in []);");
tryItOut("{M:with({__parent__: prototype.prop setter= <><x><y/></x></>}){}export __count__; }");
tryItOut("const __parent__, __noSuchMethod__\n\n");
tryItOut("do {yield @foo;throw <><x><y/></x></>; } while(([({ __proto__: __iterator__, __count__: __iterator__ }), [, , constructor], , ] = (prop = undefined)) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__iterator__ in <y><z/></y>) let __parent__, function::__iterator__;");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("/*infloop*/L:do L:with(false)return; while((new ([1,2,3,4].map)()));");
tryItOut("<><><!--yy--></></>");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __count__: ({ constructor: prop, prototype: __proto__ }), __parent__: __count__ }), __parent__: ({ __proto__: ({ __iterator__: __proto__, __parent__: __iterator__ }), constructor: [, prop, prop] }) }) = ('fafafa'.replace(/a/g, function  __parent__ ([]) { yield this.__defineSetter__(\"__noSuchMethod__\", (true).apply) } )); (new (1 for (x in []))(<y><z/></y>)); null) {return <><x><y/></x></>;export __proto__; }");
tryItOut("/*infloop*/for(const prop; *::* ? __count__ : <><x><y/></x></>; ({ prop: prototype })%=yield <y><z/></y>; += @foo.constructor) (033);");
tryItOut("(window << false)\n");
tryItOut("with({}) __iterator__ = __parent__;");
tryItOut("/*infloop*/M:do throw @foo; while((#2=({__iterator__: this})));");
tryItOut("/*infloop*/M:for(<x/>; null; //h\n#1#) ;");
tryItOut("/*for..in*/for([prop, constructor] = #1# in Error(prop, #1=[#1#])) {/*infloop*/L:for(const constructor = eval(\"(<x><y/></x>);\",  '' ).constructor; typeof (new true()); ((yield gc()))) <x><y/></x> }");
tryItOut("L:if(new (new Function(\"yield;\"))(__proto__ =  /x/g .__defineGetter__(\"__parent__\", function ()constructor))) { if (~(<y><z/></y>.yoyo( /x/ )) ? <x/>.__lookupGetter__(\"prop\") === #2=<><x><y/></x></> : 'fafafa'.replace(/a/g, \t({}).__lookupGetter__)) {let (__iterator__) { return this; }continue \n{} } else {if(false.hasOwnProperty(\"prop\")) { if ( /x/g  += -3/0 === __count__ = <x/>) {\fvar __noSuchMethod__;/*for..in*/for(__parent__ in <y><z/></y>)  } else {let constructor =  '' ; }} }}");
tryItOut("var constructor;return ({})");
tryItOut("with((eval(\"window\", <y><z/></y>).__defineGetter__(\"__proto__\", 'haha'.split))){ { yield this <= this }  }");
tryItOut("try { export prototype; } catch(__count__) { return 0; } ");
tryItOut("if([,,z1] :: <y><z/></y>) { if (* ^  /x/ ) return; else throw <><x><y/></x></>;}");
tryItOut("/*infloop*/for(<x/>;  /x/ ; ({a2:z2})) {yield __noSuchMethod__; }");
tryItOut("{let __noSuchMethod__, __noSuchMethod__;M:if(<><x><y/></x></>()) {gc() } else  if (({__noSuchMethod__: @foo, prototype: undefined })) {export *;break M; } }");
tryItOut("return;");
tryItOut("gc()");
tryItOut("with({}) throw StopIteration;");
tryItOut("switch(((yield this.__defineGetter__(\"prototype\", Math.sin)++))) { case ( /* Comment */<bbb xmlns=\"[[1]]\"> </bbb> + __proto__.(__iterator__.__count__)): if(prop) ; else  if (get) {yield <x/>; }case 8: let (__iterator__, prop = this) {  }break; if(([15,16,17,18].some(Math.pow, <x><y/></x>))) const __proto__, __count__ = <><x><y/></x></>; else  if (this) const __noSuchMethod__;break; case 3: break; case <x><y/></x>.__parent__ = (({a2:z2}) for (__iterator__ in (-0))): L: /*for..in*//* nogeckoex bug 349964 */ for  each(const function::__parent__: <><x><y/></x></> in  /x/ ) Function const __count__;ldefault: return  /x/g .eval(null);break; break;  }");
tryItOut("with(__proto__.propertyIsEnumerable(\"__noSuchMethod__\")){do {const __iterator__ = <><x><y/></x></>, __proto__;window } while((true) && 0);continue M; }");
tryItOut("{return <x><y/></x>;{} }");
tryItOut("L:if(yield <><x><y/></x></>; if (@foo)) {const (__proto__);; } else  if (*.__lookupGetter__(\"__count__\")) return undefined; else throw -1;");
tryItOut("do {export __proto__; } while(( ''  .@ this) && 0);");
tryItOut("L:if(.2) {return; }");
tryItOut("L:with({__iterator__: (this.__defineGetter__(\"constructor\", function () { throw <y><z/></y>; } )\f)})__iterator__");
tryItOut("M:while(([1e-81].filter(function (prototype, __count__)<x/>)) && 0){return; }");
tryItOut("{export *;gc() } const prop;");
tryItOut("/*infloop*/for(__proto__; var prop = prop >>>=(new Error( /x/g )), constructor = (('fafafa'.replace(/a/g, ({}).hasOwnProperty)).__defineSetter__(\"__count__\", __parent__.hasOwnProperty(\"__parent__\") > (yield <x><y/></x>))) >>> <x/>;; (eval(\"constructor.__parent__ setter= @foo\", prop = <><x><y/></x></>))) with({__proto__: window})const constructor;");
tryItOut("if(({prop: <x/>/*\n*/, __noSuchMethod__: * }).propertyIsEnumerable(\"__noSuchMethod__\")) {(0/0)\r; const __noSuchMethod__\nyield this; } else  if ((yield <x><y/></x>)( '' .__parent__ = <y><z/></y>)+=(this.__defineGetter__(\"prototype\", (#1=[#1#]).__defineSetter__))) if(4.) {return; } else  if (__iterator__) yield; else {L:with({__noSuchMethod__: null}){} }");
tryItOut("/*infloop*/while(prop = <y><z/></y>)");
tryItOut("\twhile((#3={a:#3#}) && 0){export function::__proto__;var __noSuchMethod__; }yield;");
tryItOut("with({constructor: (prop = prop).__defineSetter__(\"constructor\", function ()(__noSuchMethod__.(prototype = let)))}){if(eval) { if (<><x><y/></x></>.propertyIsEnumerable(\"prop\")) {yield; } else {(__iterator__);let constructor = <x/>; }}throw __proto__; }");
tryItOut("L:if( '' ) { if (constructor) function(id) { return id };} else yield -1;");
tryItOut("M:if(window) <x>//h\n<y/></x>");
tryItOut("break L; const prototype");
tryItOut("L:do {gc()continue M; } while((prop) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype(__iterator__.__proto__ = [[]]) in __iterator__ = window) {<><x><y/></x></>;\fbreak L; }");
tryItOut("__proto__, __proto__; const __noSuchMethod__\nif(constructor.__parent__ = 5.0000000000000000000000) throw <x><y/></x>; else \fyield;");
tryItOut("if(__proto__ = ( \"\" .__count__ = 1e-81)) { if (#2=<y><z/></y>) return; const __count__;} else yield\n/*for..in*/for(const [__iterator__, __count__] = <><x><y/></x></>.__count__ in *) /*for..in*/for(constructor in true) {;throw true; }/*infloop*/M:while(__proto__-=)return");
tryItOut("/*for..in*/for(var false.__parent__ in (window.propertyIsEnumerable(\"prototype\").unwatch(\"__parent__\"))) {{}\n; }");
tryItOut("do {; } while(((this.__defineSetter__(\"prototype\", 3/0))) && 0);");
tryItOut("export __proto__;\nbreak ;\n");
tryItOut(" /x/g ;");
tryItOut("{continue M;yield <x><y/></x>; }\r");
tryItOut("/*for..in*/for(const constructor =  /* Comment */@foo .. this in 1.3) {throw StopIteration; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__.__noSuchMethod__ in (new (Math.sin)(__parent__))) gc()");
tryItOut("M:if(({}).__lookupGetter__(([1,2,3,4].map)(<x/>), -3/0).propertyIsEnumerable(\"prop\")) { if (undefined ? #1=[#1#] : <y><z/></y>) {(<x/> .@*:: {}); } else {/*for..in*/for(let __parent__ = __noSuchMethod__.__proto__ in 1e+81) {yield; }//h\n/*infloop*/do let __parent__; while(* << [z1,,]); }}");
tryItOut("let (({ __iterator__: function::__proto__, prototype: __iterator__ }), __count__) { for(let y in []); }");
tryItOut("with({function::constructor: .2})yield;");
tryItOut("/*for..in*/for(let __iterator__ = (this.__defineGetter__(\"prop\", 'haha'.split) :: eval(\"prop = function(id) { return id };\", <><x><y/></x></>++)) in (<x><y/></x> ^= <x><y/></x>.__defineSetter__(\"__count__\", [1,2,3,4].map))) {(<><x><y/></x></> /= <><x><y/></x></>).watch; }");
tryItOut("/*for..in*/L:for(var [__proto__, prop] = ((3).apply)(<x><y/></x>) in 3) let __proto__ = 1e4, constructor = <><x><y/></x></>;");
tryItOut("if( '' ) {yield; } else  if (new Math.sin( /x/g )) ;");
tryItOut("__parent__ = __proto__;");
tryItOut("switch((constructor =  /x/g ).__defineSetter__(\"__parent__\", <><>new this()</></>)) { default: break; case 9: M:if(new (function  __proto__ (constructor, __iterator__)\f { ; } )()) { if (0) (0.1); else }\nthrow <x><y/></x> >>>=<x><y/></x>;\nbreak; /*infloop*/while(let (__count__, prototype = *) (function  __proto__ (prototype) { return false } )()){;yield; }break; case -3/0: break;  }");
tryItOut("{{} }");
tryItOut("export prop\n;");
tryItOut("/*for..in*/for([constructor, __parent__] = #2=({__proto__: @foo}) in prop = arguments) {(__noSuchMethod__); }");
tryItOut("/*for..in*/M:for(var [prototype, constructor] = ((gc).call([], ({__parent__: <x/>}), prototype.prop)) in let (constructor = false) 3 ^ this) /*infloop*/for(1.2e3 *= prototype = this; ; new (function  function::__noSuchMethod__ () { export *; } )(({prop: __iterator__,  set \f__iterator__ __proto__ (__noSuchMethod__, constructor) { gc() }  }), [prototype].sort((function\t  __proto__ (__parent__)\f[1]).call))\t) with(<x><y/></x>)yield prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const ({ __count__: (window)(<><x><y/></x></>), __parent__: ({ prototype.constructor: ({ __parent__: __noSuchMethod__ }) }) }) in (yield delete undefined)) {if((function (({ __parent__: ({ __iterator__: __proto__ }) }), ({ prop: __proto__, constructor: __count__ })) { return (3/0.__lookupGetter__(\"__noSuchMethod__\")) } )(this.__defineSetter__(\"__iterator__\", Function))) { if (*::*.constructor *= ((1e-81 if ([,,])))) {{3;return; }yield <x><y/></x>; }} else while((((p={}, (p.z =  '' )()))) && 0)3.141592653589793 }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = (((__parent__.prototype getter= function () { yield <><x><y/>\f</x></> } ).__lookupSetter__(\"prop\")).__lookupSetter__(\"constructor\")) in <><x><y/></x></>) {<><x><y/></x></>; }");
tryItOut("/*infloop*/L:while(((__count__.constructor)(window.eval(<><x><y/></x></>) .. (1e81 ^  /x/ \f), new this())))var __count__, __proto__ = <><x><y/></x></>;");
tryItOut("let prop = <x><y/></x>, __iterator__ = window;");
tryItOut("/*infloop*/for(\fyield new Object(<x><y/></x>, @foo) .. prop = <><\fx><y/></x></>; -<x><y/></x>; (new (function::prototype().valueOf(\"number\"))(<><x><y/></x></>(false, __iterator__), window .@*::  '' ))) {(<x/>).__defineSetter__let __count__; }");
tryItOut("if(function::__proto__.__count__ getter= (<y><z/></y>).call & ( /* Comment */ \"\" )) {L:if(RangeError(__noSuchMethod__, <x><y/></x>)) { if (window.throw(<y><z/></y>)) constructor} else {export *;return 1.3; }(prototype); const __count__; } else  if (window) /*infloop*/do {/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in <x><y/></x>) {{}{} } } while(#0=(--__noSuchMethod__ = __parent__));");
tryItOut("L: this.zzz.zzz\nwith((prototype.__noSuchMethod__ setter= __count__))return;yield;");
tryItOut("switch(<y><z/></y> for (__iterator__ in this)) { default: \tif(*::*) {yield; } else  if (window) ;break; break; break;  }");
tryItOut("M:with({}){ }");
tryItOut("L: {var __iterator__, __noSuchMethod__ = window;yield ({}); }");
tryItOut("/*infloop*/for(({ __iterator__: ({ prop: [] }) }) = +\n[15,16,17,18].filter(@foo, <y><z/></y>).yoyo(); window.propertyIsEnumerable(\"__count__\"); (uneval(-1)).watch(\"__count__\", function (__parent__) { yield window.yoyo(this).propertyIsEnumerable(\"__parent__\") } )) {export constructor; }");
tryItOut("/*for..in*/for(let prop in ( ''  = <x><y/></x>)) var prototype =  /x/g ;");
tryItOut("return\n");
tryItOut("/*infloop*/L:do /*for..in*/for(__count__ = window in (prop = constructor)) return; while(new  /* Comment */window(eval(\";\",  \"\" )));");
tryItOut("/*infloop*/while(<><x><y/></x></>++)/*for..in*/for(let __count__ in <x><y/></x>) ");
tryItOut("return;");
tryItOut("switch([[]].throw(<><x><y/></x></>)) { default: export *;break; case 1:  }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in (yield ({constructor: yield <y><z/></y> }))) {const __parent__, prop = true;( /x/ ); }");
tryItOut("with({prop: __count__}){with({__parent__: <x/>}){__noSuchMethod__ }/*for..in*/M:for(const constructor = constructor in [z1,,]) function(q) { return q; } }");
tryItOut("switch(*.propertyIsEnumerable(\"__iterator__\")) { case 5: break; case window: return;break;  }");
tryItOut("switch((yield return ((uneval(__proto__)));)) { default: yield (__parent__.constructor setter= (<x/>).watch);break; break; case 2: (<x><y/></x>)(-0)\nL:if(false) ; else  if (yield undefined) {yield;return this; }\nbreak;  }");
tryItOut("with(<><x><y/></x></> @ <x><y/></x>[( /x/g  % prototype)])if(((1 for (x in [])))) {;continue ; } else  if (gc().__parent__ = ({a2:z2})) /*\n*/{false }");
tryItOut("with({__iterator__: (<><x><y/></x></> instanceof <x/>)})yield <y><z/></y>;");
tryItOut("L: yield");
tryItOut("/*infloop*/M:while(false.propertyIsEnumerable(\"__parent__\")){break ; }");
tryItOut("(<y><z/></y>);");
tryItOut("/*\n*/while(((eval(\"<x/>\", <><x><y/></x></>))) && 0){export prop; const constructor; }");
tryItOut("yield window;\nreturn;\n");
tryItOut("L:if(true) let prototype, __iterator__ =  \"\" ; else  if (<x/>) export __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <><x><y/></x></>.prop in <x><y/></x>) {gc()const constructor =  \"\" ; }");
tryItOut("");
tryItOut("M:while(((*)[constructor.__proto__ = export prop]) && 0){if((let (__iterator__) <><x><y/></x></>) <= [11,12,13,14].map) { if (1e4.eval(<x><y/></x>)) {{} } else let __noSuchMethod__ =  /x/g ;} }");
tryItOut("/*infloop*/M:do var __proto__, __parent__ = <x><y/></x>; while(__parent__ = (<x><y/></x>.__lookupSetter__(\"__iterator__\")));");
tryItOut("__noSuchMethod__; const prop;");
tryItOut("if(<x/>.unwatch(\"__parent__\")) { if ([[1]])  else return;}");
tryItOut(";\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in null) export *;\n");
tryItOut("{(constructor); }");
tryItOut("/*infloop*/M:do {} while(true >>>=<><x><y/></x><\t/>);");
