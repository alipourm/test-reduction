tryItOut("return  /x/ \nfunction ([y]) { };");
tryItOut("for(let y in []);");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("with({__proto__: __parent__.__count__})export prototype;");
tryItOut("while(((uneval(<x/>))) && 0){; }");
tryItOut("__proto__ = __count__;");
tryItOut("if(function  __iterator__ (__noSuchMethod__)prototype) {(<> { break M; } </>);return;\t } else  if (( \"\" .__defineGetter__(\"__count__\", function (prototype, prototype) { yield this } )))  else continue M;");
tryItOut("let (constructor = <x/>) { export constructor; }");
tryItOut("return 1.2e3;");
tryItOut("/*for..in*/for(__count__ in (('haha'.split)(true)))break ;");
tryItOut("/*for..in*/for(const constructor = this in __parent__) {}");
tryItOut("L:if(*::*) { if (<x><y/></x>) {return; } else {export *;(<x><y/></x>); }}");
tryItOut("/*infloop*/M:while(new [11,12,13,14].filter(<><ccc:ddd>yyy\t</ccc:ddd></>))export prop;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__.__noSuchMethod__ in ({ __iterator__: <x/> }) = 'fafafa'.replace(/a/g, Math.pow)) throw <x/>;");
tryItOut("/*infloop*/for(const prototype = __parent__ = (__iterator__ = prototype =  \"\" ) if (\nconstructor.__noSuchMethod__ = <y><z/></y>); ({ __count__: __parent__ }) = new Array(); new (({}).hasOwnProperty)([15,16,17,18].filter((((1 for (x in []))).call).call, \t__proto__ = window))) {L: {yield; }; }");
tryItOut("constructor getter: (function  __proto__ (__proto__)typeof .2).apply");
tryItOut("L: {<x><y/></x>;{} }");
tryItOut("throw __proto__;");
tryItOut("if((new (@foo)(*::*, __noSuchMethod__))) {export *; } else  if (function::__count__ = x::prototype) {Functionexport __proto__; } else const constructor = true, __count__ = __proto__;");
tryItOut("M:if(window.prop) { if (__iterator__.prop) ({ __iterator__: ({ __iterator__: __iterator__, ({ prototype: function::__proto__ }): ({ prototype: __parent__ }) }) }) else return 1.2e3;}");
tryItOut("/*infloop*/while((\n /x/ ))");
tryItOut("/*for..in*/for(((<><x><y/></x></>)) in __iterator__ = __noSuchMethod__.(((<x/> for (prototype in @foo))))) L: __parent__;if(window) {continue ; } else  if ( /x/g ) {var __parent__ = <><x><y/></x></>; } else let __count__ =  /x/g , __proto__ =  \"\" ;");
tryItOut("yield ( ''  >> __count__);");
tryItOut("let(__iterator__, constructor = __iterator__.__defineSetter__(\"prototype\", eval)) { let(prototype = new Boolean(<y><z/></y>)) ((function(){with({}) [1,2,3,4].slice})());");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(Iterator())(constructor = window);");
tryItOut("M:if(*::*) { if (true) {continue ; }} else {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (<x><y/></x>)()['prototype'] in x::prototype = -3/0\n) (window).watch");
tryItOut("gc()\nexport *;");
tryItOut("L: (<><x><y/></x></>);");
tryItOut("let (({ constructor: __parent__, __count__: __noSuchMethod__ }) = (({\rprop: yield <y><z/></y> >>>=this.__defineGetter__(\"__iterator__\", function(q) { return q; }),  set __noSuchMethod__ constructor (__iterator__) { return true }  })), __proto__) { /*for..in*//* nogeckoex bug 349964 */ for  each(const * in #1#) yield; }");
tryItOut("with(({ set __proto__(prop) { export prop; }  })){with( \"\" ){break M; } }");
tryItOut("(window);");
tryItOut("try { __parent__ = __noSuchMethod__; } finally { throw prototype; } ");
tryItOut("/*infloop*/while((new ({a1:1})(this, 1e-81).__noSuchMethod__)){{}{(<><x><y/></x></>); } }");
tryItOut("/*for..in*/for(let __iterator__.__parent__ in constructor)  ");
tryItOut("if( /* Comment */<x/>) ; else  if ((function  prop (__noSuchMethod__) { return <x><y/></x> } ).call(<><x><y/></x></>, this)) #1#; else gc()");
tryItOut("if(( /x/ .__lookupSetter__(\"constructor\")))  else  if ((({function::__noSuchMethod__: __proto__.yoyo(<x><y/></x>), prop setter: function(y) { yield y; __parent__ = *, constructor = *;; yield y; } }))) {return constructor; } else const __count__ = prototype, constructor;");
tryItOut("/*for..in*/for(var __iterator__.prototype in <bbb xmlns:ccc=\"(new (undefined)(<><\tx><y/></x></>,  /x/g ))\"><ccc:eee></ccc:eee></bbb>.((#2=<x><y/></x>)) .@*:: true) {{{var prototype = undefined; } }if(new String(__noSuchMethod__,  '' )) const prototype = prototype; }");
tryItOut("L:switch(prop = 'fafafa'.replace(/a/g, /a/gi)) { case 8: if((this.zzz.zzz)) { if ((this.__defineGetter__(\"prototype\", true))) (<x><y/></x>);} else {{}__noSuchMethod__; }break; case 7: default:  }");
tryItOut("/*infloop*/L:while(var __noSuchMethod__)export *;");
tryItOut("/*for..in*/for(var ({ __iterator__: ({ __proto__: [({ constructor: prop, delete: prototype }), [__proto__, prototype, __parent__, __iterator__, ], [function::__proto__, ], [__proto__, constructor], ], prop: ({ prop: constructor, __iterator__: ({ __iterator__: __parent__, __parent__: __count__ }) }) }), __parent__: constructor }) =  /* Comment */<><x><y/></x></> in (1.2e3.valueOf(\"number\").__lookupGetter__(\"__proto__\"))) yield;");
tryItOut("d");
tryItOut("do {if(export *;) {\n; } } while(((*.__proto__ = -*)) && 0);");
tryItOut("try { const prototype, __parent__; } catch(__noSuchMethod__) { {} } ");
tryItOut("/*for..in*/for(let (({prop: <x><y/></x> })) in <y><z/></y>) {const prop, __iterator__ = <x><y/></x>;\nreturn 1.2e3;\n }");
tryItOut("/*for..in*/L:for(let constructor in ((function  constructor \t() { yield window.throw([1,,]) } )(0x99.@foo))){var __count__ = <x/>, __noSuchMethod__ = 3.141592653589793; }");
tryItOut("let __proto__ = <y><z/></y>;");
tryItOut("/*infloop*/for([] = (this.__defineSetter__(\"constructor\", (__proto__(undefined, ({a2:z2}))).call)); \ngc(); ((this.zzz.zzz).hasOwnProperty(\"__iterator__\")\t)) {if() {new Function1e+81;/*\n*/ } else  if ('fafafa'.replace(/a/g, @foo)) export *; }");
tryItOut("{<x><y/></x>; }");
tryItOut("{return;if(true) arguments else  if ( /x/ )  else {export constructor;yield; } }");
tryItOut("with({__iterator__: __iterator__})export *");
tryItOut("/*infloop*/for(let __count__; __noSuchMethod__.constructor = (prototype = 1e-81); (<><bbb xmlns:ccc=\"1e+81\"><ccc:eee></ccc:eee></bbb></>++.constructor = window)) var __count__ = <><x><y/></x></>, __parent__ = -0;");
tryItOut("do (*::*); while((<><x><y/></x></>) && 0);");
tryItOut("if(constructor = <y><z/></y>) { if ((yield [11,12,13,14].filter)) export prop;} else yield;");
tryItOut("{/*for..in*/\ffor(__proto__ = (this)(window) = (* < function ([y]) { }) in __iterator__) return; }");
tryItOut("L: { }");
tryItOut("try { continue ; } finally {  } ");
tryItOut("(({a2:z2}))(undefined) = __noSuchMethod__;");
tryItOut("new Function\n/*infloop*/L:for(__parent__ = 3.141592653589793; <><x><y/></x></>; true) return <x><y/></x>;\t\n");
tryItOut("__count__.__parent__");
tryItOut("L:while((((p={}, (p.z = *)()))) && 0){return <><x><y/></x></>;if((Math.pow).call(-0, )) { if (( /* Comment */ /x/g )) yield this; else var prototype, __count__ = __noSuchMethod__;} }");
tryItOut("if(this.zzz.zzz) continue L; else  if (new 'haha'.split(*)) throw 1e-81; else {return; }");
tryItOut("if(<x/>) return;");
tryItOut("/*infloop*/do throw  '' ; while((<x/>.propertyIsEnumerable(\"__noSuchMethod__\")) <<= 3.__noSuchMethod__ =  /x/g );");
tryItOut("return #1=[#1#];");
tryItOut("if(prop) { if (()) {for(let y in [5,6,7,8]) try { export __parent__; } catch(__count__) { yield; } finally { yield; }  } else {export *; }}");
tryItOut("if((<x><y/></x>.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty))) {gcyield; }");
tryItOut("L:if() { if (this.@foo) {do {let __parent__, prototype = <><x><y/></x></>; } while((( \"\"  ? (yield __proto__) : undefined.__lookupGetter__(\"__noSuchMethod__\"))) && 0); } else /*for..in*/for(let prop = ({a1:1}) in -1) {return; }}");
tryItOut("with((yield false)){L:with(__count__)export *; }");
tryItOut("L:if(__noSuchMethod__.prop) { if (eval(\"((<y><z/></y>)[[1]])\", (this.__defineSetter__(\"__count__\",  '' )))) {/*for..in*/for(const __proto__ in ((Function)(__noSuchMethod__.function::__count__ = this)))/*\n*/{export *;return; } } else }");
tryItOut("with({__count__: try { function (__noSuchMethod__, __parent__) { yield  \"\"  }  } finally { <x><y/></x>; } })L: {return; }");
tryItOut("export __parent__;");
tryItOut("/*for..in*/L:for(const __parent__ = <xxx {__iterator__}=\t{'fafafa'.replace(/a/g, @foo)} />.(undefined) in 1e-81) {__iterator__; }");
tryItOut("if(({constructor: ( /x/  <  /x/ ) })) const prototype = 0x99;");
tryItOut("for(let y in []);");
tryItOut("({ __parent__: ({ __iterator__: ({ __proto__: constructor, __parent__: __iterator__ }) }) }) = (((<><x><y/></x></> >>= false & window.propertyIsEnumerable(\"constructor\")))((<x/>)[false]))");
tryItOut("/*infloop*/do {const __iterator__ = window, prop;prop = *::*; } while((prototype .. @foo))");
tryItOut("if(window.propertyIsEnumerable(\"prototype\")) { if (<><{prop}><x><y/></x> </{prop}></>) 1e-81;} else __proto__, __count__ = [,,];");
tryItOut("with({constructor:  goto }){continue L;yield null; }");
tryItOut("L: gc()");
tryItOut("for(let y in [5,6,7,8]) yield ;");
tryItOut("/*infloop*/L:for(<><x><y/></x></>; <x><y/></x>; <y><z/></y>) {(prop); }");
tryItOut("with(((p={}, (p.z = yield *::*)())).watch(\"constructor\", function (__proto__, constructor)(--__proto__|=<x><y/></x>)))/*for..in*/for(const ({ constructor: __noSuchMethod__, __count__: __noSuchMethod__ }) = false in null) export *;");
tryItOut("__parent__ = __proto__;if(<><x><y/></x></>) { if ([,]) {const __iterator__, @foo; } else {gc() }}");
tryItOut("throw @foo\n/*infloop*/M:for(<ccc:ddd> </ccc:ddd>; *::*; <x><y/></x>) ");
tryItOut("const __count__ = false;");
tryItOut("/*for..in*/M:for(var __count__ in (('haha'.split)([[1]])))export *;");
tryItOut("if(<xxx {__iterator__}={ /x/ } />.(new Array())) yield  /x/ \n");
tryItOut("{prop;export constructor; }");
tryItOut("let(prototype = this = this) ((function(){with({}) { return; } })());");
tryItOut("L: ");
tryItOut("L:if((get.[*],  '' )) {continue M;/*infloop*/do  while(<x><y/></x> /= this); } else  if ([1,2,3,4].map(__proto__, <><x><y/></x></>)) {export *;/*infloop*/for(let __iterator__; @foo; <x/>) {var __iterator__, prototype = (-1); } } else /*for..in*/for([__parent__, function::each] = !<><x><y/></x></> in <x/>) {{}return 1.2e3; }");
tryItOut("throw StopIteration;");
tryItOut("with(return.watch(\"__iterator__\", Math.sin).prototype = new Function){/*for..in*/for(const __count__ = <y><z/></y> in @foo) constructor = <><x><y/></x></>;throw  /x/g ; }");
tryItOut("switch(( /x/ .propertyIsEnumerable(\"x::prototype\"))) { default: case 1e-81: yield (<x><y/></x>)[<y><z/></y>];break; if((undefined.@foo)) {return; }break; break; break;  }");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/for(__noSuchMethod__; false.throw(*); (__count__)) {{}Math.pow }\nvar __proto__ = window, prop;\n");
tryItOut("for(let y in []);");
tryItOut("{L:if( '' ) {(new Function(\"throw [,];\"))yield false; } else 1e+81 }");
tryItOut("throw __count__;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const ((__proto__))((new (<><x><y/></x></>)())) in ((eval)((@foo * <><x><y/></x></>))))L: {var __parent__ = <y><z/></y>;yield __parent__; }");
tryItOut("try { with({}) throw StopIteration; } catch(constructor) { throw StopIteration; } finally { return *::*; } ");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/for(([1,2,3,4].map).call((nullwith({constructor: [,]}){return this;constructor, __parent__; }), window << [,], <><x><y/></x></>);  /x/g .__noSuchMethod__; <x/>++.throw(0x99.prop)) if([15,16,17,18].map((1 for (x in [])), 1.3)) {{}gc() } else  if ( /* Comment */<><x><y/></x></>) {gc() } else {;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(({ prop: __parent__, __proto__: constructor }) in *) break M;");
tryItOut("/*infloop*/L:while((false *= (eval(\"yield;\", true))))window;");
tryItOut("/*infloop*/\fL:do __proto__; while(this.__defineSetter__(\"__noSuchMethod__\", (prototype).watch))");
tryItOut("if([] & *\f) {return;yield; } else  if (<><x><y/></x></>getter.prototype) gc() else export *;");
tryItOut("export *; const prototype;");
tryItOut("/*infloop*/while(@foo)L:do export __proto__ = (-0); while((prop) && 0);");
tryItOut("return;");
tryItOut("try { this.zzz.zzz; } finally { with({}) yield  /x/g ; } ");
tryItOut("if(prop%=<x/>) { if (__proto__ = (#2=({constructor: (-0)})))  else {(0x99);throw *::*; }}");
tryItOut("/*for..in*/for(var constructor = ((*::*)[window]) in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> <<= 0 ? <x><y/></x> : <x><y/>\t</x>.__iterator__) {return; const __iterator__; }");
tryItOut("M:switch(__iterator__.hasOwnProperty(\"prototype\")) { default: break; const __iterator__ = 0x99; }");
tryItOut("L: L: {(<x><y/></x>).__defineSetter__ }");
tryItOut("{ }");
tryItOut("/*for..in*/for(let prototype in (((yield p))((({__proto__: eval(\"yield arguments ? prototype.valueOf(\\\"number\\\") : __proto__ >= <x><y/></x>\",  '' ) })))))\t{{} }");
tryItOut("/*infloop*/L:for(constructor.__noSuchMethod__ setter= (window).watch; eval(\"return;\", prop.__proto__); (this.zzz.zzz >>> this) + <x/> ^  '' ) {return;yield; }");
tryItOut("/*infloop*/for([/*\n*/[, ({ prototype: [, ] }), []], , , ({ __proto__: [] })] = ({ set __iterator__(prop) { yield (new prototype = 1.2e3( \"\" .__defineSetter__(\"__iterator__\", [1,2,3,4].map))) }  }); ([15,16,17,18].filter(<x><y/></x>, <x><y/></x> >>>=*::*)); ({ constructor: __iterator__ }) = #2=[null] - (uneval(<><x><y/></x></> ? 0x99 : __count__))) {;if(*) {constructor = <x><y/></x>; } else  if (__proto__) {(<y><z/></y>); } }");
tryItOut("switch(this) { default:  }");
tryItOut("for(let y in []);");
tryItOut("with({__iterator__: new String(yield true)}){/*for..in*/for(let prop in <x><y/></x>)  }");
tryItOut("yield;");
tryItOut("/*infloop*/for(constructor; (({function::__noSuchMethod__: <y><z/></y> })); (0.propertyIsEnumerable(\"prototype\") :: prop)) ");
tryItOut("{continue M;return; }");
tryItOut("L:if(__noSuchMethod__.__iterator__ setter= function (__count__, [({ __proto__: prop, __noSuchMethod__: constructor }), constructor, [, constructor, __parent__], <x></*\n*/y/></x>, function::__parent__]) { return true; } ) /*for..in*/for(var constructor.__proto__ in ((1e4)())) {prop, prop = *; } else  if (false) {if(\n /x/g ) { if ((function ([y]) { })().unwatch(\"__iterator__\")) (<><x><y/></x></>); else const __parent__, __iterator__ = <x/>;} }");
tryItOut("/*infloop*/for(<xxx {constructor}={__proto__.__parent__ = Array(this, ({}))} />.(let (__iterator__: (this.__defineSetter__(\"__parent__\", function  prop () { return; } ))) __iterator__.let getter= function(q) { return q; }); [z1].eval(#3={a:#3#}) &= __parent__.__proto__ = <x><y/></x>; <x/>) /*for..in*/for(const x::prototype in (p={}, (p.z = -0)())) return;");
tryItOut("if(__parent__) {{}__proto__ =  '' , __proto__ = <x/>; } else  if (@foo) {(__parent__);([1,2,3,4].map).apply } else throw <x><y/></x>;");
tryItOut("if((prototype = this)) { if (window if (this)) <y><z/></y>} else {gc() }");
tryItOut("yield <><x><y/></x></>\n");
tryItOut("export __noSuchMethod__;\t\nlet __iterator__;\n");
tryItOut("while((([this || <y><z/></y>])) && 0){return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var [prop, [, ({ constructor: constructor, __noSuchMethod__: ({ __iterator__: __parent__, __noSuchMethod__: undefined }) }), ]] = /a/gi() && __proto__ = this in <><x><y/></x></>++) (*);");
tryItOut("if(<><x><y/></x></>) { if (<y><z/></y>) {gc() }} else yield @foo;");
tryItOut("L: L:with({__parent__: <><x><y/></x></>.propertyIsEnumerable(\"__count__\")[*.__proto__]}){evalreturn <><x><y/></x></>; }");
tryItOut("let (function::__iterator__, prototype) { /*for..in*/for(const __iterator__ = (yield undefined || __count__) in  /x/ ) {let prototype, __count__ = <x/>; } }");
tryItOut("/*for..in*/M:for(const [constructor, constructor] = __iterator__ in *) {return;<><x><y/></x></>; }");
tryItOut("{/*infloop*/for(void (<x><y/></x>)[false]; this.__defineGetter__(\" '' \", function (__noSuchMethod__) { return undefined } ); <x/>()((<y><z/></y>.unwatch(\"__count__\")))) yield @foo; }");
tryItOut("L: export __parent__;");
tryItOut("let(__noSuchMethod__ = (<y><z/></y>.constructor = 1e81), prop =  \"\" ) { with({}) { throw this; } ");
tryItOut("/*infloop*/for(const (prop = <><x><y/></x></>(__proto__, ((({}).hasOwnProperty)(function::__parent__, 1e-81)) %= this)).constructor = @foo.valueOf(\"number\"); prop = (@foo |= <y><z/></y>); yield ().call(__noSuchMethod__ = <x/>, this)) {\tif(try { let ; } catch(constructor) { yield; } ) {;yield  '' ; } else  if (null) {(<x/>);break ; }'/*for..in*/for(let __noSuchMethod__ in ((<x/>.__defineSetter__(\"__count__\", prop))\n(new ([,])(true))))export *;\t }");
tryItOut("with(<x><y/></x>){var prototype, constructor; }");
tryItOut("(<x><y/></x>);gc()\n");
tryItOut("export *\n const __iterator__;");
tryItOut("/*for..in*/L:for(prototype in ((eval)(())))/*for..in*/for(let prop in  /x/ ) gc()");
tryItOut("if( import ) default: case 3: __count__ = <x/>;break; if(prop) {let __proto__, __parent__ = <x/>;<x/>; } else \rreturn [];break; let __iterator__ = 3/0; else  if ((\tprop = __count__).__defineGetter__(\"prop\", (true['<x><y/></x>']))) {/*for..in*/for([__proto__, __proto__] = (-0) in  \"\" ) (this); }");
tryItOut("function(q) { return q; }");
tryItOut("/*infloop*/L:do (<><x><y/></x></>); const __count__; while(((0)[[z1,,]] == *::* - window));");
tryItOut("gc()");
tryItOut("/*infloop*/ for (({ constructor: [constructor, constructor, __proto__, ], __proto__: x::prop }) in (<x><y/></x>.__defineSetter__(\"prop\", function () { return __noSuchMethod__ } ))) for (window.watch(\"prototype\", function (__noSuchMethod__) { yield this } ).prop in *::*) if ( /x/g )");
tryItOut("let (__count__ = __proto__, prototype) {  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in #1=[#1#]) {export __parent__;yield <>__parent__</>; }");
tryItOut("{yield <x><y/></x>;throw this; }");
tryItOut("yield {}; const __proto__\n");
tryItOut("{continue ;if(__count__.__lookupSetter__(\"__parent__\")) <ccc:ddd> </ccc:ddd> else  if ( /x/g .constructor) {1e-81;(1e+81); } else throw [z1,,]; }");
tryItOut("<><x><y/></x></>;");
tryItOut("__noSuchMethod__;");
tryItOut("if(#0=<y><z/></y> >> undefined) {return; }");
tryItOut("let (__noSuchMethod__ = [,], __parent__ = <x><y/></x>) { throw  '' ; }\n");
tryItOut("M:if(yield) {(1 for (x in [])) } else  if (<><xxx {__parent__}={.eval(window)} /></>)  else @foo;");
tryItOut("with(({})){yield \tprop; }");
tryItOut("/*infloop*/L:for(var __parent__ = *::* && <x/>++; <y><z/></y>; ) return;");
tryItOut("yield (!@foo);\n/*for..in*/for(<x/> ? undefined : 4. in __iterator__) {L:if(<><x><y/></x></>) __iterator__ }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in __noSuchMethod__) yield #1=[#1#];");
tryItOut("{/*for..in*/L:for(let prototype in <><x><y/></x></>) export __iterator__;yield;[null]; } const __iterator__;");
tryItOut("var __count__, __parent__ = 3/0;");
tryItOut("with({}) throw StopIteration;");
tryItOut("(*::*);");
tryItOut("/*infloop*/do {var __parent__;\f } while([]);");
tryItOut("return;");
tryItOut("export __parent__\ngc()\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in true) {}");
tryItOut("switch(<>[RangeError(*) for each (__parent__ in <><xxx {prop}={(window >>= <><x><y/></x></>) -= window[__noSuchMethod__]} /></>) if (<x><y/></x>)].filter(({}).hasOwnProperty)</>) { case 5: M:do {/*infloop*/for(({ __iterator__: prototype }) = *//h\n__iterator__.constructor; constructor+=0x99 += new Function(<x><y/></x>); this << window) {yield <x><y/></x>;yield <x/>; } } while((this & <x><y/></x>) && 0);break; case  '' : default: /*infloop*/while(null){__iterator__, __noSuchMethod__ = <y><z/></y>; }break; with(false >>> null){return;var __proto__ = <><x><y/></x></>; }break; {}case 3: yield *::*;{{}yield function(id) { return id }; } }");
tryItOut("L: const \f__count__, __proto__;");
tryItOut("/*for..in*/for(var [__iterator__, constructor] = {} in <><xxx>{prototype}</xxx></>) /*for..in*/for(const __count__ = arguments in  \"\" ) {break ;; }");
tryItOut("return this.__defineGetter__(\"constructor\", 1e-81);");
tryItOut("/*for..in*/for(const prop.__noSuchMethod__ in ((/a/gi)((<y><z/></y>.watch(\"__noSuchMethod__\", (Math.sin).call))))){throw <x/>; } const __iterator__;");
tryItOut("with({__count__: <><x><y/></x></>})");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("/*infloop*/while(this){var __count__ = window, __count__; }");
tryItOut("let (__iterator__, prototype = <><x><y/></x></>) { ; }");
tryItOut("/*infloop*/while((({a1:1}).__lookupSetter__(\"__noSuchMethod__\")))L: yield function ([y]) { };");
tryItOut("/*for..in*/for(prototype in (([1,2,3,4].slice)(__parent__.__proto__\f))){}");
tryItOut("export __count__\n");
tryItOut("with(-{}){let (__noSuchMethod__ = <><><x><y/></x></></> ? <x><y/></x>.__defineSetter__(\"__proto__\", (function(q) { return q; }).apply)-- : (constructor\n) instanceof (* += this), ({ __iterator__: getter })) { {throw window;continue ; } } }");
tryItOut("/*infloop*/for(const prototype; arguments.__defineGetter__(\"constructor\", [1,2,3,4].slice); (true)(__count__, true)) /*for..in*/M:for(var (true)( /x/ ) in ((({}).__lookupGetter__)((__proto__ = yield  '' ))))export *;/*\n*/");
tryItOut("/*infloop*/do {if( \"\" ) export constructor; else  if (*) function::__iterator__ = function ([y]) { }; } while([15,16,17,18].some((++[1]).watch, ((typeof <x><y/></x>) <<= (/)));");
tryItOut("while((window) && 0)gc()\nreturn <><x><y/></x></>;\n");
tryItOut("with((<y><z/></y>.hasOwnProperty(\"__proto__\")))with({get: __iterator__})yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype.('fafafa'.replace(/a/g, function  __count__ () { yield false } )).__count__ in (<x><y/></x>)(@foo)) {export *;yield; }");
tryItOut("while(((Function)((__parent__.constructor getter= (1 for (x in []))))) && 0)with(__count__)export prop;");
tryItOut("if(({__proto__:  /x/  })) {return; } else  if (++[<x><y/></x>]) {{} }");
tryItOut("if(<!--yy-->) { if ((#1=({__iterator__: <><x><y/></x></>}\f))) return;} else {export *; }");
tryItOut("with({__count__: [11,12,13,14].filter})/*for..in*/M:for(let prop in window) {Math.pow(<x><y/></x>); }");
tryItOut("let([, ({ __count__: <ccc:ddd></ccc:ddd> }), , __proto__, ], [] = __proto__.__parent__ = true) { yield prop = window.@foo;");
tryItOut("/*infloop*/for(__proto__; <y><z/></y>; 1e+81) {yield;{} }");
