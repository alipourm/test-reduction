tryItOut("throw __parent__;");
tryItOut("prototype = __parent__;");
tryItOut("\flet (({ __count__: ({ constructor: __proto__ }), constructor: ({ __proto__: __proto__, window: __proto__ }) }), prop = function(id) { return id }.__proto__) { ; }");
tryItOut("this.__defineGetter__(\"__noSuchMethod__\", (null).watch) +  /* Comment */window.hasOwnProperty(\"prototype\")");
tryItOut("if((*.__noSuchMethod__).watch(this.isPrototypeOf(window))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const  { return (p={}, (p.z = false)()) } ['__parent__'] in  { return let (__count__, prop = __proto__) [1] } ) (<x><y/></x>); } else { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in window &= <x><y/></x>) throw *::*;");
tryItOut("/*infloop*/for(eval(\" /* Comment */window\", this); null.__lookupGetter__(\"prototype\"); get.(((1 for (x in []))).call([yield [z1,,]].filter(this), ))) /*for..in*/for(__proto__ in __iterator__+=(window.__defineGetter__(\"__noSuchMethod__\", undefined))) {/*infloop*/\rdo gc() while(({a1:1}));if(RegExp()) {; } else  if (<y><z/></y>.__iterator__ = arguments) yield; }");
tryItOut("gc()\n;");
tryItOut("{/*infloop*/while(Number())__count__ = constructor;{} }");
tryItOut("/*for..in*/for(let constructor = <x><y/></x>.(<><x><y/></x></>) in (uneval(<x><y/></x> -= 1.2e3))) /*infloop*/for(const [, , __noSuchMethod__] = new (function(y) { yield y; ; yield y; })(); eval(\"__count__ = -0\", new (({}).hasOwnProperty)(new prop(__parent__(<x><y/></x>), 0/0))); [11,12,13,14].some) export __proto__;");
tryItOut("while((<><bbb xmlns:ccc=\"(({constructor: (-0) }))\"><ccc:eee></ccc:eee></bbb></> && this.__defineGetter__(\"try { throw  \\\"\\\" ; } finally { (1e4); } \", true)) && 0)yield new 'haha'.split(-0, (function ([y]) { })());");
tryItOut("L: {/*for..in*/for(let  ''  = (1.2e3.watch(\"__proto__\", new Function)) in this) {{} } }");
tryItOut("let (__iterator__, constructor) { export *; } const constructor;");
tryItOut("/*infloop*/while((prop(delete = __parent__) = undefined in prototype))<xxx {__iterator__}={prop} />");
tryItOut("if(undefined in @foo) export constructor; else return;");
tryItOut("switch((p={}, (p.z = this)())) { case 7: ;break;  }");
tryItOut("L: let(prototype = (({}).hasOwnProperty)(__proto__ = <><x><y/\n></x></>)) { return;");
tryItOut("return ([15,16,17,18].sort(function  prop (prop)constructor, [<y><z/></y> for (let in  \"\" )]) >>>=(<bbb xmlns=\"function(id) { return id }\"><ccc:ddd><x><y/></x><x><y/></x></ccc:ddd></bbb> for each (__iterator__ in __iterator__) if (-1)));");
tryItOut("while((([<y><z/></y>])) && 0)do this; while((<x><y/></x>) && 0);");
tryItOut("switch((__parent__.constructor) = this.zzz.zzz) { default:  }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("if([ /x/g  for each (__noSuchMethod__ in #3={a:#3#})]) { if (<y><z/></y>) {yield; } else {; }}");
tryItOut("if(this.zzz.zzz) return;");
tryItOut("/*infloop*/for(const constructor; false; <><x><y/></x></>) const prototype = this;");
tryItOut("L:if(((eval(\" for each (__iterator__ in <x><y/></x>) for each (__iterator__ in @foo)\", <x/>)) === (__noSuchMethod__ = ({ function::prototype: __iterator__ })))) /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in <x><y/></x>) let __iterator__, __proto__ = 1.3;gc() else {;let __noSuchMethod__ = arguments, __parent__; }");
tryItOut("/*infloop*/for(const constructor; new ([[[]]]); this.__defineGetter__(\"prop\", function(y) { yield y; gc(); yield y; })) break M;");
tryItOut("export __count__;");
tryItOut("gc()\n{export *; }\n\n");
tryItOut("export __iterator__;");
tryItOut("throw <><x><y/></x>\t</>;\n;\n\n/*for..in*/for(var __count__ = (p={}, (p.z = [1])()) in this) {break L;; }");
tryItOut("/*infloop*/for((yield (window)(<x><y/></x>).yoyo((let (prop = ) function(y) { yield y; {}; yield y; }))); (this.zzz.zzz.yoyo((prop =  /x/g )())); [((__proto__.__defineSetter__(\"prop\", try { return window; } catch(prop) { throw [,]; } )).*)].some(function  prototype (constructor, prototype) { yield (__count__.(__count__)) } )) {return (this.@* *= __iterator__);return <x/> ===  \"\" ; }");
tryItOut("if(<y><z/></y> !== prop) {{} } else  if (((#3={a:#3#}).__defineSetter__)()) <!--yy--> else { }");
tryItOut("if((\n(-1))) { if (false.eval(<>__noSuchMethod__</>)) {gc()return; } else export prop;}");
tryItOut("if(__parent__) {\nlet 'haha'.split;; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("__noSuchMethod__ = @foo;");
tryItOut("let prop;");
tryItOut("/*infloop*/M:for(({ __iterator__: ({ __count__: [[constructor], ({ __count__: ({ __count__: [, , __noSuchMethod__] }) }), , , ], __iterator__: ({ __parent__: [, delete, ] }) }) }) = @foo & 1e4 .@*:: ((( /* Comment */<><x><y/></x></>) for (constructor in __parent__))); (prop%=window) < (@foo <<= *::*).yoyo((prop+=<x/>).@*); ( ''  >>=  /x/  -= <x/> % *)) if(*::*) gc() else  if (constructor >= __proto__) return; else break L;");
tryItOut("/*infloop*/M:do {M:if(<y><z/></y>.@*) {yield <><x><y/></x></>;return; } else {return; /x/ ; } } while(__parent__(<x/>, <x><y/></x>));");
tryItOut("/*infloop*/for( /* Comment */@foo; typeof *::*; ([11,12,13,14].map)) ;");
tryItOut("0");
tryItOut("if((new RegExp(constructor)) !==  /* Comment */@foo.valueOf(\"number\")) gc() else  if ((1e+81 ? <x><y/></x> : @foo)[this.zzz.zzz]) with(__iterator__:  (window); } { return <x><y/></x>.unwatch(\"prop\") } ) else {break L;if(null) { if (([1,2,3,4].slice())) const __noSuchMethod__; else {#1#; }} }");
tryItOut("/*for..in*/L:for(__proto__ = @foo >>>=this in __count__) gc()");
tryItOut("const __iterator__, __parent__\n");
tryItOut("(prop);");
tryItOut("/*infloop*/for(({ prototype: __count__, __noSuchMethod__: ({ prototype: ({ __noSuchMethod__: constructor, undefined: __count__ }), __parent__: ({ __parent__: __proto__ }) }) }) = \n<><x><y/></x></>; +window; this /= this) {const prototype = this; }");
tryItOut("/*infloop*/for(var __count__ = (yield true.hasOwnProperty(\"__iterator__\").yoyo(({__parent__: arguments }))) in constructor = window; (p={}, (p.z = ((-0))( /x/g ) = ([<x/> for each (__count__ in *::*)]))()); this.__defineSetter__(\"constructor\", (({}).__lookupGetter__).apply)) {}");
tryItOut("/*for..in*/for([__noSuchMethod__, __proto__] = null in <x/>) {}");
tryItOut("M:if((let.__count__)) {export *;{export __iterator__; } } else {const __proto__, __noSuchMethod__;{(<><x><y/></x></>); } }");
tryItOut("/*for..in*/for(const __iterator__ in  '' ) yield;");
tryItOut("with(new String(((@foo(true)).@*), <><x><y/></x></>.watch(\"__proto__\", function(q) { return q; })))if(<x><y/></x>) {var constructor, __noSuchMethod__;yield <><x><y/></x></>; } else  if ( /x/g ) { '' ;var constructor = function::__proto__, constructor = <x><y/></x>; } else { /x/ ; }");
tryItOut("/*infloop*/for(__parent__|=this; (<x><y/></x>.(window)); (p={}, (p.z = <x/>;)())) {export __count__; }");
tryItOut("M:if(prop = (yield __noSuchMethod__)) /*infloop*/for(prototype; @foo; ({}).hasOwnProperty(\"function::__count__\"))  else  if (new <><x><y/></x></>.prototype = <x><y/></x>( \"\" )) {{}\fthrow __noSuchMethod__\nyield [[1]]; } else {if(((1 for (x in [])))()) {switch(<y><z/></y>) { case -0: continue ;break;  } } else  if (Function) let __iterator__ = 1e4, constructor = <x><y/></x>; }");
tryItOut("{;(<x><y/></x>); }");
tryItOut("/*infloop*/while(__proto__+=(p={}, (p.z = __noSuchMethod__.throw(this))())){gc()/*infloop*/while(*::*.__lookupSetter__(\"yield\")){(<x><y/></x>); } }");
tryItOut("L: {const prop =  /x/g , let = 0x99;export *; }");
tryItOut("window");
tryItOut("yield <><x><y/></x></>;\f");
tryItOut("if(false) {__proto__, __noSuchMethod__ = null;gc() } else {yield; }");
tryItOut("try { return; } finally { with({}) { let(__count__) { for(let y in [5,6,7,8]) try { ; } finally { var __proto__ = prototype; }  }  } ");
tryItOut("constructor = __count__;");
tryItOut("export __parent__; const __count__;");
tryItOut("for(let y in []);");
tryItOut("with({__count__: undefined.isPrototypeOf(<><x><y/></x></>)})export *;");
tryItOut("/*for..in*/M:for([__proto__, __noSuchMethod__] =  /x/  in window) let __iterator__ = <x/>;");
tryItOut("if(({__iterator__ setter: function  constructor (__iterator__, __noSuchMethod__) { var prop, constructor; } , __count__: <x><y/></x> })) { if (__iterator__ = new (function(y) { yield y; (@foo);; yield y; })(*)) return; else {yield (function  constructor (__parent__, prototype) { let __iterator__ = __count__; } )([].hasOwnProperty(\"prototype\"), this); }}");
tryItOut("let __iterator__ = __noSuchMethod__, __proto__;\nreturn {};\n");
tryItOut("L:if(null .@x:: <y><z/></y>) prototype =  /x/ ; else yield;");
tryItOut("with({prototype: __noSuchMethod__})prop");
tryItOut("with({}) gc()");
tryItOut("if(*) {var __proto__, __count__ = <x>\f<y/></x>;{} } else  if (*) /a/gi else {}");
tryItOut("/*for..in*/for(const prototype = prop = <><x><y/></x></> in constructor) {if(<x><y/></x>) { if (prototype) ( /x/g ); else {export __parent__;gc() }} }");
tryItOut("/*for..in*/L:for(var __proto__ = *::* in \n#2=[<x><y/></x>]\f) if(({__parent__: this})) { if (__proto__ = <><x><y/></x></> ? ({__parent__: 1e-81}) : <><x><y/></x></>) {throw prototype;gc() }} else ");
tryItOut("export *;");
tryItOut("/*infloop*/M:while(( /* Comment */<><x><y/></x></>))<x><y/></x>\r");
tryItOut("__proto__ = prop;");
tryItOut("L:while((({prop: ++#1=[#1#], __noSuchMethod__: -<x><y/></x> })) && 0)");
tryItOut("return (function(y) { yield y; gc(); yield y; })(0/0.hasOwnProperty(\"__noSuchMethod__\"));");
tryItOut("return;");
tryItOut("let (prototype = (({__iterator__ setter: (true).apply })) :: ([1,2,3,4].slice(<x/>, 4.)), prop = \f(3.141592653589793 / <y><z/></y>)()) { /*infloop*/L:for(let __iterator__; arguments; __iterator__) {{} } }");
tryItOut("L:if(__proto__%=this) { if (constructor = window) {; }} else __proto__ = null, __iterator__ = <><x><y/></x></>");
tryItOut("let ([, , , prop, prototype] = true) { prop; }");
tryItOut("with(<>\r<x><y/></x></>){export *;export __count__; }");
tryItOut("function (__iterator__) { return <x><y/></x> } \ngc()");
tryItOut("switch(eval(\"<><x><y/></x></>\", *::*)) { default: export *;break; break;  }/*for..in*//* nogeckoex bug 349964 */ for  each(<y><z/></y>.prop in (<y><z/></y> == window)) {/*infloop*/for(const __iterator__; @foo--; prop = __proto__) this;let prop = prototype, prop = (function ([y]) { })(); }");
tryItOut("let (constructor) { export __iterator__; }");
tryItOut("M:if(function(y) { yield y; throw <x><y/></x>;; yield y; }(__noSuchMethod__ = constructor,  /x/ )--) { if (constructor) {yield; } else {if(__parent__ = .2) { if ((4. for each (__proto__ in *))) {(({}).hasOwnProperty).apply__proto__ } else {yield ({a2:z2}); }} }}/*\n*/");
tryItOut("/*infloop*/while(Math.sin ^ let (prop = <><x><y/></x></>, prototype = undefined) \rprop)prototype");
tryItOut("{let get = *, __parent__ = window; }");
tryItOut("if(__iterator__) return;");
tryItOut("/*for..in*/for(const prop = this.hasOwnProperty(\"constructor\") in [15,16,17,18].some(function (__count__) { yield this } ,  '' )) {/*infloop*/for([z1]; this;  \"\" ) {} }");
tryItOut("const __parent__;function  __proto__ (prototype) { continue ; } ");
tryItOut("L:with(<><bbb xmlns=\"(prop = [[1]]++)\"></bbb></>)with(<><x><y/></x></>)__iterator__ = -1;");
tryItOut("throw null;");
tryItOut("/*infloop*/for(new  '' (); (1 for (x in [])); (({__noSuchMethod__ getter: prototype }))) if(-1) { if (window) {yield window; }} else {throw null; }");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x>) {prototype;*::*; }");
tryItOut("let(yield = (__noSuchMethod__ = @foo).__lookupGetter__(\"__noSuchMethod__\")) ((function(){let(({ __iterator__: __iterator__ }), ({ __parent__: __count__, constructor: each })) { for(let y in [5,6,7,8]) try { var prototype = _; } catch(__noSuchMethod__ if __proto__) {  } finally { gc() } })());");
tryItOut("/*infloop*/while(<xxx>{__parent__}</xxx>)return;");
tryItOut("do L: {let (constructor, __proto__ = <x><y/></x>) { (-0); }([[]]); } while((__count__.__parent__ setter= (({__count__ setter:  ''  })).watch) && 0);");
tryItOut("throw StopIteration;");
tryItOut("M:if(eval(\"( /x/ )(<x/>)\", (#1#)[[z1,,]])) { if ((__count__ = null)) {Math.sin }} else const  { export prop; } , __count__ = function::__noSuchMethod__;");
tryItOut("if(4. ||  /x/g ) {break L; } else  if (.2) gc() else break M;");
tryItOut("yield <y><z/></y>\nexport __parent__;");
tryItOut("/*infloop*/L:for(const [[({ prop: __count__, __proto__: prototype })], __parent__] = eval(\"export *;\", arguments); (('fafafa'.replace(/a/g,  /* Comment */<x/>)).unwatch(\"__iterator__\")); __count__ = undefined.isPrototypeOf(([15,16,17,18].map(({}).hasOwnProperty, )))) yield <><x><y/></x></>;");
tryItOut("do {M:do break ; while((<x/>) && 0);export *; } while((let (__iterator__, __noSuchMethod__) null) && 0);");
tryItOut(" const prop;");
tryItOut("/*infloop*/for(const [(* ?  \"\"  : undefined , true)].sort(Math.sin); new window(); <x/>) const {} = null;");
tryItOut("/*infloop*/for(let __count__; ( '' )[<y><z/></y>]--; void function ([y]) { }) /a/gi");
tryItOut("/*for..in*/for(var [__count__, __proto__] = null in *) {export *; }yield;");
tryItOut("/*infloop*/for(let constructor = ({ get __noSuchMethod__ __parent__ (__proto__)<x/>, __parent__ getter: (({}).hasOwnProperty).call }); 'fafafa'.replace(/a/g, Function); new function  prop (__parent__, __count__) { return; } ()) return;");
tryItOut("let(({ __noSuchMethod__: prop }), function::__noSuchMethod__ = ({a2:z2})) ((function(){return -undefined;})());/*infloop*/M:do {return; } while(((yield [1])));");
tryItOut("do {{}while(( \"\" ) && 0)export *; } while((({x::__iterator__ getter: x::__count__, __noSuchMethod__ setter: ({}).__lookupGetter__ })(((<x><y/></>)[<><x><\ny/></x></>]))) && 0);");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = eval(\"/*infloop*/for(<x/>; <x><y/></x>; prototype) {export *;break ; }\", []) in (__noSuchMethod__ =  '' )) {continue ; }");
tryItOut("__count__ = constructor;");
tryItOut("let prop, prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.constructor in  /* Comment */5.0000000000000000000000) {export __noSuchMethod__;(__parent__) = (uneval(__parent__)) }");
tryItOut("/*infloop*/for(const prototype; <x><y/></x>; ((p={}, (p.z =  /x/ )()))) \tyield <><x><y/></x></>;");
tryItOut("with((__noSuchMethod__.__count__ = (p={}, (p.z = #0=@foo)()))){(<><x><y/></x></>);/*for..in*/for(var x::__noSuchMethod__ in ((function()*::*)(<x><y/></x>))){let __parent__ = __iterator__; } }");
tryItOut("L:do export *; while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/do /*for..in*/for(var function::__parent__ = (eval(\"yield  /x/g ;\", [,,])) in *) {{}var constructor, constructor = <x/>; } while(undefined ? this.__defineGetter__(\"__iterator__\", gc) : <><bbb xmlns=\"__iterator__, __noSuchMethod__\"> </bbb></>);");
tryItOut("/*for..in*/for(const __noSuchMethod__(this(<><x><y/></x></>, window)) in ((({ __iterator__: __iterator__, __proto__: prototype }) = ( '' )[this])(#0=[function::prop]))){ }");
tryItOut("M:with(<x><y/></x> *= <x><y/></x>)(__noSuchMethod__);");
tryItOut("yield 0/0;");
tryItOut("switch(<><zzz>(__count__.prototype = false).@*</zzz></>) { case [11,12,13,14].filter.__count__ = __noSuchMethod__.__defineGetter__(\"__count__\", [1,2,3,4].map):  }");
tryItOut("return __noSuchMethod__ = __count__ = <y><z/></y>;");
tryItOut("/*infloop*/do /*infloop*/for(__proto__ = *::*; this; ({})) export *; while(__noSuchMethod__.constructor.__iterator__);");
tryItOut("if(~window << window.eval(arguments)) default: break;  else  if ((new Iterator(this, <x/>))) prototype =  /x/g , constructor;");
tryItOut("let(prototype, __iterator__ = <>__parent__</>) ((function(){export __parent__;})());");
tryItOut("/*for..in*/L:for(let __parent__ in constructor.constructor)  const default: <y><z/></y>;gc()break; (null).watch;");
tryItOut(" '' ;");
tryItOut("/*infloop*/for((uneval(constructor(window, <x><y/></x>) ? __count__ = ({a1:1}) :  \"\"  >= this)); (prototype-=let __noSuchMethod__;)[yield <x><y/></x>]; (this.__defineGetter__(\"__noSuchMethod__\", (function(y) { yield y; (#1#);; yield y; }).call) && <x><y/></x> @ __iterator__)) /*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in false) {/*for..in*/for(let [__proto__, __count__] =  \"\"  in  /x/g ) {yield *::*; } }");
tryItOut("if((((function (__parent__)<x><y/></x>.* @ __proto__ = prototype).call(window.isPrototypeOf([]), (!undefined))) ? ( \"\" .isPrototypeOf(<y><z/></y>) %= false.__defineGetter__(\"__count__\", ((__iterator__ = true)).__defineSetter__)) : (let (__count__ = <><x><y/></x></> >>> this) (prop.valueOf(\"number\"))))) M:switch((\nprototype)) { case 7: /*for..in*/for(let prop in <x><y/></x>) {<x/>;gc() } } else  if (<x><y/></x> instanceof (new (3.141592653589793)(0, <x><y/></x>))) {var __count__;(<x><y/></x>); } else {continue ; const __parent__; }");
tryItOut("switch() { case 1: default: {const __iterator__ = <><x><y/></x></>; }case (@foo || ): M:if(undefined) __parent__ = [,,], __proto__ =  '' ; else  if (this) {export *; } }");
tryItOut("/*for..in*/M:for(const __count__ = <><x><y/></x></> in <><x><y/></x></>) <x><y/></x>;");
tryItOut("return;\nyield <x/>;\n");
tryItOut("if([false].filter((function  function::__proto__ (prototype) { var __count__ = *::*, __parent__; } ).call))  else  if (<xxx {prop}={true} />\n) {if(<x><y/></x>) {return prototype;; } else  if (({})) throw function::x::constructor, __count__; else {throw <><x><y/></x></>;export prototype; }[[]]; }//h\n else /*for..in*/for(let __parent__ in function ([y]) { }) function(y) { yield y; ; yield y; }");
tryItOut("throw 1.3");
tryItOut("if(window) { if (<x/>) gc()} else {throw  \"\" ; }");
tryItOut("this.zzz.zzz;");
tryItOut("{ } }");
tryItOut("with({constructor: (((<y><z/></y> <<= (new <><x><y/></x></>())).prop = (*::*\n)) for (__proto__ in ) for (__count__.__parent__ in false ^= undefined))}){throw null; }");
tryItOut("{if(prototype.prototype) { if ((__iterator__.unwatch(\"[z1]\"))) {let __noSuchMethod__, prop;yield *; }} else ; }");
tryItOut("/*for..in*/for([prop, prop] = __iterator__ in [[]]) {gc()gc() }");
tryItOut("return ({});");
tryItOut("{}\n");
tryItOut("for(let y in []);");
tryItOut("<bbb xmlns:ccc=\"__parent__ = __iterator__-=<x><y/></x> ? *::* : __noSuchMethod__.isPrototypeOf(#3={a:#3#})\"><ccc:eee></ccc:eee></bbb>");
tryItOut("if([eval(\"<x><y/></x>\", .2) for each (__count__ in <><x><y/></x></>) for ((__proto__) in window)\t for (prototype in function ([y]) { })]) const prop = window;");
tryItOut("/*infloop*/for(let prototype = @foo; 0/0; prototype) {case (__iterator__.__parent__): yield <x/>;break;  }");
tryItOut("/*for..in*/for(var __proto__ = ({}) in ({__proto__: 1e-81, prototype: *::* }).*) /*infloop*/for(({ prop: constructor }) = Date(); \t(<x><y/></x>.(__iterator__)); null.__count__ = this) {; }");
tryItOut("if(this.__defineSetter__(\"__proto__\",  \"\" ) if ((<x/>.watch(\"prototype\", function () { return #3={a:#3#} /= 0.1 } )))) { if (({ get __proto__(__parent__, prop) { return; } , constructor setter: ({}).__lookupGetter__ })) L: (<x/>);} else if((__noSuchMethod__ = __parent__)) {{}return -3/0;\n } else  if (@foo.@foo) {yield;gc() }");
tryItOut("const constructor; const __proto__;");
tryItOut("/*infloop*/L:for(let (<><x><y/></x></>)( /x/g ) = (yield (({ set __noSuchMethod__(getter)#1# }))\f); new 'haha'.split(constructor = prop, __parent__ = prototype, <x><y/></x>); ((-1))) {export __parent__;var __iterator__, __parent__; }");
tryItOut("/*for..in*/M:for(let __parent__ in (((1 for (x in [])))(this)))if(new (this.zzz.zzz.watch(\"prop\", Function))(<x/> .. prototype)) {yield;{} }");
tryItOut("with({constructor: 0}){const __count__, __noSuchMethod__;break M; }");
tryItOut("{/*infloop*/do {prototype; } while(<><x><y/></x></> in [,,](<x><y/></x> .. @foo, <><x><y/></x></>));Math.pow\n }");
tryItOut("throw StopIteration");
tryItOut("{; }");
tryItOut("");
tryItOut("with({}) yield __parent__.prop = <x><y/></x>;");
tryItOut("/*for..in*/for((Date(undefined)).prop in [ /x/ ].filter(eval)) case 9: [1,2,3,4].mapbreak; let (__noSuchMethod__) { /*infloop*/while(*.valueOf(\"number\"))return <y><z/></y>; }break; default: (<x><y/></x>)\nvar __iterator__ =  \"\" if(true) continue L; else gc()");
tryItOut("function  prop () { return undefined } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in (new Function).call((constructor.constructor = Function()).__lookupGetter__(\"constructor\"), )) const __proto__ = , prop = Object(<x><y/></x> <<= <x/>, this);");
tryItOut("L: {/*infloop*/do { } while(*);\nexport *;\n[1,2,3,4].slice\n\nwith({prototype: *::*}){( /x/g );yield 1e4; } }");
tryItOut("/*for..in*/for(const <><x><y/></x></> in ((((<y><z/></y>).watch).call)(constructor.__noSuchMethod__ = this.hasOwnProperty(\"__noSuchMethod__\"))))const prototype;(arguments);");
tryItOut("prototype = prototype;");
tryItOut("if(*) { if (undefined) {yield;break ; }} else {break L;var prototype, prop; }");
tryItOut("M:if((<></> :: @foo.eval(<><x><y/></x></>))) {export *; } else  if (<y><z/></y> << ({a2:z2})) throw  \"\" ;");
tryItOut("/*infloop*/do {export __parent__; } while((++[z1]));");
tryItOut("{yield;export __count__; }/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x><y/></x>) {gc()[1,2,3,4].map }");
tryItOut("export __noSuchMethod__; const __noSuchMethod__;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = 1e-81 in !__parent__) {[1,,]yield; }\n");
tryItOut("/*infloop*/for(var __count__ = [(((RegExp(this)))()) for each (prototype in ) for each (constructor in undefined.__defineGetter__(\"constructor\", <x><y\t/></x>)) for each (__proto__ in @foo) for each (prototype in  \"\" ) for (__proto__ in <x><y/></x>)]; [15,16,17,18].filter((1 for (x in [])), __parent__); 3.__lookupSetter__(\"function::constructor\") ^ (<x><y/></x>.(5.0000000000000000000000) :: ~<><x><y/></x></>).eval((uneval(((<x><y/></x>).call).call(-3/0, *))))) {throw window; }");
tryItOut("{{}continue L; }");
tryItOut("with({}) { @foo.constructor = __iterator__; } ");
tryItOut("/*infloop*/for(__noSuchMethod__ = <y><z/></y>.@*; (new Function(\"gc()\")).eval(false); this) (window)");
tryItOut("if((__noSuchMethod__)) while((( \"\"  if ([]))) && 0){; (<x/>)(<x><y/></x>), <y><z/></y> export *; }'");
tryItOut("yield\n");
tryItOut("if(prototype.__count__) \f{yield; }");
tryItOut("/*for..in*/for(const (true)( /x/g ) in 0.1) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in constructor) /*for..in*//* nogeckoex bug 349964 */L: for  each(var (#1=[#1#])(<x/>) in window) <x><y/></x>;");
tryItOut("if(Error((__noSuchMethod__ = 1e+81)).watch(\"prop\", function ()((p={}, (p.z = __iterator__)())))) function  __iterator__ (__proto__) { <><x><y/></x></> } ");
tryItOut("var __proto__ = 0/0, __iterator__ = <y><z/></y>\nprototype; const __count__;");
tryItOut("yield function::__count__ = undefined.hasOwnProperty(\"__proto__\");");
tryItOut("{{case yield \tlet (__proto__, __count__ =  '' ) __proto__.(*): break; case #1=[[15,16,17,18].sort((new Function(\"yield <x></></x>;\")), <x/>)]: var __parent__ = [[]], __iterator__ = prototype;return; } }");
tryItOut("/*for..in*/for(var [[({ \fconstructor: ({ prop: __iterator__ }) }), , __count__, , ({ __iterator__: constructor, prototype: [] })], prop] = \t([15,16,17,18].some((new Function(\"(this);\")), <x><y/></x>)) in @foo for (__parent__ in null)) ( /x/ )\n");
tryItOut("/*for..in*/L:for(var getter = eval(\"yield 3;\", false) in <x><y/></x>) export __count__;");
tryItOut("with((constructor.__noSuchMethod__ = this.eval(window)))(<x><y/></x>);");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz");
tryItOut("{/*infloop*/M:for(<x/>.isPrototypeOf(@foo); <x><y/></x>.(({a1:1})); this.__defineSetter__(\"__count__\", (*::*).watch)) {let constructor, __noSuchMethod__; }/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <><x><y/></x></>) export __iterator__; }");
tryItOut("M:if(([[15,16,17,18].some((new Function(\"let (__noSuchMethod__, prototype) { return; }\")), this.zzz.zzz) if (<x/>)])) {yield -0; } else {{} }");
tryItOut("/*for..in*/for(var setter in (((void  /x/ .yoyo((__parent__\f %= 3) *= false.eval(<x/>))))(delete -0)\f))/*infloop*/while(@foo)(eval).call");
tryItOut("/*infloop*/for(((new Function(\"var prop;\"))).call(constructor.isPrototypeOf( \"\" ), (<x><y/></x>.@foo)); <x><y/></x> ? {} : <x><y/></x>; \fnew ( /x/g ).__defineSetter__(<><x><y/></x></>)) {}");
tryItOut("L:do \f while(((uneval((false)[#1=[#1#]]))) && 0);");
tryItOut("if( \"\" .__lookupSetter__(\"function::prototype\")) {__parent__; } else  if (window.__iterator__) {; }");
tryItOut("if((function ([y]) { })()) gc() else  if (@foo) ; else {;\rlet __count__, __count__; }");
tryItOut("/*infloop*/while(yield (<x><y/></x> = undefined)){return;do {{} } while((*::*) && 0)\t; }");
tryItOut("/*infloop*/while(<><x><y/></x></>)prototype = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("while((true) && 0)L: { \"\" ;return; }");
