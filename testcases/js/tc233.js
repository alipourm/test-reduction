tryItOut("M:if(__proto__ = <y><z/></y>) {yield; } else throw this\n");
tryItOut("let (__iterator__ = ([({ __parent__: ({ __iterator__: __count__ }) })] = (uneval(({prototype: __parent__}))).prototype = prop.prototype: #3={a:#3#} *= <x/> setter= 0x99)) { do {Function } while((.hasOwnProperty(\"prop\")) && 0); }");
tryItOut("with(<x><y/></x>){; }");
tryItOut("switch(this) { case (Boolean(false).__count__ = ([,,z1] for each (constructor in 4.))): {}break; const __parent__ = this;break; case (<x><y/></x>.(<x/>).propertyIsEnumerable(\"__noSuchMethod__\")): (new RegExp()); }");
tryItOut("for(let y in []);");
tryItOut("if(prototype = *::*) const prop; else throw arguments;");
tryItOut("M:with({__proto__: window})L: with({}) {}");
tryItOut("do var __iterator__ =  '' , __noSuchMethod__ = null; while((<><x><y/></x></> |=  /x/g ) && 0);");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("L: {var __iterator__ = __noSuchMethod__;\f/*for..in*/for(const constructor = constructor.prop in <x><y/></x>.(<x><y/></\tx>)) {return;gc() } }");
tryItOut("{}L:if(<><x><y/></x></>) {__iterator__ = [,,z1]; } else  if (window) {throw prop; }");
tryItOut("with([(eval(\"(<x/>.__defineSetter__(\\\"__iterator__\\\", 1.3))\", [<><x><y/></x></\f>].some(function(q) { return q; })))].sort((new Function(\"const __noSuchMethod__ = this, constructor;\"))))/*infloop*/\tdo while((window) && 0){let __iterator__ =  \"\" ;prototype; } while(#1#);");
tryItOut("/*for..in*/for(var default: gc()break; break;  in ((eval)(<x/>))){export prop; }");
tryItOut("{{} }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = ({__proto__: window }) in eval) let constructor = #1=[#1#], __parent__; const __proto__\n/*for..in*/\rfor(const prototype in new (function ()/*\n*/ { yield -0 } )()) //h\nif(<><x><y/></x></>) { if () {(new Function).callexport *; }} else {{}{} }");
tryItOut("L: continue M;\nexport prototype;\n");
tryItOut("throw StopIteration;");
tryItOut("throw StopIteration;");
tryItOut("M:if(0/0 &= <x><y/></x>) {let __noSuchMethod__, getter;const __proto__; } else  if (new null(@foo)) {yield <x/>; }");
tryItOut("if(([1,2,3,4].map)((p={}, (p.z = yield window)()), this)) /*for..in*/for(let __count__ in yield;) export __parent__; const __parent__; else  if ([@foo(let (prop = try { gc } catch(prototype if (function(){})()) { throw <><x><y/></x></>; } catch(prototype) { export prototype; } finally {  /x/ ; } ) (<x><y/></x> || <x><y/></x>), *) if (__noSuchMethod__ = function(id) { return id })]) {export __iterator__;export __proto__;/*for..in*/M:for(const prototype = (String(true, <x/>)) in <><x><y/></x></>) break ;\f }");
tryItOut("/*infloop*/do const __parent__, __iterator__ = <x><y/></x>; while(<x><y/></x> <<= <y><z/></y>.yoyo(new undefined & [,]()));");
tryItOut("/*for..in*/M:for(const (__proto__ = __proto__.(1.3)) = #2=[* ? @foo : <><x><y/></x></>] in [,,]) {};");
tryItOut("L: {return; }");
tryItOut("{M:with({__parent__: __iterator__(__parent__, *)})/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [1]) Math.powwith((<x><y/></x><!--yy--> ^ <y><z/></y>)){yield;yield; } }");
tryItOut("/*for..in*/for(__iterator__ in ((function(q) { return q; })(<x><y/></x>)))gc()");
tryItOut("/*infloop*/do ; while(<><x><y/></x></>);");
tryItOut("yield ({ prototype: __iterator__, __proto__: __count__ }) = false - <x><y/></x>;");
tryItOut("/*for..in*/L:for(let __parent__ in  /x/g ) ");
tryItOut("/*infloop*/for((!(({ set __parent__() { return; } ,  set __parent__ __proto__ (constructor, __parent__) { (<x/>).__defineSetter__ }  }))).hasOwnProperty(\"__noSuchMethod__\"); (#2=(<x><y/></x> >>>=-0) *= (@foo | ([<x><y/></x>].filter(<><x><y/></x></>)))); ({__iterator__: <><x><y/></x></>, __count__: <><x><y/></x></> })) (this.__defineGetter__(\"__proto__\", <><x><y/></x></>));");
tryItOut("do {} while((<xxx {__iterator__}={(uneval(<x/>))} />.((__count__\t = <><x><y/></x></>.prop))) && 0);");
tryItOut("M:if(++this\n) { if ((new (<x/>.isPrototypeOf(1e-81))(<x><y/></x>.watch(\"__proto__\", new Function)))) if(prototype) {return; } else {export *;if(__count__) {yield  /x/ ; } else export __iterator__; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in *::*) (-3/0); const __count__;");
tryItOut("if('fafafa'.replace(/a/g, ({}).__lookupGetter__) .@ new Exception(@foo, <><x><y/></x></>).constructor = (constructor = __proto__ = @foo)) {export *;constructor.prototype } else  if (__iterator__) {}");
tryItOut("if((yield (<><x><y/></x></> %= *::*).__lookupGetter__(\"__iterator__\"))) { if ((let (constructor = __parent__ = *, __parent__ = __noSuchMethod__) [false if ( \"\" )] >>>=())[[11,12,13,14].filter]) {yield;\nlet prop;\nthrow __iterator__; }} else continue L;\t\n");
tryItOut("while((033 ? * : <x><y/></x>) && 0){const <x><y/></x>;\f__count__: <><x><y/></x></> }\fconst __parent__ = @foo, __count__ =  \"\" ;");
tryItOut("M:if([11,12,13,14].map) {if((this.__defineSetter__(\"__parent__\", /a/gi))) { if (({a1:1})) yield *::*; else function (constructor, __proto__) { continue ; } } } else  if (eval(\"constructor\",  \"\" [033].__count__ = constructor = [,,])) return ((uneval(( /* Comment */[,]))));\n");
tryItOut("if(<><x><y/></x></> = <x/> | (gc())) const __count__, __noSuchMethod__ = <><x><y/></x></>; else  if ((<x><y/><\n/x>.( /x/ )) >> (\n[[]])) return;");
tryItOut("/*for..in*/for(const prop = (eval(\"{}\", (new function(y) { yield y; const constructor =  \"\" , prop = function::__iterator__;; yield y; }()))) in false) /*for..in*/for(const let in -1) {let constructor = <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <><x><y/></x></>) let __iterator__, __iterator__;");
tryItOut("for(let y in [5,6,7,8]) export *;\nyield;\n");
tryItOut("let prop = <x><y/></x>, prop;");
tryItOut("/*for..in*/L:for(let __parent__ in (('haha'.split)\f(true.__lookupSetter__(\"prototype\").valueOf(\"number\")))){with({__noSuchMethod__: this}){throw (-1);return null; } }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in @foo) {return; } const __iterator__;");
tryItOut("{return <x/>; }");
tryItOut("switch(new (__proto__)()) { default:  }");
tryItOut("let (__count__ = <x><y/></x>, __parent__ = @foo) { let __count__, __proto__ = @foo; }");
tryItOut("let(constructor = window, prop) ((function(){(window);})());");
tryItOut("if((__iterator__ = (p={}, (p.z = 0x99)()))) {false = __iterator__; }");
tryItOut("if(\f<><x><y/></x></>) __parent__; else  if (<y><z/></y>) {export *; }");
tryItOut("with((yield delete = undefined))export __parent__;");
tryItOut("do {prop;const prop; } while((prototype = <><x><y/></x></\t>) && 0); const constructor;");
tryItOut("L:while((__proto__ = <><x><y/></x></>) && 0){yield;yield true; }");
tryItOut("/*infloop*/for(let __proto__ = __count__ = <><x><y/></x></>; new ( \"\" )(<y><z/></y>).yoyo('fafafa'.replace(/a/g, eval)); *::* = \nnew function (__iterator__) { yield prototype } ( H window, undefined)) let __noSuchMethod__, __parent__ = *::*;");
tryItOut("var __count__, prop\n");
tryItOut("/*for..in*/for(const constructor = (yield ({__parent__: __noSuchMethod__}).watch(\"prop\", function(y) { yield y; return null;; yield y; }).@foo) in (prototype = __count__())) {if(1e-81) {((-0)); }export constructor; }");
tryItOut("with({}) { __proto__ = __iterator__; } ");
tryItOut("let(constructor, constructor) { prop = __iterator__;");
tryItOut("{prop, constructor = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(({ __iterator__: prototype, __iterator__: [] }) = (this)[<x><y/></x>]; (({__proto__: * }).@*); eval(\"prop\", (new [1,2,3,4].slice(#3={a:#3#})))) /*for..in*/L:for(var \f__count__ = window in true) {export *;const constructor, prototype = <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\f for  each([__proto__, , constructor] in @foo) /*for..in*/for(var [__iterator__, __count__] = this in null) {function (__noSuchMethod__, __noSuchMethod__) {  } export *; }");
tryItOut("__proto__ = prop;");
tryItOut("with(({ set __proto__ prop (__iterator__) { yield constructor }  }))undefined");
tryItOut("/*for..in*/M:for((__noSuchMethod__) in ((<x/>.hasOwnProperty(\"constructor\"))((__parent__.<x><y/></x>))))do {(*::*);return window; } while((true) && 0);{}");
tryItOut("__iterator__: (({a2:z2}) -= <><x><y/></x></>)");
tryItOut("L: {try { (true); } finally { export *; } return 1e+81; }");
tryItOut("/*infloop*/for((eval(\" /x/  >>= null\", __parent__.prototype = <x/>)); ((yield arguments)) ? export * :  \"\"  <= false; ({yield  \"\" ; }.watch(\"__noSuchMethod__\", <y><z/></y>))) const constructor = <y><z/></y>;");
tryItOut("/*infloop*/M:for(var constructor; (<><x><y/></x></>)[3/0]; 0/0) (this)\nbreak L;");
tryItOut("L: ;");
tryItOut("/*infloop*/for(__count__.prototype getter= function  __count__ (prop) { return (yield undefined)\n } ; 1e81; (void false || true)) {var constructor = __parent__, constructor;gc() }");
tryItOut("\fif(*) { if ([]) {let prototype = ({a2:z2});; } else yield <x><y/></x>;}");
tryItOut("/*for..in*/L:for(let  /x/g  in ((gc)(this.__defineSetter__(\"constructor\", __noSuchMethod__))))break ;");
tryItOut("/*for..in*/for(const [prototype, __noSuchMethod__] =  /x/g  in <><x><y/></x></>) (*::*);\n;\n");
tryItOut("/*infloop*/for(prop; <y><z/></y>[0];  \"\" ) {gc() }\n");
tryItOut("return;");
tryItOut("if([11,12,13,14].filter) ; else  if (1e81.throw(<x><y/></x>)) export __iterator__;");
tryItOut("for(let y in [5,6,7,8]) return __proto__: <y><z/></y>;");
tryItOut("/*for..in*/for(var [prototype, __noSuchMethod__] = __count__ =  /x/ .__defineGetter__(\"prop\", function(y) { yield y; export *;; yield y; }).throw([15,16,17,18].sort([1], -0 ^ <y><z/></y>)) in ) {/*infloop*/while( /x/g ){export constructor;yield false\n/*infloop*/do  while(__count__);\t } }");
tryItOut("(this)(this) = __parent__;");
tryItOut("do var __count__, __iterator__ = 0/0; while((([<><x><y/></x></> if (<x><y/></x>)])) && 0)\nexport *;");
tryItOut("prototype = __proto__");
tryItOut("/*infloop*/for(__proto__; (-0); prop%=*::*) {var __proto__ = <y><z/></y>;break M; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (eval(\"yield;\", constructor)).__proto__ = <><x><y/></x></> .@*:: __count__) if(let (__parent__) function::prop) { if (window)  else {__proto__, __parent__yield; }}");
tryItOut("this.zzz.zzz;");
tryItOut("L:while(([11,12,13,14].filter) && 0){{}/*infloop*/for(<><x><y/></x>\t</>;  /x/ ; ({})) var constructor, prototype = this; }");
tryItOut("/*infloop*/for(prop; <x/>; <x><y/></x>) var prototype, prototype;");
tryItOut("let prop = <x><y/></x>;\n(this);\n");
tryItOut("let (__count__, __parent__) { return  /x/ ; }");
tryItOut("/*for..in*/for(__iterator__ in ((function () { return <><x><y/></x></> } )(<x/>))){function  __noSuchMethod__ ()<x><y/></x>function(q) { return q; } }");
tryItOut("");
tryItOut("if((<x><y/></x>.(({a2:z2}))([prop].sort(function  prop (__proto__)<><x><y/></x></>)))) { if (({ __noSuchMethod__: ({ __iterator__: /*\n*/__count__, __parent__: prototype }) }) = <x><y/></x>.(<y><z/></y>)) {M:if(({constructor setter: Function })) {export __parent__\t; } else  if (((function ([y]) { })().__lookupSetter__(\"constructor\"))) yield *; } else {/*infloop*/while(window)gc() }}");
tryItOut("let(__parent__) ((function(){with({}) let(__parent__, constructor = #1#) { try { return\ncatch(set) { yield; }  } finally { return; } })());");
tryItOut("/*for..in*/M:for(var __count__ in 1.2e3 for each (__proto__ in __iterator__)) {Math.powexport __iterator__; }");
tryItOut("try {  } finally {  '' ; } ");
tryItOut("/*infloop*/L:for((({ constructor: [] }) = ({ __count__: ({ __noSuchMethod__: prototype, __proto__: [] }) })); (this.__defineGetter__(\"__count__\", (1 for (x in [])))) , (@foo.__lookupSetter__/*\n*/(\"__iterator__\"))--((new RegExp(<><x><y/></x></>, @foo)), (constructor)); ((1 for (x in [])))(((function  __noSuchMethod__ (__proto__) { yield 3 } ).call(__parent__, )), default: #3={a:#3#}.prototype = __iterator__{})) if((prototype.__count__ = <y><z/></y>)) {return #1=[#1#]; }");
tryItOut("if([,,]) '{ if (prop) ((.2).watch).call else throw <x/>;");
tryItOut("/*infloop*/do with(__parent__ = *)export *; while(new Date(__proto__));");
tryItOut("return (++[[]]);");
tryItOut("M:with({prototype: <x><y/></x>.(<x><y/></x>)}){;export constructor; }");
tryItOut("L: return;");
tryItOut("M:switch(([15,16,17,18].some(Math.sin, *::* || prototype))) { default: ; }");
tryItOut(" set prop __count__ ()true");
tryItOut("( '' );");
tryItOut("/*infloop*/do {while((__iterator__) && 0){let prototype, constructor; } } while(({a1:1}) ? 3.141592653589793 : false);");
tryItOut("return <y><z/></y>; const __noSuchMethod__\nL: continue M");
tryItOut("while((window) && 0){[1,2,3,4].map } const __count__;");
tryItOut("L: {export *; }");
tryItOut("with(([z1,,] != (new Function(\"(1e-81);\")).unwatch(\"__noSuchMethod__\"))){yield this.__defineSetter__(\"prototype\", (null).__defineSetter__); }");
tryItOut("/*for..in*/for(let //h\n__count__ in ((function (prop, __proto__) { export prop; } )(new \n*::*((-0) ,  '' )))){export constructor; }");
tryItOut("yield -1;");
tryItOut("/*for..in*/for(var (<x/>)(true) in [11,12,13,14].sort) throw __parent__;");
tryItOut("/*for..in*/for(const __proto__ =  in <x><y/></x>.(this)) {throw constructor; }");
tryItOut("return eval(\";\", <y><z/></y>);");
tryItOut("M:do {__parent__ = <x><y/></x>, __proto__;\ncontinue L; } while((__proto__ >>  \"\" \n) && 0);");
tryItOut("/*infloop*/while(try { (constructor); } finally { var constructor, __count__; } .@foo)return;");
tryItOut("/*infloop*/L:do L:if(prop.prop =  '' ) yield this; else  if (([@foo.__lookupSetter__(\"prototype\") for (* in  '' )])) {gc()false } while([constructor ? [1] : <x/>].filter(Math.sin));");
tryItOut("with({}) { with({}) for(let y in [5,6,7,8]) let(__count__ = (p={}, (p.z = <><x><y/></x></>)()), prototype) ((function(){return;})()); } ");
tryItOut("/*infloop*/for(({ constructor: prop }) = __count__; #2=[<x/>]; ({}).hasOwnProperty()) {yield window;throw <x><y/></x>; }");
tryItOut("with({__iterator__: (__count__ = <x><y/></x>)});");
tryItOut("try { for(let y in []); } catch(__parent__ if (function(){yield ({__proto__: __noSuchMethod__ = this, ({ constructor: __count__ }):  { return  ''  ? this : * }  });})()) { (new [1,2,3,4].map(<x><y/></x>).__iterator__ = [window |= <><x><y/></x></>])(((0.1 instanceof *::*) / <><x><y/></x></>)) } catch(__iterator__ if <xxx>{__noSuchMethod__}</xxx>) { yield __iterator__; } ");
tryItOut("if(( /* Comment */3.141592653589793)) { } else  if ([@foo].some(-0)) {throw *; } else {{}const prop = [z1]; }");
tryItOut("yield window;");
tryItOut("throw -0;\nyield;\n");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/M:for(var __iterator__; \nwindow ? __proto__ : <><x><y/></x></>;  if ( \"\" )) return __count__;");
tryItOut("/*infloop*/L:for(constructor; (#1#.throw(prop)) &= (let (prop = <y><z/></y>) function::__proto__); 1.3) {with(<y><z/></y>)let __iterator__ = -3/0; }");
tryItOut("if((null[ \"\" ])) { if (this.__defineSetter__(\"__proto__\", (1 for (x in [])))) throw 1e+81\n else {;__noSuchMethod__ = [[1]]; }}");
tryItOut("@foo const __noSuchMethod__;");
tryItOut("/*for..in*/M:for(prop.prop in null\n) {if(let (prop = constructor, prototype) <x><y/></x> / this) {__iterator__;continue L; }L: yield [1,,]; }");
tryItOut("/*for..in*/for(const [__iterator__, prototype] = \n@foo in (({__iterator__: [1] }))) /*infloop*/M:do {continue ; } while(<x/>);");
tryItOut("for(let y in []);");
tryItOut("(0x99)\n\n");
tryItOut("with(((prop.__count__)())){export *; }");
tryItOut("/*infloop*/for(const __iterator__ = <x><y/></x>; <>__count__</>; <x><y/></x>) {(<x><y/></x>); }");
tryItOut("with({}) __count__ = constructor;");
tryItOut("if((p={}, (p.z = 'fafafa'.replace(/a/g, (/a/gi).call))()).yoyo(<y><z/></y>)) {L:if(<><x><y/></x></>) { if (<y><z/></y>) {; }} else (<x><y/></x>);L: {const __parent__ = true; } } else  if (#3={a:#3#} <<  /x/g ) {/*infloop*/L:for(let __proto__ = prototype; <y><z/></y>; true) eval } else continue ;");
tryItOut("/*infloop*/M:while([15,16,17,18].\ffilter(({}).hasOwnProperty, (#1=#1=[#1#])))( /x/ );");
tryItOut("L:if( /* Comment */<><x><y/></x></> ^= (yield ((-1) :: [z1]))) { if (prop = <x/>) return (-0);} else yield;");
tryItOut("if('fafafa'.replace(/a/g, ({}).hasOwnProperty)) /*for..in*/for(var constructor = __proto__ = ({a1:1}) in [,]) {(this);yield; } else  if (function::__iterator__%=(<><x><y/></x></>\n)) {let (prototype = <><x><y/></x></>, __count__ = function(id) { return id }) { ; }return undefined; } else for(let y in []);");
tryItOut("constructor");
tryItOut(" else {if(<y><z/></y> != <y><z/></y>) { if (false++) {0.1; }} else export *;with({__proto__: constructor}){<><x><y/></x></>;return <x><y/></x>\f; }\f }");
tryItOut("throw __parent__\t;");
tryItOut("/*for..in*/M:for(var constructor = (this.zzz.zzz) % ((Function).call(<><x><y/></x></>, )) in <x><y/></x> ? Function : undefined) {gc()if(__iterator__) throw <x><y/></x>; else  if (<x><y/></x>) {;{} } }");
tryItOut("/*infloop*/for(const __count__; ((this @  \"\" )[<><x><y/></x></>]); ) {L: return this; }");
tryItOut("if([1]) {throw undefined;gc() } else  if (*::*) {; } else yield <><x><y/></x></>;");
tryItOut("this.zzz.zzz;");
tryItOut("with({__count__: <><x><y/></x></>['prototype'] = __noSuchMethod__ = <y><z/></y>}){if((constructor = 3.141592653589793)) {__iterator__ = this; } else  if ([z1] instanceof __parent__) gc() }\n");
tryItOut("throw StopIteration;");
tryItOut("let(prop = <><bbb xmlns:ccc=\"(__proto__++)\"><ccc:eee></ccc:eee></bbb></>) ((function(){with({}) { for(let y in [5,6,7,8]) yield; } })());");
tryItOut("L: {if(window) { if (({ get __count__(__proto__, __iterator__) { const __parent__ = this, constructor; const __noSuchMethod__; }  }) !=  /x/ .valueOf(\"number\")) /*infloop*/do {return {}; } while(prop); else export constructor;} }");
tryItOut("M:if(window.watch(\"__proto__\", function  prop (__parent__, prop)(-0))) {continue ;const __proto__, __count__; }");
tryItOut("for(let y in [5,6,7,8]) (window);");
tryItOut("{let ({ __parent__: __proto__ }) = ((p={}, (p.z =  /x/g )()));; }");
tryItOut("M:if(*) {return <><x><y/></x></>; } else  if ([1,,]) export constructor;\n\n");
tryItOut("(prop = <><x><y/></x></>);");
tryItOut("throw window\n1");
tryItOut("if(<x/>)  /x/ ; else {return; }");
tryItOut("if(eval(\"export __iterator__;\", {}).__defineGetter__(\"('fafafa'.replace(/a/g, ((/a/gi).apply).call))\", function  prototype (__proto__) { ; } ).propertyIsEnumerable(\"__iterator__\")) yield  /x/ ; else {function  __parent__ (__iterator__)function(id) { return id } }");
tryItOut("throw __noSuchMethod__;");
tryItOut("do {/*for..in*/for(__proto__ in ((function ()__proto__ = __noSuchMethod__)(*::*\t.__count__.*)))throw __count__; } while((+{} ^ [<x><y/></x>].some(gc)) && 0);");
tryItOut("");
tryItOut("throw <x><y/></x>\n;");
tryItOut("if([(function ([y]) { })()].filter((gc).apply)) { if (<><x><y/></x></> &= 033 ? ([[]])() : this.__defineGetter__(\"__iterator__\", 0/0)) {export *;let __noSuchMethod__ = <><x><y/></x></>, prototype = <x><y/></x>; } else with({__iterator__: <y><z/></y>})gc()}");
tryItOut("let(__noSuchMethod__ = (__parent__ for each (__proto__ in __proto__)), prop = [z1]) ((function(){try {  } finally { export constructor; } })());");
tryItOut("L: gc()");
tryItOut("__noSuchMethod__;");
tryItOut("while(((yield (this.zzz.zzz))) && 0)export *;");
tryItOut("if([,] ,  '' ) {export __count__;gc() } else  if ((.hasOwnProperty\"prototype\"))) return <><x><y/></x></>; } else {}");
tryItOut("L:if(( - (prototype))) with({}) throw StopIteration; else  if ([(new undefined()) if (<x/>)]) yield (({ __count__: prop, __iterator__: ({ function::__count__: prototype }) }) =  ''  |= [<>\t<x><y/></x></>]); else return 0/0;");
tryItOut("this.zzz.zzz;");
tryItOut("M:do {/*infloop*/for(const __count__; (<><x><y/></x>\t</>.hasOwnProperty(\"__noSuchMethod__\")); (let (let, __iterator__ = @foo) window)) ;gc() } while((let (1e81 = (this(<y><z/></y>))) (prop = <x/>)) && 0);");
tryItOut("with(( '' .yoyo([[]]))){gc()let (__parent__, constructor = <x><y/></x>) {  } }");
tryItOut("/*infloop*/for(let prop; *::*; *) var __count__;");
tryItOut("for(let y in []);");
tryItOut("do [1,2,3,4].slice(__parent__.isPrototypeOf([1,,]),  /x/ ).yoyo( \"\"  < false) while((([11,12,13,14].filter).@*) && 0);");
tryItOut("M:if(prop) return __parent__ = <><x><y/></x></>; else {break ;/*infloop*/for(this; undefined;  /x/g ) yield; }");
tryItOut("if(__iterator__) {continue L; } else let (__iterator__ = <y><z/></y>) { yield 1e-81; }");
tryItOut("while((({ __count__: prop, __iterator__: ({ __count__: __noSuchMethod__ }) }) = ()( ''  in this//h\n)) && 0){return <y><z/></y>;var __iterator__ = 0, __parent__; }\nswitch([[]]) { case [15,16,17,18].sort((new Function(\"{}\")), case eval(\"true\", (-1)): break; ): yield function::__iterator__;break; break;  }");
tryItOut("{break ;continue M; }");
tryItOut("/*for..in*/L:\ffor(let [constructor, prototype] = --window.eval(new (function(y) { yield y; (prop).watch; yield y; })((({prototype: undefined})), <><x><y/></x></>)) in 3/0 + ((function ([y]) { })()).call((this.zzz.zzz), __parent__.(false), __count__)) {L:with(*::* <= ({}))L: {<x/>; } }");
tryItOut("/*for..in*/for(var __parent__ in <x/>) {<>yyy</>export __iterator__; }\nif(new Iterator(this)) throw -1; else  if ((new RangeError(0/0))) {(({a1:1})); }");
tryItOut("this >>>=<x/>;for(let y in []);");
tryItOut("{M:if(new <><x><y/></x></>) { if ((-0)) {<x><y/></x>; }} else {export prop;/*infloop*/for(var __iterator__ = *::*; 0/0; []) return; } }");
tryItOut("if((this.zzz.zzz)()) /*infloop*/for(this.propertyIsEnumerable(\"prop\").valueOf(\"number\"); (prop if (prop)); setter = new Date()) {export *;; }");
tryItOut("/*infloop*/for(const prototype = <x><y/></x>; <><x><y/></x></>; <x><y/></x>) ;");
tryItOut("/*infloop*/for(const __proto__ = (true--); prototype = -3/0; (new (1 for (x in []))())) {throw 4.;export *; }");
tryItOut("with(new ((this.__defineGetter__(\"prop\", 'haha'.split)))(((3/0)[*]), undefined))return <x/>;");
tryItOut("M:if((constructor.__iterator__ = new true(new (Math.pow)(), this))) {yield <x><y/></x>; }");
tryItOut("with({}) with({}) { try {  } catch(prototype) { continue L; } finally { yield <><x><y/></x></>; }  } ");
tryItOut("while(((__noSuchMethod__ = __noSuchMethod__).yoyo(__parent__)) && 0){{return <y><z/></y>;{ } } }");
tryItOut("/*for..in*/L:for(let ({ __iterator__: prop }) in ((uneval(<><x><y/></x></>)))) {yield;throw window; }");
tryItOut("var __proto__ = <><x><y/></x></>, prop; const prop;");
tryItOut("/*for..in*/for(const __iterator__ = <x><y/></x> < undefined in this) let prop, prototype = <y><z/></y>;");
tryItOut("switch(__noSuchMethod__ = __parent__.__proto__) { default: break; case 4: break; case 2: throw <x><y/></x>;break; case (({ get __count__(__count__, function::prop) { return  \"\"  }  })): break; case 3: case 3: export *; }");
tryItOut("do (033); while((<x><y/></x>) && 0);");
tryItOut("with((<x/>[this].throw(new eval((yield this)))))var __noSuchMethod__;");
tryItOut("L: {export *;; }");
tryItOut("/*for..in*/M:for(let __proto__ in (([1,2,3,4].slice)(<><x><y/></x></>.hasOwnProperty(\"prototype\"))))constructor;");
tryItOut("if( \"\" ++.__iterator__ = gc(function(id) { return id }) :: (<><x><y/></x></>.yoyo( /x/g ))) {/*infloop*/L:for(const ({ prototype: ({ __iterator__: constructor })/*\n*/ }) = <y><z/></y> .@  /x/ ; <y><z/></y> ^ @foo;  /x/  === new Function(false, null)) {/*for..in*/for([constructor, __iterator__] = <><x><y/></x></> in this) (constructor); }yield <x/>; }");
tryItOut("<y><z/></y>;\nwith(3/0){const __iterator__, __proto__ = window; }\n");
