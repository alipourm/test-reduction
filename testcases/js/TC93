
tryItOut("with({}) { return; } ");
tryItOut("M:if(new (((uneval(<><x><y/></x></> <<=  /x/ ))))()) if((yield ([15,16,17,18].some((function(y) { yield y; return <x><y/></x>;; yield y; }).call, eval(\"#1#\", 1e+81)).yoyo(<y><z/></y>)))) {function(q) { return q; } } else  if (@foo) gc()\n else {; } else \f{constructor getter: 'haha'.split(prop.hasOwnProperty(\"__noSuchMethod__\")); }");
tryItOut("if(__noSuchMethod__ = *::* %= 3 >>=  \"\"  if (<x><y\f/></x>)) {; } else  if (let (__proto__ = false, prototype) ({a2:z2})) return;");
tryItOut("/*for..in*/for(var [__count__, __iterator__] = \n(function (__count__) { function (prototype, __noSuchMethod__) { __noSuchMethod__, constructor; }  } ).call in __parent__) (\n@foo);");
tryItOut("if(Number([[]],  /x/ )) export *; else  if \f(new *::*(<y><z/></y>)) {const __proto__ = <><x><y/></x></>, __count__ = 1e81;{} }");
tryItOut("M:if([11,12,13,14].filter) {var constructor;return <x><y/></x>; } else  if (-3/0.throw(#1#)) {{} const prototype;M:if(__proto__ = prototype) { if (({constructor: <x><y/></x> })) {gc()gc() } else (true);} } else {(1.2e3); }");
tryItOut("return;");
tryItOut("/*infloop*/do if(new (new Function(\";\"))([,,z1], <y><z/></y>).eval((this.__defineSetter__(\"__noSuchMethod__\", function  __noSuchMethod__ (prototype, __iterator__) { yield prop } )))) /*infloop*/\tM:for((<><x><y/></x></>.__lookupGetter__(\"x::constructor\")); <x><y/></x>.__lookupSetter__(\"prop\"); (yield 033)) {const __iterator__, __count__ = <><x><y/></x></>;const __iterator__; } while(window.isPrototypeOf((prototype.__count__ = __count__)));");
tryItOut("/*infloop*/for(const __proto__ = __parent__; <><x><y/></x></>; window) {gc() }");
tryItOut("try { ({ __parent__: [({ __parent__: [, , ], __noSuchMethod__: __count__ }), [__iterator__, , , ({ __parent__: , __parent__: [, , prop] }), [({ __parent__: prop, __proto__: prop }), , , ]]], __parent__: constructor }) = ((uneval(eval(\"yield <y><z/></y>;\", (constructor =  '' ))))), __proto__ = (\n/*\n*/ /x/g \f).watch((false for (__count__ in this))); } finally { for(let y in []); } ");
tryItOut("if((Math.pow)('fafafa'.replace(/a/g, Math.pow), __parent__ = *::*)) { if (\t<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(let (function::__proto__, __parent__ = window) false >>> function ([y]) { })) ({}).hasOwnProperty const __count__; else {yield;/*infloop*/for(const __noSuchMethod__; <><x><y/></x></>; __iterator__) {Functionbreak ; } }}");
tryItOut("for(let y in []);");
tryItOut("catch(constructor) { throw __noSuchMethod__; } ");
tryItOut("/*infloop*/for([,]; ({a2:z2}); <><x><y/></x></>) {return [1];break ; }");
tryItOut("/*for..in*/for(const [prop, constructor] = <y><z/></y> in arguments) {return;export *; }");
tryItOut("with({constructor: new (({}).__lookupGetter__).apply((RangeError( ''  |= [[1]], 033))).yoyo((<x><y/></x>)).watch(\"__noSuchMethod__\", gc)}){var __noSuchMethod__ = this, __count__ = undefined\t; }");
tryItOut("/*infloop*/for(__iterator__; <x><y/></x>\f.(null); (({__parent__ setter: *::* }))) {<><x><y/></x><//h\n/>;__noSuchMethod__ = __proto__, __iterator__ = <x><y/></x>; }");
tryItOut("M:if((let (function::__count__ = this) <x/>)) { if (this.zzz.zzz) return *::*;} else {return <x><y/></x>; }");
tryItOut("L: {with({prototype: <x><y/></x>})export *;gc() }");
tryItOut("if((this.__defineSetter__(\"prop\", (new Function(\"let __iterator__;\"))).__parent__)[1.3]) [1,2,3,4].slice else  if (*::*.*) prototype = __proto__;");
tryItOut("with({}) yield;");
tryItOut("this.zzz.zzz;");
tryItOut("return (({prop: undefined}));");
tryItOut("let(__proto__ = window >= this\n) { return;");
tryItOut("/*infloop*/for(<x><y/></x>; <><x><y/></x></>; <x><y/></x>) export *;");
tryItOut("/*for..in*/M:for([__noSuchMethod__, prototype] = default: let __noSuchMethod__;break; case 4: return;break;  in *::*) {continue ; }");
tryItOut("if((this.__defineGetter__(\"__noSuchMethod__\", Math.sin)).__noSuchMethod__) yield #1=[window]; else  if (('haha'.split)) {return prop; }");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <><x><y/></x></>) ; while(prototype.__iterator__ =  /* Comment */3.141592653589793);");
tryItOut("<><x><y/></x></>;");
tryItOut("/*infloop*/for(let ({ constructor: [], __noSuchMethod__: ({ __parent__: ({ constructor: ({ __count__: prototype }) }), prototype: ({ prop: ({ prop: prop }) }) }) }) = ; #2=[<x><y/></x>]; (++(function ([y]) { })()\n)) {yield; }");
tryItOut("L: {gc() }");
tryItOut("prototype");
tryItOut("if(\nnew  /x/g ()) /*for..in*/M:for(let [__proto__, __parent__] = eval(\"<><x><y/></x></>\", undefined) in *) {gc() } else  if (033) with({__noSuchMethod__: <x/>})let __parent__ = null, __count__ =  \"\" ; else {return;export prototype; }");
tryItOut("with({__parent__: #1=[#1#]}){yield <x/>;function  __noSuchMethod__ (__proto__) { return <x><y/></x> }  }");
tryItOut("return;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ('fafafa'.replace(/a/g, (1 for (x in [])))) + ([15,16,17,18].some(new Function, @foo))) break M;\nif(null) { if (*::*) [[]];} else return;");
tryItOut("/*for..in*/for(__proto__ in ((gc)(false)))([[]]);");
tryItOut("if(__count__ =  '' )  const prototype; else  if (*) if( \"\" ) yield [,,z1]; else  if ( /x/ ) {return; } else {( /x/g );export *; }");
tryItOut("/*infloop*/L:for(function::__proto__.prop = <y><z/></y> &= ({ get __noSuchMethod__ prop (<x><y/></x>, prototype) { return 1e+81 } ,  get prop __iterator__ (prototype, __count__) { return <><x><y/></x></> }  }).prototype; ([[1]]\t ? @foo :  \"\" ); (p={}, (p.z = -3/0)()) !== (<><x><y/></x></>)) {; }");
tryItOut("M:\fwith({prototype: <><x><y/></x></>.propertyIsEnumerable(\"__count__\") > *::*\n})/*for..in*/for(__iterator__ in <><x><y/></x></>) {/a/gi }");
tryItOut("/*for..in*/for(let   in ((eval)((gc)()))){__proto__; }");
tryItOut("/*infloop*/for(#3={a:#3#}; (__count__ =  ''  if (<y><z/></y>)); (this.valueOf(\"number\"))) {let (__iterator__, __parent__ = <><x><y/></x></>) {  /x/ ; }(<y><z/></y>); }");
tryItOut("yield ((uneval(<><x><y/></x></>)));");
tryItOut("if(new ({}).hasOwnProperty(@foo)\f) {throw <x/>; } else  if (new (<x><y/></x>.(window))([] <<= 0/0, <y><z/></y>))  catch  else {yield; }");
tryItOut("/*for..in*/for(let __iterator__ = constructor = window in this.__defineGetter__(\"__count__\", function(q) { return q; })) with({__parent__: * = true})export delete;");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("/*infloop*/while((new ( '' )(undefined) = (<x><y/></x>)(<x><y/></x>, 3.141592653589793)))break ;");
tryItOut("{gc() }");
tryItOut("/*infloop*/for(({ constructor: prop, __count__: [[], __parent__.__parent__] }) = (({ constructor: [, function::constructor] })\t = (#0=[ \"\" ])); [this + window for each (prototype in  \"\" ) if (window)]; \tthis.zzz.zzz) {let __iterator__;if(<><x><y/></x></> <= [z1]) (-0); else  if ((__noSuchMethod__.hasOwnProperty(\"__iterator__\"))) gc() else {yield;; } }");
tryItOut("with({}) { with({}) let([, __count__, , __iterator__] = prototype--, __noSuchMethod__ = *) ((function(){this.zzz.zzz;})()); } ");
tryItOut("do {__noSuchMethod__ = __count__; } while(((-0)) && 0);");
tryItOut("L: {return <x/>;yield; }");
tryItOut("/*for..in*/for(let __count__ in \f /* Comment */false) { }");
tryItOut("/*infloop*/do switch(this) { case prop: /*infloop*/for(var prop; undefined; <x><y/></x>\r) ;case 2:  } while(__parent__.__parent__);");
tryItOut("{/*infloop*/while((get = false)[([,,z1].__lookupSetter__(\"__iterator__\"))]){/*infloop*/for(var __iterator__; [1]; false) {export *;var constructor, __count__; } } }");
tryItOut("//h\nL:if(1e81) export *;");
tryItOut("return prototype");
tryItOut("if(<x><y/></x>.(undefined)) {yield; } else { }");
tryItOut("/*for..in*/for(__parent__ in ((0.1.*).__iterator__ = (delete __count__))) {/*infloop*/M:while(<><x><y/></x></>.__lookupSetter__(\"__proto__\")){/*infloop*/for(@foo; <x><y/></x>; true) {@foo }yield;\n{}\n } }\nfor(let y in []);\n");
tryItOut("/*infloop*/L:for(let [__iterator__] = (({__count__: -0 })) instanceof <x><y/></x>; ({__proto__: false, __proto__ getter: new Function }); (yield __proto__)) {yield *::*; }");
tryItOut("let (<y><z/></y> = <><x><y/></x></>) { gc() }");
tryItOut("/*infloop*/for((uneval(\n* .@x:: (window += 1e-81))); <><x><y/></x></> in null; (this.zzz.zzz)) {}");
tryItOut("/*infloop*/do {__count__, function::prototype; } while(@foo.@foo);");
tryItOut("if(<><bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb></>.__parent__ = __iterator__ = __parent__) {prop: (constructor+=true) } else  if (new (__noSuchMethod__ = <><x><y/></x></>)) {return <y><z/></y>;let __parent__, __proto__ = constructor; }");
tryItOut("return (({__noSuchMethod__ getter: function  prototype (__proto__) { ; }  }));return (((1.3 for each (__noSuchMethod__ in undefined))).throw(this));");
tryItOut("with({}) __parent__ = __noSuchMethod__;");
tryItOut("L: export prototype;");
tryItOut("/*infloop*/M:for((*::* , (*)); (true + __proto__)[new RangeError(__count__, window)]; <x><y/></x> = <x><y/></x>) /*infloop*/do throw ; while(({a2:z2}));");
tryItOut("/*infloop*/for(let __parent__ = <><x><y/></x></>; <x/>;  \"\" ) {yield;{} }");
tryItOut("export constructor;if(#0=[([<><x><y/></x>(/</>])]) {return; } else  if ((constructor / [,,])) let prop, __parent__ = <x><y/></x>; else {{} }");
tryItOut("let ([constructor, __count__, , \t] = ({prototype: <y><z/></y>}), constructor) { export prototype; }");
tryItOut("L: /*for..in*/for((this *= 5.0000000000000000000000).__iterator__ in (((1 for (x in [])))())){;yield window; }");
tryItOut("/*for..in*/for(var prototype in ((#1# >> constructor)((<x/> <= true >> <><x><y/></x></>))))gc()");
tryItOut("/*for..in*/for(var [__parent__, __noSuchMethod__] = yield __proto__ in (this .@x:: @foo)) {gc() }");
tryItOut("__proto__ = prototype;");
tryItOut("M:do {yield __proto__;throw <x/>; } while((this.@foo) && 0);");
tryItOut("L: (true);");
tryItOut("if(new Boolean(<><x><y/></x></>)\n) { if (__proto__ =  ''  >> (new (arguments)(<y><z/></y>, <><x><y/></x></>))) yield;} else {( \"\" );gc() }");
tryItOut("L: return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {/*infloop*/for(let __iterator__; 1e81; 1e4) //h\n{let __noSuchMethod__ = *;export constructor; } }");
tryItOut("L:if(@foo) {function(y) { yield y;  /x/g ; yield y; } }");
tryItOut("prop = __parent__;");
tryItOut("M:if(__proto__ = constructor) {yield; } else {/*for..in*/L:for(var [__iterator__, prototype] = [[1]] in <x><y/></x>) __parent__var constructor = 3, __iterator__; }");
tryItOut("\nthrow  '' ;");
tryItOut("with({}) throw __noSuchMethod__;");
tryItOut("return");
tryItOut("/*infloop*/for(var @foo['constructor'] = ([__iterator__, __parent__] = #1=[#1#] /= <><x><y/></x></>); new [1,2,3,4].map((eval(\"var __proto__, constructor = prop;\", arguments))); <><!--yy--></>) /*for..in*/for(const constructor in ((function  constructor (try { var __noSuchMethod__, __parent__ = -1; } finally { const prototype = <><x><y/></x></>; } ) { yield window } )(undefined))){constructor;return __parent__; }");
tryItOut("if(({__iterator__: (__noSuchMethod__.hasOwnProperty(\"__iterator__\")),  set constructor __count__ (__iterator__, prototype) { {}\n }  })) { if ((new ((constructor = *::*))())) {(3)yield <y><z/></y>; } else {yield;export __noSuchMethod__; }}");
tryItOut("/*for..in*/for(__count__ = #2=({{gc() }: this.zzz.zzz}) in <x><y/></x>) {{}; }");
tryItOut(";");
tryItOut("let(__proto__, (__count__)) ((function(){__noSuchMethod__ = constructor;})());");
tryItOut("/*for..in*/L:for(const [constructor, prop] = this.zzz.zzz <= (<x><y/></x>.watch(\"__noSuchMethod__\", Function)) in void <x><y/></x>) {yield;/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in  /x/g  if (<x/>)) /*for..in*/L:for(var __noSuchMethod__.prop in <><x><y/></x></>) let __noSuchMethod__ = window, __count__; }\f");
tryItOut("with({__noSuchMethod__: __parent__}){throw  /x/ ; }");
tryItOut("/*for..in*/L:for(var __parent__ = null.__lookupGetter__(\"__parent__\") in <x/>) {continue L;{} } const __proto__;");
tryItOut("/*infloop*/L:for(eval(\"<x/> =  '' \", __count__)\f; this >>>=*; <y><z/></y>) {{}export __noSuchMethod__; }");
tryItOut("/*infloop*/for(<><x><y/></x></>; *; <x><y/></x>) __iterator__, prototype = <x><y/></x>;");
tryItOut("/*infloop*/do export *; while((function  __count__ (__iterator__) { yield <x><y/></x> } ).call);");
tryItOut("L:with()const __proto__ = <><x><y/></x></>;");
tryItOut("for(let y in []);");
tryItOut("let(({ __proto__: __parent__, __proto__: undefined }), each) ((function(){return (<x/>);})());");
tryItOut("if(new ( '' )()) {__count__ = prop, prop; } else  if (prop) throw <x/>;");
tryItOut("/*infloop*/do return <y><z/></y>; while(__iterator__ = <x><y/></x>);");
tryItOut("let (  = new false(), constructor)try { export *; } catch(__parent__ if (function(){ /x/ ;})()) { [1,2,3,4].slice }  { /*for..in*/for(const constructor = #2=({__noSuchMethod__: <><x><y/></x></>}) in (<x><y/></x>)[false]) with(<y><z/></y>.__defineSetter__(\"__proto__\", 3.141592653589793))break ;\f");
tryItOut("\tlet (__noSuchMethod__ = this) { return  /x/ ; } const prop;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ({ __noSuchMethod__: __iterator__, '__parent__: __count__ }).__iterator__) /*infloop*/for(var __proto__; case 1: break; default: break; ; window) {break M; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (__iterator__.isPrototypeOf(this)); (prop = [,,])) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in __count__ = __count__) {throw #1#;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__proto__) in <x><y/></x>.unwatch(\"setter\")) \t{var __noSuchMethod__ = null, prop; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = #2=[({prototype: <><x><y/></x></>})] in [,,] *= window.watch(\"prop\", prototype)) ");
tryItOut("switch((new (case 2: )()).throw(#1=<y><z/></y>)\n) { case 8: if(<><x><y/></x></>) {throw 0.1;{} } else  if ( /x/ ) ; else /a/gibreak; case 3: <x/>;break; window;default: /*infloop*/for([11,12,13,14].some; [<x/>]; undefined) {const each, __count__ = ;<><x><y/></x></> }break; export __noSuchMethod__;case 8: case ((({}))[(-1)]): Math.sincase 9: return <x><y/></x>;break;  }");
tryItOut("let (__noSuchMethod__ = this.__defineGetter__(\"prop\", function(q) { return q; })) {  }");
tryItOut("/*infloop*/L:\tfor(var [__iterator__, __iterator__, __parent__] = <x/>; null\n; constructor += @foo) {export *; }");
tryItOut("L:if(((uneval(let __iterator__; * this))).__defineGetter__(\"yield\", function (__proto__, __noSuchMethod__) { <y><z/></y>; } //h\n)) { if ([ ''  for each (__parent__ in  \"\" )]) {if(( /x/  + .2)) export *;/*for..in*/for(let [__parent__, __count__] = window.valueOf(\"number\") in *)  } else with(new String({}, #3={a:#3#}))(window);}");
tryItOut("yield\n");
tryItOut("if(window.eval(window)) (window); else  if (([window for each (__iterator__ in 1e4)])) {function::__iterator__, constructor = *;return  \"\" ; }");
tryItOut("/*infloop*/do {gc() } while(prototype|=window);");
tryItOut("with({__iterator__: (__proto__.__parent__ = __parent__)(prototype.constructor > __count__.*)})const prototype = *;");
tryItOut("return;");
tryItOut("/*for..in*/L:for(const __proto__ in __parent__ = <x><y/></x>) {L: {break ;/*infloop*/for(0/0;  /x/ ; 1e81) constructor = <x/>; } }");
tryItOut("throw constructor;");
tryItOut("try { return; } catch(prop) { return ([-1]); } ");
tryItOut("try { return; } finally {  } ");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ __proto__: set, prop: ({ __iterator__: [, , __count__] }) }), __iterator__: ({ function::setter: [({ __iterator__: constructor, __iterator__: x::constructor })], __iterator__: ({ __count__: prop }) }) }) = <y><z/></y>; ({}); undefined) if(new <><x><y/></x></>(*::*)) {yield  '' ; } else  if ((Math.sin).call({},  /x/g )) gc else return *;");
tryItOut("if(yield #1#) { if (\nfalse) {return;yield try { let __count__ = <x/>; } catch(constructor if @foo) {  \"\" ; } catch(constructor if <><x><y/></x></>) { gc() } catch(__proto__ if (function(){})()) { ; } catch(prototype) { \fyield; } finally { const constructor; } ; }} else {(__parent__); }");
tryItOut("with(#2=({__proto__: (({}))[3]}))yield;");
tryItOut("while(((({prototype: -1 }))) && 0)continue L;");
tryItOut("/*infloop*/while( /* Comment */*::*){throw @foo;let __parent__, __noSuchMethod__; }");
tryItOut("__noSuchMethod__");
tryItOut("M:while((<y><z/></y>) && 0)if(1e81.propertyIsEnumerable(\"__parent__\")) {} else  if (this.zzz.zzz) try { prototype } catch(__parent__) { function (prop) { return [,,] }  } ");
tryItOut("if(function(y) { yield y; try { yield; } catch(prototype) { var __noSuchMethod__, __parent__; } finally {  } ; yield y; } = [15,16,17,18].filter(window,  \"\" )++) {; } else  if (new []() *= [,]) {{}\n; } else {if((<x><y/></x>.(<y><z/></y>)) for each (__proto__ in  /x/g ) for each (prototype in <><x><y/></x></>) for each (__iterator__ in <x><y/></x>)) { } else {if(this) { if (*::*) const __parent__, __iterator__ = 3/0; else const __iterator__ =  '' , __noSuchMethod__ = set;} } }");
tryItOut(" /x/g ['constructor'] = __iterator__;");
tryItOut("try { yield prop; } catch(__iterator__ if (function ([y]) { })()) { yield window; } catch(__count__ if window) { return; } finally { const __count__ = constructor; } \n");
tryItOut("/*infloop*/do { } while();");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in eval(\"constructor = <x><y/></x>, constructor = 0.1;\", <x><y/></x>)) __proto__");
tryItOut("/*infloop*/while((<x><y/></x> * <x/>).((__iterator__ = <><x><y/></x></>)) >> (<//h\n><x><y/></x></>)[<x/>])/*for..in*/for(var prototype in __parent__) {@foo; }\t");
tryItOut("if((({ __parent__: prop }) = __noSuchMethod__)) {/*for..in*/L:for(const __count__ in ((({}).hasOwnProperty)( '' ))){}export __count__; }");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in window) {;throw constructor; }return <x><y/></x>;");
tryItOut("if(<><bbb xmlns:ccc=\"((function(q) { return q; })(5.0000000000000000000000 <<= true))\"><ccc:eee></ccc:eee></bbb></>) { if ( /x/g .hasOwnProperty(\"__noSuchMethod__\")) {yield\nyield prop;let __count__, prototype = __iterator__; } else {gc()yield __count__; }}");
tryItOut("if(function ([y]) { }.@foo) { if (new eval(<x/>, <><x><y/></x></>)) {__iterator__, prop;(null); }} else {yield;return; }");
tryItOut("do {function () { gc() } <x/> } while(((__parent__.(<x><y/></x> /= window))) && 0);");
tryItOut("const __iterator__;M:while((prop) && 0){(<x><y/></x>);let constructor = <x><y/></x>, __parent__ = <y><z/></y>; }");
tryItOut("/*infloop*/do ; while((((null)(*)) ? ((p={}, (p.z = <x><y/></x> ? <><x><y/></x></> : <y><z/></y>)())) : (undefined for each (__iterator__ in *::* % __parent__))));");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in this) {break ;function(q) { return q; } }\nexport __count__;");
tryItOut("yield;\n/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in undefined) yield;\n");
tryItOut("throw __iterator__;");
tryItOut("if(__count__.__parent__ / new (eval)()) {/*for..in*/for((constructor) in (\f(/a/gi)(var prop = null, __noSuchMethod__)))var prototype, __iterator__ = <x><y/></x>; } else {with({prop: (<x><y/></x>.(true))});export __count__;\n;\n }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:do {let __noSuchMethod__;yield ([<><x><y/></x></>]); } while(true ? false : this);");
tryItOut("/*infloop*/do {continue ;gc() } while('fafafa'.replace(/a/g, <x><y/></x>));");
tryItOut("with(<x/>[ '' ]--){while((([11,12,13,14].some).unwatch(\"__iterator__\")) && 0){(p={}, (p.z = <x><y/></x>)()) }M:if( /x/g .*) (0); else  if (#1=[#1#].__count__) __proto__ else true; }");
tryItOut("L: false");
tryItOut("L:do {throw StopIteration; } while((*::* >= <y><z/></y>) && 0);");
tryItOut("/*for..in*/L:for(let __iterator__ = #1# in #1#) yield\n/*infloop*/while(arguments)const prototype;");
tryItOut("if((({ prop: ({ __iterator__: prototype }) }) = prop = new (function (prop, __parent__) { yield __count__ } )())) export *; else  if ((new (null)(false))[yield #1=[#1#]]) export *\nexport __parent__;");
tryItOut("let(__iterator__) ((function(){return <><x><y/></x></>;})())\n");
tryItOut("/*for..in*/for(var prototype.prototype in <xxx {constructor}={[11,12,13,14].filter.unwatch(\"__proto__\") =  if ( /x/g  || *::*)} />) /*infloop*/do gc() while(__iterator__ = <x/>);");
tryItOut("yield null in prop;");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("__parent__ = \t<x><y/></x> (__count__);(1e-81, *.valueOf(\"number\"), prop = (this.__defineSetter__(\"__count__\", (3/0).watch));\n{/*infloop*/for(prop; \nthis; <x><y/></x>) {} }\n");
tryItOut("/*infloop*/M:for(const __parent__ = (yield this.__defineSetter__(\"prop\", [1,2,3,4].map)); ((({a2:z2})).watch)(); window >>=  /x/ \n) {evalgc() }");
tryItOut("export *;");
tryItOut("for(let y in [5,6,7,8]) yield  \"\" ;");
tryItOut("return");
tryItOut("let ([] = (new (new <><x><y/></x></>().__lookupGetter__(\"__iterator__\"))((void (yield <x><y/></x>)), [11,12,13,14].sort))) { gc() }");
tryItOut("with({__iterator__: (false for (__count__ in *::*\t))}){/*infloop*/while(undefined){;break ; }yield; }\nthrow -0;");
tryItOut("return;");
tryItOut("/*infloop*/for(const constructor; (<><x><y/></x></> :: <x><y/></x>); (__parent__ = <y><z/></y>)) ;");
tryItOut(";");
tryItOut("{}");
tryItOut("M:with(constructor.prototype = @foo.__lookupGetter__(\"__noSuchMethod__\")){break L; }");
tryItOut("let (default:  = true) { /*for..in*/L:for(constructor = <><x><y/></x><\t/> in <x><y/></x>) {(\twindow);export __noSuchMethod__; }\nexport *; }");
tryItOut("/*infloop*/M:while((function  prop ()true).call(__iterator__.__count__ = true, (this.__defineSetter__(\"prop\", function  prop (__count__).2)), this))with(yyy)");
tryItOut("with({prop: __proto__ = this}){return;yield <y><z/></y>; }");
tryItOut("return;");
tryItOut("/*for..in*/for(prop in ((({}).hasOwnProperty)(__noSuchMethod__ = <x/>)))yield;");
tryItOut("with(\n-1;\n){/*for..in*/for(var [__parent__, __parent__] = yield *::* in <><x><y/></x></>) export prototype; }");
tryItOut("with(constructor.__lookupSetter__(\"__parent__\")){/*infloop*/do { } while([[]]); }");
tryItOut("L:while(((( /x/g __proto__).__lookupGetter__(\"set\"))) && 0){/*infloop*/L:while(0)return;M:if(*::*) {{} } }");
tryItOut("if(({ get function::__parent__(__proto__) { yield undefined/*\n*/ } , prototype: <><x><y/></x></> })) { if (this.zzz.zzz <= (this.propertyIsEnumerable(\"__parent__\"))) {return window;gc() } else {eval }}");
tryItOut("/*infloop*/for(__count__; ([z1,,] >>> [[1]].eval((<x><y/></x>.(@foo)))); true & window) /*infloop*/for(let __parent__;  \"\" ; <><x><y/></x></>) {yield  \"\" ; }");
tryItOut("yield;while(([]) && 0)gc()");
tryItOut("/*for..in*/for( /x/  = let (constructor = <y><z/></y>)  /x/  in 1e4) {export *; }");
tryItOut("if((__count__ = __proto__)) {yield; } else  if (this.__defineGetter__(\"let\",  \"\" )) {continue M;(<x/>); } else {var let, __parent__ = {}; }");
tryItOut("L: ");
tryItOut("/*infloop*/while( \"\" )/*\n*/{break ; }");
tryItOut("let __parent__, __iterator__");
tryItOut("gc()");
tryItOut("L:if(<x><y/></x>) {yield 1.2e3; } else {__iterator__, __noSuchMethod__ = <><x><y\r/></x></>;export *; }");
tryItOut("L:if(prop =  '' .__lookupSetter__(\"prototype\")) { if (<>case 7: break; </>) let <x><y/></x>, constructor;} else {if((delete  /x/g )) break L; else const constructor; }");
tryItOut("const __noSuchMethod__ = <><x><y/></x></>;Math.sin");
tryItOut("/*for..in*/for(const prototype in ((new Function)(<>throw  /x/g ; const constructor</>)))if(window) { if (__parent__ = this) {yield;yield <><x><y/></x></>; }} else continue ;");
tryItOut("/*infloop*/for(({ __iterator__: ({ __noSuchMethod__: __iterator__ }), __parent__: ({ __parent__: , __parent__: ({ prototype: ({ get: __iterator__, __parent__: __noSuchMethod__ }), __count__: ({ __proto__: __count__ }) }) }) }) = [({ __iterator__: __iterator__, __proto__: get }), ] = 1.3; (__parent__ = prop ^  /* Comment */<><x><y/></x></>); ((@foo ^= <><x><y/></x></>.throw(<><x><y/></x></>)) * ((new Function(<x/>, *::*))))) return this;");
tryItOut("export *");
tryItOut("for(let y in [5,6,7,8]) let(({ constructor: __noSuchMethod__, __noSuchMethod__: __count__ }), __parent__ = undefined) ((function(){return ({prop: 1.3 });})());");
tryItOut("{(<x/>); }");
tryItOut("if(null) { if ([1]) {yield false; } else {var __iterator__; }}");
tryItOut("M:with(let (__iterator__)  /x/g ){export *; }\n__noSuchMethod__ = ({}) prop;");
tryItOut("L:if(__proto__)  else  if (\n3) throw @foo; else var __count__;");
tryItOut("do {gc() } while((__iterator__(<x><y/></x>)) && 0);");
tryItOut("/*for..in*/M:for(const ({a1:1}). \"\"  in __count__) ");
