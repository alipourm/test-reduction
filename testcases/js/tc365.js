tryItOut("{try { yield 0; } catch(__parent__) { yield; }  }");
tryItOut("if(this.__defineGetter__(\"__proto__\", (window).watch)) {; }");
tryItOut("{}if(constructor(*::*)) { if (([1,2,3,4].slice( \"\" ))) {return; }} else {export __iterator__;\f(false); }");
tryItOut("let (constructor = <x><y/></x>) { false; }");
tryItOut("<y><z/></y>;function(q) { return q; }");
tryItOut("if(0.1.@*) let ({ constructor: __count__ }) = new ('haha'.split)(); else  if ((<xxx {__noSuchMethod__}={ /x/g } /> |= <{__iterator__}> </{__iterator__}>)()) {L: gc() }");
tryItOut("/*infloop*/for(let [__parent__, __count__, , , ({ function::__parent__: [, , [[, __parent__, __proto__], [, , , ({ constructor: constructor })]], , ], constructor: __iterator__ })] = (let (constructor = this) __parent__ = <><x><y/></x></>)((<y><z/></y>.__parent__ >>= 1e81)) = [<><zzz>__proto__</zzz></>].some(__count__ = \f \"\"  == <x><y/></x>); (uneval(this)) % undefined.__defineGetter__(\"__count__\", Math.pow); ()) {L: {export __parent__; } }");
tryItOut("let (__count__) {  }");
tryItOut("if(<y><z/></y>) { if ([, , ] = null) {gc()M:if(((uneval(<x><y/></x>)))) ; const __proto__; else {yield 3/0; } }} else {(window); }");
tryItOut("if([11,12,13,14].some) case prototype: ;");
tryItOut("/*for..in*/for(var __iterator__ = [@foo if (<><x><y/></x></>)] in true\n && (return <x><y/></x>)) {undefined; }");
tryItOut("L: {{}{continue ;gc() }\t }");
tryItOut("if(prop) {yield undefined;export prototype; }");
tryItOut("switch(undefined) { default:  }\n");
tryItOut("return;");
tryItOut("while((<><>[<><x><y/></x\r></> :: undefined].some(({}).hasOwnProperty)</></>) && 0){let __iterator__, __count__ = window;/*for..in*/for(var __noSuchMethod__ in (((new Function(\"let (__noSuchMethod__ =  '' , __iterator__) { export prop; }\")))((<x><y/></x>)(3))))return  /x/g \f; }");
tryItOut("{if(<y><z/></y>) yield  \"\" ; else  if (<x/>) {break ; } else var __noSuchMethod__; }");
tryItOut("while((<><x><y/></x></>.propertyIsEnumerable(\"prototype\")) && 0)({}).hasOwnProperty");
tryItOut("let __noSuchMethod__ = *;");
tryItOut("do {} while(((<x><y/></x> .@ prototype).valueOf(\"number\")) && 0);");
tryItOut("/*for..in*/L:for(function::prototype(constructor = (window\n)) in ((gc)(new ((prototype = *).watch)((typeof (constructor = <><x><y/></x></>))))))export *;");
tryItOut("let (prototype) { export *; }");
tryItOut("try { this.zzz.zzz; } catch(__noSuchMethod__) { __count__ = function::prop; } ");
tryItOut("/*infloop*/for(const __proto__; *.__proto__; new (( /* Comment */null))((<x/>), [[]])) {let __parent__;break ; }");
tryItOut("if(yield  /x/g )  else  if (3/0) {; } else {export prototype;return @foo; }");
tryItOut("throw StopIteration;");
tryItOut("with({}) { constructor = __iterator__; } ");
tryItOut("A");
tryItOut("for(let y in [5,6,7,8]) with({}) export *;");
tryItOut("throw StopIteration;");
tryItOut("{gc()yield\nyield; }\nthrow __count__;");
tryItOut("if(<><x><y/></\tx></>) (null); else  if ((p={}, (p.z = *)())) throw __count__;");
tryItOut("let (({ __parent__: __iterator__, __noSuchMethod__: ({ constructor: prototype, prop: __parent__ }) }), constructor) { <y><z/></y>; }");
tryItOut("if(window.__proto__ = <x><y/></x>) { if (new [,,z1].eval(function ([y]) { })(, ([15,16,17,18].some('haha'.split, <><x><y/></x></>)))) {(({})); } else yield;}");
tryItOut("yield 033;");
tryItOut("export 0.1;\ncontinue M;\n");
tryItOut("{/*for..in*/for(var __noSuchMethod__ = <y><z/></y> in null) ; }");
tryItOut("with({}) { ; } ");
tryItOut("yield (Boolean(<x><y/>/x>));");
tryItOut("switch((({ set __count__(<x><y/></x>) { continue ; }  }))) { default: /*for..in*/for(let __noSuchMethod__ in undefined) let __proto__; }");
tryItOut("L:if(\n({prototype: <x/> })) {__noSuchMethod__ = <><x><y/></x></>; } else  if ((yield (yield <x><y/></x>))) {function  constructor (prototype, prototype) { ; }  } else {return __proto__;return ((1 for (x in []))).call(<x><y/></x>, __iterator__, @foo); }");
tryItOut("{L: {}gc() }");
tryItOut("if(-<x/>.__count__ = this.*) {while((null--) && 0){continue ; } } else  if ((({__noSuchMethod__: [prototype, ] = ({ __parent__: prop, __iterator__: prop }) }))) let constructor = __noSuchMethod__, set = []; else [1,2,3,4].slicereturn null;");
tryItOut("return;");
tryItOut("{/*infloop*/for(({__iterator__: <x><y/></x> }); __parent__; (this)[function::__iterator__]) {export *;prototype = __count__, __parent__ = [,]; }var __proto__, __noSuchMethod__ = <x/>; }");
tryItOut("/*for..in*/for(prototype.__parent__ in ((Math.sin)(constructor))){(<><x><y/></x></>);/*for..in*/for([__proto__, __count__] = (function ([y]) { })() in false) return; }");
tryItOut("(({a2:z2})); const prototype;");
tryItOut("if([__proto__]) {yield; } else {export constructor; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in  /x/g ) {throw <x><y/></x>; }\n const prop;");
tryItOut("/*for..in*/for(var __parent__ in ((/a/gi)(true ? this : <><x><y/></x></>))); const __iterator__;");
tryItOut("(null);\nlet (prototype = window, __parent__ = <><x><y/></x></>) { {yield; } }\n");
tryItOut("if(({}).__lookupGetter__) {/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in <><x><y/></x></>) {yield  \"\" ; } } else  if ( /x/ (null, this)) {__noSuchMethod__; }");
tryItOut("if((({__parent__: (<y><z/></y>.throw(<x/>))}) .@x:: (gc).call(this.yoyo(true), ))) { if (this.__defineSetter__(\"x::__proto__\", Math.pow)) {throw #1=[#1#]; }} else gc()");
tryItOut("yield <><x><y/></x/*\n*/></>");
tryItOut("if(new Function(null)) {(3/0); } else  if (__iterator__) {gc()export *; }");
tryItOut("if(constructor = <><x><y/></x></>\f) {yield  /x/ ;L: yield; } else  if ( /* Comment */(prop.__proto__) ? <><x><y/></x></>.valueOf(\"number\") :  \"\" ) {return <x><y/></x>; const prototype;if(([, prop, constructor, prototype] = this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__))) { if (Math.pow()) return *::*; else {return; }} } else __noSuchMethod__");
tryItOut("if(((-1) if ([11,12,13,14].map))) {break L;export __proto__; } else  if ([11,12,13,14].filter) var __parent__ = __proto__, constructor; else /*infloop*/while(033){throw true; }");
tryItOut("/*infloop*/for(yield #1=[#1#]; (__noSuchMethod__ = *)[@foo.valueOf(\"number\")]; (this.__defineSetter__(\"prop\", function () { return this } ))) export __proto__;");
tryItOut("[[1]].yoyo(undefined).__defineSetter__(\"__parent__\", function  prototype () { yield <><x><y/></x></> } ) = __parent__;");
tryItOut("let (__parent__, function::prop) { /*for..in*/L:for(const __count__ in (('haha'.split)(__noSuchMethod__))){export *;throw __parent__; } }");
tryItOut("var __iterator__, __proto__ = *\nfunction  prop (prototype)__parent__");
tryItOut("{with({(__proto__.__noSuchMethod__ setter=  /x/g ).__parent__: [[[1]].__lookupGetter__(\"__count__\")]}){*; const __proto__; } }");
tryItOut("switch(new typeof <x><y/></x>(({constructor: *::* }),  let )) { case (<xxx>{__parent__}</xxx>)(#0=undefined, #1=[#1#]): yield;case 2: break; break; default: break;  }");
tryItOut("if((prop.hasOwnProperty(\"prototype\").yoyo( '' ))) {; } else {__proto__ = constructor;\ncontinue ;\n }");
tryItOut("M:do {let __count__, __iterator__ = prototype;if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { if (( /* Comment */ /x/g  + yield <x><y/></x>.__lookupGetter__(\"prototype\"))) return; else {gc() }} } while((((p={}, (p.z = (prototype = <y><z/></y>).__lookupGetter__(\"__noSuchMethod__\"))()))) && 0);");
tryItOut("/*infloop*/do {throw undefined;(function(id) { return id }); } while(@foo);");
tryItOut("try { yield function ([y]) { }; } catch(__iterator__) { yield <x><y/></x>; } ");
tryItOut("/*for..in*/for(const [__proto__, __noSuchMethod__] = (__proto__ = <><x><y/></x></>) in yield *::*.__defineSetter__(\"__parent__\", (*::*).__defineSetter__)) {return  /x/g ; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:while(prototype = function::__proto__){ }");
tryItOut("if(((<x><y/></x>.(true)))(( \"\"  - null), <><x><y/></x></>)) {L: yield; } else  if (<x/>.watch(\"__iterator__\", function(y) { yield y; export let;; yield y; }).__lookupGetter__(\"__iterator__\")) {let constructor = false; }");
tryItOut("/*infloop*/for(__proto__+=*; <><x><y/></x></>.@foo; <x><y/></x>.(0).*) {{}return; }");
tryItOut("yield true; const prop;");
tryItOut("constructor = prototype;");
tryItOut("function(q) { return q; }\ngc()\n");
tryItOut("/*infloop*/do export prop; while(__parent__.(3).__proto__);");
tryItOut("try { throw <><x><y/></x></>; } catch(__noSuchMethod__ if 0/0) { return; } catch(__iterator__) { gc() } ");
tryItOut("with(eval){/*infloop*/for(<x/>; <y><z/></y>; <x/>)  }");
tryItOut("/*for..in*/for(var [ for each (__count__ in ) for each (__proto__ in <><x><y/></x></>), __parent__] = * in  \"\" ) {[1,2,3,4].map__parent__ }throw true;");
tryItOut("L:switch(Date()) { default:  }");
tryItOut("/*for..in*/M:for(let <><x><y/>\n</x></> >>> <><x><y/></x></>--.__proto__ in var prototype, prop) {;(this); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let __iterator__ = (<x/>.valueOf(\"number\")); #1=[#1#].isPrototypeOf(<><x><y/></x></>); (new Date())) false");
tryItOut("with(delete undefined)return;");
tryItOut("if([[1]]) {gc() } else gc()");
tryItOut("L:with(({ get __count__(constructor, constructor) { yield .@* }  }))if(<x><y/></x>) {((new Function(\"throw @foo;\"))).apply \"\" ; } else  if ( /x/g ) {gc() }");
tryItOut("M:if((#2=(__proto__ for (__noSuchMethod__ in this)))) { if (Number(window, <x><y/></x>)) for(let y in [5,6,7,8]) let __proto__, __parent__; else {gc() }}");
tryItOut("{yield;while((prop) && 0)const yield = <x/>; }");
tryItOut("this.zzz.zzz; const __count__;");
tryItOut("if(<x><y/></x>) { if (<x/>) {let __proto__ = false;(({a1:1})); }} else {; }");
tryItOut("if(<><bbb xmlns:ccc=\"<x><y/></x>.(<><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb></>) {(<x/>); } else return; const prototype;");
tryItOut("let (__iterator__) { var __parent__, __proto__; }");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, prop] = false in false) {{}; }");
tryItOut("L: {yield;__count__ = <x><y/></x>; }");
tryItOut("let __iterator__, __parent__;");
tryItOut(" /x/g  = __parent__, __count__ = 3");
tryItOut("let (constructor, ({ __parent__: [] })) { M:if((this\f)(<x/>.@foo)) {yield this;5.0000000000000000000000 } }");
tryItOut("L:while((!undefined) && 0)return <x><y/></x>;");
tryItOut("export *\ncontinue M;");
tryItOut("yield <x/>;");
tryItOut("let(prototype = <x><y/></x>) { var prop;");
tryItOut("with({prototype: #1#})const __iterator__, constructor;");
tryItOut("M:do return <x><y/></x>; while((new (this)(window, window)) && 0);");
tryItOut("/*infloop*/for(var __parent__; [window].filter((new Function(\"yield;\"))); true--) {;gc() }if(3) { if (true) {return; } else {*::*;yield; }}");
tryItOut("L:if([z1].__lookupGetter__(\"__noSuchMethod__\")) { if ([11,12,13,14].sort) {while(([1e81].map(Function)) && 0)gc()yield; } else <>1e4.yoyo(null)</>}");
tryItOut("{return <><x><y/></x></>;/*infloop*/for(let ({ __iterator__: __count__ }) = <x><y/></x>.hasOwnProperty(\"yield\"); true = <x/>; <x/> !== this) {} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in 033) yield;");
tryItOut(" const __parent__\nif(<y><z/></y> ? __noSuchMethod__ : <x/>)  else  if ([(<><x><y/></x></> ? this : __iterator__) if (<x><y/></x>)]) {__iterator__, __count__ = <x><y/></x>;((-1)); }");
tryItOut("/*infloop*/for(let constructor; constructor; 3/0 += <x/>) return <>\r<x><y/></x></>;");
tryItOut("const __noSuchMethod__, prototype;");
tryItOut("/*for..in*/for(let constructor in ((Function)(<><x><y/></x></> /= <x/> .@x:: ()))){yield null; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor(new Math.pow()) in <xxx \t{__proto__}={window} />.\t( \"\" .__proto__)) ((<y><z/></y>)(__parent__): * <<=  /x/g .(this));");
tryItOut("/*for..in*/for([constructor, __proto__] = new [15,16,17,18].filter(function  prop (constructor, prototype) { yield * } , (this.__defineGetter__(\"__noSuchMethod__\", /a/gi)))(((let (prop, __iterator__ = <><x><y/></x></>) [[]]))[(yield <x><y/></x>)], <y><z/></y> *= this) in this.__defineGetter__(\"prototype\", Function)) {if([11,12,13,14].sort) ; else  if (__count__, constructor\n) return this; else {gc()Function } }");
tryItOut("/*infloop*/for(const __count__; ((uneval({}.__noSuchMethod__))); (({__noSuchMethod__: eval(\"(-0)\", this)}))) {continue L; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = * >>= <><x><y/*\n*//></x></> in <><x><y/></x></>) {gc() }");
tryItOut("while((<><x><y/></x></>) && 0){ }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__.__noSuchMethod__ in (((p={}, (p.z = __proto__.__defineGetter__(\"__proto__\", (Math.sin).apply))()))(Number())))(<><x><y/></x></*\n*//>);, __proto__ = @foo;");
tryItOut("return\n");
tryItOut("/*infloop*/M:for(const __parent__ = <y><z/></y>;  \"\" ;  /x/ ) export *;");
tryItOut("with(\f(undefined.constructor = *::*) === ( /x/g .valueOf(\"number\").@*)){throw -1; }");
tryItOut("with(<><>yyy</> { yield __iterator__.(false) } </>)return <x><y/></x>.watch(\"__proto__\", function(y) { yield y; (<y><z/></y>);; yield y; });");
tryItOut("let (__parent__ = ({prototype: [15,16,17,18].sort((new Function(\"{}\")), (<x><y/></x> >>>=<x/>.__noSuchMethod__ = undefined.__defineSetter__(\"__count__\", Function)))})) { const prototype = this; const constructor; }");
tryItOut("do {if(1e4) let __count__, prop; else {@foo;gc() } } while((constructor = 1e-81) && 0);");
tryItOut("/*for..in*/for([prop, setter] = (true)(window, <x><y/></x>) .@*:: (-1).__lookupGetter__(\"prototype\") in (this.unwatch(\"__iterator__\").__lookupSetter__(\"prop\"))) while(((constructor.eval(<x><y/></x>))) && 0)continue M;");
tryItOut("M:if(<y><z/></y>) break L;");
tryItOut("/*infloop*/for(var ({ __proto__: __noSuchMethod__, __proto__: prop }) = eval(\"const prototype, __noSuchMethod__;\", 0); (new ({}).hasOwnProperty()); eval(\"\", <><x><y/></x></>)) {export constructor;gc() }");
tryItOut("\nconst constructor, __count__ = [z1];\n");
tryItOut("/*infloop*/while(.throw((p={}, (p.z = 3/0)()))){/*for..in*/L:for(let __iterator__ in false) {export prop;return; }/*for..in*/for(const [x::__parent__, __parent__] = -3/0.throw(<x><y/></x>) in <x/>) yield *::*; }");
tryItOut("");
tryItOut("while((null) && 0)constructor;");
tryItOut("return 3");
tryItOut("/*infloop*/while(__proto__.__proto__)M:if(<x><y/></x>) { if (undefined) yield;} else {prop }");
tryItOut("with({__count__: __noSuchMethod__.__count__ = (__noSuchMethod__ =  '' )}){export __parent__; } const __count__;");
tryItOut("/*for..in*/for(var __parent__ = __iterator__ = [1] in \t /x/g ) continue L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop.__noSuchMethod__ in <><x><y/></x></>) {(<x/>);throw false; }");
tryItOut("return null[undefined];");
tryItOut("if(\t<x><y/></x>.(null)) {export *; }");
tryItOut(";");
tryItOut("/*for..in*/for(const [__noSuchMethod__, constructor] = -0 in this) \r{continue ; }if(3) continue ; else  if ( /x/ ) {{} } else Function");
tryItOut("/*infloop*/for(var __count__ =  /x/g ; eval(\"(__iterator__.prop =  { var __noSuchMethod__, __iterator__ = window; } )\",  '' ); [({ prototype: ({ prototype: prop, prototype: [[], ({ x::prototype: __count__ }), , [({ __iterator__: __count__, __parent__: __parent__ }), constructor, , ]] }) }), ]) export *");
tryItOut("if( /x/ .constructor) yield; else gc()");
tryItOut(";");
tryItOut("__noSuchMethod__ = <><x><y/></x></>, prototype = undefined;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for \n each(let __parent__ in  /* Comment */false) (<y><z/></y>);");
tryItOut("L:do let (__noSuchMethod__, __count__ =  /x/g ) { {} } while(( /x/g .yoyo([[]])) && 0);");
tryItOut("let (__parent__ = this.watch(\"__iterator__\", function(q) { return q; }), ({ __parent__: __noSuchMethod__, __noSuchMethod__: prop }) = ({constructor setter: (arguments).__defineSetter__ })) { const __iterator__, prototype = <><x><y/></x></>; }");
tryItOut("M:switch(constructor = window)\f { default: return; }");
tryItOut("if(((*::* for (__parent__ in 1e4))).__defineSetter__(\"__iterator__\", Math.pow).eval(__iterator__.get)) { if (new (({}).__lookupGetter__)()) M:if(__noSuchMethod__) yield; else gc()} else {(false); }");
tryItOut("export *; const prototype\n");
tryItOut("/*infloop*/for(__count__; (eval(\"return prototype;\", this)); prop.valueOf(\"number\")) {constructor; }");
tryItOut("/*infloop*/M:for(({ __iterator__: constructor }) = ((yield {}.__lookupSetter__(\"__proto__\"))); [,]; (this === [15,16,17,18].map(<x/>, constructor))) {[1,2,3,4].slicegc() }");
tryItOut("if(([11,12,13,14].map)) {constructor = <><x><y/></x></>;{} } else  if (({ __noSuchMethod__: [, __parent__, , __noSuchMethod__, constructor], __count__: ({ x::constructor: constructor, __noSuchMethod__: __count__ }) }) = eval(\"[1,,].hasOwnProperty(\\\"__noSuchMethod__\\\")\", eval(\" \\\"\\\" \", <x/>))) let __iterator__; else break L;");
tryItOut("with({}) prototype = prototype;");
tryItOut("do {return;throw <y><z/></y>; } while(((<><x><y/></x></>.__lookupGetter__(\"__iterator__\"))) && 0);");
tryItOut("if([#1=[<x><y/></x>]].map(function (prop, prop) { ; } )) gc()");
tryItOut("/*infloop*/for(const [] = <x><y/></x> ? <><x><y/></x></> : <x/>; #1=[set]; ((<y><z/></y>.propertyIsEnumerable(\"__parent__\"))\n)) return;");
tryItOut("with({}) <y><z/></y>;");
tryItOut("\n/*for..in*/for(let constructor in <x><y/></x>) {; }");
tryItOut("return\n;");
tryItOut("if(([({}) ? @foo : constructor *= (new Function(*::*, <y><z/></y>))])) {yield <><> \"\" </></>; } else {yield @foo;yield; }");
tryItOut("try { throw StopIteration; } catch(constructor) { return; } ");
tryItOut("if(false<xxx {__noSuchMethod__}={this} />) L:if([1] ? this.__defineSetter__(\"prop\", (1 for (x in []))) : (eval(\"switch( \\\"\\\" ) { default: break; case <y><z/></y>: export *;break; case @foo: ; }\", @foo))) { if (this.__defineSetter__(\"__proto__\", function (__noSuchMethod__) { return  /x/g  } )) ;} else throw false; else /*for..in*/for(const __parent__ = * in <x><y/></x>) function(y) { yield y; return;; yield y; }");
tryItOut("{/*infloop*/for(let __noSuchMethod__ = (eval(\"<>5.0000000000000000000000,  /x/ </>\", @foo)); new new Function(*::*, window); yield <x><y/></x>) yield;let constructor; }");
tryItOut("/*infloop*/for((let (({ constructor: x::prop, __iterator__: __parent__ }) = ) __iterator__\n); eval(\"(uneval(0x99)).throw([,,] ? * : *::*.@*)\", true); (constructor.__proto__ = [15,16,17,18].map(Math.sin, (<x><y/></x> ?  ''  : prototype)) <<= ).isPrototypeOf(true)) throw  \"\" ;;");
tryItOut("switch(window ^=  \"\" ) { case this: break; default: if(<x><y/></x>) false else  if ( /x/ ) throw <x><y/></x>; else {let __proto__ = -3/0, prototype;yield <y><z/></y>; }break; case false ^= __proto__: break;  }");
tryItOut("switch(<><x><y/></x></>) { default: return;break; case <y><z/></y>: __proto__ = ({a2:z2});case *: return; }");
tryItOut("let (return __count__ = eval(\"window\", <><x><y/></x></>);) { /*for..in*/for(prototype = \f(this.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)) in <x><y/></x>) {return window; } }");
tryItOut("/*infloop*/while(void  \n)yield;");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = (prototype)[__proto__] in ( /* Comment */( /* Comment */true))) {/*infloop*/for(const __count__; <x><y/></x>; <x><y/></x>) {export constructor; }let (__iterator__ =  = __iterator__, __noSuchMethod__ = <><x><y/></x></>) { __iterator__ } }");
tryItOut("L:if([((<x/>)[@foo].__parent__)].filter(((__parent__.__count__).call).call)) { if ((export __parent__)) M:if((prop = __count__)--)  else {M:if(__parent__ =  /x/ ) {const prop;yield; } else  if ( \"\" .__count__) with([1,,])export *; else {yield;( \"\" ); } }}");
tryItOut("yield;export *;");
tryItOut("throw prototype;");
tryItOut("if(((@foo[<y><z/></y>]).valueOf(\"number\") - __noSuchMethod__.__proto__ setter= (eval(\";\", <x><y/></x>)).__defineSetter__)) (<x/>); else  if ((yield null++.eval([false if ([z1,,])]))) /*infloop*/for(Function(); <x><y/></x>.(this); {var prototype\f; }) {/*infloop*/M:for(__noSuchMethod__ =  /x/ ; <x><y/></x>; function ([y]) { }) {gc() }var __proto__; }");
tryItOut("L:if(new (function ()0x99)(<><x><y/></x></>, this)) continue ; const __count__; else  if ( /* Comment */\rconstructor = <x/>) M:if(* |= <><x><y/></x></>) (null);");
tryItOut("/*infloop*/M:while(prop = constructor){continue L; }");
tryItOut("if((({ __iterator__: ({ __noSuchMethod__: prop }), constructor: ({ __proto__: __proto__ }) }) = (__proto__ =  /x/ ))) { if ([033]) /*for..in*/M:for(var prop in window) {const prop;(this); } else {([1,2,3,4].map).applyprototype = #3={a:#3#}, __parent__; }}");
tryItOut("switch([15,16,17,18].filter(, ( ''  !== window))) { default: constructor, __noSuchMethod__;break;  }");
tryItOut("return <x/>;");
tryItOut("yield <x><y/></x>.eval(function(id) { return id })");
tryItOut("if((prop.prototype)) {return this;export *; } else  if ((__parent__.constructor setter= ({}).__lookupGetter__)) export prop; else gc");
tryItOut("/*infloop*/for(__parent__; ('fafafa'.replace(/a/g, Math.pow)); (prototype)) {(prototype); }");
tryItOut("{continue ;return this; }");
tryItOut("{} const constructor;");
tryItOut("/*infloop*/do const __proto__ = 'fafafa'.replace(/a/g, function(y) { yield y; var __iterator__, prop;; yield y; }); while(prop.constructor);");
tryItOut("__parent__ = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in __proto__) let (constructor) { yield; }");
tryItOut("/*\n*/{yield  /x/ ;__proto__ }\nprototype, __noSuchMethod__;\n");
tryItOut("with((new Date(this.__defineSetter__(\"constructor\", ([[1]]).__defineSetter__)))){if(<x/>) { if (<y><z/></y>) {prop =  '' , <><x><y/></x></>yield  /x/ ; }} else {export *; }\ngc() }");
tryItOut("{if([,]) const __noSuchMethod__ = *, __proto__; }");
tryItOut("/*infloop*/M:while((__count__ = undefined))yield <><x><y/></x></>;");
tryItOut("L:with((<><x><y/></x></> , __parent__ for (__count__/*\n*/ in new (eval)(undefined, __noSuchMethod__)) if (window)))yield\n");
tryItOut("L:with((<xxx {__count__}={__proto__} /\n>.(<x><y/></x>))){yield; }");
tryItOut("try { export '; } catch(prototype) { return <><x><y/></x></>; } \ffinally { export *; } ");
tryItOut("if((prototype = ({ __proto__: let(__count__ = window, constructor = yield <x><y/></x>) { with({}) continue ; })))  else  if (1e-81.__lookupGetter__(\"__count__\").unwatch(\"constructor.__count__\")) [1,2,3,4].map else ;\nlet prototype = <x><y/></x>, __count__; const constructor;\n");
tryItOut("/*for..in*/M:for(const [__count__, __count__] = function(id) { return id } in 1e+81) let prop, __iterator__;");
tryItOut("let(__parent__.__parent__) ((function(){with({}) { with({}) { var yield = [[]]; }  } })());");
tryItOut("while((.__defineSetter__(\"__iterator__\", <x/>)) && 0){yield <x><y/></x>;return <y><z/></y>; } const __parent__;");
tryItOut("/*infloop*/L:while((__iterator__.__count__ = __count__.prototype setter= Math.sin)){/*infloop*/for(var __iterator__ = prototype; (function ([y]) { })(); null) {\rthrow window;return; }(window); }");
tryItOut("/*infloop*/for(let constructor = <x><y/></x>; *::*; <><x><y/></x></>) return <x/>;");
