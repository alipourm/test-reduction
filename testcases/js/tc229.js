tryItOut("{throw <><x><y/></x></>;continue L; }");
tryItOut("return __proto__;");
tryItOut("export constructor\n");
tryItOut("let (__noSuchMethod__) { continue ; }");
tryItOut("/*infloop*/do {gc()/*infloop*/while(@foo.__proto__ = *::*)var prop = *; } while((((4.Math.sin)) for each (__iterator__ in  /x/g ) if ( '' )));");
tryItOut("{__iterator__ =  '' ;export prototype; }");
tryItOut("/*for..in*/for(__iterator__ = [__count__.constructor = (<x/> ? <x><y/></x> : 0.1)].map(<y><z/></y>) in [15,16,17,18].map\t(false, window)) ");
tryItOut("if([__parent__, __proto__, [, constructor, ], ] = ({ __noSuchMethod__: __parent__ })) {<><x><y/></x></> instanceof null;if(*) {;__proto__, prototype; } else  if (<x/>) {throw <x><y/></x>;yield; } else var prop = 0.1, __noSuchMethod__; const __noSuchMethod__; }");
tryItOut("if(function ([y]) { }.prototype = !<xxx {prop}={(yield <><x><y/></x></>)} />) { if (__count__) {with/*\n*/((<y><z/></y>).call(undefined, )){export __proto__; }L:if(<x/> += (new  /x/g ([,,], *::*))) {gc()yield; } else  if (new ([1,2,3,4].slice)()) throw <y><z/></y>; } else {switch((__proto__ = <><x\t><y/></x></>)) { default: break;  } }}");
tryItOut("let ([, , [], , ]) { L: {let __noSuchMethod__, __iterator__; } }");
tryItOut("with({prototype: (<x><y/></x> * [,,])}){yield; }");
tryItOut("L: {yield <x/>;prop;let __iterator__, __noSuchMethod__; }");
tryItOut("return\n");
tryItOut("L:if((null.unwatch(\"__iterator__\"))) { if (((-0).__lookupGetter__(\"prop\"))) {__count__, prototype = <x/>; }//h\n else export prop;}");
tryItOut("/*for..in*/for(const [constructor, __count__] = ([@foo for each (constructor in <x/>)]) in yield yield;//h\n) throw <x/>;");
tryItOut("if(window) { if (1e+81) {yield;yield; } else {export *; }}");
tryItOut("return <><x><y/></x></>\n;");
tryItOut("yield <x><y/></x>;");
tryItOut("switch(__count__ = prototype, prototype) { default: let(__iterator__ = <><>yyy</></>) ((function(){yield <y><z/></y>\n.__defineSetter__(\"__count__\", Math.sin) .@x:: false[<x><y/></x>];})());break; break; case 8: return <><x><y/></x></>case 9: break;  }");
tryItOut("while(([window if (<><x><y/></x></>)]) && 0){}");
tryItOut("/*for..in*/for([__parent__, __iterator__] = (undefined) in /*\n*/window & <y><z/></y>) {/*infloop*/L:do {return;var prop, prototype = <x><y/></x>; } while(function::constructor = <x><y/></x>);return; }");
tryItOut("{prototype = __count__;if((3/0 for (prop in <><x><y/></x></>))) { if ([15,16,17,18].some(Math.pow, (this.zzz.zzz))) __iterator__ = window, prop;} else __parent__ = <x><y/></x>, __count__; }");
tryItOut("with({each: constructor.((__count__|=<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\")))})with({__parent__: *::*})4.;//h\n");
tryItOut("let prop, __count__ = 1e4;\n{}\n");
tryItOut("/*infloop*/for(let __proto__; *(); this.__proto__) break M;");
tryItOut("/*infloop*/for(let x::__noSuchMethod__; 3;  /x/ ) (<x/>)\f\nif(<><x><y/></x></> + @foo) { if (* @  \"\" ) let constructor; else {;{} }}\n");
tryItOut("return;");
tryItOut("if((p={}, (p.z = <><x><y/></x></>)()) | --<x><y/></x>) if('fafafa'.replace(/a/g, (window).__defineSetter__)) {L:if(@foo) eval else {({}).__lookupGetter__ } } else  if (<x><y/></x>.(\nfalse)) throw <y><z/></y>; else  if ((constructor.( ''  && 4.).__lookupSetter__(\"prop\") ? this ? function ([y]) { } : <x><y/></x> : (__parent__-=undefined))) {throw *;{const __count__ = <x><y/></x>; } }");
tryItOut("if(<xxx>{__proto__}</xxx>.(<y><z/></y>.propertyIsEnumerable(\"<x/>;\"))) { if (#2=({constructor: this % <y><z/></y>}) >>>=__proto__) eval else {let(__parent__ = (__count__ ? ({a1:1}) : 0.1), prop = #1#) ((function(){with({}) gc()})()); }}");
tryItOut("with({}) { <x/> } ");
tryItOut("L:if(eval(\"<x><y/></x>\", <x><y/></x>)) if(window) { if (true) {gc()export constructor; }} else {;; } else let prototype = __proto__, __proto__ = *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let -0.prop in <y><z/></y> ? this : arguments) /*for..in*/for(let [constructor, __noSuchMethod__] = true <= \n* in <x><y/></x>) {yield; }");
tryItOut("/*for..in*/for([__noSuchMethod__, (__noSuchMethod__)] = <><x><y/></x></> >= this in (-1)) let __parent__, __iterator__\n");
tryItOut("do {yield <><x><y/></x></>; } while((<y><z/></y>.*) && 0);");
tryItOut("{__count__;while((({a1:1})) && 0)return this; } const __proto__;");
tryItOut("{yield; }");
tryItOut("/*infloop*/for(constructor; *::*; ({}).hasOwnProperty(null, 1.2e3)) {;; }");
tryItOut("with({}) { __count__ = constructor; } ");
tryItOut("export //h\nprop");
tryItOut("L: /*for..in*/for(const [__count__, __parent__] = <x><y/></x>(prototype, constructor) in *::*) let prop = null, __proto__ = <><x><y/></x></>;");
tryItOut("let (__noSuchMethod__) { /*for..in*/for(let [prop, , []] in ((function () { return (constructor = __parent__) } )((__proto__.prototype)))); }");
tryItOut("break ;\n;\n");
tryItOut("let (constructor = ([15,16,17,18].sort((prop).__defineSetter__, <x><y/></x>) @ (({__noSuchMethod__ getter: [1,2,3,4].map, __iterator__: <><x><y/></x></> })))) { break ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__noSuchMethod__ = ({ __count__: constructor })).watch(\"__parent__\", (((uneval(@foo))).watch).apply)\f['__noSuchMethod__'] in <y><z/></y> * <x><y/></x>.__defineGetter__(\"prototype\", Function)) {/*for..in*/M:for(let constructor(this) in  \"\" .eval(<y><z/></y>)) yield;if(__iterator__ +=  '' ) var prototype; else  if (*::*()) yield; else {return;\fyield  \"\" ; } }");
tryItOut("switch(window %= <y><z/></y>) { default: yield <x/>;case  /x/ .x::__proto__.__defineSetter__(\"__count__\", @foo): (<x/>.yoyo(<x><y/></x>));break;  }");
tryItOut("{\fthrow <y><z/></y>; }");
tryItOut("if((('haha'.split).call)().unwatch(\"__parent__\")) {export __parent__;continue ; } else {if(constructor) { if (this) let function::constructor =  /x/ , prototype; else {}} }\n");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = ({a1:1}) ? __proto__ : undefined in 1e-81) {return; }");
tryItOut("with({__proto__: [11,12,13,14].some})/*for..in*/for(var __noSuchMethod__ in ((function(y) { yield y; const prop = -3/0, __noSuchMethod__; yield y; })(__noSuchMethod__+=<x><y/></x>))){/*for..in*/for(var __noSuchMethod__ = __count__ in <x/>) break L; }");
tryItOut("M:if([__iterator__] = ({ __iterator__: prototype, prop: __proto__ })) { if (( /x/g  = function::__parent__ === ~<><x><y/></x></>[(-0) >>> <x/>])) {yield;yield function ([y]) { }; }} else {yield window;constructor }");
tryItOut("/*for..in*/for(__iterator__ in (((<><x><y/></x></>.watch(\"__parent__\", (new Function(\"continue M;\")))).watch)(*::*)))yield;");
tryItOut("/*infloop*/L:for(const [, , __count__, ] = <xxx {prototype}={arguments} />.(#3={a:#3#} && __proto__); (this.__defineGetter__(\"__proto__\", (<><bbb xmlns=\"<><x><y/></x></>\">yyy</bbb></>).watch)); <x><y/></x> % ( '' .__noSuchMethod__)) return;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(__proto__.__iterator__ = (p={}, (p.z = window)()); <><x><y/></x></> >>>=@foo; __noSuchMethod__.prototype) (<x><y/></x>.__iterator__);");
tryItOut("return;");
tryItOut("/*for..in*/for(const constructor = constructor.(this) in (p={}, (p.z = 'fafafa'.replace(/a/g//h\n, function  __proto__ () { continue ; } ))()).__lookupGetter__(\"__iterator__\")) {M:if(set.prop) {gc() } else  if (this) {const __parent__ = 1e81, function::__noSuchMethod__; } else continue\t ; }");
tryItOut("yield .2;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("if( \"\" (<x><y/></x>, <x/>)) {} else  if (((({({ prototype: [] }), __iterator__ })).hasOwnProperty(\"prop\"))) {continue L; }");
tryItOut("with( for (__proto__ in new Error(<x><y/></x>)) if (3)){<x><y/></x>;var __proto__ = <><x><y/></x></>, __iterator__;\r }");
tryItOut("for(let y in []);");
tryItOut("while(( /* Comment */<y><z/></y>) && 0){export *; }");
tryItOut("/*for..in*/L:for(var constructor = __parent__ = this in this) ");
tryItOut("try { function::prop } catch(__count__) { this.zzz.zzz; } ");
tryItOut("try { let(prototype = [this], __parent__ = (constructor.(false) || (new (1.2e3)[<x><y/></x>](<><x><y/></x></>.propertyIsEnumerable(\"constructor\"))))) { with({}) let(prop = <bbb xmlns:ccc=\"constructor\"><ccc:eee></ccc:eee></bbb>.__lookupSetter__(\"__proto__\")) { let(x::constructor = *.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }), prototype) { yield (__noSuchMethod__.prototype getter= Math.pow)[(({a2:z2}))]; } catch(__iterator__ if <><></></>) { for(let y in [5,6,7,8]) this.zzz.zzz; } ");
tryItOut("({a1:1});");
tryItOut("/*infloop*/M:for(var constructor; <x/>.__defineGetter__(\"__iterator__\", function (prototype) { \rthrow window; } ); __noSuchMethod__ = undefined/*\n*/) {export *;continue L; }");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <x><y/></x>) export *;return prototype.__count__ setter= ({}).__lookupGetter__; }\nfunction  prototype (__noSuchMethod__)new Function");
tryItOut("return");
tryItOut("if((constructor = 'fafafa'.replace(/a/g, gc))) {/*infloop*/M:do export *; while(window); } else  if (__parent__%=1e+81) switch(<><x><y/></x></>) { case __count__: throw window; }");
tryItOut("if(<><x><y/></x></>.yoyo(<><x><y/></x></>)) {return <x><y/></x>; } else  if (([<><x><y/></x></>].filter(new Function))) {null; } else { }");
tryItOut("L: yield;");
tryItOut("L: while(((__iterator__+=undefined)) && 0)(<><x><y/></x></>);");
tryItOut("while((<x><y/></x> == __proto__) && 0)export *;");
tryItOut("/*infloop*/L:while((this.zzz.zzz))return *;");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do {return eval(\"export __noSuchMethod__;\", (#1=[#1#] *= <y><z/></y>)); } while((new Function(\"yield 0x99;\")));");
tryItOut("let (__noSuchMethod__, __count__ = new RangeError(<y><z/></y>)) {  }");
tryItOut("/*infloop*/for(var __iterator__; ( { 1e81; } ); eval(\"function(y) { yield y; window;; yield y; }\", (<x><y/></x>.({}).__lookupSetter__(\"constructor\")))) {prop = <>prototype</>if(*::*) {} else {yield (-0); } }");
tryItOut("with([(-1) if (<><x><y/></x></>Math.sin)]){return; }");
tryItOut("/*infloop*/L:while(window)if(('fafafa'.replace(/a/g, (*).__defineSetter__))) { if ([__parent__] % (yield <x/>).propertyIsEnumerable(\"prop\")) export constructor;} else let __proto__ = <x><y/></x>, __proto__ = 3.141592653589793;");
tryItOut("{}");
tryItOut("yield <><x><y/></x></>\n");
tryItOut("L:if([15,16,17,18].some((*).__defineSetter__, 0/0)) gc() else  if (__parent__.(<><x><y/></x></>\f)) {yield; } else return;\nlet true;\n");
tryItOut("throw prop;");
tryItOut("export \f*\n");
tryItOut("switch(<y><z/></y>) { case [1,,]: break;  }");
tryItOut("L:if(!-3/0([0x99].map(new Function))) { if (eval(\"undefined\",  '' )\f[[,,].__parent__ = prototype]) L: export __noSuchMethod__;} else ;");
tryItOut("/*infloop*/for(let prototype; (({__parent__: (([1,,]).call(<><x><y/></x></>, )) })); ( '' .prop = <x><y/></x>.constructor = <><x><y/></x></> >= <><x><y/></x></>)) (<><x><y/></x></>);");
tryItOut("export *;");
tryItOut("/*for..in*/for(var constructor = <employee id=\"1\"><name>Joe</name><age>20</age></employee> in false.throw(prototype)) __proto__;");
tryItOut("if(this.zzz.zzz) {\f if (__count__.__parent__) {} else {M:if(<y><z/></y>) { if (3) return;} else {<x><y/></x>; }/*for..in*/for(var __iterator__ in __count__) export *; }}");
tryItOut("this.zzz.zzz;");
tryItOut("(1e4)\n");
tryItOut("/*infloop*/M:do {return; } while(case 6: break; case 1: .prototype);");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(()) {/*for..in*/L:for(const __proto__ in <y><z/></y>) var __proto__ = [z1,,]; } else  if ((<><x><y/></x></>.__noSuchMethod__ = (* ^ ({})).propertyIsEnumerable(\"constructor\")).@foo) return; else {yield;yield <y><z/></y>; }");
tryItOut("constructor");
tryItOut("try { let(prop = (new (__iterator__ = /*\n*/ \"\" )(this.__defineGetter__(\"constructor\", function(q) { return q; }), prototype)), __parent__) { yield __parent__(<x><y/></x>)//h\n; } catch(__count__ if (function(){__proto__.__proto__ = __iterator__;})()) { ((uneval(window)).isPrototypeOf(prototype =  \"\" )) = __parent__; } catch(prototype if (function(){this.zzz.zzz;})()) { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return __iterator__ = prototype; } catch(constructor if (function(){let(__noSuchMethod__ = (constructor = <>\t<x><y/></x></>).unwatch(\"__count__\"), prop) ((function(){return;})());})()) { __parent__ = __count__; } catch(constructor) { with({}) { throw StopIteration; }  } ");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__parent__ = ({constructor: <bbb xmlns=\"window\"> </bbb>,  get __iterator__(__proto__) { yield ((yield <x/>)) }  }) in <><x><y/></x></>) {constructor = undefined; }");
tryItOut("let (__parent__.prop, __parent__ = (@foo)(<y><z/></y>, <x><y/></x>)) { Math.sin }");
tryItOut("/*for..in*/M:for(var [prop, prop] =  /* Comment */false in __proto__) ;");
tryItOut("/*infloop*/for(__proto__; window.__lookupGetter__(\"__parent__\"); [null = <x/>]) let (__noSuchMethod__) { gc() }");
tryItOut("let prototype;");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/L:for(__count__ !== * ^= <x/>; new String(); (constructor = this)) {{} }");
tryItOut("{/*for..in*/for(const [prototype, prop] = ((function  prototype () { yield <x><y/></x> } ).call((!window),  ''  ? arguments : window)) in true) {<x><y/></x> } }");
tryItOut("if((<x/>.@foo).unwatch(\"constructor\")) {;export constructor; } else {return <y><z/></y>; }");
tryItOut("[3/0];");
tryItOut("L: {yyyyield; }");
tryItOut("");
tryItOut("f");
tryItOut("/*infloop*/while(<><bbb xmlns=\"(new (eval)()).unwatch(\"constructor\")\"><ccc:ddd><!--yy--></ccc:ddd></bbb></>)throw false;gc()");
tryItOut("L: {/*infloop*/while(new (Function)())<x/>; }");
tryItOut("/*for..in*/for(let __count__ =  /x/g  ? undefined : * in __proto__) {function::prototype, getter = [,,z1];export *; }");
tryItOut("\tif(prototype = <><x><y/></x></>) null; else  if (/a/gi(null, window)) {gc() } else {yield; }");
tryItOut("for(let y in [5,6,7,8]) with({}) prototype");
tryItOut("if((__iterator__.prototype).*) /*infloop*/do export *; while((5.0000000000000000000000.eval(true) > constructor.prototype setter= function(q) { return q; })); else {{} }");
tryItOut("{gc() }");
tryItOut("if(<y><z/></y>) { if ( /x/ ) return @foo;} else {export *; }");
tryItOut("L: ");
tryItOut("let (__proto__ = <x/>) { /*infloop*/for(*::*; this; 1.3) export *; }");
tryItOut("switch((((function (__iterator__, constructor) { yield <><x><y/></x></> } ).apply).call).call(new //h\n#3={a:#3#}(prop, <x><y/></x>), ((((new Function(\"(true).watch\"))).call).call(<y><z/></y>, <x><y/></x>,  /x/g ))\f)) { (yield (({__iterator__: @foo}))) }");
tryItOut("/*infloop*/for(let prototype; (#2=(true.throw(@).eval(typeof [z1]))); ([([new ([1,2,3,4].map)((false * __count__), this)].sort((this &= @foo) > [({}) if (<x><y/></x>)]))])) {}");
tryItOut("throw __iterator__;");
tryItOut("/*for..in*/for(let prop in (eval(\"__noSuchMethod__.__proto__ = window\", <x/>\f++))) if(function::__count__ = (({__iterator__ setter: (__noSuchMethod__).watch, __count__: null }))) { if (((constructor)[@foo])) {const __count__ =  /x/ ; } else {M:if(<x/>) export __noSuchMethod__;yield; }}");
tryItOut("/*infloop*/for(var ({ __parent__: get, __iterator__: __parent__ }) = <><x><y/></x></>++; constructor.constructor = *::*; [11,12,13,14].filter) __iterator__");
tryItOut("/*for..in*/for([__noSuchMethod__, prop] = 0.unwatch(\"__parent__\") in <x><y/></x> >>= *) {/*for..in*//* nogeckoex bug 349964 */ for  each(prop in {}) {const prototype; } }");
tryItOut("try { return; } finally {  } ");
tryItOut("with({__iterator__: <{constructor}><!--yy--></{constructor}>}){return *; }");
tryItOut("if(__proto__ = constructor) {gc() } else  if (__parent__.valueOf(\"number\")) {yield; }");
tryItOut("while(((new String((undefined), undefined))) && 0)throw  /x/ ;");
tryItOut("gc()");
tryItOut("/*for..in*/for(let [constructor, __count__] = <><x><y/></x></>.valueOf(\"number\") in <y><z/></y>) {gc() }");
tryItOut("with({}) prototype = prop;");
tryItOut("/*infloop*/for(({ __noSuchMethod__: ({ (1 for (x in [])): __count__ }) }) = .2.@*; *::* != (({prototype: prototype = *::*, __iterator__: true -= this })); [ /x/  >>=  '' ].map([1,2,3,4].slice)) /*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in <><x><y/></x></>) export prototype;");
tryItOut("L:with({__noSuchMethod__: function(id) { return id }}){<x/>; }");
tryItOut("for(let y in [5,6,7,8]) let(__noSuchMethod__ = __parent__ =  /x/g ) ((function(){for(let y in []);})());");
tryItOut("/*for..in*/for(const [__iterator__, __parent__] = ([* if (.2)]) in new function(q) { return q; }()) {/*for..in*/for(var __parent__ in <><x><y/></x></>) yield (-0); }");
tryItOut("M:if(0.1.yoyo(prop)) {<><x><y/></x></>; } else let __noSuchMethod__ = __parent__, __noSuchMethod__ = <x><y/></x>;");
tryItOut("L:if((__parent__ = __iterator__)) {yield; } else {export function::__parent__; }");
tryItOut("1e81;\n{}\n");
tryItOut("/*infloop*/for(constructor; 3; __iterator__) {return; }");
tryItOut("/*infloop*/for(let __proto__; -1; \f /x/g ) {(-3/0);{} }");
tryItOut("/*for..in*/for(__iterator__ = __noSuchMethod__.prop in <><><x><y/></x></></>) /*for..in*/for(var constructor in ((new Function)(<x><y/></x>.__defineSetter__(\"__noSuchMethod__\", @foo))))yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(var [__count__, prototype] = #0=[(-0).throw(<x><y/></x>)] ^ <x><y/></x>.constructor = <x/> /= Error() in (typeof __proto__ = [[1]] .@*:: ({a1:1}).hasOwnProperty(\"__count__\"))) prototype;");
tryItOut("{}");
tryItOut("/*for..in*/for([__noSuchMethod__, __proto__] = ((\nwindow).valueOf(\"number\")) in (new (--<x/>)(prototype.prototype = @foo))) /*infloop*/for(let constructor; prop = __parent__; __iterator__ = [z1,,] === undefined) yield;");
tryItOut("L: {<x/>;export *; }\n");
tryItOut("gc()");
tryItOut("M:if((let (({ prop: __count__, __count__: prop }) = #1=[#1#]) (typeof __count__))) ; else if((this.__defineGetter__(\"__noSuchMethod__\", eval))) { if (<><bbb xmlns=\"this\"> for each (prop in <y><z/></y>)</bbb></>) {let prop, __count__ =  '' ;\texport __count__; }} else {throw *::*;var prop, constructor = <><x><y/></x></>; }");
tryItOut("{{} }");
tryItOut("if(this.zzz.zzz) M:if((#2=<x><y/></x>)) { if (__noSuchMethod__ = 1e4) return;} else {(<x/>); } else {;yield; }");
tryItOut("__noSuchMethod__ = <x><y/></x>;let <x><y/></x>; const constructor\n");
tryItOut("if(((yield 0/0))) { if (({__count__ getter: /a/gi })) {yield; }} else /*infloop*/do {(<x><y/></x>);__iterator__; } while((uneval(<x><y/></x>)));");
tryItOut("gc()");
tryItOut("{{} }return  \"\" ;");
tryItOut("if(constructor.prototype) {yield this; } else  if ((5.0000000000000000000000.@foo)) throw <x><y/></x>; else export __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(/*\n*/let window , * in new (*::*)(<x/>, (uneval(this)))) {[({ __noSuchMethod__: __proto__, __parent__: __noSuchMethod__ }), ({ __iterator__: __proto__, __noSuchMethod__: prop })], __noSuchMethod__ = prop/*infloop*/while(delete true)yield <x><y/></x>; }");
tryItOut("if(0/0\n) { if ((new function (prop) { throw <x/>; } ())()) function (__noSuchMethod__, __proto__) { Function }  else {__count__, prop; }}");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("if(this) {throw prototype; } else  if (<x><y/></x>) {throw [,,]; }");
tryItOut("/*infloop*/for(var __count__; ((this).watch).call(, ); __proto__.valueOf(\"number\")) {var __noSuchMethod__\n/*infloop*/while([1,,])return; }");
tryItOut("let (*::* = <><x><y/></x></>, constructor = this) { yield  '' ; }\n/*infloop*/while(__iterator__)return;");
tryItOut("/*infloop*/while(<x><y/></x>)/*infloop*/for(let constructor; __noSuchMethod__; true) {gc()continue ; }break ;");
tryItOut("do yield __parent__; while((({__parent__: this[ /x/g ], __noSuchMethod__: throw undefined })) && 0);");
tryItOut("with({}) export *;");
tryItOut("({function::__count__: <><x><y/></x></>,  set __count__() { __count__ = * }  }) for (__count__ in <><x\t><y/></x></>)['__proto__'] = __iterator__;");
tryItOut("{ /x/g ;; }");
tryItOut("var prop = <x><y/></x>, x::__iterator__ = [[1]];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in new  /x/g (__noSuchMethod__)) {( \"\" ); }\nL:with(*::* | *::*){{} }");
tryItOut("{{export *;export __parent__; } }");
tryItOut("if((this.__defineGetter__(\"setter\", Function))) /*for..in*/for(__noSuchMethod__ = <y><z/></y> in <><x><y/></x></>) __iterator__, __count__ =  /x/g ; else  if ((function(y) { yield y; yield;; yield y; }).call(case 0: break; , )) L: {let constructor, constructor = null; } else {switch(eval(\"(<x><y/></x>.unwatch(\\\"__iterator__\\\"))\", 0x99)) { case 6: ; } }");
tryItOut("throw StopIteration;");
tryItOut("try { let(__count__ = <y><z/></y>.throw(<><x><y/></x></>)) ((function(){for(let y in [5,6,7,8]) export __proto__;})()); } finally { return prop.__proto__ setter= function  __parent__ (__count__) { return 1e-81 } ; } ");
tryItOut("if(([<x><y/></x>])) {} else export constructor;");
tryItOut("{{}return; }");
tryItOut("let ([({ __noSuchMethod__: __parent__ })] = window[<><x><y/></x></>], __noSuchMethod__) { export *; }");
tryItOut("with(true){var __noSuchMethod__ = <x><y/></x>, __noSuchMethod__; }");
tryItOut("throw __proto__;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__count__\t in ((window)( \"\" )))export *;");
tryItOut("constructor = prop;");
tryItOut("/*for..in*/for(const function::__count__ = <x><y/></x> in *) {__iterator__; }");
tryItOut("return;");
tryItOut("if((gc).apply) {return this; } else  if (new ([1,2,3,4].slice).call().throw(window)) continue ;");
tryItOut("/*infloop*/do var prototype; while(__parent__);");
tryItOut("with({__iterator__:  /x/ }){return  '' ;{;{} } }");
tryItOut("return @foo;");
tryItOut("switch((*.__count__)) { case 6: /*for..in*/L:for(const __parent__ in this) constructoryield 3.141592653589793;default: yield undefined; }");
tryItOut("if(Boolean(<x/>.__lookupGetter__(\"__count__\"), <x/>)) { if (({ constructor: [] }) = (eval(\"[[]]\", <x><y/></x>)--)) {throw __parent__; } else {\f/*infloop*/((( /x/g )[[]])); }}");
tryItOut("L:switch((({__noSuchMethod__: this}))) { case 2: break;  }");
tryItOut("for(let y in [5,6,7,8]) throw constructor;");
tryItOut("yield  /* Comment */<x><y/></x\f>;");
tryItOut("{let constructor;M:if(<x><y/></x>) {function(q) { return q; }prototype = window; } }");
tryItOut("/*infloop*/for(const prop; (this.*); 0x99.__lookupSetter__(\"__proto__\")) ;");
tryItOut("{(__iterator__ = __noSuchMethod__)constructor = __proto__*::*)); }");
tryItOut("if(function ([y]) { }) export __proto__; else  if (( /x/g )) {export *;export *; } else {1.2e3; }");
