tryItOut("do {export *;let function::__noSuchMethod__, constructor = __proto__; } while(( /x/ ) && 0);");
tryItOut("(window);");
tryItOut("while(((1e+81 for (__noSuchMethod__ in 0.1))) && 0){__iterator__ }");
tryItOut("/*infloop*/for(var [({ __count__: __parent__ }), , __noSuchMethod__, ({ prop: constructor, __parent__: __proto__ }), ({ __count__: __iterator__, prototype: ({ __count__: __count__ }) })] = this.__defineSetter__(\"__count__\", function(y) { yield y; yield #1#;; yield y; }); (false.__noSuchMethod__ = * - <><x><y/></x></>.isPrototypeOf(<x><y/></x>)); prop.__noSuchMethod__ = 1.3) ");
tryItOut("{{prototype = this;throw <y><z/></y>; } }");
tryItOut("/*for..in*/for(var [({ __count__: __noSuchMethod__ }), [__iterator__, this], prototype, , ({ window: constructor })] = (uneval((eval(\"[[]]\", <x><y/></x>))))['__parent__'] in ((new Function)(window))){return;if(new  /x/ (<x/>, *)) { if ( \"\" .@*) {Math.sin } else {throw <x><y/></x>; }} }");
tryItOut("/*infloop*/for(var constructor; ((p={}, (p.z = ([__proto__, ] = [, prop, , __count__, ]))())); ('fafafa'.replace(/a/g, (1 for (x in []))).__lookupGetter__(\"__iterator__\" let __noSuchMethod__;))) {;L:with({__proto__: (constructor.__lookupGetter__(\"prop\"))}) }");
tryItOut("/*for..in*/L:for(const constructor.constructor in (([1,2,3,4].slice)(return))){const __parent__ = window;gc() }");
tryItOut("/*infloop*/M:for(const __noSuchMethod__ = (<><x><y/></x></>(<x><y/></x>).__lookupSetter__(\"__noSuchMethod__\")); <><xxx>{__proto__}</xxx></>; ([#1#.__count__].sort([1,2,3,4].slice))) gc()");
tryItOut("M:if(eval(\"[1,2,3,4].slice\", prototype.prop getter= try { return; } catch(prop if *.propertyIsEnumerable(\"__proto__\")) { __iterator__ = __noSuchMethod__; } catch(prototype) { try { yield this; } \rcatch(__iterator__ if (function(){return arguments;})()) { gc() }  } )) {/*infloop*/M:do yield; while(( /x/g  >>= <x><y/></x>) .@x:: <x/> in arguments); }");
tryItOut("L: {(function(q) { return q; }).calllet prototype; }");
tryItOut("if(<x><y/></x>.__parent__ = *.*) gc() else  if (__parent__ = try { return this; } finally { for(let y in []); } ) __count__ = ({a1:1}); else continue M;");
tryItOut("yield;");
tryItOut("return this.zzz.zzz;");
tryItOut("/*for..in*/for(let constructor in (\f(gc)(*::* = <><x><y/></x></>))){yield false;let prop; }");
tryItOut("let (prototype, yield) { if(eval(\"(__noSuchMethod__)+=((4..*) if (*))\", #0=[( '' .isPrototypeOf(1.3))])) {return <><x><y/></x></>;/*infloop*/M:for(const __count__;  /x/g (); (<><x><y/></x></>.eval(false))) export prop; } else switch(prop %= <y><z/></y>) { default: const __proto__; } }");
tryItOut("return this;export *;");
tryItOut("for(let y in []);");
tryItOut("{var __count__ = <x/>, __iterator__;export __noSuchMethod__; }");
tryItOut("/*for..in*/for(const constructor in [false].filter(window)) throw *::*;");
tryItOut("/*for..in*/for(let [prop, yield;] = \n /x/g  in <><x><y/></x></>\n instanceof function(q) { return q; }(<y><z/></y>, @foo)) ");
tryItOut("if(<><>yyy</></>) yield;");
tryItOut("L:while((constructor = window) && 0)\fMath.pow");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ({ get __parent__(\f) { yield [[1]] >>= case undefined: break; default: export __noSuchMethod__;break; (@foo);break; return <x/>;break;  } , prop getter: prototype })) var constructor = <><x><y/></x></>, __noSuchMethod__ = <x><y/></x>;");
tryItOut("throw StopIteration;");
tryItOut("({}).__lookupGetter__");
tryItOut("(let (({ constructor: [prototype] }) = <x/>.valueOf(\"number\")) (++<x/>))['__noSuchMethod__'] = constructor;");
tryItOut("let(__proto__) { return null;");
tryItOut("L: throw (-1);");
tryItOut("{continue ;export *; }");
tryItOut("/*for..in*/for(undefined in (constructor = (true -= (function ([y]) { })()))) let __proto__ = @foo, __count__ = <x><y/></x>;");
tryItOut("yield;\nreturn <><x><y/></x></>;\n");
tryItOut("/*for..in*/for(const __noSuchMethod__ = <x><y/></x> in [,]) {(0x99);continue ; }");
tryItOut("M:with(((((constructor = <><x><y/></x></>) >= (prototype = __iterator__))).call(<y><z/></y>.yoyo(@foo), constructor, (this.__defineGetter__(\"__iterator__\", (<y><z/></y>\t.\thasOwnProperty(\"constructor\"))))))){/*infloop*/M:for( '' ++; ; ((true << *) || <x/>)) {yield;var __count__ = window, __noSuchMethod__; } }");
tryItOut("function ([y]) { };");
tryItOut("/*for..in*/M:for(const [__count__, __parent__] = ({ __proto__: ({ __noSuchMethod__: ({ function::constructor: __count__ }), prop:  __iterator__[__parent__, __iterator__, __parent__, ] }) }) = ({ constructor: ({ prop: constructor, constructor: constructor }), __proto__: ({ prototype: [__noSuchMethod__] }) }) in (false)(<y><z/></y>)) return;");
tryItOut("return; const __iterator__;");
tryItOut("if(<><zzz>(Math.sin).call(*, __proto__)</zzz></>) {((function ([y]) { })());return function ([y]) { }; }");
tryItOut("/*infloop*/M:for(var [[[], , __noSuchMethod__, ]] = <>yield  /x/g </>; let (__count__) __proto__ = *; #0=) /*for..in*/for([__iterator__, __proto__] = <x/> in -0) export prototype;");
tryItOut("/*infloop*/do {export *;throw window; } while(([null]));");
tryItOut("with({}) try { with({}) { (<x/>); }  } catch(prototype if (((return .2) for each (__noSuchMethod__ in <x><y/></x>\r) for each (__parent__ in true)))) { return <><x><y/></x></>.yoyo(@foo); } finally { return function ([y]) { }; } ");
tryItOut("/*infloop*/while(0x99 , <x/>)/*for..in*/for(const  /x/g .__iterator__ in (([1,2,3,4].slice)((yield false))))export prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in <x/>) {gc(); }");
tryItOut("if(\n__noSuchMethod__.__parent__ getter= Math.pow) {__iterator__ = <x/>;yield; } else { }");
tryItOut("if(([0 for (__proto__ in <x><y/></x>)]((({prop:  /x/ })), window.prototype))()) for(let y in []);");
tryItOut("try { with({}) { \f; }  } finally { this.zzz.zzz; } ");
tryItOut("/*for..in*/for(__iterator__ in  '' ) {prototype, prototype; }");
tryItOut("break M;");
tryItOut("M:do {(Function).call } while((<><x><y/></x></>) && 0)\nconstructor;{{function(y) { yield y; yield undefined;; yield y; } } }");
tryItOut("switch() { case <x><y/></x>.(null) != RangeError(<><x><y/></x></>, <x><y/></x>):  }");
tryItOut("if(*::*) {; } else  if (let (prop = false, __count__ = null) <><x><y/></x></>(<x/>, *::*)) {{}yield true; } else {const prototype, __noSuchMethod__ = *;{} }");
tryItOut("prototype;");
tryItOut("{export __iterator__;let prototype = 0x99, __count__ =  /x/ ; }");
tryItOut("/*for..in*/for(const prototype in new (<><x><y/></x></>)() *= getter = prototype) /*for..in*/for(var __proto__ in false) yield;");
tryItOut("if(new __parent__()) { if (\n<x/> /= case (yield 033): break; break; [z1,,] >>>=({})()) if(1e+81) { if (([<x><y/></x>])) /*infloop*/L:do yield; while( /x/  , window); else {return [,,];let __count__; }}} else gc()");
tryItOut("/*for..in*/for(const __noSuchMethod__ in *::*) {{} }");
tryItOut("{break M;return arguments ?  ''  : <x><y/></x>; }");
tryItOut("{(.2).watchreturn; }");
tryItOut("/*infloop*/for(let __proto__; 1e+81 != constructor; ([11,12,13,14].sort)) /*for..in*/for(const __count__ = [z1,,] in  /x/g ) {gc() }\nif(constructor = *::*) {let (<>[11,12,13,14].map</>) { break M; } }\n");
tryItOut("if(__iterator__.prop) {L:if([*::*]) { if ((__noSuchMethod__.__count__)\t) const __iterator__;} else \freturn 3/0;return; } else {prototype =  '' .*\n }");
tryItOut("L:switch(<x><y/></x> ? ({a2:z2}) > <y><z/></y> : ((({a1:1}), {}))) { case __proto__: let(prototype) ((function(){for(let y in []);})());break; default: M:switch(true) { case 3: default: ;break; case 9: gc() }case 3: break; case new (/a/gi)():  }");
tryItOut("L: ;");
tryItOut("{\t/*infloop*/M:for([, , , , []] = (<><!--yy--></>.hasOwnProperty(\"__noSuchMethod__\")); prop.__parent__ = yield.__lookupGetter__(\"constructor\"); (<y><z/></y>)) {export *; } }");
tryItOut("/*for..in*/for(var [constructor, prop] = this.__defineSetter__(\"prototype\",  '' ) in [,]) {if('fafafa'.replace(/a/g, new Function)) { if ( ''  instanceof prototype >= [1]) __count__; else {gc()export prototype; }} }");
tryItOut("/*for..in*/for(const __parent__ = <><x><y/></x></> in __count__) {var prototype = <><x><y/></x></>, __parent__ = __proto__; }");
tryItOut("\n");
tryItOut("(false)");
tryItOut("L: {let prototype =  '' ;let __proto__ = <>\t<x><y/></x></>; }");
tryItOut("M:do {} while(((void __parent__)) && 0);");
tryItOut("/*infloop*/for(let __parent__; ((([1,2,3,4].slice)(this) , -1))[\n(uneval( \"\" ))]; <zzz>new (<{__count__}><!--yy--></{__count__}>.(yield <><x><y/></x></>))([11,12,13,14].map, prop ? null : ({a2:z2}))</zzz>) {__count__ = __count__;/*infloop*/for(constructor = function ([y]) { }; undefined; <><x><y/></x></>) export *; }");
tryItOut("/*infloop*/for(var __proto__; (new (Boolean((p={}, (p.z = break M;)()), 033))(<y><z/></y>--, false .@x::  \"\" ).hasOwnProperty(\"prototype\")); constructor) {/*infloop*/for(let __parent__; /; #2=[5.0000000000000000000000]) let prop = 1e-81;return <x><y/></x>; }");
tryItOut("\n<><x><y///h\n></x></>;");
tryItOut("break M;");
tryItOut("/*for..in*/for(var __parent__ = new prop(@foo) in new ({}).hasOwnProperty()) while((<x><y/></x>) && 0)yield;");
tryItOut("switch(((yield (new @foo())))) { case 2:  }return;");
tryItOut("let(prop) { gc()");
tryItOut("/*for..in*/L:for(let [prototype, __iterator__] = new (({}).__lookupGetter__)(window, <><x><y/></x></>) in __proto__ .. *) throw prop;");
tryItOut("{{gc() } }");
tryItOut("L: __iterator__;");
tryItOut("with(.2 /= <\f><x><y/></x></>)return\n");
tryItOut("/*infloop*/__count__");
tryItOut("/*for..in*/for(const this['constructor'] in  /* Comment */(function ([y]) { })() >>>=new eval(*::*, <><x><y/></x></>)) {prototypereturn (function  __proto__ (__parent__, __parent__) { return __iterator__ }  == prototype =  '' ); }");
tryItOut("/*infloop*/for(var prototype; prototype =  \"\" ; *) {<x><y/></x>export *; }");
tryItOut("if(yield  /x/g ) yield <x/>; else var prototype = @foo, __proto__;");
tryItOut("/*infloop*/for(var [, , ({ function::__count__: __count__ }), [({ __parent__: <x/> }), [], constructor, , []], __noSuchMethod__] = #0=[__proto__.(<><x><y/></x></>)]; __count__.__count__ = 0(<x><y/></x>, <x/>); (Date([z1,,], <x><y/></x\f>) | __iterator__ = *::*)) export *;");
tryItOut("for(let y in []);");
tryItOut("(#1=[#1#]); const __proto__;");
tryItOut("prop = __parent__;");
tryItOut("/*for..in*/for(const [__parent__, prop] = <x><y/></x> < null in false) ");
tryItOut("with//h\n((const prop)((this >>>=false), prototype.(this))){do {yield; } while((this) && 0)\n/*for..in*/for(prop = ((-0).propertyIsEnumerable(\"__parent__\")) in this) {continue ; }if(window) yield; else {(__noSuchMethod__);*; } }");
tryItOut("if(@foo -= 1e4) {continue M;function (__iterator__, __proto__) { ; } ; } else  if (<y><z/></y> && <><x><y/></x></>) export *;");
tryItOut("if([] = eval(\"<><x><y/></x></>\", *)) { if (eval(\"#1=[#1#]\", 0)) {@foo; } else {}}");
tryItOut("if((eval(\" /x/g \", 0))) {yield <y><z/></y>; } else  if (new 'haha'.split(<zzz>false</zzz>)) {if(window) {let __iterator__; /x/  } else  if (<><x><y/></x></>) prototype = null, constructor = <y><z/></y>; else const __iterator__ = @foo, __proto__ = <x><y/></x>; } else throw 4.;");
tryItOut("M:with(prop.(false)){yield this;(new Function(\"let __proto__, __iterator__ = #3={a:#3#};\")) }");
tryItOut("/*infloop*/M:for(var __parent__; (((window).__defineSetter__).call)(); (yield __count__)) yield;");
tryItOut("window");
tryItOut("/*for..in*/for(let prototype in (([1,2,3,4].map)(1.2e3))){function(y) { yield y; yield;; yield y; }<y><z/></y>; }");
tryItOut("<x/>");
tryItOut("");
tryItOut("throw __count__;");
tryItOut("M:while((new ( '' )(<x><y/></x> > <y><z/></y>)) && 0){{}/*infloop*/for(*; __parent__; <x><y/></x>) return; }");
tryItOut("throw __iterator__;");
tryItOut("export *; const __proto__;");
tryItOut("throw null;");
tryItOut("L:do var __parent__, __iterator__ = x::__parent__; while(([15,16,17,18].sort(@foo, undefined)) && 0)\n");
tryItOut("{{}<x><y/></x>; }");
tryItOut("export *;");
tryItOut("export x::prop; const __iterator__;");
tryItOut("export __parent__;");
tryItOut("with({__iterator__: (p={}, (p.z = (null.eval(this) % <><x><y/></x></>))())}){//h\n<y><z/></y> }");
tryItOut("M:if() { if \f(prop.__defineSetter__(\"__noSuchMethod__\", \f({}).__lookupGetter__)) {{} }} else {with(eval(\"\", constructor)){export __iterator__; } }");
tryItOut("with({constructor: @foo}){if(false) prototype; else  if ( '' ) {export __proto__;<x/>; } else {prototype = <x><y/></x>;false; }export *; }");
tryItOut("/*infloop*/for((void 1e-81) <= __count__; (yyy.(constructor.((yield \tnew (function ()0.1)())))); yield (3/0).watch) /*infloop*/while(*::*)continue L;");
tryItOut("/*infloop*/for(<><x><y/></x></>; window; 0x99)  set __proto__(({ __count__: ({ __iterator__: __proto__, __proto__: prop }) }))([1,2,3,4].map).call(throw  '' ;, )__count__ = <x><y/></x>, __count__ = this  } \n");
tryItOut("if(((1e+81.hasOwnProperty(\"prototype\")) - prototype = <x><y/></x>).@*) continue ; else  if (new (({}).__lookupGetter__)() / let (__count__, prototype = __parent__) __parent__.__count__ = false) let __proto__ = [[]], constructor = null;");
tryItOut("if(*::*) const prototype = null, __noSuchMethod__ = false;");
tryItOut("let(__count__ = prototype =  /* Comment */__parent__) ((function(){with({}) { for(let y in [5,6,7,8]) throw x::constructor; } })());");
tryItOut("{return; }");
tryItOut("\n");
tryItOut("/*infloop*/for(var prop; <y><z/></y>;  /x/g ) {export *;let prop, prop; }");
tryItOut("/*infloop*/for(this.__defineSetter__(\"prototype\", ({}).hasOwnProperty); new ((__noSuchMethod__).__defineSetter__)(0x99, this); <><bbb xmlns=\"((function (__parent__)constructor())((1e-81)\n[ '' ], window))\"><!--yy--></bbb></>) {/*infloop*/L:do ; while( /* Comment */this.__defineSetter__(\"prototype\", new Function)\f);/*infloop*/M:for(let prop = <y><z/></y>; <x/>; prop) {}return; }");
tryItOut("throw StopIteration;");
tryItOut("if([z1,,]) { if ((<><x><y/></x></>.*)) export constructor; else {throw window; }}");
tryItOut("/*for..in*/for(const __count__ in this) {export *;var __proto__, constructor = true; }");
tryItOut("{gc() }");
tryItOut("for(let y in []);");
tryItOut("const prop = window;");
tryItOut("/*infloop*/L:for((#1=[<><x><y/></x></>] >>> export *\nexport __proto__;); ([__parent__.prop setter= ([1,2,3,4].map).call if (*::*)]); ((new Array(constructor = ({}), __count__)).watch(\"prop\", /a/gi))) return constructor;{ /x/g ; }");
tryItOut("do /*infloop*/do (false).watch while(<y><z/></y> <= true); while(((new function (__count__, __noSuchMethod__) { yield  \"\"  } (__iterator__))) && 0);");
tryItOut("let (__parent__) { {throw <x><y/></x>; } }");
tryItOut("/*for..in*/L:for([__proto__, prototype] = <><x><y/></x></> in <y><z/></y>) constructor = <>__proto__ getter: //h\ngc</>;");
tryItOut("with({}) let(__noSuchMethod__ = (yield ({a2:z2})), prototype) { __parent__ = __proto__;");
tryItOut("yield\n{(<y><z/></y>);break ; }");
tryItOut("/*for..in*/for(__parent__.__iterator__ in (([1,2,3,4].map)(((*::*)(window))))){<x/>; }");
tryItOut("let (({ prototype: ({ prototype: __proto__ }), __count__: constructor }), __count__ = -<x/>) { {} }");
tryItOut("M:if(void (yield false)()) for(let y in [5,6,7,8]) throw StopIteration; else yield __count__;");
tryItOut("__parent__: -0 / <y><z/></y> const prototype;");
tryItOut("yield function(id) { return id };");
tryItOut("/*for..in*/for(var [__iterator__, __count__] = 3/0 in window) export *;");
tryItOut("while((function(id) { return id }.prototype) && 0){let __noSuchMethod__ = [], __proto__ =  \"\" ;export constructor; }");
tryItOut("L:while((({prototype: (yield <x><y/></x>) })) && 0)return;");
tryItOut("yield;");
tryItOut("switch(this) { case 4: default: ;break; ((*::*));break; case 5: break;  }");
tryItOut("yield <x><y/></x>;");
tryItOut("{((-0));gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const getter in [z1,,]) {let __count__;return window; }");
tryItOut("while((*::*) && 0);");
tryItOut("export yield;;");
tryItOut("while(((prototype = __noSuchMethod__)) && 0){return new Function(); }");
tryItOut("L: {export *; }\n/*for..in*/L:for(let [prop, __count__] = (this.__defineGetter__(\"prototype\", (Math.sin).call)) in yield <y><z/></y>) while((<x><y/></x>) && 0){var prototype; }");
tryItOut("/*infloop*/for(const [prop, ] = (*)(<x><y/></x>) = (({prototype: <><x><y/></x></>})) | new 4.().eval( /x/ .*); __noSuchMethod__ !== <x><y/></x>; [(__iterator__.((!* + 1.3))) if (<><x><y/></x></>)])  ");
tryItOut("gc()");
tryItOut("throw <x/>; const let\n;");
tryItOut("if(__proto__.__parent__) {L: {__proto__ }(#1#); } else  if ((yield [[1]].__defineSetter__(\"__parent__\", (__parent__).__defineSetter__))) while((<x><y/></x>) && 0) else <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in __parent__) /*infloop*/for(const __proto__ = this; *; <x><y/></x>) const __count__, prop;");
tryItOut("let (__iterator__ = new Boolean(<><x><y/></x></>, <x><y/></x>)) { gc() }");
tryItOut("let (__count__.__proto__, [[, , ]]) { /*for..in*/for(let __parent__ = prototype in  \"\" ) {{} } }");
tryItOut("/*for..in*/L:for(let [__count__, prop] = null in (p={}, (p.z = <><x/*\n*/><y/></x></>)()))  const __iterator__;");
tryItOut("if(prototype.(window)) {let (__proto__ = @foo) { return; } }");
tryItOut("try { with({}) <y><z/></y> } finally { with({}) (<>\t<x><y/></x><\f/>); } \t");
tryItOut("/*infloop*/while(__noSuchMethod__ = ((new (<><x><y/></x></>)()).__defineGetter__(\" { yield (function(q) { return q; }).call.__defineGetter__(\\\"__noSuchMethod__\\\", function ([y]) { }) } \", function(q) { return q; })))M:with({constructor: *::*})return  \"\" ;");
tryItOut("this.zzz.zzz;");
tryItOut("L:with(eval(\"1e+81\", {})\n){yield;export *; }");
tryItOut("let __noSuchMethod__;");
tryItOut("if((__proto__ = [])) /*for..in*/M:for(const [1].__noSuchMethod__ in ((Math.sin)(((yield true)))))return;");
tryItOut("M:if(eval(\"(__noSuchMethod__);\", *::*).unwatch(\"__noSuchMethod__\")) { if (false) return <x/>;} else export __count__;");
tryItOut("throw  \"\" ;");
tryItOut("M:switch((__parent__ = <y><z/></y>)++.yoyo(__noSuchMethod__)) { default: case 8: break; case 1: gc()break;  }");
tryItOut("if(((p={}, (p.z = <><x><y/></x></>)()) ^= void 5.0000000000000000000000 + false)[(({__noSuchMethod__:  /* Comment */<><x><y/></x></> }))]) { if (<y><z/></y>( \"\" , this).unwatch(\"__parent__\")) { } else /*for..in*//* nogeckoex bug 349964 */ for  each(constructor\f in *) return;}");
tryItOut("let ( for (prop in <x><y/></x>) for (prototype(true) in *) for (__count__ in 3))\t { if((({__parent__: [] }))) gc() else  if (prototype.(<><x><y/><\n/x></>)) export *; else {<y><z/></y>; } }");
tryItOut("with({constructor: <x/>.__defineGetter__(\"__proto__\", Math.sin)}){__parent__;let prop; }");
tryItOut("/*for..in*/for(var (( \"\"  for each (__parent__ in ({a2:z2})))).__iterator__ in ((function  prop (prop) { yield (@foo.throw(<><x><y/></x></>)) } )(<><{__proto__}><x><y/></x></{__proto__}></>))){yield <><x><y/></x></>;__noSuchMethod__; }");
tryItOut("with({__proto__: <x/>.__defineGetter__(\"__iterator__\", __proto__)})export __iterator__;");
tryItOut("/*for..in*/for(var prototype((__noSuchMethod__.__iterator__)) in return.propertyIsEnumerable(\"__iterator__\")) {continue M;export constructor; }");
tryItOut("with({}) { for(let y in [5,6,7,8]) let prototype = __proto__; }  const __parent__;");
tryItOut("return; const __parent__;");
tryItOut("with({}) return this.zzz.zzz;");
tryItOut("L: return;");
tryItOut("if((-0)) export *; else yield 3.141592653589793;");
tryItOut("/*for..in*/for(__proto__ = null in __noSuchMethod__) throw <x/>;");
tryItOut("L:if(__count__) function (__proto__) { return window } ");
tryItOut("(window)\n");
tryItOut("let (__proto__) { @foo; }");
tryItOut("while(((__parent__())) && 0){/*infloop*/\tfor(__count__ = <><x><y/></x></>.*; window.propertyIsEnumerable(\"__parent__\"); __parent__, __parent__ = #2=true) {/*infloop*/for(__count__; <><x><y/></x></> |=  '' ; (uneval(<x><y/></x>))) {__noSuchMethod__ } } }");
tryItOut("export *; /x/ ");
tryItOut("let (__parent__, __noSuchMethod__) { ; }");
tryItOut("prop");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <x><y/></x>) {yield;yield <x><y/></x>; }");
tryItOut("/*infloop*/while(__parent__ = ({__parent__: (this.__defineGetter__(\"__proto__\",  set __parent__() { gc() } ))}))([1,,]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in \t[(__count__ ?  \"\"  : <x><y/></x> *= eval(\"undefined\",  /x/ )) for (__noSuchMethod__(*) in prop) if (<x><y/></x>)]) {L: {{}yield; } }");
tryItOut("with(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>){export *;window }");
tryItOut("do {__count__ = <x><y/></x>;/*infloop*/M:for(let ({ __parent__: __count__, __count__:  }) = #1=<x><y/></x>; <><x><y/></x></>.propertyIsEnumerable(\"constructor\"); (p={}, (p.z = true)())) (*); } while((--window) && 0);");
tryItOut("M:if(let (prop, __iterator__ =  '' ) true.* .@ ++<x><y/></x>) {yield <x/>;let __noSuchMethod__; }");
tryItOut("with([])/*infloop*/for(let prototype; false; <y><z/></y>) { }");
tryItOut("export *;switch((('haha'.split)())) { case 7: default: case 5:  }");
tryItOut("/*infloop*/for(prototype =  /x/ ; <x><y/></x>; @foo) {yield; }\n");
tryItOut("switch(prop.function::__parent__) { default: break; L:while(((new Function(<y><z/></y>, [z1,,]))) && 0){const function::__proto__ = window;let prototype = window; }break; break;  }");
tryItOut("switch( /x/g  <<= this) { case 2: __count__ }");
tryItOut("try { return; } catch(prototype) { yield (\n(function ([y]) { })()).__lookupSetter__(\"__count__\"); } finally { let(__iterator__, __noSuchMethod__) { 'haha'.split } ");
tryItOut("with({__parent__: ((p={}, (p.z = new Number())()))}){M:with({prototype: })if(( \"\"  += null)) ( '' ); }");
