tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in ((p={}, (p.z =  /x/ )()))) (false)\n");
tryItOut("{case ((Math.sin) for (prototype.__noSuchMethod__ in <y><z/></y>)\t if (-1)): default:  }");
tryItOut("/*for..in*/for(const [\fconstructor, prop] = (((1e4)[<><x><y/></x></>]))() in ((3).call(false, ))) ;");
tryItOut("return this;");
tryItOut("while(((<x/> * <x/>)) && 0)let __iterator__ = <x><y/></x>;");
tryItOut("/*infloop*/for(__iterator__ = <><>(window)(window, 1.2e3)</></>; ([] = window >>=  /x/ ); new *()) ;");
tryItOut("let (__count__ = window, prop = <x><y/></x>) { yield; }");
tryItOut("yield prop = __parent__.__lookupSetter__(\"prototype\");");
tryItOut("let (__parent__, __parent__ = prop =  /x/ ) { gc() }");
tryItOut("throw StopIteration;");
tryItOut("if(true) {break ;export setter; }");
tryItOut("L:if(__count__ = ([15,16,17,18].some(function (prototype, __count__) { yield <><x><y/></x></> } , @foo)) + --<><{prototype}> </{prototype}></>\f) { const __parent__; } else  if ((constructor -= null)) var __count__ = <x/>, constructor = this; else L: {export *;{} }");
tryItOut("/*infloop*/do {let (-0) = *, delete;continue L; } while( /x/ ); const __parent__;");
tryItOut("return __parent__ = undefined;");
tryItOut("/*infloop*/for(each = (new Date()).__lookupSetter__(\"__count__\").__defineGetter__(\"default: break; case <x><y/></x>.(__noSuchMethod__): break; case  /x/  && *: break; return;break; \", eval); ((* if (function ([y]) { }))); ((Function).call( '' , __iterator__.__proto__ = <>continue L;</>++))) {/*infloop*/for((([1,2,3,4].map)()); function(id) { return id }.unwatch(\"constructor\"); * |= *::*) {if(-0) __proto__ = <x><y/></x>; else  if (true) {(\f<x><y/></x>).__defineSetter__throw this; } else return [,,z1]; }/*for..in*/for(let [constructor, constructor] = #1=[#1#] .@*:: prototype in window) {throw <y><z/></y>; } }");
tryItOut("/*for..in*/for((false) in 3) gc()");
tryItOut("(__iterator__);");
tryItOut("throw __iterator__;");
tryItOut("/*for..in*/for(let ( /x/  == this)['prop'] in ((function(q) { return q; })(this.__defineGetter__(\"__proto__\",  /x/g ) - !__proto__))){(<x><y/></x>); }");
tryItOut("for(let y in []);");
tryItOut("{<y><z/></y>;yield <><x><y/></x></>; }");
tryItOut("L: return;");
tryItOut("{while(((__count__.<x><y/></x> setter= eval)) && 0){yield *::*;__noSuchMethod__ = <><x><y/></x></>; }/*for..in*/L:for(var __iterator__ in [1]) {Math.pow } }");
tryItOut("do {; } while((new (({a2:z2}))(window)) && 0);");
tryItOut("return prototype = <y><z/></y>.__lookupGetter__(\"__iterator__\")( \"\" ,  /x/g );");
tryItOut("(<x><y/></x>);");
tryItOut("/*infloop*/for(new (new Function(\"switch(<x><y/></x> instanceof [,], <><x><y/></x></>) { default: break; case  /x/ : break;  }\"))(this.__defineGetter__(\"function::__parent__\", function  __proto__ (prop) { gc() } ), [1,,]); prototype; new window(<>[__parent__].sort(this)\n</>)) {(false)\n }");
tryItOut("M:if( ''  ^ [,]) -0");
tryItOut("if((new ( /x/g )(<x/>,  \"\" ))) throw prop;");
tryItOut("M:while((*) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in true) prop;");
tryItOut("/*for..in*/L:for(let prototype in ((/a/gi)([constructor])))/*for..in*/for(let [prototype, __parent__] = delete = this in  \"\" ) export __iterator__;");
tryItOut("/*infloop*/while(('fafafa'.replace(/a/g, function(y) { yield y; yield;; yield y; }))){export *;<x><y/></x>; }");
tryItOut("with(__parent__ = __noSuchMethod__ = <x><y/></x>.valueOf(\"number\")[({x::__count__: (undefined.yoyo(<y><z/></y>)) })] ? (new (constructor = false)(prop = -1)) : ([z1] -= window)){with({}) try { let __parent__ = <x><y/></x>; } finally { let __proto__, __proto__ =  /x/ ; } if(__parent__) throw <><x><y/></x></>; }");
tryItOut("switch( /x/  <<= <x><y/></x>) { default: break;  }\nthrow continue M;;");
tryItOut("/*infloop*/L:do {/*infloop*/for(let __noSuchMethod__; this; []) continue ; } while((yield __proto__ = *::*));");
tryItOut("let (prototype(@foo), __proto__ = arguments.propertyIsEnumerable(\"prop\")) { /*for..in*/case __noSuchMethod__ = (p={}, (p.z = <y><z/></y>)()): break; __noSuchMethod__ = __noSuchMethod__;break; default: export __parent__;break; case this.zzz.zzz: yield thiscase 0: for(let <></><x><y/></x><//*</> in ((new Function)(<x/>)))yield; }");
tryItOut("if(__iterator__ = this.__defineSetter__(\"__proto__\", Function)) export *; else {let prop, prop = this; }");
tryItOut("if(<><x><y/></x></>) throw [1,,];");
tryItOut("with(<x/>)!");
tryItOut("L:if((<x><y/></x> :: window)) { if (*::*) gc()} else {break ;break M; }");
tryItOut("L:with({__proto__: (1e+81 *= [[1]])}){throw *;return false; }\n<x/>\n\n");
tryItOut("if(-1) {[<><x><y/></x></>.unwatch(\"get\")]; }");
tryItOut("var constructor = prototype, __noSuchMethod__;");
tryItOut("if(this.__defineSetter__(\"/*\\n*/[, constructor]\", __proto__)) {(#1=[#1#]); }");
tryItOut("this.zzz.zzz;");
tryItOut("{{}yield (function ([y]) { })(); }");
tryItOut("/*infloop*/for([15,16,17,18].map(function () { __count__, __proto__ = <x><y/></x>;\nyield;\n } , <y><z/></y>); ; false.__proto__) L:if(__proto__) { if ((<y><z/></y>).__defineSetter__) throw *::*; else {{}return <><x><y/></x></>; }}");
tryItOut("/*infloop*/M:for(__count__+=window; (prototype &= this); __iterator__) { }\n");
tryItOut("let (prop = (<><x><y/></x></> == <x/>), constructor) { with({function::__iterator__: __count__})gc }");
tryItOut("{if(<><x><y/></x></>) { if (null) gc()} else {({}).hasOwnPropertyyield __proto__; } }");
tryItOut("/*infloop*/L:do {} while(<x><y/></x>);;");
tryItOut("switch(prop <  \"\" ) { case 6: M:with({__noSuchMethod__: __count__ = window})return 1e-81;break;  }");
tryItOut("with({}) { prop.__noSuchMethod__ = function::__parent__; } ");
tryItOut("return\n");
tryItOut("let([, ], __parent__ = <x><y/></x>) { throw StopIteration;");
tryItOut("if(let (constructor, __count__) <x><y/></x>) this; else {function  constructor (constructor) { yield *::* } yield ; } const __iterator__;");
tryItOut("let __count__ = this\n/*infloop*/for(let ({ __count__: __iterator__ }) = window--; [window for (constructor in  \"\" )].throw(#1# ? <y><z/></y> : *::*); (<><x><y/></x></> @ <y><z/></y> <<= (new (prototype)(__noSuchMethod__)))) ([[1]]);");
tryItOut("/*for..in*/for(const __proto__ = [prototype, prop, __iterator__, __count__, ] = <x><y/></x> !== *::* in (yield (yield ( /* Comment */<x><y/></x>)) prop = <x><y/</x null > )) {function(q) { return q; } }");
tryItOut("M:while((<x/>) && 0){}");
tryItOut("return;");
tryItOut("/*for..in*/L:for(const __parent__ in ((Function)(default: break; ))){if(#1=[#1#]) yield  '' ; else  if (<><x><y/></x></>) yield [z1,,]; }");
tryItOut("with(([__count__].map(function (__parent__, __parent__) { export *; } ))){break ;{; } }");
tryItOut("while(((prototype =  /x/g  ? (function(id) { return id } ? arguments : false) : (<x><y/></x>.(1e81)))) && 0){yield <y><z/></y>; }");
tryItOut("L: ");
tryItOut("/*infloop*/while(5.0000000000000000000000 ?  ''  : [1,,]){/a/gi }");
tryItOut("with({}) { /*infloop*/for(var prototype; undefined; <><x><y/></x></>) {return this;const constructor; } } ");
tryItOut("{M:/*\n*/if(*) {constructor = <x><y/></x>, x::__noSuchMethod__; } }");
tryItOut("yield;");
tryItOut("/*infloop*/L:do {/*for..in*/L:for(var prop = <><x><y/></x></> in __iterator__) {yield @foo; } } while(constructor.__proto__ = null);");
tryItOut("if((*.prop = <x><y/></x>)) {\tvar __proto__, prototype; } else { \"\" ;( \"\" ); }");
tryItOut("/*infloop*/M:do { } while(\f(<y><z/></y>)((<x><y/></x>.*), undefined));");
tryItOut("M:if(@foo) {yield;throw <><x><y/></x></>; }");
tryItOut("\n\nexport *;");
tryItOut("break\n M\n;");
tryItOut("const prop = prototype, prototype = 1.3\n");
tryItOut("/*infloop*/do var prop = __noSuchMethod__; while( '' );");
tryItOut("{Math.pow }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = prop = <><x><y/></x></> in __count__.__iterator__ = this.zzz.zzz) ;\t");
tryItOut("with(<x/>){/*for..in*/for(let [constructor, __proto__] = * in __count__) let prototype; }");
tryItOut("/*for..in*/for(const prototype = (null--) in (0[<y><z/></y>])) if((null.eval(true))) { if (__parent__ = this) export *;} else (<><x><y/></x></>);");
tryItOut("M:do let constructor; while(((<y><z/></y>)) && 0);");
tryItOut("if(prop-=(/*\n*/window(<y><z/></y>))(<x><y/></x>) = [1].@foo.watch\f(\"__noSuchMethod__\", function(y) { yield y; if(033) {__proto__yield window; } else  if (<x><y/></x>) {export prototype;; }\nconst __count__ = <><x><y/></x></>;; yield y; })) { if (this | <x/>.__lookupGetter__(\"prop\")) {export prop;/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in <x/>) return; } else {return;/*for..in*/for(var __noSuchMethod__ in (((Math.pow).apply)(<x><y/></x>))){@foo; } }}");
tryItOut("/*infloop*/for((constructor.prototype setter= *::*); [15,16,17,18].some((new Function(\"__noSuchMethod__\")), <x><y/></x>); (window for (constructor in <><x><y/></x></>))) {yield <><x><y/></x></>;export constructor; }");
tryItOut("return;\nexport *\n/*infloop*/L:do (__noSuchMethod__); while();\n");
tryItOut("if(yield prototype-= '' ) /*for..in*/for(prototype = <><x><y/></x></> in null) {yield false; } else {/*\n*/throw <x><y/></x>;/*for..in*/for(const __noSuchMethod__ = function::__iterator__ in __iterator__) var prop, __noSuchMethod__ =  '' ; }");
tryItOut("while((prop.__defineGetter__(\"__iterator__\", [1,2,3,4].map)) && 0){(window);(this); } const __proto__;");
tryItOut("/*for..in*/for(var constructor in [,,]) {export prop;return @foo; }");
tryItOut("/*infloop*/for(const [({ __iterator__: prototype }), , , ({ __proto__: __noSuchMethod__, constructor: prototype })] = (window.__lookupGetter__(\"__count__\")); prototype; eval(\"function(q) { return q; }\",  /x/g  || <><x><y/></x></>)) {export *; }");
tryItOut("while(((uneval(( /x/g .__defineSetter__(\"prototype\",  '' ))))) && 0)0/0 for each (__iterator__ in [,,] .@ [z1,,]) for (function::__proto__ in __noSuchMethod__) if (#1#)");
tryItOut("yield <y><z/></y>;");
tryItOut("L: {{}\f\nyield;\n }");
tryItOut("/*for..in*/L:for((new function ([y]) { }(5.0000000000000000000000, <x><y/></x>)) in \r(((/a/gi).call)(<y><z/></y> &= *::*)))M:if([15,16,17,18].filter(('haha'.split).apply, (p={}, (p.z = <><x><y/></x>/*\n*/</>)()))) { if (<><x><y/></x></> >> *) {return <><x><y/></x></>;var __noSuchMethod__; }} else (-1);");
tryItOut("if(<><x><y/></x></> %= true) { if (__noSuchMethod__ = #1#)  else {gc()null; }}");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in prototype, prototype.*) {__iterator__;yield *; }");
tryItOut("let (prop, [__count__, __proto__, , ({ prop: x::__parent__, constructor: ({ __parent__: __iterator__, __iterator__: __parent__ }) }\t)] = #1=[#1#]) { /*for..in*/for([__proto__, __noSuchMethod__] = 'fafafa'.replace(/a/g, gc) in (function (__noSuchMethod__, __parent__) { yield <x><y/></x> } )(<><x><y/></x></>, <><x><y/></x></>)) with(*::*){continue M;function ([y]) { }; } }");
tryItOut("/*for..in*/for(var [__parent__, __iterator__] = ({a1:1}) in <x/>) return true;");
tryItOut("let (__count__, prop =  /x/g ) { const prop;; }");
tryItOut("with({ for (constructor in ([undefined].unwatch(\"__count__\"))--): new Function(prototype, [11,12,13,14].map)}){rconst __proto__, prototype; }");
tryItOut("if(let (({ prototype: constructor, prop: prop })) (({__count__: <><x><y/></x></>,  set prop(__parent__, __count__) ''  })) >> window.@foo\f) if(<><x><y/>\f</x></>.unwatch(\"prototype\")) {return; } else {yield;return; }");
tryItOut("/*infloop*/for(yield; (new RegExp())--; ({ set prop __parent__ (\fprop, ({ <zzz>\nnew (<x/>)(<><x><y/></x></>)</zzz>: ({ __parent__: __proto__ }), function::__noSuchMethod__: ({ constructor: [, ({ __iterator__: __noSuchMethod__ })] }) })) { throw function (prop) { this; } (); }  })) /*infloop*/while(new (*::*)()){do yield; while((<><x><y/></x></>) && 0);break ; }");
tryItOut("if(undefined) { if ({}) {break ; } else yield undefined;}");
tryItOut("/*for..in*/for(let __parent__ in this.zzz.zzz) {yield [];throw *::*; }");
tryItOut("if(<x><y/></x> += 1.2e3) {continue ; }");
tryItOut("if(([prop.__noSuchMethod__].some(__iterator__ = (\r(<x/>)( \"\" )(<y><z/></y>[[[]]]) = (function ([y]) { })())))) { if (@foo.unwatch(\"prototype\")) {{}\nexport __count__; }} else /*for..in*//* nogeckoex bug 349964 */M: for  each(\f(window.prop) in false) ;");
tryItOut("/*for..in*/for(let __count__ = 1e81.__noSuchMethod__ in <x><y/></x>) return <><x><y/></x></>\n({});");
tryItOut("while((prop = (<><x><y/></x></>)) && 0){return <x><y/></x>; }");
tryItOut("return (function  __noSuchMethod__ (prop) { let constructor; } ).call(@foo, <><x><y/></x></>);");
tryItOut("with({prop: new Error(~ '' , ((p={}, (p.z = window)()))).hasOwnProperty(\"prop\")}){if(<{constructor}> </{constructor}>) __count__;var __noSuchMethod__, __iterator__ = __parent__; }");
tryItOut("/*for..in*/for(const constructor in (([1,2,3,4].slice)(\nprop)))if(prototype, __iterator__) { if (__iterator__) var __noSuchMethod__, __iterator__;} else break ;");
tryItOut("/*for..in*/for(var prototype in (__iterator__ = this)) {var __proto__, prototype; }");
tryItOut("const __iterator__ = <x><y/></x>, __parent__;");
tryItOut("if(new  /x/g ()) { if ((<x/>.hasOwnProperty(\"__proto__\") * this)) {{}return; }} else {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ prop: prop, (prototype.constructor getter= (4.).call): <x/> }) in 'haha'.split) <!--yy-->");
tryItOut("/*infloop*/for(let x::__iterator__; undefined; ~ /x/ .isPrototypeOf(<><x><y/></x></>)) {yield false( /x/g , <x/>);(@foo)\nif(<><x><y/></x></>) { if (1e81) {continue ; }} else {} }");
tryItOut("/*for..in*/for(let [__count__, __count__] = ((p={}, (p.z = <y><z/></y>)())) in true) {return this; }");
tryItOut("M:if(((function::__iterator__ = <x><y/></x>))) { if (0.1) {[1,2,3,4].slice }} else return;");
tryItOut("L:with([1,,]/*\n*/)prototype =  '' , prototype = undefined;yield [[1]];");
tryItOut("while((__noSuchMethod__ << <x/>.throw((null)( /x/ , <x><y/></x>)) != (({ __proto__: yield }) = ((function (Z, <y><z/></y>) { setter = true; } ).call).call(1e-81, <></>, *::*))) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <><x><y/></x></>) {}");
tryItOut("yield;");
tryItOut("export constructor;");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, prop] = ({__iterator__ = (__count__ = {throw .2; }.@foo), __noSuchMethod__: (typeof __count__) })++ in new ([1,2,3,4].slice)(this ?  /x/g  : 3.141592653589793, let (prop = [z1])  '' )) {{gcvar __noSuchMethod__; }L:if((let (__iterator__) true)) yield null; }");
tryItOut("{__parent__;/*infloop*/for(var __iterator__; __parent__; @foo) gc() }\n");
tryItOut("export *; const prototype;");
tryItOut("with([15,16,17,18].some(new Function, ((0x99).__defineSetter__).call((;[<x><y/></x>]), (new <x><y/></x>(this, true)))).hasOwnProperty(\"constructor\"))export prop;");
tryItOut("__count__ = __proto__;");
tryItOut("/*infloop*/while(--this.__defineSetter__(\"__iterator__\", window))\n<><x><y/></x></>;");
tryItOut("try { break L; } finally { const constructor =  /x/g , constructor; } ");
tryItOut("return\n");
tryItOut("/*for..in*/for((prop) in (('haha'.split)(( /* Comment */this)))){yield;{} }");
tryItOut("/*for..in*/for([constructor, prototype] = Math.pow(++1.3) in  /x/g ) {/*infloop*/do __noSuchMethod__ = <x><y/></x>; while((#3={a:#3#} !== null).valueOf(\"number\") ? <><x><y/></x></> <<= (<y><z/></y>)[-1] : __count__.__parent__ = null >>> (prototype >>> <x/>)); }");
tryItOut("L:switch(__proto__.__parent__ = (this)(function ([y]) { }, <><x><y/></x></>)) { case 6:  }");
tryItOut("/*infloop*/do ; while(().prototype =  << (yield null));");
tryItOut("/*infloop*/for((#3={a:#3#})[delete #1=[#1#]]; (__parent__ = this @ <x/> || <><x><y/></x></>); 'fafafa'.replace(/a/g, Math.sin)) {yield @foo; const __proto__; }");
tryItOut("yield __parent__;(-1);");
tryItOut("yield <x/>;");
tryItOut("if(this.__defineSetter__(\"__proto__\", function (__count__) { return (yield this).throw((prototype.__count__)) } )) /*for..in*/for(var [prop, constructor] = <x><y/></x> in this) ; else  if (({ get __noSuchMethod__ __count__ (__parent__) { return  '' .prop = this.hasOwnProperty(\"prop\") }  })) {if(*::*) yield <><x><y/></x></>; else  if ( /x/ ) {{}export __parent__; }; }");
tryItOut("/*infloop*/L:for(let __noSuchMethod__ = ((*)(#1#, [z1,,])); (eval(\"gc()\", [[]])).hasOwnProperty(\"constructor\"); (yield  /* Comment */[15,16,17,18].filter((({})).watch, (yield <x><y/></x>)))) M:switch(__noSuchMethod__ = <x/>) { case 1: if(<x><y/></x> >>=  \"\" ) {__proto__; } else return;break; constructor = undefined, __count__;\nreturn ({});\nbreak; constructordefault: return;;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in @foo) {return; }");
tryItOut("/*for..in*/for(__parent__ in *::*) yield;");
tryItOut("switch((++ '' .hasOwnProperty(\"prop\"))) { default:  }");
tryItOut("return;");
tryItOut("return;\nM:if(let (__parent__ = this, __noSuchMethod__)  /x/ ) { if (eval(\"let constructor, __parent__;\",  \"\" )) {new Function[,,z1] }} else {yield <x><y/></x>;; }\n");
tryItOut("/*infloop*/for(({ function::__parent__: ({ __proto__: __iterator__ }) }) = new (Math.sin).apply('fafafa'.replace(/a/g, eval), <x><y/></x>); undefined.prototype\t; new <zzz>prop.__proto__ setter= ('haha'.split).call</zzz>((#1=[ /x/ ]) &&  /x/ , [<x><y/></x>].map(function  __parent__ (__iterator__) { yield function::prop } ) -= 3/0)) {{throw arguments;; } }");
tryItOut("/*infloop*/for((prototype = ({a2:z2})); (new (function () { return window } )(constructor, <x><y/></x>//h\n)); __iterator__.prototype getter= function(q) { return q; }) const get = constructor;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for(let prototype = (this for each (constructor in <><x><y/></x></>)) in  \"\" ) continue ;");
tryItOut("export __parent__");
tryItOut("while((((p={}, (p.z = window)()))) && 0){gc()/*infloop*/M:for(var prototype; #3={a:#3#}; *::*) \nlet __parent__ = *; }\n");
tryItOut("let(({ __iterator__: ({ constructor: ({ __proto__: [[1]], __proto__: ({ __iterator__: [], __count__: ({ prop: constructor, __parent__: constructor }) }) }) }) }), __count__) ((function(){__count__.__parent__ = __noSuchMethod__;})());");
tryItOut("if((undefined ? prop = <y><z/></y> : (arguments.__defineSetter__(\"__count__\", <><x><y/></x></>)))) this.zzz.zzz; else  if ( /x/ ++.yoyo(*::*)) {/*infloop*/do {return;({}).__lookupGetter__ } while(this for (constructor in  '' ));yield <x/>; }");
tryItOut("/*infloop*/for([<><x><y/></x></>]; (({constructor: <><x><y/></x></>})); (__iterator__-=[[1]])) {throw true;/*infloop*/for(const __proto__ = \f<><x><y/></x></>; true; true) (<><x><y/></x></>); }");
tryItOut("if( /* Comment */null)  { return this; }  else  if \t(([15,16,17,18].some(/*infloop*/for(false; <><x><y/></x></>; <><x><y/></x></>) return window;, arguments))) {;return #1=[#1#]; }");
tryItOut("if(new (({}))(<y><z/></y>, <y><z/></y>)) throw null; else  if (({prototype: this.__defineSetter__(\"__iterator__\", <x><y/></x>), __parent__: @foo.valueOf(\"number\") })) {([[]]); }");
tryItOut("if(<x/>) yield 1e4; else  if (<><x><y/></x></>) {var prop = @foo, constructor =  \"\" ; } else {let __proto__ = true; }var __iterator__, __iterator__;");
tryItOut("/*for..in*/for(__count__.__noSuchMethod__ in  \"\" ) {gc() }");
tryItOut("(1e-81);");
tryItOut("this.zzz.zzz;");
tryItOut("if(prototype) {var __noSuchMethod__ =  '' ;(5.0000000000000000000000); } else var __parent__ = __parent__, __count__ = [,,z1];");
tryItOut("let (({ __proto__: prototype })) { var ({ __count__: __noSuchMethod__ }) = delete null; }");
tryItOut("/*for..in*/for(default: /*infloop*/do {{} } while(window); in 1e-81.* .. ({}) & <><x><y/></x></>) {let(prop = arguments.__lookupGetter__(\"__parent__\"), prototype = prop) ((function(){with({}) (*::*);})()); }");
tryItOut("with({}) return (null)[(undefined !== false)];");
tryItOut("return;");
tryItOut("\rif(constructor.prototype getter= function  __iterator__ () { yield 0/0 } ) { if ((function::__parent__ = <x/>[(this.__defineGetter__(\"prop\", function(q) { return q; }))])) L:while((function(id) { return id }) && 0)continue M;} else {throw __proto__; }");
tryItOut("throw eval(\";\", undefined) .@*:: (eval(\"<><x><y/></x></>\", <y><z/></y>));if(@foo) <x><y/></x>; else break ;");
tryItOut("__count__ = <><x><y/></x></>, prop\ngc()");
tryItOut("L: {{} }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__.__proto__ in __proto__) yield;");
tryItOut("\tif(prop\n[__parent__ = <y><z/></y>]) {L:while((1e81) && 0){__count__, prop = window; } } else  if ((__proto__|=undefined.__lookupGetter__(\"__iterator__\"))) {/*for..in*//* nogeckoex bug 349964 */L: for  each(let <x><y/></x>['constructor'] in  /x/g ) {return;{} }/*infloop*/L:for(const __iterator__; this.zzz.zzz; this -= <><x><y/></x></>) {with({}) throw StopIteration; } } else /*infloop*/M:for(([1].eval(undefined)); (__parent__.prototype getter= gc); 1e4) (constructor);");
tryItOut("if((null -= <><x><y/></x></>)) {export *;{} } else  if (<><x><y/></x></> & window) return @foo; else {yield; }");
tryItOut("/*infloop*/for(__count__; ({ yield: prototype }) =  /x/g ; (-1).__lookupGetter__(\"prototype\") || (uneval(@foo)).__lookupGetter__(\"__count__\")) {yield;yield; }//h\n");
tryItOut("if(window) {; } else  if (<><x><y/></x></>) yield;");
tryItOut("export constructor;");
tryItOut("/*for..in*/L:for(function::__parent__ = <y><z/></y> in this.valueOf(\"number\")) {if(this) {/a/giexport prop; } else {yield;export __proto__; } }");
tryItOut("{gc()yield  '' ; }");
tryItOut("L:if(<x/>) \nexport *;\n else  if ((<x><y/></x> / <><x><y/></x></> % ({}) = null)) gc()");
tryItOut("/*for..in*/L:for(prototype = this.__defineSetter__(\"__noSuchMethod__\", Math.sin) in __noSuchMethod__ = 6) {var prop, __count__ = <x><y/></x>;return  '' ; }");
tryItOut("for(let y in []);");
tryItOut("L: {yield <><x><y/></x></>;/*infloop*/while(getter)const yield = 033;, prop = false; }");
tryItOut("switch(([15,16,17,18].map(([,,z1]).watch, 3.141592653589793))) { case ({__count__: new ( /x/g  && .2)(eval(\"(<x><y/></x>);\", @foo)), constructor getter: Math.sin }): throw StopIteration;break; default: break; break;  }");
tryItOut("{continue ; }");
tryItOut("if((eval(\"(@foo)[<><x><y/></x></>]\", \n3.141592653589793))) {export *;{} } else  if ([11,12,13,14].filter) {yield  /x/g ;this }");
tryItOut("if(prop = 1.3) { if (try { this.zzz.zzz; } catch(constructor if (function(){this.zzz.zzz;})()) { let(function::__proto__ = prototype, __parent__ = <x/>) { export *; } catch(__proto__) { with({}) { const __parent__ = [[1]]; }  } ) yield [z1,,]; else {;continue ; }}");
tryItOut("/*infloop*/\ffor((__iterator__ = prototype << this.zzz.zzz);  '' ['__count__'] = (true -= *::*); (__noSuchMethod__) = -*::*) yield;");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("while((eval(\"var __parent__ = <><x><y/></x></>;\", __count__ = <><x><y/></x></>)) && 0){M:if((undefined.__defineSetter__(\"__parent__\", Math.sin))) { if ((typeof <x><y/></x>)) break L;} else const __count__ = set;/*for..in*/for(var __noSuchMethod__ in #1#) {throw <x><y/></x>; } }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((Function)(((<><x><y/></x></> if (<x/>)))))){continue ; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var prototype in __noSuchMethod__.__proto__) if((this.__defineSetter__(\"prototype\", (1 for (x in [])))).isPrototypeOf(5.0000000000000000000000)) {L:if(*::*) { if (<x><y/></x>) {return; }} else var prototype = 0.1, function::constructor; } else  if ((false <<= @foo)) {} else {export *; }");
tryItOut("with({__iterator__: __count__ = __parent__})yield;");
tryItOut("({}).__lookupGetter__ do {; } while((<y><z/></y>) && 0);");
tryItOut("for(let y in []);");
tryItOut("if(<><x><y/></x></>.throw/*\n*/(<><x><y/></x></>)) const prototype = <x><y/></x>, prototype; else export *;");
tryItOut("/*infloop*/M:for(let prototype; (yield ((yield this.__defineSetter__(\"__noSuchMethod__\", *)))); true >>= this.yoyo(({a2:z2}))) yield [1]\n");
tryItOut("return;");
tryItOut("L:if(__count__ = let (__count__ = #1#, getter) <y><z/></y>) { if (-<><x><\ty/></x></>) throw __iterator__; else {/*infloop*/for(this.__defineGetter__(\"prop\", @foo); (({}).__lookupGetter__).call((<x/>.unwatch(\"__count__\") += (prototype = <x><y/></x>)), (({ __proto__: prop, __count__: __noSuchMethod__ }), __parent__.__iterator__ = <y><z/></y>) > (({prototype setter:  ''  })), (<x><y/></x>.@foo)); __count__(this) = __parent__.watch(\"prototype\", function  __noSuchMethod__ (__proto__, constructor).2).__noSuchMethod__) {var __noSuchMethod__ = <x><y/></x>, __proto__; } }}");
tryItOut("if( /x/g ) return;");
tryItOut("((this.zzz.zzz))\nyield; const prototype;");
