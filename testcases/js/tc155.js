tryItOut("/*for..in*/M:for(var __count__ = function(id) { return id } ? <x><y/></x> : <x><y/></x>[__count__ = <><x><y/></x></>] in ({prop: <><x\n><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")})) throw window;");
tryItOut("L:if( /x/g ) {continue M;let constructor, __proto__ = <><x><y/></x></>; }");
tryItOut("do export __count__; while((({__iterator__: function(id) { return id } }).__lookupGetter__(\"__proto__\")) && 0);");
tryItOut("if( /x/g .propertyIsEnumerable(\"__proto__\")) { if (function(id) { return id }) {([1,,]); } else {(@foo).apply }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in (\f(new Function)())) {export __noSuchMethod__\n }");
tryItOut("window, constructor = false\n \"\" ");
tryItOut("/*infloop*/M:for(<x><y/></x>; <y><z/></y>; __count__) gc()");
tryItOut("return;");
tryItOut("throw __proto__;");
tryItOut("if( '' .__parent__ = eval(\"with({__parent__: <x><y/></x>}){var prop;gc() }\", prop)) {let __proto__ = <x><y/></x>; } else  if (new (( /x/g ).__defineSetter__)(*::*)) ; else <x/>");
tryItOut("/*infloop*/M:for(var ({ __noSuchMethod__\f: constructor, prop: __noSuchMethod__ }) = (+<><x//h\n><y/></x></>); prop.__proto__; ({prop: true})) throw  /x/ ");
tryItOut("/*for..in*/for(({ __parent__: __iterator__, prototype: ({ __proto__: [({ __noSuchMethod__: __parent__, get: __noSuchMethod__ })] }) }) = __count__.(eval(\"<><x><y/></x></>\", <y><z/></y>).@foo) in <y><z/></y>.@foo |= (<x><y/></x>.valueOf(\"number\"))) throw undefined;");
tryItOut("constructor");
tryItOut("(<x/>);\nexport *;\n");
tryItOut("/*for..in*/for(let prop in ((({}).hasOwnProperty)(<><x><y/></x></>)))\n{continue L;gc() }");
tryItOut("let(__proto__ = --*[[* for each (__iterator__ in <x/>)]], constructor.constructor) { return this.zzz.zzz.watch(\"__proto__\", eval);");
tryItOut("{export __iterator__;/*for..in*/for(let prop in ((undefined)(<x/>)))yield; }");
tryItOut("M:do {throw *; } while((window) && 0); const prototype;");
tryItOut("/*for..in*/for(const [prototype, prop] = ([11,12,13,14].some) in __parent__) throw <><x><y/></x></>\n/*infloop*/M:for(__iterator__; __parent__ getter: (1.2e3 .@x:: *).watch.__lookupSetter__(\"__count__\"); (__proto__ = constructor.throw(null))) {gc() }");
tryItOut("/*infloop*/for(const prototype; void !({ __iterator__: __noSuchMethod__, __iterator__: __count__ }) = (4.)(<x><y/></x>); ({ __iterator__: ({ __proto__: prop }) }) = -@foo) {while(( /* Comment */window) && 0)gc()L: { } }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(let (-1).prop in (-0)) {let __proto__, prototype; }");
tryItOut("break ;");
tryItOut("/*for..in*/M:for(var constructor = [((function ()<x/>).call)(null)] in (([,,].__iterator__) ? @foo : [*::*].sort([1,2,3,4].map))) {const __count__, __count__;{}let (__proto__ = false) { export prototype; } }");
tryItOut("(true);{gc() }");
tryItOut("__proto__(__noSuchMethod__.__iterator__ = null) = __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in new (((({}).__lookupGetter__).call(<y><z/></y>, )))()) {this.zzz.zzz; }");
tryItOut("export __noSuchMethod__");
tryItOut("L: /*infloop*/L:while(yield ({a1:1}) - window){yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <x><y/></x>.(<>\f<x><y/></x></>)) return  /x/g ;");
tryItOut("with((eval(\"<x/>\", \n*::* %= this))[(window :: true.__lookupSetter__(\"__count__\")) ? __proto__-=@foo : (yield [[1]].constructor)])M:if('fafafa'.replace(/a/g, gc)) { if (undefined +  /x/g ) const __iterator__; else {export *; }}");
tryItOut("const __parent__, __proto__ = window;\n\n");
tryItOut("M:if(this) {let __parent__, constructor; '' ; } else  if (<x><y/></x>) {break L;@foo }");
tryItOut("do {switch((__iterator__.propertyIsEnumerable(\"__parent__\"))) { case 3: M:if((-0).__lookupSetter__(\"__count__\")) { if ((let (prototype = prototype, constructor =  \"\" ) <x><y/></x>)) true;} else {let set, __count__;*; }break; case undefined & __parent__: continue ;default: gc()break; case 5: break;  }with(true){function(y) { yield y; return false;; yield y; }gc() } } while((<x/>.hasOwnProperty(\"__iterator__\")) && 0);");
tryItOut("yield\n");
tryItOut("let (prop, __iterator__) { [1,2,3,4].slice }");
tryItOut("yield prop;");
tryItOut("this.zzz.zzz;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("/*infloop*/do {/*for..in*/for([try { {} } catch(__proto__ if false) { return; } catch(__noSuchMethod__ if (function(){yield;})()) { throw <x><y/></x>; } catch(__parent__) { function  __noSuchMethod__ () { yield prototype }  } finally { return; } , __iterator__] = <x><y/></x> in this) {gc() } } while((Math.pow)//h\n.call((-0), <><x><y/></x></>, 1e-81) << @foo.hasOwnProperty\t(\"__proto__\"));");
tryItOut("with({__count__: __iterator__.__iterator__ setter= (*::*).call}){switch(.2) { case prop.__noSuchMethod__ setter= null: return 0.1;break; break; default: break; case 5: gc()break; throw <><x><y/></x></>; } }");
tryItOut("const prop, constructor = window");
tryItOut("/*for..in*/for(const __iterator__ in (('haha'.split)())){throw 3;continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in 1e81) {; }\nyield;");
tryItOut("__noSuchMethod__");
tryItOut("{with({__iterator__: (__iterator__.throw([]))}){throw window; } }");
tryItOut("(null);");
tryItOut("__parent__ const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in eval(\"<><x><y/></x></>\", [[1]])) if((Math.sin).call((p={}, (p.z = __parent__)()), constructor |= this)) return; else {{break M;yield undefined; } }");
tryItOut("yield;");
tryItOut("var __iterator__ = this, __count__ = <y><z/></y>\n/*for..in*/for(const __noSuchMethod__ =  { return *::* } .prop in eval(\"const __proto__ = #3={a:#3#}, __count__;\", *::*.constructor)) __proto__");
tryItOut("/*infloop*/while(<><x><y/></x></> *= <y><z/></y> >= this){__noSuchMethod__ = 1.2e3, __count__;function (__parent__) { yield #1# }  }");
tryItOut("/*for..in*/for(let __count__ in ({ set __count__ constructor (prop, prototype)window,  { return this.valueOf(\"number\") }  getter: [1,2,3,4].map })\t) throw <><x><y/></x></>;\n'haha'.split\n");
tryItOut("M:with(eval(\"((0.1)[false].__lookupSetter__(\\\"__proto__\\\"))\", eval(\"(-3/0);\", ([,])(<x><y/></x>,  \"\" ))))/*infloop*/L:for(const prototype = __count__ = {};  \"\" .__defineSetter__(\"__iterator__\", (1 for (x in []))); <><x><y/></x></>[false]) {function(y) { yield y; return <><x><y/></x></>;; yield y; } }");
tryItOut("window");
tryItOut("do {(prototype); } while((this) && 0);");
tryItOut("/*infloop*/M:while(true.__defineSetter__(\"prototype\", [1,2,3,4].map))with({x::prototype: false <<= <y><z/></y>})gc()");
tryItOut("M:if(<><x><y/></x></>) ;");
tryItOut("let (prototype) { M:if(__noSuchMethod__.__proto__) break ; }");
tryItOut("( '' ); const __noSuchMethod__;");
tryItOut("throw  /x/g ;");
tryItOut("/*infloop*/M:for(var constructor; ((\n__proto__.__parent__ =  /x/ ).__lookupGetter__(\"__iterator__\")); ((yield ((<><x><y/></x></>.throw(*::*)).constructor)))) {L:with(3.141592653589793.prototype)return this;let __iterator__ = this; }");
tryItOut("L: break \n(*::*).__defineSetter__ const __iterator__;");
tryItOut("/*infloop*/while(<x><y/></x> = __count__ > (__noSuchMethod__ = <y><z/></y>));");
tryItOut("__noSuchMethod__ = __count__");
tryItOut("for(let y in []);");
tryItOut("M:if(new function (__proto__, __proto__){}(((eval).call(arguments, )))) { if (({ get __iterator__()1e81 === 1e81, Math.sin })) continue ; else {{}/*infloop*/L:while([,,]){const function::__iterator__ = prop;*::*; } }}");
tryItOut("var prop");
tryItOut("M:with({prototype: <x><y/></x> , this}){gc(){} }");
tryItOut("L:with('fafafa'.replace(/a/g, 'haha'.split) @ null.__defineGetter__(\"prop\", ({}).__lookupGetter__)){export *;with({})  }");
tryItOut("/*for..in*/for(let [constructor, constructor] = <y><z/></y> in null.throw(<x><y/></x>)) {/*for..in*/for(const __parent__ = delete <x><y/></x> in <><x><y/></x></>) __parent__ = \n }");
tryItOut("{export *; }");
tryItOut("<y><z/></y> const constructor;");
tryItOut("let (prototype) { /*infloop*/M:do ; while(yield); }");
tryItOut("yield <x><y/></x>\n >> this.__defineGetter__(\"prop\", false)\n");
tryItOut("while((()) && 0)(3/0);");
tryItOut("{/*infloop*/for(function::constructor = window instanceof 0; Number((( ''  if (<><x><y/></x></>))) ? __parent__ = 3/0 : <x><y/></x> ? -1 : @foo); (this.zzz.zzz)) {/*for..in*/for(const [__proto__, (eval(\"false\", <><x><y/></x></>))] = (-0 ? *::* : <x/>) in <x/>) var __parent__ = 0x99, __noSuchMethod__ = window;\f }/*\n*//*infloop*/for(__count__.constructor getter= 'haha'.split; new (this.__defineSetter__(\"__iterator__\", __parent__))(); ( /* Comment */__count__++)) var __parent__, __proto__; }");
tryItOut("return (-0).throw(*::*);");
tryItOut("/*infloop*/M:while(({ get __proto__ __count__ (constructor) { yield this }  }))break ;");
tryItOut("<xxx {constructor}={()} />");
tryItOut("switch(#2=({__parent__: (__iterator__.__proto__ getter= 'haha'.split)})) { case ({ __iterator__: __proto__ }) = <x><y/></x> .@x:: window: /*infloop*/while(Math.sin)let __noSuchMethod__;case 9: gc()break; ;break;  }");
tryItOut("/*for..in*/for(let __proto__ in ((({}).__lookupGetter__)((-1 ? 1e+81 : *::*.__lookupSetter__(\"__proto__\"))))){return this; }");
tryItOut("/*infloop*/for(new ((function (__proto__)__count__ = false, __iterator__ = (-1)).call)(<y><z/></y>, *::*); +window , 1.2e3;  && let (__iterator__ =  /x/g , __noSuchMethod__) this) {/*for..in*/for(let __proto__ in ((function(q) { return q; })( /x/g )))yield;yield; }");
tryItOut("/*for..in*/for(__count__ =  /* Comment */<><x><y/></x></> in <x><y/></x>) yield window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__(( '' .__defineGetter__(\"prop\", 0.1))) in ()) {continue ; }");
tryItOut("throw StopIteration;");
tryItOut("if(((p={}, (p.z = 1e4)()))) { if ( /x/g ) {L:while((constructor.__noSuchMethod__ setter= eval) && 0){gc()(<x/>); } }} else /*for..in*/for(var __proto__ = __proto__ in __noSuchMethod__) (constructor);");
tryItOut("/*for..in*/L:for(__parent__ in  /x/g ) {export __noSuchMethod__; }");
tryItOut("/*for..in*/for(let __count__ = new  /x/ (<x><y/></x> /= this, __iterator__) in window) let __iterator__, __noSuchMethod__ =  /x/ ;\n/*infloop*/M:for(const __iterator__ = @foo; *; <><x><y/></x></>) {let __noSuchMethod__, constructor = __iterator__; }\n");
tryItOut("switch(new (\nfunction(y) { yield y; <><x><y/></x></>;; yield y; })(constructor)) { case <bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>: break; case prop: break; default: case 1: break;  }");
tryItOut("if(([].@*)) { if ((({__iterator__: (__iterator__ = let (constructor) @foo)}))) throw null;} else /*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in [z1,,]) {throw [[1]]; }");
tryItOut("export __parent__\n");
tryItOut("if((__noSuchMethod__ = window)) this else const __count__ = __parent__, constructor;");
tryItOut("try { return; } catch(__proto__) { try { with({}) { const __noSuchMethod__ = this, __iterator__ = <x/>; }  } catch(prop) { with({}) { yield; }  } finally { for(let y in [5,6,7,8]) var //h\nconstructor; }  } finally { return; } ");
tryItOut("__iterator__ = prop;");
tryItOut("/*infloop*/for(var constructor; 1e81 & undefined >> @foo; __iterator__.(<y><z/></y>) /= (yield [,])) /*infloop*/__iterator__ getter: (*::*).__defineSetter__for(var __parent__; -<x/>; prop) {; }");
tryItOut("/*infloop*/for(let prototype; ([(function ([y]) { })() for each (constructor in <x/>)]) ? (<x><y/></x> >>=  '' ) : [1.3].filter((1 for (x in []))); ({__noSuchMethod__ setter: function(q) { return q; }, __proto__: yield ([11,12,13,14].some) })) {constructor = <><x><y/></x></>;__count__; }");
tryItOut("/*for..in*/for(var prop in #0=({__iterator__: window})) if([(({ __count__: __iterator__ }) = <x><y/></x>)].sort([1,2,3,4].slice)) { if (new (this.__defineSetter__(\"prototype\", function(y) { yield y; export *;; yield y; }))(([<x><y/></x>].map(Function)))) __noSuchMethod__, __noSuchMethod__;} else {gc()return <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in false) <x><y/></x>");
tryItOut("if(new (<><> \"\" </></>)((), typeof prop)) {break ; }\f else  if ((__count__ = new 0/0)) {gc()(window.* >> @foo ? <><x><y/></x></> : this) }");
tryItOut("if(3.isPrototypeOf(window)) { if (prop = *(<xxx>{__parent__}</xxx>)) {{}export __proto__; }} else let __iterator__, prop = 3/0;");
tryItOut("/*for..in*/for(let __iterator__ in this.zzz.zzz) {/*infloop*/while( '' )__noSuchMethod__; }");
tryItOut("throw constructor;");
tryItOut("/*for..in*/L:for(const prop in ((({constructor: eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <x/>) {(.2);gc() }\", <y><z/></y>), prototype: __count__ }))(<x/>.hasOwnProperty(\"__parent__\"))))\fyield;");
tryItOut("do break ; while((((p={}, (p.z = <x/>)()))) && 0);");
tryItOut("M:if(constructor = 1e81.eval(function ([y]) { })) {yield  '' ;/*for..in*/for(var prop in null) {const prop = this; } }");
tryItOut("/*for..in*/L:for([__noSuchMethod__, __parent__] =  /x/  in arguments) *::*;");
tryItOut("let (({ __parent__: ({ constructor: __count__, constructor: __count__ }\f) }) = const __iterator__ = <><x><y/></x></>, constructor.eval(@foo >> <x/>)) { with({prop: __parent__}){break M; } }");
tryItOut("{L: {; }if(('fafafa'.replace(/a/g, (new Function(\"throw *;\"))))) { if (__count__ = <><x><y/></x></>) {__proto__;gc() } else const __proto__ = <x/>, constructor;} }");
tryItOut("/*infloop*/while(false){function (__noSuchMethod__) { var prop, prototype; }  }");
tryItOut("break M\n");
tryItOut("if((yield  /x/ .throw([,,z1].throw(-0)))) (<><x><y/></x></>); else  if (yield __noSuchMethod__) __iterator__;");
tryItOut("{/*for..in*/for(const __noSuchMethod__ in ((<x\t><y/></x>)(* :: this)))([1,2,3,4].slice).call\t }");
tryItOut("prop, prototype;");
tryItOut("with({prop: __proto__}){function  __iterator__ (__proto__, prop) { function(q) { return q; } }  }");
tryItOut("/*for..in*/\tfor(var [prop, let] = [1,2,3,4].map in (true.__defineSetter__(\"constructor\", Function))) {constructor }");
tryItOut("{}");
tryItOut("let (({ __parent__: __parent__ }) = [[]].map((({}).hasOwnProperty).apply)) { /*for..in*/for(__proto__ = <zzz>([<><x><y/></x></><!--yy-->])</zzz>.(<y><z/></y> || (p={}, (p.z = null)())\f) in eval(\"<x><y/></x>\", .2)) [prototype, , , , __parent__] = * .@x:: 0.1, constructor = this; }");
tryItOut("/*infloop*/for(let __parent__ = ( /* Comment */*); this.zzz.zzz.*; <x><y/></x>.(5.0000000000000000000000) || <x/>.throw(arguments) .@ [] ? <x><y/></x> : [,] ===  /x/g  <<= <><x><y/></x></>) /*infloop*/L:for([] *= <x><y/></x>; __noSuchMethod__.__noSuchMethod__ getter= (function (__iterator__, prop) { yield <x><y/></x> } ).apply; (new ([1,2,3,4].map)(#1=[#1#]))) yield;");
tryItOut("/*infloop*/for(var <x><y/></x>['__proto__'] =  '' ; new false.watch(\"__parent__\", function  prototype (__count__) { yield; } )(); this.__defineGetter__(\"__proto__\", function(q) { return q; })) return <><x><y/></x></>;");
tryItOut("let ([__count__, , ({ __proto__: prop })], __iterator__ = constructor.__count__ setter= function  function::__iterator__ (__parent__) { yield true } ) { /*infloop*/M:do {gc()yield  /x/g ; } while(__iterator__); }\t");
tryItOut("if(new Iterator([,,z1], *::*)) return; else (new Function(\"export *;\"))");
tryItOut("L: {yield; }");
tryItOut("/*for..in*/M:for(const prototype in constructor) {continue ;return  /x/ ; }");
tryItOut("/*for..in*/M:for(let [__count__, prop] = new Object() in 3.@foo) {yield ; }");
tryItOut("with(.2)return;");
tryItOut("L:if(prop.([z1,,])) {return <x/>; } else  if (eval(\"return function(id) { return id };\", [1]) && (__iterator__ = constructor)) yyy");
tryItOut("if([z1]) { if (window) export *;} else {gc() }");
tryItOut("if((new (-0)(<y><z/></y>, *::*)).__lookupGetter__(\"__count__\")) <x><y/></x>; else  if (let (prototype)  '' ) {export __noSuchMethod__;export __proto__; }");
tryItOut("/*for..in*/for(var prototype in (((new Function(\"throw __parent__;\")))(*::*)))/*infloop*/do {export constructor;export prototype; } while(-0);");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = <xxx>{prop}</xxx> >> ({ __iterator__: ({ __proto__: x::__count__ }) }) = __noSuchMethod__ in this.__noSuchMethod__) {{}\n{export *; }\nyield; }");
tryItOut("Function\n/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in 3.141592653589793) {break L; } while(void  \"\" );");
tryItOut("switch(eval(\"continue L;\", ({}))) { default: case (p={}, (p.z =  /x/g )()): {}break; case (function ([y]) { })().watch(\"prop\", gc): {} }");
tryItOut("/*for..in*/for((__count__) in [, __iterator__, __parent__, ] = #1=[#1#].__lookupGetter__(\"<x><y/></x>\")) {\fL:switch(arguments++) { case <x><y/></x> :: __noSuchMethod__ =  \"\" : /*infloop*/for(const __noSuchMethod__ = (<x><y/></x>)[__iterator__]; (__iterator__ = null); (arguments)[<><x><y/></x></>]) {let __proto__ = prototype;return; }break; /*for..in*/for(let  in ((function  __proto__ (0/0)(null)))let __iterator__, prop;break; break; /*infloop*/L:while(undefined)yield (function ([y]) { })();[1,2,3,4].mapbreak;  } }");
tryItOut("M:do {with(<x><y/></x>)let prototype = constructor\n } while(((prop%=[<><x><y/></x></>].filter((Math.pow).call\f))) && 0);");
tryItOut("yield;");
tryItOut("/*infloop*/for(__iterator__;  \"\" ; this) this;");
tryItOut("/*for..in*/for(__iterator__ in (([1,2,3,4].slice)(<y><z/></y> ? __count__ : window ? <><x><y/></x></> : *.isPrototypeOf( '' )))){let (__count__ = , window) { L: {gc()let __iterator__, __parent__; } } }");
tryItOut("if((function(y) { yield y; yield;; yield y; })() >>= yield .2++) { if ( /x/ ) {({}).__lookupGetter__ const __parent__; } else prototype}");
tryItOut("let(__noSuchMethod__, __iterator__ = <><x><y/></x></> , this.yoyo((__noSuchMethod__.(1e81)))) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(const [, __noSuchMethod__, , , __iterator__] = (eval)(prototype, window); [15,16,17,18].sort(gc, (-1)); function () { yield __iterator__ } ) {{} }");
tryItOut("with({}) { with({}) this.zzz.zzz; } ");
tryItOut("with((#3={a:#3#}.__lookupSetter__(\"prop\") !== (@foo -=  /x/g ))(<y><z/></y>.yoyo(<y><z/></y>), 'fafafa'.replace(/a/g, Math.pow)))while((<y><z/></y>) && 0)/*infloop*/while(arguments){const __noSuchMethod__; }");
tryItOut("/*infloop*/L:while([window].filter([1,2,3,4].map) > 033 %= __parent__){return; }");
tryItOut("/*infloop*/for(let prop; window; <><x><y/></x></>) {arguments;export prop; }");
tryItOut("/*infloop*/do export *\n; while(<y><z/></y>);");
tryItOut("( /x/ );throw [,,];");
tryItOut("L: {{yield window;break M; } }");
tryItOut("/*for..in*/for(let __iterator__ = ({__noSuchMethod__: (function(y) { yield y; export *;; yield y; }).call(<x><y/></x>, )}) in (Function).apply()((uneval(window)))) {/*for..in*/for(prototype(<y><z/></y>) in #1#) {export __iterator__; }\n/*for..in*/L:for(let __proto__ = <><x><y/></x></> in <><x><y/></x></>) {(<x/>); }yield true; }");
tryItOut("/*infloop*/do /*for..in*/for(const  /x/ .__noSuchMethod__ in (((<x><y/></x>).call)(this))){((\f<x><y/></x>).watch).callcontinue M; } while(#0=([({ get __noSuchMethod__ __proto__ (__noSuchMethod__)<bbb xmlns:ccc=\"@foo\"><ccc:eee></ccc:eee></bbb>, prop: <><x><y/></x></> }) for each (__count__ in prototype) if (__parent__)]));");
tryItOut("/*infloop*/while((constructor in <x><y/></x>))(gc).call");
tryItOut("L: {yield;false; }");
tryItOut("with({constructor: <x><y/></x>++}){export *; }");
tryItOut("if([15,16,17,18].map(function (__parent__) \"\" , (#1=[<><x><y/></x></>]))) { if (\nRangeError(window,  '' )) /*for..in*/for((1.2e3 for each (prop in prop)) in ((/a/gi)((__count__ = eval(\"@foo\", true)))))export *; else Math.pow}");
tryItOut("__noSuchMethod__;");
tryItOut("M:if((new Iterator())) M:if(__iterator__) { if (this.zzz.zzz) {}} else {var __iterator__;constructor = 1.2e3; }");
tryItOut("/*infloop*/for(const __proto__ = (({__parent__: __noSuchMethod__ = <x/>})) || prototype.__count__ setter= function  __parent__ (__count__)<><x><y/></x></>\f; *; ({{<><x><y/></x></>; }: ([undefined].some(function(y) { yield y; ;; yield y; }))((*::*)[<y><z/></y>]) })) /*for..in*/L:for(function::prototype = (<y><z/></y>['__count__'] =  \"\" .__defineGetter__(\"__count__\", eval)) in (p={}, (p.z = this.valueOf(\"number\"))())) {/*infloop*/while(__iterator__ =  /x/ )var __iterator__ = false; }");
tryItOut("/*infloop*/for(const __proto__; prototype = (__count__.(<><x><y/></x></>.yoyo( /x/g ))); (new (+<x/>)(__parent__))) {L: {;(-1); }\nL: break ; }");
tryItOut("switch((*::*)[<x><y/></x>]) { case arguments.throw(null): export __count__;\nexport *;\nbreak; /*for..in*/M:for(const __noSuchMethod__ in (((function (__iterator__) { let constructor; } ).apply)((this.__defineSetter__(\"__iterator__\", Function)).@*))){throw *::*\f; }\tbreak; prototype = __proto__;break;  }");
tryItOut("/*infloop*/for(var __iterator__; (new @foo(0x99, @foo)), ({a1:1});  /x/ ) {throw  '' ; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in ((/a/gi)((-0))))/*infloop*/while(#1#){export constructor;{} }");
tryItOut("{if(null)  else  if (1.3) yield; }");
tryItOut("yield undefined;");
tryItOut("/*for..in*/L:for(let prototype in <><x><y/></x></>) (5.0000000000000000000000);");
tryItOut("/*infloop*/for(__count__; prototype = (1 for (x in []))(eval(\"[15,16,17,18].filter(function(q) { return q; }, (<y><z/></y>))\", eval(\"break L;\", <><x><y/></x></>).__count__), (((1 for (x in [])))(<x><y/></x>.propertyIsEnumerable(\"prop\"), <><x><y/></x></>))); (this.zzz.zzz).unwatch(\"__count__\")) /*for..in*/for(var (__parent__ = window >> [*::*].map(/a/gi)) in prototype) {continue M;gc() }");
tryItOut("default: break; case 2: case (this.zzz.zzz): let __count__ = <y><z/></y>, __noSuchMethod__ = null;break; case  /* Comment */#3={a:#3#}: /*for..in*/for(__iterator__ in ({a2:z2})) ([[]]);");
tryItOut("/*for..in*/M:for(const prototype = (__parent__.__proto__ = <y><z/></y>) in <><x><y/></x></> === false) yield;\n");
tryItOut("export *\n");
tryItOut("/*for..in*/M:for(const __iterator__ =  \"\"  in  /x/g ) { }");
tryItOut("function(q) { return q; }\nreturn;\n({}).hasOwnProperty\n\n");
tryItOut("L: {[1,2,3,4].map }");
tryItOut("{}");
tryItOut("/*for..in*/for(const [constructor, prop] = __parent__ in __parent__) {continue ;[1,2,3,4].map }");
tryItOut("if(((this >>> @foo)(*::*))) {{{} } }");
tryItOut("if(<x/>) { if (null) {; }} else yield <x/>;");
tryItOut("\nwhile(((__iterator__+=*::*)) && 0){with({__proto__: new (<x><y/></x>)()}){yield; } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(eval(\"(<y><z/></y>);\", (({})++)); ; <x><y/></x> ? <x><y/></x> : arguments.hasOwnProperty(\"__iterator__\")) {export __noSuchMethod__; }");
tryItOut("{(<x><y/></x>);return <><x><y/></x></>; }");
tryItOut(";");
tryItOut("export *;yield __noSuchMethod__;");
tryItOut("return  /x/  * <x/>;");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*infloop*/for(const prototype; this.zzz.zzz; window.__defineGetter__(\"prototype\", (({}).__lookupGetter__).call)) {yield; }");
tryItOut("/*infloop*/do {__noSuchMethod__ = window, constructor = window; } while([([15,16,17,18].filter(function(y) { yield y; continue L;; yield y; },  '' ))].filter(Math.pow));");
tryItOut("L: {(undefined);const constructor, prototype; }");
tryItOut("{with(<x><y/></x>){window; }\n; }");
tryItOut("if(new ([[]])()) { if (<><x><y/></x></>.throw(prop)) {continue ; }} else {function  __proto__ (prototype, prototype) { yield <x><y/></x> }  }");
tryItOut("while(((yield <x><y/></x>)) && 0){yield; }");
tryItOut("/*for..in*/L:for(var [__iterator__, constructor] = (false.propertyIsEnumerable(\"constructor\") for each (( \"\" ).watch in <><x><y/></x></>)) in [,,]) if(3/0) {}");
tryItOut("let __count__ = #3={a:#3#}, __count__ = *::*;\narguments;\n");
tryItOut("var __proto__ = false, __iterator__;>");
tryItOut("let(prototype) { with({}) { return <y><z/></y>; } ");
tryItOut("const __count__ = <><x><y/></x></>\nyield;");
tryItOut("M:if((<><x><y/></x></>.@*)) {window; } else  if ((RangeError()))  /x/ ;");
tryItOut("with(__parent__ = @foo){with({__count__: null.propertyIsEnumerable(\"function::__noSuchMethod__\")}){var function::__proto__; }/*for..in*/for(let [__count__, constructor] = [*].filter(({}).__lookupGetter__) in <x><y/></x>) {{}(1 for (x in [])) } }");
tryItOut("do {gc() } while((prop = <><x><y/></x></>) && 0);");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = (<><!--yy--></>.((true >= <><x><y/></x></>))) < prop = 3 in [<x><y/></x>.isPrototypeOf(<y><z/></y> ^ this)].sort(Function)) L:while(([] =  '' ) && 0){return false;return; }");
tryItOut("L: {throw  /x/g  &= <><x><y/></x></>;/*infloop*/while((__parent__ = #3={a:#3#}\n)){{const __count__; }; } }");
tryItOut("L:switch(3.141592653589793) { case 7: throw this;break;  }");
tryItOut("if(([, , ] = prop)) {return []; } else  if ([*::* if (__iterator__)]) prototype = [z1], __proto__ = (*::*); else {false\n;continue ;\nreturn;\n }");
