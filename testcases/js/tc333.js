tryItOut("/*for..in*/for(var prototype in [,]) {}");
tryItOut("M:with(([11,12,13,14].sort) <<= <y><z/></y>){ }");
tryItOut("/*infloop*/L:for((<><x><y/></x></>.@foo); prototype = <><\fx><y/></x></>; --[,]) {var __parent__;yield;//h\n }");
tryItOut("with({}) for(let y in [5,6,7,8]) function  prototype (prop)<x><y/></x>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x/>) gc()/*for..in*/for(constructor = false in \t<y><z/></y>) {([[1]]); }");
tryItOut("{return;throw <><x><y/></x></>; }");
tryItOut("while(((({__proto__: ({}).__lookupGetter__ }))) && 0)/*for..in*/M:for(const __noSuchMethod__ = (-1).throw( \"\" ) >>> true.unwatch(\"__noSuchMethod__\") in (let \t(__parent__) <><x><y/></x></>)) do return window; while((({a2:z2})) && 0);");
tryItOut("return\nlet (__noSuchMethod__) { with(<><x><y/></x><\f/>)throw <x/>; }");
tryItOut("return;");
tryItOut("M:if(__proto__.propertyIsEnumerable(\"constructor\")) return <x/>; else  if (window) {(<x><y/></x>).watchyield; } else (<x/>); const __parent__;");
tryItOut("L: /*for..in*/for(((__iterator__)) in new  \"\" ()) let __proto__ = this;");
tryItOut("return;");
tryItOut("/*infloop*/while((\f(<x><y/></x>)(*::*) = __parent__ =  '' ))M:if(null\ngc()");
tryItOut("L:if((033 ^= __parent__++)) {yield constructor;break ; }");
tryItOut("L:with({__iterator__: ((<><x><y/></x></>.@foo))((function ([y]) { })().valueOf(\"number\"))}){return .2;continue ; }");
tryItOut("return <y><z/></y>");
tryItOut(";\nreturn <><x><y/></x></>;\n");
tryItOut(";");
tryItOut("with({__parent__: yield (({__proto__: (function ([y]) { })()}).__defineGetter__(\"__count__\", function (__noSuchMethod__) { return *::* } ))});");
tryItOut("with({constructor: constructor <=  \"\" }){(false); }");
tryItOut("/*infloop*/for([, [, ({ prop: ({ constructor: __proto__ }), __iterator__: ({ prop: __noSuchMethod__, __iterator__: __proto__ }) }), , ], , , ({ __iterator__: ({ __count__: prototype }), prototype: ({ prototype: ({ __count__: __proto__, constructor: ({ __iterator__: __iterator__ }) }) }) })] = (function  ({ constructor: function::__iterator__ }) () { yield (__noSuchMethod__.prop =  '' ++) } ).call\t(new (<x/>.eval(*::*))(({ __iterator__: get }) = ({ __parent__: __proto__, __iterator__: __proto__ })), __parent__.propertyIsEnumerable(\"__proto__\"), undefined < 3).__lookupSetter__(\"__count__\"); [#1=[#1#].*] ? (window > <x/>) >>> 5.0000000000000000000000.unwatch(\"prototype\") : (__iterator__ = constructor); (<y><z/></y>.__parent__ & ( /* Comment */(<y><z/></y>)[0.1]))) prop");
tryItOut("with({}) { function  __proto__ ()return; } ");
tryItOut("{/*infloop*/do {(<x/>); } while(.2);let __noSuchMethod__;\nconst __iterator__ = window, __noSuchMethod__;\n }");
tryItOut("/*infloop*/while(prop)var __noSuchMethod__, __count__; const __count__;");
tryItOut("{/*for..in*/\fL:for(var [prototype, __count__] =  /* Comment */undefined .@x:: throw  /x/g ; in __noSuchMethod__ = __noSuchMethod__) {{;var __parent__; }export prototype; } }");
tryItOut("L:if(\nthis.watch(\"__iterator__\", eval))  else  if (new Function()) export __iterator__;");
tryItOut("if((p={}, (p.z = ( '' ()).isPrototypeOf(__noSuchMethod__.prototype))())) break L; else  if (delete #1#) {{var function::__iterator__, prop;yield; } }");
tryItOut("M:do ; while((0.watch(\"constructor\", function  __iterator__ (constructor) { __parent__ = <x><y/></x>; } ) * ((<y><z/></y>)())) && 0);");
tryItOut("{export *;M:if(*) {; } }");
tryItOut("{(<y><z/></y>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */try { return; } finally { __proto__ = __proto__ = window, __parent__ = -0; }  for  each(<y><z/></y> in __parent__) ");
tryItOut("M:if(eval(\"export __proto__;\", <><x><y/></x></>)) {/*infloop*/L:for(<x/>; <><x><y/></x></>; <x/>) export constructor;export *; } else {yield window;yield window; }");
tryItOut("if( /x/ )  else  if (*::*.propertyIsEnumerable(\"__parent__\")) {throw ({a1:1});(this); }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let __noSuchMethod__ = throw <><x><y/></x></>;.isPrototypeOf(<><x><y/></x></>) in this) {export *; }");
tryItOut("L: {/*for..in*/for(prop in ((function  prop (__noSuchMethod__, __proto__) { return; } )(this.zzz.zzz))){{} }if(new <x><y/></x>(<x><y/></x>)) (gc()).__defineSetter__ else  if (1.3) {gc() } else let __count__; }");
tryItOut("with(null |  /* Comment */3/0){M:if((false(this,  \"\" ))) { if ((constructor.function::prop = (new Date()) && ((function (__noSuchMethod__, try { \fgc() } finally { continue ; } ) { yield __iterator__ } ).call(window, *)))) {(<><x><y/></x></>); } else let prototype =  /x/g , const __proto__ = *::*;;}yield (-1.__lookupSetter__(\"constructor\")); }");
tryItOut("L: if(<x><y/></x>) {var prop = true, __noSuchMethod__ = this;{} }");
tryItOut("L: yield;");
tryItOut("return;");
tryItOut("if(\n<x/>) {return; } else  if ((yield <x><y/></x>)) throw prototype;");
tryItOut("/*infloop*/L:for(var [[[, , ({ __parent__: __parent__, prop: [, ({ __noSuchMethod__: __proto__, constructor: prototype }), ({ __count__: __iterator__ }), prototype] }), ], , , , ], , constructor, ] = (function  __parent__ (prop, prop) { return <><x><y/></x></> } .yoyo((new (<><x><y/></x></>.unwatch(\"__parent__\") in * & <x/>)()))); [11,12,13,14].some; ( /* Comment */undefined)) export prop;");
tryItOut("gc()");
tryItOut("if((({ __noSuchMethod__: [__parent__, ], constructor: __iterator__ }) = prop = *::*.yoyo(@foo))) return <x><y/></x>\n else  if (__proto__) {with({prototype: <><x><y/></x></>})yield @foo;return; } else (__iterator__.__proto__)");
tryItOut("let(__iterator__, prototype = /*for..in*/M:for([__parent__, __proto__] =  \"\"  in [[1]]) {}) { this.zzz.zzz;");
tryItOut("{throw *::*; }");
tryItOut("let (__count__) { /*infloop*/ }");
tryItOut("M:with({__count__: __parent__ = ( /x/ .unwatch(\"__parent__\")) != (undefined .. var prototype = window, function::prop;)}){M:if(((([1,2,3,4].slice).call((delete <><x><y/></x></>), @foo.isPrototypeOf([,,]), <y><z/></y>)))[<><bbb xmlns=\"undefined\">yyy</bbb></>]) { if (<>yyy</>) return false; else }yield (-0).__lookupSetter__(\"__parent__\"); }");
tryItOut("if(__parent__.prototype) yield; else ([1,2,3,4].slice).call");
tryItOut("!<x/>.unwatch(\"__noSuchMethod__\"), !__proto__");
tryItOut("/*infloop*/do {gc()return undefined; } while(( { const __count__ = window, __proto__; } .hasOwnProperty(\"__parent__\") ? [1,,].@* : [15,16,17,18].map([1,2,3,4].slice, -0)));");
tryItOut("yield\n__count__, __iterator__ = <><x><y/></x></>;");
tryItOut("with({__count__: [,,z1]}){if(-1) {export __iterator__;yield; } else  if ([z1,,]) *; else new Function }");
tryItOut("/*for..in*/for(var prop((-1)) in (((1 for (x in [])))([{<y><z/></y>; } for (__count__ in try { prototype; } catch(__iterator__) { ; } )])))M:if(<x><y/></x>) {let prop, __noSuchMethod__ = __iterator__;return window; } else  if (null) {return <x><y/></x>;; } else {const prop;{} }");
tryItOut("let(__proto__(\n<><x><y/></x></>)) ((function(){var __noSuchMethod__;})());");
tryItOut("L:if(__proto__.(__noSuchMethod__)) { { return <><x><y/></x></>.__lookupGetter__(\"__count__\") &= <x/>[3/0] } /*infloop*/L:\fdo throw <x><y/></x>; while(\fthis); } else 1e+81");
tryItOut(" /x/g ;");
tryItOut("/*for..in*/for(const [__count__, prototype] = prop.prototype getter= Function in (yield [*])) export *;");
tryItOut("with({__count__: ([1,2,3,4].slice).call( /x/g , ({}), prototype)}){/*infloop*/L:for(let __proto__ = prototype.(([({})].sort((new Function(\"prototype, __count__;\"))))); this.zzz.zzz; this) gc() }");
tryItOut("/*infloop*/do {gc()gc() } while(window);");
tryItOut("/*infloop*/for(var __proto__; __proto__ = ([11,12,13,14].map); [\n1e-81].__defineSetter__(\"__proto__\", function  prototype ()(<x><y/></x>)[0.1] -= (<><x><y/></x></>++)).watch(\"__noSuchMethod__\", ({}).hasOwnProperty)) if( \"\" ) { if (<y><z/></y>) (__iterator__);} else {throw <><x><y/></x (/a/gi).call ></>;var __count__ = <y><z/></y>; }\n");
tryItOut("L:do {yield @foo; } while((*::*) && 0);");
tryItOut("/*for..in*/for(var prototype = new (/a/gi)(undefined) in (typeof <><x><y/></x></>)[<x/>]) {M:while(((__parent__ = <x/>)) && 0){return 0/0; } }");
tryItOut("yield eval(\"/a/gi\", <x/>);");
tryItOut("/*infloop*/for(undefined; (this([[]])); ((*)[[<x><y/></x> if (<><x><y/></x></>)]])) continue ;");
tryItOut("return; const prop;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (([1,2,3,4].slice)(this.__defineGetter__(\"__iterator__\", function (x::prop, prototype)<x><y/></x>)))){return (new (({a1:1})).apply(<x><y/></x>, true)); }");
tryItOut("default: break; case 4: /*for..in*/for([prop, __noSuchMethod__] = ([15,16,17,18].some(({}).hasOwnProperty, *::*)) in (this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty))) {'fafafa'.replace(/a/g, {});export *; }case 7: M:with({constructor: <y><z/></y>})break; ");
tryItOut("prop.@foo const __noSuchMethod__;");
tryItOut("(__parent__)\n");
tryItOut("/*for..in*/for(const constructor = #1=[#1#] in  '' ) export *;/*infloop*/while((__iterator__ = 5.0000000000000000000000)){}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in __proto__\n %= !033) return null;");
tryItOut("/*infloop*/L:for(let __parent__ = <x/>; this; constructor) {}");
tryItOut("M:if((__iterator__)) ( \"\" );");
tryItOut("const delete, __iterator__ = [,,z1]; const prototype;");
tryItOut("let(__parent__) { yield ({__proto__: <x/> });");
tryItOut("L:switch((prop)()) { case 4: <><x><y/></x></>;break; let __count__, try {  } catch(x::constructor) { (window); } finally { gc() } ;break; break; case 1: 'haha'.splitcase 5:  }");
tryItOut("with(<x/>){export *;throw window; }");
tryItOut("return;");
tryItOut("{{}let constructor = <x/>, prototype = this = <y><z/></y>; }");
tryItOut("do /*for..in*/for(const [__noSuchMethod__, prototype] = this.__defineGetter__(\"__iterator__\", function(y) { yield y; <y><z/></y>;; yield y; }) in <x><y/></x>) let __noSuchMethod__; while((__count__ = undefined) && 0);");
tryItOut(" const function::prop;");
tryItOut("if(++(new Function(\"const __noSuchMethod__;\"))) {L:with({__count__: ({a1:1})}){function  constructor (__noSuchMethod__) { constructor, __proto__ = constructor; } throw setter; }yield __iterator__; } else window;");
tryItOut("return ([z1]).throw(<x><y/></x>.__lookupGetter__(\"constructor\"));");
tryItOut("[({ __count__: ({ constructor: prototype, constructor: __proto__ }) }), , ({ constructor: <employee id=\"1\"><name>Joe</name><age>20</age></employee> }), [__iterator__, , ({ prototype:  \"\"  })]] = prop;");
tryItOut("/*infloop*/for(__parent__; <y><z/></y>; window) L:switch((<><x><y/></x></> .@*:: <x><y/></x> , #0=({__iterator__: -3/0}))) { case __proto__.__proto__ = <y><z/></y> *= window.__defineSetter__(\"__iterator__\", function(y) { yield y; throw <><x><y/></x></>;; yield y; }): break; break; case 6: {}break;  }");
tryItOut(" if (<xxx {prop}={Exception(@foo)} />)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.prototype in 'fafafa'.replace(/a/g, (( \"\" ).__defineSetter__).apply)) (({}).hasOwnProperty);");
tryItOut("if(({ __count__: __iterator__ }) = window)  else  if (\tprototype.__parent__) {yield; }");
tryItOut("L: ");
tryItOut("\nlet __iterator__ = @foo;\n");
tryItOut("throw prop;");
tryItOut("throw __parent__;");
tryItOut("while((this.__defineSetter__(\"prop\",  for ( in (uneval(<><x><y/></x></>))))) && 0)yield *::*;");
tryItOut("return;");
tryItOut("if(__noSuchMethod__) {var __count__, __parent__; } else  if (4.) {break L;export *; }");
tryItOut("return <><x><y/></x></>;");
tryItOut("with({__count__: constructor.__proto__}){switch(prototype) { default: break; case <><x><y/></x></>: break; break; case 2: export __proto__;break;  }export *; }");
tryItOut("with((__iterator__ = null.propertyIsEnumerable(\"__iterator__\")++)){; const __iterator__;if((#1# % <><x><y/></x></>)) {; } else  if (({})) const __parent__ = <y><z/></y>, __noSuchMethod__ = *; }");
tryItOut("if(this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)) { if ([]) {throw (window)(<><x><y/></x></>); } else {this.zzz.zzz;((__count__ if (@foo))) }}");
tryItOut("with(true){}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.__parent__ in true) const __noSuchMethod__ =  /x/g , __parent__;");
tryItOut("do /*infloop*/M:for(prop.__iterator__; ~__proto__; (<><x><y/></x></>.yoyo([,]))) {const constructor = constructor; } while((__noSuchMethod__) && 0);");
tryItOut("/*infloop*/L:do {/*infloop*/for(let [] = (new ((<x/>).watch).apply(<x><y/></x>)); new (function(y) { yield y; var __iterator__;\r; yield y; })(@foo, <x><y/></x>); constructor + [[1]]) {return constructor = <><x><y/></x></>; }throw [,]; } while(<x><y/></x> <= __parent__);");
tryItOut("if(<x/>) const __parent__; else  if (<><x><y/></x></>) ;");
tryItOut("let (__count__) { try { for(let y in [5,6,7,8]) export constructor; } catch(prototype) { __noSuchMethod__ = __count__; } finally { for(let y in []); }  }");
tryItOut("let(constructor, __parent__ = ([([window].sort((#1=[#1#]).watch))])) { with({}) break ;");
tryItOut("/*infloop*/for(let __parent__; <><x><y/></x></>.throw(<x><y/></x>); (.isPrototypeOf(<><x><y/></x></>))) {}");
tryItOut("yield (( /x/g  ? undefined : <x/>) <<= (undefined.@foo))[(window)[#1=[#1#]]];");
tryItOut("/*infloop*/do var prop, <><x><y/></x></> = <x/> while(undefined);");
tryItOut("switch(({a2:z2})) { case 2: (({a2:z2}));break; default: case 9: yield;case <><x><y/></x></>: break; case 5: ;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([<><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb></>] in __noSuchMethod__ = (function ([y]) { })()) {if(eval(\" '' \", this)) {export *;prototype: *::* = <><x><y/></x></>, __proto__; } else  if (<x><y/></x>) { } }");
tryItOut("/*for..in*/for(var constructor = new String(*, -1).throw(( /* Comment */<y><z/></y>)) = Function() in  /x/g  -= arguments) /*for..in*//* nogeckoex bug 349964 */L: for  each(let __noSuchMethod__ in this) ;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (undefined *=  '' ) in <x/>) prop = 3.141592653589793;");
tryItOut("/*infloop*/for(var __iterator__; [1]; <><x><y/></x></>) {let __noSuchMethod__ = *, __iterator__;yield; }");
tryItOut("while(((window.valueOf(\"number\")) if (3/0)) && 0){M:with(null)if([,,]) gc()export __parent__; }");
tryItOut("let __iterator__ = __noSuchMethod__, __proto__ = <x/>;\nif(-()[[[1]]]) {}\n");
tryItOut("throw prototype;");
tryItOut("/*infloop*/for(var __iterator__ = new (yield <x><y/></x>;)( '' .eval(window), <y><z/></y>); (__noSuchMethod__ = <y><z/></y>); eval(\"<y><z/></y>\", -0)) /*for..in*/L:for(let constructor in ((function(q) { return q; })(<><x><y/></x></>)))");
tryItOut("var __parent__ = ;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*for..in*/for(var [__count__, prototype] = __proto__ = __parent__.eval(prototype = (*::* - this)) in window << <><x><y/></x></> > let (__count__, __parent__)  /x/g ) /*infloop*/while([({ __count__: __parent__ }).propertyIsEnumerable(\"__count__\")]){}");
tryItOut("if(prop) return; else  if (<y><z/></y>) ");
tryItOut("L:if(( /* Comment */<x><y/></x>)) return prop; else {{} }");
tryItOut("if(__noSuchMethod__) { if (-3/0) {return;return; }} else yield\nyield __iterator__;");
tryItOut("throw __count__;");
tryItOut("if(<y><z/></y>) {throw *; } else  if (<x/>) var __iterator__ =  '' ;");
tryItOut("try { with({}) let __noSuchMethod__ = prototype.__iterator__; } catch(__count__ if this.__defineGetter__(\"prototype\", *::*)) { for(let y in []); } catch(__parent__ if new <y><z/></y>()) { try { this.zzz.zzz; } catch(__iterator__ if new (<><x><y/></x></>)([11,12,13,14].sort)) { return <x><y/></x> .@  '' ; } catch(prop if (function(){throw StopIteration;})()) { for(let y in []); } catch(__iterator__ if (function(){let(__noSuchMethod__) { let(__parent__ = [(this.zzz.zzz) for ((let (prototype = undefined, __noSuchMethod__) this)['__count__'] in (<><x><y/></x></>\n))]) ((function(){this.zzz.zzz;})());})()) { let(__noSuchMethod__, __proto__) { let(__proto__, M:while(((prototype = <x/>)) && 0){;export prototype; }) { throw StopIteration; } catch((__iterator__-= /x/g  in <y><z/></y>)) { let(__parent__ = window) ((function(){__proto__ = __proto__;})()); } finally { throw constructor; }  } ");
tryItOut("export *");
tryItOut("/*for..in*/M:for(const prop = [(__count__ = __noSuchMethod__)] in (((function(y) { yield y; const prototype;; yield y; }).call((new (@foo).__defineSetter__(prop = prop)), )).isPrototypeOf([true.valueOf(\"number\") <<= this.__lookupSetter__(\"prop\")].map(<x/>.eval([]))))) L: {function (__count__, __proto__)<x><y/></x>return 3/0; }");
tryItOut("return ([11,12,13,14].sort);");
tryItOut("/*infloop*/for(var __noSuchMethod__ = <x/>; 1e81;  \"\" ) throw 3.141592653589793;");
tryItOut("/*for..in*/for([constructor, __count__] = (({ __noSuchMethod__: prototype, prop: ({ prop: [], constructor: [, __noSuchMethod__, __parent__, prototype, constructor] }) }) = [[function(id) { return id }].map([1,2,3,4].slice) if (__noSuchMethod__)__noSuchMethod__ ]) in this.zzz.zzz) {yield undefined;; }");
tryItOut("with({__parent__: new Iterator()})const [, [, __count__, , prototype], ({ __proto__: __iterator__ }), [, , , [, constructor]], prop];");
tryItOut("/*for..in*/for(let [constructor, __noSuchMethod__] = prop in <x/>) {return -1;export *; }");
tryItOut("let(__count__, __parent__ = 1e+81) { return yield <x/>;");
tryItOut("L:if(yield (yield  \"\" )) { if ((__iterator__ = prop = window for each (prototype in this))) {yield;; } else {yield;var @foo =  /x/ ;yield  /x/ ; }}");
tryItOut("/*infloop*/L:do {while((<x><y/></x>) && 0){([,]);prototype, __iterator__; } } while(({ get __proto__(constructor)1.3, __noSuchMethod__: <><x><y/></x></> }).__lookupSetter__(\"__count__\"));");
tryItOut("M:if(__noSuchMethod__(<x><y/></x> ?  /x/g  : <><x><y/></x></>, #0=({prototype: window}))) throw undefined; else  if ((let (__parent__, __noSuchMethod__) this.zzz.zzz).__defineSetter__(\"__count__\", gc)) /*infloop*/while(*::*)true = function(id) { return id };");
tryItOut("/*for..in*/for(let prop(<x><y/></x>) in ((eval)(eval(\"<><bbb xmlns=\\\"@foo\\\"></bbb></>\", ( /x/g  in arguments)))))export __parent__;");
tryItOut("{let(prototype = <><x><y/></x></>) ((function(){throw <x><y/></x>;})());export *; }");
tryItOut("with({prop: window}){function (__parent__, __noSuchMethod__) { yield 1.3; }  }");
tryItOut("/*for..in*/for(__parent__ = __proto__ in *::*) {break ; }\n");
tryItOut("if((new ([11,12,13,14].map)((__count__ = prototype), *::*))) {const function::__count__;/*infloop*/do {throw 1.3; } while((0/0)()); } else  if ([[]]) {[]do {__count__;prop; } while((({__count__: __noSuchMethod__})) && 0);' }' else export prop;");
tryItOut("/*infloop*/for(var ({ __parent__: ({ __noSuchMethod__/*\n*/:  case  }), __proto__: ({ x::__parent__: 0x99 }) }) = (1e+81 < (new (function(q) { return q; })(<x/>, __count__))); (@foo)((__parent__), true).valueOf(\"number\") /= (break L); (__iterator__%=[*::*].sort([[]]) .@*::  ''  >>= (constructor+=[z1,,]))) {/*infloop*/for(var [] = *; undefined.__lookupGetter__(\"__count__\"); new (Math.sin)(prototype)) const __noSuchMethod__ = 1e+81; }");
tryItOut("L: {let(constructor = (Math.sin).apply, constructor = window) { const __parent__, prototype;return ((new Function(\"yield;\"))).call(); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */<{__parent__}></{__parent__}> for  each(var prop in prop) /*infloop*/for(/*\n*/var get; this; <><x><y/></x></>) {let #1#; }");
tryItOut("return;");
tryItOut("if(@foo) {let __proto__ = __count__, __proto__ = [,];constructor, __parent__; } else  if (<x><y/></x>) {yield *;break ; } else {yield constructor;yield; }");
tryItOut("if(<>\f<x><y/></x></>) {gc()__proto__, __iterator__ } else  if ((__parent__.__iterator__ = *)) {__noSuchMethod__ = true;continue ; }");
tryItOut("let (__iterator__ = *::*) { __count__ = __proto__; }");
tryItOut("return @foo;");
tryItOut("/*for..in*/for(prop in ((<><x><y/></x></>)(null.propertyIsEnumerable(\"prop\"))))gc()");
tryItOut("while(() && 0)let constructor =  /x/g ;");
tryItOut("[(constructor.prop), ({ prop: [({ __parent__: function::prototype, __parent__: __parent__ }), __parent__, ({ __noSuchMethod__: __count__, __parent__: __parent__ })], __noSuchMethod__: ({ prototype: ({ __noSuchMethod__: __proto__, __noSuchMethod__: prop }), prop: ({ __count__: __parent__ }) }) }), [prop, __iterator__, , prototype], , //h\n({ prototype: (prototype), __parent__: constructor })]");
tryItOut("/*for..in*/for(var [prototype, __count__] = [@foo] in constructor = this.zzz.zzz) {if((__parent__.unwatch(\"__proto__\").__lookupGetter__(\"__proto__\") ? <bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>.((uneval(033))) : __noSuchMethod__ = prop)) const prop; else  if ([, ({ __parent__: prototype }), __proto__, __noSuchMethod__] = (new Boolean())) continue L; }");
tryItOut("if(new gc(false, )) continue ; else  if ([((uneval(@foo)))]) {function (prototype, prop) { return  /x/g  } let prop, __iterator__ = __parent__; } else {export *; }");
tryItOut("with({prototype: __proto__}){if(@foo) gc() else yield __proto__; }");
tryItOut("\n");
tryItOut("if((constructor = __proto__)) { if (undefined ^ true) <x><y/></x>; else {yield;return undefined; }}");
tryItOut("return let (constructor =  /x/g ) false;");
tryItOut("/*infloop*/while((++true for (__count__ in __parent__)))do throw <><x><y/></x></>; while((({constructor: 3.141592653589793})) && 0);");
tryItOut("if(__proto__|=__parent__.prototype getter= [1,2,3,4].slice) {; } else  if ( \"\" .propertyIsEnumerable(\"constructor\")) /*for..in*/L:for(let __noSuchMethod__ = undefined in  \"\" ) gc() else yield;");
tryItOut("/*infloop*/\tdo {if(({constructor: (/a/gi).apply((eval(\"break M;\", <x><y/></x>)),  '' ) })) (1 for (x in [])) } while([,].isPrototypeOf(({a2:z2}))\f =  ''  *= <><x><y/></x></>);");
tryItOut("(false);");
tryItOut("if(__count__) { if (Boolean(delete function(id) { return id },  /x/ )) {constructor = *::* }} else const __proto__ = 033;\nexport *;\n");
tryItOut("let (__parent__ = 3/0) {  }");
tryItOut("{with({}) window; }");
tryItOut("do this /= ; while((__iterator__ = (eval(\"0.1.__defineGetter__(\\\"__proto__\\\", Function)\", (window .@*::  \"\" )))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in function ([y]) { }) let constructor, __proto__\nvar __proto__ = *;");
tryItOut("throw StopIteration;");
tryItOut("yield (new -0(this, (function ([y]) { })()))([15,16,17,18].map(({}).hasOwnProperty, -1--), #0=[ \"\" ]);");
tryItOut("do ( '' .prop); while(([1]) && 0);");
tryItOut("let (__proto__, __proto__ = window) { (3.141592653589793); }");
tryItOut("/*infloop*/for(var prototype; <{__parent__: true}>yyy</{__parent__: true}>.(new 3/0); +<x/>) {yield;let __iterator__ = undefined, __count__; }");
tryItOut("/*for..in*/for(__count__ = let (__count__) <x><y/></x> in  /x/g ) /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in false) yield *::*;");
tryItOut("/*infloop*/for(const __parent__; (<xxx {__parent__}={<x/>} />.((window.hasOwnProperty(\"__iterator__\")))); <><x><y/></\fx></> ^ <x><y/></x>) {export *; }");
tryItOut("let (__parent__ =  /x/g , __noSuchMethod__) { var function::function::__noSuchMethod__ =  '' ; }");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(<x><y/>\r</x>) { if (__count__)  else {{}yield; }}");
tryItOut("/*for..in*/M:for(let constructor in ([<x><y/></x>].some(<x><y/></x>).@foo)) if(#1#) __proto__ = <><x><y/></x></>; else  if ((function::constructor = @foo.unwatch(\"__parent__\"))) {, __count__ = <x><y/></x> } else ");
tryItOut("with({__proto__: <x/>})yield;");
tryItOut("with((this.zzz.zzz) |= this)([[1]]);");
tryItOut("L:switch(let (prototype = undefined, __count__ = undefined) new <x/>([,])) { default: case 4:  }");
tryItOut("if(__parent__[null]) {({}).__lookupGetter__; } else  if (<x><y/></x>.*) {return;return; }");
tryItOut("/*infloop*/do L:if(#1=({__proto__: .__defineGetter__(\"__count__\", [[]])})) /*for..in*/for(__count__ = <y><z/></y> in <x><y/></x>) ; else  if (eval(\"{}\", <><x><y/></x></>).__count__) gc() while(this.zzz.zzz);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in ((({}).hasOwnProperty()))[[<><x><y/></x></> for each (__parent__ in constructor)]]) {yield <y><z/></y>;yield; }\nlet (__iterator__ = false) { export __parent__; }");
tryItOut("/*infloop*/do /*infloop*/for(let ({ constructor: __parent__ }) = (#1=[#1#] .@ *::*); eval; let (__parent__ = *::*) __iterator__.throw(@foo)) {if(constructor) { if (prototype) {return; } else }switch(true) { default: break;  } } while( '' .unwatch(\"__proto__\"));");
tryItOut("export __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("if((function (__parent__, constructor) { (this); } )()) {export *;{} } else {yield <x><y/></x>;export *; }");
tryItOut("with((-1)[undefined]){*::*;/*infloop*/do {export __parent__;throw <x/>; } while(__parent__); }");
tryItOut("/*for..in*/for(const __proto__ in ((function ([constructor.__proto__]) { return (let (prototype = new Array(var constructor) * [constructor] = ({ function::prototype: __parent__, prototype: __parent__ })) (<x/>)(0)) } )( /* Comment */<><x><y/></x></>.hasOwnProperty(\"({ __proto__: <!-- })\"))))/*infloop*/for(const prop = __parent__; <><x><y/></x></>; <><x><y/></x></>) function  prototype () { ; } ");
tryItOut("L: {L: {do  while((<x><y/></x>) && 0);gc() } }");
tryItOut("/*for..in*/L:for(__iterator__ = #0=({constructor: @foo}).eval() in eval(\"null\", <><x><y/></x></>)) export __proto__;");
tryItOut("const delete, ({});");
tryItOut("yield [11,12,13,14].some;");
tryItOut("/*for..in*/M:for(const __parent__ = __noSuchMethod__.prototype = \t<><x><y/></x></> in  /x/ ) {(new Function(\"{}\"))constructor }");
tryItOut("/*for..in*/L:for(var [[__iterator__], prop] in (__count__ =  /x/g ).valueOf(\"number\") %= (function ([y]) { })()) {return;if(@foo) {*::*(<><x><y/></x></>); }\f else  if ((-0)) export prototype; }");
