tryItOut("M:while(((1e81 :: <x/>.watch(\"__parent__\", 'haha'.split))) && 0)continue M;");
tryItOut("/*for..in*/L:for(const __proto__ in ((({}).hasOwnProperty)(new Exception(({ __iterator__: __count__, __parent__: prop })))))return;");
tryItOut("");
tryItOut("throw StopIteration;");
tryItOut("gc()");
tryItOut("switch('fafafa'.replace(/a/g, new Function)) { default: break; break; break ;L:if(yield <x/>) {null;gc() }break; yield (p={}, (p.z = <x><y/></x>)());case #1#.*: yield __count__;break;  }");
tryItOut("with({setter: prop})var __parent__ = [1];");
tryItOut("/*for..in*/for(let <><x><y/></x></> >>=  \"\" .__proto__ in new (this.__defineSetter__(\"__proto__\", (<x/>).__defineSetter__))(__iterator__|=__noSuchMethod__ = window)) {({}).__lookupGetter__if( /x/g ) { if (this) {var constructor; } else yield  \"\" ;} }");
tryItOut("yield");
tryItOut("if(1e4) {function  __iterator__ (__proto__) { return <><x><y/></x>\t</> } ; } else  if ((uneval(true))) {{} }");
tryItOut("M://h\nif(<x/>) { if (__proto__.(__noSuchMethod__ =  '' ).eval((!'fafafa'.replace(/a/g, [1,2,3,4].map)))) ~} else {M:do {gc() } while((*) && 0); }");
tryItOut("if(({prop: <x/>}) for each (prop in ((new )<><x><y/></x></>(<y><z/></y>, {}))) for each (__proto__ in null) if (this)) gc() const prop; else  if (*::*) {continue \n }");
tryItOut("*;");
tryItOut("with(({__count__ getter: function(q) { return q; },  set constructor __iterator__ () { return  }  }) .@*:: (<x><y/></x> if ( /x/g ))){__proto__ = __parent__, prototype; }");
tryItOut("if((<x><y/></x>[<x/>]))  '' ;");
tryItOut("export *;");
tryItOut("{function(q) { return q; } }");
tryItOut("/*for..in*/L:for([constructor, __count__] = (-0) in ({})) (window);");
tryItOut("if(([, , , ] = __parent__ = 0.1)) { if (\ttypeof * = <x><y/></x>) {/*infloop*/for([, prototype, __count__, ({ __proto__: __parent__, prop: __count__ })] = *::*.yoyo(<><x><y/></x></>); this.__defineGetter__(\"prop\", (<y><z/></y>).call); (((1 for (x in []))).call(@foo, ))) if(false) {yield this;yield *::*; } } else M:with((eval(\"return  /x/ ;\", this)))yield *;}");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__proto__) in [[]]) (<y><z/></y>);");
tryItOut("do {return prototype; } while(((033.__defineGetter__(\"__iterator__\", [1,2,3,4].slice))) && 0);");
tryItOut("L: {do {export *; } while((<x><y/></x>) && 0);continue ; }");
tryItOut("/*for..in*/\ffor(let (prototype) in false) {{/*infloop*/for(prop; [z1]; window) throw  \"\" ; }return; }");
tryItOut("try { try { let(constructor) { this.zzz.zzz; } catch(__proto__ if constructor = x::constructor.(<y><z/></y>.@*)) { with({}) { throw __count__; }  } catch(function::__proto__) { with({}) { throw get; }  } finally { yield window; }  } catch(__proto__ if (function(){throw StopIteration;})()) { return; } catch(prototype) { let(__count__, ({ __noSuchMethod__: get })) ((function(){__iterator__ = __parent__;})()); } ");
tryItOut("throw <><x><y/></x></>;\nreturn;\n");
tryItOut("(((true)[ /x/ ]))(__parent__ == __count__) = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in eval(\"return;export prototype;\", (__count__ = window))) {return; }");
tryItOut("throw <><x><y/></x></>;\n<><x><y/></x></>\n");
tryItOut("with({__count__: this(constructor = undefined, this).__noSuchMethod__ ? <x><y/></x>.propertyIsEnumerable(\"__iterator__\") : __noSuchMethod__ << window})<x><y///h\n></x>.throw(__iterator__) .@x:: Math.pow");
tryItOut("let( = [1,,] = (-0)) ((function(){var __iterator__, __proto__ = *::*;})());");
tryItOut("throw __proto__(__iterator__ = this);");
tryItOut("[, , ] = __parent__;");
tryItOut("L: /*for..in*/for(let [__parent__, prop] = prototype = [,,z1](this, -3/0) in <y><z/></y>) {with({constructor: 3}){__parent__ = window, __count__;[1,2,3,4].map } } const constructor;");
tryItOut("with({}) { yield (function (__iterator__, __iterator__) { prop; } )(<x/>, <>\f<x><y/></x></>); } ");
tryItOut("if((<x/>)[true]) {} else  if (*::*) {return;gc() } else return 1.2e3;");
tryItOut("function(q) { return q; }\n\n const __noSuchMethod__;");
tryItOut("with({constructor: __parent__ = (eval(\"constructor\", <x><y/></x>))}){(033); }");
tryItOut("/*infloop*/for(constructor = (); 1.3; ([*::* >> __iterator__ if (({}) & [,])])) /*for..in*/M:for(let prop = yield ('fafafa'.replace(/a/g,  '' )) in __noSuchMethod__.__proto__) undefined;");
tryItOut("{if(undefined) {yield; } else  if (*::*) return; else  /x/ ; }");
tryItOut("if(((new (var prototype, __count__ = #1=[#1#];)()).__count__ = prop = false)) yield else /*infloop*/do yield this; while(-1);");
tryItOut("switch((@foo.eval(<><x><y/></x></>)) - ({ this.__defineGetter__(\"prototype\", gc): [], prototype: prototype }) = ( \"\"  for (prototype in <x><y/></x>))) { default: break; yield;break;  }");
tryItOut("{L:with({function::__parent__: (uneval(@foo))}){export *;let function::constructor; } }");
tryItOut("/*infloop*/for(__parent__; <x/>; <x/>) __iterator__ = 3;");
tryItOut("M:while((let (__noSuchMethod__) [ /x/ ]) && 0){{<!--yy--> }throw  /x/ ; }");
tryItOut("L: {throw <><x>\r<y/></x></>; }");
tryItOut("if(new 1e-81()) { if (window !==  /x/g ) {([1,,]);const __count__ = *, __proto__; } else {function (__proto__, prototype) { yield  ''  }  }}");
tryItOut("/*infloop*/<xxx>{__parent__}</xxx>for(const ({ prototype: ({ __parent__: false, __proto__: prototype }), constructor: prototype }) = <x><y/></x>.propertyIsEnumerable(\"prop\").@*; (__parent__.__proto__); __proto__.prop getter= (new Function(\"export prototype;\"))) yield;");
tryItOut("M:while((prop.(<><x><y/></x></>)) && 0){return __iterator__;throw [,]; }");
tryItOut("\n");
tryItOut("if((__count__ = window)) { if (this.__defineGetter__(\"prop\", ({}).__lookupGetter__)) } else {return; }");
tryItOut("/*infloop*/for(let prop; ((prototype.__proto__ getter= default: break; case 7: __count__)); ((#3={a:#3#}).watch)(({ get prop(__noSuchMethod__, prototype) { return function ([y]) { } } , __parent__: \t__parent__ }))) {if(*) yield this; const <x/>;/*infloop*/L:for(var <x><y/></x>['prop'];  \"\" ; (({__count__:  /x/  }))) *::* }");
tryItOut("/*infloop*/for(var __proto__; function::constructor.__noSuchMethod__; (new \t(new Function)())) let __count__, __proto__ = <x/>;");
tryItOut("(uneval()), <><x><y/></x></> ? 3/0 : <><x><y/></x></>");
tryItOut("/*for..in*/for(var __iterator__ in ((function(q) { return q; })('fafafa'.replace(/a/g, ({}).hasOwnProperty)))){\fwith({prop: {} >> ({a1:1})})const prototype, prototype; }");
tryItOut("with(<bbb xmlns:ccc=\"[[__count__, , prop, __noSuchMethod__//h\n, ], __noSuchMethod__, constructor, , []] = __noSuchMethod__\"><ccc:eee></ccc:eee></bbb>){return; }");
tryItOut("if(#1=[#1#]) { if ([[1]]) {{} const __count__;function (\r) { yield  /x/  } \n((-0)); }} else if(( /x/ .yoyo( /x/g  || this))) {}");
tryItOut("with({__iterator__: <x/>}){var __parent__, __iterator__ = __count__; }");
tryItOut("/*for..in*/for(const __iterator__ in (((eval).call)(yield function  __parent__ () { yield [,,z1]; } ( \"\" )))){yield <y><z/></y>;[z1,,]; }");
tryItOut("/*infloop*/L:while(__iterator__|=<y><z/></y>.valueOf(\"number\")){export set;\n { return <y><z/></y> } \n(true); }");
tryItOut("with(__proto__[<><x><y/></x></>])export *;");
tryItOut("/*infloop*/for(var [[], [, __proto__, , constructor, prototype], ({ prototype: [prototype] }), , ] = (constructor.__parent__ getter= new Function); constructor; <y><z/></y>.__lookupSetter__(\"__noSuchMethod__\").isPrototypeOf( \"\" ()).propertyIsEnumerable(\"__noSuchMethod__\")) yield prop;");
tryItOut("/*for..in*/M:for(true.__count__ in ((Math.sin)(prototype.hasOwnProperty(\"__iterator__\")))){}");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(*){__parent__ = <><x><y/></x></>;let prototype, constructor; }");
tryItOut("L: {export __noSuchMethod__;gc() }");
tryItOut("M:if(({__parent__: *})) { if (__proto__.( /x/g )) (__iterator__); else (prototype);}");
tryItOut("L: {if(true !==  /x/ ) __noSuchMethod__ = #3={a:#3#};\fprototype; }");
tryItOut("with((eval(\"function(q) { return q; }\", 1e81.prototype)))if(((null.@*) >>= __parent__.__lookupGetter__(\"prop\").@*)) {export prop;const __noSuchMethod__ = <y><z/></y>; } else  if ((__proto__.eval(<><x><y/></x></>) <  /x/  @ window)) {throw 1.3; } else L:if(__proto__) yield <><x><y/></x></>; else continue L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <ccc:ddd><ccc:ddd><> </>yyy</ccc:ddd></ccc:ddd> in (prop = this.zzz.zzz)) ");
tryItOut("{L:switch(({constructor: (), constructor: [1].@* && ([11,12,13,14].filter.throw(function::prop.prop = *::*)) })) { case 7: case 4: break; default: break; break; case function (__noSuchMethod__, constructor) { <x/>; } ( /x/g ): break; break; case 9: (__iterator__);break;  } }");
tryItOut("return;");
tryItOut("if(([[1]], <x><y/></x> for each (constructor in <>case 3: export *;case true: case 2: break L;break; case window: ;break; </>))) {function  __count__ (__noSuchMethod__, __iterator__)__proto__ } else  if ((<><x><y/><\t/x></>)) {yield;export *; } else export prop;");
tryItOut("if([z1,,]) {__parent__.( '' )gc()1e-81; } else let __iterator__ = [,,z1];");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __proto__] = prototype = (((({}).__lookupGetter__).call).call(3.141592653589793, @foo)) in (window().unwatch(\"__proto__\"))) {/*for..in*/for(let [prototype, __count__] = new (function  __count__ (__proto__, __noSuchMethod__\t) { return *::* } )(({}).hasOwnProperty) in __iterator__) yield; }");
tryItOut("/*infloop*/for([15,16,17,18].filter((__noSuchMethod__).call, this.__defineGetter__(\"__parent__\", window)); null; <x/>.watch(\"constructor\", /a/gi)) {/*infloop*/for(prototype = 0x99; window; true) return;__parent__ }");
tryItOut("{}");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in #1#) {return;prototype } }");
tryItOut("M:if(<x><y/></x> & ({__iterator__: <><x><y/></x></>, prototype: undefined })) {const constructor = <x><y/></x>;throw ({}); } else  if (eval(\"0.1\",  /x/g )) {return;return; }");
tryItOut("/*infloop*/while([z1,,]){return; }");
tryItOut("do {continue M; } while(((<x><y/></x>)) && 0);");
tryItOut("if(undefined || __iterator__) {} else  if ((true(<x/> ^ <x><y/></x>, @foo)) ? yyy : RegExp()) if(<x/>) yield; else {export *; } else {;; }");
tryItOut("/*infloop*/do for(let y in []); while(window & 4.);");
tryItOut("/*for..in*/for(let __parent__ in ((function(q) { return q; })(( /* Comment */Function))))\fthrow <x/>;");
tryItOut("if(Object((-0), false)) gc else  if ([,,].__parent__) {const __noSuchMethod__ = window;export *; }");
tryItOut("let constructor = true, constructor;");
tryItOut("if(\f(setter = this.zzz.zzz).__lookupSetter__(\"__iterator__\")++) {return;return } else  if (((+true) >> (new __count__()))) throw <x><y/></x>");
tryItOut("throw StopIteration;");
tryItOut("export __parent__;let (__noSuchMethod__ = yield <><x><y/></x></>) { /*infloop*/L:for(var __noSuchMethod__; <x/>; 0.1) {const __iterator__ = 0.1;__noSuchMethod__ = window, __noSuchMethod__ =  \"\" ; } }");
tryItOut("/*infloop*/for(var prop;  /* Comment */(( /x/  if (window)).__defineGetter__(\"prototype\", ( for each (__iterator__ in <x/>) for each (__noSuchMethod__ in #1=[#1#]) if (@foo)).__defineSetter__)); [] = \r(([[1]])[false] for (__parent__(-0) in this) if ([,,z1]))) {; }");
tryItOut("__iterator__.__count__");
tryItOut("{}");
tryItOut("throw StopIteration;");
tryItOut("M:if(((*.*).__iterator__)) { if (window) constructor.constructor} else ");
tryItOut("/*infloop*/do {yield;{} } while((p={}, (p.z = 5.0000000000000000000000)()));");
tryItOut("export __iterator__\ngc()");
tryItOut("<><x><y/></x></>;");
tryItOut("if(#1\t=[this]) {/*for..in*/M:for(var  ''  in true) {gc()gc } } else  if (({ __iterator__: [] }) = (prototype) * @foo ? #1=[#1#] : *) yield ");
tryItOut("(@foo);");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] = (__proto__ = null.yoyo(prop = prototype.prototype = prototype)) in ((yield __parent__.(033))).__parent__ =  /x/ (<><x><y/></x></>, #1#)) {yield <><x><y/></x/*\n*/></>; }");
tryItOut("/*for..in*/for(const __proto__ in ((/a/gi)(0.1)))<x><y/></x>;");
tryItOut("/*infloop*/for(var __proto__; ; <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {let (__noSuchMethod__) { const prototype, prop = <x><y/></x>; }switch(__parent__ = <y><z/></y>) { default: break;  } }");
tryItOut("/*infloop*/L:for((Number([[1]], <><x><y/></x></>)).__lookupGetter__(\"prop\"); eval(\"(constructor)[window]\", [1,2,3,4].map(let(__iterator__) { )); (<x><y/></x>.__lookupSetter__(\"constructor\") / ({function::constructor getter: function(q) { return q; }, prototype: (function ([y]) { })() }))) /*for..in*/for(var __parent__ in ((({}).__lookupGetter__)((<x/>)[<><x><y/></x></>]))){}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in __count__ <= <x><y/></x>) throw (-0)\n");
tryItOut("if([ /x/g  for each (__proto__ in this)]) { if (new (<x><y/></x>.(__count__))()) {var __count__ = <><x><y/></x></>; }} else yield;");
tryItOut("/*for..in*/M:for(const [prototype, __proto__] = (yield [z1]) in function ([y]) { }) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in prototype) {yield x::constructor;({}).__lookupGetter__ }");
tryItOut("while(((<x><y/></x> | prototype)) && 0){(1 for (x in [])) }");
tryItOut("/*for..in*/for(__parent__(window) in ((gc)(([((let (__parent__ = *) window) @ false)].map(Math.pow)))))eval");
tryItOut("/*infloop*/do {\ryield; } while(0);");
tryItOut("switch(__noSuchMethod__) { default: return;case window: export __parent__;break; case 1: break; case 3: case 1.2e3: case  /x/g : (<><x><y/></x\t></>).watchbreak; break; case window:  }\nyield true;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in prop.(false)) prop");
tryItOut("/*infloop*/while(((yield  /* Comment */__iterator__ =  '' )))break ;");
tryItOut("prototype = [z1,,];");
tryItOut("M:if((yield window)) gc else  if ( \"\" ) {export *; } else gc()break ;");
tryItOut("{if(<x><y/></x>) {export __count__; }continue ; }");
tryItOut("/*for..in*/for(let constructor = (window\n -= prop) in  /* Comment */null) {const constructor = <y><z/></y>;{} }");
tryItOut("{yield (yield *::*); }");
tryItOut("\nconst __proto__, __noSuchMethod__ = false\ncontinue L;\nvar prop = this;\n\n");
tryItOut("L:if(__proto__ = <x/>) prototype else  if ('fafafa'.replace(/a/g, 1e4)) {return  '' ; } else ");
tryItOut("throw __count__\n/*for..in*/L:for(let [prototype, prop] = [,,] !== <x><y/></x> in @foo) {const __proto__; }");
tryItOut("for(let y in [5,6,7,8]) with({}) try { let prototype; } finally { (<x><y/></x>); } ");
tryItOut("let (constructor = #1=(4..__defineSetter__(\"__proto__\", (eval).call))) { var __noSuchMethod__ = prototype; }");
tryItOut("with({}) for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*for..in*/for(var [__count__, __count__] = <y><z/></y> in *) {yield;export *; }");
tryItOut("/*for..in*/for([getter, __iterator__] = __count__ = function (__count__) { yield -1 }  in false for (constructor in true)) ");
tryItOut("if((eval(\"<><x><y/></x></>\", <x><y/></x>))) export prototype; else {{}throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const [__parent__, constructor] = ((new Function(\"__count__;\")))() in <><x><y/></x></>) prop = 1.2e3, __noSuchMethod__ = ~;/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.__count__ in this) gc()");
tryItOut("if((eval(\"yield;\", \r<><x><y/></x></>))) { if (*::*) with(window)(@foo);} else {yield; }");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = (-1).isPrototypeOf(window) in ([ /x/  for each (prototype in window)])) {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in __noSuchMethod__) @foo; }");
tryItOut("export constructor;");
tryItOut("L:if((yield getter|=true for (__count__ in window) for (prop in <><x><y/></x></>))) { if ((uneval((__parent__+=<><x><y/></x></>))) ? constructor = 0 : (<y><z/></y>)) {}} else L:if( '' ) {function  __noSuchMethod__ (prototype, __proto__) { export __count__; } yield false; } else  if (__noSuchMethod__) {;{} }");
tryItOut("yield ({a2:z2});");
tryItOut("constructor((#3={a:#3#} for (__parent__ in prop)))");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { if ((p={}, (p.z = this.__defineGetter__(\"prototype\", function  __iterator__ (prop, __noSuchMethod__)<y><z/></y>))())) {let __iterator__;if(this) {;{} } else throw -3/0; } else {let (prop = prototype, __noSuchMethod__ = ({})) { yield this; }if(1e-81) { if (this) throw  '' ;} else break ; }}");
tryItOut("(#3={a:#3#});\nyield;\n");
tryItOut("/*infloop*/for((<bbb xmlns=\"((true <<= this).__defineSetter__(\"__proto__\", function(q) { return q; }) < window)\"><ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd></bbb>.( /x/ .@foo.hasOwnProperty(\"constructor\"))); (__parent__)(<><x><y/></x>\f</>, -0) += null > window; this /=  '' .hasOwnProperty(\"prototype\")) {/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in (-0)) {__count__ = <y><z/></y>, __parent__ = false;\t{} }throw 1e81; }");
tryItOut("{}");
tryItOut("L:while((__parent__%=<x><y/></x>) && 0){export *; }");
tryItOut("yield;\n;\n");
tryItOut("L:if(null) const __iterator__; delete([,,z1]) else  if (<><x><y/></x></>) continue ; else {throw  '' ; } {/*infloop*/while(window){let __iterator__ = , __parent__ = null;; }\r }");
tryItOut("with((window)[<y><z/></y>].@*){throw (function ([y]) { })();if(1.3.__lookupSetter__(\"constructor\")) __iterator__, __noSuchMethod__ = prototype; }");
tryItOut("/*for..in*/for(const __iterator__ in prototype, constructor) do {gc()return <y><z/></y>; } while(( /x/ ) && 0);");
tryItOut("if(([, , ] = ({ __iterator__: ({ prototype: [, constructor, __noSuchMethod__, , ], __proto__: __count__ }), prop: __count__ }))) {try { this.zzz.zzz; } catch(prototype if (function(){try { return; } finally { this.zzz.zzz; } })()) { yield (<><x><y/></x></> >>>=null); } catch(__iterator__) { try { return; } finally {  }  } L: {function::constructor } }");
tryItOut("switch(eval(\"(new (prop)() << ([z1]))\", ({ __count__: [__parent__, __noSuchMethod__, prop] }) = ({ __parent__: ({ __count__: __noSuchMethod__ }), prop: ({ __parent__: prop }) }))) { default: break; case <><x><y/></x></>--.unwatch(\"constructor\"): export *; const __iterator__;case ((({ __proto__: prototype }) = new (([<x/>].some((1 for (x in [])))))(<x><y/></x>)).__defineGetter__(\"__count__\", ({}).__lookupGetter__)): break; throw ;break; case 3: yieldbreak; let ( ) { [z1,,]['__noSuchMethod__'] }break;  }");
tryItOut("M:if(((uneval((*::*.*).__lookupGetter__(\"__proto__\"))))) {yield;(<><x><y///h\n></x></>); }");
tryItOut("yield ({__iterator__ getter: (true).__defineSetter__, prototype: <x><y/></x> });");
tryItOut("M:if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(<x><y/></x>.watch(\"get\",  \"\" ))) { if (constructor|=__parent__ = <x><y/></x>) {with({__iterator__: __noSuchMethod__.__proto__ getter= *})gc()#1=[#1#]\n[1,2,3,4].map\n }} else {return;/*infloop*/do return function::__noSuchMethod__; while(__count__); }");
tryItOut("/*for..in*/for([__iterator__, constructor] = (<y><z/></y>.yoyo((( '' ).watch)())) in null) {<y><z/></y>; }");
tryItOut("\n");
tryItOut("constructor, prototype;\nlet __proto__, __count__ =  \"\" ;\n");
tryItOut("/*for..in*/L:for(undefined in *::*) {/*infloop*/for(033;  /x/ ; __proto__) {prototype = this; }return; }");
tryItOut("/*infloop*/do {(({a1:1})); } while(([__iterator__|=<><x><y/></x></>].sort((<y><z/></y>).__defineSetter__)));");
tryItOut("M:with((({ function::__noSuchMethod__: __proto__, prototype: prototype }) = this))/*infloop*/do continue ; while(this);/*infloop*/while(true)return <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in function(id) { return id } >> (<><x><y/></x></>[-1])) {yield;export __iterator__; }");
tryItOut("gc()\nexport *;\n");
tryItOut("/*for..in*/M:for(const (prop) in this.__defineSetter__(\"constructor\", gc)) {( \"\" );if(<y><z/></y> ? null : function ([y]) { })  else  if (@foo(window, *)) yield <x/>; else {const __parent__ = *; } }");
tryItOut("/*infloop*/for([]__count__ = ; (let (let = this, let = @foo) <><x><y\t/></x></>) %  /x/  ? <x><y/></x> : 3.__defineSetter__(\"prop\", 'haha'.split); __noSuchMethod__ >> ({a1:1})) do {((<x/>).watch).apply } while((() <<  /x/g .__lookupGetter__(\"__proto__\")./*\n*/watch(\"prop\", Math.pow)) && 0);");
tryItOut("/*infloop*/for(const __parent__; new (<><x><y/></x></>.__defineGetter__(\"prop\", ({}).hasOwnProperty) , (-0) != function(id) { return id })(([15,16,17,18].sort(function(q) { return q; }, #3={a:#3#})), (function ([y]) { }.watch(\"__proto__\", (null).__defineSetter__))); (\nundefined[new (<y><z/></y>)()])) {switch({}) { case 7: break;  } }");
tryItOut("/*for..in*/for(var function::__parent__ = ().unwatch(\"__proto__\") in (this.__defineGetter__(\"prop\", function (({ prop: ({ prop: prop, __proto__: __noSuchMethod__ }), __count__: __noSuchMethod__ }), __count__) { with({prop: constructor})gc() } ))) {__proto__;with({__noSuchMethod__: window}){(<><x><y/></x></>); } }");
tryItOut("export __proto__;\n/*infloop*/do {var prototype, __noSuchMethod__; } while(x::prop);\n");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = __parent__ = ({ __iterator__: prop }) in prototype: ( /* Comment */undefined)) {<x><y/></x> }");
tryItOut("return (function (__count__, constructor) { yield <x/> } )(<x><y/*\n*//></x>, <><x><y/></x></>);");
tryItOut("do continue M; while((var __parent__ = <x><y/></x>) && 0);");
tryItOut("for(let y in []);");
tryItOut("with({}) gc()");
tryItOut("L:if((<><x><y/></x></> * <x/>)) { if \f((new (<x><y/></x>)(this)\f)(new (eval)( /x/g ), __proto__)) {continue L; }} else {export prop; }\nthis.zzz.zzz;");
tryItOut("let(__iterator__ = (p={}, (p.z =  \"\" )()), __count__ = ([11,12,13,14].sort)) ((function(){return;})());");
tryItOut("L:if() { if ([4. for each (__count__ in prototype)]) {M:with(null) } else {break L;while(((-0)[undefined]) && 0){export *;throw *::*; } }}");
tryItOut("return;");
tryItOut("{continue ; }");
tryItOut("let (constructor = let .@*:: <y><z/></y>) { prop, prototype = 5.0000000000000000000000; }");
tryItOut("/*infloop*/M:for((yield --*); prototype; new *::*((*::*)[<x><y/></x>])) {/*for..in*/for(const prototype = constructor in <x/>) throw []; }\tdo ; while(( /* Comment */new <x><y/></x>()) && 0);");
tryItOut("/*infloop*/({ constructor: __noSuchMethod__ }) = {} !== [[]]");
tryItOut("if((uneval((uneval(prototype)))) ? [new function (prop, __parent__) { return __iterator__ } ()] : new this( '' ) != prototype.yoyo(5.0000000000000000000000)) let __proto__; else  if (({ constructor: __parent__ }) = __noSuchMethod__) {(@foo); } else {{}return; }");
tryItOut("export __count__;\ncontinue ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__(<x><y/></x>) in gc()) with((<x/>.isPrototypeOf([z1,,]))){/*infloop*/L:for(var __proto__; <y><z/></y>; <><x><y/></x></>) (<x><y/></x>); }");
tryItOut("{/*for..in*/for(var [prop, __proto__] =  ''  in -3/0) export *; }");
tryItOut("switch(( \"\" ).call(<x/>, )) { case : __count__ = <x><y/></x>;\nreturn <y><z/></y>;\ncase (<x><y/></x> |= <><x><y/></x></>): if(([11,12,13,14].some)) ({}).hasOwnPropertybreak; case (<x><y/></x>): throw window;break;  }");
tryItOut("with(((uneval(<><x><y/></x></>))))");
tryItOut(" const __count__;");
tryItOut("/*for..in*/L:for(var __count__ in ((eval)((function::__count__ = this))))");
tryItOut("/*infloop*/for(__iterator__ = new function(id) { return id }; __proto__ = 0; #1=[ '' ]) {export *;function (__count__, __parent__) { return {} }  }");
tryItOut("M:switch((<x/>.propertyIsEnumerable(\"__count__\"))) { case 5:  }");
tryItOut("return this");
tryItOut("let(__parent__ =  \"\" ) ((function(){yield;})());");
tryItOut("L: ");
tryItOut("return\n\n");
tryItOut("/*infloop*/for(let __parent__ = constructor; this; ({a1:1})) {export __count__; }");
tryItOut("M:with(([1,2,3,4].slice).call(new __iterator__(<y><z/></y>), __iterator__ = false, __proto__)){continue ;return; } const __parent__;");
tryItOut("/*for..in*/for(__iterator__ in ((function ()this)([0].sort(gc)))){return  /x/g ; }");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("\n");
tryItOut("if(([15,16,17,18].filter(function(q) { return q; }, 1e4) ? (__count__ = try { var let = 1e+81; } finally { yield; } ) : ())) return; else  if (((this.__defineGetter__(\"constructor\", function(y) { yield y; var __iterator__, prop;; yield y; })) !== *::*)) M:if(*) __noSuchMethod__, __noSuchMethod__; else  if (__noSuchMethod__) gc()\t else {[,,];yield; }");
tryItOut("{L: export __proto__; }");
tryItOut("if(-0.valueOf(\"number\")) { if ((\nprop.prop getter= prototype).__proto__ = (__noSuchMethod__ .@*:: ({a1:1})) && window.watch(\"(function ([y]) { })()\", (null).watch)) {/*infloop*/for(var ({ prototype: ({ constructor: __proto__, __noSuchMethod__: prototype }), __noSuchMethod__: ({ __noSuchMethod__: __count__, __proto__: prototype }) }) = window; prop.(null); <y><z/></y>.yoyo(0)) {var __count__; } }} else {{} }");
tryItOut("with(<x/> ? <x><y/></x> : ('fafafa'.replace(/a/g, Math.pow)))with({constructor: new prop.([[1]])()}){constructor;return  /x/g ; }");
tryItOut("if((<><x><y/></x></> | this)) {{};export __count__; }");
tryItOut("/*for..in*/M:for(const [__iterator__, __count__] = (-0) in *) __iterator__;");
