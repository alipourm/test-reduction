
tryItOut("if(false > @foo.*) {let __proto__; } else  if (([({constructor: constructor.__noSuchMethod__ getter= new Function,  set __parent__ constructor (prop, prototype) { return (new Function)() }  })])) L:if((1.2e3 ? __count__ : null)) { if () {;export *; } else const __count__ = -3/0;}\nwhile((window in [1].constructor = __iterator__ ? <>(this.__defineGetter__(\"__noSuchMethod__\", <x/>) << constructor.__parent__ = \t@foo)</> : @foo) && 0){if((constructor.throw(<><x><y/></x></>) for each (function::__count__ in prototype)))  else {yield 3;gc() }/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in *::*) {({ constructor: prototype }) } }");
tryItOut("let (prop) { while(([new Exception(*::*)]) && 0){return;if((<x/>\t.valueOf(\"number\")) % __parent__ = 1e4) { if (<y><z/></y>.__lookupGetter__(\"__parent__\")) {const prototype = window; } else continue ;} } }");
tryItOut("M:if(new Iterator(*::*)) { if ([[15,16,17,18].map(function (__count__, __noSuchMethod__) { yield 1.2e3 } , 033.eval(null)).__defineSetter__(\"__noSuchMethod__\", prototype = @foo)].some(/a/gi)) {yield  /x/ ;with( \"\" ){var __iterator__ = __proto__; } }} else {return;return prototype; }");
tryItOut("if(((null = <><x><y/></x></>).propertyIsEnumerable(\"__noSuchMethod__\")) ? __proto__.__proto__ getter= Function : ({ __noSuchMethod__: __iterator__ }) = 'fafafa'.replace(/a/g, (true).watch)) { if ((Function((<y><z/></y>.watch(\"__parent__\", function  prototype (prop, __count__) { throw *; } )), window > (({ get prop __parent__ (__parent__) { return * }  }))))) /*infloop*/while(<><x><y/></x></>)constructor:  '' ; else {(1e-81); }}");
tryItOut("yield this.__parent__ = window;");
tryItOut("/*infloop*/for(var __count__; *::*.propertyIsEnumerable(\"__parent__\"); <><\fx><y/></x></>.watch(\"constructor\", /a/gi)) export *;");
tryItOut("/*for..in*/M:for(const __parent__ = false in @foo) with({constructor:  /* Comment */})__proto__ = undefined, __noSuchMethod__ = *;");
tryItOut("{/*infloop*/while(this){(<y><z/></y>); }export prototype; }");
tryItOut("for(let y in [5,6,7,8]) return ((<x><y/></x>)[__noSuchMethod__]).eval(this.__defineGetter__(\"prop\", <y><z/></y>));");
tryItOut("var __count__;");
tryItOut("L: {let __parent__ = __count__, prototype = false;/*infloop*/while(.2){ } }");
tryItOut("/*infloop*/for(3/0; [z1,,]; constructor) {<y><z/></y>;export __noSuchMethod__; }\n");
tryItOut("with({prototype: window * true((*))})[1,2,3,4].slice");
tryItOut("M:with({prop: 'fafafa'.replace(/a/g, ([15,16,17,18].some(this, (__iterator__ = <><x><y/></x></>))))})if((new Object(*::*)).constructor) {{yield <x/>;export *; }prop = try { const prop; } finally { gc() } , __noSuchMethod__; }");
tryItOut("while(((uneval((constructor.yoyo(1e4))\n))) && 0){(<><x><y/></x></>++){} }");
tryItOut("/*infloop*/while(__noSuchMethod__.__noSuchMethod__ setter= eval)yield [1];");
tryItOut("let (constructor, __proto__) { {Math.sin; } }");
tryItOut("/*infloop*/for(__iterator__; __count__.throw([1,,]); __count__ = \nprototype) (true)");
tryItOut("if(constructor) break ; else (<><x><y/></x></>);");
tryItOut("/*infloop*/for(this; null; <><x><y/></x></>) {yield <x><y/></x>;(<y><z/></y>); }");
tryItOut("/*for..in*/for(__proto__ = (.2) in __parent__) {yield *::*;continue ; }");
tryItOut("/*infloop*/for(let [constructor.__count__, [], , , ] = null; +(gc); true) ");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in prop.(__count__)) {for(let y in []); }");
tryItOut("if(Math.pow) ");
tryItOut("yield [H <<= window |= 1e4].filter(new Function);");
tryItOut("/*infloop*/for(var __count__; __proto__ = *::*, constructor = 1e-81; new ((new Function(\"gc()\")))(<><x><y/></x></>)) export __count__;");
tryItOut("try { const __noSuchMethod__, __count__ = <x><y/></x>\n } catch(__iterator__ if (function(){for(let y in [5,6,7,8]) let(__noSuchMethod__ = 3/0, __count__ = <><x><y/></x></>) ((function(){{}})());})()) { throw prop; } catch(__parent__) { let(__iterator__ = *::*) { return ; } ");
tryItOut("if(<x/>) {__proto__ getter: function (prop, prop) { gc() } ;yield <><x><y/></x></>; } else {continue ; }\nif( /x/g ) {(this); } else  if (<y><z/></y>) {{}; }");
tryItOut("L: {try { {} } catch(__iterator__) { {} }  }");
tryItOut("if(case 4: if({}.throw(<x><y/></x> > null[ '' ])) {} else var constructor = null, __parent__;break; if(({__count__ setter: ( \"\" ).watch })) return; else  if (--__noSuchMethod__) L: {} else continue ;break; while((__noSuchMethod__ = <x><y/></x>) && 0){& }case 9: ) {var * = <x\f><y/></x>; } else {throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for(var __count__; [15,16,17,18].filter(function(y) { yield y; __count__ =  /x/ , __parent__ = ({});; yield y; }, [({__count__: __noSuchMethod__})]); *) /*infloop*/M:for(__count__;  /x/ ; <x><y/></x>) return;");
tryItOut("L:with({__parent__: <><x><y/></x></>})gc()");
tryItOut("/*infloop*/M:for((prototype = (new (<x><y/></x>)())); new __parent__([,,], <><x><y/></x></>).unwatch(\"__proto__\"); (new function(q) { return q; }(prop >= function::prototype))) /*for..in*/for(const [__iterator__, prop] = <y><z/></y> in []) export *;");
tryItOut("/*for..in*/M:for(( '' )(true) in new (({}).hasOwnProperty)()) Math.pow\n");
tryItOut("{[,,](window).__defineSetter__ }");
tryItOut("/*for..in*/M:for(const [__count__, constructor] =  \"\" ++.prototype in ((__parent__ = *::*)--\t)) {export __noSuchMethod__;yield 0x99; }");
tryItOut("export __parent__;\ngc()\n const constructor;");
tryItOut("try { throw StopIteration; } catch(__iterator__ if constructor|=*::* & ((<x><y/></x>)(<><x><y/></x>\f</>, <x><y/></x>))) { with({}) { window; }  } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>.([,,]).watch(\"__noSuchMethod__\", Function)) {export __noSuchMethod__;__count__ }");
tryItOut("L: /*infloop*/while(<><x><y/></x></> & <><x><y/></x></>){/*infloop*/while(<x/>){export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in constructor = -0) ");
tryItOut("/*infloop*/while((let (__proto__) this)){(-0); }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let prototype in __count__ = <x><y/></x>) {\n/*infloop*/do throw *::*; while(@foo); }");
tryItOut("L:do {return;\nconst __count__ = <x><y/></x>, prototype;\n/*infloop*/for(Exception(@foo);  /x/g ; ((uneval(this)))) let (__iterator__ = constructor, <><x><y/></x></>) { gc() } } while((__iterator__ = <x/>.__defineGetter__(\"__noSuchMethod__\", Math.pow)++) && 0);");
tryItOut("{export *;yield; }");
tryItOut("M:switch(true) { case  /x/g  if (3/0): if(function(id) { return id }) { if (*::*) {continue M;continue \f; }} else export prop;default: __noSuchMethod__ = prototype; }");
tryItOut("{<y><z/></y>; }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */M: for  each(let (__noSuchMethod__) in *) {yield @foo; } while(( /* Comment */this.__defineGetter__(\"__proto__\", true)) && 0);");
tryItOut("/*infloop*/for(let __parent__ = <y><z/></y>; <><x><y/></x></>; <x><y/></x>) new Function");
tryItOut("L: with(<x/>)var prop = @foo\t;");
tryItOut("__count__ = __proto__; const __parent__;");
tryItOut("L:switch(this) { case <x/>: throw __count__; }");
tryItOut("with({}) let([, , , <x><y/></x>, [, , , __iterator__, ]] = this.__defineGetter__(\"true\", eval)) { while((prop) && 0){{} } const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(case 9: default: yield;case @foo:  in __count__ = false) {export *;throw function(id) { return id }; }");
tryItOut("/*for..in*/for(var __count__ = false\f in (window.yoyo(@foo))) {break M;export __iterator__; }");
tryItOut("/*infloop*/for(__proto__.eval([,,]); (this.zzz.zzz); new (<x><y/></x>)( \"\" , *)) \f{(<><x><y/></x></>);export prop; }");
tryItOut("throw __parent__;\n\nyield;\n");
tryItOut("/*infloop*/for(__proto__; __noSuchMethod__ = 5.0000000000000000000000; (033 === ((default: break; ) += __parent__ = let (__iterator__) new (__iterator__)(__noSuchMethod__)))) {0yield <><x><y/></x></>\ngc() }");
tryItOut("");
tryItOut("if(prototype = <><x><y/></x></>) {yield <x><y/></x>; } else  if (((new Function(\"yield  /x/g ;\")))(@foo) += (#0=[void @foo])) gc()");
tryItOut("with({constructor: <y><z/></y>----}){continue L; }");
tryItOut("/*infloop*/for(__parent__; __iterator__[<><x><y/></x></>].throw(<x><y/></x>.(<y><z/></y>)); __parent__) {/*infloop*/L:while( \"\" .prop){function::__noSuchMethod__, __proto__; } }");
tryItOut("/*infloop*/M:for(constructor; /a/gi()/*\n*/; constructor = <x><y/></x>) {}");
tryItOut("/*for..in*/for\f(var __iterator__ in ((0x99)( /x/ ))){return;return; }");
tryItOut("/*infloop*/M:do {yield; } while(__noSuchMethod__.__iterator__ = *::*);");
tryItOut("if(0/0) return 0; else  if ([]) {gc() } else {yield;return; }");
tryItOut("if(new \f(<><x><y/></x></>)()) { if (([11,12,13,14].map)) {throw <x/>;const __parent__ = null, __parent__ = false; }} else {0x99return; }");
tryItOut("const constructor = <><x><y/></x></>, __count__;\t");
tryItOut("/*for..in*/for(let setter = (uneval(new Array())) in try { continue M; } catch(__parent__) { undefined; } finally { __proto__ } .hasOwnProperty(\"prototype\")) {}export prototype;");
tryItOut("yield typeof ~(1 for (x in []));");
tryItOut("/*for..in*/L:for(const [\f__proto__, __iterator__] = \t /x/g  in  /x/g ) {Math.pow }");
tryItOut("if( /x/g ) if(<><x><y/></x></>) { if (@foo) Function else {; \"\" ; }}");
tryItOut("/*for..in*/for(prototype = undefined in [1,,]) {(\r1.2e3); }");
tryItOut("; const prop;");
tryItOut("if(({prop: constructor})) (__iterator__); else export prop;");
tryItOut("/*infloop*/do {constructor: this.__defineSetter__(\"__proto__\", function(q) { return q; })break ; } while(__iterator__.__proto__ = (3/0.hasOwnProperty(\"__proto__\")));");
tryItOut("M:if(<x><y/></x>) { if (*::*) {gc() } else }\n");
tryItOut("if( /* Comment */true) {L: default: break;  } else  if ('fafafa'.replace(/a/g,  '' )) {prop, constructor;const __noSuchMethod__; }");
tryItOut("prototype = __iterator__;");
tryItOut("if(true.@*) __iterator__ = *, __proto__ = null;");
tryItOut("/*infloop*/for( if (this); (__iterator__.prototype = <x/> -  /x/g ); __count__) \t/*for..in*//* nogeckoex bug 349964 */M: for  each(var getter in <x><y/></x>) {let __parent__, __proto__; }");
tryItOut("{<y><z/></y>;let __iterator__ = 0.1, __iterator__; }");
tryItOut("if(prop) \t{let prototype, constructor;return <x><y/></x>; }\nif( /x/g ) { if (__iterator__) {__parent__, constructor; }} else {([1,,]); }\n");
tryItOut("/*for..in*/for(let prop.prototype in (p={}, (p.z = ([11,12,13,14].map.watch(\"prototype\", /a/gi))--)())) ;");
tryItOut(" /x/g ;");
tryItOut("for(let y in []);");
tryItOut("[, , , , ({ __iterator__: ({ prototype: ({ __iterator__: ({ __count__: [], __proto__: [__iterator__, [ '' .prototype, , ({ __noSuchMethod__: ({ __proto__: __proto__, __iterator__: __iterator__ }),  {  } : prototype }), , []], \n] }), x::__noSuchMethod__: ({ \f__count__: [({ __iterator__: [, [__noSuchMethod__, __count__, , , constructor], , [, , , __parent__]] }), constructor] }) }), __iterator__: [try { yield @foo; } ({ __iterator__: ({ constructor: __noSuchMethod__ }), __proto__: prop })catch(prop if  '' ) { continue L; } catch(__iterator__) { (<y><z/></y>).__defineSetter__ } finally { return [1,,]; } ] }), __parent__: prototype })]");
tryItOut("with(<><>prototype = this</></>){export *; }\nwhile((__count__.(undefined)) && 0)L:with(-0){const __iterator__;(<x/>); }\n");
tryItOut("return;");
tryItOut("L: return constructor;");
tryItOut("__iterator__");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = __parent__.__iterator__ in 'fafafa'.replace(/a/g,  '' )) {{return; } }");
tryItOut("M:if((({__count__: #1=[#1#][(-1)] }))) { if (__count__|=<y><z/></y> instanceof  '' ) {let (constructor = <y><z/></y>) { ; } } else /*for..in*/for([prototype, <x/>] = <y><z/></y> in <x><y/></x>) yield *::*;}");
tryItOut("L:if(delete new (function (__iterator__) { return <><x><y/></x></> } )(__noSuchMethod__ = #1#)) { if (([11,12,13,14].some)[(null |= window) > this *= true]) ( /x/g ['__count__']+=<x><y/></x>);} else ;");
tryItOut("/*infloop*/for(<x/>; <x/>; @foo) {prototype, __noSuchMethod__ }");
tryItOut("/*for..in*/M:for(const [let, __proto__] = new function(y) { yield y; let __parent__, __noSuchMethod__ = <><x><y/></x></>;; yield y; }() in [,,z1]) {(new Function(\"{throw <x><y/></x>;export *; }\"))yield; }");
tryItOut("do gc() while((prop.((function(q) { return q; }(false, arguments).eval(__count__)))) && 0)");
tryItOut("with({__parent__: __iterator__-=<x/>})(false);");
tryItOut("do var __iterator__; while((({ get: [__parent__, ({ __proto__: __parent__, __parent__: [__noSuchMethod__, __noSuchMethod__, __noSuchMethod__, ] })] })) && 0);");
tryItOut("with([1.2e3])L:with({prototype: <><x><y/></x><\t/>}){var __iterator__ = window;yield __parent__; }");
tryItOut("/*infloop*/for(var __proto__; function (__count__, __noSuchMethod__) { {} } ; window) {if(@foo) {{}break M; } else ([[1]]);(<><x><y/></x></>\n); }");
tryItOut("L: {/*\n*/M:if( '' ) { if (true) {yield; } else continue ;} }");
tryItOut("if((<x/>)[*::*].@*) { if (({ get __iterator__ __parent__ (prototype) { return this }  })) {;(*::*); } else {__noSuchMethod__, prop; }}\nwith({__iterator__: <><x><y/>\t</x></\f>}){return;const constructor = <x><y/></x>, __count__ = null; }'haha'.split");
tryItOut("yield <y><z/></y>;");
tryItOut("/*infloop*/while(((constructor <= __noSuchMethod__))((<x/> ? 1.2e3 : __count__))){(3/0); }switch(<y><z/></y>) { default: let prop, x::__iterator__ = prop;break; case 0: ;export *;break;  }");
tryItOut("\nyield <><x><y/></x></>;\n");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__, constructor) { {}");
tryItOut("L: prototype = <x/>;");
tryItOut("const prop =  /x/g , prototype = constructor;var prop = [,];");
tryItOut("L: {<x><y/></x>yield  /x/ ; }");
tryItOut("/*infloop*/for(({ __parent__: prop }) = (this.__defineSetter__(\t\"__parent__\", )); yield;  '' .__defineSetter__(\"__count__\",  /x/g )\t) {;return; }\n");
tryItOut("with({__noSuchMethod__: ([15,16,17,18].map(function(y) { yield y; if(({prop: 1e-81, __count__ getter: gc() })) { if (<y><z/></y>++) var __proto__ = window;} else yield;; yield y; }, (eval).call(([<><x><y/></x></>].filter(function (constructor) { return [,,z1] } )), )))}){__proto__ }");
tryItOut("if( /x/ ) {function  __count__ (constructor, __iterator__) { yield <y><z/></y> } \nreturn;\nfunction  constructor () { gc() }  }");
tryItOut("if(prop) {/*for..in*/for(const __count__ = window in default: <><x><y/></x></>;break; __count__;break; break; case .2: break; case 8: gc()) let __noSuchMethod__, __count__;const prototype; }");
tryItOut("do if(true &  '' ) ; else  if ((uneval(__parent__))) {throw [,]; const constructor; } else {(1 for (x in []))let constructor = -3/0; } while((__parent__.constructor = <><x><y/></x></> += 0.1 ^ prototype = ([15,16,17,18].filter(({}).__lookupGetter__, this)) ^ prop = 3) && 0);");
tryItOut("([1,,])\n");
tryItOut("export *;throw <x><y/></x>\n/*infloop*/for((typeof undefined); Date(prop); (__noSuchMethod__ .@ @foo)) yield null;");
tryItOut("return;");
tryItOut("L:if(RangeError()) {\n if (({__iterator__:  ''  }) > (__iterator__ =  \"\" ))  { yield <><{__parent__}><!--yy--></{__parent__}></> } } else  if (__iterator__)");
tryItOut("M:if(Number(@foo.*, <><><x><y/></x><///h\n></>)) {export *;/*for..in*/for(var prop in  /x/g ) export \f*; }");
tryItOut("/*infloop*/for(let __count__ = *::*; *; <y><z/></y>) {export *; }\n;\n");
tryItOut("with({}) { var __noSuchMethod__ = __noSuchMethod__; } ");
tryItOut("/*for..in*/for([prop, prototype] = (__parent__ = <><x><y/></x></>) in new (prototype =  let )()) {if(<x/>\n) yield;gc() }");
tryItOut("if(<x/>) { if (__count__) {;constructor = <><x><y/></x></>, prototype; }} else {export *;break L; }");
tryItOut("/*for..in*/for([prop, [, ({ __count__: __count__, __proto__: prop }), , ({ __iterator__: __proto__ }), __noSuchMethod__]] = <><><ccc:ddd></ccc:ddd></></> in <><x><y/></x></>) {if(prop) {\tyield;yield 1e4; } else {<x/>; } }");
tryItOut("let(__noSuchMethod__ = window) { {}");
tryItOut("/*for..in*/for(var __parent__ = this.zzz.zzz in undefined) /*infloop*/for(this; <><x><y/></x></>; true) yield  \"\" ;if(((<><x><y/></x></>--)[__iterator__ = function ([y]) { }])) {/*infloop*/while(let (__parent__ = <x/>, constructor) null){{}; } }");
tryItOut("M:if((new ())) {export *; } else  if ([11,12,13,14].filter) {{return *; } }");
tryItOut("while((<><x><y/></x></>) && 0){let constructor = 033, __count__;yield #1#; }");
tryItOut("M:while((0) && 0)\tthrow prototype;");
tryItOut("with(new (<><x><y/></x></>).call(prop))/*infloop*/do (<x><y/></x>); while(undefined);");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __proto__] =  /x/g  in <x><y/></x>) return;");
tryItOut("/*infloop*/while(<x><y/></x>.(this)){{} const __proto__; }");
tryItOut("if(this.__defineGetter__(\"constructor\", /a/gi) .. constructor) { if (window ? [z1] : false) {(null);\n<><x><y/></x></>;\n\nif(<x/>) throw <><x><y/></x></>;throw this; }} else with(null){(<y><z/></y>); }");
tryItOut("with({}) with({}) export *;");
tryItOut("if(~) {gc } else  if ((#0=({prop: <>\f<>(-0)[*]</></>})).hasOwnProperty(\"__iterator__\")) \fif(window.__defineSetter__(\".2\", @foo)) /*infloop*/M:for(__noSuchMethod__ =  /x/ ; @foo; __parent__) { }");
tryItOut("if(new Error(undefined -= 4. >>=  \"\" .hasOwnProperty(\"prop\"), !window)) {yyy\t/*for..in*/for(__parent__ in *::*) {export *;(*); } } else  if ((new (new #0=<x/>())())) {return; } else {continue L;return <><x><y/></x></>; }");
tryItOut("prop((-0)(<x><y/></x>)) = prototype;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __parent__] = (new Function)(@foo) in (new (null)())) {/*infloop*/while((__proto__ = <x><y/></x>)){throw  '' ; } }");
tryItOut("export *;\nyield;\n const __count__;");
tryItOut("if(this) { if (__count__ = <x><y/></x>.unwatch(\"__noSuchMethod__\")) {gc() }} else return (-1);for(let y in [5,6,7,8]) throw __iterator__;");
tryItOut("with(__proto__ = __proto__){with([15,16,17,18].sort(<><x><y/></x></>, new new Function())){/*for..in*//* nogeckoex bug 349964 */ for  each(let 1e81 in ) {throw @foo; }{} }\t }");
tryItOut("M:\tif(( /* Comment */eval(\"get, constructor = function ([y]) { };\", (-1 ? <x><y/></x> : 5.0000000000000000000000)))) {var constructor, constructor;export *; } else  if (( /* Comment */(__iterator__.__proto__ =  \"\"  ? <y><z/></y> : false))) yield __iterator__;");
tryItOut("switch(((this.__defineSetter__(\"__iterator__\", eval)\n\f)/*\n*/[this.zzz.zzz])) { default: /*infloop*/for( /x/ ; ([(<x><y/></x> %= <y><z/></y>)]); ((this.zzz.zzz) /= <><x><y/>\f</x></>\n)) {export *; }break; case 2: let (__iterator__, __noSuchMethod__ = <x><y/></x>) { export *; }do const __parent__ = [[1]], __noSuchMethod__ = (function ([y]) { })(); while((true.isPrototypeOf(<y><z/></y>).__count__) && 0);break; case 5: /*for..in*/for(var [constructor, __parent__] = ((eval).call)(yield (<x/>)[<x><y/></x>]++, new function () { export *; } ()) in (__count__.__defineGetter__(\"__parent__\", (( if (true)).watch).call))) {return;eval\n }break; break;  }");
tryItOut("if(<{__noSuchMethod__}>yyy</{__noSuchMethod__}>.(let (__count__ = *, constructor = *) let (get = <x><y/></x>) false)) {L:if(__parent__.(__noSuchMethod__)) { if (true) {export *; }} else gc() } else (this);");
tryItOut("let(__noSuchMethod__, __count__ = (<><x><y/></x></>.*)) { return;");
tryItOut("/*for..in*/L:for(constructor in ({})) {prototype;  }");
tryItOut("if((#0=({__proto__: undefined}))) {M:while((null) && 0){}__noSuchMethod__, constructor = []; } else {}");
tryItOut("function(y) { yield y; export *;; yield y; }");
tryItOut("/*infloop*/L:do {with({function::__noSuchMethod__: new (window)(case 3: break; {}break; )}){throw *::*; } } while(__iterator__ = false);");
tryItOut("/*infloop*/do {throw __count__ =  /x/ ;return <><x><y/></x></>; } while(([function(q) { return q; }()]));");
tryItOut("if((function  prop (prop) { yield 1e4 } ).call( /x/g , ((uneval(__count__))))) ");
tryItOut("L: \nexport *;");
tryItOut("if((({ set __iterator__ __parent__ (__count__, false, this.zzz.zzz)({__parent__: ((__proto__)[*]) }), __count__ getter: <ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd>function  __count__ ()(<y><z/></y>++) }))) {L: {continue M; }constructor, constructor = *\nlet constructor = window, __noSuchMethod__ = __proto__ }");
tryItOut("while((constructor = [1,,]) && 0)/*infloop*/do {yield; } while([* for each (constructor in function ([y]) { })])\nfunction  __iterator__ (prop, __proto__) { return [,,] } ");
tryItOut("{/*infloop*/for(__count__; __noSuchMethod__\f; null) {export *; } }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("L:switch((([-1])(<x/> < *))) { default: yield window;break;  }");
tryItOut("while((Array().throw(eval(\"window\", this))) && 0)return *;");
tryItOut("do {return false; } while((3) && 0);");
tryItOut("(constructor); const prototype;");
tryItOut("/*infloop*/for(prototype %= <y><z/></y>; (function  constructor () { yield <x>\t<y/></x> } ); 1e4 === __iterator__) 'haha'.split");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in null) if((<><x><y/></x></>.__parent__ = this)) throw <x><y/></x>; else  if (<x><\ry/></x>.(0/0)) var __count__, __iterator__;");
tryItOut("if((({__proto__: <y><z/></y> }))) { if ((new (yield #3={a:#3#}) ? <x/> &=  \"\"  : String(@foo, <y><z/></y>)(<x><y/></x>.propertyIsEnumerable(\"prototype\")))) {var  , __noSuchMethod__ = this;var constructor =  /x/ ; }} else {{}(function ([y]) { })() }");
tryItOut("L:if(eval(\"yield;\", [15,16,17,18].filter([1,2,3,4].slice, #2=[<x><y/></x>]))) var __iterator__; else  if (eval(\"(null.valueOf(\\\"number\\\"))[prototype = true\\f]\", (__noSuchMethod__ = __iterator__).__defineGetter__(\"__parent__\", function  __parent__ () { yield prop } ))) throw window; else <x><y/></x>");
tryItOut("throw constructor;");
tryItOut("let __iterator__, prop = #3={a:#3#}\n");
tryItOut("/*infloop*//*\n*/for(false; <x/>; <x/>) return;\nconst __proto__ = undefined, __proto__;\n");
tryItOut("/*infloop*/L:for([, , , ({ prototype: window .@x:: prop.unwatch(\"prop\") }), [, , , , ]] = (<><x><y/></x></> /= 3/0); ('fafafa'.replace(/a/g, (function(y) { yield y; return *;; yield y; }).call)); (<><x><y/></x></>)[(<><x><y/></x></>)(*::*, __noSuchMethod__)].__count__) M:with([z1]){while((this) && 0){continue L; } }");
tryItOut("do {/*for..in*/L:for(const constructor in ((Math.pow)(<x/>))) } while(((yield <y><z/></y>)) && 0);\t");
tryItOut("__count__ = prototype;");
tryItOut("switch(new (<x><y/></x>)(<x/>, -1)) { case 4: break;  }");
tryItOut("if(4.) (\f<x><y/></x>);");
tryItOut("return function::__parent__ = __count__ @ __count__; const x::constructor;");
tryItOut("throw StopIteration;");
tryItOut("throw StopIteration;");
tryItOut("if(<x><y/></x>) {break ; }");
tryItOut("{const prototype;return [,,z1];throw <x><y/></x>; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __iterator__ = [[1]] in @foo) {/*infloop*/L:for( /x/ ; @foo; (-0)) <x/>; }");
tryItOut("/*for..in*/for(__iterator__ = (prop.([z1])) in @foo) {const __iterator__ = <x/>; }");
tryItOut("let (__proto__) { <ccc:ddd> </ccc:ddd> }");
tryItOut("/*for..in*/for(var constructor.__parent__ in this.__defineSetter__(\"__proto__\", function\t  x::__count__ () { return constructor } )) {if([[]].__noSuchMethod__) export prototype; else  if ((null)(__noSuchMethod__) <= Date(*, true)) {<y><z/></y>; } }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <y><z/></y>) continue L;");
tryItOut("L: {continue M; }");
tryItOut("do if((0.1.__lookupSetter__(\"__parent__\"))) prototype = __iterator__; else ; while((Exception()) && 0);");
tryItOut("{/*for..in*/L:for([__noSuchMethod__, __iterator__] = (uneval(#1#)) in delete undefined) {} }");
tryItOut("while((({prop: default: break; break;  = <x><y/></x>})) && 0){{return;#1=[#1#]; } }");
tryItOut("/*infloop*/do throw  /x/ ; while(([constructor = <><x><y/></x></>].map(this)));");
tryItOut("do /*infloop*/do const __iterator__ = __iterator__, prop = <><x><y/></x></>; while(<><x><y/></x></> /= window); while((new ((<y><z/></y> if (<y><z/></y>)))(new gc( /x/ ) >>= function::__parent__ = true)) && 0);");
tryItOut("yield prop.([undefined]) + ({__noSuchMethod__ setter: constructor = <y><z/></y>, /*\n*/ set __count__ __parent__ (__noSuchMethod__)new Object(window |= *::*) });");
tryItOut("/*infloop*/L:do yield; while(__parent__.(@foo :: <><x><y/></x></>));");
tryItOut("M:while(((.2--)) && 0){function(y) { yield y; {}; yield y; } }");
tryItOut("var prototype = __count__, get = __count__\n");
tryItOut("let (prototype = this &= <y><z/></y>, __count__) { if(<y><z/></y>) throw <x/>; }");
tryItOut("if(<x/>[1.3]) /*infloop*/while(((new Function(\"throw window;\")))((this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map))))throw  /x/ ; else {yield <><x><y/></x></>;if(this) const __noSuchMethod__ = <x><y/></x>, get; else  if (<><x><y/></x></>) gc() }");
tryItOut("continue M;");
tryItOut("__noSuchMethod__ = prop;");
