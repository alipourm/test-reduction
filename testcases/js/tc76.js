tryItOut("/*infloop*/for([__proto__, , prototype, , ] = <x><y/></x>(*); (new Function); (function ([y]) { })() ? false : <x><y/></x>) {return;export __iterator__; }");
tryItOut("yield (1 for (x in []));");
tryItOut("switch((-0['__parent__'] = this.isPrototypeOf(__iterator__))) { default:  }");
tryItOut("/*infloop*/for(var prototype;  /x/ .__lookupGetter__(\"__proto__\") -= ([(eval(\"<x><y/></x>\", <x/>)) for each (prototype in [z1])]) |= <x/>; <ccc:ddd>yyy</ccc:ddd>.((<><x><y/></x></>.eval(arguments)))) {break \n const __noSuchMethod__;yield <y><z/></y> }");
tryItOut("try { let(prop = <y><z/></y>) { gc() } catch(__count__) { let(__count__ = 3.141592653589793, __count__) { let __count__ = @foo, prototype = 1e81; } finally { let(__proto__) ((function(){return;})()); } ");
tryItOut("/*for..in*/for(let __proto__ = (<y><z/></y>[ get __iterator__(prototype, prop) { yield  \"\"  - __proto__ } ]) in prop.prototype) {yield __iterator__;\t/*infloop*/M:for(var ({ __noSuchMethod__: constructor, __noSuchMethod__: __noSuchMethod__ }) = constructor =  /x/ ; <><x><y\t/></x></>;  /x/ ) {yield false } }\n");
tryItOut("let (__parent__) { {} }");
tryItOut("if((Math.pow).call((var __parent__), )) { if (((__parent__) = __count__))  else {{} }}");
tryItOut("with({}) throw StopIteration\n");
tryItOut("/*infloop*/for(const __noSuchMethod__ = this.zzz.zzz;  \"\" ; __noSuchMethod__.__parent__ setter= function  __proto__ (prop, constructor) { throw <><x><y/></x></>; } ) do /*for..in*/for(var function::constructor in __parent__) {export __iterator__; } while((<x><y/></x>.(#1#).__lookupGetter__(\"__proto__\")) && 0);");
tryItOut("for(let y in []);");
tryItOut("export __noSuchMethod__;");
tryItOut("/*for..in*/M:for(constructor in (('haha'.split)(#1=[<><x><y/></x></>] === (((yield *::*))[[,,]])))){/*for..in*/for(var __iterator__ in ((Math.pow)(*)))gc()({a1:1}); }");
tryItOut("for(let y in [5,6,7,8]) \n");
tryItOut("{if(([({a1:1}) for (prototype in  /x/ )])) {let prototype = <y><z/></y>;let constructor = prototype, prop = window; } else {throw 5.0000000000000000000000; }switch(( /x/g  || __count__)()) { case ({__proto__:  \"\" , __noSuchMethod__: ((uneval(constructor))) }):  } }");
tryItOut("/*infloop*/for((([1]).watch)(1e4); <><xxx>{prop}</xxx></>; typeof @foo ^= window) (this);");
tryItOut("return;");
tryItOut("return;");
tryItOut("prop = __proto__;");
tryItOut("return @foo;");
tryItOut("<x><y/></x>\n");
tryItOut("let ([] = -__noSuchMethod__, __count__) { throw __parent__; }");
tryItOut("/*for..in*/for([__noSuchMethod__, prop] = <y><z/></y> in false) export prop;");
tryItOut("if(new Exception()) {function(q) { return q; } } else  if ([({prop: __proto__, <x><y/></x>: <><x><y/></x></> })].some([1,2,3,4].slice)) {gc()const __iterator__; } else const __noSuchMethod__;");
tryItOut("/*for..in*/for(const __parent__ in ((Function)(0/0))){yield; }");
tryItOut("{return prototype; }");
tryItOut("L: (1 for (x in []))");
tryItOut("/*for..in*/for(const [constructor, __proto__] = window |  /x/  in window) {(__iterator__);; }");
tryItOut("/*for..in*/L:for(var [constructor, setter] = null.__iterator__ = (true) in \neval(\"\", (__parent__ for (__parent__ in <x><y/></x>)))) {/*for..in*/for(var __iterator__ in <y><z/></y>) gc()let prop = window, __noSuchMethod__ = constructor; }");
tryItOut("with(false){var __noSuchMethod__;gc() }");
tryItOut("let (({ __proto__: __iterator__ }), __iterator__) { switch((\n0)) { default: export __parent__; } }");
tryItOut("/*for..in*/for(let __parent__ = __parent__.get = * .@ ((<x><y/></x>)[<x/>]) in __iterator__ = (@foo)[[1]]) return\nyield;export prop;");
tryItOut("for(let y in []);");
tryItOut("do {export *; } while(( \"\" ) && 0);");
tryItOut("yield window\n");
tryItOut("var __proto__ = this;");
tryItOut("with({}) { for(let y in [5,6,7,8]) let(constructor, prototype = <x/>) { continue L; } ");
tryItOut("with(continue ){/*for..in*/for(var __iterator__ in eval(\"[15,16,17,18].some([1,2,3,4].slice, <><x><y/></x></>)\", (__noSuchMethod__.(undefined)))) {gc()(<x><y/></x>); } }");
tryItOut("let (__parent__, __proto__) { yield; }");
tryItOut("while((<x/>) && 0)yield;");
tryItOut("let(__count__ = ((yield <x><y/></x>)), __parent__ = constructor = <><x><y/></x></>) { __proto__ = __count__;");
tryItOut("L:if(<x><y/></x>.eval(window)) {/*infloop*/for(let __count__; @foo; 3/0) __parent__ =  /x/g , prop } else yield  /x/ ;");
tryItOut("{{return <x><y/></x>;return @foo; }let (__noSuchMethod__, __iterator__) { /*infloop*/for(<x/>.throw(this); [,,] / false; +) {throw function(id) { return id }; } } }");
tryItOut("M:if(<x><y/></x> ? @foo : __iterator__) { if ((__noSuchMethod__ = #3={a:#3#}) &= [<x><y/></x>.watch(\"__proto__\", new Function) for ((*::*)(function::__noSuchMethod__) in 1.2e3) for (__proto__ in -1)]) {return *::*;export __parent__; } else {({}).__lookupGetter__ }}");
tryItOut("if(({__iterator__: Boolean([<x/>].some(gc)) })) with({}) { ; }  const function::__parent__;");
tryItOut("/*for..in*/M:for(const __iterator__ in .2) continue L;");
tryItOut("/*for..in*/for(const [__count__, constructor] = <y><z/></y> in <y><z/></y>) {\fexport *;<x><y/></x> }");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("return;");
tryItOut("do var __count__, ({ __count__: ({ prop: __proto__ }) }) = 0; while(((prop = <x/>.propertyIsEnumerable(\"__count__\"))) && 0);");
tryItOut("M:if(constructor = 3.141592653589793) yield; else {\t(<x><y/></x>); }");
tryItOut("with({}) for(let y in []);");
tryItOut("if(<x/>) {export *; } else throw *::*;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = this.__defineGetter__(\"__iterator__\", (#3={a:#3#} *= undefined)) in <zzz>new Number(<x><y/></x>) ? ((function(y) { yield y; return [z1,,];; yield y; })( /x/g , 3/0)) : false !=  /x/g </zzz>) let __iterator__ = *, __proto__ = @foo;");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((--__noSuchMethod__))(* ? window : #1#))){gc()throw <x><y/></x>; }");
tryItOut("/*for..in*/for(__proto__ in constructor) {let prototype, prototype; }");
tryItOut("if([1].__iterator__ = (*.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__)) <  /* Comment */@foo) {prototype = __iterator__, __noSuchMethod__ =  \"\" ; } else  if (window) {gc() } else if((<x/>)()) {gc() } else  if (<x><y/></x>.(__count__)) const __noSuchMethod__, __count__; else { }");
tryItOut("if(((constructor = __count__)((<><x><y/>\t</x></>.@*)))) { if (__noSuchMethod__) {M:if( '' ) gc() }//h\n else {}}");
tryItOut("yield .valueOf(\"number\");");
tryItOut("/*for..in*/for(constructor = <><x><y/></x>\r</>.valueOf(\"number\") in <><x><y/></x></>) {gc() }\nyield (constructor.constructor);");
tryItOut("if(prop = prop) { if ((undefined ? [1] :  /x/ )) /*for..in*/for(__parent__ in ((<x><y/></x>)(<><><__count__ /></x></>)))} else {/*for..in*/for(var constructor = <\t><x><y/></x></>.watch(\"prototype\", function (__parent__, __parent__) { yield <x><y/></\tx> } ) in <x><y/></x>) M:with(4.){break L; } }");
tryItOut("with() /x/g ;");
tryItOut("/*infloop*/L:while(__iterator__){var __count__ = <y><z/></y>, constructor; }");
tryItOut("export *;");
tryItOut("let (__proto__ = 1.2e3 .@x:: -1\n) { return window\nlet (__proto__ = -0, __proto__) { throw undefined; }\n(@foo); const __proto__; }");
tryItOut("\n const prototype;");
tryItOut("with(return;){yield;if(constructor) {continue ; } else  if (__proto__) export *; else {return;; } }");
tryItOut("prototype = __proto__;");
tryItOut("if(((<x><y/></x>.hasOwnProperty(\"__parent__\")).__iterator__.isPrototypeOf(this))) {break ;gc() } else  if (([window.yoyo(__count__)])) var prototype = undefined, __noSuchMethod__;\n/*infloop*/while(@foo)<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>\n");
tryItOut("with(this.__defineSetter__(\"__parent__\", false).__defineGetter__(\"__parent__\", function  __proto__ () { yield this\n } \t)){/*infloop*/M:for(undefined .@ *\t; (uneval(({})));  '' ) yield;if(this.__defineGetter__(\"constructor\", (({}).__lookupGetter__).apply)) {return; } else  if (<y><z/></y>.__lookupSetter__(\"prototype\")) {} }");
tryItOut("/*for..in*/L:for(var __proto__ = __parent__ = prop in @foo.@foo) {/*for..in*/L:for(__count__ = @foo in window) {yield this;gc() } }");
tryItOut("/*for..in*/for(var constructor in ((new Function)(this))){with({__iterator__: (p={}, (p.z = <><x><y/></x></>)()) @ [15,16,17,18].some(<x><y/></x>, this)})continue ;__iterator__; const __proto__; }");
tryItOut("/*for..in*/L:for(__iterator__.prototype in null\t\n) {}\n const constructor;");
tryItOut("L:if(__iterator__-=<y><z/></y>) throw true;");
tryItOut("L:if( /x/ ) { if (this.__defineGetter__(\"__proto__\", [1,2,3,4].map)) ;\n(window);\n else undefined;}");
tryItOut("if(<y><z/></y>) {yield; } else  if ( \"\" ) {(__iterator__)//h\n;; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in prop, prototype.unwatch(\"__noSuchMethod__\")) {prototype; }");
tryItOut("export __noSuchMethod__\n{window;yield; }");
tryItOut("if(this.__defineGetter__(\"__parent__\", (<x/>).call)) { if (eval(\"<x/>\", @foo)) {var __count__ = [[1]], __proto__;gc() } else {return; }}");
tryItOut("/*infloop*/for(<><x><y/></x></>; function(id) { return id }; this) \t\nwith({__noSuchMethod__:  '' }){throw <x><y/></x>;; }");
tryItOut("{let (__iterator__, __count__ = window) { var __noSuchMethod__ = true, __proto__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<><x><y/></x></> in  /x/g ) yield this;");
tryItOut("/*for..in*/for([__count__, __iterator__] = new (this.__defineSetter__(\"__noSuchMethod__\", Math.pow))(<y><z/></y>) in [*.__defineGetter__(\"({ prototype: __noSuchMethod__, prop: __count__ })\", [1,2,3,4].map)]) switch(let (prop =  /x/ ) let (getter = <x><y/></x>, __noSuchMethod__ = <x/>) <><x><y/></x></>) { default: break;  }");
tryItOut("{var __count__ = <><x><y/></x></>, __count__ = *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__proto__) in <x><y/></x>) <y><z/></y>;");
tryItOut("throw prop;");
tryItOut("throw prototype; const __count__;");
tryItOut("/*infloop*/for(String((new ({}).__lookupGetter__(0/0.propertyIsEnumerable(\"__count__\"), false))); 1.2e3; (({__count__: * }))) {return *;( /x/g ); }");
tryItOut("/*for..in*/for(const __count__ = <y><z/></y> in __parent__) ;");
tryItOut("L: ;");
tryItOut("const function (__noSuchMethod__, __proto__) { return  /x/  }  = <y><z/></y>;");
tryItOut("/*infloop*/while(__noSuchMethod__ = <><x><y/></x></>){/*for..in*/L:for(const [__parent__, constructor] = <x/> in @foo) return <x><y/></x>;export setter; }");
tryItOut("with({})export *;");
tryItOut("if((true.__defineGetter__(\"__count__\", []) ? undefined : constructor = 0)) {( /x/ ); } else  if (((<><x><y/></x></>)(<x><y/></x>, undefined)['__proto__'] = ({prop: [[]], __iterator__: this }) != window)) {yield <><x><y/></x></>.propertyIsEnumerable(\"prototype\"); }");
tryItOut("let (__iterator__ = *::*) { return (-0); }");
tryItOut("if(constructor = eval) {function(q) { return q; } } else {<x/>; }");
tryItOut("/*infloop*/for( '' ; <x><y/></x>; <><x><y/></x></>) ");
tryItOut("if((<x><y/></x>)(true, false)) {this }");
tryItOut("if(<x><y/></x>.__parent__) {} else  if (prototype = <><x><y/></x></>) yield; else {let constructor = (-0), __count__;(window); }");
tryItOut("constructor = [, ({ __iterator__: ({ prototype: __proto__, prototype: constructor }), function::__noSuchMethod__: prop }), /*infloop*/for(let ({ __count__: prototype, __noSuchMethod__: __proto__ }) = null(); new ()(*::*).constructor + (true * <><x><y/></x></>)(let (__count__ = arguments) <x><y/></x>, ({})[true]); <x><y/></x>\n) {/*for..in*/for(var __count__ = this in window) export *;; }, ({ prop: ({ __count__\f: __proto__ }), __iterator__: function::__proto__ })];");
tryItOut("throw __count__;");
tryItOut("/*infloop*/L:while(({prop: [,,], __proto__: * }).propertyIsEnumerable(\"__parent__\")){;return; }");
tryItOut("L:if([[1]]) export __iterator__;");
tryItOut("<><></></> const yield;");
tryItOut("while((<><x><y/></x></>) && 0){var __proto__ = [1,,];{} }");
tryItOut("M:switch((() !== new constructor([1]).hasOwnProperty(\"__count__\"))) { default: case 0: return __noSuchMethod__;break;  }");
tryItOut("with({constructor: <bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>.(<><x><y/></x></>)})yyy");
tryItOut("{break ; }");
tryItOut("throw StopIteration;");
tryItOut("L:if(<><x><y/></x></>.__defineSetter__(\"__count__\", (window).) | (null.watch(\"prop\", new Function))) if((-0)) { if (<><x><y/></x></>) return  /x/g ; else {}} else {/*for..in*/M:for(var __proto__ = <x><y/></x> in <y><z/></y>) {gc()continue ; } }");
tryItOut("L:with({prototype: <><x><y/></x></>.valueOf(\"number\")}){var __proto__ = <x><y/></x>, prop; }");
tryItOut("export *\nexport *");
tryItOut("return;");
tryItOut("gc()");
tryItOut("/*infloop*/for(var __proto__; <x><y/></x>.propertyIsEnumerable(\"__proto__\"); new ('haha'.split).apply([1,,], <><x><y/></x></>)) gc()");
tryItOut("{/*infloop*/for(1e81; <y><z/></y>; false) yield }");
tryItOut("/*for..in*/for(const __parent__ in (((({}).hasOwnProperty).call)(<><x><y/></x></>[ '' ]))){(new Function(\"let prop = <><x><y/></x></>, prototype = prop, case undefined: export __parent__;break; default: break; {}case 8: ;break; yield;case 5: return;break; prop = __noSuchMethod__, function::__iterator__;break; gc();\")) }");
tryItOut("with({constructor: 0.unwatch(\"null\")}){const prototype = 1.3;{export *;__iterator__ = <><x><y/></x></>, constructor = prop; } }");
tryItOut("if([(({__noSuchMethod__: this }))(__noSuchMethod__ = prototype, window) if (__parent__ = this)]/*\n*/) { if (yield  set constructor __noSuchMethod__ ()this++) with({__count__: 1e81.watch(\"__iterator__\", function(y) { yield y; return __noSuchMethod__;; yield y; })})throw [z1,,]; else {yield <x><y/></x>;return [,,z1]; }}");
tryItOut("prop((<x/>.unwatch(\"constructor\"))) = __proto__;");
tryItOut("throw __iterator__;");
tryItOut("if((this.__defineGetter__(\"__proto__\", ({}).hasOwnProperty)) <= delete function(id) { return id }) {throw <x><y/></x>; } else /*for..in*/for(var [__count__, prototype] = ((__count__%=this) >> ('fafafa'.replace(/a/g, (@foo).__defineSetter__))) in __noSuchMethod__ = <x/>) yield prototype;");
tryItOut("if('fafafa'.replace(/a/g, (Math.pow).call(*, *, []))) {(1.2e3).__defineSetter__\n\nconst __count__ = <><x><y/></x></> } else  if ((yield ( ''  for (__proto__ in undefined)))) {/*infloop*/M:for(var constructor; __proto__; #0=({__iterator__:  /x/g })) arguments; } else /*for..in*/for(var [prop, prototype] = function  __proto__ (__iterator__, __noSuchMethod__) { (3.141592653589793); } (-0, true).__defineGetter__(\"__parent__\",  '' ) in <y><z/></y>.yoyo(<y><z/></y>)) {export __parent__;/*infloop*/for(let __parent__ = (-1); <>false</>; undefined) {const prototype = <x/>;export *;\f } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__(<x><y/></x>) in (uneval(__iterator__.@foo))) /*for..in*/M:for(var [__noSuchMethod__, __noSuchMethod__] = window in [z1,,]) yield {};switch(constructor) { case this.__defineSetter__(\"prop\", (<><x><y/></x>/*/>)): break; case 0: break; case __noSuchMethod__ = this: {}\fcase 9: export __count__;break; case 5: (1 for (x in [])) }");
tryItOut("/*infloop*/for(const ({ __proto__: __proto__ }) =  '' .valueOf(\"number\"); @foo ? 3/0 : true; <><x><y/></x></>) {}");
tryItOut("L:if(<y><z/></y>) throw *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((this.zzz.zzz = /a/gi))((* = 1e81 ^ <y><z/></y>)) in (p={}, (p.z = prototype = <x><y/></x>)())) yield __parent__;");
tryItOut("with((prototype))const __count__;");
tryItOut("{continue ; }\nM:if(<y><z/></y>) let __parent__ = undefined; else  if (undefined) export *;\n");
tryItOut("yield\n");
tryItOut("return function(id) { return id };");
tryItOut("{if(<y><z/></y>) continue ; else  if ( \"\" ) yield; }");
tryItOut("try { let __parent__ = 3, __noSuchMethod__ = null; } catch(prop)\t { var __parent__, prototype = *; } finally { gc() } ");
tryItOut("if(__proto__|=new Error(window)) {((* ^= <x><y/></x>) ? (new Function(__proto__)) : #0=1.2e3) = __parent__; }");
tryItOut("with({__noSuchMethod__: <><x><y/></x></> != this}){__proto__prototype; }");
tryItOut("M:if((p={}, (p.z = ( '' .__parent__))())) gc()");
tryItOut("continue L;if((0.1)[0x99]) { if (0.1 && 0) { } else } const __proto__;");
tryItOut("M:switch(@foo) { default: break;  }");
tryItOut("/*infloop*/while((eval(\"L: {export *; }\", prop.(eval(\"Function\",  \"\" )) ? (p={}, (p.z = true)()) : ()))){export prototype; }");
tryItOut("/*infloop*/L:for(var ({ prototype: [], __iterator__: ({ __count__: [] }) }) =  /x/ .@* ? (this.__defineSetter__(\"__noSuchMethod__\", function (__count__) \"\" )) : [11,12,13,14].sort; @foo; null.@foo.propertyIsEnumerable(\"__iterator__\")) L:do {let __parent__; } while((this) && 0);");
tryItOut("\nif(__noSuchMethod__<x><y/></x> += arguments) { if ((~window)) return; else {throw <x><y/></x>;__parent__ = true; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <x/>['prototype'] in (this.zzz.zzz) %= (__proto__)) {; }");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ =  ''  :: <x><y/></x>) { let(prototype = __parent__.__count__, __noSuchMethod__) ((function(){throw prototype;})());");
tryItOut("/*for..in*/for(const __count__ in ([(<x/> >>= false)( /x/g )--])) export *;let constructor, prop;");
tryItOut("{<x/>; }");
tryItOut("this.zzz.zzz;");
tryItOut("M:with((<x><y/></x> >>> null( /x/ .propertyIsEnumerable(\"prop\"), <y><z/></y>) >>= (uneval(@foo)) ? __proto__ = [,,z1] : (([<y><z/></y> if (({a1:1}))]).isPrototypeOf(window , <y><z/></y>)))){{/*for..in*/for(__noSuchMethod__ in ((function  __proto__ (prototype, __count__) { {} } )(3/0)))yield __iterator__; } }");
tryItOut("let(__noSuchMethod__) { throw StopIteration;");
tryItOut("return;");
tryItOut("export *;<><x><y/></x></>;");
tryItOut("/*infloop*/L:for(var __count__ = (*::*)[ /x/g ]; new (prop)(window, constructor).@foo.__proto__; (({}).__lookupGetter__)()) if((3.141592653589793 .@x:: #1#).propertyIsEnumerable(\"__noSuchMethod__\")) {gc()break ; } else  if (<><{prop}><!--yy--></{prop}></>.prop = (<x/> ? constructor : __parent__ =  '' )[*::*\n]) {gcexport <>5</>; }");
tryItOut("/*infloop*/while(this){{return;break ; }{} }");
tryItOut("L:do for(let y in []); while((( if (<bbb xmlns:ccc=\"true\"><ccc:eee></ccc:eee></bbb>function  prop ()undefined) = <> var </>.prototype)) && 0);");
tryItOut("/*for..in*/for(const get = true in undefined) throw this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <><x><y/></x></>) {export *; }");
tryItOut("/*for..in*/for(const __iterator__ = __parent__ in  /x/g ) { { return __parent__ } {} }\n/*for..in*/L:for(const [prop, prop] = (new ((1 for (x in [])))((yield 3.141592653589793), ({__iterator__: this }))) in  \"\" ) {export prototype;return <y><z/></y>; }");
tryItOut("{{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor.__proto__ in (this.__defineGetter__(\"__parent__\", Function))) ;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prop] = !function  __count__ (__parent__) { yield window; }  in (({ set __parent__ constructor () { yield <x><y/></x> }  }) .@x:: (function::__iterator__.(<x><y/></x>)) <<= (prop.x::__parent__ getter= <x/>))) {/*infloop*/for(var __iterator__; ! \"\" ; __proto__+=<><x><y/></x></>) {function (prototype) { return <><x><y/></x></> } yield; }L:while((@foo) && 0)\treturn null\nM:if( /x/ ) var prototype = (-0), prop; else  if (<x><y/></x>) export __iterator__; }");
tryItOut("if((({ __iterator__: ({}).watch }) = <x><y/></x> :: <><x><y/></x></>)) {gc()const prop = <><x>\f<y/></x></>; } else  if (this.zzz.zzz) constructor = [,,z1] else {export  /x/ ;(<x><y/></x>); }this.zzz.zzz;");
tryItOut("function  constructor () { yield (__count__.__proto__) } ");
tryItOut("switch(this.__defineSetter__(\"prop\", function(y) { yield y; -1;; yield y; }) |= (__iterator__-=<><x><y/></x></> ? (prototype = <x/>) : (@foo.valueOf(\"number\")))) { case  /x/g : /*infloop*/do return; while(__count__);break; default: case ( /* Comment */(({__noSuchMethod__: [15,16,17,18].map((<y><z/></y>).__defineSetter__, ([z1].valueOf(\"number\"))), prop: <x><y/></x>.(<x/>) if (<y><z/></y>) }))): case 4: /*for..in*/for(let constructor = prototype =  /x/g  in  /x/g ) {export __iterator__\n }export prop;case this.__defineGetter__(\"__count__\", eval): export *\nbreak;  }");
tryItOut("if(true) {break ; } else  if (try { __parent__ = __count__; } finally { this.zzz.zzz; } ) /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in this) yield; else const __noSuchMethod__ = __iterator__, __count__;");
tryItOut("yield new Math.sin(({a1:1}), function ([y]) { });");
tryItOut("/*for..in*/M:for(let [__parent__, prop] = ((prototype = <><x><y/></x></>).propertyIsEnumerable(\"prop\")) in __noSuchMethod__) {throw constructor.__defineSetter__(\"constructor\", (([1]).watch).call); }");
tryItOut("{do return; while(( /x/ ) && 0); }");
tryItOut("L: {M:if([this if (*)]) yield; else  if (constructor = <><x><y/></x></>) {break L; } else {} }");
tryItOut("yield false;");
tryItOut("{var constructor = <><x><y/></x></>, __proto__\n\nthrow __parent__; }");
tryItOut("/*for..in*/for(const __iterator__ = false in null) function(y) { yield y; const constructor = <x/>, prop;; yield y; }");
tryItOut("if((new (({prop: [,,]}))(prototype ? <x><y/></x> : prototype))) {/*for..in*/for(let __parent__ in ((({}).__lookupGetter__)(eval(\"with({prototype: prototype}){export __count__;(@foo); }\", <y><z/></y>)))){yield;({ __noSuchMethod__: this.__parent__, prototype: ({ __count__: [[]], __parent__: prop }) }) }return; } else  if ((<xxx>{__parent__}</xxx>.isPrototypeOf()) ? ((prop.__noSuchMethod__ = <x><y/></x>) << __noSuchMethod__%=[z1] for each (__iterator__ in null) for each (__noSuchMethod__ in (function ([y]) { })()) if (<x/>)) : while(({}) && 0){return  /x/ ; }) {let __parent__;/*for..in*/for([prop, prototype] = (prototype.constructor) in true) {{}export prototype; } } else L: {return; }");
tryItOut("/*for..in*/for(const __count__ in ((function(q) { return q; })(<><x><y/></x></>))){}");
tryItOut("L:switch(constructor(__iterator__ = (__iterator__.getter).propertyIsEnumerable(\"each\")).__proto__ setter= function(q) { return q; }) { case 1: yield setter;break;  }");
tryItOut("/*infloop*/M:while([15,16,17,18].filter(gc, prototype.([,]))){break ;( /x/g ); }");
tryItOut("return null;");
tryItOut("constructor, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("for(let y in [5,6,7,8]) with({}) { prop = prototype; } ");
tryItOut("L: {with(this);[1,2,3,4].slice }");
tryItOut("return;");
tryItOut("/*for..in*/for(prototype = (\n*.__defineSetter__(\"__proto__\", [1,2,3,4].slice)) in __iterator__) {export *;{} }");
tryItOut("/*for..in*/for(const [__count__, prototype] = (prototype.constructor getter= 'haha'.split) in __count__ = window.__count__) {throw <><x><y/></x></>; }");
tryItOut("M:switch((<x/> !=  /x/g )) { case prop|=#3={a:#3#}: /*infloop*/for(var ; [[]]; 5.0000000000000000000000) {#1=[#1#] }yield;break; default: continue ;;break;  }");
tryItOut("do {export prototype; } while(((<><x><y/></x></> .@x:: this)) && 0);");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; arguments;  /x/ ) {break L; }");
tryItOut("(<><x><y/></x></>)");
tryItOut("for(let y in []);");
tryItOut("L:with(<bbb xmlns=\"(* , <x><y/></x> && __count__)\"><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></bbb>){<><x><y/></x></>.yoyo([,,z1]);(<x><y/></x>); }");
tryItOut("do yield ; while((\n[]) && 0);");
tryItOut("with({prop: __iterator__.prototype = <y><z/></y>}){export __iterator__;__count__ =  '' , prototype = window; }");
tryItOut("switch(prototype = <x/>) { case 9: {}break; break;  }");
tryItOut("/*infloop*/for(const __noSuchMethod__; Array(); __iterator__ = <xxx>{__proto__}</xxx>.([z1] != )) export *;");
tryItOut("M:if([({ __proto__: __parent__, __count__: __proto__ })] =  \"\" .@foo) {let __iterator__ = true, prototype; } else  if ((function  __count__ () { yield *::* }  = <x/>)) {/*infloop*/for(__parent__ = *::*; this; 1e4) export prototype;(window); }");
tryItOut("/*infloop*/M:for(((<><x><y/></x></>)(({})))(__noSuchMethod__ = undefined | (-1).yoyo(this--)) = eval(\"(*::*.__defineSetter__(\\\"__count__\\\", function  __count__ (constructor) { return * } ) ? *::* -= 4. : undefined.isPrototypeOf(<x><y/></x>))\", this.@foo); Number('fafafa'.replace(/a/g, function(q) { return q; })); constructor) {prop;var __noSuchMethod__, __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(({a2:z2})['__noSuchMethod__'] in false >>> <><x><y/></x></>) gc ");
tryItOut("/*infloop*/for(<x><y/></x>.unwatch(\"__count__\"); this.__defineSetter__(\"__parent__\", function(q) { return q; }); <x><y/></x> for each (__count__ in  \"\" )) {( \"\" );; }");
tryItOut("break L; const __proto__;");
tryItOut("if(true % <x><y/></x>) {return;{}\nthrow  '' ; } else { }");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(let prototype = (__noSuchMethod__\f.__parent__ setter= .2) in window) yield <y><z/></y>;if(((Math.pow).call( /x/g .valueOf(\"number\"), )) === __proto__.prototype getter= *) { if ( for each (__noSuchMethod__ in  '' ) for (__noSuchMethod__ in @foo) if (@foo)) {if(*::*) export function::prototype; else  if ( '' ) {\treturn window;return <><x><y/></x></>; } else let __iterator__, prototype;__noSuchMethod__, __count__ = [z1,,]; } else }");
tryItOut("/*for..in*/for(let <y><z/></y> = -\n033 |= * in ((uneval(<y><z/></y>)))) ({ __parent__: ({ prototype: ({__iterator__: *::*,  set __proto__(prop, __iterator__)<y><z/></y> }), prototype: [[], ({ constructor: ({ __iterator__: prototype, constructor: __count__ }), each: __count__ })] }) })");
