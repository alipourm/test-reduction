tryItOut("return *\nreturn;");
tryItOut("M:if(((undefined.__iterator__ = <x><y/></x>)[(prototype)].__defineGetter__(\"__noSuchMethod__\", gc))) L:if(constructor = __parent__) { if ((({a2:z2}) < <x><y/></x>)) {undefined; } else var __iterator__ = <y><z/></y>;} else  if (function  __count__ () { return window } (-3/0)) {/*for..in*/for(var [prototype, __noSuchMethod__] = new 3/0 in false) {function(q) { return q; } }let window; }");
tryItOut("((<><x><y/></x></>[__proto__]))((!!<x><y/></x>)) = __proto__;");
tryItOut("do {if(<x><y/></x>) { if (1.2e3) gc() else function::constructor = this;}while((3) && 0){var __noSuchMethod__, __iterator__; } } while((Math.pow( /* Comment */({}), <><x><y/></x></>)) && 0);");
tryItOut("if( /x/g ) { if (*) ( '' ); else yield <y><z/></y>;}");
tryItOut("for(let y in []);");
tryItOut("with(-3/0)throw 0x99;");
tryItOut("{if( /x/g ) { if ([11,12,13,14].some) {(<x><y/></x>); }} else yield <x/>;export *; }");
tryItOut("while(((this.__defineSetter__(\"constructor\", Math.sin))) && 0){export *;continue ; }");
tryItOut(";");
tryItOut("if([[1]].throw(__proto__) instanceof ~<><x><y/></x></>) {continue M; } else  if (arguments .@ <><x><y/></x></>) prototype = <><x><y/></x></>, constructor;");
tryItOut("/*infloop*/L:while((Math.pow)(typeof [z1,,], 'fafafa'.replace(/a/g, Function))){prop;throw <x><y/></x>; }");
tryItOut("if(undefined) { if (undefined) {{}break L; }} else var prop, __count__ = [,,z1];");
tryItOut("do {yield;constructor: __proto__ = #1# ^ (p={}, (p.z = 1.2e3)()) } while((let (__noSuchMethod__ =  /x/ ) <x><y/></x>) && 0);");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = (__iterator__ .@  /x/ ).@* in  /x/g ) {/*for..in*/for(const __iterator__ in window) {continue ;; }(*::*); }");
tryItOut("__parent__;");
tryItOut("if(__iterator__) {gc() }");
tryItOut("/*infloop*/for(((uneval(\n({constructor: 'fafafa'.replace(/a/g, function (__noSuchMethod__, prop)false) ? prop : (constructor = [,])})))); +(([prototype.__proto__ = \nundefined].some(\t /* Comment */null)) ? (undefined.@*) : ({ get: ({ __iterator__: __count__, __parent__: __parent__ }), function::__noSuchMethod__: __parent__ }) = (~(__parent__+=1e+81))); ([15,16,17,18].sort(({}).hasOwnProperty, (function ([y]) { })())).@*) gc()");
tryItOut("with({}) with({}) const __iterator__, __parent__;");
tryItOut("/*for..in*/for([__iterator__, __parent__] = (new (function(y) { yield y; gc(); yield y; })([,,z1],  /x/ )).isPrototypeOf(( { return undefined } )[(-0)]) in (*::*.hasOwnProperty(\"__count__\"))) {if(*) {function  __count__ (constructor) { return true }  } else  if (<><x><y/></x></>) {prop = <><x><y/></x></>; } }");
tryItOut("if((({//h\nconstructor:  /* Comment */-1, prop: new (undefined)( /x/g ) }))) { if (((<x><y/></x> >>>  \"\" ).watch(\"prototype\", (1 for (x in [])))++)) {export constructor\n\n }} else yield prototype.(false);");
tryItOut("{}");
tryItOut("while(((({ set prop()set })\t)) && 0){export *; }");
tryItOut("if((this\n.isPrototypeOf(([] = ({__parent__: constructor}))))) { if (constructor.__iterator__) continue L;} else return;");
tryItOut("/*for..in*/for(__iterator__ in ((function (prototype)function::__noSuchMethod__)(<><x><y/></x></>))){; }");
tryItOut("return 5.0000000000000000000000;");
tryItOut("L:if((prototype.__parent__ setter= <><x><y/></x></>).eval(<x/> ? *::* : this).__lookupSetter__(\"__parent__\")) constructor else  if (([++<y><z/></y>].map(((window).watch).apply))) ;");
tryItOut("L: {; }");
tryItOut("/*infloop*/L:for(var __noSuchMethod__; <x/>[<y><z/></y>]; let (prop) true) {/*infloop*/L:for([__parent__, ] = function(id) { return id }.__lookupGetter__(\"__parent__\"); (-1).unwatch(\"constructor\"); new Error( /x/ )) {throw __noSuchMethod__;gc() } }");
tryItOut("try { undefined; } catch(__parent__ if null) { ; } catch\r(constructor) { ; } finally { {} } ");
tryItOut("throw ((p={}, (p.z = <><x><y/></x></>)())); const __noSuchMethod__;");
tryItOut("/*infloop*/for((__proto__%=__proto__.throw(({a2:z2})\n)); ; ((*::*)[this]) < 'haha'.split.__lookupGetter__(\"__count__\").__iterator__) {/*infloop*/M:do continue M; while(__parent__ = __proto__); }");
tryItOut("/*for..in*/M:for([__parent__, prototype] = 1e4 > @foo in [<x><y/></x> | @foo].filter(<x><y/></x>)) {;yield window; }");
tryItOut("var constructor;");
tryItOut("L:if(<x/>) { } else  if (__proto__[3/0].__lookupGetter__(\"__parent__\")) {}");
tryItOut("with({constructor: 033 <= this}){yield; }");
tryItOut("/*for..in*/for(var constructor in ((({}).__lookupGetter__)(<>yyy</>)))if(<>yyy</>) {constructor =  '' ;return; }");
tryItOut("L:with({__count__: null << *})export __count__;");
tryItOut("/*for..in*/L:for(let ({ constructor: __noSuchMethod__, constructor: ({ __noSuchMethod__: ({ let: prop, prototype: __noSuchMethod__ }), __parent__: ({ prop: prototype, __iterator__: prototype }) }) }) in ((<x><y/></x>(#1#, __noSuchMethod__)) + void (-0))) {(false)\ngc() }");
tryItOut("throw prototype;");
tryItOut("__noSuchMethod__.prop = __count__\n{}\n");
tryItOut("with({__proto__: <bbb xmlns=\"({__noSuchMethod__ setter: (new Function(\"<x><y/></x>\")) })\"> </bbb>})switch(<x/> ? 0/0 : <y><z/></y>) { case 6:  }");
tryItOut("L:do throw <><x><y/></x></>; while((this.zzz.zzz) && 0);");
tryItOut("*::*['__iterator__'] = constructor;");
tryItOut("/*infloop*/do {/*infloop*/while(<x><y/></x>){__parent__ = <x/>; } } while((<x><y/></x>)[<><x><y/></x></>]);");
tryItOut("let(prototype, __noSuchMethod__ = true) { return;");
tryItOut("do {/*infloop*/for(const __noSuchMethod__ = true; <y><z/></y>; <x/>) { } } while(((({ get (@foo)( '' )(({ __noSuchMethod__: __parent__/*\n*/, prototype: __noSuchMethod__ })) { <><x><y/></x></>; } ,  get __count__ __parent__ (__proto__, prop) { return #1=[#1#]; }  })).throw(({__noSuchMethod__: __parent__ }) && [z1] @ false)) && 0);");
tryItOut("constructor;");
tryItOut("M:with({get: (prop = __noSuchMethod__)})*;");
tryItOut("/*infloop*/L:for(({ __iterator__: ({ prototype: ({ __proto__: [, , ({ window: ({ constructor: [__iterator__, __iterator__, ] }) }), ], prop: [, __parent__, [__iterator__, ({ __count__: ({ __noSuchMethod__: __iterator__ })\f, __count__: [] })]] }), get: [] }), constructor: [__iterator__, , prop] }) = (__parent__ if (null)); [({ prototype: [prop, , ] }), ] = (function(q) { return q; })() , function::prop; __count__ = new (__proto__)(#3={a:#3#}, <x><y/></x>)) {;<x><y/></x>; }");
tryItOut("{;; }");
tryItOut("<zzz>(<x><y/></x>.(this))</zzz>");
tryItOut("if((prop =  \"\" )(<><bbb xmlns=\"default: const __proto__ = this;break; \"></bbb></>, *::* in undefined)) <x><y/></x>; else  if (yield constructor.prop) {yield }");
tryItOut("while((({ __count__: ({ __count__: __proto__ }) }) = prop = __count__) && 0)if(*::*) \f(1.2e3)\n/*infloop*/while(*::*); else  if (*::*.__iterator__ = (p={}, (p.z = ({__parent__: constructor}))())) {{} } else {return;export __parent__\n }");
tryItOut("{__parent__ = null; }");
tryItOut("if((this.__lookupGetter__(\"prototype\"))) throw [1]; else M:while((__proto__) && 0)yield;");
tryItOut("/*infloop*/while(((({}).hasOwnProperty)(<y><z/></y>, <y><z/></y>)))yield true;L: export *;");
tryItOut("let(x::__iterator__, prop) { with({}) for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*infloop*/for(const __proto__; @foo; <><!--yy--></>.@*) {/*for..in*/for(const constructor = 1.3 in @foo) {prop =  /x/g ;throw @foo; } }");
tryItOut("/*for..in*/for(let [prototype, ({ constructor: ({ prop: ({ __noSuchMethod__: constructor, prop: ({ __noSuchMethod__: [, [({ __noSuchMethod__: prototype }), ({ __count__: __parent__, prop: __count__ }), , , __count__], ({ prototype: __parent__ })] }) }) }) })] = prop.(window for each (prop in  '' ) && ([ /x/  for (prop in true)])) in this) if(033)  /x/g ; else  if ( \"\" ) {yield; } else const __noSuchMethod__, constructor = <><x><y/></x></>;");
tryItOut("{M:if(<><x><y/></x><//*\n*/>.@*) { if ((Exception())) (0);} else { } }");
tryItOut("\tL:if(this.__lookupSetter__(\"__count__\")) {(function  __count__ (__noSuchMethod__, __iterator__) { yield <><x><y/></x></> } ).apply } else  if ((yield <x><y/></x>[<x><y/></x>]\n)) continue ;/*for..in*/for(var [this.zzz.zzz, __proto__] = \n({a1:1}) in *) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in  '' ) {var constructor = ({a1:1}); }");
tryItOut("{return; }\nreturn __noSuchMethod__;\n");
tryItOut("/*infloop*/for(__iterator__; new (new Function(\"new Function\"))([[z1]]); @foo) {do const __count__ =  /x/g ; while(((p={}, (p.z = true)())) && 0);/*for..in*/for(let __noSuchMethod__ in (((new Function(\"(<><x><y/></x></>).watch\")))(__iterator__)))const __iterator__, prop }");
tryItOut("if( '' ) { if ((*::*.throw(0x99))) {return <x><y/></x>; }} else throw <x><y/></x>\nreturn (/a/gi).call((new this()), );");
tryItOut("{{var prop = <><x><y/></x></>\r;do {yield;export *; } while((__iterator__) && 0); }return; }");
tryItOut("const prop = *::*\n");
tryItOut("if(*::*) {} else  if (@foo) export __noSuchMethod__");
tryItOut("if(<y><z/></y>++ .. prop = [[]]) {yield;window; } else  if (__noSuchMethod__ = prototype) \t else {}");
tryItOut("throw  /x/g ;/*\n*/");
tryItOut(" get __iterator__() { return this } \n(<x><y/></x>);\n");
tryItOut("__parent__ = constructor;");
tryItOut("return __proto__; const prototype;");
tryItOut("const __noSuchMethod__, __iterator__ =  \"\" ;");
tryItOut("L:with({__iterator__: (prop = __count__ =  '' (([15,16,17,18].map(<y><z/></y>, @foo.__lookupSetter__(\"__count__\")))))}){continue L; }");
tryItOut("while((__proto__(<x/>)%= /* Comment */__count__.( /x/ )) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in 1e4) {const __proto__, prop = <x/>;var __noSuchMethod__, prop =  { yield <x/> } ; }");
tryItOut("(@foo)\nyield  /x/ ;");
tryItOut("L:with(__parent__ = constructor)");
tryItOut("while(( \"\" ) && 0)throw  /x/g ;");
tryItOut("/*for..in*/for(let __parent__ in let (__count__) (#2=[*::*])) {try { yield __noSuchMethod__; } finally { throw  /x/g ; } if(({constructor getter: function(y) { yield y; let (null);;; yield y; }, __count__: <y><z/></y> })) {yield  \"\" ;gc() } else  if (#1=[#1#].__lookupGetter__(\"set\")) (*::*); else { } }");
tryItOut("M:switch((Boolean()).isPrototypeOf(new 0)) { case 2: if(constructor = new <x><y/></x>(window, <><x><y/></x></>)) throw *;default: if(prototype) export constructor; else {yield prototype;Function }case [<x/> for each (__count__ in undefined.__noSuchMethod__) for each (constructor in null)]: case  /* Comment */(<x><y/></x>\n).unwatch(\"__noSuchMethod__\"): throw <><x><y/></x></>\nexport prototype;break; continue L;/*infloop*/do (@foo); while(3/0);case (/a/gi)(__noSuchMethod__ = <x><y/></x>, <><x><y/></x></>): ;break; case (constructor.prop = <x><y/></x>): break;  }");
tryItOut("L: {{} }");
tryItOut("{let prototype =  /x/g , __noSuchMethod__ = [1]; }");
tryItOut("/*for..in*/for(var [__count__, __iterator__] = prototype.constructor getter= eval.__count__.__parent__ in <><x><y/></x></>) {yield; }");
tryItOut("/*infloop*/L:for(var ({ prop: __parent__, prototype: ({ __iterator__: prototype }) }) = prop = ({a1:1}); ({__parent__ setter: Math.sin }); (__noSuchMethod__.@*)) {var prop = __proto__ = 1e-81, prop }");
tryItOut("var __noSuchMethod__ = window;switch(<y><z/></y>) { default: return;break; case 5: throw @foo;case  '' : export __iterator__;break; case __count__: return;break;  }");
tryItOut("/*for..in*/for(delete in ((Function)(eval(\"export __proto__;\", (new Number(__iterator__|=<x/>)))))){yield ; }");
tryItOut("let (__parent__ = true) { return; }");
tryItOut("/*infloop*/do {return true;return; } while(this === <x><y/></x>);");
tryItOut("__proto__ = __parent__;");
tryItOut("return ((yield [[1]]) /  /* Comment */__proto__ = 5.0000000000000000000000);");
tryItOut("{__noSuchMethod__; }\n");
tryItOut("/*for..in*/for(const <ccc:ddd><ccc:ddd><zzz>eval(\"__noSuchMethod__.(this)\", __parent__ =  /x/g )</zzz> </ccc:ddd></ccc:ddd> in ((({}).__lookupGetter__)(((function (__noSuchMethod__) { (null); } ).call(<><x><y/></x></>, ))))){L: yield (function ([y]) { })();var __parent__ = <x><y/></x>; }");
tryItOut("{function (__iterator__, prop) { yield  ''  }  }");
tryItOut("if(({constructor: [this if ([1])], prototype: function ([y]) { }.valueOf(\"number\") })) {__parent__;throw window; } else  if (]) throw yield <><x><y/></x></>;");
tryItOut("default: case setter+=1.2e3: export *break; case 3: ");
tryItOut("let (__noSuchMethod__) { function  prototype ()<><x><y/></x></> }");
tryItOut("if(<><xxx {constructor}={(#0=({prototype: <x/>}))} /></>) {const prototype;; } else gc()");
tryItOut("if(__noSuchMethod__ =  '' ) { if ([((uneval(<><x><y/></x></>))) for each (__count__ in  /x/ ) for each (__count__ in @foo)]) {throw #3={a:#3#};__iterator__ } else continue M;}");
tryItOut("M:do case ([1,2,3,4].map).call(<><x><y/></x></>, __count__, <x><y/></x>).constructor: break;  while(((constructor.__count__ = 1.3.@foo)) && 0);");
tryItOut("let(__proto__ = (__proto__.__iterator__)) ((function(){__noSuchMethod__ = __count__;})());");
tryItOut("let (__count__ = *.__lookupSetter__(\"__count__\")) { if(const __proto__, __iterator__) {return; } else  if (+ /x/ ) {var prop, __iterator__ = <x><y/></x>; } }");
tryItOut("L:with(*::*)__noSuchMethod__ setter: 'haha'.splitM:do  while((<y><z/></y>) && 0);");
tryItOut("return;");
tryItOut("with([15,16,17,18].sort(({}).__lookupGetter__, new <><x><y/></x></>())){{} }");
tryItOut("/*for..in*/for(prototype in ((function\f  __proto__ (__noSuchMethod__, prototype) { true } )(<x/>))){export __iterator__; }");
tryItOut("/*for..in*/for(var 1e+81 ? this : prop.prototype in (((p={}, (p.z = [,])()))( \"\" )))if([15,16,17,18].sort(({}).__lookupGetter__, null .. this)) { '' ; } else  if ((window.constructor)) return;");
tryItOut("/*infloop*/for(let [, prototype, ({ constructor: __count__ })] = [,,] <= <y><z/></y>; window.__defineSetter__(\"__proto__\", function(q) { return q; });  /x/  instanceof false.yoyo(((yield <y><z/></y>)))) let constructor, each;");
tryItOut("this.zzz.zzz;");
tryItOut("export *;\n;\n");
tryItOut("continue ;\ncontinue M;\n");
tryItOut("/*for..in*/for(let __count__ = (void <y><z/></y>).\nyoyo((__noSuchMethod__.valueOf(\"number\"))) in yield true >>> (constructor = <y><z/></y>).isPrototypeOf(__count__ = ({__count__: #1#,  get __proto__(__proto__, prototype) { yield * }  }))) export __iterator__;");
tryItOut("/*infloop*/for(let prop = 1e81;  \"\" ; window.isPrototypeOf([,,z1])) {L:if(false) { if ((<x><y/></x>.yoyo(__count__))) export *; else export *;} }");
tryItOut("/*infloop*/for(1e-81; prop; __noSuchMethod__-=([z1,,].__iterator__ = <x/>)) (({a2:z2}))\nif((yield  /x/g )) { if (({ get __noSuchMethod__ __noSuchMethod__ () { export *; } , getter: * })) {continue ;export *; } else {}}");
tryItOut("return;");
tryItOut("return\n/*for..in*//* nogeckoex bug 349964 */ for  each(default: continue ; in  /x/ ) {(@foo);yield; }");
tryItOut("if(()) { if ((prop.__lookupGetter__(\"__proto__\"))) (prototype.__proto__ = __count__); else throw @foo;}");
tryItOut("L:if(['fafafa'.replace(/a/g, /a/gi)].map(/a/gi)) {export *; }");
tryItOut("do <><x><y/></x></>;prop = constructor, __proto__;\n while((this;) && 0);");
tryItOut("if((window % 0.1)) {try { yield; } catch(__count__ if (function(){})()) { export *; } catch(each if  /x/ ) { throw  \"\" ; } catch(__proto__) { export __parent__; } finally { let constructor = <x/>, constructor; }  } else {const prop = function::__iterator__, prop = #1#;([1]); }");
tryItOut("/*for..in*/M:for(let this.__noSuchMethod__ in <><x><y/></x></>) {;const __noSuchMethod__; }");
tryItOut("with({++this: (window.*)}){#1#; }");
tryItOut("try { return; } catch(__proto__) { prototype = prototype; } finally { let([]) ((function(){prototype = constructor;})()); } ");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; ((-1).__iterator__); new 'haha'.split(((yield @foo)), window)) {throw undefined;{} }");
tryItOut("with({}) yield new (function () { yield  /x/  } )()\n;");
tryItOut("if((new __iterator__())) var __parent__ = @foo; else  if (<><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")) export *; else {}");
tryItOut("L:if('fafafa'.replace(/a/g, 'haha'.split)) {export *; }");
tryItOut("with( '' )var prototype = -0, __count__ = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in prop) const x::prototype, __count__\n/*infloop*/do function(q) { return q; } while((new <y><z/></y>('haha'.split(false, this), <><x><y/></x></>)));");
tryItOut("M:if() ");
tryItOut("with({constructor: (this.zzz.zzz)}){throw *\f; }");
tryItOut("/*for..in*/M:for(__count__ in (window).call(undefined, <x><y/></x>, false)) ;");
tryItOut("/*infloop*/L:for(let __count__; {} && __noSuchMethod__; ((null ? window : <x><y/></x>)())) throw <x/>;");
tryItOut("if(new __count__() .@  '' .propertyIsEnumerable(\"constructor\")) export __count__;");
tryItOut("/*infloop*/for(<x/>;  '' ; ({prop getter: function(y) { yield y; return window;; yield y; }, prototype: @foo })) var constructor, prop = *;");
tryItOut("do return; while(((function (__parent__, prop) { yield; } )()) && 0);");
tryItOut(" \"\" ; const constructor;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <y><z/></y>) yield; }");
tryItOut("while((export * < (__parent__ = window)) && 0){if(__count__ = true) { if (+ /x/ ) } else continue ; }");
tryItOut("const __proto__ = *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in this) {yield this; }");
tryItOut("if(<y><z/></y>) {L:with({__proto__: (((__proto__.function::prototype)).call((yield true) ? __parent__.__defineGetter__(\"set\", Math.pow) : [15,16,17,18].sort((0.1).call, this), ))})return this; }");
tryItOut("L:do {return; } while((prototype) && 0); const __count__;");
tryItOut("L: {throw <x><y/></x>; }");
tryItOut("if(__count__.__noSuchMethod__ = null) {var __proto__, __iterator__ = <><x><y/></x></>;do {throw <x><y/></x>;\fexport __parent__; } while((undefined) && 0); } else  if ((yield <x><y/></x>++)) const __iterator__; else {gc() }");
tryItOut("yield  /x/ ;\nexport *\n\n");
tryItOut("with({constructor: (let (constructor =  /x/g , __parent__ = prototype) <><x><y/></x></>)[<x/>]}){/*for..in*/for(__count__ in -1) {(prototype);let __noSuchMethod__ = __proto__, __count__; }export *; }");
tryItOut("for(let y in []);");
tryItOut("do {{{} } }\t while((this) && 0);");
tryItOut("M:while((__parent__ = <x/>) && 0){__proto__ = @foo;return; }");
tryItOut("/*infloop*/for(let __iterator__; (1.2e3]); null.__lookupSetter__(\"constructor\")) return;");
tryItOut("{gc()gc() }");
tryItOut("yield;yield;");
tryItOut("/*for..in*/L:for([__parent__, __parent__] = eval(\"{}\", (#2=__noSuchMethod__ = constructor)) in <><zzz>(new Date())</zzz></>) while(([window if (#1#)].throw((__noSuchMethod__ = <><x><y/></x></>))) && 0){;gc() }");
tryItOut("if(__count__ = __iterator__) { if ((null)[*::*]) {yield  \"\" ; } else M:if(__noSuchMethod__ = <x/>) { if (yield __proto__) {yield <x><y/></x>; } else {__noSuchMethod__; }}}");
tryItOut("M:if(__count__ ? this :  /x/ \t) { if ((yield <x><y/></x>)) __iterator__, __noSuchMethod__ = @foo; else let __iterator__, __count__;}");
tryItOut("/*for..in*/for(const prototype in ((({}).hasOwnProperty)(0))){export *;(<x><y/></x>);\t } const __parent__;");
tryItOut("/*infloop*/for((undefined if (<y><z/></y>)); (prop.prop = *::*); 'fafafa'.replace(/a/g, ((1 for (x in []))).apply)) {return; }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: __noSuchMethod__ }) = new  /x/g (window); (__noSuchMethod__ ? constructor | window ? (false + <><x><y/></x></>) : this : (++<x><y/></x> /= <><x><y/></x></>)); undefined &  /x/g ) ;");
tryItOut("with({each: ([__count__])}){/*infloop*/L:for(({undefined: arguments, __proto__: <y><z/></y> }); 'fafafa'.\nreplace(/a/g, ({}).hasOwnProperty); if(this) { if (window) {let __proto__ =  /x/g ; }} else {throw 3/0;yield; }) export __parent__; }");
tryItOut("/*for..in*/for(var [__parent__, prop] = <x/> in constructor.(((<x if (__iterator__))) ^ [11,12,13,14].some)) {gc()continue L; const __noSuchMethod__; }");
tryItOut("L: {if(@foo) { if (this) {yield window;return; }} else {return;(undefined); } }");
tryItOut("if(<y><z/></y>.__parent__ = 0.1) {return; } else  if (this.__defineSetter__(\"prototype\", function(q) { return q; })) {let prop = this, __proto__ = *; }");
tryItOut("try { let(__count__ = ({}), __parent__) { export __count__; } catch(prototype if (function(){throw StopIteration;})()) { this.zzz.zzz; } catch(constructor if false.throw(<><x><y/></x></>)) {  } ");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((false.__defineGetter__(\"__count__\",  \"\"  < \tundefined) |= __proto__.__parent__).__defineSetter__)((--prototype = (function () { var prototype, __noSuchMethod__ = \t<><x><y/></x></>; } ).call(new Function([, __parent__.__proto__, , ]), __count__.( /x/ )))))){}");
tryItOut("/*for..in*/for(const prop in ((([1,2,3,4].slice).call(1e+81 << <y><z/></y>, ))((this) & <y><z/></y>.__lookupSetter__(\"__proto__\")))){M:if((0)[this\n]) {{(this); }const __proto__, __parent__; } }");
tryItOut("L:switch((uneval(<y><z/></y>))) { default: break; case <><x><y/></x></> >>= __noSuchMethod__.propertyIsEnumerable(\n\"constructor\"): case (Math.pow)(): break;  }");
tryItOut("/*infloop*/do export *; while({} %= (-1));");
tryItOut("yield ({__parent__:  /x/  , <x><y/></x>.__count__ });");
tryItOut("if((p={}, (p.z = prototype)())) { if (__parent__) {yield;yield \t<><x><y/></x></>; }} else if(__iterator__) {export prototype; } else prototype, prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <><x><y/></x></>) gc()");
tryItOut("L:if((undefined.constructor)) { if (<><x><y/></x></> ^ 3) ; else {continue ; }}");
tryItOut("/*for..in*/for(var constructor in @foo) gc()");
tryItOut("L:switch(window.__lookupGetter__(\"prototype\")) { case  /x/g //h\n.__proto__: /*infloop*/for((<x/> / 1.3); (-0) /= prop = __proto__.eval(((5.0000000000000000000000 for each (__count__ in  \"\" ))));  \"\" ) {continue M; }if((*::*.throw(<x><y/></x>).prototype) / <><{let}><bbb xmlns=\"[1]\"><!--yy--></bbb>yyy</{let}></>\t) { if ((({__count__: -0 })) <= 'fafafa'.replace(/a/g, (eval()))) if(3/0) { if (0) {}} else ({}).hasOwnProperty} else export *;break;  }");
tryItOut("if(window.throw(null)) /*for..in*/M:for(var __parent__ in (<y><z/></y>)[null]) {while((<><x><y/></x></>) && 0){throw null; } }");
tryItOut("with({}) { /*infloop*/for(1.2e3; __count__; true) return; } ");
tryItOut("L:if(({__proto__ setter: function (prototype) { ( /x/g ); } , __parent__: <x/>.__lookupGetter__(\"prop\") }))  const function::__proto__; else  if ((__iterator__ = (this.__defineGetter__(\"__noSuchMethod__\", gc)))) {; }");
tryItOut("let (__noSuchMethod__ = constructor =  '' ) { <x><y/></x>; }");
tryItOut("/*for..in*/for(var prop in (( '' )(({ set 1e+81 __iterator__ (__parent__, constructor) { return <><x><y/></x></> >>> null.__defineSetter__(\"__proto__\", Math.sin) } ,  set prop(__parent__)<x><y/></x> }))))/*infloop*/L:for(let constructor; (function(q) { return q; }).call(<x/>.yoyo(__proto__), )[(constructor for each (prop in (-0)))]; ({prop: -0}) !== (<x><y/></x> += ({a1:1}))) {const __parent__, __iterator__;return constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop(<><x><y/></x></>) in (__iterator__ = <><x><y/></x></>)) break ;");
tryItOut("/*infloop*/M:do (*); while(({prototype: [11,12,13,14].filter, prototype:  }));");
tryItOut("/*infloop*/L:for((*::*.constructor = <x/>); window.unwatch(\"__parent__\"); [<y><z/></y>].sort(window)) {}");
tryItOut("if(let (prototype = <><x><y/></x></>, prop) <x><\fy/></x>) { if (eval(\"false\", function () { return (<><x><y/></x></>.__noSuchMethod__ = 3) } ())) {let([]) { this.zzz.zzz; }} else ([, , ] =  \"\" )");
tryItOut("/*infloop*/L:do {{let prop;/*for..in*/for(prop = ({__iterator__: __parent__}) in ({a2:z2})) {yield *; } } } while((prop = function (({ __iterator__: __noSuchMethod__, __count__: prototype })) { yield (<x><y/></x>.throw(@foo)) } ()));");
tryItOut("L:do {(<x/>); } while(((__noSuchMethod__)) && 0);");
tryItOut("/*infloop*/L:do function (prototype, __count__) { prototype; }  while([15,16,17,18].some(Math.pow, 5.0000000000000000000000));");
tryItOut("/*for..in*/L:for(new (function (__count__, constructor) { return __parent__; } )( '' , *::*)['__iterator__'] in ((({}).hasOwnProperty)((@foo.__lookupGetter__(\"__iterator__\"))))){export __noSuchMethod__; }");
tryItOut("/*infloop*/L:while(<y><z/></y> %= <x/>){export *;export __noSuchMethod__; }if(<><x><y/></x></>) __iterator__");
tryItOut("if((<xxx {__noSuchMethod__}={window} /> === __proto__(.2)\n)) { if (this.zzz.zzz) return; else {const __parent__ = <><x><y/></x></>;return __parent__.watch(\"prop\", gc); }}");
tryItOut("");
tryItOut("/*for..in*/for(const [<x/>, constructor] = ((-#1=[#1#]))((__noSuchMethod__.null setter= (<><x><y/></x></>).__defineSetter__), constructor) in (prop) = <x><y/></x>.propertyIsEnumerable(\"prop\")[let (prototype) <x/>]) {/*infloop*/for(__iterator__ = this.__defineGetter__(\"__noSuchMethod__\", eval); #0=({__noSuchMethod__: 0.1}) = #1=[#1#]; (function (prototype)<y><z/></y>).apply()) {continue ; } }");
tryItOut("/*for..in*/for(const __parent__ in ((new Function)((__noSuchMethod__.yoyo(#1#)))))yield [1];");
tryItOut("while((* /= ([[1]] .@*:: null)) && 0)return;");
tryItOut("switch(*::*.(<x><y/></x>)) { case throw StopIteration;: if(<x><y/></x>) {export *;(<y><z/></y>); } else  if (<><x><y/></x></>) {{} } else {undefined;({}).__lookupGetter__ }break;  }");
tryItOut("M:if([-0 ? <x><y/></x> :  /x/ ].map(__noSuchMethod__) .@*:: 'fafafa'.replace(/a/g, Math.pow)) {; } else  if ([11,12,13,14].map) if(__parent__ ? -3/0 :  \"\" )  else {let (__proto__ =  /x/g ) { export *; } }");
tryItOut("let(constructor = __count__) { yield <x><y/></x>;");
tryItOut("{; }\t");
tryItOut("/*infloop*/M:while(__noSuchMethod__[new (this)(*, <><x><y/></x></>)]){if(prototype.prop ? eval(\"__proto__\", eval(\"@foo\",  /x/g )) : (__noSuchMethod__.__iterator__ setter= Function)) { if (('haha'.split)() + __parent__ = false) export *;} else {} }");
tryItOut("for(let y in []);");
