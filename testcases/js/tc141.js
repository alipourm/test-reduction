tryItOut("if(<> </>) [1,2,3,4].map else  if (<bbb xmlns=\"<y><z/></y>\">yyy</bbb>.(prop)) {/*for..in*/for(var prop = [,,] in *::*)  \"\" ; }");
tryItOut("with({constructor: <><x><y/></x></> in  /x/g }){continue L;/*infloop*/for(var __proto__; [z1,,];  /x/g ) {{}Math.sin } }");
tryItOut("if(function ([y]) { }) { if (this\f) {yield;yield prototype; } else [1]}");
tryItOut("/*infloop*/for(<x><y/></x>.__lookupSetter__(\"constructor\"); [,,z1]; __count__) {let __parent__ = <x/>, __noSuchMethod__\n }");
tryItOut("return <><x><y/></x></>;");
tryItOut("/*for..in*/for([prop, __proto__] =  \"\" .unwatch(\"__noSuchMethod__\") >> #1=[#1#] ? *::* :  /x/  in ({prop: var prototype = this; })) {L:if(<><x><y/></x></>) {(-1);yield  '' ; } else  if (<x><y/></x>) {const prop = <y><z/></y>;const __proto__; }with((yield __parent__ = <><x><y/></x></>)){let constructor, __count__ = 0/0; } }");
tryItOut("L: {if(false) const __proto__, __proto__ = [[]]; else  if ([1]) undefined; else {@foo;{} }/*for..in*/for(var [__iterator__, constructor] = <y><z/></y> in window) {break M; } }");
tryItOut("export *;gc()");
tryItOut("{}while((({a2:z2})) && 0)function () { yield <y><z/></y> } \nthrow false");
tryItOut("/*infloop*/for([, __parent__, prototype] = <><x><y/></x></>[ '' ]; (__count__); ([null if (true)])) {; }");
tryItOut(";");
tryItOut("let (__proto__, ({ __count__: ({ __parent__: [] }), __noSuchMethod__: prototype })) { /*infloop*/M:do {export __proto__;\nyield;\n((constructor)).apply; } while(({prop: *\r })); }");
tryItOut("M:if(__count__ = *) { if (<y><z/></y>) {M:do {export __proto__;; } while((.2) && 0); } else export prototype;}");
tryItOut("/*infloop*/while(((function ([y]) { })().__lookupGetter__(\"prop\")))export prototype;");
tryItOut("/*infloop*/while(prototype = 0/0){__parent__, __proto__;\ngc()\nif(this.zzz.zzz\t) {{ } } else {} }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("while((<x><y/></x>.watch(\"function::constructor\", [1])) && 0){(*::*); }");
tryItOut("if(-3/0.unwatch(\"__noSuchMethod__\")) {gc() } else  if (\n@foo) {yield;yield; }");
tryItOut("/*infloop*/do function  __parent__ (__proto__) { yield <x/> }  while(<>\t<x><y/></x></>);");
tryItOut("with(Iterator())yield  /x/g ;");
tryItOut("if( \"\" ) export prototype;");
tryItOut("throw this;");
tryItOut("if((this.__defineSetter__(\"__proto__\", /a/gi))) {return false in __iterator__;{} } else  if (__count__ = *::*\n) L:if((([11,12,13,14].map >>= <><x><y/></x></> if (this)))) {L:if(*) {yield 5.0000000000000000000000; } else  if (<><x><y/></x><//*\n*/>) return __noSuchMethod__; else {gc() } } else {}");
tryItOut("export *;");
tryItOut("L:if((yield (__noSuchMethod__.(__parent__+=function ([y]) { })))) {export __proto__; } else  if (({__noSuchMethod__: -3/0[@foo]})) do {} while((__proto__) && 0); else L:switch((* %= <x/>)) { default: break;  }");
tryItOut("with({}) { try { (0x99); } catch(constructor if ({__count__ setter: gc })) { __count__ = undefined; }  } ");
tryItOut("/*infloop*/for\r(var __iterator__; ([11,12,13,14].some); __count__ = (this.__defineSetter__(\"prop\", Function))) return ({}).hasOwnProperty;");
tryItOut("/*infloop*/for(true; 1.2e3; ({a1:1})) {export __iterator__;break M; }");
tryItOut("if(__noSuchMethod__) { if (prop) {( \"\" ); } else gc()}");
tryItOut("/*infloop*/for(var function::prototype; ; let (prop, prototype = @foo) [15,16,17,18].filter((false).watch, prototype = <x/>++)) /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in prototype) break M;");
tryItOut("/*for..in*/M:for(var [__count__, ({ prop: (__count__), __count__: (@foo)((-0)) })] = prototype in <y><z/></y> &= __proto__) switch(__proto__) { default: (({a2:z2})).watchbreak; yield; }");
tryItOut("if(([window if (<x><y/></x>)])) {(function ([y]) { });/*infloop*/do (<x><y/></x>); while((p={}, (p.z = __iterator__)()).eval(new (*)(__proto__, @foo))); }");
tryItOut("\tlet (__proto__ = (#0=[(uneval(<y><z/></y>))]), __proto__ = this.__defineSetter__(\"__count__\", Math.sin)) { #3={a:#3#}; }");
tryItOut("/*for..in*/M:for(prop = __count__ = true in constructor) {({}).hasOwnProperty }");
tryItOut("/*for..in*/for(var [__parent__, <x/>] = #2=3/0 in (<><x><y/></x></>())) {if(#0=({__proto__:  /x/g ( /x/ )})) { if ( /x/ .valueOf(\"number\")) {const __count__ = <y><z/></y>, ; }} else export *;if(this) <x/> }");
tryItOut("{throw this; }");
tryItOut("/*infloop*/do {throw <><x><y/></x></>;export *; } while(<><bbb xmlns=\"<x><y/></x>\"> </bbb></> .. ( /x/g .\funwatch(\"prop\")));");
tryItOut("try { yield; } catch(constructor) { <><x><y/></x></>; } ");
tryItOut("return;");
tryItOut("while(((window.*).unwatch(\"__iterator__\").__parent__ = ([] - __parent__)) && 0)break\f L;");
tryItOut("throw __iterator__;");
tryItOut("{continue M;gc() }");
tryItOut("M\t:if(__proto__ = window) { if ((+undefined)) {{} }} else var prop = __count__;");
tryItOut("while((new Function(((function\f ()function(id) { return id }).call).call([1,,], *, (function ([y]) { })())).prop) && 0)/*for..in*/for(const __proto__ in [window if (__proto__)]) /*for..in*/for(let __noSuchMethod__ in <y><z/></y>) {}\n");
tryItOut("with((( /x/g  || true) if (<><><x><y/></x></></>))){if(1e+81)  }");
tryItOut("returnreturn;L: throw 033;");
tryItOut("if(<x><y/></x>.valueOf(\"number\")) gc() else  if (<x><y/></x> ^ new (Math.sin)(false, true)) gc()");
tryItOut("with({}) __count__ = __proto__;");
tryItOut("/*infloop*/for(new <x><y/></x>(true ..  \"\" , <><x><y/></x></>); new ([1,2,3,4].slice)(<><x><y/></x></>); (Math.sin)(undefined,  /x/ )) {(<><x><y/></x></>); }");
tryItOut("return __parent__.eval(undefined);");
tryItOut("<x><y/></x>\nthrow <y><z/></y>;");
tryItOut("with({}) for(let y in []);");
tryItOut("/*for..in*/for(__parent__ = (@foo || __noSuchMethod__) in *::*++((this.__defineGetter__(\"__proto__\", function  __proto__ (__noSuchMethod__) { var __parent__, __noSuchMethod__; } )), <x/>)) {export *; }");
tryItOut("if([@foo]) { if (constructor = __count__) /*infloop*/L:for(var __proto__; if( '' ) {throw undefined; } else  if (<><x><y/></x>\f</>) return; ( /x/ .yoyo(this)\t++)) {{} } const __proto__; else {with({__count__: (new (__count__)())})(1 for (x in [])) }}");
tryItOut("/*for..in*/for(const constructor.constructor in ((function (function::__parent__, __noSuchMethod__)default: Functionbreak; continue M;break; )([,,])))do gc() while((*::*) && 0);");
tryItOut("/*for..in*/for(let __count__ in 1e-81 & (-1)) {if([prototype = <y><z/></y>]) yield; else gc()with([1.2e3.throw(.2)].map(Math.pow)){return null; } }");
tryItOut("with({prototype: (Math.pow( '' ))}){yyy }");
tryItOut("do yield  '' ; while((({ get: __parent__ }) = (__count__ = false)) && 0);");
tryItOut("");
tryItOut("while(([11,12,13,14].filter) && 0){ }");
tryItOut("(@foo).apply");
tryItOut("if(undefined) {export *; } else  if (window) {{} }");
tryItOut("let(__proto__.__noSuchMethod__ = ( '' .propertyIsEnumerable(\"constructor\"))) ((function(){with({}) { throw StopIteration; = __parent__; } })());");
tryItOut("__proto__ = arguments, prop = 3; const __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("let (__parent__ = <x><y/></x> | undefined) { /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in arguments) {return <x><y/></x>;\f } }");
tryItOut("throw __count__;");
tryItOut("L: var break ;, __count__ = this;");
tryItOut("/*for..in*/L:for(__count__ in ((new Function)(let (prototype = <x><y/></x>, getter = <><x><y/></x></>) -3/0)))let case 6: continue M;break; default: break; ;");
tryItOut("/*infloop*/do {/*infloop*/L:do if(*::*) {return; } else  if (__count__) {<x><y/></x>; } while(<><x><y/></\rx></> ? window : *);break ; } while(new Math.sin(<><x><y/></x></>.__defineGetter__(\"prototype\",  /x/ )));");
tryItOut("L:if([<x><y/></x>].filter(false)) { if (-3/0) {return <x><y/></x>; }} else {var __proto__; }");
tryItOut("(<><x><y/></x></\n>);return <><x><y/></x></>;");
tryItOut("continue M\nwith({}) { throw StopIteration; } ");
tryItOut("/*infloop*/for(__noSuchMethod__ = 1e4; <x/>.__lookupGetter__(\"__count__\"); (<y><z/></y>.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__))) /*infloop*/M:for(x::__count__%=5.0000000000000000000000; (this.zzz.zzz); <><x><y/></x></> ? false : [z1]) export *;");
tryItOut("/*infloop*/L:do yield; while((uneval(this)))\nwhile((*) && 0)");
tryItOut("(<x><y/></x>\n)\nfunction () { return; } ");
tryItOut("/*for..in*/for(var [constructor, prototype] = #0=({__parent__: *}).@foo in __iterator__) {let (__iterator__ = *::*) { continue ; } }");
tryItOut("yield;");
tryItOut("if(eval(\"constructor, prototype = true;\", new (function  prop (__proto__) { return; } )())) { if (<bbb xmlns:ccc=\" /x/ \"><ccc:eee></ccc:eee></bbb>) continue ; else {([z1]);; }}");
tryItOut("{/*infloop*/for(this !== window; <y><z/></y>.__defineSetter__(\"prop\", function  constructor (get, __parent__) { yield prototype } ); ((uneval( \"\" )))) ; }");
tryItOut("/*infloop*/do {/*infloop*/for(<x/>; Iterator(__noSuchMethod__ ^= <><x><y/></x></>, <y><z/></y>); (prop.(<y><z/></y>))) /*for..in*/for(const [constructor, prototype] = 1e4 in <x/>) yield <x><y/></x>;new Function } while(@foo);");
tryItOut("/*infloop*/while(({ prop: constructor, __noSuchMethod__: prototype }) = (<y><z/></y>.@*)){var __parent__; }");
tryItOut("switch(<><>null</><\f/>) { default: /*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in  /x/ ) (1.2e3);case 5: break; __count__;break; case 5: break; case ( '' .unwatch(\"constructor\")):  }");
tryItOut("while(((.*)) && 0){export __noSuchMethod__;if((prop = this)) {yield;var __noSuchMethod__, prop = [[]]; } else  if ([11,12,13,14].sort) {yield 1e+81; } }");
tryItOut("/*infloop*/do {throw 3;; } while(prop = @foo);");
tryItOut("M:if(__count__ = function(id) { return id }) { if (<x><y/></x> != <y><z/></y>.yoyo((<><x><y/></x></>.prop = <x><y/></x>))) do export *; while((true) && 0); else throw #1#;}");
tryItOut("for(let y in []);");
tryItOut("if((([15,16,17,18].filter(Math.pow, __count__.@*)) %= prototype.__proto__ = <x/> .@*:: <x><y/></x>)) { if ((1.2e3)(#3={a:#3#}, 0.1)) return (<y><z/></y> < prop); else continue ;}");
tryItOut("with({__count__: (( /* Comment */(prototype =  \"\" ).yoyo(constructor.valueOf(\"number\"))) -= ([({ constructor: __noSuchMethod__ }) = yyy.watch(\"__count__\", ({}).hasOwnProperty) if (window)]))}){function  __proto__ (constructor, __iterator__) { return true }  }");
tryItOut("/*for..in*//*\n*/for(__noSuchMethod__ in <x/>.constructor) __count__");
tryItOut("/*for..in*/for(var [x::prototype, prop] =  /x/g  += <><x><y/\t></x></>.unwatch(\"prototype\") in new yield <x><y/></x>(yield (<x><y/></x>.hasOwnProperty(\"let\")))) if(prototype) return let constructor = <y><z/></y>, constructor = prototype;; else {function (constructor)@foothrow <x/>; }");
tryItOut("return __iterator__.__parent__;");
tryItOut(" catch ");
tryItOut("/*infloop*/for(.2; <x/>; 0) export constructor\n");
tryItOut("return <x><y/></x>;\ncase 9: ;break; break; case 1e4: return;break; break; yield;break; case 1: \n const __noSuchMethod__;");
tryItOut("/*infloop*/M:for(<x/>.unwatch(\"__parent__\"); this.__defineSetter__(\"__iterator__\", /a/gi); __proto__.( /x/ )) {/*infloop*/while(<><x><y/></x></>)return this; }");
tryItOut("/*for..in*/for(constructor in ((this.__defineSetter__(\"__proto__\", ({}).__lookupGetter__))(new ({})((#1=this))\f)));");
tryItOut("yield (\t[11,12,13,14].map)\n/*infloop*/while((uneval((function ([y]) { })()))){yield;let __count__ = true; }");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("/*for..in*/for(var [constructor\f, prototype] = (/a/gi)() in (((undefined)[<y><z/></y>]) for (__iterator__ in true))) /*infloop*/for((! /x/ ); ({a2:z2}); new [1,2,3,4].map(<><x><y/></x></>, )++) yield;");
tryItOut("if(<x><y/></x>[<><x><y/></x></>]) { if (Function()) {yield;; }} else function  __parent__ (__proto__, __iterator__)\t { yield {} } ");
tryItOut("L: let __parent__, constructor = window;");
tryItOut("this.zzz.zzz; const prototype;");
tryItOut("let (__count__ = (<><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")), __iterator__) { return; }\nconst prop = @foo;\n");
tryItOut("/*infloop*/do /*for..in*/M:for(const __noSuchMethod__ = <x><y/></x>.(__noSuchMethod__) ? (prototype = *) : ((uneval(undefined))) for each (__parent__ in  '' ) for (__parent__ in <><x><y/></x></>) for each (prototype in __proto__) in this.eval(<x><y/></x>)) /*infloop*/L:for(false; 3.141592653589793; <x/>) {var prototype = *::*;true; } while([11,12,13,14].sort);");
tryItOut("try { let(__count__) { let(__parent__ =  \"\" , __parent__ = __count__) { let __proto__ = false; } finally { throw StopIteration; } ");
tryItOut("return 033;");
tryItOut("/*infloop*/for(const __iterator__; 4..__defineSetter__(\"prop\", function(y) { yield y; (new Function).apply; yield y; }); <><x><y/></x></>) export __iterator__;");
tryItOut("/*for..in*/for(var __parent__ in (((({}).hasOwnProperty).apply)((window &&  '' ))))const __parent__ = <x><y/></x>;");
tryItOut("export \nprop\n");
tryItOut("{return; }");
tryItOut("{L:if(this.__defineSetter__(\"__noSuchMethod__\", prototype)) <x><y/></x> }");
tryItOut("M:if(this.__defineSetter__(\"__parent__\", )) {return; } else  if (<bbb xmlns:ccc=\"1e81 ? *::* :  /x/g .watch(\"constructor\", ({}).hasOwnProperty)\"><ccc:eee></ccc:eee></bbb>.((-1))++) { }");
tryItOut("L:while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(new Error()).isPrototypeOf(typeof [<y><z/></y>])) && 0) for each (x::constructor in false)");
tryItOut("/*for..in*/for(var {} in (((([<x><y/></x>].filter( '' ))).__defineSetter__)((new [15,16,17,18].sort(({}).hasOwnProperty,  '' )(<y><z/></y>.__iterator__ = window, <x/>))))){const constructor, __noSuchMethod__; }");
tryItOut("with(__count__.valueOf(\"number\")) { export *; const prop; } ");
tryItOut("if(eval(\"__noSuchMethod__( /x/ )\", (<x/> <<= 5.0000000000000000000000))) {yield;M:if(<x><y/></x>) {function  __iterator__ () { return this } (<x><y/></x>); } else ({a1:1}); }");
tryItOut("if((prop.__proto__ = function ([y]) { })) { if (1.3.unwatch(\"prototype\")) {return <x><y/></x>;; } else continue L;}");
tryItOut("if((__noSuchMethod__.prop).*) { if \f(<y><z/></y>) return;}\t else {gc() }");
tryItOut("do __parent__; while((each = new function  __proto__ (__parent__, __count__/*\n*/) { return @foo } (this)) && 0);");
tryItOut("for(let y in []);");
tryItOut("if(__count__ = <x/> .@x:: eval(\"/*infloop*/do  set __noSuchMethod__ prop (__iterator__, __iterator__) { yield <x><y/></x> }  while(<><x><y/></x></>);\",  \"\" )) return; else  if ((window)()) {return\nyield; }");
tryItOut("throw StopIteration;");
tryItOut("export *");
tryItOut("prop = [[1]], __count__ = 0;");
tryItOut("L: if(-1) (new Function(\";\")) else  if (undefined) {({a1:1}); } else { }");
tryItOut("M:if(<><x><y/></x></> .@ true) { if (__parent__ = this) export *; else {var prototype;{} }}");
tryItOut("return ([window]);");
tryItOut("if(({__noSuchMethod__ getter: (*::*).__defineSetter__ })) {gc() } else  if ((eval(\"{<><x><y/></x></> }\", true))) /*for..in*/for(let __proto__ in ((<y><z/></y>)([,,]))){var constructor = 0;; } else {throw <x><y/></x>;L:if(#1=[#1#]) { if (true)  else export __iterator__;}\n }");
tryItOut("throw StopIteration");
tryItOut("let constructor\n");
tryItOut("if((#2=__iterator__) ? (__proto__ =  /x/g ) : (<x><y/></x>.isPrototypeOf(null))) {if(undefined) { if (*::*) {export *;(window); } else return;}yield; } else gc");
tryItOut("{(<><x><y/></x></>); }");
tryItOut("if(-1 >>= [15,16,17,18].some((gc).apply, (({a2:z2}).throw(0.1)))) {*;export *; } else {/*infloop*/M:for(var prop = <x/>[this]; (* == <y><z/></y>); prop.( /x/ )) var __parent__;if([1]) { if ( /* Comment */<x/>) {{} }} else {return; } }");
tryItOut("constructor = __parent__;");
tryItOut("/*for..in*/for(var prototype({}) in \n /x/g ) ;\t");
tryItOut("L:if(()) {return <><x><y/></x></>;export __proto__; } else  if (constructor = prop) {{} }");
tryItOut("let(constructor, __parent__ = ( /x/  * <y><z/></y>)) ((function(){export x::__noSuchMethod__;})());");
tryItOut("if(((prop) = (yield ((true).call())))) if(window) export __proto__; else  if (function(id) { return id } instanceof  \"\" ) {const __proto__, __noSuchMethod__ = [[]]; } else  if ('fafafa'.replace(/a/g, Math.pow)) return; else yield try { let(constructor) { __parent__ } catch(__noSuchMethod__ if this in window) { throw StopIteration; } catch(__iterator__) { throw StopIteration; } finally { with({}) export constructor; } ;");
tryItOut("if(({ constructor: prop, __iterator__: ({ prop: prop }) })) { if ((yield @foo)) {if((prototype)[__count__].eval(eval(\"__count__\", 1e+81))) { if ((false.__defineSetter__(\"prototype\", (prop).__defineSetter__))) ([,,z1]);/*\n*/} else gc()export *; } else {1e81; }}");
tryItOut("/*infloop*/M:while(({__iterator__//h\n: this.zzz.zzz ? (prop = <x><y/></x>) : (-1) > true, __iterator__: __proto__ = prototype }))/*infloop*/M:for(let __iterator__ = <x/> ? <><x><y/></x></> : <><x><y/></x></>; ([ '' ].map(null)); (+true)) {return;let __parent__ = undefined; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(((gc).call).constructor in (new RegExp((<x><y/></x>)))) L:while((<x><y/*\n*//></x>) && 0);");
tryItOut("let(__parent__ = ((new Function).call(0/0, []))) { for(let y in [5,6,7,8]) with({}) return;");
tryItOut("/*for..in*/for(const prop.__proto__ in ((033)(prop.prop = <x><y/></x>.yoyo(<><x><y/></x></>))))switch(<x/>) { case <x><y/></x>:  }");
tryItOut("with({__parent__: (__iterator__ >= <y><z/></y> <<= this.__defineGetter__(\"prototype\", gc))})/*for..in*/for(const [__iterator__, prop] = (( /x/g ).__defineSetter__).call(__iterator__, constructor, <><x><y/></x></>) in false) /*infloop*/M:for(window; [,]; 033) { /x/ ; }");
tryItOut("prototype = __parent__;");
tryItOut("/*infloop*/while(new *(<><x><y/></x></>, this))yield  \"\" ;");
tryItOut("let (__parent__ = 033) { break M; }");
tryItOut("return\n");
tryItOut("with([15,16,17,18].filter(<x/>, ())){/*infloop*/for(let __count__; (uneval(<y><z/></y>)); (<x/> < [,,z1]).watch(\"constructor\", (/a/gi).call\f)) /a/gi }");
tryItOut("switch(new (().prop)()) { case #0=__iterator__.__iterator__: if(((uneval(prop.isPrototypeOf(@foo))).valueOf(\"number\")))  { export __proto__; }  else {with({prop: this.__defineGetter__(\"__count__\", (1e4).__defineSetter__)}){return <x><y/></x>;yield ({a1:1}); } }break; break;  }");
tryItOut("__count__, prop = function::__noSuchMethod__\nlet (({ __iterator__: [] }) = (eval(\" /x/g \", <x><y/></x>))) { if(({constructor: <y><z/></y>, prototype:  \"\"  })) /*for..in*/L:for(const __proto__ in (([1,2,3,4].slice)(*::*))); else  if (* | <x/>) export *; else {evalthrow window; } }");
tryItOut("yield *;\n");
tryItOut("L:if(__count__.__lookupGetter__(\"__count__\")) ( /x/g  == <><x><y/></x></>); else  if (#0=({__count__:  /x/ }).hasOwnProperty(\"__iterator__\")) {;return } else {export *;switch(prototype) { default: break; case constructor = <><x><y/></x></>: yield;break; case ('haha'.split).call([1], try { break ; } catch(<x><y/></x> if (function(){export prop;})()) { gc() } catch(__iterator__ if prototype, prop) { ; } catch(__iterator__) { yield <x><y/></x>; } ): let constructor = <x><y/></x>;break;  } }");
tryItOut("with(((<x/> += this) if (undefined)));");
tryItOut("/*infloop*/while(this.__defineSetter__(\"__noSuchMethod__\", 1.3)){({}).hasOwnPropertyprototype = <x/>, prototype; }");
tryItOut("if( /x/  .@ false ? Object(\n(this.__defineGetter__(\"constructor\", [1,2,3,4].map)))[(__noSuchMethod__.watch(\"__iterator__\", eval))] : new <><x><y/></x></>) {if(prop = [15,16,17,18].map([1,2,3,4].map, ( '' ))) {L:if(__count__) {} else {function(q) { return q; } } } else {; }if(@foo(__iterator__)(__count__ = 1.3, prop).*) var __count__ = <><x><y/></x><//*\n*/>, constructor; else {export *;((-0)); } } else  if ((__iterator__ = ({ __proto__: // }))) /*for..in*/L:for(const __proto__.prop in ((((__proto__ = 1e4)).watch)(#2=({__proto__: __parent__ =  /x/ .hasOwnProperty(\"__proto__\")})))){continue M; } else /*infloop*/L:do {/*infloop*/for(let constructor; prop; *) {{} }; } while([11,12,13,14].map);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__.__noSuchMethod__ getter= [1,2,3,4].map in  /x/g .*) yield;\nyield 1e81;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (new Error((<><x><y/></x></>)[ \"\" ]))((~<x><y/></x>.__noSuchMethod__)) in (//h\n /* Comment */this.zzz.zzz)) {yield; }");
tryItOut("try { let(({ let: [] }), []) { with({}) (1 for (x in [])) } catch(prototype) { yield yield (__parent__.__proto__ setter= function(y) { yield y; {\f}; yield y; }); } finally { try { with({}) { return; }  } catch(let if ((__proto__.let setter= function  constructor (prototype) { return @foo } )[(function  __count__ (function::__parent__, __parent__) {  } ).call(-3/0, 0.1,  \"\" )])) { return prototype; } catch(prop) { export constructor; } finally {  }  } ");
tryItOut("/*infloop*/L:do L: {yield  \"\" ; } while((]));");
tryItOut("(Function), __count__-=this.__defineSetter__(\"({constructor getter: function(q) { return q; } })\", (gc).call)");
tryItOut("\n");
tryItOut("if([]) { if (@foo) \r{/*for..in*/for(prototype = null in false) {export *; } }} else {gc()( /x/g ); }");
tryItOut("if(new Iterator(<><x><y/></x></>, <x/>)) {[,,];true; const __noSuchMethod__; } else  if (((__count__ = .2) ? __noSuchMethod__\n : (prototype.(undefined)))) {export prop;if(*::*) {export prop;var constructor =  '' ; } else  if (window) yield; else {return; } }");
tryItOut("__count__");
tryItOut("/*infloop*/while(-3/0 = -0 .@x::  \"\" ){export *; }");
tryItOut("switch((__proto__.__lookupGetter__(\"__proto__\"))) { default: ;break; if(constructor) { if (constructor) {{} }} else {; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in let (prop\f) true.unwatch(\"__noSuchMethod__\")) while((<><x><y/></x></>.__iterator__ =  \"\" ) && 0){x::constructor, __noSuchMethod__ = <x/>; }/*infloop*/do break ; while((({a2:z2}) = this));");
tryItOut("L:if((new (5.0000000000000000000000)())) M:while((<x><y/></x>) && 0){with({__iterator__: 4.})throw <y><z/></y>; }");
tryItOut("/*for..in*/for(let [__count__, prop] = __noSuchMethod__ = true.propertyIsEnumerable(\"__iterator__\") in (<><x><y/></x></>.isPrototypeOf(<y><z/></y>)).__lookupSetter__(\"prototype\")) {let constructor = __proto__;export __proto__; }");
tryItOut("L: {yield <><x><y/></x></>;gc() }");
tryItOut("/*infloop*/for(const ({ prop: ({ __parent__: __parent__, __proto__: __noSuchMethod__ }) }) = new ([[]].hasOwnProperty(\"constructor\"))(<x><y/\f></x> >>= <x/>); (\ffalse.@foo)-- , (__count__%=yield <y><z/></y>); () && null /  /x/g \f) /*for..in*/L:for([constructor, __proto__] = window in  \"\"  =  /x/ ) {yield 5.0000000000000000000000 }");
tryItOut("if(<> </>) { if ([constructor.throw(*)]) {/*infloop*/L:while(#0=[<x/>]){return; } }} else M:if((yield  '' )) { if ((Function).call((<><x><y/></x></>)(<y><z/></y>), @foo)) (<><x><y/></x></>); else window}");
tryItOut("M:switch(__proto__ getter: 'haha'.split) { case 7: /*infloop*/do {continue M; } while((( /x/g  && 0.1).*));break; let(prototype = this) { let(__iterator__ = <><x><y/></x></>) { (0);break; case 8: break;  }");
tryItOut("with(<x><y/></x> ? __noSuchMethod__ :  /x/ ){M:if(<><x><y/></x></>) {__parent__true; } else ; }");
tryItOut("M:while((prototype) && 0)/*for..in*/M:for(const constructor in *::*) {(<x><y/></x>);var constructor = function(id) { return id }; }");
tryItOut("/*infloop*/while(<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", ((({ __noSuchMethod__: ({ prototype: __count__ }), setter: constructor })).__lookupSetter__(\"set\")).__defineSetter__))<x><y/></x> = eval(\"return;\", this.zzz.zzz), __iterator__;");
tryItOut("{{L:while((<x><y/></x>) && 0);const __count__ = <><x><y/><///h\nx></>; }/*infloop*/M:do (window); while((this.__defineSetter__(\"prop\", Math.sin))); }");
tryItOut("{{throw __iterator__; } }");
tryItOut("throw StopIteration;");
tryItOut(" if (undefined);\nexport prop;\n");
tryItOut("L:if(<{__iterator__}><!--yy--></{__iterator__}>) {this.zzz.zzz; } else {let (x::__noSuchMethod__) { try { yield +<><x><y/></x>/*\n*/</>; } finally { let(__noSuchMethod__, constructor = -1) ((function(){for(let y in []);})()); }  } }");
tryItOut("/*for..in*/for(let true['__count__'] in ((new Function)(prototype.unwatch(\"__proto__\")))){return <><x><y/></x></>;; }");
tryItOut("if(({ get function  constructor () { \freturn 1.2e3 } () constructor () { gc() } , prototype: .2 })) yield 1e4; else  if ([]) let prototype; else {1e-81; }");
tryItOut("{let __count__ = undefined, __parent__ = *;yield window\nexport *;; }");
tryItOut("/*infloop*/while([prototype.false setter= [1,2,3,4].map for each (__parent__ in (constructor.__noSuchMethod__).__noSuchMethod__) for each (__count__ in ([false].some(function(y) { yield y; gc(); yield y; }))) for ((+window)(<><x><y/></x></> /= true) in 4.) for (prototype in <><x><y/></x></>) for (constructor in <><x><y/></x></>)])return\n");
tryItOut("/*infloop*/for(var constructor: __noSuchMethod__.getter getter= true; (__count__(this.zzz.zzz) = __noSuchMethod__ <<= *::* * window); ([({ prototype: __parent__ }) = (false.throw(*::*))])) (new Function(\";\"))\nexport prop;\n");
tryItOut("/*infloop*/for(let __iterator__; <><bbb xmlns:ccc=\"#1=[#1#]\"><ccc:eee></ccc:eee></bbb></>; constructor) {{;let __count__; } }");
tryItOut("while(((#0=[<y><z/></y>])) && 0)");
tryItOut("export *\n");
tryItOut("if(prototype()) export *; else {[] = windowL:if(<y><z/></y>) -0 else  if (this) {export __noSuchMethod__;break ; } else (__iterator__) }");
tryItOut("{window }");
tryItOut("/*infloop*/for(__iterator__; (prop = <x/> ? false : <><x><y/></x>\r</>.throw([z1,,])); window += <x><y/></x> < <><x><y/></x></>) export *;");
tryItOut("export *;throw ;");
tryItOut("M:with(window){yield <x/>;(true); }");
tryItOut("/*infloop*/for(const __noSuchMethod__; <bbb xmlns:ccc=\"yield \t__parent__\"><ccc:eee></ccc:eee></bbb>.((<><x><y/></x></> for (__parent__ in this))); new this([[]], <x><y/></x>)(false.__lookupGetter__(\"__noSuchMethod__\"), <x><y/></x>) @ [[, , ({ constructor: constructor })], ({ __noSuchMethod__: prop, __iterator__: ({ constructor: prop, constructor: __proto__ }) }), prototype] = window) {var __iterator__ = <><x><y/></x></>;__proto__ = prototype, __count__; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*infloop*/for(var ({ __count__: __iterator__: (<x/>.eval(<x><y/></x>))(new RegExp()) }) = (true.unwatch(\"prototype\")); eval(\"({a1:1})\", null).prop.yoyo(([1e4])) ^= 1e+81 != <x><y/></x>.( /x/ ); __count__.prototype) {return\nL:if((__parent__.{export __proto__;let __iterator__ = this, __iterator__; })) {<x><y/></x>; } else  if ((<><x><y/></x></> && <x><y/></x>)) {[1,2,3,4].map } }");
