tryItOut("with({__iterator__: [z1] >>>=window})gc()");
tryItOut("if(<x><y/></x>.prototype == constructor) /*for..in*/for([__parent__, prop] = <><x><y/></x></> in <x/>) return; else {; }");
tryItOut("/*infloop*/do {/*infloop*/for(var prototype; __proto__ = window; -- /x/g ) {M:if(window) {const __iterator__;(*); } else  if (__iterator__) gc() } } while((prop = (({ set constructor __noSuchMethod__ () { const prop, __iterator__ =  '' ; } , __proto__: this })) .. constructor++( '' .unwatch(\"constructor\"))));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in []) let __noSuchMethod__ = __iterator__\nlet(({ __noSuchMethod__: ({ __noSuchMethod__: __count__, __proto__: __iterator__ }), (<x/>): ({ prototype: prototype }) })) ((function(){throw StopIteration;})());");
tryItOut("/*for..in*/M:for(var constructor in null) {yield; }");
tryItOut("/*infloop*/for(((*)(0x99.__lookupSetter__(\"prop\").watch(\"prop\", <x><y/></x>), eval(\"/*for..in*//* nogeckoex bug 349964 */<!--yy-->\", @foo))); ([((({\tconstructor: 3.141592653589793 })) >= __parent__ = null)]); yield new (yield 4.)()) {/*for..in*/M:for(__count__ in (( /x/g )(<x/>)))return prototype;if(null) { if ( '' ) <x><\ny/></x>;} else function (__noSuchMethod__, __proto__) { return 0/0 }  }");
tryItOut("if(<x><\fy/></x>) gc() else prototype");
tryItOut("/*for..in*/L:for(const __count__ = undefined in __count__.prop getter= (eval).apply) if(<y><z/></y>) {(true);var __parent__, __parent__; } else  if ( \"\" ) break M;;");
tryItOut("{gc(){} }");
tryItOut("if(let (__count__) (function ([y]) { })() .. (__noSuchMethod__)) ;");
tryItOut("M:if() ; else  if (<><x><y/></x></>) {return *::* }");
tryItOut("with({__iterator__: (-0).propertyIsEnumerable(\"constructor\")})const  = undefined;");
tryItOut("let constructor;");
tryItOut("/*infloop*/for(__proto__; (p={}, (p.z = <><x><y/></x></>.hasOwnProperty(\"prototype\"))()); this.__defineSetter__(\"__noSuchMethod__\", ([z1])[*])) {if(*::*) { if (true) {export *; } else [1,2,3,4].map}{{}var get, constructor = <x><y/></x>; } }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__proto__ = <x/>.eval(window) in <y><z/></y>) {break L; }");
tryItOut("/*infloop*/for(constructor = [z1]; [1,,] .@*:: <y><z/></y>; __proto__) {(<><x><y/></x></>); }");
tryItOut("switch(this(this, <x/>)) { default: export constructor;break; L:switch( /* Comment */yield @foo) { default: export *;break; case 3: let __count__, __parent__ = <x/>;case 9: break;  }case 8: Math.pow }");
tryItOut("with({__iterator__: 3}'){gc() }");
tryItOut("function::__iterator__ = prototype;");
tryItOut("let (prototype) { const __iterator__ = <><x><y/></x></>; }");
tryItOut("L: {var __noSuchMethod__ = *::*, __count__;yield; }");
tryItOut("/*for..in*/L:for(var prototype in ((eval)([1,,]))){let (__count__, yield) { __count__ = <x/>, constructor; }/*infloop*/for(window; __parent__; )  }");
tryItOut("yield (-0);");
tryItOut("__iterator__");
tryItOut("{if((function(q) { return q; }())) {return;'haha'.split } else  if (( { return <y><z/></y> } )) /*infloop*/M:for(let constructor; <><x><y/></x></>; <><x><y/></x></>) __noSuchMethod__ = <><x><y/></x></>, prototype = (function ([y]) { })(); else {L: {return;continue L; } } }");
tryItOut("/*for..in*/for(prop = [] in <><x>\t<y/></x></>) {} const constructor;");
tryItOut("{if([,,]) yield;yield  /x/ ; }");
tryItOut("/*infloop*/L:while((uneval(({a2:z2}))))gc()");
tryItOut("M:if((constructor) = constructor = *) <x/>; else var __proto__;");
tryItOut("/*infloop*/for(<x><y/></x> = this.eval(@foo); <y><z/></y>; new (({}).hasOwnProperty)(<x><y/></x\t>, *)) {prop = <y><z/></y>;yield; }");
tryItOut("/*infloop*/M:for(let __parent__; (let (__proto__) [15,16,17,18].filter(gc, {})); (#3={a:#3#}.throw(__proto__) - this) === __proto__.__noSuchMethod__) {const __iterator__ = false; }");
tryItOut("return <x/>.yoyo(1e-81);");
tryItOut("with({}) let([({ __count__: [[], __noSuchMethod__] })] = let (constructor, ({ __iterator__: __noSuchMethod__ })) __parent__-=true in break , __proto__) { /*infloop*/L:while(<x\t><y/></x>.(<y><z/></y>));");
tryItOut("{export __proto__;yield [[1]]; }");
tryItOut("L:if(true) {( /x/g );yield *::*; } else  if ((function ([y]) { })()) {var __count__ = <y><z/></y>;return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const __parent__ in (<y><z/></y> - this)) {gc() const prototype;; }");
tryItOut("/*infloop*/while( /* Comment */(<x><y/></x> >>= prototype))export *;");
tryItOut("let (x::prop, __parent__) { export __proto__; }");
tryItOut("yield eval(\"<x/>\", false) || ([[1]]);");
tryItOut("'haha'.split");
tryItOut("if(((<><x><y/></x></> > <><x><y/></x></> if (__count__.__count__ = window)))()) {function (__count__, prototype\f) { return null } (@foo); } else  if (this.__defineSetter__(\"constructor\", (<x><y/></x>).watch) ? [__proto__ =  /x/ ].some(((1 for (x in []))).call) : <><x><y/></x></> || undefined ? (({} if (this))) :  /* Comment */*) {M:switch([this]) { default:  } } else gc()");
tryItOut("/*for..in*/for(__proto__.__parent__ in ((function  function::prop (prop) { yield this } )(__noSuchMethod__.(-1)))){let __parent__; }");
tryItOut("L: {break ;yield __noSuchMethod__; } const __proto__;\nbreak \n\n");
tryItOut("if((({function::prototype: false}))) L:while((__proto__) && 0){; } else 3");
tryItOut("export *;");
tryItOut("(this.__defineSetter__(\"constructor\", /a/gi))((p={}, (p.z = this)())) = __noSuchMethod__;");
tryItOut("/*for..in*/M:for(const *::*['(*::*)(this)'] in @foo) {if(<x/>) gc() else {export constructor;yield; }return <x><y/></x>; }");
tryItOut("M:switch((c)) { case 'fafafa'.replace(/a/g, 'haha'.split): do {} const __noSuchMethod__; while((default: case 4: yield;case @foo(({prototype: <><x><y/></x></>, function::__count__: <y><z/></y> })): /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in *) {let var __proto__;; }case (__noSuchMethod__.* setter= function () { return <x><y/></x> } ): ;break; ) && 0);break; default: break; for(let y in []);break; case [new ([1,2,3,4].slice)() for each (constructor in <x><y/></x>) for (__count__ in <x/>)].propertyIsEnumerable(\"__parent__\"): break; this.zzz.zzz;let (prop = <y><z/></y>) { continue L; } }");
tryItOut("{}");
tryItOut("if((({ __count__: false.__count__ }) = [,,z1].*.valueOf(\"number\"))) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in ([#1#].map(function () { export __iterator__; } ).__lookupSetter__(\"function::__iterator__\"))) {break M; } }\f");
tryItOut("{yield;\r }");
tryItOut("L:if(<x><y/></x> @  /x/g ) {;yield <><x><y/></x></>; }");
tryItOut("{yield; /x/g ; }");
tryItOut("/*infloop*/for( \"\" ; [<><x><y/></x></>]; this.yoyo(window)) L: {yield; }");
tryItOut("L: {if(this) gc() else  if (<x/>) ; }");
tryItOut("export constructor;/*infloop*/while(this instanceof  /x/g )throw Z; const __count__;");
tryItOut("let (constructor, constructor) { export * }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L://h\n for  each(function::let in <x><y/></x>) with({prop: true})const __iterator__;");
tryItOut("export *;([,]);");
tryItOut("gc()");
tryItOut("switch((yield (function(q) { return q; })(<x><y/></x>).hasOwnProperty(\"__parent__\"))) { default: break; case 5: false;export __proto__;case 9: [1,2,3,4].mapcase (eval(\";\", ).*): M:if(({ __noSuchMethod__: <x><y/></x>, prototype: __iterator__ }) = this.__defineGetter__(\"__iterator__\", Math.sin)) /*infloop*/M:for(__count__; (0x99.unwatch(\"prototype\")); default: export *;break;  .@  /x/ ) break L; else  if (('fafafa'.replace(/a/g, (new Function(\"__proto__;\"))))) /*for..in*/for(let [__noSuchMethod__, __count__] = (function ([y]) { })() in <><x><y/></x></>) {var __noSuchMethod__ = 1e4;(prop); } else {gc()yield; }break; case <><bbb xmlns:ccc=\"W\"><ccc:eee></ccc:eee></bbb></>: break; case (yield *::*): case 2: break; function  __count__ () { yield undefined } case 1: break; export __noSuchMethod__;break; switch( \"\" ) { default:  }case  /x/g .@foo: case ( ''  |= -1):  }");
tryItOut("M:if(this.isPrototypeOf(this)) { if (__count__ = <><x><y/></x></>) {prototype;yield; }} else {break ;{} }");
tryItOut("{return;\tif(new ((<x><y/></x>).apply)((__noSuchMethod__ = *::*.__parent__), (this.hasOwnProperty(\"__proto__\")))) {export *;gc() } else return __noSuchMethod__; }");
tryItOut("L:while((new ('fafafa'.replace(/a/g, <><x><y/></x></>))()) && 0){yield [,]; }");
tryItOut("for(let y in [5,6,7,8]) return 3.141592653589793;");
tryItOut("/*infloop*/do (__noSuchMethod__); while((<x><y/></x>.(<><x><y/></x></>)).valueOf(\"number\"))");
tryItOut("/*infloop*/for(function ([y]) { }; this; *) export *;");
tryItOut("/*infloop*/L:for(<><><ccc:ddd>yyy</ccc:ddd></></>.__defineGetter__(\"__count__\", (<x><y/></x>.(window)).__defineSetter__) ? <x/> : false; (yield <x><y/></x>); function(y) { yield y; constructor; yield y; }()) {L:if((-0)) (__noSuchMethod__); }");
tryItOut("if(__count__ * this) @foo else  if ((__proto__ = *::*).*) {let prop;gc() }");
tryItOut("/*infloop*/while(undefined){{}throw <y><z/></y>; }");
tryItOut("{if([({__noSuchMethod__ getter: eval })]) {Math.sin } else  if ((yield getter)) ( \"\" ); }");
tryItOut("{}");
tryItOut(" \"\"  = __parent__;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = (\f[@foo for (constructor in <x><y/></x>)]) in <y><z/></y>) {(@foo); }");
tryItOut("while(((p={}, (p.z = this.__defineGetter__(\"prop\", Math.sin))())) && 0)yield;");
tryItOut("M:if(let (prototype = false) <x/>.watch(\"__iterator__\", new Function)) <bbb xmlns:ccc=\" \"\" \"><ccc:eee></ccc:eee></bbb> else  if ((true.__parent__ =  '' ) instanceof <x><y/></x> & {}.watch(\"constructor\", [1,2,3,4].map)) {[1,2,3,4].slice/*infloop*/for(__proto__;  /x/ ++; #2=({__noSuchMethod__: false})) constructor } else {while((({a2:z2})) && 0)if(<y><z/></y>) export *; else  if (constructor) {export *;(prototype); } else {yield; }gc }");
tryItOut("return  ");
tryItOut("if((({}).hasOwnProperty())) { if ((1.3 >>>=function ([y]) { }.eval(prop.constructor getter=  /x/g )).prop) {yield; }\r else {{; }yield; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <y><z/></y> ? [,,z1] : __proto__) {5.0000000000000000000000; }");
tryItOut("/*infloop*/for(this.__defineGetter__(\"__iterator__\", [1,2,3,4].slice); (this.__defineSetter__(\"__iterator__\", Math.pow)); 5.0000000000000000000000) ");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("let (({ __count__: __iterator__ })) { M:if(<y><z/></y>) {\t; } else  if (false) return <><x><y/></x></>; }");
tryItOut("/*infloop*/for(prototype; this; this) {yield @foo;export *; }");
tryItOut("{throw (-1) }");
tryItOut("with({}) __count__ = __noSuchMethod__.prototype;");
tryItOut("export constructor\nwindow;");
tryItOut("let ([constructor, , prop], __noSuchMethod__ =  \"\" .__iterator__ =  /x/ .propertyIsEnumerable(\"prototype\")) { /*infloop*/for((window.__lookupSetter__(\"__iterator__\")); [,,z1].__lookupSetter__(\"prop\"); 'haha'.split) yield [[1]]; }");
tryItOut("const [, prototype, constructor] = let (__parent__ =  /x/ ) 0x99, __count__;");
tryItOut("/*infloop*/do {*::*; } while(false ? <x/> : .2);");
tryItOut("/*for..in*/L:for(var <><x><y/></x></> in ((function  yield (prototype, export function::__count__;) { yield  /x/  } )({}.watch(\"__proto__\", (<x><y/></x>).__defineSetter__)))){{}constructor, __noSuchMethod__; }");
tryItOut("export *;\ncontinue L;\r\n const prop;");
tryItOut("M:if(-3/0) /a/gi else  if (<y><z/></y>) ; else {return __noSuchMethod__;yield  /x/ ; }");
tryItOut("/*infloop*/L:for(({ __parent__: __noSuchMethod__, __noSuchMethod__: __iterator__ }) = <x/>.valueOf(\"number\"); 3.141592653589793; *--) {}");
tryItOut("return (((__iterator__ .. __proto__)\n) >> ({a1:1}) &=  /x/g .isPrototypeOf(this.__defineSetter__(\"prototype\", <x><y/></x>)));");
tryItOut("{/*infloop*/for(__iterator__; (/a/gi)(); 033 <<= window) {*::* } }");
tryItOut("let(prototype, __proto__) ((function(){let(prop = <><x><y/></x></>, __parent__) { ;})());export constructor;");
tryItOut("if([1].propertyIsEnumerable(\"prototype\")) { if ([<x><y/></x>]) {export *;; } else {{}prototype = this; }}");
tryItOut("with(__parent__){prototype, __noSuchMethod__;const constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in this) yield *::*;");
tryItOut("L:switch((prop) = <><x><y/></\fx></>) { default: gc(){}break; case 8: (<x><y/></x>);\nreturn -0;\nreturn <><x><y/></x></>; }");
tryItOut("L:if(__proto__) __parent__, __proto__; else  if (window) {} else {let prop = <x/>;new Function }");
tryItOut("__parent__ = <y><z/></y>;/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in [1,,]) {export *;yield; }");
tryItOut("{L: {@foo;throw *; } }");
tryItOut("({ prop: this.__count__, __count__: ({ constructor: ({ __noSuchMethod__: ({ __count__: __count__, __proto__: prototype }), __proto__: ({ __iterator__: prop }) }) }) }) = prop;");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/for(constructor; new (function ([y]) { })()([1,,]); eval(\"constructor;\", <>\t<x><y/></x></>)) {export *;return 1e81; }");
tryItOut("/*infloop*/for(@foo.watch(\"constructor\", function(id) { return id }); -([((__iterator__ = <x><y/></x>))[__noSuchMethod__ = __proto__]]);  /* Comment */(__proto__ =  /x/ .valueOf(\"number\"))) { } const prop;");
tryItOut("({})");
tryItOut("/*for..in*/L:for(__iterator__ in ((eval(\"if(<x><y/></x>) { if (\\f<x><y/></x>) export *; else }\",  '' ))(({__parent__: \n(eval(\"let __parent__ = @foo;\", *::*)), __count__: __proto__.set|=prototype = <><x><y/></x></> })))){let get = this; }{}");
tryItOut("/*infloop*/for((function  __count__ (__iterator__, prop) /x/g ); this.__defineSetter__(\"__count__\",  /x/g ); (++this)) {}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __parent__: __parent__ }) in (<y><z/></y> for each (__noSuchMethod__ in this))) __parent__");
tryItOut("while(( ''  ? 0 : <><x><y/></x></>) && 0){prop = window, __noSuchMethod__ = __parent__;/*infloop*/while(void true) \"\" ; }");
tryItOut("let (__count__ = null, prototype) { /*infloop*/L:while(__iterator__.isPrototypeOf(1e81))/*for..in*/for([__parent__, constructor] = yield <x><y/></x> in *::*) function (__parent__) { {} }  }");
tryItOut("L: (new Error(<x/>));");
tryItOut("if(( /x/g  > <x/>(prototype = undefined, -3/0))) let __count__;");
tryItOut("return;");
tryItOut("");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(each = ([, __iterator__, __count__, , __proto__] = __iterator__) in window) let (export <y><z/></y>, true;) {  }");
tryItOut("/*for..in*/for([constructor, (({__parent__ getter: ((<><x><y/></x></>).__defineSetter__).call }))(this.__parent__)] = ( /* Comment */-3/0 > __parent__) in __noSuchMethod__) {prototype = __proto__, __noSuchMethod__;let (constructor = <><x><y/></x></>) { return; } }");
tryItOut("L: {return;continue ; }");
tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("const __iterator__;");
tryItOut("while((<x/>[<x><y/></x>]) && 0)while(((eval(\"1e4--\", [,].__defineGetter__(\"__iterator__\", <><x><y/></x></>)))) && 0)switch(@foo) { default: break ;case 7: yield  /x/ ;case __proto__: break; case 1e4: undefined;return true;break; \n }");
tryItOut("throw (p={}, (p.z = -3/0)());\nbreak M;\n");
tryItOut("<y><z/></y>");
tryItOut("M:if(1e+81) throw @foo;throw <x/>;");
tryItOut("if(({__proto__: 'fafafa'.replace(/a/g, ({}).__lookupGetter__)})) { if (<x><y/></x>.(0.1)) {yield; } else {}}");
tryItOut("L:if(<xxx>{prop}</xxx>) { if (1e4) {if((Math.pow())) {return *::*; }L:with({__iterator__: __iterator__ = (1e81 - <><x><y/></x></>)}){let __proto__ = <y><z/></y>; } }} else {{continue ;return; }let prop = try { yield undefined; } -, function::constructor = getter; }");
tryItOut("/*for..in*/for([prop, __proto__] = ({a1:1}) in (<y><z/></y>)()) {let __count__ = prototype;window; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in prop.(this)) {return; }");
tryItOut("L: export constructor;");
tryItOut("if([11,12,13,14].filter) { if (((({}).hasOwnProperty).call([z1], )).__defineSetter__(\"__count__\", function(q) { return q; })) break ;} else while(((( \"\" ).call(<y><z/></y>, ))) && 0){throw <><x><y/></x></>;; }");
tryItOut("throw false;");
tryItOut("if(({ constructor: \fprototype }) = ((*)[*::*])[<x/>]) { if (({__noSuchMethod__: 0.1 }) != yield <></>++) {throw *::* ?  ''  : <x/>;/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in @foo)  /x/g ; }} else {yield;let __parent__; }");
tryItOut("if([ /x/g ]) {L: {const __noSuchMethod__, __noSuchMethod__ = __count__; }prototype = #2=[this] ^ (new [[]](window)) } else {;throw prototype; }");
tryItOut("const __parent__;/*for..in*//* nogeckoex bug 349964 */ for  each\f(const __iterator__ in  /x/g ) export *;");
tryItOut("with( \"\" .__lookupGetter__(\"prop\"))M:switch((this.__defineGetter__(\"__parent__\", ({}).__lookupGetter__))) { case 6: 'haha'.split const prop;case ++* & (__iterator__ = this): yield; }");
tryItOut("L: __parent__ = prop;");
tryItOut("/*for..in*/for(let __iterator__ = <x><y/></x> in <><x><y/></x></>) {gc()const constructor; }\n");
tryItOut("__parent__; const __noSuchMethod__.__count__;");
tryItOut("while(((<><x><y/></x></>)( '' , null).valueOf(\"number\")) && 0){let (prop = gc()) { export constructor; } }");
tryItOut("L:if(((3 -= this) .@ __noSuchMethod__)) { if (<><x><y/></x></>.valueOf(\"number\")) {/*infloop*/for(const __proto__; *::*; ({})) {*::*;yield; } } else {}}");
tryItOut("with({__parent__: (<x/> ? *::* : 0/0)}){__proto__ = <x><y/></x>, __noSuchMethod__;const __count__, __proto__ = <x/>; }");
tryItOut("gc()");
tryItOut("{return; }");
tryItOut("/*for..in*/for(var __iterator__ = (* -=  /x/g ).unwatch(\"prop\") in __parent__.__count__) {return (({ constructor: __parent__ }) = [].hasOwnProperty(\"__count__\"));L: {let (yield) { export prop; } } }");
tryItOut("/*infloop*/for(let constructor = 1e+81; = prop; <><bbb xmlns=\"({ prototype: true }) = prop.__iterator__ getter= (1 for (x in []))\"><ccc:ddd></ccc:ddd></bbb></>; ({}).@*) {return \ftry { var function::__iterator__; } catch(prototype if (function(){export *;})()) { break L; } finally\f {  } ;let (__iterator__) { gc() } }");
tryItOut("/*infloop*/for(prototype = true; (__iterator__ = <y><z/></y>); new __noSuchMethod__()) export *;");
tryItOut("yield (-3/0).call({}, );");
tryItOut("L: L: return;");
tryItOut("/*for..in*/for([__iterator__, constructor] = 1e-81.eval(false) in *) ");
tryItOut("undefinedreturn  /x/ ;");
tryItOut(";");
tryItOut("export *;");
tryItOut("export __parent__;");
tryItOut("with({__parent__: typeof ((-0).__defineSetter__(\"__noSuchMethod__\", [z1,,])).__defineGetter__(\"prototype\", gc) < yield delete  '' })/*infloop*/for(let __parent__; [15,16,17,18].some(function (prototype, __proto__) { yield <><x><y/></x></> } , (<><x><y/></x></>.isPrototypeOf(<x><y/></x>))); +[15,16,17,18].sort([1,2,3,4].map, ([<x><y/></x> if ( /x/g )]))) /*infloop*/for(<y><z/></y> >>= window;  '' ; null.__iterator__) {constructor, __proto__; }");
tryItOut("try { yield *::*.propertyIsEnumerable(\"__iterator__\"); } 'catch(constructor) { export __count__; } finally { prototype = get; } ");
tryItOut("this.zzz.zzz;");
tryItOut("if(new <><x><y/></x></>(({a1:1}))) {gc() } else  if (prop.__parent__) export __iterator__;");
tryItOut("with(+constructor =  /x/ ){({}).__lookupGetter__yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for([__count__, __noSuchMethod__] = this.__defineSetter__(\"prototype\", (new Function(\"\"))) in [1,,]) gc()");
tryItOut("/*infloop*/for(const constructor; function::prop; __iterator__ *= *\r) /*for..in*/for(let [__count__, __proto__] = 3/0 in  '' ) yield;");
tryItOut("do {do {break ; } while(((yield 1.2e3)) && 0); } while((@foo.__defineGetter__(\"__parent__\", ({}).__lookupGetter__) != (Array(prototype)).isPrototypeOf(*::*.constructor-=<><x><y/></x></>.__proto__)) && 0);");
tryItOut("throw StopIteration;");
tryItOut("gc()\n");
tryItOut("/*for..in*/for(const prop = (Iterator()) in <><x><y/></x></>) {return this; }");
tryItOut("if( /x/g ) {yield; } else  if ((new (<><x><y/></x></>)())) {*::*\n; }");
tryItOut("/*infloop*/for(let prototype/*; *; *::*) (this);");
tryItOut("export */*\n*/");
tryItOut("if(5.0000000000000000000000 >= __iterator__) {; } else {{} }");
tryItOut("if((<x><y/></x> ? <x><y/></x> != <x/> :  /* Comment */undefined)) for(let y in [5,6,7,8]) return; else  if (#2=({constructor: this.__defineSetter__(\"__parent__\", function(q) { return q; }) < ()})) {}");
tryItOut("return;");
tryItOut("return *");
tryItOut("/*infloop*/for(var __proto__; yield @foo; <x/>.@*) break L;while((-1) && 0){break ;yield; }");
tryItOut("<x><y/></x>;\n{var function::__parent__ = <x><y\n/></x>, constructor;; }\n");
tryItOut("return\nL:do {while((true) && 0){export function::__proto__;let __iterator__ = <x><y/></x>; }prop = ({}); } while((this) && 0);");
tryItOut("while((__parent__.(prototype)) && 0){gc() }");
tryItOut("L:if(<x><\fy/></x>.(<x><y/></x>)) { if ((uneval(false < 5.0000000000000000000000 >>= (__count__.yoyo([z1]\t))))) throw 0x99; else gc()}");
tryItOut("do [1,2,3,4].slice while((prototype) && 0);");
tryItOut("/*for..in*/for(let __iterator__ in ((({}).__lookupGetter__)(__parent__))){yield <><x><y/></x></>; }");
tryItOut("while((((({}).__lookupGetter__)())) && 0)return;");
tryItOut("{(({}).__lookupGetter__).applylet __count__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/M:for(true.__defineGetter__(\"__count__\", function  __parent__ ()1.3); eval((__parent__.__noSuchMethod__ = ((uneval((-0))))), <x><y/></x>); (this.__defineGetter__(\"__count__\", ({}).hasOwnProperty)) %= [[1]].throw([z1])) /*for..in*/for(get in (this)(<><\tx><y/></x></>.__defineGetter__(\"__noSuchMethod__\", (-1)))))");
tryItOut("throw __noSuchMethod__;");
tryItOut("\n");
tryItOut("L:if(new <><\tx><y/></x prop >(/</>.@foo.unwatch(\"__iterator__\")) break M; else  if (__count__.__parent__ getter= new ( /x/g )()) export prototype;");
tryItOut("/*infloop*/while(window.isPrototypeOf(<x><y/></x>) *= ({__noSuchMethod__ getter: eval }))constructor;");
tryItOut("{}");
tryItOut(";");
tryItOut("(window .. null)if(({prop: <><x><y/></x></>})) let __noSuchMethod__; else {const prototype;const constructor = ([1,,]);; }");
tryItOut("/*for..in*/for(var prototype = <><x><y/></x></> in false) {{}{} }");
tryItOut("L:do yield  /x/ ; while((({prototype: prop})) && 0);");
tryItOut("yield <y><z/></y>;");
tryItOut("L:switch((({({ __iterator__: prototype }): function(id) { return id }, __noSuchMethod__ getter: [1,2,3,4].map }))) { case 8: case 4: yield __iterator__;break; (<><x><y/><\t/x></>);default: if(@foo) {gc()__proto__ = ({}); } else  if (<><x><y/></x></>) {let prop =  /x/g ; } else const __noSuchMethod__, prototype;break;  }");
tryItOut("/*infloop*/for(<y><z/></y>; prop( /* Comment */<x><y/></x>) = ((eval(\"function(id) { return id }\", [1,,]))[prop]) *= (__count__ =  /x/ .throw((__iterator__ =  /x/g ))); \nprototype getter: Math.sin /= this.watch(\"prop\", function (__count__) { return  ''  } )) {yield\nthrow  '' ; }");
tryItOut("prop = __count__;");
tryItOut("L:if(this) {return <x><y/></x>; } else if(new (function  __parent__ (__iterator__) { yield <y><z/></y> /= @foo } )(\nprototype.__noSuchMethod__)) { if ([15,16,17,18].sort(<x><y/></x>, <><x><y/></x></>.__proto__ =  \"\" )) {yield;const function::__proto__ = *, __noSuchMethod__; }} else {return;export __proto__; }");
