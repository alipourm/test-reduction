tryItOut("true.prop = __noSuchMethod__\nbreak M;");
tryItOut("prototype, __parent__;");
tryItOut("/*infloop*/M:for(prop; <zzz><x><y/></x></zzz>; (<y><z/></y>)[<x><y/></x>].throw(([15,16,17,18].map(( \"\" ).watch, 1.2e3)))) {(<x><y/></x>);yield 3.141592653589793; }");
tryItOut("yield;(<y><z/></y>);");
tryItOut("/*for..in*/L:for(var __proto__ = (yield <bbb xmlns:ccc=\"window.valueOf(\"number\").constructor = (<x><y/></x> ^=  \"\" )\"><ccc:eee></ccc:eee></bbb>) in this) {M:switch((__noSuchMethod__.prop getter= Math.sin)) { default: export prototype\ncase ((function(y) { yield y; throw 1e+81;; yield y; })()): break;  }{break ;yield  /x/g ; } }");
tryItOut("{throw -1; }");
tryItOut("try { new Function } catch(__proto__ if (function(){1e81;})()) { throw <y><z/></y>; } catch(__proto__ if (function(){;})()) { ; } catch(prototype if (function(){return;})()) { export *; } catch(prop) { let constructor, default: continue M;break; {}break;  = undefined; } finally {  } ");
tryItOut("M:switch(Iterator(__iterator__ = __iterator__)) { case yield @foo: break; var __parent__ = *, __iterator__ = window;break; case *:  }");
tryItOut("__noSuchMethod__");
tryItOut("let (__proto__ = (this)(Array(__proto__))) { B }");
tryItOut("while(({} - ({ __parent__: constructor }) = ~this) && 0)if(<x><y/></x> >> <x><y/></x>) {__proto__;(*::*); } else  if ([[__count__ = [,,z1] if (5.0000000000000000000000)].sort(((1 for (x in []))).call)]\r.filter(function  __proto__ ([], __proto__) { yield 4..__proto__ } )) ;");
tryItOut("if(({prototype: 3.__defineGetter__(\"__proto__\", ({}).__lookupGetter__)})) {M:with({__parent__: <y><z/></y>})this; } else  if ((<><x><y/></x></>)(true) = (({ __count__:  }) = this ^ *)) {throw __parent__ setter: new Function; }");
tryItOut("/*for..in*/for(let ({ __noSuchMethod__: [constructor, , , __noSuchMethod__, ], prop: prop }) in (('haha'.split)(((({}).__lookupGetter__)(@foo).valueOf(\"number\")))))/*infloop*/for([__noSuchMethod__, x::let] =  /x/  -= <x/>; ( \"\" .@foo); <y><z/></y>.__parent__.unwatch(\"__proto__\")) {break L;return; }");
tryItOut("L: if(([z1,,] &  /x/ )) { if (((1 for (x in []))).call(true, window)) <x/>;} else {gc() }");
tryItOut("/*for..in*/L:for(let __parent__ = true in (<x><y/></x>.(true))) /*for..in*/for(const __proto__ = undefined in (this.isPrototypeOf([1] ? #3={a:#3#} : function ([y]) { }))) let(true) { return;");
tryItOut("/*infloop*/for(var __noSuchMethod__; new (__noSuchMethod__ = Error(<x><y/></x>))(+[__noSuchMethod__], (constructor)); null) yield @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in false) {var __iterator__;; }");
tryItOut("do {do {var constructor;let prototype = [z1,,], __noSuchMethod__; } while((__count__.(__count__)) && 0); } while((*::* *= yield;) && 0);");
tryItOut("gc()\n");
tryItOut("if(Number()) { if (new (prop)(*::*)) let __parent__;} else ;");
tryItOut("/*infloop*/M:for(__noSuchMethod__; new Object( /x/ , <><x><y/></x></>); function ([y]) { } ? <><x><y/></x></> : undefined) eval");
tryItOut("do  while((@foo , <y><z/></y>) && 0);");
tryItOut("/*for..in*/for(let \n /x/ ['__noSuchMethod__'] in true) {/*\n*/export *;let prop, x::__iterator__ = this; }");
tryItOut("/*for..in*/L:for(const __parent__ in this) {return; }");
tryItOut("while((<x/>) && 0)");
tryItOut("/*for..in*/for(const [constructor, prototype] = (__iterator__.(eval(\"(function ([y]) { })()\", <x><y/></x>).__count__ = ([prop] for (<x><y/></x>['__count__'] in <x/>)))) in <x/>.unwatch(\"<><x><y/></x></>\").__proto__) {L:if([@foo].map(function(y) { yield y; export let;; yield y; })) ( /x/g ); else  if ([,,].__iterator__) (@foo); }");
tryItOut("/*infloop*/L:while(('haha'.split).apply){( /x/ \r).watchwith(__count__.@*){{} } }");
tryItOut("L:with((let (({ __parent__: ({ __count__: __proto__, __noSuchMethod__: prop }) }) = [] = [<x><y/></x> for (prop in <><x><y/></x></>)]) <x><y/></x>.__defineGetter__(\"prop\", <><x><y/></x></>)))export __iterator__;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = @foo in  /x/g ) {export *;throw <><x><y/></x></>; }");
tryItOut("switch((this.isPrototypeOf(<x><y/></x>))(null.__proto__ = *::*)%=(.2.propertyIsEnumerable(\"function::__iterator__\"))) { default: if([<x/>].some(*)) { if (<><{new Object(@foo)}><!--yy--></{new Object(@foo)}></>) while((<><x><y/></x></>) && 0){throw #3={a:#3#}; }} else {gc()( /x/ ); }break; break;  }");
tryItOut("L: {null;{} }");
tryItOut("throw false");
tryItOut("/*infloop*/for((yield #2=[5.0000000000000000000000]).__lookupSetter__(\"prototype\"); yield = prototype; [,].throw(((([1,,] ? <><x><y/></x></> : <><x><y/></x></>))(0--, <y><z/></y>)))) return ((<><x><y/></x></>)(<x/>, <x><y/></x>));");
tryItOut("let(setter = new Function(<x><y/></x>[[[]]], <x><y/></x>).prop .@x:: (uneval(this)).isPrototypeOf(<><x><y/></x></>[<x><y/></x>])) ((function(){yield <x><y/></x>; const __noSuchMethod__;})());");
tryItOut("if((prototype = <y><z/></y>.eval(@foo))) let (__parent__ = <><x><y/></x></>, __proto__) { return; } else  if ((this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map).constructor)) {if(\r<y><z/></y>) {evalexport __noSuchMethod__; } else  if (<x/>) {throw __iterator__;return 3/0\r; } } else ");
tryItOut("/*infloop*/for(window in  '' ; (@foo.@*); constructor%=window) { /x/g ;let constructor = <x/>, prototype; }");
tryItOut("return;");
tryItOut("/*infloop*/for(let ({ prop: prop, __parent__: [__noSuchMethod__, constructor, , ] }) = <x/>; (({__proto__: * })); <x/>) x::constructor;");
tryItOut("M:if((<><x><y/></x></> >>=  '' )) { if (((new eval()) <= function::__iterator__)) {do let constructor = false, prototype = <x/>; while((<y><z/></y>.yoyo(-3/0)) && 0);let setter, __noSuchMethod__, function::__proto__ = constructor; } else {/*infloop*/M:while([]){return 0x99; } }}");
tryItOut("with(new __count__(('fafafa'.replace(/a/g, function(y) { yield y; /*for..in*/for(let prototype = __iterator__ in <><x><y/></x>\f</>) return;; yield y; }))) ? ((yield <y><z/></y>) ? (<><x><y/></x></>)() : --~) : 5.0000000000000000000000.eval(<x/>)){gc()if(<y><z/></y>) { if (undefined.__defineSetter__(\"prop\", ({}).__lookupGetter__)) {;export *; }} else {*::*((new Function(\"var __count__, __proto__ = window;\"))).call } }");
tryItOut("export __parent__;\nlet (__iterator__ = this) { constructor, constructor; }\n");
tryItOut("{yield; }");
tryItOut("if(-((<x><y/></x> for (__noSuchMethod__ in this)))[<><x><y/></x></>].__defineSetter__(\"__count__\", ({}).__lookupGetter__)) gc() else throw  \"\" ;");
tryItOut("if((*(<><x><y/></x></>, 0))[arguments.valueOf(\"number\")]) {return; } else (@foo);");
tryItOut("/*infloop*/\ffor(const __parent__; <y><z/></y>; (each = prototype)) {let __noSuchMethod__, __noSuchMethod__ = 3/0; }");
tryItOut("L:switch(__noSuchMethod__ = 1e4 >= *--.constructor) { default: return (4. >=  '' );break; /*for..in*/L:for(let __proto__ in (-1)) 4.;case 7: break; break;  }");
tryItOut("/*infloop*/while((-*::*)){throw var prop;, (-1);(__noSuchMethod__).watch }");
tryItOut("{do  while((('fafafa'.replace(/a/g, [z1]))) && 0); }");
tryItOut("");
tryItOut("var prop = 1e+81;");
tryItOut("if((<x/>)()) { if (((<x><y/></x>))) /*infloop*/for(@foo & <><x><y/></x></>; let prop = (function ([y]) { })();; <x><y/></x>) {yield;return; } else {throw *; }}");
tryItOut("with( /x/g ){const \tconstructor, __parent__; }\ncontinue ;\f\n");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: ({ __iterator__: <!--yy-->, prototype: __proto__ }) }) = *[window]; this.__noSuchMethod__ = 1e81; (window == undefined)) {yield <x><y/></x>;return; }");
tryItOut("let ([]) { /*infloop*/M:while([1.3])return @foo; }");
tryItOut("prototype = __parent__;");
tryItOut("gc()");
tryItOut("if(#1=[__proto__]) ; else  if (function  prop (__parent__, __noSuchMethod__)<x/>( '' , [1]) in __noSuchMethod__ = <x><y/></x>) {function () { yield  \"\"  }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in @foo) return\n/*for..in*/M:for(const (<x><y/></x>)(<x><y/></x>) in (<y><z/></y>)[window]) yield;");
tryItOut("/*for..in*/M:for(let __count__ = 1e+81 in false) {let prop; }");
tryItOut("/*for..in*/for(__parent__ in (({constructor: <x/> }))) 3\nprop");
tryItOut("let (constructor = __noSuchMethod__.__parent__ setter= [1,2,3,4].map) { throw <x><y/></x>; }");
tryItOut("\n");
tryItOut("/*for..in*/for(var prop in ((null)([,,z1])))let __count__ = <><x><y/></x></>;");
tryItOut("( /* Comment */false)\n((__noSuchMethod__ .. window));");
tryItOut("if(<><x><y/></x></> -= <x/>) {__proto__, constructor = this;const constructor, __iterator__ = <y><z/></y>; } else yield <><x><y/></x></>;");
tryItOut("{}");
tryItOut("L:if(--[z1,,]) try { ; } catch(__iterator__ if (function(){<>\f<x><y/></x></>, __count__;})()) { export *; } finally { (<><x><y/></x></>).__defineSetter__ }  else if(prototype = __parent__ = __iterator__) {prototype = <x/>, __noSuchMethod__;\rconst constructor = function(id) { return id }, prototype; }\nconstructor, __iterator__;");
tryItOut("/*infloop*/while(Number(<><x><y/></x></>, ({a1:1})))__iterator__, ;");
tryItOut("const prop =  /x/ ");
tryItOut("return;");
tryItOut("{throw *::*;return; }");
tryItOut("({}).__lookupGetter__");
tryItOut("if(constructor) export __iterator__;");
tryItOut("if((0.hasOwnProperty(\"prototype\"))) if(({ get __count__(prototype) { yield 1.3 }  })) { if ((true.__lookupGetter__(\"__count__\")) :: <><x><y/></x></>.__noSuchMethod__\t) (<y><z/></y>); else return (function ([y]) { })();}");
tryItOut("{}");
tryItOut("throw function::__iterator__;");
tryItOut("if(new (1 for (x in []))(__parent__.prototype getter= gc, <><x></><x></> <<= <><x><y/></x></>)) {/*for..in*/for(var __count__ in null) with( /x/ )(function ([y]) { })(); } else  if (([] = ([*. for(let y in []); __lookupSetter__(\"__proto__\")].map( \"\" [undefined])))) {yield *;const prototype = <><x><y/></x></>, constructor = -3/0; }");
tryItOut("gc()");
tryItOut("switch((constructor = )) { default:  }");
tryItOut("/*for..in*/for(var 1.3 <<= new ( /x/g )() in (((new Function(\"with((yield <><x><y/></x></>(<x><y/></x>, <><x><y/></x></>)))return;\")))(<xxx>{constructor}</xxx\f>.yoyo(prototype))))/*infloop*/for(((j !== window).hasOwnProperty(\"__iterator__\")).__proto__; __iterator__; delete <><x><y/></x></> == [* for each (__parent__ in 3)]) var prototype = <x/>\nlet (__count__ =  '' , prop { with({__parent__: <><x><y/></x>\f</>})-1; }");
tryItOut("/*infloop*/L:do { } while(#0=[__noSuchMethod__\n]);");
tryItOut("let(({ prop: __parent__ }) = yield.isPrototypeOf( /x/ .__lookupSetter__(\"throw <x><y/>\\r</x>;\"))) { for(let y in [5,6,7,8]) const constructor = __parent__, prototype = null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in undefined) let __count__;");
tryItOut("{/*infloop*/M:for(<x><y/></x>; <x><y/></x>//h\n; @foo) {(*::*); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in eval(\"@foo;\", window)) /*for..in*//* nogeckoex bug 349964 */");
tryItOut("function(y) { yield y; yield false;; yield y; }");
tryItOut("if(this) { if (__proto__ = *::* *  /x/g .isPrototypeOf([[]])) {yield  /x/g ; } else do {yield; } while(( '' ) && 0);}");
tryItOut("if([<x/> if (({a1:1}))] + (constructor(*::*))) {break L; } else  if ([default: return;break;  for each (__parent__ in false)] .@*:: [15,16,17,18].sort(function (__proto__, __proto__) { ({}).hasOwnProperty } , <><x><y/></x></>)) {/*infloop*/for(const export *; = prototype%=<x><y/></x>; <><x><y/></x></> in <x><y/></x>; (({__parent__:  /x/g , __proto__:  /x/g  }))) export __count__; }");
tryItOut("/*infloop*/M:while((__parent__ = window) >>>=new function(q) { return q; }(this, <x><y/></x>) < [(__count__ = default: case +@foo: break; yield <x/>;break; )].sort\f(function () { return .2.__noSuchMethod__ } )){(new Function(\"let __parent__;\"))/*for..in*/for(const [__noSuchMethod__, __proto__] = ({a2:z2}) in <><x><y/></x></>) yield; }");
tryItOut("function::__proto__, __proto__ = <><x><y/></x></>;\nif(__noSuchMethod__) {}\n");
tryItOut("/*infloop*/M:for(constructor = #2=[false] .. [11,12,13,14].some; __noSuchMethod__ = -1.unwatch(\"__noSuchMethod__\"); ++__iterator__) {yield;; } const [[1]];");
tryItOut("{/*for..in*/M:for(const * = <x/> instanceof (new *::*(__iterator__)) in  '' ) {const __iterator__ = window, __count__;(new Function).call }throw prototype; }");
tryItOut("/*for..in*/M:for(let [__noSuchMethod__, __count__] =  in  \"\" ) { }");
tryItOut("throw prototype; const __count__;");
tryItOut("/*infloop*/M:for(__proto__ = 0x99; <><x><y/></x></>; window) export *;");
tryItOut("L:if((this.__defineSetter__(\"__noSuchMethod__\",  { yield; } ))) { if (__proto__ = <y><z/></y>.*) {let prototype; }} else yield;");
tryItOut("/*infloop*/while(__noSuchMethod__|=<y><z/></y>){export prototype;if(Function(<y><z/></y>)) {{}yield 3.141592653589793; } else  if ( /x/g .* /  /x/g ) gc() }/*\n*/");
tryItOut("/*infloop*/for([15,16,17,18].some([1,2,3,4].slice, ((uneval(this)))); false; <x/>) /*infloop*/for(@foo(<x/>, <x><y/></x>); (this.__defineSetter__(\"constructor\", [1,2,3,4].slice)); ()) var constructor = [1];");
tryItOut("/*infloop*/while(.2.hasOwnProperty(\"__proto__\"))yield;");
tryItOut("/*for..in*/for(const __proto__ in (<x><y/></x> , <x/>)) {return; }\f");
tryItOut("/*infloop*/for(let __noSuchMethod__ = let (__iterator__ = (function ([y]) { })()) function ([y]) { }.prop = window for each (__iterator__ in <x><y/></x>); this.__defineSetter__(\"__proto__\", (<x/>).__defineSetter__); new (Function)(({__noSuchMethod__ setter: function  __noSuchMethod__ (__count__)__iterator__: (__proto__ = 5.0000000000000000000000) }))) continue M;");
tryItOut("prop = constructor;");
tryItOut("throw __iterator__;");
tryItOut("\n");
tryItOut("/*for..in*/for(const __count__ = !((1 for (x in [])))([,,z1], @foo) in this.__defineSetter__(\"prototype\", @foo)) {M:do {yield;export *; } while(((@foo.__lookupGetter__(\"prop\"))) && 0); }");
tryItOut("{gc()@foo; }");
tryItOut("throw prop\nif((case (({ __parent__: yield }) = <x/>.__noSuchMethod__ = this): default: break; .prototype)) break L; else  if (__count__.__iterator__ = __parent__) export __iterator__; else {var constructor = window, __iterator__ = true;false; }");
tryItOut("/*infloop*/do {throw ({}); } while(window);");
tryItOut("/*for..in*/for(const __count__ in ((function  __iterator__ (__noSuchMethod__, constructor) { ; } )((eval(\"((prop)(<x/>))\", window\n)))))yield;");
tryItOut("throw __parent__;");
tryItOut("M:while((eval(\"constructor\", <><x><y/></x></>)) && 0){let __parent__\n for ((++<><x><y/></x></>)(. = this) in *::*) if ( /x/ ) }");
tryItOut("/*infloop*/do /*infloop*/\tM:for(__noSuchMethod__; [z1]\n; ({a1:1}) || this) export __noSuchMethod__; while(((__noSuchMethod__ = <><x><y/></x></>)(( /* Comment */<x><y/></x>), .2)));");
tryItOut("/*infloop*/for(new <><x><y/></x></> >>=  /x/g (({__iterator__: (1e+81 for (constructor in [1,,])), __parent__ getter: function  constructor (__iterator__, __count__) { yield prototype }  })); ((uneval(this.hasOwnProperty(\"prop\")))); ([11,12,13,14].sort)) { }");
tryItOut("");
tryItOut("([z1,,]);\n<><x><y/></x></>;\n");
tryItOut("/*for..in*/M:for([constructor, __count__] = this.__defineGetter__(\"constructor\", 'haha'.split).valueOf(\"number\") in <><x><y/></x></> >>>  '' ++) {/*infloop*/for(let ({ __count__: __noSuchMethod__ }) = <x/> * this; #1# +  /x/g ;  \"\" .watch(\"constructor\", Math.pow)) if(<><x><y/></x></>) { if (1.2e3) {{}; }} else throw @foo; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const 4.['__parent__'] in @foo) {break ; }");
tryItOut("return this.__lookupGetter__(\"constructor\");");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ prop: [, , ({ __iterator__: ({ constructor: [, , ] }) }), , [, , prop]] }) in (({}).@foo)) M:while((@foo) && 0){yield *; }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("if((eval(\"<y><z/></y>\", __iterator__))) { if (window--) yield;} else let prop;");
tryItOut("let (prototype = [z1]) { export __proto__\n }");
tryItOut("L: break ;");
tryItOut("/*infloop*/do /*infloop*/L:for(const ({ __parent__: __noSuchMethod__ }) = prototype = prototype;; (let (__count__, __iterator__ = __count__) <x><y/></x>);  /x/g ++\f) {if(<x/>) { if (<x/>) export *;} else {break ;export *; } } while(new ([*]));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let [] in <!--yy-->) {}");
tryItOut("var  = #1#;");
tryItOut("M:while((this) && 0){prop = @foo, __proto__ = __parent__;let __count__, prototype; }");
tryItOut("/*infloop*/for(let constructor; []; <y><z/></y>) {let __parent__; }");
tryItOut("/*for..in*/for(let constructor = (({constructor getter: function (__noSuchMethod__) { yield [[]] } , __parent__: 1e+81 })) in 0x99 -= undefined) var prototype = true;");
tryItOut("while((@foo .. <><x><y/></x></>) && 0)<><x><y/></x></>;");
tryItOut("M:with({__iterator__: <y><z/></y>})const __proto__ = false, __noSuchMethod__ =  \"\" ;");
tryItOut("(<x/>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var x::prop in  /x/g ) {(prototype);return true; }");
tryItOut("/*infloop*/while(({ get __proto__ prototype (__noSuchMethod__)<><x><y/></x></>, __noSuchMethod__: () })){M:switch(__proto__ ||  /x/ ) { default: __proto__, prototype = prototypecase 6: case <x><y/></x> ? undefined : <y><z/></y>: <x><y/></x>;break; break; break; break;  } }");
tryItOut("with({__count__: (<x><y/></x> >= <y><z/></y>)})gc()");
tryItOut("/*infloop*/for(var constructor; __iterator__;  '' ) {yield  \"\" ;([[]]); }");
tryItOut("/*for..in*/for(var ({ __noSuchMethod__: ({ constructor: __count__ }) }) in ((function ([])__count__.prop = (((<x/>).__defineSetter__).call(5.0000000000000000000000, <><x><y/></x></>)))(function(y) { yield y; continue M;; yield y; })))__noSuchMethod__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = @foo in  /x/g ) {break ;export *; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("with((prototype.__parent__ setter= Math.sin).eval(this.*).hasOwnProperty(\"__count__\")){throw <y><z/></y>return <x/>; }");
tryItOut("/*infloop*/while([1])const setter;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in *::*) gc()");
tryItOut("if((<><x><y/></x></>\n) -= (p={}, (p.z = <x><y/></x>)())) {[15,16,17,18].filter(new Function, __iterator__%=__count__) } else  if ((__iterator__.constructor)) {export __iterator__;export __proto__; }");
tryItOut("if((__proto__ -  /x/ ) for each (__proto__ in [11,12,13,14].map) for (__parent__ in constructor, __noSuchMethod__) for each (__proto__ in __count__) for (__parent__ in <x><y/></x>)) L: ; else  if (false ? * : *) {let __parent__ = this.__defineSetter__(\"prototype\", function (__parent__, __iterator__) { return ({a2:z2}) } );if(undefined\n\f.__defineSetter__(\"prototype\", ((/a/gi).apply).apply)) (function(id) { return id }); else  if (__count__.__count__ getter= ) Math.pow else {function(q) { return q; }case 2: /*infloop*/for(<><x><y/></x></>; @foo; __count__) {(eval\f).applyvar prototype, constructor; }break;  } } else ");
tryItOut("if(1.2e3) {const constructor = function ([y]) { }, constructor = [1];Mreturn; }\f else {return;/*for..in*/for(const [__iterator__, prototype] =  \"\"  in <x/>) {{} }let __noSuchMethod__, __iterator__; }");
tryItOut("do {__proto__;gc() } while(((((function () { yield this } )(__noSuchMethod__ = *::*)) >>>=<y><z/></y>)) && 0);");
tryItOut("for(let y in []);");
tryItOut("return  '' ;yield __parent__");
tryItOut("/*infloop*/for(prop; 3; null) ");
tryItOut("{yield;return *::*; const __count__; }");
tryItOut("{ }");
tryItOut("export *\n");
tryItOut("export *;");
tryItOut("/*infloop*/M:for(( /x/ .throw(@foo).hasOwnProperty(\"__parent__\")); ([15,16,17,18].map((eval(\"*::*.__lookupGetter__(\\\"__proto__\\\")\", ((function  __proto__ (prototype)1.2e3).call( /x/g ,  \"\" )))).__defineSetter__, __parent__.__parent__ = <x/>)); <y><z/></y>.__proto__ = window) try { export prop; } catch(__iterator__) { const __count__; } finally { throw <><x><y/></x></>; } ");
tryItOut("{L:do {constructor = <x><y/></x>; } while((({a1:1})) && 0); }");
tryItOut("/*infloop*/for(__iterator__; <y><z/></y>; this.__defineSetter__(\"constructor\", ( /x/ ).__defineSetter__)) {;return 0.1; }");
tryItOut("with({__iterator__: <><x><y/></x></>})\t{/*for..in*/for(const prototype.__noSuchMethod__ in ((function ([y]) { })(eval(\"[[1]]\", (<y><z/></y>.watch(\"constructor\", (window).watch)))))){(<><x><y/></x></>); } }");
tryItOut("throw @foo;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const [prop, __iterator__] = eval(\"new <><x><y/></x></>(<><x><y/></x></>)\", __noSuchMethod__) in (__iterator__.__noSuchMethod__ = <y><z/></y>)) \t");
tryItOut("L:if(*) { } else  if (((-1).__defineGetter__(\"__iterator__\", function (__proto__) {  } ))()) return <x><y/></x>;");
tryItOut("(true);");
tryItOut("__parent__: (\n__proto__ :: function::__noSuchMethod__)");
tryItOut("/*infloop*/for(<x/>; 1e81; window) {var __parent__; }\n;");
tryItOut("if(*(@foo)) 0.1; else return;");
tryItOut("yield; const __parent__;");
tryItOut("yield __parent__;");
tryItOut("/*for..in*/for(var __parent__ in <y><z/></y>) {'haha'.split }export prop;");
tryItOut("/*for..in*/for(const constructor if (null).__noSuchMethod__ in (((((uneval(window)))).__defineSetter__)(prop = ({prototype: 033,  get __proto__(function::__count__)prop })))){yield @foo;\tyield; }");
tryItOut("if((-1)) { if (__noSuchMethod__.__noSuchMethod__ getter= Function) {break L; } else L: {return 0.1;throw this; }}");
tryItOut("/*for..in*/for(let \n[<><x><y/></constructorx></>].filter([1,2,3,4].slice) in (((1 for (x in [])))(setter ==  '' ))){export __count__;(4.).watch }");
tryItOut("/*for..in*/for(const [function::__iterator__, setter] = (([15,16,17,18].sort((new Function(\"__count__;\")), <x><y/></x>)).__defineSetter__).call((<><x><y/></x></> ? 033 : <><x><y/></x></>), (new (<x><y/></x>)()), window.eval(undefined)) in gc << 4..prototype) {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in 0.1) {export *;{} }if(-*::*) { if (<x/>(\r)) {var prop = <x/>, __proto__; } else return <><x><y/></x></>;} }");
tryItOut("{true;{} }");
tryItOut("/*for..in*/M:for(var prop = [new Function(#3={a:#3#})].filter(Math.sin).@foo.watch(\"prototype\", (eval(\"<x/>\", -0)) for each (__proto__ in <x/>) for (__noSuchMethod__ in  '' )) in ({ __count__: prototype, __proto__: __noSuchMethod__ }) = this / window) {/*for..in*//* nogeckoex bug 349964 */ for  each(let setter in window) {return <x><y/></x>; }if(1e4) { if (undefined) {yield <y><z/></y>; }} else gc() }");
tryItOut("var __iterator__;");
tryItOut("while((constructor = 1e+81.__defineSetter__(\"prop\", (/a/gi).call)) && 0){__iterator__ }");
tryItOut("((p={}, (p.z = <x><y/></x>)()));");
tryItOut("{yield 4.; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for /*\n*/ each(const __count__.__proto__ in ((('fafafa'.replace(/a/g, ({}).__lookupGetter__)))[(<><x><y/></x></>)[<><x><y/></x></>]])) /*infloop*/for([,,]; <y><z/></y>; <x/>) __noSuchMethod__, prop");
tryItOut("with(({__count__:  \"\" .isPrototypeOf(@foo)})){{} }with({}) { for(let y in [5,6,7,8]) throw __noSuchMethod__;//h\n } ");
tryItOut("/*infloop*/do (*); while(throw <><x><y/></x></>.@foo.eval(this.zzz.zzz));");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = __count__ = false in prop) export prototype;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __proto__ = new @foo(*, <x/>) in ( \"\" .propertyIsEnumerable(\"__proto__\"))) {continue M;; }");
tryItOut("__iterator__;throw [1];");
tryItOut("with\f((({__iterator__: 0})).yoyo(#1=[[,,z1]]))__noSuchMethod__");
tryItOut("{/*for..in*/for(const __iterator__ = 3/0 in (delete * ==  '' )) {L: {let prop = <y><z/></y>;var __parent__ = 4.; } } }");
tryItOut("/*infloop*/for(let __parent__; <><xxx {prototype}={'fafafa'.replace(/a/g, eval)} /></>; __proto__ = (__noSuchMethod__ = @foo).__parent__ = __proto__.hasOwnProperty(\"__count__\")) export x::__iterator__;");
tryItOut("/*infloop*/L:while(\nthis){(*);yield; }");
tryItOut("/*for..in*/for(let __parent__ = 0.1 in window) {export __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in #3={a:#3#}) {yield; }");
tryItOut("if(*) { if (false) <x/>; else constructor, prop =  /x/ ;}");
tryItOut("let prototype = <y><z/></y>, __parent__;\nif([[1]]) { if (false) {} else yield  '' ;}\n");
tryItOut("{return; }");
tryItOut("/*infloop*/while(<><x><y/></x></>)throw ({a2:z2});");
tryItOut("M:if(1e81) {throw <><x><y/></x></>;{} }");
tryItOut("if(( /x/  :: -1) ===  /x/ .@*) {} else  if ((<x><y/></x>.watch(\"function::__noSuchMethod__\", (({}).hasOwnProperty).call)) .. [15,16,17,18].sort(eval, __noSuchMethod__)) return\nwith({constructor: __parent__}){yield; }");
tryItOut("let __parent__ = <x><y/></x>, __count__ = <y><z/></y>;");
tryItOut("return <x/>; const __iterator__;");
tryItOut("L:if(__parent__.__iterator__) { if (<x><y/></x>.__defineGetter__(\"prop\", /a/gi)) if(<x><y/></x>\n) {__proto__yield; } else  if (<x><y/></x> for (__iterator__ in [1,,])) \treturn;} else {throw <x/>; }\n;\n");
