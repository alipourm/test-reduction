tryItOut("return;");
tryItOut("/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; __proto__) {yield; }\n");
tryItOut("with(__parent__.prop = window)(<y><z/></y>);");
tryItOut("do {var __parent__ = <x><y/></x>; } while(( /x/g ) && 0)");
tryItOut("while((<><x><y/></x></>) && 0){yield  /x/ ; }");
tryItOut("L: {if((prototype)) yield null; else {return <><x><y/></x></>; }export *; }\n");
tryItOut("if((<x><y/></x>).__defineSetter__) ; else  if (*::*.watch(\"prop\", Math.pow)) ");
tryItOut("while((@foo) && 0){return; }");
tryItOut("/*infloop*/for(new <y><z/></y>(); \n /x/g ; new Iterator(window, *)) {[1,,]do <x/>; while((<x><y/></x>) && 0); }");
tryItOut("/*infloop*/for(({ constructor: __parent__, __noSuchMethod__: ({ __noSuchMethod__: ({ constructor: ({ __parent__: prop, __count__: __noSuchMethod__ }), ({}).propertyIsEnumerable(\"__iterator__\"): ({ __count__: __parent__ }) }) }) }) = ((p={}, (p.z = <><x><y/></x></>)()))[(@foo.__defineSetter__(\"constructor\", Function))]; new <x/>( '' ); ((p={}, (p.z = ({ __parent__: constructor }) = undefined\n)()))) {L: {/*\n*/ } }");
tryItOut("if(#1=((window)[3.141592653589793])) { if (__parent__.__count__ getter= (* ? window :  /x/ ).apply) {var prototype; }} else if(new Boolean(.2, #1=[#1#])) {try { ; } finally { export *; } let __iterator__; } else [1,2,3,4].map");
tryItOut("with(new ((prototype).__defineSetter__)())/*for..in*/for(let [constructor, function::__noSuchMethod__] = <x></*\n*/y/></x> in <y><z/></y>) throw ({a1:1});");
tryItOut("/*infloop*/for(0.1;  \"\" ; <x><y/></x>) {export *;throw 1.2e3; }");
tryItOut("/*infloop*/for(var __parent__; <><xxx {prototype}={! \"\" } /></>; __parent__ ? window : this.prototype) /*infloop*/L:for(let yield <><x><y/></x></>; = (<><x><y/></x></> % <y><z/></y>);  /x/ ; false += *::*) ;");
tryItOut("/*infloop*/M:do while(((<><x><y/></x></> >= this in <x><y/></x> % [1])) && 0)export __count__; while((<x/> for (__iterator__.__noSuchMethod__ in <><x><y/></x></>) for (prototype in undefined)) .@ [] = @foo for (prototype in this) >= ;);");
tryItOut("L:if((__count__.__count__)(x::__noSuchMethod__.prop = <x><y/></x>) = @foo) let __parent__; else if( \"\" ) export *;");
tryItOut("/*for..in*/for(let [<><>this.__defineSetter__(\"function::__iterator__\", function (({ prop: __count__ })) { yield [.2].sort(gc) } )</></>, prop] = this in this.__defineGetter__(\"prototype\", [1,2,3,4].slice)) { \"\" ;let __parent__ = window }");
tryItOut("let (__proto__, __count__) { /*infloop*/do {( /x/ ); } while((p={}, (p.z = *::*)()).propertyIsEnumerable(\"__proto__\")); }");
tryItOut("const __iterator__ = ({a1:1}), constructor = undefined;");
tryItOut("M:if(constructor) {return; } else  if (this) {yield __parent__;*::*; } else {{} }");
tryItOut("/*infloop*/L:do  /x/g \n while((window.watch(\"__count__\", <x/>)));");
tryItOut("/*infloop*/do (0/0); while(-*);");
tryItOut("while((<><zzz>(<><x><y/></x></> for each (function::constructor in window))</zzz></>) && 0)with((new (<><x><y/></x></>)(window, <><x><y/></x>\t</>)))\n");
tryItOut("let (__count__, __proto__) { /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in this) {{} } }");
tryItOut("do {/*for..in*/L:for(var ({ prototype: __iterator__ }) in <y><z/></y>.@*) {[1,2,3,4].slice }\tvar prototype =  '' , __count__ =  /x/ ; } while((eval(\"[({ constructor: [, constructor] })] = \\n[z1].yoyo( /x/g //h\\n)\", this.zzz.zzz)) && 0);");
tryItOut("return;");
tryItOut("while((1e+81) && 0){yield;__iterator__; }");
tryItOut("if((new Number())) {export prop;/*\n*/ } else yield prop;");
tryItOut("\nlet __parent__ = *::*, __parent__ = <x><y/></x>;");
tryItOut("/*for..in*/for(let ({ constructor: __noSuchMethod__ }) in (({ prop: __count__, setter: __iterator__ }) = __count__[({a1:1})]) |= this.__defineGetter__(\"prop\", <><x><y/></x></>)) /*for..in*/for(let <y><z/></y> in constructor) return;");
tryItOut("L:if((function(y) { yield y; yield;; yield y; }(<x/>))) { if ((((yield <x/>))[(++<y><z/></y>)]) >>>=prop.(new Function)) {export *;{} } else (new Function(\"export constructor;\"))}");
tryItOut("case  '' : export *;break; ");
tryItOut("if(new (prop = @foo)()) L: <x><y/></x> else {/*infloop*/for(__iterator__; (({a1:1}).prototype); <x/>) prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var getter.prop in ([1,2,3,4].map)(( /x/g  @ <><x><y/></x></>).@foo, prop = *)) {prop, __count__; }");
tryItOut("M:with(*::*)(<y><z/></y>);");
tryItOut("with({__parent__: eval(\"\", -0)});");
tryItOut("/*for..in*/for(const [__count__, __count__] = #3={a:#3#} ? ([15,16,17,18].sort(({}).__lookupGetter__, <x><y/></x>).unwatch(\"__count__\")) : (__parent__.valueOf(\"number\").@foo) /= [\nthis.zzz.zzz].sort(function(q) { return q; }) in Number([__iterator__.__iterator__ setter= (gc).call] ? prop : (( \"\" ).watch).call(constructor, 5.0000000000000000000000).eval(<x/>), [15,16,17,18].sort(Math.sin, new (true)(*)))) {/*for..in*/L:for(let <x><y//h\n/></x> in -1) {function  __iterator__ (constructor) { yield  /x/g  } yield window; } }");
tryItOut("/*infloop*///h\nL:if((({__iterator__ setter: function (__proto__, __proto__) { yield  /x/  }  }))) {let prototype, __iterator__ = <x><y/></x>;{} } else  if (1e-81) {/*infloop*/for(var prop; -3/0; arguments) {yield; } } else {let prototype; }");
tryItOut("if(constructor = [1,,]) { if (__noSuchMethod__) {; }} else ");
tryItOut("gc()\nconst __iterator__ = #1=[#1#];\n");
tryItOut("let (__count__) { with({}) export __iterator__; }");
tryItOut("const prototype;");
tryItOut(" { yield (null if (*)) } ");
tryItOut("/*infloop*/while(-0)yield;");
tryItOut("<><x><y/></x></>");
tryItOut("try { __iterator__.constructor = __proto__; } finally { {/*infloop*/for(try { ; } catch(prop if (function(){(<><x><y/></x></>);})()) { yield;; } catch(prop if (function(){gc})()) { return; } catch(__count__) {  } finally { yield; } ; <y><z/></y>; <y><z/></y>) {[1,2,3,4].map }(this); } } ");
tryItOut("L: {let __parent__, prop = this;{} }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = __count__; true; <><x><y/></x></>) export *;");
tryItOut("let(__proto__) { throw <x/>;");
tryItOut("L:if((033 = 1e81)) { if (new Iterator(prototype, __parent__)) return <x><y/></x>;} else ");
tryItOut("{/*for..in*/for(var [false, constructor] = <x><y/></x> <= <x><y/></x> in <x><y/></x>) gc() }");
tryItOut("return;");
tryItOut("/*infloop*/for(var __proto__; {}.@foo; __parent__.* + \n \"\" .unwatch(\"__count__\")) do {let __count__;Function } while((__iterator__ instanceof [,,z1]) && 0);");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("L: {L: {(eval).apply/*infloop*/while((p={}, (p.z = .2)()))yield; } }");
tryItOut("let(__noSuchMethod__ = Error(<x/>, <><x><y/></x></>)) ((function(){__proto__ = prop;})());");
tryItOut("let ({ __noSuchMethod__: __noSuchMethod__, prototype: prop });");
tryItOut("let (__noSuchMethod__ = <y><z/></y>) { return; }");
tryItOut("__count__\n/*infloop*///h\nfor(*::* << <x/>; [11,12,13,14].filter & Object(([1,,] /= function(id) { return id }), <><x><y/></x></>); __proto__/*\n*/ =  /x/ ) /*infloop*/for(const ({ constructor: __parent__, __noSuchMethod__: prototype }) = yield <x><y/></x>; __count__.__count__; (set =  /x/g )) {\rreturn <x/>;033 }");
tryItOut("/*for..in*/for(var (__parent__ = (function  constructor (__parent__, prop) { return <><x><y/></x></> } )() / let (prototype, [, prop, constructor]) (*::*.__noSuchMethod__) - (uneval(-3/0))) in ((function(q) { return q; })(new Math.sin(Array()))))/*infloop*/for(const [1,,]; [prop] = *::*; __parent__.(#1#)) {return;\nyield; }");
tryItOut("{with({}) { return; }  }");
tryItOut("/*infloop*/M:while(<>try { return; } catch(constructor if (function(){throw prototype;})()) { return; } catch(constructor) { let(({ prop: \r__noSuchMethod__, __count__: (prototype) })) { return new (<x/> += this)(Object(<x><y/></x>, window)); } finally { return \f<xxx>{__count__}</xxx>.([[1]]); } </>)if((yield prototype)) {(*::*); } else \fvar __count__;");
tryItOut("if(((<><x><y/></x></>.prop).__iterator__)) { if (__iterator__ = (new Error(constructor >= 1e-81))) {{} } else {const __iterator__ = function ([y]) { }, __count__ = this;export __count__; }}\n");
tryItOut("throw prop;");
tryItOut("/*for..in*/L:for(let [__iterator__, constructor] = ((-1) * null) in __parent__) { }");
tryItOut("if((uneval(window))) yield;");
tryItOut("/*for..in*/for(var __count__ in null) yield;");
tryItOut("{break L; }");
tryItOut("/*infloop*/do {{} } while(<><x><y/></x></>);");
tryItOut("with({__proto__: (prototype = this)}){x::propbreak M; }");
tryItOut("/*for..in*/M:for([, ]\r in (((new Function(\"{}\")))(<> '' </>))){return ({prop:  /x/  });L:if(({__noSuchMethod__: [1].__lookupSetter__(\"__proto__\") })) { if (window.prototype) {throw  '' ;{gc() } } else yield  /x/g ;} }");
tryItOut("L: ;return [1];");
tryItOut("L: gc()");
tryItOut("{{} }");
tryItOut("switch\r((*++).eval((<><x><y/></x></>.eval(-1))) instanceof __parent__ = <x><y/></x>) { case 5:  }");
tryItOut("return (.isPrototypeOf(@foo));");
tryItOut("if( '' ) {( '' );export constructor; } else  if (('fafafa'.replace(/a/g, 'haha'.split))) throw 0; else {return prototype;yield prototype; }");
tryItOut("#1#; const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in 3) /a/gi");
tryItOut("if(__iterator__) {yield 1.3;return; } else  if (undefined) let constructor; else {return; }");
tryItOut("{yield window; }\n\n/*infloop*/M:do {return;return null; } while(null);\n");
tryItOut("throw *;\nexport constructor;\n");
tryItOut("null; const __noSuchMethod__;");
tryItOut("if(false.valueOf(\"number\")) (function ([y]) { })(); else gc()");
tryItOut("{M:if(*::*) case window: __iterator__break; case ({a1:1}): break; return null;(1 for (x in [])) }/*for..in*/\ffor(const [__iterator__, __count__] = ((-0) /= \nfunction ([y]) { }) in __noSuchMethod__ = <x><y/></x>) {; }");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, __count__] = let (({ __parent__: prototype, __proto__: ({ __count__: __count__, constructor: __parent__ }) }), [, __proto__]) <><x><y/></x></> ^  ''  in eval(\"export __proto__;\", [15,16,17,18].filter((false).__defineSetter__, function::__iterator__ = <x/>))) /*infloop*/do break M; while((#2=({__count__: [15,16,17,18].sort(function  __parent__ (__parent__, constructor)__proto__ = <y><z/></y>, (p={}, (p.z = this.__defineGetter__(\"prop\", Math.sin))())) ? <><x><y/></x></>-- : ({ set prototype prop (__proto__, __noSuchMethod__) { yield function::__parent__ }  })})));");
tryItOut("{;yield; }");
tryItOut("throw StopIteration;");
tryItOut("let (constructor =  /x/g  .@*:: <y><z/></y>, __count__ = ('fafafa'.replace(/a/g, function  __count__ (__count__) { return  ''  } ))) { throw true; }");
tryItOut("/*for..in*/for(var prototype = () in *) { const prop;return [[]];\nyield \f<x><y/></x>;\n }");
tryItOut("prop\n");
tryItOut("/*infloop*/while(( \"\" .__lookupSetter__(\"prop\")))export *;");
tryItOut("L: {;__count__ = false; }");
tryItOut("/*infloop*/do var constructor =  /x/g , __iterator__ = *; while(let (prop = [].yoyo(*), __proto__) undefined === 4..__parent__);");
tryItOut("{throw nullgc() }");
tryItOut("{var __noSuchMethod__, prop = <x><y/></x>;return; }");
tryItOut("if(new ( /x/g )(<><x><y/></x></>).valueOf(\"number\")) { if (#0=prop) {gc()export *; } else /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <y><z/></y>) {export \t*;export prop; }}");
tryItOut("with((({}).__lookupGetter__(<><x><y/></x></>, <y><z/></y>))){}");
tryItOut("if(<x><y/></x>) export __iterator__; else  if ((function (constructor)false)) {break M; } else {/*\n*/gc() }");
tryItOut("/*infloop*/\fwhile((void true))/*for..in*/L:for(const prototype in [z1,,]) return;");
tryItOut("/*infloop*/for(__iterator__; (eval).__count__ = this; false) ");
tryItOut(";");
tryItOut("if((Math.sin)(@foo)) {/*infloop*///h\ndo {;const __count__; } while(try { export __iterator__; } catch(__parent__ if (function(){throw <x><y/></x>;})()) {  } catch(__iterator__ if  /x/g ) { let __parent__; } catch(constructor if <><x><y/></x></>) { yield; } catch(constructor) { return; } finally { yield __count__; } ); } else  if (new eval(([,,z1] >>> ({})))) {export __iterator__;let __noSuchMethod__; } else export constructor;");
tryItOut("/*infloop*/for( '' ;  '' ; __proto__) export __parent__;");
tryItOut("with({(__proto__)( \"\" ): (function  prop () { return __iterator__ = 0/0 } )((<x/>)(<x/>).__count__, (-0))})/*for..in*/for(let (<x><y/></x>)(\t<x/>)['__parent__'] in -this) <x><y/></x>");
tryItOut("{}yield;");
tryItOut("/*infloop*/M:for(null; function(id) { return id }; [,,z1]) ");
tryItOut("if(prop , <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) L: {/*infloop*/while(__noSuchMethod__)yield undefined; } else  if (())  /x/g \n else {export *;<y><z/></y>; }");
tryItOut("/*infloop*/while(prototype){}");
tryItOut("with(<><x><y/></x></> .. function(id) { return id }){export *; }");
tryItOut("with({__parent__: <><x><y/></x></>})");
tryItOut("/*infloop*/L:for(<><bbb xmlns=\"__proto__.propertyIsEnumerable(\"prop\")\"><employee id=\"1\"><name>Joe</name><age>20</age></employee><!--yy--></bbb></>; ({ __count__: ({ __iterator__: __iterator__ }) }) =  '' ; <><x><y/></x></>.__noSuchMethod__ = constructor.__defineSetter__(\"__count__\", (new Function(\"return;\")))) var __count__ = window, __parent__;");
tryItOut("if(__parent__ = <><x><y/></x></> === (<x><y/></x>.( /x/ ))\n) { if ((yield )) {\n } else /*infloop*/do {} while(__iterator__.( \"\" ));}");
tryItOut("with(window){L:if(<x/>) gc()(1e81); }");
tryItOut("if(([*].sort(function  prototype (__iterator__) { \nfunction(y) { yield y; {}; yield y; } } ))++) {continue ;; } else  if (new (p={}, (p.z = export *;)())(<x><y/></x>)) gc() else {throw <x><y/></x>; }");
tryItOut("throw 1e-81;\nreturn;\n");
tryItOut("/*for..in*/for(let prototype in <x><y/></x>) {(<x/>); }");
tryItOut("/*for..in*/for(var default: case <><x><y/></x></>: const __proto__, __noSuchMethod__;case false: yield;case  '' : undefined;case 9: yield window;return;break; break; case *: break; case 7: ;['__parent__'] in *::* & 3) L: {export *;(<x><y/></x>); }");
tryItOut("[function::__count__, __iterator__, , constructor, ]\nif(prototype) { if (<x><y/></x>) {function(y) { yield y; return;; yield y; } } else __count__}");
tryItOut("if(@foo , 3\n) { if ((eval(\"throw <><x><y/></x></>;\", yield constructor = *))) throw null;} else {default: with({__count__: .__defineSetter__(\"__noSuchMethod__\", Math.sin)})__parent__;var __iterator__ = undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in __noSuchMethod__([1])((((new Function(\"(true);\"))).call(#1#, *)))) {export *;\nvar __parent__ = *, __parent__ = 1e+81;\nif((__proto__ = <x><y/></x>)) { if (((null.isPrototypeOf( '' )))) @foo} else return undefined; }");
tryItOut("/*for..in*/for(let [__count__, constructor] = ({ prototype: [__proto__, __parent__] }) = * in (null)(*::*)) /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in @foo) {return this; }\nif(@foo) { if (false) *::*;} else {yield; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var [] in constructor) {break L;; }");
tryItOut("/*infloop*/for(const constructor; ({ get __proto__(__parent__) { yield (<><x><y\t/></x></> in <x><y/></x>) }  }); (constructor.prototype)) export *;\nyield;\n");
tryItOut("L:while(((((function(y) { yield y; {}; yield y; }).call).call(<x/>, ))) && 0)yield;");
tryItOut("do {yield <>\n<x><y/></x></>;return arguments; } while((<x><y/></x>) && 0);");
tryItOut("with({}) with({}) try { __proto__ = __noSuchMethod__; } finally { throw __count__; } ");
tryItOut("if((new (( /x/  @ false).prototype = this())(#1=[#1#], (this.zzz.zzz)))) { if (((<x><y/></x> || [,,]) for (__parent__ in *)).constructor) __parent__ else {/*for..in*/for(var __proto__ = <bbb xmlns=\"( /x/g  if ( /x/g )).*\"><ccc:ddd>yyy</ccc:ddd></bbb> in (eval(\"__iterator__ = 033, __proto__ = [[]] = <><x><y/></x></>;\", <x/>))) {( /x/g );{} } }}");
tryItOut("/*infloop*/do {throw *; } while(<><x><y/></x></> += window);");
tryItOut("/*infloop*/for(const __parent__ = <><x><y/></x></>.prop.yoyo(undefined); <bbb xmlns=\"<x><y/></x>\">yyy</bbb> -= prop = (__noSuchMethod__.(1e4)); (function ([y]) { })()) (<x/>);");
tryItOut("L:if(#0=({__proto__: ({})})) {return  \"\" ;return *; } else {*; }");
tryItOut("break ; const __proto__;");
tryItOut("/*for..in*/for(let prototype = (yield true) in <><x><y/></x></>) /*for..in*/L:for(let [__iterator__, __iterator__] = window in <><x><y/></x></>) {return;yield; }\n");
tryItOut("/*for..in*/0.1;for(var __iterator__(__proto__ = <><x><y/></x></>) in ((@foo /= null))) if(<y><z/></y>) { } else {yield;export *; }");
tryItOut("/*infloop*/while(new (new Function(\"{throw <x><y/></x>;throw this; }\"))((__noSuchMethod__ = new [z1]())).hasOwnProperty(\"__iterator__\"))L:switch(this) { default: gc()break;  }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: ({ __parent__: [] }) }) = 033; null; new ( /x/g )() in ({ get __proto__ prototype (__parent__) ''  })) {{yield; }yield; }");
tryItOut("/*infloop*/for(let ({ __parent__: __iterator__, __noSuchMethod__: ({ constructor: __proto__, __count__: constructor }) }) = window.__lookupSetter__(\"__proto__\") <= ([,,]).call((function ([y]) { })(),  { return <y><z/></y> } );  '' ; new (<><x\f><y/></x></>)()) {export *;throw <>__proto__</>; }");
tryItOut("/*infloop*/for(prototype; <y><z/></y>; ({a1:1})) {(prop = <><x><y/></x></>) }");
tryItOut("/*for..in*/for(const constructor = <xxx>{constructor}</xxx> |= [1,,] & <x><y/></x> in [11,12,13,14].some) /*infloop*/for(const [__iterator__, prototype] = eval(\"__noSuchMethod__\", <x/>) -= __count__.(this); __iterator__ = 1e-81; __noSuchMethod__) {L:if(*::*) {window;throw #3={a:#3#}; } else  if (@foo) export __parent__; }\f");
tryItOut("window & false.isPrototypeOf((<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")))");
tryItOut("/*infloop*/for(const [__iterator__, , , ] = ((uneval(<x><y/></x> = 3.141592653589793 :: .2))); (p={}, (p.z = null)()); (<x><y/></x> ? null : *::*.hasOwnProperty(\"__noSuchMethod__\")) ? __proto__ = (yield this) : *::*\n) {return (new function(y) { yield y; gc(); yield y; }().propertyIsEnumerable(\"__parent__\")); }");
tryItOut("with({__count__: new @foo(window)}){window }\n__count__;");
tryItOut("for(let y in [5,6,7,8]) try { prop = constructor; } catch(constructor) { return (({__noSuchMethod__ getter: this.__defineSetter__(\"__proto__\", gc) })); } finally { for(let y in [5,6,7,8]) try { yield; } catch(__iterator__) { throw <><x><y/></x></>; } finally { this.zzz.zzz; }  } ");
tryItOut("if(*) break ; else  if (<><x><y/></x></>) throw true;");
tryItOut("break ;\nexport __count__;\f\n");
tryItOut("for(let y in [5,6,7,8]) if((__parent__ = <><x><y/></x></>)) yield; else  if (3.141592653589793) {} else {prototype, constructor = <y><z/></y>;yield  '' ; }");
tryItOut("if(((-1).watch(\"constructor\", [1,2,3,4].map))) { if (__count__ = yield [z1,,]) {export *;var __count__ = <><x><y/></x></>, __iterator__; }} else throw @foo");
tryItOut("M:if(__proto__) export prop; else {throw  \"\" ; } const __noSuchMethod__;");
tryItOut("let __count__, constructor = -0;");
tryItOut("/*for..in*/for(\tconst [constructor, __proto__] = ({__count__: false }) in false) break\f ;yield null;");
tryItOut("Function");
tryItOut("for(let y in []);");
tryItOut("M:with(undefined){yield; }");
tryItOut("with(__proto__){break ;; }");
tryItOut("if(([false].sort(function  __noSuchMethod__ (__iterator__, constructor) { yield true } ))--) {{}return; } else continue ;");
tryItOut("/*for..in*/L:for(let constructor in  '' ) {constructor }");
tryItOut("while((prop.prop = undefined) && 0){export *; }");
tryItOut("let (prototype, __parent__ = gc()) { {yield  \"\" ; } }");
tryItOut("let(__parent__.__noSuchMethod__) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/do __noSuchMethod__, __count__ = <y><z/></y>; while(<><x><y/></x></>);");
tryItOut("if(<><x><y/></x></>) { if ((p={}, (p.z = <x><y/></x>)())) {yield (-0);<><x><y/></x></>; }} else __parent__, <x><y/></x>export __parent__;");
tryItOut("while(([[1]]) && 0)let (constructor) { yield *::*; }");
tryItOut("switch(.2) { default: break; throw <>__proto__ = undefined</>;break; case this: break; case this: (<x/>\f);break; case 0: return;case 1.3: case 1: export *;break; case 0: ;break; break; case 1: <><x><y/></x></>break; case []: var x::__iterator__;;case window: export prototype;export *;break; throw <><x><y/></x></>;break;  }");
tryItOut("with({}) { return __noSuchMethod__ = *::*; } ");
tryItOut("/*infloop*/while(<>__noSuchMethod__: @foo</>){\tvar __iterator__, __noSuchMethod__; }");
tryItOut("/*infloop*/var __proto__ =  '' , __count__; while(__parent__ = @foo);");
tryItOut("{{} }\nfor(let y in []);\n");
tryItOut("/*infloop*/for(const __count__; @foo .@ window; ((p={}, (p.z = *)()))) {const __noSuchMethod__ = <x/>, prop; }");
tryItOut("try { throw prototype; } catch(prop if (function(){return;})()) { return this; } catch(__noSuchMethod__ if (undefined % false.eval(({__proto__: function(id) { return id }}))).__lookupSetter__(\"new (function(q) { return q; })(true, -1)\")) { for(let y in []); } finally { with({}) { this.zzz.zzz; }  } ");
tryItOut("/*for..in*/L:for(var __proto__ in (/a/gi)(new this())) continue M;");
tryItOut("function::prop = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __iterator__: ({ constructor: prop, __parent__: __noSuchMethod__ }), constructor: ({ prototype: __proto__ }) }) in Function) {return;{} }");
tryItOut("let ([constructor, [, , , , __count__], ({ null ^ <x/> === constructor.watch(\"__parent__\", function (constructor, prototype) { yield false } ): ({ prop: [, __parent__], __count__: [] }), __proto__: __parent__ }), ], [prototype]) { (0 instanceof <><x><y/></x></>); }");
tryItOut("while((__iterator__.__proto__) && 0){return <x><y/></x>\nthrow  '' ; }");
tryItOut("if((new (window)())) { if (#1=[#1#]) throw <x/>;} else {return 1.3; }\nvar constructor = <x><y/></x>, __count__ = ({});\n");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].slice)) { if ({}) (window);} else yield;");
tryItOut("/*infloop*/for((__proto__.__defineGetter__(\"prop\", <><x><y/></x></>)); delete x::prop; (__parent__ = 0x99.hasOwnProperty(\"prototype\"))) ");
tryItOut("/*infloop*/while((<x><y/></x> = [] = !<><x><y/></x></>))/*for..in*/for(let __proto__ = window in __noSuchMethod__.__defineSetter__(\"prop\", [z1])\f) return *;");
tryItOut("/*for..in*/for(var [__parent__, __iterator__] = [z1] in 4.) ( '' );");
tryItOut("break ;with({constructor: <x/>.@foo})export *;");
tryItOut("do {/*infloop*/for(var ({ prop: ({ prototype: ({ constructor: ({ prop: __noSuchMethod__, <x><y/></x>: constructor }) }), function::__noSuchMethod__: ({ function::__parent__.__parent__: ({ __count__: __proto__ }) }) }) }) = 'fafafa'.replace(/a/g, (Math.pow).call); ({ __iterator__: [prop, __parent__, prop, prototype], constructor: ({ __proto__: prototype }) }) = eval(\"*::*\", <><x><y/></x></>); (new ((p={}, (p.z = <y><z/></y>)()))(case 4: /*for..in*/L:for(var __noSuchMethod__(this) in <y><z/></y>) {var constructor; }break; case __iterator__ = <><x><y/></x></>: case 4: break; ))) {var __count__, constructor; }{for(let y in [5,6,7,8]) return; } } while((new (Function)()) && 0);");
tryItOut("while(((((({ }))))) && 0)yield;");
tryItOut("{{<bbb xmlns=\"__iterator__\"><x><y/></x><ccc:ddd>yyy</ccc:ddd></bbb> }{export *; } }");
tryItOut("{/*for..in*/M:for(let __count__ in ((((function  constructor () { const , prototype = 1.3; } ).call).apply)(<y><z/></y>)))yield;switch([z1,,]) { case __noSuchMethod__: export *;case 4: yield;break; case 3: throw *; } }");
tryItOut("if(({})) { if (__noSuchMethod__ =  /* Comment */[0/0]) {(<x/>); }} else {( '' ); '' ; }");
tryItOut("{if((constructor.constructor getter= function () { (undefined); } )(__noSuchMethod__ = __proto__, window)) return; else  if ((prop.(<y><z/></y>))) L: {Math.sin(__count__); }throw prop; }");
tryItOut("/*for..in*/for(const __count__ = yield false in <>this</>) ");
tryItOut("/*for..in*/for(var getter in <y><z/></y>) {export prop;yield null; }");
tryItOut("/*infloop*/for(__count__.([[]]).__count__ = (((*::*)(<x><y/></x>, undefined))).watch; let (return; = prototype = __iterator__, __proto__ = null) [15,16,17,18].filter((window).__defineSetter__, __iterator__); this.__defineGetter__(\"__parent__\", [1,2,3,4].slice)--) ;");
tryItOut("{(<><x><y/></x></>); }");
tryItOut("continue ;");
tryItOut("if(<x><y/></x> @ ({a2:z2})) {let([({ constructor: prototype, __proto__: __proto__ }), __iterator__] = ({prop: prototype = *::*}), __parent__ = (typeof  '' ), __noSuchMethod__ = <x><y/></x>) ((function(){ /x/ ;})()); } else /*for..in*//* nogeckoex bug 349964 */ for  each(let prop(<><x><y/></x></>) in __iterator__ = 1.2e3) /*for..in*/for(var __noSuchMethod__ = 4. in true) var __noSuchMethod__ = this;");
tryItOut("");
tryItOut("M:do {do {null; } while((<><x><y/></x></>) && 0);(__parent__); } while(([].propertyIsEnumerable(\"prop\")) && 0);");
tryItOut("__proto__ = constructor;");
tryItOut("if(__proto__) {return; } else  if (let (function::__count__, constructor = <x><y/></x>) <x><y/></x>) return;");
tryItOut("/*for..in*/for(var __noSuchMethod__.function::__parent__ in ((Math.pow)([[1]].__defineGetter__(\"__count__\", (1 for (x in [])))))){throw @foo;( { return prototype } ); }");
tryItOut("if(this.__defineGetter__(\"__proto__\", function  __parent__ (prototype) { yield __count__ } )) /*infloop*/L:for((-1); 1e-81; [[]]) export *; else {/*infloop*/for(const __count__ = __parent__; __iterator__; #1#) {var __noSuchMethod__ = 1e-81, __iterator__;__count__; } }");
tryItOut("/*for..in*/for(let __iterator__ in prop = (*::* ===  \"\" )) {}");
tryItOut("let (prototype, __proto__ = true) { if(this) { if (false) {break L; }} else {__noSuchMethod__, __count__;return; } }");
