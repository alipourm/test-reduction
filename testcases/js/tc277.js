tryItOut("__noSuchMethod__ = prop;");
tryItOut("if(constructor) {/*infloop*/do {throw prototype;(<><x><y/></x></>); } while(0.1 <<=  /x/g );__noSuchMethod__, __iterator__;\n<x><y\f/></x>;\n } else {/*for..in*/L:for(var <><x><y/><//h\n/x></> in undefined) break ;__parent__ = prototype; }");
tryItOut("if(prototype = *::*) /*for..in*/M:for(let __proto__ = (prop.(<y><z/></y>)) in <x><y/></x>) (*); else {return <x><y/></x>;export *; }");
tryItOut("let prop) { L:if(this) { if (__parent__) {(<x><y/></x>).__defineSetter__ } else __proto__} }");
tryItOut("yield <y><z/></y>;\nreturn true;\n");
tryItOut("L:if(<y><z/></y>) ; else  if (3) {window;(<y><z/></y>). } else {}");
tryItOut("with({}) { export prototype; } ");
tryItOut("if((uneval(@foo)))  else {return; }");
tryItOut("M:if(<x><y/></x>) [[1]]; else  if (<x><y/></x>) {export *;yield; }");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {([1,2,3,4].slice).call }");
tryItOut("/*infloop*/for(let __iterator__; ((p={}, (p.z =  \"\" )())); ([[z1]])) M:with(null){throw <x/>;\f }");
tryItOut("while((({ __noSuchMethod__: __count__ }) = ({prototype: (null != 3/0) % (<x><y/></x> | 2)})) && 0){[1,2,3,4].map }");
tryItOut("/*infloop*/for(var constructor =  /x/g ; [[]]; window) try { export __noSuchMethod__; } catch(prop if (function(){return <><x><y/></x></>;})()) { var prototype = prop; } finally { yield; } ");
tryItOut("if(this.__defineGetter__(\"constructor\", (5.0000000000000000000000)[(prototype = this)\n])) {yield constructor; } else  if (prop = ((( \"\" )(<x/>)) % (p={}, (p.z = (eval(\"<x/>\", x::__count__)))()))) {function(y) { yield y; ;; yield y; } }");
tryItOut("switch(<><x><y/></x></>) { case [z1]: break;  }");
tryItOut("/*infloop*/for(new yield this(constructor, true); prop; [15,16,17,18].map(eval, __count__ /= undefined) ? (1.2e3)[1e81] : [true].some((1 for (x in []))) == true) (__parent__) = void this;");
tryItOut("true['__iterator__'] = __iterator__;");
tryItOut("/*for..in*/for(__parent__ = <bbb xmlns:ccc=\"eval(\"<y><z/></y>\", <><x><y/></x></>\f)\"><ccc:eee></ccc:eee></bbb>.(null) in <bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb>) null");
tryItOut("if(0.__lookupSetter__(\"__iterator__\")/*\n*/) { if ((let __count__ = window, __noSuchMethod__)) {{} } else return;}");
tryItOut("{/*infloop*/for(++1.3; (prototype: <><><x><y/></x></></>)[[,,]]; +<x/>[(__iterator__.(3.141592653589793))]) (<x><y/></x>);Math.sin }");
tryItOut("/*infloop*/for(();  /x/g .__noSuchMethod__ = <x><y/></x>; 0/0 >>>  /x/  & this.__parent__) { /x/ ;/*infloop*/for(const __proto__ = <x/>; undefined; <x/>) return <x><y/></x>; }");
tryItOut("yield (function (__proto__, constructor) { return <><x><y/></x></> } (#3={a:#3#}));gc()");
tryItOut("if(let __noSuchMethod__ = false, __count__ = getter ? (new this(<y><z/></y>, <y><z/></y>)) : (new \f(new Function)(((function(q) { return q; }).call(<><x><y/></x></>, ))))) {export *; } else if(constructor+= \"\" ) {var prop, <x><y/></x> = this; } else return;");
tryItOut("if(new (\f((function (__parent__) { [], constructor = <y><z/></y>; } ).call((function ([y]) { })(), )))()) { if ( @ (new [z1])(/ === constructor.(RegExp())) {gc()return constructor; } else const constructor, __proto__;}");
tryItOut("with({}) { yield <><x><y/></x></>; } ");
tryItOut("yield /*infloop*/do {break M;yield; } while(<y><z/></y>);.isPrototypeOf(0.1).__lookupSetter__(\"prop\");");
tryItOut("\nexport *;\n");
tryItOut("L:if(prop.__noSuchMethod__ = new ( \"\" )(<x><y/></x>)) {setter{} } else {throw <x/>; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (let (__parent__, __iterator__ =  '' ) new (({}).__lookupGetter__).apply()) in window) return <x><y/></x>;");
tryItOut("/*for..in*/for(const __count__ in ((Function)((this.__defineSetter__(\"__count__\", null))))){var __parent__, __count__ = 0.1;let(__proto__ = ((p={}, (p.z = false)()))) ((function(){/*for..in*/L:for(var each = *::* in this) {var prop = 1e-81, constructor = <x><y/></x>;\r__count__; }})()); }");
tryItOut("let __iterator__, prototype");
tryItOut("/*infloop*/do export *; while(<y><z/></y>);");
tryItOut("with({__noSuchMethod__: eval(\"*\", <x><y/></x>.throw( '' ) -= ( /x/g .__defineGetter__(\"prototype\", new Function)))})L: {__parent__; }");
tryItOut("/*infloop*/for(var prototype = ({ ;: ({ __proto__: ({ __noSuchMethod__: __noSuchMethod__ }) }) }) = (export *); this.zzz.zzz; (new (__noSuchMethod__)().isPrototypeOf(-1))) { }");
tryItOut("let(__parent__, __parent__ = (false(this, this))) { this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("if( & (((<><x><y/></x></>).__defineSetter__).call).call(try { ; } catch(__proto__ if ~<><x><y/></x></>) { yield; } , __iterator__ = __iterator__)) for(let y in []); else  if ((__parent__ = this.zzz.zzz)) {M:while((<x><y/></x>) && 0)var __parent__ = prototype;(<x><y/></x>).__defineSetter__ } else {if(*::* |  /x/g ) {{return <x><y/></x>;(window).__defineSetter__ } } else  if (<><\fbbb xmlns=\"<x><y/></x>\"> </bbb><\f/>)  else ; }");
tryItOut("/*for..in*/L:for(let [__proto__, __parent__] = \nundefined |= <x><y/></x>\n >>= new (({}).hasOwnProperty)() in (/a/gi)) yield <x><y/></x>;");
tryItOut("{}");
tryItOut("switch((__parent__ = undefined)(((constructor = <x><y/></x>).eval(__count__ = ({a1:1}))))-=(this.zzz.zzz)) { case 1: break; default: break; break; break; case 6: if(prototype) { if ( '' ) {export *; } else {export __noSuchMethod__; }}case (function(q) { return q; })(): case 6: break; break; case [15,16,17,18].sort(@foo, @foo): break;  }");
tryItOut("throw __count__;");
tryItOut("export __iterator__;");
tryItOut("L:if(new this) /*for..in*/L:for(const [__count__, \t__count__] = [,,z1] in 0x99) {(false);export prop; } else  if (((*::*)(__parent__)).__lookupSetter__(\"__count__\") ? 1.3.__noSuchMethod__ : (__iterator__ = <y><z/></y>.throw(constructor.__lookupSetter__(\"constructor\")))) {const constructor; } else return  /x/ ; const __noSuchMethod__;");
tryItOut("/*for..in*/for(__proto__.constructor in new Exception(<x><y/></x> =  /x/ , 4.)) {if(({ prototype: [, __count__, __iterator__, , ], __proto__: ({ __noSuchMethod__: __count__ }) }) =  /x/ ) {yield *;#1=[#1#]; } else  if ((-0)) /a/gi else {var __noSuchMethod__, constructor = constructor; } }");
tryItOut("L:while((<y><z/></y>) && 0)gc()");
tryItOut("\texport __proto__;if(constructor.__parent__) {break ;(function ([y]) { }); } else  if ((<x><\fy/></x>.unwatch(\"prototype\"))) {const constructor, __noSuchMethod__ = <x><y/></x>;__iterator__ = <><x><y/></x></>; } else yield false;");
tryItOut("/*for..in*/for(let [__proto__, __iterator__] = ( /* Comment */@foo) in this) {yield true; }");
tryItOut("throw StopIteration;");
tryItOut("this.zzz.zzz;");
tryItOut(" const __iterator__;");
tryItOut("if(<x><y/></x> ? this : 0) { if ((prop = true)) {let prototype = <x/>, __iterator__;Function } else window;}");
tryItOut("if(({ get __noSuchMethod__ constructor (__iterator__, __count__), prototype: 0x99 })) {([,,z1]); }");
tryItOut("switch(<x/>) { default: return *::*;break;  }");
tryItOut("{continue ; } const __parent__;");
tryItOut("/*for..in*/L:for(var __parent__ = <><x><y/></x></> in arguments) ;");
tryItOut("prototype");
tryItOut("L:while((<><ccc:ddd> </ccc:ddd></>.isPrototypeOf((__proto__.(undefined)).__defineSetter__(\"__noSuchMethod__\", ( \"\" ).__defineSetter__))) && 0)throw yield  /x/ ;");
tryItOut("(<x/>);");
tryItOut("L: {((-0));yield  /x/ ; }");
tryItOut("/*infloop*/for(var prop = *; <>\f<x><y/></x></>; <x/>) {yield window;; } const constructor;");
tryItOut("/*for..in*/for(\fconstructor in @foo) (<><x><y/></x></>);");
tryItOut("");
tryItOut("{gc() } const __noSuchMethod__;");
tryItOut("{with(0)export __proto__;/*infloop*/while(((uneval(<><x><y/></x></>)))){yield <x/>;export *; } }");
tryItOut("let(__noSuchMethod__ = eval(\"(yield (p={}, (p.z = __parent__)()))\", this.eval( /x/g )), prototype) ((function(){return;})());");
tryItOut("/*infloop*/M:while(<x/>)function(y) { yield y; yield;; yield y; }");
tryItOut("let(__iterator__) ((function(){for(let y in []);})());");
tryItOut("M:if(<x><y/></x>--.__defineGetter__(\f\"constructor\", function  __iterator__ () { return window.__defineSetter__(\"__iterator__\", function (__parent__)<x><y/></x>) } ).propertyIsEnumerable(\"__proto__\")()) { if ((constructor = true) .@x:: ( /x/g (<><x><y/></x></>))) for(let y in [5,6,7,8]) let(__proto__, __noSuchMethod__) ((function(){prototype = prototype;})()); else {const __iterator__ = <y><z/></y>;; }}");
tryItOut("/*for..in*/for([constructor, constructor] = ({__parent__ getter: (new Function).apply, __proto__: (constructor.__noSuchMethod__ getter= __iterator__) }) in 1.3) gc()");
tryItOut("{break M\nM:with(__count__){gc()const ; } }");
tryItOut("return <y><z/></y>;\n/*for..in*/for(var \f(__noSuchMethod__) in ({__noSuchMethod__ getter: (1 for (x in [])), __count__ getter: /a/gi }\t)) {var __parent__ = prototype\nexport *;let prototype = true, constructor }\n");
tryItOut("{{}{export *; } }");
tryItOut("/*infloop*/for(var ({ __parent__: <!--yy--> }) = (prototype = ({ prop: __noSuchMethod__ })) ? [, constructor, __count__, __parent__] = __parent__.__defineGetter__(\"__proto__\", Function) :  ''  && __noSuchMethod__; prop = (prototype = (function ([y]) { })()); Math.sin()) var __iterator__;");
tryItOut("switch(this) { default: {}break;  }");
tryItOut("/*infloop*/do 5.0000000000000000000000; while(__iterator__.yoyo([[]]) in window);");
tryItOut("prop = <><x><y/></x></>\nreturn;");
tryItOut("/*for..in*/L:for <xxx {prototype}={ /x/ } />('__parent__(<>\t<xxx {({ prop: __iterator__, prototype: __proto__ })}={(Number())} /></>) in ((({}).hasOwnProperty(__count__ = <><x><y/></x></>)))constructor{with(prop =  \"\" ){[1,2,3,4].map }let prototype; }");
tryItOut("if(new Array(((<y><z/></y>)()))) /*for..in*/for(const get in (('haha'.split)((this.__defineSetter__(\"__parent__\", (1 for (x in []))))))){yield; } else {throw <x><y/></x>; }");
tryItOut("export constructor;");
tryItOut("with((new <x/>.__noSuchMethod__ = <><x><y/></x></>)--)throw this;");
tryItOut("/*infloop*/for(constructor = <><x><y/></x></>; constructor = this;  /x/  >>>=null) {yield (-1); }");
tryItOut("/*infloop*/do {({a2:z2});gc() } while(#0=<><x><y/></x></>);");
tryItOut("/*for..in*/for(const [prototype, prototype] = <><x><y/></\tx></> in __count__) yield;");
tryItOut("return  { /*infloop*/do Math.pow while( '' )\n } ;");
tryItOut("/*infloop*/while([ /x/ .yoyo(function(id) { return id }\t) !== __iterator__, __iterator__ for ((__parent__) in window\n) if (window)]){return <x><y/></x>;; }");
tryItOut("yield;\n\n");
tryItOut("/*infloop*/while(constructor: window.*)yield <x/>;");
tryItOut("if((( /* Comment */#1=[#1#]).unwatch(\"constructor\"))) {const __parent__; } else  if (<><x><y/></x></>.@foo.constructor >>> (new __parent__ =  '' ((this)))) while((<x/>--) && 0)let constructor = -3/0\nthrow <x><y/></x>; else {/*infloop*/do {gc(); } while(<x/>); }");
tryItOut("with({}) { ; } \n");
tryItOut("switch( '' ) { case <x><y/></x>: break; default: break ;case  /x/ : export *;break; break; case -3/0: case 8: break;  }");
tryItOut("let (__iterator__ = (yield \n__iterator__), constructor = ((1 for (x in []))).call(constructor.@*, <y><z/></y>.watch(\"__iterator__\", 5.0000000000000000000000), __noSuchMethod__)) { /*for..in*/for(__iterator__ = yield [1,,] * window in true) (0x99.__defineGetter__(\"prop\", (gc).apply)); }");
tryItOut("if((new Function(__parent__))) [({ constructor: __proto__, __noSuchMethod__: constructor }), ] = __parent__; else  if (((#1# for (constructor in prop)))(new (1 for (x in []))(<xxx {prop}={<><x><y/></x></>} />.(#1#), eval(\"export *;\", __proto__))) <<  '' ) if(new  \"\" ( /x/g , <x/>)) {var constructor = <><x><y/></x></>; } else  if ((@foo = this)) {throw prototype;4.; }");
tryItOut("throw StopIteration;");
tryItOut("export *;");
tryItOut("/*for..in*/for(const x::__parent__ =  \"\"  ? new ((<><x><y/></x></> in __proto__ setter: 'haha'.split))(#1# > undefined,  \"\" ) : typeof __proto__+=__proto__(prop = false, <x/> -= <x><y/></x>) in 'fafafa'.replace(/a/g, 'haha'.split)) {/*infloop*/for(((p={}, (p.z = <y><z/></y>)())); __parent__ =  /x/ //h\n; constructor -= *::* ? [,] : export prototype) __iterator__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(let __parent__ = this in null) {export __count__;export *; }");
tryItOut("with({}) *::* = constructor;");
tryItOut("let (__noSuchMethod__ = prop.eval(window), __parent__ = __proto__) { throw <y><z/></y>; }");
tryItOut(" const __noSuchMethod__;");
tryItOut(" const prop;");
tryItOut("/*infloop*/for(const prototype; this >>>=<><x><y/></x></>; ( /* Comment */<x><y/></x>)) yield;");
tryItOut("if(({a1:1}).constructor * __parent__) { if (([1.3].filter((function(q) { return q; }).call))) return; else var __iterator__, __count__;}");
tryItOut(";\nyield;\n");
tryItOut("yield this; const prop;");
tryItOut("/*infloop*/M:do continue ; while(<><x><y/></x></>); const prop\nprototype = @foo");
tryItOut("if((\t((<x><y/></x>)()).__noSuchMethod__)) {__parent__, __count__; } else  if ([,]) yield;");
tryItOut("return false();");
tryItOut("[1]");
tryItOut("return;\nyield\n\n");
tryItOut("/*for..in*/for(var __count__ = (1e81.__defineSetter__(\"prototype\", ({}).hasOwnProperty)) in function ([y]) { }) {return; }");
tryItOut("/*infloop*/do {return [z1];; } while(<x/>);");
tryItOut("export *\nlet (__count__) { yield; }");
tryItOut("let(prototype, __iterator__) ((function(){const prototype, __count__;})());");
tryItOut("let(prototype) { with({}) for(let y in [5,6,7,8]) throw Math.sin;");
tryItOut("let (__proto__, __noSuchMethod__) { continue L; }");
tryItOut("/*infloop*/while(prototype.__count__.__parent__){return <x><y/></x>; }");
tryItOut("if(((-arguments) % @foo.yoyo( /x/g ) !== prop.__proto__ = 5.0000000000000000000000) / (~[z1])) { if ((__parent__ = <x><y/></x>)) {{}if(<><x><y/></x></>)  }} else {\t if (*::*) }");
tryItOut("/*infloop*/for(var __iterator__;  /* Comment */this; ++this |= this .@x:: <x/>) let __proto__ = <x><y/></x>;\nreturn <><x><y/></x></>;\n\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in undefined) {export *;new Function }");
tryItOut("/*for..in*/M:for(var prop = ([11,12,13,14].sort) in -- '' ) ");
tryItOut("/*infloop*/while(((new (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.throw(<y><z/></y> + <x><y/></x>))((yield  /* Comment */window.eval(this))(this[window], constructor = undefined//h\n), prop)) instanceof (#2=({constructor: __noSuchMethod__}) ? (eval(\"*::*\", <y><z/></y>) << this) : (((undefined.valueOf(\"number\"))(new (function(q) { return q; })(this))) instanceof <x/>))))/*for..in*/for(var __noSuchMethod__ in (((<y><z/></y>).call)(<xxx>{prop}</xxx>)))/*infloop*/for(var prototype = @foo; <y><z/></y>; 4.) break ;");
tryItOut("/*infloop*/L:for((constructor-=this.hasOwnProperty(\"function::__parent__\")); ({__noSuchMethod__: new ((this).watch)() }); ({constructor: __count__ })) {/*infloop*/\tfor(let __iterator__ = false; <y><z/></y>; window) (this);__iterator__;\nlet prop = undefined;\n }");
tryItOut("\n");
tryItOut("/*infloop*/do prop = <x><y/></x>; while( \"\" );");
tryItOut("(3.141592653589793)\nif(@foo) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in *::*) throw window; }");
tryItOut("/*infloop*/L:for(var [, ({ __noSuchMethod__: ({ __iterator__: ({ __iterator__: ({ prop: __parent__, __count__: __proto__ }), constructor: ({ __parent__: prototype, prototype: __noSuchMethod__ }) }), prop: __count__ }), __iterator__: [] }), ] = \n__iterator__%=\r; __count__ = (new (function  prototype (default: /*infloop*/for(prop =  \"\" ; null; <><x><y/></x></>) {; }case 4: break; return;break; case 2: {}break; ) { yield __parent__ } ).apply([,,z1])); constructor >> this) {break ; }");
tryItOut("while((((p={}, (p.z =  \"\" )()).__lookupGetter__(\"prop\"))) && 0){M:do return <y><z/></y>; while((#1=({__iterator__: (<><x><y/></x></> ? <y><z/></y> : <x><y/></x>)})) && 0);/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype.__count__ in yield __parent__) yield this; }");
tryItOut("/*for..in*/L:for(var [constructor, prototype] = __noSuchMethod__.__lookupGetter__(\"__count__\") in new (4.)(__count__)) throw prototype; const constructor;");
tryItOut("M:while(((@foo.@*)) && 0){gc() }/*infloop*/M:for(const __iterator__; <><x><y/></x></>; <>/*\n*/<x><y/></x></>) {gc()export function::__noSuchMethod__; }");
tryItOut("L: throw prototype;");
tryItOut("let (prototype = arguments) { var __noSuchMethod__ = __parent__; }");
tryItOut("/*for..in*/for(let prop in ((Math.sin)(<y><z/></y>)))return (<y><z/></y>.eval(<y><z/></y>));");
tryItOut("{}");
tryItOut("/*infloop*/while(true.valueOf(\"number\") instanceof [15,16,17,18].filter((<x/>).__defineSetter__, this)){let (prop, constructor) { yield (__noSuchMethod__.__lookupGetter__(\"constructor\")); }/*for..in*/for(__noSuchMethod__ = 'fafafa'.replace(/a/g, ( /x/ ).watch) in window) {} }");
tryItOut("let __iterator__;L:with((<x/> .@*:: <x><y/></x>\t)){; }");
tryItOut("for(let y in []);");
tryItOut("yield [z1,,];");
tryItOut("let (prototype, __count__) { {} }");
tryItOut("continue ;yield prototype\n");
tryItOut("M:if(({ __parent__: ({ prop: __count__ }), function::__proto__: ({ constructor: [__parent__, prop, __parent__, , prop], __noSuchMethod__: prototype }) }) = <><{__proto__}>yyy</{__proto__}>yyy</>)  else /*infloop*/L:while(1e+81){const prop = false; }");
tryItOut("{<><x><y/></x></>;switch(<x><y/></x>(prop, window)) { default: break;  } }");
tryItOut("{}\n");
tryItOut("return\n/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__.__iterator__ in  \"\" ) {gc() }");
tryItOut("1e-81;");
tryItOut("L:if((+prop)) { if ((<><x><y/></x></>)()) {throw [[]]; } else {throw @foo;yield *::*; }}");
tryItOut("L: {let (__parent__, prototype =  \"\" ) { export *; } }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((function  prop () { yield <x/> } )(eval(\"break L;\", *))))@foo");
tryItOut("{return;\nvar __parent__, __proto__ = <x><y/></x>;\n/*infloop*/for(let prototype; __count__; <x><y/></x>) {yield; } }");
tryItOut("/*infloop*/while(constructor){export *;{} }");
tryItOut("{return undefined;yield <><x><y/></x></>; }");
tryItOut("M:if(((window).__defineSetter__).call( \"\" , )) { if ((typeof prototype)) yield;} else {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in <y><z/></y>) gc()");
tryItOut("if(({__parent__ getter: new Function,  get prop __parent__ (let, prop) { yield <><zzz>Object([,,z1], <x/>)</zzz>\t</> }  })) ");
tryItOut("/*infloop*/do {(prop).apply } while(<x/>);");
tryItOut("M:if(#1=({__iterator__: \t@foo})) { if (__count__ = <><x><y/></x></> & <><x><y/></x></>) {undefined;export __count__; }} else return this;");
tryItOut("throw  /x/g ;");
tryItOut("/*for..in*/M:for(let __parent__ in <y><z/></y>) {(<x><y/></x>); }");
tryItOut("if(([15,16,17,18].some(function  __parent__ () { return * } , function ([y]) { }.__lookupGetter__(\"__noSuchMethod__\")) for (__iterator__ in  \"\" ) for ((__iterator__) in prop) for (this, <><x><y/></x></> in  \"\" ))--) { if (__proto__|=arguments) {;/*for..in*/for(prototype.__proto__ in ) {export __parent__; } } else return;}");
tryItOut("/*infloop*/while(@foo){ }");
tryItOut("M:if((p={}, (p.z = <><x><y/></x></>)())) {{}constructor = 033; } else  if (()) let constructor = <x><y/></x>;");
tryItOut("try { prototype = __proto__; } finally { prototype.__proto__ = prop; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (p={}, (p.z = <y><z/></y>)()) in 'fafafa'.replace(/a/g, 'haha'.split)) {\fyield 'fafafa'.replace(/a/g, function(y) { yield y; continue M;; yield y; });L:switch(<x><y/></x> > window) { case 7: case (<x><y/></x> >>= new ((new Function(\"break M;\")))(*)): case (<><x><y/></x></> .@*::  \"\" ): default: undefined; } }");
tryItOut("(__count__.__proto__) = __parent__;");
tryItOut("switch((function(y) { yield y; ; yield y; }).call( '' , )) { case 0: return __noSuchMethod__;break; M:if((function ([y]) { })()) { if (<x/>)  else yield;}break;  }\n/*for..in*/for(var prototype in *::*) {continue M;{} }");
tryItOut("if((\n(new <x/>))) { if (({ constructor: let, __proto__: [constructor] }) = this.zzz.zzz) gc()}\f else __parent__\nreturn function ([y]) { }\nreturn;");
tryItOut("with((\t__count__ = undefined).@foo)export *;");
tryItOut("/*for..in*/L:for(var constructor.__noSuchMethod__ in (((({}).hasOwnProperty).watch)(__proto__.prototype = (/a/gi).call((<x><y/></x> @ @foo), )))){while((<x/>) && 0){export __noSuchMethod__; /x/g ; }throw 1e4; }");
tryItOut("export 1.3\n/*infloop*/for(__iterator__ = @foo; <><x><y/></x></>; <x><y/></x>\f) ;");
tryItOut("throw prop;");
tryItOut("let (__parent__) { true }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in *::*) export *;");
tryItOut("/*infloop*/for(let __noSuchMethod__; __count__ && __iterator__;  /x/g ) {(window);export *; }");
tryItOut("if(this) {return; } else  if ((.2 .. *::*)) {return; }");
tryItOut("throw ({ constructor: ({ __noSuchMethod__: ({ constructor: /*\n*/({ __noSuchMethod__: <x><y/></x>yyy, __parent__: ({ prop: < }) }), __parent__: constructor }) }), constructor: [constructor, ({ constructor: __parent__, __iterator__: ({ prototype: __parent__, constructor: __proto__ }) }), , , ({ __proto__: ({ __proto__//h\n: ({ __noSuchMethod__: prototype, __noSuchMethod__: constructor }), prop: __noSuchMethod__ }) })] });");
tryItOut("return; const prototype;");
tryItOut("let (__count__ = (eval(\"{}\", ((1 for (x in []))).call(__iterator__: (constructor.yoyo(<><x><y/></x></>)) & <><x><y/></x></>, 3/0)))) { ([z1,,]).__defineSetter__ }");
tryItOut("throw prototype;");
tryItOut("switch(<x/>) { case 6: break; default: case null: break; case 5: ;break; case  /x/g : (<><x><y/></x></>).__defineSetter__break; __iterator__; }");
tryItOut("let ((function () { yield constructor } ).call) { throw *::*.valueOf(\"number\"); }");
tryItOut("if((eval(\"const __parent__ = delete;\", 1e4).constructor)) /*for..in*/M:for(const constructor in ((gc)((window = var __count__ = <><x><y/></x></>;.valueOf(\"number\")))))let constructor, __iterator__; else  if ((new Exception())) return; else {/*\n*//*for..in*/for(const __parent__ = 0.1 in this) var __count__; }");
tryItOut("return (1.3.throw( '' ));");
tryItOut("if(prop) { if ((#0=[<><>yyy</></>])) {throw 3/0; } else export *;}");
tryItOut("switch((\t(yield (p={}, (p.z = this.__defineGetter__(\"__iterator__\", (constructor).__defineSetter__))())))) { case <bbb xmlns=\"[<y><z/></y>]\">constructor = * </bbb>: {;const prop, __iterator__ = *::*; }break;  }");
tryItOut("{yield;gc() }");
tryItOut("break L;");
tryItOut("{export __noSuchMethod__; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:do {/*for..in*/for(var __proto__ = <><x><y/></x></> in -3/0) {yield;return; } } while(#2=({[]: Date(\nfalse, <x/>[ \"\" ])}));");
tryItOut("let (__noSuchMethod__ = (yield function ([y]) { }.*)) { if((1e81 > <y><z/></y>) || ( /* Comment */true)) { if (( /* Comment */__proto__.constructor setter= (<x><y/\t></x>).__defineSetter__)) {export *;gc() }} else {} }");
tryItOut("/*for..in*/for(const  \"\" [prop]['__count__'] in ((new (null)(<x/>, 0/0))(({constructor getter: /a/gi, __noSuchMethod__:  /x/g  :: (\n(function ([y]) { })()) })))){__iterator__; }");
tryItOut("with({}) { export *; } ");
tryItOut("({}).hasOwnProperty const __iterator__;");
tryItOut("export *;");
tryItOut("/*for..in*/for(var __proto__//h\n in ((function  constructor ()this)(<x><y/></x>))){let prop = case 0x99: yield;default: case __proto__: __proto__;break; case 6: ;yield <x><y/></x>; }");
tryItOut("if(<y><z/></y>\n) { if (arguments ? undefined : <x><y/></x>) export __parent__; else {M:while(((yield (__count__))\f ? [z1] * __noSuchMethod__ : *::* :: 5.0000000000000000000000) && 0){gc()(*::*); } }}");
tryItOut("L:do {/*for..in*/for(const __noSuchMethod__ = ([[[]] for (__parent__ in <x><y/></x>)]) in <x><y/></x>) continue ;/*\n*/ } while((<y><z/></y>.valueOf(\"number\")) && 0);");
tryItOut("if(({ __count__: ({ __count__: __proto__, __noSuchMethod__: __parent__ }), __proto__: ({ constructor: prototype }) }) = <x><y/></x>) {prototype, prototype = ({prototype: <><x><y/></x></>,  set __iterator__() { return <><x><y/></x></> }  }) === __proto__;;\f } else do  while((true) && 0);");
tryItOut("/*for..in*/for(const __parent__ in (([[1]])((\n[,]).call(__iterator__ = __parent__, ))))export prototype;");
tryItOut("L:do /*for..in*/for(let __parent__ =  in [[1]]) continue L; while((__proto__.__parent__ = this < <><x><y/></x></>) && 0);");
tryItOut("yield;");
tryItOut("{<x/>;var __parent__ =  '' ; }");
