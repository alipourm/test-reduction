tryItOut("L: {; }");
tryItOut("/*infloop*/L:for( /x/g ;  '' ; __noSuchMethod__) {export __parent__;yield; }\n");
tryItOut("/*for..in*/for(const __count__ in [15,16,17,18].sort([1,2,3,4].map, (true for each (prototype in (-1))))) {;\tif(+new (true)( /x/ , <><x><y/></x></>)) { if (({ get __iterator__ __iterator__ () /x/g  })) /*infloop*/for(var __proto__; @foo; -1) {let __parent__ = function(id) { return id }, __iterator__;continue M; } else } }");
tryItOut("/*for..in*/for(const (__proto__)(window) in prop setter: *) if(null) export *; else  if (window) ");
tryItOut("throw StopIteration;");
tryItOut("return <><x><y/></x></>\n");
tryItOut("switch\t((function ([y]) { })()) { case ((<><x><y/></x></>.__defineGetter__(\"__proto__\", /a/gi)).hasOwnProperty(\"__count__\")):  }");
tryItOut("if((this.zzz.zzz)) return; else  if (prop = prop) yield; else {yield;yield; }");
tryItOut("if(<y><z/></y>) {gc() }");
tryItOut("if(eval(\";\", new Math.pow(<x><y/></x>, <y><z/></y>))) { if (<><xxx {__noSuchMethod__}={false} /></>) export __noSuchMethod__;} else {export *;return; }");
tryItOut("M:if((undefined)) {undefined; } else export *; const prototype;");
tryItOut("/*infloop*/for(__count__; *; __iterator__) var __parent__, __parent__ =  '' ;");
tryItOut("/*for..in*/for(var constructor in <x/>)  const __proto__;");
tryItOut("do {(window); } while(((true).watch(prototype, __proto__)) && 0);");
tryItOut("export __parent__;");
tryItOut("/*infloop*/for(this; [[]]; function::__parent__) {}");
tryItOut("(/a/gi).call\r const prototype;");
tryItOut("switch(new (new Error( \"\" , ([] == <><x><y/></x></>)) ? yield ( \"\" ) : false)((eval(\"+this ? (-0) : <><x><y/></x></>\", Exception()))).prop) { default: break; case [null].some(function  __proto__ ()new Date()): M:switch(__noSuchMethod__ =  /x/g ) { default: break;  }/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in -0) {{}continue M; }break; break; case 3: break;  }");
tryItOut("do gc() while((<><x><y/></x></>.@foo) && 0);");
tryItOut("var prototype, __noSuchMethod__ = __noSuchMethod__; const __noSuchMethod__;");
tryItOut("/*infloop*/for(const ({ prop: ({ __parent__: __iterator__ }) }) = (__noSuchMethod__.__parent__ = this.@*) ==  if (\n1e-81); constructor; __noSuchMethod__ = this - (prop) > constructor || 3.141592653589793) {continue ; } const (prop = get)(({prop: <x/> <<= false}));");
tryItOut("with({constructor: eval(\"<>*</>\", __noSuchMethod__|=<><x><y/></x></>)})yield <x><y/></x>;");
tryItOut("L:do /*infloop*/for(({ __noSuchMethod__: prop }) = (prop = true);  ''  != <y><z/></y>; <y><z/></y>) {return; } while((<y><z/></y>.yoyo(prop//h\n = undefined)) && 0);");
tryItOut("{if((this.zzz.zzz)) export *; else {export prop; } }");
tryItOut("<bbb xmlns=\"[*::* || null++]\"></bbb>");
tryItOut("for(let y in [5,6,7,8]) yield __parent__ *= this;");
tryItOut("/*infloop*/for(let __proto__; undefined ..  /x/ ; new prop) {let constructor = *::*; }");
tryItOut("continue L;\nswitch(prototype = <><x><y/></x></>.__iterator__) { case <><bbb xmlns=\"null\"><ccc:ddd><ccc:ddd><ccc:ddd><x><y/></x><!--yy--></ccc:ddd></ccc:ddd></ccc:ddd></bbb></>: throw __count__;break; if( /x/g ) break ; else  if (1e+81) {const __iterator__, __parent__;{} }break; default:  }\n");
tryItOut("{\f }");
tryItOut("if((prototype.__count__)) with({}) { throw __count__; } ");
tryItOut("/*infloop*/for(let prototype; (__parent__.__iterator__ setter= (1.2e3).watch); <y><z/></y>) gc()");
tryItOut("let (set) { export __iterator__; }");
tryItOut("/*for..in*/for(let prop in ((function () {  } )(<><x><y/></\tx></>))){gc() }");
tryItOut("Math.pow const __parent__;");
tryItOut("/*infloop*/L:for(const ({ __iterator__: prototype }) = (typeof this); ((<><x><y/></x></>).__defineSetter__).call; (({a1:1}) for (__noSuchMethod__ in __count__))) {export __iterator__;continue ; }");
tryItOut("yield\ntry { let __iterator__, prop = <><x><y/></x></>; } catch(__noSuchMethod__ if (function(){gc()})()) { return; } finally { export __proto__; } ");
tryItOut("/*infloop*/for((p={}, (p.z = #0=({__proto__: __parent__}))()) += [<><x><y/></x></>].filter('haha'.split).watch(\"prototype\", (1 for (x in []))); __count__|=(#2=<y><z/></y>); (+<x><y/></x>)) {}");
tryItOut("if(new ( \"\" .prop = <x><y/></x>)(__parent__.isPrototypeOf(this))) { if (this.__defineSetter__(\"__count__\", 3)) \t{export *;\nreturn;\n\rprop = [[]]; } else continue ;}");
tryItOut("do {new (prototype % @foo)({gc() }, <x><y/></x>);; } while((*) && 0);");
tryItOut("if(<><x><y/></x></>) {} else  if ({}) ;");
tryItOut("do /*infloop*/for(var ({ __noSuchMethod__: prototype, __iterator__: try { {} } catch(__proto__) { (constructor); }  }) = prop >>>=<x><y/></x>\t; new @foo( /x/ );  /x/  , <x/>) export *; while((yield <x><y/></x>.@*) && 0);");
tryItOut("L: {export *;return window; }");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, prop] = window in <y><z/></y>) {return;break ; }");
tryItOut("return (this.__defineSetter__(\"prototype\", function () { __parent__, constructor = false; } ));");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = ({yield <x/>;(4.); })[window].propertyIsEnumerable(\"constructor\") in eval(\"<x/>\", __iterator__ :: <><x><y/></x> constructor</>)) let (__proto__ = <x><y/></x>, __parent__) { yield; }");
tryItOut("throw window;");
tryItOut("if((arguments)) {let (constructor =  /x/ ) { yield; }if(<x/>) {return undefined;var x::__proto__ =  /x/g , prop = <x/>; } else {gc() }\nreturn <x><y/></x>; } else  if (()) return function(id) { return id }; else /*for..in*/for(const __proto__ in (((false <= 3/0).watch)(( /x/  -=  \"\" ))))yield this;true\n");
tryItOut("if(<y><z/></y>) { if ((Number(return))) if(<><x><y/></x></>) {yield <x/>; } else true} else {export __proto__;const __noSuchMethod__; }");
tryItOut("M:if(__noSuchMethod__) { if (<y><z/></y>) {__parent__;<><x><y/></x></>; }} else {var __proto__, prop; }break L;");
tryItOut("switch(this.zzz.zzz) { case 2: throw #1#;break; default: break; case false.__noSuchMethod__ = undefined: break;  }");
tryItOut("{do throw  /x/g ; while((</*\n*/><x><y/></x></>) && 0); }");
tryItOut("if((<x/> >>= arguments))  else  if (window) {{} }");
tryItOut("let (prototype = [15,16,17,18].map((1 for (x in [])), <x><y/></x>), prototype) { const __noSuchMethod__; }");
tryItOut("while(((<x><y/></x>( \"\" )) :: prototype = #3={a:#3#}) && 0)({}).hasOwnProperty");
tryItOut("/*for..in*/for(var __iterator__ =  ''  in {}) ");
tryItOut("{} const __parent__;");
tryItOut("L:if(prototype.watch(\"__count__\", Function)) {{}(1 for (x in [])) }");
tryItOut("{(-1); }");
tryItOut("let (prop = 0.1) { throw (); }");
tryItOut("if(@foo['prototype']) {yield;export *; } else let __parent__, prototype;\nlet __parent__, __noSuchMethod__;\n");
tryItOut("prototype.__noSuchMethod__ setter= function  constructor (__iterator__) { return <x><y/></x> } ");
tryItOut("while(((__count__.__proto__)) && 0){var __noSuchMethod__; }");
tryItOut("__iterator__ = __parent__;");
tryItOut("/*infloop*/L:while(~<y><z/></y>){return prop;/*infloop*/do gc() while(undefined); }\f");
tryItOut("/*for..in*/M:for(let  for (constructor in -3/0 .@*:: 0) for (prototype in <x/>) for each (__parent__ in <x><y/></x>) if (<x/>) = window ^= (function ([y]) { })() in <x><y/></x>) {export __count__; }");
tryItOut("with({__proto__: ([] = ((new Array((x::__noSuchMethod__.(null)), __count__: * - false === __noSuchMethod__ = false)) .. new Function()))}){}");
tryItOut("gc()#3={a:#3#};");
tryItOut(" const __iterator__;");
tryItOut("L:if((__count__ = prop.prototype)) { if ([11,12,13,14].filter) (prototype);} else {{} }");
tryItOut("if((gc)(*::*, undefined)) /*for..in*/for(let __noSuchMethod__ in (((new Function(\"undefined;\")))( /x/g .* *= ((constructor)[<x><y/></x>]))))(<x/>);");
tryItOut("__proto__(@foo) = prototype;");
tryItOut("let __iterator__ =  \"\" , prototype;\nthrow <x/>;\n");
tryItOut("/*for..in*/for(const __parent__ = [11,12,13,14].map in (__count__ =  \"\" )) while((prop = new String(window,  /x/g )) && 0)return <x><y/></x>;");
tryItOut("if(#1#) { if ( \"\" ) {export *; } else (get);}");
tryItOut("{if(prototype) { if (<><x><y/></x></>) export each;} else {gc()(<x><y/></x>); } }");
tryItOut("L: yield *;");
tryItOut("while((let __parent__, constructor = x::__count__;) && 0)throw <><x><y/></x></>;");
tryItOut("L: {let __parent__ = <x><y/\t></x>\f;{export constructor; } }");
tryItOut("(prop)\n");
tryItOut("if((({}).__lookupGetter__() >>> (eval(\"(#1=[*::*])\", let (__parent__ = window) <><x><y/></x></>)))) {{} const __iterator__;M:with(eval(\"<>case 0: const __proto__, __proto__;break; break; </>\", prototype) if (<x/>)){/*for..in*/for(var [setter, __count__]((yield this)) in <><x><y/></x></>) {; } } }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function(q) { return q; })((yield return <y><z/></y>;.@*)))){L:if(<><x><y/></x></>) { if (default: break; case 8: break; ) {throw <><x><y/></x></>; } else {break /*\n*/; }} }");
tryItOut("/*infloop*/do {<><x><y/></x></>; } while([({ __count__: [__iterator__, , ({ __noSuchMethod__: __iterator__, __parent__: null }), ({ prop: prop, constructor: __noSuchMethod__ })], __iterator__: ({ function::prototype: ({ prototype: constructor }) }) })] = (__proto__));");
tryItOut("{; } const __iterator__;");
tryItOut("if(@foo.__parent__ = @foo) {<x><y/></x>let __count__; } else (*);");
tryItOut("yield\n\n");
tryItOut("/*for..in*/Lfor([constructor, __parent__] = *::* in new eval()) if([[,]]) {return undefined;throw  /x/ ; } else  if (-1\n) {var __proto__, prop = undefined; }");
tryItOut("/*infloop*/M:do {switch(<x><y/></x>) { default: export *;var X;case 6: let __noSuchMethod__;break;  }var __proto__, __parent__; } while(__iterator__ = 1e+81);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let \nprototype in 1e4) (<y><z/></y>);");
tryItOut("/*for..in*/L:for(var ( '' )((prototype = __proto__)) in (p={}, (p.z = <><x><y/></x></>)())) {(1e+81)break L; }");
tryItOut("if([11,12,13,14].some) {let prop = <><x><y/></x></>, prototype; } else  if ((((uneval(<x><y/></x>))).__defineSetter__)(__count__.__lookupGetter__(\"prototype\") ^ [<y><z/></y> for each (* in <x><y/></x>)], constructor = [1,2,3,4].slice = null)) throw window;");
tryItOut("{}");
tryItOut("/*infloop*/M:for(-<x/>; __parent__; [11,12,13,14].filter) (#3={a:#3#});");
tryItOut("with({}) for(let y in [5,6,7,8]) let(__iterator__) { for(let y in [5,6,7,8]) return;");
tryItOut("let (prop = window, __proto__ = <y><z/></y>) { \nlet __count__, prop = false; }");
tryItOut("if(0.1.throw(<x><y/></x\t>)) {gc()__parent__ } else  if (function::constructor = <><x><y/></x></>) {(<x><y/></x>);<y><z/></y>; }");
tryItOut("switch(<><xxx {__parent__}={window || 1e4} /></>) { case 2: yield *;break;  }");
tryItOut("__count__ = this.zzz.zzz");
tryItOut("/*infloop*/do M:if(<x><y/></x>) { if (window) return; else yield;} while((uneval(<x/>)));");
tryItOut("setter = (<x><y/></x>.(*) ? (__iterator__ = this) : new  /x/ ( /x/g , <><x><y/></x></>)), __parent__ = (__noSuchMethod__.__iterator__ = @foo.isPrototypeOf((prop = window))) const __iterator__;");
tryItOut("if([z1]) {gc() } else throw @foo;");
tryItOut("/*for..in*/for(const prop = \t \"\"  in  /x/ ) {export prototype; }");
tryItOut("yield\nreturn <x/>;");
tryItOut("<><x><y/></x></> = __parent__;");
tryItOut("let (prototype = (\t\nconstructor.hasOwnProperty(\"prototype\"))) { yield; }");
tryItOut("switch(\t<x/>) { default: break;  }");
tryItOut("let (__noSuchMethod__ = (yield [((<x/>)())])) { ; }");
tryItOut("{M:with(/*\n*/ \"\" --)*::*;if(__count__ = <x><y/></x>) {while((__proto__) && 0);yield null; } else  if (__noSuchMethod__ = 0x99) return <x><y/></x>; }");
tryItOut("/*for..in*/for(let __count__ in ([1,2,3,4].slice)(<x><y/></x>, __proto__)) {; }");
tryItOut("return;\n/*infloop*/M:while(@foo){(__count__); }\n");
tryItOut("/*infloop*/for(__noSuchMethod__;  ''  / <xxx>{constructor}</xxx>; (\n1e+81 = constructor for each (__count__ in -0) for (constructor in __iterator__) if ( '' ))) gc()");
tryItOut("if(new ((0.1).__defineSetter__)([,,z1], *).throw(<y><z/></y>.isPrototypeOf(0))) { if ((*\n)[(('fafafa'.replace(/a/g, <x/>)) % (<x><y/></x>.@foo))]) {let (constructor) <x><y/></x>break L; } else yield;}");
tryItOut("if(this) prop else  if (<x><y/></x>) {continue ; } else {const __iterator__ = constructor; }");
tryItOut("yield [z1]\n/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in [1]) return;");
tryItOut("/*infloop*/for(let __count__; #3={a:#3#}; this.__defineSetter__(\"__iterator__\", function(q) { return q; })) L:if(function  prop (__count__, __noSuchMethod__) { export prototype; } (this)) <x/>; else throw __count__;");
tryItOut("");
tryItOut("/*for..in*/for(const prototype in ((false)([[1]]))){export *;/a/gi }");
tryItOut("/*infloop*/for(let constructor; function ([y]) { } += __count__.constructor;  /* Comment */(p={}, (p.z = __iterator__)())) M:do {<><x><y/></x></>;let constructor, function::__parent__; } while((this.throw(__proto__)) && 0);");
tryItOut("let prototype = 0.1;\nexport __noSuchMethod__;\n");
tryItOut("\f{/*for..in*/M:for(const prototype = __iterator__ = [1,,] in *::*) ; }");
tryItOut("/*infloop*/M:for(({ __noSuchMethod__: ({ constructor: ({ __count__: __count__ }), __count__: ({__count__: <>/*\n*/<x><y/></x></>, constructor: false }).watch(\"__parent__\", Function)['__count__'] }), __noSuchMethod__: prop }) = [__iterator__].filter(3) || prop = *::*; (this.zzz.zzz); [z1]) {}");
tryItOut("/*for..in*/for(const (function ([__noSuchMethod__, __noSuchMethod__, , , ], __parent__) { yield -3/0 } ).call(eval(\" /x/ \", [z1,,]), prototype = window ? [prototype].some(Function) : (@foo()), (1.3 >>= window)) in (([1,2,3,4].map)(<><x><y/></x></>.propertyIsEnumerable(\"__iterator__\"))))/*for..in*/for(const __proto__ in (<><x><y/></x></> %= __count__: undefined)) return <x><y/></x>;");
tryItOut("/*for..in*/for(const __parent__ in .2) { }");
tryItOut("if(*.__defineGetter__(\"function::prop\", function(y) { yield y; throw <y><z/></y>;; yield y; }).__defineSetter__(\"prop\", (function ([y]) { })() += <x><y/></x>)) {/*infloop*/L:for(const __noSuchMethod__ = #1=[#1#]; null; __noSuchMethod__) const __iterator__;function  __count__ () { {} }  } else  if ((yield true.__iterator__)) {{let __parent__; }/*infloop*/for(let ({ prop: __noSuchMethod__, prototype: __count__ }) = .2\f.__count__; this.zzz.zzz; return) {var __iterator__;var __parent__ = <><x><y/></x></>, __iterator__ =  '' ; } } else {if(prop+=3.141592653589793) {export prop; }([15,16,17,18].sort((function () { return <><x><y/></x></>; } ).call, <x><y/></x>)); }");
tryItOut("/*for..in*/for(var prototype in ((({}).hasOwnProperty)((yield <><x><y/></x></>)))){L: __iterator__, __noSuchMethod__ =  \"\" ;<x><y/></x>.valueOf(\"number\") }");
tryItOut("/*infloop*/for(prototype; <><x><y/></x></> = true; __noSuchMethod__ = [1,,]) { }");
tryItOut("");
tryItOut("for(let y in []); const __proto__;");
tryItOut("switch(__noSuchMethod__|=5.0000000000000000000000) { case 8:  }");
tryItOut("L: {export __noSuchMethod__;return window; }");
tryItOut("let (prototype = ) {  }");
tryItOut("L:switch(<x><y/></x>) { case this: export *;break;  }\nlet prop = 1e-81, __iterator__;");
tryItOut("if((/a/gi) ^= (uneval((<><x><y/></x></> ^  '' )))) { if (new Object((__parent__ = <x><y/></x>.(constructor)))) {yield;/*for..in*/for(let __noSuchMethod__ = (@foo & <x><y/></x>) in <x/>) export *; } else {(1 for (x in [])) }}");
tryItOut("this.zzz.zzz;");
tryItOut("if(prototype.propertyIsEnumerable(\"__noSuchMethod__\")) {throw [];gc() }");
tryItOut("do let (constructor, __parent__ = <><x><y/></x></>) { <ccc:ddd></ccc:ddd> } while((let (({ __noSuchMethod__: __count__ }) = (<y><z/></y>)()) this.zzz.zzz) && 0);");
tryItOut("with({}) let(({ __parent__: ({ prototype: __noSuchMethod__ }), __count__: ({ prop: __parent__, __count__: __noSuchMethod__ }) })) ((function(){__parent__ = __count__;})());");
tryItOut("return ((this.zzz.zzz));");
tryItOut("return;");
tryItOut("/*for..in*/L:for(const prop in this.__noSuchMethod__) /*for..in*/M:for([__iterator__, constructor] = (+@foo) in *) {; }");
tryItOut("L:while(((uneval(<><x><y/></x>\f</>.__lookupSetter__(\"prototype\"))).@*, __noSuchMethod__.(__noSuchMethod__)) && 0)/*infloop*/M:for(prop = true; 1e+81;  '' ) {yield 0/0;gc() }");
tryItOut("/*infloop*/while(<x><y/></x> *= <x><y/></x>)\nfor(let y in []);");
tryItOut("/*infloop*/do {export *; } while(0x99([,]));");
tryItOut("/*infloop*/M:do {L:with({prop: 1.3})throw this; } while((__parent__ = null));");
tryItOut("{constructor;while(( '' ) && 0){return; } }/*infloop*/M:for(let __proto__; <y><z/></y>; constructor) __proto__ = -3/0");
tryItOut("/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; <x/>) {; }{}");
tryItOut(";");
tryItOut("return arguments;\n/*for..in*/L:for(var __proto__ = <><x><y/></x></> in  \"\" ) {*;yield constructor; }\n");
tryItOut("/*infloop*/for([11,12,13,14].map;  /x/g ; prop) if([1,2,3,4].map /= __parent__ = eval(\"1.3\", window))  else  if (null) {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in window) {(*::*); }([1,,]); }");
tryItOut("switch((<><x><y/></x></> += function::__noSuchMethod__ >> new (function  function::constructor (__noSuchMethod__) { .2; } )(constructor >>> prototype) ? export prop : ({ prototype: ({ __parent__: constructor, __parent__: __noSuchMethod__ }) }) = (@foo) + (function  __noSuchMethod__ (__iterator__, __parent__) { yield this } )(new ((prop).__defineSetter__)()).propertyIsEnumerable(\"__count__\").yoyo(new ([] ? null : 3/0)))) { case /a/gi(window.watch(\"__noSuchMethod__\", Function)): default: if(__noSuchMethod__) {__proto__ = *; } else  if ( \"\" ) {const __proto__ = <><x><y/></x></>;__iterator__ = __noSuchMethod__, __noSuchMethod__ = <x><y/></x>; } else return;break; case 7: case <x/>.isPrototypeOf((({__iterator__: this,  get function::__noSuchMethod__(__parent__, __count__)__proto__ }))): break; break; case 4: /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in window) export *;case (({ set each(constructor) { yield <><x><y/></x></> }  })): break; <><x><y/></x></>, __parent__ = <y><z/></y>;break; case __proto__.__defineGetter__(\"constructor\", ({}).__lookupGetter__): yield   /x/g ;__count__ ; }");
tryItOut("/*infloop*/while(__proto__.@*)return;");
tryItOut("/*infloop*/while((new Number(__proto__)))__count__ = prop;");
tryItOut("throw __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in prop) {(1 for (x in []))const __proto__ = {}; }var __parent__ = <x><y/></x>;");
tryItOut("M:if([[1]]) export *; else throw <x><y/></x>;");
tryItOut("var prop = @foo, prop;");
tryItOut("with(([[1]] & <x/>))export __parent__;");
tryItOut("/*for..in*/for(__count__ in ((*)('fafafa'.replace(/a/g, (1 for (x in [])))))){false }");
tryItOut("do {break M;\n } while((('fafafa'.replace(/a/g, [1,2,3,4].map))) && 0);");
tryItOut("let (yield false;, __count__) { {} }");
tryItOut("with({}) try { for(let y in [5,6,7,8]) __parent__ = __iterator__; } finally { let(prototype = 'fafafa'.replace(/a/g, function (prop, constructor) { let __proto__; } )) ((function(){__noSuchMethod__ = __noSuchMethod__;})()); } ");
tryItOut("yield\n{}\n");
tryItOut("/*for..in*/for(var __proto__ = [,,z1] in [[1]] = [__noSuchMethod__, __iterator__, constructor]) {if(<x/>) { if (<y><z/></y>) return 4.;} else {yield; }L:if((((Math.sin).call(-0, <y><z/></y>, __proto__)))()) (*); else {} }");
tryItOut("/*infloop*/for(let __iterator__; false; prototype) {continue ; }");
tryItOut(";\n(\n /x/ ).watch\nexport __parent__;\n");
tryItOut("\n__count__, __parent__;\n");
tryItOut("if(true) { if (__noSuchMethod__) {gc()export prototype; } else var constructor, prototype;}");
tryItOut("/*infloop*/for(<x/>; <><x><y/></x></>; <><x><y/></x></>) {throw __iterator__; }");
tryItOut("{/*infloop*/for( /x/g ; [[15,16,17,18].filter(({}).__lookupGetter__, function ([y]) { }) ::  /* Comment */this]<x/> ? __proto__|=constructor : (new (null <<= yield window)())) {throw 0.1; } }");
tryItOut("if(<y><z/></y>.throw(<x><y/></x>) === .*) /*infloop*/L:while(1.3)export prototype;");
tryItOut("constructor = prop;");
tryItOut("with( /x/g ){yield this;(window); }");
tryItOut("/*infloop*/while(prop){/*for..in*//* nogeckoex bug 349964 */L: for  each(let ({a1:1}).__count__ in 033) {export __noSuchMethod__;var __count__ = constructor, prototype = [z1]; } }");
tryItOut("/*infloop*/for(3/0; --*::*; constructor = <x/>) {with({__noSuchMethod__:  /x/ })const __iterator__ = 0.1, prop; }");
tryItOut("M:\tif(<y><z/></y> *= -3/0) {} else {const __parent__; }");
tryItOut("throw [,,z1];");
tryItOut("export __parent__");
tryItOut("{return #1#; }");
tryItOut("/*for..in*/for(var [constructor, getter] = constructor = prop in <y><z/></y>) {export prop;let prop = prop; }");
tryItOut("with((this.propertyIsEnumerable(\"__count__\")))export prop;");
tryItOut("if(([z1].hasOwnProperty(\"__proto__\"))) gc() else  if ('fafafa'.replace(/a/g, Math.sin)) {; } else {export *;export __proto__; }");
tryItOut("switch\t((undefined if ([[]]))) { case <><x><y/></x></>.prototype = <x><y/></x>[(<x><y/></x> >= null)]: export *;default: /*infloop*/while((eval(\"constructor\", ({a2:z2}))).__count__){yield -3/0;let __noSuchMethod__, __count__; }break; case 1: return prototype;break; case \n(<x><y/></x> for (__noSuchMethod__ in #1=[#1#]) ^ <><x><y/></x></>)\n: case 2: gc()break; ( \"\" );case ( '' .valueOf(\"number\")):  }");
tryItOut("prototype, constructor/*infloop*//do export *; while(RegExp(undefined.__lookupSetter__(\"__iterator__\")));");
tryItOut("/*infloop*/L:while((-true) >> <x/> %= window){let prototype, constructor; }");
tryItOut("{({ __count__: ({ __iterator__: prototype, __iterator__: __count__ }), __count__: [, , __proto__, ] })/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <><x><y/></x></>) gc() }");
tryItOut("L:if(<><x><y/></x></>) { if (<x><y/></x>.__parent__) L: yield; else {yield; }}");
tryItOut("if(prototype.unwatch(\"prototype\")) { if (window %= this) /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <x><y/></x>) {} else throw (<x><y/></x>\n);}");
tryItOut("/*infloop*/for(var __count__ = Math.sin(window, <x/>); Math.pow((<x><y/></x> ? <x><y/></x> : [[]]), {}) for each (__iterator__ in undefined) for (constructor.constructor in 3.141592653589793).propertyIsEnumerable(\"prop\"); (prototype.__parent__ = ((yield ({a1:1}))).__lookupGetter__(\"constructor\"))) {{return;yield <x><y/></x>; }\nyield <y><z/></y>\n(function::__proto__).__defineSetter__ }");
tryItOut("if(this) { if (try { __iterator__ = this, __iterator__; } finally { export __iterator__; } ) (new Function).apply} else yield;");
tryItOut("/*infloop*/for(new prop(null) .@*:: /*\n*/Error(.2, <><x><y/></x></>); __iterator__ setter: <x/>.__proto__ = __parent__ = prototype >= (new (null)());  /x/g ) {break L; }");
tryItOut("if(undefined) var __count__ = false, __noSuchMethod__; else  if (false) {(<x><y/></x>);new Function } else break M;");
tryItOut("/*infloop*/for(var __noSuchMethod__; false; .2) yield;");
tryItOut("{{} const constructor; }");
tryItOut("<x><y/></x>; const __count__;");
tryItOut("(<><x><y/></x></>);");
tryItOut("if([z1,,].watch(\"prop\", ({}).hasOwnProperty)) { if (yield 0/0) {let __iterator__ = null; }} else return constructor\r;");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("/*infloop*/for((p={}, (p.z = prototype)()); (new /a/gi()); (__proto__ = <x/>)) {this;gc() }");
tryItOut("while((*::*) && 0)return #1=[#1#]\n");
tryItOut("/*for..in*/L:for(var __count__ = 5.0000000000000000000000 in <x><y/></x>) {}");
tryItOut("/*for..in*/for(var [__count__, prototype] = true instanceof window in @foo) {return <x><y/></x>; }");
