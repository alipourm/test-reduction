tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in  /* Comment */prop) {do {return <x/>; } while(([,,]) && 0); }");
tryItOut("M:if( /x/  * <x><y/></x>) return; else  if (4.) const __count__ = @foo, <x><y/></x>; else __parent__, __count__ = window;");
tryItOut("return (__parent__%=@foo);");
tryItOut("if((<x><y/></x> ? * : window).yoyo((new <x/>([1,,])))) {/*for..in*/L:for(let constructor in ((Math.sin)(@foo)))throw undefined; } else var __iterator__ = undefined, __proto__;");
tryItOut("{let (__noSuchMethod__) { \n }/*for..in*/for(let window in 0/0) {do {__proto__ = -1; } while((5.0000000000000000000000) && 0); } }");
tryItOut("throw *::*;\nreturn #3={a:#3#};\n");
tryItOut("with({constructor: (let prop = <y><z/></y>, prototype)})let __count__, prototype = -0, __proto__ =  \"\" ; = (-0);");
tryItOut("with(@foo){export *; }");
tryItOut("if(this.__defineSetter__(\"__iterator__\", Function)) (<y><z/></y>);");
tryItOut("if( ''  ? *::* : <x><y/></x>) {const __noSuchMethod__ = constructor; } else  if (3 / 033) throw *::*; else var __proto__;");
tryItOut("{/*infloop*/while( /x/g )((<y><z/></y>).watch).call }");
tryItOut("return\nconstructor;");
tryItOut("throw constructor;");
tryItOut("/*infloop*/L:for(this; ({ __iterator__: ({ get: __iterator__ }) }) = window; (<x><y/></x>.__lookupSetter__(\"function::__noSuchMethod__\").yoyo((this.zzz.zzz)))) return;");
tryItOut("/*infloop*/for(this.zzz.zzz; __noSuchMethod__;  /* Comment */__count__ = __proto__) prototype");
tryItOut("M:do ; while(( /x/ ) && 0);");
tryItOut("{}{throw <><x><y/></x></>;let prototype = <x><y/></x>; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("while((this.__defineGetter__(\"__parent__\", window).__lookupSetter__(\"__iterator__\")) && 0){return; }");
tryItOut("do gc() while((<x><y/></x>) && 0);");
tryItOut("if(-3/0) {{}.propertyIsEnumerable(\"\") } else if(<><x><y/></x></>) {(arguments);var __count__, __iterator__ = <x><y/></x>; }");
tryItOut("M:if(<><\tx><y/></x></> instanceof <><x><y/></x></>) <><x><y/></x></>;");
tryItOut("this.zzz.zzz;");
tryItOut("while((<y><z/></y>) && 0){{}yield @foo; } const constructor setter: function(q) { return q; }\n/*infloop*/for((constructor = [z1]); __count__; <x><y/></x>.(<><x><y/></x></>)) {let constructor;const prop = <x><y/></x>, getter; }");
tryItOut("/*infloop*/for(( '' \n); * +=  /x/g .__count__ = function::prop; eval(\"<x><y/></x>\", <x/>)) return (1.3);");
tryItOut("/*infloop*/for(this.zzz.zzz; ({prop: \r \"\" .valueOf(\"number\"),  set prototype(prop) { yield ({}).__defineSetter__(\"constructor\", Math.pow) }  }); ((new Function(\"\\nconst __noSuchMethod__ = [z1,,], export *; = __iterator__;\"))) ? prototype.unwatch(\"__count__\") : <x><y/></x> &= 1e4) {return window;const __proto__, __count__; }");
tryItOut("/*infloop*/do {{}__noSuchMethod__ } while(<y><z/></y>(window))");
tryItOut("if((constructor for each (__iterator__ in undefined))\n)  else  if (<x><y/></x>.isPrototypeOf( /x/g )) {__noSuchMethod__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(get in eval(\"export *;\", <><x><y/></x></>).*) (window); const constructor;");
tryItOut("with(1e+81){let __noSuchMethod__;if((\n*::*)) { if (this.__defineGetter__(\"__noSuchMethod__\", eval)) {continue ; } else {(window);<><x><y/></x></>; }} }");
tryItOut("M:if(-1) { } else  if (<x><y/></x>) {return prop;break M; }");
tryItOut("/*infloop*/M:for((this.zzz.zzz); (<><x><y/></x></>).call(<y><z/></y>, (function ([y]) { })()).watch(\"prop\", ({}).__lookupGetter__); yield) const __count__;");
tryItOut("{{{; } } }");
tryItOut("if(__proto__.isPrototypeOf(3)\n) /*for..in*/for(const [__parent__, prototype] = 3/0 in yield this;) *constructor =  \"\" , <><x><y/></x></> else <><x><y/></x></>;export *;");
tryItOut("if((p={}, (p.z = 'fafafa'.replace(/a/g, Math.pow))())) {throw this; } else export prop;");
tryItOut("/*infloop*/while((<x><y/></x>[[z1,,]].*));");
tryItOut("/*for..in*/for(prop in (( /x/g )([15,16,17,18].filter(\ffunction () { return __count__ } , arguments)))){{}let constructor, prototype; }");
tryItOut("if(0.1.valueOf(\"number\").__noSuchMethod__) {if( \"\" ) {let prop getter: *, __iterator__ = <x><y/></x>;; } else /*\n*/return this; } else  if ([(this.throw(3)) if ( '' )]) export *;");
tryItOut("yield __parent__\nconst __iterator__ = <x><y/></x>;");
tryItOut("with({}) throw ({ __count__: ({ getter: __iterator__, prop: __proto__ }) });");
tryItOut("return *::*\nyield <x><y/></x>;");
tryItOut("while((( /x/g  .@*:: <x><y/></x>)) && 0){const  /x/g , <y><z/></y>, __proto__ =  '' ;let __noSuchMethod__, __count__ = <x><y/></x>; }");
tryItOut("true;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x/>) {export __count__; { yield <y><z/></y> }  }\n");
tryItOut("let (__iterator__, __proto__ = <><x><y/></x></>) { if(<><x><y/></x></>) {throw []; } else  if ( /x/ ) {export *;break M; } else {{} } }\n const __parent__;");
tryItOut("/*for..in*/for(const ({}).hasOwnProperty(eval(\"@foo\", __noSuchMethod__), __noSuchMethod__).prop in ((function  function::__noSuchMethod__ (({ prototype: ({ __parent__: __parent__, __parent__: prop }) }), ({ __proto__: __parent__ })) { /*infloop*/while((this for each (__proto__ in (function ([y]) { })()))) } )(* ? __noSuchMethod__ :  '' ))){; }");
tryItOut("/*for..in*/M:for(let __parent__.__parent__ in  /x/g .eval((__count__ = ({a1:1})))) {L: {throw 0/0; } }");
tryItOut("L: {M:do {(-0);{ } } while(((__iterator__.(<x/>))[this for each (__iterator__ in *)]) && 0); }");
tryItOut("/*infloop*/for([ /x/g  for each (prop in <x/>)]; prop--; window) ;");
tryItOut("do {yield <><x><y/>\f</x></>;let, constructor; } while((yield *.__lookupGetter__(\"__count__\")) && 0);");
tryItOut("if( '' ++) {} else  if ((window .@x:: 1e4)) {return; }");
tryItOut("if(( /x/ .__defineSetter__(\"prop\", (1 for (x in [])))).watch(x::__count__ = 033, yield __parent__)) /*infloop*/while(){return gc();{} } else ");
tryItOut("prop.__iterator__ = __proto__;");
tryItOut("yield <x><y/></x>; const __iterator__;");
tryItOut("{};");
tryItOut("let \f__count__ = *, prototype = ({})\n");
tryItOut("export *;\ntrueM:while((3.141592653589793) && 0)export *;\n");
tryItOut("__noSuchMethod__");
tryItOut("/*for..in*/for([prototype, prop] =  /x/g  in prototype.constructor setter= gc) {/*infloop*/while(<x/>){var __noSuchMethod__; }return 1e-81 &= <y><z/></y>, <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var __parent__ = <x><y/></x>(false, <y><z/></y>).hasOwnProperty(\"prototype\") in <x/>) var __iterator__ =  '' , __proto__;");
tryItOut("return __noSuchMethod__;");
tryItOut("M:if(<x><y/></x>(true, <x/>)) {(let);__count__ = <x><y/></x>, __count__ = <x><y/></x>; }");
tryItOut("/*infloop*/L:for(let __noSuchMethod__ = prototype = <><xxx>{__parent__}</xxx></> >>= (false.*); null; (* >>> *::*)) while((<><x><y/></x></>) && 0){const prototype;export __count__; }");
tryItOut("try { let(({ __noSuchMethod__: prototype, constructor: prop })) { 3.141592653589793 = constructor; } catch(constructor) { var __iterator__ = (\ntrue)[(this .. 1e81)]; } ");
tryItOut("/*infloop*/do {(<x><y/></x>);L:with(__proto__.([1,,]))throw this; } while(({ __proto__: __parent__ }) = ([window for (__parent__ in window)]));");
tryItOut("do {} while((\targuments) && 0);");
tryItOut("{yield; }");
tryItOut("if(this) { if (({ get __proto__(prop, set) { yield window } ,  set prototype(prop, constructor)window })) break L;} else {arguments;__parent__ }{}");
tryItOut("/*infloop*/L:while(<y><z/></y>){window; }");
tryItOut(";");
tryItOut("M:if(((window).apply)(<x><y/></x>)) { if (window .. (new Object(window))<ccc:ddd>yyy</ccc:ddd>[<x><y/></x>.( \"\" ) ? <x/> : __count__]) {; }} else (((<x><y/></x>).apply).apply).call");
tryItOut("with([0/0]){{} }");
tryItOut("/*infloop*/for(let __count__; __proto__ = -3/0; <><x><y/></x></> & true) continue ;let constructor =  /x/ , __parent__;");
tryItOut("L: return  '' ;");
tryItOut("gc()");
tryItOut("yield\n");
tryItOut("switch(__parent__ = <y><z/></y>) { default:  }");
tryItOut("if((#0=[ /x/ ])[-([(delete *)])]) return 'fafafa'.replace(/a/g, new Function); else {/*for..in*/for(prototype in <x><y/></x>) {} }");
tryItOut("/*infloop*/L:for(var __count__; ((__parent__)[this]); new function ()[](window, @foo)) yield <><x><y/></x></>;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ function::__proto__: [({ __noSuchMethod__: __iterator__ })], prop: ({ prototype: [__proto__, , ] }) }), __noSuchMethod__: ({ __iterator__: ({ constructor: ({ __iterator__: [, , prototype], __iterator__: [__noSuchMethod__, __parent__, __iterator__, prototype, ] }) }), constructor: ({ prop: ({ prototype: ({ __proto__: __proto__, __parent__: __count__ }), __noSuchMethod__: ({ __noSuchMethod__: prototype }) }), __noSuchMethod__: [({ __parent__: __noSuchMethod__, __noSuchMethod__: __parent__ }), , , ({ prop: __parent__, __parent__: __count__ }), ({ constructor: prop, prop: __count__ })] }) }) }) = ((uneval((function::__proto__ = __iterator__).__lookupGetter__(\"__parent__\")))); (prototype.__iterator__ setter= 0/0 ^ true); (uneval(new Exception(*))) ? (new <x><y/></x>) : (eval(\"<x/>\", __noSuchMethod__).*)) /*infloop*/L:for(function ([y]) { }; [z1]; [1]) ;");
tryItOut("{export *;'haha'.split }");
tryItOut("if((Function)) { if (<x/>['constructor']) {let prototype, prototype = <x><y/></x>;export *; }} else var __parent__ = @foo, prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__ in (<y><z/></y>)(function ([y]) { }, 0)) {return  '' ; }var prototype;");
tryItOut("/*infloop*/L:for(__count__ = <y><z/></y>; *::*; __proto__) var __count__ = <y><z/></y>, __parent__ = <y><z/></y>;");
tryItOut("export *\n");
tryItOut("if(__noSuchMethod__) return; else \nif(window) {yield null; } else  if (<y><z/></y>) yield; else {yield; }\n");
tryItOut("/*infloop*/M:for(each; undefined; (-3/0 for (constructor in *))) {return;gc() }");
tryItOut("yield ((eval)());");
tryItOut("if(((<y><z/></y>)[this])) {yield; } else  if (Object(('fafafa'.replace(/a/g, <x/>)),  /x/ )) {return this; }");
tryItOut("continue L;");
tryItOut(";");
tryItOut("/*infloop*/L:do yield; while(throw <y><z/></y>);");
tryItOut("export __noSuchMethod__;");
tryItOut("L: ({a2:z2});");
tryItOut("if(3.141592653589793) true; else  if ({}) break ; else throw *::*;");
tryItOut("with({}) __proto__ = __noSuchMethod__;");
tryItOut("L: {throw *::*; }");
tryItOut("/*for..in*/for(const prop in prototype.prop) {gc()M:if(this.zzz.zzz) { if (function ([y]) { }) __proto__ = <x><y/></x>, __noSuchMethod__;} else {yield __parent__;let __parent__; } }");
tryItOut("while((\t(<x><y/></x> ? <y><z/></y> : *::*)) && 0){let __noSuchMethod__; }");
tryItOut("{{throw null; }\n/*infloop*/while((__count__).call((function ([y]) { })()).valueOf(\"number\"))throw __noSuchMethod__; }");
tryItOut("if(null) break M; else  if (this) {function  __proto__ (__count__, __iterator__) { function(q) { return q; } }  } else {continue ; }with({prototype: this}){return <><x><y/></x></>;{} }");
tryItOut("L:with({true: __noSuchMethod__})throw *\n");
tryItOut(";");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*infloop*/do {throw true; } while(new (((({a1:1})).watch).apply).apply(prop));");
tryItOut("/*infloop*/while(({ get prototype(({ prop: __count__ }\f), __iterator__) { yield [(-1).@*] }  })){export *; }");
tryItOut("this.zzz.zzz;");
tryItOut("{L: {export *; }return prop; }");
tryItOut("/*for..in*/for(var (<y><z/></y> ?  ''  : 1e-81).__proto__ in <>yyy</>) M:if(__count__.prop) { if ((#1=({__count__: prop = <x><y/></x>}))) {__noSuchMethod__; } else /*for..in*/M:for(__count__ in ((function(y) { yield y; break L;; yield y; })(this)));}");
tryItOut("if(([({ prototype: ({ prototype: prop }), __noSuchMethod__: __proto__ })] = ({ __noSuchMethod__: __proto__ }) = __parent__)) /*for..in*/M:for(__proto__ in ((*::*)((<><x><y/></x></>.@foo)))){return []; } else {;M:while((.throw((__proto__))) && 0){(__parent__); } }");
tryItOut("throw prototype;");
tryItOut("L:if(<><x><y/></x><\t/>) __count__ = __noSuchMethod__, __noSuchMethod__ = false; else export __parent__;");
tryItOut("FunctionL: export *;");
tryItOut("return");
tryItOut("{yield  \"\" ;0.1 }");
tryItOut("__noSuchMethod__function(q) { return q; }");
tryItOut("/*infloop*/for(var __iterator__; [1,,]; prototype.constructor = true) return false;");
tryItOut("(this).watch const prop;");
tryItOut("throw __iterator__throw true;");
tryItOut("/*infloop*/L:for(let __proto__; ({__proto__: <x><y/></x>, __iterator__: <x><y/></x> }); void 1.2e3.__defineGetter__(\"__iterator__\", true)) {return;export *; }");
tryItOut("return\nbreak M;");
tryItOut("constructor = <x><y/></x>, prop =  \"\" ;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in 1.2e3) return <x/>;\n");
tryItOut("{if(new (gc)( '' , [z1])) break M;\t }");
tryItOut("yield\n{} >= __parent__['__proto__'] = __iterator__;");
tryItOut("case *::*: yield <y><z/></y>;break; {}break; default: continue ;case 4: yield;break; case 2: case 5: case 9: break ;case 0: case 9: {}\nreturn <y><z/></y>;");
tryItOut("/*for..in*/L:for(const [__proto__, __proto__] = __parent__ in <x><y/></x> -= <x><y/></x>) {/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in window) {export *; }__iterator__, prototype = @foo; }");
tryItOut("switch([11,12,13,14].sort) { case 3: L:if(new ([(__iterator__ = 5.0000000000000000000000)])(Array(1e+81))) { if (<><xxx>{__noSuchMethod__}</xxx></>) export __parent__; else return;}case 3: break; case constructor = window: /*infloop*/for(undefined.unwatch(\"__parent__\"); new <x/>; <x><y/></x>) {@foo }break;  }");
tryItOut("do {<x><y/></x>; } while((1e+81) && 0);");
tryItOut("with(undefined !== <x/>)let __iterator__ = <><x><y/></x></>;");
tryItOut("with(this){export __count__; }");
tryItOut("let(({ __count__: ({ constructor: __iterator__ = __count__; }), __noSuchMethod__: [({ prop: ({ __noSuchMethod__: prototype, __count__: get }) }), , ] }) = ( /x/ )) ((function(){prototype = __parent__;})());");
tryItOut("throw StopIteration;");
tryItOut("{continue ; }");
tryItOut("throw constructor;");
tryItOut("M:if(-(-1)) yield  /x/ ;\n/*for..in*/for((__count__) in ((new Function)(([15,16,17,18].filter(prototype, @foo))))){export *;if(<x/>) { if (<x><y/></x>) yield <x><y/></x>;} else ( \"\" ); }\n");
tryItOut("/*infloop*/for(const constructor; * |= *::*; new prototype(<x/>--)) continue L;");
tryItOut("export prototype;");
tryItOut("/*infloop*/do {let prototype = function ([y]) { };; } while((__count__.__parent__ setter= new <y><z/></y>(<x><y/></x>, undefined)++));");
tryItOut("throw __iterator__;");
tryItOut("throw constructor\nlet (__count__, ({ prop: __iterator__ }) = 0x99) { /*for..in*/M:for(var constructor in <><x><y/></x></>) const prop = prototype; }");
tryItOut("/*infloop*/for(const __count__; RangeError(); ");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [constructor, __parent__] = (-0) in ([11,12,13,14].some.prop)) return;");
tryItOut("const __iterator__ getter: *;");
tryItOut("switch(prop, <y><z/></y>) { default: switch(eval(\"{export *;let __proto__, prop; }\", (__noSuchMethod__))) { case 6: break; default: break; export *;break;  }break;  }");
tryItOut("export __proto__;");
tryItOut("export prototype\n");
tryItOut("with((({__iterator__ setter: eval,  set __noSuchMethod__ prototype () { return @foo }  }))){;var prototype; }");
tryItOut("if(constructor.prop = new ( /x/g  > [])((uneval(0/0)), <>default: export prop;break; <>__iterator__</>;break; gc()break; </>)) { if ( /x/ ) {continue ; }} else export *;");
tryItOut("let (__proto__ =  \"\" , prototype = <x><y/></x>) { return 033; }\n");
tryItOut("L:switch(prototype) { case null: export *;break;  }");
tryItOut("/*infloop*/M:for(let constructor; ; <y><z/></y> >= constructor) {export prop;throw undefined; } <x><y/></x> \nfor(let y in []);");
tryItOut("with({}) { return yyy; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in <><x><y/></x></>) throw ({a1:1});");
tryItOut("while((((__proto__ = ( ''  @ []))[new null(<y><z/></y> >>> 3.141592653589793)])) && 0)this.zzz.zzz;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(let (#2=[this]) in (([[]].unwatch(\"prototype\"))([, , __iterator__.__parent__] = [1].yoyo(*::*).@*)))/*for..in*/for(var __proto__(prop) in ((({}).__lookupGetter__)((yield <y><z/></y>.@foo))))break ;");
tryItOut("with({constructor: <x/>\n}){if(<y><z/></y>) var __iterator__ = null; else {; } }");
tryItOut("gc()\n");
tryItOut("return  '' ; const __parent__;");
tryItOut("/*infloop*/for(let prop = ((Date( \"\" ))).__defineSetter__(this.__defineGetter__(\"__parent__\", function (prototype, prototype) { yield <><x><y/></x></> } ), ([,] + *)); (({}).__lookupGetter__)([11,12,13,14].some, (function(q) { return q; })); ({ prototype: prop }) = eval(\" \\\"\\\" \",  \"\" )\t *= new String()) L: {break M;break L; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("if(constructor = <x><y/></x>) return;while((<x/> >> <x><y/></x>.__defineGetter__(\"__proto__\", [,])) && 0){(<><x><y/></x></>) }");
tryItOut("if([,,z1]) let __proto__ = <><x><y/></x></>, prototype; else  if (this) gc()");
tryItOut("let ([, prop, ] = true.__lookupSetter__(\"__proto__\")) { return gc(); }");
tryItOut("throw __parent__;");
tryItOut("const __proto__, constructor = eval(\"<x><y/></x>\", <x><y/></x>);");
tryItOut("/*infloop*/L:do {/*for..in*//* nogeckoex bug 349964 */ for  each(const #3={a:#3#}['prop'] in *) ;export *; } while(<x/>(prototype) < (function (__count__, prototype) { yield function(id) { return id } } ).call(*, ));");
tryItOut("try { this.zzz.zzz; } catch(__iterator__) { let = __count__; } finally { throw prop; } ");
tryItOut("return -1;\nwhile((\n[]) && 0)return;\n");
tryItOut("/*for..in*/for(var __proto__ in <x><y/></x>) {return;return; }");
tryItOut("if(__proto__%=(throw undefined)) { if (__count__ = undefined.__lookupGetter__(\"__proto__\")) <y><z/></y>} else {yield <><x><y/></x></>; }");
tryItOut("");
tryItOut("M:with({__iterator__: prototype.prototype}){gc()gc() }");
tryItOut("while(( /x/g  , <><x><y/></x></>) && 0){}");
tryItOut("/*for..in*/for(var __proto__ in (((new Function(\"gc()\\ncontinue ;\\n\")))((\f<y><z/></y> ? [11,12,13,14].filter : [11,12,13,14].some))))__parent__\n{{with({__count__: []}){yield __iterator__;gc() } } }");
tryItOut("/*for..in*/for(var __count__ in ((((++__proto__ = @foo)).__defineSetter__\n)( '' ))){export prototype;(*::*); }");
tryItOut("/*infloop*/while([])/*infloop*/do {let __iterator__, __count__;yield, prototype = <x><y/></x>; } while([1]);");
tryItOut("/*infloop*/for(let __noSuchMethod__ = (--(<><x><y/></x></>)(3, constructor)); (this.__defineSetter__(\"prototype\", function () { yield <><x><y/></x></> } )); (__count__ = null.__lookupSetter__(\"__proto__\"))) let (__proto__, prop = 3.141592653589793) { continue M; }");
tryItOut("{[1,2,3,4].map }");
tryItOut("let(__proto__ = <y><z/></y> -= prop, prop) ((function(){for(let y in []);})());");
tryItOut("let(prop = ({ prop: [, [prototype, __count__]], constructor: [] }) = (new (<y><z/></y> / <x><y/></x>)())) { this.zzz.zzz;");
tryItOut("{{}yield @foo; }\n");
tryItOut("case let (__iterator__ = __noSuchMethod__ > <x><y/></x>.__iterator__, prop = null.eval(<><x><y/></\rx></>)) <x/>: ");
tryItOut("if(__proto__ = constructor &= this.__defineSetter__(\"__count__\", default: break; )) return <><x><y/></x></\t>; else  if (()) let __iterator__ = this;");
tryItOut("let (prop = <x><y/></x>, <ccc:ddd>yyy</ccc:ddd> = <x><y/></x>) { yield __noSuchMethod__; }\n\tthrow __iterator__\n");
tryItOut("if(x::each = null) { if (new (*)(<y><z/></y>)) {yield prototype; } else {(<><x><y/></x></>);export  set __noSuchMethod__(prop, constructor) { export __count__; } ; }}");
tryItOut("M:with({__iterator__: <x/>.*})return ([<x><y/></x> for (constructor in <x><y/></x>)]);");
tryItOut("return\n");
tryItOut("with((Function).call(<><x><y/></x></>.throw(<x/>), var __parent__ = 3, [1]./*\n*/valueOf(\"number\"))){(@foo);function  __proto__ (prototype, prototype) { ; }  }");
tryItOut("if((prototype = [z1,,])) {function::get = <y><z/></y>; } else  \"\" ;");
tryItOut("throw ({}).hasOwnProperty();");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((Function()))(this.__defineGetter__(\"__proto__\", function (__parent__, __count__) { return; } ))))let(__noSuchMethod__ = <x><y/></x>, __parent__ = this) { ;");
tryItOut("with({prototype: (#0=({__parent__: *}))}){(<><x><y/></x></>\f)\f;__count__ }");
tryItOut("do {let __proto__ = <><x><y/></x></>,  /x/g  = null; } while(((yield window)) && 0);");
tryItOut("while((((function () { yield (*::*) } ).call((__noSuchMethod__ = this), (__noSuchMethod__ = let = \t<x><y/></x>)))) && 0){if(<x><y/></x>)  else  if (0x99) __count__ =  \"\" , __parent__ = <x/>; else {'haha'.split } }");
tryItOut("/*infloop*/for(const __noSuchMethod__; __noSuchMethod__; (-1)) {evalconst __count__ = gc(); } const prototype;");
tryItOut("if([z1,,]) export constructor;");
tryItOut("/*infloop*/for(const __proto__; (prop|=break ); let (__proto__ =  \"\" ) 033\n) {/*for..in*//* nogeckoex bug 349964 */M: for  each(prop in  /x/ ) {;let prop; } }");
tryItOut("L:do [1,2,3,4].slice while((__parent__ = <><x><y/></x></>) && 0);");
