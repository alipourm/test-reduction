tryItOut("/*infloop*/for(prop; <><x><y/></x></>;  '' ) this; const let;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <><x><y/></x></>) let __proto__ = [z1], * = prototype;");
tryItOut("if(__count__ = <x><y/></x>) var getter, prototype; else yield;");
tryItOut("M:switch(((<x><y/></x>--) >> new (function(y) { yield y; yield 0;; yield y; })(<y><z/></y>, 5.0000000000000000000000))) { case ([] = ({constructor: __count__ })).throw((__proto__.constructor = window)):  }");
tryItOut("/*infloop*/for(({ __proto__: ({ constructor: __proto__ }), __proto__: function::function::__noSuchMethod__ }) = ((<x/>).watch)(<>/*\n*/<x><y/></x></>).eval(<x/>); <x><y/></x> |= [,]; (new (function (prop, prototype) { prototype } )([true].some(function  __noSuchMethod__ (__count__, constructor) { yield <><x><y/></x></> } ),  /x/g ).@*)) break M;");
tryItOut("export *\nyield ({a2:z2});");
tryItOut("var __noSuchMethod__ = [1,,];\ngc()\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(let [constructor, constructor] =  /x/g  in <><x><y/></x></>) const constructor = window;");
tryItOut("with({}) throw __proto__;");
tryItOut("if(__proto__) export *; else  if (({ __parent__: prototype, __count__: prototype })) export *;");
tryItOut("/*for..in*/for(prototype in ((new Function)(__count__.__proto__))){new Function/*infloop*/while(window)gc() }");
tryItOut("(__proto__ = *::*)['prop'] = constructor;");
tryItOut("break L;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) (prototype);");
tryItOut("/*for..in*/for(let [__proto__, constructor] = ((<><x><y/></x></> ? this : function ([y]) { })[<><x><y/></x></> += <x><y/></x>]) in  /x/  ? __count__ :  '' ) /*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in __parent__) {return;{}\nreturn  \"\" ; }");
tryItOut("L: {if(<><x><y/></x></>) {return;let constructor; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in prop.constructor setter= function(q) { return q; }) /*infloop*/for(constructor|=new new Function()\n; new <><x><y/></x> </>(true, new [1,2,3,4].slice( \"\" )); <y><z/></y>.isPrototypeOf(<><x><y/></x></>) ? this.__defineGetter__(\"prop\", function(y) { yield y; export __parent__;; yield y; }) : __count__|=<><x><y/></x></>) while((( /x/ .__lookupGetter__(\"__proto__\"))) && 0){;throw __noSuchMethod__; }");
tryItOut("gc()");
tryItOut("with(prototype){break M;break M; }\ngc()\n");
tryItOut("while((1e-81) && 0){var __proto__, prop = false; }");
tryItOut("for(let y in [5,6,7,8]) throw __proto__;");
tryItOut("/*for..in*/for(__count__ = [15,16,17,18].filter(function ()false.hasOwnProperty(\"prop\"), ['fafafa'.replace(/a/g,  /x/g ) if (<><x><y/></x></> :: <><x><y/></x></>)]) in (this.zzz.zzz)) {; }");
tryItOut("{\flet constructor = (function ([y]) { })(), function::__parent__ = prototype;var __iterator__ = [z1,,], prop; }");
tryItOut("/*for..in*/M:for([__proto__, __noSuchMethod__] = __proto__.__parent__ in <x><y/></x>) {{}gc() }");
tryItOut("throw StopIteration;");
tryItOut("this.zzz.zzz;");
tryItOut("throw __proto__;");
tryItOut("");
tryItOut("/*infloop*/do export *; while(this.zzz.zzz);");
tryItOut("return null\nyield;");
tryItOut("L: let (__parent__) { /*infloop*/L:(const __parent__ = /*<><x><y/></x></>; [[1]]; ) {return [[1]]; } }");
tryItOut("do {__count__ setter: gc } while((__noSuchMethod__) && 0);");
tryItOut("/*infloop*/L:while(( /* Comment */<x/>\n))switch([1] <= false) { case ({prop: * }): L:with(<y><z/></y>)yield true;break;  }");
tryItOut("while((eval(\"<zzz>({})</zzz>\", <x/>)) && 0)do {yield @foo; } while(((@foo.__lookupSetter__(\"prop\"))) && 0);");
tryItOut("var __count__, __iterator__ = *::*\n");
tryItOut("/*infloop*/for(let __proto__; ( /* Comment */this); (new *(\n(-1)\n, -0))[033.unwatch(\"constructor\")]) /*infloop*/do {__noSuchMethod__ = *::*, __count__;throw this; } while((this.__defineSetter__(\"prop\",  '' )));");
tryItOut("with([[z1,,] if (__parent__)]){ }");
tryItOut("/*infloop*/for(__count__; 5.0000000000000000000000; null) yield this;");
tryItOut("do <x/>; while((new ('haha'.split)(<x><y/></x>)) && 0);");
tryItOut("/*for..in*/ { return [[1]] } ");
tryItOut("/*infloop*/while(((constructor = window).__defineSetter__(\"prop\", [1,2,3,4].map)))/*for..in*/L:for(let __parent__ in (( \"\" )([true].filter(({}).hasOwnProperty))))");
tryItOut("throw <><x><y/></x></>");
tryItOut("(<x><y/></x>);");
tryItOut("/*for..in*/for(let __iterator__ in <x/>) gc()");
tryItOut("throw <x><y/></x>\n{}");
tryItOut("if(<><x><y/></x></>) this else {<><x><y/></x></>; }");
tryItOut("prototype");
tryItOut("for(let y in [5,6,7,8]) let(__proto__) { continue ;");
tryItOut("with({}) for(let y in []);");
tryItOut("if((__count__.prototype = ([11,12,13,14].some))) export prototype; const __noSuchMethod__; else ;");
tryItOut("__count__, constructor = <y><z/></y>;");
tryItOut("do {with((constructor.prototype))yield 1.3;switch(this) { default: /*for..in*/for(const __parent__ in ((Function)(#1=[#1#]))){(@foo);continue ; }break; case ({ \t__iterator__: constructor, prop: __noSuchMethod__ }) = __proto__ <= prop: case null: break; if(prop) { if (<><x><y/></x></>) (<><x><y/></x></>);} else yield <y><z/></y>;\fbreak; case : return;break;  } } while((new (__count__ = <><x><y/></x></>)(Array(__count__))) && 0);");
tryItOut("if((* for each (function::__noSuchMethod__ in window)).__proto__) function  prototype () { return  \"\"  }  else  if ((uneval(prototype & this ?  /x/g .valueOf(\"number\") : (constructor if (<><x><y/></x></>))))) {L:  }\n/*infloop*/while(prop = __parent__ = __count__.*){let __noSuchMethod__;break ; }");
tryItOut("(-0)\n");
tryItOut("/*for..in*/for(prop.constructor in <><x><y/></x></>) let __iterator__ =  \"\" ;");
tryItOut("/*for..in*/for(const __proto__.constructor in ({ __noSuchMethod__: ({ prototype: ({ prototype: prop }), function::__iterator__: ({ prop: __iterator__ }) }), prototype: constructor }) = ({ __count__: [], __noSuchMethod__: __iterator__ })) {export __iterator__;let (__parent__, prop = <x><y/></x>) { return; } }");
tryItOut("export *;");
tryItOut("if(<bbb xmlns=\"(new Number()) for (__iterator__ in this.__defineGetter__(\"__count__\",  /x/ )) for (<><x><y/></x></>['function::__proto__'] in [11,12,13,14].filter)\"></bbb>) {<><x><y/></x></>;{/*infloop*/while(/a/gi()){var __count__;var __noSuchMethod__; } } }");
tryItOut("/*infloop*/for(let prototype; <>(__proto__ = this)</>; (0.1 :: 3)) __iterator__");
tryItOut("/*for..in*/for(constructor = window.prop in (([15,16,17,18].filter((<x><y/></x>).apply, <x/>)) >= (constructor.propertyIsEnumerable(\"prop\")))) {let <x><y/></x> = window;{return;*::*; } }");
tryItOut("if(function::constructor(false) = prop = [,]) {; }");
tryItOut("do with(new Number( /* Comment */prop)){return; } while(([({ prop: ({ __noSuchMethod__: __noSuchMethod__ }) }), , , ] = ((\t<x/>).__defineSetter__).call(this, )) && 0); const __noSuchMethod__;");
tryItOut("L: {switch(window) { case 3: ;default: case 2: (window);break;  }/*for..in*/for(const __count__ = <x><y/></x>.(__noSuchMethod__) in *::*) break ; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for((eval(\"new *(constructor)\", undefined ? undefined : *)); (Function(-3/0)) /= [[1]]; __count__.__proto__ setter= Math.sin) (false)\nyield (function ([y]) { })();");
tryItOut("if(1.3) {{} } else let __proto__ = window, prototype = function ([y]) { };");
tryItOut("L:if( /x/g ) { if (#1# , (p={}, (p.z = <y><z/></y>)())) {gc()break L; }/*\n*/} else gc()");
tryItOut("with([])yield\n");
tryItOut("/*for..in*/for(var [__count__, __count__] = (uneval([z1,,] <= -0)) in prototype) {/*infloop*/M:do {throw <x><y/></x>;; } while(@foo); }");
tryItOut("{/*infloop*/for(var __parent__; __iterator__; yield __proto__((undefined.watch(\"constructor\", ( \"\" ).watch)), window)) let false; }");
tryItOut("prop");
tryItOut("/*for..in*/L:for(const yield = [[1]] in <><x><y/></x></>) {(1 for (x in []))return [z1]; }");
tryItOut("/*infloop*/L:for(prototype; __count__(new Object(<x><y/></x>, null)); +-3/0) {throw 1e-81;yield;; }");
tryItOut("switch(<y><z/></y>) { case 7: break;  }");
tryItOut("");
tryItOut("with({}) try { for(let y in [5,6,7,8]) for(let y in []); } catch(prop) { [, ] = __noSuchMethod__; } ");
tryItOut("if(*::*) { if (__iterator__ = <x/>) {;(/gc() } else (__noSuchMethod__);}\n");
tryItOut("L:switch(this) { default: break;  }");
tryItOut("with((eval(\"export *;\", 033)) ? function::__iterator__ = <><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", function () { export *; } ) : <>null</>)/*for..in*/L:for(var __count__ in window) {; }");
tryItOut("\tif(prop.prop setter= (new Function(\"{}\"))) { if ((p={}, (p.z = null)())) {/*for..in*/for(let __parent__ = ({__proto__: (new <x/>(@foo)), __proto__: <x><y/></x> }) in 5.0000000000000000000000) var __noSuchMethod__;const prototype, __parent__ = window; } else /*for..in*/for(const __count__ in @foo) {; }}");
tryItOut("/*infloop*/M:do {;yield; } while(<x/>);");
tryItOut("if(new (<x><y/></x>.(*) %= window.__defineSetter__(\"__iterator__\", Function))().__count__) {gc()__proto__ = arguments; } else  if ((__proto__.__proto__ = ({ __noSuchMethod__: __iterator__ }) = 033.isPrototypeOf( /x/ ))) ");
tryItOut("/*infloop*/for(let ({ prototype: prototype, __iterator__: [, ({ __proto__: __count__, __iterator__: __count__ })] }) = #0=[__noSuchMethod__ = <x><y/></x>]; [true ^= __proto__].some(window); <><\t!--yy--></>) return;");
tryItOut("/*for..in*/L:for(prop in ((function  __parent__ () { yield undefined } )( /x/g .__lookupSetter__(\"__parent__\"))))return;");
tryItOut("<bbb xmlns:ccc=\"(this.* = case 7: {})\"><ccc:eee></ccc:eee></bbb>");
tryItOut("__iterator__");
tryItOut("if((#1=[#1#].unwatch(\"prototype\") || @foo % this) !== ) { if (( '' .__noSuchMethod__ = [,])) ([[1]]); else break L;}");
tryItOut("/*infloop*/while((prop.unwatch(\"__proto__\")))*::*;");
tryItOut("L:if([<x/>.__parent__ if (#2=({__parent__: (-0)}))]) switch(((yield <x><y/></x>))) { default: /*for..in*/for([__count__, __count__] = (1e4.watch(\"__iterator__\", function(y) { yield y; {}; yield y; }) |= new Iterator()) in <x><y/></x>) __count__, prop = [[1]];break;  }");
tryItOut("return;");
tryItOut("L:if(eval(\"prototype = constructor;\", ((eval).call(let (prop, prop = @foo) (-0).__lookupGetter__(\"__noSuchMethod__\"), )))) { if ({if(1.3) x::__noSuchMethod__ else {export *;(<><x><y/></x></>); } }) {if((<x/>)(<x><y/></x>).__lookupSetter__(\"constructor\")) {return;/*infloop*/for(const prop; window; <><x><y/></x></>) {export __count__;const __iterator__, __count__ =  { yield [[]] } ; } } else  if (<x/>[null].isPrototypeOf(<x><y/></x>.yoyo(__parent__))) {export *; } else export __count__; } else {export *;{} }}/*for..in*/for(var __parent__ in (({__count__: <><x><y/></x></>, __parent__\r getter: (prop).apply }))) {__proto__ }");
tryItOut("if(((uneval(true)))) {{return constructor;yield; } }\n");
tryItOut("{(new Function(\"__proto__ = __proto__, __parent__;\")) }");
tryItOut("/*infloop*/for(({ prototype: ({ __parent__: ({ __iterator__: ({ prototype: ({ prop: prop }), __proto__: ({ each: prototype }) }), __iterator__: ({ constructor: ({ __proto__: __noSuchMethod__, __proto__: [, getter] })\n }) }) }), x::__noSuchMethod__: __iterator__ }) = (yield (( /x/ ).watch).call(1.3, )); (__proto__ = [[]] , undefined).__noSuchMethod__ = new <x/>.__count__ = <x><y/></x>(); 'fafafa'.replace(/a/g, function () { yield (prototype|=(<x><y/></x>.isPrototypeOf(<><x><y/></x></>)) %  '' ) } )) with({__count__: (function ([y]) { })()})export *;");
tryItOut("let (__count__, {; }) { var prop; }");
tryItOut("{let get = 0/0; }");
tryItOut("switch(*) { case 7:  }");
tryItOut("/*infloop*/for(let __parent__ = (yield this.zzz.zzz); ({prop setter: Math.pow, prototype: [[1]] }).__iterator__ = constructor.hasOwnProperty(\"constructor\"); typeof this) {export __proto__;prop.prop getter= /a/gi; }");
tryItOut("M:while((<><xxx>{__count__}</xxx></>) && 0){return; }");
tryItOut("/*for..in*/for(let __proto__ = null in false) export *;\ngc()return;\n");
tryItOut("/*for..in*/for(const __parent__ in ((window)(<><x><y/></x></>)));export *;export *;");
tryItOut("/*infloop*/while(([15,16,17,18].filter(<x><y/></x>, __proto__) for (__parent__ in <><x><y/></x></>) for (prop in false)) < Date())/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></\tx>.(*::*)) with(let (__parent__) 1e81)gc()");
tryItOut("with\t({(typeof [this.__defineGetter__(\"__iterator__\", (function(y) { yield y; yield;; yield y; }).call)].filter(function (__parent__) { return null } )): (033.__count__)})(<><x><y/></x></>\t);");
tryItOut("");
tryItOut("M:if(<x><y/></x>) { } else {(@foo).watchbreak ; }");
tryItOut("(<><x><y/></x></>).watch const prop;");
tryItOut("if(__proto__ = this.unwatch(\"__noSuchMethod__\")) {return; } else  if ((<x><y/></x>.(this)) >= [15,16,17,18].some(*.eval(-1), let (prototype =  '' , __proto__) *::*)) /*infloop*/for(<x><y/></x>;  /x/g ; __proto__) yield; else /*infloop*/for(<x><y/></x>; \t__parent__; <x><y/></x>) {<x/>throw *; }");
tryItOut("if(__noSuchMethod__.(prototype)) {do {export *;; } while(( /x/g ) && 0);<x><y/></x>; } else {return;break ; }");
tryItOut("let(__iterator__ = 1.2e3, constructor = <x><y/></x>) { __count__");
tryItOut("L:if(<x/>) { if (<><x><y/></x></>) yield 1.2e3; else {var prop;var __parent__, __noSuchMethod__ = [,,z1]; }}");
tryItOut("while((new ((1 for (x in [])))(prop)) && 0){if(<><x><y/></x></>) { if (<x><y/></x>) (null); else {{}__iterator__; }} }\n\n033;");
tryItOut("/*infloop*/L:while((yield window))let __proto__ = null;");
tryItOut("/*for..in*/M:for(const __parent__ = (({prop: __parent__,  get prototype prop (prop, prototype) { return 1e+81 }  })) in x::prototype.each setter= (Math.pow).call) {const __proto__ = <y><z/></y>, prototype =  '' ;throw  /x/ ; }");
tryItOut("if(null) {var ; }");
tryItOut("/*for..in*/for(const [__iterator__, __iterator__] = this.__defineGetter__(\"__count__\", [1,2,3,4].slice) in __iterator__) { /x/ ;export *; }");
tryItOut("if(return __iterator__;) {} else  if ( /x/g ) { /x/g gc() }");
tryItOut("let __iterator__ =  \"\" , __count__;\nsetter = 1.2e3, prop;\n");
tryItOut("for(let y in [5,6,7,8]) [] = prop;");
tryItOut("L:if(({prototype: ({ __iterator__: __iterator__, prop: ({ __count__: [] }) }) = ((throw <><x><y/></x></>; for \reach (prop in <y><z/></y>) if (null)))})) { if ((__proto__.__parent__ = new <y><z/></y>( '' ))) {gc() } else {let (__count__ = <y><z/></y>, __proto__) { yield window; } }}");
tryItOut("[1,2,3,4].map\nexport __noSuchMethod__;\n");
tryItOut("eval");
tryItOut("if(__count__ setter: true) const prop = <y><z/></y>; else throw __iterator__;");
tryItOut("{export *; }");
tryItOut("if(<y><z/></y>) {gc() } else  if (<y><z/></y>) return this; else //h\n{yield; }");
tryItOut("/*for..in*/for(let [__parent__, __count__] = -1 >= <y><z/></y> in __iterator__ = prototype) {{} const __noSuchMethod__;const __iterator__, __noSuchMethod__ = __count__; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = function(id) { return id }.@* in  '' ) {return undefined;return; }\n__iterator__ = <x><y/></x>;");
tryItOut("__count__ = __count__;");
tryItOut("/*infloop*/L:while(constructor){export *;export *; }");
tryItOut("for(let y in []);");
tryItOut("yield;/*infloop*/L:for(@foo\t;  /x/ ; false) {yield <><x><y/></x></>; }");
tryItOut("__iterator__");
tryItOut("{throw constructor = #1=[#1#]; }");
tryItOut("let (__parent__ = prototype, __parent__) { while((constructor) && 0){yield;__iterator__ = ;, constructor = *; } }");
tryItOut("__proto__;");
tryItOut("if(constructor(window) = new ((String(((p={}, (p.z = this)())).__lookupGetter__(\"__parent__\"), 'fafafa'.replace(/a/g, Math.pow))))(<><bbb xmlns=\"@foo.__count__\"><!--yy--></bbb></>, (({ prop: __parent__, x::prop: [] }) = null))) {with({__proto__: <x/>})const constructor = undefined, __parent__ = @foo;/*for..in*/for(let __count__ in (((-1))(0/0))){let function::prop, getter;window; } } else  if (__iterator__ = (this.isPrototypeOf(-1))) {export __noSuchMethod__; }");
tryItOut("let (__count__) { /*for..in*/for(__count__ in <x><y/></x> ? 0.1 : true) do function(y) { yield y; return;; yield y; } while((true) && 0)\nbreak L; }");
tryItOut("export __count__;yield;");
tryItOut("export *; const __parent__\n");
tryItOut("return;");
tryItOut("{while((-1) && 0)export __iterator__;throw (new [,](<x/>)); }");
tryItOut("L:if((p={}, (p.z = 4.)())) {L:switch(({})) { case [1]: ( '' );break;  }let (constructor) { export prop; } } else  if (__noSuchMethod__ = 4.) {export *; } else {L:if([, ] = <y><z/></y>) break ; else  if ((new (@foo\n))) (<x/>); else export __noSuchMethod__; }");
tryItOut("L:if((((__parent__ = yield <x><y/></x>))(((eval(\"const __count__;\", __count__) for each (function::__iterator__ in 1e+81))) ? __count__ = Boolean(<><x><y/></x></>) : [ /x/g ].sort((<><x><y/></x></>).__defineSetter__), __proto__))) {/*infloop*/while(<><x><y/></x></> >= window){const __proto__ = __proto__; }export *; } else  if (({ \rconstructor: __iterator__, constructor: __iterator__ }) = (-3/0.yoyo(__proto__ =  \"\" ))) {/*for..in*/M:for(__proto__ = <><x><y/></x></> in ({})) yield;L: {export *;break L; } }");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].map)) {gc() } else  if (<x><y/></x>.@*) {export *; }");
tryItOut("do gc() while((function(y) { yield y; yield;; yield y; }) && 0);");
tryItOut("if(([<><x><y/></x></>.hasOwnProperty(\"__count__\") if (<><x><y/></x></>)])) { if ((__noSuchMethod__)) {yield;/*infloop*/L:for([*].some(new Function); [15,16,17,18].filter((1 for (x in [])), <y><z/></y>); __proto__ = __proto__) {\nexport *;(<x><y/></x>); } } else {M:with(#1=[<x/>].__defineGetter__(\"__noSuchMethod__\", function (/*\n*/)0.1))/*for..in*/M:for(let [prototype, __proto__] = prop in <><x><y/></x></>) __iterator__:  /x/  }}");
tryItOut("/*infloop*/while(({ __proto__: prop }) = (((<><x><y/></x></>.@*) for each (__noSuchMethod__ in -3/0) for (prototype in this))))window\n");
tryItOut("__noSuchMethod__");
tryItOut("{gc() }");
tryItOut("yield;");
tryItOut("function(y) { yield y; throw <y><z/></y>;; yield y; }");
tryItOut("export *");
tryItOut("/*infloop*/while((typeof Function()(\f[1,,]--, prop))){/*infloop*/do {yield;const constructor = 5.0000000000000000000000, __iterator__; } while(\n*); }");
tryItOut("yield  /x/ \n");
tryItOut("gc()\n");
tryItOut("M:while((undefined) && 0){return 3/0;\t }\n");
tryItOut("let (__count__ = new (this)(*), __proto__) { /*infloop*/do {break M;throw <><x><y/></x></>; } while(*); }\nif() { if (( /* Comment */*) for each (constructor in __count__) for each (__parent__ in function(id) { return id })) {'haha'.split }} else yield\n");
tryItOut("<><x><y/></x></>['prop'] = prop;");
tryItOut("/*for..in*/M:for(let (({ __proto__: x::__count__, __count__: __parent__ }) = (({each: true })))['constructor'] in ((gc)(@foo))){{export __noSuchMethod__; } }");
tryItOut("/*for..in*/for(const constructor in (((__parent__.prototype getter= function  __iterator__ (__noSuchMethod__) { return *::* } ))[this].@*++)) {;/*infloop*/M:for(var ({ __count__: ({ __proto__ && <><x><y/></x></>['__proto__']: let (__noSuchMethod__) <x/> ? <x><y/></x>.__defineSetter__(\"__proto__\", function () { *::*; } ) : constructor+=<><x><y/></x></>, __noSuchMethod__: <x/>.true }), __proto__: [, , ] }) = (Function()); (([,,z1].valueOf(\"number\"))).call([((uneval(<x><y/></x>))) if (<y><z/></y>)], this.__defineSetter__(\"prop\", <x><y/></x>), (<><x><y/></x></> * this)); ({prop getter: [1,2,3,4].map })) const constructor = #1=[#1#];\nexport *;\n }");
tryItOut("with({<x/>: \nwindow})const __iterator__;");
tryItOut("if(__parent__.((window.isPrototypeOf((window %= 0/0).hasOwnProperty(\"constructor\"))))) { if (( \"\" ++)) {export * }} else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <y><z/></y>) yieldyield #1#; }");
tryItOut("do var prototype, function::__iterator__; while((<>(@foo if (prop))</>(prop if (<x><y/></x>), ({ prototype: ({ __count__: __count__ }), __iterator__: ({ __iterator__: prop, __parent__: __parent__ }) }) = undefined.setter setter= function(y) { yield y; ;; yield y; })) && 0);");
tryItOut("{throw throw StopIteration;; }");
tryItOut("with({x::__count__: __iterator__ = [11,12,13,14].map}){; }");
tryItOut("continue M; const <x/>;");
tryItOut("if((*::* >>>=<x/>)) function::__iterator__; else  if ([*]) export constructor;");
tryItOut("/*for..in*/for(let [] in ((new (undefined)( /x/ ))([] = (new [1,2,3,4].map( case <x><y/></x>: let __proto__;break; case <x/>: export __noSuchMethod__;<x><y/></x>;break; throw <><x><y/></x></>;break; break; default: var prototype, __iterator__;break; case this: __count__;case *::*: *;break; let __parent__, __proto__ = <y><z/></y>;break;  window)).__lookupGetter__(\"__parent__\")))){/*for..in*/for([prop, __iterator__] = __parent__ = __iterator__ in [,,]) ;throw StopIteration; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let __proto__ =  '' ; <x/>; this)  { gc() } ");
tryItOut("/*infloop*/for(var __count__; (*.unwatch(\"__proto__\")); __parent__.valueOf(\"number\")) export __parent__;");
tryItOut("M:with(0x99){{} }");
tryItOut("yield <><x><y/></x></>.__lookupGetter__(\"prop\");");
tryItOut("/*for..in*/M:for(prototype in <>{{} }</>) {<><x><y/></x></> }");
tryItOut("{let prop, __proto__ = *;continue ; }");
tryItOut("/*infloop*/do { } while(this.zzz.zzz);");
tryItOut("/*infloop*/for(let __parent__; __noSuchMethod__ = prop; <><{__proto__}></{__proto__}></>) {function ([y]) { }; }");
tryItOut("L: let constructor = @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in constructor) {gc()continue ; }");
tryItOut("with([[]]){*; }");
tryItOut("M:if(__noSuchMethod__) { if (__noSuchMethod__) return; else {continue ; }}");
tryItOut("with({}) { yield ([z1,,] /= [1,,]); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <><x><y/></x></>\t) __count__;");
tryItOut("/*for..in*/for(var prop in <><x><y/></x></>) {; }");
tryItOut("L:if(*) __iterator__ = <x><y/></x>, constructor = this; else  if (<x><y/></x>) {yield this;yield <x><y/></x>; } else {throw  /x/ ;; }");
tryItOut("/*for..in*/for(var [__iterator__, constructor]\n = -1.watch(\"__parent__\", (constructor = window)) in __noSuchMethod__.__count__ << 5.0000000000000000000000) with(window){throw <x/>;<x><y/></x> }");
tryItOut("if(window.__count__) throw __noSuchMethod__; else  if (*) with({__parent__: [, , ({ __parent__: prototype }), ({ __count__: ({ prototype: prototype, prop: prototype }), __noSuchMethod__: [] }), __iterator__]})eval");
tryItOut("return String();");
tryItOut("switch(((p={}, (p.z = window)())) <= ({: * })) { default: constructor = __iterator__;break; case new Boolean(prototype.constructor = <x><y/></x>,  \"\" ): __count__.__iterator__ = <><x><y/></x></>.__iterator__if(.2, __iterator__) { if (window) {continue M;(function () { this; } ).call } else return;}break; /*infloop*/for(let __iterator__ =  /x/ ;  \"\" ; constructor) {export __proto__;var __count__ = <x><y/></x>; }break; /*infloop*/L:for(<y><z/></y>[ /x/ ]; (gc).call(<x><y/></x>, this, this); (1e81 && *::*)) (window)\n/*infloop*/for(var __parent__ = prototype; <x><y/></x>; [[1]]) {gc() }break; case [(new eval( \"\" , (gc).apply)) for each (__proto__ in *) for each (__parent__ in 3/0)]: export (\t{ __iterator__: prototype, __noSuchMethod__: __parent__ });return undefined;break; case 6: ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let x::__count__ in <><x><y/></x></>) {const __noSuchMethod__, __count__; }/*\n*/");
tryItOut("let(function::prop) { (<x><y/></x>);");
tryItOut("/*for..in*/for(var prototype = ([this\n].some((<x/>).__defineSetter__)) in <><x><y/></x></>) {let prototype = <><x><y/></x></>, constructor;\f }");
tryItOut("throw undefined;\n{}\n");
tryItOut("/*for..in*/for(var __parent__ in ((('haha'.split).apply)(__proto__ = false)))/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor\r in (gc())) {if(@foo) { /x/g ;yield; } else  if (prototype) {} }");
tryItOut("{/*infloop*/while(__noSuchMethod__ = prototype = <><x><y/></x></>){if((new Function).call([z1,,].yoyo(<y><z/></y>), [({a1:1})].map(gc))) {gc()export prop; } else  if (\tprop = <x/>) break ; } }");
tryItOut("do break ; while((#1#) && 0);");
tryItOut("/*for..in*/L:for(const __count__.__parent__ in prop) export *;");
tryItOut("/*infloop*/L:for(let prop = [function(id) { return id } | <y><z/></y>] instanceof (<bbb xmlns=\"__proto__ = window;\"><ccc:ddd><ccc\f:ddd><x><y/></x></ccc:ddd></ccc:ddd></bbb>.*); *::*; prop.((<><x><y/></x></>.prop))) {/*infloop*/do {export *;gc() } while((__proto__.__count__ = #1#)); }");
tryItOut("/*for..in*/for(var prototype in __noSuchMethod__.__iterator__ = [,,z1].watch(\"__parent__\", window)) __iterator__ = *");
tryItOut("/*for..in*/M:for(var __iterator__ = (eval(\"if(window) function (prototype) { return .2 } \", @foo)) in __parent__) return __count__;");
