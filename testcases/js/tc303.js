tryItOut("if(yield ( ''  ? __parent__ : <x><y/></x>)) { if (<zzz>this.__defineGetter__(\"constructor\", function(q) { return q; })</zzz>) break ;} else M:while((this) && 0){const __parent__ = undefined, __iterator__ =  /x/ ; /x/g ; }");
tryItOut("(*::*);export constructor;");
tryItOut("with({}) { for(let y in [5,6,7,8]) (undefined); } ");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __noSuchMethod__] = @foo.eval(undefined) in false) {;gc() }");
tryItOut("if( \"\"  for each (prototype in undefined)) return;");
tryItOut("/*infloop*/for(let prop; (this.zzz.zzz); @foo % yield *.yoyo(-undefined)) return\n");
tryItOut("with((__iterator__.prop)){continue L;with({}) return; }");
tryItOut("");
tryItOut("/*for..in*/M:for(var [__count__, constructor] = function(q) { return q; } in this.__defineSetter__(\"__count__\", 4.)) {while((<y><z/></y>) && 0)let constructor = __noSuchMethod__; }");
tryItOut("/*infloop*/for(var ({ \f__iterator__: [] }) = Object(__proto__.__iterator__ = undefined, 033); (*.__count__+=(<y><z/></y> , #1#).prop).__defineGetter__(\"__count__\", ((__parent__ = constructor).watch).apply); +((*.__defineGetter__(\"__proto__\", ([1,2,3,4].map).apply)).yoyo((false .@ (-1))))) #1");
tryItOut("yield;\n(<><x><y/></x></>);\n");
tryItOut("with({}) for(let y in [5,6,7,8]) with({}) { this.zzz.zzz; } ");
tryItOut("/*infloop*/do {if((.2.@*)) { if (({__iterator__: <y><z/></y>, prototype: <x><y/></x> })) /*infloop*/do [[]]; while(<x/>); else yield <><x><y/></x></>;} }\f while((<><x><y/></x></>.__parent__ = (-1)));");
tryItOut("/*infloop*/M:for(let [({ constructor: constructor }), , , , ({ break M;: __noSuchMethod__, __count__: __count__ })] = __count__ = 1.3; [ /x/g ].sort(({}).hasOwnProperty); *) {\n }");
tryItOut("/*infloop*/M:while(let (__noSuchMethod__ = constructor) -3/0)with({constructor: null})case 5: constructor;break; case 2: break; case 1: default: break; break; case 5: false;");
tryItOut("__iterator__ = delete;");
tryItOut("return;");
tryItOut("with({__count__: ((__iterator__).__defineSetter__).apply % this\n++}){export constructor; }");
tryItOut("with({__parent__: (new this.zzz.zzz([prop], [z1,,]))})gc()");
tryItOut(" { yield (__proto__.(#3={a:#3#}.\tpropertyIsEnumerable(\"prototype\"))) !== [1,,] } //h\n");
tryItOut("/*for..in*/for(let __noSuchMethod__ = this.__defineSetter__(\"__count__\", function(y) { yield y; throw <><x><y/></x></>;; yield y; }) in 3) {; }");
tryItOut("let (prototype = 1e+81) { if(*) return null; else ; }");
tryItOut("this.zzz.zzz;");
tryItOut("if((undefined.__defineGetter__(\"[[1]]\", 'haha'.split))) {this; } else { }");
tryItOut("/*infloop*/do {(__noSuchMethod__);/*infloop*/while(__noSuchMethod__, prop = <y><z/></y>)export *; } while(this.__defineSetter__(\"__proto__\", (this).watch).throw(#0=({__parent__: true})) % <xxx {__iterator__}={(new constructor)} />);");
tryItOut("if(__parent__ = ({a2:z2})) {;continue ; }");
tryItOut("for(let y in []);");
tryItOut("let(__noSuchMethod__) { prop");
tryItOut("if(<><x><y/></x></>) { if (undefined) {yield;gc() }} else return null;");
tryItOut("/*infloop*/for(const __proto__; this; window) {gc()({}).hasOwnProperty }");
tryItOut("switch((new ( \"\" )())) { case 6: yield  /x/ ;Math.sinbreak; default: (<><x><y/></x></>);case new Boolean(): undefined;{}case (uneval(*)): break;  }");
tryItOut("if((\fnew 'haha'.split())) {export __iterator__; }");
tryItOut("if(yield <y><z/></y>) {throw [];continue M; }");
tryItOut("/*infloop*/for(<y><z/></y>; __count__; ({__iterator__: __parent__ = ({__count__: Exception(<><x><y/></x></>, __count__) })})) {/*infloop*/for(let constructor; __noSuchMethod__.constructor = <x><y/></x>; .2.__lookupGetter__(\"constructor\")) throw  /x/ ;L:do {const __noSuchMethod__ = [,], __count__ = 3.141592653589793; } while(((yield <x/>[String(@foo,  \"\" )])) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in prop) return *;");
tryItOut("return; const __iterator__;");
tryItOut("/*infloop*/for((yield prop.(<y><z/></y>)); <><bbb xmlns=\"<><x><y/></x></> >>> <><x><y/></x></>\"></bbb></>; [z1,,]) {/*infloop*/do {throw prop; } while( /x/g );if(*.__lookupSetter__(\"constructor\")) {constructor, __iterator__; } else {gc()gc() } }");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = (this.__defineGetter__(\"__parent__\", (<><x><y/></x></>).call)) in null) {{} }");
tryItOut("{var __noSuchMethod__ = <y><z/></y>;(new Function(\"gc()\")) }");
tryItOut("L:if([new (function  prop ()<y><z/></y>)() if (true\t)]) ; else yield gc();");
tryItOut("with({__count__: ({constructor: <y><z/></y>, constructor: __proto__ })}){constructor, __iterator__ =  /x/g ;for(let y in []); }");
tryItOut("/*infloop*/for(constructor = yield 1e81; ({ get constructor __noSuchMethod__ () { window; } ,  set prototype(__proto__) { throw true  if (1.2e3)  }  }); new Number( /x/g , 0/0)) yield;");
tryItOut("(3.141592653589793);");
tryItOut("L:if(*::*) {let __iterator__, __iterator__; } else  if (*::*) {null;{} } else {continue ;gc() }\nyield;");
tryItOut("if(@foo) { if (eval(\"var __iterator__;\", @foo)) <y><z/></y>; else ({}).hasOwnProperty}");
tryItOut("let (__count__, __parent__) { throw __count__; }");
tryItOut("switch(let (constructor, __noSuchMethod__ = <y><z/></y>) #3={a:#3#}) { case 9: if((function ([y]) { })()) yield <><x><y/></x></>; else  if (window) {;(<y><z/></y>); } else {continue M;yield constructor; }break;  }");
tryItOut("L: {continue ; (({__noSuchMethod__: <><x><y/></x></> })) || prop }");
tryItOut("M:if(5.0000000000000000000000.yoyo(<><x><y/></x></>)) { if (__iterator__;.propertyIsEnumerable(\"__proto__\")) {M:if(true) {prototype;<><x><y/></x></> }\n;\n }} else [,,];");
tryItOut("M:switch((<x><y/></x>.(window))) { default: M:do {return false; } while((<><x><y/></x></>) && 0);case __parent__ =  '' .throw(1e81): break; case ({a2:z2}): break; case 4: while(((p={}, (p.z = __parent__)())) && 0){}case 8: ((<x><y/></x> <= Math.pow));L: this;break; case (<x><y/></x> += function ([y]) { }): case (uneval(eval)): yield; }");
tryItOut("/*infloop*/for(1.3; new (function(id) { return id })().throw([<><x><y/></x></>].filter(( /x/ ).watch)); ({}).hasOwnProperty) {this.zzz.zzz;prop. \"\" ['__proto__'] = prop; }");
tryItOut("throw StopIteration;");
tryItOut("L: {__noSuchMethod__ = 3/0, __proto__ = [[]];__iterator__ }");
tryItOut("{{throw <x><y/></x>; } }");
tryItOut("/*for..in*/L:for(var window['__proto__'] in 'fafafa'.replace(/a/g, (new Function(\"continue L;\")))) if(<x><y/></x> for (constructor in [])) {; } else  if () {let constructor, ({});throw (-0); }");
tryItOut("/*for..in*/for(let [prototype, __count__] = (function  prototype (constructor, __noSuchMethod__) { return *::* } (*)) in <x/>) export *;");
tryItOut("/*for..in*/for(const [prototype, prototype] = (typeof (__noSuchMethod__.unwatch(\"constructor\"))) in (function(q) { return q; }).call(<x><y/></x>, (__iterator__ :: <><x><y/></x></>))) {const constructor; }\t");
tryItOut("__parent__ = __count__;\nif((null / null)) { if (__proto__.__proto__) break ; else const __proto__ = false, constructor;}\n");
tryItOut("/*infloop*/while(() / ((<x><y/></x>)(window, <x><y/></x>))){/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <y><z/></y>) null;{} }");
tryItOut("with({}) with({}) { return (this.__defineGetter__(\"prop\", eval)); } ");
tryItOut("/*infloop*/for(let ({ __parent__: ({ __proto__: ({ __noSuchMethod__: __parent__, constructor: ({ (__iterator__): ({ prop: , __count__: __proto__ }) }) }) }) }) = (this.__defineSetter__(\"__noSuchMethod__\", new Function))(); (<><x><y/></x></>[this]); new (eval(\"var constructor, __iterator__ = <><x><y/></x></>;\", __count__ = <y><z/></y>))(( /* Comment */'fafafa'.replace(/a/g, ({}).hasOwnProperty))).__lookupGetter__(\"__count__\")) if(([,] .@ <y><z/></y>)) { if ((__count__.__iterator__)) {gc()(1 for (x in [])) } else {; }}");
tryItOut("M:with(([11,12,13,14].filter)){/*for..in*/for(const __proto__ in 0/0) return <><x><y/></x></>; }\n/*infloop*/do yield; while(033)\n\n");
tryItOut("let(prototype =  /x/  | 033, __noSuchMethod__ = [15,16,17,18].sort([1,2,3,4].slice, [15,16,17,18].some(Function, function(id) { return id }))) { for(let y in []);");
tryItOut("L:with(1.3){ /x/ ;return __noSuchMethod__; }");
tryItOut("if(<x><y/></x>.unwatch(\"__proto__\")) throw prototype; else  if ((__count__)[false] != (@foo .@*:: __iterator__)) {break ; } else throw 0.1;");
tryItOut("this.zzz.zzz;");
tryItOut("continue L\n<><x><y/></x></>;");
tryItOut("if(<y><z/></y>) { if ((.*)isPrototypeOf(constructor 'fafafa'.replace(/a/g, eval))) return; else {function(y) { yield y; yield;; yield y; } const prop;break ; }}");
tryItOut("do {; } while((new this.__count__(<x/>, (__parent__ = window))) && 0);");
tryItOut("if(((-1)++)) { if (#1#) {break L;prop; } else {export __parent__;yield window; }}");
tryItOut("try { for(let y in []); } catch(constructor if (function(){with({}) let(__proto__, __proto__) ((function(){prototype = __iterator__;})());})()) { this.zzz.zzz; } catch(__count__ if [(__count__.__proto__ =  \"\" [1e4]) if (<y><z/></y> in *::*))]) { return; } finally { for(let y in [5,6,7,8]) return; } ");
tryItOut("L:if((prop.__count__ setter= (*).watch)) return <x><y/></x>; else  if (<x/>( /x/g , function(id) { return id })) {gc() } else {return; }");
tryItOut("/*infloop*/while((__iterator__\n))export *;");
tryItOut("M:with(([(__proto__ = prototype) if (1e-81)])){with({function::__proto__: ( '' .eval(__noSuchMethod__))}){function ([y]) { };continue ; } }");
tryItOut("export *;\feach, __noSuchMethod__;");
tryItOut("/*infloop*/L:for(const __parent__; __proto__; <><x><y/></x></>) {export prop;return; }");
tryItOut("gc()");
tryItOut("if(<y><z/></y>) { if (var __proto__;) {let __count__, constructor = window;__iterator__; } else {return; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in [,,z1]) (1 for (x in []))");
tryItOut("/*infloop*/do {const constructor, __iterator__; } while((prop-=[prop, __iterator__]) ? 1e+81 >>>=undefined : ('fafafa'.replace(/a/g, (new Function(\"throw this;\")))));");
tryItOut("/*for..in*/M:for([constructor, __proto__] = false in <><x><y/></x></>) {throw __noSuchMethod__;yield; }");
tryItOut("with({}) constructor = constructor;");
tryItOut("(0/0);");
tryItOut("throw __parent__;[1,2,3,4].map");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = <y><z/></y> in 1e+81) L: ");
tryItOut("if(new <><x><y/></x></>()) { if (4.) export *; else {__parent__, __count__ =  /x/g ; }}");
tryItOut("{/*infloop*/for(const __iterator__; 0x99 = <><x><y/></x></>; \f*::*[ /x/g ]) {if(<y><z/></y>) { if (<x><y/></x>) {gc()export *; }} else {__noSuchMethod__ } } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:while(1.2e3){yield; }");
tryItOut("gc()\n");
tryItOut("do {gc()continue ; } while(((.valueOf(\"number\")).propertyIsEnumerable(\"__iterator__\")) && 0);");
tryItOut("/*for..in*/for([__proto__, __proto__] = Date( \"\" ).__parent__ in this) throw __noSuchMethod__;");
tryItOut("const __iterator__;throw ( '' ());");
tryItOut("yield *::*");
tryItOut("\nswitch(\n*.propertyIsEnumerable(\"__noSuchMethod__\")) { default: case ((new Function).call)(): break; export __count__;break; case 2: (false).watch }\n");
tryItOut("{return (<y><z/></y>.unwatch(\"__iterator__\")); }");
tryItOut("export *;");
tryItOut("throw <x><y/></x>; const constructor;");
tryItOut("/*infloop*/while(prop){}\n");
tryItOut("{while((yield = <y><z/></y>) && 0){do /*for..in*/for(var __count__ = <><x><y/></x></> in  /x/ ) {gc()gc() } while(([,,] ? new (function (prop) { return @foo } )(window) : __proto__) && 0); } }");
tryItOut("/*for..in*/for(let [__parent__, prototype] = ([11,12,13,14].sort) in __count__ =  /x/ ) if(*::*) {throw *;yield true; } else <bbb xmlns=\" \"\" .__lookupGetter__(\"__proto__\").__lookupSetter__(\"__count__\")\"> </bbb>\f");
tryItOut("if(false .@*:: null) { if ([window].some(Function)) throw <><x><y/></x></>;} else *::*;");
tryItOut("if(<xxx {__parent__}={prototype} />.(((p={}, (p.z = prototype, ({ __parent__: constructor }))())))) { if ((prototype+=this for (__noSuchMethod__ in 5.0000000000000000000000) for each (__iterator__ in ({a1:1})))) if(<><x><y/></x></>) {throw *::*; }} else ;");
tryItOut("if([* for (__parent__ in this)] != <x><y/></x>\n << <><x><y/></x></>) const __proto__ = [[]]; else {yield;(@foo); }let ( { return * } ) { prototype = -0; }");
tryItOut("switch(__noSuchMethod__ = new (Math.sin)(__noSuchMethod__ = \t /* Comment */this, ( /* Comment */{}))) { case 8: break;  }");
tryItOut("switch(__proto__ = window) { case 2: throw true; }");
tryItOut("if(false) ; else  if (1e81) {export *; } else [[]];");
tryItOut("/*infloop*/for(const __iterator__; __count__ = <x><y/></x>; ((<><x><y/></x></>)(@foo,  \"\" ))) continue M;");
tryItOut("/*infloop*/for(let __noSuchMethod__; prop+=arguments; (#1=[#1#].eval(*))) const prototype, __iterator__;");
tryItOut("/*for..in*/for(const [__count__, __count__] = constructor.__iterator__ in let (prototype) this) {{/*infloop*/do __proto__; while(<><x><y/></x></>); } }");
tryItOut("switch((undefined instanceof <><x><y/></x></>)) { case [<x/> if (null)]: (<><x><y/></x></>);throw <x><y/></x>;break; case 5: let __proto__\n;033; }");
tryItOut("if(this.__defineSetter__(\"__parent__\", this)) <!--yy--> else  if ((this.__defineSetter__(\"delete\", (<x><y/></x>).watch))) {continue M;yield; }");
tryItOut("switch(prop = <x/>) { case 8: continue M;break; default: ;break;  }");
tryItOut("(new Function()) @ ({ function::__count__: prototype, __iterator__: prop }) = prop");
tryItOut("/*infloop*/for(const __count__ = __proto__ = __parent__; (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></> instanceof (<x><y/></x>.yoyo(<y><z/></y>))); new (new Function)(constructor)()) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in new (*::*)()) /*for..in*/for(const __noSuchMethod__+=<x/>['constructor'] in this) {; }/*infloop*/do gc() while( for (prop = __parent__.__count__ in -3/0 || window) for (constructor in <x><y/></x>)); }");
tryItOut("/*for..in*/L:for([prototype, constructor] = this.__defineSetter__(\"prototype\", (<><x><y/></x></>.isPrototypeOf(<y><z/></y>))) in [prototype]) return;\nvar __iterator__, __parent__;\n");
tryItOut("M:if(window.unwatch(\"__noSuchMethod__\")) { if ((({ get constructor prop () { return [\n*] === yield <><x><y/></x></> } , __parent__: [(uneval(<x><y/></x>))].filter(Math.pow) }).*)) Function else (constructor.prototype);}");
tryItOut("let (getter = function::constructor = 1e81, constructor = #1=[#1#]) { [z1,,]; }");
tryItOut("/*for..in*/for(var __count__ = (({({ constructor: prop, __iterator__: __iterator__(<x><y/></x>) }) })) in <><x><y/></x></>.__defineGetter__(\"__count__\", function (prop, prototype) { yield this } )) continue M;");
tryItOut("if(#\n2=({__count__: this}) >>>=null) {gc()/*for..in*/for(let __proto__ in ((eval)(new ((-1))()))){ } } else  if (__iterator__ = prototype) {/*infloop*/while([,,z1].eval(-0)){const prop, try { export __iterator__; } finally { break M; }  = null;export __parent__; }return; } else /*for..in*/for(const [prop, __noSuchMethod__] = [] = __iterator__ in __proto__) return;");
tryItOut("return <x/>;");
tryItOut("/*for..in*/for(const (([ /x/g ]))((__proto__ = <x/>)) in ((({}).__lookupGetter__)((__proto__ = __iterator__)))){(({})); }");
tryItOut("if(delete <><x><y/></x></>) { if (function(id) { return id }) /*infloop*/do __parent__, __noSuchMethod__ = <x><y/></x>; while(window);} else ;");
tryItOut("gc()");
tryItOut("/*for..in*/for(let __parent__ = this-- in __iterator__) /*infloop*/do function(q) { return q; } while(prop);");
tryItOut("/*infloop*/for(*::*; constructor; ()) gc()");
tryItOut("M:if(<x><y/></x>) return; else  if (1e-81) {return this;throw 1.3; }");
tryItOut("(null);");
tryItOut("switch( '' ) { case #1#: (<><x><y/></x></>);break;  }");
tryItOut("for(let y in []);");
tryItOut("yield;\nyield window;\n");
tryItOut("if([15,16,17,18].sort(((<y><z/></y>).__defineSetter__).call, 0)) { if ((Object())) <><x><y/></x></>; else {/*infloop*/M:for(let __parent__ = ({__count__ getter: /a/gi, __noSuchMethod__ getter: (/a/gi).apply }); (true.__defineSetter__(\"constructor\", (null).__defineSetter__)); #0=[[]]) {throw window;yield  /x/ ; } }}");
tryItOut("switch(prototype.prototype = prop) { case ( /x/  =  /x/g ): export __proto__;break;  }");
tryItOut("constructor;yield  /x/ ;");
tryItOut("with({}) { return; } ");
tryItOut("Date(window, @foo);");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))) { if (<><x><y/></x></> != <x/>) {return 0/0; } else return;}");
tryItOut("if(<x><y/></x>(prototype, window)) throw *; else {throw <><x><y/></x></>;yield; const prop; }");
tryItOut("with({}) export __noSuchMethod__;");
tryItOut("while((new ((function  __proto__ (__count__)[[]]).apply)()) && 0)function (prototype, __count__) { yield <><x><y/></x></> } ");
tryItOut("throw <x><y/></x>;\n{}\nbreak ;\n");
tryItOut("{}");
tryItOut("{export *;{export *;if(<x/>) {export prototype; } else {break ; } } }");
tryItOut("/*infloop*/for(constructor = <x><y/></x>; this.__defineSetter__(\"__iterator__\", eval); __proto__ = null) {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\f for  each(const __iterator__ in <></>) {/*for..in*/L:for(let (function::__iterator__) in ((new Function)((new ([1,2,3,4].slice)())))){let __proto__ = __noSuchMethod__;const constructor = __noSuchMethod__, constructor = <x><y/></x>; }function  constructor () ''  }");
tryItOut("/*infloop*/for(\nlet (__iterator__ = this) this.zzz.zzz; ((yield constructor)); (yield  /* Comment */true) @ <x/>) gc();");
tryItOut("new Function");
tryItOut("L: with({}) { for(let y in [5,6,7,8]) __iterator__( '' ) = __noSuchMethod__; } ");
tryItOut("/*for..in*/for(__parent__ = .2 in <><x><y/></x></>) return;");
tryItOut("let __count__ = true");
tryItOut("if(3) { if (null) {gc()gc() }} else gc()");
tryItOut("throw StopIteration;");
tryItOut("let (prop, __iterator__) { {case 9: break; } }");
tryItOut("/*infloop*/L:for(var prop; \n__noSuchMethod__ =  \"\" ; arguments) {;function (__noSuchMethod__) { yield __count__ } do yield; while(((<x><y/></x>--)) && 0); }");
tryItOut("if((new String(undefined, __proto__) !== new (function(q) { return q; })( '' ))) {} else export *;");
tryItOut("{ '' ;let(__parent__, __count__) { let __parent__ = __proto__, prototype = prototype; }");
tryItOut("switch(([function::constructor, , ({ __proto__: __iterator__ })] = 0.1--)) { default: break;  }");
tryItOut("return;");
tryItOut("M:if((<{__noSuchMethod__}><!--yy--></{__noSuchMethod__}>.((prop =  \"\" ))))  else export *;");
tryItOut("/*infloop*/while([] = ((p={}, (p.z = (__noSuchMethod__%= \"\" ))())))throw null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in 3.141592653589793) export *\narguments;");
tryItOut("with({__parent__: [] = constructor.prototype getter= (window).apply.__lookupGetter__(\"__count__\")}){__iterator__; }");
tryItOut("if(((#0=({prop: undefined}))[false * [z1]])) let (constructor) { export constructor; }");
tryItOut("return __iterator__.prototype;");
tryItOut("let (__count__ =  /x/g ) { __proto__, constructor; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((new Math.sin(.2)))((/a/gi)<zzz>__count__</zzz>.__noSuchMethod__ = ({__noSuchMethod__: __noSuchMethod__ }) call(<y><z/></y>), ([function  __proto__ () { return 0/0 } ].map(function(q) { return q; })) )))){export __proto__;; }");
tryItOut("/*for..in*/for(var prototype in ((function(y) { yield y; (@foo);; yield y; })(window))){}\f");
tryItOut("/*infloop*/L:while('fafafa'.replace(/a/g, ((@foo++)())))if(new (new [](\t))(<y><z/></y>, *)) { if (({ set __count__(function::prop) { export prop; }  })) {gc(); } else {}}");
tryItOut("let (({ __parent__: __proto__ })) {  }");
tryItOut("/*infloop*/for(1.2e3; <y><z/></y>; undefined) {throw arguments; }");
tryItOut("/*infloop*/while((3.141592653589793 << 1.2e3 if (window)))__iterator__");
tryItOut("do export __noSuchMethod__; while((undefined) && 0);");
tryItOut("{export prototype;L: {@foo; } }");
tryItOut("{null;switch(-(-1)) { case []:  } }");
tryItOut("this.zzz.zzz;if((prototype = <><x><y/></x></>)[(<y><z/></y>.valueOf(\"number\"))]) /*for..in*/\tfor(__noSuchMethod__ in <><x><y/></x></>) gc() else continue M;");
tryItOut("/*for..in*/for(({a2:z2}).prototype in ((Math.pow)(((p={}, (p.z =  \"\" )())))))export __parent__;");
tryItOut("gc() const constructor;");
tryItOut("with({prop: --window}){yield true;/*infloop*/do function () { gc() }  while(*::*); }");
tryItOut("let (__iterator__) { return *\nif(<><x><y/></x></>) {break M; } else  if (\f__noSuchMethod__) \t }");
tryItOut("/*for..in*/for(__noSuchMethod__ in let (__noSuchMethod__) true) {try { (window); } catch(__proto__ if (function(){return;})()) { export __count__; } finally { {} } export *; }");
tryItOut("/*for..in*/for(const [__proto__, __iterator__] = (eval(\"prop;\", 1e4.@foo)) in (constructor = __noSuchMethod__)) /*for..in*//* nogeckoex bug 349964 */ for  each(( /x/g )(undefined) in  '' ) {throw  \"\" ; }");
tryItOut("if(0/0.__lookupSetter__(\"constructor\")) {({}).__lookupGetter__yield this; } else  if (__count__.__noSuchMethod__ = this) {(<x/>); }");
tryItOut("/*for..in*/for(var [__parent__, prototype] = prototype in yield __proto__ = @foo) throw <y><z/></y>;");
tryItOut("if(get.__count__) {for(let y in []);yield new prop = false(new prop(this)); } else {while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>) && 0)(function ([y]) { })(); }");
tryItOut("/*infloop*/while(#1#.*)continue L;");
tryItOut("__parent__");
tryItOut("/*for..in*/[({ __proto__: constructor }), __count__, [, __count__], [__proto__, __count__, __count__, __noSuchMethod__, ]]for(const yield =  \"\"  in <y><z/></y>) \f{return; }do {{} } while(( '' ) && 0);");
tryItOut("/*infloop*/while((<x/> << <y><z/></y>))<><x><y/></x></>;");
tryItOut("/*for..in*/for(const <x><y/></x> in ((function (__parent__) { return 3/0 } \f)((<><x><y/></x></>.__lookupSetter__(\"__count__\"))))){const prototype, yield = [z1]; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__.prototype in (({ set __iterator__ prototype (__noSuchMethod__, prototype) { return (__parent__ = true) }  }))) export *;");
tryItOut("__parent__ = __count__;");
tryItOut("const prop = false, __iterator__;");
tryItOut("with({constructor: prototype.__noSuchMethod__ = <y><z/></y>.watch(\"prototype\", new Function)})prop; const constructor;");
tryItOut("let (__iterator__, __parent__ = prototype) { Math.pow }");
tryItOut("/*for..in*/L:for(prop in null) export prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in function(id) { return id }) L:with(window.__defineGetter__(\"__parent__\", try { ; } catch(__iterator__) { __iterator__; } finally { var __parent__ = []; } ))gc");
tryItOut("/*infloop*/L:for([,,z1]; 0x99 @ true; (__proto__ = __iterator__)) return *::*;");
tryItOut("/*for..in*/M:for(let __count__.prototype = __iterator__.prop in undefined) {var __iterator__ = @foo; }");
tryItOut("yield (__iterator__ = undefined)[__iterator__.__parent__ = prototype];");
