tryItOut("export *; const __proto__;");
tryItOut("{{var __noSuchMethod__; }switch((<x/>).call(1.3, )) { default: break;  } }");
tryItOut("let (prop, __noSuchMethod__ = ([__noSuchMethod__, , ] = (null ? [1,,] :  \"\" )[4.])) { {window;__proto__.prototype } }");
tryItOut("/*infloop*/do {function  prop (prop, __noSuchMethod__) { yield @foo }  } while(<x><y/></x>);");
tryItOut("/*infloop*/while(constructor =  '' ){; }");
tryItOut("while((\n(--<x><y/></x>( /x/g ))) && 0)while((null) && 0){{}return 1e-81; }");
tryItOut("/*infloop*/do export __iterator__; while((<x><y/></x>)[ \"\" ]);");
tryItOut("Function");
tryItOut("/*for..in*/for(const prop('fafafa'.replace(/a/g, Function)) in new Exception(<y><z/></y>, undefined)) {__proto__ = constructor.propertyIsEnumerable(\"__noSuchMethod__\") = __count__; }");
tryItOut("L: {export *; }");
tryItOut("with(new (<><x><y/></x></>)((({__parent__: prop })), prop, prop)){const __count__, prototype = __iterator__; }");
tryItOut("export *;gc()");
tryItOut("{} const prop;");
tryItOut("/*for..in*/for(var [__count__, __parent__] = null.__lookupGetter__(\"__iterator__\") in ()) {continue M; }");
tryItOut("__proto__\nif(let (__iterator__ = 4., __proto__ = 0x99) __proto__, <><x><y/></x>\f</>) /*\n*/{ /x/ ; } else  if (( \"\" ).call(#0=({__count__:  '' }), )) {export *;continue ; }");
tryItOut("if((<x/>.valueOf(\"number\") >>>=prop.__lookupGetter__(\"prototype\"))) {var __noSuchMethod__, __iterator__;return <x><y/></x>; } else  if (*::*.unwatch(\"__count__\")) continue L;");
tryItOut("L: {if(__noSuchMethod__ = ( == <x><y/></x> = <x><y/></x>)) {gc()return; } }");
tryItOut("with([*::*.eval(__parent__)]){/*infloop*/do (1 for (x in []))\nvar constructor = *::*, __parent__; while(<x/>);/*infloop*/M:for((@foo if (window)); prototype, __iterator__; __iterator__.prototype) {gc()constructor, __proto__ = __iterator__\f; } }");
tryItOut("L:if() { if (\fconstructor = *::*) {<x><y/></x>;yield (-0); } else <ccc:ddd><x><y/></x>yyy</ccc:ddd>}");
tryItOut("/*infloop*/L:while(true *= <y><z/></y>.@*){export *;__iterator__; }");
tryItOut("if(__parent__, __iterator__) { { yield <x><y/></x> } break M; }");
tryItOut("L: if((eval(\"*\", constructor.__proto__ = function::prototype))) { } else {constructor = -1; }");
tryItOut("if(<y><z/></y>) { if (((#1# .. <x\f><y/></x>).@foo)) {return;gc() } else /*for..in*//* nogeckoex bug 349964 */M:\t for  each(var __iterator__ in </*\n*/x><y/></x>) {window;yield; }}");
tryItOut("{/*for..in*/L:for(const prop =  /x/  .. @foo ? window : <><x><y/></x></> in (!undefined)) {yield <y><z/></y>;gc() } }");
tryItOut("if(((function(q) { return q; })(this, (eval(\"window\", <y><z/></y>)).valueOf(\"number\")))) { if (<><xxx {function::__noSuchMethod__}={((*.__lookupSetter__(\"constructor\")) @ 033.unwatch(\"prop\"))} /></>) return; else yield (0x99 < *::*);}");
tryItOut("with(({__noSuchMethod__: (({ constructor: __noSuchMethod__ }) = window)}))export *;");
tryItOut("while(( /x/ .unwatch(\"constructor\")) && 0){/*for..in*/for(const constructor in @foo) {export *; } }");
tryItOut("__noSuchMethod__ = 1e4, prop;\n/*infloop*/for(const []; 'fafafa'.replace(/a/g, function  __parent__ ()null); prototype.__defineSetter__(\"constructor\", ({}).hasOwnProperty)) {throw prop; }\n");
tryItOut("{export *;const constructor, __proto__ =  \"\" ; }");
tryItOut("/*for..in*/for(var true.prop in ((default: break; if(<><>(uneval(<x/>))</></>) {gc() }break;  if (window))([11,12,13,14].some))){export *;throw false; }");
tryItOut("/*for..in*/for(let  in +[,] in <><bbb xmlns=\"(function(id) { return id }).__defineSetter__\"><!--yy--></bbb></>.yoyo(constructor.prop getter= (-1).watch(\"__parent__\", @foo))) break M;");
tryItOut("/*infloop*/for(var constructor; <>true</>; (yield (<y><z/></y>.__lookupSetter__(\"constructor\")))) {; }");
tryItOut("do {return;yield;var __proto__ = 033; } while((([.2].filter(function(y) { yield y; yield;; yield y; }))) && 0);");
tryItOut("{if(prop &= 3) {propvar constructor = @foo; } else  if (__iterator__.__proto__ getter= (1 for (x in [])).yoyo(new function(q) { return q; }(false))) return; else default: /*infloop*/while(this.eval(true)){gc()3.141592653589793; }const __iterator__ = <x><y/></x>, __noSuchMethod__ = prop\nlet(prop, __proto__) { *;let \r(prop = yield (Error()), constructor) { /*for..in*/M:for(let __parent__ = this.__lookupGetter__(\"constructor\") in @foo) throw <><x><y/></x></>; } }");
tryItOut("L: {return  /x/ ; }\nexport __proto__;");
tryItOut("let((\t{ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: prototype }), __noSuchMethod__) { return <><x><y/></x></>;");
tryItOut("{(\t*::*);var __iterator__;__count__, prototype = __iterator__; }");
tryItOut("return;");
tryItOut("/*infloop*/while(-(<><x><y/></x></>.hasOwnProperty(\"constructor\")))let __parent__ = @foo;");
tryItOut("constructor = prop;");
tryItOut("L: M:with(<y><z/></y>){yield @foo;this }");
tryItOut("M:switch(<y><z/></y>) { case this :: window: throw undefined; }");
tryItOut("if(eval(\"let __proto__, __proto__;\", this)) { if ((#1#.eval(<y><z/></y>))) {gc() }} else ");
tryItOut("for(let y in [5,6,7,8]) break M;");
tryItOut("/*infloop*/do /*for..in*/for(var __iterator__ in let) {throw arguments; } while([([15,16,17,18].sort(function  constructor (__proto__) { yield <><x><y/></x></> } , null)) == throw constructor.__lookupGetter__(\"prop\")].\nfilter((-__count__ ? __parent__ : [1].throw(*::*)).__defineSetter__));");
tryItOut("while((#0=[yield <y><z/></y>.throw(__count__)]) && 0){export prototype;\nfunction (__count__, __proto__)@foo\n__noSuchMethod__ = prototype, __parent__ = __parent__ }");
tryItOut("switch(@foo.unwatch(\"prop\") =  '' .prop) { default: break; case 5: const constructor = <><\nx><y/></x></>, __noSuchMethod__;\r }");
tryItOut("with({__proto__: __noSuchMethod__()}){continue M;return <x/>; }");
tryItOut("switch(window) { default: yield 1e4; }");
tryItOut("/*infloop*/M:do if(*::* ? 0.1 : this) { if ((window === true)) {if(0/0) { if ((-1)) yield;} else yield; } else {/*infloop*/L:for(let __noSuchMethod__;  /x/g ; <x><y/></x>) {yield; } }//h\n} while(eval(\"let (__count__, prop) { /*infloop*/while(<x><y/></x> %= <x><y/></x>){const __proto__ = prop; } }\", (<><x><y/></x></>.prototype)));");
tryItOut("let (({ __count__: [constructor, , ] })) { /*infloop*/for(const __parent__ = constructor.__proto__ = <><x><y/></x></>; [[z1]]; [[]].some(function (prototype, __count__) { const __proto__; } )) {yield;return window; } }\n(new Function(\"let prototype, __proto__ = <><x><y/></x></>;\"))\n");
tryItOut("throw StopIteration");
tryItOut("L:if(\n<y><z/></y>\f) return *::*; else {; }");
tryItOut("if(this) {continue M;{} } else set");
tryItOut("while((@foo) && 0)__iterator__;");
tryItOut("if( '' ) {break ; } else ( '' );");
tryItOut("if(__count__ = <x><y/></x>) { if ((prototype|=(<y><z/></y>.isPrototypeOf(<x><y/></x>)).__defineSetter__(\"prototype\", new Function))) {L: {yield; } } else ((@foo ? 1e-81 : <x><y/></x//h\n>));}");
tryItOut("switch((<x><y/></x>.__lookupSetter__(\"prop\"))) { default: yield this;break; case (new <><x><y/></x></>([] for each (prototype in <><x><y/></x></>),  /x/ )): break; *::*; }");
tryItOut("if(prop-=*::*) (*); else ;");
tryItOut("/*infloop*/do L:if(this) __iterator__ = *::*, __proto__ = <x><y/></x>; else  if (({__iterator__:  /x/g  })) {if(prototype = window) {function  __iterator__ () { yield constructor }  } else return function::__parent__ = <><x><y/></x></>;;{} } else if((<><x><y/></x></>).call(('fafafa'.replace(/a/g, gc)), )) { if (<x/>) const prototype =  /x/ , __count__; else {yield .2;gc() }} while((__iterator__['__noSuchMethod__'] >>> new Object()));");
tryItOut("/*infloop*/while(4.){return; }");
tryItOut("let (__noSuchMethod__ = <y><z/></y>, constructor) { constructor, prototype =  super ; }");
tryItOut("return; const prop;");
tryItOut("/*infloop*/for(let __iterator__ = <><x><y/></x></>; <x/>; <><x><y/></x></>) continue ;");
tryItOut("{if(<x><y/></x> > null) {var prop = *::*, constructor;constructor = window, constructor = false; } else export constructor; }");
tryItOut("try { var constructor, constructor; } catch(constructor if (function(){{}})()) { yield; } finally { export prototype; } ");
tryItOut("with(*.constructor){gc()throw prop; }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in @foo) {} while(((#1=null for each (__iterator__ in  /x/ ))) && 0);");
tryItOut("if((({__noSuchMethod__: <><x><y/></x></>}) &= new String(<><x><y/></x></>, __proto__))) {yield\n; }");
tryItOut(") { if (yield @foo)) } else  [__count__] break M;");
tryItOut("with({prototype: (__iterator__(function::__iterator__) = <><x><y/></x></>.@*)})try { throw StopIteration; } finally { yield; } ");
tryItOut("yield *::*\n");
tryItOut("/*infloop*/for([, , , \t] = (uneval(5.0000000000000000000000)); ; prototype.__parent__ getter= function(q) { return q; }.__lookupGetter__(\"prototype\")) let (({ __noSuchMethod__: prop, __count__: constructor }) = (033 ^ false), __proto__) { constructor, __iterator__ }");
tryItOut("/*infloop*/for(var __count__; 'fafafa'.replace(/a/g, function (constructor) { yield false } ); __noSuchMethod__) export *\n");
tryItOut("M:if(<x><y/></x>) {export prop; } else  if (prototype) gc()");
tryItOut("/*infloop*/for(var constructor; __parent__; [1,,]) let __iterator__\f\n");
tryItOut("if((@foo.__lookupSetter__(\"__noSuchMethod__\"))) { if (<y><z/></y> <<= <!--yy-->) (false); else {}}");
tryItOut("with({}) { __count__ = __parent__; } ");
tryItOut("if(__parent__ = (function::yield.__iterator__ = <x/> ? ({__parent__: 1.2e3}).@* : prop.__parent__ = <y><z/></y>)) {/*for..in*/for(const ([1,,])(<><x><y/></x></>) in ((false)(#2= /x/ )))export *;/*for..in*/for(const __iterator__ = (export *) in <x><y/></x>) ; }");
tryItOut("{gc()gc() }");
tryItOut("throw <x><y/></x>;");
tryItOut("(new Function(\"const __noSuchMethod__ = this, __noSuchMethod__ = <x/>;\"));");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(var [prototype, __noSuchMethod__] = .2, <x><y/></x>++.\t__lookupGetter__(\"__noSuchMethod__\") in  '' ) /*for..in*/for(var prototype.__count__ in ((__parent__)(false)))<x><y/\f></x>\f | <x/> % (p={}, (p.z = (<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map)))())");
tryItOut("L: {var prototype; }");
tryItOut("function(y) { yield y; let prototype = 0/0;; yield y; }\n{}");
tryItOut("if(<>@foo</>) {break L; }");
tryItOut("if(null) {L:switch(<x><y/></x>) { case 0:  } } else  if (<y><z/></y> .@*:: undefined += ([15,16,17,18].filter(gc, <><x><y/></x></>))) export <x><y/></x>; else {export *;gc() }");
tryItOut("M:if(++this.zzz.zzz) { if ((yield (prop(this) = @foo))) {/*infloop*/L:while(this)__proto__\n } else throw <x/>;}");
tryItOut("/*infloop*/for(let constructor = <x><y/></x>; <x><y/></x> ? __proto__ : this; ([15,16,17,18].some(function(q) { return q; }, *))) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in __noSuchMethod__) /*infloop*/L:for(let __iterator__; [15,16,17,18].map(Function, (constructor = <x><y/></x>)); <x><y/></x> = (this.__defineSetter__(\"__iterator__\", function(y) { yield y; if(undefined) <x><y/></x> else  if (<><x><y/></x></>) {gc() }; yield y; }))) {yield;export prop; }");
tryItOut("if(([__iterator__.__proto__ = *::*].sort(function(y) { yield y; yield;; yield y; }))) gc() else  if ( /x/g ) const constructor;");
tryItOut("if(this.__defineGetter__(\"__proto__\", ('fafafa'.replace(/a/g, function (__proto__, __iterator__) { export __iterator__; } )))) __iterator__ ?  /x/  : prototype; else  if (((((yield {}))).__defineSetter__(\"get\", <y><z/></y> if (null)))) {gc() }");
tryItOut("{let prop = -0, __proto__ =  \"\" ;export *; }\nyield;\n");
tryItOut("/*infloop*/for((*.yoyo(prop)); (undefined in function(id) { return id }); new Boolean()) return <x><y/></x>.(null);");
tryItOut("throw \f<x><y/></x>");
tryItOut("if(null) { if (#1#) {return <><x><y/></x></>; }} else {throw <><x><y/></x></>; }");
tryItOut("M:if(<y><z/></y>.propertyIsEnumerable(\"__proto__\")) {__noSuchMethod__;continue L; } else var __noSuchMethod__, __iterator__;");
tryItOut("/*for..in*/L:for(let [setter, prototype] = <x><y/></x>.propertyIsEnumerable(\"prop\") in __count__ = __noSuchMethod__[<><x><y/></x></>]) with({}) { return; } ");
tryItOut("{}");
tryItOut("if((prop)) {; }");
tryItOut("/*for..in*/for([__count__, __count__] =  in 0/0) {throw  /x/ ; }");
tryItOut("/*for..in*/for(var prototype in ((function  constructor (({ __noSuchMethod__: default: case 3:  }), __count__) { return prototype = false } )(!<x><y/></x>))){var __noSuchMethod__; }");
tryItOut("L:do {\n } while((__parent__ = <><x><y/></x></>) && 0);");
tryItOut("/*infloop*/do {return; } while((4. ? * : <x><y/></x>.__noSuchMethod__));");
tryItOut("yield");
tryItOut("export __parent__;");
tryItOut("{(<x><y/></x>);window; }");
tryItOut(":switch((function  __count__ (prototype)\t { return this; } )([[1]]).__defineSetter__(\"__count__\", ([1,2,3,4].slice).call)) { default: /*infloop*/for(var constructor = <y><z/></y>; undefined; <x><y/></x>) {export __noSuchMethod__;yield <x><y/></x>; }case ((1 for (x in []))): break; if(constructor = new ((Math.sin).apply)()) function (constructor) { return <><x><y/></x></> } break; case prototype.__noSuchMethod__: L: (@foo); }");
tryItOut("L:if((this.__defineSetter__(\"__proto__\", function(y) { yield y; break M;; yield y; }))) { if (<zzz></zzz>) if(1.2e3) { if ( '' ) {var constructor = *::*;(prop); }} else {<y><z/></y>;export __iterator__; } else {return;<x/>;return <><x><y/></x></>; }}");
tryItOut("/*infloop*/M:for(__parent__;  /x/  + <><x><y/></x></>; * !==  \"\" ) {{}export prop; }");
tryItOut("break ;");
tryItOut("if(<x/>) {yield;export *; }");
tryItOut("if(<x><y/></x>) return @foo;");
tryItOut("{ }");
tryItOut("M:with({prototype: (0 , [,])})M:if(this.unwatch(\"__proto__\")) {let prop, __iterator__; } else  if (<x/>) {return __noSuchMethod__ = *, prop = <x><y/></x>;; } else yield <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in (p={}, (p.z = getter = <x><y/></x> / (p={}, (p.z =  \"\" )()))())) with({}) { continue M; } ");
tryItOut("/*for..in*/for(var (__count__)(<x><y/></x>) in ((function  __iterator__ (__count__, prototype) { return <x><y/></x> } )(@foo - *))){(({}));break ; }");
tryItOut("while((<xxx>{constructor}</xxx>) && 0)return __parent__.unwatch(\"__proto__\");");
tryItOut("export *\nreturn;");
tryItOut("/*for..in*/for(const constructor =  /x/ .__lookupSetter__(\"prop\") in (-1)) return;");
tryItOut("break L;");
tryItOut("const __proto__ = <y><z/></y>;\nreturn;\n");
tryItOut("if(__parent__) { if (constructor) {return;yield <x><y/></x>; } else {{} }}");
tryItOut("L: \f{return (3 in {}); }if(this\n ? <><x><y/></x></>.valueOf(\"number\") : this.__defineSetter__(\"prototype\", Math.pow).__defineSetter__(\"__parent__\",  /x/g  = <y><z/></y>)) {gc() }");
tryItOut("L:if(Date(__proto__.prototype)) 'haha'.split\n else  if ((gc)([15,16,17,18].some(1e+81,  /x/g ), (<>default: break; case 9: ([,,]);\n{}\ncase #0=true: gc()break; </>)())\n) if(~window) {const __count__, __iterator__ = <><x><y/></x></>; } else (undefined); else {;throw StopIteration; }");
tryItOut("if(*) const constructor; else {returnlet prototype, __count__; } const __noSuchMethod__;");
tryItOut("L: (<><x><y/></x></>).watch");
tryItOut("L:with(true--.yoyo(eval(\"yield;\", [z1]))){continue L;yield; }\n const __count__;");
tryItOut("/*infloop*/for(let __proto__; <x/>.__noSuchMethod__ = 1.2e3; new <x><y/></x>(<y><z/></y>)) {yield [1]; }\n");
tryItOut("/*infloop*/while(<><x><y/></x></>.__defineGetter__(\"__count__\", new Function))/*infloop*/L:for(\r<><x><y/></x></>; window; <x><y/></x>) prototype, __count__ = <x><y/></x>;yield window;");
tryItOut("/*for..in*/for(var ((__proto__)(__parent__, [,,z1]))(x::__parent__ = <x><y/></x>) in ((gc)(.2)))__proto__ = (<x/>.__lookupGetter__(\"__iterator__\"))");
tryItOut("return eval(\"L:while(( /x/ ) && 0){export *;\\f }\", (__noSuchMethod__ = -0));");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in window) return <x><y/></x>;\nlet prop;\nreturn; }");
tryItOut("/*infloop*/M:do throw (-0); while((new *::*(*::*) if (<><x><y/></x></>)).__defineSetter__(\"__noSuchMethod__\", function ());");
tryItOut("let(__iterator__ = true, constructor = delete 1e-81 && false) { yield [[1]];");
tryItOut("return <y><z/></y>\n*;");
tryItOut("export *;");
tryItOut("/*for..in*/for(const 0x99 in (((new ((({}).hasOwnProperty).apply).apply(undefined)))(new (new [1,2,3,4].map([,,z1], [z1,,]))((new ( /x/ )(0/0, window)), <><x><y/></x></>)))) ");
tryItOut("__parent__ = __parent__\n");
tryItOut("{\t{}gc }");
tryItOut("with({__proto__: @foo.hasOwnProperty(\"constructor\")}){{evalcontinue ; } }");
tryItOut("if([15,16,17,18].filter(new Function, null)) {; }");
tryItOut("M:if( /x/g ) { if (*::*.propertyIsEnumerable(\"__noSuchMethod__\")) {break ;return __proto__; } else {(<x><y/></x>);do {switch( '' ) { default: yield; } } while(( for ([, constructor, ] in 0.1)) && 0); }}");
tryItOut("gc()");
tryItOut("L: {const prototype;with({__count__:  /x/ })return; }");
tryItOut("if(null.unwatch(\"__count__\")) { if ((new 0.1.eval(<x><y/></x>)())) ;} else ");
tryItOut("export constructor;");
tryItOut("/*for..in*/for([__noSuchMethod__, __parent__] = __noSuchMethod__.\n__parent__ in 3.__lookupGetter__(\"__noSuchMethod__\")) {(-1)export *; }");
tryItOut("continue M\n");
tryItOut("let (prop, [, ({ #1=[#1#]: __iterator__, prop: __iterator__ }), ]) { return; }");
tryItOut("/*infloop*/for((<x><y/></x> / .2); (~function ([y]) { }); new (*)()) {return <x><y/></x>;const __iterator__ = 0, __proto__ = 3/0; }");
tryItOut("/*for..in*/L:for(const [__parent__, constructor] = false++ in (new new Function()) <= 'fafafa'.replace(/a/g, (<x><y/></x>).watch)) {let (({ prototype: ({ prop: __parent__, __proto__: __noSuchMethod__ }) })) { const __proto__ = *; }continue L; }");
tryItOut("/*infloop*/do {with(this){function  constructor (prop) { return @foo } export *; } } while((<y><z/></y>)(let (__noSuchMethod__ = false) arguments, <x><y/></x>));");
tryItOut("{{}export *; }");
tryItOut("M:if(this) constructor; else  if (<y><z/></y>) {{} }");
tryItOut("if([,,]) {if(<y><z/></y>) { if (3/0) __iterator__ =  /x/g , __count__ = prototype; else {yield 3;return <><x><y/></x></>; }} }");
tryItOut("/*infloop*/while(window - undefined){export __noSuchMethod__;__parent__; }");
tryItOut("{/*for..in*/for(var [__noSuchMethod__, constructor] = *::* in <x><y/></x>) export constructor;{export __proto__;({}).hasOwnProperty } }");
tryItOut("with(( '' (<>var __proto__ = <x/>, __noSuchMethod__;</>)))if(<x><y/></x>) {yield false; }");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("if(<><x><y/></x></>) { if (<><x><y/></x></>) {let __iterator__ = <y><z/></y>;( /x/ ); }} else const prototype = false;");
tryItOut("/*for..in*/M:for(prototype in ((function(q) { return q; })(<x><y/></x>.throw(<y><z/></y>)))){(@foo//h\n).__defineSetter__ }");
tryItOut("/*for..in*/for(let __iterator__ = [undefined].some(eval) === eval(\"\", <x><y/></x>) in __proto__ = this) {;if(null) { if (-3/0) {break ; }} else gc() }");
tryItOut("if((\n*::*).valueOf(\"number\")) { if ((\nthis.__defineGetter__(\"__proto__\", [1,2,3,4].slice) for each (__iterator__ in ([11,12,13,14].sort)) for (constructor.__proto__ in (new ((1 for (x in [])))())) for each (__parent__ in  /x/g ) for (constructor in  '' ) for each (__count__ in *))) {yield;constructor; }} else /*for..in*/for(const [__parent__, __count__] = (this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)) in <><x><y/></x></>) {const __noSuchMethod__ = <x/>; }");
tryItOut("/*infloop*/M:for(prototype = (__parent__ = 3.141592653589793); false !==  /x/ ; []) break M;");
tryItOut("switch(!new Object(function ([y]) { }.constructor = false |= __iterator__ <= <x><y/></x>)) { case 4: with({}) { throw __iterator__; } break; case 0: break; throw StopIteration;break; if() {{} } else return ({a1:1});break; case __count__: default: break;  }");
tryItOut("M:if(void .2.__count__) { if (Array()) {throw null;let yield = #1#, function::__proto__ =  /x/ ; } else {return <x><y/></x>;gc() }}\n/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__.__noSuchMethod__ in <y><z/></y>) {gc()throw <x><y/></x>; }");
tryItOut("M:with((new ((Function).apply)(<><x><y/></x></>))){__proto__\n }");
tryItOut("/*for..in*/L:for(const [prototype, __proto__] = ({constructor: (new window())}) in (<xxx {prop}={function::prototype.prototype} />)) {if((5.0000000000000000000000 .@ @foo)) {return undefined;export prototype; } else continue L; }");
tryItOut("(<x><y/></x>)\nswitch(@foo) { case 8: gc()break; case __noSuchMethod__ = window: break; case 9:  }");
tryItOut("let (__noSuchMethod__, constructor = __proto__ @  '' ) { /*for..in*/for(var __proto__ = (undefined(<x/>.unwatch(\"constructor\"), 1e+81)) in <x><y/></x>) yield  '' ; }");
tryItOut("prototype: <><x><y/></x></>\ndo {/*for..in*/for(const prototype = true in *) yield;while((window >>> undefined) && 0)if(<x><y/></x>) {} } while((<y><z/></y> % -3/0 in __iterator__ .@x::  '' ) && 0);\n");
tryItOut("/*infloop*/for(prototype; <x><y/></x>.(null).__lookupGetter__(\"__noSuchMethod__\"); this.__lookupSetter__(\"__iterator__ = *;\")) return;");
tryItOut("L:do throw 1e4; while((({__iterator__: 3 })) && 0)\n");
tryItOut("let (constructor) { /*infloop*/L:while(({})){let __noSuchMethod__; } }");
tryItOut("{<x><y/></x>let __count__ = {}, __noSuchMethod__; }");
tryItOut("if(yield @foo.__lookupSetter__(\"__noSuchMethod__\")) ");
tryItOut("/*for..in*/L:for(var [__proto__, prototype] = yield <><bbb xmlns:ccc=\"gc()\"><ccc:eee></ccc:eee></bbb></> in window) ; const __count__;");
tryItOut("/*infloop*/L:for([(uneval(<y><z/></y>))]; window; new ( /x/g default: break; case 8: const x::__proto__;export __noSuchMethod__;break; case <y><z/></y>: case x::__parent__: )((eval(\"*::*\", @foo).@*), (__proto__ = *))) ");
tryItOut("/*for..in*/for(var [constructor, constructor] = this(*, [,]) in (-0)) gc()");
tryItOut("L:if((*::*.throw(-3/0) + false)) if({}.__lookupSetter__(\"__parent__\").yoyo((eval(\"return this;\\nthrow 0/0;\\n\", this.isPrototypeOf(false))))) { if ([11,12,13,14].map) if(__iterator__ = __noSuchMethod__) {export *; } else {L: {throw  /x/ ; }throw  /x/ ; }} else /*for..in*/for(let  '' ['constructor'] in (((null).__defineSetter__)(constructor))){/*for..in*/for([constructor, __iterator__] = @foo in <><x><y/></x></>) {return;function ( \"\" )window } }");
tryItOut("/*infloop*/for(let constructor = false; function(id) { return id }; <x><y/></x>) break\f M;");
tryItOut("{with({constructor: <><x><y/></x></> @  /x/ }){M:if(*::*) { if (window) const __count__; else break L;}var  \"\"  = window; }/*for..in*/for(var [constructor, __count__] = * in window) {throw *;__iterator__, <x/> = @foo; } }");
tryItOut("/*infloop*/while(.2 ?  /x/  : <><x><y/></x></>){const __proto__ = <x/>; }");
tryItOut("yield @foo;");
tryItOut("yield  /x/ ;");
tryItOut("/*infloop*/while(this.zzz.zzz *= __parent__ = 1.3)L: {yield <><x><y/></x></>;var __parent__; }");
tryItOut("switch(window.throw(<xxx {prototype}={([<x><y/></x>].sort('haha'.split))} />.((yield this.zzz.zzz)))) { case [, [, ]] = __iterator__ = __noSuchMethod__: break; default: if(null) {return; } else returncase eval(\"if([[]]) {{}{} } else  if ( /x/ ) {new Function } else {export __parent__; }\", (null , *::*)): break; break; case prop: /*for..in*/for(var __count__ = @foo in __noSuchMethod__) gc()throw return <x><y/></x>;case 9: break; case 5: __proto__, __iterator__;case 8: break; case (<x/>)(): case 3: case 4: break;  }");
tryItOut("continue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in -3/0.__parent__) {/*for..in*/for(const constructor in  '' ) {export *;(null); } }");
tryItOut("L:with( '' )yield;");
tryItOut("do {__noSuchMethod__; } while((<><x><y/></x></>) && 0); const __proto__;");
tryItOut("{with(new ( '' )((([1,2,3,4].map).call(true, )))){L:if(<><x><y/></x></>) const constructor, prototype; else yield <><x><y/></x></>; } }");
tryItOut("/*for..in*/for(var __proto__ in ( /x/  .@ <y><z/></y>.propertyIsEnumerable(\"__proto__\"))) /*for..in*/L:for(let __noSuchMethod__(()) in (( /x/g .yoyo( /x/g ))(([11,12,13,14].map)())))let __proto__;");
tryItOut("with({__parent__: (true)[<x><y/></x>]}){(<><x><y/></x></>);return false; }");
tryItOut("/*infloop*/do (this); while(window);");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */\nlet __parent__, each = __iterator__;/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in prototype.__defineSetter__(\"__proto__\", Math.sin)) {if(null) { if ([]) {{} } else {(*\t);{} }} } } while( /x/ .prototype ? prop >>  \"\" .constructor : function(y) { yield y; const , __parent__;; yield y; }([[1]]).__defineSetter__(\" for (__iterator__.__parent__ in 3.141592653589793) for each (setter in <><x><y/></x></>)\", (new Function(\"yield;\"))));");
tryItOut("Function");
