tryItOut("/*infloop*/for(prototype; constructor = <y><z/></y>; [1,,].@foo.__lookupGetter__(\"__iterator__\")) __iterator__");
tryItOut("L:with( /x/ )/*infloop*/while(@foo){const gc;prop = 1.3, prototype; }");
tryItOut("return;");
tryItOut("/*infloop*/L:while(<x><y/></x>)gc()");
tryItOut("/*for..in*/L:for(const [__proto__, constructor] = __noSuchMethod__.prop getter= ({}).hasOwnProperty in __proto__.__count__ setter= function (constructor, constructor)<x><y/></x>) {yield;/*for..in*/for(\tvar __proto__ in ((function(q) { return q; })(window)))var __iterator__ = <x/>, __iterator__; }");
tryItOut("/*infloop*/while((uneval(3/0)).__lookupSetter__(\"__parent__\")){return @foo; }");
tryItOut("with((__proto__ = (-1))[constructor = <x><y/></x>]){{}/*for..in*/for([__noSuchMethod__, __count__] = * in  \"\" ) {}\n }");
tryItOut("{prop, __count__;let constructor; }");
tryItOut("{/*for..in*/L:for(__iterator__ in <y><z/></y>) {eval }yield\n }");
tryItOut("/*infloop*/while((uneval(__parent__ = <><x><y/></x></>))){continue M\nM:while((*::*) && 0){export *; } }");
tryItOut("if(++5.0000000000000000000000 *= <x/>) /*for..in*/for(var constructor in true) export constructor; else  if (({@foo: [1,,].propertyIsEnumerable(\"__count__\")}).propertyIsEnumerable(\"__parent__\")) prop else __noSuchMethod__, __noSuchMethod__;");
tryItOut("let(prototype = this) { throw  /x/g ;");
tryItOut("while(( /x/ ) && 0){'haha'.split }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(undefined; [1];  '' ) {(new Function(\"return;\"))window; }");
tryItOut("for(let y in []);");
tryItOut("yield;");
tryItOut("M:switch(null) { case 7: const __noSuchMethod__ = <x/>; } const __iterator__;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = prop.__lookupSetter__(\"prototype\") <= constructor = (window); (eval)(window >>> undefined %= constructor = window); (__noSuchMethod__)) {while(([15,16,17,18].map((window).__defineSetter__, prototype)) && 0){; }export *;\n{({}).hasOwnProperty }\n }");
tryItOut("/*infloop*/do {(function ([y]) { })()L:do {var constructor = @foo, __parent__ = false; } while((__parent__) && 0); } while(__iterator__ = (uneval(#1#)));");
tryItOut("/*infloop*/for(prototype <<=  /x/g ; ( /* Comment */<x/>); this.__defineGetter__(\"constructor\", function  prototype (__parent__)this)) \r{export __count__;continue M; }");
tryItOut("/*for..in*/for(let prop = window in undefined) {;export setter; }");
tryItOut("M:if((let (({ constructor: prototype, prop: __noSuchMethod__ }) = [[1]].propertyIsEnumerable(\"__iterator__, prototype\"), prop = this) (<><x><y/></x></>.__proto__))) {yield  '' ;const __iterator__ = 0.1; } else  if ((__iterator__ ? (({__count__ setter: (function  constructor () { return window } ).call })) : <x/>.__defineSetter__(\"__parent__\", ({}).__lookupGetter__))) {break L; }");
tryItOut("/*infloop*/for(window; this;  '' ) if(prototype = __proto__) { if ((window for (delete in true)))  else *::*;}");
tryItOut("");
tryItOut("return;");
tryItOut("return;/a/gi const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop.__iterator__ in __proto__+=[11,12,13,14].map++) {if(case 3: return -3/0;case 4: .__proto__) { if (['fafafa'.replace(/a/g, (__parent__ >>= prop))].some(Math.pow)) var prototype = window;return window;} else __parent__ = <y><z/></y> %= [z1], prototype = windowexport *; }");
tryItOut("/*for..in*/for(const prop = Function in [1,,]) {(<x><y/></x>); }");
tryItOut("/*infloop*/M:for(this.zzz.zzz; #1=[#1#] +=  \"\" .isPrototypeOf([1]); yield ({__noSuchMethod__: arguments, prototype setter: /a/gi }) ? (({a1:1}))(this) : break .yoyo(#0=[3])) {/*infloop*/for(__proto__; __count__; true) ((-0)); }");
tryItOut("L:with([prototype].some(function(q) { return q; })){/*for..in*/for(const prototype in constructor) {{yield <y><z/></y>;0;\t } } }");
tryItOut("if(__count__ = (let (constructor) @foo.isPrototypeOf(prop))) { if (true) /*infloop*/M:for([({ prototype: [constructor, ({ __iterator__: constructor, prototype: prototype })], prop: [({ prototype: __proto__, __iterator__: prototype }), ] })] = (eval(\"{}\", true)).__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; {}; yield y; }); (-1) - prototype//h\n;  /x/ ) /*infloop*/M:do {yield; } while(new __iterator__.prop = this); else {do [1,2,3,4].slice while((5.0000000000000000000000.watch(\"prototype\", function  __parent__ () {  /x/g ; } )) && 0);switch((*::* if (__proto__)) ? constructor = * : (function ([y]) { })()) { default: break; case (eval(\"1e+81\", <x/>)): break;  } }}");
tryItOut("/*infloop*/for(false(<x/>, <x><y/></x>); __noSuchMethod__ = <><x><y/><//*\n*/x></>; <><x><y/></x></>()) break ;");
tryItOut("if(__noSuchMethod__ = __count__) { if (__noSuchMethod__|=*.*) ((function ([y]) { })());} else /*for..in*/for(var __parent__ in ((({a1:1}))(*::*)))const prototype;");
tryItOut("switch(-1\t) { case <x><y/></x>: break;  }");
tryItOut("if(__noSuchMethod__) {(<><x><\ty/></x></>); } else return;");
tryItOut("if([11,12,13,14].some) {var __count__, __parent__ = #1#;throw [[1]]; }");
tryItOut("do gc() while((eval(\"export *;\", <x/> += *::*)) && 0);");
tryItOut("/*for..in*/for(const __noSuchMethod__ in @foo) <><x><y/></x></>;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __proto__] = prop = [,,z1] in 1e-81) {\f(*::*); }");
tryItOut("if(<x><y/></x>) { if (this) continue ;} else break ;");
tryItOut("/*infloop*/do return 4.; while((__noSuchMethod__ = __count__\t));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__iterator__) in (~constructor)) throw <y><z/></y>;");
tryItOut("/*infloop*/for(0/0.valueOf(\"number\")\r.throw( /x/g ); (__parent__ = ({ prop: ({ prop: function::__noSuchMethod__ }) })); ( /* Comment */(__iterator__) = new (function(q) { return q; })(#1#, window))) {}");
tryItOut("/*infloop*/for(__parent__ = <x/>; *\t === (function ([y]) { }.__lookupGetter__(\"prop\")).isPrototypeOf(__proto__ = __noSuchMethod__); []) yield prototype.constructor = __parent__");
tryItOut("true;\n(<><x><y/></x></>);\n");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __proto__ = 5.0000000000000000000000 in <y><z/></y>) __noSuchMethod__ = <x/>;");
tryItOut("M:with({__noSuchMethod__: constructor}){break M; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (function ([y]) { })(); -0) ;");
tryItOut("(prototype);");
tryItOut("\nexport __count__;");
tryItOut("L: {throw __iterator__;throw this; }");
tryItOut("prop = prototype;");
tryItOut("/*infloop*/M:for(var prop; __parent__.*; null && <><x><y/></x></>) yield null;");
tryItOut("M:if(((__iterator__ =  /x/g ))[this--]) {/*infloop*/for(let [] = (<x/> for each (__iterator__ in 0.1)); (__count__ = prop); (((__parent__).call).call()) / <y><z/></y>.isPrototypeOf((++({a2:z2})))) var prototype; }");
tryItOut("(prop.__noSuchMethod__ getter= function  __noSuchMethod__ () { yield <x><y/></x> } );\n/*infloop*/for(const [] = <><x><y/></x></>(*::*,  /x/ ); (<y><z/></y>)[ /x/g ]; (__parent__.__parent__ = <x><y/></x>)) return <x><y/></x>;\n");
tryItOut("yield (-0);const __parent__ = <><x><y/></x></>, __noSuchMethod__ = <x><y/></x>;");
tryItOut("/*infloop*/for(constructor = *::*; (eval(\"\\n4.\", true.__defineSetter__(\"prop\", [1,2,3,4].map))); Iterator() .@*:: (*.prop)) {gc() }");
tryItOut("with(1e-81())/*infloop*/for((__iterator__ for (__iterator__ in [,,])); <x><y/></x>.( /x/g ); (yield [])) [1,2,3,4].map");
tryItOut("(true)(this) = constructor");
tryItOut("prop = prop;");
tryItOut("/*infloop*/while(__count__ = (prop = constructor))export *;");
tryItOut("let (({ constructor: __iterator__, __noSuchMethod__: __count__ }), prototype) { export prototype; }");
tryItOut("/*for..in*/for(prototype = \n<y><z/></y>.* in {}) {break ;yield; }");
tryItOut("if((prop = (__count__) || [11,12,13,14].sort)) /*for..in*/L:for(const constructor in ((__iterator__)((-0))))\nwindow; else  if ((\t(<><x><y/></x></> for (__iterator__ in *::*))) += #0=[eval(\"prototype = default: break; case 2: let __noSuchMethod__ = <><x><y/></x></>, __proto__;case 5: break; break; case 7: break; \", <><> /x/g </></>)]) /*for..in*/for([__proto__, __parent__] = constructor = ({__proto__: <><x><y/></x></>, __iterator__: 3 }) in  '' ) /*infloop*/L:while(<><x><y/></x></>)const prototype = this;");
tryItOut("/*infloop*/for((([new Exception( /x/g )]) for each (__noSuchMethod__ in window)); (window)().propertyIsEnumerable(\"__noSuchMethod__\"); (<x><y/></x>)(<><x><y/></x></>) > ) {gc()var __count__, __proto__ = this; }");
tryItOut("{L:with({__iterator__: this}){gc() } }");
tryItOut("switch(({ set __parent__ __parent__ () { yield  /x/g  } , __noSuchMethod__: null })) { case this.zzz.zzz: false;break; gc()break; default: break;  }");
tryItOut("/*infloop*/do {<><x><y/></x></>; } while(window);");
tryItOut("/*for..in*/L:for(prototype = void <x/> in <y><z/></y>) yield;");
tryItOut("L: continue ;");
tryItOut("/*for..in*/M:for(prototype = false.isPrototypeOf(new (Array(3, <x/>))) in this ^ <x><y/></x>.yoyo(window)) {/*infloop*/for(let __proto__;  /x/ ; @foo) {break ; } }");
tryItOut("while(((-0)) && 0)/*for..in*/for((__iterator__) in ((<x><y/></x>)(<><x><y/></x></>(constructor, prop)))){}");
tryItOut("L: with(3){throw  /x/g ; }\n/*for..in*/for(const [__parent__, __proto__] = constructor = null in true) yield;");
tryItOut("L:do {/*infloop*/while(let (prototype = __count__) this){export *;/*for..in*/L:for([prop, prototype] = true in <y><z/></y>) {{} } }{}\nM:with( /x/g  = <y><z/></y>)yield  /x/ ; } while(([<x><y/></x>.(false)].filter(function(q) { return q; })) && 0);");
tryItOut("return null +=  \"\" ;");
tryItOut("export __count__;/*for..in*/L:for([__parent__, prototype] = null in *) var __count__;");
tryItOut("if(1e4 = prototype = this ? window++ : \nfunction(id) { return id }) { if ( '' ) {} else {*::*break ; }}");
tryItOut("export *;");
tryItOut("/*for..in*/for(let __iterator__ in yield false.valueOf(\"number\")) /*infloop*/for(const __count__; this.propertyIsEnumerable(\"prototype\"); ({ __noSuchMethod__: __proto__ }) = ([__proto__./*\n*/isPrototypeOf(window) if (prototype)])) {if(undefined) { if (@foo) return #3={a:#3#};} else gc()\r }");
tryItOut("(function  __proto__ (prototype, __proto__)[,,]).apply/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x>) throw <y><z/></y>;");
tryItOut("/*infloop*/do return  /x/g ; while(*::*);");
tryItOut("let (__iterator__) { this; }");
tryItOut("throw StopIteration;");
tryItOut("return eval(\"switch( /x/g ) { case __iterator__: break; break;  }\", true);");
tryItOut("/*for..in*/for(const __parent__ in ((((p={}, (p.z = )())--).__defineSetter__)(new (4.).call()))){return;export prop; }");
tryItOut("/*infloop*/for(let __proto__ = [15,16,17,18].map( '' , window); (set = <><x><y/></x></>); (<><x><y/></x></>)(this, -0)) let __iterator__, constructor = this;");
tryItOut("yield *;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in 4..isPrototypeOf( /x/  .@ <y><z/></y> , (__proto__ = <x><y/></x>))) {export *; const constructor; }");
tryItOut(" { return [[] = __proto__( \"\" )++ if ([,,])] } ");
tryItOut("{<x><y/></x>\n }");
tryItOut("Function");
tryItOut("");
tryItOut("/*for..in*/for(__proto__ in new  /* Comment */<><x><y/></x></>()) while((( /x/g  *  '' )) && 0)break ;");
tryItOut("/*for..in*/for([__parent__, prop] = <y><z/></y> in -3/0) {15.0000000000000000000000; }");
tryItOut("/*for..in*/for(const __count__ = [11,12,13,14].sort in @foo) {export *;return .2; }");
tryItOut("if([1]) export *;");
tryItOut("return __iterator__.__proto__ = this << !window;");
tryItOut("/*infloop*/do  while(prop = (<x><y/></x>)[#3={a:#3#}])");
tryItOut("M:with(yield <y><z/></y>)return -0; const  for each (__proto__ in ({a2:z2}).@*) for each (__parent__ in +<y><z/></y> ^ 0x99) for (__iterator__.constructor * <><x><y/></x></>.eval(<y><z/></y>).prototype in this.__defineGetter__(\"__iterator__\", Math.sin).__defineGetter__(\"__noSuchMethod__\", function (__iterator__) { yield <x><y/></x> } )) for (prototype in __proto__.(<><x><y/></x></>)) if (({a1:1}));");
tryItOut("__parent__: false\n{({}).hasOwnPropertyreturn; }");
tryItOut("/*for..in*/L:for(let __iterator__.__count__ in ((([15,16,17,18].some(({}).__lookupGetter__, undefined--)))(this.__defineGetter__(\"prop\", *::*))))return;");
tryItOut("<y><z/></y>\n");
tryItOut("return  /x/g ;");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in (uneval(<><x><y/></x></>))) continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in __proto__, prototype = window) {export *;\nreturn <x>\t<y/></x>;\n }");
tryItOut("if(__noSuchMethod__.(false)) { if ( /x/ ) {yield 3.141592653589793; }} else yield , true;");
tryItOut("({});");
tryItOut("{break \n{} }");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) { return; } \nconstructor = __parent__;\n");
tryItOut("while(((Math.sin).call( '' , function(id) { return id }, prop)) && 0){{} }\nM:do {export function::prop; } while((*.__noSuchMethod__) && 0);");
tryItOut("let (prototype = [z1,,].throw(true).__defineSetter__(\"__count__\", null).unwatch(\"__count__\")) { /*infloop*/L:for(const __proto__; <{prototype}>yyy</{prototype}>.__defineGetter__(\"constructor\", ({}).__lookupGetter__); (window.watch(\"__count__\", (function  __noSuchMethod__ () { yield; } ).apply))) gc() }");
tryItOut("{}(false);");
tryItOut("let (__iterator__) { yield; }");
tryItOut("/*infloop*/do if(__proto__) {yield;break M; } else  if ((this.throw(window))) {return <y><z/></y>;#3={a:#3#}; } else yield; while((__proto__.prop setter= [<x><y/></x> if (<x/>)]) %= ((<><x><y/></x></>.yoyo(undefined.__noSuchMethod__)))([15,16,17,18].filter((export *;).call, (((1 for (x in []))).call(undefined, *::*, 0/0))), ((p={}, (p.z = true)())) >= @foo.__lookupGetter__(\"__iterator__\")));");
tryItOut("while(() && 0){throw  \"\" ; }");
tryItOut("while(((function ([y]) { })()) && 0)");
tryItOut("while((((yield ([11,12,13,14].map)))) && 0){if(prop) { if ( /x/g ) var prototype = <x><y/></x>, __parent__ =  /x/g ;} else let prototype = <y><z/></y>; }");
tryItOut("yield;");
tryItOut("Math.sin");
tryItOut("/*for..in*/M:for(const prop in function  __count__ (prototype, __parent__) { yield <x/> } (this)) {<x/>;gc() }");
tryItOut("/*infloop*/for(var __iterator__; prototype.__parent__; prototype.__parent__ = {yield <x/>;yield  import ; }) {gc() }");
tryItOut("{}");
tryItOut("/*infloop*/while(<x><y/></x>.(<x><y/></x>))continue M;");
tryItOut("L:with(this.__defineSetter__(\"__noSuchMethod__\", constructor)){if(__noSuchMethod__) { if (<><x><y/></x></>) (<y><z/></y>);} else (this);__noSuchMethod__ = <x><y/></x>, __parent__ = <x><y/></x>; const __iterator__;\r }");
tryItOut("if(((yield (/a/gi)(__iterator__, false)))) @foo; else (@foo);");
tryItOut("L:while((window) && 0){throw false;const constructor, constructor = <><x><y/></x></>; }");
tryItOut("if(this) {export __parent__;{} }");
tryItOut("if(@foo) {return; } else 1e-81;");
tryItOut("throw constructor;");
tryItOut("/*for..in*/M:\tfor(let [__noSuchMethod__, __noSuchMethod__] = <><x><y/></x></> in false) {{}({}).hasOwnProperty }\nreturn;\n");
tryItOut("yield (p={}, (p.z = null.eval(--[,], window))());");
tryItOut("let __parent__, __parent__;");
tryItOut("/*for..in*/for(var prop = <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\") .. [,].__parent__ in <x><y/></x>) {(<><x><y/></x></>); }");
tryItOut(" { yield [this] }  const __proto__;");
tryItOut("/*infloop*/do {with(<x/>) } while((__iterator__ = ) ..  \"\"  === __proto__\f);");
tryItOut("break M;[,,]; const __iterator__.constructor = *::*;");
tryItOut("with(null){const constructor, prop;return <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__.constructor in this.__defineSetter__(\"__proto__\"\r, return;))  for each (prop in window)\n");
tryItOut("M:with(constructor.__parent__ = __parent__ = *)if(<y><z/></y>) export *; else gc()");
tryItOut("with({__count__: ( /x/g )[[z1,,]]}){return;throw window; }");
tryItOut("continue\t M;\nM:if((<x><y/></x>).call(1e+81.@foo,  /x/g , <x/>)) M:switch(<x><y/></x>) { default:  }\n");
tryItOut("return __proto__;");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = ((\t[[]] for (prop in __parent__ = null))) in (export *)) __count__ = window, prop = <x><y/></x>;");
tryItOut("let (x::__iterator__ = (#1=undefined), prototype = (~arguments)) { (false); }\nL:with({__count__: ({ prototype: __noSuchMethod__ }) = constructor})export __iterator__;");
tryItOut("let(__noSuchMethod__, __noSuchMethod__) ((function(){prop = prototype;})());");
tryItOut("with((eval(\"break M;\", <y><z/></y>)).valueOf(\"number\")){/*infloop*/do {break ;var __noSuchMethod__ = window; } while(<x><y/></x>); }");
tryItOut("const __iterator__");
tryItOut("let(__count__ =  /x/ ) ((function(){export *;})());");
tryItOut("with({prop: (prop.prop = <x/>)}){getter = 1.3, constructor; }");
tryItOut("if(__proto__ = constructor.(__count__)) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in  '' ) yield <><x><y/></x></>;throw arguments;let prototype = <x><y/></x>; } else  if (__count__.(new (({}).hasOwnProperty)(@foo))) {/*infloop*/for(__count__; ((p={}, (p.z = <><x><y/></x></>)())()); (new 'haha'.split((prototype(function(id) { return id })), __proto__.__count__)--)) {continue L;let function::__proto__ =  '' , __proto__ = {}; } } else {(<x><y/></x>);/*infloop*/for(let constructor; ++1e4.prototype; ( \"\" )[<><x><y/></x></>]) {{} } }");
tryItOut("with(new String(this, [[]])){yield;const __parent__ = *::*, __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor(* ^ true) in <> </>) {if((__noSuchMethod__ = @foo)) {gc(); } else  if ([11,12,13,14].filter) gc()/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in #3={a:#3#}) export *; }");
tryItOut("L:while((({__proto__: window })) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in *::*) {}");
tryItOut("if(<x><y/></x>.(<x/>) < function(q) { return q; }()) if((*)()) {while((constructor) && 0) } else  if (true) continue M; else {\nyield;\n } else  if () {prototype;{} } else {return; }");
tryItOut("{{{/*for..in*/for(let constructor = <x><y/><\f/x> in <x><y/></x>) (1e4); } } }");
tryItOut("/*infloop*/for(var ({ __proto__: [, , ], __proto__: __iterator__ }) =  '' ; 3/0.valueOf(\"number\"); false :: *) yield *::*;");
tryItOut("continue L; const __count__;");
tryItOut("if(this) {/*infloop*/for(let __noSuchMethod__; window; new Number()) {} } else  if ((*::*++)) {}");
tryItOut("let(__parent__, __proto__) ((function(){yield;})());");
tryItOut("do 'haha'.split while((this.zzz.zzz) && 0);");
tryItOut("try { return; } finally { with({}) { throw prototype; }  } ");
tryItOut("/*infloop*/for(let __count__; __noSuchMethod__ = constructor; ([,,].@foo)) {return;if(null) {\fcontinue L;(undefined); } else  if ( /x/ ) {export constructor; } else {{} { yield; }  } }");
tryItOut("export __count__;\n\n\n");
tryItOut("yield \t(( /x/g  | <x><y/></x>) :: [<><x><y/></x></>]);");
tryItOut("L:switch(<x/>) { default: /*infloop*/while(<x><y/></x>){var __proto__, constructor; }break; const __iterator__;function  constructor () { yield  \"\"  } /*infloop*/while(([(-1)]).throw(this.zzz.zzz)){const constructor = 3.141592653589793, prototype = this; }break; prop =  /x/g ;case 4: {}break;  }");
tryItOut("throw this;");
tryItOut("M:with({__count__:  /* Comment */<x/>})export *;");
tryItOut("(((__count__\f.__noSuchMethod__ getter= new Function).valueOf(\"number\")) || (__noSuchMethod__ = prototype)).__defineSetter__if((uneval((this.__defineGetter__(\"prototype\", (function ([y]) { })()))))) {/*for..in*/for(<><x><y/></x></>.isPrototypeOf(<x><y/></x>/*) in ((function (prototype, prototype) { yield *::* in 1.2e3 } )(null.__defineGetter__(\"constructor\", window))))yield <x/>;/*infloop*/M:while(prop)return; } else  if ((this.yoyo(<x/>)) * (new @foo(undefined, <x><y/></x>))) try { export *; } catch(prop if __count__.__parent__) { __count__ = @foo, __proto__; } catch(__parent__) {  } finally { export __count__; }  else {/*infloop*/while(0/0){yield; }throw function::__iterator__ = __iterator__; }");
tryItOut("yield (({prop: * }));");
tryItOut("let (prototype = undefined) { export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in true) const constructor = @foo\f;");
tryItOut("/*infloop*/M:for([15,16,17,18].some(function ()*, (<x><y/></x>)()); window; <><bbb xmlns=\"((p={}, (p.z = <x><y/></x>)()))\"></bbb></>) {with(__noSuchMethod__.__parent__){yield <x/>;break ; }{} }");
tryItOut("false;;");
tryItOut("switch(<x><y/></x>.(@foo)[yield <x><y/></x>.unwatch(\"prop\").__defineSetter__(\"__count__\", (this).watch)]) { case (<y><z/></y> <= <><x><y/></x></>): default: return;break; case 5: break;  }");
tryItOut("if(__proto__.__iterator__) { if (__iterator__.constructor) {const constructor = <><x><y/></x></>;(<><x><y/></x></>); }} else return;");
tryItOut("try { let(__parent__ = (-0)) { let(prop = __count__) ((function(){export *;})()); } catch(__count__) { let(__parent__) { for(let y in [5,6,7,8]) undefined; } ");
tryItOut("return __count__;\nif((-1)) const prop; else let __noSuchMethod__ = <><x><y/></x></>, __parent__ = *::*;\n");
tryItOut("try { yield new prop = null(*::*); } catch(__iterator__) { __iterator__ = prop; } ");
tryItOut("<x><y/></x>");
tryItOut("if(<x><y/></x>) //h\n__iterator__ = <x><y/></x>, constructor = <><x><y/></x></>; else  if (__iterator__) {yield; }gc");
tryItOut("if((prototype.hasOwnProperty(\"prototype\"))) yield; else const __count__ = window;");
tryItOut("/*infloop*/for(\n[11,12,13,14].some; (eval(\"__proto__ =  /x/g \",  '' .__defineGetter__(\"__iterator__\", (-3/0).watch))); yield #1=#1=[#1#].yoyo(<x/>)) {L: #1#; }");
tryItOut("try { for(let y in [5,6,7,8]) yield  = ({ __proto__: __count__, constructor: prop }).__lookupGetter__(\"__noSuchMethod__\"); } catch(prototype if (function(){try { yyy } finally { throw StopIteration; } })()) { yield (new window(<><x><y/></x></>, [z1,,]) >>> (<x><y/></x>.( /x/g ))); } catch(__iterator__) { throw StopIteration; } ");
tryItOut("L:if([*::*.watch(\"__noSuchMethod__\", (new Function(\"var __parent__ = 1e81, __iterator__;\"))) .@ 1e-81.watch(\"prop\", Function)]) /*for..in*/for(let __count__ in *::*)  continue  else {L: {gc() } }");
tryItOut("/*infloop*/while((x::__proto__).hasOwnProperty(\"__iterator__\"))let(constructor = *::*, prop) ((function(){})());");
tryItOut("with({constructor: default: break; }){with({__count__: ({__count__: __count__})}){((1 for (x in []))).apply }do {/*for..in*/L:for([__proto__, __count__] = false.__count__ in window) {return 0.1; } } while(((eval(\"\\r.__count__ = false\", <x/>, [z1]))) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in false) if( /x/g  *= __parent__) {export *; } else  if (<x><y/></x> .@ this) throw [z1,,]; else {export *; }");
tryItOut("/*infloop*/for(let __iterator__;  /* Comment */1e4 + <\t><x><y/></x></>; (__count__.__noSuchMethod__ <<  '' .isPrototypeOf(*))) {return; }{}/*for..in*/for(let constructor in (( /x/ )(1e4++)))return;");
tryItOut("/*infloop*/M:for(prop;  /x/g ; <x><y/></x>) {gc()function ([y]) { }; }/*infloop*/for(let __proto__;  /x/  /=  /x/g ; #1=({prototype: null})) {{continue M;(window); } }\n");
tryItOut("let(__iterator__ = (Function(false.throw([1,,]), 033)), ({ constructor: [prop, __noSuchMethod__, prototype], ++__parent__: ({ prototype: __proto__, __proto__: constructor }) })) ((function(){return <>__proto__ = [(<x><y/></x>.(<x/>)) if ([,,z1])]</>.unwatch(\"__iterator__\");})());");
tryItOut("{export __proto__;return; }");
tryItOut("{yield 0/0;yield this; }");
tryItOut("M:while(((p={}, (p.z = window)())) && 0){const __noSuchMethod__, prototype;M:if(this.__defineGetter__(\"prop\", (<x><y/></x>).watch)) ; }");
tryItOut("{; }");
tryItOut("yield;\n /x/ \n");
tryItOut("<><x><y/></x></>;");
