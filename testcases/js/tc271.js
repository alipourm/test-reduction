tryItOut("{(prop) = constructor; }");
tryItOut("while((<><zzz>window</zzz><\r/>) && 0){const constructor = <><x><y/></x></>, __proto__ = 4.;/*infloop*/L:for(const __count__ = <><x><y/></x></>; *::*;  { const __parent__ = __count__; } ) {export __count__;throw <><x><y/></x></>; } }");
tryItOut("L: export *;\f");
tryItOut("throw StopIteration;");
tryItOut("M:do \t(<x/>); while((window) && 0)");
tryItOut("/*infloop*/M:while(#0= '' ){M:with({__noSuchMethod__: (((({}).hasOwnProperty).call).call(\t[11,12,13,14].some, \tcontinue ; ^= <y><z/></y> << prototype, new (1e4)(__parent__, <x/>) for (__proto__ in [,]) for (__noSuchMethod__ in window)))}); }");
tryItOut("if(function(id) { return id }) { if (prototype) throw <><x><y/></x></>; else { {} }}");
tryItOut("L: {L:if(__noSuchMethod__ = 3) {} else yield;L: {gc() } }");
tryItOut("/*infloop*/M:for(window; <x><y/></x>; <><x><y/></x></>) {gc()return; }");
tryItOut("if([,].unwatch(\"__proto__\")) return 5.0000000000000000000000;\r else {; }");
tryItOut("{prop/*for..in*/M:for([prototype, constructor] = \fprop in <x><y/></x>) ; }");
tryItOut("switch(true) { case .2:  }");
tryItOut("switch(window >>> window) { default:  } const __parent__\n/*infloop*/for(this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split); (null ^= null); (constructor = __proto__) &= true) let (__parent__) { var __noSuchMethod__ = *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in __iterator__) \t{{}return; }");
tryItOut("let prototype = __parent__, __parent__\n");
tryItOut("for(let y in []);");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let (__noSuchMethod__.prototype) in ((function (__noSuchMethod__, __iterator__) { return true; } )([15,16,17,18].some((new Function(\"\")), null)))){}");
tryItOut("(<><x><y/></x></>)\nexport *;");
tryItOut("/*infloop*/L:do export *; while(({prototype: prototype }));");
tryItOut("with([<x><y/></x>])'haha'.split");
tryItOut("/*infloop*/for(var __noSuchMethod__; (this.__defineSetter__(\"\", function  __parent__ ()<x><y/></x>)); this.zzz.zzz) {(this);return; }");
tryItOut("/*for..in*/for(let __proto__ in - /x/ ) switch(prototype) { default: var __parent__ =  /x/g ;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in *) { const prototype;(<y><z/></y>); }");
tryItOut("{let (__iterator__) { /*infloop*/do throw __parent__; while(3); } }");
tryItOut("with({}) with({}) { yield (<x><y/></x> != prop); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((5.0000000000000000000000 &  \"\" .valueOf(\"number\"))(<><x><y/></x></> ? @foo : null) in new Error(<y><z/></y> / 1e-81)) ;");
tryItOut("/*infloop*/while(void <><x><y/></x></> instanceof <x><y/></x>){return;(true); }\n");
tryItOut("");
tryItOut("while((( /* Comment */-0)((\n<x><y/></x>))) && 0)yield;");
tryItOut("L:if((--(new Number(this.__defineGetter__(\"constructor\", new Function), __noSuchMethod__)))) {gc() } else  if (prop.(let (__parent__, __parent__) __noSuchMethod__).watch(\"__iterator__\", function  __count__ (<><\t{function::prop}><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></{function::prop}></>)(prototype.(<x><y/></x>)))) {/*for..in*/for(__noSuchMethod__ in ((<y><z/></y>)(window)))const __parent__ =  '' ; }");
tryItOut("");
tryItOut("with({<y><z/></y>.yoyo(null): (__proto__ = 0x99)})return;\t");
tryItOut("with({}) { with({}) return; } ");
tryItOut("if(RangeError((window), <x/>)) { if (({__count__: (constructor = <><x><y/></x></>)})) //h\n{yield;const __proto__ } else {/*infloop*/for(var __parent__ = this; this; window)  get __noSuchMethod__(__count__) { with((prototype.constructor))const constructor, [1]; } /*infloop*/for( '' ; <><x><y/></x></>; __noSuchMethod__) {([,,]); } }}");
tryItOut("{function () { export *; }  }");
tryItOut("/*infloop*/for(const prototype = (prototype = null); ( /* Comment */<><x><y/></x></>); (this.zzz.zzz)) {}");
tryItOut("if(undefined.__lookupGetter__(\"[11,12,13,14].map\")[@foo.hasOwnProperty(\"__parent__\")]) /*infloop*/while(1e81)( \"\" ); else  if (yield [1].*) {{}(*); }");
tryItOut("M:do {(null);if((p={}, (p.z = [1,2,3,4].slice(0.1))())) { if (null(<x><y/></x>)) {const __noSuchMethod__; } else yield this;} } while((window.hasOwnProperty(\"prop\")) && 0);");
tryItOut("/*infloop*/for(__count__ = (<x/>.@*);  /* Comment */1e81; ) {L: {var -= = <><x><y/></x>\t</>, __iterator__; } }");
tryItOut("/*infloop*/for(var prop; __noSuchMethod__; function(id) { return id }) gc()");
tryItOut("/*infloop*/for(let ({ __count__: ({ __iterator__: [__count__, ({ __iterator__: ({ constructor: __proto__ }) })], __noSuchMethod__: [__parent__, [, , ({ __proto__: __count__, __proto__: __count__ }), ], __noSuchMethod__, ] }), __parent__: [] }) = (typeof (this >>>=<><x><y/></x></>) | (let (__proto__) <><x><y/></x></>)); typeof --(prop.constructor = this); false) {gc()with(*){export return __noSuchMethod__;;const __count__ = -1, prop =  \"\" ; } }");
tryItOut("if(new <x/>(Function(<x><y/></x>), window)) { if ((yield undefined.yoyo(('fafafa'.replace(/a/g, new Function))))) {{} } else {if(__proto__) export __count__; else  if (this) {throw (function ([y]) { })(); } else ( '' ); }}");
tryItOut("L:if((({ constructor: __proto__, __parent__: __proto__ }) = yyy)) yield;");
tryItOut("{/*infloop*/while(new ({}).__lookupGetter__((__noSuchMethod__.(<><x><y/></x></>)), undefined))-M:do {(new Function(\"return;\"))throw this; } while(((__parent__|=<x>/*\n*/<y/><\t/x>)) && 0)\nif(window.__lookupGetter__(\"constructor\")) {{}throw constructor; } else  if ((yield <y><z/></y> !== <><x><y/></x></>)) (*::*); else {var __iterator__ = <><x><y/></x></>, __iterator__; } }");
tryItOut("if('fafafa'.replace(/a/g, function(q) { return q; }) === yield *::*.yoyo(<><x><y/></x></>)) return; else  if ([constructor, [], ({ constructor: ({ __proto__: prototype }), __count__: ({ __count__: __noSuchMethod__ }) }), , ({ prop: __noSuchMethod__, prop: ({ __iterator__: setter }) })] = this) {yield undefined;__parent__, __parent__ =  '' ; }\n");
tryItOut("/*infloop*/for(<><x><y/></x></>; (function ([y]) { })(); 3.141592653589793) {//h\n \"\" ;yield; }");
tryItOut("/*for..in*/L:for(prototype in ((new Function)([1,,]))){__proto__ = this; }");
tryItOut("let ([, __proto__, , ({ __proto__: ({ __noSuchMethod__: __noSuchMethod__ }) })], __noSuchMethod__ = (Math.pow)) { L:with(__count__.__iterator__)(1e+81); }");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; ;; [z1].__count__ = constructor) {yield;{} }");
tryItOut("let (constructor) { continue \n }");
tryItOut("yield __parent__ @ <><x><y/></x></>;");
tryItOut("{}\ngc()\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in 4.) return constructor;");
tryItOut("/*infloop*/for([15,16,17,18].filter(eval, 3.141592653589793.isPrototypeOf(false)); \t__count__.constructor getter= <x/>; (.__proto__)) /*for..in*/for(__noSuchMethod__ = null in -0) {; }");
tryItOut("/*infloop*/for(constructor; ([11,12,13,14].sort);  /* Comment */@foo) {continue ; }");
tryItOut("/*for..in*/for(var __proto__ in <x><y/></x>) function \f __iterator__ (setter) { yield <x><y/></x> } ");
tryItOut("return (<><x><y/></x></> > {}).__lookupGetter__(\"__noSuchMethod__\");");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in this.zzz.zzz) throw <y><z/></y>;");
tryItOut("/*infloop*/do {-0; } while((p={}, (p.z = \f[[]]--)()));");
tryItOut("/*infloop*/for(const __noSuchMethod__; false;  '' ) continue M;");
tryItOut("");
tryItOut("M:with({__count__: 0.1.throw(<x/>)}){yield @foo; }");
tryItOut("do Math.sin while((([__proto__, , , ] = eval(\"<x><y/></x>\", <x><y/></x>) @ let (prototype) <x><y/></x> >> window)) && 0);");
tryItOut("/*infloop*/do {if(*::*) {yield <y><z/></y>;yield 033; } } while((*::*)(window)); const __parent__;");
tryItOut("/*for..in*/for(let __parent__.//h\n__proto__ = () in (<y><z/></y>)(false, <><x><y/></x></>)) <x><y/></x>\nvar __count__ = <x><y/></x>;");
tryItOut("if() {/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in  '' ) (<><x><y/></x></>);if(({ set prototype(__noSuchMethod__, __proto__)<><x><y/></x></>, __iterator__: __iterator__ }).prototype.propertyIsEnumerable(\"__count__\")) {yield 1e81;; } else  if (@foo.isPrototypeOf(null)) {let __noSuchMethod__ = *::*; } else do [,] = window, constructor = constructor; while(( \"\" ) && 0); }");
tryItOut("/*for..in*/for(const __iterator__ in ((new Function)(<><x><y/></x></>))){ }");
tryItOut("do break ; while((\ndelete.__iterator__) && 0);");
tryItOut("/*infloop*/for([15,16,17,18].some(({}).__lookupGetter__, function (__parent__, __count__) { return -0 } ); [({ constructor: ({ __noSuchMethod__: ({ prop: prototype }), __noSuchMethod__: [__noSuchMethod__, __proto__, , ] }), prototype: prototype }), , , ({ __iterator__: __noSuchMethod__ }), (__noSuchMethod__)] = __proto__ = constructor; this) {\n*::*;if(<y><z/></y>) { if (<><x><y/></x></>) export *; else return;} }");
tryItOut("/*for..in*/for(__noSuchMethod__(__parent__ = function(id) { return id }) in 1.2e3) {<x/>; }");
tryItOut("if(<><x><y/></x></>()) { if ((prototype = window)) {return <x><y/></x>;<y><z/></y>; } else {__noSuchMethod__(*); }}");
tryItOut("throw prop;");
tryItOut("if(RegExp(this.__defineSetter__(\"prototype\", Function))) { if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) const prop =  \"\" ; else {( /x/g ); }}");
tryItOut("/*infloop*/M:for(([*::*]) .@ (({__proto__: constructor, __iterator__ setter: function(y) { yield y; break M;; yield y; } }).__defineSetter__(\"__proto__\", ((/a/gi).apply).apply))(-<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", Function)); ({a2:z2}) :: false--; <x><y/></x> for (__count__ in <y><z/></y>) if ( /x/g )) {const __iterator__, __iterator__\n }");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = prototype in <x/> !== this) if(<><x><y/></x></>) { if (__noSuchMethod__)  else return;}");
tryItOut("{{}\f }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __parent__ = <x><y/></x> in <x><y/></x>) yield  /x/ ;");
tryItOut("if((RangeError()).watch(\"__proto__\", (1 for (x in [])))) { if ((prototype = ))  } else {L:with({__proto__: undefined})yield\n<><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::prototype in __count__) ;");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/do {yield 5.0000000000000000000000;window } while((constructor = window));");
tryItOut("{{__proto__ = *::*, __count__ = <y><z/></y>;return <x><y/></x>; }\n }");
tryItOut("/*infloop*/L:while(__iterator__ = default: break; case this: break; case  /x/ : break; var __count__, prop = ;break; export *;break; yield <><x><y/></x></>;){Math.sin }");
tryItOut("prototype\tcontinue L; const __proto__;");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/for(var __iterator__; new (1e+81 for (prototype in prop))(); ( \"\"  ? [[]] : <x><y/></x>)) {const __proto__ = <><x><y/></x></>//h\n, prop = __iterator__; }");
tryItOut("{{export __iterator__;__noSuchMethod__ = function ([y]) { }, __proto__ = <><x><y/></x></>; }if(<x><y/></x>) { if (arguments) {var prop = true;__proto__ = <x><y/></x>, __parent__; }} else {{} } }");
tryItOut("do {throw prototype;; } while((<x/>.*) && 0);");
tryItOut("");
tryItOut("continue L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in  '' .__noSuchMethod__) try { gc() } finally { return null; } ");
tryItOut("{__iterator__\nexport prop; }\nreturn window");
tryItOut("return s\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (<x><y/></x> .@ <x/>.propertyIsEnumerable(\"__noSuchMethod__\"))['__noSuchMethod__'] in (0x99)(<x/>).__proto__) return (prototype.propertyIsEnumerable(\"constructor\"));");
tryItOut("if(<y><z/></y>) {var prototype = 4., __proto__;(<x><y/></x>); }");
tryItOut("/*infloop*/\tdo let __iterator__; while([[]].prototype = prototype);");
tryItOut("/*infloop*/while(([(-0)].sort(<x><y/></x>))){yield;yield; }");
tryItOut("if(( /* Comment */((uneval(this.__defineSetter__(\"prototype\", Function)))))) export *; else  if (({<><xxx>{__proto__}</xxx><\f/>: (this.zzz.zzz) })) {let __count__ = 1e-81; const prop;do const __noSuchMethod__, constructor; while(('fafafa'.replace(/a/g, function(y) { yield y; ; yield y; })) && 0); } else this;");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __iterator__: ({ __iterator__: ({ function::prop: [({ __parent__: __count__, prop: __proto__ }), [], , ] }) }) }) }) = <x/>++; try { <x><y/></x> } catch(__noSuchMethod__) { var __proto__ = <y><z/></y>, __noSuchMethod__ = function ([y]) { }; }  = __iterator__; ((\n[,]) | ((prop) = __iterator__ = <x/>))) {switch(undefined) { case (\nwindow.yoyo(*)): break; case 6: break; case 8: break; default: throw ({});break; case 6: case 4: break;  }/*infloop*/for( \"\" ; true ^  \"\" ; @foo <= *::*) {const prop = <x/>, constructor = @foo;yield; } }");
tryItOut("/*infloop*/for((<x/> & ({ get __parent__ prop () { return 1.2e3 } , prototype setter: Function })); ((__iterator__ = @foo) << this.zzz.zzz); ([([, constructor, __count__, , prototype] = __proto__.hasOwnProperty(\"__iterator__\").isPrototypeOf((<x><y/></x>)[@foo].__defineSetter__(\"__iterator__\", (window).call)))])) (function  constructor (__noSuchMethod__) { return 5.0000000000000000000000 } ).call");
tryItOut("/*for..in*/for(var prop = (new ({a1:1})()).unwatch(\"prototype\") in <x><y/></x> <= this) {return <x><y/></x>; }");
tryItOut("/*for..in*/for(let prop = __count__ = __noSuchMethod__ in [z1]) continue M;");
tryItOut("gc()\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></x>) {export *; }");
tryItOut("/*infloop*/for([]; constructor; false) {break ; }");
tryItOut("with({__iterator__: <><x><y/\f></x></>})*::*\n");
tryItOut("/*infloop*/while(arguments ^ #3={a:#3#}){gc() const __parent__;throw (@foo)[prototype]\n }");
tryItOut("for(let y in []);");
tryItOut("if(let (__iterator__ = <x/>) constructor) if( \"\" ) { if (1e4) return; else return;} else  if (*::*.eval(<x><y/></x>).unwatch(\"__proto__\")) {const __noSuchMethod__ = <x><y/></x>; } else {yield; }");
tryItOut("yield *::*; const __count__;");
tryItOut("try { throw StopIteration; } catch(prop) { yield <zzz> /x/g </zzz>; } ");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/for(__proto__;  \"\" ; null) {/*\n*/yield true; }");
tryItOut("return;");
tryItOut("/*infloop*/do {(<x><y/></x>).__defineSetter__\n } while(#1#);");
tryItOut("export __count__;");
tryItOut("/*infloop*/for(var __parent__ = (function ([y]) { })(); __iterator__;  '' ) export prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <x><y/></x>.(@foo)) {{continue L; } }");
tryItOut("return (yield new  /x/ ) / ({__iterator__ getter: (function(y) { yield y; __parent__; yield y; }).call });");
tryItOut("/*for..in*/for(const __parent__ = ({}) &=  /x/g  in <>case  /x/g : case 3: const __noSuchMethod__, prototype;</>) {var return; }");
tryItOut("if( '' ) gc() else  if ([[1]]) {export *; }");
tryItOut("yield  /x/g ;");
tryItOut("/*infloop*/L:do {return <x><y/></x>;this.zzz.zzz; } while(window);");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) { return (this.__defineGetter__(\"__parent__\", 'haha'.split).__parent__ = false.__defineGetter__(\"__proto__\", Function)); } ");
tryItOut("{while(((yield)) && 0)return <><x><y/></x></>;break ; }");
tryItOut("__iterator__");
tryItOut("export *;");
tryItOut("/*infloop*/for(__iterator__ = null; <x/>; *::*) {let prototype = 1.3, prop = false; }");
tryItOut("M:do __noSuchMethod__ while((export __count__) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:while(__count__.(3.141592653589793.__defineSetter__(\"__iterator__\", -0)))const constructor = <><x><y/></x></>, __proto__;");
tryItOut("/*for..in*/M:for(let function::__noSuchMethod__ = (new (function(q) { return q; }).call( '' , false, [[1]])()) in #3={a:#3#}) yield;");
tryItOut("/*for..in*/for(let [__count__\f, constructor] = true / <x/>.prop in null) {/*infloop*/for(let prototype = 1.2e3; <x/>; 033) {continue ;__proto__, __noSuchMethod__; }break M; }");
tryItOut("if((this.__defineGetter__(\"prop\", function(q) { return q; }))) { if ((__noSuchMethod__ = -1)) {/*infloop*/for(let __noSuchMethod__ = @foo;  /x/g ;  /x/ ) return <x><y/></x>;{} }} else yield undefined;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(const constructor in  /* Comment */new (<y><z/></y>)(window, 0/0)) {if(<><x><y/></x></>) {yield;var constructor = __noSuchMethod__, __count__; }\t else {return <y><z/></y>; '' ; } }");
tryItOut("M:with(('haha'.split)()){yield /*;function  __noSuchMethod__ (__parent__, prop) { return <y><z/></y> }  }");
tryItOut("with((__proto__.(<><x><y/></x></>))){/*for..in*/for([__iterator__, __iterator__] = <y><z/></y> in [1,,]) {gc() } }");
tryItOut("with({__iterator__: <y><z/></y>})this.zzz.zzz;");
tryItOut("M:if(this.__defineSetter__(\"x::__proto__\", Function)) {<><x><y/></x></>;export __noSuchMethod__; } else {case 0/0: break; let prototype; }");
tryItOut("for(let y in []);");
tryItOut("let (__parent__, constructor) { export prop; }");
tryItOut("{yield;yield; }");
tryItOut("/*infloop*/M:do L: export *; while(__parent__ = [function::prototype]);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __noSuchMethod__.__iterator__ .@*:: <x><y/></x>\n in prototype) {(<x><y/></x>);yield; }");
tryItOut("L:if(((__proto__.prototype getter= Math.pow) ? ((<><x><y/></x></> !==  \"\" )) : undefined.__defineSetter__(\"__count__\", undefined))) { if ((prop.__iterator__ setter= new (function (__count__) { return <><><x><y/></x><!--yy--></></> } )(({ __proto__: this }) = ( /x/g  * <y><z/></y>).throw(__count__|=__parent__), (uneval(<><x><y/></x></> ===  /x/ )))[((({}).hasOwnProperty).apply)(++constructor) ? ((new Function).apply).call :  \"\" ])) /*infloop*/while(<x><y/></x>.*)return;} else {L:if(<x/>) { if (*::*) {; }} else {} }");
tryItOut("do {gc(){} } while((({a2:z2})) && 0);");
tryItOut("L:switch(({__iterator__: <><x><y/></x></>, __noSuchMethod__: false })) { default: break; case 1: break; case 3: {} }");
tryItOut("let (prototype = new ([1,2,3,4].slice)(prop(__parent__)), prop = eval(\"(1 for (x in []))\", <><x><y/></x></>)) { /*for..in*/for(__parent__ in -0) {<x><y/></x>; } }");
tryItOut("{} const prototype;");
tryItOut("/*for..in*/for(var __iterator__ in <x/> .@*:: ({__proto__: <x><y/></x> })) /*infloop*/for(let __proto__; \nbreak L.__lookupGetter__(\"constructor\"); <x/> instanceof  \"\" ) /*\n*/if([__iterator__ for each (__parent__ in 3)]) { if (__iterator__ = __parent__) export __proto__; else {(new Function(\"gc()\")) }}");
tryItOut("if(new function(y) { yield y; return;; yield y; }(#1=[__count__.constructor], eval(\"/*for..in*/for(let __parent__ in ((<y><z/></y>)(0.1)))let prototype = this, prop = #3={a:#3#};\", null).hasOwnProperty(\"__proto__\"))) {with(-1\r)return; } else  if (new (gc)( /x/ , (function ([y]) { })()).valueOf(\"number\")) let (__count__ = <x><y/><//*\n*/x>) { export prop; }");
tryItOut("with({__count__: \f(__parent__( /x/ ))}){with(undefined){break M;yield; } }");
tryItOut("{}");
tryItOut("/*infloop*/L:for(var __iterator__ = __iterator__ = [z1]; <x/>.propertyIsEnumerable(\"__count__\"); prototype = window) {gc()function(y) { yield y; return;; yield y; } }");
tryItOut("if(new (<x><y/></x>)(true).prototype) { if ((constructor = ({ __noSuchMethod__: ({ __count__: prop, __count__: constructor }), __count__: ({ __proto__:  }) }) = ((__parent__)([[1]], ({a1:1}))))) {{export __parent__;( '' ); } } else yield *\n}");
tryItOut("/*for..in*/for(prop = __count__ = __proto__ > (this.__defineSetter__(\"__noSuchMethod__\", Function)) in <x/>.__noSuchMethod__) ");
tryItOut("/*infloop*/for(var ({ prop: prototype, setter: __noSuchMethod__ }) = 0x99; *::*; [ \"\" ].sort(/a/gi)\n) (1 for (x in []))");
tryItOut("if(((yield null))) ({get: *, __count__ getter: function (prop, __parent__) { return __iterator__ }  }) else  if (new <><x><y/></x></>(-1, <x><y/></x>)) {export __iterator__;{} }");
tryItOut("switch([1] @ 1e-81.watch(\"__iterator__\", function  prototype (__count__, constructor)__proto__) * [0.1.eval(this)]) { case 6: break; default: break; case 1:  }");
tryItOut("/*infloop*/for(let __noSuchMethod__ =  /x/g  ?  /x/  : prop; undefined; <x/>) {/*infloop*/for(prop = <x><y/></x>; *;  '' ) export prototype;var prop = [,,]; }");
tryItOut("M:if((((return [1,,]))()[undefined])) break M; else  if (1e-81) {/*for..in*/for(const (constructor) in window) throw __proto__\n } else {return;continue ; }");
tryItOut("with((__noSuchMethod__ !== <x><y/></x>)){if(<><x><y/></x></>.*) /*infloop*/M:while(*)break M; else {const __count__; } }");
tryItOut("return let (prop) 1.3;");
tryItOut("/*for..in*/for(let [prototype, __count__] = * in 'fafafa'.replace(/a/g, gc) .@x:: new (prop)((1.3.isPrototypeOf(<x><y/></x>)))) L:if((uneval(__parent__))) /*infloop*/do export *; while(window); else {export *; }");
tryItOut("/*infloop*/while(<><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")){gc() }");
tryItOut("/*infloop*/while(-0.prototype){}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in  /x/g ) __count__\nyield __noSuchMethod__;");
tryItOut("let (__noSuchMethod__) { ((this.__defineGetter__(\"__noSuchMethod__\", Math.pow))); }");
tryItOut("M:if((-1)) let prop; else {(prop);export __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (constructor) in this) {let (__count__ = #1=[#1#]) {  } }");
tryItOut("M:switch(0.1) { case <x><y/></x>: break; return;break; case 2: const __iterator__;case 4: yield;break; break; false;break; gc()break; yield;case 8: break; break; default: case prop: ; }\nif((undefined)(<x><y/></x>, <x><y/></x>)) { if (new ([,])(<><x><y/></x></>)) if(<><x><y/>/*\n*/</x></>) {export *;yield <y><z/></y>; } else ; else {{}{} }}\n");
tryItOut("if(new eval((__count__))) /*for..in*/for(const __proto__ = <y><z/></y> in <y><z/></y>) {let x::__proto__; } else  if (((((() if (<><x><y/></x></>)) ? new function(q) { return q; }() : ('fafafa'.replace(/a/g, ((eval(\"yield;\", <x/>--))).watch))))[\neval(\"__count__ /= set\", window)])) export __proto__; const ({ __iterator__: ({ __noSuchMethod__: prototype, constructor: prop }), prototype: ({ prototype: <x><y/></x> }) }); else {return *::*;(__proto__); }");
tryItOut("switch(window) { default: export setter;thisbreak; case 6: break; case @foo: __count__break; case 1: break; case #1=[#1#]: break; 5.0000000000000000000000break; case *: Functionbreak; case #3={a:#3#}:  }");
tryItOut("/*infloop*/M:for(const ({ __proto__: ({ x::prototype: ({ __count__: ({ __count__: ({ prototype: __count__, prop: [({ constructor: prototype }), [, __parent__, __noSuchMethod__, __iterator__], constructor, ({ __count__: __parent__, __proto__: __parent__ }), ] }), __noSuchMethod__: ({ prop: __count__, __noSuchMethod__: ({ prop: ({ prototype: prototype, __iterator__: __parent__ }) }) }) }), __noSuchMethod__: prototype }), prototype: .2 }), __iterator__: [[], , [prop], , ] }) = new (<x/>.propertyIsEnumerable(\"__noSuchMethod__\")) if (this).__proto__ = true.watch(\"__noSuchMethod__\", 'haha'.split)(null(), (__noSuchMethod__)); null; [let constructor = <x><y/></x>, prop = let; const function::__noSuchMethod__; if (eval(\"yield;\", (new ())))]) switch((prop = ({__proto__: {; } }).@foo)) { default: break;  }");
tryItOut("return;");
tryItOut("throw constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 0.1) {return; }");
tryItOut("if(throw StopIteration;) { if (\n<x><y/></x>) throw 0;} else const constructor, __count__;");
tryItOut("");
tryItOut("{/*infloop*/for(__proto__; 3; [,,].__defineGetter__(\"__iterator__\", (1 for (x in [])))) {export *;yield *::*; }switch((<><x><y/></x></>)[5.0000000000000000000000]) { case new Array(window): break;  } }");
tryItOut("with(<xxx {constructor}={prototype} /\t>.(<x/>.unwatch(\"__iterator__\")))/*for..in*/for([__proto__, __iterator__] = false in [z1,,]) /*infloop*/M:for(var delete = #1#;  '' ; false) {gc()const __proto__ = <x><y/></x>; }");
tryItOut("prop = __proto__;");
tryItOut("/*for..in*/L:for(var [__count__, constructor] = window in  \"\" ) {continue L; /x/g ; }");
tryItOut("/*for..in*/for(const 5.0000000000000000000000.* ,  /* Comment */<//h\nx><y/></x>.__noSuchMethod__ in [,]) __count__: new 'fafafa'.replace(/a/g, Function)()");
tryItOut("\fif(<y><z/></y>) { if (<y><z/></y>) {throw prototype;yield <x><y/></x>; }} else var __noSuchMethod__ = @foo;");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x><y/></x>) {yield; }");
tryItOut("/*for..in*/for(let constructor = (0x99 % typeof <x/>) in (__noSuchMethod__ = null <= [true].filter((function(q) { return q; }).call))) L:with({constructor: <x/>}){}");
tryItOut("/*infloop*/do /*for..in*/for(let ((<y><z/></y>.throw(__count__)))(new gc(/<x/> ? window : <x><y/></x>, 1e+81)) in this.zzz.zzz) throw <y><z/></y>; while(<y><z/></y> @ <><x><y/></x></>);");
tryItOut("/*infloop*/for(<x><y/></x>; function (__parent__) { return <x><y/></x> } ; ({prototype: @foo })) /*for..in*/for(__noSuchMethod__ in ((Function)(<><x><y/></x></>)))break ;");
tryItOut("/*infloop*/for((__noSuchMethod__.({})) -= new Exception(<><x><y/></x></>); <x/>.constructor; ({__noSuchMethod__: __proto__ }) ^ <x><y/></x>.watch(\"prototype\", gc)) this\n__iterator__, __proto__ = undefined;");
tryItOut("M:if([1]) { if (<x><y/></x>) {{}; }} else {yield <x><y/></x>; }");
tryItOut("return __count__ = (Iterator(eval(\"gc()\", <y><z/></y>), *));");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((({}).hasOwnProperty)((uneval(yield  /x/g .unwatch(\"function::prop\"))))));");
tryItOut("let (prototype = 0/0, __proto__ = <x/>) { export prop; }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */L: for  each(prop in <><x><y/></x></>) {return <x><y/></x>;export *; }");
