
tryItOut("for(let y in []);");
tryItOut("{let __count__; }");
tryItOut("throw this;\nconst __count__ = this, constructor;\n\n(/");
tryItOut("throw #1=[#1#]\nlet __parent__ = prop, __count__ = __noSuchMethod__;");
tryItOut("while((([11,12,13,14].map)) && 0){export __count__;(new (__parent__-=true)(++__noSuchMethod__, true.eval(<x><y/></x>))).__defineSetter__ }");
tryItOut("constructor = constructor;");
tryItOut("/*infloop*/M:do {<xxx>{__parent__}</xxx> } while(__proto__.__count__ = __count__);");
tryItOut("{}");
tryItOut("M:switch(('fafafa'.replace(/a/g, ({}).hasOwnProperty) @ null *= <><x><y/></x></>)\t) { case 6:  }");
tryItOut("/*for..in*/for(let * in <y><z/></y>) gc()");
tryItOut("while((+(prop.__count__ = undefined) if (0.throw(undefined))) && 0){let (__count__ = <y><z/></y>, __count__ = <x/>) { /*infloop*/while(function ([y]) { }); } }");
tryItOut("function  prop (__proto__, prop) { gc() }  { yield this.zzz.zzz } ");
tryItOut("/*infloop*/for((p={}, (p.z = this.__defineGetter__(\"constructor\", [1,2,3,4].slice))()); (this.__defineSetter__(\"__noSuchMethod__\", this)); ({prototype setter: Function, prop getter: ({}).hasOwnProperty })) if((-0) if ({})) { if (let (__iterator__, prop = __count__) undefined) {L: { { yield; }  }return; }} else yield 1.3;");
tryItOut("with(<x/>)throw 0;");
tryItOut("if(()) return  \"\" ; else  if ((<><x><y/></x></>.__defineGetter__(\"prototype\", (Math.sin).apply))) __noSuchMethod__; else {let constructor = window; }");
tryItOut("/*infloop*/for(var ({ prototype: __proto__, __noSuchMethod__: [, ({ __proto__: ({ __noSuchMethod__: prop }) }), , , \f] }) = (this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; })); (__parent__.constructor ^=  '' .__defineSetter__(\"__iterator__\", (<><x><y/></x></>).__defineSetter__).__lookupSetter__(\"__count__\")); ((function () { ; } )(<><{__count__}><!--yy--></{__count__}></>))) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(x::__noSuchMethod__ in yield  /x/g (1.3, (function ([y]) { } ^= @foo))) /*for..in*/for(__parent__ in undefined) yield");
tryItOut("if(()) {gc()gc() } else  if ((let constructor, constructor = @foo; |= yield #1=[4.])) {yield;export *;\f } else {const __parent__, prototype = <x/>;{} }");
tryItOut("break ;");
tryItOut("M:if((__noSuchMethod__.__noSuchMethod__ getter= ({}).hasOwnProperty) & (\fError((({prototype: \t<x><y/></x>})), this.__defineSetter__\f(\"__count__\", ( /x/g ).__defineSetter__)).valueOf(\"number\"))) {[1,2,3,4].map } else  if (__parent__.__count__ getter= __noSuchMethod__.prototype = (constructor = constructor)) {export *;with(this.__defineSetter__(\"__iterator__\", (1 for (x in []))) << eval(\"033\", <x><y/></x>))/*for..in*/for(let [prop, __count__] = *::* in <><x><y/></x></>) {{}yield; }if(0) yield; else  if (<x/>) { /x/g  } else var constructor\nlet __proto__ = this, __count__ = null; } else {gc()/*infloop*/for(undefined; <x><y/></x>; *::*) {export prop;export *; } }\t");
tryItOut("while((prototype = ({ prop: __count__, constructor: function::__iterator__ })) && 0){return <><x><y/></x></>;gc() }");
tryItOut("prototype");
tryItOut("yield 3/0;");
tryItOut("with({yyy:  /x/  .. <x><y/><\f/x>}){throw <>__proto__ = <><x><y/></x></></>; }");
tryItOut("for(let y in [5,6,7,8]) continue L;\nconstructor.__count__\n");
tryItOut("throw StopIteration\n/*infloop*/while(*::* ? [,,z1].yoyo(*::*) : (typeof null)){(<y><z/></y>);export __iterator__; }");
tryItOut("/*infloop*/for(var ({ <><zzz>[true]</zzz></>: __iterator__ }) = @foo;  '' ; false) {(__count__);\ncontinue M;\nreturn window; }");
tryItOut("prototype");
tryItOut("if(((prop).watch\n([3].map((#1#).call)\t) .@  /* Comment */(({__noSuchMethod__: * })))) { if (eval(\"\", __iterator__ = window.__defineSetter__(\"__proto__\", *))) L: throw prop;} else ;");
tryItOut("/*infloop*/for( '' ; window; ((Math.sin)(<y><z/></y>).@foo)) {/*for..in*/for(const (<x><y/></x>.(__count__))(*.prop = window) in <x><y/></x>) let prop = *::*, __parent__ = <y><z/></y>;/*for..in*/for(const [__noSuchMethod__, prototype] = yield 5.0000000000000000000000 in <><x><y/></x></>) throw [1,,]; }");
tryItOut("if(new Boolean()) { if (try { this.zzz.zzz; } catch(prototype) { let( = undefined.eval(__proto__), constructor) { throw __parent__; } finally { return; } ) {export *; } else throw this;}");
tryItOut("/*for..in*/for(<><x><y/></x></>['prop'] in this) {break ; }");
tryItOut("L:with({__parent__: prototype = []})return *;");
tryItOut("return;");
tryItOut("do yield; while((<x/> > __parent__) && 0);");
tryItOut("M:with({setter: (true.__lookupSetter__(\"__proto__\"))}){return null;yield null; }");
tryItOut("M:if([[<><x><y/></x></>].some([1,2,3,4].map)].map(Function)) { if ( '' .valueOf(\"number\") !== window |= *::*) {export *; }} else \nreturn get;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((new Function)((uneval(({__count__: <x/>})))))){ }");
tryItOut("M:if(@foo ? @foo : @foo) let __proto__, prototype = __noSuchMethod__; else  if ((eval(\"return <><x><y/></x></>;\", this))) {return <><x><y/></x></>; } else {<x/>([[]]); }");
tryItOut("/*for..in*/for(let prototype = yield new prop = 3/0.hasOwnProperty(\"*\") in new ([1,2,3,4].map)(__count__, true)) __parent__");
tryItOut("with({__noSuchMethod__: <><x><y/></x></>}){export prop; }");
tryItOut("{gc() }");
tryItOut("switch(1e+81--) { default: if((__proto__.prop getter= 0x99)) { if ((null.__proto__).yoyo(__parent__ getter: (@foo).__defineSetter__ :: prop)) return; else {export *;continue ; }}break;  }");
tryItOut("/*for..in*/for(let (p={}, (p.z = true)()).__parent__ in <x><y/></x> = false) /*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in <x><y/></x>) export prototype;");
tryItOut("{__noSuchMethod__, __count__; }");
tryItOut("if(*::*) { if (__iterator__) export *; else {throw this;export __parent__; }}");
tryItOut("/*for..in*/for([set, __count__] = ([15,16,17,18].filter(((({constructor: ({a1:1})}))[((gc).apply)]).__defineSetter__, ((uneval(<><x><y/></x></>))))) in #1#((this + this), *::*)) { }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = 0x99 /= -1 in arguments) /*infloop*/M:for(var __count__ = 0x99; <y><z/></y>; []) [[]];");
tryItOut("break ");
tryItOut("if(.2) /*infloop*/for(let ({ prototype: __iterator__, __proto__: prop }) = [15,16,17,18].filter(Function, (this.__defineSetter__(\"constructor\", 0/0))); (<x><y/><///h\nx>\n.propertyIsEnumerable(\"__proto__\")); null) 033;");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, 'haha'.split); (__noSuchMethod__ = .2); (__noSuchMethod__ =  /x/g )) {export *; }");
tryItOut("/*infloop*/for(var ({ __parent__: [__count__, __iterator__, __proto__, prop, ], __noSuchMethod__: ({  \"\" __count__ constructor: __noSuchMethod__, : __iterator__) }) = <x><y/></x> |= <y><z/></y>.__lookupGetter__(\"__parent__\"); yield [<x><y/></x> for (__parent__ in <y><z/></y>)]; ((*::*[false]).*)) {yield [1,,];return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in new Date()) /*for..in*/for(let [constructor, prototype] = <x><y/></x>.throw(<y><z/></y>) in <><x><y/></x></>) {yield;let __proto__; }");
tryItOut("/*infloop*/do {M:with({__noSuchMethod__: window}) } while(false.@foo ? __proto__ = <><x><y/></x></>() : (<x><y/></x>.__lookupGetter__(\"constructor\"))\f for each (prototype in -1()) if ((({ set __iterator__ prop (__iterator__, prototype) { return 033 } ,  set __parent__ __count__ () { yield  \"\"  }  }))));");
tryItOut("/*infloop*/for(var prop = <y><z/></y> >>>=__iterator__; delete <x><y/></x>.(__proto__)[(-1)]; this.__defineSetter__(\"__proto__\", function  __iterator__ () { return 3 } )\n) __count__ = window;");
tryItOut("with({__noSuchMethod__: prototype}){gc() }");
tryItOut("/*infloop*/for(var constructor; <x><y/></x>; __noSuchMethod__) {var __iterator__ = <x><y/></x>;return; }");
tryItOut("/*for..in*/for(const [prototype, __iterator__] = ([11,12,13,14].map.watch(\"prototype\", function (__proto__) { yield <x/>; } )) in (<xxx>{prototype}</xxx>.((p={}, (p.z = -0)())))) /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>) {return; }");
tryItOut("{(this); }");
tryItOut("do {continue L; } while(([1,,] *= window) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(//h\nvar (( /* Comment */ ''  .@x:: ()))(--<y><z/></y>.isPrototypeOf(<><x><y/></x></>)) in ) export prop;");
tryItOut("/*for..in*/for(var __parent__ in ((new Function).call(new Function(), __count__)), 'fafafa'.replace(/a/g, gc)) @foo");
tryItOut("if(prop = -0.__lookupGetter__(\"__iterator__\")) { if ({} || [,,]) {/*infloop*/for(var prototype = *::*; <x/>; <x><y/></x>) var prototype =  \"\" , delete;export *; } else /*for..in*/for(var __noSuchMethod__ = <><x><y/></x></> in <x/>) export __parent__;}");
tryItOut("with({}) let(__iterator__ = ((<><x><y/></x></>)(0) if ((__proto__)))) { throw StopIteration;");
tryItOut("with({}) yield -3/0[prop];");
tryItOut("let(__count__ = !__iterator__.prop, prototype = <x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")) { for(let y in [5,6,7,8]) with({}) { return; } ");
tryItOut("{while(() && 0)__noSuchMethod__ = ({a1:1}), constructor = undefined; }");
tryItOut("{}");
tryItOut("let (constructor) { yield; }");
tryItOut("with({}) for(let y in []);");
tryItOut("switch( /x/g .valueOf(\"number\").isPrototypeOf((<x><y/></x>)[-3/0] / (prop.__proto__).propertyIsEnumerable(\"__iterator__\"))) { default: if(function ([y]) { }) var __parent__ = this, constructor; else  if (true * 0) {;{} }break; case 9: case <y><z/></y>: case 7: /*for..in*/M:for(const prototype in ((@foo)((*::* *= undefined))))export __noSuchMethod__;export *;break; case __count__ = *::*: break;  }");
tryItOut("/*for..in*/for(var [__iterator__, constructor] = null in (__proto__ = [,,z1]) | (<x><y/></x> /= <><x><y/></x></>) ? (p={}, (p.z =  \"\" )()) : __parent__.__defineSetter__(\"prop\", ({}).hasOwnProperty)) {return  \"\" ;let (__parent__) { ; } }");
tryItOut("L:if( /x/g ) {{} }\t else  if (<x/>) Math.pow else {yield; }");
tryItOut("x::__parent__\nyield;\n");
tryItOut("L:with({prototype: __noSuchMethod__.constructor})if(<x><y/></x> ..  /x/g ) {;; } else gc()");
tryItOut("/*infloop*/for(let constructor; true; 1.3) {gc() }");
tryItOut("throw __iterator__;");
tryItOut("/*for..in*/for\t(__count__ in (((1 for (x in [])))((<y><z/></y> if (*::*))))){ }");
tryItOut("let (__noSuchMethod__ = false) { const prototype = 0.1, __noSuchMethod__; }");
tryItOut("gc() const constructor;");
tryItOut("L:if(__proto__) ; else  if (('fafafa'.replace(/a/g, function (try { __iterator__, __count__ } finally { (window); } ) { return <x><y/></x> } )\n)) constructor; else {continue L; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*infloop*/do {prop; } while(undefined.__lookupSetter__(\"__count__\")); const prop;");
tryItOut("/*for..in*/M:for(__proto__ in (((<x><y/></x> || 033))(((eval(\"yield;\", [z1,,]) && ( /* Comment */1e81) for each (__iterator__ in 4.) if (undefined)))()))){/*infloop*/for(let prop = function(id) { return id }; <><x><y/></x></>; window) break L;yield; }");
tryItOut("L:if((@foo.__count__)) export prop; else  if ( '' .valueOf(\"number\")) {gc() } else ");
tryItOut("L:if(Error()) {const __count__ = window; } else export __proto__;");
tryItOut("if([]) {{} } else /*infloop*/do return; while(<><bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb></>);");
tryItOut("{} const constructor;");
tryItOut("for(let y in []);");
tryItOut("let(constructor = prop for each (x::constructor in @foo)) ((function(){(prototype) = __iterator__;})())\n");
tryItOut("with((<><x><y/></x></> ? <x><y/></x> : <x/>)){/*for..in*/for(let constructor = __count__ >>>=<><x><y/></x></> in (1.2e3)()) throw <><x><y/></x></>;/*infloop*/for([, __parent__, , __iterator__] = [1,,]; let (__count__ = @foo, constructor = null) [1]; (this %= <x><y/></x>))  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype(constructor %= <x><y/></x>) in yield (let (default: break; let prop = <><x><y/></x></>, constructor = <><x><y/></x></>;case 3: gc()break; )  \"\" )) {constructor;3[ '' ]; }");
tryItOut("/*infloop*/L:do this.__defineSetter__(\"constructor\", /a/gi); while((({}).__lookupGetter__));");
tryItOut("with([function (<><x><y/></x></>) { gc() } ])return 0.1;\nfunction (prototype, __noSuchMethod__) { yield *::* } \n");
tryItOut("throw __noSuchMethod__;");
tryItOut("L:with({prop: [11,12,13,14].filter}){yield prop;__noSuchMethod__; } const constructor;");
tryItOut("prototype");
tryItOut("if(constructor%=<x><y/></x>.prototype) {M:if(((<><x><y/></x></>.__iterator__).isPrototypeOf(eval(\"<y><z/></y>\", *)))) {return;; } else  if ([__iterator__, __parent__, ] = *) {yield null; } else if(<x/>) { if (<x><y/></x>) {return this;continue M; } else export *;} }");
tryItOut("do { } while((true) && 0);");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = (constructor = <><x><y/></x></>) in (Date(<x><y/></x>, false)) .@*:: this.valueOf(\"number\")) {while((__proto__.@foo.watch(\"__count__\", (1 for (x in [])))) && 0){yield; }/*infloop*/for((String(<bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb>, __proto__-=undefined)); <ccc:ddd> </ccc:ddd>; (__count__ = <><x><y/></x></> /  /x/ )) {if(undefined) return;const prototype; } }");
tryItOut("this.zzz.zzz;");
tryItOut("if(<x/>) break ;");
tryItOut("while(( \"\" ) && 0) { yield arguments } \n");
tryItOut("L: (*)");
tryItOut("export *\n/*for..in*/for(let x::constructor in <><x><y/></x></>) export __noSuchMethod__;");
tryItOut("L:if(<x><y/></x>.__lookupGetter__(\"prop\")) {throw @foo; } else {yield;throw <x><y/></x>; }");
tryItOut("{throw <><x><y/></x></>;return; }");
tryItOut("switch(constructor) { default: continue L;\n(4.);\ncase 2: if((<></> for (<>__parent__</> in -0) for each (__proto__ in  /x/g ) if (undefined))) { if (__parent__.(<><xxx {__proto__}={window} /></>)) (function\t  __parent__ () { yield [,,z1] } ).apply else {let __proto__, __iterator__;export constructor; }}case 4: break; break; break;  }");
tryItOut("if(__iterator__-=<><x><y/></x></>(prototype, <><x><y/></x></>)) {while((__iterator__ || <x/>) && 0){{} } } else  if (\nthis.__defineSetter__(\"__iterator__\", eval)) {/*for..in*/for(prop = window in null) throw {}\nyield  \"\" ; }");
tryItOut("__parent__ = __parent__;");
tryItOut("M:while(( /* Comment */__iterator__ =  /x/ ) && 0)break L;if(this.__defineGetter__(\"constructor\", prototype)) return; else {return window; }");
tryItOut("M:do {/*infloop*/do let __proto__, __noSuchMethod__ = this; while(*::*) } while((prototype%=[[1]] ||  \"\" ) && 0);");
tryItOut("L:if((arguments.propertyIsEnumerable(\"prototype\"))) { if (((let (prototype =  /x/g , __count__ = undefined) window) ? constructor =  \"\"  : (<y><z/></y> .@x:: <><x><y/></x></>))) export __iterator__;} else {set =  /x/g , __iterator__; }");
tryItOut("for(let y in []);");
tryItOut("if(null || .2) { if (#0=((this for each (prop in [1]))))  /x/g ; else __iterator__ = *::*, prototype;}");
tryItOut("/*infloop*/for(let prototype; <><x><y/></x></>.hasOwnProperty(\"prototype\"); (({}).__lookupGetter__).call(4., ) |= ((null << <><x><y/></x></>) ? % : (({a1:1}) .@*::  /x/ ))) yield;");
tryItOut("this.zzz.zzz;");
tryItOut("if(-null) let __parent__ = <x><y/></x>; else { }");
tryItOut("if(*::*) {var __noSuchMethod__, __proto__ = <><x><y/></x></>; } else  if (#1=[#1#]) {return true;(<><x><y/></x></>).watch }");
tryItOut("/*infloop*/for(var ({ prop: ({ prop: ({ __noSuchMethod__: prop }) }), __parent__: __proto__ }) = default: ; __count__ = __iterator__; new Iterator(__noSuchMethod__)\n) {export __count__; }");
tryItOut("/*infloop*/while(#0=[<><x><y/></x></>])return .2;throw -3/0;");
tryItOut("{with(null = '({__parent__: @foo, __noSuchMethod__: <y><z/></y> }))while((<x><y/></x>) && 0){continue ; }L: {var prototype, __proto__;/*infloop*/for(const __count__ = prototype; window; <y><z/></y>) {gc()gc() } } }");
tryItOut("/*for..in*/for(yield.__parent__ in (('haha'.split)(new (undefined ^= function(id) { return id })())))break M;let __iterator__, __noSuchMethod__ = __count__;");
tryItOut("throw StopIteration;");
tryItOut("L:if(* >>> *) {{}(window); }");
tryItOut("M:while(((function  prototype (prototype, __parent__)<x/>)( /x/g ,  /x/ ) <= <><x><y/></x></>) && 0){let (get = prototype, prototype = <y><z/></y>) { __count__ = function::constructor; } }");
tryItOut("with({__parent__: @foo})/*for..in*/for(__parent__ = <x/>\n in <><x><y/></x></> += window) /*infloop*/while(((uneval(<y><z/></y>))))return;");
tryItOut("if(constructor = [window].map(({}).__lookupGetter__)) {yield <x><y/></x>; } else  if ((0x99\n)<ccc:ddd>yyy</ccc:ddd>.prop) {return; }");
tryItOut("L: with((__count__ /= window.watch(\"prototype\", function  prototype () { return __parent__ } )))function::constructor = __count__, prop;");
tryItOut("__iterator__ = constructor;");
tryItOut("M:if(<x><y/></x> * <x><y/></x>)  { yield ( '' .__lookupSetter__(\"__count__\")) }  else __proto__; const constructor;");
tryItOut("with(--this){return;return prop; }");
tryItOut("");
tryItOut("let (function::prototype = false) { throw <><><x><y/></x></> <x><y/></x>/constructor.propertyIsEnumerable(\"prototype\")>; }");
tryItOut("let (setter = true ? window :  /x/g , prototype) { continue ; }");
tryItOut("let(__noSuchMethod__ = (__iterator__).call((prop.(<x/>)), )) ((function(){__noSuchMethod__ = __iterator__;})());");
tryItOut("{if((function  prototype (prop) { let __noSuchMethod__, __noSuchMethod__;\r } (*::*constructor = 0, function ([y]) { } == null, <x/>))) { debugger  } else  if ((null)(*, 0.1)) {throw 0x99; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(var setter in <><x><y/></x></>) {export *; } } }");
tryItOut("let (prototype = this, __noSuchMethod__ = __proto__) { gc() }");
tryItOut("/*infloop*/for(__iterator__; [[11,12,13,14].some]; ) {/*for..in*/for(let __noSuchMethod__ = <x/> in 1e81) return undefined; }");
tryItOut("L:if(({a1:1})) {<y><z/></y>;gc() } else  if (prototype) ");
tryItOut("/*for..in*/for(let __proto__ = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in Date(<x/>)) gc()");
tryItOut("L:if((new Function(\"yield;\"))(new String(<x><y/></x>))) /*for..in*//* nogeckoex bug 349964 */ for  each(constructor in [1.2e3 if (<x><y/></x>)]) /*for..in*/for(let __proto__ = new ((@foo).apply)() in <y><z/></y>) yield @foo; const constructor;");
tryItOut("{yield;gc() }");
tryItOut("__iterator__.prototype = __iterator__;");
tryItOut("/*for..in*/for([__iterator__, constructor] = (p={}, (p.z = (Math.pow)())()) in [15,16,17,18].map(function(q) { return q; }, prop)) var prototype = <x><y/></x>;");
tryItOut("function::__count__;");
tryItOut("do {{}var __count__ =  /x/ , yield; } while(((null | 1e-81)) && 0)");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x/>.constructor in  /x/ ) {yield *; }");
tryItOut("M:do let (constructor =  '' ) { return; } while((prototype.__count__ = *::* .@ <><x><y/></x></>.throw(this.__proto__ = __iterator__)) && 0);");
tryItOut("/*infloop*/L:for(; ([(\fnew (<x/>)()) for each (prop in @foo\f) if (@foo)]) <= (@foo |= <y><z/></y>)(#1=({__proto__: <y><z/></y>}), this.__defineSetter__(\"__parent__\", <x><y/></x>)); ((p={}, (p.z = eval())()))) {{var __noSuchMethod__; }L:with(prop = <x><y/></x>)if( /x/g ) (<><x><y/></x></>).watch else return __noSuchMethod__; }");
tryItOut("let (__parent__, constructor =  /* Comment */prop = true) { export *; }");
tryItOut(" for each (__parent__ in (new ({}).__lookupGetter__(function(id) { return id }, <><x><y/></x></>)))");
tryItOut("if( /x/ ) if(this.watch(\"prototype\", <x\f><y/></x>)) {;continue ; } else  if (<x/>.__lookupSetter__(\"__count__\")) yield <><x><y/></x></>; else <x/>; else  if (({ set constructor(__iterator__, __count__) { function (__proto__) { return <><x><y/></x></> }  }  })) gc()");
tryItOut("with((({prop: (({__noSuchMethod__: window, prototype: ({}) })) }))){default: break; case 3: /*for..in*/for([__count__, __noSuchMethod__] = ((function(q) { return q; }).call(*, <><x><y/></x></>, <><x><y/></x></>) > __noSuchMethod__.(__parent__)) in new /a/gi()) \n{export prototype;yield; }break; if(#1#) { if (@foo) {}} else prototype;case 8: gc() }");
tryItOut("gc()");
tryItOut("const prototype, __proto__ = this;");
tryItOut("if(\t('haha'.split).apply) { if ((eval(\"yield <><x><y/></x></>\", (<x/> <= 0.1)))) break M; else {{}let __proto__ = true; }}");
tryItOut("/*for..in*/__count__for(__proto__ in ((Math.pow\f)(*))) \"\" ");
tryItOut("try { export __proto__; } catch(__count__ if <><x><y/></x></>) { let __parent__; } finally { yield window; } ");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__ = <x><y/></x>.prop) { let(__proto__, x::__proto__) { yield;");
tryItOut("with({}) { return; } ");
tryItOut("if(this) { if (this) {const __parent__; }} else export *");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (prototype.__parent__) in __noSuchMethod__ = (__proto__ = <><x><y/></x></>\n)) {export *;/*for..in*/for(let __iterator__ in <x><y/></x>) {const __iterator__, prototype;prototype; } }");
tryItOut("/*for..in*/for(__parent__ in (__noSuchMethod__+=this) if (033)) /*infloop*/do throw null; while(<x><y/></x>)\nif(this) {; } else {return <x/>;gc() } const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__(<><ccc:ddd> </ccc:ddd></>) in <>__parent__</>) {export constructor; }");
tryItOut("__iterator__ = <><x><y/></x></>\nexport *;");
tryItOut("export this;");
tryItOut("\n");
tryItOut("return (uneval(5.0000000000000000000000))++;");
tryItOut("L:with(<y><z/></y>.prototype = <x><y/></x>){gc()(<x><y/></x>); }");
tryItOut("let constructor\n");
tryItOut("throw function::__parent__;");
tryItOut("L:switch(\n<x><y/></x>(*, <><x><y/></x></>).prototype = [(3/0.eval(arguments)) = function () { return <><x><y/></x></> } () if (__iterator__)]) { case let (__iterator__ = false, __iterator__) eval(\"#1#\", [[1]]): case 3: case true.watch(\"__parent__\", function(q) { return q; }): const let = 5.0000000000000000000000, __parent__\nbreak; default: break; case ({a2:z2}) >= <x/>: break; return;break; case constructor = <><x><y/></x></>: (*); }");
tryItOut("return\n");
tryItOut("return;");
tryItOut("{3;\ncontinue M;\n }");
tryItOut("/*infloop*/do if((setter = window)) { if ((eval(\"<y><z/></y>\", 4.))) {continue ;yield <x><y/></x>; } else const prop = true, __count__ =  /x/g ;} while(this.propertyIsEnumerable(\"({ prototype: __parent__, ~window: constructor })\"));");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __parent__ = ((const prop.__iterator__ = __count__.__iterator__ = <><x><y/></x></>))[((yield (__noSuchMethod__ = *::*)) <<= ({a2:z2})(function::__parent__+= /x/g ))] in (0 for each (constructor in 1e+81)).__defineGetter__(\"__count__\", ((p={}, (p.z = true())())))) with([,,]){yield; }");
tryItOut("with({constructor: this}){if( '' ) { if ({}) {return; }} else {yield <x><y/></x>; } const __iterator__;if(Number()) export __parent__; else ; }");
tryItOut("/*infloop*/M:for(const __proto__; yield this; --( /* Comment */window)[prototype = 1e81]) {(({a1:1}));let __count__; }");
tryItOut("/*for..in*/for(const prop.prop in ((Function)((__iterator__.(__noSuchMethod__))))){}\n");
tryItOut("/*for..in*/for(var __count__ in ((function () { return <x/>.__lookupSetter__(\"__parent__\") } )((let (constructor, prop = *::*) [<><x><y/></x></> < false].filter((1e+81).__defineSetter__)))))do throw 0/0; while((try { for(let y in [5,6,7,8]) (<x><y/></x>); } catch(function::prototype) { break ; } ) && 0);");
tryItOut("/*for..in*/M:for(__iterator__ in false) {}");
tryItOut("/*for..in*/for(const [prototype, __parent__] = (.2.__lookupSetter__(\"__parent__\")) in __count__+=0.1) (<x><y/></x>);");
tryItOut("/*for..in*/for(const  '' .prop in {export *; }) {{} }");
tryItOut("if(({})['__proto__'] = <><x><y/></x></> , <x/>) { if (3.141592653589793) {; } else {/a/gi }}");
tryItOut("{var __count__, <><x><y/></x></>;{} }");
tryItOut("if(this(<x><y/></x>).__defineGetter__(\"prototype\", (#0=({prototype: constructor}))))  else  if ( /* Comment */([*::*] ? ([z1,,] if (<x><y/></x>)).throw(*::*.__lookupGetter__(\"function::__count__\")) :  \"\"  !== <x><y/></x>)) {throw <x><y/></x>;yield window; }");
tryItOut("return;");
tryItOut("/*infloop*/for(var __noSuchMethod__; (uneval(window.isPrototypeOf(undefined))); (uneval(this.__defineGetter__(\"constructor\", 'haha'.split)))) {if(({a1:1})) {let __noSuchMethod__; } }");
tryItOut("const __noSuchMethod__;\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 1e-81) {const prop;export *; }\n");
tryItOut("while((*) && 0){throw 1e81; }");
tryItOut("M:if(( '' .__lookupGetter__(\"__iterator__\"))) {gc() } else  if ((yield *::*)) var __parent__; else /*\n*/{gc() }");
tryItOut("export __parent__;");
tryItOut("M:if('fafafa'.replace(/a/g, (__proto__).call)) { if (eval(\"<x/>\", <><x><y/></x></>).*) {yield <><x><y/></x></>; } else yield #3={a:#3#};}");
tryItOut("/*infloop*/for(@foo; prototype = 1e81 .@*:: (__noSuchMethod__ = window); [(new (\t[<><x><y/></x></>])(this, *::*)) for (prop in [5.0000000000000000000000]) for each (__noSuchMethod__ in false) if ( '' )]) {}");
tryItOut("return true;");
tryItOut("{export __count__;gc() }");
