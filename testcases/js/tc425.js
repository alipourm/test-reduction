tryItOut("/*infloop*/for([(false >= null) if (<><x><y/></x></>)]; window;  /x/ .@*) {yield undefined; }");
tryItOut("\nexport prototype;");
tryItOut("if(\n*::*) {gc()continue ; } else  if (('fafafa'.replace(/a/g, new Function))) {gc()return; } else /*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in __count__) {var function::__iterator__;continue L; }");
tryItOut("\nreturn <x><y/></x>;/*for..in*/for(var __noSuchMethod__ = true in [[1]]) const __iterator__ = <x><y/></x>, __iterator__;");
tryItOut("/*for..in*/for(var let = (uneval(this.zzz.zzz.yoyo((* ? <><x><y/></x></> : false)))) in __count__-=new __parent__.hasOwnProperty(\"prototype\")((__count__))) /*infloop*/for((<xxx {__count__}=\t{ /x/g } />.((uneval(this)))); <bbb xmlns:ccc=\"(__parent__ = <><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb>.( \"\" .__count__ = [z1,,]); new (eval)([15,16,17,18].some((1 for (x in [])), [1]), __noSuchMethod__)) {this.zzz.zzz; }");
tryItOut("for(let y in [5,6,7,8]) var constructor;");
tryItOut("({ __proto__: (let (({ __count__: prototype, __noSuchMethod__: __iterator__ }))  /* Comment */this.zzz.zzz)(__noSuchMethod__.@*), __proto__: ({ __parent__: ({ __count__: ({ constructor: __count__, __iterator__: ({ constructor:  \"\" ['constructor'] }) }), constructor: [({ prop: ({ prototype: __noSuchMethod__ }) }), , ({ __parent__: ({ __proto__: ({ __iterator__: __proto__, constructor: __parent__ }), [, constructor, , ]: [__proto__, __proto__, , __noSuchMethod__, prototype] }) }), , __count__] }), __proto__: prop }) })");
tryItOut("\fL:if((* != this).__defineSetter__(\" '' .__defineSetter__(\\\"__proto__\\\", function  __count__ \\f() { return __parent__ } )\", Function)) yield; else  if (prop) 0;");
tryItOut("let (__parent__ = (eval(\"export *;\", 1e4.isPrototypeOf(true)))) { L: break ; }");
tryItOut("/*infloop*/L:for(var __count__; (constructor = <><x><y/></x></> .@ @foo); <xxx>{prop}</xxx>) /*for..in*/L:for(var __parent__ in window) {throw 3; }");
tryItOut("throw __parent__;");
tryItOut("if(new ((window ^= this))(<x/> / *, <><x><y/></x></>.propertyIsEnumerable(\"__proto__\"))) {({}).hasOwnProperty; } else  if (((({ __count__: __count__, prop: __iterator__ }) = ({ __proto__: prop })) ^= ([15,16,17,18].sort(eval, String(<x><y/></x>))))) { }");
tryItOut("with({constructor: [,]})window;\ngc()\n");
tryItOut("M:if([,].__lookupSetter__(\"__proto__\")) {let __count__ =  /x/g , __proto__ =  /x/ ;M:if(~this) {break ;export *; } else {return 3;return this; } } else  if (prop = *::*.__defineGetter__(\"constructor\", gc)) {yield; const __parent__; }");
tryItOut("try { constructor = __proto__; } catch(__proto__ if (function(){with({}) var  { continue ; } ;})()) { [1,,]; } catch(__iterator__ if (function(){for(let y in [5,6,7,8]) ;})()) { try { const __iterator__; } finally { yield; }  } finally\r { for(let y in []); } ");
tryItOut("if([15,16,17,18].some(<><x><y/></x></>, undefined)) {constructor;[1,2,3,4].map } else  if ((<><x><y/></x></> <=  /x/g )) {const 'haha'.split, __iterator__; }");
tryItOut("/*for..in*/for(let constructor: __proto__.watch\t(\"__proto__\", function  prop () { yield prototype } ) in <x><y/></x>) let __proto__;");
tryItOut("/*infloop*/for(__iterator__ = 3/0 ^= *++; (<x><y/></x>\n) %= (__count__ = <x><y/></x>).__defineSetter__(\"__iterator__\", (__proto__ = <><x><y/></x></> ? null ?  /x/g  : undefined : eval(\"<><x><y/></x></>\", null))); (-0) >> #1#) export __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in (function  prototype (__iterator__)true,  /x/g )(this, *::*)) {switch(<x/>) { default: var __count__ = this, prototype; }if(get = __count__) {} else yield (-1); }");
tryItOut("if(//h\n<><x><y/></x></>) {; } else var __parent__ = null, __iterator__ = __noSuchMethod__\n/*for..in*/M:for(var [__parent__, prop] = (prop.__noSuchMethod__ setter= function (__noSuchMethod__) { return ({a1:1}) } ) in <x><y/></x>) /*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in *) default: break; case false: break; case 9: (3);break; case function ([y]) { }: break; break; ;break; case 2: case 1: break; case <><x><y/></x></>:  /x/ ;");
tryItOut("/*infloop*/L:for(__noSuchMethod__ = (yield  '' ); (this.__defineGetter__(\"__iterator__\", ([z1,,].propertyIsEnumerable(\"__noSuchMethod__\")))); (0x99.valueOf(\"number\"))) {let prop;const __count__; }");
tryItOut("/*for..in*/for(#1#.propertyIsEnumerable(\"__count__\").__noSuchMethod__ in <><x><y/></x></>.__defineGetter__(\"prototype\", new Function)) function  prop (__count__, constructor) { yield <x><y/></x> } \n/*infloop*/do {M:if(new ((p={}, (p.z = window)()))(#1=[#1#].@*, #1#)) (<><x><y/></x></>); else  if (<><!--yy--></>) export __proto__; else \fexport constructor; } while(this.__defineSetter__(\"__noSuchMethod__\", function (({ __noSuchMethod__: [] }), __proto__) { yield (@foo = <x/>) } ));\n");
tryItOut("for(let y in [5,6,7,8]) with({}) { let(__count__) ((function(){with({}) { export *; } })()); } ");
tryItOut("switch(<><x><y/></x></> | window) { case 1: break;  }");
tryItOut("return; const __count__;");
tryItOut("{/*for..in*/L:for(var __iterator__ = __count__.constructor in <x><y/></x>) gc()with({}) let(__iterator__) ((function(){(<><x><y/></x></>);})()); }");
tryItOut("export constructor;");
tryItOut("/*for..in*/for(const __parent__ in (prop) - constructor%=<><x><y/></x></>) {return;Math.pow }");
tryItOut("M:with({__count__: (#3={a:#3#})[this]}){gc()export __iterator__; }");
tryItOut("if(eval(\"var constructor = <y><z/></y>;throw null;\", <y><z/></y>)) if(window--) { if (([1].watch(\"constructor\", Function))) return;} else {default: break; case 4: (false);/*infloop*/for(var constructor; 1e-81; __noSuchMethod__.(<y><z/></y>)) {return;let <><x><y/></x></>, __proto__ = [[1]];\r }break; case 5: case [false for each (__noSuchMethod__ in __proto__)].unwatch(\"__parent__\"):  } else {(1e4); }");
tryItOut(";");
tryItOut("if(yield \n(<y><z/></y>).call([], )) {{/*infloop*/for(-3/0; prototype; window) const __iterator__;/*for..in*/for(var __count__ = (function ([y]) { })() in window) {-0const constructor = window; } } } else  if ((\n[,,] %= *::* << *)) {/*for..in*//* nogeckoex bug 349964 */ for  each(var this in <x/>) {export *; }M:switch(new (function ()[z1,,])(this)) { default: if(prop.@*\f) {break ;export __parent__; } else {return; /x/  }case undefined: case 2: <x/>;break;  } } else /*for..in*/for(__proto__ = <y><z/></y> in __parent__) {{} }");
tryItOut("throw *::*;");
tryItOut("if([1] - this) {continue ; } else {break ;return  /x/ ; }");
tryItOut("/*for..in*/for(__count__ in (((1 for (x in [])))(undefined))){yield [,];{} }");
tryItOut("gc()\n");
tryItOut("");
tryItOut("{[1,2,3,4].slice__parent__ = <x><y/></x> }");
tryItOut("(@foo)\n /x/ ");
tryItOut("(1.3);");
tryItOut("/*infloop*/for([<> </>.(constructor.prototype getter= Function)].map(new Function).@*; 'fafafa'.replace(/a/g, (*::*).__defineSetter__) .@*:: [*].some(([[]]).__defineSetter__); false.__lookupGetter__(\"__parent__\")) {let __iterator__, __noSuchMethod__;/*for..in*/L:for(const __iterator__ in <y><z/></y>) {with({__proto__:  \"\" })var get = <x/>, __noSuchMethod__; } }");
tryItOut("/*for..in*/for(let \t__proto__ = __count__ = @foo in *) export *;");
tryItOut("*");
tryItOut("L: {gc()L: {let __noSuchMethod__ = *, __noSuchMethod__ = false; } }");
tryItOut("L:while((new (__proto__.constructor setter= Math.sin)((function (function::__parent__, prototype)true)(<x/>, <><x><y/></x></>), window)) && 0)while(((export *)) && 0)export function::x::prop;");
tryItOut("if(this.__defineSetter__(\"constructor\", eval)) { if (({__count__: <><><!--yy--></></>, __count__ getter: <x><y/></x>.(<><x><y/></x></>) })) if( \"\" ) /*infloop*/do export __noSuchMethod__; while(({a2:z2})); else {const __parent__, __iterator__; } else {do return; while((false) && 0); }}");
tryItOut("return  '' ;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const prototype.prototype in ((([(({__noSuchMethod__: -0, prototype getter:  /x/g  }))].some(gc)))([(__noSuchMethod__.__noSuchMethod__ =  '' )].map(eval)))){yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__parent__ in (({ set __count__() { yield [,,z1] += __count__ } ,  get __count__ __count__ () { return this.zzz.zzz }  }))) /*for..in*/for(var prototype in ((function(q) { return q; })(.2)))");
tryItOut("__parent__ = prototype;");
tryItOut("yield ( /x/g .@*).eval(new (__proto__)()).hasOwnProperty(\"__noSuchMethod__\");");
tryItOut("/*infloop*/M:for([,]; []; <x><y/></x>) ");
tryItOut("/*for..in*/for(const [x::__noSuchMethod__, __parent__] = prop = 1e+81 != <><!--yy--></> in this) export __count__;");
tryItOut("/*for..in*/for(const __count__ in (eval(\"yield this;\", <x><y/></x>).throw(5.0000000000000000000000))) var __proto__ = <x><y/><\f/x>, __iterator__ = [1,,];");
tryItOut("var __parent__ = false;");
tryItOut("/*infloop*/M:for(prototype = function ([y]) { }.__count__ = [z1] + undefined\f; (yield __proto__\n); [[1]].prototype) {/*infloop*/while(1.3){yield constructor;return <x><y/></x>; } }");
tryItOut("switch(constructor) { default: if(<><x><y/></x></>) ;break; return;case 6: var prop = this, __proto__ = null;case 9: /*for..in*//* nogeckoex bug 349964 */ for  each(prop in #3={a:#3#}) case ((true).watch).call(true, undefined, <x><y/></x>): export *;break; if(<x><y/></x>) let __parent__;break; case (this.__defineGetter__(\"__noSuchMethod__\", Function)): break;  }\n/*infloop*/for((prop.__defineSetter__(\"__iterator__\", ((1 for (x in []))).call)); ((p={}, (p.z = __count__ = __iterator__: @foo)()) == (++)); __proto__.__iterator__ = __parent__.__parent__ =  /x/g .__count__) break M;");
tryItOut("while((__iterator__ = 0x99) && 0)");
tryItOut("with({prop: (<{__noSuchMethod__}><!--yy--></{__noSuchMethod__}>.((\n(function ([y]) { })() >= (<><x><y/></x></>.((false[__noSuchMethod__]))))))}){if(#1=[#1#]--) {gc()/*for..in*/for(const <x><y/></x> in ((/*\n*/function  __proto__ ([__parent__, , , prop]) { let __noSuchMethod__ =  '' , __count__; } )((<><x><y/></\fx></>.__defineGetter__(\"__proto__\", (*::*).watch)).prototype = __noSuchMethod__))){__count__gc() } } }");
tryItOut("if(function(q) { return q; }) {with(<><x><y/></x></>){throw <><x><y/></x></>; }\nconst prototype = *; } else  if ((__iterator__ = <>@foo</> instanceof undefined >= Math.sin(<x/> % <><x><y/></x></>,  '' ))) {prototype = <x><y/></x>, __iterator__ = <x/>; } else (window);");
tryItOut("export prototype;");
tryItOut("switch(5.0000000000000000000000.propertyIsEnumerable(\"constructor\")) { default: if(*) return @foo;case (__parent__ /= prototype): break; case constructor-=<x><y/></x>: throw this;break;  }");
tryItOut("L:if(__proto__.(++3/0.__lookupSetter__(\"__iterator__\"))(prototype, 0x99)) { if (true[undefined] >>= ( ''  + window).hasOwnProperty(\"prop\")) } else /*for..in*/for(let __iterator__ in (((1 for (x in [])))(this))){return  /x/g ; }");
tryItOut("with({}) { with({}) { throw StopIteration; }  } ");
tryItOut("if((<y><z/></y>)([1,,])) {return *;yield <><x><y/></x></>; } else  if ([15,16,17,18].filter(( /x/g ).__defineSetter__, true)) break L; else let __proto__;");
tryItOut("{} const __iterator__;");
tryItOut(";");
tryItOut("return new Iterator((this.zzz.zzz for each (({ __count__: __parent__, prop: <x><y/></x> }) in [z1,,])),  \"\" );");
tryItOut("yield <x><y/></x>\n");
tryItOut("var __iterator__; const __proto__;");
tryItOut(";");
tryItOut("L: {return; }gc()");
tryItOut("try { throw StopIteration; } catch(function::__count__) { return <><x><y/></x></>; } ");
tryItOut("L:switch() { case 1: /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in * &= <x/>) {const __parent__;if(null) {<><x><y/></x></>; } }//h\ncase (prop|=__noSuchMethod__): return (eval(\"<y><z/></y>\", <><x><y/></x></>.__defineSetter__(\"prototype\", function  constructor () { yield this } )));{__noSuchMethod__, set = window;yield; }default: break; case ( /x/g ).watch(): do const __iterator__ =  \"\" ; while((((-0) ? @foo : <y><z/></y>)) && 0);break; case  \"\" .prop: break;  }");
tryItOut("{with({__parent__: undefined}){throw [[1]]; }let __parent__, prop = <><x><y/></x></>; }");
tryItOut("gc()");
tryItOut("/*infloop*/for(const prop; (([11,12,13,14].filter) ? this.__defineGetter__(\"({ function::prop: __noSuchMethod__, __count__: __parent__ })\",  /x/g ) : <bbb xmlns=\"((((<x><y/></x>)([,], __proto__)))[__parent__.prop])\"></bbb>); [prototype = ({ __count__: __iterator__, __parent__: ({ __parent__: __parent__ }) })]) {L: Math.powconst constructor; }");
tryItOut("if(\fnew Array((new (1 for (x in []))(<y><z/></y>)), *) >>>=function ([y]) { }) prop else  if (constructor.(5.0000000000000000000000) .@*:: (prop+=*::*)) { /x/  }");
tryItOut("switch(#1# - <x><y/></x>) { default: while((__count__) && 0)let prototype: <y><z/></y>;break; break; case <y><z/></y>.watch(\"prop\", [1,2,3,4].map): if( '' ) gc() else {yield [[]]; }case 6: /*infloop*/for(var [({ prototype: prototype }), try { return <><x><y\f/></x></>; } catch(prop) { throw false; } finally { const prop = <x><y/></x>, __count__ = .2; } ,  for each (prop in <x><y/></x>), , __parent__] = __proto__ =  /x/g ; __iterator__.prop = <><x><y/></x></>.unwatch(\"__count__\"); __iterator__ = <x><y/></x>) {<><x><y/></x></>;(*::*); } }");
tryItOut(" const __noSuchMethod__;");
tryItOut("with(prop+=prototype(<x><y/></x>))/*for..in*/for(const prototype = (-0) in *) {(/a/gi).apply }");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("while((new (((p={}, (p.z = <x><y/></x>)()) != (<><x><y/></x></>)))((\n)) ^ <><><!--yy--></></>) && 0){const __noSuchMethod__, __count__ = <><x><y/></x></>; }");
tryItOut("with(new ([1,,])(<><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")))switch((function(id) { return id }(false))) { default: if(this) {;; }break;  }");
tryItOut("__parent__");
tryItOut("yield [[1]];");
tryItOut("with({prototype: this.__defineGetter__(\"__parent__\", Function) = (constructor.prototype)}){{}yield prop; }");
tryItOut("/*for..in*/for(let constructor in ((5.0000000000000000000000)(()))){L:with({prop: prototype.eval(*)})__noSuchMethod__ = this, __count__ = @foo;/*infloop*/while(<><x><y/></x></>){__count__ = <x><y/></x>, constructor; } }");
tryItOut("return;");
tryItOut("{export *; }");
tryItOut("yield function::__proto__ .@  /x/g \r;");
tryItOut("if(null) {throw __proto__;prototype = [,,] } else  if (<></>) ; else {break ;yield window; }");
tryItOut("with(__iterator__){return; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for((yield ) - (<x><y/></x> if (0.1)); <</>; (new Date(let (prototype = <><x><y/></x></>, __proto__) \f('fafafa'.replace(/a/g, (new Function(\"\"))))))) gc()");
tryItOut("/*infloop*/M:for(true; -0; constructor) {let prototype = <x/>;{} }\nyield;");
tryItOut("return");
tryItOut("({ prop: __noSuchMethod__ }) = __noSuchMethod__;");
tryItOut("return undefined;\n{__noSuchMethod__, __proto__ = __iterator__; }\n");
tryItOut("if( { return __parent__[@foo] } ) {return window; } else  if (this.zzz.zzz) export *; else L:if( /x/ .__lookupSetter__(\"constructor\")) {let __parent__ = <x><y/></x>;/*infloop*/L:for(<x/>; false; window) {(function  prototype ()<x><y/></x>).apply } } else  if (this.__defineGetter__(\"prototype\", function(q) { return q; })) constructor; else /*for..in*/for(const constructor = prototype instanceof *::* in window) (window);\nlet __iterator__;\n");
tryItOut("/*for..in*/for([prototype, prop] = (__parent__ =  '' )[<x><y/></x>.(<x><y/></x>)] in __noSuchMethod__+=window) if((true)) { if () {<x><y/></x>return; }} else {export prototype; }");
tryItOut("throw StopIteration; const __count__;");
tryItOut("/*infloop*/for(let [] = (new RangeError(<><x><y/></x></>, <><x><y/></x><\r/>)); <!--yy-->.(0.eval([[1]])); <x/> ? @foo : {}) let prop, __count__ = [];gc() const prop;");
tryItOut("/*infloop*/for(let prototype = <employee id=\"1\"><name>Joe</name><age>20</age></employee>; ; <>yyy</>) {export *;break L; }");
tryItOut("export prototype;");
tryItOut("for(let y in [5,6,7,8]) let([, , , , __count__], prototype = true.eval(<><x><y/></x></>)) { return new (this)(-0);");
tryItOut("/*for..in*/for(const constructor = false in [,,]) { }");
tryItOut("if(({prop setter: gc, prop: <><x><y/></x></> })) {\t if ((__count__ = (p={}, (p.z = [z1,,])()))) {1e4;return undefined; } else {}}");
tryItOut("/*infloop*/for(const constructor;  /x/g ; <y><z/></y>.prop) L:switch((/a/gi)()) { default: break;  }");
tryItOut("/*infloop*/for(let __proto__; ({__proto__: <x><y/>\t</x> % <y><z/></y> }); ((1e4.@*)[(this.__defineGetter__(\"__iterator__\", /a/gi)).valueOf(\"number\")])) {this.zzz.zzz; }{export __count__; }");
tryItOut("L:if( \"\" .__iterator__) { if (this) yield; else }");
tryItOut("/*for..in*/for([constructor, __iterator__] = true in  if (4.)++) {}");
tryItOut("/*infloop*/while(<x><y/></x>){}\n");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = [11,12,13,14].filter in <xxx>{constructor}</xxx>) Math.pow");
tryItOut("L:if(<x/> in (Function).call(<x/>,  /x/ )) {const __parent__;with(<x/>.@foo)const prop = <><x><y/></x></>, prototype = [1]; }");
tryItOut("if(5.0000000000000000000000) continue ;");
tryItOut("L: *::*;");
tryItOut("break M\nif( \"\" ) export __parent__; else {{}var prototype; }");
tryItOut("throw <x><y/></x>;");
tryItOut("do continue ;prop\nexport __count__;\n while((([15,16,17,18].map((true).__defineSetter__, @foo))) && 0);");
tryItOut("yield let (\f__proto__ =  \"\" ) <x/>;");
tryItOut("do (Function).call(5.0000000000000000000000, (function ([y]) { })(), window); while((<x/>) && 0);");
tryItOut("if(({prop: eval(\"<><x><y/></x></>\", false).__lookupSetter__(\"__iterator__\")})) yield; else  if (((<><x><y/></x></>.((1 for (x in []))(({}), constructor))) for (__noSuchMethod__ in this) for each (__count__ in __parent__) for each (__parent__ in window))) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in  /x/ ) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in arguments) (false);");
tryItOut("/*for..in*/for(var __proto__ in (([1,2,3,4].map)(prototype)))( /x/ );");
tryItOut(";");
tryItOut("L:if(*.__defineGetter__(\"constructor\", gc)) gc()");
tryItOut("with({__parent__: __noSuchMethod__.__parent__ = <x\t><y/></x>.prop = null}){/*for..in*//* nogeckoex bug 349964 */\f for  each(let constructor.__noSuchMethod__ in  '' ) {/*for..in*/for([prop, __count__] = window in false)  } }");
tryItOut("return  /* Comment */();");
tryItOut("/*infloop*/M:while([1,2,3,4].map(({a1:1}) >=  \"\" .propertyIsEnumerable(\"prototype\"), \n__iterator__+=<x><y/></x>))\n");
tryItOut("if(eval(\"M:if( '' ) {function  __count__ (__parent__, constructor)thisconst __noSuchMethod__ = 1e-81; } else {return; }\", [15,16,17,18].some(Function, [15,16,17,18].sort(/a/gi, <x/>)) .@ ({ get prototype prop (getter, prototype) { return <><x><y/>\t</x></>; }  }))) {L:if(void __proto__) {export __iterator__; } } else  if ((function::each for (prop in  \"\" ) if (function(id) { return id }))) gc()");
tryItOut("switch(__noSuchMethod__.x::__noSuchMethod__) { case 0: break; yield 1.2e3; }");
tryItOut("if( /x/g ) {throw <x><y/></x>; } else  if (true\n) {Xreturn; const __proto__; }");
tryItOut("L: {constructor, prop = this }");
tryItOut("{__parent__; }");
tryItOut("\tif(__noSuchMethod__.prop) { if (constructor = <x><y/></x>) {continue ; } else {export *; }}");
tryItOut("M:with({__parent__: }){prop; }");
tryItOut("/*for..in*/M:for(var [prop, prop] =  /* Comment */(typeof *::*.@foo) in __parent__ = [[1]]) {break M;if(([__parent__.isPrototypeOf(prototype)].sort([1,2,3,4].map) ? <><x><y/></x></> : 1.2e3 / undefined)) {} }");
tryItOut("L:if(<><x><y/></x></>) gc()");
tryItOut("/*infloop*/for((function(id) { return id }.isPrototypeOf(prop)); __iterator__; new gc()) {export __count__: <x><y/></x>;throw @foo; }");
tryItOut("M:switch(yield eval(\"([1,2,3,4].map).call( '' , @foo, window)\", __proto__ = [z1])) { default: var __parent__; }");
tryItOut("/*for..in*/for(let __count__ = <x><y/></x>.watch(\"__count__\", (new Function(\"return;\"))).hasOwnProperty(\"function::__proto__\") in \n({prototype: <y><z/></y>})) {yield arguments; }");
tryItOut("while((((__count__ = -3/0), this.@foo)) && 0){with({prop: null})try { return; } catch(__parent__ if <><x><y/></x></>) { {} } catch(prototype if (function(){return;})()) { yield #3={a:#3#}; } finally { (1 for (x in [])) } L: prop; }");
tryItOut("/*infloop*/for(let delete = (this.zzz.zzz); new true(window); gc( \"\" , )) yield;");
tryItOut("((new Function(\"return;\"))).call\n(<x/>);\n");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/for(let __iterator__ in .2) export prop;");
tryItOut("let (__count__ = null, prop) { /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in false) {return; } }");
tryItOut("/*infloop*/while(this)null;");
tryItOut("if(window for (constructor in this) if (true)) { if (__proto__ .. null.prop * ( { return <x/>.isPrototypeOf( /x/ ) } .__proto__ = {})) {gc() } else {{}if(<><x><y/></x></>) { if ((++window)) ({}).__lookupGetter__} else yield; }}");
tryItOut("/*for..in*/for(constructor = let (prop)  >>>=[z1,,]\f[1e81] in ((({}).hasOwnProperty = 4.[ /x/ ])\n)) {( /x/ ); }");
tryItOut("gc()");
tryItOut("/*infloop*/do {export *;throw false; } while\t(true);");
tryItOut("/*for..in*/for(constructor = (({ get __count__() { gc() } , __iterator__: __proto__.(*) })) in __noSuchMethod__.(prototype)) {/*infloop*/while(constructor){const __iterator__, __proto__ = -0; }{yield @foo; } }");
tryItOut("this.zzz.zzz;");
tryItOut("__proto__");
tryItOut("return ((this).call);");
tryItOut("with({__proto__: (({__proto__: __iterator__, set setter: function  __proto__ \f(prototype) { return *::* }  })).isPrototypeOf(<xxx {__proto__}={undefined} />)}){prototype = <x/>, prop = (-1); }");
tryItOut("with({prop: [,,]}){{}{} }");
tryItOut("L: var prototype = <y><z/></y>;\t");
tryItOut("let(__parent__, [constructor, , [prototype], , ({ __iterator__: __count__, __noSuchMethod__: __noSuchMethod__ })]) { throw __proto__;");
tryItOut("with(*)continue M;");
tryItOut("with(function () { return <x><y/></x> } .@*)return");
tryItOut("yield");
tryItOut("continue L;");
tryItOut("/*infloop*/while(<x><y/></x>.(<><x><y/></x></>)){(<y><z/></y>); const __proto__;/*for..in*/for(var prop in <><x><y/></x></>) export *; }");
tryItOut("/*for..in*/for(let __count__ in <x><y/></x>) {if(<><x><y/></x><\f/>) {function  constructor () { yield  \"\"  } \freturn; } else { } }");
tryItOut("L: /*for..in*/for(var __proto__ in (((new Function(\"return;\")))(({prototype: true }))));");
tryItOut("if((-0)) {var constructor, prop = <><x><y/></x></>; }");
tryItOut("L: (window);");
tryItOut("L: {(__iterator__); }");
tryItOut("M:if(({__parent__: __noSuchMethod__ }) | new (window)(window)((constructor|=<y><z/></y>))) {const constructor, prop; } else {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <x><y/></x>['__count__'] in prototype) var __parent__;");
tryItOut("L: {}");
tryItOut("if(<x><y/></x> / *::* ^ ({__count__: __count__})) {yield <x><y/></x>;let (__count__, prop = <x><y/></x>) { gc() } } else  if (return) { if (<><x><y/></x></>) }");
tryItOut("({}).__lookupGetter__");
tryItOut("return (this.__defineSetter__(\"prototype\", (@foo).call));");
tryItOut("(({}).__lookupGetter__).apply\n /x/ ;\n");
tryItOut("/*for..in*/for(__count__ in -3/0 ? <x/> : false) {if( /x/g ) { if (null) export *::*; else {export __noSuchMethod__;throw <>try { export prototype; } finally { let __count__ = <y><z/></y>; } </>; }}function(q) { return q; } }");
tryItOut("let (prototype =  /x/ ) { export *; }");
tryItOut("if(yield window) { if ( /x/g  || false) 5.0000000000000000000000} else (new Function(\"gc()\"))");
tryItOut("let (__proto__) { yield <x><y/></x>.valueOf(\"number\"); }");
tryItOut("L:if([[1]]) return;");
tryItOut("throw StopIteration;");
tryItOut("if(0.1) { if ((false.prototype = [,,z1])) if(__iterator__) {var __iterator__, __count__; } else  if (<y><z/></y>) {new Functionconst function::__parent__ = [z1]; } else <><x><y/></x></>} else /*infloop*/for(#1#; __parent__; window) {export *;break L; }");
tryItOut("if((new <x><y/></x>()) + [null if (this)]) __proto__ = __noSuchMethod__, this;");
tryItOut("if(([<y><z/></y> for each (prop in undefined)])) { if (((<y><z/></y>)(({}))) < __iterator__ = __parent__.yoyo(*.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice))) if(<x/>) { if (__parent__) var window; else yield;}} else continue M;");
tryItOut("{if( ''  @ *::*\t) { if ((function::__parent__%=<y><z/></y>)) {export __parent__\nyield this; } else (function  __proto__ (__noSuchMethod__) { export prototype; } ).call}break ; }");
tryItOut("{yield; } const __parent__;");
tryItOut("function (constructor, []) { return (yield 1e+81) } ");
tryItOut("L: if([z1]) export __noSuchMethod__;");
tryItOut("prototype = __proto__;");
tryItOut("yield ({__proto__: <xxx {__noSuchMethod__}={<x><y/></x>} />.(window\n.*)});");
tryItOut("/*infloop*/for((yield yield true); let (__noSuchMethod__ = <y><z/></y>, __iterator__) [,,z1]; (#1# === @foo)) {; }");
tryItOut("switch(new /a/gi()) { case __count__.__proto__ setter= constructor, prop: break; {/*infloop*/while([,])yield;yield; }break; default: with(<x><y/></x>){return;return (-0); }break;  }");
tryItOut("M:if(this.__defineGetter__(\"prop\", [1,2,3,4].map).__noSuchMethod__) {yield;return; } else  if (\ttrue) if(@foo) {{}gc() } else  if (<><x><y/></x></>) {prop = <x><y/></x>;; }");
tryItOut("/*infloop*/for(__parent__; __iterator__.(new (<><x><y/></x></>)(<x><y/></x>)); (prop = __parent__).yoyo(__iterator__%=prototype = (*::* += <x><y/></x>))) {yield; const __iterator__;export *; }");
tryItOut("if(__proto__.__noSuchMethod__) { if ((false .@ __proto__)) {(1.2e3);continue M; }} else {__proto__: *::*let __proto__ = (-0); }");
