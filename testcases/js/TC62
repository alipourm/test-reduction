
tryItOut("yield #1=[#1#] -=  /x/ ;");
tryItOut("switch((<><x><y/></x></>)) { case [15,16,17,18].filter((<><x><y/></x></>).call, <xy/> { yield eval(\"<x><y/></x>\", <x><y/></x>) }  <//*x>): export *; }");
tryItOut("/*infloop*/L:for((__parent__ = __parent__); yield new (3).call(); (({__parent__: *::*.__defineSetter__(\"yield\", 'haha'.split)}))) while((true) && 0)const yield;, __count__;");
tryItOut("with({}) for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) export *;");
tryItOut("L: return (prop.__proto__ =  ''  ?  ''  :  /x/g  >>>=<y><z/></y>.valueOf(\"number\"));");
tryItOut("if(1e+81) { if (@foo.isPrototypeOf([11,12,13,14].filter) !== let (__iterator____parent__) ) {with( \"\" ){yield;export *; } } else {L: yield <x><y/></x>;/*for..in*/for(var __parent__ = <y><z/></y> in __noSuchMethod__) (undefined); }}");
tryItOut("([@foo if (<x><y/></x>)]).__iterator__ = __iterator__;");
tryItOut("{return @foo .@*:: 3.141592653589793; } const __iterator__;");
tryItOut("/*infloop*/for(var [, __iterator__, __proto__.constructor = prop;] = new Object(); __parent__; (yield [,,z1])) {break M; }");
tryItOut("/*infloop*/for(prototype; undefined / [__noSuchMethod__, x::#3={a:#3#}, __proto__, __proto__, ] = ({ __noSuchMethod__: prop, __noSuchMethod__: prop }); ('fafafa'.replace(/a/g, function () { yield  /x/g  } ))) continue ;");
tryItOut("M:if(<><x><y/></x></> ===  /x/ [<x/>\n]) ; else  if ((null.__lookupGetter__(\"prototype\") -= prototype())) const constructor = false, __count__ = @foo; else 1.2e3/*infloop*/L:while(__count__ = <x/> > (<y><z/></y> ?  /x/g  :  \"\" ))let prototype = window, __iterator__;");
tryItOut("/*infloop*/M:for(let ({ prototype: __iterator__, __proto__: __iterator__ }) =  \"\" ; __count__.__iterator__; (this.__defineGetter__(\"__iterator__\", (new Function(\"var constructor, __noSuchMethod__;\"))))) export __count__;");
tryItOut("/*for..in*/for(prop(<x><y/></x> << true.__defineGetter__(\"constructor\", (/a/gi).call)) in ((new function  __iterator__ (__count__) { return  \"\"  } ((__iterator__ = prop)))('fafafa'.replace(/a/g, (eval).call) << *::*)))");
tryItOut("{}");
tryItOut("if(({__proto__: __count__})) { if (yield (*)[@foo]) {{} } else {[1,2,3,4].map }}");
tryItOut("L: gc()");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (([1,2,3,4].map)(function (__parent__, constructor) /x/ ))){prop;\ngc\n }");
tryItOut("/*for..in*/for(var __proto__ in ((({}).__lookupGetter__)(<x/> in (-0)))){/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in [,,z1]) yield; }");
tryItOut("({ __proto__: ({ __iterator__: [, ({ __count__: constructor }), ], prototype: [({ __noSuchMethod__: new Date((new Error(constructor, this)), true), __count__: [, , ({ __count__: [__count__, , , , ] }), (@foo)(<y><z/></y>)] }), prop(({}))] }), __noSuchMethod__: ({ __noSuchMethod__: __iterator__, __parent__: ({ __parent__: [, ({ prop %= __parent__['prop']: ({ __proto__: ({ constructor: (-3/0 ^ prototype) }), __noSuchMethod__: [__iterator__, , constructor, ] }) }), , , ] }) }) })");
tryItOut("/*infloop*/for(let __iterator__; new (<><x><y/></x></>)(null, <x><y/></x>); (<><x><y/></x></> for each (__noSuchMethod__ in #1=[#1#]))) ;");
tryItOut("L: /*infloop*/:for(__count__; <y><z/></y>; <><x><y/></x></>)  const prototype;");
tryItOut("with({__iterator__: <>yyy</>}){(1 for (x in [])) }");
tryItOut("/*infloop*/while(@foo.prototype = __parent__ = 1e+81){(prototype); }");
tryItOut("switch(#0=({prototype: <x><y/></x>})) { case 3: case *::* .@ false: (@foo);break;  }");
tryItOut("/*for..in*/for(const prop in  \"\" ) ");
tryItOut("/*infloop*/do {yield;yield 3.141592653589793; } while(set)");
tryItOut("return\n/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in <x/>.__defineGetter__(\"__proto__\", <x><y/></x>)) let (prototype) { continue M; }");
tryItOut("/*for..in*/L:for(prototype.constructor in <x/>.isPrototypeOf(null)) ;");
tryItOut("/*infloop*/L:for((__proto__.__iterator__ getter= __proto__); (this.@foo); [this if (window)]) {__noSuchMethod__ = *;gc() }");
tryItOut("if(prop = this) export *; else  if (0/0) yield;");
tryItOut("/*infloop*/for(const ({ prototype: [, ({ __proto__: __parent__, __iterator__: prop }), []], constructor: __iterator__ }) = function(id) { return id }; eval(\"export *;\", <><x><y/></x></>); eval(\"var __parent__, prop;\", typeof false)) export *");
tryItOut("L:with([new __count__ for each (return @foo; in <x><y/></x>)(*.__defineSetter__(\"__iterator__\", <x><y/></x>)) if (__count__.__parent__)]){{}\n; }");
tryItOut("{let __proto__ =  '' , __iterator__; const __parent__; }");
tryItOut("let (__noSuchMethod__, ({ __iterator__: __count__ }) = <x><y/></x>) { let (<y><z/></y>, prototype) { yield window; } }");
tryItOut("/*for..in*/M:for(var <><x/*\n*/><y/></x></>.<><\tx><y/></x></> in <y><z/></y>) {M:switch(0.1) { default: gc()return;break; case null: break; yield true;break; break; export *; } }L: { }");
tryItOut("(p={}, (p.z = ( \"\" ))())\ntry {  } catch(__parent__ if (function(){export prototype;})()) { export __parent__; } catch(__count__ if (function(){continue ;})()) { let __proto__; } ");
tryItOut("return true;");
tryItOut("M:if(__iterator__ = <x/>) {with({__noSuchMethod__: __noSuchMethod__, function::__parent__.(true)}){;export *; }/*infloop*/do {var prototype = #1#, __count__ = <x><y/></x>;return; } while((gc).call()); } else  if ((null.__lookupSetter__(\"__proto__\").valueOf(\"number\"))) {/*infloop*/for((4.)(prop) = *.yoyo(<x><y/></x>); (__count__ = <x/>); ((this >>  /x/ ) if (#3={a:#3#}))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <x><y/></x>) yield; }\n } else {}");
tryItOut("\nyield;\n");
tryItOut("/*infloop*/for(const __iterator__;  '' (__parent__, __iterator__); (new (function(q) { return q; })(eval(\"return;\", -1), 5.0000000000000000000000))) /*infloop*/for(var __parent__ = <x><y/></x>;  /x/g ; __noSuchMethod__ = {}) {;continue ; }");
tryItOut("null;\n;\n");
tryItOut("/*infloop*/for([({ __iterator__: ({ __iterator__: ({ __count__: __proto__ }) }) }), __count__] = ([(__iterator__.(0.1))] ? new \fnew Function() : (yield ([15,16,17,18].sort(gc, <x/>)))); (*::* = [11,12,13,14].map)[prototype.__defineGetter__(\"prototype\", 'haha'.split)]; (__iterator__ = window) , false in true) {throw  }");
tryItOut("<x/>.__lookupSetter__(\"prop\")");
tryItOut("while((__parent__.__iterator__) && 0)function ()false");
tryItOut("if((__iterator__ = this >> new *())) { if (#1=[(function(q) { return q; })([1,,], false)]) if(1.3) yield  /x/ ; else {let __noSuchMethod__, prototype; }}");
tryItOut("/*for..in*/for(let [__parent__, [, ({ x::__iterator__: ({  continue : __iterator__, prop: constructor }) }), __noSuchMethod__, ]] = let (__count__) [11,12,13,14].some in //h\n<><x><y/></x></>.throw(<x/>)) {this.zzz.zzz; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in [(uneval(this))].some(Function)) L: {let __iterator__ = window;break ; }");
tryItOut("with({}) { with({}) { throw StopIteration; }  } ");
tryItOut("while((((yield (eval(\"throw  /x/ ;\", undefined))))) && 0)if(-1) {let __proto__, __proto__ = *::*;return; } else {yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(var ({ __count__: [__iterator__, ({ prop: __iterator__, prop: __count__ }), ], __parent__: ({ prop: ({ __iterator__: __iterator__, __noSuchMethod__: __count__ }), prop: __noSuchMethod__ }) }) = (yield this); eval(\"false\", *); +prop.__iterator__) {yield <y><z/></y>;let __iterator__ = <x><y/></x>, __noSuchMethod__; }");
tryItOut("with({prop: (export __proto__)}){with(<><x><y/></x></>)*;(__noSuchMethod__ = window)\n }");
tryItOut("/*for..in*/for(const [__proto__, prop] = 1e81 in <><x><y/></x></>) {return; }");
tryItOut("(function(id) { return id })\n");
tryItOut("let(__count__, __noSuchMethod__) { yield (({a2:z2}).__lookupSetter__(\"__noSuchMethod__\")).@* % ([11,12,13,14].map);");
tryItOut("/*for..in*/for(const __iterator__ in this.__defineSetter__(\"prototype\", (1 for (x in [])))) {const __iterator__ = ((1e+81 @ )((new (1.3)()), __iterator__)); }");
tryItOut("constructor = __count__;throw ( /x/  >= [[1]]);");
tryItOut("if(({prop setter: Math.pow,  set __iterator__ __proto__ (__proto__)\t { return __parent__ }  })) {; } else  if ((this = (true.valueOf(\"number\")).yoyo((\n<x><y/></x>) >> __parent__ <<= *::*))) {export *;/*for..in*/for(__count__ in ((this)(<><x><y/></x></>)))__iterator__ } else let prototype;");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in __parent__) <x><y/></x>\n");
tryItOut("M:if(#1#) {gc()return #3={a:#3#}; } else return;;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const [prop, __count__] = ((prototype)-=true.watch(\"__count__\", Math.sin)) in false) /*infloop*/do {{} } while(<x><y/></x>)\n/*infloop*/for(let __iterator__; *::*['prop'] = (\tfunction  __count__ (__iterator__, prop) { return @foo } ).call(prop, <x><y/></x>, <y><z/></y>); <bbb xmlns:ccc=\"(<><x><y/></x></> % *::*)\"><ccc:eee></ccc:eee></bbb>) {/*infloop*/for(let prop; undefined; return prototype;) {continue ;yield false; }if(<x><y/></x>) {;var __count__, __iterator__ = null; } else  if (<>__count__</>) {constructor;export __proto__; } }");
tryItOut("/*for..in*/for(var [__count__,  /x/ ] = __iterator__ in prop = (eval(\"__noSuchMethod__\", <x><y/></x>))) if(true().yoyo((!<><x><y/></x></>))) gc() else  if ((window.throw(x::__proto__ = __parent__, function::constructor = window;))) {const prototype = #3={a:#3#};var __count__ =  /x/ ; } else {export *;yield; }");
tryItOut("/*for..in*/for(let [constructor, constructor] = ~(new Date()) , [__iterator__.__parent__ = {}] in (yield __parent__)) {throw __iterator__;\n\n }");
tryItOut("/*infloop*/while(this){(<y><z/></y>);({ __parent__: []\t }) }");
tryItOut("if(<x><y/></x>.yoyo( '' ))  else  if ((-3/0.propertyIsEnumerable(\"__iterator__\"))) __count__ = <><x><y/></x></>; else {const constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in ( \"\"  , #1#)) {throw false; }");
tryItOut("/*for..in*/for(var prototype = null in this.__defineSetter__(\"prop\", function(q) { return q; })) /*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <x/>) {({ prop: __count__ }) = ([11,12,13,14].sort) }");
tryItOut("/*infloop*/for(({ __proto__.getter: false['__proto__'] }) = yield @foo.*; this - *; yield ( /* Comment */<y><z/></y>)) if(1e+81 += <x><y/></x>) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("return <x><y/></x>.(<x><y/></x>);");
tryItOut("/*infloop*/for(var __parent__; __noSuchMethod__; __iterator__) {throw  /x/g ; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("if(<><xxx>{__count__}</xxx></>) {continue M;/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in  '' )  { __proto__; }  } else  if (new (this)(<x><y/>\t</x>, ({a2:z2}))) {/*infloop*/L:while(null.__defineSetter__(\"prototype\", (true).watch))prototype = <x><y/></x>, prop = <><x><y/></x></>; }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("/*for..in*/for(var __noSuchMethod__.__noSuchMethod__ in setter -= this) {return; }");
tryItOut("try { for(let y in []); } finally { for(let y in []); } ");
tryItOut("with(window.isPrototypeOf( \"\" ));");
tryItOut("/*for..in*/for(var (<><x><y/></x></> .. ({a2:z2})\n) in ((({}).__lookupGetter__)((<zzz>(-1) || <><x><y/></x></></zzz>.(prop(-0)-=[11,12,13,14].sort))))){constructor = this, __noSuchMethod__ = @foo; }");
tryItOut("<><x><y/></x></>\n");
tryItOut("/*infloop*/for(void --__parent__; __proto__+=this; Exception()) {<><x><y/></x></>;(*::*);eval }");
tryItOut("default: L:if(__noSuchMethod__ in [z1,,]) break; case [constructor = *::* & <x><y/><//*\n*/x>.yoyo( '' )]: L:with({prop: <y><z/></y>}){export __parent__; }break; case 3: break; case 8: if([1]) {const __proto__, prop = [[]]; } else {}case 8: /*for..in*/for(let __parent__.__iterator__ in ((({}).hasOwnProperty)((((({}).__lookupGetter__).call(window, <x><y/></x>, function ([y]) { })) |= (constructor = <><x><y/></x></>)\f)))){var __proto__ = this, __parent__ = constructor;L: {{yield <><x><y/></x></>;export __noSuchMethod__; } } }break; ");
tryItOut("M:if(eval(\";\", <x><y/></x>)) {(false); } else  if (prop = *) return;");
tryItOut("constructor = prototype;");
tryItOut("throw @foo\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in new (Math.sin)((<x/>.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)))) {break L; }");
tryItOut("if(__noSuchMethod__.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) { } else  if (([z1,,].propertyIsEnumerable(\"prop\"))) {}");
tryItOut("L:with({constructor: ((new *::*({}, 1e4)) ? ((__proto__.( '' )) >> __count__ = *) : x::__iterator__|=<><x><y/></x></> >>> __iterator__)})const __proto__ = function ([y]) { };");
tryItOut("let(constructor, __proto__) ((function(){/*for..in*/L:for(var __count__ in ((new Function)(@foo)))})());");
tryItOut("yield\n");
tryItOut("/*infloop*/while(<x><y/></x>){( /x/g );export __proto__; }");
tryItOut("constructor = prop;");
tryItOut("if((-0)) yield <y><z/></y>; else  if (<x/>) export __count__; else {export *; } const prop;");
tryItOut("yield (<x><y/></x> ? <y><z/></y> : 0/0 instanceof <><x><y/></x></>);");
tryItOut("/*infloop*/for(let prop; <x/>; ('fafafa'.replace(/a/g, (1 for (x in [])))).__defineGetter__(\"__iterator__\", undefined)) let __parent__ = <><x><y/></x></>, prop;");
tryItOut("if([,,z1]) {if(([15,16,17,18].filter(window, ({})))) prop, __count__{} } else  if (constructor-= /x/g ) ( '' ); else {if(@foo) {/*infloop*/while(prototype)yield function ([y]) { }; } }");
tryItOut("/*infloop*/for(((prop =  /x/g ) <<= <><x><y/></x></>.eval(window)); (p={}, (p.z = <><x><y/></x></>.*)()); ((yield <x/>))) {{} }");
tryItOut("do const prop = <><x><y/></x></>, prop; while((({prop: __parent__})) && 0);");
tryItOut("/*infloop*/L:for(let constructor; \n__iterator__; (new Object(<x/>, __proto__))) {({}).__lookupGetter__; }");
tryItOut("let(({ __noSuchMethod__: constructor, constructor: __parent__ }) = <y><z/></y>, prop = function::prototype) { prototype = constructor;");
tryItOut("L:if([11,12,13,14].map) {constructor, __parent__ = <x><y/></x>; } else  if (<><x><y/></x></> ? *::* : default: case [1,,]: yield;break; case @foo: break; case 4: case 9: break;  | ((<y><z/></y>)[__iterator__])) return;");
tryItOut("let (__noSuchMethod__ = new Function(-1, *) ^ \n<xxx {__iterator__}={<\f><x><y/></x></>\t} />) { (*); }");
tryItOut("if(*) {{}(<><x><y/></x></>); } else  if (*::*) prop; else {const __count__; }");
tryItOut("(@foo);");
tryItOut("/*for..in*/L:for(let function  constructor () { \tL:do <x><y/></x>; while((<><x><y/></x></> &= 1.3) && 0); }  in <>(p={}, (p.z =  '' .hasOwnProperty(\"__iterator__\"))())</>) {with({__iterator__: __count__})yield 1.3; }");
tryItOut("M:switch( /* Comment */<x/> >>>=<x><y/></x>.__lookupGetter__(\"__proto__\")) { default: (((-0)).__defineSetter__).apply__count__ = constructorbreak;  }");
tryItOut("with({}) { try {  } finally { this.zzz.zzz; }  } ");
tryItOut("/*infloop*/M:for(var prototype = <y><z/></y>; (([,,z1].__defineSetter__(\"__proto__\", function(q) { return q; })) if (__proto__ = gc())); <xxx {__iterator__}={<x/>} />.(prototype.__lookupGetter__(\"prototype\"))) /*infloop*/L:while(<><x><y/><\t/x></> % 0/0){const __count__ =  { yield  ''  } ; }");
tryItOut("__proto__ = __proto__;");
tryItOut("const prototype, prototype = window\n/*for..in*/for(var constructor = * in <x><y/></x>) let __parent__, __parent__ = window;");
tryItOut("/*infloop*/while((<><x><y/></x></>[<x><y/></x>]))export *\t;");
tryItOut("throw StopIteration;");
tryItOut("if(( /* Comment */true)) { if (()) if(window) {return;export __proto__; } else {gc()var __parent__ = 1e81; }}");
tryItOut("/*infloop*/M:for(const prototype = [[]];  /x/g ; prop) {yield window;throw 033; }");
tryItOut("if(null) {<><x><y/></x></>;prototype, constructor; } else gc()");
tryItOut("throw constructor\nyield;");
tryItOut("with((__parent__.([])))gc");
tryItOut("export *;");
tryItOut("yield ~[z1,,];");
tryItOut("L:if(<><ccc:ddd>yyy</ccc:ddd></> = (({__iterator__: <x><y/></x>}))) { default {}return prop; } else  if ([__parent__, [__iterator__, __parent__, , , ]] = <x><y/></x> === *::*) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in window) const prop, __iterator__ = __parent__;throw {} ? undefined : __noSuchMethod__; }");
tryItOut("\rL:if(()) yield undefined;");
tryItOut("(null)\nexport x::__noSuchMethod__;");
tryItOut("yield 3/0;");
tryItOut("/*infloop*/while(function (__proto__, __proto__) \"\" ){break L; }");
tryItOut("let (__parent__ = yield ( \"\" .__lookupSetter__(\"__proto__\"))) { switch( /x/g .throw(false)) { case (function(id) { return id }.isPrototypeOf(*::*).__proto__ = __count__ =  \"\" ): break; default: break;  } }");
tryItOut("Math.sin");
tryItOut("/*for..in*/for(var __count__ = [15,16,17,18].some(Function, <y><z/></y>\n) in (uneval(({ get __parent__ prototype (__parent__, prototype) { export prop; } ,  get __count__ prop (prototype, __count__) { .2 &= [,,z1] }  })))) yield;");
tryItOut("/*infloop*/L:while(window)L: {return true;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__(([11,12,13,14].filter)) in prototype) {switch(<>__noSuchMethod__</>++) { default: case new Exception(): yield;export function::__parent__;\nreturn <y><z/></y>;\nbreak;  } }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __count__ + this.@* in (1e-81)(__noSuchMethod__.hasOwnProperty(\"__proto__\"))) {let __count__ = [,,z1], __proto__;yield [z1,,]; }");
tryItOut("M:if(__count__.__proto__[__iterator__ -= gc]) { }");
tryItOut("/*for..in*/for(const __parent__ in ((Function)(eval(\"@foo\", ({}))))){/a/gi }");
tryItOut("M:switch(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { case ({__noSuchMethod__: [(<><x><y/></x></>.isPrototypeOf(this))].filter([1,2,3,4].map)}): default: break; case 8: L:do {; } while((033) && 0);break; case 4: /*infloop*/for((p={}, (p.z = <y><z/></y>)()); new (Function)(<><x><y/></x></>, <><x><y/></x></>); new (function(y) { yield y; gc(); yield y; })(<x><y/></x> >>> __noSuchMethod__)) /*infloop*/for(let;  /x/ ; <x/>) {undefined;; }break; let (prop = <x/>) { {} }break; break; Math.pow }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((<><x><y/></x></>)(null) in 1e+81) ;");
tryItOut("M:if((new <xxx {prototype}={this} />(({function::__count__: (__iterator__\f)[<x><y/></x>], constructor: *::* << *::* }), (__parent__.(prototype))))) {return; } else new Function");
tryItOut("while((__count__) && 0)");
tryItOut("{gc()yield; }");
tryItOut("/*infloop*/L:do {L:with(.2){yield *; } } while((@foo.@foo.prop));");
tryItOut(";");
tryItOut("M:if(eval(\"Math.pow\", 5.0000000000000000000000).watch(\"prop\", (__noSuchMethod__).watch)) {yield;\nthrow __proto__;\n/*for..in*//*\n*/ } else  if (0x99) throw this; else switch() { default: export prototype; }");
tryItOut("let (__proto__) { return; }");
tryItOut("/*infloop*/while(window)");
tryItOut("do var __parent__ = <><x><y/></x></>; while((*::*) && 0);");
tryItOut("throw prop;");
tryItOut("if([15,16,17,18].some(Math.sin, [11,12,13,14].sort)) { if (((<><x><y/></x></> for (__iterator__ in window)) <<= ([false for (prototype in [,,z1])]))) } else gc()");
tryItOut("while(((prototype).call(<><x><y/></x></>, (-0))) && 0)");
tryItOut("for(let y in [5,6,7,8]) gc()\n");
tryItOut("/*infloop*/for(let __parent__ = [(uneval(null)) for ([1,,]['prototype'] in <y><z/></y>) for (__count__ in function ([y]) { })]; this.__defineGetter__(\"prop\", 'haha'.split) && [z1].__lookupSetter__(\"__iterator__\"); __iterator__ = undefined) {yield; }");
tryItOut("/*infloop*/for(let ({ prototype: ({ prop: ({ __count__: __iterator__ }), __noSuchMethod__: ({ prop: ({ constructor: constructor }) }) }), prop: ({ __count__: [, ] }) }) = <><>(yield window = )</></>; ({ set __proto__ __parent__ (__noSuchMethod__, prototype) { yield (*.yoyo(null)) } , __iterator__: ({ constructor: __proto__ }) = [prop, ] })((<><x><y/></x></>.throw([,,z1]) = [new this].sort(Math.pow).@foo.watch(\"prototype\", eval))); function(id) { return id }) with({}) { __noSuchMethod__ =  /x/ ; } ");
tryItOut("gc()\n<><x><y/></x></>;");
tryItOut("{yield\n/*infloop*/do ( /x/g ); while([,]); const __iterator__; }");
tryItOut("( /x/ ); const __iterator__;");
tryItOut("/*infloop*/while(new [](*, <><x><y/></x></>)){export *; }");
tryItOut("if(new (new ((0).call)(true, #3={a:#3#}))()) {if( /x/g ) ; else  if ( /x/ ) { } else {export *; } } else switch(<y><z/></y> < #1#) { default: M:if(<><x><y/></x></>) { if (arguments) {}} else {const __iterator__, __iterator__ = __noSuchMethod__; }break; case 1: /*infloop*/L:for(const __count__ = null; ({a2:z2}); prop\r) Math.pow }");
tryItOut("with(){if(<x><y/></x>.__count__)  }");
tryItOut("if(( \"\"  *  \"\" .propertyIsEnumerable(\"__count__\"))) let (__parent__) { /*for..in*/ }");
tryItOut("/*infloop*/do {gc } while([1,2,3,4].slice);");
tryItOut("/*for..in*/for(const __parent__ = (<x><y/></x> ? <><x><y/></x></> : .2.__lookupGetter__(\"set\")) in  { return *::* }  = {}) with((window.__lookupSetter__(\"yield\")))");
tryItOut("let (constructor = ([15,16,17,18].sort(Math.sin\f, (prop = this))), constructor = null) { {gc()return __noSuchMethod__; } }");
tryItOut("while(([11,12,13,14].map) && 0)if(*::*) { if (true) (#1#);} else {gc() }");
tryItOut("/*infloop*/M:do {return; } while(this.zzz.zzz);");
tryItOut("yield;");
tryItOut("{__count__; }return  /x/g ;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const __parent__ in (null if (<x><y/></x>))) {try {  } catch(prop) { export *; } ;gc() }");
tryItOut("with({}) { __count__ = <x><y/></x>, prototype = null } ");
tryItOut("if(eval(\"gc()\", throw __count__ = this / null && *::*;)) {default: break; /*infloop*/do export *; while( /x/ );prop = __proto__; } else  if ((-undefined) >>  ''  >> null.__proto__) M:if((false.throw\t(1.3))) {constructorgc() } else  if (new  /x/g (@foo, <y><z/></y>)//h\n) {constructor =  \"\" ;; }");
tryItOut("/*for..in*/for(let __proto__ in ((function () { M:with( /x/ )break L; } )(((window)(<y><z/></y>))))){throw <x><y/></x>;continue L; }");
tryItOut("with(*)return *;");
tryItOut("switch(__count__) { case 4: yield; }");
tryItOut("L:do {throw <><x><y/></x></>; } while(((new (<x><y/></x>)())) && 0);");
tryItOut("__count__ = prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const #1# in ++<><bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb></> %=  /* Comment */this) 4.;");
tryItOut("/*for..in*/M:for(<x><y/></x>.constructor in *) return;");
tryItOut("/*for..in*/for(let __count__ in ((new  /x/ (this))((yield  /x/g )))){var prop = this; }");
tryItOut("L: {__parent__ }");
tryItOut("with({__count__: null}){{}gc() }");
tryItOut("return");
tryItOut("switch\t(([11,12,13,14].filter)) { default: break;  }");
tryItOut("if(({ get prototype(__parent__) { yield __proto__ = @foo } ,  set [__proto__, __noSuchMethod__, __parent__, ] __iterator__ (__parent__, __parent__) { export __proto__; }  })) { if (void <x><y/></x>[ /x/ ]) export *; else {throw __count__;let (\tprototype) { let __iterator__; } }}");
tryItOut("/*infloop*/do while((({prop: @foo}).__defineSetter__(\"__noSuchMethod__\", ( ''  * <y><z/></y>).watch)) && 0)this; while((({prop: __parent__.prototype = <x><y/></x>, constructor setter: true }))(constructor = <><x><y/></x></>, constructor));");
tryItOut("/*infloop*/M:while('fafafa'.replace(/a/g, <y><z/></y>))[1,2,3,4].slice");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in <y><z/></y>) export *;");
tryItOut("if(\n__parent__.__defineGetter__\f(\"prop\", __parent__.__parent__ setter= function (__proto__, prototype) { yield *::* } )) { if (undefined ? <x><y/></x> : 033) {let constructor getter: (<><x><y/></x></>).call; } else {throw __proto__;(<x/>); }}");
tryItOut("continue ;\nyield;\n");
tryItOut("M:while((().throw(yield 'fafafa'.replace(/a/g, Math.sin))) && 0)M:if(*) { if (function ([y]) { }) {export __iterator__;return <x><y/></x>; } else __iterator__;}");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("if(function::prop) export *; else  if (null.throw((-1))) yield true;");
tryItOut("{L:switch(( /x/ ++)) { default: export prototype;break; case 2: throw 033;break;  } }");
tryItOut("/*for..in*/for(var __count__ = <x><y/></x> in [1]) {}");
tryItOut("L:switch() { case 6: return;break; default: with({}) break; case (({function::__noSuchMethod__: 3 })): yield <x><y/></x>;break; case  ''  ^= <><x><y/></x></>: with(true){__noSuchMethod__ }/*for..in*/L:for(const __iterator__ in  /x/g ) {export *; }break; case [,,z1]++: //h\nexport *;break;  }");
tryItOut("true");
tryItOut("L:do (<x><y/></x>); while(((({__parent__ getter: [1,2,3,4].slice }).isPrototypeOf(let constructor = this, __noSuchMethod__; = arguments))) && 0);\nthrow new <><x><y/></x></>;\n");
tryItOut("let (;, constructor) { /*for..in*/for(let prop in <><x><y/></x></>) ( /x/g ); }");
tryItOut("if(new (__iterator__|=window)()) {with(<><{prototype}><x><y/></x>yyy</{prototype}></>){var prototype;throw \t<x><y/></x>; } }");
tryItOut("let (prototype) { /*infloop*/do {break M; } while(true);\f }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((*).__defineSetter__)(#3={a:#3#}))){}");
tryItOut("([z1,,])");
tryItOut("(@foo);/*for..in*//* nogeckoex bug 349964 */ for  each(yield __count__['__noSuchMethod__'] in (<x/>.__iterator__)) {/*for..in*/for(const get in __noSuchMethod__) export *; }");
tryItOut("this;\nyield <x/>;\n");
tryItOut("if(__count__) gc() else  if (<x/>) {let __proto__ = prototype, prototype = 0/0;yield; }");
