tryItOut("L:if() const __proto__ = #1#, prop; else var constructor = __iterator__, let = <x/>;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = \rconstructor = constructor.@*.__defineGetter__(\"prototype\", Math.sin) in  \"\" ) {var constructor;\n;\n }");
tryItOut("/*for..in*/for(__proto__ in function(id) { return id }) eval");
tryItOut("return; const prop; const prop;");
tryItOut("/*for..in*/for(let [__parent__, prop] = undefined in <x/>) return <y><z/></y>;");
tryItOut("/*infloop*/while((<x><y/></x> in #3={a:#3#}))var __noSuchMethod__, prop = __noSuchMethod__;");
tryItOut("M:with(<><x><y/></x></>);");
tryItOut("if(this.__defineSetter__(\"__count__\", (<x/>).watch)) return; else  if (('fafafa'.replace(/a/g, (null).__defineSetter__))) /*infloop*/L:do gc() while(function(id) { return id }); else throw this;");
tryItOut("{continue M;yield arguments; }");
tryItOut("M:with\t(*::*)gc()");
tryItOut("M:if(true) {yield  \"\" ; } else {export *; ''  }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((Number(-0, <y><z/></y>))(<{prototype}> </{prototype}>)))M:if([,,]) { if (null) [1,2,3,4].map} else (this);");
tryItOut(" { M:if(#3={a:#3#}) { if (window) {( \"\" ); }} else {return; } } ");
tryItOut("let (__proto__ = *, __proto__) {  }\n(undefined).watch");
tryItOut("with(({}))do {throw <x/>;break ; } while((__noSuchMethod__ = *) && 0);");
tryItOut("for(let y in [5,6,7,8]) with({}) { try { for(let y in []); } catch(__iterator__) { for(let y in [5,6,7,8]) yield; } finally { with({}) throw true; }  } ");
tryItOut("with({prop: ({ prototype: __parent__ }) = [[[1]]]})if((0x99 ? (function ([y]) { })() : *::*.unwatch(\"__count__\"))) { if (<x><y/></x>.*) {} else (<x><y/></x>).watch}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var [] in prop) {/*for..in*/for(const __parent__ in (([1,2,3,4].map)(true))){continue M;yield <><x><y/></x></>; } }");
tryItOut("with(#2=({__proto__: <x><y/></x>}).__lookupGetter__(\"constructor\")){/*infloop*/for(undefined; function(y) { yield y; ({}).__lookupGetter__; yield y; }(*); (\t<x/>[prop])) {continue ; } }");
tryItOut("((-function ([y]) { }).yoyo(prop.__noSuchMethod__ getter= ({}).__lookupGetter__\t))\nL:switch(<x/>) { default: return;case <><x><y/></x></>: break;  }");
tryItOut("/*infloop*/for(eval(\"/*infloop*/L:while(<x/>)return 0/0.__lookupSetter__(\\\"__proto__\\\")['constructor'] = [(-0) if (true)];\", __proto__.(prop) << <x/> ^ true); undefined; (this.__defineGetter__(\"__count__\", (new Function(\"yield window;\"))))) yield  \"\" ; const __proto__;");
tryItOut("/*infloop*/for(__proto__ =  /x/g .isPrototypeOf([11,12,13,14].some); ([] = (<y><z/></y>)(window)); [[]]) {return; }");
tryItOut("/*for..in*/M:for(const [__parent__, prototype] = (1e-81.__defineSetter__(\"__parent__\", function (__noSuchMethod__) { ({a2:z2}) } ).isPrototypeOf((function ([y]) { })() , <><x><y/></x></>)) in this.__defineSetter__(\"prototype\", function  constructor \f() { let __iterator__ = *, __iterator__; } )) return\n/*for..in*/for(const prop in (-1)) __iterator__ = undefined, __parent__;");
tryItOut("/*infloop*/L:for(let __proto__; __count__; [1,,]) {yield arguments; }");
tryItOut("{}");
tryItOut("M:if((true.yoyo(<><x><y/></x></>))) { if (void  '' ) {;yield __iterator__; } else ;}");
tryItOut("while((__proto__) && 0){gc()\nwith(<y><z/></y>){let __parent__; } }");
tryItOut("if((* > null).valueOf(\"number\").eval((this.zzz.zzz))) { if (void <><x><y/></x></>.__lookupSetter__(\"__parent__\")) try { with({}) return; } catch(__parent__ if (function(){return (this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in []))));})()) { throw (~3.141592653589793); } catch(constructor) { prop = __proto__; } finally { with({}) { throw StopIteration; }  }  else yield;}");
tryItOut("/*for..in*/for(const __proto__ in (new /a/gi(5.0000000000000000000000 >>>=false __count__, prototype))) __proto__, prototype;");
tryItOut("case @foo: let (constructor = this.__defineGetter__(\"prototype\", [1,2,3,4].slice), constructor) { (Function).call }case 5: case <><{}>  </__count__}></>:  for each (__noSuchMethod__ in ( /* Comment */prototype))");
tryItOut("gc()\nthrow @foo;");
tryItOut("with({}) gc()");
tryItOut("/*for..in*/M:for(const ({ set __parent__ __parent__ () { return undefined }  }) in ((Math.pow)((constructor = __parent__)))){/*for..in*/for(var constructor in true) {{} }yield [1,,]; }");
tryItOut("\n");
tryItOut("let (prop) { let __proto__ =  /x/ , prop = <x/>; }\n");
tryItOut("yield\n");
tryItOut("{}");
tryItOut("L: ;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(__proto__; (let (constructor) 1.2e3).__defineGetter__(\"__parent__\", gc); (Math.sin).call(({constructor: undefined}), <y><z/></y>, <><x><y/></x></>.eval(__iterator__))) yield;");
tryItOut("/*infloop*/M:for((<{__parent__}></{__parent__}>.hasOwnProperty(\"__parent__\")); \nprototype < <x><y/></x> &= this.hasOwnProperty(\"__iterator__\"); (prop.(*::*))) {/*for..in*/for(let [, __parent__, __count__] in true) {yield;return; } }\t");
tryItOut("while((((( /x/ .yoyo(<x><y/></x>)).__defineSetter__(\"__noSuchMethod__\", (Function).call)) !== let)) && 0)throw <x><y/></x>;");
tryItOut("with({constructor: __count__.__iterator__})return <x><y/></x>[null];");
tryItOut("/*for..in*/for(var __proto__ in __parent__ = __parent__) {/*infloop*/for(; ({__proto__:  /x/ }) != new (__parent__.__lookupSetter__(\"prop\"))(true, <x><y/><\t/x>); (__count__ & undefined)) /*for..in*/for(var __noSuchMethod__ = return; in  \"\" ) yield;{throw prototype; } }");
tryItOut("return;L:do const __count__ = (-1); while((<><x><y/></x></>) && 0);");
tryItOut("let (__count__) { const constructor = <y><z/></y>; }");
tryItOut(" get prototype() { yield this } ;return  /x/ ;");
tryItOut("{export *; }");
tryItOut("yield ({ __iterator__: [__iterator__, __proto__, function::prop, prototype], __count__: [,,z1] }) = (({__iterator__ setter: Math.sin }) *= prop = [1]);");
tryItOut("if((([15,16,17,18].filter(function  @foo ()[],  ''  instanceof  \"\" ))\n)) {let constructor;export *; } else yield <><x><y/></x></>;");
tryItOut("/*infloop*/do constructor; while(false ? __iterator__ :  \"\" );");
tryItOut("/*infloop*/for(__iterator__ = __count__ if (3/0); 0.1; <x/>) throw [1];");
tryItOut("continue \nthrow window");
tryItOut("do [1,2,3,4].slice while((#0=({__parent__: ((-0))}) || eval(\"<x/> .@*:: null\", (<y><z/></y>(prop)))) && 0);");
tryItOut("/*for..in*/for(var prototype in  /x/ ) {Math.pow }");
tryItOut("export constructor;");
tryItOut("/*for..in*/for(__noSuchMethod__ = ({__noSuchMethod__: }) in new (p={}, (p.z = prop.isPrototypeOf(<y><z/></y>))())((<x><y/></x>(((<y><z/></y>)[*::*]), @foo))) .@x:: __parent__ ? <><> /x/ </></> : <><x><y/></x></>.watch(\"__noSuchMethod__\", function(q) { return q; })) {/*for..in*/for(const __iterator__ = ({__proto__: }) in (prototype = <x><y/></x>)) return; }");
tryItOut(" for ([, prototype, , , ] in ([[]].__proto__)) if (__iterator__)L: const __iterator__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var [__proto__, prop] = (eval).call((-1), (<y><z/></y>.isPrototypeOf(__proto__))) in 1e4) {const __count__ = <y><z/></y>;{} }");
tryItOut("");
tryItOut("let(prototype = #2=(this.__defineSetter__(\"__count__\", @foo))) ((function(){let(__proto__ = ( /x/g .isPrototypeOf( '' )), []) { __parent__ = __noSuchMethod__;})());");
tryItOut("/*for..in*/for(var prototype in ((new Function)(<x><y/></x>.__iterator__ = <><x><y/></x></> <= ({a2:z2})))){if(__iterator__) { if (prototype) <><x><y/></x></>;} else switch([[]]) { case 5: break; break;  } }");
tryItOut("/*for..in*/M:for(__iterator__ in (([z1])([window if (null)])))<>/*\n*/<x><y/></x></>");
tryItOut("/*infloop*/for(function::constructor; RegExp(); prototype = <><x><y/></x></> <= this != <x><y/></x>.unwatch(\"__noSuchMethod__\")) M:if(this) { if (<y><z/></y>) {} else {(undefined); }}");
tryItOut("let (__noSuchMethod__ = (new (<x><y/></x>)(<x><y/></x>).__lookupSetter__(\"prototype\")), prototype) { return *; }");
tryItOut("/*for..in*/for(<y><z/></y> in <x><y/></x>.hasOwnProperty(\"__noSuchMethod__\")(<><x><y/></x></>);");
tryItOut("L:while((let (prop = false) <><x><y/></x></>) && 0)\fconst __parent__ = 3, prototype = <><x><y/></x></>;");
tryItOut("if(({__parent__: <y><z/></y>.__defineSetter__(\"__parent__\", this)})) constructor;");
tryItOut("return;");
tryItOut("try { yield; } catch(__proto__) { return; } L:if((yield)) {/*for..in*/for(let set = constructor in __iterator__) export *;if(__count__) {var __iterator__;export prototype; } else  if (undefined) continue L; } else  if ([z1,,]) __count__ else {yield prototype;{let constructor, __proto__ = constructor;return; } }");
tryItOut("if(__parent__.__count__ = (let (prototype = __parent__) []).__iterator__) { if (constructor[__iterator__ = <><x><y/></x></>.isPrototypeOf(prop.( /x/ ))]) {gc() }} else {L:with\t({__proto__: -1 <<= __iterator__}){[1,2,3,4].slice(<><x><y/></x></>); }return null; }");
tryItOut("/*for..in*/for(const __parent__ in <x><y/></x>) {export *; }");
tryItOut("if(1e-81) {var __count__, __parent__ = <y><z/></y>;yield <x><y/></x>; } else  if (this) export __proto__; else {(<><x><y/></x></>);export __parent__; }");
tryItOut("if(({prototype setter: ( '' ).watch,  get constructor(__parent__)__iterator__ })) { if (eval(\"\", 1.3)) {return __count__; }} else yield @foo;");
tryItOut("/*for..in*/for(let function::constructor = (function ([y]) { })() <= [,,z1] in [[1]]) {gc() }");
tryItOut("L:if((-0)) {export *; }");
tryItOut("/*for..in*/for(var __parent__(false( \"\" , <x><y/></x>)) in __iterator__.prototype) {{} }");
tryItOut("with({}) { let(prop) ((function(){__proto__ = {}, __proto__ = <><x><y/></x></>;})()); } ");
tryItOut("__noSuchMethod__ = ({a2:z2}), prop; const constructor;");
tryItOut("do export __parent__; while(((prototype = {})\n) && 0);");
tryItOut("__noSuchMethod__ = yyy.((undefined.yoyo( /x/g ))), __proto__ = __noSuchMethod__");
tryItOut("M:while((this.__defineGetter__(\"__proto__\", new Function)) && 0)throw @foo;");
tryItOut("throw StopIteration;");
tryItOut("{switch(0) { case 2: break;  }if(return #1#) ( '' ); else {let prop; }\n }");
tryItOut("with((let (prop, __proto__ = #3={a:#3#}) (function(q) { return q; }(<y><z/></y>, <><x><y/></x></>))))__noSuchMethod__ = <><x><y/></x></>, prop = window;");
tryItOut("continue L\nreturn <><x><y/></x></>");
tryItOut("return;");
tryItOut("let __count__, __count__;/*for..in*/for(__proto__ in *::*) {}");
tryItOut("M:switch(function::__count__.__noSuchMethod__ getter= ({}).hasOwnProperty) { default: return;break; case __count__.__noSuchMethod__: case 0: var __proto__ =  \"\" , x::__noSuchMethod__;break; break; case try { ; } catch(__count__) { return window; } : break; break;  }");
tryItOut("/*infloop*/for(__noSuchMethod__ = window; __proto__ = <x><y/></x>; this.zzz.zzz) export __iterator__;");
tryItOut("if(false / null) { if ((*)[__parent__]) {{};yield <x><y/></x>; } else return <x><y/></x>;}\n{}\n");
tryItOut("/*infloop*/while(<><zzz>(#1=(* & []))</zzz></> > <><zzz>new Function()</zzz></>)*;");
tryItOut("for(let y in [5,6,7,8]) return [*].filter(function  __noSuchMethod__ ()(function ([y]) { })());");
tryItOut("with(let (__parent__ = <y><z/></y>) prop ? undefined : <y><z/></y> .. [z1]){{if((__count__ = null <= true.propertyIsEnumerable(\"constructor\"))) { if (this.zzz.zzz) /*for..in*/for([__noSuchMethod__, __iterator__] = (-1) in @foo) ((uneval( /x/ )))} else {{} } } }");
tryItOut("");
tryItOut("M:if(prototype.*) __proto__ = @foo; else  if ((uneval(this))) constructor else \t<><x><y/></x></>;");
tryItOut("{let prop = prop;\f } const constructor;");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("L: {<x><y/></x>constructor, __count__; }");
tryItOut("/*for..in*/for(__proto__.@foo.prop in (('haha'.split)(let (__parent__) <x><y/></x>))){continue ;return; }");
tryItOut("if(@foo) export *; else  if (({a2:z2})) yield this; else  /x/g ;");
tryItOut("this.zzz.zzz;");
tryItOut("this.zzz.zzz;");
tryItOut("if((this.isPrototypeOf(<>__count__</>) .. #1=[*])) {yield __proto__;let __parent__ = (function ([y]) { })(); } else  if (prototype = __noSuchMethod__) let __iterator__ =  \"\" ;");
tryItOut("continue L; const __noSuchMethod__;");
tryItOut("L:with({prop: ({__noSuchMethod__ setter: new Function })}){const yield *::*;, constructor = *;let __iterator__ = 033, __parent__; }");
tryItOut("return\n/*infloop*/for(prop; this.__defineSetter__(\"__count__\", gc); <x/>) __proto__\n");
tryItOut("with({}) { (1 for (x in [])) } ");
tryItOut("(true).watchthrow  '' ;");
tryItOut("/*for..in*/L:for(var constructor = ({prop: prop, __parent__:  ''  }) in new ((*::*).call)()) {let __parent__ = __noSuchMethod__; const __iterator__; }");
tryItOut("with({prototype: __parent__}){} const prototype;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let [prototype, __parent__] = --(uneval(<x/>)) in <x><y/></x>) yield\n");
tryItOut("/*for..in*/for(var prop in (<x><y/></x>())) {export *;if((null)) { if (<y><z/></y>++) constructor else {export __iterator__;export prototype; }} }");
tryItOut("__proto__ = prototype;");
tryItOut(";\n/*infloop*/for(let __count__; (<x/> ..  /x/ ); [[]]) ;\n");
tryItOut("/*infloop*/while((p={}, (p.z = \ntrue)()))export __proto__\nthrow 1e4;");
tryItOut("continue L;const __proto__, __iterator__ = <><x><y/></x><///h\n>;");
tryItOut("__proto__ = __count__;");
tryItOut("/*infloop*/M:for(prototype+=({ get prop prototype (constructor)new ([,])(<x><y/></x> .@*:: null) }); (3.141592653589793.__lookupGetter__(\"__proto__\")) - yield;  /x/ ) let([, ({ prop: __count__, __parent__: prototype })] = [this].map(({}).hasOwnProperty), ({ __parent__: __count__, __parent__: 1e81 })) ((function(){return (undefined.isPrototypeOf(<x><y/></x>));})());");
tryItOut("L: {throw (new (0)(window, <x><y/></x>)); }");
tryItOut("yield constructor;");
tryItOut("M:if(__count__ = (-1).*) {switch((033)[undefined]) { case <><x><y/></x></> = ({a2:z2}): default: break;  } } else if(((((p={}, (p.z = <><x><y/></x></>)())).unwatch(\"__noSuchMethod__\")).isPrototypeOf(null))) throw <y><z/></y>; else {let (prop = <y><z/></y>, __iterator__ = 1.3) { (true); }{} }");
tryItOut("throw __parent__;");
tryItOut("switch( ''  ^= -3/0) { case (({ constructor: __count__ }) = ({ __count__: prop })): __parent__, constructor = case (this.__defineGetter__(\"prototype\", function(y) { yield y; {}; yield y; })).watch(\"__noSuchMethod__\", (Function).call): while((({constructor: null })) && 0)break L;break;  }");
tryItOut("/*infloop*/do continue M; while( /x/ );");
tryItOut("return window;__count__.__noSuchMethod__ = __iterator__;");
tryItOut("{{} }");
tryItOut("if(new (*::*)(prop, *::*)) { if (<><x><y/></x></> >> <x><y/></x>) \t else {export *; }}\n\t{}");
tryItOut("do export __count__; while((((<><x><y/></x></>)())) && 0);");
tryItOut("/*for..in*/for(let ((+#1#))( \"\" ) in ((Math.sin)(eval(\"({a1:1}).__lookupSetter__(\\\"__noSuchMethod__\\\")\", (__iterator__.function  function::constructor (__parent__)__parent__ setter= *))))){throw constructor; }");
tryItOut("if(__proto__) {yield;export *; }");
tryItOut("/*for..in*/L:for(var * in ((__count__(window))([(function (__count__) { return <x><y/></x> } )()].filter(<x><y/></x>))))[1,2,3,4].map");
tryItOut("const constructor = false; const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in this.__defineGetter__(\"__noSuchMethod__\", function  __parent__ (__iterator__, constructor) { (0); } )) {let (__noSuchMethod__ = @foo) { var __proto__ = __proto__, __noSuchMethod__ = this; }yield false }");
tryItOut("M:if((yield [this])) { if (new Exception(this, <x/>).__iterator__) {}} else do export __iterator__; while(((@foo.__lookupGetter__(\"__noSuchMethod__\"))) && 0);");
tryItOut("M:do yield; while((<x><y/></x> % <x/>) && 0);");
tryItOut("let (__count__) { yield window; }");
tryItOut("M:if(<x><y/></x>) export __proto__;");
tryItOut("/*for..in*/for(const 1.2e3['__iterator__'] in ((eval)(eval(\"0/0\", *))))let prop, __iterator__;");
tryItOut("if(let (prototype = prop) new Object([z1], [z1,,]).__count__ <<= __count__-=<x></*\n*/y/></x>) { if (<><x><y/></x></>.__iterator__ ? <y><z/></y> : (<y><z/></y> if (-1))) {gc()<><x><y/></x></>; }} else {__proto__export *; }");
tryItOut("L:\rwhile((( /* Comment */this[<y><z/></y>]\t / (new (function (prop) { let __iterator__, prototype = 3.141592653589793; } )(new Function(),  /x/ )))( /x/ ).__defineGetter__(\"function::prototype\", <y><z/></y>)) && 0){yield __parent__;/*infloop*/while(1e+81){var __parent__ = this; } }");
tryItOut("4.;");
tryItOut("/*infloop*/for( /* Comment */[z1].__parent__ = <x/>-- in (Function).call(null, undefined, <y><z/></y>); new Function((new (new Function)((yield __count__ = __iterator__), ((({}).hasOwnProperty)())))); __parent__.__iterator__ setter= Math.pow) yield; const __parent__;");
tryItOut("do /*for..in*/for(const [__count__, __noSuchMethod__] = @foo in .2) export __parent__; while(((typeof <><x><y/></x></>)) && 0);");
tryItOut("with({x::__parent__: function::prop = ([11,12,13,14].map)})export __proto__; const prop;");
tryItOut("with({__proto__: window})gc()");
tryItOut("/*for..in*/for(__count__ = <><x><y/></x></> in  /x/ ) yield [z1,,];");
tryItOut("if(((window)[(undefined)( /x/ , 3.141592653589793)])) { if ((yield <x/>)) constructor = <><x><y/></x></>, constructor;} else {}");
tryItOut("{throw window; }");
tryItOut("/*infloop*/while(*::*){(__iterator__); }");
tryItOut("yield new  /x/g ;");
tryItOut("let (__proto__ = new (__iterator__ = __proto__ &= 1e81)()) { return; }");
tryItOut("if(eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__(<x><y/></x>) in <x><y/></x>) ;\", ([15,16,17,18].some((({}).__lookupGetter__).apply, <x><y/></x>)).__defineSetter__(\"({ __noSuchMethod__: __proto__ })\", __iterator__))) { if (\n@foo) {/*infloop*/do (<x/>); while( /x/g ); }} else {yield constructor; }");
tryItOut("with({}) { return; } ");
tryItOut("with(@foo){throw  /x/ ; }");
tryItOut("{/*infloop*/for(let ({ __noSuchMethod__: constructor, __iterator__: function::__parent__ }) = prop = __parent__; constructor+=<><x><y/></x></>;  '' ) {(<x/>);constructor = this; }{}\n__proto__\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__( ''  ^ 4.. ''  = [this for each (__proto__ in <><x><y/></x></>)]) in new String((<x><y/></x> for (__noSuchMethod__ in *)))) {throw null;\n/*infloop*/for(let __count__; @foo; <x><y/></x>) {return <x><y/></x>; }\n }");
tryItOut("/*infloop*/while(constructor = -3/0.valueOf(\"number\")\t ^ (new (true)())){/*infloop*/L:for(const  { return; }  = (new Function(\";\")); yield = prop; 'fafafa'.replace(/a/g, function ()*::*)) {function(y) { yield y; export __noSuchMethod__;; yield y; } }/*for..in*/L:for(var __noSuchMethod__ in ((\feval)(3)))yield -1; }");
tryItOut("/*infloop*/for(let __count__; <x/>; (033.yoyo(true))) if((undefined(prop = *))) return <y><z/></y>; else  if () {let constructor, try {  '' ; } catch(prototype if 1.3) { const {} = <><x><y/></x></>, this; } finally { yield; } ;var prototype, -1; } else {this;continue L; }");
tryItOut("while((033) && 0)__proto__;");
tryItOut("/*for..in*/for(prop in ((new Function)(<x/>))){var constructor;{} }{{}yield; }");
tryItOut("/*infloop*/L:do switch(/a/gi([1])) { case 6: constructor;case <x/> .@ __iterator__: case ( \"\" .prop): yield *;break; default: const __parent__;break; break;  } while((Math.sin).call(<x><y/></x>.propertyIsEnumerable(\"prop\"), (({constructor: <x><y/><'/x>.(prop)}))));");
tryItOut("L: {{{}; } }");
tryItOut("{yield;default: break; case 0:  } const prop;");
tryItOut("{return;export __proto__; } const constructor;");
tryItOut("/*for..in*/L:for(var [__count__, __iterator__] = (__iterator__ = this.__defineSetter__(\"__iterator__\", (*::*).__defineSetter__)) in window) gc()");
tryItOut("switch(true) { default: break;  }");
tryItOut("return; const __iterator__;");
tryItOut("(<><x><y/></x></>);");
tryItOut("for(let y in [5,6,7,8]) (true);");
tryItOut("L: prop = [\t<><x><y/></x></>], __parent__;");
tryItOut("if(__proto__ = ({ __noSuchMethod__: __noSuchMethod__ })) {return prop;; }");
tryItOut("L: //h\ndo yield; while((eval(\"4.\", ({prop:  \"\"  }))) && 0);");
tryItOut("/*infloop*/for(<x><y/></x>; *; 1.2e3) {continue L;yield; }");
tryItOut("while((*) && 0)var __count__ = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("/*infloop*/L:for([__iterator__(undefined)]; 1e4 for (__count__\t in this); !(constructor+=<x><y/></x> for (function::__count__ in <x><y/></x>) if (window))) /*infloop*/while(1e81){__count__ = null, prop = *::*export function::__iterator__; }");
tryItOut("/*infloop*/L:while(true)/*infloop*/M:for(this += *::*; new [1,2,3,4].slice(); [, __proto__, __count__, ] = [<><x><y/></x></>].filter(gc)) /*for..in*/for(var [__noSuchMethod__, prop] = <><x><y/></x></> in 1e81) return <x><y/></x>;");
tryItOut("/*for..in*/for(function::__parent__ =  \"\"  in (this.eval(<><x><y/></x></>).@foo if (prototype))) L: M:with({constructor: let (prop) [z1]})__count__ = <x><y/></x>, __count__ = [[1]]\n");
tryItOut("M:while(((this.__defineSetter__(\"__proto__\", function(q) { return q; }))) && 0){export __noSuchMethod__; }");
tryItOut("/*for..in*/for(var __proto__ in (('haha'.split)( /x/g  < #3={a:#3#}))){constructor; }\nreturn (-1).__defineSetter__(\"__proto__\", function(y) { yield y; gc(); yield y; });\n");
tryItOut("do {if((__iterator__)[true]) {yield; } else  if ((p={}, (p.z =  \"\" )())) throw 3; else return 5.0000000000000000000000; } while(((set = [({ __iterator__: [] }), , ({ prototype: [, ], __proto__: [, ] })])) && 0);");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("if(new (__iterator__)(//h\n)) {yield <x><y/></x>;gc() } else {(*::*);const __noSuchMethod__ = this, prop = window; }");
tryItOut("with({constructor: __iterator__.__proto__})[]");
tryItOut("/*infloop*/M:for(let ({ prototype: constructor }) = (uneval((__parent__ = ([-1].some(Math.pow))))); export __proto__; (__count__ = __parent__)) {if(__parent__ = null) { if (__proto__ = 1.3 ? prop.prop setter= function(y) { yield y; yield undefined;; yield y; } : [15,16,17,18].filter((1 for (x in [])),  /x/g )) {; } else {__noSuchMethod__, *::*let function::__noSuchMethod__; }}continue ; }");
tryItOut("const __count__;\n/*for..in*/for(var __parent__ = (this.zzz.zzz) in new (Function)()) {}\n");
tryItOut("do return; while((@foo) && 0);");
tryItOut("return 3.141592653589793;\nreturn;\n");
tryItOut("this.zzz.zzz;");
tryItOut("M:do switch(__parent__) { default: case <><ccc:ddd><x><y/></x> </ccc:ddd></>: let prop = this\nthrow undefined;break; return 0case 8: case 2: throw  \"\" ;case (({}).__count__): continue ;break; case null.yoyo(<><x><y/></x></>):  } while((yield -0 ? @foo : <x><y/></x>) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__count__, constructor] = (new (__noSuchMethod__)(false)) in <><x><y/></x></>) yield;");
tryItOut("/*for..in*/L:for(constructor in ((((constructor.__parent__ getter= null)).__defineSetter__)(this < ({a2:z2}).propertyIsEnumerable(\"prototype\"))))var __proto__ = <x><y/></x>, __parent__ = <x><y/></x>;export prop\nif(undefined) let __parent__;\t");
tryItOut("let(constructor, __count__) ((function(){__count__ = prop;})());");
tryItOut("switch(<y><z/></y>) { default: break;  }<><x><y/></x></>;L:while(((prop.((this.@foo))).watch(\"prototype\", [1,2,3,4].slice)) && 0){( '' );let __noSuchMethod__; }");
tryItOut("/*for..in*/for(var function::constructor in (-0)) {/*for..in*/for(var __noSuchMethod__ = ({__parent__: <x><y/></x>}) in *::*) {continue L;return; } }");
tryItOut("function::prototype = arguments, __noSuchMethod__;\n\f\n");
tryItOut("L: /*for..in*/L:for(let constructor in ((prototype)( '' ))){yield <x><y/></x>;yield; }");
tryItOut("M:switch((yield delete <x/>)) { default: break; case 6: (*::*); }");
