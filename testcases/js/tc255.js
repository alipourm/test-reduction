tryItOut("do {with({prototype: this.__defineSetter__(\"prop\", (new Function(\"gc()\")))}){ } } while((new (this)() ^= (\t{__iterator__: prop.__count__ =  /x/ , prototype: (#1#.*) })) && 0);");
tryItOut("\tL:do {/*for..in*//* nogeckoex bug 349964 */ for  each(let (prop) in <x/>) return false; } while((((p={}, (p.z = __iterator__)()))) && 0);");
tryItOut("");
tryItOut("let ((prop)) { yield\n }");
tryItOut("yield new 'haha'.split(undefined - 3.141592653589793);");
tryItOut("with({prop: __parent__})return;");
tryItOut("with(((prop = prop) >>>=[[[]] if ([])])){for(let y in [5,6,7,8]) for(let y in []);yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in (yield null)) {let (prop = 3/0, prop = 0.1) { <x/> } }");
tryItOut("{throw __iterator__; }");
tryItOut("with({__noSuchMethod__: ([, , __parent__.__count__,  \"\" ] = (function::prop.([15,16,17,18].filter(function(y) { yield y; let __proto__ = <y><z/></y>, __iterator__;; yield y; }, [[1]]))))})/*infloop*/for(1.3 if (#1#); (<><x><y/></x></>(arguments,  /x/ ))++; ((arguments).__defineSetter__).apply) {/*infloop*/do {} while(this); }");
tryItOut("while(([z1,,]) && 0)return __noSuchMethod__\n");
tryItOut("{L: {return this; } }");
tryItOut("L:switch(1e-81) { case -0:  }\n/*for..in*/for([prop, __count__] = (__noSuchMethod__ = <x/>) in <><x>\f<y/></x></>) {/*for..in*/for(let [prototype, __count__] =  /x/  in __iterator__) export constructor; }\n");
tryItOut("/*infloop*/do /*infloop*/do { } while(<><bbb xmlns=\"[<><x><y/></x></>].map(new Function)\"><{prop}><x><y/></x> </{prop}> </bbb></>); while(/ *= [15,16,17,18].map((this).watch, prop));");
tryItOut("L:switch((false ^ <></>)) { default: break; case <><x><y/></x></>.__defineGetter__(\"delete\", (*::*).watch): case 2: break; case 8: yield <x><y/></x>;case 5: {gc()__proto__; }break;  }");
tryItOut("throw true;\nconst __proto__ = this, constructor;\n");
tryItOut("let ([__iterator__]) { {<><x><y/></x></>; } }");
tryItOut("return undefined;");
tryItOut("/*for..in*/for(const (__noSuchMethod__) in ((\f({__parent__: *::*, prototype setter: (({}).__lookupGetter__).apply }))(([(<><x><y/></x>/>.isPrototypeOf(<><x><y/></x></>))].map(({}).hasOwnProperty) != (eval(\"<x><y/></x>\",  '' ).__defineGetter__(\"prototype\", [1,2,3,4].map))))))gc()\n/*infloop*/for(1e81; <x><y/></x>; <x><y/></x>) {var prop = <><x><y/></x></>;{} }");
tryItOut("yield;\nconst constructor = -0;\n");
tryItOut("if((yield -0)) { if (<x><y/></x>.(*)) {<y><z/></y> }} else return;");
tryItOut("{/*infloop*/while(<x><y/></x> >>> false)/*for..in*/M:for(__iterator__ in this) {var prototype; }{yield __count__\n } }");
tryItOut("let(__proto__ = (__parent__ -= \n<><x><y/></x></>)) { let(__noSuchMethod__, constructor = (Math.sin).call(window ^ prop)) { throw prototype;");
tryItOut("if(this.zzz.zzz.unwatch(\"__parent__\")) return;\n/*infloop*/for(function::* =  /* Comment */constructor.__iterator__ getter= eval; *::*; __count__.isPrototypeOf(<x><y/></x>)) function::__proto__\n");
tryItOut("do {({}).hasOwnProperty } while(((__noSuchMethod__ =  /x/g .__parent__)) && 0);");
tryItOut("with((prototype = true)){gc()yield <x><y/></x>; }");
tryItOut("L: ;");
tryItOut("/*infloop*/for(const __proto__; __parent__; ++<><x><y/></x></>\n) let __iterator__ = {}, constructor;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = <x><y/></x> ? <x/> :  /x/g  in let getter: Math.pow > @foo\f.watch(\"__proto__\"\f, Math.sin)) {return undefined; }");
tryItOut("/*infloop*/for((new RangeError(*::* <= [z1])++); window |= <><!--yy--></>; ( '' ).__defineSetter__) {if(1.3) {(null); } else  if (({a1:1}) ? function(id) { return id } : <y><z/></y> > __proto__.__iterator__) /*for..in*/for(var __noSuchMethod__ in (([1,2,3,4].map)( ''  % <y><z/></y>)))return  /x/ ; }");
tryItOut("if('fafafa'.replace(/a/g, [[]]())) {/*infloop*/for(let __parent__; this;  /x/ ) {; } } else /*infloop*/for(this :: ({a1:1}); yield this; 033.yoyo(constructor)) throw null;");
tryItOut("/*for..in*/L:for(__parent__ in (([1,2,3,4].map)((__noSuchMethod__ = <><x><y/></x></>)))){( /x/ );gc() }");
tryItOut("/*infloop*/L:for(var __parent__; ([Exception() for each (prop in yield arguments)]); <x><y/></x>.eval((-0))) /*for..in*/for(<><ccc:ddd><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></ccc:ddd></> in (((1 for (x in [])))([__parent__]))){function  function::__proto__ () { return <><x><y/></x></>; } break ; }");
tryItOut("do yield; while((null.unwatch(\"__iterator__\")) && 0);");
tryItOut("prop");
tryItOut("{gc()break ; }");
tryItOut("L: {}/*for..in*/M:for(var (<><x><y/></x></>\f) in (((constructor ?  if  : null >> ).__defineSetter__)(String())));");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = <{constructor}><!--yy--></{constructor}> in prototype) {; }");
tryItOut("with({__iterator__: <\t><bbb xmlns:ccc=\"<y><z/></y> ,  /x/g \"><ccc:eee></ccc:eee></bbb></>}){throw <><x><y/></x></> }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in __proto__) {__parent__; }");
tryItOut("let prop = <x><y/></x>;");
tryItOut("with(((p={}, (p.z = <><x><y/></x></>)()) if ()))/*infloop*/do {;yield null; } while(prototype);");
tryItOut("/*infloop*/do /*infloop*/M:for(var __count__; (@foo-- ?  \"\"  >>>=<y><z/></y> : (<x/>.eval(@foo)) >>>=); (new this())) {{let(yield;) ((function(){throw this;})()); } } while(__iterator__.throw( \"\" ));");
tryItOut("export prototype;\nreturn;\n");
tryItOut("L: L:if(false) { if (__proto__) gc() else var prototype = <x/>, __proto__ = *::*;}\nreturn <x><y/></x>;");
tryItOut("/*for..in*/for(var __count__ = (p={}, (p.z = (window) >>> window.throw(arguments))()) /= <x><y/></x>.__defineGetter__(\"function::__iterator__\", @foo).__defineGetter__(\"prototype\", <employee id=\"1\"><name>Joe</name><age>20</age></employee>) in __noSuchMethod__) L: let __count__;");
tryItOut("return; const <{__noSuchMethod__}></{__noSuchMethod__}>;\n/*infloop*/while(1e+81)return;\n");
tryItOut("with({__count__: __noSuchMethod__.__iterator__})return;");
tryItOut("if(__parent__ = this.yoyo(<y><z/></y>)) { if (__count__ = <><x><y/></x></>) {yield;__noSuchMethod__; }} else gc()\n");
tryItOut("/*infloop*/L:for(__iterator__.[, ] setter= Math.pow; (\n<><x><y/></x></> << <><x><y/></x></>); prop.constructor setter= ({}).hasOwnProperty) {const __iterator__ = <y><z/></y>; }\n<><x><y/></x></>");
tryItOut(";");
tryItOut("if(constructor) { if (get ^ @foo) {constructor }} else {}");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <x/>) {yield <x/>; }");
tryItOut("let (constructor) { (({a1:1})); }");
tryItOut("if(1e4) {gc()export constructor; } else {(<x/>).watch }");
tryItOut("{export prototype;gc() }");
tryItOut("with({}) throw __iterator__;");
tryItOut("L: {/*for..in*/M:for(prototype = ( '' ).watch() in <y><z/></y>) export __parent__;throw true; }");
tryItOut("if() {<><x><y/></x></>;return <y><z/></y>; } else  if (eval) {__noSuchMethod__ >>= <><x><y/></x></> }");
tryItOut("\n");
tryItOut("let __count__, __proto__;");
tryItOut("L: {window{/*infloop*/for(<><x><y/></x></>; prototype; <><x><y/></x></>) {(<><x><y/></x></>);var prototype; } } }");
tryItOut("/*for..in*/for(const __parent__ = [ '' .*].filter(((#1#).call).call) in constructor) export __parent__;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = [z1,,] in this) const __noSuchMethod__ = undefined, constructor;");
tryItOut("do /*for..in*/for(var prop in <y><z/></y>) const constructor; while((String()) && 0);");
tryItOut("M:with('fafafa'.replace(/a/g, 'haha'.split))/*infloop*/for((function  [({ __noSuchMethod__: __noSuchMethod__, __count__: constructor }), ({ __count__: __noSuchMethod__ }), prop, [], ] () { yield __proto__.__parent__ = (function ([y]) { })().__defineGetter__(\"constructor\", Function) } )([z1,,], <y><z/></y>.__defineSetter__(\"__count__\", function(y) { yield y; continue ;; yield y; })); (*::*.__lookupGetter__(\"get\")); (undefined @ [15,16,17,18].some('haha'.split, window)) *= new <><x><y/></x><\n/>()) {yield <<x><y/></x> (*);</<xxx {__proto__}={('fafafa'.replace(/a/g, function(y) { yield y; yield;; yield y; }))} /> >;try { {} } catch(__parent__ if prop) { ; } catch(__proto__ if <x><y/></x>) { export *; } finally { \f { yield <><x><y/></x></> } ; }  }");
tryItOut("/*infloop*/for(const ({ void set: __proto__, prop: [, ] }) = ({[1,2,3,4].slice: <x><y/></x> instanceof <y><z/></y>, prototype getter: function(q) { return q; } }); prototype; this.zzz.zzz) {yield  '' ; }");
tryItOut("M:while((\n[11,12,13,14].filter) && 0){L:if(prop = 4..__defineSetter__(\"__proto__\", (<x><y/></x>).__defineSetter__)) /*for..in*/for(var __parent__ = (__count__.((yield))) in function(id) { return id }) __iterator__\nvar prop, ;\n }");
tryItOut("if(prototype[<x><y/></x>]) { if (__count__) if( else {var __count__, prototype; }}");
tryItOut("{export __parent__;/*infloop*/for(const __parent__; (({ constructor: <y><z/></y>, let (__proto__, __iterator__ = false) <><x><y/></x></>: prototype }) = __parent__); <x><y/></x>.__defineSetter__(\"prototype\", function (prop, __noSuchMethod__)*)) {throw window; } }\n");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(let __count__ in ((function  prop (__proto__, __noSuchMethod__)eval(\"4..__count__\", <x><y/></x>))(this.__defineGetter__(\".\", [1,2,3,4].slice)))){export *;throw *; }");
tryItOut("do {; } while(((arguments for each (prototype in {})) ? <x><y/></x> : !3.141592653589793) && 0);");
tryItOut("M:if(__parent__ =  '' ) { if ( '' [ \"\" ]) {export __iterator__; }} else export constructor;");
tryItOut("/*infloop*/do {let __noSuchMethod__\n/*infloop*/for(const __parent__ = true; *::*; undefined) {yield __parent__; }break ; } while((uneval(false .. <x><y/></x>)) >>>=(this @ *));");
tryItOut("/*infloop*/for(false.prop; (3)(<y><z/></y>); ((yield window))) if(false) {const prototype;export constructor; } else return;{} }");
tryItOut("M:if((({\f__noSuchMethod__ getter: (new Function(\"(0);\")) }) for (__proto__ in @foo))) { if ((<x><y/></x>.(<y><z/></y>))) function () { {} }  else }");
tryItOut("/*for..in*/for([__iterator__, prop] = [, __proto__, __parent__, ] = (new (function  prototype ()__parent__)(<><x><y/></x></>)) in <x><y/></x>) {yield [z1,,];{}; }");
tryItOut("if(window.__iterator__)  \"\" ;export *;\n(<y><z/></y>); const __parent__;\n");
tryItOut("L: throw ({a1:1});");
tryItOut("{<bbb xmlns=\"(function  __noSuchMethod__ (__iterator__) { return true } ).call(null, )\"> </bbb>throw (function ([y]) { })(); }");
tryItOut("/*infloop*/for(var ({ __proto__: [prop, __noSuchMethod__, __iterator__, ] }) = new Iterator(); window; <x/> .@x:: false for each (__count__ in  \"\" ) if (this)) {continue ;window; }");
tryItOut("/*infloop*/for(let __proto__; 3 ? [z1] : true; (this)[ /x/ ]) {throw constructor;gc() }");
tryItOut("/*for..in*/M:for([__iterator__, __noSuchMethod__] = __proto__.eval([z1]) in <y><z/></y>) {const constructor = [[1]], prototype = *::*;return; }");
tryItOut("if((([[1]])(<><x><y/></x></>))) { if (__noSuchMethod__ = <><x><y/></x></>) prop;} else const __parent__, __iterator__;");
tryItOut("throw __iterator__;");
tryItOut("/*for..in*/for(let ((0x99.unwatch(\"__iterator__\")))(__parent__ = ((<x><y/></x>)[window])) in (\f((*).watch).call( \"\" .prototype, ))) for(let y in [5,6,7,8]) gc()");
tryItOut("{yield [];export *; }");
tryItOut("export *");
tryItOut("/*for..in*/for(constructor in this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))) {throw (<x><y/></x>.(<x/>));yield 4.; const __count__; }");
tryItOut("if(([constructor = <x><y/></x>].sort(function  set (__parent__) { yield this } ))) {;continue M; } else {}");
tryItOut("L: (window);\nthrow *;\n const __iterator__;");
tryItOut("/*for..in*/for(let constructor in ((Math.pow)(new ((@foo).watchapply(window, <x><y/></x>).\fhasOwnProperty(\"__parent__\")))){yield; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(const __proto__ in (( /x/ )(({ set __parent__(prop) { return true }  }) & [11,12,13,14].map , (prototype.__count__ setter= (new Function(\"<x/>;\"))))))let {export *;return; };");
tryItOut("/*for..in*/L:for(const prop = <x/> in constructor) return;");
tryItOut("with({__iterator__: *::*})(this.__lookupSetter__(\"__iterator__\"))[<employee id=\"1\"><name>Joe</name><age>20</age></employee>]");
tryItOut("{gc()<x><y/></x> }");
tryItOut("export __noSuchMethod__; const __noSuchMethod__;");
tryItOut("let (constructor) { const constructor, __proto__; }");
tryItOut("{L: {/a/gi }yield ; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, constructor] = <y><z/></y> in __parent__) var __iterator__;");
tryItOut("/*infloop*/do __parent__; while(yield ( /* Comment */<x><y/></x>));");
tryItOut("M:with({function::prototype: window}){export __count__; }");
tryItOut("/*infloop*/M:for(var ({ __proto__: __count__.prop, constructor: (__noSuchMethod__) }) =  /* Comment */-1; ().__defineGetter__(\"constructor\", function  __proto__ ()__iterator__); ({ prop: ({ function::constructor: prototype.__count__, prop: [__parent__, [, , , ({ __count__: __count__ }), ], , prototype] }), __iterator__: ({ __proto__: __parent__ }) }) = constructor.__iterator__ = __iterator__ for each (__proto__ in (-1))) gc()");
tryItOut("while(((({__proto__: window}))) && 0)return;");
tryItOut("throw this;");
tryItOut("if(<x><y/></x>) { if (<y><z/></y>) (new Function(\"return;\")) else yield;}");
tryItOut(";\nyield;\n");
tryItOut("switch([<>\t<x><y/></x></>.*].map(({}).hasOwnProperty)) { default: __noSuchMethod__ = __count__; }");
tryItOut("throw true;");
tryItOut("/*infloop*/while((@foo)(<><x><y/></x></>)){yield;yield <x><y/></x>; }");
tryItOut("try { constructor = __proto__; } finally { let(prop) { yield window; } ");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("if((__count__.__noSuchMethod__)) __proto__.__noSuchMethod__ else  if (({__noSuchMethod__: #1# })) export constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for([__noSuchMethod__, __count__] = (__noSuchMethod__) =  in <x/> *  '' ) /*infloop*/do {gc()yield -0; } while([window for each (__parent__ in <><x><y/></x></>) for each (__count__ in  /x/g ) for (prototype in [[1]])]);");
tryItOut("let (__parent__, prototype) { ; } const constructor;");
tryItOut("/*for..in*/for(const constructor in ((__noSuchMethod__ = this)(((yield (*::* ^ <x><y/></x>)))))){prototype; }");
tryItOut("if(4.) { if (<y><z/></y>) const __noSuchMethod__;} else {const __proto__ = window;[1,2,3,4].map } const __proto__;");
tryItOut("with({__noSuchMethod__: ((<x/>.__lookupSetter__(\"__iterator__\")) %= 3/0)}){while((<x/> / false.*) && 0)gc() }");
tryItOut("let(({ __parent__: ({ __iterator__: __count__ }) }) = (<x/>.__defineGetter__(\"__iterator__\", function  __parent__ (__count__) { export __count__; } ))) { let([, , , __parent__, ], __noSuchMethod__) ((function(){__parent__ = prop;})());");
tryItOut("if(<x/>) const __proto__, x::prototype; else { /x/g ;return; }");
tryItOut("/*for..in*/for(let [constructor, prototype] = __count__ = (let (prop, 0/0 =  \"\" ) null) in (__proto__.(this.__defineGetter__(\"prototype\", function  __count__ () { yield prototype; } )))) continue L;");
tryItOut("{with({__noSuchMethod__: ([11,12,13,14].sort.__defineSetter__(\"constructor\", new Function))}); }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ prototype: ({ prop: prototype }), __proto__: __count__ }) in new *(<x><y/></x>)) export prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__(prototype.constructor setter= this) in  /x/ ) export *;");
tryItOut("let (__proto__ = window) { export __parent__; }");
tryItOut("if(<y><z/></y>.__iterator__ = <xxx {__count__}={__proto__} /> for each (prototype in ([15,16,17,18].sort((<><x><y/></x></>).__defineSetter__, __count__))) if (#3={a:#3#})) export *; else  if (yield ) {return; } else {yield each; }");
tryItOut("export prop\n");
tryItOut("with({}) { let(prop, __iterator__) { with({}) { return; }  } ");
tryItOut("/*infloop*/M:for(<><x><y/></x></> ? window : *::*.isPrototypeOf((@foo.isPrototypeOf(true))) = new ( '' )(*, <x><y/></x>); let (__noSuchMethod__) <x/>(); ({constructor: constructor = this.zzz.zzz.@*, __count__ setter: function  __noSuchMethod__ (__count__) { yield <y><z/></y> }  })) \tgc()\nexport function::constructor;\n\ngc()");
tryItOut("if(window.hasOwnProperty(\"prop\")) { if (({}).__lookupGetter__(\"constructor\")) const prop = <x><y/></x>;} else {(this);return; }");
tryItOut("/*infloop*/M:do {/*infloop*/for(prop = {}; \t1e-81; *) {(<x><y/></x>); }prop; } while(__proto__\n);");
tryItOut("__parent__ = 4.\n(4.);");
tryItOut("{M:switch([,]) { default: continue ;*::*;break;  } }");
tryItOut("/*for..in*/for(const each in undefined) {;var prop, setter = 5.0000000000000000000000; }");
tryItOut("yield prop.(4.);");
tryItOut("M:switch(this.__defineSetter__(\"prototype\", (Math.sin).call)) { case __proto__.__count__ setter= gc: const prototype = [z1]; }");
tryItOut("throw StopIteration;");
tryItOut("if((<><x><y/></x></>\r)(\t[,], [])) {gc()continue ; } else {export *; }");
tryItOut("return __proto__.(3/0) <<= *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var [, ] in this.__defineGetter__(\"__noSuchMethod__\", function  __proto__ (__proto__) { yield; } )[[1]] ) L: {return (-0);var prop, __count__; }");
tryItOut("{L: {export __noSuchMethod__; } }");
tryItOut("{yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let  /x/g ['__noSuchMethod__'] in window) {yield 1e+81;export *; }");
tryItOut("__iterator__ getter: function  constructor (prototype) { throw *::*; } ");
tryItOut("do return window; while((*) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop.prop in (__parent__) = [<><x><y/></x></>]) {let constructor = @foo; }");
tryItOut("{return\n/*for..in*/for(var prop = eval(\"(<x/>)()\", (eval(\"const __proto__;\", each))).watch(\"__noSuchMethod__\", function(q) { return q; }) in [].hasOwnProperty(\"prototype\")) {/*\n*/throw __count__; } }");
tryItOut("/*for..in*/L:for(var __proto__ in ([window for each (prop in <x/>)])) {/*infloop*/L:\tfor(function::__noSuchMethod__ = <x><y/></x>;  /* Comment */({}); true || constructor) continue M; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("/*infloop*/for(const delete = @foo; __noSuchMethod__; <x/>) export *;");
tryItOut("if(3/0) { if (prototype) \r{(#1#);export *; } else {return  '' ; }}");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(const [, [, ]] = (undefined.@*); prototype.constructor = this >>>=this; new (<><x><y/></x></>)()) throw *;");
tryItOut("do return <><x><y/></x></>; while((<x><y/></x>) && 0);");
tryItOut("export prototype;\nexport *;\n");
tryItOut("let (({ prototype: ({ prototype: prop }), prototype: <x><y/></x>.__parent__ }), constructor) { /*for..in*/for(var __parent__ in  '' ) throw  /x/ ; }");
tryItOut("let (prop) { yield; }");
tryItOut("try { export *; } catch(__parent__ if 1e81.constructor = __proto__.valueOf(\"number\")) { try { ; } catch(__iterator__ if (function(){return;})()) { yield; } catch(__parent__ if (function(){var constructor, __iterator__;})()) {  } finally { yield *; }  } catch(prop if <y><z/></y> ^ 0/0.@foo) { yield  /* Comment */<x/>; } catch(__iterator__) { return <x/>; } ");
tryItOut("with(({ constructor: prototype }) = ({ prototype: __iterator__ })){throw -0;/*infloop*/for((({constructor: <x/>, prop: <y><z/></y> })) - ; __noSuchMethod__.@foo; this.zzz.zzz) const constructor; }");
tryItOut("/*infloop*/do {Math.sin; } while(__noSuchMethod__ = <y><z/></y>);");
tryItOut("{let __noSuchMethod__ =  \"\" \n(((__parent__))); }");
tryItOut("/*for..in*/L:for(__proto__ = constructor in *::*) {/*infloop*/while(<x/>){yield @foo;__parent__ = *, function::prop = <x><y/></x>; } }");
tryItOut("if(({ prototype: __parent__ }) = (this.zzz.zzz)) break L; else  if (this.__defineGetter__(\"__iterator__\", prop) << (#2=[ /x/g ])) {L:with((prop.(__noSuchMethod__ :: #3={a:#3#})))gc() } else export *;");
tryItOut("gc()");
tryItOut("/*infloop*/for((eval(\"prototype = 0x99\", ({constructor: null})) .@x:: (constructor)[this]);  = ({ __iterator__: \tconstructor }) = ({constructor setter: function(y) { yield y; return;; yield y; } }); [15,16,17,18].sort(\t<><x><y/></x></>, <x><y/></x>).propertyIsEnumerable(\"__count__\")) while((this) && 0){ /x/g  }");
tryItOut("yield ([11,12,13,14].some);");
tryItOut("/*infloop*/L:for(const ({ __proto__: ({ __iterator__: [] }) }) = (({prop getter: false }) ^= this.__defineSetter__(\"__iterator__\", [1,2,3,4].map)); eval(\"constructor\",  /x/g ).*; (true ? <x><y/></x> : false)) throw <x><y/></x>;");
tryItOut("if(({ prototype: __parent__ }) = ({ constructor: prop })) \tL:do export *; while(((<x><y/></x> |= <><x><y/></x></>)) && 0); else  if ((__iterator__ getter: function(y) { yield y; export *;; yield y; }\n) ^ (({__iterator__: undefined }))) {/*for..in*/for(const __iterator__.__iterator__ in -1) {let __noSuchMethod__;let prototype; } } else __parent__;");
tryItOut("/*for..in*/for(var [[, window], ({ __count__: __iterator__, constructor: ({ __proto__: [, prototype] }) }), ({ __count__: [, , ({ __noSuchMethod__: __parent__ }), , ({ __iterator__: __noSuchMethod__, __noSuchMethod__: __parent__ })], prop: ({ get: [, , prop], __count__: ({ __count__: __proto__ }) }) }), [prop, __parent__, __iterator__, ]] in (eval(\"eval(\\\"const constructor = 033;\\\", 1e4)\", 'fafafa'.replace(/a/g, ({}).hasOwnProperty)))) {throw window;/*for..in*/for(constructor in (([1,2,3,4].slice)(-1 instanceof <><x><y/></x></>)))let __noSuchMethod__, __proto__; }");
tryItOut("{gc() }");
tryItOut("M:with( '' ){prototype;return; }\n\fL:if(prop) {const __noSuchMethod__ =  /x/ , prototype;(<y><z/></y>); } const __count__;");
tryItOut("M:if(null.propertyIsEnumerable(\"prop\")) { if ((0.1).watch) export *; else }");
tryItOut("/*infloop*/while((@foo -= 3.unwatch(\"__iterator__\")) *= (function  __noSuchMethod__ () { \freturn -1 }  |= ((p={}, (p.z = __noSuchMethod__)()))))with({yield: 0x99\n}){(prop);const __count__ = #1=[#1#], __noSuchMethod__ = window; }");
tryItOut("/*infloop*/M:do with(\n__proto__ = 3.141592653589793){;; } while(yield 3);");
tryItOut("/*for..in*/for(const [__iterator__, prop] = +(yield this) in ) {let (__proto__ = (<><x><y/></x></>.__lookupGetter__(\"__parent__\")).throw(new window()), __noSuchMethod__) { if(<y><z/></y>(*)) {throw  /x/g ; } else  if (prototype.((new Iterator(__parent__, <x><'y/><'x>))))  else var constructor, __noSuchMethod__; } }");
tryItOut("with(undefined.yoyo(1e-81)){}\nexport __noSuchMethod__;\n");
tryItOut("L: return;");
tryItOut("/*infloop*/for(<x><y/></x>;  /x/g ; 3) {throw  '' ;0 }");
tryItOut("M:with((#3={a:#3#}.hasOwnProperty(\"__iterator__\")))export prop;");
tryItOut("/*for..in*/for(let __proto__ = (uneval(window)) in <x><y/></x>) this;");
tryItOut("<><x><y/></x></>;");
tryItOut("/*infloop*/for(var __iterator__; (arguments += *::*).__noSuchMethod__; (p={}, (p.z = 'fafafa'.replace(/a/g, [1,2,3,4].slice))())) /*infloop*/for(let undefined = ((uneval( \"\" ))); (__iterator__ = <x><y/></x>); (prototype = false)) {var __noSuchMethod__;throw window; }");
tryItOut("{gc()1e4 }");
tryItOut("/*infloop*/M:do {;export *; } while((__parent__))\nreturn;");
tryItOut("switch([delete, constructor, prop, __parent__] = eval(\"continue ;\", null)//h\n) { case 9: case (( \"\" .yoyo(__parent__) for each (constructor in @foo) if (<x><y/></x>))): default: break; case 7: L:switch(<x><y/></x>.throw(<y><z/></y>)) { case 8: gc()break;  }break;  }");
tryItOut("for(let y in [5,6,7,8]) with({}) yield prototype;");
tryItOut("continue M;");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; window;; yield y; }))) { if (({__iterator__:  })) {/*for..in*/for(var __noSuchMethod__ in ((window)(<><x><y/></x></>)))yield *; }} else {( '' );eval }");
tryItOut("with(__proto__.hasOwnProperty(\"constructor\") & __parent__){L: {break M; }export *; }");
tryItOut("with(<y><z/></y>)let __proto__, constructor;");
tryItOut("switch(@foo |= __count__) { case (prop.__parent__ =  \"\" ):  }");
tryItOut("let (__count__ =  /x/g ) { /*for..in*/for(const prop in (((function (<x><y/></x>) { yield false } ).apply)( '' ))){<x><y/></x>; } }");
tryItOut("let (__count__) { if( /x/g  | -0.__lookupSetter__(\"prop\")) {let __parent__ = null, true = <><x><y/></x></>; } else {export *; } }");
tryItOut("(typeof <x><y/></x>)");
tryItOut("L: __parent__ const __noSuchMethod__;");
