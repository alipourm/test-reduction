tryItOut("yield <><x><y/></x></>;\ngc()\n");
tryItOut("L:do {(<x><y/></x>);gc() } while((4.) && 0);");
tryItOut("if(([0 for (prop in <x/>)])) const __count__, constructor; else  if ( /x/g  for each (__iterator__ in .2)) *::*; else const __iterator__ =  /x/g \n(<x><y/></x>).__defineSetter__");
tryItOut("{}__parent__;");
tryItOut("if((this.__defineGetter__(\"prototype\", [1,2,3,4].slice))) { if (@foo.propertyIsEnumerable(\"prototype\") in __iterator__ = false + (((function::prototype = function ([y]) { }))([@foo if (<><x><y/></x></>)]))) {{} }} else {; }");
tryItOut("throw [,];");
tryItOut("{yield; }");
tryItOut("__count__ = __proto__;");
tryItOut("with('fafafa'.replace(/a/g, ({}).hasOwnProperty))/*for..in*/for(const [prop, prop] = <><bbb xmlns=\"-3/0\"><!--yy--></bbb></> in [z1]) __proto__;");
tryItOut("M:if((let (__noSuchMethod__, x::__noSuchMethod__) __noSuchMethod__)) { if ((function () { return false } .__lookupGetter__(\"__iterator__\"))) if(typeof prop) { if (__proto__) let __noSuchMethod__; else {var __parent__, __parent__ = get; }} else {let __proto__ =  /x/ , constructor; }}");
tryItOut("/*infloop*/for(this.__defineGetter__(\"__parent__\", function (__iterator__)break ;); 'fafafa'.replace(/a/g, <><x><y/></x></>); window) {return true;yield;\f }");
tryItOut("return;");
tryItOut("with(this.unwatch(\"__proto__\"))throw *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype.__proto__ in (let (prototype, __parent__) __parent__)) {{;throw <x/>; } }");
tryItOut("L: (-1);");
tryItOut("if((-1)yyy) /*infloop*/do {{}yield; } while(-0); else (__proto__)");
tryItOut("/*infloop*/for((Array(({a2:z2}), this)); ({__count__ getter: function(y) { yield y; return  /x/g ;; yield y; },  set prop(constructor) {  }  }); (constructor%=yield (*::*.@foo))) {{}export __count__; }");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] = ([<y><z/></y> for (__proto__ in  /x/ )]).eval((*::*.__parent__)) in prototype.__noSuchMethod__ = __proto__.throw(<y><z/></y>)) {try { {} } \fcatch(__parent__ if (function(){{}})()) { (033); } catch(__count__ if (-1)) { let __count__, constructor; }  }");
tryItOut("/*infloop*/L:while((__parent__)){/*infloop*/while(__noSuchMethod__){}/*infloop*/for( }");
tryItOut("throw __proto__;");
tryItOut("L: {/*infloop*/for(window; 0/0;  /x/g ) {break L;{} }yield; }");
tryItOut("with({__count__: ((function (__proto__, __iterator__) { yield  /x/g  } ).call(new ({a2:z2})(null, <y><z/></y>), ))})switch(*::*) { case 8: break;  }");
tryItOut("L:with(window)break ;");
tryItOut("/*infloop*/M:for(const __count__ = window for (let __iterator__ = *; in #1#); <x><y/></x>.watch(\"__noSuchMethod__\", gc); (this.zzz.zzz)) {yield __count__; }");
tryItOut("with(<y><z/></y>){yield; }");
tryItOut("L:if(prop[*::*].hasOwnProperty(\"__noSuchMethod__\")) { if ((function  __parent__ () { return this } ).call(false,  /x/g )\t * __count__.__count__) } else {yield -1;break ; }");
tryItOut("/*infloop*/for(const __count__; __proto__ = <><bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb></>; prop = <><x><y/></x></>.@foo) {; }");
tryItOut("with({__noSuchMethod__: [1e-81].map(function  __iterator__ (prototype, prototype) { yield [,,] } )}){export prototype; }");
tryItOut("break ;");
tryItOut("/*infloop*/do {return;/*infloop*/M:for(let ({ prop: __iterator__, __noSuchMethod__: __noSuchMethod__ }) = this.isPrototypeOf([]); <x><y/></x>.__lookupSetter__(\"prototype\"); __parent__) {export *;{} }\n/*infloop*/M:do yield; while( /x/ .watch(\"__count__\", (function(q) { return q; }).apply));\n } while(({ /x/g : (yield delete [z1,,]).__proto__ = prototype}));");
tryItOut("/*infloop*/for(let ++([15,16,17,18].map(gc, window)).isPrototypeOf(#1#), window; ((function (__parent__) { yield <x><y/></x> } )()\n); 'fafafa'.replace(/a/g, 'haha'.split)) {with({__proto__: <><x><y/></x></>})yield;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__.__iterator__ = __parent__ in (((<><x><y/></x></>.__defineGetter__(\"__proto__\", (@foo).__defineSetter__)) for each (__noSuchMethod__ in <y><z/></y>)))) {with({constructor: @foo}){}L: break L; }");
tryItOut("{export *; }");
tryItOut("L:if(#1# .@*:: <><x><y/></x></>.@*) export __count__\n");
tryItOut("/*infloop*/for(let prop; *::* for each (__proto__ in <x/>) ?  /x/g .unwatch(\"__count__\") : <y><z/></y> & <y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\"); (uneval(<x/>))) {/*infloop*/for(var constructor; window; (1e4 if (undefined))) {{} } }\t");
tryItOut("with(<><x><y/></\fx></>){;return; }");
tryItOut("if(new ('haha'.split)(prop)) {L:switch(<x><y/></x>) { default: /*for..in*/for(let __iterator__ = this in <x/>) {}break;  } } else  if ((window)(this, prototype)) {yield; }/*\n*/");
tryItOut("export *;");
tryItOut("/*infloop*/while((window.__lookupGetter__(\"prototype\")))yield __count__;");
tryItOut("let (getter)\f { if(this) {throw <><x><y/></x></>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (undefined /= *) in (-0)) {let __count__, __parent__ = __noSuchMethod__ }");
tryItOut("L:switch(new prop()) { default: break; /*infloop*/M:for(__parent__; 3/0; -0) yield;break; break;  }");
tryItOut("/*infloop*/M:for(const __parent__(__noSuchMethod__ = *::*) = ('fafafa'.replace(/a/g, ([11,12,13,14].some).isPrototypeOf(*(<><x><y/></x></>, window)))); (prototype-=<><x><y/></x></>); window) if(\n__proto__) {let __iterator__;L: yield <x><y/></x>; }");
tryItOut("throw StopIteration;");
tryItOut("\fif(({ get __proto__(__count__) { return @foo } ,  set function::prototype(prototype, prop) { yield 3; }  })) {/*for..in*/for(var prop = [z1] in *::*) {export prop; }function::constructor; }");
tryItOut("if(this.zzz.zzz) { if (( ''  ? __noSuchMethod__ : @foo)) {let (constructor = this.__defineGetter__(\"constructor\", new Function), prop) { /*infloop*/L:while(undefined){export *; \"\" ; } } }} else yield;");
tryItOut("__noSuchMethod__;\n;\n");
tryItOut("/*infloop*/while(-1.hasOwnProperty(\"constructor\") ? <><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\") : new Number(<x><y/></x>, [,,z1]))if(__iterator__) { if (false) {}} else {export *; }");
tryItOut("switch(<x><y/></x>) { default: /*for..in*/for(let __iterator__ = __noSuchMethod__ in <x><y/></x>) {}continue ;case 8: <xxx>{x::constructor}</xxx>break; __parent__ =  /x/g , constructor = <>case 5: break; </>;case <x><y/></x>: return <x><y/></x>;break; case 2: break; break; break; break; ({}).hasOwnPropertycase <x><y/></x>: break; const __proto__;break; case 9: break; break; case true: yield;case 4: return (function ([y]) { })(); }");
tryItOut("L: {(__count__);\ngc()\nif((undefined.isPrototypeOf(null))) { if ( /* Comment */ \"\" ) (<x/>);} else ; }");
tryItOut("");
tryItOut("if(3/0) { if ([,,z1]) 033;} else yield window;");
tryItOut("return;");
tryItOut("/*for..in*/for(prop =  in <y><z/></y>) {{} }");
tryItOut("({}).__lookupGetter__\nyield <x><y/></x>;");
tryItOut("M:with({__iterator__: *::*}){ for (prototype in this) for each (__count__ in *)\nreturn __count__;\n }");
tryItOut("if([prop for (__iterator__ in window)].valueOf(\"number\")) prop, prop = @foo; else  if ((__iterator__ = <x/>.@foo)) {return;gc() } else {continue M; }");
tryItOut("return");
tryItOut("with({}) let(__proto__ = (eval(\"<x\\t><y/></x>\", [,])) != this.__defineSetter__(\"prototype\", Math.sin)) { let(constructor, ({ __noSuchMethod__: constructor, prototype: [, , , ] }) = ( /* Comment */3).watch(\"__parent__\", @foo)) ((function(){for(let y in [5,6,7,8]) return;})());");
tryItOut("/*infloop*/do {if(({a2:z2})) { if (<y><z/></y>) let __iterator__, __parent__; else return;}{__proto__ } } while(__parent__ = set);");
tryItOut("/*for..in*/L:for(var (prop) in this.zzz.zzz) {}");
tryItOut("/*infloop*/while(<><x><y/\f></x></>)continue L;");
tryItOut("/*infloop*/do <{__proto__}><ccc:ddd></ccc:ddd></{__proto__}> while([<><x><y/></x></>].map(gc));");
tryItOut("yield <>window</>;");
tryItOut("{return <x><y/></x>;export prop; }");
tryItOut("L:with()#1#, __parent__/*for..in*/for(var prototype in __proto__ + ((<y><z/></y>)[(this.__defineSetter__(\"__noSuchMethod__\", gc))])) {throw __proto__; }");
tryItOut("switch(constructor.__proto__ = prop) { default: export *;break; case 8: case 0: case 4:  }");
tryItOut("let (__proto__ = (<><x><y/></x></>)() + <><x><y/></x></>.*) { /*for..in*/for(const [__noSuchMethod__, __proto__] = (([1,,] || *) > true) in __parent__.__iterator__) {/*for..in*/for(__iterator__ = (((-1)).watch()) in <><x><y/></x></>) ; } }");
tryItOut("with(prototype.prop = function ([y]) { }){yield; }");
tryItOut("{}");
tryItOut("throw __proto__;");
tryItOut("let (constructor = [[1]] ? ({constructor setter: function (prototype)<x><y/></x> }) : (\nthis) >>>=(undefined ? <><x><y/></x></> : <x/>), function::__iterator__ = __count__.(<x><y/></x>) && window.@foo) { prop = @foo, prop;\n(<><x><y/></x></>)\n__iterator__;\n }");
tryItOut("/*infloop*/L:for(const [this, , ({ __count__: constructor }), , ({ __iterator__: __noSuchMethod__, __count__: [, __iterator__, ] })] = (*::*)(__proto__, undefined) >= *.__defineSetter__(\"__proto__\", 'haha'.split); (new Function).call(undefined, ); ({ x::prop: let }) =  /* Comment */function ([y]) { }.yoyo(<x><y/></x>.hasOwnProperty(\"__iterator__\"))) {/*infloop*/for(var ({ ({ __count__: ({ __noSuchMethod__: [, prototype, __noSuchMethod__, ] }) }): [__count__, , ({ \t__parent__: constructor, __proto__: ({ __parent__: prototype, @foo: __noSuchMethod__ }) }), prop, [[, , ]]], constructor: constructor }) = this; (__count__ ? [z1,,] : 1e81)[(__parent__.*)]; eval(\"*::* ^ __iterator__\", (<x/> && *::*))) /*for..in*/for(let __parent__ in window)  }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var -0.__count__ =  /x/g  in <><> </> </>) {yield  '' ;{gc()function (__iterator__, __parent__) { return <><x><y/></x></> }  } }");
tryItOut("L:if(((__count__ = true))().watch(\"__proto__\", Math.sin)) {continue ;yield; } else L: {([z1]);export *; }");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = (<x><y/></x>.yoyo( \"\" ).__defineSetter__(\"prototype\", Math.sin).valueOf(\"number\")) in this) {return ({a2:z2});if(<x><y/></x>) { if (false) {var  , constructor;{} }} else yield; }");
tryItOut("/*infloop*/{continue ;\nreturn;\n }");
tryItOut("/*infloop*/M:while((Function([1])) :: this.__defineSetter__(\"__proto__\", Math.pow)){export __parent__;var constructor, __count__ = *; }");
tryItOut("/*infloop*/for(prototype; false; this) let prop = 3/0;");
tryItOut("/*infloop*/for(const __count__; <x><y/></x>;  '' ) { }");
tryItOut("/*for..in*/for(var __iterator__ = 3 in <x/>) <x><y/></x>;");
tryItOut("/*infloop*/for(let __proto__; <y><z/></y>; (({__count__ getter: Function, __proto__: ({a1:1}) })).eval(*::*.@foo)) var __iterator__ = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (__parent__ =  '' )) let(__count__) { return;");
tryItOut("yield [,]");
tryItOut("/*for..in*/for(prototype in (((* <= <y><z/></y> && (null.throw(<x/>))))(<><></></>)))yield;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = ((<><x><y/></x></>).watch) in <><x><y/></x></>) .constructor");
tryItOut("if(({ get __parent__ __proto__ ()* }) ? (({}))(__proto__) : let (__count__, __noSuchMethod__) ([[]])[[,,]]) { if ((prototype = null)[({ prop: prop, prop: __count__ }) = [[]].__defineSetter__(\"__count__\", function(q) { return q; })]) ([,,z1]).watch} else yield;");
tryItOut("L:do prototype, __noSuchMethod__; while((undefined.propertyIsEnumerable(\"__proto__\")) && 0);");
tryItOut("/*for..in*/for(var __iterator__ = ([function(id) { return id }]) .@  /* Comment */prototype in <x><y/></x>) {gc()export get; }/*infloop*/for(var __proto__;  ''  ? prop.prop : (__noSuchMethod__ = 1.3); prop([15,16,17,18].map([1,2,3,4].slice, <y><z/></y>))-=1e+81) if((*::*.isPrototypeOf(<x><y/></x>).__lookupSetter__(\"prop\"))) { if (([15,16,17,18].some(function  __iterator__ (__iterator__, constructor) { ; } , -1)/*\n*/)) yield;} else {gcyield; }");
tryItOut("/*for..in*/for(let __parent__ in  \"\" ) export *;");
tryItOut("M:with(new ((eval(\"gc()\", *)))())function  __noSuchMethod__ ()(-1)");
tryItOut("with({__proto__: prop.__iterator__ = __noSuchMethod__.prop.__defineSetter__(\"__proto__\", (({a2:z2}) @ prop))}){yield; }");
tryItOut("for(let y in [5,6,7,8]) try { throw StopIteration; } catch(__count__) { try { throw *;\t } catch(constructor) { yield; }  } ");
tryItOut("/*for..in*/for(({ __parent__: [] }) in ((Function)(( '' .unwatch(\"__count__\")[({function::__iterator__ = true, __iterator__ = *::*;,  set __count__(prototype) { yield <><x><y/></x></> }  })])))){(function(id) { return id });with(this)return; }");
tryItOut("/*for..in*/for(prop = __parent__.__count__ in (__parent__ = window)) {if(false) { if (this) {yield;var constructor = __proto__; } else {export __proto__; }}break M; }");
tryItOut("if(<x/>.__iterator__) {yield; } else  if ([15,16,17,18].map(<\f><x><y/></x></>, *::*)) 1e-81; else ");
tryItOut("/*infloop*/do {} while((uneval(<x><y/></x>)));");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(constructor in  \"\" .@foo) ;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((this\t)((eval))))(true);");
tryItOut("L:if(false & [prototype if (*)]) { if ((__iterator__.prototype setter= ([1,2,3,4].slice).call)) {let __count__, __parent__;const prop = -3/0, prop =  /x/ ; }} else {gc() }");
tryItOut("let (__parent__ = this.zzz.zzz, constructor = new (this)( /x/ ,  \"\" )) { yield undefined; }");
tryItOut("\fif(@foo.isPrototypeOf(<x><y/></x>)) { if (false.__defineSetter__(\"__count__\", <><x><y/></x></>)) {export *; } else {[[]];export *; }}");
tryItOut("return (*::*)()\n");
tryItOut("/*for..in*/for(var function::__iterator__ in new function  function::prototype (constructor) { return <x><y/></x> } (3)) {; }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut(";");
tryItOut("__noSuchMethod__ = <>(<x><y/></x>.__proto__ = window)</>, __iterator__");
tryItOut("if(__parent__.__noSuchMethod__ setter= __iterator__ = 4.) gc() else {}");
tryItOut("{yield; }");
tryItOut("gc()");
tryItOut("gc()");
tryItOut("/*for..in*/for(const this in ((__parent__ =  /x/ )(*.valueOf(\"number\"))))continue L;");
tryItOut("/*infloop*/do /*infloop*/M:for(__proto__; <><x><y/></x></>; window) let constructor = <x/>; while((window * <><x><y/></x></>));");
tryItOut("/*infloop*/while(prop = (* ? this : *::*)){yield <x/>;__parent__ = <x/>, __parent__; }");
tryItOut("{({});/*for..in*/M:for(let __iterator__ in (([1,2,3,4].slice)(new [1,2,3,4].slice([,,z1], false))))gc() }");
tryItOut("L:with({__count__: <><x><y/></x></>.*});");
tryItOut("with(yield ((({}).hasOwnProperty).call((yield  '' ), (prop && true)))){{}with(( \"\" .__lookupGetter__(\"\"))){gc() } }");
tryItOut("with(3/0)var constructor, __proto__ = [[]];");
tryItOut("/*for..in*/L:for(var [__proto__, __iterator__] = ({}).__lookupGetter__ in <x/>) {yield; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __parent__] =  ''  >>> window in  '' ) yyy");
tryItOut("if(#2=[<><bbb xmlns:ccc=\"++1e-81\"><ccc:eee></ccc:eee></bbb></>]) { if ((new (function () { return (<><x><y/></x></> = [,,]) } )())) /*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in undefined) yield; else yield .2;}");
tryItOut("/*infloop*/while( '' ){continue ; }");
tryItOut("{gc()var prototype = [,]; }");
tryItOut("L:switch(\f.2) { default: (false);break; case 6: var prototype = prototype, __noSuchMethod__ = [z1];break; case 3.141592653589793: yield <><x><y/></x></>;break; case 4.: break; export prototype;break; export *;break; case ': (__proto__);export *;case 1: case 7: return <x><y/></x>;break; case <x><y/></x>: break;  }");
tryItOut("let (({ prop: [, , [, __proto__, , , __parent__]] }) =  \"\" , __iterator__ = null.*) { /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in undefined) /*infloop*/while(<x><y/></x>)throw /*\n*/<><x><y/></x></>; }");
tryItOut("/*for..in*/for(const [, prototype] = *::* in (throw <><x\f><y/></x></>)) {export __parent__; }");
tryItOut("/*infloop*/do {{var __count__, __parent__ = <x/>; } } while(([(typeof <><x><y/></x></>)].sort(( /* Comment */null).watch)));");
tryItOut("let (__proto__ = <x/>) { /*for..in*/L:for(const prototype =  \"\" (prop) in <><x><y/></x></>) export __proto__; }");
tryItOut("let (prop, __parent__ = __parent__) { /*infloop*/M:for(__iterator__; window @ true; (__parent__.(constructor))) ; }");
tryItOut("var __count__ = [[]], __parent__ = 1e4\nconst prototype = <y><z/></y>;");
tryItOut("\n/*for..in*/L:for(let constructor in ((function(q) { return q; })(__parent__.constructor = <x><y/></x>))){function::__noSuchMethod__ = constructor;break M; }\n");
tryItOut("with({prop:  if (-1).__count__}){var __count__ = this, constructor = <x><y/></x>;__iterator__ = false; }");
tryItOut("let __count__ =  /x/ , __proto__;");
tryItOut("[[, ({ __iterator__: __count__, __noSuchMethod__: __noSuchMethod__ }), ({ prop: ({ delete: __count__, __count__: __proto__ }) }), , ], __noSuchMethod__]");
tryItOut("while(([15,16,17,18].filter(eval, \t((new  /x/ ) for each (constructor in (#0=true)) for (prototype.__iterator__ in window) for each (__iterator__ in true) for each (prototype in <x/>)))) && 0){switch(<><x><y/></x>\f</>.propertyIsEnumerable(\"prototype\")) { case [constructor]: throw <><x><y/></x></>;break; let __count__; } }");
tryItOut("do {Math.sin } while((this.zzz.zzz--) && 0);");
tryItOut("throw StopIteration;");
tryItOut("yield;");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>) {} else constructor} const throw (prop.(<x><y/></x>) ^= undefined += <x><y/></x>) ^ (uneval((prototype.constructor = --[])));;");
tryItOut("var __iterator__;");
tryItOut("/*infloop*/for(var __count__ = (0.1(prototype)); ({__iterator__ getter: (__count__).watch }); false ? window : <y><z/></y>) {{}; }");
tryItOut("with({prototype: ({ set __parent__ __iterator__ ()<><x><y/></x></> })}){yield window;if(([11,12,13,14].filter)) yield; else  if ((<><x><y/></x></> !=  \"\" )) {yield; } else {let prototype, get;Math.pow } }");
tryItOut("if( /x/ \n) {let prototype; } else  if ([1,,]) {let __iterator__;export __count__; } else {export __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__((({constructor: arguments })).throw(*.__defineSetter__(\"prototype\", ({}).__lookupGetter__))) in window) {export __noSuchMethod__; }");
tryItOut("with({}) let(prototype = 1e4, constructor = window) ((function(){__noSuchMethod__ = -1;})());");
tryItOut("export *;");
tryItOut("for(let y in []);");
tryItOut("M:if((let (__noSuchMethod__ = 3--, __proto__ = __iterator__ = setter) ({ __proto__: constructor }) = ({ __noSuchMethod__: prop }).hasOwnProperty(\"constructor\")) - (undefined.isPrototypeOf((function ([y]) { })()).@*)) {return; } else {return;export *; }");
tryItOut("\n;\n");
tryItOut("L:do {while((<y><z/></y>) && 0){<y><z/></y>;yield this; }\rM:switch(*::*) { case 2:  } } while((Math.pow) && 0);");
tryItOut("L:with({__iterator__: new RangeError( /x/g )})L: {let __iterator__, __proto__; }");
tryItOut("with(__proto__)/*infloop*/for(((uneval(<x><y/></x>))); <><x><y/></x></>.valueOf(\"number\"); function::prop.(<x><y/></x>)) {{yield <x><y/></x>; } }\n;\n");
tryItOut("if(*::*.propertyIsEnumerable(\"constructor\")) var undefined, prop = *; else  if ((([11,12,13,14].some)(__parent__ = undefined, <y><z/></y>))) \n{ }");
tryItOut("/*for..in*/for(let __iterator__ in ~(0.1.__proto__) %= __proto__) {throw false; } const __proto__;");
tryItOut("if((-1)) { if ([, ({ delete: __proto__, prototype: __proto__ }), constructor] = <x/>\n.@*) /*for..in*/L:for(let __count__ in arguments)  \"\" ;} else {/*for..in*/for(const __iterator__ in true) ({}).hasOwnProperty }");
tryItOut("this.zzz.zzz");
tryItOut("let(__proto__ = this) ((function(){throw prop;})());");
tryItOut("prop = __parent__;");
tryItOut("let(({ constructor: ({ __proto__: ({ prop: prop }) }) }) = (null <= <x><y/></x>), function::constructor) ((function(){for(let y in [5,6,7,8]) let(__proto__ = ~<x><y/></x>, __count__) { __count__ = __parent__;})());");
tryItOut("if(*::*') {return;export *; } else {yield;return; }");
tryItOut("\n");
tryItOut("/*for..in*/for([constructor, __parent__] = ((p={}, (p.z = new RangeError(<y><z/></y>))())) in <><x><y/></x></>.@foo) {false;if(({__count__: <y><z/></y>, prototype: <><x><y/></x></> }) .. (each = <x><y/></x>)) 5.0000000000000000000000 else yield [z1,,]; }");
tryItOut("L:if(*::*) { if (*::*) {continue L; }} else gc()");
tryItOut("L:if(#1=({__parent__: new Array(__iterator__).isPrototypeOf(1e4.@*)})) {break ;if(new #1#(<x><y/></x>)) /*infloop*/M:for(__proto__; *::*; __noSuchMethod__) {prototype = *; } else yield true; }");
tryItOut("/*infloop*/L:for(const ({ prototype: ({ constructor: /*\n*/[[], , ({ constructor: __proto__ })] }) }) = ; prop.setter; ('haha'.split)(__count__)) /*infloop*/while(try { gc() } finally { throw __count__; } .watch(\"prop\", ({}).__lookupGetter__)){throw <><x><y/></x\f></>;export constructor; }\n");
tryItOut("if([z1]) ({}).__lookupGetter__ else  if (3) continue ; else {};");
tryItOut("/*infloop*/M:while( '' ){[1,2,3,4].mapL: yield; }");
tryItOut("throw constructor;");
tryItOut("{export *;(3); }");
tryItOut("/*infloop*/M:for(let ({ __noSuchMethod__: ({ prop: prop }), __noSuchMethod__: ({ prop:  undefined  }) }) = prop = ([[z1,,]].sort(new Function)); <xxx>{prop}</xxx>; ++(*::*)[*]) {do __iterator__; while((*) && 0)\nbreak L; }");
tryItOut("/*infloop*/while(__iterator__.__proto__ setter= function  prototype (each, prototype) { return null } ){switch(3/0) { default: break; case prototype: <x><y/></x>;break; case __iterator__: case 2: case <><x><y/></x></>: break;  }(<><x><y/></x></>); }");
tryItOut("/*for..in*/M:for(const prop = __proto__ = * in [<><x><y/></x></>]) ({}).__lookupGetter__ const __parent__;");
tryItOut("if((function () { <x/>; } )) {export *;export prop; } else  if (((uneval(prop)).__lookupGetter__(\"prototype\"))) do var __count__ = undefined; while(( /x/ ) && 0); else 1.2e3;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in ((constructor = window).throw(<y><z/></y> .@*:: __iterator__))) if([11,12,13,14].filter) \t{const __parent__; }");
tryItOut("{var __iterator__; }");
tryItOut("/*infloop*/for(let ({ __iterator__: [] }) = (*.watch(\"__iterator__\", function ()this) ?  ''  / *::* : (__noSuchMethod__ - null)); new function  __proto__ () { return constructor } ((function (__iterator__) { yield *::* } (<><x><y/></x></>)), this); ([<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)])) {{}if(__parent__) {export *;yield @foo; } else  if (({})) __parent__; else {(({a1:1})); \"\" ; } }");
tryItOut("__parent__\ncontinue M;");
tryItOut("/*for..in*/for(const prototype in ((function ()window)((eval(\"return <><x><y/></x></>;\", <x/>))[<><x><y/></x></>.prototype])))\n");
tryItOut("/*for..in*/M:for(var __iterator__ in ((function  prototype (export prop;) { return * } )(<x/>)))let __count__ = window;");
tryItOut("let(constructor) ((function(){let([null, , , , __parent__] = (), ({ __count__: function::__parent__ }) = ([<><x><y/></x></>]/*\n*/.filter(function  constructor () { const constructor;\f } ))) { __count__ = prototype;})());");
tryItOut("while((<>(__iterator__)</>) && 0){/*infloop*/while((({constructor setter: function () { yield prototype }  }))){export *; } }");
tryItOut("this.zzz.zzz;");
tryItOut("if(~(prototype|=<><x><y/></x></>.yoyo((prototype-=<y><z/></y>)))) { if (__noSuchMethod__ .. __noSuchMethod__) export *;} else ");
tryItOut("yield <x/>;");
tryItOut("__noSuchMethod__, __count__ = false;");
tryItOut("{__iterator__ = __proto__; }");
tryItOut("{yield (); }");
tryItOut("with({}) { try { export __noSuchMethod__; } catch(__iterator__ if (function(){'haha'.split})()) { gc() } catch(constructor if (function(){;})()) { yield undefined; }  } ");
tryItOut("M:while((prop) && 0)throw ({});");
tryItOut("if((this.__defineGetter__(\"__iterator__\", (__proto__).watch))) yield <x/>; else  if (#1=[<><x><y/></x></>]) [1,2,3,4].mapconstructor, prop = window;1e81;");
tryItOut("gc()");
tryItOut("{{prototype, constructor; }let (__noSuchMethod__ = <x/>, __proto__ = false) { export *; }(__iterator__); }");
tryItOut("if((new -3/0(1.2e3, <x><y/></x>)\r)) continue ; else  if (new ({})(-3/0)) {export prototype;([z1,,]); }\nthrow __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ = [[1]].__count__ in 3/0) {L:with({__iterator__: __iterator__}){export *;__iterator__, prop; }yield; }");
tryItOut("/*for..in*/for(prototype in  /x/g .prototype = <><x><y/></x></> && prototype = <x/>) /*for..in*/for(var __noSuchMethod__ = *::* in <y><z/></y>) yield;");
tryItOut("{}let (function::constructor) { export *; }");
tryItOut("while((__count__ = false) && 0){return 0;let constructor = <><x><y/></x></>, __iterator__; }");
tryItOut("gc()\nif(new (<x><y/></x>.(<><x><y/></x></>))()) {const __count__, prototype = 0x99;yield <x/>; } else {with(this)continue L; }\n");
