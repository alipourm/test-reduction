tryItOut("let __noSuchMethod__; const __iterator__;");
tryItOut("this.zzz.zzz;");
tryItOut("while(( /* Comment */prop = <><x><y/></x></>) && 0)continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <><x><y/></x></>) yield;");
tryItOut("__proto__ = __count__;");
tryItOut("M:if(({ set __noSuchMethod__(constructor) { /*infloop*/for(const __iterator__; new constructor(); @foo.watch(\"__proto__\", <><x><y/></x></>\t)) return null; }  })) { if ((__proto__.__lookupSetter__(\"__noSuchMethod__\"))) {{}continue ; } else continue M;}");
tryItOut("/*for..in*/L:for(constructor = ({ prop: ({ constructor: __count__, ({__iterator__: * }): ({ prop: constructor }) }) }) = (eval(\";\",  /x/ ))((uneval(<x/>)), \r<><x><y/></x></>) in ('fafafa'.replace(/a/g, <bbb xmlns=\"undefined || <y><z/></y>\">yyy</bbb>))) if((<><x><y/></x></>.isPrototypeOf(<><x><y/></x></>))) ( /x/g ); else {gc() }");
tryItOut("/*for..in*/for(let [constructor, constructor] = this in eval(\" /x/ \", <x><y/></x>)) /*infloop*/for(__count__; (<x><y/></x>--); __count__.@*) __parent__ = <>prop = window</>;");
tryItOut("if(([11,12,13,14].map)) { if (export prop) {(<x><y/></x>);\nlet __proto__ = #3={a:#3#}, prop = undefined;\n }} else {throw *::*;/*for..in*/for(const __noSuchMethod__ = 1e4 in *) {gc()__iterator__, __count__ = [,]; } }");
tryItOut("if(<x><y/></x> -= undefined) ");
tryItOut("/*for..in*/for(var [__iterator__, constructor] =  \"\"  in <><x><y/></x></>) return *::*; const prop = __proto__['__parent__'];");
tryItOut(" goto ");
tryItOut("/*infloop*/while(('fafafa'.\treplace(/a/g, new Function))){{__noSuchMethod__, __count__;[,]; } }");
tryItOut("export prop;");
tryItOut("do {do function  __iterator__ () { yield <><x><y/></x></> }  while((*) && 0); } while((__parent__ || eval(\"#3={a:#3#}\", true)) && 0);");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ __iterator__: __iterator__, prop: constructor }) }) = 3/0 .@*:: -3/0; constructor = <x/>; (p={}, (p.z = <><x><y/></x></>.hasOwnProperty(\"constructor\"))())) {return 0.1; }");
tryItOut("break ;");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, prototype\r] = (({ function::__noSuchMethod__: __parent__ }) = <x><y/></x> if (*)) in @foo) {{}yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in window) {{}break ; }");
tryItOut("with(undefined(@foo, true))<><x><y/></x></>;");
tryItOut("/*infloop*/for(var prop;  \"\"  <= \t@foo; -(Number(<x/>))) {yield this;if(<><x><y/></x></>) //h\n{return <y><z/></y>;return @foo; } else  if (*) let __iterator__; }");
tryItOut("if(~ \"\"  == <><x><y/></x></>) switch((<x><y/></x>.({(this); }))) { case <><x><y/></x></> ^ <x/>: let  set __iterator__  ''  (__count__) { return  /x/  } ; }");
tryItOut("switch( /x/ ) { case <x><y/></x>: {(#3={a:#3#});throw this; } }");
tryItOut("false\ndo throw window; while((('fafafa'.replace(/a/g, Math.sin))) && 0);");
tryItOut("M:if(__iterator__ =  /x/ ) { if (try { export __proto__; } finally { null }  :: *) return -3/0; else {return; }}");
tryItOut("/*infloop*/for(prototype; __count__ =  /x/g ; (this)[__iterator__]) yield;");
tryItOut("/*infloop*/while(('fafafa'.replace(/a/g, function(y) { yield y; (prototype);; yield y; })));");
tryItOut("yield eval(\"eval(\\\"throw  \\\\\\\"\\\\\\\" ;\\\", (-0))\", __noSuchMethod__.prototype = *);");
tryItOut("{<><x><y/></x></>; }");
tryItOut("{if(<y><z/></y>) gc()let __iterator__, __parent__ = window; }\f");
tryItOut("{break ;yield; }");
tryItOut("M:if(<y><z/></y>) throw 033; else /*infloop*/L:for(*::*.__noSuchMethod__; ++({__proto__:  /x/ , prototype: *::* }); *::*.__defineSetter__(\"__proto__\", Math.pow)) {gc() }");
tryItOut("break ;");
tryItOut("yield\n");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("let prop, constructor =  /x/ \n");
tryItOut("if((this.__defineSetter__(\"prototype\", (<y><z/></y>).apply))[eval(\"yield function(id) { return id };\", __iterator__)]) {{}\nyield <><x><y/></x></>; }");
tryItOut("prop = __parent__ = <x/>, __iterator__;\n<x><y/></x>\n");
tryItOut("L: ;");
tryItOut("/*infloop*/for((prop = __proto__); (this); eval(\"(1.2e3);\", <><x><y/></x></>)) yield <><x><y/></x></>;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each([,,z1][5.0000000000000000000000]['__noSuchMethod__'] in (<x/>.__defineGetter__(\"constructor\", function(y) { yield y; break L;; yield y; }))) throw *::* .@x:: <x><y/></x>; }");
tryItOut("/*for..in*/L:for(const __count__ in ((eval)((this.__defineGetter__(\"__count__\", function(y) { yield y; export *;; yield y; })))))'haha'.split");
tryItOut("let ([, , [, , [], ({ __noSuchMethod__: [__proto__, ], __noSuchMethod__: ({ prop: __noSuchMethod__, __count__: __proto__ }) }), ], ({ __proto__: __parent__, ({ __iterator__: __noSuchMethod__, prop: __noSuchMethod__ }), prop: ({ prop: __noSuchMethod__, prop: ({ __parent__: constructor }) }) }), ] = (++new Iterator(, this).valueOf(\"number\")) .. ((prop = true ?  /x/ .__defineSetter__(\"constructor\", (\t '' ).__defineSetter__) : prototype = false).__lookupGetter__(\"prop\"))) { /*infloop*/M\f:do { } while((eval(\"<y><z/></y>;\", (window &= __parent__)))); }");
tryItOut("do {((({a1:1})).watch).applybreak ; } while((@foo.watch(\"__parent__\", undefined) :: constructor = @foo) && 0);\n__noSuchMethod__, __noSuchMethod__;\n");
tryItOut("/*infloop*/M:for(const __parent__; [[]]; (this.eval(<x><y/></x>)) >> window.throw(window)) /*infloop*/do {export prototype; } while(null);");
tryItOut("/*for..in*/M:for(const .__iterator__ in prop.( /x/ .__noSuchMethod__ = __proto__ = <x><y/></x>)) {continue L{constructor__parent__; } }");
tryItOut("{gc()M:if(RangeError( \"\" )) throw <x/>; }");
tryItOut("/*for..in*/for(let [__parent__, 5.0000000000000000000000] = <y><z/></y> in 3) switch([1e-81] ? *::* : prop = 1e-81) { default: do [1,2,3,4].slice while(((prop).call( \"\" , )) && 0);break; /*infloop*/for(let __parent__; (<>[]</>.__lookupGetter__(\"__iterator__\")); ({__parent__: <x><y/></x> })) {gc() }break;  }");
tryItOut("yield <x/>\n");
tryItOut("M:with({__count__: (uneval(false))})let (__count__ = undefined, constructor = <x/>) { throw false; }");
tryItOut("{throw [,,];__parent__ = __noSuchMethod__; }");
tryItOut("/*infloop*/for(this.__defineGetter__(\"constructor\", /a/gi); this.zzz.zzz; __iterator__ = __parent__) {(0/0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in eval(\"/*infloop*/for(const prototype;  /x/g ; <y><z/></y>) break ;\", <x><y/></x>)) break ;");
tryItOut("/*infloop*/do {M:if(__parent__ = constructor) ((new Function(\"let __count__ = <x><y/></x>;\"))).apply else {throw <><x><y/></x></>;export constructor; } } while(yield *::*);");
tryItOut("let (__noSuchMethod__ = <></>, __count__) { {const __parent__, __iterator__ = -3/0; } }");
tryItOut("this.zzz.zzz;");
tryItOut("{\tyield;return false; }{}");
tryItOut("yield (__iterator__ = function ([y]) { }).__lookupGetter__(\"__count__\");");
tryItOut("M:do { } while((RangeError([z1,,], <><x><y/\t></x></>)) && 0);");
tryItOut("/*infloop*/L:for(\fnew (((*.__count__)).watch)(); new (<><x><y/></x></>)(__proto__); [false for each (constructor in <y><z/></y>)]) /*infloop*/while((arguments .@ -1)){throw <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(let this in ((function (__noSuchMethod__) { return [,,] } )(-0))){@foo; }");
tryItOut("/*infloop*/M:do {throw true;const [1,2,3,4].slice =  '' , __proto__ = arguments; } while(*.__noSuchMethod__ =  /x/ );");
tryItOut("export prop;/*infloop*/for(({ constructor: [, , __noSuchMethod__], __noSuchMethod__: constructor }) = (++<><x><y/></x></>); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; let (prop) ({})) {if(<y><z/></y>) export *; else  if ([[]]) * else {return; } }");
tryItOut("M:if((--({__proto__ setter: (new Function(\"export *;\")), __parent__: 5.0000000000000000000000 }))) { if ((yield (undefined.isPrototypeOf(<> switch </>)))) } else with((-1))throw @foo;");
tryItOut("/*for..in*/for(let constructor in ((new Function)(window)))continue ;");
tryItOut("L:with([__iterator__, , , prototype, ] = ({ __proto__: __parent__ })((delete __count__.__defineGetter__(\"__proto__\", new Function)), false & <x><y/></x>))let (__noSuchMethod__) { return; }");
tryItOut("return;");
tryItOut("switch(( /* Comment */this.__defineGetter__(\"__parent__\", function  false (constructor, __iterator__)<><x><y/></x></>))) { \tdefault: break; case (constructor = new (uneval(<x><y/></x> = new (<x><y/></x>)(<x/>)))()): let(({ constructor: prop, each: __parent__ }), constructor = 0/0) { let(prototype, __count__) { break L;case 4: break;  }");
tryItOut("/*for..in*/M:for(var prop.__noSuchMethod__ in ((undefined for each (__parent__ in false)))) {([,]); }");
tryItOut("yield");
tryItOut("let (prototype) { return <><x><y/></x></>; }");
tryItOut("M:while(((eval(\"(.__defineSetter__(\\\"prop\\\", [1,2,3,4].map))\", (1e4.prop = <x><y/></x>)))) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <x><y/></x>) return;");
tryItOut("L:with({function::prototype: <xxx>{__count__}</xxx>.(prototype.prototype = (-1))})continue ;");
tryItOut("{if([[]]) { if (<><x><y/></x></>)  else <x/>}while((this.__defineSetter__(\"__count__\", Math.sin) > ++<><x><y/></x></>) && 0){return; } }");
tryItOut("/*infloop*/for(<bbb xmlns=\"3[__iterator__]()\"></bbb>yyy; ([yield __proto__.watch(\"function::prototype\", *::*) for each (__iterator__ in <x><y/></x>) for ((__iterator__) in (-1)) for each (__parent__ in <x><y/></x>)]); (@foo)) let ({ __count__: ({ constructor: __iterator__ }) });");
tryItOut("var <x><y/></x>, __proto__;");
tryItOut("with({}) return <><x><y/></x></>");
tryItOut("{with({__parent__: this})return *::* }");
tryItOut("/*for..in*/for(const __proto__ = __parent__ = <x><y/></x> in [1]) {}\nyield;");
tryItOut("{if(prop) { if ( /x/ ) export __proto__;} else {({}).__lookupGetter__continue L; } }");
tryItOut("if((delete __parent__.__parent__)) {return; } else {;export *; }");
tryItOut("try { yield; } finally { let __proto__, __count__ = constructor; } ");
tryItOut("L: {{let prototype = undefined\nyield 3;{break L; } } }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __parent__] = undefined in __proto__/*\n*/) export *;if(false) { if () gc() else { }}");
tryItOut(";;");
tryItOut("if(1e4.constructor = *::*) constructor = this, constructor; else {gc()continue ; }");
tryItOut("with({}) { yield; } ");
tryItOut("/*for..in*/L:for(var __iterator__ = new ()(__count__) === \n@foo in ({ constructor: <x><y/></x> }) = <x><y/></x>) {let(constructor, __iterator__) { return ({a2:z2}); }");
tryItOut("{let __parent__ = true, prop = this;//h\n } const prop;");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, prop] =  in [[]].prop.@foo) {(window);const __proto__, const __parent__;; }");
tryItOut("L:if(<><zzz>__iterator__.(({prototype setter: 'haha'.split, __noSuchMethod__: constructor }))</zzz></>) { if (this.__defineGetter__(\"__count__\", 'haha'.split) != 0.1.__defineSetter__(\"__iterator__\", this) == ({undefined: __count__ = <x><y/></x> })) /*for..in*/for(const [__parent__, prototype] = ({__proto__: \n /x/ }) in ( '' )) let __iterator__ = *::*;} else {prop = <><x><y/></x></>, __proto__ = <><x><y/></x></>\n }");
tryItOut("/*infloop*/for(<x/>; __proto__; null) export __parent__;");
tryItOut("var __parent__ = undefined; const constructor;");
tryItOut("/*infloop*/for(let __count__; <><x><y/></x></>.hasOwnProperty(\"__parent__\"); \r[11,12,13,14].filter) {yield; }");
tryItOut("if(((this.zzz.zzz).__defineGetter__(\"__proto__\", ({}).__lookupGetter__))) let prototype = __noSuchMethod__ = *::*; else {/*for..in*/for(var [__parent__, prop] = ({a2:z2}) in <x><y/></x>) {yield function(id) { return id };return *; } }");
tryItOut("with({__count__: prop.(*::*)})continue M;");
tryItOut("/*infloop*/do  while(<><x><y/></x></>.eval(__parent__) ^= (<y><z/></y> * <><x><y/></x></>));");
tryItOut("let (__proto__ = eval(\"gc\",  /x/g )) {  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (uneval(#3={a:#3#})) * <y><z/></y>.@* in [prototype] = new Date(__noSuchMethod__, #1=[#1#]) === #1=3/0()) /*for..in*/L:for(prototype in  '' ) return window;");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/for(let __iterator__; (<y><z/></y>.@*); (function  constructor (constructor, __proto__) { return __proto__ } ).call(undefined, ) .@ ((p={}, (p.z = constructor)()))) while((<><x><y/></x></>) && 0){(let (__count__, __parent__) *::*)(<x><y/></x>.(<><x><y/></x></>))yield  /x/ ; }");
tryItOut("do (<x><y/></x>); while((var __parent__) && 0);");
tryItOut("/*for..in*/M:for(prototype in (((((__iterator__ = 1e81)((new (function  __proto__ (__iterator__)export *;)(window, false).__defineGetter__(\"prototype\", function  constructor () { yield this } )), (<x><y/></x> *= <y><z/></y>) ? *::* + *::* : __noSuchMethod__.__noSuchMethod__))).watch)(1e-81.@foo)))let , constructor =  /x/ ;");
tryItOut("if(<x><y/></x>.__count__) <employee id=\"1\"><name>Joe</name><age>20</age></employee> else  if (<xxx {__count__}={<y><z/></y>} />) throw  /x/ ; else gc()");
tryItOut("{}\nwindow;");
tryItOut("/*for..in*/for(const prop = window.valueOf(\"number\") %= case 9: throw null;__proto__ =  /x/ , __proto__\n__noSuchMethod__ = <><x><y/></x></>;break; .eval(__count__.__iterator__) in \n@foo) {var prototype, __parent__ = @foo;{return <x><y/></x>; } }");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = __proto__ in 5.0000000000000000000000) { }\n /x/g ;");
tryItOut("with({__parent__: (((__proto__.constructor = function ([y]) { }) for (__parent__ in [1])))[__noSuchMethod__ == <><x><y/></x></>]});");
tryItOut("switch((null .@ true)) { case ((({__parent__ getter: function  prop (prototype) ''  })).__lookupGetter__(\"__noSuchMethod__\")): default: break; /*for..in*/for(let [constructor, __parent__] = (prototype%=prop) in 3) const get;break;  }");
tryItOut("let(__parent__ = null, __noSuchMethod__) ((function(){__proto__.__iterator__ = prop;})());");
tryItOut("/*infloop*/do {throw <x><y/></x>; } while(window);");
tryItOut("L: {\rif(*) yield <x><y/></x>; }");
tryItOut("with(([] = gc())){/*for..in*//* nogeckoex bug 349964 */ for  each(let ({__noSuchMethod__: window}) in (new new constructor()())) {yield; } }");
tryItOut("if(false) {} else  if (<x><y/></x>) {let __count__, __parent__ =  \"\" ; } else {}");
tryItOut("L: export *;");
tryItOut("M:if((new Function(\"export *;\"))() & <x><y/></x>.__lookupSetter__(\"__count__\")) {gc()yield; } else  if (((p={}, (p.z =  \"\" )()))) L:if(prototype) { if (-1.@*) return; else {return  /x/g ;yield *::*; }}");
tryItOut("/*infloop*/for(prop; ([z1] != #3={a:#3#}++); ((([,,z1]).watch)( /x/ )).__lookupSetter__(\"constructor\")) (<><x><y/></x></>);");
tryItOut("/*for..in*/for(const [({ __iterator__: __noSuchMethod__ }), , ({ constructor: ({ __proto__: prototype, prototype: ({ prop: ({ prop: __iterator__, __iterator__: prop, __count__ }), constructor: __iterator__ }) }) }), __noSuchMethod__, ] in ((Math.pow)( /* Comment */<xxx>{yield}</xxx>))){/*for..in*//* nogeckoex bug 349964 */ for  each(eval(\"3.141592653589793\", @foo)['__parent__'] in ({a1:1}).valueOf(\"number\")) {{} }return new Error(function ([y]) { }, 033); }");
tryItOut("/*for..in*/for(let [prop, prop] = * in 1e-81 in 1e4) {yield;gc() }");
tryItOut("do (null); while(((this.zzz.zzz)) && 0);");
tryItOut("while((<x><y/></x>) && 0)yield;");
tryItOut("do if() yield prototype; else  if (window) *; else @foo; while((new RegExp(*)) && 0);");
tryItOut("{__iterator__, <x><y/></x>; }");
tryItOut("__iterator__.__parent__ = constructor;");
tryItOut("case 8: {var prop = #1=[#1#], __noSuchMethod__ = -0;__proto__ = <><x><y/></x></>, __parent__ = __proto__; }break; with({__count__/*: ");
tryItOut("/*infloop*/for(+null; new <><x><y/></x></>(); (0.1.eval(<x><y/></x>))) {(<x><y/></x>); }");
tryItOut("/*for..in*/for(let (([15,16,17,18].sort([1,2,3,4].slice, (__iterator__ = *::*))))( /x/g ) in <employee id=\"1\"><name>Joe</name><age>20</age></employee>) /*for..in*/for(let <x><y/></x> in <x><y/></x>) return <y><z/></y>;");
tryItOut("if((new function (__parent__) { return ({<x><y/></x>: null }) } ())) { if ((prototype = getter)) {( '' ); }} else {; }");
tryItOut("L:if(({constructor: window.prop,  get prop(__noSuchMethod__) { yield <x><y/></x>.valueOf(\"number\").__parent__ }  })) {/*infloop*/for(((p={}, (p.z = <x/>)())); new String(); 'fafafa'.replace(/a/g, 5.0000000000000000000000)) <x><y/></x>;if(this.__defineSetter__(\"prototype\", Function)) { if (__noSuchMethod__.(<><x><y/></x></>)) const prop = window, __iterator__ = prototype;} else (<><x><y/></x></>); }");
tryItOut("let(__proto__, ({ __parent__: ({ __count__: __iterator__ }) }) = prop = 0.1) ((function(){for(let y in []);})());");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] = (eval)() in true) {export *;window; }");
tryItOut("if(arguments) { if ([[1]]) yield;} else var __count__ = <x><y/></x>, __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in ++__iterator__) {{[1,2,3,4].map } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in eval(\"(__proto__.eval(__iterator__.constructor))\", (new this(null, this)).__defineGetter__(\"prop\", prototype))) {let(__noSuchMethod__) ((function(){{}})()); }");
tryItOut("if(([1,2,3,4].slice)(*::*, window) / <{__count__}> </{__count__}>)  else __proto__ = undefined;\f const prototype\n");
tryItOut("(prototype =  \"\" )['__iterator__']");
tryItOut("this.zzz.zzz;");
tryItOut("do let __proto__ = *, __proto__; while(((<><x><y/></x></>.(<x/>.*))) && 0);");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = <y><z/></y> in  catch ) {{} }");
tryItOut("while((null) && 0)let __proto__ = ({}), __proto__ = <x><y/></x>;");
tryItOut("/*for..in*/for(let [[]]['constructor'] in ((function(y) { yield y; if(this) {gc() }; yield y; })(<y><z/></y>.hasOwnProperty(\"__noSuchMethod__\"))))yield null;");
tryItOut("throw StopIteration;");
tryItOut("if(__proto__ = constructor setter: function (__parent__) { yield prototype } \f) { if (this.__defineSetter__(\"__parent__\", function(y) { yield y; constructor, prop = undefined;; yield y; })) {{}{} }} else {break M;; }");
tryItOut("constructor = constructor;");
tryItOut("prototype getter: function  __proto__ (__iterator__) { return (constructor = this ^ 3/0) <= prop.(\t<x/> for each (__count__ in <x><y/></x>)) }  const __iterator__;");
tryItOut("{export *;prop(([1].__defineGetter__(\"__iterator__\", ({a2:z2})))) = __noSuchMethod__; }");
tryItOut("return (\nprop = -3/0);");
tryItOut("export __iterator__\nconst __iterator__ = prototype;");
tryItOut("__proto__");
tryItOut("return;\nreturn this;\n");
tryItOut("/*for..in*/for(__proto__ in ((function ()<x><y/></x>)([[]])))( \"\" );");
tryItOut("let ([, ({ __noSuchMethod__: [, constructor, , constructor, __iterator__], __iterator__: __noSuchMethod__ }), , ] = __noSuchMethod__ .@*:: this.__defineGetter__(\"__count__\", Function)) { if(__iterator__ = __noSuchMethod__) return  \"\" ; else  if (this.zzz.zzz) {return undefined;return true; } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:for(const ({ prototype: this.zzz.zzz.__proto__ }) = 'fafafa'.replace(/a/g, 'haha'.split); \neval(\" /x/ \", this); ({ set __proto__(__count__, prop) { return prototype.(<><x><y/></x></>) } , __noSuchMethod__ getter: function  __count__ () /x/g  })) with((return)){/*infloop*/M:do {export *; } while(*::*); }");
tryItOut("let(__count__ =  \"\"  &= (yield)) ((function(){this.zzz.zzz;})());");
tryItOut("/*infloop*/L:for(__noSuchMethod__ = Error( '' .yoyo(4.)) <= (new Function)(<><x><y/></\fx></>); ((Function).call(<><x><y/></x></>, ))(); <y><z/></y>) if(__noSuchMethod__) { if (prototype) {yield; }} else {break L; }");
tryItOut("/*for..in*/for(var __parent__ = (<y><z/></y> ? this : -3/0) in __count__) {yield\nyield <y><z/></y>; }");
tryItOut("M:do {let constructor, prototype; } while((*::*) && 0);");
tryItOut("switch( /x/ ) { default: break ;case *: export constructor; }\ntry { gc() } catch( if (-0)) { return constructor; } ");
tryItOut("/*for..in*/for([__parent__, __proto__] = (<><x><y/></x></>)(true) in 3) {export *; }");
tryItOut("return  /* Comment */this;");
tryItOut("yield\n\t");
tryItOut("if(__proto__ = __proto__ >>= (({ __proto__: ({ __noSuchMethod__: __proto__, __proto__: __noSuchMethod__ }) }) = #2=[11,12,13,14].some)) {; } else  if (*::*) {yield prototype\n }");
tryItOut("\n");
tryItOut("L:with((Function).call((1e4 if (this)), )){(@foo);(<><x><y/></x></>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__noSuchMethod__ in ([(yield window) for (__iterator__( /x/ ) in \t /x/g ) for each (__noSuchMethod__ in *) for (__count__ in  '' ) set __count__(__noSuchMethod__) { yield  ''  } ])) ;");
tryItOut("{(0/0);/*infloop*/M:do  while(<bbb xmlns=\"<><x><y/></x></>\"></bbb>); }");
tryItOut("/*infloop*/for((__parent__ = __iterator__); (( if )()); eval(\"__count__ = <><x><y/></x></>\",  /x/g .constructor+=[ /x/g ])) return 1.3;");
tryItOut("if( '' ) { if (<x><y/></x>.(*::*)) return  /x/ ;} else __parent__ = [[]], __iterator__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in  \"\" ) gc()");
tryItOut("with({}) { __count__ = __noSuchMethod__; } \n");
tryItOut("return;");
tryItOut("/*for..in*/L:for(var __proto__ in <y><z/></y>) {M:if(<y><z/></y>) {gc() } else  if (<y><z/></y>) return; else {(null); } }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("if(new *(this)) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in  /x/ ) (undefined);if(window) yield; }");
tryItOut("/*for..in*/for(let [prop, __iterator__] = true /= 0 in prop) {export prototype;export *; }");
tryItOut("");
tryItOut("/*for..in*/for(let __count__ in ((Function)(function::__proto__.({}))))gc()");
tryItOut("throw __iterator__;");
tryItOut("\tL:with(new <>yyy</>(('fafafa'\t.replace(/a/g, (<x><y/></x>).watch)), (export __iterator__))){if((uneval(-1))) (<y><z/></y>).__defineSetter__ else {return undefined;gc() } }");
tryItOut("/*\n*/M:if(<x><y/></x> * *) { if (undefined) {}} else ; const __iterator__;");
tryItOut("if(eval(\"yield;\", this.__defineSetter__(\"__count__\", ( { throw <x><y/></x>; } ).watch))) { if (__count__ = this <<= (<><x><y/></x></> ? 3.141592653589793 : this if (window))) {if(<><x><y/></x></>) {export *;let constructor = @foo, __iterator__ =  '' ; } else {}continue L; } else {{}continue M; }}");
tryItOut("{export prop;const __proto__; }");
tryItOut("({a1:1});");
tryItOut("if(*::* -= <><x><y\t/></x></>) {yield window; } else {yield;break ; }");
tryItOut("/*infloop*/for\t(({prototype: ([<y><z/></y> .@x:: <x><y/></x> for each (function::constructor in <x><y/></x>) for (__noSuchMethod__ in 0/0) for each (__proto__ in <x><y/></x>)] ? ((uneval(<><x><y/></x></>))) : window) }); new <x><y/></x> + (this.__defineGetter__(\"function::prototype\", function (__proto__) { __iterator__ } ))(<x/>, ({}.__parent__ = <><x><y/></x></>)); ) with((eval(\"(new (this.__defineGetter__(\\\"function::__count__\\\", gc), new [\\f*::* if (<><x><y/></x></>)](, *::*)))\", (({prototype: @foo }))))){( /x/g  , @foo), ({}) }");
tryItOut("throw StopIteration;");
tryItOut("if(*::*.throw((* > <x><y/></x>))) return;");
tryItOut("{/*infloop*/M:while(__parent__ = __parent__){; }/*for..in*/for(let \n__count__ = #1#['prototype'] in (yield  /x/g )) ; }");
tryItOut("/*infloop*/for(const constructor = (prototype.__proto__ = __count__ =  /x/ , __iterator__ = undefined) ? __count__ : *\n; __count__.__proto__; (new Math.sin())) {/*infloop*/for((<x><y/></x>.hasOwnProperty(\"__iterator__\")); <x><y/></x>; this.__defineSetter__(\"__proto__\", (1 for (x in [])))) {__iterator__;yield 0/0; }\nconstructorlet prototype, __iterator__; } const prop;");
tryItOut("/*infloop*/for(<x/>; (new {}(*)); (<x/>.__noSuchMethod__) > yield <x><y/></x>) export constructor;");
tryItOut("{}");
tryItOut("/*infloop*/for([[1]]; *; <><x><y/></x></>) {gc }");
tryItOut("throw StopIteration;");
tryItOut("L: {}");
tryItOut("/*infloop*/for(__iterator__ = *;  '' ; __noSuchMethod__) {return;return <y><z/></y>; }");
tryItOut("return;");
tryItOut("if(true.propertyIsEnumerable(\"__parent__\")) if((-0)) yield -0; else  if (this) var constructor = [1,,], __count__; else const __parent__ = __noSuchMethod__, __parent__ = this;");
tryItOut("prop = __noSuchMethod__;");
tryItOut("while((this.__defineSetter__(\"__parent__\", function  __noSuchMethod__ (__noSuchMethod__) { \fyield this; } )) && 0){}//h\n");
