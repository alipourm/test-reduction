tryItOut("/*for..in*/M:for(let prototype in <y><z/></y>.__count__) {let prototype = arguments;/*infloop*/for(prop; ({a2:z2}); [,]) { set prop() { yield <><x><y/></x>\n</> %= <x><y/></x> } yield; } }");
tryItOut("if(([<><x><y/></x></>])) yield\n");
tryItOut("/*infloop*/for(new <><x><y/></x></>( \"\" , 1e81); (<><x><y/></x></> =  \"\" .isPrototypeOf(({__parent__ setter: function (prototype, prototype) { yield *::* }  }))); __iterator__ = ({__count__: (uneval(*)) }) >> __iterator__.prop = yield [1].__defineSetter__(\"__proto__\",  /x/ )) {(<x/>);do {export *; } while((<>yyy</>.((<><x><y/></x></>.@foo))) && 0); }");
tryItOut("/*for..in*/for(var [] in this) {/*for..in*/for(__proto__ in true) <><x><y/></x></>; }");
tryItOut("if(<><x><y/></x></>) throw __noSuchMethod__; else  if (true) {throw <y><z/></y>;[1]; } else { }");
tryItOut("M:if( /x/ ) yield;");
tryItOut("this.zzz.zzz;");
tryItOut("do {} while(( /* Comment */#1=yyy[this]) && 0);");
tryItOut("yield eval(\"<x><y/></x>\",  /x/g );");
tryItOut("/*for..in*/M:for(const prop = ( /* Comment */<><x><y/></x></>) in function(id) { return id }) {throw 0.1;(*::*); }");
tryItOut("while((({prototype: <x><y/></x>, __count__ })) && 0)M:while((function ([y]) { }) && 0){yield; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var  { return ((p={}, (p.z = __iterator__.([,,z1]))())) } .__iterator__ in __count__ = __count__) /*infloop*/while(@foo)throw (-1)");
tryItOut("return;\nundefined\n");
tryItOut("do (<x/>); while((({})) && 0); const __noSuchMethod__;");
tryItOut("/*infloop*/while((eval(\"*::*\", <><x><y/></x></>)) - prototype = prop =  '' )continue ;");
tryItOut("yield\n\fM:with({constructor: [,]})__count__ = true, prototype;");
tryItOut("with((uneval(<bbb xmlns:ccc=\"({prop: <y><z/></y>})\"><ccc:eee></ccc:eee></bbb>))){/*infloop*/for(var [, prop] = [__noSuchMethod__, , , , ] = ((__iterator__)() for each (__count__ in <><x><y/></x></>) for (@ = true, __count__ in __iterator__)); ([__parent__ = <><x><y/></x></>.__lookupSetter__(\"__parent__\")].map(gc).throw(0x99) <<= (prototype = undefined).__lookupSetter__(\"__count__\")); (({__noSuchMethod__: -3/0}))\n) {yield undefined;return <><x><y/></x></>.@*; } }");
tryItOut("let __proto__ = <x>//h\n<y/></x>\n(5.0000000000000000000000).watch");
tryItOut("do /*for..in*/for(const __proto__ in this) {break M; } while((()) && 0);");
tryItOut("with(function(id) { return id } ? undefined : undefined){L: {const __parent__, __count__ =  '' ;/*for..in*/L:for([constructor, __noSuchMethod__] = [1,,] in  /x/g ) {let __parent__, __noSuchMethod__; } } }");
tryItOut("/*infloop*/do L: {export __proto__; } while(new #1=[#1#]( '' ) ^ 1e81);");
tryItOut("/*infloop*/for((*::* - 5.0000000000000000000000); ();  { yield (([(@foo - <y><z/></y>.__defineSetter__(\"prop\", new Function)\n)\t for (constructor in new Function())]).__lookupGetter__(\"__parent__\")) } ) {throw constructor;\n/*infloop*/while(<><x><y/><\n/x></>){export *; }\n }");
tryItOut("with({__count__: ((new Function(\"let constructor, __count__;\"))())})export *");
tryItOut("if(<x/>) yield; else const prop = __noSuchMethod__;");
tryItOut("if(window += *::*) { if ([15,16,17,18].sort(function(q) { return q; }, <><x><y/></x></> ? <x><y/></x> : 3.141592653589793)) export __count__; else {return; }}");
tryItOut("M:with({__parent__: \n<x><y/></x>.watch(\"prop\", Function)}){/*infloop*/do {export *;yield <><x><y/></x></>; } while((<><x><y/></x></>\n).__defineGetter__(\"prop\", <><x><y/></x></>));if(@foo !== <x><y/></x>) { if ((<x/>.eval([,,z1]))) throw undefined;} else ; }");
tryItOut("{{}return; }");
tryItOut("/*for..in*/M:for(let \fprop in (([1,2,3,4].slice)([15,16,17,18].sort(eval, <x/>)))){\tfunction  __noSuchMethod__ (prop, __noSuchMethod__) { {} } yield; }");
tryItOut("/*for..in*/for(var [prototype, prototype] = this.zzz.zzz in __parent__.constructor) {/*for..in*/for([__iterator__, prop] = [false] in <x/>) {return;{} } }");
tryItOut("gc()");
tryItOut("let (?) { /*infloop*/M:do {let function::prop; } while(true); }");
tryItOut("if(\f(*::*(null)).__lookupSetter__(\"each\")) {; }");
tryItOut("/*for..in*/for(let __count__ = prop.__count__ = -1 ? [15,16,17,18].map(Math.pow,  /x/g ) : * in this) {gc() }");
tryItOut("with({__count__: [15,16,17,18].sort((1 for (x in [])), <><x><y/></x></>.constructor = __noSuchMethod__())}){@foo.(undefined) }");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g,  '' ); 0x99; (<><x><y/></x></> << window)) yield <><x><y/></x></>;");
tryItOut("switch(\flet (prop) 0.1) { default: break;  }");
tryItOut("return  '' ;");
tryItOut("/*for..in*/for([__parent__, __parent__] = (false.eval(window)[__iterator__ = constructor]) in __iterator__.__lookupGetter__(\"__iterator__\")) { }");
tryItOut("/*infloop*/for((({a2:z2}).@*.watch(\"__noSuchMethod__\", ({}).__lookupGetter__)); prop = window; \n({__noSuchMethod__ = @foo, __iterator__ })) for(let y in []);");
tryItOut("if(<x><y/></x>.(3.141592653589793)) { if (<><><y><z/></y></></>) export __proto__; else L:if( '' ) prop =  \"\" , __proto__ = <x><y/></x>; else  if (<x><y/></x>) {throw [z1,,]; }}");
tryItOut("var prop");
tryItOut("{{} }");
tryItOut("/*for..in*/M:for(let __proto__ = ( '' ).__lookupGetter__(\"prop\") in <x/> / [1]) {var __noSuchMethod__ = @foo;break ; }");
tryItOut("/*for..in*/for((prop) in ((throw <><x><y/></x></>).*)) {for(let y in []); }");
tryItOut("{continue M;(@foo[this]); }");
tryItOut("( /x/g \t)\ngc()");
tryItOut("/*infloop*/for([, constructor] = [].unwatch(\"__noSuchMethod__\"); \f<bbb xmlns=\"<><x><y/></x></>\"><><ccc:ddd><!--yy--></ccc:ddd></>yyy</bbb>.(eval(\"const constructor = null, __count__;\",  '' )); (#1#).call(<><x><y/></x></>, this.__defineGetter__(\"constructor\", *),  /x/ )) M:if(Iterator(<><x><y/></x></>, 3.141592653589793)) __count__ else  if (constructor = null) __proto__ = @foo;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var ({ prototype: __noSuchMethod__ }) = (__parent__.throw(-3/0) % __parent__ ? window : this), [__count__ if (constructor)] = each = (__iterator__ = undefined) in __iterator__ = 1e4 |= yield <y><z/></y>.valueOf(\"number\")) {gc(){} }");
tryItOut("return; const __iterator__;");
tryItOut("yield\n");
tryItOut("");
tryItOut("if(<x><y/></x>) continue ; else  if (( /x/g .throw( /x/ ))) prop");
tryItOut("let(({ prototype: __proto__ }) = __count__ = this.__proto__) { with({}) for(let y in []);");
tryItOut("if(*) export *; else  if ( /x/ ) yield; else break ;");
tryItOut("/*infloop*/do {prop = <x><y/></x>__iterator__ } while(((this.__defineSetter__(\"__parent__\", Function))[__count__+=window]));");
tryItOut("window.eval( /x/ )");
tryItOut("switch(void <><x><y/></x></>) { case 8: case ((new Function(\"(*).__defineSetter__\"))(case 9:  = __parent__, 3.141592653589793)): case 2: ;break; default: break; \n }");
tryItOut("{/*for..in*/L:for(let prop in 1.3) /*for..in*/for(let __count__ in <x><y/></x>) {break L; } }");
tryItOut("for(let y in []);");
tryItOut("if(<><x><y/></x></>) function(y) { yield y; return;; yield y; }");
tryItOut("let(gc().__proto__ = (new <y><z/></y>((String(*, window)), <><x><y/></x></>))) { let(/*infloop*/for(*::*;  /* Comment */new function  const prop = #1=[#1#]; () { ( /x/g ); } (); eval(\"[[]]\", ({__iterator__:  '' }))) {yield; }, constructor) { with({}) { with({}) for(let y in [5,6,7,8]) let(__count__ =  '' ) ((function(){throw this;})()); } ");
tryItOut("do gc\n while((this.zzz.zzz.propertyIsEnumerable(\"prop\")) && 0);");
tryItOut("do M:if(__noSuchMethod__ =  /x/g ) {(window);function  prototype ()[[]] } else  if ((({constructor: ~__parent__,  get constructor(__noSuchMethod__, __parent__) { yield ({__parent__: <><x><y/></x></>}) }  }))) {yield; } else {;; } while((<>((((new Function(\"(new Function).apply\"))).apply).apply).call({<x><y/></x>; }((({ set __iterator__ __count__ (__proto__, __parent__) { return prototype } ,  set __parent__ __proto__ ()<x><y/></x> })), @foo), (<x><y/></x>.__proto__), ( /* Comment */*))</>) && 0);");
tryItOut("yield ({ __proto__: __proto__ }) = (<x/> if (1.3))\n");
tryItOut("/*for..in*/L:for(var prop in ((Math.sin)(<><x><y/></x></>)))let prototype, __noSuchMethod__ = prop;");
tryItOut("return; const __noSuchMethod__");
tryItOut("yield; const constructor;");
tryItOut("L:while(( /x/ ) && 0)return;");
tryItOut("if(<y><z/></y>) { if ((yield 1e-81)) {evalif(1.2e3) {;; } else  if ( '' ) {gc() } else  }} else /*infloop*/for(var __proto__; <x>/>'</x>; <y><z/></y>) }");
tryItOut("with({__proto__: ((<x><y/></x>).watch).call(<y><z/></y>, <x/>, *::*)})/*for..in*/for(\tvar __parent__(*::*) in false) ");
tryItOut("let __noSuchMethod__;");
tryItOut("/*infloop*/for(<><x><y/></x></>; ({__proto__: <x><y/></x> });  /x/ .propertyIsEnumerable(\"prototype\")) \f{yield; }");
tryItOut("do {L:if(null) {} else {gc()throw false; } } while((({__noSuchMethod__: *::* }).eval( /x/g .hasOwnProperty(\"__proto__\"))) && 0);");
tryItOut("__proto__ = function::prototype;");
tryItOut("do __parent__; while((__parent__ = <x><y/></x>) && 0);");
tryItOut("let (__proto__ = 1e4 >= null) { const __iterator__; }");
tryItOut("gc()");
tryItOut("/*infloop*/for(const for(let y in [5,6,7,8]) let(prop, prop = *::*) ((function(){with({}) let __count__ = @foo, constructor;})()); = (null || <\tx><y/></x>) >>= __proto__; <><bbb xmlns=\"(this * window)\"> </bbb></>;  /* Comment */\t<y><z/></y>.propertyIsEnumerable(\"__iterator__\")) {/*infloop*/L:for(var ({ __proto__: constructor, __parent__: __proto__ }) = [11,12,13,14].filter; undefined.__lookupGetter__(\"__noSuchMethod__\"); this.zzz.zzz)  }");
tryItOut("/*infloop*/L:for(const __iterator__ = window; 0; <><x><y/></x></>) [,,];");
tryItOut("3.141592653589793\n(<x><y/></x>);");
tryItOut("if(new ((<x><y/></x>.(constructor).isPrototypeOf(new ([1,2,3,4].map)()))).watch(({x::__count__: <><x><y/></x></>}).yoyo(__parent__.constructor), (new Function)(0.1, __noSuchMethod__))) {(<><x><y/></x></>); } else  if (<><ccc:ddd> </ccc:ddd></> != <x><y/></x>) /*infloop*/for(__iterator__ = <y><z/></y>; prototype; <x/>) {([z1,,]); } else export *;");
tryItOut("if(__iterator__) {export *;let __proto__; } else  if (<><x><y/></x></>) (1 for (x in [])) else {__proto__yield; }");
tryItOut("switch(function(id) { return id } .. 0/0.@*) { default:  }");
tryItOut("/*infloop*/for(__proto__; 1e81\n; ([] = [,,z1])) let(prop = window, __count__) { var prop;");
tryItOut("if(((\n((<><x><y/></x></>)( /x/ , null)\n))((this -= prototype & (false[<x/>.hasOwnProperty(\"prototype\")])), ({prototype: <x><y/></x> }) % <><x><y/></x></>.__lookupSetter__(\"prototype\")))) L: export prop; else  if (this.__defineGetter__(\"prototype\", new Function) >>= ([,] .@*:: [z1,,].yoyo(new (<x/>)(<x><y/></x>)))) {<><x><y/></x></> += #1#; }");
tryItOut("yield prop = __proto__ <<= __count__.unwatch(\"__proto__\");");
tryItOut("return (({ __count__: ({ __iterator__: prototype }) }) = ([(gc())]));");
tryItOut("if(<><x><y/></x></>) {return __noSuchMethod__;gc() } else  if (constructor) {return 3/0; } else const <><x><y/></x></> =  \"\" ;");
tryItOut("let(__proto__ = #1=[#1#]) { let(__parent__ = yield) ((function(){__iterator__ = __noSuchMethod__;})());");
tryItOut("throw <><x><y/></x></>;");
tryItOut("if((this)()) {return [,,];/*infloop*/M:for(//h\n({ __parent__: prototype, __proto__: __iterator__ }) = __parent__; @foo.__lookupGetter__(\"__parent__\"); .2.throw(<x><y/></x>)) prop } else  if (this.__defineSetter__(\"__count__\", function  __noSuchMethod__ () { return true } )) {export constructor; }");
tryItOut("L:if((__parent__ = null) % (<y><z/></y> ? [1,,] : this)) /*infloop*/while(__count__ = (eval(\"\", [z1,,]))) else  if ([z1,,].__parent__|=({__proto__: null}).watch(\"__parent__\", (<><x><y/></x></>).__defineSetter__)) yield; else {if(([15,16,17,18].map([1,2,3,4].map, <><x><y/></x></>)))  else  if (constructor) break ; else return false;var prototype, __noSuchMethod__ = null; }");
tryItOut("/*infloop*/(:)for(const __noSuchMethod__; ( /x/  & <><x><y/></x></>); constructor = null) {gc()const __iterator__ = <x><y/></x>, __proto__ = <x><y/></x>; }");
tryItOut("/*infloop*/while(this == 1e+81){export __count__;export __count__; }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __count__.__parent__ in  '' ) if([15,16,17,18].map(eval, undefined)) {(undefined); } else  if (prototype = <x><y/></x>) throw <y><z/></y>;\nyield;\n");
tryItOut("with({__iterator__: <xxx>{__count__}</xxx>}){; }");
tryItOut("do  while((<y><z/></y>) && 0)");
tryItOut("for(let y in []);");
tryItOut("let(__proto__ = <x/>.@foo, ({ __count__: __iterator__ }) = <x><y/></x> ? __noSuchMethod__ : (-1)) ((function(){with({}) return ({ get __parent__ prop () { return <><x><y/></x></> }  });})());");
tryItOut("/*for..in*/for(var __iterator__ in <x/>) {(<x><y/></x>); }");
tryItOut("/*for..in*/L:for(var constructor = ([1,,]--) in \f '' .hasOwnProperty(\"prototype\")) {with(( { false; }  for each (__noSuchMethod__ in *) for each (__proto__ in  \"\" ) for each (function::__iterator__ in [1,,])))yield this;let __iterator__, prototype = <y><z/></y>; }");
tryItOut("if( /x/ ) {with({__count__: -0}){{}continue L; }if(\r<><x><y/></x></>) { if ((-0)) export *;} else {let prototype; new Function  } }");
tryItOut("if([15,16,17,18].some((<><x><y/></x></>).__defineSetter__, <x><y/></x>) == ~delete 1e-81) { if ('fafafa'.replace(/a/g//h\n, 'haha'.split) >>>=true) {L:if((-1)) const constructor =  /x/ , __noSuchMethod__ =  /x/g ; else  if ([,,]) {;gc() } } else {/*for..in*/for(let constructor = <x><y/></x> in -0) yield;/*for..in*/for(const prop in \f<x><y/></x>) __count__ = null; }}");
tryItOut("/*infloop*/for((undefined.__iterator__); (p={}, (p.z = __proto__)()); 0/0.__defineSetter__(\"prop\", <><x><y/></x></>)) let constructor;");
tryItOut("prototype = __parent__;");
tryItOut("with((__proto__.__noSuchMethod__ getter= ({a1:1}).constructor))const prop = <><x><y/></x></>, __parent__;");
tryItOut("/*infloop*/for(const __iterator__; [*].filter(new Function);  /x/g --.__count__ = yield 3.141592653589793) {return;( /x/ ); }\nswitch(true) { default: case 1: return  /x/ ;__count__, __proto__case 6: case <x/>: break;  }");
tryItOut("try { throw true; } catch(__proto__ if <x/> ^= __iterator__) { ({}).__lookupGetter__ } catch(__iterator__ if (__proto__ ? <><x><y/></x></> : .2)) { . } catch(prototype) { continue L; } finally {  } ");
tryItOut("yield <><x><y/></x></>\nif(*) gc() else {throw <x/>; }");
tryItOut("L: /*infloop*/M:do gc() while(({a1:1}));");
tryItOut("gc()");
tryItOut("/*infloop*/do yield; while((<y><z/></y>).valueOf(\"number\"));");
tryItOut("/*infloop*/for(({__noSuchMethod__: [11,12,13,14].some }); let (__parent__) __iterator__; #3={a:#3#}) return;");
tryItOut("/*infloop*/M:for(constructor; <x/>; __count__) {do {} while(((function ([y]) { })(undefined.__noSuchMethod__ = [,,])) && 0); }");
tryItOut("try { continue M;\ngc()\n } catch(prop if (function(){for(let y in []);})()) { throw StopIteration; } catch(__proto__ if (function(){})()) { __iterator__ = __iterator__; } catch(__parent__ if ({}).hasOwnProperty()) { yield \f(eval(\"this === prop\", (({prop: -3/0})))); } catch(__proto__) { throw StopIteration; } finally { with({}) { yield <><x><y/></x></>; }  } ");
tryItOut("/*infloop*/for(window; [] = [z1];  /x/ ) ");
tryItOut("/*infloop*/L:for(null; <x/>; <><x><y/></x></>) break ;");
tryItOut("L: {if(<xxx {__parent__}={(\n /x/g )} />) {yield;continue ; }; }");
tryItOut("throw #1=[#1#];");
tryItOut("if((gc)) { if (({ __iterator__: [, ], __noSuchMethod__: [({ __proto__: prototype, __parent__: prototype }), ({ __proto__: __proto__, x::prop: constructor })] }) = ({ __proto__: __proto__, __iterator__: prototype })) {const <y><z/></y>; }} else {throw @foo;if((<><x><y/></x></> >>>=<x><y/></x>.__parent__)) { if ([(window)[@foo] for each (__proto__ in  \"\" )]) {prop, prototype = [1,,]; } else {{}gc() }} }");
tryItOut("let (prop, prototype = <x/>) { const __noSuchMethod__; }");
tryItOut("this.zzz.zzz;");
tryItOut("throw constructor;");
tryItOut("/*for..in*/for(prop = #1=[#1#] in (<x><y/></x>.propertyIsEnumerable(\"constructor\").watch(\"__parent__\",  /* Comment */<x><y/></x>))) yield {};");
tryItOut("");
tryItOut("/*for..in*/for(prototype in ((function (prototype, constructor) { return <><x><y/></x></> } )(<y><z/></y>)))function(y) { yield y; __iterator__;; yield y; }");
tryItOut("{}/*infloop*/for(var __parent__ = <y><z/></y>; true; __iterator__) /*infloop*/L:do <x/>; while( /x/  - true);");
tryItOut("/*for..in*/for(const __count__ = <x/> in this) {export __noSuchMethod__;export __proto__; }");
tryItOut("this.zzz.zzz;");
tryItOut("if([15,16,17,18].some((1 for (x in [])), <x><y/></x>)) {throw  '' ; } else  if ((prototype.(*))) continue M; else M:\tif(<x/>) {return window;let * = true, __count__ = @foo; }");
tryItOut("yield;");
tryItOut(";");
tryItOut("{gc()0\n }");
tryItOut("with({__proto__: prototype.__count__ = ({prop setter: @foo }) .@x:: <x><y/></x> + <><x><y/></x></>}){; }");
tryItOut("/*for..in*/for(let (__iterator__.prop) in (window.__parent__ = let prototype =  /x/ ;)) {const __proto__, getter; }");
tryItOut("/*infloop*/for([] = ({}).hasOwnProperty; constructor = prototype; ({ __proto__: prototype, constructor: constructor }) = ({ __proto__: __count__, __iterator__: __noSuchMethod__ })) ;");
tryItOut("with({}) { with({}) { let((1 for (x in [])), __iterator__) ((function(){return;})()); }  } ");
tryItOut("with({}) { return (0x99.hasOwnProperty(\"__parent__\")); } ");
tryItOut("yield <x><y/></x>;");
tryItOut("with(prop.__noSuchMethod__ = <x/>)yield;");
tryItOut("L: if((<x/>)(<><x><y/></x></>)) {.2;*; } else {var __iterator__, __iterator__ = -1; }");
tryItOut("throw prop;");
tryItOut("/*for..in*/M:for(let __proto__.prototype in <x><y/></x>) {yield <x><y/></x>; }");
tryItOut("L: {{}constructor = *::*; }");
tryItOut("while((prototype) && 0)");
tryItOut("__count__ = prototype;");
tryItOut("L: {export *; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = __parent__.__parent__ = [[1]] + ({a1:1}) in  ''  ? @foo : true) let __proto__;");
tryItOut("M:do {export *; } while((<><x><y/></x></>) && 0);\n;\n");
tryItOut("let([, ], __iterator__ = new ('haha'.split)().__defineGetter__(\"prototype\", (<x><y/></x>).watch)) ((function(){this.zzz.zzz;})());");
tryItOut("M:if(#1# >>>=0/0) gc() else  if (/*\n*/new ((<><x><y/></x></\t>.__lookupSetter__(\"__noSuchMethod__\")))(* & undefined)()) {/*infloop*/for(true;  /x/g ; function(id) { return id }) {const constructor = <><x><y/></x></>, __parent__; }yield this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((3/0.isPrototypeOf(<><x><y/></x></>))(<x><y/></x>([])) in  /x/g ) throw <x><y/></x>;");
tryItOut("L:if(<x><y/></x>) { if (__count__) {return; } else {yield;return <><x><y/></x></>; }}");
tryItOut(";{(false); }");
tryItOut("L:with(<x><y/></x>){\rreturn 4.;(@foo); }");
tryItOut("/*for..in*/for(let (__iterator__) in ((eval)(this))){export *; }");
tryItOut("\nif( /x/ ) function::__parent__, prop = constructor; else  if (this) {yield;(window); }");
tryItOut("/*for..in*/M:for(let __iterator__.__iterator__ in ((eval)(([11,12,13,14].sort) != prototype = __iterator__)))this.zzz.zzz;");
tryItOut("if(new (undefined)(prop)) let prototype; else {}");
tryItOut("__count__ = -1");
tryItOut("do function(q) { return q; } while((\nconstructor && undefined) && 0);");
tryItOut("/*for..in*/for(var prototype in (('haha'.split)( '' ))){return <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in constructor) {gc()return; }");
tryItOut("/*infloop*/for(\tnew <y><z/></y>(<x><y/></x>); (<x><y/></x> , x::__noSuchMethod__); (yield this)) ; const __count__;");
tryItOut("yield;");
tryItOut("if( /* Comment */false) let prop = -3/0, prototype; else  if (prototype) (<y><z/></y>);");
tryItOut("/*for..in*/L:for(let prop = new this.__defineSetter__(\"__count__\", (function (prototype, __noSuchMethod__) { yield * } ).call) in (* /=  '' )) {while(( /x/ ) && 0){throw false; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in __count__) {return window;export __iterator__; }");
tryItOut("__proto__;\n{}\n");
tryItOut("with([z1]){<x/>;constructor = window, prototype =  /x/ ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(*::*.__noSuchMethod__ in ([<x><y/></x>])) /*infloop*/M:do  while([11,12,13,14].map);");
tryItOut("/*for..in*/for(const ( /x/g )( /x/ ) in *::*) throw this;");
tryItOut("let \f(__noSuchMethod__, __noSuchMethod__) { const __noSuchMethod__; }");
tryItOut("/*for..in*/for(const [function::__iterator__, prop] = <x/>.@* in constructor = ((uneval((({prototype: function(id) { return id }})))))) {throw ({}); }");
tryItOut("/*infloop*/for(({ constructor: __count__ }) = [,,].__lookupSetter__(\"constructor\"); (__iterator__ = (-1)); ((yield yield *))) {L: prototype = <x><y/></x>;<x><y/></x> }");
tryItOut("/*infloop*/for(<x><y/></x>.watch(\"__parent__\", function () { yield <x><y/></x> } ); <><x><y/></x>//h\n</> ? this : <x><y/></x>; this.__defineSetter__(\"__iterator__\", (function(q) { return q; }).apply)) continue ;");
tryItOut("for(let y in [5,6,7,8]) __count__ = undefined;");
tryItOut("prototype = constructor;");
tryItOut("M:switch(__proto__.constructor = prototype.__proto__ *= (this.zzz.zzz)) { case 9: export *;case 9: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in (__iterator__)(<x><y/></x>) = ({ __noSuchMethod__: __iterator__, __parent__: __iterator__ }) = window @ prop) ((String(prop = x::__proto__, @foo)));");
tryItOut("switch(<x><y/></x> :: undefined) { case 1: export function::prop; }export *\n");
tryItOut("while(((<x/> for \feach (constructor in 3.141592653589793)).@foo) && 0)const prototype;");
tryItOut("for(let y in [5,6,7,8]) return  /x/ ;");
tryItOut("M:do yield; while(( \"\" .prototype) && 0);");
tryItOut("if([#3={a:#3#}]) yyy else {gc() }");
tryItOut("/*for..in*/for(constructor = __parent__ = true.__defineSetter__(\"constructor\", undefined) in (null)()) {{}return 0x99; }");
tryItOut("do var __proto__ = 0x99, __noSuchMethod__ = *; while((@foo) && 0);");
tryItOut("if(undefined) { if (yield @foo) do {(__count__);__count__ } while(([11,12,13,14].map) && 0); else /*infloop*/while((#1# !==  /x/ )){do export __noSuchMethod__; while((<x><y/></x> >>> [,]) && 0); }}");
tryItOut("__iterator__ = -0.propertyIsEnumerable(\"undefined\")\n(#3={a:#3#});\n");
tryItOut("/*for..in*/for(var constructor in arguments) throw __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("{(undefined)((<x><y/></x> == @foo), this);yield; }");
tryItOut("/*infloop*/while((new /a/gi())[<><x><y/></x></>.unwatch(\"let\")])export *;");
tryItOut("<><x><y/></x></>");
tryItOut("{export *;export *; }");
tryItOut("/*infloop*/L:while(\n[( ''  instanceof [1,,])].map(function ()null))if((uneval(__parent__)).__lookupGetter__(\"prototype\")) { if (this.*) { } else {yield prototype;return  /x/g ; }}");
tryItOut("export *;");
tryItOut("/*infloop*/M:for(let [] = eval(\"yield undefined;\", <x><y/></x>); *; this) gc()/*infloop*/for(const __count__ = <y><z/></y>;  \"\" ; <x/>) ");
tryItOut("{L:if(false) return; else continue M; }");
