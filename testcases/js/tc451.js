tryItOut("if(prop) {gc() } else (@foo);");
tryItOut("{(5.0000000000000000000000); }");
tryItOut("L:do /*infloop*/for(__proto__ = ({ prototype: x::constructor, __proto__: prototype }) = [];  ; <x><y/></x> <= <><x><y/></x></>) __count__, prop; while((( /* Comment */prototype.unwatch(\"__proto__\"))) && 0);");
tryItOut("do [1,2,3,4].map while((<><x><y/></x></>.prototype) && 0)\n");
tryItOut("L:if(![<x/>]) {if(this.zzz.zzz) {throw <x><y/></x>;/*for..in*/for(prop in <><x><y/></x></>) continue ; } } else while((5.0000000000000000000000.__lookupSetter__(\"__noSuchMethod__\")) && 0){export __parent__;yield ({});continue L; }");
tryItOut("with(prop =  '' .eval(this.__defineGetter__(\"prop\", /a/gi))){let (__proto__, __parent__ = (function ([y]) { })()) { var __noSuchMethod__; }return; }");
tryItOut("let(({ __iterator__: __count__ }) = __noSuchMethod__.constructor = prototype, __parent__) { let(__noSuchMethod__) ((function(){export __noSuchMethod__;})());");
tryItOut("yield (* >>> function(id) { return id });");
tryItOut("for(let y in [5,6,7,8]) return this;");
tryItOut("/*for..in*/for(var prop in  \"\"  ? *::* : <><x><y/></x></>) {yield .2; }");
tryItOut("/*for..in*/for(const __parent__ in ((__noSuchMethod__ =  /x/ )((1.2e3)(<><x><y/></x></>))))break \n");
tryItOut("with({}) let(__parent__ = <><x>/*\n*/<y/></x></>.__proto__, prototype = <x><y/></x>) { gc()");
tryItOut("{/*infloop*/while(<x><y/></x>.__defineSetter__(\"__parent__\", Math.sin).prototype)if(* .. 1e+81) { if (({}).hasOwnProperty) {export prop;var __iterator__; } else ( '' );} }");
tryItOut("/*infloop*/L:for(const prop; (new this( '' , constructor)); (function  __noSuchMethod__ (__iterator__, prototype) { return; } ).call(this, )) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::prototype in undefined) export __proto__;");
tryItOut("{yield; }");
tryItOut("M:if((__noSuchMethod__ = this)(new (new Function(\"yield;\"))(), [11,12,13,14].map)) continue M; else continue ;");
tryItOut("/*for..in*/L:for(let [prototype, __proto__] = eval(\"gc()\", new [,,]()) in __iterator__)  /x/ ");
tryItOut("L:if(*[false]) (window); else {return this; }");
tryItOut("switch(*::*) { case 2: export __proto__; }");
tryItOut("/*infloop*/for(prop; (#2=[this.__defineSetter__(\"__proto__\", function(q) { return q; })]); [, __parent__, , ] = [15,16,17,18].sort((new Function(\"gc()\")), __parent__)) with({}) return ({a2:z2});");
tryItOut("this.zzz.zzz;");
tryItOut("let (({ __iterator__: prop }) =  { yield [undefined for each (__count__ in [1])] }  = (__proto__ =  /x/g )) { /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in 033) @foo; } const __parent__;");
tryItOut("yield *;\nif(1e81) var prop, prop; else {return; }\n");
tryItOut("/*infloop*/for(__noSuchMethod__; undefined; ((({constructor: <x><y/></x>})) for each (prop in <y><z/></y>) for (constructor.__parent__ in this) for (__count__ in <y><z/></y>)).valueOf(/*\n*/\"number\")) {/*infloop*/while(this.__defineGetter__(\"__parent__\", function(y) { yield y; ;; yield y; })){if([[]]) { if (<x><y/></x>) return 3.141592653589793; else continue M;} }/*for..in*/L:for(var [prop, __proto__] = window in  /x/g ) {[1,2,3,4].slicegc } }");
tryItOut("yield #1=[#1#]\f;");
tryItOut("let(__count__, __noSuchMethod__ =  /x/ ) ((function(){(<><x><y/></x></>);})());");
tryItOut("/*for..in*/for(var __iterator__ in (((*::*)().unwatch(\"__parent__\"))(undefined))){if(([11,12,13,14].map)) {yield *;export prototype; } else  if ((<y><z/></y>).__defineSetter__) {yield; }with({__noSuchMethod__: 1.2e3})\f{var function::constructor;/*for..in*/M:for([constructor, x::__noSuchMethod__] = true in __proto__) yield 0x99; } }");
tryItOut("prop, __noSuchMethod__ = <><x><y/></x></>;\n\n");
tryItOut("/*for..in*/for(var __count__ in [,,z1]) {constructor;yield <x><y/></x>; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; (constructor.(typeof *::*)); new ((window.isPrototypeOf(function(id) { return id }).eval( \"\" )))(<x/>, [11,12,13,14].some)) {if(eval(\"/*infloop*/L:for(1e-81; <><x><y/></x></>; <><x><y/></x></>) {export *; }\", <x><y/></x>)) { if (( /x/ ).call(<y><z/></y>, )) function (function::__count__) { return __noSuchMethod__ }  else return;} }");
tryItOut("/*for..in*/for(let __iterator__.__noSuchMethod__ in *::*()) if(true.__lookupGetter__(\"__count__\")) { if (__iterator__ = <y><z/></y>) {; } else {yield;export prop; }}");
tryItOut("while((try { with({}) for(let y in []); } finally { with({}) yield window; } ) && 0){if(<><x><y/></x></>) {} else  if (true) {__parent__ = 4.;; } else __proto__ }");
tryItOut("/*for..in*/for(const [constructor, __parent__] = -.2 in <x><y/></x>) prototype;");
tryItOut("/*for..in*/for(const [__iterator__, __iterator__] = (({ constructor: [prop.constructor, , [({ __proto__: ({ prop: constructor }), __iterator__: ({ __count__: constructor, __count__: getter }) }), ({ __iterator__: ({ constructor: __parent__ }) }), , ], , [, , constructor, , ]], prototype: [[], [({ prop: [__iterator__, , __count__, __proto__], __proto__: ({ __proto__: constructor, __iterator__: prop }) })]] }) = ({__parent__ setter: ({}).hasOwnProperty, prop: <y><z/></y>.watch(\"__count__\", function () /x/ ).watch(\"__iterator__\", (__parent__)) })) in (new (({a1:1}) |= <x><y/></x>)(new RegExp(function ([y]) { }, window)))) {__parent__; }\n{new Functiongc() }\n");
tryItOut("/*for..in*/for(const constructor = prop = window.__proto__ = (new window()) in  \"\" .propertyIsEnumerable(\"__proto__\")) {for(let y in [5,6,7,8]) __parent__.prototype; }");
tryItOut("if(@foo & this) switch(\rfunction ([y]) { } %= <x><y/></x>) { case 3: break;  }");
tryItOut("let __noSuchMethod__, constructor({ __count__: ({ __parent__: , __proto__: prototype }), __proto__: ({ __parent__: [, , , , ] }) }) = __iterator__;");
tryItOut("yield -1\nreturn constructor;");
tryItOut("yield  \"\" ;/*for..in*/for(__iterator__ = <y><z/></y> in window) {; }");
tryItOut("return (__parent__.__parent__ = <x><y/></x>);");
tryItOut("M:with({__count__: <><ccc:ddd></ccc:ddd></>}){L: {let __count__ = <y><z/></y>, getter = <x><y/></x>;break ; } }");
tryItOut("<x/>;");
tryItOut("with(<x/>.*){export __count__; }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split));");
tryItOut("switch(case 0: continue M;break; case 2: /*infloop*/for((@foo); <y><z/></y>; <><x><y/></x></>) {export *; }break; break; ) { default: break; case null: continue M;break;  }");
tryItOut("L:if(<x><y/></x>.(<x><y/></x\r>)) {(__proto__); } else  if ((<><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></> ? <><x><y/></x></>(__count__) == __proto__ = [,] : undefined) if (__count__)) {if( ''  >>= __noSuchMethod__) return  /x/g ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (<x><y/></x>.eval(this)) in @foo) {const __noSuchMethod__;break L; }");
tryItOut("/*infloop*/M:while(this.zzz.zzz){L:if(<y><z/></y>.prop) continue M; else  if (1e4) {/*infloop*/L:do export *; while(let (constructor = [[]]) <y><z/></y>); } }");
tryItOut("/*for..in*/for(const [__proto__, prop] = false >= [z1] in *) {yield;(<y><z/></y>); }\nyield;\n");
tryItOut("do break ; while((@foo.__defineGetter__(\"__count__\", (new Function(\"__iterator__, __proto__ = ({a1:1});\")))) && 0);");
tryItOut("L:switch(undefined) { case 4: yield <><x><y/></x></>;break; case 5: break;  }");
tryItOut("if(this.@foo) {export *;export *; } else  if ((__proto__ = <y><z/></y>)) {break L; } else {const prototype = window; }");
tryItOut("gc()let (prototype = <><x><y/></x></>) { /*infloop*/L:for(let __parent__;  /x/g ; <y><z/></y>) return <><x><y/></x></>; }");
tryItOut("export *;");
tryItOut("L: if( /x/ ) { if (window) {throw null; } else throw this;}");
tryItOut("{/*for..in*/for(const constructor in (([1,2,3,4].slice)(undefined)))//h\n }");
tryItOut("");
tryItOut("if(prototype = @foo)  for (prop in  /* Comment */<><x><y/></x></>.isPrototypeOf( /x/g ) += eval(\"yield;\",  \"\" )) if ( \"\" )");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (({}))( /x/ ) in __count__) throw ;");
tryItOut("if( /x/g ) {; } else  if (__iterator__) {yield <x/>;gc() }");
tryItOut("M:with(({a1:1}) :: *::*){}");
tryItOut("L:if( for (__noSuchMethod__ in __iterator__) if (false)) { if (<><x><y/></x></>) return <x><y/></x>; else @foo;}");
tryItOut("return;");
tryItOut("with({__parent__: <y><z/></y>.unwatch(\"__iterator__\")}){let constructor;var __parent__; }\n");
tryItOut("{ const __count__;<bbb xmlns:ccc=\"({ constructor: __parent__, <x><y/></x>: __iterator__ }) = window.eval(*::*)\"><ccc:eee></ccc:eee></bbb> /*infloop*/for(<!--yy-->; (+ '' .propertyIsEnumerable(\"x::setter\")) .@ Object(constructor = prototype); ((yield [] = [*].some(function(y) { yield y; continue L;; yield y; })))) {throw (__count__ = (1.3).call(<><x><y/></x></>, [z1])); } }");
tryItOut("if((~__count__ = \f<><x><y/></x></>)) {export *; } else {/*infloop*/while(( /x/ )){return; } }");
tryItOut("/*infloop*/L:while(({a2:z2}).prop = function(id) { return id }){; }");
tryItOut("{}\n/*for..in*/for(prototype in ((function  __iterator__ (__iterator__, __proto__) { gc() } )(<><x><y/></x></>))){{} }");
tryItOut("if() {/a/gi/*infloop*/for(const [__proto__, , prototype, ] = true < *; <x><y/></x>.__defineGetter__(\"constructor\", new Function); ([15,16,17,18].filter((1 for (x in [])), 033))) {switch(window) { default: __proto__;break;  } } }");
tryItOut("L:if((((<y><z/></y> ? this : __parent__))[[<x><y/></x> for each (__count__ in @foo)]])) { if () return;} else {return <><x><y/></x></>;const __count__; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("L:do yield; while((<x><y/></x>) && 0);");
tryItOut("export __count__; const __parent__;");
tryItOut("switch(#1=[#1#]) { default: break; case window: export prototype;break; case true: 'haha'.splitbreak; case  /x/ : let __noSuchMethod__, __proto__ = <><x><y/></x></>;case 1: let __proto__ = <x><y/></x>, prop = true;break;  }");
tryItOut("M:switch(++(new <><x><y/></x></>)) { default: break; M:do {export __proto__; } while((true) && 0); }");
tryItOut("with({prop: __noSuchMethod__}){export prototype; }");
tryItOut("({ set __parent__() { /*infloop*/while(( /* Comment */ /x/ ))yield; } ,  set __proto__(prop, ({ __count__: ({ __parent__: constructor, __proto__: __noSuchMethod__ }), __noSuchMethod__: prototype })) { yield let (prop, __iterator__) @foo.unwatch(\"__parent__\") >>= ( /* Comment */<><x><y/></x></>) }  }), ({ get __parent__(prototype) {  } , prototype getter: Math.sin }) < window");
tryItOut("if(-@foo) \n/*for..in*//* nogeckoex bug 349964 */L: for  each(1e+81['prop'] in <x/>.hasOwnProperty(\"constructor\") if (<><x><y/></x></>)) {/*infloop*/while(<zzz> /x/ </zzz>)<><x><y/></x></>; }");
tryItOut("break ");
tryItOut("if((__noSuchMethod__.__count__ setter= *::*)) {return *::*; } else {__iterator__ = __proto__; }");
tryItOut("with({}) { with({}) for(let y in []); } ");
tryItOut("do <><x><y/></x></>; while(((this.__defineSetter__(\"prototype\", /a/gi))) && 0);");
tryItOut("switch( \"\" ) { case 1:  }");
tryItOut("/*infloop*/do {try {  } catch(__parent__) { export *; } finally { export *; } {} } while(__iterator__);");
tryItOut("L:if(this >>= <x><y/></x>) { if (this.__defineSetter__(\"prop\", (<><x><y/></x></>).apply) if (*)) {Math.pow } else const constructor = false;}");
tryItOut("with({}) __iterator__;");
tryItOut("/*infloop*/M:for( /x/ ; this; #1#) {\t{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype in constructor =  '' ) ");
tryItOut("/*infloop*/for(<x><y/></x>; undefined; <><x><y/></x></>) @foo;\nwhile((let (__noSuchMethod__, prop = <x><y/></x>) new new Function()) && 0){/*for..in*/for(prop in <y><z/></y>) {yield this; } }\n");
tryItOut("for(let y in [5,6,7,8]) yield eval(\"export *;\", undefined);");
tryItOut("yield ({a2:z2});\nvar __noSuchMethod__ = prop;\nexport __parent__;");
tryItOut("/*infloop*/L:while((constructor.prop = [<><x><y/></x></>])){export prototype;return; }");
tryItOut("if(1e-81.yoyo(<x><y/></x>)) { if ( '' ) {yield *::*;(*); } else {'return;let __parent__ = __noSuchMethod__, prototype = __iterator__; }}");
tryItOut("/*infloop*/for( '' ; null & *::*; prototype.prototype getter= gc) {}");
tryItOut("(this);");
tryItOut("let(__noSuchMethod__ = (*::* & <x><y/></x>).throw(({a1:1}).watch(\"__iterator__\", (<x/>).watch))) ((function(){with({}) for(let y in [5,6,7,8]) throw __proto__;})());");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(({ __noSuchMethod__: x::__count__, __parent__: (constructor) }) in ((({}).__lookupGetter__)(__parent__.__proto__ setter= <><x><y/></x></>))){return #1#; }");
tryItOut("{}");
tryItOut("/*for..in*/for(var (prototype) in ((Function)((new (Error(<><x><y/></x></>).valueOf(\"number\"))((Array((new @foo()))))))))export *;");
tryItOut("export prototype;");
tryItOut("if((<x><y/></x>.isPrototypeOf(<x><y/></x>).__defineSetter__(\"constructor\", function(y) { yield y; let __noSuchMethod__, prototype;; yield y; }) + (this.__defineSetter__(\"prototype\", \r(({}).__lookupGetter__).call)).throw((window)()))) { if (<><x><y/></x></> >>> <x><y/></x>) return; else __noSuchMethod__, __iterator__}");
tryItOut("constructor = prop;");
tryItOut("if(<y><z/></y>) { if (@foo) {function(y) { yield y; export __count__;; yield y; }{} } else yield;}");
tryItOut("/*infloop*/for(__proto__ = ({__iterator__ setter: ({}).__lookupGetter__\r, prop: ((yield null)) }); 0/0.__lookupGetter__(\"__parent__\")--; __proto__.([,])) __noSuchMethod__");
tryItOut("__parent__;");
tryItOut("/*infloop*/M:do {return;throw 033; } while( /x/ );");
tryItOut("/*infloop*/while(__noSuchMethod__){; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(__proto__.('fafafa'.replace(/a/g, function(y) { yield y; return;; yield y; }))) return; else  if ((({ __noSuchMethod__: __proto__, prop: ({ prop: __iterator__, __iterator__: __noSuchMethod__ }) }) = 3++)) __proto__ else break ;");
tryItOut("do return  \"\" ; while((__iterator__) && 0);");
tryItOut("/*infloop*/while(@foo >>= <><x><y/></x></>){throw __count__;let constructor, prop; }");
tryItOut("{export constructor;(<x><y/></x>); }\r");
tryItOut("let(__count__) ((function(){return;})());");
tryItOut("for(let y in [5,6,7,8]) let(__parent__) ((function(){this.zzz.zzz;})());");
tryItOut("yield;");
tryItOut("/*for..in*/for(let __iterator__ in ((function(q) { return q; })(({__noSuchMethod__ getter: eval, prototype: null })\t)))if((#1=[#1#] >>= 0x99)) { if (__noSuchMethod__) return this;} else (<><x><y/></x></>);");
tryItOut("L:if(export *) __parent__ = __proto__; else  if (prototype.__lookupSetter__(\"__proto__\") instanceof (uneval( { return ((@foo for each (__parent__ in undefined))) } ))) {export *;\nexport __noSuchMethod__;\n }");
tryItOut("while((new RangeError(<><x><y/></x></>)) && 0)/*infloop*/do  while({});");
tryItOut("/*for..in*/for(const __count__ = undefined in null) {gc()return true; }");
tryItOut("let(__proto__, ({ __proto__: ({ prototype: ({ __noSuchMethod__: constructor }), __iterator__: ({ __parent__: __parent__, __parent__: __noSuchMethod__ }) }) }) = (Array(3 -= <><x><y/></x>\f</>) !== [15,16,17,18].filter(new Function, (this.zzz.zzz)))) { for(let y in []);");
tryItOut("do __proto__ while(([15,16,17,18].filter(({({ __count__: <y><z/></y>, <x><y/></x>, __iterator__: __parent__ }), constructor setter: (window).__defineSetter__ }), <><x><y/></x></> >>= [15,16,17,18].filter(eval, <y><z/></y>)) .@*:: ([new (([11,12,13,14].some\t))(((-0))[*::*])])) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <y><z/></y>.unwatch(\"__parent__\")) {(@foo);/*for..in*/M:for(__count__ in this) {;let  { return <x/> } , {return;export constructor; }; } }/*infloop*/for(const __proto__; (p={}, (p.z = \n*)()); (<x><y/></x>)(__noSuchMethod__)) /*for..in*/for(let __count__ in ((eval)(null))){{}export *; }");
tryItOut("if((-0).isPrototypeOf(__iterator__))  else  if ((prop)[eval(\"({constructor:  /x/g  })\", <><x><y/></x></>.watch(\"__parent__\", function  prototype ()<><x><y/></x></>))]) {export __parent__; }");
tryItOut("if(*) {-1;throw __parent__; } else  if (<><x><y/></x></>) (<><x><y/></x></>); else {export *;yield <x><y/></x>; }");
tryItOut("switch([((p={}, (p.z = <><x>\f<y/></x></>)()))]) { default: /*infloop*/while(*::*)const __count__, prop;break; case 5: break; break; case 1: @foo;break; case 9: break; throw function ([y]) { };break;  }");
tryItOut("/*for..in*/for(var [__iterator__, constructor] = (constructor = <x><y/></x>) & prop getter: __proto__.(0/0) in prop) (<x/>);");
tryItOut("/*for..in*/[, [, __parent__], ]");
tryItOut("/*for..in*/for(const [__iterator__, __count__] = (({a1:1}) && <><x><y/></x></>) in  /x/ ) {yield #1#; }");
tryItOut("/*for..in*/for(__proto__ = (eval(\"(let (__noSuchMethod__ = <x><y/></x>, __noSuchMethod__ = undefined) undefined)\", (__count__.([,,].constructor)))) != [#2=(prototype = [[1]])].sort(((<><x><y/></x></>).__defineSetter__).call) in __parent__.__noSuchMethod__ getter= [1,2,3,4].slice) if((__parent__|=3)) { if ((new *(@foo, *))) {Functionreturn [z1]; } else return;}");
tryItOut("switch(<x><y/></x>) { default: prototype = true;break; case 7: break;  }");
tryItOut("if(<><x><y/></x></>.__lookupGetter__(\"__count__\")) { if ([11,12,13,14].filter) {let prop = prototype;export __iterator__; } else let  prop setter: (1 for (x in [])) constructor = <x><y/></x>, __proto__ = (function ([y]) { })();}");
tryItOut("/*infloop*/while(eval(\"return;\", (p={}, (p.z = <><x><y/></x></>)()))){{} }");
tryItOut("L: M:if(<x/>) { if (null.@foo) var __noSuchMethod__, constructor; else yield;}");
tryItOut("try { throw StopIteration; } finally { with({}) { throw StopIteration; }  } ");
tryItOut("/*infloop*/for(({prop: __noSuchMethod__ }); ('fafafa'.replace(/a/g, (new (Function)(this.unwatch(\"__noSuchMethod__\"))))); (this.zzz.zzz)) if(<x/>) { if (let (constructor) <x><y/></x>) {export *; }} else var __parent__, __count__ = *::*");
tryItOut("switch((/*\n*/<x><y/></x> ?  \"\"  : <><x>\t<y/></x></>)) { case __proto__ = <><x><y/></x></>: break;  }");
tryItOut("return;");
tryItOut("export constructor;");
tryItOut("return  '' .prototype =  '' ;");
tryItOut("if((((<x><y/></x>)[[[]]]).yoyo(window ? * : window)++)) while(((-0)) && 0) else  \"\" ;");
tryItOut("with((__count__ = 3/0.watch(\"x::__count__\", function  __parent__ (__iterator__, ({ constructor: prop })) '' ))){[1,2,3,4].map<x/>;/ }");
tryItOut("with(((__parent__ = eval(\"{/*infloop*/M:do {var let = <x/>; } while(false); }\", 1e4.__noSuchMethod__ setter= eval)))(this.zzz.zzz, ))((<><x><y/></x></> for each (prototype in <x/>)));");
tryItOut("let (__proto__ = undefined) { /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in let = prototype = __proto__) {while((<><x><y/></x></>.watch(\"__iterator__\", [1,2,3,4].slice)) && 0)/*infloop*/for(window++; __noSuchMethod__; [5.0000000000000000000000\t for (__proto__ in __parent__)]) export *; } }");
tryItOut("yield false;");
tryItOut("{return 1.3;{} }");
tryItOut("if((new ([1,2,3,4].map)())) { if ((prototype = ( /x/ \t for each (prop in prototype)))) {<x/>;\n{}\n }} else if((eval(\"( '' );\", (__count__.@*)))) {/*infloop*/do {break ; } while(@foo.prop); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(new prototype%=<><x><y/></x></>(); __noSuchMethod__.(eval(\"<x/>\",  \"\" .throw(null))); @foo.*) yield new (<x><y/></x>).apply( \"\" \f);");
tryItOut("do {setter;prototype } while(((uneval(<x><y/></x>))) && 0);");
tryItOut("/*for..in*/L: \rbreak ;for(var __noSuchMethod__[<x><y/></x>].some(((({}).hasOwnProperty).apply).call) in -3/0) {if(<><x><y/></x></>) {throw __noSuchMethod__;{} } else  if (window) __proto__ }");
tryItOut("var __parent__, __noSuchMethod__ = @foo;");
tryItOut(";");
tryItOut("");
tryItOut("{yield;/*infloop*/for(prototype =  /x/ ; undefined; true) prop =  '' ; }");
tryItOut("if(((<y><z/></y> ? true : <y><z/></y>) @ (({__parent__ setter: Function, __parent__ getter: new Function })))) throw -1;");
tryItOut("*;/*infloop*/M:for(const __iterator__; [[]]; 3/0) { /x/ ; }");
tryItOut("if(__count__.propertyIsEnumerable(\"prototype\")) { if ((({__noSuchMethod__: <x><y/></x> }))) {export *;const __iterator__ = __parent__; }} else \nyield;");
tryItOut("{return; if (<><x><y/></x></>) }");
tryItOut("/*infloop*/L:while((function (prototype, constructor) { gc() } )(5.0000000000000000000000, 1e4).propertyIsEnumerable(\"__proto__\"))function  __iterator__ (__noSuchMethod__, __noSuchMethod__) { yield [z1] } ");
tryItOut("if(<x/>.hasOwnProperty(\"constructor\") instanceof  '' ) { if (this.zzz.zzz) return;} else (undefined);");
tryItOut("/*for..in*/M:for(let __iterator__ in ((0)(<><x><y/></x></>)))Math.sin");
tryItOut("/*infloop*/M:for(let __count__ = 0/0; true; *::*) {(__iterator__); }");
tryItOut("let(__noSuchMethod__ = <x/>) ((function(){with({}) __count__ = constructor;})());");
tryItOut("/*infloop*/do /*for..in*/for(function::__count__ = false in 033) (this); while(this.zzz.zzz);");
tryItOut("/*for..in*/for(__proto__ in *::*) /*for..in*/L:for(const __noSuchMethod__ = <x/> in #1#) {return this; }");
tryItOut("/*infloop*/M:do {try { this.zzz.zzz; } catch(__iterator__) { {export constructor; }catch(__proto__ if (__noSuchMethod__ = window).eval(this)) { yield <y><z/></y>; } catch(prop if constructor = __noSuchMethod__) { with({}) let(__parent__ = *, __noSuchMethod__ = window) ((function(){(null);})()); } catch(__iterator__) { export *; } finally { yield new <x><y/></x>(({a2:z2})); }  } finally { return constructor = window; } {} const setter; } while(({__proto__: <x><y/></x> }));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype.prop in 3/0) if(Number(3/0, <x/>)) {return false;const prop = [,,], prop = *; }");
tryItOut("L: var __count__, constructor;");
tryItOut("{gc()if(<x><y/></x>) { if (<x><y/></x>) var __iterator__;} else throw this; }");
tryItOut("let __proto__; const prototype;");
tryItOut("__proto__ = __iterator__;");
tryItOut("/*infloop*/for(__parent__.prop getter= function(q) { return q; }; prototype = undefined; (uneval(<y><z/></y>))) {return; }");
tryItOut("/*infloop*/for(({ __parent__: ({ __count__: [] }) }) = (); this; (new @foo)[+-3/0]) ;");
tryItOut("L: /*infloop*/for(constructor = #1=[#1#]; prototype; (function ([y]) { })()) return __parent__;");
tryItOut("/*for..in*/for(let __proto__ = (p={}, (p.z = <><x><y/></x></>)()) in 1.2e3) let prototype = window, prop;");
tryItOut("{(<x><y/></x>);const prop, __proto__ = this; }");
tryItOut("let(prototype = [11,12,13,14].map, __noSuchMethod__) ((function(){yield prototype+=([(__parent__ /= <x><y/></x>)].map([1,2,3,4].map))\t;})());");
tryItOut("/*for..in*/for(var __count__ in ((Math.pow)(*))){gc() }");
tryItOut("throw StopIteration;");
tryItOut("export prototype");
tryItOut("if([15,16,17,18].map([1,2,3,4].map, [,,]) %= [z1]) { if ((__iterator__)) /*infloop*/for(<x/>; window;  \"\" )  else __parent__ = <y><z/></y>; const prototype;}");
tryItOut("let __proto__ = <><x><y/></x></>;");
tryItOut("{(1 for (x in [])) }");
tryItOut("if(@foo) yield __iterator__; else  if (__noSuchMethod__ = window) {([,]);return <x><y/></x>; } else (<><x><y/></x></>);");
tryItOut("/*infloop*/for(__proto__; ('fafafa'.replace(/a/g, (1 for (x in [])))).prop; ((1e81.unwatch(\"__iterator__\").hasOwnProperty(\"__count__\")) += __parent__.__count__ = ([,,])[*]\n)) {let(__parent__ =  \"\" , constructor) { function \f(__iterator__, __proto__)*::* }");
tryItOut("/*infloop*/while((({prop:  /* Comment */false}) .@ true ? <y><z/></y> : try { return; } catch(constructor) { return 0x99; } finally { 3.141592653589793; } .propertyIsEnumerable(\"constructor\")))let(__count__, __noSuchMethod__ = true) { const prototype, prototype = -3/0;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */(0.yoyo( '' )).constructor = <x><y/></x>.unwatch(\"prototype\")");
tryItOut("/*infloop*/for(var __count__ = [[]]++; this[constructor.throw( /x/ )]; ( set __iterator__ __iterator__ ()(( ''  for each (__iterator__ in __iterator__ = <x><y/></x>) if ((function ([y]) { })())))).call((typeof  ''  && ( /x/g .valueOf(\"number\"))).isPrototypeOf( '' .valueOf(\"number\")).yoyo((({ set __parent__ __count__ (__parent__) { return let (__count__ = __parent__) window } , __proto__: this })) || 4. !== ({a2:z2})), )) return (new Error());");
tryItOut("/*for..in*/for(var __count__ = prop.__proto__ = window in __iterator__ &= \nthis) {break M; }");
tryItOut("for(let y in [5,6,7,8]) let(function::__noSuchMethod__ = (<x><y/></x>.isPrototypeOf([])), __proto__) { yield <x/>.unwatch(\"__iterator__\"); const __iterator__;");
tryItOut("with({}) {  } ");
tryItOut("/*infloop*/for(const [__noSuchMethod__, __proto__, ] = (({ get constructor constructor ()constructor }));  /x/g .__defineGetter__(\"prototype\", /a/gi); prototype.__parent__ = <><x><y/></x></>.*\t) {gc }");
tryItOut("/*infloop*/for(const __parent__; window; #1=[#1#]) return;");
tryItOut("M:if(<><xxx {__iterator__}={<y><z/></y>} /><x><y/></x><ccc:ddd>yyy</ccc:ddd></>) {if(<x><y/></x>) {var __parent__ = function(id) { return id }; } else  if (window) {} else gc()gc() }");
tryItOut("let (__parent__, __noSuchMethod__) { case 2: while((<><x><y/></x><//h\n/>) && 0)function(y) { yield y; return;; yield y; } }");
tryItOut("(undefined)\n{}");
tryItOut("let (this) { throw  \"\" ; }");
tryItOut("if(eval(\" '' ;\", *::*.unwatch(\"__count__\"))) {yield; } else  if ((yield <><x><y/></x\n></>).yoyo(new [1,2,3,4].slice())) {var __count__ = <x><y/></x>;arguments; }");
