tryItOut("with(new <><x><y/></x></>(4.) >>> (<><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")))if([15,16,17,18].map(function  prototype () {  } , 'fafafa'.replace(/a/g, window))) { if (this.isPrototypeOf(<y><z/></y>)) {export *;yield; }} else let __iterator__;");
tryItOut("while(( /x/g  += ({ __noSuchMethod__: prototype }) = <x><y/></x>, (new  /x/ ())) && 0)__proto__ = <y><z/></y>, __count__ = -0;");
tryItOut("if(<><x><y/></x></> += *::*) {const prototype = <><x><y/></x></>, prop; } else {let constructor;gc() }");
tryItOut("L: {export __proto__; '' ; }\nif(<><ccc:ddd><x><y/></x><x><y/></x></ccc:ddd></>) { if (this.zzz.zzz) {<x><y/></x>;var __parent__, prop, prop; } else {gc()export __noSuchMethod__; }}\n");
tryItOut("yield;");
tryItOut("M:with({prop: ({ __parent__: __noSuchMethod__ }) = (uneval(-3/0)) % __iterator__ = null}){export * const prop; }");
tryItOut("/*for..in*/L:for(const [prop, constructor] = __parent__ in (<x><y/></x>.(.2)).__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })) return; const __parent__;");
tryItOut("/*for..in*/for(let function::prototype in #3={a:#3#}) { }\f");
tryItOut("while(({}.hasOwnProperty(\"prototype\")) && 0)const function::__count__, __count__ = 5.0000000000000000000000;");
tryItOut("let (({ prototype: [, ], prop: __proto__.__noSuchMethod__ }), __iterator__ = <><x><y/></x></>.watch(\"prop\", function  constructor (__iterator__, constructor) '' )) { ; }");
tryItOut("/*for..in*/for(const prop in ((<> /x/g </>)(<><zzz>__parent__.constructor = true++</zzz></>))){/*infloop*/for(<x/>; <><x><y/></x></>; __parent__) {var prototype; }Math.pow }");
tryItOut("with({__count__: (constructor)})break ;<x/>;");
tryItOut("continue ;");
tryItOut("/*infloop*/do {L: {;return; } } while(prop());");
tryItOut("yield ((new /a/gi( '' , *::*)))();");
tryItOut("if(<x/> >= <><x><y/></x></>) { if (<{constructor}><ccc:ddd><x><y/></x>yyy</ccc:ddd></{constructor}>) {var __iterator__, __count__ =  \"\" ;//h\n }} else {this }");
tryItOut("switch( '' \n) { default:  }");
tryItOut("L: {{} }\nL: function(q) { return q; }");
tryItOut("gc()");
tryItOut("break ;");
tryItOut("var __iterator__ = [1];");
tryItOut("if(prop = this) { if (<><x><y/></x></> * <><x><y/></x></>) {throw this; }} else {const __noSuchMethod__, prop = <><x><y/></x></>;export *; }");
tryItOut("let __count__ =  /x/g \nreturn __proto__;");
tryItOut("if(__proto__ = (*::*) = 1e4.__defineGetter__(\"__count__\",  /x/ ).@foo) gc() else {({}).__lookupGetter__{} }");
tryItOut("L:if(((({}).__lookupGetter__)())) { if ('fafafa'.replace(/a/g, 'haha'.split)) {yield;with([]){prototype } }} else {}");
tryItOut("if( '' ) function (__noSuchMethod__) { this; }  else {;; }");
tryItOut("with(((yield <!--yy-->))){return;var __iterator__ = <x><y/></x>; }");
tryItOut("if(<><x><y/></x></>) gc()");
tryItOut("L:with({prop: <><x><y/></x></>; = ('fafafa'.replace(/a/g, (new Function(\"\"))))})let (__noSuchMethod__ = false, __proto__ =  /x/ ) { with({prop: <><x><y/></x></>})yield; }");
tryItOut("with({__count__:  /x/ }){(<x><y/></x>);(3/0); }");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = ({ set __parent__()window })\f in false) {}");
tryItOut("let (({ prop: prototype }) = (++ /x/ .valueOf(\"number\"))\f) { switch(Iterator().__lookupSetter__(\"__proto__\")) { default: gc() } }");
tryItOut("/*for..in*/L:for(__iterator__ = <x><y/></x> >  \"\"  in (yield new null( '' , <x><y/></x>))) function () { return this } /*for..in*/for(const prop in #1#) {[1,2,3,4].mapprototype }");
tryItOut("/*infloop*/do if([1,,] ? undefined : <x><y/></x>) {return #1#; } else  if ( /x/g ) {const __count__ = null, __proto__;var @foo; } while(constructor);");
tryItOut("M:if(<x><y/></x>) {export constructor; } else  if (<x><y/></x>) throw __parent__;");
tryItOut("L:while((new (new Function)(__iterator__ = true, (<x><y/></x>.watch(\"__noSuchMethod__\", function  __noSuchMethod__ (prototype)constructor)))\t) && 0)return;");
tryItOut("with(@foo.__noSuchMethod__ = gc){{}with({prop: 'fafafa'.replace(/a/g, (<y><z/></y>).__defineSetter__)})'haha'.split }");
tryItOut("/*infloop*/for( /x/g .@foo; <x/>.__count__; window.valueOf(\"number\").throw([function ([y]) { }].filter(new Function))) const __noSuchMethod__ = undefined, __noSuchMethod__ = gc();");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in this) /*for..in*/for(__count__ in ((Math.sin)(__noSuchMethod__)))export *;");
tryItOut("/*for..in*/for(var [function::__count__, __noSuchMethod__] = <y><z/></y> in (function(y) { yield y; ; yield y; }).call(false, <y><z/></y>)) /*for..in*/for(const <><x><y/></x></>.prop in ((({}).__lookupGetter__)([<><x><y/></x\f></> if ([,])])))var function::__noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("with(__iterator__.((let (__count__ = __parent__, __count__ = [1]) <><x><y/></x></>)))/*for..in*//* nogeckoex bug 349964 */ for  each(const <ccc:ddd></ccc:ddd> in false) {return __proto__;([,,]); }");
tryItOut("/*for..in*/for(var __count__ in -__noSuchMethod__ = <x><y/></\fx>) {gc()(new Function(\"return arguments;\")) }");
tryItOut("if(([11,12,13,14].filter)) {<x><y/></x>; } else {; }");
tryItOut("if([11,12,13,14].filter) { if (<y><z/></y>.yoyo( /x/g )) return; else throw <><x><y/></x></>;}");
tryItOut("M:do if(#1=[#1#]) { if (<y><z/></y>) } else {; } while(([,].watch(\"prop\", new Function)) && 0);");
tryItOut("with({}) { const __proto__ = <><x><y/></x></>; } ");
tryItOut("with({}) return\n");
tryItOut("switch((({}).__lookupGetter__)\t.call(<><x><y/></x>/>, <x/>, <x><y/></x>)) { default: break;  }");
tryItOut("if(()) { if (<><x><y/></x></>.isPrototypeOf(0)) {yield;var __parent__; } else L:if(<y><z/></y>) { }}");
tryItOut("try { for(let y in []); } finally { __parent__ = prop; }  const prototype;");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = (<><x><y/></x></> if (<x><y/></x>)).__defineSetter__(\"__proto__\", function (({ __parent__: ({ __proto__: setter }), prop: prototype })) { yield ((p={}, (p.z = ([(-1)]))())) } ) @ prototype.__iterator__ getter= (1 for (x in [])) in (( /x/g .throw([,,]))(true))) {throw [<x><y/*\n*//></x>\n]; }");
tryItOut("__proto__ = __iterator__;");
tryItOut("L: {var __count__ = yield <><x><y/></x></>;; }");
tryItOut("/*for..in*/for(constructor in ((/a/gi)(( /* Comment */<x/>) -= (<x/> if (3.141592653589793))))){with({__parent__: constructor})with({prop: [,]}){}export *\n }");
tryItOut("/*infloop*/while(({ prototype: ({ constructor: ({ __parent__: ({ __proto__: prop }), prototype: ({ constructor: ({ __noSuchMethod__: constructor, constructor: prototype }) }) }) }), prototype: constructor }) = this){M:switch([11,12,13,14].map) { case 2: break; yield; }with(#1# < window){throw 5.0000000000000000000000; } }");
tryItOut("yield !undefined * <><x><y/></x></>;");
tryItOut("export *;<y><z/></y>");
tryItOut("/*infloop*/while(eval(\"yield <x/>;\", (<x><y/></x>.(prop)) .. <x/> instanceof  /x/g ).watch(\"prop\", [1,2,3,4].map)){/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in (prop.isPrototypeOf(<><x><y/></x></>))) {throw this; } }");
tryItOut("throw prototype;");
tryItOut("M:with({__parent__: this}){const __iterator__ = false, __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(<x/>; *::*;  /x/g ) throw <x><y/></x>;");
tryItOut("break L;\n /x/ \n");
tryItOut(" '' ;");
tryItOut("Math.powgc()");
tryItOut("if(@foo) new Function else  if (<x><y/></x>) {\r } else {(__count__);(this); }");
tryItOut("(1 for (x in []))(constructor.( /x/g )).* = __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in false) export __parent__;");
tryItOut("M:if(new Object()) {const constructor = constructor, __noSuchMethod__;let prop = null; } else  if (Function(<><x><y/></x></>,  /x/ )) {return; }");
tryItOut("(function  setter (__noSuchMethod__, __iterator__)prototype).apply const __count__\n");
tryItOut("with({let: (function ([y]) { })().hasOwnProperty(\"__proto__\")})let __parent__, prototype = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in constructor) (constructor);");
tryItOut("if(__iterator__.@*\r) {yield  /x/ ;throw *; } const prototype;");
tryItOut("for(let y in [5,6,7,8]) ( \"\" );");
tryItOut("L: { }");
tryItOut("M:if((0.__lookupGetter__(\"<bbb xmlns:ccc=\\\"*\\\"><ccc:eee></ccc:eee></bbb><!--yy-->\"))) { if (<y><z/></y>) export __iterator__\n\t else ;}");
tryItOut("throw StopIteration;");
tryItOut("L:if([[1]][<x><y/></x>]) {return this; } else function (__iterator__, __proto__) { return <y><z/></y> } ;");
tryItOut("gc()\n\n/*infloop*/while(yield\r){export *; }\n");
tryItOut("let(prototype) { throw __noSuchMethod__;");
tryItOut("let (constructor = @foo) { ; }");
tryItOut("try { export *; } catch(__parent__ if (__count__ = __noSuchMethod__)) { export __noSuchMethod__; } catch(throw  /x/ ; if (function(){var constructor;})()) { \nreturn; } finally { yield (<x>y/><)x>; } ");
tryItOut("return;");
tryItOut("");
tryItOut("const <x><y/></x> \n");
tryItOut("throw StopIteration;");
tryItOut("const [, , , ({ __parent__: __parent__, __proto__: ({ __count__: ({ __iterator__: constructor, prop: __noSuchMethod__ }), prototype: ({ x::__parent__: __parent__, __proto__: prototype }) }) })] = (this.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })), __iterator__;");
tryItOut("with({}) { break ; } ");
tryItOut("if(new (constructor = [,])((<y><z/></y> .@ __parent__) .. [[,,]].some(function  __count__ (__iterator__) { return this } ))) {if(this.__defineGetter__(\"__proto__\", <x><y/></x>)) /*infloop*/for(const __proto__ = <y><z/></y>; *; <><x><y/></x></>) <x/>; else  if ([arguments++].some((new Function).apply)) {<x/>\nyield; } else __noSuchMethod__\n }");
tryItOut("switch(this.__defineGetter__(\"__iterator__\", function (\f) { return null } )) { default: break L;break;  }");
tryItOut("if( '' ) { if (__noSuchMethod__ = <x><y/></x>) {prop, prototype; } else }\nL:if(@foo) { if (<><x><y/></x></>) throw false; else yield;}");
tryItOut("L: __iterator__");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("let (__count__ = <><x><y/></x></>.@foo, __proto__ = export prototype;) { {} const constructor; }");
tryItOut("export *\n");
tryItOut("switch([,,z1]) { case 8: break;  }yield <x><y/></x>;");
tryItOut("/*infloop*/M:for(('haha'.split)\t.call(( /x/  / [1,,]).constructor, (([<x/>])).call(get,  /x/ )); <x/>; new (void <><x><y/></x></>)[throw <><x><y/></x></>](({a2:z2}), (window.@*))) {with(1.3\n)const prop, constructor;(<x><y/></x>); }");
tryItOut("");
tryItOut("throw StopIteration;");
tryItOut("M:with(<>(__noSuchMethod__)[({})]<!--yy--></>){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in __noSuchMethod__.prototype setter= new function ()[[1]](<y><z/></y>)) {/*for..in*/L:for(var __count__(__count__|=@foo) in <x><y/></x>) let (prop, prop) { continue L; }/*infloop*/M:do return; while( \"\" .yoyo( /* Comment */0.1)); }");
tryItOut("if((* || <><x><y/></x></>))  else  if ((__proto__ = this)) {export *; } else {yield <y><z/></y>; }");
tryItOut("if( { throw <><x><y/></x></>; } ) { if (((Math.pow).call(<x/>, <x><y/></x>, *)))  { yield ({__proto__ setter: ({}).__lookupGetter__, __iterator__: eval(\"@foo\", (this.zzz.zzz)) }) }  else {yield new [1,2,3,4].map(); }}");
tryItOut("while((return __count__ || (<x/>)) && 0){let prop, __iterator__; }");
tryItOut("let (__proto__) { let __proto__ = <y><z/></y>, __iterator__\n }");
tryItOut("M:do {yield 1e-81;throw <x><y/></x>; } while((((p={}, (p.z = (new (function(q) { return q; })()))()))) && 0)\n");
tryItOut("/*infloop*/L:while((uneval(<><x><y/></x></>)).valueOf(\"number\"))(__noSuchMethod__);");
tryItOut("{}");
tryItOut("throw constructor");
tryItOut("L: {if(<y><z/></y>) {gcyield <x><y/></x>; } else  if (<y><z/></y>) let prototype, __count__ =  /x/g ; else {__parent__;throw <x><y/></x>; } }");
tryItOut("var __count__ = <x><y/></x>;");
tryItOut("M:if((1e-81 / <y><z/></y>)) /*infloop*/M:for(__proto__; ( /x/g \n.unwatch(\"prototype\")); [15,16,17,18].sort((yield (this.zzz.zzz)).watch,  /x/g )) if((yield <><x><y/></x></>)) return <x><y/></x>; else {{} } else  if ((__iterator__.throw(<><x><y/></x></> >= true))[/a/gi]) .2; else {if(({ __parent__: ({ __noSuchMethod__: __proto__, __parent__: prop }) }).__proto__) { if ({}) {__parent__, __proto__ = undefined;yield; } else {break M; }} }");
tryItOut("do {throw __proto__; } while((( \"\" .isPrototypeOf(1.3))) && 0);");
tryItOut("({ prop: ({ prototype: [], __iterator__: [each, ({ get: ({ __count__: ({ __count__: __parent__, (*::*)(3): ({ prototype: __iterator__, constructor: prop }) }), constructor: __proto__ }) })\t] }) })");
tryItOut("with({}) { __parent__ = __count__; } ");
tryItOut("x::__count__.constructor = constructor;");
tryItOut("L: {break L; }\n\n");
tryItOut("/*infloop*/do {if((this.zzz.zzz)) {Math.sin; } else  if (function(id) { return id }.__lookupGetter__(\"constructor\")) {;yield <x><y/></x>; } } while(__iterator__.throw(*));");
tryItOut("(gc).apply const constructor;");
tryItOut("return ({ __proto__: constructor, __iterator__: __proto__ }) = __proto__;");
tryItOut("/*infloop*/for(__noSuchMethod__\n; __iterator__.__count__; (-1) >>= <x/>) __parent__, __proto__;");
tryItOut("/*infloop*/while(__iterator__[(-1)]){var __count__ =  '' , __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in undefined) {{}return; }");
tryItOut("/*for..in*/for(let constructor in ((function (__count__) { yield <y><z/></y> } )(@foo)))return this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <><x><y/></x></>) continue ;");
tryItOut("let __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("L: var __iterator__, __proto__;");
tryItOut("(constructor);");
tryItOut("let __proto__");
tryItOut("function(q) { return q; } const prototype;");
tryItOut("if((yield constructor = undefined)) var __iterator__ = 3, __proto__; else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((__iterator__) in <><xxx>{__parent__}</xxx></>) var __parent__;");
tryItOut("/*infloop*/do {/*infloop*/while(this.__defineSetter__(\"prop\", #3={a:#3#})){} } while(<x/>);");
tryItOut("gc()\n");
tryItOut("if(<><bbb xmlns:ccc=\"new prop = window(__noSuchMethod__ = __parent__, (window--))\"><ccc:eee></ccc:eee></bbb></>) __noSuchMethod__ = 3, __parent__ = <x/>;");
tryItOut("/*for..in*/M:for(var __parent__ in ((function(q) { return q; })(/a/gi))) if (*::*)");
tryItOut("{return 1e81; }");
tryItOut("/*infloop*/for(({prototype: -0}); (-1); *::*) if(false === <x/>) { if ((<x><y/></x>.(__iterator__))) throw [,]; else {return {<x/> }; }}");
tryItOut("yield;\nM:if(({__noSuchMethod__: <><x><y/></x></>, prop: true })) {gc() { yield -3/0 }  } else throw <x><y/></x>;\n");
tryItOut(" if (((@foo).__defineSetter__)((-0), <x/>))");
tryItOut("return\nreturn  /x/g .__defineGetter__(\"prototype\", function   (__proto__) { yield @foo } );\n");
tryItOut("with(@foo(false, *::*)){while((new __noSuchMethod__) && 0)M:with({__noSuchMethod__: __noSuchMethod__.__noSuchMethod__ getter= new Function})return; }");
tryItOut("/*infloop*/for(var [] = 1.2e3 ? <><x><y/></x></> :  /x/ ; (__iterator__.__iterator__); [15,16,17,18].some(function(q) { return q; }, 'fafafa'.replace(/a/g, (new Function(\"( \\\"\\\" );\")))) ? [[1]] *= *::* >>= __proto__ = null .@*:: __count__ : [15,16,17,18].some(({}).hasOwnProperty, <x><y/></x>)) return; const __noSuchMethod__\nvar constructor = 0/0, prop = *;");
tryItOut("if(window) { } else {M:while((<><x><y/></x></>) && 0){yield; }\flet (__count__ = window, __proto__) { const prototype, prototype; }\n(<><x><y/></x></>);\n }");
tryItOut("L:if((<x/>.*.__count__)) { if (window) {; } else export *;} const __iterator__;");
tryItOut("if(3.141592653589793) {;yield; } else  if ((#2=({prototype: [[]]}))) {M:while(((this.__defineSetter__(\"*::*\", function  __count__ (\t__count__, prop)arguments))) && 0){const function::__parent__ =  \"\" ;throw true; }/*infloop*/for(let __noSuchMethod__ = -3/0; this; <x><y/></x>) {yield <y><z/></y>;return <y><z/></y>; } }");
tryItOut("do return window; while((.2) && 0);");
tryItOut("/*infloop*/for(window; this; __noSuchMethod__) case 3: (this);case 0: let __noSuchMethod__ = null, prop;default: <x><y/></x>break; case 2: function (prototype, __noSuchMethod__) { return 0 } break; export __noSuchMethod__;");
tryItOut("constructor, prototype;\n\n");
tryItOut("L:with({__noSuchMethod__: (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></> <<= <x/> >>>= \"\" )}){/*infloop*/for(var __count__ = __iterator__; true; <x/>) {} }");
tryItOut("break L;");
tryItOut("if([, __iterator__, ] = [, , , ({ __count__: __iterator__ }), ]) { if ((-//h\nwindow)(({__proto__: (prototype.__noSuchMethod__) })), <><xxx>{__proto__}</xxx></>)) {gc()((0x99).call).\tcall } else var prop;}");
tryItOut("return <y><z/></y>;if(true) {const __iterator__ = yield;, __noSuchMethod__ = <x><y/></x>; } else  if (*) return this; else {__parent__; }");
tryItOut("/*for..in*/for(const prop in ((function  constructor (__iterator__, prototype) { yield true } )([[]]))){throw -3/0; }const __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("export *\n/*infloop*/L:for(let __noSuchMethod__; <><x><y/></x></>; *) {yield; }");
tryItOut("[1,2,3,4].map");
tryItOut("__iterator__ = prop;");
tryItOut("do continue L; while(((window.yoyo(((p={}, (p.z = *::*)()))).isPrototypeOf([11,12,13,14].sort))) && 0);");
tryItOut("if((<x><y/></x>.(this)[\n])) {@foo;\n([]);\nyield; } else  if (new Iterator()) __proto__ =  '' ;");
tryItOut("M:switch() { case 5: throw <x><y/><\f/x>;break; default: gc()let prop;throw <\t><x><y/></x></>\nbreak;  }");
tryItOut("L: switch(this.zzz.zzz) { case 8: break; case \n*: yieldbreak; default: const __count__ = <x/>, constructor;break;  }");
tryItOut("/*infloop*/for(let __proto__; (prototype.constructor); *.propertyIsEnumerable(\"__iterator__\")) {continue ; } const __iterator__;");
tryItOut("{}\n/*for..in*/for(let prototype.prototype in  \"\" ) do export *; while((<y><z/></y>) && 0);");
tryItOut("{{{} }( '' ); }");
tryItOut("/*infloop*/for(const ({ __parent__: __noSuchMethod__ }) = (arguments)[<x/>].watch(\"__parent__\", function  __iterator__ (constructor, __iterator__)eval(\"gc()\", window)); constructor; <></>) {throw ({});L:  }");
tryItOut("M:if(yield false) {; } else  if (<x/>.__count__) {return; }let (__count__) { export *; }");
tryItOut("if(<x/>) { if (null) {(true); }} else const constructor,  '' ;");
tryItOut("__proto__ = __count__\n");
tryItOut("if(this.__defineGetter__(\"prototype\", (function ([y]) { }).watch).__count__ |= new 3()) {export prop;throw undefined; } else {return <x/>;/*for..in*/M:for((true)(<x><y/></x>) in (([1,2,3,4].map)(__iterator__.prototype =  \"\" ))){( \"\" ); } }");
tryItOut("L:while((<y><z/></y>.eval(window)) && 0)export *;");
tryItOut("");
tryItOut("throw  /x/g  ? ( /* Comment */undefined) : (false.hasOwnProperty(\"__count__\"));");
tryItOut("__count__, prototype = @foo\n");
tryItOut("/*infloop*/do /*for..in*/for(prop in ((<x/>)(1e+81)))continue M; while(<y><z/></y> ^ prototype__parent__);");
tryItOut("try { gc() } catch(prop if (function(){with({}) for(let y in [5,6,7,8]) try {  /x/  } catch(function::constructor if 1.2e3) { gc() } catch(prototype) { yield [,,]; } finally { yield; } })()) { continue L; } ");
tryItOut("while(((Error(0x99))) && 0)export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__iterator__ in  ''  .@ <x><y/></x>) ;");
tryItOut("if(<><x><y/></x></\f> .@x:: <x><y/></x>) { if ((({__noSuchMethod__: <><x><y/></x></>}))) { } else {continue L; }}");
tryItOut("/*infloop*/for(var prop = [__count__, , constructor, , ] = undefined &= null; .2.*; __noSuchMethod__.__iterator__ setter= <y><z/></y>) /*for..in*/L:for(let __parent__ = <x><y/></x>.* in <y><z/></y>) {throw -3/0; }");
tryItOut("if(({ set prop(__count__) { return this } , __count__: <x/> })) <><x><y/></x></>; else  if ((__iterator__)()) export *; else ;");
tryItOut("let(__noSuchMethod__ = __noSuchMethod__.__count__ = constructor = <><x><y/></x></>, [, , ] = undefined.@foo) ((function(){<><x><y/></x></>['__count__'] = prototype;})());");
tryItOut("{let(__iterator__ = this, constructor =  /x/ ) { ;throw try { throw *; } catch(__count__ if <x><y/></x>) { gc() } finally { continue M; } ; }");
tryItOut("/*for..in*/L:for(let constructor(<x/>) in this) {{}\t }");
tryItOut("/*infloop*/do yield; while(new function ([y]) { }((-1)));");
tryItOut("do {([,,z1]);@foo; } while((new (#0=({prototype: (function ([y]) { })()}))) && 0);");
tryItOut("do {return;throw @foo; } while((.2) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in window) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in [11,12,13,14].some) {if(#1=[constructor]) return -0; else {export *; } }");
tryItOut("/*infloop*/L:while(RegExp(*, false))/*for..in*/for(var [prop, __proto__] = case 9: /*for..in*//* nogeckoex bug 349964 */M: for  each(prototype in constructor) { }break; /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in __iterator__, __count__) {yield; }break; case 7: let constructor = <x><y/></x>;break; (@foo);break;  in ({a2:z2})) {if(3.141592653589793) return <x><y/></x>; }");
tryItOut("this.zzz.zzz;");
tryItOut("({ __noSuchMethod__: ({ __iterator__: prop }), __parent__: [getter, ({ __count__: constructor, __parent__: ({ __count__: ({ __iterator__: __iterator__, __proto__: __iterator__ }), __count__: __noSuchMethod__ }) })] })");
tryItOut("/*infloop*/L:for(\f '' .eval(0x99).*; (__noSuchMethod__ = <x><y/></x>); <employee id=\"1\"><name>Joe</name><age>20</age></employee> == <><x><y/></x></>) prototype, prop = #1=[#1#];");
tryItOut("/*for..in*/L:for(const __noSuchMethod__((__proto__ = @foo &= false)) in window\n) (1 for (x in []))");
tryItOut("if( /x/ ) {throw <x><y/></x>;constructor }");
tryItOut("/*infloop*/for(__parent__; (-0); function::__iterator__) {throw \x7f; }");
tryItOut("null");
tryItOut("/*for..in*/for(const (prop) in ((function(q) { return q; })([15,16,17,18].map(('haha'.split).call, false)))){} const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([({ __noSuchMethod__: ({ constructor: ({prototype:  \"\" }).hasOwnProperty(\"__proto__\"): constructor }) }), , ({ __iterator__: ({ __proto__: __iterator__ }), __proto__: ({ prototype: __noSuchMethod__, __parent__: constructor }) })] in (new Function)(<><x><y/></x></>)) {; }");
tryItOut("L:if((function (__count__, function::__proto__)1e+81)) {return window;let (prototype) { export prop; } }");
tryItOut("/*infloop*/while((this.__defineSetter__(\"prototype\", (({ __proto__: __parent__, __parent__: __iterator__ }) = 0x99.unwatch(\"constructor\")).__defineSetter__))){<><x><y/></x></>;(null); }");
