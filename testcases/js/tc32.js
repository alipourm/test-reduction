tryItOut("/*infloop*/L:while((<x/> =  '' )){ }");
tryItOut("/*for..in*/for(const [__count__, delete] =  /x/  > __noSuchMethod__ = <x><y/></x> in ({ prop: [, ], __noSuchMethod__: ({ prop: ({ __proto__: function::prototype }) }) }) = <>false++</>) export *; const constructor;");
tryItOut("if(undefined[@foo].yoyo([1,,])) { if (eval(\"export *;\", (<><x><y/></x></>.__noSuchMethod__ = <><x><y/></x></>.__iterator__))) {export __proto__M:if(<><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", (1 for (x in [])))) { if ((Error())) {export __proto__; } else export prop;} }} else {export *; }");
tryItOut("if((<x><y/></x> /= window)) yield;");
tryItOut("export __proto__\n");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((/a/gi)()))continue L;");
tryItOut("{/*infloop*/L:for(const __noSuchMethod__ = __iterator__; <x><y/></x>; <><x><y/></x></>) let __iterator__ =  /x/g , __noSuchMethod__ = 4.;/*for..in*/for(var __proto__ = !*::*[<x><y///h\n></x>] in *) {__count__ = @foo, __noSuchMethod__; } }");
tryItOut("switch([(new Number(<><x><y/></x></>, <x><y/></x>))].propertyIsEnumerable(\"prop\").yoyo((constructor))) { default:  /x/ \nM:switch(*) { default: /*for..in*/for\t(const __proto__ = <x><y/></x> in [[1]]) {yield  /x/g ; }break;  }break; case #0=<><xxx>{__proto__}</xxx></>:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in window) {;yield {}; }");
tryItOut("/*for..in*/L:for(var constructor in constructor.__count__ getter= [15,16,17,18].filter(eval, (-0))) {M:switch(<y><z/></y>) { case 5.0000000000000000000000: break;  } }");
tryItOut("if(undefined >= ([15,16,17,18].some(<x><y\t/></x>, \n<y><z/></y>)) -= (#1=[#1#] -= <x><y/></x>)) {gc()return window; }");
tryItOut("(prop) = __parent__;");
tryItOut("/*for..in*/for(constructor( \"\" ) in 1e81.yoyo(<><x><y/></x></>)) L: break M;");
tryItOut("return;");
tryItOut("while((do export *; while((false) && 0); = prototype.__noSuchMethod__.@foo) && 0)/*for..in*/for(const __proto__ in ((Math.pow)())) let ");
tryItOut("do {export prototype;\n } while((((function(y) { yield y; var __parent__, __iterator__;; yield y; }) % #1=({__parent__: 4.}).yoyo((eval(\"let constructor;\", 1e81)\n)))) && 0);");
tryItOut("if(typeof (1.3 instanceof <x/>)) ;yield;");
tryItOut("if(((033 ? @foo : <y><z/></y>.isPrototypeOf((eval(\"(this);\", [,])))).@foo)) { } else  if ((yield (yield <x/>))) /*infloop*/while((prototype = <y><z/></y>))gc() else {__count__ = prototype; }");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = (yield *.unwatch(\"__count__\")) in prop) {let __parent__, __iterator__; }");
tryItOut("if(*::*.__parent__ = *) { if (((yield <y><z/></y>))) {yield;gc() } else const __parent__;}");
tryItOut("{if((<x><y/></x>)[<x/>]) let __parent__; else {return;const prop, constructor = <x><y/></x>; }with({}) { this.zzz.zzz; }  }");
tryItOut("/*for..in*/for(let __iterator__ = @foo.__defineSetter__(\"prototype\", Math.pow) in (__noSuchMethod__%=__noSuchMethod__)) return;");
tryItOut("let ([, ({ __iterator__: ({ constructor: constructor, __parent__: prototype }), constructor: prop }), , , ] = __count__.( /x/ ) %= (<y><z/></y> += 0.1)) { L:with(({a1:1})){return <><x><y/></x></>;{} } }");
tryItOut("(({}).__lookupGetter__).applyreturn;");
tryItOut("/*for..in*/for(let (constructor)(<x><y/></x>) in ((0/0)((new Array()))))<x/>");
tryItOut("/*for..in*/for(let prototype in __proto__.constructor = <x><y/></x>) {let __noSuchMethod__ = this;return; }");
tryItOut("/*infloop*/do {break ;L:if(\t<y><z/></y> && false) (this); else  if (false.__lookupGetter__(\"prototype\")\t) yield; else {let constructor; } } while(window[<><x><y/></x></>]);");
tryItOut("do {L:if(<y><z/></y>) (window); } while((prop = false >>= *.valueOf(\"number\")) && 0);");
tryItOut("export *;\nvar true;\n");
tryItOut("let(constructor, prototype = ([] = prototype = __iterator__)) ((function(){let(__proto__ = 'fafafa'.replace(/a/g, (new Function(\"gc()\"))), __proto__) ((function(){(<x><y/></x>) = __noSuchMethod__;})());})());");
tryItOut("if(this .@ <x/>) {let __count__, constructor;yield __parent__; } else const __iterator__ = window, constructor;");
tryItOut("/*infloop*/while((eval(\"return;\", @foo))){yield *; }");
tryItOut("if((this.__defineGetter__(\"prototype\", <><x><y/></x></>)(<><x><y/></x></>.__iterator__ = __count__.__defineGetter__(\"__count__\", function(q) { return q; })))) M:if([constructor for (__count__ in window)]) /*infloop*/for(<x><y/></x>; <x><y/></x>; false) yield; else  if (this.__defineGetter__(\"__iterator__\", Math.sin)) {yield __count__; }");
tryItOut("\fif(prop) export *; else  if ('fafafa'.replace(/a/g, function(q) { return q; })) default: case 8: break L;let throw 0; = <x/>;break; const __noSuchMethod__ = window, __noSuchMethod__ =  '' ;case  /x/g : gc()break; case 8: case 4: case null: {}break; case <y><z/></y>: continue\f ;break;  \"\" ;break; break; case ({}): break; \f; const constructor; else {yield [[1]]; }");
tryItOut("/*infloop*/do L:if(<y><z/></y>) {} else { /x/ ;let  get __noSuchMethod__ __count__ (constructor)<x><y/></x> =  /x/g , __proto__ =  /x/g ; } while(<y><z/></y>.propertyIsEnumerable(\"__proto__\"));");
tryItOut("L: { '' ;var __noSuchMethod__ = <><x></><x></>; }");
tryItOut("/*infloop*/L:for((yield ((__noSuchMethod__ = prop)++)); ((({ __parent__: constructor, __count__: __noSuchMethod__ }) = ({ __iterator__: prototype, prop: __parent__ })).watch)\f(); __iterator__.({} .@ constructor)) {<><x><y/></x></>; }\n");
tryItOut("for(let y in [5,6,7,8]) return;\n/*infloop*/do {yield; } while(1.3.prop = this);\n");
tryItOut("with({}) throw __noSuchMethod__;");
tryItOut("M:if(((Error()).eval([1] ? <><x><y/></x></> : #1=[#1#]))) /*infloop*/while([11,12,13,14].map)gc() else  if (__count__.__parent__ getter= new Function) {;/*for..in*/for(__parent__ = null in <x><y/></x>) yield; }");
tryItOut("(this.zzz.zzz.yoyo((uneval( /x/g )) ? (function::function::prop = <><x><y/></x></>) : constructor = <x><y/></x>) ? [(({__proto__: __proto__}))].sort(return window;) for each (prop in [[1]]) if ( /x/g ) : ), (#1=({__parent__: (([1,2,3,4].map).call(false, ))( \"\" ,  /x/g )}))");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = this.__defineGetter__(\"constructor\", ({}).hasOwnProperty) in ({ __proto__: __count__, __count__: __count__ }) = *::*.watch(\"__count__\", (prop).watch)) throw new (function(y) { yield y; yield  /x/ ;; yield y; })(*::* & this, true);");
tryItOut("constructor");
tryItOut("L:switch((function ([y]) { })() < <><x><y/></x></>.throw((@foo.hasOwnProperty(\"__noSuchMethod__\")))) { default: if(*::*) return <><x>//h\n<y/></x></>;break; case 3: prototype =  /x/g , __count__; }");
tryItOut("/*infloop*/while(({a2:z2}).__lookupSetter__(\"__proto__\"))gc()");
tryItOut("<x><y/></x>; const constructorprop = (function ([y]) { })();switch((<><x><y/></x></>.propertyIsEnumerable(\"prototype\"))) { case 2: break;  }");
tryItOut("({}).hasOwnProperty");
tryItOut("/*for..in*/L:for(let __count__ = __proto__ in <y><z/></y>) {gc(); }gc\nexport *;\n const __count__;");
tryItOut("while((\n(delete <x><y/></x>)) && 0){return *::*;<x><y/></x>; }");
tryItOut("L:if(-0 >>>=0.1) { if (<>><y/></x></\n> & __iterator__) /*infloop*/while((typeof function(id) { return id })){const __proto__ = [[1]], __parent__ = null;var constructor; }} else yield;");
tryItOut("for(let y in [5,6,7,8]) with({}) { gc() } ");
tryItOut("L:if((<\rx><y/></x>);) yield *::*; else  if ((Function)(new (3.141592653589793)(*::*, true))) {throw #1=[#1#]; } else {const __iterator__; }");
tryItOut("if(__parent__) {getter; }");
tryItOut("/*for..in*/M:for(let __count__ = (prototype.constructor = -3/0)\n.x::__iterator__ in ((this)(false, <><x><y/></x></>))) {__noSuchMethod__ = <y><z/></y> for each (__iterator__ in 1e+81){let __count__ = this; } }\nswitch((-0)) { case  \"\" : const .2 = <><x><y/></x></>; }");
tryItOut("{L: {false; const __count__; }/*for..in*/for(const -1.__noSuchMethod__ = (eval(\"*::*\", <><x><y/></x\f></>)).__noSuchMethod__ = constructor%=*::* in *::*) continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in ( /x/ )(<><x><y/></x></>, <x><y/></x>)) 0x99;");
tryItOut("do {continue L;return; } while((__noSuchMethod__.throw(<y><z/></y>)) && 0);");
tryItOut("let(prototype) ((function(){let(({ __iterator__: prop, prototype: __noSuchMethod__ })) { for(let y in [5,6,7,8]) prototype;})());");
tryItOut("if((\f<y><z/></y>.throw(this))) yield; else  if (false <<= <><x><y/></x></>) yield <x><y/></x>; else [,,];");
tryItOut("/*infloop*/M:for( /x/  ? <x><y/></x> : .2; <><x><y/></x></>.watch(\"__noSuchMethod__\", Math.pow); null >>=  '' ) {;(1.2e3).watch }");
tryItOut("while(((__proto__)((function ([y]) { })())) && 0)return;");
tryItOut("/*for..in*/M:for(let __proto__ = (uneval(window)) in  '' ) constructor = prop");
tryItOut("if(<><x><y/></x></> @ __noSuchMethod__) { if ((true.isPrototypeOf( /x/ ))) {(1.2e3);return true; } else export *;}\nif(__iterator__.__count__) {(window); }");
tryItOut("if([15,16,17,18].some((1 for (x in [])), <><x><y/></x></> >>  '' )) /*infloop*/L:do {const __noSuchMethod__, prop;return; } while(@foo); else  if (((0)(({a2:z2}), <><x><y/></x></>))) gc() const prop;");
tryItOut("/*infloop*/M:for(let ({ <><x><y/></x></> ^ *::*: (1 for (x in [])), __noSuchMethod__: ({ __parent__: __iterator__, __count__: prop }) }) = var __proto__.__defineSetter__(\"case [,,].__iterator__\\n.__defineSetter__(\\\"prop\\\", function(y) { yield y; yield;; yield y; }): break; \", [1,2,3,4].slice); (Boolean( /x/g )) > function::prop = <><x><y/></x></>; <>yyy</>) {(( /* Comment */true));eval }");
tryItOut("/*for..in*/for([prototype, prop] = ([1] * <x/>) in  \"\" ) {return; }");
tryItOut("L:with(__count__.eval(*::*)){[,]; }");
tryItOut("([[]]).call\n<><x><y/></x></>;\n");
tryItOut("\n");
tryItOut("gc(){function (prop) { yield <x><y/></x>\t }  }");
tryItOut("if(__iterator__.isPrototypeOf( /x/ )) {const __parent__, __parent__;\f{} }");
tryItOut("with({constructor: (uneval(('fafafa'\n.replace(/a/g, (new Function(\"let __iterator__;\"))))))}){<><x><y/></x></>; }");
tryItOut("if((new Function)) { if ((#1=[#1#] ? <x><y/></x> : <><x><y/></x></>\t).propertyIsEnumerable(\"x::__iterator__\")) return <><x><y/></x></>; else {(<y><z/></y>);yield; }}");
tryItOut("/*infloop*/M:for(var prop; @foo; #1=[#1#]) {; }");
tryItOut("L: Math.sin");
tryItOut("L:do {break ; } while((prop) && 0);");
tryItOut("/*infloop*/for(var __count__ = __proto__;  '' ;  /x/g ) {export __parent__; }");
tryItOut("/*for..in*/for(const prototype.prop = ({__iterator__: this}) in prototype) if(<><x><y/></x></>) return; else  if (__noSuchMethod__) const __proto__ = undefined, __parent__ = <><x><y/></x></>; else let __iterator__ = <><x><y/></x></>, __iterator__ = @foo;");
tryItOut("let (({ __noSuchMethod__: ({ prototype: ({ __noSuchMethod__: __iterator__, __iterator__: ({ __count__: __noSuchMethod__, __iterator__: __parent__ }) }), prop: prototype }) }) = * >>= this) { prop = 3.141592653589793 }");
tryItOut("if((('haha'.split).call(true, window))) __count__, prototype; else  if (@foo.watch(\"prop\", (1 for (x in [])))) { } else {export *; }");
tryItOut("throw StopIteration;");
tryItOut("let ([, ] = ((@foo)([,], <><x><y/></x></>))) { /*infloop*/M:for(const ({ __noSuchMethod__: ({ constructor: __parent__ }), prototype: prop }) = [11,12,13,14].some; #0=[prototype = this]; (<x/>.eval( /x/ ))) yield; }");
tryItOut("M:if((0x99 &&  /x/ )) { if (__count__ = <><x><y/></x></>) break M;} else {throw <x/>;export __proto__; }");
tryItOut("while((new (new Function(\"(<x><y/></x>);\"))( '' , false)()) && 0){window; }");
tryItOut("(const prototype = window, get; :: yield  '' )");
tryItOut("let (__proto__ = this) { L: let prototype = undefined; }");
tryItOut("let (<y><z/></y>) { /*infloop*/for(var ({ prototype: __proto__, __parent__: ({ __proto__: [__iterator__, prop, ], __count__: __proto__ }) }) = (this.zzz.zzz); yield > 1.2e3\t.([1]).hasOwnProperty(\"__noSuchMethod__\"); ) {var __parent__; } }");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) { try { throw  /x/g ; } catch(__noSuchMethod__ if  '' ) { throw <x><y/></x>; } catch(prop if (function(){export __proto__;\t})()) { {} } finally {  }  } ");
tryItOut("var prop\n");
tryItOut("/*for..in*/for(const ({ __parent__: ({ __count__: ({ prototype: constructor, __noSuchMethod__: __parent__//h\n }) }), __proto__: ({ __noSuchMethod__: [], prototype: __noSuchMethod__ }) }) in ((new Function)((eval(\"if(3/0) <y><z/></y> else  if (undefined) const prototype, prototype = #3={a:#3#};\", ((1 for (x in []))).call(window, )))))){{return [];return; }return\n }");
tryItOut("if(__count__) {yield;let __count__, constructor; }");
tryItOut("/*for..in*/for(var  /x/g .__iterator__ in (([1,2,3,4].map)((({ get __proto__() { gc() }  }))))){ }");
tryItOut("/*infloop*/do {break ; } while(case 2: gcbreak; );");
tryItOut("/*infloop*/for(const __noSuchMethod__ = (yield __noSuchMethod__.prototype getter= 'haha'.split); ('fafafa'.replace(/a/g, function  prop (prototype){}) > #2=[window.__defineSetter__(\"__noSuchMethod__\", 'haha'.split)].unwatch(\f\"__parent__\")); this.__defineSetter__(\"__proto__\", (new Object()))) {case [z1,,]: export *;throw  '' ;break; default: export *;case 4: break; (1e4);case this: return <x/>;break; constructor, prop;case 6: break; case 7: break;  }\n");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in .2) [1,2,3,4].map");
tryItOut("yield 3;");
tryItOut("/*infloop*/for((eval(\"({ set __count__ __noSuchMethod__ (prop) { export __count__; }  })\", ((uneval(window))))); [<><x><y/></x></> for ( if (undefined) in <y><z/></y>)].__iterator__ = <y><z/></y>; new ((new 'fafafa'.replace(/a/g, /a/gi)([11,12,13,14].map, this.__defineGetter__(\"constructor\", function  __iterator__ (__parent__, prototype) { return <x><y/></x> } ))))(((<x><y/></x>yyy) = \n<y><z/></y>) >>= [1].propertyIsEnumerable(\"__iterator__\"))) let(constructor) ((function(){L:switch(1.3.watch(\"__iterator__\", <x><y/></x>)) { case 1: export __proto__;break;  }})());");
tryItOut("constructor = __count__;");
tryItOut("if(#1=[#1#]) ; else  if (0/0) const __noSuchMethod__ = <x/>;yield __iterator__;");
tryItOut("/*infloop*/for(let [] = [function ([y]) { } for each (function::__proto__ in __parent__)].watch(\"__iterator__\", 'fafafa'.replace(/a/g, <x><y/></x>)); (new Error()); this /= (<x><y/></x>.__defineGetter__(\"__proto__\", (new Function(\"continue ;\")))).__count__) /*for..in*/for(var __iterator__ = constructor = ({ constructor: prop, prop: __noSuchMethod__ }) = [11,12,13,14].map in this) {throw this.__defineSetter__(\"prototype\", function(q) { return q; }); }");
tryItOut("; const __count__;");
tryItOut("with(prop)export *;");
tryItOut("{yield;\nyield 0x99;\n }");
tryItOut("/*infloop*/for(const ({ __parent__: ({ __parent__: ({ prototype: [[__proto__, prototype, , ]] }) }) }) = this.zzz.zzz; __count__ = @foo; prototype = 3.141592653589793) yield __count__;\f");
tryItOut("if(([11,12,13,14].map)) yield\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\tlet prop in ( \"\" .prop =  \"\" .set)) {/*infloop*/do throw undefined; while(prop\n);switch((function (__iterator__) { gc() } )([1,,], prop)) { case new (*)(): /*infloop*/for(null.hasOwnProperty(\"constructor\"); (__count__ = __iterator__); [<x><y/></x> for (__proto__ in 3/0)]) prop = __proto__, constructor;break; /*infloop*/for(<x><y/></x>; @foo; <><x><y/></x></>) {;return; }break; throw <x><y/></x>;do ; while((<x><y/></x>) && 0);break; break M; } }");
tryItOut("/*for..in*/L:for(let [__noSuchMethod__, __count__] = eval(\"const constructor, constructor;\", ({a2:z2})--) in (\n__proto__.__parent__ = ((<x><y/></x>).watch).apply(<><x><y/></x></>))) var function::__iterator__\n");
tryItOut("if(__proto__) continue ; else  if (({a2:z2})) const prototype = <><x><y/></x></>, __iterator__ =  /x/ ; else throw <x/>;");
tryItOut("let (__proto__, constructor = <><zzz>this.__defineGetter__(\"constructor\", new Function)</zzz></>.__lookupSetter__(\"prop\")) { if(__iterator__) { if (<x><y/></x>\n) } else {/*infloop*/\ffor(<x/>; <x/>;  \"\" ) {let constructor, __iterator__;export prop; }export *; } }");
tryItOut("let (__iterator__, prototype) { M:if(undefined) {this__proto__ = [[1]]; } else gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in #1=[#1#]) {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor((let constructor = [,]))//h\n in Function(prototype,  '' )) if(@foo) { if (-3/0) export __iterator__; else gc()}");
tryItOut("L:do (<x><y/></x>); while((<><x><y/></x></>) && 0);");
tryItOut("let (__noSuchMethod__, __iterator__) { L: {; } }");
tryItOut("L: export *;");
tryItOut("{const __iterator__ = @foo;(__proto__); }");
tryItOut("export __count__;");
tryItOut("M:with({__count__: []}){yield window; }");
tryItOut("yield;\nM:if(__proto__ *= <y><z/></y>.prop) { if (-3/0 <= eval(\"return 1.2e3;\", 3.141592653589793)) export __count__; else <x/>}\n");
tryItOut("export *; const prop;");
tryItOut("L:do switch( \"\" ) { case  /x/ : break; default: yield;__iterator__ = [[1]];case 7: var __iterator__;break; case 9: {}break;  } while((undefined()) && 0);");
tryItOut("if(-undefined) export *;");
tryItOut("let(__proto__ = <><x><y/></x></> = *.__lookupSetter__(\"prop\"), prototype = __count__ ? (uneval(<y><z/></y>)) : undefined >>>=*::*[<x><y/></x>]) ((function(){let(__count__ = ([<x><y/></\rx> if (5.0000000000000000000000)])) ((function(){this.zzz.zzz;})());})());");
tryItOut("gc()\n;");
tryItOut("constructor = __count__;");
tryItOut("/*infloop*/while(this++){switch((__iterator__ = window)) { default: break; case <x><y/></x> & __noSuchMethod__: 1e81; } }");
tryItOut("({ __parent__: ({ __noSuchMethod__: constructor }) }) = yield;");
tryItOut("L: {({ prototype: prototype, prop: prototype }), delete;return <!--yy-->; }");
tryItOut(";/*for..in*/M:for(const [let, prop] = #0=({prototype: __proto__}) in  /x/ ) const __count__ = @foo, __noSuchMethod__;");
tryItOut("{}\nthrow __parent__;");
tryItOut("do default: break; case  '' --: (x::__iterator__);\nfunction () { return <><x><y/></x></> } \nbreak;  while((this .@x:: <><zzz>true</zzz></>.valueOf(\"number\")) && 0);");
tryItOut("{/*for..in*/for(__count__ in <x/>) gc() }");
tryItOut("do yield null; while(( \"\" ) && 0);");
tryItOut("{yield  '' ;(\t '' ); }");
tryItOut("if(([11,12,13,14].map).call(<x><y/></x>.(*), )) \f{yield; const __iterator__; }");
tryItOut("switch(this) { case 9: break; break; default: break; case <x/>: case (function ([y]) { })(): window;break; break; case window: break; case 7: break; case #1#: (*::*);break; case this: break; case 9: continue M;break;  }");
tryItOut("<x><y/></x>;");
tryItOut("\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in  \"\" ) <x><y/></x>;");
tryItOut("throw __proto__;");
tryItOut("if(RegExp(1e81 .@ @foo)) {break\f ;export *; } else  if (( /* Comment */__proto__%=(({ get function::__iterator__() { return <x><y/></x> }  })) >>> constructor = <y><z/></y>)) throw <x/>;");
tryItOut("let([function::__count__, , , [, , constructor, __proto__], []] = #0=[1,,], __iterator__) ((function(){for(let y in []);})());");
tryItOut("__proto__;");
tryItOut("/*for..in*/for(var ((__noSuchMethod__[5.0000000000000000000000]))(false.watch(\"__iterator__\", 'haha'.split)) in ((eval)(((function(y) { yield y; if(@foo) yield; else {export __noSuchMethod__; }; yield y; }).call((new (<><x><y/></x></>)( /x/g )), <><x><y/></x></>.__defineGetter__(\"prop\", new Function), window)))))yield 5.0000000000000000000000;");
tryItOut("return <x/>;\nconst prop =  '' ;\n");
tryItOut("{break M;/*infloop*/L:\tdo {(@foo); } while(*); }");
tryItOut("/*infloop*/M:do yield; while([15,16,17,18].filter(<><x><y/></x></> ? [] : null, (<><x><y/></x></>.prop = <x><y/></x>.(<><x><y/></x></>))));");
tryItOut("var ({ constructor: __count__ }) = yield false, __iterator__ =  /x/g ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = ('fafafa'.replace(/a/g, /*\n*/({ __noSuchMethod__: ({ __proto__: prop, __proto__: __noSuchMethod__ }) })function  <x><y/></x> (__parent__, __noSuchMethod__)(<><x><y/></x></>\n))) if ((#3={a:#3#} === (function ([y]) { })())) in @foo.hasOwnProperty(\"__count__\")) \t");
tryItOut("if(((yield __count__%={}))) gc() else  if ((<><x><y/></x></> < <x><y/></x>)) ; else {gc() }");
tryItOut(" set __noSuchMethod__ __proto__ ()((__proto__((new Function(\"{}\"))()) = new ([<> for each (__proto__ in #1#) for (function::__iterator__ in function ([y]) { })</>].map(function(q) { return q; }))(1.2e3 + <x><y/></x>)).prototype = eval(\"if(<><x/></>) {yield prototype;prop; } else  if (( '' .propertyIsEnumerable(\\\"__count__\\\"))) throw window;\", !__noSuchMethod__ & 3))");
tryItOut("M:if((prop = <><x><y/></x></>)) {var __proto__, constructor;[] } else  if (0) {return; } else {__proto__ = <y><z/></y>, constructor; }");
tryItOut("/*infloop*/do return; while(this.__defineSetter__(\"__count__\", new Function));");
tryItOut("if( \"\"  ::  \"\" ) {switch(.2) { case 0: break;  } } else  if ((let = <x><y/></x> for each (__noSuchMethod__ in [1,,]))) gc() else {return; }");
tryItOut("{if(<><xxx>{__iterator__}</xxx></>) M:while((undefined) && 0){const __parent__, __noSuchMethod__ = *::*; } else  if (this) {} }");
tryItOut("yield <x/>;\n/*infloop*/M:for(const __noSuchMethod__; ({a1:1}); <x><y/></x>) {throw  /x/ ;let constructor, __count__; }\n");
tryItOut("/*for..in*/for(prototype.prop in (((new __iterator__ = <y><z/></y>.__defineGetter__(\"__proto__\", @foo)((function (__parent__) {  /x/g ; } ).call(__iterator__, undefined, [1,,]).@foo)).watch)(__iterator__))){false;return; }");
tryItOut("gc()\nyield;");
tryItOut("let(__noSuchMethod__, constructor = (<x><y/></x>.__lookupGetter__(\"__proto__\"))) { constructor = __proto__;");
tryItOut("if(function () { ([,]); } ) M:with(0.1){; } else  if ((uneval(__proto__.(<x><y/></x> ? __count__ = window : throw [,,z1];)))) ");
tryItOut("M:if(<x/>) { if (undefined) return this; else yield;}");
tryItOut("export __proto__\n");
tryItOut("throw __noSuchMethod__;");
tryItOut("with((null)){return; }\r\nswitch(__noSuchMethod__) { case 0: var __iterator__;break; case 6: break; default: function ([y]) { };break;  }");
tryItOut("with({({ [1].prototype: [] }): yield *::*}){ }(/");
tryItOut("/*infloop*/for(const __proto__; __iterator__ = undefined; constructor = 3/0) {L: { } }");
tryItOut("{}");
tryItOut("/*for..in*/for(let __parent__ in 3) {return __parent__;yield undefined; }");
tryItOut("if(<x><y/></x>) { if (undefined) ;} else {gc()export prototype; }");
tryItOut("while((gc @ .2) && 0){return; }");
tryItOut("for(let y in [5,6,7,8]) with({}) __noSuchMethod__ = __proto__;");
tryItOut("this.zzz.zzz; const constructor;");
tryItOut("if((( /x/g .prototype = <x><y/></x>) for each (__proto__ in #2=<x/>) for each (__proto__ in [,]) for (<y><z/></y>.constructor in []) if (.2))) new Function else  if (function(y) { yield y; ( \"\" )\n; yield y; }()) const __noSuchMethod__, __proto__;");
tryItOut("throw StopIteration;");
tryItOut("for(let y in []);");
tryItOut("L:if(<x><y/></x>) export *;");
tryItOut("/*infloop*/for(let constructor; <><x><y/></x></>; window) {export *; }");
tryItOut("return  ''  >>> __noSuchMethod__.__defineSetter__(\"__iterator__\", (new Function(\"return <x><y/></x>; const __proto__;\")));");
tryItOut("/*for..in*/for(const constructor in ((this.__defineGetter__(\"prototype\", ([,]).watch))(((new (prototype = this)(*[ \"\" ]) if (3)))))){gc() }");
tryItOut("/*for..in*/M:for(var yield in ((Math.pow)(<x/>))){return null; }");
tryItOut("continue L;");
tryItOut("switch(this.zzz.zzz) { case 7: /*infloop*/L:do {const constructor =  /x/g , __noSuchMethod__ = <><x><y/></x></>;yield <><x><y/></x></>; } while( '' );\nconst constructor;\n((null > <><x><y/></x></>).valueOf(\"number\"));break; case [15,16,17,18].some((new Function(\"(<x><y/></x>);\")), @foo\n), (__parent__)(): /*infloop*/while(__count__)return  /x/ ;break; with({}) { throw window; } break; L:with({__noSuchMethod__: ([*])})function::constructor;break; break; case 3: export *;\n;\ncase this.__defineGetter__(\"[__iterator__]\", function (prototype)arguments): break; default: export *;break; case (typeof <x><y/></x>): break; case (new <><x><y/></x></>(<x/>)): var constructor, __noSuchMethod__ = window; }");
tryItOut("M:if(('fafafa'.replace(/a/g, Function)) .@ window) L:do { /x/ export *; } while((<x/>) && 0); else {/*for..in*/for(__proto__ in ((function (__noSuchMethod__) { yield; } )(<x><y/></x> ^ [<x><y/></x>].map(function(y) { yield y; continue M;; yield y; })))){throw #3={a:#3#}; } }");
tryItOut("L:if((__parent__ = __parent__.eval(<y><z/></y>))) ;");
tryItOut("export __proto__;\nexport prop;\n\nL:with({__parent__: constructor = <><x><y/></x></>}){ const constructor; }");
tryItOut("with({__iterator__: <x/>})(new Function(\"__proto__, __iterator__ = <x><y/></x>;\"))");
tryItOut("{with(<y><z/></y>)return;yield;\nprototype =  \"\" ;\n }\f");
tryItOut("/*infloop*/do yield; while(function ([y]) { }['constructor'] = (__proto__ = <x><y/></x>));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in false) let __iterator__; const prop;;");
tryItOut("switch( /x/g ) { default:  }");
tryItOut("export *;");
tryItOut("(<><x><y/></x></>);");
tryItOut("with({}) { for(let y in [5,6,7,8]) yield  /x/g ; } ");
tryItOut("/*infloop*/L:for((gc)((({prop: prop}))); this.zzz.zzz; new ((typeof (__noSuchMethod__.prop setter= Math.pow))[(__noSuchMethod__ = __parent__).__defineSetter__(\"__count__\", Function)])(__parent__ =  /x/ , window.__iterator__)) {{{{}throw <x><y/></x>; }do if(<x><y/></x>) { if ((<><x><y/></x></>).watch) {gc() } else {var __count__; }} while(((getter.prototype = (null)[false])) && 0); } }");
tryItOut("/*infloop*/for(let (__noSuchMethod__, __noSuchMethod__ = (__count__ = window)) [11,12,13,14].some; (([1,2,3,4].map).apply)() === [15,16,17,18].filter(({}).hasOwnProperty, false); (@foo > ('haha'.split)( /x/g , [,]).hasOwnProperty(\"prop\"))) {return <y><z/></y>; }");
tryItOut("do {export constructor; } while((<x><y/></x>) && 0);");
tryItOut("let(__noSuchMethod__ = ((p={}, (p.z = [z1,,])())), __count__) { this.zzz.zzz;");
tryItOut("if(constructor{ __count__: ({ prop: ({ __noSuchMethod__: [constructor, __parent__, , __noSuchMethod__], __proto__: ({ 1e-81: prop }) }), prototype: ({ __parent__: ({ __proto__: prototype, prop: prop }) }) }) }) = <><{prop}></{prop}></>) { if ((new <><x><y/></x></>()).valueOf(\"number\")) switch(<><ccc:ddd> </ccc:ddd></>) { case yield (new Error((1e4 != <x><y/></x>), <x><y/></x>)): break; case  /x/g .eval(*::*).__count__: break; case 9: return <><x><y/></x></>; }} else {/*infloop*/while(__count__ = constructor.unwatch(\"__proto__\"))let prop = <><x><y/></x></>, __noSuchMethod__;with(window)prop = <x><y/></x>; const prop; }");
tryItOut("L:do var constructor, constructor =  '' ; while((3.__defineSetter__(\"__count__\", gc)) && 0);");
