tryItOut("{/*infloop*/for(__proto__\f; ((({__proto__: *::*, __proto__ getter: * })) ? (window) : __proto__ = @foo); (__parent__.__count__ setter= new Function <<= ((<y><z/></y>)[window]))) {({}).__lookupGetter__const __iterator__ =  \"\" ; } }");
tryItOut("/*for..in*/for(const prop in <><x><y/></x></> @ <><x><y/></x></> >  \"\" ) {prop; }/*infloop*/M:while( \"\" )__proto__ = this, __noSuchMethod__ = <x><y/></x>;");
tryItOut("yield false\n");
tryItOut("/*infloop*/for(let prototype; 3/0; *) break L;");
tryItOut("(*::*)\nMath.pow\n");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = function  prototype (prototype, __noSuchMethod__) { yield <x><y/></x> }  in __noSuchMethod__) /*infloop*/while(window)(__count__);");
tryItOut("/*for..in*/for(let [prototype, delete] = [1,2,3,4].slice in this++) \tyield <x><y/></x>\n");
tryItOut("L:with({}){__noSuchMethod__; }");
tryItOut("/*infloop*/L:for((__count__ = __proto__); -3/0; ) {Function__parent__ = 4., __proto__; }");
tryItOut("if(undefined) {switch(#1#) { case <>\t<x><y/></x></>: break;  }/*infloop*/do {continue M;throw __parent__; } while(void (function ([y]) { })()); } else {/*infloop*/M:for(var __count__ = false; true; <><x><y/></x></>) {{} }export __proto__; }");
tryItOut("if(new (new Function(\"return;\"))().constructor) { if (*::*) {with({constructor: window}){var __proto__, __iterator__ = [z1]; }/*infloop*/for(const constructor; *; [1,,]) {yield; } } else default: }");
tryItOut("this .@x:: ({ __noSuchMethod__: ({ prop: __count__ }) }) = (*::* ? -1 : <y><z/></y>) > new Array()\n/*infloop*/do yield; while\f((#1\f=*) :: ([prototype/*\n*/, , prototype, , __noSuchMethod__] = new <x><y/></x><x><y/></x><ccc:ddd></ccc:ddd>));\n");
tryItOut("return;");
tryItOut("/*for..in*/");
tryItOut("prop = __parent__;");
tryItOut("L:with({__proto__:  '' })yield;");
tryItOut("if(#1=[(yield ((function ([y]) { })().yoyo( '' )))]) {return __iterator__;gc() } else {return 1e-81;/*for..in*/for(const [__iterator__, prototype] = <x/> in window) {throw false; } }");
tryItOut("{const prop = window }");
tryItOut("throw StopIteration;");
tryItOut("with({prop: @foo - <y><z/></y> ? (constructor\f %= [,,z1].__defineSetter__(\"__proto__\", function(y) { yield y; {}; yield y; })) : (<x><y/></x>.( /x/g )).prototype}){/*for..in*/for([prop, __proto__] = (/a/gi)(//h\n) in  /x/g )  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x><y/></x>) {gc() }");
tryItOut("/*for..in*/for(var __parent__ in ((({}).__lookupGetter__)([,]))){with({prototype: <><x><y/></x></> .@x:: 0x99})/*infloop*/for(__count__; __noSuchMethod__; __proto__) {throw <x/>; } }");
tryItOut("/*infloop*/do {var prototype = true, prototype; } while(<y><z/></y>)\n");
tryItOut("while((prototype.prop = <><xxx>{__parent__}</xxx></>) && 0){yield <y><z/></y>;; }");
tryItOut("/*infloop*/for(__noSuchMethod__ = new function ([y]) { } *= #3={a:#3#}(new window); __parent__.(yield null); <y><z/></y> + (({ get function::__proto__(__proto__) { yield (new Function(\"return;\")) }  }))) {throw new (<x><y/></x>)(<x><y/></x>, <x/>); }");
tryItOut("\nreturn prototype;\n");
tryItOut("/*infloop*/while((__parent__.prototype = (__iterator__.unwatch(\"__iterator__\")) >>> ({a1:1})))/*for..in*/for(var __noSuchMethod__ in ((function (prototype) { yield __parent__ } )(constructor.((-0))))){ }");
tryItOut("M:if( \"\" ) break ; else  if (<y><z/></y>) export constructor; else {null; }gc()gc()");
tryItOut("/*for..in*/for(constructor in 0.1) {export *;(<x><y/></x>); }");
tryItOut("if(<><x><y/></x></>) continue M; else  if /*\n*/(0x99\f) <><ccc:ddd><x>\t<y/></x> </ccc:ddd></> else (.2).call");
tryItOut("while((new Number(prototype.prop, ( /x/ .constructor))) && 0)let (__noSuchMethod__ = this) { ; }");
tryItOut(";");
tryItOut("do with({__parent__: <><x><y/></x></>}){yield <x><y/></x>; } while((new x::prototype((prototype.constructor getter= Math.pow)\f[arguments + [1]])) && 0);");
tryItOut("/*infloop*/do {constructorwith({__parent__: .2}){continue L; } const __iterator__; } while(yyy);");
tryItOut("let(__noSuchMethod__ = <><x><y/></x></> >>> prop, constructor = false.__lookupGetter__(\"constructor\")) ((function(){let(prop = #1=({constructor: true})) ((function(){([[1]])(1.2e3) = prototype;})());})());");
tryItOut("if([[]].@foo) { if (((([prop]) for each (__parent__(<><x><y/></x></>) in *) for each (__proto__ in <y><z/></y>)))[#1=({__iterator__: undefined -  '' })] , >prototype<employee id=\"1\"><name>Joe</name><age>20</age></employee>/*</>) export *; else gc() const constructor;}");
tryItOut("/*infloop*/for(prototype; ([ \"\" ].sort(gc) !== ((uneval(1e+81)))); <x/> .@*:: false) {[,,];(constructor); }");
tryItOut("{}");
tryItOut("-");
tryItOut("const __count__ =  \"\" ");
tryItOut("{;throw window; }");
tryItOut("\fwhile(([this, __count__, new ((((Math.sin).call).apply).call)(), , __noSuchMethod__] = ({ prop: __parent__ })) && 0)<x/>;");
tryItOut("break M\n");
tryItOut("if((( /x/ ).__defineSetter__).call(true, .hasOwnProperty(\"__parent__\"))) return <x/>;");
tryItOut("if(prop = constructor =  /x/g ) { if (<y><z/></y>) with({constructor: [function ([y]) { }]})var __parent__ = <x><y/></x>, __count__ =  '' ;} else return;");
tryItOut("/*infloop*/M:\fwhile(this.__defineSetter__(\"__parent__\", ({}).__lookupGetter__))while(((yield undefined)) && 0)");
tryItOut("return ('fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; }));");
tryItOut("/*for..in*/for(function::prototype in (('haha'.split)(<><y><z/></y></>))){prop = __count__, prototype;/*infloop*/for(const __noSuchMethod__; __parent__.*; <x><y/></x>.(*::*)) {yield; } }");
tryItOut("/*for..in*/M:for(var (window)(__count__\n.__count__ setter= Math.sin) in __parent__.constructor = [1,,].isPrototypeOf(<x><y/></x>.propertyIsEnumerable(\"__parent__\").propertyIsEnumerable(\"__iterator__\"))) {<><x><y/></x></>;var prop = <x><y/></x>, prototype; }");
tryItOut("L: {1e-81; }");
tryItOut("if(<xxx>{__proto__}</xxx>) __parent__ = [11,12,13,14].filter else  if (({__noSuchMethod__ getter: 3,  set constructor __iterator__ (default: break; , __count__) { return window }  })) export \f__noSuchMethod__; else var __parent__;");
tryItOut("/*infloop*/M:do switch( /x/ ) { default: break M;case 3.141592653589793: case this: break; case .2: __iterator__;yield;case <x/>: gc()break; case 7: gc() } while((<x><y/></x>.(<><x><y/></x></>).@foo) .@x:: this['__count__']);");
tryItOut("throw __parent__\f;");
tryItOut("return; const __parent__;");
tryItOut("L: {(1.3);export *; }");
tryItOut("with({}) for(let y in [5,6,7,8]) prototype = prop;");
tryItOut("throw __proto__;");
tryItOut("L: with({prototype: *::*.propertyIsEnumerable(\"__iterator__\")}){{}({ prototype: ({ prototype: __noSuchMethod__, __noSuchMethod__: prop }) }) }");
tryItOut("/*for..in*/for(let [prototype, prop] = function(id) { return id } in 3) {return *::*;\ncontinue ;\n }");
tryItOut("yield prop; const __parent__;");
tryItOut("M:switch([(constructor = arguments)]) { default: break; break; case 4: break;  }");
tryItOut("/*for..in*/for(const __proto__ = new (uneval(((prototype.eval(try { return; } catch(__proto__ if (function(){;})()) { __count__ = <x><y/></x>, __noSuchMethod__ =  /x/ ; } catch(prop) { gc() } finally { return <x/>; } )).@*))) in [<x><y/></x>--].sort(<><x><y/></x></>)) {__iterator__.__noSuchMethod__ = __proto__;const prop, constructor = false; const __parent__; }");
tryItOut(";return null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [,]) const __noSuchMethod__ = function::constructor, __parent__ = window;");
tryItOut("prototype = prototype;");
tryItOut("return true;");
tryItOut("__parent__");
tryItOut("{if(<y><z/></y>.valueOf(\"number\")) {var __parent__ = this; } }");
tryItOut("/*infloop*/for(__iterator__; (prototype.(this.__defineSetter__(\"prototype\", function  prop () { yield window } ))).@*; (<x><y/></x>)[constructor]) if((__noSuchMethod__ = __parent__) .. (window)) { if ( /* Comment */[1]) function (__parent__, constructor) { return  \"\"  }  else { }}");
tryItOut("try { for(let y in []); } catch(__parent__ if constructor) { yield <x><y/></x> /= <><x><y/></x></>; } catch(__parent__) { __noSuchMethod__ = __iterator__; } finally { throw StopIteration; } ");
tryItOut("with(<x/> /= @foo){yield 1e+81; }");
tryItOut("L:if(function::__count__ = <><x><y/></x></>) {}{\t} else  if (~window) {(function(id) { return id });return arguments; } else constructor = continue ;, ;");
tryItOut("yield null;");
tryItOut("let(__count__) { function  prototype () { yield; } ");
tryItOut("(#1=[#1#])\n");
tryItOut("with({__iterator__: (__proto__.__proto__ setter= __parent__)}){/*for..in*/for(const __noSuchMethod__ = #3={a:#3#} in (-0)) return false; }");
tryItOut("L: yield\n/*infloop*/for(let [__noSuchMethod__] =  /x/ .watch(\"__proto__\", eval); yield ({a1:1}); (__count__ =  '' )) export __count__;");
tryItOut("with({__count__: (__iterator__.prototype)})(<><x><y/></x></>).apply");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in <x/>) {; }");
tryItOut("return ([,,z1] ? <><x><y/></x></> : #3={a:#3#}).throw([function::__noSuchMethod__].prop.__defineGetter__(\"prototype\", Function));");
tryItOut("/*infloop*/for(false ^ (let (constructor) eval(\"throw @foo;\", (<x><y/></x> ? 4. : 4.))//h\n); [11,12,13,14].sort;  /x/ ) return  /x/g ;");
tryItOut("return ();");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in [11,12,13,14].some) L:if(0/0) break ;, __noSuchMethod__; else  if (<><x><y/></x></>) {continue L; }");
tryItOut("{M:switch(0.1.__defineSetter__(\"__count__\", (new Function(\"prototype, __iterator__;\")))) { case 2: {}default: function(q) { return q; }case (constructor = undefined): /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [,,]) {let __noSuchMethod__, prop = -0;throw [z1,,]; } } }");
tryItOut("with({}) throw let (__iterator__)  /x/g ;");
tryItOut("L: throw try { {} } catch(constructor if (function(){{}})()) { (null); } catch(prop if (function(){return [];})()) { export *; } finally { return <x/>; } ;");
tryItOut(";");
tryItOut("with({__iterator__: <y><z/></y>}){(<x><y/></x>); }");
tryItOut("M:if(let (x::__noSuchMethod__ = (window if ([,])) .@*:: 1e-81\n, __iterator__ = (033++)) RegExp()) { if ((this.__defineGetter__(\"function::__parent__\", ({}).hasOwnProperty))) {let [__iterator__, __parent__, __iterator__], __iterator__ = -0; }} else {throw <x><y/></x>;with([1,,])return; }");
tryItOut("L:if(__iterator__.__defineSetter__(\"__noSuchMethod__\", *)) { if (new <x/>()) {}} else {L: 3.141592653589793; }");
tryItOut("L:if( /* Comment */__noSuchMethod__.prop = <><x><y/></x></>.__lookupSetter__(\"constructor\").unwatch(\"__noSuchMethod__\").eval(undefined)) {/*infloop*/do {/*infloop*/for(let __parent__; undefined; ( /x/g .__lookupSetter__(\"prototype\").*)) gc() } while( }");
tryItOut("let(__proto__) ((function(){(prototype);})());\n/*infloop*/do prototype = prop; while(/a/gi);\n");
tryItOut("/*infloop*/for(var prop; <y><z/></y>.__defineSetter__(\"function::prototype\", eval); __count__ = __parent__) /*infloop*/do ; while(<x><y/></x>);");
tryItOut("with({}) {}");
tryItOut(" const __proto__;");
tryItOut("return;");
tryItOut("/*infloop*/for(\tlet __iterator__; #0=({__parent__: window}); 0x99.__lookupGetter__(\"prop\") ^= __noSuchMethod__) { get __proto__ __parent__ (//h\nprototype, __count__)__count__.(undefined);{{switch(undefined) { case  '' : break;  }export *; } } }");
tryItOut("/*for..in*/for(const [function::__noSuchMethod__, __iterator__] = (-1.@foo) in  /x/g ) {return; }");
tryItOut("L: break L;");
tryItOut("({}).hasOwnProperty");
tryItOut("{return; }");
tryItOut("for(let y in [5,6,7,8]) with({}) try { prototype } catch(function::__iterator__ if (function(){return prop = 5.0000000000000000000000;})()) { throw __parent__; } ");
tryItOut("/*infloop*/do <><x><y/></x></>; while(<x/>);");
tryItOut("{M:if([[]]) {yield;null; } else  if (<x><y/></x>) [1,2,3,4].slice }");
tryItOut("gc()\n");
tryItOut("if((( /x/g )().__defineGetter__(\"__proto__\", ({}).__lookupGetter__) ? __noSuchMethod__.(({a1:1})) : (new Function).__proto__ = ([[1]] ? -3/0 : <x><y/></x>))) export prototype; else  if (<x><y/></x>.(<x><y/></x>)[(<x/>.@foo)]) {__parent__ = false; } else if((<><x><y/></x></> %= [1,,]\r)) __count__ = <><x><y/></x></>; else  if (window ? 0 :  ''  * (<y><z/></y> <<  '' )) {export prop; }");
tryItOut("/*for..in*/for(const prop = function::__iterator__ >> <><x><y/></x></>.throw(( /x/  <<= 1.3[__parent__ = constructor])) in __parent__ = __proto__%=window) {{yield true;/*for..in*/for(let __proto__ in *) yield false; }return; }");
tryItOut("yield undefined; const __proto__;");
tryItOut("/*infloop*/do {L:if(undefined) let prototype = window, prototype; else  if (<x><y/></x>) {yield; }while(((<x/>())) && 0){export *; } } while(prototype.prototype);");
tryItOut("yield 033;");
tryItOut("if(<><>typeof #1=[#1#].propertyIsEnumerable(\"__proto__\").valueOf(\"number\")</></>) { if ('fafafa'.replace(/a/g, function(y) { yield y; set;; yield y; })) {return;/*infloop*/for(let __iterator__; (eval(\"0/0\", 3/0) <= const __noSuchMethod__, __count__); __iterator__) {} }} else if(this) yield true; else  if (true) [1,2,3,4].slice else var constructor;");
tryItOut("L: {break M;return; }");
tryItOut("if( '' ) {\t if ((prototype%= '' )) {yield; }} else {__noSuchMethod__ = <><x><y/></x></>, prototype; }\nif(prototype) throw [z1,,]; else  if (true) {prop = 033; } else {gc()yield; }\n");
tryItOut("if(typeof -3/0) {[1,2,3,4].mapgc() } else  if ((#1=[#1#].prop = @foo)) let __iterator__\n");
tryItOut("with(new Function({}, null)){let constructor, prop = @foo; } const x::__iterator__;");
tryItOut("throw false;");
tryItOut("with({}) { __count__ = __iterator__; } ");
tryItOut("return yield undefined;");
tryItOut("if((__parent__ = [,]++)) { if (prototype.(((Math.sin).call)(-3/0, yield;))) {const {let __proto__, __noSuchMethod__; }; } else export constructor;}");
tryItOut("M:with({__noSuchMethod__: \n<><x><y/></x></>}){continue M;export *; }");
tryItOut("/*infloop*/for(let constructor; (<x><y/></x> >>> *::* += <><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\")); <{__proto__}> </{__proto__}>) @foo;\nreturn {};\n");
tryItOut("if(__parent__ = <y><z/></y>) { if (window) {(this); } else {;; }}");
tryItOut("if((__iterator__ = undefined.prop)) {return;(new Function(\"(<><x><y/></x></>).__defineSetter__\")) }");
tryItOut("if(<x/>) {throw  '' ;let __parent__, __proto__; } else  if (prop) {{}export *; }");
tryItOut("L:switch(new RegExp()) { case 5: L:if(__parent__ = <y><z/></y>) { if (@foo;) break ;} else return function(y) { yield y; (<x><y/></x>);; yield y; };break; break; {}break; default: export *;break;  }");
tryItOut("with({__noSuchMethod__: prop}){gc()let constructor; }");
tryItOut("/*for..in*/for(__proto__ = window(__noSuchMethod__, 0/0) in <x/>) let __proto__, __iterator__");
tryItOut("switch(function () { return ([z1].__lookupSetter__(\"__count__\")) } (this.zzz.zzz)) { default: break; /*for..in*/yield <><x><y/></x></>;break; case 9: let __parent__ = arguments, prototype = *;break; break; let (__iterator__) { {var __parent__ = <><x><y/></x></>, __parent__ = #3={a:#3#}; } }switch(this) { case 4: {}break;  }\n/*for..in*/for(let prototype = (__parent__) in ({a2:z2})) export *; }");
tryItOut("/*infloop*/M:while(<><x><y/></x></>)yield;");
tryItOut("const __noSuchMethod__ = @foo, __count__ = null;\n__noSuchMethod__ = this, __count__ = 1.3;\n");
tryItOut("M:if(*) { if (1e81) /*infloop*/do {throw  /x/ ; } while(-1);} else {throw __iterator__; }");
tryItOut("/*for..in*/for(var constructor(!-3/0) in ((new Function)()))switch((* / true)) { case __parent__ = function(id) { return id }: let __proto__, constructor = x::__count__; }");
tryItOut("while((function  __parent__ (x::__proto__, constructor) { gc() } ) && 0){var prop = <x/>, function::prop; }");
tryItOut("/*infloop*/for(const \fprop; <x><y/></x>; __iterator__) {{}return; }");
tryItOut("/*for..in*/for(new !<><x><y/></x></>.valueOf(\"number\")( /* Comment */false.throw(<x><y/></x>)).constructor in let (__parent__ = (Math.pow).call(<y><z/></y>.propertyIsEnumerable(\"function::constructor\"),  /* Comment */set)) (constructor.(*::*).propertyIsEnumerable(\"__proto__\"))) if(export *) {} else  if (prototype = __proto__) var __iterator__ = <y><z/></y>, __count__ = 3.141592653589793;");
tryItOut("if((__parent__.__parent__ setter= (function(y) { yield y; throw window;; yield y; }).call)) { if (<y><z/></y>.isPrototypeOf(<><x><y/></x></>)) break M;} else gc()");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((<x><y/></x>)(<x><y/></x> * function(id) { return id }))){return; }");
tryItOut("L:if(try {  } finally { throw @foo; }  > 1e81.prop) {return; } else {break ;var __iterator__, __count__ =  '' ; }");
tryItOut("yield window;");
tryItOut("/*infloop*/for(var prototype; this.__defineGetter__(\"__parent__\", (new Function(\"return;\"))); false) {__count__;throw <x><y/></x>;this; }constructor = <x><y/></x>;");
tryItOut("/*infloop*/for(prop.constructor = constructor.__noSuchMethod__; ((Math.pow).call( if (<><x><y/></x></>): *::*, <y><z/></y>).watch(\"__iterator__\", new Function) ? +<><x><y/></x></> : --((yield <x><y/></x>))); [1,2,3,4].slice) {const __parent__ = undefined, __proto__ = __noSuchMethod__; }");
tryItOut("(null);\n{}\n");
tryItOut("/*for..in*/for(let [\fprototype, __parent__] = ((this.__defineGetter__(\"__iterator__\", function  prop (prop) { return 1e81 } )) === prototype = *) in ((true)[<x><y/></x>])) yield;");
tryItOut("var prop;\nL:while((this) && 0){((function ([y]) { })());; }\n");
tryItOut("yield window;return;");
tryItOut("yield <x><y/></x>;");
tryItOut("throw <>prop = <x><y/></x>, prototype = this</>;throw 0;");
tryItOut("switch(((p={}, (p.z = @foo)()))) { case #0=({each: ( /x/g ())}): if(__iterator__ = @foo) gc() else {{} }\ncase *:  }");
tryItOut("with(window){L:if(3/0.*) { if (constructor.(\f[z1]).propertyIsEnumerable(\"prototype\")) export *; else yield;} }");
tryItOut("yield this;");
tryItOut("switch(let (prop, constructor) (({}).__defineGetter__(\"__noSuchMethod__\", __parent__))) { case 9: /*for..in*/M:for(__proto__ in ((Math.sin)(<x><y/>\f</x>)))throw [z1,,];break; /*infloop*/while(<><x><y/></x></>){yield *; }case false: (gc).callbreak; case 6: yield true;break;  }\n");
tryItOut("L:if(new ('haha'.split)()) { if (throw yield *;) continue\f ;} else {export __proto__;return <x><y/></x>\f; }");
tryItOut("M:with(({constructor: (set = prop)}) | new  '' ((eval)(#3={a:#3#})))with({prototype: @foo}){default: break; case 6: break; /a/gi }\n");
tryItOut("var prop = null;");
tryItOut("throw StopIteration;");
tryItOut("while(((Function)()) && 0)var constructor = <x><y/></x>;\t");
tryItOut("throw  \"\" ");
tryItOut("if(prototype = <><x><y/></x></>.__iterator__ = ({a1:1}).valueOf(\"number\")) { if (<x><y/></x> >>> <><x><y/></x></> %= <x><y/></x>.(<><x><y/></x></>)) /*infloop*/while(__proto__ = <><x\t><y/></x></>)throw <><x><y/></x></>;} else L: while((false) && 0)export __count__;");
tryItOut("__proto__");
tryItOut("/*for..in*/for(const __noSuchMethod__ in *) gc()");
tryItOut("with((new (__parent__ = true)((this.__defineGetter__(\"__iterator__\", (1 for (x in [])))), <x><y/></x>))){/*infloop*/for(__proto__; this; false) {export prop; } }");
tryItOut("__proto__ = __proto__;");
tryItOut("/*infloop*/L:while(__count__ = __count__)<employee id=\"1\"><name>Joe</name><age>20</age></employee>");
tryItOut("{}\n");
tryItOut("{do {throw <><x><y/></x></>;({}).__lookupGetter__ } while(((uneval(<x/>))) && 0);throw <x/>; }");
tryItOut("L:with({__count__: <y><z/></y>}){throw  \"\" ;arguments; }while((<><x><y/></x></>) && 0)function  __count__ (__parent__) { ; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in [1,2,3,4].map(new <x><y/></x>(__proto__, <x/>))) {let __iterator__ = undefined; }");
tryItOut("/*infloop*/for([, ] = ((prop.__count__ = 4.) || (p={}, (p.z = [,,])())); (window).__proto__ =  \"\" .hasOwnProperty(\"__parent__\"); <><x><y/></x></> -= ({}) > this < prototype.*) {/*infloop*/for([]; (<y><z/></y>.unwatch(\"prop\")); !#1#) prototype setter: <x/>;prototype; }");
tryItOut("/*infloop*/while(( /x/g [ /x/g ] >>= this.eval(@foo))[(each).call(function::prop,  '' , __parent__)]){return undefined; }");
tryItOut("/*infloop*/for(({ prop: ({ prototype: __proto__ }), let: ({ __noSuchMethod__: __count__ }) }) = @foo.__lookupSetter__(\"yield\"); (constructor%=(( '' )\f(true))); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) yield [z1];");
tryItOut("do {L:if(null) gc() else { }throw <y><z/></y>; } while(( /* Comment */this.zzz.zzz !== function::__noSuchMethod__+= /x/g  ? <x/> : ( '' .valueOf(\"number\"))) && 0);");
tryItOut("/*for..in*/for(constructor in ((function  __proto__ (constructor, __parent__) { return null } )(@foo))//h\n)/*infloop*/for(const prototype; (__parent__+=.2); let (prop, __proto__ = <><x><y/></x></>) [,,z1]) {__count__, __proto__; }");
tryItOut("/*for..in*/for(const ( /* Comment */<x/>)['__proto__'] in (new (function (__count__, constructor)__count__)())) {/*for..in*/L:for(let __parent__ in <x><y/></x>) {const __noSuchMethod__ = <><x><y/></x></>, prototype = arguments;export *; }let prototype, prototype = <x><y/></x>; }");
tryItOut("let prototype, __parent__\n;");
tryItOut("switch(new (true)(<x><y/></x>, [z1,,])) { default: break;  }");
tryItOut("while((*) && 0)let prop, __parent__;");
tryItOut("/*for..in*/for(var __iterator__ = (yield prop).__defineSetter__(\"__iterator__\", (true).__defineSetter__\t) in function  prototype (__count__, __parent__) { return <><x><y/></x></>; } ) {{} }");
tryItOut("let(__noSuchMethod__) { for(let y in []);");
tryItOut("(<x><y/></x>);");
tryItOut("if(1.2e3) {{}break L; } else  if ( '' ) {; }");
tryItOut("/*infloop*/for(var prototype; this.__defineSetter__(\"__proto__\", function  __parent__ (prototype) { yield prop } ); <employee id=\"1\"><name>Joe</name><age>20</age></employee>) var __proto__, __iterator__;");
tryItOut("with(__count__)/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <y><z/></y>) {function(y) { yield y; return *::*;; yield y; } }");
tryItOut("if([__count__, ({ prototype: constructor }), ({ getter: [, , , prototype, ], prop: [, function::prototype, ] })]+=eval(\"throw <x><y/></x>;\", ({ get prototype(__count__) { return __count__; } ,  get __proto__() { return undefined }  }))) {gc()this } else  if ((++new __proto__+=*::*())) /*infloop*/for(var __count__; <><xxx>{prop}</xxx></>; this.__defineSetter__(\"function::__iterator__\", new Function)) gc()");
tryItOut("/*for..in*/for(let prototype in  /x/ ) yield; const prototype;");
tryItOut("{with({}) { var prototype, __iterator__; } {export __count__; '' \n } }");
tryItOut("[, , prop]");
tryItOut("M:if( '' .prototype) { if (window.eval(0.1)) {( '' );const __proto__, __noSuchMethod__; }} else (0x99);");
tryItOut("this");
tryItOut("/*infloop*/do if(false) {yield;\x00 } else return <><x><y/></x></>; while(<x/>);");
tryItOut("yield\nyield <x/>;");
tryItOut("with({__proto__: (@foo.propertyIsEnumerable(\"prototype\")).@*})return;M:if(1e4) {export __parent__; } else  if (__count__) {}");
tryItOut("if([(__iterator__+=true--)].sort(function  prop ()this.__defineGetter__(\"__iterator__\", [1,2,3,4].map))) break ; else {yield;yield @foo; }");
tryItOut("{export *; }");
tryItOut("(this)");
tryItOut("/*infloop*/for(const __parent__; new (<x/>.@*)([,], [window if (*::*)]); (((__noSuchMethod__.(<y><z/></y>))).watch .@ <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)) {export *\f; }");
tryItOut("yield\n/*infloop*/for(const prop = [null].sort(1e+81); (constructor.*); 0.unwatch(\"prototype\")) {{}return;\t }\nM:do continue M; while(((<><x><y/></x></>.@foo)) && 0);");
tryItOut("throw StopIteration;");
tryItOut("if(true) { if (<x/>) {yield; }} else { '' ; }");
tryItOut("export prop; const __proto__;");
tryItOut("throw true; const __count__;");
