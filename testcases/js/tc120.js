tryItOut("/*infloop*/for(__parent__; [__proto__].filter((*::*).watch) != (new (function(y) { yield y; {let __iterator__, __proto__; }; yield y; })()); ((Function).call(<y><z/></y>, <><bbb xmlns=\"<x><y/></x>\"><x><y/></x></bbb></>))) try { yield; } catch(__parent__ if  '' ) { return; } catch(constructor) { return <x><y/></x>; } finally { break ; } ");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = <y><z/></y> in function ([y]) { }) {return true; }/*infloop*/do const constructor = 1e-81; while((__count__ = <x><y/></x>));");
tryItOut("export *;\ngc()\n");
tryItOut("M:do {} while(((uneval(*::*))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in prop = prototype) {with({__parent__: (<><x><y/></x></>(<x/>, 1.2e3))}){const __noSuchMethod__, prop; } }");
tryItOut("/*infloop*/do if(this) __count__ while(__parent__.__count__ ? <><x><y/></x></> : (function (__noSuchMethod__, <x><y/></x>) { {} } ).call(3, ));");
tryItOut("{return <x><y/></x>;export *; }");
tryItOut("throw new ((new Function(\"throw [,];\")))([[1]])");
tryItOut("try { const constructor; } catch(prototype if (function(){//h\ngc})()) {  } finally { yield; } ");
tryItOut("gc()");
tryItOut("if([*::* for (\nprototype in <y><z/></y>)]) {}");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("/*for..in*/for([constructor, __count__] = [] in function::constructor.prototype getter= [1,2,3,4].map /= (<x><y/></x> = -1)) (<><x><y/></x></> if (1e-81));");
tryItOut("throw \t /x/g ; const __proto__;");
tryItOut("/*for..in*/for(let new (<y><z/></y>.constructor)().prototype in  '' ) __noSuchMethod__\t;");
tryItOut("/*infloop*/for(__iterator__ = ('fafafa'.replace(/a/g, ({}).__lookupGetter__) == ((<x><y/></x>\t))); [[]] / function ([y]) { }; (((yield 1e-81)).__defineGetter__(\"prototype\", 'haha'.split))) {export *;/*infloop*/for(var __proto__ = 1e81; (function ([y]) { })(); <x/>) {return;return; } }");
tryItOut("M:if(#1= /x/g ) { if (__count__.__proto__ = this ? <x><y/></x>/*\n*/ : this) M:if(3/0) __iterator__, __iterator__; else {const __parent__ = *;{} } else {this; }}window;");
tryItOut("/*infloop*/for(__parent__; <><x><y/></x></\t>; {}) {<><x><y/><//*\n*/x></>const prototype, constructor; }");
tryItOut("let(__proto__ = (__count__ = __noSuchMethod__)) ((function(){this.zzz.zzz;})());");
tryItOut("/*infloop*/while( \"\" ){/*for..in*/for(var function::__proto__ in ((/a/gi)(<><x><y/></x></>))){;export __count__; } }");
tryItOut("/*infloop*/do /a/gi while(__count__);");
tryItOut("({}) = [#3={a:#3#}].sort(function(q) { return q; }), constructor = [1]\n");
tryItOut("/*for..in*/for([constructor, prop] = 1e+81 in @foo) gc()");
tryItOut("while(((({ set __proto__ __count__ (__parent__)false }))) && 0){gc() }\n;\n");
tryItOut("if(<x/>.constructor) { if ([__parent__ for (__noSuchMethod__ in *::*)]) const __proto__; else ;}");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(let [constructor, __parent__] = (<><x><y/></x></> .. *::*) in <x/>) {try { throw [1,,]; } finally { <x><y/></x>; }  }");
tryItOut("with({}) { constructor = prop; } ");
tryItOut("if(eval(\"(gc).apply\",  \"\" )) <><x><y/></x></>; else  if (<y><z/></y>) {undefined;false }");
tryItOut("let(__count__, __iterator__ = (((false).call)(undefined,  /x/ ))) ((function(){this.zzz.zzz;})());");
tryItOut("L:if(<x><y/></x>.__proto__ getter= /a/gi.unwatch(\"__proto__\") in (({}).hasOwnProperty)) export __proto__; else  if (constructor :: ({ get function::__iterator__(prototype, prototype) {  } , prototype getter: (function(y) { yield y; __parent__, prototype = <y><z/></y>;; yield y; }).call })) export [prop, , ];");
tryItOut("/*infloop*/for(__parent__%=null; ((p={}, (p.z = (__count__))())); (function::__iterator__ =  '' )) let(__proto__ = ({prop getter: (/a/gi).apply, __iterator__ setter: <><\tx><y/></x></>.hasOwnProperty(\"prototype\") }), __iterator__ =  \"\"  << <x><y/></x>.(-0)) { throw StopIteration;");
tryItOut("case <employee id=\"1\"><name>Joe</name><age>20</age></employee>: L:if(let (__proto__) ((new (5.0000000000000000000000)(false, [1,,]).propertyIsEnumerable(\"({ __proto__: prototype })\")).constructor)) { if (prototype.__iterator__ = ~{}[false ? prop : false] >>>=((\n<x><y/></x>.(__iterator__))++)) { } else {/*infloop*/M:for(var __proto__ = (*::*.yoyo(<x/>)); <x><y/></x>.setter; \n<><x><y/></x></>) ; }}break; default: break; case <><x><y/></x></> < true.__lookupSetter__(\"prop\") ? *.hasOwnProperty(\"__count__\").__defineGetter__(\"__iterator__\", (eval(\"export __count__;\", *::*))) : <><zzz>([11,12,13,14].filter)--.propertyIsEnumerable(\"prop\")</zzz></>+=([11,12,13,14].map) ? __proto__ =  /x/ \n : new (prop = prop)([[1]]++, __noSuchMethod__): this;case this.__defineGetter__(\"__proto__\", Array(new RegExp())): break; case (<><x><y/></x>yyy</>.(true--)): break; if((this.zzz.zzz)) while(( /x/g ) && 0)return window; else __parent__;case new this(#1=[#1#]): case window--: [1,,]if(3) {return; } else  if ( \"\" ) {yield <x><y/></x>; } else let __iterator__;break; case 7: break; case (((<x/>).watch).call(null, ))[new 3()]: __parent__, __iterator__;break; break; break; case 9: export *;break; case 2: var __count__;break; case 6: break; ");
tryItOut("/*infloop*/for(((yield undefined) .. <x><y/></x> +=  /x/g ); (__count__.propertyIsEnumerable(\"prop\")).__iterator__ = <x><y/></x>.__defineSetter__(\"function::prop\", function  constructor (, __count__) { return this } ); eval(\"\", 0.1(<x><y/></x>))) 'haha'.split");
tryItOut("export __proto__\nif((yield __noSuchMethod__ =  \"\" )) { if (__proto__.prototype getter= <><x><y/></x></>) yield ({a2:z2});} else {}\n");
tryItOut("with((p={}, (p.z = +this)())){/*for..in*/for(const null.constructor in ((eval)(<x/>))){continue L; } }");
tryItOut("if((function ([y]) { })().propertyIsEnumerable(\"__count__\")) (<><x><y/></x>\f</>); else  if (\t(1.2e3.__count__)) {if( \"\" ) { if ((window for each (__count__ in 1.3))\t) export *; else } } else {gc()default: case *::*: {}let function::constructor = <x><y/></x>; }");
tryItOut(" get prop(({ __parent__: [], prop: __noSuchMethod__ }), __iterator__) { yield ((__iterator__.__iterator__ =  /x/ ).isPrototypeOf(1e+81[( /* Comment */<x><y/></x>.(<>__count__</>))])) } ");
tryItOut("/*for..in*/M:for\f(__noSuchMethod__ = __count__.__count__ getter= prop.watch(\"constructor\", @foo) in 'fafafa'.replace(/a/g, 'haha'.split)) {do yield *; while((<><x><y/></x></>) && 0);\n(__parent__);\n }");
tryItOut("if(<xxx>{__count__}</xxx>.( /x/  for (prop in  /x/ )) >= ([@foo]) @ ([* for each (__parent__ in 5.0000000000000000000000)]) >= prototype = this.valueOf(\"number\")\n) {gc()(new Function(\"export *;\")) } else  if ((this / ({a2:z2}))) {}");
tryItOut("/*for..in*/M:for(let constructor in ((({}).hasOwnProperty)((({__proto__: @foo}))))){export *\nthrow <><x><y/></x></>;do gc() while((<><x><y/></x></>) && 0); }");
tryItOut("break ");
tryItOut("switch(true ? * : <><x><y/></x></>[(prop if (<x><y/></x>))]) { default: break; case v: throw <x/>;//h\ncase prop.__count__ = new <x/>(*::*, <x><y/></x>): return;break;  }yield new ([])(this, <x><y/></x>);");
tryItOut("export __noSuchMethod__;\nlet (__iterator__)  '' \n");
tryItOut("let (__count__ = undefined.prop = <x><y/></x>) { throw undefined; }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prototype] = function ([y]) { } === <><x><y/></x></> in ( \"\" .isPrototypeOf([z1]))) if(<x><y/></x> .@ <y><z/></y>) { if (~1e-81) {export *; } else {break M; }}");
tryItOut("{for(let y in [5,6,7,8]) <x/>; }");
tryItOut(";(({}).hasOwnProperty).call");
tryItOut("if(__count__ = this) gc() else  if (prop.__noSuchMethod__ = <><x><y/></x></>) {var prop, __noSuchMethod__ =  \"\" ;export *; } else {((-0)).watch{} }");
tryItOut("#3={a:#3#}\n");
tryItOut("L:if((uneval(@foo))) (<><x><y/></x></>); else  if (undefined << __count__) {export *;\n{}\n }");
tryItOut("<><{prop}>yyy</{prop}></>");
tryItOut("do {<x><y/></x>; } while((prop = 3) && 0);");
tryItOut("/*for..in*/for(__count__ in ((function  constructor (prop) { L: return <x/>; } )(__parent__ = [,,z1]))){if(<x><y/></x>) {return; }if((-1)) { if (true) {throw window;throw this; } else var prop, __iterator__;} }");
tryItOut("this.zzz.zzz;");
tryItOut("{continue M;__noSuchMethod__; }");
tryItOut("/*infloop*/for(({ constructor: ({ __noSuchMethod__: [({ __count__: ({ __parent__: [], __count__: constructor }), __iterator__: __noSuchMethod__ }), , , ({ prototype: ({ constructor: [,,] }) })], __count__: [] }), __proto__: ({ constructor: [__noSuchMethod__, ({ __count__: ({ prototype: ({ __parent__: ({ __proto__: prop, __count__: constructor }), __noSuchMethod__: __parent__ }), __parent__: __iterator__ }), __parent__: [, ({ __noSuchMethod__: <x><y/></x>, __proto__: [, , ] }), , , __iterator__] }), , ] }) }) = ((__proto__).call(__count__ = window, )); this.zzz.zzz; yield __proto__ %= *::* ? [[z1]] : (<x/>\n).watch(\"__parent__\", ({}).__lookupGetter__)) {{} }");
tryItOut("if([z1]) __proto__, __count__;");
tryItOut("{<x><y/></x>;* }");
tryItOut("export prop;");
tryItOut("/*infloop*/L:for(var prop; (p={}, (p.z = true >> <x><y/></x>)()); undefined :: <>prop</>) gc()");
tryItOut("if(<><x><y/><\t/x></>.prop =  \"\" .__lookupSetter__(\"__iterator__\")) {M:if((__iterator__ = (function(y) { yield y; function  __count__ (constructor, prototype) { yield <x><y/></x> } ; yield y; }).call(<x/>, ))()) let (__parent__, __proto__ = true) { gc() } else {; } }");
tryItOut("/*for..in*/L:for([__count__, getter] =  /x/  in prop) {(null).__defineSetter__ }");
tryItOut("if(__noSuchMethod__ = #1#) { if (__noSuchMethod__ || function ([y]) { }) {let __noSuchMethod__ = *::*, prop = ({a1:1}); }} else {{}continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in (new (<><x><y/></x></>)())) return;");
tryItOut("do {var prop, prototype = {};\n(<x><y/></x>);\n } while(((<x/>.@foo)) && 0);");
tryItOut("/*infloop*/M:do {(window); } while(window);");
tryItOut("(<x/>);");
tryItOut("/*for..in*/M:for(var [constructor, prototype] = this.__defineGetter__(\"__count__\", gc) in this) {return <x><y/></x>; }");
tryItOut("/*infloop*/for(~__proto__.__noSuchMethod__ = 033; [constructor, __count__, ] = [, , , ]; (prop.__defineGetter__(\"prototype\", Math.sin))) {function(q) { return q; } }");
tryItOut("L: {return  /x/ ; }");
tryItOut("let prop");
tryItOut("__iterator__.constructor = prop;");
tryItOut("export __parent__\n");
tryItOut("delete = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__(window <<= *) in *::*.watch(\"__count__\", function(y) { yield y; throw [,,];; yield y; })--) {return; }");
tryItOut("return ((([11,12,13,14].some))[<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")]);");
tryItOut("while((4..isPrototypeOf(__parent__)) && 0){break/*\n*/ ; }");
tryItOut("L:if((<x><y/></x>)[(new true())]) { if ((new (/a/gi)(__noSuchMethod__+=<y><z/></y>).throw(((__count__ = <><x><y/></x></>)).watch))) __iterator__, prop = <><x><y/></x></>;} else {{Math.sin } }");
tryItOut("prototype = setter;");
tryItOut("/*infloop*/L:do {} while(1.3);");
tryItOut("/*infloop*/while(<y><z/></y>)return;");
tryItOut("L:switch([([11,12,13,14].sort) if (( /x/g .hasOwnProperty(\"__noSuchMethod__\") > null).valueOf(\"number\"))]) { default: case 3: with({prop: (([15,16,17,18].sort((false).__defineSetter__, <x><y/></x>))).__defineSetter__((uneval(@foo)).eval(<x/>.propertyIsEnumerable(\"__parent__\")), 3.141592653589793)})return * % <x><y/></x>;break; ;break; case #1=[<x><y/></x>.(<x><y/></x>)]: break; case (({ __parent__: __parent__ }) = prop): case 8: break;  }");
tryItOut("{{yield;let __parent__, __iterator__ = false; } }");
tryItOut("L: {__iterator__; }");
tryItOut("/*for..in*/for(var __parent__ in (((*).apply)((__noSuchMethod__ = prototype))))return;");
tryItOut("L:while(((return <x><y/></x>)) && 0){}");
tryItOut("try { yield; } catch(prototype if (function(){;})()) { throw  /x/g ; } catch(__parent__) { ; } finally { gc() } \n");
tryItOut("/*for..in*/for(prop = (this.zzz.zzz).eval(((<x><y/></x>).apply).call(@foo, )) in <x><y/></x>.watch(\"prop\", <><x><y/></x></>)) null");
tryItOut("{return (<x><y/></x> ? window : 1e-81); }");
tryItOut("/*infloop*/for(constructor; prototype.__proto__; *::*) {(function ([y]) { })();__iterator__; } const constructor;");
tryItOut("return <><><y><z/></y></></>;");
tryItOut("if(( /x/ )[[[]]]) { if (arguments) {/*infloop*/for(prop = <><x<y/></x></>; *;  '' ) {return {}; } } else let __proto__, __count__;}");
tryItOut("M:while(( /* Comment */ \"\" ) && 0){let function::__proto__;let __noSuchMethod__; }");
tryItOut("switch(<x><y/></x>) { default: break;  }");
tryItOut("L:if((@foo >= *::*)) { if (@foo.unwatch(\"__parent__\") & (<x/>)()) {/*infloop*/for(var ({ __iterator__: [[__proto__, prop, __count__], \f[constructor, ], ], prototype: ({ __proto__: ({ x::constructor: prototype }) }) }) = ((function (prop)*)()); ({__proto__: [1]}) .. (window || 1e4); (false-- %= <y><z/></y>)) {; } } else { }}");
tryItOut("let(__iterator__, ({ __parent__: __iterator__, __count__: [] }) = __parent__.(undefined)) ((function(){;})());");
tryItOut("if([(constructor = *)(*::*, ( /x/  >>= *)) for (__parent__ in  /x/ .__iterator__ = undefined) for (constructor in  /x/g ) if (<><x><y/></x>\f</>)]) {switch((<><x><y/></x></> ? <x><y/></x> : <><x><y/></x>\n</>)) { case 4: break;  } } else {function(q) { return q; }\nthrow window; }");
tryItOut("if(<bbb xmlns\t:ccc=\"__proto__\"><ccc:eee></ccc:eee></bbb>.((true.yoyo( /x/g )) = <x/>.unwatch(\"__count__\"))) { if (false\n) {yield (-1)\n/*infloop*/do {[1];prototype = <x><y/></x>; } while(new (__parent__)()); }} else {if( '' ) export *; else  if (this)  else return;/*infloop*/L:for(window .@ <x><y/></x>; {} <<  '' ; <><x><y/></x></>(prop,  /x/g )) \f{let __count__;<x/>; }\n(@foo); }");
tryItOut("if((<><>@foo</></> .@x:: *.*)) { if (*::*.*.__proto__.__defineSetter__(\"prototype\", function  constructor () { return this.zzz.zzz } )) {let prop, __proto__; } else {throw this; }}");
tryItOut("if(({__iterator__: <><bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb></>})) /*infloop*/while(window) ''  else  if ([new (<><x><y/></x></>)(constructor, *::*)]) /*infloop*/for(var __count__; <><x><y/></x></>; @foo) yield;");
tryItOut("if(__count__.eval((-1.__lookupSetter__(\"__parent__\")))) { if (#0=3) if(__noSuchMethod__) {} else {export delete; } else {/*infloop*/for(let prototype; <x/>.__parent__; <><bbb xmlns=\"[]\"><!--yy--></bbb></>) let function::__parent__ = <><x><y/></\tx></>; }}");
tryItOut("/*for..in*/for(var constructor in ((new Function)(__proto__)))<x><y/></x>;");
tryItOut("/*infloop*/for(__proto__.yoyo([<x><y/></x>].map(new Function)); ({ __iterator__: prototype, __noSuchMethod__: prototype }) =  /* Comment */this; (@foo)[this]) {/*infloop*/for(__proto__; __parent__; <x/>) (*).watchexport *; }");
tryItOut("/*infloop*/for(const constructor = *::*; undefined; 1e-81) { }");
tryItOut("M:if(undefined.propertyIsEnumerable(\"__count__\").isPrototypeOf((\t<><x><y/></x></>)(<><x><y/></x></>, false))) { if (delete *::* ^= ((new Function(\"yield;\"))(function::__count__)).@foo) {while(() && 0){gc() }\t }} else yield window;");
tryItOut("\n{}");
tryItOut("switch(yield @foo.yoyo(({ __count__: x::__noSuchMethod__ }) = (__parent__ = window))) { default: break;  }");
tryItOut("let (__count__) { export __proto__; } const prototype;");
tryItOut("/*infloop*/M:for(<><><><{constructor}>yyy</{constructor}></></></>;  /* Comment */delete [15,16,17,18].map(yield;, 5.0000000000000000000000\f) += (yield ~<y><z/></y>); +this) {if( \"\" ) { if (<><x><y/></x></>) return;} else ; }");
tryItOut("throw prototype;");
tryItOut("if(\teval(\";\", [,]).yoyo(0.1.propertyIsEnumerable(\"__parent__\")) > (null ? #1# : null)) if(*::*) { if (prop) return; else {yield;return  /x/ ; }} else  if (this.__defineSetter__(\"__noSuchMethod__\", function \n() { /a/gi } )) {var __parent__;with({constructor: this}){return;yield; } }");
tryItOut("if(({}.prototype = this.isPrototypeOf(<x/>))) {continue M; } else {} const prototype;if(true\t) prop else (window);");
tryItOut("/*infloop*/while(this)\t{function (prop, __parent__)-1return  \"\" ; }");
tryItOut("case (<x><y/></x>.(<x><y/></x>)): break; break L;");
tryItOut("/*infloop*/while(({__count__: \nfalse( /x/ )})){/*for..in*//* nogeckoex bug 349964 */M: for  each(let (prop) in __count__) export *; }");
tryItOut("let (__parent__, __noSuchMethod__ = 0/0) { export *; }");
tryItOut("while(((p={}, (p.z = <x><y/></x>)())) && 0)return");
tryItOut("with(Function() % eval(\"L:switch(undefined) { case  '' : break;  }\",  '' ))yield;");
tryItOut("if(<x><y/></x>) 5.0000000000000000000000; else constructor;");
tryItOut("/*for..in*/for(var [prototype, \nfunction::prop] = ({constructor getter: ({}).__lookupGetter__ }) in <x><y/></x>\t) {(<x><y/></x>); }");
tryItOut("{break ; }");
tryItOut("/*infloop*/for([]; *; (<{__count__}> </{__count__}>.(let (prototype, constructor = *::*) __noSuchMethod__))) {export __proto__; }");
tryItOut("/*infloop*/for(window.prototype\n; ( \"\" .__lookupGetter__(\"constructor\")); (__proto__ = yield @foo)) continue ;\n\n");
tryItOut("let (__noSuchMethod__) { continue L; }");
tryItOut("with({}) { return; } ");
tryItOut("/*for..in*/for(const __parent__ in ((function(q) { return q; })((eval(\"<x><y/></x>++\", let (__count__, constructor) new (new Function).call( \"\" ))))))prop;");
tryItOut("/*for..in*/for(__parent__ in (((<><bbb xmlns=\"[,]\"><!--yy--></bbb></>.watch(\"<x/>\", function (__proto__) { return (__count__)[<x><y/></x>] } )).watch)(;)))yield;\nthrow <><x><y/></x></>;\n");
tryItOut("{}\n/*for..in*/for(let prop in ((({}).__lookupGetter__)(<><x><y/></x></>))){this; }");
tryItOut("let prototype = *\n");
tryItOut("(this.__defineSetter__(\"__count__\", ({}).__lookupGetter__))[[(<><{__noSuchMethod__}><ccc:ddd><x><y/></x> </ccc:ddd></{__noSuchMethod__}></>.isPrototypeOf((-<x/>)))].some(new Function)]");
tryItOut("M:if((p={}, (p.z = function  __parent__ (__iterator__, prop) { return  ''  } )())) @foo; else  if (new RangeError(window)) throw [<><x><y/>//h\n</x></> for each (__count__ in <x><y/></x>)];");
tryItOut("if(__iterator__ = (function ([y]) { })()) {(<><x><y/></x></>); }");
tryItOut("[({  set __iterator__ __proto__ (__proto__) { return <x/>\n } : ({ let: __proto__, __noSuchMethod__: function::__proto__ }), constructor: prop }), ({ __noSuchMethod__: [({ __parent__: prop }), , ({ __noSuchMethod__: [({ __parent__: __proto__ }), , , ({ __count__: prop })] }), ({ __iterator__: ({ __count__: ({ __parent__: constructor }), __proto__: prototype }), constructor: [, __count__] })] }), ({ __count__: ({ __parent__: __iterator__.prototype setter= (window).call['prototype'], prototype: ({ __parent__: ({ __count__: ({ __parent__: , prototype: __parent__ }), prop: __parent__ }) }) }) }), , constructor]");
tryItOut("switch(<x><y/></x> &= [[1]]) { default: break; (<><x><y/></x></>)\nbreak;  }");
tryItOut("/*for..in*/L:for(var [constructor, __proto__] =  /* Comment */__noSuchMethod__ in prototype) return *::*;");
tryItOut("/*infloop*/while(<y><z/></y>.valueOf(\"number\") .@*:: <bbb xmlns=\"<x/>\"></bbb> % yyy.(\t /* Comment */[1]))if(<x><y/></x>.yoyo(__iterator__)) let __parent__ = -1; else (new Function(\";\"))");
tryItOut("/*infloop*/for(var __parent__ = let (__parent__, get) <><x><y/></x></>; (__noSuchMethod__ = __count__);  \"\" ) function(y) { yield y; gc(); yield y; }");
tryItOut("{(arguments); }");
tryItOut("{if(undefined) { if (this) {yield <y><z/></y>;{} }} else let __proto__;if(<x><y/></x>) {break L;const __parent__ = window; }");
tryItOut("M:with(prototype){{} }");
tryItOut("/*for..in*/for(__noSuchMethod__ in 3/0) {gc()throw <y><z/></y>; }");
tryItOut("this.zzz.zzz;");
tryItOut("{(constructor).__defineSetter__\ncontinue L;\n\rgc() }");
tryItOut("/*for..in*/L:for(let [prop, __proto__] = -<x><y/></x> in <y><z/></y>) yield [[1]];");
tryItOut("/*infloop*/L:for(prop =  /x/g  > constructor <= \f<x><y/></x>; delete <><x><y/></x></>; new (eval)((false)(), null)) {/*for..in*/M:for(var [(__noSuchMethod__), prop] in prop|= /x/g ) yield <y><z/></y>; }");
tryItOut("prototype = __count__;");
tryItOut("/*infloop*/for(let prototype = ( ''  * (function ([y]) { })()); <x><y/></x> % <x/>(this.__lookupSetter__(\"__proto__\"), <x><y/></x>); new (let (prototype = __iterator__, prop = window) __iterator__)(<><x><y/></x></>.__lookupSetter__(\"__proto__\"), *)) {continue M; }");
tryItOut("let (__count__ = this, __iterator__) { yield; }");
tryItOut("<><x><y/></x></>;\f\nconst prop = -0;\n");
tryItOut("export __count__;");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(const __count__ in ((Math.pow)(033)))/*\n*/{yield;return __proto__; }");
tryItOut("/*infloop*/M:do if( ''  , false) { if ([15,16,17,18].filter(Math.sin, *::*)) try { continue \t; } catch(setter if (function(){;})()) { return  /x/ ; } catch(__proto__ if (function(){var __count__;})()) { function(q) { return q; } } finally { break ; }  else {;return; }} while((<x><y/></x>.__parent__));");
tryItOut("for(let y in []);");
tryItOut("let ((*::*)(<x><y/></x>), __noSuchMethod__ = <><x><y/></x></>[1e4]) { export *\f; }");
tryItOut("do {/*infloop*/while((-0).__defineGetter__(\"prototype\", function(y) { yield y; yield <x><y/></x>;; yield y; }))break L; } while(((prop = )) && 0);");
tryItOut("switch(++<><x><y/></x></>.watch(\"__iterator__\", eval)) { case ( /* Comment */<x><y/></x>): const __proto__ = <y><z/></y>, prop = *::*;case 8: default: break;  }");
tryItOut("while((<><x><y/></x></>) && 0){return @foo;return *::*; }let function::__count__ = *::*, __noSuchMethod__ = *::*;");
tryItOut("L:if(this) { if (*) {return 4.;window }} else export prototype;");
tryItOut("{return  /x/g ;return; }");
tryItOut("if(((undefined < [1,,]) ? <><x><y/></x></>.unwatch(\"__iterator__\") : String())) {return;if(this) {(@foo); } else  if (@foo) {default: yield;break; var prop, __parent__;\tbreak; yield;case 1e+81: __noSuchMethod__;break; case  /x/ : case 3: case __proto__: [];break; return;break; break; case 3: case 7: export __proto__;break; case *::*: break M;break;  } } else {{continue M; } }");
tryItOut("/*infloop*/for(var __noSuchMethod__; \f(#0=this); (({__iterator__: <y><z/></y> }))) {{}return ({a1:1}); }");
tryItOut("L:do return; while((@foo) && 0);");
tryItOut("/*for..in*/for(var __iterator__ in null) M:if(__parent__%=prop) { if (prop) function::__count__ =  /x/g , __iterator__ = 4.; else [1,2,3,4].slice}");
tryItOut("return window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in typeof [ \"\"  for (x::__parent__ in function ([y]) { })]) {L:if((-0.unwatch(\"constructor\"))) {/*infloop*/L:for(<><x><y/></x>\f</>; 1e+81; true) break ;\fyield <y><z/></y>; }if(#1=({__parent__: 1e81})) { if (yield <><x><y/></x></>) {break ;__count__ = __count__ }} else throw [z1,,]; }");
tryItOut("(({a2:z2}));");
tryItOut("yield (constructor.__proto__ getter= window).__proto__;");
tryItOut("/*for..in*/for(var constructor in ((\f'haha'.split)(([<><x><y/></x></>])))){\n({}); }");
tryItOut("return ([1]++).constructor =  \"\" ;");
tryItOut("/*for..in*/(for(__count__ set prototype __count__ (constructor) { /*infloop*/while(<><x><y/></x></>)[z1,,].constructor } false in )*::*arguments;\ngc()\n");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/while(arguments ? __parent__ : *){throw (({a2:z2})).watch; }");
tryItOut("M:with({prototype: continue }){gc()throw prop; }");
tryItOut("/*infloop*/while((__noSuchMethod__.__iterator__ getter= [1,2,3,4].slice))yield null;");
tryItOut("/*for..in*/L:for(const ({ __iterator__: __noSuchMethod__, prototype: prototype }) = window.__parent__ in (prototype.__noSuchMethod__ = <x><y/></x>) ? __parent__ = window : this.zzz.zzz) { const __parent__; }");
tryItOut("/*for..in*/M:for(const [function::__iterator__, __parent__] = [11,12,13,14].map in (prototype >>= __noSuchMethod__.unwatch(\"__proto__\")) << ) {/*infloop*/do {export *;(1 for (x in [])) } while(prototype = <y><z/></y>); }");
tryItOut("while((<><x><y/></x></>) && 0)({}).__lookupGetter__");
tryItOut("if((( /x/ ).throw(__count__ = undefined))) throw *\nyield; else  if (__parent__ = __iterator__ ? <><x><y/></x></>++ : 'fafafa'.replace(/a/g, function (__iterator__)<><x><y/></x></>)) throw 1e-81;");
tryItOut("/*infloop*/for(prop; <><bbb xmlns=\"(Boolean())\"><ccc:ddd> </ccc:ddd></bbb><!--yy--></>; #0=[({}).hasOwnProperty - (eval(\"3\", true))]) {try { return; } catch(__iterator__) { gc() } throw ; }");
tryItOut("M:do {export __proto__;yield this;(/ } while(((__proto__ = this)) && 0);");
tryItOut("let (__count__, __iterator__) { (<x/>); const __parent__; }");
tryItOut("with({__noSuchMethod__: function ([y]) { }})yield <x/>; const constructor;");
tryItOut("with((uneval(<><x><y\f/></x></>)) * [window].sort(({}).__lookupGetter__) ? 'fafafa'.replace(/a/g, *) : new gc(\rtrue, <x><y/></x>)){throw [z1,,]; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in ({__noSuchMethod__: __count__})) do {const __parent__ = *::*;const prototype = <><x><y/></x></>, __iterator__; } while((constructor = @foo) && 0);");
tryItOut("M:if(each.constructor & (prototype).watch(<x/> *= <x><y/></x>, [,,]).unwatch(\"__noSuchMethod__\")) { if (@foo) {let(__proto__ = *::*, __parent__ = @foo) ((function(){yield  this window.valueOf(\"number\");})()); }} else switch(@foo) { default:  }");
tryItOut("do {/*infloop*/for(<y><z/></y>; (#3={a:#3#}.prototype); ((\fundefined))) continue L; } while((__noSuchMethod__.__proto__ = (({ __iterator__: __noSuchMethod__, prototype: get }) = <x/>++)) && 0);");
tryItOut("(L:if()__parent__ >>>= '' ) {-1;; } else  if (([[]])(function(id) { return id }, undefined)) {yield;yield <x><y/></x>; } let(__iterator__ = (__noSuchMethod__.(<><x><y/></x></>)), __iterator__) { let(({ __parent__: prop })) ((function(){let(prop, __parent__) { throw  '' ;})()); else {{} }");
tryItOut("if((<x><y/></x>.*)) {throw <><x><y/></x></>;throw [1,,]; } else yield #3={a:#3#};");
tryItOut("/*for..in*/for(constructor in (---0 |= <x><y/></x>)) __iterator__ = null;");
tryItOut("/*infloop*/for(__count__; <employee id=\"1\"><name>Joe</name><age>20</age></employee> for ((constructor) in  \"\" ) for each ( /x/g  in <x><y/></x>) for (prototype\t in  '' ); ([<x/>].\tsome(function (__count__, __iterator__) { export *; } )).@*.yoyo(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)) {{throw function(id) { return id };let (__parent__, __noSuchMethod__) { export prototype; } } }");
tryItOut(";");
tryItOut("let prop = window\n;");
tryItOut("with({prop: (__count__.(let (__proto__, __count__ =  '' \f) <x><y/></x>))}){M:with({__noSuchMethod__: __count__ = this})({}).hasOwnProperty }");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(let __count__ = new ([1,2,3,4].map)() in ({}).__lookupSetter__(\"__noSuchMethod__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in *) if([,,z1]) { if (this) {*::*;window; }} else {throw this;export __count__; }");
tryItOut("\nthrow <x><y/></x>;\n");
tryItOut("yield;\nyield;\n");
tryItOut("let constructor = {}\n/*for..in*/for(let __count__ in window) var __noSuchMethod__ = <x><y/></x>;");
