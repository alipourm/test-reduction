tryItOut("M:if([z1]) {yield; } else  if (@foo) {export *;\n } else let constructor = 0.1;");
tryItOut("{export __proto__; }");
tryItOut("export *;");
tryItOut("/*infloop*/while\f((constructor.prop = new (new Function(\"export *;\"))(window,  /x/g )(__proto__, <x/>)))if((prop = [,,].__proto__ = 'fafafa'.replace(/a/g, (new Function(\"this\"))))) {} else {continue ; }");
tryItOut("/*infloop*/do {;const __count__ = false\f; } while((__count__.constructor));");
tryItOut("/*infloop*/do yield  /x/g ; while([,,z1]);");
tryItOut("yield;");
tryItOut("if((function  __iterator__ (prop, function::constructor)__parent__)(__parent__, *::*)) {const <x/>, __iterator__; } else  if (--(__parent__.__parent__)) if(String(__iterator__.__lookupGetter__(\"__iterator__\"), (-1))) prototype else  if (<><bbb xmlns:ccc=\"null\"><ccc:eee></ccc:eee></bbb></>) export prototype; else let __parent__ = __noSuchMethod__, prop = []; else {gc()throw __iterator__; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {return; } while(033);");
tryItOut("throw __iterator__\nconst __noSuchMethod__ = <><x><y/></x></>, __parent__;");
tryItOut("M:with({__iterator__: ((function ([y]) { })().isPrototypeOf(<x><y/></x>))})yield *::*;");
tryItOut("/*infloop*/do prop; while(<xxx {__parent__}={(@foo = null)} />);");
tryItOut("if(new (function () { yield (( = *).hasOwnProperty(\"__count__\")) } )()) /*for..in*/for(const [__iterator__, __iterator__] =  /x/g  in undefined) {export __proto__;throw 3.141592653589793; } else  if (*::*.__iterator__ = [null >>= <><x><y/></x></>]) /*for..in*/M:for([__count__, (+this.constructor)] =  ''  in true) {__proto__;function(q) { return q; } }");
tryItOut("if(<xxx {__iterator__}={__noSuchMethod__} />) yield <x/>;");
tryItOut("with({}) { /*infloop*/while(<x><y/></x>)yield @foo; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.constructor in <y><z/></y>) return;var constructor = __iterator__, __noSuchMethod__ = arguments;");
tryItOut("/*for..in*/for(let prototype = (<x><y/></x> / (this)[this]) in *\t >>> <><x><y/></x></>) ");
tryItOut("if(new ({}).hasOwnProperty(true).propertyIsEnumerable(\"constructor\")) if(<x/> >>>=<><x><y/></x></>) return; else {return __iterator__, prototype;continue L; } else  if (1e+81.valueOf(\"number\")) {(__noSuchMethod__ = <><x><y/></x></>);/*infloop*/while((prop.__proto__ getter= gc)){export *; } }");
tryItOut("return");
tryItOut("if(<x><y/></x>) {throw window; }");
tryItOut("/*infloop*/for(({ constructor: __parent__, __proto__: ({ __iterator__: prop, constructor: __iterator__ }) }) = ; this; ) {{} }");
tryItOut("if(this) { if (__proto__) return false; else {gc() }}");
tryItOut("if(__count__.constructor getter= function (({ __count__: __iterator__, prototype: [] }))this.__defineSetter__(\"prop\", Function)\f+=(* ? [ ''  for each (prototype in <><x><y/></x></>)] : (eval(\"{}\", <x><y/></x>)) for (this.zzz.zzz in ('fafafa'.replace(/a/g, ((1 for (x in []))).apply)).__defineSetter__(\"__noSuchMethod__\", 'haha'.split)) for (prop in *::*) for each (__count__ in (null.__defineGetter__(\"false\", [1,2,3,4].map))))\t) { if (([] = <><x><y/></x></> & <x/> + null.propertyIsEnumerable(\"__parent__\"))) {/*infloop*/for(const __proto__; <y><z/></y>; new (1.3)()) {(<x/>);L:with({__noSuchMethod__: <y><z/></y>})let prop = arguments, __noSuchMethod__ = 5.0000000000000000000000; } }} else {; }");
tryItOut("prop = __count__; const __noSuchMethod__;");
tryItOut("with(<x/>)export prototype;");
tryItOut("case (this.__defineGetter__(\"prop\", <y><z/></y>)): continue ;{/*for..in*/for(__noSuchMethod__ in (((new Function(\"return <><x><\\ty/></x></>;\")))(<x><y/></x>)))let prototype = window, __parent__;gc() }");
tryItOut("if(({constructor: ({prop:  /x/ , __proto__: <><x><y/></x></> })})) {var __noSuchMethod__, __parent__ = *; } else {/*for..in*/for(let __parent__ in ((gc)(window)))<x/>; \"\" ; }");
tryItOut("{if(<x><y/></x> .@*:: ({})) { if (__iterator__ = <x><y/></x>) let __count__ = #1#;} else {var prototype = <><x><y/></x></>;\nreturn <x><y/></x>;\n } }");
tryItOut("/*infloop*/M:while(eval(\"__iterator__ = <x/>;\", <x><y/></x>))var __noSuchMethod__ = prop;\f");
tryItOut("/*infloop*/for(prop.__count__ = (new *() + default: .throw(<><x><y/></x></>) <<= #1=[#1#] *=  /x/ ); <><x><y/></x></> >> \texport constructor;.unwatch(\"function::__parent__\"); __parent__ = @foo) /*for..in*/for(var [__count__, prototype] = (<x><y/></x>.*) in __count__) {function::__proto__ = this, constructor; }");
tryItOut("/*infloop*/do {if((<x><y/></x>.(<x><y/></x>))) {return;function  constructor (constructor, prop)@foo } else continue ;/*infloop*/while([(#3={a:#3#} % 3)]){M:if(this.zzz.zzz) <><x><y/></x></>; else  if ( /x/g .watch(\"prop\", (window).__defineSetter__)) return *::*; } } while((eval(\"continue ;\", (this === this))));");
tryItOut("{{} }");
tryItOut("if([false].sort((new Function(\"return;\")))) \f{ if (__proto__.prototype getter= function(q) { return q; }) export *; else {if((true.yoyo(<x/>))) {export prototype;return [,,]; } else gc() }}");
tryItOut("/*infloop*/do {__proto__ = this, prototype =  /x/ ;return; } while(null.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty));");
tryItOut("/*for..in*/for(const function::constructor(*::*) in ((([z1,,].__defineSetter__(\"__count__\", function  __noSuchMethod__ (__noSuchMethod__, __parent__) { return * } )).__defineSetter__)((uneval(window))))){export *;break M; }");
tryItOut("\nexport __noSuchMethod__;\n");
tryItOut("if((uneval(undefined))) { if ((yield 0x99)) {throw  \"\" ; } else /*for..in*/for(const __parent__ = arguments in <><x><y/></x></>) ;}");
tryItOut("/a/gi");
tryItOut("if( for (__iterator__ in this.__defineGetter__(\"constructor\", @foo).@*) if ((this.__defineSetter__(\"constructor\", function  constructor (prototype) { export __parent__; } ))) if (let (__iterator__ = this.zzz.zzz, ({ __iterator__: constructor, __proto__: __noSuchMethod__ }) = + ) ('fafafa'.replace(/a/g, 0x99)))) {let(prototype, __noSuchMethod__) { break ;let (prop, [function::__count__] = (0.1.__defineSetter__(\"__iterator__\", [1,2,3,4].slice))) { var __noSuchMethod__, __count__; } }");
tryItOut("switch((uneval(constructor)).yoyo(__noSuchMethod__ = <x><y/></x>)) { case 2: break; default: break; break;  }");
tryItOut("L:if(__noSuchMethod__ = ( '' .propertyIsEnumerable(\"x::__parent__\"))) <x/>; else {let (\f__iterator__, __parent__ = this) { yield; const prop; }{}\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in [z1,,]) __proto__;");
tryItOut("");
tryItOut("if(this) { if (@foo) (1e+81);} else ");
tryItOut("/*for..in*/for(var [prototype, constructor] = this.zzz.zzz in (throw (new Function( '' ,  \"\" ).__lookupGetter__(\"__parent__\")))) {continue M;return [1]; }");
tryItOut("/*for..in*/M:for([__noSuchMethod__, prop] = ( /x/ \n).unwatch(\"__count__\") in 5.0000000000000000000000.__proto__ = <x/>) ");
tryItOut("/*for..in*/for(var __proto__ in ((Math.sin)('fafafa'.replace(/a/g, [1,2,3,4].slice))))with(<><x><y/></x></>);");
tryItOut("{/*for..in*/for(const __count__ = ([11,12,13,14].filter) in ((p={}, (p.z = true)()))([<x/>].some(gc), 0/0)) {/*infloop*/do {undefined; } while(<><x><y/></x></>);/*for..in*/M:for(let constructor in ((function (window) { yield <><x><y/></x></> } )(<x><y/></x>))){null;__count__ =  /x/g , constructor = <x/>; } } }");
tryItOut("/*for..in*/for(var __parent__(prototype|=(* || (__proto__ = <y><z/></y>))) in (((__count__.__iterator__ = new function () { return @foo } (<x/>)))(__count__ =  '' )))return;");
tryItOut("yield <><><ccc:ddd> </ccc:ddd></></>;");
tryItOut("continue \nif(*::*) {throw  /x/ ; } else  if (function ([y]) { }) yield 3.141592653589793;");
tryItOut("L: break L;");
tryItOut("/*for..in*/L:for(const __count__ = constructor in false) return  '' ;");
tryItOut("switch((-1)) { case 4: break;  }");
tryItOut("/*for..in*/for(const [__proto__, constructor] = \n((@foo for (__proto__ in true)))() in (yield (function (__noSuchMethod__, prototype) { return window } ).call(<y><z/></y>, <y><z/></y>))) prototype");
tryItOut("/*infloop*/L:while(eval(\"<y><z/></y>\", *) ? (({a2:z2}).throw(constructor)) : <x><y/></x>){export *;continue M; }");
tryItOut("let __iterator__ = <x><y/></x>\n");
tryItOut("try { try { yield (typeof -1 || *::*); } catch(constructor) { let(__parent__ = constructor.__parent__ = 5.0000000000000000000000, __count__ = yield) { with({}) with({}) { gc() }  } finally { return; }  } catch(__count__ if __count__ = __count__ if ( '' )++) { throw StopIteration; } catch(constructor.__proto__ if (function(){let(__noSuchMethod__ = ({constructor: <x><y/></x>})) { this.zzz.zzz;})()) { throw __iterator__; } catch(__noSuchMethod__ if  /x/g  .@ -1.__noSuchMethod__ = --(this.__defineGetter__(\"__noSuchMethod__\",  ))) { prop = constructor; } catch(__count__) { with({}) let(({ __proto__: [, , __proto__.prototype, , ], <zzz><><x><y/></x></> >>= __noSuchMethod__</zzz>: [] })) { let(__parent__) { this.zzz.zzz; } finally { yield (p={}, (p.z = (yield function (constructor) { __noSuchMethod__, __parent__ =  /x/g ; } (__noSuchMethod__, <x/>)))());\r } ");
tryItOut("L:if(this) {(<x><y/></x>);__noSuchMethod__, __count__; } else  if (<x/>) throw <><x><y/></x></>;");
tryItOut("/*infloop*/for(var prototype; <bbb xmlns=\"*\">yyy</bbb>.(0.watch(\"__parent__\", ((1 for (x in []))).call));  /* Comment */(-0 !== <><x><y/></x></>)) yield;");
tryItOut("/a/gi");
tryItOut("switch(@foo) { default: break; case 9: prop = null, prototype;case <x/>: export *;case this: throw <x/>;break;  }");
tryItOut("while((window) && 0)Function");
tryItOut("__proto__ = prototype;");
tryItOut("do {yield <><x><y/></x></>; } while(((<x/>.__parent__)) && 0);");
tryItOut("/*infloop*/for([, , __noSuchMethod__] = (<x><y/></x>)[this]; true; true) {(prototype);let prototype = this, __noSuchMethod__ = <x/>; }");
tryItOut("if((__noSuchMethod__.__iterator__)) 0 else {yield false;\tyield; }");
tryItOut("function  __count__ (({ prototype: __noSuchMethod__, __proto__: __noSuchMethod__ }), <x><y/></x>) { (<x><y/></x>); } ");
tryItOut("with({}) { for(let y in [5,6,7,8]) let(prototype = 0.1 for (constructor in function(id) { return id }) ||  /x/ ) { throw StopIteration; } ");
tryItOut("while((null) && 0)while((__proto__) && 0)continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in <><x><y/></x></>) \nprop;");
tryItOut("export prop");
tryItOut("{}");
tryItOut("(<x/>);");
tryItOut("return; const __proto__;");
tryItOut("/*for..in*/L:for(const (#1=[#1#])(this) in ([15,16,17,18].map(({}).hasOwnProperty, prototype))) {__iterator__, yield;with({__iterator__: window})gc() }");
tryItOut("switch(1e4) { case  /x/ :  }");
tryItOut("if([prototype, , , __count__, __proto__] = ({ __proto__: prop })) { if (prop = (yield false)) {( \"\" );(function(q) { return q; }).apply }} else {continue L;var prop = window, prototype; }");
tryItOut("/*infloop*/L:do {({ __noSuchMethod__: constructor }) = <x><y/></x>;if(__count__) {<><x><y/></x></> } else  if (.2) __noSuchMethod__; else return #1#; } while(function ([y]) { });");
tryItOut("/*for..in*/M:for(prop = ([z1,,].watch(\"prototype\", function(y) { yield y; yield [z1,,];; yield y; })) <= <x/> || __iterator__ in (yyy = true)) []");
tryItOut("function (prop, constructor) { yield <><x><y/></x></> } ");
tryItOut("while((* in constructor) && 0)with({__parent__: <x/>})yield;");
tryItOut("switch(new ((p={}, (p.z = null.valueOf(\"number\"))()))(<><xxx {__parent__}={<y><z/></y>} /></>)) { default: if([11,12,13,14].filter) break ; else  if (<><x><y/></x></> in *) const __parent__ = *::*; else {throw  \"\" ; } }");
tryItOut("M:switch(typeof window) { case 4: break; M:if((-1)) {gc() }default: gc()case <x><y/></x>.valueOf(\"number\"): break; case ),  \"\" : break; case new (<\tx><y/></x>)(<x/>): L: export __iterator__\f; }");
tryItOut("return;");
tryItOut("M:do {let (__proto__ = <><x><y/></x></>, __parent__ = constructor) { export *; }\f } while((()) && 0);");
tryItOut("yield;\ncontinue ;\n");
tryItOut("switch([[]].eval(<x/>) || (prop.(@foo))) { default:  }");
tryItOut("if(('haha'.split)) {return @foo; } else  if (__iterator__.__noSuchMethod__.valueOf(\"number\")) {( /x/ ); } else {const prototype, prop;yield; }");
tryItOut("yield ((this.zzz.zzz).unwatch(\"__parent__\")) /= new Date();");
tryItOut("/*for..in*/L:for(let prop in ((function (__count__) { yield this.zzz.zzz } )(__count__.(window))))export *;");
tryItOut("/*infloop*/do /*infloop*/for(((__count__.__proto__).__count__)([<x><y/></x>].some((<y><z/></y>).watch), (new (<><x><y/></x></>).apply(let (each) <x/>, <><x><y/></x></>))); <x><y/></x>.(*); [function ([y]) { } ? [,,z1] : this].filter(this)) {{ } } while((({ __iterator__: x::prop, __count__: ({ constructor = <><x><y/></x></>: __iterator__, prototype: ({ prop: __parent__, prop: __parent__ }) }) }) = ({ constructor: __count__, constructor: __count__ }) + <x/>));");
tryItOut("if(new Date(( ''  ^= window).__defineSetter__(\"__count__\", eval))) {let __iterator__;/*infloop*/M:while(<x\f><y/></x>) } else throw prop;");
tryItOut("{{window; }M:if(eval(\"undefined.__defineGetter__(\\\"__iterator__\\\", function  __count__ (__noSuchMethod__)window)\", true instanceof *::*[this])) export constructor; }");
tryItOut("L: {new Function }");
tryItOut("/*infloop*/for(; (3/0)(); constructor.__parent__ getter= (<><x><y/></x></>.watch(\"__noSuchMethod__\", (1 for (x in [])))).watch) /*infloop*/M:for(__count__; *::*; []) { }");
tryItOut("/*for..in*/for(const __count__ in this) export __parent__;");
tryItOut("if(gc()) {gc() } else yield #1#;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <x/>) return;");
tryItOut("{var constructor =  /* Comment */null([15,16,17,18].sort([1,2,3,4].slice, <x><y/></x>)), constructor =  /x/ ; }");
tryItOut("if((p={}, (p.z = this)())) { if (window & <x><y/></x>) {return;{} } else (<x><y/></x>);}");
tryItOut("let (constructor) { export *; }");
tryItOut("({});var constructor;");
tryItOut("let (function::__proto__ = *) { const __noSuchMethod__, prototype; }");
tryItOut("{export __count__;<x><y/></x>; }");
tryItOut("if(function::__count__ = <x><y/></x>.watch(\"__iterator__\", function  __proto__ (({ __count__: ({ __noSuchMethod__: prototype }), prop: ({ __noSuchMethod__: prop }) })) { yield prop } \n).__proto__) yield; else  if ([((*::* if ( /x/ )))].filter(function  __iterator__ ()(uneval(0x99)))) Math.sin, prop = window;export each");
tryItOut("if( /x/  -=  '' .__lookupSetter__(\"prototype\")) {gc()/*infloop*/do ( '' ); while(<y><z/></y>); } else {let (prop = this) { export *; } }");
tryItOut("if(prototype) {(window);; }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("if(\t<>(p={}, (p.z = *)())</>) {return; } else /*infloop*/do break L; while((-1));");
tryItOut("export *;");
tryItOut("with({}) prototype = prototype;");
tryItOut("let (__parent__, __proto__ = <x><y/></x>) { const constructor; }");
tryItOut("{while((<x><y/></x>) && 0)continue ;{continue ;break L; } }");
tryItOut("/*infloop*/while(window.prop)return;");
tryItOut("{(1e4);\f const constructor.prop; }");
tryItOut("{let prototype = __proto__; }");
tryItOut("if((<><x><y/></x></>)()) { if ((window.isPrototypeOf(<x><y/></x>)).__lookupSetter__(\"prop\")) for(let y in [5,6,7,8]) ; else ;}\nreturn window\n");
tryItOut("yield false;break ;");
tryItOut("__iterator__ = prototype;");
tryItOut("if((yield 0/0)) {(<><x><y/></x></>).watch } else  if (new ()(<x><y/></x>)) ;");
tryItOut("if((-0)\n) { if ((/a/gi)(__count__ =  \"\" , (__iterator__.valueOf(\"number\")))) gc()} else {with({}) { for(let y in []); }  }");
tryItOut("if(eval(\"<><x><y/></x></>\", 1.2e3)) let __proto__ = @foo, constructor;");
tryItOut("this.zzz.zzz;__proto__;\nlet constructor = <x/>, __iterator__ =  /x/ ;\n");
tryItOut("return <><x><y/></x></>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(let constructor = 3.141592653589793 in this) const __count__ = *, __count__ = __count__;");
tryItOut("if(((new Function).apply)\f(( \"\"  in <><x><y/></x></>)[false])) { if (@foo = true % <x><y/></x> in @foo) {/*for..in*/for(const __proto__ in (((1 for (x in [])))(false)))continue ;throw function(id) { return id }; } else this;}");
tryItOut("/*infloop*/(__noSuchMethod__)");
tryItOut("/*for..in*/for(const (<y><z/></y>)(__noSuchMethod__) in ((((__parent__.prototype)).apply)((this.zzz.zzz) | (yield __count__))))let prototype = ({a2:z2}), prototype = this;");
tryItOut("{}");
tryItOut("return;");
tryItOut("/*for..in*/for//h\n(const (*::* |= <><x><y/></x></>\n ^= *::*)['constructor'] in ((function ()prop)(({prop: new ((1.2e3).watch)(.2)})))){/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in constructor) #1#; }");
tryItOut("switch([1]) { case __noSuchMethod__.__parent__: break M; }");
tryItOut("/*infloop*/for(__proto__; __proto__; null) return;");
tryItOut("/*for..in*/for((prop.__noSuchMethod__) in ((Math.pow)((__proto__.watch(\"__parent__\",  /x/ ) for each (__parent__ in undefined) for (__noSuchMethod__ in this)))))yield false;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <x><y/></x>) {<><x><y/></x></>export *; }");
tryItOut("try { __iterator__; } catch(__iterator__ if (function(){;})()) { var prototype, __noSuchMethod__; } catch(prototype if (function(){throw true;})()) { var __noSuchMethod__, __proto__ = undefined; } catch(prop if (function(){throw return;;})()) { ; } catch(__count__) { export *; } finally { ; } ");
tryItOut("/*infloop*/for(const __iterator__ = <x><y/></x>; window; [,]) export *;");
tryItOut("L:do var prototype; while(([15,16,17,18].filter(({}).hasOwnProperty, window)) && 0);");
tryItOut("L: ;");
tryItOut("throw StopIteration;");
tryItOut("with({constructor: -1}){__count__ = <><x><y/></x></>, __noSuchMethod__;; }");
tryItOut("let(({ __noSuchMethod__: __noSuchMethod__ }), prototype = ({}).hasOwnProperty) { with(<x><y/></x>){return window; }");
tryItOut("/*for..in*/for(const __parent__ = let prototype in constructor) {export *; }");
tryItOut("with({__parent__: ({constructor: #0=[__parent__]})}){; }");
tryItOut("/*for..in*/for(var __iterator__ = <bbb xmlns=\"<x><y/></x>\"><ccc:ddd>yyy</ccc:ddd></bbb>.([z1].__defineSetter__(\"prop\", function  __parent__ (constructor, __iterator__) { yield *::* } )).__defineGetter__(\"__count__\", /a/gi) in ((Function)()).__lookupSetter__(\"__noSuchMethod__\")) {/*infloop*/for(let prop; [15,16,17,18].map((this).watch, this).\tyoyo(<><x><y/></x></>); (delete <y><z/></y>)) {; } }");
tryItOut("M:if(__noSuchMethod__ = 'fafafa'.replace(/a/g, Math.sin)) yield;");
tryItOut("/*infloop*/for(var __count__; (<><x><y/></x></>.@*); this.__defineGetter__(\"__parent__\", function  __iterator__ (__noSuchMethod__, __count__) { yield (__proto__.(*)) } )) {/*for..in*/for([__noSuchMethod__, prototype] = (<x><y/></x>.__defineGetter__(\"prototype\", Function)) ? ({prop: window}) : (__noSuchMethod__ = __noSuchMethod__) in __iterator__) return; }");
tryItOut("/*infloop*/L:for(eval(\"/*for..in*/for(let __noSuchMethod__ in ((Function)((-1))))yield;\",  /* Comment */); __parent__ = constructor; 1e-81) {export __count__;export __count__; }");
tryItOut("if((__noSuchMethod__.constructor)) { if (constructor) {L: {throw  \"\" ;gc() } } else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in (-1)) {continue ; }continue ; }}");
tryItOut("with({__iterator__: (function ([y]) { })()--.propertyIsEnumerable(\"__proto__\")})return;");
tryItOut("if(eval(\"(3.141592653589793);\", ([,,z1])(false, 5.0000000000000000000000))) { if (window) /*infloop*/for(__parent__ = <><x><y/></x></>; undefined; <x><y/></x>) { } else let (__iterator__ = <x><y/></x>, prop) { /*infloop*/for(var __count__; -1; <y><z/></y>) {__noSuchMethod__ } }}");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: [({ __proto__: ({ __noSuchMethod__: __proto__, __parent__: __parent__ }) }), ], __parent__: [, __count__] }) = new eval(); delete export __proto__[(this.zzz.zzz)]; [,,].eval(<><x><y/></x></>)) {if(<><x><y/></x></>) yield window; else  if (undefined) var prop, __proto__; else {{}{} } }");
tryItOut("L: {let prop = (function ([y]) { })(), constructor; }");
tryItOut("switch((new [1,2,3,4].slice(constructor.__parent__ = <><x><y/></x></>)).isPrototypeOf(({}))) { case new (\nthis)(constructor = -1, <><x><y/></x></>): break;  }");
tryItOut("with({}) prop = __parent__;");
tryItOut("with(((<><x><y/></x></>)(<x/>, 1e81))){M:if(<><x><y/></x></> > *::*) {__parent__ = <x/>, __proto__;yield; }gc()\nbreak ;\n }");
tryItOut("yield <x/>;break ;");
tryItOut("switch(__noSuchMethod__ /  /* Comment */<x><y/></x>) { default: break; case  /x/g : 'haha'.split }");
tryItOut("L:if(033) { if (prop = __noSuchMethod__) /*for..in*/L:for(__noSuchMethod__ in false) {export __noSuchMethod__; } else {M:if(<><x><y/></x></>) { if (<x><y/></x>) {prototype = window, __noSuchMethod__; }} else {export *;const prototype; } }}");
tryItOut("with((*::*)(<x><y/></x>\n)){yield [[1]];export __noSuchMethod__; }");
tryItOut("return ([, __noSuchMethod__, constructor, , __count__] = default: break; const prop;case new (([1,2,3,4].map).call)(): prototype;);");
tryItOut("{}");
tryItOut("/*infloop*/L:do {/*infloop*/for( /x/g ; @foo; window) 4.\nthrow null;do {let __iterator__; } while((((uneval(this)))) && 0); } while(((yield (function(id) { return id } <<= *::*))));");
tryItOut("L: {/*for..in*/for(let __proto__ in ((({}).hasOwnProperty)(*))){let prototype, constructor = <x><y/></x>;{} } }");
tryItOut("__iterator__ = __count__;");
tryItOut("/*infloop*/L:for(const ({ __noSuchMethod__: __noSuchMethod__, prop: prototype }) = (__parent__.eval(<x/>)); <x><y/></x>; #2=({__proto__: *::*})) {throw <><x><y/></x></>; }");
tryItOut(";");
tryItOut("{export prototype; }");
tryItOut("const prop = false, __proto__ = <x><y/></x>;");
tryItOut("/*infloop*/do {/*infloop*/for(const __proto__; <x/>; <x><y/></x>) {gc() }\nthrow *::*; } while(Object()['constructor'] = (<><x><y/></x></>.yoyo(<><x><y/></x></>)) , (__iterator__.__iterator__ = <x/>).valueOf(\"number\"))\nif(window.valueOf(\"number\")) { if ((yield ((((<x><y/></x>).apply).call)(this)))) {; } else {export *; }}");
tryItOut("/*for..in*/for(__count__ in ((function(q) { return q; })(3)))let (__iterator__, __noSuchMethod__) { switch( /x/g ) { default: yield *::*;break;  }const __proto__ = window; }");
tryItOut("M:switch(*::*) { case false: return window;default: break; case *: __proto__, constructor;return <></>;case <y><z/></y>: export let;break;  } const prototype;");
tryItOut("{export *;{const __parent__, __noSuchMethod__;let prototype = 0x99; } }");
tryItOut("return;");
tryItOut("/*infloop*/while(prop)var __count__ = <x/>;");
tryItOut("/*infloop*/for(let prototype = null; ({prototype: 1.2e3 }); <x><y/></x>) ;");
tryItOut("/*for..in*/for(var false['__parent__'] in <\tx><y/></x>) (<y><z/></y>);");
tryItOut("yield <><x>\f<y/></x></>\ngc()");
tryItOut("break L; const prop;");
tryItOut("/*for..in*/M:for(let (prototype) in .__defineGetter__(\"__noSuchMethod__.__count__\", (<x><y/></x> for each (__parent__ in *)), prototype > 3)) {let __count__, __proto__; }");
tryItOut("L:while(((this.__defineGetter__(\"__noSuchMethod__\", true))) && 0){throw __proto__; }");
tryItOut("/*for..in*/for(var [__parent__, __count__] = --this in prop + new <x><y/></x>()) return null\n");
tryItOut("\tif([15,16,17,18].filter(<y><z/></y>, ((eval).apply))) {let (__iterator__, __proto__) { yield <y><z/></y>; } } else ;");
tryItOut("if(+(eval(\"this\", *))) {{}@foo; } const __iterator__;");
tryItOut("if(-1) { if (prototype) {yield;yield __noSuchMethod__; } else let(({ __proto__: ({ __parent__: prototype }) }) = __count__ = [1,,], prototype = [1e-81]) ((function(){with({}) const __iterator__ = , prototype;})());}");
tryItOut("L:if((0.1.hasOwnProperty(\"constructor\").throw(*::*.hasOwnProperty(\"prop\")))) { if (+<y><z/></y>) {const __noSuchMethod__ = arguments, constructor;\t{} }} else {export *; }");
tryItOut("{let constructor = [1], __parent__; }");
tryItOut("<x><y/></x>\n");
tryItOut("{/*infloop*/for(var ({ __parent__: __iterator__, __count__: __parent__ }) = [arguments].filter((1 for (x in []))); [1].isPrototypeOf(*::*); <x/> <=  \"\" ) throw <><x><y/></x></>;export *; }");
tryItOut("/*infloop*/for(prototype = false >>= false; <y><z/></y>.*; <x/>) { { yield window.throw(<><x><y/></x></>) } /*infloop*/while(__proto__ ::  /x/  >>>=constructor){{}gc() } }");
tryItOut("if( /x/g ) { if (4.) { } else return;}");
tryItOut("throw constructor;");
tryItOut("with({}) { with({}) let(-0['__count__'], constructor) ((function(){let(let = -this) { for(let y in []);})()); } ");
tryItOut("let (__iterator__, constructor = (__proto__ ? <x/> :  /x/g ) { /*infloop*/L:for(__iterator__; <><x><y/></x></>; @foo) {return constructor;return <>\t<x><y/></x></>; } }");
tryItOut("L:switch(#1#) { case 5:  } const function::getter;");
tryItOut("with({constructor: __proto__ = prototype})return;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prop] = (!<>throw *;</>.__lookupGetter__(\"__count__\")) in #3={a:#3#}) return [[]]\n");
