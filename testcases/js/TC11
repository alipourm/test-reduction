
tryItOut("with({}) ");
tryItOut("<y><z/></y>; const constructor;");
tryItOut("if(((({a2:z2}) ^=  '' )++)) { } else  if (()) {/*for..in*/for(var [constructor, __noSuchMethod__] = window in window) {{}return; }\n } else /*infloop*/for(const [] = (033 if (0x99)); (window + this); (*::*)()) {(<x><y/></x>); }");
tryItOut("/*infloop*/L:do {return [1,,];return ({}); const prop; } while(<xxx>{__parent__}</xxx>); const x::prop;");
tryItOut("/*for..in*/for(var x::__parent__ in ((<x><y/></x>.prototype = true * this.__lookupGetter__(\"__count__\"))(this)))return;");
tryItOut("/*infloop*/for(let [] = (p={}, (p.z = ({constructor: ( /* Comment */<x/>), __noSuchMethod__ setter: gc }))()) > <><xxx>{constructor}</xxx></>++; this.__defineGetter__(\"constructor\", function (prop)__iterator__); <><x><y/></x></>.valueOf(\"number\")) {/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.__count__ in true) {;export __noSuchMethod__; } }");
tryItOut("/*infloop*/do {{} } while(*);");
tryItOut("/*infloop*/M:do export __noSuchMethod__; while(0.1.__lookupSetter__(\"prop\"));");
tryItOut("let(({ prop: ({ ({ function::__parent__: ({ __noSuchMethod__: ({ __iterator__: __iterator__ }), constructor: [prototype, constructor, prop, /*\n*/, prototype] }) }): __parent__ }), __count__: __count__ }) = (constructor.((__iterator__ = <\fx><y/></x>))), __iterator__ = ) ((function(){for(let y in [5,6,7,8]) yield (__iterator__.__proto__);})());");
tryItOut("/*for..in*/M:for(let (<><x><y/></x></>)(__proto__) in [,,z1]) yield ({});");
tryItOut("with({}) return  ''  %  /x/ ;");
tryItOut("if((-0).*) {yield this;return; }");
tryItOut("/*for..in*/for(var prop =  ''  in (<x><y/></x>.eval(@foo))) {gc() }");
tryItOut("export __count__;");
tryItOut("with(new (new Function(\"return;\"))() + (__parent__ = 0x99)){with(*){yield; }export __count__; }");
tryItOut("if(@foo) {{} } else  if ((new (window += <><x><y/></x></>)([[]] | arguments, 1.3))) {return; } else yield __parent__, prototype;__noSuchMethod__ = __count__, constructor = (-1);");
tryItOut("if((*::*)(<x/>)) { if (( /* Comment */ /x/g )) {[] } else {}}");
tryItOut("/*for..in*/L:for(const [__parent__, __count__] = M:with(( '' .prop =  /x/ )){gc()(this); } in (\n(({}).hasOwnProperty).call(<x/>, <x/>, *::*))) {{} }");
tryItOut("with(new Math.pow(<x/>.__lookupSetter__(\"constructor\")))/*for..in*/L:for(let __noSuchMethod__ = this.__defineSetter__(\"__iterator__\", function  constructor () '' ) in  /x/g ) break M;");
tryItOut("M:while((__parent__ = __iterator__ = __count__) && 0)return <><x><y/></x></>;");
tryItOut("let (prop = (this.__defineGetter__(\"__count__\", function(y) { yield y; throw  /x/g ;; yield y; }))[(<><x><y/></x></> ? <y><z/></y> : @foo)].valueOf(\"number\")) { with({prop: (<y><z/></y> >>= *::*)}){var __count__ = false; } }");
tryItOut("M:if(new ({__noSuchMethod__ getter: Math.pow })([1] :: undefined)) { if (#3={a:#3#}.*) return;} else {var __parent__ = <x><y/></x>; }");
tryItOut("export __count__;");
tryItOut("/*infloop*/do M:with(__noSuchMethod__){throw 5.0000000000000000000000; } while(-(<bbb xmlns:ccc=\"null.unwatch(\"constructor\")\"><ccc:eee></ccc:eee></bbb>.([z1,,])));");
tryItOut("switch(<y><z/></y>.isPrototypeOf(__count__)) { default: L: yield constructor;break; yield __count__;break; case 0:  }");
tryItOut("L:if(({})) yield;");
tryItOut("(window);");
tryItOut("if(<><x><y/></x></>) ; else throw 1.2e3;");
tryItOut("if(this :: undefined === (\nthis)) { if (new (({}).__lookupGetter__)(undefined)) {return;; }} else {false }");
tryItOut("with({}) { <x/> } ");
tryItOut("L: let ;");
tryItOut("/*infloop*/M:for(<x><y/></x>.eval( /x/g ); __parent__.__iterator__ = __parent__; ({})) prototype = (({constructor: <><x><y/></x></> }).__defineGetter__(\"prop\", this.__defineGetter__(\"__count__\", eval)))");
tryItOut("return ; const prototype;\n\nexport __parent__;/*for..in*/M:for(__parent__ in true) {{}[1,2,3,4].slice }\n");
tryItOut("return;");
tryItOut("{/*infloop*/for(({ __noSuchMethod__: __iterator__, __noSuchMethod__: ({ __noSuchMethod__: __count__ }) }) = eval(\" \\\"\\\" \", function::__noSuchMethod__); constructor; eval(\"break ;\", __proto__) - (__iterator__)) /*infloop*/for(3; __noSuchMethod__; prop) {let prototype = undefined; } }");
tryItOut("switch(this.zzz.zzz) { case [(<x><y/></x> ^= function(id) { return id })]: /*infloop*/for((.isPrototypeOf(( '' .watch(\"__count__\", (new Function(\"gc()\")))))); constructor.function::__proto__; (({ set __parent__ prototype ()__count__ !== this }))) {var __noSuchMethod__ = this, __count__ = *::*; } const constructor;break; default: switch((p={}, (p.z = prototype.prototype = <y><z/></y>.@foo)())) { default: /*for..in*/for(get = new ((-1))(#3={a:#3#}) in 3) with( /x/ )(#3={a:#3#});case (arguments): /*infloop*/for(const prototype; <><x><y/></x></>;  '' ) {true; }break; break; return this;let __noSuchMethod__;\t }break;  }");
tryItOut("/*infloop*/M:for((yield ({a2:z2}).throw( '' )); (( /x/ );.yoyo([11,12,13,14].sort)); ({ __parent__: prop, __count__: __parent__ }) = ({ __count__: Math.sin }).__iterator__ =  /x/ ) let (prototype) { return; }");
tryItOut("gc();");
tryItOut("return <x/>\nyield this;");
tryItOut("if(new ()) __proto__ = this.zzz.zzz const __proto__;");
tryItOut("{let prototype; }");
tryItOut(" { export __iterator__; } ");
tryItOut("if(return <><x><y/></x></>[this];) { if ((this.zzz.zzz[(/a/gi)((({}) ? <x/> : __iterator__))]))  else {var __parent__;with(<x><y/></x>){return;gc() } }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in undefined) yield <x/>; const constructor;");
tryItOut("prop, constructor");
tryItOut("/*for..in*/for(const (constructor) in ((new Iterator(__count__ = <y><z/></y> << __noSuchMethod__ = <x/>))(__parent__))){let __proto__ = {; }");
tryItOut("with({}) { for(let y in []); } if(<><x><y/></x></>) export *; else  if ([11,12,13,14].some) {let __count__ =  '' , __count__ = undefined; }");
tryItOut("__parent__ = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let prop in (__iterator__)) {/*infloop*/for(constructor = __iterator__; window; this) const constructor, prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype.prototype in __parent__) {{gc() }false }");
tryItOut("{export *;{L:if(<>this.zzz.zzz;</>) {return <><x><y/></x></>; } else yield; } }");
tryItOut("if( '' ) {continue M;(new Function(\"__iterator__, __iterator__;\")) } else (function ([y]) { })();");
tryItOut("/*infloop*/for(var [({ __count__: [, __count__, , ] }), constructor, , , []] = 'fafafa'.replace(/a/g, [z1,,]); ((function(id) { return id }.prototype)((new String()), [15,16,17,18].filter(Math.sin, <><x><y/></x></>))); let (function::constructor = <x/>, constructor =  \"\" ) (function \t() { gc() } )( \"\" )) {const __proto__, __iterator__ = <y><z/></y>;throw constructor; }");
tryItOut("let (__parent__ = prop.( /x/ ), __proto__) {  }");
tryItOut("L:if(<x><y/></x>++ >>>=<><xxx {__count__}={[0.1].some((1 for (x in [])))} /></>.propertyIsEnumerable(\"__proto__\")) { if (__count__ = delete null.isPrototypeOf(<x><y/></x>)) {let __proto__; }\n} else __proto__");
tryItOut("gc()while((function ([y]) { }) && 0)let x::__count__;");
tryItOut("/*infloop*/\rfor(const __noSuchMethod__; 1e4['constructor'] =  /* Comment */<x/>; yield yield *::*) yield [1,,];");
tryItOut("{ '' ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in (this.__defineGetter__(\"constructor\", /a/gi))) {__iterator__; }");
tryItOut("default:  '' ;break; break; ");
tryItOut("/*for..in*/L:for(var [__count__, __noSuchMethod__] = (window >> 3) in <x/>) {{}export __noSuchMethod__; }");
tryItOut(" '' \n");
tryItOut("/*infloop*/for(<x><y/></x>; <><x><y/></x></>; this) export prop");
tryItOut("if(<x><y/></x>) { } const prop;");
tryItOut("/*infloop*/for(let __count__ = (new @foo()); (p={}, (p.z = this.__defineGetter__(\"__proto__\", function(q) { return q; }))()); function ([y]) { }) {;if(*::*) {; } else  if (<><x><y/></x></>) {break ;var get, __proto__; } }");
tryItOut("do throw 4.; while(((([1] if (this)))) && 0);\t");
tryItOut("return (new (<x><y/></x>)(<y><z/></y>, this)) !== ( /x/g .eval(*.watch(\"__proto__\", Math.sin)));");
tryItOut("if([,,] instanceof <x/>) {var __parent__, __iterator__ = <x/>;(this); } else  if ((constructor)(<x><y/></x>)) ( '' ); else {;let __parent__, __proto__; }");
tryItOut("/*infloop*/for(const ({ prototype: ({ __iterator__: prop }), prototype: ({ __iterator__: ({ prototype: __iterator__, __parent__: constructor }) }) }) = (let (prop = <><x><y/></x></>)  '' ).__lookupGetter__(\"__iterator__\"); #3={a:#3#} >>  '' ; this) return prop;");
tryItOut("const __iterator__ = <y><z/></y>, __count__;");
tryItOut("for(let y in []);");
tryItOut("with(<x/>){const __parent__, __count__ = [1,,];throw <><x><y/></x></>; }");
tryItOut("if(undefined) yield <><x><y/></x></>;");
tryItOut("if() {; } else {yield; }");
tryItOut("<\fx><y/></x> const prop;");
tryItOut("prop(__proto__ = {}\f) = ({ __count__: __iterator__ });");
tryItOut("if(*::*) {with({__proto__: (<><x><y/></x></> *=  '' )}){export *; const get; }gc() }");
tryItOut("export *; const __count__;");
tryItOut("let(prop =  /x/g  >>>=prototype, prototype) { throw StopIteration;");
tryItOut("with({prototype: this.watch(\"__parent__\", 'haha'.split)}){(constructor); }");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].map)) {/*infloop*/M:for(null; ({}); __count__) return; } else  if (new function ([y]) { } ? <><x><y/></x></> : <x/>.throw(new Date(false, <x><y/></x>))((+constructor))) {(new Function(\"return;\")) } else ;");
tryItOut("{break ;const constructor = constructor; }");
tryItOut("M:with({prop: @foo}){export __proto__; }");
tryItOut("while((((<x/>).call(null, __count__))) && 0)({}).__lookupGetter__");
tryItOut("let((<><x><y/></x></>['__iterator__']) = ( ? __noSuchMethod__ = false : <><x><y/></x></> %= 3.141592653589793), __iterator__) ((function(){throw StopIteration;})());");
tryItOut("M:if(([z1]\n)) export yield;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in __parent__) (<><x><y/></x></>);do (undefined); while(([<x/>]\t) && 0); }");
tryItOut("return;");
tryItOut("return;");
tryItOut("break ;");
tryItOut("let (prop = <x><y/></x>.yoyo(false)) { M:while((<y><z/></y>[ '' ] - <xxx>{__count__}</xxx>.(window & __iterator__)) && 0){const __iterator__ = <x/>, __proto__ = <x><y/></x>;yield <x><y/></x>; } }");
tryItOut("switch(<x><y/></x>.function::__iterator__ =  \"\" ) { case 2: /*for..in*/for(let [__iterator__, constructor] = <><x><y/></x></> in <><x><y/></x></>) {gc() }break; __proto__; }");
tryItOut("return (-1) .@*:: <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __noSuchMethod__ =  /x/g .valueOf(\"number\") in <\n><xxx {__parent__}={<x><y/></x>.eval(<><x><y\f/></x></>)} /></>.yoyo(true - __parent__)) {{;/*for..in*/for(var [prop, __parent__] = ([15,16,17,18].map(1e81, <x/>)) in prototype)  }return <><x><y/></x></>; }");
tryItOut("let (prototype = ((__proto__.prop = prototype))()) { [1,2,3,4].map }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in <x><y/></x>) ( /x/ ).__defineSetter__");
tryItOut("with({}) yield true;");
tryItOut("M:with({__proto__: @foo.propertyIsEnumerable(\"constructor\")}){throw false; }");
tryItOut("let(constructor = @foo, constructor = 3) { export __count__;");
tryItOut("let (prototype = <><x><y/></x></>) { yield <><x><y/></x></>; }");
tryItOut("prototype\nthrow this;");
tryItOut("if(__parent__.eval(this)) {(<x><y/></x>);/*infloop*/for(window; <x><y/></x>; 0) ; } else  if (__count__.__iterator__ setter= <><x><y/></x></>) {export prototype; }");
tryItOut("with({constructor: <x><y/></x\f>.@foo}){((undefined).watch).apply }");
tryItOut("/*for..in*/for(prop = (<{__parent__}> </{__parent__}>)[this instanceof <y><z/></y>.throw(<x><y/></x>.(<y><z/></y>))] in [1,,] !== 0x99) {export __iterator__; } const __parent__;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = constructor in constructor) {((-1)); }");
tryItOut("yield {export *;return; } *= __iterator__: prop;");
tryItOut("/*infloop*/for(<xxx {__iterator__}={yield <x><y/></x>} />; ~((this +=  '' ).eval((this.__defineGetter__(\"__count__\", ({}).__lookupGetter__)))); function(id) { return id }) throw this;");
tryItOut("return (__iterator__.__noSuchMethod__ = this);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in this) { }");
tryItOut("if(*::*) {yield;const __count__ = (-1); } else  if (<y><z/></y>) {export __noSuchMethod__;{} }\nreturn 1.3++;");
tryItOut("/*infloop*/for((__count__ = <x><y/></x>); 3/0.propertyIsEnumerable(\"__proto__\"); @foo) {gc() }");
tryItOut("yield <></>;");
tryItOut("/*for..in*/M:for(__iterator__ = ({ __count__: __count__, __iterator__: __iterator__ }) = (__iterator__ = *::*) in this = false) {var constructor = <x/>, prop; }");
tryItOut("/*infloop*/yield;for(const prop; ( /* Comment */<x><y/></x>); (__noSuchMethod__ = <x><y/></x>)++) return;");
tryItOut("/*for..in*/for(const __proto__ = window in (__iterator__)\n[<x><y/></x>]) let __count__ = *;");
tryItOut("for(let y in []);");
tryItOut("M:if(constructor = [,]) { if ((<><x><y/></x></>)[*]) export __noSuchMethod__; else let __count__, f;}");
tryItOut("/*infloop*/do {__count__ = false, __count__;const __iterator__ = 4.; } while({});");
tryItOut("while((new ()((uneval(<><x><y/></x></>)), __noSuchMethod__ = ({prop getter: ({}).__lookupGetter__ }))) && 0){do {} while((1e81.watch(\"prototype\", Math.pow)) && 0); }");
tryItOut("{Math.sin }");
tryItOut("/*infloop*/for(((({}).__lookupGetter__).call((new RangeError((1 for (x in [])), <x><y/></x>)), (__parent__ = <ccc:ddd><!--yy--></*\n*//ccc:ddd>), (\n<y><z/></y>) && .2 .@ null)); #1=[#1#]; (__parent__).__iterator__) {{} }");
tryItOut("switch((window = *::*)) { default: continue break; M:if(false) {var function::prototype = window, __iterator__ = *; } else  if (<x><y/></x>) throw  \"\" ; }");
tryItOut("if(<><x><y/></x></>\n > ({constructor: false})[<x><y/></x> >> {; } |= <x><y/></x>.(true) ?  /* Comment */<><x><y/></x></>(arguments,  \"\" ) : [true for each (__noSuchMethod__ in __proto__) for each (__noSuchMethod__ in __iterator__)]]) prototype else  if ([*::*].filter('haha'.split).valueOf(\"number\")) {;export *; }");
tryItOut("null;");
tryItOut("L: {L: {const __iterator__ = <x><y/></x>, __count__;throw (function ([y]) { })(); } }");
tryItOut("let (prop = ({__iterator__ setter: (<><x><y/></x></>).apply,  })) { {} const __parent__; }");
tryItOut("return null.__lookupSetter__(\"__proto__\");");
tryItOut("for(let y in []);");
tryItOut("return [[1]].__lookupGetter__(\"__count__\").hasOwnProperty(\"__iterator__\"); const __iterator__;");
tryItOut("/*infloop*/for(const __noSuchMethod__; (prop = <y><z/></y>); this.zzz.zzz) yield -0;");
tryItOut("/*infloop*/while(throw this){}");
tryItOut("/*infloop*/for((yield __noSuchMethod__); __proto__ =  /x/ ; <x><y/></x>(*::*,  /x/g )) if(<x><y/></x>) {throw prototype;gc() } else {yield;const constructor, __count__; }");
tryItOut("M:if(yield 1e81 == true.throw((<><x><y/></x></\f>.unwatch(\"prop\").eval(window.__iterator__ =  '' )))) constructor else  if (eval(\"new RangeError() >>> Number()\", prop%= \"\" ) += <y><z/></y> ?  \"\"  : <y><z/></y>.propertyIsEnumerable(\"__proto__\")) if(((uneval(<x><y/></x>)))) {*;yield; } else  if (({prototype: <><x><y/></x></>})) {continue ; } else {yield; } else {/*infloop*/for(const prototype = <><x><y/></x></>; <x><y/></x>; <x/>) {export __parent__;let prop; }/*for..in*/M:for(const __count__ in window) export *; }");
tryItOut("for(let y in []);");
tryItOut("if(<><x><y/></x></>) { if (__count__ = <x/>) {export constructor;(-1); } else {yield; }}");
tryItOut("throw prop;");
tryItOut("/*infloop*/for(let __iterator__; eval(\"[11,12,13,14].sort\", 1.3 % *); (eval(\"{}\", #1=[window]))) {(prop);gc() }");
tryItOut("M:while(([1,,].throw(<y><z/></y>)) && 0){return; }");
tryItOut("yield \f<x><y/></x>.(<x/>).propertyIsEnumerable(\"__parent__\");");
tryItOut("/*for..in*/L:for(let __proto__ in 0\t) gc()\n const __iterator__;");
tryItOut("if((~(<><x><y/></x></>.\tisPrototypeOf(*::*)))) { if ('fafafa'.replace(/a/g, (function () { return this } ).call)) return null; else throw 3.141592653589793;}");
tryItOut("gc()");
tryItOut("const __count__ = <><x><y/></x></>;");
tryItOut("/*infloop*/M:for([] = Number( /x/g ); <><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb></>; (prop.__proto__)) break L\n");
tryItOut("switch(null) { case __noSuchMethod__ = <><x><y/></x\t></>: <x><y/></x>; }");
tryItOut("__parent__ = prop;");
tryItOut("{return\nL: {var __iterator__ = __count__, __proto__ = <x/>;throw this; } }");
tryItOut("/*infloop*/for( /x/ ; false; 033) ");
tryItOut("/*infloop*/M:for([, ({ constructor: __noSuchMethod__ }), __noSuchMethod__, prototype, ] = 033; ([* if ( '' )]); __parent__ = null) {}");
tryItOut("/*for..in*/for(const constructor in ((function (function::prop) { {} } )(<x/>))){var __iterator__, __proto__; }");
tryItOut("if(constructor = <x/>) M:if(window) { if ((<><x><y/></x></>++)) {return -1;yield; }} else {throw 033;__count__ = true; } else {/*infloop*/for(typeof (<y><z/></y>.__iterator__ = __proto__); ((0x99.__defineSetter__(\"constructor\", function () { return <><x><y/></x></> } )).watch(\"constructor\", Math.pow)); (null ? <x/> : <x/> .@*:: Function())) ; }");
tryItOut("(<y><z/></y>);");
tryItOut("M:if(this) { if (<><bbb xmlns=\"<y><z/></y>\"><ccc:ddd></ccc:ddd></bbb></>) {{if(null) {yield ; }\f else  if (*) {; } else var prop = <x/>, __noSuchMethod__;if(__noSuchMethod__) {(<x><y/></x>);gc() } else  if (<y><z/></y>) function::__proto__ else {;yield; } } } else {L:if(<y><z/></y>.__defineSetter__(\"prop\", [1,2,3,4].map)) { if (({a1:1})\n) ; else {continue ; }} }}");
tryItOut("switch(((<x/> << *)((new String((<><x><y/></x></>)))))) { default: /*for..in*/for(const __parent__ = #3={a:#3#} if (window) in .2) /*infloop*/for(var prototype = 3.141592653589793; <y><z/></y>; [1]) {; }break; case 0: return; }while((({a1:1})) && 0)export prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ([11,12,13,14].sort) in (this)[@foo] || __parent__ = __iterator__) do return; while(((({__iterator__: false--,  set __count__ __iterator__ (__proto__, __count__) { return __iterator__ = <x/> }  }))) && 0);");
tryItOut("M:switch(window == window) { default: case 0: continue ;break; break; case 8: gc()break;  }\nM:switch(\nnull) { case 0:  }");
tryItOut("/*infloop*/L:for(__parent__; <zzz>[[, []], ({ __parent__: ({ __count__: prop, prototype: __parent__ }), prototype: ({ prototype: __proto__ }) }), , prop: <><x><y/></x></>] = prop = export *;</zzz>;  '' ) {__proto__\nreturn; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = [this] in undefined) {throw  \"\" ; }");
tryItOut("/*infloop*/do {/*for..in*/for(const (<x/>)(<x><y/></x>) in ((({}).__lookupGetter__)([11,12,13,14].filter))){const __proto__, prototype = *::*; }__proto__ = __proto__; } while(([11,12,13,14].some));");
tryItOut("{yield;gc() }");
tryItOut("for(let y in []);");
tryItOut("if(((uneval(eval(\"(({prototype: <><x><y/></x></>}))\", (((function  __parent__ (function::__proto__) {  } ).apply).call( \"\" , __parent__))))))) { if (({__iterator__: <y><z/></y> })) M:if(eval(\"let setter, __noSuchMethod__;\",  /x/g )) {(arguments); }} else {/*for..in*/L:for(var __count__ in []) {gc() }constructor }");
tryItOut("/*for..in*/for(const ({ prototype: __noSuchMethod__\f, prop: __parent__ }) in ((function  __iterator__ (({ __iterator__: ({ prop: ({ __parent__: [], __proto__: [] }), __proto__: ({ constructor: ({ constructor: prop, *::*: prototype }) }) }), __iterator__: ({ prototype: [[function::prototype, ], [constructor, constructor], , , ], __iterator__: ({ __parent__: ({ prop: constructor }), __count__: ({ prototype: __iterator__, prototype: __parent__ }) }) }) }), ({ function::__noSuchMethod__: ({ __count__: ({ const __proto__;: __iterator__ }), __count__: [, __parent__, __count__] }), __noSuchMethod__: ({ function::__proto__: [], __proto__: [, , , , constructor] }) }))constructor)(new Exception(<><x><y/></x></> <<= <x><y/></x>, false))))throw <x><y/></x>;");
tryItOut("yield new (gc)(1e4, prototype = prototype , (({__iterator__: <y><z/></y>})));");
tryItOut("/*infloop*/while(new (<><x><y/></x></>\n)(*::*--, undefined)){var constructor, __parent__ = <><x><y/></x></>; }");
tryItOut("let(__iterator__ = null) ((function(){})());");
tryItOut("/*for..in*/for(var prop = ({__noSuchMethod__: undefined}) in 1e81) const __iterator__ = window; const __count__;");
tryItOut("/*infloop*/M:do {return; } while(<x/>);");
tryItOut("with({}) /*infloop*/while(({a1:1})['__parent__'] = [11,12,13,14].map[__noSuchMethod__ = (return 1e4;)])/*infloop*/M:for(const [__count__] = ( /x/ .__lookupGetter__(\"constructor\").__defineSetter__(\"prop\", (<><x><y/></x></>).__defineSetter__)); __noSuchMethod__.prop = <x><y/></x>.@foo; ~<><x><y/></x></>) {return; }");
tryItOut("try { \tyield .2; } catch(__parent__) { this.zzz.zzz; } ");
tryItOut("with({constructor: ()}){const prototype; }");
tryItOut("M:do while(((<><x><y/></x></>.eval(<><x><y/></x></>))) && 0){({}).__lookupGetter__ } while((((__parent__this).__lookupGetter__(\"__proto__\"))) && 0);");
tryItOut("{__proto__ = <y><z/></y>; }");
tryItOut("let(__parent__, 7) { let(constructor) ((function(){let(__proto__ = (p={}, (p.z = constructor = 1e-81)())) { return (undefined++);})());");
tryItOut("/*infloop*/M:\nfor(const constructor = .__defineGetter__(\"__iterator__\", function(y) { yield y; L:do {*; } while(((__iterator__ = <x/>)) && 0);; yield y; }); constructor = <x/>.unwatch(\"prototype\"); (0x99 *= /*\n*/<><x><y/></x></>)) if(undefined .@*:: window && <><x><y/></x></>.watch(\"__proto__\", ({}).__lookupGetter__)) (<y><z/></y>); else  if (((* if (#3={a:#3#}))).yoyo(this <= 1e81\f)) {{false; } }");
tryItOut("/*for..in*/L:for(const [prop, <><xxx>{constructor}</xxx></>] = new (Math.pow)( /x/g ) in undefined) gc()if(( \"\" .watch(\"<x><y/></x>\", (1 for (x in []))))) {gc() } else  if (new (Math.pow)()) {export *;<><x><y/></x></>; }");
tryItOut("/*for..in*/for(var 033['__parent__'] in ((({}).hasOwnProperty)((++ '' )))){gc()window; }");
tryItOut("if(window) { }");
tryItOut("if(<xxx {__noSuchMethod__}={__iterator__.__defineSetter__(\"prop\", function(id) { return id })(<x><y/\t></x> ===  /x/g , true)[(window)[<x/>]]} />) { if (<>window.@*</>.__defineGetter__(\"({ prop: constructor, __iterator__: [({ __proto__: prototype, prop: prototype }), ({ __parent__: prop, __parent__: __iterator__ }), , ] })\", [1,2,3,4].slice)) /*for..in*/for(prop in (([1,2,3,4].slice)(*::*)))yield;} else /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__.prop in @foo) ;");
tryItOut("/*for..in*/for(var __iterator__\f.prototype in ((function(y) { yield y; let (__count__ = this.yoyo(<>try {  } catch(prop if (function(){gc})()) { return; } catch(prototype if (function(){yield null;})()) { return; } catch(prop) { yield; } </>), function::__count__) { continue L; }; yield y; })((arguments.prototype)))){if((<x><y/></x>.@foo) - <y><z/></y> | __noSuchMethod__) {yield <y><z/></y>;var __iterator__, __proto__; } else {return;export __parent__;//h\n }L:if(<y><z/></y>.constructor = 3/0) {yield;return; } else  if (__count__.__proto__ = true.__iterator__) export prototype; }");
tryItOut("\f;");
tryItOut("do {let __noSuchMethod__; } while(((yield ({a2:z2}))) && 0);");
tryItOut("while((<y><z/></y>) && 0)__parent__, __count__ = -0;");
tryItOut("M:with({__iterator__: [({__noSuchMethod__ setter: function () { return; }  }) if (false)]}){yield; }");
tryItOut("M:if(export *) {var __parent__ = <><x><y/></x></>, prototype; } else  if (@foo.prototype) {export *;return __parent__; } else {return;M:if() (window).__defineSetter__ }");
tryItOut("/*for..in*/M:for( \"\" ['prototype'] in \fnull) {({}).hasOwnProperty }");
tryItOut("/*infloop*/M:for(prototype; window.unwatch(\"__parent__\"); (eval(\"([z1,,]);\", @foo))) if(<x/>) {const constructor, constructor = <x/>;let constructor; } else {__noSuchMethod__gc() }");
tryItOut("/*infloop*/for(constructor = arguments; #1=[#1#]; [[]]) function (__proto__, __noSuchMethod__) { (<x/>); } ");
tryItOut("export __parent__;");
tryItOut("/*for..in*/for(prop in ((__proto__: function(id) { return id }function  prop (__count__)__noSuchMethod__)(<x><y/></x>))){const constructor = *::*; }");
tryItOut("while((__parent__.constructor) && 0){for(let y in [5,6,7,8]) __noSuchMethod__ = __noSuchMethod__;; }");
tryItOut("do export *; while(((({a2:z2}) >>>  /x/g )) && 0);");
tryItOut("L:if(new Exception( /x/ )) let function::__iterator__; else {return; }\n");
tryItOut("M:if(1.2e3) { if (__count__.prop setter= ((-1)).__defineSetter__) {{}throw *::*; }} else <x><y/></x> = window, __parent__;");
tryItOut("{/*infloop*/for(const __iterator__ = *::*; 5.0000000000000000000000; <x/>) {return; }return; }");
tryItOut("let([constructor] = #1=[#1#] for (__parent__ in __iterator__)) { this.zzz.zzz;");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(var prop = new #1# in <><x><y/></x></>) {{}var __iterator__ = <x><y/></x>, __iterator__; } const prop;");
tryItOut("/*infloop*/M:do {{export __proto__; } } while(<x/>);");
tryItOut("M:with({constructor: undefined.valueOf(\"number\")}){yield (-0); }");
