tryItOut("L: /*infloop*/for(let \t__proto__ = (+undefined); #1=[1,,];  '' ) {export __count__; }");
tryItOut("/*for..in*/for(const __proto__ in ((function  constructor (__iterator__) { gc()function  __iterator__ () { return window }  } )(([<><x><y/><\f/x></> for each (__noSuchMethod__ in <x><y/></x>)]))))/*for..in*/for([constructor, __proto__] = [*::* if (false)] in 3.141592653589793) export *\nif((uneval([z1]))) { if ([] == *::*) {gc() }} else {{}\treturn true; }");
tryItOut("{break ;throw <x><y/></x>; }");
tryItOut("with((p={}, (p.z = ({a2:z2}))()))return;");
tryItOut("let (prop) { {return;export *; } }");
tryItOut("yield;(*::*).watch");
tryItOut("/*infloop*/for(const ({ __parent__: [constructor], __count__: prototype }) = (constructor = (yield __noSuchMethod__)); x::prototype.__proto__; (new (this)('fafafa'.replace(/a/g, (<><x><y/></x></>).apply)))) continue M;");
tryItOut("switch(gc) { case (<x><y/></x>.__defineSetter__(\"prop\", <x><y/></x>)) for each (prop in *) if ([[[1]]].sort(eval)): break; (undefined);break; {; const __noSuchMethod__; }if(yield [prop, , __count__, ] = (__proto__ = undefined)) { if ((<x><y/></x>.@*)) yyy} else /*infloop*/for(const prototype = 1e-81; window; <y><z/></y>) gc()case 2: break; default: break; while(((<x><y/></x> && -0)) && 0)prototype, prototype = [,,z1];break; case eval(\"(@foo)\", __iterator__.__parent__):  }");
tryItOut("({ __noSuchMethod__: __proto__, __noSuchMethod__: ({ __iterator__: prototype }) }) = [1,,], ({ __parent__: ({ __count__: prototype }), __count__: ({ __iterator__: __noSuchMethod__ }) }) = <x/>");
tryItOut("/*for..in*///h\nfor(var [__count__, prototype] = let (__iterator__ = ([! /x/ ])) null.__lookupSetter__(\"__noSuchMethod__\") >>= 1.2e3 << (-0) in this.__defineGetter__(\"__count__\", <y><z/></y>)) {if(*) throw @foo; else  if ( \"\" \t) {let prototype, __parent__;yield 1e-81; } else const let = <x/>, __proto__;return *::*; }");
tryItOut("\fif(<y><z/></y>-- < false.isPrototypeOf(__count__)) return; else {return; }");
tryItOut("return (({prop getter: [1,2,3,4].slice,  set prototype(__iterator__) { return <x><y/></x> }  })(__iterator__ = x::prop));");
tryItOut("window;");
tryItOut("with({constructor: (<x><y/></x>.@foo.watch(\"__parent__\", new Function))})/*infloop*/while(window.prop = window.constructor = @foo)gc");
tryItOut("/*infloop*/L:for(const ({ constructor: ({}).__parent__ }) = <> </>; (<x><y/></x> ? window : <y><z/></y>.__iterator__ = <{prototype}>yyy</{prototype}>.(constructor = <x/>)); undefined\n.__lookupSetter__(\"prototype\")) ");
tryItOut("with(([false for (__iterator__ in <y><z/></y>) for (__proto__ in prototype) for each (__noSuchMethod__ in undefined)]))gc()");
tryItOut("const constructor = <x><y/></x>;;");
tryItOut("/*for..in*/for(var __parent__ = ((<x/>).__defineSetter__())\t instanceof this.watch(\"constructor\", function (__proto__)prop) in ( /x/ .valueOf(\"number\"))) {L:if( /x/ ) * else {(this).__defineSetter__ } }");
tryItOut("/*infloop*/for(<><x><y/></x></>; false;  \"\" ) undefined;");
tryItOut("/*for..in*/for(let [constructor, constructor] = new function  __iterator__ () { return (<y><z/></y>.__defineGetter__(\"prop\", <y><z/></y>)) } ((new Iterator(0x99)), this.__parent__ =  \"\" ).throw((uneval(.2)) :: 'fafafa'.replace(/a/g, (*).watch)) in ()) /*for..in*/for(const __noSuchMethod__ in ((function () { return <y><z/></y> } )(('fafafa'.replace(/a/g, (1 for (x in []))))))){continue M; }");
tryItOut("switch(-0 + {}) { case 2: break;  }");
tryItOut("while((<><x><y/></x></>[ '' ]) && 0)/*infloop*/while(__proto__ = __parent__ >>  '' )(<><x><y/></x></>);this.zzz.zzz; const __noSuchMethod__;");
tryItOut("/*infloop*/L:while((1e81().__lookupGetter__(\"prop\"))){throw prototype }");
tryItOut("/*infloop*/for(prop.(constructor); prototype.(this); delete {var <x><y/></x>, constructor = window; }) {throw false; }");
tryItOut("gc()let (prop) { export *; }");
tryItOut("{yield;prop; }");
tryItOut("({ __iterator__: __count__ })");
tryItOut("L:if(__parent__) {__noSuchMethod__, prop;export *; } else  if (((p={}, (p.z = [,,])()))) export function::__noSuchMethod__; else {function(y) { yield y; ; yield y; } }");
tryItOut("if(*) {yield undefined; }");
tryItOut("( /x/ );");
tryItOut("L:while((<><x><y/></x></>.hasOwnProperty(\"__proto__\")) && 0){<><xxx {__noSuchMethod__}={\tthis} /></> }");
tryItOut("try { throw <x/>; } finally { yield; } ");
tryItOut("/*for..in*/for(prop in (((undefined).apply)(__count__ = __noSuchMethod__))){/*for..in*/L:for(const prop in 033) {var __noSuchMethod__, __noSuchMethod__; } }");
tryItOut("var constructor, __count__ =  /x/ ;");
tryItOut("if(<x><y/></x>) yield; else  if (1.2e3) {continue L;yield; } else {{}prop = constructor, __proto__; }");
tryItOut("__count__ = __iterator__;");
tryItOut("{throw constructor; }");
tryItOut("let(__noSuchMethod__) { {}");
tryItOut("catch(prop if (function(){try { with({}) { {} }  } catch(prop if (function(){return <x><y/></x>;})()) { for(let y in []); } catch(__noSuchMethod__ if (function(){with({}) const __count__ = window, prop = <x><y/></x>;})()) { throw StopIteration; } })()) { let((<x><y/></x>)(prop) = undefined) ((function(){this.zzz.zzz;})()); } catch(__noSuchMethod__ if (function(){this.zzz.zzz;})()) { let(({ prototype: __noSuchMethod__, prototype: ({ __proto__: __proto__, __parent__: constructor }) }) = void false, __noSuchMethod__) { gc() } catch(__parent__ if (@foo for each (__count__ in arguments))) { yield __noSuchMethod__ = window.yoyo(\f@foo); } catch(\f__noSuchMethod__) { return; } finally { return *::*; } ");
tryItOut("/*for..in*/for(yield in (((({__noSuchMethod__: __count__ }) = (({ get constructor __proto__ (__proto__) { yield null }  })).__defineSetter__(\"__iterator__\", Function)).watch)(this.zzz.zzz)))const <><x><y/></x></>;");
tryItOut("if(prop = <><x><y/></x\t></>.__proto__.__lookupSetter__(\"__noSuchMethod__\")) {/*for..in*/M:for(var [__noSuchMethod__, __proto__] = -3/0.__parent__ in @foo) L:if(<><x><y/></x></>) { if (window) ; else {}} } else {const constructor = <><x><y/></x></>, __count__ = <><x><y/></x></>;M:do {return arguments; } while((*::*) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) switch(window.__defineSetter__(\"prop\", function () { return <y><z/></y> } )) { default: Math.sinbreak;  }\f");
tryItOut("/*for..in*/for(prototype = let (__iterator__) <x><y/></x>[/*\n*/(constructor = 1e4)] in (eval(\"<y><z/></y>\", true))) yield <x/>;");
tryItOut("switch(({__noSuchMethod__: __parent__.constructor})) { case 1: default: throw StopIteration;break; break L;break;  }");
tryItOut("with({}) { try { __proto__ = __noSuchMethod__; } catch(prototype if this.__defineSetter__(\"__count__\", (this).watch)) { return (null.throw([,,z1])); } catch(constructor) { throw constructor; }  } ");
tryItOut("if(__iterator__ = 033) break ; else  if (([11,12,13,14].some.__lookupSetter__(\"__noSuchMethod__\")))  '' ;");
tryItOut("yield;");
tryItOut("L:if(let (__noSuchMethod__, __noSuchMethod__) this < delete + ({ prototype: __iterator__, __noSuchMethod__: prop }) = []) if(<xxx {__count__}={'fafafa'.replace(/a/g, ((new Function(\"return;\"))).call)} />) {(__noSuchMethod__); } else  if ([__iterator__].filter(Math.sin)) /*for..in*//* nogeckoex bug 349964 */L: for  each(set in window) {} else let (__iterator__ = __proto__, __iterator__) { ; } else {export *; }");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("M:if(((<><x><y/></x></>.__defineGetter__(\"__parent__\", 'haha'.split)) <= window.__noSuchMethod__)) break ; else  if (*::*) {{} }");
tryItOut("{function(q) { return q; }var __iterator__ = <><x><y/></x></>; }/*for..in*/for(const __parent__ in ((Math.sin)(<y><z/></y> *= window)))\tyield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in 4.) {throw <x><y/></x>; }");
tryItOut("/*infloop*/for(let __count__; __parent__ = *::*; __proto__.__parent__ = window) throw  '' ;");
tryItOut("with({}) 'haha'.split");
tryItOut("return\n\n");
tryItOut("/*infloop*/M:while(new (this.__defineGetter__(\"__iterator__\", (Function).apply)) < this.__defineSetter__(\"__count__\", new Function)(undefined && <><x><y/></x></> :: <x><y/></x>))gc()");
tryItOut("/*infloop*/L:do {yield; } while( \"\" .valueOf(\"number\")); const constructor;");
tryItOut("if((this.__defineSetter__(\"prop\", (window)(<x/>)))) {if(#1=({__iterator__: window})) {yield <y><z/></y>; }__proto__ = ({}), __parent__; } else  if (this) {\fM:while(( /x/ \n) && 0)if(constructor) {yield;(this); } else  if (@foo) return; } else yield <y><z/></y>;");
tryItOut("switch(<><bbb xmlns:ccc=\"(constructor << *.@foo)\"><ccc:eee></ccc:eee></\tbbb>\t</>) { default: /*for..in*/L:for(var prop in (__noSuchMethod__.__defineGetter__(\"__parent__\", /a/gi))) let prop = __proto__, prop; }");
tryItOut("/*infloop*/for(({ __iterator__: prototype }) = @foo & true/*\n*/; new String(@foo.__lookupSetter__(\"__noSuchMethod__\"), [,,z1]); __parent__) let prototype = */*\n*/;");
tryItOut("M:do export *; while((return) && 0);");
tryItOut("L:if(this in window) { if ((#3={a:#3#})[this] |= * ^= [15,16,17,18].map([1,2,3,4].slice, <><x><y/></x></>)) with({__proto__: <><x><y/></x></>}){function(y) { yield y; break M;; yield y; }export *; }} else {export *; }");
tryItOut("L:do {Math.powcontinue M; } while((prop.hasOwnProperty(\"__count__\")) && 0);");
tryItOut("if((String(({ __noSuchMethod__: function::prop }) = <x><y/></x>.eval(<x><y/></x>), (void ({}))))) {__noSuchMethod__, __proto__ =  '' ; } else  if ((function \f __noSuchMethod__ (__proto__)__parent__ = <x><y/></x>).call(({}), <y><z/></y>, this) ===  '' .prototype |= __iterator__ ^= <x><y/></x>) {/*infloop*/while(true){{(__parent__); } } } else gc()");
tryItOut("let(__noSuchMethod__ = <><x><y/></x></>, __proto__) ((function(){export *;})());");
tryItOut("export *\n{}");
tryItOut("/*infloop*/while(0/0){(<><x><y/></x></>); }");
tryItOut("let(constructor) ((function(){try { __count__; } finally { {} } })());");
tryItOut("if(<><x><y/></x></>.@foo) { if (throw <y><z/></y>) {{} }} else {return *;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/while((__proto__ = <><x><y/></x></>))/*for..in*/M:for(__proto__ in (((function  __proto__ (prop, __noSuchMethod__) { yield [1,,] } ).call)([[1]])))gc()");
tryItOut("return window;(<y><z/></y>);");
tryItOut("return window;\n<x><y/></x>\n");
tryItOut("with({}) { try { with({}) break ; } catch(constructor if /*\n*/__proto__ = ( ''  >>>=#1=[#1#])) { for(let y in []); }  } ");
tryItOut("if(prototype = (*::*.eval(({prototype: *})))) L: return <x/>; else  if ((({ prototype: __iterator__ })) = [1,,].valueOf(\"number\")) {prop; } else {gc\n }");
tryItOut("L:with(prototype-={})yield\ndo {continue ; } while((false) && 0);");
tryItOut("return <x><y/></x>; const function::__noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("{<y><z/></y>;throw <x/>; }");
tryItOut("/*infloop*/for(var __proto__ = [window]; <><x><y/></x></>; ([<'x><y/></x>].sort(Math.sin))) undefined, ({__count__:  '' , __noSuchMethod__:  /x/g  })");
tryItOut("/*infloop*/while(@foo)export *;");
tryItOut("if((+<><x><y/></x></>) <= this ? <y><z/></y> : *::*) {yield;return -1; } else  if (new (null)( /x/g )) throw window; else { }");
tryItOut("if(<x/> != @foo) /*infloop*/for(__count__ = 1e-81; window; __iterator__) prototype; else  if (*::* .@  /x/g  & __count__ = 1e81) {(__count__); } else prop = 1e-81;");
tryItOut("if((true.eval(<x><y/></x>) | new <y><z/></y>(__noSuchMethod__, <x><y/></x>))) let __iterator__, __noSuchMethod__ = __proto__; else  if (((__proto__ = ({})).valueOf(\"number\"))) {yield  /x/g ; }");
tryItOut("let (__parent__, __iterator__ = (({}).hasOwnProperty).call(prototype, ).__proto__ =  \"\"  += <y><z/></y>) { let (prop = this) { __count__ } }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*for..in*/M:for(const [__iterator__, __parent__] = (<y><z/></y> < 1.2e3)++ in (null.prototype)) {gc() }");
tryItOut("yield; const __noSuchMethod__;");
tryItOut("if(((uneval(0)))) yield  /x/ ; else  if (constructor = <y><z/></y>) export __iterator__;");
tryItOut("if([@foo for (__noSuchMethod__ in  /x/ ) for (__proto__ in <x><y/></x>) for (__parent__ in __noSuchMethod__)]) /*infloop*/for(<x><y/></x>; __noSuchMethod__; [,]) throw  /x/ ; else  if ((<><x><y/></x></>.__lookupGetter__(\"__iterator__\")).@*) yield @foo\n");
tryItOut("");
tryItOut("L:switch(this.__defineGetter__(\"__noSuchMethod__\", Math.sin)) { case 4: case 9: let __parent__, prop;case 2: if(<x><y/></x>) { if ([,,]) {{} } else {yield  /x/ ; }}/*infloop*/do {//h\nconst __parent__, prototype = undefined;<x/>; } while( \"\" );default: prototype = __proto__ = <x><y/></x>; }");
tryItOut("(this).__defineSetter__");
tryItOut("let (constructor = ({ constructor: __iterator__ }) = function  prototype () { return [z1,,] } .throw(__parent__ = <x><y/></x>)) { /*for..in*/for(const null in [<><x><y/></x></>]) {yield 1.3;return; } }");
tryItOut("if((<x/> / null)) prop = null, prop =  \"\" ; else yield;");
tryItOut("__parent__ const __count__;");
tryItOut("/*infloop*/for(prop = false.@foo; this.__defineSetter__(\"prototype\", function(y) { yield y; (__iterator__);; yield y; }); *::*.isPrototypeOf(3)) (constructor);");
tryItOut("if(new (window.__lookupGetter__(\"prop\"))({yield;gc() })) {/*for..in*/for(const constructor = __noSuchMethod__.__proto__ = false.propertyIsEnumerable(\"__iterator__\") in @foo) return @foo; }\n");
tryItOut("/*infloop*/for(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.@*; void <><x><y/></x></>.__proto__ = this; ([[] = [constructor]].sort(function (__noSuchMethod__, [constructor]) { let prop; } ))) ;");
tryItOut("throw window;return\n/*infloop*/M:while(false)<y><z/></y>");
tryItOut("if( \"\" .hasOwnProperty(\"constructor\")) gc()");
tryItOut("throw StopIteration;");
tryItOut("if((('haha'.split)(new (new Function)(), <x/>)) .. ((__count__ = false) &= Math.pow(true,  get constructor __parent__ (__iterator__, __proto__) { return * } ))) export __iterator__; else  if (this.throw( '' )) {return;__parent__ } else {@foo;break ; }");
tryItOut("let(({ __iterator__: prop }\f)) ((function(){constructor = __proto__;})());");
tryItOut("/*infloop*/for(<y><z/></y>; yield (1e81).__defineSetter__(*::*, #1=[#1#]); <><><x><y/></x></></>\f) {export prototype;<y><z/></y>; }");
tryItOut("{yield; }");
tryItOut("{/*for..in*/M:for(constructor in ((function(y) { yield y; throw window;; yield y; })(1e81))); }");
tryItOut("\n");
tryItOut("let(prototype = window, prototype = function ([y]) { }[(({constructor: <><x><y/></x></>,  set prop prototype (__noSuchMethod__, constructor)<x><y/></x> }))].throw( super )) ((function(){return;})());");
tryItOut("{}");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(var __count__ = yield (({a1:1})\n) in switch(<y><z/></y>) { case 5: break;  } + 'fafafa'.replace(/a/g, new Function)) {continue L; }");
tryItOut("/*for..in*/L:for(prototype in this) {do {return; } while((__proto__ instanceof false) && 0); }");
tryItOut("/*infloop*/for(this@foo; __count__ = __iterator__; \nwindow) {/*infloop*/L:for(__parent__ = this;  '' ; <x/>) prototype = this;with(function::setter = null){yield;{} } }");
tryItOut("/*infloop*/for(<y><z/></y>; @foo;  /x/ ) {continue L;[1,2,3,4].slice }");
tryItOut("/*for..in*/for([__proto__, prototype] = [15,16,17,18].sort((<><x><y/></x></>).__defineSetter__, this) in <x><y/></x> ) {export *;function(q) { return q; } }");
tryItOut("prototype = __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ({ prototype: constructor }) in [z1,,]) {;yield; }");
tryItOut("if((function  __count__ (__count__) { yield \f<x><y/></x> } )) L: {export __noSuchMethod__;export __proto__;\f } else  if ((<xxx>{prop}</xxx>.(__noSuchMethod__ = [[1]]))) {/*for..in*/for(var [__proto__, prototype] = window in ({a2:z2})) let prototype = #1=[#1#], __count__ =  /x/ ; } else let (__proto__) { (window); }");
tryItOut("if(<zzz>((uneval(*::*)))</zzz><employee id=\"1\"><name>Joe</name><age>20</age></employee><ccc:ddd><x><y/></x>yyy</ccc:ddd>.((({__proto__: constructor = *})))) { if ((.propertyIsEnumerable(\"__proto__\"))) {let(prototype, yield) { continue ;{return; } } else {export __count__;/*for..in*/M:for(var [, , ] = new <><x><y/></x></>(*::*, <x/>) in window) (window); }}");
tryItOut("export *;");
tryItOut("/*for..in*/for(\f__noSuchMethod__ = (0.1)[<x/>] in /a/gi) {(<><x><y/></x></>);/*\n*/break M; }");
tryItOut("L:do {/*infloop*/M:for(const [, , , ] = (this.__defineSetter__(\"constructor\", <x><y/></x>)); <x/>; (constructor.__count__)) {export *; } } while((this) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((yield #1#))) export ({ __proto__: ({ __parent__: prop }), prop: [, , constructor] });");
tryItOut("L: if((Error(<><x><y/></x></>, window))) { if (prototype)  '' } else {throw <><x><y/></x></>; }");
tryItOut("return;");
tryItOut("{{} }");
tryItOut("export *");
tryItOut("/*infloop*/for(const (true :: window.function::__proto__) = new __proto__ = constructor(([ /* Comment */function ([y]) { }]), ({__proto__: [15,16,17,18].sort(eval, __parent__) })); ({__count__: //h\n<x/> >>> (-1)}); prototype.constructor) export *;");
tryItOut("/*for..in*/for(var prototype in null) 'haha'.split");
tryItOut("switch(/*infloop*/for(#1#; this; this) {let __noSuchMethod__ = prop; }\n &= @foo) { default: case 7: /*infloop*/for(var ({ __count__: prop }) = yield <x><y/></x>; (window)(<x><y/></x>); this) gc()case 0: function (__noSuchMethod__, __proto__)*\nreturn yield 0/0;\nbreak; L:\twhile((prototype) && 0){/a/gilet constructor; }case 8: break; case 1: case window.yoyo(__noSuchMethod__|=window): __iterator__break; case (this.__defineGetter__(\"constructor\", (1 for (x in [])))): break; case 0:  }");
tryItOut("L:if((([1,2,3,4].slice).apply).call((window)[this], )) { if (new (Function)(this)) {var prop, __count__;const __noSuchMethod__, __iterator__; }} else return  \"\" ;");
tryItOut("/*infloop*/for(let __proto__; this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice); <>@foo</>) with({__noSuchMethod__:  /x/ })return case 6: throw true;break; ;default: export __proto__;break; case 6: yield;break; return;break; case 9: case 8: break; case 5: [,];break; export prop;break; case this: break; case 2: (null);;");
tryItOut("yield {}");
tryItOut("/*for..in*/for(const prototype in []) {{} }");
tryItOut("(true);");
tryItOut("/*infloop*/while(constructor = try { let(__proto__ = false) ((function(){(0/0);})()); } catch(__iterator__) { this.zzz.zzz; } finally { __iterator__ = __count__; } )export *;");
tryItOut("/*for..in*/for(__noSuchMethod__ in <x><y/></x>.throw(window)) return;");
tryItOut("/*infloop*/do {return <y><z/></y>;return; } while(*::*.valueOf(\"number\"));");
tryItOut("{throw eval(\"return;\", ({__iterator__:  { return (__iterator__ = <x><y/></x>) } .unwatch(\"prop\")}));__proto__; }");
tryItOut("if(constructor = <><x><y/></x></>) return\nreturn;/*for..in*/\fM:for(let constructor in ((gc)((-0))))__proto__");
tryItOut("M:if(prototype =  /x/g ) { if (({__noSuchMethod__ setter: [1,2,3,4].slice })) {/*for..in*/<y><z/></y> }} else {/*for..in*/M:for(const (5.0000000000000000000000(undefined))((eval(\"__noSuchMethod__\", window))) in (((new Function(\"let (constructor = window) { return <><x><y/></x></>; }\")))((<y><z/></y>.valueOf(\"number\"))))){export *; } }");
tryItOut("yield;");
tryItOut("L: L:if( \"\"  , (-0)) {export __proto__; } else  if (\n*) throw null;");
tryItOut("/*for..in*/for(let prop in __noSuchMethod__ =  \"\" ) constructor");
tryItOut("/*infloop*/for(let [({ __count__: ({ constructor: ({ constructor: ({ constructor: ({ __parent__: ({ __parent__: prototype, __proto__: get }) }) }) }), prototype: [[, , ({ prop: ({ __noSuchMethod__: __count__ }), __proto__: constructor }), [, , , prototype, [prop]]]] }) })] = prototype = true; ([1,2,3,4].map).call(); [,,z1]) /*infloop*/for(let __count__; <x><y/></x>; <y><z/></y>) {let __count__;return; }");
tryItOut("{true;return *; }");
tryItOut("switch(<x/>.__proto__) { case 3: /*for..in*/ \"\" break; default: throw <x><y/></x>; }");
tryItOut("break L;");
tryItOut("M:if(window.__parent__ =  '' ) export __count__; else {return;export *; }");
tryItOut("if(new ([1,2,3,4].slice)(this.zzz.zzz,  \"\" )) switch(undefined) { case 6: const prop = true, constructor;break;  } else  if ( \"\"  !== function ([y]) { } &=  '' .isPrototypeOf(true\t)) ; else gc()");
tryItOut("M:\tif(__iterator__) {} else  if (<><x><y/></x></>) ([,,]); else break M;/*for..in*//* nogeckoex bug 349964 */ for  each([,,z1].__count__ in window) { \"\" ;return window; }");
tryItOut("if([z1,,]) { if (<x/>) break ; else constructor}");
tryItOut("throw __parent__;");
tryItOut("if(<><x><y/></x></>.__iterator__ = <><x><y/></x></>) throw <x><y/></x>; else break ;");
tryItOut("try { return ([11,12,13,14].map); } finally { throw StopIteration; } ");
tryItOut("if((@foo ? <y><z/></y> : 0.1)) {return <x/>;export __proto__; } else ");
tryItOut("let __parent__ = 033; const prop;");
tryItOut("yield \nundefined; const prototype;");
tryItOut("/*infloop*/L:for(var ({ __noSuchMethod__: ({ __noSuchMethod__: [], prototype: [prototype, , __noSuchMethod__] }), __iterator__: constructor }) = []( /x/  |= <><x><y/></x></>, --1.3); <><bbb xmlns=\"__iterator__.constructor =  \"\" \"> </bbb></>; (uneval((x::prop.(null))))) {return prop;__noSuchMethod__, __proto__ = __parent__; }/*\n*/");
tryItOut("/*for..in*/for(const [prop, __parent__] = (new  /* Comment */<><x><y/></x></>[this]) in prototype = __count__) (function ([y]) { });");
tryItOut("try {  '' ; } catch(x::x::prop) { yield; } ");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("throw constructor;");
tryItOut("/*infloop*/do {break L;yield; } while(new (<x><y/></x>)());");
tryItOut("/*for..in*/for((prototype) in 'fafafa'.replace(/a/g, Math.pow)) {{} }");
tryItOut("/*infloop*/for(__proto__; (((\f{<x/> setter: Math.sin }) if (<><x><y/></x></>))); [15,16,17,18].filter(gc, ({__count__: *.valueOf(\"number\"),  get prop prop (prototype)//h\n { return __iterator__ = ({}) }  }) <= delete <x><y/></x> !== prop)) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in *) break ;{} }");
tryItOut("while((\n<><x><y/></x></> @ *) && 0){if(<y><z/></y>) yield;yield <x><y/></x>; }");
tryItOut("/*infloop*/do {yield <><x><y/></x></>;\n } while((__noSuchMethod__%=<x><y/></x>));");
tryItOut("with({}) { return 0.1; } ");
tryItOut("/*infloop*/M:do return <><x><y/></x></>; while(<xxx>{prop}</xxx>);");
tryItOut("export *;");
tryItOut("prototype = #3={a:#3#}\n");
tryItOut("/*infloop*/for(let prop = __noSuchMethod__; constructor = null; let prototype, __proto__) {if( /x/g ) break M; else  if (*::*) {yield <x><y/><//*\n*/x>; }return; }");
tryItOut("do <zzz>null</zzz> while((__count__) && 0);");
tryItOut("try { return eval(\"throw window;\", null); } catch(__proto__ if __parent__) { throw StopIteration; } catch(prop) { for(let y in [5,6,7,8]) try { export __noSuchMethod__; } finally { var setter, __parent__ = <><x><y/></x></>; }  } ");
tryItOut("if(((*)(<x><y/></x>, <y><z/></y>)) ?  /* Comment */__parent__ : (yield *::*)) { if ((['prototype'] = <y><z/></y> %= null)) {/*infloop*/for(var __proto__ = (<x><y/></x>.prototype = yield  \"\" ); *.throw(<x/>);  /x/  ::  \"\" \n) {[1,2,3,4].map{\t} }/*infloop*/while(3/0.propertyIsEnumerable(\"prototype\"))const function::prop = <x/>, constructor\n }\t else /*for..in*/for([__noSuchMethod__, ] in +<><x><y/></x></>) throw 4.;}");
tryItOut("/*infloop*/while(window){prototype;function(y) { yield y; let constructor;; yield y; } }");
tryItOut("M:while((__count__.__noSuchMethod__ = ([({})].filter(eval))) && 0)/*infloop*/for(this.__defineSetter__(\"__count__\", <><x><y/></x></>); yield {}; ><x><y/></x></>.valueOf(\"number\")) {function::__proto__ = <><x><y/></x></>{} }");
tryItOut("{{} }");
tryItOut("with((__count__.(<x/>))){window;export *; }");
tryItOut("break M; const __noSuchMethod__;");
tryItOut("return <><bbb xmlns=\"(((new Function(\"yield;\")))(prop))\"></bbb></>;");
tryItOut("\nwhile(((p={}, (p.z = *::*)())) && 0)var __parent__;");
tryItOut("({}).__lookupGetter__");
tryItOut("/*infloop*/while(<x><y/></x>.(0))__count__, __iterator__;");
tryItOut("let (({ __proto__: [, ({ __proto__: ({ prototype: prop }), __noSuchMethod__: ({ __noSuchMethod__: {}, constructor: prop }) }), __proto__], __iterator__: ({ __count__: constructor, __iterator__: ({ __count__: (prop), __proto__\f: __parent__.constructor }) }) }) = (null - false / (0.1 == get = __proto__))) { switch(<><x><y/></x></>[this]) { case 9: break;  } }");
tryItOut("export __parent__;");
tryItOut("if(0.1) {; } else  if (false) yield [1,,]; else {yield <x><y/></x>; }");
tryItOut("if(function(id) { return id }) {throw <x/>; } else  if (this) {} else @foo\n");
tryItOut("if((<xxx {__noSuchMethod__}={(uneval(false))++} />.(*.@foo))) let (__parent__) { export *; }");
tryItOut("switch(( '' .__defineGetter__(\"prop\", [1,2,3,4].slice))) { case (constructor.__parent__): export *; }");
tryItOut("{{L: {yield *::*; } } }");
tryItOut("if(3.141592653589793) break ; else {yield this; }");
tryItOut("if(<x/>) { if (prop) {break M;return; }} else if((uneval(*))) { if ([z1]) let x::__count__;} else yield;");
tryItOut("/*infloop*/M:for(let ({ __proto__: ({ __iterator__: [[({ constructor: __parent__ }), , [, __count__]]], prop: ({ __proto__: ({ __noSuchMethod__: ({ constructor: __iterator__, __proto__: __iterator__ }) }) }) }) }) = (yield * === ({a2:z2})); ([!window].filter((<x/>).__defineSetter__)); ((this.__defineGetter__(\"__count__\", window.@foo)) ? ([__parent__, , function::__parent__, ] = let (constructor) 5.0000000000000000000000) : 1e+81 * null)) M:with({prototype: <y><z/></y>}){gc()const __noSuchMethod__, prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__.__noSuchMethod__ in eval(\"1e+81\", <><x><y/></x></>).unwatch(\"constructor\")) yield <x/>;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*for..in*/for(var __parent__ = __iterator__ = 0[ \"\" ] in false)  '' ;");
tryItOut("/*infloop*/do /*infloop*/for(*::*; (function ([y]) { })(); window) break ; while({} .@*:: false);");
tryItOut("this.zzz.zzz;");
