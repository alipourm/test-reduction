tryItOut("/*for..in*/for(var setter = (\t({__noSuchMethod__: __parent__.__iterator__ setter= Math.sin})) in  /x/g ) {if(1e-81) {; } else  if (__parent__.prototype.unwatch(\"constructor\")) {} else (__parent__);export *; }");
tryItOut("if(__proto__|=(*::* -= <><x><y/></x></>)) {{}yield <x><y/></x>; } else  if (<x><y/></x>['__noSuchMethod__'] = constructor = <y><z/></y>) /*infloop*/for(<><x><y\t/></x></>; 1.2e3; window) export prop; else {return *::*;throw 3; }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = ([(__count__ = 5.0000000000000000000000)]) in false) {/*infloop*/for(var prototype; (window.hasOwnProperty(\"constructor\")); (uneval((<><x><y/></x></> *=  /x/g )))) export __noSuchMethod__; }");
tryItOut(" const constructor;;");
tryItOut("L:if(((1 for (x in [])))()) yield <x><y/></x>; else  if (({ prop: prop, __proto__: __parent__ }) = ((1e4)((function ([y]) { })())).throw(<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>)) yield <x><y/></x>; else yield;");
tryItOut("/*for..in*/for(var prototype in (((1 for (x in [])))((constructor = <><x><y/></x></>)))){yield; }");
tryItOut("if(((this.__defineGetter__(\"__proto__\", gc)).eval(Exception(prototype.__noSuchMethod__ setter= 'haha'.split, __proto__)))) { if ((new (<y><z/></y>)(<y><z/></y>))) export *; else {export *; }}");
tryItOut("/*infloop*/do export *; while(<><x><y/></x></> !== <y><z/></y>);");
tryItOut("return <y><z/></y>;");
tryItOut("{continue ; }");
tryItOut("return @foo &= [,,z1].hasOwnProperty(\"prototype\");");
tryItOut("gc()\n/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in *::*) {{}const __iterator__ = *::*, constructor = <x><y/></x>; }\n");
tryItOut("prototype");
tryItOut("if([11,12,13,14].map) {prop = 5.0000000000000000000000, constructor = <><x><y/></x></>; } else  if ((({ get __parent__(constructor, constructor) { return; } , __noSuchMethod__: 3 }))) {continue ;{} } else var prop = *::*, __count__ = prototype;");
tryItOut("(({a1:1}));");
tryItOut("export *;/*infloop*/L:for(new Array(undefined, ({})); (this)(<><x><y/></x></>, null); (__iterator__ = 0)) {(__proto__ = window, prop = this); }");
tryItOut("do /*infloop*/do {export *;gc() } while(false.__defineGetter__(\"__count__\", Math.pow)); while((<></>) && 0);\t");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(\f(__noSuchMethod__) in (1e+81 ^ window)) {; }");
tryItOut("with({}) __parent__.__parent__ = __iterator__;");
tryItOut("L:if((eval(\"<x><y/></x>\", *::*)).eval(<x/> for each (setter in <y><z/></y>))) with(@foo)return;");
tryItOut("M:do {{return; } } while(((<><x><y/></x></>.valueOf(\"number\"))) && 0);");
tryItOut("if([,,] |= __parent__ for (prop in <x><y/></x>) if (__parent__)) { if (#0=[[033]]) \f} else /*for..in*/L:for(let __parent__ = ({__parent__ getter: Function }) in this) {yield; }");
tryItOut("let ((*::* %= undefined)(3 % false) = (1e+81.__lookupSetter__(\"__proto__\")), constructor) { if(constructor(__noSuchMethod__ = , (function(y) { yield y; return;; yield y; })())) {;{} } else __noSuchMethod__; }");
tryItOut("{} const __iterator__;");
tryItOut("with({__noSuchMethod__: this});");
tryItOut("(1e-81);");
tryItOut("M:with({__parent__: (<x><y/></x>.__defineSetter__(\"__proto__\", false))}){__iterator__yield  \"\" ; }");
tryItOut("{/*for..in*/L:for(prop = [11,12,13,14].sort in null) {export *;[1,2,3,4].map } }");
tryItOut("if((gc()) ?  { yield [1] } ; : (p={}, (p.z = 033)())) {if(<y><z/></y>) {gc()var prototype = null; } else  if (1e-81) <x><y/></x> else <x><y/></x>function::prop =  \"\" ; } else return 1e-81;");
tryItOut("if((<x><y/></x> || [[1]]\n)) export prop; else  if ([<x><y/></x> -= <y><z/></y>.yoyo(* @ __count__)]) yield; else {/*for..in*/L:for(const [__iterator__, __count__] = <x><y/></x> in this) {; }export __iterator__; }");
tryItOut("if(constructor.__proto__ = (__iterator__)) {gc()const prototype = window, __parent__; } else ;");
tryItOut("{L:switch(null) { default: export __parent__; }\n/*infloop*/for(({ __parent__: prop, prototype: prop }) = (([,,] <= ({a2:z2})) -= \nconstructor); this.__defineGetter__(\"get\", <x/>); ('fafafa'.replace(/a/g, (-0)))) (__parent__); }");
tryItOut("let(__count__ = ({a2:z2})) ((function(){throw __proto__;})());");
tryItOut("if((prop = false %= (~(new new Function(__iterator__, <x/>)) * (__count__))) >>>=(this.eval(this))) { if (__noSuchMethod__.hasOwnProperty(\"__parent__\")) export prop; else {do {return; } while(([null]) && 0); }}");
tryItOut("/*for..in*/for(var function::__noSuchMethod__ in (new (({ __iterator__: undefined }) = ({ prop: __proto__, prototype: prop }))())) {\nyield __iterator__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const prop; 0x99 >>  \"\"  < ({ set __noSuchMethod__ prototype () { yield <><x><y/></x></> } , prototype getter: (*::*).__defineSetter__ }); this.__defineGetter__(\"prop\", Math.sin)) L:if(constructor = prop.@foo) {export constructor;var constructor, __count__; } else  if ((<x/>)( /x/ , true)) export * else throw __iterator__;");
tryItOut("if(({ __count__: ({ __count__: ({ __iterator__: ({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: __noSuchMethod__ }), __iterator__: __noSuchMethod__.__iterator__ }) }), prototype: ({ constructor: __proto__ }) }) = (__count__%=([,,])[ /x/ ])) { if (new (constructor += <><x><y/></x></>)(<x/> *=  /x/g , <x><y/></x>)) return __iterator__.@foo;} else {gc()let __noSuchMethod__ = 0.1; }");
tryItOut("L:switch(let (prop) (.2)(this, <x/>)[__noSuchMethod__ = ([11,12,13,14].map)].propertyIsEnumerable(\"__noSuchMethod__\")) { default:  }");
tryItOut("L:do {if(++<x/>) throw true; else  if ( /x/ .@*) yield @foo;export __count__; } while((*.__iterator__ = (new (#0=({__proto__: (prop =  /x/g )}))(((p={}, (p.z = (true(*::*,  /x/g )))())), <y><z/></y>.__defineGetter__(\"x::x::__noSuchMethod__\", *)))) && 0);");
tryItOut("/*for..in*/L:for(let prototype = false in function ([y]) { }) {let __proto__, prototype = false; }");
tryItOut("if(prototype = <><x><y/></x></>) {yield <x><y/></x>; } else  if (\n*::* if ( /x/ ).__defineSetter__(\"__count__\", function(y) { yield y; break L;; yield y; })) (<x><y/></x>); else L: {yield;yield __proto__; }");
tryItOut("L: 3.141592653589793;");
tryItOut("M:switch((this.__defineSetter__(\"__noSuchMethod__\", <x><y/></x>.( /x/ ).watch(\"function::prop\", Function)\t))) { default: break; case 5: L:if([]++) { if ((new (function  __noSuchMethod__ ()<x><y/></x>)(__count__, [,]))) {return *::*; }} else yield;break;  }");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("prototype = __proto__;__iterator__, __iterator__ = this;");
tryItOut("let ([, __count__, ] = yield #1#) { ) }");
tryItOut("export constructor;");
tryItOut("{if( /x/g ) {this;Function } else \n{}\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in this.zzz.zzz) {while(((__proto__)(*::*, <x><y/></x>\n)) && 0){} }");
tryItOut("{if(( /* Comment */<y><z/></y>).eval(<x><y/></x>[false])) { if ([<x/> for (prop in -0)]) {gc()yield  \"\" ; }} else throw 4.; }");
tryItOut("do {.2\n } while((typeof new Math.pow( \"\" )) && 0);");
tryItOut("\fif(this) { if (*::*) {gc() }} else {export *; }");
tryItOut("/*for..in*/for(constructor in ((window - @foo)((<y><z/></y>.hasOwnProperty(\"__proto__\"))))) { const prop, prop = set; } ");
tryItOut("try { yield false; } catch(__parent__) { yield  '' ; } finally {  } ");
tryItOut(";yield;");
tryItOut("\twith(prop)/*infloop*/for(null; <y><z/></y>; *) {return; }");
tryItOut("/*infloop*/for(get = (var __parent__ = <x/> >> (let (prototype = prototype, __count__) *)); (__noSuchMethod__.__proto__)((uneval(window))); (new  /x/ ())) *");
tryItOut("gc()\n");
tryItOut("/*infloop*/for(let constructor; []; undefined) {gc() }");
tryItOut("/*infloop*/for((-1.throw(*::*)) ? (-1).@foo : __proto__.([1]) === this.__defineGetter__(\"prototype\",  \"\" ); [] = __iterator__ = window .@ <><x><y/></x></>; ((({__noSuchMethod__: /a/gi })) /= [, ({ constructor: __noSuchMethod__, __iterator__: constructor })] = ([[]])[window])) /*for..in*/L:for(var (new (<y><z/></y>)(null))['__iterator__'] in (-3/0 ^ <x/>)) {__iterator__ = __count__; }");
tryItOut("/*infloop*/for(var ( /x/ )(<x><y/></x>) = 0; <>(constructor.prototype setter= [1,2,3,4].slice)</>; prototype.__count__|=(<x><y/></x>.(undefined))) \tthrow <><x><y/></x></>; const constructor;");
tryItOut("while(((<{__proto__}> </{__proto__}>.(#1#))) && 0)");
tryItOut("return ({a1:1})");
tryItOut("return;export prototype;");
tryItOut("{{export __proto__; } }");
tryItOut("gc()L:switch( '' ) { case 4: /*for..in*/\ffor(var   in <y><z/></y>) return;break;  }\nthrow StopIteration;\n");
tryItOut("L: {if(-0)  else {const prototype;true; } }");
tryItOut("{return;yield; }");
tryItOut("L: {export *;throw  /x/g ; }");
tryItOut(" \"\" \nthrow  \"\" ;");
tryItOut("L: {window; }");
tryItOut("if((__count__ = (yield <x><y/></x>)[<x/> , <y><z/></y> && window.constructor = []])) { if (function::__noSuchMethod__ = __noSuchMethod__ = @foo) return (return).prototype = *.propertyIsEnumerable(\"__parent__\");} else {break M;new Function }");
tryItOut("/*infloop*/L:for((({constructor: <><x><y/></x></>,  set __proto__ __count__ () { yield __count__ }  })).__defineGetter__(\"__count__\", function  constructor (__parent__)0); eval(\"with((__parent__.constructor =  \\\"\\\" .constructor = new __proto__())){__noSuchMethod__ = <x><y/></x>, __count__ = #1=[#1#]; }\", ([1,2,3,4].map).call(constructor = (\n1e4), false)); set) L: (([,,z1].valueOf(\"number\")));");
tryItOut("export prototype\n");
tryItOut("/*for..in*/L:for(var [function::constructor, prop] = ({prop getter: (p={}, (p.z = prototype)()), constructor:  \"\"  }) in [ if (<x/>)]) /*infloop*/for(__proto__; prop[<y><z/></y>]; <><x><y/></x></>) {throw T; }");
tryItOut("/*for..in*/for(var constructor in ((function  constructor () { yield prototype%=(prototype\f.constructor getter= function  __iterator__ (__proto__) { yield constructor } ) } )(\n__noSuchMethod__ :: (({}).hasOwnProperty))))let (/*\n*/__parent__) { ; }");
tryItOut("__proto__ = __proto__;");
tryItOut("{}\n");
tryItOut("for(let y in []);");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) yield ( /* Comment */__iterator__);");
tryItOut("while(((new *(window))) && 0){do {;yield; } while((__noSuchMethod__) && 0);break L; }\n");
tryItOut("return *::*.eval(1.2e3);");
tryItOut("{gc() }");
tryItOut("if(((@foo)(window)-=<><x><y/></x></>.yoyo([,,z1]))) {return ({a1:1});let __noSuchMethod__, __parent__ = @foo; } else  if ((void prop)) {throw this; }");
tryItOut("/*infloop*/do  while((__iterator__.__parent__ = export *));");
tryItOut("if((each.(constructor) setter= function  __proto__ () { false } )) export *;\f else  if (__iterator__ = constructor > *::*) {{}if(this) { if ([,,]) {yield;{} }} else  } else {; }");
tryItOut("switch([Math.pow].map(function (__iterator__) { const __noSuchMethod__; } )) { case let (prototype =  \"\" , __iterator__) (#1# > prop): break; case 9: return @foo;break; case 6: break; break; case 2:  }");
tryItOut("with({<y><z/></y>['__parent__']: __iterator__ < true}){export __proto__; }");
tryItOut("yield (<x><y/></x>.yoyo(<><x><y/></x></>)) >>= window;");
tryItOut("0/0export __noSuchMethod__;");
tryItOut("yield; const __iterator__;");
tryItOut("M\f:do  while((null) && 0)\n");
tryItOut("if(<x><y/></x>) __proto__ = *;");
tryItOut("let (__proto__ = <!--yy-->, constructor =  /x/g ) { /*for..in*/for(__iterator__ in <x><y/></x>) {__parent__ = __proto__; } }");
tryItOut("{export *;continue L; }\n/*for..in*/for([__iterator__, constructor] = this.zzz.zzz in (undefined.__defineGetter__\f(\"prop\", [1,2,3,4].map))) /*infloop*/M:for(<x/>%=function(id) { return id }; <x><y/></x>[<><x><y/></x></>]; [<y><z/></y> for each (__parent__ in <y><z/></y>)]) const __proto__, prop\t;");
tryItOut(" { yield __parent__ } ;");
tryItOut("/*infloop*/M:do yield <x><y/></x>\n; while(__noSuchMethod__);");
tryItOut("L:with({prototype: __iterator__ = (function::x::__noSuchMethod__ & window)})var prop, prop;");
tryItOut("/*infloop*/L:for(\flet ({ prop: constructor, constructor: ({ __iterator__: __parent__, __iterator__: __noSuchMethod__ }) }) = <><x><y/></x></> === __iterator__; (*.hasOwnProperty(\"yield\")); ( /x/  -  /x/ )) /*infloop*/L:for(__parent__ =  /x/ ; __count__; [1]) {yield *;<y><z/></y> }");
tryItOut("let (constructor) { yield; }");
tryItOut("if(constructor = this.__defineSetter__(\"__parent__\", eval)) { if (constructor = (({__proto__: -1}))) ;} else if(<x><y/></x>) { if (@foo) throw @foo; else {return;; }}\n");
tryItOut("if(__iterator__.unwatch(\"__parent__\")) export *; else  if (( '' (__proto__))) {function  __noSuchMethod__ (__noSuchMethod__, constructor) { yield <><x><y/></x></> } ; } else [z1,,];");
tryItOut("/*for..in*/for(let __parent__ in (((new Function(\"/*for..in*/for(var __noSuchMethod__ = (window.__lookupGetter__(\\\"prop\\\")) in <y><z/></y> = <x><y/></x>) \")))((new ) set constructor() { yield; }  //h\n.hasOwnProperty(\"prop\")((this.zzz.zzz\n), new (()++)(var constructor = *::*, __proto__;, <x/>[ /x/g ])))))){var prototype, prop = <y><z/></y>while((<y><z/></y>++) && 0)throw null; }");
tryItOut("/*infloop*/while(<><x><y/></x></>){ }");
tryItOut("throw let;");
tryItOut("/*for..in*/for(prop in this) {}");
tryItOut("switch(<>prop = <x><y/></x></>) { case typeof new __count__(window): do {var prop = <x/>, prototype = <x><y/></x>;return <x><y/></x>; } while((<><x><y/></x></>) && 0); const prototype;break; case 0.1: [11,12,13,14].some;break; default: break; case 5: return; }");
tryItOut("with({prototype: null.valueOf(\"number\").__lookupGetter__(\"prop\")}){;{__parent__{} } }");
tryItOut("throw <><x><y/></x></>\n;");
tryItOut("if((\r(__count__.throw(*::*))())) {return <x><y/></x>; } else {const \f__proto__, __count__;yield [z1]; }");
tryItOut("if(({ __proto__: [] }) = false) /*infloop*/for( \"\" ; this; window) yield; else  if (constructor.({ prop: __parent__, __iterator__: prop })) {/*for..in*/for((__proto__) in this) const __proto__;export *; }");
tryItOut("continue L\n");
tryItOut("if(()) { if (undefined) M:with(1e+81){let prototype, __noSuchMethod__ = this; } else (1 for (x in []))}");
tryItOut("/*infloop*/while((<><bbb xmlns=\"eval(\"{}\", 1e-81)\">yyy</bbb></>.__defineSetter__(\"__count__\", (( /x/g )[[z1]]).apply)))M:if(new (<x><y/></x>)( '' ).__parent__) { if ((yield 3)) {continue ;return; } else { }}");
tryItOut("with((delete <><x><y/></x></>));");
tryItOut("switch((__proto__.([]))) { default: switch(prop) { case window: /*infloop*/for(__parent__ = <x/>; undefined; null) let prototype, constructor = <y><z/></y>;break; break; let prototype =  /x/g ; }case (this.zzz.zzz): let __noSuchMethod__;break;  }");
tryItOut("{{}\tM:switch( /x/g ) { case [[]]: break; default: case <><x><y/></x></>: break;  } }");
tryItOut(";");
tryItOut("if(<y><z/></y>) {}");
tryItOut("try { try { \rexport __noSuchMethod__; } catch(prototype if  /x/g ) { const __parent__; } catch(__parent__) { export *; } finally { let prototype, __noSuchMethod__ =  \"\" ; }  } catch(prototype if (function(){__iterator__ = __count__;})()) { try { {} } catch(constructor) { let(__parent__ = __count__, function::__parent__) { __iterator__, constructor; }  } catch(constructor) { try { [,,]; } finally/*\n*/ { <y><z/></y>; }  } finally { for(let y in []); } ");
tryItOut("if(<><x><y/></x></>.throw(null)) {let prop; } else  if (<x><y/></x>.(<x><y/></x>)) yield -0;");
tryItOut("if([15,16,17,18].map(gc, null.__lookupSetter__(\"__iterator__\"))) { if (eval(\"yield;\", __iterator__).eval(eval(\"<zzz><x><y/></x></zzz>\", constructor))) export __iterator__;\nthrow *::*;\n else {yield;/*for..in*/L:for(var __noSuchMethod__ in @foo.@*) {yield <x><y/></x>; } }}");
tryItOut("with({}) { return; } ");
tryItOut("if(new (__count__)(-0.hasOwnProperty(\"prototype\")) ? __count__ = window : yield function ([y]) { }) \t{ if ([15,16,17,18].map((([1,2,3,4].map).call).apply, ({constructor setter: <><x><y/></x></> }))) {return; }} else {{} }");
tryItOut("\fthrow undefined;\nnew Function\n");
tryItOut("do export *; while((this) && 0);");
tryItOut("/*for..in*/M:for([__noSuchMethod__, __proto__] = <x><y/></x> in undefined) {;return; }\t");
tryItOut("__iterator__ = __parent__;");
tryItOut("yield <y><z/></y>.__defineGetter__(\"\", /a/gi);");
tryItOut("()");
tryItOut(" '' ");
tryItOut("eval");
tryItOut("throw __iterator__;");
tryItOut("L: let constructor = *::*;");
tryItOut("/*infloop*/for([__iterator__.constructor] = constructor.__parent__; new __proto__; -0.__defineSetter__(\"__iterator__\", (Function(window, <><x><y/></x></>)).__defineSetter__) .@x:: (@foo.__noSuchMethod__ = @foo).isPrototypeOf(0/0.prop getter= function  prototype () { yield undefined } )) { }");
tryItOut("if(((prop = <><x><y/></x></>).__defineSetter__).call((p={}, (p.z = .2)()), )) {(<><x><y/></x></>); } else  if ( '' ) /*infloop*/for(<y><z/></y>; ({a2:z2}); window) yield <x><y/></x>;");
tryItOut("function  __noSuchMethod__ (__noSuchMethod__) { return <x><y/></x> } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((true)(__iterator__) in (__noSuchMethod__ .@x:: (-0).@foo)++) {M:if(( /* Comment */<x/>)) gc()( \"\" .eval([[1]])); }");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: [({ __parent__: set })] }) = __noSuchMethod__.__parent__; undefined .. @foo++.*; ([(({prop: <><x><y/></x></>.constructor, __count__: <><x><y/></x></> &= true }))])) (1 for (x in []))");
tryItOut("yield;return <y><z/></y>;");
tryItOut("{return;* }");
tryItOut("M:if((@foo.__lookupGetter__(\"constructor\") ? this.__defineGetter__(\"__iterator__\", function (__parent__) { return *::* } ) : {})) ( /x/ ); else {}");
tryItOut("if(window) {} else  if ((3\n)) var prototype = ({a1:1}), prototype;");
tryItOut("/*infloop*/L:for(new (function ([y]) { })()(); (constructor = prototype.prototype = __parent__ = __noSuchMethod__ != ); * ? ({__iterator__ getter: (({})).watch }) : prop.__proto__ getter= gc) if(__parent__.__iterator__ setter= (1.3\n).watch) { if (__noSuchMethod__ = constructor) {throw <x><y/></x>;throw <><x><y/></x></>; }} else if(<y><z/></y>.yoyo( '' )) var constructor, constructor;");
tryItOut("({ prototype: setter, __proto__: [] })");
tryItOut("L: __iterator__");
tryItOut("/*for..in*/for(__proto__ = __parent__ =  in new <x/>((-1), 5.0000000000000000000000)) {yield yyy; const __iterator__; }");
tryItOut("throw StopIteration;");
tryItOut("if((__parent__.(undefined))) { if ((<x><y/></x>.unwatch(\"__count__\").hasOwnProperty(\"constructor\"))) {([1,2,3,4].map).callbreak L; } else false;}");
tryItOut("with({__proto__: (({constructor: *::*, prototype:  ''  }))}){return;export *; }");
tryItOut("if([15,16,17,18].sort(this, null) .@*:: @foo) { if (false[arguments].__defineGetter__(\"__count__\", [1,2,3,4].slice)) var __count__ =  \"\" ;} else {  yield; }");
tryItOut("do {return __proto__;const constructor = <x><y/></x>, __parent__ = 5.0000000000000000000000; } while(([,]) && 0);");
tryItOut("continue M;");
tryItOut("if( \"\" ) yield <x><y/></x>; else  if (<!--yy-->) gc() else {<x><y/></x>;{} }");
tryItOut("yield;\n({}).hasOwnProperty\n const __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("Function");
tryItOut("/*for..in*/for(let <employee id=\"1\"><name>Joe</name><age>20</age></employee> in --*::*) /*infloop*/L:do __count__: (++window) while(undefined for (__count__ in (function ([y]) { })()));");
tryItOut("(<>let __proto__, __count__ =  /x/ ;</>.unwatch(\"prototype\"))\n");
tryItOut("L: /*for..in*/for((__proto__) in window) {*; }");
tryItOut("const __iterator__\ngc()");
tryItOut("{(__iterator__);/*infloop*/for(const __iterator__; @foo; window) ; }");
tryItOut("return;");
tryItOut("export \n__iterator__ setter: (1 for (x in [])) = [1,,];");
tryItOut("/*for..in*/for(let (window)(<y><z/></y>) in <><x><y/></x></>) return;");
tryItOut("L: continue ");
tryItOut("L:if(__iterator__ = arguments) {null const __proto__;return ++<y><z/></y>; }");
tryItOut("if((this.zzz.zzz)) {} else {<x><y/></x>export __iterator__; }");
tryItOut("yield;/*for..in*/for(((yield __count__))().prototype in [[]] >>  '' ) yield [,,];");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__ = constructor;");
tryItOut("while((('fafafa'.replace(/a/g, gc))) && 0)yield #3={a:#3#}.prop = #1#;");
tryItOut("with({__proto__: 0/0}){}");
tryItOut("throw __iterator__;");
tryItOut("let (__iterator__ = __count__ = Function(window), function::__iterator__) { if(constructor) {gc()export __noSuchMethod__; } }");
tryItOut("L: return [];");
tryItOut("{yield <><x><y/></x></>;gc() }");
tryItOut("throw __count__;");
tryItOut("L:with({prototype: function  __proto__ (({ __noSuchMethod__: ({ __noSuchMethod__: ({ __parent__: __count__, prototype: <x/>.__count__ }), __parent__: ({ constructor: ({ __parent__: ({ prototype: constructor, __count__: __iterator__ }), __iterator__: ({ let: __proto__, prototype: __proto__ }) }), __noSuchMethod__: constructor }) }), __iterator__: ({ __noSuchMethod__: ({ constructor: ({ __parent__: [__parent__], __proto__: ({ __parent__: prototype }) }), constructor: ({ __noSuchMethod__: ({ __noSuchMethod__: prop __parent__ }) }) }) }) }), constructor) { yield * ? [z1,,] : <x/> } }){yield\nif(true) return; else export *;break M; }");
tryItOut("return;");
tryItOut("{const __parent__; }");
tryItOut("switch(prop) { default: break; return;break; *;break; break;  }");
tryItOut("do {} while((<><x><y/></x></>.__lookupSetter__(\"__count__\")) && 0);");
tryItOut("throw __iterator__; const __parent__;");
tryItOut("return prop = [,];");
tryItOut("/*infloop*/for(let __parent__ =  '' ; window; __iterator__) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in * ? *::* : undefined) return <><x><y/></x></>;");
tryItOut("let (set, __iterator__) { function  prop () { return <><x><y/></x></> }  }");
tryItOut("M:while(((-3/0 >= null)) && 0){(<x><y/></x>);; }");
tryItOut("/*infloop*/for(yield (true.__lookupSetter__(\"constructor\")); __iterator__ = (this.propertyIsEnumerable(\"__noSuchMethod__\"));  /x/g .__parent__.@foo) {(window);try { const __noSuchMethod__, __parent__ = <><x><y/></x></>; } finally { const __parent__ = <x><y/></x>; }  }");
tryItOut("/*infloop*/for(\n[1,,]; (5.0000000000000000000000\n); ( ''  < <><x><y/></x></>)) {export *;\nprototype = -3/0;\n }");
tryItOut("if(undefined) {yield;var __proto__ = [,,z1]; } else export prototype;");
tryItOut("M:if(-(({__noSuchMethod__: __proto__}))) { if (window.__lookupSetter__(\"__parent__\").__count__ = (new [1,2,3,4].slice([1]))) throw  /x/ ;} else ");
tryItOut("(#2=({__count__: <><x><y/></x></>}) *= (typeof ([[15,16,17,18].map(Function, __iterator__ = <><x><y/></x></>)case __count__ = __parent__(<x><y/></x>): var __count__ = ({});default: var prototype;]).hasOwnProperty(\"__noSuchMethod__\")))");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in ) {throw 3; }");
tryItOut("while((__parent__.__parent__) && 0)if(<x><y/></x> , <x/>) {([[1]]);export __proto__; } else throw  /x/ ;");
tryItOut("with({constructor: (Function).call(*::*, <x><y/></x>, <x><y/></x>)}){<x><y/></x> }");
tryItOut("let (__iterator__) { /*for..in*/for([prototype, __proto__] = (function (x::constructor) { return 033 } ).call((window >>> 3), ) in (prop.__parent__ getter= __proto__)) {break L; } }");
tryItOut("/*for..in*/L:for(var constructor = __iterator__ in <x/>) {var constructor, __count__;gc() }");
tryItOut("if(\n(yield prop)) {/*infloop*/M:for( \"\" .prototype; __parent__ %= __parent__; ((<><x><y/></x></> :: <x><y/></x>).propertyIsEnumerable(\"__count__\"))) {{gc()yield; } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var <x/>.prototype in prop%=1e+81) {Math.sinreturn <y><z/></y>; }");
