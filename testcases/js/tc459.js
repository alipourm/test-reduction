tryItOut("L: continue L");
tryItOut("if((*)[constructor]) constructor; else  if ((prototype = typeof [1,,])) {continue ;([,,z1]); }");
tryItOut("/*infloop*/M:while(yield ({__iterator__: @foo, __parent__ getter: (<><x><y/></x></>).watch }).__noSuchMethod__ = *)return;");
tryItOut("gc()if([z1]) const __parent__, constructor =  '' ;");
tryItOut("yield;");
tryItOut("this.zzz.zzz;");
tryItOut("prop = __noSuchMethod__;");
tryItOut("/*for..in*/for(const prop, ({ __parent__: ({ __proto__: ({ function::__iterator__: __noSuchMethod__ }), __noSuchMethod__: [, ] }) })\t in prototype.(<y><z/></y>)) const __iterator__ = <x><y/></x>;");
tryItOut("this.zzz.zzz;");
tryItOut("if(<><x><y/></x></>) throw window;");
tryItOut("L: gc()");
tryItOut("/*for..in*/L:for(var [constructor, prototype] = undefined === (0)[1e+81] in function  __noSuchMethod__ (__iterator__) { return 0x99 } (*, this)) __noSuchMethod__;export *;");
tryItOut("if(\n*) { if (__iterator__ =  '' ) {yield; } else (({a2:z2}));}");
tryItOut("L: {undefined; }");
tryItOut("let (__proto__) { if((eval)([11,12,13,14].filter, <y><z/></y>)) { if ([15,16,17,18].sort(/a/gi, (<y><z/></y>--))) {__count__ = window, prototype; }} else {gc() } }");
tryItOut("( /x/g )");
tryItOut("with({}) __iterator__ = prop;");
tryItOut("throw StopIteration;");
tryItOut("M:while((prop.__parent__ = false.__defineGetter__(\"__iterator__\", ( '' ).watch)) && 0)if(__proto__) {const __iterator__, __iterator__ = *::*; } else {gc()const prototype, prototype = this; }");
tryItOut("/*for..in*/for(__iterator__ in constructor) {continue ; }");
tryItOut("L:if(eval(\"([ /x/  for (__count__ in this)])\", [[, __noSuchMethod__]])) { if (constructor.(prototype <= <x><y/></x>)) {return;yield; }} else break ;");
tryItOut("yield;  const prop; const prototype;");
tryItOut("{while((<>yyy</>) && 0)/*infloop*/do \r{yield <><x><y/></x></>; } while(undefined); }");
tryItOut("/*infloop*/for(__proto__ = (this.throw( '' )); (#1#.eval([<><\rx><y/></x></>].map((function (__parent__) { yield @foo } ).apply))); (eval(\"1e-81\", ((uneval(<x><y/></x>)))))) {return; }");
tryItOut("/*for..in*/for(__iterator__ in <><x><y/></x></>) var __parent__ = #1#, __noSuchMethod__ = 0x99\n");
tryItOut("/*for..in*/for(var [__count__, __parent__] = (#1=[ /x/ ]) @ __proto__.prototype in (({constructor: 1e-81 }))) export *;");
tryItOut("__count__ =  \"\" ");
tryItOut("if((prop = yield 1e4 &= *)) {L: {var __noSuchMethod__ = *::*, constructor = @foo;; } } else break M;");
tryItOut("/*for..in*/L:for(let __iterator__ = ([([<x/> for each (prop in <><x><y/></x></>)]) = (__iterator__.watch(\"constructor\", Function).yoyo((uneval(prop))))]) in undefined.unwatch(\"prototype\")) {with({__noSuchMethod__: ({__parent__ getter: prototype, prop setter: [1,2,3,4].map })}){export *; } }");
tryItOut("/*infloop*/for(const __iterator__; \nprop.__lookupSetter__(\"prototype\").*; __iterator__.__parent__ setter= new Function) break L;");
tryItOut("throw <x><y/></x>;");
tryItOut("/*for..in*/for(prop in ((Math.sin)((Number((Object(<y><z/></y>, <x><y/></x>)).yoyo(this)))))){{throw gc();(function ([y]) { })() }\n }");
tryItOut("let prop, __count__\n");
tryItOut("throw constructor;");
tryItOut("M:switch(constructor) { case  /x/g : break;  }");
tryItOut("M:if(new (this -= <><x><y/></x></>)()) { if ((new (__proto__.(prototype).prototype)(yield __proto__))) {with({__proto__: (new (<x><y/></x>)())}){continue L; } }} else {if(<x><y/></x>) { ''  }<><x><y/></x></>[@foo]; }");
tryItOut("/*infloop*/M:for(var ({ __parent__: __parent__, __proto__: ({ __proto__: ({ __parent__: set, prop: ({ __noSuchMethod__: __parent__, __noSuchMethod__: [, , ({ prototype: __iterator__ }), ] }) }), prototype: ({ __iterator__: ({ __iterator__: [], __noSuchMethod__: ({ prop: [__parent__, , , __count__, __iterator__] }) }) }) }) }) = prop = 'fafafa'.replace(/a/g, false); (<><x><y/></x></>.unwatch(\"__count__\") instanceof  /* Comment */ /x/ ); ({__iterator__: undefined }) &=  /x/g  >>>=(p={}, (p.z = /*\n*/<x/>.unwatch(\"constructor\"))())) {if(({ __count__: __iterator__ })[constructor, ]) {let __count__ = <x><y/></x>;throw 3.141592653589793; } else {gc()export *; }var __proto__ = <x/>, __count__; }");
tryItOut("/*for..in*/for(__iterator__ = (Math.pow)(<><x><y/></x></>, function ([y]) { }) in  /x/g ) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <x><y/></x>) {let prop = *;continue M; }");
tryItOut("L:do {yield;yield <x><y/></x>; } while((<y><z/></y>) && 0);");
tryItOut("with(window);");
tryItOut("/*for..in*/for(let __proto__ = (({}) == prototype) in window) throw __parent__;");
tryItOut("let prop = prototype\nreturn __proto__;");
tryItOut("L: export *;");
tryItOut("M:if((-3/0 ? *::* : [,])) {with({__noSuchMethod__: constructor.(3.141592653589793) * constructor = prototype}){throw __iterator__;\f<x><y/></x> }yield; } else  if ((new ({a1:1})())) {yield; }");
tryItOut("let (__iterator__) { return;var __count__ = 3/0; }");
tryItOut("yield <y><z/></y>;");
tryItOut("export __parent__;");
tryItOut("M:do  while((window[<x/>]) && 0);");
tryItOut("{with({__noSuchMethod__:  /* Comment */__proto__ = <x><y/></x>}){#3={a:#3#}; const __parent__; }/*infloop*/for(let __count__; ++; ++new RangeError()) yield window; }");
tryItOut("do {/*infloop*/do {/*for..in*/ } while(<><zzz><y><z/></y></zzz></>); } while((new undefined instanceof  /x/g (<><x><y/></x></>() ? (3/0)() : 1e4.unwatch(\"__noSuchMethod__\"), [0].map(Math.pow))) && 0);");
tryItOut("/*infloop*/while( \"\" )Math.pow");
tryItOut("(new [1,2,3,4].slice(<><x><y/></x></>.isPrototypeOf(*::*), (<y><z/></y>)[window]))");
tryItOut("/*infloop*/M:for(let [] = (p={}, (p.z = __noSuchMethod__)()); <x/> ? ([ '' ]) : __iterator__ !== <><x><y/></x></>; [<x/>].map(Math.sin)) {let prototype, prop = -0; }");
tryItOut("/*infloop*/L:while([11,12,13,14].map.@foo);");
tryItOut("do export prototype; while(((0.1 +  '' )) && 0);");
tryItOut("M:with(this)gc()");
tryItOut("const __noSuchMethod__ = <><x><y/></x></>");
tryItOut("let (prototype = new *.throw(__iterator__)()) { const prop = <y><z/></y>;break ;\nbreak ;\n }");
tryItOut("L:if() <x><y/></x>");
tryItOut("if((<!--yy--> %= ())) { if (( '' )[undefined.__iterator__ = @foo])  '' ;} else {; }");
tryItOut("if(\f<><x><y/></x></>) {return <x><y/></x>;const set = @foo, __count__ = 0/0; } else  if (3/0) {constructor; } else {return <><x><y/></x></>;{} }");
tryItOut("{gc(){} }");
tryItOut("M:with(([,,].eval(*) - #3={a:#3#}--))if( \"\" ) {gc() } else  if (eval(\";\",  /x/g )) function::__iterator__ = function ([y]) { }\nlet prop = <>-0</>, prop = 1.3;");
tryItOut("let (prototype, constructor) { gc() }");
tryItOut("/*for..in*/for(let __iterator__ = *::* in <x/>) ;");
tryItOut("export __parent__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__((prop|=*::*)) in ('fafafa'.replace(/a/g, 'haha'.split)) <<= (<x/> || ({a2:z2}))) {export prop; }");
tryItOut("gc()");
tryItOut("if(__proto__ = <x><y/></x>.__lookupSetter__(\"__iterator__\")) {do gc() while((0) && 0);export *; }");
tryItOut("while(((<><x><y/></x></> <= this)) && 0){continue L; }");
tryItOut("/*infloop*/for(__count__; undefined; ({ delete: prototype, : constructor })\t = <>__count__</>.(true)) {yield; }");
tryItOut("throw constructor;");
tryItOut("{{}while((yield this) && 0)export *; }");
tryItOut("M:if(( /* Comment */<><x><y/></x></>)(eval(\"@foo\\n\", 1e4))) { if (Math.sin) {gc() } else {const constructor =  /x/g ;const constructor = 3/0, undefined = *; }}");
tryItOut("/*infloop*/do /*for..in*/M:for(var prop in 3/0) gc() while(({__noSuchMethod__ setter: (<x><y/></x> * __parent__).__defineSetter__ }));");
tryItOut("for(let y in []);");
tryItOut("let (prop = true instanceof <x/>) { let ( get __proto__ prototype (prop) { continue ; } , __iterator__ =  /x/g ) { continue ; } }");
tryItOut("while((*) && 0){ }");
tryItOut("while((4.) && 0){const __noSuchMethod__, __proto__ = (-0); const prop;; }");
tryItOut("/*infloop*/for(let ({ __count__: [[, , ({ prototype: ({ __parent__: function::__proto__ }) })], __count__], __parent__: ({ __noSuchMethod__: [[, ({ __iterator__: __noSuchMethod__ })], __parent__, , __proto__, prototype] }) }) = <y><z/></y>; {} === ; function (prototype) { yield ({__iterator__ getter: ({}).hasOwnProperty, __iterator__: #1=<y><z/></y> }) } ) {window }");
tryItOut("{if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { if (++ /x/ .hasOwnProperty(\"__noSuchMethod__\")) {let __noSuchMethod__, __parent__;export *; } else {if( /x/g ) throw 033; else  if (*) {(*::*); } else {const prop = <y><z/></y>; } }} const __proto__; }");
tryItOut("if(('fafafa'.replace(/a/g, [1,2,3,4].slice\t))) {const __proto__, __iterator__;return; } else const setter, prop;");
tryItOut("let (__proto__) { __noSuchMethod__ = *::* }");
tryItOut("return __noSuchMethod__; const prototype;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((eval)((<><x><y/></x></>))))const __noSuchMethod__, constructor = window;");
tryItOut("{const __iterator__;const __iterator__, prototype = 1.2e3; }");
tryItOut("L:if() {gc() }");
tryItOut("/*for..in*/for(prototype in ((function  __proto__ () { yield 0.1 } )(Math.pow)))const prop;");
tryItOut("/*for..in*/M:for(let __count__ = (this.__defineSetter__(\"__proto__\", true).unwatch(\"__parent__\")) in (__proto__ = #2=[__iterator__])) {return <><x><y/></x></>.yoyo(undefined);let(get = false, __iterator__ = (function ([y]) { })()) ((function(){Function})()); }");
tryItOut("let (__noSuchMethod__, __iterator__) { if(<x><y/></x>) { if ({}) {} else return @foo;} } const __noSuchMethod__;");
tryItOut("with({}) { let(__iterator__) { for(let y in [5,6,7,8]) constructor = constructor; } ");
tryItOut("L:if(<><zzz>[__noSuchMethod__ if (constructor)] @ 1.2e3.yoyo(<x/>)</zzz></>) { if ((++ '' ++.propertyIsEnumerable(\"__count__\") for (__count__ in Number(this, __parent__)) for each (__proto__ in (__count__.( \"\" ))) for each (constructor in [[1]]))) continue M;} else L:do ; while((null) && 0);");
tryItOut("{gc()let prop, constructor; }");
tryItOut("/*infloop*/for(((function (__noSuchMethod__)\r { yield @foo } ).call)( \"\" ); ([#1=[null]].map(function  prop (prop) { const __parent__ = prop; } ).isPrototypeOf(.2)); true) {{}while((4.) && 0)yield; }");
tryItOut("/*infloop*/L:for(Date(__parent__.constructor); __proto__; (0.eval(function(y) { yield y; yield; const prop;; yield y; }-=({}).__lookupGetter__).__noSuchMethod__)) return window;");
tryItOut("/*infloop*/while(prop)L:if([constructor]) export *;");
tryItOut("/*infloop*/for(var ({ constructor: __count__ = this.prototype }) = (((__proto__.(3)).__lookupGetter__(\"__count__\")))[(constructor.throw(<><x><y/></x></>))]; (prop = 1.3) >>>=new Object( /x/g .__lookupSetter__(\"__count__\").watch(\"constructor\", (getter).apply)); __iterator__ = undefined) {continue ;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor(prototype) in this) false");
tryItOut("{if((function(id) { return id } ^=  /x/  instanceof [11,12,13,14].map)) {;yield *::*; } else  if (__parent__.(__proto__)) yield; else {const constructor = <>__count__</>, __count__;var prototype = <x><y/></x>; } }");
tryItOut("let (__proto__ = <y><z/></y>) { export prop; }");
tryItOut("with({}) (<x><y/></x>);\tL: M:if((new (true)([]))) __noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("( /x/g );");
tryItOut("/*infloop*/M:do __iterator__; while(#2=({prop: ({yield: (\ffunction (__parent__, __iterator__)<><x><y/></x></>)})}));");
tryItOut("((({ __proto__: __noSuchMethod__, __count__: __iterator__ }) = window(<><x><y/></x></>\f)));");
tryItOut("L: {let __count__ = {arguments;__count__ = window; }\n }");
tryItOut("if(true .@x:: undefined) { if (@foo.__lookupGetter__(\"__count__\")) return;} else export __parent__;");
tryItOut("/*for..in*/L:for(let __parent__ in (-1)) const prototype = <x/>, prop;");
tryItOut("/*infloop*/do {L: {gc() } } while(((__proto__.__proto__ getter= eval).hasOwnProperty(\"__parent__\")) >>> (new gc(window.__defineGetter__(\"constructor\", eval), __noSuchMethod__)));");
tryItOut("M:switch((false .@ (Function).call([11,12,13,14].filter, (this.__defineSetter__(\"__iterator__\", __count__))))) { case 2:  }");
tryItOut("/*infloop*/while(new Iterator())let prop, prototype;");
tryItOut("__count__ = constructor;");
tryItOut("with(\n[])export x::prop;");
tryItOut("/*infloop*/for(__iterator__; new (__proto__)(<y><z/></y>, *)[__proto__ = 1.3]; ((prototype).watch).call) export prop;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = throw StopIteration;; eval(\"<x><y/></x>\",  /x/ ); ((((this.zzz.zzz))(<><x><y/></x></> || 1.2e3, this.__defineGetter__(\"prototype\", ({}).__lookupGetter__)) === *.eval(({a1:1})) &= return) / <x/>.*)) /*for..in*/for(const constructor = [<x/>].map((null).__defineSetter__) in this) if(<x><y/></x>) {gc()let __iterator__; } else  if (<x/>)  else {(<y><z/></y>);\t }");
tryItOut("/*infloop*/L:while( /x/g ){#1#;export __iterator__; }");
tryItOut("L:switch(new (( \"\" ).__defineSetter__)(__parent__ = <><x><y/></x></>)) { case 'fafafa'.replace(/a/g, function(q) { return q; }): __count__break;  }");
tryItOut("/*infloop*/for(var __iterator__; <x/>.@*; <zzz><x><y/></x>.(window)</zzz>.(null.__lookupSetter__(\"prop\"))) let(constructor) { let(__count__) { prototype = this, __count__ = __count__;");
tryItOut("{return <><x><y/></x></>;{} }");
tryItOut("L: {yield;3/0 } const __iterator__;");
tryItOut("let(__noSuchMethod__, __parent__ = 3.141592653589793.__defineGetter__(\"__count__\", Math.pow)) { for(let y in [5,6,7,8]) let(__parent__) ((function(){with({}) { with({}) { return; }  } })());");
tryItOut("/*for..in*/for(const [yield, constructor] = let __iterator__, prop; ^= #3={a:#3#} in (__parent__) ^ <x><y/></x>.__iterator__.__lookupGetter__(\"prop\")) {/*infloop*/do {let __noSuchMethod__ = <x/>, __iterator__ = <x/>; } while((* &=  /x/ ));(window); }");
tryItOut("var __parent__, __iterator__;\nconst constructor = <y><z/></y>;\n");
tryItOut("with({__noSuchMethod__: (prototype.prop getter= new Function)})L: ;");
tryItOut("{export set; }");
tryItOut("with({}) let(constructor) ((function(){let(__noSuchMethod__ = window, __parent__ = true) ((function(){return 033;})());})());");
tryItOut("continue M\n");
tryItOut("/*infloop*/M:for(prop; prototype; false) yield;");
tryItOut("/*infloop*/for(yield (-1); this.__defineGetter__(\"__count__\", function(y) { yield y; @foo;; yield y; }).__defineGetter__(\"__proto__\", (1 for (x in []))); #1=<x><y/></x>(function (__iterator__) { return ({}) } )) return this;");
tryItOut("/*infloop*/while(throw <y><z/></y>){}");
tryItOut("/*for..in*/M:for(let __count__ = (<><x>//h\n<y/></x></> for (prop in <><x><y/></x></>) for (__noSuchMethod__ in 1e81))-- in eval(\"(uneval(<x/>))\", [].prototype)) ");
tryItOut("{continue M;\n;\n }");
tryItOut("return <><x><y/></x></>");
tryItOut("/*infloop*/for(const ({ __iterator__: ({ *: ({ prop: ({ __iterator__: constructor, __proto__: set }), __parent__: [, __parent__, , ] }), __parent__: prototype }), __proto__: ({ __parent__: [], __noSuchMethod__: prototype }) }) = <y><z/></y>; #1#.unwatch(\"__count__\"); <x><y/></x>) {return;export *; }");
tryItOut("if(\n@foo) __parent__, __iterator__; else {return 1e+81; }");
tryItOut("{/*infloop*/while((yield (p={}, (p.z = <><x><y/></x></>)()))){let prototype; }throw __iterator__; }");
tryItOut("while((/*infloop*/L:do {export *;var __count__ = null; } while(__noSuchMethod__.prop ? [] : (__iterator__) <= <x><y/></x>.( '' ) / constructor);) && 0)return\n");
tryItOut("switch((-0)) { default: yield;break; __parent__ = undefined, __count__;case __noSuchMethod__: gc()case 1: return .2;case 6: break; (1 for (x in []))case 033: case true: break; case 2: let prototype;break;  }");
tryItOut("L: {return;yield; }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("M:if(constructor%=new (__parent__)( /x/ , constructor)) { if ([__count__] , (\nconstructor)) {var prototype = window;const __count__ =  /x/g , __proto__ = 0.1; }} else {gc()\n/*infloop*/for(prop = <x><y/></x>; <><x><y/></x></>; null) __noSuchMethod__, __parent__ = [1,,]; }");
tryItOut("throw __iterator__;");
tryItOut("return <><x><y/></x></>\n/*for..in*/for(const constructor in ((((<x><y/></x>)))(@foo.__iterator__ =  /x/ )))export prototype\nbreak ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <employee id=\"1\"><name>Joe</name><age>20</age></employee>['__iterator__'] in window.__parent__ = (prototype =  \"\" )) {return null;/*infloop*/while(\f__parent__){ } }");
tryItOut("yield;\ngc()\n\n/*infloop*/for(({__parent__: window}); this.zzz.zzz.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__); ) {yield; }\n");
tryItOut("if(true.@*.isPrototypeOf(*::*.unwatch(\"__proto__\"))) {yield __iterator__;; } else {(constructor); }");
tryItOut("(this)[ '' ].__parent__yield;");
tryItOut("with({prop: this.__lookupGetter__(\"prototype\")})({a2:z2})");
tryItOut("M:if(this.__defineGetter__(\"__iterator__\", (1 for (x in []))).__lookupSetter__(\"constructor\")) { if (__count__) {gc()throw [,]; } else yield <x><y//h\n/></x>__parent__</>;}");
tryItOut("if((constructor)) {M:if(*) this;return 0.1; } else  if (new RangeError(*, 1e81) != (p={}, (p.z = <x/>)())) {return -0;throw prototype; } else {return;L:with({constructor: @foo}){__count__ = <><x><y/></x></>; } }");
tryItOut("/*infloop*/do gc while((gc).call(4., <><x><y/></x></>,  /x/ ));");
tryItOut("/*for..in*/for(const (__count__) in ((({}).hasOwnProperty)([11,12,13,14].some)))yield;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (prop.__noSuchMethod__).__noSuchMethod__ = (constructor = -1.__defineGetter__(\"__proto__\", 'haha'.split)) in ({ prototype: ({ __proto__: __noSuchMethod__, prototype: ({ prototype: __noSuchMethod__, constructor: const prototype, prototype; }) }), __noSuchMethod__: ({ ({ __count__: prop, __proto__: constructor }): [prototype, constructor], __noSuchMethod__: ({ prop: __proto__, prototype: __count__ }) }) }) = (0.1 << *::*.__defineSetter__(\"prototype\", function (__noSuchMethod__) { return #1# } )).valueOf(\"number\")) {/*for..in*/for(let __noSuchMethod__ in __parent__) function (prototype) { return this }  }");
tryItOut("yield 3/0;");
tryItOut("if([({a2:z2})].map((new Function(\"(<x><y/></x>);\")))) {/*infloop*/do {yield; } while(\f4.); } else  if (window) ; else {var __iterator__ = prop; }");
tryItOut("/*infloop*/do {} while(__proto__ = window);");
tryItOut("if(prop = <x/>.__lookupGetter__(\"__count__\")) break ; else  if (String()) export *; else return;");
tryItOut("{/*for..in*/for(var [prototype, __proto__] = set = (prototype = eval(\"gc()\", (function ([y]) { })()).propertyIsEnumerable(\"__iterator__\")), __proto__ in @foo) {;gc() } }");
tryItOut("do {break M; } while((([__count__ = constructor])[<><x><y/></x></>.unwatch(\"prop\").@*]) && 0);");
tryItOut("with({__parent__: new Number(this, @foo)}){export *;M:with({prop: __count__.valueOf(\"number\")}){{} } }");
tryItOut("/*infloop*/L:while(typeof 1e+81){{}<x><y/></x>;\t }");
tryItOut("__proto__ = __iterator__;");
tryItOut("export __count__");
tryItOut("with(<x><y/></x>)export __noSuchMethod__;");
tryItOut("/*infloop*/for(__noSuchMethod__; (-1); RegExp()) const prototype, export constructor; =  \"\" ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in (constructor[[]]) >> ({__parent__: [,]})) (<x><y/></x>);");
tryItOut("/*for..in*/for([__iterator__['__noSuchMethod__'], prototype] = <></> in <><x><y/></x></>) (window);");
tryItOut("switch(((({}).__lookupGetter__).call(__count__ = __parent__.__proto__ =  /x/ , true)\n)) { default: throw StopIteration;{if(function::__parent__.__noSuchMethod__) {{} } else  }break; case <x><y/></x>.(get): L: gc()\ngc()\ncase this.__defineGetter__(\"prop\", function () { yield  /x/  } ): return prototype;break;  }");
tryItOut("if(.2) { if ([]) gc() else {yield <x><y/></x>;return __count__; }}");
tryItOut(";");
tryItOut("/*infloop*/for(let __proto__; [15,16,17,18].map(({}).hasOwnProperty, ('fafafa'.replace(/a/g,  /x/ ))); [11,12,13,14].filter) {/*infloop*/while([].watch(\"prop\", (({a2:z2})).apply))return }");
tryItOut("gc()");
tryItOut("do return <x/>; while(((__parent__).call(undefined, __parent__.prototype = __count__)) && 0);");
tryItOut("if(((p={}, (p.z = (new (Math.sin)(true - Object(new function(y) { yield y; gc(); yield y; }(<x/>, 5.0000000000000000000000), this), <x/>)))()))) { } else  if ([15,16,17,18].map(function(q) { return q; }, new (function(q) { return q; })())) {var prototype = window; const constructor; }");
tryItOut("L:if(true) {} else {return; }");
tryItOut("if((prototype = ({ __parent__: __proto__, prototype: __noSuchMethod__ }))) { if (yield let (__parent__) 0x99) {if(.2.__defineSetter__(\"function::prop\", [1,2,3,4].slice)) { if (window.yoyo(*)) {let prototype = (-0), __proto__;continue ; } else constructor = *, prop = <x><y/></x>;}export __iterator__; } else {/*for..in*/L:for(var prop = <y><z/></y> in <x><y/></x>)  }}");
tryItOut("{}");
tryItOut("");
tryItOut("L:do {(null);{} } while((new (<x><y/></x>)(__count__.__lookupGetter__(\"prop\"))) && 0);{}\n(*);\n\nthis.zzz.zzz;");
tryItOut("throw this.__defineGetter__(\"__proto__\", function () { yield; } ); const prop;");
tryItOut("if((#1=({__count__: 3/0}))) { if ( '' ) return;} else {throw undefined;const __proto__, constructor; }");
tryItOut("return ;constructor = __iterator__;");
tryItOut("if(({} == this)) {return;break ; } else  if ((let (__iterator__ =  \"\" , prop) window)) {(*::*);{} }");
tryItOut("if((__proto__ = this)) { if (__noSuchMethod__) {{};export *; } else prop = <x/>, prop = *::*;}");
tryItOut("export constructor; const constructor;");
tryItOut("/*for..in*/for(/*\n*/__proto__ = eval(\"prototype.(<x><y/></x>)\", <><x><y/></x></>--) in <zzz><x><y/></x>.valueOf(\"number\")--</zzz>) ");
tryItOut("L: ");
tryItOut("if(window) {export *; } else  if (<x><y/></x>) gc()");
tryItOut("/*for..in*/M:for(let [constructor, __count__] = __iterator__ :: (true[<x/>])(__parent__ =  \"\" ,  /x/g ) in [15,16,17,18].filter(function(y) { yield y; ({}).__lookupGetter__; yield y; }, __count__)) __noSuchMethod__");
tryItOut("return *::*;");
tryItOut("/*for..in*/L:for(let __proto__ = <employee id=\"1\"><name>Joe</name><age>20</age></employee> in (new (<x><y/></x>)((<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", <><x><y/></x></>)), @foo))) {const constructor = window;(<x/>); }");
tryItOut("let __iterator__;__noSuchMethod__ = <y><z/></y>;");
tryItOut("__proto__ = constructor;");
tryItOut("if(constructor.(undefined)) constructor = <><x><y/></x></>, __iterator__ = @foo; else export prop;");
tryItOut("{throw case 5: break ;case __count__: export constructor;break; break; ; const prop; }");
tryItOut("{var prop = *::*;var __parent__; }");
tryItOut("if( '' (<><x><y/></x></>)) {{}__iterator__ } else  if ((@foo ? <x><y/></x> : <><x><y/></x></>)) {yield <><x><y/></x></>;([,]); }");
tryItOut("with((false)(*, 1.2e3))prop = <x><y/></x>, __noSuchMethod__ = window\ntrue;\n");
tryItOut("throw function ([y]) { };\nexport *;\n");
tryItOut("if((Function.unwatch(\"__noSuchMethod__\"))) { if (((__parent__.((<x><y/></x>.(this)))) .@x:: (new Number().*) <<= new (__iterator__)[constructor]( /x/g  = this,  \"\" ))) {/*infloop*/do {(*); } while( '' );yield; }} else let __count__ = [[1]]\n");
