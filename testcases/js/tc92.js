tryItOut("let (__iterator__ = ({ __noSuchMethod__: constructor, __iterator__: __count__ }) = this.__defineSetter__(\"__count__\", function  __iterator__ (prototype) { yield __count__ } )) { throw <y><z/></y>; }");
tryItOut("if(window.unwatch(\"__iterator__\")) {M:while((({})) && 0)yield this; } else  if (true) {} else {break ; }");
tryItOut("{let prop, __parent__ =  /x/  }");
tryItOut("if((prop = window)) while((-1) && 0)export *;");
tryItOut("yield  \"\" \n\n");
tryItOut("yield @foo;");
tryItOut("L:if((new gc(null.watch(\"__count__\", ((new Function(\"const __noSuchMethod__, __noSuchMethod__ = <><x><y/></x></>;\"))).call),  /x/g )[#1=[let (prototype, prototype = <x/>) false]])) {return;if(Object(undefined != constructor, <x/>)) { if (prototype = (p={}, (p.z = <x><y/></x>)())) {if( \"\" ) var __iterator__ = __noSuchMethod__, prop =  /x/g ; else  if (<x><y/></x>) {function ()*::*let prototype\f; } }} else {return; } } else  if (constructor = <x><y/></x>) yield false;");
tryItOut("/*infloop*/for(let __iterator__ = (new ({}).hasOwnProperty(prop, <y><z/></y>).__lookupGetter__(\"__noSuchMethod__\")); constructor; \t0) export *;");
tryItOut("/*infloop*/for(let __proto__; 0.1; __noSuchMethod__) throw [[]];");
tryItOut("{yield; }");
tryItOut("__iterator__ = prop;");
tryItOut("/*infloop*/for(-() ? <bbb xmlns=\"typeof <><bbb xmlns:ccc=\"\n<x><y/></x>\"><ccc:eee></ccc:eee></bbb></>\"></bbb> : ((p={}, (p.z = prop)())) >>> true.yoyo( \"\" ); window.__lookupSetter__(\"prop\"); <y><z/></y>.__defineGetter__(\"constructor\", function (__iterator__, prototype)__count__ in null /  \"\"  >>= window).hasOwnProperty(\"__proto__\")) /*infloop*/\rdo gc() while(prototype = 'haha'.split);");
tryItOut("{/*for..in*/M:for(const [<!--yy-->, __iterator__] = __iterator__.prototype in @foo) throw *; }");
tryItOut("do {[,,z1]; } while((__proto__|=(p={}, (p.z = <><x><y/></x></>)())) && 0);");
tryItOut("if(( '' .hasOwnProperty(\"__noSuchMethod__\"))) /*for..in*//* nogeckoex bug 349964 */M: for  each(let prop in true) return (-1); else {export *;throw __proto__; }");
tryItOut("");
tryItOut("/*infloop*/while(this.__proto__)/*infloop*/for(let __noSuchMethod__ = ( /x/ --) %= yield  /x/g ; ; @foo.watch(\"constructor\",  /x/ )) if(1e4) Math.pow else { }");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = new <x/>.@foo in Number()) {if(prop.__noSuchMethod__ = <><x><y/></x></>) {return; } else  if (new gc(window)) {yield prop; } else \t{export *; } }");
tryItOut("(prototype);");
tryItOut("for(let y in [5,6,7,8]) constructor = __iterator__\nwhile((window) && 0){;var prototype, constructor = <><x><y/></x></>\n }");
tryItOut("let (({ __proto__: ({ __count__: __count__ }), prop: [, prototype, , ] }), __parent__) { /*infloop*/L:for(<x><y/></x>.@* >>> <x><y/></x> < window; yield; (window / <><x><y/></x></>)) {if([,,z1]) {{} } else  if ([z1]) {yield; }/*infloop*/for(__noSuchMethod__ =  /x/ ; null; true) continue ; } }");
tryItOut("{yield <><x><y/></x></>;with({function::default: case 1: break; : (033)}){ } }");
tryItOut("/*for..in*/for(var [__proto__, constructor] = (delete undefined).__defineSetter__ in [z1,,]\n) yield ({(-1): 'fafafa'.replace(/a/g, function  __noSuchMethod__ (__count__)<x><y/></x>)});");
tryItOut("L:if(__count__.prototype getter= ({ prototype: __noSuchMethod__ }) = @foo >> <x><y/></x>) {L:if(*::*) {export *; }if(<><x><y/></x></> >>>=1e4) export *; else  if ((__iterator__ = <y><z/></y>)) throw  \"\" ; } else /*for..in*/for(let prop = __noSuchMethod__(__noSuchMethod__ = <x/>, (this.unwatch(\"prototype\"))) in __noSuchMethod__()) let constructor = true, __parent__ = __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let ({ constructor: [, []], prop: ({ prototype: prototype, constructor: [prop, , , ] }) }) = eval(\"(yield @foo)\", \n( /x/ .__noSuchMethod__ = <x/>)); (<x/>.__iterator__ >>= prototype.__count__);  ''  /= prop.(true)) {var __count__;export __iterator__\n/*for..in*/for(let __proto__ in 5.0000000000000000000000) {(@foo);(<><x><y/></x></>); } }");
tryItOut("L: {return;export __iterator__;\ngc()\n }\n");
tryItOut("if(this) return;");
tryItOut("M:while((void function::constructor) && 0){/*infloop*/while( '' ){return;let __proto__ =  \"\" , prop = <y><z/></y>; }if(<><x><y/></x></>) let prop = <><x><y/></x></>; else  if (this) const __noSuchMethod__ = prop; }");
tryItOut("yyy");
tryItOut("gc()");
tryItOut("switch(((#2=({__count__: window.*})).yoyo(1.2e3\n)['fafafa'.replace(/a/g, function  __iterator__ (constructor)({this getter: Math.pow, prototype: <x/> }))\f])) { default: L:if(((undefined)[033])) {; } else  if ((#1=({__proto__: throw <y><z/></y>}))) /*for..in*/for(let __iterator__ = * in this) {; }break;  }");
tryItOut("/*infloop*/do {/*for..in*/for(var __count__ = __parent__ in 1e4) { } } while((function(q) { return q; }).call(function ([y]) { }, __noSuchMethod__, .2) .@*:: <x><y/></x>.@foo);");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("if(__noSuchMethod__ = (-0)) __noSuchMethod__; else  if (this.__defineGetter__(\"each\", *)) {<xxx {__proto__}={\t*::*} />yield; } else {; }");
tryItOut("switch(<x/>) { default:  }");
tryItOut("{{}yield; }");
tryItOut("with((({__iterator__: 5.0000000000000000000000,  get x::prototype(__parent__)this\t })))\n");
tryItOut("if([,,]) var __count__; else  if (true) {; } else gc()");
tryItOut("if( /* Comment */( /* Comment */1.2e3)) { if (window) throw @foo; else L:if(<><x><y/></x></>) { if (<><x><y/></x></>) {/a/gi } else let __iterator__, __count__;}}");
tryItOut("{true;with(<><x><y/></x></>){const __count__ = __noSuchMethod__; } const prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({a1:1}) in 0) yield;");
tryItOut("let (__noSuchMethod__ = ((<x><y/></x>).watch(\"prop\", Function))) { M:if(({}).throw(@foo)) {if(null) __count__, __parent__; else {export *; } } else  if (__count__.__count__ = new function(q) { return q; }(this.__defineSetter__(\"function::prototype\", function () { yield #3={a:#3#} } ))) const __noSuchMethod__ = 1e-81, __iterator__; }");
tryItOut("/*for..in*/for((true\f.throw(<x><y/></x>))['__noSuchMethod__'] in ((((new Function(\"with({<x/>: <><x><y/></x></>})yield;\"))).call)(new (<ccc:ddd></ccc:ddd> for each ( in this) %= 5.0000000000000000000000.prop =  /x/ )()))){/*for..in*/M:for(let __parent__ =  ''  in window) export *;continue M; }");
tryItOut("if((Function).call(<x><y/></x>, )) (__count__); else {{} }");
tryItOut("switch((__iterator__ = Error(function(id) { return id }, <x><y/></x>))) { case  /x/ :  }");
tryItOut("M:do {{} } while((new (new Function)(window, 1e81)) && 0);");
tryItOut("(__iterator__) const __parent__;");
tryItOut("{with((({ __noSuchMethod__: __parent__, constructor: __noSuchMethod__ }) =  /* Comment */<x/>)){<x/>;/*for..in*/L:for([constructor, constructor] = [,,z1] in .2)   } }");
tryItOut("/*infloop*/for(true; 3.141592653589793;  '' ) var __noSuchMethod__ =  /x/ ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in ({__count__ setter: function(q) { return q; } })) /*for..in*/M:for(const __proto__ = @foo in __proto__) {return;yield; }");
tryItOut("/*infloop*/do {[1];__parent__ = __iterator__, __parent__ = true; } while((yield .2.@*));");
tryItOut("/*for..in*/M:for(const [__parent__, prop] = new function  __count__ () { yield null } (__count__).__iterator__ in <x><y/></x>.prototype) L: return *;");
tryItOut("throw <x><y/></x>;\nfunction(id) { return id };\n");
tryItOut("with(<x/>)return __count__;");
tryItOut("/*for..in*/for(var ((*::* + new Object() ? return : (__count__ = function::prop)))((prototype ? <x/> : *.__parent__ = prototype)) in ((function(q) { return q; })(<><bbb xmlns:ccc=\"(<><x><y/></x></>.__defineGetter__(\"prototype\", [1,2,3,4].map))\"><ccc:eee></ccc:eee></bbb></>.__lookupGetter__(\"prototype\")))){/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in function ([y]) { }) <>/*\n*/<x><y/></x></>;export *; }");
tryItOut("let (__iterator__ = null, __parent__ = false) { ; }");
tryItOut("/*infloop*/for(let prototype; [,,].hasOwnProperty(\"__proto__\"); (<x><y/></x>)(<x><y/></x>, [1,,])) {\nreturn <><x><y/></x></>; }");
tryItOut("/*for..in*/for\r(const prototype = this.__defineGetter__(\"__iterator__\", function (constructor) { yield  \"\"  } ) in ({__iterator__ getter: undefined })) {var prototype = <><x><y/></x></>;export constructor; }");
tryItOut("/*infloop*/for(let __proto__; ({constructor: #2=({__iterator__: prop})}); (((p={}, (p.z = *::*)()))[__count__])) do {var constructor =  '' ; }\f while(((window.eval(*))) && 0);");
tryItOut("/*for..in*/for(var prototype = \n1e-81++ in <x/>) var default: {}break;  =  /x/ , __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("yield ((prototype = function(id) { return id }));");
tryItOut("with((p={}, (p.z = (#1=[__parent__ + (__iterator__ ? [1,,] : <x><y/>x>)]).__lookupSetter__(\"__proto__\"))())){/*for..in*/for(let [__noSuchMethod__, __iterator__] = <x><y/></x> in this) return <x/>; }");
tryItOut("let(__parent__ = (yield <x/>)) { throw StopIteration;");
tryItOut("return -1;");
tryItOut("return (this * prop.__parent__ = null);");
tryItOut("L:with((<><x><y/></x></>.__iterator__) ? * : window)({ __parent__: __parent__, __noSuchMethod__: ({ __proto__: [function::prop, ({ __count__: ({ prototype: ({ __iterator__: __iterator__ }), __count__: ({ __iterator__: constructor }) }), prototype: [[, __count__], , __count__, ({ __iterator__: prototype })] }), [({ __proto__: ({ constructor: __count__ }), x::__parent__: __parent__ })], __parent__, ] }) }) = !__count__");
tryItOut("window.__count__ = prototype;");
tryItOut("{}");
tryItOut("#1#; const constructor;");
tryItOut("/*for..in*/for(let [constructor, __count__] = __count__.__parent__ in prototype < <><x><y/></x></>.propertyIsEnumerable(\"prototype\").@foo) yield eval(\" /x/g \", <y><z/></y>.__parent__ = {});");
tryItOut("/*infloop*/M:for(const __iterator__; ; \n<><x><y/></x></>) var prop, constructor = <><x><y/></x></>\nlet ([] = <><x><y/></x></>.propertyIsEnumerable(\"prototype\")) { let (prop) { 'haha'.split } }");
tryItOut("prop = __noSuchMethod__;");
tryItOut("{var prop = window, __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let prototype in <><x><y/></x></>) return;");
tryItOut("L: {{}/*for..in*//* nogeckoex bug 349964 */ for  each(\tconst __proto__ in (function ([y]) { })()) break ; }");
tryItOut("while((prop <<= <x><y/></x>) && 0)var __parent__ =  /x/g ;");
tryItOut("while((((this)( '' )) = (this)[[,,]]) && 0){return;while((__parent__) && 0){gc()yield; } }");
tryItOut("/*for..in*/for(let __iterator__ in (([1,2,3,4].slice)( /* Comment */(-0).*)))throw this;");
tryItOut(";");
tryItOut("/*for..in*/for(const __proto__ in (function ([y]) { })()) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in __iterator__.__count__-=(new 1e-81())) M:if(gc.__defineGetter__(\"__count__\", [1,2,3,4].map)) export prototype; else  if (new (<x><y/></x>(<x><y/></x>))( /* Comment */-3/0, <x><y/></x>)) yield <x/>;");
tryItOut("/*for..in*/for(prop = this.zzz.zzz in 033) {try { yield; } finally { yield  /x/g ; } if((<x><y\f/\f></x>.throw(__proto__))) return [1];export __noSuchMethod__; }");
tryItOut("{/*for..in*/for(let prop in ((([,,z1]).apply)(@foo))){export __count__;; } }");
tryItOut("var __noSuchMethod__ = <><x><y/></x></>, __count__ = [z1];");
tryItOut("switch(<><bbb xmlns=\"(new this % __parent__((<y><z/></y>), <><x><y/></x></>)) .@ (({} /= <x><y/></x>)(this, <><x><y/></x></>))\">yyy\f</bbb></>) { default: const x::__count__ = __iterator__ = window ? (__proto__+=[[]]) : __iterator__.prototype, __noSuchMethod__;break;  }");
tryItOut("if((constructor)( \"\" )) { if ([11,12,13,14].sort) {throw this; }} else {return /x>;var __count__ = *, function::__iterator__ = <><x><y/></x></>\f; }");
tryItOut("function () { return ((uneval((function (prop, __iterator__) { __iterator__ = -0, __iterator__ = undefined; } )(3.141592653589793, *))))-- } ");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (* <= <><x><y/></x></>).watch(@foo, <x><y/><\f/x>.__lookupSetter__(\"constructor\")) in new [1,2,3,4].map(window, 3/0)) throw <x><y/></x>;");
tryItOut("M:if(<><x><y/></x></>) {(@foo);window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in false) {[,];([,,]); }");
tryItOut("return [z1,,];");
tryItOut("let (prototype) { export *; }");
tryItOut("with((__count__ = <x/>)){}");
tryItOut("M:if( \"\" ) {;; } else  if (__count__) {const __parent__ = true;gc() }");
tryItOut("L: {let __proto__, constructor =  \"\" ;export *; }\n");
tryItOut("/*for..in*/L:for(let prototype in (p={}, (p.z = (this.__defineGetter__(\"__iterator__\", /a/gi)))())) /*for..in*//* nogeckoex bug 349964 */ for  each(prop in *) var __proto__, constructor;");
tryItOut("switch(( /* Comment */<x/>).eval(window)) { case __parent__.__parent__ getter= ({}).__lookupGetter__: gcdefault: throw <y><z/></y>;case prototype == __count__ in (<x><y/></x>.(<><x><y/></x></>)): case (undefined)[ \"\" ]: break; gc()break; case 5:  }");
tryItOut("M:while((#1=[<y><z/></y>['__count__'] = new (( '' ).__defineSetter__\f)(<><x><y/></x></>)]) && 0)throw  \"\" ;");
tryItOut("M:switch(('haha'.split).call((prototype = String(function::__proto__ =  /x/ )),  \"\" )) { default: break; break; case ++([[,,z1] for (__proto__ in  \"\" .unwatch(\"__count__\")--) if (eval(\"<><x><y/></x></>\", <x/>)\f)]): break; case 9: __count__break; case 3: /*infloop*/do {gc(){} } while(((1 for (x in []))));break; case 3: break; case <></>: case 6: break; yield;export *;case ({}):  }");
tryItOut("if(eval(\"__count__ = 3/0\", -3/0)) {while((<x><y/></x>) && 0)export *;const __noSuchMethod__, __proto__ = __parent__; } else prototype");
tryItOut("/*infloop*/M:do (<><x><y/></x></>); while([, ] = ((this)(false, *::*)));");
tryItOut("with(window)let __parent__ = *::*;");
tryItOut("while(((this.__defineGetter__(\"__proto__\", function  get (__iterator__) { continue ; } ))) && 0){; }");
tryItOut("/*infloop*/do {return; } while(<x><y/></x> -= 1e-81);");
tryItOut("with( /* Comment */*::*)M:do var __noSuchMethod__; while(('fafafa'.replace(/a/g, function(y) { yield y; function  __iterator__ (__proto__) { yield <x><y/></x> } ; yield y; })) && 0);");
tryItOut("\tif((<x>\t<y/></x>[null])) throw [z1,,]; else yield;");
tryItOut("return;");
tryItOut("let (__proto__) { L:with({__iterator__: ( { yield __iterator__.prop = __count__.prototype } )}){;function(q) { return q; } } }");
tryItOut("/*infloop*/for(*; null; @foo) export *;");
tryItOut("/*infloop*/M:for(const prop; <y><z/></y> <<= __count__; eval(\"\\n\", *::*)) [[1]]");
tryItOut("var x::prototype;");
tryItOut("if((@foo /=  /x/g .isPrototypeOf(__proto__)(({__noSuchMethod__\f, __noSuchMethod__ getter: Math.sin }), (uneval((__iterator__.__count__ setter= new Function)))[*.@foo |= [#1=[#1#] for (__parent__ in *::*)]]))) {if((this.__defineGetter__(\"constructor\", (({}).__lookupGetter__).call))) { if (*::*) {return; } else let __noSuchMethod__ = <x><y/></x>;} } else  if (({prop: (__count__)[@foo] })) {/*for..in*/for(const prop in ((function  __count__ () { gc() } )(null()(3/0))))/*for..in*/for(var [__noSuchMethod__, __count__] = * in *::*) {export *; } }");
tryItOut("L:do {return;gc() } while(((<><xxx>{__iterator__}</xxx></>.propertyIsEnumerable(\"prototype\"))) && 0);");
tryItOut("throw #1=[#1#]\nL:if(([<x/>] for (prop in 1.2e3) for (prototype in <><x><y/></x></>))) {gc()let (prop = yyy, prototype) { yield; }\f }");
tryItOut("M:with({__noSuchMethod__: (new (function ()<y><z/></y>)([1,,]))()}){if(0/0) {} else  if (window) {gc() } else let {gc()gc() };(<x><y/></x>)(*); }");
tryItOut("/*infloop*/while( /x/ ){<y><z/></y>(({a2:z2})); }");
tryItOut("/*for..in*/for(const __iterator__ in ((\nfunction(y) { yield y; __noSuchMethod__ = constructor, __noSuchMethod__ = *::*;; yield y; })(1e+81))){yield; }");
tryItOut("M:if(prop.__parent__ getter= ((__iterator__).watch).call) export __noSuchMethod__; else  if (constructor = <x/>) export *; else {}");
tryItOut("switch( /x/g ) { default: if(-1) { if (this) {yield;return __noSuchMethod__; }} else yield;break; {} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((prop) in this) let(__count__) ((function(){let(prototype) ((function(){<x><y/></x>.prop = prototype;})());})());");
tryItOut("throw __parent__;");
tryItOut("let (__iterator__ = ) { yield; }");
tryItOut("");
tryItOut("/*for..in*/for(let [__proto__, prop] = ((-1) /= *::*) in true) {break ; }");
tryItOut("\n\n");
tryItOut("yield ([15,16,17,18]//h\n.some((({}).__lookupGetter__).apply, 033 | this));");
tryItOut("/*for..in*/for(let __proto__ in ((function(y) { yield y; __proto__ = @foo;; yield y; })(false))){return <y><z/></y>;return null; }");
tryItOut("/*for..in*/for(const constructor = __iterator__ = 0/0.throw(-0) in 0x99) const constructor;");
tryItOut("L:with(new (__noSuchMethod__ = window)((*::* & window),  /x/ ) << new (([] = new ( \"\" )( '' , *::*)))(__proto__|=let (__parent__) prototype, [null].map((@foo).watch))){; }");
tryItOut("do {} while(('fafafa'.replace(/a/g, <x><y/></x>)++) && 0);");
tryItOut("L:if(new <><x><y/></x></> in (uneval(*::*))) {var __proto__ = @foo; } else {const __noSuchMethod__ = window, prototype = <y><z/></y>; }");
tryItOut("if(constructor ^ <><x><y/></x></>) const __noSuchMethod__; else  if (prototype = <x><y/></x>) {eval } else (<x/>);");
tryItOut("null;");
tryItOut("if(([<y><z/></y>.@foo].sort(function  __count__ (({ set: constructor, __noSuchMethod__: constructor }))[11,12,13,14].filter))) {yield <>try { export *; } catch(__count__) { ; } finally { ; } </>; } else {if(__iterator__ = null, each = prop) gc() else  if (<y><z/></y>) ; else {{} }return <x><y/></x>; }");
tryItOut("M:do  while(( /x/g ) && 0);");
tryItOut("//h\nwhile((__parent__) && 0){{}export *; }");
tryItOut("yield <x/>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor\t in window *=  /x/g ) {/*for..in*/for(__parent__ in #1=[#1#]) {; }var __parent__ =  /x/g , __count__; }");
tryItOut("{export constructor; }");
tryItOut("L:if(<y><z/></y>[window]) gc() else  if ((constructor\n)) {var __count__ = <x><y/></x>; /x/ ; } else return;");
tryItOut("return; const __count__;");
tryItOut("/*for..in*/for(const __parent__ = 1e-81 .@x:: window in undefined) {}");
tryItOut("/*infloop*/for(__parent__ = new [z1,,](); ({prototype: *::* }); __count__ = null) {export *; }");
tryItOut("prop = prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <><>({})</><ccc:ddd></ccc:ddd></>) {let (__proto__ = #3={a:#3#}) { __noSuchMethod__; }/*for..in*/M:for(let prototype in  /x/ ) function  __count__ () { return <y><z/></y> }  }");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("{export *;if((function ([y]) { })()) { if (__count__ = {}) { } else ({}).__lookupGetter__} }");
tryItOut("{__parent__ = [], prototype;\nlet constructor = this, __parent__;\nyield;return; }");
tryItOut("new Function const \f__proto__;");
tryItOut("{var __count__, prototype = <x><y/></x>, __proto__; } const prototype;");
tryItOut("<x><y/></x> const __count__;with({}) { __count__ = __proto__; } ");
tryItOut("__iterator__\nexport constructor\n\nyield;");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, window); __iterator__.__iterator__ setter= Function; <x><y/></x>) yield @foo;");
tryItOut("if(( /x/  >>= *).__lookupGetter__(\"__count__\").valueOf(\"number\")) { if (this) {{} }} else {var __iterator__ = prototype;var constructor = [[1]], __noSuchMethod__ = false; }");
tryItOut("{}\n");
tryItOut("/*for..in*/for(const constructor.__proto__ in  \"\"  instanceof (-3/0--).throw((yield <y><z/></y>))) {/*infloop*/do {export *;; } while(*); }");
tryItOut("if(window) {while((( \"\" )) && 0)throw *::*; }");
tryItOut("prototype = __parent__;");
tryItOut("return\n");
tryItOut("if(undefined) {var __noSuchMethod__ = null; } else  if ( \"\" ) continue ;");
tryItOut("{yield; }");
tryItOut("/*infloop*/for((__iterator__+={}); (constructor); constructor = <><x><y/></x></>) export __count__;");
tryItOut("/*infloop*/while({})M:with({__iterator__: 3.141592653589793}){{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__.\fprototype in <><x><y/></x></>) prototype");
tryItOut("/*infloop*/for(([1e+81]); ({prototype getter: Math.sin, __proto__: * }); <y><z/></y>) yield <><x><y/></x></>;");
tryItOut("return;\nexport *;\n");
tryItOut("var case 8: /*infloop*/for(let __iterator__; [*::* if (true)]; <x><y/></x>.((-0))) {return this; }break; break; break; case window , <><x><y/></x></>: ;");
tryItOut("/*infloop*/for(__count__; (yield *::*); 0/0) ;");
tryItOut("L: {gc() }");
tryItOut("L: {export __parent__;; }");
tryItOut("/*infloop*/for(<><{__iterator__}>yyy</{__iterator__}></>; __count__.constructor = ((function ([y]) { })()); new ;([z1,,],  /x/g )) {/*infloop*/L:while(1.3)let __noSuchMethod__, x::__count__ = 033; }");
tryItOut("/*for..in*/for(let [__parent__, constructor] =  in <x/>) {return <><x><y/></x></>;const prototype = false, __parent__; }");
tryItOut("if(*::* * [z1])  else  if (@foo.eval(this)) if(([15,16,17,18].some(function(y) { yield y; ; yield y; }, #3={a:#3#}))) {gc() }");
tryItOut("/*for..in*/M:for((true /=  '' )([1].\tpropertyIsEnumerable(\"__iterator__\")) in ((function (prototype) { /*for..in*/L:for(let __count__ in (('haha'.split)(4.))){({}).__lookupGetter__let __proto__, constructor; } } )(function::prop ? window : <y><z/></y> ? * .. <><x><y/></x></> : ((p={}, (p.z = <x><y/></x>)()))))){var __proto__, yield (function ([y]) { })();; }\t");
tryItOut("if(new function(y) { yield y; gc(); yield y; }(__noSuchMethod__ =  '' )) {{(<><x><y/></x></>); }{} } else /*for..in*/M:for(let prototype.constructor in ((function(y) { yield y; throw *;; yield y; })(null))){export __iterator__;yield <x><y/></x>; }");
tryItOut("do {while((<x><y/></x>) && 0)break ; const __noSuchMethod__; } while(((yield null)) && 0)\nif(prop.__parent__.yoyo({gcthrow <><x><y/></x></>; })) {throw prop\ngc() } else  if ( { yield prop = constructor, __noSuchMethod__[<x/> &  '' ] } ) throw <><x><y/></x></>; else {return; }");
tryItOut("if(new (@foo for (__iterator__ in \t<x><y/></x>) if (<x><y/></x>))((function ([y]) { })(), [15,16,17,18].sort((1 for (x in [])), <><x><y/></x></>))) { if ((prop =  /x/ )) {;__proto__ = 033, prototype; }}\t else return;");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__proto__) in (<x/>\n for each (__noSuchMethod__ in function(id) { return id }) for each (__count__ in __count__) for each (__proto__ in __iterator__))) export *;\nconst __noSuchMethod__;\n");
tryItOut("{with(__count__){{}<x><y/></x>; }/*infloop*/L:do ; while(1.3); }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/__count__for(let __count__ = ({a2:z2}) in 1e-81) {export __count__;let __proto__ =  \"\" ; }");
tryItOut("L:if((true)(__parent__ = __iterator__)) {yield eval(\"(function ([y]) { })()\", true); } else  if (((4.())(prop+=<><x><y/></x></>.unwatch(\"__proto__\"), <x/> :: @foo)) @ prop.prototype = <>yyy</>) export __iterator__; else /*infloop*/M:for(const __parent__ =  { yield (eval(\"3\", )) } ; (eval(\"M:with(true){.2;throw false; }\", <x><y/></x>)); <bbb xmlns=\"[1]\">yyy</bbb>.((<x><y/></x> >>>=<x><y/></x\f>))) (1 for (x in []))");
tryItOut("let __proto__");
tryItOut("L:switch(this.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)--((#1=[#1#]\n) || {} .. __count__: undefined, 033.__count__.\rvalueOf(\"number\"))) { default: break; case new ((uneval(*)))(): return 0;\tbreak;  }");
tryItOut("( \"\" );{} const __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("{}gc()");
tryItOut("{gc() }");
tryItOut("break M;");
tryItOut("/*infloop*/for((this.__defineGetter__(\"({ __proto__: __count__ })\", __parent__ & <x><y/></x>)).valueOf(\"number\"); <><x><y/></x></> &=  if (5.0000000000000000000000) <<= <><x><y/></x></>; this.zzz.zzz) {export __parent__;(__proto__); }");
tryItOut("with(++ /x/g .hasOwnProperty(\"prop\")\f !== window.propertyIsEnumerable(\"__iterator__\"\f)){throw null; }");
tryItOut("while((false) && 0){let __parent__, __parent__;{} }");
tryItOut("/*for..in*/for(const prototype in ((function (__iterator__, __noSuchMethod__) { return <x/> } )(({a2:z2}) += window)))yield ({a1:1});");
tryItOut("let([({ __parent__: constructor }), , __noSuchMethod__] =  '' ) { {}");
tryItOut("/*infloop*/while(window)(__proto__ = __proto__)");
tryItOut("/*for..in*/for(constructor = <><x><y/></x></> in  /x/g ) ");
tryItOut("return [[]];");
tryItOut("with((String(null.throw(window), false)).__lookupGetter__(\"constructor\")){let __iterator__; }");
