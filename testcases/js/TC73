
tryItOut("/*for..in*/for(let __proto__ = <x><y/></x> ? prototype : __iterator__ in 3.141592653589793) new Function");
tryItOut("while((<><{__iterator__}></{__iterator__}></>) && 0){switch((typeof <><x><y/></x></>)) { case 7:  }return; }");
tryItOut("/*infloop*/while(*){return [[1]];(<><x><y/></x></>); }");
tryItOut("L:while((<x><y/></x>) && 0){(({a2:z2})); }");
tryItOut("/*for..in*/for(let [prototype, prototype] = (({a1:1}) if ([,])) in <x><y/></x> *= [[]]) {yield;export *; }");
tryItOut("let (__parent__ =  ''  !== null) { while((eval(\"{}\", false)) && 0){yield; /x/  } }");
tryItOut("if(constructor.__proto__) {gc() } else throw window;");
tryItOut("<x><y/></x> = constructor;");
tryItOut("let (__count__) { var __noSuchMethod__ = *::*, __count__ = this; }");
tryItOut("/*for..in*/for(let [prop, prop] = (*::*.isPrototypeOf(*)).__noSuchMethod__ in false) {{} }");
tryItOut("{/*infloop*/M:for(const [, [({ function::__count__: __proto__, prototype: __proto__ }), ({ __count__: prototype }), , [__proto__, , , constructor], ({ __noSuchMethod__: __noSuchMethod__ })]] = __parent__.__count__.prop = __iterator__ = false; true.throw(true).__defineGetter__(\"__count__\", (new Function(\"const __iterator__ = this\\n\"))); prototype = (window.isPrototypeOf(this))) prototype = true, function::__iterator__ = <x><y/></x>;for(let y in []); }");
tryItOut("if(<><x><y/></x></>\n) let __parent__; else  if (( '' .watch(\"prototype\", [1,2,3,4].slice).hasOwnProperty(\"__parent__\"))) /*for..in*/L:for(const __noSuchMethod__ in 5.0000000000000000000000)  ");
tryItOut("L: {var __noSuchMethod__ =  '' , constructor;yield; }");
tryItOut("with({let: <x><y/></x>});");
tryItOut("with({__parent__: (__parent__.(yield ).__proto__ = delete ? new (undefined)() |= ({a2:z2}) : (((1e81)(<x><y/></x>, <><x><y/></x></>) if ( /x/g ))))})/*infloop*/M:while(__noSuchMethod__.(#3={a:#3#})\r != <x><y/></x>){;{} }");
tryItOut("(5.0000000000000000000000);");
tryItOut("let(prototype = ([__parent__ = <x/>, __proto__ = [,] if ( \"\" )\t])) { prop = __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("while((({//h\nprop: null/*\n*/,  get prop __proto__ ()(__iterator__)(({prop setter: eval, __noSuchMethod__ getter: prototype }).*, (<x><y/></x> != !<x><y/></x>.eval((<><x><y/></x></>)[try { 'haha'.split } finally { continue ; } ]))) })) && 0){if() {with({__parent__: 'fafafa'.replace(/a/g, (new Function).call)}){/*for..in*/L:for(const [__noSuchMethod__,  get __proto__ constructor () { export prop; } ] = __iterator__ in *) {\fexport *; } } } else /*infloop*/while(prop)return;if() { if ((({ set __noSuchMethod__() {  }  }))) var __noSuchMethod__; else var __iterator__;} }");
tryItOut("{break ; }");
tryItOut("throw constructor;");
tryItOut("{switch(__iterator__) { default: break;  } }");
tryItOut("throw prototype;");
tryItOut("L:if([this.__defineGetter__(\"prototype\", [1,2,3,4].map)].map(Function)) /*for..in*/L:for(const __noSuchMethod__ in window) return 1.2e3;");
tryItOut("for(let y in [5,6,7,8]) export __proto__;");
tryItOut("let (__parent__, prototype = <x><y/></x>) { M:if( \"\" ) export *; else  if (3) {export __proto__;var __count__; } else export *; }");
tryItOut("for(let y in [5,6,7,8]) __count__ = __parent__;");
tryItOut(";");
tryItOut("/*infloop*/L:for([[(p={}, (p.z = <><x><y/></x></>)()), ({ __parent__: [], __noSuchMethod__: window.__proto__ }), , , ], , [, ({ __parent__: __proto__, function::__iterator__: __noSuchMethod__ }), ({ prop: ({ __proto__: ({ constructor: __noSuchMethod__, __noSuchMethod__: prop }), prototype: __noSuchMethod__ }) })\f, ({ __proto__: [], __proto__: prototype })], [, \t, , __count__], [({ __iterator__: ({ constructor: [__noSuchMethod__, , __parent__, __count__] }), __noSuchMethod__: __count__ })]] = [((new String(-3/0, __count__))[__noSuchMethod__.prop getter= function  prototype (each, constructor) { return [1] } ])].map((1 for (x in []))); null; (yield typeof ).valueOf(\"number\")) {/*for..in*/for(__parent__ in (((*::*).watch)(<y><z/></y>))){export *;yield; }/*for..in*/for(let __parent__ in (function ([y]) { })()) yield 1.2e3; }");
tryItOut("L: return undefined;");
tryItOut("L: {/*infloop*/do {throw window;\nreturn __noSuchMethod__; } while((let (prop) [1].__count__ = <y><z/></y>)); }");
tryItOut("@foo;");
tryItOut("with(((new (function(y) { yield y; __noSuchMethod__ = *::*, __parent__;; yield y; })())++ >>= false))yield;");
tryItOut("if(0/0) { if (prop) {({}).__lookupGetter__ }} else export yield;");
tryItOut("if(__parent__ = __noSuchMethod__.valueOf(\"number\")) \fexport *; else  if (((function  prototype (__iterator__, __parent__) /x/ )(-1)).watch(\"__count__\", Function)) break ;");
tryItOut("switch(prototype = *::*, __count__;) { default: break; yield;break;  }");
tryItOut("/*infloop*/do {export prototype\nyield; } while((<y><z/></y> for each (__iterator__ in #1#)));");
tryItOut("throw StopIteration;");
tryItOut("L:if( '' ) {break ;return; } else {gc() }");
tryItOut("{L: break M;while((<y><z/></y>) && 0) }");
tryItOut("{{}{/*infloop*/for(let constructor = <><x><y/></x></>; null; ({a1:1})) prototype\f } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:for(window; constructor &= true; ({constructor: prototype.hasOwnProperty(\"prop\")})) with({__parent__: <x><y/></x>}){throw #1#;let __iterator__; }");
tryItOut("switch( '' ) { default:  }");
tryItOut("{yield -0;prototype, __iterator__; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in @foo) {(window); }");
tryItOut("throw StopIteration;");
tryItOut("throw StopIteration;/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype['__count__'] in eval(\"[z1,,]\", 1.2e3)) const __parent__;");
tryItOut("/*infloop*/L:for(([-3/0]); *::*.@foo; (Date(constructor, <x/>))) /*infloop*/do <{setter}><x><y/><//*\n*/x> </{setter}> while(1.2e3)\n(<><x><y/></x></>);");
tryItOut("{export *;(#1=[(function ([y]) { })]); }");
tryItOut("<y><z/></y>");
tryItOut("/*for..in*/for(var constructor = *::* in <x><y/></x>) export prop;");
tryItOut("return;");
tryItOut("{throw null;{} }");
tryItOut("/*infloop*/while((#2=[(Function)])){yield <><x><y/></x></>;/*infloop*/L\f:do __proto__ = [[]]; while(new (constructor.__parent__)()); }");
tryItOut("export __iterator__;");
tryItOut("/*infloop*/for(({__proto__: (__proto__.eval(this)) }); prop.(prototype) % <x/>.propertyIsEnumerable(\"__count__\"); ()) /*infloop*/for( /x/g .__lookupSetter__(\"prop\"); __iterator__.(window);  /x/g  / <x><y/></x>) gc");
tryItOut("(<y><z/></y>);");
tryItOut("{{} }");
tryItOut("M:with(constructor)yield;");
tryItOut("{/*infloop*/M:while(<x/>[prototype] === Array(true)){throw <><x><y/></x></>; } }");
tryItOut("( /x/ );");
tryItOut("(arguments)");
tryItOut("let (constructor) { prototype = prop; }");
tryItOut("if(window) {return window;return *; }");
tryItOut("window;");
tryItOut("{if(<x><y/></x>) {export __count__; } else  if (<y><z/></y>) {yield; } else {const prototype = <y><z/></y>; } }");
tryItOut("/*for..in*/for(const [__parent__, __count__] = (<x><y/></x>++).throw(((1 for (x in []))).call( /x/ , )) in \fconstructor = this.eval(@foo)) gc()");
tryItOut("yield;\n__proto__;\n");
tryItOut("{if((yield (let (__iterator__ = <y><z/></y>, __parent__) <y><z/></y>).@foo)) export prototype; else {export *; } }");
tryItOut("(((<><x><y/></x></>)[this]))('fafafa'.replace(/a/g, function(y) { yield y; {}; yield y; })) = ({ __iterator__: ({ __count__: [, ({ __iterator__: __proto__, constructor: prototype })] }), __iterator__: prop });");
tryItOut("for(let y in [5,6,7,8]) let((__parent__), __noSuchMethod__) { throw __count__;");
tryItOut("throw __count__;");
tryItOut("/*for..in*/M:for(prototype =  \"\"  in <x/>) const constructor = *::*;");
tryItOut("if((this.zzz.zzz)[((({}).hasOwnProperty)(null))]) { if (\t((__noSuchMethod__(eval(\"const x::constructor, __iterator__ = *;\",  /x/g )) = Function(__parent__).valueOf(\"number\")).yoyo((#1=({__iterator__: __count__ = <><x><y/></x></>(let,  /x/g )}))))) {/*for..in*/for(__noSuchMethod__ in 3/0) continue L; } else /*infloop*/while(window){*; }}");
tryItOut("(<y><z/></y>).watch(<><x><y/></x></>);");
tryItOut("M:switch(this % prototype.@*) { case  /x/ .isPrototypeOf(<x><y/></x>)[(((<x><y/></x>)[<y><z/></y>]).@foo)]: if(function(id) { return id }) ;/*for..in*/for(let __proto__ in [1,,]) ([,]);break; M:do {export *; } while((*::*) && 0);(<><x><y/></x></>);break; default: break; L:if(<x/>) let prop, x::__noSuchMethod__; else {yield; }break; case this: L: {export *;(<><x><y/></x></>); }break; break;  }");
tryItOut("if(3.141592653589793) { if ((uneval( /* Comment */<x/>))) {if(*::*.throw(<x/>)) {<x><y/></x>;yield true; }let __parent__; }\t else {__parent__ = (-1).__defineGetter__(\"__proto__\", <x/>), __count__ = __count__.__noSuchMethod__ setter= true }}");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(constructor = (prop = __noSuchMethod__ ? ({a1:1}) : new <><x><y/></x></> for (__parent__ in __count__ = *)) in @foo\n) ;");
tryItOut("yield <x><y/></x> << window;");
tryItOut("/*infloop*/L:for(let __iterator__; <y><z/></y>; *) {let constructor, __count__; }\nswitch([<x><y/></x> for (__proto__ in *::*)]) { case 1e81.__lookupSetter__(\"prototype\"): continue ; }");
tryItOut("/*infloop*/while(yield this){;continue M; }");
tryItOut("L:if((this.__defineGetter__(\"prop\", try { gc() } catch(yield) { throw  '' ; } ))(new (<x/>)(.2, <><x><y/></x></>)).isPrototypeOf((({prop: [1,,]})) >>=  /x/g )) {export *;return  /x/ ; } else  if ( '' ) {Math.sinthrow true; } else  \"\" ;");
tryItOut("/*infloop*/for(var prop; (__noSuchMethod__ = undefined) <<= (function  __count__ (__iterator__, __noSuchMethod__)033).call(@foo, )\n; *) return;");
tryItOut("/*infloop*/for(const prototype; ?.valueOf(\"number\"); <x/>.@*) {break ; }");
tryItOut("if(\n /x/ ) { if ((prop.__iterator__ = prop = [15,16,17,18].some(function(q) { return q; }, @foo))) {export *;/*for..in*/L:for(var __iterator__ = x::__parent__ !== <><x><y/></x></> in constructor) {yield; } } else var prop;}");
tryItOut("return;");
tryItOut("with({}) for(let y in [5,6,7,8]) __noSuchMethod__.__parent__ = __noSuchMethod__;if(gc().valueOf(\"number\")) \twindow; else  if (@foo.__lookupGetter__(\"__noSuchMethod__\")) constructor = <y><z/></y>;");
tryItOut("/*infloop*/for(const __iterator__; (p={}, (p.z = prototype = <x/>)()); false) try { return @foo; } catch(__noSuchMethod__ if ((p={}, (p.z = false)()))) { \r<y><z/></y>; } catch(constructor\f) { var __parent__ = 0/0; } ");
tryItOut("L: { \"\" ;if(false)  else  if (typeof eval(\"0x99\", null)) if((this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"return <x><y/></x>;\"))))) { if (__count__) {(Math.sin).callyield; } else export __parent__;}  }");
tryItOut("if(([1,2,3,4].slice())) /*for..in*/for(var [__proto__, __proto__] = <x><y/></x> in <x/>) let function::__parent__; else  if ([11,12,13,14].filter) {yield; } else /*infloop*/while( /x/ )(@foo);");
tryItOut("L:if(<x><y/></x>) {return window; } else  if ( /x/ ) {return window; } else {prop = prototype; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for([__count__, prop] = ({__noSuchMethod__: false}) /= __parent__ = <x><y/></x> in this.__defineSetter__(\"__count__\", ((this ? constructor : 0.1)()))) {if(__noSuchMethod__) {<x><y/></x>;; } else {Math.sin }/*infloop*/for(var __proto__ = this & <><x><y/></x></>; __noSuchMethod__ =  /x/g ; this.*) var prop, __parent__\n");
tryItOut("/*for..in*/M:for(let <x><y/></x> = [] in <x/>) return;");
tryItOut("while((__noSuchMethod__ =  /x/ ) && 0);");
tryItOut("with((!window)){__noSuchMethod__ = __parent__(.2);if(typeof  '' ) {[] } else  if (arguments) {export __parent__;; } }");
tryItOut("try { try { ; } catch(__parent__ if (function(){let prop = constructor;})()) { {} }  } catch(__iterator__ if (function (prototype, __iterator__)true)(<y><z/></y>.__defineGetter__(\"__parent__\", /a/gi))) { let(__count__ = function(id) { return id }) ((function(){export *;})()); } catch(prototype) { yield this; } finally { yield __proto__.__count__; } ");
tryItOut("(function ([y]) { })(), __parent__");
tryItOut("with((*\n).__iterator__ =  \"\" )return <x><y/></x>;\nvar prototype = [z1];\n");
tryItOut("return;");
tryItOut("if(<x><y/></x>.isPrototypeOf(({a2:z2}))) {let prop = this, constructor;export *; } else  if (.2 .@*:: *) const __proto__ = true, __iterator__ = 0/0; else {constructor, constructor = __count__;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x><y/></x> in 1.3) {((-1)); }");
tryItOut(" <bbb xmlns:ccc=\"Date((null for each (__parent__ in #1#))).__lookupGetter__(\"__count__\")\"><ccc:eee></ccc:eee></bbb>(*::*) {  }");
tryItOut("let function  __iterator__ (prop)null\n");
tryItOut("L:switch(*) { default: <x/>;case <x><y/></x>: break; break;  }");
tryItOut("L: {return; }");
tryItOut("/*for..in*/for(constructor in arguments) <x/>;");
tryItOut("/*for..in*/for(prop = (*.watch(\"__iterator__\", (3/0).apply)) in @foo) {let __proto__, __count__ = <y><z/></y>; }");
tryItOut("if(constructor = __noSuchMethod__ = 1e+81) {export *;yield <><x><y/></x></>; } else  if (__iterator__.__iterator__ getter= (\ffunction  __noSuchMethod__ (prototype, __noSuchMethod__) { return @foo } ).call) {<><x><y/></x></>; }");
tryItOut("while((this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) && 0)var constructor = [[]];");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: __noSuchMethod__, prop: ({ __parent__: __noSuchMethod__, constructor: __noSuchMethod__ }) }) = (eval(\"yield <x/>;\", Array())); (*::*)(null); (eval(\"false\", *))) let __noSuchMethod__ = <y><z/></y>\nL: {const prop, prop = <><x><y/></x></>;/*infloop*/for(var __count__; <><x><y/></x></>;  \"\" ) {} }");
tryItOut("{break M; }");
tryItOut("switch((__count__.__count__ = <x><y/></x>).eval(((#0=+window)()))) { case #0=false - [,,z1]: break; default: with({__iterator__: [15,16,17,18].some(gc, __count__)})if(false.valueOf(\"number\")) ; else {}break; /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in 0/0.isPrototypeOf(<x><y/></\tx>)) {/*infloop*/L:for(; __proto__ if (<y><z/></y>).propertyIsEnumerable(\"prototype\"); <><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")) {prototype, default: ;<><x><y/></x></> } }case 5:  }");
tryItOut("if(prototype.__proto__ = ({a2:z2})) {continue M;return this; } else {throw __noSuchMethod__; }");
tryItOut("L: {/*for..in*/L:for(const (__count__) in ((({}).hasOwnProperty)(<y><z/></y>)))gc() }");
tryItOut("L: undefined\n");
tryItOut("/*for..in*/for(let __iterator__ in ((<><xxx {__iterator__}={__proto__ = *} /></>)((({prop: <><x><y/></x></>.watch(\"__iterator__\", ({}).hasOwnProperty)})).__lookupSetter__(\"constructor\")))){([1]);let constructor = undefined, prototype; }");
tryItOut("for(let y in []);");
tryItOut("L:switch( /x/ .*) { case 2:  }");
tryItOut("while((<bbb xmlns:ccc=\"Date((<x><y/></x>.__lookupGetter__(\"prototype\")), null)\"><ccc:eee></ccc:eee></bbb>) && 0)/*for..in*/for(var __count__ = this.zzz.zzz in <><x><y/></x></>.hasOwnProperty(\"prototype\")) {/*infloop*/do let __parent__, prototype = <y><z/></y>; while(true);{throw <x><y/></x>;; } }");
tryItOut("/*infloop*/for(const prototype; new @foo(); (uneval(({__parent__: __count__})))) __parent__ const __proto__;");
tryItOut("gc()");
tryItOut("throw StopIteration;");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) var __count__ = {return <x><y/></x>; }, __count__;");
tryItOut("if(__noSuchMethod__) { if (prototype) (this); else prop}");
tryItOut("L:with({__iterator__: undefined})yield;");
tryItOut("let (constructor) { gc() }");
tryItOut("M:if(([1.3].map(eval))) yield <x><y/></x>; else  if ((@foo)[this]) {let __proto__, constructor = window; } else (this);");
tryItOut("/*for..in*/for(let [, , ({ __proto__: ({ __iterator__: <x><y/><\t/x>, prototype: __parent__ }) }), , __count__] in ((new Function(\"throw <y><z/></y>; const __parent__;\")))) with(__iterator__.__noSuchMethod__){function(y) { yield y; {}; yield y; } }");
tryItOut("{L:if((*::* for each (__count__ in Math.sin))) { if (((-0 for (__proto__ in 1e-81)))) yield; else throw <><x><y/></x></>;}if( \"\" ) { if ([1]) {throw #1=[#1#]; }} else break M\n }");
tryItOut("if(this.__defineSetter__(\"__proto__\",  '' )) const __proto__; else  if (__parent__ = __parent__) {gc(){} }");
tryItOut("L: var prop;");
tryItOut("let(__noSuchMethod__) { throw  '' ;");
tryItOut("yield (prop.prototype);");
tryItOut("for(let y in []);");
tryItOut("L:if(window = *) { if (<><x><y/></x></>.(([<y><z/></y>/*\n*/ for (prototype in setter)]))) (true);} else {export constructor; }");
tryItOut("with(false >>= (.2[@foo]).@*)break ");
tryItOut("/*infloop*/for(-3/0; @foo; undefined) return;");
tryItOut("__iterator__");
tryItOut("/*for..in*/for(let [prop, __count__] = null in constructor) {export constructor; }");
tryItOut("M:if(this.__defineSetter__(\"__count__\", function  __proto__ (prototype) { export *; } ) && (null.isPrototypeOf(({a2:z2})))) (@foo).watch else {gc()<x><y/></x>; }");
tryItOut("let(prop = <><xxx>{constructor}</xxx></>) ((function(){throw StopIteration;})());");
tryItOut("function(q) { return q; }\n");
tryItOut("[z1]; const __iterator__;");
tryItOut("{throw  \"\" ;__parent__ = this }");
tryItOut("{continue M\nif(#1=constructor) { if (#1#) false; else constructor = 3, prototype = __count__;} }");
tryItOut("if(#1=[#1#]) /*infloop*/for(*::*; <x><y/></x>; window) {__proto__; }");
tryItOut("{var __proto__;let __iterator__, __parent__; }");
tryItOut("break \nwith(()){033; }");
tryItOut("__proto__ setter: Math.pow");
tryItOut("with((this)[<x/>].constructor){}");
tryItOut("return (String(void , new Number(<x><y/></x>))); const constructor;");
tryItOut("switch(new Exception()) { case (__count__ = null, constructor): while((new __iterator__ = prototype(1e-81, this)) && 0)var __noSuchMethod__ = <x/>; }\t");
tryItOut("/*for..in*/for(__proto__ in ((((window).watch).apply)(<><xxx>{constructor}</xxx></>)))let __iterator__;");
tryItOut("/*for..in*/for(__iterator__ in (new prop.(<><x><y/></x></>))) if((-0)) (<><x><y/></x></>); else  if (<><x><y\t/></x></>) {return; }");
tryItOut("/*for..in*/for(var __count__(__count__) in ((function (prototype) { return false } )(Date(this, <y><z/></y>)))){return 4.; }\nyield;\n");
tryItOut("L: {/*infloop*/do ; while(<x/>);return; }");
tryItOut("export __count__;");
tryItOut("const __proto__ = <x><y/></x>\ngc()");
tryItOut("/*infloop*/for(#3={a:#3#}; __noSuchMethod__; try { ; } catch(__proto__ if (function(){this})()) { export *; } catch(__proto__) { let __iterator__, __count__; } ) ;");
tryItOut("/*infloop*/for(let constructor; 033; *::*) {yield; }");
tryItOut("L: __parent__;");
tryItOut("/*infloop*/for(let [({ prop: ({ <x><y/></x>: ({ __iterator__: [__noSuchMethod__, __iterator__, ], __iterator__: \t({ prop: constructor\t, __noSuchMethod__\t: prop }) }) }) }), [(\f{ prop: [({ prop: constructor }), __noSuchMethod__, ({ __parent__: prototype, \t__noSuchMethod__: __noSuchMethod__ })], constructor: ({ __noSuchMethod__: ({ constructor: prototype, __count__: prototype }) }) }), ({ x::prop: __iterator__ }), , ], , ({ constructor: [] }), __noSuchMethod__] = constructor.prop getter= function  prototype ()-0; prototype; __noSuchMethod__ = (delete [1].__lookupGetter__(\"constructor\")[__noSuchMethod__(1e-81)%=(function(q) { return q; }).call(<><x><y/></x></>, <x><y/></x>, <y><z/></y>)])) M:if(new false(arguments, window)) let __iterator__; else  if (new <x><y/></x>(null, #1#)) {gc() } else return;");
tryItOut("/*infloop*/M:for(var [__iterator__, constructor, __iterator__, __iterator__] = function ([y]) { }; <><x><y/></x></>; <x/>++) continue L;");
tryItOut("M:switch({}) { case *::*: return;throw false; }\nvar __proto__;\n");
tryItOut("return yield let (__parent__ = this) window ^= __proto__.__noSuchMethod__ =  /x/ .eval(function ([y]) { } ? @foo : undefined);");
tryItOut("__noSuchMethod__ = *;continue L;");
tryItOut("if(<x><y/></x>) return <y><z/></y>; else  if ((function ([y]) { })()) {continue M;var __noSuchMethod__; } else {export prop; }");
tryItOut("yield @foo ? this : true; const __parent__;");
tryItOut("/*infloop*/do  \"\"  while(*);");
tryItOut("L:if([<x><y/></x>].\fsort(eval)) { if (\n__count__) const __count__; else /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <y><z/></y>) gc()}");
tryItOut("/*infloop*/while(3.141592653589793){return;yield <><x><y/></x></>; }\n/*infloop*/for(#1=[#1#];  '' ; 033) {[1,2,3,4].mapbreak ; }\n");
tryItOut("let (__iterator__, constructor) { gc() }");
tryItOut("/*infloop*/while(\f(@foo | true).__defineGetter__(\"__count__\", (1 for (x in []))))<bbb xmlns=\"(({__proto__ getter: Function }))\"> </bbb><ccc:ddd>yyy</ccc:ddd>");
tryItOut("while(((<x><y/></x>.(<><x><y/></x></>))) && 0){var constructor = __proto__; }");
tryItOut("/*infloop*/for((__count__) = 'fafafa'.replace(/a/g, [1,2,3,4].map); ((null).__defineSetter__)((Math.sin)(<x/>).valueOf(\"number\"), this.__defineGetter__(\"__noSuchMethod__\", eval)); ( \"\" (1.3)).prototype) /*for..in*///h\nfor(var [__proto__, function::__noSuchMethod__] = 1e-81 in *::*) {evalvar __proto__, prototype = null; }");
tryItOut("switch( /* Comment */'fafafa'.replace(/a/g, function () { yield * } )) { default: prototype = ({a1:1}), __iterator__;break; case [ \"\" ].sort(-3/0): for(let y in [5,6,7,8]) case 7: break; let __noSuchMethod__, prototype;break; break; case 9: break; /*for..in*/L:for(const [prop, __noSuchMethod__] = 4. in <y><z/></y>) yield;break;  }");
tryItOut("let __parent__;");
tryItOut("with({prop: (.(1e+81))})throw  \"\" ;");
tryItOut("if(gc()) {[1,2,3,4].map }");
tryItOut("try { throw __proto__; } catch(function::(yield 3.141592653589793.__lookupSetter__(\"__iterator__\")) if (function(){return #2=[(let (__noSuchMethod__ = __noSuchMethod__\t) <y><z/></y>)];})()) { {} } catch(__proto__) { throw StopIteration; } ");
tryItOut("{return <><x><y/></x></>;gc()\ngc()\n }");
tryItOut("/*infloop*/L:for(({ __noSuchMethod__: [[], ], __count__: ({ __proto__: function::__parent__ }) }) = (~window /= <><x><y/></x></> @  \"\" ).@*; (<><x><y/></x></>++ + 'fafafa'.replace(/a/g, function () { yield window } ).watch(\"__parent__\", function (prototype) { return ); (true).call( \"\" , {}, <y><z/></y>)) if((__iterator__)) (<x><y/></x>); else  if (<y><z/></y>.throw(gc())) const prototype, __iterator__ = 0x99;");
tryItOut("/*infloop*/M:do {function  __noSuchMethod__ () { yield <><x><y/\f></x>(/</> }  } while(#0=({__parent__: (true <= window)}));");
tryItOut("yield  /x/ ;");
tryItOut("/*infloop*/for(var __iterator__; true; #1=[#1#]) const __proto__ = undefined;");
tryItOut("const __iterator__ = <x><y/></x>, prop = *; const __noSuchMethod__;");
tryItOut("/*infloop*/for(({ __iterator__: __noSuchMethod__, __proto__: constructor }) = prototype = __iterator__; (3.__defineSetter__(\"prop\", 1.2e3)); __parent__ =  /x/g ) {<x><y/><//*\n*/x>; }");
tryItOut("prototype = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in window) var __noSuchMethod__, prototype;");
tryItOut("M:with(new [[]]()){const __count__ = window; }");
tryItOut("\fwhile((this.__proto__) && 0)L: __iterator__;");
tryItOut("var __iterator__ = __parent__, __parent__ = this;\nlet (prop = [z1,,], prop) { <x><y/></x>; }\n");
tryItOut("/*infloop*/for(__parent__ = new export *;(__iterator__\t); ((this.__defineGetter__(\"__iterator__\", [1,2,3,4].slice)).__parent__); (@foo .@*:: true)[*::*.isPrototypeOf(@foo)]\n) {/*for..in*/for(__noSuchMethod__ in *) {return -0; }/*for..in*/L:for(var prop = <{__iterator__}>yyy<\t/{__iterator__}> in prop = __iterator__) {(<><x><y/></x></>);/*for..in*/for(\tvar __noSuchMethod__ in <x/>) [1,2,3,4].map } }");
tryItOut("with({constructor: (case 9: .prop)}){/*infloop*/do ; while((true.eval(null))); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var [, ] in (this.__defineGetter__(\"prop\", function (__iterator__) { throw *; } ))) {\fif(void \t((new Function(\"let __noSuchMethod__ = __iterator__;\")))(__proto__)) { if (__iterator__ = __proto__) {export __proto__; } else } }");
tryItOut("{var __proto__, prop; }");
