tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const <y><z/></y> in <x><y/></x>) {yield __parent__;; }");
tryItOut("/*for..in*/for(var __parent__ in try { export *; } finally { __iterator__ = constructor; } ) 0.prop");
tryItOut("{export *; }\n");
tryItOut("with({__iterator__: <x/>})with(this.valueOf(\"number\")){var __count__, __iterator__ = prototype;yield; }");
tryItOut("/*infloop*/while((new function (__parent__, prototype) { yield [z1] } ( /x/ )).prototype = (new window(1.3)).__defineGetter__(\"__parent__\", function::function::__iterator__).yoyo(())){__parent__, __iterator__;yield [[1]].valueOf(\"number\"); }");
tryItOut("\fyield 0/0.hasOwnProperty(\"prototype\");");
tryItOut("switch(__iterator__.(+<x><y/></x>)) { default: return;break;  }");
tryItOut("yield;export __proto__;");
tryItOut("/*infloop*/for(this; 1e-81; <x><y/></x>) var __count__ = <y><z/></y>, __proto__ = window;");
tryItOut("/*for..in*/M:for([__noSuchMethod__, , prototype, , ] in ((function(q) { return q; })(this.zzz.zzz))){if(<x><y/></x>) function ([y]) { }; else  if (*) var __count__, __parent__ = 0; else yield <y><z/></y>; }");
tryItOut("do let __noSuchMethod__; while((()) && 0);");
tryItOut("L:with({prototype: new String(window == __iterator__)})continue ;");
tryItOut("/*for..in*/for(var new ( '' )(#1#).__noSuchMethod__ in [15,16,17,18].map(function(q) { return q; },  /x/g .hasOwnProperty())) \n({a1:1});");
tryItOut("let (prop =  '' , __iterator__) { /*for..in*/for(__proto__ in ((gc)(<x><y/></x>)))gc() }");
tryItOut("/*for..in*/for(const __proto__ = (*::* ? this : 1e-81) in <x/>) {throw <x/>; } const __iterator__;");
tryItOut("do {export constructor; } while((function ([y]) { }) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = [15,16,17,18]\n.filter((__iterator__), (\n[,,])) in null) if(__parent__ = __noSuchMethod__) { if (constructor = __count__) (1.3); else {[,]; }}");
tryItOut("{}");
tryItOut("with(\f{prop: window.__lookupGetter__(\"prop\")}){export *; }");
tryItOut("/*infloop*/for(var prototype; __iterator__; (__parent__ = (prototype.( /x/ )))++) {function  __count__ (__iterator__, __proto__) { *::*; } \n/*for..in*/L:for(let __noSuchMethod__ = ([])[true] in  '' )  }");
tryItOut("throw -0;export __noSuchMethod__;");
tryItOut("/*infloop*/for(__parent__; ; ({ __iterator__: __proto__, constructor: prop }) = <><x><y/></x></> - <><x><y/></x></>.@*) L:if(033.unwatch(\"prop\")) {export *;export *; }");
tryItOut("do {const prop, __noSuchMethod__ = false; } while((*++) && 0);");
tryItOut("for(let y in [5,6,7,8]) continue M;");
tryItOut("if(prop <= <x><y/></x>) return; else  if (([(null !== <x/>)])) throw ({});");
tryItOut("L: <><x><y/></x></>;");
tryItOut("/*infloop*/for((([<><x><y/></x></>].filter(({}).hasOwnProperty)) ? prop%=window : undefined = <><x><y/></x></>); [15,16,17,18].some([1,2,3,4].map,  /x/g ); [15,16,17,18].sort(function(y) { yield y; export __count__;; yield y; }, arguments)) if(<><x><y/></x></>) yield (-0); else  if ((undefined , [1,,])) var __iterator__, __iterator__;\n");
tryItOut("if(<y><z/></y>) { if ((-1)) __proto__ = prop; else  /x/ }");
tryItOut("return;");
tryItOut("/*for..in*/\tfor([prop, __count__] = <x><y/></x> in <><x><y/></x></>) {{}gc() }");
tryItOut("L: {var __count__ =  \"\" , __proto__; }");
tryItOut("[1,2,3,4].slicethrow <><x><y/></x></>;");
tryItOut("/*for..in*/M:for(const [__parent__, __proto__] = <x><y/></x>.(__parent__ getter: function(q) { return q; }) in <x><y/></x>) { }");
tryItOut("switch(__iterator__.prototype) { case 6: break;  }");
tryItOut("/*infloop*/while((constructor, __count__ = prop.hasOwnProperty(\"prop\")))<x><y/></x> = __iterator__;");
tryItOut("__noSuchMethod__");
tryItOut("if(function (__proto__) { return <x/> } ()) {(1 for (x in []))yield; } else  if (yield 1e4) export __proto__;");
tryItOut("if(1.2e3 | false) { if (((__parent__)[*::*])) undefined else {<x/>; }}\n");
tryItOut("/*for..in*/for(__proto__ in ((new String(new [3]()))(((((true).apply)(*::*).eval(yield)).__lookupSetter__(\"__noSuchMethod__\").hasOwnProperty(\"constructor\"))))){/*for..in*/for(let __parent__ in (('haha'.split)((-0)))){/*infloop*/do {return; } while(constructor);yield [1]; } }");
tryItOut("var delete = -3/0;");
tryItOut("M:while(((this.zzz.zzz)) && 0)(<x><y/></x>);");
tryItOut("/*infloop*/do var __iterator__, constructor = ({}); while(({a1:1}));");
tryItOut("while((<x><y/></x>\n) && 0)");
tryItOut("{export prototype;export prototype; }");
tryItOut("M:switch(__proto__.(*::*.watch(\"__parent__\", Function))) { default: break; case 1: case 6:  }");
tryItOut("default: break; break; ");
tryItOut("L:if( ''  -= <y><z/></y>)  else  if (__proto__) throw 3/0; else {}");
tryItOut("/*infloop*/while(((let (constructor = <y><z/></y>) 033) for each (__noSuchMethod__ in <x/>))){/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in <>constructor</>) {;prop }/*for..in*/for(var constructor in 3/0) {{} } }");
tryItOut("with({__noSuchMethod__: (gc)()}){/*for..in*/for(var [prototype, __parent__] =  \"\"  in <y><z/></y>) {}var  = window, __parent__ = function ([y]) { }; }");
tryItOut("/*infloop*/for(<x><y/></x>;  \"\" ; <><x><y/></x></>) throw  /x/ ;");
tryItOut("/*infloop*/for((<x/>\n++); @foo.propertyIsEnumerable(\"constructor\"); __noSuchMethod__%=({a1:1}) if (<y><z/></y>) === (eval(\"return;\", this))) {export *;__proto__; }");
tryItOut("{*; }");
tryItOut("if(Exception(*, <x/>)) { if ([z1,,].__count__\n = function(y) { yield y; break M;; yield y; }()) {}gc()} else {export *;yield []; }");
tryItOut("/*infloop*/for(let ({ prototype: [, __parent__, \t, constructor, __proto__] }) = (this for each (__parent__ in  /x/g )); __parent__\n; new (Function)((function ([y]) { })())) with(<x><y/></x>)break L;");
tryItOut("[1,2,3,4].slice");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/M:while(var continue ;){prop = <x><y/></x>;; }");
tryItOut("M:if(undefined.__parent__ = (function ([y]) { }.__lookupGetter__(\"__proto__\") instanceof prototype)[__noSuchMethod__ = <x><y/></x>]) { if (__proto__ = this | (this.zzz.zzz)) /*for..in*/for(var __parent__ in __proto__) {yield <><x><y/></x></>;export *; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(var  /x/ ['x::prototype'] in false) \t__count__;var __count__ = <><x><y/></x></>; }}");
tryItOut("yield __noSuchMethod__, __noSuchMethod__;/*infloop*/for(__noSuchMethod__ = ; [[]];  '' ) gc()");
tryItOut("/*for..in*/for(var [constructor, prop] = ([] = ({ __count__: __count__, __proto__: __count__ })) in (((uneval(window))) ^ __parent__ = #1=[#1#].isPrototypeOf(false)).isPrototypeOf((+<><x><y/></x></>).eval((p={}, (p.z = ({a1:1}))())))) if(<><x><y/></x></>) {throw  /x/g ; } else  if (this) {yield  /x/ ;null; } else yield  '' ;");
tryItOut("try { for(let y in []); } catch(prototype if (function(){with({}) { [1,2,3,4].slice } })()) { [1,2,3,4].slice } catch(x::__count__ if (function(){for(let y in []);})()) { throw StopIteration; } catch(prop if ()) { yield 0x99.eval(__proto__); } catch(__parent__ if (function(){<x><y/></x>;})()) { for(let y in [5,6,7,8]) prototype = <><x><y/></x></>, setter; } catch(__noSuchMethod__ if ([15,16,17,18].some(function () { return <><x><y/></x></> } , @foo.__defineGetter__(\"__count__\", function  constructor () { return window } )))) { throw StopIteration; } catch(__noSuchMethod__) { return  /x/ .__defineGetter__(\"prototype\", (Math.sin).call); } ");
tryItOut("with({prop: new (<x/>.hasOwnProperty(\"constructor\"))(eval(\"yield constructor;\", __iterator__))}){/*for..in*/for(var function::__noSuchMethod__ in  '' ) __iterator__ getter: Functioncontinue ; }");
tryItOut("if(<x/>) {((-1));*::*; } else {var set, __noSuchMethod__ = <x/>;break ; }");
tryItOut("");
tryItOut("let (({ 0x99: [], __count__: [] })) { return window; }");
tryItOut("L:do {(new Function(\"var __count__ = -3/0, __count__ = 0/0;\"))return; } while((false) && 0);");
tryItOut("\tif(new Object( \"\" )) {export __parent__;throw __proto__; }");
tryItOut("if(__iterator__.__iterator__) {prototype: function ([y]) { }export *; } else  if (\t(true.watch(\"__proto__\", ({}).__lookupGetter__))) const __iterator__; else {const __proto__;let prototype, yield = window; }");
tryItOut("{}");
tryItOut("/*infloop*/for(null; <><x><y/></x></> >>  '' ; <x><y/></x>.hasOwnProperty(\"prototype\")) {\nbreak ;\n }");
tryItOut("let ([__iterator__, , prop, ], __proto__ = ({a2:z2})) { {constructor = {}, prop = this; } }");
tryItOut("switch((p={}, (p.z = #1=[#1#])())) { default: window;yield;break; case 1:  }");
tryItOut("if(this) {{} }");
tryItOut("return *::*");
tryItOut("/*infloop*/for(var __iterator__ = yield; false;  /* Comment */<y><z/></y>) {prototype = __parent__; }");
tryItOut("for(let y in []); const prop;");
tryItOut("do {} while(((prototype |= <x><y/></x>)) && 0)\n#3={a:#3#}");
tryItOut("/*infloop*/do {export *; } while(<x><y/></x>);");
tryItOut("do {{} } while(('fafafa'.replace(/a/g, #3={a:#3#})) && 0);");
tryItOut("throw StopIteration;");
tryItOut("if(__iterator__.prop setter= ((1 for (x in []))).apply.yoyo(@foo .. __count__)) { if ( /x/g ) break ;} else while((true) && 0){return;(<><x><y/></x></>); }");
tryItOut("L:if(033(<x><y/></x>)) {yield <><x><y/></x></>;{} } else  if ((-0)) export *; else {export *;return __parent__; }");
tryItOut("let (__proto__, prototype) { throw <x><y/></x>; }\nconstructor = __noSuchMethod__, prop\nyield -0;");
tryItOut("gc()");
tryItOut("return this");
tryItOut("__noSuchMethod__");
tryItOut("if(Math.sin()) {export prototype; } else {break ; }");
tryItOut("let __iterator__ = [,,z1], __parent__;");
tryItOut("/*for..in*/for(let prop in ((Math.pow)(eval(\"export *;\", true)))){throw null;const __proto__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/do {gc() } while(delete);");
tryItOut("M:if(__noSuchMethod__ = window.propertyIsEnumerable(\"\") -= this.__defineSetter__(\"__iterator__\", (1 for (x in [])))) {break ; } else /*infloop*/while(<y><z/></y>.valueOf(\"number\"))__noSuchMethod__");
tryItOut("let (({ prop: __parent__, __count__:  })) { /*infloop*/for(let __noSuchMethod__; undefined; *::*) __noSuchMethod__ = this; }");
tryItOut("/*infloop*/L:while(__count__){gc() }");
tryItOut("yield;");
tryItOut("/*infloop*/L:do ({}).__lookupGetter__ while((__count__ = <y><z/></y>));return;");
tryItOut("with((this.__defineSetter__(\"prop\", function () { break L; } ))){/*infloop*/while(1e-81){export prop;gc() } }");
tryItOut("let(break ;) { throw  '' ;");
tryItOut("with(<><x><y/></x></>){let __proto__;export *; }");
tryItOut("var __count__ = 4.;");
tryItOut("{M:with(new (-*)(((p={}, (p.z = false)())))){yield __parent__;[1,2,3,4].map }if(__noSuchMethod__) {} else let }");
tryItOut("/*for..in*/M:for(let __parent__ in (((gc).apply)( /x/g ))){window;yield  \"\" ; }");
tryItOut("with({}) { let __proto__; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in false || yield <x><y/></x>) {{}( /x/ ); }");
tryItOut("/*for..in*/for(const constructor = ( /x/g ).__lookupSetter__(\"__parent__\") in ((*::*)( '' ))) with({}) ");
tryItOut("if([z1] ^= false%=eval(\"<><x><y/></x></>\", new (__proto__)())) { if ([,,z1]) yield window; else __noSuchMethod__ = prop;}");
tryItOut("/*for..in*/for(__proto__ in [1,2,3,4].map()) {return undefined;break ; }\nreturn;");
tryItOut("L:while((((1 for (x in []))())) && 0)/*infloop*/do export *; while(null <<= 0.1);");
tryItOut("/*for..in*/\nfor(let prop = new (__parent__ = null)() in new Error(false, <><x><y/></x></>)) {with({}) { var __parent__ = (-1); } /*infloop*/for(__count__ = delete constructor; new Number(function ([y]) { }, 0x99); (uneval(*::* >>> (-0)))) export *; }");
tryItOut("L:while((({ __iterator__: case 9: break; {}break; (<><x><y/></x></>);break; <x><y/></x>break;  }) = eval(\"continue ;\",  /x/g )) && 0)M:if(eval(\"export constructor;\", -1)) { if (((<x><y/></x>.__lookupGetter__(\"constructor\") != (@foo)[false]))[(prop)]) {; } else {(@foo);yield; }}");
tryItOut(";");
tryItOut("let __iterator__, __parent__;\n__noSuchMethod__, __iterator__;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__count__) in 0.constructor) {;gc() }");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/for([prototype, __count__] =  /x/  in @foo && 1.3.hasOwnProperty(\"prop\")) {throw prototype;L:if({.(( /x/g .watch(\"constructor\", function  __proto__ () { ( '' ); } )))) {__proto__;{} } else  if (__count__\n % (uneval( /x/g ))) {throw <x/>; } else gc() }");
tryItOut("with({}) { *; } ");
tryItOut("\n;\n");
tryItOut("");
tryItOut("with(({a2:z2})\f){yield __noSuchMethod__; }");
tryItOut("let (({ __parent__: prototype, constructor: [, __iterator__, __parent__, ({ each: [, , , ], prop: ({ prototype: __iterator__, __noSuchMethod__: __parent__ }) }), ] })) { if(([, , __parent__, __parent__/] = prop).propertyIsEnumerable(\"prop\")) { if () __iterator__ = undefined, undefined = <x><y/></x>; else {export *;/*for..in*/for(let __noSuchMethod__ in arguments)  }} }");
tryItOut("M:with({__proto__: }){if(<><x><y/></x></> |= (function ([y]) { })()) {return; } }");
tryItOut("/*infloop*/for(<><x><y/></x></>;  '' ; __proto__) {}");
tryItOut("L: let (__proto__ = <x><y/></x>.__iterator__) { /*for..in*/for(const function  __count__ () { yield true }  in ((eval)((function  __proto__ () { yield <x><y/></x> } ).call(var __iterator__ =  /x/g ;.eval(<x><y/></x>), (prototype|=<y><z/></y>))))){if(window) {__iterator__ = <x><y/></x>, __noSuchMethod__ = <y><z/></y>; } else  if (<y><z/></y>) {(__count__); } else gc()<x><y/></x> } }");
tryItOut("/*infloop*/M:for(__count__; <x><y/></x>.(#1#); <y><z/></y>.watch(\"prototype\",  /x/ )) ;");
tryItOut("return (<x><y/></x>.unwatch(\"prototype\"));");
tryItOut("/*infloop*/for(constructor; {let constructor, __noSuchMethod__; }; <x><y/></x>) {} const __noSuchMethod__;");
tryItOut("/*infloop*/L:for(let (\t{ __count__: ({ __noSuchMethod__: [({ __iterator__: delete })] }), constructor: ({ prop: ({ __noSuchMethod__: ({ constructor: __proto__, __count__: prototype }) }), __noSuchMethod__: __parent__ }) }) = [__noSuchMethod__.__count__ getter= arguments,  /x/ ].sort(function(q) { return q; }); (prototype.__proto__.hasOwnProperty(\"__proto__\").eval(new <><x><y/></x></>(__count__))); this.zzz.zzz) let prototype;");
tryItOut("/*infloop*/while(<x><y/></x> += (function ([y]) { })())return  '' ;");
tryItOut("\tM:if(yield function (__proto__) {  } ) export prop; else  if ('fafafa'.replace(/a/g, )) return;");
tryItOut("if((prop) <= (({constructor: [<y><z/></y> for each (new 1e4(__proto__) in *::*)], __proto__ getter: gc }).__lookupSetter__(\"__proto__\"))) {(<><x><y/></x></>); }");
tryItOut("while((x::__count__.((([[1]])()))) && 0){const __proto__, prototype\ngc() }");
tryItOut("constructor.__count__");
tryItOut("if(__iterator__ >> -3/0) yield window\nexport constructor;{}");
tryItOut("/*infloop*/for(let [(prototype|=<><x><y/></x></>)(set.__iterator__), ({ __proto__: __parent__, __iterator__: ({ prop: prototype }) })] = (__count__ = (function ([y]) { })() ? window[<><x><y/></x\t></>] : 'fafafa'.replace(/a/g, new Function)); __iterator__ = 3/0; ({ __proto__: __proto__ }) =  '' ) __noSuchMethod__;");
tryItOut("/*infloop*/M:do {/*infloop*/do let prototype; while(__proto__); } while(__noSuchMethod__ = ++false);");
tryItOut("M:while((<y><z/></y>) && 0){throw <y><z/></y>\f; }");
tryItOut("yield <x/>.watch(\"__iterator__\", (1 for (x in [])));");
tryItOut("{}\nif(<x/>) \n");
tryItOut("let (constructor = prop-=\tfalse, __noSuchMethod__ = <x/>) { /*infloop*/while(*){{}return; } }");
tryItOut("let (__proto__ = *::*, __iterator__) { yield <y><z/></y>; }");
tryItOut("/*infloop*/\tM:for(const ({ __parent__ = window: __parent__, __parent__: constructor }) = <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (this.__defineGetter__(\"__noSuchMethod__\", function  __iterator__ (__count__, __count__)constructor).isPrototypeOf((p={}, (p.z = [])()))); ((1 for (x in [])))) {gc()*::* }");
tryItOut("let (({ __parent__: [__iterator__, __count__, ({ __proto__: __noSuchMethod__, prototype: ({ __proto__: prototype, __count__, __noSuchMethod__: [, @foo, __count__, , ] }) }), __proto__] })) { /*infloop*/L:for(const __proto__ = __parent__; window;  /x/ ) {continue M; }\n }");
tryItOut("{}");
tryItOut("do {const __noSuchMethod__, constructor;yield; } while(( /* Comment */let (constructor = (-1), __iterator__) <><x><y/></x></>) && 0);");
tryItOut("yield #1#;yyy");
tryItOut("/*infloop*/M:do {let (__iterator__ = (<x><y/></x>)[<><x><y/></x></>], __count__: <{__noSuchMethod__}></{__noSuchMethod__}>) { export __count__\n }function () { return ((this)) }  } while((\n \"\"  = (uneval(4.))).watch(\"__noSuchMethod__\", ({}).hasOwnProperty));");
tryItOut("if(<><x><y/></x></>) { if ([z1,,]) {__count__ =  /x/ ; } else gc()}");
tryItOut("with(new new Function(constructor.__count__ getter= null, <x><y/></x>))switch(((-1) != this)) { case 8: export *;break;  }");
tryItOut("let(<{__iterator__}><!--yy--></{__iterator__}> = (#2=null)) ((function(){throw StopIteration;})());");
tryItOut("with({__parent__: (((   )(<><x><y/></x></>, undefined).@*)}){(<y><z/></y>); }");
tryItOut("let (({ x::prop: ({ __proto__: constructor, prop: constructor }), __parent__: ({ __count__: __iterator__ }) }) = [window for (function::__noSuchMethod__ in @foo)]) { if( /x/g ) { if (true) {function  __proto__ (__parent__, __noSuchMethod__) { return @foo }  }} else yield; }");
tryItOut("let (prototype = /*\n*/#2=[*::*]) { return; }");
tryItOut("for(let y in [5,6,7,8]) with({}) return;");
tryItOut("try { yield [[1]]; } catch(0) { var __count__ = this, __iterator__ = ({a2:z2}); } finally { ; } ");
tryItOut("Math.sin");
tryItOut("\nexport *;");
tryItOut("gc()");
tryItOut("/*infloop*/for(this.zzz.zzz;  \"\" ; (this.__defineSetter__(\"prop\", function(y) { yield y; export prototype;; yield y; }))) {__parent__ }");
tryItOut("switch((return)) { default: (this);break; throw this;break;  }");
tryItOut("return;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = window in true) {; }");
tryItOut("prop\nlet default: const constructor = <><x><y/></x></>, __iterator__ = window;break; break; case 8: case 8: ;break; case <><x><y/></x></>: return;case 9: case 3: yield <x><y/></x>;break; case default: break; : let true = __noSuchMethod__, __count__ = __parent__;yield 033;break; gc()break;  = <y><z/></y>;\n\nM:do let __noSuchMethod__; while((( /x/  +  /x/ )) && 0);\n");
tryItOut("{/*infloop*/for(let __count__; __iterator__ = window; new (gc)(*::*, <x/>)) __iterator__ }");
tryItOut("if(@foo) { if (this.zzz.zzz) (__parent__).call else {yield window; }}\n");
tryItOut("/*for..in*/for(prop = (({ get __noSuchMethod__ prototype (__count__) { yield ((<x><y/></x> for each (prototype in  \"\" ))) }  })) in ( /* Comment */(new (@foo)()))) for(let y in [5,6,7,8]) return;");
tryItOut("L: if(null) {gc()gc() } else  if (false) {(-1); } else ");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = undefined.yoyo(this), __noSuchMethod__) ((function(){yield typeof constructor;})());");
tryItOut("/*for..in*/L:for(let x::constructor in [11,12,13,14].map) {var prototype, __proto__;function () /x/  }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = (try { throw ({a1:1}); } catch(__iterator__) { yield  /x/ ; }  >> 1.2e3); ({__iterator__: true}); this.__defineSetter__(\"prototype\", <x><y/></x>)) yield this;");
tryItOut("continue ;let __parent__ = window, prop;");
tryItOut("if({}.isPrototypeOf(this)) { if ((false)) {throw <x><y/></x>;continue ; } else return  \"\" ;}");
tryItOut("if((window)(<x/>, [,,])) {const constructor, __noSuchMethod__ = false; } else  if (@foo.__lookupSetter__(\"constructor\")) prop");
tryItOut("while((__proto__.((1 for (x in [])))) && 0)with({__parent__: (({}).__lookupGetter__)(.2)}){if((#2=({prop: <x><y/></x>.throw(__proto__)}))) if(@foo) \n{export *; } }");
tryItOut("/*infloop*/while(prop.(1e4.@*)){return <x/>; }\nfor(let y in [5,6,7,8]) with({}) { __noSuchMethod__ = __proto__; } ");
tryItOut("throw this\n/*infloop*/while(3/0)export function::__iterator__;");
tryItOut("/*infloop*/");
tryItOut("/*for..in*/for(const __count__ in <x><y/></x>) { }");
tryItOut("/*for..in*/for(__iterator__ = <zzz>__count__ =  /x/g </zzz>.prototype = (eval(window, false) >= prop = <x><y/></x>.__lookupGetter__(\"__count__\")) in ) return\n");
tryItOut("function(y) { yield y; yield;; yield y; };");
tryItOut("var __proto__ = (-0);");
tryItOut("with({__count__: window}){__noSuchMethod__;\nreturn  /x/ ;\n }");
tryItOut("if(*::*) { if ((undefined - 0 if (<y><z/></y>))) throw *\n} else const __count__ = window;");
tryItOut("\nnull");
tryItOut("L: {throw <x><y/></x>;if(-0) export prototype; else  if ( /x/g ) {{} } else export __count__; }");
tryItOut("{export *;export __noSuchMethod__; }");
tryItOut("if(*) { if (__proto__ = function ([y]) { }) __proto__ else {return  /x/ ;const prototype, __parent__ = <><x><y/></x></>constructor(true); }}\n");
tryItOut("if(<x><y/></x>()) { if (eval(\"'fafafa'.replace(/a/g, __iterator__)\", prototype = let(constructor, __proto__ = <x/>) ((function(){gc()})());)) {/*infloop*/for(let __count__ = (({a2:z2}) |= <x><y/></x>); <y><z/></y>.hasOwnProperty(\"__iterator__\"); __iterator__) {throw #1=[#1#];1e4; }/*for..in*/for(let prototype in (((new Function).apply)(({prop setter: (__parent__).__defineSetter__, __noSuchMethod__ getter: {} }))))var __count__, prop; }} else {(<y><z/></y>); }");
tryItOut("{}\n/*infloop*/while(prototype){return;__parent__ }\n");
tryItOut("/*infloop*/for( /x/ ; (<><>yyy</></> ^ ((yield --()))); prop) gc()");
tryItOut("while((getter) && 0){/*infloop*/do {/*infloop*/do ; while( '' ); } while(this == <y><z/></y>);gc() }");
tryItOut("/*for..in*/for(let [__proto__, prototype] = false in  '' ) return;");
tryItOut("if(({ __proto__: ({ __parent__: __count__ }), __noSuchMethod__: __proto__ }) = [((<x><y/></x>).watch)()((yield [,,]), __count__ = *)]) {if(<x><y/></x>) { if (<y><z/></y>) yield; else export __proto__;}{gc()/*infloop*/for(__count__ = undefined; -1; 3.141592653589793) {gc() } } } else export __noSuchMethod__;");
tryItOut("M:while(((<bbb xmlns=\"Function(3.141592653589793,  /x/ ).propertyIsEnumerable(\"<y><z/></y> in -3/0\")\"><!--yy--></bbb>.(constructor != [undefined].filter(*::*)))) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in (<y><z/></y> if (__parent__))) gc()");
tryItOut("/*for..in*/M:for(var __parent__ in ((function(y) { yield y; if(window) 1e81;; yield y; })((({__noSuchMethod__: , constructor setter: function(q) { return q; } }))))){yield <x><y/></x>;(window); }");
tryItOut("for(let y in []);");
tryItOut(";");
tryItOut("/*infloop*/do /*infloop*/for(let __parent__; ((__count__ for (__count__ in @foo)) % this); this.__defineSetter__(\"__count__\", <x><y/></x>)) {__noSuchMethod__yield; } while((function ()prototype).call( { yield __iterator__.prototype } , 3.141592653589793 ^ <x><y/></x>));");
tryItOut("if(*) {} else  if (<><x><y/></x></>.hasOwnProperty(\"__parent__\")) {yield; }");
tryItOut("function  __count__ (prop, __iterator__)<x><y/></x>");
tryItOut("if('fafafa'.replace(/a/g, eval).__defineSetter__(\"__noSuchMethod__\", (<x/>).__defineSetter__).eval(({ __parent__: ({ case this.__defineSetter__(\"constructor\", (*).watch) >>> <x><y/></x> ^= true: ;, prototype: [prop, ] }) = __parent__ = __iterator__)) {/*infloop*/while((<><x><y/></x></> !== ({a1:1})))(-1)(1 for (x in [])) } else  if (((p={}, (p.z = undefined)()))) if((((-0).valueOf(\"number\") for (__count__ in <x><y/></x>) if (<x><y/></x>)))) { } else  if (window.isPrototypeOf(<x/>)) {/*for..in*/for(var prototype in ((function () { return  ''  } )(undefined)))return __count__; } else {gc } else ;\nyield;\n");
tryItOut("if(eval(\"return;\", (null.throw(3/0)))) {yield  /x/g ; } else  if (({prototype:  \"\"  })) if( '' ) {export prop; } else  if (__noSuchMethod__) {yield x::getter;const __proto__ = true; } else return; else {return true; }");
