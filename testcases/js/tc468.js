tryItOut("yield __proto__.isPrototypeOf(@foo).unwatch(\"__iterator__\");");
tryItOut("{/*for..in*/for(var prototype.constructor in (((({}).hasOwnProperty).apply)(RangeError(__count__ = constructor)))){/*infloop*/for(window; __parent__ = __noSuchMethod__; 1.2e3) {1.2e3;Math.sin } } }");
tryItOut("({ __iterator__: get }), __iterator__if(new (~true)(export __noSuchMethod__)) { } else /*infloop*/M:for(__iterator__ =  /x/g ; true; <y><z/></y>) throw undefined;");
tryItOut("L: {yield  \"\" ; }");
tryItOut("let (__count__ = __noSuchMethod__, prop) { if(__iterator__) {yield <x><y/></x>; } else /*for..in*/for(const prop in prop) {break M;break ; } }");
tryItOut("/*infloop*/for(<bbb xmlns:ccc=\" /* Comment */<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>.([__noSuchMethod__, __proto__, , ] = (new Array(<x><y/></x>,  /x/g ))); (({ __parent__: prototype }) = yield new <x><y/></x>().yoyo((\ntrue))); (function  function::constructor (prototype) { return __noSuchMethod__; } ) === case ([11,12,13,14].filter): const prop = <x/>;break; evalbreak; break; break; default: gc()case 3: break; ) {export *; }\n__parent__");
tryItOut("let (__count__) { if((yield (({constructor: 'fafafa'.replace(/a/g, 0/0) += <>window</> })))) { if (__noSuchMethod__|=(function  __noSuchMethod__ (constructor, prototype)<x/>)(new (*::*).watch(), <><x><y/></x></>)) {continue ;throw 033; } else gc()} }");
tryItOut("if(prototype.isPrototypeOf(__noSuchMethod__)) { if ( /x/g \n) return;} else {export *;{} }");
tryItOut("{if(new new Function(({ function::__count__: __proto__ }) = ({ __parent__: __noSuchMethod__ }) =  ''  .. __parent__, constructor = this = -3/0)) { if (/a/gi(<><x><y/></x></>, window)) {{}var constructor, constructor = [1]; } else return <x><y/></x>;}\n }");
tryItOut("if((undefined)(__noSuchMethod__)) { if ((constructor = <><x><y/></x></>)) /*infloop*/while(<x/>){break L;return __count__; }} else {return\n@foo;\f(false); }");
tryItOut("/*infloop*/for(__proto__ = default: __parent__, default: break L;yield;case <><x><y/></x></>: {} = __proto__;break; ; prop; undefined) {continue ; }");
tryItOut("throw StopIteration;");
tryItOut("yield window");
tryItOut("L:with({prop: __count__.__count__ = *}){function (__iterator__, __iterator__) {  } 1.3; }");
tryItOut("/*for..in*/for(var (this.zzz.zzz).prototype in ((Math.pow)(this.zzz.zzz))){return; }");
tryItOut("while((new __iterator__((__noSuchMethod__ | -0))) && 0)export prototype;");
tryItOut("if(((<x/> in case __count__: default: null;break; break; case 1: break; case *::*: continue M;case  /x/ : gc()export *;break; return false;case *: break; break; case 3: constructor = (-1), setter;case @foo: (this);break; ))(new (<><x><y/></x></>)(@foo, function(id) { return id }), <x><y/></x>).hasOwnProperty(\"prototype\")) return  /x/ ; else  if (( \"\" )) export __count__; else {let __proto__, prototype; }");
tryItOut("break \n1e4;");
tryItOut("/*infloop*/L:for(var ({ prototype: <><x><y/></x></>.@*.__iterator__ }) = __count__.(prototype);  /x/g  > (new ((new Function(\"<><x><y/></x></>\")))(constructor.hasOwnProperty(\"__proto__\"))); (({__proto__ setter: function  function::constructor (prop)throw false,  get __count__(prototype, __noSuchMethod__) { yield (__noSuchMethod__ = <><x><y/></x></> | prop = <y><z/></y>/*\n*/()) }  }))) {return (__parent__ = __count__);/*infloop*/while(<><x><y/></x></>.isPrototypeOf(window))@foo; }");
tryItOut("/*infloop*/M:for((__iterator__.__proto__ = <><x><y/></x></> ? __iterator__ = window : <x><y/></x> .@ ({})); false >> this >>> <x><y/></x>.isPrototypeOf(*); @foo) {{}if(this) {throw function ([y]) { };{} } else yield this; }");
tryItOut("yield  /x/  instanceof  \"\" ;");
tryItOut("/*infloop*/do {/*for..in*/L:for(const prototype = ((1 for (x in []))).call(({a2:z2}), \t#3={a:#3#}, <x><y/></x>) in [[]]) prop } while(((p={}, (p.z =  \"\" )()) /= [].__lookupSetter__(\"__noSuchMethod__\")));");
tryItOut("/*for..in*/M:for(var [__count__, prop] = <><></></>.* in 5.0000000000000000000000 ? <y><z/></y> : prop) {do __proto__ = <><x><y/></x></>; while((<y><z/></y>\n) && 0);var __count__, constructor; }");
tryItOut("M:do {(undefined);export prototype; } while((<x><y/></x>.(null)) && 0)\n");
tryItOut("throw <x/>\n const __proto__;");
tryItOut("{/*for..in*/for(var __iterator__ = <><x><y/></x></> in 0x99) return;function  __proto__ (__noSuchMethod__, prototype)<x><y/></x> }");
tryItOut("continue \nif(<x><y/></x>) let __count__ = *::*; else {constructor = *, constructor = <y><z/></y>;yield; }");
tryItOut("L: { /x/g ; }");
tryItOut("{}break ;");
tryItOut("try { throw StopIteration; } catch(__count__ if (function(){this.zzz.zzz;})()) { let(__iterator__, [__count__, , __noSuchMethod__, , [__parent__, [], ({ __noSuchMethod__: prop, __count__: __proto__ })]] = <><x><y/></x></>.isPrototypeOf(5.0000000000000000000000) ? (true /  /x/ ) : (false.__defineGetter__(\"function::__iterator__\", (({}).__lookupGetter__).call).@foo)) { let(__count__ = .valueOf(\"number\"), __proto__) { yield 'fafafa'.replace(/a/g, ((Function).apply).apply).__lookupGetter__(\"__parent__\"); } catch(x::constructor if (function(){yield __parent__.prototype = (__proto__.__noSuchMethod__ setter= Math.sin);})()) { return __iterator__ = 4.; } finally { [, ({ __proto__: __count__, prop: __count__ }), __iterator__] } ");
tryItOut("/*infloop*/for(__noSuchMethod__; void @foo; __noSuchMethod__) {const __noSuchMethod__;throw <><x><y/></x>\n</>; }");
tryItOut("let let = [,,]");
tryItOut("{if(<>\f<x><y/></x></>) { if (__noSuchMethod__: \n({__proto__: true })) {yield; } else yield 1e81;}M:if(prop|=<>></>) ; else  if (((@foo for (__count__ in prop)))) {(<x><y/></x>).watch__iterator__; } else {export constructor; } }");
tryItOut("if(<><xxx>{constructor}</xxx></>) { if (*.@*) {if((yield ([__count__, __count__] = (prototype = window)))) {\f } else  if (({ __proto__: __proto__, prototype: x::get }) = constructor) break L; else {<x><y/></x>;(arguments); } } else if(<><x><y/></x></>.__lookupGetter__(\"__proto__\")) var __count__ = -3/0;}");
tryItOut("//h\nfalse;");
tryItOut("switch((let ({; } = (<><x><y/></x></>([,,z1], <><x><y/></x></>))) (uneval((p={}, (p.z = <><x><y/></x></>)()))))) { case ({constructor getter: gc, prototype: [11,12,13,14].some }): break;  }");
tryItOut("L: {M:while(((function  prop (__iterator__) { return __parent__ } ).call(__noSuchMethod__)) && 0){let prototype = 3/0, __parent__; }return prop; }");
tryItOut("/*infloop*/do {gc() } while(<y><z/></y>.__proto__);");
tryItOut("with({: [11,12,13,14].map})function(q) { return q; }");
tryItOut("try { this.zzz.zzz; } catch(prop if (function(){return +undefined;})()) { throw __proto__; } catch(prop) { let(prototype, __parent__ = @foo) { this.zzz.zzz; } ");
tryItOut("/*infloop*/for(let prototype; eval(\"prototype\", <><x><y/></x></>); ([*::*(<y><z/></y>)(this.__defineSetter__(\"__parent__\", 3/0))])) {var constructor;export *; } const constructor;");
tryItOut("let __proto__ = (this.__defineSetter__(\"__count__\", \f/a/gi));");
tryItOut("for(let y in []);");
tryItOut("let(constructor = __noSuchMethod__ = <><zzz><><x><y/></x></></zzz></>, <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) ((function(){prop = prop;})());");
tryItOut("/*infloop*/for(<x/>; (<y><z/></y>.@foo); <bbb xmlns:ccc=\"true\"><ccc:eee></ccc:eee></bbb>.(undefined for each (__iterator__ in  '' ))) {while((*) && 0){let __noSuchMethod__; }; }");
tryItOut("switch(*) { case *: default: __proto__ = __proto__;return;case window: __noSuchMethod__ = *::*, __proto__ = @foo;break; case 6: const prototype = <y><z/></y>;break; break; export *;break; break; case 5: {}case 2: break;  }");
tryItOut("function(q) { return q; } const __count__;");
tryItOut("return 1e+81;");
tryItOut("{}");
tryItOut("this.zzz.zzz;");
tryItOut("if(([1].valueOf(\"number\")) % new (<x><y/></x>)()) { if (this.__defineGetter__(\"__count__\", 3/0)) {/*infloop*/do {*::*; } while(*::* %= <x/> .@ (prototype = __proto__));' } else {if(__count__) continue ; else  if ( '' ) continue M; else {break ; } }}");
tryItOut("for(let y in []);");
tryItOut("while((([(p={}, (p.z = (-1)())()) for (prop.__count__ in setter.__noSuchMethod__)])) && 0)with((gc).call(constructor = <><x><y/></x></>, )){let __noSuchMethod__ = false, __parent__; }");
tryItOut("yield");
tryItOut("switch((uneval(<x><y/></x>))) { default: {} }");
tryItOut("__count__ = constructor;");
tryItOut("__parent__ = constructor;");
tryItOut("if((new (gc(<x><y/></x>,  \"\" ))([z1,,]++, false))) /*infloop*/for(3.__iterator__; delete <x><y/></x>.__iterator__; 0.1 = <x><y/></x>) return  \"\" ;");
tryItOut("if(({ prototype: __noSuchMethod__ }) = (({__proto__: <><x><y/></x></> }))) {return #1=[#1#]; } else  if ((RegExp())) const set;");
tryItOut("/*for..in*/for(var __iterator__.__iterator__ in (new <x><y/></x>(*::*, *::*))) {return;if(<x><y/></x>) {yield; } else  if ([,,z1]) {__parent__prototype.prop } }");
tryItOut("var prop = 4.\nlet \fconstructor;");
tryItOut("{}\n(<><x><y/></x></> >>> (-1));\n");
tryItOut("L:if(constructor = 1e-81) {{}throw  /x/g ; } else  if (([0x99].filter(__proto__: false))) {yield;(1.3); }");
tryItOut("if(*) throw [,];");
tryItOut("if([15,16,17,18].sort(({}).__lookupGetter__, <y><z/></y>)) { if (__noSuchMethod__.@*) yield <><x><y/></x></>; else __proto__ = @foo, __iterator__ = <><x><y/></x></>;}");
tryItOut("{var constructor = @foo, prop; }");
tryItOut("yield [1,,];\nbreak M;\n");
tryItOut("/*for..in*/for(const new RegExp(new String(-3/0)).__noSuchMethod__ in (((__noSuchMethod__.(())).watch)(({ constructor: __proto__ })))) /x/ ;");
tryItOut("L:if(<x><y/></x>) { if (<x><y/></x>) __iterator__; else <x><y/></x>;}");
tryItOut("/*infloop*/M:for(__count__; <x><y/></x> ^ <x><y/></x>.watch(\"constructor\", function(q) { return q; }); <><><></><x><y/></x\t><!--yy--></></> .@*:: this.__defineGetter__(\"__count__\", <y><z/></y>) == *) {{if([[]]) {return <y><z/></y>; } else  if (3/0) ; else gc()(/a/gi).call }if([1.3].sort(this)) {*; } else throw __count__; }");
tryItOut("yield @foo;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:while((new Object())){gc() } const __parent__;");
tryItOut("gc()\n");
tryItOut("/*for..in*/__noSuchMethod__//h\n:  \"\"  % [[1]]for(3/0.__parent__ in ((((<y><z/></y>).watch).call)(@foo >> (-0)))){let __parent__,  /x/ ;__noSuchMethod__ }");
tryItOut("/*for..in*/L:for(let __parent__ in ((({ get __iterator__ let (try { prototype.constructor = (<x><y/></x> in ({a1:1})); } catch(prop) { yield; } ) { return prop <<= <y><z/></y> } , prototype setter: ([1,2,3,4].slice).call }))(window)))return;");
tryItOut("L:while((({ get prototype() { yield eval(\"*::*\", <><x><y/></x></>) }  })) && 0)");
tryItOut("/*for..in*/L:for(new ((1 for (x in [])))(3) in ((function (({ __proto__: ({ prop: __parent__, __parent__: __iterator__ }), __noSuchMethod__: ({ __proto__: __count__ }) }), __count__) { yield __noSuchMethod__ = constructor.__lookupGetter__(\"constructor\") } )((false.yoyo(*::*)))))break L;");
tryItOut("( '' );");
tryItOut("{with({__noSuchMethod__: *::*})gc()gc() }");
tryItOut("/*infloop*/for(var __count__ = <x/>;  \"\" ; #1=[((p={}, (p.z = [__count__.valueOf(\"number\") if (<x><y/></x>)])()))]) {/*infloop*/while([1,,])gc() }");
tryItOut("return;");
tryItOut("{return; }");
tryItOut("__iterator__ = __proto__, __noSuchMethod__ = 0.1;");
tryItOut("do {yield; } while(((<><x><y/></x></>.eval(u = <><x><y/></x></>))) && 0);");
tryItOut("try { return; } catch(__parent__ if (function(){return __proto__.__proto__ = @foo .@ (([1,2,3,4].slice)(prop));})()) { for(let y in [5,6,7,8]) with({}) false, <x><y/></x> } finally {  /x/g  >>>=<x/>.hasOwnProperty(\"( '' )(window)\")catch(__iterator__ if (function(){try { yield; } catch(__noSuchMethod__) { throw 1e+81; } finally { throw [[1]]; } })()) { with({}) { throw <x><y/></x>; }  } catch(__count__ if (function(){throw StopIteration;})()) { throw StopIteration; } catch(__noSuchMethod__) { for(let y in []); } finally { continue ; }  } ");
tryItOut("yield <x><y/><\t/x>;");
tryItOut("return [1,,]\f;");
tryItOut("<><x><y/></x></>; const __proto__;");
tryItOut("{while((this.yoyo(-1)) && 0){export prop;(1 for (x in [])) } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do /*infloop*/L:for(var prototype; 4.; 1e4) {continue ; } while(prototype = <y><z/></y> !=  \"\" );");
tryItOut("true");
tryItOut("if((__iterator__ = #2=[(constructor , *)])) {L: {; }(-0); }");
tryItOut("/*infloop*/do {prop = false, __parent__; } while(let (constructor = <><x><y/></x></>, __parent__ = <><x><y/></x></>) window);export __iterator__;");
tryItOut("M:while(() && 0){do  while((#1#) && 0); }");
tryItOut("{var prototype = <><x><y/></x></>, __parent__ = #1#; }");
tryItOut("/*for..in*/for(let (<x/>)(<x/>) in *::*) {var prop = this, __parent__;return <><x><y/></x></>; }");
tryItOut("gc()\nreturn;");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] = *::*.isPrototypeOf(~window) in (this)()) {window;/*infloop*/for(var [, , ] = __noSuchMethod__ = window; yield false; * >>>=[,,z1]) {let prop = *::*; } }");
tryItOut("return;/*infloop*/for(this; #1#;  /x/ ) {export __parent__; }/*for..in*/for(const [prototype, __parent__] = (this.__defineSetter__(\"__iterator__\", eval)) in prototype) throw __proto__; const __noSuchMethod__;");
tryItOut("const __parent__;");
tryItOut("if(({ set __count__ __parent__ (prop) { yield new undefined(prototype) } , constructor: (constructor) })) {/*for..in*/M:for(let \f__noSuchMethod__.__count__ in ((function(q) { return q; })(new (Function)(<x><y/></x>)))){(*::*).watch } } else  if \f((-0[[[1]]])) (window); else \t{if(yield new ((<><x><y/></x></>).__defineSetter__).apply((yield <y><z/></y>),  '' )) <x><y/></x>; else  if (((({a2:z2}))(-0) = __noSuchMethod__.prop)) {var prop = <x/>, prototype; } }");
tryItOut("with({}) { throw __proto__; } ");
tryItOut("__iterator__ = __proto__;");
tryItOut("/*infloop*/while(#2=[{export prop; }]){with({constructor: this >>= 3 -= (prop, __proto__ = this.yoyo(undefined))})(#1=[#1#]); }");
tryItOut("if(eval(\"return [];\",  '' )) { if (this) {let function::prop; }} else {return;__iterator__ = *::*; }\nexport __count__;\n");
tryItOut("with({__proto__: (eval(\"continue L;\", (({__proto__: <x><y/></x> }).*)))})/*infloop*/M:do {break M;return prototype = __proto__; } while((new (Math.pow).call(__parent__ = __count__, (3/0 & prototype))));");
tryItOut("/*infloop*/for((() for (prototype in this) for each (constructor in *::*) if (1e4)) *= <x><y/></x> !== this\t; export prototype; (<><x><y/></x></> .@*:: *)) {return (@foo.__lookupGetter__(\"__proto__\")); }");
tryItOut("export prototype;");
tryItOut("/*infloop*/for(<><bbb xmlns=\"<><x><y/></x></>\"> </bbb></>; [15,16,17,18].filter(function(q) { return q; }, *::*)[(prototype.hasOwnProperty(\"prop\"))]; prototype.__parent__ = <y><z/></y>.isPrototypeOf(<><x><y/></x></>)/*\n*/) {var __iterator__;yield *::*; }");
tryItOut("/*infloop*/\tfor([15,16,17,18].filter(eval,  /x/g ); this.__defineGetter__(\"__count__\", Math.pow); __noSuchMethod__ = ( '' --)) {__parent__ = <x><y/></x>, __count__ =  \"\" ; }");
tryItOut("with({}) const __noSuchMethod__ = true, __noSuchMethod__ = -0;\nlet (__iterator__, constructor) { if(<x><y/></x> /=  \"\" ) {(5.0000000000000000000000);__proto__; } }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in ({prototype: <x/> })) {let (__count__ = false) { const __parent__; } }");
tryItOut("\tL: switch(prop = false) { case 4: [1];break; break;  }");
tryItOut("{yield; }");
tryItOut("M:with(__noSuchMethod__.__count__ getter= function  __count__ () { yield ({a2:z2}) } ){{return;{} } }");
tryItOut("switch((eval(\"let prop, __proto__ = <y><z/></y>;\", (window--)))) { default: function::function::constructorbreak; case 8: continue L;case 7: var prototype, prototype;break; yield;case prop.(<><x><y/></x></>): yield <y><z/></y>;case 4:  }");
tryItOut("do export (function ([y]) { })(); while((1e+81.yoyo(<x><y/></x>)) && 0);");
tryItOut("/*infloop*/for(new *.unwatch(\"prop\")(); prototype.prototype = (.__noSuchMethod__ = #1=({__count__: [[]]})); ((yield (yield 0.1)))) export prototype;");
tryItOut("with({__count__: eval(\"true\", @foo)})(<><x><y/></x></>);");
tryItOut("L:if((this .@*:: <y><z/></y>)) {return;; } else  if ((5.0000000000000000000000 ^= window)) {export *; } else {var __noSuchMethod__ = __parent__;yield <y><z/></y>; }");
tryItOut("if(window) { if (new (<><x><y/></x></> << *).apply()) {; const __parent__; } else {export __parent__;var let = function(id) { return id }, __noSuchMethod__; }}");
tryItOut("switch(*::*) { default: let (__count__ = __parent__.watch(\"__count__\", Math.pow), __iterator__ =  '' ) { export *; }break; case 5: break; case 2: case [[1]]: export prop;{}throw this.__defineGetter__(\"__proto__\", Math.sin);break; case (uneval( '' (false))): break; case 7: yield; }");
tryItOut("with({__noSuchMethod__: __parent__ = undefined ? (undefined if (<x/>)).throw(<x/> >>> this) : [prop, prop, __count__, ] = Error(1e+81, arguments)})/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in 1.2e3) __proto__");
tryItOut("L:do {{}\t } while((([, , , \t, ] = ({ prototype: ({ __iterator__: prototype }), __count__: function::prototype }))) && 0); const prototype;");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/while([15,16,17,18].map((<><x><y/></x></>).__defineSetter__, false))throw <> var </>;");
tryItOut("/*infloop*/for(let prop = *.__iterator__;  '' ; [[]].__parent__) {export __iterator__; }");
tryItOut("do let constructor = <x><y/></x>; while(((@foo if (true))) && 0);\n{}\n");
tryItOut("M:if((constructor = this)) { if (<y><z/></y>) {<x><y/></x>; }} else yield;");
tryItOut("if(1e81) export *; else  if (<><x><y/></x></>) {continue M;var setter = 0; }\nlet constructor;\n");
tryItOut("with({[({ <><x><y/></x></>: __proto__, __proto__: yield }), [prop], ]: (prop = <><x><y/></x></>)}){}");
tryItOut("L:do {return; } while(((1 for (x in [])).valueOf(\"number\")) && 0);");
tryItOut("undefined;gc()");
tryItOut("if([z1]) {evalyield *::*; } else ;");
tryItOut("with(<bbb xmlns:ccc=\"<> </> for each (set in (({ { yield this } : false}))) if (({a1:1}))\"><ccc:eee></ccc:eee></bbb>){( /x/ );return; }");
tryItOut("L:switch(<><bbb xmlns=\"~<><x><y/></x></>\"></bbb></>+=<x/>) { case __proto__ = prop = prop .@x:: <><x><y/></x></>\n: break; default: break; case ((<x><y/></x>.watch(\"__proto__\", [1,2,3,4].map))[prototype !== <><x><y/>\t</x></>]): break; break; case window if ( '' ): M:with(*::* ^= 3.141592653589793){; }<y><z/></y>;break;  }");
tryItOut("/*for..in*/for(const prototype = *::* in <zzz>(*::*)(0/0)</zzz>.(typeof  ''  :: null)) return");
tryItOut("if((function(q) { return q; }).call( \"\" , undefined)) {export __parent__;gc } else  if (*) break M; else yield ({});");
tryItOut("L: yield <><x><y/></x></>;");
tryItOut("{window; }");
tryItOut("throw StopIteration;");
tryItOut("\n/*infloop*/for(*::*.valueOf(\"number\"); [15,16,17,18].map(Math.sin, <x><y/></x>); <y><z/></y>) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in ~<><x><y/></x></>) \n/*for..in*/for(prototype in 0.1) {prop = __parent__, __count__;__iterator__ = *, __count__; }\n");
tryItOut("/*infloop*/L:for(((<x><y/></x>)(<><x><y/></x></>) = ((uneval(undefined)))--); <zzz>__iterator__ = yield (__iterator__ = constructor = <><x><y/></x></>);</zzz>; ((true).watch)(null, <x><y/></x>).__noSuchMethod__) (@foo)\n");
tryItOut("with({}) (({}).__lookupGetter__).call");
tryItOut("M:if(<x><y/></x>\n) { if (-1 ? 1e+81 : function ([y]) { }) {yield; }} else {}");
tryItOut("if(new window.throw(<><x<y/></x/*</>)()) { if ((p={}, (p.z = window)())) {@foo;throw window; }} else {let constructor = this, __iterator__ = <y><z/></y>; }");
tryItOut("/*for..in*/L:for(__parent__ in ((Math.pow)(<><x><y/></x></> @ <x/>))){(function  prototype (prototype, prop) { yield {} } ).apply }");
tryItOut("/*infloop*/L:for(const __noSuchMethod__ = (<><x><y/></x></> %= __count__.hasOwnProperty(\"prototype\")); <x/>.@*; constructor ? <xxx {prototype}={<x><y/></x>.(<x/>)} /> : this.__defineSetter__(\"constructor\", (1 for (x in [])))) {export constructor;{} }");
tryItOut("switch(prop.prototype) { case 6: /*infloop*/for(var [, ] = prop.(<y><z/></y>); yield #1=[#1#]; <y><z/></y> ^  /x/g ) 0x99; }");
tryItOut("if(this.zzz.zzz.eval(__parent__ = ((function(id) { return id })()) @  /x/ )) {/*infloop*/for(const __noSuchMethod__;  ''  *= this; (__proto__ = <y><z/></y>)) let prop = this\ntry { for(let y in [5,6,7,8]) yield 3/0(); } catch(prototype) { this.zzz.zzz; }  } else {throw <x><y/></x>\n;/*for..in*/for(const prop in -0) {yield; } }");
tryItOut("export *");
tryItOut("try { for(let y in []); } finally { return; } ");
tryItOut("L:if(__iterator__.__proto__ = (p={}, (p.z = ( /x/g .yoyo(#3={a:#3#})))())) { if (null >> true) {{const prop = @foo, __iterator__ = prototype; } }} else if(window) {{} } else  if (__parent__) {var constructor = [1]; }\n/*for..in*/for([constructor, __parent__] = (__count__--) in <><x><y/></x></>) {break ;__parent__ =  \"\" , __count__; }\n");
tryItOut("L:if( /x/ ) gc()");
tryItOut("L:if(<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\").__lookupGetter__(\"__iterator__\")) {switch(+prop\n) { default: break; var __parent__ = <><x>\f<y/></x></>, __iterator__ = <x><y/></x>; } }");
tryItOut("/*for..in*/for(({ __noSuchMethod__: __count__, __noSuchMethod__: __iterator__ }) in (([1,2,3,4].map)((p={}, (p.z = 1.3)()))))<y><z/></y>");
tryItOut("throw <y><z/></y>\n");
tryItOut("/*infloop*/M:for(/*\n*/var __iterator__ = Array(({ set __proto__ __proto__ (__count__, prototype) { return __iterator__ }  })[]).throw(__iterator__ = constructor); [(uneval((<x><y/></x>.valueOf(\"number\").__proto__)))].filter(function  prototype (prop) { yield (<x><y/></x>.throw(prop)) } ); (@foo ? this.__defineSetter__(\"constructor\", eval) : function(y) { yield y; ; yield y; } !== <><x><y/></x></>--)) M:if(eval(\"@foo\", <x><y/></x>)) { if (this) break ; else {export *; }}");
tryItOut(";");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { if (<x/>) prototype = __count__, prop = *::*; else {var __parent__ =  /x/ ; }}");
tryItOut("if((uneval(--[z1]))) return; else {throw 033;/*infloop*/for(const __count__; [[]]; <><x><y/></x></>) export *\f; }");
tryItOut("L:if(({ get __noSuchMethod__(__parent__) { gc() } ,  set __parent__ __noSuchMethod__ () { yield <x/> }  })) { if (__count__ = (\n(new function(y) { yield y; function::__iterator__ = prop;; yield y; }())).yoyo((new Function).call(<y><z/></y>.__iterator__ = <><x><y/></x></>, ))) {yield;<x><y/></x>.(.2); } else /*infloop*/for(const __noSuchMethod__; ({__proto__: -3/0 ? false : <><x><y/></x></>, prototype: constructor.(<x/>) }); Function(true, Math.sin)) {yield; }}");
tryItOut("do 'haha'.split while((@foo()) && 0);");
tryItOut("if(((__noSuchMethod__ = constructor))[(yield ({a1:1}))]) { if ((false.unwatch(\"constructor\")) for \f(prop in  /x/ )) {yield;return; } else {const __proto__; }}");
tryItOut("yield (Number( '' ));");
tryItOut("with( /x/ .@foo){yield;yield  { yield [[]] } ; }");
tryItOut("let(prototype = *, __iterator__ = __noSuchMethod__) { throw window;");
tryItOut("/*infloop*/for(prototype =  ''  - new eval(__noSuchMethod__, <><x><y/></x></>); __parent__ = @foo for (constructor in *).throw(undefined.valueOf(\"number\"));  \"\" (@foo, <x><y/></x>)) /*for..in*/L:for(__count__ in true) return;");
tryItOut("/*infloop*/do prototype.__noSuchMethod__ while(<><>constructor</></>);");
tryItOut("/*infloop*/for(const __parent__\r; ({prototype: throw function::constructor;});  /* Comment */@foo) {const __parent__, constructor;export *; }");
tryItOut("if(<x/> || prototype|=<><x><y/></x></>\n) {} else  if (-__parent__) yield 4.\nreturn");
tryItOut("with({}) { __parent__ = __noSuchMethod__; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ = prop['__noSuchMethod__'] in <> /x/g (prop)</>.((false ..  \"\" ))) {{}/*for..in*//* nogeckoex bug 349964 */ for  each(const this.__iterator__ in false) {yield <x><y/></x>; }export __noSuchMethod__; }");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in new (Math.pow)(<y><z/></y>, __noSuchMethod__)) {throw case [3.141592653589793].sort((function  __parent__ () { yield  \"\"  } ).call): ; } while((<y><z/></y>) && 0);");
tryItOut("yield  '' \n");
tryItOut("return\n");
tryItOut("let(setter, prop = (<><x><y/></x></>).call(1e+81, 0/0, *)) { with({}) { for(let y in [5,6,7,8]) /*for..in*/M:for(var [__noSuchMethod__, __proto__] = __iterator__ in {}) {(function(id) { return id });prototype = true; } } ");
tryItOut("M:while((([, [constructor]] = default: break; [this.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__)].unwatch(\"__iterator__\"))) && 0)yield;");
tryItOut("/*for..in*/for(__noSuchMethod__ = (__noSuchMethod__ = (<x><y/></x> if (*)).__lookupGetter__(\"constructor\")) in RegExp()) {with([1])__count__ }");
tryItOut("/*infloop*/for((<><x><y/></x></>.unwatch(\"__count__\"));  /* Comment */<x><y/></x>.__defineGetter__(\"__count__\", function  prop (constructor, __count__) { return <></> } ); (new Function(<employee id=\"1\"><name>Joe</name><age>20</age></employee>, -1))) return false;");
tryItOut("this.zzz.zzz;");
tryItOut("return; const constructor;");
tryItOut("/*infloop*/for(__parent__ = window; <x/>; prop) {export *;return; }");
tryItOut("while((new (function ()<><x><y/></x></>, )()) && 0)yield;");
tryItOut("M:if(__iterator__) { \"\" ;\f }");
tryItOut("do {prototype;gc() } while((<><bbb xmlns:ccc=\"<><x><y/></x></>.unwatch(\"prototype\").__lookupSetter__(\"__parent__\")\"><ccc:eee></ccc:eee></bbb></>) && 0);/*for..in*/for(const [__parent__, prop] = (this *= <x><y<x>) in [1,,]) {export *; }");
tryItOut("while((*) && 0){/*for..in*/for(var __parent__ in (( '' )((function (__iterator__, constructor)@foo).call(<><x><y/></x></>, undefined, 1.3).valueOf(\"number\")))){yield [,,]; } }");
tryItOut("{}");
tryItOut("/*infloop*/for(__count__ = (Function--); (new Error()); (window.@foo) ? constructor : (#2=({__proto__: <x/>}))) /*for..in*/for(const __proto__.constructor in (((new Function(\"break M;\")))( '' )))throw <y><z/></y>;");
tryItOut("/*infloop*/for(const __iterator__ = (<><x><y/></x></>).__defineSetter__().watch(\"__noSuchMethod__\", function (function::__iterator__)*::*); /a/gi; prototype = true\t.yoyo(__proto__ = <><x><y/></x></>)) throw ( \"\"  ^ );");
tryItOut("/*infloop*/for(eval(\"({prototype:  \\\"\\\"  , [z1]}) /= ((uneval((window.*))))\", <x/> - <><x><y/></x></>); yield typeof <x/>; (yield @foo)) {{eval{} }let(__iterator__ = null) { null; }");
tryItOut("with(<y><z/></y>)({}).hasOwnProperty");
tryItOut("while(((<x><y/></x>.(window))) && 0)/*infloop*/M:for(({ __count__: __noSuchMethod__, __proto__: constructor }) = @foo >= \fnull; <x><y/></x>.(*); new (window)()) if(false) {gc() } else  if (*) {{}let function::get, __parent__; } else (<><x><y/></x></>);");
tryItOut("{try { return; } finally { yield; }  }");
tryItOut("if(new (@foo)()) {export prop; } const __parent__;");
tryItOut("(<><x><y/></x></>((function(y) { yield y; let __iterator__ = 0x99, __parent__;; yield y; }(undefined, 0/0)))).watch");
tryItOut("/*infloop*/M:for(this.__defineGetter__(\"__parent__\", 3/0); new Date({}, __parent__).propertyIsEnumerable(\"__count__\"); <>__count__.__parent__ = <><x><y/></x></></>) {export function::__iterator__;gc() }");
