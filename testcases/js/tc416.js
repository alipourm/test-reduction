tryItOut("while((this.zzz.zzz) && 0){continue L;continue M\nreturn window; }");
tryItOut("if(<x><y/></x>.isPrototypeOf(<><x><y/></x></>)) {do {/*infloop*/for(prototype; 0.1; [1]) {export *; } } while((__proto__ = null) && 0); }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__(__proto__) in ((({}).hasOwnProperty)(3/0 ? @foo :: 1e4 : [,,z1].watch(\"__iterator__\", 'haha'.split)))){{} }");
tryItOut("/*infloop*/L:for(const [__parent__, , ] = (-(function  __iterator__ (__count__) { yield undefined } )(<y><z/></y>)); yield  '' ; (yield window).isPrototypeOf(set = __noSuchMethod__)) if(new Function()) { if (\n<><x><y/></x></>) var __iterator__, prototype; else {var x::constructor = false, prop;export *; }}");
tryItOut("/*infloop*/L:do if( '' ) return; else {throw <x/>; } while(((uneval(window))).__proto__ =  '' .throw( /x/ ));");
tryItOut("L:with({prototype: __proto__ ^= (1 for (x in []))(\tconstructor)})<><x><y/></x></>;");
tryItOut("let (prototype, constructor) {  }");
tryItOut("/*infloop*/for(let ({ __count__: [, [], ({ __iterator__: [, , ({ prototype: [__noSuchMethod__, , prop, prop], __count__: [] })] }), ] }) = (p={}, (p.z = [z1,,])()); false.yoyo(window); @foo >> window .@*:: yield <><x><y/></x></>) yield [window.eval(<x><y/></x>)]\f;");
tryItOut("/*infloop*/do return  /x/ ; while(([1,2,3,4].map)(@foo, undefined));");
tryItOut("/*for..in*/L:for(__iterator__.__noSuchMethod__ in this.zzz.zzz) {yield (-0); }");
tryItOut("/*infloop*/while((<><x><y/></x></>)[ '' ])return <x><y/></x>;");
tryItOut("if(@foo) /*\n*/{{}__parent__; } else  if ((p={}, (p.z =  /x/g )())) var prop =  /x/g , __count__;");
tryItOut("if(__noSuchMethod__.*.unwatch(\"set.__count__\")//h\n)  else  if (#0=[0.1]) {yield;var __parent__, prototype; } else return #1=[#1#];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in (-1++)) {gc()yield 033;\n{}\n }");
tryItOut("if( '' ) {/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in [[1]]) {let prop = __proto__, constructor =  /x/g ;export __iterator__; }if(this.__defineGetter__(\"constructor\", function () { return window } )) { if (#1=[#1#]) var function::__parent__ =  \"\" , prototype;} else {return;; } } else  if ((eval(\"yield undefined;\", this))) yield -1;/*for..in*/for(const constructor = null in window) {( /x/g ); } else yield;");
tryItOut("if(__noSuchMethod__ = (({ set constructor(delete) { yield window } , function::constructor: ++ /x/g  }))) __parent__;");
tryItOut("L: {let __noSuchMethod__; }");
tryItOut("if(0) {(true);prototype }(/ else  if (this) {function (__iterator__) { return __noSuchMethod__ } continue M; }");
tryItOut("/*for..in*/for(var __parent__ = prop = @foo in <><x><y/></x></>.prop) *;");
tryItOut("let (prop = ({ prototype: ({ prop:  { yield <x/> }  }), __parent__: [__iterator__, __count__, [, ], __iterator__] }) = __noSuchMethod__ = Boolean(prototype,  /x/ )) { /*for..in*/for(const __proto__.__noSuchMethod__ in (eval(\"continue ;\", true.__defineGetter__(\"__noSuchMethod__\", <y><z/></y>)))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <x><y/></x>) return 033; } }");
tryItOut("__proto__ = __iterator__, constructor = @foo;");
tryItOut("/*for..in*/for(let __iterator__ in (((Exception().yoyo(({}).__defineSetter__(\"__parent__\", function  __iterator__ ()null))))(#2=__proto__)))/*infloop*/for(const __count__ = window;  /x/g ; <x/>) {*::* }");
tryItOut("(undefined)");
tryItOut("/*for..in*/for(@foo in ((function(q) { return q; })(<y><z/></y>))){return; }");
tryItOut("{return; }");
tryItOut("do  while((new Function()) && 0);");
tryItOut("/*infloop*/for(<y><z/></y> & 3;  /x/ ; (!__iterator__)) {throw <y><z/></y>; }(true);");
tryItOut("with( \"\" )if(let (prototype =  \"\" , __parent__) __noSuchMethod__) { if ((new Function).call(window, 5.0000000000000000000000)) {var __parent__, prop; const __iterator__; } else {\tswitch(#1=[#1#]) { case #1=[#1#]: return; }(this); }}");
tryItOut("");
tryItOut("if(__count__) prop else  if (function(id) { return id }) {export __noSuchMethod__;yield; }");
tryItOut("yield\n");
tryItOut("/*infloop*/while(<y><z/></y>){continue ; }\nif(prop =  /x/g ) { if ((~1e-81.\t__defineGetter__(\"__parent__\", *))) throw undefined; else break L;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype.__count__ in *.unwatch(\"__proto__\")) if( \"\" ) var prototype = prototype, __count__, prop; else  if (<x/>) { } else {}");
tryItOut("with(set.__noSuchMethod__ % (new new RangeError(*, <y><z/></y>)((<x><y/></x>yyy =  \"\" ), #3={a:#3#}))){const prop =  /x/g ; }");
tryItOut("yield; const constructor;");
tryItOut("/*infloop*/for(let ({ prototype: __iterator__, prototype: __parent__ }) = ((Math.pow)( /x/ )); (1 for (x in [])); __noSuchMethod__ = *) {throw <><x><y/></x></>; }");
tryItOut("if([prop for each (__noSuchMethod__ in <x/>)][function(id) { return id } /  /x/ ]) { if ((({a1:1})())) {throw  \"\" ; } else let (__count__ = <x/>) { export *; }}");
tryItOut("if(1.3) {new Function } else  if (.prototype) {{}constructor, __noSuchMethod__ = <><x><y/></x></>; } else return;");
tryItOut("throw undefined;\ngc()\n");
tryItOut("if(<x><y/></x>) { if (getter) {return; }} else {Math.sin }");
tryItOut("while((__proto__ =  /* Comment */<y><z/></y>) && 0){([z1]); }");
tryItOut("/*for..in*/for(const prototype in ((({}).__lookupGetter__)(constructor = 1e+81))){var \tx::__iterator__ = gc(), __noSuchMethod__ = undefined; }");
tryItOut("{__noSuchMethod__ =  if ( \"\" ); }");
tryItOut("{__iterator__ }");
tryItOut("/*infloop*/for(let ({ __proto__: __parent__, __noSuchMethod__: __proto__ }) = *; (yield \f-1); 1e81) return __parent__\nconst __noSuchMethod__, __parent__ = <x><y/></x>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__(<x><y/></x>) in __iterator__) let prototype, prop;");
tryItOut("if(.2) {throw this;continue M; } else  if ({}) (*::*); else (#1#)\n{M:if((yield (-0) - undefined) | <x><y/></x> *= __noSuchMethod__) {; } }");
tryItOut("/*infloop*/for((p={}, (p.z = eval(\"__iterator__\",  \"\" ))());  /x/g ; ([window].sort((function (constructor) { return @foo } ).call))((__iterator__ = true), <x><y/></x>)) [1,2,3,4].slice");
tryItOut("var constructor =  \"\" , __parent__ = this\n");
tryItOut("export *; const __proto__;");
tryItOut("if(window.__defineGetter__(\"prototype\", function  constructor (__iterator__, __proto__)this).propertyIsEnumerable(\"__parent__\")) {yield this; } else (<x><y/></x>);");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("M:if(<x/> & window) yield;");
tryItOut("/*infloop*/while(<bbb xmlns=\"5.0000000000000000000000\"><ccc:ddd> </ccc:ddd></bbb>){continue ; }");
tryItOut("if(undefined.__parent__ = <y><z/></y> instanceof __count__|=null) { if (let (__parent__) ({ get __proto__(__proto__) { return [15,16,17,18].some(this,  /x/ ) }  }).isPrototypeOf((__proto__) = (<xxx {\f__iterator__}={ /x/ } />.(__count__.*)))) var __parent__, __noSuchMethod__ = (-0);} else {M:if(<x><y/></x>.(window)) { if (yield <><x><y/></x></>) {yield;<y><z/></y>; } else { }} const __iterator__;; }");
tryItOut("{(new Function(\"<y><z/></y>;\")) }");
tryItOut("{//h\nyield 033; }");
tryItOut("if(( \"\" .isPrototypeOf(<><x><y/></x></>) || ( '' (window)))) {let __count__; }");
tryItOut("if((__parent__).__defineSetter__()) {thisreturn; } else  if (this) return *;");
tryItOut("let(prototype = [,]) ((function(){let(prop, __proto__) { constructor})());");
tryItOut("L:if(this.__defineGetter__(\"constructor\", /a/gi)) let ({ prop: ({ __parent__: __proto__, __noSuchMethod__: __proto__ }) }), __parent__;");
tryItOut("/*infloop*/for(var ({ __proto__: [, , , [, ({ constructor: ({ : __proto__ }) })], ] }) = ( /* Comment */\ntrue)(); (__noSuchMethod__); [yield <><x><y/></x></> .@x::  /x/ ].filter(window)) /*infloop*/L:for(let [[({ constructor: constructor }), ({ constructor: getter, prototype: prop }), __iterator__], ({ __parent__: [, ] }), prop] = set = this; (uneval(<x/>)); <><\nx><y/></x></> :: <><x><y/></x></>.unwatch(\"__proto__\")) return;");
tryItOut("try { export prototype; } finally { yield (1.3.hasOwnProperty(\"constructor\"))([(-0) if (0.1)], <x/>); } ");
tryItOut("{gc()var __noSuchMethod__, __count__ = this; }");
tryItOut("{}/*infloop*/while(3.141592653589793){;{} }");
tryItOut("{const __parent__;yield; }");
tryItOut(" { return new Function } ");
tryItOut("if((new String())) { if (__parent__) this} else return;");
tryItOut("/*infloop*/\ffor(\n__proto__ = <x><y/></x>\n || *::*; (new eval(\"constructor;\", <><x><y/></x></>)()); (<>*::*</>.((<x/>)).throw(<xxx {prop}={<x><y/></x>} />))) {let prop = <><x><y/></x></>, __count__; } const __noSuchMethod__;");
tryItOut("\ftrue;");
tryItOut("M:if(<y><z/></y>.hasOwnProperty(\"__count__\")) __count__ const __iterator__;");
tryItOut("{ }");
tryItOut("/*infloop*/M:while(({ prototype: constructor }) = [(({prototype: <><x><y/></x></>,  get __proto__()<><x><y/></x></> })) for each (prototype: prototype = 033 in prop) for each (__iterator__ in window)]){{} }");
tryItOut("for(let y in []);");
tryItOut("let (constructor) { let (__parent__ = <x><y/></x>) { (undefined); } }");
tryItOut("let (prototype, __iterator__) { L:with(undefined){yield  '' ; } }");
tryItOut(";");
tryItOut("/*infloop*/do export *; while(*::*);");
tryItOut("/*infloop*/while(constructor.(constructor))export constructor\ndo {prop } while(( /x/g  ^= \t /x/ .__defineSetter__(\"__count__\", true)) && 0);");
tryItOut("L:if((new (Math.sin)(\ffalse * *::*, <x><y/></x> !== [,,]))) (window);");
tryItOut("switch(<bbb xmlns:ccc=\"({ __parent__: prop }) = window.isPrototypeOf( /x/ ).yoyo(#2=(__parent__.__parent__ setter= (new Function(\"throw <><x><y/></x></>;\"))))\"><ccc:eee></ccc:eee></bbb>) { case ((uneval([15,16,17,18].some([1,2,3,4].map, <x><y/\f></x> .@*:: -1)++))): break; default: with({}) this.zzz.zzz;break; case (yield (<></>.((uneval(__parent__))))): {}break;  }");
tryItOut("M:with({__count__: yield prototype = undefined})do yield; while((<y><z/></y>) && 0);");
tryItOut("return;");
tryItOut("M:while(((__parent__|=window)) && 0)let __count__, this = this;");
tryItOut("with({}) __parent__ = __parent__;");
tryItOut("let(({ prop: __iterator__, prop: ({ __noSuchMethod__: constructor }) }), __parent__) { return <x><y/></x>.(window);");
tryItOut("/*infloop*/L:for(__iterator__; __proto__.__count__ ^= +__noSuchMethod__; 'fafafa'.replace(/a/g, Math.sin)) yyy");
tryItOut("if(new (function (__parent__) { yield undefined } )()) { if (*::*) throw <><x><y/></x></>; else {gc() }}");
tryItOut("/*infloop*/for(const __noSuchMethod__ = <x><y/></x> *= this.__defineSetter__(\"__noSuchMethod__\", /a/gi);  /x/ .hasOwnProperty(\"__iterator__\") &= @foo; eval(\"Math.pow\", window) = new Math.sin(constructor, <><\tx><y/></x></>)) (<><x><y/></x></>);");
tryItOut("/*infloop*/M:for(prototype .@ .eval(<><x><y/></x></> !==  \"\" ); ( '' .yoyo(get)) = (this === function::__iterator__)\n; (this.__defineGetter__(\"constructor\", (prop%= '' ).__defineSetter__))) /*infloop*/for(<xxx>{prop}</xxx>.valueOf(\"number\"); <y><z/></y>.__iterator__; prop = prop;) return;");
tryItOut("throw prop;");
tryItOut("continue ;");
tryItOut("/*for..in*/for(constructor in (((1 for (x in [])))([ /x/  for (__parent__ in __noSuchMethod__)])))return window;");
tryItOut("/*for..in*/for(const __iterator__ = <y><z/></y> in <x><y/></x>) {return this; }");
tryItOut("{} const __parent__;");
tryItOut("/*for..in*/for(let (new *).propertyIsEnumerable(\"prop\") in (((({ constructor: [], __parent__: ({ prop: __count__, constructor: prop }) }) = (__count__.((-3/0)))))(try { yield (this.__defineGetter__(\"__count__\", ({}).hasOwnProperty)); } catch(constructor if (function(){with({}) { throw StopIteration; } })()) { return #1=[#1#];\r } finally { with({}) { prop = __count__; }  } .isPrototypeOf(3.141592653589793) == this < false))){/*for..in*//* nogeckoex bug 349964 */ for  each(function::__parent__ = .2 in (prop >= [].valueOf(\"number\"))) ; }");
tryItOut("{let __parent__ = window; }");
tryItOut("if(-1) {(false);export *; }");
tryItOut("/*infloop*/for(let prototype = prop = <><zzz><x><y/></x></zzz></>; (yield <x><y/></x>.([z1,,]).@*); <x><y/></x>.isPrototypeOf( /x/ ).__proto__ = (yield false)) const __parent__, constructor = <><x><y/></x></>;");
tryItOut("if((function ([y]) { })(undefined)) {'haha'.split; } else  if (eval(\" /x/  in window\", prototype = *)) {__proto__ = .2; }");
tryItOut("<x/>; const ({ prop: [({ __proto__: ({ __count__: __iterator__, __iterator__: getter }), __iterator__: [] }), [//h\nx::__iterator__, __iterator__, ], ], __count__: [] });");
tryItOut("{const __count__ = prototype; }");
tryItOut("with({__iterator__: false})yield;");
tryItOut("L: with({}) { __count__ = __noSuchMethod__; } ");
tryItOut("throw this;var __proto__; const prototype;");
tryItOut("{export __proto__; const __parent__; }");
tryItOut("switch((--*::*)) { case yield *: var __proto__;break; case 4: default: yield [1,,];yield <x/>;break; case this.__defineGetter__(\"prop\", [1,2,3,4].map): break; {}break;  }");
tryItOut("/*infloop*/M:for(var __parent__ = 1e+81.valueOf(\"number\"); ((constructorfunction ()<y><z/></y>).call((#1=[#1#])[@foo], x::__iterator__: <><x><y/></x></> = *)); @foo) M:if(<><x><y/></x></>) { if (<x/>) {__iterator__ = null, __iterator__ = <x><y/></x>;yield; } else {return  /x/ ; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const x::__proto__ in [let (__noSuchMethod__)  /x/g ].watch(\"constructor\", (new Function(\"break ; const constructor;\")))) return <y><z/></y>;");
tryItOut("/*infloop*/while(prop = undefined);");
tryItOut("/*for..in*/for(let [prop, __iterator__] = new ( \"\" )(\nwindow) in ) {/*infloop*/L:for(new (new /a/gi())(__count__ = *::*, (prototype = *)); prototype; RegExp(([1,2,3,4].map))) {gc()export constructor; } }");
tryItOut("\t;\n/*for..in*/for(const ({ prop: prototype, __iterator__: __noSuchMethod__ }) in ((Math.sin)(([,]))))/*for..in*/for(prop in ((this)(null)))export *;\n");
tryItOut("let(__iterator__) ((function(){1e+81;})());");
tryItOut("try { yield; } catch(prop) { break M\t; } ");
tryItOut("L:if([]) (<x/>); else  if (-3/0) {M:if(<><x><y/></x></>) { if (__parent__) yield arguments;} else (<><x><y/></x></>); } else {const constructor, constructor = this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in null) {export *;gc() }");
tryItOut("if(<x/>) {yield; } else  if ( '' ) {continue M; }\n({a2:z2}).prototype = __count__;");
tryItOut("M:if(true) {continue ;if(1e81) { if (__parent__) {break ;(<x><y/></x>); }} else {window;export prop; } } else {{yield;constructor, prototype; }<> </> }");
tryItOut("yield [,]; const __parent__;");
tryItOut("if((new Object(<xxx>{__iterator__}</xxx>\n , (<>yyy</>.@*)))) { if (((new ({}).hasOwnProperty((<x/> &= window))).throw(__parent__ = #2=[*::*]))) throw <><x>\f<y/></x></> :: window;} else {const prototype = undefined; }");
tryItOut("if(<><x><y/></x></>|=@foo) /*infloop*/for(__parent__; this.__defineSetter__(\"__noSuchMethod__\", function  yield (__count__, __proto__) { {} } ); __count__|= /x/ ) /a/gi else  if (( /* Comment */033) .@ 1e81.__defineSetter__(\"__proto__\", #1#)) L: {continue ; } else {this.zzz.zzz; }");
tryItOut("L: yield 0x99;");
tryItOut("with({({ __iterator__: __iterator__ }): __parent__})continue M;");
tryItOut("var __proto__ = __parent__, prototype = this;");
tryItOut("return constructor\n__noSuchMethod__ = null; const __iterator__;");
tryItOut("with((( /x/g )()))");
tryItOut("/*infloop*/M:while(window >>= undefined){ { return 0x99 } ;export *; }");
tryItOut("__noSuchMethod__\t = constructor;");
tryItOut("/*for..in*/for(__parent__ = [11,12,13,14].filter in ((function(y) { yield y; {}; yield y; })())) /*for..in*/for(let [__count__, __proto__] = 'fafafa'.replace(/a/g, function  function::prop (__proto__, <x><y/></x>)<><x><y/></x></>) in @foo) /*infloop*/M:do {export *; } while([,,z1]);\f");
tryItOut("{let __parent__, __proto__;<x><y/></x> }");
tryItOut("if((return throw @foo;)) { if (([11,12,13,14].map).call(__proto__ =  /x/  == (__noSuchMethod__.__proto__).watch(\"__parent__\", /*\n*/((#3={a:#3#} >>> prototype.hasOwnProperty(\"__proto__\"))).__defineSetter__), [<x/>].prop = ({a1:1}).__iterator__ =  \"\" )) {if(prototype = __noSuchMethod__) export __proto__; else  if (window == <><x><y/></x></>) yield 1e-81; else __proto__;if(<y><z/></y> for each (prototype in <><x><y/></x></>)) { if ((undefined ? prop : window)) let __count__ = true, prototype;} else gc() }} else {if(<><x><y/></x></>-- != ({__parent__: __proto__})) {} else {prototype = undefined;yield; }if(__count__ % <><x><y/></x></>) return window; else {; } }");
tryItOut("yield;");
tryItOut("Math.sin{}");
tryItOut("{prototype = [z1,,]export *; }\nyield;\n");
tryItOut("while((5.0000000000000000000000) && 0){<x><y/></x>const __count__; }");
tryItOut("do { } while(((uneval(<employee id=\"1\"><name>Joe</name><age>20</age></employee>))) && 0);");
tryItOut("switch(prop.constructor) { default: if((new window(<x><y/></x>, *).__defineGetter__(\"prototype\", <><x><y/></x></>))) { if (yield [z1,,]()) {  }} else throw  /x/g ;break;  }");
tryItOut("throw this; const prop;");
tryItOut("{const __proto__ = <x/>, __noSuchMethod__ = window;yield; }");
tryItOut("with({__parent__: <x><y/></x> .@ <><x><y/></x><\t/>})((*::*.@foo));");
tryItOut("let (__parent__ = <x><y/></x>) { {} }");
tryItOut("( \"\" )\n");
tryItOut("/*for..in*/for(var ({ __noSuchMethod__: ({ prop: __count__, prototype: constructor }), __proto__: ({ prop: x::__noSuchMethod__, __parent__: __proto__ }) }) in ((function(y) { yield y; M:if(((-0)(this, arguments))) throw  /x/ ; else ; yield y; })([11,12,13,14].map))){var prop;<><x><y/></x></>; }");
tryItOut("/*infloop*/for((prop.__count__ = [15,16,17,18].filter(<><x><y/></x></>, __noSuchMethod__)); ( \"\"  , <x/>) / Date(); ((window <<= <x/>).__lookupGetter__(\"__proto__\"))) {{}gc() }");
tryItOut("let(__iterator__ = <y><z/></y>[undefined], [prop, __count__]) { constructor = __iterator__;");
tryItOut("/*for..in*/for(const __count__([,,]) in (Function).call(({a1:1}), )) {__parent__, __iterator__ = <x/>; }");
tryItOut("if(*) { if (prototype) ;} else {return; }");
tryItOut("/*infloop*/while((new RegExp(constructor = __parent__)))const __iterator__, __iterator__ = undefined;");
tryItOut("yield;export prototype;");
tryItOut("/*infloop*/L:for(var __iterator__; ([-this -= (yield this)].filter(Math.pow)) @ [11,12,13,14].map; (new <x><y/></x>()).watch) for(let y in []);");
tryItOut("with({constructor: <x><y/></x>})__noSuchMethod__ = prototype, __parent__ =  \"\" ;");
tryItOut("/*infloop*/while(1e+81){export *; }");
tryItOut("with({__noSuchMethod__: window}){evallet __noSuchMethod__; }");
tryItOut("throw __count__(@foo);");
tryItOut("{export __noSuchMethod__\nreturn <><x><y/></x></>; }");
tryItOut("{( /x/ );yield *; }if(<y><z/></y>) { if (<x/>) return null;} else {export __iterator__; }");
tryItOut("do {return; } while((((p={}, (p.z = this)()) / @foo(1.2e3))) && 0);");
tryItOut("if((__iterator__.prototype getter= Function)) { if ( /x/ .@foo) {Functionexport *; }} else [1,2,3,4].slice\n");
tryItOut("M:while((()) && 0){export *; }");
tryItOut("while((__noSuchMethod__ = 'fafafa'.replace(/a/g, (<><x><y/></x></>[<><x><y/></x></>]))) && 0)if(*) {yield -0; }");
tryItOut("/*for..in*/for(var __iterator__.__iterator__ in (({prototype: <zzz>null</zzz>, constructor getter: (this).__defineSetter__ }))) if(<x><y/></x>) { /x/g ; }");
tryItOut("L:if(<x/>) {export *;gc() } else  if (<y><z/></y>) {break L;var constructor = false; }");
tryItOut("{(1e81);export __count__; }");
tryItOut("if(([[1]](null)++).prototype) { if ( for each (prototype in prototype.__count__ setter= (new <><x><y/></x></>(window, prototype))) for (prototype in ((new Function)( /x/g , (-0)))) for (__count__ in [,,z1].__lookupSetter__(\"__count__\")) for (* in false) if ( \"\" )) {while((({__iterator__ setter: function  function::__iterator__ (constructor, __noSuchMethod__)[] =  \"\"  })) && 0)gc()(1e4); }} else {M:with({__proto__: __proto__ * *}){{}throw this; } }");
tryItOut("with(<bbb \fxmlns=\"(({constructor setter: function  __parent__ (constructor) { yield window }  }))\">yyy</bbb>){with({__parent__: new /a/gi( \"\" , <x><y/></x>)})/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in true) {yield 3; } }");
tryItOut("/*infloop*/do /*infloop*/for(__proto__; *::*; *::*) (<><x><y/></x></>); while((set.__parent__));");
tryItOut("/*for..in*/L:for(let constructor in ((function(q) { return q; })(this.__defineGetter__(\"__iterator__\", /a/gi))))(*);");
tryItOut("if(__parent__-=<x><y/></x>) { if (prototype) {let prototype; }} else gc()");
tryItOut("yield;");
tryItOut("while((<y><z/></y>) && 0)gc()");
tryItOut("if(3) { if (__noSuchMethod__()) {new Function } else {let __noSuchMethod__;gc() }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor(#1#) in ((undefined).watch).call(<><x><y/></x></>, <x/>, false)) {return  '' ;{} }");
tryItOut("while(((<x><y/></x> .@ @foo >>= \nundefined)) && 0){export *;__parent__, __count__; }");
tryItOut("for(let y in []);");
tryItOut("L: export *;");
tryItOut("//h\nM:\nif(1.2e3.__proto__ = null) { if (__count__.__parent__) {(<><x><y/></x></>)\t; }} else {gc()(window); }");
tryItOut("export delete;");
tryItOut("/*infloop*/for(const prop; false; (Number(('haha'.split).call(*::*.@foo,  /x/g , (get = constructor)) ? 3.141592653589793 : (let (constructor = ) <><!--yy--></>)))) {var __parent__ = __count__, __noSuchMethod__ = <><x><y/></x></>;eval }");
tryItOut("/*for..in*/for(function::__parent__ in this) let __proto__ = <><x><y/></x></>, constructor;");
tryItOut(";");
tryItOut("if((--#1=[#1#])) gc()");
tryItOut("/*infloop*/do let prop = __count__, __count__ = <x><y/></x>; while(<!--yy-->);");
tryItOut("if(({prop: new (new Function)(constructor, prop, __parent__)})) {export *; } else {return <><x><y/></x></>;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let function::__iterator__ in new (<y><z/></y>)()) {prop, __noSuchMethod__ = null;break ; }");
tryItOut("export *;");
tryItOut("with({}) var prop = <x><y/></x>;");
tryItOut("/*infloop*/for(prop; this; 1e81) {return;break ; }");
tryItOut("for(let y in [5,6,7,8]) yield this.__defineSetter__(\"__parent__\", <x><y/></x>);");
tryItOut("for(let y in [5,6,7,8]) /*for..in*/for(const __iterator__ in ((function  __iterator__ ()__proto__.isPrototypeOf(__proto__) + ( \"\" ))([window()])))\fcase prop.__iterator__ = (new false() = *::*): if([11,12,13,14].some[(yield -3/0)]) export *; else  if (window) {{} } else continue ;break; L: gc()");
tryItOut("return;\ngc()\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in *) export __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in this.__defineSetter__(\"prop\", function  prop (({ __iterator__: ({ __parent__: ({ prop: __proto__ }), __parent__: ({ __iterator__: __noSuchMethod__ }) }), __parent__: [({ __iterator__: constructor, prop: __noSuchMethod__ })] })) { /a/gi } )) /*infloop*/do {<x/>;return  /x/ ; } while((const __noSuchMethod__ = window));\t");
tryItOut("/*infloop*/for(<x/>; this.unwatch(\"prop\"); <x/>.*) prototype");
tryItOut("if(this.zzz.zzz) { if (((p={}, (p.z = __parent__ = (-0.__iterator__))()))) {/*infloop*/for(__count__ = [1,,]; window; <x/>) {(0.1);export set; } } else {{L: 0; }\ngc() }}");
tryItOut("M:switch(__noSuchMethod__) { default: gc()break;  }\n/*infloop*/L:while(__noSuchMethod__){return; }let __count__;\n");
tryItOut("export *;");
tryItOut("L:switch(__count__.__noSuchMethod__ setter= ([z1,,].__proto__).watch) { case 8: break; default: /*for..in*//* nogeckoex bug 349964 */ for  each(getter in (uneval((<x><y/></x> << __noSuchMethod__)))) {if(r) { if (<x><y/></x>) {} else {{}function(q) { return q; }, __iterator__; }} } }");
tryItOut("/*infloop*/for(return; = <x/>;  /x/ ; <x><y/></x>) {export *;prop = *::*, prop = 0.1; }\nexport *;");
tryItOut("M:switch(({ __proto__: __count__ }) = prototype = ({a1:1})) { case 1: break; yield;(this);break;  }");
