tryItOut("\n");
tryItOut("/*infloop*/L:/*\n*/do return prototype; while(<y><z/></y> < <><x><y/></x></>);");
tryItOut("/*infloop*/while(export *--){;gc() }");
tryItOut("if((*.@foo)) yield; else {/*infloop*/for(prototype = window; <x><y/></x>;  /x/g ) {{} } }");
tryItOut("var constructor, __iterator__ = *");
tryItOut("function  prototype () '' (window, <x><y/></x>);");
tryItOut("with([11,12,13,14].some){ }");
tryItOut("if(((window if ( '' )))) {const __noSuchMethod__ = 0/0, __iterator__; } else return;");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = <x/> in <><x><y/></x></>) yield null;");
tryItOut("return");
tryItOut("if(<{__parent__}> </{__parent__}>) { if (prop|=window) yield <x><y/></x>; else {{export *; } }}");
tryItOut("<x/>\nyield;\n");
tryItOut("if( /x/ ) { if (new (prototype = __noSuchMethod__, __iterator__ = true)().__defineGetter__(\"x::prototype\", (new Function(\";\")))) true;} else {{}return <x><y/></x>; }");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("return;");
tryItOut("with({prop: (__noSuchMethod__ for (__count__ in <><x><y/></x></>))})M:with((({function::__parent__: new [,,z1], __iterator__ getter: <><x><y/></x></>; })))null\t");
tryItOut("let (<x><y/></x> = window) {  /x/ ; }");
tryItOut("/*infloop*/for(new (function  __count__ () { {} } )(false); __count__ = @foo; <><x><y/></x></> | <y><z/></y>) return <x/>");
tryItOut("if(__iterator__.__parent__ = *::*) M:with({__parent__:  '' })(null);");
tryItOut("/*for..in*/for([__proto__, __iterator__] = (constructor.(eval(\"<><x><y/></x></>\", null))) in ([11,12,13,14].sort)) let(__proto__ = @foo instanceof 4., prop) ((function(){this.zzz.zzz;})());");
tryItOut("var __proto__ = <x><y/></x>\n/*for..in*/for(var __count__ in <x><y/></x>) const __iterator__;");
tryItOut("let (({ : ({ __count__: ({ __proto__: [({ __proto__: prototype }), ({ __parent__: prop, __iterator__: __iterator__ }), ] }) }), constructor: ({ __count__: [] }) }), ({ __noSuchMethod__: __parent__ })) { if(RegExp(window)) var __parent__ = true, __noSuchMethod__; else  if (new function  __count__ (__parent__) { yield *::*; } (<><x><y/></x></>, @foo)) undefined; }");
tryItOut("while((yield <x/>) && 0){#3={a:#3#}; }");
tryItOut("switch(__noSuchMethod__) { default: break;  }");
tryItOut("/*infloop*/for([({a2:z2}).hasOwnProperty(\"__count__\")].filter(eval); (((p={}, (p.z = window)())) &= __proto__.(constructor = @foo)); ~<x/>.__lookupSetter__(\"x::constructor\").propertyIsEnumerable(\"prototype\").isPrototypeOf(#1=({__parent__: __iterator__}))) {break L; }");
tryItOut("L:while((yield <x/>) && 0)(@foo);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor.constructor in 1.3) {(<><x><y/></x></>);gc() }");
tryItOut("return __iterator__;continue ;");
tryItOut("while(('fafafa'.replace(/a/g, (eval(\"yield this;\", window)))) && 0){export *;\nyield;\n }");
tryItOut("M:if((Math.sin)(<y><z/></y>)) { if (*::*) yield __count__;} else export __count__;");
tryItOut("switch(<><x><y/></x></>.__lookupGetter__(\"__iterator__\")) { case 6: <x><y/></x>; }");
tryItOut("/*infloop*/for(+-3/0;  /x/g ; (this ? null : function::prototype)) const __noSuchMethod__;");
tryItOut("-0\n");
tryItOut(";");
tryItOut("with(__iterator__){break ; }");
tryItOut("{<x/>(__noSuchMethod__);/*infloop*/for([,]; <><x><y/></x></>; <x/>) {return @foo;; } }");
tryItOut("/*for..in*/L:for(({ __count__: __count__, __count__: __noSuchMethod__ }) in (((([] = (Math.pow).call(window, @foo, ({a1:1})))).__defineSetter__)((this.__defineGetter__(\"function::prop\", function(y) { yield y; export *;; yield y; })(__noSuchMethod__))))){export __parent__; const __iterator__; }");
tryItOut("L:if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) ; else {/*infloop*/for(<x><y/></x>; prototype = window;  /x/  , <x><y/></x>)  { return @foo; } gc() }");
tryItOut("/*infloop*/L:for(var __noSuchMethod__ = __count__ = <x><y/></x>; eval(\"null\", [,])[throw null;] ? <xxx {__count__}={window\f} /> : __count__ <= (<x><y/></x>.isPrototypeOf(<y><z/></y>)); null) {constructor, __iterator__;yield;gc() }");
tryItOut("throw StopIteration;");
tryItOut("while((()) && 0){[,]; }");
tryItOut("with({__count__: })export *;");
tryItOut("let __iterator__\nlet \n");
tryItOut("L: return;\n/*infloop*/for(({__iterator__: (new Function(\"return [];\"))}); ([<><{__count__}><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></{__count__}></>].map(window) < prop); ~__proto__ = (function ([y]) { })()--) /*infloop*/for(<x/>; 1e+81;  /x/g ) {1.3; }\n");
tryItOut("/*infloop*/while((().watch)([]))let (__iterator__ = 4.) { {const __count__, __noSuchMethod__;break ; } }");
tryItOut("/*for..in*/for(let prop = ([<x><y/></x>.(undefined)].sort((1 for (x in [])))) in ({a1:1})) prop = @foo;");
tryItOut("/*infloop*/for(let prototype; ([[]])(false);  /* Comment */function(id) { return id } % .2 ? 033 : 1.2e3) {; }");
tryItOut("let (constructor, ({ prototype: ({ __noSuchMethod__: prototype, __count__: prototype }) })) { return; }");
tryItOut("do return  \"\" ; while(([]) && 0);");
tryItOut("if((-0.__lookupSetter__(\"__noSuchMethod__\"))) {break M; }");
tryItOut("if(__parent__ = __parent__ + [<><x><y/></x></>].filter(Function)) { if ((Math.pow).call(this.__defineSetter__(\"__count__\", <><x><y/></x></>), )) yield;} else yield true;");
tryItOut("throw prototype;");
tryItOut("{this.zzz.zzz; }");
tryItOut("switch(<x><y/></x>.isPrototypeOf(this)) { case 4: ;break; break;  }");
tryItOut("M:with({__parent__: #0=[[,,]]\f}){; }");
tryItOut("M:if(({ prototype: [prototype, , __count__] }) = ((this && undefined for each (__noSuchMethod__ in <><x><y/></x></>) for each (__parent__ in <><x><y/></x></>))) if (prop > <x><y/></x>)) {try {  } catch(set if __iterator__) { ( /x/g ); } catch(__iterator__) { throw 1e4; } if(<y><z/></y>.eval(<><x><y/></x></>)) {throw 0/0;yield; } else  if (({prop: ({}) })) new Function else break ; } else  if (new (function  __noSuchMethod__ () { {} } )(undefined, <y><z/></y>) >> new Array( '' , <><x><y/></x></>))  else /*infloop*/M:while(<x><y/></x>)__noSuchMethod__;");
tryItOut("(.2)");
tryItOut("/*infloop*/for( /x/ ; true.__lookupGetter__(\"__proto__\"); (*::* for each (__noSuchMethod__ in (function ([y]) { })()))) with(this){yield prop; }while((('fafafa'.replace(/a/g, new Function))) && 0){<x/>; }");
tryItOut("try { <x><y/></x> } finally { yield; } ");
tryItOut("with(eval(\"gc()\", *.hasOwnProperty(\"constructor\"))){}");
tryItOut("if(\t*) yield *::*; else  if (3/0) {(this); } else ");
tryItOut("let (({ __iterator__: [], __noSuchMethod__: __noSuchMethod__ }) = new (1 for (x in []))(false, <x><y/></x>)) { yield *; }");
tryItOut("{do yield undefined; while((__proto__) && 0); }");
tryItOut("/*infloop*/while(@foo)const constructor = <x/>, __noSuchMethod__;");
tryItOut("L:with({__count__: 0.1 || <x><y/></x>})return <x><y/></x>\nyield; const constructor;");
tryItOut("/*for..in*/for(let [__count__, prototype] = Function(__noSuchMethod__) @  /x/  = eval(\"{}\", 0.1) &= (null &= <x><y/></x>) in <y><z/></y>.constructor = <><x><y/></x></> == ((p={}, (p.z = ({__proto__: (3.141592653589793.eval(<x><y/></x>))}))()))) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__ = window.__proto__ in (([1,2,3,4].slice).call).call(@foo, ) == ((window)(<y><z/></y>))) /*infloop*/do {continue ; } while(<x><y/></x>\n.__defineSetter__(\"__parent__\", (1 for (x in []))));");
tryItOut("L:with(*)continue M;");
tryItOut("/*infloop*/for(var prototype = true.__lookupGetter__(\"constructor\"); [(prop+=*)].map(function(q) { return q; }).unwatch(\"__iterator__\"); <><bbb xmlns:ccc=\"[11,12,13,14].map\"><ccc:eee></ccc:eee></bbb></>) {/*infloop*/do (/*\n*/); while( /x/g );L: \freturn undefined; }");
tryItOut("/*for..in*/L:for(prop in function ([y]) { }) {{\f}throw <x><y/></x>; }");
tryItOut("L: yield;\nfor(let y in []);\n");
tryItOut("/*infloop*/while((this++\n))__iterator__ = <y><z/></y>, __iterator__;");
tryItOut("/*for..in*/M:for(let __iterator__ = (([__proto__.prop getter= (1 for (x in []))](Function(prototype = undefined, this), prototype = function ([y]) { })).watch(\"x::__parent__\", [<y><z/></y> === <x/>].sort(function  __proto__ (constructor, __noSuchMethod__) { export *; } ))) in <><>yyy</></>) {yield 4.;__parent__, prototype = <x/>;\t }");
tryItOut("/*for..in*/for(var  = 1e-81 in <x><y/></x>) { \"\" ; }");
tryItOut("try { for(let y in []); } finally { throw <><x><y/></x></>; } ");
tryItOut("export *;");
tryItOut("/*for..in*/M:for(let constructor in (('haha'.split)((({ __parent__: prototype, __parent__: ({ function::__parent__: [, , __proto__, ] __count__, __proto__: prop }) }) = __parent__ = constructor << (window)[@foo]).*)))(__parent__);");
tryItOut("let (prototype) { {} }");
tryItOut("{with(<y><z/></y>)__count__ }");
tryItOut("/*infloop*/L:do while((<><x><y/></x></>) && 0){__noSuchMethod__ = *; } while(true(this)); const prop;");
tryItOut("__proto__ = prop;");
tryItOut("{yield; }");
tryItOut("prop = __iterator__;");
tryItOut("L:if( /x/g .eval( /x/ )) {} else return *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <><x><y/></x></>.watch(\"__noSuchMethod__\", function(id) { return id })) { }");
tryItOut("yield <x/>");
tryItOut("if((new (Math.pow)().unwatch(\"prop\"))) { if (this.zzz.zzz) {prototype, prop; } else gc()}");
tryItOut("while((((uneval(1e-81)) = __iterator__.__iterator__)) && 0){return <x/>;export get; } try { throw __proto__; } catch(__iterator__) { try { yield; } finally { __noSuchMethod__; }  }  ");
tryItOut("let(__iterator__, <y><z/></y>) { var function::__noSuchMethod__ = __iterator__;\nconst __parent__ =  /* Comment */ /x/g , prop;\n");
tryItOut("{}");
tryItOut("{return <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((prop = prototype)(<x><y/></x>) in (__count__ = <x><y/></x>)) {if((new Object(<x/>, <y><z/></y>))) { if (1e-81)  else 'haha'.split} }");
tryItOut("L:if((({ __iterator__: ({ __count__: __iterator__ }) }) = ([1,2,3,4].map).call(new <y><z/></y> ? {(__iterator__);throw window; } : <x><y/></x>(), (), (Function).call(null, <><x><y/></x></>, true)))) yield .2; else  if ((new (gc)('fafafa'.replace(/a/g, ({}).hasOwnProperty).propertyIsEnumerable(\"__proto__\"), <y><z/></y>))) {let (export *;) { *::*; } } else /*infloop*/while(this){; }");
tryItOut("yield  '' .hasOwnProperty(\"prop\");");
tryItOut("yield  '' ;");
tryItOut("export __parent__");
tryItOut("L:  for (__parent__ in window)");
tryItOut("/*for..in*/M:for(__count__ = prop = <x/> / (prototype.( /x/ [033])) in ++window ^ constructor = <><x><y/></x></>) {/*for..in*/for\f(var prop in this) {export constructor; }export *; } const __count__;");
tryItOut("/*infloop*/M:while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>){/*for..in*/M:for(var prop((window .@*:: __count__)) in ((*::* *= this)(__noSuchMethod__ = <><x><y/></x></>))){return  /x/ ; } }");
tryItOut("L:if(new <x><y/></x>( \"\" , *)) {break L;[1]; } else  if ((function(y) { yield y; ; yield y; }).call(constructor, )) 3/0 else <x/>\n");
tryItOut("__parent__ =  '' , __count__ = <y><z/></y>\n/*for..in*/for(let __iterator__(false >>> u) in ()(((yield <><x><y/></x></>)))   ))export *;");
tryItOut("switch(prototype\n ? (undefined[<y><z/></y>]) : (window.unwatch(\"constructor\"))) { default: if(this) {(3/0);throw <x><y/></x>; } else return;break; case eval(\"yield;\", <><x><y/></x></>): yield;break; case 5:  }");
tryItOut("if(__iterator__) {export *;export *; } else {}");
tryItOut("if(<x/>) {return undefined;return; }");
tryItOut("/*infloop*/for( \"\" ; <x><y/></x>; <x/>) function(q) { return q; }");
tryItOut("/*for..in*/for(var prop in (( \"\" )(false))){__iterator__ = <><x><y/></x></> }");
tryItOut("/*for..in*/for(let (__proto__) in  /x/g .yoyo(1e+81).hasOwnProperty(\"__parent__\")) do {/*for..in*/for(const prototype in {}) {[1,2,3,4].slice } } while(((<y><z/></y> ? 3/0 : *::*)) && 0);");
tryItOut("L: {gc() }");
tryItOut("with(-1){throw .2;(Math.pow).call }");
tryItOut("L: {prototype }");
tryItOut("if(<ccc:ddd><ccc:ddd><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></ccc:ddd></ccc:ddd>) /*infloop*/for(const __proto__ =  /x/ ;  \"\" ;  \"\" ) {gc()(1 for (x in [])) } else  if (((constructor.__iterator__ getter= ( /x/ ).apply) === let (__parent__ = __proto__) constructor =  /x/ )) if(((uneval(<y><z/></y>)))) { /x/g ;{} } else {break ; } else ");
tryItOut("export *;/*for..in*/for(let [__proto__, __noSuchMethod__] = #1# in @foo) {;export prototype; }");
tryItOut("{{/*\n*/__iterator__ getter: prop }*::*; }");
tryItOut("L:with(x::__iterator__)true;");
tryItOut("if(this) {export *; } else  if (( \"\" )) yield;");
tryItOut("M:do const __count__ = <><x><y/></x></>; while((1.2e3) && 0);");
tryItOut("return ({ __parent__: __proto__, __proto__: __count__ }) = Boolean();");
tryItOut("if(yyy) gc()\n\n else  if (<zzz>new <y><z/></y>(null, -1)</zzz>) {throw @foogc() } else export *;");
tryItOut("/*infloop*/while(__count__\f.__iterator__ getter= false){throw this; }");
tryItOut("return;");
tryItOut("while(( /x/g ) && 0){let prop = <y><z/></y>; }");
tryItOut("/*infloop*/for(let prop; <><x><y/></x></>.unwatch(\"function::constructor\").__iterator__; (constructor = window) + new (((<x><y/></x>).watch)())(prototype) {} ) {break ;if([,,]) var prototype = 1.3; }");
tryItOut("M:if(undefined) return 0/0; else let this;");
tryItOut("L:if(1e81) __parent__.__proto__ else {Functionreturn; }");
tryItOut("<x/>");
tryItOut("with({__noSuchMethod__: window})/a/gi const __count__;");
tryItOut("if(undefined) gc() else  if (this) {constructor }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in  /x/g ) return __parent__;");
tryItOut("L: ");
tryItOut("L:if(([, ({ constructor: __parent__, prototype: __count__ })] = [[]])) { if (window) export *;} else break ;");
tryItOut("/*infloop*/while(((p={}, (p.z =  \"\" [<y><z/></y>])())))return;");
tryItOut("try { this.zzz.zzz; } finally { __noSuchMethod__ = __proto__; } ");
tryItOut("throw __parent__;");
tryItOut("if(<x/>) { if (<x><y/></x>) 'haha'.split else { }}\nif(@foo) \n");
tryItOut("M:if((<y><z/></y> instanceof <><x><y/></x></>) / (this.__defineSetter__(\"constructor\", function (__count__, prototype) { return __parent__ } ))) let __noSuchMethod__ = undefined, __noSuchMethod__ = 3/0; else  if (({ ({ __noSuchMethod__: __noSuchMethod__ }): __count__ }) = yield this.zzz.zzz) ");
tryItOut("return undefined\r;");
tryItOut("switch(__iterator__ = ({})--) { case ++prototype.({ __iterator__: __noSuchMethod__ }) setter= (([15,16,17,18].map(<x><y/></x>,  \"\" ))).__defineSetter__: break;  }");
tryItOut("/*for..in*/for(var prototype in [z1,,]) {}");
tryItOut("let(({ __parent__: ({ __noSuchMethod__: prototype }) }) = __noSuchMethod__, constructor) ((function(){for(let y in []);})());");
tryItOut("try { throw __proto__; } catch(__noSuchMethod__) { this.zzz.zzz; } finally { with({}) { yield ((<x><y/></x>[<x><y/>/*\n*/</x>]).*); }  } ");
tryItOut("do ; while((<x><y/></x>) && 0);");
tryItOut("if(<x><y/></x>) { if (#3={a:#3#}) {<x/>; }} else {let prototype = <x><y/></x>, __noSuchMethod__;{} }");
tryItOut(";\nthrow -3/0;\n");
tryItOut("/*infloop*/while(<><><employee id=\"1\"><name>Joe</name><age>20</age></employee><ccc:ddd></ccc:ddd></></>){throw StopIteration; }");
tryItOut("{}\nwhile((__count__ -= <><x><y/></x></>) && 0){break M; }\n");
tryItOut("/*infloop*/L:while(eval(\"export *;\", (-0)) - <y><z/></y>){(constructor);__iterator__, __parent__ = *::*\nM:if((yield  '' )) {{}throw <x><y/></x>\t; } else {function  __iterator__ (__noSuchMethod__, setter)this\tthrow function(id) { return id }; } }");
tryItOut("with({__iterator__: __parent__ = constructor})(<x><y/></x>);");
tryItOut("switch(<><x><y/></x></> << <y><z/></y>) { default: export *; }");
tryItOut("/*infloop*/while(({ get __count__(delete) { return * } , __parent__: __noSuchMethod__ })){return function(id) { return id };return; }");
tryItOut("throw prop;");
tryItOut("/*infloop*/for(let ({ prop: prototype, __noSuchMethod__: __parent__ }) = <>window<x><y/></x>yyy</>.(function ([y]) { }.__defineSetter__(\"__count__\", Math.sin)); this.__defineSetter__(\"__parent__\", (new Function(\"new Function\"))); prop = (yield null)) {(@foo);while((0/0 instanceof *::*) && 0){export constructor;var prototype = [,,z1]; } }");
tryItOut("/*for..in*/for(const __count__ = [(new (this)(<x><y/></x> .. undefined))].map((new Function(\"return;\"))) in  '' .hasOwnProperty(\"constructor\")) export __parent__");
tryItOut("/*infloop*/for((({ prototype: constructor }) = ({ prototype: prop })); __count__.('fafafa'.replace(/a/g, /a/gi)); ) {gc()/*infloop*/for(__parent__ = <x/>; new String(eval(\" /x/g \", window), this); (<x><y/></x>.(<><x><y/></x></>))) {gc() } }");
tryItOut("return #3={a:#3#};");
tryItOut("if(\f__noSuchMethod__.(undefined).@*) { if (delete (-0)) {throw __count__; }} else {<y><z/></y>;yield; }");
tryItOut("/*infloop*/for(const ({ __proto__: [({ prop: constructor })], prop: [, , ({ __iterator__: __count__, __count__: __count__ }), ({ prop: prototype })] }) = null.__noSuchMethod__; <y><z/></y> % <y><z/></y>; (p={}, (p.z = 1.2e3)()).valueOf(\"number\")) {export *;return; }");
tryItOut("/*infloop*/while(__proto__){new Function }");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(this.zzz.zzz) {(null); } else {{}yield; }");
tryItOut("while((<><x><y/></x></> += <x><y/></x>) && 0){switch([]) { case 9: case 3: L:with({__parent__: --<y><z/></y>})gc()break;  }yield; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for([prop, __iterator__] = [,].yoyo(this)() in (typeof (new Number()))) export *;");
tryItOut("with(((-0)(3, <x><y/></x>)).__lookupSetter__(\"prototype\").valueOf(\"number\"))<> </>");
tryItOut("L: {do {return get;export *; } while((let (get = true) *::*) && 0); }");
tryItOut("if(({ __parent__: __count__ }) = (new (<x/>)(\r))) let (<y><z/></y>) { (0/0); } else {/*infloop*/while(window[<><x><y/></x></>])yield;; }");
tryItOut("if((((function(y) { yield y; throw #3={a:#3#};; yield y; }).call(<><x><y/></x></>, ) for (__proto__ in window) for each (__parent__ in <x><y/></x>))).__defineGetter__(\"__parent__\", Math.pow)) ( \"\" ); else  if (__iterator__.([[1]] in __noSuchMethod__) .@ __noSuchMethod__ = <x><y/></x>) {break ;function  __parent__ (constructor)*::* } else /*infloop*/L:while([, , , \t, ] = ({ get __parent__(function::__parent__, __noSuchMethod__)4., __noSuchMethod__: this })){yield let;export *; }");
tryItOut("L:with({__noSuchMethod__: undefined}){(1e4);-0; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = null in  for each (__noSuchMethod__ in  /* Comment */<><x><y/></x></>) for each (__proto__ in <x/>) if (this)) {; }");
tryItOut("<><x><y/></x></>; const __parent__;");
tryItOut("/*infloop*/M:for(let constructor; (new Math.sin((new __proto__.(((<x><y/></x>)[@foo]))), __noSuchMethod__-=#1#)); <y><z/></y> <= <x><y/></x> && (eval(\"throw <><x><y/></x></>;\", <><x><y/></x></>))) {if((-1)) { if (([<!--yy-->]) >> (window)(4.)) /*for..in*/M:for(var __noSuchMethod__ in ((({}).__lookupGetter__)(@foo)))return;} else {break ; } }");
tryItOut("/*infloop*/for(const ({ constructor: ({ __proto__: ({__iterator__: (({}).hasOwnProperty)(<x><y/></x>) })['constructor'] }) }) = <><></> </>; <><><ccc:ddd><xxx {prototype}={<><x><y/></x></>.hasOwnProperty(\"__parent__\")} /></ccc:ddd></></> !== __count__ = __noSuchMethod__ = ({}).__proto__ = [[1]]; [__proto__ = 1.2e3.throw( /x/g )].sort(function (__noSuchMethod__, __iterator__)[({})].map(Math.sin))) {gc() const __noSuchMethod__; const prototype;continue L; }");
tryItOut("return");
tryItOut("var prop;");
tryItOut("{const constructor\nexport __noSuchMethod__\n/*for..in*/M:for(var __noSuchMethod__ in ((eval)([<><x><y/></x></>].filter(( \"\" ).watch)))){const __count__;const __proto__, __iterator__; } }");
tryItOut("if(new <x><y/></x>(window, *).__lookupGetter__(\"__parent__\")) do {return; } while((<x><y/></x>.yoyo(<><x><y/></x></>).@foo) && 0);");
tryItOut("with(constructor = 5.0000000000000000000000){var __count__ = <x/>; }");
tryItOut("let __iterator__ = 1e4;'haha'.split\nwith({}) try { return; } catch(prop if (function(){var __iterator__;})()) { export constructor; } catch(prototype if (function(){{}})()) { var __proto__ = *; } catch(function::__count__) { break ; } \n");
tryItOut("gc()\n");
tryItOut("if((String() == Math.sin ? <y><z/></y> : 5.0000000000000000000000)) let (prototype, [, ] = new RegExp(this, window)) { function(y) { yield y; throw <><x><y/></x><'/>;; yield y; } } else  if (let (({ prototype: __iterator__ }) = void __noSuchMethod__, prototype) (function(y) { yield y; {}; yield y; })) if(1.3.__proto__ = *::*) { if ((true)(<><x><y/></x></> ? *::* : <y><z/></y>)) /*infloop*/for([,,z1]; <x/>; [z1]) {export __iterator__; }} else export <><x><y/></x></>\nlet __parent__ = window; else {/*infloop*/while(*)yield [[]];export prototype; }");
tryItOut("/*infloop*/M:for(prototype; [[1]]; {} instanceof @foo) export *;");
tryItOut("if(((({__count__: <><x><y/></x></> - new (gc)((function  __proto__ (__iterator__, __count__) { const prop =  '' , constructor = __parent__; } ).apply, *::*) })) for (prop in /a/gi))) { if () let (__iterator__ = <><x><y/></x><\n/>, __noSuchMethod__ = {}) {  }} else /*for..in*/L:for(let function::.__iterator__ = null in __noSuchMethod__ = *::*) L:while((undefined) && 0)(*::*);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(const constructor = false >>= *.valueOf(\"number\"); (-1); __count__) export prototype;/*infloop*/while((* for each (__proto__ in true))){let prototype, __proto__ = [z1]; }");
tryItOut("/*infloop*/while(new window() > __parent__ = <><x><y/></x></>){(this)\t; }");
tryItOut("const __noSuchMethod__\n");
tryItOut("with(<><x><y/></x></>)return ({});");
tryItOut("if([1]['__proto__'] = (uneval(false))) arguments;");
tryItOut("prop = __iterator__;");
tryItOut("if(eval(\"({a2:z2})\", *).__defineSetter__(\"__parent__\", function (__noSuchMethod__) { return .2 } ) >= <><xxx {__noSuchMethod__}={false} /></>) {return;(<x/>); }(([,,z1] += window))((<x><y/></x>.(#1#)((<x><y/></x>).call(<x><y/></x>, -0)))) else  if (({__iterator__ getter: ({}).__lookupGetter__ })) {if(*) {constructor, <x/>;export *; } else  if (<x><y/></x>) {return;export *; } } else const __proto__;");
tryItOut("{break ;gc() }");
tryItOut("if( /* Comment */<y><z/></y> && (!<x><y/></x>)) { if (prototype = this.watch(\"prop\", <y><z/></y>)) {constructorreturn *::*; }} else (false);");
tryItOut("false");
tryItOut("if(<y><z/></y>) yield <y><z/></y>; else  if (<y><z/></y>) {yield;gc() }");
tryItOut("if(1e+81.@*) { if ((window .@ false)) export *; else {const __count__ = constructor, __parent__;export *; }}");
tryItOut("if(({__parent__: [1,,],  set prop __parent__ (__proto__, prop) { return window }  })) {{}const __proto__, __noSuchMethod__; } else {export *;let __parent__ = -0; }");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("with({}) { throw __iterator__; } ");
tryItOut("/*infloop*/L:do {this.zzz.zzz; } while(window);");
tryItOut("yield;");
