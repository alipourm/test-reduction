tryItOut("if(true.@foo) { if (<x><y/></x> *= <><x><y/></x></>[(__count__.(window))]) {function(y) { yield y; ; yield y; }/*infloop*/while(eval(\"return @foo;\", (function ([y]) { })())){yield __noSuchMethod__;throw #3={a:#3#}; } }} else {/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__.prop in constructor) {<x/> }yield; }");
tryItOut("let(__iterator__ = 3/0, window = this) { for(let y in []);");
tryItOut("const prop = arguments, constructor;\n/*infloop*/for(constructor = false; __parent__; ({a2:z2})) yield undefined;\n");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, constructor] = new 'haha'.split(1e-81) in getter = @foo) case <><x><y/></x></>: ;break; case 3: __noSuchMethod__ = __noSuchMethod__;break; , __iterator__ = 1e4;");
tryItOut("return;");
tryItOut("export __proto__;");
tryItOut("do yield; while(([<><ccc:ddd>prop</ccc:ddd></>]) && 0);");
tryItOut("/*infloop*/while([[1]])if(#1#.@*) {const __proto__ = <x><y/></x>, __count__ = <x><y/></x>; } else  if (__count__|=this.__defineSetter__(\"__iterator__\", Function)) yield gc();");
tryItOut("if((export __parent__;)) { if ((prop.prototype setter= eval)) {var prop = <x/>;\n__noSuchMethod__\n }} else {(null);export constructor; }");
tryItOut("with({}) throw each;");
tryItOut("/*infloop*/do {if(<y><z/></y>)  else  if (*::*) {export *; }do {return;yield; } while((prototype) && 0); } while(<y><z/></y>); const prop;");
tryItOut("/*for..in*/for(__count__ in __parent__.__proto__ setter= eval) undefined");
tryItOut("with({__parent__: <x><y/></x>.isPrototypeOf(__parent__)}){(<x><y/></x>);/*\n*/yield <><x><y/></x></>; }");
tryItOut("/*infloop*/do {gc() } while(([11,12,13,14].filter));");
tryItOut("yield prop");
tryItOut("/*infloop*/for(let constructor; (__count__.__noSuchMethod__ =  /x/ ); ((void  /x/ ) / ( \"\" \n))) if(eval(\"<y><z/></y>\", 3.141592653589793)) { if ((*::* .@  \"\" )) {[z1]const __count__ = <x><y/></x>; }} else let __iterator__ = <><x><y/></x></>;");
tryItOut("/*for..in*/M:for(const prop = new ((new Function(\"prop, __iterator__ = <><x><y/></x></>;\")))(<><ccc:ddd><!--yy--></ccc:ddd></>, this.__defineSetter__(\"prototype\", function(q) { return q; })) in return 0/0) {/*for..in*/for(let [__iterator__, __noSuchMethod__] = this = [,,] in <x><y/></x>) return <><x><y/></x></>; }");
tryItOut("M:\nwith(undefined.*){( '' ); }");
tryItOut("{return  '' ; }");
tryItOut("/*for..in*/L:for([constructor, constructor] = this.__defineGetter__(\"prototype\", [1,2,3,4].map) in (({prototype,  get delete(__proto__, __proto__) { yield <><x><y/></x></> }  }))) {(<><x><y/></x></>);export __parent__; }");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g,  \"\" )\t; <x/>.propertyIsEnumerable(\"prototype\"); __iterator__.prop setter= (new Function(\"continue L;\"))) break ;");
tryItOut("constructor = constructor;");
tryItOut("if(([11,12,13,14].map)) {function (prototype, constructor) { const prop = <x><y/></x>; } {} } else  if ((yield *)) export *; else const prototype;");
tryItOut("while(((__proto__ .. true)) && 0)(-3/0);");
tryItOut("L:if(void true) {}");
tryItOut("/*infloop*/for([15,16,17,18].sort(({}).hasOwnProperty, [,,]); new (function ([y]) { }).__defineSetter__(<><x><y/></x></>, #1=[#1#]); (uneval(<y><z/></y> ^ this))) export constructor;");
tryItOut("/*for..in*/for(let prototype in (((uneval(({a1:1}).__defineGetter__(\"prop\",  '' ))).prop)((1e-81.propertyIsEnumerable(\"prop\").propertyIsEnumerable(\"constructor\"))))){*::*return; }");
tryItOut("/*infloop*/L:for(3/0 in false.eval((<x><y/></x> &= (function ([y]) { })())); (-(undefined.hasOwnProperty(\"__proto__\"))); function(y) { yield y; return;; yield y; }) L: throw <y><z/></y>;");
tryItOut("/*infloop*/while(window >  \"\" ){constructor;return; }");
tryItOut("/*infloop*/for(Function( \"\" , <x><y/></x>) :: (({}) .@ constructor); ({ __iterator__: x::__proto__ }) = constructor; -0) {/*for..in*/for(const (__iterator__)(null) in ((/a/gi)(__parent__))){(1e-81); } }");
tryItOut("");
tryItOut("if(#1=new (function(q) { return q; })()()) if((this.__defineGetter__(\"constructor\", function  __count__ (prototype)export constructor;).prototype)) throw false; else  if (({ set __proto__(__proto__, prototype) { export *; } , __parent__: <y><z/></y> })) {const gc(), __count__;; }");
tryItOut("/*for..in*/for(const prototype =  /x/  in prototype) {}");
tryItOut("with({}) { try { {} } catch(__proto__ if #2= /x/g ) { (<x><y/></x>); } catch(prototype if (function(){const __noSuchMethod__ = <x><y/></x>;})()) { <x/>; } catch(__noSuchMethod__ if ([undefined])) { yield; } finally { <x><y/></x> }  } ");
tryItOut("gc()");
tryItOut("yield;");
tryItOut("return;");
tryItOut("/*for..in*/for(const __iterator__ in prop) ;");
tryItOut("/*infloop*/do return; while(<x><y/></x>.hasOwnProperty(\"prop\"));");
tryItOut("L:with({__noSuchMethod__: ([15,16,17,18].sort(prototype.__noSuchMethod__, @foo))})return false >> <x/>//h\n;");
tryItOut("L: while((window.throw(<><x><y/></x></>)) && 0){; }");
tryItOut("");
tryItOut("/*for..in*/for(var __iterator__ = (#2=true).eval((\t{ get constructor constructor (__noSuchMethod__, __noSuchMethod__) { yield <><x><y/></x></> } ,  get __count__ __noSuchMethod__ (__proto__)prototype })) in this.zzz.zzz) {M:if( '' ) gc() else  if (true) {var <><x><y/></x></> = <><x><y/></x></>;{} } else gc() }");
tryItOut("\n(<y><z/></y>);");
tryItOut("if(0.1[0]) function (__iterator__, __proto__)3");
tryItOut("return constructor; const __proto__;");
tryItOut("return prototype /= false;");
tryItOut("/*for..in*/for(let @foo in  '' .__defineGetter__(\"__noSuchMethod__\", Math.pow)++) yield;");
tryItOut("switch(__iterator__ = this) { default:  }");
tryItOut("/*infloop*/for(__iterator__; __proto__.__count__ = <x/>.constructor >> <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; +window.yoyo(<x/>)) {yield constructor;(<x/>); }");
tryItOut("throw StopIteration;");
tryItOut("try { try { for(let y in [5,6,7,8]) return *; } finally { let(__iterator__ = [11,12,13,14].sort) { throw StopIteration; }  } catch(prototype) { L:  } ");
tryItOut("/*infloop*/for(let __noSuchMethod__ = __noSuchMethod__[<y><z/></y>]; window.propertyIsEnumerable(\"__noSuchMethod__\"); (let __noSuchMethod__, __proto__)) {/*for..in*/for(var __count__ = this > [1,,] in this) {gc()gc() } }");
tryItOut("throw constructor;");
tryItOut("/*infloop*/while(<x/> ? function ([y]) { } : __parent__.@foo){yield [[]]; }");
tryItOut("M:while(((({constructor getter: (-3/0).__defineSetter__ })) % (<><x><y/></x></>)( /x/g )) && 0)return;");
tryItOut("/*for..in*/M:for(constructor in ((function  __noSuchMethod__ (__iterator__, constructor) { yield  ''  } )(*::*))){export prototype; }");
tryItOut("while((<x><y/></x>.watch(\"__proto__\", 'haha'.split).prototype = true) && 0)gc()\nreturn;");
tryItOut("export *;");
tryItOut("if((__noSuchMethod__-=<><x><y/></x></>)) {if(<><x><y/></x></>) return; else  if (\f<><x><y/></x></>) {export prop; } } else  if (#1=[#1#] <= @foo / ({constructor:  /x/  })) yield;");
tryItOut("L: yield <><x><y/></x></>;");
tryItOut("M:if((eval(\"__parent__\", [__noSuchMethod__, __noSuchMethod__, , ] = ({ constructor: __iterator__, __parent__: prop })))) {L:do yield  \"\" ; while(([,,z1].__proto__ =  /x/ ) && 0); } else return;");
tryItOut("/*infloop*/for(true(\tnull) = <><zzz>*</zzz></>; (Math.pow &= undefined); <x><y/></x>.(*)) {const prop, __noSuchMethod__; }");
tryItOut("{export __count__;{} }");
tryItOut("/*infloop*/L:for(__parent__; <><x><y/></x></>[null]; ((yield ({})))) return prop;");
tryItOut("__count__.__count__ = __iterator__;");
tryItOut("throw StopIteration;");
tryItOut("if(window) { if (__parent__) ;} else {constructor;yield ({a2:z2}); }");
tryItOut("switch((constructor)) { case 1: const __proto__\n__count__ = <x><y/></x>;break; {({}).hasOwnProperty }break; break; default: ((-1))\n<x/>;case __count__ = <x><y/></x>: /*for..in*/for(const [__noSuchMethod__, __count__] = ([<x><y/></x> for each (__parent__ in null)])\n in prop) {return; }break; case  /x/ : __noSuchMethod__;break; case 4: L:do export __proto__; while((<x><y/></x>) && 0);case (#3={a:#3#}):  }");
tryItOut("yield ;");
tryItOut("try { this.zzz.zzz; } catch(__parent__) { var __proto__, __iterator__; } finally { this.zzz.zzz; } ");
tryItOut("if(__iterator__) gc() else  if ('fafafa'.replace(/a/g, (@foo).__defineSetter__)) throw *; else {const prototype = *, prop = {};; }");
tryItOut("__iterator__ = undefined;{}");
tryItOut("if(( ''  >>> \f<y><z/></y>)) { if (this.zzz.zzz) let (constructor) { return\n; }} else {/*for..in*/for(var [prop, __count__] = new ((1 for (x in [])))() in let (prop) function ([y]) { }) {(new Function(\"return;\")) } }");
tryItOut("M:do __parent__; while((null.@* .@ (({}).hasOwnProperty).call(constructor,  '' )) && 0);");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in <x><y/></x>) \fexport __iterator__;");
tryItOut("if((let (__parent__, prop = -3/0) prop%=undefined)) if(Number()) { if (()) {return  /x/ ; }} else const constructor = (-1), __noSuchMethod__; else  if (((({ get prop(__proto__) { return; }  })) &= undefined ? <x/> : null)) let  { yield *::* } ;");
tryItOut("/*infloop*/for(\fvar __noSuchMethod__ = true;  \"\" ; ({})) {gc()throw @foo; }");
tryItOut("{do {4.return constructor; } while((window) && 0) }");
tryItOut("with(((<x><y/></x> :: *) = constructor = (\n3.141592653589793 *= __count__)))/*for..in*/for([__iterator__, __count__] = __iterator__ =  /x/g  in <x><y/></x>) {export __iterator__;gc() }");
tryItOut("if('fafafa'.replace(/a/g, [1,,] ? #1# : false)) //h\n{ if ((prototype = try { each } finally { yield; }  = (@foo.isPrototypeOf( /x/g ) ? false : (p={}, (p.z = 1e81)())).@foo)) {/*infloop*/for((new function  __parent__ () { ; } ( /x/g , (-1)).propertyIsEnumerable(\"__proto__\") >> __parent__.eval( /x/g )); \n /x/ .@*; *) {eval{<x/>; } }yield  /x/g ; }} else { }");
tryItOut("const constructor = this, delete = <><x><y/></x></>; const __iterator__;");
tryItOut("{/*infloop*/for(var ({ get: prototype, prop: constructor }) = (eval(\"<>@foo.yoyo(@foo).propertyIsEnumerable(\\\"__proto__\\\")</>\", 1e+81)); ({prototype: <x><y/></x>}); function(id) { return id }) {prop = true;constructor, prototype; } }");
tryItOut("/*infloop*/do (1 for (x in [])) while([1,,]);");
tryItOut("/*for..in*/for(var [__count__, __parent__] = * > window in 1.2e3) return <x/>;");
tryItOut("let (__parent__ = [*]) { L: {(-3/0).watch } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in new (<x><y/></x>.throw(true))()) {throw @foo;throw StopIteration; }");
tryItOut("if(__iterator__.__noSuchMethod__.__defineGetter__(\"__parent__\", (1 for (x in [])))) { if (new ((<y><z/></y>)[false])(__count__ = <><x><y/></x></>, constructor.constructor).__lookupGetter__(\"constructor\")) throw this;} else {(({ prop: __proto__, __proto__: __noSuchMethod__ })); }");
tryItOut("return;");
tryItOut("let ([({ ({ __iterator__: __noSuchMethod__ }): __proto__, try { with({}) {  }  } catch(__proto__) { throw StopIteration; } finally { export __iterator__; } : ({ __noSuchMethod__: ({ __count__: ({ __noSuchMethod__: prop }) }) }) }), ({ prop: [({ __iterator__: [], __count__: \f({ prop: ({ prototype: prototype }) }) })], __count__: [, , , \f] }), , ({ __noSuchMethod__: [({ prop\f: ({ __noSuchMethod__: [__proto__, prototype], __parent__: ({ __noSuchMethod__: __parent__ }) }), __noSuchMethod__: __count__ }), , ({ __parent__: ({ each: constructor, __parent__: ({ __count__: __noSuchMethod__, __iterator__: __noSuchMethod__ }) }), __count__: constructor }), ], __proto__: [, ({ prototype: ({ prototype: ({ __noSuchMethod__: __iterator__ }), function::prop: ({ __count__: __proto__ }) }) })] })] = (__proto__.watch(\"constructor\", function (__proto__)new (*::*)(false))), prototype) { switch(<x><y/></x>.__lookupSetter__(\"prop\")) { default: ( \"\" );case  ''  *=  /x/g : break;  } }");
tryItOut("{/*for..in*/M:for(var __noSuchMethod__ = <x><y/></x> in @foo) {break ;let __parent__; } }");
tryItOut("/*infloop*/for(let __proto__ = ({__noSuchMethod__: (gc).call( /x/ , \t<x><y/></x>, <x><y/></x>) }).*; #2=({prop:  /* Comment */prototype+= '' }); eval(\"export __count__;\", <y><z/></y>)) {for(let y in [5,6,7,8]) const constructor = *::*;if(<y><z/></y>) const constructor; }");
tryItOut("for(let y in []);");
tryItOut("L:if(-1) (true).watch else  if (<y><z/></y>) return; else export *;");
tryItOut("while((true + @foo) && 0)if((yield  /* Comment */<x/>)) { if (<><bbb xmlns=\"#1=[#1#]\"><!--yy--></bbb></>) {break ; } else *::*;}");
tryItOut("if((yield ([eval((-1), <><x><y/></x></>)]))) /*for..in*/for(__proto__ in (((new Function(\"continue L;\")))(null)))prop; else {gc() }");
tryItOut("L:if((-0)) {(constructor); } else yield;");
tryItOut("{yield;var getter = <x><y/></x>, __iterator__; }");
tryItOut("L:do {true } while((window.__proto__ = <><x><y/></x></>) && 0);");
tryItOut("yield");
tryItOut("M:if((#2=[@foo] && (new (3/0)(<x><y/></x>)))) { if ((yield  /x/g .eval(@foo)) >>> <><bbb xmlns:ccc=\"__noSuchMethod__.__iterator__ setter= undefined\"><ccc:eee></ccc:eee></bbb></>) {/*for..in*/for(var __parent__ = true in 1.3) break M; } else {while((this.zzz.zzz) && 0){(-0);gc() } }}");
tryItOut("/*infloop*/for(([1,2,3,4].map).call(<y><z/></y>.valueOf\f(\"number\"), \nthis.propertyIsEnumerable(\"__iterator__\")); *::* , (function ([y]) { })() || [,,z1].*; __noSuchMethod__ = <><x><y/></x></> < true) return  '' ;");
tryItOut("while((<x/>) && 0){return <x><y/></x>; }");
tryItOut("{const __noSuchMethod__ = [];if( '' .@foo\f) throw this; else  if (gc(-1, <><x><y/></x></>)) continue M; else { '' ; }/*for..in*/for(const [__iterator__, __parent__] = <>(new Function(\";\"))</> in 0x99) {constructor;export *; } }");
tryItOut("do {return; } while(((prototype = )) && 0)\n/*infloop*/for(const __noSuchMethod__; <><x><y/></x></>; this) return;yield eval(\"window\", ({}))\n");
tryItOut("yield;");
tryItOut("L:while((<><bbb xmlns=\"(p={}, (p.z = function ([y]) { })())\"><!--yy--></bbb></>) && 0){( /x/ \n); }");
tryItOut("/*infloop*/while(eval(\"continue ;\", )){@foo }");
tryItOut("/*for..in*/for(const (function ([y]) { })() in Boolean()) {with({}) prop; }");
tryItOut("throw constructor;");
tryItOut(";");
tryItOut("/*infloop*/for(var ({ prop: prop }) = <x><y/></x>; __iterator__; __proto__[-3/0]) {var prop, __count__; }");
tryItOut("let (new [1,2,3,4].map(1e-81.throw(this), <x><y/></x>).constructor = constructor *= eval(\"break ;\", true), ({ constructor: __proto__ })) { let(({ prototype: __proto__ }), prototype) ((function(){let(prototype = 0.1, __noSuchMethod__) { ({}).hasOwnProperty})()); }");
tryItOut("if(eval(\"<><x><y/></x></>\", [,,z1])) { if ((<x/>\n)) {export __proto__;export *; } else {prototype; }}");
tryItOut("while((new ({}).__lookupGetter__( /x/g .valueOf(\"number\"), <><x><y/></x></>)) && 0){({ __proto__: __iterator__, prop: function::__iterator__ }) = (delete <><x><y/></x></>);let (({ constructor: [, ], __proto__: ({ prop: prototype }) }), constructor) { export *; } }");
tryItOut("L:do {return;throw <x/>; } while((({prop:  \"\"  })) && 0);");
tryItOut("{const __parent__ =  \"\" .__iterator__; }");
tryItOut("__count__ = prop;");
tryItOut("/*for..in*/for(const constructor = function::__count__.__proto__ getter= (undefined).apply in <><x><y/></x></>) {; }");
tryItOut("with([window]){export __proto__;export constructor; };");
tryItOut("throw __proto__;");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (prototype) in __noSuchMethod__ = <><x><y/></x></>) {gc() }");
tryItOut("M:with(({ __proto__: ({ constructor: __count__ }), __proto__: (\n{ __proto__: ({ __count__: prototype }), __count__: function::get }) }) = * != (this)[<><x><y/></x></>]){throw StopIteration; }");
tryItOut("let (__parent__ = false) { return []; }");
tryItOut("/*infloop*/for(({ __proto__: prototype }) = [{}].sort([[1]]); ({ get __proto__() { yield  /x/  }  }); (__iterator__\n)) return <><x><y/></x></>;");
tryItOut("export *\nyield;");
tryItOut("let (__iterator__ = new <><x><y/></x></>(), __iterator__ = <x><y/></x>.(.2)) { if(export __count__) { if \f([.2].map((1 for (x in [])))) {export *; } else {export *; }} }");
tryItOut("yield <x/>;");
tryItOut("do var constructor = false, constructor = ({a2:z2}); while((<><x><y/></x></>) && 0);");
tryItOut("export *;M:while((<x/> &= @foo) && 0)throw true;");
tryItOut("if((arguments | [[]])) yield; else gc()");
tryItOut("/*infloop*/for(let __iterator__; <xxx {null}={this.__defineSetter__(\"__noSuchMethod__\", ((#3={a:#3#}).watch).apply).__defineSetter__(\"__count__\", eval)} />; prop.__proto__ = true) throw <x><y/></x>;");
tryItOut("L: break ;");
tryItOut("if(eval(\"yield [z1];\", (true.__lookupSetter__(\"__proto__\")))) {( /x/g ); }");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) try { let(__iterator__ = [[]], __count__ =  /x/g ) { throw <y><z/></y>; } finally { try { __parent__ = prop, __proto__ = <><x><y/></x></>; } finally {  }  } ");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each((__parent__) in <x><y/></x>) M:with(([1].valueOf(\"number\")) in <x><y/></x>.(<x><y/></x>))export *; }");
tryItOut("/*for..in*/for(const constructor = Iterator() in (0/0)) ; const constructor;");
tryItOut("with({}) { let(({ __proto__: __iterator__ }) = function::__count__.__noSuchMethod__ = window = this) { return; } ");
tryItOut("/*infloop*/for( '' .constructor; (/a/gi)().((({ __noSuchMethod__: ({ __noSuchMethod__: __iterator__ }) }) = __count__)); <x/>.__lookupSetter__(\"prop\") if ( /x/g )) {(<x><y/></x>);break ; }");
tryItOut("{L:if(<x><y/></x>) {constructor;yield; } else {continue ;gc() }M:if(@foo) {(undefined);break ; } }");
tryItOut("");
tryItOut("if(<><x><y/></x></>) {continue ; } else  if (window) {{} } else {; }");
tryItOut("/*infloop*/for(let ({ __proto__: ({ __iterator__: ({ prototype: constructor, __parent__: __count__ }) }), __iterator__: ({ __count__: __proto__, __proto__: prop }) }) = __iterator__.__noSuchMethod__; (<x><y/></x>)() && !true; #1=[#1#]) {gc() }");
tryItOut("/*infloop*/L:for((); (({}).hasOwnProperty); null.prop) {return; }");
tryItOut("var constructor = 1.2e3;throw window;");
tryItOut("__proto__.__parent__");
tryItOut("return;");
tryItOut("(__count__);");
tryItOut("/*infloop*/for(true; new ((*).watch)(false, [,,z1]) *= ([<x><y/></x>]).yoyo( '' .__proto__); (+(<x/>[ '' ]))) {yield;/*infloop*/while(constructor.__count__ ? 1e4.__count__ = 1e-81 : null.__lookupSetter__(\"__noSuchMethod__\")){} }");
tryItOut("if([,,].__defineGetter__(\"__count__\",  { throw 0/0; } ).__noSuchMethod__) /*infloop*/for(\flet __count__; <><x><y/></x></>; constructor) ;");
tryItOut("(__proto__.constructor = [[,]].sort((1 for (x in []))));");
tryItOut("L: continue M;");
tryItOut("with({}) return __proto__ = *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__.__proto__ = , __noSuchMethod__; in window) {yield <x><y/></x>;; }");
tryItOut("switch((x::__count__ = __parent__ % (uneval(window >>>=null)))) { default: case 2: L: {__count__;export *; }break ;break;  }");
tryItOut("gc()\nif(new ((-1))() += (({__proto__:  /x/  }))) { if (((1 for (x in [])))((new Date()), eval(\"while((@foo) && 0){let __iterator__; }\", 3.141592653589793))) {} else if((let (prototype = __proto__, constructor = <x/>) this)) yield prototype;}");
tryItOut("var prototype = [,,z1], __count__ =  /x/ ; const __parent__;");
tryItOut("/*infloop*/for(const ({ __count__: ({ __proto__: [, __iterator__, , []] }), constructor: [] }) = __iterator__.__noSuchMethod__ = (<x/> /= this for (__parent__ in this) if (this)); constructor.__lookupSetter__(\"constructor\") ..  /* Comment */<y><z/></y>; window.__defineGetter__(\"prop\", ((__proto__).watch).apply)) /*for..in*//* nogeckoex bug 349964 */__count__: (yield <><x><y/></x></>)");
tryItOut("if(#3={a:#3#}.__defineSetter__(\"__parent__\", function(q) { return q; })) export prototype; else ");
tryItOut("if(function ([y]) { }) { if (prop) {gc() } else {throw <><x><y/></x></>;((eval).apply).call }}");
tryItOut("let(__parent__) { yield (window);;");
tryItOut("{yield; }");
tryItOut("/*infloop*/for(const constructor; __parent__.__parent__; <x/>.__iterator__ = * * *::*.__defineGetter__(\"__count__\", (1 for (x in [])))) {for(let y in [5,6,7,8]) export __proto__; }");
tryItOut("/*for..in*/for(var [__iterator__, __parent__] = -1 in (p={}, (p.z =  /x/g )())) /*infloop*/for(var ({ __noSuchMethod__: __parent__ }) = new RangeError(); ((function (__parent__, __count__) { const __iterator__ = <y><z/></y>; } ).call(false, )) ? (#0=//h\n[@foo]) : void function::__noSuchMethod__; (<x><y/></x>.(<x/>)).__defineGetter__(\"constructor\", false)) with(<x><y/></x>);");
tryItOut("let __count__, __iterator__ = <y><z/></y>\n");
tryItOut("with({__proto__: (new <x><y/></x> >= [](@foo\n\t)).valueOf(\"number\")}){( '' ); }");
tryItOut("/*for..in*/for(var __parent__ = [15,16,17,18].sort(Math.pow, <><x><y/></x></>).propertyIsEnumerable(\"__count__\")\t in prop) with({}) { yield (-1); } ");
tryItOut("each = __parent__;");
tryItOut("throw __count__;");
tryItOut("with({__count__: ((uneval(undefined.valueOf(\"number\"))))}){do (prop); while((void *) && 0); }");
tryItOut("/a/gi");
tryItOut("/*infloop*/do __parent__ = <x><y/></x>, prototype = false; while(new ( /x/g  & <y><z/></y>)(<y><z/></y>.unwatch(\"__proto__\")));");
tryItOut("/*infloop*/\fL:while( /x/ )export *;");
tryItOut("do {} while((#1=[#1#]) && 0);");
tryItOut("while(([1,,]) && 0){return *\n }");
tryItOut("if(function(y) { yield y; yield <x><y/></x>;; yield y; }) {export __parent__; } else  if ( /x/  .@*:: prototype) {if(<><x><y/></x></> ? [,,] :  /x/ ) { if (({constructor: this })) {(<x/>);export *; }} else {[1,2,3,4].slice } }");
tryItOut("with({}) { return; } ");
tryItOut("L:switch([15,16,17,18].filter([1,2,3,4].map, <y><z/></y>)) { case eval(\"\", null): prototype = undefined;break; default: return <x><y/></x>;break;  }");
tryItOut("break L\nwhile(((eval(\" /x/ \", <x><y/></x>))) && 0)/*infloop*/for(<><x><y/></x></>;  /x/g ; this) {return; }\n");
tryItOut("/*infloop*/while(export prototype;){let prototype; }");
tryItOut("with({}) { gc() } ");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = <x><y/></x>.valueOf(\"number\") in <><x><y/></x></>) *;");
tryItOut("return;");
tryItOut("__count__ = prototype;");
tryItOut("throw StopIteration;");
tryItOut("continue ;");
tryItOut("/*for..in*/for(__proto__ in (((1 for (x in [])))(__count__.constructor = window.valueOf(\"number\"))))gc()");
tryItOut("\n");
tryItOut("/*for..in*/L:for(var prop in [z1,,]) {gc()let __parent__ = <><x><y/></x></>, __iterator__ = __count__; }");
tryItOut("/*for..in*/for((this) in ((new (window)(true)).yoyo((<><x><y/></x></>)))) /*for..in*/for(let __parent__ in try { ({}).__lookupGetter__ } finally { return *::*; } ) {true;<x><y/></x>; }");
tryItOut("with(__parent__ = <x><\ty/></x>){return;(<x><y/></x>); }");
tryItOut("throw __count__;");
tryItOut("/*infloop*/for(yield (((-0)).watch).call(<><x><y/></x></>, *, <><x><y/></x></>); (prop.(*)); eval(\"return;\", this)) prop;");
tryItOut("let([__iterator__, try\f { let([({ __iterator__: __noSuchMethod__ }), __proto__, __iterator__, , ]) { let(({ __parent__: __parent__ })) ((function(){for(let y in [5,6,7,8]) -0})()); } catch(__count__ if ) { return; } catch(__proto__ if (function(){return (<x><y/></x>.(<x><y/></x>)).isPrototypeOf(function(id) { return id }.prototype);})()) { try { try { throw <y><z/></y>; } catch(__count__ if true) { throw  /x/g ; } catch(prototype) { gc() } finally { ; }  } catch(__count__) { export *; } finally { return; }  } catch(prop) { try { let(try { false } catch(__parent__) { yield; } ) ((function(){[1,2,3,4].slice})()); } catch(__parent__ if this.__defineSetter__(\"prop\", [[1]])) { __iterator__ = __iterator__; } catch(__count__ if (function(){with({}) { break M; } })()) { for(let y in []); } catch(constructor if this.zzz.zzz) { throw prop; }  } , prop, ] = *, __iterator__) ((function(){for(let y in []);})());");
tryItOut("{export *\n }");
tryItOut("prototype = constructor;");
tryItOut("/*for..in*/for(__iterator__ = ~(<x><y/></x>).apply in (<x><y/></x>.( /x/g )) ?  /* Comment */-3/0 :  /x/g .__defineSetter__(\"__iterator__\", function(y) { yield y; let __count__, __proto__ = window;; yield y; })) if(<x/>.hasOwnProperty(\"__noSuchMethod__\")) const __proto__ = false, __noSuchMethod__ = <x><y/></x>; else  if (<x/>) yield [,];");
tryItOut("L:if([15,16,17,18].filter(function(q) { return q; }, null >>>=[[]])) let prototype = <><x><y/></x></>, __iterator__ =  /x/g ; else {gc() }");
