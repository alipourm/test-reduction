tryItOut("/*for..in*/for(var [[1]].function ([y]) { } in  /x/ ) {const break ; = false, __parent__;let (__proto__) { with({prop: 1e4}){prototype =  ''  } } }");
tryItOut("if((this.__defineGetter__(\"__noSuchMethod__\", function  __parent__ (prop, __proto__) { return <y><z/></y> } ))) L:switch(<y><z/></y> || ([15,16,17,18].some(function  __proto__ () { eval } , true.__defineSetter__(\"window\", (window).watch)))) { default: /*for..in*/L:for([__iterator__, constructor] = true.__lookupGetter__(\"__proto__\") in new (gc())()) var prototype;break; /*for..in*/for(var [__proto__, prototype] = <><x><y/></x></>.* in ( /* Comment */false)) {}break; case 6: L:with({__parent__: <y><z/></y> - <y><z/></y>}){let prototype, __proto__ =  /x/g ; }break;  }");
tryItOut("with({__parent__: (yield __iterator__)}){{}gc() }");
tryItOut("yield <><x><y/></x></>; const prop; const prototype;");
tryItOut("/*for..in*/for(var __parent__ = <y><z/></y> in __count__ in (-1)) {<!--yy-->; }");
tryItOut("/*for..in*/for(let prototype = {} in null) default: break; ");
tryItOut("{return 1e81; }");
tryItOut("\nconstructor;");
tryItOut("do {gc() } while(((([1] +  \"\" ).__lookupSetter__(\"constructor\"))--) && 0);");
tryItOut("do {var __proto__ = <><x><y/></x></>;yield constructor; } while((([arguments])) && 0);");
tryItOut("switch(__count__) { default: break; case 5: {}case 8: [1];case 1: export *;break; case 7: break;  }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = (uneval(((yield (new Function)(__proto__)))((__proto__ = __noSuchMethod__), this.__defineGetter__(\"__proto__\", arguments)).__defineSetter__(\"__parent__\", (window).call(function ([y]) { }, )))) in yield __count__) {function(id) { return id } }");
tryItOut("(Function).apply\nif(<><x><y/></x></>) {{} } else  if ( /x/g ) ;\n");
tryItOut("__parent__, __count__");
tryItOut("/*infloop*/for(var [, (\f{ __parent__:  '' ['__iterator__'], __noSuchMethod__: prop }), __iterator__, [[({ prototype: ({ prototype: prototype }) }), __count__, , ], ], ] = this.__defineSetter__(\"__count__\", Math.pow); constructor = <y><z/></y>[<><x><y/></x></>]; new (<x><y/></x>)(<x/>)) {return;let __iterator__ = <><x><y/></x></>, __noSuchMethod__ = null; }");
tryItOut("__count__ = function::__count__");
tryItOut("M:with({__count__: yield window .@*::  /x/g }){}");
tryItOut("return;");
tryItOut("{gcvar constructor =  /x/g ; }");
tryItOut("yield;");
tryItOut("yield");
tryItOut("M:do while(((prop = __proto__ = <x><y/></x>.eval((constructor = __count__)))) && 0)__count__; while((#1=[#1#]) && 0);");
tryItOut("export *;");
tryItOut("/*infloop*/while((@foo *= 0 <= *.constructor\n))throw function::prototype;");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */M: for  each(<x><y/></x> in @foo) {prototypereturn; } while(constructor.__noSuchMethod__ = <x><y/></x>)\n");
tryItOut("{this.zzz.zzz; }");
tryItOut("/*for..in*/L:'for(var prototype in  try { for(let y in [5,6,7,8]) ; } catch(prototype) { return; } finally { for(let y in [5,6,7,8]) break ; } ) <y><z/></y>;");
tryItOut("/*for..in*/for(const constructor = (({__parent__: <><x><y/></x></>})) in (<x><y/></x> ? <x><y/></x> : undefined)) {(<><x><y/></x></>); }");
tryItOut("const prop, __parent__;\n;\n");
tryItOut("with({constructor: null})<><x><y/></x></>; const constructor;");
tryItOut("if(__parent__ = ({setter getter: (1 for (x in [])), constructor: <x><y/></x> })) { if ((this.__defineGetter__(\"__count__\", function () { export constructor; } ))) switch(@foo /= 1e81.unwatch(\" { return window } \")) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x>\n<y/></x>) export *;if(<><x><y/></x></>) {function ([y]) { }; } else  if (this) {function(q) { return q; } }break;  }} else {gc()( \"\" ).__defineSetter__ const __proto__; }");
tryItOut("/*infloop*/for(undefined;  /x/g ; <><x><y/></x></>) Function\nif((\t<{yield}><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></{yield}> &= ( '' ().watch(\"__iterator__\", -0)))) {if(@foo) { if ( '' ) break M;} else try { return; } catch(__noSuchMethod__ if <\fx><y/></x>) { __noSuchMethod__ = *; } catch(__iterator__) {  } finally { {} }  }");
tryItOut("{/*for..in*/([__proto__, ] = (yield [,]) in window)  }");
tryItOut("let __parent__ = *::*, constructor = <><\tx><y/></x></>;\n/*infloop*/for(function::prototype; {}; <x><y/></x>) let prop = window, __parent__;\n");
tryItOut("yield (throw 0/0);");
tryItOut("/*infloop*/L:do {gc()throw <y><z/></y>; }\f while(<y><z/></y>);");
tryItOut("{/*for..in*/for(prototype in (((constructor).__defineSetter__)(<y><z/></y>))){this; } }");
tryItOut("with({}) ");
tryItOut("/*infloop*/L:while(let (__proto__ = @foo, function::__parent__)  /x/ )/*for..in*/for(const __iterator__ in (((#2=window.valueOf(\"number\")).call)(((prototype &= get)((uneval(1e-81)))).__lookupGetter__(\"__count__\")))){do {gc()const __iterator__ =  /x/g ; } while((__noSuchMethod__) && 0); }");
tryItOut("/*infloop*/do if(({})) { if (__parent__) {; } else default: break; } while(function::__count__ = (p={}, (p.z = 033)()));");
tryItOut("__proto__");
tryItOut(";");
tryItOut("/*infloop*/while(<>\f<x><y/></x></>)<x><y/></x>{}\nthrow #1#;");
tryItOut("const __parent__ = function(id) { return id }, __proto__ = true\n");
tryItOut("if(-3/0) { if ( /x/g ) {{}yield; } else {break L; }}");
tryItOut("/*infloop*/for(prop = this; <><x><y/></x></>; undefined) {; }");
tryItOut("/*for..in*/L:for(const __count__ in (__parent__)) if(((let (__count__ = <x/>, export *;) (-0)).hasOwnProperty(\"prop\"))) {(undefined);__count__, __proto__; } else  if ((({prototype: [[1]].yoyo(<y><z/></y>) }))) ; else (*::*);");
tryItOut("with({__parent__: null.__defineGetter__(\"__iterator__\", gc)}){if(<x><y/></x>) { if (<><x><y/></x></>) {const __proto__, __noSuchMethod__ = 3/0;return; } else var constructor;} }");
tryItOut("{throw <><x><y/></x></>;([[]]); }");
tryItOut("return;");
tryItOut("let (prototype = @foo) { /a/gi }");
tryItOut("let(__iterator__ = 1.3.__lookupSetter__(\"__iterator__\"), __count__) { with({}) yield (yield __parent__);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in  \"\" ) @foo; const prototype;");
tryItOut("prop = prop;");
tryItOut("break L\n");
tryItOut("{}\nyield *;");
tryItOut("/*infloop*/for(let ({ prop: [({ constructor: ({ __parent__: ({ __proto__: ({ __noSuchMethod__: prototype }), __iterator__: ({ prop: constructor, prop: <x/> }) }) }) }), ({ __iterator__: ({ prototype: __count__ }), constructor: ({ __iterator__: ({ __proto__: constructor, __proto__: [__count__] }) }) }), [], , [, , [__count__], ({ __iterator__: \t[__noSuchMethod__, __iterator__], constructor: [, __proto__, __parent__] }), ({ prop: __parent__, constructor: ({ __count__: __iterator__, delete: __proto__ }) })]], __iterator__: __proto__ }) = (this.__defineSetter__(\"prototype\", ({}).__lookupGetter__) / (-1).constructor == *::*); (Number(true[<><x><y/></x>/>])); Number()) /*for..in*/for(let [__proto__, constructor] = false in @foo) {let prototype, __noSuchMethod__ = <y><z/></y>;break ; }");
tryItOut("with({prop:  /* Comment */ '' }){/*infloop*/do {return false; } while(\n-0.*);let ([, __count__, , ]) { __parent__; } }");
tryItOut("if(#3={a:#3#}[__parent__]) { if ((__iterator__ =  \"\" )) {let __noSuchMethod__;(function ([y]) { }).watch }} else return <><x><y/></x></>;");
tryItOut("/*infloop*/for(new (1 for (x in []))(); constructor = prop.eval(<x><y/></x>\n); ( /x/  ^= <x/>)) ");
tryItOut("let (__parent__ = __noSuchMethod__.()) { {; }\n }");
tryItOut("if((Iterator(undefined))) { if ((undefined instanceof  /x/ )) /*for..in*/for(let __iterator__ in ((Math.sin)(__noSuchMethod__.prop getter= function  __count__ () { return  \"\"  } )))gc() else M:if((yield 1.2e3 ? prop :  '' )) {yield  /x/g ; } else {}}");
tryItOut("/*infloop*/do constructor = window; while(this\t.__defineGetter__(\"__parent__\", ({}).__lookupGetter__));");
tryItOut("/*infloop*/M:do return \t<x><y/></x>.(<><x><y/></x></>); while( '' );");
tryItOut("/*infloop*/M:for( /x/ ; __parent__.( '' ); eval(\"yield;\", constructor = undefined)) let(__parent__ = [11,12,13,14].some, __count__) { throw <x><y/></x>;");
tryItOut("L:if(__iterator__ = (this.zzz.zzz)) (); else {do {;export __count__; } while(((<x><y/></x>)( /x/g )) && 0);export *; }");
tryItOut("switch( /x/g ) { case #1=[#1#]:  }");
tryItOut("if('fafafa'.replace(/a/g, __noSuchMethod__)) { if (true) {yield <><x><y/></x></>;var ; }} else  ");
tryItOut("{gc() }");
tryItOut("/*for..in*/for(const __iterator__ = window for (__count__ in @foo) in __proto__.(<y><z/></y>)) __noSuchMethod__;");
tryItOut("if((<x/>.__defineSetter__(\"prototype\", (this).watch))) { if (*::*) new Function else {throw true; }}\nyield;\n");
tryItOut("/*infloop*/M:while(eval(\"var __noSuchMethod__ = <y><z/></y>;\", (__count__ = <><x><y/></x></>.isPrototypeOf(@foo)))){/*for..in*/for(var prototype in __proto__) /*for..in*/for(const prototype in <x/>) yield; }");
tryItOut("do {yield ({}); } while((({})) && 0);");
tryItOut("M:if(*::* >> <><x><y/></x></>) { if (<x><y/></x> |= <x><y/></x>) yield  '' ;} else export prop;");
tryItOut("\ffalse\t\n");
tryItOut("with(__noSuchMethod__.((this = new (<x/>)(1e+81)) > eval(\"undefined\", 1.2e3))){yield <y><z/></y>;/*infloop*/for(var __count__ = this; @foo; false) { /x/g ;var prop, __count__; } }");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", function (__parent__) { return ({a1:1}) - prototype } )) {const constructor;\nyield window;\nreturn; }");
tryItOut("with(window)return <x/>;");
tryItOut("/*for..in*/for(const __parent__ = (eval(\"yield 1e4;\", <x><y/></x>).__defineSetter__(\"__parent__\", ({}).__lookupGetter__).unwatch(\"__proto__\")) in  \"\" .@foo) {L: {constructor, __iterator__ = [1,,]; } }");
tryItOut("/*for..in*/for(var __iterator__ = [__proto__.eval(3)].sort(gc) in (1e+81.propertyIsEnumerable(\"__noSuchMethod__\"))) {}");
tryItOut("with({}) __proto__ = prop;");
tryItOut("if((((yield undefined)))) yield; else  if (({prop: (<x><y/></x>), __noSuchMethod__: new Iterator((new RangeError())) })) <x><y/></x>; else {prop;/*infloop*/for(const constructor = <x/>; *; <x><y/></x>) {(function ([y]) { })()let __iterator__ = this, __noSuchMethod__ = 1.3; } }");
tryItOut("if((function(id) { return id }[0x99].hasOwnProperty(\"__parent__\"))) M:if(<y><z/></y>) \freturn  '' ; else yield; else  if () {yield; } else yield <><x><y/></x></>;");
tryItOut("if(([undefined].sort((undefined).call))) {var __noSuchMethod__ = this;continue M; } else ");
tryItOut("{return; }");
tryItOut("__count__ = constructor __parent__;");
tryItOut("if(('fafafa'.replace(/a/g, new Function(null)))) { if ((({ __proto__: __iterator__, __proto__: ({ prop: __count__ }) }) = [, , ({ __noSuchMethod__: __count__ }), __iterator__])) {throw  '' ; } else L:if(null) { if (this) {export __noSuchMethod__; }} else Math.sin} const prop;");
tryItOut("while((((1.2e3 <= false).@foo <= <x><y/></x>++)) && 0){;return __iterator__; }");
tryItOut("/*for..in*/for(var false / <><x><y/></x></>['__iterator__'] in ((function(q) { return q; })(033.unwatch(\"prototype\").eval())))__proto__ = __count__;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (let (__parent__) eval(\"return 4.;\", (delete \n(#2=function(id) { return id })))) in <employee id=\"1\"><name>Joe</name><age>20</age></employee>) throw (<><x><y/></x></> && <x><y/></x>);");
tryItOut("yield eval(\"gc()\", {});");
tryItOut("M:if(typeof eval(\"(window);\", false)) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <y><z/></y>) return; } else  if (<><x><y/></x></> in window) {/*\n*/return <x><y/></x>;const __parent__; } else {(<><x><y/></x></>); }");
tryItOut("if(<><><ccc:ddd><!--yy--></ccc:ddd></></>) ; else export *;");
tryItOut("if((<x><y/></x>.eval(new (<x><y/></x>)()))) {const __iterator__, x::__noSuchMethod__; } else {x::__parent__, __noSuchMethod__; }");
tryItOut("if( \"\" ) {continue ; } else //h\n if (null) throw window;\t");
tryItOut("throw prototype;");
tryItOut("if((new function(y) { yield y; export prototype;; yield y; }())) {M:if(<><x><y/></x></>) const __count__ = @foo; else  if (__proto__) {; } else {(__parent__);var 1e-81 = [[]]; } } else {L: gc() }");
tryItOut("/*for..in*/for(var prop.prototype in ((Function)(<x/> |= window .. function(q) { return q; }())))if((1e4 ? false : true) - -1 ? <y><z/></y> : <><x><y/></x></>) {{033yield; } } else (arguments);");
tryItOut("M:if(@foo) {{3.141592653589793;yield <x><y/></x>; }{} } else  if (__parent__.unwatch(\"__iterator__\")) {/*infloop*/while(#1#){; } }");
tryItOut("let(prop, ({ constructor: __count__, prototype: ({ __parent__: prop, prototype: constructor }) }) = undefined.valueOf(\"number\")) { throw StopIteration;");
tryItOut("L: continue L;");
tryItOut("let(prop = (window.((new (function(y) { yield y; __noSuchMethod__ = <><x><y/></x></>, constructor = <x><y/></x>;; yield y; })(this)))), __parent__) { prototype = __count__;");
tryItOut("L:if(window) {{} } else  if (<y><z/></y>) return __parent__; else {( /x/g );gc() }");
tryItOut("let (__proto__) { return; }");
tryItOut("if(*::*) *::*; else  if ((this)((Date( /x/ )))) {(1e81);yield 3; } else ");
tryItOut("while((<x><y/></x>++.__count__ = this.__defineGetter__(\"prop\", this)) && 0)yield <x/>;");
tryItOut("/*infloop*/M:do export *\n while(prototype.prop = [(prop) if (<y><z/></y>)]);");
tryItOut("{({});yield; }");
tryItOut("if(null) {yield //h\nfalse;{} }");
tryItOut("throw StopIteration;");
tryItOut("<x><y/></x>;");
tryItOut("export *;");
tryItOut("/*for..in*/for([__count__, prototype] = @foo in undefined) {{} }");
tryItOut("L:if((constructor.__lookupGetter__(\"prop\"))) { if ([4.].filter(function(y) { yield y; continue L;; yield y; })) yield; else {yield;return <><x><y\f/></x></>; }}");
tryItOut("return\nreturn false;");
tryItOut("/*infloop*/while(<></>)let prototype = <x><y/></x>;");
tryItOut("/*for..in*/L:for(prop.__noSuchMethod__ in eval(\"\", (prototype = <x/>))) if(<><x><y/></x></>) ; else  if ( \"\" ) throw [z1,,];");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__, prop) { let(({ constructor: __proto__ }) = (yield window)) { export __noSuchMethod__;");
tryItOut("return <x><y/></x>; const __iterator__;");
tryItOut("L:if(this) return;");
tryItOut("{const __noSuchMethod__, __iterator__\n\nif(this.zzz.zzz) { if (([this for each (prototype in window)])) {throw [1,,];return; } else function::__parent__ = <x><y/></x>, prototype;} }");
tryItOut("/*for..in*/for(const prototype = ({a1:1}) in <y><z/></y>) __proto__");
tryItOut("with((p={}, (p.z = null.prototype = *)()).unwatch(\"constructor\")){M:with(@foo)return; }");
tryItOut("/*infloop*/for(yield <><x>\f<y/></x></>.propertyIsEnumerable(\"constructor\") :: (p={}, (p.z = <x><y/></x>--)()); ({ try { {} } catch(prototype if undefined) { {} } catch(__iterator__ if (function(){yield  /x/ ;})()) { return; } catch(__iterator__ if (function(){let __parent__, constructor = <><x><y/></x></>;})()) { yield; } catch(prototype) { let function::prop = function(id) { return id }, prop; } : prop }) = __noSuchMethod__ = *[new (__iterator__)(window, 0)]; yield __proto__|=[prototype].sort(<><x><y/></x></>)) {; }");
tryItOut("L:with((delete window).hasOwnProperty(\"__noSuchMethod__\").valueOf(\"number\"))/*infloop*/while((new Array()))throw <x><y/></x>;");
tryItOut("/*for..in*/for(/*\n*/* in (((new Function(\"L:with((p={}, (p.z =  '' )()).prototype){if(<><x><y/></x></>) { if (<><x><y/></x></>) {export __parent__; \\\"\\\" ; } else throw window;} }\")))(__count__))){{gc()return; } }");
tryItOut("yield");
tryItOut("/*for..in*/for(__noSuchMethod__ in [[1]]) return; const __parent__;");
tryItOut("if((<xxx>{constructor}</xxx>.(RegExp( \"\" )))[(uneval(([__count__, , ] = prototype = __parent__.__defineSetter__(\"__iterator__\", new Function))))]) /*infloop*/do prop while(window); const constructor; else {return;this.throw(<><x><y/></x></>); }");
tryItOut("export __proto__;\n{return <x/>;<x><y/></x>; }\n");
tryItOut("let (__proto__ = <><x><y/></x></>.@*) { export __parent__;\nreturn;\n }");
tryItOut("if(new String()) { if (window) {yield;{} }} else {L: {{return; } }with([[]]){throw *; } }");
tryItOut("/*infloop*/while([11,12,13,14].sort){ }");
tryItOut("/*for..in*/(new Iterator())");
tryItOut("L: const __noSuchMethod__ = <x><y/></x>, __proto__;");
tryItOut("(*);let __iterator__, prototype;");
tryItOut(" '' ; const each;/*infloop*/for(let constructor; <x><y/></x>; <x/>) __iterator__, prop;");
tryItOut("return;");
tryItOut("M:with({__parent__: 1e+81.constructor = <><x><y/></x></>.@*.prototype = 0/0}){const constructor = prop\n/*for..in*/for(let prototype in undefined) {throw {}; } }");
tryItOut("return window;");
tryItOut("/*for..in*/for(const [prototype, __parent__] = [__parent__].sort(*) in *::*) /*infloop*/for((-0)(); __proto__.(<x/>.*); (new (function () { yield <><x><y/></x></> } )(__parent__ = <x><y/></x>, prop;)) < (__proto__)) {Math.pow }");
tryItOut("__iterator__ = <x><y/></x>, __iterator__;\n/*infloop*/for(let __parent__; ({__iterator__: __iterator__ = <><x><y/></x></> }); *::*) (function ([y]) { })();\n");
tryItOut("if(new (({ prototype: __iterator__, __proto__: each }) = (function ([y]) { })() != this(true ^ window))([11,12,13,14].sort, <y><z/></y> ? <y><z/></y> : <x/>)) {this.zzz.zzz; } else  if ((void 0) .@*:: (function () { yield  /x/  } )(this)) {continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in *) {continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in [<><x><y/></x></>]) const __parent__, [;");
tryItOut("let(prototype = false, [, , prop, , ] = (<><x><y/></x></>.__lookupGetter__(\"__parent__\"))) ((function(){with({}) { return; } })());");
tryItOut("L: /a/gi");
tryItOut("(window);");
tryItOut("/*infloop*/for(__proto__ = [1] |  \"\" ; null; constructor) {with({__noSuchMethod__: ( \"\" .valueOf(\"number\"))}){const __iterator__;; } }");
tryItOut("");
tryItOut("{switch(1e-81) { case 8:  } }");
tryItOut("/*infloop*/M:for(<><x><y/></x></>.watch(\"__parent__\", (try { __count__; } catch(__proto__ if (function(){arguments;})()) { yield -0; } finally { break M; } ).__defineSetter__); eval(\"(<><x><y/></x></>.propertyIsEnumerable(\\\"each\\\"))\", <><x><y/></x></>); <x><y/></x>.__parent__ = 1.2e3) {var prop = 033, __count__; }");
tryItOut("L:if(#0=(constructor.__iterator__ setter= [1,2,3,4].slice)) { if (<><bbb xmlns=\"<bbb xmlns=\"(yield *)\"> </bbb>\"><!--yy--></bbb></>) {if(({__iterator__: (__proto__ = __iterator__) })) (false); else  if (((function ()undefined)(yield this))) {if(({a1:1})) { if (<><x><y/></x></>) {throw <y><z/></y>, 5.0000000000000000000000; } else gc()}prototype = true, __noSuchMethod__ = @foo; } else gc() } else {break ; }}");
tryItOut("while((<xxx>{__proto__}</xxx>.(3.141592653589793)) && 0)if([[1]]) { if (({__iterator__:  \"\" })) {return prop;__proto__ = this; }} else {return; }");
tryItOut("M:if(new Function((constructor for each (prop in window) for each (constructor in  \"\" ) for each (prop in window) if (//h\n)), [])) <><x><y/></x></>;");
tryItOut("/*for..in*/for(var [prototype, constructor] =  in window) {yield; }");
tryItOut("{}");
tryItOut("{}<><x><y/></x></>\n");
tryItOut("__iterator__ = function::__noSuchMethod__;L:if((({}).hasOwnProperty)( \"\" )) return; else {<x><y/></x>;return; }\n");
tryItOut("L: var __proto__ = <><x><y/></x></>, __parent__ = @foo\n/*infloop*/while(new (function () { yield [[]] } ).call()){return <><x><y/></x></>;{} }");
tryItOut("L:while((#2=[ /x/g ].isPrototypeOf(this.prototype = false)) && 0){const constructor = <x/>; }");
tryItOut("");
tryItOut("const constructor = <x><y/></x>;");
tryItOut("{gc() }");
tryItOut("do throw StopIteration; while((((undefined.unwatch(\"__parent__\") for each (__iterator__ in 1.2e3) for each (prototype in *::*) for each (__count__ in <><x><y/></\tx></>)))) && 0);");
tryItOut("/*for..in*/for(__parent__ = (({__iterator__ getter:  /* Comment */@foo }))[(this.zzz.zzz)] in <x><y/></x> <= *) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <><x><y/></x></>) {yield *;const __count__, prop; }");
tryItOut("{const __proto__ =  /x/ ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [({constructor: <x><y/></x>, delete: <x><y/></x> })].filter/*\n*/(((<><x><y/></x></>).apply).apply) in (new (function  prototype ()<><x><y/></x></>)( /* Comment */this, this))) {export *;/*infloop*/for( \"\" ; return 0x99;; <x><y/></x>) var __noSuchMethod__; }");
tryItOut("switch(--__iterator__ = __noSuchMethod__) { default: return 1e+81;\n/*for..in*/for(let ([, prototype, ])(<x/>) in <x><y/></x>) {;let constructor, __count__ = __iterator__; }\nbreak; break; case this >> *::*: case 7: break;  }");
tryItOut("/*infloop*/for(\n__proto__.__defineGetter__(\"prop\", function  yield (undefined.__proto__, __proto__) { yield __parent__.prototype getter= new Function } ); prototype @ <x><y/></x> for ( ''  in  \"\" ); (<><bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb></> & <xxx>{prototype}</xxx>) === [({a1:1})].some(/a/gi)) ;");
tryItOut("/*infloop*/for((constructor.__parent__ setter= <y><z/></y>).__count__.hasOwnProperty(\"__iterator__\"); [, __proto__] = [15,16,17,18].sort(function(q) { return q; }\f, <x/>); (((this.__defineSetter__(\"constructor\", Function))(__proto__) for (__proto__.prototype in [[]]) for (__noSuchMethod__ in \f<x><y/></x>) if ( /x/g )))) {prototype getter: (new Function(\"(*::*);\"))yield; }");
tryItOut("/*for..in*/for(var [constructor, __noSuchMethod__] =  /x/g  in this)  '' ;");
tryItOut("with({__noSuchMethod__: ()}){prop, __parent__ = <x/>const __noSuchMethod__; }");
tryItOut("{continue ;return <><x><y/></x></>; }");
tryItOut("let __noSuchMethod__; const __iterator__;");
tryItOut("{let (__parent__, __proto__) { return <x/>; }export *; }");
tryItOut("/*infloop*/for(__proto__; prop = this; [15,16,17,18].sort(<x><y/></x>, true)) {__parent__, __iterator__; }");
tryItOut("/*infloop*/for(let __iterator__; ({ get __noSuchMethod__ __noSuchMethod__ ()#2=(\f{prototype: *}), __count__ setter: ({}) }); ((this.prop) = )) yield;");
tryItOut("__proto__");
tryItOut("/*for..in*/M:for(const <><x><y/></x></>\f['function::__parent__'] in ((((prototype).__defineSetter__).call)((new (new Function(\"yield <x><y/></x>;\"))(*, *::*)))))function(y) { yield y; constructor, __parent__;; yield y; }");
tryItOut("/*infloop*/L:do {break ;\n__parent__\n } while((eval(\"1e-81\", ({})(<><x><y/></x></>))));");
tryItOut("");
tryItOut("if((new (<x><y/></x>)(prototype))) {gc()Math.sin } else  if ( /x/ ) {return prop; }");
tryItOut("with(<x><y/></x> .@*:: @foo){function (__count__) { undefined; } \n\n }");
tryItOut("/*for..in*/for(let [constructor, __proto__] = ({ get __noSuchMethod__(__proto__) '' ,  get function::prop __proto__ (__noSuchMethod__)__proto__ }) in 3/0) /*for..in*//* nogeckoex bug 349964 */ for  each(\fvar __iterator__ in false) {this;yield (-1); }");
tryItOut("/*infloop*/for(var __parent__; #2=<x><y/></x>; (__parent__.prop) = __proto__ = 3.141592653589793) __iterator__ = 3.141592653589793");
tryItOut("Function");
tryItOut("yield;");
tryItOut("L: continue ;");
tryItOut("return;");
tryItOut("/*for..in*/for(const prototype in ((/a/gi)((({__parent__:  /x/g })) + (new Function()))))/*for..in*/for(prototype = <y><z/></y> in  '' ) {var __proto__ = <y><z/></y>, __parent__ = this; }");
tryItOut("/*infloop*/do {break L; } while( '' );");
tryItOut("/*infloop*/for((\fprop.__iterator__ getter= (function ([y]) { })().eval(this(<><x><y/></x></>).__defineSetter__(\"prop\", function (constructor, prop) { yield window } ))); constructor; new function  __parent__ ()<><x><y/></x></>(__noSuchMethod__)) {(<>yyy</>); }");
tryItOut("/*infloop*/for(const \r[({ __iterator__: __parent__, __noSuchMethod__: __count__ }), ({ __parent__: constructor }), __noSuchMethod__] = ~<y><z/></y>; \nyield 1e-81;  /x/g  || <><x><y/></x></>) yield  /x/ ");
tryItOut("L: __noSuchMethod__ = <x><y/></x>\f, function::__noSuchMethod__ = prototype;");
tryItOut("gc()");
tryItOut("with({}) { yield; } ");
tryItOut("if(prop = new Exception(this)) {gc() } else  if (yield <x><y/></x>)) {export *\n\f<><x><y/></x></> } else let (__noSuchMethod__, __count__) { let (__iterator__) { return this; } }");
tryItOut("*::*;");
tryItOut("with({__parent__: ('fafafa'.replace(/a/g, (1 for (x in []))))}){return prototype; }");
