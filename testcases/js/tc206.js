tryItOut(";\nexport constructor;\n");
tryItOut("__proto__ = constructor;");
tryItOut("yield <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>;");
tryItOut("/*infloop*/for(const __iterator__; #1#; <><x><y/></x></> = prop) (<x/>);");
tryItOut("/*for..in*/for(var __noSuchMethod__\t in this.zzz.zzz--) {let __count__ = <><x><y/></x></>;{} }");
tryItOut("/*infloop*/for(<x><y/></x>.prototype = __noSuchMethod__ = <x><y/></x>; new (__noSuchMethod__ = constructor)((<x><y/></x>.(*::*)), <x><y/></x>); ({\nprototype: <><x><y/></x></>[(function ([y]) { })()]}) -= return <y><z/></y>;.isPrototypeOf([,,z1])((({__proto__: <x><y/></x> })))) ");
tryItOut("L:if([ /x/ ].map((-1)))  else  if (0 .@x:: <><x><y/></x></>) {__iterator__ } else {{}[z1,,]; }");
tryItOut("var prop = <><x><y/></x></>;");
tryItOut("M:do {const __count__, prop = this;export *; } while((constructor) && 0)\n");
tryItOut("L: {throw <x><y/></x>; }");
tryItOut("L:if(__proto__) { if (<x/> .@x:: undefined) throw <><x><y/></x></>; else {__iterator__ }}");
tryItOut("M:if(null > undefined.*) export *\n;");
tryItOut("if(033) { if ((yield * >>>=yield 0/0.*)) /*for..in*/L:for(__proto__ in window) { } else let(__iterator__, prototype = <x><y/></x>) ((function(){this.zzz.zzz;})());}");
tryItOut("with(<x><y/></x>)(Math.sin).apply\nreturn 5.0000000000000000000000;");
tryItOut("if(* << ((case 1: default: break; )(<><x><y/></x></>))--) { if (([prototype = <><x><y/></x></>].map(({}).__lookupGetter__))) while((__parent__) && 0)let (prototype =  /x/g , __iterator__ = undefined) { Math.pow }} else __iterator__");
tryItOut("if({}) {{} }");
tryItOut("with({}) { let(constructor = function  __proto__ () { return __noSuchMethod__ } .isPrototypeOf(((@foo)[<x/>].isPrototypeOf(<><x><y/></x></>.valueOf(\"number\"))))) ((function(){with({}) { {} } })()); } ");
tryItOut("L: while((function::__iterator__.( /x/g ) >>> typeof 0.1) && 0){M:while(('fafafa'.replace(/a/g, function  function::prop ()<x/>)) && 0){var __noSuchMethod__, __count__ = <x/>;break M; } /x/  }");
tryItOut("/*infloop*/for(const prototype; ({__iterator__ setter: function  __proto__ () { yield this }  }); __proto__.([])) ( /x/g )\n");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*infloop*/do return <x><y/></x>; while(true);");
tryItOut("with({__parent__: ({__parent__: null, __parent__: prop })})const __iterator__;");
tryItOut("throw __proto__;");
tryItOut("");
tryItOut("let(__proto__, constructor) { {}");
tryItOut("/*for..in*/M:for(const __iterator__ in -3/0) {gc() }");
tryItOut("/*infloop*/");
tryItOut("{}");
tryItOut("L: {do {yield;let x::case 4: break; (constructor);break; default: case *: export constructor;case 2: return ({a1:1});break;  = *; } while((<x><y/></x>) && 0);with({__count__: <y><z/></y> ? ; : null})function () { return <y><z/></y> }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in [1,,]) continue M;");
tryItOut("if(<x><y/></x>(3/0, [1,,])) { if (({__parent__: this, prop setter: (new Function(\"\\fbreak ;\")) })) {(033).watch } else {({});<y><z/></y> }}");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(1.2e3; __parent__ = new (Math.sin)(); new <x><y/></x>([,,])) (null);");
tryItOut("yield");
tryItOut("M:if(eval(\"__noSuchMethod__\", <><x><y/></x></>.throw(__count__))) {gc(); }");
tryItOut("{return; }");
tryItOut("/*for..in*/for(let __parent__ in (1e-81.__defineGetter__(\"__proto__\",  \"\" ))) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__iterator__) in <><x><y/></x></>) {let constructor = 0, prop =  \"\" ;export __iterator__; }");
tryItOut("gc()");
tryItOut("/*infloop*/for(@foo * *; this; ((this.__defineSetter__(\"__count__\", [1,2,3,4].slice))(<x><y/></x>.__lookupGetter__(\"function::constructor\")))) {export *;/*infloop*/while(window)export *; }");
tryItOut("__count__(({})) = __iterator__;");
tryItOut("__iterator__ = constructor;");
tryItOut("__parent__");
tryItOut("M:if(__parent__: __iterator__-=__count__.__parent__) { }");
tryItOut("return;");
tryItOut("while((prototype = ({ each: __noSuchMethod__, prop: __proto__ }) , false) && 0){if(<><x><y/></x></>) { if ( /x/g ) (<><x><y/></x></>);} else {return;function(q) { return q; } } }");
tryItOut("with({}) for(let y in [5,6,7,8]) try { let(prop =  \"\"  :: null) ((function(){__parent__ = __count__;})()); } catch(__parent__) { throw StopIteration; } ");
tryItOut("yield ( /* Comment */this)[(new __iterator__(<><x><y/></x></>, <x/>))];");
tryItOut("if([] + window.__defineSetter__(\"prototype\", Math.pow)) { if (<{prototype}><x><y/></x>yyy</{prototype}> === [15,16,17,18].some([1,2,3,4].slice, <x><y/></x>)\n) {yield; } else export constructor\nreturn <><x><y/></x></>; const __iterator__;}");
tryItOut("M:if(constructor) {export prototype;if(this.__defineGetter__(\"prop\", Math.sin)) { if (<x><y/></x> >= prop) (<x/>); else ;} } else  if (([({ __proto__: function::prototype }), , ({ prop: __iterator__ }), ] = (new Function(1.3))).propertyIsEnumerable(\"__noSuchMethod__\")) {yield <><x><y/></x></>; } else {let (function::prototype, __count__) { export __proto__; }L:with(-0)yield; }");
tryItOut("this.zzz.zzz;");
tryItOut("if((__iterator__ = <><x><y/></x></>).__defineGetter__(\"__iterator__\", function  getter () { yield * /=  /x/g  } )) {return;/*infloop*/for(window; constructor = <><x><y/></x></>; (<x><y/></x>.(*))) {return; } } else {(<x/>);return; }");
tryItOut("const constructor, prop");
tryItOut("__parent__ = <xxx {__proto__}={(~1.2e3.__lookupSetter__(\"__count__\"))} />;");
tryItOut("throw  '' ;\nyield;\n");
tryItOut("with({}) break ;");
tryItOut("L:with(__parent__ = @foo.prototype//h\n){__proto__ = window }");
tryItOut("{({}).hasOwnProperty }");
tryItOut("L: {return __proto__;throw []; }");
tryItOut("{break M;/*infloop*/for(__count__; null; (<y><z/></y>.@foo)) {gcarguments } }");
tryItOut("while(((\n.yoyo(<x/>))) && 0){/*for..in*/M:for(const [__noSuchMethod__, __proto__] = (null.hasOwnProperty(\"__noSuchMethod__\").throw((uneval(<y><z/></y>)))) in <><x><y/></x></>) let __iterator__, constructor = undefined;do {;yield; } while((@foo) && 0); }");
tryItOut("try { throw StopIteration; } catch(__noSuchMethod__ if (function(){throw __iterator__;})()) { let(__iterator__ = constructor.watch(\"__iterator__\", (new Function(\"return;\"))), __count__) ((function(){yield constructor: ({a1:1});})()); } catch(__iterator__) { try { with({}) /*infloop*/for(var __count__ = <y><z/></y>; true; @foo) {; } } finally { for(let y in []); }  } ");
tryItOut("var constructor = <x><y/></x>;");
tryItOut("with({__proto__: __noSuchMethod__ = <y><z/></y>}){(function (__noSuchMethod__, prop)[z1,,]/*\n*/).apply{} }\nconst prop = <y><z/></y>, __noSuchMethod__;\n");
tryItOut("while(( /x/g \n) && 0){/*infloop*/M:for(const prop; <x/>; [1,,]) {;let __parent__ = <x><y\f/></x>, __noSuchMethod__ = [,,]; } }");
tryItOut("M:with(((<><x><y/></x></>)[ /x/g ])){\n }");
tryItOut("/*infloop*/M:for(window; (<x><y/></x>)(__iterator__, prop); new (\n<x/>)((Number((window @ <x><y/></x>)) if (#1=[#1#].__proto__)), new ((this >> null))()).__noSuchMethod__) (<><x><y/></x></>);\n/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in  /x/ ) {__noSuchMethod__, __proto__ = *; }\n");
tryItOut("/*infloop*/for(let __parent__; prototype = @foo; __parent__|=4.) __parent__, prototype = null;");
tryItOut("/*for..in*/for(let prototype.__parent__ in ((function(y) { yield y; yield;; yield y; })(prop = prop)))/*infloop*/for(__parent__ = null; (__parent__.__parent__ = __count__); (this.zzz.zzz)) { }");
tryItOut("yield;");
tryItOut("/*infloop*/for(prop; (yield ); eval(\"this\", *)) {continue L;gc() }");
tryItOut("with(new (new Function(\"export prop;\"))())return;");
tryItOut("while(((<x><y/></x>.valueOf(\"number\"))) && 0)return 1e-81;");
tryItOut("L: let ([, constructor, __iterator__, __proto__, prop]) {  }");
tryItOut("{return this;\f }\ngc() const prop; const __count__;");
tryItOut("/*for..in*/for(const __proto__ = -0 in [ '' ]) {(<x><y/></x>.(*::*)); }");
tryItOut("if(<><x><y/></x></>) { if (prototype) export __parent__;} else {return;export __parent__; }");
tryItOut("if(new <x><y/></x>) gc() else  if (prototype &=  /x/ ) {gc() } else {; }");
tryItOut("try { prototype = <y><z/></y>, constructor; } catch(__iterator__ if window) { __parent__, gc(); } catch(prototype) { let __count__, __proto__; } return;");
tryItOut("do <><x><y/></x></>; while((<x><y/></x>) && 0);");
tryItOut("while(( /* Comment */<><x><y/></x></>) && 0)let (__proto__) { if(__parent__ = 1e4) { if (((<y><z/></y> if ((-0))))) throw undefined;} else yield function(id) { return id }; }");
tryItOut("with({}) { ; } ");
tryItOut("/*for..in*/M:for(var [prop, __iterator__] = window\n.@foo in null) {; }");
tryItOut("L: {export __parent__; }");
tryItOut("prototype = prototype;");
tryItOut("/*infloop*/for(constructor = #3={a:#3#}; prototype = ( /* Comment */((#2=({__proto__: 0}))\n)); this.__defineSetter__(\"prop\", [1,2,3,4].slice)) {if(<x><y/></x>) yield; else  if (*::*) yield <><x><y/></x></>; else const prop, prototype; }");
tryItOut("do yield <x><y/></x>; while((@foo) && 0);");
tryItOut("with({prototype: prop = 0.1.propertyIsEnumerable(\"prop\")})L: export constructor");
tryItOut("M:if(<x/>.throw(<x><y/></x>)--) { if (__proto__.__iterator__) {{gc() } } else function  constructor (constructor, __parent__) { return @foo } }");
tryItOut("if(this) yield ({a2:z2});");
tryItOut("try { yield (<x><y/></x> ^  ''  / <x/>(#1#)); } catch(constructor if __noSuchMethod__) { with({}) return; } catch(__noSuchMethod__ if function::prop.__iterator__ = <x/>.__lookupSetter__(\"__parent__\")) { export *; } catch(__parent__) { __parent__ = prop; } finally { let(__parent__ = (__count__ = <><x><y/></x></>)) { (<x><y/></x>)(constructor) = prop; } ");
tryItOut("/*infloop*/do {L:with({__parent__: null}){gc()gc() } } while(__parent__ = <><x><y/></x></>);");
tryItOut("let ([({ __noSuchMethod__: (function(y) { yield y; yield <x><y/></x>;; yield y; }), __parent__: __proto__ }), , ({ constructor: ({ __noSuchMethod__: [constructor, , ] }), __parent__: [, , , ]\t })], prototype) { /*for..in*/for(3/0['__proto__'] in yield *::*) {yield;; } }");
tryItOut("if(<x><y/></x>.__proto__) let __iterator__; else  if (()) {<x><y/></x>; }");
tryItOut("L:while((new (#2=({x::prototype: this}).__defineGetter__(\"__count__\", Function))()) && 0){yield __noSuchMethod__ }");
tryItOut("/*infloop*/for(({__noSuchMethod__: null,  get __iterator__ prop (__count__) { yield ({}) }  }); new (<x/> for each (__proto__ in @foo))((new (yield constructor)( /x/g (), false)), <x><y/></x> >>>=<><x><y/></x></>); <><ccc:ddd> </ccc:ddd>\t</>) /*infloop*/L:for(const [__parent__, , ] = yield <y><z/></y>; (function(y) { yield y; {}; yield y; })(); this ^ window) {continue M;var __proto__, x::__proto__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/for([__parent__, , __parent__, , ] = (({__proto__: <y><z/></y>, constructor getter: eval })); (<><x><y/></x></>.valueOf(\"number\")).yoyo(<bbb xmlns=\"*::*\"><x><y/></x><ccc:ddd></ccc:ddd></bbb>); true.__lookupSetter__(\"prototype\")) {export *;\fyield; }");
tryItOut("/*for..in*/for(__parent__ in ([<><x><y/></x></>])) {/*for..in*/for(__proto__ in __proto__ = *::*) {; } }");
tryItOut("if(<bbb xmlns=\"__count__\">yyy</bbb> = __iterator__) continue M; else ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const *::*.__count__ in undefined) {return; }");
tryItOut("L:if(Function()) {const prop, __noSuchMethod__ = *;__noSuchMethod__; }");
tryItOut("M:with({prop: (<x><y/></x> @ <x><y/></x>)})return;");
tryItOut("/*infloop*/for(var ({ prop: [({ constructor: __noSuchMethod__, __iterator__: [, , , ({ __parent__: [, ] })] }), , [, , , prototype, __parent__], , ], prototype: prototype }) = (true .@ this.unwatch(\"__iterator__\") == true); new *::*(<x><y/></x>, __parent__); ({ function::__parent__: ({ prototype: [, , __parent__] }) }) = (<><x><y/></x></> for each (__count__ in <><x><y/></x></>))) {M:with({prop: __iterator__.__proto__}){gc() } }");
tryItOut("if(<y><z/></y>.eval(this)) const __proto__; else  if ((__proto__ = window\f <<= constructor)) (*);");
tryItOut("with(__parent__ = prototype)export __iterator__;");
tryItOut("if([, , __iterator__ = <><x><y/></x></>, , __noSuchMethod__] = delete <y><z/></y>) {switch([,,z1]) { case 5:  } }");
tryItOut("/*for..in*/L:for(const __proto__ = __noSuchMethod__ ? <><x><y/></x></> : <y><z/></y> in <x/>) let __iterator__, __proto__;");
tryItOut("export *");
tryItOut("/*infloop*/do {break L; } while(true)\n");
tryItOut("let(constructor, __proto__) { throw __noSuchMethod__;");
tryItOut("/*for..in*/for<> </> (let /function::__noSuchMethod__ in *::*) {export __iterator__; }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("while((undefined) && 0)yield  /x/ ;");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor.__iterator__ in prototype = __parent__) {return prop;if((undefined @ #3={a:#3#})[(#2=[<x><y/></x>])]) function (prototype, __noSuchMethod__) { return [1] }  else  if (new 1e+81()) __noSuchMethod__; else yield  /x/ ; }");
tryItOut("/*infloop*/L:while(((p={}, (p.z =  '' )())))yield;");
tryItOut("if(([15,16,17,18].sort((1 for (x in [])), function ([y]) { }))) { if (constructor.(this.__defineGetter__(\"__count__\", function  constructor (({ __parent__: __proto__ }), [, __proto__, __iterator__, , __parent__]) { yield * } .(<x><y/></x>)))) {L:if(__parent__ = <><x><y/></x></>) { if (<><x><y/></x></>\n) {yield;export *; }} else prototype;/*infloop*/M:for((arguments.__iterator__ =  { return <x/> } ); (new Function(\"continue ;\"))(); eval(\"(new Function(\\\"export *;\\\"))\", this)) {return ({a2:z2});throw @foo; } }} else {throw (-1);if((null)()) /*for..in*/for(var [prop, __parent__] = <><x><y/></x></> in true) {gc()<x><y/></x>; } }");
tryItOut("return;");
tryItOut("L: { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((<x><y/></x>.__lookupSetter__(\"constructor\"))((__noSuchMethod__ = __noSuchMethod__)) in (p={}, (p.z = <x/>)())) <><x><y/></x></>;");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = #1# in __proto__) {undefined;return <><x><y/></x></>; }");
tryItOut("/*for..in*/for([__parent__, __count__] = <>(eval).call( /x/ .__lookupGetter__(\"prop\"), <x><y/></x>[[]])</> in (undefined)(null, -1)) ");
tryItOut("if(()) {try { yield <x><y/></x>; } finally { {} }  } else /*for..in*/for(let [prop, __parent__] = 1e-81 in <x><y/></x>) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (function::__count__) in [z1]) let __parent__, prop;\n{}\n\t");
tryItOut("switch((\n(function(id) { return id }.watch(\"__parent__\", [1,2,3,4].slice))) < (@foo)(({prop: null}), (\n<x><y/></x>))) { case 6: if((prop.constructor)) {{} } else {return <x><y/></x>;yield <x><y/></x>; }break; case 9: case 4: const __iterator__, __parent__; }");
tryItOut("if(-3/0) M:switch(null) { default: const constructor;break; break; case  /x/g : return;break; case @foo: {}break; case 2: break;  }");
tryItOut("/*infloop*/for(const [] = new Object()\n; ++[false]; export __noSuchMethod__) {var prototype\nundefined;; }");
tryItOut("\n");
tryItOut("throw (-0);");
tryItOut("/*infloop*/for(({__iterator__ getter: new Function }); ({__count__: Iterator(1e-81)}); __count__.unwatch(\"__noSuchMethod__\")) {{}yield; }");
tryItOut("/*infloop*/while(((undefined.throw((<><x><y/></x></>)[<x/>]) ? new RegExp(-1, window) : prop = __proto__) <<= ([] = (yield *::*)))){/*for..in*/for(constructor =  ''  in this) {}gc() }");
tryItOut("/*for..in*/for(var prop in 0.1.__iterator__) function ()<x><y/></x>");
tryItOut("L:if( /* Comment */window) { if ((typeof ((new Function).call(new <x/>, -3/0)))) {(3.141592653589793);prototype; }} else let prop, __parent__ = <x/>;");
tryItOut("if((#1=[#1#]).call((new Function()), ((uneval(window))))) {let prop;return; } else (<x><y/></x> :: <x><y/></x>);");
tryItOut("{yield this;if(<y><z/></y>) ; else  if ( /x/g ) return <><x><y/></x></>; else __proto__; }");
tryItOut("with({}) try { constructor = __count__; } catch(__count__) { yield #2=<x><y/></x>;\t } finally { with({}) for(let y in [5,6,7,8]) throw StopIteration; } ");
tryItOut("default: break; case (({ false: __count__, prototype\f: ({ prototype: <x/> }) }) = let (__proto__ = window, __iterator__) [z1,,].unwatch(\"__noSuchMethod__\"))[((uneval( /x/ .__proto__ = function ([y]) { })))]: /*infloop*/L:do {export __count__; } while((--new (window)()) ? new __count__ = prototype : __parent__ = 5.0000000000000000000000);break; ");
tryItOut("while(((<x/> ? window : null++.isPrototypeOf([<x/>--]))) && 0){try { export *; } catch(prop) { gc() } finally { return 1e+81; }  }");
tryItOut("prototype = constructor;__count__;");
tryItOut("/*infloop*/for(({ __proto__: prototype }) = (({prop: true, \t__proto__: 1e+81 })); __count__.__count__ = <x><y/></x>; (prototype = [z1,,])) {export prop; }");
tryItOut("/*for..in*/M:for(const prop = \f__iterator__ = <y><z/></y> in this.zzz.zzz) /*infloop*/for(1e+81; <y><z/></y>;  \"\" ) ");
tryItOut("L:switch((__parent__ = __noSuchMethod__)) { default: return;break;  }");
tryItOut("/*for..in*/M:for(let ({}).__lookupGetter__['prototype.__proto__'] in (({__count__: <x/> |  /x/g }))) {(-1);constructor; }");
tryItOut("with({}) return (<><x><y/></x></> if (1e-81));");
tryItOut("switch(\fMath.sin <= * *=  /x/ .@*) { default: export constructor;__noSuchMethod__, __proto__;break; case (__count__%=<y><z/></y>): break; case 4: break;  }");
tryItOut("");
tryItOut("M:if( \"\" ) { if (({a2:z2})) {}} else function  __iterator__ (__count__, __noSuchMethod__) { return <y><z/></y> } ");
tryItOut("constructor = ([[]].isPrototypeOf(constructor))\n");
tryItOut("/*for..in*/for(var __parent__.__iterator__ in <x><y/></x>) prop");
tryItOut("/*for..in*/M:for(let prototype.__noSuchMethod__ in <y><z/></y>) yield;");
tryItOut("/*infloop*/L:for(__count__;  /* Comment */true; this /= (__count__ = [1,,])) let(function::__iterator__ = this) ((function(){yield;})());");
tryItOut("for(let y in [5,6,7,8]) yield ");
tryItOut("export *;");
tryItOut("switch((Function(this.__defineGetter__(\"__noSuchMethod__\", Math.pow), false))) { default: break; case 'fafafa'.replace(/a/g, ({}).hasOwnProperty): break;  }");
tryItOut("__parent__");
tryItOut("yield #2=eval(\"0;\", __count__.(*::*));\n\n");
tryItOut("try { let(prop, prototype = window >>> false.*) ((function(){try { throw StopIteration; } finally { gc() } })()); } catch(__iterator__ if #1=[#1#].eval(constructor , *::*)) { with({}) { ({ __noSuchMethod__: __iterator__, prototype: __parent__ }) = __proto__; }  } catch(getter) { let __iterator__ = __proto__.__parent__ setter= ((prototype =  '' )).watch, __iterator__ = (<y><z/></y> >>>=(prototype.watch(\"prototype\", *)) + yyy.throw((yield [z1]--))); } finally { let(__noSuchMethod__) { throw __parent__; } ");
tryItOut("\n");
tryItOut("{ '' ; }");
tryItOut("/*for..in*/__proto__");
tryItOut("throw __count__;");
tryItOut("{}1e4;");
tryItOut("constructor = __iterator__;");
tryItOut("let(prototype = <x/>) { yield window\n/*infloop*/while(null)L:if( \"\" ) return; else gc");
tryItOut("throw StopIteration;");
tryItOut("for(let y in []);");
tryItOut("with(<x><y/></x>){ }");
tryItOut("M:do {{var __proto__ = <x><y/></x>, __proto__ = <x><y/></x>\t; }/*for..in*/for(const __proto__ = null\n in function  __iterator__ () { return __count__ = 0 } ) {continue M; } } while((window , <x>\f<y/></x>) && 0);");
tryItOut("/*for..in*/for(let __iterator__ = __iterator__ =  /x/g .valueOf(\"number\").propertyIsEnumerable(\"__proto__\") in eval(\"prop: new (<><x><y/></x></>.prop)((({}).hasOwnProperty)())\", @foo).__lookupSetter__(\"__count__\")) {return (window)();if(prop.constructor) { if ('fafafa'.replace(/a/g, ({}).__lookupGetter__)) let __noSuchMethod__;} else {<x><y/></x>; } }");
tryItOut("do {export *;throw *; } while(([z1]) && 0);");
tryItOut("/*infloop*/M:do  while(@foo.__lookupGetter__(\"__proto__\"));");
tryItOut("do {throw *::*; } while((__count__) && 0); const __parent__;");
tryItOut("if(<y><z/></y>) { if (@foo) prop = function(id) { return id };} else {;export *; }");
tryItOut("(constructor);");
tryItOut("(\n \"\" )\nexport __noSuchMethod__;");
tryItOut("{}\n");
tryItOut("let (constructor = 'fafafa'.replace(/a/g, function (prototype, prop) { yield <x/> } ) = ((this ^=  for each (__proto__ in @foo) for each (__count__ in __proto__) for each (prop in this))()) <= (this.__defineSetter__(\"constructor\", function ()\t /x/g )), __proto__) { /*infloop*/for(let ({ __iterator__: __noSuchMethod__, __iterator__: __proto__ }) = prop >= true; <y><z/></y>; [15,16,17,18].map(<y><z/></y>,  '' )) prop }");
tryItOut("{__proto__ = 0.1; const __iterator__;if(new gc(( \"\"  > @foo))) { if ((1e4.__defineGetter__(\"__proto__\", function  prop (__noSuchMethod__, )[z1]) for each (__count__ in <y><z/></y>))) {M:while((constructor) && 0){gc()export __count__; } } else /*infloop*/for(undefined; undefined; false) {return; }} }");
tryItOut("/*infloop*/L:while((uneval(<x><y/></x> < __count__\n === this.__defineSetter__(\"__proto__\", function(y) { yield y; gc(); yield y; }))))/*for..in*/for([__noSuchMethod__, __count__] = constructor.prop in *) {export *; }");
tryItOut("let (__parent__ = <><x><y/></x></>, prop) { yield; }");
tryItOut("let (__proto__, __proto__) { yield; }");
tryItOut("if([1]) {return <y><z/></y>; } else  if (null) return @foo; else { }");
tryItOut("/*infloop*/while([,] for (__proto__ in <><x><y/></x></>)){<y><z/></y>;return; }");
tryItOut("/*infloop*/L:while(window){yield;/*for..in*/L:for([prop, prototype] =  \"\"  in *) __parent__, constructor = this }");
tryItOut("/*for..in*/for(let (prototype) in ((function (constructor) { return  ''  } )(__noSuchMethod__.__iterator__ =  \"\" )))( \"\" );");
tryItOut("if(__iterator__ = 0.1) { if (this) {undefined } else {continue L; }}");
tryItOut("({ prop: ({ __noSuchMethod__: __parent__ }) }) const constructor;");
tryItOut("if((<xxx>{__noSuchMethod__}</xxx>.(this).yoyo(!*::*.throw([[1]])))) { if (__parent__) {L: {yield this;; } } else {(<x><y/></x>).watchexport prop; }}");
tryItOut("switch( /x/ (<y><z/></y>)) { case 2: case (p={}, (p.z = *)()) ? (__noSuchMethod__) : <y><z/></y>: /*infloop*/for([undefined].map(Math.sin); null || prop; new (this >>> [])()) {export *; }default: L:with(undefined.@*)throw <><\tx><y/></x></>; }\n/*infloop*/do {return <x><y/></x>;export __parent__; } while(prototype);");
tryItOut("/*infloop*/while(prop){var constructor = undefined, __iterator__; }");
tryItOut("return <y><z/></y>;\nlet function::__noSuchMethod__, prototype = true;\n");
tryItOut("if( '' ) { if (window) {export *;gc()yield -0; } else {return;yield; }}");
tryItOut("return this;");
tryItOut("{var __parent__ = #1=[#1#];yield; }");
tryItOut("let(function(y) { yield y; {while((<y><z/></y>) && 0)return <><x><y/></x></>;continue ; }; yield y; }) { for(let y in []);");
tryItOut("continue \n");
tryItOut("return;");
tryItOut("with({__parent__: [, ({ __iterator__: __iterator__ }), , __iterator__] = (function  __proto__ (__count__, __count__) { var __count__ =  /x/g ; } ).call(constructor)}){while((__count__[ \"\" ]) && 0){;(@foo).watch }if(5.0000000000000000000000) { if (prototype.(function::__proto__)) {yield;break M; } else __noSuchMethod__;} }");
tryItOut("{with(__proto__) }");
tryItOut("(window); const __iterator__;");
