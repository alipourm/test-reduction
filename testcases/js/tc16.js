tryItOut("throw __count__;");
tryItOut("/*infloop*/M:while(continue )<x><y/></x>;");
tryItOut("/*infloop*/M:for((); constructor = <x/>; #0=({__count__: null})) {/*for..in*/for(let [prototype, prototype] = true.__parent__ in (new Array())) /*for..in*/for(const [__count__, let constructor;] = ([{}]) in *::*) {yield #1#;export __count__; }do (try {  /x/ ; } catch(__proto__ if <><x><y/></x></>) { return; } catch(__noSuchMethod__ if <><x><y/></x></>) { break M; } catch(constructor if (function(){})()) { ; } ); while((this) && 0); }");
tryItOut("/*infloop*/for(undefined; this; <x><y/></x>) __parent__ = <><x><y/></x></>, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __parent__ = constructor.__proto__.__defineGetter__(\"constructor\", function (__parent__) { yield ([1,2,3,4].slice()) } ) in <x/>) ");
tryItOut("yield  '' ;/*for..in*/for(function::x::__iterator__ in ((function (__iterator__)[1,,])(prototype))){yield; }");
tryItOut("/*for..in*/for(let prop = ((({function::__noSuchMethod__: <><x><y/></x></>})) ? * != <x><y/></x> : (p={}, (p.z = 3)()))[1e-81] in (<x/> &  '' )) const __proto__ = prototype;\nbreak ;\n");
tryItOut("L:while((( '' .(prop))) && 0)gc()");
tryItOut("{return this;function (__count__) { yield 5.0000000000000000000000 } \n }");
tryItOut("throw *\n(__count__)");
tryItOut("/*infloop*/M:for([({ __iterator__: ({ (__proto__): ({ prototype: ({ __iterator__: prop, __noSuchMethod__: __proto__ }) }) }) }), [({ constructor: __proto__, constructor: constructor }), , [__proto__, ({ [constructor, __iterator__, __iterator__, ]: ({ prop: constructor, __count__: __noSuchMethod__ }) }), , , ({ __count__: [, constructor, , __parent__, ] })], ({ prop: [({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: prop }), [__iterator__, , ], window, ] }), ({ __count__: [, , ({ __count__: prototype })], __count__: ({ x::__parent__: ({ __iterator__: prototype }), __count__: ({ __proto__: __proto__, __iterator__: __count__ }) }) })], ({ function::__iterator__: [[, __count__, , __parent__], , , __proto__, ({ __parent__: __noSuchMethod__ })] }), ({ constructor: ({ prop: __parent__ }) })] = *::* += @foo; function(id) { return id } *= undefined.eval(((<><x><y/></x></> * undefined) .@x:: #1# = @foo)); new <x><y/></x>.throw( /x/ .watch(\"prop\",  /x/ ))) {return <x/>;export prototype; }");
tryItOut("let(prototype) ((function(){with({}) break L;})());");
tryItOut("var __noSuchMethod__ = undefined;\nyield;\n");
tryItOut("Function");
tryItOut("if( /x/ ) { if (0/0) {yield <x><y/></x>; }} else var prototype, __proto__ = <y><z/></y>;");
tryItOut("/*infloop*/do {/*infloop*/M:for(const prop = (prop = undefined); prototype.__count__; false) {return [[1]];return; } } while(([(prop = prop)].filter(new Boolean()) for each (__noSuchMethod__ in ( '' .propertyIsEnumerable(\"constructor\")))));");
tryItOut("with({}) { null; } ");
tryItOut("yield\n");
tryItOut("if(((undefined in #1#).__lookupSetter__(\"__proto__\"))) if(function(id) { return id }) const prop, __count__ = null\t; else  if ((function ([y]) { })()) (null); else {; } else  if (({ prop: __iterator__, <><x><y/></x></>.unwatch(\"__noSuchMethod__\").prototype: ({ __noSuchMethod__: __count__ }) }) = <bbb xmlns=\"( /* Comment */<x><y/></x>)\"><></>yyy</bbb>) {break L; }");
tryItOut("/*infloop*/do {export *; } while(1.2e3--);");
tryItOut("/*infloop*/for(var <y><z/></y> = [void false if (<x/>)]; *::*-- >= new RangeError(false, *); this.unwatch(\"__parent__\")) export __count__;");
tryItOut("if(<x><y/></x>) {(__parent__);gc() }");
tryItOut("/*infloop*/M:while(((1.3).apply)().@foo)yield __noSuchMethod__ = <><x><y/></x></>, __proto__ = <x><y/></x>;");
tryItOut("/*infloop*/for(const G = function ([y]) { }; <><x><y/></x></>; <x><y/></x>) break ");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("while((({__iterator__: ('fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; })), //h\nconstructor: new (eval(\";\", <x><y/></x>))(RangeError(__parent__)).__lookupSetter__(\"__iterator__\") })) && 0){/*infloop*/M:while(){let __count__ = [,]; } }");
tryItOut("/*for..in*/for(const prototype = (<><x><y/></x></>.__lookupGetter__(\"__proto__\")) in __proto__ = (-1)[ /x/g ]) __count__;");
tryItOut("let(prototype) { return constructor = arguments;");
tryItOut("/*for..in*/for(const __proto__ in true) {{} }");
tryItOut("L:if([,]) Function");
tryItOut("yield  /* Comment */[false].sort(eval)().propertyIsEnumerable(\"prototype\");");
tryItOut("__parent__ = this, __count__");
tryItOut("if(false) {export __iterator__;const __proto__ = <><x><y/></x></>, prop; } else  if (<x><y/></x> - <><x><y/></x></>) {let __proto__ = <x><y/></x>;return @foo; }");
tryItOut("{; }");
tryItOut("{{} }");
tryItOut("/*infloop*/M:do {yield this; } while((--(-0)\t).yoyo((--this)));");
tryItOut("throw StopIteration;");
tryItOut("if((+ /x/g .throw([-1 if (<><x><y\t/></x></>)]))) {export *;; } else  if (((<ccc:ddd> </ccc:ddd>)().hasOwnProperty(\"__iterator__\"))) {let prop;const __proto__; } else {yield; }");
tryItOut("export prop;\nif(1e4) { if ( /x/ ) function(q) { return q; }} else {const __proto__ = false, __count__ = this;return false; }\n");
tryItOut("if(__count__ = this.prototype) { if (/a/gi) with(this){return @foo; } else const constructor, __proto__ = null;}\n");
tryItOut("L:if(constructor) {var constructor;{} } else export __noSuchMethod__\n");
tryItOut("L:do gc() while((var yyy = <x><y/></x>, __count__ = 0/0\f.watch(\"__count__\", (prop.__iterator__ getter= function  prototype (function::prototype) { return <><x><y/></x></> } ).apply)) && 0);");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: [, ] }) = ((Math.sin).call( '' , )); .@*; delete <x/>++) yield;");
tryItOut("if(@foo) var constructor = <><x><y/></x></>");
tryItOut("let(prototype = constructor-=<><x><y/></x></>, __iterator__) { let(constructor = *, __count__) { continue ;");
tryItOut("switch( /x/ .unwatch(\"__proto__\") .@ constructor.prop getter= ()) { default: break; case 2: break; /*infloop*/L:do {return <x><y/></x>;let __count__ = window, __iterator__; } while(@foo.isPrototypeOf(<x/>) * ({constructor: false,  get __noSuchMethod__(__noSuchMethod__, constructor) { throw 5.0000000000000000000000; }  }));break; case <><x><y/></x></>.__lookupSetter__(\"prop\"): if('haha'.split) { if (<><x/></>) {throw this;{return <y><z/></y>;; } }} else /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in window)  }");
tryItOut("if(new ([[]].eval((-0)))((<x><y/></x>.unwatch(\"constructor\")))) L: var prop = true, prop = true; else  if (__proto__.__noSuchMethod__) ");
tryItOut("with({}) return ( /x/ .__lookupSetter__(\"constructor\"));");
tryItOut("/*infloop*/while(new <x/> in  '' ((<x/> ?  \"\"  : 5.0000000000000000000000), <><x><y/></x></>))if(1e-81) {export *; } const prop;");
tryItOut("switch(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { case 6: switch(@foo) { default: throw <x><y/></x>;break; \t }break; case new RangeError().propertyIsEnumerable(\"__parent__\"): case 6: /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x/>) yield  { return 1e+81 } ;break; default: {}case 4: case (-0).propertyIsEnumerable(\"__iterator__\"): {}break;  }");
tryItOut("/*for..in*/for(prop in ((gc)([z1,,].*))){switch\f(undefined) { case 0: true;case window: break; ([,]);break; case 9:  } }");
tryItOut("{const __noSuchMethod__ = ({a1:1});; }");
tryItOut("{var __count__, __parent__ = 0;export *; }");
tryItOut("yield <x><y/></x>\n");
tryItOut("{/*for..in*/for(let __iterator__ in (prototype) = <xxx>{__iterator__}</xxx>.((undefined).apply)) {(({a1:1}));gc() } }");
tryItOut("with({__count__: })yield;");
tryItOut("/*infloop*/for(<x/>; [, prop, __proto__] = (get).call(@foo, ) if (Number()); Math.sin( ''  ? <><x><y/></x></> : @foo[(prototype.__noSuchMethod__ = <x><y/></x>.(window)) === [1,,]]()\f)) ;let prop, constructor = <><x><y/></x></>;");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/while([,]){/*infloop*/while( /x/g  & *)window; }");
tryItOut("/*infloop*/for(this;  \"\" ;  \"\" ) {{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __parent__ in <><>__count__</></>) return;");
tryItOut("let (prototype, ({ __parent__: yyy })) { /*infloop*/for(var ({ constructor: [, ], prop: ({ prototype: ({ prototype: __iterator__, prototype: __iterator__ }) }) }) = ~window; (Exception(-1,  \"\" )); prototype =  \"\" ) export constructor; }");
tryItOut("");
tryItOut("L:if((-0.propertyIsEnumerable(\"prototype\"))()) { if (('fafafa'.replace(/a/g, ({}).__lookupGetter__))) if(new  /x/g ()) {export *; } else  if ((void try { var prototype, __proto__ = __count__; } finally { break M; } )) {__iterator__, __count__ = this; } else __count__, __count__ = 1e4; else const __count__, prop;}");
tryItOut("/*for..in*/for(var (__count__) in 0.1) #1# for (prop in  /x/g ) ? <x/>++ : 1e-81 if (__noSuchMethod__)");
tryItOut("with({}) yield delete ({});");
tryItOut("if(((new Function(\"return;\"))(null))) { } else  if ( /* Comment */(-0)) let (__parent__ = -1) { export __count__; } else {return; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((new 'haha'.split( /x/ , *::*)).__defineSetter__)([,] % @foo))){/*infloop*/for(__count__; ( /* Comment */<x>\t<y/></x>); new Exception(1e4, <><x><y/></x></>)) const prop, function::__proto__ =  /x/ ; }");
tryItOut("M:with({function::__count__: eval(\"gc()\", *::*)}){yield; }");
tryItOut("/*infloop*/do throw false\nfunction (__parent__) { yield <x><y/></x> }  while(3/0);");
tryItOut("/*infloop*/M:while( '' ){if((eval(\"<><x><y/></x></>\", *))) let __proto__ = <x><y/></x>; else {prop = 0/0, __count__ = @foo; } }");
tryItOut("yield;\nif(1.3) { if (033) prototype} else yield prop;\n");
tryItOut("\rwith( \"\" )function () { return ( '' .__parent__ = @foo) } ");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __parent__] = <x/> in *::*) if(({a2:z2})) { if (<><x><y/></x></>) {}} else return this;");
tryItOut("yield 3.141592653589793;");
tryItOut("with(([<x><y/></x> ? window : *::*]).isPrototypeOf(#1#)){throw #2=({constructor:  \"\" }); }");
tryItOut("if(*.__count__) {__count__ = <><x><y/></x\f></>, getter; }");
tryItOut("/*infloop*/for(let __proto__ = -3/0; __noSuchMethod__; true) return <x><y/></x>;");
tryItOut("if((\rundefined.__lookupGetter__(\"__count__\"))) {{return;var __iterator__ = 033, __noSuchMethod__; } } else  if (__parent__ = void <zzz>(delete @foo)</zzz>) {M:switch(((yield @foo)[<><x><y/></x></>.yoyo( /x/g )])) { default: break; case 8: /*infloop*/do {<><x><y/></x></>; } while([[]]);break; case 9:  } } else return;");
tryItOut("\n'haha'.split\n");
tryItOut("/*for..in*/M:for(prototype = window in true) \n*;");
tryItOut("return (-1).isPrototypeOf([,,z1]);");
tryItOut("switch(<><x><y/></x></>) { case true.__lookupGetter__(\"__iterator__\"): L:if(-0) {const __proto__ = 3/0; } else  if (\ftry { let(__proto__ = <x><y/></x>.eval(prototype), constructor = @foo) { for(let y in []); } catch( /x/g  if (function(){throw StopIteration;})()) { let __iterator__ = (-1); } catch(__count__ if (function(){for(let y in [5,6,7,8]) yield Object();})()) { yield; } catch(__noSuchMethod__ if (function(){with({}) throw StopIteration;})()) { let([, prototype, ] = (null), __iterator__ = <x><y/></x>) ((function(){__iterator__ = prop;})()); } finally { for(let y in [5,6,7,8]) for(let y in []); } ) {export prototype; } else {__parent__ = true; }break; default: return constructor;\fbreak;  }");
tryItOut("gc()\n");
tryItOut("/*for..in*/for(gc in ((*)(*::*)))let prototype = <x><y/></x>, prop\n");
tryItOut("/*for..in*/for(let __count__ in (new Iterator( \"\" , <><bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb></>))) {{} }");
tryItOut("if(true) yield undefined; else {var prop; }");
tryItOut("let (prop, __proto__) { (<x><y/></x>); }");
tryItOut("/*for..in*/M:for(let __count__ = 1.2e3 in <x/>) export prop = <><x><y/></x></>;");
tryItOut("with({constructor:  /x/g .throw(<><x><y/></x></>)}){}");
tryItOut("default: break; case [] = (((1 for (x in [])))(__proto__, <><x><y/></x></>)): {with({}) throw [[]]; }{new Functionthrow  /x/g ; }\nif(true) {;export *; }\nbreak; /*for..in*/for(let __parent__ in ((function  __iterator__ (__noSuchMethod__, constructor) { throw [[1]]; } )()))yield <x><y/></x>;break; case 4: break ;break M;break; break; case new (1 for (x in []))([[]] *= null, window): ");
tryItOut("with({constructor: false}){var undefined;(.2); }");
tryItOut("M:if(<><x><y/></x></>) {throw 4.;gc() } else {const __count__, prop = *::*;yield this; }");
tryItOut("if(([__proto__ for each (__proto__ in <y><z/></y>)\t] ? *::*.throw(null) : constructor >>= null)) {} else {const constructor, __count__;; }");
tryItOut("/*infloop*/for([, , ] = (<x><y/></x> if (false)); this > this; [true]) ;");
tryItOut("with({__proto__: prototype(0)})yield;");
tryItOut("/*infloop*/for(var constructor = @foo; ({a1:1}); <><x><y/></x></>) yield;");
tryItOut("/*infloop*/for((__count__.__lookupSetter__(\"prop\")); ({a2:z2}) &= Error(<x><y/></x>).__count__; new Iterator().valueOf(\"number\")) {{} }");
tryItOut("L: {/*infloop*/for(({a1:1}).__iterator__ =  \"\" .propertyIsEnumerable(\"prop\"); (++<x/>); ([z1,,].hasOwnProperty(\"__parent__\"))) { }throw ([[1]]); }");
tryItOut("/*for..in*/M:for(constructor = new eval(@foo - [,], *::*)[ '' ] in #1=({__count__: (yield <x><y/></x>.isPrototypeOf(null).__noSuchMethod__ = (({}).__proto__))})) if(undefined) { if (<y><z/></y>) {} else export *;}");
tryItOut("/*infloop*/do {export __parent__; } while(*::*);");
tryItOut("L: /*infloop*/do {<y><z/></y>; } while((yield -1 %= (({ get __proto__(__noSuchMethod__, __proto__) { __noSuchMethod__; } , prop:  \"\"  }))));");
tryItOut("if(undefined) {{} } else continue L;");
tryItOut("this.zzz.zzz;");
tryItOut("if([(p={}, (p.z = <x/>)())]) return; else {export prop;return __noSuchMethod__; }");
tryItOut("{for(let y in [5,6,7,8]) return (prototype = 0x99);__noSuchMethod__ = *::*; const __parent__\nif(<y><z/></y>) { if (false) {constructor = (-0), __parent__ = <><x><y/></x></>, constructor = <y><z/></y>;\t } else {function ([y]) { };yield; }}\n/*infloop*/for(1.3; <y><z/></y>; <><x><y/></x></>) {continue L; } }");
tryItOut("L: if(!__count__.__count__) /*for..in*/for([__parent__, __parent__] = * in ({a2:z2}))  else  if (eval((function(id) { return id }.propertyIsEnumerable(\"__noSuchMethod__\")))) {while(([1,,]) && 0){const __iterator__; }<x/>; }");
tryItOut("L:while(((yield <x/>.throw(function::prototype))) && 0){if(@foo.__defineGetter__(\"__iterator__\", [z1])) { if (RangeError(false, <x><y/></x>)) {;(__count__); } else var __iterator__;}for(let y in []); }");
tryItOut("for(let y in [5,6,7,8]) return <y><z/></y>;");
tryItOut("return;");
tryItOut("yield;");
tryItOut("if(this) yield; else  if (__parent__) let setter, __count__; else {const constructor; }");
tryItOut("return");
tryItOut("\nconstructor =  '' , constructor = 1e+81;\t\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__.window.propertyIsEnumerable(\"__iterator__\") in [this].filter(gc)) {switch(*::*) { default: break;  } }");
tryItOut("switch((case <x><y/></x>.(1e81): let (__noSuchMethod__ = ({constructor: <><x><y/></x></> })) { throw ((p={}, (p.z = [,,])())); }break; break; case (uneval((function ([y]) { })())): {}break; default: .yoyo(each = <><x><y/></x></>.yoyo(__proto__ = prop)))) { case 3: /*for..in*/for(let __proto__ = (this.zzz.zzz) in (prop-=*).__count__ = __count__ = -0) {L: gc() }break; default: with()yield; }");
tryItOut("/*for..in*/M:for(__parent__ in this) {window; }");
tryItOut("let (__iterator__ = this, __proto__ = null) { return; }");
tryItOut("while((0 * <x><y/></x>) && 0)let __iterator__;");
tryItOut("/*for..in*/for(((uneval(new window(__iterator__, (function ([y]) { })()))))((<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\"))) in 'fafafa'.replace(/a/g, ({}).hasOwnProperty) &  /x/  .. <x><y/></x>) <employee id=\"1\"><name>Joe</name><age>20</age></employee>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in undefined) {gc() }");
tryItOut("{constructor;yield; } const __noSuchMethod__;");
tryItOut("let(__iterator__, [] = ((<><x><y/></x></>.valueOf(\"number\")) %= __count__ % 3.141592653589793)) { throw StopIteration;");
tryItOut("let ([[, prop, [, , ]], [, , , __proto__.__iterator__]]) { {L:while((({__iterator__:  /x/g })) && 0){let __proto__ = #3={a:#3#}; } } }");
tryItOut("/*infloop*/for(null ^ *::*; eval(\"prop, __proto__; const constructor;\", __iterator__-=__parent__ = __proto__, __iterator__;); (__noSuchMethod__ = *.hasOwnProperty(\"__noSuchMethod__\"))\n) L: throw __parent__;");
tryItOut("if(true .@ null) (<><x\f><y/></x></>); else  if ((prop.eval(<y><z/></y>))) yield <x/>;");
tryItOut("continue L;\n{}\n");
tryItOut("yield this = <x><y/></x>.__defineGetter__(\"prototype\", *::*);");
tryItOut("if((1e4)()) {export *; } else ([1,,]);constructor\n");
tryItOut("null\nyield <x><y/></x>;");
tryItOut("M:while((((let (__count__ = <x/>, __noSuchMethod__ = yield) arguments).isPrototypeOf(({__count__: [ '' ].filter(function(q) { return q; }), __noSuchMethod__:  /x/g  })))) && 0){throw constructor\nexport __iterator__;/*for..in*/for(const @foo['prototype'] in <x><y/></x>.(3/0)) return; }");
tryItOut("/*infloop*/do if(((({}).__lookupGetter__).call).call(((__proto__).apply).call((prop)( /x/ , undefined), [11,12,13,14].sort).__defineGetter__(\"__count__\", undefined), ))  while(\n<><x><y/></x></> !== (constructor = (0.1.constructor)(((@foo for each (__parent__ in [1,,]))), <><x><y/></x></>)).*);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in false) {function (prop, __count__) { yield window }  }let (constructor, __proto__ = 3/0) { L: return; } }");
tryItOut("3 >>>= /x/ ");
tryItOut("let ([({ __proto__: __count__, prop: __parent__ }), ({ __noSuchMethod__: __noSuchMethod__ }), , constructor]) { throw #1=[#1#]\n/*infloop*/M:do continue ; while(<><x><y/></x></>); }");
tryItOut("/*infloop*/M:while(__iterator__ = <x/>.__lookupGetter__(\"__count__\").hasOwnProperty(\"constructor\")){ }");
tryItOut("{return  '' , *; }");
tryItOut("/*infloop*/L:for(__parent__ = (window.__defineGetter__(\"__parent__\", function(q) { return q; })); new ({}).__lookupGetter__( /x/ ) ? ([].isPrototypeOf( '' )) : [*].some(function (__iterator__, prototype) { return  /x/g  } ); (p={}, (p.z = prototype.function::constructor)())) return <x/>;");
tryItOut("if((function  __parent__ (({ prototype: __proto__ }))__parent__.__parent__ getter= <x/>)()) __parent__ else  if ((p={}, (p.z = __count__ = <x/>)())) L:if(__parent__) return  /x/g ; else  if (__proto__) {yield;(this); } else prototype = <><x><y/></x></>, constructor = false = <y><z/></y>; else {__parent__, prototype, prop; = ({a1:1});null; }");
tryItOut("L:if(<><x><y/></x></>)  else {export *;{} }");
tryItOut("let (prop = [ ''  if (<x><y/></x>).@foo], default: /*infloop*/L:for(constructor = [1]; window;  /x/ ) {var prop; }\n(window);\n = (<x><y/></x>.(@foo).__noSuchMethod__ = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)) { {{if((p={}, (p.z = function ([y]) { })()))  } } }");
tryItOut("let prop; const __noSuchMethod__;");
tryItOut("gc()\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (undefined)(false) in *::*) {yield; }");
tryItOut("[1,2,3,4].slice");
tryItOut("/*infloop*/for(var [\t, ({ __proto__: ({ __count__: [, , __parent__], constructor: ({ __proto__: prop }) }), constructor: <xxx>{__noSuchMethod__}</xxx> }), , [({ prototype: __proto__ })], ] = prototype.(#1=[#1#].@*); new [z1,,](0x99); (((yield new @foo())).hasOwnProperty(\"__proto__\"))) {(-1);yield; }");
tryItOut("let (({ prototype: [prototype, __iterator__] }) = this.__defineGetter__(\"__count__\", -3/0)) { const __count__\n }");
tryItOut("<x><y/></x>");
tryItOut("{;with(<x><y/></x>) }");
tryItOut("/*infloop*/while(((-0).watch(\"__parent__\", function  __noSuchMethod__ () { yield  \"\"  } ) -=  '' .@*)){gc()export *; const prototype; }");
tryItOut("\n;");
tryItOut("/*for..in*/for(const constructor in ((3/0 for (__parent__ in false)) ?  /* Comment */({a2:z2}) : (true > *) || prop, __iterator__.unwatch(\"constructor\"))) {export *; }");
tryItOut("if(prop) continue M; else  if (#3={a:#3#}) {; }");
tryItOut("if(__count__.( /x/g )) L:with({__noSuchMethod__: undefined[<><x><y/></x></>]})let __count__;");
tryItOut("var __count__, constructor = (-0); const constructor;");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__ = let (__count__) 0.__lookupSetter__(\"constructor\"), __noSuchMethod__) ((function(){function::__count__.constructor = __parent__;})());");
tryItOut("/*infloop*/while(undefined << -1){(@foo);(<y><z/></y>); }\n");
tryItOut("export *\nreturn;");
tryItOut("/*infloop*/for(var (prop) = (1.2e3 ? true : ({a2:z2})) ? <x/> : \n<x><y/></x> >= ((({a1:1}))().throw(__noSuchMethod__ = __parent__)); ((<x></*\n*/y/></x>).__defineSetter__(typeof *::*) !== this +  import ); (new Function)())  const __iterator__;");
tryItOut("if([] = ({ get __parent__() { var prototype = true, __noSuchMethod__ = <x><y/></x>; }  })) { if ((this.__defineGetter__(\"__proto__\", function(q) { return q; }))) {yield let (__count__ = function(id) { return id }, constructor = true)  \"\" ; }} else {; }");
tryItOut("/*infloop*/for(__parent__; prototype = __iterator__; ++true[this]) {let prop;return [[]]; }");
tryItOut("while((().valueOf(\"number\")) && 0){/*infloop*/throw new Math.sin(\tnew (true)());return; }");
tryItOut("/*infloop*/while(this){ }");
tryItOut("if((-1 &= <y><z/></y>)) __noSuchMethod__; else  if (__count__ = <><x><y/></x></>) (<><x><y/></x></>); else {/*for..in*/M:for(let [__iterator__,  /x/ ] = undefined in [z1]) export constructor; }");
tryItOut("/*for..in*/for(let prop in ((({}).hasOwnProperty)(undefined)))export *;");
tryItOut("with({constructor: undefined.throw(__noSuchMethod__)})__noSuchMethod__ = __noSuchMethod__;");
tryItOut("yield false;");
tryItOut("export *");
tryItOut("/*for..in*/for([prototype, prototype] = ({ get __parent__ __count__ ()__noSuchMethod__ = __proto__ = __count__, __noSuchMethod__ getter: function  __count__ (prop)--({})//h\n }) in  '' ) this;");
tryItOut("return\n__noSuchMethod__");
tryItOut("{throw <x><y/></x>;\nprototype, constructor;\nif(prototype) yield; else  if (<><x><y/></x></>\t) { '' ;constructor, prop = window; } }");
tryItOut("/*infloop*/for(<x><y/></x>.(window); ({__parent__: this, constructor: this }); <x><y/></x> .@x:: <><x><y/></x></>) const x::prop = <x/>;");
tryItOut("let(constructor = [this if ([])]) { this.zzz.zzz;");
tryItOut("L:if(yield prop) {const __count__, [z1] = <><x><y/></\tx></>; }");
tryItOut("M:if(eval(\"{{var prop = window;var __parent__, __count__; } }\", *)) {return; } else  if ( '' .eval(({a2:z2}))) {return; } else export prop;");
tryItOut("/*for..in*/for(const __iterator__ in ((((<x/> || [[]]).call).apply)(<><xxx>{__count__}</xxx></> for (__noSuchMethod__.__count__ in (new Iterator())) for (set in return [1];.__lookupSetter__(\"__iterator__\")) for each (__parent__ in <><x><y/></x></>({export prototype; }))))){; }");
tryItOut("/*for..in*/L:for(let [__count__, prop] = (( ''  % prop) :: 1.2e3) in (#1#.__iterator__)) export *;");
tryItOut("(<><x><y/></x></>);");
tryItOut("/*infloop*/for(window; __noSuchMethod__.constructor = constructor;  /* Comment */function ([y]) { }) {.2; }");
tryItOut("/*infloop*/M:for(__parent__ = [,,z1] || [,,]; let \f(__noSuchMethod__) <><x><y/></x></>; function(id) { return id } :: window) {let __count__, prototype = <><x><y/></x></>; }");
tryItOut("let (__noSuchMethod__, __proto__ = <x><y/></x>) { let __noSuchMethod__ = <x><y/></x>, prop; }");
tryItOut("if() {let __parent__; } else  if ([15,16,17,18].sort((new Function(\"var each = __parent__;\")),  /x/g )) export __parent__;\f const prop;");
tryItOut("/*infloop*/for(const prototype = [z1,,]; 1e+81;  \"\" ) {return  '' ; }");
tryItOut("L: {prop /x/g ; }");
tryItOut("if((new this.__defineSetter__(\"constructor\", true))) {/*infloop*/for(([typeof <x><y/></x>])[(yield __count__)]; -0.@* .. (((<><x><y/>\f</x></>))[new (new Function)()]); [__noSuchMethod__, __count__, prototype, ] = prototype) {__noSuchMethod__ = this, __parent__ } } else  if (function  __parent__ (__count__, __noSuchMethod__)\t { yield (eval(\"<><x><y/></x></>\",  \"\" )).yoyo(((uneval(__iterator__))).*) } ) let __count__ = <><x><y/></x></>, __iterator__;");
tryItOut("L: const prototype = undefined;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const __parent__ in (((undefined++))(<><x><y/></x></>.unwatch(\"__parent__\")))){;const prop = undefined, __count__; }");
tryItOut("yield prototype.__proto__;");
tryItOut("gc()\n");
tryItOut("throw prop;");
tryItOut("export __count__");
tryItOut("L: /*for..in*/for(let (__proto__) in ((this)((this.__defineGetter__(\"prototype\", (new Function(\"true++\"))))))){;{} }");
tryItOut("/*infloop*/for(var __parent__; const constructor = null; [,]) do {<><x><y/></x></>;export prototype; } while((({__count__: 3/0[ '' ]})) && 0)");
tryItOut("/*infloop*/L:for(!__count__; (({ __count__: prototype, __iterator__: ({ __noSuchMethod__: ({ __count__: __count__ }) }) }).prop = eval(\"with({constructor:  /x/ }){yield;let prototype = @foo, __noSuchMethod__; }\", -1)); try { this.zzz.zzz; } catch(prototype if (function(){yield prop = <x/>;})()) { throw __iterator__; } ) /*infloop*/for(let __proto__ = undefined.__defineGetter__(\"__proto__\", function () { yield; } ); undefined.__defineSetter__(\"constructor\", gc); (p={}, (p.z = @foo)())) (.2);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const ({ __parent__: constructor }) in #1#) {if(<x><y/></x>.(033)) export *; else  if (prototype) return; else  }");
tryItOut("with({constructor:  '' })|");
tryItOut("if(prop.watch(\"__proto__\", function (__noSuchMethod__) { return <x><y/></x> } )) {return;export __count__; } else var __noSuchMethod__ =  /x/ ;\nyield yield;;\n");
tryItOut("/*for..in*/for(({ __parent__: __count__ }) in ((Function)((this.__defineGetter__(\"__proto__\", Math.pow)).isPrototypeOf('fafafa'.replace(/a/g, Math.pow))))){/*infloop*/for(const ({ __iterator__: constructor }) = this.__defineSetter__(\"__count__\", 'haha'.split); (\n<x><y\n/></x>); ([15,16,17,18].filter(*, *))) {continue M;(({a2:z2})); } }");
tryItOut("with({}) let __proto__;");
