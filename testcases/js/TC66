
tryItOut("switch(((-0))(constructor, <x><y/></x>)) { default: case 8: break;  }\nthrow prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("[15,16,17,18].sort([, __noSuchMethod__] = [033].sort(__proto__), (<y><z/></y> ? ({a1:1}) : window >= (<x><y/></x>)[prop])(eval(\"*::*\", *)))");
tryItOut("/*infloop*/do {return <x><y/></x>;gc() } while((new Object(((({function::constructor: (<x/> < *::*)})).__iterator__ = __parent__.__lookupSetter__(\"__iterator__\") &= ({})[<><x><y/></x></>]),  '' )));");
tryItOut("with(({function::__noSuchMethod__: false++.__count__})){({})while((__iterator__) && 0) '' ; }");
tryItOut("L:while((*) && 0){<xxx>{prop}</xxx> }");
tryItOut("/*for..in*/for([__iterator__, constructor] = window in \f@foo) {5.0000000000000000000000__iterator__ = <><x><y/></x></>, __proto__; }");
tryItOut("/*infloop*/while((new (1 for (x in []))(<><x><y/></x></>))){export __count__; }");
tryItOut("return;");
tryItOut("return; const __proto__;");
tryItOut("/*for..in*/for(__noSuchMethod__ = <x><y/></x> in \f<x><y/></x>) return;");
tryItOut("/*infloop*/for(const ({ prototype: __proto__, prop: ({ prototype: ({ __proto__: ({ constructor: prop, __noSuchMethod__: __parent__ }) }) }) }) = ([({prop: 1e+81})]); new ({a1:1})(this, (<y/</)x>); [15,16,17,18].map(Math.sin, (p={}, (p.z = <x/>)()))) /*for..in*/for(let [__iterator__, __proto__] = [11,12,13,14].some in <>\f<x><y/></x></>) {__parent__; }");
tryItOut("L: {}");
tryItOut("__count__ = prop;");
tryItOut("L: {/*infloop*/for(const prop; ((gc).call(<><x><y/></x></>,  /x/g , window)); (-0)[]) export *;/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in ((<y><z/></y>)[0/0])) {const __parent__;.2; } }");
tryItOut("if(<ccc:ddd> </ccc:ddd>) return ('fafafa'.replace(/a/g, gc));");
tryItOut("/*for..in*/for((export constructor;) in let (prototype, <x><y/></x>) *) with(constructor = this[__count__ = __noSuchMethod__])(<x/>);");
tryItOut("gc()");
tryItOut("L:if(<x><y/></x>.(<x><y/></x>)) { if ((new <> </>(true, 0.1))) return  /x/g ;} else {with({prop: window})(this); }");
tryItOut("return\n");
tryItOut("L: ;\f");
tryItOut("{/*infloop*/for(prototype; false; 1e-81) {yield; } }");
tryItOut("if(({__proto__ setter: new ([1,2,3,4].map)(<y><z/></y> += window ==  /* Comment */[,,z1]),  get __parent__ __noSuchMethod__ (constructor, ({ __proto__: [], __proto__: [({ prop: __iterator__, prop: __proto__ })] })) { /*for..in*/L:for(var true in [1]) return; }  })) /*infloop*/do return; while(prop.( /x/ )); else  if ((this.unwatch(\"__parent__\")) >>> ((uneval(window)) + +constructor)) {__parent__, __count__ = null }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/for(each; ( /* Comment */1e-81 instanceof ({a2:z2})); ([11,12,13,14].some || (uneval(<><x><y/></x></>)))) continue ;");
tryItOut("{; }");
tryItOut("return #3={a:#3#}\nM:while(('fafafa'.replace(/a/g, function  __proto__ (prototype, prop) { return * } )) && 0){{} }\n");
tryItOut("/*infloop*/do {let __parent__;yield window\n } while((yield 3.141592653589793(false, <x><y/></x>) ? new Date(__iterator__).__parent__ = *.prop : <><bbb xmlns=\"<y><z/></y>\"><x><y/></x> </bbb></>));");
tryItOut("/*infloop*/for(; (RegExp()); this.zzz.zzz) /*infloop*/M:while((new ((@foo.__defineSetter__)())){let __parent__, function::__proto__; }");
tryItOut("while(( /x/ .unwatch\f(\"constructor\")) && 0){; }");
tryItOut("return --[ '' ].map((@foo).__defineSetter__);");
tryItOut("M:with({__parent__: <x/>})throw  '' ;");
tryItOut("let(({ __iterator__: ({ __noSuchMethod__: [({ constructor: __noSuchMethod__ }), , [({ constructor: prop }), ({ __iterator__: constructor, __iterator__: prototype }), ], [, ], ],  { yield <x/> }  __iterator__:  }) }) = prototype = __noSuchMethod__--, __count__) ((function(){with({}) { let(({ __count__: [], each: ({ __count__: [, constructor, ] }) })) ((function(){this.zzz.zzz;})()); } })());");
tryItOut("/*for..in*/L:for(var constructor in __noSuchMethod__ = (-1)) {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in \f<><x><y/></x></>) {return;constructor; } }");
tryItOut("if(this.__defineSetter__(\"prop\", Function)) {{}yield; } else let (prototype = (__noSuchMethod__.__noSuchMethod__ = #1#.watch(\"__parent__\", ({}).hasOwnProperty))) { (arguments).__defineSetter__ }");
tryItOut("try { return (__parent__ =  \"\" .watch(\"prototype\", Math.pow)); } catch(__proto__) { (prototype) = __proto__; } finally { with({}) let(([,,])(this), prop = this) { L:if(<x/>) {break M; } } ");
tryItOut("if(prototype.(new  /x/ )) { if ((true @ 3/0)(this.prop = Date((<x><y/></x> >>> -3/0), false),  '' .__defineGetter__(\"prototype\", (1 for (x in []))))) {/*for..in*/L:for(let [prototype, __parent__] = yield *::* in <x><y/></x>) {} }} else {let prototype, constructor = setter; }");
tryItOut("M:if((<x/>.valueOf(\"number\"))) { if (<x/>) this;} else {export constructor;(undefined); }\nreturn;");
tryItOut("export __parent__;if(@foo) { if (@foo) yield; else {{} }}");
tryItOut("let constructor = *::*, new Function = __count__;return;");
tryItOut("this.zzz.zzz;");
tryItOut("do {throw <x><y/></x>;return *; } while((null) && 0);");
tryItOut("if(__noSuchMethod__) {/*for..in*/for(const constructor in /*\n*/<x><y/></x>) {throw true; }yield @foo; } else  if (this) {export *;/*infloop*/for(const __noSuchMethod__ = 1.3; <><x><y/></x></>; [1,,]) {return  /x/g ;export *; } }");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8])  const __count__;");
tryItOut("/*for..in*/for(var export *; in {}) export *;");
tryItOut("<{__iterator__}>yyy</{__iterator__}>break L;");
tryItOut("L: throw *::*;");
tryItOut("/*infloop*/M:while((true.propertyIsEnumerable(\"__count__\").__lookupSetter__(\"prop\") &= (1 for (x in [])) += prototype))/*infloop*/for(function::prototype; [15,16,17,18].map(<x><y/></x>, (<y><z/></y>.isPrototypeOf(<><x><y/></x></>))); new (<x><y/></x>)(<x/>)) export prop;");
tryItOut("if( /x/g )  else const __noSuchMethod__, function::__parent__ = this;");
tryItOut("{}\nconst __proto__, __iterator__;\n");
tryItOut("if((null = <><x><y/></x></>\t)) if(prop) {export *; } else ");
tryItOut("if(<><bbb xmlns=\"*.hasOwnProperty(\"__count__\")\">yyy</bbb></>) {<><x><y/></x></> } else  if (true) (3/0); const __noSuchMethod__;");
tryItOut("with({__iterator__: __proto__++}){(<x><y/></x>);<><x><y/></x></> }");
tryItOut("M:switch(true) { case this.__lookupGetter__(\"__iterator__\"): let (prop) { function  __proto__ (__noSuchMethod__) { return *::* }  }default: {}break; case 6: case 4: <><x><y/></x></>;break; case 0: break; case 6: {}break;  }");
tryItOut("/*for..in*/for(var prop in ((({}).hasOwnProperty)(.__noSuchMethod__)))let prop = false;");
tryItOut("if(<x/> >> false &= (this.zzz.zzz)) /*for..in*/M:for(const __noSuchMethod__ in  '' .hasOwnProperty(\"__parent__\").yoyo(<x><y/></x>.*)) {L: {export *; }yield; } else /*for..in*/for([__iterator__, constructor] =  ''  in 1.2e3) {gc(){}\f }\nreturn <><x><y/></x></>;\n");
tryItOut("if(((Function)())) {return <x><y/></x>;export __proto__; } else yield;");
tryItOut("/*for..in*/for([__proto__, __parent__] = ({ __proto__: prop }) = [, ] in function::__proto__ = (function ([y]) { })()) break ;");
tryItOut("/*infloop*/for((-0) === false; __parent__ = prototype;  '' \n) {yield *::*; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) yield ({a2:z2});");
tryItOut("/*for..in*/for(__count__.__count__ in ((function  constructor (__proto__) { if(#1= /x/ ) {yield <y><z/></y>; } else {const constructor, [[1]]; } } )([((null)(1e+81, false))].map(function () { return yield <x><y/></x> } ))))gc()");
tryItOut("/*for..in*/L:for([__parent__ = undefined, constructor] = new RangeError(new (<y><z/></y>\n)(<x><y/></x>.hasOwnProperty(\"__iterator__\"), __proto__)) in ({}).hasOwnProperty()) /*infloop*/for(const prototype; #1#; this) {{}(<x><y/></x>); }");
tryItOut("break ;");
tryItOut("L:if(__parent__) { if ((*::* for each (prop in  /x/g ))) continue ;} else break M;");
tryItOut("__noSuchMethod__");
tryItOut("/*for..in*/for(const [__iterator__, prototype] = __parent__ = <x><y/></x> in __noSuchMethod__ =  '' ) for(let y in []);");
tryItOut("if(__noSuchMethod__ = prototype) {yield; }");
tryItOut("while((yield (this.zzz.zzz) === function  __noSuchMethod__ () { return (new String(0)) } ((this)[<><x><y/></x></>], yield <x/>)) && 0){throw ({a2:z2}); }");
tryItOut("*::*;\nexport *;\n");
tryItOut("/*infloop*/do var __iterator__; while([,,] ? __parent__ : null);");
tryItOut("L:do {var __iterator__ = window;(window); } while((this.zzz.zzz) && 0);");
tryItOut("(3/0); const prop;");
tryItOut("M:while((window ^= [[]]) && 0){if(prototype-=<x><y/></x>) {return; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <x/>) {yield window;yield; }");
tryItOut("/*infloop*/L:for(let __count__ = ([15,16,17,18].some(new ((#2=[*::*]) -= function  prototype (prop, setter) { constructor; } (-1)), (let (__parent__, __noSuchMethod__ = (-0)) (new window(<x><y\t/></x>))))\f); [15,16,17,18].map(Math.pow, ((__parent__)(<x/>, true))); ([11,12,13,14].some)) {this const __iterator__; }");
tryItOut("if(<y><z/></y>) {(<y><z/></y>);gc() } else return;");
tryItOut("let (__parent__) { yield; }");
tryItOut("{do { } while((<><y/></>) && 0); }");
tryItOut("{let __count__; const __proto__\n }");
tryItOut("switch([, ] = <> </>) { case (((function (__count__, __noSuchMethod__) '' ).apply)(prototype = prop)): break; case <>[({ constructor: [], prop: ({ __noSuchMethod__: __iterator__: (<>__parent__ .. .2</>.((let (__proto__ = , function::__parent__) true))), prop: ({ __iterator__: constructor }) }) }), , ({ __parent__: __noSuchMethod__(0x99), __iterator__: __count__ }), ]</>: /*for..in*/for(let <x><y/></x> >>>=false in (({}).__lookupGetter__).call(@foo, true, <><x><y/></x></>)) ;case [15,16,17,18].sort(('haha'.split).call, null): const set = <><x><y/></x></>;with({//h\n__parent__: prototype}){yield; }throw StopIteration;break;  }\nlet (__proto__) { const prototype, ; }");
tryItOut("\ngc()\n");
tryItOut("var prototype, __parent__ = true;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (([11,12,13,14].sort))(({}).unwatch(\"prototype\")) in [<x><y/></x>].filter(<x><y/></x>) :: new function(y) { yield y; return;; yield y; }(prototype = null)) return;");
tryItOut("/*infloop*/for( \"\" ; undefined; <x><y/></x>) {continue ; }");
tryItOut("with({}) let(__parent__, __iterator__ = ({constructor: 3.141592653589793})) { constructor = __proto__;");
tryItOut("return;");
tryItOut("with({__proto__: (constructor)}){export prop; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor\f.__proto__ in <x><y/></x>) {if(window) prop else  if (window) {const __count__; } else let function::__parent__ = null, __parent__ = undefined; } }");
tryItOut("/*infloop*/for(typeof *::*; *::* instanceof (*::*.hasOwnProperty(\"prop\")); __proto__ = __noSuchMethod__) {prop = (-1), prototype; }");
tryItOut("/*for..in*/for(var ({ prop: __count__ }) in (each = prop.__defineSetter__(\"__count__\", Math.sin))) /*for..in*/M:for(var [prototype, __count__] = (((let (__iterator__ = <><x><y/></x></>, __parent__) <y><z/></y> if (<><x><y/></x></>)))) in <x/>) ");
tryItOut("while(([__count__ = (function ([y]) { })()].some(eval) *= new [1,2,3,4].slice(<><x><y/></x></>, 5.0000000000000000000000)) && 0)/*infloop*/for(let constructor; (<x/>.yoyo(<><x><y/></x></>)); #3={a:#3#}) {continue L; }");
tryItOut("while((((true)[ '' ])) && 0)do { '' , window__noSuchMethod__ } while(( /x/g ) && 0)\n/*infloop*/do export *; while(new (@foo)());");
tryItOut("if(@foo -= <y><z/></y>.hasOwnProperty(\" \")) { if ([] = __proto__.unwatch(\"prototype\")) {return; } else {while((function(id) { return id }) && 0){{}const __noSuchMethod__, __noSuchMethod__ = [1,,]; } }}");
tryItOut("/*infloop*/for(const ({ __proto__: constructor, __proto__: ({ constructor: [__count__, , , , [__noSuchMethod__, ({ __parent__: __iterator__, __proto__: ({ __parent__: __proto__, constructor: prop }) }), ]], __count__: ({ prototype: __count__ }) }) }) = ({__count__ setter: (new Function(\"{}\")), __proto__:  /* Comment */[11,12,13,14].filter--((null if (window)), gc()) }); (@foo.prop = 0.1 .@*:: this);  ) (<x><y/></x>)\f;");
tryItOut("export *\n");
tryItOut("do {gc() } while((#1#) && 0);");
tryItOut("switch(__noSuchMethod__.__count__ =  /x/g ) { case yield function(id) { return id }: break;  }");
tryItOut("L:with(.__defineGetter__(\"__iterator__\", ({}).__lookupGetter__))gc()");
tryItOut("/*for..in*/for(var __count__ = [z1] in <x/>) {break M;var __count__, __parent__; } const __noSuchMethod__;");
tryItOut("/*infloop*/for(const ({ __parent__: __count__ }) = (*.__defineSetter__(\"prop\", function (__count__, prototype) { yield <y><z/></y> } )); eval(\"export __proto__;\", <y><z/></y>); (__noSuchMethod__|=* ? (prototype.throw(<><x><y/></x></>)) : (uneval(<><x><y/></x></>))) .. <x><y/></x>.(3.141592653589793)) let ([({ __parent__: __proto__, __proto__: __iterator__ }), , ] = window &= <x><y/></x>) { (*::*);\nreturn;\n }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:do {{export *;var __proto__ = #1=[#1#], prototype; } } while(function(id) { return id });");
tryItOut("if((prop && <><x><y/\t></x></>) instanceof __count__ = <x><y/></x>) /*infloop*/L:while(){break L; } else let(({ constructor: __iterator__ }) = (yield <y><z/></y>), __iterator__ = undefined) ((function(){__count__ = prototype;})());");
tryItOut("/*for..in*/for(const (function::prototype) in this) {const constructor = undefined\nlet function::__proto__ = 0, __count__; }");
tryItOut("let ({ __parent__: ({ __noSuchMethod__: __count__ }), __iterator__: ({ __noSuchMethod__: [] }) }) = constructor) { if((__proto__ = ((new Number(<y><z/></y>, <>\f<x><y/></x></>)) if (void *)))) { if (function  prop () { yield  } (eval(\"this.__defineGetter__(\\\"set\\\", [1,2,3,4].map)\", __proto__.throw(*)).valueOf(\"number\"))) export constructor;} else { /x/g .__noSuchMethod__ } }");
tryItOut("{M:\fif(4. ? prop : (function ([y]) { })()) {yield window; }return 3/0; }");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __proto__] = ((Math.sin).call(({}), this)) in false) yield prototype;");
tryItOut("if(<y><z/></y>) {break ;export __count__; }");
tryItOut("with({}) { __count__ = constructor; } ");
tryItOut("{let (prop =  /x/g , __noSuchMethod__) { {} } }");
tryItOut("setter =  /x/g ;");
tryItOut("if((-0).unwatch(\"__count__\")) return;\nyield <><x><y/></x></>;\n else  if (void <x/>\f) {let __noSuchMethod__;{}\f } else {const __count__ = .2;const constructor; }");
tryItOut("/*for..in*/M:for(__iterator__ = function(id) { return id }.prototype in <x/>) yield;");
tryItOut("/*infloop*/for((this.watch(\"__parent__\", Math.pow)); __proto__ = this; let (__proto__, __iterator__) *::*.__lookupGetter__(\"__parent__\")) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in <><x><y/></x></>) var constructor, __count__;");
tryItOut("/*for..in*/for(let __proto__ in ((function(q) { return q; })(1.2e3 ? (function ([y]) { })() : <x><y/></x>))){{}export *; }");
tryItOut("'haha'.split");
tryItOut("for(let y in [5,6,7,8]) try { var prototype = window, __noSuchMethod__ =  '' ; } finally {  } ");
tryItOut("(new Function(\"yield;\"))");
tryItOut("with({__iterator__: __parent__.function::prop setter= try { yield; } finally { const __count__ = window, constructor; } })while(((__noSuchMethod__)()) && 0)/*infloop*/for(var ({ constructor: prop }) = [<x><y/></x> for each (constructor in <><x><y/></x></>)]; (#0=({constructor: 033})); set.__noSuchMethod__ =  \"\" ) {{__parent__, __noSuchMethod__ = *;var __noSuchMethod__; } }");
tryItOut("if(0) continue M;");
tryItOut("if(++new Function(<><x><y/></x></>, [,])) {if(prop|=this(window.__lookupGetter__(\"prop\"))) let __parent__ = false; else  if ( \"\" .__noSuchMethod__) {return;if(<><x><y/></x></>) {{} } } else {{} } } else let (constructor =  \"\" ) { ; }");
tryItOut("try { __noSuchMethod__ = __noSuchMethod__; } finally { this.zzz.zzz; } ");
tryItOut("throw StopIteration;");
tryItOut("<!--yy-->");
tryItOut("if(<x><y/></x>.constructor >>= __noSuchMethod__.prototype = [[]]) { if (( /x/ .isPrototypeOf(<><x><y/></x></>))) {{export *;__iterator__; }L: export *; }} else __parent__ = __parent__.(*)[let (__proto__) __iterator__][(*::* |= ((eval).call(this, )))[[<y><z/></y>].sort(constructor)]]");
tryItOut("do {let constructor, __iterator__;yield; } while(((Iterator(<>.2</>))) && 0);");
tryItOut("with({__parent__: 0/0}){const __noSuchMethod__ = <x><y/></x>;L: [,]; }");
tryItOut("let (({ prototype: with({}) { return; } , prop: ({ __proto__:  \"\" ['function::__count__'], prototype: __iterator__ }) }) =  .. (uneval(-0))) { /*for..in*/for(var [constructor, prototype] = <><></></> in (window.prop)) {break M;; } }");
tryItOut("while((<y><z/></y> % RegExp()) && 0)L:if(<x><y/></x>) { if (*::*) var __proto__, prop;} else let prototype =  '' ;");
tryItOut("throw <x><y/></x>//h\n;");
tryItOut("if(<x/>) { if (<x/>) {throw  /x/ ; }} else {gc() }");
tryItOut("M:if(033) { if (<y><z/></y>.eval(window)) yield true; else const __noSuchMethod__, __noSuchMethod__;}");
tryItOut("/*infloop*/M:for(({ __parent__: [, , , ({ __noSuchMethod__: ({ __noSuchMethod__: ({ prototype: ({ prop: __parent__ }), prop: [, prototype, __proto__] }), __proto__: __parent__ }), __iterator__: __count__ })] }) = (prop = ({ __count__: __iterator__, __proto__: __proto__ })); __iterator__ = /*\n*/; (new (((<bbb xmlns=\"this\">yyy</bbb>.(constructor\n)))(constructor.(-3/0 << window)))(({__parent__: {}.prop = new <><x><y/></x></>(*, 1e-81), getter: __parent__.(<><ccc:ddd></ccc:ddd></>) }), __parent__+=0 & (new ((-0))(this, <x><y/></x>)))) :: ([15,16,17,18].sort(/a/gi, <x/>))) /*for..in*/for([prop, prototype] = (3.141592653589793.__noSuchMethod__) in __proto__) {gc()const __proto__, __count__ = false; }");
tryItOut("try { ; } finally { export prototype; } ");
tryItOut("with({__iterator__: window})yield;");
tryItOut("<x><y/></x>;");
tryItOut("/*for..in*/for(const constructor in <x><y/></x> <<=  /x/ ) {(({a1:1})); const __parent__; }");
tryItOut("/*for..in*/for(const [__parent__,  '' ] = null in 1e4) { continue \f }");
tryItOut("/*infloop*/do gc() while(__count__.__noSuchMethod__ setter= [1,2,3,4].map);");
tryItOut("if([z1]) {break ; } else (<x/>);");
tryItOut("while(((this.__defineSetter__(\"__parent__\", [1,2,3,4].slice))) && 0){evalif( \"\" ) { if (-1) {export *;return <y><z/></y>; } else {({}).hasOwnPropertygc() }} }");
tryItOut("{yield;{} }\nwith(null ^ <x><y/></x>)\n");
tryItOut("L: {yield;/*infloop*/L:for(const __iterator__; ({<{prototype}>yyy</{prototype}>: Object()}); false--.yoyo((4. |= 3))) {yield <x><y/></x>;return; } }");
tryItOut("yield null;");
tryItOut("if(constructor.()) {}");
tryItOut("var prototype = 0x99, __proto__ = this;");
tryItOut("/*for..in*/L:for(let [prototype, prototype] = (new Date()) in prop) let __count__ = <x><y/></x>;");
tryItOut("with(((yield (<x/>.__defineGetter__(\"__parent__\", __count__))))){export __count__<><x><y/></x></> }");
tryItOut("L: yield __noSuchMethod__;");
tryItOut("/*infloop*/for(let \f__proto__; __noSuchMethod__.*; [z1].yoyo(*)) ;");
tryItOut("L: if(this) { if (0/0) __iterator__, __proto__ = *; else {yield this;export *; }}/*for..in*/for([__iterator__, prototype] = function(y) { yield y; gc(); yield y; }(this, this) in this) {}{/*for..in*/for(__iterator__ in (([1,2,3,4].slice)(*::*)))throw ({a2:z2});while((((*::*)[undefined])) && 0){{} } }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = (false--); [(<><x><y/></x></> |= false)]; (() |= (window--))) ");
tryItOut("if(\nnew (prototype)()) {} else  if ((((p={}, (p.z = void __proto__)())).valueOf(\"number\"))) constructor, __proto__ = <x><y/></x>;");
tryItOut("/*infloop*/for(( /* Comment */arguments); (#0=[__count__.__noSuchMethod__]); yield this) {M:if(<><x><y/\t></x></>) { if ( /x/g ) {<y><z/></y> }} else { /x/  }{let prototype = *::*;__proto__ } }");
tryItOut("const var __count__ = __iterator__; = true, __iterator__ = <x><y/></x>;");
tryItOut("M:if(<><x><y/></x></> % <y><z/></y>) (<x><y/></x>).__defineSetter__ else  if (({ __parent__: [, constructor, , ] }) = ((new .2(*::*))(__proto__ = <y><z/></y>))) {; }");
tryItOut("if([*].map(prototype)) {export prop; } else  if (this) {var prop, __count__;;gc() } else yield window;");
tryItOut("/*infloop*/L:while(__noSuchMethod__, prototype){const __parent__ = <><x><y/></x></>;return @foo; }");
tryItOut("if(new ((constructor = __noSuchMethod__.isPrototypeOf([1,,]\n)))()) export *; else  if (((__noSuchMethod__ =  /x/g )())) {{} } else {var prototype, x::__proto__;; }");
tryItOut("/*infloop*/M:for(const prop = typeof prototype; ([1]\n); <><x><y/></x></>.__lookupSetter__(\"constructor\")) {return (-0);return <><x><y/></x></>; }");
tryItOut("/*infloop*/M:for((prototype = window); yield <y><z/></y>; new constructor) {prop = __noSuchMethod__ = undefined }");
tryItOut("/*infloop*/L:for((window[<><x><y/></x></>.(())]); (prop = undefined++); 3/0) {if((this.__defineSetter__(\"__iterator__\", (new Function(\"return;\"))))) {{} } else  if (*::*()) let function::__parent__, __count__ = <x><y/></x>;/*infloop*/for(__proto__.__iterator__; (__parent__ = <><x><y/></x></>); __parent__|=__proto__) gc() }");
tryItOut("/*for..in*/M:for(var ([[1]].__lookupSetter__(\"prop\"))['prop'] in -3/0.@foo) yield;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(getter; function::__proto__.__parent__; arguments) {/*infloop*/do return; while( /x/g ); }");
tryItOut("M:with((new <><xxx>{prototype}</xxx></>)){/*for..in*//* nogeckoex bug 349964 */ for  each(var #0=<y><z/></y>['constructor'] in this.__defineSetter__(\"prop\", function (__noSuchMethod__) { {} } )) {export __parent__;yield <x><y/></x>; }export *; }");
tryItOut("return (__count__.isPrototypeOf(true)) .. ([z1,,] :: [1]);");
tryItOut("/*infloop*/for(var __iterator__; @foo.__lookupGetter__(\"x::constructor\"); #0=<><x><y/></x></>) export *;");
tryItOut("return;");
tryItOut("if(let __parent__ = , __parent__ = <><x><y/></x></>) {prototype; } else  if (this.__defineGetter__(\"prop\", new Function)) gc() else return;\nreturn;\n");
tryItOut("/*infloop*/L:while(<>\f<x><y/></x></>)var prop = <x/>;");
tryItOut("if([,]) { if (*::*) {var function::prototype = window; } else {throw undefined; }}");
tryItOut("M:switch(<y><z/></y>) { case 7: yield;break; default: break; case 9: break; case 7: /*infloop*/while(*){let __parent__ =  '' ; }break; case ((__count__)[<x/>]): break;  }");
tryItOut("/*infloop*/do  while(@foo);");
tryItOut("/*infloop*/do {export *; } while(undefined);");
tryItOut("/*infloop*/do {function(y) { yield y; var __proto__ =  /x/g , constructor;; yield y; } } while(<><> </></>)");
tryItOut("return;");
tryItOut("with({}) { yield (window).__defineSetter__(); } ");
tryItOut("(new Function(\"const __parent__;\"))\n");
tryItOut("switch( = this) { case __noSuchMethod__.(constructor\n.watch(\"prop\", [1,2,3,4].map)): /*for..in*/for(let __count__ in ((gc)((([1,2,3,4].slice).call(<y><z/></y>, )))))export __noSuchMethod__;break; break; default: case 0: case 3: /*infloop*/<{__count__}>yyy</{__count__}> }");
tryItOut("/*infloop*/for(let __noSuchMethod__; ; eval(\"yield *::*;\", #3={a:#3#}).eval(<x><y/></x>--)) /*for..in*/for(const constructor = null in false) {} .. window");
tryItOut("L:if(<x/>) { if ((this.zzz.zzz <<= __proto__)) {/*for..in*/M:for(var [__count__, prop] = 5.0000000000000000000000 in ({a1:1})) {{} } } else {gc()if((-1))  if (undefined) {}} else  }}");
tryItOut("throw null;");
tryItOut("throw StopIteration;");
tryItOut("let(__iterator__ = (uneval(<y><z/></y>))) { let([, __parent__, ]) { for(let y in []);");
tryItOut("/*infloop*/L:for(('fafafa'.replace(/a/g, <><x><y/></x></> ? true : ((function ([y]) { })[window]))); (var prop = (new Date(yyy))); new ((<x/> for (prop in 1e81)))()) {<x><y/></x>;yield (__count__ = undefined); }");
tryItOut("/*for..in*/for([prop, prop] = <x><y/></x> in -3/0) {; }");
tryItOut("with({}) try { throw __proto__; } finally { return; } ");
tryItOut("/*for..in*/for(const __parent__ in ((/a/gi)([<x/>].filter(function(y) { yield y; throw *;; yield y; }).isPrototypeOf(([[1]])(@foo).__defineSetter__(\"constructor\", <><x><y/></x></>))))){/*infloop*/for((__iterator__ = <><x><y/></x></>); (__iterator__ = [,,z1]).propertyIsEnumerable(\"__proto__\"); function(y) { yield y;  /x/ ;; yield y; }) {export *; }yield; }");
tryItOut("switch(window) { default: break; case __proto__: L: {yield; }break; break; case 3: yield <x><y/></x>;case (case 5: {}yield;.__defineSetter__(\"__iterator__\", function (__iterator__, __proto__) { return function(id) { return id } } )): break ;break; case <><x><y/></x></>++: const __proto__, prop = null;break;  }");
tryItOut("{if(this &= (<><x><y/></x\f></> && <y><z/></y>)) {__iterator__ = <x><y/></x>, __parent__; } else  if (([setter])) (this); else throw <x/>; }");
tryItOut("let(__noSuchMethod__, prototype) ((function(){})());");
tryItOut("gc()");
tryItOut("if((this.__defineSetter__(\"__proto__\", (1 for (x in []))))) {\nwith(false){return *;yield; }\nreturn *; }");
tryItOut("with({__count__: [z1]}){false; } const __parent__;");
tryItOut("let (prototype = 3, __parent__) { yield undefined; }");
tryItOut("if(3/0) const __noSuchMethod__, prototype: null = undefined; else  if (constructor) {yield;var prop = true; }");
tryItOut("/*for..in*/for(var prototype(( /x/g )(this, @foo)) in ) break ;");
