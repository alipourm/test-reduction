tryItOut("export __count__; const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in undefined) /*infloop*/for(prop; (eval(\"gc()\", <x><y/></x>)); this\n) { }");
tryItOut("propcatch(constructor if *::*) { __iterator__ = <x><y/></x>, (-0) = true; } finally { yield 033; } ");
tryItOut("/*for..in*/L:for(let true in __count__) let __count__ = #1=[#1#], prototype;");
tryItOut("/*for..in*/for(let prototype in ([15,16,17,18].some(new Function, prototype))) if(this.__defineSetter__(\"__iterator__\", function(q) { return q; })) {yield;return; }");
tryItOut("/*infloop*/do let constructor; while(prototype.__proto__ getter= ({}).__lookupGetter__);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__iterator__ = (yield #3={a:#3#}) /=  ? <><x>\t<y/></x></> : [1].throw((<><x><y/></x></> ? *::* : (-0))) in this.zzz.zzz) {M:if(this) __iterator__; else  if (undefined &= [1,,]) export __proto__;3.141592653589793; const prop; }");
tryItOut("L:if((__parent__.__iterator__)) export *;\nyield <x><y/></x>;\n else  if (prop = __noSuchMethod__) export *;");
tryItOut("<y><z/></y>;");
tryItOut("yield\n/*infloop*/L:while(<x><y/></x>){window;let __iterator__, __proto__ = [,,z1]; }");
tryItOut("with([11,12,13,14].some){}\n");
tryItOut("/*for..in*/for(const prop in  /x/g \n) /*infloop*/for(<x/>; <x><y/></x>; <y><z/></y>) default: export __iterator__;{}break; let __parent__ =  \"\" , __count__;");
tryItOut("with({}) export *;");
tryItOut("{throw prototype;var __count__ = <x><y/></x>, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("(1 for (x in []))");
tryItOut("this.zzz.zzz;");
tryItOut("if(prototype.()) let (__parent__ = this) {  } else  if (new Error()) {export prototype;; } else var __noSuchMethod__, constructor;");
tryItOut("return this.prototype = ({__parent__: <x/>});");
tryItOut("if(__parent__) { if ( \"\" ) } else {return; }");
tryItOut("let (__count__) { {} }");
tryItOut("/*infloop*/for(const prototype; new ([1,2,3,4].slice)((p={}, (p.z = <x><y/></x>)())((__iterator__ = true)));  /* Comment */<x><y/></x>) /*for..in*/for(const __iterator__ = <x><y/></x> in 1e81) var __noSuchMethod__, prop = <x><y/></x>;");
tryItOut("let prototype;");
tryItOut("const __parent__ = __noSuchMethod__, prop;");
tryItOut("if((__count__.(yield <><xxx {__iterator__}={({a1:1})} /></>))) {L:if(prototype.1e-81 setter= ( \"\" ).watch) ; else {throw  '' ;null; }gc() } else  if (({__iterator__ }) >>= (constructor = *::*)) const __iterator__\n");
tryItOut("{}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ((__iterator__)) in [(this.zzz.zzz - (let (__proto__ =  \"\" ) *)) for (new ((1 for (x in [])))() in (__iterator__++))]) with(({prop: yield prop = false }));");
tryItOut("const __count__ = #1#\n[,,] >>>=this;\n");
tryItOut("/*for..in*/for(const [__proto__, __count__] = <><xxx>{__noSuchMethod__}</xxx></> in (__parent__ >>= __noSuchMethod__)) {if(<x><y/></x>) export __noSuchMethod__; else  if (<x><y/></x>) {(__proto__); } else {const prototype; } }");
tryItOut("do {{(this); } } while((*) && 0);");
tryItOut("M:switch((true &= <><x><y/></x></>) == <y><z/></y>) { default: break; case (Function).call([[1]], 1e+81): do ; while((<x><y/></x>) && 0);/*for..in*/for(prop in (((1e4).__defineSetter__)(<x><y/></x>)))export *;break;  }");
tryItOut("{}\n");
tryItOut("M:switch(((\tfunction ()<x><y/></x>).call).call(window.__count__, [z1,,].__lookupSetter__(\"__noSuchMethod__\"), window).eval(('fafafa'.replace(/a/g, Function)))) { default: L:if(<><x><y/></x></>) (*::*); else  if (__iterator__) {(<><x><y/></x></>);continue M; }throw @foo;gc()gc()break; gc()break; this;break; case [11,12,13,14].map: yield  '' ; const __iterator__;break; <><x><y/></x></>;break; case (033)[ /x/g ]: break; case 4: yield <y><z/></y>;break;  }");
tryItOut("/*for..in*/for(const __count__ in this) {/*infloop*/L:for(var constructor = throw *;; window; <x/>) continue M; }");
tryItOut("__proto__ = __proto__;");
tryItOut("/*infloop*/while((\t({ constructor: __iterator__, prototype: __noSuchMethod__ }) = <x><y/></x>.valueOf(\"number\"))){let constructor, __proto__; }");
tryItOut("do {<y><z/></y>; } while((yield <x/>) && 0);");
tryItOut("/*for..in*/for(const __proto__ in (\nthis.__defineGetter__(\"__parent__\", 'haha'.split))) {(1 for (x in []))yield <y><z/></y>; }");
tryItOut("return  /x/ ; const constructor;/*for..in*/for(prototype['__parent__'] in prototype) {yield; }");
tryItOut("try { with({}) __proto__ = prop; } catch(__count__) { return __iterator__; } finally { with({}) prototype = __noSuchMethod__; } ");
tryItOut("");
tryItOut("/*infloop*/for(var __proto__ = (p={}, (p.z =  \"\" )()); ~constructor; 1e+81) prototype = @foo;");
tryItOut("/*for..in*/for(__noSuchMethod__ = <x/> in [[1,,] if (prop)]) {constructor(!arguments) = __noSuchMethod__; }");
tryItOut("switch((this.propertyIsEnumerable(\"__proto__\")).__defineGetter__(\"prop\", function  __parent__ (__count__) { yield <x/> } )) { default: break; /*for..in*/for(const __proto__ in <><x><y/></x></>) { { return 'fafafa'.replace(/a/g, (/a/gi).call) } prototype = undefined; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x/>) {return;[1]; }");
tryItOut("/*infloop*/for(const ({ __count__: ({ constructor: __noSuchMethod__ }) }) = prototype;  /* Comment */<x><y/></x>.yoyo(<y><z/></y>); <y><z/></y>.prop) {export __iterator__;return; }");
tryItOut("/*infloop*/\tfor(var prop; \t(yield  '' ); 0/0) if(<bbb xmlns=\"({__parent__: ({a2:z2})})\"><!--yy--></bbb>) { if ( \"\" ) {*::*; }} else \t{gc()export __noSuchMethod__; }");
tryItOut("M:if(eval(\"break ;\", <y><z/></y>).hasOwnProperty(\"__parent__\")) ");
tryItOut("with({constructor: __count__}){let __parent__; }");
tryItOut("L:with((<bbb xmlns:ccc=\"( /* Comment */__parent__.yoyo(@foo))\"><ccc:eee></ccc:eee></bbb>.((eval(\"*\", false))))){return @foo instanceof  /x/ ;if(#0=({__count__: <x><y/></x>})) { if (__iterator__ = __noSuchMethod__) export constructor;} else {(1 for (x in [])) } }");
tryItOut("do { } while((new ((<><x><y/></x></>).watch)( \"\" )) && 0);");
tryItOut("/*infloop*/while( /x/g )1e-81;\n/*for..in*/L:for(let [__proto__, ({ prop: __proto__, __noSuchMethod__: prop })] = __proto__ = 4. in __count__) export *;\n");
tryItOut("/*for..in*/L:for(const __count__ in ((new #1#())((__parent__.eval(constructor)))))(1 for (x in []))");
tryItOut("yield false.@*;");
tryItOut("/*for..in*/for(const __parent__ = let (prop) undefined.@* in ( /x/g  %  '' )['prop'//h\n] = this != <x/>) if( '' ) {new Functionconst __parent__, prototype = undefined; } else  if (*) {const constructor; } else {yield window;undefined }");
tryItOut("/*infloop*/for(var prop = 5.0000000000000000000000;  /x/ ; constructor) __proto__ = <><x><y/></x></>, __proto__;");
tryItOut("yield __noSuchMethod__ =  '' ;");
tryItOut("if(<y><z/></y>.__lookupSetter__(\"__parent__\").*) { if (({constructor: prop.__defineGetter__(\"__parent__\", (new Function).call),  get __count__()let (__parent__ = <><x><y/></x></>) __count__ })) {let constructor;0x99; }} else var __noSuchMethod__ = <x><y/></x>; const prototype;");
tryItOut("if((<x/> !== this).propertyIsEnumerable(\"x::__noSuchMethod__\")) {yield -3/0;gc() } else yield;return null;");
tryItOut("while(((yield prop.__proto__ setter= (1 for (x in [])))) && 0){/*for..in*/L:for(var [prototype, __proto__] = <x><y/></x> in this) {<x/>; } }");
tryItOut("/*for..in*/M:for(__count__.__iterator__ in @foo) {do yield; while((__count__) && 0); }");
tryItOut("export prototype;\nvar constructor = 3, __proto__ = *::*;\n");
tryItOut("let (__parent__, __proto__ =  '' ) { ; }");
tryItOut("__iterator__.__proto__");
tryItOut("/*infloop*/M:for((({ set prototype() { return; }  })); [,] >>> <><x><y/></x></> += new Function(); (uneval(prototype.__parent__ setter= function  constructor (__proto__) { export __noSuchMethod__; } ))) try { throw StopIteration; } catch(prototype if (function(){yield \n[1];})()) { for(let y in []); } ");
tryItOut("M:if(<><bbb xmlns=\"<x><y/></x>\"><!--yy--></bbb></>) { if (@foo[1.2e3]) {throw  /x/g ;yield false; }} else {export *;{} }");
tryItOut("if(new Iterator(true in  /x/g , window)) if((false ||  \"\" )) { } else (true);");
tryItOut("{{const prototype = <x><y/></x>; }; }");
tryItOut("/*infloop*/L:for(__noSuchMethod__ = ({constructor: window}); (<x><y/></x> | @foo); <><x><y/></x></>.isPrototypeOf(<><x><y/></x></>)) {const __noSuchMethod__, __count__; }");
tryItOut("__count__");
tryItOut("let(__noSuchMethod__, __proto__) ((function(){prototype = __count__;})());");
tryItOut("while(((true.unwatch(\"__proto__\") /= (-1))) && 0)return 1.3;");
tryItOut("/*infloop*/do {} while((-0).watch(\"__count__\", function(q) { return q; })); const constructor;");
tryItOut("{if((yield  { return <><x><y/></x></> }  for (__proto__ in this) for (prototype in 8) for each (__proto__ in @foo))) {export *;if([,] .. <><x><y/></x></>) return constructor;\nexport *;\n } }");
tryItOut("export *;");
tryItOut("/*for..in*/for(const prop = ((yield false).propertyIsEnumerable(\"__noSuchMethod__\")).__lookupSetter__(\"__count__\") in !<x><y/></x>) export *;");
tryItOut("switch(prototype.prop = <y><z/></y>) { default:  }");
tryItOut("/*infloop*/for(var ({ prototype: ({ __iterator__: __count__ }) }) = this; <><x><y/></x></> ?  /x/g  :  /x/ ; <x/>()) {yield #3={a:#3#}; }");
tryItOut("M:if((<x><y/></x>(<y><z/></y>))) {export *; } else  if ([,,z1] == prototype <= [[1]](prop)) {yield [[]]; }");
tryItOut("/*for..in*/M:for(let [__noSuchMethod__, prop] = \f<x><y/></x>--.__noSuchMethod__ in (prop.((-0)))) yield;");
tryItOut("/*infloop*/M:for(const prop; (__parent__.__iterator__); <><x><y/></x></>.propertyIsEnumerable(\"prop\")) {(window); }if([15,16,17,18].map('haha'.split, .2)) {return;return; } else  if (<><x><y/></x></>.eval(window)) yield; else yield;");
tryItOut("do M:if(<x><y/></x>) { if ([1]) {gc()throw  /x/ ; } else {n }} while(((constructor.__parent__ = ([,,])())) && 0);");
tryItOut("{yield; }");
tryItOut("L:if(__count__.((<><x><y/></x></>++))) ; else  if (constructor) <x><y/></x>; else {(<><x><y/></x></>); }");
tryItOut("throw StopIteration;");
tryItOut("do {let constructor; }\t while((<x/> ? 3 : [1,,]) && 0);");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <><x><y/></x></>) break L; }");
tryItOut("L: ;");
tryItOut("let (constructor = ({a1:1}), __iterator__ = (1e-81 .@ false)) {  }");
tryItOut("while((#2=[false]) && 0){while(((new (this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split))(({ set  /x/g ['__count__']() { yield __count__.yoyo(window) } ,  get __parent__(__iterator__)( /* Comment */null) })))) && 0){export *; }constructor }");
tryItOut("try { let(prop = <><x><y/></x></>) { return; } finally { try { <x><y/></x>; } catch(__proto__) { throw <x><y/></x>; } finally { export *; }  } ");
tryItOut("/*infloop*/for(let __iterator__ = ('haha'.split++).__defineGetter__(\"\\\"\", gc); constructor = <><x><y/></x></>; __iterator__.__count__+=(this.unwatch(\"__proto__\"))) {yield; }");
tryItOut("if(<x/>) {(__count__.__defineSetter__(\"__proto__\", 'haha'.split)); }");
tryItOut("/*infloop*/while(<x><y/></x> for (__count__ in <x/>)){return prototype; }");
tryItOut("with({__iterator__: @foo}){K;; }\n__proto__;");
tryItOut("{ }");
tryItOut("/*infloop*/while((<x><y/></x>.isPrototypeOf(this)));");
tryItOut("Functionvar prop = <y><z/></y>;");
tryItOut("let (__parent__ = __iterator__.constructor = (prop / <x><y/\f></x>).prop = 0x99 for each (__count__ in <y><z/></y>)) { ({a2:z2}); }");
tryItOut("with(<x><y/></x>)break M;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __proto__] = <{__parent__}>yyy</{__parent__}> in (((@foo %= undefined))[\n<x/>])) break M;");
tryItOut("{/*infloop*/for(let __count__; prop =  ''  | #3={a:#3#}; (__iterator__%=*)) ; }");
tryItOut("if((prototype.(*))) {continue ; } else  if ([1,,]) return null;");
tryItOut("let([, ] = prop = __proto__, ({ constructor: ({ __noSuchMethod__: [__noSuchMethod__, , ({ __noSuchMethod__: prototype, constructor: constructor })], __iterator__: __count__ }), constructor: [prop, ] }) = (this.__defineSetter__(\"__proto__\", ({}).__lookupGetter__))) ((function(){this.zzz.zzz;})());");
tryItOut("let (constructor = ([z1] / @foo)) { /*infloop*/\nM:do {{} } while((new #1=[#1#])); }");
tryItOut("with(this.__defineGetter__(\"__proto__\", function  __proto__ () { export prop; } ))with({prop: <x><y/></x>})gc()");
tryItOut("if((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(Number()))) var __parent__ =  '' ; else  if (this > __proto__ = <x><y/></x>) export *;");
tryItOut("/*for..in*/M:for(let prototype in (((1 for (x in [])))(new (__noSuchMethod__.(-0))(!<x/>, let (prototype) 0/0))))let (__count__ = <><x><y/></x></>) { throw <x><y/></x>; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("let (prop) { {export *\n } }");
tryItOut("return;gc()");
tryItOut("return;");
tryItOut("let constructor = @foo;");
tryItOut("__noSuchMethod__ = <y><z/></y>;");
tryItOut("with({__count__: (<><x><y/></x></>.@foo)}){gc()/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in window) {__proto__;<><x><y/></x></>; } }");
tryItOut("/*infloop*/for(let ({ constructor: [[, ]], __parent__: ({ __iterator__: [, prototype, , ], __iterator__: [, [, []], \f, , __count__] }) }) = ([this]); constructor.prop = function(id) { return id }; this && <x><y/></x>) let (__parent__ = <><x><y/></x></>) { {} }");
tryItOut("/*infloop*/M:for([, , function::prop] =  /* Comment */constructor; try { let(prop, __iterator__ = <y><z/></y>) { break M; } catch(__proto__ if (function(){let(__count__ = @foo, prototype) { 1e-81;})()) { throw __count__; } ; __count__ = @foo) {gc()const __noSuchMethod__; }");
tryItOut("throw [[]];const constructor, prototype;5.0000000000000000000000;");
tryItOut("/*infloop*/for(prototype = __count__.__lookupGetter__(\"__noSuchMethod__\"); ((((function ([y]) { })().hasOwnProperty(\"prototype\")) for (__iterator__ in <x/>.hasOwnProperty(\"prototype\")) for ((+this)(window.hasOwnProperty(\"__parent__\")) in (constructor =  \"\" )) for each (constructor in 033))); (({__count__: false, __parent__: @foo })) if ( /x/ )) {with({__count__: <x><y/></x>}){{}if((1.2e3.*).__lookupGetter__(\"__proto__\")) { if (new (__iterator__.(1e4))()) /*infloop*/for(const constructor; <><x><y/></x></>; 0x99) {\fvar __proto__, prop = #1=[#1#]; } else {throw <x/>; }} } }");
tryItOut("/*for..in*/\tfor(var prop = (<zzz>__count__</zzz>.(__iterator__) >>= <x/>) in *::*) var function::prop = <><x><y/></x></>, __parent__;");
tryItOut("{const __count__, __noSuchMethod__ = this; }");
tryItOut("gc() const __count__;");
tryItOut("do {switch(<><x><y/></x></>.yoyo(constructor) / (gc)( /x/ , <><x><y/></x></>)) { default: break; case <><x><y/></x></> ? {} : [[]]: with({__proto__: <x><y/></x>}){throw <x/>;yield, prop; } } } while((((({ get __proto__ __proto__ (__count__) { {let __noSuchMethod__; } } , __proto__: prop = <x/> .@ undefined })).__lookupSetter__(\"constructor\"))) && 0);");
tryItOut("L: {__iterator__; }");
tryItOut(";return false;\nconst __iterator__, __parent__ = 1e4;\n");
tryItOut("return\n");
tryItOut("if((((__parent__ = <x><y/></x>))[((({prototype getter: <><x><y/></x></> }))[__iterator__ , false] &&  /x/ (let))])) throw  /x/g  else  if (<y><z/></y>) if(<x><y/></x>) { if (this) throw @foo; else {; }} else ;");
tryItOut("if([,]) { if (<><x><y/></x></>) {\ndefault: return;case 0: return *;break; case <><x><y/></x></>: break; yield; } else {export *; }}");
tryItOut("{continue ;; }");
tryItOut("\n\n");
tryItOut("/*infloop*/L:for(var [] = this.__defineGetter__(\"__iterator__\", gc); __count__.__iterator__ = <><x><y/></x></> += <x/>;  /x/ .isPrototypeOf( /x/g .isPrototypeOf(<x/>))) {(__parent__);Math.pow }");
tryItOut("export __parent__;");
tryItOut("((yield __noSuchMethod__))(((prototype)(true, function ([y]) { }))(#2=[[1]],  '' ).__noSuchMethod__)");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (null ? __noSuchMethod__ : true , eval(\"yield;\", 5.0000000000000000000000)) in  \"\" ) {M:if(new (undefined)()) {return #1#;yield; } else  if ((-0.prototype)) ( /x/ );throw -null; }");
tryItOut("try { continue L; } finally { yield function (__proto__)( /x/ )--; } ");
tryItOut("with((({prop: <x><y/></x>, prop: [<><x><y/></x></>] })) -= __iterator__){<y><z/></y>;\nexport *;\nM:do {<x><y/></x>continue M; } while((undefined) && 0); }");
tryItOut("throw ({}).__lookupGetter__\nreturn;");
tryItOut("switch(void eval(\"return window;\", constructor)) { case window: break; case 5: throw <x><y/></x>;break; case <x><y/></x>.propertyIsEnumerable(\"prop\"): break; {}break;  }\n/*infloop*/while(__count__ for (__noSuchMethod__ in 1.3))with((yield __count__))gc({}).hasOwnProperty");
tryItOut("if(window) { if (yyy) {( \"\" ); }} else {let __iterator__;export *; }\n__noSuchMethod__");
tryItOut("/*for..in*/for(const __noSuchMethod__ = this.__defineGetter__(\"__count__\", [15,16,17,18].filter((window--).watch,  /x/  != 1e+81)) in 'fafafa'.replace(/a/g, (function(q) { return q; }).apply)) {let [constructor, , __proto__, ] = __parent__ = <><x><y/></x></>;{L:if(this) {export __iterator__; } } }");
tryItOut("/*for..in*/M:for(let [__noSuchMethod__, __parent__] =  /x/g  in <x/>.__lookupSetter__(\"__iterator__\"\f).watch(\"__proto__\", new Function)) export *\f;");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in ((function(q) { return q; })((prototype)[<><x><y/></x></>].__defineSetter__(\"constructor\", (1 for (x in [])))[__noSuchMethod__ | ({a1:1})]))){with(0.1)__proto__;yield 3/0; }");
tryItOut("/*infloop*/for(var ({ __proto__: ({ __proto__: prototype, __count__: ({ __parent__: [] }) }) }) = ('fafafa'.replace(/a/g, ({}).__lookupGetter__)); <><x><y/></x></> & window; gc) ({ prototype: __parent__ })");
tryItOut("/*for..in*/L:for(var prototype in ((function  __proto__ (__proto__, __parent__) { return setter = __proto__ } )((prop.constructor getter=  \"\" ))))export prototype;");
tryItOut("break L;");
tryItOut("\ncontinue \n;");
tryItOut("/*for..in*/()for(const prop in ((({}).__lookupGetter__)((this.zzz.zzz >>= Date('fafafa'.replace(/a/g, new Function)))))) __noSuchMethod__  prototype");
tryItOut("yield\n;");
tryItOut("/*for..in*/for(let __proto__ in ({})) {{}/*for..in*/M:for(let prop in  \"\" ) {eval; } }");
tryItOut("prop = <><x><y/></x></>;");
tryItOut("/a/gi");
tryItOut("__parent__");
tryItOut(";");
tryItOut("while((__proto__.__count__ = yield this) && 0){/*infloop*/M:do /*for..in*//* nogeckoex bug 349964 */\t for  each(let __proto__ in prop) const __iterator__ = *; while((([1,2,3,4].slice)())); }");
tryItOut("/*infloop*/for(var __count__ = <><x><y/\f></x></>; <><x><y/></x></>; *) prop = *;");
tryItOut("/*infloop*/for(<x/>; __noSuchMethod__.constructor =  \"\" .__defineGetter__(\"constructor\", gc); (Date())) {throw <y><z/></y>;gc() }");
tryItOut("/*infloop*/while( /* Comment */this.valueOf(\"number\"\n)){return;\n\n\nexport prop; }\n");
tryItOut("do {if((yield (window for each (__iterator__ in 0/0)))) let (__count__, __iterator__ = <><x><y/></x></>) { return; } else ([1,2,3,4].slice).apply } while((({constructor: (* += null), __proto__ setter: (1 for (x in [])) })) && 0);");
tryItOut("if(({__iterator__: <><x><y/></x></>, __iterator__: #1# }) < (window.throw(*)) | (yield __count__|=__parent__)) if(__iterator__.(<x><y/></x>)) {let prop = [1], prop; } else  if (this.__defineGetter__(\"prop\", function  __iterator__ ()(-0))) {let gc;{} } else  if (new (__noSuchMethod__.yoyo(({\f get prop(constructor) { return * }  })))(x::function::__proto__ = __parent__ << undefined ? * : 1.3)) {L: {} } else {yield  /x/ ; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/try { with({}) throw __count__; } finally { constructor//h\n = __count__; } ");
tryItOut("switch((eval(\"@foo\", [[]])).watch(\"prototype\", (<x><y/></x>).__defineSetter__)) { default: /*infloop*/while(undefined){}break;  }");
tryItOut("throw StopIteration;");
tryItOut("(prop)\n/*infloop*/L:while((function ([y]) { })()){{}<x/>; }\n(window);");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, 'haha'.split); this; [<x><y/></x> <<= this].some(Math.pow)) {const __proto__ = #1=[#1#];L: throw false; }");
tryItOut("{constructor = #1=[#1#];; }");
tryItOut("/*infloop*/L:do {yield; } while(new window.__lookupSetter__(\"delete\")(this.__defineSetter__(\"__noSuchMethod__\", new Function)));");
tryItOut("/*for..in*/for(const [__parent__, constructor] = <x/>, false in  \"\" ) {{}/*for..in*/for(__iterator__ = function(id) { return id } in __parent__) 'haha'.split }");
tryItOut("{throw <x><y/></x>;/a/gi }");
tryItOut("with({}) yield = <y><z/></y>['__iterator__'] = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in *) prototype = 1e+81;");
tryItOut("/*infloop*/do {this;export * } while([new Boolean()]);");
tryItOut("throw *::*;/*for..in*/for(var [constructor, __iterator__] = ([<x/>].map(function  __iterator__ (__noSuchMethod__) { yield  } )) , Function(prop) in  '' ) let prop = <x/>, __iterator__;");
tryItOut("with(__parent__){ }");
tryItOut("continue ");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(__proto__ = new (*::*)((undefined.throw(.propertyIsEnumerable(\"prop\"))), ({a2:z2}) >= *::*) ? __count__ : <x/> in export *.eval(true if (prototype))) continue ;");
tryItOut("L:with((<><x><y/></x></>).apply)break L;");
tryItOut("prototype = prototype;");
tryItOut("do {yield (function ([y]) { })(); } while((true) && 0);");
tryItOut("/*infloop*/M:for(var prototype = window; [[1]]; <><x><y/></x></>) var constructor, delete;");
tryItOut("with({}) prop = prototype;");
tryItOut("continue M; const __noSuchMethod__;\n(__parent__);\n");
tryItOut("/*infloop*/for(__count__ = __noSuchMethod__; window != 1.2e3;  /x/g .propertyIsEnumerable(\"__count__\")) { }");
tryItOut("while((__iterator__%=[z1,,]) && 0){L: {(prop.__iterator__);with({}) { throw [[1]]; }  } }");
tryItOut("/*infloop*/do {while((((this.zzz.zzz) ? ([(function ([y]) { })()]) : <y><z/></y>)) && 0){L:do return [z1]; while((4.) && 0); } } while((undefined.__proto__));");
tryItOut("let (__iterator__ = *) { return; }");
tryItOut("yield;");
tryItOut("L:if(0) {return;throw <x><y/></x>; }");
tryItOut("if((<ccc\n:ddd> </ccc:ddd>\f.(((<x><y/></x>)[<x><y/></x>.__lookupSetter__(\"__iterator__\")])))) export *; else \nthrow *;\nwith({}) with({}) __count__ = (throw 3.141592653589793)\n");
tryItOut(";yield;yield;");
tryItOut("/*infloop*/for(var __proto__ = *; ({a2:z2}); <y><z/></y>) {; }");
tryItOut("for(let y in []);");
tryItOut("((Math.sin).call)()['__parent__'] = constructor;");
tryItOut("yield <x><y/></x>;\ngc()\n");
tryItOut("/*infloop*/for((__proto__ = null); ; <bbb xmlns=\"*::*\"> </bbb>) {return window;/*for..in*/for(var constructor in ((function (__proto__) { return <x><y/></x> } )( \"\" ))){} }");
tryItOut("switch((({ __count__: __noSuchMethod__ }) = undefined -= -1)) { case 7: break; default: {}break; ; } const __count__;");
tryItOut("/*infloop*/for(var x::prototype; [__iterator__ for (function::__iterator__ in <x><y/></x>)]; this.__defineSetter__(\"__count__\", [1,2,3,4].slice)) {export *;throw  '' ; }");
tryItOut("<bbb xmlns:ccc=\"__parent__ = ((case (uneval(<x><y/></x>.(window))): ;break; )[(function  __parent__ (x::\fsetter: #1#) { return @foo } )])\"><ccc:eee></ccc:eee></bbb>");
tryItOut("if(prototype.__count__) let() { export constructor; else {eval }");
