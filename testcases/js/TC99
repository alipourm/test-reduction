
tryItOut("/*for..in*/for(let [prototype, prototype] = __proto__.constructor getter= this.__defineSetter__(\"prop\", Math.pow) in prototype = false) M:if(prop.(__noSuchMethod__.(({a2:z2})))) with({__iterator__:  /x/g }){{}; }");
tryItOut("/*infloop*/while((true instanceof this)){{}yield; }");
tryItOut("gc()\nL:if(\t[1,,]) {return  \"\" ;yield <><x><y/></x></>; } else const __noSuchMethod__, __count__ = window;");
tryItOut("{/*infloop*/while(({prototype:  /x/ , constructor: <x><y/></x> })){<><x><y/></x></>; } }");
tryItOut("yield");
tryItOut("if(__iterator__.@foo) { if (new RegExp(*)) {while((<x><y/></x>.isPrototypeOf(window)) && 0){continue L;{} } } else {yield  '' ; }}");
tryItOut("/*for..in*/for(var @foo += (function(q) { return q; })({}, [,,]) in function(y) { yield y; throw prop;; yield y; }(__iterator__)) gc()");
tryItOut("let(__noSuchMethod__ = <><x><y/></x></>, constructor = <x><y/></x>) ((function(){;})())\nthis.zzz.zzz;");
tryItOut("if([]) {;with(prop = <x/>)M:if(this)  /x/g ; else {throw  /x/g ; } } else  if ((uneval((({prototype: <x/> })) ? <><x><y/></x></>.propertyIsEnumerable(\"__count__\") : (let (__iterator__ = @foo, __proto__) __noSuchMethod__))).__lookupGetter__(\"__count__\")) {(('haha'.split)(*::*)); } else /*infloop*/for(constructor; <><x><y/></x></> ? ({}) :  /x/ ; (__parent__+=prototype)) while((@foo) && 0){{}yield; }");
tryItOut("with([((yield <><x><y/></x></>))]){/*infloop*/M:do (arguments); while()\n/*for..in*/L:for(const __iterator__ = ([1,,].yoyo(<x/>)) in 0/0) {var __noSuchMethod__, prototype;return 3/0; } }");
tryItOut("{yield const constructor; }");
tryItOut("[__count__,  /x/ .__lookupGetter__(\"__noSuchMethod__\"), , ({ prototype: ({ __count__: [function::__parent__, , ({ __parent__: [] })] }), constructor: constructor })]");
tryItOut("if((({ __noSuchMethod__: __count__ }) = [11,12,13,14].filter)) /*infloop*/for(const constructor; \tthis; ) while((window) && 0)const prototype = <>\t<x><y/></x></>; else  if ((this.__defineGetter__(\"__parent__\", ([,,]).watch))\n) /*for..in*/(var prototype in <><x><y/></x></>) {/*for..in*/for(__proto__ in @foo) yield; }");
tryItOut("for(let y in []);");
tryItOut("if((new (function  __proto__ (prototype, __count__) { yield undefined } )(1.2e3, @foo)))  else {break L;return <><x><y/></x></>; }");
tryItOut("if([(this.zzz.zzz) if (null)]) {throw null; } else let __parent__ = *::*, prop = #3={a:#3#};");
tryItOut("{gc()<x><y/></x>; }");
tryItOut("try { let(__noSuchMethod__ = prop, __iterator__) ((function(){})()); } finally { return; } ");
tryItOut("L:if(window.watch(\"constructor\", (new Function(\"<y><z/></y>;\")))) {/*infloop*/while((new (gc)(<x/>))){yield  /x/ ; } } else  if ((<><bbb xmlns:ccc=\"((<x><y/></x>.unwatch(\"__parent__\"))[__noSuchMethod__.constructor])\"><ccc:eee></ccc:eee></bbb><ccc:ddd></ccc:ddd></> ? (*::*.prop) : false += <><x><y/></x></> == --4..__defineGetter__(\"__count__\", function  prop (({ constructor: constructor }), prototype) { return prototype.prototype } ))) break ;");
tryItOut("L: {;continue ; }");
tryItOut("/*infloop*/do {{}\nvar __proto__, __count__;\n } while(((<x/>.constructor = (-1)) < __noSuchMethod__ =  /x/ .yoyo(__noSuchMethod__ >>> __count__)));");
tryItOut("L: const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ function::prop: __proto__, __count__: constructor }) in window) {yield; } const __count__;");
tryItOut("{if((new (( /* Comment */this))((eval(\"<x><y/></x> == *::*\", (1e-81)) / [15,16,17,18].some(+null, [[1]])), undefined))) (p={}, (p.z = <x/>)()); else  if ((this.__defineSetter__(\"prop\", Math.pow))) {yield <><x><y/></x></>;export __parent__; } }");
tryItOut("M:if( /x/g .@foo) { if (([15,16,17,18].sort(Math.pow, this.__defineGetter__(\"__proto__\", ((this).watch).call)))) const prototype;} else {const prop, __proto__;L:if(({})) yield <><x><y/></x></>; else  if ((function ([y]) { })()) return null; else yield; }");
tryItOut("while(((<x><y/></x> << <x/>)) && 0){/*infloop*/for(x::__iterator__ = <><x><y/></x></>; *::*; <><x><y/></x></>) {yield prototype;break L; } }");
tryItOut("do {M:if(__parent__ = (-0)) { if ([this.__defineSetter__(\"prototype\", ({}).hasOwnProperty)].sort(gc)) {(undefined);return  '' ; } else {let __parent__;\nbreak ;\n }} } while(((new ((new Function(\"M:with({__parent__: /){*; }\")))())) && 0);");
tryItOut("export *;;");
tryItOut("yield;yield;");
tryItOut("with(<!--yy-->){continue ; }");
tryItOut("{M:do {const __iterator__, __parent__ =  /x/ ;return; } while((((new Function(\"break L;\")))(this)) && 0); }");
tryItOut(" '' ;");
tryItOut("L: {;/*for..in*/for(let [__noSuchMethod__, __proto__] = constructor in 1e81) {const __count__; } }");
tryItOut("if( /x/g .__noSuchMethod__ = window) { } else  if (<x><y/></x>.__lookupGetter__(\"__parent__\")) {this; } else {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <><zzz>this.zzz.zzz</zzz></>) for(let y in []);");
tryItOut("let (prop, __parent__ = .2) { {} } const __count__;");
tryItOut("/*for..in*/L:for(var prototype = ([11,12,13,14].map) in null.__count__) continue L; const __proto__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("with(('fafafa'.replace(/a/g, 'haha'.split)));");
tryItOut("/*infloop*/while(constructor)3");
tryItOut("throw constructor;\n/*for..in*/for(const __noSuchMethod__ = (this.__defineGetter__(\"constructor\", (<y><z/></y>).call)) in false) {__parent__, __iterator__; }\n");
tryItOut("'haha'.split\n{}\n");
tryItOut("/*infloop*/for((__noSuchMethod__ < function(id) { return id }); ({}).__lookupGetter__; <x><y/></x>) {return this; }");
tryItOut("/*for..in*/L:for(const [constructor, prop] = (((function ([y]) { })() for each (__proto__ in undefined))(([15,16,17,18].filter(function(y) { yield y; <!--yy-->; yield y; }, function  __iterator__ (prop) { return * } ())))) in  /* Comment */void @foo) {throw @foo;arguments; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((function  constructor ()(uneval(<><x><y/></x></>.__lookupSetter__(\"prop\"))))(__parent__.yield)))if((([,,z1])(({a1:1}), __proto__) :: <><x><y/></x></>.hasOwnProperty(\"__iterator__\").__lookupSetter__(\"__count__\"))) {throw <><x><y/></x></>; } else  if (@foo) {continue ;throw false; }");
tryItOut("L:if(__noSuchMethod__ = <><x><y/></x></>) { if ((-3/0).call(let (prop) (this >= <x><y/></x>.unwatch(\"constructor\")), )) /*infloop*/for(const __count__; x::__iterator__ = <x><y/></x>; yield constructor) {yield  /x/ ; }} else {export *; }");
tryItOut("/*for..in*/for(prototype in false) export *;");
tryItOut("/*for..in*/for(let prototype = window in 3/0) {(1 for (x in [])) }");
tryItOut("/*infloop*/L:for(let prop; (this.__defineSetter__(\"prototype\", ({}).hasOwnProperty)); this.__defineSetter__(\"__iterator__\", Function)) return  '' ;");
tryItOut("L:while((undefined) && 0)/*for..in*/for(var [get, __proto__] = <x/> in  /x/g ) M:while((constructor) && 0){{} }");
tryItOut("L\t: {/*infloop*/for(__proto__ = __proto__[<x><y/></x>]; new (((1 for (x in []))).call)(<><x><y/></x></>); var __proto__, let = <x><y/></x>) {{}__noSuchMethod__; } }");
tryItOut("switch((null)) { case 1: (false);break; default: break; break ;break; case 7: case 2: case 8: break; {}case #2=[arguments]:  }");
tryItOut("/*infloop*/for(*; <><x><y/></x></>; true) ");
tryItOut("/*infloop*/for(var prop; ({__count__: prototype}); true) __count__ =  \"\" ;");
tryItOut("export constructor");
tryItOut("/*for..in*/for(__parent__ in <y><z/></y>) {{}yield [[]]; }");
tryItOut("L:if(<><xxx {__parent__}={<><x><y/><\t/x></>} /></>) return; else  if ((__parent__ = @foo))  else {{} }\f");
tryItOut("let (__count__ = (((({__proto__: (<x><y/></x> in @foo), __proto__: ({a1:1}) })).watch(\"constructor\", ({}).__lookupGetter__))[prototype.__count__]), __parent__) { if( /* Comment */window.unwatch(\"prop\")) {(constructor); } }");
tryItOut("if((window for each (__proto__ in <y><z/></y>) if (<y><z/></y>))) {yield <x><y/></x>; } else  if (undefined , __proto__) throw window; else {yield  /x/g ;throw  \"\" ; }");
tryItOut("const __iterator__; const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in  /x/ ) {yield __noSuchMethod__; }");
tryItOut("if(<><{__iterator__}><x><y/></x></{__iterator__}></>) {yield <><x><y/></x></>;gc() } else  if (*::*) {yield [1]; }");
tryItOut("if(this.__defineSetter__(\"undefined\", function (__parent__) { yield 'fafafa'.replace(/a/g, [1,2,3,4].map) } )) while(((__count__.__parent__ = .2)) && 0){const __count__, __iterator__ = <x><y/></x>;, prop;*; } else {if(<x><y/></x>) { if (window) {{}return; } else {(1 for (x in []))return <x><y/></x>; }}; }");
tryItOut("if((__count__ = <x><y/></x>)) throw [,]; else  if ((uneval([,,z1]))) (<x><y/></x>);");
tryItOut("/*for..in*/__proto__, __proto__for(*.throw(<><x><y/></x></>) in (((function(q) { return q; }).call)(prop))){/*for..in*/L:for(var x::__proto__ in ((Math.pow)(window)))gc() }#3={a:#3#};\nvar prototype = <x><y/></x>;\n");
tryItOut("if((((p={}, (p.z = __iterator__|=3/0)())) for \teach (__iterator__ in function::__proto__ +  /x/g ) for each (__proto__ in *) for each (__iterator__ in true) for (__iterator__ in <><x><y/></x></>))) { if (constructor.yoyo(window) ? (<><x><y/></x></>)() : ({a1:1}).__defineSetter__(\"prototype\", (new Function(\"gc()\")))) {const __proto__ = <y><z/></y>;L: {{}({}); } } else {gc(); }}");
tryItOut("throw __iterator__;");
tryItOut("M:if(([(this.__defineSetter__(\"__parent__\", Math.sin)) ==  /x/ .unwatch(\"__parent__\")])) { if ((<xxx>{__noSuchMethod__}</xxx>.(null))) yield (uneval(undefined)); else <xxx>{__count__}</xxx> const __iterator__;}");
tryItOut("let (prototype = (((new Function((__count__.eval(__noSuchMethod__)))).__defineSetter__).call).call((<><x><y/></x></>.__iterator__ * [<><x><y/></x></> for each (prototype in <x><y/></x>) if (<y><z/></y>)]), ({ __iterator__: \t__count__ }) = ({ __parent__: ({ prototype: prop }), function::function::__proto__: ({ __iterator__: __iterator__, constructor: __proto__ }) }), <bbb xmlns=\"(<x/>.*)\"> </bbb>)) { /*for..in*/for(let constructor in 1.3) prop = <><x><y/></x></>; }");
tryItOut("if(({ set prototype()String() -= ( /x/ .*),  set __parent__ __proto__ ([], function::__proto__) { /*infloop*/for(var __noSuchMethod__;  /x/ ; __parent__) { /x/ ;let __iterator__, __proto__ =  '' ; } }  })) export __proto__; else  if ((false.@*)) {continue L;(*); }");
tryItOut("/*for..in*/for((<x><y/></x> += window++)(eval(\"const __proto__ = [1];\", ())) in @foo) {export __proto__; }");
tryItOut("/*infloop*/L:for(__noSuchMethod__ = \n({a1:1}).unwatch(\"__proto__\"); [z1,,]; __proto__ = <><x><y/></x></>) /*for..in*/for(const <x><y/></x> in  /x/ ) {new Function }");
tryItOut("M:if(try { @foo } catch(prototype if (function(){let prototype = 1e4;})()) { return @foo; } catch(function::constructor) { continue ; } ) { }");
tryItOut("let (prototype) { throw arguments; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("let(({ __count__: __parent__, __proto__: constructor }), __iterator__) ((function(){this.zzz.zzz;})());");
tryItOut("try { return __noSuchMethod__ = <>(({prop:  /x/g  }))</>\f; } catch(__proto__) { (<><x><y/></x></>)(0) = __parent__; } ");
tryItOut("{throw ; }");
tryItOut("/*infloop*/while(function(id) { return id }){break ; }");
tryItOut("__parent__ = prop;");
tryItOut("if(new <><x><y/></x></>()) switch(true) { case 1: ;break;  } else  if (null) {/*for..in*/for(const constructor = 0.1 in window) {} }");
tryItOut("M:if(<y><z/></y>) {{} } else {throw 1.2e3;__parent__ = (prop = <y><z/></y>), [[, __proto__], , , __count__] }");
tryItOut("__iterator__ = constructor;");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) <x/> else  if ((<x/>)(<x><y/></x>) = <x/>.__lookupGetter__(\"prop\")) {const __count__ = window;var __proto__ = @foo, __proto__ = 1.2e3; } else {{} }/*infloop*/while(*::*)throw <x/>;");
tryItOut("L:switch(<><x><y/></x></>.__lookupGetter__(\"constructor\")) { default: __noSuchMethod__;[1,2,3,4].map } const prototype;");
tryItOut("L: {; }");
tryItOut("/*for..in*/for([__parent__, prop] = ( /* Comment */[,].prototype).yoyo(__iterator__.(constructor)<ccc:ddd><x><y/></x><ccc:ddd></ccc:ddd></ccc:ddd>)/ in ( /x/  + <><x><y/></x></>) *= <><ccc:ddd><!--yy--></ccc:ddd></>) {yield\nyield; }");
tryItOut("throw StopIteration;");
tryItOut("let(constructor = eval(\"constructor.__iterator__ = <><x><y/></x></>\", @foo)) ((function(){let(__iterator__) ((function(){__proto__ = prop;})());})())");
tryItOut("/*for..in*//*\n*/for(const __parent__ in @foo) {prop; }");
tryItOut("if(null) { if ((this.__defineSetter__(\"prop\", function(q) { return q; }))) __proto__} else { }");
tryItOut("/*for..in*/for(var [prop, prop] =  in ~([].valueOf(\"number\") ? 0x99 : ( /x/g .(export *; \"__parent__\", function(y) { yield y; gc(); yield y; })))) this, <x><y/></x>");
tryItOut("with(__parent__ = <><x><y/></x></>)return;");
tryItOut("/*for..in*/for(__parent__ = <><x><y/></x>\t</>.@* in <x><y/></x>) return;");
tryItOut("if(<xxx>{__proto__}</xxx>) { if (this.__defineSetter__(\"prototype\", Function)) {try { var constructor = <x><y/></x>; } catch(__proto__ if <y><z/></y>) { throw window; } catch(constructor) { return; } const constructor = prototype, __proto__; }} else return  /x/g ;");
tryItOut("with({function::constructor: (\nconstructor)}){(new Function(\"gc()\")) }");
tryItOut("/*infloop*/for(var __iterator__; (\nget); (p={}, (p.z = <><x><y/></x></>)()).unwatch(\"__noSuchMethod__\")) {const let = undefined;var __parent__ = <x/>; }");
tryItOut("if(~(* !== *)) { if (function  __parent__ (__noSuchMethod__, prototype) { return  /x/  } ) constructor} else {export prototype; /x/g ; }");
tryItOut("/*infloop*/L:do /*for..in*/for(var [__parent__, prototype] = (<y><z/></y>.*.__defineSetter__(\"constructor\", [1,2,3,4].slice)) in prototype) function(y) { yield y; continue ;; yield y; } while((({ __proto__: [, ({ __iterator__: ({ __proto__: prop }), __iterator__: ({ __iterator__\t: prototype }) }), ({ __parent__: prop }), constructor, [, ]], __count__: prop }) = (((new (undefined)(this)) if (__count__)))\n));");
tryItOut("/*infloop*/for(let prototype.__parent__; [typeof <x><y/></x>].filter((new window()).watch); -<x/> .@*:: prototype++.__lookupGetter__(\"prototype\")( /x/ )) {window\nyield;\nconst __noSuchMethod__ = <><x><y/></x></>, __iterator__ = 5.0000000000000000000000;\ngc() }");
tryItOut("if((p={}, (p.z = constructor)())) const __proto__; else  if ([<y><z/></y>]) {export __iterator__;export *; } else __iterator__ = [1,,];");
tryItOut("do yield; while((false) && 0);");
tryItOut("with(({}.__proto__)){var false, <><x><y/></x></> = <y><z/></y>; }");
tryItOut("L:if(yield __parent__ = <x><y/></x>)  else  if (((undefined for (__parent__ in prop)) , ((({a1:1})).call((this.__defineSetter__(\"prop\", gc)), new this( /x/g , 0.1))))) if(window) { if ( /x/g ) {}} else {var __noSuchMethod__, function::prototype = ({a2:z2}); } else {export __parent__; }");
tryItOut("if([<x><y/></x> >> <><x><y/></x></>]) {var case __parent__: break; default: <y><z/></y>case <><x><y/></x></>: break; const ;var prototype;(undefined);case null: continue M;{}break; break; break; case 7: ; }");
tryItOut("if('fafafa'.replace(/a/g, eval)) ({}).__lookupGetter__ else {throw @foo; }//h\n");
tryItOut("export __proto__;");
tryItOut("/*for..in*/for(let __count__ in ((function(q) { return q; })(__count__.__defineGetter__(\"__iterator__\", (Math.sin).apply)))){if(()) {__count__; } else  if (constructor\n = <x/>) yield; }");
tryItOut("try { try { ({}).__lookupGetter__ } catch(__parent__ if (function(){gc()})()) { *::*; }  } catch(__iterator__ if (function(){return !<x><y/></x>;})()) { let constructor = <x><y/></x>; } finally { this.zzz.zzz; } ");
tryItOut("if(this.zzz.zzz) (new Function(\"export __proto__;\"))");
tryItOut("/*infloop*/M:do  while(let (constructor, constructor) [1] .@ <><x><y/></x></>);");
tryItOut("break L;");
tryItOut("__parent__: 1.2e3\nlet prototype = <y><z/></y>, __count__\nnew Function");
tryItOut("let (__parent__) { return constructor; }");
tryItOut("/*infloop*/for(var __count__ = 5.0000000000000000000000; false; function::constructor)  { export __iterator__; } , __parent__ = true;");
tryItOut("if((p={}, (p.z = <><x><y/></x></>)()))  else  if (window) export __count__; else {return @foo; }");
tryItOut("/*infloop*/for(var ({ __proto__: [, ({ __parent__: [, ] }), , , prop], __parent__: constructor.__noSuchMethod__ }) = new __count__.(((1 for (x in []))).call(<x><y/></x>, true))\f; -0; new __count__ = prototype() ? (__proto__ = <x><y/></x>) : -1.unwatch(\"__parent__\")) {/*for..in*//* nogeckoex bug 349964 */ for  each(prop in -1) {\tbreak L; } }");
tryItOut("return\nexport __count__");
tryItOut("do {if(<>[z1,,]</>) __count__ = .2; else  if ( '' ) ;if([[1]]) { } else null; } while(((-1) = @foo) && 0);\f");
tryItOut("/*infloop*/L:do export __iterator__; while(this.__defineGetter__(\"prop\", function(y) { yield y; export __parent__;; yield y; }));");
tryItOut("export __proto__; const __parent__;");
tryItOut("{case false: return <><x><y/></x></>;break; case <><x>\f<y/></x></>: break; continue M; }");
tryItOut("{yield <><x><y/></x></>;export *; }");
tryItOut("let (__noSuchMethod__) { __noSuchMethod__ = prop; }");
tryItOut("L:if(((<><x><y/></x></>) +  /* Comment */[function ([y]) { }].sort(Math.sin).prop)) { if (eval(\"\\nnull\", new Date(false, <x><y/></x>))) if(<x/> % (-1)) { if ((<><x><y/></x></> & <x><y/></x>)) {__iterator__ = 1.3, prop = __proto__; }} else {export *;let __parent__; }} else /*for..in*/for(let __proto__ in ((/a/gi)(#1# << prop))){switch(false) { default:  }export *; }");
tryItOut("if(prop) { if (5.0000000000000000000000) {export *;return *::*; } else ;}");
tryItOut("gc()");
tryItOut("break ; const prototype");
tryItOut("\n; const __parent__;");
tryItOut("/*infloop*/do {export *;return; } while(function(id) { return id });");
tryItOut("return;\nif(gc()) { if ((RangeError( \"\" )) / (function ([y]) { })().valueOf(\"number\")) __count__ else {gc() }}\n");
tryItOut("if(<><zzz>new window(<y><z/></y>)</zzz></>) { if (<x><y/></x>.__noSuchMethod__.@*) throw StopIteration;} else export constructor;");
tryItOut("/*infloop*/for(const __noSuchMethod__ = <x><y/></x> %= window; <x><y/></x>.valueOf(\"number\"); (({__iterator__: <><x><y/></x></>}))) return;");
tryItOut("/*infloop*/for(__parent__; <x/>; <x/>) {{} }");
tryItOut("L:if(*::*) { if (false)  { continue ; } } else {let __iterator__ = undefined, __proto__; }");
tryItOut("/*for..in*/for(var 1e4 in ((new Function)(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(__parent__ = ({ prop: __count__, __parent__: __noSuchMethod__ }))))){(<><x><y/></x></>)\tthrow <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var __parent__ in prototype) yield;");
tryItOut("/*infloop*/for([,,]; (function ([y]) { })(); this) {{}constructor = this, constructor = this; }");
tryItOut("if(1e-81) { if (constructor) {(__noSuchMethod__); }} else (1 for (x in []))/*infloop*/M:while(#1=({__count__: (window)()}));");
tryItOut("; const __noSuchMethod__;");
tryItOut("if(new __iterator__ = getter(__proto__ = 0.1,  '' ).__lookupSetter__(\"prototype\")) { if ( /x/ ) {/*for..in*/M:for(const __noSuchMethod__ = __proto__ in #1=[#1#]) {throw __proto__; }(<y><z/></y>); }} else /*for..in*/for(var [__noSuchMethod__, __count__] = (({}).__lookupGetter__) in __noSuchMethod__) return arguments;");
tryItOut("yield *::*.isPrototypeOf(*::*)(({__parent__: 3/0}), #0=[<><x><y/></x></>]);");
tryItOut("/*for..in*/for(const [constructor, __parent__] = -0 in yield;) throw  \"\" \t;");
tryItOut("/*for..in*/for(let [__iterator__, <x><y/></x>] = __count__ in <x/>) {return; }");
tryItOut("/*infloop*/M:do prototype; while(prop);");
tryItOut("L:switch('fafafa'.replace(/a/g, ).prototype) { default: with({}) { this.zzz.zzz; } case 0: break; __proto__;case 2: break; continue M\t; const __iterator__;case ((uneval(__iterator__))): __count__, __count__ = false }");
tryItOut("if(<><x><y/></x></>) const constructor = <><x><y/></x></>;");
tryItOut("/*for..in*/for(const constructor = ((<x><y/></x>)()) in !<x><y/></x>--) {throw undefined;/*infloop*/for(var __parent__; [z1]; @foo) {/a/gi } }");
tryItOut("__count__");
tryItOut("with({prop: (uneval(null))})break L;");
tryItOut("__proto__, constructor = <><x><y/></x></>;");
tryItOut("with({prop: <x><y/></x>['__iterator__'] = (/a/gi).call})gc()");
tryItOut("with({}) { return __proto__: *; } ");
tryItOut("/*infloop*/while( \"\" ['__count__'])throw <x><y/></x>;");
tryItOut("/*infloop*/M:while(this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__))export constructor;");
tryItOut("/*infloop*/L:do {throw  /x/ ;return; } while(this);");
tryItOut("prototype:  /x/g ");
tryItOut("if(window) [1,2,3,4].slice else  if (window) <y><z/></y>;");
tryItOut("L:if((({a1:1}).isPrototypeOf(__parent__))) throw *; else  if ( /* Comment */*::*) {let constructor =  /x/ , __proto__;throw <x><y/></x>; }\n");
tryItOut("with({}) {  } ");
tryItOut("return;\ncontinue \n");
tryItOut("if((({constructor setter: Math.sin, prototype: (*.watch(\"__proto__\", <x/>)) }))) { if ((<><x><y/></x></> if (*))) <x/>; else {return <x/>; }}");
tryItOut("if((let (__noSuchMethod__, constructor = *) function(id) { return id })) { if (#1# <<= ) {yield; }} else {var constructor;break M; }");
tryItOut("let (constructor) { let prototype = <y><z/></y>, constructor; }");
tryItOut("/*for..in*/for(const (<x><y/></x>)(prototype) in ((eval)( /x/ )))constructor;");
tryItOut("return;");
tryItOut("if([<><x><y/></x></>].filter((__noSuchMethod__).watch)) yyy");
tryItOut("do var __proto__; while((*) && 0)");
tryItOut("/*infloop*/for(const /*({ __count__: [[], , __parent__, ] }) = '(({ prototype: __parent__, __iterator__: ({ __count__: __iterator__ }) }) = null); yield this.__defineSetter__(\"constructor\",  /x/ ); (eval(\"var __iterator__, constructor;\", 3))) return;\nFunction\n");
tryItOut("while((--#1#) && 0){__iterator__export *; }");
tryItOut("/*for..in*/for(let prototype in (window > (<x><y/></x>)[window])) {let (__parent__ =  \"\" , prop = <><x><y/></x></>) { @foo; }/*for..in*/for(prop = __iterator__ in <x/>) {(({})); }export prop; }");
tryItOut("switch(*::*) { case 7: /*infloop*/L:while(#2=<x/>.__defineSetter__(\"prop\", gc))export each;break; default: while((*::*) && 0){const __proto__ = <y><z/></y>; }break; export constructor;break; case function(q) { return q; }().__defineGetter__(\"__iterator__\", new Function): /*infloop*/while(export __noSuchMethod__){if(({})) {} else  if (@foo) break ; }break; ;break; case (--this.__defineGetter__(\"constructor\", /a/gi)): break; /*for..in*//* nogeckoex bug 349964 */ for  each(let in 1.2e3) {*::*;\tcontinue L; } }");
tryItOut("{gc()yield __iterator__; }");
tryItOut("L:if(this) {[1,2,3,4].map } else {export __parent__;var constructor; }\n");
tryItOut("switch(({__noSuchMethod__: new function ()*()})) { default: yield;break; case 0: null;break; case .__defineSetter__(\"__parent__\", Math.pow)[[(-1) for each (__proto__ in 0x99)]]: break;  }");
tryItOut("if(([,,][4.]).__parent__) {(@foo.yoyo(<x><y/></x>));/*infloop*/for(@foo; undefined; [1,,]) yield -1; } else {;; }");
tryItOut("L: if(prototype) yield;");
tryItOut("prototype = (<x><y/></x>.(<x><y/></x>))");
tryItOut("{return [z1]; }");
tryItOut("with({}) { yield; } ");
tryItOut("function () { \t } ");
tryItOut("/*infloop*/do {if(<><x><y/></x></>) {throw <><x><y/></x></>; }\r } while(delete void this);");
tryItOut("__parent__ =  /x/ ;");
tryItOut("{throw StopIteration; }");
tryItOut("/*infloop*/M:for(__parent__; (__parent__ = \n*); -0()) (4.);");
tryItOut("export *;");
tryItOut("yield ([, export __iterator__;, , ({ __parent__: __noSuchMethod__, __parent__: __parent__ }), ] = __proto__ = prototype);");
tryItOut("if((Function).call((__proto__.prop setter= function(y) { yield y; {}; yield y; }), -3/0)) { if (new Date((__proto__.__count__), <x/>)) {return  '' \n/*infloop*/for(var __count__; 0x99; __proto__) yield @foo; }} else {return;/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in  /x/ ) {} }");
tryItOut("let(function::delete) ((function(){'haha'.split})());");
tryItOut("return;");
tryItOut("__iterator__ = __count__;");
tryItOut("if( \"\" ) ; else  if (<y><z/></y>) {export *; }");
tryItOut("/*infloop*/for(const prototype; <x><y/></x>; ({})) {yield <><x><y/></x></>; }");
tryItOut("M:if(<><xxx {constructor}={new ( '' )()} /></>) {yield [,,z1]; } else {{}if( \"\" ) { if (__noSuchMethod__) {return;{} } else {yield <x><y/></x>; }} }");
tryItOut("if(<>prototype</>) throw StopIteration; else  if ((* & <x/> >= this.__defineSetter__(\"__iterator__\", eval))) {/*infloop*/do {{} } while(this); } else try { export *; } catch(constructor) { continue ; } finally { yyy } ");
tryItOut("if(<x><y/></x>) \t{ \"\" ; } else  if ( /x/ .__proto__) {export *;<y><z/></y>; }");
tryItOut("return (((constructor = <><x><y/></x></>) @ 'fafafa'.replace(/a/g, [1,2,3,4].map)).watch(\"__parent__\", [1,2,3,4].map));");
tryItOut("{if(let (prototype, __proto__) window) { if (constructor = ({ __iterator__: __noSuchMethod__ })) ; else if( '' ) { if (*::*) const __proto__, __iterator__ = prototype; else {(window);gc() }}yield this;}; }");
tryItOut("with({}) { yield prop.hasOwnProperty(\"constructor\"); } ");
tryItOut("\n /x/ ;\n");
