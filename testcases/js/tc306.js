tryItOut("/*infloop*/for(const __proto__; (<><x><y/></x></>.isPrototypeOf(null).__parent__); #1=({constructor: @foo -= [,]})) /*for..in*/for(let __proto__ = this.@foo in __parent__) gc");
tryItOut("throw StopIteration;");
tryItOut("return <y><z/></y>");
tryItOut("/*for..in*/M:for(let __proto__ in ((this)( '' )))return <x><\ty/></x>;");
tryItOut("{yield  '' ;(({a1:1})); }");
tryItOut("L:if((eval(\"(*);\", <x/>--))) { if (4.) {/*for..in*/for(var prop in (((({}).hasOwnProperty).call)(__noSuchMethod__)))((-1));const __proto__; }} else export constructor;");
tryItOut("do {\n } while(( /x/ ) && 0);");
tryItOut("{export *;var __noSuchMethod__ = prototype; }");
tryItOut("if(<x><y/></x> ? this : <><x><y/></x></>) { if (#1=0x99) {;continue ; } else {continue ;__parent__, __iterator__ = this; }}");
tryItOut("let = __count__;");
tryItOut("with({prototype: ( for each (function::prop in  /x/g ) for each (prototype in .2))})yield;let __parent__ = <x/>;");
tryItOut("\n{}\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [prop, prop] = (__noSuchMethod__-=#1=[#1#]) in  /x/g ) {return __iterator__; const __proto__; }");
tryItOut("/*for..in*/L:for(const __proto__ in window) {yield 0;yield; }");
tryItOut("with({}) { __parent__ = __proto__; } ");
tryItOut("return\nexport __count__;");
tryItOut("M:with(var __noSuchMethod__;)yield;");
tryItOut("M:if([z1]) {continue ; }");
tryItOut("L: {return; }");
tryItOut("while((((p={}, (p.z =  /x/ )()))) && 0)let __parent__;");
tryItOut("/*infloop*/for(let [, , __proto__, ({ __proto__: __count__, constructor: ({ __proto__: __iterator__, var constructor;: __count__ }) }), ({ __proto__: [, __noSuchMethod__, __proto__, ] })] = this.__defineSetter__(\"__proto__\", window);  /x/ ; <> </>) {__proto__, prop =  /x/g ;export __proto__; }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("with({__noSuchMethod__: __noSuchMethod__ = (new Date(this))})yield;");
tryItOut("/*for..in*/M:for(var [constructor, constructor] = ((uneval(<'<x><y/></x></>))).isPrototypeOf(({__parent__: 3.141592653589793, prototype: prop })) in window) break ;");
tryItOut("/*infloop*/for(true; <x/>; <x><y/></x>) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in false :: ({__count__: (({__iterator__: __count__ })) })) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in this) export *;prototype }");
tryItOut("{{} }");
tryItOut("/*infloop*/L:while(eval(\"([1,,].__lookupGetter__(\\\"constructor\\\"))\",  /x/ .unwatch(\"__parent__\")))gc()");
tryItOut("yield;");
tryItOut("while((( '' \n).valueOf(\"number\")) && 0)yield;");
tryItOut("if(<><x><y/></x></>.throw(*)) {function(y) { yield y; return <x><y/></x>;; yield y; } }");
tryItOut("if((window && 5.0000000000000000000000)) {yield;(-3/0); } else  if (*::*) {break ;export __iterator__; }");
tryItOut("if(({ constructor: [({ __proto__: [__noSuchMethod__, , ({ constructor: constructor, __proto__: [, __parent__, , , prop] }), ] }), ({ __iterator__: __proto__, __iterator__: [, , , [, ], ] }), ({ prop: __proto__ }), default: {continue M;with(new (gc)())return 3/0; }break; break; case 0: if( '' ) { if ( /x/ ) get, prototype; else {*::*; }}case 1: break; case [15,16,17,18].map(Math.pow, 0/0): return *;case 1: const __proto__ = <><x><y/></x></>;], constructor: ({ constructor: ({ __noSuchMethod__: [] }), prototype: ({ __noSuchMethod__: ({ __noSuchMethod__\f: ({ __iterator__: __iterator__, __proto__: [] }) }) }) }) }) = @foo.__defineSetter__(\"__count__\", ({}).__lookupGetter__).watch(\"prop\", ;)) /*infloop*/do {yield  /x/ ; } while(<><x><y/></x></>); else  if ((this.propertyIsEnumerable(\"x::__count__\"))) \nyield [z1,,]; else {with(eval(\"prototype\", __iterator__)){(function ([y]) { })(); } }");
tryItOut("/*for..in*/for(var __parent__ in ((new Function)((undefined |  /x/  ^= <x><y/></x>))))arguments");
tryItOut("/*infloop*/M:do {export constructor;let (__parent__, prototype = this) { this; } } while(__iterator__ = (<y><z/></y> << [z1,,]));");
tryItOut("((*)(<x/>));{}\nreturn null;");
tryItOut("{switch(({ get constructor constructor (prop, __noSuchMethod__) { return -1 }  })) { default: case 6: break; case 8: return 0x99;break; ;case 7: gc()case 5: break; @foo; } }");
tryItOut("if(__proto__.__defineGetter__(\"__iterator__\", function  __proto__ (__iterator__, __proto__)(__proto__.__iterator__) = __proto__ = @foo.__iterator__)) { if ((<x><y/></x>)[-1] >= (<x/> >>= undefined)(yield *.__parent__)) var __noSuchMethod__ = window, @foo; else {yield  \"\" ; }}");
tryItOut("{return;yield ({}); }");
tryItOut("if(([1,2,3,4].map).call(<><x><y/></x></> * <x><y/></x>, (constructor = prototype), 0.1) == @foo) {switch((__parent__.__parent__ = @foo in __count__)) { default: export __count__;case *::* ? 0/0 :  \"\" : (this);break;  } } else {window;break L; }");
tryItOut("if(__proto__.(#2=(__noSuchMethod__ = [z1]))) {'haha'.split } else  if (<y><z/></y>) {return this; } else with(<x><y/></x>[033]){gc() }");
tryItOut("{prop;throw 1e81; }");
tryItOut("yield prop;");
tryItOut("L:while((( \"\"  |= <x><y/></x>)) && 0){if((-1)) {[[1]]return; } }");
tryItOut("/*infloop*/for([,] , this; prop.prop setter= yield __iterator__ = 3.141592653589793; (({ __proto__: constructor, function::__iterator__: prototype }) = this.zzz.zzz)) throw true\n '' ;");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = (({__proto__:  ''  })) in prop) {{}(window); }");
tryItOut("return (this.__defineGetter__(\"prop\", gc));");
tryItOut("/*infloop*/while(\tprop = function(id) { return id }){__parent__ = *; }");
tryItOut("for(let y in []);");
tryItOut("var function::__count__;");
tryItOut("if(* && __iterator__) if(*::*) yield <><x><y/></x></>; else  if (undefined) ; else  else  if ((prop.constructor = <><x><y/></x></>)) {var constructor;let __count__ = <><x><y/></x></>; }const __parent__, __parent__;");
tryItOut("//h\nif(window) return; else  if (3/0) gc()");
tryItOut("gc()");
tryItOut("L:if(<x/>) { if ((this / arguments)) {yield; } else {return;\t }}");
tryItOut("/*for..in*/L:for(let __parent__ = (Object(this % 5.0000000000000000000000.__lookupSetter__(\"__proto__\"), __iterator__.eval(this.__defineSetter__(\"__parent__\", 'haha'.split)))[(window .@*:: <x><y/></x>).@*.valueOf(\"number\")]) in ([15,16,17,18].map((new Function(\"/*for..in*/L:for(var [prototype, __count__] = false in [1]) \\freturn 1e81;\")), (({__count__: 0x99 }))))) {{}(__noSuchMethod__.__parent__ = [z1,,].isPrototypeOf(*)); }");
tryItOut("return");
tryItOut("let(constructor) ((function(){gc()})());");
tryItOut("L:if(constructor) { if ((p={}, (p.z = 3)()).__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))) {function (prop) { yield <x><y/></x> } export *; }} else prop = 1e81;");
tryItOut("if(false) {throw  /x/g ; } else {{} }");
tryItOut("/*for..in*/L:for(let J in ((Math.sin)(((this += function(id) { return id })[((<x><y/></x>)[window])]))))do  while((function::prop) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let (yield  '' )['__count__'] in (#3={a:#3#}.valueOf(\"number\"))) {let prototype = __count__, prop = <y><z/></y>; }");
tryItOut("/*infloop*/while( '' ){throw constructor; }");
tryItOut("if((__proto__.__parent__ =  /* Comment */<><x><y/></x></>) >>>=__iterator__) L: export __parent__; else if(__proto__ = <y><z/></y>) yield <x><y/></x>; else {return;export __count__; }");
tryItOut("L: {/*infloop*/do {{} } while((* ^= <x><y/></x>)); }");
tryItOut("throw StopIteration;");
tryItOut("L: {continue L; }");
tryItOut("with(this.zzz.zzz)let (constructor = @foo >= #1#, __noSuchMethod__) { throw false; }");
tryItOut("/*infloop*/do <x><y/></x>; while();");
tryItOut("let __count__ = *;\nreturn;\n");
tryItOut("~((yield <><x><y/></x></>)) + (<y><z/></y> .@ ({a1:1}).valueOf(\"number\")) = constructor;");
tryItOut("with({}) let(__noSuchMethod__ = new Function( /x/g ), __count__) { let(__parent__ = [1], __parent__ = @foo) { {}");
tryItOut("/*for..in*/for(var [__count__, __iterator__] = 033\n in __noSuchMethod__) gc()");
tryItOut("do {__proto__yield; } while((<x><y/></x>) && 0);");
tryItOut("L:if((window-- ^= ({a2:z2}).*)[null & 3]) {/*infloop*/do with(<><x><y/></x></>)__proto__; while(<><{__noSuchMethod__}>yyy</{__noSuchMethod__}></>); }");
tryItOut("/*infloop*/for(let [, [({ __parent__: ({ prototype: [__parent__, __noSuchMethod__, x::__proto__] }), constructor: ({ prototype: ({ __noSuchMethod__: prototype }) }) }), ]] = ([var __proto__ if (window)] :: ({a1:1})\n).call(#0=[__count__], ); [<x/>.propertyIsEnumerable(\"__iterator__\")].filter(function  x::__count__ (__parent__, __noSuchMethod__) { yield (null.yoyo([1,,])) } ).window; (<y><z/></y> %= <x/>.unwatch(\"prototype\"))++) let (({ prototype: ({ __parent__: ({ prototype: __iterator__ }) }), __count__: [, , ({ __proto__: __count__, __noSuchMethod__: prop }), prop] }) = (-1)) { ; }");
tryItOut("with((({}) *= <><x><y/></x></> .@*:: (this.__defineSetter__(\"prop\", function  __count__ (prototype) { yield try { with({}) { gc() }  } catch(function::__iterator__ if (function(){try { const __iterator__ = *; } catch(prototype if (function(){gc()})()) { ; } finally { gc() } })()) { throw StopIteration; } finally { throw __proto__; }  } )))){return;let prototype, prop; }");
tryItOut("L:do /*for..in*/for(const (__count__) in ((/a/gi)((new Function)()))){ } while(((this.zzz.zzz)) && 0);");
tryItOut("L:if(__noSuchMethod__ = true) __count__;");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/M:for(x::prototype = ({prop: (<y><z/></y>.__count__), function::__iterator__: <{__proto__}>eval(\"<x/>\", window)false </{__proto__}> }) in __proto__.__noSuchMethod__ = *.__count__) {/*for..in*/for(var [constructor, __count__] = <><x><y/></x></> in <x><y/></x>) {continue M; } }");
tryItOut("with(({constructor setter: (function (__proto__, constructor) { yield prototype } ).call }))__proto__\nL:do {let prop, __parent__ = window;gc() } while(((window++)) && 0);");
tryItOut("if(window) { if ( /x/g ) {return <x><y/></x>;return *::*; } else { }}");
tryItOut("if([z1,,] << [,,z1]) { if (0/0) if((prop.each)) { }} else {/*for..in*/for(var prototype = <x/> in window) {const prop;export *; }{} }");
tryItOut("M:with(((null for (__iterator__ in <><x><y/></x></>))));");
tryItOut("{/*infloop*/L:for(__iterator__; this; this) var function::constructor = constructor; }");
tryItOut("with(eval(\"__proto__\", *::*))export prop;");
tryItOut("L:if(false[<><x><y/></x></>]) prop = __proto__, __parent__ = ({a1:1}); else  if ([<><x><y/></x></>-- for each (constructor in @foo) for each (__count__ in undefined) if (<x><y/></x>)]) __parent__['function::__proto__']");
tryItOut("while((-0) && 0){return <><x><y/></x></>; }/*infloop*/for(new ( for (prop in 1.3) for each (__noSuchMethod__ in <x/>) for each (prototype in  \"\" ))(<><x><y\t/></x></>); __count__; __proto__) {yield [z1,,]; }");
tryItOut("with({prop: *::*}){export prototype; }");
tryItOut("if(yield <x><y/></x>) {let prop; }\n");
tryItOut("([15,16,17,18].map([1,2,3,4].map, false)), falsedo  while((eval(\"return;\",  /x/g )) && 0);");
tryItOut("if(prototype) if(__proto__ = <y><z/></y>) yield 0.1; else let prop = [1]; else {if((null.valueOf(\"number\"))) (<x><y/></x>); else function (constructor) { gc() }  }");
tryItOut("L: let __noSuchMethod__, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("for(let y in []);");
tryItOut("let (__parent__, __count__) { /*for..in*/for(var __proto__ = this.__lookupGetter__(\"__noSuchMethod__\") in true) yield *; }");
tryItOut("{{constructor = function(id) { return id }, __parent__ =  \"\" ; } }");
tryItOut("M:if((1.2e3.throw(1e81)).__lookupSetter__(\"__proto__\")) {for(let y in [5,6,7,8]) ; } else  if (<><y><z/></y> = *</>) return\n");
tryItOut("do throw undefined; while(((new (<><x><y/></x></>)(__count__).watch(\"prototype\", ({}).__lookupGetter__))) && 0);");
tryItOut("do export function::__noSuchMethod__; while((__iterator__ = window) && 0);");
tryItOut("/*infloop*/while(__proto__ % export __parent__ > (__count__.__iterator__ setter= [1,2,3,4].map)){{return;(<><x><y/></x></>); } }");
tryItOut("do  while((this.__defineGetter__(\"constructor\", function  __proto__ (__proto__) { yield <x><y/></x> } )) && 0);");
tryItOut("if(([15,16,17,18].some((1 for (x in [])), __parent__))) {this\n } else  if ('fafafa'.replace(/a/g, function  __count__ () { 'haha'.split } )) {;gc() } else const __count__ = [,,z1];, prop = __count__");
tryItOut("if([[1]]) {yield; }");
tryItOut("/*infloop*/do return\n while(this);");
tryItOut("if( /* Comment */<x><y/></x>) { if (\f__proto__ = (({__count__: <x><y/></x> })))  else /*infloop*/while(window){export constructor; }}");
tryItOut("export *;\nyield;\n");
tryItOut("with({__iterator__: (false)(<x><y/></x>.throw(function ([y]) { }))})if(eval(\" /x/g .__noSuchMethod__\",  && __count__)) gc() else yield;");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("return  \"\" ");
tryItOut("/*infloop*/while(((-1) | null = Date(-1,  /x/ ))){var prototype; }");
tryItOut("if([this.__defineGetter__(\"constructor\", constructor) for each (prototype in [[1]])])  else  if (__parent__ = 3.141592653589793 >>>=(@foo | 3.141592653589793)) <x><y/></x>; else {{} }");
tryItOut("let constructor = [1,,], __noSuchMethod__;");
tryItOut("/*infloop*/for(__count__; new (<x/>.propertyIsEnumerable(\"__count__\"))(); (undefined.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }))) /*for..in*/L:for(__noSuchMethod__ in (((function  prototype (prototype, __iterator__)eval(\"<y><z/></y>\", ({a1:1}))).call)(((<><x><y/></x></> :: null)(\f))))){export *; }");
tryItOut("if(*::*) {prototype.__iterator__ } else (<x><y/></x>).watch");
tryItOut("if(__noSuchMethod__) export *; else  if (<y><z/></y>) {}");
tryItOut("/*for..in*/<><x><y/></x></>");
tryItOut("new Functionexport __iterator__;");
tryItOut("do {gc()*; } while((({__noSuchMethod__ setter: 'haha'.split }).__proto__) && 0); const __iterator__;");
tryItOut("let prototype = (new ( /x/g )(__noSuchMethod__.__noSuchMethod__ = __noSuchMethod__-=window));");
tryItOut("throw __iterator__;");
tryItOut("throw __parent__;");
tryItOut("if( /x/ ) {false } else  if (eval(\"/*infloop*/M:for(var __count__ = *; 3/0; __iterator__) <x><y/></x>;\", @foo())) L: {return;gc() } else {constructor = __noSuchMethod__, prop;export *; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while(__parent__.prototype getter= ({}).hasOwnProperty)return <><x><y/></x></>\n(1 for (x in []))");
tryItOut("/*\n*/if() L:if(*.constructor =  /x/g ) { if (prototype) function  constructor () { \fyield this }  else {return; }}");
tryItOut("L:do {false;function(y) { yield y; prop;; yield y; } } while(((this.__defineGetter__(\"__parent__\", new Function)).@*) && 0);");
tryItOut("\n");
tryItOut("yield *::*.unwatch(\"prototype\");");
tryItOut("__proto__ = __parent__;");
tryItOut("if(new Iterator()) with({__proto__: this[<y><z/></y>]});");
tryItOut("throw <x/> .@ true;return this;");
tryItOut("{const __noSuchMethod__; }");
tryItOut("if(this.__defineSetter__(\"prototype\", (1 for (x in [])))) {throw  \"\" ; } else let __count__;");
tryItOut("\fif(\fthrow  <<= this - *::*.@*) { if (<><x><y/><\t/x></> :: ({})) {/*infloop*/for(var __proto__ = <x><y/></x>.(null); .2.@foo; 3) __parent__; } else }");
tryItOut("L: {__noSuchMethod__, prototype = <x><y/></x>;export __noSuchMethod__; }");
tryItOut("if(([new Number()])) /*for..in*/for(const [__proto__, __iterator__] = (<><x><y/></x></>) in window) {; } else  if (<><xxx {__count__}={(uneval(\n<x/>))} /></>.hasOwnProperty(\"prop\")) {__count__ = window; } else {({}).unwatch(\"prototype\"); }");
tryItOut("/*infloop*/for(3/0 ? <x><y/></x> : window; (new (__count__.@*)(#2=[[[1]]], false)); [, , __parent__] = (__parent__[*::*])) break ;");
tryItOut("{let (__proto__) { const __count__ = <x><y/></x>; }\n/*for..in*/for(//h\nconst prototype.__parent__ in @foo) Math.sin }");
tryItOut("return  /x/ ;");
tryItOut("if(*::*) {__iterator__ =  \"\" , __iterator__;var __noSuchMethod__ = true; } else  if (<><x><y/></x></>) {(__count__);yield <><x><y/></x></>; }");
tryItOut("prototype = constructor;");
tryItOut("/*for..in*/for(let ((uneval( /x/g )))('fafafa'.replace(/a/g, (1 for (x in [])))) in ((/a/gi)(RangeError(window)))){/*infloop*/for(var __noSuchMethod__; ([(<x><y/></x>.(1.3))]); new null *= \n*::*) ; }");
tryItOut("export *;");
tryItOut("if(<y><z/></y>) export *;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var constructor = [,,z1] in #1#) (<x/> -= prototype = <><x><y/></x></>.constructor)");
tryItOut("/*for..in*/M:for(__count__ in (( '' )(<><x><y/></x></>))){throw ; }");
tryItOut("with({}) { prop = prop; } ");
tryItOut("__proto__\n");
tryItOut("let(__noSuchMethod__ = [, prop, __parent__, , __parent__] = new Exception(<>//h\n<x><y/></x></>, <x><y/></x>), __noSuchMethod__ = (<><x><y/></x></>).watch) { throw StopIteration;");
tryItOut("if(__count__ = <x><y/></x>) __count__, prop = <><x><y/></x></>; else {[[]];yield; }");
tryItOut("/*infloop*/for(({ __count__: __parent__ }) =  \"\" ; <x/>; (uneval( \"\" ))--) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in  '' ) (<y><z/></y>);/*infloop*/while(case delete 1e4: break; ){let constructor\nbreak M;@foo; } }");
tryItOut("/*infloop*/for(const __proto__ = <x><y/></x>.watch(\"__parent__\",  /x/g ).@*; (prototype.__proto__ = <><x><y/></x></>); ([11,12,13,14].sort)) {yield 1.3; }");
tryItOut("__noSuchMethod__((#2=[])) = constructor;");
tryItOut("continue M\nconst __parent__, constructor;");
tryItOut("[1,2,3,4].map");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const [({ constructor: prop, prototype: __parent__ }), , , ] in eval(\"return 3/0;\",  /x/g .throw(<x/>))) {L:with((#1# % [[]]))( /x/g );__parent__ = prop, __parent__ = 1e81; }");
tryItOut("if(<><bbb xmlns=\"<x/>\"><ccc:ddd></ccc:ddd></bbb></>) (<x><y/></x>); else  if (__noSuchMethod__ = [1]) continue ; else __proto__;");
tryItOut("*::*;\ngc()\n");
tryItOut("let(__noSuchMethod__, __proto__ = <y><z/></y>) ((function(){__noSuchMethod__})());");
tryItOut("return;");
tryItOut("with({}) let(__count__, __iterator__ = constructor = __proto__) { return __iterator__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <x/> in (function ([y]) { })()) return;");
tryItOut("/*infloop*/for(prototype; new ((<><x><y/></x></>).watch)(*, this).* / window; __proto__.__parent__ !== (typeof (uneval(<x/>))) ? new (eval)() = __noSuchMethod__['__count__'] = __proto__ = __parent__ : new Iterator()) with({__count__: prop = <x><y/></x>})var prop = <x><y/></x>, prototype;");
tryItOut("constructor = __iterator__;");
tryItOut("with({eval(\"__proto__ = [,]\", [[1]]): (\n<><x><y/></x></> ? 0.1 : undefined.isPrototypeOf( '' ))}){(<y><z/></y>);if(<x><y/></x>) yield; else  if (<x><y/></x>) let prop = __parent__; else __iterator__, prototype = function(id) { return id }; }");
tryItOut("{continue M; }");
tryItOut("L: export *;with(*::*)");
tryItOut("let(__noSuchMethod__ = undefined.__lookupSetter__(\"__proto__\").eval((yield <><x><y/></x></>)\n), prototype = constructor) { yield ['fafafa'.replace(/a/g, gc) for each (constructor in -3/0) for (prop in  /x/ )];");
tryItOut("gc()\n");
tryItOut("if(null) {{} } else yield;");
tryItOut("let (constructor) { prototype = ({}), prototype = <x><y/></x>; }");
tryItOut("switch((new this(<x/>, <x><y/></x>))) { case 8: break;  }\nif([undefined for (__proto__ in null)]) {;{} }");
tryItOut("for(let y in [5,6,7,8]) return let prototype = <><x><y/></x></>, constructor.x::__parent__;");
tryItOut("with({}) return;");
tryItOut("if((__count__.__count__ = this ? <x><y/></x> : <><x><y/></x></>).call((/*\n*/let (__count__ = <x><y/></x>) __iterator__) ^= 1e4 >>> 3/0\f((window for (__proto__ in undefined).__proto__), __noSuchMethod__.(true)), (this.__defineSetter__(\"prop\", <x><y/></x>)).prototype, (<x><y/></x> <= <><x><y/></x></>))) {(undefined).__defineSetter__<><x><y/></x></> } else  if ([[]]) let __iterator__ = [], ({a1:1});\f else {export prop;*; }");
tryItOut("if(prototype = <><x><y/></x></>) { if (new <x/>()) L:if(0x99.throw(@foo)) yield; else yield; else {export __parent__; }}");
tryItOut("do export *; while((@foo) && 0); const prop;");
tryItOut("/*for..in*/L:for(let __parent__ in  /x/ ) yield;");
tryItOut("M:if(1.3) {gc() } else  if (true) { }\n");
tryItOut("L:while(((yield Function())) && 0){let constructor = *;return ({}); }");
tryItOut("L:if((1 for (x in []))) [1,,]; else  if (undefined :: [,,z1]) <y><z/></y>;with(new Exception(@foo)){{}return <x><y/></x>; }");
tryItOut("switch(<y><z/></y>) { default: {}case 2: export __proto__;break; case *: prototype = prototypebreak; case __iterator__: break; case 4: case __iterator__: case 9: case <y><z/></y>: {}case 7: case <><x><y/></x></>: function  prototype (__count__, __proto__) { (*); } break; case 8: {}break; case ({a2:z2}): export __iterator__;break; throw <><x><y/></x></>;{}break; case <><x><y/></x></>: yield;break; case  '' : {}break; case *::*: var __count__;yield;break; case 6: break; break L;break; case 0: (true);case 8: throw ({a1:1});break;  }");
tryItOut("with({prototype: eval(\"export *;\", (Iterator()))}){/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in 1e81) return __iterator__, prototype; }\t");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in  \"\" ) let (__proto__ = (new (<x/>)( /x/ )), __iterator__) { throw <y><z/></y>; }");
tryItOut("/*for..in*/for(const __proto__ = ({a2:z2}) in <><x><y/></x></>) yield <y><z/></y>;");
tryItOut("do {return *::*;continue ; } while(((window.__lookupSetter__(\"let\"))--) && 0);");
tryItOut("if([ /x/ ].sort(Function)) {return; } else  if ((@foo)(undefined, __count__)) throw [,];");
tryItOut("this.zzz.zzz;");
tryItOut("{yield <bbb xmlns:ccc=\"__parent__\"><ccc:eee></ccc:eee></bbb>.valueOf(\"number\"); }");
tryItOut("window\n");
tryItOut("if((1 for (x in []))(1e4, <x><y/></x>)) __noSuchMethod__ = Function, __proto__: 1e81; else  if ((uneval(*))) {let __proto__; } else {let const __proto__ = 3, constructor;; }");
tryItOut("L: { /x/ return undefined; }");
tryItOut("/*infloop*/L:while((({}).hasOwnProperty).call([0.1].sort(/a/gi), (window).watch)){throw __count__\nexport prototype; }");
tryItOut("/*for..in*/M:for(const [prop, __iterator__] = ((__noSuchMethod__ = *)\n) in __proto__) {}");
tryItOut("switch(window) { case 0: break;  }");
tryItOut("__count__ = __parent__;");
tryItOut("if( '' .__lookupSetter__(\"__count__\")) /*infloop*/for(__iterator__; this; (__iterator__.__count__)) {export *; }");
tryItOut("if((yield  /x/g  != (typeof *)[prop.(arguments)])) {(new (({}).__lookupGetter__)().__defineGetter__(\"__count__\", this)); } else yield;");
