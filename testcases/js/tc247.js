tryItOut("/*for..in*/for(const [constructor, <!--yy-->] =  ''  in 1e-81) {*::*; }");
tryItOut("break L\n");
tryItOut("export *\n");
tryItOut("/*infloop*/while((<x><y/></x>.(prop) ? (this.__defineGetter__(\"constructor\", gc)) : (1e4)[<x/>])){/*for..in*/for(let [__iterator__, __proto__] = window in undefined) {return;{} } }");
tryItOut("with((<><x><y/></x></> :: null)[* @ 0x99]){(@foo);; }");
tryItOut("yield undefined\n");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((eval)(<x><y/></x>)))return -0;");
tryItOut("let (do yield; while(((__iterator__) >>>  = null) && 0); = __proto__ = yield <x/>--) { { } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in ([(__noSuchMethod__ = prop)].some('haha'.split) for (prototype in *::*) if ([[1]])(/)) while(((function ([y]) { })()) && 0)export constructor;");
tryItOut("with(((@foo).watch).call(*::*, this)){continue L;return; }");
tryItOut("L:do if(((__iterator__ = __proto__))[<y><z/></y>]) {<><x><y/></x></>; } else  if ([[]].__defineGetter__(\"__proto__\", (Function).call)) L: {this;case arguments: case <><x><y/></x></>: break; case 3: let __parent__, __parent__; } while(((#2=[(((@foo).__defineSetter__).call(<><x><y/></x></>,  { return ({}) } ))()\n])) && 0);");
tryItOut("/*infloop*/for(var __noSuchMethod__; <x><y/></x>; null) {yield; }");
tryItOut("with({__proto__: undefined}){(setter); }");
tryItOut("throw  '' \n/*infloop*/while((constructor = __iterator__.hasOwnProperty(\"__proto__\"))){export __count__;prop; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = this.__defineSetter__(\"prop\",  /x/g ) in __proto__ = this) {return;const prototype, __iterator__ = undefined; }");
tryItOut("/*for..in*/for(let [__proto__, function::prototype\f] = __iterator__ .. [1,,] in .2) {4.; }");
tryItOut("with({[constructor, , ({ constructor: constructor, __proto__: __parent__ }), ({ constructor: prototype }), ]: (({__iterator__:  /x/  }))})gc()");
tryItOut("{1e4;yield; }");
tryItOut("with(false.yoyo(1e+81))(null);");
tryItOut("M:if(function (__iterator__, __iterator__) { return arguments } ) with({__iterator__: [z1]}){} else  if (this.__defineGetter__(\"__count__\", (new Function(\"do gc() while(([z1,,]) && 0);\")))) {/*for..in*/for(const __count__ in this) export constructor; }");
tryItOut("L: /*for..in*/M:for(__proto__ = let ([, ({ __proto__: __count__ }), ({ constructor: constructor, prototype: constructor })], function::prototype =  /x/ ) (<x><y/></x>.(true)) in case yield <x><y/></x>: case 8: ([,]);) export *;");
tryItOut("true;");
tryItOut("return;");
tryItOut("/*infloop*/for(let prototype; ([15,16,17,18].map(function (__iterator__, __iterator__)null, 1e+81)); 5.0000000000000000000000) let(__count__) { ( /x/g );");
tryItOut("const __count__ = null;");
tryItOut("try { return 0.1; } catch(__parent__) { throw @foo; } finally { gc() } ");
tryItOut("(__count__);\n;\n");
tryItOut("/*for..in*/for(var __count__ in 1e81) {return <><x><y/></x></>; }");
tryItOut("");
tryItOut("export *;");
tryItOut("/*infloop*/while(<x/>){export prop; }");
tryItOut("let(__noSuchMethod__, prototype = (__count__+=window)) ((function(){({ constructor: __proto__, __noSuchMethod__: __noSuchMethod__ }) = prop;})());");
tryItOut("L:if(({a1:1})) { if (*) } else (*::*);");
tryItOut("for(let y in []);");
tryItOut("switch(constructor setter: (function ()) { continue ; } ) { default: yield [,,z1];<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>break; case 9: let (prop) { ; }break; case 4:  }");
tryItOut("this.zzz.zzz;");
tryItOut("((prop%=window));");
tryItOut("function(q) { return q; }\n{}\n/*for..in*/for([z1].prototype in ((function(q) { return q; })((gc).call(constructor, <x/*\n*/><y/></x>, *::*)))){__proto__;export *; }");
tryItOut("{export *;constructor = <x><y/></x>, __parent__; const __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x><y/></x>['__noSuchMethod__'] = 1.2e3 += <x/>['__count__'] in ({__proto__: __count__ in .2}) <= [z1] ? 3 : false.__defineGetter__(\"__parent__\", *::*).__lookupSetter__(\"__iterator__\")) {while((new function(q) { return q; }()) && 0)*::*; }");
tryItOut("return\n");
tryItOut("try { prototype = __iterator__; } finally { with({}) { ; }  } ");
tryItOut("if([15,16,17,18].some(({}).hasOwnProperty, [,,z1])) return;");
tryItOut("let __parent__, constructor = *;\nlet prop, set;\n");
tryItOut("try { let(__noSuchMethod__ = null, __noSuchMethod__) ((function(){let prototype, __proto__ = false;})()); } catch(function::__iterator__) { <x><y/></x>; } ");
tryItOut("continue M; const __parent__;");
tryItOut("/*for..in*/for(__iterator__ =  /x/g  in \n<><x><y/></x></>) throw (-0); const prototype;");
tryItOut("M:if([z1].valueOf(\"number\")) break M;");
tryItOut("/*for..in*/L:for(const [__iterator__, __iterator__] = this[<><x></*y/></x></>.__noSuchMethod__] in --<><x><y/></x></>) export constructor;");
tryItOut("{ }");
tryItOut("if((-0)) { if (@foo) export *;} else {return;var __iterator__; }\nL: return;\n");
tryItOut("throw [,,z1];(@foo);");
tryItOut("function  __noSuchMethod__ ([[], , [], __parent__.prop, ])null < -0\n");
tryItOut("if(((p={}, (p.z = __proto__ getter: __noSuchMethod__ = .2 = <y><z/></y>)()))) {/*for..in*/for(const __iterator__ in ((eval)(window))){yield <x/>;gc() } } else  if (__iterator__.__iterator__) {continue M;{} } else ");
tryItOut("/*for..in*/for(var *['__noSuchMethod__'] in window) {{}continue ; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((new Function)(yyy))){return; }");
tryItOut("if((uneval((new Function(<><x><y/></x></>, <x/>))))) { if (<><x><y/></x></>.__lookupGetter__(\"false\")) } else {var __parent__; }");
tryItOut("{if(<x/>) export __count__; else {*::*; } }");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("return <y><z/></y>;\ngc()\n");
tryItOut("if(@foo.__noSuchMethod__ = eval(\"<><x><y/></x></>\", __parent__)) { if ((window)()) {5.0000000000000000000000;\nvar prop;\n<x><y/></x>; }} else {export __iterator__; }");
tryItOut("L:if((<x/>).call(<><x><y/></x></>, )) { if ((undefined.@foo)) function::prop else }");
tryItOut("/*for..in*/for(const prototype = undefined in prop) {const prototype = this; }");
tryItOut("with((@foo.hasOwnProperty(\"__proto__\"))\n)throw <x><y/></x>;/*\n*/");
tryItOut("/*infloop*/for(yield (function ([y]) { })(); new ({})(*::*); (<x><y/></x> < {})) {yield;return #1#; }");
tryItOut("/*infloop*/for(var prop; ((__noSuchMethod__)( \"\" )); prop =  \"\" ) continue M;");
tryItOut("let constructor = this.__defineGetter__(\"__noSuchMethod__\", /a/gi), __iterator__ = (__noSuchMethod__);");
tryItOut("continue ; const __parent__;");
tryItOut("L:if(prop = <y><z/></y>) { if (<x><y/></x>.__count__) {const prototype, constructor = false; }} else const __proto__;");
tryItOut("if(#0=[#1=[#1#]]) const prototype = 0x99; else export __parent__;");
tryItOut("(false(*, prototype).throw\t(<{__iterator__}></{__iterator__}> ? [#3={a:#3#}].some(new Function) : (window * <x><y/></x>)++)) = constructor;/*for..in*/L:for(let <><><ccc:ddd><ccc:ddd><x><y/></x><!--yy--></ccc:ddd></ccc:ddd></>.((yield <x><y/></x>))</> = ({ get prototype prototype (__iterator__, __parent__)new (<><x><y/></x></>)(null) }) in +(yield *::*)) export *;");
tryItOut(";");
tryItOut("/*for..in*/for(let constructor = (__count__ && ({__count__: <x/> })) in default: gc()break; case this: break; var __parent__;break; case <x><y/></x>: break; case 7: case 1: break; case 4: case 1e+81: case *: return 4.;break; yield;case 6: case 4: break; case 9: (*::*).watch.throw(null).yoyo([[1]] & function ([y]) { })) /*infloop*/for(({ __iterator__: [__noSuchMethod__, , constructor], prop: __proto__ }) = (); <x><y/></x>.(*::*); ([15,16,17,18].sort(Function, <x/>))) {; }");
tryItOut("L: /*for..in*/for(prototype in ((gc)(undefined)))gc()");
tryItOut("/*infloop*/L:for(const __noSuchMethod__ = false; <x><y/></x><!--yy-->; false) {function(q) { return q; } }");
tryItOut("/*for..in*/for(var __parent__ in (__parent__ =  /x/g )) yield <x><y/></x>;");
tryItOut("/*infloop*/do {/*for..in*/for(let __parent__ in #3={a:#3#}) {*; } } while(eval(\"false\", null));");
tryItOut("/*infloop*/while(eval(\"3\", __proto__)){var __proto__;yield; }");
tryItOut("if(Number()) { if (null) {M\t:if(1e+81) {} else  if (1.3) {}try { gc() } catch(prototype) { return; }  } else {/*infloop*/L:for((constructor = <>yyy</>); [@foo for each (__iterator__ in null)]; prop = __proto__.__lookupGetter__(\"__noSuchMethod__\")) {yield (-0); }let __noSuchMethod__ = (this.yoyo(<><x><y/></x></>)); }}");
tryItOut("/*infloop*/for(var __noSuchMethod__; <x><y/></x>--; (__count__.__proto__)) /*for..in*/M:for(let prop = ([{}].some(<x/>)) in  \"\" ) yield this;");
tryItOut("return ;");
tryItOut("/*for..in*/for(var __noSuchMethod__.prototype in ((/a/gi)(__parent__ = (let (constructor) __proto__))))const __parent__;");
tryItOut("M:with(<y><z/></y>)\n");
tryItOut("M:if((<><x><y/></x></>.isPrototypeOf(prototype))) {gc()throw this; }");
tryItOut("__iterator__");
tryItOut("if(--return <x><y/></x>;)  else  if (prototype.prop) __parent__ else {;(this).__defineSetter__ }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:do with({__iterator__: __parent__ =  '' }){var __noSuchMethod__ = __count__;export constructor; } while((yield (+true)));");
tryItOut("let (__count__, prototype = 1e-81) { return *; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/for( \"\" ; <x/>; @foo) {<><x><y/></x></>(<y><z/></y>); }\n");
tryItOut("M:do if(({ __noSuchMethod__: __noSuchMethod__ }) = prototype) { if ((__count__.prototype.unwatch(\"__parent__\"))) {var prop; } else {;gc() }} while((__proto__ = (constructor.__noSuchMethod__ = [15,16,17,18].sort((<x><y/></x>).watch, window))) && 0);");
tryItOut("with((new (<y><z/></y>)())){return;try { gc() } finally { yield window; }  }");
tryItOut("L: yield <x><y/></x>;");
tryItOut("/*infloop*/while(<bbb xmlns=\"__iterator__%=#3={a:#3#}.eval(arguments)\">yyy</bbb>\f)if( /x/ ) {break ;<x><y/></x>; } else export __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let function::__parent__.prototype in window for (__parent__ in null)) /*infloop*/for([15,16,17,18].some(eval, <><x><y/></x></>);  /x/ .@foo; <y><z/></y>) {{prototype = <><x><y/></x></>, __iterator__; } }");
tryItOut("with({}) { throw __count__; } ");
tryItOut("const constructor, __parent__;");
tryItOut("yield;");
tryItOut("/*for..in*/for(prop = try { yield (new (((<x><y/></x>).__defineSetter__).call(new ((1 for (x in [])))(<x><y/></x>), ((#3={a:#3#})()), <x><y/></x>)) %= (-0) - false(({prototype: (__proto__ = <y><z/></y>) }).*)); } finally { with({}) { throw prop; }  }  in (<><x><y/></x></>/*\n*/)(<><x><y/></x></>).eval(delete [])) L:if(<><x><y/></x></>) break ; else  if (undefined) gc()");
tryItOut("/*for..in*/for(const __parent__ = true in ((yield <x/>))) __iterator__ = ((<><x><y/></x></>.__proto__).hasOwnProperty(\"__parent__\"))");
tryItOut("if(false) {; } else  if (3.141592653589793)  else {var __proto__, __parent__ = this; }");
tryItOut("try { throw StopIteration; } catch(__count__) { try { var prop, prop; } catch(__parent__) { return <>\t<x {export __iterator__;{} }<y/>< try { with({}) { gc() }  } catch(__noSuchMethod__) { let(function::__parent__ =  '' ) { gc() } finally { throw __iterator__; }  /x</>; }  } finally { return Boolean((), <><x><y/></x></>.isPrototypeOf(undefined)); } ");
tryItOut("{{} }");
tryItOut("/*for..in*/for(let [__iterator__, prop] = @foo || <><x><y/></x></>.__defineGetter__(\"prototype\", (<x><y/></x>).__defineSetter__)(__iterator__) in (({__parent__: new (new Function)(prop, 033), __proto__: true ? *::* : <><x><y/></x></> }))) {switch(this) { case 0: yield;break;  } }");
tryItOut("prototype = __proto__;");
tryItOut("/*infloop*/L:for(const constructor;  '' ; window) {(<y><z/></y>)\r;(<><x><y/></x></>); }");
tryItOut("if(<y><z/></y>.__lookupGetter__(\"prop\")) const __count__, __parent__; else {return <><x><y/></x></>;return; }");
tryItOut("const __parent__ = false, prop");
tryItOut("throw [, , ({ function::constructor: [, ({ __count__: ({ constructor: prop }) }), [({ prototype: function::__proto__ }), , ({ __proto__: __parent__, __noSuchMethod__: __noSuchMethod__ })], set], __parent__: ({ __noSuchMethod__: [, [, __count__, __parent__, ], ] }) }), [], ];");
tryItOut("return\n");
tryItOut("M:with({constructor: (<x/>)(this,  /x/ )})yield (let (__noSuchMethod__ = <x><y/></x>) <x><y/></x>);");
tryItOut("");
tryItOut("/*for..in*/M:for(var this.zzz.zzz['__noSuchMethod__'] in (__count__ = *)) this.zzz.zzz;");
tryItOut("switch(0.1.prototype = <x><y/></x>) { case 7: break;  }");
tryItOut("continue ;;");
tryItOut("/*for..in*/for([__parent__, constructor] = *::* in undefined) {;1e81; }");
tryItOut("/*for..in*/for(\rconst __count__ = this > prop in <x/>) break L;");
tryItOut("(#1=({prototype: ((p={}, (p.z = *)()))}))(this if (1e81)) = __noSuchMethod__;");
tryItOut("M:if(({}).__lookupGetter__) {let __parent__; }");
tryItOut("try { for(let y in []); } catch(prop if (function(){with({}) for(let y in []);})()) { for(let y in [5,6,7,8]) return ((((new Function).call)(({constructor: this }), (<x/> |= this)))); } catch(__iterator__ if eval(\"let(__iterator__ = false) { let __noSuchMethod__ = <y><z/></y>, prop;\", <{constructor}>yyy</{constructor}>)) { for(let y in []); } ");
tryItOut("{export __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((prototype = true) in \nconstructor) ");
tryItOut("/*for..in*/M:for(const constructor in ((function  __count__ (__count__, constructor))(<y><z/></y>)))export __iterator__;");
tryItOut("with( '' ){throw <y><z/></y>; }");
tryItOut("/*for..in*/M:for(let [__iterator__, __count__] = (@foo)(<y><z/></y>) in <><x><y/></x></>) {const __parent__, __noSuchMethod__; }");
tryItOut("L:while((*) && 0){1.2e3; }");
tryItOut("return\n__proto__\n");
tryItOut("with({__proto__: [0]}){return; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var __parent__ = (new [1,2,3,4].slice( /x/g , window) = eval(\" /x/ \", true)) in __count__ = []) {/*infloop*/M:do (true).apply while( '' );((-1)); }");
tryItOut("/*for..in*/L:for([__iterator__, __iterator__] = (eval(\"__count__.__proto__\", 'fafafa'.replace(/a/g, __proto__))) in <>eval(\"[<><x><y/></x></>].map(({}).__lookupGetter__)\", Number(<x/>.valueOf(\"number\"), <><x><y/></x></>))</>) {try { break L; } catch(__proto__) { return; }  }");
tryItOut("L: {yield false; }");
tryItOut("yield let __noSuchMethod__ = prop, __proto__ = null ? yield <><x><y/></x></> == (this += false) : <>yyy</>;");
tryItOut("/*infloop*/while(( /* Comment */<x><y/></x>.@foo))/*for..in*/for([prop, __proto__] = (<x/>.throw(<y><z/></y>).throw(window)) in [z1,,]) {with((constructor = __noSuchMethod__))(arguments); }");
tryItOut("/*for..in*/L:for(let prototype in __noSuchMethod__) {;yield; } const __count__;;");
tryItOut("if(<x/> += window) M:if(constructor--) yield; else  if ((const __proto__ = *, constructor)) {return; } else  if (({ get prop(constructor) { yield - \"\"  } , __parent__: (window) })) {return; }");
tryItOut("/*for..in*/for((__noSuchMethod__) in  \"\" ) yield __iterator__;");
tryItOut("(<x><y/></x>); const __iterator__;");
tryItOut("{(this);const __noSuchMethod__, constructor = prototype; }");
tryItOut("continue ;");
tryItOut("{let prototype, constructor = prop; }");
tryItOut("/*infloop*/for(const constructor; (__count__.__proto__).isPrototypeOf((function ([y]) { })()); [(constructor =  /x/g ).@* if (window)]) {while(((<x/> ? __count__ : window)) && 0)const __count__ = [], __noSuchMethod__; }");
tryItOut("this.zzz.zzz;");
tryItOut("let(__parent__ = (({}).__lookupGetter__).call(<y><z/></y>, ) >>>=(({<!--yy-->, __count__: \tthis })), ({ constructor: prop, __noSuchMethod__: prototype })) { this.zzz.zzz;");
tryItOut("switch(<><{*::*}></{*::*}></>) { case 7: break;  }");
tryItOut("/*for..in*/for(let [constructor, __proto__] = @foo in *) yield;");
tryItOut("with('fafafa'.replace(/a/g, /a/gi)){let (prop = #1#) {  }L: {(false).watchyield; } }");
tryItOut("if(<x><y/></x>) (__count__).__defineSetter__ else return window");
tryItOut("L: {<><x><y/></x></>; }");
tryItOut("export *;");
tryItOut("while((*::*) && 0){/*infloop*/for(__count__ = prototype;  \"\" ; [,,z1]) gc() }");
tryItOut("prototype");
tryItOut("<!--yy-->");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ([({a1:1}).valueOf(\"number\")]).prototype) /*for..in*/for(const prop = __proto__ = __iterator__ in prototype.constructor) var __noSuchMethod__, prototype;");
tryItOut("/*infloop*/while(@foo === undefined){gc()throw <x/>; }");
tryItOut("if(this) var __count__ = 1e81; else  if (<x/>) {({}).hasOwnPropertygc() }");
tryItOut("while(( /x/  -  /x/ ) && 0)gc()");
tryItOut("prop = __proto__;");
tryItOut("/*infloop*/for(var ({ __proto__: ({ constructor: prop }), __proto__: __proto__ }) = __noSuchMethod__ = ({ get constructor() { yield false }  }); <y><z/></y>; 'fafafa'.replace(/a/g, /a/gi).__noSuchMethod__) gc()");
tryItOut("/*for..in*/for(const __count__ = (false ? prop : this) in false) {var \f__proto__ = <y><z/></y>, __iterator__ = 1e+81;export *; }");
tryItOut("switch(--null) { default: {return  /x/ ;(window); }case #1# == this.valueOf(\"number\").valueOf(\"number\"): L:if( { return __parent__ } ) gc() else  if (<><x><y/></x></>) {const yield, prototype = <y><z/></y>;throw this; }break;  }");
tryItOut("export prototype");
tryItOut("let __noSuchMethod__ = 033\n");
tryItOut("L: <>\f<x>\r<y/></x></>");
tryItOut("let (prototype) { /*infloop*/do /*infloop*/for((constructor = this for each (__parent__ in __count__) for each (prop in <x><y/></x>)); .2; ({prop: true }).__noSuchMethod__) (false).__defineSetter__ while(__count__.__iterator__\n); }");
tryItOut("while(([ /x/g  for each //h\n(function::prop in <x><y/></x>)]) && 0)var __parent__, function::prototype = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var [x::prop, __proto__] = this in  /x/g ) {<y><z/></y>yield; }");
tryItOut("{const __count__;{yield 1.2e3;<x><y/></x> } }");
tryItOut("do {throw <x><y/></x>; } while(([__count__ = <x><y/></x>].map(({}).__lookupGetter__)) && 0)\nwindow;");
tryItOut("(<x><y/></x>).call const __noSuchMethod__;");
tryItOut("let(constructor = __count__, [, , , ]) ((function(){for(let y in []);})());");
tryItOut("if([z1,,]) /*infloop*/M:for(this.isPrototypeOf( /x/ ); [1,2,3,4].slice(<x><y/></x>); __proto__ = <x/>) yield; else  if (__noSuchMethod__.__proto__ =  \"\" (<x><y/></x>, <y><z/></y>) >>> new RegExp(prop.prop)) {L:switch(constructor.throw(this)) { default: export constructor;break; case (__parent__ == window): break;  }/*for..in*/for(const constructor in <><x><y/></x></>) {if( '' ) {gc() } } }");
tryItOut("/*for..in*/L:for(var *::* in new String(window, <x/>)) {export constructor; }");
tryItOut("/*infloop*/M:do do export __parent__; while((*) && 0); while(<y><z/></y>);");
tryItOut("/*infloop*/do const __iterator__; while([[1]]);");
tryItOut("/*for..in*/for(let (prop) in __noSuchMethod__ = (function(id) { return id }.__lookupGetter__(\"constructor\"))) {yield <y><z/></y>; }");
tryItOut("/*infloop*/L:for(window.eval([,,]); (eval(\"prototype\", [1,,])); ({})) {gc(){} }");
tryItOut("switch(__count__.__noSuchMethod__ setter= (({}).__lookupGetter__).apply) { case (__proto__.eval(<><x><y/></x></>.__count__ =  '' )): function  __proto__ () { return <x><y/></x> } \n{}\fbreak; default: return\nprototype;if(prototype = <><x><y/></x></> ? false : (<x/> ? __noSuchMethod__ :  /x/ )) {{} }case 3: let prop, constructor;break; break L;yield;case 3: break; case --<y><z/></y>: const __iterator__, __parent__ = __iterator__;break;  }");
tryItOut("{export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__ in [11,12,13,14].some) {}");
tryItOut("yield __count__ = #3={a:#3#};");
tryItOut("/*for..in*/for(let __proto__ in (#1=<><x><y/></x></> -= [1] .@*:: <x><y/></x>.__lookupSetter__(\"constructor\"))) { set __proto__(__count__) { const __iterator__ = <><x><y/></x></>, constructor = <x/>; }  }");
tryItOut("L:do if(({prototype: prototype = 4.})) {switch(undefined) { case 0: (<><x><y/></x></>);default: break; case 9: gc } } else  if (<><bbb xmlns=\"(prototype = constructor)\"><ccc:ddd><x><y/></x><!--yy--></ccc:ddd></bbb></>)  else {__noSuchMethod__;throw  '' ; } while((window.__lookupSetter__(\"__parent__\")) && 0);");
tryItOut("{}");
tryItOut("if(<x/>.hasOwnProperty(\"__count__\")) (false);");
tryItOut("/*for..in*/for(let prop = [15,16,17,18].map((3/0).watch, @foo) in __proto__) var __noSuchMethod__ = 0x99; const __parent__;");
tryItOut("/*infloop*/M:for(const __noSuchMethod__ = <x/> & prototype(<x><y/></x>, window); constructor.constructor setter= gc; ({__proto__: this + window + __parent__+=<y><z/></y>})) {if([1]) { if (this) {export __iterator__; }} else export __noSuchMethod__;<>false for each (__iterator__ in __iterator__)</> }");
tryItOut("__parent__;\nvar __noSuchMethod__;\n");
tryItOut("if(function  let (prototype, __noSuchMethod__) { yield [[]] } ) { /x/g ;const prop; } else  if ((yield = #1=[#1#])) {( }");
tryItOut("Math.sin\n(this.zzz.zzz).__defineSetter__\n");
tryItOut("/*for..in*/for(const prototype['__noSuchMethod__'] in ((({}).hasOwnProperty)((this.__defineSetter__(\"__parent__\", function(q) { return q; }))))){throw <><x><y/></x></>; }");
tryItOut("M:do {export *;(<><x><y/></x></>); } while((@foo) && 0);");
tryItOut("/*for..in*/for(__parent__ = __parent__ = <x><y/></x> for each (__iterator__ in [z1,,]) ? __count__.prototype : ({__proto__ getter: Math.pow }).hasOwnProperty(\"constructor\") in (new (new Function)())) {return *; }");
tryItOut("{throw __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in @foo) {}");
tryItOut("yield <><x><y/></x></>;");
tryItOut("let(constructor = ([<x><y/></x> if (__noSuchMethod__)]) *= false(), constructor) ((function(){throw constructor;})());");
tryItOut("while((<y><z/></y>) && 0)/*infloop*/while( { yield <><x><y/></x></> } ){constructor = *::*, __proto__ =  \"\" ; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__(arguments) in  /x/ ) {({}).__lookupGetter__ }");
