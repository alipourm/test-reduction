tryItOut("{return <y><z/></y>;if(*::*.__defineGetter__(\"prototype\", gc) && (/*\n*/(yield (yield <x><y/></x>)))) {export prop;__iterator__ getter: (null %=  /x/ ).__defineSetter__ } else (<x><y/></x>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in ((function(q) { return q; }).call((yield false),  /* Comment */window).prop = (__noSuchMethod__))) {return 5.0000000000000000000000;if(new <x><y/></x>(__noSuchMethod__,  \"\" )) {yield *; } }");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = __count__ in ( /* Comment */.2) = constructor) throw  /x/ ;L:with({__proto__:  /x/ .__proto__ = null})gc()");
tryItOut("with( '' )yield  \"\" ");
tryItOut("if(#3={a:#3#}) {(__proto__) = constructor;\f } else \t if ((\n<><x><y/></x></> for (prototype in this)) >>= (this.__defineSetter__(\"__iterator__\", String()))) /*infloop*/for(let [[, prototype]] = __iterator__ = prop; <x/>; (({__proto__: this}))) {const __parent__, __proto__; } else if(__iterator__.isPrototypeOf(*::*)) {yield window; } else ;");
tryItOut("throw window;");
tryItOut("/*infloop*/L:for(const constructor; window; (__parent__.throw(1e81))) L: gc()");
tryItOut("with(eval(\"/*infloop*/for(const __proto__ = <y><z/></y>; <><x><y/></x></>; (function ([y]) { })()) {gc() }\", __count__.valueOf(\"number\")))__iterator__;");
tryItOut("/*for..in*/L:for(constructor = <><x><y/></x></>.eval(constructor) in <x><y/></x>) {(<><x><y/></x></>);\f }");
tryItOut("with(eval(\"([1,2,3,4].slice)(@foo,  /x/g )\", [z1,,].propertyIsEnumerable(\"__parent__\") ? (window)(<y><z/></y>, <x><y/></x>) : -0.unwatch(\"__iterator__\")))if(__count__) {<><x><y/></x></>;<y><z/></y> } else  if (1e4) export __count__; else throw 3.141592653589793;");
tryItOut("L: {<x><y/></x> }");
tryItOut("with(({__proto__: *::*}))<x><y/></x>");
tryItOut("switch(.2) { default: yield  /x/g ;break; case 9: break; case 5.0000000000000000000000: break;  }");
tryItOut("export __proto__;if(eval(\"<y><z/></y>\", __proto__)) export *; else  if (* && __proto__) {gc()__noSuchMethod__; }");
tryItOut("gc()L:if((yield <x/>.unwatch(\"__noSuchMethod__\"))) return; else  if ((new (4.)([#1#].map(function(q) { return q; }), *::*))) {export *; }");
tryItOut("if(({ __proto__: ({ __iterator__: __noSuchMethod__, function::prop: __iterator__ }), constructor: [] }) = [prop, prop, ({ constructor: prototype })]) { if (*.throw(window).prototype = (yield <><x><\ty/></x></>) for (__parent__ in null) if (prototype)) yield <y><z/></y>; else return window;}");
tryItOut("if(({a2:z2})) ; else {; }");
tryItOut("/*infloop*/for([11,12,13,14].some; __proto__ = -0; false - <x><y/></x>) {(each);export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in undefined) {throw constructor;/*infloop*/M:while(*){return ({a2:z2}); } }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (p={}, (p.z = ((/a/gi).call(__noSuchMethod__, <x><y/></x>, [1,,]))[ /x/ .propertyIsEnumerable(\"prototype\")])()) in Math.pow) with({__noSuchMethod__: ((eval) > prototype.__iterator__ <= ('fafafa'.replace(/a/g, )'))}){continue M;gc() }");
tryItOut("if(1.3) {continue L; }");
tryItOut("export __iterator__;L: {throw constructor; }");
tryItOut("{return;yield; }");
tryItOut("let ([], __count__) { {};\nvar __proto__, prototype;\n }");
tryItOut("L: {export constructor; }");
tryItOut("return;");
tryItOut("if(String(<x/> instanceof this, <y><z/></y>)) {try { (<><x><y/></x></>); } catch(__parent__) { {} } finally { __parent__, constructor =  \"\" ; }  } else  if (null >=  /x/ ) {true;(<><x><y/></x></>); }");
tryItOut(";return;");
tryItOut("with({}) yield;");
tryItOut("<x><y/></x>\nyield  /x/g \n{}");
tryItOut("if(new (1 for (x in []))(__noSuchMethod__ = <x><y/></x>)\n) {/*for..in*/M:for(let __count__.prototype in -3/0) {export *; } } else  if (([,,]['__iterator__'] = 1e-81 /= <y><z/></y>)) if((-0)--) { if ((<y><z/></y> %= window)) var __parent__ = null;} else {throw this; }");
tryItOut("return [1];");
tryItOut("{{yield;return; }\n }");
tryItOut("M:if(prop.(3)) throw <y><z/></y>; else  if (__count__.__iterator__ = undefined.yoyo(Date())) {1.3;(null); } else {with({constructor: __count__}){return false;break M; }{throw this; } }");
tryItOut("let (__parent__ = (@foo.__lookupSetter__(\"__parent__\")), [__noSuchMethod__, , prototype, ] = new new Function(window, constructor)) { __noSuchMethod__ = [,]; }if(<y><z/></y>) return; else {const __iterator__, /a/gi =  /x/g ; }");
tryItOut("L:with(prop.__noSuchMethod__)return eval(\"break L;\", <x/>)");
tryItOut("if((<><x><y/></x></> -= __iterator__)) {break M; } else  if ((__parent__ = prototype).hasOwnProperty(\"__noSuchMethod__\")) {yield 1.3;{} }");
tryItOut("do {throw #3={a:#3#};\f } while((#1=({prop: __iterator__.(<x/>)})) && 0);return;");
tryItOut("var prop = function(id) { return id };");
tryItOut("with(__noSuchMethod__ = <><x><y/></x></>.prototype = null *= undefined)L: {var prop = 0.1;constructor = this; }");
tryItOut("L:with(__noSuchMethod__)with(<x><y/></x>)throw false");
tryItOut("{continue ;/*for..in*/for(const [prop, constructor] = ([15,16,17,18].some(undefined, window)) /= __iterator__ in  '' ) export *; }");
tryItOut("/*infloop*/for(const ({ __iterator__: prop, __parent__: __noSuchMethod__ }) = this; false.__lookupSetter__(\"__proto__\"); [,] - <><x><y/></x></>) {return;continue M; }");
tryItOut("/*infloop*/for(__noSuchMethod__; *; 3/0) {const __noSuchMethod__;export __count__; }");
tryItOut("with({prototype: prop = <x><y/></x>})@foo;");
tryItOut("/*infloop*/while((<x/> || @foo))prop = @foo, __count__ = <x><y/></x>;");
tryItOut("/*for..in*/L:for(var [__iterator__,  /x/ ] = * in <y><z/></y>) {{}var __noSuchMethod__ =  /x/ , __iterator__; }");
tryItOut("L: yield\n");
tryItOut("let (__count__ = [15,16,17,18], function::constructor) { /*for..in*/for([__iterator__, __count__] = <x><y/></x>(*::*, [,,z1]).valueOf(\"number\") | (new Function(1.2e3, [])) in (undefined)({})) \t{__parent__ = *; } }");
tryItOut("if(let (x::__parent__ = [z1,,], __proto__ = (-0))  try { {} } catch(__noSuchMethod__ if (function(){var __proto__, __noSuchMethod__;})()) { undefined; } catch(__noSuchMethod__) {  } <x/>) {export *;\t } else  if (((( /x/g ).watch)(3/0, @foo))) continue L;");
tryItOut("with({ { let __noSuchMethod__ = this, __noSuchMethod__ = [[1]];\t } : window === <x><y/></x>})var __parent__, __iterator__;");
tryItOut("if((([<x><y/></x>].sort(eval))).call(this.__defineGetter__(\"__count__\", /a/gi).__lookupGetter__(\"__proto__\").@foo, )) return;\n(window);\n");
tryItOut("if(<y><z/></y>) (1 for (x in [])) else  if (__noSuchMethod__.( /* Comment */<><x><y/></x></>)) break L; else gc()");
tryItOut("with({}) { return -3/0; } ");
tryItOut("while((RangeError(__proto__, <><x><y/></x></>)) && 0)constructor = <y><z/></y>;");
tryItOut("with({}) { constructor.prop\t = <x><y/></x>.([1,2,3,4].slice); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in [#0=[*::*] for (__parent__.constructor in *::*)]) \tdo return; while((this.zzz.zzz) && 0);");
tryItOut("M:if(false) return -3/0;");
tryItOut("/*infloop*/do { } while(new Boolean((function ([y]) { })() ?  /x/g  :  get constructor __count__ (__iterator__, prototype) { return __parent__ }  / [<y><z/></y>],  '' .throw(constructor)));");
tryItOut("M:do prototype = __proto__; while((*::*) && 0);");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = <><x><y/></x></> in *) {return;(<x><y/></x>\f;); }");
tryItOut("with({}) let(__count__, __proto__) ((function(){})())\n");
tryItOut("/*infloop*/M:do {constructor = *::*, __parent__ = #3={a:#3#}; } while(<x/> - -1 ^= <><bbb xmlns:ccc=\"3.141592653589793\"><ccc:eee></ccc:eee></bbb></>);");
tryItOut("({ prototype: __iterator__ }) = __proto__;");
tryItOut("{return; }\n{}\n");
tryItOut("/*for..in*/M:for(var (({a1:1}) .@x:: this).__parent__ in ((\n<><x><y/></x></>)((eval(\"<x><y/></x>\", *)))))M:if(<><x><y/></x></>[true]) { if (__proto__ = *::*) {/a/gi } else }");
tryItOut("/*infloop*/for(var __proto__; this.zzz.zzz; yield #3={a:#3#}) {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in *) {<x/>;/*for..in*/for(const prop =  in <x><y/></x>) {\treturn <x/>; } }");
tryItOut("this.zzz.zzz;");
tryItOut("{try { const constructor = __iterator__, __iterator__ = <\t><x><y/></x></>; } catch(__count__ if (function(){__iterator__})()) { throw <><x><y/></x></>; } catch(__parent__ if ({a2:z2})) { (<x/>); } /*for..in*/L:for(const prop in (((1 for (x in [])))(@foo))); }");
tryItOut("with({}) let(prop) ((function(){return  /x/ ;})());");
tryItOut("(new Function(\"constructor\"))\n");
tryItOut("/*infloop*/for(__count__ = __iterator__ >= *::*.eval(*); ( \"\" .__defineSetter__(\"__iterator__\", /a/gi)); new *::*(@foo,  '' )) <x><y/></x>");
tryItOut("/*for..in*/for([__noSuchMethod__, prototype] = ( %= (__count__)((@foo &= true))) in #0=({__iterator__: <><x\t><y/></x></>})) with({__iterator__: <><x><y/></x></>})__noSuchMethod__;");
tryItOut("while(([1,,].__count__ = <x><y/></x>) && 0)1.2e3");
tryItOut("if(<><x><y/></x></>) {export prop;3; } else {\tcontinue L; }");
tryItOut("switch((uneval(: [,,]\n))) { case ((uneval([z1]))): break; default: break; case 3: break;  }");
tryItOut("let (__count__) { yield <x/>; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("M:with({prototype: #0=({__count__: [[]]})})continue ;");
tryItOut("switch(<y><z/></y>((<><x><y/></x></>.__lookupSetter__(\"prop\")))) { default: (__noSuchMethod__);yyybreak; case 9: break;  }");
tryItOut("/*infloop*/while(prototype(new ( /x/ )( /x/g , <><x><y/></x></>)) = yield ({}).__lookupGetter__(\"__count__\")){{} }");
tryItOut("yield;/*infloop*/do {return  \"\" ;\n\n } while((@foo.@*));");
tryItOut("switch((@foo in [,])) { case <x><y/></x>.*:  { (<x><y/>\f</x>); } break; default: case * ^ false: (__parent__); }");
tryItOut("/*for..in*/for(var [__parent__, prop] = (<><x><y/></x></>.valueOf(\"number\")) in ({a2:z2})) {constructor; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, constructor] = ({ __parent__: prop }) = __iterator__ = #3={a:#3#} in String(try { {} } finally { break ; } )++) const __proto__ =  '' ;");
tryItOut("gc()\nwith(new ( /x/g  |= prototype)(<><x><y/></x></> !== -3/0)){yield __proto__; }\n");
tryItOut("/*infloop*/for(let constructor; (-0) ? (let (__proto__, __iterator__)  /x/ ) : @foo; (p={}, (p.z = <y><z/></y>)())) {{} }");
tryItOut("export __parent__; const constructor;");
tryItOut("with(<x><y/></x> ^= <x><y/></x>.__count__.__defineSetter__(\"prototype\", (1 for (x in [])))){export *;let (__noSuchMethod__ =  /x/ .hasOwnProperty(\"__count__\"), __proto__ = yield this.@foo) { if((yield <x><y/></x>)) /*infloop*/for(__count__ = []; yield <x><y/></x>; ((*::* for each (prototype in <y><z/></y>)))) ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in yield <x><y/></x>;) {(-3/0);__count__, __parent__; }\nreturn;\n");
tryItOut("");
tryItOut("L:if((<y><z/></y>.throw(<x><y/></x>))) {{} } else  if (*::* in <x><y/></x>) {__count__ =  /x/g ;; }");
tryItOut("with({__count__: <x/>})");
tryItOut("/*infloop*/for(* & <x><y/></x>; #3={a:#3#} @ __noSuchMethod__;  '' ) *;");
tryItOut("{yield;break M;(prototype); }");
tryItOut("{yield;let prototype, __parent__ = constructor; }");
tryItOut("false;");
tryItOut("{__count__; }");
tryItOut("if((<><x><y/></x></>.__proto__)) {throw <><x><y/></x></>;let constructor = #1#, prop = <x><y/></x>; } else  if ( /* Comment */*::*) return; else {return  \"\" ; }");
tryItOut("/*infloop*/L:for(__parent__ = *::*; <x><y/></x>.([1]).throw(#3={a:#3#}); <employee id=\"1\"><name>Joe</name><age>20</age></employee><!--yy-->) {<><x><y/></x></>;return; }'");
tryItOut("return;");
tryItOut("{/*for..in*/for(prop = window.isPrototypeOf(\tprototype) in .2) throw *::*; }");
tryItOut("with({__proto__: (((var __noSuchMethod__ = undefined, __parent__ = this))(*) = __iterator__ = __proto__)}){throw <x><y/></x>; const prototype;/*for..in*/for(__parent__ in  /x/g ) {return; } }");
tryItOut("/*infloop*/for(<x><y/></x> *  '' [ ''  &=  /x/ ]; __proto__ = prop; <><x><y/></x> </> != [@foo if (constructor)] < <x><y/></x>.((function ([y]) { })())) {/*for..in*/L:for(var __noSuchMethod__ in prop) /*infloop*/M:do throw <x><y/></x>; while([,]); }");
tryItOut("{yield; }");
tryItOut("/*infloop*/while(<x><y/></x>)return\nL:if(<y><z/></y>) {{continue L; }constructor, constructor = @foo; } else return null;");
tryItOut("if(<y><z/></y>) { if (-1) {([1]); } else {export constructor;gc() }}");
tryItOut("do {export __count__;return; } while((<><x><y/></x></>) && 0)");
tryItOut("/*infloop*/for(let constructor; (function  prototype () { let __proto__, __proto__; } ).call(constructor |=  /x/ , (constructor = false)); (Function().__parent__)) prop\n{}");
tryItOut("[1]");
tryItOut("/*infloop*/for(const __proto__; * ::  /x/ ; __iterator__.(({}))) { }");
tryItOut("let (prototype) { export *; }");
tryItOut("(-0);{if(@foo) const __count__ = <x/>; else  if (1e+81) {<y><z/></y>;export __count__; } else ({}).__lookupGetter__ }");
tryItOut("let (__count__, prop = window) {  }");
tryItOut("/*infloop*/L:for(__noSuchMethod__; (constructor = <x/>); (function  __iterator__ (__proto__) { ; } )()) gc()");
tryItOut("if((__proto__.__count__)++) {((({}).hasOwnProperty).call).call\n } else  if ((new ((this).__defineSetter__)() > ((eval) if (@foo)))) gc() else /*infloop*/for(<x><y/></x>; @foo; ({})) {return; }");
tryItOut("__iterator__, prop");
tryItOut("/*for..in*/for(const [__proto__, __iterator__] = ((p={}, (p.z = 0.1)())).eval(<xxx>{__proto__}</xxx>) in __iterator__ = break L;) if(0x99) { if (set)  else {yield  '' ; \"\"  }}");
tryItOut("switch(<x><y/></x>.hasOwnProperty(\"__parent__\") / [window].map((<><x><y/></x></>).__defineSetter__).@foo) { default: /*infloop*/do /*for..in*/for(const [__proto__, __iterator__] = <x/> in <><x><y/></x></>) {return; } while(<x><y/></x>.prop = @foo);case 2: break; case <><x><y/></x></> = null: try { function (prototype, prototype) { yield @foo }  } finally { return [,,]; } with(~eval(\"if([,]) { if (__parent__) throw -3/0;} else {export *;__proto__; }\",  \"\" )){ }break;  }");
tryItOut("if(L: {/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  /x/g ) {throw [,]; } }) { if (eval(\"(([1,2,3,4].slice).call(this.__defineGetter__(\\\"__count__\\\", (constructor.__lookupSetter__(\\\"__noSuchMethod__\\\")).__defineSetter__), function(y) { yield y; yield;; yield y; }(), [11,12,13,14].some))\", this.__defineSetter__(\"__proto__\", (window).__defineSetter__))) {export prop; }}\f else {continue ;throw  \"\" ; }");
tryItOut("{yield *;*::* }");
tryItOut("this.zzz.zzz;");
tryItOut("switch(3.141592653589793) { default: break; break;  }M:if(this) let set, prop = <x><y/></x>;");
tryItOut("export *\n");
tryItOut("with({constructor: <><x><y/></x></> >>>=<x/>.*}\t){/*infloop*/L:do {} while([z1,,]); }");
tryItOut("let(__count__ = (yield [,])[(__count__ | [11,12,13,14].some)], <x/> = (prototype = ())) ((function(){this.zzz.zzz;})());");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for(function(q) { return q; }(window); __noSuchMethod__; (this.zzz.zzz)) {throw <x/>;break ; }");
tryItOut("/*for..in*/for([__parent__, __noSuchMethod__] = ((undefined if (0/0)) <= (uneval((__iterator__ + <x><y/></x>)))) in ( \"\" )) yield 0.1;");
tryItOut("__iterator__ =  \"\" ");
tryItOut("M:if(<><bbb xmlns=\"(<x/> + <><x><y/></x></>)\"><zzz><><></></> >> <y><z/></y>.__lookupGetter__(\"__noSuchMethod__\")</zzz></bbb></>) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <><x><y/></x></>) yield 1.3;\nvar let;\n } else  if (window) {do ( \"\" ); while(((prototype = window)) && 0); } else L:if(function (__noSuchMethod__, __count__).2) { if (((--window)[(function (prototype) { return * } )])) continue ;} else {yield  \"\" ; }");
tryItOut("/*for..in*/for(__parent__ in ((@foo)(<><x><y/></x></>))){([,,]);var __proto__ = __iterator__; }let *::*;\nvar constructor, prop = <><x><y/></x></>;\n");
tryItOut("with({}) { yield prop; } ");
tryItOut("let prototype\n\n/*infloop*/for([, [({ __count__: ({ __noSuchMethod__: __iterator__, __proto__: ({ prototype: __noSuchMethod__, __iterator__: constructor }) }) }), ({ __parent__: ({ constructor: ({ __proto__: __parent__, __proto__: prototype }), __parent__: ({ __count__: constructor, __parent__: __noSuchMethod__ }) }) }), ], [], __count__] = __proto__; <x><y/></x>.(<x/>).eval(\nfunction ([y]) { }.__count__); prop <<= prototype.(*::*) - (this.zzz.zzz)) {/*infloop*/for(let __count__; <x/>; ([ if (<x><y/></x>)])) {if(*) break M; }let __iterator__, __iterator__; }");
tryItOut("/*for..in*/for(const prop in  \"\" ) {if(<><x><y/></x></>) { if (<><x><y/></x></>) __proto__ else {(this); }} }");
tryItOut("/*for..in*/for(prop = <zzz>function(id) { return id }</zzz> in this) {<x/>; }");
tryItOut("/*infloop*/do for(let y in [5,6,7,8]) this.zzz.zzz; while(new (new Function)(__proto__.watch(\"prototype\", new Function), eval(\"<x><y/></x>\", arguments)));");
tryItOut("/*for..in*/for(let (get) in ((gc)(__noSuchMethod__ + <><x><y/></x></>)))");
tryItOut("for(let y in [5,6,7,8]) const __iterator__ = <x><y/></x>, __count__ = this;");
tryItOut("{<x/>;with(window)constructor = __proto__, prop = this; const __iterator__; }");
tryItOut("if(({a1:1}).__lookupGetter__(\"__proto__\")) {#1=[#1#]window; } else  if ((({ get __noSuchMethod__ constructor (constructor) { yield * }  }))) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in 0x99 :: <><x><y/></x></>) {gc() }");
tryItOut("{}\n<><x><y/></x></>;\n");
tryItOut("/*for..in*/for(prototype = [1] in 0/0) {{export *; }(<y><z/></y>); }");
tryItOut("if((+true)(<x/>./*\n*/hasOwnProperty(\"__parent__\")) = prop.(<x/>)) { if (__noSuchMethod__ =  ''  + [15,16,17,18].filter((function () { yield window } ).apply, <y><z/></y>)) {yield [,,]; } else {return <x><y/></x>; }}");
tryItOut("yield 0.1; const __count__;");
tryItOut("do /*infloop*/for(const __noSuchMethod__; null[<><x><y/></x></>]; [this.__defineGetter__(\"__count__\", (this).__defineSetter__)]) {constructor, prototype;(function ([y]) { })() } while(((\n(new Error(({a2:z2}), 3/0) << [11,12,13,14].filter))) && 0);");
tryItOut("return (new ( /x/ )(<x><y/></x>.@* << <x/>.@*, __proto__.__count__ setter= gc))[new (<><x><y/></x></>)()];");
tryItOut("{\f/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in window) {yield; } }");
tryItOut("(<><x><y/></x></>);");
tryItOut("L:with(constructor.__count__){; }");
tryItOut("1.3\nif(<x><y/></x>) { if (__count__) {export __iterator__;; } else {yield;var prop = __iterator__, __parent__ = 1e81; }}");
tryItOut("var function::function::__parent__\nreturn __iterator__;");
tryItOut("/*infloop*/for(<><x><y/></x></>;  \"\" ; <x><y/></x>) {gc()continue M; }");
tryItOut("*::*\n{}");
tryItOut("{/*for..in*/L:for(var prop = __iterator__.(@foo) in *) {*::*; }if(1e81 .@ prop = <x><y/></x>) {{} } else  if (true) {(Math.sin).call } else {return;({}); } }");
tryItOut("/*infloop*/do {return; } while(__proto__.hasOwnProperty(\"__iterator__\"));");
tryItOut("let(({ __parent__: constructor: window / 0x99.hasOwnProperty(\"__proto__\") }) = ((prop).__proto__), prototype = this || undefined) { throw  '' ;");
tryItOut("{export __parent__; '' ;\nthrow __count__;\n }");
tryItOut("M:if(({ __parent__: ({ __proto__: __count__, __iterator__: prototype }) })+=(({a1:1})\t(new <x><y/></x>(1e-81), (function ([y]) { })()))) { if ((true)(0.1) = constructor.__iterator__\t = -<><x><y/></x></>) {gc() }} else {return __parent__;export *; }");
tryItOut("while(( '' ) && 0){yield; }");
tryItOut("yield function(id) { return id }");
tryItOut("if(<><x><y/></x></>.yoyo(yield undefined)) {if(false) {__count__; } /x/g ; } else /*infloop*/for(__count__ = <x><y/></x>; ( /x/g  for (__noSuchMethod__ in <x><y/></x>)); ((<bbb xmlns:ccc=\" \"\" \"><ccc:eee></ccc:eee></bbb>)[({a2:z2})])) let __parent__ =  { return 3 } , prop;");
tryItOut("with(__proto__)let default: case <x><y/></x>: ;case 3: ;");
tryItOut("yield\n");
tryItOut("L:if(__noSuchMethod__) continue M;");
tryItOut("if(( \"\"  if (<x><y/></x>))) { if (((function(y) { yield y; export *;; yield y; })(0x99)) for each (function::x::__proto__ in <y><z/></y>) if (true) + 0/0 >>= undefined) {break L;__noSuchMethod__ } else {export *;return; }}");
tryItOut("(*::*);");
tryItOut("if(({ get __parent__ __count__ (constructor, function::__count__) { yield <x/> } , __noSuchMethod__: false })) { if (eval(\"(\\t<x><y/></x>)\", ([<><x><y/></x></>].sort(function  constructor (__count__, x::__count__) { yield true } )))) /*infloop*/L:do {const prototype;let __proto__, __count__ = <y><z/></y>; } while(( /x/g )(0, <x><y/></x>)); else {let __parent__;let __count__ = undefined, each = constructor; }}");
tryItOut("constructor");
tryItOut("return (this.__defineGetter__(\"__proto__\", \f]));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <><x><y/></x></>) <y><z/></y>; const __noSuchMethod__;");
tryItOut("__parent__ = __iterator__;");
tryItOut("L: {let (__proto__) { yield; }if(({ __iterator__: prototype, prop: __parent__ }) = false.yoyo(<x/>)) { if (\t__noSuchMethod__|=false) yield 5.0000000000000000000000; else {}} }");
tryItOut("for(let y in []);");
tryItOut("(function::__proto__)\n");
tryItOut("if((__iterator__ catch )) {gc() } else  if (1e81) return <><x><y/></x></>; else {throw this; }");
tryItOut("(__proto__)");
tryItOut("");
tryItOut("return;");
tryItOut("if(( /* Comment */<x><y/></x>(#1#,  /x/g ))(this.__defineGetter__(\"__iterator__\", ({}).__lookupGetter__))) { if (((constructor.eval(this)) for each (__iterator__ in <x/>))) (prototype);} else { }");
tryItOut("const __noSuchMethod__\n");
tryItOut("L: gc()");
tryItOut("M:if(constructor = __count__;) { if (*::*) __proto__ = *\n else /*for..in*/for(const __proto__( '' ) in true) {const __parent__;throw <x><y/></x>; }}");
tryItOut("{(*); }");
tryItOut("let (function::__proto__ = ([__noSuchMethod__ = [z1]].map(({a2:z2})) ? let (__count__ = null, prop)  /x/g ++ : (((1 for (x in []))).call(__proto__, this, #1#)))) { /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  /x/g ) ([,]).__defineSetter__ }");
tryItOut("return;");
tryItOut("/*infloop*/do {throw [[]];yield <x><y/></x>; } while(());");
tryItOut("let (<><x><y/></x></>, __iterator__) { continue L; }");
tryItOut("prototype =  '' ;");
tryItOut("M:if(setter = [11,12,13,14].\tmap.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) {;(#1=[#1#]); }");
tryItOut("/*for..in*/for(const __count__ = (yield __noSuchMethod__ = window) in (5.0000000000000000000000 :: #3={a:#3#}).__defineSetter__(\"__parent__\", ({}).__lookupGetter__) |= void <><x><y/\f></x></>) {; }");
tryItOut("if(<><ccc:ddd><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></ccc:ddd></>) {/*for..in*/for(const function::prop in (([1,2,3,4].slice)(*))){; } } else if(__count__) {{} }");
tryItOut("do {{var __noSuchMethod__ = [z1], __noSuchMethod__; } } while(((__proto__++)) && 0);");
tryItOut("__count__\nbreak ;\n");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((({}).__lookupGetter__)(eval))){({ prop: ({ prop: [, ] }) })\f(#0=[window]).__lookupGetter__(\"prop\") }");
tryItOut("with({}) yield window.yoyo(<x><y/></x>);");
tryItOut("with({__count__: ( '' ++)}){__proto__ = {};yield  /x/g ; }\nif([ /* Comment */.2]) continue ; else  if (({ __count__: prop }) = (\nprop)) return; else \t{{} }");
tryItOut("/*for..in*/\ffor(let __parent__ = (new Object(prototype, <><x><y/></x></>)).__noSuchMethod__ in 3.141592653589793) with({}) for(let y in [5,6,7,8]) ");
