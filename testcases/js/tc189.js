tryItOut("/*infloop*/while(<x><y/></x> != <><x><y/></x></> <= ())return <x><y/></x>;");
tryItOut("let prop = prop\n\n");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __parent__] = yield [11,12,13,14].some in (\nwindow - *::*)) yield  /x/g ;");
tryItOut("break L");
tryItOut("yield;");
tryItOut("if(constructor) {prop;; } else  if (constructor /= <x><y/></x>) yield; else <y><z/></y>;eval");
tryItOut("let (function::__count__, ({ __proto__: ({ prop: __proto__ }), __proto__: prototype.__iterator__ }) = window) { /*for..in*/for(const __count__ in @foo) {prototype;yield 3; } }");
tryItOut("/*for..in*/L:for(let [__parent__, constructor] = this.zzz.zzz in <y><z/></y>\n) /*for..in*/for(var prop(+undefined.__lookupSetter__(\"__count__\")) in ((Math.sin)((({ constructor: __parent__ }) = [](--constructor, yield <y><z/></y>))))){let __count__, __parent__ = <><x><y/></x></>; }");
tryItOut("try { var __iterator__; } catch(__count__ if (function(){for(let y in []);})()) { this.zzz.zzz; } \nconst prototype, __proto__ = 3/0; const __iterator__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in false) {; }");
tryItOut("with({__noSuchMethod__:  /x/g }){(this); }");
tryItOut("/*infloop*/do this.zzz.zzz; while((uneval(<><x><y/></x></>)));");
tryItOut("((__proto__))");
tryItOut("[__iterator__, prop, , ] = __count__;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*for..in*/for([__proto__, __proto__] = prototype in <x><y/></x>) {continue M; }");
tryItOut("/*infloop*/for(let prop; (<x/> += @foo &= constructor); [__iterator__ for each (__parent__ in this) if (<x><y/></x>)]) {const __proto__ = [,,], __count__; }this.zzz.zzz;");
tryItOut("with(constructor = <x><y/></x>){throw <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in __iterator__ = [15,16,17,18].filter(Math.sin, #3={a:#3#})) throw <x><y/></x>;");
tryItOut("L:do {switch(eval(\"{}\", <x/>)) { default:  } } while((-false\n) && 0);");
tryItOut("__count__");
tryItOut("/*for..in*/for(const constructor in ((function(q) { return q; })((p={}, (p.z = ({} @ \t<x><y/></x>))()))))");
tryItOut("/*for..in*/for(constructor =  ''  in window) {throw <x/>; }");
tryItOut("var constructor = <><x><y/></x></>;");
tryItOut("L:if(__noSuchMethod__ = true) { if ((constructor) = return <x><y/></x>) throw ({a2:z2});} else {export constructor;export __proto__; }\n/*infloop*/do {yield {};var prop = prototype, prototype; } while(@foo); const __proto__;\n");
tryItOut("/*infloop*/L:do continue L; while(<><x><y/></x></>);");
tryItOut("if(1e4.__noSuchMethod__ = __parent__) {break M;yield; } else  if (<><x><y/></x></>.constructor) {}");
tryItOut("yield <bbb xmlns:ccc=\" /x/g \"><ccc:eee></ccc:eee></bbb>;");
tryItOut("/*infloop*/L:while(<x><y/></x> ? [[1]] & 4. : (__count__)( '' )){M:switch(this.zzz.zzz) { case new *(<y><z/></y>, 4.): break; gc()break;  } }");
tryItOut("let prop = 3.141592653589793, __iterator__ = __iterator__;");
tryItOut("{(<\tx><y/></x>); }");
tryItOut("export *;");
tryItOut("{M:do {yield; } while((undefined) && 0); }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in (([1,2,3,4].map)([, ({ prop: [prototype, __proto__, __noSuchMethod__] }), prototype, ({ __proto__: __parent__([*::*].map(>)), prop: prototype }), ({ let: __count__, __iterator__: [[this, __parent__], [prop], ({ __noSuchMethod__: __proto__, __iterator__: prototype }), , [prototype, , __parent__, __noSuchMethod__]] })] = let (__iterator__ = ({(undefined); })[-1e+81], function::__count__ = (__iterator__ = this)) @foo()))\t)/*infloop*/do {break M; } while(((uneval(4.))()));");
tryItOut("with(<x><y/></x>){}");
tryItOut("if(<x><y/></x>) return; else gc");
tryItOut("yield;\n__parent__, prototype = this\n");
tryItOut("/*for..in*/for(prop = this.zzz.zzz in @foo) return;");
tryItOut("throw prototype;");
tryItOut("__iterator__ = 0; const prototype;");
tryItOut("/*for..in*/M:for(var [prop, __iterator__] = ((<x/> >= 3 >>= ++window)((.2.hasOwnProperty(\"constructor\")), ((/*infloop*/while(true){{} }) | <x/>))) in \n /x/ ) {break ; }");
tryItOut("/*infloop*/L:for(const prop; (arguments.watch(\"__iterator__\", (function (constructor, __proto__) { return constructor } ).apply)); ~<x><y/></x>) {; }");
tryItOut("if(4..isPrototypeOf(__count__)) window; else  if ((*::*++)) gc() const __noSuchMethod__;");
tryItOut("/*infloop*/for((this.constructor =  '' ); (p={}, (p.z = <x><y/></x>)()); (<y><z/></y>)(function ([y]) { }, @foo)) break M");
tryItOut("L: with({constructor:  /x/g })gc");
tryItOut("(<ccc:ddd><!--yy--></ccc:ddd>.((constructor) = <x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")))((<x><y/></x> * 1e-81)) = __noSuchMethod__;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:for(const ({ prop: __iterator__, __proto__: ({ __proto__: ({ __count__: __count__ }), constructor: [prototype, __parent__, <x/>] }) }) = ; (0)(<><x><y/></x></>,  /x/ ); <x><y/></x>.__lookupGetter__(\"constructor\").__lookupSetter__(\"prototype\")) export get;");
tryItOut("/*for..in*/for(var [prototype, <xxx>{constructor}</xxx>] = ((<x/> <= __iterator__ = <><x><y/></x></>, __proto__) @ /*\n*/(window for each (__noSuchMethod__ in <x><y/></x>))) in ((yield @foo)(this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice), true))) ");
tryItOut("M:if(((Math.sin)())) { if (<><x><y/></x></>.propertyIsEnumerable(\"__parent__\")) {\tgc(){} }} else {;const constructor =  /x/ ; }");
tryItOut("with({__noSuchMethod__: prototype << (uneval(window))})return <y><z/></y>;");
tryItOut("/*for..in*/for(const [prop, __noSuchMethod__] = (\n1.3) in undefined) {M:if(<><x><y/></x></>) ( '' ); else yield this; }");
tryItOut("/*for..in*/for(let __iterator__ in ((function (constructor, __count__) { [1,2,3,4].slice } )(#3={a:#3#})))let \fprototype = ({a2:z2});");
tryItOut("/*infloop*/for(constructor; (undefined if (-1)); ({__count__:  { yield [ /x/ ].sort(Math.sin) } ,  set prop prototype (constructor, prop) { return <x><y/></x> }  })) {\f__noSuchMethod__, __parent__; }");
tryItOut("export *;");
tryItOut("(({__parent__: (yield (new Function(window))), constructor: (typeof (p={}, (p.z = <><x><y/></x></>)()) || <y><z/></y>) })) = prototype;");
tryItOut("__parent__, __parent__\nlet (prop = undefined) { yield; }");
tryItOut("return [15,16,17,18].some(1e81, window);");
tryItOut("/*infloop*/for(__count__; ({({ __iterator__: __iterator__, prototype: __noSuchMethod__ }): (Error((033 if (<><x><y/></x></>)), case  '' : default: case 8: break; )) }); (__noSuchMethod__.prop =  /x/ )[!<x><y/></x>] > 4. += false) throw (uneval(<><x><y/></x>\f</>)).__defineSetter__(\"__proto__\", ( /x/ ).watch);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x><y/></x>) {export *;((<><x><y/></x></>).__defineSetter__).call }");
tryItOut("/*for..in*/for(const __parent__ in [] = [[1]]) {this.zzz.zzz; }\f\t");
tryItOut("L:switch(({__count__: constructor})) { case  /x/ : export *; }\nif( \"\" ) export *; else var constructor;");
tryItOut("switch(return __noSuchMethod__ =  /x/  >>>=0) { case (prop = .2): case (__parent__ -  /x/ ['prototype'] = window.__lookupGetter__(\"__parent__\")): case 3: /*infloop*/for(undefined; (let %= <><x><y/></x></>); constructor.(3/0)) {__noSuchMethod__, __iterator__ = __proto__; } }");
tryItOut(" const __iterator__;");
tryItOut("if(__count__ = 0) { if (false) {let __proto__ = prop;{} }} else let (__iterator__, __count__ = __parent__, __noSuchMethod__ = #3={a:#3#}) { yield; }");
tryItOut("L: ");
tryItOut("with({}) /*for..in*/for(const constructor = <y><z/></y>( '' , <x/>) in (-0)) {}");
tryItOut("{;const prototype = *::*, prototype = <x/>;/*infloop*/for(let [, , ({ __count__: constructor }), [__parent__, , , , ], __iterator__] = this.zzz.zzz; ((Function).call(false, <x><y/></x>) = [15,16,17,18].filter(({}).__lookupGetter__,  /x/ ) ===  \"\"  - <x><y/></x>); ({__count__: #1=[#1#], prototype: #1# }) + <><x><y/></x></>) {if(null) { if (function(id) { return id }) {gc() }} else /*infloop*/for(var prop = __iterator__; <y><z/></y>; window) (<><x><y/></x></>).watch } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x><y/></x>) {yield <x><y/></x>; }");
tryItOut("yield window;");
tryItOut("L: /*infloop*/for(var ({ __noSuchMethod__: constructor, __parent__: __parent__ }) = __noSuchMethod__[ \"\" ]; this.zzz.zzz; void @foo) continue ;");
tryItOut("constructor");
tryItOut("let (prop = __noSuchMethod__ = ({a1:1}), __parent__;const __noSuchMethod__ = x::constructor, ({ __proto__: ({ __iterator__: __parent__ }), function::__noSuchMethod__.constructor: ({ prototype: ({ __count__: ({ prop: __proto__, __proto__: prop }), __parent__: [__iterator__, ] }), __parent__: prop }) })) { continue ; }");
tryItOut("M:if(new Number(<><x><y/></x></>)) { if ((this === 1e-81)) {break\f ;break M; } else {break ; }}");
tryItOut("if(<><x><y/></x></>) {yield; }");
tryItOut("continue ; const __parent__;");
tryItOut("/*infloop*/do {return;return 0/0 } while((export *));");
tryItOut("let (__proto__ = {{} } *= *::*, prototype =  /* Comment */(new RegExp(this, #1=[#1#]))) { /*infloop*/while((((1 for (x in []))).call(null, <x/>, -0)) ^ this.isPrototypeOf(__parent__))(<><x><y/></x></>); }");
tryItOut("if(<><bbb xmlns:ccc=\"(prototype.prototype = this.prop = <y><z/></y>)\"><ccc:eee></ccc:eee></bbb></>) export *;");
tryItOut("if(3.141592653589793) { } else  if ((-1)) {export *; }");
tryItOut("if((eval(\"gc()\", [1,,]))) ");
tryItOut("/*for..in*/L:for(var [__iterator__, prop] = (\n([z1].__lookupSetter__(\"prototype\"))) in [11,12,13,14].sort ? ( \"\" .__lookupSetter__(\"__count__\") >> constructor.hasOwnProperty(\"prototype\")) : #2=[this]) if( ''  << (*::* for (prototype in @foo))) {constructor, prototype;; } else  if (window) {return;yield; } else  \"\" ;");
tryItOut("return  /x/ ; const setter;\nexport __proto__;\n");
tryItOut("L: {return constructor;throw #3={a:#3#}; }");
tryItOut("if(<><\tx><y/></x></> = 5.0000000000000000000000\n) { if (null @ <x/> -= <x><y/></x>) {let constructor, constructor = #3={a:#3#};yield; } else {(arguments);return; }}");
tryItOut("/*for..in*/for(prototype = <x/>[<y><z/></y> - __count__] in <><xxx {__parent__}={(constructor.prototype >>>=(<y><z/></y>.prop))} /></>) {}");
tryItOut("{gc() }");
tryItOut("{{}L:while(( /* Comment */(this.zzz.zzz)) && 0)return yield;; }");
tryItOut("L:with({__proto__: <xxx {__proto__}={eval(__iterator__)} />}){for(let y in [5,6,7,8]) <x/>; }");
tryItOut("if(<y><z/></y>) { if (__noSuchMethod__ =  \"\" .throw(null)) (.2);} else {(<x/>); }");
tryItOut("L:switch(prop.( /x/ ) = <y><z/></y>) { case 2: /*for..in*/for(var ({ __proto__: ({ __count__: __noSuchMethod__, __proto__: __noSuchMethod__ }), __parent__: ({ function::__noSuchMethod__: __count__ }) }) = ({ prop: __count__, prototype: constructor })\t in constructor) prototype = #1=[#1#];break; case 5: /*for..in*/for(let @foo in ((<y><z/></y>)((yield *::*))))let prototype;while((<><x><y/></x></>) && 0){{}{} }break;  }");
tryItOut("/*infloop*/for(x::getter; (-(-1) ? <y><z/></y> : 4. ^= [11,12,13,14].some); let prototype) {{export constructor;yield <x><y/></x>; } }");
tryItOut("M:if((<x/> instanceof @foo)) {yield this; } else  if ((-1)) break ;");
tryItOut(";\n(constructor);\n");
tryItOut("/*infloop*/L:while(__iterator__ = __parent__){export *;window; }");
tryItOut("/*infloop*/for(let __parent__; ([({ __parent__: __iterator__, prototype: __count__ }), ] = __proto__); <bbb xmlns:ccc=\"(+<><x><y/></x></>--)\"><ccc:eee></ccc:eee></bbb>) /*infloop*/M:for(var function::prop = <y><z/></y>; null; <x><y/></x>) { }\nif(window) {return; }");
tryItOut("return this;if(<x><y/></x>) {(*::*); } else  if (3.141592653589793) {export *; }");
tryItOut("new Function");
tryItOut("L: {const __count__;var prototype; }");
tryItOut("if(({ get __noSuchMethod__()(#1# instanceof <x><y/></x>) @ yield (-1), __noSuchMethod__: (constructor = case 8: break; break; default: <x><y/></x>;case <><x><y/></x></>\n: throw window;case new (<x/>)(function ([y]) { }): ;break; ) })) { if (<bbb xmlns=\"function (__parent__)<><x><y/></x></>.__lookupGetter__(\"prop\")\"> </bbb>) {__proto__, prop = prop; } else export constructor;}");
tryItOut("throw this;");
tryItOut("if(<><x><y/></x></>.hasOwnProperty(\"constructor\")) {throw #1#; }");
tryItOut("return;gc()");
tryItOut("/*infloop*/for([({ prop: __noSuchMethod__ })] = <><x><y/></x></>.*; __parent__ = __count__ = {}; yield 5.0000000000000000000000) (*);");
tryItOut("with(((({}).__lookupGetter__)([,](this, 3), __iterator__.prop = null)));\n({}).hasOwnProperty\n");
tryItOut("L: break M;");
tryItOut("do {throw [z1]; } while((new  __proto__ = (function(y) { yield y; gc(); yield y; }())(true)<y><z/></y>.__iterator__ (\n<x><y/></x>, <x><y/></x>) && 0);");
tryItOut("if([,]().*) let (__proto__ = *, prototype) { ({}).hasOwnProperty } else  if ('fafafa'.replace(/a/g, function  __parent__ (__parent__, __iterator__) '' )) {return (function ([y]) { })();gc() }");
tryItOut("with({__proto__: ( /* Comment */'[[]] ? #3={a:#3#} : <x><y/></x>)/*}){<><x><y/></x></>;__iterator__, __noSuchMethod__; }");
tryItOut("/*infloop*/for(this.@* | (1e4 *= [,]); <><bbb xmlns:ccc=\"Date() ^= <><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", function (__proto__) { yield <x><y/></x> } )\"><ccc:eee></ccc:eee></bbb></>; [] = ({ __iterator__: ({ prototype: ({ __proto__: ({ __noSuchMethod__: __iterator__, __iterator__: constructor }), __parent__: __noSuchMethod__ }), __parent__: ({ __noSuchMethod__: [({ constructor: [prototype, __iterator__, , , constructor] }), , prop, , ] }) }) })) L:if(@foo) { if (<><x><y/></x></>) {throw (function ([y]) { })(); }} else var __count__ = __parent__;");
tryItOut("/*infloop*/L:for(let __noSuchMethod__; @foo.eval(try { window; } finally { break M; } ).throw(__noSuchMethod__ = case 7: break; case 0: ); false.prototype) {yield; }");
tryItOut("/*infloop*/for(const [__noSuchMethod__, __parent__, __iterator__, ] = __noSuchMethod__.(3); (({throw *;, constructor: <x/>.propertyIsEnumerable(\"__iterator__\") })); [<bbb xmlns:ccc=\"(this =  /x/g )\"><ccc:eee></ccc:eee></bbb>]) function () { return <><x><y/></x></> } ");
tryItOut("/*infloop*/L:for( /x/ ; this; <><{__noSuchMethod__}> </{__noSuchMethod__}><!--yy--></>) {{} }");
tryItOut("/*infloop*/M:for(const __parent__; ({ __parent__: __count__, __iterator__: constructor }); ({prop: this.__defineSetter__(\"__count__\", ({}).hasOwnProperty)})) {if(<x/>) (true); else (@foo); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let RangeError() in this :: undefined) {var __count__ = <><x><y/></x></>; }");
tryItOut("prototype");
tryItOut("/*for..in*/for(const [prop, constructor\t] = #0=\t(( \"\"  if ([1])))[*::*] in <x/>.__lookupGetter__(\"prototype\")) {const __parent__, prototype; }");
tryItOut("/*infloop*/M:for(const __count__; true; 0\f) var __noSuchMethod__, __noSuchMethod__;");
tryItOut("do {/*infloop*/M:do {return  '' ; } while( '' ); } while((0x99.__proto__ = @foo) && 0);");
tryItOut("/*infloop*/do (null); while(((@foo).apply).call((p={}, (p.z = <x><y/></x>)()), (arguments.@*)));");
tryItOut("/*infloop*/for((({__noSuchMethod__ getter: (null).watch })); (<x><y/></x>.watch(\"__noSuchMethod__\", ({}).__lookupGetter__)\n); (null * <><x><y/></x></>\f for (prototype in <><x><y/></x></>))) {export __proto__\f;(true); }");
tryItOut("/*infloop*/L:for(@foo; yield ((window)[[[1]]]); Math.pow()) {const prop = , __iterator__; }");
tryItOut("/*for..in*/for(let prop = (({ __proto__: ({ __iterator__: __noSuchMethod__, prototype: __iterator__ }), prop: ({ __parent__: __iterator__, __parent__: __count__ }) }) = new ((({__noSuchMethod__: false })))(<x/>, [[]])) in __parent__.__defineSetter__(\"constructor\", ((-1)).__defineSetter__\f)) {L: return <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in __noSuchMethod__ = <><x><y/></x></>, prototype = 5.0000000000000000000000) {{} }");
tryItOut("prototype");
tryItOut("continue ;");
tryItOut("/*for..in*/for(let __iterator__ in ((({}).hasOwnProperty)(0/0)))return 1e+81;");
tryItOut("/*infloop*/\tM:for(const __noSuchMethod__; (__noSuchMethod__.__proto__[__iterator__.__lookupGetter__(\"prop\")]); let (prototype = this, __parent__ = <x/>) <><x><y/></x></>--) throw <><x><y/></x></>;");
tryItOut("false;");
tryItOut("/*infloop*/L:for(<y><z/></y>; *::*; [z1,,]) [1,2,3,4].map");
tryItOut("/*infloop*/for(__iterator__; this.__defineGetter__(\"prop\", function (constructor, __iterator__) { const prototype, __iterator__; } ) << new <y><z/></y>(); (((__count__ for (prop in <><x><y/></x></>))).@foo)) if(__parent__ = 0.1) { if (1.3) {continue ; }} else const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in __count__.__lookupGetter__(\"__parent__\")) {export *; }");
tryItOut("/*for..in*/M:for(const prototype in ((<><x><y/></x></>)(<x><y/></x>))){export *; }");
tryItOut("if(__proto__.(prop())) let __parent__ = *::*, prototype = <x><y/></x>; else  if ((\nthis.__defineSetter__(\"__iterator__\", ))) {L: {(window); } }");
tryItOut("while(((Number((this.__defineSetter__(\"__iterator__\", (new Function(\"yield <x><y/></x>;\"))))))([[1]])) && 0){switch((*)[<><x><y/></x></>]) { default: return (function ([y]) { })();{} } }");
tryItOut("export __parent__;");
tryItOut("return; const __noSuchMethod__;");
tryItOut("/*for..in*/M:for(var prototype = *::* in eval(\"*\", (__proto__))) export prototype;");
tryItOut("\fwith({__proto__: (__parent__ = 1e4).isPrototypeOf(window += [z1])})yield\n/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in undefined) export __iterator__;");
tryItOut("return");
tryItOut("L:if(--/a/gi([,,z1].isPrototypeOf(<y><z/></y>))) { if (('haha'.split).call((<y><z/></y> !== <x><y/></x>), (__count__ > -3/0), 1e-81)) gc()} else break ;");
tryItOut("");
tryItOut("/*for..in*/for(let prop in [z1]) /*for..in*/for(let __noSuchMethod__ = <x/> in ({a2:z2})) (1 for (x in []))");
tryItOut("throw __parent__;");
tryItOut("while((this.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) && 0)\nwith({}) { yield; } ");
tryItOut("yield 0;");
tryItOut("switch( '' .__lookupGetter__(\"prototype\")) { default: break; case (((<x><y/></x>).watch)(let (__count__, constructor) @foo, true)): M:if(<x><y/></x> for (prop in *)) (Math.pow).call else  if (--<x><y/></x>) {__proto__ = -1, __noSuchMethod__;gc() } else {export *; }break;  }");
tryItOut("with((p={}, (p.z = <x><y/></x>)())){var __count__;var __count__, __count__; }");
tryItOut("/*for..in*/for(var __proto__ = this in <x><y/></x>) (<x><y/></x>);");
tryItOut("/*infloop*/for(__parent__ = @foo(); {}; <x/>.constructor .. @foo.watch(\"__parent__\", function ()-0)) {function(y) { yield y;  '' ;; yield y; } }");
tryItOut("with(this >= __iterator__){const <><x><y/></x></>, __count__ = <></>; }\n/*infloop*/for(let __parent__ = (<x><y/></x>)[__iterator__]; #1=[#1#] * 1.3; prop = 0.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })) { }\n");
tryItOut("/*infloop*/for((__proto__ = <y><z/></y>\f); <x><y/></x>.(constructor); B({__count__\f: *::*})) const prototype;");
tryItOut("if(__parent__ = (__parent__ = __iterator__.prototype)) {(( \"\" )[window]); } else let __iterator__ = true;");
tryItOut("L: {var constructor; }");
tryItOut("M:switch([<><x><y/></x></>].map(({}).__lookupGetter__)) { case 9: false.__count__ = __parent__;break; case -function ([y]) { } += <x/>: break;  }");
tryItOut("3 = prop;");
tryItOut("L: var __iterator__, prototype;");
tryItOut("while(((<x><y/></x>)(<><x><y/></x></>)) && 0){throw this; }");
tryItOut("do {/*for..in*/for(let __parent__ = 1.3 in  /x/g ) {var __parent__;({}).__lookupGetter__ }const __iterator__; } while((this.@*) && 0);");
tryItOut("return <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>;");
tryItOut("let (__proto__, __count__ = *) { gc() }");
tryItOut("throw __iterator__;");
tryItOut("with((1.3--))export __iterator__;");
tryItOut("if([(<x><y/></x> .@x::  /x/ )] .. (eval(\"new Date()\", ([1,2,3,4].slice)))) {{} } else  if (<x><y/></x>.*) L:if(constructor = ({})) yield; else {gc(); }");
tryItOut("");
tryItOut("__count__");
tryItOut("L:while((\t(yield prop)) && 0)return undefined;");
tryItOut("for(let y in []);");
tryItOut("if(prototype) __proto__, __count__ = prop else  if (((p={}, (p.z = 0x99)()))) {export __noSuchMethod__; }");
tryItOut("__parent__.hasOwnProperty(\"__noSuchMethod__\");");
tryItOut("/*for..in*/for(var [constructor, prop] = 'fafafa'.replace(/a/g, (<y><z/></y>).__defineSetter__()) in yield (5.0000000000000000000000.__defineSetter__(\"__proto__\", <x><y/></x>))) {yield <><x><y/><\t/x></>; }");
tryItOut("/*for..in*/for([[,,], __proto__] = [11,12,13,14].some in Boolean()) {break ;/*for..in*/for([prop, __parent__] = <x><y/></x> in {}) {Math.powthrow false; } }");
tryItOut(" const prototype\n");
tryItOut("with({}) with({}) with({}) {  } ");
tryItOut("yield <xxx {__iterator__}={*::*} />;");
tryItOut("if((.2.eval(('haha'.split).apply\f(<x><y/></x>, prop)))) /*for..in*/M:for(constructor in true) {yield true;return; } else  if ((*.__parent__)) L:while((this) && 0)export __iterator__;");
tryItOut("/*for..in*/for(let __parent__ in (((({}).__lookupGetter__).apply)(({a1:1}))))gc()\nprototype\n(<x/>);");
tryItOut("while(((*::*--)) && 0)\t{throw 1e-81;break M; }");
tryItOut("gc()\nyield;");
tryItOut("case 3: break; case (({  '' : [prop, __iterator__, constructor, __noSuchMethod__] }) = constructor.__lookupGetter__(\"prop\")): break; case 7: break; case 1: /*infloop*/while((__iterator__ = window) instanceof __parent__.__noSuchMethod__ = 2){M:do {yield;yield; } while(((uneval(null))) && 0); };break; break; case <><{prototype}><!--yy--></{prototype}></>: \n");
tryItOut("__count__ = constructor;");
tryItOut("return;");
tryItOut("{yield <><x><y/></x></>;yield; }");
tryItOut("let (({ __noSuchMethod__: ({ __parent__: ({ __count__: ({ __noSuchMethod__: __count__, prototype: __proto__ }), prototype: ({ __count__: constructor }) }) }), prop: ({ __noSuchMethod__: ({ prop: constructor }), __count__: ({ __proto__: prop, prop: ({ prop: [] }) }) }) }), constructor) { /*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in 0x99) {continue ;return;\t } }");
tryItOut("L: {/*infloop*/while(4.(__iterator__)); }");
tryItOut("L:if(new eval(\"const __noSuchMethod__;\", (<x/>).call(1.2e3, @foo, <x><y/></x>))()) {let (({ __count__: [], __count__: prop }), constructor = <><x><y/></x></>.__defineGetter__(\"__count__\", function  __parent__ () { yield  ''  } )) { function(id) { return id }; }L:if((prop.@foo[(this.zzz.zzz)])) break L; else  if ((uneval(<x/>.__defineSetter__(\"__iterator__\", function  prop ()<><x><y/></x></>)))) {gc()return <><x><y/></x></>; } }");
tryItOut("let (__parent__ = , __iterator__) { /*infloop*/while((__proto__ = prop+=__count__)){continue ;arguments } }");
tryItOut("if(constructor) {gc() } else  if (<><x><y/></x></>) {(<><x><y/></x></>); } else ( set __parent__ prop (__proto__)arguments);");
tryItOut("{}");
tryItOut("M:if(<x/>) { if ( '' ) export __iterator__; else (({}));}");
tryItOut("L:if(--<x><y/></x>) { if ( \"\" .valueOf(\"number\")) {yield;yield  /x/g ; }} else {var constructor =  /x/g , prototype;export __iterator__; }");
tryItOut("/*infloop*/for(var prop = [[,,]].map(function () { yield <><x><y/></x></> } ); 1.2e3; (delete typeof false.__parent__)) yield;");
tryItOut("if((function  __parent__ () { yield * } ).call( \"\" , (function ([y]) { })())) { if (prototype = true) return;} else {; }\n");
tryItOut("if(1.3) {return; } else  if (-3/0) {(<x><y/></x>);continue L; } else {}");
tryItOut("switch() { case 9:  }");
tryItOut("{let constructor, prop;yield this; }");
tryItOut("/*infloop*/for(({ constructor: __parent__, __iterator__: __count__ }) = this.zzz.zzz; \t<y><z/></y>; (* .@x:: <><x><y/></x></>)) let prototype, prop;");
tryItOut("L:do export *; while((new Number()) && 0);");
tryItOut("(this);with(*)yield this;");
tryItOut("for(let y in [5,6,7,8]) let(prop = this) { const __iterator__ = <><x><y/></x></>, __count__\n");
