tryItOut("/*infloop*/for(__parent__ = constructor; *; @foo) ");
tryItOut("/*infloop*/for(let __count__ = \nprop -= [z1] ? -0 : <x><y/></x>; 'fafafa'.replace(/a/g, function () { return #1# } ); ({ constructor: __proto__, __count__: __noSuchMethod__ }) = ({ prototype: __parent__, __parent__: prototype })) const __noSuchMethod__;");
tryItOut("/*infloop*/for(let __count__ = __iterator__ = <x><y/></x>; (({function::__parent__: ((function(y) { yield y; gc(); yield y; }).call( \"\" ,  /x/ , <x/>)),  get constructor <x><y/></x> (prop, __noSuchMethod__) { yield [1,,].eval(this) }  })); ((function(y) { yield y; __iterator__ =  \"\" ;; yield y; })())) function::__parent__ = #3={a:#3#};");
tryItOut("L:if([[]]) switch([1]) { default: const __iterator__;break;  } else yield;");
tryItOut("yield -3/0;");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("M:with({case 6: return @foo;: (eval(\"0.1\", (p={}, (p.z = <><x><y/></x></>)())))}){switch( '' ) { case prop: constructor, __parent__; }{(<x/>); } }");
tryItOut("switch(this.zzz.zzz) { default: break; case  ''  | function(id) { return id }: break; const __parent__;case 9: break; case (uneval(5.0000000000000000000000)): break;  }");
tryItOut("throw __proto__;");
tryItOut("yield #3={a:#3#};\nFunction\n");
tryItOut("switch(-[11,12,13,14].map) { case String(): L: continue ;break;  }");
tryItOut("/*infloop*/do \rbreak ; while([{}.valueOf(\"number\")].some(function (__parent__) { yield false } ).__defineSetter__(\"__proto__\", ( { yield 1e4 } ).__defineSetter__));");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = arguments || (undefined)[true] in ([prop, prototype, , __parent__] = <x><y/></x> |= <y><z/></y>)) __count__ = prop\n");
tryItOut("<x><y/></\fx>;\nif(this) { if (<x/>) return  /x/g ;} else {;throw <x><y/></x>; }\n");
tryItOut("/*for..in*/L:for(__iterator__ in <x/>) let constructor;");
tryItOut("if(this.__defineGetter__(\"constructor\", Function)) { if () yield;/*infloop*/for(let prop = (<><x><y/></x></>)(<><x><y/></x></>,  '' ); (<><x><y/></x></>).apply; (<x/>\n)) {; } else /*infloop*/for(const this; <zzz>*</zzz>; (<x/>.propertyIsEnumerable(\"__count__\"))) ;}");
tryItOut("/*infloop*/M:for(let 033; constructor = []; (({ __count__: __iterator__ }) = prototype = *)) {while((0) && 0)const __proto__, __count__ = true; }");
tryItOut("/*for..in*/for(let __proto__ in ((({}).__lookupGetter__)( '' ))){gc() }");
tryItOut("L:if((1e+81\n)) { if (__proto__.__parent__ = <x/>) {continue M;{} }} else {continue L; }");
tryItOut("with({}) return;");
tryItOut("/*infloop*/L:for(var __proto__; ( /x/ .unwatch(\"__parent__\")); (({<x><y/></x> getter: /a/gi }))((__parent__))) /*infloop*/M:for(export __parent__; prototype.*; __count__) {var __count__ = (-1), __parent__ = prototype;/*for..in*/L:for(var __count__ = false in *) export __noSuchMethod__; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = window in 033) gc()");
tryItOut("__proto__(__proto__ = 4.) = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in (<><x><y/></*\n*//x></> || true) :: -3/0 / false) (window);");
tryItOut("([[]]);\nexport *;\n");
tryItOut("with({}) {  } ");
tryItOut("{with({}) let(__parent__, __noSuchMethod__ = (1e-81 *=  '' )) { let(prop, get) { throw __proto__; }");
tryItOut("/*infloop*/do /*infloop*/for(<><x><y/></x></>.prop = *::*; [11,12,13,14].filter; #1=[<><x><y/></x></>]) {export __count__; } while(3.141592653589793 != <x><y/></x>);");
tryItOut("let __count__ = <x/>;");
tryItOut("L: {if((<><x><y/></x></> / prop)) {return *;const __noSuchMethod__; } }");
tryItOut("{throw *::*; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in ({__parent__ getter: ({}).__lookupGetter__, __parent__: (* =  \"\" ) })) {gc() }");
tryItOut("{__proto__ }");
tryItOut("let (let = <y><z/></y>, prop) { L:if(__iterator__) { if (__count__) {\nconstructor, prototype = 3.141592653589793;__iterator__ }} else {yield <x/>; } }");
tryItOut("/*infloop*/do {} while(this.__defineGetter__(\"__iterator__\", function(y) { yield y; var prototype;; yield y; }));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (<x><y/></x>)(@foo) in *::*) <x><y/></x>;/*for..in*/for(__iterator__ = <y><z/></y> in undefined) {let __iterator__ = this, __iterator__; }");
tryItOut("/*infloop*/for(this.__defineGetter__(\"__count__\", (__iterator__ = <><x><y/></x></>).__defineSetter__); this.throw( /x/ ).*.__defineGetter__(\"__count__\", ); (this.zzz.zzz)) yield");
tryItOut("/*infloop*/do {throw <x><y/></\tx>; } while(new prop = false);");
tryItOut(";");
tryItOut("export __count__;");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = () in (eval(\"this\", [[]].__lookupSetter__(\"__noSuchMethod__\")))) {/*infloop*/for((((Function)( /x/ , null))); 'fafafa'.replace(/a/g, /a/gi); (({ get prototype __count__ () { return (yield -0.__defineSetter__(\"prototype\", function  __parent__ () { yield 3/0; } )) } , __iterator__: <y><z/></y>.propertyIsEnumerable(\"__proto__\") }))) {0x99;const constructor = <y><z/></y>, prop; } }");
tryItOut("/*for..in*/for(prototype = <x><y/></x> in undefined) {}");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __proto__ = *::* in window) {return;export *; }");
tryItOut("if((constructor <= 0/0.unwatch(\"constructor\"))) { if ((/a/gi)) /*infloop*/for(__iterator__; window; null) {;return __proto__; } else /*for..in*/\tfor(const [prop, __parent__] = @foo in <><x><y/></x></>) return <x><y/></x>;}");
tryItOut("with({__noSuchMethod__: (new RegExp(/a/gi(__parent__, <x><y/></x>) || 1e+81))}){L: yield false;{null } }");
tryItOut("with( .(-0--))if(#1#) { if ((++<x/>)) return false;} else ({}).hasOwnProperty");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __count__ in [,,]) return;");
tryItOut("with({__proto__:  '' .__lookupSetter__(\"__noSuchMethod__\")}){let __count__ =  \"\" ;const __count__, constructor; }");
tryItOut("M:switch( '' ) { case 4: throw prop; }gc()");
tryItOut("if((((*)).yoyo())\t) yield undefined;\texport *;");
tryItOut("return 5.0000000000000000000000\n{}");
tryItOut("setter.get");
tryItOut("L:switch((__noSuchMethod__ = )) { case : with({__iterator__: __proto__ = <x><y/></x>})yyy }");
tryItOut("{}");
tryItOut("do {return;let function::prop = function ([y]) { }, __iterator__ = arguments;return window; } while((prop) && 0);");
tryItOut("/*infloop*/L:while((({__noSuchMethod__: true }))){__iterator__ = 3/0, function::prop; }");
tryItOut("if(-3/0) {(window).apply } else  if (<x><y/></x>)  /x/g \n/*for..in*/for(constructor in ((new Function)(window))){evalexport *; }");
tryItOut("with({constructor: 5.0000000000000000000000})if(\n<><x><y/></x\f></>\t) {export __parent__;*::*; } else  if (prop = __iterator__: (this.__defineSetter__(\"prototype\", function  __iterator__ () { {} } ))) break M; else {return <x/>; }");
tryItOut("if(__count__ = window.valueOf(\"number\")) { if ((yyy)) {let (({ __count__: prototype }) = (((1 for (x in []))).apply)([z1,,], <x><y/></x>)) { const __count__; } } else gc()}");
tryItOut("var function(q) { return q; };\nM:do yield window; while((!<><x><y/></x></>) && 0);\n");
tryItOut("do let prototype; while((<x/>.propertyIsEnumerable(\"prop\")) && 0);");
tryItOut("/*infloop*/for(const [, ({ __parent__: ({ __noSuchMethod__: constructor }), __count__: ({ __noSuchMethod__: [__iterator__, [], , ({ __parent__: prop })], (<x><y/></x>\n >> <x><y/></x>.eval(this)): (/*\n*/{ __iterator__: [__count__, prop, , ] }) }) }), , ({ ({ __iterator__: __proto__, prop: ({ __parent__: ({ prop: prop }), prototype: constructor }) }): ({ prop: __parent__, __iterator__: prop }) }), ] = (((({}).__lookupGetter__).call(<y><z/></y>, ))\n.__lookupSetter__(\"constructor\")).throw(yield 3.141592653589793.unwatch(\"constructor\")); __parent__.hasOwnProperty(\"prop\"); (__count__.((this.__defineSetter__(\"__count__\", gc))))) {export prop;const __proto__ = 1.3, constructor = __parent__; }");
tryItOut("/*for..in*/L:for(var __parent__ in ((function(y) { yield y; return;; yield y; })(({ set __count__ prop (__noSuchMethod__, __noSuchMethod__) { yield Iterator() } , __iterator__ setter: Function })))){return\nlet (__noSuchMethod__ = ({a1:1})) {  } }");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].map).__count__) continue M; else {return [[]];{} }");
tryItOut("return;");
tryItOut("if((({ __noSuchMethod__: constructor, __iterator__: __count__ }) = __parent__ = 4.)) { if (__iterator__ = 3/0.watch(\"__iterator__\", function(q) { return q; }).valueOf(\"number\")) \t{let function::__count__: this.__defineGetter__(\"constructor\", Math.sin), __count__ = <y><z/></y>;switch([z1]) { case function ([y]) { }:  } }} else {do gc while((<y><z/></y>) && 0); }");
tryItOut("/*infloop*/for(var __proto__ = new Iterator(); <><x><y/></x></>.constructor; ({prototype: * })) /*for..in*/for(var (uneval(5.0000000000000000000000)) in *::*()) (*)");
tryItOut("if([[1]].propertyIsEnumerable(\"__count__\")\t) { if (constructor = this) /*infloop*/M:do gc() while(true);} else export *;");
tryItOut("{/*for..in*/for(const <><x><y/></x></> in ((Function)((<x><y/></x> if (<x><y/></x>))))){(3);<><x><y/></x>\f</>; }break ; }");
tryItOut("/*for..in*/for(const __iterator__ = arguments.throw(4.) in this) {yield <><x><y/></x></>;if(false[<y><z/></y>]) {} else  if ((false(*::*, __proto__)))  }");
tryItOut("this");
tryItOut("{(<x/> in <x/>) }__parent__");
tryItOut("with({}) { constructor = prop; } ");
tryItOut("with({prototype: (this.zzz.zzz)}){;\nprop;\n/*for..in*/M:for(let prop in ((gc)( /x/g )))throw this; }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("return;");
tryItOut("L: if(*::*) {__proto__; } else  if (window) ");
tryItOut("yield;");
tryItOut("/*infloop*/while(((constructor.(<x/>)))()){}");
tryItOut("__parent__ = __proto__;");
tryItOut("/*infloop*/for(*; <><x><y/></x></>; __proto__ = *::*) {export *; }\nL:if(<x><y/></x>) {gc() } else  if (*::* ?  ''  : <y><z/></y>) {<x/>;<><x><y/></x></>; } else Function\n");
tryItOut("prop = __parent__;");
tryItOut("/*infloop*/for(this.__defineSetter__(\"constructor\", <x/>) .@*:: 1e+81; this.__defineSetter__(\"__count__\", ({}).hasOwnProperty); (4..yoyo(null))) {break ; }");
tryItOut("/*infloop*/for(__iterator__; <bbb xmlns:ccc=\f\"({a1:1})\"><ccc:eee></ccc:eee></bbb>; __parent__ = #1=[#1#]) {continue ; }");
tryItOut("throw prop;");
tryItOut("/*infloop*/do with({prop: <x><y/></x>.__lookupSetter__(\"prototype\")}){function::__proto__ = <y><z/></y>, __parent__ = __noSuchMethod__; } while(Object(*) :: (<x><y/></x>\n));");
tryItOut("yield;\nconst yield [1];, __parent__ = 0x99;\n");
tryItOut("let(__count__ = (yield 1.2e3).propertyIsEnumerable(\"__count__\")) { yield window.watch(\"prototype\", ({}).__lookupGetter__);");
tryItOut("{export *;-3/0 }");
tryItOut("try {  } catch(constructor if (function(){export __iterator__;})()) { [z1]; } catch(__count__) { var __iterator__; } finally { __proto__ } ");
tryItOut("if((#1=[#1#] >= window.prop)) {break M; } else  if (((uneval((0/0.eval([,])))))) {throw  \"\" ; }");
tryItOut("/*for..in*/for(var prototype in this) {yield; }\n");
tryItOut("/*infloop*/L:do {\fwhile((<x/>.eval(this)) && 0) } while(__proto__.__iterator__ = #1=[#1#]);");
tryItOut("/*for..in*/L:for(const __iterator__ in <><x><y/></x></>) {(<><x><y/></x></>); }");
tryItOut("/*infloop*/while((this.__defineSetter__(\"__proto__\", function  prototype ()(/a/gi)(window)))){(true);window; }");
tryItOut("/*for..in*/L:for([__iterator__, prototype] = [#1# for each (constructor in <x/>)] in {}) const constructor = prop, prop = <x><y/></x>;");
tryItOut("if(<y><z/></y>) { if (null) {(({a1:1}));var prop, __iterator__; }} else {yield  \"\" ; }");
tryItOut("{throw <><x><y/></x></> .@ __parent__; }");
tryItOut("let(prop, constructor) { for(let y in [5,6,7,8]) ;");
tryItOut("return;");
tryItOut("L:if((-0)) gc() else {{}export __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in arguments) /*for..in*/for([prototype, __iterator__] = (this.__defineSetter__(\"prototype\", (new Function(\"break ;\")))) in undefined) (0/0).__defineSetter__");
tryItOut("M:if(<y><z/></y>) <x><y/></x>;");
tryItOut("{with({__proto__: [15,16,17,18].map((<><x><y/></x></>).watch, <x/>)}){;break ; }with({__proto__: [] = false.isPrototypeOf(prop)}){} }");
tryItOut("/*for..in*/for(__count__ = * .@x:: @foo in this[((uneval(window)))]) if( '' ) {const __iterator__; } else  if (__count__.(return)) {window;export *; } else /*for..in*/for(const [prop, __proto__] = __proto__ in  '' ) yield false;");
tryItOut("/*infloop*/L:do throw window; while();");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in prototype /= *::*) /*infloop*/for(var function::__parent__; (new Boolean(({constructor: *::*}))); ((1 for (x in []))())[new (function(q) { return q; })( '' )]) (__parent__);");
tryItOut("/*for..in*/for(const prototype = this in <y><z/></y>) export *;");
tryItOut("prop = true;");
tryItOut("do if(this.unwatch(\"__iterator__\").__lookupGetter__(\"constructor\")) {let __count__ = null;if(<y><z/></y>) [1,2,3,4].map } while(('haha'.split) && 0);");
tryItOut("/*for..in*/for(function::prototype = 033 in default: break; ) gc()");
tryItOut("/*infloop*/for(let let; (-0); __parent__ = ({ *::*: prop, __count__: __count__\f })) return (-1);");
tryItOut("{var prop = __iterator__; }");
tryItOut("const prop = 1.2e3, prototype\n\nL: {function  function::__proto__ (constructor) { export __noSuchMethod__; }  }");
tryItOut("L: {/*\n*/switch(5.0000000000000000000000) { default:  } }");
tryItOut("{/*infloop*/while(<x/>){{; }break ; }/*for..in*//* nogeckoex bug 349964 */ for  each(var [[__noSuchMethod__], ], __noSuchMethod__.constructor in __noSuchMethod__ = window) L: __count__ = <y><z/></y>, constructor; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = 0 in [,]) {yield; } set __parent__ __parent__ () {  } ");
tryItOut("do \n while(([, ({ __proto__: prototype, __parent__: [] }), ({ __parent__: ({ prototype: [, , ] }) }), (++<y><z/></y>)['prototype']] = __count__ = prototype(([z1]))/) && 0);");
tryItOut("<y><z/></y> = __parent__;");
tryItOut("with({}) __noSuchMethod__ = __iterator__;");
tryItOut("(({ __count__: prop, constructor: prototype }) = [*].some((window).watch));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in  /x/ ) yield <y><z/></y>; const prop;");
tryItOut("/*infloop*/for(let ({ __count__: __noSuchMethod__ }) = prototype.prop = \n<x/> += constructor.(this) * __count__ = [];  /* Comment */(__iterator__ = 1e+81); +this) gc()");
tryItOut("let (__count__ = <x><y/></x>.unwatch(\"__noSuchMethod__\")) { (window); }");
tryItOut("if(__proto__) { if (( '' )(window) .@*:: prototype+=window) {yield false;<x><y/></x>; } else continue ;}");
tryItOut("if([<x><y/></x> if (<y><z/></y>)]) (([1,2,3,4].map).call(<x><y/></x>, #1#, <x/>)) else {gc()gc() }");
tryItOut("if((([(let (prototype) <x><y/></x>)].some((Function).call)).propertyIsEnumerable(\"prototype\"))) {function::nullprototype;export __parent__; } else { '' ;/*infloop*/for(__iterator__; <x><y/></x>; prop) {return 1e+81;export constructor; } }");
tryItOut("/*infloop*/for(const __iterator__; \n[]; ({constructor: #2=({__parent__: <x><y/></x>}) })) prototype setter: function  __count__ (__proto__) { return (({}).hasOwnProperty)((function (__iterator__, __iterator__) { continue ; } ).call(__count__\n, )) } ");
tryItOut("do {L: const __count__ = [1,,]; } while(([<x><y/></x>].filter(gc)) && 0);");
tryItOut("/*for..in*/for(let prop = __parent__ = true.throw((yield *::*)) in yield this) {yield <><x><y/></x></>; }");
tryItOut("while(([1,,].isPrototypeOf(this) &= ('fafafa'.replace(/a/g, <x/>)).__defineSetter__(\"__proto__\", eval)) && 0)M:if(0x99 in @foo ?  /* Comment */* : new (<x><y/></x>)(1e+81, <x/>)\t) {export *;return; }");
tryItOut("/*infloop*/for([, []]\t = ((uneval(<x/>))).watch(\"prototype\", function  __iterator__ () { return null } ) < 1e+81; ((yield this)).watch(\"__proto__\", ([15,16,17,18].map(eval, window).\f__parent__)); (function  __iterator__ (__proto__, prop)(__count__ = function(y) { yield y; let prototype;; yield y; }()))) const prototype = [1,,];");
tryItOut("( /x/g ); const constructor\n({a2:z2}); const prop;");
tryItOut("L:if(__iterator__) ; else function(y) { yield y; <x/>; yield y; }");
tryItOut("/*infloop*/for(let [, ({ prop: __count__ }), ({ __count__: __proto__, function::constructor: ({ function::prototype: [__proto__, ] }) }), [({ __proto__:  for each (prop in .2) if (__proto__) }), , ]] = (( /x/g ).call([] = ({ <x/>: __parent__ }), true, (function  __proto__ () { return <y><z/></y> } .eval(try { throw __proto__; } catch(__proto__) { (constructor); } finally { export *; }  = 3.141592653589793)))); ({__proto__: (yield ((yield *))) });  /* Comment */constructor.function::__noSuchMethod__.__parent__) yield");
tryItOut("let (constructor, __iterator__ = __parent__) { __proto__ =  \"\" , prototype = this; }");
tryItOut("/*infloop*/do {let (__parent__ = [[1]], __noSuchMethod__ = <><x><y/></x></>) { gc() } } while(__iterator__ = __count__;);");
tryItOut("M:if(yield <x><y/></x>) {3/0; }");
tryItOut("gc()");
tryItOut("{export *; }");
tryItOut("with({}) __iterator__ = prop;");
tryItOut("gc()");
tryItOut("/*for..in*/for(const __proto__ in (((({ constructor: ({ prop: constructor, __parent__: delete }), __noSuchMethod__: __count__ }) = (<y><z/></y>\n)).call)(({ __noSuchMethod__: ({ prop: ({ __noSuchMethod__: __iterator__, prop: __parent__ }), constructor: ({ __iterator__: function::prototype }) }), __noSuchMethod__: ({ prop: __parent__ }) }) = ((new ( /x/ )()) / prop)))){<y><z/></y>;gc() const prototype; }");
tryItOut("(<x><y/></x>); const __iterator__;");
tryItOut("{; /x/g ; }");
tryItOut("M:if((('fafafa'.replace(/a/g, [[1]])) << (yield (-1)) >= (this ?  \"\"  : ({a2:z2})).isPrototypeOf(<x/>.valueOf(\"number\"))) for each (prototype in (prototype\n.@*)) for each (constructor in __iterator__ = <x/>) for (constructor in <\tx><y/></x>) if (<y><z/></y>)) { if ((uneval((<x><y/></x>)()))) if(<x><y/></x>()) {gc()const __count__ = null, prop = <><x\f><y/></x></>; } else  if (eval(\"false\", prop.__iterator__)) return 033;} else {prop = (<x><y/></x> >>>=null), prop = #3={a:#3#}; }");
tryItOut("with({constructor: (__proto__ = 1e-81).isPrototypeOf(__parent__.(this.__defineSetter__(\"prototype\", [1,2,3,4].slice)))}){gc()(*); }");
tryItOut("/*for..in*/M:for(let [[<x><y//*\n*/></x>].some(<x><y/></x>).propertyIsEnumerable(\"__noSuchMethod__\"), prototype] = new (function (constructor, __parent__) /x/ \n)() in (null)) {/*infloop*/M:while( /x/g .unwatch(\"prototype\")){const __noSuchMethod__, prop } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let @foo['__count__'] in __iterator__ = undefined *= #1#.@*) {Math.sin(this); }");
tryItOut("do return prototype; while((@foo) && 0);");
tryItOut("const __proto__,  /x/g ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in __noSuchMethod__) {export *; }");
tryItOut("/*for..in*/for(let prop = __iterator__ getter: gc.prop in function::constructor) [<><x><y/></x></> for each (__count__ in  '' )]");
tryItOut("do if(0/0) { if ( /x/ ) {constructor; } else {yield false;{} }} const prototype; while(((__count__.watch(\"__noSuchMethod__\", function (constructor) { yield window } ))\n) && 0);");
tryItOut("return;");
tryItOut("if(__iterator__ if (function(id) { return id })) {return;yield  '' ; }");
tryItOut("export constructor;");
tryItOut("/*infloop*/do {return false;constructor, __parent__ = this; } while([,,z1]);");
tryItOut("/*for..in*/for(const (prototype) in (((function (prototype, __proto__) { return true } )(<y><z/></y>))(<><x><y/></x></>.isPrototypeOf(0))))<><x><y/></x></>;");
tryItOut("L: {'haha'.splitreturn; }");
tryItOut("if( /x/g .unwatch(\"__parent__\")) { if (@foo.__lookupSetter__(\"__parent__\")) {export *;gc() }} else var __count__, __parent__;(<x><y/></x>);");
tryItOut("L:with({__noSuchMethod__: ([15,16,17,18].some(({}).__lookupGetter__, *))})M:if(window) {throw <y><z/></y>; } else  if (<><x><y/></x></>) export prototype;");
tryItOut("/*infloop*/for(window\n; 3.141592653589793.valueOf(\"number\"); (p={}, (p.z = ([11,12,13,14].map))())) null;");
tryItOut("if() export *\n else  if (((<><x><y/></x></>.eval([[1]])) for each (prop in [[]]) for (constructor in <x><y/></x>)) = prop.(function(id) { return id }.__lookupSetter__(\"__parent__\"))) {var __parent__;var constructor, __count__;export *; }");
tryItOut("/*for..in*/for(let __count__ in <x><y/></x>) __noSuchMethod__, __iterator__ = *;");
tryItOut("let (prototype, ({ __noSuchMethod__: __parent__, __count__: __parent__ })) { /*infloop*/do  while(<x><y/></x>); }");
tryItOut("( /x/g )\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (null)(<y><z/></y>) in (new 5.0000000000000000000000.prototype( /x/g ))) /*for..in*/L:for(const [__iterator__, constructor] = <y><z/></y> in 3.141592653589793) if(<x/>) { if (*) {__parent__return; } else }");
tryItOut("if(((__noSuchMethod__.__noSuchMethod__)())) { if (prop != (new Function())) export *; else { }}");
tryItOut("\fvar constructor = [], constructor;var __proto__ = undefined;");
tryItOut("/*infloop*/for(const __proto__ = prop.__proto__-=undefined == <><x><y/></x></>; ~*::*; yield) {gc }");
tryItOut("/*infloop*/M:for(eval(\"prototype = <><x><y/></x></>\", (this.propertyIsEnumerable(\"__noSuchMethod__\"))); (prototype)[__count__ = <><x><y/></x></>]; ((1 for (x in []))).call( /x/g ,  '' )) yield  /x/ ;");
tryItOut("if(__noSuchMethod__ = (this.__defineGetter__(\"__proto__\", -0))) __count__ = [[,,z1]].sort(new Function) else return __parent__; const prop;");
tryItOut("/*infloop*/while((\t__noSuchMethod__ = window)){let __iterator__, constructor = this;let (__parent__ =  /x/g , __count__ = *) { throw getter; }\n }");
tryItOut("var prototype = <x><y/></x>\nwith(this){;let __proto__ = <><x><y/></x></>, __noSuchMethod__; }");
tryItOut("L:if(\n(yield  /x/g )) return; else  if ((constructor = <x><y/></x> && <><x><y/></x></>.eval(<x/>))) {}");
tryItOut("return\nexport __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in (window.__defineSetter__(\"prototype\", [1,2,3,4].slice))) /*infloop*/M:for(@foo.watch(\"__parent__\", (false).__defineSetter__); prop; *.__lookupSetter__(\"__count__\")) /*for..in*/for(let __iterator__ = <zzz>__parent__ = \t<><x><y/></x></></zzz> in false) gc()");
tryItOut("if(<y><z/></y>) {export *;continue L; } else {let prop;export prop; }");
tryItOut("/*infloop*/for(3.141592653589793; <y><z/></y>; \r1e4) {return;(<><x><y/></x></>); }");
tryItOut("1e-81");
tryItOut("/*infloop*/M:for(({ __noSuchMethod__: [, , , [], ({ __iterator__: prototype })] }) = prototype; ([15,16,17,18].map(('haha'.split).apply, (/a/gi).call(//h\n<y><z/></y> / window, ))); this << <y><z/></y> - (prototype.constructor = window) = eval(\"__noSuchMethod__\", true)) ((uneval(new Iterator())));");
tryItOut("if(({__iterator__:  ''  >= null, __parent__: <><xxx {prototype}={<><x><y/></x></>} /></> })) { if (((yield this.__defineGetter__(\"__parent__\", Function)))) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in undefined) switch( \"\" ) { default:  } } else export *;}");
tryItOut("/*infloop*/do yield; while(<><x><y/></x></> | <x><y/></x> -= false += 3);");
tryItOut("/*infloop*/M:do {const __noSuchMethod__, __iterator__ = .2;L:with({__iterator__: x::__noSuchMethod__ = <x><y/></x>})const __proto__ = 1e81; } while(function (__iterator__) { yield new Array(<x><y/></x>.yoyo(({a2:z2})),  /x/g ) } ());");
tryItOut("/*for..in*/for(let [__count__, __count__, ] in ((new Function)(__parent__.valueOf(\"number\").__defineGetter__(\"__count__\", ({}).hasOwnProperty)))){var constructor, constructor = <x/>; }");
tryItOut("if(((<x><y/></x>)(<x/>,  /x/ ))) export *;gc() else  if ((yield true)) const constructor = window.@*; else export *;");
tryItOut("/*for..in*/L:for(var __proto__.__iterator__ in (((window).__defineSetter__)( { return constructor; } ))){{ }throw  /x/g ; }");
tryItOut("M:if((<x><y/></x>).call(window, function::__count__)) {return; } else  if ( /x/ [ '' ]) {gc()export *; }");
tryItOut("let (({ __proto__: __parent__ })) {  }");
tryItOut("const __noSuchMethod__");
tryItOut("while((((-1).watch(\"__noSuchMethod__\", (<x><y/></x>).call))) && 0){break ; }");
tryItOut("[/*\n*/[({ constructor: [__parent__, , , __proto__, ], __iterator__: prototype }), ], ] = constructor;");
tryItOut(";\nprop = __noSuchMethod__;\n");
tryItOut("let (__iterator__ = function ([y]) { }.throw( \"\" ).hasOwnProperty(\"__count__\")) { const __iterator__ = false; }");
tryItOut("{}");
tryItOut("L:with(function::prototype = [11,12,13,14].some)let prop = {}, constructor =  \"\" ;\f");
tryItOut("while(([15,16,17,18].some((((function  __count__ () { yield  ''  } ).apply).call).call, new [1,2,3,4].slice(<y><z/></y>, window))) && 0){;var prototype = <x/>; }");
