tryItOut("return;");
tryItOut("M:while((this) && 0)switch(<y><z/></y>) { default: <x><y/></x>break; ;break; case 7: {}case [__noSuchMethod__] = prototype: let (__parent__) { ; }case 5: prototypebreak; export __proto__;break; case 4: case 9: break; case (__noSuchMethod__.__count__ setter= /a/gi) = <><\tx><y/></x></> for each (__parent__ in <y><z/></y>): __count__;break; break; /*infloop*/L:for(*;  '' ; 1e-81) {return;yield; }export *;break;  }");
tryItOut("L: {break L;yield; }");
tryItOut("if((@foo.watch(\"__proto__\", ({}).hasOwnProperty))) { if (new RegExp(null, <x><y/></x>)) let __proto__ = setter, constructor =  /x/g ;} else var __proto__ = <x><y/></x>;");
tryItOut("if(true) throw <x><y/></x>; else {continue ;{} }");
tryItOut("{} const constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in prototype = [[1]]) {function(y) { yield y; break ;; yield y; }<><x><y/></x></>; }");
tryItOut("return @foo.*;");
tryItOut("continue L;");
tryItOut("<x><y/></x>");
tryItOut("/*for..in*/for(const constructor in null) {yield; const __proto__;with(<x><y/></x>){continue ;const __noSuchMethod__; } }");
tryItOut("if(prototype = (eval(\"yield [1];\", (({ __parent__: __noSuchMethod__ }) = __parent__ = [,])))) { if (())  '' ; const __iterator__;} else yield;");
tryItOut("with({__parent__: (prop.prototype = prop)})throw StopIteration;");
tryItOut("export constructor;/*infloop*/for(let __noSuchMethod__ = <y><z/></y>; <><x><y/></x></>; <><x><y/></x></>) {return;; }");
tryItOut("(undefined.__defineSetter__(\"prop\", ({}).hasOwnProperty)) = function::constructor;");
tryItOut("do {(<><x><y/></x></>); } while((function(id) { return id }) && 0);");
tryItOut("if(<{prototype}>yyy</{prototype}>) {gc(){} } else  if ( /x/ ) {__proto__ = prototype;return __count__ = __parent__; }");
tryItOut("try { constructor = __parent__; } finally { let(prop = (__parent__ = __noSuchMethod__)) ((function(){__proto__ = constructor;})()); } ");
tryItOut("{break M;M:switch(this <<= constructor) { default: ;break;  } }");
tryItOut("throw __parent__;");
tryItOut("L:if(-3/0) {gc() } else {return <y><z/></y>;const __count__ = 0; }");
tryItOut("{L: L: {default: break; case 8: case 1: var let;case <><x><y/></x></>: break;  } }");
tryItOut("continue ;");
tryItOut("for(let y in [5,6,7,8]) with({}) { return @foo; } ");
tryItOut("M:do {{} } while(((new (<><x><y/></x></>)())) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__count__) in (<y><z/></y>)) export *;");
tryItOut("/*infloop*/M:for(prototype; (4.-- = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(this.__defineGetter__(\"prop\", {})));  /* Comment */(__proto__ =  /x/g  |= __parent__)) {export *; }");
tryItOut("{continue ; }");
tryItOut("with({__parent__: ({__proto__: [,,z1], __count__:  \"\"  })})continue L;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for((__noSuchMethod__); let (prop) (__iterator__ .@*:: (-0)); (new <y><z/></y>(false)).call((({ prop: __noSuchMethod__, __proto__: __parent__ }) = <x><y/></x>),  '' .@* ? constructor.__proto__ getter= function (__count__) { return this }  : __parent__.constructor getter= #1#)) {const constructor = undefined; }");
tryItOut("gc()<bbb xmlns:ccc=\"#2=({prototype: __noSuchMethod__ = <><x><y/></x></>.valueOf(\"number\")})\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*for..in*/for(let prototype in (yield this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"return <y><z/></y>;\")))) >>= __count__ = [11,12,13,14].map) {if(*::*) return <x><y/></x>;/*infloop*/while(true){yield; }\n(false); }");
tryItOut("/*for..in*/for(var [prototype, __count__] = <x/> in <><x><y/></x></>) {throw window; }");
tryItOut("/*infloop*/for(const constructor; constructor = <><x><y/></x></>; [__proto__ for (__parent__ in <x><y/></x>)]) const constructor = [1], __parent__ = *;");
tryItOut("M:with((yield (\n+3)).*){let __parent__ = <x><y/></x>; const __parent__; }");
tryItOut("export *\n const __iterator__;");
tryItOut("/*infloop*/for((yield window ^=  '' ); [[]].propertyIsEnumerable(\"constructor\"); (true(*::*, <><x><y/></x></>)) ? (throw this.zzz.zzz) : (({ __iterator__: [x::constructor, , ], constructor: ({ __iterator__: ({ constructor: constructor }) }) }) = __iterator__)) /*infloop*/for(const __count__; [,,].eval(__count__); __count__ <<=  \"\" ) {return __iterator__;(__parent__); }");
tryItOut("/*for..in*/for(var <x/> in delete arguments) {if( \"\" ) {let prop = *::*; } else  if (3) yield 033; else export *;{let constructor, prototype = false; } }");
tryItOut("/*infloop*/for(({ constructor: , __proto__: getter(__parent__) }) = (\n__proto__.(3/0) for each (__parent__ in *::*)); (prototype = 0/0.hasOwnProperty(\"__parent__\")); false.@*.prototype = new false()) {throw ({a2:z2});case \n*::*.throw( \"\" ): default: case RegExp(): break; if(<><x><y/></x></>) return <x><y/></x>; else  if (window) {(<x><y/></x>); } else {throw <x><y/></x>;throw <><x><y/></x></>; } }");
tryItOut("with({}) { let(({ __count__: ({ __iterator__: __proto__, __iterator__: __parent__ }) }), ({ __count__: prop, constructor: __proto__ })) ((function(){__proto__ = __noSuchMethod__;})()); } ");
tryItOut("if(null >>= __parent__) break L; else  if (0x99.__lookupGetter__(\"__iterator__\")) yield;");
tryItOut("with({prototype: this})if(__count__ =  '' ) { if () {/*infloop*/do return *; while([prop for (__proto__ in __count__)]); } else const prop = this, null = <y><z/></y>;}");
tryItOut("let (__count__ = new Number(), __iterator__) { yield constructor; }\nswitch(\nprop) { default: break;  }\n");
tryItOut("let (__noSuchMethod__, __iterator__ = 033) { {} }");
tryItOut("\nthrow window;\n");
tryItOut("with({yield: ( /x/g )((-0))}){(<><x><y/></x></>);throw <x><y/></x>;[z1]; }");
tryItOut("if(<y><z/></y>) { for each (__iterator__ in <y><z/></y> - <y><z/></y>) for ((function(q) { return q; }[.2.__count__ = prototype])((function (prototype, prop)<><x><y/></x></>)()) in window) if ( /x/ ) } else  if (prop.constructor\t getter= (<><x><y/></x></>).watch++) /*infloop*/do throw <><x><y/></x></>; while(( /x/g  for each (prop in *)) | window.__count__);");
tryItOut("with(*.isPrototypeOf<x><y/></x>).@foo){false.propertyIsEnumerable(\"prop\"); }");
tryItOut("try { this.zzz.zzz; } finally { with(undefined.__parent__ = [,,].eval([(function ([y]) { })()]))return; } ");
tryItOut("with({}) { for(let y in [5,6,7,8]) yield (new String()); } ");
tryItOut("let(__parent__ = __parent__) { gc()");
tryItOut("{export let prototype;;let prop; }");
tryItOut("with(let(__parent__, constructor =  '' ) { prototype = __count__;){const __parent__; }");
tryItOut("/*for..in*/for(var (prototype) in \teval(\"*\", <x><y/></x>)) export *;");
tryItOut("/*for..in*/for/*\n*/(let constructor in ((function (__count__, __iterator__) { yield ! /x/  } )((this.__defineSetter__(\"prototype\", ({}).__lookupGetter__))))){} const delete;");
tryItOut("/*infloop*/while([.isPrototypeOf((prop|=<x/>)).__proto__])let (__noSuchMethod__ = <x/>) { (@foo); }\nyield @foo;\n");
tryItOut("/*infloop*/L:do {return <y><z/></y>; } while(false);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in ((0/0.eval([])).eval(1.3))) {export * }");
tryItOut("M:do return; while((__iterator__ = <y><z/></y>.unwatch(\"__noSuchMethod__\")) && 0);");
tryItOut("if(({ __proto__: __parent__ }) = true ? {} : #3={a:#3#}) { if ('fafafa'.replace(/a/g, Math.pow)) {export *;var prototype = <><x><y/></x></>, prototype; } else __noSuchMethod__;/*\n*/}");
tryItOut("/*infloop*/for(undefined < ({a1:1}) / <><x><y/></x></> *= prop; <zzz>__proto__</zzz>.((*::*)[window]); undefined *= #1=<><x><y/></x></>) constructor = prop;");
tryItOut("const __parent__ = <x><y/></x>;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("with({__iterator__: (Error())}){/*for..in*/for(var prototype =  ''  in this) return <x><y/></x>;function (constructor, __noSuchMethod__) { yield <x><y/></x> }  }");
tryItOut("if(<x><y/></x> .. [,,z1]) { if (prototype.(__noSuchMethod__ = <><x><y/></x></>)) Math.sin else {return *::*;export prop; }}");
tryItOut("if(<><zzz>prop.constructor getter= function  get () { yield __proto__, prop } </zzz></>) {; const prototype; } else  if (<>(this.__defineGetter__(\"__noSuchMethod__\", function  __proto__ () { yield <x/> } ).isPrototypeOf(<x><y/></x>))</>) {M:with({__proto__: +delete = @foo})\tthrow <><x><y/></x></>; }");
tryItOut("do {yield;export *; } while((#0=({constructor: <x/>})) && 0);");
tryItOut("return; const __count__;");
tryItOut("/a/gi");
tryItOut("for(let y in []);");
tryItOut("M:if( \"\" ) {__noSuchMethod__;yield <x/>; }\nM:switch(0x99) { case 1: constructor = window;default: const __count__, __parent__ = <x><y/></x>;break; case 5: throw [1]; }\n");
tryItOut("L:switch(window) { case <x><y/></x>: const __parent__, __count__;var __count__ = *::*, prop = [,,];break;  }");
tryItOut("L:if([<>//h\n<x><y/></x></>]) {return; } else  if ( /x/g ) ;");
tryItOut("if([__iterator__ = function(id) { return id } if (((uneval(<y><z/></y>))))].hasOwnProperty(\"__count__\")) with\t(( /x/ )){let __count__ = false;\n(<x><y\f/></x>);\nbreak L; } else true;");
tryItOut("let (__count__ = (__iterator__(false.unwatch(\"__noSuchMethod__\"))), [prototype, , , ({ __count__: ({ __iterator__: __iterator__, __proto__: [, constructor] }) }), ]) { var __iterator__ =  \"\" , constructor; }");
tryItOut("if(this.__defineSetter__(\"prop\", Math.sin)) __count__, constructor else {yield; }");
tryItOut("/*for..in*/for(const __parent__ in (('haha'.split)(<y><z/></y>))){gc() }");
tryItOut("for(let y in [5,6,7,8]) throw constructor");
tryItOut("gc()\nreturn <x><y/></x>;");
tryItOut("if(function::__proto__++) {throw window; } else  if (({__noSuchMethod__ setter: <><x><y/></x></>, __proto__: function(id) { return id } })) { }");
tryItOut("if([(new null())].sort(( /* Comment */*).__defineSetter__)) {yield;/*infloop*/do {;export *; } while((eval(\"null\", -1))); } else break ;");
tryItOut("if(#3={a:#3#}) { if (<x/>) {\f}} else {function  __iterator__ () { return  /x/g  }  }");
tryItOut("{}");
tryItOut("\t{/*for..in*/for(__parent__ in (new ((eval).call)(<x><y/></x>, <x><y/></x>))) {{export *; } } }");
tryItOut("switch(export *) { default: break; case @foo:  }");
tryItOut("L:if((( /* Comment */<x><y/></x>)())) {export constructor; } else {/*\n*/export constructor;throw ({}); }");
tryItOut("let (__parent__ = new (<><x><y/></x></>)(try { return; } catch(__noSuchMethod__) { return <x><y/></x>; } finally { break ; } )) { return; }");
tryItOut("/*for..in*/for(let __count__.__parent__ in ((function ()(prototype)(<x/>).__defineGetter__(\"__iterator__\", <y><z/></y>\n))(\n(new (@foo .@*::  '' )(( /x/ .__parent__).hasOwnProperty(\"prototype\"), __proto__)))))yield \t<x/>;");
tryItOut("with((__noSuchMethod__.unwatch(\"prop\")))gc()");
tryItOut("if(delete this.__iterator__ = <x/>) export prototype; else {throw <x><y/></x>; }");
tryItOut("/*for..in*/for(var [constructor] in (uneval(<x/>))) {export __proto__; }");
tryItOut("break \n");
tryItOut("with(constructor = .2){gc() }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = [[1]]; undefined--;  /x/g (this)) {export *; }");
tryItOut("switch((({ constructor: ({ __iterator__ getter: ({}).hasOwnProperty: __noSuchMethod__, __count__: constructor }), prop: __iterator__ }) = (-1).propertyIsEnumerable(\"__noSuchMethod__\"))) { case 3: yield  \"\" .__lookupSetter__(\"__iterator__\");break; default: yield undefined;break; case 3: with((({}).__lookupGetter__)(<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\"), @foo)){; }case (({ prototype: __proto__ }) = __proto__): break; return;break;  }");
tryItOut("let (__proto__ = this) { break ; }");
tryItOut("L:with(\n'fafafa'.replace(/a/g, function () { ( '' ); } )){if((String())) { if (window.__proto__) {@foo } else {gc()yield this; }}throw #3={a:#3#}; }");
tryItOut("L: if((prop & undefined)) { if ((<><x><y/></x\f></> ,  /x/ ) /= prototype = this) {{throw {};var __noSuchMethod__ = this; } }} else if(this.__defineGetter__(\"__proto__\", undefined)) { if ((function(y) { yield y; yield;; yield y; }).call(<y><z/></y>, this, <y><z/></y>)) return;} else { }");
tryItOut("{gc()var x::prop = 1e-81, __noSuchMethod__ = *::*; }");
tryItOut("prototype\n");
tryItOut("return");
tryItOut("/*for..in*/for(const constructor = * in this) var prototype = *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (/a/gi).call) { }");
tryItOut("/*infloop*/while([15,16,17,18].filter(new Function, prototype = [z1,,])){var __proto__ = <y><z/></y>;; }");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, Math.sin)){var prototype;continue M; }");
tryItOut("/*infloop*/for(function(id) { return id };  '' ; <y><z/></y>) {throw false;{} }");
tryItOut("yield;");
tryItOut("/*infloop*/for([] = <x><y/></x> += __count__; prototype =  /* Comment */[1]; (function  constructor ()[z1](__noSuchMethod__)).__proto__) {yield;throw [,,z1]; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:for(let __iterator__;  '' ; prop) {yield; } const prop;");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/for(var __iterator__ = prop = constructor[(+@foo)(this.zzz.zzz, )]; -3/0; ('fafafa'.replace(/a/g, (1 for (x in [])))).__defineGetter__(\"prototype\", Function)) /*for..in*/for(let (<x/>)(3.141592653589793) in ((function  __parent__ () { yield <x/> } )([false]))){yield;__proto__, prototype; }");
tryItOut("if(-3/0) return true; else  if ((__proto__ &= <><x><y/></x></>)) return; else let __count__ = (function ([y]) { })(), constructor;");
tryItOut("return;yield;");
tryItOut("throw __parent__;");
tryItOut("break ; const __noSuchMethod__;");
tryItOut("/*infloop*/for(const (/*\n*/{ __noSuchMethod__: ({ <> </>: __proto__ }), prop: [, ({ __count__: ({ __count__: __parent__, __proto__: __count__ }) }), constructor, [, , __parent__, , [__noSuchMethod__]]] }) = ((yield (new (new (Math.pow)())(@foo.__lookupSetter__(\"constructor\"))))); (((((-0 += undefined)).watch).apply).call(__noSuchMethod__.__iterator__, ++new Number(RegExp(<x><y/></x>), undefined), (constructor = <x/>))); [({ __iterator__: prototype, __count__: ({ prototype: __proto__, __iterator__: constructor }) }), , prop, , ] = (<bbb xmlns=\"<x/>.unwatch(\"prop\")\">yyy</bbb>.(void this.zzz.zzz))) const __iterator__ = this, __noSuchMethod__\n");
tryItOut("if((new Number())) {let __iterator__;const function::constructor, __proto__; } else  if (({ __count__: ({ __noSuchMethod__: prop }), __proto__: prop }) = ({ __count__: [] })) {return *;export *; }");
tryItOut("if(__noSuchMethod__.watch(\"prop\", (@foo).__defineSetter__)) { if (this.zzz.zzz) switch((this.zzz.zzz)) { case ([15,16,17,18].some(({}).__lookupGetter__, <> </>.((uneval(constructor))))): break; break;  }} else {this.zzz.zzz; }");
tryItOut("return;");
tryItOut("{} const prop;{}");
tryItOut("if( /x/ ) {{} }");
tryItOut("/*infloop*/L:while(Math.pow + prop.(({prop: true})).*)do export prop; while((<zzz><x><y/></x></zzz>) && 0);");
tryItOut("/*infloop*/L:for(const prop;  \"\" .throw(this).isPrototypeOf(prop.__count__ setter= /a/gi.isPrototypeOf(false === <x><y/></x>)); (function(q) { return q; })((( /x/  if (3/0))))) {<><x><y/></x></> }");
tryItOut("let(constructor, __count__) ((function(){yield window;})());");
tryItOut("if(eval(\"gc()\", 1e+81)) { if (gc().propertyIsEnumerable(\"__count__\")) {function  __proto__ () { return this }  }} else export *;");
tryItOut("/*for..in*/for(prototype in <!--yy-->.(({__count__ setter: eval }))) if( '' --) { if (-1.constructor = @foo) { } else {export *;__count__ = __noSuchMethod__; }} const __parent__;");
tryItOut("let (({ __proto__: [, , , ], __proto__: [, __noSuchMethod__, , ] }) = prop.set, __count__ = [*::* if ( '' )]) { /*infloop*/for(let function::__noSuchMethod__; __noSuchMethod__.prop setter= Math.sin; (\f(__proto__ = <x><y/></x>).__count__)) return  /x/g \nyield  /x/ ; }");
tryItOut("/*infloop*/while(__iterator__.__noSuchMethod__ = 0x99){/*for..in*/for(var function::prop = (prop.prototype = __proto__) in <><x><y/></x></>[1.3]) {/*for..in*/M:for(let prototype in constructor) {export *;break ; } } }");
tryItOut("{const __iterator__; }");
tryItOut("if(null) {yield;export *; }");
tryItOut("/*infloop*/for(x><y/>/x>__iterator__.__iterator__ .((function ([y]) { })()); 1e81 ?  : this; new (((<y><z/></y>).apply).apply)( /x/g , ({}))) (undefined);");
tryItOut("with({__noSuchMethod__: ([prop, []] = ({ __noSuchMethod__: prototype }) = ({ prototype: __iterator__, __parent__: __iterator__ }))})if(#0=[(new __iterator__(window))]) { if (yield <><x><y/></x></>.hasOwnProperty(\"constructor\")) yield [1]; else let __noSuchMethod__ = <x><y/></x>, prototype = *;}");
tryItOut("/*infloop*/while(this.__defineGetter__(\"constructor\", (1 for (x in [])))){gc }");
tryItOut("M:while((window) && 0)");
tryItOut("/*infloop*/for(eval(\"(__proto__ for (__proto__ in <><x><y/></x></>))\", (<x><y/></x>.isPrototypeOf( \"\" ))); ({}); *::* ? @foo : <y><z/></y>) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <x><y/></x>) yield; }");
tryItOut("with([1])return prototype;");
tryItOut("gc()");
tryItOut("(this);");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = (const prop = #1#)[(__proto__.__defineSetter__(\"prop\", (eval).apply))].throw(prototype.yoyo(this) >>> this.zzz.zzz) in [] *= *) export *;");
tryItOut("let(__proto__ = [null for (__count__ in <x><y/></x>)] %= 'fafafa'.replace(/a/g, (function () { yield null } ).apply), ({ prop: ({ constructor: __count__ }), __proto__: __noSuchMethod__ }) = ((1.2e3.__proto__) &= (uneval(*)))) ((function(){__count__ = __proto__;})());");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*for..in*/for(const [__parent__, constructor] = prop.( /x/g ).__defineGetter__(\"__proto__\", function  __count__ (__parent__, __count__)(this)( /x/g )) in ([*::*].map(-1) @ <><zzz>#1=[#1#]</zzz></>) .@x:: yield  /x/  >= <x><y/></x>) <><x><\fy/</x></>");
tryItOut("M:if({}.constructor = prototype%=<><x><y/></x></>) export __proto__;");
tryItOut("export __parent__;\ngc\n");
tryItOut("if((prop.//h\n(Function({}.isPrototypeOf( \"\" ))))) {\t(this); } else  if (this.zzz.zzz) {yield 1.2e3; } else __count__;");
tryItOut("throw constructor; const __parent__;");
tryItOut("if(({})) {throw <><x><y/></x></>; } else  if (0) {{}gc() } else {throw  '' ; }");
tryItOut("/*for..in*/for([__parent__, __count__] = <y><z/></y> in [1]) const constructor = {};");
tryItOut("{let __parent__, prototype = [,,z1]; }");
tryItOut("do const __count__ = <><x><y/></x></>, constructor = <x/>; while((<x/>\f) && 0); const __noSuchMethod__;");
tryItOut("with({__count__: .2.valueOf(\"number\") / new (033)( { gc() } )}){export __parent__;/*for..in*/for(var [__parent__, __iterator__] = <><x><y/></x></> in null) {{} } }");
tryItOut("if(( /* Comment */<y><z/></y>) %= (prototype = @foo)) break L; else  if (<xxx>{__count__}</xxx>) __proto__: 1e+81 else return;");
tryItOut("L:if(constructor = window) { if ((<x><y/></x>)[<><x><y/></x></>]) let __count__ =  \"\" ;} else var __proto__, function::__parent__ = <y><z/></y>;");
tryItOut("yield; const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in (__iterator__ = prototype)) if(this) {/a/gifalse; }");
tryItOut("__noSuchMethod__ = __count__; const prop;");
tryItOut("__iterator__ = prop;");
tryItOut("if(__proto__ = __parent__) {yield;continue L; } else  if ((gc).call(<x><y/></x>, )) yield; else {yield;return; }");
tryItOut("/*infloop*/do export *; while(prop.(<y><z/></y> ^= try { __noSuchMethod__, __noSuchMethod__ = <><x><y/></x></> } finally { export constructor; } ));");
tryItOut("L: {let __iterator__, prototype;/*infloop*/for(__count__; <><x><y/></x></>; <><x\n><y/></x></>) gc() }");
tryItOut("{(function ([y]) { }).__defineSetter__ }");
tryItOut("export *;");
tryItOut("throw <><x><y/></x></>;");
tryItOut("if((new constructor)) yield; else  if (new function(y) { yield y; throw <><x><y/></x></>;; yield y; }( \"\" )) const __noSuchMethod__, function::__proto__ = @foo;");
tryItOut("\tgc()\n;\n");
tryItOut("yield *");
tryItOut("/*infloop*/for(const [__proto__, __proto__, ] = ({ __count__: constructor, __parent__: ({ __iterator__: prop, __proto__: __count__ }) }) = prop.__proto__; (({__proto__ getter: new Function, constructor: __proto__ })) ? [true].filter((new Function(\"yield;\"))) * <x><y/></x>.__count__ : __parent__.prop = this <<= (<{constructor}><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></{constructor}> !== 0x99); ((p={}, (p.z = this.isPrototypeOf(@foo))()))) {{yield <x><y/></x>; }throw eval(\"return 3;\", <y><z/></y>); }");
tryItOut("with(~ /x/ ){}");
tryItOut("if(<'><></></>) {/*for..in*/for(let [constructor, __iterator__] = [[1]] in #1=[#1#]) prop = window, __proto__ = <x><y/></x>;{}\n }if((({}).__lookupGetter__).call((-1), @foo, <y><z/></y>)) {L:with({__noSuchMethod__: this}){} } else  if ((<><\tx><y/></x></> in <y><z/></y>)) {<x/>;throw [,,z1]; }");
tryItOut("while(((({}).hasOwnProperty.__lookupGetter__(\"constructor\"))) && 0){gc() }");
tryItOut("/*for..in*/for(let __proto__ = <x/>.constructor = <><x><y/></x></> in this.__defineGetter__(\"constructor\", ({__iterator__ setter: false }))) M:if(<y><z/></y> !== <><x><y/></x></>) let __iterator__; else  if (-0) const __noSuchMethod__ = <x><y/></x>; else {const __count__; }((__proto__ ===  /x/g ));\n/*infloop*/while((<y><z/></y>.@*))gc()\n");
tryItOut("M:if(function ([y]) { }) {gc()prop } else  if (<x><y/></x>) return 1e81; else {let prop; }");
tryItOut("const __proto__;");
tryItOut("/*for..in*/for(__iterator__ = <><xxx {__count__}={(__parent__.__noSuchMethod__ getter= #1=[#1#])} /></> in [11,12,13,14].map) {{} const __parent__;/*infloop*/do {(<>prop</>); } while(prototype.__proto__); }");
tryItOut("{return; }");
tryItOut("/*for..in*/L:for(var (__iterator__) in false.prop) {/*infloop*/for(constructor; @foo.__noSuchMethod__; __count__.constructor) {continue ;return <x><y/></x>; } }");
tryItOut("/*infloop*/L:while((this.__defineGetter__(\"__noSuchMethod__\", [,,])) ? undefined : <y><z/></y>.__count__ = (#2=({__iterator__: prop}))())if(<><x><y/></x></> /= 0) { if ( { /*infloop*/do {gc() } while(<><x><y/></x></>.@foo); } ) <><x><y/></x></>;\nyield;\n} else export *;");
tryItOut("(<y><z/></y>)\n__noSuchMethod__ =  '' , __proto__;");
tryItOut("{return 1e+81;([z1]); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <x><y/></x>) const __noSuchMethod__ =  /x/g , prototype =  /x/ ;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*/for([__parent__, __parent__] = undefined in  '' ) yield;");
tryItOut("let __parent__ = <x/>;");
tryItOut("{export *; }");
tryItOut("if(eval(\"/*infloop*/for(const __noSuchMethod__; (function ([y]) { })(); ~null) <x><y/></x>;\", [<><x><y/></x></>].some(Math.pow).propertyIsEnumerable(\"constructor\"))) {gc()throw null; } else {{gc }/*infloop*/while(<><x><y/></x></>) }");
tryItOut("/*infloop*/L:while(#1=[#1#])");
tryItOut("(1 for (x in []))");
tryItOut("/*infloop*/M:do ; while((yield null));");
tryItOut("if(\n) { if (([1,2,3,4].map).call([], )) <zzz>033</zzz>} else continue ;");
tryItOut("let(prop = __parent__, prototype = #3={a:#3#}) { yield  \"\" ;/*infloop*/do throw  \"\" ; while(<x/>);");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, prototype] = __parent__ = __parent__ in (this)) if(eval(\"<><x><y/></ yield  \\\"\\\" ; x></>\", this)) {continue L;[[1]]; }");
tryItOut("{let constructor, prop; }");
tryItOut("/*for..in*/for(const __iterator__ = new __noSuchMethod__(<x><y/></x>.valueOf(\"number\")) in (new [1,2,3,4].map( /x/g ))) { }");
tryItOut("/*infloop*/for(const __iterator__((__parent__ = *).prop) = (x::__noSuchMethod__); yield (__noSuchMethod__.(this)); this.zzz.zzz\t) return *;");
tryItOut("/*infloop*/while(({ __iterator__: __proto__ }) = <x><y/></x>.eval(<><x><y/></x></>)){throw  \"\" ; }");
tryItOut("/*for..in*/for(let __iterator__ = #1=({__proto__: <><x><y/></x></>.isPrototypeOf(null)}) in this.zzz.zzz) {{}\n__iterator__;\n/*for..in*/for(var __iterator__ = <><x><y/></x></> in \t<y><z/></y>) {{} } }");
tryItOut("M:if((prop = __proto__)) __noSuchMethod__ = (<x><y/></x>.__defineSetter__(\"__parent__\", Math.sin)) else  if (this.__defineSetter__(\"__noSuchMethod__\", Function)) if(<x><y/></x>) { if (<x><y/></x>) {__parent__; }} else __noSuchMethod__");
tryItOut("yield;");
