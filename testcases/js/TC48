
tryItOut("with({__parent__: (/*for..in*/for(__count__ = <x/> in  '' ) {break ; } = <x/>)}){}");
tryItOut("/*infloop*/for(__noSuchMethod__%=<><x><y/></x></>; ; (<y><z/></y>)( /x/  .@*:: null)) {(-1);return; }");
tryItOut("with(new \fconstructor.unwatch(\"prop\")(({constructor setter: [1,2,3,4].slice }), {})){return 3/0;yield <x/>; }");
tryItOut("return;");
tryItOut("with({}) return  '' ;");
tryItOut("/*infloop*/do export *; while( /x/ );");
tryItOut("switch(+new (function  __proto__ () { {} } ).call()) { default: break; case 4: gc()case new Boolean(true): break; case (new gc(__parent__ = __iterator__.prototype setter= Math.pow)): /*infloop*/while(prototype)var __proto__;break; case 1:  }");
tryItOut("do \t{/*for..in*/L:for(var constructor in (function ([y]) { })()) export *; } while(((({prototype:  /x/ }))) && 0);");
tryItOut("/*for..in*/for(const __count__ = new (gc)(function ([y]) { }) in eval(\"false\", <x/>)()) /*for..in*/for(let prop = (yield __count__) in (function ([y]) { })()) {yield; }");
tryItOut("if(*::*) do {throw function ([y]) { };export *; } while((this) && 0);");
tryItOut("if(((new Function(\"/*infloop*/do {return <><x><y/></x></>; } while((-1));\")))( set __count__ __parent__ (constructor) { yield this >> 3.141592653589793 :: constructor = prototype } )) {switch(*) { default: break;  } } else  if (*.throw(<y><z/></y>).propertyIsEnumerable(\"__count__\")) {arguments;([z1]); } else {([]);let __proto__, __count__; }");
tryItOut("yield [,];");
tryItOut("L:if(window) { if (this) {window }} else ");
tryItOut("/*infloop*/L:for(prop.prop = (uneval(<x><y/></x>)); <><x><y/></x></> >= 3/0; 'fafafa'.replace(/a/g, [1,2,3,4].map)) {export __count__;if(//h\n<><x><y/></x></>) { } else let __count__, __proto__ =  '' ; }");
tryItOut("/*for..in*/for(const __count__ in ((function  __parent__ ( set prototype(__noSuchMethod__) { /*for..in*//* nogeckoex bug 349964 */L: for  each(var this.constructor in (uneval(null.watch(\"__iterator__\", (new Function(\"__count__, __noSuchMethod__;\")))))) if((033.prop) .@*:: (null)[033]) { if (RegExp()) {var <x><y/></x> = window, __iterator__ = this; }//h\n} else {let __proto__, __count__; } } , ({ constructor: __parent__ })) { yield ( \"\" .unwatch(\"constructor\")) } )((new (Function)((<x><y/></x>.(<x><y/></x>)) / __parent__.__noSuchMethod__ setter= eval)))))yield window;");
tryItOut("export *;");
tryItOut("/*infloop*/for(const __noSuchMethod__ = *::*;  /x/g ; <x><y/></x>) {yield;yield (function ([y]) { })(); }");
tryItOut("/*for..in*/for(prototype in []) { }");
tryItOut("L: false;");
tryItOut("/*infloop*/for( '' ; constructor.(delete yield undefined); new ((1 for (x in [])))()) constructor = <x/>, prototype;");
tryItOut("/*infloop*/M:for([__iterator__, , , ] = new Iterator(<><x><y/></x></>, window); __iterator__.prototype.yoyo([15,16,17,18].some((@foo).watch, <><x><y/></x></>)); this.zzz.zzz) {export __noSuchMethod__;continue M; }");
tryItOut("M:if(eval(\"let setter = @foo, __iterator__;\", eval(\"(0x99.__defineGetter__(\\\"prop\\\", Math.sin))\", @foo)).*) var function::__count__ = <><x><y/></x></>, __parent__ = prop; else  if (this.__defineSetter__(\"__noSuchMethod__\", function ()<y><z/></y>)) {default: with(new (function  __parent__ (prototype)[,])()){}break; {yield window; }case 4: continue ;\nbreak ;\nbreak; break M;break; case (yield __noSuchMethod__) , ((__count__)[this]): continue M;break; if(#2=({__parent__: function(id) { return id }})) {export __parent__; } else yield; }");
tryItOut("return;");
tryItOut("{<><x><y/></x></> }");
tryItOut("switch(this != __noSuchMethod__) { default: gc()break; gc()break;  }");
tryItOut("M:with(const __noSuchMethod__ =  /x/g )var __count__, prop;");
tryItOut("try { export *; } finally { const __parent__ = this; } ");
tryItOut("do {/*infloop*/L:for([15,16,17,18].sort(Math.pow, undefined); true(); yield <x><y/></x>) {; }/*infloop*/for(let __iterator__ = <y><z/></y>.isPrototypeOf(__count__); constructor = <><x><y/></x></>; (this.__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))))) gc() } while((( '' .throw((function ([y]) { })()))\n) && 0)\f;");
tryItOut("/*infloop*/L:for(const prop = 0; window; false) {null;gc() }");
tryItOut("/*infloop*/for(<y><z/></y>; <><x><y/></x></>; <><x><y/></x></>) ;");
tryItOut("/*for..in*/for(const __parent__ in \f<y><z/></y>--) {/*infloop*/while(__proto__)var \t__parent__ = __count__; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let prototype in (function ([y]) { })()) throw <><x><y/></x></>;");
tryItOut("yield [[]]\n/*for..in*/for(const (<x/> >>= <x><y/\f></x>)(<><x><y/></x></>.watch(\"function::constructor\", gc)) in 3/0 + window) {;gc() }");
tryItOut("throw StopIteration;");
tryItOut("try { with({}) export *; } catch(prototype) { throw <y><z/></y>; } finally { window; } ");
tryItOut("/*infloop*/while(prop = <><x><y/></x></>)__proto__, __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in new (<><x><y/></x></>)(<x><y/></x>, *).@*.isPrototypeOf((({ __proto__: constructor }) = ({ constructor: prop })))) if(eval(\"<y><z/></y>\", true)) export __iterator__; else {export *;throw __parent__; }");
tryItOut("do let prop = this; while((*::*.__defineSetter__(\"constructor\", {})) && 0);");
tryItOut("return; const \n__proto__;");
tryItOut("{let (__iterator__) { return <><x><y/></x></>; }({}).hasOwnProperty }");
tryItOut("yield;return;");
tryItOut("let ([] = @foo !== <><x><y/></x></>.prop = <x/>) { if(null) {yield; } else  if (<x><y/></x>) (new Function(\"[1]\")) }");
tryItOut("let __parent__ = <><x><y/></x></>;");
tryItOut("M:with({constructor: ({__count__: @foo})});");
tryItOut("export *;\n{}export prop;\n");
tryItOut("/*infloop*/for([11,12,13,14].filter; (let (prototype = *::*, __count__) (__proto__.@*)); __count__.yoyo(<x><y/></x>.watch(\"constructor\", (1.2e3).watch))) {gc() }");
tryItOut("switch(*) { default: throw window; }\n(__noSuchMethod__);\n");
tryItOut("L: /*for..in*/L:for(var constructor.__count__ = __parent__.__count__ in ((null | __iterator__)(({__count__: <x/> }).unwatch(\"prop\"))))return;([[]]);");
tryItOut("let(prototype) ((function(){this.zzz.zzz;})());");
tryItOut("M:if(-1) { if (.2) {return; }} else yield;");
tryItOut("yield;");
tryItOut("\n");
tryItOut("/*infloop*/for((__iterator__ for (__proto__ in  \"\" )); (new *::*); ( /* Comment */3)) {export __count__;; }var prototype\n");
tryItOut("return;");
tryItOut("if(!null) {yield; }");
tryItOut("/*infloop*/while(window for (prototype.prototype in false) %= __iterator__ = prototype)[,,];");
tryItOut("if(prop) with({prop: <><x><y/></x></>}){this;throw 0x99; }");
tryItOut("let (function::__iterator__ = ({__proto__: (<y><z/></y>.throw(*::*))}), __noSuchMethod__) { yield __noSuchMethod__; }");
tryItOut("if((__iterator__ =  \"\" )) { if (<x><y/></x> /=  /x/g ) yield <><x><y/></x></>;} else ;");
tryItOut("do prop; while(((this.throw(this))) && 0);");
tryItOut("/*infloop*/while([11,12,13,14].map){/*infloop*/for( /x/ .prop = __iterator__ = (-1); (__noSuchMethod__ = constructor)[, <y><z/></y>)]; __count__.__iterator__-= get __iterator__(__iterator__) { //h\nyield null } .eval( \"\" )) throw *::*;/*infloop*/do {throw null;; } while((new *())); }");
tryItOut("L:if((__proto__.(5.0000000000000000000000))) { if (<>constructor, __noSuchMethod__<x><y/></x></>.isPrototypeOf((1e4.watch(\"__iterator__\", (new Function(\";\")))))) {while((__parent__ = function(id) { return id }, constructor([[1]].__lookupGetter__(\"__proto__\"), __noSuchMethod__)) && 0)let (__iterator__) { prototype; } } else do {export *;(<><x><y/></x></>); } while((<x><y/></x>) && 0);}");
tryItOut("if(<x><y/></x>) { if ( '' ) {(this); } else function () { yield; } } const __parent__;");
tryItOut("let __iterator__ = *::*;");
tryItOut("let(prototype = #1= /x/ , prop) { throw StopIteration;");
tryItOut("while((((uneval((function(y) { yield y; yield  /x/ ;; yield y; }).call(false, *))))) && 0)const __iterator__ = prototype;");
tryItOut("__parent__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop.prop in true.valueOf(\"number\")) {;M:if( /x/g ) let __iterator__; }");
tryItOut("/*infloop*/for(__iterator__; eval(\"<><xxx>{__count__}</xxx></>\", ([] == prop)); __parent__|=<y><z/></y>[0/0] instanceof let (prop = this) this) eval");
tryItOut("let prop, __iterator__ =  /x/g ");
tryItOut("L: {return; }");
tryItOut(";");
tryItOut("if((uneval(4.))) {while((1e4) && 0)prop = <y><z/></y>; } else /*infloop*/for(constructor; new (function(y) { yield y; constructor;; yield y; })(); false) {{} }");
tryItOut("/*infloop*/for(const (__proto__\f) = false; (({ __proto__: ({ __count__: __count__, prototype: function::__parent__ }) }) = __proto__()); __count__ = typeof <x><y/></x>\n) {/*infloop*/M:for(__count__%= /x/g ;  /x/ .__defineSetter__(\"prop\", ({}).__lookupGetter__); this.throw(__noSuchMethod__)) ([1,,]); }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in <y><z/></y>) __parent__ =  \"\" ;");
tryItOut("switch(__noSuchMethod__) { case 0:  }");
tryItOut("if((function(q) { return q; }).call(<x><y/></x>, )) {prototype =  \"\" ;yield; } else  if (<x><y/></x>.(<><x><y/></x></>)) {yield ({a2:z2});break L; } else {yield;break ; }");
tryItOut("return let (__proto__ = ((*)[<x/>])) ({constructor: (<x/>.__noSuchMethod__)});");
tryItOut("var __noSuchMethod__ = null, prototype;");
tryItOut("{with({__count__: [,,z1]}){eval__noSuchMethod__; } }");
tryItOut("L:if((p={}, (p.z = (RangeError()))())) { if (*) const function::prototype; else {/*infloop*/do {break M;let __parent__ = <y><z/></y>; } while(this.__defineGetter__(\"prop\", Math.sin)); }}");
tryItOut("{ }");
tryItOut("if(new ([({a1:1})].some(function(y) { yield y; var prop, prototype = prop;; yield y; }))(__count__ = this)) {<x><y/></x>{}'haha'.split }\nyield 1e+81;");
tryItOut("while(([,]) && 0){continue M; }");
tryItOut("L:if([,,]--) {/*infloop*/.\nyield undefined; } else {\n const __noSuchMethod__; }");
tryItOut("L: M:if(<><x><y/></x></>) {throw #3={a:#3#};let function::prototype = [1,,]; } else { }");
tryItOut("export __proto__\n");
tryItOut("const constructor = <><x><y/></x></>;");
tryItOut("export prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("if((null++)) gc() else  if ((__iterator__ = *::*)) <x/>; else {return __proto__;return null; }\n");
tryItOut("let (__parent__ = (<><x><y/></x></>.__noSuchMethod__ = <x/> .@x:: prototype.__noSuchMethod__ = *), __parent__ = -(-0)) {  }");
tryItOut("M:if((__count__ = __parent__).valueOf(\"number\").eval((Object((yield [1]).propertyIsEnumerable(\"prop\"))))) {return; } else  if ((let (function::__parent__, __iterator__ = null) __count__: <x/>.yoyo([z1,,]))) L:with({__noSuchMethod__: (-1)}){export *;var prototype = function ([y]) { }; } else if(<xxx {__proto__}={function::__proto__|=*} />) gc() else yield ({a2:z2});");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut(" /x/ ;");
tryItOut("(<x><y/>\n</x>);");
tryItOut("let(__iterator__, constructor = <x><y/></x>) { const function::prop, __count__;");
tryItOut("{var prototype = <x><y/></x>, prototype = this\n }");
tryItOut("if(*) { if (((true.(false(true))) ? (({ prop: [<x><y/></x>, prototype, __count__, __iterator__], prop: [, , yield, prop] }) = <></><!--yy-->) : eval(\"__count__\", *.__defineGetter__(\"__iterator__\", <><x><y/></x></>)))) prop else M:if((undefined)(@foo, <><x><y/\f></x></>)) { if (({a1:1})) {__proto__ = prototype } else {;yield prop; }}}");
tryItOut("/*infloop*/M:while((p={}, (p.z = [window])())){[1,2,3,4].map }\n");
tryItOut("/*for..in*/M:for(var __proto__ = try { for(let y in []); } catch(__iterator__ if (function(){ /x/ ['__noSuchMethod__'] = __iterator__;})()) { let(({ __iterator__: constructor, prop: prototype }) = (1.2e3)()) ((function(){with({}) return <x><y/></x>;})()); } catch(__noSuchMethod__) { var   ; }  in <y><z/></y>) {yield; }");
tryItOut("{}");
tryItOut("with({}) x::constructor = __proto__;");
tryItOut("if(<!--yy-->) { if (Array()) { } else {throw <x><y/></x>;return constructor; }}");
tryItOut("prop = constructor;");
tryItOut("/*for..in*/for(var __count__ in <><x><y/></x></>) return;");
tryItOut("M:while((new (<><x><y/></x></>.watch(\"{}\", [1,2,3,4].map))(yield <><x><y/></x></>, undefined *= 1.3)) && 0);");
tryItOut("prototype = getter;");
tryItOut("switch((new Object())) { case 1: break; case 6: yield eval(\"<><x><y/></x></>\", *)\n; }");
tryItOut("/*for..in*/for(const ((prop = __noSuchMethod__))(__count__ = undefined) in ((__proto__ = <x><y/></x>)(__parent__)))let(constructor) ((function(){export __noSuchMethod__;})());");
tryItOut("/*infloop*/do with({}) { return function(id) { return id }; }  while((new ((function (__proto__, __proto__) { __iterator__ } ).apply)()));");
tryItOut("M:do constructor while(((({ set __count__ prop (prop, get) { gc() }  }))) && 0);");
tryItOut("let (({ __iterator__: ({ prototype: ({ __proto__: ({ __parent__: __proto__ }) }) }), __proto__: constructor }) = 'fafafa'.replace(/a/g, (033).__defineSetter__)\n, ({ __parent__: ({ constructor: \f({ __iterator__: __count__, __noSuchMethod__: __count__ }) }) }) = (window(*::*))) { false; }");
tryItOut("/*infloop*/for(var __parent__; __proto__|=1e81; try { export __count__; } catch(prop if __count__) { break L; } catch(__proto__) { yield 1e81; } finally { __iterator__ = .2, __parent__ = <><x><y/></x></>; } ) yield; const __parent__;");
tryItOut("yield <y><z/></y>");
tryItOut("switch(( \"\" .*) | ([, prop, __parent__, __parent__, ] = ( /x/  >>>=<x><y/></x>))) { default: case 7: break;  }");
tryItOut("with(this instanceof <x><y/></x> >>>=('haha'.split).apply){L:if(@foo >> __parent__) { if (new Function(1e4)) { } else {const __proto__;(prototype); }} }");
tryItOut("/*infloop*/while(033)let __noSuchMethod__;");
tryItOut("if(true && ({a2:z2})) (<x><y/></x>); else {const function::__proto__ = *::*;return; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("export x::constructor;\n{}\n");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in 1e4) {return *; } } while((( '' .yoyo(true))) && 0);");
tryItOut("try { with({}) { __count__ = __noSuchMethod__; }  } catch(__iterator__) { with({}) return; } ");
tryItOut("{/*infloop*/for(prototype = (__parent__ = <y><z/></y>); <x/>.__defineGetter__(\"__count__\", (new Function(\"throw 1.3;\"))); [<x/>].map((Math.pow).call)) {continue L; }if(( ''  .@x:: <x><y/></x>)) { if ([[1]] <= __iterator__) var __proto__;\t} else <x><y/></x> }");
tryItOut("yield x><y/></x>\n");
tryItOut("yield 3.__defineGetter__(\"__proto__\", Math.sin);");
tryItOut("L: {/*infloop*/L:do {var __count__; } while( \"\" ); }\n/*for..in*/M:for(__proto__ in ((((( /x/g ).watch).call).call)(*::*))){Function }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <><x><y/></x></>) { }");
tryItOut("let(each, prototype = [,,z1]) ((function(){yield __proto__ = *::*(constructor = *,  '' );})());");
tryItOut("yield <><x><y/></x></>\n");
tryItOut("case 4: ((({__count__ getter: constructor })\f)).__defineSetter__default: break; case (let (__iterator__ = @foo, __proto__) false): {}\tbreak; case //h\n<><x><y/></x></> ? 1.3 : __iterator__: break; M:if(*::*) {continue M; } else  if (<><x>\f<y/></x></>) ");
tryItOut("true;");
tryItOut("gc()");
tryItOut("{with(true)break M\n__proto__ = *, __count__; }");
tryItOut("/*infloop*/do {; } while((undefined && <y><z/></y>)++());");
tryItOut("export *;");
tryItOut("/*for..in*/for(let [prototype, __count__] = (new (({a1:1})).__defineSetter__((function::__parent__ = prop), true)) in  /x/ ) {{var __count__, __iterator__ = [[]];break ; }prototype = <x><y/></x>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/L:for(__parent__ in (__parent__-=<x><y/></x>)) let __proto__, prop = *::*;");
tryItOut("if(__iterator__ = this += gc()) {; }");
tryItOut("const __count__ = __parent__, __iterator__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __proto__ =  \"\"  in  /x/ ) {yield;; }");
tryItOut("if((let (prototype = [<> /x/ </> for each (__iterator__ in  '' )], getter) (yield (new ({}).hasOwnProperty()) + __count__.constructor) / __iterator__.(this.__defineGetter__(\"__parent__\", 'haha'.split)))) yield;(__iterator__); else yield __parent__\nprop\n(undefined);");
tryItOut("{yield 1.3; const constructor;export __count__; }");
tryItOut("do {if(<x><y/></x>) { } } while((#0=true) && 0);");
tryItOut("if((({a2:z2}))) { if ((<y><z/></y>[4.].__proto__)) <x/>} else {throw prop;yield *::*; }");
tryItOut("if((new ([,,])(<x><y/></x>.hasOwnProperty(\"__proto__\"), this))) {gc()\nyield this;\n<xxx {__count__}={({ set __count__()({a2:z2}),  set __iterator__ constructor ()<x/> })} /> }");
tryItOut("/*infloop*/M:do {prop; while/*\n*/(*::*.eval(({ set __parent__ __proto__ (__iterator__) { yield new ([1,2,3,4].slice)() }  })));");
tryItOut("");
tryItOut("with({}) {  } ");
tryItOut("L:if(#3={a:#3#}) export __proto__;gc()");
tryItOut("if((uneval(<><x><y/></x></>)) %= ({__parent__ getter: Math.pow, x::__noSuchMethod__: <x><y/></x> }))  for each (__noSuchMethod__ in undefined) for each ([] in <x/>) if (([window].unwatch(\"function::prototype\")))");
tryItOut("L:if(.@*) export __iterator__; else  if ((this.zzz.zzz)) <><x><y/></x></>; else {return ;/*for..in*/for(var [constructor, prop] = <x><y/></x> in undefined) {__iterator__; } }");
tryItOut("do var constructor = __count__, __parent__ = *::*; while((__parent__|=<><x><y/></x></>) && 0);");
tryItOut("export __iterator__;");
tryItOut("return;");
tryItOut("do {export *; } while((constructor = new ('haha'.split)(0/0)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in window __count__ ) {yield [,,];var __count__ = -1, constructor = <><x><y/></x></>; }");
tryItOut("/*infloop*/do M:with({__count__: (+ /x/g )}){L: gc()let (__noSuchMethod__ = window) { export prop\n } } while(<>(<y><z/></y> if ( /x/g ))</>[ '' .__proto__]);");
tryItOut("/*for..in*/for([function::__proto__, constructor] = <x/> in new (function  prototype (constructor, __parent__) { return __parent__ } )()) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in window) constructor;");
tryItOut("with({}) with({}) { return; } ");
tryItOut("/*infloop*/L:for(__parent__ = prototype = prototype--; (); (new (function(q) { return q; })((constructor), (this.__defineGetter__(\"default: case 2: __proto__break; case 8: break; case 5: \", function (constructor) { return * } ))))) {let __noSuchMethod__, __parent__; }");
tryItOut("switch(delete window) { default:  }");
tryItOut("with((<><x><y/></x></> % undefined && <y><z/></y>.__lookupGetter__(\"__noSuchMethod__\"))--);");
tryItOut("/*infloop*/while(((yield <x/> ^= this)))export constructor\nvar prop = __proto__;");
tryItOut("if((<y><z/></y> %= <><x><y/></x></>)) {} else {prototypeconstructor = ({a1:1}); }");
tryItOut(";");
tryItOut("/*for..in*/for(const __count__ = <><x><y/></x></> for (__proto__ in this) in this) {(1 for (x in []))throw 3.141592653589793; }");
tryItOut("/*infloop*/while(@foo)/*for..in*/for(let (constructor)(<><x><y/></x></>) in this) (@foo);");
tryItOut("for(let y in []);");
tryItOut("switch([15,16,17,18].some(((__parent__ = prototype)).watch, (constructor = {}))) { default: break;  }");
tryItOut("/*for..in*/for(let prototype in [,,z1]) {Math.pow }");
tryItOut("export __parent__;prototype;");
tryItOut("/*for..in*/for(prop.__count__ in (((continue ))(let __count__ = (-1), __proto__;)))/*for..in*/L:for(__noSuchMethod__ in __parent__ = <><x><y/></x></>) /*infloop*/do {} while((1e81.__lookupSetter__(\"prototype\")));");
tryItOut("break ");
tryItOut("L:while(((gc())) && 0){if( /x/ ) { if (<x><y/></x>) __count__} else {return;; }/*infloop*/do *::*; while(__parent__); }");
tryItOut("/*for..in*/for(const constructor in ((function  prototype (({ __proto__: __count__ })) { yield (!#1#) } )(throw true)))break ;");
tryItOut("let(constructor = -3/0[*::*], (__iterator__ = <x><y/></x>) -= __parent__ = <x><y/</x> = var prop = #1#, __count__) ((function(){ /x/ ;})());");
tryItOut("let ([] = this) { /*for..in*/for(let [prototype, __count__] = this.__defineSetter__(\"function::__noSuchMethod__\", *) in u) {/*infloop*/L:for(<x/>; <x><y/></x>; *::*) (<><x><y/></x></>); } }");
tryItOut("/*for..in*/for(var ((void prototype)(<x><y/></x> ? <x><y/></x> : this)) in ((gc)(([15,16,17,18].sort([1,2,3,4].slice, [1]) .@x:: eval(\"<y><z/></y>\", __count__)))))var __noSuchMethod__ = undefined;");
tryItOut("with(this.__defineSetter__(\"__parent__\", eval))throw StopIteration;");
tryItOut("while((__noSuchMethod__.__noSuchMethod__ getter= gc) && 0)/*for..in*/for(let [__parent__, __noSuchMethod__] = .2 in *) return;");
tryItOut("with((undefined)[__proto__ = (3.141592653589793)[this]]);");
tryItOut("/*infloop*/for(let __count__; <>(eval(\"Function\", [z1]))</>; <><ccc:ddd>yyy</ccc:ddd></>) {export __iterator__; }");
tryItOut("with({}) (__iterator__) = prop;");
tryItOut("/*infloop*/for(__proto__; window; <><x><y/></x></>) {return;function(y) { yield y; return [1];; yield y; } } const __noSuchMethod__;");
tryItOut("(#3={a:#3#});gc()");
tryItOut("switch(new ([[]])().*) { default: if(((undefined for (__noSuchMethod__ in arguments)).__noSuchMethod__)) /*for..in*/M:for([__noSuchMethod__, __noSuchMethod__] = * in false) {} else  if (@foo() < <y><z/></y>) {export *; }case 3: L: {; const __iterator__;; }break; case 1: break;  }");
tryItOut("do {return <x><y/></x>; } while((new (<x/>)((prototype)[window], true)) && 0);");
tryItOut("var constructor");
tryItOut("if(prop = <><x><y/></x></>.yoyo(([15,16,17,18].some(function(y) { yield y; ;; yield y; }, (uneval(*::*))).watch(\"constructor\", Math.sin)))) {return @foo;(<><x><y/></x></>).__defineSetter__ } else  if (<y><z/></y>) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <y><z/></y>) var __noSuchMethod__ =  '' ; } else ({}).__lookupGetter__");
tryItOut("{return; }");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/while(#1#){(<><x><y/></x></>);yield *; }");
tryItOut("/*for..in*/for(let __proto__ = (p={}, (p.z = (void false))()) in (let __iterator__ = *)) (-1) = function::({ prototype: constructor });");
tryItOut("/*infloop*/do {if(__noSuchMethod__) {var __proto__;let prop, constructor; } else  if (033) yield; } while( /x/g .propertyIsEnumerable(\"constructor\"));");
tryItOut("/*infloop*/while((uneval(({})))){if(this if (__count__)) throw <><x><y/></x></>; else let constructor; }");
tryItOut("/*for..in*/L:for(var new this().__noSuchMethod__ in ((function  __parent__ (__iterator__, [, ({ prototype: prop })]) { yield (this.zzz.zzz)[__iterator__ = <x><y/></x>.(__count__)] } )(new function  prop (__proto__, __parent__) { yield  /x/g  } ()[(function ([y]) { } - #1#)] ? ((/a/gi)(<><x><y/></x></>)) >> 0 : new (Math.sin)((__proto__ = __proto__), @foo)))){/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in *::*) propM:if( '' ) { if (<><x><y/></x></>) {{} } else yield;} }");
