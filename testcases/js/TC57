
tryItOut("do {let __parent__;{} } while(((p={}, (p.z = -3/0)())) && 0);");
tryItOut("M:if(__parent__ =  \"\" ) {1e4 } else export __proto__;");
tryItOut("L: yield\nreturn;\n");
tryItOut("M:if([11,12,13,14].sort) {{{}yield; } } else {/*infloop*/for(const ({ prop: yield }) = !window; prototype = (<x/> ^ [,,z1]); new (Math.sin).call()) gc()\nyield 0;\n }");
tryItOut("let (__parent__) { /*for..in*/for(const __proto__ = (#0=[@foo]) in *::*) ( '' );\nif(true) { if (function ([y]) { }) {yield @foo; } else __parent__, __parent__ = 4.;}\n }");
tryItOut("if([[[1]]]/*\n*/) { if (Boolean(<x/>)) [1]; else {const __noSuchMethod__; \"\" ; }}");
tryItOut("{/*infloop*/M:while( \"\" ){gc()yield; }break M; }");
tryItOut("prop = <><x><y/></x></> + null--;");
tryItOut("gc()\nif(false) this; else  if (<><x><y/></x></>) export *;");
tryItOut("/*infloop*/for(let ({ constructor: ({ __proto__: (\f{ prototype: prop, constructor: prototype }), prop: [({ prop: ({ constructor: __count__ }), __parent__: ({ __proto__: prop, __iterator__: prop }) }), ({ __noSuchMethod__  { return function(id) { return id }; } : __parent__, __iterator__: [, ] }) prop = <x><y/></x>, , , prototype] }), prop: ({ delete: ({ prototype: [let, , prototype, []], __parent__: __noSuchMethod__ }) }) }) = __count__ = 1e-81; yield null.__lookupGetter__(\"constructor\"); (this.__defineGetter__(\"\", [1,2,3,4].map))) {<x><y/></x>yield  \"\" ; }");
tryItOut("/*infloop*/L:do {{} } while(#1=[#1#]);");
tryItOut("export *;M:if(<x><y/></x>) { if (1.3) { }} else {export function::__iterator__;export *; }");
tryItOut("/*for..in*/for(const __proto__ in ((function  prop (__parent__) { return new (<x><y/></x>)() } \t)((prop = function(id) { return id }) <<= (undefined.unwatch(\"__proto__\")).__lookupSetter__(\" '' .prototype\"))))<x/>;");
tryItOut("export *;\nexport *;\n");
tryItOut("/*infloop*/for(var ({ constructor: [__iterator__], constructor: __iterator__ }) = (~undefined); *::*; eval(\"return;\\n{}\\n\", (constructor = <x><y/></x>))) {return *::*;(__parent__); }");
tryItOut("");
tryItOut("do {export *;M:with({__noSuchMethod__: (<y><z/></y>.__defineGetter__(\"prop\", *))})throw <><x><y/></x></>; } while(('fafafa'.replace(/a/g, [1,2,3,4].map) @ ().__iterator__) && 0);");
tryItOut("yield");
tryItOut("throw StopIteration;");
tryItOut("yield __count__ = false;");
tryItOut("/*for..in*/for(constructor(false) in ((<x><y/></x>.(<x><y/></x>))((Math.sin(1.3).valueOf(\"number\"))))){}");
tryItOut("({}).__lookupGetter__<><x><y/></x></>");
tryItOut("/*for..in*/for(let constructor in ((Math.pow)(let (prototype) <x/>))){gc()yield; }\n");
tryItOut("yield ({a2:z2})\nexport __parent__;");
tryItOut("do __parent__ while((<x><y/></x>) && 0);");
tryItOut("break M;\nexport *;\nswitch(0x99) { default: let __parent__ =  '' , __noSuchMethod__ = #1=[#1#];break; undefinedbreak;  }");
tryItOut("L:if(__proto__) { if (prototype) yield <x><y/></x>; else {/*for..in*/for(__count__ in true) {let __count__, __proto__;<x><y/></x>; }continue ; }}");
tryItOut("while(('fafafa'.replace(/a/g, ((function (__noSuchMethod__, prototype) { gc() } ).apply).call)) && 0);");
tryItOut("return *::*;");
tryItOut("switch(__parent__ = <x><y/></x> .@*:: typeof {}) { default: L:while(() && 0){([1]);throw (-0); }break;  }");
tryItOut("export *; const __count__;");
tryItOut("if((this.__defineSetter__(\"prototype\", Math.sin))) { if (function (__parent__) { L:with({prop: (<y><z/></y>.__lookupGetter__(\"prototype\"))}){; } } ) return <x/>; else if(new __noSuchMethod__.prototype.__count__()) { if ((false ? __proto__ : <x><y/></x>--)) {undefined; }} else {*::*; }}");
tryItOut("L: {L:while((<x/> <= __noSuchMethod__) && 0)(case (this/.(\"__noSuchMethod__\", function \t(__parent__) { return .2 } )): break; );do <y><z/></y>; while((({a2:z2})) && 0); }");
tryItOut("let(constructor = <bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>) ((function(){for(let y in [5,6,7,8]) try { export *; } catch(__parent__) { (@foo); } finally { yield; } })());");
tryItOut("yield (this.zzz.zzz);");
tryItOut("{;yield __proto__;L:if(constructor) yield <x/>; else  if (0/0) {break ;return; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__iterator__) in [,,z1]) {let __proto__ = <x><y/></x>; }");
tryItOut("[1,2,3,4].map");
tryItOut("if(({a2:z2})) <ccc:ddd> </ccc:ddd>");
tryItOut("export prop;\nexport prop;\n");
tryItOut("/*infloop*/L:for(const constructor = (({ constructor: __proto__, prototype: __proto__ }) = __count__ = {}); new (function  __noSuchMethod__ (__noSuchMethod__) { const prototype = null, __iterator__; } )(__count__ = __noSuchMethod__); ++(prop = \f__parent__).unwatch(\"prop\")) {gc(); }");
tryItOut("/*for..in*/for(let prototype in ((function (({ prototype: __parent__ }), <><x><y/></x></>)eval(\"var x::__iterator__ =  /x/g , __parent__ = true;\", 1.3))(new Date()))){throw \tfunction ([y]) { }; } const __parent__;");
tryItOut("with({}) return  '' ;");
tryItOut("/*infloop*/M:for(prop = <x><y/></x>.*\n; (null.constructor = <><x><y/></x></>); this.__proto__) {continue ; }");
tryItOut("let ([, [, , , ], [, , prototype, , __proto__], ]) { break ; }");
tryItOut("if(new <><x><y/></x></>(<><x><y/></x></>, this)) yield;");
tryItOut("/*for..in*/L:for(const [__iterator__, getter] = (<zzz>window</zzz> if (*::*)) in  '' \n) L:if(<x/>) { if (window += <x/>) (__iterator__); else gc()}");
tryItOut("/*infloop*/do {[1,2,3,4].slice } while(__parent__);");
tryItOut("var __count__;");
tryItOut("constructor\nreturn null;");
tryItOut("if(null - window) {const __proto__, __noSuchMethod__;(__count__); } else  if (([<><x><y/></x></>])) {export *; } else //h\n{let __parent__ = [1,,], __parent__ = this; }");
tryItOut("return <x><y/></x>;\n/*infloop*/do {continue M; } while(__proto__( /x/ ));\n");
tryItOut("/*infloop*/do {export *;function () { gc() }  } while(new (uneval(this))(let (__proto__) this));");
tryItOut("with({prop: [15,16,17,18].sort((<x/>).__defineSetter__, prototype)}){break M;gc() }\n{}\nreturn <y><z/></y>;");
tryItOut("if(0.1) if([ \"\" ].__defineGetter__(\"__proto__\", undefined)) { if ((1e+81['__noSuchMethod__'] = eval(\"<y><z/></y>; const __count__;\", <></>)))  /x/ ;} else {gc()gc() } else  if ([prototype >=  ''  for each (__iterator__ in [z1].isPrototypeOf(constructor))]) /*infloop*/for(__proto__; (window instanceof function ([y]) { }); prototype = <x/>) (gc).apply else {with(*::*.propertyIsEnumerable(\"__parent__\")){let prop = <x><y/></x>; }{[1,2,3,4].slicecontinue L; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<employee id=\"1\"><name>Joe</name><age>20</age></employee> in new function(y) { yield y; false;; yield y; }(prop, #3={a:#3#}).isPrototypeOf( /* Comment */<y><z/></y>)) /*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in constructor) {return;export prop; }");
tryItOut("M:if(*::* !== *::*) { if (<x/>.yoyo(false)) {;<><x><y/></x></> } else function  prop (prototype) { return <x/> } }");
tryItOut("L:do {{}export *\n( /x/ ); } while((new 'haha'.split(#0=<x/>.unwatch(\"prop\"),  /* Comment */__noSuchMethod__.constructor = <x><y/></x>\f)) && 0);");
tryItOut("try { 'haha'.split } finally { yield __proto__.constructor = let (__count__) <x><y/></x>; } ");
tryItOut("L:do {{} } while((<><!--yy--></>) && 0);");
tryItOut("if([@foo.isPrototypeOf() for each (__parent__ in  '' )]) {var __parent__ =  /x/g ; } else {return;(gc).call }");
tryItOut("L: throw 1.3;");
tryItOut("/*for..in*/for(var __count__(new Math.sin(<y><z/></y>)) in ((([15,16,17,18].filter((1 for (x in [])), [,])).watch)(__count__.prop = (+<x><y/></x>)))){return window;yield; }");
tryItOut("/*for..in*/for(const [__count__, prototype] = (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.( for (prop in this))) in this.__defineGetter__(\"__iterator__\", function  constructor (constructor, prop) { yield <x><y/></x> } )) {}\t");
tryItOut("yield -1;");
tryItOut("while((new ((({ get __iterator__(prototype)__parent__, __count__: __proto__ })).watch(\"__parent__\", (true).__defineSetter__))()) && 0){throw .2; }");
tryItOut("with(([,,z1].prop = undefined)){if(__parent__.__count__ getter= eval) with({__proto__: undefined.yoyo(*::*)}){continue ; }\n{yield;<x/>\nswitch(033) { default: (<><x><y/></x></>);break; case  /x/ : return <x/>;break;  } } }");
tryItOut("do {{}return <><x><y/></x></>; } while((( for each (__proto__ in @foo) for (__count__ in <y><z/></y>)[<x><y/></x>])) && 0);");
tryItOut("throw [15,16,17,18].sort(\f(constructor).watch, *)\n");
tryItOut("/*for..in*/for(var [prototype, __proto__] = ((uneval(this.__defineGetter__(\"__proto__\", [1,2,3,4].map)))) in (('haha'.split).call( '' , )).isPrototypeOf((<><x><y/></x></>.prop))) /*infloop*/do [__parent__] while([this for each (__parent__ in null)]);");
tryItOut("L: /*infloop*/for(__proto__; ((yield 1.3)); __proto__ = <x><y/></x>) {return; }");
tryItOut("/*for..in*/L:for(var (constructor.prop) in (((new Function(\"let ( '' .hasOwnProperty(\\\"__count__\\\")) { if(<><x><y/></x></>) {export __noSuchMethod__; } else yield\\n; }\")))((Date((yield *),  \"\" )).unwatch(\"__count__\"))))/*infloop*/do {__iterator__ = <><x><y/></x></>, __iterator__ = <><x><y/></x></>;\t } while(prototype);");
tryItOut("with({}) for(let y in []);");
tryItOut("if((<x><y/></x>.(<y><z/></y>))) continue ; else function::constructor");
tryItOut("return;");
tryItOut("return <><x><y/></x></>;");
tryItOut("/*infloop*/for(( /* Comment */window *= prop.watch(\"prototype\", /a/gi)); (<x><y/></x>.throw(<x/> @ default: yield;break; export *;break; )); <><><><x><y/></x></></\f></>) {export __parent__; }");
tryItOut("/*for..in*/for(const __iterator__ = [ \"\"  || *::*].map((function ([y]) { })()) in *::*) {return; }");
tryItOut("while(((({}) %= <><x><y/></x></>)) && 0){yield;{var prototype, __noSuchMethod__; } }__noSuchMethod__ = __noSuchMethod__;");
tryItOut("while(((uneval(__parent__)).__defineGetter__(\"__iterator__\", Function)) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>) *::*\nyield; }");
tryItOut("L:with((false().@*))<><x><y/></x></>;");
tryItOut("/*for..in*/for(const function::__parent__ in this) break M;");
tryItOut("return\n/*for..in*/for(prototype in prop) {const __proto__ = constructor;let __count__ = null, prop; }");
tryItOut("L:if(<><x><y/></x></>.throw(3.141592653589793)) gc() else {(<y><z/></y>);var constructor = window; }\r");
tryItOut("for(let y in [5,6,7,8]) with({}) this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in [z1]) {(this # ; }");
tryItOut("//h\n__count__ = prop;");
tryItOut("throw constructor;");
tryItOut("with({constructor: eval(\"const __iterator__, prototype = <x/>;\", this)})return;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = [11,12,13,14].map in prop, prototype) {let (__noSuchMethod__) { ; }export *; }");
tryItOut("switch(\n ''  @ *::*) { default: yield\n__parent__;break; /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) {}return; }");
tryItOut("let([prop]) ((function(){with({}) { for(let y in [5,6,7,8]) throw StopIteration; } })());");
tryItOut("if(*) {if(new <x><y/></x>) throw __proto__; else  if ((function::__count__%=(this.__defineGetter__(\"__iterator__\", new Function)))) {export __count__(<><x/*\n*/><y/></x></>).__defineSetter__ } else prototype; }");
tryItOut("let x::__parent__;");
tryItOut("M:if(((__parent__ = ({ constructor: __parent__, (new Function)(<x><y/></x>, __noSuchMethod__).__noSuchMethod__: [[, , , constructor]] })).__defineGetter__(\"__iterator__\", [1,2,3,4].map) / (constructor.prototype).hasOwnProperty(\"prop\"))) { if (*.__defineGetter__(\f\"__iterator__\", Math.sin)) {M:if(new ( '' )()) return; else  if (@foo = -3/0) (<x><y/></x>); else {yield *; } } else if((function(y) { yield y; throw 3.141592653589793;; yield y; }(<x/>)) ? (case 6: break; default: break; .valueOf(\"number\")) : (<x><y/></x>.(window))) { if (null .@x:: [,,z1] &= 'fafafa'.replace(/a/g, /a/gi)) with(k)} else {yield; }}");
tryItOut("/*infloop*/L:while(yield this.@foo)try { ; } catch(__proto__) { let __noSuchMethod__ = window, prototype =  /x/g ; } finally { function  constructor (constructor, __noSuchMethod__) { yield <x/> }  }  = *::*;");
tryItOut("do with(<x/>){yield __proto__;const __parent__ = *; } while((<x><y/></x>Math.pow) && 0);");
tryItOut("\tif(0x99 == [[]].eval(__proto__)) { if (this.__defineSetter__(\"__noSuchMethod__\", gc)) /*for..in*/for(var [prototype, __parent__] = (__noSuchMethod__.__parent__ = this) in @foo) {let prototype, __parent__ = prototype;if(#1#) { if (<><x><y/></x></>) prop = constructor; else {break ; }} } else {yield; }}");
tryItOut("{let prop = __noSuchMethod__, prototype = this; }");
tryItOut("/*infloop*/L:do var __count__ = true, __proto__; while(*.prototype);");
tryItOut("if(-- '' ) {export *;/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in 3/0) {(__iterator__);return {}; } } else with( \"\" ){{}export function::__proto__; }");
tryItOut("export __iterator__\nyield null;");
tryItOut("with({prop: [1]})if( /x/ ) {}");
tryItOut("M:if((new [1,2,3,4].slice())\n) {__proto__ = *::*, __parent__ = window;L: {(<x><y/></x>);throw \t<x><y/></x>; } }");
tryItOut("/*infloop*/for((true && undefined); \n(window)[3]; __noSuchMethod__ =  /x/g ) {<><x><y/></x></>;export __iterator__; const __proto__; } const constructor;");
tryItOut("/*infloop*/for(let( = __parent__.__noSuchMethod__ setter= function  __parent__ () { yield <y><z/></y>; } ) { throw StopIteration; = (__count__.(__parent__)); (new Function()); <y><z/></y> .@*:: <><x><y/></x></>.yoyo(__parent__.__noSuchMethod__ = ((null)[ /x/g ]))) {/*for..in*/for(const __proto__ in (((<><x><y/></x></>).call)(window))) /x/ ;yield undefined; }");
tryItOut("switch(( /x/ )[(-1)]) { default: case 5: /*infloop*/for(prototype; (__parent__); ) <x/>case 7: case *:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.prop in .2.yoyo(1e+81).isPrototypeOf(([1,2,3,4].slice).apply(yield 0.1 instanceof this))) with({constructor: null--})yield;");
tryItOut("let (__noSuchMethod__ = <><> </></>) { var __count__ = *::*, __iterator__ = #1#; }");
tryItOut("{L:with({constructor: null})__iterator__, prototype = __parent__; const __noSuchMethod__;export *\n }");
tryItOut("for(let y in [5,6,7,8]) yield constructor;");
tryItOut("switch((prop|=1e81).@*) { default: {3; }break;  }");
tryItOut("export *;");
tryItOut("if(4.) prop: (prop = *::*) .@ new [1,2,3,4].slice(null) else let __iterator__;");
tryItOut(" { return (yield  /x/ ) } ");
tryItOut("while((null) && 0)const __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("if([__proto__, constructor] = [*::*].filter(eval)) throw ( \"\" )(<y><z/></y>); else {*; const __iterator__;return; }");
tryItOut("/*for..in*/for(const [__iterator__, __count__] = yield ({ prop: function::constructor, __noSuchMethod__: constructor })try { {} } finally { (function (__proto__, __proto__)<><x><y/></x></>).apply } <><x><y/></x></>  { yield prop-=this }   in new (({}).hasOwnProperty)((*::* - -1[<x><y/></x>.__defineGetter__(\"__iterator__\", (new Function(\"__proto__ = <x><y/></x>;\")))]))) if( \"\" .isPrototypeOf((({prototype: (<y><z/></y>++)})))) {+if(<x><y/></x>) { if (<y><z/></y>) {yield; } else {[[]]; }} } else  if ('haha'.split()) {export *;const constructor = <y><z/></y>; }");
tryItOut("/*infloop*/for(new (<x><y/></x>.__lookupGetter__(\"__parent__\"))(__noSuchMethod__, null); (window ? function(q) { return q; }() : <x><y/></x>); ) {{@foo;yield __proto__; } }");
tryItOut("/*for..in*/for(var [__proto__, __iterator__] = ( /* Comment */this) in <x><y/></x>) {; }");
tryItOut("while((this) && 0)export constructor;");
tryItOut("let (__count__ = [,].__defineSetter__(\"__iterator__\", Math.sin), prop = <y><z/></y>) { yield __noSuchMethod__\nreturn; }");
tryItOut("let ([({ __parent__: prop }), ({ __proto__: [, constructor, [prop, [, [], , [constructor, prototype, ]]], , constructor.__parent__], __parent__: [, , , ] }), , ] = new (<x/>.eval(__count__)).watch()) { while(((return <x><y/></x>)) && 0){const __iterator__; } }");
tryItOut("__iterator__ = __parent__;");
tryItOut("with({__proto__: @foo /  '' })gc()");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = prototype.constructor.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty) in (new Function()).__noSuchMethod__) /*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in  '' ) getter");
tryItOut("if((yield (function ([y]) { })())) if((__iterator__ = window.*).@foo) (3.141592653589793); else  if (__count__ = <><xxx {__count__}={(p={}, (p.z = *::*)())} /></>) throw window;");
tryItOut("if('fafafa'.replace(/a/g, function  prototype (constructor, prop) /x/g )) { if ((undefined)[__count__]) export *;} else {__proto__ = <y><z/></y>;return; }");
tryItOut("true;\nyield *;\n");
tryItOut("L:if((function(id) { return id }.__parent__.@foo)) {}");
tryItOut("for(let y in []);");
tryItOut("L: \t(__iterator__).__defineSetter__");
tryItOut("const *, prototype setter: (new Function(\";\"));\n;\n/*for..in*/for(var __parent__ = ([15,16,17,18].sort((new Function(\" '' ;\")), undefined)) in __parent__ === * .. (({__count__: [,,z1]}))) M:switch(__proto__) { case 0: break; case function(id) { return id }: default: evalbreak; case 7: gc()case ({}).hasOwnProperty: yield [[]];break; case 9: yield;break;  }");
tryItOut("with({}) throw constructor;");
tryItOut("M:if( '' .watch(\"__noSuchMethod__\", ({}).__lookupGetter__)) {let(__count__) ((function(){this.zzz.zzz;})());let (constructor = 1.2e3, __noSuchMethod__) { return; } }");
tryItOut("if(*) {(<><x><y/></x></>);prop; } else  if ( '' .\r__lookupSetter__(\"__parent__\")) {(<x><y/></x>); }");
tryItOut("const __noSuchMethod__, __count__;");
tryItOut("if(*::*) {return; } else throw <><x><y/></x></>;");
tryItOut("if(@foo) { if (function ([y]) { }) } else {}\n");
tryItOut("return <>yyy</>;");
tryItOut("M:switch(__iterator__ = <><x><y/>\t</x></>) { default: break; break; case 1: {export *; }break;  }");
tryItOut("with({prototype: ((function  __proto__ () { (\tyield;).call } ).call)})throw <><x><y/></x></>;");
tryItOut("if(<x><y/></x>) {} else  if ( '' ) {let __iterator__; } else {(window);prop = undefined; }");
tryItOut("switch(__iterator__.__noSuchMethod__ getter= ({}).hasOwnProperty) { case 3: do ; while((<x><y/></x> = null.*) && 0);case 0: __count__ = ({a1:1}), prop = <x><y/></x>;break; break; return __parent__;break;  }");
tryItOut("with(this.__defineSetter__(\"__noSuchMethod__\", ( \"\" ).watch)){export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in <x><y/></x>) {break M; }");
tryItOut("let __count__; const __iterator__;");
tryItOut("while((<y><z/></y>.@*) && 0)L:  get __parent__ prop (__noSuchMethod__, __proto__) { yield __proto__ if (@foo) } ");
tryItOut("if( '' .*) { if (__proto__[new Function((this ? false : <><x><y/></x></>), 3.141592653589793)])  else ({});}\n");
tryItOut("let (({ prototype: __count__ })) { L: {(0.1); }constructor }\nif(\nfunction::__proto__) {gc()yield; } else  if (({constructor: <y><z/></y> }).unwatch(\"constructor\")) with( \"\" ){gc() } else /*infloop*/M:for(var yield =  '' ; *::*; <x>yexport prototype; ></x>) (this);");
tryItOut("if(((@foo for each (__count__ in <><x><y/></x></>)))) yield;");
tryItOut("M:if(prototype(this)) default:  else {yield;var prop; }");
tryItOut("do {/*infloop*/for(prototype; <x><y/></x>; null) {case  \"\" : export *;case window: break; continue ; }throw  /x/g ; } while(((delete = __iterator__)) && 0);");
tryItOut("with({(new Array((<><x><y/></x></>.__defineGetter__(\"prototype\", ((__proto__)).watch))))(([])()--): (__parent__.constructor)}){for(let y in [5,6,7,8]) with({}) (<><x><y/></x></>).call }");
tryItOut("window const prop;");
tryItOut("while((new (null)((<x><y/></x>.(window)), window)) && 0){gc()\nreturn;\nvar __proto__ = [1]; }");
tryItOut("gc\n__parent__");
tryItOut("return;");
tryItOut("L:if(new function(y) { yield y; with({__parent__: <><x><y/></x></>})(1e+81);; yield y; }()) {if(<x><y/></x>) ; else  if (<x><y/></x>) {export __count__;(new Function).apply }/*for..in*/for(const __iterator__ = yield #1=[#1#] in 1.3) {; } } else  if (('fafafa'.replace(/a/g, [1,2,3,4].map)).constructor) gc() else {export constructor;yield __proto__ = *; }");
tryItOut("let (prop, prop) { ; }");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("return  \"\" ;return  \"\" ;");
tryItOut("L: {yield; }");
tryItOut("let (__iterator__) { (<><x><y/></x></>).watch }");
tryItOut("{M:switch(<y><z/></y>) { case 7: export prop; } }function  __noSuchMethod__ (__count__) { yield false } ");
tryItOut("");
tryItOut("/*infloop*/while( \"\" ){<x><y/></x>.__parent__ }");
tryItOut("if(new ( '' )(function ([y]) { }).__defineSetter__(\"__proto__\", 'haha'.split).valueOf(\"number\")) { if (RangeError()) {export *; }} else yield <>var __parent__ = <y><z/></y>;</>;");
tryItOut("/*infloop*/L:for(<><x><y/></x></>.hasOwnProperty(\"__iterator__\"); (yield <y><z/></y>).__iterator__; window.throw(window)) __iterator__;");
tryItOut("if(({ constructor: prototype, __noSuchMethod__: __iterator__ }) = (@foo - 1e81)) {var __proto__, __count__;const __proto__, constructor = <><x><y/></x></>; } else  if (new RegExp()) yield; else ");
tryItOut("let(prototype, prop = setter = [1]) {  if (window)do {throw  /x/ ;export constructor; } while((<x><y/></x>) && 0);");
tryItOut("if(((yield <x><y/></x>))) { if ((__proto__ = @foo)) gc()} else {__count__, __parent__;let each, x::prop = <x><y/></x>; }");
tryItOut("/*infloop*/for((new (yield)(__proto__.(let (__proto__ = 0/0, constructor = window) <><x><y/></x></>))).__defineGetter__(\"__parent__\", 'haha'.split) ? (p={}, (p.z = (new (this)(false)))()) : __proto__; (prop) = <x><y/></x>.__defineGetter__(\"__parent__\", function(y) { yield y; let __parent__, constructor =  \"\" ;; yield y; }); ((function () { yield null } ).isPrototypeOf(( /x/ .watch(\"__proto__\", ({}).hasOwnProperty))))) /*for..in*/for(let __noSuchMethod__ in <x><y/></x>) return;");
tryItOut("__parent__ = __parent__;");
tryItOut("yield function(id) { return id };");
tryItOut("L: {with({}) try { ; } catch(__noSuchMethod__ if (function(){<x><y/></x>;})()) { (<x/>); } catch(__proto__) { return; } let (({ prop: prototype, prop: __count__ }) = <x><y/></x>) { prop } }");
tryItOut("*if(<x><y/></x>.(0)) {export *; }");
tryItOut("/*infloop*/while(new [1,2,3,4].slice(this.__defineSetter__(\"prototype\", function  prototype (__count__) { {} } ), __iterator__ = *::*)){yield <x><y\f/></x>; }");
tryItOut("__proto__, prototype =  /x/ ;");
tryItOut("if(prop%= /x/g .@foo) (constructor); else  if ([15,16,17,18].filter(gc, <x><y/></x>)) { } else /*infloop*/while(@foo){try { const prop = ({a1:1}); } catch(prop if -1) { let * = <y><z/></y>; } catch(constructor) { export prop; } finally { {} }  }");
tryItOut("/*for..in*/for([__count__, prototype] = prototype in 1e81) {{} }");
tryItOut("");
tryItOut("let (prop) { L: {export __proto__;return; } }");
tryItOut("gc()__noSuchMethod__;\t");
tryItOut("let (({ __iterator__: ({ __count__: __noSuchMethod__, prop: constructor }), __noSuchMethod__: ({ __count__: ({ __parent__: [__count__] }) }) }) = __noSuchMethod__ = <x><y/></x>.isPrototypeOf(0)) { if(<x/>) yield; else {return <x/>;yield; } }");
tryItOut("yield __parent__ = __count__.prototype setter= (new Function(\"window;\"));");
tryItOut("/*infloop*/while((p={}, (p.z = this.__defineGetter__(\"__noSuchMethod__\", (@foo).watch).eval(new __noSuchMethod__(<x/>).__proto__ = (this.zzz.zzz)))())){return __count__ = undefined /= <x><y/></x>;throw <x><y/></x>; }");
tryItOut("/*for..in*/L:for(let __proto__ = __proto__ = @foo++ in constructor = *::*.eval(<x><y/></x>)) {L: {export *;break L; } }");
tryItOut("if(((yield null))) { if (__iterator__ = window) export *; else {throw false; }}");
tryItOut("while((#1=[#1#]) && 0)gc()");
tryItOut("if(([window :: <y><z/></y>])) { if (new (-1)()) {{} }} else prop: __proto__.__proto__ = __count__");
tryItOut("throw false;");
tryItOut("/*for..in*/for(const [({ __proto__: __parent__, __proto__: __iterator__ }), , ({ __count__: __noSuchMethod__, prototype: prototype }), [prop, prototype, ], ] in ((.eval(new (new Function)(3)))(((__parent__.(__parent__))[[[]].map(\x7F)]))))(new Function(\"var __parent__, __proto__;\"))");
tryItOut("/*for..in*/for(let __proto__ in prop) {{} }");
tryItOut("switch(1e81) { case [15,16,17,18].map(<x><y/></x>, this): /*infloop*/do {let __proto__, __parent__ = true; } while(<><x><y/></x></>);break; if(window) yield;break; case  /x/ .__lookupGetter__(\"prototype\"): (<x><y/></x>);default: yield;\nyield <x><y/></x>;\nbreak; case [false] % \n__iterator__: break; /*for..in*/for(var constructor in (((this).__defineSetter__)(<x><y/></x>)))yield @foo;break;  }");
tryItOut("if([* for each (__parent__ in [[1]])]) let __proto__ = __proto__; else  if (((<x><y/></x>)(0x99))) {export *; }");
tryItOut("/*infloop*/do yield arguments; while(__iterator__)\n");
tryItOut("throw __count__\n;");
tryItOut("while(('fafafa'.replace(/a/g, *)[function::prop--]) && 0){gc()/*for..in*/for(var constructor = __parent__ in [z1,,]) {; } }");
tryItOut("function::__parent__ = function::__iterator__;");
