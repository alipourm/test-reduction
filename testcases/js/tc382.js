tryItOut("if(eval(\"gc()\",  \"\" ).propertyIsEnumerable(\"__parent__\")) { if ((<xxx>{__proto__}</xxx>.propertyIsEnumerable(\"null\"))) {const __noSuchMethod__; } else {if((1e-81 !== [[1]])) {return; }; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <x><y/></x>) export *;\n{}\n");
tryItOut("with({prop: ([<x/>].sort(Math.sin))[(__proto__ = [1])]}){var __noSuchMethod__ = *;__count__, prop =  '' ; }");
tryItOut("/*infloop*/do export *; while(1.2e3.isPrototypeOf(<y><z/></y>));");
tryItOut("/*for..in*/for(const constructor in ({__proto__.__iterator__: (new String()), prop getter: new Function })) {while((prototype) && 0)yield;/*infloop*/while(constructor.constructor ? __proto__ = <y><z/></y> : *(*))export setter; }");
tryItOut("gc()");
tryItOut("with({__parent__: <><x><y/></x></>}){return false; }");
tryItOut("{}");
tryItOut("/*for..in*/M:for(prop in (((1 for (x in [])))(eval(<x><y/></x>, <><x><y/></x></>).hasOwnProperty(\"__proto__\"))))if([(<><x><y/></x></>.prototype)]) {<x><y/></x> }");
tryItOut("throw prototype\nexport *;");
tryItOut("L:if((false | #3={a:#3#}) /= 'fafafa'.replace(/a/g, function(y) { yield y;  { ; } ; yield y; })) {gc()function  __proto__ () { (@foo); }  } else /*infloop*/for(let prototype = true; typeof this; [this]) {; }");
tryItOut("/*for..in*/L:for(const [__parent__, constructor] = export * in prototype.hasOwnProperty(\"constructor\")) {(undefined); }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in ((function(q) { return q; })(\n__iterator__)))\t{yield;({}).__lookupGetter__ }");
tryItOut("switch( /x/g ) { case 5: break;  }");
tryItOut("/*for..in*/for((*::*.__lookupSetter__(\"prototype\"))([11,12,13,14].some) in this.zzz.zzz >= <><x><y/></x></>.isPrototypeOf(<y><z/></y>)) (((new Function(\"break ;\"))).call).apply\nlet prop, __noSuchMethod__ = <><x><\fy/></x></>;\n\nreturn <x/>;");
tryItOut("M:if(yield ([11,12,13,14].some)) var __parent__; else  if (try { var constructor = __count__, __proto__ = __parent__; } catch(prototype) {  } finally { 4 } .__defineGetter__(\"__proto__\",  \"\" )\n) /*for..in*/for(var constructor in ((false)(yield <x><y/></x>))){export *;export *; } else {; }\n");
tryItOut(";L: const prop, __parent__ = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in (({__count__ getter: Math.sin, prop: (-0) })[(Function >= <x/>)])) {throw StopIteration;(0/0);/*for..in*/M:for(var prototype in (-1)) (__proto__); }");
tryItOut("if((*::* .@*:: (function ([y]) { })().watch(\"__proto__\", Function))) { if ('fafafa'.replace(/a/g, ({}).hasOwnProperty).__iterator__) {if(constructor) {continue L;return; } else  if (({a1:1})) [1,2,3,4].map else ({}).hasOwnProperty }} else throw *::*;");
tryItOut("switch(<x><y/></x>.unwatch(\"getter\")) { case <y><z/></y>: case (p={}, (p.z = <x><y/></x>)()): (<x/>); }");
tryItOut("if([[1,2,3,4].slice(<x><y/></x>)].some('haha'.split)) { if (yield <><bbb xmlns=\"this\"></bbb></>) throw @foo; else {; }}");
tryItOut("gc() const prop;");
tryItOut("if(<x/> > <><x><y/\t></x></>) {<><x><y/></x></>;undefined; } else  if (yield undefined) {yield; } else {return  /x/g ;(<><x><y/></x></>); }");
tryItOut("if( '' ) {this } else  if ( /* Comment */[15,16,17,18].filter(new Function, 3.141592653589793)\n) { }");
tryItOut("with({__noSuchMethod__: ({__parent__: null\r }) + 'fafafa'.replace(/a/g, function (prototype, __parent__) { yield __count__ } )})if(false.__parent__) gc() else yield <><x><y/></x></>;");
tryItOut("L:if(<x><y/></x>) \f{ if (undefined) yield window;} else  /x/g ;");
tryItOut("L:if(prop) { if (((new ((1 for (x in [])))(\t)) <= #1=[#1#])) throw 3/0;} else __iterator__\nwith((uneval([<><x><y/></x></>].propertyIsEnumerable(\"__count__\")))){}");
tryItOut("{}\n{continue L; }");
tryItOut("/*for..in*/for(const __iterator__ in ((eval)((-1))))with({__count__: <y><z/></y>})return 033\n/*infloop*/while((({__noSuchMethod__ getter: (new Function(\"\")) }))){throw <><x><y/></x></>; }\n/*infloop*/M:for(var ({ constructor: prototype }) =  \"\" --; RangeError(); __count__.(window)) /*infloop*/for(<x><y/></x>; <><x><y/></x></>;  /x/ ) yield <x><y/></x>;\n");
tryItOut("/*infloop*/M:do {export *;; } while((window *= arguments));");
tryItOut("{with(window) }");
tryItOut("with({__noSuchMethod__: (let (constructor, __iterator__ = *::*) [,] ^ <><x><y/></x></>)}){yield [[]]; }");
tryItOut("/*infloop*/for(const (prototype) = ({ get __parent__(__proto__)(({prototype: ((@foo)[<y><z/></y>])})) }); __noSuchMethod__, constructor; new new Function(__count__ = *::*)) {/*for..in*/L:for(const prop in ((([1,2,3,4].map).call)((prototype.__proto__ = new (({}).__lookupGetter__).call(3/0, <><x><y/></x></>)))))(<><x><y/></x></>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ __count__  for  each(let __iterator__ in 1.3) {export __iterator__; } if(<y><z/></y>) throw 0;");
tryItOut("return;");
tryItOut("if((p={}, (p.z = (<x><y/></x>('fafafa'.replace(/a/g, ({}).hasOwnProperty), true)))())) {;M:if(<x><y/></x> , [z1,,]) {break ;yield; } else  if (__noSuchMethod__.prototype = <y><z/></y>) {gc() } else {throw false;yield; } }");
tryItOut("do return; while((true) && 0)\n(__iterator__);");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] = window in function::constructor) (true);");
tryItOut("with({__iterator__: __count__})continue ;");
tryItOut("let(__parent__ = (\n '' )) { let(default: gc() = #1=[#1#], __noSuchMethod__ = <><x><y/></x></>) { throw <x><y/></x>;");
tryItOut("L: {export *;return; }");
tryItOut("if(__noSuchMethod__ = (<x/>.__defineSetter__(\"__iterator__\", function  prototype (let, constructor) { yield this } ))) {;\twith([ /x/ ].some(function(y) { yield y; ; yield y; })){const __iterator__, prototype = <y><z/></y>; } } else  if (((__count__) = ((<><x><y/></x></>.propertyIsEnumerable(\"__count__\")) = <x><y/></x>))) while(((({constructor getter: gc }))) && 0)\n else return;");
tryItOut("{throw <><x><y/></x></>; }");
tryItOut("with({__noSuchMethod__: (p={}, (p.z = ((new ((1 for (x in [])))( /x/ , <x/>)) >>= ({__parent__:  '' ,  set prototype(prop) { yield  /x/g  }  })))())})if(<x><y/></x>) return null//h\n; else  if (<><x><y/></x></>) {export *; } else (new Function(\"window;\"))");
tryItOut("let (prop) { throw true;/*for..in*/for(let [prop, __iterator__] = <x><y/></x> in __count__) export __parent__; }");
tryItOut("export function::__proto__;");
tryItOut("while((__count__-=new Exception(<><x><y/></x></>, arguments)) && 0)/a/gi");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in (-0)) <x><y/></x>;");
tryItOut("/*for..in*/for(let __count__ = (typeof prop = <y><z/></y>.*) in ((undefined).call(*::*.__parent__ = __parent__, (\t[15,16,17,18].filter(/a/gi,  \"\" ))))) {const constructor = <x><y/></x>; }");
tryItOut("/*for..in*/for(let __iterator__ = null in prototype.unwatch(\"__parent__\") !== <y><z/></y>.__proto__) {(prototype);{} }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, function::constructor] = () in <x><y/></x>) switch(<y><z/></y>) { case <x><y/></x>: export *;break;  }");
tryItOut("if((this.__defineGetter__(\"__parent__\", gc))) {continue ; } else  if ([this for (prop in <x/>)]) var __parent__, prototype; const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __count__ in ( /x/ )()) with\r(false.isPrototypeOf( /x/ )){return;(<x/>); }L: yield;");
tryItOut("if(<x><y/></x>) return;");
tryItOut("if(({ __proto__: __proto__, prop: __iterator__ }) = [ ''  for each (constructor in <x><y/></x>\n)]) function (__proto__) { yield this }  else ({ __noSuchMethod__: ({ prop: prop, constructor: __parent__ }), __count__: constructor })");
tryItOut("gc()");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = <><x><y/></x></> >>= ({a2:z2}) in Iterator()) {if(<><x><y/></x></>) {break L; } else yield undefined; }");
tryItOut("L: gc()");
tryItOut("/*infloop*/while( \"\" ){let __iterator__ = <y><z/></y>; }");
tryItOut("{let constructor, __parent__ = false; }");
tryItOut("/*for..in*/for(const [constructor, prop] = (<x><y/></x> * [[1]]) ? __noSuchMethod__ = 4. : (uneval(-1)) in let (__parent__) <x/>) {{yield; }const constructor, __parent__; }");
tryItOut("/*infloop*/L:for(<x><y/>\r</x>; 1e4; false) { }");
tryItOut("({ __parent__: prop, __noSuchMethod__: (prop) }) = (Math.sin).call(0.unwatch(\"__noSuchMethod__\"), prop = 3, #1#)");
tryItOut("with({__iterator__: this.__defineSetter__(\"__noSuchMethod__\", propfunction (__noSuchMethod__, __iterator__)constructor)}){return 1e-81; }let(prop = ) { return;");
tryItOut("{/*for..in*/for([prop, __count__] = prop.get in  /x/g .yoyo(<x/>)) {/*for..in*/M:for(let prototype = @foo in 0x99) continue M; } }");
tryItOut("if(prop = <><x><y/></x></>) {return;; } else { }");
tryItOut("switch([, , , prop, __iterator__] = __proto__.function::constructor) { case 5: break; case this.__defineGetter__(\"prototype\", function(q) { return q; }) if (<><x><y/></x></> += this): throw 1.2e3;break; default: break; case 9: export __proto__;break; case 0: case 5: break; case 4: break; case ([ /x/ ]): if(*) {throw <y><z/></y>; } else  if (@foo) const __proto__ = <x/>, __count__; else export *;break; case (__parent__)(__iterator__):  /x/  }");
tryItOut("yield;");
tryItOut("{yield *;yield; }");
tryItOut("L: {}");
tryItOut("/*for..in*/for(var [] in __noSuchMethod__ = <y><z/></y>.__defineSetter__(\"__proto__\", function (__proto__)<><x><y/></x></>)) ");
tryItOut("L:if(let (__parent__, __proto__) ([15,16,17,18].some(new 'haha'.split([,,z1]), <><zzz> /x/g </zzz></>))) {__proto__ = function(id) { return id }, __noSuchMethod__ = __count__; } else  if ((yield (new (<x><y/></x>)(<x><y/></x>, <><x><y/></x></>)))) with(({a2:z2}).yoyo(0x99))throw <>/*\n*/<x><y/></x></>; else {{} }");
tryItOut("/*infloop*/for([, , __parent__] = (<x><y/></x>.(true)); <y><z/></y>.__lookupGetter__(\"__iterator__\"); this.watch(\"__iterator__\", gc) .. ((uneval(this)))) {yield;return; }");
tryItOut("__noSuchMethod__");
tryItOut("{const prop = 033;let prop = true; }");
tryItOut("let (__proto__) { gc() }\nlet prototype = (function ([y]) { })();\n");
tryItOut("if(let (__parent__) this) {}");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/while(new (<y><z/></y>)())return #1#;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:do {Math.sin } while(<x/>);");
tryItOut("{/*infloop*/M:while(false){}({ __count__: __proto__, <ccc:ddd><!--yy--></ccc:ddd>: __iterator__ }) }");
tryItOut("throw constructor;");
tryItOut("return __count__ = function(id) { return id };");
tryItOut("<y><z/></y>;");
tryItOut("if(<zzz>(function ([], __noSuchMethod__) { return null } )</zzz>) {if((true.yoyo(false))) { if ((prop = '<x><y/></x>)) /*for..in*/for(let [__count__, __count__] = [11,12,13,14].map in <x/>) <><x><y/></x></>; else var __noSuchMethod__ =  \"\" , __count__ = __count__;} } else  if (*::*) {return; } else yield;");
tryItOut("with({__iterator__: undefined})/*for..in*/for(*::*.prop in [,,z1]) {yield this; }");
tryItOut("/*infloop*/for(this.__defineSetter__(\"prototype\", Math.pow); <x><y/></x>.(*); constructor = <><x><y/></x\r></>) {export *; }");
tryItOut("/*infloop*/L:do {throw <x><y/></x>; } while(undefined);throw <x><y/></x>\nreturn __proto__\nFunction");
tryItOut("/*for..in*/for(getter = (([1,2,3,4].slice).call)(__parent__) in eval(\"(new Iterator(<x/>, <><x><y/></x></>))\", <x><y/></x> / undefined)) if(1e81) { if (let (prototype = undefined, constructor) undefined) gc()} else ;");
tryItOut("/*infloop*/do {/a/gireturn; } while(false.yoyo(false));");
tryItOut("if((({__noSuchMethod__: __count__.*}))) break ; else /a/gi");
tryItOut("/*for..in*/for(let __iterator__ in ((eval)((prop = ({ prop: case ([__parent__].filter(/a/gi) % eval(\"yield <y><z/></y>;\", ({a2:z2}))): /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  /x/g ) 'haha'.splitbreak; export __proto__;case 1: break; , __parent__: constructor }))\n))){<x><y/></x>yield  /x/ ; }");
tryItOut("with({__count__: new (eval)().isPrototypeOf(__iterator__.constructor\f)});");
tryItOut("return prop; const __count__;");
tryItOut("if([,,] .@*::  \"\" ) {continue L;return; } else  if (()) yield @foo;\f");
tryItOut("while((delete ( /* Comment */[,,z1])) && 0){if(((let)[@foo])) {(__proto__); } else  if (prop = null) {throw  /x/g ; } else {export *;(.2); } }");
tryItOut("/*for..in*/for(Math.sin in ((Math.pow)(typeof @foo)))gc()");
tryItOut("throw StopIteration;");
tryItOut("if(((Function)())) {{} }");
tryItOut("L: {{}return; }");
tryItOut("switch(<x><y/></x>) { default:  }");
tryItOut("export *;");
tryItOut("/*infloop*/M:for(__count__; try { with({}) { with({}) continue ; }  } catch(__parent__) { export *; } finally { with({}) { throw __count__; }  } ; (<\f><x><y/></x></>)(<x/>)-=<y><z/></y> != (\nthis)) let constructor = [,,], __count__ = *;");
tryItOut("'haha'.split");
tryItOut("if( /* Comment */null) {function  __count__ () { return *::* } \n0/0; } else  if (this.__noSuchMethod__ =  \"\" .unwatch(\"prototype\").hasOwnProperty(\"__count__\") ? (<x/> ?  /x/  : @foo.prototype) : (constructor(<><x><y\t/></x></>) = (this)(this))) L:if(<><x><y/></x></>) { if (this) {{} } else {return;; }}");
tryItOut("/*infloop*/for(var prototype( '' ) = (<y><z/></y> / [[1]]); #1# ? window : #1=[#1#]; []) ");
tryItOut("while((++false.yoyo(__parent__)) && 0)__iterator__ = true, __noSuchMethod__ =  \"\" ;");
tryItOut("if(window.__defineSetter__(\"__count__\", ( '' ).call).__lookupSetter__(\"__iterator__\")) { if (true.eval(false === <x><y/></x>)) continue ; else {if(window) {gc()function () { return <x/>; }  } }}");
tryItOut("return this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; });");
tryItOut("with(<>yyy</>)return (typeof __iterator__);");
tryItOut("if(\f(window.__lookupGetter__(\"__noSuchMethod__\").__lookupGetter__(\"@foo\"))) { if ( /* Comment */(yield ({__proto__ setter: eval })).eval(-1 :: this.__lookupSetter__(\t\"prototype\").(yield 0.1))) [,,];} else {export constructor; }");
tryItOut("L: return;");
tryItOut("switch(let (let) (var __count__)) { case (033.hasOwnProperty(\"prototype\")) >> __count__.constructor getter= 'haha'.split >>>=(p={}, (p.z = <x><y/></x>)()): break;  }");
tryItOut("\n//h\n");
tryItOut("{}throw <><x><y/></x></>;");
tryItOut("return <x><y/></x>");
tryItOut("if((eval(\"let __noSuchMethod__ = <x><y/></x>, x::prop = <><x><y/></x></>;\", (this.__defineSetter__(\"__count__\", (1 for (x in []))))))) const constructor = this.*, prop");
tryItOut("{return [1,,]; }");
tryItOut("if(__proto__: <><x><y/></x></> != [prototype for (prop in 5.0000000000000000000000)] ? (<x><y/></x>)(window) : (<x><y/></x>[__parent__]) if (__parent__)) { if (__parent__.function::prop getter= function  __parent__ (__parent__, prop)(__count__ = [z1,,])) {let __iterator__ = window, __iterator__ = false; } else {switch(<><x><y/></x></>) { default: {}case 1: case 9: return __proto__;break; case [11,12,13,14].filter: break; @foo;case new Function: constructor = 0, __proto__;break; case 2: let prototype; }gc() }}");
tryItOut("/*infloop*/while(((<><x><y/></x></>).watch)()) for (constructor in undefined) for (__iterator__ in (new (__count__.__lookupGetter__(\"__parent__\"))(function(id) { return id }))) for (prototype in ((<x/>\f)[<><x><y/></x></>]).__defineGetter__(\"__count__\", gc)) for (__iterator__ in __iterator__ = \tconstructor) for (prop in [,,]) if (false)");
tryItOut("{;null }");
tryItOut("throw StopIteration;");
tryItOut("with/({setter: constructor = (__iterator__.__parent__)})yield\n");
tryItOut("{yield; ''  }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("if([<><x><y/></x></>prop]) while((prototype) && 0);");
tryItOut("/*for..in*/M:for(var prototype = (* === <><x><y/></x></>) in null\f) {\fyield __noSuchMethod__; }");
tryItOut("with(<y><z/></y> < <><x><y/></x></>.eval( /x/ )){L:do break ; while((null) && 0);continue L; }");
tryItOut("");
tryItOut("if(.__lookupGetter__(\"__parent__\")) export *; else {if(this) let __iterator__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(const prop in ((Function)(((({__iterator__: * })).@foo .@*:: __proto__.prop = ((true)[window] %= <><x><y/></x></>)))))while(((this.__defineSetter__(\"__count__\", __count__))++) && 0){gc()/*infloop*/for(const prototype; <x><y/></x>; <x><y/></x>)  }");
tryItOut("if(true) { if ( /x/ .__iterator__ &= <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {do {{}export __parent__; } while(((__count__ instanceof undefined)) && 0); } else export __parent__;}");
tryItOut("M:with(null << +<><x><y/></x></>(export *;, .2)){}");
tryItOut("/*infloop*/M:for(var __count__; [15,16,17,18].filter([11,12,13,14].map, (window\n.__defineGetter__(\"__parent__\", eval)) >>>=(__proto__.function::__proto__ getter= ((-1) for each (__iterator__ in <x><y/></x>)), <x><y/></x>)); constructor instanceof \tthis.__defineSetter__(\"__count__\", function  __iterator__ (__iterator__, __proto__) { gc() } )) (gc).call");
tryItOut("/*infloop*/M:for(var prototype; (({ set __noSuchMethod__ __noSuchMethod__ (__noSuchMethod__, __parent__)null, __iterator__: this\r })); 3/0) /*for..in*//* nogeckoex bug 349964 */L: for  each(var ( \"\" )( /x/g ) in  '' ) yield;");
tryItOut("with(\nundefined.hasOwnProperty(\"constructor\")){{throw *::*; }const __count__ = @foo, __parent__; }");
tryItOut("export __noSuchMethod__\nexport *;");
tryItOut("let (__count__, @foo) { /*infloop*/L:do  while(window); }");
tryItOut("if(__count__ = [11,12,13,14].sort) { if ('fafafa'.replace(/a/g, <><x><y/></x></>)) {export *; }} else {let function::__noSuchMethod__; }");
tryItOut("if((Function)) {yield <><x><y/></x></>\n }");
tryItOut("/*for..in*/for(var [constructor, __proto__] = prop|=({ prototype: prototype, prop: __proto__ }) = ({ __iterator__: constructor, __proto__: prototype }) in (__noSuchMethod__.__proto__.valueOf(\"number\"))) {const __noSuchMethod__ = __iterator__, __count__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(({__noSuchMethod__: @foo.unwatch(\"__count__\") }) in new [z1].valueOf(\"number\") %= (prototype for (__noSuchMethod__ in  /x/ ))(((1 for (x in []))).call('fafafa'.replace(/a/g, @foo), ), 'fafafa'.replace(/a/g, ({a2:z2})))) return [[]];");
tryItOut("/*infloop*/for(const constructor; <x><y/></x>;  '' ) {export __proto__; }");
tryItOut("/*for..in*/for(prop = <x><y/></x> in <><x><y/></x></>) window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in eval(\"<x><y/></x>.__noSuchMethod__\", __noSuchMethod__.(true))) {const prototype = window, __parent__;/*infloop*/while(prototype = *::*)var __noSuchMethod__ = __noSuchMethod__; }");
tryItOut("/*infloop*/for(let __proto__; let (__noSuchMethod__) <x><y/></x>; ({prop: ((window ^= )((new  /x/ ()), ))})) /*infloop*/L:for(<x><y/></x>; <x><y/></x>; null) { }");
tryItOut("with({}) let(prototype) { return;");
tryItOut("return <x/>;");
tryItOut("{{}{} }");
tryItOut("return (<><x><y/></x></>.prototype);");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: ({ __noSuchMethod__: ({ __noSuchMethod__: ({ prop: constructor }), __proto__: ({ __parent__: ({ constructor: __count__ }), __parent__: (__parent__); }) }) }) }) = __count__ = <x><y/></x> + Error(window); (<x><y/></x> ? yield window; :  { return __parent__ } ) ? #2=[(*)()] : <><x><y/></x></> in undefined; __parent__.__parent__ getter= (<x><y/></x>).watch) /*for..in*//* nogeckoex bug 349964 */M: for  each(({ constructor: prop }) in <x><y/></x> >>>=<x><y/></x>) /*infloop*/do { } while(3/0);");
tryItOut("if((function  prop (constructor) { yield prop / 1e+81 } )(eval(\"new new Function(let (try { (true); } catch(__parent__ if (function(){0.1;})()) { yield <x><y/></x>; } catch(prop if __count__) { return [[1]]; } catch(prototype) { __count__ = @foo, __parent__ = 3.141592653589793; } finally {  } ) <x><y/></x>)\", <y><z/></y>))) {(1.2e3); } else  if ((window.throw(undefined)).__proto__ = (<y><z/></y>()).yoyo(())) {return;gc() } else {prototype, __iterator__;const __count__ = __noSuchMethod__, __iterator__; }");
tryItOut("throw <x><y/></x>\n__parent__");
tryItOut("let (__count__) { if(__count__) {gc()export *; } else (false); }");
tryItOut("M:with({__proto__: Array(<x><y/></x>)})with(<><x><y/></x></>.hasOwnProperty(\"constructor\")){({a2:z2});gc() }");
tryItOut("export *;\ngc()\n");
tryItOut("/*infloop*/while((({}).hasOwnProperty).call(this, this))yield prototype");
tryItOut("/*infloop*/do {__parent__ = 0, __noSuchMethod__ = constructor;{} } while(false);");
tryItOut("with({__count__: <><x><y/></x></>\t.isPrototypeOf(this)})with(__iterator__){return <x><y/></x>; }");
tryItOut("throw StopIteration;");
tryItOut("if(prototype) {export *; }Function");
tryItOut("\fif([]) ([[]]); else  if (__count__.valueOf(\"number\")) export *; else continue ;");
tryItOut("break ;");
tryItOut("L:if(<x><y/\n></x> ^ window.__defineSetter__(\"constructor\", [1,2,3,4].map)) let __count__; else  if (( /* Comment */( '' .valueOf(\"number\")))) {<x/>; } else {export *; }");
tryItOut("/*infloop*/for(var __count__ = (.2.*).__proto__.isPrototypeOf((\n__iterator__)); __proto__; (((Function)(({a1:1}).__defineGetter__(\"__proto__\", ([1,2,3,4].map).apply), {})).watch).call(<xxx>{__iterator__}</xxx>, )) {const __count__;; const __iterator__;\nbreak L;\n }");
tryItOut("/*for..in*/for(let (__count__) in this.zzz.zzz) {export prototype; }");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = String(<x><y/></x>, *::*) in this.isPrototypeOf(3.141592653589793)) L:if(*::* += <x><y/></x>) {return;; } else export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in <x/>) { \"\"  }");
tryItOut("L:while((<x><y/></x> .@ <x><y/></x>) && 0){; const __noSuchMethod__; } const prototype;");
tryItOut("/*infloop*/for(var __count__ = @foo; __parent__; <x/>) /*infloop*/L:for(let ({ function::constructor: constructor }) = (<x/>.__count__); this.__defineGetter__(\"prop\", function  constructor (constructor) { yield  ''  } )(\nconstructor = *::*); [<><x><y/></x></> if (false)]) {return; }");
tryItOut("let (__noSuchMethod__, prototype) { (__proto__ = false) }\f");
tryItOut("M:while(((function  __parent__ (__iterator__)prototype)(<y><z/></y>)) && 0){break L;(eval).apply }");
tryItOut("{window;throw 1e4; }");
tryItOut("/*infloop*/for(false; <x><y/></x>; <y><z/></y>) {__parent__; }");
tryItOut("if(function(q) { return q; }()) {export __proto__;return; } else {({}).__lookupGetter__\nreturn; }");
tryItOut("let(__count__ = <x/>) { {}");
tryItOut("if(#1=[#1#].__count__) { if (__iterator__ = *::*) export __proto__;} else {/*infloop*/L:for(let __noSuchMethod__ = <x><y/></x>; function ([y]) { }; <y><z/></y>) export __proto__; }");
tryItOut("return let (__proto__, __parent__) @foo.eval(prop = prop, constructor) >>>=new Array(<><x><y/></x></>, this);");
tryItOut("let ([__parent__, constructor], constructor = <x><y/></x>) { var __noSuchMethod__; }");
tryItOut("if(undefined.propertyIsEnumerable(\"__proto__\")) { if (__count__--) {var __count__ = 1.2e3, prop;yield /*\n*/__noSuchMethod__ setter: Math.pow; } else {Function; }}");
tryItOut("{} const __count__;");
tryItOut("/*for..in*/for([__proto__, __iterator__] = [[]] in <><x><y/></x></>) ");
tryItOut("if( \"\" ) { if (this) {(1.3).watchyield; }} else {}");
tryItOut("/*infloop*/M:while(<><>([ /x/g ].filter(function(y) { yield y; return;; yield y; }))</></>){{} }");
tryItOut("/*for..in*/for(var prop = (__count__ += true) in eval(\"<x><y/></x>\", *::*)) if((-0)) {return  /x/g ; } else ;");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = ([,,z1](<x><y/></x>)).throw( \"\" .__defineGetter__(\"__parent__\", (new Function(\";\")))) in <x><y/></x>) yield\n");
tryItOut("yield (uneval(__proto__ *= window));");
tryItOut("__parent__: <y><z/></y>.@*");
tryItOut("var __proto__ = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ( /x/ .__proto__ = <y><z/></y>\r)(this) in eval(\"\", <x/>.isPrototypeOf((<x/>.valueOf(\"number\")).__lookupSetter__(\"prototype\")))) {throw StopIteration; }");
tryItOut("export *;");
tryItOut("return <><x><y/></x></>;\n(function(id) { return id });\n/*infloop*/do {const constructor = this;yield; } while(*::*); const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in  \"\" ) {export constructor; }");
tryItOut("/*for..in*/L:for(const __iterator__\f = false.__defineGetter__(\"prototype\", [1,2,3,4].slice).@foo in __iterator__ = __parent__) {with(({a1:1})){yield; }yield; }");
tryItOut("(<y><z/></y>);");
tryItOut("L:if([15,16,17,18].filter(function (prop, x::__noSuchMethod__) { let __proto__, __parent__; } , false)) { if (new (-3/0)(window)) yield @foo; const constructor; else {return; }}");
tryItOut("L\t:with({prop: (this.zzz.zzz)}){yield;if((3/0 in *)) { if (\fthis.__defineGetter__(\"prototype\", ([,]).watch)) {<x><y/></x>; } else ;} }");
tryItOut("continue ;\n{}\n");
