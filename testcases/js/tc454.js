tryItOut("if(((0x99)[window])) { if ((yield new (false)(this, (function ([y]) { })()))) {var __iterator__ =  \"\" , __noSuchMethod__ = *;; }} else export yield;");
tryItOut("throw prop;");
tryItOut("if({if(yyy) \f{var __count__, __iterator__ =  '' ;throw true; } else  if (3) export *; else (function ([y]) { });/*\n*/try { {} } finally { throw StopIteration; }  } <= __count__\f) return;\n;\n else  if ('fafafa'.replace(/a/g, yield;)) ;");
tryItOut("do {return;const __count__, __iterator__ = <><x><y/></x></>; } while(([<x><y/></x> for each (constructor in true)]) && 0); const __proto__;");
tryItOut("/*infloop*/L:do {export *;[1,2,3,4].slice\ngc()\n } while(__parent__|=<><x><y/></x></>.yoyo([15,16,17,18].sort(function(y) { yield y; return;; yield y; }, function ([y]) { })));");
tryItOut("/*for..in*/for(let __proto__ = (eval(\"<><x><y/></x></>\", <x><y/></x>)).valueOf(\"number\") in let (prototype = <x/>, __count__ = window) window ? 0/0 : window) {export *; }");
tryItOut("L:if((this.__defineSetter__(\"constructor\", (({}).__lookupGetter__).apply))) yield; else yield *;");
tryItOut("while(( /x/ ) && 0){<x/>;new Function }");
tryItOut("return;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __parent__, __iterator__: ({ prop: ({ __noSuchMethod__: __noSuchMethod__, prototype: [[__parent__, prototype, constructor, prototype], , [prototype, __parent__]] }) }) }) = eval(\"(prototype(this))()\", __proto__.constructor); <x/>; ((<x><y/></x> = *))[@foo.yoyo(window)]) __parent__");
tryItOut("with([,,])break ;");
tryItOut("L:if(({ set __parent__(__count__, __iterator__) { return /a/gi }  })) export constructor; else  if (this.__defineSetter__(\"__iterator__\", [1,2,3,4].map)) ;");
tryItOut("export *\n");
tryItOut("do {export __noSuchMethod__;return; } while((let (__count__) <x/>) && 0); const prototype;");
tryItOut("{L: {/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in *::*) undefined; } }");
tryItOut("{for(let y in []);{gc() } }");
tryItOut("do {yield @foo; } while((new window.__defineSetter__(\"constructor\", <y><z/></y>)()) && 0);");
tryItOut("return\n");
tryItOut("let (constructor) { let(this.__defineGetter__(\"__proto__\", function  __iterator__ () { return <><x><y/></x></> } ) = @foo) { let(({ prototype: [({ prop: constructor }), __noSuchMethod__, , ({ __iterator__: __parent__ }), ({ __iterator__: getter, __noSuchMethod__: __proto__ })] }), __count__ = 4.) ((function(){for(let y in [5,6,7,8]) prop = prop;})()); }");
tryItOut("if(((new ((window).watch)()) ? (false === this) : (uneval(null)))) { if ((prop.(1e81)).throw((-1)(__proto__, [,]))) {1.3; }} else yield <x><y/></x>;");
tryItOut("prototype = x::prototype;");
tryItOut("if(yield  { return __proto__ } ) {continue M;var prototype =  /x/ ; } else {break M;constructor; }");
tryItOut("yield;return function ([y]) { };");
tryItOut("if(constructor) {}\nif( ''  = (null.__defineSetter__(\"prop\", ({}).hasOwnProperty) instanceof (('fafafa'.replace(/a/g, (new Function(\"(<><x><y/></x></>).call\"))) || ([<x/>])).isPrototypeOf(__iterator__.__proto__)))) {/*infloop*/for(var __count__; <x/> | window; (__noSuchMethod__)) {return 0/0;export *; }export constructor;\n{}\n } else switch((<x/>)[__count__]) { case (this.__defineSetter__(\"__proto__\", function  __parent__ () { export \fprop; } )): gc() }\n");
tryItOut("yield ({__parent__: __parent__, __proto__\n: -1 });\nwith((<><x><y/></\fx></>.*))if((prop)(window, <x/>)) {throw this;let __count__ = (function ([y]) { })(); }\n");
tryItOut("L: if(window++) {var __count__ =  \"\" ;(1e4); }");
tryItOut("let(__proto__ = let (__noSuchMethod__ = <y><z/></y>, __count__) ([11,12,13,14].some)) ((function(){with({}) <x><y/></x>.prototype = prototype;})())\nlet \f__proto__ = undefined");
tryItOut("with({prop: 3/0})yield function ([y]) { };");
tryItOut("with({prototype: prototype.__proto__ setter= /a/gi.watch(\"__parent__\", function  __iterator__ (prop, __noSuchMethod__)(__noSuchMethod__ = 0x99 instanceof <><x><y/></x></>))}){<x><y/></x>;{}__noSuchMethod__ }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(prop in ({ __parent__: constructor }) = __iterator__ .. prototype) {\nyield;(window); }");
tryItOut("try { export *; } catch(prototype) { break ; } finally { {} } ");
tryItOut("with((prop(__count__(this &= undefined)))){(this);const __parent__ = <x><y/></x>; }");
tryItOut("/*for..in*/L:for(var __count__ in @foo) {return; }");
tryItOut("/*for..in*/for(__parent__ = <x><y/></x>.__lookupSetter__(\"try { yield *::*; } finally { throw  /x/ ; } \") in this) (-1);");
tryItOut("throw StopIteration;");
tryItOut("L:with({__parent__: ({ get prop(__iterator__, __noSuchMethod__) { yield (( /* Comment */false |= 1e+81) in typeof  /x/ .yoyo(<x><y/></x>)) }  })})throw false;");
tryItOut("");
tryItOut("let yield, __count__;");
tryItOut("export *;");
tryItOut("/*infloop*/M:for(const prototype; <>constructor</>; <><x><y/></x></>\t) throw __noSuchMethod__;");
tryItOut("L:if((({prototype: [11,12,13,14].sort, prototype: constructor.__noSuchMethod__\t setter= (('haha'.split).apply).call })))  /*infloop*/while  else  if (<zzz>*</zzz>.(new (null)(<y><z/></y>))) { } else ;");
tryItOut("with({prototype: function::__noSuchMethod__.eval([__count__.prop = 033//h\n])}){with({constructor:  \"\" \n}) }");
tryItOut("let (__count__ = false) {  '' ; }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ = (function (__parent__) { export constructor; } )() in <x><y/\f></x>) {Math.sin }");
tryItOut("for(let y in []);");
tryItOut("if(({}.unwatch(\"constructor\"))) {yield; }");
tryItOut("/*infloop*/do const prop = [,]; while((<><x><y/></x></> >= <></*\n*/x><y/></x></>));");
tryItOut("if([*]) {var prop = <x><y/></x>;; } else  if ((1.2e3() + ( /x/g .__iterator__))) {}");
tryItOut("let ([, ] = constructor//h\n = __parent__) { /*for..in*/L:for(const constructor in (((function (prop, prototype) { return * } ).apply)(__parent__.constructor setter= function  prototype () { return <x><y/></x> } ))){({}); } }");
tryItOut("/*infloop*/while([11,12,13,14].map)(new <><x><y/></x></>);");
tryItOut("while((((true.__defineGetter__(\"__count__\", ().apply))()).__defineGetter__(\"(new (function  prototype () { return *::* } )(@foo))()\", [1,2,3,4].slice) > __parent__.__noSuchMethod__ = <>yyy</>) && 0)/*for..in*/for(var __iterator__.__count__ in (uneval(null))) /*for..in*/L:for(var __count__ = yield false in window) return;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (('haha'.split)(Iterator(<><x><y/></x></>.eval(({a1:1}))))))<><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function(id) { return id }.prototype in eval) {const __iterator__ =  /x/g , constructor;if(<x><y/></x>) {{} } else  if (undefined)  }");
tryItOut("let (__count__) { ; }");
tryItOut("M:with( /x/g  - (-1).hasOwnProperty(\"prototype\").__lookupSetter__(\"__proto__\") / this.__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__).__lookupSetter__(\"__parent__\"))if(((eval(\"__proto__\", [[1]])))[true].unwatch(\"__count__\")) /*for..in*/L:for(var __count__ = 1e-81 in ({})) function  prop (__noSuchMethod__,  void )null else  if (( \"\" )() .@*:: null['__count__'] = this.__defineGetter__(\"prop\", function(y) { yield y; ; yield y; })) { }");
tryItOut("let (__count__ = this) {  }");
tryItOut("/*infloop*/for(let __iterator__; ([1,2,3,4].map).call; ((((({}).__lookupGetter__).call).apply).call(*, window[ '' ] for (prop.__count__ in <><x><y/></x></>) for each (__parent__ in <x><y/></x>), undefined))) {break M\n }");
tryItOut("/*infloop*/for( /* Comment */(null.prop)\n; *::* ^= #3={a:#3#} |= <x/>; __iterator__ = (#2=prototype.(<><x><y/></x></>)) if ([1,,])) /*for..in*/for(__proto__ in 4.) {(null);yield; }");
tryItOut("M:with({prototype: (function  prop () {  } (this.__defineGetter__(\"constructor\", [1,2,3,4].map), 0/0))})var constructor;");
tryItOut("if((constructor = this.__defineGetter__(\"__iterator__\", (new Function(\"function  __iterator__ (__noSuchMethod__)1e4\"))))) {null } else let setter = [[1]];");
tryItOut("switch((~(([z1,,] .. *) + (__noSuchMethod__.prototype)))) { default:  }");
tryItOut("if() {var constructor, __count__;{} } else (new Function(\"gc()\"))");
tryItOut("do throw *::*;return <y><z/></y>; while((~__noSuchMethod__.((#0=[ \"\" ]))) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(((p={}, (p.z = <xxx {__noSuchMethod__}={[<><x><y/></x></>.yoyo(this)]} />)()));  /* Comment */<><x><y/></x></>; Error()) {\tif([,,z1]) return;return; }");
tryItOut("if(({__iterator__: null })) {(<y><z/></y>);prop = <><x><y/></x></>, __iterator__ = this; } else  if ((__iterator__\n\f)) prop\n(<><x><y/></x></>);\n");
tryItOut("if((#3={a:#3#} >>> false)) export *; else  if (1e81 ||  '' ) (#1#);");
tryItOut("switch(eval(\"<x><y/></x>\", <x/>)) { case Function: var __count__ = __proto__;break; case constructor[true]: return __proto__\ngc() }");
tryItOut("export prototype;");
tryItOut("while((\nwindow.__parent__.@*) && 0){switch(this) { default: break;  }continue L; }");
tryItOut("with({}) { __proto__ = prop; } ");
tryItOut("/*infloop*/for(var __parent__; yield (*.__defineGetter__(\"prototype\", 4.))[(prototype =  \"\" )]; __iterator__ = *::*) {yield; const __iterator__; }");
tryItOut("export constructor;");
tryItOut("L: {let __proto__;yield; }");
tryItOut("/*for..in*/for(let [<><x><y/></x></>.__proto__, constructor] = this.zzz.zzz in constructor) {throw <y><z/></y>; const function::prototype; }");
tryItOut("((-0));/*infloop*/for( '' ; <y><z/></y>; true) constructor;");
tryItOut("/*for..in*/for(let prop in (((this).__defineSetter__)(<y><z/></y>))){throw function(id) { return id }; }");
tryItOut("if( \"\" ) { if (*) export *; else }");
tryItOut("if((<><x><y/></x></>.unwatch(\"prototype\"))) { if (<y><z/></y>.valueOf(\"number\")) {; } else {const __count__, __proto__ = <y><z/></y>;export *; }}");
tryItOut("do /*infloop*/do 1.3; while(([({a1:1})].sort('haha'.split))); while((__noSuchMethod__) && 0);");
tryItOut("if((__parent__.*)) {/*for..in*/for(const __noSuchMethod__ = this in [[1]]) yield;return; } else {L:do {;\nexport *;\n } while((new true.__lookupGetter__(\"__noSuchMethod__\")) && 0); }");
tryItOut("if((<y><z/></y> << ({ set __proto__() { return <x><y/></x> }  }))) \t{<><x><y/></x></>; }");
tryItOut("L:if(eval(\"var prop = arguments, __parent__;\",  \"\" ).yoyo(this.__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))))) {(__noSuchMethod__);throw .2; } else  if ((new function  __proto__ (constructor, __noSuchMethod__)<><x><y/></x></>(0x99))) ;");
tryItOut("M:if(eval(\"__proto__\", *::*)) throw <x><y/></x>; else  if ( '' ) {export __proto__;continue L; } else {*::*; }");
tryItOut("export *");
tryItOut("/*infloop*/do export *; while((String(( '' .throw(window)))) = [11,12,13,14].filter);");
tryItOut("/*infloop*/while(1e4){return __parent__; }");
tryItOut("/*for..in*/for(let ({ __count__: [, ], prototype: ({ prop: prop }) }) in \f((~-=<y><z/></y>).watch(\"__count__\", <y><z/></y>))) {prototype, __parent__ = @foo; const __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(var ({ __proto__: prop }) in ((([ /x/g  if (@foo)]))(new (1 for (x in []))((constructor))))\f) {return (({prototype: () }));switch(\n<y><z/></y> ? null : 1e4) { case 9: /*infloop*/L:for(__iterator__.__proto__; (prop & <><x><y/></x></>); __iterator__.isPrototypeOf(<x><y/></x>)) {/*\n }case 2: export *;case 4: /*infloop*/M:for(let __noSuchMethod__; false; __count__) {gc(); }break; default:  } }");
tryItOut("with((yield null)){ }");
tryItOut("return;");
tryItOut("if(eval(\"/*for..in*/M:for(__noSuchMethod__ in ((function ()*::*)(window)))throw <x/>;\", true.eval( \"\" ))) {yield *::*; } else  if (let (__iterator__ = <x><y/></x>, prop = <x><y/></x>) (-0)) export __noSuchMethod__; else {return [1]; }");
tryItOut("{export *;if(<x><y/></x>) {(__count__);function(q) { return q; } } }");
tryItOut("break M\n/*for..in*/for([\u2029, function::constructor] = (this.__defineSetter__(\"constructor\", Function)) in prototype) {(<y><z/></y>);{} }");
tryItOut("L:while((eval(\"\", <><x><y/></x></>)) && 0)throw *::*;");
tryItOut("do /*for..in*/for(try { yield function(id) { return id }; } finally { let prop = <><x><y/></x></>; }  in <><x><y/></x></>) {[1,2,3,4].slice } while((()) && 0);");
tryItOut("with({}) with({}) gc");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __proto__: ({ prop: prop.__parent__ }) }) = (new [z1]()).__iterator__ in ({__parent__: __count__.__count__, __iterator__: 'fafafa'.replace(/a/g, (prototype).__defineSetter__) })) with((Date((Math.sin).apply))){(<><x><y/></x></>);let __count__ = <x><y/></x>; }");
tryItOut("for(let y in []);");
tryItOut("yield *;");
tryItOut("while(( /* Comment */new Function( \"\" )) && 0){/*for..in*/for(const (__proto__) in 'fafafa'.replace(/a/g, (({})).__defineSetter__)) export *; }");
tryItOut("continue L");
tryItOut("__count__; const constructor;");
tryItOut("while(((__noSuchMethod__) = __count__ = prototype) && 0)break ;");
tryItOut("export __iterator__\n");
tryItOut("{export *; }");
tryItOut("/*infloop*/L:for(__iterator__; <> </>; (new (false)())) if(this) {{}var __noSuchMethod__ = get; }{}");
tryItOut("let (__proto__ = <><x><y/></x></>, prop) { export *; }");
tryItOut("/*infloop*/for(let prop; __iterator__.(<><x><y/></x></>.__lookupGetter__(\"__count__\")); new new Function([])['__count__'] = *::*) {let(prototype = , __noSuchMethod__) ((function(){yield (__proto__.__proto__ = __proto__);})());prototype = <x><y/><\f/x>\nreturn *::*; }\f");
tryItOut("/*infloop*/M:for(let __count__; yield (__parent__ for each (__parent__ in  /x/g )); new this\n.__lookupGetter__(\"__iterator__\")(yield {})) {break ; const __iterator__; }");
tryItOut("with(prototype.__iterator__ === function ([y]) { } << this)\n/*for..in*/for(var __proto__ in ((<><x><y/></x></>)(<y><z/></y>)))return this;\n");
tryItOut("/*infloop*/for(var ({ prototype: [, ({ __count__: ({ constructor: constructor }), __iterator__: ({ __proto__: prototype }) })] }) = 1.2e3.@*; __proto__; this.__defineGetter__(\"function::constructor\", function(y) { yield y; :; yield y; })) /*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in <><x><y/></x></>) {throw @foo; }");
tryItOut("/*for..in*/M:for((__parent__) in  /* Comment */[<x><y/></x>].filter(window)) var __count__, __count__ = function(id) { return id };");
tryItOut("gc()\n const prop;");
tryItOut("{return;window; }");
tryItOut("L:if(this.__defineSetter__(\"__iterator__\", function (__noSuchMethod__) { yield __noSuchMethod__.prototype getter= (__proto__).apply } )) { if (constructor >>= __proto__) {export __proto__;export constructor; } else {throw __iterator__; }}");
tryItOut("/*for..in*/L:for(let __parent__ in ((Math.sin)(undefined))){{}(<y><z/></y>); }");
tryItOut("/*for..in*/for(let constructor in (((eval).call)(( { (<x/>); }  = (undefined))))){var prop = <><x><y/></x></>; }");
tryItOut("throw false;");
tryItOut("throw <x><y/></x>;{}");
tryItOut(";\n/*infloop*/while(<x><y/></x>)yield <x/>\n\t\n");
tryItOut("/*for..in*/for(let [[[, , __count__], ({ constructor: ({ __parent__: __count__ }) }), ({ __proto__: ({ __noSuchMethod__: __count__ }) })], __proto__] = __proto__ = true % (#0=[ /x/ ]) in window.throw(({}))) export __noSuchMethod__;");
tryItOut("(window);gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [, ({ __proto__: constructor })] in true) /*infloop*/M:for((this.__defineSetter__(\"prototype\", function(y) { yield y; (function  function::__proto__ (__parent__) { yield <x><y/></x> } ).apply; yield y; })).__lookupSetter__(\"__noSuchMethod__\"); [(* == true) for each (prototype in <x><y/></x>) if (constructor)]; (__proto__+=false.prop = 0.1.__defineSetter__(\"__iterator__\", Function))) {/*infloop*/M:for(const __proto__; <x><y/></x>;  '' ) {{} } }");
tryItOut("do export *; while(((<> ''  *  /x/ </>.(__count__.prototype getter= eval -=  /x/g ))) && 0);");
tryItOut("/*infloop*/M:for(__iterator__; ({ set __count__(__count__) { ; }  }); (constructor.unwatch(\"__count__\"))) ;");
tryItOut("{/*for..in*/for(var [prop, __noSuchMethod__] = true in 4.) const prop = @foo;const prototype, __count__; }");
tryItOut("if(new ((1.2e3).watch)( \"\" , this)) (__noSuchMethod__);");
tryItOut("/*infloop*/L:for(({ prop: ({ __noSuchMethod__: __count__, __noSuchMethod__: __noSuchMethod__ }) }) = *; prototype = prototype\n; new (3/0)()) {(<><x>\t<y/></x></>); }");
tryItOut("/*for..in*/for(constructor = __proto__.__count__ = <y><z/></y> > __count__ = __count__ in this) {yield; }");
tryItOut("if(new Date(({constructor:  \"\" }), window)) { if ((p={}, (p.z = (#1=[#1#])[function::constructor])())) {const prop = 033; } else {throw __count__; }}");
tryItOut("return <x><y/></x>;");
tryItOut("/*for..in*/for(__proto__.prop = null.valueOf(\"number\") , (this.__defineGetter__(\"__parent__\", function (__noSuchMethod__)null)).//h\n__noSuchMethod__ in (((window)(<x><y/></x>)+=[,])((({ constructor: prop, __parent__: [] }) = (<y><z/></y>\n)))))/a/gi\nwith(3){yield @foo; }\n");
tryItOut("if((function ([y]) { })().throw(@foo)) { if (#0=({__noSuchMethod__: __parent__})) {} else throw *\n;}");
tryItOut("/*infloop*/while( /x/g ){break M; }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__noSuchMethod__\", Function))/*infloop*/L:for(var prop; (<><x><y/></x></> ? <x><y/></x> : *::*)[prototype = window]; <><x><y/></x></>.hasOwnProperty(\"__iterator__\") ?  /x/  ? <><\fx><y/></x></> : -0 : __proto__) {(__count__ = <x><y/></x>);if(true) { if (*) {}} else return; }");
tryItOut("return prototype.(__proto__.prop = <x/>);");
tryItOut("switch(<><x><y/></x></>) { default: break L; }");
tryItOut("return ({__parent__ setter: eval, __parent__: prototype });");
tryItOut("with({}) with({}) { try { [1,2,3,4].slice } finally { ; }  } ");
tryItOut("if(new (undefined.constructor)(__iterator__.(<y><z/></y>), var __count__ = *::*;) <<= (prototype = try { (window); } finally { continue M; } )) try { export *; } finally {  }  else {/*infloop*/do {yield; } while(<><x><y/></*\n*//x></>); }");
tryItOut("Math.pow");
tryItOut("\n{}\n");
tryItOut("with({}) { let prop = *::*; } ");
tryItOut("L:with(set.__noSuchMethod__.isPrototypeOf(__proto__.prop = *)\f)return <x><y/></x>;");
tryItOut("if((@foo.throw(null).__defineSetter__(\"__proto__\", \t/a/gi))) { if (return <><x><y/></x></> |= (null\n) | @foo) 'haha'.split else false;}");
tryItOut("/*for..in*/M:for(var [__proto__, (window != *::*)] = (<><x><y/></x></> >> undefined.yoyo(eval(\"<><x><y/></x></>\", <><x><y/></x></>)) ? [].hasOwnProperty(\"__noSuchMethod__\") :  /x/g  - __iterator__) in ([<x><y/></x>])) {switch(1e4) { case 3:  }const __iterator__, constructor; } const constructor;");
tryItOut("/*for..in*/for(var __proto__ in ((function  prototype (__proto__) { function(y) { yield y; export *;; yield y; } } )([])))let __parent__, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in -3/0) var __count__\n");
tryItOut("/*for..in*/for(__parent__ in -3/0) ;yield;");
tryItOut("{function  __iterator__ ()<x/> }");
tryItOut("/*infloop*/for( /x/g ; <y><z/></y>; -0) ;");
tryItOut("/*for..in*/for(let prototype in (-1).watch()) {if((* >>>  /x/g )) { } else  if (#2=({prototype:  /x/ })) break L;if((uneval(new <><x><y/></x></>))) let (__count__ = <x><y/></x>, prototype = <y><z/></y>) { yield <y><z/></y> } else  if (new ('haha'.split)( /x/  .@*:: <x><y/></x>)) { } else { { yield (yield <y><z/></y>\f) & prop = 3.141592653589793 } return; } }");
tryItOut("L:if(<x><y/></x>) { if (this.__defineGetter__(\"constructor\", new Function)) break L; else { }}");
tryItOut("/*infloop*/for\f(const ({ __noSuchMethod__: __count__, __proto__: __parent__ }) = __count__.__count__ = ((<x><y/></x> for (prop in ({a1:1})))); <x><y/></x>.watch(\"constructor\", [1,2,3,4].slice) |= [<x><y/></x>].__defineSetter__(\"__noSuchMethod__\", Math.sin); [z1]) /*infloop*/for(const __noSuchMethod__; ((eval(\"let __parent__ = @foo, __proto__ = undefined\\nreturn <x><y/></x>;\", undefined)))();  /x/ \n) { }");
tryItOut("if(new Date([z1,,])) {__proto__;export constructor; } else  if (this) {{}return constructor; }");
tryItOut("export *\n prototype throw <x><y/></x>;");
tryItOut("while(((typeof <x/>) & __iterator__ = [1,,]) && 0)yield [1,,];\n3.141592653589793;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in function ([y]) { }) {throw <x><y/></x>; }");
tryItOut("/*for..in*/L:for(const [__parent__, __proto__] = window.yoyo(<><x><y/></x></>) in <x/>) {/*infloop*/for(({ __noSuchMethod__: ({ __parent__: constructor, __iterator__: prop }), __count__.__count__: __parent__ }) = (({__noSuchMethod__: <x/>})); ( /x/g  << *) , ([[]] = <><x><y/></x></>); __noSuchMethod__) L: yield; }");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 1.3) {const __proto__ = *;export constructor; } } else {export *;let constructor = true, prototype; }");
tryItOut("/*infloop*/do {{} } while((prototype%=new Math.sin(<x/>)));");
tryItOut("while((<!--yy--> - (__parent__(true.prototype) = <><x><y/></x></>)) && 0)M:if(<!--yy--> @ constructor) (@foo); else  if ((\n(__noSuchMethod__ = constructor))) { }");
tryItOut("/*infloop*/for((__proto__.(@foo) << ({__proto__: window,  set __iterator__(prototype, __iterator__)window }));; 1e4.hasOwnProperty(\"constructor\"); case function(y) { yield y; /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in [1,,]) {( '' );return; }; yield y; }: break; default: L:do {{} } while((let =  \"\" ) && 0);break; case [11,12,13,14].sort: break; case new (prototype = __parent__.__lookupSetter__(\"constructor\"))(<><cccddd><ccc:ddd>yyy</ccc:ddd> with({}) with({}) return <x/>.unwatch(\" \\\"\\\" \");</ccc:ddd></>)\f: /*infloop*/do  '' ; while(<x><y/></x>);case 6: break; export __parent__;case 5: yield arguments;break; break; break; case 5: export __noSuchMethod__;) {yield; const __count__; }");
tryItOut("if((__iterator__ = *)) { if ( \"\" .__defineSetter__(\"__count__\", (__count__, constructor).__defineSetter__)) return <y><z/></y>; else {false; }}");
tryItOut("do yield __proto__; while((({__count__:  /x/ })) && 0);");
tryItOut("if( ''  || __iterator__) ({}).hasOwnProperty else ");
tryItOut("/*infloop*/for(let __proto__; __iterator__; (({__parent__: <x><y/></x>}).prototype)) __parent__;");
tryItOut("/*infloop*/for(window; this.zzz.zzz; this.zzz.zzz) var prop, __proto__;");
tryItOut(";");
tryItOut("M/*\n*/:do {(/a/gi).apply } while((constructor) && 0);");
tryItOut("return;");
tryItOut("do yield case <x><y/></x>: break; gc()break; default: <x><y/></x>;case __iterator__: <x><y/></x>break; case 3: case 0: break; ; while(((<x/> if (window ? ({}) : <x/>))) && 0);");
tryItOut("/*for..in*/for(let [__iterator__, prop] = (new @foo) in (((<x/>)(<x><y/></x>)) =  /x/g  if (prototype))) {if(false) {const constructor;throw #3={a:#3#}; } else \nlet __iterator__; }");
tryItOut("if(new RangeError()) {([z1,,]); } else  if (Function) {/*infloop*/while(-undefined){{} }export __parent__; } else if(<><x><y/></x></>) /*\n*/let constructor = __noSuchMethod__; else  if (prop) var constructor; else {yield; }");
tryItOut("with((uneval(-1))){yield; }");
tryItOut("let (__parent__,  /x/  =  /x/ ) { {{} } } const __count__;");
tryItOut("L: /*infloop*/for(var __count__ = [1.3]; function::__count__ = <x><y/></x>; #0=[__parent__].hasOwnProperty(\"constructor\")) return null;");
tryItOut("/*for..in*/M:for(const <x><y/></x> instanceof  \"\" ['prop'] in <x><\ty/></x>(__parent__, null)) {/*for..in*/for(const prop = (function  prop () { return <><x><y/></x></> } )() in __proto__+={}) {if(<y><z/></y> .@*:: *::*) { if (( /x/g )) {export *;let constructor = try { break M; } catch(__proto__) { ; } , __parent__ = true; } else return;} } }");
tryItOut("do {yield;throw window; } while(( /x/ .eval(this)) && 0);");
tryItOut("{yield;(((({})).apply).call).apply }");
tryItOut("L: throw window;");
tryItOut("/*for..in*/M:for(const [__parent__, prop] = null.watch(\"__count__\", <x><y/></x>) in (eval(\"__iterator__\", [[]]))) \nif(constructor) yield;");
tryItOut("/*infloop*/for(const prototype; <><x><y/></x></>; __iterator__) {continue M; }");
tryItOut("while((<xxx {constructor}={[[1]]} />.(<x><y/></x> & #3={a:#3#})) && 0){/*infloop*/while(<x><y/></x>)break M; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((function ( /x/g  ..  /x/ .eval(__count__)\t) { yield #1=({setter: @foo}) } )(new [[]]() .@*:: constructor.__noSuchMethod__)))let (prop = this) { __count__ = -1; }");
tryItOut("/*infloop*/do L: {[[1]] } while((Math.pow)[__noSuchMethod__ = @foo]);");
tryItOut("switch(<x/>.__noSuchMethod__ = <x><y/></x>) { case 6: constructorbreak; break; __proto__;gc();case -3/0(true, 3): gc() }");
tryItOut("M:if(<x/>) throw __count__;");
tryItOut("__noSuchMethod__.__noSuchMethod__ = __proto__;");
tryItOut("if(new <x><y/></x>(false.propertyIsEnumerable(\"__noSuchMethod__\"), new Number(@foo))) gc() else  if (<><>(uneval((+ \"\" )))</></>) {(({}).hasOwnProperty).callexport *; } else return;");
tryItOut("L:switch((__iterator__ = this)) { default: break; case 7: break;  }");
tryItOut("{{}const __noSuchMethod__; }");
tryItOut("try { var __iterator__, __count__; } finally { ; } ");
tryItOut("with({__iterator__:  /* Comment */<x/>})/*infloop*/L:for(let __parent__ =  \"\" ; <x><y/></x>; <><x><y/></x></>) {}");
tryItOut("var prop = false; const __noSuchMethod__;");
tryItOut("{const __iterator__ = <><x><y/></x></>;return; }");
tryItOut("if(\n*::*) { if (3) {export *;const prop; } else break ;}");
tryItOut("/*infloop*/for(__proto__; ((uneval(new Exception( /x/ , 3/0)))); (constructor-=<>[15,16,17,18].sort(<x><y/></x>, undefined)</>).call( /* Comment */(window if (<y><z/></y>)), gc, (eval(\"{}\", *::*)).__lookupGetter__(\"__iterator__\"))) <><x><y/></x></>;");
