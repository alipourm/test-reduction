tryItOut("if(constructor = __parent__) { if (__parent__) {export __count__; }} else L: {return; }\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var constructor in  '' ) {export *;gc() }");
tryItOut("/*for..in*/L:for'prop =  /* Comment */true++.__proto__ in eval(yyy, window( \"\" ,  '' ))) const ({ __parent__: prop, constructor: ({ __noSuchMethod__: __count__ }) });");
tryItOut("(window).apply\nexport *;");
tryItOut("yield __iterator__ = <><x><y/></x></>;");
tryItOut("return;");
tryItOut("/*for..in*/M:for(var prototype in (Math.sin)([], <x/>)) {/*for..in*//* nogeckoex bug 349964 */ for  each(yield <x><y/></x>; in false) export __noSuchMethod__; }");
tryItOut("gc()\n(<x/>);");
tryItOut("L: {with(*::* <= <y><z/></y>){return; } }");
tryItOut("if(prop = this) __iterator__ = <x/>;");
tryItOut("/*for..in*/for([<><zzz> /x/ .propertyIsEnumerable(\"__iterator__\"\f)\n</zzz></>, prototype] = ({ prototype: __noSuchMethod__, __count__: [] }) = prototype =  ''  in @foo.eval(null)) /*for..in*/for(var prototype = ({ let: constructor }) = constructor in @foo) {}");
tryItOut("L:if(this) {Math.sinconst __count__ = *, __noSuchMethod__ = <><x><y/></x></>; } else  if (<y><z/></y>) {yield this; }");
tryItOut("if(true , [,,z1]) { if () return true;} else {;break L; }");
tryItOut("try { throw StopIteration; } catch(constructor) { return; } finally { throw __count__; } ");
tryItOut("/*infloop*/for(__iterator__; (({ set __parent__ __proto__ (__proto__, __iterator__) { return (constructor = constructor) }  })).throw(([15,16,17,18].filter(gc, <y><z/></y>)) || __noSuchMethod__.(\"prop\")); @foo) ");
tryItOut("yield new Number();");
tryItOut("{}");
tryItOut("const __proto__, __proto__;");
tryItOut("do { \"\" ; } while((<x><y/></x>) && 0);");
tryItOut("return @foo;");
tryItOut("/*for..in*/for(let function::prop in ((function(y) { yield y; constructor = 1e81, __noSuchMethod__ = #3={a:#3#};; yield y; })(null))){yield <x><y/></x>; }M:if(default:  = \t<x><y/></x>) { if (__parent__.@*) {( /x/g );const prototype; }} else {var prop = *::*;yield __iterator__; }");
tryItOut("if(new (uneval(<x><y/></x>))((__iterator__.__iterator__ setter= (1.2e3).apply))) { if (3.141592653589793 -= <x><y/></x>) {var prototype; } else {;return <><x><y/></x></>; }}");
tryItOut("while((true) && 0)this;/*\n*/");
tryItOut("/*infloop*/L:for(const [, ({ __count__: __proto__ }), , ({ constructor: ({ __parent__: [, [], __count__], \n__proto__: ({ constructor: [], __count__: __iterator__ }) }) })] = <><x><y/></x></> .@*:: <x><y/></x>; 3.141592653589793.propertyIsEnumerable(\"__noSuchMethod__\"); this.__defineSetter__(\"[__proto__, ]\", function  prop (__proto__) {  } )) yield  /x/g ; const constructor;");
tryItOut("if(__parent__.__noSuchMethod__ =  '' ) { if (prototype = (function ([y]) { })()) {export __iterator__;let __parent__ = <x><y/></x>, __parent__ = @foo; }} else const constructor = [z1];");
tryItOut("try { gc() } catch(constructor) { ; } ");
tryItOut("while((3.141592653589793) && 0){throw this; }");
tryItOut("/*infloop*/for(const prop = ({constructor getter: Function,  get __count__ prop ()(eval(\"true\", __parent__)) }).propertyIsEnumerable(\"__noSuchMethod__\") & <x/>; prop; this.__defineSetter__(\"__count__\", (([1,2,3,4].slice).call).call)) yield ({});");
tryItOut("/*infloop*/for(const prototype; ((p={}, (p.z = [[1]])())); this.__defineGetter__(\"prop\", function  __proto__ ()({ set prototype(__count__, __proto__) { return <x><y/></x> } , \tprop: <><x><y/></x></> })[( /x/ ++)])) {constructor = window, constructor =  /x/ ; }");
tryItOut("M:if(({ get each __parent__ () { return function () /x/  } , __iterator__: constructor = 'fafafa'.replace(/a/g, function(y) { yield y; return;; yield y; }) })) { if ((yield (yield true))) export __noSuchMethod__; else return <x><y/></x>;\nyield;\n}");
tryItOut("/*for..in*/for(var function::prop.__count__ in ((({}).hasOwnProperty)(new RegExp().prototype)))let () { <><x><y/></x></>; }");
tryItOut("with({}) { throw __noSuchMethod__; } ");
tryItOut("if(( in ([0 if (<x><y/></x>)]))) { if (<x/> / []\n.isPrototypeOf(return)) /*for..in*/for(const __proto__ = @foo /= 1e81 in <><x><y/></x></>) {(0/0); }} else {with({constructor: window.__proto__})let __count__ = false;if((yield @foo)) { if ([,,]\n) {throw [1]; }} else throw <x/>; }");
tryItOut("do /*infloop*/for(function ([y]) { }; {}; prop)  while(([<x\t><y/></x>]) && 0);");
tryItOut("if(__parent__.watch(\"prototype\", (1 for (x in [])))) var __noSuchMethod__ = *, constructor = *::*; else  if (((/*\n*/void false).valueOf(\"number\"))) {export *;prop, __iterator__; } else {gc()(undefined); }");
tryItOut("return <y><z/></y>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__.__proto__ in (#1=({__parent__: undefined}))) do __noSuchMethod__, __parent__ = *::*; while((delete <y><z/></y>) && 0);");
tryItOut("<ccc:ddd>(throw prototype = [1] <<= (~<y><z/></y>))<{prop}><!--yy--></{prop}>__noSuchMethod__</ccc:ddd>");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in prototype) {L:if( '' ) { if (<><x><y/></x></>) {const __iterator__, __parent__ = 0/0; }} else <x/>;return; }if(*::*.__parent__) { if (#0=[(window in window)]) {}} else { } }");
tryItOut("<x><y/></x>;//h\n");
tryItOut("if( /x/g ) { if (@foo) {continue ; } else yield}if( /x/g ) ( /x/ );");
tryItOut("with({constructor: undefined}){undefined;export prop; }");
tryItOut("let (constructor) { /*for..in*/L:for([__parent__, __proto__] = 4. in prototype) (prototype); }");
tryItOut("/*infloop*/for(let prop; [,]; undefined) (((function ()<><x><y/></x></>).call).apply).apply");
tryItOut("let ([, __parent__, []] = ({}).hasOwnProperty\f) { /*for..in*/for(var [prop, __iterator__] = [z1,,] in []) {{} } }");
tryItOut("/*infloop*/M:while(new this(@foo)){with({__noSuchMethod__: <x><y/></x>})continue L;yield null;\n;\n }");
tryItOut("let (__iterator__) { /*infloop*/do {return @foo; } while( /x/g )\ncontinue ; }");
tryItOut("/*infloop*/while((<x><y/></x>.isPrototypeOf(undefined)))export prototype;");
tryItOut("if((- /x/ )) { if ((({a2:z2}) && window.hasOwnProperty(\"__iterator__\"))) {throw <>\t<x><y/></x></>; }} else continue ;");
tryItOut("do {__proto__ = \f<x><y/></x>; const __count__; } while((((p={}, (p.z = (this.zzz.zzz))()))()) && 0);");
tryItOut("/*infloop*/M:while(<><zzz>new <zzz>(<x/>.unwatch(\"prototype\"))</zzz>()</zzz></>)do with({constructor: 0})gc() while(((new (<x/>)().propertyIsEnumerable(\"prop\")).prop) && 0);");
tryItOut("if(*::*.isPrototypeOf([,,])) { if (@foo) {;{} } else {}}");
tryItOut("yield 3\nswitch(((window).call).call(null, <x/>, [[]])) { case 3: return;break;  }");
tryItOut("/*infloop*/for(constructor; prototype = prototype === __iterator__; \f(new <x><y/></x>(*, <x><y/></x>)) ^ (<x><y/></x>.constructor = __noSuchMethod__)) {;@foo }");
tryItOut("L:switch(({})) { case 4: /*infloop*/for(const __iterator__ = <x/>; @foo; window) {continue ;throw -1; }break;  }");
tryItOut("const prop =  \"\" , __iterator__ = -0; const prototype;");
tryItOut("with({__proto__: eval(\"yield;\",  /* Comment */__parent__)}){gc() }");
tryItOut("/*for..in*/M:for(const [__iterator__, __noSuchMethod__] = constructor.__proto__ = ~<x><y/></x> in ++this) __parent__, prototype = *::*;");
tryItOut("if(__count__.prototype = false) const __proto__ = <>\f<x><y/></x></>, prototype; else {if(-1) { if (__parent__) {export constructor; } else {<x/>;return; }} }");
tryItOut("/*infloop*/while(){export *; }");
tryItOut("L: __noSuchMethod__ = <y><z/></y>, __count__ = *::*;");
tryItOut("export *;\nif(({ set <xxx {constructor}={<><x><y/></x></>} />(prototype, prototype) { ,  set __iterator__ try { var __parent__, __iterator__; } catch(__proto__ if <><x><y/></x></>) { {} } finally { (-1); }  (prototype, __count__) { yield <><x><y/></x></> }  })) { if ( /x/g ) {var prop = <><x><y/></x></>,  = *;gc() } else return;}\n");
tryItOut("prototype");
tryItOut("/*infloop*/for(let __parent__; ((((new Function(\"return <><x><y/></x></>;\"))).call(function  __count__ (__iterator__, let) { export prop; } )).propertyIsEnumerable(\"__count__\")); Number(0x99)) {;return (function ([y]) { })(); }\nlet (__parent__ = (function ([y]) { })(), prototype = .2) <x><y/></x>.hasOwnProperty(\"constructor\") |  ''  .@x:: <><x><y/></x></>");
tryItOut("/*for..in*/M:for(var constructor in ((__count__ getter: function (__iterator__) { yield #2=({ set prototype(__count__)<x><y/></x>,  get __iterator__ __parent__ (__noSuchMethod__, __iterator__) { return * }  }) } )((new new (<>yyy</>)(prototype .. *::*, (new Number(<x/>, <><x><y/></x></>)))( '' , ('fafafa'.replace(/a/g, Math.sin))).prototype).prototype))){/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.prop in <y><z/></y>) with({}) { continue ;/*\n*/ }  }");
tryItOut("{throw <y><z/></y>; }");
tryItOut("/*for..in*/L:for(let __count__ in @foo.prop.propertyIsEnumerable(\"__iterator__\")) return h;");
tryItOut("while(([11,12,13,14].filter) && 0)let prototype = <x><y/></x>\n const __noSuchMethod__;");
tryItOut("constructor = __count__;");
tryItOut("if((let (constructor =  \"\" ) __proto__ @  \"\" )) {[1,2,3,4].map } else return <x/>;");
tryItOut("try { throw StopIteration; } catch(__noSuchMethod__ if (function(){this.zzz.zzz;})()) { let(__iterator__ = 1.3, __iterator__) ((function(){throw StopIteration;})()); } catch(prototype if (function(){prototype = prototype;})()) { this.zzz.zzz; } finally { return; } ");
tryItOut("throw  '' ;");
tryItOut("{}");
tryItOut("/*for..in*/for(var x::__noSuchMethod__(this.__defineGetter__(\"__proto__\", function () { return <><x><y/></x></> } )) in (__proto__ = (-0.__defineGetter__(\"__iterator__\", ({a2:z2}))).valueOf(\"number\"))) { '' /*infloop*/do {throw 1e+81; } while((<y><z/></y> != __iterator__)); }");
tryItOut("/*infloop*/for(let __iterator__ =  /x/ \n; (__parent__)[3.141592653589793]; new [1,2,3,4].slice(this++, __noSuchMethod__+=prop)) {if(new (try { export __proto__; } finally { return this; } )()) {var __proto__;return *::*; } else (*); }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = 1e-81.__count__ = (-1).throw(( /x/ .unwatch(\"__iterator__\"))) in prop.__parent__ = arguments) {export prop; }");
tryItOut("let(__noSuchMethod__ = <y><z/></y>.eval(false), __noSuchMethod__) ((function(){x::__proto__ = prototype;})())\nwith({}) __iterator__ = -3/0");
tryItOut("for(let y in [])\n");
tryItOut("export prototype\n");
tryItOut("{}\n");
tryItOut("/*infloop*/for([1]--; this.zzz.zzz; window) throw arguments;");
tryItOut("with({}) { let(({ __noSuchMethod__: prototype }) = undefined, __parent__) { throw /*__proto__; } ");
tryItOut("/*for..in*/M:for(prototype.__noSuchMethod__ in false.propertyIsEnumerable(\"__noSuchMethod__\"\n)) export prop;");
tryItOut("while((*::*) && 0){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__.prop in (1e4 if (<x/>)).eval((*::*)[window])) {while(((true for each (__proto__ in {})[ '' ] instanceof <><x><y/></x></>.__noSuchMethod__) .@x:: prototype) && 0)/*infloop*/for//h\n(var prop\t = <><x><y/></x></> :: <><x><\ty/></x></>; new (Math.sin).call(\fyield window, undefined); ({prop: __iterator__,  get __parent__ __noSuchMethod__ (__iterator__) { export prototype; }  })) throw *::*; const __count__; }");
tryItOut("/*infloop*/M:for(@foo()['__count__']; 0; eval(\"(Math.sin)(new function(y) { yield y; gc(); yield y; }()) >> (1e81).hasOwnProperty(\\\"__count__\\\")\", #1=[#1#] ? <x/> : <x><y/></x>.__iterator__)) {return; }");
tryItOut("/*for..in*/for(__proto__ = <xxx>{set}</xxx> in export constructor) return @foo\n");
tryItOut("/*infloop*/L:for(var prop; (uneval([<y><z/></y>].sort([1,2,3,4].slice))) .. ({ \"\"  }--); (<x><y/></x>.eval(__parent__))) {gc()\nreturn; }");
tryItOut("with({}) with({}) { /*for..in*/for(const __parent__ =  /x/g  in __iterator__ = <x><y/></x>, __iterator__ = *) {(#1#); } } ");
tryItOut("switch(3) { default: case 5: throw false;case 8: export *;case <><x><y/></x>//h\n</>: case 1: {}break; yield <x/>;var prototype, prop;break; case 0: gc()case 1: break L;break;  }");
tryItOut("with({prototype: function  __noSuchMethod__ (constructor) { return __parent__ = (__proto__ = <x/>).eval((<xxx {constructor}={<x><y/></x>.watch(\"constructor\", __proto__)} />.(this.eval(<y><z/></y>)--))) } }){/*infloop*/do constructor; while( \"\" ); }");
tryItOut("{return false;gc() }");
tryItOut("/*infloop*/for(const prop\t; <><><!--yy--></></>.valueOf(\"number\"); [, ({ __count__: ({ __proto__: prop, __noSuchMethod__: __count__ }) })\f, ({ __parent__: constructor, __parent__: ({ __noSuchMethod__: function::prototype, __noSuchMethod__: __parent__ }) }), __parent__] = \n '' ) {L:switch(({__parent__: *::*})) { case 5: break; case 4: return prototype;break;  }if(((yield undefined.__parent__ = true))) {break ; } else  if (new Object(Math.sin(<x><y/></x>))) {;(1e-81); } }");
tryItOut("L:with({__count__.__noSuchMethod__: [15,16,17,18].filter(gc, <x><y/></x> | <y><z/></y>)})continue M\n");
tryItOut("let (setter) {  }");
tryItOut("return;");
tryItOut("/*infloop*/L:for(\flet __noSuchMethod__ = <x><y/></x>; [z1]; <x><y/></x>) {yield this; }\nlet __parent__, __parent__ = #1#;");
tryItOut("L:if(+ /x/g ) { if ((Math.sin)().prototype , (#3={a:#3#}++).eval( /* Comment */4.)) { } else <x><y/></x>;}");
tryItOut("/*infloop*/while(__proto__ = __proto__ != *.throw(<x><y/></x>)){ }");
tryItOut("__parent__if( \"\" [1.2e3] *= new function  prop (constructor, __parent__) { throw null; } ()) { if (<x/>) {yield false; }} else __count__ = __count__;");
tryItOut("export prop;");
tryItOut("/*for..in*/throw (~undefined);");
tryItOut("if(0/0) {yield;var prop = 3/0; } else export __iterator__;");
tryItOut("if([1].__lookupSetter__(\"__parent__\")) {throw  \"\" ; }\n/*for..in*/L:for(__count__ = <><x><y/></x></>.isPrototypeOf(1e-81) in prototype) break ;");
tryItOut("if(this.zzz.zzz) {{} } else  if (let (__proto__) false) {{} }");
tryItOut("return ((/a/gi(__iterator__)) for ( in prop) for each (__proto__ in  \"\" ));");
tryItOut("if(gc()) yield undefined;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = @foo-- in ++0/0.__count__) {if( '' ) {with({__proto__: __count__})yield; } }");
tryItOut("yield <x><y/></x>\n");
tryItOut("if(yield __iterator__) {yield;throw 1.3; } else return");
tryItOut("/*infloop*/for(let __iterator__; __parent__.__iterator__ = new Error(); function () { (<><x><y/></x></>); } ) M:while((window) && 0)yield constructor;");
tryItOut("if(<><x><y/></x></>) {this; } else (@foo);");
tryItOut("switch((*)()) { default: export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in prop) {(__proto__);while(( /x/ ) && 0){export *; } }");
tryItOut("var __iterator__ = [z1]\ngc()");
tryItOut("const  get __noSuchMethod__ __noSuchMethod__ (__iterator__) { throw function(id) { return id }; }  = ({})\nthrow this;");
tryItOut("/*infloop*/for(prop; arguments; ( ''  if ([z1,,]))) {throw \t.2; }");
tryItOut("/*infloop*/while( '' )let (__iterator__ = window) { (<><x><y/></x></>); }/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in new ()()(3,  /x/g )) {/*for..in*/for(var __iterator__ = 'fafafa'.replace(/a/g, (new Function(\"yield;\"))) in ([1,,].watch(\"prototype\", /a/gi))) (<x><y/></x>); }");
tryItOut("/*for..in*/L:for(constructor =  for (__iterator__ in ([15,16,17,18].filter('haha'.split, *))) for each (__proto__ in window) in ([1,2,3,4].slice).call(null.throw(*), (this :: 5.0000000000000000000000))) {yield;__parent__ = window; }");
tryItOut("{{null }return __parent__; }");
tryItOut("while((window == (__proto__ *=  /x/g )) && 0)<y><z/></y>;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if((eval(\"gc()\", ((uneval( \"\" ))))).unwatch(\"prototype\")) { if (({constructor: window})) {return\nexport constructor;throw @foo; } else {let(__count__ = __proto__, prototype = __proto__) { const __noSuchMethod__ = *::*;yield; }}");
tryItOut("[1];");
tryItOut("M:if([,,z1]) (function (__noSuchMethod__, __count__) { return .2 } ).call else  if (__iterator__) for(let y in [5,6,7,8]) return *.__proto__; const __noSuchMethod__;");
tryItOut("with({}) { ; } \nreturn yield [];");
tryItOut("if(new (<><x><y/></x></>)(window)) { if (({prop:  ''  })) __iterator__ else yield 4.;}");
tryItOut("yield;");
tryItOut("this.zzz.zzz;");
tryItOut("{if(prop -=  /x/g ) {(false);yield ({a2:z2}); } else <y><z/></y>; }");
tryItOut("if((__noSuchMethod__.( '' ['__proto__'])).__lookupGetter__(\"__parent__\")) L:if(eval(\" /x/ \", <><x><y/></x></>)) export constructor; else export *; else {/*for..in*/for(let [prop, prop] = <><x><y/></x></> in this) export false;M:if(window) { if (this.__defineSetter__(\"prototype\", new Function)) export prototype; else {\rreturn <>__noSuchMethod__</>;return; }} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __iterator__: ({ __parent__: prototype.__count__ }), constructor: [, ({ prop: ({ prototype: prototype }), __parent__: __parent__ }), ({ __parent__: prototype, __iterator__: __count__ }), ] }) in (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(((new Function(\";\"))).call(<><x><y/></x></>, <x/>)))) __parent__;");
tryItOut("/*for..in*/for(var prototype in ((*)(constructor.__proto__))){export prop; }");
tryItOut("if([this.__defineGetter__(\"__noSuchMethod__\", (<><x><y/></x></>).watch)]) {<><x><y/></x></>;/*infloop*/for(const __count__ =  /x/g ; ([1,2,3,4].slice); (null.propertyIsEnumerable(\"constructor\"))) {throw <y><z/></y>; } } else {return prop;({}).hasOwnProperty }");
tryItOut("M:switch(<x><y/></x>) { case 5: yield <x><y/></x>;break;  }");
tryItOut("/*for..in*/for(let __proto__ = this in <y><z/></y>) ;");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in @foo) function (__iterator__)<><x><y/></x></>");
tryItOut("continue ;\nnull;\n");
tryItOut("do export prototype; while((<y><z/></y> ^ yield  /x/ ;) && 0);");
tryItOut("let \t(constructor, __iterator__) { __proto__(yield null) = __count__; }");
tryItOut("/*for..in*/for(let __count__ in ((<><x><y/></x></>)(<><x><y/></x></>)))with({__iterator__: <x><y/></x>})return;");
tryItOut("if() {(<!--yy--> ((p={}, (p.z = try { const __iterator__ = (1 for (x in [])); } \fcatch(prototype) { return false; } )()))) {if(<x><y/></x>) const prototype = <><x><y/></x></>; else  if (5.0000000000000000000000) {return <x/>;; } } else <x><y/></x>try {  } catch(constructor) { evalfunction () { break ; }  }  }");
tryItOut("do /*infloop*/for( /x/g ; @foo; window) __parent__ = -3/0, __iterator__; while(((@foo.isPrototypeOf(__count__))) && 0);");
tryItOut("prototype = (new (function (__count__) { return [z1] } )(constructor = false, <y><z/></y>)).valueOf(\"number\")");
tryItOut("let (5.0000000000000000000000 =  \"\" , __parent__) { (<y><z/></y>); }");
tryItOut("/a/gi const __iterator__;");
tryItOut("/*for..in*/M:for(__count__ = ((<><x><y/></x></>.isPrototypeOf(<y><z/></y>)) |= delete <><x><y/></x></>) in (new (([z1]).__defineSetter__)())) yield\nlet constructor = window, __parent__;");
tryItOut("L:if(__proto__) function  __parent__ () { <x/>; }  else constructor");
tryItOut("L: {export *;return; }");
tryItOut("switch(033 % <><x><y/></x></>.valueOf(\"number\")) { case prop = false: export prototype; }");
tryItOut("{export __count__ }");
tryItOut("/*for..in*/M:for(var [prototype, prototype] =   in  .\t(this.__defineGetter__(\"__noSuchMethod__\", Math.sin)) <<= function(y) { yield y; {}; yield y; }(<x><y/></x>.(<x><y/></x>), <y><z/></y>)) return;");
tryItOut("/*infloop*/do {export *; } while(({__count__: ({ get prototype() { yield <><x><y/></x></> } , <x><y/></x> }), prop setter: <x><y/></x> }));");
tryItOut("/*for..in*/for(let constructor in __proto__) {yield; }\n");
tryItOut("var __count__\nyield;");
tryItOut("if(__noSuchMethod__) with({__iterator__: undefined})continue ; else {__proto__;yield = <x><y/></x>, __parent__; }");
tryItOut("/*infloop*/for(constructor; new (1 for (x in []))(); <x/>.unwatch(\"__count__\")) {/*infloop*/while([]){yield;yield <x/>; }let __parent__; }");
tryItOut("L:switch(0/0) { default: break;  }");
tryItOut("L:switch(true) { default: break; continue ;break; gc()case 8: var __iterator__, __parent__ = function ([y]) { };break; case 5: {}break; case *: const __proto__ = <x><y/></x>, __parent__ = null;case undefined: break;  }");
tryItOut("if(null) { if ((//h\n /x/  ||  \"\" ) <= new (<x><y/></x>)(constructor, -3/0)) gc() else {export constructor; }}");
tryItOut("/*infloop*/for(constructor; true; function(id) { return id }) var prop;");
tryItOut("/*infloop*/ = null; ; ({ <x><y/></x>: constructor, __count__: __count__ }) = (-5.0000000000000000000000)) yield; const __count__;");
tryItOut("((function ([y]) { })())\n\nswitch(prop.(true\t)) { default: break; break; case ({__proto__: *.__defineGetter__(\"prop\", (1 for (x in []))) }):  }");
tryItOut("/*for..in*/for(let [__parent__, __proto__] =  /x/g .__defineSetter__(\"prototype\", Math.pow) in (<y><z/></y>.*)) yield #3={a:#3#};");
tryItOut("let (__iterator__, __parent__) { this }");
tryItOut("throw [,];");
tryItOut("{with({}) { yield <><x><y/></x></>.watch(\"__parent__\", function (__parent__) { return undefined } ); }  }");
tryItOut("/*infloop*/L:for(const ({ __parent__: prop }) = ; (p={}, (p.z = [,,])()).throw((window)[[z1,,]]); ((*.__defineSetter__(\"constructor\", window)))((eval(\"<x/>\", *::*)))) {gc()let __iterator__ = __proto__; }");
tryItOut("/*for..in*/M:for(__iterator__ in false) {}");
tryItOut("return <x/> ^= <y><z/></y>;");
tryItOut("do {return window;\nreturn null;\n } while((((function () '' )([15,16,17,18].map(true, delete),  /x/g ))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 3/0) {{gc() }throw #1#; }");
tryItOut("var __proto__;\nreturn <x/>;\nif((((5.0000000000000000000000.__parent__))((<><x><y/></x></>.eval(null)), undefined))) {<x><y/></x>;throw window; } else  if ((-(yield <x/>))) {yield; }");
tryItOut("M:with({__iterator__: (3.141592653589793.valueOf(\"number\"))}){if(true) { if (<><x><y/></x></>) export *; else {export *; }}__iterator__ }");
tryItOut("if(new ((yield __count__))(__noSuchMethod__ = @foo)) {gc; } else  if (false) {if(<x><y/></x>) {prototype = constructorexport *; } else var __proto__ = 1.3, __parent__;function () { return {} }  } else var  \"\"  = 5.0000000000000000000000, __iterator__;\t");
tryItOut("throw function  __count__ (constructor, prototype) { yield  /x/  } ()\n");
tryItOut("if( /* Comment */__iterator__) { if (this.__defineGetter__(\"__parent__\", (1 for (x in [])))) export *;} else __noSuchMethod__ = *::*, function::__count__ = null;");
tryItOut("if(eval(\"\", null)) /*infloop*/M:for([, ] = this.__defineSetter__(\"prop\", function () { return function ([y]) { } } ); __iterator__|=<><x><y/></x></>();  \"\" ) {throw *; } else  if ((new (<x><y/></x>;)(__iterator__))) {return; }");
tryItOut("(function ([y]) { })();");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("switch(((__parent__-=this) for (false['__noSuchMethod__'] in <x><y/></x>))) { default: ;break; case 9: case 4: break;  }");
tryItOut("/*for..in*/for(__proto__ = [z1,,] += @foo in 0) {var __parent__, __count__ =  /x/g ; }");
tryItOut("(<x><y/></x>);\ngc()\nlet (prototype, __noSuchMethod__) { (<><x><y/></x></>); }\n");
tryItOut("/*for..in*/for([__proto__, __proto__] = yield [] + window in (this)[<y><z/></y>]) L: prop = undefined, __noSuchMethod__ = *::*;");
tryItOut("var x::x::prototype = __proto__, __count__");
tryItOut("/*for..in*/for(const prop = *.__defineGetter__(\"__iterator__\", (<><x><y/></x></>).__defineSetter__) in <><x><y/></x></>) ");
tryItOut("if(#0=[<><x><y/></x></>]) { if (1e4) {yield; } else continue ;}");
tryItOut("switch([(.valueOf(\"number\")) if (<x/>)]) { default: /*infloop*/do {gc() } while(null);L:if(((eval).call)(<x><y/></x>)) { if (__count__-=null) {gc()<x><y/></x>; } else (<y><z/></y>)\r;}break; case 5: break ;break;  }");
tryItOut("/*for..in*/for(const __parent__ in ((({}).__lookupGetter__)(<x><y/></x>))){yield <x><y/></x>; }");
tryItOut("/*infloop*/while((this.__defineSetter__(\"prop\", function (({ __noSuchMethod__: __count__, __parent__: __proto__ }), __noSuchMethod__) { return __count__.__iterator__ } ))){const <x/>, this = null;yield; }");
tryItOut("return window\nexport *;");
tryItOut("export *;");
tryItOut("/*for..in*/for(var ({ __iterator__: __noSuchMethod__, __parent__:  }) in ((function  __count__ (({ __proto__: __proto__, prop: __parent__ }), constructor) { yield <x/>.valueOf(\"number\") } )(this ^ 1e-81))){;var __iterator__; }");
tryItOut("if(constructor.yoyo(@foo)) gc() else  if ((({}).hasOwnProperty(\"__noSuchMethod__\") instanceof this.__iterator__).call( /x/  in <><x><y/></x></>.yoyo(function (__noSuchMethod__, constructor)<><x><y/></x></>), (prop = <y><z/></y>) << <><x><y/></x></>.watch(\"__iterator__\", function () { return   } ))) {yield 'haha'.split;yield <x><y/></x>; } else {/*infloop*/do break ; while(window , <><x><y/></x></>); }");
tryItOut("switch(this) { case 2: {} }");
tryItOut("/*infloop*/do const get, __proto__ = this; while((<x><y/></x> == <x><y/></x>)[5.0000000000000000000000]);");
tryItOut("while((true.__lookupSetter__(\"__iterator__\")) && 0)yield this;");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = (constructor =  /x/g ) in this.zzz.zzz) if((~ { return <bbb xmlns=\"\n<><x><y/></x></>\"><ccc:ddd>yyy</ccc:\tddd></bbb> } )) export __proto__; else  if (yield #1=[#1#]) L: {var constructor = this; } else {true;let (constructor = <x><y/></x>\t) { *::*; } }");
