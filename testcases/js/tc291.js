tryItOut("return __iterator__;");
tryItOut("{/*infloop*/while(this){export *;export prototype; } }");
tryItOut("switch(true) { case 3: break;  }");
tryItOut("return; const __parent__;");
tryItOut("L:if(__proto__.__parent__ = __count__) {__iterator__ = <y><z/></y>; } else  if (<><x><y/></x></>) {gc() \"\" ; } else {export __proto__; }");
tryItOut("const __parent__ = undefined, __parent__;\n/*for..in*/for(var prop.__parent__ in ((Math.sin)(constructor)))yield;\n");
tryItOut("try { let(__parent__ = (0x99)[<><x><y/></x></>]) ((function(){return this.__defineGetter__(\"__parent__\", 3/0);})()); } catch(prototype if (__noSuchMethod__ ? this : <x/>)) { for(let y in []); } catch(__proto__ if (function(){let(__parent__, with({}) let constructor = true;) ((function(){for(let y in []);})());})()) { with({}) { return; }  } catch(prop if prop = prop) { let(__proto__ = * != 0x99) ((function(){let(__count__ = *::*, x::constructor) ((function(){{}})());})()); }  { return <><x><y/></x></> } catch(constructor if ({ prop: __parent__, constructor: __iterator__ }) = [window for (__parent__ in [z1])]) { for(let y in [5,6,7,8]) try { const __iterator__ = function(id) { return id }, prop = __proto__; } catch(__proto__) { prototype = <><x><y/></x></\f>, __parent__ = <><x><y/></x></>; }  } finally { (function ([y]) { }--); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in window) switch(true) { default: /*for..in*/for([__parent__, __parent__] = @foo in window) return;break; case 8: ;case <x/>: break;  }\nyield;\n");
tryItOut("if([11,12,13,14].some) { if (<x><y/></x> && -0 ::  /x/g ) {/*infloop*/L:for(let __parent__; 4.; 0.1) return @foo; } else if(<>[15,16,17,18].map(Math.sin, prop)</>) {let __iterator__ = <x/>;\fexport *; } else export prototype;}");
tryItOut("L:if((\n((uneval((__proto__.__noSuchMethod__)))))) { if (false) {constructor.__proto__ = __noSuchMethod__; } else {gc()while((*(@foo)) && 0)yield <x><y/></x>; }}");
tryItOut("L: {{}while((<x><y/></x>.__parent__ = [,]) && 0){break L;let __parent__ = <x><y/></x>; } }");
tryItOut("/*for..in*/for([constructor, prototype] = <><xxx {__parent__}={(new <x/>(<y><z/></y>, 0/0))} /></> in [11,12,13,14].map) {yield  /x/g ;\nexport __count__;\nL: {let prototype; } }");
tryItOut("with({}) let(__count__) ((function(){gc()})());");
tryItOut("while((<xxx {__noSuchMethod__}={null} />.([11,12,13,14].some)) && 0)with({}) let(__iterator__ = (Math.pow)(false), __proto__) ((function(){return;})());");
tryItOut("if(new true()((undefined ? <><x><y/></x></> : prototype), <x><y/></x>)) {L:if(eval(\"export __iterator__;\", <y><z/></y>)) {yield <x/>; }do yield <><x><y/></x></>; while((this) && 0); } else yield;");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = (window.propertyIsEnumerable(\"__iterator__\")).__parent__.hasOwnProperty(\"__iterator__\") in (new (window.unwatch(\"prototype\") in <x/>.__defineSetter__(\"__iterator__\", /a/gi))(eval(\"gc()\", __count__), <x><y/></x>.watch(\"prop\", __noSuchMethod__)))) {/*infloop*/M:for([({ prototype: ({ __parent__: prop }), __parent__: ({ prop: __count__, /*\n*/__iterator__: prototype }) }), ({ __count__: constructor }), , , *::*['__parent__']] = Function() >>= 0/0; (prop.prototype getter= @foo.*); ((__count__.__defineSetter__(\"__proto__\", ;)))()) {return <x><y/></x>;\ndefault: return [1,,];break; (<x/>).applycase  /x/ : case true: export *;\nexport *; } }");
tryItOut("/*infloop*/for(const __count__ = this.constructor.prototype; Object(([15,16,17,18].sort(let (__iterator__, __parent__ = <x><y/></x>) 1e-81, this :: __noSuchMethod__)), __parent__ = 1e+81 < *::*); 'fafafa'.replace(/a/g, (new Function(\"export *;\")))) const prototype =  '' ;");
tryItOut("with({}) var constructor;");
tryItOut("if(__iterator__.(\rreturn [1,,] ? (\n5.0000000000000000000000) : ++*)) export *; else  if (new ((constructor = <y><z/></y>))()) {var prop = 0x99; } else gc()\n/*for..in*/for(function(q) { return q; } in 4.) {yield;const __noSuchMethod__ = this; }");
tryItOut("try { throw  /x/ ; } catch(__noSuchMethod__ if (function(){export prop;})()) { gc() } catch(constructor if (function(){; __iterator__ = (0\r.watch(\"prop\", [1,2,3,4].slice)), delete = new  \"\" })()) { throw -3/0; } finally { var prop = undefined, __proto__; } ");
tryItOut("M:if(__proto__.constructor = <x><y/></x>) let prop, prototype; else {export *; }");
tryItOut("export *;\ntry { ; } finally { {} } \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <y><z/></y>) /*infloop*/M:for(let prototype;  '' ; (window)()) {return;return [z1,,]; }");
tryItOut("/*for..in*/for(var prop in ((((prop)))((Error(@foo, false).__lookupSetter__(\"prop\"))))){var prototype = <x><y/></x>, __proto__ = this; } const prop;");
tryItOut("if(([15,16,17,18].some((<><x><y/></x></>).watch, __parent__))) [z1]; else yield 1e81\f;");
tryItOut("L:if(eval(\"{}\", this)) {<x><y/></x>;yield; } else {prop; }");
tryItOut("let(__proto__, try { return false; } finally { const [z1]; } ) { ");
tryItOut("switch(yield <><x><y/></x></>) { default: break;  }");
tryItOut("__iterator__ = prop;");
tryItOut("{/*for..in*/for(let __noSuchMethod__ in ((<x/>)([]--))){do { } while((window) && 0); } }");
tryItOut("with({constructor: *.__lookupGetter__(\"__parent__\")})if(<y><z/></y>) { if (__count__ = ([1,2,3,4].slice)(<x><y/></x>, undefined)) <!--yy-->} else var ((uneval(true)).prop = prototype/*\n*/.((p={}, (p.z =  /x/g )()))) __proto__ = <x><y/></x>;");
tryItOut("/*infloop*/for(let ({ constructor: ({ __parent__: __count__ }), constructor: __iterator__ }) = ([-3/0].filter(function(q) { return q; })); __proto__, constructor = <x/>;  /x/g .unwatch(\"__noSuchMethod__\")) {return; }");
tryItOut("/*infloop*/do  while(__proto__ = prototype.(__parent__ = false));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let yield; in 0/0) {throw true;const __proto__; }");
tryItOut("yield;\nyield ({});\n");
tryItOut("return [,,]\n");
tryItOut("if(({ __noSuchMethod__: constructor, __count__: ((__count__ = <x><y/></x>)); }) = (this.__defineSetter__(\"__proto__\", eval) >>>=(/a/gi).call(@foo, undefined, <x><y/></x>))) /*for..in*/for([__parent__, __iterator__] = null in <x><y/></x>) {yield;gc() } else var __parent__, __count__ = window;");
tryItOut("yield .2 <= <x/>;");
tryItOut("L:with({prototype: prototype}){gc() }");
tryItOut("L:switch(<y><z/></y>) { default: {}function (__noSuchMethod__)windowbreak;  }");
tryItOut("while((__parent__ getter: function(y) { yield y; __noSuchMethod__; yield y; }.valueOf(\"number\")) && 0)yield <><x><y/></x></>;\nconst throw <x><y/></x>; = ({}), __parent__ = constructor;\n");
tryItOut("if((<x><y/></x> -= @foo)) {break M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <><>(__noSuchMethod__)</></> in (new [1,,].eval(this)([,,].__defineGetter__(\"prop\", function (let, __parent__) { yield true } ))).throw(constructor)) {{(@foo);return; }{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in eval(\"this\", undefined)) {}");
tryItOut("/*for..in*/for(const [prototype, __parent__] = (-0) in (continue M).throw(( /* Comment */*))) {switch(<bbb xmlns=\"<><x><y/></x></>\">yyy</bbb>) { \rdefault: @foo; } }");
tryItOut("return RegExp(__iterator__);");
tryItOut("M:while((this.zzz.zzz) && 0){if(true) { if (<><x><y/></x></>) return; else return *::*;} }");
tryItOut("for(let y in []);");
tryItOut("if(true) { if (1e4) continue ;} else {}\n");
tryItOut("do -3/0; while(((__count__.isPrototypeOf(<x/>))) && 0);");
tryItOut("/*for..in*/for(let __parent__ in <y><z/></y>) return <x><y/></x>;");
tryItOut("export prop;");
tryItOut("/*infloop*/for(let ({ prototype: prototype }) = ({ __noSuchMethod__: ({ __proto__: __noSuchMethod__ }) }) = __noSuchMethod__ =  \"\" ; --[,,z1].__proto__ = <y><z/></y>; new ( === <y><z/></y>.__defineGetter__(\"__iterator__\", /a/gi))(((Math.pow())[(this.__defineGetter__(\"__count__\", Math.sin))]), ((*::*)[false]))) {break ;let __parent__; }");
tryItOut("M:if(yield window) {const default: const __noSuchMethod__ = __count__;break; break; , __proto__ = __iterator__;(this); } else ");
tryItOut("with({}) try { for(let y in []); } catch(__proto__ if (function(){yield <x/>;})()) { yield prop.__noSuchMethod__ = constructor; } finally { return *::*.__lookupSetter__(\"__parent__\") == (function  __proto__ (__parent__, __count__) { yield [[]] } ); } ");
tryItOut("for(let y in []);");
tryItOut("yield (let (prototype = <y><z/></y>, prop) 5.0000000000000000000000);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in false) { }");
tryItOut("if(((uneval(new [[]]()--))) ===  /x/g  ^ *) L: {export *; } else  if (prototype = [1]) {with({prop: (Math.pow)( /x/ )}){continue ;return; }export *//h\n; }");
tryItOut("{[1,2,3,4].sliceyield\n/*infloop*/do { } while(*::*); }");
tryItOut("L: {;export *; }");
tryItOut("if(({ prototype: constructor, __iterator__: ({ __noSuchMethod__: __parent__ }) }) = function::prop.throw((uneval((uneval( '' )) ^ <x/> ? 3.141592653589793 : @foo)))) {yield window; } else  if ((new (Function)(__count__ = <\rx><y/></x> <<= __iterator__.__noSuchMethod__ setter= ([1]).watch)[this.__defineGetter__(\"prototype\", eval)])) {let prototype; }");
tryItOut("switch(__parent__.(<x><y/></x>)) { default:  }");
tryItOut("/*infloop*/L:for( ''  ^= (({constructor getter: (new Function(\";\")) }) :: #2=true); ((__iterator__ if (<><x><y/></x></>)).hasOwnProperty(\"__iterator__\")); __noSuchMethod__) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in this) /*for..in*/for(var prop = null in <x><y/></x>) return this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in (<x><y/></x> <<= __noSuchMethod__)\f) __noSuchMethod__, __count__;");
tryItOut("switch((eval(\"var __noSuchMethod__, __proto__;\", <y><z/></y>))) { default: break;  }");
tryItOut("L: let prototype = <x><y/></x>, __noSuchMethod__ = #1=[#1#];/*\n*/");
tryItOut("with({prop:  }){function(q) { return q; } }");
tryItOut("/*infloop*/for(const __proto__; true; (uneval( /x/g ))) export *;");
tryItOut("do { '' ;; } while(((__proto__.prototype = constructor) , (<><x><y/></x></> >>>=<><x><y/></x></>)) && 0);");
tryItOut("/*infloop*/for(<><x><y/></x></>.throw(<y><z/></y>); (3/0.watch(\"__iterator__\", gc)); [z1,,] &= 0/0) function ([y]) { };");
tryItOut("if((yield -0 >>> 1e81++.eval(*.__proto__ =  '' ++).propertyIsEnumerable(\"constructor\"))) { if (prop.@*) {this.zzz.zzz; }} else with(<x><y/></x>){break M;\fvar __proto__, constructor = this; }");
tryItOut("if([,,z1] /= __noSuchMethod__) { if (({}).hasOwnProperty()) {return [z1,,];return; } else {gc()window; }}\nvar prop = 4.;\n");
tryItOut("Math.pow");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = function ([y]) { }.eval(<><x><y/></x></>) in  \"\" ) {__parent__, __count__;let  set prototype() \"\" , __proto__ =  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let  /x/g .prototype in 033) {export *; }");
tryItOut("/*infloop*/do yield; while(null);");
tryItOut("for(let y in [5,6,7,8]) __proto__ = __count__;");
tryItOut("L: false;/*");
tryItOut("\n");
tryItOut("yield;");
tryItOut("return;\nthrow #1=[#1#];\n");
tryItOut("{do {return 1e81; } while((([<x><y/></x> for ([prototype, , __iterator__, , __parent__] in 1e-81)])) && 0);/*for..in*/for(__count__ = true in  \"\" ) export *; }");
tryItOut("");
tryItOut("/*for..in*/for(__parent__.__parent__ in __iterator__) {gc() }");
tryItOut("L: {}");
tryItOut("with({__parent__: (uneval(<><x><y/\t></x></>))})null;");
tryItOut("/*infloop*/for(const __count__ = <x><y/></x>; (<x><y/></x prop >); <x><y/></x>) {(<x/>);__parent__ = prototype; }");
tryItOut("return window ^= <x><y/></x>;");
tryItOut("/*for..in*/for(const prototype in (('haha'.split)(prop = <x><y/></x> <{__iterator__}> </{__iterator__}>)))export *;");
tryItOut("{var prototype;return; }");
tryItOut("if(<y><z/></y>) {{}let __proto__ = this; } else  if (<><x><y/></x></>) yield [,]; else var prototype;");
tryItOut("L: yield;");
tryItOut("return;");
tryItOut("L: continue ;");
tryItOut("{/*for..in*/for(var __noSuchMethod__ in constructor) export constructor; }switch((window / window)) { case *[({a1:1})]: {}break;  }");
tryItOut("if(1.3.prop) ; else  if (export prop) return; else {constructor(<><x><y/></x></>); }");
tryItOut("throw StopIteration;");
tryItOut("let (constructor) { ; }");
tryItOut("{gc() }");
tryItOut("/*infloop*/M:while(__parent__){throw  \"\" ; } const __parent__;");
tryItOut("/*infloop*/while()gc()");
tryItOut("throw 5.0000000000000000000000;");
tryItOut("while((![1,,]) && 0){if(delete <><x><y/></x></>) { if ((<><x><y/></x></> %= <y><z/></y>)) {return;return; }} else continue ; }");
tryItOut("/*for..in*/M:for(prop([1e-81]) in (((__count__.prop setter= 'haha'.split).watch)(([({a1:1})].some(new Function))))){\nvar constructor, constructor =  '' ; }");
tryItOut("/*infloop*/while(<y><z/></y>)let constructor = <x><y/></x>, constructor;");
tryItOut("(\f[[]]);");
tryItOut("let(__count__ = this) ((function(){\fyield __proto__;})());");
tryItOut("break \n");
tryItOut("(M:with(/*{prototype: (new (Function)(((<><x><y/></x></>.valueOf(\"number\")).yoyo(prop.*)), <><x><y/></x></> >>> <><x><y/></x></>))[(prop = window)]}){yield __iterator__ = <x><y/></x\t>; })");
tryItOut("with(({a2:z2}) >>= __count__ << ('fafafa'.replace(/a/g, gc)).watch(\"__count__\", function (__iterator__, __proto__) { return () } ))const prototype\n/*infloop*/for(const __parent__ =  /x/ ; [z1]; <x/>) {yield window; }");
tryItOut("continue \nbreak L;");
tryItOut("if(__iterator__((3.__proto__))//h\n = *::*.__lookupGetter__(\"__iterator__\")) {/*infloop*/while(.__proto__ = (<x><y/></x>.__lookupGetter__(\"__proto__\"))){; }/*infloop*/while((/a/gi(<y><z/></y>))){} } else  if ( '' ) let(__proto__, __iterator__) ((function(){yield;})());");
tryItOut("with({prop: window.eval(<><x><y/></x></>)})let(__iterator__ = <x/>) ((function(){ /x/g ;})());");
tryItOut("yield/\n/*infloop*/for(prop; <><x><y/></x></>.isPrototypeOf(undefined); __parent__ >>>=<x/>) __parent__");
tryItOut("__iterator__: new Array(0.1) + window");
tryItOut("/*infloop*/for(prototype = !#1#; __iterator__.constructor getter= <><x><y/></x></>; __parent__ = <><x><y/></x></>.__count__ = function(id) { return id }) {throw false\n }");
tryItOut("/*infloop*/for((window , delete) ^ 'fafafa'.replace(/a/g, /a/gi); <><x><y/></x></> :: <><x><y/></x></> @ window; this.__defineGetter__(\"__parent__\", [1,2,3,4].slice)) {continue ; }");
tryItOut("{undefined;yield <x><y/></x>; }");
tryItOut("if(this) \t{ if (<y><z/></y>) {throw <x><y/></x>;return; } else {return <x><y/></x>; }}");
tryItOut("with({}) yield;");
tryItOut("for(let y in [5,6,7,8]) let (constructor = window, constructor) { __proto__; }");
tryItOut("/*infloop*/while(([,,].yoyo(<x><y/></x>))){/*infloop*/for(let __count__; [z1]; __parent__) {window\t;{} } }");
tryItOut("/*infloop*/do /*infloop*/M:for(__iterator__; constructor = *::*.@foo;  \"\"  instanceof 0x99.@*) if(<><x><y/></x></>) { if (<><x><y/></x></>) { } else {;(prop = prototype)((), <><x><y/></x></>) }} while((<x><y/></x> & [].@foo > [11,12,13,14].map[default: case [1,,][*]: case 5: {}break; case (new \tfunction  __count__ ()null()): case 5: ;break; ]));");
tryItOut("with({}) __noSuchMethod__ = __count__;");
tryItOut("/*infloop*/L:do {try { (false); } catch(prop if undefined) { (__noSuchMethod__); } catch(__parent__) { yield; } finally { {} } let (3/0) { ; } } while([__parent__.isPrototypeOf([,,z1])].filter(function(y) { yield y; return <x/>;; yield y; }));");
tryItOut("__parent__['__noSuchMethod__']");
tryItOut(" const prototype;");
tryItOut("let([({ __parent__: [, prototype] }), , ]) { with({}) { yield constructor; } ");
tryItOut("/*infloop*/M:while(<x/>)return  /x/ ;");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__.prop in null.hasOwnProperty(\"__noSuchMethod__\")\r) {export __proto__;; } while(~__noSuchMethod__ = <><x><y/></x></>++);");
tryItOut("/*for..in*/for(var __proto__ in ((#1=[#1#])(<x><y/></x>)))<x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in false ? [,,] : *::*) {<><x><y/></x></>; }");
tryItOut("/*infloop*/do let (__proto__, __count__) { ; } while(-0);");
tryItOut("L: default: (function(id) { return id });");
tryItOut("with((<y><z/></y>.@*)){return;export constructor; }");
tryItOut("function ([y]) { }; const __parent__;");
tryItOut("if( '' ) {yield; }\n;\n");
tryItOut("/*for..in*/for(const ([({ __proto__: [, prop, , , __parent__] }), , ] = constructor = (<><x><y/></x></>.throw(<><x><y/></x></>))).__parent__ in (<x><y/></x>()(function ([y]) { } .@x:: <x/>, <><x><y/></x></>)(false.eval( '' ))) in <x><y/></x> ^  /x/ ) {yield;continue L; }");
tryItOut("/*infloop*/for( '' ; <><x><y/></x></> === ; ((-- \"\" ))((__noSuchMethod__.function::__iterator__))) ;");
tryItOut("with({__parent__: function(q) { return q; }(<><x><y/></x></>, <x><y/></x>)}){throw *;1e+81; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <><bbb xmlns:ccc=\"window ^ <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb></>) if(eval(\"export prototype;\", false).__proto__) {return; } else {{} }");
tryItOut("{{return;<y><z/></y>\f; } }");
tryItOut("export *;");
tryItOut(" get __noSuchMethod__(prop) { \rreturn  /x/g  <= prototype = (-1) } ");
tryItOut("L:if(__count__-=__iterator__) {export __noSuchMethod__; const prototype; } else  if (( \"\"  || window.@foo)) {let __count__ = 0x99;/*for..in*/for(let __proto__ in <x><y/></x>) {{} } } else {yield <><x><y/></x></>;throw <x><y/></x>; }");
tryItOut("export *;");
tryItOut("let (__noSuchMethod__) { if(undefined) {; } }");
tryItOut("/*infloop*/while(<y><z/></y>){if(new (5.0000000000000000000000)(this, <><x><y/></x></>)) { if (false.yoyo(1e4)) const prop = function(id) { return id };function (prototype) { gc() }  else continue M;} }");
tryItOut("return ((*));");
tryItOut("if(__parent__ = <x><y/></x>) const __count__ = <x><y/></x>; else  if ( /x/g ( '' , constructor)) { } else [[]]\n");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", *::*))) ((@foo)); else  if ((__iterator__.hasOwnProperty(\"prop\")) && new ( \"\" )(<y><z/></y>)) yield;");
tryItOut("<y><z/></y> ^ <><x><y/></x></>; const __parent__;");
tryItOut("var __count__ = this, __iterator__ = undefined;\n{}\n\nlet constructor = false, __proto__;");
tryItOut("let prop, __noSuchMethod__;/*infloop*/for(var __count__; let (__parent__ = [11,12,13,14].some, __count__ = <><x><y/></x></>) this; __noSuchMethod__.(!<y><z/></y>)) {return;; }");
tryItOut("switch( /x/ ) { default: gc()case 0: case [(<y><z/></y>.isPrototypeOf(<x><y/></x>))]: with(<x><y/></x>){throw <><x><y/></x></>; }break; case (yield (<x/>.yoyo(*::*))): break M;break; break;  }");
tryItOut("[]");
tryItOut("with({}) prototype = constructor;");
tryItOut("{/*infloop*/for(const __iterator__ = ([11,12,13,14].sort); *::*(//h\n*::*); constructor) continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<x/> in true) const __noSuchMethod__;");
tryItOut("if([z1]) {export prop; } else  if (4.) {let __count__ = <x/>, __proto__; }");
tryItOut("with([[]]){{} }");
tryItOut("/*infloop*/do throw __count__; while((__noSuchMethod__.__count__ = function(id) { return id }));");
tryItOut("export *");
tryItOut("this.zzz.zzz;");
tryItOut("if(0/0) { if (5.0000000000000000000000) ;} else {gc()break ; }\nlet constructor, prototype = <><x><y/></x></>; const constructor;\n");
tryItOut("for(let y in [5,6,7,8]) function(q) { return q; }");
tryItOut("while(('fafafa'.replace(/a/g, <><x><y/></x></>)) && 0)eval");
tryItOut("L:do \r{yield;/*infloop*/do yield <x><y/></x>; while(__noSuchMethod__); } while((let (__proto__ =  \"\" , constructor = <x><y/></x>) __noSuchMethod__ | null.*) && 0);");
tryItOut("if(<x><y/></x>.(@foo)) { if (__noSuchMethod__.([,,z1])) return;} else continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in (this)(*, 0/0)) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in *) return (undefined.__defineGetter__(\"__iterator__\", Math.pow));\n/*infloop*/M:for(const constructor; @foo[<x/>]; [<y><z/></y>]) {return <><x><y/></x></>;; }\n }");
tryItOut("do return; while(( /x/ .hasOwnProperty(\"constructor\")) && 0);");
tryItOut("/*for..in*/for(const constructor in 4.) {__noSuchMethod__const prop, __parent__; }");
tryItOut("while(( /x/ ) && 0)throw [,];");
tryItOut("export *;");
tryItOut("yield (//h\n__iterator__.throw([,,z1]));");
tryItOut("/*for..in*/for(const delete __proto__.__proto__ in (((new Function(\"Function\")))(__proto__.__proto__ = ( \"\"  - #1=[#1#])))){{(1 for (x in [])) } }");
tryItOut("constructor = *, constructor;");
tryItOut("with( get __iterator__(__noSuchMethod__) { yield (p={}, (p.z = <x><y/></x>)()) } ){throw  \"\" ;return; }");
tryItOut("switch(constructor.__proto__ setter= <y><z/></y>++) { default: (Math.sin)\f.call }");
tryItOut("/*infloop*/for(const  { (<x/>); }  = \f<><x><y/></x></>.*; ((<x><y/></x> ? ({prop: *::*}) : ( /x/ .valueOf(\"number\")))[this]); prototype = @foo) L:if((let (<x><y/></x>) [11,12,13,14].sort)) yield; else  if (this.__defineSetter__(\"prop\", [z1])) export prototype; else {{} }");
tryItOut("for(let y in []);");
tryItOut("__parent__ = \tconstructor;");
tryItOut("{return <x/>; }");
tryItOut("switch(false.__count__ = window) { case new function  prop () { return false } (): break; case 7: yield window;break;  }");
tryItOut("/*for..in*/for(let .2 = eval(\"<><x><y/></x></>\", <x><y/></x>).eval(<x><y/></x>) in (({__iterator__: this.zzz.zzz}))) /*infloop*/M:for(let ({ __proto__: ({ constructor: prototype, __iterator__: ({ __noSuchMethod__: __proto__ }) }) }) = <><xxx {constructor}={} /></>; (gc).call(<y><z/></y>, <y><z/></y>, <x><y/></x>).__parent__ = __proto__ = *; (<x/>{}) ? (true)() : [ /x/ ]) {export __proto__; }");
tryItOut("do @foo; while((<><x><y/><\n/x></>.hasOwnProperty(\"constructor\")) && 0);");
tryItOut("with({__parent__: <><x><y/></x></>}){; }");
tryItOut("/*infloop*/[, ({ __iterator__: __iterator__, __noSuchMethod__: prototype }), __iterator__, ({ __iterator__: __count__ }), ]");
tryItOut("let (({ prototype: ({ prototype: prototype }) })) { <>__iterator__</>.( \"\"  ?  /x/g  : []); }");
tryItOut("{continue M;yield <x/>; }var __noSuchMethod__ = true;\n;\n");
tryItOut("let (__parent__ = @foo) { throw @foo; }");
tryItOut("prototype = __proto__;");
tryItOut("L:if(__noSuchMethod__) {if(window.__lookupGetter__(\"__proto__\")) {export prop; } else  if ((__count__).watch) {{}; } else \tcontinue M;return; } else  if (this.__defineSetter__(\"__noSuchMethod__\", new (true)())) {return; }");
tryItOut("switch(new (({}).hasOwnProperty)(1e-81) %= prop) { default: L:with({__iterator__: 'fafafa'.replace(/a/g, (new Function(\"break L;\")))})let(__parent__ = ({ \fprop: setter, __noSuchMethod__: __noSuchMethod__ }) = #1=({__iterator__: false})) ((function(){return ((uneval(false)) , false);})());break; case let (__parent__(false)) [15,16,17,18].filter(gc, new Function((__noSuchMethod__ =  \"\" ),  /* Comment */<><x><y/></x></>)): M:if(false) {export *;{} } else {continue L;break ; } }");
tryItOut("if(this.eval(<x><y/></x>)) yield; else  if ((uneval(*))) throw window; else {yield 033;let __iterator__ = __noSuchMethod__, __parent__; }");
tryItOut("\twith(()){var __iterator__ =  '' , constructor = [1]; }M:if(function::prototype = <x/>) { if (#2=(-1)) eval(\"false\", #1#);} else {var prototype =  \"\" ;(window).__defineSetter__ }");
tryItOut("if((yield <><x><y/></x></>)) { if ((__iterator__ = ({a1:1}))) export __count__; else throw <x/>;}");
tryItOut("if(<><x><y/></x></>) {'haha'.splitlet prop = ({a1:1}), __count__ = <x><y/></x>; } else  if ( /x/g ) {export prop; }");
tryItOut("return;");
