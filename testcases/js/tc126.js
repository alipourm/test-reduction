tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in (null != 0x99)) /*for..in*/for(prototype in ((function(y) { yield y; var __proto__ = 3;; yield y; })(1e4)))var __proto__, __parent__ = var prototype, __proto__ = <x/>;; const constructor;");
tryItOut("if(function::prop >>= <y><z/></y>) {(<x/>);true; }");
tryItOut("return;");
tryItOut("/*for..in*/for(const __proto__ in (((new Function(\"yield;\")))((<x><y/></x> = new ((function ([y]) { })())(true, <x><y/></x>))))){/*infloop*/M:for((<>null</>.(<bbb xmlns:ccc=\"export *;\"><ccc:eee></ccc:eee></bbb>.(false))); (uneval((({ __iterator__: constructor }) = this.zzz.zzz))); false) {gc() } }");
tryItOut("do {M:if(function(id) { return id }()) { if (new <x><y/></x>(const __noSuchMethod__ = constructor;, <><x><y/></x></>)) export *;} else -\t } while((return ((function (__iterator__) { gc() } ).call(Error(({a2:z2}), *), 'fafafa'.replace(/a/g,  '' ), __noSuchMethod__))) && 0);");
tryItOut("switch() { case * >>> <x><y/></x>: export __count__; }");
tryItOut("M:if( '' .prototype = this) {__iterator__ } else {return @foo; }");
tryItOut("return __noSuchMethod__-=function(id) { return id }\n");
tryItOut("if((__noSuchMethod__.__noSuchMethod__)) {break M; }");
tryItOut("with( /x/g ){function  __count__ () { yield <x><y/></x>; }  }");
tryItOut("with({}) let(__noSuchMethod__) { let(__proto__ = @foo) ((function(){return;})());");
tryItOut("__iterator__");
tryItOut("L: {yield window;yield; }");
tryItOut("/*for..in*/for(var /*\n*/(-0).__iterator__ in (([,,].valueOf(\"number\"))(({ get __count__ __noSuchMethod__ () { (*); }  }))))return; const constructor;");
tryItOut("return __iterator__;continue \n/*infloop*/while(*){let constructor = <><x><y/></x></>; }/*infloop*/M:while(typeof <x><y/></x>){}");
tryItOut("do {gc()\n } while(((--window).prototype = *::*) && 0);");
tryItOut("for(let y in []);");
tryItOut("let(prototype = <y><z/></y>.__lookupGetter__(\"constructor\"), __count__ = 3.141592653589793) ((function(){constructor = constructor;})());");
tryItOut("/*for..in*/M:for(let [constructor, __parent__] = <x><y/></x> in <y><z/></y>) yield false;");
tryItOut("/*for..in*/M:for(let __iterator__ in ((function  __count__ () { throw (prototype.__parent__ = window); } )(<y><z/></y>.__defineSetter__(\"\", gc()))))const __iterator__ = 0x99, prop = *;\n/*infloop*/do {with({__noSuchMethod__: #1# .. ({})}){function(y) { yield y; (window);; yield y; }export __proto__; } } while((__iterator__.__noSuchMethod__ setter= function  __iterator__ (__iterator__, prototype) { return .2(*::*) } ));\n");
tryItOut("while((function::constructor = [[]]) && 0)export *;");
tryItOut("yield;");
tryItOut("( /x/ )\nL:  const __noSuchMethod__\nwhile(( \"\" ) && 0)export constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__count__) in (__parent__)) {yield\n/*for..in*/for(let constructor in ((new Function)(1.3)))yield; }");
tryItOut("{/*for..in*/L:for(let [__count__, __proto__] = (([11,12,13,14].sort).throw((* !== __parent__))) in @foo.isPrototypeOf(null)) {let __parent__ = <x><y/></x>; } }");
tryItOut("L:switch(({a1:1})) { default: /*for..in*/for(let __iterator__ = new (<x/>)( /x/g ) in  /x/ ) const __iterator__;break; case 4: break;  }");
tryItOut("return;\ngc()\n");
tryItOut("/*infloop*/for( /x/g  for each (__parent__ in {}); new ((<x/> > @foo.@foo))(); <bbb xmlns:ccc=\"(function () { return [[]] } )\"><ccc:eee></ccc:eee></bbb>) throw true");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in  /x/g ) {const __count__; }");
tryItOut("try { try { with({}) for(let y in [5,6,7,8]) export *; } catch(__count__) { throw prototype; } finally { for(let y in [5,6,7,8]) return window.__defineGetter__(\"__proto__\", (__parent__).watch); }  } catch(prototype) { prop.let setter= [1,2,3,4].map.__noSuchMethod__ = __noSuchMethod__; } finally { try { yield (033 << <y><z/></y>.eval(__parent__.((-1)))); } catch(__count__) { with({}) with({}) { for(let y in [5,6,7,8]) export prototype; }  }  } ");
tryItOut("/*infloop*/for(this.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }); (null--); /*infloop*/L:for(let prop; window; __count__) { }) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in @foo !== undefined) {}export __parent__; }");
tryItOut("L:if((yield new Math.pow(({a2:z2}), #3={a:#3#}))) {return;; }");
tryItOut("do {/*infloop*/for(let __proto__; <y><z/></y>; *) ((1 for (x in []))).callexport __count__; } while(([1]) && 0);");
tryItOut("let(__parent__) { return eval(\"(\\tgc).call\", <><x><y/></x></>);");
tryItOut("{if((new Function(\"gc()\"))(<><x><y/></x><\r/>, #3={a:#3#})\t) var __parent__ = <x><y/></x>; else  if (<x/>.yoyo(<><x><y/></x></>) if ({})) let __iterator__ = 1e4; }");
tryItOut("let (constructor =  '' , __iterator__ = __proto__) { export __noSuchMethod__; }");
tryItOut("M:switch(this -= {}) { case 4: break; case Boolean(<x/>,  \"\" ): break; ({a2:z2});break; default: break;  }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prototype] = (p={}, (p.z = [[]])()) <= constructor ? <x/> : <x><y/></x> in eval(\"throw  '' ;\", @foo)) {<x><y/></x> }");
tryItOut("try { with({}) { let(__noSuchMethod__ = (new function  __noSuchMethod__ () { let constructor, prop = 5.0000000000000000000000; } ( \"\" )), __count__) { let(__iterator__, __parent__) ((function(){yield <><x><y/></x></> /=  /x/g ;})()); }  } catch(__count__) { try { return [033 for each (__iterator__ in false)]; } catch(__noSuchMethod__) { prop = __parent__; }  } ");
tryItOut("{/*infloop*/for(var __iterator__ = 4..@*; __iterator__ != function::__proto__; \nconstructor)  }");
tryItOut(" const __iterator__;");
tryItOut("/*for..in*/for(__proto__ in ((Math.pow)('fafafa'.replace(/a/g, function  prototype (__noSuchMethod__, __proto__) { yield; } )['fafafa'.replace(/a/g, @foo)]))){}");
tryItOut("yield\nreturn  /x/g ;");
tryItOut("L: {prop, __proto__ = <x/>;const prop = <><x><y/></x></>, __count__ = <><x><y/></x></>; }");
tryItOut("M:if((false || -=)) {return __count__;gc() } else  if ((new <><x><y/></x></>() * (<y><z/></y>.@*)) = (#0=[prototype < false])) M:/*\n*/while((*::*) && 0);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = export *; in this.zzz.zzz) function  __noSuchMethod__ ()[z1,,]");
tryItOut("for(let y in []);");
tryItOut("yield (p={}, (p.z = <><x><y/></x></>)());");
tryItOut("/*infloop*/for(const constructor; ( ''  .@ @foo); <><x><y/></x>.([1])</>) L:if(*) {<y><z/></y>; } else  if (window) export *;");
tryItOut("/*infloop*/do {gc()false; }\r while(*::*);");
tryItOut("/*infloop*/for((p={}, (p.z = (__proto__.prop))()); <x><y/></x>.(*::* != <><x><y/></x></>)\n; [] = x::constructor) {/*for..in*/for(var __iterator__ = <><x><y/></x></>.__defineSetter__(\"constructor\", <x><y/></x) in <x/>) constructor/*infloop*/L:for([,]; 0.1; null.isPrototypeOf(window)) {var function::__iterator__, __iterator__; }\fthrow StopIteration; }");
tryItOut("/*for..in*/for(const this['prototype'] in ((function(y) { yield y; function  __proto__ (constructor, __iterator__) { yield true } ; yield y; })(__parent__ = true))){throw __iterator__;export *; }");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = (uneval(undefined)) in <x><y/></x>) {__proto__, __noSuchMethod__; }");
tryItOut("do gc() while((({__proto__ getter: this })) && 0);");
tryItOut("with({__parent__: ([[]] %= <><x><y/></x></>)})");
tryItOut("if(this.zzz.zzz) return <><x><y/></x></>; else  if (null || __parent__) {(<x><y/></x>);yield; } else /*for..in*/for(const [prop, prototype] = String(0/0) in <><x><y/></x></>) {gc()constructor }\nexport *;\n");
tryItOut("{L:if((this.__defineSetter__(\"__count__\", true))) gc() else  if (null || window\f) {{}export prop; } }");
tryItOut("yield [z1,,] * -1;");
tryItOut("\tif(\tfalse) export prop; else  if (1.2e3) {export __noSuchMethod__;null; } else {export *;gc() }");
tryItOut("if(<><x><y/></x></>.yoyo(<><x><y/></x></>)) {export __parent__; } else  if (new ([z1])()) {throw false; } else continue ;");
tryItOut("L:with(__count__.__parent__){}");
tryItOut("M:if((yield prop)) __iterator__ = @foo, __iterator__ = null; else  if (<bbb xmlns:ccc=\"1.3\"><ccc:eee></ccc:eee></bbb>++) __noSuchMethod__; else {return <x><y/></x>;gc() }");
tryItOut("/*infloop*/do {M:if((-0)) {gc()(<x/>); }(('haha'.split).call).call\n } while(__iterator__ = ((__count__)( super )));");
tryItOut("if(({prototype: (try { export constructor; } catch(prop) { const __parent__, __count__ = false; } finally { window; } )})) /*infloop*/for([ \"\" .__parent__ for each (__parent__ in <><x><y/></x></>) if (window)]; (this.prototype) .@x:: eval(\"gc()\", <\r><x><y/></x></>);  /x/ .yoyo(<x><y/></x>)) {export __noSuchMethod__; } else  if ((delete (new (<><x><y/></x></>.__lookupSetter__(\"function::function::constructor\"))(<y><z/></y> .@x:: *::*, 1e81)))) with(new ({}).__lookupGetter__( /x/ ).__defineGetter__(\"prototype\", gc))return <><x>\t<y/></x></>;try {  } catch(__proto__ if (function(){export *;})()) { (<><x><y/></x></>); } catch(__noSuchMethod__ if (function(){})()) { (({a2:z2})); } ");
tryItOut("/*infloop*/\ffor(new Error(<><x><y/></x></>); (this if (prototype)); let (__noSuchMethod__, prototype =  /x/ ) function(id) { return id }) Math.sin");
tryItOut("/*infloop*/for(\nconstructor.__proto__ getter= <><x><y/></x></>; [[1].throw(<y><z/></y>)];  '' ) yield true;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in (undefined.__lookupGetter__(\"__count__\"))) export *;");
tryItOut("{var __parent__, __iterator__ = <x><y/></x>;throw this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (eval(\"(({}))[!.2].hasOwnProperty(\\\"__parent__\\\")\", \u2028.throw(<><x><y/></x></>)))['__proto__'] in (__parent__.unwatch(\"__noSuchMethod__\"))) {gc(){} }");
tryItOut("L: {gc()(null); }");
tryItOut("/*for..in*/L:for(let __iterator__ in ((Math.pow)(try { (__count__((({prototype: function(q) { return q; }()})))) = __iterator__; } finally { with({}) for(let y in []); } )))(new Function(\"{}\"))");
tryItOut("/*for..in*/for(__proto__ = (<x/>.unwatch(\"prop\")) in <x/>) {yield; }");
tryItOut("/*infloop*/for(let __count__; <y><z/></y>; [1,,] & <><x><y/></x></>) {function(y) { yield y; throw <><x><y/></x></>;; yield y; }; }");
tryItOut("try { __noSuchMethod__ = __proto__; } catch(constructor if <><!--yy--></>) { prop = prototype; } ");
tryItOut("({ __proto__: prop }) const __iterator__;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prop] = (<x/>.__lookupGetter__(\"each\").watch(\"__proto__\", ({}).__lookupGetter__)) in 1e81) yield  { yield; } ;");
tryItOut("/*for..in*/M:for(__parent__ in this.__defineGetter__(\"__iterator__\", ({}).__lookupGetter__)) {export constructor; }");
tryItOut("export *");
tryItOut("M:if(5.0000000000000000000000) {yield; } else  if (__count__ ? <x><y/></x> : window)  else /*infloop*/for(var [[], constructor, ({ __parent__: __iterator__ }), , ] = ++[] :: (constructor.__proto__ = undefined); [,,]; #1=[,]) yield;");
tryItOut("{var prototype, __iterator__ = <><x><y/></x></>;gc() }");
tryItOut("with({}) with({}) { with({}) throw StopIteration; } ");
tryItOut("if(({prototype: ({__iterator__: .2})})) {{const __proto__;return; } } else ([,,z1])");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prop.prop in window) \n");
tryItOut("L: /*infloop*/for((__iterator__-=window).@foo; -3/0; 5.0000000000000000000000 ? this : <x/>) {return;gc }");
tryItOut("switch((({ __noSuchMethod__: constructor,  { function  __iterator__ (__noSuchMethod__) { return {} }  } : __proto__ }) = (this.__defineSetter__(\"__proto__\", function(q) { return q; })))) { default: case 0: return window;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>++) let(__parent__, constructor) { yield;");
tryItOut("/*for..in*/for(prototype(<><x><y/></x></>) in ((({}).hasOwnProperty)((new (new Function)().__lookupGetter__(\"prototype\")))))");
tryItOut("if(undefined) { if ( /* Comment */@foo.__iterator__ = __count__ =  \"\" )  /x/g ; else yield <x><y/></x\t>;}");
tryItOut("/*infloop*/do  \"\" ; while(window);");
tryItOut("L:if('fafafa'.replace(/a/g, function (constructor) { yield __proto__ } )) return <y><z/></y>; else  if ((let ([], __parent__ = <x/> .@ @foo) new RegExp('haha'.split(), 1.3))) {{} }");
tryItOut("let(prototype = [15,16,17,18].filter(__iterator__, (<x/> > @foo))) { with({}) { \nthrow constructor; } ");
tryItOut("if(*) { if ((window ? 3 : <y><z/></y>)) throw <><x><y/></x></>; else ;let __parent__;}");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(const __parent__; new Math.sin(); this.__defineSetter__(\"({ __parent__: prototype, constructor: [, , ] })\", 033)) /*for..in*/for\f(const __count__ in ((/a/gi)(new Object(__count__, this))))export __parent__;");
tryItOut("/*for..in*/for([__proto__, prop] = [[1]] in  /x/ .isPrototypeOf(__iterator__)) prop");
tryItOut("{(-0)yield; }");
tryItOut("/*infloop*/do {if(-3/0) { if ((-0)) export __count__;} else {export __proto__;return; }yield; } while((yield false));");
tryItOut("/*infloop*/for(let __noSuchMethod__ =  /x/g ; <><x><y/></x></>; <x/>) const prototype = #1#;");
tryItOut("if(this.zzz.zzz) { if (new (true//h\n.__parent__)(<x><y/></x>.yoyo(<x><y/></x>).__defineGetter__(\"__iterator__\", null))) {return; } else __count__ = @foo, __parent__;}");
tryItOut("/*infloop*/for([15,16,17,18].sort(this, 1e4); (<x/>.yoyo(<><x><y/></x></>)); (~null)) ([1,,]);");
tryItOut("let prototype, constructor;");
tryItOut("/*infloop*/do {export __iterator__; } while( '' )");
tryItOut("with(([15,16,17,18].some(eval, <><x><y/></x></>))){break L;break ; }");
tryItOut("/*infloop*/for(let __parent__ = !<><x><y/></x></>/*; constructor.__defineGetter__(\"__noSuchMethod__\", Math.sin);  /x/g .__lookupSetter__(\"prop\")) {return <x><y/></x>; }");
tryItOut("M:if(\n(function(q) { return q; })(new RangeError(window, <y><z/></y>), this)) {while((window) && 0){#1=[#1#]; }{yield @foo; } } else  if (__iterator__.watch(\"__count__\", [1,2,3,4].map)) M:while((<><x><y/></x></>) && 0){export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in (function ([y]) { })()) throw  \"\" ;");
tryItOut("do {throw #1=[#1#].constructor; } while((prop.constructor) && 0);");
tryItOut("__proto__ = __proto__;");
tryItOut("L:if((<bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb> for (__noSuchMethod__.__noSuchMethod__ in constructor)/*\n*/ if (<><x><y/></x></>))) { if (([,].__lookupGetter__(\"__count__\"\t)) &&  /= __noSuchMethod__) with((({}).__lookupGetter__)){export *; } else M:do {(null);break ; } while(([[1]] :: <><x><y/></x></>) && 0);}");
tryItOut("if(__count__) [z1];");
tryItOut("/*infloop*/for(const __proto__; [11,12,13,14].filter.watch(\"constructor\", (__count__ =  /x/ )); new function () { return <><x><y/></x></> } ( /x/g , @foo)) {with((3\n)++){ '' .__count__;;\nthrow #1#;\n } }");
tryItOut("with(<x><y/></x>)let  = @foo, __proto__;");
tryItOut("switch({}) { case 0: break; default: /*infloop*/for(<><x><y/></x></>;  '' ; *::*) {gc(){} }break; if( '' ) { if (<x><y/></x>) return <><x><y/></x></>;} else export prototype;break; case 1: propcase (constructor--): (@foo); }");
tryItOut("/*infloop*/for(var delete; (({ constructor: prop })); [prototype, , , __parent__, ] = <x><y/></x> :: <x><y/></x>) {/*infloop*/M:for(const __noSuchMethod__; <x><y/></x>; false) ; }");
tryItOut("throw __proto__;");
tryItOut("{;(<x><y/></x>); }");
tryItOut("if(function(y) { yield y; export *;; yield y; }) if(([<y><z/></y>].filter(eval))) { } else if(this.__defineGetter__(\"prototype\", this)) {return; } else  if ((uneval(true))) const __iterator__ = __iterator__, __proto__ = <x><y/></x>;");
tryItOut("if(*) yield window;");
tryItOut("if((eval).call(false,  /x/ .eval([(<x/>\n)].some(window)))) { if (<x><y/></x>.__defineGetter__(\"constructor\", ({}).hasOwnProperty) ? <x/>.__lookupGetter__(\"__proto__\") : this & <><x><y/></x></>.watch(\"set\", function (__count__))) return\nreturn <y><z/></y>; else {L: {/*infloop*/for(__parent__; 1e-81; *) {- }yield; }export prop;\nthis;\n }}");
tryItOut("while((<x><y/></x>) && 0)continue M;");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */L: for  each(var ['__parent__'] in 1e+81) {yield; }let prop, __iterator__ = window; } while(((uneval(constructor = (uneval(false))))));");
tryItOut("throw true;\nthrow <x><y/></x>;\n");
tryItOut("L:switch(new function::__count__ = function  __parent__ (__count__) { return window } (window).throw([(Error()) for each (__count__ in (throw null)) if (undefined)])) { case 1: M:while((*) && 0){/*infloop*/for(({ prop: \r[constructor, ({ prop: __count__, __parent__: __proto__ }), , ({ __count__: __parent__, __iterator__: __noSuchMethod__ }), ], __parent__: __count__ }) = (({prototype: <x><y/></x> })); ([]--); this.zzz.zzz.@*) /*\n*//*infloop*/for(<x><y/></x>.hasOwnProperty(\"__parent__\"); (({1.2e3.__defineGetter__(\"constructor\", (function  __noSuchMethod__ (prop, prop) { return  ''  } ).call): (prop)\f\t })\t.prop); ([11,12,13,14].filter)) (true); } }");
tryItOut("{L:while((<><x><y/></x></>) && 0){return <x/>;{} }do \t{{} } while((*::*) && 0); }");
tryItOut("/*for..in*/M:for(prototype\t in ((function  <><x><y/></x></> ? <><x><y/></x></> :  /x/g  (prop) { return (1e+81.__lookupSetter__(\"__count__\")) } )(<x/>)))L:if([[1]].hasOwnProperty(\"prop\")) { if ((__noSuchMethod__.prototype setter=  /x/g )) {export *;return -0; }} else {const __iterator__, __iterator__ = 033;var prototype; }");
tryItOut("/*infloop*/do {/*infloop*/L:for(this == __count__; (new (__proto__.prototype = -0)()); (__noSuchMethod__ = undefined).valueOf(\"number\")) __count__/*for..in*/for(const prop in <x><y/></x>) {yield;{} } } while(arguments.constructor = (void 1.3));");
tryItOut("/*for..in*/M:for( \"\" .__noSuchMethod__ in __iterator__) ;");
tryItOut("\fif((#1=prototype = __noSuchMethod__)) gc()");
tryItOut("do with({__iterator__: \t[11,12,13,14].filter}){export __parent__; }\n while(((({ get prop()constructor.__proto__ = this.yoyo(0.1), constructor: __parent__.constructor setter= <x><y/></x> ? 1e+81 : <x/>.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map) }))) && 0);");
tryItOut("/*for..in*/for(let __parent__ = <x/> in function  __count__ () { yield gc((Math.pow)(this, <><x><y/></x></>),  '' ) } (__iterator__.constructor <<= this.__defineGetter__(\"__count__\", @foo))) {\f[].valueOf(\"number\");; }");
tryItOut("if(new (Math.sin)(<x><y/></x>, this) .. ({__count__: -3/0 })) continue ; else  if ((try { (__iterator__); } finally { (#1#); } ).call(let (prop = <><x><y/></x></>, __parent__) [[1]], (\n<y><z/></y>), ({})) ? ((p={}, (p.z = <><x><y/><\t/x></>)())) : __proto__ = *) try { __count__.prop = prototype; } catch(prototype) { try { var __parent__, __count__; } finally { return; }  } ");
tryItOut("if(<ccc:ddd>yyy</ccc:ddd>) { if (prototype if (<><x><y/></x></>)) ;} else /*infloop*/M:for(const ({ __count__: __proto__, __count__: prototype }) = <x><y/></x> % *::*; \nthis; ( '' .__iterator__)) {var __proto__ = constructor, __proto__; }");
tryItOut("if({}) { if (<y><z/></y>)  else {__iterator__ = constructor; }}");
tryItOut("return null;");
tryItOut("/*for..in*/for(let __count__ = prototype.constructor in <><x><y/></x></>) if(<>(<x)<y/</>) var prop; else {yield this; }");
tryItOut("/*for..in*/for(let constructor in <x><y/></x>) throw <x/>;");
tryItOut("let(__proto__, [] = function ([y]) { }) ((function(){let(__iterator__) ((function(){{}})());})());");
tryItOut("this.zzz.zzz\n/*infloop*/for((false.eval([[]])); false >> <x><y/></x>; (yield [,,z1])) {export *;break M; }");
tryItOut("/*for..in*/for(let [__count__, __count__] = constructor = constructor = *::* in new (function  __count__ () { yield; } )(*::*.__defineGetter__(\"prototype\", (<x/>).watch),  \"\" ) &= RegExp()\t) let constructor;");
tryItOut("let prop = null, constructor = yield;;");
tryItOut("while(((eval)((p={}, (p.z = @foo)()).watch(\"__parent__\", Function), (([z1] >>= prop)))) && 0){L: {<x><y/></x>; }/*infloop*/for(__count__ = (new Number( /x/g , <x/>)); (uneval(<><x><y/></x></>)); __count__.prototype) export *; }");
tryItOut("L: __count__;");
tryItOut("/*for..in*/for(var __parent__ = ({ prototype: ({ __iterator__: ({ constructor: __iterator__, __proto__: __parent__ }) }) }) = ({ __parent__: [] }) = .hasOwnProperty(\"__proto__\") ? !<x><y/></x> : (#1#.eval(*)) in ({})) {if(undefined , [,,z1]) throw @foo; else  if ((let (__parent__ = __proto__) <x><y/></x>)) {{}var function::__iterator__ = *,  ''  = 1e81; } }");
tryItOut("continue M\n");
tryItOut("return false.__count__;");
tryItOut("do {} while(( '' ) && 0);");
tryItOut("/*for..in*/for(const __iterator__ in ((Math.sin)((prop.__count__ = false))))export __count__;");
tryItOut("/*for..in*/for(const [__proto__, prop] = (new Function( \"\" ) %  /x/ .valueOf(\"number\")) in <bbb xmlns:ccc=\"false.__defineSetter__(\"__parent__\", Math.pow)\"><ccc:eee></ccc:eee></bbb>//h\n) with(this.__proto__){__proto__; }");
tryItOut(";with({constructor: ({ __parent__: __count__ }) = Math.sin(<x><y/></x>,  \"\" )}){/*for..in*/for(let constructor in ((({}).hasOwnProperty)(( /x/g .__parent__))))export *;yield window; }");
tryItOut("M:with(true.__proto__){yield; }");
tryItOut("if(( /x/ .hasOwnProperty(\"__iterator__\"))) ; else  if (new (/a/gi)()) {continue ;return <x><y/></x>; } else {( /x/g ); }");
tryItOut("with(this.zzz.zzz){L: {return this;; } }");
tryItOut("/*infloop*/L:for( \"\" ; 033; undefined) {export *; }");
tryItOut("if(1e-81) { if ((__count__ = __count__ = <x><y/></x> <= __proto__ = 1e-81)) throw false;} else {export *; }");
tryItOut("for(let y in [5,6,7,8]) return __noSuchMethod__;");
tryItOut("throw prop;");
tryItOut("yield *::*;");
tryItOut("/*infloop*/while(new ((this).watch)(this)){export prototype;yield prop; }");
tryItOut("{/*for..in*/for(var __count__ in ((false)(3)))return *::*;yield 1e+81; }");
tryItOut("L: /*infloop*/while(__proto__.__iterator__ = __proto__)return;");
tryItOut("with({__count__: <x><y/></x>}){var constructor; }");
tryItOut("L:if((typeof @foo)) {} else {export __proto__; }");
tryItOut("/*for..in*/M\f:for(var __iterator__ in ((__parent__.(__count__).__noSuchMethod__)((\f(__proto__ = window))[__parent__]))){yield <x><y/></x>;<><x><y/></x></> }");
tryItOut("/*infloop*/L:for(let __iterator__ = <><x><y/></x></>; ({a1:1}); <x><y/></x>) {yield <x/>;1e4; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(gc().__parent__ in *) {return 1e4;return true; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.prototype in <>\f<x><y/><\f/x></>) {export *;var prop = @foo, prototype = *; }");
tryItOut("{if( /x/ ) \fyield <x/>; else  if ([,,]) {return;yield <x><y/></x>; } else yield {}; }");
tryItOut("let (prototype = @foo, __iterator__ = #3={a:#3#}) { L: {break ; } }");
tryItOut("switch(<><x><y/></x></>\n) { default: function (prop, prop)<y><z/></y>let __parent__; }");
tryItOut("let(prop) ((function(){throw StopIteration;})());");
tryItOut("if((window ? #1# : *::*) if ( \"\" )) yield <><x><y/></x></>.isPrototypeOf(*::*);");
tryItOut("/*infloop*/for({}; *; this) ((-1)).call");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (__parent__.__count__ setter= ((({}).__lookupGetter__)(<><x><y/></x></>)).__defineSetter__) in constructor >>>=constructor = <x><y/></x>) <><x><y/></x></>;");
tryItOut("switch((__iterator__)) { default: break;  }");
tryItOut("/*infloop*/for([1,,].(<y><z/></y>.__lookupGetter__(\"__proto__\")); [({ __iterator__: ({ __proto__: new gc(3.141592653589793), __proto__: [({ prop: __proto__, __count__: ({ __count__: __iterator__, __parent__: prop }) }), , constructor, __noSuchMethod__] }) }), ({ constructor: ({ __parent__: __count__ }), prototype: __count__ })] = ([(new new  /x/ ()(this.zzz.zzz))])[prototype & __parent__, this.__defineSetter__(\"__parent__\", Math.sin)]; [window]) {with({}) (1e81);with(({}).__lookupGetter__())gc() const prop; }");
tryItOut("L:with({default: break; case (this--): throw <x><y/></x>;break; case 8: export *;: (function (__iterator__)<x><y/></x>.hasOwnProperty(\"__iterator__\"))}){if(eval(\"__noSuchMethod__\", null)) yield; else  if (this.__defineSetter__(\"__parent__\", <x><y/></x>)) let prop, __proto__ = <y><z/></y>; else {break L\n } }");
tryItOut("if(false) function  __noSuchMethod__ (prototype) { yield this }  const __iterator__;");
tryItOut("L:if( /x/  / .2) { if (new (1.2e3)((__parent__)(window, window), (-1))) /*for..in*/for(let __proto__ in (('haha'.split)(033)))\f{var constructor = ({a1:1}), delete; }} else yield const __proto__ = window;");
tryItOut("/*infloop*/for(0 .@x:: 1.2e3\n; \n__count__ = true; -1.__defineGetter__(\"constructor\", gc)) {with({__count__: (<><x><y/></x></> != @foo)})break ;gc() }");
tryItOut("let (prototype = , constructor = #3={a:#3#}) { function  __proto__ (__count__) { return false }  }");
tryItOut("let (__noSuchMethod__ = (['prop'] = (__proto__ = [,])()\n), __iterator__ = ({ __noSuchMethod__: ({ __count__: prop }) }) = ({prop: <><x><y/></x></>}).propertyIsEnumerable(\"prop\")) { M:switch(<x/> @ true) { case 2: export *;break; case __noSuchMethod__ = <y><z/></y>:  } }");
tryItOut("{} const __proto__;");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in ((<x/>)[<x/>])) {M:switch(({ set __noSuchMethod__ __parent__ () { const new Function; }  })) { case <><x><y/></x></>.__lookupGetter__(\"__proto__\").eval(((p={}, (p.z = [[]])()))):  } }");
tryItOut("");
tryItOut("[({ constructor: __proto__ }), [], , ({ prop: ({ <x><y/></x>: ({ __parent__: [, ({ __iterator__: __proto__, __count__: ({ __proto__: prop }) }), [({ __count__: constructor }), , , , ({ __proto__: prop })], ({ __proto__: constructor, prop: [, , , , constructor] }), ] }) }) })].__parent__");
tryItOut("/*for..in*/for(const return  { return window } ; in \t#2=[__noSuchMethod__ * this]) {/*infloop*/L:do export <><x><\ty/></x></>; while(__proto__ = __noSuchMethod__.__defineSetter__(\"__parent__\", function (prototype, <x><y/></x>, __iterator__)<><x><y/></x></>));break M; }");
tryItOut("");
tryItOut("if(Object( /x/g )) {const __proto__; } else  if ((+[11,12,13,14].map)) let(prop) { for(let y in [5,6,7,8]) yield; else \f{gc() }");
tryItOut("{/*for..in*/for(let prototype in ((Math.pow)(((-1).__lookupSetter__(\"__parent__\"))))){yield null; }export prototype; }");
tryItOut("__count__, prototype = <x\f><y/></x>;");
tryItOut("try { (<x/>); } catch(prototype if (function(){gc()})()) { const constructor = <x><y/></x>, __noSuchMethod__ = function(id) { return id }; } catch(__proto__ if (function(){return  /x/ ;})()) { ; } finally { break M; } ");
tryItOut("if(-3/0) {/*for..in*/for(let prototype = [.2] in -{}) {/*for..in*/for(let __noSuchMethod__ =  ''  in #1=[#1#]) {return; }constructor; } } else  if ([1] .@*:: (-1)) {/*infloop*/do {var __iterator__, __noSuchMethod__; } while(@foo);gc() } else gc()");
tryItOut("/*infloop*/do {{}var prop, __noSuchMethod__ = *::* } while(<><!--yy--></>);");
tryItOut("L:if(prop = this) { if ((p={}, (p.z = window)())) {continue L; }} else {let __iterator__ = [1], constructor; }");
tryItOut("/*infloop*/do if([z1].eval(false)) export *; else yield  \"\" ; while(({__iterator__: <x><y/></x> >= this.__defineGetter__(\"__iterator__\", (false).watch), __count__ getter: (<><x><y/></x></>.hasOwnProperty(\"__iterator__\")).watch }//h\n));");
tryItOut("for(let y in []);");
tryItOut("if('fafafa'.replace(/a/g, Math.sin)) { if (__proto__ = [,,]) if(__iterator__) return; else  if (@foo) yield; else {yield window; }}");
tryItOut("L: {const prototype;true; }");
