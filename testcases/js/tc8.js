tryItOut("L:with({__proto__: @foo}){yield; }");
tryItOut("do  while((new window(0x99, <><x><y/></x></>).__noSuchMethod__ = this.__defineSetter__(\"prototype\", (1 for (x in []))) in (this.__defineGetter__(\"prop\", function (__count__)<><x><y/></x></>))) && 0);");
tryItOut("/*infloop*/while(__proto__.*)return;");
tryItOut("prop = __proto__;\n__iterator__ = __count__;\n");
tryItOut("M:if(<><x><y/></x></>) { if (0/0) break L; else {return; }}");
tryItOut("yield ({__iterator__: (__noSuchMethod__ = window .@*:: @foo) });");
tryItOut("let (getter, prototype =  /x/ ) { /*for..in*/for(let [prototype, __parent__] = 0/0 in window) {gc() \"\" ; } }");
tryItOut("do __noSuchMethod__ = (String(<x/>,  /x/g ).__defineGetter__(\"__noSuchMethod__\", function  constructor (__iterator__, __noSuchMethod__) { yield <><x><y/></x></> } )), __parent__ = (3/0)(); while((window) && 0);");
tryItOut("while(((__proto__)()) && 0)export *;");
tryItOut("/*infloop*/for(const prop = null; (constructor = __count__ = <><x><y/></x></>.yoyo(<x><y/></x>)); ({ set prop __proto__ ()\f({ set __proto__(__iterator__, __parent__)(new /a/gi(__iterator__)),  get __proto__(__count__) { /*infloop*/L:for(const __proto__ =  /x/ ; 4.; #1#) {prototype; } }  }), constructor setter: function(y) { yield y; throw __proto__\n; yield y; } })) {const constructor(1 for (x in [])) }");
tryItOut("M:with({prop: <x/> .@x:: <x><y/></x>.propertyIsEnumerable(\"__count__\")}){break L;(constructor); const __parent__; }");
tryItOut("let (__iterator__) { constructor; }");
tryItOut("let(__iterator__) ((function(){})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in __proto__(true) = (*::*.__lookupSetter__(\"__count__\"))) {yield __parent__;/*for..in*/for(var [__parent__, function::__proto__] = 0 in 1.2e3) {gc() }\n(this); }");
tryItOut("<><x><y/></x></>");
tryItOut("throw prop = prop");
tryItOut("/*for..in*/for(<y><z/></y> in window) const __proto__ = <x/>\nundefined;return *::*;");
tryItOut("this.zzz.zzz");
tryItOut("yield <x/>;yield;");
tryItOut("/*for..in*/for(__count__ in (__count__ = (new Math.pow(*::*, 1e81)) / this.zzz.zzz).propertyIsEnumerable(\"__parent__\")) /*infloop*/L:do L: {continue L; } while(<y><z/></y>.valueOf(\"number\"));");
tryItOut("/*infloop*/L:for(const __proto__; __parent__ = #1# / ({a1:1}); ('fafafa'.replace(/a/g, Math.pow))) M:if(*::*) {return {}; } else  if ( /x/ ) ");
tryItOut("/*for..in*/for([__count__.__parent__, prototype] = this.zzz.zzz in false %= this) if(<y><z/></y>) {{} }");
tryItOut("L: {for(let y in []); }");
tryItOut("try { try { let __proto__; } catch(__proto__ if (function(){\n(<y><z/></y>);})()) { __parent__ =  /x/g , this = *::*; } finally { export *; }  } catch(__iterator__ if (function(){prop = __count__;})()) { return (prop.__count__ = ([15,16,17,18].filter(({}).hasOwnProperty, 0/0))); } ");
tryItOut("/*infloop*/for(<><x><y/></x></>; prototype = 3; prop = this) yield false\ncontinue ;");
tryItOut("L: {/*infloop*/for(let __iterator__; {}; [,,]) (__count__); } const __noSuchMethod__;");
tryItOut("if(this) return *; else  \"\" ;");
tryItOut("if(<> /x/g .__iterator__</> << <x><y/></x>) {with(<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\")); }");
tryItOut("yield; const __noSuchMethod__;");
tryItOut("{}continue ;");
tryItOut("throw __parent__;");
tryItOut("M:if(<x/>) let __parent__ = *, __noSuchMethod__; else  if ( /x/ ) export prop; else {__noSuchMethod__ = true; }");
tryItOut("/*infloop*/do export prototype; while((__proto__()) ? window : __iterator__);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let ({__parent__: [[1]]}) in (__parent__ = <x><y/></x>)\n) /*for..in*/L:for(let __noSuchMethod__ = __parent__ =  /x/  in this) const __proto__, __parent__\t;");
tryItOut("if(<y><z/></y>)  else  if (prop, prop\t) (<y><z/></y>); else M:if(true) { if ([1]) var __count__, __iterator__ = null; else {let __proto__ = 0/0, __proto__; }}\nconst __count__;\n");
tryItOut("/*infloop*/for(({ prop: __noSuchMethod__, __proto__: prototype }) = this.zzz.zzz; ((this.__defineGetter__(\"let\", Function)).hasOwnProperty(\"__noSuchMethod__\")); ((((uneval([z1,,]))))(<x><y/></x> >>>  /x/ ))) gc()");
tryItOut("constructor = __proto__;");
tryItOut("yield *;");
tryItOut("M:if((((+Z).eval(<><x><y/></x></> >>>=<y><z/></y>)) if ((<><x><y/></x></>.isPrototypeOf(__proto__))))) {M:if( '' .__lookupSetter__(\"__noSuchMethod__ setter: function(y) { yield y; window;; yield y; }\")) { if (typeof ) {/a/gi }} else {}var __proto__ = <><x><y/></x></> << true & (<x><y/></x>.__defineGetter__(\"__count__\", this)); }");
tryItOut("if(undefined - <><x><y/></x></>) { if (prop === [11,12,13,14].some) {yield;yield [1,,]; } else {\nreturn; }}");
tryItOut("export *;");
tryItOut("{const constructor, function::constructor;{} }");
tryItOut("/*infloop*/for(let __proto__;  /x/ ; <><x><y/></x></>()) throw @foo;");
tryItOut("/*infloop*/for(let __count__ = <xxx>{prototype}</xxx>; (Exception()+=({a1:1})) |= undefined.@*[<><x><y/></x></> < null]; ('fafafa'.replace(/a/g, function(y) { yield y; let (__noSuchMethod__, prototype) { {} }; yield y; }))) /*\n*/while((true.valueOf(\"number\")) && 0){([1]); }");
tryItOut("M:if(<y><z/></y>) { if (__proto__) yield;} else __count__ = 5.0000000000000000000000;");
tryItOut("if(null) {{}throw *::*; } else  if (<x/>) (this); else {export __count__; }");
tryItOut("/*for..in*/for(__parent__ in ((function (__noSuchMethod__, prototype) { return window } )(function::__count__))){throw <y><z/></y>; }");
tryItOut("var __parent__, __iterator__;\nbreak L;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ constructor: ({ __iterator__: __noSuchMethod__ }), (function ([y]) { })().__parent__: [, prototype] }) in -function::prop) {var __count__, prototype; }");
tryItOut("if(({}).hasOwnProperty) {} const prototype; else  if (new (<><x><y/></x></>)(try { yield; } catch(prototype if (function(){(@foo);\f})()) { var prototype; } catch(prop if <><x><y/></x></>) { return; } catch(__count__) { window } ) for (prop in window)) constructor; else {yield; }");
tryItOut("if(__proto__ = (<>yyy</>.((window ? \f(prop = true / this.__defineGetter__(\"__proto__\", (function (prop, __iterator__) { yield <><x><y/></x></> } ).apply)) : <x/>)))) {continue ; } else  if (new function (({ __count__: ({ constructor: constructor }), constructor: __iterator__ }), __iterator__) { return -0 } ([,,])) {export __count__; }");
tryItOut("/*for..in*/for(const [__parent__, constructor]\f = 'fafafa'.replace(/a/g, ({}).__lookupGetter__) in throw undefined;) break L; const __iterator__;");
tryItOut("/*for..in*/for(var __parent__ in ((yield <><x><y/></x></>))) if(throw <><x><y/></x></>;) gc() else  if ([,,]) var __parent__ = <x/>;");
tryItOut("prototype = __iterator__;");
tryItOut("/*infloop*/do var __count__ = ({}), prototype; while(new <><x><y/></x></>(<x><y/></x>) += (1.3.__noSuchMethod__));");
tryItOut("with(<y><z/></y>.__count__)(__noSuchMethod__\n)");
tryItOut("{throw window;/*infloop*/for(const __noSuchMethod__ = <><x><y/></x></>.valueOf(\"number\"); <x/>; <x><y/></x>.(__parent__)) {__iterator__;null; const __proto__; } }");
tryItOut("if(((p={}, (p.z = (false)[ /x/ ])()))) while((__count__) && 0)break L; else throw <x><y/></x>;");
tryItOut("/*infloop*/M:for(var [({ prototype: [[, ], , __noSuchMethod__], __proto__: ( ''  for (__noSuchMethod__ in @foo)) }), , , , __count__] = (prop = <><x><y/></x></>.__iterator__); prototype = __proto__; constructor.constructor.valueOf(\"number\") :: let (__proto__)  /x/ .watch(\"prototype\", /a/gi)) {switch(true) { default: let __iterator__ = constructor; }gc() }");
tryItOut("var __parent__, __parent__\ncontinue ;");
tryItOut("/*for..in*/for(let __proto__ in ((*)((<><x><y/></x></>[<><x><y/></x></>]))))yield constructor;");
tryItOut("if((__parent__ = __parent__)) { if (*::*.throw(@foo)) export *; else <x/>;}");
tryItOut("if( /x/g ) __noSuchMethod__ = this, __count__ = this;");
tryItOut("/*infloop*/for(var prototype; Exception(@foo, <x><y/></x>); (<x><y/></x> & null)) return");
tryItOut("let(__proto__) ((function(){yield;})());");
tryItOut("L:if(this.__defineSetter__(\"__iterator__\", function  __parent__ () { break ; } )) {0x99; } else  if ( '' ) {yield 033; } else {( /x/ );<y><z/></y>; }");
tryItOut("/*for..in*/for(let [prototype, prop] = try { let __proto__; } catch(__count__ if ({a1:1}) / --<x/>) { const __iterator__ = #1=[#1#], prop; } catch(constructor if (function(){;})()) { return; } finally { throw __iterator__; }  in <x><y/></x>) {{ }yield @foo; }");
tryItOut("/*infloop*/M:for(let constructor = undefined; __parent__; <x><y/></x>) {<><x><y/></x></>;return null; }");
tryItOut("/*for..in*/M:for(let constructor = new (let (__proto__ =  '' ) __count__)(this.__defineSetter__(\"prop\", [1,2,3,4].slice))() in @foo++) return;");
tryItOut("/*for..in*/M:for(const prop in 1e-81) {/*\n*/(<><x><y/></x></>);gc() }\nlet __iterator__ = <><x><y/></x></>;");
tryItOut("return undefined;");
tryItOut("for(let y in [5,6,7,8]) __parent__ = __iterator__;");
tryItOut("/*infloop*/L:do const prop, __iterator__ = 1e+81; while(__parent__ = <x><y/></x>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in -3/0) return *::*;");
tryItOut("{<><x><y/></x></>; const __proto__; }");
tryItOut("L: let __noSuchMethod__ = this, __parent__;");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = -0.__defineSetter__(\"prototype\", function  prop (constructor) { yield *; } ) in *::*.__defineGetter__(\"<y><z/></y>\", function //h\n(__noSuchMethod__) { return window } )) {{;continue L; } }");
tryItOut("/*for..in*/for(prop in (('haha'.split)([1]))){/*infloop*/for(let prop; true.prop; 4. ^ 1e-81.*) do const __noSuchMethod__ = null, prototype; while((@foo) && 0);with({}) return; }");
tryItOut("with({get: constructor = default: false;(this);break; case 2: break; })throw window;");
tryItOut("yield  '' ;");
tryItOut("with(yield <x><y/></x>;)return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in ( '' .hasOwnProperty(\"__iterator__\"))) (1 for (x in []))");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("constructor = __iterator__;");
tryItOut("/*infloop*/M:for(const constructor; 3/0 -= __parent__; window) __proto__");
tryItOut("switch(undefined) { default:  }");
tryItOut("/*for..in*/for(let prop in __count__) function(q) { return q; }");
tryItOut("yield <><x><y/></x></> const constructor;");
tryItOut("if([11,12,13,14].filter) {throw <x><y/></x>;<><x><y/></x></> } else  if ( /* Comment */([1,,])[#1#]) {} else {yield; }");
tryItOut("let (prototype = <><x><y/></\fx></>) { with({__iterator__: <><x><y/></x></>}){gc()gc() } }");
tryItOut("while(((eval(1.3, <><x><y/></x></>))) && 0)export prototype;");
tryItOut("L:if(<><x><y/></x></>) {gc() }");
tryItOut("L:(0){ }try { this.zzz.zzz; } catch(__count__ if true .@ String(<><x><y/></x></>.__defineGetter__(\"__proto__\", *))) { for(let y in [5,6,7,8]) yield new (({}).__lookupGetter__)(); } catch(constructor) { __noSuchMethod__ = __proto__; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in ({\tprototype:  .. <x><y/></x> *= *::*, __noSuchMethod__: <x/>.isPrototypeOf(<><x><y/></x></>) })) continue ;");
tryItOut("let (__iterator__, __parent__) { yield this; }");
tryItOut("/*for..in*/M:for(const [prop, __iterator__] = (this.zzz.zzz) in new (__count__.__lookupGetter__(\"__proto__\"))) {yield <x><y/></x>; }");
tryItOut("if(<x><y/></x>) { if (<><x><y/></x></>) <x><y/></x>} else {yield @foo; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in prop = <><x><y/></x></>[(<x><y/></x>.eval(0))].valueOf(\"number\")) <x/> = window;");
tryItOut("if(1.2e3) {const __proto__;export *; }\n(__parent__.constructor);");
tryItOut("with(@foo)let __parent__, __count__ = [[1]];");
tryItOut("/*for..in*/for(const [get, __parent__] = eval().__defineSetter__(\"__proto__\", 'haha'.split) in <x><y/></x>.([,])) {return;__parent__ = this, __count__ = null; }");
tryItOut("switch(new (__parent__)() ? this.__defineGetter__(\"function::__proto__\", (new Function(\"yield undefined;\")))++ += [1][__iterator__] : ({__parent__: <y><z/></y>, __count__: * })) { default: if(<y><z/></y>) { if (#3={a:#3#}) {{}yield <x><y/></x>; }} else {const __parent__, prop;; }break;  }");
tryItOut("M:if((((1 for (x in [])))())) {;( \"\" ).watch } else {{(0x99); } }");
tryItOut("/*for..in*/for(var prototype = (window.hasOwnProperty(\"__proto__\")).__iterator__ in new (1 for (x in []))()) if(<x><y/></x>) { if ( /x/ .isPrototypeOf( '' )) {eval }} else export *;");
tryItOut("/*infloop*/for(let __count__; (<><x><y/></x></> |=  /x/g ); \farguments % <x><y/></x>((prototype.__count__)) {throw 033;{this; } }");
tryItOut("if(0x99) {([z1]); }");
tryItOut("/*infloop*/while(__iterator__.__parent__)gc()");
tryItOut("if(<x><y/></x>) { if (__proto__) (true);} else prototype = <><x><y/></x></>;");
tryItOut("{return (-0); }");
tryItOut("if(yield __noSuchMethod__) {L:if(window(<y><z/></y>)) {false }with({__proto__: <x/>[<y><z/></y>]})__proto__ } else  if (({ constructor: __iterator__ }) = (new new Function(<y><z/></y>))) const __noSuchMethod__ = prop;");
tryItOut("throw <x/>; const __parent__;");
tryItOut("/*infloop*/for(__count__; continue M *= (yield __count__|=<x><y/></x>); (set.propertyIsEnumerable(\"prop\"))) {yield; }");
tryItOut("try { let(__parent__) ((function(){(case <x><y/></x>: <x/>;);})()); } catch(__count__ if <x/>) { throw StopIteration; } \n");
tryItOut("if(((__proto__ = <x><y/></x> ^= 1.2e3))) {\tconst __proto__ = <x><y/></x>; } else  if ((<><x><y/></x></> % this) <  /x/g .__proto__ , ({__parent__: <x><y/></x>})) prototype = @foo, constructor =  '' ;\flet (constructor, prop) { export *; }");
tryItOut("(<y><z/></y>)");
tryItOut("/*infloop*/for(__proto__; (yield <x><y/></x>); ([arguments].__defineGetter__(\"function::prop\", /a/gi))) /*for..in*/for(__proto__ in <x><y/></x>) {continue ; }");
tryItOut("L:while((<x><y/></x>[<><x><y/></x></>]) && 0){/*infloop*/for(let ({ prototype: ({ prop: ({ prop: prop }), __iterator__: __proto__ }) }) = (-3/0.__lookupSetter__(\"__parent__\")); ((function(q) { return q; })(({ set __count__ prototype (function::__parent__) { export __proto__; }  }), __count__)); (new Iterator(-0))) {__noSuchMethod__ = <x><y/></x>, __count__ =  /x/g ;/*for..in*/for(prototype in ((/a/gi)([1])))default: case 0: yield .2;break; __iterator__ = false;break; case prop: break; case 8: export __iterator__;break; (__proto__);break; case 2: break; break; break; case 9: yield;const __noSuchMethod__ = 3, __count__;break;  } }");
tryItOut("var __count__;");
tryItOut("/*for..in*/L:for(var [__parent__, __noSuchMethod__] = (\nnew (this)(__parent__.__proto__).yoyo(((new [1,2,3,4].map(<x/> instanceof window, __count__) if ({}))))) in __iterator__ = (#1\t=[<x/>.__count__ =  \"\" ]) || new (/a/gi)(eval(\"({try { yield (eval(\\\";\\\", @foo)); } finally { with({}) { throw  /x/ ; }  }  })\", typeof null , <x><y/></x>), 'fafafa'.replace(/a/g, /a/gi) / ')) {yield\nlet __proto__ =  /x/ , prop = 1.3;var constructor, __proto__; }");
tryItOut("do if(<x><y/></x>) let __proto__; else yield; while((([window.throw( /x/g )].filter(new Function))) && 0);");
tryItOut("if((uneval(<x><y/></x>))) yield  \"\" ; else  if (this.zzz.zzz) gc()break ;");
tryItOut("export *;");
tryItOut("/*infloop*/for(let ({ __count__: __proto__ }) = 0; (<bbb xmlns:ccc=\"*::* .. <x/>\"><ccc:eee></ccc:eee></bbb>.(1e-81 <<= <x/> .@ ({ get prototype(__parent__, __parent__) { yield [,] } ,  get __proto__ __proto__ (__proto__)<y><z/></y> }))); \nArray(<><x><y/></x></>)) {/*for..in*/for(let prop = -0 in ) {yield; } }");
tryItOut("do {return this;export *; } while((true for each (prototype in <><x><y/></x></>)) && 0);");
tryItOut("let (constructor) {  }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = <>{continue L; }</>;  '' ; <x><y/></x>) {function (prop, prototype) {  /x/g ; } export *; }/*infloop*/for(eval(\"1e-81\", window); this.__defineSetter__(\"__noSuchMethod__\", function  yield (__iterator__, __count__) { yield __parent__ } ); (__noSuchMethod__ = 3/0)) __count__ =  \"\" ;\nwith({__proto__: [[]]}){export *;return; }\n const __parent__;");
tryItOut("return 0 for each (prop in window);");
tryItOut("L: {throw window;if(<><x><y/></x></>) yield; else {let __count__;{} } }");
tryItOut("{__count__ = __proto__L:with({__noSuchMethod__: this.__defineSetter__(\"prop\", function(y) { yield y; yield *;; yield y; }) &= \n1e+81}){{this;yield; } } }");
tryItOut("/*infloop*/for(__proto__ = prop = [15,16,17,18].some(<y><z/></y>, <y><z/></y>);  /x/ ++.__defineSetter__(\"constructor\", gc); let (__parent__) [15,16,17,18].map(function (__proto__) { undefined; } ,  /x/g ) .. @foo ? @foo : *) switch(__proto__.__noSuchMethod__ getter= (yield <><x><y/></x></>)) { case 4: case 3: break; case (__parent__.\fconstructor): case <><x><y/></x></>.propertyIsEnumerable(\"constructor\"): (<x><y/></x>);break;  }");
tryItOut("return ((__iterator__)-=__count__)\n");
tryItOut("(@foo);yield;");
tryItOut("if(<><x><y/></x></>) {return; } else  if (*::*) {{} } else gc()");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const prototype = (*.unwatch(\"prop\") += (prop.(<x><y/></x>))) in <y><z/></y>) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in  /x/g ) {var __iterator__ = <x/>; }");
tryItOut("if((yield window)) {this; } else  if ((__iterator__.isPrototypeOf(true)) & (<><></></>.__iterator__ = arguments)) while((1e81) && 0)export *;");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = __iterator__ = true %= <x><y/></x> in (<><x><y/></x></> |= (-0))) {/*for..in*/for(__count__.prop in <><x><y/></x></>) yield \f1e81;yield; }");
tryItOut("if(#3={a:#3#}) { if ((uneval(([11,12,13,14].filter)))) {let constructor = this, __proto__ = set; }} else {(false); const prop;/*for..in*/for(let __iterator__ = constructor.valueOf(\"number\") in <><x><y/></x></>) { } }");
tryItOut("/*infloop*/while(([((__proto__|=0x99).__iterator__)].map((('haha'.split).call).__defineSetter__)))((this));");
tryItOut("L: with({prototype: [z1,,]})#1=[#1#];");
tryItOut("M:if(__noSuchMethod__.__count__.@*.__defineGetter__(\"__count__\", [*].sort(Function))) /*for..in*//* nogeckoex bug 349964 */M: for  each(let ({ prop: __noSuchMethod__ }) in eval(\"__proto__ = window\", (__proto__ = *::*))) {yield window;continue ; }");
tryItOut("__proto__ = function(id) { return id }, prototype\n\fprototype = <x><y/></x>, __parent__ = .2;\t");
tryItOut("/*infloop*/for(0; <x><y/></x>; <x><y/></x>) export __count__;");
tryItOut("let(prototype = <!--yy-->.propertyIsEnumerable(\"prop\")) { throw StopIteration;");
tryItOut("(<y><z/></y>);let __noSuchMethod__ = this, prop;");
tryItOut("/*infloop*/for(let [, , ({ __noSuchMethod__: __proto__, __count__: __parent__ }), , ] = +=; new function  __iterator__ ()prop(<y><z/></y>); [15,16,17,18].some(Function, this.__defineSetter__(\"prop\", new Function))) {let constructor, prototype = <x><y/\f></x>; }");
tryItOut("L:while(( /x/g ) && 0)");
tryItOut("if((yield this)) { if ((new Math.pow(<bbb xmlns:ccc=\"(<x><y/></x> ===  /x/g ).valueOf(\"number\")\"><ccc:eee></ccc:eee></bbb>, (<><x><y/></\tx></>.__lookupSetter__(\"constructor\"))))) {{} }} else gc()");
tryItOut("/*for..in*/for(const __parent__ in <y><z/></y>) {gc() }");
tryItOut("gc()\nif(<x/>) { if ([1,2,3,4].slice) {function::__proto__ = 3;throw <><x><y/></x></>; } else var __count__ = <y><z/></y>;}");
tryItOut("/*for..in*/for(const __parent__ in (((new Function(\"{}\")))((-0))))const __noSuchMethod__, __iterator__; const constructor;");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 0) {const __parent__ =  /x/ ;; }");
tryItOut("/*for..in*/for(let prop = (__iterator__ = (<><x><y/></x></> -= [,,z1]\n)) in (5.0000000000000000000000.__lookupSetter__(\"__noSuchMethod__\")).call(<x><y/></x> !=  '' , )) {<x><y/></x> const __proto__;return  \"\" .propertyIsEnumerable(\" { (__noSuchMethod__); } \"); }");
tryItOut("/*for..in*/M:for(__parent__ = ~__proto__.yoyo(<x><y/></x>) in ");
tryItOut("switch(prop) { default: break; case 3: break; break; case 8: break; case 5: case 4: ;case -3/0: ([1,,]);break; case window: break; case 0: yield;break; case 1e+81: function::prop;case null: <x/>;case 2: let constructor;break; break; case null: break;  }");
tryItOut("/*for..in*/M:for(let yield = this.zzz.zzz in __count__.( \"\" )) {let __parent__, __iterator__ = @foo;(*::*).__defineSetter__ }");
tryItOut("L:if((__iterator__ = <y><z/></y>))  else  if (\tprop = ((uneval(prototype)))) const __count__ = *; else /*infloop*/M:do {continue ; } while(*);");
tryItOut("with({}) { prop = __iterator__; } ");
tryItOut("export *;\nconst constructor setter: (function  prop (prototype, __proto__) { return __count__ } ).apply;\n");
tryItOut("/*for..in*/for(prototype(undefined) in (((new Function(\"yield window;\")))([delete].filter(({}).__lookupGetter__)))){}");
tryItOut("with({}) let(__count__) ((function(){throw \r__proto__;})());");
tryItOut("M:do {if(this) { if (<x><y/></x>) try { break ; } finally { 'haha'.split } } else {(<x><y/></x>); }default: __iterator__ = function::__iterator__;break; case 4: return;break; case 8: function  __parent__ (__noSuchMethod__) { gc() } break;  } while((window.__lookupSetter__(\"prototype\") <= ((constructor = <x><y/></x>) || let =  /x/g )) && 0);");
tryItOut("/*for..in*/for(let __count__ = (uneval([z1,,])) in (function ([y]) { }.__lookupGetter__(\"constructor\"))) {/*infloop*/for(__iterator__; __proto__.((prototype.prototype = <x><y/></x>)); (constructor%=null)) yield; }");
tryItOut("(this);");
tryItOut("if(new 'haha'.split(new ( /* Comment */((*::* for (__count__ in <><x><y/></x></>))))(), --this)) { if ((((*)(false >>> prop, eval(\"(window);\", )).eval(yield yield prop :: 0x99)).prop = Function(__noSuchMethod__ = <x><y/></x>, ([15,16,17,18].map(gc,  \"\" ))))) {{yield <x><y/></x>; } } else /*for..in*/for(const __parent__ in ((({}).hasOwnProperty)( \"\" ))){(false);yield; }}");
tryItOut("//h\nyield <bbb xmlns:ccc=\"(null & <y><z/></y>)\"><ccc:eee></ccc:eee></bbb>;");
tryItOut("L:switch((__iterator__ =  /x/g )) { case [,]: return;case 7: /*infloop*/for(var prop = <><x><y/></x></>; *::*; undefined) return -0;break;  }");
tryItOut("throw __noSuchMethod__;");
tryItOut("do gc() while(((new ({})(*::*, arguments))) && 0);");
tryItOut("/*for..in*/for(let prototype.__parent__ in  /x/ ) {export *; }");
tryItOut("/*infloop*/while( /* Comment */this, false.__defineGetter__(\"__count__\", *::*))return;");
tryItOut("/*for..in*/for(const [__iterator__, __iterator__] = (\f<y><z/></y> if (<y><z/></y> /= <x/>)) in ({ __count__: constructor }) = (<><x><y/></x></>.@foo)) {with({}) {  } if(-0) {{} } else  if (__proto__) const __noSuchMethod__, constructor; else return; }");
tryItOut("if(@foo) {{}let __proto__ =  \"\" ; } else return ({a1:1});");
tryItOut("return window.*;");
tryItOut("if((__noSuchMethod__.(({})) if (<><x><y/></x></>))) export *; else  if (( /* Comment */#1=[#1#]\n)) {let __noSuchMethod__, __count__ = -->; const constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ([[]])(<x><y/></x>) in (__iterator__.(prototype))) do gc() while((({})) && 0);");
tryItOut("if(function ([y]) { }) {M:if(__parent__ getter: (1 for (x in []))) { if (<x/>) {continue ;{}\r }} else {const prototype =  /x/g ;break ; }return <x><y/></x>;yield true; } else  if (<x/>) {return; } else /*for..in*/for(var __proto__ in <x><y/></x>) {export prop; }");
tryItOut("/*for..in*/for(__count__ = \t(((let (prototype, __noSuchMethod__ = window) __parent__) if (*::*))) in eval(\"{const prototype = <y><z/></y>, __count__ = <x><y/></x>;__parent__ = __proto__, __noSuchMethod__; }\", prop = __iterator__)) {L: {export *; }return *\n }");
tryItOut("<></>");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var [__proto__, prototype] = 0.prototype in [[1]]) { }");
tryItOut("(__iterator__);\nexport __parent__;\n\n");
tryItOut("try { yield; } catch(__proto__) { __proto__, prototype = __count__; } \n");
tryItOut("L:if(typeof __noSuchMethod__) break ; else  if (<y><z/></y> ? true :  /x/ ) {yield; } else {<x><y/></x>;let __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("return;");
tryItOut("/*infloop*/L:for(let constructor = <><x><y/></x></>; #1#; @foo) {yield <x><y/></x>; }");
tryItOut("/*infloop*/for(__parent__ = *; this; prototype) {let prop, __proto__ = <y><z/></y>; }");
tryItOut("L:if(<><xxx>{__parent__}</xxx></>.* get prop() { return ([15,16,17,18].filter(gc, new (Math.pow)(__noSuchMethod__))) } ) {return constructor|=false; } else  if (window) {throw <><x><y/></x></>;let __proto__ = <x><y/></x>, constructor = __count__; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*infloop*/M:for(prop = (undefined ? null : <y><z/></y>); new ((1 for (x in [])))((<xxx>{x::__proto__}</xxx>[[1]]),  \"\" ); 1e4.hasOwnProperty(\"<x/>\")) /*for..in*/for(__noSuchMethod__ in  '' ) {export *; }");
tryItOut("/*infloop*/M:for(prototype;  '' ; undefined.@*) __count__ = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in <><x><y/></x></>) ");
tryItOut("constructor");
tryItOut("if(([11,12,13,14].sort)) {\f/*infloop*/do throw [1]; while(-3/0); } else  if (([[]]\n)) let prototype, __proto__ = undefined; else /*infloop*/while(<bbb xmlns=\" \"\" \"> </bbb>){__count__, __noSuchMethod__; }");
tryItOut("/*infloop*/for(let __iterator__ = [11,12,13,14].map; false; ([11,12,13,14].map)[(<x><y/></x>.propertyIsEnumerable(\"prop = window\")).*]) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__( /x/g ) in *::*) let prop = window, prototype = true;return new function  prop (__noSuchMethod__)[](); }");
tryItOut("if((new function(q) { return q; }(__count__, 1e-81))) {continue ; } else  if (\n*::*.yoyo((p={}, (p.z = <><x><y/></x></>)()))) function::__proto__ getter: (new Function(\"{}\"))\f");
tryItOut("do export constructor; const prop; while((__proto__.prototype <  /* Comment */<><x><y/></x></>.isPrototypeOf()) && 0);");
tryItOut("/*infloop*/for(const \t__count__; new (((1 for (x in []))).call([,],  /x/ , window))(__noSuchMethod__ = <x><y/></x>); false) ");
