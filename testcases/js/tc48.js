tryItOut("yield <xxx {constructor}=\f{[11,12,13,14].some\n} />;");
tryItOut("continue M;");
tryItOut("{yield [,,z1];export __iterator__; }");
tryItOut("if(false) { if (this.__defineSetter__(\"__iterator__\", (({__iterator__ (<y><z/></y> if (window)) >>>=*.__defineSetter__(\"__parent__\", ( /x/ ).__defineSetter__), #3={a:#3#} setter: Math.sin })).watch)) let __iterator__ = #1=({__parent__: #3={a:#3#}});} else export __proto__\n/*infloop*/for(prop.__proto__ getter= [1,2,3,4].map; (prop = <x/>); [ \"\"  if (__count__)]) {return;throw  '' ; }");
tryItOut("{ }");
tryItOut("/*infloop*/for(let __iterator__; ((eval)()); <><x><y/></x></> > <x><y/></x>) {return <x/>;var constructor = @foo, constructor = #3={a:#3#}; }");
tryItOut("throw StopIteration;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(this.zzz.zzz; #2=__count__.prototype setter= function  __iterator__ () { yield <x><y/></x> } ; (+constructor)) ;");
tryItOut("if(false) { if (prop = -3/0) return ;} else {yield;{} }");
tryItOut("{;prototype, constructor; }");
tryItOut("if(\n-set) L:if((<y><z/></y> ^= <y><z/></y>)) {{\nreturn this; } } else  if (*::*) {<y><z/></y> =  '' , __count__ = <><x><y/></x></>; } else {yield #3={a:#3#}; }");
tryItOut("if(set.__count__) { if ((<><x><y/></x></>)) {break ;const __noSuchMethod__ = <x/>; }} else {; }");
tryItOut("if(false) { if (true) yield null; else break ;}");
tryItOut("/*infloop*/for(var __parent__;  /* Comment */<><x><y/></\nx></>.@foo; (function::prop.(@foo))) ");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in  /x/g ) throw [,]; } const constructor;");
tryItOut("L:switch(<><x><y/></x></>) { default: case 9:  }");
tryItOut("if(<x><y/></x>) {yield;break ; } else  if (prototype) {return *;yield; }");
tryItOut("with((uneval((<x><y/></x>.throw( \"\" )))) === ([] = *) %= new (<x><y/></x> for each (prop in __noSuchMethod__))(<x/>(__iterator__))){/*infloop*/L:while((window.__lookupGetter__(\"__proto__\"))){(constructor); }__proto__; }");
tryItOut("yield;");
tryItOut("let __iterator__\n");
tryItOut("L:if(__count__)  else  if ((#1#.__lookupGetter__(\"prototype\"))) prop else {throw *; }");
tryItOut("/*infloop*/for(let __count__; ({prototype:  /x/ }); this) {return *::*;(false); }");
tryItOut("/*infloop*/L:do prototype; while((__proto__ = *::*) ? undefined >>>  /x/  : <x><y/></x>.hasOwnProperty(\"__noSuchMethod__\"));");
tryItOut("__count__ = function::__iterator__;");
tryItOut("function () { return <x/> } ");
tryItOut("/*for..in*/for(prototype = <x><y/></x> >= * in  '' ) {prop =  '' ; }");
tryItOut("case (<x><y/></x>).eval((__parent__.constructor)): if(<><x><y/></x></>) __proto__ = <><x><y/></x></>;default: break; case ({__iterator__: (yield <><x><y/></x></>) }).__defineSetter__(\"__iterator__\", <x><y/></x>.(1.2e3)): if(3.141592653589793) return constructor; else  if (4.) {var __noSuchMethod__; } else {(__proto__); }var __iterator__;let constructor = <><x><y/></x></>, constructor = <y><z/></y>;case (({__proto__ getter: window, __parent__: __noSuchMethod__ })): const prototype, __parent__;return;(__parent__); const __proto__;");
tryItOut("do {1e+81; } while((<x/>) && 0);");
tryItOut("with({function::prop: ([15,16,17,18].filter(@foo, <><x><y/></x></>))})gc()");
tryItOut("gc()\nexport prop;");
tryItOut("let(__iterator__ = (window || 0x99)) { with({}) this.zzz.zzz;");
tryItOut("L:do {with({__noSuchMethod__: <y><z/></y>})yield <y><z/></y>; } while((!*::* + window) && 0);");
tryItOut("if([,,z1]) return true;");
tryItOut("while(((let (prop = <><xxx>{__parent__}</xxx></>, __iterator__ = gc) eval(\"continue M;\", window.throw(*::*) || (__iterator__).watch))) && 0){{if(prototype) {{}export *; } else const __parent__;yield 1e4; } }\t");
tryItOut("/*infloop*/for(let __count__; gc(); (__iterator__ = <x/>)) continue \nL\n");
tryItOut("export __iterator__;");
tryItOut("L: {/*infloop*/for(new __noSuchMethod__; __noSuchMethod__; (<x/>.__lookupSetter__(\"__parent__\"))) {const __iterator__ = @foo, __count__ = [,];export *; }return; }");
tryItOut("while((Exception(false)) && 0){let __count__;return __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <><x><y/></x></> === {}) {(<x><y/></x>);throw *; }\n/*for..in*/for(const [__iterator__, __noSuchMethod__] = let (constructor, __iterator__ = <x><y/></x>) __count__ in @foo) constructor = this, __proto__;");
tryItOut("L:if([[1]]) { if ( \"\" ) [1,2,3,4].slice else {gc() }}");
tryItOut("{;\nbreak L;\n }");
tryItOut("for(let y in [5,6,7,8]) return {constructor;<x/>; };");
tryItOut("return\n");
tryItOut("/*infloop*/M:while((constructor = 0.1)[(this)[#1=[#1#]()]]){gc()return  /x/ ; }");
tryItOut("constructor = this.zzz.zzz");
tryItOut("let (__iterator__ = this, constructor = <y><z/></y>) { var __noSuchMethod__; }");
tryItOut("do const __count__ = <><x><y/></x></>, __noSuchMethod__; while((<y><z/></y>) && 0);");
tryItOut("if(__proto__ = <x><y/></x>) constructor = false, __count__; const __proto__;");
tryItOut("for(let y in [5,6,7,8]) const __noSuchMethod__, __proto__ = -3/0\nyield;");
tryItOut("/*infloop*/for(prototype; __iterator__ = prop; (--constructor)) {yield; }");
tryItOut("/*for..in*/for(var [__parent__, __count__] = prototype = [z1] in function ([y]) { }) export __noSuchMethod__;");
tryItOut("if(*::* >= <x/> for (<x/>['__parent__']\f in (this >>= [[1]])) for each (__noSuchMethod__ in __count__ ?  \"\"  : <><x><y/></x></>)) { if (this) //h\nthrow <y><z/></y>;} else const __count__;");
tryItOut("with((*::*.__defineGetter__(\"__parent__\", (({}).__lookupGetter__).apply))){yield  /x/g ; }");
tryItOut("if( /x/ ) { if (<y><z/></y>) let (__proto__ =  '' , prototype = <><x><y/></x></>) { return window; } else return;}");
tryItOut("while((this.__defineSetter__(\"__iterator__\", function () { yield 0 } )) && 0){export *; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var __noSuchMethod__.__count__ in ((((1 for (x in []))).apply)((yield [,,z1])))){export *; }");
tryItOut("/*for..in*/for((__iterator__ = <><x><y/></x></>).__iterator__ in ((((window if ( { return null } ))).watch)([{}].sort(({}).hasOwnProperty))))( \"\" );");
tryItOut("{<x><y/></x>;export constructor; }");
tryItOut("L: {yield *; }");
tryItOut("/*infloop*/do while((let (__parent__ = <x><y/></x>) window) && 0){throw __count__; } while(([,] *= <x/>()));");
tryItOut("if( /x/g .yoyo( /x/  === window)) {{}\r } else {/*infloop*/for(const __proto__; [z1,,]; [,]) { } }");
tryItOut("/*for..in*/for(prop in (((1 for (x in [])))((this / false)))){/*for..in*//* nogeckoex bug 349964 */ for  each(<y><z/></y>.__iterator__ in window) break L;export __noSuchMethod__;break L; }");
tryItOut("/*for..in*/for(var prototype([11,12,13,14].sort) in (this.zzz.zzz)) {if( \"\" ) __count__;/*infloop*/for(let ({ constructor: __iterator__ }) = (({__iterator__: (this ^ 1e-81) })); (-1); this.zzz.zzz) if(1e4) continue M; else return; }");
tryItOut("if(*::*) { if (<x/>) {(undefined);(<><x><y/></x></>); } else {(1e+81); }}");
tryItOut("L:switch( '' ) { default: (undefined);<!--yy-->break; case this.__defineGetter__(\"__noSuchMethod__\", function  get (({ __parent__: __noSuchMethod__, constructor: prop }))\f { throw ({a2:z2});\t } ) %= ((<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")) .@x:: ((true))): yield __count__ =  /x/ .__noSuchMethod__;break;  }");
tryItOut("var __count__ = <x><y/></x>, __proto__ = <y><z/></y>;");
tryItOut("export constructor;");
tryItOut("eval(\"\\nprop+=<x><y/></x>\", (__noSuchMethod__ <<= <><x><y/></x></>)) = __count__;");
tryItOut("/*infloop*/L:for(let __iterator__ = <x><y/></x>; 1e81; <x><y/></x>) {export *; }");
tryItOut("let (__proto__) { /*infloop*/for(let __noSuchMethod__; <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; <> </>) (constructor); }");
tryItOut("if(false) with({}) { {} } ");
tryItOut("with({}) { /*infloop*/for([] = (Boolean([,])); this.zzz.zzz; this %= ({})) export constructor; } ");
tryItOut("if((--* |= constructor)) return; else {yield [z1,,]; }\n;\n");
tryItOut("return 0x99;\n\n");
tryItOut("/*for..in*/for(var __count__.__noSuchMethod__ in (((({ prototype: prop, __iterator__: __iterator__ }) = ({ __iterator__: __count__ })))(((new <><x><y/></x></>(<x><y/></x>)) >>>=yield false))))new Function\nreturn;\n");
tryItOut("/*for..in*/for(const prop in <><x><y/></x></>) \t{/*infloop*/for(var __noSuchMethod__ = undefined;  set function::prop() { return __parent__ } ; <x><y/></x>) {__iterator__, __parent__; }export *; }");
tryItOut("with(<x><y/></x>){yield; }");
tryItOut("/*infloop*/L:while(__count__ = <x><y/></x>)export __count__;");
tryItOut("[[11,12,13,14].sort]");
tryItOut("/*infloop*/L:for(var __parent__; __iterator__ = <x/> /= <y><z/></y>; (constructor.__noSuchMethod__ = ({prop: undefined, prototype getter: function  prototype (__proto__, set) { yield __noSuchMethod__ }  }))) switch((<x><y/><\f/x>.prototype)) { case 2: {} }");
tryItOut("__iterator__ = constructor;");
tryItOut("return;");
tryItOut("{export *;switch(<zzz>*</zzz>) { case delete.__defineSetter__(\"__proto__\", <><x><y/></x></>): break; case 9: \rcontinue ;break;  } }");
tryItOut("{}\nif([,,z1]) (function ([y]) { }).__defineSetter__\n");
tryItOut("gc()");
tryItOut("if(<x>//h\n<y/></x> , [1]) var __iterator__; else  if (new (<y><z/></y>)(window)) {return; } else {function  __count__ (__proto__, __iterator__)null }");
tryItOut("if(new String()) \f{function(y) { yield y; throw <x/>;; yield y; }\nthrow let (constructor, __iterator__ = each)  /x/g ; } else  if (prop = constructor = <y><z/></y>) {return;/*\n*/ }");
tryItOut("let (constructor) { (1e4); }");
tryItOut("/*for..in*/for(const constructor(undefined) in true//h\n) (window\r);");
tryItOut("/*infloop*/for(__proto__; __iterator__.constructor getter= function(y) { yield y; {}; yield y; }; <x><y/></x> |= 1.3) true, <x><y/></x>");
tryItOut("");
tryItOut("if() export __proto__; else throw null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const 1.2e3 in 3.__lookupSetter__(\"__count__\")) {*;gc() }");
tryItOut("with({prototype: true}){return; }");
tryItOut("/*for..in*/for(__count__ in window) {export *; }");
tryItOut("M:if(({ prop: constructor, __proto__: __iterator__ }) = null @ 3) {/*infloop*/for(let __iterator__; true; prop) {<x><y/></x>; }L: let __noSuchMethod__ = <y><z/></y>; }");
tryItOut("/*for..in*/for(var (__proto__) in (<bbb xmlns=\"this\"><x><y/></x></bbb>.(<x><y/></x>++))) M:if(<x><y/></x>) {yield; } else  if (1e81) yield <x><y/></x>; else {prototypegc() }");
tryItOut("L:if(function ([y]) { }.__defineSetter__(\"__iterator__\", ((function ([y]) { })()).watch)) { if ((*.eval(((new Function(\"throw this;\"))).call( \"\" , this, *::*)).@*)) {{}\n{}\n }} else {export *; }");
tryItOut("/*infloop*/while((p={}, (p.z = __proto__)())){var __noSuchMethod__ = constructor; }");
tryItOut("for(let y in []);");
tryItOut("export __proto__;");
tryItOut("while((<y><z/></y>\r) && 0)return;");
tryItOut("let (__parent__ = []) { (Math.pow).call }");
tryItOut("/*infloop*/L:for(const __proto__ = [[1]]\n; __iterator__.(*::*); function(q) { return q; }) {let __iterator__ = <x><y/></x>, __count__; }");
tryItOut("switch(__parent__, <x><y/></x>) { case @foo: break; case this: continue ;default: const __count__;case prop: break; break;  }");
tryItOut("/*infloop*/L:while([(p={}, (p.z = window)()) ? (<><x><y/></x></>.propertyIsEnumerable(\"prop\")) : function(y) { yield y; gc(); yield y; }() for each (constructor in this) if ( \"\" )]){/*for..in*/for(var prototype = (__parent__ = <x/>) in <x><y/></x>) const prototype, __iterator__;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in __parent__.__count__ getter= ({}).__lookupGetter__) /*infloop*/do {if(<x><y/></x>) {const prototype = <x><y//h\n/></x>; } else \f if (<x/>) {let set = undefined;; } else {return; }prop } while(__iterator__);");
tryItOut("while((new ([[]])().propertyIsEnumerable(\"__parent__\")) && 0){return; }");
tryItOut("let(const __noSuchMethod__, prop;) ((function(){with({}) (__parent__);})());");
tryItOut("if(<><x><y/></x></>.propertyIsEnumerable(\"__count__\")) { if ([11,12,13,14].sort) return; else {const __iterator__, __count__ = .2; }}");
tryItOut("if(eval(\"({}).hasOwnProperty\", [1,,])) {return;throw <y><z/></y>; } else  if ((true.eval( '' ) = <><x><y/></x></>.watch(\"prop\", gc))) ; else return null;");
tryItOut("M:if(<x/>) \f{ if (*::*) gc()} else return;");
tryItOut("var __noSuchMethod__, __proto__;gc()");
tryItOut("(<x><y/></x>.( \"\" ));");
tryItOut("if(#3={a:#3#}) { if ((function  __count__ (__count__) { ({}) } ).call(undefined, ) == 'fafafa'.replace(/a/g, (({}).hasOwnProperty).call)) {prop;break ; } else {yield; }}");
tryItOut("yield;\nyield\n\n");
tryItOut("__noSuchMethod__ = __count__ = window");
tryItOut("/*for..in*/for((p={}, (p.z = yield  /x/ )()) = this.__defineGetter__(\"prototype\", 'haha'.split).throw(true.@*) / -3/0 in (*::* || <x><y/></x>)) break ;");
tryItOut("if(<xxx>{prototype}</xxx> > constructor.propertyIsEnumerable(\"__parent__\")) { if ((Math.pow())) {M:if(*) const prototype =  /x/ ; else  if (([[]] .. <x/>)) {return  /x/ ;gc() } else {return <><x><y/></x></>;yield; }var constructor, __parent__ = *; }} else {/*infloop*/do gc() while(__noSuchMethod__ = function::prototype);throw <x><y/></x>; }");
tryItOut("if() {/*for..in*/M:for(const [__proto__, __parent__] = <><x><y/></x></> in <><x><y/></x></>) yield constructor; } else  if (new Math.sin(this.__defineSetter__(\"__iterator__\", {}))) /*for..in*/for(let prop in ((({}).__lookupGetter__)(@foo))){export prototype;; }");
tryItOut("with({__proto__: \n*::* .@*:: (function ([y]) { })()}){continue ; }");
tryItOut("L:if( /x/g .watch(\"__proto__\", function(y) { yield y; let __proto__ = window, prototype;; yield y; })) { if (((__iterator__.hasOwnProperty(\"__noSuchMethod__\")).unwatch(\"__parent__\"))) function(y) { yield y; (<y><z/></y>);; yield y; }} else {throw  /x/ ;export __parent__; }");
tryItOut("/*for..in*/L:for(var prop = eval(\"/*infloop*/do {gc()yield ; } while(( '' )[<x><y/></x>]);\", <bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>) in __proto__ = x::prop) {__proto__;const function (each) { return ({}) } , __iterator__ = this; }");
tryItOut("/*infloop*/for(let ({ prop: __iterator__, __iterator__: ({ prop: __proto__, constructor: __count__ }) }) = 'fafafa'.replace(/a/g, <x><y/></x>); <><!--yy--></>; constructor.(( /x/  if ( /x/ )))) {return ({});M:if(<><x><y/></x></>) {yield;__parent__; } else  if (#1=[#1#]) yield <x><y/></x>; else {gc()const __iterator__, __count__ =  '' ; } }");
tryItOut("{continue L\nexport *; }");
tryItOut("with({prototype: (__count__.(\n<x/>))}){/*infloop*/M:do {__parent__, prop; } while(<><x><y/></x></>); }");
tryItOut("return;");
tryItOut("L:with((__parent__ = *::*))return;");
tryItOut("M:if(new L:if((yield <x><y/></x>)) continue ; else {return; }(new Number((({__count__: <><x><y/></x></> })), undefined) >>>=constructor = [11,12,13,14].filter >>>=(<x><y/></x>.@foo))) {yield; } else switch(\nBoolean(<><x><y/></x></>)) { case 9: break;  }");
tryItOut("/*infloop*/while((#2=({x::prop: true})).throw(.__defineGetter__(\"__parent__\", /a/gi)))/*infloop*/for(var __count__ = (function ([y]) { }); <bbb xmlns=\"__noSuchMethod__\"><ccc:ddd><!--yy--></ccc:ddd></bbb>; (__proto__ = <y><z/></y>)) {<x><y/></x>;export __parent__; }");
tryItOut("with(yield;)let (__count__) { if(__proto__) {yield *::*; } }\nthrow <><x><y/></x></>;");
tryItOut("throw [[1]];\n__count__ = true, constructor = undefined;\n\nexport __noSuchMethod__;\n");
tryItOut("L: {__proto__\r = __noSuchMethod__;yield prototype; }");
tryItOut("prop.__parent__ = __iterator__;");
tryItOut("__iterator__ const __proto__;");
tryItOut("throw <x><y/></x>;");
tryItOut("yield 0x99;\nprop;\n");
tryItOut("L: {return;gc()\n }");
tryItOut("switch((Boolean(__noSuchMethod__.prop getter= (new Function(\"let prototype = <><x><y/></x></>;\"))))) { case 0: ({ __noSuchMethod__: ({ __iterator__: __noSuchMethod__ }), __iterator__: __parent__ })default: break; case 6: Math.sinbreak; function (constructor) {  } break;  }");
tryItOut("return;");
tryItOut("/*infloop*/for(let prototype; arguments.__defineGetter__(\"prototype\", new Function); (++1e4)) const __parent__, __parent__;\n/*for..in*/for(let [__iterator__, __noSuchMethod__] = <><x><y/></x></> in constructor) {export constructor;{} }\n");
tryItOut("/*for..in*/for(var __proto__ in __proto__ :: __noSuchMethod__) {/*for..in*/M:for(let __proto__ = ((<x><y/></x>.@foo).@*) in new Iterator()) { } }");
tryItOut("yield this.__defineGetter__(\"__count__\", window);");
tryItOut("if(<x/>) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in 3) export prop;");
tryItOut("gc() const constructor;if(yield #1=[#1#]) let __parent__ = <><x><y/></x></>, __iterator__ = false\n");
tryItOut("/*infloop*/do {do export __parent__; while((<><x><y/></x></>) && 0); } while(({__iterator__ getter: Boolean(<y><z/></y>, this) }));");
tryItOut(" if (<y><z/></y>)\nswitch(<><x><y/></x></>.prop) { default:  }\n");
tryItOut("<xxx {prototype}={while(((<><x><y/></x></> / <x><y/></x>)) && 0){{}return; }} />");
tryItOut("/*infloop*/for(var let (constructor, prop) eval(\"<zzz>[,,]</zzz><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd>\", (-0)), (); (new (function(q) { return q; })(true)); ([15,16,17,18].map(*::*, (__proto__-= /x/g )))) /*infloop*/do {(false); } while(({function::__count__: <><x><y/></x></>}));");
tryItOut("gc()");
tryItOut("/*for..in*/L:for([prop, constructor] = (5.0000000000000000000000.__lookupGetter__(\"prop\")) in (new Function(\"__iterator__, prototype;\"))) if([new (function (__count__) { return true } )(__proto__) if ((function ([y]) { })())]) /*\n*/{ if ((gc).call(prop.__parent__ = <x><y/></x>, )) constructor;} else {<x><y/></x>;(1e81); }");
tryItOut("if(-3/0.throw(@foo)) {return 1e-81; } else (<x><y/></x>).//h\n__defineSetter__");
tryItOut("return *;");
tryItOut("if((window)[__parent__]) export __parent__; else  if (@foo) break ;");
tryItOut("L:if(<><x><y/></x></> ^ <\t><x><y/></x></>) {var __parent__ = <x><y/></x>, __noSuchMethod__ = @foo; } else  if ([15,16,17,18].some(Function, [,,])) yield try {  } catch(__iterator__) { yield; } finally { gc() } ;");
tryItOut("prototype");
tryItOut("yield [, __parent__] = <x><y/></x>;");
tryItOut("{var __proto__, __proto__;export *; }");
tryItOut("if([*::*]--) break ; else {var __count__ = *::*, prototype;yield; }");
tryItOut("Math.pow");
tryItOut("yield <><><!--yy--></></>;");
tryItOut("if(<><bbb xmlns=\"0.1.propertyIsEnumerable(\"__iterator__\")\"> </bbb></>) /*infloop*/while(<x><y/></x>)* else {let __proto__ = *\nthrow false;while((continue ) && 0){\fyield; } }");
tryItOut("/*for..in*/for(__iterator__ = window in *::*) var __proto__, __count__ = __iterator__;");
tryItOut("/*infloop*/L:do if(<x/>) { if (__parent__) {( '' );const __parent__ = constructor; } else yield export *;;} while(@foo | <x/>);");
tryItOut("if(__noSuchMethod__.__proto__ = [,]) {yield window;; } else  if ( '' ) yield;");
tryItOut("L:if((__count__ *  \"\" )) /*infloop*//*\n*/L:for(__proto__ = <><x><y/></x></>; <x/>; this) export *;");
tryItOut("with({({ __noSuchMethod__: ({ prototype: [[]] }), prop: ({ prototype: __count__, prototype: prop }) }): true.__parent__ = })gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\f for  each(let (__proto__.__noSuchMethod__) in (function () { gc() } )(undefined, 0)) with(new <><x><y/></x></>()){\t }");
tryItOut("/*for..in*/L:for(var case 5: <><x><y/></x></>; in <y><z/></y>) {(<x/>); }");
tryItOut("/*infloop*/do /*infloop*/for(this.__defineSetter__(\"__count__\", (let.(<><x><y/></x></>))); ((prototype) = __iterator__ = true ? <x/> : new <><x><y/></x></>()); this.__defineGetter__(\"__proto__\", (1 for (x in [])))) {} while(((new Exception(<x><y/></x>, <y><z/></y>))((+this))).watch(\"__iterator__\", (__count__ = __proto__ && ({function::__iterator__: *::*, each getter: function(q) { return q; } })).__defineSetter__) ? <x><y/></x>.(<><x><y/></x></>) : (__proto__++[((Function)(<x><y/></x>))]))\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in ((<><x><y/></x></>).__defineSetter__)(<x><y/></x> + __parent__, window) .. __parent__ = *) {L: {yield __count__;/*for..in*/for(__proto__ in <x><y/></x>) {export __count__; } }break L; const __count__; }");
tryItOut("/*infloop*/M:for(Function([,,z1], new  '' ); \nconstructor = [,]; (this.zzz.zzz)\r ? __count__ :  /* Comment */ '' ) {throw constructor;if(__iterator__ = ({ get: ({ __count__: __iterator__, prop: __noSuchMethod__ }), __noSuchMethod__: prototype }) &= prop.*::*) { if (({__count__ setter: (1 for (x in [])) })) throw <><x><y/></x></>;yield window; else {export prototype;yield; }} }");
tryItOut("if(prototype.__parent__ getter= [,,z1]) L: {gc() } else {/*for..in*/for(const __proto__ in (( '' )(prop.( \"\" )))){{}continue L; } }");
tryItOut("yield this\n");
tryItOut("L:if(@foo) {throw 5.0000000000000000000000; } else  if ('fafafa'.replace(/a/g, Math.sin)) {} else var prototype, __noSuchMethod__; const __iterator__;");
tryItOut("/*infloop*/L:for((new Exception().__lookupSetter__(\"constructor\") ? (new Error(this, <><x><y/></x></>) ? (new (1 for (x in []))()) : this.zzz.zzz += \n__count__) : (function  __proto__ ([__iterator__]) { return (false.throw(*::*)) } ).call( '' .hasOwnProperty(\"prototype\"), __noSuchMethod__.prop)); (([ \"\"  for (__proto__ in  \"\" )]) > constructor = __iterator__); <><></></>) {throw Exception(@foo, <><x><y/></x></>);break ; }");
tryItOut("/*for..in*/for(const __iterator__ = prop.constructor.__lookupSetter__(\"__proto__\") in constructor) {/*infloop*/M:do {gc()let constructor; } while((typeof <x/>));let __iterator__ = <x/>, __count__ = [,,]; }");
tryItOut("with({prototype: @foo.__defineGetter__(\"__parent__\", 'haha'.split)}){export *; }");
tryItOut("/*for..in*/for(let [constructor, prop] = __noSuchMethod__(undefined, <x><y/></x>) << ({constructor: 0/0, window }) in ([1])) -3/0;");
tryItOut("let (__count__) { M:if(( /x/ ).eval(<>throw *;</> & prototype)) { if (eval(\"/*infloop*/M:for((__noSuchMethod__ = constructor); yield Number(<x><y/></x>); ((window.__lookupGetter__(\\\"prop\\\"))).prototype = (__proto__ for (prototype in *))) {export __noSuchMethod__;(__noSuchMethod__).call }\", \n*::*.prop =  \"\" )) export __iterator__;} else throw <x><y/></x>;//h\n }");
tryItOut("for(let y in [5,6,7,8]) let (__parent__ = <x/>, __proto__ = <x><y/></x>) (function ([y]) { })();");
tryItOut("with({__proto__: @foo})/*infloop*/for(let constructor = 033((function ([y]) { })(), this); eval(\"gc()\", 0.1); <y><z/></y>.valueOf(\"number\")) if(undefined) return <x><y/></x>; else ");
tryItOut("/*for..in*/for(var __count__ = this.__defineSetter__(\"prop\", function(y) { yield y; { }; yield y; }) in true.__noSuchMethod__ = 1.3) ");
tryItOut("return;");
tryItOut("let (__proto__, __noSuchMethod__ = (((this .@*:: *::*) if (5.0000000000000000000000)))) { export __iterator__\n/*infloop*/while(undefined){;gc() } }");
tryItOut("let(({ prop: __noSuchMethod__, __proto__: prototype }) = (__noSuchMethod__)) ((function(){throw prototype;})());");
tryItOut("break \nexport prototype;");
tryItOut("export __iterator__; const __noSuchMethod__;");
tryItOut("{}");
tryItOut("/*infloop*/M:do /*for..in*/for(var prop in ((eval)((prototype).call(this\n,  /x/g )))){/*for..in*/for(__count__(<><x><y/></x></>) in <x><y/></x>) yield; } while(<x/>.__defineGetter__(\"prop\", function (__parent__, __proto__)__proto__ =  '' ));");
tryItOut("for(let y in []);");
tryItOut("");
tryItOut("for(let y in []);");
tryItOut("break ;");
tryItOut("if(this.__defineGetter__(\"prototype\", function (({ constructor: constructor, prototype: setter }))[ /x/g  for each (prop in 0/0)])) {continue M; }");
tryItOut("with({}) { try { eval } catch(constructor) { constructor = prototype; }  } ");
tryItOut("if(([__noSuchMethod__])) {continue ; } else  if (({}) >>= <x/>) (1 for (x in [])) else gc()");
tryItOut(";");
