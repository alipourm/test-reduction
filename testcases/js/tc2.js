tryItOut("/*infloop*/for(let __count__; try { let __iterator__ = window; } catch(constructor) { (<><x><y/></x></>); } ; ([1].valueOf(\"number\")).__proto__) {}");
tryItOut("/*for..in*/for(__proto__ in (((gc).apply)(yield window &= (__iterator__-=__noSuchMethod__))))var __count__ = @foo, prop;");
tryItOut("var __iterator__ = <x/>, <><x><y/></x></> = <y><z/></y>;");
tryItOut("let(__noSuchMethod__, __proto__ = <x/> ? prop : __parent__) ((function(){return;})());");
tryItOut("while((({ __iterator__: __iterator__, __noSuchMethod__: __count__ }) = <><x><y/></x></>.@foo) && 0){/*infloop*/for((); this; @foo)  }");
tryItOut("/*for..in*/M:for(let prototype = ([1,,].@foo) in ([prop for each (__noSuchMethod__ in @foo)])) /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x><y/></x>) export __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype.__iterator__ in  /x/ ) const prop = (-1);");
tryItOut("switch(<x><y/></x>) { default: case 9: break;  }");
tryItOut("return [1,,];");
tryItOut("return;");
tryItOut("/*for..in*/for(const __count__ =  get prop __parent__ (prop)(* % 1e+81) !== <><x><y/></x></> in <employee id=\"1\"><name>Joe</name><age>20</age></employee>) /*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in ((this for (__parent__ in  /x/g ))).@*) {}\nw");
tryItOut("var constructor = undefined");
tryItOut("throw <><x><y/></x></>;");
tryItOut("L: {<x><y/></x>; }");
tryItOut("/*infloop*/M:for(<x><y/></x>; constructor; <x/>) var constructor = *::*;");
tryItOut("yield <><x><y/></x></>;");
tryItOut("do ; while((this) && 0);");
tryItOut("/*infloop*/for(var constructor; (__noSuchMethod__.throw( /x/g )) + c.*; <y><z/></y>) ({}).hasOwnProperty");
tryItOut("if(__parent__ = <><x><y/></x></>) { if (*::* << *) ;} else ");
tryItOut("L: export *;\nyield *;\n");
tryItOut("for(let y in [5,6,7,8]) (<x/>);");
tryItOut("/*infloop*/for(const __iterator__ = constructor+=true ? ({__parent__: <x/>}) :  '' .__lookupGetter__(\"__parent__\").unwatch(\"prop\"); (<xxx>{__noSuchMethod__}</xxx>.([z1,,] - 1e+81)); @foo.throw(prototype)) let (__iterator__ =  \"\" .eval(0x99), [({ __noSuchMethod__: __iterator__ }), ({ constructor: __parent__ })]) { yield null; }");
tryItOut("if(({__noSuchMethod__: ({a1:1})})) var prototype; else (false);");
tryItOut("with({__proto__: <x/>}){yield  /x/g ;<y><z/></y>; }");
tryItOut("with((prototype ? <><x><y/></x></> : this)())gc()\nyield;");
tryItOut("yield function(id) { return id }.valueOf(\"number\").watch(\"__iterator__\", (eval(\"this\", false)));");
tryItOut("{return; }");
tryItOut("M:with({constructor: (new (this)()[window % window])}){{export __count__;{} } }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__((this / [,]) == <><x><y/></x></>.constructor) in  /x/ .throw(Array( /x/g , prop))) gc()");
tryItOut("/*infloop*/for([null.@foo].map(function(q) { return q; }); 3; *::*) return <x/>;");
tryItOut("gc()");
tryItOut("__iterator__");
tryItOut("/*infloop*/do const __iterator__ = 1e4; while(new (<x/>)(<><x><y/></x></>, <x><y/></x>));");
tryItOut("with({prop: __parent__.(window) >>>=Exception()}){return;break ; }");
tryItOut("let(function::__noSuchMethod__, __noSuchMethod__ = function (prop, __iterator__) { return * } (<x/>, <x><y/></x>)) ((function(){this.zzz.zzz;})());");
tryItOut("prop = __parent__;");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("if((constructor =  \"\"  << new Date(true, this) .@x::  \"\" .isPrototypeOf(<y><z/></y>))) { if (@foo) let (constructor, constructor = [z1]) { /*for..in*/for(let __proto__ = 1e81 in 1e+81) {{}export constructor; } } else {L: /*for..in*/for([constructor, prototype] = (p={}, (p.z = [,,z1])())[new ({})(0.1)] in <y><z/></y>)  }}");
tryItOut("with(<><bbb xmlns:ccc=\" /x/ \"><ccc:eee></ccc:eee></bbb></>){export prop; }");
tryItOut("/*infloop*/for(let constructor; <y><z/></y>; 1e81) ;");
tryItOut("/*for..in*/L:for(const [__parent__, __parent__] = this.zzz.zzz in window ? <y><z/></y> : __iterator__) __noSuchMethod__, __parent__ = <x/>;");
tryItOut("with({}) { try { this.zzz.zzz; } catch(constructor) { throw StopIteration; }  } ");
tryItOut("let(prototype) ((function(){})());");
tryItOut("M:if((null['__proto__'])) return; else throw 3;");
tryItOut("/*for..in*/for(\tconst __parent__ = __iterator__ = (({__noSuchMethod__: (prototype%=<x><y/></x>)})) in eval(-prop >>> this--, <zzz><x><y/></x></zzz>)) {/*for..in*/M:for(let __proto__ = ( /x/g  |= false) in <x><y/></x>) {;const __parent__, __count__; } }");
tryItOut("with({prototype: (*::*.@foo)()}){/*infloop*/while(<><x><y/></x></>)gc()let <x><y/></x>; }");
tryItOut("/*infloop*/while((<x><y/></x> ^ <x/> for (prop in <x/>) for each (__noSuchMethod__ in <x><y/></x>)))/*for..in*/for(let prototype(*) in null % {}) throw prototype;");
tryItOut("return;\nconst __parent__, __iterator__;\n");
tryItOut("do {yield; } while((this) && 0);");
tryItOut("let __proto__\nreturn (@foo.hasOwnProperty(\"__noSuchMethod__\"));");
tryItOut("with({}) constructor.constructor = __count__;");
tryItOut("if([<y><z/></y> for each (__noSuchMethod__ in <x><y/></x>)]) gc()");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = (+[z1]) in  /x/g ) yield <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(*::* >= *::*.__parent__ in new Function(<x/>)) {export __iterator__;return; }");
tryItOut("{yield __noSuchMethod__; }\n{/*infloop*/M:for([, , __iterator__, ] = this.__defineSetter__(\"constructor\", Math.pow); __noSuchMethod__.__count__ =  with ; <x/>) {yield; }yield; }");
tryItOut("do {{} } while((Function(#1#,  /x/ )) && 0);");
tryItOut("if(__iterator__.__count__ = [z1]) {;export *; } else ( /x/ );");
tryItOut("/*infloop*/do {/*infloop*/L:do export *; while(0x99); } while(('haha'.split)(window, prop));");
tryItOut("gc()");
tryItOut("/*infloop*/for(<x/> -= null; ({ __proto__: [], constructor: ({ __noSuchMethod__: ({ __count__: ({ __proto__: __iterator__, __proto__: prototype }) }), prop: __noSuchMethod__ }) }) = <bbb xmlns=\"<x><y/></x>\"><ccc:ddd></ccc:ddd></bbb>.(__noSuchMethod__ &= 1e81).__lookupSetter__(\"__count__\"); (prop = <x><y/></x> === [,,z1])) ;");
tryItOut("prototype, __count__;");
tryItOut("/*for..in*/L:for(const constructor.__proto__ in window) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in yyy) {yield;switch((--1e81)) { case 1: break; case undefined\n:  } }");
tryItOut("<><ccc:ddd></ccc:ddd></>with((__count__ = (1.2e3)[.2].__defineSetter__(\"constructor\", /a/gi))){<x><y/></x> }");
tryItOut("{return; }");
tryItOut("if(<><x><y/></x></>) __count__, __parent__ = <x><y/></x>; else \nexport *;\nvar prop = <><x><y/></x></>;\n");
tryItOut("/*infloop*/while( '' ){gc()yield ({}); }");
tryItOut("export *;\nreturn;\n");
tryItOut("while(() && 0){L: {yield <>\f<x><y/></x></>;throw undefined; } }");
tryItOut("/*infloop*/do {let constructor = <x/>, break M;; } while\f(*);");
tryItOut("M:switch((({prop: 0/0 }).yoyo([<><x><y/></x></>]))) { default: return;break; case 9:  } const __parent__;");
tryItOut("\n;");
tryItOut("yield;");
tryItOut("/*infloop*/M:while(Function(((<y><z/></y>)(<><x><y/></x></>))))if(<><x><y/></x></>) { if (@foo) return function ([y]) { };} else {({}); }");
tryItOut("let(function::constructor = <bbb xmlns:ccc=\" /* Comment */<><x><\ny/></x></>\"><ccc:eee></ccc:eee></bbb>, prototype) { this.zzz.zzz;");
tryItOut("do yield; while((<x><y/></x> < (-1)) && 0);");
tryItOut("with({}) yield;");
tryItOut("let(__parent__) ((function(){try { yield <><x><y/></x></>; } catch(constructor) { [1,2,3,4].map } finally {   } })());");
tryItOut("/*infloop*/L:do {do false while((false) && 0); } while((<><x><y/></x></>.watch(\"prototype\", -0)).watch(\"__iterator__\", function(y) { yield y; yield;; yield y; }));");
tryItOut("if(( /x/g  >> <x><y/></x>)) { if (<x/>.__defineGetter__(\"prototype\", this)) gc()} else {Function }");
tryItOut("return ({__noSuchMethod__ setter: ((1 for (x in []))).call\t, prototype setter: prop })\nreturn;function () { throw {}; }  const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <x><y/></x>) gc()\nprop = <x><y/></x>;\n");
tryItOut("{falsethrow ({}); }");
tryItOut("({ constructor: ({ __noSuchMethod__: [] }) }) = new Date().hasOwnProperty(\"x::x::__noSuchMethod__\")");
tryItOut("while((new Object( /x/ )) && 0){gc()#3={a:#3#}; } const prototype;");
tryItOut("/*infloop*/for(const constructor; \n<><x><y/></x></>; (window << __count__)) {break ; }");
tryItOut("if((this.__defineSetter__(\"__count__\", ((-0 === prototype =  '' .unwatch(\"__parent__\"))).__defineSetter__))) switch\t(new String() && window) { default: break;  } else {continue M; }");
tryItOut("/*infloop*/for(({ prop: __parent__ }) = (*::* %  /x/g ); (function::__proto__ = *); [1e-81throw window;]) yield\nwhile((__noSuchMethod__.@foo(return this.__defineSetter__(\"__parent__\", /a/gi);)\t) && 0){}");
tryItOut("/*for..in*/for([__parent__, <xxx>{prop}</xxx><x><y/></x><ccc:ddd><x><y/></x></ccc:ddd> ] = this in [,].valueOf(\"number\")) {yield; }\n");
tryItOut("if((<x/> , <><x><y/></x></>) /= __noSuchMethod__.valueOf(\"number\")) { if (delete [, ({ __noSuchMethod__: __proto__, *::*: __parent__ })] = <x><y/></x>.(<x><y/></x>)) {yield; } else {break M }}");
tryItOut("{break ; }");
tryItOut("L:if(\n@foo) gc() else gc()");
tryItOut("/*for..in*/for(const __count__ in [1,,]) {(this);(<y><z/></y>); }");
tryItOut("/*infloop*/for(<y><z/></y>; constructor.__defineSetter__(\"prototype\", (__noSuchMethod__).__defineSetter__); eval(\"0.1\", <x><y/></x>.(<y><z/></y>).__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty))) {M:if([,,z1])  else return *; }");
tryItOut("do /*infloop*/M:do {return arguments;let __count__ =  /x/ ; } while(<x/>); while((prop = #1#(prop, #1=[#1#])--) && 0);");
tryItOut("throw 033;");
tryItOut("/*infloop*/for(const __proto__; (<y><z/></y>.yoyo(@foo)); new Function( /x/ , 5.0000000000000000000000)) {/*infloop*/for(let __iterator__ = <><x><y/></x></>; <x><y/></x>; <x><y/></x>) prototype = []; }");
tryItOut("true\nreturn;\n");
tryItOut("export __noSuchMethod__;");
tryItOut("/*infloop*/for(const __count__ = false;  /x/g ; this) return [];");
tryItOut("if(function::prototype /= [11,12,13,14].filter .@ eval(\"\", [,,])) {do export __proto__; while((__count__) && 0); } else  if (([15,16,17,18].filter(Function, ({prototype: <x><y/></x>})))) return;");
tryItOut("L:with({__noSuchMethod__: __count__ =  \"\" })const prop;");
tryItOut("return;");
tryItOut("/*for..in*/for(const prototype = (__iterator__ instanceof __count__)[<x/>] :: 1.2e3 in ('fafafa'.replace(/a/g, Math.pow))) {L: continue ;{{return;return; } }\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__proto__) in  /x/ ) if(<bbb xmlns=\"1e81\"><!--yy--></bbb>) yield; else {return  /x/g ;continue ; }");
tryItOut("M:if([]) { if ((<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\").__proto__ =  /x/g .__iterator__.valueOf(\"number\"))) let(prop) { var constructor = <x/>;} else {export *;export __iterator__; }");
tryItOut("with({}) return prop;");
tryItOut("M:switch(()) { default: break; case 0: break; case [__proto__.propertyIsEnumerable(\"__proto__\")].some(function(q) { return q; }): case 3: return }");
tryItOut("/*for..in*/L:for(__proto__ = __proto__ in <x><y/></x>) var __noSuchMethod__;");
tryItOut("with({}) { let(__iterator__) { throw StopIteration; } ");
tryItOut("/*for..in*/L:for(let constructor.prop in <x/>) {let prop, prototype = this; } const __noSuchMethod__;");
tryItOut("if((new --0.1)) if(-1) { if (({})) {yield  /x/g ; }} else const __proto__;");
tryItOut("/*for..in*///h\nM:for(let __iterator__ in ((eval)(((function(y) { yield y; export *;; yield y; })()))))gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let (*.__count__)[((yield <x/>))].prototype in  '' --) {let(constructor = new (function (__parent__, prototype)*::*)( \"\" , @foo)) ((function(){get = __iterator__ =  /x/g ;})()); }");
tryItOut("{; }");
tryItOut("let(__parent__ = __parent__.(--undefined), ({ this: prototype, __noSuchMethod__: prop })) { let(__parent__, __parent__ = ++arguments) ((function(){throw __noSuchMethod__;})());");
tryItOut("L: var __noSuchMethod__ = *, __parent__;");
tryItOut("/*infloop*/M:for(({ constructor: __count__, __count__: ({ prop: constructor }) }) = ({}); (~({a1:1})) >= [[]] || []; *::*) do {gc()__iterator__ = <x><y/></x>; } while((arguments) && 0);");
tryItOut("M:if(__count__ = (yield  '' )) {} else /*for..in*/for(const [__iterator__, __noSuchMethod__] = null >>> <x><y/></x> in false <<  \"\" ) {}");
tryItOut("M:switch(<y><z/></y>[-=].__defineSetter__(\"x::constructor\", (<x><y/></x>).__defineSetter__)) { case 0: throw <x/>;\n\nif(<x><y/></x>) constructor; else  if (<x><y/></x>) export *;break;  }\n");
tryItOut("switch(this.__defineGetter__(\"__proto__\", (Math.pow).call) < -1) { default: break;  }");
tryItOut("/*for..in*/for(const (this)(<x><y/></x>) in ((Math.pow)(((-0)(__parent__) = window)))){;gc() }");
tryItOut("return this;");
tryItOut("( \"\" );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in (([1,2,3,4].slice).call)()) M:if((yield  /x/g )) {; } else  if ((prototype = [])) {yield; }");
tryItOut("if(__noSuchMethod__) { if (((prototype = prop).prop.*)) {yield;export __proto__; } else ;}");
tryItOut("let ([, __count__(true.__defineGetter__(\"__parent__\", new Function)), __iterator__, \t, ] = 0.throw(0x99).__lookupGetter__(\"prototype\"), __count__) { this.zzz.zzz; }");
tryItOut("/*infloop*/for(@foo; <x><y/></x>;  '' ) throw null;");
tryItOut("with(<><x><y/></x></>){throw null//h\n;{} }");
tryItOut("/*infloop*/for(__noSuchMethod__; __parent__%=1e-81.isPrototypeOf(<><x><y/></x></>).hasOwnProperty(\"prop\")[<><x><y/></x></>\n];  /x/g [#1=[#1#]].yoyo((Function)(undefined))) {with({constructor: constructor}){if(__parent__) { \"\" ;return; } } }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((<><x><y/></x></>).call)(-3/0))){gc()export __noSuchMethod__; }");
tryItOut("with({__proto__: (*.yoyo( /x/ ))}){ switch  }");
tryItOut("{export __count__; }");
tryItOut("if(new ([1,2,3,4].slice)(window)) export *; else  if (<x><y/></x>.isPrototypeOf(__proto__)) yield; else {}");
tryItOut("");
tryItOut("{gc() }\n{[1,2,3,4].mapreturn; }\n");
tryItOut("L:with(((uneval(let.__parent__)))){if(<x><y/></x>) true; else  if (<><x><y/></x></>) {; } }");
tryItOut("return\n");
tryItOut("/*infloop*/for(const prop; <></>;  \"\" ) {yield  /x/ ;1e4; }");
tryItOut("; const __proto__;");
tryItOut("/*for..in*/for(let prop = <><x><y/></x></> in [,]) {<x/>; }");
tryItOut("/*for..in*/M:for(let __parent__ = __iterator__ = * in  /x/ ) {const __noSuchMethod__ = function(id) { return id }, prop; }");
tryItOut("let __noSuchMethod__;");
tryItOut("/*infloop*/for(this.__defineGetter__(\"prototype\", eval); let (prototype = undefined.prop, constructor = <x><y/></x>) (<x><y/></x> .@ <><x><y/></x></>) - +[[1]]; ) {with(__count__)var __iterator__ = null, __noSuchMethod__ =  /x/g \n }");
tryItOut("/*infloop*/L:for(let [, __noSuchMethod__] = ([1,2,3,4].slice); [1]; <x><y/></x>.__defineGetter__(\"__count__\", (Function).apply)) switch(((-1).isPrototypeOf(*))) { case (yield __noSuchMethod__): break; case 5: L:if(<><x><y/></x></>) { if (true) export *;\t else gc()}break; default: (#1=[#1#]);break;  }");
tryItOut("export *;throw *::*;");
tryItOut("{/*for..in*/for(prototype in 3/0) prototype; }");
tryItOut("let __noSuchMethod__ = ({a1:1});return\nwith(<><x><y/></x></>){export *; } const __count__;");
tryItOut("with([z1,,][this]){let __proto__ = __iterator__, __noSuchMethod__ = [z1];let constructor, __noSuchMethod__; }\n");
tryItOut("if(true\n) const constructor = arguments; else  if (undefined for (prop in <y><z/></y>)) {prototype = __noSuchMethod__.((let (__iterator__ = 1.2e3) <><x><y/></x></>)) }");
tryItOut("if(<><x><y/></x></>) yield\n");
tryItOut("while(() && 0)while((((<y><z/></y>).watch).call(window, ).hasOwnProperty\f(\"__count__\")) && 0){with({prototype: this.zzz.zzz})break Mfunction  __proto__ (__noSuchMethod__) { return __parent__; }  }");
tryItOut("while((__noSuchMethod__) && 0){<x><y/></x>; }");
tryItOut("export constructor;\n/*infloop*/for(null; ; *.__defineSetter__(\"__parent__\", [1,2,3,4].map)) {var __iterator__ = *::*, __iterator__ = this; }\n");
tryItOut("with({}) throw <x/>;");
tryItOut("L:if(({__noSuchMethod__: this.zzz.zzz, __parent__: [@foo] |= ( '' .__defineGetter__(\"__proto__\", function(q) { return q; })) })) { if (delete (<x><y/></x>)( /x/ )) ; else switch(undefined.valueOf(\"number\")) { default: break; (__proto__);break; case 3: break; var __parent__; }}");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("yield;");
tryItOut("with({}) { ([,]); } ");
tryItOut("with(.2)yield;");
tryItOut("{throw  /x/ ;export __count__; }/*infloop*/for((uneval(__noSuchMethod__)); \tprop = <><x><y/></x></>; this.__defineSetter__(\"constructor\", /a/gi)) return;");
tryItOut("/*for..in*/for(const __proto__ = <x><y/></x> in @foo) {}");
tryItOut("yield (Function(033, <y><z/></y>));");
tryItOut("/*infloop*/for(<x><y/></x>;  \"\" ; <x><y/></x>) {const prop/*\n*/; }");
tryItOut("/*infloop*/for(window.__defineSetter__(\"prototype\", function (prototype, __count__) { return * } ) !== constructor = <x/>; eval(\"continue ;\", __parent__ = <y><z/></y>); .valueOf(\"number\")) {M:if((function::__parent__.throw(<x/>))) return; else  if ((Date(<x><y/></x>))) ; }");
tryItOut("/*infloop*/M:for(__proto__ = yield <><x><y/></x></>\t; __count__.__iterator__; ({prototype: <y><z/></y>})(@foo.__lookupSetter__(\"prop\"), (new (*)(5.0000000000000000000000, <><x><y/></x></>)\n))) if(((gc).call(__iterator__ = __iterator__, <><x><y/></x></> @ *::* !== <x><y/></x>))) {([[]]); } else  if ((*.yoyo(__proto__ .. * % (undefined.__defineSetter__(\"__count__\", function  prototype () { return -1 } ))))) true; else {export __parent__;return <x><y/></x>; }");
tryItOut("__proto__ = function::__noSuchMethod__;");
tryItOut("/*infloop*/for(constructor.__noSuchMethod__ setter= ([1,2,3,4].slice).call.isPrototypeOf(1e4); this.zzz.zzz; (({x::__parent__: ((yield undefined))}))) {const __noSuchMethod__ =  \"\" ; }");
tryItOut("{if(( /x/g )(__iterator__ =  /x/g )) yield; else export __iterator__;/*infloop*/for(let __proto__ = false; window; null) ([,]); }<x><y/></x>;");
tryItOut("M:while((#1=__proto__ = __iterator__.hasOwnProperty(\"__proto__\")) && 0)/*for..in*/for(const __parent__ in (((new Function(\"return [1,,];\")))(undefined))){[1,,];(-0); }throw -3/0;let constructor = [1,,], prop, prop;");
tryItOut("{}");
tryItOut("/*for..in*/L:for(const [__parent__, constructor] = (prop.(delete __noSuchMethod__))() in ({ set __count__(__count__, __iterator__)<x><y/></x> , this, __iterator__: this.zzz.zzz })) {L:if(true) return; }");
tryItOut("break ;");
tryItOut("if((eval(\"export prototype;\", window))) {(<x><y/></x>); } else  if (__count__.(\f<><x><y/></x></>)) return (-1); else (function(id) { return id });");
tryItOut("{export prototype; }");
tryItOut("let (prototype, prototype) { /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in *.propertyIsEnumerable(\"__parent__\")) {throw window;\nnew Function\n } }");
tryItOut("gc()");
tryItOut("(__proto__);");
tryItOut("L: {yield; }");
tryItOut("/*for..in*/for(const constructor = (((({}).hasOwnProperty)(++(-0))).unwatch(\"__noSuchMethod__\")) in this) {__count__ = constructor; }");
tryItOut("gc()/*infloop*/while([1,,])return  \"\" ; const prop;");
tryItOut("if((uneval(window))) /*for..in*/M:for(const __parent__ = @foo in *::*) {return -3/0; } else  if (((p={}, (p.z = (__proto__.prototype))()))) return <y><z/></y>");
tryItOut("yield;\nreturn;\n");
tryItOut("break L;");
tryItOut("/*for..in*/for(const [__parent__, constructor] = null in this) {yield; }\nvar __parent__ = this;");
tryItOut(" '' , __iterator__;");
tryItOut("throw __parent__;");
tryItOut("L: {break ;if(this) {break ;prototype } else {\freturn;yield; } }");
tryItOut("for(let y in []);");
tryItOut("__iterator__, __parent__ = <x><y/></x>;");
tryItOut("if(prototype = this) { if (this.zzz.zzz) } else \t{var __iterator__; }");
tryItOut("{function::__proto__ = <y><z/></y>, constructor = undefined;yield; }");
tryItOut("/*infloop*/while(break ){/*for..in*/L:for(const ({ prototype: constructor, __noSuchMethod__: prototype }) in ((eval)(yield <x><y/></x>))){/*for..in*/for(let constructor = .2 in []) export *; }if(__iterator__--) export *; else  if (0.1.isPrototypeOf(@foo)) {var prop = this; } else {const const __count__, each = null;; } }");
tryItOut("do {break M; } while((window[ /x/g ]) && 0);");
tryItOut("if((eval(\"0x99\", 5.0000000000000000000000))) {continue L; } else  if ([[]].__lookupSetter__(\"prototype\")) [1,2,3,4].map");
tryItOut("continue \n");
tryItOut("/*for..in*/L:for(let __count__ = new (function  prop () { return true } )(window, this) in <><x><y/></x></>) yield;");
tryItOut("if((0/0.yoyo(({a1:1})))) {__count__ = <y><z/></y>, __parent__; } else  if (<><x><y/></x></>.__lookupSetter__(\"prop\")) yield; else *");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in prop.(*::*)) {/*for..in*//* nogeckoex bug 349964 */ for  each(({ __proto__: __count__, __iterator__: prop }) in <x/>) switch(<y><z/></y>) { default: {}break;  }(<y><z/></y>); }");
