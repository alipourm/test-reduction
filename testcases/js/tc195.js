tryItOut("/*infloop*/for(let prop; new Date(@foo, <y><z/></y>); (-1)) gc()");
tryItOut("Math.sin");
tryItOut("/*infloop*/while(({__proto__ setter: ( '' ).__defineSetter__ }))export constructor;");
tryItOut("return null;");
tryItOut("/*infloop*/for(const __count__; ('fafafa'.replace(/a/g, function(q) { return q; })); ) ");
tryItOut("yield [__parent__ = window];");
tryItOut("__proto__ = <y><z/></y> , constructor");
tryItOut("\n(<y><z/></y>);");
tryItOut("/*infloop*/for(let ({ (this)(0.1): ({ constructor: __noSuchMethod__ }) }) = <><bbb xmlns=\"__iterator__ = .2\">yyy</bbb></>; (yield)(*::*)[(<x><y/></x>)()]; constructor.__proto__ getter= (<><x><y/></x></>).watch) L:if(<x><y/></x>) yield \nthis; else  if ( \"\" .isPrototypeOf(<x/>)) ");
tryItOut("var __parent__ =  /x/g , __noSuchMethod__ = <x><y/></x>;");
tryItOut("/*for..in*/for(const __proto__ in ([, , , , prop] = <x><y/></x>.watch(\"__noSuchMethod__\", Math.pow))) gc()");
tryItOut("L: {export __count__; }");
tryItOut("/*infloop*/for(*; <x><y/></x>; __noSuchMethod__)  const prototype;");
tryItOut("/*infloop*/while(<x/>)export *;/*for..in*/for([__noSuchMethod__, __noSuchMethod__] = <x><y/></x> in  /x/ ) {throw 3/0;throw 3; }");
tryItOut("/*for..in*/for(const __iterator__ in ((Math.sin)(prop))){<y><z/></y>;yield; }");
tryItOut("/*infloop*/for\t(const constructor; <x><y/></x>.yoyo(<y><z/></y>); ([<x/>].filter(function(y) { yield y; ( \"\" );; yield y; }))) {throw __parent__; }");
tryItOut("/*infloop*/for(var prototype = @foo /= <y><z/></y> && ([__proto__] = (({__parent__: this }))); __iterator__ = *.prototype = <y><z/></y>; undefined.__iterator__) constructor, __count__;\n__count__ = #1=[#1#], __proto__ = <x/>;\n");
tryItOut("let([, ] = __noSuchMethod__ = @foo) ((function(){return;})());");
tryItOut("if((const __count__ = arguments, constructor = <><x><y/></x></>;)) { if (constructor.__noSuchMethod__) with(<><x><y/></x><\f/>.eval(true) ? #1=({__proto__: <><x><y/></x></>}) : (<><x><y/></x></>.__defineSetter__(\"__parent__\", /a/gi))){ } else L:with(window)return;}");
tryItOut("try { ; } finally { throw __proto__; } ");
tryItOut("/*for..in*/for(let [x::prototype, __iterator__] = ((p={}, (p.z = __count__ = (window <= this))())) in (this.zzz.zzz)) {export *;__parent__ = <><x><y/></x></>; }");
tryItOut("if((@foo--)[([15,16,17,18].some(gc, (\f{__noSuchMethod__ setter: ({}).hasOwnProperty })))]) { if ((return <x><y/></x>;)) {yield; }} else {const __count__;\nlet __count__, constructor = <x/>;\n }");
tryItOut("if(__iterator__ = .2) {[1,2,3,4].map } else {return 0x99;{} }");
tryItOut("if(<y><z/></y>.__count__.__defineGetter__(\"prop\", (<y><z/></y>).watch)) ;\n else  if ([prop.__iterator__ = <x><y/></x> if (<><x><y/></x></>)]) const prototype = constructor, __noSuchMethod__ = -0;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = (let ([, __noSuchMethod__, ] = <><zzz>prop</zzz></>) (false))\t in this.__defineSetter__(\"prototype\", ({}).hasOwnProperty)) /*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in *) (__proto__);");
tryItOut("__proto__ = constructor;");
tryItOut("/*for..in*/for([prototype, prop] = <><x><y/></x></> in this) {}");
tryItOut("/*infloop*/for(var ({ __proto__: ({ setter: ({ __count__: __proto__ }) }) }) = * < window.__defineSetter__(\"/a/gi\", [1,2,3,4].slice); (function (constructor) { return true.valueOf(\"number\") } ); ({ set __parent__ __parent__ () { yield ({ set __count__() { return new String() } , __parent__: (<bbb xmlns=\"<><x><y/></x></>\"><!--yy--><\t/bbb>.(new function(q) { return q; }())) }) }  })) return;");
tryItOut("if((({ __parent__: __count__, __count__: function::__noSuchMethod__ }) = #1=({__iterator__: <x><y/></x>}))) {return <x><y/></x>; } else {gc()yield true; }");
tryItOut("L:with((-1))export prototype;\nreturn;\n");
tryItOut("/*for..in*/M:for([constructor, __parent__] = __count__ in @foo) const prototype, prototype;");
tryItOut("yield\nreturn <><x><y/></x></>;");
tryItOut("do {export *; } while((({ get new gc(*, (true.__lookupSetter__(\"__parent__\") >>>=this\n)) __parent__ (__iterator__)(({__noSuchMethod__: <x/> })), ({ __count__: [, ({ prop: [({ prop: prototype, __count__: __iterator__ }), __parent__] }), , ], constructor: prop }): undefined.unwatch(\"prototype\") % new  \"\" () })) && 0);");
tryItOut("export __iterator__;\nexport prototype;");
tryItOut("/*for..in*/for(var [prop, __parent__] = (@foo.throw(4.)) in *::*) /*infloop*/for((new <><x><y/></\nx></>(<><x><y/></x></>));  /x/g ; <x><y/></x>) continue ;");
tryItOut("try { ; } catch(__proto__ if __parent__) { try { yield; } catch(prototype) { export *; }  } finally { with({}) undefined } ");
tryItOut("L:if([1,,]) (undefined); else yield (function ([y]) { })();");
tryItOut("/*infloop*/while( /* Comment */<y><z/></y>)\t{throw  /x/ ;{var __proto__ = <x><y/></x>, prototype = __parent__; }/*for..in*/for(var __noSuchMethod__ in <><x><y/></x></>) {export *; } }");
tryItOut("let(prototype) ((function(){})());");
tryItOut("__count__ = __proto__;");
tryItOut("<>0x99</>if(__parent__ = true) {__count__ = false, prop; } else { }");
tryItOut("{this.zzz.zzz; }");
tryItOut("/*for..in*/for(var prop in (([1,2,3,4].slice)(((p={}, (p.z = []--)()))))){; const __parent__; }");
tryItOut("__count__");
tryItOut("if([z1,,].prop) -3/0; else {}");
tryItOut("if(@foo) ; else (__iterator__);");
tryItOut("/*infloop*/for(({ __count__: ({ __parent__: __count__, __parent__\f: __proto__ }), __iterator__: ({ constructor: [, , prototype, \f] }) }) = new ((/a/gi).call)(delete (try { {} } catch(__count__ if <x><y/></x>) { export *; } catch(__parent__ if (function(){break L;})()) { return; } catch(__iterator__ if (function(){export prop;})()) {  } catch(__count__ if (function(){var __noSuchMethod__ = <x><y/></x>, prop =  /x/ ;})()) { throw <x><y/></\rx>; } catch(__parent__ if (function(){__noSuchMethod__;})()) { return null; } catch(prototype) { var prototype = <x/>; } finally {  }  @ 1.3)); ({prototype setter: *::*,  get __proto__ __proto__ () { yield (!this.zzz.zzz) }  })\n; (-0)) {prop, __iterator__ }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in prop) {with({}) { this.zzz.zzz; } {L:if(true) {export __noSuchMethod__;return; } else window; } }");
tryItOut("<><x><y/></x></>\n");
tryItOut("{<x><y/></x>;Math.sin }");
tryItOut("if(false) (this); else  if (@foo) { }");
tryItOut("let (__proto__ = *, constructor = <x><y/></x>) { gc() }");
tryItOut("with({constructor: eval(\"gc()\", window)\f(window, __parent__ = <y><z/></y>)}){(@foo)/*\n*/;return  \"\" ; }\n(0.1);");
tryItOut("if(<y><z/></y>) gc()");
tryItOut("continue L\n");
tryItOut("/*for..in*/M:for(var [__proto__, __proto__] = (prop = [, ({ prototype: __count__, prototype: prop })]) in [ \"\" ]\t) yield");
tryItOut("(new Function(\"\"))\n(*);\n");
tryItOut("if(Function(__proto__, ({}))) { if (({ get __noSuchMethod__ function::prop (__count__)-0, __parent__ setter: function (<x><y/></x>, __proto__) { var prop = 1e4; }  })) prop; else {{} }}");
tryItOut("((__noSuchMethod__ = null).prototype)(this) = prototype;");
tryItOut("return this;");
tryItOut("if(__iterator__.__defineGetter__(\"__noSuchMethod__\", function (__proto__, __iterator__)1e81).__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))) { if ( /x/ .valueOf(\"number\")) function(q) { return q; } else ;}");
tryItOut("{/*infloop*/M:for(eval(\"undefined\", window); 3 .@ false; (<y><z/></y>.valueOf(\"number\"))) {var __iterator__, __parent__ = <y><z/></y>;var prop = <><x><y/></x></>, __iterator__; }{} }");
tryItOut("{const null, try { ( '' ); } finally { const prototype = window; }  =  \"\" ;const __count__ = 1e-81; }");
tryItOut("{yield; }");
tryItOut("return;\n<x/>;\n/*for..in*//* nogeckoex bug 349964 */ for  each(const ((0/0.valueOf(\"number\")))(export *) in [<xxx>{constructor}</xxx>].some((function () { yield yield; } ).call)) {var prop = *::*, function::prop =  '' ; }");
tryItOut("try {  } catch(__parent__) { return; } finally { return; } ");
tryItOut(" { yield this } ");
tryItOut("export __noSuchMethod__; const __parent__\n");
tryItOut("/*for..in*/for(var constructor = [z1,,] in constructor ? * : <x><y/></x>) {/*for..in*/for(var prop = <><x><y/></x></>.* in  /x/g ) 1e-81; }");
tryItOut("for(let y in [5,6,7,8]) try { continue L; } catch(prop if (function(){gc()})()) { this; } catch(__noSuchMethod__ if *) {  /x/  } ");
tryItOut("/*for..in*/for((__iterator__) in arguments) {let __proto__ = this, __noSuchMethod__;throw this; }");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("return\n");
tryItOut("__count__ = prop;");
tryItOut("if(/*infloop*/M:for(let function::prototype = undefined; (function ([y]) { })(); -1) {constructor }) return  '' ; else  if (false) {continue M;; } else {}");
tryItOut("/*infloop*/do var constructor =  \"\" ; while(-3/0)");
tryItOut("M:if(this) { if (this.__defineGetter__(\"__parent__\", (<y><z/></y>).__defineSetter__)) gc() else {(0/0); }}");
tryItOut("do yield [1]\f; while(( /x/ ) && 0);");
tryItOut("with( /* Comment */([11,12,13,14].some))export *;");
tryItOut("L: for(let y in [5,6,7,8]) try { break M; } catch(__iterator__) { let __iterator__, <y><z/></y>; } ");
tryItOut("while(( \"\" .prop = <x/> if (<x><y/></x>)) && 0)/*infloop*/for(__count__; <><x><y/></x></>;  /x/g ) export __count__;");
tryItOut("yield ++typeof  ''  instanceof this = [null].some(Math.sin);");
tryItOut("/*infloop*/while(*::* ^ <x/>)if(5.0000000000000000000000) break ; else  if (false) export *; else {yield  /x/ ; }");
tryItOut("gc()\n<x><y/></x>\n");
tryItOut("if(('haha'.split)) { if (<y><z/></y> .@*:: <x><y/></x>) {{}export *; }} else export *;");
tryItOut("/*infloop*/do {var __iterator__ = __noSuchMethod__, __proto__, __parent__; } while((constructor = (this.__defineSetter__(\"delete\", <x/>))\n));");
tryItOut("propcatch(__proto__) { {} } finally { gc() } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in this) ;");
tryItOut("/*for..in*/for(const prop in <><x><y/></x></>) {break L; }");
tryItOut("with({__noSuchMethod__: [[1]].__defineGetter__(\"x::__iterator__\", [1,2,3,4].map)}){{}export constructor; }");
tryItOut("/*infloop*/while(new [,,z1])export *;");
tryItOut("L: return (p={}, (p.z =  /* Comment */0)());");
tryItOut("/*infloop*/for( /x/g ; *; [,,]) {return;yield; }");
tryItOut("for(let y in [5,6,7,8]) __iterator__ = (<><x><y/></x></>)(this);");
tryItOut("if() { if (([]\n.@*)) {throw false;with((<x><y++))/*infloop*/L:for(<x><y/></x>; this; false) {let constructor; } }} else var ({ __proto__: constructor, __iterator__: __parent__ }) = (false ? true : 0), delete = 4.;");
tryItOut("L: {export *;let __proto__; }");
tryItOut("/*infloop*/L:while(eval(\"gc()\", (prop+=false)))<><x><y/></x></>");
tryItOut("L: with({}) { return <x><y/></x>; } ");
tryItOut("while(( \"\" --) && 0){var __iterator__ = 3;let (constructor =  \"\" ) { (-3/0); } }");
tryItOut("/*for..in*/for(var prototype = <><x><y/></x></>['__proto__'] in  /* Comment */<x><y/></x>) {return; }/*for..in*/M:for(const __parent__ in @foo) ;");
tryItOut("/*infloop*/while(new (((null).watch).apply)((yield true), __noSuchMethod__.__lookupGetter__(\"constructor\")))if(4.) return [,,z1]; else {export constructor;export *; }");
tryItOut("function::constructor\n");
tryItOut("/*infloop*/M:do {var __proto__;\nexport *;\n } while([15,16,17,18].some(({}).__lookupGetter__, <><x><y/></x></>)[(((new  /x/ ))[[<x><y/></x>].some((1 for (x in [])))])]);");
tryItOut("{return <y><z/></y>;export __count__; }");
tryItOut("M:with(){try {  } finally {  }  }");
tryItOut("/*infloop*/for(let [, , , , __parent__] = true; #0=[3]; __noSuchMethod__.prototype = true) (new Function(\"\"))\n");
tryItOut("/*infloop*/while({} = (__parent__ = <><x><y/></x></>))return false;");
tryItOut("this.zzz.zzz;");
tryItOut("with((let (__parent__) ))(#1=({constructor: <x><y/></x>}));");
tryItOut("L: {(function(y) { yield y; [,,]; yield y; }).apply{} }\n");
tryItOut("/*infloop*/while((({}).hasOwnProperty))L:if(prop) { if (prop = <y><z/></y>) ; else {/*infloop*/do {break L; } while(undefined);[1,2,3,4].slice }}");
tryItOut("with({prop: __noSuchMethod__.__iterator__ setter= Function})");
tryItOut("L:if((#0=({__iterator__: null}))) 0x99; else  if ( \"\"  >= @foo) var __count__ = -3/0;");
tryItOut("yield (uneval((<y><z/></y>);));");
tryItOut("/*infloop*/for(const __iterator__; ( /* Comment */(-({a1:1}) .@*:: ) > <zzz>__iterator__ = __iterator__; + <><x><y/></x></></zzz>); prop.__parent__ = ({__proto__: <><x><y/></x></>})) {return [1,,];export *; }");
tryItOut("/*for..in*/for(const prop = prototype in this) yield;");
tryItOut("/*infloop*/L:do export constructor; while(this >>= <><x><y/></x></>); const __parent__;");
tryItOut("if(@foo) const __count__, __proto__; else {yield\n }");
tryItOut("L: yield <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var ((__count__.prototype >> (false.unwatch(\"function::__proto__\"))))(({ __iterator__: __noSuchMethod__, constructor: function::prop }) = ({ prop: __count__ })) in <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(<x><y/></x>.isPrototypeOf((-1))).valueOf(\"number\")) {; }");
tryItOut("while(((p={}, (p.z =  /x/ )())) && 0){throw *::*; }");
tryItOut("return -1\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var prop = __parent__ = (null.yoyo(033)) in <><bbb xmlns:ccc=\"(this ? * : <><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb></>) do /*for..in*/for(var constructor in __iterator__) {gc() } while((function(id) { return id }.yoyo(this)) && 0);");
tryItOut("{gc()break ; }");
tryItOut("if((__iterator__) = 3) { if (<x><y/></x>) __iterator__, __noSuchMethod__ =  \"\" ; else {const __count__ = undefined; }}");
tryItOut("/*for..in*/M:for(const prototype = 1e+81 in constructor) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [({ __iterator__: prototype, __parent__: __parent__ }), prototype, ({ constructor: __iterator__, function::constructor: prototype }//h\n), , ] in (__noSuchMethod__.constructor)) //h\n{break ;; }");
tryItOut("if( == ( { return @foo.propertyIsEnumerable(\"__iterator__\") }  = #3={a:#3#})) {;eval } else yield  /x/ ;");
tryItOut("/*infloop*/while(([__parent__.[] getter= ({}).__lookupGetter__ for each (constructor in  '' ) for each (__noSuchMethod__ in prototype)]))var __proto__, __parent__ = *;");
tryItOut("M:if(new ((1 for (x in [])))(0x99)) {return;throw *::*; }");
tryItOut("if(RegExp((p={}, (p.z = prop = __count__)()))) M:with( /x/g ){} else {var __proto__ = [1,,], constructor = <x><y/></x>; }");
tryItOut("with(<><x><y/></x><\t/>){__iterator__ }");
tryItOut("{}");
tryItOut("let prototype = true;\nif(null += <y><z/></y>) { if (<><x><y/></x></>) {<x><y/></x>; } else window}\n");
tryItOut("let(__proto__) ((function(){case 5: <x/>;__proto__ = -1\ndefault: with( \"\" ){/*infloop*/while(<y><z/></y>){(gc).apply } }break; case new ((({}).hasOwnProperty).apply)(prototype = this, true): M:do return; while((yield prototype) && 0);break; break; {}L:if( /x/g ) yield; else  if (<><x><y/></x></>) {return <><x><y/></x></>;export __count__; }\n{*::*; }break; case ((p={}, (p.z = null.__iterator__)()) + ({__iterator__: function::[[1]] })): /*infloop*/while(*)*::*['constructor']case 4: [1,2,3,4].mapcase 7: /*for..in*/for(let [prototype, __count__] = <><x><y/></x></> in []) {function () { return window }  }break; })());");
tryItOut("{constructor;new <x/>; }");
tryItOut("M:if(eval) {{<><x><y/></x></>; } } else  if (eval(\"{}\", __proto__ = [1])) ;");
tryItOut("yield; const __parent__;");
tryItOut("M:while((prototype[__count__]) && 0){with(Iterator()){if(*::*) {{} } else  if (window) eval else {yield; }yield; } }");
tryItOut("/*infloop*/do {throw <><prop x<y ></>;prototype = [[]]; } while(<y><z/></y>.eval(<><x><y/></x></>));");
tryItOut("L:while((false) && 0)return;");
tryItOut("switch((constructor['prop'] = (__iterator__ = <x/>))) { default: window; }\f");
tryItOut("with({__noSuchMethod__: __noSuchMethod__ = prototype = this})export *;");
tryItOut("with(([11,12,13,14].filter)){export __count__;L: return (function ([y]) { })(); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::__parent__ in (#1=*)()) {return #1=[#1#]; }");
tryItOut("let constructor = <x><y/></x>\n");
tryItOut("if(this) { if ([] = (__iterator__ = <y><z/></y>)) export prototype; else prototype = <x><y/></x>;}");
tryItOut("const __noSuchMethod__ = true;gc()");
tryItOut("if(function::prop) {gc() } else  if (<x><y/></x>) {var __proto__ =  /x/ ; } else ");
tryItOut("with({prop: false}){yield [z1,,];(window); }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in *::*) gc");
tryItOut("L:while(( .watch(\"__iterator__\", (this).apply)) && 0){function (__noSuchMethod__) { yield window } /*infloop*/do yield; while(-0);/*for..in*/for([prototype, __count__] = <x><y/></x> >>>=<y><z/></y> in  /x/ ) {} }");
tryItOut("M:if( \"\" ) { } else  if (window) export __noSuchMethod__;");
tryItOut("M:switch( /x/g .@*) { case 7: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in [15,16,17,18].map(/a/gi, (#1#.unwatch(\"__count__\")))) {{{}(/a/gi).call } }");
tryItOut("return\nif(this.zzz.zzz) {([,]);(prototype); } else  if ((#1=[#1#].@foo)) {(<x/>); } else break L\n");
tryItOut("__iterator__ = prop, prop;\nfunction (prototype) { return __iterator__ } \n");
tryItOut("/*for..in*/for(var [__count__, __parent__] = ((function  __parent__ (__noSuchMethod__, prototype) { let __iterator__, __noSuchMethod__ = -3/0; } )(window)) in <y><z/></y>) {/*for..in*/M:for(let __count__ = this in <><x><y/></x></>) {let __iterator__, __parent__;(1 for (x in [])) } }return");
tryItOut("/*for..in*/M:for([__iterator__, __count__] = this in __count__.__proto__ =  /x/g .__defineSetter__(\"__parent__\", ({}).__lookupGetter__)) continue ;");
tryItOut("/*for..in*/for(({ __iterator__: __parent__, prototype: prototype }) = <x/>.prototype.__iterator__ in (('haha'.split)(#1=[#1#]))){yieldyield null; }");
tryItOut("{if(undefined) { if (*) {;/a/gi } else break ;} }");
tryItOut("if(<x><y/></x> :: null) { if ((function (prop) { yield <><x><y/></x></> } )) function(y) { yield y; let prop, __parent__;; yield y; } else Math.sin}");
tryItOut("with({}) return;");
tryItOut("export *;");
tryItOut("/*infloop*/while(this.zzz.zzz)/*for..in*/M:for(var constructor = [<x><y/></x> if (<x/>)] in __proto__ =  \"\" ) {return *::*;export function::__proto__; }");
tryItOut("/*infloop*/do undefined; while((eval(\";\", <x/>) ? (Math.pow)(<x/>, 0) : <x/>--));");
tryItOut("/*infloop*/while(<><x><y/></x></>)var __noSuchMethod__;");
tryItOut("constructor.__iterator__ = prop;");
tryItOut("M:switch(__parent__.__noSuchMethod__ = -1) { default: ;break;  }");
tryItOut("L: {let (prop = <x><y/></x>) { \t033; } }");
tryItOut("/*for..in*/M:for(let __iterator__ in ((Math.pow)(({ __proto__: __parent__ }) = (new /a/gi(<x><y/></x>)))))gc()");
tryItOut("if((prop = __noSuchMethod__) ==  /x/ .valueOf(\"number\") ? <x><y/></x> ? __count__ :  /x/  : const __proto__ = prototype) {let __proto__ = __proto__, __count__ = *::*;if(<x><y/></x>) yield  /x/ ; else {continue M; } } else  if ({}) {let __parent__; } else {return; }");
tryItOut("function (prototype) { return false } \n((-0));\n");
tryItOut("<!--yy-->");
tryItOut("let (__noSuchMethod__, __proto__ = *) { export __noSuchMethod__; }");
tryItOut("__count__ = prototype;");
tryItOut("let(constructor, __noSuchMethod__ = let (__count__) <x><y/></x>) ((function(){for(let y in []);})());");
tryItOut("{L: constructor, function::__noSuchMethod__; }");
tryItOut("with({__proto__: <><x><y/></x></>}){return;window; }");
tryItOut("for(let y in []);");
tryItOut("let(prototype) ((function(){let(constructor, prototype = <x><y/></x>) { {}})());");
tryItOut("try { __iterator__ = constructor; } finally { yield __count__ = __count__; } ");
tryItOut("M:if(--<x><y/></x>) {export __parent__; } else  if (new (yield <x><y/></x>)(window, __count__)) export __parent__;");
tryItOut("L:if(({constructor: <x/> }) |= window.__iterator__) ;");
tryItOut("if([1,,], 1.2e3) { if ([15,16,17,18].sort(0, __parent__)) {throw  '' ;(1 for (x in [])) }} else {__iterator__: <x><y/></x>L:if(__proto__.__parent__ = ([ /x/g ].sort(function(q) { return q; }))) throw  \"\" ; else  if (prop = <x/>.watch(\"__proto__\", Function)) yield -1; else  }");
tryItOut("function::prototype\nM:with({constructor: this >>= this}){let __parent__;return {}; }");
tryItOut("{M:switch(prototype) { case <x/>[undefined]: continue M;break; default: break;  }switch(<x><y/></x>.(<x><y/></x>)) { default: ;break; case 1: return;break;  } }\nif(<x><y/></x> = <x><y/></x>) { if ([<><x><y/></x></>].map(__count__)) {throw __parent__; } else {gc() }}\n");
tryItOut(" '' ;");
tryItOut("if((__parent__ = <x/>).@* <= <y><z/></y>) ; else  if (((function  __parent__ (prototype, __proto__)[1])())) throw <x/>;");
tryItOut("/*infloop*/for(let ({ constructor: [, , ({ __parent__: __noSuchMethod__ }), ] }) = (true < *); return; Boolean(__proto__.__lookupGetter__(\"get\")).watch(\"constructor\", ++)) yield;");
tryItOut("do {/*for..in*/for(const __count__ = (<><x><y/></x></>)(<y><z/></y>--) in [15,16,17,18].some(eval, true).__lookupGetter__(\"__proto__\")) {yield;if([,,z1]) export *; else  if (.2) { } } } while((((function (prop) { /a/gi } )(<y><z/></y>, ({a1:1})) -= [15,16,17,18].filter(4., 0x99))) && 0)\n/*infloop*/L:for(((<y><z/></y> >> <x><y/></x>)\n); let (constructor = <x><y/></x> ^ *, __iterator__) (<x/>)(eval(\"*\", [,]), this); (function  prop (constructor, __parent__) { export constructor; } )() , __parent__.hasOwnProperty(\"__iterator__\")) {yield; }");
tryItOut("const __proto__ = <x><y/></x>, __noSuchMethod__");
tryItOut("export prop;");
tryItOut("/*infloop*/for(undefined || @foo; delete (-1); RegExp()) return <><\nx><y/></x></>;");
tryItOut("({)return undefined; }");
tryItOut("/*infloop*/while(export __count__.yoyo(prop = ((<x><y/></x>).watch)(<><x><y/></x></> /= 0/0, <><x><y/></x></>))){ '' ;for(let y in [5,6,7,8]) return; }");
tryItOut("/*for..in*/for(constructor in  /x/ ) {var prop = false, __noSuchMethod__; }");
tryItOut("/*infloop*/for(let __parent__; function(y) { yield y; return  /x/g ;; yield y; }(*::*, __count__); __parent__) {for(let y in [5,6,7,8]) [1,2,3,4].map }");
