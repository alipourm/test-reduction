tryItOut("yield -Exception();");
tryItOut("M:if(prop.__proto__) { if (prototype = x::__proto__) {yield  /x/ \n/*infloop*/M:for(<x><y/></x>; .2; 3.141592653589793) const __count__ =  \"\" ;/*infloop*/for(var __count__; window; <><x><y/></x></>) gc() }} else yield (constructor = ({__noSuchMethod__: <y><z/></y>}) >>>=3.141592653589793)[(let (__iterator__, __noSuchMethod__) <y><z/></y>)];");
tryItOut("L: {throw  /x/ ;let __count__; }/*for..in*/for(__proto__ =  in []) {const __proto__ = prototype; }");
tryItOut("__count__ = prop;");
tryItOut("{}");
tryItOut("if(function(id) { return id }.unwatch(\"__iterator__\")) { if (__parent__ = <y><z/></y>) let __iterator__, {export *; };; else {throw <x/>;__proto__: arguments; }}");
tryItOut("if([] = eval(\"1.3\", <><x><y/></x></>)) return; else  if (prototype.__iterator__ = (new ( /x/g )(<><x><y/></x></>)).*) { /x/ ;gc() }");
tryItOut("/*infloop*/for(0.1; <x><y/></x>; <x><y/></x>) {; }");
tryItOut("/*infloop*/while(new (@foo)( \"\" ,  /x/g )){return;yield; }");
tryItOut("with({prop: ({prototype setter: [1,2,3,4].map })})if(__noSuchMethod__.__defineSetter__(\"__iterator__\", (1 for (x in [])))) { }");
tryItOut("export *;");
tryItOut("L: {break L; }");
tryItOut("{(({a1:1})); }");
tryItOut("gc()\n(new Function(\"continue ;\"))\n");
tryItOut("/*for..in*/for(const constructor = Number((void false)) in [((~__count__) in 3\r >= @foo)]) {yield;var prototype = <x/>, prop; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("M:switch(__count__.__parent__) { default: case .2.constructor = constructor: gc() }");
tryItOut("M:if(new (function () { return [(true)].map(this) } ).call()) {gc() } else  if ((yield (uneval(this)))) ((p={}, (p.z = false)()));");
tryItOut("/*infloop*/for((\t({}).__lookupGetter__)(window); [<><x><y/></x></>].sort(function (constructor, constructor) { yield <x><y/></x> } ); [[]] &= ) {return;prototype, prop; }");
tryItOut("break M;\nthrow __noSuchMethod__;\n");
tryItOut("if(prototype = __iterator__) {export __noSuchMethod__;; } else  if ((yield <x/>)) const [z1,,] = [z1], __proto__; else ;");
tryItOut("while((033) && 0){throw <><x><y/></x></>;__iterator__ = <x><y/></x>; }");
tryItOut("if((@foo |= (yield  '' )).*) { if ([11,12,13,14].map) /*for..in*/for(const prototype in  \"\" ) return window; const __iterator__; else export *;}");
tryItOut("/*for..in*/for([__count__, __iterator__] = (yield ([11,12,13,14].map)).__count__ = ([[]]).__defineSetter__['__proto__'] = ((<x><y/></x>.prototype) for each (each in ({a1:1})) for each (__parent__ in this)) in new String(window)) export prototype;");
tryItOut("let (__parent__ = window) { /*infloop*/for(({ prop: default: break; , setter: ({ function::__parent__: prop }) }) = prototype.constructor getter= ({}).__lookupGetter__; [*::*//h\n if (window)]; <x/> -=  /x/g ) {L:switch(this) { case ({a1:1}): throw <><x><y/></x></>;break; default: case <><x><y/></x></>: __proto__;break; break; case 5: let prop, __noSuchMethod__;{}break; case 5: yield;break;  } } }");
tryItOut("yield (5.0000000000000000000000).call(#1#, <><x><y/></x></>, <x/>); const __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("break ; const prop;");
tryItOut("/*for..in*/for([function::prop, prototype] = <x/> in ([15,16,17,18].map(Math.sin, <y><z/></y>))--) (<><x><y/></x></>);");
tryItOut("/*for..in*/for(var constructor in ((function (__noSuchMethod__, constructor) { return (<><x><y/></x></>.__lookupSetter__(\"prop\")) } )(<x><y/></x>--))){gc()gc() }");
tryItOut("<y><z/></y>");
tryItOut("yield [z1]");
tryItOut("let(__noSuchMethod__, __proto__) { __parent__ = prop;");
tryItOut("M:if(window) { if ([1].__lookupSetter__(\"__count__\")) {return __proto__; }} else {(true);var function::getter, __count__ = *; }");
tryItOut("if(eval(\"return\\ngc()\", (__iterator__ |= prop) !== ({__count__: -1}))) {yield 3/0;{} } else {gc()return; }");
tryItOut("/*infloop*/M:for(prop; <y><z/></y>; *) function ([y]) { };");
tryItOut("/*for..in*/for(const prop.__count__ in this) {switch(0.1) { __count__ setter:  \"\"  } }");
tryItOut("L:do {/*for..in*/for(const [__noSuchMethod__, prop] = constructor in <x><y/></x>) export prop; } while((([1,2,3,4].map)((this.zzz.zzz /= constructor .@*:: <><x><y/></x></>), (__parent__ = true))) && 0);");
tryItOut("/*infloop*/do {/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = 0.1 <= <><x><y/></x></> in prototype) /*infloop*/for(prop; <><x><y/></x></>; constructor) gc() } while((({constructor: {}, __noSuchMethod__ setter: ((1 for (x in []))).apply }) > this.zzz.zzz));");
tryItOut("{let __iterator__; }");
tryItOut("/*infloop*/M:do {return; } while((<{prop}> </{prop}>.( /x/ )));");
tryItOut("if((prop = ({a2:z2}).throw((\nconstructor = <x><y/></x>))))  else  if (<x/>) {//h\n(gc).apply\tyield; } else yield null;");
tryItOut("with({}) { (__noSuchMethod__) = function::constructor; } ");
tryItOut("/*infloop*/while(<><x><y/></x></>)let __proto__, __iterator__;");
tryItOut("L:if((true)[prop]) { if (new (-3/0)()) {break ; } else return @foo;}");
tryItOut("{if(#1=[#1#]) { if ( '' ) {export __parent__;let prototype; }} else const __iterator__, prop = <x/>; }");
tryItOut("M:do return; while((window) && 0);");
tryItOut("let ([__count__, ] = this.__defineSetter__(\"prototype\", (function () { return \t#3={a:#3#} } ).apply)) { throw  /x/ ; }");
tryItOut("return  /x/ ; const __iterator__;");
tryItOut("/*infloop*/for((<><x><y/></\fx></>)(this); <x><y/></x>.(<y><z/></y>);  '' .__lookupGetter__(\"prototype\")) ");
tryItOut("/*for..in*/M:for(var (__proto__) in ((gc)(throw  '' \nyield)))/*for..in*/M:for(const [constructor, prop] = \n(this)() in window) ;");
tryItOut("__iterator__ = __count__;");
tryItOut("M:if(*) return <><x><y/></x></>; else {__noSuchMethod__;; }");
tryItOut("(L:(*::*.watch(\"prop\", window) .@x:: *::*.eval(<><x><y/></x></>))) { if (((true)[<x><y/></x> | *::*])) __proto__} else )if(<><x><y/></x></> >= try { throw -3/0; } catch(__count__) { const prop; } ) yield;");
tryItOut("let constructor;");
tryItOut("try { let(constructor = __proto__.unwatch(\"__iterator__\")) ((function(){prop = __parent__;})()); } catch(__iterator__ if __parent__.__iterator__ getter= (true).__defineSetter__) {  for (__count__ in ('fafafa'.replace(/a/g, ({}).hasOwnProperty))) for (__noSuchMethod__ in <x><y/></x>) for (prototype in window) } catch(prototype) { constructor = prototype; } finally { yield [,,].propertyIsEnumerable(\"constructor\"); } ");
tryItOut("/*infloop*/do yield; while([*]);");
tryItOut("if(yield delete false ===  \"\" ) {yield\n }\t");
tryItOut("if((\n<><x><y/></x></>['__proto__'])) {;throw <y><z/></y>; } else  if (__parent__.((new Function(\"gc()\"))).call|=__count__) {return undefined;/*infloop*/L:for(let ({ function::__iterator__: constructor, __noSuchMethod__: constructor }) = this.propertyIsEnumerable(\"__parent__\"); __count__ = this; (function::__parent__ * prototype)) let prototype = <y><z/></y>, __parent__ = 033; } else M:if(\f[11,12,13,14].filter) {; }");
tryItOut("/*for..in*/for(let __count__ in ((Function)(-this\n)))if((--prototype: [1,,])) ");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("/*infloop*/for(const [, ] = [15,16,17,18].some(((1 for (x in []))).apply, false); @foo ?  /x/g  : <><x><y/></x></>; __iterator__ = try { {} } catch(getter) { gc() } ) M:if(<x/>) {; } else  if (({a2:z2})) {{} } else {export prop;(.2); }");
tryItOut("{break ;export *; }");
tryItOut("with(new Number(@foo))<x><y/></x>");
tryItOut("/*for..in*/for(const __noSuchMethod__ = yield window in 3.throw(this.valueOf(\"number\"))) {let [prototype, , __noSuchMethod__, , ], __noSuchMethod__; }\nreturn;\n");
tryItOut("/*for..in*/for(let __count__ in <x><y/></x>) export *;");
tryItOut("/*infloop*/while([1,,] !== <x><y/></x> |= (function(y) { yield y; yield;; yield y; })())/*for..in*/for(const [__iterator__, constructor] =  in this) Math.sin");
tryItOut("yield <> '' </>;");
tryItOut("window;");
tryItOut("L: M:do {continue ;const *::*; } while((\n<x><y/></x>.__defineSetter__(\"prop\", Function)) && 0);");
tryItOut("with({}) { export *; } ");
tryItOut("M:if(Error()) {({}).__lookupGetter__ }");
tryItOut("switch((this.valueOf(\"number\").throw(undefined >= *))) { default: break; break;  }");
tryItOut("{/*infloop*/for(*::*.__noSuchMethod__; (-0); ()) {var prototype, prop =  '' ;continue M; } }");
tryItOut("{\nyield; }");
tryItOut("<x><y/></x>");
tryItOut("{}\nreturn;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while(<x><y/></x>){0.1; /x/ ; }");
tryItOut("if(let (prop = @foo, __proto__ = [z1,,]) true.propertyIsEnumerable(\"__parent__\").__lookupSetter__(\"__parent__\")) <>(this)().throw(undefined ==  \"\" )</>");
tryItOut("return;");
tryItOut("switch([null for (__proto__ in 3/0)].prop) { default: ;break; break; case 7: throw [[]];break; case ('fafafa'.replace(/a/g, constructor)): gc() }");
tryItOut("return;var __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in <x><y/></x>) export __iterator__;");
tryItOut("/*infloop*/while(let (__noSuchMethod__ = this, __iterator__ = <x/>) (-1).unwatch(\"function::__noSuchMethod__\")){/*for..in*/for(const __noSuchMethod__ in this) break ; }");
tryItOut("/*for..in*/M:for(__iterator__ = (({__iterator__: <x/>})) in __noSuchMethod__) __parent__;");
tryItOut("let(__iterator__ = ([z1].propertyIsEnumerable(\"prop\")).propertyIsEnumerable(\"constructor\")) { with({}) { with({}) __noSuchMethod__ = prop; } ");
tryItOut("let (constructor = ('haha'.split).apply([,,], *::*).* .@*:: 0/0 -= __iterator__.@foo, __iterator__ = new /a/gi(<x/>++).__lookupGetter__(\"constructor\")) { yield __count__.isPrototypeOf({}); }");
tryItOut("for(let y in []);");
tryItOut("if(null) {var __proto__; } else  if (__count__) {yield window; } else break ;");
tryItOut("/*infloop*/for(prop; \f(yield <x/>); undefined.eval(new String(0, @foo))(<x><y/></x> != <><x><y/></x></>)) {let (prototype = prop) { Math.pow } }");
tryItOut("*::*");
tryItOut("export *;");
tryItOut("do true; while(((([15,16,17,18].map(({}), <y><z/></y>))[*::*--])) && 0);");
tryItOut("with({}) { [, constructor, __parent__, __noSuchMethod__] = true.__noSuchMethod__, prop =  '' ; } ");
tryItOut("if((-1)) export constructor;\t else  if (0x99)  '' ; else throw <><x><y/></x></>;");
tryItOut("/*for..in*/M:for(var __parent__ in ((function () { yield ([11,12,13,14].filter) } )(let (__count__ = constructor, try { export __proto__; } finally { prototype = constructor, __parent__; } ) __count__.__lookupSetter__(\"prop\")))){while(((new Object(<y><z/></y>))) && 0)return; const __noSuchMethod__; }");
tryItOut("if(#1=({constructor: (<x/> << <x/>)})) {/*for..in*/for(__parent__ in ((('haha'.split).apply)(undefined))){ }\f } else  if ( ) {yield; } else (__noSuchMethod__);");
tryItOut("/*infloop*/for(var constructor = (({ set prop(prop) { yield this }  })); 1e-81.yoyo({}); ([* if (<x/>)])) {return;function (prototype, __count__) { return *::* }  }");
tryItOut("do {let __iterator__, break M;;var __count__ = 0x99; } while((<>yyy</>) && 0);");
tryItOut("const prototype = window\n");
tryItOut("/*infloop*/L:do {export *; } while( \"\" .propertyIsEnumerable(\"__proto__\"));");
tryItOut("/*for..in*/for(var [prototype(<y><z/></y>); __count__] =  \"\"  in [<x><y/></x>] default: break; case <y><z/></y>: function(q) { return q; } ) (\ffalse);");
tryItOut("export constructor;__count__, __noSuchMethod__ = .2;");
tryItOut("let (prototype) { (<><x><y/></x><\f/>); }");
tryItOut("L: export *;");
tryItOut("let (prototype, prototype = undefined) { yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in false + [].eval(<x/>)) {__parent__ =  /x/g , constructor = <><x><y/></x></>\n }");
tryItOut("if(<zzz>window</zzz>) {; } else {<x><y/></x>;yield __count__; }");
tryItOut("var prototype = window\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in [1]) return <x/>;");
tryItOut("L: yield <x><y/></x>;");
tryItOut("if(<><x><y/></x></>.constructor.valueOf(\"number\")) {\fcontinue ; \"\"  } else {__noSuchMethod__, prototype;const constructor = false; }");
tryItOut("if(<><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\")) { } else  if (\nnull) {yield <y><z/></y>; } else {const __noSuchMethod__, __noSuchMethod__ = this; }");
tryItOut("do M:if((new false)) {continue L; } else continue L; while(((-(yield (constructor.__iterator__ = (undefined >>> 033))))) && 0);");
tryItOut("if((uneval(#1=true / @foo)) -  /x/g ) { if (#3={a:#3#} for each (constructor in <y><z/></y>)) export *;} else gc()");
tryItOut("for(let y in []);");
tryItOut("{throw <x/>; const false; }\t");
tryItOut("yield;\nlet __parent__ = <><x><y/></x></>;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [, , , ] in (<x><y/></x> for each (__proto__ in <x><y/></x>))) \r__count__ = <x><y/></x>;");
tryItOut("export __count__;");
tryItOut("yield\nswitch(<><x><y/></x></>) { default: function(y) { yield y; continue M;; yield y; } }");
tryItOut("for(let y in []);");
tryItOut("export constructor;\nyield;\n");
tryItOut("throw __proto__;");
tryItOut("M:if((__count__ @ -3/0 - true :: <><x><y/></x></>)) {break L; } else yield *::*;");
tryItOut("{<x><y/></x>\n;\n{} }");
tryItOut("/*for..in*/L:for(__count__ in [z1]) break L;\nyield;\n");
tryItOut("/*for..in*/for(let prop = eval .. [<x><y/></x> for (__proto__ in __noSuchMethod__) for (__parent__ in *)] in Object()) {return (({__noSuchMethod__: prop |= __iterator__.__lookupGetter__(\"prototype\")})); }");
tryItOut("/*infloop*/for(var [, __iterator__, , , ] = Math.pow; this; gc((yield this), [11,12,13,14].map))  const prop;");
tryItOut("{/*infloop*/L:for([window].some([1,2,3,4].slice);  > <x>\t<y/></x>; (new Number(<x/>))) yield; }");
tryItOut("/*infloop*/for(const __parent__; [15,16,17,18].map([1,2,3,4].slice, ({ prop: __proto__ }) = __noSuchMethod__).__defineSetter__(\"(this.zzz.zzz)\", function ([({ __iterator__: __proto__ }), ])new (window)(this)); @foo.throw((function ([y]) { })())) {if(((this)[@foo])) export *; else {} }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8])  for (__noSuchMethod__ in (({ __parent__: constructor }) = false.@foo)) = constructor;");
tryItOut("case <><x><y/\n></x></>.prop: break; case (({a1:1}) if (<><x><y/></x></>)): break; ");
tryItOut("with({__proto__: __iterator__.__proto__ getter= [1,2,3,4].slice}\t){if( '' ) yield @foo; else  if (prop) yield true; }");
tryItOut("/*infloop*/L:for((-1).unwatch(\"prop\"); \neval(\"\", #3={a:#3#} >>> prop).__noSuchMethod__ = -<x><y/></x>; [,,].prototype+=window) L:with(({}).hasOwnProperty)with({each:  /x/g })return __count__;");
tryItOut("do ; while(( \"\" ) && 0);");
tryItOut("{{}if(prototype) {var prop = <>default: throw __iterator__;break; </>; } else {(<y><z/></y>);export __proto__; }\n }");
tryItOut("throw StopIteration;");
tryItOut("L: {let __noSuchMethod__\n { yield *::* } ; }");
tryItOut("/*for..in*/for({/*for..in*//* nogeckoex bug 349964 */ for  each(let (prop) in  \"\" ) {function::__proto__ = __parent__; } } in [[]].@foo) /*infloop*/for(var __parent__ = {}; true; <x><y/></x>) yield <x><y/></x>;");
tryItOut("L: {if(1e4) {return @foo; } else  if (window) {(new Function(\"export prop;\")) } else {return this;throw false; }{} }");
tryItOut("/*infloop*/for(case 8: for(let y in []);break; case 1: this.zzz.zzz;break; ; __iterator__ = [(__count__ = this) if (<x/>)]; [<><x><y/></x></> for (__proto__ in undefined)] ^= [15,16,17,18].some(Math.sin, arguments)) {([]); }");
tryItOut("if(prototype(<x><y/></x>, <><x><y/></x></>)) { if (<x><y/></x> > this) {let prop = [[]], prop;let prototype = [[1]]; } else ;}");
tryItOut("switch(__parent__) { default: case 4: gc()break; let prop = __noSuchMethod__, __parent__;break;  }");
tryItOut("yield false;");
tryItOut("L:with({__count__: ((constructor = window)(<x/>))}){prototype = [[]], constructor; }");
tryItOut("let (constructor = this.hasOwnProperty(\"__parent__\")) { /*infloop*/for(var [constructor, constructor, prototype, , __iterator__] =  /x/g .__lookupSetter__(\"__iterator__\"); (yield *::*); false) continue L;\nyield undefined;\n }");
tryItOut("/*infloop*/for(let __iterator__ = this; this; <x/>) ");
tryItOut("yield let (__proto__ = #0=[*::*]) return;;");
tryItOut("let (__parent__ = __iterator__.__count__) { continue M\n }");
tryItOut(";");
tryItOut("/*infloop*/L:while(<y><z/></y>)return *::*;");
tryItOut("/*infloop*/for(__parent__; {}; ((<x><y/></x>.__parent__%=true) & <x/>)) {export prototype;yield <x><y/></x>; }");
tryItOut("return <x><y/></x>.@foo;");
tryItOut("let (prototype = prop) { ; }");
tryItOut("if(<><x><y/></x></> |= <><x><y/></\tx></>) ; else {; }");
tryItOut("switch(!true) { case (new (<y><z/></y>)()):  }");
tryItOut("with(let (constructor = -0) ({__iterator__: window })){window;/*for..in*/for(const __iterator__.constructor in this) \t{/*infloop*/for( \"\" ; this; __noSuchMethod__) export __noSuchMethod__; } }");
tryItOut("/*for..in*/M:for(let constructor = \nconstructor in 1e4) {gc(); }");
tryItOut("/*for..in*/for(const prop in @foo) {{}<>this</> }");
tryItOut("*.prototype");
tryItOut("/*infloop*/__iterator__ = 0/0");
tryItOut("with({}) (033);");
tryItOut("{if([z1,,]) yield;{eval } }");
tryItOut(";");
tryItOut("/*infloop*/for([0/0].sort([1,2,3,4].map); new Object(); (*.__noSuchMethod__)) do {gc() } while((({a2:z2})) && 0);");
tryItOut("let (__iterator__, prototype) { {return window;__iterator__ } }");
tryItOut("M:if(@foo) {( /x/ ); } else  if (#3={a:#3#}) ;");
tryItOut("/*infloop*/do {yield (uneval((__noSuchMethod__ = <\tx><y/></x>)))(prop, let __iterator__ = <x/>, prototype = undefined.__lookupGetter__(\"__parent__\")); } while((this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty) if ((__proto__ =  /x/g ))));");
tryItOut("/*infloop*/M:while(#2=({__noSuchMethod__: [(<y><z/></y>.__iterator__ = 1.2e3).throw(null .. 1e-81) for (__noSuchMethod__(-3/0) in this)]})){do switch(<y><z/></y>) { case __proto__: case 6: default: case [[1]]: break; case <y><z/></y>: ( /x/ );case 0: export *; = this; } while(( /x/g .__proto__) && 0);\f-1 ? 1e4 : 1e+81; }");
tryItOut("/*infloop*/M:for(__parent__; this; null) {<y><z/></y>;(<x><y/></x>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor.prop in ) {switch(<><x><y/></x></>) { default: break; break;  } }");
tryItOut("\n");
tryItOut("let (({ __iterator__: __iterator__ }) = (new *)) { L:if(this) {const __count__ =  \"\" , __proto__; } else  if (*::*) {{}[[]]; } else {export *; } }");
tryItOut("/*infloop*/for((__iterator__.prop setter= (Math.pow).apply ); null; ((<><x><y/></x></>)()).throw(\n())) {({}).__lookupGetter__ }");
tryItOut("return this\n");
tryItOut("/*infloop*/for(let prop = [,,]; window; *) {(3/0);this; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(const prototype; (arguments[*::*] for (prop in 0.1/*\n*/) for (__noSuchMethod__ in <x/>)); __count__.__count__ = true != @foo) {M:do  while((typeof *) && 0); }");
tryItOut("switch((__iterator__ = <x><y/></x>)) { default: break;  }");
tryItOut("with(*){var __parent__ = *::*;yield; }");
tryItOut("if(<x/>) let prototype, __iterator__ = *; else const __noSuchMethod__;");
tryItOut("(this)\nyield;");
tryItOut("throw #1#");
tryItOut("{(@foo); }");
tryItOut("\ngc()\n");
tryItOut("L:while((let (prop) delete <><x><y/></x></>) && 0){L:switch(({})) { case 2: case 8: default: ;return @foo;break; case 0: let __noSuchMethod__;break; {}case 0: yield;break; case  \"\" : gc()@foocase const __count__, __proto__;: case 8: break; case <y><z/></y>: break;  }L: {while((<x><y/></x>) && 0)var constructor; } }");
tryItOut("try { export __noSuchMethod__; } catch(__proto__ if (function(){yield;})()) { gc() } finally { (prop); } ");
tryItOut("if(new function  __iterator__ () { export __count__; } (<x/>,  \"\" )) { if (__noSuchMethod__ = <x><y/></x> <<  /x/ ) {return <x><y/></x>;<x><y/></x> }} else {export \t__count__; }");
tryItOut("do yield; while(((let (__count__) *::*)[<y><z/></y> || *::*]) && 0);");
tryItOut("if((({}).hasOwnProperty).call(this, ).*) { if ((this++).hasOwnProperty(\"__noSuchMethod__\")) {/*for..in*/for(var prop in <x/>) <x/>; }} else {L:switch(function::constructor.prototype setter= Math.sin.throw(true in undefined)) { case 2: yield __proto__;break; case [--*]: break; break;  }; }");
tryItOut("do {with(<x/>){} } while((((function(y) { yield y; /*infloop*/for([,,z1] <= [,,]; ((p={}, (p.z = <><x><y/></x></>.unwatch(\"prototype\"))())); <x/>['__iterator__'] = (eval(\"break M;\", null))) /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in 3/0) {prop getter: Math.powtry { return __count__; } finally { break ; }  }; yield y; })(((constructor /= false) *= (yield true).propertyIsEnumerable\"__count__\").__lookupSetter__(\"prop\")))++)) && 0);");
tryItOut("export __parent__;");
tryItOut("\nyield\n(undefined)");
tryItOut("/*infloop*/L:for(var [] = <x><y/></x>.unwatch(\"constructor\"); new /a/gi(); [11,12,13,14].sort) gc()");
tryItOut("__count__ = [z1,,], prop; const __iterator__");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = this in (null;)[[__count__].*]) {do {let get;continue ; } while((@foo.__defineSetter__(\"constructor\", function  __parent__ (prop, prototype) { return @foo } )) && 0); }");
tryItOut("if(<x/>) { if ([z1]) {;(__parent__); } else return;}\nreturn;");
tryItOut("throw StopIteration;");
