tryItOut("/*infloop*/while(\n((yield <>//h\n<x><y/></x></>).__lookupGetter__(\"__iterator__\"))){/*for..in*/L:for(let prototype in <x><y/></x>) {return  /x/g ;continue M; } }");
tryItOut("/*for..in*/for(let (delete <x><y/></x>).prop in {}) throw StopIteration;");
tryItOut("{/*for..in*/M:for(var __count__ = <x><y/></x> in <x><y/></x>) break L;yield [window];/*infloop*/for(var [] = false >= [,];  \"\" .__lookupSetter__(\"prototype\"); (__iterator__.__proto__ getter= (-3/0).watch)) return [1,,] }");
tryItOut("/*infloop*/while(Math.pow * ({constructor:  /* Comment */true,  get prop(__proto__) {  }  }))/*for..in*/for(const __noSuchMethod__ in <><x><y/></x></>) throw <x/>;");
tryItOut("/*infloop*/for(let __count__; (yield RegExp(<y><z/></y>,  '' )); Iterator(*::*, undefined)) switch(<><x><y/></x></>) { case <x><y/></x>: break; \f }");
tryItOut("__iterator__ = <x/>, constructor;");
tryItOut("/*infloop*/while(window == constructor){return undefined;__proto__ =  \"\" ; }");
tryItOut("/*infloop*/M:while(__parent__)gc()");
tryItOut("{gc() }");
tryItOut("return;");
tryItOut("do {return; } while((__proto__) && 0);");
tryItOut("{export *;prop; }");
tryItOut("return;");
tryItOut("M:if(constructor.(<x><y/></x>).valueOf(\"number\")) yield;");
tryItOut("this.zzz.zzz;");
tryItOut("{/*for..in*/for([__count__, __proto__] =  /x/  in <x/>) <x/>; }");
tryItOut("/*infloop*/for(([]); ((RangeError( /x/  ? <y><z/></y> : __parent__)) *= <>-1</>); <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {([1,2,3,4].map).apply }");
tryItOut("M:do {yield } while(((uneval((Function)( /x/g )))) && 0)\n;");
tryItOut("throw StopIteration;");
tryItOut("{return __iterator__|=[,,z1];with({yield: #1#}){Function } }");
tryItOut("while((-__iterator__ = *.__defineGetter__(\"__parent__\", (-1))) && 0){(<x/>); }");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __count__ in <><x><y/></x></>) {;yield; }");
tryItOut("if(new <x/>(window)) { if (<y><z/></y>.eval(#1#)) {{} }} else {export *;return; }");
tryItOut("/*infloop*/for(let [, , , ({ __noSuchMethod__: [constructor] }), ] = ((new +__proto__(@foo / undefined)) == null === window); __proto__/*\n*/ = <x><y/></x>; -<x><y/></x>) {gc() }");
tryItOut("let(prototype, prototype = yield <x><y/></x>.__defineSetter__(\"constructor\", [1,2,3,4].slice)) { with({}) this.zzz.zzz;");
tryItOut("/*infloop*/for(//h\nvar ({ __parent__: [[try { let(prop = ({a1:1})) ((function(){let __count__ = window;})()); } finally { with({}) {  }  } ], __proto__, ], prop: [({ {var __count__ = <y><z/></y>; }: __count__, __parent__: __iterator__ }), ({ __parent__: ({ prop: __count__, getter: ({ __parent__: ({ __proto__: __noSuchMethod__, __iterator__: __count__ }), prop: __noSuchMethod__ }) }) }), ({ __count__: __count__ }), , ] }) = new String(); (-1); (#2=#1=[#1#].hasOwnProperty(\"prototype\"))) { }");
tryItOut("M:if( '' ) {export *; } else {const __parent__ = #1=[#1#], __noSuchMethod__ = [1,,]; }");
tryItOut("throw prop;");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*for..in*/for(const __parent__ in ((#1=[#1#])((<y><z/></y>)(<x><y/></x>, __parent__)))){( \"\" );return <y><z/></y>; }");
tryItOut("let (prototype = [1,,], prop = __proto__) { throw 0.1; }");
tryItOut("return <x><y/></x>\n");
tryItOut(" { ; }  const __noSuchMethod__;");
tryItOut("if((({ __iterator__: function::prop, __count__: __proto__ }) = ({ __noSuchMethod__: prototype, prototype: __iterator__ }))) ; else /*for..in*/for([prototype, __noSuchMethod__] = ({a1:1}) in <y><z/></y>) function::__iterator__ = null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in ) {[1,2,3,4].map }");
tryItOut("if(__parent__ = new new Function( '' )) L: {export __parent__;function  constructor () { return <y><z/></y> }  } else  if (prop .. __proto__) export *; else Function");
tryItOut("{/*for..in*/for(let __parent__ in ({ __iterator__: prop }) = this.__defineGetter__(\"__parent__\", Function)) {let prototype = false, __parent__ = 0.1; }with({__count__: <><x><y/></x></>})__count__; }");
tryItOut("if((({ __noSuchMethod__: __noSuchMethod__, constructor: prop }) = prototype =  /x/ )) {return __count__;yield this; } else  if (<x/>) {(({a1:1}));break ; } else export prop;");
tryItOut("M:if((0/0)[(<><x><y/></x></>.@*)]) var get = window, __parent__ = @foo; else ");
tryItOut("function(y) { yield y; <x><y/></x>;; yield y; }\nexport *;");
tryItOut("let(__noSuchMethod__) ((function(){with({}) { yield []; } })());");
tryItOut("if((uneval(<x/>))) { if ((-0) if (4.).valueOf(\"number\")) export *;} else {{let prototype = @foo, __parent__; } }");
tryItOut("break L; const constructor;");
tryItOut("L:if(Array(window)) (<><x><y/></x></>).watch else  if ((null.throw( /x/ ))) {gc()[1]; } else continue L;");
tryItOut("L: {throw <x/>; }");
tryItOut("/*for..in*/M:for(let __iterator__ in <><x><y/></x></>) {throw __iterator__; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = ({prop: ((<x><y/></x>)(this)) / this.__defineSetter__(\"prototype\", function () { return undefined } )}) in ({__count__ __proto__ (constructor) { return ([11,12,13,14].map) }  })) if(#1=({constructor: <><x><y/></x></>})) export *;");
tryItOut("let \rprototype = [z1], __proto__ const __parent__; const prototype;");
tryItOut("for(let y in [5,6,7,8]) {}\ncontinue L;");
tryItOut("/*for..in*/for(prop in <x><y/></x>) {yield; }");
tryItOut("if( \"\" .eval(undefined).__defineGetter__(\"__proto__\", __parent__)) {[1,2,3,4].map } else  if ( /x/ .__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)) {gc() }");
tryItOut("/*for..in*/for(var prop = ( \"\" .constructor)-- in new window(*, [,])) {/*for..in*/for(var prototype, @foo in ((gc)(window))){yield 1e81;let __iterator__; } }");
tryItOut("while((this.__defineGetter__(\"prototype\", new Function)) && 0){const __noSuchMethod__, prop;export __parent__; }");
tryItOut("{{var prototype;const x::__noSuchMethod__ = <x><y/></x>; } }");
tryItOut("L:if((Object(prop)) >> (<><x><y/></x></>)()) *::*;");
tryItOut("/*infloop*/for(const __iterator__; let (__parent__ =  /x/g , prototype) <><x><y/></x></>; *.__lookupGetter__(\"constructor\")) export __iterator__;");
tryItOut("do {{throw [,,z1];return prototype; }var __count__ = this; } while((window) && 0)\n");
tryItOut("L:if(window) {while(((yield *)) && 0)yield * } else  if ((yield [__count__ for each (__proto__ in this)]) + __noSuchMethod__|=(<x><y/></x>.__defineGetter__(\"__iterator__\", #1=[#1#]))) /*infloop*/for(let __noSuchMethod__; @foo.throw( \"\" ); [ \"\" ]) {continue L;<x><y/></x> } else {yield;<x><y/></x>; }");
tryItOut("{yield <x><y/></x>; const __noSuchMethod__;export __parent__; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; []; __noSuchMethod__.valueOf(\"number\") -= (<><x><y/></x></>)([z1,,], [z1])) return (<y><z/></y>.valueOf(\"number\"));");
tryItOut("throw __iterator__;");
tryItOut("while((\nthis < ) && 0){/*for..in*/M:for(var (__parent__) in ((gc)\f([<y><z/></y> for each (prototype in window)] /= yield *)))return this; }");
tryItOut("M:if(true) var __iterator__ = __proto__, __parent__; else  if (<><x><y/></x></>) {return <x/>;const prop =  /x/g ; } else {{} }");
tryItOut("__count__");
tryItOut("prop = 1.3");
tryItOut("/*for..in*/for(var undefined in ((Function)( /x/g ))){yield; }");
tryItOut("L:if(constructor) {continue ; } else {continue M;{} }");
tryItOut("if((p={}, (p.z = (<y><z/></y>.isPrototypeOf(true)) << --this)())) {export __iterator__;{} } else  if (((function(q) { return q; }(true))((-1).unwatch(\"__iterator__\")[(({prop: #1=[#1#] }))], \n__noSuchMethod__))) {(new Function(\"continue ;\"))\ndo yield; while(( \"\" ) && 0); }");
tryItOut("/*for..in*/for(var __iterator__ = (eval(\"<x><y/></x>\", false)) in ( '' \f++)) {var constructor, __noSuchMethod__ = this;const constructor; }");
tryItOut(";");
tryItOut("if(<x/>.__defineSetter__(\"__noSuchMethod__\", (gc//h\n).call)) __parent__; else  if (((([1,2,3,4].map).call((p={}, (p.z = 033)()), <x><y/></x>.yoyo(<x/>))) if (*::*))) {(<x><y/></x>); /x/g ; }");
tryItOut("do if(*) { if (window) {return; } else {break ; }\n}\nyield; const __count__; while((eval(\"__count__\", (p={}, (p.z = window)()))) && 0);");
tryItOut("if(delete (+*::*)) break L;");
tryItOut("L:switch(prototype = null, constructor =  /x/g ) { case 4: break;  }");
tryItOut("while((false.propertyIsEnumerable(\"prop\")) && 0){with(1e4)export *; }");
tryItOut("{with((1 for (x in []))){; } }");
tryItOut("with(this.__defineSetter__(\"prototype\", [1,2,3,4].map))export *;");
tryItOut("if(* - this.throw((__iterator__.__iterator__ setter= __noSuchMethod__))) { if () export prop;} else yield window;");
tryItOut("/*infloop*/for(var __proto__ = __parent__.((delete undefined)).throw((__parent__|=function ([y]) { })) - eval(\"this\", __count__); prop = <x/>; yield [11,12,13,14].filter) {/*infloop*/while( '' ) instanceof  }");
tryItOut("/*infloop*/L:for(let [, ({ prototype: constructor }), __parent__, ] = prop+=<><x><y/></x></> -= window; +delete (window).call(@foo, [1,,]); \n<><x><y/></x></>) {yield;({}).hasOwnProperty }\nreturn;\n");
tryItOut("{(new Function(\"return <><x><y/></x>/*<>;\")) }");
tryItOut("/*infloop*/for(const __noSuchMethod__; ((gc).call(*::*, )); <><xxx {__parent__}={@foo} /></>) {/*for..in*/for(const <>this.__defineGetter__(\"constructor\", (new Function(\"{}\")))</> = false in __parent__) {yield;<ccc:ddd></ccc:ddd> } }");
tryItOut("do ; while((((p={}, (p.z = <><x><y/></x></>)()))) && 0);");
tryItOut("{__parent__, __parent__ =  /x/ ; }");
tryItOut("__iterator__(((<y><z/></y>).call(<><x><y/></x></> += __parent__, )) in ([ /x/g ]) >>= true) = __count__;");
tryItOut("continue ;<><x><y/></x></>");
tryItOut("if('fafafa'.replace(/a/g, (function(q) { return q; }).apply)) {let constructor, prop = ;let __noSuchMethod__ =  { return <x><y/></x> } ; } else  if ((__proto__ = this)) \fyield <x><y/></x>;");
tryItOut("yield\n/*for..in*/for(const prototype in 1e+81) {;(undefined); }");
tryItOut("M:do continue M; while((<x><y/></x>.propertyIsEnumerable\f(\"__noSuchMethod__\")) && 0);");
tryItOut("case ((p={}, (p.z = ([let (({ prop: __count__ })) ((({__count__: <x><y/></x/*\n*/>})))[new function  __parent__ (__iterator__, __iterator__) { return false } (<y><z/></y>)]].sort(Math.sin)))())): case 1: M:while(((*.__lookupGetter__(\"prototype\"))) && 0){let __noSuchMethod__ = prototype, __noSuchMethod__ = #1=[#1#];var __proto__ = -1; }default: case 7: L: ;break; case 8: break; case  \"\" : with(<y><z/></y>){yield;return; }break; case false: break M;break; case 2: case 1: break; break; case new <><x><y/></x></>(<x/>): yield;break; case 4: break; case  ''  ? *::* : arguments.valueOf(\"number\"): case 0: case function ([y]) { }: break; ");
tryItOut("let (__noSuchMethod__) { /*infloop*/for(let [] = <><x><y/></x></> >  '' ; __count__ = this; [[](__iterator__)].filter(-1)) const __noSuchMethod__ = null; }");
tryItOut("return;");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; \n#3={a:#3#}.hasOwnProperty(\"prop\"); <><x><y/></x></> ^ window.yoyo(([[1]] %=  /x/g .__parent__ = 4.))) {if((uneval(null))) {const __noSuchMethod__, __parent__ = 1e-81;return; } }");
tryItOut("M:if((\n[[1]])) yield; else  if (this) {return *::*; }");
tryItOut("while((1e+81.prop = (<><x><y/></x></>( /x/g ))) && 0)/*infloop*/L:while((prop = __iterator__))((this.__defineGetter__(\"__parent__\", *::*))[(0[*::*])])");
tryItOut("/*for..in*/for(var [constructor, prototype] = [ ''  for (__iterator__ in false)] in @foo) {export prototype;yield this; }");
tryItOut("let (__noSuchMethod__ = new this.__defineSetter__(\"__parent__\", /a/gi), __parent__) { if(prototype = *::*.__defineSetter__(\"__proto__\", (new Function(\"continue L;\")))) {if(()) { if (__iterator__ =  /* Comment */window) throw *::* else {<x><y/></x>;__count__, __noSuchMethod__ }} } else  if (([11,12,13,14].sort)) {throw  \"\" ; } else  }");
tryItOut("with(__parent__ = ({ get __proto__() { yield 0x99 *= [,,z1] } , prototype: __count__ }))if(<x/>) {return; } else {export constructor; }");
tryItOut("export *\n{export *; } const __parent__;");
tryItOut("/*infloop*/while(( /* Comment */( *= true)))/*infloop*/M:do {if(*::*) {export prop;([1]); } else  if (*::*) {gc() }; } while(<{//h\nprototype}> </{prototype}>);");
tryItOut("/*infloop*/for(let ({ __iterator__: constructor }) = #1=[#1#]; <xxx>{constructor}</xxx>; ((({__iterator__: /*\n*/function ([y]) { }})))[new function (__parent__) { yield  ''  } (<y><z/></y>)]) {export __proto__;\rreturn\n }");
tryItOut("yield window;\nreturn @foo;\n");
tryItOut("{/*for..in*/for(var __proto__ = *::* in __noSuchMethod__+=<x><y/></x> ? *::* : <x><y/></x>) {} }");
tryItOut("@foo");
tryItOut("/*for..in*/for(let [function::__proto__, , , ] in (((new Function(\"with({yield: prop})if( /x/ ) { if (prototype, __iterator__) {return;<x><y/></x>; }} else *;\")))(window))){constructor\n }");
tryItOut("if((new /a/gi([1,,]))) {return;break L; } else prototype, __count__ = false;");
tryItOut("L:do {with({prop: *})function  prop () { yield constructor } break ;//h\n } while(([,,] === *) && 0);");
tryItOut("with({prop: (this.__defineSetter__(\"__parent__\", (0x99).__defineSetter__))})yield;");
tryItOut("{}");
tryItOut("{}");
tryItOut("if(function::constructor) export __proto__;");
tryItOut("with({}) for(let y in [5,6,7,8]) (0/0);");
tryItOut("L: {export __parent__; }");
tryItOut("/*for..in*/for(let [__iterator__, constructor] = (__noSuchMethod__(prototype, [1])) in __parent__) if(0/0) (<x/>);");
tryItOut("/*for..in*/for(var function::__iterator__ = #1=[#1#] .@ <y><z/></y> in #3={a:#3#}) \f{let __noSuchMethod__ = 0x99, getter = prototype; }");
tryItOut("/*for..in*/L:for(let __iterator__ = ( /* Comment */__iterator__.__defineSetter__(\"__parent__\", ({}).__lookupGetter__)) in Function.unwatch(\"__count__\")) return;");
tryItOut("/*infloop*/while(<y><z/></y>){}");
tryItOut(" { yield (prototype.__count__ = ({a1:1})) <<= ((<><x><y/></x></>)[<><x><y/></x></>]) } ");
tryItOut("while(((export prop)) && 0)var prop, prototype\nwith({}) throw 5.0000000000000000000000;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ((this.__defineGetter__(\"__proto__\", (new Function(\"\")))))(<x/> if (this)) in ()) const prototype = 0/0, __proto__;");
tryItOut("while((*::*.throw( /x/ )) && 0){ }( /x/ );");
tryItOut("/*infloop*/do with(+*)export *; while(prop.__parent__);");
tryItOut("/*infloop*/for(prop; ((yield <x><y/></x>) ? __proto__ : ('fafafa'.replace(/a/g, <x><y/></x>))); (<x><y/></x>.(window))) export prop;");
tryItOut("/*infloop*/for(__iterator__; ({}); __count__) __proto__ = this;");
tryItOut("{yield; }\r");
tryItOut("if((window++ |= <><x><y/></x></>\n) === #1# %= <\fx><y/></x> ? (__parent__.watch(\"prototype\",  \"\" )) % false : yield true) {L:switch(eval(\"{}\", __proto__) .@x:: void 1e81) { case __iterator__.prop getter= (<x><y/></x>).watch: default: with(*::* >>>=033){return;(this).__defineSetter__ }break;  }let x::prototype = this, __noSuchMethod__ =  /x/ ; } else  if (__parent__ = ({a1:1})) gc()");
tryItOut("L: {continue L; }\nM:while(([,]) && 0){throw <><x><y/></x></>;throw <><x><y/></x></>; }\n");
tryItOut("{}\n");
tryItOut("if(3/0) {M:if(__noSuchMethod__.__noSuchMethod__ = {}) {yield true; } else  if (({a1:1}).valueOf(\"number\")) {/*for..in*/for(let constructor in <x><y/></\rx>) {let constructor = ({a2:z2});yield  /x/g ; } }const prop; } else /*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in prototype) throw ({});");
tryItOut("");
tryItOut("const prop = <y><z/></y>, __iterator__ = undefined;");
tryItOut("Math.sin");
tryItOut("undefined;");
tryItOut("(<x><y/></x> << window.eval(0x99))(new function(y) { yield y; continue ;; yield y; }()) = undefined, ({ prop: ({ __noSuchMethod__: __iterator__ }) }\f) = window >>>=eval(\"<x><y/></x>\", #1=[#1#])\n<x><y/></x>;");
tryItOut("L:with({__iterator__: (constructor = <y><z/></y>) for each (__proto__ in (__count__.prop getter= function  __noSuchMethod__ () { return prototype } ))})gc()");
tryItOut("M:if(__noSuchMethod__.((uneval(<x/>)))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in true) {return <><x><y/></x></>; const prototype; } } else  if ([(eval(\"*\", <><\tx><y/></x></>))[(<x><y/></x>)({)])])  const __count__ else var prototype = *;");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/M:do {/*infloop*/L:do {\tif(#1=[*::*]) { if (<x/>[<x/>]) {gc()export __count__; } else throw  \"\" ;}{export __iterator__; } } while(*::*); } while((((<><x><y/></x></>)()).__count__ =  '' ))");
tryItOut("gc const constructor;");
tryItOut("throw prop;");
tryItOut("{export *;{{<x/>;__count__ = *; }/*infloop*/while(1e+81)(constructor); } }");
tryItOut("{}");
tryItOut("if(__count__|=(__parent__.__parent__ = 3.141592653589793).eval(<><x><y/></x></> :: true)) { if (__noSuchMethod__) constructor = *;} else yield -1;continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var this.prop in 5.0000000000000000000000) {var __proto__, __noSuchMethod__ = __iterator__; }");
tryItOut("export __proto__");
tryItOut("M:do yield prototype; while((<x/>.eval(#3={a:#3#})) && 0);");
tryItOut("/*infloop*/for(prop; (yield <><x><y/></x></>); ! /x/g [__proto__.__proto__ getter= <x/>]) continue L;");
tryItOut("/*infloop*/for(([__iterator__ = __count__ if (<><x><y/></x></>)]).yoyo(function ([y]) { } -= *); [11,12,13,14].filter; prop.__count__ = __count__ = <><x><y/></x></>) {__count__, __count__ =  /x/g ;do return  '' ; while((<x><y/></x> >>> <><x><y/></x></>) && 0); }");
tryItOut("/*infloop*/for(const ({ constructor: ({ __count__: ({ __count__: ({ getter: __proto__, __iterator__: ({ prototype: __parent__, __count__: [, ] }) }), __parent__: __iterator__ }), __noSuchMethod__: __parent__ }) }) = false.throw((<x><y/></x> | prototype)) :: [z1,,]; <xxx {__iterator__}={(yield true)} />; null.*) with({}) let(__proto__) ((function(){(<x><y/></x>);})());");
tryItOut("if(*.unwatch(\"prototype\")) {let constructor = function ([y]) { }, prop =  '' ; }");
tryItOut("if((1 for (x in []))().__defineGetter__(\"prop\", Math.sin)) prototype; else  if (function ([y]) { }.watch(\"__parent__\", *).__lookupGetter__(\"prototype\")) gc()");
tryItOut("\n/*for..in*/for(var __iterator__ in (gc)()) {}");
tryItOut("M:switch( \"\" .__defineSetter__(\"prototype\", function(q) { return q; })) { case -0: Functionbreak;  }");
tryItOut("/*infloop*/while((1.2e3)[function ([y]) { }])if(window) {throw <y><z/></y>;/const __proto__, __proto__; } else  if (__proto__) {}");
tryItOut("L:with(<x><y/></x> ? ( /x/g  ^= <><x><y/></x></>) : prototype[@foo])if(let (constructor) true.eval(*.valueOf(\"number\"))) -0;");
tryItOut("if([] = yield null) export *; else {constructor; }");
tryItOut("{var constructor = prop; }");
tryItOut("if((uneval(undefined)) in window) if(new Date((<x><y/></x>.eval(-1)))) { if (( ''  :: <x/>.__noSuchMethod__ setter= undefined , (constructor.__count__ getter= function(q) { return q; } / prop))) L: gc()} else {throw <><x><y/></x></>;/*infloop*/for(({ get prototype()__count__, __proto__: <><x><y/></x></> });  /x/  ? ({a1:1}) : <x><y/></x>; <><x><y/></x></> ? window : this) return @foo; }");
tryItOut("M:if(({__proto__ setter: ( /* Comment */*::*).watch, constructor setter: new Function })) yield; else  if (<>[<x/> for each (__iterator__ in <><x><y/></x></>)\f]</>) {export *;\nexport __noSuchMethod__;\n } else (undefined);");
tryItOut("yield;");
tryItOut("let (prototype = null, prototype) { with(undefined) }");
tryItOut("{}");
tryItOut("L: {/*infloop*/for(prop; null; *::*) {let __noSuchMethod__ = @foo, prototype = -3/0;throw  \"\" ; }(\nconstructor); }");
tryItOut("L:do {(window);throw null; } while((constructor) && 0);");
tryItOut("/*infloop*/while(window :: window)export prop;");
tryItOut("if(new Date(prop.constructor \tsetter= function(y) { yield y; break ;; yield y; }, *::*)) {continue M; } else  if (let (prototype = <y><z/></y>, __proto__ = *::*) (new (Function)(null, [z1]))) {function(y) { yield y; const __noSuchMethod__, constructor;; yield y; } }");
tryItOut("/*infloop*/M:for(const __iterator__; (!(prototype.__proto__ setter= Math.sin)); ({constructor: ((uneval(__proto__)).*) })) gc()");
tryItOut(" finally ");
tryItOut("/*infloop*/for((<xxx {__noSuchMethod__}={~prototype %= <x><y/></x>} /> for (__count__ in constructor = constructor-=__iterator__ = new (033)(new 3.141592653589793([[]]), false) .@*:: (((constructor.__count__))[new false()]))); 'fafafa'.replace(/a/g, /a/gi); this.__defineGetter__(\"this\", (1 for (x in [])))) with(*.yoyo( \"\" )){return;\nthrow <y><z/></y>;\n; }\t");
tryItOut("if(let (__parent__ = function ([y]) { }) .2 /= __count__.__defineSetter__(\"__proto__\", (+\n( /x/ .eval(({a1:1})))))) {yield prop;yield; } else  if (([(this /=  /x/g ) for (prop in __proto__) for (prototype in undefined) for each (__proto__ in <><x><y/></x></>) if (null)])) constructor;");
tryItOut("throw prop;");
tryItOut("/*infloop*/L:for(const __parent__; (Date(prop, [z1])); undefined) yield 3;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__.__proto__ in <><x><y/></x>\t</>) {;033; }");
tryItOut("if(({a2:z2})) var __parent__, __noSuchMethod__; else  if (<><xxx {__iterator__}={null} /></>) {var prototype = __proto__;yield <y><z/></y>; }");
tryItOut("if((#1=({constructor:  /x/g }))) { if (([15,16,17,18].sort(gc, __proto__))) throw <y><z/></y>; else {const let = window;{} }}");
tryItOut("/*infloop*/for(<x/>;  '' ; <><x><\fy/></x></>)  \"\" ");
tryItOut("export *;const __noSuchMethod__ =  \"\" , __noSuchMethod__\nprototype getter: [[]]");
tryItOut("if() {{}gc() } else  if (<x><y/></x>) continue L; else {{}(this); }");
tryItOut("L:switch((yield this.*)) { default: /*for..in*/for((\f{ __count__: prototype }) in ((eval)(window)))__noSuchMethod__break; case 6: return;break; case 3/0: case (prop < 'fafafa'.replace(/a/g, (window).watch)): let (({ __noSuchMethod__: ({ prototype: __iterator__ }) }\t), ({ prop: __noSuchMethod__, __count__: __parent__ }) = this.__defineGetter__(\"__proto__\", (function  __iterator__ () { yield <x><y/></x> } ).call)) { /*for..in*/Lfor(let prototype in <x><y/></x>) {continue ; } }break; continue ;break; M:do export *; while((new ( \"\" )()) && 0);break; break; if(<x/>) continue L; else  if ( \"\" ) {yield null;let __noSuchMethod__; } }\r");
tryItOut("L: gc()");
tryItOut("if((new (this--).__noSuchMethod__ = (<x/>))) { if (this.__defineGetter__(\"prop\", ((({}).hasOwnProperty).apply).apply)) throw __count__ = __iterator__;} else {throw __iterator__; }");
tryItOut("let(__iterator__) ((function(){this.zzz.zzz;})());");
tryItOut("yield;");
tryItOut("if(prop) { if (prototype) ; else yield @foo;}");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/while(typeof this.__defineSetter__(\"__parent__\", <x><y/></x>)){;; }");
tryItOut("if(null.valueOf(\"number\").hasOwnProperty(\"prop\")) {gc()gc() } else  if (prototype.((yield <x><y/></x>)).__lookupGetter__(\"constructor\")) {throw this; } else {}");
tryItOut("while((let (__count__ = @foo, prototype) undefined) && 0){{(<x><y/></x>); }/*infloop*/for(const __parent__; <x><y/></x>; <x/>) {let __iterator__, prototype = <x/>; } }");
tryItOut("L:with(<employee id=\"1\"><name>Joe</name><age>20</age></employee>){/*infloop*/M:do gc() while( /x/ ); }");
tryItOut("with([15,16,17,18].map((new Function(\"yield <y><z/></y>;\")), @foo)){let ([, , , , ]) { yield <x/>.__defineGetter__(\"prototype\", [1,2,3,4].map); }({ __parent__: __count__ }) = constructor; }");
tryItOut("{let __noSuchMethod__, __parent__ = *;; }");
tryItOut("/*infloop*/L:for((prototype ^ <x><y/></x>++).hasOwnProperty(\"(<x><y/></x>)((Function(__proto__, <><x><y/></x></>)))\") <= constructor.(<bbb xmlns=\"undefined\">\n</bbb>).*; __proto__+=eval(\"let prop = function::__proto__, __iterator__;\", <><x><y/></x></>.@foo); ({__parent__: this})++) /*infloop*/while([,]){export *; }");
tryItOut("function(y) { yield y; break M;; yield y; }");
tryItOut("with({}) { let(__count__, constructor = <x/>) { return <><x><y/></x></>.__defineSetter__(\"__parent__\", (function(y) { yield y; return 1e81;; yield y; }).apply); } ");
tryItOut("/*for..in*/L:for(const [constructor, constructor] = (Function).call(false,  '' ) in window) break ;");
tryItOut("/*infloop*/do prototype while(<><x><y/></x></>);");
tryItOut("if(this.zzz.zzz) {/*infloop*/while(<x><y/></x>){} } else  if (<xxx {__parent__}={ \"\" } />.((new Function).call(<x/>, null))) {/*for..in*/L:for(constructor in constructor) continue L; } else {with({constructor: <><x><y/></x></>}){(new Function(\"export *;\"))let __noSuchMethod__; }var __parent__; }");
tryItOut("/*infloop*/L:while(((({ prop: ({ __parent__: __proto__ }), __iterator__: ({ __noSuchMethod__: constructor }) }) = __proto__ for each (__iterator__ in <y><z/></y>) for each (constructor in <x><y/></x>)).propertyIsEnumerable(\"({ __count__: ({ __proto__: ( \\\"\\\" )(__proto__) }) })\"))){let ([, , __noSuchMethod__, ], __count__) { L:if(constructor.__proto__) __noSuchMethod__ else  if (-[] + <><x><y/></x></> >= window) {return <x/>; } else {continue M;throw window; } }{033 || window; } }");
tryItOut("do /*for..in*/for(var [__noSuchMethod__, __count__] = void undefined in (__proto__(null, <x><y/></\fx>))) {gc() } while((<x><y/></x>.__defineSetter__(\"constructor\",  '' )) && 0);");
