tryItOut("/*infloop*/L:for(prop =  \"\" ; (() != eval(\"prop\", __parent__)); (__parent__ = __proto__) / new Iterator(<y><z/></y>)) {/*infloop*/for(let ({ __iterator__: ({ __proto__: ({ prototype: ({ constructor: ({ __proto__: prototype }), __count__: __noSuchMethod__ }) }) }), prop: __parent__ }) = (); (({__iterator__: (prototype.@foo).__noSuchMethod__ })); ([1,2,3,4].slice)) /*for..in*/M:for(__noSuchMethod__ in ((function (__proto__, __iterator__)this)(<y><z/></y>))){yield;var __proto__ = <y><z/></y>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in (__count__)-=new String(__parent__, window)) {/*for..in*/for(const (__proto__) in <><x><y/></x></>) {const prop, __parent__ = 1e4;yield; }prototype = ({}), constructor; }");
tryItOut("yield (#0=({prop: <x><y/></x>})).__parent__;");
tryItOut("with({({ prop: function::__parent__, __parent__: let }): eval(\"<><ccc:ddd><x><y/></x>yyy</ccc:ddd></>\", null)})with(@foo && (-1))constructor");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop(__iterator__) in window) return;");
tryItOut("/*for..in*/for(var constructor in *.__lookupSetter__(\"__proto__\")) {return; }");
tryItOut("yield prop\n");
tryItOut("*::*\nif([,,z1]) {throw <x><y/></x>;var constructor, __parent__; } else  if (1e-81) {gc() }");
tryItOut("if([15,16,17,18].sort(Math.sin,  /x/ .unwatch(\"__proto__([])\"))) {; } else { }");
tryItOut("if(\n(*--).yoyo(( .__proto__)).propertyIsEnumerable(\"prop\")) {__noSuchMethod__; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("if(*) yield 1e4; else  if (window) {export __noSuchMethod__; } else {{} }");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = (-0) in <x><y/></x>) yield;");
tryItOut("export *;");
tryItOut("L:with(({__parent__: ({__count__: (<x/>.__lookupSetter__(\"prop\")) })}));");
tryItOut("/*infloop*/M:for(const __iterator__ = this; function::__iterator__.__count__ getter= function(y) { yield y; yield;; yield y; }.propertyIsEnumerable(\"constructor\") - (eval)(); prototype.constructor = function  constructor (__iterator__, prototype)__iterator__.unwatch(\"({ __iterator__: __count__, constructor: __iterator__ })\") - 1e81) break ");
tryItOut("/*for..in*/L:for(__proto__ = ({a1:1}) in (gc).call(new (function(y) { yield y; ;; yield y; })(<y><z/></y>, <><x><y/></x></>))) {gc() }");
tryItOut("for(let y in []);");
tryItOut("eval");
tryItOut("/*for..in*/for(\tconst prototype in <x><y/></x>) break M;");
tryItOut("if( /x/ ) { if (*) {export *;let __count__, x::__count__ =  '' ; } else {<x><y/></x>yield @foo; }}");
tryItOut("/*for..in*/for(let __count__ in ((this)(this)))var prop;");
tryItOut("with({}) var __iterator__ =  /x/ ;");
tryItOut("with({}) { yield true; } ");
tryItOut("with({__parent__: [15,16,17,18].map([z1,,], true) >= __count__ = (-1)})var {var constructor = null, prototype = <x><y/></x>; };");
tryItOut("do let __count__ = *::*, __noSuchMethod__; while((<y><z/></y>.hasOwnProperty(\"prop\")[(*::* ? null : undefined)]) && 0);");
tryItOut("throw __proto__;");
tryItOut("L:switch(new (__proto__)()) { default: export *; }");
tryItOut("/*infloop*/for(var __count__; ({constructor: __parent__}); (new (new Function)())) { '' ; }");
tryItOut("let (__iterator__) { switch(<x/> >>= <x><y/></x>) { default: break;  } }");
tryItOut("with(prop = __proto__.__defineGetter__(\"__iterator__\", Function))(undefined); const __iterator__;");
tryItOut("if((RangeError())) {let __noSuchMethod__;\nyield <y><z/></y>;\n } else ;");
tryItOut("M:if(new ( /* Comment */function(id) { return id }.isPrototypeOf([3.141592653589793]))(*::*.__iterator__ = __noSuchMethod__.(<x/>).__proto__ = __count__ = *, <employee id=\"1\"><name>Joe</name><age>20</age></employee> %= __iterator__ = (return))) {} else  if (prototype ? null.throw(3/0) &= let (__proto__ = <y><z/></y>) <x><y/></x> :: ! ''  : constructor = #1#, ([z1,,] & __iterator__)) {/*infloop*/L:for(const __count__; [1]; undefined) /*infloop*/M:for( \"\" ;  /x/g ; window) yield;Math.pow } else L:if(prototype) { if (<y><z/></y>(<><x><y/></x></>, ({a1:1}))) {return;export *; } else return;}");
tryItOut("with(this.__defineGetter__(\"__proto__\", \t({}).hasOwnProperty))");
tryItOut("with((Boolean(('fafafa'.replace(/a/g, (__parent__).__defineSetter__))))){function(q) { return q; }L: {export *;yield true; } }");
tryItOut("/*infloop*/M:while(prototype)yield;");
tryItOut("/*infloop*/while( /* Comment */typeof this.throw(<y><z/></y>).*)yield <x><y/></x>");
tryItOut("with(<><x><y/></x></> <<= __noSuchMethod__){return; }");
tryItOut("this.zzz.zzz;");
tryItOut("{__proto__ = __proto__;{let __proto__ = <><x><y/></x></>;{} } }");
tryItOut("<y><z/></y> ? 1e4 : <y><z/></y>\n");
tryItOut("for(let y in [5,6,7,8]) try { prop = __iterator__; } catch((for(let y in [5,6,7,8]) this.zzz.zzz;.throw(((1 for (x in []))).call)) if (function(){for(let y in []);})()) { with({}) { with({}) {  }  }  } catch(constructor) { let(__iterator__, __iterator__) { throw <><x><y/></x></>; } ");
tryItOut("with(new Function(({ yyy: constructor }) = [15,16,17,18].map(window, <><x><y/></x></>), constructor.__lookupSetter__(\"__proto__\"))){throw [,,z1];return; }");
tryItOut("__noSuchMethod__ = <x><y/></x>, prototype\n\fexport __proto__;");
tryItOut("/*for..in*/for(__parent__ in <x/>) \n");
tryItOut("if(__proto__ = true) { if (((new Function).call([,], @foo))) {break ; } else {let prop, __parent__;yield <x><y/></x>; }}");
tryItOut("/*infloop*/while(this){throw <><x>\t<y/></x></>;var __count__, constructor = <x><y/></x>; } const //h\n__iterator__;");
tryItOut("switch(true) { default: null;break; case 2: function  __proto__ (prop) /x/ break; break; case 1e4: export *;break; case 0: case __noSuchMethod__: break; case this: break; break;  }\nL:if(1e+81) yield; else  if (<y><z/></y>) throw <>__parent__</>; else ;");
tryItOut("return;");
tryItOut(";\nexport *;\n");
tryItOut("L: {const function::prop = <><x><y/></x></>; }");
tryItOut("L:with({prop: function::constructor}){let __parent__, __noSuchMethod__;({}); }\n");
tryItOut("do let __proto__ = ({}), __noSuchMethod__; while((x::__iterator__ , undefined) && 0);");
tryItOut("with({__count__: (null\n).@foo}){export *; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/for(var __parent__ = (__noSuchMethod__ = prop.__lookupSetter__(\"__noSuchMethod__\") < ((-1)[constructor])); x::prototype.__noSuchMethod__ for (__noSuchMethod__ in <x/>); Math.sin(this.__defineSetter__(\"constructor\", function ()((function ([y]) { })());))) {yield prototype; const __noSuchMethod__;yield __proto__.__parent__ = undefined; } const __proto__;");
tryItOut("/*infloop*/do {yield;export *; } while(typeof <x><y/></x>);");
tryItOut("with(((p={}, (p.z = function ([y]) { })())))( null );");
tryItOut("with({prop: <x/>})gc()");
tryItOut("if(false / window) break L; else  if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {__count__;break M; } else /*for..in*/for(setter in ((Function)(constructor))){export *;__iterator__; }");
tryItOut("/*for..in*/for(const prop in (([1,2,3,4].map)((true.watch(\"prop\", function(q) { return q; }))[<x/>.*]))){{} }");
tryItOut("/*infloop*/while((new Function)().valueOf(\"number\")){({}).hasOwnPropertyvar __iterator__; }");
tryItOut("L:if(()) { if ((__noSuchMethod__ = null)) {gc() } else (null);}");
tryItOut("with({prop: __iterator__ = false}){gc() }");
tryItOut("if(<x/>) { if (true) {} else break ;}var constructor\n");
tryItOut("L:if(((this.__defineGetter__(\"__iterator__\", <x>/*\n*/<y/></x>))[\n /x/g ])) export __noSuchMethod__; else  if ((new (new (\t({}).hasOwnProperty)())())) {/*for..in*/for(var constructor in ((Math.pow)(4.)))return 1.3; } else {(this).watchexport constructor; }");
tryItOut("{throw 0.1;continue M; }");
tryItOut("/*infloop*/L:while(<x><y/></x> < undefined)if(__iterator__) {@foo; } else let __parent__ =  \"\" ;");
tryItOut("with({}) { return; } ");
tryItOut("(prototype) = __noSuchMethod__;");
tryItOut("with({}) { export *; } ");
tryItOut("L:if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { if (this :: *.unwatch(\"__noSuchMethod__\")) {export *; }} else {continue ; }");
tryItOut("yield\n");
tryItOut("let(__iterator__, __parent__) ((function(){for(let y in [5,6,7,8]) <x><y/></x>})());");
tryItOut("{/*infloop*/while(<y><z/></y>++){ } }");
tryItOut("var constructor = [,,z1];");
tryItOut("function(y) { yield y; yield *;; yield y; }\n/*for..in*/for(var prototype = <x/> in *::*) break L;");
tryItOut("/*for..in*/for(const prop in ((([15,16,17,18].sort(false, (<><x><y/></x></>.__defineGetter__(\"__parent__\", (new Function(\"{}\"))))) .. let (__proto__) (new Number(3, -0).eval((p={}, (p.z = @foo)())))))(this.__defineGetter__(\"constructor\", ({}).__lookupGetter__))))with({__iterator__: ((__proto__[<x><y/></x>]).@foo)})({}).__lookupGetter__");
tryItOut("L:switch((eval(\"this\", <x><y/></x>))) { default: let (constructor = this, ({ prototype\f: __noSuchMethod__, constructor: prop })) { export *; }while(( /x/g .prototype) && 0){var __noSuchMethod__, prop = @foo;{} } }");
tryItOut("/*infloop*/for(const ({ __parent__: prop }) = new (<y><z/></y> * false)(); prop.__count__; (RegExp(5.0000000000000000000000, <x><y/></x>).unwatch(\"__proto__\"))) {let prop = undefined; }");
tryItOut("/*for..in*/for(var __count__ in <x><y/></x>) /*for..in*/for(__iterator__ in  '' ) {[[1]];; }");
tryItOut("let ([({ prototype: constructor, get: __parent__ }), ({ prop: prop, __iterator__: __count__ }), [, prop, __iterator__], ], __count__) { continue ; }");
tryItOut("{return 1e4;export *; }");
tryItOut("/*for..in*/for(const [prop, __proto__] = __proto__: (<x/>.constructor =  /x/g ) in  \"\" .yoyo(-1)) {;( '' ); }");
tryItOut("L: (true);");
tryItOut("L:if(__iterator__ .@ <><x><\ty/></x></>) var __proto__ = prop, prop;");
tryItOut("with( \"\"  .@*:: false){if(*::*) { if (<x><y/></x>) (new Function(\"export __iterator__;\")) else gc()}{} }\ngc()\n");
tryItOut("if(*.prop = null) { if (<x><y/></x>) {(this); }} else 1e-81;");
tryItOut("if(prototype = window) {yield prototype; } else  if (new Number().eval(function(id) { return id }.__defineGetter__(\"__noSuchMethod__\", (undefined).apply)))  else {throw <x/>; }");
tryItOut("let(constructor = __proto__.__count__ getter= (constructor).__defineSetter__, ({ ({ __iterator__: [__parent__, __proto__, ] }): [__iterator__, prototype, , prop, ] })) ((function(){const ({ constructor: __parent__, __noSuchMethod__: __noSuchMethod__ }) = this .@ this;})());");
tryItOut("let (__proto__, prototype) { yield __iterator__; }");
tryItOut("{}");
tryItOut("/*infloop*/for([]; constructor\f = \rnew [,](); [,,z1] >>> @foo.hasOwnProperty(\"getter\")) throw <x/>;");
tryItOut("L: const __noSuchMethod__ = ;*::*; const function::__count__;");
tryItOut("yield let (__iterator__) 0/0.isPrototypeOf(({__count__: <x><y/></x> }));");
tryItOut("while((@foo) && 0);");
tryItOut("let(constructor = false) { yield function(id) { return id };");
tryItOut("<><x><y/></x></>");
tryItOut("for(let y in [5,6,7,8]) export constructor\nif((this.zzz.zzz for each (__proto__ in false))) { if ((__proto__.__noSuchMethod__).eval(__noSuchMethod__.__parent__ = <x><y/></x>)) export function::(-1);} else (this);");
tryItOut("L:if((({__count__:  /x/ }))) {L:do ; while((window) && 0);export __proto__; } else /a/gi");
tryItOut("export *\n/*infloop*/L:while(prototype: this)export __noSuchMethod__;");
tryItOut("/*for..in*/for(const __iterator__.constructor in this) { }");
tryItOut("{}");
tryItOut(";");
tryItOut("yield (Math.pow(__noSuchMethod__, prototype) in ((function (prop)<x><y/></x>).call([z1], __count__,  /x/g )));");
tryItOut("if(({prototype: prototype, __count__: <x><y/></x> })) var prototype, __iterator__;");
tryItOut("{export __noSuchMethod__;(({a1:1})); }");
tryItOut("if(constructor) {var __proto__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(let [__proto__, __proto__] = <x><y/></x> in <x><y/></x>) export *\n");
tryItOut("L: __noSuchMethod__|= '' ");
tryItOut("__iterator__ = __count__;");
tryItOut("/*infloop*/do {export prop;yield; } while((__iterator__) = ({ __proto__: __count__ }));");
tryItOut("{L:if( /* Comment */*) let 1e-81 = [,,], __parent__; else  if ((({constructor: <><x><y/></x></> })))  }");
tryItOut("function::prototype");
tryItOut("while((__proto__ = true) && 0)(constructor).watch");
tryItOut("let(constructor, __proto__) ((function(){((function  <><x><y/></x></> ()constructor).call).apply})());");
tryItOut("/*infloop*/do /*infloop*/for(constructor = <><x><y/></x></>; ((uneval( /x/g ))); ({constructor getter: 'haha'.split, prototype: this })) if([[1]]) { if (__iterator__ || <y><z/></y>) { } else continue ;} while(window);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in ((1e+81).apply)(this,  '' )) {;(this); }");
tryItOut("switch( | new -0(<y><z/></y>, @foo)) { default:  }");
tryItOut("({ prop: __parent__, prototype: ({ prop: ({ prototype: __iterator__ }) }) })");
tryItOut("let(({ constructor: ({ constructor: ({ __noSuchMethod__: __iterator__, __parent__: __count__ }) }) })) ((function(){return;})());");
tryItOut("/*infloop*/do export *; const __noSuchMethod__; while(((this for (__iterator__ in  /x/g ))));");
tryItOut("/*infloop*/M:\tfor(__proto__;  /x/g ; *) export *;");
tryItOut("L: {let prototype = *::*, constructor = <><x><y/></x></>; }");
tryItOut("with({__iterator__: new ({}).hasOwnProperty()}){{} const __iterator__;continue L; }");
tryItOut("let __count__ = undefined, prototype");
tryItOut("with({}) let([, , ]) { __proto__ = constructor;");
tryItOut("/*for..in*/for(const prototype in ((function(q) { return q; })(eval(\"[];\\n\\n\",  /x/g --)))){\fthrow window;throw <><x><y/></x></>; }");
tryItOut("return  '' ;");
tryItOut("/*infloop*/L:while(window)return [,];");
tryItOut("let (__parent__ = *) { L: return; }");
tryItOut("if(typeof ()) { if () {if( ''  .@x:: 1e-81) export *; } const prop;} else {export *\n<><x><y/></x></>;yield; }");
tryItOut("with(<x><y/></x>.(<x/>)){yield;var constructor = function(id) { return id }, prop; }");
tryItOut("this.zzz.zzz;");
tryItOut("if((<y><z/></y>--) ^  \"\" ) {gc()(.2); } else  if ((*::* :: <><x><y/></x></>)) gc() else {export *; }");
tryItOut("{[1,2,3,4].map }");
tryItOut("let(__proto__ = (uneval([,,z1].propertyIsEnumerable(\"prototype\"))), export eval(\"return;\", #0=*);) ((function(){let(prototype = new Function()) { prop.__parent__ = prototype;})());");
tryItOut("throw StopIteration;");
tryItOut("\n{}\nexport *\nlet prototype = __count__;\n");
tryItOut("/*for..in*/for(let __noSuchMethod__(<x><y/></x>.(<x/>)) in constructor.@foo) let (__parent__ = new (eval)(), __noSuchMethod__ = (new null(<><x><y/></x></>, __noSuchMethod__))) { break L; }");
tryItOut("M:with({__noSuchMethod__: null.eval(undefined)})yield;");
tryItOut("gc()");
tryItOut("/*infloop*/while([z1,,])constructor;");
tryItOut("switch(Date(<x><y/></x>)) { case (new (prototype)()): return *;break; break ;case __parent__ = *: /*infloop*/while(false){let prototype = <x><y/></x>, prop = <><x><y/></x></>; }case 2: export prop; }");
tryItOut("switch(3) { default: yield; }\n");
tryItOut("if((((([1,2,3,4].slice).unwatch(\"__iterator__\")) ^= ((p={}, (p.z = null)())))())) { if ((__parent__ ? this : [1,,].__defineGetter__(\"__count__\", <zzz>undefined</zzz>))) {var __parent__, prop = 1e4; }} else \nif(<>*</> ==  { throw  /x/g ; } ) { if (this.__defineGetter__(\"constructor\", Math.pow) = arguments\n) {let constructor = <x><y/></x>, __count__ = __count__, __proto__ = <><x><y/></x></>; }} else {/*infloop*/M:for(let prop; <><x><y/></x></>;  /x/ ) {__parent__ = *::*, constructor;throw  '' ; }continue ; }");
tryItOut("L: /*infloop*//*\n*/while((new (true)( \"\" )))throw <x><y/></x>;");
tryItOut("/*infloop*/for(__parent__ = eval(\"1.3\", (function ([y]) { })()).yoyo(window); <><bbb xmlns:ccc=\"(#1=[({}).__lookupGetter__()])\"><ccc:eee></ccc:eee></bbb></>; 1e81) if( \"\" ) {return;; }");
tryItOut("{yield __parent__; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:do { } while( /x/  -  \"\" .unwatch(\"__proto__\"));");
tryItOut("/*for..in*/for(let __iterator__ = new <x><y/></x>.eval(0)(+<x><y/></x>, this) in __parent__) {prop }\nexport *;\n/*infloop*/for(let (__noSuchMethod__) = undefined *= [,,] .@*:: <><x><y/></x></>; this.unwatch(\"prototype\") <<= __noSuchMethod__ =  \"\" \n; [15,16,17,18].some( /x/ , <><x><y/></x></>)) {L: break ; }\n");
tryItOut("return (constructor = <x><y/></x>).@foo;");
tryItOut("/*for..in*/for([each, __parent__] = __iterator__.__count__ = <x/>.valueOf(\"number\") in * >>= this.eval( /* Comment */<x/> ? <x><y/></x> :  '' )) /*infloop*/for(const prop; prototype; <y><z/></y>) {break ; }");
tryItOut("L: {continue ; } const let;");
tryItOut("{M:if((prototype = return; 3)) do {export *;export *; } while((*::*) && 0); else  if (<><x><y/></x>\t</>|=(window)(1.2e3, 1.2e3)) do {const __iterator__; } while((constructor.((new (<x>\f<y/></x>)(<y><z/></y>\t)))) && 0); }");
tryItOut("M:if(<><ccc:ddd>yyy</ccc:ddd></><!--yy-->) const __iterator__, constructor = [1]\n; else  if (<x><y/></x>) { } else {continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <x><y/></x>) {<x/>; }");
tryItOut("/*for..in*/for(const constructor = false in (((1 for (x in [])))(\fthis.__defineSetter__(\"__count__\", eval)))){/*for..in*/for(var __noSuchMethod__ = __iterator__ in this) { }var __count__ }");
tryItOut("L:with({__proto__: [<x><y/></x>.(//h\n '' ) if (<y><z/></y>)] << ((<x/> for (prop in <x><y/></x>)))})return undefined;M:if(false && undefined) {return; } else export *;");
tryItOut("let(function::__iterator__) { throw prop;");
tryItOut("return Error(<y><z/></y>);\nvar __iterator__;\n");
tryItOut("if(<><x><y/></x></>) {; } else  if (this) gc()");
tryItOut("constructor\n");
tryItOut("with(<><x><y/></x></>){yield;function  <x><y/></x> (prop) ''  }");
tryItOut("/*for..in*/for(var __count__ in ((5.0000000000000000000000)(<x><y/></x>))){yield; }");
tryItOut("/*for..in*/L:for(let constructor = this.__defineGetter__(\"prop\", Math.pow) in <><x><y/></x></>) {({a1:1});<><x><y/></x>\f</>; }");
tryItOut("/*infloop*/while([ /x/  instanceof  /x/g ].some(({}).hasOwnProperty)){/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in <x/>) <!--yy-->yield; }\n{<><x><y/></x></>; }\t\n");
tryItOut("let(__noSuchMethod__, constructor = null) { let(constructor) ((function(){})());");
tryItOut("/*for..in*/for(var prototype in function::prototype.(new  /x/ )) {yield 1e81; }");
tryItOut("/*for..in*/for(let constructor = __proto__ in <><x><y/></x></>) var prototype = <x><y/></x>;");
tryItOut("if(constructor =  /x/g  >>> * ? prop = *::* : (this.zzz.zzz)) { if ((function::prop = <x><y/></x>.__defineSetter__(\"constructor\", function(y) { yield y; while(( /* Comment */<><x><y/></x></>) && 0){throw @foo;yield [z1,,]; }; yield y; }))) yield;\nexport *;\n else {export constructor;if(let) { if (<y><z/></y>) {eval }} else {export __noSuchMethod__;(<><x><y/></x></\f>); } }}");
tryItOut("return");
tryItOut("if(({ __iterator__: __iterator__ }) = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.throw(function (__count__) { return  /x/g  } ().hasOwnProperty(\"__iterator__\"))) {let export __iterator__;;/*for..in*/for(var [prop, __noSuchMethod__] = (this) in <x><y/></x>) {return; } } else  if (prop.__lookupGetter__(\"__parent__\")) {export *;var __iterator__ = export prop;, __noSuchMethod__ = *; } else {yield <x/>; }");
tryItOut("{yield  /x/ ; }");
tryItOut("/*infloop*/for(let __count__ = (({prototype: ( ''  & true if (arguments)),  get this.zzz.zzz;() { yield void <x/>.prototype = [15,16,17,18].sort(({}).hasOwnProperty, this) }  })); (({__proto__: <x><y/></x> for (__parent__ in <x/>)})); constructor.prop = <x><y/></x>.yoyo( /x/ )) ;");
tryItOut("/*infloop*/M:for(var __count__; <y><z/></y> if ( \"\" ); ((true.unwatch(\"__noSuchMethod__\")) += #3={a:#3#})) {-1;(__noSuchMethod__); }");
tryItOut("/*for..in*/L:for(const __parent__.__iterator__ in ((window .. constructor)(({ prop: __parent__, __parent__: __count__ }) = (export *;  << 0/0)))){M:if(true) throw @foo; else  if (@foo) export *; else {<x><y/></x> }{} }");
tryItOut("with({}) throw StopIteration; const (uneval(prototype = void  /x/g )).valueOf(\"number\");");
tryItOut("/*for..in*/M:for(const prototype in (new (function(id) { return id })(<><x><y/></x></>, null)) = 3/0.isPrototypeOf( /x/ )) {\fexport *; }");
tryItOut("L:if(__noSuchMethod__.__iterator__ = <x><y/></x>) ");
tryItOut("if(function (__noSuchMethod__) {  /x/g ; } ()) return <y><z/></y>; else {let __iterator__ = -0;let __parent__, prototype = @foo; }");
tryItOut("/*for..in*/for(let constructor = ({ __noSuchMethod__: __proto__, constructor: prototype }) = Iterator() in <x><y/></x> + -3/0.valueOf(\"number\")) {try { return; } catch(__count__ if (function(){export *;})()) { __proto__; } finally { return; }  }");
tryItOut("L: const get = 1.3, __noSuchMethod__ =  \"\" ;");
tryItOut("{let constructor = this;return <x/>; }");
tryItOut("with(({constructor: __proto__ = @foo })){if(<><x><y/></x></>) { if (<x><y/></x>) return <><x><y/></x></>; else {break ; }}L:if(((<y><z/></y>).watch)(<x><y/></x>)) {({}).__lookupGetter__ } else {const __parent__;this; } }");
tryItOut("if((new (<x/>)(<><x><y/></x></>).prop)) (*::*);");
tryItOut("/*for..in*/for(var __parent__ in (((<x><y/></x>).__defineSetter__/*\n*/)(<x><y/></x>)))const __noSuchMethod__, __parent__");
tryItOut("gc() const constructor;");
tryItOut("/*infloop*/M:for(yield  /x/ ; .2.prototype; (new ((prop = constructor))())) {with({})  }");
tryItOut("L: {/*for..in*/for(const [__parent__, set] = window in (-1)) {<x><y/></x>; }const prop = .2, prop =  /x/ ; }");
tryItOut("if(__iterator__.[1]) { if (new (((<><x><y/></x></>)[*::*]))(<x><y/></x>.__defineGetter__(\"constructor\", [1,2,3,4].map), new *::* .@*:: <y><z/></y>())) {var __parent__, __parent__ = this\n/*for..in*/M:for(const __iterator__ in ((Math.pow)(__count__)))yield  '' ;yield; }} else if({}) {; } else ");
tryItOut("if([1,,]) { if (prop = <x><y/></x>.constructor) {export <y><z/></y>; }} else let __noSuchMethod__ =  /x/ , prototype = ({a1:1});");
tryItOut("if((* / 0)) __parent__.__proto__");
tryItOut("/*infloop*/do /*infloop*/while(true.__proto__ >> ({__parent__: window})){ } while(__noSuchMethod__);");
tryItOut("/*infloop*/L:for(([(function ([y]) { })() <=  /x/g ].some(__parent__));  /x/g \n; prop = null) { }");
tryItOut("/*infloop*/L:do if(<><x><y/></x></>) { if (*) return false; else {return;{}; }} while((({ __noSuchMethod__: __noSuchMethod__, __proto__: prop }) = (([1,2,3,4].map).call(false, null, (-0)))));");
tryItOut("L:while((*::*) && 0)return;");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in *::*) (window);");
tryItOut("if(true) { if (<x/>) {(<x/>).watch }} else continue M;");
