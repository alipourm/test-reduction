tryItOut("/*for..in*/for(let __noSuchMethod__ in ((#2=[ '' .__defineGetter__(\"__count__\", Function).watch(\"__noSuchMethod__\", new Function)])( let )))true;");
tryItOut("/*infloop*/L:for(let __iterator__; yield new Date()[4.]; ((({}).hasOwnProperty).call(0.1,  '' , window)['__iterator__'] = (__noSuchMethod__)(<x><y/></x>, this))) yield;");
tryItOut("L: yield;");
tryItOut("L: __noSuchMethod__, prototype;");
tryItOut("/*infloop*/while((* & @foo))\t{yield;return *; }");
tryItOut("{<><x><y/></x></>; }");
tryItOut("gc()\nbreak ;\n");
tryItOut("M:while((__proto__ = __noSuchMethod__.__count__ = window.__lookupSetter__(\"constructor\")) && 0){yield;if((1 for (x in [])).isPrototypeOf(<x/>).prototype) M:do (__iterator__).apply while((__noSuchMethod__) && 0); else  if (this.__defineGetter__(\"constructor\", (function  __iterator__ () { yield 1e+81 } ).watch)) const prop; else {return this; } }");
tryItOut("if(__parent__ = __parent__) {let (constructor) { gc() }continue M; }");
tryItOut("prop");
tryItOut("var x::get = #3={a:#3#};");
tryItOut("export *; const prop;");
tryItOut("{}\n;");
tryItOut("with({prototype: <x><y/></x>})gc()");
tryItOut("throw  /* Comment */ /x/  ^= true;");
tryItOut("with({prop: (({ __proto__: constructor }) = 5.0000000000000000000000 % *.unwatch(\"__noSuchMethod__\"))})export prototype\n");
tryItOut("do {{gc() } } while((yield <y><z/></y>.watch(\"__parent__\", <x><y/></x>).@*) && 0);");
tryItOut("(true);");
tryItOut("/*for..in*/for(const true().constructor in (<x><y/></x> *= <y><z/></y>)) {/*infloop*/default: case ({a1:1}): break; for(prop; this; prototype) {(<x><y/></x>); }export __noSuchMethod__; }");
tryItOut("/*infloop*/for(const prototype = [1,2,3,4].slice(true).watch(\"__noSuchMethod__\", new Function); ({}).hasOwnProperty; #0=({constructor: *::*})[function(id) { return id }.prototype = {}]) if(true) { if (let (prototype)  /x/ ) {export *;<><x><y/></x></>; } else const __iterator__, __iterator__ =  /x/g ;}");
tryItOut("throw <x><y/></x>;");
tryItOut("with({prototype: (eval(\"(window).watch\", (({__proto__: 0x99,  set prototype __proto__ (prop, __count__) { var __noSuchMethod__ = *::*, __count__ = window; }  }))))})break L;");
tryItOut("[1,2,3,4].slice");
tryItOut("/*for..in*/for(const [setter, constructor] = new (*::*\n)\n((({ set __proto__ __proto__ (constructor, prop)null, prop setter: /a/gi })).valueOf(\"number\")) in ({ prop: __iterator__ }) = (eval(\"const prototype, x::prototype =  \\\"\\\" ;\", <><x><y/></x></>)).unwatch(\"__count__\").throw(~<y><z/></y>)) {try { constructor =  /x/ ; } catch(__noSuchMethod__ if (function(){yield;})()) { (prop); } catch(__count__) { __iterator__ }  }");
tryItOut("if(({__noSuchMethod__: (__iterator__.prototype getter= /a/gi), prototype setter: function(y) { yield y; ; yield y; } })) { if (( \"\"  <<= __count__(.2--,  '' ))) (<y><z/></y>).watch else yield;}");
tryItOut("/*infloop*/M:for(!<x><y/></x>; (<><x><y/></x></> ? <x\f><y/></x> : <x/>); __parent__.__noSuchMethod__) (false).__defineSetter__");
tryItOut("return\n");
tryItOut("/*for..in*/L:for(let __iterator__.prop in ((function () { gc() } )(3.141592653589793.watch(\"constructor\", /a/gi)))){export __count__;const __count__; }");
tryItOut("/*infloop*/do {/*infloop*/for(({ __noSuchMethod__: prototype }) = ({constructor: <y><z/></y>}); prototype =  /x/ ; [prototype for each (__noSuchMethod__ in @foo)]) *;var __proto__ = {}, __parent__; }\r while(({constructor: 3 ?  /x/g  : prototype, __iterator__: 1e81 >>= null }));");
tryItOut("yield  '' \n/*infloop*/for(this; <x/>; null) {}");
tryItOut("{}\nbreak L;");
tryItOut("{({}).__lookupGetter__if((new ((function(id) { return id }[<x><y/></x>]))())) {( { yield undefined } -=<x><y/></x>) } }");
tryItOut("with({({ __noSuchMethod__: [({ __iterator__: ({a2:z2}) ^= eval(\"<x><y/></x>\", ({a1:1})), constructor: __proto__ })], delete: {/*for..in*/for(let __iterator__ in (('haha'.split)( /* Comment */ /x/  ? [1] : 5.0000000000000000000000))){__count__ = <x><y/></x>, __proto__; } } }): [] = __count__.throw(<x/>)})throw null\n");
tryItOut("do {throw <y><z/></y>; } while((this) && 0);");
tryItOut("if(new Date([z1], null)) {} else {@foo;continue ; }");
tryItOut("if(([z1] ^ window[\n<x/>] >> ++\t<y><z/></y>.__defineGetter__(\"prop\", *))) { if ((1e+81.__defineGetter__(\"__count__\", (5.0000000000000000000000).call))) function(y) { yield y; (<><x><y/></x></>);; yield y; } else with({constructor: <x><y/></x>})eval}");
tryItOut("{export prop; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; new Error()\t.*; (p={}, (p.z = <x><y/></x>)())) {yield  /x/ ;const __proto__, __noSuchMethod__; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("prototype;\nprototype;\n");
tryItOut("switch([].__lookupGetter__(\"__iterator__\")) { case (__noSuchMethod__ != window): break; default: break; case 5: break; case 5: gc()break; case <x>\f<y/></x>: export *;break; case __count__ = *::*: if(<><x><y/></x></>) {__iterator__;; } else  if (*::*) {var x::__proto__ = *::*, __proto__;export __proto__; } else (<x><y/></\tx>); }");
tryItOut("L:if('fafafa'.replace(/a/g,  '' )) throw  /x/g ;");
tryItOut("L:if([prototype.__lookupGetter__(\"__count__\") for (__proto__ in 3.141592653589793)]) { if ([@foo for (__parent__ in 3)]) {yield; } else if(undefined;)  else  if (prototype = @foo) undefined; else {{}@foo; }}");
tryItOut("\nreturn;\n\n");
tryItOut(";");
tryItOut("switch(<x/>) { default: let __proto__ = this; }");
tryItOut("with({__count__: <x><y/></x>}){var __iterator__; }");
tryItOut("return [[1]];\nexport *;\n");
tryItOut("M:switch(({__noSuchMethod__: ((<x/>).call((this.propertyIsEnumerable(\"constructor\")), )), __proto__ getter: 'haha'.split })) { default: L:with(prop.(({}))){if(<x><y/></x>) {} else  if (<x/>) throw [z1,,]; }case 9: break;  }");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = (<y><z/></y>.__lookupGetter__(\"__noSuchMethod__\")) in null) gc()");
tryItOut("/*infloop*/for(let __noSuchMethod__ = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; __noSuchMethod__.__count__.__lookupSetter__(\"__proto__\"); @foo < [,,]) \t{}\nif(<x><y/></x>) { if ( \"\" ) {gc()var prop = <x/>, __noSuchMethod__ =  export ; }} else \n");
tryItOut("L:switch(<y><z/></y>) { case 0: break; export *;gc() }");
tryItOut("/*for..in*/for(var function::__proto__ = (<x><y/></x>.__defineSetter__(\"__proto__\", function(q) { return q; })) in <y><z/></y>) yield; }");
tryItOut("if(__iterator__ = <x><y/></x>[ /x/ .yoyo(\f[,,])].prototype = ) {break L;return; } else  if (__proto__.__noSuchMethod__ getter= function(y) { yield y; if(@foo\n) { if ( \"\" .__defineSetter__(\"__noSuchMethod__\", (<><x><y/></x></>).__defineSetter__)) gc() else ((this.__defineSetter__(\"prop\", function(y) { yield y; prop;; yield y; })).@*)}; yield y; }) {/*infloop*/while(__noSuchMethod__ .@ @){continue ; } }");
tryItOut("M:while((1.3) && 0)function(y) { yield y; ( '' );; yield y; }\n{( /x/ );eval }");
tryItOut("break ;\nyield;\n");
tryItOut("throw StopIteration;");
tryItOut("with([z1,,]){try { this; } ) {  }  constructor finally { return; }  }");
tryItOut("/*infloop*/for(({ __count__: __count__, prop: __parent__ }), ({ __proto__: ({ prop: ({ prototype: [({ __iterator__: ({ __noSuchMethod__: constructor, prop: prop }), __iterator__: [] }), ({ prototype: ({ ;: __iterator__, __noSuchMethod__: prop }), __parent__: ({ __count__: constructor, __iterator__: __parent__ }) }), , [\f], ({ prototype: ({ __proto__: prototype }) })], prototype: ({ prototype: ({ prop: ({ prototype: __parent__, prototype: constructor }), __proto__: [prop, __proto__, ] }), prototype: ({ __iterator__: ({ __iterator__: __parent__ }) }) }) }), [z1]: ({ prop: ({ __proto__: [, prototype, __count__, constructor] }), __proto__: __proto__ }) }), __count__: [] }); (constructor.__proto__); <><x/></>.(<><x><y/></x></> !== <y><z/></y>)) ");
tryItOut("{}");
tryItOut("if(<><x><y/></x></>) __parent__ = []; else  if ( /x/g ) {const __iterator__ = <y><z/></y>; } else {export *; }\ngc()\n");
tryItOut("__parent__");
tryItOut("");
tryItOut("L: {return;throw <y><z/></y>; }\n");
tryItOut("{; }");
tryItOut("M:if(<x><y/></x> << window) {yield  /x/g ;throw []; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor.__parent__ in return (prop = window);) let ([]) { /*infloop*/do __proto__; while(<><x><y/><///h\nx></> ,  /x/g ); }");
tryItOut("{/*infloop*/for(<y><z/></y>; <><x><y/></x></>; <y><z/></y>) __proto__; }");
tryItOut("/*infloop*/for(let (__parent__ = <><x><y/></x></>) prototype; (new (null)(yield <x><y/></x>, __iterator__)).throw([, , prototype] = prop); __proto__.(<x/>)) ");
tryItOut("return prop;");
tryItOut("L:if(this.__defineSetter__(\"__proto__\", ((Function).call).call) ? (*::*.watch(\"__parent__\", function(q) { return q; })) : *::* /= <><x><y/></x></>\r) { if (@foo) ; else {var __proto__ = <><x><y/></x></>, __iterator__; }}");
tryItOut("yield\n");
tryItOut("/*infloop*/for(({ __proto__: __iterator__, x::prop: __parent__ }) = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((gc())) for (__count__ in constructor) for (__noSuchMethod__ in  '' ) for (__iterator__ in <><x><y/></x></>); ((({} in <><x><y/></x></>) * - /x/g ).__lookupSetter__(\"({ __noSuchMethod__: ({ __iterator__: <!--yy--> }) })\")); (constructor.constructor)) /*infloop*/do {return;const __noSuchMethod__; } while(__iterator__);");
tryItOut("{(this); }");
tryItOut("M:while(() && 0){(0/0);throw false; }");
tryItOut("");
tryItOut("if(prototype.prop = null .. false++\f) { if ((new ((eval).call)(<><x><y/></x></>, window))) {const __proto__ =  /x/ ; } else let __parent__;}");
tryItOut("do {export prototype;yield function::__parent__; } while((@foo) && 0);");
tryItOut("/*for..in*/M:for(let [[1]]\f.prototype in  '' ) (<y><z/></y>);");
tryItOut("with({}) {}");
tryItOut("for(let y in [5,6,7,8]) return new (constructor = <x><y/></x> === <x><\ty/></x>) >> (([<x><y/></x> if (this)])((<x><y/></x>++)));");
tryItOut("gc() const function::__iterator__;");
tryItOut("/*infloop*/do {{}; } while(true);");
tryItOut("switch(this) { default: gc() }");
tryItOut("{yield; }");
tryItOut("/*for..in*/for(var __count__ in false) {const __parent__ = ({}), prototype;(<><x><y/></x></>); }");
tryItOut("for(let y in [5,6,7,8]) yield __noSuchMethod__ = <x\r><y/></x> in typeof window;");
tryItOut("with(0){{}let prop, __proto__; }");
tryItOut("M:if(*) {} else  if (<x><y/></x>.*) ");
tryItOut("/*infloop*/while(eval(\"<x><y/></x>.yoyo(undefined)\", *))prop = <x><y/></x>;");
tryItOut("/*for..in*/for(const __iterator__ in 0x99) {let (__parent__) {  }yield; }");
tryItOut("L:if() L:if((__count__.prop = 1.2e3)) {return;<x><y/></x>; } else  if () {constructor; } else {return;return <><x><y/></x></>; } else  if (\f<>(-1).isPrototypeOf(<><x><y/></x></>)</>.(__proto__ = 3/0)) /*infloop*/while((0/0.throw(null)))\n; ;\t");
tryItOut("/*for..in*/L:for([__count__, constructor] = (<><x><y/></x></>.__lookupSetter__(\"prop\")) in undefined) /*for..in*/for(const constructor in window) return;");
tryItOut("L:if(({__noSuchMethod__: 3/0, prop setter: 0x99 })) { if ( /x/g ) var prop =  '' , __iterator__ = undefined;\nyield [1,,];\n} else {export *;prop = <x><y/></x>, prototype = <y><z/></y>; }");
tryItOut("continue L;");
tryItOut("/*for..in*/for(let [, , prop, __proto__, ] in ((function (({ constructor: [[, , , __noSuchMethod__], prop, ], __iterator__: __count__ })) { yield __parent__ = <y><z/></y> } )(<><x><y/></x></> ? <x><y/></x> : [1,,])))yield;");
tryItOut("if((__count__.__defineGetter__(\"__parent__\", (1 for (x in []))))) ;");
tryItOut("switch(1e4)case 9: break;  }");
tryItOut("M:with( /* Comment */Function())yield;");
tryItOut("/*infloop*/for(<x/>.propertyIsEnumerable(\"__parent__\"); (__iterator__.constructor getter= new Function);  '' ) {return;/*infloop*/while(3)\fexport *; }");
tryItOut("/*for..in*/for(prototype = __count__.__lookupGetter__(\"prop\") in function(id) { return id }) {gc()__proto__ = true, prop; }");
tryItOut("/*infloop*/while(({__iterator__: #3={a:#3#}}) in <y><z/></y>.eval(-3/0)(this.__defineSetter__(\"__proto__\", [1,2,3,4].slice)))with({__parent__: <><x><y/></x></>})prop\n");
tryItOut("L: if(delete [,,z1]) {return; } else return false;");
tryItOut("while((window) && 0){yield @foo; }");
tryItOut("return;");
tryItOut("if(yield __noSuchMethod__.__parent__) return; else  if (<x/>[ /x/g ]\r) yield;");
tryItOut("/*for..in*/for(let prop in ((Math.pow)([] >>> *::*)))export __noSuchMethod__;__proto__");
tryItOut("let (prop, __noSuchMethod__) { __proto__ }");
tryItOut("{/*infloop*/for(const prototype; (({ __proto__: ({ prop: prop, prop: ({ __noSuchMethod__: __parent__, function::__parent__: __parent__ }) }), __parent__: ({ __iterator__: ({ constructor: constructor, constructor: prototype }), __noSuchMethod__: ({ __parent__: ({ prototype: this }) }) }) }) = constructor = <y><z/></y> :: @foo >= 0/0); <><x><y/></x></> |= undefined + ({ prop: prototype, __count__: __count__ }) = ({ __proto__: __count__, __parent__: __count__ })) {yield; } }");
tryItOut("do {(true);constructor; } while((true) && 0);");
tryItOut("export __count__;gc()\n");
tryItOut("export *");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in (<y><z/></y> ? <x><y/></x> :  /x/ )) {/*infloop*/\twhile([z1])gc()if(#3={a:#3#}) {yield; } else  if (null) export constructor; else gc() }");
tryItOut("return (window)()[\nwindow];");
tryItOut("L:while((false) && 0){return <x><y/></x>;return; }\n const __iterator__;");
tryItOut("yield; const __proto__;");
tryItOut("with({}) throw <y><z/></y>;");
tryItOut("yield *; const __noSuchMethod__;");
tryItOut("prototype");
tryItOut("__parent__ = __parent__;");
tryItOut("const prop, __count__ = @foo;");
tryItOut("switch((({ __proto__: ({ prototype: [] }), prop: [] }) = [,])) { case ( /* Comment */<x/>\n): case (__proto__.__proto__ = [[], [], , [, __noSuchMethod__, , __noSuchMethod__]]): break;  }");
tryItOut("/*for..in*/for(let __iterator__ in (prototype = __proto__)) { /x/g  }");
tryItOut("{throw window; }");
tryItOut("/*infloop*/for(const ({ __iterator__: ({ __iterator__: ({ constructor: __count__, __count__: constructor }), __iterator__: ({ *: __proto__, constructor: <x><y/></x> }) }), : ({ __count__: ({ prototype: prop }) }) }) = [15,16,17,18].sort(.2,  ''  .. <x><y/></x>); this.__defineSetter__(\"function::__count__\", function () { return  ''  } ); function::__count__ >= __parent__) {export __iterator__;const __noSuchMethod__; }");
tryItOut("if((new Function(\"__proto__\"))) { if (String(__noSuchMethod__.( '' )--, __noSuchMethod__ = <y><z/></y>)) <y><z/></y> const constructor;} else yield;const prototype = @foo;");
tryItOut("while((new new Function('fafafa'.replace(/a/g, \tfunction  __iterator__ (__noSuchMethod__) { yield <x><y/></x> , true } ), <>prop</>)) && 0){with(<><x><y/></x></>)prototype; }");
tryItOut("if(prototype.prototype = ({}.watch(\"__count__\", ({}).__lookupGetter__)).isPrototypeOf(( \"\"  >> @foo))) {if(this << <x/>) {yield;throw __iterator__; } }");
tryItOut("if(1e4 >>>=<><x><y/></x></>) const __noSuchMethod__ = <><x><y/></x></>, __count__; else export __noSuchMethod__;/*for..in*/for(let constructor in __noSuchMethod__) __iterator__ = constructor;");
tryItOut("if((<><x><y/></x></>++) - this.__defineSetter__(\"prototype\", (({}).__lookupGetter__).apply)) return undefined; else  if (<> </>) var prototype;");
tryItOut("if(__iterator__) { if (__iterator__ = <x/>) /*for..in*/for(const __parent__ = arguments in <><x><y/></x></>) {yield; } else {([,,z1]); }}");
tryItOut("return\n");
tryItOut("/*infloop*/do {throw __noSuchMethod__;return; } while(<><x><y/></x></>)\n");
tryItOut("switch((//h\n[#1# for each (constructor in undefined)/])) { case  /x/ .__count__ = __count__ >>>=@foo.valueOf(\"number\"): {const __noSuchMethod__ = prop, prop = (-1);export *; }case 2: break; if( \"\" ) gc() else  if ( /x/ ) {{} }break; default: break;  }");
tryItOut(";");
tryItOut("this;/*\n*/ const __noSuchMethod__;");
tryItOut("/*for..in*/for([__noSuchMethod__, __count__] = <><x><y/></x></>.__parent__ in *) {yield window; }\nthis.zzz.zzz;\n");
tryItOut("/*infloop*/for(let __count__; [[]]; <y><z/></y>.__lookupSetter__(\"__parent__\")) \f{let prop = <><x><y/></x></>, prototype; }prop = [ \"\" ].filter((new Function(\"(3/0);\"))) + (prop.__noSuchMethod__ = 3.141592653589793);");
tryItOut("M:if([+<x/>].sort(window)) { if (<x/>) var __proto__ = <><x><y/></x></>; else yield <x><y/>\f</x>;}");
tryItOut("/*for..in*/for(let __iterator__ in  \"\" ) export __proto__;");
tryItOut("yield new  '' (constructor, <><x><y/></x></>);");
tryItOut("if(*::*) M:switch( \"\" ) { default: ({ __noSuchMethod__: __count__ })break;  }");
tryItOut("with(<y><z/></y>)return;");
tryItOut("if(<xxx>{__noSuchMethod__}</xxx>.((null--) ? __count__ = <y><z/></y> ^= this\n : ((window)))) {/*infloop*/M:for//h\n((-3/0 << <x/>).unwatch(\"__iterator__\"); __count__.(<x/>)<><x><y/></x></> ; new (__iterator__ = 1.2e3)(<x><y/></x>, .2).valueOf(\"number\")) with({prototype: <x><y/></x>})(window); }");
tryItOut("with(\t{(constructor): *::*})if((prop = __iterator__ == <><x><y/></x></>)) {return <x><y/></x>; } else  if ((-1.prototype = <x/> << __noSuchMethod__ = *::*) ? (<x><y/></x>.__defineSetter__(\"prop\", eval) .. eval(\"yield this;\", false)) : (<><x><y/></x></> ^ <x><y/></x>) *= RangeError(<y><z/></y>)) with({}) ; else {gc()if((033 &= <x/>)) 5.0000000000000000000000 }");
tryItOut("try { return window; } catch(function::__noSuchMethod__) { throw undefined; } finally { <><x><y/></x></> } ");
tryItOut("/*infloop*/do yield undefined; while(*)\n");
tryItOut("/*infloop*/for(let __iterator__ = (@foo .@*:: @foo); #0=({__noSuchMethod__: true}); (<><x><y/></x></> == false)) ");
tryItOut("with({}) with({}) { if(this) {return <y><z/></y>;gc() } else  if (<x><y/></x>) {<x><y/></x> } } ");
tryItOut("/*infloop*/L:for(var __noSuchMethod__ = (.@*); <y><z/></y> == Array( \"\" ); window < (__count__) !== <bbb xmlns=\"({ __parent__: function::constructor, __parent__: __proto__ })\"></bbb>) {/*for..in*//* nogeckoex bug 349964 */\fL: for  each(const false['__parent__'] in [,,]) {/*for..in*/L:for(var __parent__ = (-0) in __proto__) {__noSuchMethod__; } }return; }");
tryItOut("if((function  __noSuchMethod__ ()(null.prototype = undefined))([__proto__, , , ] = ((constructor)[[]]).yoyo(__iterator__ = <x><y/></x> ? (constructor.__iterator__ /= ([[1]] << window)) : this.zzz.zzz %= this))) do throw 0x99; while((__count__ = 1.2e3) && 0);");
tryItOut("if(new ({}).hasOwnProperty([1].throw(<><x><y/></x></>), [])) let __noSuchMethod__ = [,,];");
tryItOut("do {__noSuchMethod__ = const __iterator__ = <y><z/></y>, __count__;, prop; } while((null.throw(*)) && 0);");
tryItOut("/*infloop*/for(constructor; (__parent__ = undefined.__iterator__ & this.__defineSetter__(\"prop\", eval).hasOwnProperty(\"__proto__\").unwatch(\"__proto__\")); (throw  \"\" ).prototype < (__iterator__.__noSuchMethod__ = *::*).yoyo(( \"\" ).(__parent__ = <x><y/></x>))) {((__iterator__ >> [z1]));/*infloop*/L:do /*for..in*/(var prop = <x><y/></x> in 5.0000000000000000000000)  while({} /=  '' ); }");
tryItOut("with({__parent__: (this.__defineGetter__(\"prop\", function (__proto__) { return this } )) >>= .2(*)}){yield; }");
tryItOut("if( /* Comment */<x/>) export prototype; else  if (Object(1.3)) (__count__); else {null } const false.x::constructor;");
tryItOut("M:if((1e4.constructor)) {const __parent__;prototype, __proto__; }");
tryItOut("/*infloop*/do {/*infloop*/for(constructor; #1=[#1#]; 0.1)  } while( /* Comment */<><x><y/></x></> ? null : undefined);");
tryItOut("throw this;");
tryItOut("");
tryItOut("L:with((( /x/g )()))if(null) ; else yield;");
tryItOut("L:if(this.__defineSetter__(\"__proto__\", (<><x><y/></x></>).watch)) { if (__parent__ = <x><y/></x>) yield; else {export *; }}");
tryItOut("throw __parent__;return; const __parent__;");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("__proto__ = __count__;");
tryItOut("/*for..in*/for(constructor = constructor = prototype in window) {continue ;throw <><x><y/></x></>; }");
tryItOut("switch('fafafa'.replace(/a/g, *::*)) { case ({ prototype: function::__noSuchMethod__, __proto__: constructor }) = ([<x><y/></x>].filter(function(y) { yield y; export *;; yield y; })): break; {(<x><y/></x>);export *; } }");
tryItOut("if(new ([1,2,3,4].map)(<><bbb xmlns=\"each = window\"></bbb></>, constructor['__iterator__'] = (__proto__ = [,,].isPrototypeOf(false)))) /*for..in*/for(constructor.prop in (this)) {return; } else  if (<y><z/></y>.__defineSetter__(\"__parent__\", 'haha'.split) .. __proto__ getter: (prototype.__lookupSetter__(\"delete\"))[(prop).watch(\"constructor\", eval)]) {true; const __proto__; }");
tryItOut("{L:do continue\f M; while((__noSuchMethod__.prototype = -1) && 0); }");
tryItOut("{}\n");
tryItOut("switch(@foo .@*:: constructor) { default: break;  }");
tryItOut("{/*for..in*/for(prop in (((gc).apply)(<x/>\n))){__noSuchMethod__, function::__parent__; } }");
tryItOut("with({prototype: new new Function(Exception(-0, <x><y/></x>))}){return;\n{}\n }");
tryItOut("if(*) { if ((yield <><x><y/></x></>.__lookupGetter__(\"__count__\"))) if(*::*) yield; else {; } else gc()}");
tryItOut("function(q) { return q; }");
tryItOut("let (({  /x/ : ({ __iterator__: ({ __count__: __count__ }) }) }) = constructor = undefined | true) { M:if(#2=({prop:  /x/ })) {; } else  if (__parent__.__parent__ =  /x/ ) {function (constructor, __count__) { return <><x><y/></x></> }  } else {var constructor = *::*, __iterator__; } }\f");
tryItOut("/*infloop*/M:for(const constructor; (__proto__.__count__ = <x/>); ([1,,] for (__proto__ in this))) {export __noSuchMethod__;\t }");
tryItOut("/*for..in*/for([__parent__, __noSuchMethod__] = (typeof ({__iterator__ setter: new Function })) in #3={a:#3#} >> <x><y/></x>) {if(((yield prototype: (<>)<x><y/></x></> = __noSuchMethod__) >>= prototype)) {M:do var constructor, __iterator__; while((1e81) && 0); } else {gc() }if(({__iterator__: undefined })) {const __iterator__ = <x><y/></x>, __iterator__ = <><x><y/></x></>;\f } else  if (this.hasOwnProperty(\"prototype\")) return [[]]; else <><x><y/></x></> }");
tryItOut("return <x><y/></x>;");
tryItOut("M:with(false){ }");
tryItOut("return 'fafafa'.replace(/a/g, [1,2,3,4].slice)\n[true].sort((new Function(\"{  if ([<><x><y/></x></>].map([1,2,3,4].map))} ++ /x/  \")));");
tryItOut("let window");
tryItOut("L:while((__parent__ = \f<y><z/></y>) && 0)/*for..in*/for(var __proto__ in <x/>) gc()");
tryItOut("return;");
tryItOut(";");
tryItOut("/*for..in*/L:for(var __count__ = 3.141592653589793 || @foo in __iterator__) throw 1.3;");
tryItOut("L: {if(true / setter) {let prototype, __parent__; } else  if (({a1:1}).valueOf(\"number\")) {gc() } else {return;'haha'.split } }");
tryItOut("let (yield, constructor) { return; }");
tryItOut("L: this;\n/*infloop*/for(var \fprop; window; <><x><y/></x></>) {true }\n");
tryItOut("{{}return <x><y/></x>; }\n");
tryItOut("gc()return;");
tryItOut("/*infloop*/for(let ({ constructor: constructor, prop: __parent__ }) =  /x/ ; (export __count__); ((<x><y/></x>.__lookupSetter__(\"__proto__\") >= throw @foo) ? ({ get constructor constructor (x::prototype) { return *::* }  }) : (prototype.__iterator__))) {/*infloop*/for(constructor = [[1]]; this; <x><y/></x>) {<><x><y/></x></>;break L; } }");
tryItOut("L:if(([15,16,17,18].filter(<x><y/></x>.__defineGetter__(\"__iterator__\", (Function).apply), ([z1].*)))) {} else  if (#2=<x><y/></x>) {{} } else {prototype = <><x><y/></x></>\nthrow *; }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = (((Function)(false, <><x><y/></x></>)) |  '' );  /* Comment */false; prototype = ((null)(<x/>, 0x99))) (-0); const __iterator__;");
tryItOut("{[1,2,3,4].map }");
tryItOut("/*for..in*/M:for(let (__parent__) in ((this)(((@foo)(<y><z/></y>))))){__count__; }");
tryItOut("{/*infloop*/do {/*for..in*/for(var [__proto__, __parent__] = 1.3 in __iterator__) yield; } while(({prototype: * ? <><x><y/></x></> : this })); }");
tryItOut("yield (undefined >>>=<><x><y/></x></>).valueOf(\"number\");");
