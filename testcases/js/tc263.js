tryItOut("const [1,2,3,4].map;");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("if(#1=({__proto__: 3.141592653589793})) const __parent__ = window, __noSuchMethod__ = <x><y/></x>; else  if (eval(\"__iterator__ = <><x><y/></x></>;\", 033)) export prototype; else {return  '' ; }");
tryItOut("__iterator__ = __proto__, constructor = (__parent__)%=__iterator__.__parent__ getter= function  __iterator__ (__parent__) { return __parent__ } .watch(\"prop\", function () { M:with( /x/ )return; } )");
tryItOut("/*for..in*/M:for(const __noSuchMethod__.({}).hasOwnProperty(\"__count__\") in ((((<x/>).call( '' , true)))(new gc()))){break ;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__%=window.prop in !<><x><y/></x></>) (window);");
tryItOut("/*infloop*/do break M; while(function  __iterator__ (__noSuchMethod__) { return [15,16,17,18].filter(function(q) { return q; }, undefined) } );");
tryItOut("if(__count__.(.2)) export __noSuchMethod__; else {return; }\n");
tryItOut("for(let y in [5,6,7,8]) yield (null)() < new function ([y]) { }( /x/g ).watch(\"__count__\", ({}).hasOwnProperty);");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __iterator__] = ( \"\" [this]) in __noSuchMethod__) {{<y><z/></y>new Function } }");
tryItOut("prototype.constructor = -void <x><y/></x>");
tryItOut("/*infloop*/L:for(prototype = false; <x/>; (prop = __iterator__)) {let prop;return <><x><y/></x></>; }");
tryItOut("L:do {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in __proto__) {continue L;; }/*\n*/ } while((this) && 0);");
tryItOut("if((<><x><y/></x></>)(3) = *::* for (__count__ in -1)) { if ((*::*.unwatch(\"__proto__\"))) if(<x><y/></x>) 0/0; else  if (3/0) {return undefined; } else  \"\" }");
tryItOut("{/*for..in*/for(__noSuchMethod__ in ((Math.sin)(__iterator__ = setter.yoyo(true) > new (Math.pow)(<><x><y/></x></>, [,,z1])))){[1,2,3,4].mapexport *; }let undefined,  '' ; const __count__; }");
tryItOut("/*for..in*/for(const [prop, ({ prototype: __count__, prop: [[], , [, __noSuchMethod__, , ], constructor, ] })] = [15,16,17,18].some(*::*, false ^ prototype) in (~[,])) prop;export *");
tryItOut("L:with((p={}, (p.z = <><x><y/></x></>.throw(undefined))())){{export *;<><x><y/></x></> }window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <x><y/></x>.x::__count__ in (constructor)) {if((new (Function)(1e-81, null))) yield; else  if (__count__ = <><x><y/></x></>) var /*\n*/prop = <><x><y/></x></>, getter; else {return; }yield constructor; }");
tryItOut("switch((__proto__.constructor setter= (prototype &= <><x><y/></x></>\r).apply)) { default: continue L;\nprototype;\ncase ({__iterator__: 3/0, constructor: __count__ }): case __iterator__ = <x><y/></x>: break;  }");
tryItOut("return false;");
tryItOut("/*infloop*/do if(\fthis) {__count__; } else  if (-1) __proto__ = <><x><y/></x></>, __noSuchMethod__; else {return (-0); } while([,,].__lookupSetter__(\"prototype\"));");
tryItOut("/*for..in*/for(let constructor(\t-3/0.__proto__) in prototype.__proto__ setter= ({}).hasOwnProperty) \fdo var __parent__; while((__iterator__ = __count__) && 0);");
tryItOut(";");
tryItOut(";");
tryItOut("with({__proto__: this}){return <x><y/></x>; }");
tryItOut("if( \"\" .throw((-1))) { if (5.0000000000000000000000 >>= this) continue M; else {throw <><x><y/></x></\f>;export *; }}");
tryItOut("with({__noSuchMethod__: [,,z1] && <x><y/></x>}){/*for..in*/for(var constructor in ((Function)( /x/ ))){yield this; } }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in (void <><x><y/></x></> % [[]])) {var __count__ = (eval(\"function ([y]) { }\", <x><y/></x>)), set = <y><z/></y>; }");
tryItOut("throw *::*;");
tryItOut("yield;");
tryItOut("with( \"\" )let __noSuchMethod__ = <x><y/></x>, constructor;");
tryItOut("L:switch() { default: with({}) { __proto__.prototype = prototype; } break; {}case (__iterator__ = __iterator__): yield;break; case 7: break;  }");
tryItOut("L: {Functionthrow <y><z/></y>; }");
tryItOut("if(null.__defineSetter__(\"__proto__\", Math.pow)) { if //h\n((uneval(<x><y/></x>))) {return;return; } else \f{return <x><y/></x>;(window); }}");
tryItOut("L:switch((function(q) { return q; })()) { case 3: default: case 8: /*infloop*/while(* /= __proto__){(prop);export __iterator__; }break; case (__iterator__ = [[, __proto__, prop, constructor], , ]): ( \"\"  ? <x><y/></x> : 1e+81);case 9: let try { {} } catch(prop) { var prop = @foo; } finally { return *::*; } , __count__ =  /x/ ;break; case 5: {}break; break;  }");
tryItOut("do {continue ; } while(( \"\" ) && 0);");
tryItOut("if(window) var constructor =  /x/ , __iterator__ =  '' ; else  if (({(*): ({a2:z2}) })) {return *; } else {with([[z1]])export constructor;(*); const __noSuchMethod__; }");
tryItOut("{/*infloop*/L:for(({ function::__proto__: [__iterator__], let: prototype }) = <x><y/></x>.unwatch(\"constructor\"); #2=({__iterator__: <y><z/></y>.throw(__count__)}); (this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice)).watch(\"prototype\", function(y) { yield y; \f; yield y; })) gc()break L; }");
tryItOut("/*for..in*/for(__iterator__ = new RegExp(var __iterator__, __proto__, undefined ? #1=[#1#] : __iterator__) in (-3/0 | __count__)) export *\n/*for..in*/for(var [__count__, //h\nprop] = (__parent__.__noSuchMethod__) in #1=[#1#]) {let __proto__, null = <y><z/></y>;{} }");
tryItOut("try { throw window; } catch(__noSuchMethod__) {  } finally { throw <><x><y/></x></>; } ");
tryItOut("/*infloop*/for(let __iterator__ = ((function  __proto__ (__iterator__, __iterator__) { return; } ).call(<y><z/></y>, __parent__)); (-*::* .@*:: false.__lookupGetter__(\"__count__\")); ([prop.prop].sort(function(q) { return q; }))) {(1 for (x in [])) }");
tryItOut("(<y><z/></y>);");
tryItOut("M:with(<xxx {__proto__}={((p={}, (p.z = <y><z/></y>)())) ? (__iterator__ = prototype()) : __parent__.((p={}, (p.z = false)()))} />){}");
tryItOut("/*infloop*/L:do {/*for..in*/for(let [__proto__, __noSuchMethod__] = __parent__ in 5.0000000000000000000000) {yield null;yield; } } while(undefined.__defineGetter__(\"__parent__\", gc));");
tryItOut("var __count__, prop; const prototype");
tryItOut("/*infloop*/L:for(var __noSuchMethod__ = \t '' ; *; <x><y/></x>) return;");
tryItOut("{}");
tryItOut("/*for..in*/L:for(var __count__ = <><x><y/></x></> != __iterator__ in <x><y/></x>) {gc() }");
tryItOut("if(this.zzz.zzz) { if (let (__parent__ = null, __parent__ = <x><y/></x>) *) let prototype =  /x/ , __count__ = false;} else {return <x><y/></x>; }");
tryItOut("/*for..in*/for(let __parent__ = (prototype.__count__) in ~__count__ = @foo) export __iterator__;");
tryItOut("; const __iterator__;");
tryItOut("with(true){export *;<><x><y/></x></>; }");
tryItOut("\n/*for..in*/for(__parent__ in *::*) {yield <x><y/></x>;let function::x::__noSuchMethod__ = false; }");
tryItOut("if(1e81.throw( \"\" ).throw(<x><y/></x>.hasOwnProperty(\"__proto__\"))) L:if(((function (prototype, __parent__) { return; } )())) { if (yield #1=[#1#]) {'haha'.split }} else {break ; }");
tryItOut("gc()\n");
tryItOut("{/*for..in*/for(__parent__ in \t((gc)(*::*)))( set __count__ __count__ (__count__) { <x><y/></x> } ); }");
tryItOut("if(if(*) gc()) { if ([,]) {export *; } else /*for..in*//* nogeckoex bug 349964 */ for  each(let (false)(this) in 0x99) export *;}");
tryItOut("let (__iterator__ = <><x><y/></x></>, prop = <x><y/></x>) @foo = __noSuchMethod__;");
tryItOut("M:switch(<x><y/></x>) { case prop: yield;break; default: case undefined: break; yield <><x><y/></x></>;__noSuchMethod__;break; ( \"\" );case <x><y/></x>: export prototype; }");
tryItOut("/*for..in*/for(let __iterator__ in (((/a/gi).apply)((__count__.constructor)))){([1]).applyfunction ([y]) { }; }");
tryItOut("with([*::*].eval(this))/*for..in*/M:for(const constructor in ((*)((this.zzz.zzz))))gc()");
tryItOut("if((__proto__) = ( /x/g  == 0)) { if (<x><y/></x>.throw( '' ) for each ( { return __proto__.constructor setter= __proto__.eval(({prototype: 1.3})) }  in [1]) for (prop in this)) [1,2,3,4].map else {}}");
tryItOut("if(*) return;");
tryItOut("{{/*infloop*/M:while(*::*)(function(id) { return id });__noSuchMethod__'; }0x99; }");
tryItOut("yield;");
tryItOut("/*infloop*/for(var __proto__; this.__defineSetter__(\"constructor\", <x><y/></x>); __parent__ =  /x/g ) __iterator__ = <x><y/></x>, prop;");
tryItOut("");
tryItOut("{3.141592653589793;export __iterator__; } const __count__;");
tryItOut("return <><xxx>{__proto__}</xxx></>;");
tryItOut("/*infloop*/for(([,,])[RangeError(constructor)]; ({}).hasOwnProperty(eval(\"new @foo(({a1:1}), <><x><y/></x></>)\", -0.__defineSetter__(\"constructor\",  \"\" ))) >= #1=[#1#].prototype = (-0); __proto__.isPrototypeOf(*)) {L:while((<x><y/></x>) && 0)continue M;continue M; }");
tryItOut("M\t:with({__noSuchMethod__: (this.watch(\"prototype\", ({}).hasOwnProperty))}){true;(__noSuchMethod__ .@ <y><z/></y>); }");
tryItOut("M:switch(constructor = __noSuchMethod__) { case 4: with({__parent__: ((@foo)(__iterator__))}){throw  /x/g ;let __proto__ = -0, prototype = <y><z/></y>; }break; case 6: __noSuchMethod__;break;  }");
tryItOut("(1.3);/*infloop*/for(false; <><x><y/></x></>; <><x><y/></x></>) export __iterator__;");
tryItOut("export prop;");
tryItOut("/*for..in*/for(let each.constructor in  /* Comment */__parent__.eval(1e+81)) { '' { } }");
tryItOut("/*infloop*/L:while((new Function(\"(null);\")))do {do {(function ([y]) { }); } while((<><x><y/></x></>) && 0); const __noSuchMethod__;M:if(<y><z/></y>) \n } while((((yield ))) && 0);");
tryItOut("yield *");
tryItOut("throw prop;");
tryItOut("with((eval(\"x::__iterator__\",  '' )))return;");
tryItOut("if(({ __proto__: __iterator__, prototype: __iterator__ }) = ({ constructor: set, __parent__: __proto__ }).__defineGetter__(\"__iterator__\", ((new Function(\"yield;\"))).call) instanceof gc() != 1e4) ;");
tryItOut("/*infloop*/for(null--;  /* Comment */arguments\r if ((-0)); (prop.yoyo(true))) {( /x/ ); }");
tryItOut("/*for..in*/for(({ prototype: ({ __noSuchMethod__: __noSuchMethod__, prop: prop }), __parent__: ({ __parent__: __parent__, __count__: __parent__ }) }) in new (({ prototype: [__iterator__] }) = (-1) * #1=[#1#])((#1#.__defineSetter__(\"__count__\", 'haha'.split).__lookupGetter__(\"__parent__\")))) {do  /x/g ; while((<x/>) && 0); }");
tryItOut("with(__noSuchMethod__ =  '' .yoyo([(({})) if (<x><y/></x>)]))yield\n;");
tryItOut("with({}) { ; } ");
tryItOut("[1,2,3,4].slice");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in __noSuchMethod__ = 0x99) {(<><x><y/></x></>).watchvar __count__, __proto__; }");
tryItOut("__count__ = constructor;");
tryItOut("__noSuchMethod__ = *.__defineGetter__(\"__proto__\", Math.sin)");
tryItOut("/*infloop*/L:for(var __proto__; ([11,12,13,14].filter).hasOwnProperty(\"__proto__\"); window) export *;\nvar __parent__;\n");
tryItOut("/*for..in*/for(let prototype in 'fafafa'.replace(/a/g, )) {(function(y) { yield y; prototype;; yield y; }).apply\nwhile((({ get __count__()<x><y/></x> })) && 0)/*for..in*/for([__proto__, __count__] = ({a2:z2}) in ({ constructor: __count__, __proto__: ({ __proto__: prototype, __proto__: __iterator__ }) })) return; }");
tryItOut("/*infloop*/L:while([15,16,17,18].some(new Function, #1=<><x><y/></x></>))");
tryItOut("let (__proto__ = function ([y]) { }) { if(<x><y/></x>) break ; else  if (prop = __count__) {const each, prototype = </*\n*/><x><y/></x></>; } }");
tryItOut("with(window)throw [,];");
tryItOut("export *;__parent__");
tryItOut("return <x><y/></x>;\t const __count__;");
tryItOut("if(({a1:1}) = (window.watch(\"__noSuchMethod__\", (1 for (x in []))))) {/*infloop*/while({}.unwatch(\"__parent__\"))const function::__iterator__ =  /x/ ,  /x/  = 4.;let __count__; } else this.zzz.zzz;");
tryItOut("switch(eval(\"[z1,,]\", 5.0000000000000000000000)) { case 9: ;break;  }");
tryItOut("L: {yield <x/>; }");
tryItOut("do return; while((this.__defineSetter__(\"prototype\", (({}).__lookupGetter__).apply)/*\n*/ * this.prop) && 0);");
tryItOut("/*infloop*/do {{}window; } while((<><x><y/></x></> % undefined));");
tryItOut("/*for..in*/for(prototype = <x><y/></x>.__lookupSetter__(\"__noSuchMethod__\") in constructor) { '' ; }");
tryItOut("/*for..in*/for(const __iterator__ = <x><y/></x> in []) {; }");
tryItOut("/*infloop*/for(let __proto__; __noSuchMethod__|=null; (void  { return; } )) {__iterator__;(<y><z/></y>); }");
tryItOut("__proto__ = *::*");
tryItOut("/*for..in*/for(var [prop, __count__] = prototype in (let (__iterator__, __parent__ = __parent__) <x><y/></x>)) <><x><y/></x></> <<= __iterator__");
tryItOut("/*infloop*/M:do /*for..in*/for(var __noSuchMethod__ = constructor = ((<x><y/></x>)[({a2:z2})]) in eval(\"yield;\", 3)) {L: <><x><y/></x></>;{} } while([,]);");
tryItOut("/*for..in*/M:for(let __parent__ = true.watch(\"__count__\", (new Function(\";\"))) for (constructor.__noSuchMethod__ in window) if (<x><y/></x>) in (undefined.hasOwnProperty(\"__count__\"))) yield;");
tryItOut("M:do {do [1,2,3,4].slice while((('fafafa'.replace(/a/g, function (({ __noSuchMethod__: __iterator__ })) { return undefined } ))) && 0); } while((__noSuchMethod__) && 0);");
tryItOut("{const __count__, __proto__/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in  /x/ ) {return;throw __parent__; } }");
tryItOut("/*infloop*/L:while(prop.__noSuchMethod__)\t\flet (__proto__ = constructor, __iterator__ = @foo) { __iterator__; }");
tryItOut("(case <><x><y/></x></>: );\nlet (constructor) { yield true; }\n");
tryItOut("(@foo);");
tryItOut("/*infloop*/for(@foo.__lookupSetter__(\"__noSuchMethod__\"); __iterator__ = *; 0x99.watch(\"prototype\", gc)) ;");
tryItOut("/*infloop*/for(each; [15,16,17,18].some(function(y) { yield y; ;; yield y; }\f, window); prop /= (__noSuchMethod__.__iterator__ = this)) {return .2;yield; }");
tryItOut("(<x/>); const prop;");
tryItOut("yield this\nconst __count__, prototype;");
tryItOut("with(undefined){yield 4.;gc() }");
tryItOut("/*infloop*/for(__parent__; (__iterator__.__noSuchMethod__\n = <y><z/></y>.throw(null)); null) /*infloop*/for(((new Function).call((-0), undefined, window));  '' ; this || <x><y/></x>) break M\f;");
tryItOut("export __noSuchMethod__;");
tryItOut("M:with((__count__|=true));");
tryItOut("L:if(<><x><y/></x></>) {function  prop () { yield undefined }  }");
tryItOut("try { return + \"\" ; } catch(__iterator__ if (function(){__parent__ = constructor;})()) { return <><{prop}><x><y/></x><!--yy--></{prop}></>; } finally { try { const prop = <x><y/></x>; } catch(__iterator__ if window) { yield; } catch(prop) { yield; } finally { (prop); }  } ");
tryItOut("/*infloop*/do {yield; } while(([1,2,3,4].map)(this));");
tryItOut("switch([,]) { case null++.hasOwnProperty(\"__count__\"): M:if(<ccc:ddd>yyy</ccc:ddd>.(__noSuchMethod__ =  '' )) {;export prototype; } else {}case new ({}).hasOwnProperty(null): break; default: case 7: break; case 3: break; /*infloop*/do ( '' ); while(__parent__ = typeof <><x><y/></x></>.__lookupSetter__(\"__proto__\"));case __iterator__ = new yield;(null, *).throw(#1=({__noSuchMethod__:  /x/ })).@foo: with({}) {}break; case 5:  }");
tryItOut("L:with({prop: yield break }){[1,2,3,4].slicecontinue L; }");
tryItOut("throw StopIteration;");
tryItOut("if(eval(\"undefined\", constructor =  /x/ )) {{} } else  if (this) {{prototype;var __noSuchMethod__, __noSuchMethod__ = 3; } }");
tryItOut("/*for..in*/for(var __count__ in ((function(y) { yield y; with({__count__: (p={}, (p.z = __proto__)())}){var __count__ =  /x/g , constructor;prop }; yield y; })((uneval(eval(\"<y><z/></y>\",  '' ) >>=  /x/ ))))){if(#0=[(window if (function ([y]) { }))]) {return; } else  if (((let (__proto__ = true, __proto__) this) ? (p={}, (p.z = function(id) { return id })()) : (<x/>))) { \"\" ;yield __iterator__; }{[1,2,3,4].slice } }");
tryItOut("with({prototype: ((yield ({__iterator__: <><x><y/></x></>, prop setter: function (*::*, __parent__) ''  })) = window) for each (__proto__ in this.zzz.zzz) for each (__noSuchMethod__ in undefined) if ( /x/ )}){__proto__; }");
tryItOut("/*infloop*/for(var __parent__; (p={}, (p.z = *)()) , (constructor%=({})); __iterator__.constructor getter= [1,2,3,4].map.__defineSetter__(\"__proto__\", prop)) return;");
tryItOut("L:with({__proto__: (__noSuchMethod__.constructor).isPrototypeOf(new (<><x><y/></x></>)())}){return __count__;(<x/>); }");
tryItOut("if(let (({ __count__: ({ prototype: prop }) }) = ( \"\"  for each (prop in [,]) for ((__iterator__) in <><x><y/></x></>) for each (__proto__ in  \"\" ))) @foo.__defineGetter__(\"__proto__\", ([1,2,3,4].slice).apply)) { if (prop = [,,] in (<><x><y/></x></>)[@foo]) with({<><x><y/></x></>.__count__: (window)})var prop = [,,z1], __parent__ = undefined; else {gc()while((window.*) && 0)while((<><x><y/></x></>) && 0){break ; } }}");
tryItOut("/*for..in*/for(var __count__ in eval(\"/*infloop*/for(let prop; __noSuchMethod__;  \\\"\\\" ) {__count__ = 3, constructor = <><x><y/></x></>; }\\f\", 4.)) {yield <y><z/></y>;break L; }");
tryItOut("throw *;\n");
tryItOut("/*infloop*/while(undefined)((-0));");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*infloop*/do return eval(\"<x><y/></x>\", __proto__); while('fafafa'.replace(/a/g, [1,2,3,4].map) ? <><x><y/></x></>.eval(<x><y/></x>) : <><x><y/></x>yyy</>.__noSuchMethod__);");
tryItOut("constructor = <x/>;\nexport *;\n");
tryItOut("while((function ([y]) { }) && 0)return <><x><y/></x></>;");
tryItOut("do {yield this;yield <x><y/></x>; } while((+#1=[#1#]) && 0);");
tryItOut("with({}) { return; } \n([[]]);\n");
tryItOut("/*for..in*/for(__proto__ in ((( \"\" ).apply)(@foo))){export *; }");
tryItOut("/*infloop*/L:for(var ({ constructor: __parent__, __parent__: ({ __iterator__: [, __count__, , ] }) }) = #0=[let __proto__ = true]; [(<><x><y/></x></> +  /x/ ) if (undefined)]; <><xxx>{__noSuchMethod__}</xxx></>) ;");
tryItOut("\nif((new [1,2,3,4].slice(3, <x/>)).__iterator__) var prototype =  /x/g , __proto__;");
tryItOut("/*for..in*/for(let <><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\") in <x><y/></x>.hasOwnProperty(\"prototype\")) continue L\ngc()");
tryItOut("L: {gc() }");
tryItOut("if(this.__defineGetter__(\"let(__count__ = __count__ = (yield [15,16,17,18].some(function ()this,  /x/g )).@*) ((function(){;})());\", ([( /x/  && *)].sort(function () { yield constructor } )))) { if (each = [,].prop) with({__proto__: __iterator__}){export *; } else {if([,,]) { if (window) } else {return; }/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in  \"\" ) {{yield;(<x><y/></x>); } } }}");
tryItOut("switch(<y><z/></y>) { default: break;  }");
tryItOut("throw (__proto__)\ntry { yield  /x/ ; } catch(__count__ = <x/>) { return  /x/ ; } finally { yield; } ");
tryItOut("/*infloop*/for(let ({ __iterator__: [({ __iterator__.prop:  catch , __iterator__: let (__iterator__) [[]] }), , __count__, [({ prop: <x><y/></x>['__count__'] })]] }) = ( /* Comment */<y><z/></y>[(<><x><y/></x></>.__defineGetter__(\"__count__\",  '' ))]); (uneval(this.@foo)) >>= this.__defineSetter__(\"__iterator__\", (@foo).__defineSetter__); ((#2=[[,]])--)) let (prop) { yield; }");
tryItOut("return;");
tryItOut("/*infloop*/while(__iterator__ = ({__proto__: ({a2:z2}),  set constructor(prop)<y><z/></y> }))gc()");
tryItOut("return;");
tryItOut("let (constructor) { continue M; }");
tryItOut("let(({ prop: __parent__, prop: __iterator__ })) ((function(){constructor = prop;})());");
tryItOut("/*for..in*/for([__count__, __count__] = (<x/>.throw(__count__))-- in  /x/ .prop) {if( /x/ ) {this;(this); }return; }");
tryItOut("L:if((eval(\"(__count__ = (1 for (x in []))(new (({}).hasOwnProperty)(), prop))\", (<x><y/></x>.(@foo)).propertyIsEnumerable(\"prop\")))) while(([]) && 0)return; else /*infloop*/for(__iterator__; [15,16,17,18].some(eval, *); false.propertyIsEnumerable(\"__count__\")) gc()");
tryItOut("if(<><x><y/></x></> :: *::*--) return; else  if (__proto__ = ({a1:1})) <><x><y/></x></>; else return;");
tryItOut("/*infloop*/do {yield  /x/g ; } while(this);");
tryItOut("switch(__noSuchMethod__.prop = (prop|=<x><y/></x>)) { default: L:if(('fafafa'.replace(/a/g, (<x><y/></x>).watch))) { if ((<><x><y/></x></>--).watch(\"__iterator__.prototype\", ([1,2,3,4].slice).apply)) {with({__parent__: [,,z1]}){yield prop;eval }; } else }case ((((*).watch).call((-0), null))(this.__defineGetter__(\"prototype\", function  prototype (prop) { yield @foo } )))(): with(@foo.hasOwnProperty(\"__noSuchMethod__\"))let __parent__\nbreak;  }");
tryItOut("/*infloop*/for(__parent__;  /x/ --; <x><y/></x> | null) {gc()yield; }");
tryItOut("L:if((__noSuchMethod__ = <x><y/></x>) >>= function::constructor.isPrototypeOf(__parent__).__lookupGetter__(\"constructor\")) {const constructor = *, __proto__; } else  if (new gc()) {; }");
tryItOut("do {return;throw <x><y/></x>; } while((<x><y/></x>) && 0);return 3.141592653589793;with(__iterator__ -= 1.3)if(null) export constructor;");
tryItOut("/*infloop*/do export *; while(1e81);");
tryItOut("M:if(this.__defineGetter__(\"__noSuchMethod__\", ((new Function(\"return try { export *; } catch(constructor if (function(){export constructor;})()) { gc() } finally { throw <><x><y/></x></>; } ;\"))).apply)) {constructor; } else export __count__;");
tryItOut("{__count__, __iterator__ = false; }");
tryItOut("throw  '' ;");
tryItOut("{return;yield [[]]; }");
tryItOut("if((<y><z/></y> for each (__proto__ in 1e81) for (__proto__ in <><x><y/></x></>))) { if ((({__count__: <><x><y/></x></> }))) yield;} else /*infloop*/for(let constructor; __iterator__.prototype getter= function () { yield <><x><y/></x></> } ;  \"\"  @ <x><y/></x>) ;");
tryItOut("/*for..in*/for(let __parent__ in +<x><y/></x>.__lookupSetter__(\"prototype\")) if(0 >= true) {return 3.141592653589793; } else yield window;");
tryItOut("__iterator__ = __proto__, prototype;");
tryItOut("let (prototype, __parent__ = <xxx {prototype}={true} />.((@foo.@foo))) { export prop; }");
tryItOut("{yield; }");
tryItOut("with({constructor: ({ prototype: __parent__, \fprototype: __proto__ }) = [, , __proto__, , ]})return __count__;");
tryItOut("switch((( /x/g )(this)) -=  /x/g .__parent__) { case 7: export constructor;default: break; case 5: break; case (prop = *::*): yield null;case false.__lookupSetter__(\"constructor\"): return; }");
tryItOut("let __iterator__ = <><x><y/></x></>, __noSuchMethod__;yield;");
tryItOut("if(![,].__lookupGetter__(\"__noSuchMethod__\")) {export *; } else  if (this.__defineGetter__(\"__noSuchMethod__\", function \t(__iterator__, __proto__) { yield this.zzz.zzz } )) {break L;let __iterator__, prototype; } else yield ({});");
tryItOut("if(this\n) {'haha'.split } else  if (__noSuchMethod__.( /x/g )) {return const __noSuchMethod__ = *::*, prop;;; } else {/*infloop*/for( \"\" ; *::*;  /x/g ) return  /x/g ;export __noSuchMethod__; }");
tryItOut("/*infloop*/for(const default: break;  = Math.pow(); typeof prototype\n; eval(\"[0.1 <= true if (__proto__)], let (__proto__, __iterator__ = #1#) this\", (new (__iterator__-=<><x><y/></x></>)()))) export *;");
tryItOut("/*infloop*/L:for(let __count__; __parent__[<x/>]; __proto__ || <x><y/></x>) {M:with(__noSuchMethod__ = this){export __count__;(prop); }/*for..in*/for(prototype in (((*::*).__defineSetter__)(let(__proto__ = __iterator__) ((function(){})());)))<><x><y/></x></> }");
tryItOut("while(((__parent__.isPrototypeOf(function ([y]) { }).hasOwnProperty(\"constructor\"))) && 0)break ;");
tryItOut("with({}) try { throw prop; } catch(__parent__) { return; } finally { let(__noSuchMethod__ = this) ((function(){gc()})()); } ");
tryItOut("/*for..in*/for(var __proto__ in ((function  __parent__ (constructor, __iterator__) { return window } )(undefined))){__proto__, prop;export *; }");
tryItOut("/*infloop*/for(const prop = (({ set __proto__ prop () { yield *::* } , prototype setter: Function })); 3.141592653589793['prop'] = @foo :: <x><y/></x>; <x/>.unwatch\f(\"__noSuchMethod__\")) {}");
tryItOut("/*infloop*/M:for(__noSuchMethod__ = (this.zzz.zzz); \tyield (__noSuchMethod__ =  /x/g ); (({prototype:  /x/ , __count__: (true.unwatch(\"__count__\")) }))) {__count__, prototype = arguments;function ()1e+81 }");
tryItOut("yield  '' ;");
tryItOut("if(let (constructor =  '' , constructor) (-1)) {} else {__parent__, prop = -0 }\n");
tryItOut("L:if(prototype) yield __iterator__; else  if (false.watch(\"prototype\", function (prototype)@foo)) {{} }");
tryItOut("M:if({return null.*\nvar prop;Function }) {return [,,z1]; } else  if ((constructor = (-1))) var __parent__, __noSuchMethod__;switch(*) { case 7: var __parent__ = prop;break;  }");
tryItOut("if(constructor = <x><y/></x>) *; else  if  J (__parent__ = null.prototype)) yield <><x><y/></x></>;/ else let __proto__ = <x><y/></x>, __count__ = {};\nexport *;\n");
tryItOut("/*infloop*/for(let __noSuchMethod__ = [, ({ __noSuchMethod__: function::prototype }), , ({ prop: __noSuchMethod__ })]; (*::* for (__parent__ in [[1]])); typeof  '' ) {;const __iterator__ = __iterator__, __iterator__prop getter: function ()[* if (<><x><y/></x></>)] }");
tryItOut("__proto__");
tryItOut("/*infloop*/M:for(@foo; (window /= window[eval(\"this\", <y><z/></y>).hasOwnProperty(\"__count__\")].__defineGetter__(\"__parent__\", (({}).hasOwnProperty).call)); yield <zzz>@foo</zzz>;) {var __noSuchMethod__; }");
tryItOut("if(0/0) { if (__proto__.valueOf(\"number\")) {yield;<x><y/></x>; } else /*infloop*/for(const __noSuchMethod__; <x><y/></x>.__defineSetter__(\"__parent__\", (function  __noSuchMethod__ (__count__, prototype)<x><y/></x>).apply); (.__defineGetter__(\"prop\", ({}).__lookupGetter__))) {export *; }}");
tryItOut("if((yield -0)) {yield;const __count__, __parent__ = this; } else yield;");
tryItOut("if((((__noSuchMethod__.__noSuchMethod__ getter= ([1,2,3,4].map).call) for each (__proto__ in (-1)) if (window)))) {yield;const @foo = 0/0, __iterator__ = (<x><y/></x>);; } else  if (true) M:if((__count__ = <y><z/></y>)) __noSuchMethod__; else  if (--<><x><y/></x></>)  else let __proto__ = __count__, __proto__ = <x><y/></x>;");
tryItOut("if((<><x><y/></x></>)[<x><y/></x>].isPrototypeOf(0/0)) { if (__proto__ = #1=({__noSuchMethod__: (__parent__ = prop)})) {try { yield; } catch\f(prop) { \texport __proto__; }  } else 'haha'.split}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in ((*::* for (__count__ in <x><y/></x>)))) {return; }");
tryItOut("with((this.__lookupSetter__(\"function::__parent__\")))/*for..in*/for(var __proto__ in ((gc)(null))){gc()return (-1); }");
