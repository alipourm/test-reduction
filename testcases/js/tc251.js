tryItOut("/*for..in*/for(let __parent__ in (((({}).hasOwnProperty).call)(new <x><y/></x>([z1,,]))))gc()");
tryItOut("if(false) (this); else  if (*) {{}return <x><y/></x>; }\nreturn undefined;\n");
tryItOut("throw case 9: /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in constructor) {yield; }break; ;");
tryItOut("M:if( \"\" .__iterator__) {var __count__ =  \"\" ; } else /*for..in*/for(prop in (((({}).hasOwnProperty).apply)(window)))\t{ }throw [,,];");
tryItOut("M:if([11,12,13,14].filter) {break ; } else  if (((undefined)[<y><z/></y>] for each (__iterator__ in <>__noSuchMethod__ getter: ({}).hasOwnProperty</>))) { }");
tryItOut("/*infloop*/for(__parent__; (eval(\"yield;\", 0/0)); (undefined.@foo)) ");
tryItOut("throw StopIteration;");
tryItOut("if(window) { if (false.eval(*::*)) [1,2,3,4].slice else gc()}");
tryItOut("if(*) function(q) { return q; } else  if (window .@ arguments) (*);");
tryItOut("while((function  __count__ (prop, __noSuchMethod__) { yield  for (__noSuchMethod__ in 0) } ) && 0)__proto__;");
tryItOut("/*infloop*/for(let prototype; <xxx {__parent__}={ /x/ } />.(__iterator__.(__proto__)); (uneval( /x/ ))) ({}).hasOwnPropertywith({}) const prop = null, constructor = arguments;if([,]) {continue M;<x><y/></x> }");
tryItOut("let (prototype = this.__defineSetter__(\"__proto__\", <y><z/></y>).eval((@foo if (window)))) { yield null; }");
tryItOut("L:with([15,16,17,18].sort('haha'.split, [ '' ].sort( /x/g )(<x><y/></x>.propertyIsEnumerable(\"prototype\"), *::*))){<zzz>delete window.hasOwnProperty(\"prototype\")</zzz><!--yy-->; }");
tryItOut("{if(Object(<x/>)) /*infloop*/for(let __noSuchMethod__ = <x/>; (-1); <x><y/></x>) {let prototype; } }");
tryItOut("var __iterator__ = this;");
tryItOut("L: {const __count__, prototype = this\ngc() }");
tryItOut("/*infloop*/while(@foo){{} }\nconst prop = *::*;\n");
tryItOut("if( '' ) *; else  if (<><x><y/></x></>) __proto__ = this");
tryItOut("'haha'.split");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] = <>this.__defineGetter__(\"__noSuchMethod__\", (({}).__lookupGetter__).call)</>.(( /x/g .__defineGetter__(\"__count__\", function  __proto__ () { continue M; } )) ? ((uneval(<x/>))) : <><x><y/></x></>.__lookupSetter__(\"prop\")) in (({getter setter: \f('haha'.split).apply }))) {{[];  } }");
tryItOut("for(let y in [5,6,7,8]) with({}) __count__ = constructor;");
tryItOut("with({__parent__: this.zzz.zzz}){gc()__iterator__, x::__proto__ = *::*; }");
tryItOut("/*infloop*/do /*for..in*/L:for(let __iterator__ in <x><y/></x>) {} while();");
tryItOut("/*infloop*/for((\n<><x><y\r/></x></>.__noSuchMethod__); ; this !== <x><y/></x>.hasOwnProperty(\"x::__noSuchMethod__\") ^ ((p={}, (p.z = try { gc() } finally { yield; } )()))) {gc() }");
tryItOut("let(constructor = ([15,16,17,18].filter(function  __proto__ () { return __iterator__ } , <x/>).constructor = {}.valueOf(\"number\"))) ((function(){with({}) (<y><z/></y>)(@foo) = prototype;})());");
tryItOut("if((<><x><y/></x></> <= 1e4)) yield #3={a:#3#}; else  if (arguments.watch(\"constructor\", ({}).hasOwnProperty)) ;");
tryItOut("throw [1,,];");
tryItOut("L: {#1#;return []; }");
tryItOut("with(((uneval(( '' .valueOf(\"number\")))).__count__))export __parent__;");
tryItOut("/*infloop*/do {yield <x/>;{} } while( /* Comment */0/0); const prop;");
tryItOut("with(<y><z/></y> .. <x/> ^ ([15,16,17,18].filter('haha'.split, <y><z/></y>))(eval(\"false;\", ((<><x><y/></x></>)[@foo])))){/*for..in*/M:for(const __count__ in ((function(q) { return q; })(let (__iterator__, __iterator__ = 0.1) <y><z/></y>)))return; }");
tryItOut("L: /*infloop*/while(null)break M;");
tryItOut("/*infloop*/for(const [,  '' , prop, prop, ] = window == <y><z/></y>; this.zzz.zzz; window.watch(\"__noSuchMethod__\", /a/gi)) /*infloop*/M:for(<><x><y/></x></>; ({a2:z2}); \t[z1]) {throw __proto__;prop }");
tryItOut("if((( /x/  >=  ''  .@ (__iterator__.unwatch(\"constructor\")) for each (constructor in  /x/ ) for ((prototype) in <x/>) for (constructor in [[]])) * window)) {yield (uneval(<x><y/></x>)); }");
tryItOut("if(__proto__) {/*infloop*/L:do { } while( \"\" );({}).__lookupGetter__ }");
tryItOut("/*infloop*/do ; while([__noSuchMethod__].filter([1,2,3,4].slice))\n");
tryItOut("return; const __count__;");
tryItOut("try { return; } finally { return; } ");
tryItOut("if(([15,16,17,18].filter(gc, *::*) |= @foo << __noSuchMethod__.__proto__)) { if (('fafafa'.replace(/a/g, (1 for (x in []))))) undefined; else const prop = *::*;}");
tryItOut("return __parent__ = eval(\"<><x><y/></x></>\", *::*)\n");
tryItOut("for(let y in []);");
tryItOut("with(function(id) { return id })return constructor;");
tryItOut("return;");
tryItOut("do export *; while(((uneval(<y><z/></y>))) && 0);");
tryItOut("/*infloop*/for((__count__).propertyIsEnumerable(\"__proto__\"); (); -3/0[<y><z/></y>] ?  ''  : (<><bbb xmlns=\"prop\"><ccc:ddd><x><y/></x>yyy</ccc:ddd></bbb></>[([5.0000000000000000000000 * prop])])) {throw ({ constructor: prototype }) = [window]; } const __count__;");
tryItOut("if(*::* > 0) throw <x><y/></x>");
tryItOut("if(__count__.__parent__) gc() else {<x><y/></x>;const __count__ = false; }");
tryItOut("L: L:if(@foo) { if (this) {continue ; } else continue ;}");
tryItOut("switch(Math.pow(<x><y/></x>)) { default:  }");
tryItOut("let ([, , , , ] = [prototype].sort((<x><y/></x>).apply) /= let (__noSuchMethod__) (1e81 >= undefined), ({ __noSuchMethod__: __count__ })) { if(#3={a:#3#}) {(*::*); } else {throw constructor; } }");
tryItOut("while((eval(\"(*::*);\", __proto__.prototype = <><x><y/></x></>)) && 0){const __count__ =  /x/g ;M:if(<x><y/></x>) { if (this) <x/>;} else {<x/>;gc() } }");
tryItOut("L: {const __count__ = <><x><y/></x></>, prototype;if(export *;) { if (undefined) {(__count__);; } else {break ;@foo; }} }");
tryItOut("while((@foo.prop) && 0){ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in [11,12,13,14].filter) export prototype;");
tryItOut("<><x><y\f/></x></>");
tryItOut("gc() const __count__;");
tryItOut("M:if( '' ) { if ( /x/g  %= (-0)) break ;} else gc()");
tryItOut("{const __proto__; }");
tryItOut("with({__iterator__: (({__parent__ getter: <y><z/></y>, prototype =  \"\" , prop:  /x/g  }))})export prop;");
tryItOut("for(let y in []);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(({ constructor: prototype, __parent__: [] }) = (<x><y/></x>.__defineGetter__(\"constructor\", __iterator__))[__parent__.( '' )]; (constructor+=<x><y/></x>); (yield (* ? [,,] : <x><y/></x>))) (<y><z/></y>);");
tryItOut("/*for..in*/M:for(prototype in (new \n<x><y/>/</x((this.__defineSetter__(\"__parent__\", Function)), window))) /*for..in*/for(const (constructor)({}) in ((gc)((yield this).@*)))var __iterator__ = [,,z1];");
tryItOut("if(<><x><y/></x></>) {{}gc() } else return <><x><y/></x></>;");
tryItOut("if((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in Exception().unwatch(\"__proto__\").__iterator__)) let (prototype = <y><z/></y>, __count__) { break M; }");
tryItOut("yield\nthrow  \"\" ;");
tryItOut("(\n)");
tryItOut("with(()){function(y) { yield y; export __iterator__;; yield y; } }");
tryItOut("try { *; } finally { gc() } ");
tryItOut("/*infloop*/while((*::* if (0/0)))return <x/>;");
tryItOut("gc()");
tryItOut("M:if(<xxx>{__iterator__}</xxx>) {return;continue ; } else  if ((constructor.@foo for (true.prototype in <x><y/></x>) if ( /x/ ))) /*infloop*/do {var __count__ = 033; } while(let (constructor = *, prop) true); else {([]);yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in  /x/g ) {L:while((5.0000000000000000000000 !== *) && 0)export getter; }");
tryItOut("L:do export *; while(((4)) && 0);");
tryItOut("with((yield (uneval(({a2:z2}))))){if(prototype = <><x><y/></x></>) { if (prop > eval(\"null\",  '' )) throw *; else (window);}function::__count__ }");
tryItOut("do {gc()throw (-0)\f; } while((undefined) && 0);");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("with({}) with({}) return;");
tryItOut("if(this.__defineGetter__(\"delete\", Function)) {yield;yield <x><\ry/></x>; } else  if ((undefined.__defineGetter__(\"__proto__\", /a/gi))) yield (-0); else {yield <x><y/></x>; }");
tryItOut("/*for..in*/M:for(let prototype = prototype = [1] .@*:: (uneval(<y><z/></y>)) in --<x/>) let (({ constructor: [prop, , __noSuchMethod__, ] }), __iterator__ = 5.0000000000000000000000) { with(<><xxx {prototype}={export *} /></>)<><x><y/></x></>; }");
tryItOut("let (prop, __parent__ = __count__) { ((new <x/>())); }");
tryItOut("L: {}");
tryItOut("this.zzz.zzz;");
tryItOut("if((({__count__: __parent__ = .eval(<><x><y/></x></>)}).__defineGetter__(\"prop\", function (({ __noSuchMethod__: __count__ }), constructor) { if(function  __count__ () { break L; } .eval(try { let __proto__; } catch(constructor) { <x><y/></x>; } )) { if (new *::*(<x/>,  /x/ )) (this);} else {gc() } } ))) { if (new ((yield window))()) {while((<x/>.*) && 0){0/0; } } else {if() {__count__return; } else  if ((function ([y]) { })() / undefined) {;yield; } }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in ([((<><x><y/></x></> for each (prototype in true) if ( '' )))])) {{}var __noSuchMethod__; }");
tryItOut("{break ;(constructor); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in @foo) return;");
tryItOut("let (constructor) { (void <x><y/></x>.unwatch(\"prop\")).watch }");
tryItOut("/*infloop*/do {{if(<><x><y/></x></>)  else  if (arguments) ; else var constructor; const constructor;\nyield;\n } } while((constructor(function::__proto__ = <x><y/></x>\t) = let (__count__, prototype = *) \f.2));");
tryItOut("(*::*);");
tryItOut("if(new Function()) return; else  if ((<y><z/></y> - <><x><y/></x></>))  '' ");
tryItOut("/*infloop*/for(1e81; (-1); (__iterator__)) {; }");
tryItOut("(__proto__);");
tryItOut("{var prototype, function::constructor = __noSuchMethod__; }");
tryItOut("if(*) var __parent__ = []; else  if ( \"\" .__lookupSetter__(\"__iterator__\")) {yield; } else if(<y><z/></y>) { if ([]) {{} }} else ;");
tryItOut("var __proto__ = *::*, __count__\n__iterator__");
tryItOut("let (prop = __proto__.__count__ = (<><x><y/></x></> @ constructor)) { /*for..in*/M:for([__parent__, __noSuchMethod__] = this.__defineSetter__(\"constructor\", [1,2,3,4].slice) in __parent__) do {export __count__;return; } while((<x/>) && 0); }");
tryItOut("L: {with({__parent__: constructor ? this.zzz.zzz : RangeError()}){(1 for (x in [])) } }");
tryItOut("L: {export __iterator__;continue ; } const __noSuchMethod__");
tryItOut("/*infloop*/while((<><!--yy--></> &= [15,16,17,18].sort(function  constructor () { return this } , [1])))if(3) return;\n{}\n else {([,,]); }");
tryItOut("let(({ prototype:  if (*::*) })) ((function(){return ((<x><y/></x>\r.( \"\" )).propertyIsEnumerable(\"__proto__\"));})());");
tryItOut("/*infloop*/while(this)var *, __count__ = <y><z/></y>;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, constructor] = [[1]] << <x><y/></x> in *::*) let __iterator__, prototype = <><x><y/></x></>;");
tryItOut("return [,,];");
tryItOut("/*infloop*/while(<x/>.__lookupSetter__(\"__iterator__\"))throw constructor-=__count__;");
tryItOut("export *;\nvar prop;\n");
tryItOut("do __iterator__, __proto__ while((void prop) && 0);");
tryItOut("with(prototype = constructor%=3/0)switch(((prototype = #1=[#1#]) <<= new function  prop (__noSuchMethod__) { yield 033 } ()--)) { default: case 1: ;break;  }");
tryItOut("yield (<x/> <<= window);");
tryItOut("if([3.141592653589793]) export *; else {yield;{} }");
tryItOut("yield __iterator__;\n(false);\n");
tryItOut("with(){if(constructor <= this) { if (__iterator__.__noSuchMethod__ = this) {(this); } else  /x/ ;} }");
tryItOut("/*infloop*/for(this.__defineGetter__(\"constructor\", {}); (__iterator__.(window)); (({__iterator__: this, constructor: <x><y/></x> }))) while((<x><y/></x>) && 0)return .2\nL:do var __proto__ = 1e+81; while((0) && 0);");
tryItOut("(1 for (x in []))\nthrow <x><y/></x>;\n");
tryItOut("/*for..in*/for(let __count__ = <> \"\" </>.((__parent__-=__noSuchMethod__)) in prop = ({a1:1})) prop = (function ([y]) { })();");
tryItOut("{{}gc() }");
tryItOut("while((__count__) && 0)throw StopIteration;");
tryItOut("export __iterator__;");
tryItOut("do gc() while(((let (set = let\f.unwatch(\r\"__iterator__\")) ((<x><y/></x>.(null)) > ({constructor setter: gc, prop: prototype = <><x><y/></x></> })))) && 0);");
tryItOut("while(((({ set prototype(constructor, __proto__){(__count__);var __proto__ = window, 033; } })--)) && 0){export *;__count__ = null; }");
tryItOut("do {/*infloop*/for(false; <x/>; prototype) {gc()*; }yield; } while(((\n<x><y/></x> >>= <y><z/></y>)) && 0);");
tryItOut("while((x::constructor = ({ __parent__: prototype, __iterator__: ({ __iterator__: __proto__ }) })) && 0)if(try { var constructor = @foo, __count__; } catch(prototype) { throw (-1); } ) { if (null)  else {gc() }}");
tryItOut("{return;throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in null) throw *;");
tryItOut("while((let (constructor) __proto__) && 0)/*infloop*/for(const __proto__; <><x><y/></x></>(constructor, <x><y/></x>); (<y><z/></y>.__lookupSetter__(\"__iterator__\"))) yield <x><y/></x>;");
tryItOut("while((({prop: function(id) { return id }})) && 0)gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in __proto__) {export __proto__;; }");
tryItOut("/*for..in*/for(let prop = false in  '' ) return this;\n/*for..in*/for(prototype.__proto__ in .2) let __proto__ = @foo, __noSuchMethod__;\n");
tryItOut("/*for..in*/for(var [prop, __parent__] = 'fafafa'.replace(/a/g, /a/gi).propertyIsEnumerable(\"constructor\") in (function(q) { return q; }(constructor) > (uneval( /x/g ))).propertyIsEnumerable(\"__parent__\")) if(__parent__.prototype = (({constructor: <><x><y/></x><\t/> }))) {with({__noSuchMethod__: window}){continue L; }const __count__ = *::*, prop = @foo; } else  if (([({ set __proto__(__proto__, __noSuchMethod__)function::__noSuchMethod__, constructor getter: Math.sin }) if (this)] | ({__noSuchMethod__:  \"\"  }))) return 4.;");
tryItOut("/*for..in*/for(let __proto__ = __parent__.eval(@foo) in window) {export __proto__; }");
tryItOut("if(this) { if (prop = <x><y/></x>) {} else {export constructor;yield; }}");
tryItOut("if(0/0.@foo) { if (({__iterator__:  ''  }).__noSuchMethod__) /*for..in*/L:for(const __noSuchMethod__ in 3.141592653589793) {{(*);yield; }(null); }} else {/*for..in*/for(let __noSuchMethod__ = #3={a:#3#}(<><x><y/></x></>, window) in <><x><y/></x></>) {yield 4.;; }const x::prototype, __parent__; }");
tryItOut("function(q) { return q; }");
tryItOut("throw __proto__;");
tryItOut("switch(function ([y]) { }) { default: break;  }");
tryItOut("var __count__ = <><x><y/></x></>, prototype = @foo; const __parent__;");
tryItOut("if(__count__.__defineSetter__(\"constructor\", gc) %= ({__count__ setter: (1 for (x in [])), __count__: null })/*\n*/) { if (((__count__|=__parent__))(this.__defineGetter__(\"constructor\", function(y) { yield y; Function; yield y; }), 1.3)) {export *; }} else {if( /x/g ) ; }");
tryItOut("do { } while(((* for each (__iterator__ in  \"\" ))) && 0);");
tryItOut("var (__noSuchMethod__), ({ __iterator__: prop, constructor: __count__ })\nlet __proto__ = __proto__;");
tryItOut("L: {yield; }");
tryItOut("yield null;");
tryItOut("/*for..in*/L:for(let constructor.__proto__ in ((function(q) { return q; })(__noSuchMethod__)))(<x><y/></x>); const __parent__;");
tryItOut("if(window) { if (this) {{} }} else {<x><y/></x>;constructor; }\n;\n");
tryItOut("yield new <><x><y/></x></>((void <><x><y/></x></>));");
tryItOut("yield prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in prop|=(yield (p={}, (p.z = false)()).__noSuchMethod__)) {let (__proto__ = true, prop = <x/>) { if(<><x><y/></x></>) {evalexport *; } else  if (null) {let \f__count__; } }while((false.propertyIsEnumerable(\"__noSuchMethod__\")) && 0) }");
tryItOut("(*);yield;");
tryItOut("<x><y/></x>\nyield;");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = <x><y/></x> in window) {return __count__; }");
tryItOut("return;");
tryItOut("L: gc()");
tryItOut("yield #1=[#1#]\n");
tryItOut("/*for..in*/for(const prop = __parent__ in  /x/ ) return;");
tryItOut("do {var __parent__, __parent__ =  \"\" ; } while((undefined) && 0);");
tryItOut("{if(*::*) export *; else let __parent__ = 0, __count__ = 5.0000000000000000000000;var __count__; }");
tryItOut("M:if(4.) { if (<x><y/></x> in <x><y/></x>) {export *; }} else var prototype =  '' ;");
tryItOut("/*for..in*/for(let __proto__ in ((Math.pow)(( /x/g .hasOwnProperty(\"__count__\"))))){var constructor, prop = null;return window; }");
tryItOut("/*infloop*/for(const prop; [11,12,13,14].map; new prototype) {\tM:while((<x><y/></x>) && 0)yield; }");
tryItOut("const __proto__ = <><x><y/></x></>, __iterator__ = window;");
tryItOut("{L:if(prop.isPrototypeOf([])) { if ((new <y><z/></y>)) {var __iterator__ = this, __count__ = __parent__; }} else {yield; } }\t");
tryItOut("if((new  '' ())) {1.2e3;return; }");
tryItOut("var __parent__, prototype;\nL:if(<x/>) this; else  if ('fafafa'.replace(/a/g, Math.sin)) ; else try { <><x><y/></x></>; } catch(__iterator__) { let __iterator__ = @foo, ; } \n");
tryItOut("yield;");
tryItOut("with({__count__: __parent__ = (\n /x/ .__noSuchMethod__).eval(<y><z/></y>)}){if((<><x><y/></x></> ? <><x><y/></x></> :  \"\" )) ;gc() }");
tryItOut("let (__parent__, prop) { yield; }");
tryItOut("/*infloop*/L:for(const [__parent__] = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(~__count__); ([__noSuchMethod__] = __count__); __noSuchMethod__ =  /x/ .__lookupGetter__(\"__noSuchMethod__\")) {var prototype, __proto__;var #3={a:#3#}, @foo; }");
tryItOut("/*for..in*/for([__iterator__, prototype] = <x><y/></x>.([]) in (yield <><x><y/></x></>)) /*infloop*/for(let __iterator__ = @foo; (*::* / (<><x><y/></x></> <= this)); (<x/>.@*)) {/*infloop*/while(*::*.valueOf(\"number\"))if( /x/g ) {} else  if (false) {yield; } }");
tryItOut("if(true) {let __noSuchMethod__ = prop; } else return  '' ;");
tryItOut("with({__parent__: new ((/a/gi).call)(this)}){return;export *; }");
tryItOut("{gc()if(<><x><y/></x></>) return; else  if (function(id) { return id }) {( /x/ ); } else (window); }");
tryItOut("/*infloop*/do {{export *;export *; } } while(null.propertyIsEnumerable(\"constructor\")");
tryItOut("if(<y><z/></y>) const constructor = 033");
tryItOut("let __iterator__ = __noSuchMethod__\nlet prototype = <y><z/></y>, __parent__ = true;");
tryItOut("L:if((({a2:z2}).__parent__ = (function ([y]) { })())) {return;__parent__ = 3 } else  if (new (new Function).apply(<x><y/></x>.(__proto__),  \"\" )) {}");
tryItOut("do {yield;export *; } while((([11,12,13,14].map)) && 0);");
tryItOut("while((__noSuchMethod__) && 0){yield <x/>;throw {}; }");
tryItOut("L:with({__count__: (p={}, (p.z = <y><z/></y>)())}){([1,,]); }");
tryItOut("export *;");
tryItOut("if(Date()) { if (constructor = prop.constructor = __iterator__) yield\n else /*infloop*/do {function::prop = @foo, __proto__ = window;break L; } while(__parent__); const __parent__;}");
tryItOut("if(window.__lookupGetter__(\"constructor\")) {function(q) { return q; } } else  if (((p={}, (p.z = __iterator__ = <x><y/></x>prototype)()))) {} else (<x><y/></x>);");
tryItOut("/*infloop*/for(var constructor; __count__, __parent__ = <><x><y/></x></>; *) \fcontinue ;");
tryItOut("if(({__noSuchMethod__ getter: (false).watch }).throw(<><x><y/></x></> .@*:: <x/>)) { if ((//h\nnew <x><y/></x>\t.(<x/>)())) if(<y><z/></y> ,  \"\" ) throw <x/>; else  if (__proto__) {return false;export __proto__; } else {return; } else {gc() }}");
tryItOut("if([,,].isPrototypeOf(let (prop = __noSuchMethod__, prop =  /x/g ) <x><y/></x>)) let (({ __parent__: ({ __count__: __proto__, prototype: __proto__ }) }), ({ []: [, __parent__, __parent__], prop: ({ __iterator__: __count__ }) })) { ; }");
tryItOut("gc()");
tryItOut("continue L;");
tryItOut("");
tryItOut("/*for..in*/for(const __proto__.__iterator__ in ((Math.sin)(1.3)\f)){/*infloop*/do {yield <><x><y///h\n></x></>; } while( /x/ ); }");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in  /x/g ) export *; } while('fafafa'.replace(/a/g, (1 for (x in []))));");
tryItOut("if(this.__defineSetter__(\"constructor\", function (__parent__) { yield  /x/g  } )) if( /x/g  ?  /x/g  : null ? ((constructor = window).valueOf(\"number\")) : ({__iterator__ setter: (<y><z/></y>).watch })) { if (__iterator__) yield;} else gc()");
tryItOut("throw StopIteration;");
tryItOut("gc()\nlet (__iterator__) { export constructor; }");
tryItOut("var constructor, prototype = false");
tryItOut("\nyield;");
tryItOut("for(let y in []);");
tryItOut("if([z1,,]) { if (constructor = prop) (window); else {constructor, prototype;return this; }}");
tryItOut("do {gc()L:with({prop: <><>__noSuchMethod__ = prop</></>}){return; }//h\n } while((window.eval(false) >>> <x><y/></x>++) && 0);");
tryItOut("{}");
tryItOut("const __iterator__ = arguments;\ncontinue ;\n");
tryItOut("{throw <x><y/></x>;break L; }");
