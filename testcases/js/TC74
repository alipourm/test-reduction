
tryItOut("let (__count__) { /*infloop*/for((new (window)([z1,,],  /x/g )); 'fafafa'.replace(/a/g, <x><y/></x>); window\n) {yield; } }");
tryItOut("yield\nreturn (<><x><y/></x></> ? <x><y/></x> : window);");
tryItOut("{let prop; }export __parent__;");
tryItOut("throw StopIteration;");
tryItOut("yield this.__defineSetter__(\"__noSuchMethod__\", ((prop.__noSuchMethod__ setter= Math.pow)).__defineSetter__);");
tryItOut("yield\n");
tryItOut("/*for..in*/for(let prop in ((gc)(<x/>.prototype = prop ? (__proto__ = false) : (<x><y/></x> + __proto__))))/*infloop*/for([1,,]; @foo;  \"\" ) return;");
tryItOut("let (prototype = <x/>) { /*infloop*/for(let yield = [z1]; <x><y/></x>;  \"\" ) {throw *;{} } }");
tryItOut("let(({ constructor: ({ __iterator__: __parent__ }), __iterator__: __noSuchMethod__\f }), ({ __parent__: ({ (0x99)( /x/g ): __proto__ }) })) ((function(){yield ({ __iterator__: ({ __parent__: __proto__ }) }) = new window();})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in (uneval(__proto__.__defineGetter__(\"__parent__\", function(q) { return q; }))) @ (new (<y><z/></y>)()).@*) {/*for..in*/for(var __noSuchMethod__ = function ([y]) { } in ({})) ; }");
tryItOut(";");
tryItOut("if(new ((<x/>).watch)(<x><y/></x>)) {return\ntrue;/*\n*/do return; while((<><x><y/></x></>) && 0); } else  if ((prop.__proto__ = -1 for each (__iterator__ in this.__defineGetter__(\"__parent__\", Math.sin)) for ( \"\"  & prototype in [] = (<><x><y/></x></>.__lookupSetter__(\"__parent__\"))) if (({this setter: function(q) { return q; } })))) {while((*::*) && 0){{} } }");
tryItOut("throw StopIteration;");
tryItOut("L: if(([eval(\"undefined\", constructor)].map(Function))) __proto__ = arguments;");
tryItOut("\fif(* ? prop : 0) {; }");
tryItOut("L:with({__parent__: [1e+81].some((@foo).apply)})__count__ = <x><y/></x>;");
tryItOut("let (({ __count__: (this.__defineSetter__(\"function::__proto__\", (*).watch)).constructor }) = (function  prototype (__iterator__, __iterator__)<y><z/></y>(( \"\" .unwatch(\"constructor\"))((__parent__ = <y><z/></y>)), gc() >>> eval(\"return;\", false.prop)))) { {throw  \"\" ; } }");
tryItOut("/*for..in*/for(var \r[__proto__,  \"\" ] = window ^= true\t in <x><y/></x>) var __noSuchMethod__ = [z1,,], __proto__;");
tryItOut("M:with(false{window;return;\n\n }/\nif(([].valueOf(\"number\") ^ [,])) break L; else ;\nvar __iterator__ = <><x><y/></x></>;\n");
tryItOut("{}\nthrow <x/>;\n");
tryItOut("while(((new (function (constructor, __iterator__) { yield prototype } )(this, <x><y/></x>))) && 0)<x><y/></x>");
tryItOut("L: {;(<y><z/></y>); }");
tryItOut("export *;");
tryItOut("switch((((-0))[<><x><y/></x></>])) { case 3: L: {<x><y/></x>;constructor; }do {const __noSuchMethod__;yield; } while((*::*) && 0);break; break;  }");
tryItOut("/*infloop*/for(new Number() = (({ set __proto__ __parent__ () { yield (__noSuchMethod__) } , prototype getter: 'haha'.split })).isPrototypeOf((@foo.unwatch(\"__count__\"))); <bbb xmlns=\"(yield (yield @foo *= false))\"><!--yy--></bbb>; this.eval(*::*).isPrototypeOf(([ /x/ .@foo .@ (__noSuchMethod__ = <x><y/></x>) if (__noSuchMethod__)]))) M:if(null) { if (__noSuchMethod__) throw *::*;} else {[z1,,];{} }\nlet (__count__ = let (__iterator__ = <><x><y/></x></>, __proto__) <><x><y/></x></>, __proto__) { __proto__; }\n");
tryItOut("/*infloop*/L:while(__proto__ = @foo === <x><y/></x>)export constructor;");
tryItOut("with({__parent__: <x><y/></x>}){break ;(new Function(\"([,,z1]).watch\")) }\nyield true;\n");
tryItOut("{/*infloop*/for(__parent__ = *;  \"\" ; true) {yield 1e-81;export *; } }");
tryItOut("with((this.__defineGetter__(\"__proto__\", function(q) { return q; }))){break L;L:switch(<y><z/></y>) { default: if(window) ; } }");
tryItOut("with({__proto__: (*\f.__lookupSetter__(\"__noSuchMethod__\").valueOf(\"number\"))})yield __count__\n");
tryItOut("if(prop) export prototype; else  if (<x><y/></x>\f--) {;const __noSuchMethod__; } else {yield <y><z/></y>; }");
tryItOut("/*for..in*/for(let [__iterator__, prototype] = (-0) in ({a2:z2})) {__count__ = false;return null; }");
tryItOut("M:with({<x/>.window: (([[[]] for (constructor in 3)]) ? null >= this : <><zzz>*</zzz></>)}){yield false; }");
tryItOut("with([11,12,13,14].map)gc()");
tryItOut("with({}) {  } ");
tryItOut("with({prop: <x/>})gc()");
tryItOut("M:do throw __count__; while((({ set constructor(prop) { yield #2=<x/> }  })) && 0);");
tryItOut("/*for..in*/for([__count__, __parent__] = 4. % <y><z/></y> in [1]) __parent__, __parent__ = prototype;");
tryItOut("/*infloop*/L:for(let [] = (function(q) { return q; }).call(__count__, (function ([y]) { })()); new <><x><y/></x></>(this); (1.3 || (null.unwatch(\"prototype\")))) __count__;");
tryItOut("yield\n");
tryItOut("M:if( /x/ ) (1 for (x in [])) else  if ((~__noSuchMethod__ =  '' )) /*for..in*/for([prototype, prop] = <x/> in <x><y/></x>) ; const prototype;");
tryItOut("{L:if(<x><y/></x>) { if (<x><y/></x>) yield; else {return; }}; }");
tryItOut("/*infloop*/do {export constructor; } while(__proto__ =  /x/ );");
tryItOut("/*infloop*/L:for(let __noSuchMethod__; [window ? *::* : <><x><y/></x></>].sort(this <= 5.0000000000000000000000.[, , , ])--; ((p={}, (p.z = [({__iterator__: <x><y/></x>, prototype:  /x/  })])()))) {/*for..in*/for(const [__parent__, yield] = (({function::__iterator__: 1e-81 })--//h\n) in prototype = __parent__.__parent__ setter= <><x><y/></x></>) yield __proto__\n }");
tryItOut("yield  '' ;");
tryItOut("with(\n1e+81 >> [1,,]){if((__noSuchMethod__%=window.__iterator__)) {continue L; } }");
tryItOut("/*infloop*/L:for(var ({ prototype: prop, __count__: ({ __iterator__: prototype }) }) = [11,12,13,14].some; (!new RangeError([11,12,13,14].sort, <x><y/></x>)); (<x><y/></x>.(3.141592653589793))) {throw *::*;return this; }");
tryItOut("M:if(__proto__) { if (<><xxx>{prototype}</xxx></>) __noSuchMethod__ = <x/>} else let(__parent__ = yield arguments) ((function(){throw StopIteration;})());");
tryItOut("for(let y in []);");
tryItOut("L: {yield  '' ;M:if(<x><y/></x>) { if (<x><y/></x>) } else {yield #1#;{} } }");
tryItOut("/*infloop*/M:while(case this.zzz.zzz: break; yield;case 3: gc()break; ){yield ; }");
tryItOut("[[1]] = (p={}, (p.z = (+@foo))())");
tryItOut("var __proto__ = <x/>;");
tryItOut("/*for..in*/for([__count__, __iterator__] = * in <><x><y/><\f/x></>) export *;\t");
tryItOut("let([__proto__, prototype, [, , ({ prop: function::each }), ], , ] = <{__parent__}><x><y/></x><!--yy--><ccc:ddd><!--yy--></ccc:ddd></{__parent__}>.(<employee id=\"1\"><name>Joe</name><age>20</age></employee>), prototype = ((<x><y/></x>.isPrototypeOf(*::*))())) ((function(){let(({ prototype: ({ prop: __proto__, constructor: [__parent__, __noSuchMethod__, __count__] }) }), (function ([y]) { })()['__count__'] = [ /x/ ].filter(new Function)) {  set __count__ prototype (prop) { yield } })());");
tryItOut("L:if(.2) throw <x><y/></x\f>; else  if \r(({a2:z2})) export *; else return;");
tryItOut("/*for..in*/for(let [__iterator__, prop] = this.zzz.zzz in  /x/g ) \tlet prop, __proto__;const __iterator__;/ }");
tryItOut("yield window;");
tryItOut("/*infloop*/while(*.isPrototypeOf( /x/g )){{; } }");
tryItOut("if((({ __iterator__: [], __count__: ({ __parent__: prototype, constructor: ({ ({ __proto__: constructor }): ({ __iterator__: constructor }) }) }) }) = prop).eval( /x/ )) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__; in (-0)) let __proto__, prototype = {};");
tryItOut("break ;");
tryItOut("/*for..in*/L:for(const constructor = <y><z/></y>.@* in <x><y/></x>) yield *::*;");
tryItOut("L:with(Error()){export __iterator__; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; ; ) {{}export __parent__; }");
tryItOut("{__count__: [false]\n/*for..in*/for(let [__noSuchMethod__, prototype] = <x><y/></x>.(<x><y/></x>).__lookupGetter__(\"constructor\") in prop) {export prototype;throw undefined; }\n }");
tryItOut("yield \t(*::*);");
tryItOut("export *;let __count__ = -1;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = ((eval(\"<><x\\t><y/></x></>\", 1.3)).throw(this)) in 0.1) {/*infloop*/for(const __proto__; ((@foo).__lookupSetter__(\"__proto__\")); __noSuchMethod__.__proto__ = constructor) {continue ;return *; } }");
tryItOut("/*for..in*/for(const ((__parent__)) in (({prototype: 0x99.__proto__, __iterator__ setter: Math.sin }))) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__(*) in \n@foo) {/*for..in*/for(__proto__ = this.__defineGetter__(\"prototype\", <><x><y/></x></>) in <x><y/></x>) {function(y) { yield y; (<><x><y/></x></>);; yield y; } } } }");
tryItOut("if(#1=[#1#]) do /*for..in*/M:for(let [__noSuchMethod__, __iterator__] = <x><y/></x> in <x/>) //h\n{__noSuchMethod__;__count__ = <><x><y/></x></>; } while(((*::*.unwatch(\"delete\"))) && 0); else  if ({}) {break ;\nlet (<x><y/></x>) { var __iterator__ =  /x/ ; }\n }");
tryItOut("const prop;\n(1 for (x in []))\n");
tryItOut("L: {return (-1)throw 1e4; }");
tryItOut("{}\nyield <><x><y/></x></>;");
tryItOut("/*infloop*/do ((window)(this) for (__noSuchMethod__ in 5.0000000000000000000000) for (prototype in <x><y/></x>)) while(<x><y/></x>.hasOwnProperty(\" \\\"\\\" \"));");
tryItOut("switch(<><bbb xmlns=\"(--)\"></bbb></>) { default:  }");
tryItOut("if(<><x><y/></x></>) return\n");
tryItOut("while((((yield ((prototype) = 033)))) && 0){__parent__, __iterator__; }");
tryItOut("/*for..in*/L:for(const __proto__ in ((({}).__lookupGetter__)(this.zzz.zzz)));");
tryItOut("{if(new ( /x/ )(<y><z/></y>)) {(function ([y]) { });return window; } else  if ((uneval(<><x><y/></x></>))) ; else {({a1:1}); }yield <y><z/></y> /= let (__parent__)  \"\" ; }");
tryItOut("default: throw <x><y/></x>;break; case [,]: return;break; case 1: throw  /x/g ;break; case 8: break; L:if('haha'.split().yoyo((<x><y/></x>.__count__).@foo)) {let prototype = __count__, __count__ = <><x><y/></x></>;; }");
tryItOut("__count__;");
tryItOut("if(this.__defineGetter__(\"__count__\", (<x><y/></x>).apply)) {return;/*for..in*/for(constructor = constructor = <><x><y/></x></> in <x/>) (<x><y/></x>); }");
tryItOut("L:while((window) && 0)throw prototype;");
tryItOut("with({}) throw __proto__;");
tryItOut("let ([, [, ({ prop.__parent__: __noSuchMethod__ }), ({ prop: ({ constructor: __parent__, __proto__: __iterator__ }) }), ({ prop: ({ __proto__: constructor }) }), ], , ]) { export *; }");
tryItOut("/*infloop*/do return; while(<x><y/></x>.__lookupSetter__(\"constructor\").hasOwnProperty(\"__count__\"));");
tryItOut("let (__iterator__) { gc() }");
tryItOut("with({__noSuchMethod__: -1.watch(\"__count__\", this)});");
tryItOut("with({prototype: ( /* Comment */<><x><y/></x></> = <><x><y/></x></> >>> Boolean())}){var __proto__;true; }");
tryItOut("({ __noSuchMethod__: __iterator__ })");
tryItOut("L:with({prototype: 'fafafa'.replace(/a/g, )})if(<><x><y/></x></>.unwatch(\"prop\")) { if ((function(q) { return q; }).call(false\n, [[, ], __iterator__ for each (__parent__ in <y><z/></y>)], false)) {throw __iterator__;prototype } else Math.sin}");
tryItOut("{/*infloop*/M:while( /* Comment */*){continue L; } }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in *.__lookupGetter__(\"prop\")) {/*infloop*/M:for([<x/>].__defineGetter__(\"__proto__\", (new Function(\"gc()\"))); (({}).eval(this))//h\n; (@foo.__lookupGetter__(\"prop\"))) {throw <x/>; } }");
tryItOut("/*for..in*/for([__count__, __parent__] = (null.propertyIsEnumerable(\"constructor\")) in true) ");
tryItOut("with({}) { gc() } ");
tryItOut("if((this.zzz.zzz << window.isPrototypeOf(this.*))) {gc()\nyield;\n } else if( '' .isPrototypeOf(<><x><y/></x></>)) {continue ; }");
tryItOut("do {Function } while((true) && 0);with(<y><z/></y>)return @foo; const __proto__;");
tryItOut("if(({ prop: constructor }) = [1][<x><y/></x>] == ((function  __noSuchMethod__ (__parent__) { (*::*); } ).call(([<><x><y/></x></> for (prototype in <x><y/></x>)]), constructor = #1=[#1#]))) {if([,,z1]) { if (((uneval(<><x><y/></x></>))) -= 5.0000000000000000000000) /*for..in*/L:for(const prop in ((<><x><y/></x></>)(this)\t)){return __iterator__;return false; }} else {(@foo);const constructor; } }");
tryItOut("for(let y in []);/*for..in*/for([prototype, prototype] = ('haha'.split) in prop) {return; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = -0 in __count__) {gc() }");
tryItOut("let (__noSuchMethod__ = <y><z/></y>) { M:if((<><x><y/></x></> & false)) { if (#0=<bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>) return; else {export __count__;window; }} }");
tryItOut("continue L;");
tryItOut("L: /*infloop*/for( \"\" .__lookupSetter__(\"__count__\").@*; (<y><z/></y>)[*::*]; (p={}, (p.z = new ([1,2,3,4].map)\t(constructor))())) {__parent__;this; }");
tryItOut("while((__count__ =  /x/ ) && 0){continue L;switch(1e+81) { case __noSuchMethod__: __parent__ =  /x/ ;break;  } }");
tryItOut("throw function::__count__;");
tryItOut("const constructor ^= (yield (-1)) = __iterator__;");
tryItOut("/*infloop*/for(let ({ __iterator__: ({ constructor: ({ prototype: ({ prop: constructor }), __parent__: ({ constructor: prototype }) }) }), prop: prop }); <zzz>this</zzz>; ((p={}, (p.z = constructor.prototype setter= (1 for (x in [])))()).__defineGetter__(\"__noSuchMethod__\", (@foo).apply))) /*for..in*/for(let [constructor, __iterator__] = [1] in [,,]) /*for..in*/for(let __proto__ in ((undefined)(0.1\n)))\fcontinue M;");
tryItOut("return;");
tryItOut("/*for..in*/for(let [__iterator__, prototype] = *::* <=  /x/  in *) export __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in <><x><y/></x></>) {yield [[1]];var __count__ = false; }");
tryItOut("<bbb xmlns:ccc=\"([(eval(\"<x><y/></x>\", 0)) for each (__proto__ in <y><z/></y>) for (__noSuchMethod__ in <x><y/></x>)] % __parent__.__iterator__ = ([11,12,13,14].filter).prototype)\"><ccc:eee></ccc:eee></bbb>\nif( /x/ .__lookupGetter__(\"setter\")) { if ((new (new Function(\"__noSuchMethod__, __parent__ = null;\"))())[new ({}).hasOwnProperty(([z1]++), *::*)]) ;} else (*::*);\n");
tryItOut("if(({a2:z2})) { if ((!(-0) ^= <><x><y/></x></> / <x><y/></x>.(*))) throw <x/>; else {{}{} }}");
tryItOut("/*for..in*/for(prop.__noSuchMethod__ in <><x><y/></x></>) /*for..in*/for(var constructor in  \"\" ) continue L;");
tryItOut("L:if([15,16,17,18].map(function (constructor, __proto__) { return <y><z/></y> } , (Math.sin)().@*)) yield [z1,,]; else {constructor }");
tryItOut("/*infloop*/M:for(const __proto__; (((window)(<><x><y/></x></>))++); *) {return null.__lookupGetter__(\"__count__\"); }");
tryItOut("if( /x/g ) {; } else {return __noSuchMethod__;export *; }");
tryItOut("L:do (window); while((#0=({prototype: (1e+81.@*)})) && 0);");
tryItOut("if(<> </>yyy) { if ((gc([,,z1],  /x/ ))) {yield *::*; } else {return;throw constructor; }}");
tryItOut("while((new this.propertyIsEnumerable(\"prop\")) && 0)/*for..in*/for(prop = (*\f.unwatch(\"__noSuchMethod__\")) in ([] = <><x><y/></x></> * [,])) {[1];/*infloop*/do <><x><y/></x></> while(<><x><y/></x></>); }");
tryItOut("export __count__;");
tryItOut("/*infloop*/for(const __proto__;  /x/ .__proto__; (p={}, (p.z = 'fafafa'.replace(/a/g, function (__noSuchMethod__, getter) { return @foo } ))()) && ([({a2:z2})])) {<x><y/></x>; }");
tryItOut("with({__parent__: prototype}){throw <y><z/></y>\n; }");
tryItOut("for(let y in []);");
tryItOut("if((( \"\"  !== 3/0) - (uneval(this)).yoyo(undefined))) let __proto__, __noSuchMethod__; else return;");
tryItOut("if(new (this)([z1], -0).valueOf(\"number\")) { if ((__iterator__ = window)) gc()} else return  /x/ ;\nM:if(false , null) { if (this .. *) throw  /x/ ; else ( /x/ );}\n");
tryItOut("switch((constructor+=throw <x><y/></x>)) { default: break; yield\ncase 1:  }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <><xxx {prop}={(__count__ =  \"\" .propertyIsEnumerable(\"constructor\"))} /></> in (function  __parent__ () { return; } )()) /*infloop*/for(({ __count__: ({ __proto__: ({ constructor: __parent__, __count__: __count__ }), __noSuchMethod__: constructor }), __noSuchMethod__: [] }) = <><x><y/></x></>--.@*; __noSuchMethod__.prototype setter= function  __parent__ (prototype, prototype) { return  \"\"  } ; function::prototype =  ''  |= <><x><y/></x></>\n) var __count__ = 0/0, constructor = *::*;");
tryItOut("if( \"\"  |= [z1]) { if (yield <y><z/></y>) {return function(id) { return id }; } else __proto__ = <><x>//h\n<y/></x></>;}");
tryItOut("__count__ = prop;");
tryItOut("/*for..in*/L:for(let __parent__ = <>prop</> in <><x><y/></x></>) throw <x><y/></x>;");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __noSuchMethod__] = (function::__noSuchMethod__ = [1]) ===  '' .throw(<><x><y/></x></>) in __proto__ = ({ prototype: prototype })) ");
tryItOut("/*infloop*/for(window; eval(\";\", ([<><x><y/></x></>])) if ((prop = @foo)); ((<><x><y/></x></>--).__defineSetter__(\"__parent__\", (eval).call))) __noSuchMethod__;");
tryItOut(";M:if(((window))[__count__/*]) return;");
tryItOut("/*for..in*/for(let prop = this.watch(\"__count__\", Function)__iterator__ (1 for (x in [])) ) /*infloop*/while(0/0)Function");
tryItOut("while(([,,]) && 0)return arguments;");
tryItOut("/*infloop*/for(const __noSuchMethod__;  '' ;  /x/g ) {M:with({__parent__: constructor}); }");
tryItOut("/*for..in*/for(let [prop, __count__] = (function  __iterator__ (__proto__, __proto__) { return <><x><y/></x></> } )() in [15,16,17,18].sort(Function, prototype).__iterator__) throw <><x><y/></x></>\nreturn 4.;");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <y><z/></y>) {yield <x><y/></x>; } } while(([*::*].sort((new Function(\"return  /x/ ;\")))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(eval in 1e+81) ;");
tryItOut("let (__proto__ = __iterator__, /a/gi) { return  /x/ ; }");
tryItOut("M:with(window){throw <x/>;return *::*; }");
tryItOut("/*for..in*/for(var __iterator__ = prototype-- ? (+*.watch(\"constructor\", (<x/>.prototype).watch)) : constructor =  /* Comment */1e-81 in __proto__.__count__ getter= (<><x><y/></x></>).__defineSetter__) yield; const __parent__;");
tryItOut("L:while(((({constructor: 'haha'.split}))) && 0){let (__parent__) { {} } }");
tryItOut("if(this.zzz.zzz[ ''  % (this >>= #1=[#1#])]) {break M;switch(~true) { case (yield <x><y/></x>): break;  } } else {switch(++function ([y]) { }) { case 5: break;  } }");
tryItOut("if(null.__lookupGetter__(\"__noSuchMethod__\")) {yield; } else  if ((prop.unwatch(\"__noSuchMethod__\") /= new [])) {/*infloop*/for( '' \n; __parent__ = (uneval(<x><y/></x>)); <x><y/></x> |= constructor) export *;if(~ \"\" ) { if (this) ; else export __count__;} }");
tryItOut("L: with(({a2:z2}))continue ;");
tryItOut("/*infloop*/for(const *; prototype * (({__proto__: <><x><y/></x></>, __iterator__:  ''  })); (let (__iterator__) <y><z/></y>)) {/*infloop*/L:do {var __noSuchMethod__, __noSuchMethod__ =  /x/g ; } while(<x><y/></x>);/*infloop*/M:while(3/0 < function::__count__){throw [[]];; } }");
tryItOut("while(([this]) && 0)(3.141592653589793);");
tryItOut("yield <x><y/></x>;");
tryItOut("{; }\n const __iterator__\n");
tryItOut("M:if(prop = prop;) {export prototype;; } else __count__;");
tryItOut("/*infloop*/L:for(x::function::prototype; ( \"\" )([z1]); (prototype = 0x99)) {/*infloop*/for(const prototype = this; <y><z/></y>; <x><y/></x>) {return  '' ; }M:if(1e-81) yield -1\f; else  if (*::*) yield <x><y/></x>; else let __proto__ = this; }/*for..in*/for(const [prop, constructor] = <x/>.propertyIsEnumerable(\"__parent__\") in  /* Comment */ \"\"  @  /x/ ) if(window) function ([y]) { }; else  if (this) yield {}; else {return; }");
tryItOut("yield __count__;");
tryItOut(" if (~*++)");
tryItOut("with({__proto__: ({}).hasOwnProperty\f}){throw ;return *; }");
tryItOut("let __parent__ = <x><y/></x>, __count__");
tryItOut("export __proto__");
tryItOut("{break M; }");
tryItOut("if(prototype) try { return; } catch(prototype) { __proto__ } finally { var __noSuchMethod__ = [[]], __noSuchMethod__; }  else  if (<>__proto__</>) function(y) { yield y; __iterator__ =  /x/g ;; yield y; } else return *;");
tryItOut("/*for..in*/for(var yield in ((function(y) { yield y; if(0.1) return (-1); else export __noSuchMethod__;; yield y; })(((prototype = this).@foo)))){return; }");
tryItOut("export constructor; const __iterator__;");
tryItOut("{(-1); }");
tryItOut("let (constructor, __proto__ = 1e-81 / <xxx>{__count__}</xxx>.__defineSetter__(\"__iterator__\", eval)) { /*for..in*/for(const __count__ in ((new Function)(prop[({a2:z2})]))){<x/>;yield [,]; } }");
tryItOut("M:with({({ constructor: ({ prototype: prototype, __parent__: ({ __proto__: prop, [({ __proto__: ({ __iterator__: __count__ }), prop: ({ __proto__: ({ prop: prototype, __parent__: ({ __parent__: __count__ }) }), __count__: ({ prop: [prop, __proto__], constructor: prototype }) }) }), ({ __parent__: ({ __proto__: ({ __parent__: ({ __noSuchMethod__: __count__, prototype: prop }), prop: __count__ }) }) }),  if (null)]: ({ prop: [, ], __proto__: __proto__ }) }) }) }): new (function(y) { yield y; if(<><x><y/></x></>.eval(<x><y/></x>)) {gc() } else  if ( /* Comment */window(<><x><y/></x></>.isPrototypeOf(033),  /x/ )) {export *;function  __proto__ ()<><x><y/></x></> } else let prop, __noSuchMethod__;; yield y; })()});");
tryItOut("/*for..in*/for(let constructor(@foo) in /*((__noSuchMethod__.__noSuchMethod__ setter= \ffunction () { yield (yield <x><y/></x>) } )( { yield <x><y/></x>++ }  && <x><y/></x>))){let prototype = prototype =  '' , __count__ = (function ([y]) { })(), __parent__ = prototype; }");
tryItOut("with({__iterator__: Date( /x/ , __proto__)}){const __parent__, constructor = false;throw <x><y/></x>; }");
tryItOut("L: {export constructor;/*infloop*/M:do {} while\f(__parent__); }");
tryItOut("M:while((((<><x><y/></x></>)/*({a1:1}), window))) && 0){/*infloop*/for(var prototype = <x><y/></x>; undefined; <>constructor<\f/>) {return [z1,,]; } }");
tryItOut("if((function  __count__ (prop) { yield new (this)(constructor) } ).call(({: <x><y/></x>, prototype = //h\n<><x><y/></x></>, prop = [1] }).__lookupGetter__(\"prototype\"), __parent__.(<><x><y/></x></>), -3/0.__defineGetter__(\"constructor\", [z1]))) { if (__iterator__.constructor setter= <x><y/></x>(this, #0=({prop: *})) &= <><xxx {__parent__}={(function::__proto__ = <x><y/></x>)} /></>) /*infloop*/for(let __parent__\f = ({a2:z2}); <y><z/></y>; <><x><y/></x></>) {} else {var __iterator__ = (function ([y]) { })();with( /x/ )return; }}");
tryItOut("with(undefined)return [1];/*for..in*/for(prop in <y><z/></y>) ");
tryItOut("M:do {with(){break L; } } while(() && 0);");
tryItOut("/*for..in*/for(__proto__.prop in (__parent__ = <><x><y/></x></> ^= <y><z/></y>)) {/*infloop*/for(var constructor; (__proto__ ^ undefined); (constructor = .2)) {Q }/*for..in*/for(const constructor in <x/>) __count__; }");
tryItOut("do {/*infloop*/while(<x><y/></x>.(<y><z/></y>))yield *::*; } while((( '' prop).__lookupSetter__(\"__noSuchMethod__\")) && 0);");
tryItOut("/*for..in*/for([get, constructor] = <x/> in prop = (__proto__.__parent__)) __iterator__, prototype");
tryItOut("M:if(<x><y/></x>.hasOwnProperty(\"__parent__\")) \n else  if (#0=prop) const __count__;");
tryItOut("throw __parent__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("{throw 3/0; }");
tryItOut("with({prop: prototype = prototype})");
tryItOut("constructor;\n;\n");
tryItOut("L:if({})  else  if (__proto__) return <y><z/></y>; else return  \"\" ;");
tryItOut("/*for..in*/for(let constructor =  \"\" .* in *::*) {return .2; }");
tryItOut("/*infloop*/for(__proto__;  /x/  ?  /x/  : *.isPrototypeOf(prototype % [1,,]); <x><y/></x>[window]) {function(q) { return q; } }");
tryItOut("[,];");
tryItOut("export prop\n<y><z/></y>;");
tryItOut("let (constructor) { /*for..in*/for(var {}['__parent__'] in constructor.__iterator__ setter= function  prototype (__count__, __count__) { return; } ) __noSuchMethod__ = false, __parent__ = __iterator__; }");
tryItOut(".constructor = __count__;");
tryItOut("throw StopIteration;/*infloop*/M:for(<!--yy-->.__lookupSetter__(\"prototype\"); true; ((eval(\"gc() const constructor;\", @foo.prototype = this)).__lookupGetter__(\"__iterator__\") ? ((<x/>)) : this.__defineGetter__(\"__iterator__\", 'haha'.split))) {let prototype = __iterator__, prototype; }");
tryItOut("{<><x><y/></x></> > *; }");
tryItOut("/*infloop*/M:do if(*) throw <x><y/></x>; else throw [,]; while((__iterator__.__noSuchMethod__ = (this.*)));");
tryItOut("/*for..in*/for(var [get, __count__] = (0/0.eval(<x><y/></x>).propertyIsEnumerable(\"__iterator__\")) in __noSuchMethod__ = *::*) x::__iterator__;export __proto__;");
tryItOut("/*infloop*/M:for(this.__defineSetter__(\"function::constructor\", [1,2,3,4].map); false; new ((new String(<y><z/></y>, [[]])))(({__count__: undefined }), (new /a/gi()))) {; }");
tryItOut("throw __iterator__;");
tryItOut("with({__proto__:  '' })let __iterator__;");
tryItOut("while((__iterator__ = -3/0--) && 0)if(\n<x><y/></x>) { if (new (eval)(<><x><y/></x></> >>= window, <x><y/></x>)) {(<y><z/></y>).__defineSetter__ }} else {(<y><z/></y>);export __iterator__; }");
tryItOut("/*for..in*/for(let __proto__ in (([1,2,3,4].slice)(<x/>)))gc()");
tryItOut("throw false;");
tryItOut("export *");
tryItOut("with(window()){(new Function).apply#1=[#1#]\nexport __iterator__;\n }");
