tryItOut("/*for..in*/M:for(var __count__ = <x><y/></x>[<x/>].valueOf(\"number\") in (p={}, (p.z = [null].filter(<x><y/></x>))()).unwatch(\"__iterator__\")) if(__parent__.__proto__ = (\n__count__)) { if (window.propertyIsEnumerable(\"__count__\")) __iterator__ = null, __noSuchMethod__ = <><x><y/></x></>; else if(prototype) { if (arguments) gc()} else ;}");
tryItOut("M:with(<x/>.isPrototypeOf(false).isPrototypeOf(*.@foo)){export *;export *; }");
tryItOut("with({}) continue M;");
tryItOut("const prototype\nswitch(((<x/>.__defineGetter__(\"prototype\", (/a/gi).call))((#0=[0.1 .@ <><x><y/></x></>])))) { case 2: default: throw *::*;case [1,,]: break;  }");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = [, __noSuchMethod__, __iterator__] = [,,z1].unwatch(\"prop\") in <><zzz>this.@foo</zzz></>) {var __count__ = window\n{}\nconstructor; }");
tryItOut("/*infloop*/do L:if((*::*(*::*))) continue ; else  if (({prop: constructor })) {;let __proto__; } else var constructor, prop; while((p={}, (p.z = <x/>)()).__iterator__ .. (new (<y><z/></y>).__defineSetter__(0, true).eval( \"\" .propertyIsEnumerable(\"prop\"))));");
tryItOut("return;");
tryItOut("throw StopIteration;");
tryItOut("throw __proto__;");
tryItOut("do {<x/>; } while((*::*.watch(\"__iterator__\", [1,2,3,4].slice) for each (prop in <><x><y/></x></>) for (__noSuchMethod__ in *).__lookupGetter__(\"__proto__\")) && 0);\ngc()if([1,,]) { if ((-1)) return false;} else var __parent__;\n");
tryItOut("L: const __parent__, __proto__ = *;");
tryItOut("M:with(*::*){(<x><y/></x>).watch__noSuchMethod__ = <x/>, __noSuchMethod__ =  '' ; }");
tryItOut("/*infloop*/L:for(__proto__ setter: ({}).__lookupGetter__; <y><z/></y>; <x><y/></x>) {let prop, __parent__ = [[]]; }");
tryItOut("if((<x/>.unwatch(\"__count__\")).__iterator__ = constructor = (function (__noSuchMethod__, function::__noSuchMethod__) { (<x/>).watch } ())) {const __count__ = __parent__, __iterator__ = true; } else  if ([11,12,13,14].filter) M:if(*.throw(<y><z/></y>)) break M; else  if (this ?  \"\"  : this)  else {yield ({}); }");
tryItOut("if((__parent__.@foo)) return; else  if (<><ccc\f:ddd> </ccc:ddd></>) export __count__; else @foo;");
tryItOut("if(({a1:1})) {(true).call } else while((prototype) && 0){constructor;*::*; }");
tryItOut("{L:if(<x><y/></x>) continue L; else {1.2e3;continue L; }return; }");
tryItOut("continue \nyield undefined;\nyield {};\f\n");
tryItOut("let (__parent__) { /*infloop*/L:for(let constructor; *\n; (new (window)())) /*\n*/gc() }");
tryItOut("/*for..in*/for(let \n[prototype, __iterator__] = ([[]].__lookupGetter__(\"prototype\")) in *) {}");
tryItOut("let (__count__ = @foo >> constructor) { let case .2: export *;break; case 2: const __proto__, __iterator__;break; case 1: throw window;default: gc()break; break; case <><x>\t<y/></x></>: throw *;break M;break; break; break; case __parent__: break; case 5.0000000000000000000000: case 6: break; case 1: , __parent__ = <x><y/></x>; }");
tryItOut("\nif(__count__) yield;");
tryItOut("/*for..in*/L:for(let \f[prototype, __count__] = gc(#1=[(prop.(*))]) in __count__+=true) L: new Function");
tryItOut("{(function ([y]) { });\texport __proto__; }");
tryItOut("if(( ''  * undefined)) export __count__; else  if (( /x/ .eval( /x/g ))) prop = *, __iterator__;");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, x::prop] = (new <x/>()) in __parent__.__iterator__ getter= [1,2,3,4].slice) {__iterator__;export prototype; }");
tryItOut(";(<y><z/></y>)");
tryItOut("if(let (__count__) [1,,]) constructor; else  if ((prop =  \"\" )) {}");
tryItOut("L: __proto__");
tryItOut(";");
tryItOut("do {export prop; } while((false) && 0);");
tryItOut("/*infloop*/M:for(const ({ __parent__: prop }) =  ''  %  /x/ ; prop = <bbb xmlns:ccc=\"<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", <x><y/></x>\t(window, <><x><y/></x></>), 1.2e3)\"><ccc:eee></ccc:eee></bbb>; function(id) { return id } || (function ([y]) { })()) export *\nif(prop) {prototype = <><x><y/></x></>, constructor;var __parent__ = prototype; } else  if (constructor) export *;");
tryItOut("let([3.141592653589793(__proto__, <><x><y/></x></>), , ] = undefined, [__parent__, , ]) ((function(){let(constructor = yield (__parent__\n)) { throw StopIteration;})());");
tryItOut("this.zzz.zzz;");
tryItOut("do /*for..in*/for(const [__iterator__, __proto__] = @foo.__lookupGetter__(\"prop\").__parent__ in __proto__) {return;yield @foo; } while(((__proto__ = constructor)) && 0);");
tryItOut("L:if(let (prototype) <><bbb xmlns=\"function::prop\">yyy</bbb></>) { if (<!--yy-->) {;export *; } else {var __parent__, constructor = <x><y/></x>;Function }}");
tryItOut("L: {gc() }");
tryItOut("yield @foo;");
tryItOut("/*infloop*/do {const __count__; } while(* @ prototype);");
tryItOut("/*for..in*/for([__parent__, __parent__] = constructor in <><> </></>\f) {(undefined).apply }");
tryItOut("(new (Function)(1e+81));");
tryItOut("with({}) { const __proto__; } ");
tryItOut("{/*infloop*/while(<x><y/></x>){ try (__proto__).watch } }");
tryItOut("L:while((*) && 0){/*for..in*/for(let __proto__ in ((function(y) { yield y; continue M;; yield y; })(({ get __count__ prop () { yield constructor } , __iterator__: .2 }))))propif([prototype for (__count__ in ({}))]) {return @foo; } else {const constructor = <x/>, prototype;throw <x><y/></x>; }\n*\n }");
tryItOut("/*for..in*/for([__proto__, let] = __proto__.__lookupSetter__(\"__parent__\") in gc()) continue ;");
tryItOut(" const __proto__;");
tryItOut("/*infloop*/for(const __proto__; new <y><z/></y>(); (({__noSuchMethod__: window }))) if(prototype) {__parent__ = *::*, __proto__;export *; } else  if (\f<><x><y/></x></>) {var constructor;__parent__ = <><x><y/></x></>, __parent__ = 1e-81; } else __iterator__, __iterator__ = <y><z/></y>;");
tryItOut("M:if(*) { if ((prop = __proto__)) \f{break M; } else {L:if(~-3/0) { if (*.__lookupSetter__(\"__noSuchMethod__\")) yield <x><y/></x>;} else {export __iterator__; }function(q) { return q; }\nreturn *;\n }}");
tryItOut("yield (let (prototype = <><x><y/></x></>, constructor) prototype = prop);");
tryItOut("with({}) { with({}) this.zzz.zzz; } ");
tryItOut("export prop\nlet(({ prop: function::__count__, __noSuchMethod__: [({ prototype: __proto__, __count__, __count__: prop }), prototype] })) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(const __proto__; (<x/> > <y><z/></y>) << <x><y/></x> ^ @foo--; __proto__) eval(\"<x><y/></x>\", <><x><y/></x></>)");
tryItOut("yield (({}) | [z1]);Math.pow\n");
tryItOut("with(__parent__ = __count__-=3.141592653589793 @ __proto__)if(* === false) { if ((undefined.__defineGetter__(\"__parent__\", function(y) { yield y; continue ;; yield y; }))) { \"\" ; } else (null);}let __count__;");
tryItOut("if((__proto__.prop)) {M:while((#1#) && 0){const __parent__, prop; }gc() } else yield  /x/ ;");
tryItOut("(5.0000000000000000000000);");
tryItOut("/*infloop*/for(__noSuchMethod__ = <><x><y/></x></> / false; new (window)(); (new (*::*)(<><x><y/></x></>, undefined))) {export prop;export constructor; }");
tryItOut("return (({__proto__ getter: new Function }));");
tryItOut("switch(0) { case (<><x><y/></x></>): /*infloop*/L:for(let ({ : '({ __noSuchMethod__: ({ __parent__: ({ 1e+81.unwatch(\"prop\"): [, ], prototype: [] }), __parent__: [({ set: [, prop, ] }), ({ x::__count__: ({ __count__: __noSuchMethod__ }), __iterator__: __proto__ }), ({ __parent__: ({ prop: prop, prop: prop }) })] }), __iterator__: ({ __count__: __count__, constructor: ({ __iterator__: [, , ({ prototype: __parent__ })] }) }) }) } prop) = constructor.__proto__ getter= function  __count__ () { -3/0; } ; (__iterator__.(1.3 <=  \"\" )); __noSuchMethod__ = Function([z1,,]).throw(var __parent__)) {{windowL:while((arguments) && 0){throw <x/>; }\n\n } }break; case 7: break; case ({ get __proto__() { return <><x><y/></x></> }  })[<><x><y/></x></>]: break; case 2: if(<y><z/></y> === @foo) { if (<>yyy</>) {constructor, __proto__ = window; } else ;}break; default: for(let y in []);break; break; case 0: /*infloop*/for(prototype; __parent__ = ({}); (__count__ = (-1))) yield (-0);__parent__;case (this.__defineGetter__(\"prototype\", <x><y/></x>)): :\fif(([11,12,13,14].map .@x:: (__proto__ = true))) { if (new ( ''  <<= -)(@foo | null, <x><y/></x>)) yield false; else {yield [,,]; }}case 6: if((prototype = prop)) { if (({constructor: <x/>})) __parent__, __proto__; else {<><x><y/></x></>; }}prototype =  /x/ , ; }");
tryItOut("/*infloop*/while((this.zzz.zzz))export yield;");
tryItOut("with({__noSuchMethod__: (prototype = [,])}){yield <x/>;var prototype; }");
tryItOut("if(window.__defineSetter__(\"constructor\", gc)) { if (__parent__) {return <x><y/></x>; } else return;}\n");
tryItOut("M:if(<y><z/></y>) yield window");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in undefined) {yield __iterator__ setter: /a/gi;{} }");
tryItOut("/*infloop*/for(var __iterator__; [window].some(function  __count__ () { yield <x><y/></x> } ); ({ __iterator__: ({ prop: prototype, constructor: __count__ }), __noSuchMethod__: ({ __count__: __noSuchMethod__ }) })) {gc() }{}\nthrow <><x><y/></x></>;\n");
tryItOut("throw <><x><y/></x></>; const __noSuchMethod__;");
tryItOut("with({__parent__: eval(\"window;\", (<y><z/></y> >>= constructor))}){/*infloop*/M:for((*::*[<><x><y/></x></>.__parent__ = ( /* Comment */prop)]); (<x><y/></x> .@  /x/ ); ) export *;if(#1=[#1#]) { if (1e+81) __count__} else {(prototype: window); } }");
tryItOut("/*infloop*/L:for(const [__noSuchMethod__, , constructor, , __proto__] = ({a2:z2}).eval(@foo); (uneval(window)); <><x><y/></x></>.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) return;");
tryItOut("{}");
tryItOut("if([__iterator__] =  ''  >> 5.0000000000000000000000.valueOf(\"number\") @ (<y><z/></y> << #3={a:#3#})) return;while((__iterator__) && 0)gc() else  if (<><xxx {prop}={__proto__} /></> *= __noSuchMethod__ = [z1,,]) /*infloop*/while(.2); else return\nvar prop;do export *; while(( /x/ ) && 0);");
tryItOut("/*for..in*/for(var __proto__ in ((/a/gi)(<x><y/></x>))){{} }");
tryItOut("M:with({<y><z/></y>.__iterator__: [yield ((1 for (x in [])))(this.__defineGetter__(\"prop\", eval));].map('haha'.split)})export __iterator__;");
tryItOut("/*for..in*/for(const prototype in \r[1]) ;");
tryItOut("");
tryItOut("{let prop;L:if(this.*) {yield <x><y/></x>; } else  if ((eval(\"<><x><y/></x></>\", *::*))) {export *;function  __iterator__ () { yield __parent__ }  } else {gc() } }");
tryItOut("/*infloop*/for(__proto__; <><><x><y/></x> instanceof [] .@*:: [1,2,3,4].map()</></>; this for each (__proto__ in 5.0000000000000000000000)) @foo const __noSuchMethod__;");
tryItOut("/*infloop*/M:for(new RegExp(({get: <><x><y/></x></> }), this).valueOf(\"number\"); new Iterator(prop.valueOf(\"number\"),  /x/g ); ([15,16,17,18].filter(new Function, <x><y/></x>--.valueOf(\"number\")))) L: {var constructor = #3={a:#3#}, __parent__; }");
tryItOut("/*infloop*/do /*infloop*/L:for(__parent__ = (prop)(<x><y/></x>, <x><y/></x>); <x/>.eval(<y><z/></y>).hasOwnProperty(\"constructor\"); \t[(yield <><x><y/></x></>)].map(function  function::__count__ (__noSuchMethod__) { gc() } )) {\tif(*::*) break L; else {return true; } } while(~*::* *= this);");
tryItOut("with({prop: -0.__defineGetter__(\"__count__\", Math.sin)})yield; const __proto__\n");
tryItOut("/*infloop*/M:for(const __count__; prop = constructor.(<x/>(<x/>).prop = __parent__ in  /x/ ); @foo.__proto__ getter= 1e+81.__defineSetter__(\"__proto__\", (<y><z/></y>).apply)) {if(;.__proto__ = window) \freturn *::*; else  if ([11,12,13,14].map) throw 0/0;\flet __proto__ = null, prototype = ({a1:1}); }");
tryItOut("return __noSuchMethod__;");
tryItOut("/*for..in*/for(const set in <x><y/></x>\t) {{} }");
tryItOut("if(( /x/ ).apply) /*infloop*/for((<x><y/></x> if (this)); <x><y/></x>.@foo.propertyIsEnumerable(\"__proto__\"); @foo) {; } else  if (window) {return;/*infloop*/for(@foo; [(uneval(<><x><y/></x></>/*\n*/)) for each (prototype in <x/>) for each (__noSuchMethod__ in  /x/ )]; 0) const prototype, __proto__ = (-1); } else {throw window; }");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] = (yield (__count__ = *::*)) in eval(\"{}\", null)) do { } while(((this.__defineSetter__(\"__proto__\", function(y) { yield y; return;; yield y; }))) && 0);");
tryItOut("L:while((<><x><y/></x></>) && 0){return prototype;return <><x><y/></x></>; }(<><x><y/></x></>);");
tryItOut("while((__parent__.(window) ? (eval(\"export *;\", <x><y/></x>)) : \nthis) && 0){with({}) { throw __noSuchMethod__; }  }");
tryItOut("M:while(([11,12,13,14].map) && 0){export *; }");
tryItOut("throw this; const __iterator__;");
tryItOut("let(__iterator__ = ([0])) { prop = (\n[z1,,]);");
tryItOut("if( /x/  &  /x/g ) { if ([z1,,]) {with({}){__noSuchMethod__ = 1.3;var __count__ = __count__, __count__ = this; } } else {const prop = __iterator__; }}");
tryItOut("{yield <x><y/></x>;yield; }");
tryItOut("/*infloop*/for(033; *; 1.3) throw true;");
tryItOut("/*for..in*/for(var __noSuchMethod__([,]) in ((function(q) { return q; })([15,16,17,18].filter(function () { yield [1,,] } , false)))){__noSuchMethod__;continue ; }");
tryItOut("switch(new RegExp()) { default:  /x/g break;  }");
tryItOut("/*infloop*/L:while(++true){L: {throw *::*; }; }");
tryItOut("<><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(prop; <><x><y/></x></>.watch(\"__proto__\", ([1]).__defineSetter__); *.unwatch(\"prototype\")) export prop\n const __count__;");
tryItOut("if((function (__count__)//h\n { return <><x><y/></x></> } )(0x99, [,,z1])) { if (((([11,12,13,14].filter << 3.__iterator__ for (*::*.set in false)))\n)) {L:if((let (<x><y/></x>) ({}).__defineSetter__(\"__proto__\", 'haha'.split))) {(<x/>); } else  if (-( ''  if ({}))) {[,,z1]; } else {}; }} else let prototype;");
tryItOut("/*infloop*/for(const [__proto__, , , , ] = __count__-=<><><'y/</x></>; export __parent__; = 0.1; (function  function::prototype () { return <><x><y/></x></> } )) /*infloop*/for( \"\" ; function ([y]) { }; -1) {yield;return; }");
tryItOut("with({}) let(prototype = __proto__ = <x><y/></x>.__proto__) { [z1] = constructor;");
tryItOut("with(this + window.__defineGetter__(\"__count__\", function(y) { yield y; L:with({__iterator__: <x><y/></x>})__parent__ = #1#, constructor;; yield y; })){export *;yield <><x><y/></x></>; }");
tryItOut(";*\n");
tryItOut("export *;");
tryItOut("if(__count__) yield window; else  if ( \"\" ) {setreturn ({}); } else const prototype = <><x><y/></x></>;");
tryItOut("export __proto__;return;");
tryItOut("/*infloop*/for(const prototype; <{__noSuchMethod__}>yyy</{__noSuchMethod__}({ prototype: __iterator__ }) >; *::*) {gc() }");
tryItOut("/*for..in*/for(var (\r( \"\"  << <y><z/></y>).hasOwnProperty(\"constructor\"))((#0=[*] .@*:: 5.0000000000000000000000 |= <x><y/></x>)\n) in ((new <y><z/></y>([z1].eval(__proto__))).__noSuchMethod__)) {/*infloop*/while(new (true)(-0, <><x><y/></x></>) === __noSuchMethod__ = arguments)yield <><x><y/></x></>;export *; }");
tryItOut("if(__count__.((0.1.prototype))) /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in 4.) {export this; } const __noSuchMethod__; else  if (((<x><y/></x>).watch).call(undefined, ) for each (prop in <y><z/></y>)) {return;export __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in false) { }");
tryItOut("yield\nreturn;");
tryItOut("/*infloop*/while(({ __parent__: ({ __iterator__: __noSuchMethod__, __noSuchMethod__: __iterator__ }) }) = __parent__){(<><x><y/></x></>)\n }");
tryItOut("if([11,12,13,14].map .@*:: [(#1=({__iterator__: <y><z/></y>})) if (@foo)] *= __count__ = ({ prototype: __proto__ })) null > <x><y/></x>");
tryItOut("yield;");
tryItOut("while((export prototype.__lookupSetter__(\"__iterator__\")) && 0){const prop, __count__;{} }");
tryItOut("L:while((constructor.__proto__ getter= //h\nfunction  __count__ (__iterator__, prop) { return yield } .throw( '' )) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.prototype in (false.yoyo(1e81))) {__proto__;return; } }");
tryItOut("/*infloop*/for(const [, __parent__] = prototype =  \"\" ; __noSuchMethod__+=1e81; let (__noSuchMethod__, __noSuchMethod__ = <y><z/></y>) @foo) function  __proto__ () { {} } ");
tryItOut("if( \"\" .watch(\"constructor\", /a/gi)) {;gc() } else let __proto__ = this, __proto__;");
tryItOut("L:if((__count__ = __count__ = __noSuchMethod__) for each (__noSuchMethod__ in <x><y/></x>) for (prototype in  /x/g )) throw window; else  if (new (([window].map(#1=[#1#])).watch)(<><x><y/></x></>, [window])) @foo; else gc()");
tryItOut("/*for..in*/for(var __proto__ = try { yield [z1]; } catch(prototype) {  '' ; } finally { ([]); }  in this) gc");
tryItOut("prop = __noSuchMethod__;");
tryItOut("L: {return <x><y/></x>; }");
tryItOut("L:switch(<><x><y/></x></> - <x/>) { default: case new gc():  }");
tryItOut("while((*) && 0)throw *;");
tryItOut("yield 'haha'.split;");
tryItOut("/*infloop*/M:for(let __count__ = window; *::*; constructor) {__count__ = [,,z1];(<x/>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ()(__iterator__ = <x><y/></x>) in ((this.zzz.zzz) <= <x><y/></x> >>>=false)) {throw (( /x/g .@foo) for each (__noSuchMethod__ in prototype) for each (__parent__ in <x/>)); }");
tryItOut("if(('fafafa'.replace(/a/g, [1,2,3,4].map))) {gc() } else  if (null) {prototype, prop = <y><z/></y>; }");
tryItOut("/*infloop*/for(var __count__ = ((((p={}, (p.z = this)())))(new ([1,2,3,4].map)(__iterator__, __parent__)).unwatch(\"constructor\")); ((*\n).prototype); null) {let ([__count__]) { return [z1,,];\f }while((__noSuchMethod__) && 0){({}).hasOwnProperty\f } }");
tryItOut("let (__noSuchMethod__, __count__ = ((function  __proto__ (__noSuchMethod__) { {} } ).apply).apply(window)) { (*); }");
tryItOut("with({}) { var __iterator__, prop; } ");
tryItOut("(*)");
tryItOut("let (__iterator__ = (__noSuchMethod__ = <x><y/></x>), __proto__) { {/*infloop*/while(0.1){({}); } } }");
tryItOut("/*infloop*/do let (__proto__) { gc() } while(([[]] .@x:: false) + [1,,] > 4.);");
tryItOut("return (__parent__) ? <><x><y/></x></>.__proto__ : (({}).hasOwnProperty)();");
tryItOut("let (__iterator__, prototype) { const prototype = <x/>; }");
tryItOut("/*for..in*/M:for(const __count__ in ((/a/gi)(<x><y/></x>)))export __iterator__;");
tryItOut("{}");
tryItOut("L:if(__iterator__.__noSuchMethod__.hasOwnProperty(\"__iterator__(<><x><y/></x></>)\")) /*for..in*/for(var __count__ = this in ) <xxx>{prototype}</xxx> else  if (eval(\"\", <y><z/></y>)) {if(true) { if (__parent__) {export prototype; }} else {return __parent__;export *; }; }");
tryItOut("/*infloop*/M:do let prototype; while(*);");
tryItOut("if(#3={a:#3#}.eval([])) { if ((this.__defineGetter__(\"__proto__\", function  __parent__ (prop, __parent__) { return  /x/g  } ) >>>=({__iterator__ setter: this, __parent__: <><><x><y/></x></></> }))) {{gc() } } else export __iterator__;} const prop;");
tryItOut("/*infloop*/for(true; <y><z/></y>; 3/0) var __iterator__, __parent__ = <><x><y/></x></>;");
tryItOut("if(this.unwatch(\"__proto__\")) let (__count__ = 1e-81, prototype = 033) { break L; } else  if (this.@foo *= ( '' .throw(<><x><y/></x></>))) {/*infloop*/\tdo (<><x><y/></x></>); while(<><x><y/></x></>); }");
tryItOut("if((({__iterator__: (p={}, (p.z = <x><y/></x>)())}))) return; else return;");
tryItOut("/*for..in*/for(let ((this--))((null(__iterator__)).__defineGetter__(\"prop\", Math.pow)) in ((Math.pow)([15,16,17,18].filter(<x><y/></x>, (__count__.prop getter= /a/gi)).__parent__))){/*infloop*/for(new /a/gi(*::*); (<x><y/></x>.([,,])); <><x><y/></x></>.eval([])) constructor;export x::__iterator__; }");
tryItOut("/*infloop*/while((prototype === [1,,])){switch(<><x><y/></x></>) { default: ( '' );case 5: case this: case __parent__: return #1=[#1#];break; case *: export prop;break; case undefined: break; break; case 9: break; case 7: ;case 2: yield;break; break; break; break; const __iterator__;case prop: break; case <x//h\n><y/></x>: case 5: case window: case <x/>: {}case 7: return;break; case *::*:  }yield; }");
tryItOut("yield;");
tryItOut("const __proto__ = prototype, __iterator__;\ncontinue L;\n");
tryItOut("let(prop) { with({}) { with({}) yield (prop = __parent__); } ");
tryItOut("let(constructor = ((uneval([,].isPrototypeOf(window).__proto__ = prototype = __proto__)))) ((function(){throw __iterator__;})());");
tryItOut("{throw <x><y/></x>[@foo];;var __count__ = undefined; }");
tryItOut("[[1]]");
tryItOut("if(new (0x99\t)()) continue L; else let constructor = null;");
tryItOut("yield undefined;");
tryItOut("if((<x/> = <y><z/></y> - [1.3])) { if (eval(\"return null;\", @foo.hasOwnProperty(\"constructor\"))) export prop; else export __proto__;}");
tryItOut("if(prop = __count__) { if ([<y><z/></y>]) {prototype = @foo;function (__parent__) { yield <x><y/></x> }  }} else yield ({a2:z2});");
tryItOut("if((<><x><y/></x></>.__proto__ = __noSuchMethod__)) { }");
tryItOut("/*infloop*/M:for(let function::__iterator__ = <x/> * new RegExp(<x><y/></x>); __count__; <zzz>void new ({}).hasOwnProperty()</zzz>) {gc()throw __iterator__; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in new Function) throw (-0);");
tryItOut("/*infloop*/do {gc() } while(4.);");
tryItOut("/*for..in*/for(var __count__ = false in \t '' ) { }");
tryItOut("/*infloop*/for(__noSuchMethod__ = __noSuchMethod__.constructor getter= function  function::__iterator__ (__iterator__) { yield __noSuchMethod__ } ; <><x><y/></x></> .@x:: [z1]; null) let = [z1];");
tryItOut("__proto__ = constructor;");
tryItOut("{\f; }");
tryItOut("if(this.__defineSetter__(\"prop\", ({}).__lookupGetter__)) {yield;; } else  if ((yield  /x/g )) {gc() } else {continue L; }");
tryItOut("/*infloop*/M:for((<><x><y/></x></> % <><x><y/><\f/x></>); #0=window; <y><z/></y>) ;");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = false in prop) { }\nM:do {function(y) { yield y; export prop;; yield y; } } while((new <x/>(window)) && 0);\n");
tryItOut("switch((<x/>.prop = 1e-81)) { default: break; case  \"\" : yield (([,])[{}]);break; export constructor;break; case prototype.prop: return;case 9: if([,]) {export *;(<x/>); }case ({ set __parent__ __noSuchMethod__ (prop, __parent__) { return \ftrue } , prototype setter: (<y><z/></y>).__defineSetter__\t }): break; case 1: break; break; case 4: (window); }");
tryItOut("M:if(false) /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in *) export prototype; else  if (constructor = default: return;break; ) this.zzz.zzz;<><x><y/></x></> const get;");
tryItOut("if(( >>>=(new Date(<><bbb xmlns=\"<x/*\n*/><y/></x>\"></bbb></>)))) { if (<><>/a/gi</></>) /*infloop*/for(const __noSuchMethod__; *::*; window.__lookupSetter__(\"prop\")) { } else {/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in @foo) yield; }}");
tryItOut("if(({undefined['__parent__']: (this)[window - false]})) { if ([,,]) {; }} else while(( '' ) && 0){;__count__; }");
tryItOut("L\n: {gc() }");
tryItOut("throw prototype;");
tryItOut("let(({ __count__: ({ prototype: __iterator__, prototype: constructor }), __iterator__: [__count__, , __iterator__, prototype, ] }) = (\t<y><z/></y>).call(constructor = __noSuchMethod__, ), __noSuchMethod__ = gc) { export *;");
tryItOut("switch(<x><y/></x>) { default: break;  }");
tryItOut("L: {let __proto__ = ([,].__lookupGetter__(\"prototype\")), __proto__ = *; }");
tryItOut("return constructor;");
tryItOut("if(([1])(undefined) >>= ((uneval((-0))))) with(prototype); else  if (({})) //h\n{export *;*; } else {let (__noSuchMethod__, constructor) { export prototype; } }");
tryItOut("/*infloop*/L:do {;let __proto__, constructor; } while(__iterator__)");
tryItOut("if((true ^ [] = <y><z/></y> for (__proto__ in  /x/ ))) {/*for..in*//* nogeckoex bug 349964 */(((eval(\"<><x><y/></x></>\", <x/>)) >= this * false).watch).call for  each(var <><x><y/></x></>['__parent__'] in (-0)) {{} }return; }");
tryItOut("let (prop, prototype = (uneval(-0))) { gc() } const __parent__;");
tryItOut("/*infloop*/while((uneval(<x><y/></x>))())\n");
tryItOut("for(let y in [5,6,7,8]) yield (new Number(false));");
tryItOut("while((__noSuchMethod__ = <x/>) && 0)return 3;");
tryItOut("L:with( \"\" ){; }");
tryItOut("let __iterator__ = 3, __iterator__;");
tryItOut("/*infloop*/for(( /* Comment */false)\n; .__defineGetter__(\"__noSuchMethod__\", Function); constructor) export *\nyield prototype;");
tryItOut("let (__parent__ = ([11,12,13,14].filter), ({ __iterator__: ({ function  __count__ (__iterator__, prototype)<x><y/></x>: __count__ }) }) = this.watch(\"__parent__\", function () { yield  /x/g  } )) { L:if(<x><y/></x>) {throw [,,z1]; } else  if (<x/>) export *; else return\n }");
tryItOut("L: {/*for..in*/L:for(const __count__ in ((function  constructor (__parent__) { return <><x><y/></x></> } )(#3={a:#3#})))(<x><y/></x>);let prop; }");
tryItOut("if((new ([1,2,3,4].slice)(null, window))) <x><y/></x>.(null); else  if (<x/> >>= window.yoyo( /x/g )) {export constructor; const constructor; } else {this;if('fafafa'.replace(/a/g, <x><y/></x>)) {continue ;throw constructor; } }");
tryItOut("while((<x/>.__lookupGetter__(\"prototype\")) && 0){function::__proto__ = *; }");
tryItOut("return;");
tryItOut("/*infloop*/ get ");
tryItOut("/*infloop*/for(const __proto__ = ([1] / @foo); \n<><x><y/></x></>; try { throw StopIteration; } finally { throw __noSuchMethod__; } ) Function");
tryItOut("/*infloop*/for(let prop; ((true &= <x><y/></x>) && ({prop setter: function  constructor (__count__)(function ([y]) { })(), prototype getter: (function  constructor () { (<><x><y/></x></>); } ).call }))(this.zzz.zzz , ([*::*].some(function (undefined;) { yield <y><z/></y> } )) .@ \t__parent__); \t(((Math.sin).apply).call(<employee id=\"1\"><name>Joe</name><age>20</age></employee>, [,]['__noSuchMethod__'] = this.__defineGetter__(\"__proto__\", ({}).hasOwnProperty)))) return;");
tryItOut("with((new String(this).__count__) >  /x/g ){return *; }");
tryItOut("throw <x><y/></x>.__defineSetter__(\"constructor\", gc)\n");
tryItOut("/*for..in*/L:for(constructor( \"\" ) in ((Function)(String(constructor.__iterator__ setter= 'haha'.split))))Math.pow");
tryItOut("return <y><z/></y>;\nreturn;\n\n");
tryItOut("/*infloop*/for(let __proto__; new Function(); new Exception(window, <><x><y/></x></>) ? window ===  ''  : window) {;return prop; }");
