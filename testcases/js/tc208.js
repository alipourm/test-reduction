tryItOut("{throw StopIteration;export *; }");
tryItOut("/*infloop*/");
tryItOut("/*infloop*/L:for(const prop; __proto__; (<><x><y/></x></>.__defineSetter__(\"__count__\", 0/0))) {continue M; }");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in constructor setter: ({}).hasOwnProperty) {(({}));return [1]; } }");
tryItOut("if( /x/g ) { } else  if (<><x><y/></x></>) return\n/*for..in*/for(<> \"\" </>yyy = [15,16,17,18].sort(({}).hasOwnProperty,  '' ) in ((p={}, (p.z = <><x><y/></x></>)()))) 4.\n\n/*for..in*/for(__parent__ = [] in  /x/ ) {export prop; }\nlet prototype =  /x/g , constructor;");
tryItOut("/*infloop*/for([({ __count__: constructor, prototype: __iterator__ })] = <y><z/></y>.__proto__; <><{prop}></{prop}></> instanceof  '' .prop; (((033).call(undefined.hasOwnProperty(\"prop\"), )).hasOwnProperty(\"__proto__\")).constructor) {M:if(<x><y/></x>) {export constructor;continue M; } else {function(y) { yield y; return;; yield y; } }; }");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("/*infloop*/for(const prop = __parent__ = false ? constructor : @foo; [ ''  if (<x><y/></x>)].valueOf(\"number\"); new Array()) if(('fafafa'.replace(/a/g, [1,2,3,4].slice))) export *; else  if (<x/>.isPrototypeOf(<x/>))  else for(let y in []);");
tryItOut("do export __count__; while((1e81.throw(eval(\"<x><y/></x>\", ({})) += [z1].eval(@foo))) && 0);");
tryItOut("if(this.__defineSetter__(\"__count__\", ({}).__lookupGetter__)) yield <y><z/></y>;");
tryItOut("with({}) { throw __count__; } ");
tryItOut("return;");
tryItOut("{L:if(({a1:1})) {return  '' ; } else  if (__iterator__) {constructor =  /x/g , __noSuchMethod__ = this;gc() }continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::prop in <x><y/></x>) return  /x/g ;return;");
tryItOut("with(new function  __count__ () /x/g (<x><y/></x>))with([,,z1]){{} }");
tryItOut("if( /x/g .__lookupSetter__(\"prototype\") >>= null) {/*infloop*/while((delete [[]]--)){{; }if(<><x><y/></x></>) { if ( '' ) { /x/g  }} else {yield; } } } else  if (__parent__ = [[]]) {yield <x/>; }");
tryItOut("if( /x/g ) [1,2,3,4].map else  if (@foo)  else return <x><y/></x>;");
tryItOut("let (__count__ = *::*) { export prototype; }");
tryItOut("/*infloop*/M:do ; while(~null);");
tryItOut("L:with({constructor: *::*}){gc()M:switch((<><x><y/></x></>.__lookupGetter__(\"__proto__\"))) { default: case (window >>= *): break; gc()break; break;  } }");
tryItOut("{export __noSuchMethod__; }");
tryItOut("if( /x/g ) {let __count__ = undefined, __count__ = *; }");
tryItOut("throw StopIteration\nL:if(*) {const prop, __parent__ = -1; } else  if ([,,z1]) gc()");
tryItOut("L: L:while(((new Function)(<x/>)) && 0){export *\nyield; }");
tryItOut("{{} }");
tryItOut("if((window ? 1e81 :  '' )) {} else  if ([] << <x/>) {{} }");
tryItOut("return\nexport *;");
tryItOut("/*for..in*/for(var __proto__ = ( /* Comment */<><xxx {__parent__}={(__iterator__ == null)} /><!--yy--></>) in <x><y/></x>.(<x/>)) {; }");
tryItOut("<x><y/></x>");
tryItOut("gc()");
tryItOut("/*for..in*/for(let [prop, constructor] = ([[1]].eval(3)) || (__proto__.prop) in *) if((function(y) { yield y; return  /x/g ;; yield y; })( /x/g , <x><y/></x>)) { if ([<><x><y/></x></>].sort(((((<x><y/></x>).__defineSetter__).apply).call).call)) {null;return this; }} else export *;");
tryItOut("M:if( /x/g ) {__noSuchMethod__;{} } else { /x/ ;return; }\nwith({__iterator__: <><x><y/></x></>}){<x><y/></x>  }\n");
tryItOut("if(<><x><y/></x></>) {const __iterator__;; } else  if (<x><y/></x>) {gc()let prototype, __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(const __count__ = __parent__ = function(id) { return id }.__defineGetter__(\"__proto__\", function (prototype) { yield <><x><y/></x></> ? <><x><y/></x></> : <><x><y/></x></> } ) in window in 033) throw @foo;");
tryItOut("/*infloop*/for(eval(\"(~undefined)\", arguments > [1]); let (__proto__, prop) __iterator__ = ([(constructor = @foo)].filter(eval));  /x/ .__lookupGetter__(\"__noSuchMethod__\").throw(yield;.isPrototypeOf( '' ).yoyo(let (__iterator__ = <y><z/></y>) [,,z1]))) {/*infloop*/M:for(const ({ constructor: prototype }) = ({constructor: <x><y/></x>,  set __noSuchMethod__(__count__)* }); window; <x><y/></x>) throw this;\f }");
tryItOut("const constructor; const __proto__;");
tryItOut("/*infloop*/L:for(let let; (prop = @foo); ({ set __iterator__()[] })) {{} }");
tryItOut("do {return <><x><y/></x></>; } while(([]) && 0);");
tryItOut("if((__count__.constructor = <><x><y/></x></>)) { if ((eval(\" /x/g \", this) % (Function()).__defineSetter__(\"__iterator__\", 'haha'.split))) {__count__, __iterator__;; }} else {; }");
tryItOut("/*infloop*/while(prototype--)__proto__");
tryItOut("while((true) && 0){@foo; }");
tryItOut("/*for..in*/M:for(prop =  /x/  in *) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in (<><x><y/></x></>)(<x/>\n)) {/*infloop*/for(const __count__; <x><y/></x>.prop; __iterator__.__iterator__) function (false)<><x><\ty/></x></>throw *::*; }");
tryItOut("let (__noSuchMethod__) { let (__proto__ = ([[1]].unwatch(\"prop\"))(<y><z/></y>), __iterator__) { /*infloop*/for(var function  __parent__ () { let prototype = <><x><y/></x></>, prop = __proto__; }  = <x><y/></x>; <><x><y/></x></>; false) break M; } }");
tryItOut("with({}) { __proto__ = __parent__; } ");
tryItOut("let(__count__.__parent__ = window, (window -  /x/g )) { return\n");
tryItOut("[1,2,3,4].map\nbreak L");
tryItOut("M:if(({ __iterator__: [, ({ __proto__: __parent__, __noSuchMethod__: __parent__ }), ({ __noSuchMethod__: [__parent__, , , , ], __proto__\t: ({ constructor: function::__count__ }) }), , ] }) = (([[1]] *= __iterator__).propertyIsEnumerable(\"__parent__\"))) { if ((<><x><y/></x></> === this >= ({constructor: __parent__}))) {return -1;return [[]]; }} else M:while(([1]) && 0){__proto__ = <><x><y/></x></>; }");
tryItOut("continue M;");
tryItOut("/*for..in*/for(const __parent__ in (((yield ([([15,16,17,18].map((<x><y/></x>).__defineSetter__, window))] ? ((<x><y/></x>.__iterator__).hasOwnProperty(\"__iterator__\")) : (eval(\"5.0000000000000000000000\", (p={}, (p.z = arguments)())))))/*\n*/)((/*\n*/__noSuchMethod__-=prototype.eval(__iterator__ = this.__noSuchMethod__) += [undefined for each (prototype in *::*)])))){export *;/*infloop*/for(__proto__.({ constructor: ({ __noSuchMethod__: __proto__, prop: prop }) }), __parent__ -= (({__count__:  \"\" })); __noSuchMethod__ = <><x><y/></x></>; (({ get __proto__ __count__ () { yield null } , __noSuchMethod__: <x><y/></x>.(false) }))) {return; } }");
tryItOut("let(__count__ = ([, ({ __noSuchMethod__: ({ __count__: constructor }) }\t), , ({ constructor: //h\n[__parent__, yield] })] = <x/>)) ((function(){with({}) { for(let y in [5,6,7,8]) try { return \fundefined; } finally { gc() }  } })());");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("try { __count__ = prop; } finally { yield export *;.isPrototypeOf(<x/>); } ");
tryItOut("for(let y in [5,6,7,8]) var getter = this;");
tryItOut("let (__proto__) {  }");
tryItOut("/*for..in*/M:for(__parent__ in (( set __proto__(__iterator__))([__iterator__, __iterator__, ] = [,,z1] <<= <y><z/></y>))){if(<y><z/></y>) {<y><z/></y>;\t } else return; }");
tryItOut("M:do let (__iterator__ = [@foo].sort([1,2,3,4].slice)) { <y><z/></y>; } while((({ __noSuchMethod__: ({ prototype: ({ prototype: constructor, __proto__: prototype }) }) }) =  /x/ ) && 0);");
tryItOut("switch(__noSuchMethod__.prop = (new <><x><y/></x></>) .@*:: __proto__) { default: if((throw this.__defineGetter__(\"prototype\", [1,2,3,4].slice))) { if (*) {\n }} else return;break;  }");
tryItOut("/*for..in*/L:for(let yyy in 3) export *;");
tryItOut("/*infloop*/do {return <x/>;export prototype; } while((prop = 'fafafa'.replace(/a/g, (new Function(\"\")))));");
tryItOut("if( /x/g ) (<y><z/></y>); const __proto__;");
tryItOut("/*for..in*/for(let [__proto__, prototype] = (prototype = (uneval(3/0))) in window) const prop = <x><y/></x>;");
tryItOut("M:do yield <><x><y/></x></>; while(((yield (Number(setter) for each (__proto__ in __noSuchMethod__) if (#3={a:#3#})))) && 0)");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("gc()\n");
tryItOut("/*infloop*/for(var prototype = [11,12,13,14].sort; prop.__proto__ = ([11,12,13,14].some.@foo); (null.@foo).call(new null, )) gc()");
tryItOut("try { try {  /x/ ; } catch(__noSuchMethod__ if (function(){var constructor = false;})()) { yield <x/>; } catch(__parent__) { false, __iterator__ = <x><y/></x>; } finally { return; }  } finally { for(let y in []); } ");
tryItOut("with(([]))<x><y/></x>;");
tryItOut("let(__noSuchMethod__ = <x><y/></x>, __iterator__ = @foo) { __noSuchMethod__;");
tryItOut("continue ;");
tryItOut("if(prop) {\t if (__parent__ = __iterator__) export prototype;} else x::prototype");
tryItOut("/*for..in*/for(var typeof (prototype.__proto__ getter= <x><y/></x>)['__proto__'] in prototype.constructor) L:if((uneval(({a1:1})))) { if (constructor =  '' ) let prototype;} else {export __iterator__; }");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("if(constructor.prop) __proto__ = __count__, prototype =  /x/ ;");
tryItOut("/*infloop*/while(@foo)var prop, __proto__ = <><x><y/></x></>;");
tryItOut("{__noSuchMethod__\n /x/ ; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; (\f3.yoyo(<x><y/></x>)) :: new function  __noSuchMethod__ () { yield arguments } (); 4.) if(*)  else  if (({})) {(({}).hasOwnProperty).apply } else ");
tryItOut("if(({a1:1})) {[1,2,3,4].map([[]]); } else { } const prop;");
tryItOut("/*for..in*/for(var __iterator__ in (( /x/ )(<x><y/></x>)))(<y><z/></y>);");
tryItOut("let(prototype) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(* % __iterator__;  '' ; 3) {Math.powthrow #1#; }");
tryItOut("return (yield <><x><y/></x></>);");
tryItOut("\n;\n");
tryItOut("/*infloop*/do L: yield <><x\x7f ><y/>/x></>;(new (yield this.__defineSetter__(\"__proto__\", ({}).hasOwnProperty)\n)(constructor.*, (yield eval(\"yield set;\", window) + window\n)));");
tryItOut("L:if(yield ((undefined)(1.3))(([1].hasOwnProperty(\"__noSuchMethod__\").propertyIsEnumerable(\"__proto__\")).watch(\"__proto__\", (( '' )(<xxx>{__iterator__\t}</xxx>))), (prototype.(constructor)).__lookupSetter__(\"prototype\"))) /*for..in*/for([prototype, prototype] = <x/> in prototype) {yield function::__proto__; } else  if (__noSuchMethod__ = *.watch(\"prop\", ({}).hasOwnProperty)) if(function::prototype) ; else  if (<\tx//h\n><y/></x>) ; else {__parent__;yield; }");
tryItOut("/*infloop*/do {let prototype = <><x><y/></x></>;{export __count__;gc() } } while(prototype = (this.zzz.zzz));");
tryItOut("return ((new /a/gi()).unwatch(\"__noSuchMethod__\"));");
tryItOut("if(*.__defineGetter__(\"__count__\", ({}).hasOwnProperty)) { '' ;const prototype = undefined; } else  if () {<><x><y/></x></>;(undefined); } else {<x><y/></x>; }");
tryItOut("L:do {/*for..in*/for(let let (, prototype = *::*) [].propertyIsEnumerable(\"__count__\").__noSuchMethod__ in ((function  __parent__ (prop) { yield  %= <><x><y/></x></> instanceof <x/> } )(prototype))){/*infloop*/L:for(var __parent__ = <x><y/></x>; *; __parent__) {throw 1.2e3; } } } while((true++) && 0);");
tryItOut("var __proto__ = try { throw window; } catch(constructor) { var __proto__ = undefined; } finally\r { ; } ");
tryItOut("try { <x><y/></x>; } catch(__parent__ if delete [[1]]) { const __count__ = 0, <y><z/></y> =  /x/g ; } catch(__parent__ if let (__iterator__ = <><x><y/></x></>) undefined) { gc() } catch(__noSuchMethod__ if (constructor = window)) { ; } finally { {} } ");
tryItOut("/*infloop*/M:for(const constructor; (null.prop = <x><y/></x>); this.zzz.zzz) export *;");
tryItOut("/*infloop*/while((({__count__: (window ? this : @foo)})))({ prop: __noSuchMethod__ })");
tryItOut("(.2)\n");
tryItOut("with(<y><z/></y>)return [,,];");
tryItOut("{L: {var constructor, prop = window;; }\fdo {eval } while((<x/>) && 0); }");
tryItOut("/*for..in*/for(const [prop, __noSuchMethod__] = null in (((function(id) { return id }).call(@foo, )) /= (new (<><x><y/></x></>)( '' , constructor)))) {export *; }");
tryItOut(" '' ;");
tryItOut("if([({ __count__: __proto__ }), [prototype, ], , __parent__]) { if ((function (__iterator__) { yield false; } )( /x/g )) export *;} else return;");
tryItOut("with({constructor: <x/>.@*}){ /x/ 8 }");
tryItOut("export *;return\n<><x><y/></x></> = __proto__;");
tryItOut("/*infloop*/for(prop = new (function::__iterator__ =  \"\"  && ((-3/0)(@foo, <x><y/></x>)))(); (<x><y/></x>.(<x><y/></x>) != (__count__.__defineSetter__(\"prop\", function ()[z1,,]))); constructor = (__noSuchMethod__ = #1=[#1#])) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x><y/></x>) {return 3.141592653589793;{} }");
tryItOut("if(({a1:1})) {(yield 0.1 =  /x/g .__lookupSetter__(\"__iterator__\")) yield ({})();} else \t{{}M:switch(__parent__ = true) { case *::* / #1=[#1#].throw(<><x><y/></x></>): (#3={a:#3#});break; this;case 5: break;  } }");
tryItOut("switch(prototype = 0/0) { case (({__proto__: prop = <y><z/></y>, prop: ([*]) })): case 9: let prop = null;default: throw window\ncase window: case (<x><y/></x>.isPrototypeOf( '' )):  }");
tryItOut(";\nconst constructor, __iterator__ = undefined;\n");
tryItOut("/*for..in*/for(var __parent__.__proto__ in (<x><y/></x> ::  /x/g )) {return  '' ;try { return <><x><y/></x></>; } catch(prop) { return <><x><y/></x></>; }  }");
tryItOut("/*for..in*/for(var __count__ in (uneval( \"\" ))) {this; }");
tryItOut("M:if(this) {throw  /x/ ;yield; }");
tryItOut(";\nwith({}) { this.zzz.zzz; } \n");
tryItOut("/*infloop*/while((eval(\"(this);\", 5.0000000000000000000000))){with({}) yield; }");
tryItOut("/*infloop*/for([__proto__.(({}))].map((new Function(\"export *;\"))); (new (new ([1,,])().__lookupSetter__(\"prop\").watch(\"constructor\", [1,2,3,4].map))()); function(id) { return id }[window]) {/*infloop*/for(var constructor; Date(); window.__parent__ += __noSuchMethod__.( '' )) export prototype;\n<y><z/></y>;\n }");
tryItOut("switch(<x><y/></x>.valueOf(\"number\")) { case ([11,12,13,14].sort): return <x/>;break;  }");
tryItOut("/*for..in*/M:for(let prop in ((function (__proto__, prop) { return  \"\"  } )(case 2: if(\t<><x><y/></x></>) {} else  if ( \"\" .__lookupGetter__(\"__parent__\")) {yield; })))/*infloop*/for(const __parent__; undefined; __count__) return;");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(const __noSuchMethod__((new Error(<><x><y/></x></>.@foo, prototype = __noSuchMethod__ = ({a1:1}))) ? (__noSuchMethod__.__iterator__ = __count__) : <x><y/><\n/x>.throw(<x><y/></x>)) in <><x><y/></x></> .@ [-1 if (window)]) /*for..in*/for(__iterator__\t = (({ get __proto__() { yield null }  })\f) in <><x><y/></x></>) yield __noSuchMethod__;");
tryItOut("L: return 0x99\nbreak ;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do return; while(({a2:z2}) in 3.141592653589793);");
tryItOut("yield ({});");
tryItOut("if(((this.valueOf(\"number\")) * (constructor setter: (function () { export *; } ).call.yoyo([,])))) if(this) { if (@foo) yield true; else gc()} else  if ((({prop: <x/> }\t) for each (__proto__ in *::*) for (__count__ in  /x/g ))) yield;");
tryItOut("");
tryItOut("/*for..in*/for(var [__proto__, prop] = <xxx {__parent__}={[11,12,13,14].sort} />.((++prop = this.__lookupGetter__(\"prop\"))) in (undefined instanceof <x/>)) ;");
tryItOut("/*for..in*/for(var __iterator__ = <x/> in <x><y/></x>) return 1e4;");
tryItOut("M:if(*::*) { if (this) constructor;} else yield  \"\" ;");
tryItOut("/*infloop*/while( \"\" )const __proto__ = [z1]");
tryItOut(";\nthrow  '' ;\n");
tryItOut("/*infloop*/L:for(let __iterator__ = (-0); <x><y/></x>; false) {}");
tryItOut("if(__proto__ = __count__.__lookupSetter__(\"__proto__\")) { if (getter && ((.2 > <><x>\t<y/></x></>))()) (1 for (x in [])) else {break M; }}");
tryItOut("this.zzz.zzz;");
tryItOut("const function::__noSuchMethod__ = <x><y/></x>, __parent__;");
tryItOut("L: ;");
tryItOut("throw prop;");
tryItOut("if(eval(\"__proto__ -= <><x><y/></x></>\", <x/>.valueOf(\"number\"))) {;L:if(__count__ = -0) { if (<y><z/></y>) export __count__; else throw window;} } else  if ((yield (<x/>.*))) {}");
tryItOut("with({}) { return; } ");
tryItOut("L: y");
tryItOut("switch( \"\" ) { default: {}break;  }");
tryItOut("if((continue \f)) { if (({ prototype: constructor, __parent__: ({ prototype: ({ __iterator__: constructor }), __parent__: __iterator__ }) }) = __proto__ = *::*) {/*infloop*/L:while([[1]]){(<y><z/></y>);__count__ =  '' ; }/*infloop*/for(let ({ __count__: [__parent__, , __count__, , ] }); prop = 0/0; Function(*::*, <x/>)) \f }} else {/*infloop*/while(this){break ; } }");
tryItOut("while(((new __parent__(,,  /x/ )).__iterator__) && 0){(@foo); }");
tryItOut("with((new function(q) { return q; }(({a1:1}) < false.throw((eval(\"<><x><y/></x></>\", prop))), this.eval(false)))[(eval(\"window.hasOwnProperty(\\\"__proto__\\\")\", prototype.prototype getter= (eval).call))])if(*)  else  if (<x/>) 'haha'.split");
tryItOut("/*for..in*/L:for(__parent__ = <x><y/></x> in *::*) \nconst __parent__, constructor;");
tryItOut("new Function");
tryItOut("{let(x::prop) ((function(){const __parent__ = *::*, prop;})()); }");
tryItOut("if([1]) yield; else let __proto__ = <x><y/></x>;");
tryItOut("/*infloop*/do gc() while(new RegExp(__iterator__));");
tryItOut("do gc() while((((@foo)(<><x><y/></x></>, <><x><y/></x></>).__lookupSetter__(\"__count__\"))) && 0);");
tryItOut("{/*for..in*/for([__parent__, prop] = (p={}, (p.z = null)()) in prop) /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in  /x/g ) {{} } }");
tryItOut("with(<employee id=\"1\"><name>Joe</name><age>20</age></employee>){{yield; } }");
tryItOut("if((new Function(\"{}\\f\"))(this)) function () {  }  else  if (\n<><x><y/></x></>.yoyo(<x><y/></x>)) {} else {var __parent__ = -1, constructor;L:if(true) {var __count__ = -1;export __count__; } else {yield  \"\" ; } }");
tryItOut("/*for..in*/M:for(var [__parent__, constructor] = __proto__ in -0) {export prop;var __proto__, each; }");
tryItOut("/*infloop*/do {\n{}return; } while(<><bbb xmlns=\"this.__defineSetter__(\"__noSuchMethod__\", window.isPrototypeOf(([@foo for (__noSuchMethod__ in *)])))\"></bbb></>);");
tryItOut("with(prototype.__iterator__ = [(arguments)(function(id) { return id }, <x/>)].filter(eval)){{yield  /x/g ;(new Function(\"gc()\")) } }");
tryItOut("var __parent__;");
tryItOut("do {continue L; }\n while((__count__ = <y><z/></y>) && 0);");
tryItOut("var __iterator__");
tryItOut("{continue M;({}); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let  /x/  in (yield __iterator__)) {/*infloop*/L:for(((p={}, (p.z =  /x/g )())) , Math.pow; __noSuchMethod__.hasOwnProperty(\"__count__\"); __noSuchMethod__ = <y><z/></y>\n) {[1,2,3,4].map } }");
tryItOut("if(1e-81) {for(let y in []); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in this) function(q) { return q; }");
tryItOut("continue M;\nexport __proto__;\n");
tryItOut("/*for..in*/L:for(var constructor.__parent__ getter= function (__iterator__, constructor) { return true } \t.__parent__ in (((function(y) { yield y; this.zzz.zzz;; yield y; }).call)((-'fafafa'.replace(/a/g, ((1 for (x in []))).call) >>> (prototype = true)))))M:if([[11,12,13,14].filter for each (__parent__ in *)]) /*infloop*/M:while(((({}).hasOwnProperty).call( /x/ , <x><y/></x>, 3))){<x/>; } else  if (__noSuchMethod__%=1.2e3) {({});return window; } else {export *; }");
tryItOut("if(window) {__iterator__; } else return;");
tryItOut("L:if((__parent__.(<\tx><y/></x>))) break M; else {while(((false()).*) && 0){export *; } }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(new Math.sin(@foo)) continue ; else  if ((*::*.throw(function(id) { return id }))) { }");
tryItOut("\n/*for..in*/for(var __noSuchMethod__ in 1e-81) {yield <y><z/></y>; }\n");
tryItOut("if(<y><z/></y>) {var __parent__; } else function  prototype (__iterator__) { yield <x><y/></x> } ");
tryItOut("L:if(this.throw(*::*)) { if ((<x><y/></x> |= <><x><y/></x></>)()) {yield;function  __count__ () { return * }  } else {<x><y/></x>(new Function(\"throw null;\")) }}");
tryItOut("return;");
tryItOut("L: {([z1]); }\nbreak ;\n");
tryItOut("throw (-0);");
tryItOut("/*infloop*/while(<x><y/></x>.__defineGetter__(\"constructor\", (new Function(\"break ;\"))))var prop, __noSuchMethod__;/*infloop*/L:for(const __noSuchMethod__ = true; __proto__; <><x><y/></x></>) const __iterator__ = 4., __count__;");
tryItOut("if(constructor = <x/>) {export prop;function () { yield 3.141592653589793 }  } else {throw *::*; }");
tryItOut("const constructor = <x><y/></x>\n");
tryItOut("while(((<><x><y/></x></>)(prop) = (function::__count__.__parent__)) && 0){L:with({__proto__:  \"\" .propertyIsEnumerable(\"__iterator__\")})yield function::prop; }");
tryItOut("switch((__noSuchMethod__ = prototype)) { case  /* Comment */constructor = 4. =  '' : default: break; with({prototype: <x><y/></x>})this }\n{constructor, __noSuchMethod__ = undefined;/*for..in*/M:for(__proto__ in let) {{}[,,]; } }");
tryItOut("{}\n");
tryItOut("while((undefined) && 0)");
tryItOut("switch(*::*) { case true: return 0; }");
tryItOut("if((this.__defineSetter__(\"constructor\", (Math.sin).call\f)) /=  '' ) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <><x><y/></x></>) {{}@foo; } else  if (({ get __iterator__(prop, __noSuchMethod__) { yield (-0); } , constructor setter: ({}).hasOwnProperty })) /*infloop*/do yield; while([11,12,13,14].some); else if(this) export *; else  if (<><x><y/></x></>) <x><y/></x> else {return <><x><y/></x></>; }");
tryItOut("{(<x><y/></x>);(constructor); }");
tryItOut("/*for..in*/constructor: (-1)");
tryItOut("if((\n#1=<x><y/></x>\r)) L:if(this | <x/>) {Function } else  if (#1=<x><y/></x> ^ *::*) prop = window, __noSuchMethod__; else  else let prop, prototype = <x><y/></x>;\ncontinue ;\n");
tryItOut("L:switch(new (({let: window, __proto__ setter: [z1] }).isPrototypeOf(((new Function(\"export *;\"))).call(*, )))(false)) { case \n__count__: (this).callbreak; case 8: {{return; } }break;  }");
tryItOut("L:with([11,12,13,14].sort)/*for..in*/for(var [constructor, __proto__] = new (new Function)() in *::*) throw function ([y]) { };");
tryItOut("{var __iterator__, __iterator__ = __count__;yield; }");
tryItOut("/*infloop*/for(var __proto__; (new window).valueOf(\"number\"); ({ __noSuchMethod__: prototype }) = <x><y/></x>.watch(\"__iterator__\", function  prototype () { return ([(#3={a:#3#}.__lookupSetter__(\"prototype\"))].sort((({}).__lookupGetter__).apply)) } )) while((window(true, *::*)) && 0)continue L;");
tryItOut("/*for..in*/for(const constructor in null) {var __noSuchMethod__ = *, __proto__; }");
tryItOut("M:if(__count__-= /* Comment */<x/>) { if (\fprototype = (new (<x/>)() , new Math.pow())) {;__proto__ = prototype, prototype; }\f else {return;var __parent__; }}");
tryItOut("do {break ;prop; } while((window) && 0);");
tryItOut("L:if((p={}, (p.z =  /x/g )())) ; else  if (prop = __proto__) {\fthrow  /x/g ;yield []; } else ");
tryItOut("switch(((__iterator__ =  /x/g .__proto__)).__defineSetter__()) { case 9:  }");
tryItOut("/*infloop*/while(new (*)()){let __count__ = <><x><y/></x></>;gc() }\n/*for..in*/for(const __parent__ in this) ");
tryItOut("/*for..in*/M:for(var prop = <x><y/></x> in <x/>) export __iterator__;");
tryItOut("export *\n");
tryItOut("return <><x><y/><x></>;");
tryItOut("return #1=[#1#];const __noSuchMethod__ =  '' ;");
tryItOut("/*infloop*/for(const __proto__; (prop getter: prop); ({ __parent__: __parent__, each: __count__ }) = prop & __iterator__) const __noSuchMethod__ = prototype, __noSuchMethod__;");
tryItOut("/*infloop*/for(let __parent__(__iterator__ = constructor) = this; Exception(); [1,,].__defineSetter__(\"__count__\", (undefined).watch)) throw ( /x/g  , 3.141592653589793);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in new <{constructor}><ccc:ddd></ccc:ddd></{constructor}>()) {/*infloop*/M:do <y><z/></y>; while(this);let (__count__ = [ \"\" ]) { {<><x><y/></x></>; } } }");
