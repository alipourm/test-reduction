tryItOut("{(<><x><y/></x></>);throw 033; }");
tryItOut("with({}) return -(#2=({constructor: <x><y/></x>}));");
tryItOut("do {export *;gc() } while((<y><z/></y>) && 0);");
tryItOut("if(this.throw( /x/g )) ((-1)); else  if (window * undefined) throw <x><y/></x>; else { }");
tryItOut("{const prototype, __iterator__ = 033; }");
tryItOut("yield window;\nnull;\n");
tryItOut("/*infloop*/do return <><x><y/></x></>; while(<x><y/></x>);");
tryItOut("__proto__ = ({a1:1}), __parent__ = -3/0; const __proto__;");
tryItOut("/*for..in*/L:for(let [__parent__, constructor] = [false] in <><x><y/></x></>) {throw null; }");
tryItOut("{/*infloop*/L:for(const __parent__; *::*; prototype.__noSuchMethod__ = <x><y/></x>) if(__count__) { if (<x><y/></x>) {{} }} else yield 4.;/*for..in*//* nogeckoex bug 349964 */ for  each(let in <><x><y/></x></> >  '' ) {yield window; } }");
tryItOut("/*infloop*///h\nfor(const prototype = (eval(\"undefined\",  /x/g )); <x/>.hasOwnProperty(\"__parent__\"); *::*) {(window);{} }");
tryItOut("/*for..in*/M:for(this.zzz.zzz.__proto__ in <x><y/></x>.(*::*)) ");
tryItOut("if((this.throw(<x><y/></x>))) {{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({} @ <y><z/></y>) in null)  '' .prop =  \"\" ;");
tryItOut("L: {/*infloop*/M:for(let prototype; (uneval(<><x><y/></x></> | prototype)); constructor = null) /*infloop*/M:for(__parent__; <><x><y/></x></>; prop) constructor }");
tryItOut("L:switch((yield new true(('fafafa'.replace(/a/g, function(y) { yield y; function (function::__iterator__) null ; yield y; })), __noSuchMethod__))) { case 6: break; {Math.sin }default: break; L:if(__proto__.constructor setter= [1,2,3,4].slice) {(<x/>); }/*for..in*/for(let __iterator__(<><x><y/></x></>) in __count__ = this) <x/>;break; case <>(<x><y/></x>.(*::*))<\f/>: {} const function::__count__;case __proto__.let ? eval(\"function(id) { return id }\",  /x/ ) : [11,12,13,14].map: gc()case 3: break; case false: return;break;  }");
tryItOut("yield 0/0.eval(<><x><y/></x></>);");
tryItOut("break ;");
tryItOut("switch((-1) ?  \"\"  : [z1]) { case 3:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in constructor) {var __proto__ = 0;return <><x><y/></x></>; }");
tryItOut("1e81");
tryItOut("L:switch(<y><z/></y>) { default: break;  }");
tryItOut("if(@foo <=  /x/g ) yield; else {return; }");
tryItOut("{let __proto__ = 0x99, set = @foo;return /*getter; }");
tryItOut("with(*::*)continue L; const __iterator__;");
tryItOut("M:switch(new [15,16,17,18].filter(function(y) { yield y; undefined;; yield y; },  /x/ )(__parent__.__noSuchMethod__ setter= [1,2,3,4].slice)) { (prototype = <x/>) }");
tryItOut("/*for..in*/for(var prototype(*.watch(\"prop\", (__iterator__).watch)) in (eval).call(((yield  /x/ )), __proto__ = <x><y/></x>)) /*for..in*/for((__parent__) in <x><y/></x>) {const __noSuchMethod__;; }");
tryItOut("/*infloop*/for(;  \"\" ; <><x><y/></x></>) {\f}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\f(__proto__) in  '' ) export __noSuchMethod__; const __proto__;");
tryItOut("__count__ = prop;");
tryItOut("export __iterator__;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let get in null) (null);\n");
tryItOut("/*infloop*/for(var __proto__; 0/0; <x/>) {; }\n const __iterator__;");
tryItOut("/*for..in*/M:for(var @foo in ((({}).__lookupGetter__)(constructor = __parent__|=this.__defineSetter__(\"__parent__\", eval))))export *;");
tryItOut("/*for..in*/for(var __parent__ in <x/>) ");
tryItOut("export *; const prop;");
tryItOut("L:if((<y><z/></y>())) { if ([11,12,13,14].filter) throw __iterator__;} else yield;");
tryItOut("/*infloop*/for(const prop; <x><y/></x>.(*); yield <x><y/></x>) gc()");
tryItOut("/*infloop*/for(var __noSuchMethod__ = (__iterator__ = ); ; void <y><z/></y>) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\t for  each([15,16,17,18].some((gc).apply, (window.isPrototypeOf(prototype))).__lookupSetter__(\"prototype\") in 3/0.__defineGetter__(\"__parent__\", *::*).unwatch(\"__parent__\")) {return <><x><y/></x></>;return 3/0 }");
tryItOut("let(__noSuchMethod__ = __proto__ = <><x><y/></x></>, __iterator__ = window) ((function(){let(__proto__ = window) ((function(){gc()})());})());");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; arguments; prop(3/0, @foo)) /*infloop*/L:for(prototype; true; <x><y/></x>) {throw constructor; }");
tryItOut("L:while(([,,]) && 0)return;");
tryItOut("/*infloop*/L:for((let (constructor, __count__ = *) this.unwatch(\"__parent__\")); yield ((#1=[#1#])()); (((((constructor:  /x/g  if ( '' ))) >>> <x><y/></x>)))) {if(*::*) {} else return __parent__;/*infloop*/while((this.__defineSetter__(\"let\", /a/gi)))do function  __parent__ (__proto__, __iterator__) { return <x><y/></x> }  while((<><x><y/></x></>) && 0); }");
tryItOut("if(1e+81) { if (<x><y/></x>.valueOf(\"number\")) {try { yield; } finally { __parent__ = <x><y/></x>; }  }} else ");
tryItOut("/*infloop*/while((__iterator__ = <x><y/></x>)){throw <y><z/></y>; }");
tryItOut("/*for..in*/L:for(let constructor in (()((yield+=new ((__iterator__.__iterator__))((<><x><y/></x></>.*))))))/a/gi");
tryItOut("do /*infloop*/L:for(var constructor; [1] &= false; __iterator__.(-1)) *::*; while(((yield <x/>, <x><y/></x>).yoyo([<x><y/></x>].map(Math.pow))) && 0);");
tryItOut("for(let y in []);");
tryItOut("with({constructor: (-1)}){var __count__;break M; }");
tryItOut("if(new window(<><>([15,16,17,18].filter('haha'.split, __noSuchMethod__))</></>, ({ __iterator__: __proto__, __proto__: prop }) = (<><x><y/></x></>[<x><y/></x>]))) {/*infloop*/L:for((-0) && this; (typeof  /x/ ); -.2.prototype) { \"\" ;export *; } } else /*infloop*/for([, , [, ({ __proto__: prototype }), __parent__, ]] = -0; ([arguments]); __parent__ = this.zzz.zzz) yield <><x><y/></x></>\n;");
tryItOut("while(((p={}, (p.z = null)())(true *=  /x/g )) && 0)export *;");
tryItOut("/*infloop*/for(var __parent__; yield new ([1,2,3,4].map)(); (gc)) {({a2:z2}); }");
tryItOut("var constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for([__proto__, prop] = (eval(\"__proto__;\", *::*)) in .(a/g, ({}).__lookupGetter__') {if({}) (<><x><y/></x></>); else  if ([1]) function(q) { return q; } else {yield; }*::*; } const prototype;");
tryItOut("with({__iterator__: this})\nreturn <x/>;");
tryItOut("for(let y in []);");
tryItOut("<><x><y/></x>\t</>;");
tryItOut("{let constructor, prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __count__ in window) throw window;");
tryItOut("let (prop, __iterator__) { throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let __iterator__ = undefined, __iterator__ =  '' ; in null) ");
tryItOut("switch(<>yyy</> , this.zzz.zzz) { default: switch() { default: return;break; yield;break;  }break; case this.__defineGetter__(\"constructor\", ([[1]]).__defineSetter__): switch(__iterator__ < <><x><y/></x></>) { case 9: case prop = <x><\ty/></x>: return __parent__;break;  }break; case 9: yield;break; case __iterator__ = true: break;  }");
tryItOut("/*infloop*/for(let ({ true: __proto__ }) = ((*::* if (<x><y/></x>))); (__iterator__ = <x/>\t); __parent__) yield; const prototype;");
tryItOut("if([,,] % __noSuchMethod__) export *;");
tryItOut("/*for..in*/for(const prop in (([1,2,3,4].map)(#3={a:#3#}.__defineSetter__(\"constructor\", function(y) { yield y; __parent__ = 1e+81;; yield y; }) :: window.__proto__ = <y><z/></y>)))yield;");
tryItOut("if(( /x/  for (__parent__ in <x/>))) yield;");
tryItOut("L: {__iterator__break ; }");
tryItOut("M:switch((eval(\"export __iterator__;\", <y><z/></y> >= #3={a:#3#}))) { case 2: case 0: while((0.1) && 0){break ;prop, __iterator__ = <y><z/></y>; }break;  }");
tryItOut("return  /x/g ;");
tryItOut("const constructor; const __proto__;");
tryItOut("if(window) {continue L;export __iterator__; }\nL:if(<x><y/></x>.(prop)) yield false; else gc()");
tryItOut("while((true) && 0)(*).__defineSetter__");
tryItOut("/*for..in*/for(prop in <x><y/></x>) return @foo;");
tryItOut("L:if(((uneval(#1=({__noSuchMethod__: prop}))))) { if ([15,16,17,18].sort(*::*, [,,]) + function::__parent__ = <>default: let prototype = <><x><y/></x></>\t;break; export *;break; case 6: ;break; case 4: var prop = <y><z/></y>;break; gc()case 3: [z1,,];break; </>) export prop; else {{var __iterator__, __iterator__;1e+81; }export *; }}");
tryItOut("export *; const prototype;");
tryItOut("yield <x><y/></x>;");
tryItOut("if(((/a/gi).apply).call(constructor, )) {(0/0); } else  if ((new Math.sin())) 0x99 else const constructor = __noSuchMethod__, prop = <x><y/></x>;");
tryItOut("while(() && 0);\nyield true;\n");
tryItOut("return constructor; const constructor;");
tryItOut("/*infloop*/for([__count__.__iterator__ if (*)]; (<>(null[<x/>])</>.((1.2e3.valueOf(\"number\")))); +0/0\n) <x/>");
tryItOut("/*infloop*/do {__parent__;/*infloop*/for(var __proto__; <x>y/const __count__ = *::*; ></x> if (this); (<x><y/></x> %= #3={a:#3#})) {{} } } while(<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>.(prop.__noSuchMethod__ = window));");
tryItOut("break ;");
tryItOut("if([,,z1].@foo) { if (<><x><y/></x></>.__lookupGetter__(\"constructor\")) switch(.2) { default: /*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in window) export *; } else {prop }}");
tryItOut("/*infloop*/M:for(__proto__; this; /*\n*/<x><y/></x>) {return window; }");
tryItOut("");
tryItOut("with((eval(\"export *;\", (((<><x><y/></x></> | false))(RegExp(<><x><y/></x></>))))))if((1 for (x in []))(<y><z/></y>.eval(undefined))) {return <><x><y/></x></>; } else  if (+<x/>(<y><z/></y>.(@foo))) var __parent__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (__iterator__ >> 1.2e3)) {export *;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (constructor.prop) in <x><y/></x> -= ({a2:z2})) {gc() }");
tryItOut("if(new (<><x><y/></x></>)().__noSuchMethod__ = (__parent__.__iterator__)) {return this;; } else  if ((-1)) window, prototype; else export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in  '' ) {return null;gc() }");
tryItOut("M:if(new ()([0/0prop, __iterator__])) {with((constructor = constructor));var prototype = @foo; }//h\n else  if (new (#1#)()) export *;");
tryItOut("L: {{break L;; } }");
tryItOut("/*infloop*/for(var constructor; (({__count__ setter: function(y) { yield y; /*for..in*/for(let prototype = *::* in __proto__) const __count__ = @foo;; yield y; } })); (__proto__.(false) .. 3/0 >>> *::*.__defineGetter__(\"constructor\", Function)) <= (uneval(~<><x><y/></x></>))) {with( /x/g )export *; }");
tryItOut("L: {export yield;<><x><y/></x></>; }");
tryItOut("let(__count__) { ({})");
tryItOut("/*infloop*/for(<x><y/></x>; 1e81; this) export *;");
tryItOut("let(__parent__ = <x/>) ((function(){gc()})());");
tryItOut("/*infloop*/while(function ([y]) { } >> @foo)if(__proto__ = @foo) gc()");
tryItOut("");
tryItOut("export *;\n<><x><y/></x></>;\n");
tryItOut("switch( '' ) { default: break; case 5:  }");
tryItOut("L: yield __proto__ = __noSuchMethod__; const <x><y/></x> ? false : <x/>;");
tryItOut("/*infloop*/L:for(this; <><x><y/></x></>//h\n; this) {__iterator__yield; }");
tryItOut("if((yield  /x/ )) (<x><y/></x>);");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = <x/> in this.__defineGetter__(\"__iterator__\", []).unwatch(\"constructor\")) {yield (false.yoyo(#1=[#1#]));/*infloop*/for((constructor); __count__ = undefined; function(id) { return id }.__defineGetter__(\"prop\", eval)) {/*infloop*/for(const __noSuchMethod__; <><x><y/></x></>; <y><z/></y>) {export *;return; } } }");
tryItOut("[[1]]['prop'] = prototype\n");
tryItOut("export __noSuchMethod__");
tryItOut("<x/>\n");
tryItOut("{__count__/*infloop*/for(var __parent__; (@foo); __count__ =  /x/g (<><x><y/></x></>)) const constructor = 3/0; }");
tryItOut("M:if(yield new  for each (constructor in this.yoyo(@foo))(__proto__, __proto__)) { if (yield (({ set constructor __iterator__ (__parent__, function::__count__) { yield Function }  }))) {<\fx><y/></x>/a/gi }} else { }");
tryItOut("{/*infloop*/for(<><x><y/></x></>; <x><y/></x>; <x><y/></x>) {yield;return -3/0; }<><x><y/></x></> }");
tryItOut("let(prop = <y><z/></y>) ((function(){(<x><y/></x>);})());");
tryItOut("<y><z/></y>");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut(";\n/*for..in*/for(const (prop) in ((/a/gi)((p={}, (p.z = null)()))))const constructor = <><x><y/></x></>, ;\n");
tryItOut("let __noSuchMethod__ = undefined, constructor = @foo;");
tryItOut("/*infloop*/for(const [1,2,3,4].slice; [11,12,13,14].sort; true.__lookupGetter__(\" \\\"\\\" \")) prototype = ({}), constructor = <><x><y/></x></>;");
tryItOut("{const __parent__ = 0; }");
tryItOut("/*infloop*/M:for((this.hasOwnProperty(\"constructor\")); (prototype = #3={a:#3#}); ((uneval(({}))))) {;export __count__; }");
tryItOut("for(let y in [5,6,7,8]) const ({ __proto__: __noSuchMethod__, prototype: __proto__ }), __count__;");
tryItOut("let (__parent__) { /*infloop*/M:for(const constructor; <y><z/></y>; this) {export constructor; } }");
tryItOut("yield undefined\n\nL: {var __noSuchMethod__ = __noSuchMethod__, __proto__ = [];if(<><zzz>1.2e3  </zzz></>) { if (<x><y/></x> , <y><z/></y>) {return; } else {export __proto__;(<x><y/></x>); }} }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __proto__] = (@foo != prop) in ((p={}, (p.z = [,])()))) M:with({__iterator__: #1=[#1=[#1#]]})( '' );");
tryItOut("while((eval(\"/*for..in*/for([__count__, prototype] = ((undefined\\n - this).__iterator__) in window.yoyo(this)) break ;\", [1,,])) && 0)/*infloop*/for(const prop; <><x><y/></x></>; <><x><y/></x></>) {yield; }");
tryItOut("__parent__ = prop;");
tryItOut("L:with((__proto__ = ({ __parent__: constructor, __noSuchMethod__: constructor })) = ({__proto__: [<><x><y/></x></> if (-1)], __proto__: (*) })){function::constructor = (delete <x/>[(<x><y/></x>.(<x><y/></x>))])export *; }");
tryItOut("{/*for..in*/for(const __count__ = this.zzz.zzz in <x/>) { /x/g  } }");
tryItOut("yield __noSuchMethod__.throw(1.2e3);");
tryItOut("/*infloop*/for(var prop; function  __iterator__ (constructor) { yield window } (#1=({prop: @foo}), undefined); false\n) /*for..in*/L:for(const __count__ in [,]) {let __count__, prop = *::*;export *; }");
tryItOut("with(('haha'.split() *= new (((function ([y]) { })() for (__iterator__ in true)))()) ^ (__proto__ = *::*.__noSuchMethod__ = __parent__.hasOwnProperty(\"__iterator__\")))/*infloop*/while(undefined)");
tryItOut("{ /x/ ; }\n(__count__);");
tryItOut("{} const __proto__;");
tryItOut("throw StopIteration;");
tryItOut("return new ((({}).hasOwnProperty).call)();");
tryItOut("L:if(yield prototype.hasOwnProperty(\"__parent__\")) { if ((-0) + <><x><y/></x></>) {gc()return  \"\" ; }} else export __parent__;");
tryItOut("/*infloop*/for(let prototype = undefined; <x><y/></x>; @foo) __proto__");
tryItOut("let (set) { yield null; }");
tryItOut("/*infloop*/L:for([11,12,13,14].some; switch(__iterator__ >>  \"\" ) { default:  } :: false[<y><z/></y>] / __parent__ =  '' ; (yield let(({ __iterator__: __count__, __count__: __count__ }) = <y><z/></y>.hasOwnProperty(\"__proto__\"), x::__count__) ((function(){*;})());)) {L: {} }");
tryItOut("switch(this in <x/>) { default: if(prop = [[]]) { } else  if ((new (__iterator__)())) {__iterator__ = true, constructor =  /x/ ;return; } const prototype;break; case 0: break; case ({a2:z2}): break; case (constructor.__iterator__): yield  '' ;with(false)return null; }");
tryItOut("let __count__ = this, constructor = *::*; const __noSuchMethod__;");
tryItOut("switch(<>gc()</>) { default:  }");
tryItOut("/*infloop*/while(<><bbb xmlns=\"<><x><y/></x></>.throw(5.0000000000000000000000)\"><!--yy--></bbb></>)\n;\n");
tryItOut("if(__count__ = 0.1) {Math.powreturn @foo; } else throw 3/0;");
tryItOut("L: ;");
tryItOut("/*for..in*/for(var prototype = (this.zzz.zzz)(eval(\"<><x><y/></x></>\", window)) in ({ get prototype()*::*\n }).__defineGetter__(\"__iterator__\", ([1,2,3,4].slice).apply)) {M:do yield; while((<x/>) && 0);{case 5: yield; } }");
tryItOut("if([<x><y/></x>].some(function () { return <><x><y/></x></> } )) __noSuchMethod__ else {let __proto__ =  '' ;let prototype; }if(<xxx>{__parent__}</xxx>) {/*for..in*/M:for(prop in window) return; }");
tryItOut("/*for..in*/for(const __proto__ = try { export *; } finally { break ; }  in *::*) ((p={}, (p.z = window)())), -3/0");
tryItOut("M:if(new Date(*)) { if (*::* < -3/0.__lookupGetter__(\"prototype\")) (<y><z/></y>);} else {return #1#; }");
tryItOut("do with((<x><y/></x>)){return;; } while((new @foo(window, [z1])) && 0);");
tryItOut("while((new Number(3)) && 0){let (__proto__) { __noSuchMethod__, __parent__;\n } }");
tryItOut("if((__proto__ = (new Number()))) {__iterator__;const __proto__, __iterator__ = window; } else {/*infloop*/while(null.constructor - (yield <x><y/></x>)){return; } }");
tryItOut("if(<><bbb xmlns:ccc=\"/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__ in <x><y/></x>) {let __parent__ = __count__, __parent__;var __parent__ = *::*, prototype = window; }\"><ccc:eee></ccc:eee></bbb></>) /*for..in*/for(let __iterator__ = __proto__ in undefined) yield 1.2e3;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:while(())L: {export __proto__;{} }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = 1e81 in [z1,,]) {export *; }");
tryItOut("");
tryItOut("{Function }");
tryItOut("return  /x/g ;");
tryItOut("L: throw null;");
tryItOut("if(((__parent__.constructor =  /x/g  .@ prototype) :: (__count__ = @foo))) { if ([((yield (#1=__parent__))) for each (__iterator__ in (constructor = <x><y/></x>)) for each (prop in  '' ) for (<x><\fy/></x>.prop in \f__count__) for each (constructor in false)]) /*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in window) {{} }} else {var __noSuchMethod__, prototype =  \"\" ; }");
tryItOut("/*for..in*/for((__count__) in undefined ? window : *::*) {continue L; }");
tryItOut("([,]); const prop;");
tryItOut("if(this.__defineSetter__(\"__iterator__\", function (__parent__, __count__)@foo).[, prop, prop] = 1e+81['__parent__'] = <y><z/></y> < <y><z/></y>.throw(\n0/0 != \f \"\" )) {[[1]];break L; } else  if (<zzz>*</zzz>) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 3/0) {;return <><x><y/></x></>; } } else {yield <x/>;throw <x><y/></x>\n }");
tryItOut("export *; const prop;");
tryItOut("__iterator__ = __count__;");
tryItOut("var __iterator__, __noSuchMethod__;yield;");
tryItOut("if(prototype.__proto__ setter= gc) try { return ({__proto__: undefined, __noSuchMethod__: <><x><y/></x></> }); } catch(prototype) { throw <y><z/></y>; } finally { throw __count__; }  else  if (((new Function).call((function ([y]) { } >>>=*::*), (-0).__defineSetter__(\"__count__\", null), [<x><y/></x>])).watch(\"__noSuchMethod__\", [1,2,3,4].map)) return\n\n/*for..in*/L:for(const __noSuchMethod__ = null in [1]) {return;export *; }\n else /*infloop*/do {} while(<><x><y/></x></>);");
tryItOut("switch((-3/0)) { default:  }");
tryItOut("gc()\nM:switch(++null) { default: break;  }\n");
tryItOut("with(<x><y/></x>)const __parent__, constructor = <><x><y/></x></>\n");
tryItOut("/*for..in*/for(let prototype in <><x><y/></x></>) {break M; }");
tryItOut("do {M:switch((function(y) { yield y; break M;; yield y; }())) { case #1#: break; switch(__count__) { default: break; case 8: case 0/0: ;break; export __parent__;case 0: case 6: break;  } } } while((new ([1,2,3,4].slice).call().__lookupSetter__(\"__count__\")) && 0);");
tryItOut("if(<><x><y/></x></>.__defineSetter__(\"__count__\", function(q) { return q; })) {export *;(<><x><y/></x></>); } else  if (prototype.__count__ setter= window) {yield __parent__;; }");
tryItOut("yield __proto__|= \"\" ;");
tryItOut("M:switch(({ __proto__: __proto__, prop: constructor }) = __proto__ = <x><y/></x>) { case prop++.hasOwnProperty(\"prop\") + ((({a2:z2}).propertyIsEnumerable(\"__proto__\")).isPrototypeOf(<x><y/></x>.watch(\"__noSuchMethod__\", Math.sin))): break; break;  }");
tryItOut("L:if(function(id) { return id }) { if (constructor = *::*) {const __noSuchMethod__ = <y><z/></y>;gc }} else {break ; }");
tryItOut("export *;");
tryItOut("with({__count__: [,,]}){break ; }");
tryItOut("gc()\t\n");
tryItOut("if(({ get __count__ prop (prototype)__proto__ = __parent__,  set __iterator__() { yield; }  })) /*infloop*/do {throw  '' ; } while(.2); else  if ((new Function(((p={}, (p.z = new #3={a:#3#}())())))) - (window.isPrototypeOf(\n((p={}, (p.z = <x><y/></x>)()))))) let(__count__ = undefined) { break M; else __iterator__ = [[]];");
tryItOut("let (__parent__, __parent__) { gc() }");
tryItOut("/*for..in*/for(const constructor in 0) return <x><y/></x>\t;");
tryItOut("try { throw function::__proto__; } catch(__count__) { try { return [z1]; } catch(__proto__ if (function(){})()) { export prototype; } catch(__noSuchMethod__ if (function(){gc})()) { let prop, prototype; }  } ");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("const __proto__ = undefined, constructor = <y><z/></y>;");
tryItOut("if(*::*.yoyo(new Function)) { if (#1=this.zzz.zzz) {with([<x><y/></x>].some(<><x><y/></x></>)){; }return; } else {/*for..in*/L:for(const constructor\t in (-0)) {constructor; } }}");
tryItOut("return;");
tryItOut("if([15,16,17,18].map((__parent__).watch, ( \"\" )())) yield <x><y/\f></x>; else  if (((prototype+=<><x><y/></x></>).__defineGetter__(\"prop\", Math.sin))) yield;");
tryItOut("L:with(constructor)break ;");
tryItOut("const prototype\n/*infloop*/for( '' ; ({a2:z2}); <><>\f<>x><y/></></></></>) yield undefined;");
tryItOut("/*infloop*/do {gc()gc() } while(<><x><y/></x></>);");
tryItOut("case 5: if(([11,12,13,14].sort)) {{} } else {constructor }/*infloop*/while(<><x><y/></x></>)/*for..in*/for(const  \"\" ; in ((function (prototype) { return -1; } )(@foo)))export *;");
tryItOut("/*for..in*/for(const prototype in (((function (__proto__, __count__) { yield ((p={}, (p.z = undefined)())) } ).apply)((__parent__ = prototype))))(<><x><y/></x></>);");
tryItOut("switch( /x/g ) { default: break;  }");
tryItOut("throw StopIteration;");
tryItOut("M:switch(<><x><y/></x></>\n += __count__) { case 1: {}case 1: /*for..in*/M:for(const [__count__, __proto__] = #2=({__parent__: window}) in <x><y/></x>) {__proto__;; }break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let this.__defineGetter__(\"__count__\", ({}).__lookupGetter__)['prototype'] in  %= ({}).hasOwnProperty) {;[1,2,3,4].slice }");
tryItOut("throw  /x/ \nif(<x><y/></x>) return -1; else  if ( '' {__count__ }\nyield;\n");
