tryItOut("switch(this) { case __count__: let constructor =  /x/g , __proto__ = @foo;break; (:);break;  }");
tryItOut("with(new {}(window, <><x><y/></x></>).isPrototypeOf(__noSuchMethod__ = <><x><y/></x></\f>)){}");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("L:while((<><x><y/><\f/x></>) && 0){return <x><y/></x>; }");
tryItOut("{return <y><z/></y>; } const __noSuchMethod__;");
tryItOut("M:while(([11,12,13,14].some) && 0)prop;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __count__] = __proto__ in  \"\" ) while((new Boolean(constructor.__parent__ setter= [1,2,3,4].slice)) && 0){L:do var __iterator__, __count__ = __noSuchMethod__; while((*) && 0);export __proto__; }");
tryItOut("/*infloop*/while(<x><y/></x> :: null)export *;");
tryItOut("/*for..in*/for(const prototype = prototype in <x><y/></x>) {return <><x><y/></x></>; }\n");
tryItOut("let __iterator__, __proto__ = *::*;return;");
tryItOut("if(((<><x><y/></x></> .@ this++).__proto__)) {var __count__ = *::*, __count__; } else  if (({ get __iterator__ __parent__ (__parent__, constructor) { return \t<x><y/></x>.(this) } , prototype: <y><z/></y>\n })) yield undefined;");
tryItOut("switch(*) { default: this;break;  }\n{}");
tryItOut("L:if(true) this.zzz.zzz; else  if (\t(constructor) = new arguments()) prototype");
tryItOut("if(__parent__.__noSuchMethod__ getter= ((prototype.__proto__ setter= function (__iterator__) { yield <x><y/></x> } )).__defineSetter__) /*for..in*/for([prop, __iterator__] =  .(__count__%=prop) in <y><z/></y>) if(null) ; else {{}yield  /x/ ; } else M:do {{} } while((__proto__.prop = [,]['__noSuchMethod__'] = (\n__proto__)) && 0);");
tryItOut("L:if((<x/>.throw(*::*))) { if (<><bbb xmlns:ccc=\"__iterator__\"><ccc:eee></ccc:eee></bbb></>) return; else {export __parent__;var __iterator__ = <><x><y/></x></>; }}");
tryItOut("if(__proto__ ? 3/0 : __iterator__) {/*infloop*/while(prototype = window, __parent__)prop, constructor = @foo;throw 0x99 } else {yield;switch(({constructor getter: (<><x><y/></x></>).watch, function (prototype)<x/>: 3/0 })) { case 5: return\nyield; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__(*::*) in <x><y/></x>) {gc() }");
tryItOut("with({}) { export __parent__; } ");
tryItOut("/*infloop*/do {do {(true); } while((@foo) && 0);/*for..in*/for(__proto__ in ((new Function)(5.0000000000000000000000))){break ;{} } } while((yield -<x><y/></x> in let prototype, constructor;));");
tryItOut("do {} while(( /* Comment */(<x><y/></x>)(<x><y/></x>.hasOwnProperty(\"__proto__\"), <x><y/></x>)) && 0);");
tryItOut("/*for..in*/for(__parent__ in ((eval).valueOf(\"number\"))) {{}throw <><x><y/></x></>; }");
tryItOut("break ;\nexport *;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  /x/g ) {yield <y><z/></y>;prototype; } const __iterator__\f;");
tryItOut("if(((function(y) { yield y; throw [[]];; yield y; }).call(<x><y/></x>,  '' , *)).__proto__ = (__count__.__lookupSetter__(\"__noSuchMethod__\"))) { <><ccc:ddd><!--yy--></ccc:ddd></> } else  if ((__count__ = new (<><x><y/></x></>)(0.1, <y><z/></y>).prop)) {export *;/*infloop*/for(({}); 1.2e3; with({}) { {} } )  } else {undefined; }");
tryItOut("let (__noSuchMethod__ = [<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>\r]) { return constructor; }");
tryItOut("__iterator__ = null -  \"\" , __noSuchMethod__ = null");
tryItOut("((-0));");
tryItOut("__noSuchMethod__;");
tryItOut("while((__parent__ = (eval(\"<x><y/></x>\", *::*))) && 0)if(window) ({}).hasOwnPropertyyield <><x><y/></x></>;");
tryItOut("M:with((+window)){}");
tryItOut("/*infloop*/for(prototype = (this.__defineSetter__(\"function::prototype\", @foo) ^= this.__defineGetter__(\"prototype\", gc)); (this.__defineGetter__(\"prototype\", eval)); (Date(new [11,12,13,14].filter([(1.2e3.__lookupGetter__(\"__parent__\"))].filter((-0))), [] |= <><x><y/></x></>))) {L:do { } while(((<>prototype</>)) && 0);({}).hasOwnProperty\nreturn function ([y]) { }; }");
tryItOut("/*infloop*/L:for(<x><y/></x>; <><x><y/></x></>; <x><y/></x>) {export *; }");
tryItOut("with({__iterator__: <x><y/></x>}){ }");
tryItOut("return;");
tryItOut("while((__parent__-=#1=@foo) && 0)M:switch([-3/0].some((new Function(\"export __parent__;\")))) { case ([15,16,17,18].filter(new Function, <><x><y/></x></>)): gc()break;  }");
tryItOut("for(let y in [5,6,7,8]) yield prototype;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((1 for (x in [])))(<zzz>new ([<><x><y/></x></>].filter([,,]))((yield #1#),  /x/g )</zzz>)))");
tryItOut("export *;");
tryItOut("L:if(new (new [1,2,3,4].map(null))()) { if ((__proto__)()) return;} else /*for..in*/for(__count__ in (([({ get __proto__(\t__parent__, __count__)<y><z/></y> }) for each (prop in 033) if (<><x><y/></x></>)])(3)))constructor, __parent__ = <y><z/></y>;");
tryItOut("if(true) return; else {var function::<y><z/></y> = <x/>, __noSuchMethod__;__noSuchMethod__ = 3/0; }");
tryItOut("/*for..in*/M:for(let [__parent__, prop] = __noSuchMethod__ = new Function() in (<xxx>{__noSuchMethod__}</xxx>.((@foo)[__parent__ = this]))) /*infloop*/M:for(constructor;  '' .__defineGetter__(\"__noSuchMethod__\", (new Function).apply) >>>=(let (__count__ = 1.2e3) true) + (prototype = *); --this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; ; yield y; })) {gc()return <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in null) {yield false;{} }");
tryItOut("switch((\n<x/>)) { case <x><y/></x>.prototype = <x><y/></x>:  '' ; }if( \"\" ) yield; else  if (constructor) ");
tryItOut("for(let y in [5,6,7,8]) return prototype.__noSuchMethod__ = *::*.__defineSetter__(\"__parent__\", Math.pow);");
tryItOut("/*infloop*/do /*infloop*/while((<><x><y/></x></>.__lookupSetter__(\"prop\")\r.__noSuchMethod__))<><x><y/></x></>; while( '' .__defineGetter__(\"__noSuchMethod__\", new Function));");
tryItOut("try { return <><x><y/></x></>; } catch(__noSuchMethod__ if (function(){return <y><z/></y>;})()) { {} } catch(constructor) { export *; } \nL:if((<y><z/></y> == <><x><y/></x></>) < ((uneval((new 5.0000000000000000000000()))))) { if (prop = *::*) ; else {/a/gi; }}\n");
tryItOut("__noSuchMethod__ = {}.__proto__ = __noSuchMethod__;");
tryItOut("yield;");
tryItOut("throw StopIteration;");
tryItOut(" if (<x><y/></x>)\nyield true;\n");
tryItOut("return;");
tryItOut(" { true } ");
tryItOut("/*for..in*/for(let __parent__ = (*::* >>> <y><z/></y>) in __proto__) gc()");
tryItOut("/*infloop*/while(__count__.__iterator__)__iterator__;");
tryItOut("if(yield ) return  \"\" ; const constructor; else {if(<y><z/></y> >>> undefined .@*:: *) { if ((new (<x><y/></x>)())) throw @foo;} else {break M;return *::*; } }");
tryItOut("L\f: {continue M;var prop = <x><y/></x>; }");
tryItOut("/*for..in*/L:for([prop, prototype] = undefined in [new function ()[1]()].map(function () { /*infloop*/for(const __proto__ = true;  /x/ ; [1]) {return this;const prop = <x><y/></x>, prototype; } } )) {{} }");
tryItOut("/*infloop*/for(__parent__; prop.get.prop; <><x><y/></x></> :: (__iterator__|=[1])) { '' ; }");
tryItOut("{this;yield; }\n");
tryItOut("/*infloop*/for(var prop; (RegExp()); new (/a/gi).call(__iterator__ = <x><y/></x>, #3={a:#3#})) {new Functionyield; }\nvar __count__;");
tryItOut("if(window) { if (<x><y/></x>) {return __count__;export prop; } else const __proto__;}");
tryItOut(" const __iterator__;");
tryItOut("const setter;");
tryItOut("/*infloop*/do const constructor = 5.0000000000000000000000, __iterator__ = <x><y/></x>; while(__parent__.prop)\n");
tryItOut("if(void <><bbb xmlns:ccc=\"1.3.__lookupSetter__(\"prototype\")\"><ccc:eee></ccc:eee></bbb></>) break ;");
tryItOut("/*for..in*/for(prototype((this.__count__)) in ((new Function)((this.__defineGetter__()))){}");
tryItOut("with({}) function(q) { return q; }L:switch((__iterator__.constructor setter= (new Function(\"break ;\")))) { case : const __iterator__ = false;break;  }");
tryItOut("/*infloop*/for([] = new (#1=[<x><y/></x>])(eval(\"const __noSuchMethod__ = *, __parent__;\", <><x><y/></x></>)); gc(); new (function  __iterator__ () { yield ({__parent__: (/a/gi).call()}) } )(__iterator__ = [].eval(*))) {({__parent__:  \"\" }); }");
tryItOut("M:with((__parent__ = <x/>));");
tryItOut("let(constructor) { prop = __proto__;");
tryItOut("{} const prop;");
tryItOut("throw function(id) { return id };return;");
tryItOut("if(([11,12,13,14].filter)) { if (<><x><y/></x></>) {export constructor;throw @foo; }} else export *;");
tryItOut("for(let y in []);");
tryItOut("switch(<><x><y/></x></>) { default: break; ;break; case <x><y/></x>: gc()break; export __proto__;Math.powbreak; return <><x><y/></x></>;break; break; break; case 8: ([[]]);break; case <><x><y/></x></>: gc()gc()break; case __iterator__: break; case 1e4: break; break; break; ;break;  }");
tryItOut("M:if(<x><y/></x>) {Math.sin } else  if ( '' ) return;");
tryItOut("{return; }");
tryItOut("let constructor, function::prototype;\n\n");
tryItOut("{@foo;(({})); }");
tryItOut("try { for(let y in []); } catch(__count__ if (function(){const __proto__ = <><x><y/></x></>;\n\n})()) { let(__count__ = (prototype)(), __iterator__) ((function(){let(prop, __iterator__) { break ;})()); } catch(constructor) { try { return;\f } catch(__count__) { gc() } finally { yield; }  } ");
tryItOut("with({}) { with({}) { return; }  } ");
tryItOut("/*infloop*/for(let prototype; __count__ = undefined\n; ({gc() } % <x/>).__lookupGetter__(\"__proto__\")) {'haha'.split }");
tryItOut("if(new *::* <<= false(yield <><x><y/></x></>)) switch(constructor = __parent__) { case <x/>: break; case <>[15,16,17,18].some((1 for (x in [])), null).throw(__noSuchMethod__: #0=[<><x><y/></x></>] = <x><y/></x>)</>: break; case 0: break; break;  } else {/*infloop*/while(([z1].@foo)){export *;var prop = this; } }");
tryItOut("constructor = eval(\";\", __noSuchMethod__ = ({constructor: <x/>})), ({ __noSuchMethod__: [({ __iterator__: [, , ], __parent__: constructor }), , ], __noSuchMethod__: __iterator__ })");
tryItOut("/*for..in*/for(<><x><y/></x></>.prototype in (__iterator__.prop ? (uneval(<y><z/></y>)) : function(q) { return q; })) {/*infloop*/for(prop;  \"\"  >>>=true; new window(@foo).valueOf(\"number\")) ; }");
tryItOut("with({__noSuchMethod__: ((p={}, (p.z = (new function  __proto__ (__noSuchMethod__) { yield 1e81 } (@foo, <x><y/></x>)))()))})L:with({prop: (window & __noSuchMethod__)}){/*for..in*/for(__parent__ in ((#1#)([z1,,])))export __proto__; }");
tryItOut("/*infloop*/for(let ({ __parent__: ({ __count__: ({ constructor: __proto__, function::prop: ({ __iterator__: __noSuchMethod__, __count__: __parent__ }) }), __iterator__: ({ __iterator__: [prototype, , __parent__, , constructor] }) }) }) =  /* Comment */new 'haha'.split((__iterator__ = <x><y/></x>), constructor = [[1]]); (@foo++).*; let (prop, ({ __noSuchMethod__: __iterator__, __count__: prototype }) = window) (this.__defineSetter__(\"{}\", Math.sin))) export *;");
tryItOut("function(q) { return q; }\n<x><y/></x>\n");
tryItOut("return (export *);");
tryItOut("let ((*.watch(\"constructor\", (<x/>).call)) = __iterator__%=-0\n) { let (prop = prototype.constructor setter= new Function, false = (__parent__ = 0/0)) { yield; } }");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(this.__defineSetter__(\"set\", (1 for (x in []))); 4..watch(\"constructor\", function(q) { return q; }); __parent__ = <><x><y/></x></>) {export *;; }\nyield this;throw <x><y/></x>;");
tryItOut("if( \"\" ;+= /x/ ) {  } else  if ([(__proto__.(<x><y/></x>)) if (__noSuchMethod__)]\f) gc() else {if([]) {gc() } else  if (<x/>) {break ;const __parent__; } }");
tryItOut("for(let y in [5,6,7,8]) yield (3.throw(window));");
tryItOut("{export *;return this; }");
tryItOut("do {return; } while((<y><z/></y>) && 0);");
tryItOut("/*for..in*/for(var (prop) in *::*) /*infloop*/L:do (Function).apply while((-1));with({prop: <x><y/></x>})return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var 1.2e3['__iterator__'] in prop.__iterator__ = this != <x/>) return;");
tryItOut("L:with(*::*.@foo){;return undefined; }");
tryItOut("if(<><x><y/></x></>.throw(prop)) {} else  if (constructor = <x><y/></x>) {throw false; }");
tryItOut(" { yield 033.yoyo(false).watch(\"__iterator__\", <x><y/></x>)\t } ");
tryItOut("/*infloop*/for(var __noSuchMethod__ = <x/>; @foo; <><x><y/></x></>) \r{yield;yield 4.; }");
tryItOut("with({}) ;");
tryItOut("this.zzz.zzz;");
tryItOut(" { return (constructor = this) } \n/*infloop*/for(function::__parent__ = @foo.__noSuchMethod__; (function::prototype = (function ([y]) { })()); (__count__.prototype = __iterator__)) /a/gi const constructor;");
tryItOut("/*for..in*/for(__iterator__ in ((function  __proto__ () { return null.watch(\"__parent__\", ({}).__lookupGetter__) %= null } )())){gc()\n{}throw [,] |= <x><y/></x>; }");
tryItOut("if(function::get = <><x><y/></x></>) {__iterator__ =  '' , prototype; } else  if (([15,16,17,18].map([,,z1], (__proto__.prop getter= <x><y/></x>)))) {continue ; } else ( '' );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__.__noSuchMethod__ in (this.zzz.zzz)) {export __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in 3.141592653589793) {/*for..in*/for(const [__proto__, __iterator__] = ((function ([y]) { })() <= 1.3) in prop) {__noSuchMethod__return this; } }");
tryItOut("let __iterator__, prototype;");
tryItOut("Math.sin");
tryItOut("/*for..in*/M:for(var __iterator__ = ({prop: __count__,  get __parent__ function::__iterator__ () { {} }  }) in ([z1,,].@foo)[-new (<y><z/></y>)(<x/>, #1=[#1#])]) {__count__.__count__ }");
tryItOut("while(((#2=[<><x><y/></x></> .. this])) && 0){throw <x/>; }\nfunction (__parent__) { yield false } \n");
tryItOut("if(*) (<x/>); else  if (\t__iterator__|=<y><z/></y> .@ .prototype) export constructor;M:if(<x/>) { if (true) return;} else const prop;");
tryItOut("__proto__");
tryItOut("/*infloop*/for((((this\f >>> <x><y/></x>)\n)[(__iterator__.__iterator__ getter= (@foo).watch)]); 1e+81 >>= 'fafafa'.replace(/a/g, [1,2,3,4].map); (([[]])([1]))) {yield;L:if(<y><z/></y>) { if (window) {export __noSuchMethod__; }} else {let __count__;break ; } }");
tryItOut("if(prop.__iterator__) continue ; else  if (null.eval(<><x><y/></x></>)) ({}).__lookupGetter__ else export __proto__;");
tryItOut("/*infloop*/for(var __iterator__; (__proto__ = __proto__) in [11,12,13,14].sort; eval(\"export *;\", ( /* Comment */4.) & [z1] ^= @foo) | @foo.propertyIsEnumerable(\"__count__\")) {[1,2,3,4].mapyield; }");
tryItOut("/*infloop*/for(const ({ __parent__: ({ __proto__: ({ prop: __noSuchMethod__, __count__: __proto__ }) }) }) = new Number(/*\n*/constructor.prop = \n0.1); <><><x><y/></x>yyyyyy</></>; (1e+81).@*.__defineSetter__(\"__noSuchMethod__\", ((break )).__defineSetter__)) const __proto__ = constructor;");
tryItOut("do M:switch(prototype.isPrototypeOf(<x><y/></x>)) { case <x><y/></x> * <y><z/></y>: return\nbreak; default: ;break; return <><x><y/></x></>;break;  } while(((([15,16,17,18].sort(function (__proto__)true, __proto__)).watch(\"__count__\", null) @ this.__defineGetter__(\"__parent__\", (1.2e3).call))) && 0);");
tryItOut("switch(__proto__%=<x/>) { default: 0; }");
tryItOut("/*infloop*/for((function(q) { return q; })(window); ({__count__ setter:  /x/  }); window.*) {var constructor, prototype = *;/*infloop*/while( if \n(null))gc }");
tryItOut("if(<y><z/></y>) { if (*) yield; else export __noSuchMethod__;}");
tryItOut("/*infloop*/L:do {M:if(null) {(__proto__);return; } else  if (*::*) export __parent__; else {{} }/*for..in*/M:for(const __count__ = (<x><y/></x>.__proto__)\n in ) gc() } while(function  __noSuchMethod__ (__noSuchMethod__, __noSuchMethod__) { return * } (*::*, <x><y/></x>) & (<><x><y/></x></> + [z1]));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in eval(\"window\", [undefined <<  \"\" ].sort(__count__))) {export __iterator__; }");
tryItOut("L:if(new ! /x/g (([(@foo.eval(this.zzz.zzz))].some(function  prototype (__count__) { return (void __iterator__) } )), +(*).call(yield, null))) yield; else  if ((({__proto__: ([,,z1].__defineGetter__(\"constructor\", (({}).hasOwnProperty).apply).propertyIsEnumerable(\"prototype\"))}))) {if((({__parent__ setter: 3 }))) {} else  if (throw [1]) let __count__; }");
tryItOut("yield;");
tryItOut("with({function::prototype: 3/0})yield constructor;");
tryItOut("yield <x/>;");
tryItOut("(constructor.__noSuchMethod__) = __noSuchMethod__;");
tryItOut("with(prop)/*for..in*/for(const constructor = <{__noSuchMethod__}><!--yy--></{__noSuchMethod__}> in <y><z/></y>) gc()");
tryItOut("if(<><x><y/>\r</x></>) var prop, F;");
tryItOut("return;");
tryItOut("(__noSuchMethod__);");
tryItOut("let(__parent__ = eval(\"*\", prop), __proto__ = __noSuchMethod__ = <><x><y/></x></>) ((function(){for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) __noSuchMethod__ = __count__;})());");
tryItOut("return @foo;");
tryItOut("/*for..in*/for([constructor, __parent__] = ( /x/  in 033) in __parent__.([z1]) - new (<x><y/></x>)(<><x><y/>/*\n*/</x></>)) {{(({a2:z2})); }return *; }");
tryItOut("export constructor;\n{<x><y/></x>; }\n");
tryItOut("M:if(( :: new this).*) {{} }");
tryItOut("M:if(({})) do ;\f while(([[1]] &= <x/>.hasOwnProperty(\"__proto__\")) && 0);");
tryItOut("/*infloop*/M:do return;\nexport \t*;\n while(#1=({constructor: ([[z1,,]].sort(new Function))}));");
tryItOut("while((({__parent__: <x><y/></x> })) && 0)export __proto__");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("while((window\t) && 0)gc()");
tryItOut("let (prototype) { <x><y/></x>; }");
tryItOut("if(*.propertyIsEnumerable(\"prop\")) { if (Number()) var __noSuchMethod__ =  /x/g ;} else {this;prop; }");
tryItOut("/*for..in*/for(let [z1].//h\nconstructor['prop'] in ([#3={a:#3#}])) {throw *;\nreturn;\nreturn this; }");
tryItOut("var __iterator__ = -3/0, each;__count__ = *::*;");
tryItOut("let (__proto__, [({ __noSuchMethod__: __count__, __parent__: __count__ })]) { M:if((prototype = *.watch(\"prop\", ({}).__lookupGetter__))) { if ({yield;; }) gc() else {var __count__; }} }");
tryItOut("with({function::__iterator__: ({ prop: ({ constructor: constructor }), constructor: ({ prototype: prototype }) }) = [[, , ], __count__, prop, , ]})\t{; }");
tryItOut("with({}) { export __noSuchMethod__; } ");
tryItOut("((-1)); const prototype;");
tryItOut("L:while((@foo) && 0)__count__");
tryItOut("let __proto__;");
tryItOut("let (constructor = <><x><y/></x></>.__defineSetter__(\"__proto__\", [1,2,3,4].slice) for each (__parent__ in  '' ) for (__proto__ in  /x/ )) { return [[1]]; }");
tryItOut("L:do throw this; while((__count__) && 0); const prototype;");
tryItOut("var getter;");
tryItOut("/*infloop*/M:while(0/0)prop");
tryItOut("let ([, ], constructor) { if([11,12,13,14].map) {continue M;yield; } else {[1,2,3,4].mapexport *; } }");
tryItOut("if(<><!--yy--></>) { if (new <x><y/></x>() |= (Math.pow).call(<><x><y/></x></>)) {return;L:with(undefined){throw .2;yield <y><z/></y>; } }} else throw {}");
tryItOut("do yield false; while((#3={a:#3#}) && 0);");
tryItOut("M:with(/*infloop*/M:for(let __proto__ =  /x/ ; default: break; case 7: break; ; __count__) return)yield <><x><y/></x></>;");
tryItOut("if(({__noSuchMethod__ getter: Math.sin })) { if ([15,16,17,18].some(((p={}, (p.z = window = this)()).__lookupGetter__(\"prop\")).__defineSetter__, (++prototype+=window.@foo)).__defineSetter__(\"__proto__\", (eval).apply)) /*for..in*/for(const [__parent__, __proto__] = (+__proto__|=<x><y/></x>) in  /x/g ) switch(<y><z/></y>) { case 7: break;  } else /*infloop*/do export *; while(<><x><y/></x></>.__parent__);}");
tryItOut("if([this.__defineSetter__(\"__iterator__\", Function).constructor = @foo.__defineGetter__(\"constructor\", (({a1:1})).__defineSetter__)].map((({ __iterator__: __noSuchMethod__ }) = (<y><z/></y>)()))) {let __parent__ = <x><y/></x>;yield; }");
tryItOut("if(this.__defineSetter__(\"prototype\", ({}).__lookupGetter__)) export __parent__; else  if ( /x/g  || <><x><y/></x></>++ % (<> </> && <xxx>{__count__}</xxx>.((new null())))) {L\t:if(null) { if (({prop getter: [1,2,3,4].map })) {( \"\" );continue L; } else function(q) { return q; }} }");
tryItOut("throw <><x><y/></x></>;\f\nif(#0=({prop: this})) const x::__noSuchMethod__, constructor = *::*; else  if ((uneval(@foo))) yield __count__; else export __noSuchMethod__;");
tryItOut("yield\n{var constructor = constructor; }");
tryItOut("L: export *");
tryItOut("const __count__ = <><x><y/></x></>, prototype = <y><z/></y>; const constructor;");
tryItOut("export constructor; const ({ __iterator__: ({ prototype: ({ __iterator__: \t__proto__ }) }) })");
tryItOut("if(1e81) {} else ;");
tryItOut("if(<xxx {constructor}={function::prototype} /> .. eval(\"({__iterator__ setter: window,  get <x/> __parent__ () { yield <y><z/></y> }  })\", delete  '' )) { if (({ prop: __iterator__ }) @ <x><y/></x>.yoyo(<x/>)) /*for..in*/for(let prop =  /x/  in this.zzz.zzz) {}} else {while((yield ({a1:1})) && 0){return;throw <x><y/></x>; }if(({__parent__: @foo})) {let prototype, x::__proto__ =  \"\" ; } else  if ( \"\" .__defineGetter__(\"__iterator__\",  /x/ )) return; else {{} } }");
tryItOut("if( ) yield; else var __count__ = <x/>;");
tryItOut("if(__count__) \f{return 1.3; } else  if (window) {break L; } else {let __parent__;return true; }");
tryItOut("/*for..in*/for(var __iterator__ = this >= <x><y/></x> in null + *::* in __iterator__ *= prop) /*for..in*/for(const (<><x><y/></x></>.@*)((-1)) in constructor = <y><z/></y>) ");
tryItOut("yield 3.141592653589793.throw(<x><y/></x>)\n/*for..in*/for(const __proto__ = (undefined.hasOwnProperty(\"prop\").throw(__parent__ = this)) in [<x/> for (prototype in 4.)]) {(<x/>); }");
tryItOut("/*infloop*/do {if(<><x><y/></x></>.__defineSetter__(\"prop\", function(q) { return q; })) { if (window.yoyo(@foo)) {null } else yield <x/>;}return __noSuchMethod__; } while(this.__defineSetter__(\"prototype\", ({}).__lookupGetter__));");
tryItOut("{/*infloop*/for(var ({ __count__: __iterator__ }) = +<x/>; (yield *); *.__noSuchMethod__ getter= (this).call) {export *; } }");
tryItOut("/*for..in*/for(const prototype = window in __proto__) <><x><y/></x></>");
tryItOut("/*infloop*/for(let [] = try { /*infloop*/M:while( /x/g ){ } } finally { let([({ (__noSuchMethod__): ({ __parent__: (\n{ __count__: __proto__ }) }), prop: prop })], __iterator__) { for(let y in [5,6,7,8]) __parent__ = constructor; } ; __noSuchMethod__ = (window / null); prototype = window) let (\f__parent__, __count__ = <x/>) { continue ; }//h\n");
tryItOut("if(({__count__: true, constructor setter: undefined })) { if (__parent__.prop setter= function (constructor, __proto__) { yield this } ) {throw 1.3; } else eval}\n");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("L:if(({ __noSuchMethod__: __iterator__ }) = new (Math.sin)(eval(\"return;\", __count__), constructor)) { if ([\tundefined.propertyIsEnumerable(\"constructor\")\n for (__noSuchMethod__ in [].throw(undefined)) if (<x><y/></x>)]) ; else {__noSuchMethod__;\n/a/gi }}");
tryItOut("L:if(#3={a:#3#}) export *; else gc()");
tryItOut("if(new (({}).hasOwnProperty)(<x><y/></x>, constructor)) {(@foo); } else  if (<><x><y/></x></> .@x:: 0/0) throw prototype; else {throw *::*;{} }\nlet(constructor) ((function(){;})());\n");
tryItOut("switch(1e4) { default: __noSuchMethod__;case -1: *::*break; var __noSuchMethod__ = @foo;break; case 9: break ;break;  }");
tryItOut("/*for..in*/M:for(let constructor = __proto__.({}) in ((yield (<x/>.propertyIsEnumerable(\"prop\"))) for (__iterator__ in @foo) for (__noSuchMethod__.prop in (-0)) if (1e-81))) {__iterator__; }");
tryItOut("/*infloop*/for(const prop = yield ( '' .__lookupGetter__(\"__parent__\")); ((yield 1.3) >>>= /x/g ); __proto__ = <x/>) /*for..in*/for(let __iterator__ = (yield (p={}, (p.z = __count__ = window)())) in (<x><y/></x>.prototype)) throw <x><y/></x>;");
tryItOut("{with(window.yoyo( \"\" )){gc(); } }");
tryItOut("/*for..in*/L:for(var constructor in <x><y/></x>) {{} }");
tryItOut("/*infloop*/for(var ({ __proto__: ({ __proto__: [, ({ prop: ({ __iterator__: __noSuchMethod__ }) }), , , ], __count__: __parent__ }) }) = eval(\"new Exception().__defineSetter__(\\\"__count__\\\", <><x><y/></x></>)\", ); [3.141592653589793 >>> [[]] for (__count__ in #1=[#1#])]; eval(\"throw constructor;\", <><x><y/></x></>)) break ;");
tryItOut("undefined['__count__'] = constructor;");
tryItOut("with({__iterator__: this});");
tryItOut("yield *::*.constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in [,,z1]) {(undefined);yield <><x><y/></x></>; }");
tryItOut("{}");
tryItOut("{break ;if((eval(\"this\", 5.0000000000000000000000))) {({}).__lookupGetter__export __parent__; } }");
tryItOut("/*infloop*/for((__noSuchMethod__ = prop); Object([,,]); __parent__ = 4.) let __parent__ = 033, __proto__;");
