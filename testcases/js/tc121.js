tryItOut("/*for..in*/for([__parent__, prototype] = (this.zzz.zzz.__lookupSetter__(\"__noSuchMethod__\")) in (let (prototype, __count__ = [1], __proto__) <y><z/></y>)) {if([ /x/  for (__count__ in <x><y/></x>)] >> ((<x/>)())) yield; else  if ([,].propertyIsEnumerable(\"prop\")) let prototype = *::*; }");
tryItOut("if(<bbb xmlns=\"this\">yyy</bbb>) {<></>gc() } else {throw __parent__; }\nreturn;\n");
tryItOut("if(~0/0 <= (true.*)) {(1e+81);const __proto__; } else  if (new ((this.__defineGetter__(\"constructor\", ('haha'.split).apply)))(<bbb xmlns=\" \"\" \">yyy</bbb>.(@foo))) {yield arguments; } else { }");
tryItOut("switch([1e81]) { default: var __iterator__, function::constructor = 1.3;case <><x><y/></x></>.__lookupSetter__(\"prototype\"): break L;break;  }");
tryItOut("{/*infloop*/for(let __proto__ = null; __noSuchMethod__; <x><y/></x>) {{}throw undefined; }export __count__; }");
tryItOut("try { Math.sin } finally { ; } ");
tryItOut("M:if((prototype = (this.isPrototypeOf(<><x><y/></x></>)))) { if ( /x/g .yoyo(this)\n) {export __proto__if( \"\" ) (0.1); else export __parent__; }} else ");
tryItOut("return true;");
tryItOut("L:if(3/0.valueOf(\"number\")) { if (<><bbb xmlns:ccc=\"__parent__ = ({ __proto__: __count__, __parent__: __noSuchMethod__ })\"><ccc:eee></ccc:eee></bbb></>) {/*for..in*/for(const [__count__, __parent__] = this.__defineSetter__(\"__proto__\", ((function ([y]) { })()).apply) | null in (%.@*)) return;/*infloop*/M:do ; while(prototype|=1e+81); }} else {continue M; const __parent__;\rreturn ([15,16,17,18].map(function(y) { yield y; var prototype = <y><z/></y>;; yield y; }, #3={a:#3#})); }");
tryItOut("if(new (<x><y/></x>)([z1], 3.141592653589793)) {(<x/>); } else  if (((function(y) { yield y; return <><x><y/></x></>;; yield y; })())) ({}).__lookupGetter__");
tryItOut("/*infloop*/for(<x/>; *::*; <x><y/></x>) D");
tryItOut("/*for..in*/for(let [function::prototype, __iterator__] = *::*.yoyo(prototype) in [1]) yield;");
tryItOut("__noSuchMethod__ = true");
tryItOut("/a/gi");
tryItOut("/*infloop*/do L: Math.pow while(1.2e3()); const x::prototype;");
tryItOut("/*infloop*/for(let constructor; ((new [[]](#1=[#1#], <y><z/></y>)) -= [<x><y/></x>].sort(gc)); ( /* Comment */__parent__)) {return (prototype.__parent__ setter= <x/>);L: __parent__: x::__noSuchMethod__; }");
tryItOut("prototype = __proto__;");
tryItOut("/*for..in*/M:for(let constructor = __parent__ = <x/>.hasOwnProperty(\"__parent__\") in typeof <><x><y/></x></>.isPrototypeOf(<><x><y/></x></>).__lookupSetter__(\"__parent__\")) {{}export __iterator__;\n__count__ = true;\n const prototype; }");
tryItOut("/*infloop*/do let(__proto__ = __noSuchMethod__) { function(y) { yield y; break L;; yield y; } while(1.3\n.@foo);");
tryItOut("__proto__ = prop;");
tryItOut("\f__count__ = __parent__;");
tryItOut("return;");
tryItOut("while(((new  \"\" ())) && 0)export prop;");
tryItOut("(Math.pow).call");
tryItOut("return; const __proto__;");
tryItOut("let __noSuchMethod__, __iterator__;");
tryItOut("while((new (*::*)()) && 0){return; '' ; }");
tryItOut("__noSuchMethod__ = <><x><y/></x></>\n__iterator__, __iterator__;3;");
tryItOut("L: ");
tryItOut("(prototype) = constructor;");
tryItOut("L:with(eval(\"@foo\", <y><z/></y>))__proto__ = __parent__;");
tryItOut("\n\nlet __proto__, __proto__;\n");
tryItOut("let (constructor =  /x/g ) { export __count__; }");
tryItOut("({ __noSuchMethod__: __parent__ })");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ prop: prop, __noSuchMethod__: ({ prototype: __noSuchMethod__, __proto__: __proto__ }) }) }) = (__iterator__ - (yield this)); <><xxx {prototype}={(this = __proto__)} /></>; ( /x/  .@*:: <x><y/></x>.isPrototypeOf([<x><y/></x> if (<><x><y/></x></>)])).__proto__) yield;");
tryItOut("let (constructor, constructor) { const __iterator__ = <x/>, __proto__; }");
tryItOut("");
tryItOut("/*for..in*/for(let [get, __count__] = <y><z/></y>.__defineGetter__(\"__parent__\", (<><x><y/></x></>).watch).watch(\"prop\", Math.sin) in <bbb xmlns:ccc=\"__count__ *= *\"><ccc:eee></ccc:eee></bbb>) {{}throw  /x/ ;L:while(( /x/g  ? <x><y/></x> : false) && 0)const __noSuchMethod__, __parent__; }");
tryItOut("");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/for(const __noSuchMethod__.__count__ in ((function (__proto__, prop) { (this); } )(eval(\"{}\",  /x/g ))))let prop;");
tryItOut("/*for..in*/for((({ __proto__:  get prototype __noSuchMethod__ () { return (prop.__iterator__) } , __proto__: __count__ }) = ((({}).hasOwnProperty)(window)))(new (({}).hasOwnProperty)()) in (((function(q) { return q; }).call)((({__iterator__: window})))))if((this.zzz.zzz)) {export *; } else  if (function(id) { return id } >= *::*.@*) return;");
tryItOut("/*infloop*/for(let __noSuchMethod__; ({prototype: <y><z/></y>.valueOf(\"number\"), __count__: .2 }); eval(\"(this.zzz.zzz)\", ((yield @foo)))) {Function }");
tryItOut("");
tryItOut("{if(*.__lookupSetter__(\"__parent__\") >>> prototype = prop) { if (function(q) { return q; }().unwatch(\"__noSuchMethod__\")) this;} else {throw __count__;const constructor, prototype = constructor; }switch([window if (this)]) { default: break; case (~@foo): break; break ;case (<x><y/></x>.(__parent__)): {} } }");
tryItOut("do yield *; while((<y><z/></y>) && 0);");
tryItOut("if(<>__noSuchMethod__ = *::*</>) { if ([,,]) while((constructor) && 0)break L;} else {continue M; }");
tryItOut("L: {return 1.3;export __count__; }");
tryItOut("null\nprop, __noSuchMethod__ = <><x><y/</>\nexport *;");
tryItOut("try { this.zzz.zzz; } finally { with({}) { 1e+81; }  } ");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <x><y/></x>) {throw [[1]]; } } while(((this.__defineGetter__(\"__proto__\", [1,2,3,4].slice))) && 0);");
tryItOut("with({__parent__: .2})/*infloop*/for(const __proto__; +(__count__ = 1e4); [ /x/ ]) <x/>;");
tryItOut("yield @foo(true)++;");
tryItOut("/*infloop*/for(const __proto__; ({ __iterator__: __noSuchMethod__ }) = String(this, [1,,]).watch(\"__count__\", Function); (<x/>)(null) .@ true != [,,z1]) /*for..in*/for(let 3.141592653589793<ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd> in ((<y><z/></y>)(#1#))){(<x><y/></x>).__defineSetter__ }");
tryItOut("L:if(( /* Comment */#1=[#1#].eval(new (*::*)(<x><y/></x>)) / (<><x><y/></x></>\f % function ([y]) { }.__defineSetter__(\"prototype\", function(y) { yield y; /a/gi; yield y; })))) {/*for..in*/M:for(prototype = __iterator__ in 3) {{}return; }\nM:if(this.__defineGetter__(\"__proto__\", function (yield;, __proto__) { return * } )) { if (this.__defineGetter__(\"__proto__\", (new Function(\";\")))) throw window;} else {continue L;{} } } else  if (<y><z/></y>) {let (__parent__, prototype =  '' ) { /*infloop*/L:for( /x/ ; true; <><x><y/></x></>) {} } }");
tryItOut("<y><z/></y>");
tryItOut("/*infloop*/do {/*for..in*/for(__proto__ = prop in <><x><y/></x></>) yield; } while(<y><z/></y>.__defineGetter__(\"__iterator__\",  '' ));");
tryItOut("if([11,12,13,14].some) { if (((function  __iterator__ (__proto__, prop) { yield new * } )(constructor.prototype = <x/>) !== ({prop: this})) >> [__parent__].sort(((( /x/ ).__defineSetter__).call).call) = <xxx>{constructor}</xxx>) /*for..in*/L:for(constructor in *::*) {return <><x><y/></x></>; }} else do {throw StopIteration; } while(((yield (<x/>)(__parent__) = ({__parent__ getter: /a/gi, prototype: <x><y/></x> }) instanceof <employee id=\"1\"><name>Joe</name><age>20</age></employee>)) && 0);");
tryItOut("/*infloop*/for([,,z1].__noSuchMethod__; ['fafafa'.replace(/a/g, Math.pow) for each (__proto__ in __noSuchMethod__ = constructor)]; Array(<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\"), *::*)[[((/a/gi).apply)(constructor = <x><y/></x>, __proto__) for each (__iterator__ in <><x><y/></x></>) if (__count__)]]) {/*infloop*/({ __noSuchMethod__: __count__, constructor: prop })\n;\n }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = ~@foo & (this) in __noSuchMethod__ = 3.141592653589793) {let __noSuchMethod__ = <x><y/></x>; }");
tryItOut("{if((let (__parent__)  /x/ )) { if (false * <x><y/></x>) {export constructor; } else {export __count__; }} }");
tryItOut("/*infloop*/M:do {;/*infloop*/for(({ __count__: prop, prop: constructor }) = window.unwatch(\"__noSuchMethod__\"); __count__; (new /a/gi(-0, <y><z/></y>))) let __iterator__, constructor; }\f while((this.__defineGetter__(\"prop\", [1,2,3,4].slice)).@foo//h\n);");
tryItOut("if(((__count__ for (constructor in [1,,])))) return function ([y]) { }; const prototype;");
tryItOut("with(prototype = true){return window;L: ( \"\" ); }");
tryItOut("/*infloop*/while(((function (prop) { return  ''  } ).call).call(*::*, ))yield;");
tryItOut("/*infloop*/while(void <><x><y/></x></>){/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in window) yield <x><y/></x>;L:while(((new true(++<x/>))) && 0){} }");
tryItOut("var prop");
tryItOut("if((1 for (x in [])).@foo) {L: gc() }");
tryItOut("/*for..in*/for(const prop.__noSuchMethod__ in (function ([y]) { })() *= __noSuchMethod__) {const constructor = try { function (<x><y/></x>) { return * }  } catch(constructor) { return this; } , constructor = *::*;var __noSuchMethod__, prop; } const prop;");
tryItOut("this.zzz.zzz;");
tryItOut("switch() { case  '' : yield prop;break; default: <x/>; }");
tryItOut("/*infloop*/for(<x><y/></x> ? 5.0000000000000000000000 : <x/>; [11,12,13,14].filter; __proto__ = 3) {/*for..in*/for(var __noSuchMethod__ in \f(([1,2,3,4].slice)(prop))){const __parent__, prototype; } }");
tryItOut("with(@foo){;return <x><y/></x>; }");
tryItOut("with((([[1]])(default: break M;)).*){with( /x/ ){;prototype: <x/> }/*for..in*/M:for(var __parent__ = ((<><x><y/></x></>)(null, <><x><y/></x></>)) in #1=[#1#]) {3/0; } }");
tryItOut("gc()\n{([[]]); }");
tryItOut("[1,2,3,4].map\nexport __parent__;\n");
tryItOut("M:if(new (<><x><y/></x></> || this)(__iterator__%=@foo, {})) /*infloop*/for(new function(y) { yield y; let __count__ = <y><z/></y>, __count__ = <y><z/></y>;; yield y; }([z1], false); false.@foo; (window.yoyo(constructor))) {yield;yield; } else let prototype = new <x><y/></x>(<y><z/></y>);");
tryItOut("/*infloop*/while( /* Comment */ \"\" )case <x><y/></x>: return  \"\" ;case 7:  const __parent__;");
tryItOut("L:do {((<><x><y/></x></>)); } while(((function  __iterator__ (prop) { return *::* } (([[1]].yoyo(<y><z/></y>)), this))) && 0);");
tryItOut("{{} }");
tryItOut("__count__ = prop;");
tryItOut("{for(let y in []); }");
tryItOut("/*infloop*/for(var __count__; prop; 3/0.__defineGetter__(\"__noSuchMethod__\", function (__iterator__).2).valueOf(\"number\")) {/*for..in*/for([__parent__, __iterator__] = 'fafafa'.replace(/a/g, *::*) in <x><y/></x>) return 1e81; }");
tryItOut("return 3/0 |  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in  '' ) return;\n/*for..in*/for(let <x><y/></x>.__iterator__ in <x/>) ;\n");
tryItOut("switch(()) { default: L: prop getter: (<x/>).apply = __proto__;break;  }");
tryItOut("/*for..in*/L:for(const __iterator__ = (({constructor: <x><y/></x>}))[(undefined.unwatch(\"prop\"))] in this) yield @foo;");
tryItOut("L: {evalwhile(((yield ({a2:z2}))) && 0)__proto__, __iterator__; { export __noSuchMethod__; }  }");
tryItOut("if([] = prop = __noSuchMethod__) { if (.yoyo((__count__ = <y><z/></y>) || __count__ = this)) {return;(<x><y/></x>); } else {let __iterator__ = *::*;return <><x><y/></x></>; }}");
tryItOut("M:with({prototype: __proto__ = (__parent__%=<x/>)})throw  /x/ ;");
tryItOut("L:while(((<y><z/></y> ? window : new Date())) && 0)let (__parent__, return [z1,,].__defineGetter__(\"getter\", (new Function(\"yield  /x/ ;\")));) { <x/>; }\nprototype");
tryItOut("prototype.__count__ = __proto__;");
tryItOut("/*for..in*/M:for(<><x><y/></x></>.unwatch(\"__count__\") in 3) with({prop: <x/>}){yield;; }");
tryItOut("return;{}");
tryItOut("/*infloop*/L:for(var __parent__ = new window(); ( /* Comment */(window)[ \"\" ] *= constructor); __proto__) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in 1e4) return __iterator__; }");
tryItOut("L: {/*infloop*/while(1e81){{} }return; }");
tryItOut("/*for..in*/for(let prototype = 3.141592653589793 in <y><z/></y>) <><x><y/></x></>;");
tryItOut("L:while((__parent__ -= <x/>) && 0){__iterator__ = window;\fexport prototype; }");
tryItOut("with(! for (__parent__ in [,]) if (1e81).isPrototypeOf((3.141592653589793);\nconst get = <><x><y/></x></>;\n)) null \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in <!--yy-->.(new RangeError() *= [prop for (prototype in 0/0)])) {return <><x><y/></x></> <= <y><z/></y>;const constructor; }");
tryItOut("if(constructor = <x><y/></x>) ; else  if ((eval(\"false\",  '' ))) {{}var __parent__ = true; } else gc()");
tryItOut("export constructor;");
tryItOut("/*for..in*/for(var __iterator__ in prop) constructor =  /x/ ;");
tryItOut("L:if(<><x><y/></x></>.watch(\"__count__\", Function)) { if (*) { /x/g ; } else {L: {var constructor, prototype;\t } }}");
tryItOut("/*for..in*/for(var [__parent__, prototype] = (uneval( /x/ )) in  \"\"  || 0x99) /*infloop*/for(let __count__; Array(null, <y><z/></y>); <x><y/></x>.@*) export *;");
tryItOut("if(@foo | <x/>) {let prototype; } else  if (void *::*) {__noSuchMethod__ } else {yield;; }");
tryItOut("/*infloop*/while(null){__noSuchMethod__ = prop, __count__ = [[]];return  \"\" ; }");
tryItOut("return ([[]].__defineGetter__(\"constructor\", (function(q) { return q; }).call))\n");
tryItOut("/*infloop*/L:for(constructor = ((-0)).watch(033, true).__defineGetter__(\"constructor\", 'haha'.split); window.__proto__(); ((__proto__.__defineSetter__(\"__parent__\", true)) ? (*.__defineSetter__(\"constructor\", ({}).__lookupGetter__)) : new (function (__proto__) { return  /x/  } )((-0)))) {with([,,]){yield; } }");
tryItOut("");
tryItOut("let (prototype) { let (({ constructor: __count__ }) = constructor, prop = <><x><y/></x></>) { export prop; } }");
tryItOut("return [15,16,17,18].sort([,,], 1e-81.__lookupGetter__(\"prototype\"));");
tryItOut("with({__noSuchMethod__: new @foo()}){export *;*; }");
tryItOut("/*infloop*/L:do { undefined ; } while(this);");
tryItOut("{return; }");
tryItOut("yield true\nlet (__proto__) { [1,2,3,4].slice }");
tryItOut("if(({ __iterator__: __count__ }) = __proto__) {export *; const function::__proto__;while((undefined -= <x/>) && 0){prototype;Math.pow } } else {(<y><z/></y>);\nexport *;\n }");
tryItOut("with({}) { getter = __proto__; } ");
tryItOut("return prop = <x/> >>>= /x/ , __iterator__ = (uneval(<><x><y/></x></>));");
tryItOut("const __noSuchMethod__, __proto__;");
tryItOut("/*for..in*/L:for(const __parent__.__count__ in ((function  __count__ () )(true)))<bbb xmlns=\"<y><z/></y>\">yyy</bbb>");
tryItOut("L: export __iterator__;");
tryItOut("if([11,12,13,14].some) { if (<><zzz>(this)[<y><z/></y>]</zzz\f></>) <x/>;\nyield;\n else {export *; }}");
tryItOut("throw StopIteration;");
tryItOut("M:if(((new Function)())) {export __proto__; const function::__proto__;let __noSuchMethod__, __proto__ = constructor; } else  if (<x/>) {var __iterator__ = *::*, __proto__; }");
tryItOut("if(([__proto__, __count__, __parent__, __proto__] = ( /x/  + __noSuchMethod__))) { if (window) export *; else return this;}");
tryItOut("/*infloop*/L:do /*infloop*/while(<><x><y/></x></>){} while(((0x99)()));");
tryItOut("continue M;\nreturn;\n");
tryItOut("/*for..in*/M:for(__proto__ = *::* >= <><x><y/></x></> in  /x/ [<x><y/></x>]) __proto__\n");
tryItOut("with(__noSuchMethod__ = <><><x><y/></x></></><!--yy-->)( { yield .2 } );");
tryItOut("let (__noSuchMethod__) { {}\t }");
tryItOut("if(*) {;export __count__; } else  if (undefined) {let default: break; case __proto__: const __noSuchMethod__;case window: case ({a2:z2}): case 6: break; ;({throw @foo; }); } else gc()");
tryItOut("if(this = __noSuchMethod__) { if (__proto__.(*::*)) {{}var __count__; }} else yield <x><y/></x>;");
tryItOut("/*for..in*/for(var __parent__.prop in ((function \f(\f)<x/>)( { yield prototype }  = false))){(<><x><y/></x></>).call }");
tryItOut("/*infloop*/do {/*infloop*/M:for(var __noSuchMethod__ = prototype%=undefined; (p={}, (p.z = __count__)()); ) return; }\f while(('fafafa'.replace(/a/g, function (prop, __parent__) { return (<x><y/></x>.__proto__) } ))[(function  prototype ( default ) { return 033 } )()--]);");
tryItOut("L: {/*for..in*/for(let [__count__, constructor] = [0 for each (prototype in prop)] in <y><z/></y>) {return;return; } }");
tryItOut("/*for..in*/M:for(var constructor in ((({}).__lookupGetter__)(0/0))){prop }");
tryItOut("{yield; }");
tryItOut("do <x><y/></x> while((prototype =  /x/ ) && 0);");
tryItOut("M:if(__noSuchMethod__;) {export __parent__; } else  if (({a2:z2})) {export *;yield <x><y/></x>; }");
tryItOut("/*for..in*/for(__iterator__ in ((( { yield <><x><y/></x></> / <><x><y/></x></> } ).call)( /x/g )))let yield;");
tryItOut("try { let(__iterator__ = __noSuchMethod__, __iterator__ = (prototype = @foo)) { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) let __proto__ = <y><z/></y>, __noSuchMethod__; } catch(__iterator__) { with({}) let(constructor = prototype) {  } finally { prop = <x><y/></x>, __proto__; } ");
tryItOut("if(()) with({prop: *}){return <x><y/></x>;throw <x><y/></x>; } else {return; }");
tryItOut("L:with({constructor: ((uneval(null)))}){ }");
tryItOut("{throw <x/>;\n\n }");
tryItOut("while(((-1).@foo) && 0){__proto__, prop }");
tryItOut("export __count__;");
tryItOut("const prototype, __noSuchMethod__;");
tryItOut("try { try { throw StopIteration; } catch(prototype) { return  /x/  instanceof @foo.watch(\"prop\", function(y) { yield y; /*for..in*/for(__count__ in  \"\" ) {const __noSuchMethod__ = prop; }; yield y; }); }  } catch(prototype if (function(){this.zzz.zzz;})()) { if((* <= this)) {} else  if (<bbb xmlns:ccc=\"( << <x><y/></x>)\"><ccc:eee></ccc:eee></bbb>) {const __proto__; } else \ngc() } catch(prop) { constructor = __count__; } ");
tryItOut("if([15,16,17,18].map((new Function(\"export *;\")), eval(\"[11,12,13,14].map\", Error()))) { if ((({prototype: <x/>}).__defineGetter__(\"(false)()\", eval)).__noSuchMethod__) {L:if(function  constructor (__noSuchMethod__) /x/ ()) continue ; } else ;}");
tryItOut("if((let prop = false, __count__; += [,,] + (<x/>.throw(<><x><y/></x></>)))) (true);");
tryItOut("/*for..in*/for(const __parent__ in (([1,2,3,4].slice)(arguments =  /x/g  |= 0)))yield ({a2:z2});");
tryItOut("while((window) && 0){*::*;; }");
tryItOut("with({constructor: <><x><y/></x></> * window})return *::* <= <><x><y/></x></>;");
tryItOut("/*infloop*/do switch(3) { default:  } while(prototype.valueOf(\"number\") - (this += <><x><y/></x></>));");
tryItOut("return  \"\" ;__proto__;");
tryItOut("L://h\nwith((uneval(<y><z/></y>)))const __parent__ = constructor;throw window;");
tryItOut("let (__count__) { var __iterator__; }");
tryItOut("const prop");
tryItOut("continue \n/*infloop*/for(var __count__;; *; __iterator__) {;throw 0; }");
tryItOut("with({prop: yield .(*::*--)})/*for..in*/for(var (__iterator__ = <x/>)(((<x/> for each (__proto__ in <x><y/></x>)))) in ((((this.__defineSetter__(\"__parent__\", /a/gi)))[this >> <x><y/></x>])(new Object(<y><z/></y>, undefined) @ this)))export prototype; const __parent__;");
tryItOut("/*for..in*/L:for(const (__proto__.(*::*))((function(id) { return id })[1.2e3]) in (({})(((__count__ = <x/>) /  /x/g )))){yield <><x><y/></x></>;return; }");
tryItOut("/*infloop*/while(0.1)throw const constructor, __iterator__ = __proto__;");
tryItOut("{do {\f} while((yield;) && 0); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while((<x/> << @foo)){yield;M:if(prototype) {* } else  if (1.3) {const constructor = undefined; } }");
tryItOut("continue ;");
tryItOut("(<><x><y/></x></>);");
tryItOut("if(__iterator__ =  \"\" ) { if (({ __iterator__: __proto__, __count__: constructor }) = __proto__ .@ [[1]]) {/*infloop*/for(var prop = *; export constructor;; @foo) {throw undefined; } } else {throw __proto__; }}");
tryItOut("if([,,]) gc() else switch(<x/>) { default: break;  }");
tryItOut("/*infloop*/for((__noSuchMethod__ .@*:: __parent__); [__proto__].some(<><x><y/></x></>); true @ <y><z/></y>) {M:with(delete){export prototype;let __parent__, __iterator__; } }");
tryItOut("if(eval(\"new ( /x/g )(window)\", window)) {switch(false.unwatch(\"__parent__\")) { default: yield; }yield undefined; } else  if (__proto__ = @foo.__defineGetter__(\"__noSuchMethod__\", <x><y/></x>)) {const __proto__; } else {gc()throw *; }");
tryItOut("/*infloop*/for(let __parent__ = *; window; true) yield;");
tryItOut("yield [11,12,13,14].sort;");
tryItOut("");
tryItOut("{}");
tryItOut("L:if( /x/ ) {/*infloop*/for(const ({ __iterator__: prototype, __proto__: __iterator__ }) = <x/>.@*; <><x><y/></x></>; new (function ([y]) { }).__defineSetter__( \"\" )) {yield __parent__; } }");
tryItOut("if((function ([y]) { })() :: #1#) yield [,,z1]; else  if ([[window.unwatch(\"__count__\")].sort(__noSuchMethod__) if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>)]) gc()/*infloop*/while(null){; }\n");
tryItOut("prototype.prototype = __proto__;");
tryItOut("L:if(<><x><y/></x></>) {gc()export *;\n }");
tryItOut("/*for..in*/for(var __proto__ = prop in __count__) {var __noSuchMethod__ = <><x><y/></x></>; }\nexport __noSuchMethod__\nthrow prototype;\n");
tryItOut("/*infloop*/for([__parent__, , ] = (function::constructor = false); (__noSuchMethod__.(<x><y/></x>)); __count__ @ constructor) var prototype = <x/>, constructor;");
tryItOut("/*infloop*/for(var __noSuchMethod__; __parent__; <><x><y/></x></>) {yield <><x><y/></x></>; }");
tryItOut("if(<><x><y/></x></>) {this } else  if (<x/>) yield arguments; else ;");
tryItOut("with({constructor: this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; try { {} } catch(__iterator__) { function(q) { return q; } } ; yield y; })}){/*for..in*/for(var __noSuchMethod__ in ((function(q) { return q; })(('fafafa'.replace(/a/g, (new Function(\"gc()\"))))))) if ((prototype.__count__))return -0; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in (String())) ");
tryItOut("/*infloop*/for(window; new (<x><y/></x>)(<x>\f<y/></x>, <y><z/></y>); [,,z1].__lookupSetter__(\"__parent__\")) with({}){export *;<><x><y/></x></>; }");
tryItOut("/*infloop*/do throw <x/>; while((prototype.__noSuchMethod__ = ({ __count__: ({ __proto__: __parent__ }) }) = __noSuchMethod__ = {}).__lookupSetter__(\"__parent__\"));");
tryItOut("export *\nconst __noSuchMethod__;");
tryItOut("/*infloop*/for(var ({ constructor: __parent__ }) = (void null); this.__defineGetter__(\"__proto__\",  '' ); (let (constructor) <y><z/></y>)) {var prop;{} }");
tryItOut("/*infloop*/for(const ({ __parent__: delete }) = let &= <x/>; 3 >> this; eval(\"\", prototype)) yield;");
tryItOut("/*for..in*/for(var __iterator__ = ({ __count__: __noSuchMethod__, __noSuchMethod__: __iterator__(prototype) }) in *(@foo)) var prop = prototype, __count__ = undefined;");
tryItOut("/*infloop*/for(( /x/g  ===  { return null } ); ( set prototype x::__proto__ (get, prop) { gc() } ); (prototype = let (prop) 3)) {/*infloop*/for((#1# for (prop in __count__)); __count__ = ({}); ([<><x><y/></x></>]))  }");
tryItOut("let (__proto__ = (__noSuchMethod__.((yield -0)))) { /*infloop*/do {function(q) { return q; } } while(Date(null.throw(__proto__), delete window)); }");
tryItOut("break ;\n<y><z/></y>;\n");
tryItOut("L:if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {/*for..in*/for(var __count__ in (((function(id) { return id }).watch)( /x/ ))){ }(1 for (x in [])) }");
tryItOut("/*infloop*/for(const function::__parent__; ((__iterator__.__iterator__ = <x><y/></x>)({}.__defineGetter__(\"x::__noSuchMethod__\", arguments))); <x><y/></x>.hasOwnProperty(\"__proto__\")) {break L; }");
tryItOut("for(let y in [5,6,7,8]) try { return; } catch(prop) { yield (this for each (__iterator__ in window)); } ");
tryItOut("/*for..in*/for(let __parent__ in ((((({}).hasOwnProperty((this).call(<x/>,  '' ), <x/>))).watch)(1.2e3 ^= *::*))){/*infloop*/L:for([11,12,13,14].some((constructor.watch(\"constructor\",  /x/g ))); <x/>; (new ([,,])(0/0).propertyIsEnumerable(\"__count__\")).throw(let (__count__ = *::*) prop)) return; }");
tryItOut("{let __proto__ = <y><z/></y>;switch(window.hasOwnProperty(\"prop\")) { case __parent__ && <><x><y/></x></>: {}break; default: yield <x><y/></x>;break;  }/*infloop*/for(let __noSuchMethod__; <><x><y/></x></>; x><y><//*x>) <x><y/></x>; }");
