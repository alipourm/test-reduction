tryItOut("with(*::*)const constructor = @foo;");
tryItOut("export *;yield\nconst prototype = <x><y/></x>.throw(<x/>), prop;");
tryItOut("");
tryItOut("/*infloop*/for(<y><z/></y>;  ''  >>= <x/>; new (__proto__ =  /x/g )) {/*infloop*/M:for(undefined; prototype; #1=[#1#]) Math.powexport prop; }");
tryItOut("while((prop) && 0)if((new (new Function(\"const __noSuchMethod__;\"))([,,], <x><y/></x>))) __parent__ getter: 1e+81 else  if ((this ? (new String()) : ({ get __parent__(constructor) { yield new <><x><y\f/></x></> } , __noSuchMethod__: 5.0000000000000000000000.__lookupSetter__(\"__parent__\") }))) /*infloop*/for(let __count__; ({a2:z2}); ({a1:1})) export *; else ;");
tryItOut("/*infloop*/do {L:if((this.__defineGetter__(\"constructor\", function  prop () { yield  /x/g ; } ))) (new Function(\"throw <><x><y/></x></>;\"))<><x><y/></x></>; } while(0);");
tryItOut("try { for(let y in [5,6,7,8]) return (uneval(<><x><y/></x></>)); } finally { return; } ");
tryItOut("if(function  constructor () { yield [z1]; } ()) {with(__iterator__.__count__ = this.zzz.zzz)var __count__, prototype =  \"\" ; }");
tryItOut("return;prop = <y><z/></y>, prototype = true;");
tryItOut("let (\t({ __proto__: ({ prop: prop, function::constructor: __count__ }) }) = prototype(<x><y/></x>), prop = __iterator__%=<><x><y/></x></>) { with({constructor: null})<><x><y/></x></> }");
tryItOut("{gc() }");
tryItOut("let (__count__ = @foo ? 5.0000000000000000000000 : <><x><y/></x></>, __noSuchMethod__) { L:if( /x/g ) (0.1); else {yield;return; } }");
tryItOut("{export *; }");
tryItOut("M:with(({__parent__: <x><y/></x>})){prop }");
tryItOut("yield Function;");
tryItOut("/*for..in*/for([__count__, constructor] = prop.__noSuchMethod__ in (__parent__ = __proto__)) gc()\ncontinue L;\n");
tryItOut("/*for..in*/M:for(var prototype in ((({}).__lookupGetter__)( /x/ .watch(\"__noSuchMethod__\", Math.sin)))){throw window;var  = [z1,,], @foo; }");
tryItOut("L:if(3) { if (([15,16,17,18].sort(({}).hasOwnProperty, [,]))(false, <x/>)) export *; else {export *;yield; }}");
tryItOut("/*infloop*/for(window; __parent__ = __proto__; <><x><y/></x></>.__defineSetter__(\"__proto__\", function  constructor (prototype) { Function } )) gc()");
tryItOut("{switch(<y><z/></y>) { case 8:  } }\nreturn; const __noSuchMethod__;");
tryItOut("{yield function(id) { return id };; }");
tryItOut("do {{{} const __proto__; } } while((<xxx {__proto__}={(constructor.__count__ setter= function  __count__ (constructor) { yield <x/>.@foo } )} />) && 0);");
tryItOut("/*for..in*/L:for(let prototype in *) if(this++) prototype = undefined; else  if (((([1,2,3,4].slice).call).apply).call(window, <></>,  /x/ )) {var __count__;continue ; } else {continue ; }");
tryItOut("L:if(([1,2,3,4].map((__count__.__lookupGetter__(\"__count__\")), <x/>))) {with({__iterator__: (__proto__ = *) :: <x/>\n}){let prototype = @foo;/*infloop*/for(let prop; #3={a:#3#};  \"\" ) {gc()__proto__, __proto__ = null; } }let (__parent__ = __iterator__) { __iterator__, constructor } } else  if (prop.(((p={}, (p.z = .2)()) | __parent__))) continue L;");
tryItOut("/*infloop*/while([11,12,13,14].map)/*infloop*/while(window)throw <><x><y/></x></>;");
tryItOut("{yield;yield; }");
tryItOut("/*infloop*/for(prototype; new RegExp(); <><{__count__}><!--yy--></{__count__}></>) /*infloop*/while( /x/g ){export *; }");
tryItOut("{}");
tryItOut("M:with((new Number([1,,], @foo))){return false;return; }");
tryItOut("if(__iterator__ = function::__parent__)  else  if (__parent__\f) {L:if(this) {1.2e3;yield; }while((*) && 0)export __noSuchMethod__; } else {if(*::*) { if (<x><y/></x>) export __noSuchMethod__; else Math.sin} }");
tryItOut("/*infloop*/do L: {export __proto__; } while((uneval((new (gc).call(constructor, this).__lookupGetter__(\"__noSuchMethod__\")(<y><z/></y>, (({delete:  \"\" , __proto__ getter: [1,2,3,4].map })))))));");
tryItOut("/*for..in*/for([, ({ prop: ({ prop: ({ __proto__: __proto__\t }) })\t }), prototype, , ({ __parent__: ({ prototype: prop }) })] in ((([1,2,3,4].slice).apply)((prop = this.__defineGetter__(\"prototype\", (function(q) { return q; }).apply))))){/*infloop*/while(__iterator__ = [z1] , yield this)//h\nif((({constructor: ++1e4}))) { if (.2) 0/0; else yield;} }");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = (([z1,,](<\f><x><y/></x></>, null)) !== [1,2,3,4].slice) in (null.throw(yyy))) /*infloop*/while(<x><y/></x>)let prop, prop = <x><y/></x>;");
tryItOut("switch( /x/ ) { default: {} }");
tryItOut("yield  '' \n(<x><y/></x>);");
tryItOut("L:if(window < ((1 for (x in []))).__count__) {throw *; } else  if (true['__iterator__']) {export *; } else {; }");
tryItOut("/*for..in*/for(yield 0.1; in <x/>) {<x><y/></x>;export __count__; }");
tryItOut("(-0);");
tryItOut("export *\n__parent__ const __count__;");
tryItOut("if([15,16,17,18].filter(({}).hasOwnProperty, <x/>)) { if ((__parent__ = __noSuchMethod__)) var prop =  \"\" , prototype = window; else {return *::*;continue ; }}");
tryItOut("constructor, prop = __noSuchMethod__");
tryItOut("/*infloop*/do gc()\nbreak L; while((this.__defineSetter__(\"__count__\", function (__iterator__, constructor)prop).unwatch(\"__noSuchMethod__\")));");
tryItOut("M:do L:with({constructor:  /* Comment */ \"\" }){yield;return\n<ccc:ddd> </ccc:ddd> } while(((break M)) && 0);");
tryItOut("/*infloop*/M:for(new (1e-81.__lookupSetter__(\"constructor\"))(\n[[1]]); this; return null;) ;");
tryItOut("with({}) { with({}) { for(let y in []); }  } ");
tryItOut("prototype = <x/>");
tryItOut("/*infloop*/(L)while(false.prop = __parent__)export *;");
tryItOut("/*for..in*/for(__proto__ in <><x><y/></x></>) let __parent__ = this, constructor = undefined;return;");
tryItOut("/*infloop*/for(( \"\" .unwatch(\"constructor\"));  /x/g  <<= <><x><y/></x></>; [15,16,17,18].map([,,z1], constructor)) const __proto__ = null;");
tryItOut("{throw __iterator__; }");
tryItOut("if(#1=[<x/>]) {gc__parent__ = <x/>, prototype; } else  if (((new Function(\"let (__parent__) { continue ; }\"))).call((prop = constructor.prototype =  /x/g  /= this), (__count__.__count__ getter= eval))) {M:with([null]){__parent__{} }\n( /x/g ); }");
tryItOut("const __iterator__ = __proto__, __parent__ = <x/>;");
tryItOut("(this).__defineSetter__ const prototype;");
tryItOut("let (constructor = <><x><y/></x></>) { return; }");
tryItOut("do export __proto__;\ncontinue ;\n while(((constructor = __iterator__; = getter) ? false.__proto__ : try { yield; } finally { return undefined; } .__lookupSetter__(\"__proto__\") .@x:: +true) && 0);");
tryItOut("let(__parent__, ({ prototype: [prop, ], __noSuchMethod__: prop }) = new <><x><y/></x></>) ((function(){return;})());");
tryItOut("(<x><y/></x>);");
tryItOut("yield;");
tryItOut("/*infloop*/for(const ({ prop: __noSuchMethod__ }) = *; *::* == constructor; eval()) *::*;");
tryItOut("if((3/0 in false).unwatch(\"constructor\") > (__iterator__ = function::each)) {export prop;{} } else {break L; }");
tryItOut("let ( if ( /x/ )) { const __proto__ = null, __proto__; const prop; }while(((__noSuchMethod__.__noSuchMethod__ getter= {export constructor;break L; })) && 0)with({__iterator__: this.__defineSetter__(\"__noSuchMethod__\", function  __parent__ () { return (__proto__) } )})");
tryItOut("while(((({prototype setter: (constructor).__defineSetter__ }))(this.__defineGetter__(\"__iterator__\", Function))) && 0){with(window){}__noSuchMethod__; }");
tryItOut("with({}) let prop =  /x/ ;");
tryItOut("with({prop = __iterator__ = __noSuchMethod__: (({ set __proto__\f constructor (__proto__, prop)\ttry { null; } catch(__proto__ if (function(){const prototype, __iterator__;})()) { ( /x/g ); } catch(__noSuchMethod__) {  } ,  set __iterator__() { yield this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"\"))) }  }))}){{}; }");
tryItOut("/*infloop*/M:do yield;throw <><x><y/></x></>; while(try { for(let y in [5,6,7,8]) prop = constructor; } finally { ((prototype)) = function::__proto__: __parent__ = {}.propertyIsEnumerable(\"constructor\"); }  = ({__proto__: <><x><y/></x></>}));");
tryItOut("/*infloop*/M:for(\t(uneval(__iterator__)); <y><z/></y>.__lookupGetter__(\"constructor\"\f); <><x><y/></x></>) {return; }");
tryItOut("L: \t{yield;return null; }");
tryItOut("/*infloop*/for(var constructor; function(id) { return id }; <x><y/></x>) __count__;");
tryItOut("var prop\n");
tryItOut("with({}) { throw __count__; } ");
tryItOut("/*infloop*/L:for(__noSuchMethod__; this.zzz.zzz; <x><y/></x>) { }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <x><y/></x>) return *;");
tryItOut("yield {};");
tryItOut("yield;{}");
tryItOut("L: {var prop = window; }");
tryItOut("if(<y><z/></y>) {yield [[1]];__noSuchMethod__; }");
tryItOut("M:if(*) export *; else  if (this) {} else {(Math.sin).apply{} }");
tryItOut("/*for..in*/for\n(__count__.__parent__ in (((<x/> ?  /x/g  : <><x><y/></x></>).__defineSetter__)(new (function  __noSuchMethod__ () '' .__lookupSetter__(\"prototype\"))(__iterator__ = .2))))default: ");
tryItOut("/*for..in*/for(var constructor.function::__iterator__ in constructor) {;/*for..in*/for(const __noSuchMethod__ = 'haha'.split in 1e81) {{}/*infloop*/while(*::*){this,  \"\" return; } } }");
tryItOut("with({__count__:  { return RegExp() } })const __count__;");
tryItOut("constructor = prototype;");
tryItOut("if((p={}, (p.z = <y><z/></y>)())) {{let __parent__; } } else  if (constructor = prop = #1# === (1e+81 @  '' .isPrototypeOf([z1]))) while(((({__iterator__:  /x/  }))) && 0)export *;");
tryItOut("/*infloop*/do {__parent__ = {}; } while( '' ()); const __iterator__;");
tryItOut("with({__noSuchMethod__: undefined}){continue L; }\n");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("L:if((-0)) {const const prototype; = ({a1:1});(<x><y/></x>); };");
tryItOut("let (constructor = @foo) { prop }");
tryItOut("let(prototype = <x/>) ((function(){let __proto__, constructor;})());");
tryItOut("if((<x><y/></x>[<x><y/></x>]).__lookupSetter__(\"__parent__\")) {const __proto__ = prop; } else  if (__iterator__\n) {(<x><y/></x>); } else throw .2;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prop] = new function(q) { return q; }(<><x><y/></x>\f</>, <x><y/></x>) in *) gc()");
tryItOut(" get __count__() { return ([15,16,17,18].sort((new Function(\"(.2).watch\")), ((4..unwatch(\"constructor\")).hasOwnProperty(\"prop\")))) } ");
tryItOut("with({__count__: __parent__, prop.yoyo(*)})yield;");
tryItOut("if(([15,16,17,18].sort(Math.pow, <y><z/></y>))) (<y><z/></y>); else throw false;");
tryItOut("continue M;\nif(new /a/gi()) {@foo; }\n");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((eval)(<><x><y/></x></> >>=  /x/g )))yield <x><y/></x>;");
tryItOut("with({__parent__: prop})break L;");
tryItOut("with({constructor: (\f((@foo.__noSuchMethod__ setter= function  __noSuchMethod__ (__count__) { window; } ) for each (__count__ in \r /x/g  * <><x><y/></x></>) for (<><x><y/></x></>.valueOf(\"number\").prop in 1.2e3) for each (__noSuchMethod__ in <y><z/></y>)\f for (prop in undefined)))})new String(( \"\" .__defineGetter__(\"prototype\", (new Function(\"\")))), false)");
tryItOut("/*infloop*/for(var __iterator__; yield <x><y/></x>.__iterator__; [15,16,17,18].filter(eval, (yield prototype)\n(new prop = 0(<><bbb xmlns=\"__parent__\"><ccc:ddd></ccc:ddd></bbb></>)))) {let constructor = (({__parent__: {}.__count__}));return [z1,,]; }");
tryItOut("throw StopIteration;");
tryItOut("return [1,,];");
tryItOut("\tyield <>this</><!--yy-->;");
tryItOut("{;export *; }");
tryItOut("switch(((( /* Comment */(__proto__[window])))[@foo ^= .2 instanceof *::*(this, <x><y/></x>)])) { default: break; case 2:  }");
tryItOut("/*infloop*/for(__proto__; __proto__; !((__iterator__).apply)) this;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let prop; <>yyy</>; this.__defineGetter__(\"prototype\", this) .@ <><x><y/></x></>.yoyo(<x><y/></x>) - !(-1)) export *;");
tryItOut("do if(@foo) let (<><x><y/></x></> = @foo) { throw  /x/g ; } else  if (__parent__|=<><x><y/></x></>\n) {const prototype = undefined, __count__; } else return *::*; while((null) && 0);");
tryItOut("{let (__count__, prop) { /*infloop*/do let constructor = 1e-81, __noSuchMethod__ = <><x><y/></x></>; while(__count__.__noSuchMethod__); } }");
tryItOut("let (__noSuchMethod__ = (undefined.unwatch(\"__proto__\")), __count__ = (\n)) { /*infloop*/for(__parent__ = <><x><y/></x></> |= <x><y/></x>.prop.constructor; new (*)(); setter = this) switch(<xxx {__proto__}={<><x><y/></x></>} />) { default: break ;break; case 7: export function::prototype; } }");
tryItOut("L:if(({ __parent__: __parent__ }) = __noSuchMethod__\t.prop) {with(<><x><y/></x></>){prop;export *; } } else  if (__parent__ = let (__noSuchMethod__) false.throw(-1)) gc() const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop.prototype in  '' ) __noSuchMethod__;");
tryItOut("{throw [,,]; }");
tryItOut("__noSuchMethod__ = (eval(\"(set) = __count__ = [z1]\", (yield undefined) && return >= __proto__ = null))");
tryItOut("gc()");
tryItOut("if(([__parent__ for each (__count__ in <x><y/></x>) if (<x><y/></x>)].@*)) continue ;");
tryItOut("return;");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("switch(<><xxx>{__iterator__}</xxx></>) { case 1: break; default: break; L: yield;case 5: export constructor;case 033: throw <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const 3.141592653589793 in (-1).isPrototypeOf(__iterator__) in <x><y/></x>) with({__iterator__: this .@ 1e81})return 0/0;");
tryItOut("let(each = true >>>=*) ((function(){__proto__ = constructor;})());");
tryItOut("do {; } while(( /x/  ? [[]] : __count__) && 0);");
tryItOut("/*infloop*/do throw 1e81; while([15,16,17,18].some((/a/gi).apply, <y><z/></y> == __count__ *= window));");
tryItOut("/*infloop*/L:do {gc() } while(<><x><y/></x></> === *::*);");
tryItOut("/*infloop*/for(null; 1e81; this) export constructor;");
tryItOut("L: {break M;if(<> { yield ({a2:z2}) } </> ? undefined : <><x><y/></x></>) {export prop; } }");
tryItOut("{/*for..in*/for(__parent__ = *::* in @foo) {(#1=[#1#]); } }");
tryItOut("L:with({prop: <x/>.*}){let(prop, constructor) { (__proto__);throw prototype = <x/>; }");
tryItOut("(<><x><y/></x></>)(window) = function::__proto__;");
tryItOut("if(((new (function(y) { yield y; return [,];; yield y; })()) >>>=<><xxx>{__parent__}</xxx></>)) { if (((yield 1e+81))) {break ; }} else with(*)return <x/>;");
tryItOut("/*for..in*/M:for([prototype, __proto__] = this in <y><z/></y>) const __proto__ = <x><y/></x>, prototype;");
tryItOut("{/*for..in*/L:for(__proto__ = <><x><y/></x></> in window) ({ __proto__: ({ prop: __noSuchMethod__, __parent__: __count__ }), 3: ({ __noSuchMethod__: prop }) })/*infloop*/while(<x><y/></x>.(*)){'haha'.split } }");
tryItOut("/*infloop*/L:for(\t[, ({ __noSuchMethod__: __iterator__(<x><y/></x>.@foo), constructor: constructor }), ] = constructor.prototype setter= <x><y/></x>.prop = <x><y/></x>.__parent__; __iterator__; 1e81 ? ({}).__iterator__ : (new #3={a:#3#})) \nlet (({ constructor: [, prop, ] })) { ; }");
tryItOut("if((<x><y/></x> <<= <x><y/></x>)) __noSuchMethod__; else  if (<x/>) {export __proto__;export *; }");
tryItOut("export __noSuchMethod__; const __noSuchMethod__;");
tryItOut("/*for..in*/for(__proto__ = ({__count__: (<x/>.__noSuchMethod__)}) in ((true)())) {__proto__ = undefined, __proto__; }");
tryItOut("yield;\nyield;\n");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; [,,z1]; <y><z/></y>) {const __noSuchMethod__;export constructor; }");
tryItOut("with({constructor: new Error( '' , <y><z/></y>)}){}");
tryItOut("L:do {} while((arguments) && 0);");
tryItOut("__iterator__");
tryItOut("/*for..in*/for(const [prototype, function::prototype] = new /a/gi(this.__defineGetter__(\"__count__\", null)) in [15,16,17,18].sort(true, true) @ window & window) { }");
tryItOut("with(prototype = true)M:switch(function ([y]) { }.watch(\"function::__proto__\", (1 for (x in [])))) { default: /*for..in*/for(var __parent__ in \t((<x><y/></x>)(\t \"\" )))break M;break; yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const __count__ = constructor; __count__; <y><z/></y>) {(#1=[#1#]); }");
tryItOut("let (__proto__ = (function  __count__ (__proto__, __count__) { (*::*); } )(), __iterator__ = @foo) { return; }");
tryItOut("if(<x><y/></x>) {(__noSuchMethod__); } else  if (<x/>) {yield; }");
tryItOut("/*infloop*/while([11,12,13,14].map)M:with((new gc(<><x><y/></x></>, true))){var __iterator__ = <><x><y/></x></>, __noSuchMethod__ = [z1,,];export *; }\n");
tryItOut("/*for..in*/for(let prop in *::* :: function ([y]) { }) {/*infloop*/while((<x/> :: <y><z/></y>)){return;throw <x><y/></x>; } }");
tryItOut("throw  /x/g ;");
tryItOut("{export *;__noSuchMethod__ = ++constructor; }");
tryItOut("do {return (-1); } while(((this.__defineGetter__(\"prototype\", gc)) = ( != <><x><y/></x></>)) && 0);");
tryItOut("throw ((1.2e3\n)());/*infloop*/do {export *; } while(#3={a:#3#});");
tryItOut("new Function");
tryItOut("\nyield (new String(eval(\"-1\", __proto__ = __proto__ :: new (function  __iterator__ () { return  \"\"  } )\f(#3={a:#3#}))) ===  /x/g .__lookupGetter__(\"__count__\"));");
tryItOut("if(<><{__noSuchMethod__}><!--yy--></{__noSuchMethod__}></>) { if ((__proto__ = *::* ?  /x/  : *::*)) {return; }} else {return;throw window; }");
tryItOut("/*for..in*/M:for(prop in ((\t/a/gi)(((yield <><x><y/></x></>) ? @foo.eval(undefined) : 'fafafa'.replace(/a/g, (1 for (x in [])))[__count__ =  /x/g .__proto__ = [] for each (__iterator__ in <x><y/></x>)])))){const __count__ = <x><y/></x>; }");
tryItOut("if([eval(\"<x/>\", this)].some(function(y) { yield y; yield;; yield y; }).throw(++eval(\"switch(#3={a:#3#}) { default: export __noSuchMethod__;break;  }\",  ''  = <>\t<x><y/></x></>))) /*infloop*/for(({ __iterator__.eval(window): [__iterator__, [, ]] }) = yield [,,z1] <= window; <xxx>{__proto__}</xxx>; ((function  __proto__ () { yield true } ).call)(window ?  ''  : <y><z/></y>, @foo)) /*infloop*/for( '' ; [,,z1]; <><x><y/></x></>) const prop = <x/>;");
tryItOut("if(( /* Comment */undefined.@foo)) /*for..in*/for(const __iterator__ in ((__proto__.__proto__ = <x><y/></x>)(*))){\rvar __count__ = <><x><y/></x></>;return; } else /*infloop*/for(let ({ __noSuchMethod__: __iterator__, prototype: [constructor, , __noSuchMethod__] }) = [prototype.__lookupSetter__(\"__count__\")].filter(Math.sin); [4. .@x:: <><x><y/></x></> for (__proto__.prototype in <><x><y/></x></>) for each (prop in false)]; *::*) {const __proto__ = 3.141592653589793, __proto__ = 3.141592653589793; }");
tryItOut("/*for..in*/L:for(let __iterator__ in (yield window)) {(<><x><y/></x></>);/*for..in*/L:for(let constructor((*.yoyo(0))) in ((gc)(__count__ = null = null))){/*infloop*/while(__proto__){const __parent__, __proto__; } } }");
tryItOut("let(prototype = 3) { (/a/gi).apply");
tryItOut("/*for..in*/M:for(var constructor in ((Math.pow)(__iterator__.__count__ = @foo.prototype)))throw [[]];");
tryItOut("let __parent__, prototype = <><x><y/></x></>");
tryItOut("prop");
tryItOut("{}\nthrow window;\n");
tryItOut("with(({ prototype: prototype }) = __count__){var prototype, __iterator__; }");
tryItOut("{}\nif((uneval((false.valueOf(\"number\"))))) break L; else  if ( /x/g [<x/>]) {<y><z/></y>;export *; }\n");
tryItOut("/*infloop*/for(let __iterator__; prop = <x/> ? <><x><y/></x></>()\n : false.__iterator__.throw(__parent__.valueOf(\"number\")); <bbb xmlns:ccc=\"( /x/ .__defineGetter__(\"__parent__\", function () { return <x><y/></x> ? <><x><y/></x></> : this } ))\"><ccc:eee></ccc:eee></bbb>) {/*infloop*/M:for(var __noSuchMethod__; yield (true | <><x><y/></x></>); (-1)) {if([,]) { if (<x><y/></x>) {var prototype = __noSuchMethod__;throw *::*; }} else { } }gc()\n__count__\n }");
tryItOut("{} const __parent__;");
tryItOut("__count__ = __proto__;");
tryItOut("{yield; }");
tryItOut("prototype = __proto__;");
tryItOut("M:with((new (1 for (x in []))(<x><y/></x>)).eval((prototype = false)))const __noSuchMethod__");
tryItOut("if(__iterator__ = <zzz>*</zzz>) /*infloop*/for(const __noSuchMethod__ = <x><y/></x> .. <x><y/></x> ? ([,,] for each (__proto__ in <x/>)let __proto__ = window;) : __iterator__ = __iterator__; this; (-1)) {return this; } else {/*for..in*/for(prop in (([1,2,3,4].slice)((function  __count__ (__parent__, prototype) { return this } )([[]],  \"\" )))){ }{throw [,]; } }");
tryItOut("while((__iterator__ = null) && 0){yield; }");
tryItOut("L:if(<><x><y/></x></>.(<x/>)) { if () while((<x/>) && 0)yield; else {let __proto__ = <><x><y/></x></>;gc() }}");
tryItOut("return window;");
tryItOut("if(__count__.__noSuchMethod__ = (({}))) { if ( /* Comment */true) {/*infloop*/M:while(*){ { yield; }  } }} else {gc()yield; }");
tryItOut("if(__noSuchMethod__ = ({ __count__: constructor, prototype: __parent__ })) (<><x><y/></x></>); else  if (<x><y/></x>(<><x><y/></x></>)) {var __proto__ =  /x/ , prop = *; } else {/*infloop*/do {{}export __proto__; } while(__proto__); __parent__;");
tryItOut("if(eval(\"yield function ([y]) { };\",  '' ).__lookupGetter__(\"__noSuchMethod__\")) __parent__ else  if (eval(\"1e-81.unwatch(\\\"__count__\\\")\", constructor = <x><y/></x>) .@*:: (uneval(export *)))  else M:if(3.141592653589793) { if (*::*) return 4.; else {__parent__; }}");
tryItOut("/*for..in*/for(let [__iterator__, prop] =  /x/  in <><xxx>{__parent__}</xxx></>) gc()");
tryItOut("{return  /x/g ; }");
tryItOut("return true .@ *\n");
tryItOut("/*infloop*/do /a/gi while((__parent__ = <x/>));");
tryItOut("\freturn  /x/ ;\nlet __count__, constructor;\n");
tryItOut("(-1).__lookupSetter__(\" /x/ \")");
tryItOut("with(case 9: break; ){(prop);; }");
tryItOut("switch((yield (this.zzz.zzz))) { default: break;  }");
tryItOut("/*infloop*/L:for(let __parent__; ~<x><y/></x>; *) M:if(*) let (__parent__) { __parent__ = 'fafafa'.replace(/a/g, ((1 for (x in []))).call) }");
tryItOut(";\n;\n");
tryItOut("let (__iterator__ = 1.3) { continue L; }");
tryItOut("let __proto__ =  /x/g , __parent__\n");
tryItOut("/*infloop*/while(* instanceof <employee id=\"1\"><name>Joe</name><age>20</age></employee>){setter, __iterator__ = <y><z/></y>;yield; }");
tryItOut("/*for..in*/for(var [__parent__, __count__]\f = 'fafafa'.replace(/a/g, function(q) { return q; }) in typeof  /* Comment */ /x/g ) for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("\rif((prop = constructor)) /*infloop*/do {var __iterator__ = <x><y/></x>; } while(<><x><y/></x></>);");
tryItOut("let (prop = __count__.__defineGetter__(\"__iterator__\", eval)) { continue ; }");
tryItOut("L:with({__iterator__: window >>> (-0)}){return; }");
tryItOut("L:with({__proto__: {with({prop: <x><y/></x>})yield;with({function::prototype: <x><y/></x> ? [z1,,] : <x><y/></x>.@*}){return; /x/ ; } }})\nif(__proto__|={}[[,,]]) { if (prototype @ this) function\f  prototype ()<y><z/></y>} else {var prototype = <x/>;(<x/>)\r.watch }");
tryItOut("if((new ([z1,,]\n)(<x/>, (eval(\"@foo %= <y><z/></y>\", ( /* Comment */__noSuchMethod__)))) && (eval(\" /x/g .__lookupGetter__(\\\"__count__\\\")\", #3={a:#3#} |= 1e4.__iterator__)))) {let constructor = ({a1:1}), __iterator__ = [[1]]; } else  if (new ([,,z1][ \"\" ])) return;");
tryItOut("/*infloop*/for(window; prop; constructor) throw __count__;");
