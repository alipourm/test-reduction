tryItOut("M:if(5.0000000000000000000000.@*) { if ( '' .__iterator__) } else {}");
tryItOut("/*for..in*/L:for(constructor = true in 1.2e3) gc()");
tryItOut("const __count__ = 0.1");
tryItOut("with({__parent__:  /x/ .__count__})yield ({});");
tryItOut("do /*infloop*/for(var prop; window; (false.eval(this))) {[[]]; } while((.2) && 0);");
tryItOut("L:if([[1]]) ");
tryItOut("M:switch(({ __parent__: __iterator__ }) = (window)()) { case 8: break; break; break; case 8: break; if(<x/>) {undefined; } else  if (<><x><y/></x></>) return <><x><y/></x></>;__iterator__;break; default: continue L; }");
tryItOut("if((__count__.( \"\" ))) { if (new (Function)(__count__)) export *; else yield;}");
tryItOut("/*infloop*/for(true; 0; this) {<x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({a2:z2})['__count__'] in [, prop, __parent__, , constructor] = (<y><z/></y>.__defineSetter__(\"prototype\", (<x><y/></x>).__defineSetter__)).eval( /x/g --)) {/*for..in*/for(__parent__ in (([1,2,3,4].map)([__parent__ = constructor].map([1,2,3,4].map)))){/a/gireturn; } }");
tryItOut("/*infloop*/for(__parent__ = 1e+81.eval(([1,2,3,4].slice).call(<x/>, window)); ({ __proto__: __count__ }) = ({ __proto__: __noSuchMethod__ }); constructor = window) yield  '' ;");
tryItOut("/*for..in*/for(const __count__ = ((uneval(<><x><y/></x></>))) in let constructor = __noSuchMethod__.valueOf(\"number\")) {do {export *;throw 1e+81; } while((new ({a2:z2})(<x><y/></x>)) && 0); }");
tryItOut("\nswitch(<zzz>window</zzz>) { default: ((-0)); }");
tryItOut("return;");
tryItOut("do export *; while((0/0.__proto__) && 0);");
tryItOut("with({prototype: constructor.((-1))})let constructor");
tryItOut("");
tryItOut("/*infloop*/do {if(([@foo].sort(({}).hasOwnProperty))) export __iterator__; else  if (this.zzz.zzz) {return; } } while(((new (Function(null))(( /* Comment */prototype))) ? <bbb xmlns=\"~(uneval(4.))\"><{__count__}> </{__count__}><ccc:ddd><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></ccc:ddd></bbb> : \n(__noSuchMethod__.__noSuchMethod__ setter= (((__proto__).__defineSetter__).apply).apply)));");
tryItOut("while((function(id) { return id }) && 0){throw [z1];throw <><x><y/></x></>; }\nreturn;\n");
tryItOut("L:with((({prototype setter: ({}).hasOwnProperty }))){(<y><z/></y>);with({prototype: <y><z/></y> .@ __noSuchMethod__})\f{L:if(<y><z/></y>) {{}return window; } else {export *;; } } }");
tryItOut("/*infloop*/L:do {*; }\t while((({}).__lookupGetter__).call(__parent__, window, 0/0));");
tryItOut("let (__count__ = #2=({prop: try {  } finally { {} } }), __proto__ = let (__proto__, __proto__) arguments) { yield  '' ; const prop; }");
tryItOut("while((eval(\"(__noSuchMethod__.(this.zzz.zzz))\", undefined -= [[1]].__defineSetter__(\"__iterator__\", function(q) { return q; }))) && 0)/*for..in*/for(prototype = ({ __count__: constructor, constructor: __count__ }) = __noSuchMethod__ in new Exception(window, __proto__)) with(undefined)__count__;");
tryItOut("{__noSuchMethod__, __noSuchMethod__;(<x/>); }");
tryItOut("{; }");
tryItOut("/*for..in*/M:for(const [__parent__, __noSuchMethod__] = this.yoyo(window) in *::*) export __count__;");
tryItOut("prototype = constructor;");
tryItOut("/*infloop*/M:for(constructor.prop = ([__parent__] = *::* != *::*); (prop = window); (let (__noSuchMethod__) @foo)) {throw @foo; }");
tryItOut("yield\n\ftry { var __count__; } finally { with({}) export __noSuchMethod__; } ");
tryItOut("/*infloop*/do {let prototype = __count__, constructor; } while(__noSuchMethod__ = );");
tryItOut("(<xxx>{__noSuchMethod__\t}</xxx>.((#1= &= true)--)), #3={a:#3#}");
tryItOut("return constructor; const constructor;");
tryItOut("if(0/0.__iterator__ = window.propertyIsEnumerable(\"__noSuchMethod__\")) /*");
tryItOut("M:with(<x/>.@foo.__lookupGetter__(\"__iterator__\")/*\n*/){L: return; }");
tryItOut("while(((<><x><y/></x></>.propertyIsEnumerable(\"prop\")).valueOf(\"number\")) && 0)__proto__ = 1e81;");
tryItOut("while((__parent__.isPrototypeOf(window).prop) && 0){}\n");
tryItOut("{}");
tryItOut("let(__iterator__ =  \"\" , __proto__ =  '' ) { export *;");
tryItOut("export *;/*for..in*/for(const [prop, prop] = __parent__.__proto__ in [0/0]\f.filter(window)) {__count__ =  \"\" ; }");
tryItOut("if((yield //h\n<><x><y/></x></>)) {let __parent__ = <x><y/></x>, prop = <x/>; } else  if (<><x><y/></x></> != *) while((constructor.(@foo).throw(prototype.prop setter= [1,2,3,4].slice)) && 0){/*infloop*/M:while(({a2:z2})){(prototype);return; }{} }");
tryItOut("/*infloop*/M:do __count__, __iterator__ = <x/>; while(__proto__.__noSuchMethod__ = (this.zzz.zzz));");
tryItOut("/*for..in*/for(const prototype in [[]]) {break L;return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(prop = Exception() in __iterator__ for each (__noSuchMethod__ in false).unwatch(\"prop\")) {try { gc() } finally { var __count__, prototype = <><x><y/></x></>; }  }");
tryItOut("throw true;prototype = true;");
tryItOut("/*infloop*/for(const __iterator__; __parent__; #3={a:#3#}) {return; }");
tryItOut("this.zzz.zzz;");
tryItOut("null");
tryItOut("while((@foo >>> __noSuchMethod__) && 0){let __count__ = <x/>;x::__iterator__ }");
tryItOut("/*for..in*/L:for(var [__iterator__, __noSuchMethod__] = new Function in <x><y/></x>.(__count__)) /*infloop*/while(*){let __noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__ = 3.141592653589793;yield; }");
tryItOut("let(__iterator__) ((function(){let(#3={a:#3#} = *::*.eval([[]]), ({ __count__: prop, __iterator__: constructor }) = ((yield null))) { let(__noSuchMethod__, prototype = @foo) { let(prototype = 0) { yield;})());");
tryItOut("throw StopIteration\n");
tryItOut("M:switch(delete window) { default: break;  }");
tryItOut("/*for..in*/for(const [__proto__, __count__] = this-- in new Math.sin()) {{let __parent__ =  '' ;{} } }");
tryItOut("if((p={}, (p.z = prop)())) {(-1);let __noSuchMethod__ = <x><y/></x>; } else  if (<><x><y/></x></>.__defineGetter__(\"prototype\", (prototype).watch)) /*infloop*/while(this.__defineGetter__(\"this\", true)){return <x/>;<x/>; } else {if(prop.constructor) { if (__proto__ = __proto__) const __count__ = <x><y/></x>;} else break ; }");
tryItOut("if(this.__defineGetter__(\"__proto__\", (gc).call).isPrototypeOf(<x><y/></x>.(<y><z/></y>)) >= null) { if (*++) /*for..in*/for([prototype, __proto__] = 1.3 in <><x><y/></x></>) } else export *; const __parent__\nprop = 033");
tryItOut("yield *;while((<y><z/></y>) && 0){let constructor; }");
tryItOut("with((this ^ .2.watch(\"__noSuchMethod__\", ({}).hasOwnProperty))){__noSuchMethod__ = null;yield  '' ; }");
tryItOut("do {<x><y/></x> const (this.__defineGetter__(\"constructor\", Function)); } while((((uneval(function::__count__))).throw()) && 0);");
tryItOut("let (__count__, function::__count__) { window }");
tryItOut("3, prop = prop+=<x><y/></x>const @foo = *, __noSuchMethod__ = false;");
tryItOut("/*infloop*/L:for(var __parent__; <><x><y/></x></>; __count__) { }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __count__] = @foo in  /x/ ) <y><z/></y>;");
tryItOut("export *;let __iterator__, prototype = true;");
tryItOut("M:with((0x99.watch(\"__noSuchMethod__\", /a/gi))[false.*]){}\n{}");
tryItOut("/*infloop*/M:for(__proto__; <zzz>(RegExp())</zzz>; (new Function)) {if(({prototype: *::*})) return null;export *; }");
tryItOut("{L: (-1);export __parent__; }");
tryItOut("if(({__count__ setter: ([15,16,17,18].filter((prop).watch, <><x><y/></x></>)).__defineSetter__, __iterator__: let (prop = __noSuchMethod__, __parent__) __parent__ })) {var __count__ = default: let __iterator__, __proto__ = <y><z/></y>;case <><x><y/></x></>: case 2: yield  '' ;break; case *: break; , prop = *const __iterator__ = __iterator__; } else \f{return; }");
tryItOut("({a2:z2})");
tryItOut("/*for..in*/for([__proto__, prop] = this in <x/>.unwatch(\"prop\")) {if(<x><y/></x>--) { if (__count__ = __parent__) __iterator__, this = __parent__; else } const prototype; }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in (('fafafa'.replace(/a/g, (({}).__lookupGetter__).apply))(this.zzz.zzz)))break L;\n");
tryItOut("{let __iterator__; }");
tryItOut("{/*infloop*/for(let prop = <><{__iterator__}><ccc:ddd><!--yy--></ccc:ddd></{__iterator__}></> %= (yield constructor.__count__ setter= .2); +prototype = [,]; ((uneval([[1]])))) (window); }");
tryItOut("/*infloop*/for(1e4; @foo; __count__) {continue ; }");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = (__parent__.__noSuchMethod__)() >>= (1 for (x in [])) in return) {if(constructor.__parent__ getter= <x><y/></x>) { if ((new Function()) .@x:: window) {export *; }} else {with({__parent__: <x/>}){continue M;const __count__, __proto__; }yield <><x><y/\t></x></>; } }");
tryItOut("do if((new ((/a/gi).call)(<x><y/></x>,  '' ))) undefined = null, __proto__ = <x><y/></x>; else  if ((false\n)) {eval } while((<x><y/></x>.yoyo([,])) && 0);");
tryItOut("const __count__ = <><x><y/></x></>, __proto__; const __iterator__; const prototype");
tryItOut("/*for..in*/for(let [__count__, constructor] = (({ set __noSuchMethod__() { yield (function  __count__ (prop) { yield <x/> } )( /x/g , <x><y/></x>) } , __noSuchMethod__: [1,,] === * >>>=<bbb xmlns:ccc=\"<><x><y/></x></> ^= undefined\"><ccc:eee></ccc:eee></bbb>  })) in <><bbb xmlns:ccc=\"__parent__\"><ccc:eee></ccc:eee></bbb></>) let prototype = __noSuchMethod__, __count__ =  /x/g ;");
tryItOut("throw prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let \t__count__ in <y><z/></y>) /*for..in*/L:for(let __count__ = __noSuchMethod__ in <x><y/></x>) { '' ;export __proto__; }\n");
tryItOut("/*infloop*/while(([15,16,17,18].sort(eval, <x/>.__parent__ = __parent__)))if([this].sort(Math.sin)) { if (<y><z/></y>(prop,  \"\" )) {return;return window; }} else {break L; }");
tryItOut("/*for..in*/for(const __proto__ = ((<x><y/></x> >>= <x><y/></x>).eval({})) in [[]]) L:if(__parent__) ;");
tryItOut("return;export __count__;");
tryItOut("");
tryItOut("for(let y in []);");
tryItOut("L: if(this) {yield null; }\n");
tryItOut("{/*for..in*/M:for(var __iterator__ in <><x><y/></x></>) {return; } }");
tryItOut("{export constructor; }");
tryItOut("let(prop, __count__) { throw StopIteration;");
tryItOut("M:with(( /x/ \t >> <><x><y/></x></>.__count__) instanceof __parent__.propertyIsEnumerable(\"prototype\")){return; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__.__parent__ =  /x/g ['__count__']] = #1# in (__iterator__ = (-0))) {;const prop = __proto__, __noSuchMethod__ =  /x/ ; }\nif(<>\n<x><y/></x></>) { if ([]) return (-0); else (<x><y/></x>);}");
tryItOut("L: ({}).hasOwnProperty");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in #3={a:#3#}) {export *; }");
tryItOut("/*for..in*/for(let [, constructor, , [({ prototype: \f__parent__ }), , ({ __parent__: constructor, __noSuchMethod__: __proto__ })], ({ __noSuchMethod__: ({ constructor: __iterator__, prototype: __proto__ }), prototype: [] })] in <><xxx>{__iterator__}</xxx></>) gc()");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("{yield this;yield; }");
tryItOut("\n");
tryItOut("/*for..in*/M:for(var [__proto__, __parent__] = ~* in __iterator__) {/*infloop*/while(*::*)return; }");
tryItOut("{export __iterator__;break M; } const __count__;");
tryItOut("M:while(( /x/g ) && 0)return  /x/ ");
tryItOut("if(__noSuchMethod__.__proto__ setter= 'haha'.split) { if ( /x/g .propertyIsEnumerable(\"__noSuchMethod__\")) undefined else }");
tryItOut("do return; while((({a1:1}) = <x><y/></x>) && 0)\n");
tryItOut("do {(this);L:if(*) {prop; } else (<><x><y/></x></>); } while((__iterator__ = (prop.((true[.2])))) && 0);");
tryItOut("L:with({__parent__: [-true if (<y><z/></y>)]})function(y) { yield y; ; yield y; } const __count__;");
tryItOut("/*infloop*/L:while(__proto__)prototype, constructor = ({a1:1});");
tryItOut("/*for..in*/for(prop = (__count__ .@*:: <x><y/></x>) in <y><z/></y> in ((-1) = *)) export *;");
tryItOut("for(let y in [5,6,7,8]) ;");
tryItOut("if([<x><y/></x>.__defineSetter__(\"__iterator__\", function(q) { return q; })]) function (__noSuchMethod__, function::__noSuchMethod__) { constructor; }  else {L:if( \"\" ) ({}).__lookupGetter__ else export *; }\n/*infloop*/for(let prototype; (eval).call(((yield <x/>.throw(<><x><y/></x></>))), (uneval(<x/>)), (constructor)); __iterator__ =  \"\"  .@x:: <><x><y/></x></>++) export __count__;");
tryItOut("yield\n");
tryItOut("L: let (__parent__ = <><x><y/></x></>, prototype) { {} }");
tryItOut("for(let y in []);");
tryItOut("{/*infloop*/while([]){L:with({__iterator__:  \"\" }){yield; } } }");
tryItOut("L:if( \"\" -- .@x:: \f<x/>) L: {return;continue ; } else  if (new [1,2,3,4].map()) {return __proto__ = null;return  /x/ ;\f } else /*for..in*/L:for((__parent__) in prop = constructor.@foo) {break L; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (<x><y/></x>.valueOf(\"number\"))(__noSuchMethod__.__noSuchMethod__ getter= Function) in null) {let __iterator__;\rconst __count__ = <x><y/></x>, __proto__; }");
tryItOut("break M;");
tryItOut("let(__noSuchMethod__ = false) { with({}) { try { {} } catch(function::prop if new Exception( '' )) { gc() } catch(prop( /x/ ) if (function(){export \n*;})()) { export *; }  }  const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in __proto__) yield;");
tryItOut("with({__count__: window}){prototype, constructor;const __iterator__ = 0x99, prop = <y><z/></y>; }");
tryItOut("yield\n");
tryItOut("if(1.2e3) return;");
tryItOut("switch((-0)) { case <x><y/></x>: break;  }gc()");
tryItOut("/*infloop*/for(const ({ __parent__: function::constructor: ({ get prop prototype (prop, __noSuchMethod__)undefined }) }) = <zzz>*::* ?  /x/  : *</zzz>.( { yield window.watch(\"__count__\", [1,2,3,4].map) } ); [15,16,17,18].filter(prototype.__proto__, __proto__ = <><x><y/></x></>); (this.zzz.zzz >>>=(function (__noSuchMethod__, __count__)0x99).call((uneval(*::*)), prop = constructor, <><x><y/></x></>)).unwatch(\"__noSuchMethod__\")) { }");
tryItOut("L: //h\n{if(__proto__.__iterator__ getter= Math.pow) { if (<y><z/></y> for each (__parent__ in 1.3)) {;\nreturn;\n } else function (__iterator__) { return 033 } } }");
tryItOut("/*infloop*/for(const __iterator__; ({ __parent__: ({ constructor: __proto__ }) }) = [, __parent__, , , ]; __iterator__%=<x/>) ");
tryItOut("switch(__parent__.valueOf(\"number\")) { default: break; case 1: return .2;break; break;  }");
tryItOut("(__proto__)");
tryItOut("/*infloop*/for(var ({ constructor: ({ __proto__: ({ __noSuchMethod__: __noSuchMethod__ }) }) }) = return let (prototype)  '' ; (yield [new ({({}).__lookupGetter__ }).__defineSetter__(Object())].map(eval(\" /x/g \",  \"\" ))); __proto__ = -0 &= prototype >> ({ __noSuchMethod__: __count__ }) = <x><y/></x> ? __count__ : <x/>) {L:do {<x/>;throw false; } while(( '' ) && 0)\n-if((__iterator__%=*::*).isPrototypeOf(false.unwatch(\"__noSuchMethod__\"))) return\n else __iterator__ = <><x><y/></x></>, prototype; }");
tryItOut("{gc()yield <><x><y/></x></>;switch([15,16,17,18].some((new Function(\"/*infloop*/while(constructor)export *;\")), *)) { default: yield @foo +  /x/ ;case 6: with( /x/ ){var __noSuchMethod__, x::prototype;break ; }break; case 6: __iterator__ = default: case 3: case 2: case <><x><y/></x></>: break; case 6: case <><x><y/>/*\n*/</x></>: break; , __noSuchMethod__ = <x/>;case (#2=({__iterator__: __proto__})): break;  } }");
tryItOut("/*infloop*/for(constructor; [15,16,17,18].sort(({}).__lookupGetter__, (false << __iterator__)\n); 3.141592653589793) {yield -3/0;gc() }");
tryItOut("if((null in <x/> ? <><x><y/></x></> : this)) { if ((false.yoyo(<x><y/></x>\n))) {/*for..in*/for(var function::__parent__ in [z1,,]) prop = <><\tx><y/></x></> } else { }}");
tryItOut("{{}return <><x><y/></x></>; }");
tryItOut("with({__iterator__: window}){return;with(<><x><y/></x></>);\n/*for..in*//* nogeckoex bug 349964 */L: for  each(const getter in @foo) {export __noSuchMethod__; }\n }");
tryItOut("if((constructor = ({a2:z2}))) { if ( { yield constructor; } .__noSuchMethod__) {yield; }} else {(#1=[#1#]); case  }");
tryItOut("if(this.__defineSetter__(\"__proto__\", (1 for (x in [])))) {gc() }");
tryItOut("if(__count__) /*for..in*/for(const constructor in ) {yield <x><y/></x>;gc() }");
tryItOut("while((((true ? <x><y/></x> : -3/0 << constructor = <><zzz>@foo</zzz></>) ? (<x><y/></x> & this) : window.__proto__ , true\t)) && 0)with((p={}, (p.z = /a/gi())()))null");
tryItOut("/*infloop*/for((p={}, (p.z = <y><z/></y>)()); (033)() , (<><x>\n<y/></x></>.isPrototypeOf(@foo)); (__iterator__.prop = ([*::*].filter(Function)))) export __proto__;");
tryItOut("/*for..in*/\tfor(let [function::function::__parent__, prop] = (function ([y]) { })() << <x><y/></x>, (<><x><y/></x></>.watch(\"__iterator__\", Math.sin)) in ([z1,,].propertyIsEnumerable(\"constructor\")).valueOf(\"number\")) {/*infloop*/while(*::*){{} } }");
tryItOut("with({}) { continue M; } ");
tryItOut("switch(function(q) { return q; }) {  }");
tryItOut("if([<y><z/></y>]) {L:if(<x><y/\r></x>) {yield; } else  if (this) yield <x><y/></x>; else return <x><y/></x>; }");
tryItOut("/*infloop*/for(let prop = (new ([1,2,3,4].map)(<x><y/></x>) .@x:: __iterator__.__iterator__); \t(this.__defineSetter__(\"prototype\", eval)); ([eval(\"var __proto__ =  \\\"\\\" ;\", __count__.unwatch(\"__count__\"))].map(function(y) { yield y; if(3) yield null; else export getter;; yield y; }))) if(({ __count__: [] }) = __iterator__) {}yield #1#;");
tryItOut("/*for..in*/for(var [constructor, __proto__] = <><x><y/></x></> in false) {export __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop(this(<y><z/></y>)) in * + constructor.__proto__  /x/g ) prop, __parent__;");
tryItOut("gc()\n\nprototype;\n\n/*for..in*/L:for(var prototype in false) { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop((p={}, (p.z = function(id) { return id }(0x99, 3))())) in let (__parent__) (<x><y/></x> @ (-1))) {/*for..in*/L:for(let __parent__ in -1) export __proto__; }");
tryItOut("L:if((eval(\"1e4\", *::*))) ");
tryItOut("{;if((constructor = [,])) {return <x><y/></x>; } else  if (let (__iterator__ = <><x><y/></x></>) window) {yield; } }");
tryItOut("/*for..in*/for(let __parent__ = (<><x><y/></x></>.unwatch(\"constructor\").watch(\"prototype\", [1,2,3,4].slice)) in __iterator__ = __count__.__noSuchMethod__) {/*for..in*/for(var __noSuchMethod__ in  /x/g ) return <><x><y/></x></>; }");
tryItOut(" /x/ \n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:for( /x/ ; M:switch(prototype = ({__parent__ getter: (\ffunction(q) { return q; }).call }) % <><x><y/></x></> ^ 1e+81) { default: L:if(([11,12,13,14].filter) <= yield  /* Comment */ /x/g ) throw *;let (__noSuchMethod__) { ; }break;  }; (new 'haha'.split(<y><z/></y>, *)) !== undefined) (__proto__).watch");
tryItOut("{/*infloop*/for(this.__defineSetter__(\"__parent__\", new Function);  '' ; (uneval([[1]]))) {export *\n }let (__noSuchMethod__, __noSuchMethod__) { let __count__, __count__; } }{if(<y><z/></y> ? {} :  \"\" ) { if (constructor % <><x><y/></x></>) var __proto__ =  \"\" ;} else __noSuchMethod__ = true, prototype = __count__; }");
tryItOut("for(let y in [5,6,7,8]) /*for..in*/L:for(prototype = <><x><y/></x></> in this) {yield *; }");
tryItOut("if('fafafa'.replace(/a/g, (function  __noSuchMethod__ (__proto__, constructor) { yield (p={}, (p.z = @foo)()) } ).apply)) if((({__parent__: ((p={}, (p.z = undefined)())[(true != prop)]), prop: (yield 0) }))) /*infloop*/do gc() while( '' ); else  if (new Date([z1], __count__) for each (prototype in <><x><y/></x></>) if (*::*)) try { return [[1]]; } catch(prop) { break ; } finally { {} } ");
tryItOut("if(<><zzz>(eval(\"gc()\", <><x><y/></x></>) %= (<x/> if (<x/>))) |= ({ __count__: __noSuchMethod__, this: __iterator__ }) = ++<y><z/></y></zzz></>) {return; } else  if (([1,2,3,4].map)) yield;");
tryItOut("gc()");
tryItOut("L:if(+(__count__.__noSuchMethod__ = null .@*:: <x><y/></x>.valueOf(\"number\")).__defineSetter__(\"__iterator__\", #2=({__proto__: (<><x><y/></x></>)}))) {{}gc() } else  if ((this.__defineGetter__(\"__parent__\", (new Function).call))++) const __noSuchMethod__, __parent__ = this;");
tryItOut("/*infloop*/L:for((delete window ^ <x><y/></x>); (eval(\"[<y><z/></y>].sort(false)\", __noSuchMethod__)) &&  '' .propertyIsEnumerable(\"__proto__\"); (*::*.watch(\"prototype\", Math.sin))) return (new <x><y/></x>(<x><y/></x>));");
tryItOut("{return <y><z/></y>;export *; }");
tryItOut("/*infloop*/M:for((return  \"\" ); (yield #3={a:#3#} /= (@foo.eval(window))); ) {if((__iterator__)) {<x/>; } else  if ((__count__ in <x><y/></x>)) {} else {export __proto__; }if(((prototype).__defineSetter__)(<x><y/></x>)) { if (this |= <><x><y/></x></>) return;} else {throw __count__;var __count__ = <><x><y/></x></>; } }");
tryItOut("/*infloop*/for(__proto__; __count__ for each (constructor in __iterator__); false) yield <y><z/></y>;");
tryItOut("{yield <><x><y/></x></>;return; }");
tryItOut("if((__proto__ = ('fafafa'.replace(/a/g, [1,,])) |= <x><y/></x>.throw(<y><z/></y>))) { if (new <y><z/></y>.__count__(__noSuchMethod__.__count__ = <xxx>{__count__}</xxx>, (prop = __noSuchMethod__) |= gc())) /*infloop*/do let __count__, constructor = null; while(*::*.@*);} else {{return; } }");
tryItOut("");
tryItOut("with({__parent__: 3/0})throw <x/>");
tryItOut("if([[]]) { if ('fafafa'.replace(/a/g, [1,2,3,4].map)) default: var __noSuchMethod__, prototype;case each.(this.__defineSetter__(\"__iterator__\", gc)): break; break; case 8: <><x><y/></x></>;break; case 3: /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__( /x/g ) in this) {const prop = 033;yield; }break;  else /*infloop*/do function(y) { yield y; yield <><x><y/></x></>;; yield y; } while(this);}");
tryItOut("/*for..in*/for(var constructor in (({}).isPrototypeOf(prototype))) {export __iterator__;/*infloop*/for(const constructor = <y><z/></y>;  /x/ ; prop) {{} } }");
tryItOut("/*infloop*/for(const prototype = *; prototype;  /x/g ) (window);");
tryItOut("switch(null.isPrototypeOf(window)) { case __noSuchMethod__ = constructor = <><x><y/></x></>: /*for..in*/for(const [__parent__, prototype] = ({ get __iterator__() { yield <y><z/></y>; }  }) in *) {yield this;{} }break; default: throw <x><y/></x>; }");
tryItOut("let (__count__) { export *; }");
tryItOut("if(<bbb xmlns:ccc=\"5.0000000000000000000000.isPrototypeOf(4.)\"><ccc:eee></ccc:eee></bbb>) {/*for..in*/for(const __parent__.__iterator__ in (((1 for (x in [])))(case <y><z/></y>: let prop, constructor;.@foo)))return false;/*infloop*/do {continue ;return; } while((1.3.unwatch(\"prototype\"))); } else {__parent__ do export prototype;) && 0); }");
tryItOut("const __count__;");
tryItOut("/*for..in*/for(const [prop, constructor] = [<><x><y/></x></>].sort(@foo) .@ *::*[eval(\"([prototype for (__count__ in <><x><y/></x></>)])\", __proto__.__iterator__ setter= /a/gi)] in (this.__defineSetter__(\"prop\", ++ /x/g ))) {switch(<><x><y/></x></>) { case 3: [1,,] = [1];break;  }/*infloop*/L:while(__count__ = \t({__parent__ getter: [1,2,3,4].map })){export *;return <x/>; } }");
tryItOut("/*infloop*/L:while((prototype.__proto__))(<><x><y/></x></>);");
tryItOut("let (__proto__, prototype = true) { ; }");
tryItOut("return;");
tryItOut("while((<bbb xmlns:ccc=\"<bbb xmlns:ccc=\" '' \"><ccc:eee></ccc:eee><//*\n*/bbb>.(({a1:1}) ? <x><y/></x> : <x><y/></x>)\"><ccc:eee></ccc:eee></bbb>.(( /* Comment */<y><z/></y>) %= __proto__.prototype getter= <x/>)) && 0){prototype }");
tryItOut("gc()return prop;");
tryItOut("throw <x><y/></x>;\nreturn;\n");
tryItOut("/*for..in*/for(const prototype = <><x><y/></x></> in undefined) <><x><y/></x></>;");
tryItOut("switch() { default: let __parent__ = window, constructor; }");
tryItOut("{yield __proto__; }/*\n*/");
tryItOut("M:with({prototype: (uneval(((false for (__parent__ in 1e+81)))))})__parent__;");
tryItOut("if(this) var __iterator__ = *::*; else  if (yield)  else {/*for..in*/for(var prototype = (eval)(this, @foo) in <x><y/></x>) __proto__ }");
tryItOut("with({__parent__: [11,12,13,14].filter});");
tryItOut("let __iterator__\n{{} }");
tryItOut("/*infloop*/L:while((({}).hasOwnProperty))__iterator__");
tryItOut("with({__count__: [1]})");
tryItOut("do return; while((try { (true); } finally { export *; } ) && 0);");
tryItOut("if(function(id) { return id }) {(constructor); } else var constructor = ({a1:1}), __noSuchMethod__;");
tryItOut("with([[]] @ undefined){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (<y><z/></y>)(prototype) in function(q) { return q; }(function ([y]) { })) M:if((function ([y]) { })()) {\flet __proto__, prototype; } else {return; }/*for..in*/for((function::__proto__) in ((gc)(<x/> !== true))){(<><x><y/></x></>);with({__iterator__: false}){undefinedreturn -=; } }");
tryItOut("/*infloop*/while(*::* +=  '' )yield;");
tryItOut(";");
tryItOut("return *::*;");
tryItOut("{}\nyield <y><z/></y>;\n");
tryItOut("yield;\nwindow\n");
tryItOut("{M:if(+null) {switch(this) { default:  } } else  if (\n '' ) yield; }");
tryItOut("L: {switch(1.3) { default: break; break; case (-0): yield <><x><y/></x></>;throw <><x><y/></x></>;break; case <x><y/></x>: break; yield true; }throw false; }");
tryItOut("M:with({get: @foo}){throw <x/>;throw window; }\nyield <x><y/></x>; const prop\nbreak M\n{}\n");
