
tryItOut("if(({ get __count__(constructor, constructor)new (({}).hasOwnProperty)(window, <x><y/></x>) })) { if (-undefined) ; else [z1,,];}");
tryItOut("with({function::__iterator__: (uneval(window.hasOwnProperty(\"prototype\")))((__proto__.prototype))})L:with((new (arguments)()))let (prototype, __proto__) { yield; }\n");
tryItOut("do with({__proto__: false})return; while((++<x><y/></x>) && 0);");
tryItOut("/*for..in*/for(var prop.prototype in ({ __noSuchMethod__: ({ prototype: ({ constructor: __noSuchMethod__ }), constructor: ({ __noSuchMethod__: __parent__ }) }), __noSuchMethod__: __parent__ }) = undefined %  /x/ ) M:if(\r<><x><y/></x></>) { if (window) } else {; }");
tryItOut("/*for..in*/for(let [__proto__, __proto__] = (this <<= 1e+81) in <y><z/></y>) return;");
tryItOut("/*infloop*/do  while((this));");
tryItOut("return;");
tryItOut("L: {return <zzz>@foo</zzz> ? __iterator__ = #1# : let (__parent__, __parent__) false.isPrototypeOf(<x><y/></x>);with({constructor: __count__.__iterator__ = -this}){throw [z1];with({__parent__: <x><y/></x>}){(true); } } }");
tryItOut("/*for..in*/for(prop = [4.].map((1 for (x in []))) in this.zzz.zzz) L:with({constructor: __noSuchMethod__ >> function  __proto__ (constructor, __proto__)<><x><y/></x></>}){gc() }/*for..in*/for(__noSuchMethod__ = null |= <><x><y/></x></> in *::*) export __noSuchMethod__;");
tryItOut("if(<x><y/></x> / <x><y/></x>) {do {;return; } while((1e-81) && 0);with({__proto__: ([15,16,17,18].sort((<y><z/></y> in <><x><y/></x></>),  /x/g ))}){'haha'.split } }");
tryItOut("continue \fL;\nwith({prototype: #3={a:#3#}})(this);\n");
tryItOut("(([[]])( '' ))(( /x/ .__proto__)) = prototype;");
tryItOut(" /x/g ");
tryItOut("with({__parent__: 3/0}){return ({__parent__: <y><z/></y> }); }");
tryItOut("(<><x><y/></x></>);");
tryItOut("continue M;");
tryItOut("{return this;throw <y><z/></y>; }");
tryItOut("if(window) {gc()gc() } else  if (1e81) const constructor = [[]]; else {gc() }");
tryItOut("try { gc() } catch(prototype) { return *::*; } finally { export *; } ");
tryItOut("/*infloop*/L:do {let prototype; } while((window , [[1]]).isPrototypeOf((__proto__.__parent__ =  /x/g )))\n((1 for (x in []))).call");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((__parent__.__iterator__ setter= function (prototype, __noSuchMethod__) { return <><x><y/></x></> } ).watch(\"prop\", ({}).hasOwnProperty))) {with(prototype = .2 <=  /x/g )export prop; }");
tryItOut("if(__count__ = *::*) { } else  if ( /x/g ) return <x/>; else let __iterator__ = @foo;");
tryItOut("\nbreak ;\n");
tryItOut("let (constructor = (__noSuchMethod__ = *::*)) { return 0x99\n(null); }");
tryItOut("/*infloop*/for(delete window = null; (__noSuchMethod__.propertyIsEnumerable(\"prototype\") >>= prototype); false) {prop; }");
tryItOut("/*for..in*/for(let __parent__ in [\t<x><y/></x>].sort(true).watch(\"__iterator__\", ( += 0))) return;");
tryItOut("{/*infloop*/M:while(false)const __proto__ = <><x><y/></x></>, prototype; }");
tryItOut("if(<><x><y/></x></>) export __proto__; else {return; }");
tryItOut("return;");
tryItOut("with(() %= __count__.(([[1]] ? <><x><y/></x></> : <><x><y/></x></>))){if((new this)) yield; else  if ((this.__defineSetter__(\"prop\", true))) {var __noSuchMethod__, __parent__ = 3; } }");
tryItOut("{return (-1);<x/>; }");
tryItOut("/*infloop*/while((-0))gc()");
tryItOut("L:if([15,16,17,18].map(<><x><y/></x></>, 4.)) {export __count__;const __iterator__ = undefined; } else {new Function }");
tryItOut("if((function ([y]) { })() .@*:: *) continue M;\t");
tryItOut("if(this) {__iterator__ = constructor, __parent__;\freturn -1; } else *;");
tryItOut("prototype = constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("M:if((prototype @ __count__\n)) export *;");
tryItOut("with({prototype: (Date(<y><z/></y>.__defineSetter__(\"__proto__\", undefined), true))}){/*infloop*/while(<><x><y/></x></>.__iterator__){continue(/ M;__count__; }L: return *::*; }");
tryItOut("if( /x/g ) { if (*) yield;} else {yield; }");
tryItOut("return /*<><x><y/></x></>\nyield");
tryItOut("{/*for..in*/L:for([prop, __parent__] = function(id) { return id } in <x><y/></x>)  with  }");
tryItOut("if(this.\f__defineSetter__(\"constructor\", /a/gi)) { if (setter = __parent__.__iterator__ = <x><y/></x>) /*infloop*/do /*for..in*/for(var __iterator__ in <x><y/></x>) {return;; } while(*.hasOwnProperty(\"__noSuchMethod__\")); else }");
tryItOut("/a/gi");
tryItOut("L:if(constructor.__iterator__) {return; } else  if ([eval(\"gc()\", )]) __parent__ else {const __noSuchMethod__; }");
tryItOut("");
tryItOut("L:with(__proto__.prop getter= [1,2,3,4].map)\f;");
tryItOut("{throw  \"\" ; }");
tryItOut("/*infloop*/for(let ({ prop: __iterator__, __count__: constructor }) = ('fafafa'.replace(/a/g, eval)); yield function::__proto__; ({__proto__ getter: Function,  set __iterator__ prototype () { export *; }  })/*\n*/ <= delete @foo) {with(new <x><y/></x>(false) || (prop.__noSuchMethod__)){return window; }yield eval(\"if(<><x><y/></x></>) const prop = [,]; else  if (<x><y/></x>) throw window; else ;\", prototype)\nexport *; }");
tryItOut("if(true) /*for..in*/for([constructor, __noSuchMethod__] = #3={a:#3#} in ({ __parent__: __iterator__, prototype: __iterator__ }) = prototype) {yield;__noSuchMethod__\nconst prop = #1=, __count__ = prop; }");
tryItOut("with(((uneval(new Function * (#2=[(function ([y]) { })()]).throw(prop.__iterator__)))))gc()");
tryItOut("/*infloop*/for(this.__defineSetter__(\"__count__\", Math.pow).watch(\"__parent__\", [,]).prototype = ++ /x/  >> 1e81 >> (([1,2,3,4].slice)(<x><y/></x>, __proto__)).@*; __proto__.__iterator__ setter= ({}).hasOwnProperty.unwatch(\"getter\") & __proto__.__proto__ = (this.__defineSetter__(\"__parent__\", function  __proto__ (__iterator__) { yield  /x/  } )) if (undefined); new ((new Function(\";\")))()) L: gc()");
tryItOut(" for each (__iterator__ in (-0))");
tryItOut("/*infloop*/while(\n(__count__.constructor = <x/>))let prototype = window, __noSuchMethod__;");
tryItOut("let([] = [,].valueOf(\"number\"), __noSuchMethod__) { return yield constructor;");
tryItOut("L:do yield <x><y/></x>; while((#3={a:#3#}) && 0); const __iterator__;");
tryItOut("with({}) { yield [1,,]; } ");
tryItOut("L:if((<x><y/></x>)[<><x><y/></x></>]) {{} } else yield;");
tryItOut("/*infloop*/for(<><x><y/></x></>; (__proto__.__count__ getter= <x><y/></x>); #1#) {export prototype; const constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <><x><y/></x></>)  const __proto__;");
tryItOut("let (__count__, __noSuchMethod__ = 1e4.__lookupGetter__(\"prototype\")) { return <><x><y/></x></>; }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in __noSuchMethod__) {gc }");
tryItOut("let(({ prop: prototype, __parent__: __noSuchMethod__ }) = @foo / 1.2e3) { let(prop, __noSuchMethod__ = true) ((function(){const __count__ = prototype, __noSuchMethod__ = __parent__;})());");
tryItOut("/*infloop*/for(let __proto__; ((window)(*::*)); (<y><z/></y>.__lookupGetter__(\"__count__\").prototype)) {export constructor;throw StopIteration; }");
tryItOut("if(void .2) { if (eval(\"with({constructor: window})return\\nyield;\", (({__count__: <x><y/></x>, prop: true })))) { { yield let (__noSuchMethod__, __parent__) <x><y/></x> } gc()\r } else {prototype, constructor = *;yield; }}");
tryItOut("{export *;if(true) {throw @foo;return 3.141592653589793; } }");
tryItOut("if(prop['prototype']) {if(<xxx>{__noSuchMethod__}</xxx>) { if ('fafafa'.replace(/a/g, eval)) {let __noSuchMethod__ = <x/>, __proto__ = ({}); } else {var try { export *; } catch(__noSuchMethod__ if false) { export *; } catch(constructor) { throw <x/>; } finally { yield undefined; }  = (-1); }} } else  if (let (__proto__ = null / -3/0) .2) {L:if(window) function  __noSuchMethod__ () /x/g  else  if (<x><y/></x>) {;export prop; }/*infloop*/for(var constructor = (-1); *; <x/>) ; }");
tryItOut("do yield <x><y/></x>; while((this.zzz.zzz) && 0);");
tryItOut("let(prototype = constructor = (window if ([1])), ({ prototype: __proto__, x::__iterator__: prototype }) = (this && __noSuchMethod__)) ((function(){with({}) return @foo %= <x><y/></x>;})());");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("yield <x/>;");
tryItOut("this.zzz.zzz;");
tryItOut("if((prop.__noSuchMethod__)) {break ;throw 0; } else  if (<><bbb xmlns=\"({prototype: __parent__})\">yyy</bbb></>.constructor = (yield 5.0000000000000000000000.throw(<x/>))) {L: {export __proto__; } } else export *;");
tryItOut("\ttry { let __count__; } catch(constructor if (function(){const prop = <><x><y/></x></>, __count__ = window;})()) { __count__, __iterator__; } finally { return  /x/ ; } ");
tryItOut("/*infloop*/while([15,16,17,18].map(Math.pow, <x/>.isPrototypeOf(<x/>)))export __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __iterator__: ({ __iterator__: prop, prop: <><x><y/></x></> }) }) in //h\n({ constructor: prototype }) = [constructor]) {var prototype =  /x/ ;return constructor\nyield; }\t");
tryItOut("return;");
tryItOut("/*for..in*/L:for(let prop = <x><y/></x> << __parent__ in <><x><y/></x></>) (1 for (x in []))");
tryItOut("{throw !(<x><y/></x>.throw(<><x><y/></x></>));export *\n/*infloop*/do return __parent__; while((<x><y/></x>.__defineGetter__(\"__proto__\", (function(y) { yield y; yield;; yield y; }).call))); }");
tryItOut("{while((Math.pow) && 0){if(this) {let constructor = function(id) { return id }, __count__;let __count__ = <y><z/></y>, __noSuchMethod__ = <x/>; } } }");
tryItOut("do {if(new eval(this)) undefined; else  if (\t(--undefined)) {continue ;const prototype, __parent__; } else {{} } while((({ __proto__: constructor, __proto__: ({ prototype: __noSuchMethod__, prototype: __noSuchMethod__ }) }) = constructor = prop.constructor = <y><z/></y>) && 0);");
tryItOut("with({__noSuchMethod__: (function  __count__ (constructor.__proto__) { (__count__); } )[(uneval(new Math.sin(constructor if ( /x/ ), ((#3={a:#3#}.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)).constructor))))]})/*infloop*/for(* !==  '' .prop; let (constructor, constructor = [1,,]) yield <y><z/></y>; #3={a:#3#}( '' )) var __count__, __noSuchMethod__;");
tryItOut("M:while((let (prototype = (function ([y]) { })()) *::*.@*) && 0){(function (__noSuchMethod__, __parent__) { return window } ).callreturn __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in prop.prototype >>= ((function ([y]) { })().unwatch(\"constructor\") >>  \"\" )) let (__iterator__ = []) { break M; }");
tryItOut("return\nfunction () { yield; } ");
tryItOut("return true;return <x/>;");
tryItOut("{gc()let prop, __count__; }");
tryItOut("if(undefined) {/*infloop*/for(<y><z/></y>; true;  '' ) return; } else  if ([({a1:1})+=*::* ?  ''  : <><x><y/></x></> for ((__noSuchMethod__) in ~false)]) L:if((false( /x/g , <x/>))) __noSuchMethod__ = <x><y/></x>, __noSuchMethod__;");
tryItOut("with(((default: throw this;case 6: break; case 1: [1,2,3,4].mapbreak; case @foo: case *::*: case 1e-81: break; break; break; {}).__defineSetter__)){{return;return <><x><y/></x></>; }*; }");
tryItOut("let (constructor) { /*infloop*/for(prop; (function (prototype, __noSuchMethod__) { return <y><z/></y> } )(function(id) { return id }\n, [[]]); <{__parent__}>yyy</{__parent__}>) {yield;break ; } }");
tryItOut("Math.pow");
tryItOut("/*for..in*/for(const (({__iterator__: * }))(4.) in (constructor .. <y><z/></y>)) {/*infloop*/M:for(({ prop: prop }) = (null.valueOf(\"number\")); constructor = 1e81; <><x><y/></x></>) {throw <x/>; } }");
tryItOut("{export *; }");
tryItOut("/*infloop*/L:for(let [[({ __parent__: ({ __iterator__: prototype, __proto__: ({ __parent__: __iterator__, __count__: __parent__ }) }), __noSuchMethod__: ({ __noSuchMethod__: __proto__, __count__: ({ prototype: prototype, prop: __noSuchMethod__ }) }) }), (prototype)], __count__, , , ] = __count__-= \"\"  * undefined; #1=[#1#]; function  prop (__parent__, prop)<y><z/></y>(<><x><y/></x></>, <><x><y/></x></>)) /*infloop*/M:for(let ({ __count__: constructor }) = <x><y/></x>--; (<><x><y/></x></> &= <x><y/></x>); *) /*for..in*//* nogeckoex bug 349964 */ for  each(var get in 3) {gc() }");
tryItOut("while((<><bbb xmlns=\"(new Function(\"( '' );\"))\"><!--yy--></bbb></>) && 0){export __count__; }");
tryItOut("/*infloop*/do {(0); } while(function::<y><z/></y>);");
tryItOut("/*for..in*/for(let (__parent__) in ++<><x><y/></x>\t</>) let __noSuchMethod__;");
tryItOut("/*for..in*/for(let [prototype, __noSuchMethod__] = window in @foo) \n{window;prototype }");
tryItOut("L:do \tcontinue M; while((0.1) && 0);");
tryItOut("while(([].propertyIsEnumerable(\"__proto__\")) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(let (__noSuchMethod__) in window) {}");
tryItOut("break L;");
tryItOut("throw __noSuchMethod__;");
tryItOut("do do return {}; while((<ccc:ddd><!--yy--></ccc:ddd>) && 0); while((null) && 0);");
tryItOut("{}(null);");
tryItOut("const arguments;\nthrow @foo\n{}\n");
tryItOut("if((({ constructor: __iterator__ }) = new /a/gi(1e4,  /x/ ))) /*infloop*/for((__parent__ = (p={}, (p.z = 1e81)())); prototype; prototype.__count__) {[1,,];__noSuchMethod__ = window, __noSuchMethod__ = prototype; } else  if ( % new (Math.pow')(<><x><y/></x></>)) {; } else {export __iterator__;with({__parent__:  \"\" }){{}throw <><x><y/></x></>; } }");
tryItOut("for(let y in []);");
tryItOut("if(window) { if (this.zzz.zzz) {return; } else {break \neval }}");
tryItOut("let(prop = prototype = (#1=[false].*)) ((function(){ /x/ })());");
tryItOut("try { (constructor); } catch(__parent__) { {} } ");
tryItOut("with({}) for(let y in [5,6,7,8]) with({}) { for(let y in [5,6,7,8]) with({}) { export *; }  } ");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var (\r<x><y/></x>)(*) in [[]]) {return;export *; }{} }");
tryItOut("yield window; const __count__;\n/*infloop*/L:for(const [[[, ], , __parent__]] = (((Math.pow).apply)([,], (function ([y]) { })())); new  '' (@foo, window); <xxx>{__count__}</xxx>) {gc()<x/>; }\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in this) ");
tryItOut("{}");
tryItOut("for(let y in [5,6,7,8]) __parent__ = constructor;");
tryItOut("");
tryItOut("with({__noSuchMethod__: ([15,16,17,18].map(gc, arguments)).__lookupGetter__(\"constructor\")}){/*for..in*/for([__count__, __iterator__] = * in false) (yield  /x/g ;); }");
tryItOut("/*infloop*/for(var prop; prototype = (__iterator__.(<x><y/></x>)) , (function(y) { yield y; let __parent__;; yield y; }).call(<x><y/></x>,  , this); [11,12,13,14].some) {if((({ __parent__: __noSuchMethod__ }) = <x><y/></x>)) { if ((new (new (function  constructor (__count__, constructor)window)(<y><z/></y>, false))(let = __noSuchMethod__, [z1,,]))) {<x><y/></x><!--yy--> } else yield <><x><y/></x></>;} }");
tryItOut("{yield;/*for..in*/for(const __parent__ = *::* in <x/>) {constructor;{} } }");
tryItOut("do throw <x><y/></x>; while((prop.(-3/0)) && 0);");
tryItOut("L: {L:if(<y><z/></y>) {yield this;var __iterator__ = <x/>, __count__; } else (<x><y/></x>);gc() }");
tryItOut("M:if(((yield prop = this))) yield --<><x><y/></x></>; else  if (.2) {/*infloop*/L:for(({ __proto__: ({ __proto__: __iterator__ }), __count__: __proto__ }) = ({function (constructor, __count__)1.2e3 setter: Function }) >= (function(id) { return id }.__count__); (<x/>.eval(<x><y/></x>)); [15,16,17,18].some('haha'.split, __noSuchMethod__ = <x/>)) L: export __noSuchMethod__; }");
tryItOut("var prototype = constructor, prop = 3/0\ncontinue M;");
tryItOut("");
tryItOut("switch(let (__iterator__ =  /x/ ) -0--) { default: /*infloop*/for(let each; (4. %= function ([y]) { }); @foo >>=  '' ) {return <y><z/></y>;; }break;  }");
tryItOut("{{export *;throw true; } }");
tryItOut("gc()");
tryItOut("(false);");
tryItOut("gc");
tryItOut("/*infloop*/for(var prop = true.eval([,,]); [<><x><y/></x></>]; (*.__noSuchMethod__ = <x/>)) {const __iterator__ = <><x><y/></x></>, prop = __iterator__;'haha'.split }");
tryItOut("return ( & (__parent__)(prop, this)).throw((<x><y/></x>)).__defineGetter__(\"__count__\", (__noSuchMethod__ = this));");
tryItOut("switch(this.zzz.zzz) { case (({ __parent__: ({ prototype: __proto__ }) }) = __count__.__iterator__ getter= gc): break; while((@foo) && 0){const __count__ = *::*;return #3={a:#3#}; } }");
tryItOut("if(new constructor.prototype setter= 'haha'.split(([[z1,,]].filter((true).__defineSetter__))).eval((typeof <><x><y/></x></>))) { if ((({ __parent__: prop, __count__: __noSuchMethod__ }) = ({ __count__: __parent__ }))) const __count__ = window, __count__ = {}; else {/*for..in*/for(var __parent__ = undefined in -1) __count__ }}");
tryItOut("with({}) { return; } ");
tryItOut("L: if([z1](<y><z/></y>)) { if ('fafafa'.replace(/a/g, function  __parent__ (prototype, function::__iterator__)1e-81)) {var prototype = window, constructor = undefined; }} else function ()@foo");
tryItOut("throw StopIteration;");
tryItOut("{}\n");
tryItOut("if(((function (constructor) { yield [, __noSuchMethod__, __noSuchMethod__, {@foo; }] = new *(constructor, __count__) } ).call(([1,2,3,4].map)(__proto__, *::*), (function ([y]) { })() === <x><y/></x>, (0.1).call(<y><z/></y>.__defineSetter__(\"__noSuchMethod__\", function () { continue ; } ), (__proto__ = <><x><y/></x></>), prop)))) with({__noSuchMethod__: ((prototype |= prototype))[this\n]}){export *; }");
tryItOut("return;");
tryItOut("/*infloop*/while(({a2:z2}) ? <x/> :  /x/ ){prototype = [[]];M:with({prototype: __parent__ >>> 1e81})return; }");
tryItOut("/*for..in*/for(const prop in ((function  __count__ (prop, constructor)new (window)())((<x><y/></x> >>= <x/>).eval(x::__count__ = prop))))break L\nreturn <x/>;");
tryItOut("let __count__ = this\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in 1e-81) ");
tryItOut("try { ([1,2,3,4].slice).apply } catch(prop if <x><y/></x>.eval(constructor)) {  } catch(__iterator__) { export prop; } ");
tryItOut("L:if(0x99) { if (__iterator__) __count__; else {gc()return; }}\n/*infloop*/for(var constructor = <x><y/></x>; <><x><y/></x></>; __noSuchMethod__: window) ;\n");
tryItOut("/*infloop*/L:for(const prop; [1]; #1#) export *;");
tryItOut("try { return (p={}, (p.z = ++[,,])()); } finally { throw __iterator__; } ");
tryItOut("L: return;");
tryItOut("L:if(([constructor] ? <x><y/></x> : ()(((uneval([,].unwatch(\"__proto__\")))), (+0x99.throw([z1]))))) {/*for..in*/for(var constructor in ((((-1)).watch)(null)))Functionlet __parent__; }");
tryItOut("yield 5.0000000000000000000000;");
tryItOut("with( /* Comment */yield <><x><y/></x></>){return *;prototype }");
tryItOut("default: break; /*infloop*/L:for(<y><z/></y>; (<><x><y/></x></>.eval(*) | <><x><y/></\fx></>); true) {continue ;return; }");
tryItOut("/*infloop*/for(prototype = yield [ { return false } .__noSuchMethod__ setter= (1 for (x in []))].some(Function); window.__lookupGetter__(\"__iterator__\").watch(\"__noSuchMethod__\", (function () { return (this.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })) } ).call); window.isPrototypeOf(({a1:1}))) let __count__ =  /x/ , __iterator__ = *::*;");
tryItOut("let(__iterator__, __parent__) { yield \n\n4. * (function ([y]) { })() + <><x><y/></x></>;");
tryItOut("{}");
tryItOut("if((__parent__ = 4. % <x/>)) { if (this.__defineSetter__(\"constructor\", ({})) instanceof ([new [1](<><x><y/></x></>)])) {; } else if(033) { if ([]) {yield <><x><y/></x></>; }} else yield *;}");
tryItOut("/*infloop*/for(let constructor;  /x/g  ^= {}; ) new Function");
tryItOut("if([15,16,17,18].sort(eval, <><x><y/></x></>)) { if ((1.2e3 * <><bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb></>)) with(@foo.__iterator__){;break ; }} else L:while(((({__count__ setter: <x><y/></x>, __iterator__ setter: ( '' ).watch }))) && 0)let (__count__) { (*); }");
tryItOut("/*for..in*/for(var __parent__ = (constructor = *::*) in <x><y/></x>) {const __iterator__;false }");
tryItOut("/*infloop*/M:for(const __parent__ = (({prop: true})); false ? window : <x><y/></x>; (({__proto__ getter: ({a2:z2}), prop getter: ((<y><z/></y>).watch).call }))) gc()");
tryItOut("export *;");
tryItOut("/*infloop*/while(({})){return; }");
tryItOut("");
tryItOut("if(eval(\"{}\", ([z1].__lookupGetter__(\"prop\")))) {return *::*; } else  if (new Date((<x><y/></x> > [,].__iterator__))) { } else throw window;");
tryItOut("/*infloop*/while(__noSuchMethod__){export *; }");
tryItOut("<!--yy-->");
tryItOut("throw  /x/g ;if(__iterator__.__defineGetter__(\"prop\", ([,,z1]).__defineSetter__)) {yield;/a/gi }");
tryItOut("/*infloop*/for(({ constructor: ({ constructor: __noSuchMethod__, __noSuchMethod__: \t({ prop: [, ] }) }), function::prototype: __iterator__ }) = prop.__count__ getter= Math.sin; (undefined++); ) {for(let y in [5,6,7,8]) with({}) with({}) { throw StopIteration; }  }");
tryItOut("{/*infloop*/L:for(prototype = *; prototype; this) {throw [[1]]; } }\n/*for..in*//* nogeckoex bug 349964 */ for  each(let gc() in prototype.prop setter= ([,,z1]).__defineSetter__) /*infloop*/while(<><{prototype}\r></{prototype}></>)yield;\n");
tryItOut("/*for..in*/for(constructor = ((this.__defineSetter__(\"prop\", function(q) { return q; })) if window)) in <><x><y/></x></>) ;");
tryItOut("yield __count__.constructor getter= (new Function(\"return;\"));");
tryItOut("/*for..in*/L:for(const __iterator__ in (((1 for (x in [])))([[]])))( get prototype(prop, prototype)prop);");
tryItOut("export *\n");
tryItOut("M:switch(new (function ([y]) { })() += <x/>()) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in undefined) {return __iterator__;var constructor = <y><z/></y>, prototype = <x><y/></x>; }case 2: case (__parent__.__noSuchMethod__): /*infloop*/M:for((void <><x><y/></x></>); ({a1:1}) <<= ({a1:1}); prototype%=window) {;let constructor; }case false: /*for..in*/for([__parent__, prop] = (false)[.2] in *::*) let constructor = false,  get prototype __iterator__ ()<><x><y/></x></>;break;  }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*/for(let prototype = [[1]] <<= __proto__ in this) yield __iterator__;");
tryItOut("if(4.. { var constructor; }  for (__proto__ in <x><y/></x>) for (__proto__ in <><x><y/></x></>)) var constructor = ({}), constructor = @foo\nthrow <x><y/></x>; else  if (---1) {yield 1e81;const __parent__, __noSuchMethod__; } else {/*for..in*/for(const [__noSuchMethod__, __iterator__] = <x><y/></x> in <><x><y/></x></>) __parent__ = {}; }");
tryItOut("{return;Math.pow }");
tryItOut("{return this;(<><x><y/></x></>); }\n/*infloop*/while(<><x><y/></x></>)__noSuchMethod__");
tryItOut("/*infloop*/for(let [, prop] = (uneval((-1))); (<x><y/></x>.__proto__); __iterator__ = ('fafafa'.replace(/a/g, undefined))) return undefined;if(__count__ = (-0)) { }");
tryItOut("break L;\nthis.zzz.zzz;\n");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in undefined) {gc() }");
tryItOut("({a2:z2});");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in  '' ) yield constructor\n");
tryItOut("throw *; const __count__;");
tryItOut("/*for..in*/for(let constructor = *::* in this) let prop =  '' ");
tryItOut("M:if([({a1:1}) >> [,,]]) {M:with({__noSuchMethod__: (__noSuchMethod__.__iterator__) .@*:: (\n*)})__iterator__ } else {L: (*);{true;(<x><y/></x>); } }");
tryItOut("L:with({prototype: this}){return true; }");
tryItOut("if((__count__ = <x/>.valueOf(\"number\"))) do {throw this;export __iterator__; } while((undefined) && 0); else  if (<> /x/g .__defineSetter__(\"__proto__\", <x><y/></x>) += <y><z/></y></>) return window;/*infloop*/for(const __count__\f; <y><z/></y>;  /x/ ) return;");
tryItOut("while(((new ((<><x><y/></x></> != <y><z/></y>).prop = ({prototype setter: Math.pow }))())) && 0){const __parent__ = *::*, prop;export prop; }");
tryItOut("this.zzz.zzz\n");
tryItOut("L:do return null(); while((__proto__.prototype) && 0);");
tryItOut("yield #1#;export prototype;");
tryItOut("L: gc()");
tryItOut("\tswitch(this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; function (__parent__, prototype) { yield window } ; yield y; })) { case ({ __parent__: constructor, prototype: __noSuchMethod__ }) = <><x><y/>/x></>: break;  }");
tryItOut("if((new (__parent__ = __noSuchMethod__)()))  else  if (((__iterator__ =  '' ).unwatch(\"__noSuchMethod__\"))) {__parent__ = [], __iterator__ = this;; }");
