tryItOut("/*for..in*/L:for(var __count__.__iterator__ in ((function  __proto__ ()((yield *)))((3.__defineGetter__(\"__noSuchMethod__\", (function(y) { yield y; (<x/>);; yield y; }).call))))){}");
tryItOut("@foo;");
tryItOut("with(\fundefined)const constructor = prototype, \n = window;");
tryItOut("/*for..in*/for(const prototype = ((arguments)()) in (prototype = __count__)) const __iterator__, __parent__ =  '' ;");
tryItOut("with(<y><z/></y> & [,,])\f");
tryItOut("throw StopIteration;");
tryItOut("yield (this.zzz.zzz)\n/*for..in*/M:for(var prototype in <y><z/></y>) {/*for..in*/for(var __noSuchMethod__ =  '' //h\n in  /x/ ) return; }");
tryItOut("/*for..in*/for(var ({ constructor: __iterator__ }) in ((({}).hasOwnProperty)(({ get __proto__()__count__, constructor getter: 3.141592653589793 }))))L: { }\f");
tryItOut("with({constructor: 5.0000000000000000000000}){/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in *::*) yield; }");
tryItOut("with({prop((({prototype:  /x/  }) != 033.@*)): Object(<x><y/></x>).yoyo((\t*::*)(<><x><y/></x></>, <><x><y/></x></>))})export __proto__;");
tryItOut("/*infloop*/L:for(let __count__; (yield (function ([y]) { })()); <x/>) {; }");
tryItOut("/*infloop*/for(__iterator__ = this.__defineSetter__(\"constructor\", 3); (__noSuchMethod__ & window) || (({__noSuchMethod__: true })); true\n) {yield  '' ;; }");
tryItOut("do const __count__ = window, __parent__; while((([,] *= true)) && 0);");
tryItOut("/*infloop*/do /*infloop*/for(033.watch(\"__noSuchMethod__\", function (constructor) { return \f* } ); 1e-81; ((-3/0.yoyo(true)) !== ((yield false)))) {const constructor =  '' , __parent__ = null;{} } while(__noSuchMethod__.__iterator__ setter= (1 for (x in [])) * (#1=[<y><z/></y>]) -= ({a2:z2}));");
tryItOut("yield constructor;");
tryItOut("with(((setter.(prop)))()){break M;do with(((new Function(\"yield  '' ;\"))))return; while((this.zzz.zzz) && 0); }");
tryItOut("/*for..in*/for(__parent__ in ((function  __iterator__ (__noSuchMethod__) { yield gc() && [15,16,17,18].sort(prototype, <x><y/></x>.__defineGetter__(\"prototype\", -3/0)) :: ((__iterator__);) } )(new ((new Function(\"(__parent__);\")))(\n__noSuchMethod__.(<><x><y/></x>\f</>), <></>)))){if(<x/>) { if (*) {gc() }} else <><x><y/></x></>yield; }");
tryItOut("L: const prop = <><x><y/></x></>, __proto__ = <y><z/></y>;");
tryItOut("if(__count__.eval((new ([* for (delete in <><x><y/></x></>)].isPrototypeOf([z1,,]))(window,  /x/g .constructor)))) { if ((prototype+=(new Function(\"gc()\")))) throw true;} else yield;");
tryItOut("/*for..in*/M:for(var prototype in [,,]) return  '' ;");
tryItOut("/*for..in*/M:for(let prop = <bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb> in <y><z/></y>) __proto__ = -0");
tryItOut("yield;");
tryItOut("gc() const constructor;");
tryItOut("/*infloop*/for(const constructor; <x/>; (function(q) { return q; }).call( \"\" ,  /x/g )(<x><y/></x>.(__iterator__), *::*)) yield;{}");
tryItOut("with(((true)[ '' ])){var __count__, __parent__ =  /x/g ;let (__parent__) { throw this; } }");
tryItOut("/*infloop*/M:while(constructor.prototype = __parent__)throw this;");
tryItOut("L: (__proto__);\nyield 1.3;\n\n");
tryItOut("M:do {gc() } while((((<><x><y/></x></>)[<x><y/></x>])) && 0);");
tryItOut("{if(true) { if (<><x><y/></x></>) {const __iterator__; /x/g ; } else __iterator__;}L:if(<x><y/></x>) { if (<><x><y/></x></>) yield; else var __parent__ = #1=[#1#], __count__;} }");
tryItOut("const prototype = false;");
tryItOut("if((*::*((yield new ( '' )()), <x><y/></x>.__proto__))) export *\n else {return;this; }");
tryItOut("{( \"\" ); }");
tryItOut("/*infloop*/for( /x/g ; new 1.2e3 /= false(); (p={}, (p.z = (prop = <x><y/></x>))())) return;");
tryItOut("/*infloop*/for(var prop; <y><z/></y>; this.zzz.zzz.constructor.__iterator__ = ((p={}, (p.z = window)()))) /*infloop*/for(({ __iterator__: prototype }) = (~this); (this.__defineSetter__(\"__iterator__\", (switch([,,]) { case  \"\" : export function::__parent__;case 4: break; __proto__;break; break;  }__count__).__defineSetter__)); [<><x><y/></x></> if (<y><z/></y>)]) {M:while(((function::function::constructor =  /x/g )) && 0){gc() } }");
tryItOut("yield;");
tryItOut("prototype = <><x><y/></x></>; const __noSuchMethod__;");
tryItOut("/*infloop*/for(const ({ prototype: ({ __proto__: ({ __proto__: __iterator__ }) }) }) = (((new true())).watch(({constructor: ([<y><z/></y>].map(function  prop () { yield window } //h\n)), this }))); (<><x><y/></x></> if (*)); prototype)  \"\" ;");
tryItOut("while((null !== *) && 0)yield [1,,];");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const ({ function::[__noSuchMethod__, ({ __count__: ({ __noSuchMethod__: __count__ }), __proto__: __proto__ }), ]: ({ __count__: ({ prototype: prototype }), constructor: __parent__([]([z1])) }), function::constructor: __count__ }) = let prop, prototype = __count__; = new (-3/0).watch(); __parent__ =  '' ; let (__noSuchMethod__) x::prop.prototype[('haha'.split)({})]) this.zzz.zzz;");
tryItOut("/*for..in*/M:for(const __parent__ = ((false)(this)) in this) {[z1,,];/*\n*/throw [,,z1]; } const __noSuchMethod__;");
tryItOut("/*infloop*/for(__parent__ = this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"(p={}, (p.z = <x><y/></x>)());\"))); this.__defineSetter__(\"__count__\", function(q) { return q; }); ((eval).call(window, )).propertyIsEnumerable(\"constructor\")) export __parent__;");
tryItOut("switch([11,12,13,14].sort) { default: /*infloop*/while(<><x><y/></x></>)(<x><y/></x>);break; case 4:  }");
tryItOut("prototype");
tryItOut("with(constructor){return  /x/g ;export *; }");
tryItOut("new Functionyield this");
tryItOut("if([this].map(gc)) return;L: {(new Function(\"return;\")) }");
tryItOut(" set __parent__ __noSuchMethod__ (7)this.__defineGetter__(\"__count__\", [1,2,3,4].map)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__['__noSuchMethod__'] in <x><y/></x>) new (0x99)()");
tryItOut("<><x><y/></x></>;");
tryItOut("yield");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((({a1:1}))(({ get __noSuchMethod__ __noSuchMethod__ (__iterator__) { return yield }  }).__proto__ = [<x><y/></x>].unwatch(\"prop\") !== 'fafafa'.replace(/a/g, __count__ | true)))){return 1e-81;/*infloop*/for(true.__defineSetter__(\"__noSuchMethod__\", 'haha'.split); (uneval(__proto__)); (delete eval(\"gc()\", #3={a:#3#}) , <><x><y/></x></>\f)) {var prototype = true;var __proto__ = null; } }");
tryItOut("/*for..in*/M:for(let __proto__ in [1,2,3,4].slice) ('fafafa'.replace(/a/g, function::__proto__ .@x:: <x><y/></x>))");
tryItOut("return;");
tryItOut("__proto__: <y><z/></y>");
tryItOut("/*for..in*/for(__count__ in ((@foo)(\n__iterator__ = window)))let prop;");
tryItOut("switch(constructor) { default: L:with((constructor = true)){yield;return; }\ncontinue ;\ncase 2: break; case 4: case 0: L: if(<x><y/></x>) {{} } else  if (<x/>) {let __iterator__ = .2, __iterator__; }break;  }");
tryItOut("with({}) const constructor, __proto__;");
tryItOut("/*infloop*/M:do break ; while(1e+81);");
tryItOut("{break ;if(function(id) { return id }) { if (<x><y/></x>) {gc() }} else (<><x><y/></x></>).watch }");
tryItOut("/*for..in*/L:for(let ((<><x><y/></x></>)(<><x><y/></x></>))\n in ({a2:z2})) {[1,2,3,4].mapvar __proto__; }");
tryItOut("L:with(<><x><y/></x></>){export prop; }");
tryItOut("/*for..in*/for(var ({ prop: __proto__ }) in ((/a/gi)(new (<x/>)(<><x><y/></x></>, <x><y/></x>)))){let (prop = @foo) { throw __count__; } }");
tryItOut("if(null__proto__) let __count__ = <y><z/></y>; else  if (*::*) /*for..in*/for([__iterator__, constructor] =  /x/  in <x/>) {prop;return; }");
tryItOut(" /x/ ['prop'] = constructor;");
tryItOut("return;");
tryItOut("if(return;) { if (this.__defineSetter__(\"__iterator__\", true)) undefined; else 1.3;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ constructor: ({ constructor: ({ __count__: [], __iterator__: ({ constructor: __iterator__ }) }), __proto__: [({ __iterator__: __iterator__, __noSuchMethod__: prototype }), ({ __iterator__: __noSuchMethod__, prototype: __parent__ }), ] }) }) in __proto__ = __proto__ = <y><z/></y>, __parent__ = (((window).watch).call(<><x><y/></x></>, <x><y/></x>)) || * *= true(this, *::*)) let __iterator__ = 0/0, __noSuchMethod__;var __proto__ = @foo;");
tryItOut("L: prop;");
tryItOut("const __count__;");
tryItOut("/*for..in*/for(var __parent__ in (((+window).__defineSetter__)((<x/> for (__noSuchMethod__(window) in <x/>) if (this))))){/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in __noSuchMethod__) {} }");
tryItOut("while((({ prop: ({ __iterator__: ({ prototype: ({ __noSuchMethod__: [__parent__] }) }), prop: ({ constructor: (__count__), __parent__: [, , ({ __count__: __noSuchMethod__ })] }) }) }) = ((uneval([] = #2=({constructor: [[1]]}))))) && 0){return;with({prop: (new (prototype, <x><y/></x>))})const constructor, prototype; }");
tryItOut("try {  } catch(get) { yield -3/0; } finally { throw  '' ; } ");
tryItOut("with({constructor: <x><y/></x>.__defineGetter__(\"__proto__\", return;)}){__iterator__, __proto__ = <x><y/></x>;prop, prop = function::__parent__\nconst __proto__ = true;(new Function(\"break ;\"))\n }");
tryItOut("if(<x><y/></x>) { if (<x/>) {{} } else {}}");
tryItOut("{with(RangeError()){null; } }");
tryItOut("/*infloop*/for((<><x>y</>.isPrototypeOf((-1))); <x><y/></x>.(this); \n<x><y/></x>) var prototype = <x/>;");
tryItOut("if(constructor.constructor setter= __proto__ = 'fafafa'.replace(/a/g, function(q) { return q; })) /*infloop*/for((eval(\"*\", [])); (@foo)[1e+81].__count__; (<x/> % <x><y/></x>)) {yield  /x/ ;export __noSuchMethod__; }");
tryItOut("let(__noSuchMethod__ = __parent__.prototype setter= new Function) { return;");
tryItOut("return <x/>;");
tryItOut("this.zzz.zzz");
tryItOut("for(let y in []);");
tryItOut("throw StopIteration;");
tryItOut("throw <x><y/></x>\n");
tryItOut("export *\n");
tryItOut("for(let y in []);");
tryItOut("with({constructor: (constructor = 1e4.eval(window))})export *;");
tryItOut("if( /x/ ) {continue L; }");
tryItOut("continue L;/*for..in*/L:for(const __proto__ in __noSuchMethod__) yield;");
tryItOut("{/*infloop*/for(let ({ __count__: ({ __noSuchMethod__: __iterator__ }), __iterator__: ({ __noSuchMethod__: prototype, constructor: __parent__ }) }) = [].__parent__; ( /x/ .throw(null)); function(y) { yield y; throw <><x><y/></x></>;; yield y; }) {yield;var setter; } }");
tryItOut("/*infloop*/for(new [1,2,3,4].slice((uneval(window)), 1.3); (constructor = @foo + eval(\"((yield <x><y/></x>))\", function ([y]) { })); __proto__-=3/0) this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(( /x/g --.prototype).prop in 1e+81.__count__.throw(new null(<><x><y/></x></>,  /x/g ))) ");
tryItOut("for(let y in [5,6,7,8]) const prototype;");
tryItOut("return true\n__noSuchMethod__ = *, __noSuchMethod__");
tryItOut("if( /x/ .watch(\"__noSuchMethod__\", eval)) {yield;<x><y/></x>; } else L: let __iterator__ = undefined, __parent__;");
tryItOut("{gc() }");
tryItOut("M:with(( '' (prototype, #1=[#1#]).__defineGetter__(\"__parent__\", [1,2,3,4].slice))[(null.@*)]){while((<><x><y/></x></>) && 0)return prop;let (each, prop = <x><y/></x>) { export __iterator__;\n( '' );\n } const prop; }");
tryItOut("if(((<x><y/\f></x>)(<x/>) = window << \n(function ([y]) { })())) { if (this.constructor) if(*) ; else {/*for..in*//* nogeckoex bug 349964 */L: for  each(var function::__parent__ in -0) {<x><y/></x>;yield window; } }}\n");
tryItOut("if(<><x><y/></x></>) {let constructor = __parent__, __proto__; } else  if ( '' ) case 9: export __proto__;default: throw false;break; break; case 4: break; case 9: ;throw [,,z1];case <><x><y/></x></>: case <><x><y/></x></>: break; throw <><x><y/></x></>;break; case 3: break; case <><x><y/></x></>: *::*;break; yield <y><z/></y>;break; ");
tryItOut("if(-- '' .yoyo((Object()))) ");
tryItOut("if((yield 1e+81 .@ @foo)) { if (new ((window).apply)(__proto__, @foo) / <x><y/></x>()) {/*for..in*//* nogeckoex bug 349964 */ for  each(let (prop) in __count__) {((-0));{} }(*::*); } else *;}");
tryItOut("gc()");
tryItOut("L:do switch(this.__defineSetter__(\"__noSuchMethod__\", /a/gi)) { default: throw  '' ;break;  } while((__noSuchMethod__) && 0);");
tryItOut("switch((__proto__) = (@foo\n - -1.yoyo(<x><y/></x>).unwatch(\"prototype\"))) { default: continue ;break; case ((1.2e3 ? <x><y/></x> : window)): /*infloop*/for(*::*; null; @foo\t) {return [,,];export *; }break; yield 0.1;case 2: break; break;  }");
tryItOut("if([15,16,17,18].sort(([[1]]).__defineSetter__, (<y><z/></y>.__lookupSetter__(\"__parent__\"))\f)) {;(@foo\f); } else  if (<><x><y/></x></> != this) throw __parent__; else {export __parent__;prototype = x::x::prototype, __count__ = *::*; }");
tryItOut("/*for..in*/for(var prop.prototype in ((function  __iterator__ ()<><x><y/></x></>)(new  \"\" (this)))\t){return <x><y/></x>;export __parent__; }");
tryItOut("if(prototype = <x><y/></x>) { if (eval(\"([,].__noSuchMethod__ =  '' )\", ((yield  '' )))) let __iterator__ = constructor;} else {continue ; }");
tryItOut("if(false) continue L; else  if (<y><z/></y>.valueOf(\"number\")) {gc()L: {let __parent__, __proto__;var __noSuchMethod__ = prop, __parent__ = __noSuchMethod__; } }");
tryItOut("if(*::*) {/*infloop*/for(window for (__count__.__proto__ in  '' ); [15,16,17,18].map([1,2,3,4].slice, (-1)); (yield <x/>.propertyIsEnumerable(\"__count__\")[([15,16,17,18].filter(\tfunction  __iterator__ (prop)prop, ({a2:z2})))])) yield;/*infloop*/do function  __iterator__ () { prototype, __count__ = this; }  while(<><x><y/></x></>.__lookupGetter__(\"prototype\")); }");
tryItOut("throw <x><y/></x>\f;");
tryItOut("return yield (((new Function(\"/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in this) (*);\")))());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in [ \"\" ]) function(q) { return q; }");
tryItOut("for(let y in []);");
tryItOut("if((({__noSuchMethod__: eval(\"__proto__\", <><x><y/></x></>) }))) __count__['__iterator__'] else  if ([1,,]) false;");
tryItOut("do {const __iterator__ = prop, constructor; } while((undefined) && 0);");
tryItOut("return (prop) = Math.pow;");
tryItOut("M:if((this.__defineGetter__(\"prototype\", ([1,2,3,4].slice).call))) {L:while((*) && 0); }");
tryItOut("yield [ '' ].some(new Function)\n");
tryItOut("yield *;");
tryItOut("let (constructor = false) { <><x><y/></x></>; }\n/*for..in*/for(const prototype in (<x/>.prop)) yield;\n");
tryItOut("export *;\nreturn;\n");
tryItOut("/*for..in*/for(let [constructor, __count__] = <y><z/></y> in  '' ) const __noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("{\tif(__count__ = new RegExp(<y><z/></y>, *::*)) yield; else  if (prop = #1=[#1#].__lookupGetter__(\"__count__\")) {gc(); } else {__proto__; } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(((Math.pow).apply); (prop.__lookupGetter__(\"prototype\")).*; (/a/gi)\f.call(<x/>, this, <x><y/></x>).eval((({ __noSuchMethod__: prop, __noSuchMethod__: __iterator__ }) = 3 >>> this))) {if(({})) {let prototype = this, constructor; } else  if (<y><z/></y>) yield window; else ;const prototype; }");
tryItOut("/*for..in*/for(const prototype in ((eval)(void *::*))){yield <><x><y/></x></>;if(<></>) { if ((({__noSuchMethod__: <{__noSuchMethod__}><!--yy--></{__noSuchMethod__}>, __noSuchMethod__ getter: Math.pow }))) prop = <x><y/></x>;} else \f{{}__count__, __iterator__; } }");
tryItOut("if(window) { if (({__proto__: (false.valueOf(\"number\")), prop: __parent__ = __proto__ })) {yield; }} else {throw  \"\" ;(true).__defineSetter__ }");
tryItOut("M:if(true.valueOf(\"number\").valueOf(\"number\") *= [,,z1]\n) { if (arguments) {gc() } else {L: {let *, __parent__ = 1e+81;'haha'.split }/*for..in*/for(var [__iterator__, prototype] = function::__parent__ = prototype in <><x><y/></x></>) let __parent__, __proto__; }}\r");
tryItOut("L: {/*infloop*/M:for(constructor = (prototype).call( /x/ , \fnull, @foo); (this.__defineGetter__(\"prop\", function  prototype (prop, __iterator__) { return #1# } )); constructor = <x/>) const __parent__ = <y><z/></y>; } const constructor;");
tryItOut("yield;");
tryItOut("if(Number()) __iterator__");
tryItOut("if(constructor%=<x><y/></x>) {{}let prototype, __noSuchMethod__; } else  if (({ __count__: __proto__ }) = <><x><y/></x></>\n) return <x><y/></x>; else export constructor;");
tryItOut("M:do ({ __proto__: __count__ }), __proto__ while(( \"\"  ? <><x><y/></x></> : undefined) && 0);");
tryItOut("L: {;return; }");
tryItOut("return;");
tryItOut("L:if((<x/>.__defineGetter__(\"<x/>\", function(q) { return q; }))()) {export constructor;[1,2,3,4].map } else  if (this.__defineSetter__(\"__iterator__\", ('haha'.split).call)) return  \"\" ;");
tryItOut("with({}) { with({}) with({}) { this.zzz.zzz; }  } ");
tryItOut("if(__count__.\rprototype getter= /a/gi) L:switch(__iterator__) { case window: break; continue ;break;  } else {var __parent__, __parent__ = <y><z/></y>;continue M; }");
tryItOut("with({}) { yield; } ");
tryItOut("for(let y in []);");
tryItOut("with((this.__defineGetter__(\"__parent__\", Function))){let (__iterator__) { return; }throw this; }");
tryItOut("/*for..in*/L:for(const  \"\" .valueOf(\"number\").constructor in ((function  prototype (__proto__) { return this.@* } )( /* Comment */prototype = #0= /x/  &= undefined)))with(#3={a:#3#}){return;__noSuchMethod__ = [,,]; }");
tryItOut("yield this.__defineGetter__(\"__parent__\", ((<x/> < <x><y/></x>)).call);");
tryItOut("/*for..in*/for\n(let (__iterator__ = <x/>)['prototype'] in __parent__.constructor) if(constructor) {yield } else  if (({ __noSuchMethod__: __count__ }) = __count__) throw  /x/ ;");
tryItOut("with({__parent__: *}){yield;export *; }");
tryItOut("do const __noSuchMethod__, __iterator__ = ({a2:z2}); while((eval(\"try { gc() } catch(constructor) { yield; } \", *::*).__lookupGetter__(\"__noSuchMethod__\")) && 0);");
tryItOut("switch(<y><z/></y>) { default: break; case  /x/g : yield;yield <x><y/></x>;case 2: break; __proto__;break; case 4: return;case <><x><y/></x></>: __count__ =  /x/ ;break; case 2: const constructor, __count__ = 0;case 4: export __proto__; }");
tryItOut("if(__noSuchMethod__) { if (prop) *::*;} else constructor, __parent__ = <><x><y/></x></>;");
tryItOut("L:switch([15,16,17,18].map(function(y) { yield y; ; yield y; }, new <x><y/></x>())) { case 2:  }");
tryItOut("const [, , ], prototype\n");
tryItOut("return  /x/g ;");
tryItOut("with({prototype: <><x><y/></x></>})gc()");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(prop = function(y) { yield y; for(let y in [5,6,7,8]) var __noSuchMethod__ = <x><y/></x>;; yield y; } in [15,16,17,18].filter(function(q) { return q; }, ;)) {gc()M:if(({constructor setter: /a/gi, __parent__ setter: Function }).propertyIsEnumerable(\"prop\").__defineGetter__(\"__noSuchMethod__\", new Function)) {yield; } else {/*infloop*/for({}; 0/0; (function ([y]) { })())  } }");
tryItOut("/*infloop*/for(__parent__; __iterator__ = <><x><y/></x></>; new 0) return this;");
tryItOut("{/*infloop*/for([z1]\t @ [z1,,]; (prototype.__parent__ = [z1]); (<x><y/></x>.isPrototypeOf(@foo))) { const __count__; } }");
tryItOut("/*infloop*/for([15,16,17,18].some(gc, (<x><y/></x> >= this.eval((<x/>)()))); <zzz>false :: #1#</zzz>; ( /x/g ).watch) {yield; }");
tryItOut("switch(__iterator__.__count__ = __count__ = *::*) { default: break; case 1: export *;break; /*for..in*/for(__proto__.__count__ in ((-3/0.yoyo(window))(prop = prop % [11,12,13,14].sort)))/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in 1.2e3)  case 3: {} }");
tryItOut("/*infloop*/for(({ prototype: constructor, prototype: prop }) = (new Function(\"export __noSuchMethod__;\"))(); __count__ = __noSuchMethod__; (p={}, (p.z = false)())) continue M;");
tryItOut("for(let y in []);");
tryItOut("M:with( /x/ )throw <x><y/></x>; const __count__;");
tryItOut("/*infloop*/M:for(prototype; ((uneval(<x><y/></x>)));  /* Comment */__iterator__) {let constructor; }");
tryItOut("return; const __iterator__;");
tryItOut("{(({})); }");
tryItOut("M:if(<x><y/></x>) prop; else  if (.2) var __noSuchMethod__; else break \n/*infloop*/do export *; while(constructor)\n");
tryItOut("L:if(()) throw 4.; const __noSuchMethod__;");
tryItOut("([,]);");
tryItOut("export *\nvar \fprototype = *::*;");
tryItOut("/*infloop*/for(let ({ prototype: prop = <y><z/></y>.__count__ = (constructor.yoyo(<><x><y/></x></>))++, .__lookupGetter__(\"prototype\") }) = __parent__; new Iterator(Number()) & (__iterator__.(Exception(1e+81))); __proto__ = this) {export *; }");
tryItOut("for(let y in []);");
tryItOut("let (({ \f__parent__: __parent__ })) { return; }");
tryItOut("case <></>: ");
tryItOut("/*infloop*/for(({ set constructor(prototype, constructor)__count__ }); *; (null.__defineSetter__(\"__iterator__\", (1 for (x in []))) || window.@*)) {if(this.__defineGetter__(\"prototype\", function (__iterator__) { yield  /x/  } )(prototype.constructor,  \"\" )) continue M; }");
tryItOut("switch((yield (<x/>)())) { case 2: switch(function(y) { yield y; export *;; yield y; }) { case (prototype.prototype = __noSuchMethod__): ;case 6: (<y><z/></y>);break;  } }");
tryItOut("/*for..in*/for(var [__count__, __count__] = false === (-0).@* in ((function (__count__, __parent__) { yield 1e4 } )(033, #1=[#1#]))) {export *;\nMath.sin }");
tryItOut("do {return -0; } while(([z1,,]) && 0);");
tryItOut("");
tryItOut("with({__noSuchMethod__: ((<x><y/></x> for each (__parent__ in 1e+81)))})/*infloop*/\rfor((p={}, (p.z = <x/>)()); ([<x><y/></x>].some([1,2,3,4].map)); new ((<x/>.valueOf(\"number\")).watch)()) export *;");
tryItOut("try { return; } catch(__iterator__) { gc() } \tfinally { <><x><y/></x></>; } ");
tryItOut("/*for..in*/for(var [prototype, __noSuchMethod__] = ([__noSuchMethod__ if (3)]) > ({ __iterator__: __noSuchMethod__ }) = (yield @foo).unwatch(\"__count__\") in (default: ).call(this.zzz.zzz, (this.__defineSetter__(\"__proto__\", function () { yield <x><y/></x> } )), [,,z1]) += #2=({prototype: 1e4})) {{}(((p={}, (p.z = window)()))); }");
tryItOut("if(true ? __count__ : (void constructor)) export __noSuchMethod__; else  if ((__parent__)(<y><z/></y>).__count__ = __count__ && this.__defineSetter__(\"__count__\", Math.sin)) \r{{export *; } } else <x><y/></x>;");
tryItOut("/*infloop*/do (<x><\ty/></x>); while(<x><y/></x>)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in (\nconstructor)) return;");
tryItOut("/*infloop*/while(*::*){gc()yield Object(({a1:1})); }");
tryItOut("L:while(((3/0 if (<x><y/></x>))) && 0){const __parent__, __iterator__;(1 for (x in [])) }");
tryItOut("export __iterator__;");
tryItOut("L: yield\nwith({__proto__: [11,12,13,14].map})return\n");
tryItOut("{;if(-0) {(<x><y/></x>);window; } else  if (<><x><y/></x></>\t) gc() else yield (-0); }");
tryItOut("L:if(prop = <x><y/></x>.prototype) {; } else  if (({ constructor: ({ prop: ({ __parent__: prop, __iterator__: __iterator__ }), prototype: ({ __proto__: prop, prop: __count__ }) }) })) {let __proto__;export constructor; } else {break ;prototype; }");
tryItOut("switch(yield <{__iterator__}>yyy</{__iterator__}>) { case 8: break; /*for..in*/for([constructor, prop] = new (3.yoyo(this)).watch(\"prop\", /a/gi) in __iterator__ = prototype) {/*infloop*/M:do ; while(<y><z/></y>);return <><x><y/></x></>; } }");
tryItOut("L:if(<x/>) { if (__proto__.__count__ =  /x/ ) yield; else {let prop; }}");
tryItOut("M:if('fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; })) {gc() } else  if (@foo) {<x/>; }");
tryItOut("throw __parent__;");
tryItOut("throw constructor;");
tryItOut("L:switch(case __iterator__: break; default: /*for..in*/for(var constructor in ((/a/gi)((<><x><y/></x></> .@x:: <x><y/></x>.__defineGetter__(\"__count__\", function ()<y><z/></y>))))){{}(undefined); }case 3: null;break; case ({__proto__:  /x/ }) * this.zzz.zzz: (null);break; let(__iterator__ = __count__, __noSuchMethod__ = <><x><y/></x></>) ((function(){const prop, __count__;})());case undefined: break; ;break; case 9: case : *::*;/*\n*/) { default: break; /*infloop*/while(null){prototype = [];var __proto__ = *; } }");
tryItOut("/*for..in*/for(var __iterator__ in __proto__) ");
tryItOut("/*infloop*/for(const __noSuchMethod__; new (this)(); (1.2e3 ,  /x/g )) {__noSuchMethod__;export *; }");
tryItOut("with(__parent__.((new (this)()))){function  __count__ (__proto__) { return window } if(prop = window) {yield; } }");
tryItOut("{if(__iterator__-=<><x><y/></x></>) return; else  if ((({__proto__: @foo})).hasOwnProperty(\"__proto__\")) {{} } else {if(__parent__) {gc() } else ; } }");
tryItOut("/*infloop*/for(const __count__ =  \"\" ; this.__defineSetter__(\"prop\",  /x/g ); [[1]]) {with({__proto__: __count__})var __proto__ = [1,,], __count__ = [1,,]; const prototype; }");
