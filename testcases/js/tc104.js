tryItOut("{L:while((__proto__) && 0){;(__parent__); } }");
tryItOut("L:while((({ __proto__: ({ constructor: prototype }), __proto__:  for each (each in constructor) if (false) }) = __noSuchMethod__) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <x><y/></x>) {export *; }/*for..in*/M:for(let 1.3['__proto__'] in prototype) {yield;export prop; } }\ndo throw this; while((<x/>) && 0);\n");
tryItOut("/*infloop*/\tdo throw undefined; while(null);");
tryItOut("if(window) {if( /x/ ) { if (function(id) { return id }) {continue ;const constructor = window; }} else {return; } } else  if ((function  __iterator__ (__proto__ = [z1], constructor;, ({ constructor: constructor, __count__: prototype })) { yield .2; } )()) {return __iterator__ = window; }");
tryItOut("M:if((getter =  '' ).__lookupGetter__(\"constructor\")) {export __iterator__; }");
tryItOut("let (__count__) { yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var  /x/g .__defineGetter__(\"__iterator__\", function(y) { yield y; ; yield y; }) in [window].__lookupSetter__(\"prototype\")) {'haha'.splitreturn <x/>; }");
tryItOut("if(function::__parent__) {with({}) export __iterator__; } else  if ((return [null].some(({}).__lookupGetter__).__lookupGetter__(\"prop\"))) {\nfunction  __parent__ (__proto__, __count__) { yield <y><z/></y> } \n/*infloop*/for(var [, , ({ prop: prototype })] = (([15,16,17,18].map(false,  /x/g )) , __parent__.__noSuchMethod__); @foo; __noSuchMethod__.yoyo( /x/ )) {return;return this; } }");
tryItOut("let (prototype) { /*for..in*//* nogeckoex bug 349964 */ for  each(window(*::*) in @foo) {(@foo).__defineSetter__ } }");
tryItOut("var constructor, __count__");
tryItOut("{}\n");
tryItOut("/*infloop*/for(__count__; (__iterator__.prototype); [, __proto__, prototype, __count__] = __count__ .@*:: 4.) {{;{} }yield <y><z/></y>; }");
tryItOut("/*infloop*/do {return  \"\" ; const __iterator__;return; } while(null.propertyIsEnumerable(\"prototype\"));");
tryItOut("L:do throw #1#; while(((prototype.valueOf(\"number\"))) && 0);");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) /a/gi");
tryItOut("/*infloop*/for(let [] =  /* Comment */ \"\"  != <x/> ? false : __proto__.prop = 0.1; [1,,]; ((uneval(let (constructor = <x><y/></x>) prop)))) {throw [1]; const __proto__; }");
tryItOut("/*infloop*/L:for(([15,16,17,18].map(__iterator__,  /x/ )); yield {}; 1e81(<x><y/></x>, __parent__)) return;");
tryItOut("with({__noSuchMethod__: #1=[#1#]}){M:if(String(<x><y/></x>,  /x/g )) export *; else  if (__iterator__ = 3/0) throw *; else throw this; }");
tryItOut("{let constructor = <><x><y/></x></>;var __iterator__ = @foo, __iterator__; }/*infloop*/while([__noSuchMethod__.(this)])yield;");
tryItOut("/*for..in*/L:for(const [__count__, __noSuchMethod__] = <><x><y/></x></>.hasOwnProperty(\"function::prop\") in this.zzz.zzz)  { return (0/0 != *::* , (<y><z/></y>)[this]) } {prop, __iterator__; }");
tryItOut("/*infloop*/while((* <<= <><x><y/></x></>).eval((p={}, (p.z = @foo)())))var prop;");
tryItOut("{}");
tryItOut("let (({ __proto__: [, ({ function::__parent__.__count__: ({ __iterator__: prototype }) }), , ], __noSuchMethod__: ({ prototype: __iterator__ }) }), [prototype] = new (<><x><y/></x>\f</>)(this,  '' )) { /*infloop*/for(const constructor; <><bbb xmlns=\"<y><z/></y> if (<x><y/></x>).__parent__\"><ccc:ddd>yyy</ccc:ddd></bbb></>; (({ get constructor(constructor, __proto__)1e81 }))) {throw  /x/g .valueOf(\"number\");gc() } }");
tryItOut("gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::prototype in <y><z/></y>) {yield; }");
tryItOut("/*infloop*/while(constructor)for(let y in [5,6,7,8]) try {  } catch(prop) { {} } finally { __proto__ = <x><y/></x>, __noSuchMethod__; } ");
tryItOut("/*infloop*/for(({ __noSuchMethod__: constructor, constructor: getter }) =  \"\" ; (new (eval)(@foo)); function::__count__+=true) {yield;(window); }");
tryItOut("M:switch(__count__\f.__proto__ = <y><z/></y>) { default: break; ; }");
tryItOut("do {throw <><x><y/></x></>; } while((new <><x><y/></x></>.propertyIsEnumerable(\"constructor\") <<= __iterator__ = null((--true)[\f({__iterator__ getter: <x><y/></x>, prop: this })], __count__.__count__)) && 0);");
tryItOut("try {  } catch(({ __proto__: ({ prop: __noSuchMethod__, prototype: constructor }), __iterator__: __parent__ }) if <y><z/></y>\n.@*) { with({}) yield undefined; } catch(__iterator__ if (function(){yield;})()) { try { gc() } catch(__count__) { throw <x><y/></\fx>; } finally { let __proto__, prototype = -1; }  } catch(__noSuchMethod__ if <><x><y/></x></> .@ <x><y/></x>) { with({}) {  }  } ");
tryItOut("this.zzz.zzz;");
tryItOut("{/*infloop*/for(const __iterator__; *; undefined) {yield; }yield; }prototype: void <y><z/></y>");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __count__] = new this in window) { }");
tryItOut("M:with( '' )while(((prototype = prototype)) && 0)var __proto__ = #3={a:#3#}, prototype;");
tryItOut("with({prop: __noSuchMethod__ = <x/>})yield;");
tryItOut(";");
tryItOut("with( /* Comment */null)gc()");
tryItOut("return");
tryItOut("");
tryItOut("L:do {gc()let __noSuchMethod__, __count__; } while(((this.__defineSetter__(\"constructor\", (/a/gi).call) ? this.unwatch(\"prototype\") : window)) && 0);");
tryItOut("if((1e4.propertyIsEnumerable(\"__iterator__\")) for each (__count__ in prop = __iterator__.propertyIsEnumerable(\"__noSuchMethod__\"))) { if (*) {yield <x><y/></x>; }} else {var __iterator__, __count__; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for(var constructor = ( /* Comment */4.); (({ __iterator__: __parent__, __iterator__: prototype }) = ((({prop: 3})).__lookupGetter__(\"break ;\"))); ((((-0.__lookupGetter__(\"prototype\")))(([11,12,13,14].sort))).watch( __parent__ setter: function(y) { yield y; gc(); yield y; })/)) {(<y><z/></y>); }");
tryItOut("{let (prop = [z1], ({ __proto__: __count__, __iterator__: __iterator__ })) { ; }if((constructor =  \"\"  ? delete this : <x><y/></x>)) throw __iterator__; }");
tryItOut("{;export __iterator__;\t }\n(prop = (prop = *::*))");
tryItOut("M:if((Math.pow).call((this.__defineGetter__(\"__parent__\", [1,2,3,4].slice)), (<y><z/></y>.throw(*)), null)) { if (<><x><y/></x></> for each (prototype in <x><y/></x>)) /*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <x><y/></x>) let prop, prop;} else yield;");
tryItOut("do break ; while(({} ? new <><x><y/></x></>(@foo, 1e-81) : (new function (__parent__) { return; } (try { __count__ = <y><z/></y>; } catch(prototype) { const prop; } finally { {} } , <x><y/></x>))) && 0);");
tryItOut("switch([z1]) { default: break; throw  '' ;break; case continue ;: case 5: 1e+81;break; case undefined: return;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each\n(__proto__ in <x><y/></x>) gc()\n{export *; }\n");
tryItOut("var __iterator__ = <><x><y/></x></>, __parent__;if(<x/>) {return; }");
tryItOut("__parent__ = [];");
tryItOut("do /*infloop*/while(__proto__)window; while((([15,16,17,18].sort(j, (p={}, (p.z = <><x><y/></x></>)())))) && 0);");
tryItOut("/*for..in*/for(const __count__ in ((eval)( /x/g  .@*::  '' )))let (prop) { (*); }");
tryItOut("L: throw <><x><y/></x></>;");
tryItOut("__count__ = prototype;");
tryItOut("L:while((this.__defineSetter__(\"__iterator__\",  set constructor prototype (/*\n*/) { export constructor; } )) && 0){var __proto__ = <y><z/></y>, __proto__ = @foo; }");
tryItOut("with(<><bbb xmlns=\"__count__\">yyy</bbb></>){if(-1) return function ([y]) { }; else  if (<x><y/></x>) {<><x><y/></x></>;'haha'.split } else {{}gc() } }");
tryItOut("/*for..in*/for(var __iterator__.prop in <x><y/></x>) export *;");
tryItOut("/*infloop*/M:do var __noSuchMethod__ = 1e-81; while({});");
tryItOut("{__proto__; }");
tryItOut("L: ;");
tryItOut("if(false.hasOwnProperty(\"__iterator__\")) { if (new this()) break ; else /*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in []) {}}");
tryItOut("M:if((1.3<x><y/></x>)) {Math.pow\nbreak ;\n }");
tryItOut("L:if(<><bbb xmlns=\"__count__.__noSuchMethod__ = this\"><!--yy--></bbb></>) yield\n@foo; else  if ((new  /* Comment */__proto__())) function::prototype;");
tryItOut("if((({x::__proto__: [this]}))) {L:if(({ prototype: __count__, __count__: __proto__ })) { if (*) yield [[1]]; else  \"\" ;} } else  if //h\n((p={}, (p.z = <x/>)())) {eval } else {{export *; }/*for..in*/M:for(const [prototype, __proto__] = (__parent__ in undefined) in this) continue ; }");
tryItOut("M:do export * while((\n<><y><z/></y></>.isPrototypeOf(this.__defineGetter__(\"constructor\", 'haha'.split))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <x><y/></x>) {return;yield __iterator__; }");
tryItOut("if((eval(\"true\", prototype))) __parent__ else ( '' );");
tryItOut("export constructor\n");
tryItOut("L:if(false) { if ((-1 if (__noSuchMethod__))) {break ;return; } else {__iterator__ = __count__; }}");
tryItOut("/*infloop*/for((yield <x><y/></x>); (null if (<y><z/></y>) for (constructor in  /x/ )); (prop = 1e-81)) /*infloop*/while(__iterator__.prototype = @foo){yield  /x/ ; }");
tryItOut("/*infloop*/for(const ({ __count__: ({ prop: [({ prop: __iterator__ }), [prototype], , , ], prototype: prototype }) }) = constructor.__iterator__ getter= function (prototype, __proto__) { return [] ^ #3={a:#3#} } ; function(q) { return q; }; 'fafafa'.\treplace(/a/g, function(q) { return q; })) {let __iterator__, prototype = this;return this; }");
tryItOut("while((((@foo)[__proto__].__defineSetter__(\"constructor\", function(y) { yield y; ;; yield y; }))) && 0)export __iterator__;");
tryItOut("false");
tryItOut("__parent__ = __proto__;");
tryItOut("/*infloop*/M:for(__count__ = 3.141592653589793; <><x><y/></x></>; <x><y/></x>) {return; }");
tryItOut("{;yield; }");
tryItOut("{break L; }");
tryItOut("M:do /*infloop*/do {yield <><x><y/></x></>;const __iterator__; } while((__proto__)+=<x><y/></x>); while((__proto__ = [<><x><y/></x></>.propertyIsEnumerable(\"prototype\") for each (constructor in <x><y/></x> >= undefined) for each (__iterator__ in undefined) if (<x><y/></x>)]) && 0);");
tryItOut("/*infloop*/for(const __proto__; (window ,  /x/g ); 033) return;");
tryItOut("/*for..in*/for(__noSuchMethod__ in __noSuchMethod__) (<y><z/></y>);");
tryItOut("return;function  __parent__ (__count__) { yield 0/0 } ");
tryItOut("while(((<x><y/></x>.valueOf(\"number\")).__lookupSetter__(\"prop\")) && 0)/*for..in*/for(var __proto__ = (uneval(this)) in <x><y/></x>) {}");
tryItOut("{L: return; }");
tryItOut("let __proto__ =  /x/g , __count__; const __count__;");
tryItOut("M:if(<x><y/></x>) { if (<><x><y/></x></>) ;} else //h\nvar __count__");
tryItOut("if(( /x/g .prop = (this.zzz.zzz))) {if(({a1:1}) & ({})) return; else  if (~ /* Comment */#1=[#1#]) function(q) { return q; } else {export *; }if(<x><y/></x>()) { if (<y><z/></y>) {} else {__iterator__ = try {  \"\" ; } finally { throw @foo; } ;; }} }");
tryItOut("/*infloop*/for(let (__proto__ = true) <><x><y/></x></> < [[1]].prototype = 1e+81; yield (__noSuchMethod__ ^= <><x><y/></x></>); ({}).propertyIsEnumerable(\"__count__\")) {let __iterator__;function ([y]) { }; }\nexport *;");
tryItOut("for(let y in [5,6,7,8]) with({}) { with({}) { __parent__ = prototype; }  } ");
tryItOut("if(([0/0/*\n*/].sort(/a/gi))) {/*for..in*/L:for(const __noSuchMethod__ = (__noSuchMethod__ = *::*) in arguments) break M; }");
tryItOut("M:switch((Function(<x><y/></x>, <><x><y/></x></>))) { default: var __parent__;break; case 1:  }");
tryItOut("{if(<x><y/></x>) export prototype; }");
tryItOut("export *;");
tryItOut("this.zzz.zzz;");
tryItOut("if(__parent__) { if (<><xxx {__proto__}={(({prototype: [,,z1]}))(({ get __count__ __count__ (prop, __proto__) { return <x><y/></x> } , __iterator__: [1] }))} /></>.eval(((-new (__parent__)(*, undefined).__lookupGetter__(\"prop\")))[([1,2,3,4].map)(<><xxx {/*infloop*/L:do throw false; while([,,z1]\n);}={true} /></>, (__proto__.(prototype)))])) {do {(*::*); } while((({ __noSuchMethod__: prop }) = 'fafafa'.replace(/a/g, function (prop, constructor) { return <><x><y/></x></> } )) && 0); } else ;\t}");
tryItOut("gc()");
tryItOut("/*infloop*/do __iterator__, __proto__ while(0x99.__parent__ = arguments .. (undefined for (prop in *::*)));");
tryItOut(" \"\" \nreturn;");
tryItOut("if((__iterator__.__noSuchMethod__ =  '' )) {throw <><x><y/></x></>; }");
tryItOut("switch(({constructor: prototype >>= 0 })) { case 4: default: break; export *;const __iterator__;case 4: case <\nx><y/></x>.(__parent__):  }");
tryItOut("yield <><x><y/><\f/x>\f<x><y/></x><!--yy--></>;");
tryItOut("/*for..in*/for(let [constructor, constructor] = <x><y/></x>[__iterator__] in @foo) {(<x/>);gc() }");
tryItOut("with({prototype: this.__defineGetter__(\"each\", ('haha'.split).apply)})/*for..in*/for(var (5.0000000000000000000000)(<><x><y/></x></>) in ((( \"\" ).watch)([[]].__defineSetter__(\"__proto__\", __noSuchMethod__)))){return; }");
tryItOut("/*infloop*/while(1e81){let __noSuchMethod__ = window, __count__;yield; }");
tryItOut("gc()");
tryItOut("try { (<x><\ty/></x>); } catch(__count__ if *) { {} } catch(__count__ if  '' ) { true; } catch(__parent__ if (function(){gc()})()) { yield; } ");
tryItOut("gc()\n");
tryItOut("L: {yield <y><z/></y>;/*infloop*/for(__proto__ = window; __iterator__; <x><y/></x>) (1e+81); }");
tryItOut("this.zzz.zzz;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = Date((new Function(@foo, <x><y/></x>))) in (p={}, (p.z = (delete <y><z/></y>))())) {export *\nyield; }");
tryItOut("M:switch(<><x><y/></x></> %= <x/>) { default: break; /*infloop*/for((uneval(undefined)); 0/0.@*; false += <x><y/></x>) export *;break; /*for..in*/L:for([prototype, prop] = prototype in 4.) ;break; case new Array(this.__defineSetter__(\"__count__\", (0x99).__defineSetter__)): (true);break;  }");
tryItOut("if((new RegExp())) { if (([<x><y/></x>]) *= ({__proto__ setter: function (__count__) { return window }  })) {x::__proto__; }} else <x><y/></x>.eval( /x/ )");
tryItOut("if([11,12,13,14].filter) {export *;yield  \"\" ; } else {export *; }");
tryItOut("try { export *; } finally { {} } ");
tryItOut("let (__proto__ = this, prototype =  '' ) { return; }\n");
tryItOut("'fafafa'.replace(/a/g, function (__parent__, constructor) { return [1,,] } ).propertyIsEnumerable(\"constructor\")['constructor']");
tryItOut("switch(([__parent__].map(/a/gi).__defineSetter__(\"__iterator__\", (null).__defineSetter__/*\n*/))) { default: const __proto__ = <x><y/></x>\nL:with(delete){{} }\n }return new (<x/>)();");
tryItOut("yield __proto__;\nexport *;\n");
tryItOut("{export __noSuchMethod__; }");
tryItOut("L:if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(1.3 === <y><z/></y>.propertyIsEnumerable(\"__parent__\"))) { if ((typeof (<><><x><y/></x></></> | [[1]]))) {M:with( /x/ )yield; } else {for(let y in []);continue ;\n0/0;\n }}");
tryItOut("M:if(false) {yield  /x/ ;<><x><y/></x></>; } else  if ( get prop(__parent__, function::function::__iterator__)new Date(__count__)) {([[]])\n }\f else ");
tryItOut("/*infloop*/while((constructor.__noSuchMethod__ = function(id) { return id })){(undefined); }\n");
tryItOut("{if( '' .yoyo([1,,]) ? ( /x/  == #3={a:#3#}) : <y><z/></y>) { if ((delete this)) ({ __count__: ({ __parent__: prop, __iterator__: __iterator__ }) })}\f else yield [z1,,];while(((eval(\"const prototype, __noSuchMethod__ = 5.0000000000000000000000;\", [ /x/ ]))) && 0); }");
tryItOut("/*for..in*/for(var prototype in ((Math.pow)(@foo)))function(q) { return q; }");
tryItOut("L: /*infloop*/for(const * <= undefined; <y><z/></y>\n; __noSuchMethod__) <!--yy--><bbb xmlns=\"__iterator__ = *::*\"></bbb> ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const \narguments in ({ set prop(prop) { (@foo); } , constructor getter: * })) {}");
tryItOut("/*for..in*/for([__iterator__, prop] = <><x><y/></x></>.yoyo(033) in (prop = null) ? (yield this) : <y><z/></y>(*)) if(function(id) { return id } += false.eval( /x/g .yoyo(<><x><y/></x></>))) return; else  if (<y><z/></y>) {let prototype = -3/0; } else /*for..in*/for(let [prototype, x::__noSuchMethod__] =  ''  in -1) { }");
tryItOut("{return;switch((3.yoyo(window))) { case <x/>: break;  }return __proto__; }");
tryItOut("/*for..in*/for(prop.function::__count__ in ((false)((window)[*::*]))){continue ; }");
tryItOut("{*::*['prototype'] = constructor;while(() && 0)throw (p={}, (p.z = null)()); }");
tryItOut("/*infloop*/while(*::*)throw this;");
tryItOut("/*for..in*/for(var __iterator__ in (delete (-1 .. window))) return;");
tryItOut("/*infloop*/L:while((constructor.prototype = <y><z/></y>)[(new (__parent__)(<x><y/></x>, prop))])__parent__, constructor = <x><y/></x> const prototype;");
tryItOut("L:do yield [z1,,]; while(((uneval(@foo))) && 0);");
tryItOut("if(++return;.__lookupSetter__(\"__proto__\")) ;");
tryItOut("/*for..in*/M:for(const __count__ = (+*) in *::*) export prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype.prop in 4.) [1,2,3,4].slice");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var []['__iterator__'] in <x/>) /*for..in*/for(const __iterator__ in null) break L;");
tryItOut("let ([({ constructor: __noSuchMethod__, prop: constructor }) = new (function (constructor) { yield <x/> } )(<><x><y/></x></>, <y><z/></y>), [] = <x/> , <><x><y/></x></>) { /*for..in*/for(var prototype = <x><y/></x>.eval(<><x><y/></x></>) in <y><z/></y>)  }");
tryItOut("/*for..in*/for(let [\t<x/>, prototype] = *::* in <x><y/></x>) ");
tryItOut("/*for..in*/for(let constructor = #1=({__count__: <x/>}) in null) {{}return; }");
tryItOut("/*infloop*/while((constructor = @foo)){Math.sin } const __count__;");
tryItOut("/*infloop*/while([15,16,17,18].map(([z1,,]).__defineSetter__, *::*))continue ;");
tryItOut("this.zzz.zzz;");
tryItOut("return (new ((__proto__ = true))(<y><z/></y>));");
tryItOut("switch(this + *) { default: ; }");
tryItOut("/*infloop*/while((new Math.sin(window))){throw  '' ;throw [z1]; }\nlet (__parent__, __noSuchMethod__ = undefined) { yield #1=[#1#]; }\n");
tryItOut("");
tryItOut("L:with(--window)yield <><x><y/></x></>;");
tryItOut("while((*::*.hasOwnProperty(\"__noSuchMethod__\")) && 0)__noSuchMethod__\nif((this.__defineGetter__(\"__iterator__\", ((constructor for (__noSuchMethod__ in <y><z/></y>)))))) throw __noSuchMethod__;\n");
tryItOut("{}");
tryItOut("{with({constructor.__iterator__: new ((Math.pow[((__parent__))]))(((0/0)(<x><y/></x>, <x/>) ? () : __proto__+=#3={a:#3#}),  \"\"  <<= <x/>)}){\n(this); } }");
tryItOut("M:switch(\t(arguments)( /x/g , 0/0).@*) { default: break; {}gc()break; break; case <x><y/></x> ? <y><z/></y> : [z1,,]: break;  }");
tryItOut("gc()\n");
tryItOut("switch(new (<x><y/></x>.@foo)()) { case this.zzz.zzz: break; case 8: /*infloop*/for(let [__iterator__, __parent__] default: if(({__count__: __proto__})) { if ((__parent__.__lookupSetter__(\"each\"))) window; else __proto__, __iterator__;}break; case let (undefined = <><x><y/></x>\f</>, prop = window) (1.3++): break;   = prototype; <x><y/></x>.eval(<x/>);  /* Comment */__noSuchMethod__ <><x><y/></x> < 1e+81</> ) continue M;default: break; case 0: yield <x><y/></x>;break; case 0:  }");
tryItOut("if((['\n<><x><y/></x></>.watch(\"prop\", function  __noSuchMethod__ () { yield <x/> } )].some/*for..in*/for(const __proto__ in (((1 for (x in [])))(()))){break ; }(function(q) { return q; }))) if(new  \"\" (__iterator__)) {throw <x><y/>\r</x>; } else yield; else  if (#1=[ /x/g .isPrototypeOf(<y><z/></y>)]) {return;(1 for (x in [])) }");
tryItOut("/*infloop*/while(__count__.__noSuchMethod__){export *;export *\n }");
tryItOut("{}\n");
tryItOut(";");
tryItOut("/*for..in*/for(const prop in #1#) {throw this; }");
tryItOut("if( \"\" (<x><y/></x>, [1,,])) {/*infloop*/for(__iterator__; ((((*).__defineSetter__).apply)(this %= <><x><y/></x></>, __iterator__ = @foo));  /x/  >>> __noSuchMethod__) {do   while((<x><y/></x>) && 0); } } else  if (x::prototype = []\n) {}");
tryItOut("switch(__proto__) { default: break; case __count__.isPrototypeOf(<x><y/></x>): break; case (null.throw(window)): case true:  }");
tryItOut("{return; }");
tryItOut("/*for..in*/for(const [prop, __parent__] = prototype in constructor = __count__) { }");
tryItOut("if(undefined(arguments, <x><y/></x>)) {switch( \"\" ) { case 8: yield;break; default: break; let __proto__ = this;break; case [,,z1]: case <x/>: yield  \"\" ; } } else {let __parent__, prop = -0; }");
tryItOut("switch('fafafa'.replace(/a/g, function () { [1,2,3,4].slice } )) { case __noSuchMethod__.__proto__ setter= function (__proto__) { yield true } : let constructor;gc()break; let (__parent__ = <x/>) { (null); }export constructor;break; default: break; break; return prop; }");
tryItOut("if( /x/g ) {yield  \"\" ; } else  if (*::*) {yield  \"\" ; }");
tryItOut("/*for..in*/for(var __count__.prop in ((function(y) { yield y; const __parent__;; yield y; })(yyy)))break L;");
tryItOut("/*infloop*/for(var prop; <x><y/></x>.throw(null); (((eval).call).apply)) export __count__;");
tryItOut("if(yield (this == <y><z/></y>)) {[1];(<y><z/></y>).watch } else  if (__count__ = (constructor +  \"\" .isPrototypeOf([constructor for (__iterator__ in  /x/ )])))  else {export *;function(y) { yield y; gc(); yield y; } }");
tryItOut("export __noSuchMethod__\n");
tryItOut("yield __proto__;");
tryItOut("throw @foo\n");
tryItOut("M:if(<bbb xmlns=\"[<x><y/></x>].some(Math.sin)\">yyy</bbb>) { if ( \"\" ++) {({}).hasOwnProperty }} else {export *; }");
tryItOut("/*infloop*/for(constructor = <><x><y/></x></>; window; [[1]]) prop;");
tryItOut("M:if(@foo.valueOf(\"number\")) yield; else {(<x><y/></x>);export __proto__; }");
tryItOut("/*for..in*/for(var constructor((this.@*)) in new ({}).__lookupGetter__()) export *;");
tryItOut("let (function::this, prototype) { if([1,2,3,4].slice(<y><z/></y>)[__iterator__]) {/*infloop*/for(const __count__ =  '' ; <x><y/></x>; 0x99) continue ; } else  if (this++) export __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in (this.zzz.zzz).yoyo(eval(\"/*for..in*/M:for(const __proto__ in ((window)(false))){ }\", this - *)\n)) while((this['prop'] = eval(\"break L;\", <x><y/></x>)) && 0)yield;");
tryItOut("{if(<x/>) {gc() } else  if (<><x><y/></x></>) gc() }");
tryItOut("/*for..in*/for(const [prototype, __proto__] = prop in __proto__ =  \"\" ) if(((yield [,].__noSuchMethod__))) { if ((__noSuchMethod__.isPrototypeOf([z1,,]))) yield try { yield; } catch(prototype) { export *; } ; else {}}");
tryItOut("throw StopIteration;");
tryItOut("throw __iterator__;");
tryItOut("with({__proto__: +(gc).call(<x><y/></x>, *::*)})gc()");
tryItOut("L: {export __count__; const prop;if(<><x><y/></x></>.throw(__parent__)) { if (({__iterator__: <y><z/></y>})) {function (prototype, prototype) { return  /x/  }  }} else Math.pow }");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(const [\nprop, __count__] = ((( /* Comment */<><x><y/></x></>) %  ''  ^ <x><y/></x>))[([@foo & <y><z/></y>].map(new Function))] in false.__proto__ instanceof prop.prop &= prop + *::*) switch(let (__noSuchMethod__ = [,,z1]) this) { default: const __noSuchMethod__, prop;break;  }");
tryItOut("if(window) { if (<x\t><y/></x>) {<><x><y/><\f/x></> } else {var __count__ = [,,z1], __noSuchMethod__ = <x><y/></x>;; }}");
tryItOut("/*infloop*/do {if([1,,] == 0/0)  else  if ([__iterator__].some([1,2,3,4].slice)) {yield;( /x/g ); } } while(constructor.prototype = (this.__defineGetter__(\"prop\", gc) << (__parent__ =  /x/g )));");
tryItOut("if( :: @foo) ( \"\" ); else  if (eval(\"@foo += *::*\\n\", <>__parent__</>.hasOwnProperty(\"prototype\"))) {__parent__ = 4.; } else {throw  '' ; }");
tryItOut("/*for..in*/for(__proto__ in *::*.__proto__ && __noSuchMethod__ = this.prototype) {yield __proto__;/*infloop*/while(#0= /x/  ? <><x><y/></x></> : __noSuchMethod__){/*infloop*/for(__count__; <x><y/></x>; this) {let __proto__ = null;export prototype; } } }");
tryItOut("{var __proto__ = <><x><y/></x></>; }");
tryItOut("M:if((prototype = let (__count__, __count__) *::*)) { if ( /x/ ) with({__iterator__: this})let __parent__ = *;} else {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in window) {var __parent__ =  '' , prototype = this; } }");
tryItOut("<y><z/></y>;\n1e+81;\n");
tryItOut("try { yield; } finally {  } ");
tryItOut("if((yield (({prop setter: (function  prop (__count__, __proto__) { yield  /x/g  } ).apply })))) { if (prototype|=__count__.unwatch(\"prop\") >= \f<>let(__parent__, __proto__ = window) { yield;</>(-null) = (prototype = (<x><y/></x> ^= *::*), __parent__ = <><x><y/\n></x></>)) {} else {}}");
tryItOut("/*infloop*/for(var prototype; (*::*)[<><x></></x></>]; ('fafafa'.replace(/a/g, __proto__))) [[1]]");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let [prop, prototype] = function(y) { yield y; gc(); yield y; }() in <><x><y/></x></>) {__noSuchMethod__, __count__ = *; }");
