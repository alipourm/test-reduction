tryItOut("{{}continue ; }");
tryItOut("/*infloop*/L:while(let (constructor) <x><y/></x>){const __count__, __iterator__ = 3.141592653589793; }");
tryItOut("if([1,2,3,4].slice(<x><y/></x>)) (@foo); else {<><x><y/></x></>;#1=[#1#]; }");
tryItOut("/*infloop*/do {return <><x><y/></x></>;(*::*); } while((( ''  || [1,,])[(this.__defineSetter__(\"constructor\", 'haha'.split))]));");
tryItOut("if(prototype = (*::*).call((constructor.__noSuchMethod__ setter= function  __proto__ () { yield  /x/g  } ), <><x><y/></x></>) in prototype.unwatch(\"__proto__\")) { if /*\n*/(prop = (function::prop\n)) {if(constructor) {__iterator__ = *, prop =  /x/g ; } else  if (@foo) { } } else {/*for..in*/for(const __noSuchMethod__ in (((-0))(<x><y/></x>)))export *;if(window) { if (<><x><y/></x></>) {return; }} else export __parent__; }}");
tryItOut("if(new (0x99)()) {yield <x><y/></x>;<x><y/></x> } else {yield *::*; }");
tryItOut("/*infloop*/while(__iterator__ = yield){if((Math.pow)()) { if ((<y><z/></y> >> <><x><y/></x></> .@*:: delete (-1))) if(Iterator(__count__, <><x><y/></x></>)) { if (__noSuchMethod__ = @foo) {yield;break M; } else break M;} else /*for..in*/for(__proto__ = prototype = <><x><y/></x></> in *::*) {return prototype;return <x/>; }} }");
tryItOut("return <x><y/></x>.yoyo(*::*);");
tryItOut("M:if(this.zzz.zzz.__count__ = __parent__ =  /x/ ) /*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in .2) {} else  if (<x><y/></x> | true) {return <><x><y/></x></>;return <y><z/></y>; }");
tryItOut("/*infloop*/do {throw <y><z/></y>;do yield [1]; while((*::*) && 0); } while(new Object());");
tryItOut("with({}) { with({}) prop = __proto__; } ");
tryItOut("let (__noSuchMethod__ = *, prototype) { export *; }");
tryItOut("M:if(true) { if (this) {return <x><y/></x>; }} else ;\nexport *;\n");
tryItOut("/*infloop*/for( /x/g ; 0.1; [,,z1]) {let __count__, __iterator__; }");
tryItOut("while((-1) && 0)let __iterator__, __iterator__ = __proto__;");
tryItOut("/*infloop*/M:do let __count__ = prop, __proto__; while(3/0);");
tryItOut(" \"\" ");
tryItOut("/*for..in*/for(const prototype in ((function (constructor, __proto__)<x/>)(__proto__))){__noSuchMethod__; }");
tryItOut("return;");
tryItOut("try { ; } finally { @foo; } ");
tryItOut("/*infloop*/while( '' \n){throw <x/>; }");
tryItOut("prototype = prototype;");
tryItOut("{;return; }");
tryItOut("/*infloop*/for(const __parent__ = __noSuchMethod__ <= -1 /= this.__defineGetter__(\"__iterator__\", <x><y/></x>); new (eval)(this, true) &= (-3/0 @ undefined); ({__noSuchMethod__ getter: function(q) { return q; } })) function () { yield <x><y/></x> } ");
tryItOut("/*for..in*/for(var __noSuchMethod__(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) in ((function(y) { yield y; while((<y><z/></y>) && 0){let __iterator__; }; yield y; })(((@foo)()))))const __parent__;(__iterator__);");
tryItOut(";");
tryItOut("__proto__ = constructor;");
tryItOut("if(({ get __parent__(__parent__, __noSuchMethod__) {  }  })) { if ((#1#--)) {function:: else , prop = [,,];/*infloop*/L:for(let __parent__; true; 1e81) {__proto__ = 0, __noSuchMethod__; } }} else {let prop, __count__ = <y><z/></y>;do {(({a1:1}));return this; } while((*::*) && 0); }");
tryItOut("/*infloop*/do {;{} } while(<y><z/></y>);");
tryItOut("{([[1]]);yield; }");
tryItOut("L: /*infloop*/for(function::__iterator__ = constructor;  '' ; this) export *;");
tryItOut("/*infloop*/for(prop; this.__defineSetter__(\"__iterator__\", new Function) @ <x/>.__iterator__;  '' ) ");
tryItOut("constructor = <x/>;\nlet __iterator__, continue ;;\n");
tryItOut("/*infloop*/do {if(undefined) (*::*); else  if (1e+81) {} } while(this.__defineGetter__(\"prototype\", Function))\n/*for..in*/for(let prototype =  ''  in this) /*infloop*/for(let __count__ = (uneval(this)); __count__; (({ prototype: prototype }) = ({ prototype: __iterator__, constructor: __noSuchMethod__ }))) __count__ = #3={a:#3#};");
tryItOut("with({prop:  \"\"  ? 3 : prototype}){L:if(<x/>) ; else  if (__noSuchMethod__) export __parent__;var __parent__ = <><x><y/></x></>, __parent__ = *::*; }");
tryItOut("/*for..in*/for(var [__parent__, __proto__] =  /x/ .__lookupGetter__(\"prototype\") in window) {}");
tryItOut("yield\nexport prop;");
tryItOut("/*infloop*/while(prototype+=[,,].__defineGetter__(\"function::__noSuchMethod__\", [1,2,3,4].map))(<><x><y/></x></>).__defineSetter__true");
tryItOut("{(<x/>.__defineSetter__(\"constructor\", \f'haha'.split)) }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__((<><x><y/></x></>.__count__)) in #1# .@x:: this.__lookupSetter__(\"prop\")) {yield  '' ; const __iterator__;throw ({__parent__ setter: ({}).__lookupGetter__, __count__: <y><z/></y> }); }");
tryItOut("var __parent__ = *;\nwhile(((false)) && 0){M:if(window) yield; else  if (null) {export __noSuchMethod__;function () { return  /x/g  }  } }\n");
tryItOut("/*for..in*/L:for(prototype.function::__noSuchMethod__ in <><x><y/></x></>) {export prop;var ; }");
tryItOut("/*infloop*/for(let __proto__ = window; __count__; <x><y/></x>) return __noSuchMethod__; const __count__;\nthrow this;\n");
tryItOut("switch((delete prop.prototype getter= arguments)) { default: break; case 1: break; (([arguments])).__defineSetter__case Date(null): gc() }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(var prototype;  /x/ ; *) {; }");
tryItOut("if(this.__defineSetter__(\"prototype\", /a/gi) & new (function(y) { yield y; constructor; yield y; })(({a2:z2})).hasOwnProperty(\"__proto__\")) {return;var prototype, prototype = null; }");
tryItOut("/*infloop*/M:while((<y><z/></y>.__noSuchMethod__ = __iterator__ = <x><y/></x>).yoyo(new Error(<x><y/></x>.1e4,  \"\" )))\nyield <x><y/></x>;\n(<y><z/></y>);\n");
tryItOut("switch(\nprop.prop) { default: break;  }");
tryItOut("while((let (({ prototype: __noSuchMethod__, __count__: __count__ })) <><x><y/></x></>) && 0)let (__parent__, __proto__) { __count__;\nreturn;\n }");
tryItOut("/*infloop*/for(const __parent__; *\n; this.zzz.zzz) /*for..in*/for(let __iterator__ in ((({}).__lookupGetter__)(yield))){; }");
tryItOut("if(<x><y/></x> ? [[]] : <y><z/></y> < *::* < -1) {gc()break M; } else  if (yield <>\r<x><y/></x\f></>) //h\n<x/>; else {throw 0/0; }");
tryItOut("/*for..in*/for(const __parent__ = window.eval(__noSuchMethod__) in 3) {/*infloop*/M:for(prototype = .2; false; 0/0) (-1) }");
tryItOut("");
tryItOut("L:if([<y><z/></y> if (-0)]) {gc() } else  if (<x/> &= <><><x><y/></x></></>) eval else {(window);; }\n");
tryItOut("/*infloop*/for(const prop = (((__proto__.prototype setter= (this).__defineSetter__).watch)(__parent__, this.zzz.zzz)); 'fafafa'.replace(/a/g, Function) in __parent__ = window.propertyIsEnumerable(\"constructor\");  '' .__defineGetter__(\"__parent__\", ( /x/ ).__defineSetter__)) {export *; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __parent__ = export *;\n in (eval(\"undefined.eval(window;)\", null ? function ([y]) { } :  \"\" ))) return 4.; const __count__;");
tryItOut("export prop;");
tryItOut("/*infloop*/do {/*for..in*/for(let prop = <><x><y/></x></> in <x><y/></x>) {export __proto__; }switch(*) { case 1: yield -3/0; } } while(new false(<x/>).*);");
tryItOut("{let constructor =  '' ;return this; }");
tryItOut("if(*::*\n) {gc()export *; }");
tryItOut("/*infloop*/for(let __count__; (gc).call(__proto__, ); [(<x/> <<= @foo) for each (__parent__ in __iterator__ setter: (1 for (x in [])))].__lookupSetter__(\"__proto__\")) {(<><x><y/></x></>);var __proto__ = false\n }");
tryItOut("let prop = __parent__, __iterator__;");
tryItOut("M:do {; } while((__count__ = constructor) && 0)");
tryItOut("break \n");
tryItOut("*.prop");
tryItOut("switch(__iterator__.watch(\"__iterator__\", Math.sin)) { \fdefault: (#1=[#1#]);case yield -1;.__defineGetter__(\"__iterator__\", false): (<x><y/></x>);break; case 4: break;  }");
tryItOut("L: { }");
tryItOut("while(((({}) += (new Boolean()))) && 0){let (constructor =  /x/ ) { __iterator__ = <y><z/></y>; }{} }");
tryItOut("/*infloop*/for(({ prop: [, __proto__, __count__, __iterator__], __count__: ({ __proto__: __iterator__, prop: __iterator__ }) }) = (<x><y/></x>)(window) || prop.__proto__ = <x/>; (prototype.prop = * !== <x/>); __iterator__ = *::*) {{}var __noSuchMethod__; }");
tryItOut("export prototype;");
tryItOut("/*for..in*/for(let ({ prop: ({ __parent__: prototype, prototype: __proto__ }) }) in ((Function)((__noSuchMethod__[4.]))));");
tryItOut("L:with(window.throw(__iterator__)){__iterator__;throw __parent__; }");
tryItOut("if(((p={}, (p.z = true)()).__parent__)) {do {yield __noSuchMethod__;{} } while((*::*) && 0); } else (<x><y/></x>);");
tryItOut("if([(__proto__ =  \"\"  *= ({true: this }))] |= 5.0000000000000000000000) { if (<><x><y/></x></>.hasOwnProperty(\"\").watch(\"__count__\", /a/gi)) /*infloop*/for(const __iterator__ = (function ([y]) { })().constructor; new <x><y/></x>([11,12,13,14].sort); (((function ([y]) { })().eval( /x/ )) ? new function  prototype (__proto__)<><x><y/></x></>(1e+81, (function ([y]) { })()) :  \"\" )) gc()} else (function::__count__);");
tryItOut("let ([, ] = (1.2e3.__lookupSetter__(\"__iterator__\")), prototype) { (<x/>); }");
tryItOut("with((prototype = @foo)()){this.zzz.zzz;M:with(1.3)gc() }");
tryItOut("let (__noSuchMethod__, __noSuchMethod__ = window { function(q) { return q; } }");
tryItOut("throw constructor");
tryItOut("/*infloop*/while(\n(new Function).call(prototype, ))/*for..in*/for(prototype in *::*) ;");
tryItOut("with({}) { let(__noSuchMethod__) { for(let y in []); } ");
tryItOut("/*infloop*/do {const __parent__ = export *;, __iterator__ = <y><z/></y>; } while(window.prop);");
tryItOut("return;");
tryItOut("/*for..in*/M:for(var prop = <><x><y/></x></> in #3={a:#3#}) return;");
tryItOut("/*infloop*/L:for(const constructor = ((function ([y]) { })().propertyIsEnumerable(\"__count__\"));  /x/g  if (@foo); new window(<x/>, [,,]) > (prop.prototype getter= (window - null))) {M:while(((//h\n'haha'.split())) && 0){__proto__ = [,,z1]; } }");
tryItOut("{return;; }");
tryItOut("{\nlet (__iterator__ = [* for (__iterator__ in __parent__)__iterator__ = true]) { L:if(eval(\"__noSuchMethod__\",  /x/g )) gc() else  if ( \"\" ) {{}prop = 1e-81, prototype; } else export *;\t }\nlet ([__count__, , , function::__parent__, ] = * || false.throw(new constructor(<x/>)), ({ __noSuchMethod__: prototype })) { continue L; } }");
tryItOut("L:switch(yield ({set getter: ({}).hasOwnProperty, __noSuchMethod__: <><x><y/></x></> })) { ; }");
tryItOut("with({__proto__: <x><y/></x>}) \"\" ;");
tryItOut("L:do /*infloop*/for(const __iterator__; (uneval(*::*)); __proto__) throw <x><y/></x>; while((this) && 0);");
tryItOut("/*for..in*/for(let prop = __proto__ ,  /x/  in *::*) {const prop = window, constructor = <><x><y/></x></>;return <x><y/></x>; }");
tryItOut("L: {{} }");
tryItOut("L: export *;");
tryItOut("let(prop, __parent__) { this.zzz.zzz;");
tryItOut("/*infloop*/do {if(true) {const __noSuchMethod__ = __noSuchMethod__;let __proto__ = <><x><y/></x></>; } else {continue M; }continue L; } while(__proto__ = undefined);");
tryItOut("/*infloop*/for(const __iterator__; [false.prototype = 1e81]; yield __noSuchMethod__--) {/*infloop*/do return;throw 0.1; while( /x/ ); }");
tryItOut("if(<bbb xmlns=\"#1=window\t\"> </bbb>) {gc()if( /x/g ) { if ( /x/g ) {var __iterator__, get = this; }} else prototype; } else  if ( \"\" ) {gc()const __count__ = false; } else (this);");
tryItOut("export prototype;");
tryItOut("for(let y in []);");
tryItOut("M:if((window[this])) { if (<x/>\n) {{/*infloop*/for(let prop; <>__parent__ setter: ({}).hasOwnProperty</>; break ) yield;M:if(({a1:1})) yield; else  if (__noSuchMethod__) {prototypeexport *; } else yield @foo; } }} else /*infloop*/for(const __noSuchMethod__; <><x><y/></x></>; 1e+81) export __noSuchMethod__;");
tryItOut("L: /*infloop*/for(<><></></> .. window; <x/>; null-- -  '' ) __count__");
tryItOut("prototype = __proto__;");
tryItOut("L: with({}) with({}) { <><x><y/></x></>; } ");
tryItOut("/*infloop*/do {yield;let prop, constructor; } while([({ prop: __noSuchMethod__ }), __parent__, ] = ({ __iterator__: ({ __proto__: prototype, constructor: __count__ }) }));");
tryItOut("*;");
tryItOut("M:if(window.hasOwnProperty(\"constructor\")) {if(<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\")) {yield <x/>;let prop, __count__ = <x/>; } else  if (__count__.yoyo(this)) {function(y) { yield y; break M;; yield y; } }");
tryItOut("/*infloop*/for(((033.valueOf(\"number\"))[<x><y/></x>.__defineSetter__(\"__proto__\", eval)]); prototype.__proto__ = new ({__parent__: @foo })(1.2e3); <x><y/></x>.prototype = 'fafafa'.replace(/a/g, function  x::prototype (constructor)Function)) {yield; }");
tryItOut("if((true\n)) { if (this.zzz.zzz) {} else {return; }} const prop;");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("export __parent__\n");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prop] = (#0=[].eval([15,16,17,18].some('haha'.split,  \"\" ))) , [<x/>] in constructor = function  constructor () { return  \"\"  } ()) {yield  /x/g ;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in true) {export *;prototype }");
tryItOut("L: /*infloop*/for(var __noSuchMethod__; [false]; ) {window }");
tryItOut("L:do {for(let y in []);(undefined); } while((constructor) && 0);");
tryItOut("with(<bbb xmlns=\" \"\" \"><!--yy--></bbb>)yield;");
tryItOut("{/*infloop*/while(__proto__ = 033){; }export *; }");
tryItOut("export *");
tryItOut("let (__proto__ = __noSuchMethod__.(<x><y/></x>\f)) { L:if(__proto__.__iterator__ getter= eval) yield; else  if ((__parent__ = undefined)) yield <x><y/></x>; }");
tryItOut("with({prototype: ([, __noSuchMethod__] = [<x/> if ([1,,])])}){const prototype = window; }");
tryItOut("if(033) {return;break L; } else  if (false) break L;");
tryItOut("/*infloop*/while((__noSuchMethod__-=<><x><y/></x></>.__defineSetter__(\"__count__\", gc)))yield ({a1:1});");
tryItOut("if((uneval(*::* || <><x><y/></x></>))) { if ((new ((<x/>).__defineSetter__)())) {let __parent__, __proto__ = *::*;(\t({a2:z2})); }} else {/*infloop*/L:for(var __iterator__ = 1.2e3; #3={a:#3#}; function ([y]) { }) {export __parent__;export prop; }return; }");
tryItOut("/*for..in*/(const __proto__ = <x/> === <x><y/></x>.* in ({__noSuchMethod__ getter: function(y) { yield y; let prop = ({});; yield y; }, function::__proto__ setter: Math.sin })) ");
tryItOut("let (({ prototype: [({ __count__: [prop, , ({ __parent__: __count__ }), ], __noSuchMethod__: __noSuchMethod__ })] }) = ('fafafa'.replace(/a/g, ({}).__lookupGetter__)), prop) { return ((uneval(*::*)) for ((<x><y/></x> if (null)).prototype in [[1]]) if ([[]])); }");
tryItOut("if((yield null)) if([z1]) throw true; else  if (null) ; else {/a/gi }\n else  if (([,,] >>>= '' )) {<x><y/></x>break ; }");
tryItOut("/*for..in*/for(let __parent__, __parent__ in __parent__) {gc()(__parent__); }");
tryItOut("/*infloop*/for(let ({ __proto__: prop, __proto__: __proto__ }) =  /x/  && <><x><y/></x></>; <x><y/></x>yyy++; <><x><y/></x></> :: window) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __parent__) {; } }");
tryItOut("continue ; const __iterator__;");
tryItOut("return *::*;");
tryItOut("/*infloop*/L:for(prototype; (function ([y]) { })(); this) return <x/>;");
tryItOut("L:do let __count__ = __noSuchMethod__; while(( '' ) && 0);");
tryItOut("{/*for..in*/for([prop, constructor] = <x><y/></x> in window) {(1 for (x in [])) } }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const ({ __parent__: constructor, x::__iterator__: __noSuchMethod__ }) in ( '' .__proto__ = [15,16,17,18].map(gc, <y><z/></y>))) if(<x/>) var __noSuchMethod__, __iterator__ = null; else const __proto__, __iterator__ = false;\r");
tryItOut(" instanceof with({prop: ( /* Comment */__iterator__++)})(function(q) { return q; }).apply");
tryItOut("if((yield function(id) { return id }) ? [(<x/> for (__proto__ in []))].filter(<><x><y/></x></>) : [15,16,17,18].filter(eval, (eval(\"__proto__\", false)))) {(<y><z/></y>); } else  if (<y><z/></y>) var __iterator__; else {return; }");
tryItOut("return;");
tryItOut("/*infloop*/for((uneval(1.3)); (.2 if ( /x/ )); (prototype-=window @ yyy)) {const constructor; }");
tryItOut("with({}) { __parent__.prototype = __proto__; } ");
tryItOut(" const prop;");
tryItOut("switch(#1=[#1#] , (__count__ instanceof  \"\" )) { default: constructor = prop;break; break; break; break;  }");
tryItOut("let (constructor) { return; }");
tryItOut("/*for..in*/M:for(constructor = (function (__parent__, prop)prototype: <x><y/></x>.watch\"__parent__\")(({__proto__ setter: ( /x/g ).__defineSetter__ })) in (uneval([z1,,]))) let (__iterator__ = true, __noSuchMethod__) { switch(this) { case <x><y/></x>: export *;break;  } }");
tryItOut("/*for..in*/for(let __parent__ in (((yield function::__count__ ?  \"\"  : <x>\t<y/></x> += __count__.__count__ = <><x><y/></x></>))(false.prototype)))/*for..in*/for(var __iterator__ in __parent__.(((<><x><y/></x></>)[<><x><y/></x></>].__defineSetter__(\"__iterator__\", (-1))))) ;");
tryItOut("/*for..in*/M:for(var [prop, prototype] = <>yield ( /* Comment */<x/>);</> in window) __proto__ = <x/>, __count__\n");
tryItOut("/*infloop*/for(const __parent__ = (({ __noSuchMethod__: __parent__, prototype: __count__ }) = ({ constructor: yield })); 1.2e3; (* ^=  \"\" ))  { yield <y><z/></y> } ");
tryItOut("/*for..in*/for(let constructor in (({}).hasOwnProperty).apply) {/*infloop*/for(let __parent__ = false; <x/>; [,,z1]) yield;break L; }");
tryItOut("throw StopIteration;");
tryItOut("continue L;");
tryItOut("{/*for..in*/for(var [__noSuchMethod__, __count__] = #0=<x><y/></x> in <x/>) {const __parent__ = <x/>, __parent__ = <x/>;; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__(prototype) in __proto__.__lookupGetter__(\"__iterator__\").__iterator__) yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(const __iterator__.prop in delete ([11,12,13,14].some)) {yield <x><y/></x>;throw <x><y/></x>; }");
tryItOut("/*infloop*/while(<y><z/></y>)return <><x><y/></x></>;");
tryItOut("let(__iterator__, [11,12,13,14].some = __proto__ = {}) ((function(){try { with({}) { prop = constructor; }  } finally { return; } })());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in *) {gc() }");
tryItOut("if( /x/ ) ");
tryItOut("yield ((window for (__noSuchMethod__ in <x><y/></x>)) + ((p={}, (p.z = undefined)())\n));");
tryItOut("L: export __parent__;");
tryItOut("throw __iterator__;");
tryItOut("this.zzz.zzz\nL:do {{}export __iterator__; } while((<x><y/></x>.(<><x><y/></x></>)) && 0);");
tryItOut("let (__noSuchMethod__) { __count__ }");
tryItOut("for(let y in [5,6,7,8]) yield [[[1]]];");
tryItOut("M:do let __iterator__ = [,]; while((({ prop: ({ __proto__: ({ __proto__: __proto__, __noSuchMethod__: prototype }), __iterator__: ({ __iterator__: __proto__ })\f }) }) = (eval(\"__count__\", __iterator__ = window))) && 0);");
tryItOut("switch(0.1)\t { default: /*infloop*/while((let (__proto__ = window, __count__) <><x><y/></x></>)){/*for..in*/for(const __proto__ = (gc).call(__iterator__,  /x/ , <><x><y/></x></>) in <x/>) {} }break;  }");
tryItOut("/*infloop*/for(let ({ prop: ({ prop: constructor }), __noSuchMethod__: ({ __noSuchMethod__: [, , , ], __iterator__: __proto__ }) }) = (yield (let (prop = __parent__, function::let = <y><z/></y>) false.eval(<x><y/></x>))); new undefined << <><x><y/></x></>().valueOf(\"number\"); (<><x><y/></x></> >  /x/ \n)) /*for..in*/M:for(const __count__ =  ''  in new (function (prop, set) { gc() } )(yyy ? <><x><y/></x></> :  '' , [])) throw StopIteration;");
tryItOut("L:do __noSuchMethod__: ((window.__lookupGetter__(\"prototype\")) >>> ([ /x/  if (<><x><y/></x></>)]) -= ~({__iterator__: prop, prototype })) while((((<x/> , undefined) % *::* / @foo) -= this.__defineGetter__(\"__noSuchMethod__\", [[1]])) && 0);");
tryItOut("{throw *::*export constructor; }");
tryItOut("do {{}var __count__ = <x><y/></x>; } while(( /x/ ) && 0);");
tryItOut("let(prop = (__parent__ = <x/>) | [(-0)].some(<><x><y/></x></>)) ((function(){return __count__ = false;})());");
tryItOut("L: break L;");
tryItOut("/*infloop*/do {{}{} } while([1,,])");
tryItOut("/*for..in*/M:for([__noSuchMethod__, __parent__] = ({ set constructor(prototype) { if(033) { if (this) yield;} else return this; }  }) in prop = * <<= this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)) let(__count__, __noSuchMethod__ = <><x><y/> const __count__ = <x><y/></x>; </x></>) ((function(){for(let y in []);})());");
tryItOut("yield this;\nyield;\n");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("return \t<x/>;\nyield;\n");
tryItOut("if((new (gc)()))  else  if ((({__noSuchMethod__: *::*}\t))) {__proto__; } else __parent__;");
tryItOut("let ((([1,2,3,4].map).call(<y><z/></y>,  \"\" , <><x><y/></x></>))) { /*infloop*/for(let __iterator__; undefined; <x><y/></x>) yield; }");
tryItOut("; const __proto__;");
tryItOut("({}).__lookupGetter__\n const __iterator__;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let __iterator__ = (eval(\"/*infloop*/do break M; while(prototype);\", arguments).__proto__) in (function (constructor, __count__) { yield null } ).__noSuchMethod__ = this.__defineSetter__(\"__proto__\", \rfunction (__parent__) { yield \n<><//h\nx><y/></x></> } )) {if((__parent__.prototype = new gc((new =( /x/ ))))) {break ; }*::*; }");
tryItOut("<><x><y/></x></>; const __count__;");
tryItOut("__count__ = __parent__;");
tryItOut("if(!4..__parent__) { if (undefined , [z1]--) {(<y><z/></y>); } else {throw this; }}\n");
tryItOut("export __noSuchMethod__;");
tryItOut("L:with((function  __count__ (prototype) { yield <x/> } )())export *;");
tryItOut("try { with({}) for(let y in []); } catch(prop) { for(let y in [5,6,7,8]) break ; } finally { (__parent__) = __parent__; } ");
tryItOut("let __proto__, __parent__\n");
tryItOut("/*for..in*/L:for(let __count__ = (__iterator__ &= <y><z/></y>) in <x><y/></x>) break L\n{/*for..in*/for(var constructor in ((new Function)(@foo))); }return;");
tryItOut("break ;");
tryItOut("/*infloop*/for(const __count__.__noSuchMethod__ = (eval(\"([15,16,17,18].sort(<y><z/></y> * <x><y/></x>\\n, new (new Function)(\\n '' )))\", constructor)); <x><y/></x>.(@foo); (eval(\"{}\", prop = prop))) ;");
tryItOut(";");
tryItOut("M:while((yield 1.3.unwatch\n(\"prop\")) && 0)let constructor;");
tryItOut("/*infloop*/do throw __count__; while(((\n<y><z/></y> >= <x><y/></x>.__defineSetter__(\"__count__\", ({}).__lookupGetter__)).yoyo(__proto__)));");
tryItOut("/*infloop*/do {{}\n__iterator__ = __noSuchMethod__, prototype = 3/0\t; } while(([0/0].some(Math.pow)));");
tryItOut("if((yield *::*)) {M:do {yield [[]]; } while((({a2:z2})) && 0); }");
tryItOut("/*for..in*/for(let prop = (let (prototype) (__iterator__ = <y><z/></y>)) in eval(\"let __parent__;\", delete = this)) __count__;");
tryItOut("if(undefined) { if (((uneval(new \f(undefined)()))) &= +<y><z/></y>.prototype) {function(y) { yield y; constructor = <y><z/></y>;; yield y; }var x::__count__ = this; }} else {yield;; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function(q) { return q; })(Iterator((-1), 1e4))))yield __noSuchMethod__ = prototype;");
tryItOut("{}");
