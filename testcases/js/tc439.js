tryItOut("L: {var __iterator__, prototype\n*::*; }");
tryItOut(" void ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (__proto__) in __noSuchMethod__) return;\nM:if((getter = 033)) { if ([11,12,13,14].some) const constructor = __noSuchMethod__;} else {gc() }\n");
tryItOut("/*for..in*/for(let constructor = (function  __proto__ (__parent__) { return <y><z/></y> } ).call\f(<x><y/></x>, null) in <y><z/></y> -= 0x99) /*infloop*/for(const __parent__; constructor = <><x><y/></x></> -= (p={}, (p.z = <y><z/></y>)()); [, , , , ] = <> </>) /*for..in*/for(var prototype in (-0)) {const __count__;throw [[]]; }");
tryItOut("/*for..in*/M:for(__proto__ in ((('haha'.split).call)( /x/ ))){((new Function(\"return;\"))).applythrow  /x/ ; }");
tryItOut("with({}) { __parent__ = __parent__; } ");
tryItOut("return;\n;\n");
tryItOut("constructor");
tryItOut("/*for..in*/L:for(constructor = constructor = undefined.throw((function ([y]) { })() >>= <x><y/></x>) in __proto__) ( /x/ );");
tryItOut("yield");
tryItOut("if(((((this.__defineSetter__(\"__parent__\", (1 for (x in [])))) - <y><z/></y> @ <x><y/></x>).__defineSetter__(\"constructor\", Function))\n)) { if (4.) let constructor = window, prop;\ngc\n} else __iterator__, __iterator__;");
tryItOut("/*infloop*/M:while( \"\" ){export __parent__; }");
tryItOut("with({__iterator__: new ((new Function(\"export constructor;\")))()}){throw *;var __parent__ = <x/> }");
tryItOut("M:switch((\n__proto__)) { case typeof #1#.__iterator__: /*for..in*/for(prototype in ((({}).hasOwnProperty)((*::*.yoyo(<><x><y/></x></>))))){export __count__;export prototype; };break; case prop.__proto__ = x::constructor: break; default: yield;break; yield *::*;case ( '' .prototype): return;break; case 1: function ([y]) { }var __iterator__, __parent__;break;  }");
tryItOut("M:while((__count__ | <y><z/></y>.isPrototypeOf([z1,,])) && 0)var constructor = function(id) { return id }\n/*for..in*/for([__noSuchMethod__, __noSuchMethod__] = <><x><y/></x></> in @foo) return;");
tryItOut("yield\nlet (__count__ = constructor|=<x><y/></x>) { const prop = *::*, __parent__; }");
tryItOut("/*infloop*/M:do {{}let prototype, __count__ = *;\r } while(new (Math.sin)(<x><y/></x>, this));");
tryItOut("switch(0x99) { case  /x/  >>>=true: export prop; }");
tryItOut("export *;");
tryItOut("/*for..in*/L:for([__noSuchMethod__, constructor] = 'fafafa'.replace(/a/g, Math.pow) in <><x><y/></x></>) {(<y><z/></y>);gc() }");
tryItOut("/*for..in*/__parent__");
tryItOut("/*infloop*/while(1e-81[(function ([y]) { })()]){continue ;yield; }");
tryItOut("with({}) { throw __parent__; } ");
tryItOut("L:if(this.zzz.zzz) { if (prototype = <x/>.@foo) {false; }} else /*infloop*/M:do gc() while((-__noSuchMethod__));");
tryItOut("switch((/a/gi(0, <><x><y/></x></>))) { case ((eval(\"<x/>\", *).throw(constructor.constructor getter:  getter= (<><x><y/></x></>).watch)) & ({a1:1})): if(<>prototype</> <= <x/> -= <><x><y/></x></> << ( /* Comment */*)) { if (__count__) {return;0.1\n } else {/*infloop*/do {return; } while(constructor.__iterator__); }}break; /*for..in*/for(prototype = (constructor = constructor) in false) export __iterator__; const __count__;break; case ((yield  '' .yoyo(<><x><y/></x></>))): M:do return; while(([,,z1]) && 0);yield 0\nexport function::constructor; }");
tryItOut("switch(typeof <><x><y/></x></>) { case (new (function  __proto__ (__iterator__) { return *; } )([], *::*)):  }");
tryItOut("do {(false);gc() } while((~({ set __parent__ prop (prototype, __proto__) { yield <x><y/></x> }  })) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for([prototype, constructor] = (Function)(<><x\r><y/></x></>, #3={a:#3#}) in 033) {export *; }");
tryItOut("/*for..in*/M:for(let prototype(true) in ((new (new Function)())([].isPrototypeOf((false.__defineGetter__(\"prop\", function  __iterator__ (constructor, __noSuchMethod__) { yield <y><z/></y> } ))))))prop");
tryItOut("while((function ([y]) { }) && 0)gc()");
tryItOut("__noSuchMethod__ =  \"\" ;\nreturn window;\n");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/for(const prototype; ; (({__parent__: (<x><y/></x>)})){let __iterator__ = true, __count__ = <x><y/></x>if(__count__) { if (__noSuchMethod__) yield;} else {export __iterator__; } }");
tryItOut("if((delete __parent__)) if(*.__count__) return __noSuchMethod__; else  if (*::*\n) {continue L;throw <y><z/></y>; }");
tryItOut("/*infloop*/M:while( \"\" .propertyIsEnumerable(\"prototype\")/*\n*/)yield\nL:with({__iterator__: 0x99.isPrototypeOf(__noSuchMethod__)}\t){var yield; }");
tryItOut("yield; const __iterator__;");
tryItOut("let(constructor = /a/gi(new (window).call(__parent__ = <><x><y/></x></>, 1e+81), ({ set __proto__(constructor, prototype)<y><z/></y> })), __iterator__) { return;");
tryItOut("((0 /= null));/*for..in*/L:for(var [prop, __parent__] = (p={}, (p.z = __count__)()) in (0x99 || <x><y/></x>)) (<><x><y/></x></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__noSuchMethod__) in new window()) {{} }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (('haha'.split)((new ()(yield  /x/ , __noSuchMethod__.prop))))){gc() }");
tryItOut("const __parent__ = *;");
tryItOut("/*infloop*/M:for(0x99.unwatch(\"__count__\"); (this.zzz.zzz); 3.141592653589793 .@*:: [ '' ]) throw <><x><y/></x></>;\ngc()\n");
tryItOut("switch(<x/>.eval([<y><z/></y>].\tmap(eval))) { default: yield <y><z/></y>;break; return <y><z/></y>; const prototype;break; /*infloop*/for(let prop; <x><y/></x>; <><x><y/></x></>) Math.sinbreak; let constructor = prototype; }");
tryItOut("/*for..in*/for(var __count__ in ( /x/ .hasOwnProperty(\"prop\").__defineSetter__(\"__iterator__\", function () { yield ([ /x/g ]) } ).eval(__iterator__(__iterator__) = o(__count__ = @foo)))) {throw __parent__;/*for..in*/M:for(var (__iterator__) in getter) {{}var __noSuchMethod__, constructor; } }");
tryItOut("/*for..in*/for(const prototype.__parent__ in [, __iterator__, __iterator__, __proto__] = (<><x><y/></x></>)([], <y><z/></y>)) {while((this) && 0)export __iterator__; }");
tryItOut("(<x/>).watch\n{yield;(<><x><y/></x></>); }");
tryItOut("export *\n/*for..in*/for(let prop = * in <x><y/></x>) { }");
tryItOut("if((-<x/>) / @foo) {export constructor; const __parent__; }");
tryItOut("__proto__");
tryItOut("if( '' .__defineGetter__(\"prototype\", function(q) { return q; })) {( \"\" );gc() } else <x><y/></x>; const prop;");
tryItOut("while((<x><y/></x>) && 0){; __noSuchMethod__ gc() }\nM:do {export __parent__;continue ; prop } while((Math.sin) && 0);\n");
tryItOut("if(([z1]--)) {} else var __iterator__ = *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in (p={}, (p.z = (__count__.__lookupGetter__(\"constructor\")))())) {if(<><x><y/></x></> != @foo) { if (x::__count__-=<y><z/></y>) {; }} else {export *; } }");
tryItOut("L: {window; }");
tryItOut("/*infloop*/while([11,12,13,14].map){yield; }");
tryItOut("L:if((new [window.valueOf(\"number\")].filter(function () { return __noSuchMethod__ } )()\t)) {;return <x><y/></x>; } else  if ([15,16,17,18].sort(new ((window.__lookupSetter__(\"__iterator__\")))(this.zzz.zzz), (try { {} } finally {  } .__lookupGetter__(\"prototype\")) - constructor.__noSuchMethod__ setter= (<x><y/></x>).__defineSetter__)) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <><x><y/></x></>) {export prop; \"\" ; }");
tryItOut("L:if(((this.__defineSetter__(\"prototype\", <x/>) ^= )[ /x/  >>> @foo instanceof __proto__ = -1])) {L:if(<x><y/></x>) {<><x><y/></x></>;const constructor, __proto__; }if(__noSuchMethod__--) const __noSuchMethod__ = <x/>, prop = <y><z/></y> }");
tryItOut("this.zzz.zzz;");
tryItOut("__count__ = __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("gc()");
tryItOut("L: {L: let prototype = <x/>;const __parent__;throw 3/0\n\n }");
tryItOut("/*for..in*/for(__count__ = <x><y/></x> in <x><y/></x>) const prop;");
tryItOut("/*infloop*/do while(( \"\" ) && 0)break M; while((typeof function::prop));");
tryItOut("switch(new Math.pow(<x><y/></x>)) { case 9: export *;throw 4.;continue L; }");
tryItOut("if(<zzz>(eval).call( \"\" , )</zzz>) export prototype; else  if (prototype|=[[]]) {}");
tryItOut("/*infloop*/for(const __iterator__ = ({prop setter: ((1 for (x in []))).apply }); [this for (__count__ in <x><y/></x>)]; this.__defineSetter__(\"__parent__\", <y><z/></y>)) export __iterator__;");
tryItOut("if(({a1:1}) <= @foo) {do gc() while((__proto__.__proto__) && 0); } else  if ({}) {{gc() } } else {/*infloop*/while((<x><y/></x>(<x><y/></x>, [z1]).__iterator__))( /x/ )\nMath.sinswitch(__proto__ = (\f!false ? (__parent__ = __count__) : <x/>[<x/>])) { default: continue L;case 0: *::*; } }");
tryItOut("L:with(<><\tx><y/></x></>)[[]];");
tryItOut("L:if(([] = ({ __iterator__: __iterator__, prop: __iterator__ }))) let __noSuchMethod__;");
tryItOut("with({}) try { this.zzz.zzz; } catch(__iterator__ if (__proto__ = __count__++)) { return new (eval)(window, *); } ");
tryItOut("{;(*); }");
tryItOut("/*for..in*/for(var __parent__ in ((function(q) { return q; })(<x><y/></x>.isPrototypeOf(<y><z/></y>)))){var constructor, __count__ = <x><y/></x>; }\n{}");
tryItOut("if((new ((__iterator__-=*))((this !==  /x/ ), 1e4))) { if ((<><bbb xmlns:ccc=\"let (__noSuchMethod__ = 1e81) #1=[#1#]\"><ccc:eee></ccc:eee></bbb></>.__defineSetter__(\"__noSuchMethod__\", function  prop (prototype) { return <><x><y/></x></>.propertyIsEnumerable(\"__parent__\") } \r))) continue M;} else {(this);throw 5.0000000000000000000000; }");
tryItOut("while((((__count__.[z1]))(window, <><x><y/></x></>)) && 0){}");
tryItOut("/*infloop*/while(constructor){/*for..in*//* nogeckoex bug 349964 */ for  each(const 0 in window) return <><x><y/></x></>; }");
tryItOut("/*for..in*/for([prop, prototype] = (({constructor: <><x><y/></x></> % __count__\t })) in this.__defineGetter__(\"__parent__\", [1,2,3,4].map)) /*for..in*/for(let __proto__ in function(id) { return id } for (__proto__ in <><x><y/></x></>)) var __proto__ = window, __count__ = prototype;");
tryItOut("while((/*\n*/__proto__) && 0)return <y><z/></y>;");
tryItOut("/*infloop*/do {/*for..in*/for(var prototype = window in <x><y/></x>) {(null);;( \"\" ); }eval } while(false);");
tryItOut("with\n({__proto__: this.__defineSetter__(\"__iterator__\", function  constructor ([__noSuchMethod__, prop, , ], __iterator__)(<y><z/></y>.__count__))})throw undefined;");
tryItOut("let (constructor, __count__) { while((prototype = prop.__defineGetter__(\"prototype\", function(y) { yield y; L:if({}) {let __noSuchMethod__, prototype = <><x><y/></x></>; } else  if (this) {export *;{} } else {this; }; yield y; })) && 0){let (__noSuchMethod__ = <y><z/></y>, constructor) { let __parent__ = <x><\fy/></x>; } } }");
tryItOut("const prop = __noSuchMethod__, prototype = 033\n/*for..in*/for(var [__count__, __iterator__] = 0x99 in  /x/ ) const __proto__;\ndo yield; while((prop) && 0);\n");
tryItOut("L: /*for..in*/for(const prop in true) {yield;yield <><x><y/></x></>; }");
tryItOut("M:while((Array( /x/ , prototype)) && 0){\fL: yield;{switch(<x><y/></x>) { case prop: break;  } } }");
tryItOut("let (__proto__ = <x><y/></x>, prototype) { throw -0; }");
tryItOut("/*infloop*/while(( \"\" )[<x><y/></x>] != (<x><y/></x>)){/*infloop*/for(let __noSuchMethod__ = new (({}).hasOwnProperty)(<><x><y/></x></>); [15,16,17,18].some((1 for (x in [])), <x/>); [[1,,] if (<x><y/></x>)]) {const __parent__ = this; }\nL: this;\n }");
tryItOut("{export __noSuchMethod__;window; }");
tryItOut("if((yield <xxx>{__parent__}</xxx>)) { if (#1=[#1#]) {; }} else {continue ;throw prop; }");
tryItOut("/*infloop*/while([1,2,3,4].map.propertyIsEnumerable(\"prop\"))let  { return false } ;");
tryItOut("let(__count__ =  /* Comment */<x/>, prop) { for(let y in []);");
tryItOut("/*for..in*/for(const __count__ in 3) gc()");
tryItOut("/*for..in*/for(let __parent__.__parent__ in (((constructor.prototype =  \"\" ).watch)(#2=[(<y><z/></y>.__proto__ = <><x><y/></x></>)]))){for(let y in [5,6,7,8]) return *;{return;continue L; } }");
tryItOut("throw StopIteration;");
tryItOut("with((new (<x><y/></x>)())){;return; } const prop;");
tryItOut("/*infloop*/while((prototype.__iterator__ = <x><y/></x>) /= yield;)/*for..in*/for(constructor in ((function(y) { yield y; export __iterator__;; yield y; })(false)))gc()");
tryItOut("/*infloop*/for(([15,16,17,18].some((1 for (x in [])), ({__parent__: this })).valueOf(\"number\"));  /x/ ; __parent__ = new Array(x::prop = *)) {{}__noSuchMethod__ = [,,]; }");
tryItOut("do switch(<x><y/></x>) { case 2: (\f<x><y/></x>);yield prop;break; case <x><y/></x>: break; case 7: yield;break; {}break; default: return undefined;break; case 5: ;case <x/>:  } const prototype; while((__noSuchMethod__.prop getter= /a/gi) && 0);");
tryItOut("with({}) with({}) try { yield; } finally { yield <x><y/></x>; } ");
tryItOut("with({__iterator__: (<x/> ? <y><z/></y> : -0)}){break ;export [1]; }");
tryItOut("switch(this.__defineSetter__(\"prototype\", (new Function(\"return;\")))) { default: /*for..in*/M:for(let __parent__ = (-0) in  /* Comment */window) export *;case <bbb xmlns=\"* -= 1e+81\"><ccc:ddd></ccc:ddd></bbb>.__lookupGetter__(\"__parent__\"): for(let y in []); }");
tryItOut("/*infloop*/while(({__noSuchMethod__: .2 }))\nwhile((__count__.unwatch(\"__iterator__\")) && 0)prop = __noSuchMethod__, __proto__;");
tryItOut("/*for..in*/L:for(var ({ __iterator__: ({ __parent__: __iterator__ }) }) in ((*::*)(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(([<x><y/></x>]) >> (\n__parent__)) ^ (++this.isPrototypeOf((((+constructor)))))))){/*infloop*/M:for(__noSuchMethod__; this; <x><y/></x>) {var prop;break L; }throw  /x/ ;\n;\nexport *; }");
tryItOut("/*infloop*/M:do /*for..in*/for(const /*\n*/false['prototype'] in  \"\" ) { } while(<>yyy</>.hasOwnProperty(\"__parent__\"));if(window) return <y><z/></y>; else  if (( { return  } ).watch) continue ; else \n");
tryItOut("throw StopIteration;");
tryItOut("L:switch(eval(\"({});\", function::__parent__.constructor)) { case 0: {}\nbreak; break; prop, __iterator__, prototype;break; default: do if(<x/>) return; else 4. while((@foo) && 0);break;  }");
tryItOut("/*infloop*/for(const __parent__; <><xxx {__parent__}={this.zzz.zzz} /></>; (function ()default: ).call(*::*, <y><z/></y>, <x><y/></x>)) return __iterator__;");
tryItOut("with({}) { with({}) let prototype, __iterator__ = <><x><y/></x></>; } ");
tryItOut("/*infloop*/do (({}).__lookupGetter__).apply while(({throw null;do {__parent__; } while((return) && 0); }.__count__));");
tryItOut("/*infloop*/M:do {this.zzz.zzz;*\nexport __parent__; } while([15,16,17,18].sort(Math.pow, (function (prop, __count__)__noSuchMethod__ =  \"\" (__iterator__.__parent__, <x/>))));");
tryItOut("/*for..in*/for(const __count__ = #3={a:#3#} in this) {continue ; }");
tryItOut("__noSuchMethod__");
tryItOut("function(y) { yield y; yield;; yield y; }");
tryItOut("/*for..in*/for(var __count__ in prop) {;L: {throw -1; } }");
tryItOut("({ __parent__: ({ __noSuchMethod__: [({ prop: ({ __parent__: constructor }) }), []] }) }), __noSuchMethod__\n");
tryItOut("{{}\n{{}const __parent__, __iterator__ = (-1); } }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in ((1e+81 .@x:: prototype.valueOf(\"number\"))(<x/>))){\tlet constructor, __parent__;{} }");
tryItOut("/*for..in*/for(let __parent__ = (<x><y/></x>.watch(\"constructor\", (gc).apply)) / <x><y/></x>yyy in __noSuchMethod__.prototype) gc()");
tryItOut("/*infloop*/M:for(let constructor.__parent__ = get = <><x><y/></x></>; <x><y/></x>; false) L:with([<><x><y/></x></>]){return; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = *::* in (function ([y]) { })()) yield;");
tryItOut("{/*for..in*/L:for(var [prop, prop] = (<><><x><y/></x></></>.(prop instanceof <x/>)) in <x><y/></x>) export __count__;yield; }");
tryItOut("let (__noSuchMethod__) { /*infloop*/do yield <y><z/></y>; while(prototype = __noSuchMethod__); }");
tryItOut("");
tryItOut("/*infloop*/while((~[11,12,13,14].map)){/*for..in*/L:for(const __count____count__) {({});return true; } }");
tryItOut("L:if(undefined) {yield;throw  '' ; } else var prop, __count__;");
tryItOut("M:if(window) <x><y/></x>; else \n");
tryItOut("/*infloop*/M:for(<><xxx {prototype}={__parent__.prop} /></>; #0=({__count__: window}); ((new Function).call(<x><y/></x>.@foo, <x><y/></x>.([,,])))) {switch(<x/> ? 1e4 : <y><z/></y>) { default: (false);case 9:  } }");
tryItOut("/*for..in*/for(var constructor = *::* in <><x><y/></x></>) { \"\" ; }");
tryItOut("L: if(new String()) { if (+<><x><y/></x></>) {break ; }} else {throw window;([1,,]); }");
tryItOut("/*infloop*/do {;{} } while((__proto__.( \"\" ).prototype));");
tryItOut("L:if((prototype.unwatch(\"prototype\") == __iterator__ = <x/> for each (__proto__ in ([[[1]]].sort(__noSuchMethod__))))) /*infloop*/M:for(const __noSuchMethod__ = yield 1.3.constructor = (<x><y/></x>.watch(\"__count__\", (1 for (x in [])))); [([11,12,13,14].sort) if ((function ([y]) { })())]; \t[15,16,17,18].some(function(y) { yield y; {yield <x/>; }; yield y; }, .hasOwnProperty(\"constructor\"))) {/*for..in*/for(let prop in (((false).watch)(<y><z/></y>)))yield constructor; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((@foo).watch)(new Date())))(-0)");
tryItOut("if(window.@foo += (({prop: @foo})).yoyo(( /x/ .watch(\"__proto__\", Math.sin)))) \t{/*infloop*/for(window.__lookupGetter__(\"__parent__\")[(<x><y/></x> = <x/>)]; new /a/gi(); __noSuchMethod__.constructor = (let (prototype =  /x/g ) (uneval( /x/g )))) M:switch(<x><y/></x>) { default: break;  } } else ");
tryItOut("/*for..in*/L:for(const [prototype, __proto__] = prototype.__iterator__ getter= [1,2,3,4].slice in ((({__iterator__: @foo, __iterator__: this })) ? (@foo.yoyo(1e+81)) : <><x><y/></x></>)) /*for..in*/\fM:for(let __parent__ in -1) {gc() }");
tryItOut("{<x><y/></x>;throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let __proto__ = ((@foo - <x/>) || ({a1:1})) in <><x><y/></x></>.valueOf(\"number\")) /*infloop*/for(; ({__proto__: (null.*) }) |= this.__defineSetter__(\"__parent__\", ([1,2,3,4].map).\tapply).__lookupGetter__(\"__count__\"); __parent__.__lookupSetter__(\"__proto__\")) {__iterator__ = null;export __iterator__; }");
tryItOut("if(window .@*:: null) { if ( /x/g .__lookupSetter__(\"prop\")) {return <x><y/></x>;{} } else {<x><y/></x>;gc() }}");
tryItOut("let(__parent__ = (this.constructor = window ? \feval(\"1.3\", undefined) : case 4: break; ), constructor = (new RegExp(undefined, 0))) { let(prototype, ({ prop: __noSuchMethod__, __noSuchMethod__: prototype }) = this) ((function(){for(let y in []);})());");
tryItOut("/*for..in*/M:for(var [each, prototype] =  /x/g  in (<x</)></x>) {{}let __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in constructor) {let __parent__, __parent__ = 0.1;<x><y/></x>; }");
tryItOut("switch((prop%=3 >>= __count__ ? ({__proto__ setter: function(y) { yield y; yield ({a1:1});; yield y; }, prototype: 4. }) : (*::*.throw(<><x><y/></x></>)))) { case 7:  }");
tryItOut("/*infloop*/L:do  while((-0));");
tryItOut("(__proto__)\n");
tryItOut("let (prototype) { /*infloop*/while(#1=[#1#]){window; } }");
tryItOut("{continue M\n }");
tryItOut("let (__count__, __proto__ = prop = <y><z/></y> <<= <x><y\f/></x>) { (((<x><y/></x>)(<x><y/></x>, *))); }");
tryItOut("M:do gc() while(([11,12,13,14].sort.hasOwnProperty(\"constructor\")) && 0);");
tryItOut("/*for..in*/for(let (({}).__lookupGetter__).call(eval(\"<x><y/></x>.propertyIsEnumerable(\\\"__parent__\\\")\",  \"\" ), <x/>.throw([])) in (([1,2,3,4].map)(<y><z/></y>))){if(this) { if (0/0) {export *;; } else continue ;} }");
tryItOut("/*infloop*/M:for(const __count__ = (yield <><x><y/></x></>).__count__; (yield (<><x><y/></x></> << *)); (function ([y]) { })()) return;");
tryItOut("/*infloop*/for(__count__; ([11,12,13,14].map .@ constructor = (({}).hasOwnProperty).call(prop, ) === ({__iterator__ setter: function(q) { return q; } })); (<><x><y/></x></>)) {let(prototype) {  }");
tryItOut("return;");
tryItOut("/*infloop*/M:do {if(true) ( /x/g ); else  if ( '' ) {constructor, ; } } while(<><x><y/></x></>.valueOf(\"number\"));");
tryItOut("return window; const constructor;");
tryItOut("const prop = window, __iterator__; const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in (prototype = *)) let(__iterator__) { var __count__;");
tryItOut("L:with(<x><y/></x>.__lookupSetter__(\"__iterator__\")){yield; }");
tryItOut("if(([1,2,3,4].map)(this.__defineGetter__(\"__parent__\", ({}).__lookupGetter__))) gc()");
tryItOut("if(1.3) {yield; }");
tryItOut("if(((export __noSuchMethod__) = ({__iterator__: __proto__ }))) return; else  if ( /x/g  *= <x><y/></x>) if(__count__) { if (__parent__) {function ([y]) { }; } else {var __count__ = *::*;(<><x><y/></x></>); }}");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = (__iterator__ = <x><y/></x> ^ <><x><y/></x></>) in ((yield __noSuchMethod__))) {(this); }");
tryItOut("if(<><bbb xmlns:ccc=\"new  /x/g (<><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb></>) {;\nthrow <y><z/></y>;\n; }");
tryItOut("while(((*).__defineSetter__) && 0)(window);");
tryItOut("with({prototype: null}){return 0; }\t");
tryItOut("/*infloop*/L:for(let [({ setter: ({ __iterator__: prop }), __iterator__: prop }), ] = 033; (__parent__.__noSuchMethod__ = __count__ = <><x><y/></x></>); (eval(\"return <y><z/></y>;\", [[1]]).__proto__)--) {return;prototype; }");
tryItOut("/*for..in*/for(const [__count__, constructor] = (({ get prototype() { yield __parent__.(this.zzz.zzz) } , prototype: 0 })) in (new ( '' )())) {/*for..in*/for(let __count__ in <y><z/></y>) ; }");
tryItOut("/*for..in*/M:for(let [__iterator__, constructor] = yield ({__noSuchMethod__: #1=[#1#], __noSuchMethod__: (new Boolean(constructor,  \"\" )) }) in (__noSuchMethod__.( /x/g )).isPrototypeOf((@foo)(1e+81, <x><y/></x>))) {let __parent__, prop;{} }");
tryItOut("throw <><x><y/></x></>");
tryItOut("switch(__noSuchMethod__ = constructor) { case (<><x><y/></x></>.hasOwnProperty(\"constructor\"))[033++]: break; propcase 1: break;  }");
tryItOut("{if(null) {yield *::*;{} } }");
tryItOut("{}\n");
tryItOut("if(prototype.(*))  else break M;");
tryItOut("let(prototype, __count__ = true.propertyIsEnumerable(\"function::constructor\")) { try { throw StopIteration; } finally { let(__noSuchMethod__, __iterator__) ((function(){{}})()); } ");
tryItOut("if(1e-81 + 5.0000000000000000000000) {throw <y><z/></y>; } else {; }");
tryItOut("if((#0=[({})] | (uneval( '' )))) {M:if(__noSuchMethod__) { if (<><x><y/></x></>) {return; }} else const __noSuchMethod__; }");
tryItOut("let __proto__");
tryItOut("L:switch(((null += function(id) { return id }))) { default: break; case 4. <= undefined.constructor: if(__noSuchMethod__.__noSuchMethod__) {this;{} } else if(eval(\"*\", constructor)) { if ((<y><z/></y>++\t)) <x><y/></x>;} else {continue ;gc() }break;  }");
tryItOut("return this;");
tryItOut("if(<y><z/></y>) constructor; else  if (([window])) //h\n/*infloop*/do (( '' ).__defineSetter__).call while(null); else {if(__iterator__.prototype = 0) yield; else  if ( /x/g ) {yield; } }");
tryItOut("if(@foo +=  '' .unwatch(\"let\").__defineGetter__(\"__noSuchMethod__\", Math.pow)) /*infloop*/M:for(var __proto__ = <><x><y/></x></>; [1,,];  /x/g ) export *; else  if (((function(y) { yield y;  \"\" ;; yield y; })((1.3 += <x><y/></x>), constructor))) ( /x/g ); else ");
tryItOut("with({}) { try { return undefined; } finally { export __iterator__; }  } ");
tryItOut("{if(window) {return <x><y/></x>; } }\n{{} }");
tryItOut("return;");
tryItOut("if(<x/>) {true;(<><x><y/></x></>).call }\nL:if(.2) [({ __parent__: ({ __iterator__: prototype, __iterator__: [,,z1] }), prototype: ({ constructor: prop, __parent__: constructor }) }), , , , [, ({ constructor: prop, __noSuchMethod__: //h\n__noSuchMethod__ }), __noSuchMethod__, ]]\n\n");
tryItOut("/*for..in*/for(const __count__ = yield 1.2e3 in __noSuchMethod__) {(/a/gi).call }\n");
tryItOut("/*infloop*/do continue M; while((<y><z/></y>.yoyo(#3={a:#3#})) ^= [new function(y) { yield y; return;; yield y; }(__proto__) for each (__noSuchMethod__ in <x><y/></x>) for (prop in [[]])] %= new ((1 for (x in [])))((-<y><z/></y>)));");
tryItOut("gc()");
tryItOut("let (constructor) { *::*; }");
tryItOut("let (__noSuchMethod__ = (prop = *::*)) { /*for..in*/for(var __count__ = constructor.prop-=new function (__parent__, constructor)__noSuchMethod__().constructor in (Function(<><x><y/></x></>,  \"\" ).yoyo(<x><y/></x> ? constructor : -3/0))) {/*for..in*/for(let __count__ in (((yield undefined))(yield)))return; } }");
tryItOut("/*infloop*/for([* for each (prototype in 033)].yoyo((x::__noSuchMethod__.__proto__ = <x><y/></x>.propertyIsEnumerable(\"prototype\"))); ([1,2,3,4].map)(); __parent__ = 3/0 % prop.([<><x><y/></x></>])) /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) {__proto__ }");
tryItOut("export constructor");
tryItOut("if( \"\"  + @foo.hasOwnProperty(\"__proto__\")) { if ( /x/g  = ++false) ;} else {}");
tryItOut("gc() const function::__parent__;");
tryItOut("return\n");
tryItOut("/*for..in*/for(let [constructor, __count__] = ( \"\" ) in *) {<><x><y/></x></>;yield this; }");
tryItOut("with(<y><z/></y>);");
tryItOut("this;/*for..in*/for(__noSuchMethod__ = @foo in  /x/g ) {throw 3.141592653589793; }\n{{} }\n");
tryItOut("/*for..in*/for(x::__iterator__ = __noSuchMethod__.constructor.propertyIsEnumerable(\"__parent__\") in this.__defineGetter__(\"__count__\", Math.sin) > (([,])(__noSuchMethod__, window)).__parent__) export constructor;");
tryItOut("/*for..in*/M:for(const prop = this.__defineGetter__(\"constructor\", /a/gi) <= prototype.((false)(*::*)) in <><xxx {__count__}={'fafafa'.replace(/a/g, function(q) { return q; })} /></>) {yield; }");
tryItOut("({}).__lookupGetter__\nlet __parent__ = <><x><y/></x></>; const __proto__;");
tryItOut("if(new (function(y) { yield y; const __parent__, __noSuchMethod__;; yield y; })(__iterator__ = this)) { if (eval(\"export constructor;\", null)) gc() else const __proto__ =  '' , __count__;}");
