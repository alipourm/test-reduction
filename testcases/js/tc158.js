tryItOut("with({__iterator__: eval(\"1e-81\",  /x/ ).valueOf(\"number\"}){throw <x><y/></x>; }");
tryItOut("/*for..in*/for(var [true, __count__] = *::* in 3/0) {let constructor = 3.141592653589793; }");
tryItOut("for(let y in []);");
tryItOut("throw __parent__;");
tryItOut("throw (@foo)(<x><y/></x>);\nL:while((void window * <><x><y/></x></>) && 0)let ;\n");
tryItOut("/*infloop*/for(let __iterator__; <><x><\ny/></x></>; window) {continue M;__proto__ =  /x/g ; }");
tryItOut("if(({ constructor: __noSuchMethod__, prototype: ({ prop: ({ __parent__: [({ prop: __proto__ }), ({ prop: __proto__ })], __count__: prop }), __noSuchMethod__: [ , ] }) }) = __iterator__.__iterator__ = ) with(<x><y/></x>.(<x><y/></x>))__parent__ = true; else  if ([z1,,].unwatch(\"__noSuchMethod__\")) if(<><x><y/></x></>) { if (true) } else (false);");
tryItOut("/*infloop*/do __noSuchMethod__ = (-1); while((__parent__.__proto__ getter= ([<x/>].filter(1.3)).watch >>= __iterator__ = prototype = *));");
tryItOut("do {throw <x><y/></x>;yield 3; } while((this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice)) && 0)\f;");
tryItOut("{const __count__, function::constructor = window\n }");
tryItOut("L: ");
tryItOut("M:if((*::* ::  \"\" )--) /*infloop*/for(const __proto__; <x/>; 0x99) yield 4.; else  if (__parent__.'fafafa'.replace(/a/g, function (o)*::*)) {yield __noSuchMethod__; }");
tryItOut("/*infloop*/for(const prop; this.zzz.zzz; #2=({__iterator__: (__parent__ = 0/0).__noSuchMethod__})) {}");
tryItOut("if((__count__ = prototype)) { if ((yield ({a2:z2}))) {; '' ;(3/0); }} else {yield <><x><y/></x></>;yield window; }");
tryItOut("{}");
tryItOut("if((this.__defineSetter__(\"__iterator__\", \f<><x><y/></x></>)) %= (yield <y><z/></y>)) { if (\tnew (eval)()) {{return <x/>;yield; } }} else {yield;M:do __iterator__ = <x><y/></x>; while((window) && 0); }");
tryItOut("switch((true @ __noSuchMethod__)(window.prop) = <x><y/></x>.( /x/g ).throw(<><><ccc:ddd><x><y/></x></ccc:ddd></></>)) { default: break ;case (): if([1,,]) (~ /x/ );break; let prop = <x><y/></x>;break; case : if( '' ) yield null; }");
tryItOut("yield (__iterator__.prototype = ((yield __parent__))) for each (prototype in *) for each (prop in prototype.(<><x><y/></x></>) === *::*.@*\t) if (new [1,,]([[]], <><x><y/></x></>));");
tryItOut("L:do var __iterator__, __noSuchMethod__; while((true) && 0);return;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = let (__proto__, function::x::__iterator__) <><x><y/></x></> in [11,12,13,14].map) continue L;");
tryItOut("while(((new <><x><y/></x></> instanceof [1,,].@*)) && 0)/*infloop*/while(new (1.2e3)(<y><z/></y>));");
tryItOut("yield ((1.3 <= -1).yoyo(( /* Comment */false)));");
tryItOut("return ;");
tryItOut("{1e81;gc() }");
tryItOut("let __proto__ = 3/0\n");
tryItOut("switch((__parent__.__lookupSetter__(\"__noSuchMethod__\")).prop = (constructor) | \n(({constructor: <x><y/></x>, __noSuchMethod__: this }))) { case 6: if((*.throw(window)) & new (function (constructor) { yield 1.2e3 } )(*::*)) {export *; } else let __noSuchMethod__ = 0.1, __parent__ = *;case 6: function () { yield [1] } break; /*for..in*/for(__count__ = window in <y><z/></y>) throw constructor;case 4: case __parent__.__count__: throw <x><y/></x>;break; default: return; }");
tryItOut("<><x><y/></x></>");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) yield ( \"\" [<><x><y/></x></>]);");
tryItOut("/*infloop*/for(const __count__; __count__.constructor setter= /a/gi; new ( \"\" ).watch(({ __noSuchMethod__: ({ __parent__: constructor, function::constructor: __parent__ }), __parent__: ({ constructor\f: __parent__, __parent__: constructor }) }) = [11,12,13,14].some ^= <><x><y/></x></>)) {({a1:1}); }");
tryItOut("L: __parent__;");
tryItOut("throw __iterator__;");
tryItOut("if((<{prop}><x><y/></x></{prop}>.(*::*(<y><z/></y>)) >>> ((new ((-0))(<x><y/></x>, <><x><y/></x></>)) .. (yield [1,,])))) L:if(__parent__ =  \"\" \n) { if ((this.zzz.zzz)) (*); else yield;}");
tryItOut("L:while((0) && 0){ }");
tryItOut("/*infloop*/do {L:while((new (this ? *::* : <x><y/></x>)('fafafa'.replace(/a/g, Math.pow))) && 0)(uneval(__proto__)); } while(null);");
tryItOut("if(__iterator__ = (--__noSuchMethod__)) switch(*::*) { default: (null);break;  } else {var __noSuchMethod__ = 'fafafa'.replace(/a/g, [1,2,3,4].map); }");
tryItOut("if(null.watch(\"prop\", Function)) { if (constructor * #3={a:#3#}) { }} else {var this; }return null;");
tryItOut("with({}) { throw __parent__; } ");
tryItOut("M:if(eval(\"if(-0.valueOf(\\\"number\\\").isPrototypeOf(__noSuchMethod__.prop)) M:if(window) var __iterator__ = <x><y/></x>, __iterator__; else  if (<x/>) return this; else export *; else {gc()gc() }\", this.__defineSetter__(\"__noSuchMethod__\", (gc).call))) {L:if(<y><z/></y> .@x::  \"\" ) (({}).__lookupGetter__).call else {throw <x><y/></x>; } }");
tryItOut("switch(<y><z/></y>.__count__ = (this.__defineGetter__(\"prototype\", function (\f) { yield window } )) , .hasOwnProperty(\"__parent__\")) { case 0:  }");
tryItOut("yield; const prototype;");
tryItOut("L: (constructor).apply");
tryItOut(" /x/g ;yield;");
tryItOut("with({}) { let(prop = [(@foo .@*:: 0x99)(<x/> = arguments) if (1e81)]) { for(let y in [5,6,7,8]) export __count__; } ");
tryItOut("L: {export *; } const constructor;");
tryItOut("/*infloop*/M:do {switch(<><x><y/></x></>) { case 7: export constructor; }__count__ = <y><z/></y>; } while( \"\" );");
tryItOut("{let try { continue L; } catch(prototype if (function(){let __parent__, prototype;})()) { ; } finally { yield; } , __iterator__ = (-0); }\n");
tryItOut("with({}) { continue ; } ");
tryItOut("if( /* Comment */4.) {export __iterator__;; }");
tryItOut("gc()");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prototype] =  /* Comment */* in <x><y/></x>) constructor, __parent__;");
tryItOut("let(__iterator__ = this.zzz.zzz) { return;");
tryItOut("throw StopIteration;");
tryItOut("L:if(\t.yoyo(__parent__ = __iterator__)) { if (\n<x><y/></x>.*) gc() else {yield; }}");
tryItOut("M:do {yield;export *; } while((<><x><y/></x></> >= <x><y/></x>) && 0)\n");
tryItOut("switch(<x><y/></x>) { default:  }");
tryItOut("/*infloop*/L:for(__count__ = @foo.__lookupSetter__(\"prop\"); <>function ([y]) { }</>--; __noSuchMethod__.__noSuchMethod__ = __iterator__ = #3={a:#3#}) \twhile((<x/>) && 0)var __noSuchMethod__ = *::*, __parent__\t;");
tryItOut("if(<y><z/></y>) { if (undefined) } else {let constructor;return (function ([y]) { })(); }");
tryItOut("let (prototype = (function(y) { yield y; return __parent__;; yield y; })(@foo) - -3/0.yoyo(@foo)) { yield; }");
tryItOut("return;");
tryItOut("with(3.141592653589793 <<=  /x/ )");
tryItOut("/*infloop*/for(1.3(); (<x><y/></x>.(false)); <><x><y/></x></> ? *::* : ({a2:z2})) {export *;export *; }");
tryItOut("/*infloop*/for(var __parent__; prop = undefined; @foo) {if(( /x/ ).__defineSetter__.__defineSetter__(\"prop\", Function)) { if (this.__defineGetter__(\"__parent__\", new Function)) export *;} else {<x><y/></x>; }while((({: undefined })) && 0){export *;function  prop () { yield true }  } }");
tryItOut("{while((({prop: 0.1, __count__\t: (<x/>.__defineSetter__(\"<><x><y/></x></>\", [1,2,3,4].map)) })) && 0){export *;__proto__;return <x/>; }/*infloop*/for(prop >>>=[z1,,]; <x/>.yoyo(__noSuchMethod__); ) continue M; }");
tryItOut("if(window == (uneval([z1]))) __count__; else  if ([15,16,17,18].map(<x><y/></x>, (-0))) {export function::__iterator__; } else return  /x/g ;");
tryItOut("{/*for..in*/M:for(var prop = [false].sort((1 for (x in []))) in <y><z/></y>) /*for..in*/for(let __count__ = * in prop = 0) break ; }");
tryItOut("for(let y in []);");
tryItOut("yield 3.141592653589793\nreturn;");
tryItOut("/*infloop*/while(--this.__defineGetter__(\"constructor\", Math.sin).watch(\"__noSuchMethod__\", function  __noSuchMethod__ (constructor) /x/g ))if( \"\" ) { if (__parent__.__noSuchMethod__ = (yield 1e+81)) {var __count__, x::prop = -3/0; }} else yield 1e+81;");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("if(constructor = @foo) return <y><z/></y>;");
tryItOut("with({function::prop: (__parent__ = constructor)})export __iterator__;");
tryItOut("/*for..in*/for(const function::constructor = [1] in <y><z/></y>) ;");
tryItOut("with(*::*)yield prototype;");
tryItOut("do {throw window; } while((([function ([y]) { }].filter(<y><z/></y>))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in <x><y/></x>) {export *; }");
tryItOut("{let (prop, constructor) { (prop); }; }");
tryItOut("with({}) { if(1.3) {export __proto__;throw *; } else {let __parent__; } } do {/*for..in*/\tfor(var prototype in (((Math.pow).call)(this)))yield 1.3; } while((((this.__defineSetter__(\"prototype\", (<x/>).watch)).@*) ? (<x><y/></x>.unwatch(\"__count__\")) : ({ get __proto__ __parent__ (<x><y/></x>) { \tyield __proto__ = undefined } , prototype: ({prototype: <><x><y/></x></>}) })) && 0);");
tryItOut("break \nreturn  '' ;");
tryItOut("if(__proto__) { if (__noSuchMethod__ = 1.2e3) {const __proto__, __noSuchMethod__; } else prop:  { return this } }");
tryItOut("export *;");
tryItOut("if(*::*) {/*infloop*/for(__proto__; ( /x/g .__iterator__); __proto__ =  '' ) ; } else  if ((prop) =  /* Comment */<x/>) L:if(@foo) yield <x><y/></x>; else  if (<y><z/></y>) {let prop, constructor; }");
tryItOut("if(__iterator__) null; else  if (this) return;");
tryItOut("/*infloop*/for(var __iterator__; ({(true.__lookupGetter__(\"__count__\")), __parent__ setter: function(y) { yield y; /*infloop*/for(let __proto__; this.zzz.zzz.propertyIsEnumerable(\"__count__\"); (false <<= 1e-81.__count__ = (__iterator__%=undefined))) {break L; }; yield y; } }); [11,12,13,14].sort) continue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>) {__parent__ = [1,,];break ; }");
tryItOut("L:switch((/a/gi).call(__count__.__noSuchMethod__ = new Function(), (this.zzz.zzz) <  \"\" .__iterator__ = (#0=false))) { default: break; case 8: break ;break; break; break; break; if(({})) { if ([,]) ;} else (prop).__defineSetter__case <x/>: yield @foo;case 2: const __parent__ = window, prototype =  /x/g ;break; case 5: break; break;  }");
tryItOut("{throw 0x99; const __proto__;if(undefined) {export *;continue L; } else  if (prop) const __count__ = *::*; else {yield <x><y/></x>; } }");
tryItOut("/*for..in*/L:for(let __parent__.<y><z/></y> in ((p={}, (p.z = function::prototype)()).throw(__count__ += this))) throw prototype;");
tryItOut("switch((eval(\"with(typeof <><x>\\r<y/><\\t/x></>){function(y) { yield y; export *;; yield y; } }\", ()))) { case ({x::prototype: prototype|=(function () { 1e4 } )}): 0/0;break; case 9: default: export __proto__;break; case new Number(new /a/gi()): break;  }");
tryItOut("while(((yield yield <x><y/></x>)) && 0){with(undefined)g((<><x><y/></x></>.isPrototypeOf(0x99))); }");
tryItOut("{throw *::*;gc() }");
tryItOut("throw StopIteration;");
tryItOut("with({}) break ;");
tryItOut("/*infloop*/for(constructor; (this.__defineGetter__(\"__count__\", (prototype.throw(window)))); ({ constructor: __proto__ }) = (__iterator__ = window).prop = (*::*)([[]]) = ((-1).isPrototypeOf(<y><z/></y>))) let (__proto__) { let (__noSuchMethod__, __count__) { (window); } }");
tryItOut("yield;");
tryItOut("/*infloop*/M:do if(this) {;function (__parent__) { yield <x/> } const __parent__; } else  if (__proto__) yield; else gc()/*infloop*/for(const __proto__; (prototype = null);  /x/ [false]) { } while(eval);");
tryItOut("L:if(<><x><y/></x></> ^ 0) return <x/>; else  if (((new function  prop (constructor, __parent__)<><x><y/></x></>())[0/0])) yield [z1,,]\nswitch((({__parent__:  /* Comment */(<x><y/></x>)(<y><z/></y>, 1e4) }))) { case 5: case 2: throw 5.0000000000000000000000;break; case ( /* Comment */this) <= (this.__defineSetter__(\"prototype\", [1,2,3,4].map)):  }");
tryItOut("if((let (prop = <x><y/></x>) )) { if ((__iterator__ = <x/>) != (<y><z/></y>)[window]) throw [,,z1];\nvar __noSuchMethod__ = __noSuchMethod__;\n else {/*for..in*/for(var let in (([1,2,3,4].map)(\n__noSuchMethod__))){return <><x><y/></x></>; } }}");
tryItOut("if(prop = [<y><z/></y>].some('haha'.split)) {gc()yield <><x><y/></x></>; } else  if (eval(\"function  __proto__ (__proto__, __iterator__) { function(y) { yield y; {}; yield y; } } \", (eval(\"[1,,]\",  /x/g )))) {gc()yield; } else {continue L;; }\nif((((<><x><y/></x></>)([,,z1], <y><z/></y>)).unwatch(\"prototype\"))) {continue ; }\n");
tryItOut("throw StopIteration;");
tryItOut("yield;");
tryItOut("/*infloop*/L:while((__noSuchMethod__ :: <x><y/></x> |= constructor = this.__defineSetter__(\"__proto__\", [1,2,3,4].map)) /= ((uneval(let)) -= ( /* Comment */[[1]])))const __proto__, function::__noSuchMethod__;");
tryItOut("let([[], ({ __count__: prototype, constructor: ({ set: prototype }) }), , ]) { yield (p={}, (p.z = undefined)());");
tryItOut("L:if(prototype.((prop).__defineGetter__(\"__proto__\", [1,2,3,4].slice))) {yield __noSuchMethod__\nreturn <><x><y/></x></>; } else  if (-<x/>) let prop, prop;");
tryItOut("/*for..in*/for([__noSuchMethod__, __noSuchMethod__] = \n /x/g .__parent__ in [11,12,13,14].map) {with(<x><y/></x>)continue ;export __iterator__; }");
tryItOut("/*infloop*/for(constructor; false++++; (#1=[<><x><y/></x></> >> *::*])) do /*for..in*/for([__parent__, __noSuchMethod__] = <x><y/></x> in -3/0) {function (__proto__, __count__) { const constructor = #1#; } (<x><y/></x>); } while((<><xxx>{__noSuchMethod__}</xxx></>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in (eval)(function ([y]) { })) export __iterator__;/*\n*/ const __iterator__;");
tryItOut("for(let y in [5,6,7,8]) __iterator__ = __parent__;");
tryItOut("/*for..in*/for(let [__count__, __count__] =  in <x/>.propertyIsEnumerable(\"__parent__\")) [[1]];");
tryItOut("L:with({__count__: (__count__ = 0/0)})let __iterator__ = 1.2e3, __iterator__ = *;");
tryItOut("let (constructor) { {} }");
tryItOut("continue M\n{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in  /x/g ) return;");
tryItOut("/*for..in*/for(const __count__ =  \"\"  for (let in <x><y/></x>) in <xxx>{prop}</xxx> ? <x/> : __parent__.__count__ = 4.) {throw __count__;return __noSuchMethod__; }");
tryItOut("const constructor, __iterator__ = prop;\nlet (__iterator__ = 1e+81) { {} }\n\nM:if(([1,2,3,4].map)([,,], [,,]))  else  if (new RegExp()) {/*infloop*/for(const constructor; <x><y/></x>; (this.zzz.zzz)) /*infloop*/for(let __count__; window;  /x/ ) ; } else {case <x><y/></x>: throw <><x><y/></x></>;default: case <y><z/></y>: return true;break; break;  }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("{}");
tryItOut("try {  /x/g ['__proto__'] = __iterator__; } catch(__count__ if (new (function  __iterator__ () { return  \"\"  } )(({__noSuchMethod__: <y><z/></y>}), __parent__))) { yield __noSuchMethod__.(<y><z/></y>); } finally { throw __proto__; } ");
tryItOut("if((__iterator__.__proto__( /x/g ) setter= function () { yield <><y><z/></y>.__lookupGetter__(\"__proto__\")</> } )) /*infloop*/for(__proto__; false; <x/>) {(<><x><y/></x\r></>);continue ; } else  if (prop.__iterator__ = window) {\nconst __proto__ = this; }");
tryItOut("throw __proto__;");
tryItOut("with({constructor: <x><y/></x>})continue L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(*.__noSuchMethod__ in this.zzz.zzz) {break ; }");
tryItOut("if(( /x/g .valueOf(\"number\")).watch(\"prototype\", (1 for (x in [])))) /*for..in*/for(__parent__ in .2) { } else  if ((<><xxx {__parent__}={prop >>= false} /></>)(constructor = #1#)) 3.141592653589793; else {yield; }");
tryItOut("/*for..in*/M:for(let constructor = (prop.__noSuchMethod__) in prop.(prototype)) {throw *::*;/*for..in*/for(const constructor in <y><z/></y>) __noSuchMethod__: this.__defineSetter__(\"__proto__\", gc) }");
tryItOut("if(([prototype = <x><y/></x>].\rsome(Math.pow))) {yield  for (__proto__ in <x><y/></x>); } else  if () { }\n");
tryItOut("yield (@foo ? [[1]] : <x><y/></x> > __proto__.prop setter= prototype);");
tryItOut("{{break ;; } }");
tryItOut("try { with({}) { prop = constructor = [1]; }  } finally { (<x/>); } ");
tryItOut("<x><y/></x>");
tryItOut("/*infloop*/for(const constructor; Number(*::*.__noSuchMethod__,  /x/ ); (__noSuchMethod__ = 0.__defineGetter__(\"__parent__\", [1,2,3,4].slice))) const __parent__ =  '' ;");
tryItOut("/*infloop*/for(var prototype; new String(*::*, [z1]); (this.*)) {if(*::*) { if (window//h\n) ;} else return; }");
tryItOut("{return <x><y/></x>.__defineSetter__(\"__noSuchMethod__\", Math.pow); }");
tryItOut("do {try { throw <y><z/></y>; } catch(__noSuchMethod__) { export __iterator__; } finally { continue ; }  } while((delete ( \"\" ).call(!true, #1=[@foo])) && 0);");
tryItOut("L:while(((__proto__ = __count__.throw([11,12,13,14].sort))) && 0){__parent__/*infloop*/do (<><x><y/></x></>); while(1.3); }");
tryItOut("/*for..in*/for(prototype = null in __proto__ = false, __count__ = this) (.2);const constructor = window;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] = <><x><y/></x></> === prototype.@* :: <x><y/></x> = <><x><y/></x><\f/> in [z1,,]) ");
tryItOut("(<><x><y/></x></>); const __iterator__;");
tryItOut("const __noSuchMethod__\n const __parent__; const prop;");
tryItOut("if((<x><y/></x>.__iterator__)) const __count__\n");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <><x><y/></x></>) {true;prop =  /x/g , __noSuchMethod__; }");
tryItOut("if(this.zzz.zzz['prototype'] = __noSuchMethod__ = (++true)) export __count__;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in [[1]]) {L:do var prototype; while((<x><y/></x>) && 0);export *; }");
tryItOut("if(typeof <><x><y/></x></>) {gc() } else var __proto__, <><x><y/></x></>;");
tryItOut("let(constructor) ((function(){throw StopIteration;})());");
tryItOut("throw <y><z/></y>; const __noSuchMethod__;");
tryItOut("if(( \"\"  ? <><x><y/></x></> : <x><y/></x>)) { if ((({prototype getter: null }))) yield;} else {export constructor;constructor = @foo }");
tryItOut("let(constructor, [] = constructor = __parent__) { yield <x><y/></x>");
tryItOut("if(({__parent__ getter: function  __iterator__ (__proto__\r) { yield  ''  }  getter: function(y) { yield y; const __iterator__, constructor = <x/>;; yield y; } })) {var __iterator__, prototype = <x><y/></x>; } else {<y><z/></y> const prototype; }");
tryItOut("/*for..in*/M:for(let prototype =  ''  in <><x><y/></x></>) {var prop, prop = *; }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("L:if(yield window .@ __count__ =  \"\" ) /*for..in*/for(const prototype = (new __parent__ = window(<zzz><x><y/></x></zzz>, (<x><y/></x>.watch(\"__proto__\", (1 for (x in [])))))) in (-<x><y/></x>)) {{yield __proto__;{} } }");
tryItOut("/*for..in*/for(var __iterator__ in (((new Math.sin()).__defineSetter__)((yield <x><y/></x> || new Math.pow(<y><z/></y>) === (eval(\";\", __count__ = Exception())))))){; ''  }");
tryItOut("export *;");
tryItOut("L: do (<><x><y/></x></>); while((falsecase (__proto__ = __count__): /*for..in*/L:for(let prototype in ((this)( '' )))let __proto__, prototype;break; default: return;break;  ;");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, constructor] = eval(\"-0.__proto__\", undefined()) in #0=[[1]]) {L:if(this) //h\nexport prop; else  if (function ([y]) { }) export *; }");
tryItOut("gc\nwith([1,2,3,4].slice)return  /x/g ;\n");
tryItOut("if(0x99) { if ((({a2:z2}).propertyIsEnumerable(\"__parent__\"))) {return; } else {{}/*infloop*/for(let __noSuchMethod__; <x><y/></x>; @foo) {var __parent__ = @foo, __noSuchMethod__ = this;const x::prop, __iterator__; } }}");
tryItOut("/*for..in*/for(__count__ in (((({}).__lookupGetter__).apply)(0x99))){return this; }");
tryItOut("if(delete <><x><y/></x></>) if(<x><y/></x>) yield @foo; else  if ((function ([y]) { })()) {return <x><y/></x>; } else let constructor, __noSuchMethod__ = constructor = *::*, each =  \"\" ; else {{}export __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(let __count__ in ((function (__iterator__) { yield [ '' ].sort([1,2,3,4].map) } )((constructor = new ({}).hasOwnProperty()).yoyo(({prop: String()}))))){/*for..in*/M:for(const prototype in <x/>) export prop; }");
tryItOut("let (constructor) { /*infloop*/while(true)export *; }");
tryItOut("/*infloop*/L:do {with({}) {} } while(yield @foo);");
tryItOut("if((\t1e-81 instanceof  \"\" )) export *; else  if (*::* !=  '' ) gc() else  /x/g ;");
tryItOut(";");
tryItOut("");
tryItOut("/*for..in*/for(var prototype in (((p={}, (p.z = 1e81)()))(__proto__))){return; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __parent__] = new (true)().prop = this.__defineGetter__(\"prototype\", (eval).apply) in 1.3) throw constructor;");
tryItOut("L:switch(eval(\"\", <y><z/></y> .@ function ([y]) { })) { case 8: /*infloop*/for(<><x><y/></x></>.hasOwnProperty\"__count__\").@foo; typeof <x><y/></x>; (<x/> if (this)\t)) {{} }default: with({__iterator__: (<><x><y/></x></> = <x/>).unwatch(\"__count__\")--})(<x/>)[<x><y/></x>] for each (__iterator__ in <x><y/></x>) for each (__iterator__ in __parent__)['prototype']case 5: const prop = 5.0000000000000000000000;break; case ({constructor getter: <x><y/></x>,  get prototype() { return <y><z/></y> }  }).__lookupSetter__(\"__count__\"): case <x><y/></x>[true] <<= (<><x><y/></x></> ? null : ): break; const prototype = *;return <x><y/></x>;break; case __noSuchMethod__ = <y><z/></y>: export *; }");
tryItOut("function  __parent__ (__noSuchMethod__, prop) { return <x><y/></x> }  const prototype;");
tryItOut("{switch(<x><y/></x>) { case 3.141592653589793: export *;break; case 1: break; default: {}break; const constructor;break; case 6: {};case  /x/ : break; case 5: case 0: export *;break; break;  } }\n__count__");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("if(this.__defineGetter__(\"__parent__\", <bbb xmlns:ccc=\"<><x><y/></x></>.__parent__ = <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>prototype)) {let prop;return [[]]; }");
tryItOut("<y><z/></y>;");
tryItOut("/*infloop*/do {} while( /x/g );");
tryItOut("/*infloop*/for(const __count__; (++[1,2,3,4].map(true, *)); yield @foo) {/*for..in*/for(const __count__ in (((1 for (x in [])))(<x/>))){const __parent__ = undefined, constructor; } }");
tryItOut("yield ;");
tryItOut("/*for..in*/for(var ({ function::({ prototype: ({ __proto__: constructor }), constructor: ({ __count__: __proto__, __iterator__: __count__ }) }): prototype }) = constructor.__count__ in null) export *;");
tryItOut("yield *;");
tryItOut("if(gc()) {if(-0.__lookupSetter__(\"__count__\")) ; } else  if (delete 'fafafa'.replace(/a/g, /a/gi)) /*for..in*/for(let __proto__ in @foo) {(prop); } else let (__proto__ = *, prototype) { (new Function(\"throw <x><y/></x>;\")) }");
tryItOut("/*for..in*/for(let __parent__(*) in (((__proto__--).apply)(eval(\"{}\",  '' )))){{let function::constructor, __proto__;/*for..in*/L:for(let __count__ in true) {continue M;function (prototype) ''  } } }");
tryItOut("/*for..in*/for(let prop =  in ([15,16,17,18].sort((1 for (x in [])), (Function((this.__defineSetter__(\"__count__\", (new Function(\"break ;\"))))))))) /*infloop*/do continue M; while(5.0000000000000000000000.valueOf\t(\"number\"));");
tryItOut("{continue M; }");
tryItOut("M:if({}) {; } else  if ((<><ccc:ddd> </ccc:ddd></>.(typeof #1=[#1#] , ++window))) window; else ;");
tryItOut("return <><x><y/></x></>.propertyIsEnumerable(\"constructor\");");
tryItOut("/*for..in*/for(__proto__ in 0.1) {export __parent__;__noSuchMethod__ = -3/0, constructor; }");
tryItOut("for(let y in [5,6,7,8]) function () { yield __parent__ } ");
tryItOut("M:if((-1) > <y><z/></y>)  else  if (__iterator__) __noSuchMethod__;");
tryItOut("if((function (__proto__) { yield <><x><y/></x></> } ).call( default , window)) {export *; } else  if ((<x><y/></x>.(__noSuchMethod__))) ; else \nexport __noSuchMethod__;");
tryItOut("var constructor = #1=[#1#];");
tryItOut("yield ((yield <x><y/></x>)).__defineGetter__(\"__parent__\", /a/gi);");
tryItOut("M:if(eval(\"constructor = __parent__;\", #1#)) {return <><x><y/></x></>;/*for..in*/for(const __iterator__ = this in <><x><y/></x></>) export constructor; } else export *;");
tryItOut("do this.zzz.zzz; while(((__count__.(true += #3={a:#3#} !== [15,16,17,18].sort(function(y) { yield y; export *;; yield y; }, window)))) && 0);");
tryItOut("with({}) with({}) __iterator__ = __iterator__;");
tryItOut("throw <><x><y/></x></>;let(__iterator__ = window) ((function(){with({}) { return [z1]; } })());");
tryItOut("switch((new 1e+81() - constructor.prototype =  \"\"  >>> *::* &= ((function(y) { yield y; prop, constructor;; yield y; }).call(<x><y/></x>.(<x/>), )) >>= <><{__parent__}>yyy</{__parent__}></>.__lookupGetter__(\"prototype\"))) { default: break; case : let (__count__) { if( \"\" ) if(window) {(__proto__);export *; } const constructor; }break;  }");
tryItOut("yield 3/0;");
tryItOut("return;");
