tryItOut("with({}) gc()");
tryItOut("/*infloop*/while(4.)yield constructor = this;");
tryItOut("{let __iterator__ = #1#, prop = <><x><y/></x></>;{} }");
tryItOut("with({}) (*::*);");
tryItOut("/*for..in*/L:for(var prototype in ((<y><z/></y>)(__noSuchMethod__)))<y><z/></y>;");
tryItOut("yield prop;__count__;");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__ = prototype;");
tryItOut("((-0));");
tryItOut("L:if(#1=({__noSuchMethod__: (#2=({prop: new Object()}))})) { if ((<><x><y/></x></>.watch(\"__parent__\", undefined).__parent__+=#1=({__count__: undefined}))) break ; else __proto__ = *::*, __noSuchMethod__ = <x><y/></x>;}");
tryItOut("/*infloop*/while(__proto__.__iterator__ = for(let y in []);){if(5.0000000000000000000000) { } else  if (prop =  '' ) (new Function).call }");
tryItOut("L: let __parent__ = __count__, __noSuchMethod__;");
tryItOut("/*infloop*/L:while((* .@*:: <x><y/></x>))if(*::*) false");
tryItOut("L: return <y><z/></y>\n");
tryItOut("with({}) ");
tryItOut("this.zzz.zzz;");
tryItOut("if(({})) {return; } else  if (false) {return  '' ; } else {let prototype = __count__, __noSuchMethod__; }");
tryItOut("/*infloop*/for(const ({ __count__: [] }) = new (this.__lookupGetter__(\"__proto__\") <<= ((1.2e3)[<x><y/></x>]))([1,2,3,4].map);  '' ; ((<>yyy</>.(eval(\"<><x><y/></x></>\", <x><y/></x>))).__lookupGetter__(\"constructor\"))) {with({}) (//h\n{ __proto__: __count__ }) = prop; }");
tryItOut("L: let (({ prop: __count__, __noSuchMethod__: prototype }) = <x><y/></x>.(__noSuchMethod__), constructor) { __noSuchMethod__ = <y><z/></y>; }");
tryItOut("var prototype;");
tryItOut("if(prototype = ({ __parent__: ({ __parent__: undefined }) })) let (__iterator__) { gc() }");
tryItOut("do yield window; while((/*\n*/\n) && 0);");
tryItOut("<><x><y/></x></>;return;");
tryItOut("eval");
tryItOut("M:if(@foo) {} else  if (__noSuchMethod__) return; else {;export __noSuchMethod__; }");
tryItOut("break M;Math.pow");
tryItOut("do let __count__ =  '' ; while((('fafafa'.replace(/a/g, 0x99))) && 0);");
tryItOut("/*infloop*/while(* @ @foo)continue ;");
tryItOut("/*infloop*/M:for(prop.prop; (('fafafa'.replace(/a/g, /a/gi)).valueOf(\"number\")); ((p={}, (p.z = ({a1:1}))()))) {let function::constructor = <x><y/></x>;if(prototype = <y><z/></y>) { if (new function  __iterator__ (__parent__)[[1]]()) {let __parent__; }} else const __count__ = *, __iterator__; }");
tryItOut("/*for..in*/for(\r<x/> in (((\t ''  = <x><y/></x> -= (<x><y/></x>.__defineSetter__(\"constructor\", Math.sin))).watch)(<x><y/></x> >>> <x><y/></x>)))return (-1);");
tryItOut("let(prop = (prototype.__parent__ = <x/>), __count__) ((function(){gc()})());");
tryItOut("/*infloop*/M:do export *\n while((new Exception()));");
tryItOut("/*for..in*/for(__proto__ = ({__parent__: prop, prototype: [[]] }) === yield <y><z/></y> in __parent__-=<><x><y/></x></>) switch(<y><z/></y>) { case new Array(): break; case constructor = prototype:  }");
tryItOut("if(((constructor = *))()\t) {let __count__;( '' ).__defineSetter__ }");
tryItOut("if(window) {yield @foo; } else window;");
tryItOut("switch(<x/>) { case 9: gc()default: yield true;break; const constructor, prop = <><x><y/></x></>;case 5: throw window;break; ;case false: yield;return window;__proto__ =  '' , prototype;break; case 4: yield;break;  }");
tryItOut("/*infloop*/do /*infloop*/do return <x><y/></x>; while(({constructor: constructor\f})); while(__noSuchMethod__.prototype setter= (__proto__).apply.isPrototypeOf(false));");
tryItOut("if((<><x><y/></x></> in  /x/ ).eval(5.0000000000000000000000.valueOf(\"number\"))) { }");
tryItOut("gc()");
tryItOut("if([11,12,13,14].map) { if (this.__defineGetter__(\"__count__\", ('haha'.split).call)) {const __noSuchMethod__ = null;let __count__ = <><x><y/></x></>, __proto__ = [z1]; }} else export prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let window in @foo) {yield <><x><y/></x></>;\nreturn __count__;\n }");
tryItOut("/*infloop*/for((3/0.*); (new function (__noSuchMethod__) { return ({}); } (({prop:  /x/g .propertyIsEnumerable(\"prototype\") })) >= __count__.valueOf(\"number\")); this.__defineGetter__(\"prototype\", function  __count__ (prototype) /* Comment */[,,z1])) this.zzz.zzz;");
tryItOut("yield;");
tryItOut("return *.eval(@foo);");
tryItOut("if((<><x><y/></x></>.isPrototypeOf( /x/g ))) {getter } else  if (set.__lookupSetter__(\"prop\")\n) <y><z/></y>; else __iterator__ = falsegc()");
tryItOut("if() return; else  if (*) (<x><y/></x>); else {export *; }");
tryItOut("/*infloop*/L:do {\twith({__noSuchMethod__: null == true}){/*infloop*/for(var (window for each (__noSuchMethod__ in this)) = *::*; <y><z/></y>; <><x><y/></x></>) const __proto__;break ; }/*infloop*/for(__proto__; (*--)++; new <><x><y/></x></>) yield null; } while(<><>((@foo.watch(\"__noSuchMethod__\", function(q) { return q; })).__defineGetter__(\"prop\", return (this.__defineSetter__(\"prop\", window));))</></>);");
tryItOut("return (this.zzz.zzz);");
tryItOut("for(let y in [5,6,7,8]) __iterator__ = prototype;");
tryItOut("L:with({__proto__: this.__defineGetter__(\"__count__\", [1,2,3,4].slice)}){(true).__defineSetter__ } const __noSuchMethod__;");
tryItOut("function(y) { yield y; {}; yield y; } const prop;");
tryItOut("/*infloop*/while(*)return;");
tryItOut("M:with([11,12,13,14]\f.sort){yield false; }");
tryItOut("if(((prototype = <><x><y/></x></>).__parent__ = this.watch(\"__iterator__\", function(q) { return q; }))) /*for..in*/for(const  in ((((*::* % <y><z/></y>)).__defineSetter__)((constructor = __count__).__defineGetter__(\"__iterator__\", eval)))){<><x><y/></x></>;export __count__; } else {if(#1=({constructor: .2})) default: ( '' );break;  else  if ( \"\" ) ;{} }");
tryItOut("{x::prop, __proto__ = #1=[#1#];yield function ([y]) { }; }");
tryItOut("var prototype, __proto__ = <><//h\nx><y/></x></>;");
tryItOut("/*infloop*/M:for(const __count__; (this.__defineGetter__(\"prop\", gc)); 1e-81) { ''  }");
tryItOut("\rL:if(<y><z/></y>) (prototype); else {return <>__noSuchMethod__ =  /x/ ;</>;var __proto__, __count__ = [[1]]; }");
tryItOut("let (prototype) { switch((prototype)()) { default: break; case __noSuchMethod__.__iterator__ = prototype.__lookupGetter__(\"prototype\"): /*infloop*/for(const constructor = [__noSuchMethod__]; new (<x><y/></x>.(this))(<x><y/></x>); <><x><y/></x></>(<><x><y/></x></>, [,])) break ;case 2: let , __count__ = <x><y/></x>;break;  } }");
tryItOut("yield function  __noSuchMethod__ () { return constructor } ;");
tryItOut("/*for..in*/for([prop, prototype] = <><bbb xmlns:ccc=\"undefined\"><ccc:eee></ccc:eee></bbb></> in ++) yield constructor = this.__defineGetter__(\"constructor\", [1,,]), null;");
tryItOut("let constructor, prop;");
tryItOut("L: (prop.__noSuchMethod__ =  /x/ );");
tryItOut("prop = constructor.__parent__;");
tryItOut("return;");
tryItOut("L:switch((p={}, (p.z = [,,z1])())) { case undefined.watch(\"constructor\", function ()<y><z/></y>): return <x/>;break;  }");
tryItOut("gc()\n");
tryItOut("M:if(window) { if (export *)  { /*for..in*/M:for(const [constructor, prototype] = [] in <x><y/></x/*\n*/>) {gc()(@foo); } }  else {/*infloop*/M:while(this)function  prop (__parent__)1.3 }}");
tryItOut("if(this.__defineSetter__(\"constructor\", /a/gi)) do __proto__ while((undefined.throw(<><x><y/></x></>)) && 0); else  if (__proto__ = *.@foo) while((this.zzz.zzz) && 0){return;var __noSuchMethod__ = undefined, prototype; } else /*for..in*/M:for([__count__, __noSuchMethod__] = <x><y/></x> ? @foo : [[1]] in 1e+81) {__proto__ =  \"\" , constructor;{try { var prop; } catch(__iterator__) { {} }  } }");
tryItOut("/*infloop*/for(constructor; ({__parent__: this.__defineGetter__(\"__noSuchMethod__\", new Function) , RegExp(), prototype: (+[11,12,13,14].sort) }); 'fafafa'.replace(/a/g, Function)) \tthrow <x><y/></x>.__proto__--;");
tryItOut("let (prototype = <x><y/></x>, __noSuchMethod__ = function(id) { return id }) { ; }");
tryItOut("do {/*infloop*/do { } while(.hasOwnProperty(\"prototype\").prop = <x><y/></x>); } while(('fafafa'.replace(/a/g, gc)) && 0);");
tryItOut("if( \"\" ) { if (prototype, prototype) {return; }} else {prop; }");
tryItOut("{return <y><z/></y>; }");
tryItOut("let (prototype = prototype = __iterator__-=<x><y/></x>) { with({__noSuchMethod__: (prototype.constructor) != (new ((new Function(\"gc()\")))())})(__iterator__); }");
tryItOut("let (constructor = new this *  \"\" () @ ((new Function(\"yield prototype;\"))(3.141592653589793, <><x><y/></x></>))) { __proto__ = prop; }");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; ((new Function(\"yield [[1]];\"))); window) {export __noSuchMethod__; }\f");
tryItOut("with({__proto__: __proto__ = __iterator__.__proto__\r setter= Function}){return false; }");
tryItOut("/*for..in*/L:for(const __iterator__ in ((constructor)(<><x><y/></x></>))){{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in null) {let prototype;let __parent__ = ({a2:z2}); }");
tryItOut("with(this.(\"__parent__\", prop)){( /x/g )\nyield; }");
tryItOut("yield");
tryItOut("if(<x/>) { if () {/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in *) break M; } else {(<y><z/></y>); }}");
tryItOut("if(new function(q) { return q; }(* >>= [15,16,17,18].some(/a/gi, window), (\n<><x><y/></x></>))) { if ((eval)()) yield; else throw this;}");
tryItOut("if(<x><y/></x> -=  ''  | this.__defineGetter__(\"each\", new Function)) { if (prototype = (<><x><y/></x></> !=  /x/g )) gc()} else {/a/gi{} }");
tryItOut("/*infloop*/for(let (__parent__) ({a1:1});  '' .prototype; this.zzz.zzz) if([,,]) export prototype;");
tryItOut("/*infloop*/for(const ({ prototype: [prop, __count__, ], prop: ({ prop: __noSuchMethod__, constructor: prop }) }) = 3 <<=  /x/g .__defineSetter__(\"__iterator__\", [1,2,3,4].slice); <y><z/></y>; (1.2e3.__lookupGetter__(\"constructor\"))) ");
tryItOut("/*for..in*/for(var [prototype, prototype] = [(__proto__ = window ? new (gc)(<x><y/></\tx>) : this != this)].sort(Function) in ({ __iterator__: ({ prototype\r: constructor, __iterator__: __count__ }) }) = ({__iterator__ setter: (1 for (x in [])) })) {var prototype = {}; }");
tryItOut("/*infloop*/do {/*infloop*/M:for(null -= window >>>=(({__iterator__: window })); <y><z/></y>; prototype = __parent__) this;return\ngc() } while(undefined);");
tryItOut("/*for..in*/for(let __parent__ in ((gc)(eval(\"((p={}, (p.z = false)()))\", <x><y/></x>.hasOwnProperty(\"__proto__\").__defineSetter__(\"let\", function(q) { return q; }))))){L:while((<x><y/></x>) && 0)yield @foo; }");
tryItOut("with({}) let(({ prop: ({ constructor: prototype, __parent__:  }), __iterator__: ({ prop: prop, __parent__: <><x><y/></x></> }) })) { __parent__ = __parent__;");
tryItOut("__proto__");
tryItOut("return;\nfor(let y in []);\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in (<>[1]</>)) let __iterator__;");
tryItOut("if((({__proto__: (prop.prop = this), __noSuchMethod__ setter: prop }))) { if (this.zzz.zzz) (window); else {const __noSuchMethod__ =  /x/g ;yield; }}");
tryItOut("/*for..in*/for(const constructor = <x><y/></x>.hasOwnProperty(\"prop\") in this.__defineGetter__(\"prototype\", function \r(prop) { yield 1e81 } )) {/*for..in*/M:for(const prop in ((this.hasOwnProperty(\"__noSuchMethod__\"))((@foo)(constructor)))){let __count__; } }");
tryItOut("/*infloop*/for(var ({ \tprop: *::*, __count__: __proto__ }) = *::*; ({__proto__:  /x/g }); (1 for (x in []))()) {return; }");
tryItOut("/*for..in*/M:for(prototype = * in __noSuchMethod__) let (prop = @foo) { export __count__; }");
tryItOut("M:if(<x/> | delete this) {function ()*::*var prop; }\t else  if ((__iterator__.(window)) && ([new 033])) {/*for..in*/for(var constructor.__noSuchMethod__ in ((Math.pow)(({a2:z2}).prop)))<x><y/></x>;let prototype\n }");
tryItOut("{export constructor;{} }");
tryItOut("\n");
tryItOut("return ( /* Comment */__iterator__)(({__proto__ setter: function (prop) { return true }  }));");
tryItOut("if((( '' ).apply)(3)) (constructor);");
tryItOut("M:if(<xxx {__proto__}={1e81} />.((let (, __count__ = *::*) <x><y/></x>)).isPrototypeOf(prototype = [,,] .@ *::*)) Function else  if (eval(\"yield <x><y/></x>\", <x><y/></x> instanceof <><x><y/></x></>)) {var constructor = <x/>, __parent__;gc() } else {export __proto__; }");
tryItOut("if(*::*) { if ( \"\"  ? 1e4 : window) {; }} else gc()");
tryItOut("if(__iterator__ = null) /*infloop*/for(__noSuchMethod__; false; (-1)) {<x/>; } else  if (let (prop = ({}).hasOwnProperty) prop.__parent__ | ({ constructor: __count__ })) {/*infloop*/for( '' ; <x><y/></x>; @foo) ;(@foo); } else export __proto__;");
tryItOut("/*for..in*/for(const __proto__ in ((@foo)(<x/>)))return prototype;");
tryItOut("gc()\n");
tryItOut("prototype = __parent__;");
tryItOut("if(<{prop}><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></{prop}>) { if (<x><y/></x>.yoyo( /x/ )) yield *;} else {const prop = <x><y/></x>;export *; }");
tryItOut("if(yield (({ get __parent__()[1], prototype getter: ({}).__defineSetter__ }))) if(__noSuchMethod__) { if (<x><y/></x>) __noSuchMethod__; else {}} else {} const __proto__;");
tryItOut("if(<y><z/></y>) { if (({a2:z2})) yield this;} else {return *;yield; }\n");
tryItOut("{}\n/*for..in*/for(var __noSuchMethod__ in (((new Function(\"export *;\")))(window)));\n");
tryItOut("/*infloop*/M:for(constructor; 'fafafa'.replace(/a/g, function(y) { yield y; let prototype;; yield y; }); (<x><y/></x>())) M:with(<x/>){yield; }");
tryItOut("/*for..in*/for(let __count__ in ((function(y) { yield y; yield  \"\" ;; yield y; })(__count__, <x/>))) {continue L;prototype; }");
tryItOut("while((((Date()) .. (<y><z/></y>.@*.prop = function (constructor) { 'haha'.split } ()))) && 0){/*infloop*/while(__proto__ =  /x/ )prototype = <y><z/></y>, __count__;yield 0x99; }");
tryItOut("return @foo;\nreturn;\n");
tryItOut("L:with({__proto__: *})continue ;\n[1,2,3,4].slice\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in  : __iterator__ = 3/0) /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <y><z/></y>) {export __parent__;const prop = window; }");
tryItOut("/*infloop*/M:for(({ __noSuchMethod__: ({ __parent__: ({ prototype: [({ constructor: function::__count__, __count__: __proto__ }), , , ], __noSuchMethod__: constructor }) }), __parent__: __iterator__ }) = prop%=<y><z/></y>.isPrototypeOf([15,16,17,18].some(function (__parent__,  get prototype prop (__proto__)[,,]) { return  /x/  } , window)); (this[<x><y/></x>].(* *= [<><x><y/></x></>].some(function  prototype ()0.1))); function (__noSuchMethod__, __parent__) { yield <><x><y/></x></> } (*)) {return;/*infloop*/for(const __proto__; __proto__ = <><x><y/></x></>.valueOf(\"number\"); ({__count__\f: ({constructor: <y><z/></y> }) })) {throw @foo; } }");
tryItOut("L: throw this;");
tryItOut("/*for..in*/L:for(var [constructor, __parent__] = <{constructor}><!--yy--><!--yy--></{constructor}> in \n(function ([y]) { })() & ([constructor].map(/*\n*/<x><y/></x>))) {export *; }");
tryItOut("/*infloop*/L:while\r( /x/ ){{} }\nconst prop = this, __proto__;");
tryItOut("default: ");
tryItOut("if((@foo.watch(\"__parent__\", [1,2,3,4].slice)))  else  if (((function  yield (true, prop) \"\" )())) 5.0000000000000000000000 else {throw false;; }");
tryItOut("M:with({__proto__: __count__ = constructor}){let /*\n*/constructor, prop = <x><y/></x>;yield; }");
tryItOut("__iterator__ = __parent__;");
tryItOut("throw this; const __parent__;\nlet __proto__, __count__;\n");
tryItOut("/*for..in*/for(const [prop, prop] = <y><z/></y> in [z1]) { }");
tryItOut("/*infloop*/for((typeof ((yield <><x><y/></x></>))); ( /x/g .__count__ setter= function () { export *; } ); <x><y/></x>\n /= (throw true)) yield <><x><y/></x></>;");
tryItOut("{let (constructor =  /x/g ) { __parent__ = new (gc()) } }");
tryItOut("L:while((__parent__.prop) && 0){if( /x/g ) { if (({a2:z2}))  else prototype: [1,,]} }\nreturn false;");
tryItOut("null;");
tryItOut("while((__proto__ =  '' ) && 0)var __iterator__, __iterator__ = *;");
tryItOut("{break ;continue ; }");
tryItOut("/*infloop*/while(({constructor: @foo}))/*for..in*/for([prop, __proto__] = (p={}, (p.z = null)()).unwatch(\"__parent__\") in *::*.eval(false)) {if(function ([y]) { }) { if (<x><y/></x>) ; else yield;}yield; }");
tryItOut("if((@foo %= __parent__)) yield; else  if (<x><y/></x>) {return;yield __parent__; }\nconst prop = __parent__, prototype;\n");
tryItOut("do  while((@foo) && 0); const constructor;");
tryItOut("/*infloop*/for(var __iterator__; (5.0000000000000000000000.__lookupSetter__(\"__proto__\")); eval(\"(eval(\\\"prototype = __proto__\\\", (<><x><y/></x></>.constructor = 1e-81)))\", * == <x><y/></x>)) {continue L;yield constructor; }");
tryItOut("/*infloop*/return;");
tryItOut("/*for..in*/for(const __count__ in (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>\n)) if(<><><x><y/></x></></>) { if (__parent__.(<><x><y/></x></>)) return;} else {}");
tryItOut("with({}) { with({}) {  }  } \n{Math.sin#1=[#1#]; }\n");
tryItOut("{L:if(window) export prop; else  if (*::*) var __count__ = @foo\n{yield;break M; } }");
tryItOut("/*infloop*/L:do {yield;{yield __noSuchMethod__; } } while((([,,z1] if (false)) = \nthis.*));");
tryItOut("/*infloop*/while(({})){}");
tryItOut("/*infloop*/M:for(prototype.constructor = x::__proto__ = this.__noSuchMethod__ =  \"\" .propertyIsEnumerable(\"__noSuchMethod__\"); (new Exception(null)).yoyo(<><x><y/></x></> >>> ); (x::__proto__ = (@foo = (function ([y]) { })()))) {switch(constructor.(this.__defineSetter__(\"__iterator__\", new Function))) { default: break; case 7: export *; }L: __parent__ }");
tryItOut("/*for..in*/for(let __count__ in (((1 for (x in [])))(__count__.(<x/>))))/*infloop*/while(<x><y/></x>.prop = <y><z/></y>){export *; }");
tryItOut("if((<x><y/></x>.(<x><\fy/></x>))) {yield <x><y/></x>;  } else {gc() }");
tryItOut("if((false[ '' ])) {__parent__ = 1e4, __count__ =  '' ;; } else ( '' );");
tryItOut("return; const __count__;");
tryItOut("\t/*for..in*/for(var set in *::*) break ;\nM:if(1e-81) { if (window) var __count__ = case 1: __parent__;} else (<><\fx><y/></x></>);\n");
tryItOut("with({}) for(let y in [5,6,7,8]) break ;");
tryItOut("do {export *;yield; } while((this -=  /x/g ) && 0);");
tryItOut("with({}) let(constructor, prop = #3={a:#3#}) ((function(){})());");
tryItOut("/*infloop*/for(const __noSuchMethod__; (<y><z/></y>)[this]; ()) return;");
tryItOut("with({constructor: \n(-0)})throw 0x99;");
tryItOut("{1.3; }");
tryItOut("if(Function()) {*::*;continue M; } else  if (((this.zzz.zzz) &= (new <><x><y/></x></>))) return 3.141592653589793; else {__noSuchMethod__ = , prototype; }\r");
tryItOut("if((+eval(\"(false >>= window); const __iterator__;\", prop = @foo.__noSuchMethod__))) {\nlet x::__proto__ = <><x><y/></x></>, constructor;\nif(<x><y/></x>\t.unwatch(\"prop\")) {} else  if (<x><y/></x>.valueOf(\"number\")) {} else (<x><y/></x>); } else  if (( '' .unwatch(\"__noSuchMethod__\"))) {{M:with({constructor: @foo})continue L;function (__noSuchMethod__) { yield; }  }let (({ prototype: __noSuchMethod__ }), __count__ = <x/>) { var __proto__, __noSuchMethod__; } }");
tryItOut("/*infloop*/while(__parent__ = [,,])({ prop: prototype })");
tryItOut("try { \fyield [15,16,17,18].map(([[]]).apply,  /x/g  || -1); } finally { let(constructor = null[<><x><y/>\t</x></>], __noSuchMethod__) ((function(){throw StopIteration;})()); } ");
tryItOut("export *\n");
tryItOut("if(__proto__.(({__iterator__: <x/>}))) <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(const prop = __count__.__proto__ getter= function (__proto__, prototype)constructor ? new ((this).watch)() : this; constructor.__noSuchMethod__ =  /x/g ; (({ set __count__ __parent__ (prototype, prop)\t { let __proto__ = [,,]; } ,  set __iterator__ __count__ (prop, ) { return [, __count__, __count__] = ({prop getter: function ()@foo, prototype:  /x/g  }) }  }))) {break L; }");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [])\n/*infloop*/for(let __noSuchMethod__; prop = <y><z/></y>(<><x><y/></x>\t</>); (__noSuchMethod__ = <y><z/></y> @ <x><y/></x>.@*)) /*for..in*/M:for(const __iterator__ in <y><z/></y>) {export *; }");
tryItOut("L:\tif([prototype, , constructor, , prop] =  /x/ ) {throw this;; } else {__noSuchMethod__\t__iterator__: true }");
tryItOut("/*for..in*/M:for([__count__, __noSuchMethod__] = undefined in #3={a:#3#}) {window; }");
tryItOut("L:if(__proto__|=[].unwatch(\"__count__\")) export constructor;");
tryItOut("/*infloop*/for(prototype++; (__count__ = __count__)(); (undefined ? this : null)) if(prop) { if (<x><y/></x>) {export *; }} else export *;");
tryItOut("L: /*for..in*/for([__proto__, constructor] = <><x><y/></x></>.constructor = {}.__lookupGetter__(\"__proto__\") in ({__noSuchMethod__: window })) {<><x><y/></x></>; }");
tryItOut("while((this) && 0)/*infloop*/for(const __proto__ = [,,z1]; __count__; constructor) {yield <><x><y/></x></>; } const __proto__;");
tryItOut("with({constructor: this})/*infloop*/do /*infloop*/do {(this);throw ; } while(*::*); while( /x/ );");
tryItOut("");
tryItOut("/*infloop*/for(let [] = Array(var each;) >>>=( /x/ ); (window)(<><x><y/></x></>) >>= constructor[<><  y/></x][<y><z/></y>.throw(<x/>)]; (__parent__ = prototype)) {/*for..in*/for([__count__, set] = [[]] in <y><z/></y>) {(constructor); }(this); }");
tryItOut("if(.2\n) { if (undefined) {var __proto__, prop; } else return;}");
tryItOut("if((({ __count__: __noSuchMethod__, __iterator__: ({ __count__: prop, constructor: __parent__ }) }) = this.__defineSetter__(\"__parent__\", eval))) {} else {constructor__parent__ }");
tryItOut("L: return;");
tryItOut("/*infloop*/for(let __proto__; (new Function)(); [,]) return ({a1:1});\nbreak ;\n");
tryItOut("if(#1# ? __count__ : 1e81 % <x/>) {yield <><x><y/></x></>;__noSuchMethod__ = *, __proto__ = [[1]] }");
tryItOut("with({}) try { this.zzz.zzz; } catch(__noSuchMethod__) { <x><y/></x>; } ");
tryItOut("with((new (Boolean())(undefined)));");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(window) { if (<x/>) let constructor, yield;} else {; }\ndo {set = <><x><y/></x></>; } while(((uneval(<x><y/></x>))) && 0);\n");
tryItOut("do new Function while(((prop = prop = __noSuchMethod__)) && 0);");
tryItOut("export *");
tryItOut("/*for..in*/for(var [getter, prop] = 4. in *::*) {; }");
tryItOut("if({}) {function () { yield * } try { let prop = [[1]]; } catch(__parent__ if (function(){*;})()) { return __iterator__; } catch(__noSuchMethod__ if (function(){yield;})()) { let constructor; } finally { undefined; }  } else  if (prototype) throw [1]; else throw <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(let [constructor, constructor] = __parent__ in  /x/ ) {*;throw @foo; }");
tryItOut("var __iterator__ = true, prototype; const __noSuchMethod__;");
tryItOut("let (__iterator__(__iterator__), __proto__) { var prototype, prop; }");
tryItOut("/*infloop*/for(const set; (\nundefined); (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((*::* & @foo)))) {gc() const prototype; }");
tryItOut("while(( \"\" ) && 0){gc()var __count__ = <x><y/></x>; }");
tryItOut("M:with({__noSuchMethod__: constructor = <x><y/></x>}){export *;(true); }");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("/*for..in*/for(const __parent__ in window) {let prototype, __parent__; }");
tryItOut("if(3 >> *::*) {/*infloop*/while(this)yield getter; } else {;return; }");
tryItOut("if((window for each (prop in (-0)))) { if (constructor = function::prototype;) with(*::*){continue M; } else  /x/g ;}");
tryItOut("L:\tif(( /x/g .__lookupSetter__(\"__iterator__\"))) {var __count__, __proto__ =  '' ; } else  if ((__count__ = this)) {gc()continue ; }");
tryItOut("yield @foo.throw(*::*).isPrototypeOf((yield ([15,16,17,18].sort((0.1).__defineSetter__, @foo))));");
tryItOut("for(let y in []);");
