tryItOut("/*infloop*/for(*::*; (function ([y]) { })().__parent__ = <x/>; (eval(\"[1,2,3,4].map\", <><x><y/></x></>).eval( '' .__proto__.isPrototypeOf(constructor = window).@foo))) {const __parent__;yield; }");
tryItOut("export __parent__\nif( /x/ ) yield <x><y/></x>; else  if ( \"\" ) {var constructor, __iterator__ = null;const __parent__ = false, constructor = delete; } else ");
tryItOut("{}");
tryItOut("/*infloop*/L:while((constructor = __iterator__))__iterator__;");
tryItOut("if(*) {return; }");
tryItOut("({});");
tryItOut("if(3/0) { if (window) {<x><y/></x>; } else {return; }}");
tryItOut("with({}) break L;");
tryItOut("M:with({__iterator__: <x/>}) const __noSuchMethod__;");
tryItOut("if(( /x/  += <><x><y/></x></>)) {break L; } else {[1,2,3,4].map__parent__ = <x><y/></x>, constructor; }");
tryItOut("let(prototype) ((function(){{}})());");
tryItOut("return 0;");
tryItOut("yield;");
tryItOut("L:if(arguments.@*) break M; else  if (([function::prototype].some(gc))) {yield; }");
tryItOut("/*infloop*/for(const prototype; prop == __parent__; new ((1 for (x in [])))(<x><y/></x>, <><x><y/></x></>) > __count__) M:with((<x><y/></x>.__lookupGetter__(\"__count__\")))gc()");
tryItOut("throw ++<x><y/></x>;\n__proto__ = __parent__;\n");
tryItOut("{/*infloop*/for(const prototype; (-0); <x><\ty/></x>) {const __noSuchMethod__, __iterator__;export prop; } }");
tryItOut("/*infloop*/M:for(prototype = arguments;  /x/g ; window) {return;this }");
tryItOut("\tvar __iterator__ = window, __proto__; const __parent__;");
tryItOut("while((-window) && 0)(3).__defineSetter__");
tryItOut("switch(__proto__) { case (/a/gi)((window)(), <y><z/></y>): throw @foo;break; case undefined ? <><x><y/></x></> : <x><y/></x>: break;  }");
tryItOut("gc()\n\n{return; }\n");
tryItOut("do {/*infloop*/L:for(__noSuchMethod__;  '' ; -1) return  /x/ ; } while((__proto__.function::__count__) && 0);");
tryItOut("if((this.__defineSetter__(\"__proto__\", __iterator__))) { if (<><><x><y/></x></></>) {{} }} else <><x><y/></x></>;");
tryItOut("{continue L;try { break M; } finally { yield <x><y/></x>; }  }");
tryItOut("/*infloop*/while(prop.__noSuchMethod__)M:switch(4.) { default: return  '' ;break;  }\n<bbb xmlns=\"(Math.pow).call(({__iterator__: window }), 0x99)\">yyy</bbb>");
tryItOut("for(let y in [5,6,7,8]) with({}) { let(__iterator__, O) { let(prop, __count__ = false) { (this).watch } ");
tryItOut("constructor");
tryItOut("<x/>;");
tryItOut("while((([this.zzz.zzz].map(function (__parent__, prop) { return (function ([y]) { })() } ))) && 0)export __parent__\n");
tryItOut("if(prototype.__parent__ = ) { if (<x><y/></x>.(true)) {{prop, __iterator__;gc() } }} else {if(<><x><y/></x></>) { if ( '' ) eval} else {yield;export __noSuchMethod__; }prop;\n;\n }");
tryItOut("constructor.__proto__ = __proto__;");
tryItOut("M:do return; while(('fafafa'.replace(/a/g, (() ? null.watch(\"constructor\", (new Function).apply) : @foo))) && 0);");
tryItOut("{while((__count__ = <><x><y/></x></>) && 0)(<x><y/></x>); }");
tryItOut("prototype = __count__;");
tryItOut("L:if((this >= <y><z/></y>)((false for (__noSuchMethod__ in undefined) for each (__iterator__ in <y><z/></y>)), new __parent__(__parent__, __parent__))) {export __noSuchMethod__; }");
tryItOut("if(false .@x:: <y><z/></y>) {yield <x\r><y/></x>; } else  if ((Math.sin( for (constructor in __parent__) if ( '' ))())) return ({a1:1});");
tryItOut("/*infloop*/for(({ __count__: [, ({ __iterator__: [__iterator__, try { {} } catch(constructor) { throw <y><z/></y>; } finally { return; } , each, ({ __count__: getter, __count__: ({ __parent__: __noSuchMethod__ }) }), ], function::__parent__: [__proto__] })] }) = true; ([__parent__, , prototype, ] = const __parent__;.throw((<><x><y/></x></> <= this))); this.__defineGetter__(\"__iterator__\", function(id) { return id }())) /*infloop*/for(false; null; .2) {yield; }");
tryItOut("if(<ccc:ddd></ccc:ddd>) {yield undefined;yield <><x><y/></x></>; } else  if (this &= this) {window;continue ; }");
tryItOut("/*infloop*/L:while(-0);");
tryItOut("while((<><>yyy\f</></>) && 0){let __count__; }");
tryItOut("if(<x><y/></x>.(<><x><y/></x></>)) {new Functionlet __iterator__, __count__; } else {break M; }");
tryItOut("let (__proto__ =  /* Comment */ /x/ , __iterator__ = [1]) { export *; }");
tryItOut("yield <x><y/></x>\nif(window) {constructor =  /x/ , __count__;<><x><y/></x></>; } else  if (<y><z/></y>) {export delete;(<><x><y/></x></>); } else {Math.pow }");
tryItOut("L: (window);");
tryItOut("export *;");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"return;\")))) /*infloop*/for(<y><z/></y>; <x/>; <x/>) {let __parent__ = null, __parent__; } else {throw true;{} }");
tryItOut("/*for..in*/M:for(let __proto__ = [undefined].sort(<><x><y/></x></>) in ((({}))[@foo])) let constructor = *;");
tryItOut("if([#1#].filter((-0).watch)) {return;var constructor = this, prop = 1.3; } else  if ((__parent__.propertyIsEnumerable(\"__iterator__\"))) {continue L; }");
tryItOut("{; }");
tryItOut("/*for..in*/for(__parent__ in <x/>) {;{} }");
tryItOut("if((prop.(<y><z/></y>)).eval(([11,12,13,14].filter))) {<x><y/></x>;let __iterator__, prop = __iterator__; } else {/*infloop*/while(window){let constructor;(1 for (x in [])) }continue M; }");
tryItOut("let (__parent__ = false, prop = undefined) { break ; }");
tryItOut("{M:if(__noSuchMethod__) { if ([]) let __count__ =  /x/ , __parent__; else {<><x><y/></x></>, __proto__; }}if((prop).__count__ .@ ((p={}, (p.z = (__iterator__ = <x><y/></x>))()))) {//h\nthrow <><x><y/></x></>; } else  if ((uneval(\n@foo))) {Math.pow } else {export __count__;{} } }");
tryItOut("/*for..in*/for(let __proto__ in (null.__count__)) {export *;/*infloop*/for(*; 1e+81; window) {throw ({}); } }");
tryItOut("{}");
tryItOut("while((<y><z/></y> .. prop) && 0)const prototype = <x/>;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) function(q) { return q; }");
tryItOut("return;");
tryItOut("throw __iterator__;");
tryItOut("const constructor; const constructor;");
tryItOut("yield; const function::prop;");
tryItOut("yield\n");
tryItOut("if(delete <x><y/></x>.@*) break M; else  if (([eval(\"*::*\", this) for each (__proto__ in 1e81) for (prototype in *)])) (this)\n else let (__proto__, __proto__) { continue L; }");
tryItOut("__count__ = __count__;");
tryItOut("L:do ({}).hasOwnProperty while((gc) && 0);");
tryItOut("let([] = (yield ( \"\"  !== <x><y/></x>))) ((function(){return;})());");
tryItOut("while((<x><y/></x>) && 0)return ({a2:z2});");
tryItOut("if( /x/  if (<x><y/></x>)) {({}).hasOwnProperty; } else  if (new window) var function::prototype = <x><y/></x>, prop; else {yield <><x><y/></x></>;throw -0; }");
tryItOut("/*for..in*/for(__iterator__.constructor in <><x><y/></x></>) throw  /x/ ;");
tryItOut("yield .2;");
tryItOut("/*for..in*/for(var __proto__ in ((function  __parent__ (prop, constructor) { yield @foo } )(<x/>))){yield; }");
tryItOut("{export __count__;L: {let __count__;prop; } }");
tryItOut("{if(delete __noSuchMethod__) { if (<x><y/></x> != <><x><y/></x></>) {var constructor; } else return;}gc() }");
tryItOut("export *;/*infloop*/for(arguments; __count__; ({a1:1})) {}");
tryItOut("with(this){return;/*infloop*/M:for(const \t__noSuchMethod__ = (yield  '' );  '' .isPrototypeOf(0x99); (new (({}))(null))) {gc() } }");
tryItOut("export *;/*infloop*/for(let __parent__ = *::*;  '' ; (function ([y]) { })()) {yield  '' ;(<x><y/></x>); }");
tryItOut("if(undefined) {; } else  if (window) {{} } else {gc()yield  /x/ ; }");
tryItOut("{{return; } }");
tryItOut("/*for..in*/M:for(let [] in ( /x/ )(<><x><y/></x></> <= {}, *)) (<><x><y/></x></>).watch");
tryItOut("{}");
tryItOut("for(let y in [5,6,7,8]) const __noSuchMethod__, __proto__ = false;");
tryItOut("/*for..in*/L:for(prototype in __count__.__parent__ setter= ((1 for (x in [])))) export *;\nyield @foo;\n");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("if( \"\" .propertyIsEnumerable(\"prop\")) with({prop: (yield  '' )}){yield; for (__parent__ in  /x/g ) for each (true in constructor) }");
tryItOut("(<y><z/></y>).watch\n");
tryItOut("this.zzz.zzz;");
tryItOut("return eval(\"\", constructor);");
tryItOut("let (__count__ = <x/>) { export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in -(__parent__.__iterator__ setter= eval)) {if(*::*) {return true;var constructor = window; } }");
tryItOut("M:while((this.__defineGetter__(\"__parent__\", 'haha'.split)) && 0)var prototype = false;");
tryItOut("let (constructor) { var constructor = <><x><y/></x></>;let prop = *::*, constructor = __parent__; }");
tryItOut("break M\n");
tryItOut("/*for..in*/for(let *.__count__ in <x><y/></x>) __iterator__;");
tryItOut("{1e4;\nyield {};\n }");
tryItOut("switch((* for (prototype in [,,z1]))) { case (*)[<><x><y/></x></>]: let __iterator__ = <x/>;break;  }if((#1=[#1#] .@x:: [1,,])) { if (/a/gi) const constructor, __iterator__ = <x><y/></x>;} else {if(this .. true.propertyIsEnumerable(\"__iterator__\")) {export *; } else  if ((({__iterator__:  '' ,  get prototype __iterator__ (__count__, __count__) { return ({a1:1}) }  }))) yield <><x><y/></x></>; else {/*for..in*/for(const __noSuchMethod__ in (((1e4).__defineSetter__)(<x><\ty/></x>))){yield <><x><y/></x></>;{} } } }");
tryItOut("{yield this;{} }");
tryItOut("/*for..in*/for(__iterator__ in ((function (constructor, __count__) { {const __iterator__; } } )(3))){/*for..in*/for(const __noSuchMethod__ =  /* Comment */ ''  in @foo) gc() }");
tryItOut("if([15,16,17,18].map((gc).call, (this.zzz.zzz))) do (<><x><y/></x></>); while((*::*) && 0); else  if (constructor.isPrototypeOf(null)) export *; else /*for..in*/for(prop in ((prototype)(window.@foo)))yield;");
tryItOut("L:with({__parent__: true != 0x99}){yield\nif(<y><z/></y>) { if (__parent__) export __proto__; else let __count__ = <><x><y/></x></>, __count__;} }");
tryItOut("L:if(1e81) continue ;\nreturn;\n const __iterator__; else  if ((let (__noSuchMethod__ = <x/>) <><x><y/></x></>)()) L:if(5.0000000000000000000000) { } else  if (this) ;");
tryItOut("M:if((false .@ this)) {var __parent__, __parent__ = prop; }");
tryItOut("return <x><y/></x>;\nreturn;\n");
tryItOut("if((<y><z/></y>)(<><x><y/></x></>, *)) return []; else {throw <x/>; }");
tryItOut("/*infloop*/M:for( '' ; prototype; <y><z/></y>) {return;; }");
tryItOut("if(<x/>) const __noSuchMethod__; else  if (window) export __count__; else {continue M;return  /x/ ; }");
tryItOut("{yield;\nreturn;\n }");
tryItOut("/*for..in*/for(const __parent__ in this) let __count__ = (getter.(true)), constructor;");
tryItOut("/*for..in*/L:for(var [constructor, __proto__] = new ((( /* Comment */null) ? () : ({__count__: window, __parent__:  /x/g  })))() ? 0x99 : <x/>\n in (.__iterator__)) {/*infloop*/do gc() while(*);/*infloop*/L:for(({\r__count__: 1e-81}); (new Math.pow(constructor).unwatch(\"prototype\")); ((<><x><y/></x></>)(undefined\t).@*)) {__iterator__ } }");
tryItOut("return __proto__;");
tryItOut("/*for..in*/for(var [prop, __parent__] = null in __parent__.constructor = __noSuchMethod__) { '' ;const prop; }");
tryItOut("__parent__ = __proto__;");
tryItOut("/*infloop*/M:while(( /x/ )[__count__].yoyo((constructor.__noSuchMethod__ =  \"\" ))){return (1 for (x in [])); }");
tryItOut("L:switch((__noSuchMethod__.__parent__ = constructor.constructor)) { default: break; break;  }");
tryItOut("\n( /x/g ).__defineSetter__\n const __count__;");
tryItOut("with(prop)(undefined);");
tryItOut("/*infloop*/do /*for..in*/M:for(let [__proto__, __parent__] = 5.0000000000000000000000 %= function  __iterator__ (__noSuchMethod__)true() in this.__defineGetter__(\"__count__\", Function)) {var prop, __parent__ = ({a2:z2}); } while((<><x><y/></x></>.isPrototypeOf( /x/ )));");
tryItOut("/*infloop*/do return .2; while(<x><y/></x> == <y><z/></y>);");
tryItOut("/*for..in*/for([constructor, prototype] = <x/> in if(this) { if (__iterator__) {export *; }} else export *;) {export *;return true; }");
tryItOut("[]");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("this.zzz.zzz;");
tryItOut("do return <x><y/></x>; while(( /x/ ) && 0);");
tryItOut("while(( /x/ ) && 0)<y><z/></y>.throw(3/0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor.__parent__ in __parent__ = prototype.__proto__ = __count__ = <><x><y/></x></>) L:if( '' ) { if (({ })) let (__iterator__ = 0/0) { const constructor = null, __proto__ = false; } const function::function::__noSuchMethod__; else /*infloop*/for(let (__parent__, __proto__ =  /x/ )  \"\" ; __parent__.__proto__ = __proto__; <><x><y/></x></>) }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("L: continue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in *::*) {gc() }");
tryItOut("if([11,12,13,14].sort <<= prop = true\f) return <x/>;; else  if (constructor) yield *::* , <x><y/></x>; else {while((<x><y/></x>) && 0){return ({});let set, __count__ = 1e4; }eval }");
tryItOut("with({__parent__: (Math.sin( '' ,  /x/g ))}){export __iterator__; }");
tryItOut("if(@foo) new Function else  if (@foo) var x::__proto__ = <><x><y/></x></>, __proto__;");
tryItOut("if(({__iterator__: \n__noSuchMethod__ })[<x><y/></x>.(<><x><y/></x></>)]) {{gc() }L: {L:with({prototype: constructor}){prototype = [], __parent__ = <x><y/></x>; } } } else  if (yield *) {yield; }");
tryItOut("/*for..in*/M:for(let __count__ = (prototype.*) in (gc)()) {gc()export <x><y/></x>\f; }");
tryItOut("/*infloop*/while(({ __count__: constructor, __proto__: __parent__ }) =  \"\"  &= <x/>)return  /x/ ;");
tryItOut("if(prototype|=__parent__) { if (__iterator__ = window) throw *;} else #1=[#1#];\f");
tryItOut("if(5.0000000000000000000000) { if (@foo >>>=[,].hasOwnProperty(\"constructor\")) ;} else {export __proto__;break L; }");
tryItOut("if(<x/>) {throw <><x><y/></x></>; } else {yield window; }");
tryItOut("/*infloop*/while(@foo)function ()const __count__ = <><x><y/></x></>, __count__;");
tryItOut("/*for..in*/for(__proto__ in window) {export *; }");
tryItOut("let(({ prop: prop, __proto__: [] }) = (export constructor).eval(__parent__ = -0) += window.__defineGetter__(\"__proto__\", ((*::*).__defineSetter__).call)) { __parent__ = __parent__ = __iterator__;");
tryItOut("if(false) {__iterator__ = <><x><y/></x></>([1]); } else  if (@foo) {throw this; } else gc()");
tryItOut("if(false) ;");
tryItOut("continue M;");
tryItOut("let (__iterator__ = ( /x/ ++).unwatch(\"constructor\"), [] = [({ __count__: __proto__, prop: prop }), ] = __parent__ = set) { /*for..in*/for(var [x::__proto__, __iterator__] = <><x><y/></x></>.__iterator__ = * in <><x><y/></x></>) {var prop; } }");
tryItOut("if([z1]++) break ; else  if (\ntrue)  else let __count__;");
tryItOut("/*for..in*/for(var [__parent__, __count__] = yield in (new (1 for (x in []))([window].sort(gc), typeof  \"\" ))) {export *; }");
tryItOut("with({}) { with({}) { new Function }  } ");
tryItOut("throw this;");
tryItOut("M:with(window){with({__count__: <><x><y/></x></>}){throw #1#; }with({<x><y/></x>: <><x><y/></x></>})gc() }");
tryItOut("/*infloop*/for(const __proto__; ([ '' ]); <y><z/></y> | <><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", function  prototype () { yield this } )) {throw <y><z/></y>;export __noSuchMethod__; }");
tryItOut("with({}) with({}) __parent__ = constructor;");
tryItOut("/*infloop*/for(const ({ constructor: ({ __proto__: ({ __proto__: __count__ }), __parent__: [] }), constructor: __proto__ }) = ((function(y) { yield y; __proto__ =  \"\" ;; yield y; }).call)(<y><z/></y>, []); Object(); <><x><y/></x></> for (__proto__ in <x><y/></x>)) {export __parent__; }");
tryItOut("/*infloop*/for(const __iterator__; this.__defineGetter__(\"prototype\", Math.pow); [__proto__, __iterator__] = [, ]) if((\nprop)()) { if (new (delete ((<x/>)[ '' ]))()) } else {return; }");
tryItOut("if(new ((prop = ).apply).call((RegExp(<x\t><y/></x>,  /x/g )), )(let (__iterator__ = (constructor = (window)()), prototype = #3={a:#3#}) * | __parent__)) {with(<x><y/></x>);return; }");
tryItOut("this.zzz.zzz;");
tryItOut("with(<y><z/></y>)continue ;");
tryItOut("/*infloop*/M:while( /x/g );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <><x><y/></x></>) {continue ; }");
tryItOut("/*infloop*/for(\n<x><y/></x>; (true.watch(\"__noSuchMethod__\", this)); (delete ('fafafa'.replace(/a/g, ({}).hasOwnProperty)) .@ <bbb xmlns=\"([new (undefined)(<x/>, <><x><y\f/></x></>)])\"> </bbb>)) L: var __count__, prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((<><x><y/></x></>\n).watch(\"prop\", function  __proto__ (__iterator__, ) { return <><x><y/></x></> } ) in (*::*.prop)) {let __iterator__ = <x><y/></x>; }");
tryItOut("/*infloop*/for\n(__iterator__; ([15,16,17,18].sort(function  __parent__ (constructor)<x><y/></x>, eval(\"gc()\", <x/>))); (__proto__ = null.constructor.unwatch(\"prop\"))) {switch(constructor.prototype) { case yyy.([3/0]): /*infloop*/while(this){break L; }\fbreak; export *;break;  }/*infloop*/for(this;  instanceof ; G for each (__iterator__ in <y><z/></y>)) {export *;(<y><z/></y>); }return 033; }");
tryItOut("L:with({__parent__: false .. #1=[#1#]}){export prop;return; }");
tryItOut("__count__ = __parent__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in (new (*)(<><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", function () { yield constructor } ), [z1,,]))) export *;");
tryItOut("yield prop;");
tryItOut("/*infloop*/do (*::*); while(__proto__.__proto__ getter= <x/> <= this);");
tryItOut("if(__noSuchMethod__ = *.propertyIsEnumerable(\"__count__\")) { if (this.zzz.zzz) {if(1e+81) throw prop; else {; }continue L; }} else ");
tryItOut("while((<x><y/></x> + <x><y/></x>) && 0){let __parent__, __noSuchMethod__;(<><x><y/></x></>); }");
tryItOut("if((<x><y/></x> for (__parent__ in <><x><y/></x></>))) {-0;(<><x><y/></x></>); } else  if (<x><y/></x> | <y><z/></y>) (<><x><y/></x></>); else const __count__ = return;;");
tryItOut("/*infloop*/for([__parent__, ] = __proto__%= '' ; (<><x><y/></x></> + <!--yy-->); <><x><y/></x></>) {throw *::*; }");
tryItOut("continue M;");
tryItOut("throw (1e4.__defineGetter__(\"__iterator__\", <x><y/></x>));(<><x><y/></x></>);");
tryItOut("/*infloop*/while(__proto__){var prop, __noSuchMethod__ = false;return window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__.__proto__ in false) {let __noSuchMethod__ = __count__; }");
tryItOut("with({}) return\n");
tryItOut("{yield <y><z/></y>; }");
tryItOut("let (__proto__) { return <><x><y/></x></>; }");
tryItOut("{{} }");
tryItOut("/*for..in*/for(var [prop, prop] = <>new (<><x><y/></x></> %= <x><y/></x>)((this.__defineSetter__(\"__proto__\", ({}).__lookupGetter__)))</> in (<x><y/></x> @ 3 += (__proto__ = <><x><y/></x></>))) switch(__iterator__) { case __iterator__.__defineSetter__(\"__proto__\", ):  }");
tryItOut("continue L\n");
tryItOut("do {gc()export *; } while((* += ({export prop;, __noSuchMethod__ getter: eval })) && 0);");
tryItOut("L: __proto__");
tryItOut("window\n\ngc()\nexport __proto__;");
tryItOut("/*infloop*/do {[z1,,]; } while((*::*) / window);");
tryItOut("export __proto__;");
tryItOut("(#1#);");
tryItOut("/*infloop*/do {} while(0/0.__iterator__);");
tryItOut("Math.sin");
tryItOut("yield this.__defineGetter__(\"constructor\", 1.3);\nreturn this;\n");
tryItOut("let prototype, constructor;");
tryItOut("prototype = __count__;");
tryItOut("with(*)/*infloop*/for(*::*; 1.3; \tthis) gc()");
tryItOut("try { throw __parent__; } catch(*::* if (function(){throw StopIteration;})()) { __iterator__ = __noSuchMethod__; } finally { return window; } continue L;");
tryItOut("/*infloop*/M:while(window){if(__iterator__.__count__ = null) {gc() } }");
tryItOut("return null;");
tryItOut("L: {/*infloop*/for(var prop =  \"\" .eval(this); constructor =  /x/g ; (1e4( /x/ , [[]]))) (4.);{{(<x/>);let __iterator__; }const prop = <y><z/></y>; } }");
tryItOut("if(<x><y/></x> /= true) { if (__proto__) {return prototype;export *; }} else {{} }");
tryItOut("/*infloop*/M:while(new (p={}, (p.z = <x/>)()).__lookupSetter__(\"__count__\")(true, (uneval(arguments)))){/*infloop*/for(let constructor =  '' ; yield <><x><y/></x></>; <x/>) yield; }");
tryItOut("with({prototype: 0}){'haha'.split }");
