tryItOut("/*infloop*/M:for(({ prop: __proto____proto__: prototype) = ([__proto__]) ? new Array([1,,]) : prop; undefined ? __noSuchMethod__ = <x/> : (<{__proto__}><x><y/></x><!--yy--></{__proto__}>.((__proto__ = <><x><y/></x></>))); [11,12,13,14].map) {return this; }");
tryItOut("/*infloop*/do {/*infloop*/do 1.3; while(<y><z/></y> >>>=(__count__ = <><x><y/></x></>)); } while( = ({prop: (<y><z/></y> .@ *::*.eval(new Object(null)))}));");
tryItOut("gc()");
tryItOut("/*infloop*/while(<x><y/></x>)export __iterator__;");
tryItOut("with({__proto__: <bbb xmlns=\"(<x><y/></x>.(1.3))\">yyy</bbb>.((/a/gi)())})throw (<x><y/></x> .@x::  /x/g ).propertyIsEnumerable(\"__noSuchMethod__\");");
tryItOut("with(new 033())yield;");
tryItOut("/*infloop*/for(var case 8: const __count__,  default ;break; break; break; case 4: (@foo);break;  = <x><y/></x>; <x/>; <x><y/></x>) {export __parent__;;gc() }");
tryItOut("/*infloop*/M:do {let constructorexport __iterator__; } while(1e-81 & __count__);");
tryItOut("let (prototype) { const let, __proto__; }");
tryItOut("if(<><x><y/></x></>) {} else  if (<x><y/></x>) export *;");
tryItOut("/*infloop*/M:for(let prototype = this;  '' ; <x/>) return;");
tryItOut("/*for..in*/for(const __iterator__.prototype in ((new Function)(new <>(yield ((yield window)))</>yyy))){throw this }");
tryItOut("/*infloop*/while(<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")){export *;{} }");
tryItOut("var __iterator__ = this;\nreturn  /x/ ;\n");
tryItOut("{}");
tryItOut("switch([, , , , __parent__]-=this.zzz.zzz) { case 9: return <x/>;break; if(true.watch(\"prototype\", <x><y/></x>).__lookupSetter__(\"__parent__\")) {return undefined;L:if(<y><z/></y>) {{}window; } else {return;const constructor; } } else  if (__parent__.((new Array([<><x><y/></x></> for each (__iterator__ in  '' )], 1e4)))) M:if(<x><y/></x>) <><x><y/></x></> else  if (function(id) { return id }) return; else {const __count__;return; }break;  }");
tryItOut("if(null === <><x><y/></x></>) {export __count__;{gc()constructor } } else {prototype;return [[1]]; }");
tryItOut("throw __count__;");
tryItOut("/*infloop*/for(var prop =  /x/ ;  /x/g ; <><x><y/></x></>) {__noSuchMethod__ = __count__;return; }");
tryItOut("/*for..in*/for(let __iterator__ in this.__defineSetter__(\"__count__\", (new Function(\"return;\")))) {\rreturn ({a1:1}); }");
tryItOut("/*infloop*/while(__proto__ =  /x/ )/*for..in*/for(let prop in (<x/> ? __proto__ : -0)) /*for..in*/for(let [prop, prop] = this in __parent__) throw <x/>;");
tryItOut("let (constructor, __iterator__ =  /x/ ) { var __iterator__ =  /x/ ; }");
tryItOut("get, prototype = 1.3\n");
tryItOut("/*infloop*/for(\n*::*.eval( '' ); ({ __iterator__: ({ prototype: __parent__ }) }) = eval(\"[true for (prototype in <x><y/></x>)]\", prototype[@foo]); __count__ = __count__.__defineSetter__(\"__count__\", (({prototype getter: function  __iterator__ (__count__) { return constructor } , __count__: this }) > {} - <y><z/></y>).watch)) {/*for..in*/for(var ({ __parent__: ({ function::prop: (prototype), __parent__: prop }) }) = <x/>.__defineSetter__(\"__noSuchMethod__\", new (Math.pow)(<x/>,  '' )) in new (<><x><y/></x></>)(<x><y/></x>)) {continue ;let __parent__ = try { for(let y in [5,6,7,8]) throw StopIteration; } catch(__count__) { __proto__ = prop; } ; }__count__ = false, __count__; }");
tryItOut("/*for..in*/for(let __parent__ in (((()).__defineSetter__)(__parent__ ? 0x99 : * % true.x::__parent__))){(([[1]].@foo));continue M; }");
tryItOut("if(new prop()) yield constructor;");
tryItOut("throw constructor;");
tryItOut("with({}) let(__count__, __parent__) { return;");
tryItOut("if(Iterator((this.hasOwnProperty(\"__noSuchMethod__\")))) { if (\rthis.__defineGetter__(\"constructor\", (({}).__lookupGetter__()))) {/*infloop*/do <y><z/></y>; while(undefined.propertyIsEnumerable(\"prop\"))\nprototype =  /x/g , __parent__;[__proto__, ], [, __proto__, prop, ] }} else {L:if((__proto__)) (function ([y]) { })(); else  if ((__noSuchMethod__) = prototype-=5.0000000000000000000000) /*infloop*/while(#3={a:#3#})var __noSuchMethod__;continue ; }");
tryItOut("if((-0)) *; else  if (__iterator__) {yield <y><z/></y>; }{}");
tryItOut("/*infloop*/for(const __parent__; ({ __noSuchMethod__(this): __proto__ }) = ([(0/0.eval(0x99))]); (null if (this)).call) /*for..in*/for(( /x/ )(__noSuchMethod__) in this) /*infloop*/while(<x><y/></x>){<><x><y/></\fx>\t</>let setter = __count__; }");
tryItOut("/*infloop*/for(const __count__; (constructor &= <><x><y/></x></>); (function(y) { yield y; continue M;; yield y; })( /x/g ,  \"\" )) {gc() }");
tryItOut("{eval }");
tryItOut("/*for..in*/for(__parent__ in [1,,]) {{return;export *; } const prop; }");
tryItOut("/*for..in*/for(const prop = (<><x><y/></x></>)(<><x><y/></x></>) in (__proto__) = *) {/*for..in*/for(var [prototype, prototype] = Iterator() in 0x99) __count__ = <x/>;return; }");
tryItOut("{;break L;continue ; }");
tryItOut("/*for..in*/for(var __proto__ = [({ constructor: constructor, __count__: ({ prototype: __count__ }) }), , ({}).hasOwnProperty] = #2=[prototype] in (__noSuchMethod__ = <zzz>this</zzz>)) {yield <x/>.eval(<x/>);/*for..in*/for(let (__count__) in ((Math.pow)(__proto__ = *::*)))export __noSuchMethod__; }");
tryItOut("/*infloop*/for(__proto__; this; #3={a:#3#}) return;");
tryItOut("return __parent__;");
tryItOut("{}\nvar __parent__ = prototype;");
tryItOut("constructor = constructor;");
tryItOut("<x><y/></x>yield <x><y/></x>;");
tryItOut("/*infloop*/for((new (1.3)()); ++new RegExp(prototype|=<x><y/></x>); (prop = __parent__)) yield 0.propertyIsEnumerable(\"prop\");");
tryItOut("/*infloop*/do {return;if(null) let prototype; else  if (this) {yield;const __iterator__; } else const __noSuchMethod__ = true, __parent__; } while((this++));");
tryItOut("/*for..in*/for(const prototype = <x/> >>>=*::*['__noSuchMethod__'] in ((({}).__lookupGetter__)((yield constructor =  /x/g )))){/*infloop*/for(({ __parent__: __noSuchMethod__ }) = <x><y/></x> ? window : <><x><y/></x></>; (0 /  /x/g ); (new Date(<x/> &=  \"\" , <y><z/></y>))) return window;throw constructor; }");
tryItOut("if(<><xxx {constructor}={(<y><z/></y>.eval(1e+81 |= *::*))} /></>) { if (setter\t = *) {gc()yield;\nconst __iterator__;\n } else /*infloop*/while(new ({})([z1], <><x><y/></x></>)){break ;const prototype = (-0); }}");
tryItOut("with(<x/>(*::*, <><x><y/></x></>).eval(__iterator__)){/*for..in*/for(var __parent__ in ((function  __iterator__ (get) { yield * } )(window))){export prop; }if(<>\t<x><y/></x></>) { if (<x/>) {export __iterator__;<><x><y/></x></>; } else {[z1];\tyield <><x><y/></x></>; }} }");
tryItOut("M:while((prop.prototype setter= /a/gi instanceof __parent__ = <x><y/></x>) && 0)return __proto__");
tryItOut("/*for..in*/for(var false['__count__'] in ((__count__)(this.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)))){continue L;{} }");
tryItOut("let(constructor) { let(x::__count__ = (constructor = false).throw(0.1), __iterator__) ((function(){for(let y in [5,6,7,8]) yield <><>prop = __count__</></>;})());");
tryItOut("continue L;");
tryItOut("if(*::*) return; else  if (<><x><y/></x></>) {}");
tryItOut("L: {} }");
tryItOut("/*for..in*/M:for(const prop in *) yield null;");
tryItOut("({ constructor: __parent__, __iterator__: [] }) = __proto__ = [((-this) if (window)) for (prototype in <><xxx>{constructor}</xxx></>) for each (__noSuchMethod__ in undefined.__count__ = )]");
tryItOut("L:if((0.1 if (__count__))) { if (({ __noSuchMethod__.__iterator__: prototype }) = <x><y/></x> &&  /x/ ) {yield <><x><y/></x></>;prop = <><x><y/></x>//h\n</> } else let (__proto__) { (0); }}");
tryItOut("do {} while((prototype) && 0);");
tryItOut("if(new gc(<x><y/></x>)) {var __noSuchMethod__ =  /x/g ; } else  if (const prototype, __count__ = function ([y]) { }) gc()");
tryItOut("L:if() const prop; else \t{{}yield; }");
tryItOut("M:if(.2) { if (window++.__noSuchMethod__ = this.__defineSetter__(\"__proto__\", (export *.__proto__).__defineSetter__)) {const __proto__, __iterator__;\nprototype;\ndo { } while(((<x/> if (@foo))) && 0); }} else {if(let (__count__ = *) *) { if ([window for (__iterator__ in window)]) {continue L;return 3/0; }} else throw 0/0.valueOf(\"number\"); }");
tryItOut(";");
tryItOut("constructor = __proto__;");
tryItOut("/*for..in*/for([__count__, prop] = (constructor) in ('fafafa'.replace(/a/g, function (__noSuchMethod__) { yield eval(\"this\", <x/>) } ))) L:with({prop: __noSuchMethod__ = 1.2e3--}){if(*::*) [,,z1]; else return undefined;continue L\nthrow __iterator__; }");
tryItOut("/*for..in*/M:for([__proto__, __proto__] = prototype.__count__ = prop in <x><y/></x>.( \"\" )) {;export *; }");
tryItOut("if(( /* Comment */<x/>)) { if (<bbb xmlns=\"(this.zzz.zzz)\"><ccc:ddd> </ccc:ddd></bbb>) {__proto__ = 0/0;continue ; } else __iterator__}");
tryItOut("{return;throw <x><y\t/></x>; }");
tryItOut("/*for..in*/for(let prototype = ('fafafa'.replace(/a/g, /a/gi)) in undefined) {yield <><x><y/></x></>;constructor; }");
tryItOut("L: {do {export __proto__;{} }\f while(((p={}, (p.z = .2)())) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in Function(__iterator__.__parent__)) /*infloop*/for(__count__; <><x><y/></x></>\n;  ''  -= null) {yield <x/>; }");
tryItOut("export *");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var window['each'] in ((<y><z/></y>.hasOwnProperty(\"prop\"\f)).@*)) {;yield <x><y/></x>; }");
tryItOut("do /*infloop*/do  while(0.1 | <><x><y/></x></>); while((window for (prototype in 5.0000000000000000000000)) && 0);");
tryItOut("with(<x/>)__proto__ = <x><y/></x>;");
tryItOut("if((({a1:1})\n .. true.prototype)) { if (((eval(\"<x><y/></x>.valueOf(\\\"number\\\")\", __iterator__) ^= 'fafafa'.replace(/a/g,  /x/g )) if ((prototype)))) if(prop .@ constructor) {export __parent__; } else {return;{} }}");
tryItOut("return;");
tryItOut("(1 for (x in []))return <><x><y/></x></>;");
tryItOut("let (({ prop: ({ constructor: __iterator__ }) }) = __proto__.throw(<><x><y/></x></>)) { /*for..in*/for(setter = (this >=  \"\" .__iterator__) in (false)) M:if(\f<x><y/></x> , 4.) switch(null) { case *::*:  } }");
tryItOut("{}");
tryItOut("continue M;");
tryItOut("/*infloop*/L:for(__noSuchMethod__ -= *; (prototype >>= @foo); (({ set constructor getter ()null }))) {yield; }");
tryItOut("switch((__noSuchMethod__, __count__)) { default: return {}; }\n");
tryItOut("L: {{if(<x><y/></x>) { if (<x/>) {yield; } else {new Function{} }} } }");
tryItOut("return");
tryItOut("/*infloop*/M:while( '' ){__parent__ = <><x><y/></x></>;return; }");
tryItOut("L: {}");
tryItOut("/*infloop*/for(const __parent__ = null;  /x/ ; <y><z/></y>) ");
tryItOut("/*infloop*/M:for(<x><y/></x>; <x/>; true) {return null;gc() }");
tryItOut("/*infloop*/L:do return; while( \"\" );");
tryItOut("if( /x/ ) {yield;const constructor, __noSuchMethod__; }");
tryItOut("");
tryItOut("prototype");
tryItOut("/*infloop*/for(const [] = constructor = this; ((<x/> & <><x><y/></x>\t</>).@*); new ((window.propertyIsEnumerable(\"__iterator__\")))(033.watch(\"prop\", ({}).hasOwnProperty), true).__defineGetter__(\"prop\", ( /* Comment */<><x><\ty/></x></>).__defineSetter__)) case 4: __count__ = __noSuchMethod__;break; ");
tryItOut("{return; }");
tryItOut("switch(<y><z/></y>) { case [(new <x><y/></x>())]: break; case 'fafafa'.replace(/a/g, function(y) { yield y; export __count__;; yield y; }): break;  }");
tryItOut("const function::__noSuchMethod__, constructor\n");
tryItOut("L:if(({a2:z2}) &&  /x/g .hasOwnProperty(\"prop\")) {yield window; } else ");
tryItOut("M:do Function while((<x><y/></x> < <><x><y/></x></>) && 0);");
tryItOut("/*infloop*/for((1.3.__lookupGetter__(\"prototype\")); ((new <><x><y/></x></>()).propertyIsEnumerable(\"__parent__\") ? [15,16,17,18].sort(function(y) { yield y; var __proto__, __count__;; yield y; }, let (constructor, __iterator__ = 3)  \"\" ) : ({ __iterator__: prototype }) = (#1=[#1#])[[]]); this) export *;");
tryItOut("if([,]) { if ((__iterator__.__noSuchMethod__ setter= Math.pow) === [[1]]) with({}) var function::prototype; else {do {M:if(eval(\"const __iterator__ = prototype;\", this)) { } else  if ({}) throw *; } while((( \"\"  !== <y><z/></y>)) && 0); }}");
tryItOut("/*infloop*/L:do return window; while(((new (*::*).call()))[(p={}, (p.z = <><x><y/></x></>)())]);");
tryItOut("M:with({prop: function(id) { return id }}){{} }");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] =  in <x/>) throw arguments;");
tryItOut("if([11,12,13,14].some) { if (((((function  __count__ (__proto__) { yield window } ).apply)(<x><y/></x>, this)).valueOf(\"number\"))) {gc(){{}({}).hasOwnProperty } }} else {try { yield <y><z/></y>; } finally { export __count__; }  '' ; }");
tryItOut("with({prototype: true})continue ;");
tryItOut("/*for..in*/for(let function::prototype = ({__iterator__ setter: new Function }) in window) {throw undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (constructor) in (new <y><z/></y>( /x/g , #1#))) {033continue L; }");
tryItOut("/*for..in*/for(const constructor = prototype = ((p={}, (p.z = <><x><y/></x></> |=  /x/  .@ new Math.pow(<><x><y/></x></>, <><x><y/></x></>))())) in *::*) {{} }");
tryItOut("var __iterator__ = <y><z/></y>, each = (-0);export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <><x><y/></x></>) return  \"\" \nM:with(let (__noSuchMethod__, constructor) <x/>){{} }");
tryItOut("{<x/>;(1 for (x in [])) }");
tryItOut("/*for..in*/for(const [__count__, prop] = (<x><y/></x> .@x::  '' ) in <x><y/></x>) <bbb xmlns=\"[z1,,]\"><ccc:ddd>yyy</ccc:ddd></bbb>");
tryItOut("L: export *;");
tryItOut("M:do {L: {( '' );{} } } while((( /* Comment */new 'fafafa'.replace(/a/g, <><x><y/></x></>)(<x><y/></x>.__parent__.@*, __proto__ =  /x/ ))) && 0);");
tryItOut("(<><x><y/></x></>.watch(\"function::__proto__\", this)) == (new ((function(q) { return q; }).apply)(<x/>))['__proto__'] = __count__;");
tryItOut("if(<x/>) gc() else  if (this.zzz.zzz) {gc()continue ; }");
tryItOut("return;");
tryItOut("with(__count__ >> <><x><y/></x></>){return *;return; }");
tryItOut("__noSuchMethod__.__defineSetter__(\"__parent__\", null)");
tryItOut("switch(__proto__ >>>=(<><x><y/></x></>() < true)[__iterator__.function::__noSuchMethod__ setter= Math.sin]) { case 8: break;  }");
tryItOut("if(((uneval(*::*)))) { if ((({ __noSuchMethod__: __noSuchMethod__, __parent__: ({ __proto__: __iterator__, __parent__: prop }) }) = new (function () { yield <y><z/></y> } )(prop))) {({}).hasOwnPropertyL: 'haha'.split }} else return;");
tryItOut("/*infloop*/for(let __noSuchMethod__; null; window) {function  __count__ (prop) {  }  }");
tryItOut("/*for..in*/for(const __iterator__ = (-1) in [z1]) {export prop;let __noSuchMethod__ =  /x/g , __noSuchMethod__ = <><x><y/></x></>; }\n");
tryItOut("L: yield this;");
tryItOut("/*infloop*/for(__iterator__; __proto__ = false; __noSuchMethod__ >>>=try { continue L; } catch(__proto__ if (function(){//h\nexport prototype;})()) { break M; } finally { export __iterator__; } ) {(1 for (x in [])) }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = this.__defineGetter__(\"yield\", (<><x><y/></x></>).__defineSetter__) ^= .2 in (this.hasOwnProperty(\"constructor\"))) {let __noSuchMethod__;/*infloop*/while(break ;){export prototype; } }");
tryItOut("M:if(<y><z/></y>) { if (window) {yield @foo; }} else {return; }");
tryItOut("{switch(<x/>.watch(\"__proto__\", ({}).hasOwnProperty).hasOwnProperty(\"__proto__\")) { case 3: case 7: const constructor, prop;case this.zzz.zzz: break; break;  } }");
tryItOut("return;");
tryItOut("return;");
tryItOut("/*infloop*/for(this.__defineGetter__(\"prop\", (new Function(\"return false;\"))); ((.2)(1.2e3)); (<><x><y/></x></> %= <><x><y/></x></> *= (-1))) (.2);");
tryItOut("/*infloop*/for(const __count__ = <><x><y/></x></>; <x><y/></x>; true) {continue ; }\nthrow  /* Comment */window;\n");
tryItOut("return;");
tryItOut("M:if(((uneval(window))).unwatch(\"__iterator__\")) {return <x><y/></x>; } else  if (<><bbb xmlns:ccc=\"true.isPrototypeOf(this)\"><ccc:eee></ccc:eee></bbb></>) {var __count__ = constructor, constructor;function(q) { return q; } } else {gc() }");
tryItOut("do {export __iterator__;var constructor = this; } while((__iterator__) && 0);");
tryItOut("with({__proto__: (<x><y/></x> ? <x><y/></x> : #1=[#1#])})var __count__;");
tryItOut("let(__count__, ({ __proto__: __proto__ })) ((function(){let(__proto__ = __parent__, __parent__) ((function(){__parent__ = __parent__;})());})());");
tryItOut("L: {export *;var <ccc:ddd></ccc:ddd> = 3.141592653589793, getter; }");
tryItOut("[1,2,3,4].slice\n");
tryItOut("throw StopIteration;");
tryItOut("with([,,z1]){export __noSuchMethod__; }");
tryItOut("{}\nwith(function(id) { return id })continue ; const __proto__;\n");
tryItOut("/*for..in*/L:for([function::__parent__, __noSuchMethod__] = null in  /x/g ) {yield;{} }\n");
tryItOut("if(let (constructor) 3/0) {gc() }");
tryItOut("/*infloop*/do let (prop) {  } while(<><bbb xmlns:ccc=\"(Function)((uneval(new RangeError([[1]]))))\"><ccc:eee></ccc:eee></bbb>\t</>);");
tryItOut("let (constructor, __parent__) { while((<<x><y/></x\t></>) && 0){yield;(prop); } }");
tryItOut("/*infloop*/L:do ; while((yield __proto__|=[[]] && 0/0));");
tryItOut("let ([__count__, __iterator__, __proto__, set, ], __iterator__) { /*for..in*/for(var prototype in ((({}).hasOwnProperty)(('fafafa'.replace(/a/g, eval)))))yield; }");
tryItOut("L: Math.pow");
tryItOut("if(*) { if (<><x><y/></x></>) {return;\f; } else {throw <y><z/></y>; }}");
tryItOut("/*infloop*/M:for(((@foo >=  /x/g ) ^ new window(window)); ([11,12,13,14].sort if (<x><y/></x>)); (__count__ = (-0) @ (prop = *))) export __count__;");
tryItOut("/*for..in*/for(let [, , ({a1:1}).prop] in ((undefined ? <><x><y/></x></> : *)(__count__ = (window > <x><y/></x>)))){L:if((prototype = <x><y/></x>)) return  '' ; else  if ([11,12,13,14]./*\n*/some)  else throw 5.0000000000000000000000;const __count__ = *::* && window, __noSuchMethod__; }");
tryItOut("return;");
tryItOut("/*for..in*/for(__parent__ = null & 3 in true) __proto__, __proto__ = *::*;");
tryItOut("{<y><z/></y>; } const \t__noSuchMethod__;");
tryItOut("if(([this])) {return;break M; } else  if (.2) {let __noSuchMethod__ = null; } else let __iterator__, __count__;");
tryItOut("let (({ __parent__: __iterator__, __parent__: __parent__ })) { export __parent__; }");
tryItOut("/*infloop*/do  while((* ^ *).throw((@foo)[__count__]));");
tryItOut("M:if(<x><y/></x>.eval(function(id) { return id })) { if (__proto__.__noSuchMethod__ getter= (new Function(\"__noSuchMethod__ = <x><y/></x>;\"))) {export *;export *; }} else (new Function(\"gc()\"))");
tryItOut("switch(this.__defineSetter__(\"__proto__\", (1 for (x in [])))) { default: export __iterator__\n/*for..in*/L:for(let __iterator__ in ((Math.pow)(<><x><y/></x></>))){export __count__; } }");
tryItOut("/*infloop*/for(({ constructor: ({ prototype: [], prop: [, ] }) }) = [(yield (<x><y/></x>)[ '' ]) for each (__iterator__ in prop.__iterator__ getter= /a/gi) if (1.3)]; 3; (yield *::*;[ /x/ ])) {/*for..in*/for(var __iterator__ = * in 3.141592653589793) {let __proto__ = <x><y/></x>, __parent__;export constructor; }yield; }");
tryItOut("-3/0 += <x><y/></x> .@ ( \"\" (3/0)) = __proto__;");
tryItOut("with({prototype: 0/0.isPrototypeOf(function::__count__)}){yield __noSuchMethod__; }");
tryItOut("L: export *;");
tryItOut("if((__parent__ = __noSuchMethod__)) {({}); } else {prop, prototype; }");
tryItOut("if(constructor) {__count__ = <x><y/></x>;continue ; } else  if (__count__) continue ; else \n");
tryItOut("gc()\n\n");
tryItOut("with({}) yield this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in [ /x/g  for (( \"\" )([,,]) in @foo) if (true)]) /*for..in*/for([__proto__, __count__] = <><x><y/></x></> in 0x99) return;");
tryItOut("/*infloop*/while(new new Function((constructor = true))){let (constructor, __parent__) { continue L; }switch(window) { case <x><y/></x>: break;  } }");
tryItOut("L: { }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(constructor = false in (eval(\"(*::*.*)\", gc())).hasOwnProperty(\"__proto__\")) /*for..in*/for(let __iterator__ in this) export *; const __parent__;");
tryItOut("/*infloop*/L:while(this.unwatch(\"__proto__\")){this;function(q) { return q; } }");
tryItOut("if(<xxx>{prop}</xxx>.(window.eval(this.yoyo(<><x><y/></x></>))) .@*:: ((uneval(#1=[#1#])))) return else {yield <x/>; }");
tryItOut("throw StopIteration;");
tryItOut("with({__iterator__: (\r[ /x/  %=  /x/g ].*)}){constructor;__proto__ = ({__noSuchMethod__: <><x><y/></x></> }); }");
tryItOut("{/*for..in*/for(\t[__count__, __count__] = ({__noSuchMethod__: <x><y/></x>}) in <x><y/></x>) (@foo); }");
tryItOut("if(new (__proto__.__count__ = null).__defineSetter__(<y><z/></y>)\n) {/*for..in*/for(var __iterator__ = <bbb xmlns=\"*\"><x><y/></x><ccc:ddd></ccc:ddd></bbb> in __count__) yield;/*for..in*//* nogeckoex bug 349964 */ for  each(var yield in null) ; }");
tryItOut("L: for(let y in []);");
tryItOut("/*for..in*/M:for(let prop = let (__noSuchMethod__ = __proto__ =  /x/g , []) <><ccc:ddd>yyy</ccc:ddd></> in (!<><x><y/></x></>)) L:with(__noSuchMethod__ = <x><y/></x>);");
tryItOut("/*infloop*/for(const __parent__;  \"\" .valueOf(\"number\"); ([(__proto__.__count__ getter= function(q) { return q; })[(@foo[<x><y/></x>])]].map(function(y) { yield y; {<><xxx {getter}={(__iterator__.isPrototypeOf( \"\" ) <= window)} /></>yield <><x><y/></x></>; }; yield y; }))) yield [1,,];");
tryItOut("throw __parent__;");
tryItOut("if(null) return prop; else throw <x><y/></x>;");
tryItOut(";continue M;");
tryItOut("let (__proto__ = @foo, __count__ = false) { let __parent__ = 1e81, prototype = [,,z1];yield try { throw <x/>; } catch(__count__ if this) { (<y><z/></y>); } finally { (<x/>); } ; }");
tryItOut("with({__proto__: ({__count__: ({a1:1}) }).unwatch(\"prototype\")})/*infloop*/for(let __noSuchMethod__; <xxx {__parent__}={[[]]} />.(new 4.()); delete.constructor = <><x><y/></x></> *= ([11,12,13,14].sort)) {return;var constructor = <x><y/></x>, __parent__ = <x/>; }");
tryItOut("if(null) { if (window) {new Function } else gc()}");
tryItOut("M:do new Function while((<><x><y/></x></>) && 0);");
tryItOut("M:switch((false.valueOf(\"number\"))) { case [15,16,17,18].sort(new Function, prop): export \n*;export *break;  }");
tryItOut("L:if((++window)) {var __iterator__ = 3; } else  if (window)  else {; }");
tryItOut("{with({__iterator__: /a/gi()})throw <y><z/></y>;{const __noSuchMethod__ = *, __iterator__ =  \"\" ;/*infloop*/for(<x/>; [,]; ({})) let __parent__ = prototype, __noSuchMethod__; } }");
tryItOut("/*for..in*/M:for(const __count__ = (<x><y/></x>.hasOwnProperty(\"__iterator__\") & ({ prototype: ({ prop: __proto__ }), constructor: ({ get: [, , prop], __noSuchMethod__: [__noSuchMethod__, __iterator__, constructor] }) }) = <y><z/></y>.valueOf(\"number\")) in ([__proto__, , __iterator__, __proto__] = ++(__count__ = this)).yoyo((__count__+=[*].map(/a/gi))(let (/*\n*/constructor = null, __count__ =  '' )  /* Comment */*::*))) {/*infloop*/do switch(.2) { default: export //h\n*;break; var __proto__, __iterator__; } while(\nwindow); }");
tryItOut("with({__proto__: 1e+81 for each (__iterator__ in window)}){export function::prototype;yield -0; }");
tryItOut("let prop\n");
tryItOut("do switch\t((!prototype)) { case Boolean(__proto__):  \"\" ;break;  }\n while((()) && 0);");
tryItOut("\nreturn\n\n");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__(__iterator__) in  /* Comment */({constructor: __noSuchMethod__ })) {1e81;(true); }");
tryItOut("/*infloop*/for(<y><z/></y> ^ 5.0000000000000000000000; (__parent__.__parent__ = *); window) {return; }\n");
tryItOut("try { /*return -3/0.@*.isPrototypeOf(\t<><x><y/></x></>); } catch(prototype) { throw StopIteration; } ");
