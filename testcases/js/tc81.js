tryItOut("let (__count__, constructor) { return 0/0\r\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop.__parent__ in arguments) return this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <x/> in __parent__.__parent__ getter= new Function) let __noSuchMethod__;");
tryItOut("with(constructor = []){yield;/*infloop*/for(<><x><y/></x></>; *; window) {1.3;{} } }");
tryItOut("{with(@foo[undefined])yield;if( /x/g ) {yield *::*;let <><x><y/>\r</x></> = false, prototype = -1; } }");
tryItOut("L:do yield *::*; while((1e-81--.*) && 0);");
tryItOut("return\n");
tryItOut("if(eval(\"break L\", <x/>)) { if ('fafafa'.replace(/a/g, *)) export __proto__;} else ;");
tryItOut("L: __iterator__, prototype;");
tryItOut("with({__proto__: <x><y/></x>}){export __noSuchMethod__; }");
tryItOut("M:while((((yield  /x/g .hasOwnProperty(\"__proto__\")).valueOf(\"number\"))) && 0){{}break M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for \t each(prop in constructor) throw <y><z/></y>;");
tryItOut("gc()return false; const constructor;");
tryItOut("if(prototype =  /x/ ) export *; else  if (__count__ ? <x><y/></x> : null) {var __iterator__ = false; }");
tryItOut("return (({__parent__: <><x><y/></x>\f</>}));");
tryItOut("/*infloop*/for(var __parent__; null; @foo) {( '' ); }\n");
tryItOut("");
tryItOut("with({__count__: __parent__})throw undefined; const __iterator__;");
tryItOut("if( /x/ ) { if (0.1)  else {return;yield <x><y/></x>; }}");
tryItOut("<xxx>{constructor}</xxx>");
tryItOut("/*infloop*/for(<><x><y/></x></>; window; <><x><y/></x></>) {gc() }");
tryItOut("{if(this.__defineSetter__(\"prop\", gc)) { if (__noSuchMethod__.__iterator__ =  /x/g .__lookupSetter__(\f\"constructor\") -= <x><y/></x>.throw(<x><y/></x>) / ({__noSuchMethod__: false})) export prop;} else gc() const __parent__;/*infloop*/while(<y><z/></y>())__noSuchMethod__ =  /x/ , __parent__ = window }");
tryItOut("return;");
tryItOut("if(return <x><y/></x>) { if ((eval).call((5.0000000000000000000000 >>>=[z1,,]), ~(this ? window : null), #3={a:#3#}()) <<=  /x/ ) while(((function ([y]) { })().__iterator__ = [1]) && 0){yield; }} else { /x/g ; }");
tryItOut("export constructor;throw true;");
tryItOut("for(let y in []);");
tryItOut("if([1,,]) { if ((yield <><x><y/></x></>)) {{gc()throw undefined; } }} else {if([,]) {return #1=[#1#]; } else  if (<y><z/></y>) throw [1]; }");
tryItOut("L:if((__proto__ = __count__)) { if ((constructor & -3/0)) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in  /x/g ) (<x/>); }} else {switch(((*))) { case 1: break; case __count__: yield undefined; } }");
tryItOut("/*infloop*/for(const [constructor, , , __parent__] = undefined; <y><z/></y> / true; __parent__ = this) ");
tryItOut("L:while(((({ set __parent__(__proto__, __proto__)prototype = __proto__ }))) && 0)export __noSuchMethod__;");
tryItOut("L:if('fafafa'.replace(/a/g, eval)) (<x/>); else {}\nM:with({prop: *::*})export *\n");
tryItOut("export __noSuchMethod__;");
tryItOut("return;");
tryItOut("return;");
tryItOut("const constructor = __proto__, prototype = null;");
tryItOut("let (constructor) { gc() }");
tryItOut("{if([[1]]) return; }");
tryItOut("M:if(prop.__count__ = this.yoyo(prop)) {(/a/gi).callgc() } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(prop, prototype\n)) {with({__count__: constructor})return; }");
tryItOut("let(({ __iterator__: __noSuchMethod__ }), __proto__ = (constructor = [,,]).prop = ([,,z1] .. <x><y/></x>)) ((function(){return;})());");
tryItOut("switch(1.3) { case 6: break;  }");
tryItOut("if((([[1]].yoyo(this))[(function(y) { yield y; yield;; yield y; })()])) { if (prop) yield __parent__;} else ;");
tryItOut("break L\n");
tryItOut("M:with(prototype){throw <x><y/></x>;window; }");
tryItOut("constructor;");
tryItOut("with({}) return ([null].some([1,2,3,4].map)) / (__count__ = *::*);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype(null) in <><x><y/></x></>) {export prop; }");
tryItOut("with({constructor: (__iterator__ = this)})/*for..in*/for(var __noSuchMethod__ in *::*) {export __noSuchMethod__;__iterator__, prototype = true }");
tryItOut("let (__iterator__, __noSuchMethod__) { {} }");
tryItOut("L:if(<x/>) {yield;; } else  if ((yield __noSuchMethod__.__iterator__ = <x><y/></x>.propertyIsEnumerable(\"prototype\"))) {; } else {}");
tryItOut("/*infloop*/for(const [] = (*--); <x><y/></x> = 0x99; [15,16,17,18].some(({}).__lookupGetter__, ((new (new Function)(window)) if (<y><z/></y>)))) {{}(<x><y/></x>); }");
tryItOut("L:with(__noSuchMethod__ = [, try { export *; } finally { __parent__; } ]){with([1,,])if((this.zzz.zzz)) { if ((<><x><y/></x></>)) return; else {return; }}return *; }");
tryItOut("if((let (__iterator__ = true, prop = <><x><y/></x></>) 0.1)[({ set __parent__()__noSuchMethod__ = -1 })]) with(5.0000000000000000000000)function  __noSuchMethod__ (prop) { return <x/> }  else  if ((({ get __count__(__parent__)<y><z/></y>, __parent__ setter: function(q) { return q; } })) for (1.2e3 in [z1,,])) {yield;break ; }");
tryItOut("L:do let __parent__ =  '' ; while((3) && 0);");
tryItOut("while((+<y><z/></y>.__lookupGetter__(\"__iterator__\")) && 0)return __noSuchMethod__;");
tryItOut("if(__count__) __iterator__; const constructor;");
tryItOut("/*infloop*/while(try { this.zzz.zzz; } finally { with({}) { try { throw  { return <><x><y/></x></>.__count__.__defineSetter__(\"__proto__\", yield  /x/g ) } ; } finally { this.zzz.zzz; }  }  } ){continue M; }");
tryItOut("prop = prototype;");
tryItOut("try { for(let y in []); } catch(prop) { return ({__noSuchMethod__ getter: function () { yield </*\n*/>try { prototype; } catch(__parent__ if {}) { {} } catch(prop) { let __iterator__, __iterator__; } finally { export prototype; } </> }  }); } finally { return <x/>.__defineGetter__(\"__count__\", ({}).hasOwnProperty) &= (<x/> :: <><x><y/></x></>); } ");
tryItOut("let (({ __iterator__: [({ __noSuchMethod__: __iterator__ }), ({ __count__: __iterator__, __noSuchMethod__: [] })] }) = (__proto__ = window .@ <y><z/></y>.watch(\"constructor\", prototype).propertyIsEnumerable(\"__iterator__\"))) { switch((<x/>.__defineSetter__(\"__iterator__\", this)).hasOwnProperty(\"__count__\")) { case  /* Comment */(({}).hasOwnProperty).call\f(<><x><y/></x></>): L:if(prototype) export *; else  if ((uneval([[]]))) __noSuchMethod__, __proto__ else (-1);break; case 1: yield;const __parent__ = constructor, __iterator__ = <><x><y/></x></>;break; default: gc()let function::__count__ = <x><y/></x>, __parent__ = this; } }");
tryItOut("with({}) yield ;");
tryItOut("with({}) { return; } ");
tryItOut("continue ;/*for..in*/for(prototype =  /* Comment */<y><z/></y>.__noSuchMethod__ in <x/>) export *;");
tryItOut("L: ((-0))");
tryItOut("/*for..in*/for(let prototype in ((({}).__lookupGetter__)((eval).call(, this)))){continue L; }");
tryItOut("/*infloop*/for(__noSuchMethod__; <x><y/></x>; ) {break M; }");
tryItOut("/*for..in*/for(\t[prop, __parent__] = __parent__.__proto__ setter= /a/gi in (prototype.__noSuchMethod__ = ((yield <x><y/></x>)).__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map))) {let(__proto__) { let(constructor = <x/>) { return <><x><y/></x></>; }");
tryItOut("/*infloop*/for(3['prototype'] = ([(undefined for (this in __iterator__)) for each (prop in *::* + <x><y/></x>) for each (constructor in __iterator__) for (__count__ in .2)]); __iterator__.((this.throw(*))); constructor.__parent__) /*for..in*/for(let [__iterator__, __count__] = window in this.propertyIsEnumerable(\"__parent__\")) ");
tryItOut("M:if([11,12,13,14].sort) {/*infloop*/while(window){constructor, prop = <y><z/></y>;let __proto__; } } else gc()");
tryItOut("/*infloop*/for(const __count__; <y><z/></y>; __parent__) {break M; }");
tryItOut("{}\nif((null((__noSuchMethod__ = window)))) \n else  if ((__parent__ = ({__iterator__: <><x><y/></x></>}))) {while((*::*) && 0)export *;with(4.){var __noSuchMethod__ = *, __iterator__;; } }\n");
tryItOut("");
tryItOut("/*infloop*/M:for(var [({ __parent__: prototype }), ({ __count__: \t__parent__, prototype: __iterator__ }), , ({ __parent__: __iterator__, __parent__: \f({ prop: [] }) }), ] = ([<><x><y/></x></>].some(*::*)) == (*::* || <><x><y/></x></>); RangeError(delete eval(\"this\", undefined) in ([,].__defineGetter__(\"__noSuchMethod__\", Function))); 'fafafa'.replace(/a/g, Math.pow)) {prop = <x><y/></x>; }");
tryItOut("/*infloop*/M:do throw constructor; while([([11,12,13,14].filter)].map((eval).apply));");
tryItOut("");
tryItOut("try { let(__noSuchMethod__) { throw prototype; } catch(prototype) { for(let y in []); } finally { throw prototype; } ");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = __parent__.prop = window in ('fafafa'.replace(/a/g, [1,2,3,4].slice))) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.__count__ in (this.zzz.zzz)) {/*infloop*/while(null){new Function } }");
tryItOut("throw \nwith({__parent__: \nundefined/})false;<xxx>{constructor}</xxx> ");
tryItOut("M\r:if( \"\" .__lookupSetter__(\"prop\")) while((this) && 0){(this);throw  /x/ ; } else  if (((gc).call(this, constructor, __parent__)\n)) {return;yield; }");
tryItOut("return -0;{}\n");
tryItOut("/*infloop*/while(__iterator__.constructor = new function  __noSuchMethod__ (__count__) { break ; } ()){5.0000000000000000000000;throw (null--); }");
tryItOut("prototype = prop;");
tryItOut("L: {return [1]; }");
tryItOut("/*infloop*/for(<x><y/></x>; @foo; *::*) break ;");
tryItOut("if((new Object(#1#))) (prop); const __parent__; else  if (__noSuchMethod__) {var prototype = 0; }");
tryItOut("{( \"\" );return window; }");
tryItOut("/*for..in*/for(let __count__ = Number(<x><y/></x>, 1e4) in *::* ? [z1,,] : true) {throw __proto__;/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <><x><y/></x></>) export __count__; }");
tryItOut("/*for..in*/for(var __proto__ = [,,z1] in <x><y/></x>) {return 1.2e3;export prototype; }\n__count__ = this, constructor = <><x><y/></x></>;\n");
tryItOut("with({__count__: @foo})break ;");
tryItOut("");
tryItOut("prop = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (\nfalse ^= false)(<> </>) in __noSuchMethod__) return this");
tryItOut("let (__proto__, prop = undefined) { yield; }");
tryItOut("with({prototype: <x><y//*\n*/></x>})return <><x><y/></x></>;");
tryItOut("{export __noSuchMethod__; }");
tryItOut("/*infloop*/do const [] = Z, default: L: (<y><z/></y>);break; case 6: break; case 3: return;break; ; while(__iterator__-= \"\" );");
tryItOut("while(( '' ) && 0){export *; }");
tryItOut("export __noSuchMethod__;");
tryItOut("var __noSuchMethod__;");
tryItOut("let (({ prototype: [prop, , , __proto__] })) { {let prop;throw <x><y/></x>; } } const __iterator__;");
tryItOut("/*infloop*/M:for(const 5.0000000000000000000000.__proto__ = (({a2:z2}) & <x><y/></x>); (__iterator__.__count__).yoyo(<x/>); <x><y/></x>.valueOf(\"number\")) var prop = undefined, __iterator__ =  '' ;");
tryItOut("var __count__ = false\n");
tryItOut("var constructor = __count__, function::constructor = arguments\n");
tryItOut("while((({ prop: __count__, prop: __proto__ }) = <><x><y/></x></>.watch(\"__iterator__\", *)) && 0)(undefined)");
tryItOut("(constructor.__parent__) = __count__;");
tryItOut("if(prototype) {function (prop, __count__)window; } else  if (( \"\"  ? -1 : *::*)(undefined.unwatch(\"__proto__\"))) \texport __parent__; else {constructor; }");
tryItOut("{}");
tryItOut("L:if(((1e+81 ? true : 0/0.constructor)[return window]\n) >= this.__defineGetter__(\"__iterator__\", function  prototype (__iterator__) { {} } )\n) { if ((yield <><x><y/></x></>)) {/*infloop*/for(<><x><y/></x></>; prototype = #1#; (p={}, (p.z = null)())) export * } else {function  __iterator__ (__parent__, __parent__)[,,]return; }}");
tryItOut("export *;");
tryItOut("while((__iterator__.((__noSuchMethod__ = <x/>))) && 0){L: __noSuchMethod__ = 1e81;return __count__;yield ({a1:1}); }");
tryItOut("{var prop =  /x/ ; }");
tryItOut("with({let: /*for..in*/for(const __parent__ in ((window)(*))){{} }})M:while((eval(\"return;\", [,])) && 0){}");
tryItOut("/*for..in*/for(let (<><x><y/></x></>.__iterator__) in ({ __noSuchMethod__: [], __parent__: [] }) = this.zzz.zzz) {{ } }");
tryItOut("do {return .2; } while((((yield prototype))) && 0);");
tryItOut("/*\n*/with({__proto__: ((uneval((((<><x><y/></x></>.prop))(<x/>.__defineGetter__(\"constructor\", [1,2,3,4].map))))))}){({ constructor: prop, constructor: __parent__ }) = yield [[]], prop = * }");
tryItOut("/*for..in*/for(const constructor in <><x><y/></x></>) {let __parent__ =  '' , prototype = 1e81; }");
tryItOut("/*for..in*/M:\nfor(__proto__ = 3.141592653589793 +  /x/g  in <x><y/></x>) {}");
tryItOut("while((prototype) && 0){return; }");
tryItOut("if((this.__defineSetter__(\"prop\", <y><z/></y>))) { if ([[]]++) {function(y) { yield y; var __parent__ = constructor, __iterator__;; yield y; }\t } else {export __count__; }}");
tryItOut("L: {switch((uneval(function::constructor |= 3/0))) { case 1: break; break;  }/*infloop*/while(false){const prototype =  \"\" ;; } }");
tryItOut("let __count__ = <><x><y/></x></>, __iterator__ = <x><y/></x>;");
tryItOut("/*for..in*/for(var [__parent__, prop] = (new (Function)(window, <y><z/></y>)) in prototype) export *;");
tryItOut("if(prop) let prop; else  if (prop = (\n{ __count__: __count__, __iterator__: __noSuchMethod__ })) ;");
tryItOut("throw StopIteration;");
tryItOut("if(this.__defineGetter__(\"__iterator__\", )) { if (({ __parent__: ({ __proto__: ({ __proto__: ({ prop: [], prototype: __parent__ }) }) }) }) = (new (@foo.hasOwnProperty(\"__proto__\").__defineGetter__(\"prototype\", false))(/*\n*/this.__defineSetter__(\"prop\", ({}).hasOwnProperty)))) {export *; }} else {M:while(((prop = __iterator__)) && 0){return 1e+81;/a/gi } }");
tryItOut("export __parent__;");
tryItOut("{with({}) { this.zzz.zzz; }  }");
tryItOut("let (__iterator__) { yield; }L: __noSuchMethod__");
tryItOut("/*infloop*/M:while(<><x><y/></x></>){let __proto__ = #3={a:#3#}; }");
tryItOut("with({__iterator__: ({__noSuchMethod__: constructor, constructor:  /x/  })}){/*infloop*/for(var __proto__ = *; <x><y/></x>; <><x><y/></x></>) {gc() } }");
tryItOut("{if( /x/ ) export *; }");
tryItOut("L: /*for..in*/for(const [__parent__, prop] = __iterator__|=((Math.pow).call(<><x><y/></x></>, )) in \r0.__defineSetter__(\"__noSuchMethod__\", gc)) yield;");
tryItOut("/*infloop*/M:for(let __count__; (__parent__.prototype); (new <\t><x><y/></x></>(prop, this))) export __proto__\f;");
tryItOut("export *;");
tryItOut("{function () /x/  }");
tryItOut("/*for..in*/for(__proto__ in this) {}");
tryItOut("switch(new (new Function)(undefined, <x/>)) { case 4:  }");
tryItOut("let(__proto__, __parent__) ((function(){this.zzz.zzz;})());");
tryItOut("/*infloop*/for(prop; __count__.__lookupGetter__(\"__count__\"); false.isPrototypeOf(__parent__)) {throw __iterator__;*; }");
tryItOut("let (__proto__, get) { if(5.0000000000000000000000) {yield; } }");
tryItOut("let (prototype = 3.141592653589793) { if((p={}, (p.z = ({}).__defineGetter__(\"__noSuchMethod__\", (1 for (x in []))))())) __iterator__ = *::*, set = *::*; else function  constructor () { return window }  }");
tryItOut("/*for..in*/for(<y><z/></y>.constructor in <bbb xmlns=\"[0]\"><ccc:ddd>yyy</ccc:ddd></bbb>) {continue M; }");
tryItOut("M:/*\n*/with({Date(<x/>, -1)['__noSuchMethod__']: [null]}){throw prototype; }");
tryItOut("1e+81;");
tryItOut("(*)");
tryItOut("throw StopIteration;");
tryItOut("if(return .@x:: (this.__defineSetter__(\"__noSuchMethod__\", (<x><y/></x>).__defineSetter__))) L:do {let __iterator__, __iterator__ = [z1]; } while(( /x/ ) && 0);");
tryItOut("L:with(constructor)\r");
tryItOut("/*for..in*/for(var __parent__ in ((new Function)((__noSuchMethod__) =  /x/g  >> 5.0000000000000000000000.unwatch(\"__parent__\")))){}\f");
tryItOut("/*for..in*/for(const null in <><x><y/></x></>) {<><x><y/></x></>;export <x><y/></x>; }");
tryItOut("export *; const __count__;");
tryItOut("L:while((1.3) && 0){let __noSuchMethod__, prototype; }\n");
tryItOut("prototype = prop;");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = (new ((new Function).call)(*)) in this) {#1#;yield @foo; }");
tryItOut("if(<{prop}></{prop}> ) if(null) {const prop;*; } else {/a/giexport *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (([false].sort(function(q) { return q; })))(true for (each in {})) in <x><y/></x>) {break M; }");
tryItOut("L: {do {break L; } while((<x/> instanceof <x><y/></x>) && 0); }");
tryItOut("if((({__noSuchMethod__: @foo ? <x><y/></x> : __proto__ })).__defineGetter__(\"__iterator__\", eval)) {return; } else  if (#2=[__noSuchMethod__ = 'haha'.split] in (new Date(null .@*:: undefined))) {export *;export prototype;\nlet __proto__, __noSuchMethod__;\n } else {function(q) { return q; }/*for..in*/M:for(let [__noSuchMethod__, constructor] = (<><x><y/></x></>.__lookupGetter__(\"prototype\")) in __noSuchMethod__) gc() }");
tryItOut("[z1]\nthrow window;\ncontinue ;\n");
tryItOut("/*for..in*/L:for(__count__ in @foo) {<><x><y/></x></>; }");
tryItOut("L:if((this.zzz.zzz)) yield @foo;");
tryItOut("with(((<x/>).call(false, 1e4,  /x/ ) %= (__proto__.prototype))){throw 033;{return window; } }");
tryItOut("/*infloop*/for(([].__defineSetter__(\"constructor\", (new RegExp(*::*, true)))); (new (Math.pow)(null) >>> Boolean(*::*)); let prop, constructor = <x/>) with( /x/g  -= <x><y/></x>)/*infloop*/while(*){ /x/g ; }");
tryItOut("#1#;");
tryItOut("for(let y in [5,6,7,8]) try { with({}) { __noSuchMethod__ = setter; }  } catch(__noSuchMethod__) { throw StopIteration; } finally { throw __parent__; } ");
tryItOut("/*infloop*/for(__parent__; this; (__parent__.( /x/g )).watch(\"prop\", ({}).__lookupGetter__)) {export __iterator__;break ; }");
tryItOut("if(({})) { if ( /x/g ) var prop;} else return <><x><y/></x></>;");
tryItOut("/*infloop*/for(const __proto__; this.zzz.zzz; (Function).call( /x/ , <><x><y/></x></>, <><x><y/></x></>).__parent__ = <x/>.__lookupSetter__(\"get\")) {export __count__; }");
tryItOut("M:while((__noSuchMethod__ = undefined + false) && 0){throw true;prototype }");
tryItOut("{}");
tryItOut("/*infloop*/while(false)return \n0x99;");
tryItOut("var __count__ = false;");
tryItOut("switch(<><x><y/></x></>) { case __proto__: export __noSuchMethod__;break; yield;case 0: break; default: ([]);break; break; case undefined: break; case 1.2e3: export *;break; break; case <x/>: export __parent__;default: case 7: break; break; case 6: case  /x/ : yield @foo;case <x><y/></x>: case __proto__: yield; }");
tryItOut("return;");
tryItOut("if(<><x><y/></x></>.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)) this; else {yield ({a2:z2}); }");
tryItOut("/*for..in*/M:for(var __proto__ in ((({}).__lookupGetter__)(()))){const __iterator__ = [];gc() }");
tryItOut("M:while((this.__defineGetter__(\"prototype\", Math.pow)) && 0)return;");
tryItOut("let(__parent__ =  '' , __iterator__) ((function(){(this);})());");
tryItOut("/*infloop*/for(null; <y><z/></y>; <x/>) {{}yield; }");
tryItOut("if(033) {return;continue ; } else  if (constructor.prop getter= /a/gi) throw <x><y/></x>;");
tryItOut("/*for..in*/for(let __proto__ in #3={a:#3#}.__parent__) {{return this;return; } }");
tryItOut("/*for..in*/L:for(let <x><y/></x>.__iterator__ in ((new __proto__(<x><y/></x>, @foo))(__parent__ = <><//h\nxtry { return let (prototype = 1.3, __parent__ =  '' ) this; } catch(prop) { for(let y in [5,6,7,8]) return; } ></></x></>))){let prop;export __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each//h\n(prop in ((__parent__ =  '' ).@foo).yoyo(<y><z/></y>)) (__iterator__);");
tryItOut("if(prop++) {throw window;throw 0/0; } else {throw __proto__; }");
tryItOut("break L;");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("let (__iterator__ = ([15,16,17,18].sort(Math.sin, <y><z/></y> instanceof __iterator__)\n)) { 'haha'.split }");
tryItOut("{gc() }");
tryItOut("prop = __parent__;");
tryItOut("/*for..in*/M:for(let __iterator__ in ((/a/gi)( /* Comment */<!--yy-->\f.isPrototypeOf(new ({a2:z2}))))){*::*;(prop =  /x/g ) }");
tryItOut("__count__ = __count__;");
tryItOut("{{} }");
tryItOut("switch(__noSuchMethod__) { default: gc() }");
tryItOut("/*for..in*/for(var __noSuchMethod__(<x><y/></x>//h\n) in ((( /x/  /= ))('fafafa'.replace(/a/g, Math.pow)))){return;export *; }");
tryItOut("/*infloop*/for(var [__parent__, , , ] = ; let (__noSuchMethod__ = <x><y/></x>) <><x><y/></x></>; __iterator__ = 0) ;");
tryItOut("this.zzz.zzz;");
tryItOut("if(<xxx>{constructor}</xxx>\n) { if ( '' ) (window)} else {let constructor = prototype;yield -0; }");
tryItOut("M:if((function(q) { return q; })(arguments, ({ __noSuchMethod__: __noSuchMethod__, __proto__: prop }) = new (<><x>\t<y/></x></>)(<x><y/></x>))) { if ((new <y><z/></y>()) @  \"\" .@*) {} else /*infloop*/M:for(var (__noSuchMethod__) = window; this.zzz.zzz; prop-=[,]) if(__iterator__) {({}).__lookupGetter__function (__parent__, __noSuchMethod__) { export __proto__; }  } else  if (1.3) {yield 1e81;gc() }\n}");
tryItOut("yield;");
tryItOut("/*infloop*/for(const __iterator__ = ( /x/g .__parent__ = undefined); [<x/>]; (this %= <x><y/></x> === __count__.((this)[ \"\" ]))) while((__count__.__count__ getter= gc) && 0){(this); }");
