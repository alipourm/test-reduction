tryItOut("{L: {yield; }this; }");
tryItOut("{/*for..in*/M:for(let [constructor, prototype] = __proto__ = [<x><y/></x> for (prop in this)] in undefined) /*infloop*/M:do export *; while(this);if(<><x><y/></x></>) ; else  if (1.2e3) __iterator__ = null; else {constructor } }");
tryItOut("M:if((new (new (function(q) { return q; })(([] = [<x><y/></x>])))(!__parent__\n)\r.__defineSetter__(\"__parent__\", function (__noSuchMethod__, __iterator__) { break L; } ))) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in new (<x/>)(__count__)) (__parent__.__iterator__\f = (constructor.watch(\"prototype\", function (__count__, prototype) { export __noSuchMethod__; } ) * prop = .2))");
tryItOut("with({}) { yield window; } ");
tryItOut("{L: __parent__gc() }");
tryItOut("L: switch(<zzz>(function ([y]) { })()</zzz>) { default: break; {}break; case 3: break; return function ([y]) { };break;  }");
tryItOut("try { \rwith({}) with({}) { with({}) export __proto__; }  } catch(eval(\"[[]]\", __parent__.constructor).yoyo((String(this,  /x/g ).__proto__[<x/>.__parent__])) if (function(){this.zzz.zzz;})()) { this.zzz.zzz; } ");
tryItOut("let prototype = undefined, this");
tryItOut("{/*infloop*/for(var __noSuchMethod__; <x/>; true) constructor;(({}).__lookupGetter__).apply\nbreak ; }");
tryItOut("return;");
tryItOut("/*infloop*/for(const ({ __iterator__: [] }); (new window(__iterator__)); return) if(v) var __count__ = <y><z/></y>, __proto__ = window; else  if ( /x/  << #1#) (*::*);");
tryItOut("switch( '' .isPrototypeOf(false)) { case 7: break;  }\n");
tryItOut("{break L; }");
tryItOut("this.zzz.zzz;");
tryItOut("let (setter) { continue M; }");
tryItOut("__parent__ = __iterator__;");
tryItOut("if(yield ( /* Comment */.2)) { if (this.__defineGetter__(\"__parent__\", function  constructor (__count__) { return <x/> } )) {continue ; } else {let (__proto__ = <x><y/></x>, __parent__ = <><x><y/></x></>)  \"\" ; }}");
tryItOut("/*for..in*/for(__noSuchMethod__ = (#1={} ? (({}).__lookupGetter__)(#3={a:#3#}, <><x><y/></x></>) : x::constructor = #3={a:#3#}) in null) yield\n/*infloop*/for(var __iterator__; *; *::*) {throw null;break ; }");
tryItOut("M:if(<><zzz>this.__defineSetter__(\"__noSuchMethod__\", 'haha'.split)</zzz></>) ; else {var __proto__ = null, __parent__ = <><x><y/></x></>;return  '' ; }");
tryItOut("if( '' ) {prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var this.function::__count__ in (constructor = <y><z/></y>)) {gc() }\t");
tryItOut("if(<><x><y/></x></>) {return;var __iterator__ = <><x><y/></x></>; } else  if (function(id) { return id }\f) throw -3/0; else {let __count__ = <y><z/></y>, constructor;return *; }");
tryItOut("export *;\n;\n");
tryItOut("if(({function::__noSuchMethod__: window.isPrototypeOf(undefined)}) .@*:: 0/0.unwatch(\"constructor\")) { if ((({__proto__: <y><z/></y>}) in ( '' ).isPrototypeOf((( '' )((-0)))))) {;/*for..in*//* nogeckoex bug 349964 */ for  each(let this['constructor'] in this) gc() }} else with({__noSuchMethod__: (yield 033 |= *::*)}){export __count__; }");
tryItOut("L:switch(({__count__: <y><z/></y> instanceof #3={a:#3#}})) { continue ; }");
tryItOut("if((prototype = prop.eval(@foo.@*))/*\n*/) { if (<x><y/></x>.(#1=[#1#])) Math.pow} else export constructor;");
tryItOut("continue L; const prototype;");
tryItOut("/*for..in*/for(var prototype = () in (__noSuchMethod__ = <x><y/></x>)) this\n;");
tryItOut("if(*) {} else {gc() }");
tryItOut("/*for..in*/for(prop.__iterator__ in <x><y/></x>) {return *; }");
tryItOut("if((#0=({__parent__: *::*}) === this).*) /*for..in*/for(var constructor in (([1,2,3,4].map)(prototype)))gc else switch(({ set __iterator__() { __noSuchMethod__ = [[1]], prop = <x/>; } , __proto__: true })) { case <><{__count__}><!--yy--></{__count__}></>: /*for..in*/for(const [constructor.__iterator__, __proto__] = <><x><y/></x></> in undefined) {return <x/>; }break;  }");
tryItOut("for(let y in [5,6,7,8]) yield gc(Math.pow, <x><y/></x>);");
tryItOut("yield this.__defineSetter__(\"__iterator__\", [,]);");
tryItOut("with({}) let(*::*) { yield __proto__;");
tryItOut("try { let(__parent__) { __count__ = __parent__; } catch(__proto__) { let(__parent__ = (__proto__.__lookupGetter__(\"__iterator__\"))) { this.zzz.zzz; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in (yield this)) {{} }");
tryItOut("M:while((this.zzz.zzz) && 0)Math.sin/*for..in*/for(__parent__ in ((gc)(<y><z/></y>.*)))M:if([11,12,13,14].sort) while((__count__) && 0)<x><y/></x>; const __count__; else  if ((new (\n__noSuchMethod__)(<y><z/></y>.throw( /x/g ))) for each (constructor in false.constructor) for each (__noSuchMethod__ in <x><y/></x>) for each (constructor in *::*) for each (__iterator__ in <x><y/></x>)) gc()");
tryItOut("/*infloop*/while(__iterator__ | -__count__)if(* >> <><x><y/></x></>) { if ((\n<x/>)[prop if ( '' )\r]) {gc()return; } else continue L;}");
tryItOut("M:switch(prototype = prop = __count__%=export __proto__;) { case <y><z/></y>: if( /x/g ) export __parent__; else  if (this) {let __proto__ = [z1,,], constructor;gc() }\t else const __count__;{}break; default: case 5: break; yield <x/>; }");
tryItOut("/*infloop*/do throw <x/>; while((((/a/gi)())));");
tryItOut("do ; while((#1# !== window) && 0);yield");
tryItOut("/*for..in*/for(__iterator__ in (((__parent__.__iterator__ = .2(__iterator__) < (-1) .@x:: [z1] << *::*.hasOwnProperty(\"__proto__\")).watch)(@foo in <><x><y/></x></>(0/0, __parent__)))){throw __proto__; }");
tryItOut("/*infloop*/for(var __iterator__; prop = __proto__; prototype = __count__) ");
tryItOut("if(Date(((p={}, (p.z =  '' )())), new (/a/gi)(this, true)) <= (<y><z/></y>)().unwatch(\"function::prop\")) { if (prop.__lookupSetter__(\"prototype\")) \f/*infloop*/for(let prop; __proto__; yield <x/>) {; } else continue ;}");
tryItOut("<x/>\nyield <x><\ny/></x>;\n");
tryItOut("if(<x><y/></x> ^ ({ get prop __iterator__ (__parent__)@foo, __noSuchMethod__:  /x/  })) function(y) { yield y; continue ;; yield y; } else  if (((function (prototype) { return true } )(-3/0, <y><z/></y>))) export constructor; else {; }");
tryItOut("/*infloop*/do let constructor = window, constructor = this\n while(*::* ^ window instanceof Error(<><x><y/></x></>));");
tryItOut("let (__count__) { yield; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/\tM:for(prop.__count__; new [,,]; __proto__ = prototype) var __proto__ = <x/>\ntry { return; } catch(__count__ if this) { constructor = __noSuchMethod__, __parent__; } catch(__proto__ if (function(){throw arguments;})()) { gc() } finally {  } ");
tryItOut("do /*for..in*/for(var [prototype, __parent__] = (this ?  /x/g  : <x><y/></x>) in new *::*) {export *; } while((this.zzz.zzz) && 0);");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = 1.3 in constructor = *::*) __noSuchMethod__");
tryItOut("/*infloop*/L:do yield; while(__noSuchMethod__.\f__parent__.__defineGetter__(\"__noSuchMethod__\",  /* Comment */this)); const prop;");
tryItOut("/*infloop*/L:for(__count__; <><bbb xmlns=\"<xxx {prop}={false} />\">yyy</bbb></>; [__parent__ = <x/> for (__count__ in  '' )]) export prototype;");
tryItOut("M:do /*infloop*/for(const prop; constructor; *::*) {yield __parent__;gc } while(((let (({ function::constructor: prop, prototype: __noSuchMethod__ }), __noSuchMethod__) 1e-81 + constructor) << (eval(\"if(*::*) {<><x><y/></x></>; } else {export __count__;continue ; }\", function ([y]) { }) != null)) && 0);");
tryItOut("let (__proto__ = [,,z1], __count__ = ( \"\" |=5.0000000000000000000000)) { if(<>prop = <y><z/></y> for (__iterator__ in [z1])</>) (constructor); }");
tryItOut("/*for..in*/for([prototype, __count__] = (\nnew function(y) { yield y; {}; yield y; }([,,])) in __iterator__) export __proto__;this.zzz.zzz;");
tryItOut("L: (<><x><y/></x></>);\f const __noSuchMethod__.__noSuchMethod__;");
tryItOut("/*for..in*/M:for(let (*)[#1=[#1#]]['prototype'] in (((1 for (x in [])))(@foo))){let __proto__ = [1,,], constructor; }");
tryItOut("export __proto__;");
tryItOut("this.zzz.zzz\nL: return this;");
tryItOut("try { for(let y in []); } finally { return <x/>; } ");
tryItOut("/*infloop*/for(let ({ prototype: ({ __count__: __proto__, __proto__: ({ prop: __proto__ }) }), __iterator__: constructor }) = ('fafafa'.replace(/a/g, Function))[#1=[window ? <><x><y/></x></> : *]]; (new ({ set constructor(__proto__)yyy })(new (1e81)(<><x><y/></x></>, [,]).__lookupSetter__(\"prototype\"), ((-0 if (<x><y/></x>)) += *.__noSuchMethod__))); this.__defineSetter__(\"constructor\", /a/gi)) with({}) { throw __iterator__; } ");
tryItOut("prop, __parent__ = <x><y/></x>;");
tryItOut("if('fafafa'.replace(/a/g, Function)) {let (__iterator__ = __parent__) { const __count__, __proto__ = [[]]; } }");
tryItOut("let (prop) { let prototype, __proto__ = __count__; }");
tryItOut("/*infloop*/while((\n({}) - <y><z/></y>)){/*infloop*/M:for(1.2e3;  /x/g ; [[1]]) yield; }");
tryItOut("switch(__iterator__) { case <><x><y/></x></>: gc()break; break; break; \flet __parent__;throw 3/0;break;  }\n");
tryItOut("/*for..in*/M:for(var __iterator__ in yield ({prototype: <y><z/></y>, __parent__: <><x><y/></x></> })) {L:with({let: ([z1,,])}){if(<><x><y/></x></>) {; } }L: {let __proto__ = <x/>; } }");
tryItOut("/*infloop*/while(function(id) { return id }){var __count__ = ;return; }");
tryItOut("/*infloop*/do (@foo); while((constructor.prototype = #1#));");
tryItOut("L: do {return __proto__; } while((case 8: ) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("M:while((<xxx>{__parent__}</xxx>.((__proto__.__noSuchMethod__ setter= <x><y/></x>))) && 0){export *; }");
tryItOut("function  __parent__ (__noSuchMethod__)<x><y/></x>\nexport __iterator__;\n");
tryItOut("break M\n");
tryItOut("switch(this.zzz.zzz.isPrototypeOf(undefined += *::*)) { default: if((#0=[this])) {let constructor, __parent__;[[]] } else  if (1.2e3\f) yield;; else \n__parent__, __parent__;case eval(\"setter;\", (({__iterator__: <x/>, constructor: #3={a:#3#} }))): break; throw 8;break; case 7: L: {constructor;; }break; export *; }\n");
tryItOut("if(<xxx {prototype}={@foo} />) (1e+81); else  if ((({__count__: eval(\"var __count__ = this;\", <y><z/></y>)}))) {let prototype = prototype;; } else {}");
tryItOut("try { with({}) { yield; }  } finally { prop = __parent__; } ");
tryItOut("if( /x/g ) yield; else  if (*) throw [,,z1];");
tryItOut("if(true)  /x/ \n else  if (((Iterator()) == +*).__defineGetter__(\"constructor\", function(y) { yield y; break L;; yield y; })) {if(new (({}).__lookupGetter__)()) { if ([11,12,13,14].sort) {let prop; } else throw <x/>;} } else {/*infloop*/while([z1])yield;/*for..in*/L:for(var @foo in []) {return null; } }");
tryItOut("with({__parent__: ((this.prop = window).prop)}){(new Function(\"return;\"))\n }");
tryItOut("{}");
tryItOut("({ prototype: [({ let: prototype }), , ({ __parent__: __iterator__, __proto__: ({ prototype: __noSuchMethod__ }) })], __noSuchMethod__: ({ constructor: ({ __proto__: constructor = prototype;, __proto__: ({ __noSuchMethod__: ({ prototype: constructor }), __iterator__: let (__parent__) { break ; } }) }), __parent__: ({ __parent__: ({ __iterator__: ({ prototype: ({ __proto__: prototype, prop: prop }) }) }) }) }) })");
tryItOut("for(let y in []);");
tryItOut("L: var prop;");
tryItOut("do ; while((constructor) && 0);");
tryItOut("/*for..in*/for(__parent__ = ((this @ ({a1:1})).__proto__) in ) {function(q) { return q; }/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in <y><z/></y>) return null; }");
tryItOut("switch(<y><z/></y>) { default: return; }");
tryItOut("let(constructor, prototype = \n(Exception( /x/g ))) { throw \r__iterator__;");
tryItOut("/*infloop*/M:do gc() while(<><x><y/></x></>);");
tryItOut("<x/>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in this) <y><z/></y>;");
tryItOut("/*infloop*/for(var constructor; (~this)\n; (__parent__.__parent__ =  /x/g  ^= null)) yield;");
tryItOut(" ");
tryItOut("\n");
tryItOut("if(({__proto__: [ for  for each (__proto__ in __proto__)] })) \tif([[]]) throw undefined; else  if (this)  /x/ ; else  if ([__parent__, ] = 'fafafa'.replace(/a/g, 'haha'.split)) var __parent__; else throw <><x><y/></x></>;");
tryItOut("export *; const prototype;");
tryItOut("try { throw __parent__; } __count__finally { let(__iterator__ = [(__noSuchMethod__.__proto__)].sort(this).__count__ = [[]](__count__)) ((function(){try { this.zzz.zzz; } catch(true if (uneval(<x/>))) { ; } })()); } ");
tryItOut("L: {const __iterator__, __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in (new function(q) { return q; }(false, this))) {<><x><y/></x></>; }");
tryItOut("export prototype;\nlet prototype = <x/>;\n");
tryItOut("do /*infloop*/do {/*for..in*/for(__proto__ in (('haha'.split)(window))){; } } while(); while((!window.@foo) && 0);");
tryItOut("/*for..in*/for([constructor, constructor] = __noSuchMethod__. '' ['prop'] in (__iterator__.__noSuchMethod__ \nsetter= [1,2,3,4].slice)) {export __parent__;<y><z/></y>; }");
tryItOut("if(([{} if (<x><y/></x>)])) yield; else {prototype = @foo, prop = <x><y/></x>; }");
tryItOut("if((false.__lookupGetter__(\"function::__noSuchMethod__\")), window) { if () const constructor; else __count__}");
tryItOut("if(1e81 instanceof  /x/ ) { } else  if (this) {yield <><x><y/>/></>; } else {;export prop; }");
tryItOut("/*for..in*/for((false)(#1=[#1#]) in (((1 for (x in [])))(({prop getter: ({}).hasOwnProperty }))))yield;");
tryItOut("throw  '' ;");
tryItOut("/*for..in*/for(const (__noSuchMethod__) in ((([1,2,3,4].map).apply)( '' )))if(<x><y/></x>) { if (undefined) {3.141592653589793;__iterator__ } else {yield; }}");
tryItOut("try { for(let y in [5,6,7,8]) throw (-0); } finally { for(let y in []); } ");
tryItOut("try { yield *; } catch(__proto__ if (*::*.hasOwnProperty(\"__parent__\")).prop) { constructor = __parent__; } catch(prototype) { try { {} } catch(__count__ if (function(){{}})()) { let \f__proto__ = this, prototype; } catch(__count__) { var constructor, __noSuchMethod__ = arguments; } finally { var __parent__ = constructor; }  } ");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) yield <><><x><y/></x></></>;");
tryItOut("{{}3/0; }\n");
tryItOut("switch(<y><z/></y>) { default:  }");
tryItOut("while((([*::*.propertyIsEnumerable(\"prototype\").yoyo(@foo).__defineGetter__(\"__iterator__\", Math.pow)])()) && 0)\nexport *;\n");
tryItOut("if(('haha'.split).call(@foo.prop = prototype.(window), (__proto__.throw(<><x><y/></x></>)))) {const __noSuchMethod__, prototype; } else var __proto__, prop;\nexport get;\n");
tryItOut("if(this.zzz.zzz) yield; const x::function::__count__\n else  if ((yield new Exception(( if (<x/>) = ({ constructor: constructor, prototype: prototype })), (__count__.prototype = <><x><y/></x></>)))) {continue  for each (prop in <><x><y/></x></>)  ;with({__count__: <x><y/></x> ? (-1) : false})prototype } else {/*for..in*/for(const __parent__ in (((1 for (x in [])))(#1#)))const prop = undefined, __proto__; }");
tryItOut("for(let y in [5,6,7,8]) yield (constructor.prop);");
tryItOut("/*for..in*/for(constructor = new RegExp(new ((({}).hasOwnProperty).apply)()) in __proto__ = (__noSuchMethod__.__count__ getter= ({}).__lookupGetter__)) {for(let y in []);/*for..in*/M:for(const __parent__ = <{__iterator__}>yyy</{__iterator__}> in *) export __noSuchMethod__; }");
tryItOut("if(<>this++</>) { if ([[1]].__defineGetter__(\"__noSuchMethod__\", Function)) {/*infloop*/for(let __iterator__;  /x/ ; undefined\f) continue L; } else /*infloop*/while(this.zzz.zzz)function () { yield __noSuchMethod__ } }");
tryItOut("with((__proto__)){/*for..in*/for(const constructor in  { yield true } : false) {export *;yield; } }");
tryItOut("if(yield) {let __count__; } else {return false; }");
tryItOut("export *\n");
tryItOut("{} const __parent__;");
tryItOut("if(<></>) __iterator__ = this, __noSuchMethod__ = __noSuchMethod__; else <><x><y/></x></>;");
tryItOut("export *;var __count__;");
tryItOut("/*for..in*/L:for(const [prototype, __noSuchMethod__] = __count__ in  \"\" ) {export prop;export __parent__; }");
tryItOut("L:if(('haha'.split .@*:: (this.__defineGetter__(\"__iterator__\", false)))) { if ((p={}, (p.z = <>;</>)())) {if(__proto__) { if (*::*) continue ; else {yield this; }} } else /*for..in*/for(const __count__ in ((Math.sin)(window)))(5.0000000000000000000000);}");
tryItOut("{let __count__, prop =  /x/g ;export constructor; }\n");
tryItOut("if( /* Comment */prop) {yield; }\f else  if (((<x><y/></x>.__parent__).isPrototypeOf((true++)))) yield null;");
tryItOut("try { export constructor; } catch(__iterator__) { var prop = window; } finally { const constructor; } ");
tryItOut("function(q) { return q; }");
tryItOut("/*infloop*/for(var [] = (eval(\"throw <x/>\", <x/>++)--); (__iterator__) = (<y><z/></y>.@foo); this.__defineSetter__(\"prototype\", /a/gi)) {M:if(<x/>) return <x/>; else  if (this) export prototype; }");
tryItOut("/*infloop*/do <><x><y/></x></> while(*);");
tryItOut("if( /x/g ) { if (<x/>.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)) ( /x/ );} else L\t:do {function(q) { return q; } } while((@foo -= *::*) && 0);");
tryItOut("let __count__, __noSuchMethod__;\nL: {}\n");
tryItOut("if([[]]) { if (<x/>) {__iterator__></>{} }} else {prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (__count__) in <x><y/></x>) break ");
tryItOut("for(let y in [])\n/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in <><x><y/></x></>) {__proto__ = [,,]; }");
tryItOut("{export *; }");
tryItOut("/*infloop*/for(; prototype = <x/>; __count__ = constructor) \tif([1]) export function::__noSuchMethod__;");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in null) {__noSuchMethod__ } } while((<><x><y/><\f/x></> ?  ''  : <x><y/></x>));");
tryItOut("try { this.zzz.zzz; } .");
tryItOut("/*infloop*/for(let  = (window); window; yield (((null).__defineSetter__)(<x><y/></x>))) export prototype");
tryItOut("/*for..in*/for(constructor = ([(false)]) in (eval(\"<><x><y/></x></>.unwatch(\\\"__count__\\\")\", (__proto__ = <><x><y/></x></> < function (\n) { throw null; } ( /x/ , 5.0000000000000000000000))))) {{export *;return; }yield; }");
tryItOut("{}");
tryItOut("L:if((prototype.prototype setter= function  prop () { yield *::*, <y><z/></y> } ) != new *) { if ( /* Comment */#1=[ /x/g ]) *::* else constructor = true;}");
tryItOut("with({constructor: (-0)}){break ;return __noSuchMethod__; }");
tryItOut("{(<x\t><y/></x>); }");
tryItOut("gc()\n");
tryItOut("while(((__proto__--)) && 0)\f{(({a1:1})); }");
tryItOut("yield\n/*infloop*/for(window; __noSuchMethod__; <x><y/></x>) continue \nexport *;");
tryItOut("do {const each = null, constructor = window; } while((new [1,2,3,4].map(({a2:z2}))) && 0)");
tryItOut("for(let y in []);");
tryItOut("L: if(.2) export *;");
tryItOut("switch((let (__noSuchMethod__, prototype) ({__noSuchMethod__: [z1,,]}) <<= __parent__.(constructor = __parent__))) { case 2: break; default: break; case 7: case #0=({x::prototype: __proto__}): gc()L:while((<x><y/></x>) && 0){{}export *; }break;  }");
tryItOut("L: {return .2;break M; }");
tryItOut("if(eval(\"[, , , prototype, ] = <><x><y/></x></>.valueOf(\\\"number\\\")\", [1].eval(function ([y]) { }))) { if ( \"\" .hasOwnProperty(\"prop\")) yield; else const __count__ = -0, __noSuchMethod__ = undefined;}");
tryItOut("do {export __parent__; } while((((yield new ({}).__lookupGetter__()) && (#1=[((*::*.__defineGetter__(\"__proto__\", __proto__))--)]))) && 0);");
tryItOut("/*infloop*/for(constructor-=prototype; (function(y) { yield y; (<><x><y/></x></>);; yield y; }); (1e-81.propertyIsEnumerable(\"__parent__\"))) L:do {yield;yield __proto__; } while((__iterator__) && 0);");
tryItOut("if(prototype) { if (\t__count__ = [15,16,17,18].map(eval, this.hasOwnProperty(\"__parent__\"))) /*for..in*/for(var constructor in (((window).__defineSetter__)(<><x><y/></x></>)))throw true;} else /*infloop*/for(let __parent__; *; <x><y/></x>) {gc() }");
tryItOut("M:do let (({ __iterator__: prop, prop: __noSuchMethod__ }), constructor) { let __iterator__ = null, __count__ = <><x><y/></x></>; } while((__count__.__iterator__ getter= [1,2,3,4].slice) && 0);");
tryItOut("while(((eval(\"1e+81\", [1]))) && 0)gc()");
tryItOut("if(throw (new *)) { if (({a1:1})) {throw <x/>;return\n }} else {const prop;const __noSuchMethod__; }");
tryItOut("/*infloop*/do {} while((p={}, (p.z = yield <><x><y/></x></>)()));");
tryItOut("do L: {continue L; } while((({prop: ('fafafa'.replace(/a/g, Math.sin)).propertyIsEnumerable(\"prop\")})) && 0);");
tryItOut("/*infloop*/for(const __proto__; (<><x><y/><\t/x></> @ <x><y/></x>); ( /x/g .__lookupGetter__(\"__proto__\"))) throw __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var let(__noSuchMethod__) ((function(){with({}) { __noSuchMethod__.prop = __count__; } })()); in Exception()) {var function::__iterator__ = @foo, prop;\n( '' );\n(#1#); const __iterator__; }");
tryItOut("/*infloop*/do break M; while((new ((-0))(<><x><y/></x></>)));");
tryItOut("/*for..in*/for(let prop in this) (<x/>);");
tryItOut("/*for..in*/\tfor(let prop([11,12,13,14].sort) in <x><y/></x>) /*infloop*/while( /x/g ){__iterator__, (function ([y]) { })() = __noSuchMethod__; }");
tryItOut("yield <x><y/></x>let(__noSuchMethod__ = __iterator__, __parent__) { yield;");
tryItOut("/*infloop*/for(var __proto__; ((({__proto__: *,  set prototype __parent__ (prop) { yield function(id) { return id } }  }))[<employee id=\"1\"><name>Joe</name><age>20</age></employee> >>> (@foo.eval(@foo))]); null) {}\n{}");
tryItOut(";");
tryItOut("L:if(o = #1=[#1#]) { if ((({__noSuchMethod__: <x><y/></x> }))) return @foo; else yield;}");
tryItOut("throw constructor;");
tryItOut("(eval).call");
tryItOut("/*infloop*/for(var constructor = <><x><y/></x></>; null; this) {function::try { yield; } finally { yield this; }  = false, __iterator__ = window;return  /x/g ; } const __proto__;");
tryItOut("({ __proto__: ({ prototype: __count__ }) }), __noSuchMethod__;\nif(function::__count__ = #1#) export *;\n");
tryItOut("if(delete *) { if (delete *::*) {L:switch(\nprop getter: Math.sin) { case window + <x/>++: yield; } } else /*infloop*/for(var prototype; 1e-81; <><x><y/></x></>) {export *; }}");
tryItOut("/*infloop*/L:for(__iterator__; (({ prop: ({ __count__: ({ __count__: (([15,16,17,18].some(function  __noSuchMethod__ (x::__parent__, prop) { yield  } , <x><y/></x>)).__proto__ = <x><y/></x>)\f(@foo\n) }) }) }));; (<x><y/></x>.__defineGetter__(\"set\", function (__iterator__) { yield <y><z/></y> } ))) {/*infloop*/for([[1]]; @foo; __noSuchMethod__) {} }");
tryItOut("if( '' ) break ; else  if (window ?  /x/g  : window++) {{var constructor = __iterator__; } }");
tryItOut("{if(window.__lookupGetter__(\"constructor\")) export __noSuchMethod__; else  if (( /* Comment */0/0)) {gc() } else {L:while(((p={}, (p.z = <><x><y/></x></>)())) && 0){break L; } }var ({ __iterator__: ({ __parent__:  \"\" , prototype: constructor }), constructor: <xxx {prop}={(\n<y><z/></y>)} /> }), [] = [1,,][this]; }");
tryItOut("/*for..in*/for(const __iterator__ = __iterator__ in [('haha'.split).call(__parent__,  /x/ , prop)].filter(Function)) /*for..in*/for(const __parent__ in <x/>) throw  { __noSuchMethod__ } ;");
tryItOut("/*for..in*/L:for(var [__count__, __parent__] = *::* in window) {return this;export *; }");
tryItOut("if(<><>yyy</></>) { if (((((<x><y/></x>)()))(q.__iterator__ setter= function (__count__, __parent__)<x><y/></x>))) {throw <><x><y/></x></>;this; }} else if(<x/>) {yield *;{} }");
tryItOut("let (constructor) {  }");
tryItOut("L:while((((<><x><y/></x></>)(1.2e3, <x><y/></x>)[0.1 += <x><y/></x>])) && 0){; }\n");
tryItOut("if(<x/>.yoyo(({}) for each (__count__ in \f<x><y/></x>))) __parent__: new (<><x><y/></x></> || function ([y]) { })(([<x/>.* if (<><x><y/></x></>)])) else  if (__parent__.__proto__ = [15,16,17,18].sort(function(y) { yield y; export *;; yield y; }, Date()).hasOwnProperty(\"__count__\")) ");
tryItOut("M:switch(<>__count__</>.(<x><y/></x> ?  ''  : <x><y/></x>)) { default: export *;case 5: break; case <y><z/></y> .@ undefined:  }");
tryItOut("/*for..in*/L:for(const __count__ in new (let (__noSuchMethod__) <x><y/></x>.watch(\"__iterator__\", function (__parent__) { yield prop } ))(, {}.watch(\"<><x><y/></x></>\", (__count__).watch))) let (prop, prototype = <x/>) { var prop, constructor =  '' ; }");
tryItOut("{{({}).__lookupGetter__{} } }");
tryItOut("if(((p={}, (p.z = <y><z/></y>)()))) { if (*::*.yoyo(<><x><y/></x></>)) [[]];} else {export prop;([,]); }");
tryItOut("4.\f;({ __proto__: [__noSuchMethod__, __iterator__, ({ constructor: ({ __iterator__: prop, prototype: function::prototype }) })] })");
tryItOut("[1,2,3,4].map\nreturn [1];");
tryItOut("continue M; const __count__;");
tryItOut("{yyy }");
