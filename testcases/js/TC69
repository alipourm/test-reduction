
tryItOut("/*infloop*/for(<bbb xmlns=\"[,]\"><x><y/></x><ccc:ddd></ccc:ddd></bbb>.valueOf\n(\"number\"); [11,12,13,14].some; *) {gc()__parent__ setter: [1,2,3,4].map }");
tryItOut("/*infloop*/L:for(var prototype = this.__defineSetter__(\"__noSuchMethod__\", __noSuchMethod__ = function ([y]) { }); ({ get __proto__(function::getter, __iterator__) { yield window } , __parent__: 0x99 }); constructor = prop) {}");
tryItOut("if(__noSuchMethod__) with({__iterator__: prototype = false}){(<x/>); } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {yield false %= <y><z/></y>; }");
tryItOut("{[[], , function::__parent__] = __noSuchMethod__; }");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = false in <x/>) export *;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(let [prop, __iterator__] = (return;--) in * ?  \"\"  : <y><z/></y>\n) {export constructor;/*for..in*/for(let [__proto__, prototype] =  /x/ -- in (p={}, (p.z = <\fx><y/></x>)())) {{throw true; } } }");
tryItOut("do {with(window){var __count__;{} } } while(([ /x/g --].yoyo(this.watch(\"prop\", function(y) { yield y; export *;; yield y; }))) && 0);");
tryItOut("if((<x><y/></x>.(this))) return; else  if (__count__.__noSuchMethod__) {/*infloop*/M:for(var __proto__; prototype; prop) {yield this; } } else __parent__;");
tryItOut("if(<y><z/></y>) /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x><y/></x>) gc()");
tryItOut("{/*for..in*/for(__iterator__ in (((new Function(\"constructor = *, constructor;\")))(-3/0 ^ constructor))){} }");
tryItOut("L:if((<x><y/></x>)()\n) with(<x/>)yield;");
tryItOut("/*for..in*/M:for(let __count__ = (uneval(constructor = window)) in ((prop = __parent__) .. window | 4.)) L: {prop = @foo;var prop =  /x/g , prop = true; }");
tryItOut("if(((uneval([]))))  else  if ((__parent__.prototype getter= function(y) { yield y; prop = false;; yield y; })) /*for..in*/M:for(const constructor in ((function  constructor (constructor) { gc() } )( \"\" ))){export *;yield; } else {const set, __count__; }");
tryItOut("if(prototype.prototype) ");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (function(id) { return id } ::  /x/g .__defineSetter__(\"__proto__\", Function)) in eval(\" /x/ \",  '' )) (<x/>).__defineSetter__");
tryItOut("switch(__noSuchMethod__ = <x><y/></x>) { case null for (__noSuchMethod__ in *): break; (new <x/>);break;  }/*infloop*/while(null){const __noSuchMethod__ =  /x/g ; }");
tryItOut("__iterator__");
tryItOut("{L:if( \"\" ) gc() else  if (window) {(*); } }");
tryItOut("with(<><x><y/></x></>)[__proto__, __count__, prop, prototype, __iterator__]");
tryItOut("undefined;");
tryItOut("L:if(false) const __iterator__ = undefined, __iterator__; else {export *;(<y><z/></y>); }");
tryItOut("switch( /x/g ) { default: const prop;throw 1e+81;break; case constructor.__proto__ = (prototype = this): break;  }");
tryItOut("if(<x><y/></x>) let __iterator__ = window; else  if (<y><z/></y>) {export *;break M; } else export __count__;");
tryItOut("constructor;");
tryItOut("{export __noSuchMethod__; }");
tryItOut("if( '' ) yield; else  if ((__proto__.constructor)) yield <x><y/></x>; else export *;");
tryItOut("L:do {continue ;/*infloop*/for(const constructor; __count__; __parent__) { } } while(((let (({ __iterator__: ({ __parent__setter, constructor  { yield; }  : __noSuchMethod__ }\r), constructor: __parent__ }) = new function ()true(<><x><y/></x></>)) (*.__iterator__).__lookupGetter__(\"__proto__\").prototype = ) &= ((void (<><x><y/></x></>++)) === (__parent__.(\fnew function(q) { return q; }())))) && 0);");
tryItOut("/*infloop*/for(__iterator__ = (__iterator__.__proto__ = __count__: <><x><y/></x></>); window\n; __proto__ = \n<><x><y/></x></>) {return; }\n");
tryItOut("while((({})) && 0)export __iterator__;\nL: {{}/*infloop*/while( /x/ ){let __parent__;break ; } }\n");
tryItOut("L:if([ /x/ ]) { if (*::* + (-1).*) {}} else export *");
tryItOut("/*infloop*/for(((<y><z/></y>)([1], <><x>(/<y/></x></>)); ((p={}, (p.z = 1e+81)())); String(<y><z/></y>)) {yield <><x><y/></x></>;var prop = 0/0, __iterator__; }");
tryItOut("if(true) {yield @foo;export *; } else  if (__iterator__) ( /x/ ); else {[]yield; }var __parent__;");
tryItOut("if(true) var __count__ = __count__, __count__ = true; else  if (window) var prop = <x><y/></x>, __count__");
tryItOut("/*infloop*/for(const constructor; ({prototype: (((this).__defineSetter__).call(3, )) });  /x/g ) {if((3/0.@foo)) {export __count__;const __proto__ = __proto__, __iterator__; } else  if (__noSuchMethod__ = [1,,]) {yield  ; } }");
tryItOut("/*infloop*/while(((gc)(.2 |= true, window @ window))){{let __parent__ = <x/>; } }/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in <x><y/></x>) {return @foo; }");
tryItOut("export *;");
tryItOut("let (__parent__, ({ prototype: constructor })) { /*infloop*/for(Error() >>= .@*; (uneval(-<><x><y/></x></>)); (undefined[<y><z/></y>])) {} }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const prototype in __noSuchMethod__) {export *;; }\n");
tryItOut("/*for..in*/for([constructor, __proto__] = * in *::*.throw(__noSuchMethod__) % (<><x><y/></x></> @ prop)) <x/>");
tryItOut("({ prop: ({ /*prop: [, , constructor, , ]  __count__: '__count__ }), prop: ({ ({ prop: __noSuchMethod__, prototype: *::* }): __noSuchMethod__ }) }), __count__ = (RegExp(__count__, <x><y/></x>))");
tryItOut("/*infloop*/for(__count__.__defineGetter__(\"__parent__\", Math.sin).yoyo((eval(\"\\fcontinue ;\", #3={a:#3#}))); [z1,,].__iterator__; __parent__ = constructor) {prototype = new (<><x><y/></x></>)(1e4, <x/>); }");
tryItOut("{export *; }");
tryItOut("with({__iterator__: <><x><y/></x></> ? <x><y/></x> : true}){yield <>\n<x><y/></x></>; }");
tryItOut("let (<> '' </>) { yield <><x><y/></x></>; }");
tryItOut("/*for..in*/L:\tfor(const [__iterator__, prop] = (-0) ? false : <x><y/></x> in <x><y/></x>) {var __noSuchMethod__; }");
tryItOut("throw prototype;");
tryItOut("while(((new [1,2,3,4].map(null))) && 0){gc() }");
tryItOut("{with({__noSuchMethod__: prototype = __count__})prototype = 033, __proto__ = @foo;\nlet constructor, __parent__ = <><x><y/></x></>;\n }");
tryItOut("/*infloop*/L:for(__parent__ = 1e81; #3={a:#3#}; this) {{break M;throw false; } }");
tryItOut("/*infloop*/for(function(id) { return id }; ; <y><z/></y>) var __iterator__, constructor = 1e+81;;");
tryItOut("if((__iterator__ = <x><y/></x>)) { if (let (__count__ = <x/>, __noSuchMethod__ = <x><y/></x>) true) } else {}");
tryItOut("/*for..in*/M:for(var [prototype, __count__] = <x/> |= this in 1e+81) {{}return; }");
tryItOut("/*infloop*/for(([({ __noSuchMethod__: ({ __proto__: prototype, __proto__: __iterator__ }) }), ({ __parent__: __iterator__ })] = <y><z/></y> >= true >>>=1e4); new Error(prop = prop, window); (yield false) | !<x><y/></x>) {/*infloop*/M:for(let __count__; @foo.eval(prototype.__noSuchMethod__); 1e+81 ? window : <y><z/></y> ||  /* Comment */null) {let(prototype = <><x><y/></x></>) ((function(){__iterator__ = constructor;})()); } }");
tryItOut("this.zzz.zzz;");
tryItOut("L: {/*for..in*/for(let function::__proto__ in ((eval)({}))): }");
tryItOut("prototypefunction (({}).hasOwnProperty, __parent__) { yield @foo } \n");
tryItOut("/*for..in*/for(prop in ((__count__)((window--))))var __parent__ = [11,12,13,14].some;");
tryItOut("M:if(( for (__proto__ in undefined).__defineGetter__(\"__iterator__\", {}))\t) { if (({prop: null})) return; else {let function::prop = null;return; }}");
tryItOut("export prototype");
tryItOut("let(__count__, ({ __proto__: __iterator__ }) = ((yield __iterator__)).throw(function ([y]) { }(<><x><y/></x></>))) { return (p={}, (p.z = [true].map(false))()).yoyo(([1].prop));");
tryItOut("/*for..in*/for(const [prop, prop] = (new function  __iterator__ (__proto__) { return __iterator__.__iterator__ } ()) in ((uneval( '' )).eval(true.isPrototypeOf(this)))()) ");
tryItOut("if(<zzz>this in *</zzz>) { if (<x/>.__lookupSetter__(\"constructor\")) L:if((3 - this)) { if (prototype = 1.3) {export *; }} else } else /*infloop*/L:for(var try { let prototype =  /x/g ; } catch(__parent__) { let __proto__ = this, prototype = <x><y/></x>; } finally { return null; }  = (-0); .2; <><x><y/></x></>) {return; }");
tryItOut("if(<x/>) { if (this) {var __count__ = true; }} else {return; }");
tryItOut("{throw  \"\" ; }");
tryItOut("{/*infloop*/do {return; } while((window\r / <><x><y/></x></>)); }");
tryItOut("/*infloop*/while(null){ }");
tryItOut("while(((__count__ = prototype >> (1e+81.@foo))) && 0)/*infloop*/do function (__noSuchMethod__)arguments while(<x/> % <><x><y/></x></>);");
tryItOut("(null);");
tryItOut("let function::__count__\t;");
tryItOut("L: const __iterator__;");
tryItOut(" { L:switch(<zzz>return null</zzz>) { default: export *; } } ");
tryItOut("if([[]]) { if (<x><y/></x>) yield <><x><y/></x></>;} else {throw function(id) { return id }; }\n");
tryItOut("/*infloop*/for(#1=<x><y/></x>; __proto__ = yield this; (Math.sin)\f(let (constructor = @foo) *::*)) {{}{return; } }");
tryItOut("/*infloop*/for((p={}, (p.z = __iterator__ && true)()); ({prop: true}); (<><x><y/></x></>)[ /x/ ]) {/*for..in*/for(const [__proto__, __count__] = #1# in window) {{} }{} }");
tryItOut("while((*::*) && 0){({ __iterator__: ({ __parent__: ({ prototype: __proto__, constructor: ({ prop: __parent__ }) }), prop: ({ prop: [] }) }), constructor: ({ prototype: 3['__parent__'], __noSuchMethod__: [, [, __iterator__], ({ __iterator__: __noSuchMethod__ })] }) }) }");
tryItOut("/*for..in*/for(const [constructor, __proto__] = (__proto__ = eval(\"continue L;\", <x>\t<y/></x>).@foo) in prototype) /*for..in*/for(const function::__proto__ in ((((new Function(\"{}\"))).apply)(({constructor:  '' ,  get constructor prototype (__proto__, __iterator__)<x><y/></x> }))))L:if(new (function(q) { return q; })()) return *::*; else  if (__noSuchMethod__) {export __iterator__; } else continue L;");
tryItOut("/*for..in*/for(var __proto__ = __noSuchMethod__ = null <<= [[1]].__defineGetter__(\"<x><y/></x>\", ((<x/>).watch).call) in 0x99) /*for..in*/for(let [__noSuchMethod__, constructor] = function(id) { return id } in <y><z/></y>) {; }");
tryItOut("L: {throw <x/>; }");
tryItOut("/*infloop*/M:while(yield undefined){export *; }");
tryItOut("if(({__proto__ getter: <y><z/></y>, __count__: __noSuchMethod__.__iterator__ getter= new Function }).__defineSetter__(\"prototype\", new Function)) {gc()\nconst __parent__ = null;while((*::*) && 0)__noSuchMethod__; } else {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in false.__parent__ = (__iterator__ = constructor)) {(<y><z/></y>)\ngc()/*infloop*/for(__proto__ = true.@*; void <><x><y/></x></>; yield <x><y/></x>) /*for..in*/for(let __parent__ in <y><z/></y>) {let constructor = [,], __proto__ = @foo;constructor } }");
tryItOut("with({prop: prop.yoyo(true)}){throw true;export __iterator__; }");
tryItOut("if(('fafafa'.replace(/a/g, (__parent__).__defineSetter__))) { if ((<><x><y/></x></>--)) {{} }} else break\t ;");
tryItOut("/*for..in*/for(prototype.constructor in ([15,16,17,18].filter(, window)) &= [11,12,13,14].filter ? (-0).__lookupSetter__(\"prop\") : (eval(\"__proto__;\", <><x><y/></x></>))) yield constructor.__count__ = 3.141592653589793;");
tryItOut("let (constructor) { ; }");
tryItOut("L:switch((Math.sin).call((new 'haha'.split(__iterator__, undefined)), (window).call(undefined, window, false))) { case 9: L:switch((yield ((p={}, (p.z = *::*)())))) { default: break; /*infloop*/for(each = 4..valueOf(\"number\"); null; (prototype = prototype)) <><x><y/></x></>;case 7: L: (@foo);break; case constructor: break; break;  }case 5: break; break; case __proto__.__count__ = constructor: \nexport *;break; default: {}\nexport *;\n//h\n }");
tryItOut("");
tryItOut("this.zzz.zzz");
tryItOut("return #1#;");
tryItOut("let(__proto__, prop) { throw window;");
tryItOut("throw __proto__;");
tryItOut("M:if((prototype.__count__ = yield this)//h\n) { if ((__parent__ instanceof *::*)) ({ __parent__: function::constructor, __iterator__: __parent__ })} else {return __proto__; }");
tryItOut("with({__iterator__: this.__defineSetter__(\"__parent__\", eval)}){0x99; }");
tryItOut("with({prototype: __proto__})for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("L: {{}prop = <x/>, true = <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in prototype) {}");
tryItOut("for(let y in [5,6,7,8]) let(prototype =  /x/g , __parent__ = @foo) ((function(){gc()})());");
tryItOut("/*for..in*/for(__parent__ in window) return <><x><y/></x></>;");
tryItOut("{continue ; const __count__;prop; } const constructor;");
tryItOut("/*infloop*/for(const ({ __count__: constructor, __parent__: __parent__ }) = ([*::*]); new (<><x><y/></x></>\f).__defineSetter__(); <x><y/></x>) return #1=[#1#];");
tryItOut("if(prop = false) { if ([,].propertyIsEnumerable(\"prop\")) throw <><x><y/></x></>; else {return 1e+81;let __count__, __iterator__ = *::*; }}");
tryItOut("if(false) {let prototype = window, prop; } else  if (4.) {const __noSuchMethod__;continue ; } else ;");
tryItOut("with({}) for(let y in []);");
tryItOut("L:if( /x/ ) { if (prototype+=[]) continue M;} else {break M;{} }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("throw __parent__;");
tryItOut("try { for(let y in []); } catch(__proto__ if *::*) { try { var __noSuchMethod__; } catch(__proto__ if <x/>.yoyo(this)) { this.zzz.zzz; } catch(__parent__) { try { export *; } finally { continue ; }  } finally { gc()return __noSuchMethod__; }  } ");
tryItOut("/*for..in*/for(const __parent__ in -1 << this) {/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in #1=({constructor: <><x><y/></x></>})) /*infloop*/for(const __count__; [1]; <x><y/></x>) {var prototype = prototype, prop; } }");
tryItOut("/*infloop*/do  ;{/*infloop*/for(((<x/>.hasOwnProperty(\"prototype\")).__lookupSetter__(\"prop\")); <><x><y/></x><\t/>.hasOwnProperty(\"__proto__\"); prototype+=true if (1e81)) ; } while(__proto__ .. prototype);");
tryItOut("throw prop;");
tryItOut("/*infloop*/do throw <x><y/></x>; while(({ get constructor() { ; }  }));");
tryItOut("let (__parent__ = __proto__.__parent__ setter= (Math.sin).apply, constructor) { //h\nyield <x/>\t\n }");
tryItOut("L:with({default: /*infloop*/for(let __proto__ = <zzz>1e+81</zzz>; prototype.__iterator__ setter= Math.sin; yield #1=[#1#]) const __noSuchMethod__;<x><y/></x>;return __iterator__;<x><y/></x>;case (-3/0( /x/g , <x><y/></x>) > (constructor = __iterator__)): break ;break; : <><y><z/></y></>})break L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const * in constructor = <><x><y/></x></>) {const __proto__ = *::*, __parent__; }");
tryItOut("/*for..in*/for(const --[11,12,13,14].filter['__iterator__'] in ((Math.pow)(((this.zzz.zzz).isPrototypeOf((<><x><y/></x></> %= prop))))))\n");
tryItOut("/*infloop*/do {continue ; } while(window .@ (new Function(\"__proto__ = *::*;\")));");
tryItOut("let (__count__ = null--.__defineSetter__(\"__count__\", 'haha'.split)) { /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in 4.) {const __count__ = [[1]]; } }");
tryItOut("if(true) {{} }");
tryItOut("/*infloop*/do {with(<x/> &=  '' )({}).__lookupGetter__break ; } while(#1=[prototype = #3={a:#3#}]);");
tryItOut("/*infloop*/M:for(let constructor; (constructor.function::constructor getter= [1,2,3,4].slice >> (({}).hasOwnProperty())).valueOf(\"number\"); ([11,12,13,14].filter)) {/*infloop*/L:while(window)export *; }");
tryItOut("/*for..in*/for(prop = .2 in <xxx {__iterator__}={[1]} />) {/*infloop*/L:do yield; while(<x><y/></x>.(false));if(<><x><y/></x></>) {throw  /x/g ; }\n else  if (<><x><y/></x></>) yield window; else function  constructor ()<><x><y/></x></> const constructor; }");
tryItOut("return <x/>\ncontinue M;");
tryItOut("");
tryItOut("{/*for..in*/for(__iterator__ = <x><y/></x> in prototype) yield; }");
tryItOut("M:switch(window) { case 0: break;  }");
tryItOut("with({constructor: <x><y/></x>}){;return null; }");
tryItOut("/*infloop*/do for(let y in []); while(( ''  .. [[]]).hasOwnProperty(\"__count__\"));");
tryItOut("prop = ([11,12,13,14].filter);");
tryItOut("/*for..in*/L:for(let 3/0.prototype in  /x/g ) {yield __count__; }");
tryItOut("/*infloop*/M:for(const __parent__ = /a/gi((({__noSuchMethod__: __count__, function::__iterator__ getter: Math.sin }))); (yield 1.2e3); this.__defineSetter__(\"__iterator__\", new Function)) {gcwith(<x><y/></x>){const constructor;gc() } }");
tryItOut("/*infloop*/for(__noSuchMethod__; ({__parent__ getter: Math.pow }); (\nlet (prototype = #1#, __iterator__ = <x><y/></x>) __proto__)) throw ( /* Comment */<x><y/></x>);");
tryItOut("L:if(yield with((null -= <x><y/\n></x>))throw <x><y/></x>; =  \"\" ) { if (({prop: (({constructor: 0x99 })),  get prop(prop) { yield (__iterator__ = window) }  })) return [,,]; else {if( \"\" ) this;<x><y/></x> }}");
tryItOut("(0);\nlet __iterator__, __proto__;\n");
tryItOut("/*infloop*/for(var __noSuchMethod__; (function  __noSuchMethod__ (prop, constructor) { {} } )((yield *), true); (.yoyo(eval(\"function ([y]) { }\", <x>\t<y/></x>)))) {export *\n }");
tryItOut("/*for..in*/for(const constructor in ((({}).__lookupGetter__)(undefined ? constructor : prototype))){switch(__proto__) { case 0: break;  } }");
tryItOut("if((eval)().prop = (((uneval(window))) === constructor)) {/*for..in*/for(let function::__noSuchMethod__ = -1 in <x><y/></x>) {<x><y/></x>;export constructor; } } else {(4.); }");
tryItOut("L:if(<><x><y/></x></>.isPrototypeOf(__proto__, __proto__)) { if (({__iterator__: -3/0 })) export *; else {return; }}");
tryItOut("/*for..in*/L:for(let [__noSuchMethod__, __count__] =  in ({a1:1})) {export *;let __iterator__, __iterator__ = 1.3; }");
tryItOut("let (constructor, __iterator__ = __noSuchMethod__) { export *; }");
tryItOut("");
tryItOut("export *\nvar prototype = constructor, __parent__ =  '' ;");
tryItOut("with(this.__defineGetter__(\"__proto__\", new Function))({ __parent__: prototype, constructor: prototype })\nL: {throw __iterator__; }with(false);");
tryItOut("export __proto__\n");
tryItOut("/*infloop*/for(var __iterator__; ([15,16,17,18].map(({}).__lookupGetter__, <><x><y/></x></>) instanceof (constructor =  '' )); ( \"\" .propertyIsEnumerable(\"__proto__\"))) {{export __noSuchMethod__; }L: { { yield @foo }  }\nL:do gc() while((new (<><x><y/></x></>[arguments])(* ? <><x><y/></x></> : <x><y/></x>, *)) && 0); }");
tryItOut("/*for..in*/M:for(var __count__ in ((eval)(([ /x/g ].filter(eval))))){export *; }");
tryItOut("/*for..in*/for(let __parent__ in <x><y/></x> +=  /x/g ) {{}try { return; } catch(constructor if <x><y/></x>) { __parent__, __iterator__; } finally { function::__parent__, function::__proto__ = <x><y/></x>; }  }");
tryItOut("__noSuchMethod__: <><x><y/></x></>");
tryItOut("/*infloop*/for(<y><z/></y>.__lookupSetter__(\"__noSuchMethod__\"); (__noSuchMethod__ = <xxx>{prop}</xxx>\n) | ([<x/>--].filter(window)); (<x<y)().unwatch(\"prop\").isPrototypeOf(new RegExp(__count__ = __noSuchMethod__) ? 1.3 : ((0.1 , undefined) ===  '' .yoyo(__count__)))) L:switch() { default: ;break; case this.__defineSetter__(\"__proto__\", undefined) != <x><y/></x> - <x><y/></x>: if(<><x><y/></x></>) {export *; } else {return [1,,]; }break;  }//h\n");
tryItOut("break M");
tryItOut("/*infloop*/while((new (window)((eval(\"false\", *)))))/*infloop*/do {yield null; } while((1e81.yoyo(<><x><y/></x></>)));");
tryItOut("/*infloop*/for( /x/g ; undefined; this) {__proto__;; }");
tryItOut("/*for..in*/M:for(const (__proto__) in ((.2.@*)((prototype.__count__ getter= new Function))))var yield;, __iterator__;");
tryItOut(" { yield (<><x><y/></x></>.isPrototypeOf(<><x><y/></x></>) / [,,])[3/0] } ");
tryItOut("while(((new __iterator__())) && 0){export *; }");
tryItOut("let (__proto__) { gc() }");
tryItOut("/*infloop*/for(var prototype = ({ __noSuchMethod__: ({ __iterator__: ({ prop: prototype }), __parent__: ({ constructor: prototype }) }), __proto__: constructor }) = @foo; eval(\"yield prop\\n<y><z/></y>;\", @foo.@foo); 1.2e3 in -0 && undefined) with((uneval(__parent__)))yield;");
tryItOut("M:if(<x><y/></x>.__defineSetter__(\"__parent__\", 'haha'.split)) let constructor = __noSuchMethod__;");
tryItOut("/*infloop*/while(eval(\"new Function\", (<x><y/></x>.*)))with(\t__count__ = \nprototype){return <><x><y/></x></>\t;gc() }");
tryItOut("/*infloop*/M:while(('haha'.split)())");
tryItOut("/*for..in*/for(var [prop, __parent__] = [15,16,17,18].sort(function(y) { yield y; continue ;; yield y; }, function ([y]) { }) in <><x><y/></x></>) gc()");
tryItOut("if(( /x/g  ? <x/> : <x><y/></x>)) { if ((new Date(({__proto__:  \"\" .throw(1e4) }), ))) (<y><z/></y>); else 1e81}");
tryItOut("return <><x><y/></x></>;");
tryItOut("/*infloop*/for(var __proto__; <y><z/></y>; window) throw this;");
tryItOut("this.zzz.zzz;");
tryItOut("if(<x/> &= <x/>) ; const __count__;");
tryItOut("{switch(<x><y/></x>) { case 8: (<><x><y/></x></>);break;  }yield *; }");
tryItOut("with({__parent__: (<y><z/></y>)(window, default: break ;break; case 5: (<><x><y/></x></>);break; case 2: let prototype;case [,,]: break; )})/*for..in*/for([prototype, __count__] = <!--yy--> in <x><y/></x>) {throw [z1]; }");
tryItOut("(<><x><y/></x></>) const prop;");
tryItOut("{let (prop, __noSuchMethod__ = *::*) { (*::*); }/*for..in*/{return [1,,]; } }");
tryItOut("if(eval(\"[15,16,17,18].filter(({}).__lookupGetter__, \\f<x/>)\", (([@foo].map(([,]).call)))[\tlet (__noSuchMethod__ =  /x/g , prop = null) this])) { if (([11,12,13,14].sort())) { } else {var x::__count__ = (-1);throw *; }}");
tryItOut("if((eval( /x/ , <x><y/></x>) !== __proto__ = __proto__)) {__count__ = __parent__\n__parent__ = [z1], __proto__;/*infloop*/for(let __iterator__ = null; [1,,]; (-1)) return; } else return;");
tryItOut("/*infloop*/for(new Date(<><x><y/></x></>, <x><y/></x>); [prototype = <y><z/></y>]; this.__defineSetter__(\"__parent__\", (function(q) { return q; }).call)) /*infloop*/M:for(var __iterator__; (<><x><y/></x></>.eval(__noSuchMethod__)); ((p={}, (p.z = ({}))()))) export *;");
tryItOut("/*infloop*/for(true; <x><y/></x>.hasOwnProperty(\"__iterator__\"); \nwindow >>= <x/>) prototype, __proto__\n;");
tryItOut("return\nreturn");
tryItOut("return;");
tryItOut("let (__noSuchMethod__ = [1,,], constructor = window) { const prop; }");
tryItOut("/*infloop*/L:for(var __noSuchMethod__; @foo; <><x><y/></x></> &= this) yield;");
tryItOut("/*infloop*/for(__iterator__; [z1,,]; true) (false);");
tryItOut("{/*infloop*/for(({prop:  '' , gc() }); prop.__count__ setter= function(q) { return q; }; this) gc()with((~(*::*.isPrototypeOf(window))))var prop = <y><z/></y>, constructor; }");
tryItOut("/*for..in*/for(var __count__ in <><x><y/></x></>) gc()");
tryItOut("/*infloop*/M:for(let __proto__; \n__noSuchMethod__; [ /x/ ]) 1e+81 const __iterator__;");
tryItOut("L: {if((*::*)) {export __parent__; } else  if ((<x><y/></x>)[5.0000000000000000000000]) {<><x><y/></x></>; } else return (-0);export __proto__; }");
tryItOut("{([,]); }");
tryItOut("(__iterator__) = prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in [,,z1]) ");
tryItOut("if(this[<><x><y/></x></>].@foo) { if ((prop.constructor = <x><y/></x>)) if(eval(\" /x/ \", (-1))) {gc() } else {export *; }} else {if(#1=[#1#]) return; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; false; -0) (<><x><y/></x></>).__defineSetter__ const __noSuchMethod__;");
tryItOut("let(({ __count__: [, ({ __iterator__: __proto__, prop: __noSuchMethod__ }), prototype, __count__] })) { return;");
tryItOut("gc() const prop;");
tryItOut("throw *;\ngc()\n");
tryItOut("if(({prop getter:  /x/  })) { if (((delete true.__parent__).prop)\n) yield;\nconstructor;\n} else {{} }");
tryItOut("M:switch((<><x><y/></x></>.eval(*::*))) { default: [];break;  }");
tryItOut("/*infloop*/L:for((undefined -= <><x><y/></x></>); __count__; this.propertyIsEnumerable(\"prop\")) {<><x><y/></x></>; }");
tryItOut("/*for..in*/M:\ffor(const constructor in *) export constructor\n");
tryItOut("if(*::*) { if (<x/> / {} ? __parent__ = <y><z/></y> : (function(id) { return id }.__defineGetter__(\"prototype\", *::*))) {/*for..in*/for(export *; in ((<><x><y/></x></>)(*))) }} else {}");
tryItOut("{return\n__proto__;/*infloop*/for(const x::__proto__; new (constructor = *)\n; 033 ? 0x99 : <x><y/></x>) {__noSuchMethod__ = prototype, __proto__ = undefined;{} } }");
tryItOut("try { for(let y in [5,6,7,8]) return; } finally { let __proto__ = __iterator__; } ");
tryItOut("/*for..in*/for(__proto__ in (let (prop) __proto__.__iterator__)) throw <x><y/></x>;");
