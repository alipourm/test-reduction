
tryItOut(";");
tryItOut("/*infloop*/for(({ __parent__: __noSuchMethod__, __noSuchMethod__: __iterator__ }) = +((prototype for each (__parent__ in (prototype = <y><z/></y>.__parent__)) for each (__proto__ in (1e81 *= [])) if ([1]))); [<x/>.propertyIsEnumerable(\"prop\")]; [__noSuchMethod__.prototype] -= prototype.__count__.__lookupSetter__(\"__iterator__\")) { }");
tryItOut("export prototype//h\n\n");
tryItOut("M:if(__proto__ =  /x/g ) { if (-1.hasOwnProperty(\"__iterator__\") === <><x><y/></x></>.valueOf(\"number\")) {return;export __parent__; }} else {prototype, __noSuchMethod__;break M; }");
tryItOut("if() { if ((__parent__.__iterator__ setter= (1 for (x in []))) || @foo ? this : prototype) (<x/>); else {const __proto__ = window, __iterator__ = __proto__;if(<x/>) { if (<y><z/></y>) {export __iterator__;yield; } else {var __parent__; }} }}");
tryItOut("L: {export __iterator__; }");
tryItOut("return; const __noSuchMethod__;");
tryItOut("if(prototype) { if (3/0) } else constructor");
tryItOut("/*for..in*/for(const [constructor, __proto__] = (<><x><y/></x></>)(<><x><y/></x></>) in <><x><y/></x></>) var constructor = <x/>, prototype;");
tryItOut("/*infloop*/for(delete [1] .@ ((<x><y/></x>.\t(null)) %= __proto__ = {}); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; ({__count__ setter: __proto__.__noSuchMethod__ })) const prototype, __iterator__ = -0");
tryItOut("with((\f{__count__: (new Exception((true())))})){let __iterator__;M:switch(<><x><y/></x></>) { case 5: /*for..in*/for(const constructor in 1e81) {yield; }function ();break; Math.sinbreak; default: throw <x><y/></x>; } }");
tryItOut("M:if(<><>undefined</></>)  else let (prototype = 0x99, __noSuchMethod__ = <><x><y/></x></>) { __count__ getter: constructor = function(id) { return id } }");
tryItOut("/*infloop*/for(const __parent__ = 1.3['prototype']; this.yoyo(<><x><y/></x></>); [11,12,13,14].some) L: {gc()__proto__ = <x/>; }");
tryItOut("if([z1,,]) {throw this;throw ({}); } else var __parent__ = [1,,], prototype =  '' ;");
tryItOut("L: {L: {{} }\nvar prototype;\n }");
tryItOut("(undefined)\n<x><y/></x>;");
tryItOut("/*for..in*/for(var constructor in ((Math.pow)([z1])))/*for..in*/for(var prototype = --<x><y/></x> & 5.0000000000000000000000 in (new (__proto__)())) {__proto__, deletebreak L; }");
tryItOut("M:if(void null % (uneval(this.__defineSetter__(\"__proto__\", new Function)))) /*infloop*/do {export *; } while(this); else  if ((({__proto__ getter: ({}).__lookupGetter__,  set constructor(__parent__, prop) { return (__iterator__.__iterator__ = null[<x><y/></x>].watch(\"__count__\", Math.pow)) }  }))) {throw eval(\"{}\", prop = *::*); } else return;");
tryItOut("{/*infloop*/for(let prop; ((uneval([15,16,17,18].sort((<y><z/></y>).apply, continue M)))); (__proto__.__defineSetter__(\"prototype\", 'haha'.split))) return;/*infloop*/while((yield @foo)){switch( /x/ ) { case 033: const __noSuchMethod__, constructor; } } }");
tryItOut("/*for..in*/for([, ({ __iterator__: prop })] in ((/a/gi)(!RegExp().eval(this.__defineGetter__(\"__count__\", function  prop () {  } ))))){yield [,];\nyield <x><y/></x>;\n }");
tryItOut("var __count__, let;");
tryItOut("L:if(((yield @foo !== <><x><y/></x></> @ 1e81 && <><x><y/></x></>))) { if (((p={}, (p.z = <x><y/></x>)()))) {export prop;break L; } else throw  '' ;}");
tryItOut("{export *;throw [,,]; }");
tryItOut("if(({prop: (function  undefined (prototype, __parent__) { yield <><x><y/></x></> } (--*::*, 4.))})\t) while((<><x><y/></x></> * window) && 0){(prototype); } else {/*infloop*/for(let this.__defineGetter__(\"prototype\", function(q) { return q; }) = (eval)\t.call(undefined, 1e+81) || #1#.valueOf(\"number\"); undefined; \rnull.watch(\"__count__\", function  __iterator__ (__parent__) { yield  /x/g  } )) const __count__, __parent__ = function(id) { return id }; }");
tryItOut("do throw null; while((Function() ? new (/a/gi)(1e81) : let (prototype = <><bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb>\f</>) <zzz>prop+=[z1]</zzz>) && 0);");
tryItOut("/*for..in*/for(let (null.__noSuchMethod__) in Error([1].propertyIsEnumerable(\"__proto__\"))) /*for..in*/for(__count__ = <x><y/></x>.eval(__parent__) in 1e+81) <><x><y/></x></>;");
tryItOut("{}");
tryItOut("/*infloop*/do {throw <><x><y/></x></>; = <x/>, __noSuchMethod__\nif((((undefined for (constructor in __proto__ = <><x><y/></x></>, prop))).@foo)) { if (<x><y/></x>.@foo if (-3/0)) <><x><y/></\fx></>; else prototype} } while(<x/>);");
tryItOut("with(({})){var prototype; }");
tryItOut("let ([]) { (__count__); }");
tryItOut("continue ; const constructor");
tryItOut("/*infloop*/while(window){yield (function ([y]) { })();while((#1#) && 0){return [z1,,];__parent__ } }");
tryItOut("/*infloop*/\fM:\ffor(prop; ([,] for (prototype in __count__)); ((1 for (x in [])))\n(constructor)) const __parent__ = [1];");
tryItOut("/*infloop*/for(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; (function::__parent__) = (<xxx>{prototype}</xxx>.(new 'haha'.split([[]], window))); [11,12,13,14].sort.prototype = new ( /x/g )(<y><z/></y>).prop = __iterator__.unwatch(\"__proto__\").hasOwnProperty(\"__noSuchMethod__\")) continue L\n");
tryItOut("if((uneval(__count__))) throw  /x/g //h\n; else  if ((({__noSuchMethod__: ((p={}, (p.z = window)()).__noSuchMethod__ = false.__defineGetter__(\"x::prototype\", undefined)) }))) {constructor; } else export each;");
tryItOut("\nexport *\n");
tryItOut("[] = #0=[const __parent__ =  '' .propertyIsEnumerable(\"function::__count__\")] || __count__.prototype setter= <y><z/></y>, [({ prop: [], each: [] })]");
tryItOut("let(constructor, __proto__ = __iterator__ =  \"\" ) { __iterator__ = prototype;");
tryItOut("if(<y><z/></y>) { if (*) break L;} else null;");
tryItOut("export *;\n;\n");
tryItOut("/*for..in*/for(let function::__count__ in ((function  __parent__ (prototype) { [] } )('fafafa'.replace(/a/g, Math.pow)))){__proto__; }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = __iterator__ = .2.propertyIsEnumerable(\"__parent__\")\f;  /* Comment */eval(\"#3={a:#3#}\", #3={a:#3#}) :: ({a2:z2}).throw([z1,,]); <><zzz>(__proto__.__count__ =  \"\" .watch(\"__parent__\", <><x><y/></x>\t</>))</zzz></>) {{}\nM:if(__count__) {(<x/>);var prop = 3/0, prop; } else gc()\nyield 3/0; }");
tryItOut("if(((function(y) { yield y; /*infloop*/M:do { } while(-0);; yield y; })())) {with(<x/> >> *::*)/*for..in*/M:for(const __proto__ in ((this)(<><x><y/></x></>)\t)){yield [,]; }M:if(prototype) return; else (<x><y/></x>); } else {switch( /x/g ) { case 0: break;  } }");
tryItOut("switch(eval(\"throw <x/>;\", <x><y/></x>)) { default: break;  }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function () { gc() } )(({__proto__ setter: 'haha'.split, prototype setter: [1,2,3,4].slice }).__lookupGetter__(\"__count__\")))){return;switch(<><x><y/></x></>) { default: ;export __noSuchMethod__;case <x><y/></x>: const __proto__ = __parent__;return;break; ;case this: break; case 6: break; case -1: case 4: break; case (-0): const prop;continue M;case <x/>: case 6: case [,,z1]: return window;break; case 7: case 5: export *;break;  } }");
tryItOut("/*for..in*/L:for(var prop([1,2,3,4].map()) in ({ set __count__ __parent__ (constructor, __count__) /x/ .propertyIsEnumerable(\"__iterator__\"),  set prototype constructor (__count__, constructor) { (false); }  })) /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in *) {; }");
tryItOut("function(y) { yield y; yield false;; yield y; }\n{}");
tryItOut("if(0) let __noSuchMethod__ = <x><y/></x>, constructor; else 1e81;\t");
tryItOut("/*for..in*/for(var ( /x/ )( '' ) in <x><y/></x>) {export *;(1 for (x in [])) }");
tryItOut("/*for..in*/M:for(var prototype = (let (prop, __iterator__) eval(\"<x/>\", <x><y/></x>)) in undefined) {return; }");
tryItOut("/*for..in*/for(var [__proto__, __iterator__] = ([11,12,13,14].sort) in ((+false)[let (__noSuchMethod__, __iterator__ = <x><y/></x>) window])) do gc() while(({}) && 0);");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <> </> in window *= ({})) gc()\ngc()");
tryItOut("with(__iterator__.__proto__){return;with(<><x><y/></x></>){constructor;yield .2; } }");
tryItOut("try { prop = __proto__; } finally { with({}) { let(__parent__) ((function(){throw constructor;})()); }  } ");
tryItOut("with({constructor: new (<><x><y/></x></> / <x><y/></\rx>)(('fafafa'.replace(/a/g, ({}).__lookupGetter__)), #1=[#1#])}){/*infloop*/for(<x><y/></x>; @foo; true) continue ;export *; }");
tryItOut("L: {/*infloop*/M:while((-0)\f)(function(id) { return id }); }");
tryItOut("__iterator__ = __iterator__\n");
tryItOut("/*for..in*/L:for(const [prototype, x::prototype] = function::__proto__ + prototype >>>=__proto__.isPrototypeOf((function ([y]) { })()) in 5) {export __parent__;yield [[1]]; }");
tryItOut("function(y) { yield y; export *;; yield y; }");
tryItOut("with({}) for(let y in [5,6,7,8]) yield ({ __parent__: __iterator__ }) = ({ __noSuchMethod__: prop, getter: __parent__ });");
tryItOut("\rL:if(4.) (({a1:1})); else  if (#3={a:#3#}) {; }");
tryItOut("let(__noSuchMethod__ = (\feval(\"@foo\", this)[ /x/g .prototype = 4.])) { __noSuchMethod__ = constructor;");
tryItOut("with({__count__: __iterator__}){with((<x><y/></x>).watch(__proto__)){export __proto__; } }");
tryItOut("if(<x/>) throw true; else  if (__proto__) yield <x><y/></x>; else {/a/gi }");
tryItOut("false");
tryItOut("if((yield this)) { if ((prop)) {return <y><z/></y>; } else constructor;}");
tryItOut("/*infloop*/do {throw *::*;let function (prototype, constructor) { yield  /x/g  } , prototype; } while(@foo.__defineSetter__(\"__parent__\", (new Function(\"let constructor, constructor;\"))));");
tryItOut("let(prototype = ('fafafa'.replace(/a/g, function ([constructor, __proto__\f, __parent__, ], prototype) { yield this.__defineGetter__(\"prop\", Math.pow) } )), __noSuchMethod__ = <><x><y/></x></> %= window) { return;");
tryItOut("L:if(([[11,12,13,14].sort].sort(new Function))) { if (-0.__count__ = this) with({__noSuchMethod__: (function (constructor) { return * } ).constructor\t = x::prototype = @foo})break M;} else while(([ /x/g ]) && 0){export __noSuchMethod__; }");
tryItOut("switch([1,2,3,4].slice) { case * -= ({}): export prototype; }");
tryItOut("with(({a2:z2})){(@foo); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__(<y><z/></y>.@foo) in *) (window);");
tryItOut("const __proto__ = <x><y/></x>;export __noSuchMethod__\n(@foo).__defineSetter__");
tryItOut("M:if(eval(\"/*infloop*/while(<x><y/></x>){yield;gc() }\", {})) {;\n\n } else  if ((@foo--)) {if(<y><z/></y>)  default  else  if (<x/>) {export *; } }");
tryItOut("/*infloop*/do {let __iterator__, __noSuchMethod__;with(undefined)let __count__; } while(window);");
tryItOut("try { let __iterator__ = <><x><y/></x></>, __noSuchMethod__ = <x/>; } catch(constructor) { let(__count__) { return  /x/g ; } ");
tryItOut("with(new Function([[,] if ( \"\" )]))window;");
tryItOut("const prototype = null;");
tryItOut("__iterator__;\n\n");
tryItOut("gc()");
tryItOut("/*for..in*/for(const constructor = __proto__.__noSuchMethod__ in <><xxx {__parent__}={({a2:z2})} /></>.prop) {var __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (let (__proto__, prop = 3) <><x><y/></x></>)['prop' export *; ] in <x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")) {(<><x><y/></x></>);if(<><x><y/></x></>) throw <y><z/></y>; }");
tryItOut("if(<x/>[__count__]) export prototype; else {throw <x/>; }");
tryItOut("const <x/> = [[1]];");
tryItOut("__parent__ = prototype;");
tryItOut("if(<x/>) { if ( /x/g ) {(<y><z/></y>);<x/> } else {return <><x><y/></x></>; }}");
tryItOut("with({}) { yield null; } ");
tryItOut("L:with((new (({}).hasOwnProperty)() instanceof <x><y/></x> += @foo)){let (__proto__ = window) { throw __proto__; }{} }");
tryItOut("throw StopIteration;");
tryItOut("if(<><x><y/></x></>['__noSuchMethod__'] = (__parent__ = null)) { if ((uneval(<y><z/></y>))) {}} else throw <x><y/></x>;");
tryItOut("M:if(0x99) { if (undefined.__lookupGetter__(\"__iterator__\")) {}} else ");
tryItOut("if((null in undefined)) yield <><x><y/></x></>; else  if (<x><y/></x>.__noSuchMethod__) {; } else return;");
tryItOut("/*for..in*/for([function::__count__, __count__] = <x/> in <y><z/></y>) export __iterator__\n");
tryItOut("/*infloop*/while((@foo)){return 1.2e3;const __proto__ = function ([y]) { }, __noSuchMethod__; }");
tryItOut("return;");
tryItOut("{{} }");
tryItOut("if((function::prototype = set = <x><y/></x>, __noSuchMethod__ = <x><y/></x>;.watch(\"__noSuchMethod__\", function  __iterator__ (prototype, constructor) { yield <><x><y/></x></> && (-1) } ))) {var __noSuchMethod__, constructor =  \"\" ;return; } else yield __parent__;");
tryItOut("if(({__parent__: __proto__ = <><x><y/></x></> }).__defineGetter__(\"__iterator__\", <x/>)) { if (constructor = [null if (#1=[#1#])]) export * else {export *;const prop; }}");
tryItOut("/*for..in*/for(let let.__parent__ in false) {export *; }");
tryItOut("var __count__;\nthrow __count__;\n\nM:if((@foo).call(*\f,  /x/ ,  /x/ )) { if (<><x><y/></x></> .. <x/>) {export *; }} else break ;\n");
tryItOut("if(<bbb xmlns:ccc=\"__iterator__ =  '' \"><ccc:eee></ccc:eee></bbb>) /*for..in*/M:for(const __parent__ in ((function (__count__)<x><y/></x>)( /x/g )))Function");
tryItOut("L:if(*) { if ((null.eval(constructor))\n) yield;} else {throw []; }");
tryItOut("/*infloop*/for(const [z1] = true; <x><y/></x>; <x><y/></x>) {<y><z/></y>; }");
tryItOut("if(__proto__ || <x><y/></x> for (__parent__ in  /x/g ) for (__iterator__ in <y><z/></y>)) var __noSuchMethod__ = <x><y/></x>, prop; else  if (window.hasOwnProperty\f(\"__noSuchMethod__\")) {gc()/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <x/>) throw <x><y/></x>\n/*for..in*/for(const return; in <x/>) return; } else {for(let y in [5,6,7,8]) throw  '' ;/*infloop*/do {return  \"\" ; } while([z1]); }");
tryItOut("3;");
tryItOut("/*for..in*/for(const prop = (({})[(eval(\"-1\", function ([y]) { }))]) in window) __count__");
tryItOut("/*infloop*/do const prop = ({}), __proto__; while(false\f)\n");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (<><x><y/></x></> instanceof __parent__)) yield <x><y/></x>;");
tryItOut("if(1e-81) { if (<><x><y/></x></>) {const __parent__;x::constructor, __noSuchMethod__; } else {return <x><y/></x>; }}");
tryItOut("let (__count__ = .2.propertyIsEnumerable(\"prototype\")--) { with({}) { prototype = __count__; }  }");
tryItOut("{return;__parent__; }");
tryItOut("__iterator__");
tryItOut("/*for..in*/for(var __iterator__ = (window *= []) / [,,z1] for (__parent__ in arguments) if ( '' ) in prop = this) {return;/*infloop*/M:for(let __proto__; __count__;  '' ) ([1,2,3,4].slice).call }");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(var __proto__ in (((--__parent__).__defineSetter__)(prototype(<x/>) .. ([,,] ? 4. : 1.3)))){return -0; }");
tryItOut("with({__proto__: this.__defineSetter__(\"constructor\", function(y) { yield y; if((<y><z/></y>.propertyIsEnumerable(\"constructor\"))) {return <x/>; } else  if ((uneval((-1)))) {yield <><x><y/></x></>;const prototype = 3.141592653589793; } else {throw <x><y/></x>; }; yield y; })})/*infloop*/L:for(<x\t><y/></x>\t <= *::*; <bbb xmlns:ccc=\"{}.throw(prototype)\"><ccc:eee></ccc:eee></bbb>\n; <x/>--) {throw <x/>;{} }");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __proto__ in <y><z/></y>.__lookupSetter__(\"constructor\") ? __proto__ : (<x/>.@foo)) {throw [z1];(({})); }");
tryItOut("M:if(new  { return * } ()) { if (( \"\" .yoyo((Function)( '' )))) let __noSuchMethod__ = [,,], let;} else {({}).__lookupGetter__prop; }");
tryItOut("if(true) { if ((-0)) {__iterator__;prototype; } else (false);}");
tryItOut("let (prop = false, prototype = this) {  \"\" ; }");
tryItOut("/*for..in*/M:for(__proto__ in <x/>) {export *; }");
tryItOut("/*infloop*/do /*infloop*/while(arguments){{} } while(<><xxx {prop}={function(id) { return id }} /></>);");
tryItOut("/*for..in*/for(const prototype = <y><z/></y> in (function ([y]) { })()) {3/0;gc() }");
tryItOut("/*for..in*/for(const __parent__ = <><x><y/></x></> in <><x><y/></x></>) return;\nexport *;\n");
tryItOut("if( '' ) { if (prototype = __count__.constructor === (yield prototype).constructor = <x><y/></x> - [,,z1]) return;\n\n else /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <><x><y/></x></>) {let __proto__; }}");
tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("L:if((<><x><y/></x></> >>>=<x/>)) {export prop; } else true;");
tryItOut("export constructor;");
tryItOut("return;");
tryItOut("export constructor;");
tryItOut("/*infloop*/while(new Array(prop =  \"\" , ([[]] >>>=*)))if(@foo) export setter; else  if (__noSuchMethod__) {; } else @foo;");
tryItOut("/*for..in*/for(const [set, __count__] = new ([1,2,3,4].slice)(({__count__: (window() &= ( /x/g .watch(\"__parent__\", function (__iterator__, default: yield <x><y/></x>;case 6: break L;break; case function(id) { return id }: yield window;break; )<y><z/></y>)))})) in ((function (prop, prop) { yield <bbb xmlns=\"<x><y/></x> != <><x><y/></x></>\"><> \"\" </><x><y/></x><!--yy--></bbb> } ).call(prototype = prototype,  /x/  in ({ __noSuchMethod__: prop }) = (<y><z/></y>function () { (<><x><y/></x></>).call } )(*), prop /= <x><y/></x>))) /*for..in*/for([__parent__, __parent__] = <y><z/></y> in __parent__) let (constructor = <x><y/></x>, __iterator__) @foo\n/*for..in*/for(const prop in <><x><y/></x></>) yield <x><y/></x>;\n");
tryItOut("/*infloop*/L:for(const x::constructor; <y><z/></y>; <><x><y/></x></>) {yield  /x/ ; }");
tryItOut("/*infloop*/for(__proto__; (new function  prototype (__iterator__, prop) { yield  ''  } ()); [true if (<><x><y/></x></>)]) return");
tryItOut("/*infloop*/do {(<y><z/></y>);export prototype; } while(#1=[#1#]);");
tryItOut("yield ({__parent__(<y><z/></y>) setter: ({}).hasOwnProperty });");
tryItOut("M:do L:if(<><x><y/></x></> > #1#) {throw <><x><y/></x></>;__proto__ = 1e4; } else  if ((@foo([,,]))) try { __noSuchMethod__; } catch(__count__) { \tbreak ; } finally { var __iterator__ = <x><y/></x>; }  while(((__proto__ =  \"\"  @  \"\" .__proto__)) && 0);");
tryItOut("if() throw <><x><y/></x></>;");
tryItOut("/*infloop*/L:for(var __parent__; new #3={a:#3#}(); this.__defineGetter__(\"__noSuchMethod__\", function  __proto__ (<x/>;, constructor) { return <x><y/></x> } )) {/* M; }");
tryItOut("/*for..in*/for(const prop in ((({}).__lookupGetter__)(())))__parent__ = this;");
tryItOut("/*for..in*/for(__proto__ = new *::* in ++({constructor: (({\tprop: *, prototype: __count__ !==  /x/  })), __noSuchMethod__ setter: function  __proto__ () {  { return ((uneval(window))).@* }  }  })) {/*infloop*/while(true)\t{throw window;{} } }");
tryItOut("gc()");
tryItOut("with({}) { return; } ");
tryItOut("for(let y in [5,6,7,8]) constructor = __noSuchMethod__;");
tryItOut("/*for..in*/for(let constructor = (__noSuchMethod__.__proto__) in null) ");
tryItOut("yield this;");
tryItOut("if(('fafafa'.replace(/a/g, ((<><x><y/></x></>.propertyIsEnumerable(\"__iterator__\"))).watch))) {var each, __proto__ = <x/>;\nthrow __count__;\n }");
tryItOut("with({prototype: (({ constructor: __count__, prop: x::__parent__ }) = <x/>.__defineSetter__(\"__count__\", ({}).hasOwnProperty))}){}");
tryItOut("yield;");
tryItOut("if((+new <x><y/></x> .@*:: <y><z/></y>)) L:if(({__count__: prototype })) ; else  if (<x/>.*\t) *::* else return window; else  if (eval(\"<x/>\", <><x><y/></x></>)) {<y><z/></y>; }");
tryItOut("L:with(<><>yyy</></>)return eval(\"[1,2,3,4].slice\",  /x/ );");
tryItOut("if(let (__parent__) (constructor.__iterator__ setter= *)) { if (*::*) {yield <x><y/></x>; }} else {/*infloop*/M:for(var __proto__; <y><z/></y>.eval(<y><z/></y>); (window.__parent__)) {} }");
tryItOut("function(y) { yield y; break M;; yield y; }");
tryItOut("if(033) {} else var __iterator__, <x><y/></x> = *;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(\rvar [prop, __proto__] = __proto__ = .2 %= <x><y/></x> ? function(id) { return id } : 3/0.yoyo(true) in .(prop.yoyo(function ([y]) { }))) {gc() }");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/for(__parent__(undefined) in ((Math.sin)(<><x><y/></x></>))){gc() }");
tryItOut("/*for..in*/ <><x><y/></x></>, true for(var __parent__ = new (window)() in /*) {} <{constructor}><!--yy--></{constructor}> setter: function  __iterator__ (prototype, __noSuchMethod__) { return (-1).propertyIsEnumerable(\"__noSuchMethod__\") }  ");
tryItOut("let (prop, __noSuchMethod__ = <y><z/></y>) { ({}).__lookupGetter__ }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for( /x/g ; (uneval((new Math.pow(4., 1e81)))); <y><z/></y>['prototype'] = (__iterator__)[ /x/ ]) {if([15,16,17,18].filter(Math.pow, <x><y/></x>)) {gc() } else {} }");
tryItOut("/*infloop*/while(<><x><y/></x></>)gc()");
tryItOut("if(.__iterator__ -= (([11,12,13,14].filter)())) /*infloop*/M:for(__proto__ = function(id) { return id }; <x><y/></x>; <x><y/></x>) let __iterator__; else  if (((p={}, (p.z = [])()))) {(<><x><y/></x></>); }");
tryItOut("switch([1]) { default: break;  }");
tryItOut("let (constructor = @foo.yoyo(*), constructor) { if(new <x><y/></x>(prop)) <x><y/></x>; else  if ( '' .__lookupGetter__(\"default: break; case <><x><y/></x></>: switch(window) { case <x/>: return 1.3;break;  }\")) {gc() } }");
tryItOut("/*infloop*/while((1e4 / #1#)(((1e+81)[*]))){yield <x><y/></x>;{gc()const __noSuchMethod__, __parent__; } }");
tryItOut("/*infloop*/L:while(__count__ =  \"\"  if (prototype)){switch(<x><y/></x>)\t { default: gc() } }");
tryItOut("for(let y in []);");
tryItOut("try { let(prop = (prototype = ([z1,,](1e4,  '' ))), __iterator__ = (<x><y/></x>.throw(0/0))) ((function(){with({}) { return; } })()); } catch(prototype if (<x><y/></x>\f < [,,z1].__iterator__)) { <ccc:ddd></ccc:ddd> } catch(__noSuchMethod__ if (function(){yield window;})()) { return <x/> + (new constructor(<><x><y/></x></>)); } catch(constructor) { throw StopIteration; } ");
tryItOut("if(delete) {yield <y><z/></y>; }");
tryItOut("let(__proto__ = true) ((function(){function  __iterator__ (constructor, __parent__) { constructor; } })());");
tryItOut("/*infloop*/for((<x><y/></x>.(@foo)); [<x><y/></x>].sort(({}).__lookupGetter__); (__noSuchMethod__ = <x/>)) {/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__ in <x><y/></x>) {continue ; } }");
tryItOut("{while((<><x><y/></x><///h\n>) && 0)return;yield window; }");
tryItOut("/*infloop*/for((new (/a/gi)(((eval(\"export *\\n\",  /x/ )) ? *::*() : null[ '' ]), [true].filter(function(q) { return q; }))).hasOwnProperty(\"__count__\"); try { ({ __proto__: [] }) = __parent__; } catch(prototype) { const __noSuchMethod__ = <>yyy</>; } finally { this.zzz.zzz; } ; eval(\"<><x><y/></x></>\", [get].sort([1,2,3,4].slice))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in __proto__) let constructor; }");
tryItOut("/*infloop*/M:for(const __count__; (delete ); new ((yield let (__proto__ = true) *).__defineSetter__)(([<x><y/></x>]), ((undefined if (<x><y/></x>))))) export *;");
tryItOut("L: throw <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in null) {continue ; }");
tryItOut("/*infloop*/for(let prop = prop !== *::* ? 1e+81 : <x/>;  /x/g .propertyIsEnumerable(\"__proto__\"); + /x/ ) {constructor =  /x/g ;\tL:if((__iterator__)) { if ((prop = __count__)) {const __parent__, __parent__;throw <x/>; }} else gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in (yield this)) export __parent__;");
tryItOut("throw StopIteration;");
tryItOut("switch(({constructor: __parent__ })) { case this.zzz.zzz: case new (<><x><y/></x></> @  ''  < <x><y/></x>.isPrototypeOf(({a2:z2})))(* & constructor): L: {/*infloop*/for(var __iterator__ = ((new Function/*\n*/)(<x><y/></x>));  '' [<y><z/></y>]; ( /* Comment */__count__-=*::*)) gc() }break; case new (( '' )(false))(): break ;default: case (-1): __count__;/*for..in*//* nogeckoex bug 349964 */M: for  each(var this.__defineGetter__(\"constructor\", [1,2,3,4].map) in <><x><y/></x></>)  }");
tryItOut("/*for..in*/for(var __proto__ in ((function(q) { return q; })(__noSuchMethod__.prototype = undefined)))");
tryItOut("L: yield;");
tryItOut("if(({__noSuchMethod__:  /x/ })) { if (<x/> |= (-1)) yield; else yield;}");
tryItOut("L:if(({__iterator__: <x/>})) return 0; else  if ((( /x/  <<= this))) break M; else {}");
tryItOut("with({__proto__: (__parent__.prototype = (window)())})with(__count__){continue ;continue M; }//h\n");
tryItOut("/*infloop*/for(const constructor = ( ''  <<= <><x><y/></x></>) |= __count__ = this; (({ get __iterator__ yield (__noSuchMethod__, __proto__) { yield [,,z1] } ,  set prototype(prototype, ({ __parent__: __proto__ })) { return (constructor = * ? (yield [z1,,]) : prop = this) }  }/*\n*/)); __iterator__ = ({}).hasOwnProperty) {return window;[15,16,17,18].filter(Math.sin, this); }");
tryItOut("if((<y><z/></y>.propertyIsEnumerable(\"prop\"))) { if (yield (Math.sin).call(true.prop, function ([y]) { }.constructor.*).__lookupSetter__(\"#3={a:#3#}\")) {/*infloop*/do  while(undefined);var __noSuchMethod__ = <x/>, __count__; } else {export *; }}");
tryItOut("/*infloop*/for((#1# * [,]); constructor.(__noSuchMethod__ = this); \t*.propertyIsEnumerable(\"__iterator__\")) {let (__noSuchMethod__ = #1#, constructor) { M:do {let prop, __iterator__; } while((this) && 0); } }");
tryItOut("if('fafafa'.replace(/a/g, <x><y/></x>)) /*for..in*/for(var __iterator__ =  /x/  in [[1]]) {function(y) { yield y; <><x><y/></x></>;; yield y; } } else  if (('fafafa'.replace(/a/g, function(q) { return q; })).unwatch(\"prototype\")) const prop; else {(window); }");
tryItOut(" const __proto__;");
tryItOut("switch([this].some(Math.pow)) { default: gc() const __noSuchMethod__;break;  }");
tryItOut("/*infloop*/for(prototype; this.eval( \"\" );  /* Comment */((<y><z/></y>).prototype = (undefined.hasOwnProperty(\"__count__\")))) {(*::*);(__iterator__.(__noSuchMethod__)).__defineSetter__(\"prop\", (1 for (x in []))) }");
tryItOut("if( '' ) { if (@foo) {x::prop }} else const __count__ =  \"\" , prototype;");
tryItOut("let(__count__, __parent__ = <x/>) ((function(){gc()})());");
tryItOut("({})\n");
