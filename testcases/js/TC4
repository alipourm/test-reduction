
tryItOut("L:if(@foo || [15,16,17,18].map(eval, ({ prototype: __count__, __count__: __parent__\f }) = <><x><y/></x></>.__defineSetter__\f(\"constructor\", ({}).__lookupGetter__))) { if ([ /x/  for (constructor in @foo)]) {M:with({__count__: <x/>})<y><z/></y>;export __iterator__; }} else prop;");
tryItOut("continue ");
tryItOut("with({prototype: (this === __noSuchMethod__ =  '' )}){let __noSuchMethod__ = *, __iterator__;/*infloop*/while(<><x><y/></x></>){__iterator__, prototype;var __iterator__, constructor; } }");
tryItOut("(__parent__.watch(\"__noSuchMethod__\", gc));");
tryItOut("/*infloop*/while(this){yield; }");
tryItOut("/*for..in*/for(let [__proto__, prop] = [11,12,13,14].filter in constructor+=window) if(true) {let __parent__, prop;gc } else  if (<x><y/></x>) {export *;let constructor =  \"\" , __proto__ = *; } else continue M;\n\n");
tryItOut("/*infloop*/for(let prop; #2=[(#1=[#1#])(*::*,  /x/ )]; (gc)//h\n.call((constructor = Math.pow(<><x><y/></x></>.propertyIsEnumerable(\"__proto__\"), <x><y/></x>)), (__noSuchMethod__ = __noSuchMethod__), \nnew (true)(033, <y><z/></y>))) if(*) {let __parent__ = <><x><y/></x></>, prototype;return; } else {yield;; }export *;");
tryItOut("/*infloop*/for(var __proto__; ((prop.  getter= [1,2,3,4].slice).eval((__proto__)( /x/g ) = 3/0.*)); new (undefined)( \"\" .__lookupSetter__\t(\"__noSuchMethod__\"))) M:with((__parent__ = <x/>).__defineGetter__(\"__noSuchMethod__\", function (prop) { export *; } )){export __proto__;\nreturn;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__(1e-81) in <><x><y/></x></>) {(*::*);yield; } }");
tryItOut("/*infloop*/M:for(let ({ prototype: constructor, __parent__: [, , ] }) = <x><y/></x>.@foo; (#1=({__iterator__: <x/>})); __proto__\f.prop =  /x/g ) {/*infloop*/for(let delete = <y><z/></y>; false; <><x><y/></x></>) {let prototype;let __noSuchMethod__ = <x/>, __iterator__ = function ([y]) { }; }return; }");
tryItOut("try { try { yield; } catch(constructor) { {} } finally { return; }  } catch(__parent__) { this.zzz.zzz; } finally { this.zzz.zzz; } ");
tryItOut("let (__count__, prop) { /*infloop*/for((let (__noSuchMethod__ = <><x><y/></x></>, prototype)  \"\" .yoyo((false >>> <x><y/></x>))); (().watch(\"prop\", function () { return <y><z/></y> } )); 3.141592653589793) while((<x><y/></x>.__parent__) && 0)if(<y><z/></y>) { if ([1,,]) yield;} else {{}yield; }<x><y/></x>; }");
tryItOut("M:if(this.zzz.zzz) {if(<x/> /= <><x><y/></x></>) []; else  if ((\n \"\" )) {return <><x><y/></x></>;__noSuchMethod__; }M:if(<x/>) {(window); } } else  if ((yield <x><y/></x>) |= this.valueOf(\"number\")) {{gc() }return; } else if(((yield \n__parent__ = __parent__))) {let __count__, prototype; const prop; } else  if ((undefined.prop) >= <y><z/></y> %= .2) {return <><x><y/></x></>; } else {yield this; }\n");
tryItOut("{return;gc() }");
tryItOut("/*infloop*/M:while(prototype = (p={}, (p.z = *::*)())){var __parent__ = this; }");
tryItOut("/*infloop*/for([(-0)\n].map(new Function); ((({__parent__ getter: function  prototype () { (#1#); } ,  set constructor(prop)*::* })))[(<x/> .@*:: window).hasOwnProperty(\"constructor\")]; (__count__) = ( /x/  | window)()) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <><x><y/></x></>) \tthrow 3/0;");
tryItOut("const __parent__;");
tryItOut("L:with({__iterator__: 3/0})(__count__);");
tryItOut("/*infloop*/L:for(((<x><y/></x> ^= prototype).*).yoyo(#3={a:#3#}); #0=({__iterator__: window.valueOf(\"number\")}); new (({}).hasOwnProperty).apply(++*::*)) export *;");
tryItOut("M:while((yield this) && 0){; }");
tryItOut("{}");
tryItOut("(({a1:1}))(<><x><y/></x></>) = prototype;");
tryItOut("throw __noSuchMethod__;");
tryItOut("switch([1]) { default:  }\nexport __noSuchMethod__;");
tryItOut("{yield; }");
tryItOut("yield  '' ;/*infloop*/M:for(var prototype; Math.pow; <y><z/></y>) {let __proto__;throw  /x/ ; }");
tryItOut("(<x/>);");
tryItOut("/*infloop*/for(new (new Function(\"throw <x><y/></x>;\"))(prop, 5.0000000000000000000000) |= (eval(\"let constructor = 3;\", __parent__)); new function (prototype, ) { yield <><x><y/></x></> } ((false <  '' )); __count__ = this) {(*::*); }");
tryItOut("const __iterator__, __noSuchMethod__ = __iterator__;");
tryItOut("if(this.__defineGetter__(\"__proto__\", /a/gi)) { if (new new ( '' ).__defineSetter__().yoyo(Number((-1)))(({}).__lookupGetter__(null :: false).prop, ({__iterator__: __noSuchMethod__ = constructor }))) {if(*::* instanceof <y><z/></y>) { if (<y><z/></y> / <><x><y/></x></>) let __parent__ = <><x><y/></x><\t/>, prototype; else {}}do prop, __proto__; while((new Function) && 0);/*for..in*/M:for(var [__proto__, __count__] =  /x/  in window) {export *; } } else export __count__;}");
tryItOut("{;{} }while((({a2:z2})) && 0)return;");
tryItOut("__count__");
tryItOut("if(__parent__ = window) { if ((0x99 != {}).valueOf(\"number\")) {const prop; }} else {gc() }");
tryItOut("let (prop, prototype = Iterator(([(this.zzz.zzz)].some((undefined))), [15,16,17,18].map(<x/>, <><x><y/></x></>).__parent__)) { {yield <x><y/></x>; } }");
tryItOut("const prototype = <x/>, __proto__ = <x/>;");
tryItOut("M:do {if( /x/  >= function(id) { return id }) (-1); } while((this) && 0);");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = (__proto__.( /x/g )) in  /x/ ) {}");
tryItOut("while((this.zzz.zzz ? __iterator__ : __noSuchMethod__ = 4.) && 0){yield  /x/g ;yield true; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let <x><y/></x>['__parent__'] in constructor.__iterator__ = *.yoyo(this)) {/*infloop*/M:do {/*for..in*/L:for(let constructor = <><x><y/></x>/*\n*/</> in *) {return;yield; } } while(@foo--);(<x><y/></x>).apply }\t");
tryItOut("with({__proto__: <y><z/></y>.__defineGetter__(\"__proto__\", (false).watch)}){/*infloop*/L:for(1e+81; [];  '' ) {yield; } }");
tryItOut("/*for..in*/for(__parent__ in (this.__defineGetter__(\"prototype\", false))) {(<y><z/></y>); }");
tryItOut("__iterator__\n");
tryItOut("/*infloop*/for(__noSuchMethod__; undefined;  '' ) {/a/gi }");
tryItOut("/*for..in*/for(var constructor = @foo.isPrototypeOf( '' ) in  '' ) {break L;; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype in <x/>) {function  __iterator__ (__count__)<x><y/></x> }");
tryItOut("L:do  finally  while(([[1]] <<= prop) && 0);");
tryItOut("throw StopIteration;");
tryItOut("{export *; }");
tryItOut("{}\nbreak M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (yield undefined.yoyo(this))((0x99)()) in prop.prototype) L:if((p={}, (p.z = (this.zzz.zzz))())) { if (\f* >>> <x><y/></x>\f) {export *; }} else {if(__iterator__) {Math.sinyield delete; } else  if ([,]) {const yield = <y><z/></y>; } else {const __count__; } }");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>) {continue ; }} else gc()");
tryItOut("/*infloop*/do L:if(<y><z/></y>.__proto__) { if (<><x><y/></x></>.__defineSetter__(\"__parent__\", Math.pow)) {var prototype = <y><z/></y>;x::__parent__ = arguments; }} else ; while((__count__ = (<x><y/></x>.(@foo))--));");
tryItOut("let (prototype) { return; }");
tryItOut("{throw this;export __proto__;(null); }");
tryItOut("(true).__defineSetter__\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <><x><y/></x></>) export prototype\nif(0) L: (__parent__);");
tryItOut("return 5.0000000000000000000000;\nprop\n");
tryItOut("/*infloop*/for(prop; --*::*; window.__iterator__) {/*for..in*/\rM:for(__parent__ =  /x/  %= <x/> in this) {; } }/*infloop*/while(__iterator__ = ( /x/g  |= 4. /=  /x/g  & <y><z/></y>))yield;");
tryItOut("do {export *; } while((RangeError(null, new  /x/g (<x/>))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (prop) in [0/0].some(({}).hasOwnProperty)) {/*for..in*/\fM:for(let __noSuchMethod__ = ( '' )[false] in prototype) ; }");
tryItOut("M:with( /x/g ){gc() }");
tryItOut("M:if(__count__ = Function()) { if (#2=@foo % <>for(let y in [5,6,7,8]) with({}) { <><x><y/></x></>; } </>) {function(y) { yield y; L:if(<><x><y/></x></>) {prototype =  \"\" , constructor = <><x><y/></x></>; }; yield y; }yield; }} else {/*infloop*/for(__noSuchMethod__; <x><y/></x>;  /x/g ) {yield; }(null); }");
tryItOut("yield  '' ; const constructor;");
tryItOut("return;");
tryItOut("do ({}).hasOwnProperty while((({ constructor: __iterator__ }) = new RegExp(undefined)) && 0);");
tryItOut("L:while((true) && 0)/*for..in*/for(let __noSuchMethod__ = __noSuchMethod__ in @foo) return <x/>;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in -1) {__noSuchMethod__ }/*infloop*/while(prototype%= \"\"  !== __noSuchMethod__.__parent__)return (function ([y]) { })(); }");
tryItOut("with(function::constructor.prototype setter= <><x><y/></x></>){let __proto__, __count__ = *;/*for..in*/M:for(var __iterator__ = <><x><y/></x></> in this) {export constructor;; } }");
tryItOut("return;");
tryItOut("/*infloop*/for(constructor; [,]; (window.yoyo(<x/>))) let (constructor = <x><y/></x>, prop =  /x/g ) { {} }");
tryItOut("if(window != null) {(4.); } else {gc() }");
tryItOut("M:with(__parent__.__noSuchMethod__ setter= gc){return  /x/ ; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(let __iterator__ in ((({}).__lookupGetter__)(new (prop =  /* Comment */export *;.prototype = (*)(<x><y/></x>, *))()))){) {yield -3/0; } else  if (delete <x/> __count__ ) /*infloop*/for(<x><y/>\f</x>.(<x><y/></x>) -= (<x><y/></x> + this); eval(\"eval(\\\"gc()\\\", __count__)\", this.__defineSetter__(\"prop\", ([,,z1]).watch)); undefined) yield;if((undefined :: true)) { if ((prop)) /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in var constructor;) {gc() } else {}} }");
tryItOut("/*infloop*/for(__count__ = ((\t<y><z/></y>.@*) + <x><y/></x>); [<y><z/></y> for (__iterator__ in  /x/ )]; *::*[(gc)()]) M:while((@foo) && 0) if ( \"\" )");
tryItOut("if((+(this.__defineSetter__(\"__proto__\", 1e+81 ? <x/> :  \"\" )))) while((#1=#1=[#1#]) && 0)throw <x><y/></x>\t;");
tryItOut("/*infloop*/while( * [, prototype, ] = __noSuchMethod__){var each;throw  \"\" ; }");
tryItOut("{{}export *; }");
tryItOut("let (__parent__ = (), __count__ = #1=[#1#]) { function () { yield window }  }");
tryItOut("switch((#3={a:#3#}(*)).throw(1e81 < [1,,])) { default: return  /x/g .unwatch(\"prop\");break;  }");
tryItOut("L:while(( \"\" ) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __proto__) {yield 4.;break ; } }");
tryItOut("/*infloop*/for(__parent__; ({ constructor: constructor }) = *++; let (({ __iterator__: prop }) = ({a2:z2})) this.yoyo(undefined)) yield <x><y/></x>;");
tryItOut("/*for..in*/L:for(const prop = <y><z/></y> ==  ''  in __count__) {const __iterator__; }");
tryItOut("/*infloop*/do {continue L; } while([11,12,13,14].filter);");
tryItOut("/*for..in*/for(__noSuchMethod__ in yield [,,];) {}");
tryItOut("/*infloop*/for(constructor; <x><y/></x>; window) {{}(arguments); }\nreturn;");
tryItOut("if((Math.sin)(yield <><x><y/></x></>; = [1,,] / this)) yield;");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut(";");
tryItOut("prototype = __parent__;");
tryItOut("L: return;");
tryItOut("do gc() while(( try { var function::__count__, prop; } finally { gc() } <y><z/></y> ? (new Boolean(__iterator__)) : <x><y/></x> = __iterator__) && 0)\n");
tryItOut("/*for..in*/for(let __parent__ = this.__defineGetter__(\"constructor\", function  __iterator__ (__count__, __noSuchMethod__) { yield <><x><y/></x></> } ) in null) {; }");
tryItOut("{return; }");
tryItOut("/*infloop*/for(#3={a:#3#}; <x><y/></x>; -1) {return; }");
tryItOut("L:with({})return <><x><y/></x></>;");
tryItOut("L: {;break ; }");
tryItOut("if((__noSuchMethod__|= /x/g )) {/*infloop*/do return __iterator__; while((function ([y]) { })()); } else {return  \"\" ; }");
tryItOut("<x><y/></x>; const __proto__;");
tryItOut(" = constructor;");
tryItOut(" /x/ ; const constructor;");
tryItOut("/*for..in*/L:for(const __iterator__ in (((1 for (x in [])))(( /* Comment */@foo.hasOwnProperty(\"__iterator__\"))))){with({prototype: (p={}, (p.z = __parent__)())}); }");
tryItOut("switch(<><x><y/></x></>) { case <x><y/></x>: case 8: break;  }");
tryItOut("M:do gc() while((new true) && 0);");
tryItOut("{}\ncontinue L;\n");
tryItOut("/*infloop*/while((this.__lookupGetter__(\"__noSuchMethod__\")).hasOwnProperty(\"prototype\")){gc()\n }");
tryItOut("/*infloop*/do /*infloop*/while(<><x><y/></x></> >> *::*){} while((this .@ 1e4).unwatch(\"__noSuchMethod__\"));");
tryItOut("prop = *;");
tryItOut("if(true @ [,,](window, __count__)) { if (gc()) L:if(*::*) { '' ; } else  if ([( '' .@*) for each (__proto__ in <x><y/></x>) for each (__iterator__ in 0.1)]) return; else ({}).__lookupGetter__} else {var __proto__ = (-0), prop;while((constructor) && 0){continue L; } }");
tryItOut("{arguments;var constructor; }");
tryItOut("if(-0 ? *::* : <x><y/></x> for each (__parent__ in ((new Function(\"\"))).call([1.3].some(s), new <x/>())) for each (__count__ in  \"\"  >= -3/0) if ( /x/ )) if((delete *))  else <x/> else  if ((__noSuchMethod__ ? ((1 for (x in []))) : [11,12,13,14].some)) (__parent__).apply");
tryItOut("throw 4.;");
tryItOut("if(/*\n*/typeof  ''  instanceof //h\n'fafafa'.replace(/a/g, (Math.pow).call)) { if ([11,12,13,14].sort) ({}).__lookupGetter__} else {gc()return <x><y/></x>; }");
tryItOut("with()var constructor\n");
tryItOut("");
tryItOut("do {<x><y/></x>return __noSuchMethod__; } while(([,,]) && 0);");
tryItOut("/*for..in*/for(let  /x/g  in null) throw <y><z/></y>;");
tryItOut("/*for..in*/L:for(let __count__ = (<><x><y/></x></>.__defineSetter__(\"prop\", ({}).hasOwnProperty)) in 1e81) {export *;return; }");
tryItOut("if(1e-81) return; else {return;export *; }");
tryItOut("throw StopIteration;");
tryItOut("L: { }");
tryItOut("let (__count__ = --<x><y/></x>, __count__) { (undefined); }");
tryItOut("yield 1.2e3.*.eval(());");
tryItOut("if( /x/g ) {gc() } else  if ( /x/g ) {{}export constructor; }");
tryItOut("{return; }");
tryItOut("with((#2=[__proto__])){return <x/>; }");
tryItOut("L:if(yield (#2=[*])) {} else  if () {__iterator__, __parent__ = *::*; } else throw <><x><y/></x></>;");
tryItOut("M:switch(eval(\"((yield 3))\", new (({}).hasOwnProperty)(-<><\fx><y/\f></x></>, [1,,]))) { default: /*infloop*/for(const __count__; 'fafafa'.replace(/a/g, [1,2,3,4].map); <><xxx>{constructor}</xxx></>) {{}; }break; case ((uneval(<y><z/></y>)) |= <y><z/></y> =  /x/g ): let(__noSuchMethod__ = __iterator__.isPrototypeOf(__count__+=1e+81), __parent__ = <y><z/></y> ? <><x><y/></x></> : <x><y/></x>) { {}with({}) { let(constructor = ((function(q) { return q; }).call(<><x><y/></x></>, undefined, @foo))) ((function(){return;})()); } case (S + ({a1:1})).constructor: export *;break; function(y) { yield y; return *;; yield y; } }");
tryItOut("continue L; const __proto__;");
tryItOut("switch(@foo) { default: export *;break; break; case 2: export *;break;  }");
tryItOut("/*for..in*/for(let __count__ = (new eval()) in this) { { yield <y><z/></y> }  }");
tryItOut("M:with([<y><z/></y>].filter(function(q) { return q; }))@foo;");
tryItOut("with({}) ");
tryItOut("M:if(Exception()) { if (return) {(<x><y/></x>); } else with(<><x><y/></x></>)return this;;}");
tryItOut("L:with(new Date(__iterator__)){const prop, prop =  \"\" ;if(x::__proto__) { if (<><x><y/></x/></>) yield ({a1:1});} else {gc()break ; } }");
tryItOut("switch(*) { default: case this: {}break; case [,]:  }");
tryItOut("do __noSuchMethod__, prototype =  /x/ ; while((*::*) && 0);\nyield;\n");
tryItOut("\tif(3.141592653589793) {M:while((window) && 0)return ({a1:1}); } else  if ((((this).watch)(window, <><x><y/></x></>)) ? <><x><y/></x></> : (__parent__ = window)) M:while((true) && 0)<x/>; else /*for..in*/for(prototype = undefined in window) let __count__, function::prototype;");
tryItOut("do {{return <x><y/></x>; }throw __parent__; } while((((yield __noSuchMethod__))) && 0);");
tryItOut("return;");
tryItOut("return (@foo--);");
tryItOut("I");
tryItOut("if(!(window -= <><x><y/></x></>).__iterator__ = <>{}</>) var __proto__ = window; else  if (new function(y) { yield y; <x><y/></x>; yield y; }(*)) {var __noSuchMethod__ = <><x><y/></x></>, __count__; } else {({}).__lookupGetter__yield <x><y/></x>; }");
tryItOut("for(let y in [5,6,7,8]) ;");
tryItOut("if((!@foo)) { if ((false > <><x><y/></x></>)) return;} else ");
tryItOut("M:while((arguments) && 0)__proto__, constructor = true");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (<x><y/></x>.__parent__) << *) break ");
tryItOut("with(window){gc(); }");
tryItOut("do return; while((prop) && 0);");
tryItOut("/*infloop*/for(<x><y/></x>; 1e81; this) throw  '' ");
tryItOut("/*infloop*/L:for\t(const __iterator__; window-- %= constructor.(<><x><y/></x></>); eval(\";\", <><x><y/></x></>)) if(<><x><y/></x></>) { if (<><x><y/></x></>) {(<x><y/></x>); } else let constructor = false, __iterator__;}");
tryItOut("with({prototype: @foo.@*}){/*infloop*/while(<><x><y/></x></>.constructor)export __parent__; }");
tryItOut("/*infloop*/L:while(-1)gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__parent__ =  \"\" ) <<= __count__.eval([,]) in #1=<{(this).call(<><x><y/></x></>, )}><ccc:ddd>yyy</ccc:ddd></{(this).call(<><x><y/></x></>, )}>) {if(__count__) { if (<><x><y/></x></>) {throw 4.; }} else <><x><y/></x></>; }");
tryItOut("yield [1,,];let (__count__) { gc() }");
tryItOut("if(window) {const __count__ =  '' ;var __iterator__, prop; } else  if (@foo) throw [1,,]; else break ; const __iterator__;");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("if([15,16,17,18].filter(Math.pow, null--)) { if ((1e81.unwatch(\"prop\"))) {yield window;'haha'.split } else {;yield; }}");
tryItOut("{ }");
tryItOut("const __noSuchMethod__, __noSuchMethod__\n");
tryItOut("L: export __count__;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<><x><y/></x></> /= <><x><y/></x></>['__count__'] in (true @ [,])) export *;");
tryItOut("switch(({ __proto__: prototype }) = (*::* || prop).__defineGetter__(\"constructor\", (this.__defineSetter__(\"prototype\", new Function)).__defineSetter__)) { case ([*].some(function(y) { yield y; throw *::*;; yield y; })): with(typeof (function(q) { return q; }.*))([[]]);{} }");
tryItOut("/*infloop*/for((({a1:1}).isPrototypeOf(null)); eval(\"__iterator__\", *::*); [__count__]) {continue M; }\n__iterator__ = function ([y]) { }, __noSuchMethod__ =  \"\" ;\n");
tryItOut("with((yield [z1,,]))-0;");
tryItOut("/*for..in*/for(const constructor in __noSuchMethod__) yield;\ngc()\n");
tryItOut("/*for..in*/for(var __parent__ in *::*) {;function(y) { yield y; (.2);; yield y; } }");
tryItOut("if(*::*) { if (<x><y/></x>) ; else {var __proto__ = false;([,]); }}\n /x/  const __iterator__;");
tryItOut("{gc()prop = <y><z/></y>; }");
tryItOut("{}");
tryItOut("/*infloop*/while(3/0 += <><x><y/></x></>)__noSuchMethod__<><bbb xmlns:ccc=\"((*::*)(__iterator__))()\"><ccc:eee></ccc:eee></bbb></>\nthrow *;\n");
tryItOut("__count__ getter: new Function");
tryItOut("/*for..in*/for(var [prototype, prop] = <x/>.__proto__ in function(id) { return id }) /*infloop*/M:for(*::*; true; <><x><y/></x></>) {return; }");
tryItOut("{(undefined).watch }");
tryItOut("if(([11,12,13,14].filter)) { if (<x/>.@*) {const __proto__ = <x><y/></x>, __proto__; }} else return false;");
tryItOut("try { return; } catch(prop if ([[1]] ? __proto__ : false)) { gc() } ");
tryItOut("if(constructor.__noSuchMethod__ getter= function  constructor (prop) { yield *::* } ) return this; else  if (undefined.eval(false)) {var __count__;gc()\f }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype.prototype in <><x><y/></x></>) return null;");
tryItOut("if(new *()) { if (__count__) {(<x><y/></x>).__defineSetter__ }} else {{}prototype, __count__; }");
tryItOut("for(let y in []);");
tryItOut("for(let y in [5,6,7,8]) return !__iterator__ = [, __iterator__];");
tryItOut("switch(((p={}, (p.z = <x/>++)()))) { case 5: break; default: let(__count__ = -1, constructor) { throw StopIteration;break;  }");
tryItOut("if((function (__parent__, prop) { yield ((({}).hasOwnProperty).call( '' .@*, prop |= true,  '' )) } ).call(<y><z/></y> | __iterator__, (#1=[#1#].__lookupGetter__(\"__iterator__\")))/*\n*/) { if (<bbb xmlns=\"({ prop: yield; }) = __parent__.( /x/g )\"><!--yy--></bbb>) <>(function  prop (({ __noSuchMethod__: constructor, function::prototype: __proto__ }), prop)<x/> .. prop).call((this.__defineSetter__(\"__noSuchMethod__\", <x/>)), __parent__ =  /x/ .valueOf(\"number\"), (__proto__ = function ([y]) { }))</>} else {/*infloop*/for(var [({ constructor: [, ] }), , __iterator__, , ] = <><><xxx>{__count__}</xxx> </></>; RegExp(<x><y/></x>, [[1]]); eval(\"__noSuchMethod__ =  '' ;\", __noSuchMethod__) += window++) /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in  '' ) {{}yield; } }");
tryItOut("{}");
tryItOut("try { continue M; } catch(prototype if <y><z/></y>) { const __parent__, undefined; } ");
tryItOut("M:with( /* Comment */window){yield null; }");
tryItOut("L:with(<x><y/></x>)constructor = <><x><y/></x></>, prototype = <x><y/></x>;");
tryItOut("constructor = __proto__;");
tryItOut("/*infloop*/do return undefined; while((new window));");
tryItOut("window");
tryItOut("break M");
tryItOut("while((<y><z/></y> || __count__) && 0){{}return <y><z/></y>; }");
tryItOut("constructor.__count__ = constructor;");
tryItOut("with(((undefined.__lookupGetter__(\"prop\")) for (false['constructor'] in 3) if (<x/>))){while((<x><y/></x>) && 0){var __noSuchMethod__, __count__; } }");
tryItOut("/*for..in*/for(var constructor.__parent__ in ({ __iterator__: prop, __iterator__: __parent__ }) = <><x><y/></x></>.throw(#1=[#1#]).hasOwnProperty(\"__noSuchMethod__\")) __iterator__, constructor =  /x/g ;");
tryItOut("{let __proto__\nif(this) { if (<y><z/></y>) constructor = window; else {yield <><x><y/></x></>; }} }");
tryItOut("if( \"\"  :: <><x><y/></x></> .@*:: <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {/*infloop*/for(var [] = *; true ? null : <><x><y/></x></>; __proto__.(-0)) {/*for..in*/for(prototype = function(id) { return id } in <x><y/></x>) {export *; } } } else  if ((prop.valueOf(\"number\") @ __parent__|=<x><y/></x>)) {/*for..in*/L:for([prop, \tprototype] = new __parent__ for (__proto__ in ({a2:z2}))(window = window) in  '' ) {continue L; }L:if(-0.eval(<><x><y/></x></>)) { if (new (<y><z/></y>)((@foo |= prop), 1e4)) export *;} else  }");
tryItOut("/*infloop*/while(.){constructor } const __parent__;");
tryItOut("L: __noSuchMethod__: @foo.unwatch(\"prototype\")");
