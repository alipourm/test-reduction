tryItOut("/*for..in*/M:for(var __parent__ = undefined in [,,z1]\t) {throw this;__noSuchMethod__ = __iterator__, __parent__; }");
tryItOut("(true)\n");
tryItOut("L: {switch(new [z1,,]()) { case 3: break;  } }");
tryItOut("M:if(1e+81) { if (this.zzz.zzz) {const prop = undefined; }} else {let __noSuchMethod__, prototype; }");
tryItOut("/*for..in*/for(let __proto__ = (-1).__defineGetter__(\"__count__\", (new Function(\"__parent__, __iterator__;\")))++\t in (yield <y><z/></y>\t)) /*for..in*/for(const constructor in  '' ) yield;/*\n*/");
tryItOut("/*for..in*/for(__iterator__ = __count__ || <><x><y/></x></> in [z1,,]) /*for..in*/for(var __noSuchMethod__ = case 033: case 5: <x/>; in *) {__noSuchMethod__; }");
tryItOut("if((new ((function(y) { yield y; {}; yield y; }).call\f)())) { if (false) yield; else }");
tryItOut("{var __noSuchMethod__, __iterator__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in ((([1,2,3,4].map).call)(({prop getter: ({}).__lookupGetter__ })))){const constructor, __iterator__; }");
tryItOut("{yield *::*;{} }");
tryItOut("/*for..in*/for(__proto__ in ((({}).__lookupGetter__)(@foo))){}\nwith({constructor: <><x><y/></x></>}){throw 1.2e3;; }\n");
tryItOut("/*for..in*/for(var __proto__ in ((function(q) { return q; })((__count__.prototype = ({a1:1}))[__noSuchMethod__ = window])))");
tryItOut("let (__parent__ = <><x><y/></x></>.isPrototypeOf(undefined.@*)) { /*for..in*/for(const [prototype, constructor] = window in [1]) return window; }");
tryItOut("/*for..in*/L:for(var prototype = (__proto__ = undefined) in <y><z/></y>) {break L; }");
tryItOut("/*infloop*/M:for([<><x><y/></x></> ? this.__defineSetter__(\"prop\", gc) :  /x/g  >= 1.2e3].sort(Math.sin); <x><y/></x> | (-0) -= [<><x><y/></x></> if (3)] in !*::*; (({prop: this.zzz.zzz }))) L:if(new (function () { yield <><x><y/></x></> } )()) L: {yield null;let prop = <><x><y/></x></>, __count__ =  \"\" ; } else {/*yield true\ngc() }");
tryItOut("/*infloop*/L:while(([[1]]\n)){/*for..in*/for(var [__parent__, prototype] = 1e81 in <><x><y/></x></>) gc() }");
tryItOut("/*for..in*/for([x::prototype, __noSuchMethod__] = <y><z/></y> @  /x/g  in [z1,,]) ");
tryItOut("with({({ prototype: __iterator__ }): (\n[,] += arguments ? __proto__.* += (p={}, (p.z = ( \"\"  |= <x/>))()) :  /* Comment */<><x><y/></x></>\n)}){var __noSuchMethod__, __iterator__ = <><x><y/>\f</x></>\n }");
tryItOut("");
tryItOut("yield prototype;");
tryItOut("/*for..in*/for(let [getter, __proto__] = <><x><y/></x></> in <x/>) gc()");
tryItOut("if(@foo) export __noSuchMethod__;");
tryItOut("M:if(true) M:with({__proto__: <y><z/></y> %= <x><y/></x> @ * << true})M:if(<><x><y/></x></>) { if (<x><y/></x>) {gc()const __parent__ = this, __parent__ = *; }} else {return true; }");
tryItOut("with(\n(!(yield  /x/g ))){break ; }");
tryItOut("yield @foo\n");
tryItOut("/*for..in*/for(var constructor in (((new Function(\"const __count__;\")))(null.(prototype = 3[ \"\"  .@x:: <><x><y/></\tx></>])\r)))return null;");
tryItOut("var constructor, __proto__;yield = -3/0, __parent__ = window;");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = (<x/> && *::*) in (window if (false))) gc()\nyield <x><y/></x>;\n");
tryItOut("if(+ /x/ ) L: {throw  /x/ ;export *; }");
tryItOut("return eval(\"gc()\", this);");
tryItOut("try { throw StopIteration; } catch(__count__ if <x><y/></x> == this) { with({}) return window; } ");
tryItOut("with({prop: (<x/>.@*)}){yield <x><y/></x>;throw true; }");
tryItOut("with({}) ;");
tryItOut("/*infloop*/for([__parent__].some(<><x><y/></x></>); <x/>; prototype.__iterator__) return <><x><y/></x></>;");
tryItOut("*");
tryItOut("yield null;");
tryItOut("L: {L:do (<><x><y/></x></>).__defineSetter__ while((1e81) && 0)\n }");
tryItOut("M:do /*infloop*/do gc() while(constructor.function::prop getter= function ().2); while(((<x><y/></x>[(__noSuchMethod__ = <x/>)] for each (__noSuchMethod__ in yield  \"\" ) if (this))) && 0);");
tryItOut("/*for..in*/for(const __count__ in ((({ get prop(__iterator__, __iterator__) /x/g  }))([[]]\n.__lookupGetter__(\"prop\"))))gc()");
tryItOut("/*for..in*/M:for(const prop = [11,12,13,14].some in <x/>) {prototype;yield; }");
tryItOut("let (prop = this.@foo) { {} }");
tryItOut("arguments\n");
tryItOut("/*for..in*/for(let __parent__ in this) L:with({__noSuchMethod__: __parent__ = <><x><y/></x></>}){return;break ; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("M:do {continue M; } while(((__parent__ = this)) && 0);");
tryItOut("let constructor = *::*, __count__;\nif((<x/>.__parent__ = true)) { if (@foo) return;} else (function::__iterator__);\n");
tryItOut("/*infloop*/for(({ __iterator__: constructor, __parent__: ({ prototype: ({ prototype: [], prototype: [__parent__, constructor, constructor, ] }) }) }) = <x><y/></x> &= [,,z1].@foo; (0[<>8</>]); ((<x><y/></x>)(4.) = (__proto__ = *))) {let (__noSuchMethod__ = (__proto__.__parent__ setter= (undefined).call), __count__ = <><x><y/></x></>) { export *; } }");
tryItOut("/*for..in*/for(let constructor in (( '' )(constructor ? <y><z/></y> : <x><y/></x>.@*))){/*for..in*/M:for(var [prop, __iterator__] = [eval(\"\", window)].map((new Function(\"yield;\"))) in this) gc() }");
tryItOut("try { {} } finally { let __noSuchMethod__; } ");
tryItOut("/*for..in*/for(var __noSuchMethod__.__iterator__ in ((gc)(((({__count__ setter: (*::*).__defineSetter__,  set __proto__ constructor (__noSuchMethod__) { throw <x><y/></x>; }  })).eval(true))))){L: if(<x/>) {(false);continue ; } else  if (constructor) {constructor, prototype;let prototype, prop; }M:if(0) {} else  if ((3/0 /= ({__noSuchMethod__ getter: Math.pow,  set prop(get, function::prototype) { yield 0x99.__lookupGetter__(\"__count__\") }  })).isPrototypeOf(( /x/g .__defineSetter__(\"__count__\", (1.2e3).__defineSetter__)))) /*infloop*/do {export *; } while((p={}, (p.z = undefined)())); else /*for..in*/M:for(__count__ in ((<><x><y/></x></>)(*::*))){var __parent__, __proto__ = -1; /x/ ; } }");
tryItOut("if([15,16,17,18].map([1,2,3,4].slice, prototype)) {let __parent__ = null; }");
tryItOut("M:do {continue M;var __iterator__;; } while((\tfunction  prop (__iterator__) { return __iterator__; } ()) && 0);");
tryItOut("/*infloop*/for(({ __count__: ({ prototype: [] }) }) = arguments %= window; constructor; ({a1:1}) ? <y><z/></y> : this.yoyo(3)) continue ;");
tryItOut("while((false) && 0){(false);L: {yield;throw window; } }");
tryItOut("if((new (function(y) { yield y; yield this;; yield y; })())) { if (((--false ? [1] : <><x><y/></x></>)[033.throw(*)])) if(((function(y) { yield y; let __noSuchMethod__;; yield y; }).call(*\r))) { if ((p={}, (p.z = <x><y/></x>.(__parent__))())) /*for..in*/for(let constructor in (( '' )(<><x><y/></x></>))){} else {return; }}} else gc()");
tryItOut("break \n");
tryItOut("/*for..in*/for(var prototype = __count__ = (false.unwatch(\"constructor\")) in <x/>) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in false) {export *; }{//h\n} }");
tryItOut("while(((-0) @ #1#) && 0)return;");
tryItOut("yield;");
tryItOut("if((window)(*)) /*infloop*/for(<x/>; RangeError(4.); (([window for each (__iterator__ in window)] for (getter in  /x/g )))) (Math.sin).apply else  if (this) {break ; } else {let(__count__ = [[]]) { gc() }");
tryItOut("if(Object([11,12,13,14].filter)) {if(<x><y/></x> .@*:: 0x99 instanceof (false >>> <x><y/></x>)) { if (__parent__ = __proto__.__count__ setter= ({}).hasOwnProperty) {@foo;(null); }} else let prototype = <x/>, let; } else  if (<y><z/></y> .@*:: ()) M:if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {return;break M; } else  if (<y><z/></y>) gc()");
tryItOut("__parent__ = __count__;");
tryItOut("with({__parent__: new ((__proto__))(((Error())(3.141592653589793.@*,  ''  != [[1]])) =  '' , #1=[#1#])})L:while((\f(<><x><y/></x></>)() >= [z1] in 1e81.propertyIsEnumerable(\"__noSuchMethod__\")) && 0)/*infloop*/M:for((function ([y]) { })(); undefined; *) let constructor = <><x><y/></x></>, __count__;");
tryItOut("/*infloop*/for(var (__noSuchMethod__) = <y><z/></y> &= <><x><y/></x></>; this.eval(this); ((yield undefined)[<><x><y/></x></> , <x><y/></x>])) {throw ({a1:1}); }");
tryItOut("T");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in new prop) {('fafafa'.replace(/a/g, function  prototype () { return <y><z/></y> } ))\nthrow window; }");
tryItOut("try { try { finally { return  /x/g ; }  } finally { return; } ");
tryItOut("L:while(( '' ) && 0){/*for..in*/for(__count__ = false in *) {__count__; }yield; }if((prop = __iterator__)) { if ( /x/ .isPrototypeOf(true)) {M:do function  __iterator__ (constructor, constructor) ''  while((3) && 0);<y><z/></y>; } else {const __count__ = #1=[#1#], __noSuchMethod__\n }}");
tryItOut("/*infloop*/do {return;break L;\n__parent__ = (function ([y]) { })(), __noSuchMethod__;\n } while(({ __iterator__: [] }) = __count__ = __iterator__);");
tryItOut("with([,]");
tryItOut("let (__noSuchMethod__ = new Function(<><x><y/></x></>, <x><y/></x>), prop) { const __iterator__ = window; }");
tryItOut("return;");
tryItOut("/*infloop*/for(var __iterator__; Error({} %= window); eval(\"/*for..in*/for(let __iterator__ in @foo) return;\", (undefined)())) /*for..in*/for(const __iterator__ in false) yield arguments;\nthrow __iterator__;\n");
tryItOut("let (prop = __noSuchMethod__) { export function::__iterator__; }");
tryItOut("with({}) { return <x><y/></x> .@*:: <x><y/></x> for each (prop in  /x/g ); } ");
tryItOut("constructor;");
tryItOut("null['prototype'] = __noSuchMethod__;");
tryItOut("let (prototype = ((default: case \f '' .__defineSetter__(\"prototype\", 'haha'.split): break; case 7: case <><x><y/></x></>: break; .throw(((let (__parent__ = constructor) null) <= null.valueOf(\"number\")))).unwatch(\"__noSuchMethod__\")), ({ __noSuchMethod__: ({ __noSuchMethod__: ({ prototype: prop }), constructor: constructor }), prop: [[__noSuchMethod__, prop, __parent__], , [prototype, , __count__, constructor], , ] }) = (__noSuchMethod__)[__iterator__] -= typeof 3.141592653589793) {  }");
tryItOut("export prop;export __iterator__;");
tryItOut("if(this) {(window); } else  if (*::*) gc() else {gc()yield null; }");
tryItOut("with({prop: <y><z/></y>})");
tryItOut("throw StopIteration;");
tryItOut("const set = @foo, constructor");
tryItOut("export *\nswitch(<x/>(*).__noSuchMethod__ = 1e4.isPrototypeOf(<x><y/></x>)) { default: return [z1,,];break; const __proto__, __count__ = null\t;break; case (yield (<x><y/></x><!--yy-->())): break; case 7: L:with({__parent__: <x><y/></x>.@*})return <x><y/></x>;break; case 2: ;break; case  \"\" .watch(\"prop\", Function): if(this) { if ( /x/ ) {let __count__, __noSuchMethod__ = false; }} else gc()break; yield;break;  }");
tryItOut("with({constructor: (eval(\"@foo\", false))})yield;");
tryItOut("/*infloop*/for([15,16,17,18].\tmap(<x/>,  /x/g ); new (__parent__.( /x/g ))('fafafa'.replace(/a/g, (constructor).apply)); (constructor[<x><y/></x>])()) {{}export *; }");
tryItOut("M:switch(((new ((({}).__lookupGetter__).apply)())[[,]])) { default: let prop = 5.0000000000000000000000;case (p={}, (p.z = function(id) { return id })()): break; break; break; constructor = prototype, constructor = window;break;  }");
tryItOut("/*for..in*/for(var constructor in ((yield *)())){return;var setter = <><x><y/></x></>; }");
tryItOut("/*for..in*/(for(__count__ { return \fBoolean([z1], {}) }  in ((gc))(__proto__ = [prototype, __count__].__noSuchMethod__ = [15,16,17,18].some(function(q) { return q; }, (__parent__.(0.1))))))M:if(*::*) return <><x><y/></x></>; else  if (constructor =  \"\" ) {(<x><y/></x>);function  __count__ () { yield <x/>; }  } else return <y><z/></y>;");
tryItOut("__iterator__ = prop;");
tryItOut("if(__iterator__.prop getter= function (__count__) { const prop, __parent__; } )  '' ; else  if ((new (/a/gi)())) break ; else {({})-- }");
tryItOut("{; }");
tryItOut("\tdo {-1; } while(((new .2((constructor\n), <x><y/></x>))) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("with({__noSuchMethod__: #0=[__parent__ = __iterator__\t]})function(q) { return q; }");
tryItOut("M:if(([1.2e3 if (*::*)])) { if (__count__) {gc() } else {1e81;{} }}");
tryItOut("/*for..in*/for(const constructor in (-1)) return <><x><y/></x></>;");
tryItOut("do L:if([[1]])  else  if ({}) var prop; while(([ for each (__iterator__ in  /x/g )]) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("if( /x/g ) { if (constructor = (function::__proto__.prototype setter= <><x><y/></x></>/*\n*/.unwatch(\"prop\"))) {return null;\f } else {/*for..in*/for(var prototype in ((({}))(__parent__)))return; }}");
tryItOut("var prototype = __parent__, constructor = this;");
tryItOut("/*infloop*/for(<x><y/></x>['__iterator__'] = [[1]] %  \"\" .propertyIsEnumerable(\"__parent__\"); <employee id=\"1\"><name>Joe</name><age>20</age></employee>; #2=({__count__: this})) {yield <x/>\n }");
tryItOut("while(( /x/ ) && 0){gc() }return undefined;");
tryItOut("break M;");
tryItOut("return *\n");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:for(prop; false;  /x/g ) {\nreturn false; }");
tryItOut("while(((constructor = <x><y/></x>)[(!5.0000000000000000000000)]) && 0);");
tryItOut("/*for..in*/for(var __iterator__ = [, __proto__, prototype, prototype, __iterator__] = #1=({\r__parent__: __proto__}) in (this.__defineSetter__(\"__proto__\", gc) , <zzz><x><y/></x></zzz>)) {{(*); } }");
tryItOut("let (prototype, __iterator__) { L:if(__count__) { if (({a1:1})) {; }} else x::prop; }");
tryItOut("if(\n<><x><y/></x></>) {yield; } else {var __parent__ = <><x><y/></x></>; }");
tryItOut("if([[]] -= (yield)) {yield false } else  if (this.__defineGetter__(\"__parent__\", gc)) let __count__ = undefined; const __proto__;");
tryItOut("while(((this.zzz.zzz)) && 0)/*infloop*/do \f{yield; } while(__noSuchMethod__ = <><x><y/></x></>);");
tryItOut("L: let (__noSuchMethod__, __parent__ = <y><z/></y>) { return; }");
tryItOut("return (let (prop, prototype = [,]) [\tfunction(id) { return id }]);");
tryItOut("{[,,z1];if(__noSuchMethod__) return; else {gc()gc() } }");
tryItOut("with((arguments.constructor = <bbb xmlns=\"[z1]\">yyy</bbb>.__parent__))if((#2=({__noSuchMethod__: <x><y/></x>}))) { if ((eval(\"<x/>\", 3.141592653589793) ? Array() : 0x99)) ; else {return {}; }}");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: ({ __parent__: ({ prototype: prototype }) }), __proto__: ({ prop: ({ constructor: ({ try { return @foo; } catch(__noSuchMethod__) { let __parent__ = arguments, prototype; } : prop, __noSuchMethod__: constructor }) }) }) }) = ({ prototype: __proto__ }) = (033['prop'] = eval(\"__iterator__\", <x/>) = #1=[#1#].throw(false)); this.__defineGetter__(\"__proto__\", ([z1]).apply); (uneval(this.__defineGetter__(\"constructor\", undefined)))) {L: throw true; }");
tryItOut("(<x><y/></x>); const constructor;");
tryItOut("with((p={}, (p.z = ( /x/ .unwatch(\"__noSuchMethod__\") >>= break M))())){(window);   }");
tryItOut("({ __noSuchMethod__: ({ constructor: ({ __proto__: __noSuchMethod__ }) }), constructor: ({ __iterator__: constructor }) }) = __proto__;");
tryItOut("if(((yield (-1)))) {; }");
tryItOut("{{if(arguments ? *::* : #1#) { if (__iterator__ =  /x/ ) return <x><y/></x>;} else {yield; } } }");
tryItOut("var __proto__, prototype = <><x><y/></x></>;");
tryItOut("do yield; while(((* if (@foo))) && 0);");
tryItOut("L:if((new (eval)(<x><y/></x>//h\n.__lookupSetter__(\"__iterator__\")))) if( /x/g  %= prototype) export *; else {break M;export *; } else \t{with({__iterator__: arguments.__defineGetter__(\"__noSuchMethod__\",  \"\" )}){export constructor; }'haha'.split }");
tryItOut("let([, ] = ( /x/g  > *)) { for(let y in []);");
tryItOut("with({}) { try { ; } catch(__proto__) { return #1=[#1#]; } finally { yield; }  } ");
tryItOut("if(prototype = <x><y/></x>) throw true;");
tryItOut("function ([y]) { }.__noSuchMethod__ = constructor;");
tryItOut("try { with({}) for(let y in []); } catch(__count__) { with({}) { return <x/>; }  } finally { with({}) {gc() } } ");
tryItOut("with({}) { yield; } ");
tryItOut("export constructor; const prop;");
tryItOut("if(('fafafa'.replace(/a/g, 1e4))) true;");
tryItOut("/*infloop*/M:for(({ prop: __iterator__, prop: prototype.prototype }) = this += <><x><y/></x></>; *::*.__lookupSetter__(\"__proto__\") >>>=(uneval(<x><y/></x>)); new ((*).__defineSetter__)()) {return <x/>; }");
tryItOut("if(prototype[<x/>]) { if ((#1=[#1#] >>> this)) (window); else const __noSuchMethod__, __proto__ = <><x><y/></x></>;}");
tryItOut("with({let: __iterator__.prototype setter= eval}){const [constructor, , <x><y/></x>, , ] = <><x><y/></x></>, __proto__; }");
tryItOut("let(__count__ = (function (({ __count__: constructor }), []) \"\" ).call([({ __count__: constructor }), [, , __iterator__, ], [, __iterator__]], ({ prop: __parent__ }) = (<><x><y/></x></>)()[(({ constructor: prototype }) = new  return ())], new ((yield __noSuchMethod__) ? (yield *::*) : <x/>)), __proto__ = ( /* Comment */ /x/  , @foo @ @foo)) { let(__count__ = [11,12,13,14].filter) ((function(){yield <y><z/></y>.valueOf(\"number\");})());");
tryItOut("yield; const __parent__;");
tryItOut("yield 033;");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in undefined) ;if( /x/g ) {var prototype = window; } else  if (([11,12,13,14].map)) (<><x><y/></x></>); else (-1); } while((prototype|= '' ) && 0);");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ __iterator__: ({ __count__: ({ constructor: ({ __count__: __proto__ }) }), function::prop: ({ __parent__: ({ prop: __proto__, prop: constructor = <x><y/></x>, prototype = <><x><y/></\tx></> }) }) }) }) }) = <zzz><zzz>((-1) if (__parent__))</zzz></zzz>; <x><y/></x> |= window ? (__parent__ = <x/>) : (__noSuchMethod__)[<x/>]; (__count__ = window) instanceof (#2=({prototype:  /x/ }))\f) {{return;do yield; while(([,,]) && 0); }return; }");
tryItOut("/*for..in*/for(let __iterator__ in \t3.141592653589793) var __iterator__, __noSuchMethod__;");
tryItOut("if((prototype = function ([y]) { }).watch(\"prototype\", gc).@foo) { if (this /= <x><y/></x>) do {const prop = window; } while((__iterator__) && 0);} else if(new ((constructor = window))()) __parent__; else  if (*::*) {if(<><x><y/></x></>) { if (window) yield; else {/a/gi[1,2,3,4].map }} } else {;; }");
tryItOut("L:if(__parent__ = ({a1:1})) { if ([,].__defineGetter__(\"__noSuchMethod__\", (*).watch).__defineGetter__(\"prototype\", (false).__defineSetter__)) {if((uneval(this.__defineSetter__(\"prototype\", .2)))) { if (1.3) {gc() } else yield;} } else {/*for..in*/for([__noSuchMethod__, __count__] = * in <x/>) {var __count__; }return; }}");
tryItOut("gc()\n");
tryItOut("if(__count__.constructor getter= Math.sin) {export *; } else  if (__noSuchMethod__+=[,]) {export *\nreturn  /x/g ; }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __proto__] = prototype.each in ) {throw <><x><y/></x></>.@foo;yield prop; }");
tryItOut("if(<x/>) yield;");
tryItOut("while(((RangeError(<x/>, <x><y/\f></x>))--) && 0)L:with({constructor: })(1 for (x in []))");
tryItOut("L: if(RegExp()) {gc()(0); }");
tryItOut("this.zzz.zzz;");
tryItOut("return (4. if (*::*));for(let y in []);");
tryItOut("\tL:with({__iterator__: (constructor = new (({}).hasOwnProperty)(__iterator__ = 033, 0))}){0;\r(true)\n }");
tryItOut("return ({__proto__: 4.});");
tryItOut("/*infloop*/for(__noSuchMethod__ = (eval(\"\", <x><y/></x>)); <x/>.prop; [11,12,13,14].map) {var constructor; } const __proto__;");
tryItOut("if((__count__.(eval(\"/*infloop*/L:for(__count__; [1,,]; 0x99) { }\", *::*)))) ");
tryItOut("while((typeof null.eval( '' )) && 0)undefined;window;var constructor;\ncontinue M;\n");
tryItOut("*::*;");
tryItOut("if(((window)((prototype+= \"\" )))) { if (prop.__iterator__ = <><x><y/></x></>) (<x/>); else {return\ncontinue ;yield; }}");
tryItOut("{if((++ /x/ ) != <x/> %  /x/ ) {with((eval(\"yield;\", function(q) { return q; }))){gc() }* } else  if (constructor = 1e4) let constructor; }");
tryItOut("with(window)var prop, prototype; const (__parent__);");
tryItOut("/*for..in*/L:for(let prototype in ((3.141592653589793)())) {export __noSuchMethod__; }");
tryItOut("if() {{} } else {{var prop = @foo, __iterator__ = *::*; } }");
tryItOut("break ;");
tryItOut("/*for..in*/for(let __proto__ in (uneval(__count__)) -= \n '' ) {{}\nwith([1])export __count__; }");
tryItOut("/*for..in*/for(const [] = (this.__defineSetter__(\"prototype\", *::*)) in  /x/ ) break M;");
tryItOut("with((@foo)(<><x><y/></x></>))return [(({ __count__: [], __proto__: __proto__ }) * __noSuchMethod__ = <x/>) for each (prototype in <><x><y/></x></>)];");
tryItOut("with(@foo.eval(*))export __proto__;");
tryItOut("let (__proto__ = (this.__defineGetter__(\"__parent__\", function (__count__, __count__)<x><y/></x>)) << new ((new Function(\" set __parent__ __iterator__ (__iterator__) /x/g \")))(new Function( { yield <><xxx\f {__iterator__}={<x/>} /></> } ), this.zzz.zzz;), __parent__ = ) { /*infloop*/L:for(const ({ __count__: ({ __proto__: constructor }) }) = [15,16,17,18].some((yield;).__defineSetter__,  /* Comment */<x><y/></x>); <x><y/></x>.valueOf(\"number\"); (window | @foo)) {throw 0; } }");
tryItOut("do yield; while((<x><y/></x>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in {}--) {if(let (__noSuchMethod__ = @foo) this)  else  if (new Object()) {yield; } }");
tryItOut("/*for..in*/for(const __iterator__ in ((<x><y/></x>)(*::*)))<><x><y/></x></>;");
tryItOut("return false;");
tryItOut("with({}) with({}) with({}) { return; } ");
tryItOut("/*infloop*/while(eval(\"export *;\", <x><y/></x>).yoyo((__proto__ & *.yield))){/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in 5.0000000000000000000000) gc()with(<><x><y/></x></> /= 0.1)/*for..in*/for(let constructor in [z1,,]) {var prop; } const __count__; }");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <x/>) {} }");
tryItOut("const __noSuchMethod__, __iterator__ = false;\n\n");
tryItOut("/*for..in*/for(let [prototype, __proto__] = <x/> in  \"\" ) __noSuchMethod__");
tryItOut("while((new (constructor)() @ ()(export *;)) && 0){{var __iterator__; } }");
tryItOut("with({}) for(let y in []);");
tryItOut("L:if((( /x/ )[prototype])(+<><x><y/></x></>.valueOf(\"number\")).function::__parent__) {{__parent__ = __count__;(window); } }\t else  if (prototype = <x><y/></x>) export __count__; else {if(prop) {export getter;{} } else  if (prototype) export __noSuchMethod__; else {__proto__ = #1#, __count__; }return constructor = __iterator__; }");
tryItOut("/*infloop*/M:\ffor(let [({ __iterator__: prop, __proto__: [, [({ __count__: ({ prototype: ({ prop: prototype }), __count__: __count__ }) }), <y><z/></y> -= 1e+81.__parent__, , constructor, __count__], , [, , constructor, , ]] }), [[], , __noSuchMethod__], ] = (p={}, (p.z = this)()); this.zzz.zzz.isPrototypeOf(__count__++).hasOwnProperty(\"__iterator__\"); (([__proto__].filter(([1,2,3,4].map).apply)).yoyo(*::*))) /*infloop*/while((__proto__.*.__lookupGetter__(\"__parent__\"))){yield; }");
tryItOut("/*infloop*/ { return <x><y/></x>; } for(let __parent__; (prop.__iterator__ = prop); __parent__.__iterator__ setter= (new Array(<y><z/></y>,  /x/ ) .. (__parent__ = -1))) {;constructor, __parent__\nbreak ; }");
tryItOut("with({__count__: (eval(\";\", undefined))}){{{}var prototype; }{__proto__ = window, constructor =  /x/ ;export prop; } }");
tryItOut("M:switch(<y><z/></y>) { default: /*infloop*/while((\nconstructor)) '' break; if(this.__defineSetter__(\"__iterator__\", function () { return <><x><y/></x></> } )) (window); else  if ((1e4.@foo)) return [];break; case 5: /*infloop*/do throw true; while(__count__);break; case 4: L: const __iterator__ = [,], prop; }");
tryItOut("{}\n\nswitch(#3={a:#3#}) { case null: default: return 3;break;  }\n");
tryItOut("/*for..in*/for((__noSuchMethod__) in ((Math.sin)(((p={}, (p.z = window)())(\n[1,2,3,4].map, (<>__noSuchMethod__.prop = 033</>.( \"\" )))))\f))with(<x><y/></x>.(<y><z/></y>))return;");
tryItOut("yield");
tryItOut("export __parent__");
tryItOut("/*infloop*/M:for(({a2:z2}); ({ __count__: ({ (window.__noSuchMethod__): [], prototype: __iterator__ }), __count__: ({ constructor: [, prototype] }) }) = -0; (__count__.((p={}, (p.z = <x><y/></x>)())))) {/*infloop*/M:while(window)yield [z1,,]\n; }");
tryItOut("L:do <x/>; while((* !== <x><y/></x>) && 0);");
tryItOut("if((<x/>[([@foo.@* for (__count__.__proto__ in  /x/g ) for each (__count__ in <y><z/></y>)])])) ({}).hasOwnProperty else  if (\nthis | this) {yield; }");
tryItOut("try { with({}) { let(prototype) ((function(){try { throw StopIteration; } catch(__noSuchMethod__ if (x::constructor = <x/> ? 0x99 : \n<x/> *= __iterator__ = this)) { let(__iterator__, __iterator__) ((function(){let(<y><z/></y> = <x/>) { ;})()); } catch(__iterator__) { prop = constructor; } finally {  } })()); }  } finally { gc() } ");
tryItOut("L:switch(__iterator__ = false.constructor) { case 3: break;  }");
tryItOut("return; const prototype;");
tryItOut("if(constructor = (<><x><y/></x></>.@foo)) { if (({__noSuchMethod__ setter: Math.pow,  get __iterator__ prototype (prototype) { return ( { yield  /* Comment */* :: (new (function (__count__) { export *; } )((uneval(<><x><y/></x></>)), true)) }  = [15,16,17,18].map(Math.sin, new (function ([y]) { })()(prop,  /x/ ))) }  })) {export __iterator__;\fMath.sindefault: break;  }} else {export __parent__;; }");
tryItOut("<x><y/></x>\nL: {window; }");
tryItOut("{/*infloop*/do {__parent__ } while(<><x><y/></x></>); }");
tryItOut("L:with({__count__: <><x><y/></x></>}){gc() }");
