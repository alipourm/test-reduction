tryItOut("export *");
tryItOut("const __noSuchMethod__ = <x><y/></x>, __parent__ = <x/>; const prop\t\n");
tryItOut("{\t(*::*);{} }");
tryItOut("/*infloop*/for(var prop; ()(<y><z/></y>); eval(\"return;\", (false.eval(*)))) /*infloop*/do {return <x/>;break ; } while(function (__proto__, __iterator__) { return  /x/g  } );");
tryItOut("if(3) {var __iterator__, __parent__ = window; } else  if (__iterator__) {return  { yield constructor } ; }");
tryItOut("__iterator__.__count__ = prototype;");
tryItOut("for(let y in []);");
tryItOut("L:if(function(id) { return id }) export *; else if(window) with(*//h\n){<x/> } else throw #3={a:#3#};");
tryItOut("do {break ; } while((null) && 0);");
tryItOut("(new Function).apply");
tryItOut("M:if(<x><y/></x> ? *::* : this) { if ((new (this)(1e81))) export __parent__; else prototype = <x><y/></x>;}\n");
tryItOut("L: {export *; const __iterator__;/*infloop*/L:while(1e4)continue ; }");
tryItOut("with( /x/ ){const __noSuchMethod__ = __noSuchMethod__, __proto__ = <><x><y/></x></>; }");
tryItOut("var (<x/>);, __proto__ = <x><y/></x>; const set;");
tryItOut("for(let y in []);");
tryItOut("continue ;");
tryItOut("break ;");
tryItOut("L:if(<><x><y/></x></>.__defineSetter__(\"__iterator__\", (1 for (x in [])))) { if ([15,16,17,18].filter((1 for (x in [])), <x><y/></x>)) {const __count__ = (function ([y]) { })();{} }} else {; }");
tryItOut("if((__noSuchMethod__ = window)) {__noSuchMethod__ = this, prop;return <x><y/></x>; }");
tryItOut("gc()\nwith(return for (let in true) for (function::__parent__ in *::*))constructor = <x><y/></x>;");
tryItOut("M:with(<><x><y/></x></>){yield <x/>;return [1,,]; }");
tryItOut("M:if(__parent__.(<x><y/></x>)) {for(let y in [5,6,7,8]) let(__iterator__ = [15,16,17,18].sort(function(y) { yield y; export *;; yield y; }, prototype)) ((function(){return;})()); } else  if ( '' .yoyo(<y><z/></y>) << undefined.propertyIsEnumerable(\"prototype\")) /*for..in*/for(let prototype in __proto__) {export __proto__; }\n");
tryItOut("/*for..in*/for(const [prop, __parent__] = Function(prop, null).@* in delete *) let prop;");
tryItOut("M:if(new <x><y/></x>(@foo, prop)) { if (*::*.__noSuchMethod__.unwatch(\"prop\").*) L: yield; else throw *::*;}");
tryItOut("/*for..in*/for(let __count__ in ((function(q) { return q; })(prototype))){/*infloop*/for(let prototype; __parent__.__parent__ setter= function  __count__ ()-3/0; (window.__defineGetter__(\"prototype\", [1,2,3,4].slice).__parent__)) {(__count__); } }");
tryItOut(";");
tryItOut("/*for..in*/for(\t[prop, prototype] = <xxx>{__noSuchMethod__}</xxx> in (p={}, (p.z = true[undefined])())) {switch(<x><y/></x>) { default: return this; }let __noSuchMethod__ = (yield []), __count__; }");
tryItOut("do {throw *::*; } while((<y><z/></y>.hasOwnProperty(\"__noSuchMethod__\")) && 0);");
tryItOut("let (__proto__ = constructor, L:if(gc().__noSuchMethod__) { if (1.3) {{} } else {gc() }}) { let (__proto__ = window) { if(true) const __proto__ = __iterator__; else  if (*::*) yield; else {break ;gc() } } }");
tryItOut("this.zzz.zzz;");
tryItOut("M:if((({a1:1})(<x><y/></x>, [[]]).__iterator__ = <><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", new Function).prop = [ /x/g  if (null)].__lookupSetter__(\"prototype\"))) {/*for..in*/for(let <><x><y/></x></>, <y><z/></y> = <y><z/></y> in [[]]) throw <y><z/></y>;L: { } }");
tryItOut("while(((<x><y/></x> && @foo)) && 0)while(((0x99.__parent__.eval(__noSuchMethod__.__iterator__ setter= (__parent__).__defineSetter__) -= <><x><y/></\rx></>.__lookupGetter__(\"__noSuchMethod__\"))) && 0){/*for..in*/for((__count__) in \ftrue) 0; }");
tryItOut("/*infloop*/L:do {export *; } while(<x><y/></x>/*\n*/ in @foo);");
tryItOut("");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*/L:for(let __noSuchMethod__(true) in <x/>) export *;");
tryItOut("return;");
tryItOut("/*for..in*/for(let (prop) in (((( '' )(<><x><y/></x></>)))((new (#3={a:#3#} for (<x><y/></x> in null))).call(function  __iterator__ (__iterator__) { return __iterator__ } , constructor = ((p={}, (p.z = -3/0)()))))))/*for..in*/for(let constructor in ((Math.sin)([__parent__].filter(/a/gi).@foo)))");
tryItOut("M:if((*.constructor)) if(([15,16,17,18].map(({}).__lookupGetter__,  /x/g ))) var prop;");
tryItOut("/*for..in*/for(let [constructor, __parent__] = this.zzz.zzz in  /x/g ) {; }");
tryItOut("/*infloop*/for(yyy.(()); ( \"\" .yoyo( '' )); <x><y/></x> > <x><y/></x>) {{} }");
tryItOut("/*infloop*/for([11,12,13,14].filter; (__proto__.__proto__ = window.__defineSetter__(\"constructor\", <><x><y/></x></>)); /*\n*/window.__parent__) continue ;");
tryItOut("M:if(__count__.__proto__ = <y><z/></y>) L: {\treturn;yield <x><y/></x>; }\nexport *;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var [prototype, __parent__] = [z1,,] in __parent__ ^= <y><z/></y>) {return; }");
tryItOut("if( \"\" ) { if ( /x/ ) {__noSuchMethod__ } else yield <><x><y/></x></>;}");
tryItOut("L:switch((uneval(@foo.hasOwnProperty(\"__parent__\")))) { default: return;break; case [15,16,17,18].some(eval, [15,16,17,18].sort((<x><y/></x>).__defineSetter__, <x><y/></x>)): export *;break; case 0: return undefined;case *::*.constructor = undefined: {gc()export *; }yield;case this.__defineGetter__(\"__parent__\", Math.pow): export constructor; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; (eval(\" /x/g  ? true : <><x><y/></x></>\", eval(\"1e+81\", false))); [(new ((~undefined).apply)()) for (__parent__ in __proto__) for each (prototype in (*.__lookupGetter__(\"prototype\"))) for each (__count__ in prop) if (*::*)]) {/*infloop*/do  while(@foo);do break ; while(((p={}, (p.z =  '' )())) && 0); }");
tryItOut("/*infloop*/for(__count__ = *; \n<><x><y/></x></>;  /x/ ) var __parent__ = window;");
tryItOut("/*for..in*/for(const [prototype, __noSuchMethod__] = (this.__defineSetter__(\"__noSuchMethod__\", (new undefined(<><x><y/></x></>, *::*)))).@foo in ((new <x><y/></x>(this)).watch(\"__parent__\", Math.sin))) if([]) { if ([,,]) } else yield 1e4\n");
tryItOut("-");
tryItOut("switch(prototype.__iterator__ = this) { case true: break;  }");
tryItOut("__parent__\n");
tryItOut("gc()");
tryItOut("if((([11,12,13,14].filter) -= prototype\f = arguments)) { if (let (prototype, const __proto__ = arguments;) <x><y/></x>) gc()} else /*infloop*/while(<y><z/></y>)export prop;");
tryItOut("L:with({__noSuchMethod__: [,]}){yield @foo;yield <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for( /x/ ['__proto__'] in [1]) {constructor = <>\n<x><y/></x></>, prototype;return true; }");
tryItOut("__count__ = __count__;");
tryItOut("if(this.__defineSetter__(\"__iterator__\", function(q) { return q; })) M:with({x::__count__: prototype}){let prototype = window, __noSuchMethod__;constructor; }\nvar __proto__; else {var __proto__ = undefined, __iterator__ = <y><z/></y>;function(q) { return q; } }");
tryItOut("let __count__, __parent__;\n\n");
tryItOut("{throw <x><y/></x>;while((<><x><y/></x></>) && 0){yield 5.0000000000000000000000;; } }");
tryItOut("/*infloop*/do {yield x::function::__count__; } while((uneval(null)));");
tryItOut("M:with(null)gc()");
tryItOut("with({__proto__: (<><x><y/></x></> for (__parent__ in <x><y/></x>))})( /x/ );");
tryItOut("/*infloop*/for(<><x><y/></x></>; <x/>; __proto__) {{export prototype; }");
tryItOut("do {export *; } while(('fafafa'.replace(/a/g, (__iterator__).watch).yoyo( ''  >>= <x><y/></x>)) && 0);");
tryItOut("gc();");
tryItOut("/*infloop*/for(prop; new \tconstructor = __parent__ , __count__; __count__ = __noSuchMethod__) /*for..in*/L:for(let (prototype) in ((function (__count__) { var  ''  = <x/>, __parent__ = setter; } )(()))){L:if(<y><z/></y>) ; else  if (<><x><y/></x></>) var __proto__ = window, prop = <><x><y/></x></>;{return; } }");
tryItOut("/*infloop*/for(const ({ prototype: [] }) = [(p={}, (p.z = (<><x\t><y/></x></>.@*))())].sort(\t(new Function(\"const __proto__ = window;\"))); <y><z/></y> + <><x><y/></x></>.__defineSetter__(\"prop\", ('haha'.split).call); false ? #1=false.propertyIsEnumerable(\"__proto__\") : (<x><y/></x>.__noSuchMethod__).watch(\"prototype\", new Function)) var __parent__ = #1#, prop;\nreturn window;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\tvar __count__ in ((<><x><y/></x></>++.isPrototypeOf(new ([])([]))))((<x/>.isPrototypeOf(__parent__) <<= (5.0000000000000000000000(<x><y/></x>, prototype))))) {let(prop = window.__defineSetter__(\"__proto__\", function (__noSuchMethod__, prototype) { return <y><z/></y> } )) { return;(@foo);\nconst __iterator__, constructor;\n }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__([,]) in false) {gc() \"\" ; }");
tryItOut("/*for..in*/for([__parent__, each] = window in ([[window].map((({}).hasOwnProperty).call)])) {const prototype = true, constructor = window; }");
tryItOut("/*for..in*/M:for(const --false in ((((new Function(\"export *;\"))).call)(*::*)))throw <x/>;");
tryItOut("let (__noSuchMethod__, __iterator__) { /*for..in*/for(let prototype in ((p={}, (p.z = *.*)()))) {let __count__; } }");
tryItOut("export *;");
tryItOut("var prop = [];");
tryItOut("/*for..in*/L:for([__count__, __count__] = [[,] if (__count__)] in (#1=[([z1,,])[<x><y/></x>]])) { }");
tryItOut("if(<x/>[<><x><y/></x></>]) { if (([1,2,3,4].slice)(null)) {let __proto__, constructor =  /x/ ; } else ([,]);}");
tryItOut("with({get: Date(1e+81.__lookupSetter__(\"prop\")__parent__ = <y><z/></y> if (*::*), eval(\" /x/ \", <x><y/></x>))}){prototype; }");
tryItOut("with(({ prop: __parent__, __proto__: __parent__ }), [, __proto__, , prop] ? <x><y/></x> >= __proto__ : prototype){yield <x><y/></x>;throw true; }");
tryItOut("/*for..in*/for(let prop(__proto__ getter: function () { yield <><x><y/></x></> } ) in ((Math.sin)((3.141592653589793 !== [1,2,3,4].map())())))if(window) return <>\r<x><y/></x></>;");
tryItOut("export *; const prop;");
tryItOut("return;");
tryItOut("/*infloop*/for(__proto__; false; <y><z/></y>) {try { <y><z/></y>; } catch(__proto__) { return; } finally { var __iterator__, __proto__ = 0/0; }  }");
tryItOut("yield;");
tryItOut("with([*::*].filter(*))if((undefined.unwatch(\"__proto__\"))) { if (( /x/g  for each (__iterator__ in this).\nhasOwnProperty(\"prop\"))) __parent__} else export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__\r in [[1]]) return -3/0;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.__parent__ in let (__iterator__) <x><y/></x>) /*for..in*/for(const [__iterator__, __proto__] = <x><y/></x> in window) {yield;let prototype = undefined,  = <><x><y/></x></>;");
tryItOut("L: {do return <x/>; while((window) && 0); }");
tryItOut("L: {<x/> }");
tryItOut("{with({__parent__: (String(<x/>, <>yyy</>.hasOwnProperty(\"__iterator__\")))}){return; }L:if((__count__.__count__)) {return;; } else  if (eval(*, this)) export *; else throw this; }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("L:switch(--0.1) { case 2: break; continue ;case ('fafafa'.replace(/a/g, (<x><y/></x>).__defineSetter__)): let (prototype = prototype, __iterator__ =  '' ) { yield this; }break; case undefined: break;  }");
tryItOut("{}\ngc()\n");
tryItOut("while(((yield  '' )) && 0)/*for..in*/for(var __iterator__ in <x><y/></x>) {gc() }");
tryItOut("/*for..in*/M:for(let [__iterator__, prop] = <><x><y/></x></>.eval(<x><y/></x>) in window) {export prop;throw <><x><y/></x></>;__iterator__, constructor = (-1); }");
tryItOut("let(__count__ =  \"\" , prop = <x><y/></x>) ((function(){<><x><y/></x></>;})())");
tryItOut("\fif( /x/ .*) /*infloop*/for(__noSuchMethod__ = <><x><y/></x></>; *::*; window) gc() else  if (yield) return <x><y/></x>; else { }");
tryItOut("/*for..in*/M:for(prop in (yield *::*)) {throw  \"\" ;yield; }");
tryItOut("L:if(<><x><y/></x>\f</>.\f__lookupSetter__(\"__proto__\")) {yield <><x><y/></x></>;continue L; } else {}");
tryItOut("/*for..in*/for(const __count__ = @foo.propertyIsEnumerable(\"__parent__\").__iterator__ = <><x><y/></x></>.throw(this) ? __count__.(constructor) : 'fafafa'.replace(/a/g, function ()<><x><y/></x></>) in __iterator__.valueOf(\"number\")) {throw arguments; }");
tryItOut("let (constructor, __iterator__) { __parent__, prototype = window; }");
tryItOut("if([,,]) {__iterator__ = __proto__, prop =  '' ; } else export *;");
tryItOut("try { function(y) { yield y; return;; yield y; } } prop");
tryItOut("L: L:if(<x><y/></x>.isPrototypeOf(<><x>\f<y/></x></>)) throw <><x><y/></x></>; else  if (__noSuchMethod__ = <y><z/></y>) yield;");
tryItOut("with({}) __iterator__ = constructor;");
tryItOut("__count__ = prototype;");
tryItOut("/*for..in*/L:for(var __proto__ in (#1=-0)) throw  /x/g ;");
tryItOut("if([({a1:1})].map((1 for (x in [])))) \t{{\t} } else {export *;throw <><x><y/></x></>; }");
tryItOut("{let function::__proto__ = <x><y/></x>, function::prop = <x/>;yield *::*.isPrototypeOf(<x/>); }");
tryItOut("/*infloop*/for(const __count__; (function  __noSuchMethod__ (__count__)arguments() for each (__count__ in @foo)).yoyo(((uneval(false))));  /* Comment */yield <y><z/></y>) {let(__parent__ = ({ prop: __noSuchMethod__, __noSuchMethod__: __parent__ }) =  /x/g  >>>=<y><z/></y>, __noSuchMethod__ = [(true)[<x/>] for ((<y><z/></y>)(undefined) in <><x><y/></x></>) for each (__proto__ in __count__)]) ((function(){let(prototype = eval(\"<x><y/></x> % this\", ((yield <x/>)))) ((function(){this.zzz.zzz;})());})()); }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in __count__) let __count__ = window, __count__\n");
tryItOut("/*infloop*/L:for(var [, (#1=[#1#] + <><x><y/></x></>).watch, __iterator__] = *; <xxx>{__proto__}</xxx>; Function) {yield window;[1,2,3,4].slice }");
tryItOut(" /x/ .prop.__defineGetter__(\"__parent__\", this)");
tryItOut("/*for..in*/M:for([__proto__, __parent__] = ((p={}, (p.z =  \"\" )()).__noSuchMethod__) in 5.0000000000000000000000) {let (prop = <><x<y/></></>) { break M; } }");
tryItOut("if((++undefined)[get.__iterator__ getter= [1,2,3,4].map]) if(<y><z/></y>) {continue L; } else  if (( /* Comment */*)) {export __iterator__; } else {return; } else  if (\n(*::*.__parent__ =  '' ) < \n<>3/0</>) {throw (*::* -= #3={a:#3#}); }");
tryItOut("with({}) { for(let y in [5,6,7,8]) try { /*infloop*/for(var prototype; <y><z/></y>.@foo; yield 1e+81) if(5.0000000000000000000000)  else  if  \"\" ) __noSuchMethod__ } catch(__noSuchMethod__) { yield; }  } ");
tryItOut("/*infloop*/for((Error(*::*, <x><y/></x>)); (<><x><y/></x></>.prototype); (constructor)) {export *; }");
tryItOut("\tif(<y><z/></y>) return; else  if (<x/>) {export *;constructor; } const prototype;");
tryItOut("export __count__;");
tryItOut("/*infloop*/for(let __noSuchMethod__; 0; [<x><y/></x> for (__parent__ in 1e-81)]) (true);");
tryItOut("/*infloop*/for(const __iterator__; <y><z/></y>; <><x><y/></x></>) {}");
tryItOut("gc()");
tryItOut("while((__count__ = undefined) && 0)break ;");
tryItOut("if(__count__ ? <y><z/></y> : prop) { if (let(constructor) { __iterator__ = __count__;) function  prop ()<x><y/></x>} else prototype;");
tryItOut("{/*infloop*/for(let ({ __parent__: __parent__ }) = this.watch(\"constructor\", Math.pow); [__proto__]; this.__defineGetter__(\"__count__\", new Function)) {gc()continue L; }throw *; }");
tryItOut("M:if(({})) { if ([,,]) {gc(){} } else {return <><x><y/></x></>; }}");
tryItOut(" set __parent__ __parent__ (constructor, __noSuchMethod__) { yield  \"\"  } ");
tryItOut("L:if((function(q) { return q; }.eval((#1=[#1#])[this]))) {if( /x/g ) { if (window) <x/>; else const __noSuchMethod__, constructor = ({});} } else  if (undefined.*) {; }");
tryItOut("L: {export __noSuchMethod__; }");
tryItOut("switch(*::*) { default: break; break; case 4: break; case <><x><y/></x></>: yield;case 9:  }");
tryItOut("return [1,,];");
tryItOut("/*for..in*/for(prop in ((({}).hasOwnProperty)([[]])))function(q) { return q; }");
tryItOut("with({}) { ({ constructor: __proto__ }); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in this) /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in [[1]]) {yield;window }");
tryItOut("if((yield window)) export __parent__;");
tryItOut("with( /x/ \n){; }");
tryItOut("if(constructor = this((__parent__\n), function (__iterator__, prop) { return prop } )) export *; else  if ((constructor = (RangeError()))) export __noSuchMethod__; else {; }");
tryItOut("<y><z/></y>;\nexport __parent__;\n");
tryItOut("if(-1) ; else  if (*) {<><x><y/></x></>; } else throw *::*;");
tryItOut("export __proto__\ncontinue ;");
tryItOut("let(prototype, __parent__) { let(({ __count__: [, __parent__, __count__]//h\n, prototype: ({ prop: __parent__ }) }) = ((__count__ .@*:: <x/>)), __count__ = 5.0000000000000000000000) { export *;");
tryItOut("");
tryItOut("if(({x::constructor getter: ({}).__lookupGetter__\t, <>*.__defineGetter__(\"__parent__\", (<><x><y/></x></>).watch)</> })) {break ; } else  if (([, ] = ( .@ [*])) .@*:: new prop(<x><y/></x> ===  '' , __proto__)) {export *; }");
tryItOut("<><x><y/></x></>;");
tryItOut("{export __noSuchMethod__;; }");
tryItOut("this.zzz.zzz;");
tryItOut("{const __parent__;/*infloop*/for(\tvar set; __proto__; <><x><y/>\t</x></>) export *; }");
tryItOut("__parent__ = prototype;");
tryItOut("M:if(((p={}, (p.z = @foo / ({a2:z2}))())).valueOf(\"number\")) M:switch(__count__) { case 7: throw <x/>;case 8: (window);yield;var __iterator__;break;  } else \r if (yield <xxx {prototype}={<y><z/></y>} />.(3/0)) {((+<x><y/></x>).__parent__ = ( '' .yoyo(<x><y/></x>)));/*infloop*/for(var __proto__ = (({a1:1})((function ([y]) { })(), <y><z/></y>)); prototype.prop; -1) const __proto__, __proto__ = <x><y/></x>; }");
tryItOut("M:if(this) { }");
tryItOut("continue \nwhile((<x><y/></x>) && 0){ }");
tryItOut("/*for..in*/L:for(const prototype in (((1 for (x in [])))(prop = 1e81)))throw  \"\" ;");
tryItOut("return @foo; const __iterator__;");
tryItOut("if(((@foo)())) export constructor; else  if (@foo.@*) {yield; }");
tryItOut("L: {(<y><z/></y>);prototype = null, constructor; }");
tryItOut("L:if(prototype) {return;yield <x><y/></x>; } else {yield; }");
tryItOut("/*infloop*/for(let ({ prototype: ({ prop: __parent__ }), prototype: ({ __proto__: __proto__ }) }) = (<><x><y/></x></>\f.throw(null)); (__parent__ = null); <><x><y/></x></>.valueOf(\"number\")) return;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in new RegExp(><x><y/></x></>, -3/0)) M:if() { if (<><x><y/></x></> ^= @foo ? function ([y]) { } : ([<x/>].some(new Function))) {}\n} else {(0x99); } }");
tryItOut("/*for..in*/for(const __proto__ = <x/> in .2.__lookupSetter__(\"prop\")) {if([,,z1]) {<x><y/></x>;const prop; }/*infloop*/L:do function (__iterator__, __noSuchMethod__) { (undefined); }  while(@foo); }");
tryItOut("while((this.__parent__ = <><x><y/></\fx></> !== __parent__.\tprototype) && 0){L: {let constructor = <y><z/></y>, __noSuchMethod__ = [,,z1];do {export *; } while((__parent__) && 0); } }");
tryItOut("break ;");
tryItOut("do { } while((new (function  __noSuchMethod__ (constructor, __noSuchMethod__) { export __count__; } )(let (prop = <x><y/></x>) (typeof #1#), #1=[#1#])) && 0);");
tryItOut("L\t:if('fafafa'.replace(/a/g, [1,2,3,4].map)) M:if(4.) { if ( \"\" ) {var __noSuchMethod__ = 1e81; } else {const __parent__ = 1e+81, __parent__; }} else  if (this.zzz.zzz) with({}) return; else if(__noSuchMethod__ = <x><y/></x>) {yield; } else {return this; }//h\n");
tryItOut("L:if(__parent__ = \nwindow :: (@foo.propertyIsEnumerable(/(\"prototype\")/*)) { if (<><x><y/></x></> || -0.__lookupGetter__(\"prototype\")) {gc() }} else export __noSuchMethod__;");
tryItOut("L: {yield;; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = (1 for (x in []))() in function ([y]) { }) throw <x/>; const set;\t");
tryItOut("/*infloop*/for(let __count__; ({ get __proto__(__parent__, prop)(new (<x><y/></x>)(<><x><y/></x></>)) }).__defineGetter__(\"__proto__\", (eval(\"*\", window)).__defineSetter__); prop) {do {yield __proto__; } while((([1,2,3,4].slice)()) && 0);{} }");
tryItOut("let(__parent__) ((function(){for(let y in []);})())");
tryItOut("if((__iterator__ = 0)) { if ((new this().__lookupGetter__(\"__count__\"))[__parent__.constructor]) {break ; }} else (*);");
tryItOut("let (set) { __iterator__.prototype = ({ __proto__: ({ __count__: __parent__ }),  /x/ : ({ __count__: function ([y]) { } }) }) = __count__ }");
tryItOut("if( /x/ ) with({}) { yield; }  else //h\nreturn  /x/g ;");
tryItOut("L:if(function(id) { return id }.eval(*::*)) { if ((prototype for each (__count__ in @foo))) throw <x/>; else #1=[#1#];}");
tryItOut("if( /x/ ) (this); else  if (new (/a/gi)(@foo, <><x><y/></x></>)) throw <x/>; else {return <x><y/></x>;__parent__ = 5.0000000000000000000000, getter = 1.3; }");
tryItOut("/*infloop*/while(__count__ = constructor.__proto__ = [,,z1])L:with(({ prop:  { return  ''  } , prototype: [constructor, , prototype, __iterator__] }) = [prop.prototype = 1.3].some((<y><z/></y>).watch), prop = prototype ? 0/0 : export __iterator__;)L: throw 0x99;");
tryItOut("{yield prototype%=eval(\"\", ({a2:z2})).__parent__; }");
tryItOut("with({prototype: #1=({prop: (<x><y/></x>.(<><x><y/></x></>))})})L:if(undefined) { if ( /x/g ) __count__ = this, __count__ = false; else {return .2; }}");
tryItOut("/*infloop*/for([15,16,17,18].map(<ccc:ddd></ccc:ddd>function (__proto__, __noSuchMethod__) { yield this } , <y><z/></y>);  /x/g (); this, false) {yield *;\texport delete; }");
tryItOut("do /*for..in*/for(__count__ =  ''  in ({a1:1})) export *; while((function(y) { yield y; break M;; yield y; }) && 0);");
tryItOut("if(new 'haha'.split(window)) { if \n(1e81 <<= prototype) <><x><y/></x></>;} else {let prototype, __parent__;Math.sin }");
tryItOut("if(<><x><y/></x>yyy</>%=*::*) { if (<zzz><x><y/></x>.(-1).eval((constructor = (uneval(#1=[#1#]))))</zzz>) M:while((({ __noSuchMethod__: prop, __parent__: \r__count__ })) && 0)prop} else /*for..in*/L:for(var delete.prop in <y><z/></y>) constructor");
tryItOut("if('haha'.split) { if (((*::*)[__noSuchMethod__])) yield 0.1; else {setter, __iterator__ = window; }}");
tryItOut("/*for..in*/L:for(var [prop, __proto__] = -0.__lookupSetter__(\" \\\"\\\" \").constructor in new (Math.sin)(__noSuchMethod__,  '' )) {(this);{}\nfunction::__noSuchMethod__;\n }");
tryItOut("continue M;return;");
tryItOut("if(new (({}).hasOwnProperty)([z1,,]))  new  else prop =  '' ;");
tryItOut("switch([11,12,13,14].some) { case #3={a:#3#}: break; M:do yield __count__; while((<><x><y/></x></>) && 0);break; break; <x/>;return \f({a2:z2}) /x/g ; }");
tryItOut("switch(()) { default: break;  }");
tryItOut("if(<y><z/></y>.eval(<x><y/></x>).constructor) { if ([] = [[]] >> <x/>) yield __count__\n else return [(<><x><y/></x></> in *::*)];}");
tryItOut("/*infloop*/M:\tfor(var __proto__; function ([y]) { }; __parent__.__proto__ setter= <><x><y/></*\n*//x></> == function ([y]) { }.__defineSetter__(\"__parent__\", function(y) { yield y; if(__iterator__) { if (true) {let __parent__; }} else .2; yield y; })) {return true;L: {let __parent__; } }");
tryItOut("if(#1=[#1#]) { if (5.0000000000000000000000) {{} }} else {([1,2,3,4].slice).call }");
tryItOut("{}");
tryItOut("while((<x><y/></x> *= (undefined)()) && 0){gc() }");
tryItOut("let (({ __proto__: prop }), __proto__) { yield [ '' ]; }");
tryItOut("\u2028");
tryItOut("/*infloop*/for(({ __proto__: prototype }) = (new (<x><y/></x>)(__iterator__)); <y><z/></y> for (prototype in <x><y/></x>); false) (033);");
tryItOut("/*infloop*/for(const prototype; (function ([y]) { })(); *) return;");
tryItOut("/*for..in*/L:for(__parent__(__iterator__.(@foo)) in ((new Function)(null for each (__iterator__ in  /x/g ))))var prototype = window;");
tryItOut("if((window)[({})] /  '' .__lookupSetter__(\"__iterator__\")) {yield this;/*for..in*/M:for(var __count__ = __count__ = #1=[#1#] in ({})) {<x/> } } else  if ((({ constructor: __count__, prop: ({ getter: __parent__, __noSuchMethod__: ({ __noSuchMethod__: constructor }) }) }) = <><x><y/></x></>.unwatch(\"prototype\"))) {var prop; }");
tryItOut("/*infloop*/L:for(__count__.prototype = ({__noSuchMethod__: (p={}, (p.z = __noSuchMethod__)()) }); (p={}, (p.z = (<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\")))()); (<x><y/></x> , *::*)) const __iterator__, __proto__ = [[]];\nreturn <x/>;\n");
