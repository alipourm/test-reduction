tryItOut("/*infloop*/do  \"\" ; while(<\tx><y/></x>);");
tryItOut("L: {if(*) { if (3/0) return; else {__proto__ = 0/0, 3.141592653589793; }} }");
tryItOut("/*infloop*/for(Date();  /* Comment */<y><z/></y>; [,]) (<><x><y/></x></>);");
tryItOut("do function  prop (__noSuchMethod__) { return <><x><y/></x></> }  while((((function  __count__ (__noSuchMethod__) { const __proto__; } )().@foo)) && 0);");
tryItOut("let ([, , ({ constructor: prototype, __proto__: __count__ })]) { continue L; }");
tryItOut("/*infloop*/while( /* Comment */(this.zzz.zzz))export __parent__;");
tryItOut("/*infloop*/for(; (<y><z/></y>.valueOf(\"number\"))[ /* Comment */undefined]; (#0=(new ((eval).apply)(<><x><y/></x></>)) < (-<> { yield <x><y/></x> } </>))) {throw new *::*(<>(<x>)<y/></</>); }");
tryItOut("for(let y in []);");
tryItOut("return  ''  instanceof undefined.__lookupGetter__(\"constructor\");");
tryItOut("L:if(([({ __count__: ({ __parent__: ({ case 6: (new Function(\"var  /x/g , prop = #3={a:#3#};\"))break; : prop }) }) })] = [15,16,17,18].\fmap((arguments).watch, <><x><y/></x></> ?  \"\"  : *::*))) var prop = <y><z/></y>, __noSuchMethod__;/*infloop*/for(let ({ __proto__: prop, constructor/*\n*/: ({ __iterator__: [constructor, __parent__, , , __count__] }) }) = Number(); ({ __proto__: __iterator__ }) = \n[, , , ] == [].valueOf(\"number\"); (__iterator__ = constructor).__defineGetter__(\"__iterator__\", ({}).__lookupGetter__)) /*infloop*/while( /x/g )break ;");
tryItOut("break L;");
tryItOut("M:if(x::__parent__.__iterator__ setter= *.throw(this)) /*infloop*/do gc() while(prop); else  if (null) {{} } else switch(\f \"\" ) { default: break;  }");
tryItOut("/*for..in*/L:for(prop.__parent__ in (([1,2,3,4].slice)([__noSuchMethod__ for each (__count__ in *::*)]))){continue M; }\nprop;\n");
tryItOut("/*infloop*/for(var __iterator__; __count__ = <x><y/></x>; (( /* Comment */<x><y/></x>)++)) /*for..in*/for(const [constructor, __iterator__]\t = <x><y/></x> +  ''  in 3.141592653589793) {yield;break ; }");
tryItOut("__count__ = __proto__, __proto__ = *::*;");
tryItOut("<bbb xmlns:ccc=\"[z1,,]\"><ccc:eee></ccc:eee></bbb>");
tryItOut("\nreturn constructor;");
tryItOut("return <y><z/></y>");
tryItOut("gc()\nif(<y><z/></y>) gc() else  if (constructor) gc()");
tryItOut("/*infloop*/M:for(__noSuchMethod__ = <x><y/></x>; [1,,]; prototype) ");
tryItOut("return;");
tryItOut("L:while(((__count__.__noSuchMethod__ = ([,].propertyIsEnumerable(\"__parent__\")))) && 0)<x><y/></x>;");
tryItOut("/*for..in*/for(var prototype in ((gc)(__noSuchMethod__.prop getter= (new Function(\"__noSuchMethod__ = this;\")))))const get;");
tryItOut("break \n__count__\n");
tryItOut("M:with({__count__: [11,12,13,14].filter})yield;");
tryItOut("/*for..in*/[__noSuchMethod__, , ({ prototype: __iterator__, prototype: prop }), __noSuchMethod__] = (<x/>.prototype = __noSuchMethod__)((yield *::*))");
tryItOut("let (__count__ = [1,,]) { case ( /x/g )[constructor.__parent__ = *]: with(__count__){continue M;export *; }{{} } }");
tryItOut("/*infloop*/do {true\nreturn; } while(__iterator__);");
tryItOut("do {{}export *; } while((<x><y/></x>.( /x/g )) && 0);\n/*for..in*/for(let __parent__ = (null.__count__) in __iterator__) {return 1e-81;let constructor = <y><z/></y>, __parent__ = #1=[#1#]; }\n");
tryItOut("export *;\n\n{ }\n");
tryItOut("while((typeof 0.1) && 0)__parent__ = window;");
tryItOut("__iterator__, __iterator__");
tryItOut("if(new Number().__lookupGetter__(\"prototype\")) { if (#1# | null) /*infloop*/M:for((0 ? [1] : window); (Math.pow).call((#1=[#1#].eval(__parent__)), new *::*); RegExp(<y><z/></y>)) {(<y><z/></y>); }} else {switch(__iterator__|=true + (__count__ = *)) { default: /*for..in*/for(__noSuchMethod__ in this) {; }case window\n: break;  }const constructor = {}; }");
tryItOut("return (yield 0);");
tryItOut("while((({if(({__parent__: __count__, __parent__ getter: <x><y/></x> })) var __proto__ = window, prop = <x/>; else  if (__parent__[({a1:1})]) case 9: ;break; case __proto__.(<y><z/></y>) > __proto__.__noSuchMethod__ setter= [1,2,3,4].slice: break; case 0: yield <x><y/></x>;default: break;  else {;yield; }\nconst __proto__; } = this.__defineSetter__(\"__proto__\", function(y) { yield y; export prototype;; yield y; }))) && 0)/*for..in*/L:for([__parent__, prop] = --this in true) yield;");
tryItOut("(@foo)");
tryItOut("{}");
tryItOut("\f");
tryItOut("/*infloop*/do {/*infloop*/do L:if(#1=[#1#]) {dexport prop; } while((null for (__iterator__ in  /x/ ))[yield  '' ]);/*infloop*/for(#0=[ /x/ ]; <x><y/></x>; (<y><z/></y>.unwatch\n(\"<x><y/></x> \"))) (this); } while((let ([, , __proto__, ]) let constructor = -0, __count__ = <><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", new Function)));");
tryItOut("with([null]){L:if(<x><y/>\f</x>) {;return 1e-81; } else  if (<><x><y/></x></>) {return <><x><y/></x></>;throw __parent__; } }");
tryItOut("if((constructor !=  /x/g ))  else  if (this.__defineSetter__(\"prop\", ({}).hasOwnProperty)) export __count__;");
tryItOut("let(__parent__) ((function(){prop;})());");
tryItOut("switch( /x/ (*)) { default: break M;break; (undefined);break;  }");
tryItOut("export *;");
tryItOut("if(( /* Comment */*::*.hasOwnProperty(\"prototype\")\n)) {(__count__ = __iterator__);const __count__ =  \"\" , constructor; }");
tryItOut("/*for..in*/for(const <><x><y/></x></> ?  ''  : this.__parent__ in __parent__ = 0) {function (__count__, __proto__) { throw <x/>; }  }");
tryItOut("with({constructor: window})throw ({});");
tryItOut("if((__proto__ = 3/0 == this.*).__lookupSetter__(\"prop\")) { if (eval(\"window === null\",  /* Comment */@foo)) if(\f#2= /x/g ) return; else  if ([@foo if (null)]) * else {let prop = 0/0;throw prototype; } else throw <x/>;}");
tryItOut("yield;");
tryItOut("/*for..in*/L:for(const prop = /*\n*/window in <><x><y/></x></>) {function  __count__ (__proto__) { yield  /x/g  } continue L; }");
tryItOut("return;");
tryItOut("L: {(<y><z/></y>); }");
tryItOut("if((1 for (x in []))) {yield;constructor, __parent__ } else  if ((.2)(<><x><y/></x></>).__lookupGetter__(\"prototype\")) {gc() } else \nexport constructor;");
tryItOut("switch(((__iterator__.__proto__ getter= function ()null) * (<x><y/></x> !== __proto__ = <y><z/></y>))) { <bbb xmlns=\"((new Function)\f.watch(\"function::__iterator__\", function  constructor (prototype) { 1.3; } ))\"> </bbb> }");
tryItOut("let (__iterator__) { for(let y in [5,6,7,8]) let __proto__, constructor = <y><z/></y>; }");
tryItOut("/*infloop*/M:while([,,].unwatch(\"__noSuchMethod__\")){yield\n }");
tryItOut("let (__iterator__ = <><x><y/></x></>, prop = <y><z/></y>) {  }");
tryItOut("this.zzz.zzz;");
tryItOut("if((*::* -= <x/>)[prop = <x><y/></x>]) yield false;");
tryItOut("with({__iterator__: let __iterator__ = this, prop = -1})return;");
tryItOut("/*infloop*/do let __iterator__ = function ([y]) { };/*for..in*/M:for(prototype: <\t><x><y/></x></> in <x><y/></x>) {{} } const prototype; while((({a2:z2}).hasOwnProperty(\"__iterator__\") ? (1 for (x in []))( /x/ , window) : <x><y/></x> + <x/> !=  \"\"  %= window));");
tryItOut("/*infloop*/for(__parent__; null __proto__; *) /*__noSuchMethod__ getter: function (prop) { break L; } ");
tryItOut("let (function::__parent__) { L:while(([<x><y/></x>.(<><x><y/></x></>)]) && 0) }");
tryItOut("switch(eval(\"this\",  /x/g )) { case 5: if(3.141592653589793) { if (*::*) (<><x><y/></x></>); else {(*.watch }}case 8: break; {};break;  }");
tryItOut("{}");
tryItOut("/*for..in*/for(let [__proto__, prototype] = ([[]] .@  /x/g ) in  '' ) <><x><y/></x></>;");
tryItOut("/*for..in*/for([__iterator__, constructor]\f =  '' .propertyIsEnumerable(\"constructor\") in ~ \"\" ) {{L: function(q) { return q; }export constructor; } }");
tryItOut("/*for..in*/for(__count__ in (((Error()).watch)(<><{prototype}><ccc:ddd> </ccc:ddd></{prototype}></>)))if(__parent__.(@foo)) {}");
tryItOut("while((([__count__].some(Math.sin))) && 0)export *;");
tryItOut("if((Function())) {{}yield; }");
tryItOut("{break L; }");
tryItOut("M:if([15,16,17,18].sort(<x/>, 1e+81).__defineGetter__(\"prop\", function (__proto__, __parent__) { yield prototype } )) { if (__count__ = <x><y/></x>.unwatch(\"__proto__\")) {yield;__parent__ = *::*, getter = prototype; }} else {throw 1.3; }\ntry { for(let y in []); } catch(__proto__ if (function(){return setter = this;})()) { 'haha'.split } catch(__count__) { throw StopIteration; } \n");
tryItOut("if(constructor) {var prop, __proto__; } else  if (function(id) { return id }) break L; else {break ;yield; }");
tryItOut("{}");
tryItOut("with({}) let(__count__) ((function(){ = __count__;})());");
tryItOut("prop = __count__;");
tryItOut("if(([15,16,17,18].some(Function, window))) {yield; } else {{}return; }");
tryItOut("this.zzz.zzz;");
tryItOut("{yield;const prototype = <x/>; }");
tryItOut("return;");
tryItOut("L:with({__iterator__: constructor = [new 1.2e3( \"\" )].some(eval)})export function::__noSuchMethod__; const __count__\n__noSuchMethod__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var prototype = 'fafafa'.replace(/a/g, function  prop (prop, prop) { return <><x><y/></x></> } ) in *::*) {}");
tryItOut("/*infloop*/for(const __iterator__; true; <x><y/></x>) {}");
tryItOut("__iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__((-1)) in *) {const __noSuchMethod__, __noSuchMethod__ = <x/>; }");
tryItOut("{}");
tryItOut("if((-1 % 1.3)) {throw null; } else  if (({prototype: <x><y/></x>, __iterator__: new (function(y) { yield y; function  prop () { yield <><x><y/></\nx></> } ; yield y; })([1,,], <x><y/></x>) })) {/*infloop*/while(<y><z/></y>){export __parent__;; } } else {const __proto__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const constructor; __noSuchMethod__ = __parent__; <><></></>) while(((( /x/g .@foo).* && ( \"\" .__lookupGetter__(\"__iterator__\")) |= <x><y/></x>.(\t*))) && 0){{} }");
tryItOut("var __parent__ = *, prototype = *::*;");
tryItOut("switch(.isPrototypeOf(new (((({}).__lookupGetter__).apply).apply)())) { default: case 1: L:if(0\n.isPrototypeOf(1.3.__defineGetter__(\"__iterator__\", function(q) { return q; }))) const prop = 5.0000000000000000000000; else __count__;break;  }");
tryItOut("/*infloop*/for((p={}, (p.z = __iterator__.constructor)()); void ( /x/ .unwatch(\"prop\"))\t; [1,,]) {{__noSuchMethod__; }/*infloop*/while(new (.2).call(<x><y/></x>, true)){const __proto__ = <>\t<x><y/></x></>;yield @foo; } }");
tryItOut("{gc()throw  '' ; }\nlet __noSuchMethod__;");
tryItOut("do {__noSuchMethod__ } while((eval(\"break L;\", null\n)) && 0);");
tryItOut("{}throw 1e4;");
tryItOut("{__parent__ = __proto__;{return; } }");
tryItOut("/*infloop*/do {;export prototype; } while();");
tryItOut("with({__proto__: (\nnew  /x/g )((new (#1=[#1#])( '' , [z1])(__iterator__ = window, window)))})yield null;");
tryItOut("/*for..in*/for(__parent__ in ((gc)(<><x><y/></x></>.unwatch(\"prototype\")))){/*for..in*/L:for(var prop =  \"\"  in <><x><y/></x></>) {throw \x00; }/*infloop*/do {function(y) { yield y; yield  /x/g ;; yield y; } } while(<x/>); }");
tryItOut("L: {(1 for (x in [])) }");
tryItOut("{{return yield #1=[#1#];;{} } }\n\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in true) with(null.throw(window)){return;(<x><y/></x>); }");
tryItOut("/*for..in*/for(let constructor in <x/>) {const prototype = undefined; }\nyield <><x><y/></x></>;");
tryItOut("yield new ((__iterator__.__proto__ setter= ((1 for (x in []))).apply))((__count__ = __parent__), __iterator__);");
tryItOut("export __count__; const __noSuchMethod__;");
tryItOut("/*for..in*/for(const __proto__ in 0.1.valueOf(\"number\")) {(null); }");
tryItOut("/*infloop*/L:for(const __proto__; ((constructor)); (false)[<y><z/></y>]) let prop = true, constructor\t;");
tryItOut("while((<><bbb xmlns=\"__parent__.prop\"><!--yy--></bbb></>) && 0)");
tryItOut("/*for..in*/for(prop.__iterator__ in window) with( \"\"  != prop){__iterator__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([, __parent__, , []] in (__noSuchMethod__ <= <x><y/></x>)) {false;yield; }");
tryItOut("/*for..in*/for(var __proto__ in ((function  prototype (({ prototype: constructor }), constructor) { yield [11,12,13,14].some } )(constructor = null))){export *; }");
tryItOut("let(prop(__proto__)) { with({}) with({}) { export __parent__; } ");
tryItOut("/*for..in*/for(prop in ((new Function)(true))){}");
tryItOut("let (__proto__.__parent__) { /*infloop*/for(var __noSuchMethod__ = ({a2:z2}); (<x/>.yoyo(undefined)); function ([y]) { }[1e81]) ; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:while('fafafa'.replace(/a/g, function ()({})))/*infloop*/for(const __iterator__ =  '' ; this; __parent__) {{} }");
tryItOut("for(let y in [5,6,7,8]) [, __count__] = __iterator__;");
tryItOut("yield;");
tryItOut("if((__iterator__)[prop]) {break ; } else  if ( '' .__iterator__ = <y><z/></y>) \n{prototype; }");
tryItOut("return null;");
tryItOut("L: {gc()constructor = <><x><y/></x></> }");
tryItOut("let([, , , ({ __noSuchMethod__: ({ prototype: ({ __count__: ({ __proto__: function::__noSuchMethod__ }) }) }), prop: __noSuchMethod__ })]) { for(let y in []);");
tryItOut("switch((false ||  /x/g )) { default: export *;break;  }");
tryItOut("do ; while(() && 0);");
tryItOut("/*for..in*/for(let __count__ in (((<x><y/></x>.__lookupGetter__(\"prop\")) |= 'fafafa'.replace(/a/g, gc))( /x/ ))){/*for..in*/for(__iterator__ = ({ set prototype constructor (__noSuchMethod__, __noSuchMethod__) { return case 7: Functiondefault: if((new Date(false, undefined))) {let __iterator__ = __count__; } else  if ((window ? * : <x><y/></x>)) {gc(); }break; gc()case 7:  } ,  get __proto__(<x><y/></x>) { yield this; }  }).hasOwnProperty(\"__count__\") in this.eval(*)) {;while((true) && 0){let __proto__ =  '' , __proto__ = false; } }/*infloop*/for(__count__; @foo; <><x><'y/><'/x></>) {export __iterator__; } }");
tryItOut("switch((<x/>\n.yoyo(__count__: <x><y/></x>))) { default: break L;case [1] << this: let __iterator__ =  /x/ ;case 6: break; case __count__: gc()\nthrow case this: false;break; default: let function::__noSuchMethod__;break; case 0: case window: {}break; case <y><z/></y>: break; ;break; yield;\nvar prototype = prototype;\ncase Array(<><x><y/></x></>.hasOwnProperty(\"__parent__\"), window): {}yield;case prop: case 4: break;  }");
tryItOut("export *;\n( /x/g );\n");
tryItOut("return __parent__ = null.__lookupGetter__(\"prop\");");
tryItOut("for(let y in []);");
tryItOut("if(({__noSuchMethod__:  '' , __parent__: __noSuchMethod__ })) {throw window;function  __proto__ (prop, __noSuchMethod__) { yield false }  } else /*infloop*/do __noSuchMethod__; while( /* Comment */constructor);");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in <x><y/></x>) {yield; }");
tryItOut("{/*infloop*/for(__iterator__; undefined; #1=[#1#]) {yield undefined;yield [[1]]; } }");
tryItOut("while((((function ([y]) { })())(, <><x><y/></x></>).propertyIsEnumerable(\"__parent__\").__lookupSetter__(\"__noSuchMethod__\")) && 0){throw (new [1,2,3,4].map(<x/>, prop))((<x><y/></x>.yoyo(@foo)));*;\nconst prop, __proto__ = <><x><y/></x></>;\n }");
tryItOut("if(<x><y/></x>) const __count__; else  if (__noSuchMethod__) {export constructor;return; } else <x/>\nconst  = <x><y/></x>;");
tryItOut("/*infloop*/do {if(null >> ({})) {(<x><y/></x>);{} } else  if (<x/>()) {throw  /x/g ;\f } else {const __iterator__ = <x/>, constructor;const prop = undefined, constructor; }{} } while(\n(let (, prototype) __iterator__.__noSuchMethod__));");
tryItOut("let(__proto__) ((function(){throw constructor;})());");
tryItOut("/*infloop*/for(const prop = (); [15,16,17,18].some([1,2,3,4].map, __proto__.prototype = (yield [undefined].sort(function(q) { return q; }))); (~<><x><y/></x></>.__proto__)) let prop = this, __proto__;");
tryItOut("let(prop) ((function(){{}})());");
tryItOut("yield (\nfalse.propertyIsEnumerable(\"prototype\"));");
tryItOut("/*infloop*/for(([__iterator__ if (false)].unwatch(\"constructor\")); ({__parent__: #1# }); @foo ? [,,] : __iterator__) {break ;(true).call }");
tryItOut("if(({})) { if (window) {yield 0x99;return [1]; } else {gc()const prop; }}\n const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in new 3/0(<x><y/></x>, <x><y/></x>)) {new Function{<><x><y/></x></>;__parent__ = @foo, __parent__ = <y><z/></y>; } }");
tryItOut("if(({a1:1}) * __count__) {return <><x><y/></x></>;export *; } else {export constructor;if(false) {yield null; } else yield\n }");
tryItOut("let (__parent__) { export __proto__; }");
tryItOut("<employee id=\"1\"><name>Joe</name><age>20</age></employee>");
tryItOut("with({__noSuchMethod__: 3.141592653589793 > *}){eval*::*; }");
tryItOut("/*infloop*/L:while(__iterator__ ? constructor : *::* === constructor.__parent__ = window)([[1]].propertyIsEnumerable(\"__noSuchMethod__\"));");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while((let (__iterator__, constructor) constructor.constructor setter= [1,2,3,4].map .@x:: <x><y/></x> = (<x/>);) += *::*['']-=*::*.hasOwnProperty(\"__proto__\"))with({__count__: this.__defineSetter__(\"prop\", <y><z/></y>)})return;");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(\n(-0)) {<><x><y/></x></>; }");
tryItOut("false");
tryItOut("let (constructor = @foo) { {} }\nyield;\n");
tryItOut(";");
tryItOut("/*infloop*/for(let ({ constructor: ({ prop: ({ __proto__: ({ __parent__: ({ __iterator__: ({ __iterator__: __proto__ }), __parent__: ({ prop: __parent__, __count__: prototype }) }), prop: prototype }), prop: this }) }), __count__: __noSuchMethod__ }) = eval(\";\", ~(uneval(<><x><y/></x></>))); __count__.prototype getter= ( /x/ ).__defineSetter__; [11,12,13,14].sort) /*for..in*/for(\fconst prop = 1e81 in @foo) {export __parent__; } const prop;");
tryItOut("<x><y/></x>\n");
tryItOut("throw StopIteration;");
tryItOut("if((__proto__ = (<zzz><><x><y/></x></></zzz>.(__parent__ = constructor)))) {{} }");
tryItOut("L: var prop;");
tryItOut("if(([false].filter(new Function) | eval(\"window\", <x/>))) const constructor; else  if (prop.prototype getter= function(q) { return q; }) yield <x/>\ngc()");
tryItOut("if(null) { if (1e4) {yield <x><y/></x>;throw *; }} else break L;");
tryItOut("if(__iterator__) {/*infloop*/L:do {{ } } while(eval(\" /x/ .hasOwnProperty(\\\"constructor\\\")\", (Math.pow)(<y><z/></y>, *::*))); }");
tryItOut("/*for..in*/for(var [__parent__, ({ constructor: [] })] = <y><z/></y> =  \"\" .__parent__ =  ''  >>>=window in <><zzz> /x/g </zzz></>) {gc() }");
tryItOut("L: {while(( /x/ ) && 0)throw ({a1:1});throw this; }");
tryItOut("if((-0[this])) { if (undefined.__defineSetter__(\"constructor\", (({}).__lookupGetter__).apply)) {yield 033; } else window;}");
tryItOut("throw StopIteration;");
tryItOut("L:with({function::__count__: let (__proto__)  /x/ }){throw <x>\n<y/></x>; }");
tryItOut("__noSuchMethod__");
tryItOut("<><x><y/></x></>; const prototype;");
tryItOut("/*for..in*/for(var ((prototype = __iterator__))(<x><y/></\tx>) in 'fafafa'.replace(/a/g, <y><z/></y>)\n) {with({prop:  /x/g .watch(\"constructor\", (__noSuchMethod__).call)}) }");
tryItOut("/*for..in*/L:for([prop, prop] = <y><z/></y> in __noSuchMethod__) return;");
tryItOut("let(__noSuchMethod__, each = <x><y/></x>.yoyo(*::*)) { throw StopIteration;");
tryItOut("__parent__ = constructor;");
tryItOut("(new Function(#1=[#1#])); const __parent__;");
tryItOut("L:while((<x><y/></x>) && 0)break M;");
tryItOut("/*infloop*/for(new ({}).__lookupGetter__(); ++ /x/ ; *) {return; }");
tryItOut("/*for..in*/for(let [__parent__, __count__] = <{prop}><!--yy--></{prop}>.__parent__ = ((({prototype: x::prototype })) / true.unwatch(\"__noSuchMethod__\")) in return 1e+81; &= <y><z/></y>) const __parent__ = 1.2e3;");
tryItOut("/*infloop*/while(/*\n*/this.__defineSetter__(\"__iterator__\", eval)){break M; }");
tryItOut("/*for..in*/for(let [__iterator__, prop] = <y><z/></y> in *::*) \n(<><x><y/></x></>);");
tryItOut("/*for..in*/M:for(var [__count__, __parent__] = <x/> in 1e4) ({__iterator__ setter: null.prototype, __count__: (<x><y/></x>.(*).throw(<><x><y/></x></>)) }), __proto__ = [z1,,] const prototype = window;");
tryItOut("{/*for..in*/for(var [__proto__, __noSuchMethod__] = (undefined)(1e-81) in *) break ; }");
tryItOut("/*for..in*/for(let [, prop] in let (prototype = this, prototype = 0.1) D) 'haha'.split\n");
tryItOut("/*infloop*/do {prop = <x/>;; } while( );");
tryItOut("throw __proto__;");
tryItOut("with([x::__iterator__.__count__ = 0.1].sort(({}).__lookupGetter__))if(__parent__) {break L; } else  if (new (({}).hasOwnProperty)((new Function(\"let prototype =  /x/ , prototype = <x><y/></x>;\")), <y><z/></y>)) {{}break M; } else {throw <x><y/></x>;do gc() while((<x><y/></x>) && 0); }");
tryItOut("try { yield [(yield = this) for each (__parent__ in this) for each (__noSuchMethod__ in  \"\" )]; } finally { for(let y in []); } ");
tryItOut("L:switch(*::*) { default:  }");
tryItOut("/*infloop*/L:for(true = 1e4; <><bbb xmlns=\"prototype+=0x99;\">yyy</bbb></>; (({ __count__: __parent__, __count__: [[, __proto__, , __noSuchMethod__]] }) = prototype = <x><y/></x>)) /*for..in*/for(const [prop, prop] = * in null) {return <><x><y/></x></>; }");
tryItOut("/*infloop*/L:do [,,]; while(window);");
tryItOut("return (yield new 1e81(\"));");
tryItOut("/*infloop*/\ffor(__iterator__ = (<><x><y/></x></>.valueOf(\"number\")); true; <><x><y/></x></>(<><x><y/></x></>, prototype)) gc()");
tryItOut("with({__count__: (__noSuchMethod__ = __parent__.constructor)}){var constructor = <x/>, __proto__;gc() }");
tryItOut("/*for..in*/for(var __parent__ = (prototype = <><x><y/></x></>) in <x><y/></x>) {export *; }");
tryItOut("/*infloop*/for(<y><z/></y>; (constructor = <x/>); <x><y/></x> -= <x><y/></x>) /*for..in*/for(let __noSuchMethod__ in ((new Function)(window)))return;");
tryItOut("(<x><y/></x>);");
tryItOut("while(((let (prototype = <><x><y/></x></>) [undefined])) && 0){const __iterator__;throw <y><z/></y>; }");
tryItOut("L:switch(function(id) { return id }++) { case __parent__(<x><y/></x>)+=\tthis + undefined: default: let __iterator__;throw <x><y/></x>; const __parent__;break;  }");
tryItOut("/*for..in*/M:for(prototype in ((({}).hasOwnProperty)((this + <x><y/></x>.unwatch(\"__count__\").__lookupGetter__(\"__iterator__\")))))throw new Array();");
tryItOut("//");
tryItOut("if(function(id) { return id }(__noSuchMethod__ = {}) .. ({ __parent__: ({ prototype: prototype }), __iterator__: [] }) = ({ __proto__: prop })) {let (__proto__ =  /x/ , __iterator__) { @foo; }throw #1=[#1#]; } else  if (\fnew (#1#)(@foo, <x><y/></x>).valueOf(\"number\")) /*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in __proto__)  '' \n");
