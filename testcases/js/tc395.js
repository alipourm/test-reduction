tryItOut("M:while(([this for (__parent__ in [__noSuchMethod__, ]) if (5.0000000000000000000000)]) && 0)export *;");
tryItOut("switch(<><><!--yy--></></>) { case 7: case 4: case 8: default: throw window; const __iterator__;break; case 6: case @foo: break;  }");
tryItOut("if(<{__count__}></{__count__}>) {function () { export *; }  } else const __count__ = constructor;");
tryItOut("L:if( '' .__parent__ = <><x><y/></x></>) { if (prototype) (__parent__, __parent__); else ;}");
tryItOut("/*for..in*/for(var [__parent__, __count__] = <><x><y/></x></> >>>=1e+81[([null for (__proto__ in  \"\" )])] in __proto__) {eval }");
tryItOut("return this;");
tryItOut("{do /*for..in*/for(const prop in  /x/g .prototype = <y><z/></y>) {/*infloop*/M:for(var prototype = (-0); <x><y/></x>;  /x/ ) let prop = <x><y/></x>; { return (<><x><y/></x></> - <y><z/></y>) }  } while((__parent__ = (({ set __iterator__(prop)*::*,  for each (prototype in [1,,]) if (false) }))) && 0); }");
tryItOut("/*for..in*/for(const __proto__ in __count__ = constructor) if(<><x><y/></x></>) {prototype;throw <><x><y/></x></>; }/*\n*/ else  if (*) {export __parent__; } else {}");
tryItOut("/*for..in*/L:for((eval(\";\", eval(\"return;\", 1e81)))['__iterator__'] in .2) return <x/>;");
tryItOut("do  \"\"  while(((function::__proto__ = [,,z1].__lookupSetter__(\"__noSuchMethod__\"))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__(<x/>) in \nwindow) {return (window .@x:: __iterator__.__defineSetter__(\"__noSuchMethod__\", <><x><y/></x></>)); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in 1e81) {(1 for (x in [])) }");
tryItOut("/a/gi");
tryItOut("/*infloop*/for(let __count__ = <x><y/></x>; window; <x/>) {const __noSuchMethod__ = @foo, __iterator__; }");
tryItOut("{/*for..in*/M:for(let prop = @foo.propertyIsEnumerable(\"constructor\") in [1,,]) var prop, constructor; }");
tryItOut("return this;");
tryItOut("L: return;");
tryItOut("{do {[1,2,3,4].slice } while(( /x/ .__defineGetter__(\"prop\", function () { (function(id) { return id }); } )) && 0); }");
tryItOut("while((undefined.@foo) && 0){prototype;<y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in *::*.__defineSetter__(\"prototype\", case new Boolean(-0): throw <><x><y/></x></>;break; /*for..in*/for(const x::__noSuchMethod__ in {}) {export *; }break; gc() const prop;break; default: with({}) { for(let y in [5,6,7,8]) {} } break; )) {return;export *; }");
tryItOut("switch(@foo ? ((eval(\"@foo\", (-0))) *= __proto__ >>>=<><x><y/></x></>(<x><y/></x> | undefined)) :  /x/ ) { case 9: break;  }");
tryItOut("/*for..in*/for([__iterator__, constructor] =  \"\"  in <><x><y/></x></>) {;export __count__; }");
tryItOut("yield (<><x><y/></x></>.hasOwnProperty(\"__proto__\"));");
tryItOut("/*infloop*/for(const __iterator__; <><x><y/></x></>.valueOf(\"number\") .@ __iterator__.unwatch(\"__parent__\") + (this ? z : __parent__)(); String(constructor.prop setter= false, __noSuchMethod__ = <><x><y/></x></>)) {{export *;return 3; } }");
tryItOut("/*for..in*/for(const [__iterator__, prototype] = __parent__ in 1e81) yield *;");
tryItOut("L: {return;return; }");
tryItOut("with(1.2e3 >>>=__parent__){\n }");
tryItOut("L: {throw window;gc() }");
tryItOut("let __noSuchMethod__ = this, prototype = __iterator__");
tryItOut("M:if(eval(\"yield <><x><y/></x></>;\",  \"\" )) { if ((this.__defineGetter__(\"prop\", ({}).__lookupGetter__))) export *;} else throw window;");
tryItOut("L:while((this.__defineSetter__(\"set\",  /x/ \n)) && 0)case ( /x/ .__iterator__) >= (({__noSuchMethod__ setter: function (constructor, __count__)window, __parent__: eval(\"(yield yield  /x/g ;)\", __count__ = 4.) })): default: case 8: /*infloop*/for(var __iterator__; window; this.__defineSetter__(\"prop\", <x><y/></x>)) __noSuchMethod__;case yield true: break; ");
tryItOut("L: {/*for..in*/for(var __parent__.__proto__ in (('haha'.split)(<x><y/></x> ? 3.141592653589793 : *)))export __proto__; }\nM:with({__count__: prop})\f{return <y><z/></y>;(<x/>); }");
tryItOut("/*infloop*/for(({ __proto__: [prototype, ], __count__: ({ __proto__: prop, prototype: ({ __count__: [, ({ __iterator__: prototype, prototype: __parent__ })] }) }) }) = (__parent__ % (-0))[__parent__ = function ([y]) { }.eval((window ? <><x><y/></x></> : @foo))]; prototype = <x/>; (<zzz>#0=({__count__: (+<x><y/></x>)}).hasOwnProperty(\"__iterator__\")</zzz>.(constructor))) {__iterator__ = prototype; }");
tryItOut("/*for..in*/for(var prop = [11,12,13,14].map in .2.__lookupSetter__(\"__iterator__\").propertyIsEnumerable(\"constructor\")) {const __count__ = <y><z/></y>, __noSuchMethod__ =  get __proto__(constructor) { {} } ; }");
tryItOut("L: {( \"\" );<x><y/></x> }");
tryItOut("while((let (__parent__ = <x/>, prop = (\n*::*))  /x/ ++) && 0){do {\tvar prop = @foo, __noSuchMethod__;({}) } while((<><bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb></>) && 0); }");
tryItOut("while((set) && 0)/*for..in*/L:for(const __proto__ in  /x/ ) prototype = false, __parent__ = <x><y/></x>;");
tryItOut("L:while((<x/>) && 0){yield; }");
tryItOut("M:with({__noSuchMethod__: <x><y/></x>.(*::*)}){<x/>;\n\ngc() }");
tryItOut("{} const __count__;");
tryItOut("/*for..in*/for([constructor, prop] =  in this.zzz.zzz) {/*infloop*/for(const __iterator__ = 1.2e3; 1e81; <y><z/></y>) (__proto__);gc }");
tryItOut("while((<x><y/></x>) && 0){(<x><y/></x>).__defineSetter__yield; }");
tryItOut("M:if(new ((1 for (x in []))).call(<><x><y/>/</x></>\f.throw([,]), eval(\"with({constructor: ~4.})break L;\", * >>=  /x/g ), (undefined)({}) = (function  __noSuchMethod__ (__iterator__, __parent__) { return * } )(__parent__))(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>, (<><x><y/></x></>\t.__lookupSetter__(\"__iterator__\")))) <y><z/></y>; else  if (new ((*::*--.@*))((Number()), __iterator__ ?  /x/g  : 1.3++.yoyo(function::__noSuchMethod__.__iterator__ = *::*))) {__count__; }");
tryItOut("return \r<y><z/></y>;");
tryItOut(" '' \n");
tryItOut("M:while((#1=[#1#]) && 0){const __count__, __noSuchMethod__; }");
tryItOut("/*for..in*/for(var __parent__ in #1# *=  /x/g ) {L:with({__proto__: <x><y/></x>[undefined]--})let __noSuchMethod__, __noSuchMethod__;yield 033; }");
tryItOut("M:if(1e81) { if (<><bbb xmlns:ccc=\"'fafafa'.replace(/a/g, function  prop (__iterator__)<x/>)\"><ccc:eee></ccc:eee></bbb></>) } else E");
tryItOut("if(<x/>) { if () yield function ([y]) { };} else export *; const x::__iterator__;");
tryItOut("if(<><bbb xmlns=\"[15,16,17,18].map([1,2,3,4].slice, <y><z/></y>)\"><{__noSuchMethod__}></{__noSuchMethod__}></bbb></>) {gc() }");
tryItOut("/*infloop*/L:for(__proto__%=1e-81; (uneval((window.@foo++))); this.zzz.zzz) {<x><y/></x>; }");
tryItOut("return;");
tryItOut("export prop;yield;");
tryItOut("M:if(((yield))) export *; else {const prototype; }");
tryItOut("(<><x><y/></x></>);\n/*infloop*/M:while(<y><z/></y>)\n");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = (<bbb xmlns:ccc=\"#1#\"><ccc:eee></ccc:eee></bbb> for each (constructor in arguments)) in (undefined < <><x><y/></x></>)) do {var __proto__;yield; }/*\n*/ while((prototype = ({})) && 0);");
tryItOut("M:if(<><x><y/></x></>[this]) {switch(prototype = null) { default: function  __count__ () { yield window }  }export *\n } else /*infloop*/for(const  for each (prototype in <><x><y/></x></>) if (null); __iterator__.prototype = yield 1.2e3; ([])[<x><y/></x>]) {;{} }");
tryItOut("if(let (({ __parent__: __proto__ })) (false)[<x><y/></x>] || (__noSuchMethod__ = __proto__)) {if((({a1:1}))(*::*) || window) ; else {return -1; } } else {{L: {export *; }( /x/ ); } }");
tryItOut("yield constructor;");
tryItOut("/*infloop*/do {with(<x/> .. <x/>++)let constructor = window, __noSuchMethod__; } while(new (/a/gi)((eval(\"return <><x><y/></x></>;\",  '' ))));");
tryItOut("yield;");
tryItOut("do {M:while(((__parent__ -= \tnull)) && 0){; }(0.*); } while((<bbb xmlns:ccc=\" \"\" \"><ccc:eee></ccc:eee></bbb>.((this.zzz.zzz))) && 0);");
tryItOut("let(__count__ = __proto__ = false) { __iterator__ = __iterator__");
tryItOut("if(<x/>.valueOf(\"number\")) { if (([1] - prop)(constructor(<y><z/></y>, <><x><y/></x></>))) gc() else {return 1e81;/*infloop*/for(@foo; <y><z/></y>; false) throw <y><z/></y>; }}");
tryItOut("{/*infloop*/M:while(<x><y/></x>)throw true; }");
tryItOut("if((yield  /x/g .@*)) return function(id) { return id }; else  if (\n{}) {prop getter: eval; }");
tryItOut("/*for..in*/for(var __iterator__ = yield new __parent__+= \"\" ((<x><y/></x>.(<x><y/></x>))) in (#0=[,,z1])) {/*infloop*/do {yield *; } while([z1,,]);gc() }");
tryItOut("if((this.__defineGetter__(\"prototype\", (1 for (x in []))))) { if (prototype.__proto__ getter= function(q) { return q; }) {constructor = ({a1:1}); } else /*for..in*/for(const __noSuchMethod__ in ((this)(<x><y/></x>)));[z1,,]; const __count__;}");
tryItOut("{return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const __iterator__ = <><x><y/></x></> in 0) {({}); }");
tryItOut("export *;");
tryItOut("/*infloop*/for(let prototype = ; __noSuchMethod__|=<><x><y/></x></>[(window.__lookupGetter__(\"__count__\"))]; (gc(prop = <><x><y/></x></>.@*, <bbb xmlns:ccc=\"<x><y/></x>\t()\"><ccc:eee></ccc:eee></bbb>)).propertyIsEnumerable(\"prop\")) __parent__");
tryItOut("let ([, ({ __iterator__: __count__, __parent__: ({ __count__: prototype }) }), , , ] = ({__count__ getter: 'haha'.split, function::prop getter: 1e-81 }) += ~#1=[#1#] ? (__iterator__\n) : ((/a/gi)(1e-81)), __parent__) { {{} } }");
tryItOut("(this)(this) = prop;");
tryItOut("if(({__parent__: (__proto__ = __proto__)})) {{}prototype; }");
tryItOut("/*infloop*/for(var [, , , ({ prototype: constructor, __proto__: prop })] = ; let (prototype, prop) (prop = <y><z/></y>); ((set%=<x/>\f.prototype).__lookupSetter__(\"__proto__\"))) while((null.throw(<x/>)) && 0)yield;");
tryItOut("while((\nprototype = 4..unwatch(\"__noSuchMethod__\")) && 0)gc()yield;");
tryItOut("L:with({prop: <x><y/></x>.(@foo)((yield <x/>))})prop = <x><y/></\nx>");
tryItOut("L:if(({__count__: (prototype.__iterator__ ? yield undefined : (0)[null])\f, __iterator__: __iterator__ = [1] }).throw(function ([y]) { })) {return;let (__proto__, __noSuchMethod__ = __parent__) { Function } }");
tryItOut("if(<x><y/></x>.([z1])) <x><y/></x> else  if ( /x/  * [,,z1]) this;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("with({__proto__: <x><y/></x>})export *;");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) __noSuchMethod__ = prototype;");
tryItOut("/*infloop*/do L: yield; while(window | <y><z/></y>);");
tryItOut("with({prototype: *.hasOwnProperty(\"__iterator__\")}){yield;+ }");
tryItOut("yield false;");
tryItOut("if((*::* ^= @foo ^ #1= /x/g )) {continue L; }\n;");
tryItOut("while(((undefined | __iterator__)) && 0){gc()return null; }");
tryItOut("for(let y in [5,6,7,8]) throw __proto__;");
tryItOut("{(<><x><y/></x></>);if(__count__) ; }");
tryItOut("{}");
tryItOut("L:with({__parent__: function ([y]) { }}){prototypeexport __proto__; }");
tryItOut("return;break M;");
tryItOut("if( '' .__iterator__) { if ((yield <x><y/></x>)) /*infloop*/L:do {[1,2,3,4].mapreturn <x><y/></x>; } while(#2=({__noSuchMethod__: window})); else {function(y) { yield y; return;; yield y; } }}");
tryItOut("/*infloop*/L:for(this.__defineSetter__(\"__iterator__\", (({}).__lookupGetter__).call); (prop.__parent__ setter= __count__.@foo).isPrototypeOf(0/0.unwatch(\"__iterator__\")); prototype.__noSuchMethod__) ((__noSuchMethod__)(1.3, window)['__iterator__'])");
tryItOut("/*for..in*/for(__noSuchMethod__ = <x/> in <x><y/></x>) {(false);gc() }");
tryItOut("/*infloop*/do (new ({}).hasOwnProperty(<x/>)); while(<x><y/></x>.__lookupGetter__(\"__iterator__\").__lookupSetter__(\"prop\"));");
tryItOut("if(@foo) return *::*;");
tryItOut("while(((new (function(y) { yield y; *;; yield y; })( /x/ , [,]))) && 0){; }");
tryItOut("with([] = (new Object(<x><y/></x>)))do /*for..in*/for(const constructor in prototype) {__noSuchMethod__;; } while(((({constructor: [<x/>], constructor: __proto__.( /x/g ) }))) && 0);");
tryItOut("/*for..in*/M:for(var (prop)(new <y><z/></y> .@ <><x><y/></x></>((null if ( \"\" )), __iterator__)) in ((function (prop, constructor) { return __count__ = ((<x><y/></x>)[5.0000000000000000000000]) } )([prop, ] = 0/0.__lookupGetter__(\"__count__\")\t)))if(0.1) { if (<x><y/></x>) yyy else {gc() }}\r");
tryItOut("for(let y in []);");
tryItOut("const __noSuchMethod__;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = new (<><x><y/></x></>)() in (Math.sin).call(false, <x><y/></x>, <><x><y/>\f</x></>)) gc()");
tryItOut("if(<y><z/></y>) { if (try { let(set = prop = 3) ((function(){throw constructor;})()); } catch(constructor if (function(){this.zzz.zzz;})()) { for(let y in [5,6,7,8]) return this; } catch(__noSuchMethod__ if (function(){let(prototype, __proto__ = <><x><y/></x></>) { for(let y in []);})()) { with({}) prop = prop; } catch(__iterator__ if constructor) { this.zzz.zzz; } finally { for(let y in []); } ) {; }} else ");
tryItOut("/*infloop*/for(let <><{__count__}><!--yy--></{__count__}></>; (this.eval(<x/>)); ([15,16,17,18].some(/a/gi, *::*) for each (prop in  /x/g ))) {throw <><x><y/></x></>; }");
tryItOut("throw constructor;");
tryItOut("M:if((new (<x/>)())) function (__parent__, __count__)__noSuchMethod__ else {gc() }");
tryItOut("with({constructor: ({__parent__: <y><z/></y>})}){while((this.__lookupSetter__(\"__noSuchMethod__\")\n) && 0)__parent__ = <><x><y/></x></>, __count__ = [z1,,]; }");
tryItOut("if(<><>this.__defineSetter__(\"__parent__\", (new Function(\"\")))</></>.eval(this.zzz.zzz)) { if (<><x><y/></x></> :: <><x><y/></x></>) { } else -3/0;}");
tryItOut("for(let y in [5,6,7,8]) throw __parent__;");
tryItOut("{; const constructor;do return <x><y/></x>; while(([]) && 0); }");
tryItOut("(__count__)\n/*infloop*/for(var __count__; prop.([1,,]); <y><z/></y>) {return;throw <y><z/></y>; }\n{continue L;return; }\n");
tryItOut("return 3;\t\nreturn;");
tryItOut("let(__parent__ = prototype|=__parent__, prototype = 0x99 == 1.3 if (#1=[#1#])) { this.zzz.zzz;");
tryItOut("do L:if() {let __count__, prop;yield; } else {let __count__; } while(((({a2:z2}) ?  \"\" \n : <y><z/></y> +=  '' )) && 0);");
tryItOut("with({}) { {} } ");
tryItOut("L:while((*.valueOf(\"number\").__proto__ = constructor = <x><y/></x>) && 0)/*for..in*/for([__count__, constructor] = constructor in arguments) yield\n");
tryItOut("while((arguments) && 0)\n");
tryItOut("{throw 3;/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; false) {export constructor; } }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*/for(var prototype.__proto__ in ((/a/gi)(this)))let __proto__;");
tryItOut("{L:if(<x><y/></x>.(undefined)) throw this; else  if (<><x><y/></x></> ? false : <><x><y/></x></>) [1,2,3,4].slice/*for..in*/for(prop = ({a1:1}) in @foo) __iterator__ }");
tryItOut("{}");
tryItOut("/*infloop*/__parent__");
tryItOut("return;");
tryItOut("let (prototype) { return <x/>; } const prop;");
tryItOut("{if(this) ( '' ); else  if (window) {yield;let prototype = <y><z/></y>, __iterator__ = __parent__; } else {export prototype;continue L; }return __count__\n__iterator__ = *, __proto__ =  '' ;; }");
tryItOut("/*infloop*/L:for(<xxx>{__count__}</xxx>; (prop) = this; __count__) {throw <y><z/></y>; }");
tryItOut("let (prop =  \"\" ) { __count__; }");
tryItOut("/*for..in*/for(__parent__ in ((function  prop (prototype) { (null); } )(<><x><y/></x></>)))yield\nL: {let prototype = window, prototype;break ; }");
tryItOut("<x/>.__iterator__ = constructor;");
tryItOut("L:switch(new ('fafafa'.replace(/a/g, function  __noSuchMethod__ () { return ('fafafa'.replace(/a/g, [1,2,3,4].map)) } ))(__noSuchMethod__ = ({ constructor: function::__count__ }))) { default: break; case Y: L:switch(this.__defineSetter__(\"prop\", function  __noSuchMethod__ () { let __noSuchMethod__ = __parent__, __noSuchMethod__ =  '' ; } )) { default: return;break;  }break; break; export __count__\nbreak;  }");
tryItOut("/*infloop*/L:for(const __noSuchMethod__ = (function (__iterator__, __count__) { yield window; } ).call(<x><y/></x>, *::*); (__iterator__ = *::*); (({__count__: 1.3, __proto__ getter: function (constructor, __parent__)4. }))) {/*infloop*/for(const prop = <x/>; window;  \"\" ) {export *;let __iterator__; }throw <y><z/></y>; }");
tryItOut("if(({__parent__: *::*, set: <><x><y/></x></> })) {Function } else {yield *::*;return [[1]]; }");
tryItOut("throw <y><z/></y>\n");
tryItOut("M:if(5.0000000000000000000000) export *; else  if (<x/>) {let __parent__, __iterator__; }if(0x99) {gc()yield; }\nreturn;");
tryItOut("L:while((Array((3.141592653589793 *= 5.0000000000000000000000) && null,  for (__noSuchMethod__ in *::*) if (undefined))) && 0)\f{/*for..in*/M:for(let __noSuchMethod__((this.zzz.zzz)++) in ((new Function)( /x/ ))){'haha'.split }switch(<x><y/></x>.(<x/>)) { case 6: case prop. get @foo() { {} } : break; default: gc() const __proto__; } }");
tryItOut("if((1e81.valueOf(\"number\"))()) {throw *::*;; }");
tryItOut("/*infloop*/for(__proto__; [11,12,13,14].filter; (\r0/0\n)) {gc()(true); }");
tryItOut("let (constructor = (yield null), [, , ] = return *::*) { do {(<x/>); } while((\t<><x><y/></x></> -= *::*) && 0); }");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = (<x/>.prototype = <><x><y/></x></>.throw(<><x><y/></x></>)) in ({prop: <x><y/></x>,  set __count__ prop (constructor, constructor) { yield (function ([y]) { })() }  })) continue ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in [(<x><y/></x>)[this]]) {if(constructor = <><x><y/></x></>) throw window; else  if ( /x/ ) {const __noSuchMethod__;<!--yy--> } else (); }");
tryItOut("/*for..in*/for([<xxx>{__parent__}</xxx>, prop] = (prototype.((Exception(undefined, (function ([y]) { })())))) in __proto__) {try {  } catch(__iterator__ if (function(){prop = <x/>;})()) { throw StopIteration; } ; }");
tryItOut("/*for..in*/for(const __parent__ in ((function(y) { yield y; gc(); yield y; })([~this]))){//h\n{}continue L\n(<y><z/></y>); }");
tryItOut("/*infloop*/M:for(const ({ setter: [[({ prototype:   prop }), ({ prototype: __proto__ })], constructor, , , ] }) = (__iterator__.__proto__); (__parent__)-=({__proto__ getter: function(y) { yield y; {}; yield y; } }); <x/>) {{([z1,,]); } }");
tryItOut("/*for..in*/M:for(const __proto__ in ((({}).__lookupGetter__)(window))){}");
tryItOut("L: {<x><y/></x>export __iterator__; }");
tryItOut("let __noSuchMethod__ = <y><z/></y>.prop = <y><z/></y>, prototype = (uneval(true.@*));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ([1,2,3,4].slice)() in (__count__.__noSuchMethod__ = <><x><y/></x></>)) if(window)  /x/g ;");
tryItOut("if(__iterator__.watch(\"prop\", new Function)) { if (true) (#3={a:#3#}); else if( /x/g ) { if ([,,z1]) {export *;(1.2e3); }} else ;\f}");
tryItOut("with((constructor = <><x><y/></x></>) .@x:: (null) -= (uneval((__noSuchMethod__.prop))) | ( /* Comment */(__count__ = null)))({ prop: __noSuchMethod__, prototype: __parent__ }), __noSuchMethod__;");
tryItOut("/*for..in*/L:for(const __count__ in ((gc)( '' ))){this.zzz.zzz;return window >>> <x><y/></x>; }");
tryItOut("switch(((prop.__count__ = undefined))((eval).call(constructor, 1e4).isPrototypeOf((prop = __noSuchMethod__)))) {  if (([11,12,13,14].sort)) }");
tryItOut("if((@foo)[false]) {let __count__;<x/>; } else {yield;return __parent__; }");
tryItOut("M:if(<x/>) export *; else {if(true) {let __count__, __noSuchMethod__ = [1,,]; } }");
tryItOut("L:if(window) let __iterator__ =  \"\" ; else  if (<x><y/></x>) {return *::*; } else 3/0;\nexport *;\n");
tryItOut("/*for..in*/for(const __proto__ in ((gc)((this.__defineGetter__(\"__noSuchMethod__\", <x/>)).valueOf(\"number\"))));");
tryItOut("");
tryItOut("with({__iterator__: <><x><y/></x></>})return;");
tryItOut("throw prototype;");
tryItOut("with({}) { with({}) throw StopIteration; } ");
tryItOut("__iterator__\nwhile((3.141592653589793) && 0){var __parent__ = <x><\fy/></x>, __iterator__; }<><x><y/></x></>;");
tryItOut("if((window.throw(({ __noSuchMethod__: ({ __noSuchMethod__: __count__, __noSuchMethod__: __iterator__ })\t, __noSuchMethod__: [] })))) { if (({__proto__: 0/0})) {return;gc() }} else {throw false; }");
tryItOut("do {M:if([,,z1]) yield; } while(((yield  /x/g  instanceof <x><y/></x>)) && 0);");
tryItOut("/*infloop*/while( /* Comment */Function(<y><z/></y>)){{var __iterator__; } }\n/*for..in*/for(let prototype = (constructor) = (yield 3/0) in 0) return;");
tryItOut("/*for..in*/for(constructor in (((yield <x><y/></x>).__defineSetter__)((eval(\"[1,2,3,4].slice\", <x><y/></x>)))))const __proto__, prototype;");
tryItOut("/*infloop*/do throw function::__proto__;\t while(yield);");
tryItOut("do {} while((((true.__defineSetter__(\"__parent__\", ( /x/ ).__defineSetter__)).__defineSetter__(\"__count__\", (<y><z/></y>).watch))) && 0);");
tryItOut("(new Function).call");
tryItOut("return;gc()");
tryItOut("if(let (__parent__) this) throw -0; else {yield [1,,];{} }");
tryItOut("return; const __proto__;");
tryItOut("{function  __count__ (__noSuchMethod__, __count__)thisgc() }");
tryItOut("/*for..in*/for(var __parent__ in  /x/g )  { yield eval(\"([z1]);\", ({}).hasOwnProperty) } ");
tryItOut("const __count__; const __parent__;");
tryItOut("yield;const __noSuchMethod__, __proto__ = __noSuchMethod__");
tryItOut("/*for..in*/for(constructor = <x/> ? -1 : <><x><y/></x><\t/> in  /x/g ) export *;");
tryItOut("export *;");
tryItOut("__iterator__ = prop;");
tryItOut("/*for..in*/M:for(const __iterator__ = (function  prop (prop, prop) /x/ )(\n[[1]], 4.) in (<><x><y/></x></> |= <y><z/></y>)) /*infloop*/while(eval(\"<>gc()</>\", [15,16,17,18].filter(({}).__lookupGetter__, <x><y/></x>\f.hasOwnProperty(\"__noSuchMethod__\")))){{}yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in []) __iterator__;");
tryItOut("if((yield this)() ? (__noSuchMethod__ = *::*.@foo) : 1.2e3) { if (eval(\"yield {} <= <x><y/></x>\", ([1]\n))) /*for..in*/for(true['__parent__'] in prototype.(({}), <y><z/></y>.hasOwnProperty(\"prototype\"))) {if(<x><y/></x>.__lookupGetter__(\"__proto__\")) { if (!<y><z/></y>) (1.2e3); else }\n }} else {throw __count__; }");
tryItOut("L:with({constructor: @foo}){{} }throw constructor;");
tryItOut("if([,,z1]) { if ((<><x><y/></x></>.prototype[((yield yield <x><y/></x>;))])) { } else gc()}");
tryItOut("/*infloop*/while(new (arguments)()){true; }");
tryItOut("L:with({__parent__: __noSuchMethod__.__noSuchMethod__ setter= function (__parent__)<x><y/></x>}){export prototype; }");
tryItOut("__parent__ = <y><z/></y>");
tryItOut("/*for..in*/for(var [constructor, constructor] = this.__defineGetter__(\"__proto__\", (<x/>).__defineSetter__) in (<><x><y/></\tx></>.__defineSetter__(\"__noSuchMethod__\", new Function))) (__noSuchMethod__);");
tryItOut("M:with({__proto__: (<zzz><x><y/></x></zzz> .@*:: yield prop = __count__ for each (__parent__ in new Error(<x><y/></x>)) if (<x><y/></x>))}){yield; }");
tryItOut("let (({ __iterator__: setter, __noSuchMethod__: prototype }) = new /a/gi(this, <><x><y/></x></>), prop) { (undefined); }");
tryItOut("if((__iterator__)[__parent__]) { if (delete <x><y/></x>) export constructor; else gc()}");
tryItOut("with({}) yield @foo.isPrototypeOf(window) ^= [[[]]].some(<><x><y/></x></>);");
tryItOut("");
tryItOut("/*for..in*/for(const __iterator__ = 1.3 in @foo) {return \tundefined; }\nreturn;");
tryItOut("{;var constructor = @foo, __parent__ =  \"\" ; }");
tryItOut("__proto__ =  /x/g , __noSuchMethod__");
tryItOut("/*for..in*/for(__proto__ in ( \"\" .isPrototypeOf(#3={a:#3#}))) yield  /x/ ;");
tryItOut("yield <><x><y/></x></>\n(*::*);");
