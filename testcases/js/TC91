
tryItOut("try { with({}) { prototype = __count__; }  } catch(__iterator__ if (function(y) { yield y; gc(); yield y; }).call(window--, (Math.sin)())) { prop = yyy, __parent__ } catch(__noSuchMethod__ if <y><z/></y>) { __count__ = prop; } catch(__parent__) { return (__proto__.((<><x><y/></x></>.constructor = <><x><y/></x></>))); } finally { with({}) throw __parent__; } ");
tryItOut("/*for..in*/for(var __noSuchMethod__.prototype in 033) gc()\n");
tryItOut("return;");
tryItOut("let (__parent__) { throw undefined;prop = __parent__;\f }");
tryItOut("/*infloop*/for(let __iterator__; [11,12,13,14].sort;  /* Comment */[z1,,]) {do {let __parent__ = <><x><y/></x></>, constructor; for each (__noSuchMethod__ in {}) } while((null) && 0); }");
tryItOut("{\n{export prop; }yield try { return  '' ; } catch(get if (function(){yield;})()) { gc() } catch(__parent__ if  /x/ ) { {} } catch(__proto__ if <><x><y/></x></>) { <y><z/></y>; } catch(__iterator__ if (function(){})()) { ; } catch(__count__ if <x><y/></x>) { continue ; } finally { 0 } ; }");
tryItOut("L:with({__proto__: 'fafafa'.replace(/a/g, new Function)})/*for..in*/L:for(const [__proto__, __proto__] = (({__iterator__: <x><y/></x> })) in 1e+81) {continue ; }");
tryItOut("{ }");
tryItOut("export __iterator__\n");
tryItOut("{} const function::prototype;");
tryItOut("while((__noSuchMethod__ && this) && 0){gc()\n/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in true) (@foo); }");
tryItOut("if((@foo >>>  /x/g )) {__count__;let __count__; } else  if (( \"\"  || <x><y/></x>)) export *; else let prop = __iterator__;");
tryItOut("const __noSuchMethod__ = *;");
tryItOut("L:if(function::constructor = __noSuchMethod__) export prototype; else  if ((new (function  prop (__parent__) {  } \t).call())) break ; else {/*infloop*/M:for([]; @foo; -1) {gc()return; }; }");
tryItOut("if(<><xxx>{__proto__}</xxx></>) with(new (/a/gi)().unwatch(\"prototype\")){throw <x><y/></x>; } const __iterator__;");
tryItOut("/*infloop*/for( /* Comment */(gc()); 1e4 < 1e4 ^= eval(\"window\", ((uneval(<x/>)))); __count__) let __parent__ = undefined;");
tryItOut("let(({ __iterator__: __count__ })) ((function(){with({}) { {} } })());");
tryItOut("<><x><y/></x></>\nthis;\n");
tryItOut("/*for..in*/for(let __iterator__ = (gc) for each (__parent__ in <><x><y/></x></>( /x/ , *)).isPrototypeOf(__iterator__) in __proto__ = @foo in <><x><y/></x></> <= *::*) /*for..in*/for(const function::prop = return [1] in <><x><y/></x></>) {gc() }");
tryItOut("with({__noSuchMethod__: ( ''  for (__iterator__ in <x/>))}){export *;export prototype; }");
tryItOut("function(y) { yield y; continue ;; yield y; }");
tryItOut("/*for..in*/for(const prop in ((/a/gi)( /x/g )))yield <x><y/></x>\n");
tryItOut("let (__parent__, prop = #1#) { yield; }");
tryItOut("/*infloop*/L:do {( '' ); } while(prop);");
tryItOut("with({__noSuchMethod__: [1,,].eval(<x><y/></x>)}){throw <><x><y/></x></>; }");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x><y/></x>) ;M:if(<><x><y/></x></>)  with  else  if (<><x><y/></x></>) 4.; else (function ([y]) { })()");
tryItOut("/*infloop*/M:do {null = [,];{} } while(<><x><y/></x></>.__lookupSetter__(\"__count__\").propertyIsEnumerable(\"__proto__\") <= this.__defineSetter__(\"constructor\", Function));");
tryItOut("let (__parent__, prototype = this.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)) { if(arguments.constructor) {return; } else  if ((<x/>)[ /x/ ]) yield *::*; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <y><z/></y>.watch(\"prototype\", false) in (Function())) ;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("with((getter = __parent__ = ({a1:1}) ? eval(\"{}\", *::*) :  /x/ .__lookupSetter__(\"prop\"))){let __noSuchMethod__, prototype; }");
tryItOut(";");
tryItOut("gc");
tryItOut("if(({ set __parent__(\f) { yield 033 for each (constructor in true) } ,  set __count__ constructor (__parent__) { yield <><x><y/></x></> == false }  })) {/*for..in*/L:for(var [prototype, constructor] = <><x><y/></x></> in <>__noSuchMethod__</>) {(function(id) { return id });; } } else  if ( { export *; }  = __count__) export prototype; else {throw constructor; }");
tryItOut("export *; const __proto__;");
tryItOut("if(<x/>) { if (window) {return 1.2e3; }} else undefined");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <><x><y/></x></>) {__proto__, __proto__throw 1e+81; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (new ({}).hasOwnProperty((each(<y><z/></y>) = window if (false))))) {/*for..in*/L:for(var prop.__count__ in [1,,]) {/*infloop*/L:while( '' ){return <y><z/></y>; } } }");
tryItOut("gc()");
tryItOut("L:do {let __parent__;;\f } while((__parent__ = __noSuchMethod__ ? (/a/gi)(5.0000000000000000000000) : {}.prototype) && 0);");
tryItOut("M:switch('fafafa'.replace(/a/g, Function)) { (({ __proto__: ({ __noSuchMethod__: __iterator__, __noSuchMethod__: __noSuchMethod__(__proto__) }), __count__: ({ prop: __parent__, __proto__: ({ __parent__: prototype, __count__: ({ constructor: [__proto__, ({ __noSuchMethod__: prop }), ({ null: prop, prototype: __iterator__ }), , ], prop: [, ({ __noSuchMethod__: __noSuchMethod__, __count__: __iterator__ }), ({ __iterator__: __count__ }), prop] }) }) }) }) = (constructor.eval(window) for (__proto__ in window))) }");
tryItOut("let __iterator__ = function ([y]) { };;");
tryItOut("/*infloop*/for(let __iterator__; [11,12,13,14].some; ((<><x><y/></x></>\n) - function(y) { yield y; yield  '' ;; yield y; })) \t#1#;");
tryItOut("if(<y><z/></y>.watch(\"__iterator__\", function(y) { yield y; export x::constructor;; yield y; })) {throw *::*; } else  if (*::*) ;");
tryItOut("throw prop;");
tryItOut("continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in ({ set __parent__ __noSuchMethod__ (__parent__) { break ; } ,  set __iterator__() { yield [1,,] }  })) {{}M:if(window) let ; else  if (@foo) gc() else ; }");
tryItOut("/*infloop*/for(const constructor; prop.__parent__ = <x><y/></x>; return *::*) { /x/ ;const __iterator__; }");
tryItOut("if(__noSuchMethod__) { if (<y><z/></y>) {export prototype;continue M; } else {export *;{} }}");
tryItOut("let((\f{ __parent__: [__count__], __iterator__: [] }) = ([11,12,13,14].filter), __proto__ = new (3.141592653589793)()) { for(let y in [5,6,7,8]) let(__proto__ = __noSuchMethod__) ((function(){})());");
tryItOut("let (yyy = __noSuchMethod__ = <y><z/></y>) {  if (<y><z/></y>.__defineGetter__(\"null\", new Function)) const constructor; }");
tryItOut("switch( '' .isPrototypeOf(__proto__)) { default: export __proto__;return false;break; case __noSuchMethod__.__iterator__ = function(id) { return id }: break; case new (function(y) { yield y; __noSuchMethod__;; yield y; }).call(): /a/gibreak; case 7: break;  }");
tryItOut("{return;throw __parent__|=[,,]; }");
tryItOut("/*for..in*/M:for(prop in <><x><y/></x></>) {;var prototype = <x><y/></x>; } const constructor;");
tryItOut("M:if((new constructor().__defineSetter__(\"__proto__\", function(y) { yield y; ;; yield y; })).__lookupSetter__(\"prop\").__lookupGetter__(\"__parent__\")) {with({prop: new this()}){(<x><y/></x>); }yield <x><y/></x>; const prototype; } else {let (x::constructor = @foo) { switch(-3/0) { case *: gc()break;  } }export *; }");
tryItOut("let (prototype = undefined) { prop: (new Function)(*::*)while((.@foo) && 0)  }");
tryItOut("/*infloop*/do {{} } while(prototype.<x><y/></x>);");
tryItOut("L:if(((new ()).watch)((get .. -0), (prototype = <x><y/></x>))) {throw __proto__; }");
tryItOut("{ }");
tryItOut("let (__noSuchMethod__ = (yield \nprototype.*), __iterator__) { /*for..in*/for(const (new (<><x><y/></x></>)())(new (function(y) { yield y; export *;; yield y; })(<><x><y/></x></>, false)) in ((function  prop (__noSuchMethod__) { yield ((function (function::__count__) { throw window; } ).call(<y><z/></y> && __iterator__, ~[1], <x><y/></x\t>))[--__count__ = undefined] } )(<y><z/></y>.constructor = <><x><y/></x></>)))yield; }");
tryItOut("L:switch((new new (function  constructor (__count__)__count__)(<><x><y/></x></>)(('fafafa'.replace(/a/g, (-0)) |= <><x><y/></x></> != __count__)))) { default: break;  }");
tryItOut("/*for..in*/M:for(let [prototype, prototype] = (__iterator__) in false) {L: constructor getter: ({a2:z2}) }");
tryItOut("([15,16,17,18].map(gc,  '' ) & __count__)");
tryItOut("L: \r{yield;throw  '' ; }");
tryItOut("/*infloop*/do return <><xxx>{__iterator__}</xxx></>; while((__iterator__.constructor setter= function (constructor) { return * } ));");
tryItOut("/*for..in*/M:for(const <><x><y/></x></>.prop in (([[]])(1.2e3)))var __proto__, constructor;");
tryItOut("do { } while(((<><x><y/></x></> if (</*\n*/><x><y/></x></>))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (3.141592653589793)(window) in 1e-81) {return @foo; }let(__proto__ = __iterator__.__lookupGetter__(\"__iterator__\"), prototype) { try { const constructor; } catch(__iterator__) { throw <><x><y/></x></>; } ");
tryItOut("/*infloop*/L:for(let null.throw(<x/>) =  '' ; (new (/a/gi)(__proto__.prop = undefined.__defineGetter__(\"__noSuchMethod__\", Math.sin), eval(\"<x/>\", [,]))); window) [z1] >>> (({ __count__: __parent__ }) = (__noSuchMethod__ .. @foo)) = ([15,16,17,18].some((function  __noSuchMethod__ () { break ; } ).call, this << <><x><y/></x></>.function::__parent__)), __count__ =  /* Comment */<x><y/></x\t>");
tryItOut("if((*.isPrototypeOf( \"\" )) .@ <x><y/></x>) yield #3={a:#3#}; else (constructor).apply");
tryItOut("/*infloop*/for(__iterator__ = ([[,,]]); -3/0.throw(*); *::* if (Math.pow)) {}");
tryItOut("M:do {prop = __iterator__, prototype;{} } while(((Function())) && 0);");
tryItOut("let (prototype = ({__proto__ getter: /a/gi, __parent__: undefined }), __parent__) { yield; }");
tryItOut("for(let y in []);");
tryItOut("if(*::*) return; else break ;\t\n");
tryItOut("if((yield true)) { if (new ( /x/ )()) undefined;} else {{}\n{}\n }");
tryItOut("gc()\n{}\n");
tryItOut("M:with({__proto__: <><x><y/></x></>})");
tryItOut("L: <x><y/></x>;");
tryItOut("yield undefined;");
tryItOut("yield; const __noSuchMethod__;/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <x><y/></x>) {export __parent__; }break L;");
tryItOut("while(( /* Comment */((function (prototype, prop) { yield __proto__ } ).call((__count__ = <><x><y/></x></>), ))) && 0)export *;");
tryItOut("export *;");
tryItOut(" /x/g ;\nexport *;\n");
tryItOut("if((__iterator__.(this.@foo))) {__iterator__gc() }");
tryItOut("const __parent__ = <><x><y/></x></>, prototype;");
tryItOut("return <><x><y/></x></> > true;");
tryItOut("let(__parent__ = this.__defineSetter__(\"__noSuchMethod__\", function ()__iterator__.__count__ setter= Math.sin)) ((function(){for(let y in []);})());");
tryItOut("with((null if (*)))__proto__");
tryItOut("return;");
tryItOut("with([[prototype], ({ __iterator__: ({ __proto__: constructor }) })] = <y><z/></y> && 1.3--){const __proto__, constructor = thiswith({({ __noSuchMethod__: ({ prototype: ({ __noSuchMethod__: [constructor, __parent__], __noSuchMethod__: __proto__ }), __noSuchMethod__: constructor }) }): (({ __noSuchMethod__: prop }) = @foo)})/*for..in*/for(__noSuchMethod__.__proto__ in (('haha'.split)((__parent__--).hasOwnProperty(\"prop\")))){let (prop) { {}return *::*; }if(<y><z/></y>) { if (#3={a:#3#}) (this); else { }} }");
tryItOut("let (prop = *, prototype = __parent__) { let (__proto__, __parent__) { {} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in ((function ([y]) { })())[[,,z1]]) throw 5.0000000000000000000000;");
tryItOut("/*infloop*/for(let setter; false; <x><y/></x>) {export prototype;const constructor; }");
tryItOut("/*infloop*/do  while(window);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in (1.2e3 &= this)) {/*infloop*/M:do {{} } while('fafafa'.replace(/a/g, [1,2,3,4].slice)); }");
tryItOut("if( \"\" ) { if (__parent__) {const __parent__ =  /x/ ; }} else __proto__;");
tryItOut("return (new Function(\"return -1;\"))((this &=  /x/ ), <y><z/></y>);");
tryItOut("/*infloop*/L:do yield *::*; while(yield);");
tryItOut(" { var __noSuchMethod__ = true; } ");
tryItOut("switch((<><x><y/></x></>)[ /x/ ]) { case 5: export prototype; }");
tryItOut("yield __parent__\ngc()");
tryItOut("with({__parent__: new (function ([y]) { })()}){export __proto__; }\n");
tryItOut("throw StopIteration;");
tryItOut("return\nlet (__iterator__) { ; }");
tryItOut("do {if(let (constructor = <x><y/></x>) /*\n*/[15,16,17,18].map([1,2,3,4].map, <x><y/></x>)) { if ((__proto__ = <x><y/></x> .@*:: new <x/>())) return ({a1:1}); else {return; }}M:if(<x><y/></x>) { if ((({ get __count__ constructor (__parent__, __proto__) { yield __count__ } , __proto__: window }))) export *;} else {__count__; } } while(([11,12,13,14].sort) && 0);");
tryItOut("if(true) M:do {export __parent__; } while((__proto__) && 0); else  if ((__proto__) .@*:: <x><y/></x>.@*)  else {if((0/0[this])) const constructor, prop = <><x><y/></x></>; else {0;; }/*infloop*/for((((<y><z/></y>).__defineSetter__).call(<x><y/></x>, -0)); 1e4 :: 0/0; eval(\"<x><y/></x>\", ({a2:z2}))) {return;export constructor; } }");
tryItOut("if((p={}, (p.z = arguments)())) { if (__noSuchMethod__ = 1e-81) 'haha'.split} else {return;export prototype; }");
tryItOut("var __iterator__;\nwhile((let (constructor, __parent__ = <y><z/></y>) <><x><y/></x></>.__noSuchMethod__ = [,,z1]) && 0)continue ;\n");
tryItOut("M:do /*for..in*/for(#1# in ((function  prototype () { yield prototype = window } )(__proto__ = window.watch(\"constructor\", function (__noSuchMethod__, __proto__) { throw <x/>; } )))){with([1]){export *;throw #3={a:#3#}; }#1=[#1#]; } while((\t<zzz>#1=<><x><y/\f></x></><//zzz>.((let (({ constructor: __parent__ }), __proto__) ((undefined)[<><x><y/></x></>])))) && 0);");
tryItOut("/*for..in*/for(var (<x><y/></x>)(false) in 0) *;");
tryItOut("M:if(<>@foo.__lookupGetter__(\"prop\")</>) { if (('fafafa'.replace(/a/g, gc))) <y><z/></y>;} else {if(window) {{}<y><z/></y> } else  if (window) export *; }");
tryItOut("/*infloop*/for(__iterator__; (Iterator(<x><y/></x>)); this.__defineSetter__(\"__noSuchMethod__\", (new function  prototype () { return  /x/  } ((new window()), <\f><x><y/></x></>)).watch)(\fconstructor = null.unwatch(\"__count__\"))) {gc()/*infloop*/do {constructor =  /x/ , constructor = __iterator__;yield -3/0; } while(prototype); }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <x><y/></x>) {break ; } const constructor;");
tryItOut("L:with(eval(\"*::*\", <y><z/></y>)){continue ; }");
tryItOut("/*infloop*/M:for(let __count__; <><>yyy</></>;  \"\"  && new (__count__ for each (__iterator__ in [,,]))(false >>= <><x><y/></x></>.hasOwnProperty(\"__proto__\").__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__), *::*)) (undefined ? ({a1:1}) : window);");
tryItOut("");
tryItOut("/*for..in*/for(const [prototype, constructor] = <y><z/></y> in (yield *::* - arguments for each (__proto__ in ((__parent__ =  /x/g \n).propertyIsEnumerable(\"__count__\"))) if (new <x><y/></x>()))) {{(@foo);({}).hasOwnProperty } }");
tryItOut("M:if(__noSuchMethod__) yield __count__; else var __parent__, __count__ = @foo;");
tryItOut("let (prototype = (window)(false,  '' ), constructor = (__parent__.((__iterator__ = (-0))))) { while(([*::*].sort(<x/>)) && 0)/*for..in*/M:for(var [__iterator__, __count__] =  ''  in window) { '' ;export __noSuchMethod__; } }");
tryItOut("/*infloop*/do <x/>; while(([11,12,13,14].filter));");
tryItOut("(1 for (x in []))");
tryItOut("if(this.__defineSetter__(\"prop\", (__iterator__ = false))) { } else  if (((yield yield ({a2:z2})))) {let (__proto__) { return; } }");
tryItOut("export __noSuchMethod__;");
tryItOut("if( '' ) continue M; else  if (*::*) export let; else {}");
tryItOut("try { return (constructor setter: 'haha'.split.__iterator__ = 3); } catch(prop) { constructor.prototype = prototype; } finally { [] = __noSuchMethod__; } ");
tryItOut("*");
tryItOut("with({}) { with({}) { for(let y in []); }  } ");
tryItOut("/*for..in*/for([__iterator__, __parent__] = undefined in (window)) export *;");
tryItOut("/*infloop*/for(const ({ __count__: [({ __parent__: ({ __iterator__: __parent__, __noSuchMethod__: prototype }), constructor: [, ({ constructor: ({ __parent__: prop, prop: __proto__ }) })\f, __count__, __parent__, ] }), ], prototype: [prototype, [({ __iterator__: __iterator__, __parent__: [constructor, ({ __noSuchMethod__: __noSuchMethod__, __iterator__: __count__ }), ] }), [, , ({ __proto__: ({ __parent__: __parent__ }) }), ({ __count__: prototype, __parent__: [, , __iterator__, __count__] })]]] }) = window.eval(prop.__parent__ = new (function  prototype (__count__, get)__noSuchMethod__)( /x/ , 0.1)); (<y><z/></y> @ <><x><y/></x></>); let (constructor = __proto__ = (1e+81.yoyo(window)[ /x/ ])) (uneval((__iterator__\n)))) {do {return; } while((delete  \"\" ) && 0);\n(<><x><y/></x></>)\n }");
tryItOut("return <y><z/></y>;");
tryItOut("for(let y in [5,6,7,8]) const prop;");
tryItOut("/*for..in*/for(const constructor =  '' .eval([z1]) in __count__) export *;");
tryItOut("yield;throw window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__.__iterator__ in eval(\"<x/>\", ({a1:1}))) gc()");
tryItOut("with((0))/*infloop*/while([,,]){{} }");
tryItOut("{yield  \"\" \n{<><x><y/></x><!--yy--></><x/>, <><x><y/></x></>continue L; } }");
tryItOut("/*infloop*/do {gc() } while(1e-81)\n");
tryItOut("let(prototype = ( /* Comment */__parent__), ({ __noSuchMethod__: prototype, : ({ __count__: __proto__ }) }) = constructor) ((function(){yield (__parent__.prototype getter= gc);})());");
tryItOut("{if( '' ) { if ((eval(\"<><x><y/></x></>;\", __noSuchMethod__ = <><x><y/></x></>))) {{} } else const prop;}const __noSuchMethod__ = ((<x><y/></x>.__lookupSetter__(\"__count__\"))[<y><z/></y>]), prototype = <x/>; }");
tryItOut("L:if(__proto__ = __parent__) { if ([this]) {throw <><x><y/></x></>; } else continue M;}");
tryItOut("return [window if (<y><z/></y>)];");
tryItOut("M:with(*::*)for(let y in []);");
tryItOut("if(undefined <<= eval(\"true\", [])) { if ((*.__proto__).valueOf(\"number\")) {export *; } else {__parent__; }}");
tryItOut("for(let y in [5,6,7,8]) yield return;;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const function::__proto__ in <><x><y/></x></>) {yield; }");
tryItOut("break ;");
tryItOut("/*infloop*/M:while(<x/>)const __parent__ = <x><y/></x>, prototype = 4.;");
tryItOut("");
tryItOut("with({}) yield *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const function::__proto__ in <x><y/></x>) {(1 for (x in [])) }");
tryItOut("L:with(((<x/>).call(<!--yy-->.(<x/>), ((__noSuchMethod__) = function(id) { return id }.hasOwnProperty(\"__parent__\")), let (__iterator__ = <x/>.throw(<x/>), __count__ = [,,]) prop)))with(prop = prototype%=this){{}; }");
tryItOut("yield __proto__.function::__parent__ getter=  /x/ ;");
tryItOut("/*for..in*/for(const __parent__ = 3/0 >>>=false in <><x><y/></x></>) yield;");
tryItOut("/*for..in*/for(const __proto__ in gc()) return  /x/g ;\n");
tryItOut("if([[1]]) { if (<><x><y/></x></>) {const __iterator__ = window; }\t} else {export *; }with({__count__: this}){{} } const __iterator__;");
tryItOut("");
tryItOut("if(<zzz>(this.zzz.zzz)</zzz>) export *; else  if (<><x><y/></x></>) var __noSuchMethod__ =  '' , __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in prop) {yield; }");
tryItOut("M:if([null >>> @foo for each (* in  \"\" ) for each (__noSuchMethod__ in undefined)]\t) {; } else  if (({constructor: __count__})) {continue M;let prop; } else if(<>constructor = case {}: default: break; var constructor, __iterator__ = null;break; case 1: break; case 8: case true: break; case 0/0: ;</> != <x/>) {yield; } else  if (()) {export __noSuchMethod__; }");
tryItOut("for(let y in []); const __proto__;");
tryItOut("while((__iterator__ = *::*.__lookupGetter__(\"__noSuchMethod__\")) && 0)true");
tryItOut("__count__ = undefined;");
tryItOut("switch(Math.sin) { default: break; case 5: break; break;  }\ngc()");
tryItOut("let (constructor = let (__iterator__) __count__.(<x><y/></x>), prop = <x><y/></x>) { throw function ([y]) { }; }");
tryItOut("M:if((new function  __noSuchMethod__ () { return <x><y/></x> } (<x><y/></x>))) {throw @foo;yield null; } else  if ([prototype].map((new Function(\"{}\")))) const __noSuchMethod__ = <x/>, __proto__;");
tryItOut("break ;");
tryItOut("M:switch( /x/g ) { case <x><y/></x>: break; case ({a2:z2}): default: break; case 8: throw <x><y/></x>;break; break; case 0: ;case *: case 2: return;case window: break; case function::prop: break;  }");
tryItOut("/*for..in*/for(var 0 <<= <y><z/></y>.prototype in new gc()) {/*infloop*/for(const prop = \n#1=[#1#]; <x><y/></x>.( /x/ );  /x/ ) {const __noSuchMethod__ = __noSuchMethod__;yield *; }while(( '' ) && 0){{}{} } }");
tryItOut("if(()) { if ([*]) {if(033) { if ([(Math.pow)(<x><y/></x>, 1e-81) if (window)]) /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in undefined) {(4.);yield; }\t} else export *;let (__proto__) { let (constructor) { yield; } } } else do {yield; } while((yield undefined += <y><z/></y>) && 0);}");
tryItOut("/*infloop*/do {(null); } while(null);");
tryItOut("L: ;\n__proto__ = window, __count__;\n");
tryItOut("L:if(let (__count__) constructor.__iterator__ getter= Function) {return *::*;export *; } else  if (<><x><y/></x></>.__defineSetter__(\"<x><y/></x>\", ({}).hasOwnProperty)//h\n.__defineSetter__(\"constructor\", constructor = <y><z/></y> == @foo)) {return undefined;gc() } else {}");
tryItOut("with({}) for(let y in [5,6,7,8]) yield <x/>;");
tryItOut("export prop;");
tryItOut("L:with({(prototype = __count__)(let (prototype, prototype = [z1]) <x/>): this.zzz.zzz}){continue M;return null; }");
tryItOut("/*for..in*/for(var ( '' )(<>prop = <><x><y/></x></>.watch(\"__parent__\", (function ([y]) { }).__defineSetter__)</>) in (true.*)) M:if((<><x><y/></x></> ? __proto__ : this)) var __proto__ = <x/>; else  if (<><x><y/></x></>.unwatch(\"__iterator__\")) *::*;");
tryItOut("while((prototype = <><x><y/></x></>) && 0)yield");
tryItOut("/*infloop*/while((undefined ==  null ))yield;");
tryItOut("/*for..in*/for(var __iterator__ =  /x/g  in <><x><y/></x></>) {break M; }");
tryItOut("/*for..in*/for(const __proto__ = <x><y/></x> in <x/>) let prototype =  /x/g , __iterator__ = prototype;");
tryItOut("yield <x/>");
tryItOut("M:while((new null(, [])) && 0)yield;\ndo var __iterator__; while((()) && 0);\n");
tryItOut("with(__iterator__ = []){__parent__.prototype setter= __proto__; }");
tryItOut("M:if(<x><y/></x>) { if (\n*::*) throw __iterator__;} else {return true;(033); }");
tryItOut("/*infloop*/for(var __parent__; __iterator__; <x><y/></x>.__parent__ = <x><y/></x>) {{} }");
tryItOut("with((<><x><y/></x></> <<= this) @ <y><z/></y>);");
tryItOut("/*infloop*/for(((p={}, (p.z = <><bbb xmlns:ccc=\"new ((new Function(\"033;\")))\f(undefined, <x/>)\"><ccc:eee></ccc:eee></bbb></>)())); (this.zzz.zzz); new Function) yield;");
tryItOut("if(((<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\"))(([] .@x:: window), undefined))) throw  /x/ ; else  if (eval(\"null.unwatch(\\t\\\"prop\\\")\", null <<= <x><y/></x>)) {; } else {Function }");
tryItOut("/*for..in*/L:for(let [prop, __noSuchMethod__] =  \"\"  in (eval(\"prototype;\", window))[(*\n)] for each (__iterator__ in  /x/g .isPrototypeOf(@foo)) for each (__proto__ in {}) for each (prototype in <x/>)) {const prop;gc() }");
tryItOut("/*infloop*/for(eval(\"[1] > window\", ({prototype: <x><y/></x> })); <bbb xmlns=\"__iterator__\"><ccc:ddd><!--yy--></ccc:ddd></bbb> .. this; (delete 3.141592653589793)) {(<><x><y/></x></>);var function::__noSuchMethod__, __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(@foo['__count__'] in <y><z/></y>[prototype]) {throw null; }");
tryItOut("if(new ([1,2,3,4].map)()) {(<><x><y/></x></>);const __proto__ = <x><y/></x>; } else  if (<x><y/></x>.valueOf(\"number\")) {with((\n<x><y/></x>)){return; } }");
tryItOut("while(([undefined].filter(__proto__)) && 0)with(<x><y/></x>);");
tryItOut("if(~null.__defineSetter__(\"prototype\", Math.sin)) \t{{const __parent__, __proto__;(*::*).watch } } else {continue ;if(0x99 ? [z1] : true) { if ((__count__)(<x><y/></x>, true)) {if(null)  } else return;} }");
tryItOut("let (({ prototype: [, ] }), prototype) { /*infloop*/for(\nconst prototype; @foo === ({a1:1}); <><x><y/></x></>.eval(false)) {gc(); } }");
tryItOut("/*infloop*/L:for(((((p={}, (p.z = 0.1)())))(([<x><y/></x> if (<x/>)]))); (<x/> = <y><z/></y>.eval((-1))); null.prop) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in (__iterator__.(true))) {}\n }");
tryItOut("/*for..in*/for(__parent__.__proto__ in *::*) {return; }\ndo /*for..in*/for(let [__count__, prototype] =  /x/  in <y><z/></y>) {export *;return #1#; } while(((__noSuchMethod__ =  '' )) && 0);\n");
