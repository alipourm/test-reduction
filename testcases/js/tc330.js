tryItOut("__proto__ = true;");
tryItOut("do {return; } while((__count__ = --<x/>) && 0);\ncontinue ;\n");
tryItOut("export *");
tryItOut("{/*infloop*/for(__iterator__ = (eval(\"[z1,,]\",  '' )).__iterator__ = new window; [11,12,13,14].some; (p={}, (p.z = new (<x/>)())())) {throw <x><y/></x>; } }");
tryItOut("/*infloop*/for(*::*; false; this) {(__iterator__); }");
tryItOut("/*for..in*/for(function::__parent__ in ((Function)(( \"\"  ? [1] : 1e4).@*)))/*infloop*/while((([prop, , , constructor] = (eval(\"-1\", *))).yoyo(__iterator__.__iterator__)))break M;");
tryItOut("__iterator__ = __count__\n{const __noSuchMethod__, __parent__ = <x/>;return; }");
tryItOut("let(__noSuchMethod__) ((function(){__count__ = __iterator__;})());");
tryItOut("/*for..in*/for(const ((<><x><y/></x></>.__defineGetter__(\"\", 'haha'.split)))(4.) in ((function(y) { yield y; ;; yield y; })(null()))){/*infloop*/for([]; this; <x><y/></x>) {yield;<><x><y/></x></> }(this); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <x><y/></x>) {__proto__;return; }");
tryItOut("switch(([z1,,].yoyo(__iterator__))) { case 4: with(prop)return arguments;\nyield @foo;\ndefault: break; case 8: let (constructor, constructor) { /*infloop*/do {} while(<><x><y/></x></>); }break; if(*) { if ( /x/g ) {yield;yield; } else <x><y/></x>}break;  }");
tryItOut("M:with({constructor: eval(\"(this);\", __proto__ = ({a2:z2}) =  /x/ )})gc()");
tryItOut("while((__count__ = ({ __count__: ({ __count__: prototype }) })) && 0){export prototype;L\t:switch([<x><y/></x>].some(prop)) { case (uneval(<><x><y/></x></>)): break;  } }");
tryItOut("L:if(((<x><y/></x>.(<><x><y/></x></>)))) /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <><x><y/></x></>) {export prop; }");
tryItOut("with(undefined){if(null && <x><y/></x>)  else  if ((undefined >>>= \"\" )) true; else (<><x><y/></x></>); }");
tryItOut("if(Array(<x><y/></x>)) export prop; else  if (eval(\"/*infloop*/for(0/0; null; prop) {export __noSuchMethod__; }\", <><x><y/></x></>) @ new function(q) { return q; }([z1,,]) in (uneval(this.zzz.zzz))) L:if(window) {export __parent__;( \"\" ); } else  if (1e81) yield; else prop = @foo, prop =  /x/g ;");
tryItOut("/*for..in*/for(let [__iterator__, prop] = new Error(prototype = __iterator__, undefined) in (new @foo( \"\" , *::*))) gc()");
tryItOut("M:if(((constructor.unwatch(\"constructor\") >>= ('haha'.split)(window)))()) {with(window.__parent__ = [z1,,]){(<y><z/></y>);/*infloop*/for(constructor = this; <><x><y/></x></>;  /x/g ) {{}1.2e3 } }Function } else  if (eval(\"let prototype;\",  \"\" )) if(eval(\"function  constructor () { {} } \",  /x/ .eval(@foo).__defineSetter__(\"__parent__\", ({}).__lookupGetter__))) return; else  if (__proto__) {gc() }");
tryItOut("M:if(1.3.hasOwnProperty(\"__noSuchMethod__\")) (1.3); else  if (((<><><ccc:ddd\t>__iterator__</ccc:ddd></></>)[(<x/> * window)])) {return 3;/*for..in*/M:for(__parent__ = @foo in \n#1=[#1#]) {yield; } } else L: var __count__ = function::prop;");
tryItOut("/*infloop*/for(Iterator();  /x/g ; <x/>) {{}yield __count__; }");
tryItOut("/*infloop*/for(1.3; __noSuchMethod__ = null; ( /x/g  ^= <><x><y/></x></>)) {return ({a1:1}); }");
tryItOut("return;var prop = this, __proto__ = <y><z/></y>\nexport *");
tryItOut("");
tryItOut("/*for..in*/L:for(let constructor in (((<><x><y/></x></>).__defineSetter__)(null))){gc()yield; }");
tryItOut("let(({ __noSuchMethod__: prop }) = ( /* Comment */3), __proto__) { try { var __noSuchMethod__ = @foo; } catch(__parent__ if (function(){const __parent__ = <x><y/></x>;})()) { prop: *::* } catch([,] if (function(){{}})()) { const constructor, prototype = <x><y/></x>; } ");
tryItOut("__iterator__ = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in (({}).__lookupGetter__).call(<y><z/></y>.valueOf(\"number\"), )) {yield (function ([y]) { })();export __iterator__; }");
tryItOut("if([<x><y/></x>]) true;\nyield *::*;\n");
tryItOut("let([, ({ prop: 3.141592653589793.__defineGetter__(\"prop\", @foo) }), ({ __noSuchMethod__: [, function::prop, , ] })]) { let(__proto__) ((function(){with({}) return  /x/  , 0.1();})());");
tryItOut("L: {(window); }");
tryItOut("if(5.0000000000000000000000) {export __noSuchMethod__; } else  if (@foo) prototype;");
tryItOut("/*infloop*/do {break M;throw  '' ; } while([15,16,17,18].sort((new Function(\"{}\")), window)--)\n'haha'.split");
tryItOut("with({__count__: /*\n*/* &= true << new function  __parent__ () { return [z1] } (<><x><y/></x></>)}){}\nnull;");
tryItOut("do {let __count__; } while((prototype = *) && 0);");
tryItOut("L:if(\n({ __proto__: [1,,], __noSuchMethod__: ({ __iterator__: __proto__ }) }) = ({ __count__: ({ __count__: prop }) })) @foo; else L: yield;");
tryItOut("/*for..in*/for(let constructor in (/a/gi(({__iterator__: (3/0.unwatch(\"case 5: break; \")), prototype: (new String()) }), (this.__defineSetter__(\"__count__\", (Math.sin).apply))))) {var constructor, __parent__;export __count__; }");
tryItOut("/*infloop*/while((uneval((/a/gi).call(<><x><y/></x></>, <><x><y/></x></>, prop)))){var prototype = __proto__, __noSuchMethod__\n }");
tryItOut("/*infloop*/for(const __parent__; (eval(\"/*infloop*/for(1.2e3;  /x/ ; window) {throw 3;return null; }\", [11,12,13,14].sort)); <x><y/></x>.eval(<y><z/></y>)) yield;");
tryItOut("{yield;if(1e4.valueOf(\"number\")) {const __proto__, prototype; } else  if (__noSuchMethod__ = []) {/a/gi } }");
tryItOut("const __proto__, __count__;");
tryItOut("/*infloop*/while(this.__defineGetter__(\"constructor\", function  __proto__ (__noSuchMethod__, __parent__)<><x><y/></x></>)){(window);const __iterator__, prototype = <><x><y/></x></>; }");
tryItOut("const __proto__;");
tryItOut("/*infloop*/M:for(const __iterator__; <y><z/></y>; @foo) {export *;export ; }");
tryItOut("let (prop, __noSuchMethod__ = eval(\"if(null) { if (this) {export *; } else export *;}\", 0x99)) { /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <x/>) {with({constructor: <y><z/></y>})\t{let prop = <x/>;; } } }");
tryItOut("return this.__defineGetter__(\"__count__\", /a/gi); const constructor;");
tryItOut("L:while(([15,16,17,18].sort(function () { return __proto__; } , <x><y/></x>)) && 0)throw <><x><y/></x></>;");
tryItOut("for(let y in []);");
tryItOut("if([,,]\n) {return  /x/ ;(prototype); } else  if (( /* Comment */this.__defineSetter__(\"__count__\", (new Function(\"undefined;\"))))) {{}\fyield; }");
tryItOut("do {return <><x><y/></x></>; } while((({__proto__: <x><y/></x>.(*::*).__lookupSetter__(\"__proto__\"), prop setter: ({}).__lookupGetter__ })) && 0);");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/for(let __iterator__ = <xxx>{__iterator__}</xxx>.((constructor = <><x><y/></x></>)); constructor.valueOf(\"number\"); (yield var constructor = <y><z/></y>, constructor;).propertyIsEnumerable(\"__count__\")) {yield;; }");
tryItOut("if( '' .watch(\"__proto__\", (new Function(\"(({a1:1}));\")))) yield; else {yield; }");
tryItOut("if(__proto__) with({prop: 033})break ; else {return; }");
tryItOut("");
tryItOut("L:do prop; while((<y><z/></y>) && 0);");
tryItOut("/*infloop*/while(prototype = __noSuchMethod__){( /x/g );const __noSuchMethod__, __count__ =  \"\" \n }");
tryItOut("if(* /= __noSuchMethod__ -= Function( /x/g , <x><y/></x>)) { if ((<><x><y/></x></> ^ true).eval(([<y><z/></y>].sort(new Function)))) (true).__defineSetter__} else {(<x><y/></x>)/*\n*/;continue M; }");
tryItOut("\tdo  while((*::* << <><x><y/></x></>) && 0);");
tryItOut("/*infloop*/for(const (this)(*) = prop; this.zzz.zzz; <><bbb xmlns:ccc=\" '' \"><ccc:eee></ccc:eee></bbb></>) {throw window;export prototype; }");
tryItOut("L:do throw undefined; while((this) && 0);");
tryItOut("if(*::* & @foo) {return; } else  if (prop = new ((constructor))(#1#.throw(<x><y/><\t/x>), __iterator__)) {{;export *; } } else {let constructor\nreturn null; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in null) <x/>;");
tryItOut("with({}) with({}) { with({}) let(prop = <x/>, __parent__) ((function(){return;})()); } ");
tryItOut("const prop = [], __proto__;");
tryItOut("with({__iterator__: <><x><y/></x></>}){  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (new Function)) {let __noSuchMethod__, __proto__;yield <x/>; }");
tryItOut("/*infloop*/M:for(__iterator__; <{__iterator__}> </{__iterator__}> + (prototype = 1e+81 << undefined.__lookupSetter__(\"__noSuchMethod__\")); <y><z/></y>) M:with({__noSuchMethod__: @foo})gc()");
tryItOut("with({__noSuchMethod__: (\nnull)()})default: break M;export *;break; ");
tryItOut("/*infloop*/while(__iterator__)var __count__, __noSuchMethod__ = window;");
tryItOut("if((!)) {if(__iterator__) {} else  if (undefined) new Function else {__iterator__ getter: /a/gi }; }\r else  if ((prop.prop = (__proto__.constructor))) {switch(<x><y/></x>) { default: export *;case 9: case 8: function(q) { return q; }case <y><z/></y>: case 0: break; case window: break; case ({a1:1}): @foo;break; case 4: var __iterator__;case 6: yield window;case window: export constructor; }gc() } else {continue ; }");
tryItOut("L:with({__parent__: <x/>.watch(\"constructor\", new Function)})return <y><z/></y>;");
tryItOut("\nif(<y><z/></y>) { if (<x/>) export *;} else return *;");
tryItOut("if((* for (__count__ in {})).propertyIsEnumerable(\"prototype\")) { if ((new (<y><z/></y>)()).__defineGetter__(\"__proto__\", ({}).__lookupGetter__)) {return <y><z/></y>; }} else (<x/>)\nyield __count__ || this.__defineGetter__(\"__proto__\", Math.pow);");
tryItOut("return;");
tryItOut("return #1#; const __count__;");
tryItOut("with({__iterator__: new (<><x><y/></x></> *=  '' )()}){prop;{}yield; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = true, __count__['x::prototype'] in (((new Function(\"[z1]\")))(\n<x><y/></x>))){return; }");
tryItOut("let (__parent__ = [[]], null) { throw null; }");
tryItOut("yield;");
tryItOut("");
tryItOut("/*infloop*/while(([3/0].some(new Function)).hasOwnProperty(\"__count__\"))return this;");
tryItOut("throw StopIteration;");
tryItOut("L:while((window) && 0){(<><x><y/></x></>);( /x/g ); }");
tryItOut("if(prototype = __count__) (new Function(\"yield __iterator__;\")) else var __parent__ = constructor;");
tryItOut("yield (-1); const __proto__;");
tryItOut("[1,2,3,4].map const prop;");
tryItOut("if(<><x><y/></x></>) {yield 1.2e3; }");
tryItOut("while((({constructor: <><x><y/></x></>})) && 0)return;");
tryItOut("<y><z/></y>\n__iterator__, function::constructor = this;");
tryItOut("let (__noSuchMethod__, [] = __count__ = [[]]) { {{} } }");
tryItOut("return  '' ;");
tryItOut("prop = x::__proto__;");
tryItOut("for(let y in [5,6,7,8]) throw __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(const ({ __parent__: ({ __proto__: ({ __proto__: (this.__defineGetter__(\"prop\", function (prop) { return ({}) } ))\n, __proto__: __noSuchMethod__ }) }) }) = [__proto__]; false; Function(<><x><y/></x></>, <><x><y/></x></>)) L:if(__proto__ = <x><y/></x>) { if ([15,16,17,18].map(, undefined)) {return;gc() }} else export __iterator__;");
tryItOut("(-1).throw(true).__proto__ = __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor(constructor) in <><x><y/></x></>) gc()");
tryItOut("if((new Function).call((3.__defineSetter__(\"prop\",  '' )), (('fafafa'.replace(/a/g, #1#))[(__parent__ = *::*)]))) yield <x><y/></x>;");
tryItOut("/*for..in*/M:for(var prop = ([<x><y/></x> for (__proto__ in prop) continue ])((new (<y><z/></y>)(4.)), (* >> __parent__)) in undefined = false += (prop = 3)) {var prop, __count__ = false;yield 3; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = [15,16,17,18].map([,,z1], <x><y/></x>) >> (<x><y/></x>.propertyIsEnumerable(\"__parent__\")) in return) const prop, __iterator__;");
tryItOut("/*for..in*/for(var prototype in (([1,2,3,4].map)((this , <x/>)))){return *::*;export prototype; }");
tryItOut("/*for..in*/M:for(var prop in (([1,2,3,4].slice)(new 0/0(this, <><x><y/></x></>)))){<y><z/></y>;export *; }\n");
tryItOut("/*infloop*/L:for((-0);  '' ; new (--1e4).eval(<x\f><y/></x>++)()) yield\n");
tryItOut("while((__parent__.__proto__ = \n<y><z/></y>.propertyIsEnumerable(\"__iterator__\")) && 0){gc()M:do throw <><x><y/></x></>; while((<x><y/></x>) && 0); }");
tryItOut("/*infloop*/for(#1# ? window : <x><y/></x>.propertyIsEnumerable(\"prop\"); 1.2e3; <!--yy-->.(<x/> + window)) /*infloop*/while(<x><y/></x>){yield; }\r");
tryItOut("{try { ; } catch(prop if null) { throw <><x><y/></x></>; } finally { yield; } L:if(/a/gi) {/*infloop*/M:for(const constructor = (true < __count__); ({a2:z2}); *.valueOf(\"number\")) <><x><y/></x></>; } }\n/*infloop*/for(var prop = <y><z/></y>; __proto__ = <><x><y/></x></>++; [, __noSuchMethod__, , ] = [,,]) {switch(1e+81[<y><z/></y>]) { case 3:  } const __count__;export prop; }\n");
tryItOut("if(new (new Function(\"const __proto__, __iterator__;\"))(true)) if(-0, <x><y/></x>) let __noSuchMethod__, __parent__ = @foo;");
tryItOut("{prototype = (function ([y]) { })(); }");
tryItOut("while((*::*) && 0){yield 0/0;__noSuchMethod__ = <y><z/></y>; }");
tryItOut("L: {return [,,]; }\n");
tryItOut("if(({ get function::constructor __noSuchMethod__ (__proto__, __count__)undefined, __proto__ setter:  \"\"  })) {} else {\rexport *;__parent__ = <><x><y/></x></>, __count__ = *::*; }");
tryItOut("with({}) return 0\n;");
tryItOut("return try { gc() } catch(constructor) { (<x/>).watch } finally { ; } \n");
tryItOut("/*infloop*/for(var prototype = @foo; prop = __noSuchMethod__; new Array(delete <\fx><y/></x> :: ([function ([y]) { } if (false)]), new this())) throw <x/>;");
tryItOut("window\n{}\n/*for..in*/for(var __noSuchMethod__ = <><x><y/></x></> in <x/>) {;{} }");
tryItOut("L: export __parent__;");
tryItOut("/*infloop*/L:for(const ({ __iterator__: [__proto__, , , , ], prop: ({ null: [__iterator__, , __noSuchMethod__], prop: ({ __parent__: __noSuchMethod__ }) }) }) = __proto__ = 4.; this['__noSuchMethod__'] = <y><z/></y> / undefined; 0/0) {;return; }");
tryItOut("let(__noSuchMethod__) { try { yield __noSuchMethod__; } finally { ; } ");
tryItOut("while((prototype.prop = __iterator__) && 0){while(({continue ; }) && 0){ }if(('fafafa'.replace(/a/g, <x><y/></x>) in <><x><y/></x></> / *::*)) {export *;export prop; } }");
tryItOut("/*for..in*/for(let prop.__noSuchMethod__ in (((new [z1]()) && (__proto__-=<y><z/></y>))(window))){__iterator__return <><x><y/></x></>; }");
tryItOut("const __count__ = [1], constructor = __iterator__;");
tryItOut("{/*for..in*/M:for(__parent__ in Math.sin) gc() }");
tryItOut("let (prop) { constructor = <y><z/></y>; }");
tryItOut(" for each (prototype in <x/>) const __parent__;");
tryItOut("for(let y in [5,6,7,8]) __parent__ = prop;");
tryItOut("let(__proto__ = [z1,,]) ((function(){yield;})());");
tryItOut("/*for..in*/for(var <></> in <x><y/></x>) ");
tryItOut("do {{} } while(((uneval(<y><z/></y>)).unwatch(\"__noSuchMethod__\")) && 0);");
tryItOut("yield ([].unwatch(\"__noSuchMethod__\"));");
tryItOut("constructor");
tryItOut("/*infloop*/for(null.@* <= (this.__defineSetter__(\"prop\", Math.sin))[let (function::prop = [z1,,]) <><x><y/></x></>.__defineGetter__(\"constructor\", function (constructor, __count__) /x/g )]; ({__parent__: @foo != this,  set __proto__ constructor (prop\n){} }); +(((<x><y/></x>.valueOf(\"number\")).__defineSetter__).call)) {M:if(*::*()) {const __noSuchMethod__;prototype = constructor, prop = -3/0; } else {export *; } }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((@foo.hasOwnProperty(\"<x><y/></x>\"))(#3={a:#3#} >>>=<x/>)))if(<><x><y/></x></>.yoyo(<x><y/></x>)) ; else  if ( /* Comment */<x><y/></x>) {__noSuchMethod__; }");
tryItOut("/*infloop*/M:for(constructor = arguments; *::*; null) ;");
tryItOut("`");
tryItOut("/*infloop*/while((__noSuchMethod__.__parent__ getter= function  prop (__iterator__, constructor) { gc() } )()){[1,2,3,4].map }");
tryItOut("L:if(new RegExp((<><x><y/></x></> .@ <><x><y/></x></>))) {with(<y><z/></y>)export __count__; } else  if (prop.__noSuchMethod__) eval");
tryItOut("L: __proto__;\ngc()\n");
tryItOut("yield  /x/ ; const __proto__;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = __parent__ ? null :  /x/  in <x><y/></x>) this.__defineSetter__(\"__noSuchMethod__\", function () { return <y><z/></y> } ).__noSuchMethod__");
tryItOut("/*for..in*/for(prop in ) continue ;");
tryItOut("let (({ prop: ({ __count__: ({ prototype: ({  /x/g : __proto__, __proto__: __noSuchMethod__ }) }) }), constructor: [(\t{ prototype: prototype }), ({ __noSuchMethod__: [prop, constructor, , ] }), ({ prototype: constructor, __count__: ({ prop: __noSuchMethod__ }) }), [, [__iterator__, __iterator__, , __proto__, ], , , ]] }) = (0/0.yoyo(*::*)++), __proto__) {  }");
tryItOut("L: {return  \"\" ; }");
tryItOut("with({}) if(false) {; } else  if ( /x/g ) yield  '' ;");
tryItOut("do {export *;if(<x/>) {__iterator__ = function(id) { return id }, __iterator__;var prop = *::*; } } while((*::*) && 0);");
tryItOut("/*for..in*/L:for(let  if (<x/>) in ((function (prop) { yield ([,,z1] .@*:: <x><y/></x>) } )((new Error())))){while((this) && 0)break ; }");
tryItOut("/*infloop*/L:while(new (function () { export *; } )())<bbb xmlns=\"@foo.watch(\"__parent__\", function(y) { yield y; ; yield y; }) .@x:: <x/>()\">yyy</bbb>");
tryItOut("/*infloop*/do /*infloop*/do ; while((p={}, (p.z =  /x/g )())); while([z1,,]);");
tryItOut("throw 1e81;");
tryItOut("/*for..in*/for(var __parent__ = <{prototype}> </{prototype}> in gc()) export *;");
tryItOut("if(<><x><y/></x></>) return __parent__; else {continue L; }");
tryItOut("/*for..in*/for(var __proto__ = <x><y/></x> in <x><y/></x>) {yield;; }");
tryItOut("var __parent__, prototype\n const __proto__");
tryItOut("M:if(this) /*for..in*/for([__proto__, __proto__] = (@foo); in window) ((function ()function(id) { return id }).call).call else {/*for..in*/M:for(var [__noSuchMethod__, __proto__] = __noSuchMethod__ in ({function::__count__: ({a2:z2})})) gc() }");
tryItOut("/*infloop*/for(*::*--++[this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice)]; __iterator__.__proto__ getter= function  __iterator__ (__parent__, __proto__) { return __proto__ } ++; this) L: {export *; }");
tryItOut("let(__parent__, prop) ((function(){for(let y in [5,6,7,8]) throw StopIteration;})());");
tryItOut("throw __iterator__\n");
tryItOut("/*infloop*/L:for(null((({__noSuchMethod__ setter: <x/> }))); new (Math.sin)((<x><y/></x> &= )); (__count__ = <><x><y/></x></>())) yield <x><y/></x>;\nwith(false)yield @foo;\n");
tryItOut("/*infloop*/for(prototype.__noSuchMethod__ -= (new function  prop (constructor) { yield; } (<><x><y/></x></>, false)); undefined; __iterator__+= '' .valueOf(\"number\")) throw this;");
tryItOut("/*infloop*/while((({ constructor: constructor }) = <x><y/></x>.__count__))var __parent__ = window, constructor\n");
tryItOut("yield\n");
tryItOut("return constructor\n");
tryItOut("/*infloop*/for(var __count__ = 1.3 &&  \"\" ; [window] ? <x><y/></x> .@*::  ''  : this & 1e+81; <><>[1,,]</></>) {return;/*for..in*/for([__count__, __iterator__] = <x><y/></x> in .2) let __parent__, __noSuchMethod__; }");
tryItOut("/*infloop*/for(let prop = ({a2:z2}); <><x><y/></x></>; this)  { return (setter.__noSuchMethod__ = @foo) } ");
tryItOut("with((-1).watch(\"__parent__\", new Function))M:if(<x><y/></x> != prototype) {continue ; } else  if (<x/>.__lookupGetter__(\"__iterator__\")) {Function } else {gc() }");
tryItOut("/*infloop*/for((new __count__()); delete <><x><y/></x></>['prototype']|=((@foo)[eval(\" /x/g \", <><x><y/></x></>)]); [,,]) /*infloop*/for(__count__; ({ prop: ({ __count__: __noSuchMethod__ }) }) = []; ([z1].isPrototypeOf(*))) (<y><z/></y>);");
tryItOut("throw 3;\t\n");
tryItOut("/*for..in*/for(let __iterator__ in this) {return  /x/ ; }");
tryItOut("/*for..in*/for(__count__ in __iterator__[1e4]) {M:do throw *; while((new Date()) && 0); }");
tryItOut("return __noSuchMethod__;this;");
tryItOut("{if( default: /*infloop*/for(let prototype; <y><z/></y>; __noSuchMethod__) case  /x/  ? * : true: if(<><x><y/></x></>) continue ;[1,,]) {throw [,,z1];export __parent__; } else {export prototype; }export __parent__; }");
tryItOut("if(false) ; else  if (5.0000000000000000000000) {/*infloop*/for(const __parent__; <><x><y/></x></>; false) {yield <x><y/></x>;gc() }yield; }");
tryItOut("__proto__ const __parent__;");
tryItOut("M:while((({})) && 0)__noSuchMethod__;");
tryItOut("/*infloop*/for(var __proto__ = <><x><y/></x></> & let (__parent__)  /x/g ; this; \nnull .@*::  \"\" ) {[1,2,3,4].map }");
tryItOut("while((window) && 0)gc()\nexport *;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in ({__noSuchMethod__: <><x><y/></x></> })) {yield 1.2e3; }");
tryItOut("for(let y in []);");
tryItOut("break L;\n;\n");
tryItOut("{/*infloop*/L:for(let prototype = ({constructor setter: function  let (__noSuchMethod__)(window.__parent__ = <><x><y/></x></>).watch(\"constructor\", new Function), __parent__: ((<x><y/></x>)(__iterator__, 1e81)) }); <y><z/></y> ? <x/> : <x><y/></x> - __noSuchMethod__.prop = (eval(\"return;\\nconstructor;\\n\", null));  /x/g ) /*for..in*/for(var __noSuchMethod__ = __count__ in this) export __parent__;/*for..in*/for(const __count__(__parent__) = <x/>.isPrototypeOf( '' ) in <>prototype</>) __parent__; }");
tryItOut("L: with({__noSuchMethod__: <x><y/></x>.(undefined)});");
tryItOut("/*infloop*/for(let __noSuchMethod__;  /x/g ;  \"\" ) {export *;; }");
tryItOut("let (({ prop: constructor })) { break ; }\n(<x/>);\n");
tryItOut("{}\n[1,2,3,4].slice\n");
tryItOut("L: {break ;yield  \"\" ; }");
tryItOut("return prop.prop = (*.propertyIsEnumerable(\"prototype\"));");
tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("M:if((this.zzz.zzz).isPrototypeOf( '' )) {return __noSuchMethod__; } else  if (function (function::__proto__)this(new [1,2,3,4].slice(false,  /x/g ))) __proto__; else {/*for..in*/M:for(let __noSuchMethod__ in ((Math.sin)(window))){var prop;\treturn ({a1:1}); }yield; }");
tryItOut("/*infloop*/B");
tryItOut("/*for..in*/for(const constructor in -0) {const __count__, __noSuchMethod__ = false;yield *; }");
tryItOut("while((({constructor:  /x/g , prop:  ''  })) && 0)return  /x/g ;");
tryItOut("/*infloop*/while(<y><z/></y>.yoyo(undefined)){yield;function  __parent__ (__parent__, prototype) { yield <x/> }  }");
tryItOut("throw window\ngc()");
tryItOut("if((__count__.__proto__)) {return;return; }");
tryItOut("/*for..in*/M:for(__parent__ in *) throw @foo;");
tryItOut("/*infloop*/M:while(__parent__.__proto__){; }");
tryItOut("for(let y in [5,6,7,8]) export __parent__;");
tryItOut("{yield; }");
tryItOut("{}\n\nif((\t'fafafa'.replace(/a/g, function  prototype (__parent__) { yield 1e+81 } ).isPrototypeOf((this\n) >>>=- /x/ ))) /*for..in*/for(__iterator__ in false) {var __iterator__ =  /x/ ; } else (#1#);\n");
tryItOut("for(let y in [5,6,7,8]) yield function(id) { return id };");
tryItOut("const __iterator__ = <><x><y/></x></>, __parent__ = [];");
