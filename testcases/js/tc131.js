tryItOut("M:if((__parent__(3) = __iterator__ = ([1,2,3,4].slice(this)))) do {let (prototype, constructor) { L:if(constructor) {} else {export __noSuchMethod__;#1# } } } while(((#1=[*])) && 0); else {break ;return; }");
tryItOut("while((\nyield <y><z/></y>) && 0){/*for..in*/for(let __iterator__ = eval(\"*\", (-1)) in window) yield <x/>;while((([1] >> [1])) && 0){; } }");
tryItOut(" new ");
tryItOut("{[] }");
tryItOut("{with( /x/g ) }");
tryItOut("/*infloop*/for(const __count__ = [1,,]; .2; let (constructor, prop = <x><y/></x>) <><x><y/></x></>) {gc() }");
tryItOut("if((this.__defineSetter__(\"constructor\", (yield <x><y/></x>)))) {; } else  if ( /x/ ) {let (prototype, prototype = (-0)) { return; }\tyield \f( '' .watch(\"__proto__\", /a/gi)); }");
tryItOut("return ((new Function(\"gc()\"))).call((#2=({__noSuchMethod__: <x><y/></x>})), (typeof -3/0), -3/0);");
tryItOut("/*for..in*/for(( \"\"  << __proto__) & 3.141592653589793.constructor in ((/a/gi)(({__proto__ getter: gc }))))/*infloop*/for(var prop; (function ([y]) { })(); ((<y><z/></y> ? false :  \"\" )\n .@ constructor.( \"\"  ? 0 : *::*))) \f;");
tryItOut("return prop = constructor(<!--yy-->, true.set);");
tryItOut("");
tryItOut("L:with((0.1.__count__.__lookupSetter__(\"__proto__\"))){export __noSuchMethod__;/*for..in*/for([__proto__, __parent__] = 033 in .2) {;(<y><z/></y>); } }");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/for(({ __count__: [prop, ({ prop: __parent__ })], prototype: try { throw StopIteration; } finally { this.zzz.zzz; }  }) = this.__defineSetter__(\"prop\", function () { yield null } ); [15,16,17,18].some(function  __noSuchMethod__ (__iterator__, __iterator__)<x><y/></x>, <y><z/></y>.valueOf(\"number\")); (eval(\"<x/>\", <><x><y/></x></>) & <x><y/></x>)) {var __parent__; }");
tryItOut("let constructor, prototype;");
tryItOut("if((__noSuchMethod__ = (__proto__ = <x><y/></x>.throw(yield null)))) ; else <bbb xmlns:ccc=\"(1e+81.prototype)\"><ccc:eee></ccc:eee></bbb>");
tryItOut("M:if(__parent__ = <x><y/></x><ccc:ddd></ccc:ddd>) {return;return; } else  if ([true for each (prop in (-1))].*) {break ; }");
tryItOut("if(__count__ for each (__noSuchMethod__ in  /x/g )) {export prop; } else  if ((<><x><y/></x></>[false])) yield; else export *;\t");
tryItOut("L:if(__count__ = ) export *; else {throw <><x><y/></x></>; }");
tryItOut("M:if(((function () for each (__iterator__ in (<><x><y/></x></>.__defineGetter__(\"__iterator__\", function (__noSuchMethod__, __proto__)true))) for (prototype in (-1)) if ((function ([y]) { })())).call((constructor.__iterator__.__lookupSetter__(\"prop\")), @foo, yield []))) {throw <y><z/></y>; } else {/*infloop*/L:for(constructor = <y><z/></y>; constructor;  '' ) continue ;M:if(( ''  for (__proto__ in [[1]]))) return 1e+81; else {; } }");
tryItOut("L:while((033.__lookupGetter__(\"prototype\")) && 0){yield;return this; }");
tryItOut("export constructor; const __parent__;");
tryItOut("let(__parent__ = __iterator__, prototype = 0.1) { prototype =  /x/ ;");
tryItOut("{return;if(function ([y]) { }) {throw <x><y/></x>; } else  if ({}) gc() }");
tryItOut("prototype");
tryItOut("with({prototype: ({ __count__: prop, __proto__: __iterator__ }) = ({ __iterator__: prototype })}){<><x><y/></x></> }");
tryItOut("/*infloop*/for(__count__ = //h\n<x><y/></x>\r; [[]]; #1#) {}");
tryItOut("if( \"\" ) {yield *::*;gc() } else  if (({}))  else {arguments<><x><y/></x></>; }");
tryItOut("/*infloop*/M:do {for(let y in [5,6,7,8]) gc()yield; } while(window.valueOf(\"number\"));");
tryItOut("if((this.__defineSetter__\f(\"__proto__\", eval))) export *; else  if ((yield *::*)) {constructor{} }");
tryItOut("/*infloop*/for(const prop; let (__parent__) __iterator__-=*.__defineGetter__(\"prototype\", [1,2,3,4].map); ((<><x><y/></x></> for each (__count__ in constructor)) | prototype = prototype = 3.141592653589793.__defineGetter__(\"getter\", function(q) { return q; }))) {{yield #1=[#1#]; }let(constructor = *, __iterator__ =  \"\" ) ((function(){Function})()); }");
tryItOut(";");
tryItOut("L: {/*for..in*/for(const __parent__ in ((function ()window , <><x><y/></x></>)(true.throw( '' ).__defineGetter__(\"__noSuchMethod__.constructor\", window))))constructor; }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ prop: __parent__ }), prototype: prototype }) = @foo :: (<y><z/></y>.valueOf(\"number\")); (uneval( { export *; } )); prototype = <><x><y/></x></>.__lookupGetter__(\"__count__\")) {break ;\n;\n }");
tryItOut("L:if(this) { if ((<x><y/></x>.constructor.*)) {yield false; } else prototype}");
tryItOut("/*infloop*/for(let __iterator__; (() || undefined.propertyIsEnumerable(\"x::__count__\")); (prototype =  \"\" .__lookupGetter__(\"x::__parent__\")).hasOwnProperty(\"constructor\")) {/*infloop*/L:do {; } while((function(y) { yield y;  /x/ ; yield y; })(*, true));export prop;yield; }");
tryItOut("if(#1#) return <><x><y/></x></>; else  if ( /x/g ) {; }");
tryItOut("{gc()gc() }\n");
tryItOut("/*infloop*/M:for(__parent__;  \"\"  .@x:: __proto__; (({__iterator__ setter: Function }) * @foo)) {let (__proto__ = yield ( /x/g  if (__proto__)), __proto__ = [,,z1] ? <x/> : *\n) { var __count__ = this.__defineSetter__(\"__noSuchMethod__\", Math.pow), <x><y/></x>; }/*infloop*/ }");
tryItOut("return;let __parent__ = constructor, prop = prop;");
tryItOut("export *; const __proto__;");
tryItOut("L:if([, __count__.__proto__] = [,,]) let (__parent__ = <y><z/></y>) { break ; } else  if (prototype = * >> [,]) {/*for..in*/for(let [__count__, __parent__] = this in *::*) __noSuchMethod__ = *::* const __noSuchMethod__;gc() }");
tryItOut("this.zzz.zzz;");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/for((/a/gi).call; (function(y) { yield y; export __proto__;; yield y; }); (033.*)) if( \"\" ) let __noSuchMethod__ = 1e+81, __noSuchMethod__; else  if (set) {case 0:  }");
tryItOut("M:if(( /x/ .__lookupSetter__(\"__noSuchMethod__\"))((eval(\"undefined\", 3.141592653589793)), function(id) { return id })) { if (prop) {{};@foo; } else return window;}");
tryItOut("{throw #3={a:#3#}; }");
tryItOut("let (__proto__) { L:if(this) gc() }");
tryItOut("while((* .@ (-0)) && 0)gc()");
tryItOut("{try { (<><x><y/></x></>); } catch(__count__ if (function ([y]) { })()) { (__parent__); } catch(__parent__) { __parent__; } finally { gc() }  }");
tryItOut("/*for..in*/for(var [prototype, __proto__] = (new ((uneval(undefined)))([11,12,13,14].map)) in ((yield __count__))) {{throw __noSuchMethod__;{} } }");
tryItOut("var __noSuchMethod__ = __parent__, set = undefined\n");
tryItOut("do L:if(<><x><y/></x></>) {{} } while((({__count__: eval(\";\", <x/>) })) && 0);");
tryItOut("/*infloop*/while((<x><y/></x> += [[1]])\r[yield <x><y/></x>]){/*for..in*/M:for(var __proto__ = <><x><y/></x></> in *::*) ; }");
tryItOut("throw prototype;");
tryItOut("/*infloop*/do {let prop = *::*, __proto__;yield __proto__; } while(<y><z/></y> <=  \"\" );");
tryItOut("L: M:do {export *;const prop\n } while((0) && 0);");
tryItOut("switch(eval(\"this.zzz.zzz\", (<><x><y/></\fx></> &= <y><z/></y>))++) { case void  /* Comment */Error(<><x><y/></x></>) %= *: case (function () { return <><x><y/></x></> } (prop.__lookupGetter__(\"<y><z/></y>\"))): /*infloop*/for(var __noSuchMethod__ = <y><z/></y>; <y><z/></y>; __parent__) let prototype;break;  }");
tryItOut("/*for..in*/for(const prop in (((this >>>  \"\" ).watch)(((yield 1e-81)))))L: yield *;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(__count__ = (new Boolean(this)(setter = <><x><y/></x><\f/>.hasOwnProperty(\"__noSuchMethod__\"),  '' \n)); undefined.throw( /x/ ); (__iterator__ = true, prop;)) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in undefined) {{} } }");
tryItOut("M:if((p={}, (p.z = ((prototype).call(1.2e3, )))())) {/*for..in*/for(let [constructor, prototype] = ((p={}, (p.z = this)())) in new (<><x><y/></x></>)(1e+81, prop) in -0) {yield;yield; }/*for..in*/for(var [__proto__, __count__] = new (<y><z/></y>)(window) in <x><y/></x>) {window; } } else  if (constructor) {yield  /x/g ;return; }");
tryItOut("L: {return;gc() }");
tryItOut("throw this.zzz.zzz\n");
tryItOut("if([15,16,17,18].sort(gc,  /x/ )) { if ((uneval(undefined))) {<><x><y/></x></> }} else return <x><y/></x>;");
tryItOut("/*infloop*/while(new new Function(<x><y/></x>, <><x><y/></x></>).throw(yield  \"\" )){{; }/*for..in*/for(var constructor in <y><z/></y>.hasOwnProperty(\"prop\")) export *; }");
tryItOut("if( /* Comment */({a2:z2}).unwatch(\"prototype\")) __noSuchMethod__ = 4., __count__; else  if (constructor * prop = <x><y/></x> - __iterator__ = constructor) *\f;");
tryItOut("/*infloop*/for(var __count__; ((<{__count__}></{__count__}>.(({ constructor: prop }) = <y><z/></y>.throw(<x/>))).__defineSetter__(\"get\", (<><x><y/></x></>.__count__ = this.@foo).watch)); ([1,,].hasOwnProperty(\"__noSuchMethod__\") &= -1.@*)) {{while((<x><y/></x>\n) && 0)throw this;break M\ngc() }if(<><zzz><><x><y/></x></></zzz></>) window }");
tryItOut("export *\n(1 for (x in []))");
tryItOut("{}");
tryItOut("/*for..in*/for(let ({a2:z2}) ? <x><y/></x>.(<y><z/></y>) : __parent__.function::__count__.function::__noSuchMethod__ in ((eval(\"((uneval(((uneval(4.))))))\", (new ( '' )(*, null))))((new this.__defineSetter__(\"prop\", function  prop (prop, __parent__)@foo)([11,12,13,14].sort))))){M:do const __iterator__ = <><x><y/></x></>, __noSuchMethod__ = __parent__; while(((*::* = (__proto__.__noSuchMethod__ = this))) && 0); }");
tryItOut("gc()");
tryItOut("with({__noSuchMethod__: (<>(new eval(false, 1e81))</>.([,,z1].hasOwnProperty(\"set\")))}){while(((new (((<y><z/></y>)([1])))(<x/>.__proto__)__noSuchMethod__ = (let (get, constructor = [z1]) @foo), __iterator__)) && 0)return }");
tryItOut("let(prop = constructor) ((function(){let(constructor = <x><y/></x>) ((function(){var constructor = #3={a:#3#};})());})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each( in <x><y/></x>) yield;");
tryItOut("<> </>");
tryItOut("with({__proto__: new <x><y/></x>(window, )})return *;");
tryItOut("/*infloop*/for(var constructor; window; false) {return <><x><y/></x></>;//h\ngc() }");
tryItOut("switch(<x/>) { default: ( \"\" ); }\n");
tryItOut("let (__proto__ =  \"\" ) { ;\t }");
tryItOut("if(<x/>) { if ((<y><z/></y>.valueOf(\"number\"))) var __parent__ = this, constructor; else {const __count__, prop = 3.141592653589793;(<y><z/></y>); }}");
tryItOut("M:do {__count__ = <x><y/></x> > function(id) { return id }yield; } while((window) && 0);");
tryItOut("export *;");
tryItOut("if((<x><y/></x> == __iterator__)) \t\r<x><y/></x>; else  if ((new (*::*)(({__iterator__: ;, prop getter: function(q) { return q; } }), {; } = (++<><x><y/></x\t></>)))) with(( '' )()){yield;const __parent__ =  '' ; } else {yield;export constructor; }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let  /x/ ['each'] in ({ __proto__: __parent__ }) = constructor--) let (__noSuchMethod__) { export __parent__; }");
tryItOut("{function(q) { return q; } }");
tryItOut("L:while(( /x/g .valueOf(\"number\")) && 0){if(*::*) { if (*) {continue M; } else prototype = *, __proto__;}if(<><x><y/></x></>) { if (<><x><y/></x></>) yield;} else  }");
tryItOut("try { let(prop, prop) ((function(){for(let y in [5,6,7,8]) var __parent__;})()); } catch(__noSuchMethod__) { throw __parent__; } ");
tryItOut("/*for..in*/for([__iterator__, __noSuchMethod__] = <><x><y/></x></>.__defineGetter__(\"__count__\", true) in (#1=[({ set constructor(constructor, function::__iterator__) { return @foo } , __parent__:  ''  })])) {try { with({}) { ; }  } catch(__iterator__ if (function(){prop = constructor;})()) { this.zzz.zzz; } catch(prototype if (({}).hasOwnProperty)) { __iterator__(*) = __proto__; } catch(prop if (function(){try { @foo; } catch(__iterator__ if (function(){})()) { Function } finally { <x><y/></x>; } })()) { for(let y in [5,6,7,8]) let __count__, __parent__ = <><x><y/></x></>; } if(<x><y/></x>) var __noSuchMethod__; else  if (__parent__) { } else {((({}).hasOwnProperty).apply).call } }");
tryItOut("/*for..in*/for(const <x/>['prop'] in window > window) ");
tryItOut("L:if(yield (true)[@foo]) try { for(let y in []); } catch(prototype) { throw __proto__; }  else {export *; }");
tryItOut("/*infloop*/M:for(const ({ prototype: ({ __iterator__: [, , ], prop: ({ __parent__: __count__ setter: function ()<x><y/></x> }) }), __iterator__: ({ __count__: ({ __iterator__: __parent__, __count__:  { yield; }  })\t }) }) = let (__parent__ = <><x><y/></x></>, __parent__) <x><y/></x\t>.unwatch(\"__iterator__\");  /x/ ; (*.@*)) {var prop; }");
tryItOut("{try { throw StopIteration; } finally { let(__proto__ = 5.0000000000000000000000, prototype = <><x><y/></x></>) { continue ; } /*for..in*/for(const \f__iterator__ = [z1] in 4.) {return this; } const __count__; }");
tryItOut("while((this) && 0){gc(){} }");
tryItOut("let (__iterator__, constructor) { @foo; }");
tryItOut("with({}) { yield (prototype = @foo); } ");
tryItOut("__parent__ = __parent__;");
tryItOut("yield; const prop;");
tryItOut("L: (<x><y/></x>);");
tryItOut("var prototype = 1e4, __proto__ = [1];");
tryItOut("L: return null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in  /x/g ) {yield -0; }");
tryItOut("do {M:do break ; while(((__parent__ = <xxx {__noSuchMethod__}={window} />)) && 0); } while((true.__noSuchMethod__.yoyo(prototype.__proto__ = __iterator__ =  /x/g )) && 0);");
tryItOut("if( /x/g ) {var __iterator__ = <y><z/></y>;export *; } else  if ( '' ) {(let);gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__.__iterator__ in (function  __proto__ (prop) { yield 1.3 } ())) {const constructor = null\n/*for..in*/for(const [__count__, __parent__] = eval(\"#1#\", window) in <y><z/></y>) {; }yield \n\n0x99; }");
tryItOut("throw StopIteration\nwith({}) <xxx>{__noSuchMethod__}</xxx>");
tryItOut("try { for(let y in []); } catch(__proto__) { throw StopIteration; } ");
tryItOut("/*for..in*/for(constructor = 0/0.* in ([15,16,17,18].sort((this.__defineSetter__(\"__noSuchMethod__\", 3/0)), this.zzz.zzz)) ? prop : 4.) ");
tryItOut("if(undefined) { if (window) {/*infloop*/for( /x/ ; <x><y/></x>; 1e-81) {throw @foo; } }} else {(<x><y/></x>); }");
tryItOut("\flet (prop, prop = window) { __noSuchMethod__, __noSuchMethod__\n }if(null ? window : prototype) { if ((prototype.__iterator__)) return function ([y]) { };} else throw this;");
tryItOut("L:if(__iterator__.prototype = __parent__ instanceof 1.2e3.__count__) {;export (new Function(\"var function::function::__count__ = 4., __count__;\")); } else  if (([1,2,3,4].map)(((((null).watch).apply).call((#1=*), )))) with( /* Comment */[[1]])/*for..in*/for(let __proto__ in [1,,]) this; else {let (__count__ = <x><y/></x>, prop) { let __noSuchMethod__; } const __count__;if(<y><z/></y>) {(<><x><y/></x></>); } }");
tryItOut("1e+81\n{; }\n");
tryItOut("yield 1.3\n const __count__;");
tryItOut("with((yield window))var __proto__ = [,,], __count__ = this;");
tryItOut("/*infloop*/L:do if(({__count__: true }) ?  ''  : <x><y/></x>.(@foo)) { if ((export set).__lookupGetter__(\"__count__\")) {(function(id) { return id }).__defineSetter__'haha'.split }} else {yield; }\t while(__iterator__ & true);");
tryItOut("__noSuchMethod__, __count__ = <x/>\n");
tryItOut("with({}) (*::*)()");
tryItOut("L: {export prop;return; }");
tryItOut("if(eval(\"(prototype =  \\\"\\\" .__defineGetter__(\\\"constructor\\\", function (prototype)this))\", __proto__ = prop)) { if ([11,12,13,14].sort) {export prototype;yield; }} else export __proto__;");
tryItOut("/*infloop*/for(let __iterator__; (function ([y]) { })(); [,]) {return undefined;prototype, __count__ = 5.0000000000000000000000; }\n");
tryItOut("for(let y in []);");
tryItOut("L:if(eval(\"<x/>\", <x/>) ^ ( /* Comment */ /x/g )) {throw arguments\nlet(__proto__ = <><x><y/></x></>) ((function(){throw <><x><y/></x></>;})())\ngc() } else try { continue ; } catch(__iterator__) { return *::*; } \n");
tryItOut("return;");
tryItOut("/*for..in*/L:for(let (prototype) in ((prototype.__count__)(yield  /x/g )))if(@foo) throw  '' ; else  if (<y><z/></y>) {throw __noSuchMethod__; } else { }");
tryItOut("/*infloop*/do {export __noSuchMethod__;break M; } while(<x><y/></x> , <x><y/></x>);");
tryItOut("with({}) return;");
tryItOut("{with((function  __count__ (__proto__, prop)[z1,,](eval(\"/*infloop*/do {{}__count__; } while( '' );\", <><x><y/></x></>), <y><z/></y>)))yield; }");
tryItOut("if(function::constructor.__proto__ getter= [1,2,3,4].map) { if (export prototype) {(window);/*infloop*/while(this)'haha'.split }} else let __iterator__ = window, __parent__ = [,];");
tryItOut("if((yield 1e81)) const __noSuchMethod__; else const \f__noSuchMethod__ = this;");
tryItOut("throw StopIteration;");
tryItOut("with({function::__iterator__: 1.3.watch(\"prototype\", Function)})this;");
tryItOut("const __count__ = <><x><y/></x></>, prop;");
tryItOut("if(prop = @foo) {var * = <><x><y/></x></>; }");
tryItOut("/*infloop*/for( '' ; constructor = true++; ) {/*infloop*/while(<y><z/></y>){__iterator__ }return; }for(let y in [5,6,7,8]) throw constructor;");
tryItOut("{switch(<><x><y/></x></>) { default: export __parent__;break;  } }");
tryItOut("with((this.__defineSetter__(\"({ __proto__: prop })\", (new Function(\"const prop = window;\"))))){gc()/*for..in*/for(var __noSuchMethod__ = ( \"\" .yoyo(<\t><x><y/></x></>)) in #2=3.141592653589793) prototype; }");
tryItOut("/*infloop*/while(@foo - __parent__)yield;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = (eval(\"(@foo);\", __iterator__) === new function ()gc(true, constructor).valueOf(\"number\")); new (function  constructor (prototype) { yield true } )((<x/>)(#1=[#1#], prototype)); -3/0 >>> ({__iterator__: null })) {;\n\t__noSuchMethod__ = <x/>, __proto__ = null;\n }");
tryItOut("M:if([, ({ __iterator__: prototype })] = [, ({ __noSuchMethod__: __count__ }), <y><z/></y>, ({ prototype: __proto__ }), ]) { if ( '' ) (<><x><y/></x></>); const prototype; else {with( /* Comment */@foo){constructor = false, __parent__; } }}");
tryItOut("{return 1e81;return; }");
tryItOut("return;");
tryItOut("/*infloop*/do {/*infloop*/for(let prop; prototype.prototype; ++[,,] |= <x><y/></x>) {const prop = window, __proto__;L:if(<><x><y/></x></> *= function ([y]) { }) {{} } else  if (window .@*:: false) {export prop\f;break ; } } } while(new RegExp());");
tryItOut("let(({ __noSuchMethod__: [__parent__, prototype, ], constructor: __count__ }) = (~<><><x><y/></x></></>)) ((function(){for(let y in []);})());");
tryItOut("if(window) { if (/*) yield <><x><y/></x></>; else {yield; }}");
tryItOut("if(5.0000000000000000000000 .. @foo) export *\nexport *; else  if (new \r(__iterator__ = <x><y/></x>)().yoyo(eval(\"window\", prototype))[<y><z/></y> >>>=<><x><y/></x></>]) {do {yield; } while((__noSuchMethod__) && 0);/*infloop*/while(false)let __noSuchMethod__; }");
tryItOut("if((new <><x><y/></x></>(false))) /*infloop*/for(const prototype; (({prototype: []})); __parent__ = <><x><y/></x></>) {/*infloop*/for(const constructor; __iterator__; window) {export __iterator__;; } } else L: return *::*;");
tryItOut("{if( '' ) {prop;__iterator__ = <x/>, prototype; }yield; } const __count__;");
tryItOut("{yield; }");
tryItOut("/*for..in*/for(__proto__ in ( == new ((function(y) { yield y; return;; yield y; }).apply)(<x><y/></x>).watch(\"prop\", (new Function(\"\"))))) if(null) { if ((__count__.([z1]))) {3.141592653589793; }} else throw true;");
tryItOut("return\n");
tryItOut("L: {[,,z1] }");
tryItOut("export *;");
tryItOut("/*for..in*/for(var __proto__ in (('haha'.split)((3)))){export __noSuchMethod__; /x/ ; }");
tryItOut("/*for..in*/for(const __count__ = ( /x/g .__lookupGetter__(\"__proto__\")) in eval(\"(<><x><y/></x></>);\", (__noSuchMethod__.(<><x><y/></x></>)))) {prototype;let __iterator__ = <><x><y/></x></>; }");
tryItOut("switch((this.__iterator__)) { case 6:  }");
tryItOut("/*for..in*/for(constructor in {}) {return; }");
tryItOut("(4.);");
tryItOut("/*infloop*/for(const function::prototype; (<zzz>[z1]</zzz> -= __proto__ = 1e81); <bbb xmlns=\"prototype\">({ constructor: prototype, __count__: __iterator__ })</bbb> = this) with({}) { return; }  const __proto__;");
tryItOut("for(let y in []);");
tryItOut("let (__noSuchMethod__, prototype =  /x/g .@foo) { break ; }/*\n*/");
tryItOut("if(<><x><y/></x></>.__parent__ = undefined) (*);");
tryItOut("do /*for..in*/for(__proto__ = ( /* Comment */__noSuchMethod__ | prototype = __proto__) in (({constructor getter: <x><y/></x>, __noSuchMethod__: (setter = <x><y/></x>) }))) {} while((<bbb xmlns=\"~__parent__\"> </bbb>) && 0);");
tryItOut("return  /x/  != this;");
tryItOut("/*infloop*/do {yield <><x><y/></x></>;export *; } while(constructor);");
tryItOut("L: /*infloop*/for(<y><z/></y>.__lookupSetter__(\"constructor\"); <x><y/></x>; <y><z/></y>.watch(\"__iterator__\", (1 for (x in [])))) {#1=[<y><z/></y>]; }");
tryItOut("switch(<x><y set __count__(__parent__, prop) { yield *::* = * }  /></xtry {  } catch(constructor if null) { constructor; } catch(__proto__ if <y><z/></y>) {  } catch(each) { yield; } finally { const __noSuchMethod__ =  /x/ , prototype = this; }  >) { default:  }");
tryItOut("M:if((eval(\"[1]\", this) || ({ set prototype __proto__ (__count__, __parent__)window }))) {( '' ); } else  if (<bbb xmlns=\"<><x><y/></x></>\"><ccc:ddd> </ccc:ddd></bbb>) {yield 1.3;return; } else {throw __parent__;[1,2,3,4].slice }");
tryItOut("let prototype = <x/>, constructor =  /x/g ;");
tryItOut("if(<y><z/></y>) {return 1e81;/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <x/>) var __parent__, __iterator__\n }");
tryItOut("(if()this.__defineGetter__(\"constructor\", (-1).__defineSetter__))  else  if (/*) let prop = [[1]];");
tryItOut("/*for..in*/for(var prototype in ((eval)({})));");
tryItOut("if((*)()) { if (eval(\"( /x/g .__defineGetter__(\\\"__iterator__\\\", (@foo)\\f.__defineSetter__))\", (prop.({}) getter= <employee id=\"1\"><name>Joe</name><age>20</age></employee>))) /*for..in*/for(var __parent__ in ((function (__count__, __iterator__)(eval(\"(true if (*))\", yield = <x/>)))(({constructor: __iterator__ = <><x><y/></x></> })))){continue L; }} else /*infloop*/L:do {yield <x/>;return;const __proto__ = <x><y/></x>, __noSuchMethod__; } while(new <y><z/></y>([[1]],  \"\" ));");
tryItOut("if(__iterator__ >>>  /x/g ) {do {;\nexport prototype;\n } while((*::*) && 0); } else __noSuchMethod__");
tryItOut("/*infloop*/for(__iterator__ = [] = [, ({ prop: constructor, __count__: prototype }), ({ __count__: prototype, __count__: __noSuchMethod__ })]; <y><z/></y>; ) {/*infloop*/for(__noSuchMethod__ = (Math.sin).call(window,  '' , undefined); ({__proto__: false }); [[]]) {export prototype;export __parent__; } }");
tryItOut("{M:switch({}) { case 1: break; break;  }yield window; }");
tryItOut("switch(window(<x/>, <x/>)) { default: /*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype.prototype in -1) continue ;case 3: break ;break; case ({ __parent__: [], __count__: [__iterator__, __count__] }) = (<x><y/></x>.__parent__ = 0x99 if (3/0)): /*for..in*/M:for(const prop = \nthis in (-1)) {gc() }case ((<><x><y/></x></>.propertyIsEnumerable(\"constructor\"))[ /x/g ++]): break; break;  }");
tryItOut("[z1,,]\n/*infloop*/do {throw null;gc() } while(<y><z/></y>);\nthrow  /x/ ;\n");
tryItOut("/*infloop*/M:for([11,12,13,14].filter instanceof undefined.throw(__proto__).yoyo(prototype =  /x/g ); #0=[* ? true : window]; [1,,]) +");
tryItOut("let (prototype, prototype = undefined) { const __iterator__ = {}; }");
tryItOut("L:switch(<y><z/></y> .. *::* >>=  /x/ ) { default: return;return; const prop;break; case 5:  }");
tryItOut("with((function () { return  ''  } ())){return;const __parent__ = false, prop = window; }");
tryItOut("/*infloop*/while(this.zzz.zzz)return;");
tryItOut("/*infloop*/for(.2; window; prototype) ;new Function");
tryItOut("if(({ __iterator__: constructor })) switch(*::*) { case <x><y/></x>: throw this;break;  } else return  '' ;");
tryItOut("switch(v[eval(\"return  /x/g ;\", ({ constructor: __iterator__ }) = (new (__parent__)(<y><z/></y>, <><x><y/></x></>)))]) { case {}: return function::__noSuchMethod__; }");
tryItOut("M:if([[1]]) /*for..in*/for(const true['__iterator__'] in ((function (constructor, __iterator__) { <x><y/></x>; } )(<><x><y/></x></>.propertyIsEnumerable(\"prop\")))){var __iterator__, __noSuchMethod__;yield; } else  if ((prop)) gc()");
tryItOut("(1 for (x in []))");
tryItOut("/*infloop*/for(const [] = ([<x><y/></x>]); <!--yy-->; x::__noSuchMethod__ ^  /x/ ) {yield; }");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(let [__proto__, __parent__] = (window.valueOf(\"number\")) in <xxx>{prop}</xxx>.((( yield .constructor).__defineSetter__(\"__parent__\", Math.pow)))) ");
tryItOut("{return <><x><y/></x></>;export *; }");
tryItOut("switch(this.__defineGetter__(\"prototype\", (function  prop (*::*) { return <><x><y/>\n</x></> } //h\n).call)) { case prototype: ;break;  }");
tryItOut("return\n");
tryItOut("L:if(this.__defineSetter__(\"__parent__\", ([1,2,3,4].slice).call)) /*for..in*/L:for(const [prototype, prop] = [,,] in .2) {} else  if (__iterator__ = 1e81.__lookupSetter__(\"__parent__\").__defineSetter__(\"__count__\", function(q) { return q; }))  \"\" ");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __iterator__ }) = eval(); true; null) {if(({__parent__: <>@foo</>, __proto__: __count__.watch(\"__parent__\", new Function) })) export *; else  if (new ({})((('fafafa'.replace(/a/g, <x/>)) >  /x/ ))) {([]); }if((return)) { if ([<><x><y/></x></>].map(window)) break M; else {export *; }} }");
tryItOut("function (__proto__) { return (1e-81)[undefined] } ");
tryItOut("do {[,];gc() } while((<x/>) && 0);");
tryItOut("/*for..in*/for(var __iterator__ =  /x/  %= this in <x/>) {var prop = (-0), __parent__;Math.pow }");
tryItOut("for(let y in [5,6,7,8]) yield  \"\" ;");
