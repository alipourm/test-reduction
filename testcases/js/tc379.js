tryItOut("L: yield;");
tryItOut("/*infloop*/M:do {yield 5.0000000000000000000000;/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in constructor) ; } while(false);");
tryItOut("L:if(({__parent__: (function ([y]) { })()}).eval(__parent__ = <x><y/></x>)) {var __count__;{} } else  if ( /* Comment */<><x><y/></x></> /= constructor = [, __count__, __parent__, __iterator__, ]) ");
tryItOut("<x/>\n");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, Math.sin); __iterator__\t getter: [1,2,3,4].map; __noSuchMethod__ = [z1].eval(<y><z/></y>)) {/*for..in*/for(var __parent__ = this in <x><y/></x>) @foo; }");
tryItOut("return;");
tryItOut("{{}yield; }");
tryItOut("do export __iterator__; while((0/0) && 0);");
tryItOut("({__parent__: window}).hasOwnProperty(\"constructor\");\n{}\n");
tryItOut("/*infloop*/while(({a1:1})){return;{} }\nreturn;\n/*infloop*/for(let constructor = <><x><y/></x></>; 1.2e3; true) export *;\n\n");
tryItOut("__count__");
tryItOut("/*infloop*/for(__parent__; ((window)\n ? __parent__ = __proto__ for each (prototype in -3/0) : __proto__ = (<><x><y/></x></> for each (prototype in <x><y/></x>))); (({ constructor: prop, __parent__: ({ __iterator__: constructor }) }) = ([<y><z/></y>])).__defineGetter__(\"constructor\", [1,2,3,4].map)) {throw 1e81; }");
tryItOut("while((prototype.prototype = ) && 0){let constructor;with({__noSuchMethod__: prototype = __iterator__ = <><x><y/></x></>})return; }");
tryItOut("yield <><x><y/></x></>");
tryItOut("do {return __iterator__; } while((++(prop = <><x><y/></x></>)) && 0);");
tryItOut("do {;var __parent__ =  '' , __count__; } while(((<x/>.constructor)) && 0);");
tryItOut("this;");
tryItOut("if((({prototype: prop}))) {throw  \"\" ; } else  if (window) { } const prop;");
tryItOut("let (__iterator__, prototype = <><x><y/></x></>) { export __parent__; }");
tryItOut("/*infloop*/do with(window) while(<x><y/></x> || @foo.yoyo( '' ));");
tryItOut("switch(__proto__.(([yield [,]]) * 033)) { case [11,12,13,14].map--: /*infloop*/for(constructor; (new (undefined)( \"\" , false)) == <><x><y/></x>\f</>; __parent__.__iterator__) {const prop;; }break; default: {export *; }break; return return ({a1:1});;break; case (<x\t><y/></x>.([z1])): throw <x><y/></x>;break; case (<><x><y/></x></>.prop = (-1)):  }");
tryItOut("with(constructor = 3/0){[1,2,3,4].slice(@foo); }");
tryItOut("/*infloop*/for(new (1e-81)(1e81); undefined.hasOwnProperty(\"__iterator__\"); __parent__.([15,16,17,18].sort(1e-81, this))) {(__parent__);yield undefined .@*:: @foo; }");
tryItOut("if(#1=({prototype: __proto__ = \n__iterator__})) { if (__iterator__ = <y><z/></y>.valueOf(\"number\")) with(#1=[#1#])continue M;} else {; }");
tryItOut("\nthrow null;\n");
tryItOut("/*infloop*/L:while(undefined);");
tryItOut("do __parent__ = __iterator__; while((prototype = <y><z/></y>) && 0);");
tryItOut("/*infloop*/while((<><x><y/></x></>.isPrototypeOf( \"\" ))[#1#]){yield #2=[gc()]; }");
tryItOut("/*infloop*/for(({ constructor: __proto__ }) = (eval(\"/*infloop*/for(__count__ = window; this;  /x/ ) let prop = -1, constructor;\", <><x><\fy/></x></>.yoyo({}))); ([1,2,3,4].map); <><x><y/></x></> ? * : constructor.propertyIsEnumerable(\"get\")) {if(<y><z/></y>) {} }");
tryItOut("export __proto__;");
tryItOut("return  /x/ ;");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("let (__parent__ =  /x/ .propertyIsEnumerable(\"__parent__\")) { break ; }");
tryItOut("/*for..in*/for(const __iterator__.constructor in ((*(__iterator__, <><x><y/></x></>))(this.zzz.zzz))){; }");
tryItOut("let (({ __proto__: prototype, __noSuchMethod__: x::prototype }) = <></>, constructor) { /*for..in*/L:for(let __noSuchMethod__ in true) {;export *; } }");
tryItOut("/*for..in*/for(set in *::*) {gc()(new Function).call }");
tryItOut("if((~(__proto__.__noSuchMethod__))) ; else {;; }");
tryItOut("{yield;break L; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; <x><y/></x>.( \"\" ); this.__defineGetter__(\"prop\", gc)) {L:do (this); while((null) && 0);continue L; }");
tryItOut(";export __count__;'haha'.split");
tryItOut(" const __iterator__;");
tryItOut("M:if(window) {let __parent__;\t } else  if ([] ?  /x/g  : true) {__noSuchMethod__; } else gc()");
tryItOut("/*for..in*/for(const prototype in  '' ) {<y><z/></y> { yield null }  }");
tryItOut("if(__iterator__ = null) eval else  if ((<x><y/></x>.@*)) {set }\n");
tryItOut("{yield; }");
tryItOut("yield;");
tryItOut("/*infloop*/for(null; (<><x><y/></x></> | <x><y/></x>).__defineSetter__(\"__proto__\", undefined); ( /x/  / <><x><y/></x></>++ !== <><y><z/></y></>)) export __proto__;");
tryItOut("{__count__ = <x><y/></x>;/a/gi }");
tryItOut("while(((eval(\"*::*\", 1e81)).__defineSetter__(\"__noSuchMethod__\", function (__noSuchMethod__, __count__) { yield constructor } )) && 0)export prop;");
tryItOut("return\n(1e-81);");
tryItOut("/*for..in*/for(var __proto__ in (((__iterator__).__defineSetter__)(<x><y/></x>)))export __count__\n");
tryItOut("for(let y in []);");
tryItOut("{function  prop (__proto__, prop)({a2:z2})export *; }");
tryItOut("/*infloop*/while(__noSuchMethod__ = ({a1:1}) = ( /x/g .eval(function(id) { return id }))){;(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(var __iterator__; ({prop getter: function (__parent__)[],  set __parent__() { return  /x/  }  }); prototype.__proto__) ");
tryItOut(";");
tryItOut(" const ");
tryItOut("return;");
tryItOut("constructor = __parent__;");
tryItOut("try { return __noSuchMethod__.prototype; } catch(constructor if (function(){let(prop = <y><z/></y>) ((function(){continue M;})());})()) { this.zzz.zzz; } catch( {  } ) { with({}) { let __iterator__ = <x/>, __iterator__; }  } ");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; (__proto__.__iterator__); (uneval(0.1))) switch(1.3) { default: (1.3); }");
tryItOut("{([[1]]); }");
tryItOut("\fswitch((p={}, (p.z = ({ constructor: ({ __parent__: __parent__ }) }) = __iterator__ = #1#)())) { case 0: break; case 0: break; break; case new let (prop = constructor.prop = [z1,,] /= <y><z/></y>(__count__)) (yield null =  '' .isPrototypeOf((@foo.prop)))(): /*infloop*/while([*::*])*;break; default: break; var prototype\n/*for..in*/for(var constructor in delete <><x><y/></x></> && <x><y/></x>.unwatch(\"prop\")) if((0 .. window)) { if ( /* Comment */*::*) {return undefined; } else let __parent__ = <x><y/></x>, constructor = false;}break; break; throw  '' .hasOwnProperty(\"__proto__\");break; case ([15,16,17,18].map((new Function(\"export __count__;\")), eval(\"<><x><y/></x></>\",  /x/ ))): break; case 7: break; case [11,12,13,14].map: const __count__ = <><x><y/></x></>;break; case 2:  }");
tryItOut("let (constructor = prototype.__count__ setter= ;function () { return 0/0 } ) { gc() }");
tryItOut("return");
tryItOut("try { gc() } catch(constructor) { ; } ");
tryItOut("/*for..in*/for(var [__count__, prototype] = __iterator__ in undefined) {export prototype; }");
tryItOut("/*infloop*/L:for(({ __count__: ({ prop: __noSuchMethod__ }), __proto__: __count__ }) = __count__ = undefined >> prop; ([<x><y/></x> for each (__parent__ in window)]);  '' .__lookupSetter__(\"__noSuchMethod__\")) /*infloop*/for(var __parent__ = window; __noSuchMethod__; *::*) {}");
tryItOut("if(#1=[#1#].valueOf(\"number\")) (1 for (x in [])) else  if ((new __parent__ = __proto__(([z1,,])(window, <><x><y/></x></>), 1e-81))) {}");
tryItOut("/*infloop*/for((eval)()++; ((new Function)(new Math.pow( /x/g ), (p={}, (p.z = window)()))); <><{prop}> </{prop}></>) (3.141592653589793);");
tryItOut("switch(constructor.(<x><y/></x>)) { case 3: yield;case (<><x><y/></x></>(1e4, undefined)) / __iterator__.( /x/g ): break; case 7: gc()break; Function }");
tryItOut("; const __iterator__;");
tryItOut("with({}) { function::__noSuchMethod__ = __parent__; } ");
tryItOut("__iterator__ = <><x><y/></x></>");
tryItOut("with({}) { yield @foo; } ");
tryItOut("{function  prototype ()prototypereturn  \"\" ; }");
tryItOut("\nprop = <x><y/></x>, constructor;");
tryItOut("const __parent__");
tryItOut("L:if(true) function (prototype, __parent__) { export *; } ");
tryItOut("/*infloop*/do if(x::constructor) {continue ; } else {export __parent__; } while(<x><y/></x> for (default: const __proto__ = *::*, __parent__ =  '' ;case  \"\" : break; case <><x><y/></x></>: var __iterator__ = <><x><y/></x></>;break; throw this; in <><x><y/></x></>));");
tryItOut("if(arguments.propertyIsEnumerable(\"__proto__\")) { if (((<x/>).__defineSetter__() %= new Function())) { '' ; } else {{} }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in __proto__ = __noSuchMethod__) {}");
tryItOut("{{} }");
tryItOut("prototype");
tryItOut("let(__noSuchMethod__ = [,,] *= @foo) ((function(){throw __count__;})());");
tryItOut("do {if() yield; else {{}/*infloop*/for(let __noSuchMethod__; @foo; <><x><y/></x></>) {export __proto__; } } } while(((constructor.__count__ = __proto__.(<x/>))) && 0);");
tryItOut("while((<y><z/></y>) && 0){return <><x><y/></x></>; }");
tryItOut("{L: {yield null; }Function }");
tryItOut("/*infloop*/do {switch(<x><y/></x>) { case 2:  const __count__;break; default: case 2: /*for..in*/M:for(let constructor in <x><y/></x>) \t{([1,,]); }break; case <y><z/></y>.eval( /x/ ): break;  }default: if(this) { if (-3/0) {return;export *; } else {throw @foo; }}break; case false.valueOf(\"number\") %= __noSuchMethod__ =  /x/ : case <x/>\n: let ;break; <x><y/></x>;break;  } while(undefined.constructor.propertyIsEnumerable(\"prop\"));");
tryItOut("/*infloop*/L:for(prop.(this); ((function(q) { return q; }).call(*.__parent__, ++(new (gc)(<x><y/></x>,  \"\" )), __noSuchMethod__ = @foo)); (this >>>  /x/g .watch(\"prop\", __proto__) | __iterator__ = this)) {L:with({constructor: <x><y/></x>})throw true; const __noSuchMethod__; }");
tryItOut("{__parent__ = __parent__; }");
tryItOut("/*for..in*/M:for(__parent__ = 1e-81 in (function ([y]) { })()) throw true;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in [1,2,3,4].slice) if(<y><z/></y>) { if (<y><z/></y>) {export *;return window; } else {;{} }}");
tryItOut("if(new ((eval(\"export prop;\", <><x><y/></x></>)) % ( \"\"  -= try { __parent__ setter: (window).watch } finally { break ; } ))(<y><z/></y> for (__parent__ in [1,,]).hasOwnProperty(\"__iterator__\")).unwatch(\"constructor\")) {/*for..in*/for(var __proto__ in ((undefined)(((p={}, (p.z = (function ([y]) { })())()))))){*;__iterator__ = *; } } else  if (undefined) if((this.__defineGetter__(\"__iterator__\", gc))) {gc() } else return #1#;");
tryItOut("let (delete, ({ __count__: ({ prop: __noSuchMethod__, __proto__: *::* }) }) = (function ([y]) { })) { continue  }");
tryItOut("L:switch([({ __count__: __parent__ }), ] = <x><y/></x> ^  '' ) { case <x/>.__iterator__ .@*:: __count__.(*::*) &= 1.2e3.__lookupSetter__(\"__parent__\"): break; default: let prop = <><x><y/></x></>\nbreak; case let ([] = (new Function).call) __count__.__iterator__[new (gc)(__proto__) for each (prop in let (__parent__ = <><x><y/></x></>) undefined) for each (prop in __iterator__) for each (__parent__ in undefined) for each (constructor in  /x/g )]: break L\nbreak;  }");
tryItOut("{/*infloop*/for(var prototype; undefined.__lookupGetter__(\"constructor\"); x::constructor = __parent__) \f{\f;; } }");
tryItOut("M:with(<x><y/></x>){var __count__, __proto__ = [z1];<x/>; }");
tryItOut("with({}) let(__parent__, __parent__) { let prop, __iterator__ = __noSuchMethod__;");
tryItOut("with([z1]){return *::*; }");
tryItOut("/*for..in*/for(const __parent__ in ((((uneval(new Boolean(([11,12,13,14].map))))))((\nwindow)))){/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.constructor in true) {yield; } }");
tryItOut("");
tryItOut("if(('fafafa'.replace(/a/g, function  prototype (prop) { yield (prop.propertyIsEnumerable(\"yield\")) } ))) {/a/gi } else  if ((({with({}) { constructor; } : __proto__ = <x><y/></x>})).yoyo(#3={a:#3#})) {(function::__count__); }");
tryItOut("let(__count__) { <y><z/></y> < [1,,]['prototype'] = constructor;");
tryItOut("M:do case <x/>:  while((__parent__ = undefined) && 0);");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("if((null <= [])((constructor = prototype))) { if ([__parent__ for each (prop in <x/>)] <<= (1e+81 ::  /x/g )) __noSuchMethod__ = <x/>, __proto__; else {if(function(q) { return q; }()) { if (constructor.yoyo(undefined)) {throw *::*; } else {<><x><y/></x></>;; }} }}throw __proto__;\n/*infloop*/do {__parent__; } while([1].(null));\n");
tryItOut("if((*::*)(#3={a:#3#}) = ( if (this) = <x><y/></x>)) {var __count__; } else ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <y><z/></y>) \t");
tryItOut("if(@foo.unwatch(\"__parent__\")) {while((*\n) && 0){__iterator__; } }");
tryItOut("{throw constructor;/*for..in*/L:for(const [prop, __noSuchMethod__] = *::* ^=  ''  in \n '' ) { /x/ ;if(<><x><y/></x></>) {let constructor, prototype; } else var constructor =  '' , prototype = <x><y\f/></x>; } }");
tryItOut("if(*::* if (window)) { } else {let constructor = <x><y/></x>;{} }");
tryItOut("throw function::__noSuchMethod__;");
tryItOut("switch(((({__count__: <x><y/></x> })))) { default: break;  }");
tryItOut("/*infloop*/for(((uneval(<y><z/></y>)))\n.unwatch(\"__count__\"\t); <><x><y/></x></>.__parent__; #3={a:#3#}) /*infloop*/M:while({})(<><x><y/></x></>)\n");
tryItOut("let __parent__ = [,,z1];");
tryItOut("{return; }");
tryItOut("/*for..in*/M:for(__iterator__ = prop = * in constructor) break L;");
tryItOut("M:while((({})) && 0){constructorthrow  '' ; }\n{}\n");
tryItOut("let(__proto__ = 033) ((function(){{}})());");
tryItOut("if(( /* Comment */ '' )) { if (this.zzz.zzz.__defineSetter__(\"__proto__\", Math.pow)) {/*infloop*/while(prop.yoyo(<><x><y/></x></>))(3.141592653589793) } else {return; }}");
tryItOut("throw __proto__;");
tryItOut("if(yield this.hasOwnProperty(\"__parent__\")) throw __noSuchMethod__;constructor;");
tryItOut("with({prop: __count__-=({ get __noSuchMethod__() { ; }  })}){}");
tryItOut("/*infloop*/L:for(var prop = prop; @foo; <><x><y/></x></>) return;");
tryItOut("/*infloop*/__count__;");
tryItOut("\nundefined;\n");
tryItOut("L:if((new RangeError())) export __iterator__; else  if ([({ get: __noSuchMethod__, __noSuchMethod__: __count__ })] = *::* ::  /* Comment */<><x><y/></x></> ? <><x><y/></x></> : *::*) /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>) {export *; }");
tryItOut("{return <><x><y/></x></>;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/L:while((({prototype setter: function(y) { yield y; break L;; yield y; } })))throw <x/>;");
tryItOut("with({})  if (*)\n");
tryItOut("{\n; }");
tryItOut("/*infloop*/while(this.zzz.zzz)/*infloop*/L:while(true.*){if(window) const __parent__; else  if (<x><y/></x>) {export __parent__;return @foo; } }");
tryItOut("L:if(undefined) let prototype, __count__ = <x/>; else  if (this) {throw <y><z/></y>; }");
tryItOut("export *;;\nexport *;\n");
tryItOut("{return; }");
tryItOut("L:if((function(q) { return q; })() < [<x><y/></x>] :: (({ set function::__proto__ __proto__ (prototype, prototype) { yield null } , __parent__ getter: new Function }))) { if ((__proto__.__count__ in ('fafafa'.replace(/a/g, function  __iterator__ (__proto__, __count__)<><x><y/></x></>)).@*)) {return; } else {with(({a2:z2})){gc(); } }}");
tryItOut("L:while((new (*)(<x>\f<y/></x>)) && 0)let __parent__ = 0x99, constructor;if(1.3) {gc()let constructor = <x><y/></x>; } else  if (true) return;");
tryItOut("export *\n");
tryItOut("switch([[1]]('fafafa'.replace(/a/g, function (__count__) { (<><\fx><y/></x></>); } ))) { default: case 8: L: ;break; case 1: M:with({prototype: (eval(\"let (prop = 1e-81) {  set __count__ __count__ (prop) { yield window }  }\", undefined))})yield;break; case 7: (this);case 1: yield [prototype = __iterator__ for ((window)([]) in @foo)];break; break;  }");
tryItOut("{export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.prototype in <><x><y/></x></>) /*for..in*/M:for(let __proto__ = prototype = <x><y/></x> in  /x/ ) {yield;gc() }");
tryItOut("if(this.zzz.zzz) { if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) throw ({a1:1});} else {(true);yield; }");
tryItOut("if(((__noSuchMethod__) in new (<><x><y/></x></>).watch(@foo, <x><y/></x>))) export constructor;");
tryItOut("__proto__ = constructor;");
tryItOut("/*infloop*/M:for(var [({ function::__noSuchMethod__: ({ __count__: ({ __noSuchMethod__: ({ constructor: ({ __noSuchMethod__: __proto__, __iterator__: prototype }), __proto__: setter }) }), __count__: ({ __parent__: [this.__defineSetter__(\"__count__\", false), ({ constructor: __proto__ }), ({ __iterator__: __iterator__, prop: __noSuchMethod__ })], __parent__: ({ __parent__: __noSuchMethod__ }) }) }) }), (__iterator__), ] = constructor = [,,z1].watch(\"__parent__\", <y><z/></y>); <x/>; ((yield prop = (function::prop = __noSuchMethod__ = false)))) const constructor = window;");
tryItOut("L: export prop;");
tryItOut("{L: ([,]);; }");
tryItOut("/*infloop*/for(const __proto__; prop\n < ((function ([y]) { })().isPrototypeOf( /x/ ))\t; {}) continue L; const __noSuchMethod__;");
tryItOut("return Exception(<xxx>{__iterator__}</xxx>.__defineSetter__(\"__parent__\", (<y><z/></y>.isPrototypeOf(0))), window);");
tryItOut("/*for..in*/M:for(var ({ __parent__: ({ __proto__: ({ __iterator__: constructor, __noSuchMethod__: ({ constructor: [], __parent__: __count__ }) }) }), prototype: \f__proto__.prop }) in (<bbb xmlns:ccc=\"this.throw(false)\"><ccc:eee></ccc:eee></bbb>.(prototype.((((1 for (x in [])))(*)))))) {export *\nreturn window; }");
tryItOut("/*infloop*/for(const constructor = return ([default: \t;break;  for (prototype in [,,])]);; 3; constructor) {(window).__defineSetter__ }");
tryItOut("{continue ;yield this; }");
tryItOut("/*for..in*/for(var prop in (([1,2,3,4].slice)(__parent__ = <x/> <= prop ? <><x><y/><\f/x></> : <x/>))){const prototype, constructor;export __count__; }");
tryItOut("let(constructor = (\f((p={}, (p.z = (constructor = this))())).unwatch(\"__count__\")), ({ prototype: ({ __proto__: __noSuchMethod__ }), __count__: set }) = <><zzz>3</zzz></>) { constructor = {}['prop'] = prototype;");
tryItOut("{let (__noSuchMethod__ = [[1]], prop) { yield; }\f }");
tryItOut("/*infloop*/for(const __count__; ( /* Comment */false); \n<x/> += (uneval(null))) {/*infloop*/while(#1=[#1#]){return;this; } }");
tryItOut("if((__noSuchMethod__)) { if ((-1).__count__) {(this);export *; } else ;}");
tryItOut("L:if(__parent__ = __count__) {thisyield  /x/ ; } else {throw  \"\" ; }");
tryItOut("let (__parent__, ({ __proto__: __parent__ })) { ; }");
tryItOut("{const yield; }");
tryItOut("L: {;\nvar __count__, __noSuchMethod__ = <><x><y/></x></>;\nyield\n }");
tryItOut("\n<x>//h\n<y/></x>");
tryItOut("if(*) ; else  if (null) yield; const __parent__;");
tryItOut("{}");
tryItOut("M:if(<x><y/></x>) { if (<x><y/></x>) {return <x><y/></x>; }} else {}");
tryItOut("let (function::__noSuchMethod__, prototype) { L:if(constructor = true) { if (new (#1#)()) return window;} else {function (__noSuchMethod__, prototype) default  } }");
tryItOut("let constructor\n");
tryItOut("if(new  /x/g (<x/>)) { if (new Boolean()) var prop; else export __parent__;}");
tryItOut("if((({ prototype: constructor }) = (*.eval(<><x><y/></x></>)))) { if (#2=[<x/>]) return;} else return <x/>;");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("/*for..in*/for(prop = prototype >>>=window.propertyIsEnumerable(\"__proto__\") in ((function(q) { return q; })((this.__defineSetter__(\"__count__\", (1 for (x in []))))))){let (__parent__ = ({prototype:  \"\" })) {  if (window) }/*infloop*/do {const __parent__, prop =  '' ;gc() } while(<y><z/></y>); }");
tryItOut("this.zzz.zzz;");
tryItOut("gc()");
tryItOut("__iterator__ = __parent__;");
tryItOut("yield __noSuchMethod__, __parent__.__iterator__;if(__count__) {{} } else return;");
tryItOut("M:if(prop.(*::* .@*:: prototype)) { } else continue ;");
tryItOut("/*infloop*/for(__proto__; new (Function)(case 0: /*for..in*/for(var setter in ((/a/gi)(<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>))){return; }default: break; ;break; );  '' ) @foo;");
tryItOut("if((<x><y/></x>.(<x/>))) {if(new (prop)(, this)) {constructor: <x><y/></x> +=  \"\"  } } else  if (<ccc:ddd></ccc:ddd>.(__proto__ = <><x><y/></x></>)) {/*for..in*/__noSuchMethod__, __noSuchMethod__\n[1,2,3,4].slice\n/*infloop*/do export *; while(1.3); }");
tryItOut("if(try { throw window;\t } finally { function(q) { return q; } }  , window) { if ((window).call(yield, )) {} else {function ()<><x><y/></x></> }}");
tryItOut("/*infloop*/for(__count__; __parent__(- \"\" ) = <xxx>{prototype}</xxx>; (prototype.propertyIsEnumerable(\"__proto__\"))[({ __iterator__: __iterator__, __iterator__: constructor }//h\n) = [, __parent__]]) L:if( /x/ ) ");
tryItOut("switch(({__proto__: <y><z/></y>})) { case ((<x><y/></x>)(<x><y/></x>, 3))[(<x/>)]: break; default: (function  __proto__ (__proto__, __proto__)window).callbreak; case let (prototype) __proto__: case 0:  }__count__ = __parent__, __parent__;const prototype = <><x><y/></x></>, __noSuchMethod__ = <x/>;");
tryItOut("const __proto__, __count__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__]\f = true.prototype ? (__iterator__ = 0/0) : @foo .@ [] ===  in (\nthis)) {const __noSuchMethod__ = this, constructor = <x><y/></x>; }");
tryItOut("\tif((*::* >>> [1,,])) throw  /x/ ;");
tryItOut("if(((new Function(\"gc()\")))(<x/>)) {/*for..in*/L:for(var [__noSuchMethod__, __parent__] = prototype = this in <x/>) export prop;/*infloop*/while(){} }");
tryItOut("/*infloop*/for(const __parent__ = <x><y/></x>; false; #1#) break M;");
tryItOut("break \n{window;let constructor; }");
tryItOut("M:if(<x><y/></x>) { if ([,])  if (__proto__) else (null);}");
tryItOut("\nL:do {{} } while((<x><y/></x>) && 0);");
tryItOut("if(*) {const __count__, prototype = <y><z/></y>;return <><x><y/></x></>; } else {return;yield this; }\n");
tryItOut("/*infloop*/L:for(({ constructor: prototype, __noSuchMethod__: ({ __noSuchMethod__: __count__ }) }) = new *::* / -3/0(); (p={}, (p.z = (\n /x/ ))());  /x/g .unwatch(\"__noSuchMethod__\")) const __noSuchMethod__ = false, prop = this;");
tryItOut("'if(<zzz><><x><y/></x></></zzz>) { if ( prop, prop = __noSuchMethod__(__proto__ = <x/>)) yield; else return null;}");
tryItOut("{;export __count__; }");
tryItOut("y");
tryItOut("{export *\n/*infloop*/for(var __noSuchMethod__; [,,]; new undefined) ; }");
tryItOut("with((this if ([1,,])).eval(([15,16,17,18].some(Math.pow,  /x/ ))) * [,,z1])let prop;throw prop;");
tryItOut("if(let (constructor = window) [15,16,17,18].sort('haha'.split,  /x/g )) yield; else  if (<><x><y/></x></> for (__proto__ in <x/>).watch(\"__parent__\", 'haha'.split) ? (--this) : (<x><y/></x>.__defineGetter__(\"__count__\", Function))) {yield window; } else ;");
tryItOut("/*infloop*/M:for([[]]; <x><y/></x>; undefined) {prototype, __iterator__; }");
tryItOut("/*infloop*/M:for(*::*; new ([11,12,13,14].sort)(new (<x><y/></x>)(__count__.prototype setter= Math.sin)); new ({}).__lookupGetter__(<><x><y/></x></>, *)) (*::*);");
