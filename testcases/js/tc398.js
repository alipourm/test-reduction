tryItOut("do function () { return <x/> }  while(( /x/g ) && 0);");
tryItOut("__count__, constructor");
tryItOut("for(let y in [5,6,7,8]) (<><x><y/></x></>);");
tryItOut("while((typeof window) && 0){;yield false; }");
tryItOut("continue ;\n1e-81;\n");
tryItOut("(arguments);\n{}\n");
tryItOut("L: {<><x><y/></x></>[,]; }");
tryItOut("if(({ constructor: constructor, __noSuchMethod__: __parent__ }) = *::*.eval(*::*)) {@foo.valueOf(\"number\")\n;export prop; } else {gc()return; }");
tryItOut("");
tryItOut("throw __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in new (eval)(<x><y/></x>, window)) {break ; }");
tryItOut("L:switch(*::*) { default: yield;case 6: return;gc()case 5: ({}).hasOwnPropertybreak;  }");
tryItOut("let([] = #1#.__defineGetter__(\"__count__\", Function), __iterator__ = <x/> for each (__count__ in <><x><y/></x>\t</>)) { yield 1.3.valueOf(\"number\");");
tryItOut("with({__parent__: <x><y/></x>.isPrototypeOf(<x/>)}){const __parent__ = prototype, __iterator__; }");
tryItOut("if(\f++@foo) {__proto__ = 0.1, __parent__; } else export constructor;");
tryItOut("/*infloop*/do let __proto__ = <x><y/></x>; while(3/0);");
tryItOut("return /*\n*/<><x><y/></x></>;");
tryItOut("<x><y/></x>\n");
tryItOut("{throw <x><y/></x>;export *; }");
tryItOut("return @foo;");
tryItOut("let (__count__, constructor = false) { default: case 9: break; case *::*: break; case 7: return;break;  }");
tryItOut(";");
tryItOut("L:if(__count__ = ({ prop: ({ prop: ({ __parent__: ({ constructor: prop }), __proto__: [, __noSuchMethod__, , ] }), constructor: prototype }), __proto__: [, [], ({ __count__: [prototype, , , ], __count__: __proto__ }), ({ __noSuchMethod__: ({ __iterator__: prop, __count__: let }), __proto__: __parent__ })] })) {throw 5.0000000000000000000000;throw 5.0000000000000000000000; } else  if (__proto__) <x/>;");
tryItOut("set = __count__;");
tryItOut("do {} while(( \"\" ) && 0);");
tryItOut("if(@foo) var __noSuchMethod__ = *::*; else yield <x><y/></x>;");
tryItOut("yield;");
tryItOut("throw constructor;");
tryItOut("{const __iterator__ = prototype; }\nexport *;\n");
tryItOut("{M:if(({})) __iterator__ = 033; }");
tryItOut("/*for..in*/for(let __count__ = <y><z/></y> in ('fafafa'.replace(/a/g, ({}).__lookupGetter__) for (case 0: case 6:  in @foo)(new Function(\"(<x/>);\")))) ([z1]);");
tryItOut("/*infloop*/while( '' )Function");
tryItOut("/*infloop*/M:while(/a/gi(*,  '' )){gcyield  /x/g ; }");
tryItOut("if(new <y><z/></y>(#1=[null\t], 1e-81) >>> undefined <= window) /*{ if () return;} else ;");
tryItOut("while((window) && 0){/*for..in*/for(let prototype = 3/0['prototype'] in <y><z/></y>) {true;break L; } }");
tryItOut("let (__count__ = (__proto__.(<><x><y/></x></>))) { export *; }");
tryItOut("while((eval(\"/*infloop*/do {} while(@foo.throw(window));\", (<y><z/></y>.hasOwnProperty(\"prop\")).__lookupGetter__(\"constructor\"))) && 0)/*infloop*/L:for(3.141592653589793; (1e81.yoyo(window)); ({prototype:  /x/ })) {;let __iterator__; }");
tryItOut("/*for..in*/for(var prop in -0) {export *;gc() }");
tryItOut("if(*.__defineSetter__(\"__iterator__\",  /x/ )) {function(id) { return id }; } else  if (Exception(<><x><y/></x></>, #1=[#1#]).throw(this.__defineGetter__(\"constructor\", function ([y]) { }))) {(<><x><y/></x></>);; }");
tryItOut("__iterator__.__noSuchMethod__ = __proto__;");
tryItOut("/*for..in*/for(let __parent__ in <x><y/></x>) {(*::*); }\nwhile((__noSuchMethod__) && 0)function(y) { yield y; export *;; yield y; }");
tryItOut("let (prop = <x><y/></x>) { __parent__, prop =  /x/ ; }");
tryItOut("this.zzz.zzz;");
tryItOut("with({__noSuchMethod__: [, prop, , [, __noSuchMethod__, , , ]] = constructor}){var ; }\n");
tryItOut("{return; }");
tryItOut("/*for..in*/for(({ __iterator__: [[__noSuchMethod__(<x><y/></x>)], , __proto__, ({ prop: ({ __count__: __parent__ }), constructor: __count__ }), [, , , __proto__]], __iterator__: ({ prototype: prop })\t }) in (((this.__defineSetter__(\"__proto__\", Function)))(__count__.eval((__parent__.__noSuchMethod__ = function(id) { return id })[ /* Comment */__proto__ = <x/>])))){Math.sin }");
tryItOut("if(null @ <><x><y/></x></>) {prototype; } else  if (/a/gi()) prop");
tryItOut("prop = constructor, __count__;");
tryItOut("/*infloop*/while(0.1([,])){}");
tryItOut("{break ;var __count__; }");
tryItOut(";yield <><x><y/></x></>\nreturn window;");
tryItOut("do {let __iterator__;return; } while((false.valueOf(\"number\")) && 0);");
tryItOut("return prop;");
tryItOut("L: {L:switch(((prototype.prototype getter=  /x/ )[(prop)(! /x/g .__defineGetter__(\"constructor\", function(q) { return q; }), *::* ? *::* :  /x/g )])) { case (prop.(<><{__iterator__}> </{__iterator__}></>)): \nreturn;\n } }");
tryItOut("yield 1.2e3 != <x/>;");
tryItOut("for(let y in []);");
tryItOut("let (get = <y><z/></y>) { M:with(*){return; } }");
tryItOut("(*::*);");
tryItOut("L:switch(this) { case (function ([y]) { })(): break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in false) <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(const [__count__, constructor] = function::__noSuchMethod__.(function ([y]) { }) in Math.pow.isPrototypeOf( \"\" \t)) {yield null;{} }");
tryItOut("/*infloop*/M:for(__parent__ / <y><z/></y>; (function  prop (prototype) { return  for each (x::__noSuchMethod__ in <x><y/></x>) } )(); -3/0) {yield; }");
tryItOut("if( /x/ .__defineGetter__(\"prop\", (new Function(\"(<><x><y/></x></>);\"))).yoyo(__iterator__ = prop)) const constructor; else var constructor;");
tryItOut("/*infloop*/for(var __proto__ = new Date(); (__count__); (x::__proto__.(yield __proto__).throw((<><x><y/></x></>try { <y><z/></y>; } catch(prototype if (function(){yield;})()) { throw <><x><y/></x></>; } catch(constructor) { throw null; } finally { function(y) { yield y; ;; yield y; } } )))) {with({}) { let __parent__; } while((prop = __parent__) && 0){(undefined);return #1#; } }");
tryItOut("if(.2) return; else  if ((__iterator__ = [[]])) var constructor;");
tryItOut("if(new arguments( for (__noSuchMethod__ in  \"\" ) for each (constructor in  '' ))) { if (yield <x><y/></x> >>> window) ({}).__lookupGetter__ else /*infloop*/for(<x><y/></x> = <x><y/></x>;  /x/ ;  '' ) @foo;}");
tryItOut("if(String()) {;break L; } else  if (constructor.__proto__ ? <y><z/></y> : (__noSuchMethod__ = 0)) J else {export __count__;return; } const let;");
tryItOut("try { return; } catch(__noSuchMethod__ if (function(){with({}) { this.zzz.zzz; } })()) { with({}) { constructor = __noSuchMethod__; }  } catch(__count__) { let(constructor = (__parent__%=__parent__ = window)) { __iterator__ = __count__; } ");
tryItOut("export *;");
tryItOut("export __iterator__");
tryItOut("__count__;{}");
tryItOut("L:if( '' -- ? [1,2,3,4].map(({prototype: undefined, constructor: ({}) })) : (__iterator__ =  '' ) >= <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")) { if ((__noSuchMethod__.prop getter= Math.pow)) /*infloop*/L:for(({ prototype: prototype }) = this.throw(this); new (eval)(); <y><z/></y>.watch(\"constructor\", Math.pow)) {export prototype;let __iterator__ = true; } else {gc()<x><y/></x>; }}");
tryItOut("__count__ = __proto__;");
tryItOut("let (constructor) { if(<><x><y/></x></>--) { if (<bbb xmlns=\"this.zzz.zzz\">__count__</bbb>) {}\n} else {const prop; } }");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = (((this( /x/ , [[]])) if (false for (__parent__ in <y><z/></y>)))) in constructor = <><x><y/></x></> && __noSuchMethod__) {yield this }");
tryItOut("/*infloop*/M:do /*infloop*/do throw [,,z1]; while(<><x><y/></x></>); while(//h\n /x/g .yoyo(*));");
tryItOut("if((('haha'.split).call(, ))) {return 0;break M; } else  if (this(yield <><x><y/></x></>)) /*for..in*/for(var constructor = true >>>= \"\"  in @foo) ( \"\" );");
tryItOut("/*infloop*/for(var __proto__; *::*; *::*\n.valueOf(\"number\") .@*:: (+\n<x><y/></x>) instanceof ({ set constructor __noSuchMethod__ () { return (__noSuchMethod__ >>> <x><y/></x>) }  })) for(let y in [5,6,7,8]) (new Function(\"__proto__ = <><x><y/></x></>;\"))");
tryItOut("/*infloop*/for((__parent__ = eval(\"\",  /x/ )); RangeError(); <>(__count__ ? [3/0].some(*) : [11,12,13,14].map)</>) function(y) { yield y; const prototype, prop = -1;; yield y; }");
tryItOut("let (prototype) { {} }");
tryItOut("/*infloop*/M:do {continue M;return; } while(new <x/>);");
tryItOut("/*for..in*/for(var [__proto__, __iterator__] = (constructor = <x/> >>> (__parent__.unwatch(\"__noSuchMethod__\") << (((new Function(\"const __count__ = *, __proto__ = (function ([y]) { })();\"))).call(<><x><y/></x></>, true, <x><y/></x>)))) in #2=[<><x><y/></x></>]) yield\n");
tryItOut("L: {break ; }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: prototype }) = ({ set __noSuchMethod__()<x/>, prototype: <y><z/></y> }); window.valueOf(\"number\"); [new [1,2,3,4].slice()].filter('haha'.split)) {<><x><y/></x></>;L: {let __noSuchMethod__ = <x><y/></x>; } }\n");
tryItOut("L: export __iterator__;");
tryItOut("if( /x/g ) {x::{gc() };yield; }");
tryItOut("if(__parent__.__parent__ = * ? @foo(arguments) : let (__iterator__ = <x><y/></x>, each) <><x><y/></x></>) {/*infloop*/do yield; while(<x><y/></x> - [,,]); }");
tryItOut("this.zzz.zzz;");
tryItOut("switch(<><x><y/></x></>) { default: case #1=[#1#]: gc()break; case <><x><y/></x></>: case 3: case 0: break; continue L;case *::*: export __iterator__;gc()break; case __iterator__: break; __proto__; }");
tryItOut("if(<><x><y/></x></>.throw(<><x><y/></x></>))  else  if (__iterator__ = <y><z/></y> % *) {{} } else ;\n;\n");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("__proto__ = prop;");
tryItOut("(new Function(\"if(-1) {; }\")) const __parent__;");
tryItOut("do [1,,]; while(('fafafa'.replace(/a/g, __parent__) , prototype.prototype getter= [1,2,3,4].slice) && 0)\n");
tryItOut("/*infloop*/do {return prop; } while(1e-81.valueOf(\"number\").yoyo(__count__.__lookupSetter__(\"__noSuchMethod__\")) .. new (*)(<y><z/></y>, -0).watch(\"prop\", {}\t));");
tryItOut("{with((true.@*))const __noSuchMethod__; }");
tryItOut("yield <><x><y/></x></>");
tryItOut("M:if(*) {continue ;function  __noSuchMethod__ (__count__, __iterator__) { gc() }  }");
tryItOut("continue ;\n/*infloop*/L:for(( \"\" .eval(null)); /*\n*/<><x><y/></x></>; -0.hasOwnProperty(\"__parent__\")) while((*) && 0){{} }\n");
tryItOut(";return;");
tryItOut("/*for..in*/for(const prototype in <><x><y/></x></>) {__parent__ = <x/>, __count__;__iterator__, prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for (var  in (this)) {{} }/*for..in*/L:for(const __noSuchMethod__.constructor in ((/a/gi)((<x><y/></x>\f++)))){yield;const __iterator__ =  /x/ ; }");
tryItOut("/*infloop*/M:while(this)break ;");
tryItOut("(__count__) = __count__;");
tryItOut("throw  /x/ ;var constructor =  \"\" ;");
tryItOut("yield {}");
tryItOut("/*infloop*/for(new function (__iterator__)<x><y/></x>(1e-81).*.yoyo((false == *) in (#1=<><x><y/></x>//h\n</>)); [,,]\n; yield prop) (new Function(\"__parent__;\"))");
tryItOut("if(prototype) { if ( ''  ..  '' ) {function(q) { return q; } } else ;}");
tryItOut("do /*for..in*/L:for([__iterator__, constructor] = <y><z/></y>\n in  \"\" ) constructor while((new Date()) && 0);");
tryItOut("if((\n(window)[prop]--)) let __proto__\nreturn constructor;");
tryItOut("L:with({prototype:  '' })<y><z/></y>;");
tryItOut("let(__count__ = yield <><x><y/></x></>, __parent__ =  '' ) ((function(){for(let y in [5,6,7,8]) })());");
tryItOut("if(yield <><x><y/></x></>)  '' ; else  if (this) {yield __count__; } else {yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for((((uneval(prop))) < __proto__.prop = <><x><y/></x></>)[<><xxx>{__count__}</xxx></>]; new (eval)(~window); new function(y) { yield y; gc(); yield y; }()) {gc()Math.sin }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = <><bbb xmlns:ccc=\"1.3\"><ccc:eee></ccc:eee></bbb> </>.valueOf(\"number\") in (window.__proto__) >>>=[*::*].__defineGetter__(\"prototype\", __noSuchMethod__)) with({function::constructor: <x><y/></x> * <><x><y/></x></>}){var constructor, __parent__;/*for..in*/M:for(var __parent__ = <><x><y/></x></> in __parent__) yield [z1]; }");
tryItOut("const prop = <x><y/></x>, constructor\n;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("let (__parent__ = *::* = *, ({ __noSuchMethod__: __proto__ })) { for(let y in []); }");
tryItOut("let (__proto__ = ({ prop: constructor }) = __parent__) { yield (-1);; }");
tryItOut("switch(Error()) { case 9: break; default: /*infloop*/for(const prop = (__count__|=*::*.__lookupSetter__(\"prototype\")); (Math.pow).apply().hasOwnProperty(\"__noSuchMethod__\"); (__parent__ = [z1])) /*for..in*/for(let [__iterator__, __noSuchMethod__] = prop in *) __noSuchMethod__;case function::__parent__.prototype: break; case constructor.__proto__: if(this) const __noSuchMethod__;break; case 0: case this:  }");
tryItOut("return <><x><y/></x></>;\nreturn <x/>;\n");
tryItOut("const __noSuchMethod__; const __iterator__;");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in new Math.pow(<y><z/></y>, ({a1:1}))) {break ;/*for..in*/for(const [__noSuchMethod__, function::__count__] = *::* in <x><y/></x>) {return {{}const constructor; }; } }");
tryItOut("export constructor;");
tryItOut("try { with({}) __iterator__ } catch(__parent__ if (function(){return (new (<>yyy</>)((((<x/>)[#1=[#1#]]).__defineSetter__(\"__iterator__\", Math.pow)), let (constructor) new constructor(<x><y/></x>, this)));})()) { {} } catch(__parent__ if (function(){throw StopIteration;})()) { for(let y in [5,6,7,8]) yield yield prop.constructor; } catch(prototype) { throw __proto__; } ");
tryItOut("function ([y]) { }");
tryItOut("{yield <><x><y/></x></>; }");
tryItOut("{{} }");
tryItOut("if(\n(({ __iterator__: __iterator__ }) = constructor)) throw StopIteration; else  if ((__count__.propertyIsEnumerable(\"prop\")).__lookupSetter__(\"prototype\")) {switch((<x/>.__lookupSetter__(\"__parent__\"))) { case (<y><z/></y> | <y><z/></y>) @ __noSuchMethod__ = constructor ? [z1,,] : __noSuchMethod__: break;  }/*for..in*/for(let prototype in ((undefined)(this >> <x><y/></x>))){let __proto__, __count__ = *::*;var prototype, prototype; } } else {var function::prop = __count__, __noSuchMethod__; }");
tryItOut("return __iterator__;");
tryItOut("gc()\n{}");
tryItOut("if(__count__) {throw *;{yield [[]];; } } else  if (__parent__ = -1.propertyIsEnumerable(\"prop\")) \fnew Function");
tryItOut("throw prototype;");
tryItOut("let ([, constructor, [[function::(window)(<x><y/></x>), __noSuchMethod__, <y><z/></y>(@foo), ({ __iterator__: __proto__ })], [({ prop: ({ __parent__: __parent__, __count__: constructor }) }), , ]]] = #3={a:#3#}, __iterator__ = (eval(\"(yield <x><y/></x>)\", __parent__ = window.@foo))) { break M; }");
tryItOut("<></>");
tryItOut("L:if(this) while((((#3={a:#3#})())) && 0)const prop; else return;");
tryItOut("let(prototype = prototype = prototype >= __noSuchMethod__.__defineSetter__(\"__parent__\", (([true.throw(window)].some(function(y) { yield y; const constructor = window;; yield y; }))).__defineSetter__)) { with({}) with({}) { with({}) { this.zzz.zzz; }  } ");
tryItOut("__proto__ = __iterator__;");
tryItOut("switch((( /x/ )(true) = <><x><y/></x></> !== undefined)) { case 4: default: break; case (constructor): break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in *::*) {;if(<x><y/></x>) export *; else  if (constructor) {;yield; } }");
tryItOut("/*for..in*/M:for(var undefined.prototype in ((function(q) { return q; })(( \"\"  .. <><x><y/></x></>) for (__iterator__ in  \"\" ) if (1.2e3)))){*; }");
tryItOut("L:if(__proto__ = const __proto__ = <x><y/></x>) break ;");
tryItOut("/*infloop*/for(*::*; (__noSuchMethod__.__iterator__ = this);  get __iterator__(prototype) { return [,,z1] .@ window } .__lookupGetter__(\"prop\")) continue ;");
tryItOut("/*infloop*/for([, ({ x::__count__: constructor.__noSuchMethod__, constructor: ({ __parent__: [, , , ] }) }), [, , ({ prop: ({ __proto__: ({ __proto__: prototype, constructor: __iterator__ }), x::prototype: __noSuchMethod__ }), __parent__: __proto__ }), ], [prop, , , ]] = prototype = [1]; ~prototype; __noSuchMethod__) {;yield <x/>.isPrototypeOf(1e81); }");
tryItOut("/*infloop*/while((@foo.propertyIsEnumerable(\"yield\")) /  ''  if ([])){return\n }");
tryItOut("let (__count__ = <><x><y/></x></>) { export *; }");
tryItOut("'haha'.split");
tryItOut("L:switch(__iterator__.throw(prototype)) { case __parent__.prototype = function::__noSuchMethod__: /*infloop*/while((({}).hasOwnProperty( /x/ , prop))){throw  /x/g ; }break; default: __proto__ = __parent__;break; case 5: M:if(<x/>.__count__\t) {{}<><x><y/></x></>; }case ((({}).__lookupGetter__)(prototype.__count__)): L:if(true) {var __count__, __count__; } else  if ([[1]]) {return; }case ([11,12,13,14].map): M:switch((new /a/gi(<><x><y/></x></>))) { case  /x/  if (true): ;{}\ndefault:  }break;  }");
tryItOut("with({}) for(let y in [5,6,7,8]) prop, __parent__ =  /x/g ;");
tryItOut("if(yield) {yield;return 1e+81; } else  if (#0=({let: true})) {gc() } else gc()");
tryItOut("/*for..in*/L:for(var __parent__ = this in  /x/g ) {yield prototype; }");
tryItOut("__proto__;");
tryItOut("{throw @foo;undefined }");
tryItOut("L:if(__iterator__.constructor = ([1,2,3,4].map).call(null, constructor)) {;const prop, __noSuchMethod__ = -3/0; }");
tryItOut("{M:if(window > window) {false;{} } else  if (true) {let __count__ = <><x><y/></x></>; } }");
tryItOut("yield\n");
tryItOut("if(new yield new ((<><x><y/></x></>).watch)( \"\" , this)) { if (<!--yy-->) {const __iterator__, __parent__;__parent__\nyield;\n }} else {(p={}, (p.z = __proto__ = window)()); }");
tryItOut("L:if(new ((new Function(\"return __noSuchMethod__;\")))()) yield <><x><y/></x></>; else export constructor");
tryItOut("if((__iterator__ = <x><y/></x>).@foo) {if(((false)[<y><z/></y>])) { if ((window)[undefined]) export *; else {yield;function (__count__)<x><y/></x> }}<><x><y/></x></>; }");
tryItOut("with({prop: __proto__ =  /x/g }){throw <>var __iterator__;</>;continue ; }\n__iterator__;");
tryItOut("/*infloop*/do {export __parent__; } while(*::*.prototype: 0/0);");
tryItOut("L:with( /* Comment */this.__defineGetter__(\"__count__\", function (__proto__) { function  prototype ()<x/> } ).@*)const __iterator__ = @foo;");
tryItOut("/*for..in*/for(prop.prop in window()) {}");
tryItOut("if(((p={}, (p.z = #1#)()))) __parent__; else <><x><y/></x></>.hasOwnProperty(\"__parent__\")");
tryItOut("/*infloop*/L:for(let __parent__ = ( /x/g .throw(<x><y/></x>)); Date(*); function () { return window } ) {let __iterator__ = <y><z/></y>, __parent__ = *::*; }");
tryItOut("/*infloop*/do if(function::__proto__) ; else  if ( /x/g ) {; } else {yield <y><z/></y>; '' ; } while([1e-81]);");
tryItOut("export prototype\nthrow (__iterator__ ==  /x/ );");
tryItOut("var __noSuchMethod__ = true");
tryItOut("if(*::*) {const __parent__ = window;delete } else {export __parent__;\t }");
tryItOut("( \"\" );\n;\n");
tryItOut("L:switch( /* Comment */[@foo ? -3/0 : __parent__]) { case __noSuchMethod__ = <><x><y/></x></>.__defineSetter__(\"__proto__\", function(y) { yield y; {}; yield y; }): break; default: /*for..in*/for(const __iterator__ in <x/>) \ncase 6: truebreak;  }");
tryItOut("if(([15,16,17,18].some((function (prop) {  } ).apply,  \"\" ) % *.__lookupGetter__(\"__parent__\"))) { if (([window.*])) } else {M:if(0x99) export __parent__; else * }");
tryItOut("if((({a2:z2})[ '' ])) {L:do {(<><x><y/></x></>); } while((({ set prototype __proto__ (__parent__, constructor) { yield this }  })) && 0);undefined } else  if (((__noSuchMethod__.__count__ = (false | 3/0)) != (__proto__-=__proto__ << prop))) break ; else {yield;throw *; }");
tryItOut("/*infloop*//*\n*/while(<x><y/></x>){({}).hasOwnPropertyreturn *::*; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(__parent__ = this in this) {var __count__;return <x><y/></x>; }");
tryItOut("let(__proto__(window)) { throw StopIteration;");
tryItOut("/*infloop*/while((((1 for (x in []))).call([z1], ).__proto__)){Function }");
tryItOut("with({}) { return; } ");
tryItOut("{}");
tryItOut("if(*::*) ; const prototype; else  if (<x><y/></x> .@ <x><y/></x>--.throw(prop)) {do {var __count__ = <x><y/></x>; } while((1.3) && 0); }");
tryItOut("L:if(()) {return;let set, __proto__; }");
tryItOut("let(__iterator__) { try { <x/>; } catch(__proto__) { export __iterator__; } finally { *; } ");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = __noSuchMethod__ in *) ");
tryItOut("\nlet __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__.prop in (__count__) = (uneval((__iterator__ >>= * , yield <x><y/></x>)))) {}");
tryItOut("/*infloop*/do {export *;yield; } while(\n\n<y><z/></y>.prototype = (*.valueOf(\"number\")));");
tryItOut("/*infloop*/for(var __noSuchMethod__;  /x/ [<><x><y/\f></x></>]; __noSuchMethod__) (5.0000000000000000000000);\ngc()\n");
tryItOut("yield eval(\"return;\", null instanceof prop);");
tryItOut("if(new function (__iterator__, __noSuchMethod__) { yield yield this } ((function ([y]) { })())) let prototype, __iterator__; else  if (((__count__) = ((uneval( /x/ ))))) {break L\n }");
tryItOut("L:if(~0/0 .@x:: constructor = __count__) { if (new  \"\"  -= 'haha'.split(<><x><y/></x></>)) {let constructor;gc() } else {if(__count__) {gc() } }}");
tryItOut("/*infloop*/L:while(\n<><x><y/></x></>){ }const __count__ = *, prototype = <x><y/></x>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor.__parent__ in 0/0) /*for..in*/for(var __parent__ in (((1 for (x in [])))(3.141592653589793))){export *; }");
tryItOut("/*infloop*/L:for(prototype; <x><y/></x> >= true; (new *::*(null, <x><y/></x>))) {export constructor;return __iterator__; }");
tryItOut("if(__parent__.__parent__ = #1#.valueOf(\"number\")) { if (prop = (Function())) throw *::*; else }");
tryItOut("__count__ = __count__;");
tryItOut("(*::*);");
tryItOut("const __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("if(window) {return  '' ; } else {{} }");
