
tryItOut("switch([15,16,17,18].sort(Function,  \"\" ) / 1e81) { case 1: break; case window: case true.__lookupSetter__(\"__noSuchMethod__\").__proto__ === (*)(): break; break;  }");
tryItOut("yield;");
tryItOut("{/*for..in*/for(const __noSuchMethod__ in ((( \"\" ).apply)(window))){const __parent__ = <x/>;null\f; }break M; }");
tryItOut("/*infloop*/while(__parent__.__iterator__-=\n /x/g )gc()");
tryItOut("/*for..in*/M:for(prop = window.(window) in __count__.constructor) {continue ; }\n/*infloop*/__iterator__");
tryItOut(";var __proto__ = #1=[#1#];");
tryItOut("/*for..in*/M:for(var prop in null % arguments) break M;");
tryItOut("/*for..in*/M:for(let __parent__ in ((((({}) for (__noSuchMethod__ in <x><y/></x>))).__defineSetter__)(this.__defineGetter__(\"__iterator__\", eval)))){/*infloop*/for(let prop;  /x/g .eval(__noSuchMethod__); var __iterator__ = window, constructor = <x><y/></x>) ; }");
tryItOut("<><x><y/></x></>\n");
tryItOut("yield *;");
tryItOut("/*infloop*/for(__parent__; (__noSuchMethod__%=((prototype for (__count__ in 0))).__iterator__); undefined.throw(function ([y]) { })) {<x/> !== <x><y/></x> }");
tryItOut("/*infloop*/L:for(let [({ prototype: ({ prop: ({ constructor: ({ __iterator__: ({ __noSuchMethod__: __iterator__, __proto__: prop }) }), __noSuchMethod__: [, ({ function::__proto__: [prop] }), , ] }) }) }), ({ __proto__: ({ prototype: ({ __count__: __parent__ }), constructor: __iterator__ = <><x><y/></x></>.prototype }), __iterator__: [, , , ] })] = .propertyIsEnumerable(\"__proto__\"); [, , , let, ] = *.throw(*::*); __proto__) M:with(-3/0){yield *; }");
tryItOut("({ setter: ({ __iterator__: ({ function::__iterator__: __noSuchMethod__, __noSuchMethod__: ({ constructor: __count__.prop }) }) }), prop: ({ ({ prototype: ({ __iterator__: __parent__, __iterator__: x:: }), __proto__: __proto__ }): \t({ constructor: ({ __count__: [({ __parent__: prototype, __parent__: __count__ }), ({ __noSuchMethod__: __parent__ }), , ] }) }) }) })");
tryItOut("/*for..in*/for([prototype, __parent__] = break M; in 5.0000000000000000000000 ?  ''  : window) <><x><y/></x></>");
tryItOut("let __count__\n");
tryItOut("var __proto__, constructor = __proto__;");
tryItOut("let(__count__, prototype = ('fafafa'.replace(/a/g, 'haha'.split))) ((function(){return;})());");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/L:do { } while(new (<><x><y/></x></>)());");
tryItOut("if(__parent__.prototype = window) {let constructor = true, prop;return 1e81; } else  if ([15,16,17,18].map([1,2,3,4].slice, ((({}).hasOwnProperty)()))) {{}/*\n*/<><x><y/></x></> }");
tryItOut("with({}) let(prototype = (<y><z/></y>.__count__), __iterator__ = <x><y/></x>) { (__iterator__) = __iterator__;");
tryItOut("if(((__count__.__iterator__ getter= ({}).hasOwnProperty).__defineGetter__(\"prototype\", ({}).__lookupGetter__))) if(( /x/  for (__count__ in prop))) { if ((uneval(@foo))) {export *; }} else {; } else  if (window) {yield this; }");
tryItOut("yield Number();");
tryItOut("let (({ setter: constructor, __proto__: prototype }), __count__) { export __noSuchMethod__;\n/*for..in*/M:for(var [__count__, constructor] = (-0) in ({})) {( \"\" );throw 1e81; }\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in prop = (<><x><y/></x></> % (uneval(<x><y/></x>)))) {return; }");
tryItOut("yield;");
tryItOut("with({__count__: <x><y/></x>.(0)})export *;/*infloop*/L:for(({ set constructor() { return <><x><y/></x></> } , __count__: [,,] }); <x><y/></x> :: <x/>;  /* Comment */<x><y/></x>) {return; }");
tryItOut("/*for..in*/for(((yield <x/>))((<x><y/></x>)[0/0]) in ((function(q) { return q; })(prototype.__noSuchMethod__ = <><x><y/></x></>))){continue L; }");
tryItOut("{/*infloop*/M:for(__parent__.__noSuchMethod__.yoyo((3/0\n)); ([ /x/ .@*]); (this.zzz.zzz)) /*for..in*/for(prototype in <x><y/></x>) *::* const __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x/>) {break L;throw <y><z/></y>; }");
tryItOut(";");
tryItOut("if(([false].sort([1,2,3,4].slice))) {;__parent__ = <><x><y/></x></>; } else {; }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = <{function::prop}><!--yy--></{function::prop}> in __proto__++) {/*infloop*/for(let [, , __proto__, ] = ([*::*].some(eval))[<><x><y/></x></>]; __proto__.(({a1:1})); (__count__ = 1.2e3)) {;const __iterator__, prop; }yield 0x99.eval(true); }");
tryItOut("switch((( \"\" )(<x><y/></x>) = (eval(\"__noSuchMethod__\", *)))) { case 8: let __noSuchMethod__;break; default: break; case ((new (__count__.__iterator__)()--).__defineSetter__(\"__proto__\", Math.pow)): break; break; (let __parent__, __count__ = *::*;)break; case 5: return *::*;((0/0).__defineSetter__).callbreak;  }");
tryItOut("/*for..in*/for([__count__, __proto__] = <x><y/></x>.( '' ) in <><x><y/></x></>) export constructor;");
tryItOut("export __parent__");
tryItOut("if(3/0.@foo) /*infloop*/M:while((-0).__count__ = <x><y/></x>)");
tryItOut("/*infloop*/for(__parent__ = @foo.__defineGetter__(\"prototype\", gc); [[], ({ prop: ({ prop: __iterator__ }), __proto__: ({ __parent__: __count__, __noSuchMethod__: ({ __noSuchMethod__: __parent__, __iterator__: __proto__ }) }) }), , , ({ x::__iterator__: ({ __proto__: ({ __parent__: __noSuchMethod__ }), __noSuchMethod__: ({ prop: __iterator__ }) }), __parent__: ({ __proto__: ({ __proto__: __noSuchMethod__ }) }) })] = ((new Function)( /x/ ))(__count__.watch(\"prop\", (<x><y/></x>).__defineSetter__)); __noSuchMethod__) {continue ;L: {var __iterator__, __noSuchMethod__; } }");
tryItOut("/*for..in*/L:for(const __parent__ in ((~3/0)(eval(\"<y><z/></y>\", 5.0000000000000000000000)))){}");
tryItOut("/*infloop*/L:for(~function::__iterator__; ({ get __parent__() { yield (false.isPrototypeOf(<><x><y/></x></>)) } ,  set prop prop () { throw undefined; }  }); -<><bbb xmlns=\"undefined\">yyy</bbb></>) {throw -3/0;export __iterator__; }");
tryItOut("<><x><y/></x></>;");
tryItOut("if((__parent__.__proto__ = <><>([15,16,17,18].filter(constructor, this))</></>)) {{}/*for..in*/for(const __parent__ in ((({}).hasOwnProperty)(<x><y/></x>)))throw window; } else do yield [,,z1]; while(((1e-81 && (-1))) && 0);");
tryItOut("switch(constructor|=(<x><y/></x>)) { default: if(window) export *; else  if ( /x/g ) throw __iterator__;break;  }");
tryItOut("if(__count__) {;__parent__ } else  if (<y><z/></y>) {yield window;let __noSuchMethod__ = <><x><y/></x></>, __iterator__ = this; }");
tryItOut("/*for..in*/for(let constructor in (('haha'.split)(<zzz> /x/g \f for each (__parent__ in undefined)</zzz>))){var __proto__; }");
tryItOut("while(( /x/g .yoyo(*::*) @ (({ set prototype getter () { yield <><x><y/></x></> } , __count__: [[1]] }))) && 0){/*for..in*/for(const prop in <><x><y/></x></>) {(<><x><y/></x></>);<><\rx><y/></x></>; } }");
tryItOut("{break ; }");
tryItOut("/*infloop*/for(var [[], ] = #3={a:#3#}; (new function () { let __count__; } ()); this.__defineSetter__(\"__proto__\", ([,]).watch) / 0.1 ^ 0) /*for..in*/for(var \tfunction::prototype = 3.141592653589793 in [1,,]) export __noSuchMethod__\n-1");
tryItOut("if(<><x><y/></x></> instanceof  \"\" ) { if ( /* Comment */ \"\" ) ; else let (constructor, prototype) { {} }}");
tryItOut(" const __parent__;");
tryItOut("with({__proto__: [prototype, , ] = eval(\"var __noSuchMethod__;\", __parent__)}){}");
tryItOut("/*infloop*/do (eval(\"var __noSuchMethod__;\", constructor))\n while(([,,z1].@foo));");
tryItOut("do var __count__; while((<><x><y/></x></>) && 0);");
tryItOut("if(-0) {const __count__, __iterator__ =  /x/g ;throw window; } else  if (*) {const __iterator__; } else {__noSuchMethod__ = prop;(<x><y/></x>); }");
tryItOut(";yield;");
tryItOut("(<><x><y/></x></>);");
tryItOut("{let (__noSuchMethod__ = prop: prototype) { <x><y/></x>; }\nthrow (new (__iterator__ = false, prop =  '' )()) }");
tryItOut("\n/*for..in*//* nogeckoex bug 349964 */L:\f for  each(var prototype in function(id) { return id }) {yield #1=[#1#]; }");
tryItOut("gc()");
tryItOut("var prop;");
tryItOut("let(prop = __count__.(prop), __iterator__ = __count__) { throw prop;");
tryItOut("with(({a1:1})){__count__ = __proto__, constructor;throw __noSuchMethod__; }");
tryItOut("export *;\n([[1]]);\n");
tryItOut("/*infloop*/do {if(*) {return  /x/g ;gc() } else export __parent__; } while(this.__defineGetter__(\"__count__\", Math.sin));");
tryItOut("/*infloop*/while(*::*\n) \"\" ;");
tryItOut("/*for..in*/for(__proto__ = \n \"\"  in yield [,,z1]) {const __parent__ =  /x/ ,  set __iterator__(__parent__, __proto__) { return <x><y/></x> } ;const prototype; }");
tryItOut("__parent__ = __proto__;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in 1e-81.__noSuchMethod__ = <><x><y/></x></>) ;");
tryItOut("with({}) { with({}) for(let y in []); } ");
tryItOut("/*for..in*/M:for(let [__parent__, /*\n*/__count__] = __iterator__ = this.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty).hasOwnProperty(\"constructor\") in (yield  \"\" )) <bbb xmlns=\"<xxx>{__iterator__}</xxx>.@foo\"><zzz>new RangeError().yoyo([1])</zzz>prop = false</bbb>");
tryItOut("/*infloop*/M:for(__noSuchMethod__ = ([[], ] = prototype.__defineSetter__(\"constructor\", ({}).hasOwnProperty)); [11,12,13,14].map; 'fafafa'.replace(/a/g, /a/gi)) {}\nyield <><x><y/></x></>\nyield;");
tryItOut("{__parent__ =  /x/g ;let (prototype = @foo, __count__) { constructor = [[1]], __noSuchMethod__ = *; } }");
tryItOut("if(*::*) {yield;throw [,,z1]; } else  if (({ __count__: constructor }) = {}.@*) return *::*;");
tryItOut("/*infloop*/for(String(<x><y/></x>,  \"\" ); prop = <x/>; (function(y) { yield y; (prop);; yield y; })((__parent__))) export *;");
tryItOut("/*infloop*/for(const __count__; (Math.sin).call((eval)(1e+81, <> { let prop = <x><y/></x>, return; = <x/>; } </>), <x/>;); (eval(\"{}\", <bbb xmlns=\"false--\">yyy</bbb>))) { }");
tryItOut("{undefined;export *; }");
tryItOut("with((uneval(*::*)))return;");
tryItOut("/*for..in*/for(prototype in <><x><y/></x></>) {yield; }");
tryItOut("L:if(new ({}).hasOwnProperty([z1])) { if (<x/>.yoyo(@foo) |= delete *::*) throw this; else {}}");
tryItOut("/*for..in*/M:for(var ([[]] .@x:: undefined)(<x/> && <><x><y/></x></>) in ((\n1e4)(((let (prop =  '' ) <><x><y/></x></>) >>> (constructor = window.unwatch(\"prop\")))))){if(eval(\"gc()\",  /x/ )()) {let __proto__ = function ([y]) { }, getter; } else  if ((new Array(-<><x><y/></x></>)).__lookupGetter__(\"__iterator__\")) {break M; } else {yield  /x/ ;const __noSuchMethod__; }\n\nprop = null, prototype;\n }");
tryItOut("yield <y><z/></y>;\nexport prototype;\n");
tryItOut("M:if(yield this.watch(\"__noSuchMethod__\", Function).watch(\"__parent__\", [1,2,3,4].slice)) { if (( /x/ \n)) {export __noSuchMethod__;/*infloop*/for(let __noSuchMethod__; (function (prototype, function::__iterator__) { break M; } ).call({}, false); ) __count__ } else {if(true)  }}");
tryItOut("prototype = [,,z1], __count__ = <x><y/></x>;");
tryItOut("return;");
tryItOut("if([15,16,17,18].map(false, ([11,12,13,14].filter))) L: break M;");
tryItOut("if(false) { if (<y><z/></y>--) break //h\n; else {yield <x><y/></x>; }}");
tryItOut("if(constructor = <><x><y/></x></>) let __count__ = <x/>, <x><y/></x>; else let (__proto__ = (<y><z/></y>++)) { break ; }");
tryItOut("with({}) { yield <x/>\n\nlet __proto__; } \n");
tryItOut("with({}) { export *; }  while((__proto__ = function () { return  \"\" ; } ) && 0);");
tryItOut("throw window;{}");
tryItOut("with(this.__lookupGetter__(\"__iterator__\"))\t{const function::__proto__; }");
tryItOut("let (__noSuchMethod__ = <y><z/></y>, __proto__ =  /* Comment */0x99) { function  __parent__ () { return <x/> }  }");
tryItOut("switch(({prototype getter: [1,2,3,4].map, __proto__ getter: (<x><y/></x>) })) { case (<x/>.__lookupSetter__(\"constructor\") instanceof this > <x><y/></x> < #1=prototype.(({a1:1}))): break; default: /*for..in*//* nogeckoex bug 349964 */M: for  each(const (<><x><y/></x></>)(<><x><y/></x></>)\f in this) {gc()yield #1=[#1#]; }break; throw StopIteration; }");
tryItOut("for(let y in [5,6,7,8]) __count__ = __iterator__;");
tryItOut("/*infloop*/while(let (prop = undefined, prop = <x><y/></x>) <x/>.__defineGetter__(\"constructor\", function(q) { return q; }) ? this.zzz.zzz.throw( \"\" ) : [1,,][ '' ])throw [] <<= #1#;");
tryItOut("return 3.141592653589793;\nexport constructor;\n");
tryItOut("\nif(new this(@foo)) { if (((<y><z/></y>)[])) { }} else {export __noSuchMethod__;*::*; }");
tryItOut("/*for..in*/for(const constructor = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in prop.__count__) {/*infloop*/M:do {export __count__;new Function } while([[1]].hasOwnProperty(\"prop\")); }");
tryItOut("const  get prop(constructor, __iterator__) { __count__; } , __proto__ = let (prototype = @foo, __proto__ = __noSuchMethod__)  /x/ ;\nL: yield <x><y/></x>;;\n");
tryItOut("/*infloop*/do {L: {;0.1; } } while(constructor = <><x><y/></x></>);");
tryItOut("if(({ prototype: constructor, __noSuchMethod__: prototype }) = <y><z/></y>) {yield; __count__ = *::*__iterator__ }\n/*infloop*/do {(prototype);return  /x/ ; } while(window);");
tryItOut("for(let y in [5,6,7,8]) (\t '' .__lookupGetter__(\"prototype\").eval(this.__defineSetter__(\"prop\", (*).__defineSetter__)))(@foo) = prop;");
tryItOut("/*for..in*/for(const __count__ in (\f(new Function)(undefined)))yield <y><z/></y>;");
tryItOut("/*for..in*/for([constructor, __proto__] = 3 .@*:: 0 in  '' ) L:with(<x><y/></x>\t)continue L;");
tryItOut(";");
tryItOut("if(({__iterator__: 0x99,  get constructor(__parent__) { yield <><x><y/></x></> }  })) { if ([\f<x/>].filter(/a/gi)) {} else {continue ;<><x><y/></x></> }}");
tryItOut("do if(this.zzz.zzz) const __proto__ = <><x><y/></x></>; else  if (__count__ = #1=[#1#]) yield; else return; while(( \"\" [4.]) && 0);");
tryItOut("/*for..in*/for(var __iterator__ in *::*) {return; }");
tryItOut("/*infloop*/M:for(const ({ prop: ({ __parent__: constructor, __count__: ({ prototype: __count__( '' ), __proto__: x::prop }) }), __iterator__: [, ({ prototype: prop, __parent__: __iterator__ }), , ] }) = new ([1,2,3,4].map).call(<x><y/></x>, <x><y/></x>)((new Function((<>prototype = this</>++), <x><y/></x>)));  if ((-0)); null :: prop instanceof Number(__parent__ = this\t)) /*infloop*/while(( /* Comment */[z1,,]).*)L:switch(undefined) { default: break; case 3: new Function;return 0x99;case <x/>: constructorbreak; case 8: return <x/>;case 6: break; case 9:  '' break; case  '' : return <x><y/></x>;break; case 5: break;  }");
tryItOut("//h\n<x><y/></x>;");
tryItOut("if(constructor.(+*)) { if (eval(\"if(<><x><y/></x></>) {try { (this); } catch(constructor if @foo) { return; } finally { return 0/0; } let constructor; } else {throw true; }\", undefined).valueOf(\"number\")) {L:with(window >> <y><z/></y>){throw thisyield true; }if(prop) gc() }} else {/*infloop*/for(; \n__iterator__; 0x99) (0).__defineSetter__ }");
tryItOut("with([11,12,13,14].map)export *;");
tryItOut("/*for..in*/for(__count__ = (<><x><y/></x></> < <x><y/></x>) in <x/>) {let(__noSuchMethod__, prop =  /x/ ) ((function(){var __iterator__;})()); }");
tryItOut("/*for..in*/for(constructor in (prototype <= 0)) break M;");
tryItOut("/*for..in*/L:for(var [__proto__, __count__] = Number(( \"\"  / 0/0),  '' ) in ({ __proto__: ({ __parent__: ({ __parent__: __iterator__, __iterator__: __proto__ }), null: ({ prototype: __parent__, function::prototype: [prototype, , , , ] }) }), __parent__: ({ constructor: prototype }) }) = new <y><z/></y>(-1)) {/*for..in*/for(var __proto__ in ((({}).__lookupGetter__)(-0 ^= .2)))throw this; const __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in -[,]) return;");
tryItOut("/*for..in*/for((<x><y/></x>)((function ([y]) { })()) in \n((Math.pow)(((__iterator__).call(<><x><y/></x></>, ))))){const __iterator__ = <y><z/></y>, __parent__ = <y><z/></y>;[1,2,3,4].slice }");
tryItOut("/*for..in*/for(let __iterator__ in [prototype = <y><z/></y>]) export *;");
tryItOut("{{yield; } }");
tryItOut("do {gc() } while((( ''  === <x><y/></x>)[<y><z/></y>]) && 0);");
tryItOut("if(<x/>.unwatch(\"__iterator__\")) { } else  if ((void constructor)) gc()");
tryItOut("if(([,].__lookupGetter__(\"prototype\"))) { if ((<y><z/></y>)) {{} }} else {throw <x><y/></x>;false; }");
tryItOut("/*for..in*/for(let ((uneval(<><x><y/></x></>)).prop).__parent__ in @foo.valueOf(\"number\")) yield __parent__;");
tryItOut("{let prop = true; }");
tryItOut("break L\n__iterator__, constructor;");
tryItOut("/*infloop*/for((this.yoyo(undefined)).valueOf(\"number\"); [this].some(function (__noSuchMethod__)(__noSuchMethod__ = window).valueOf(\"number\")); (1.2e3.hasOwnProperty(\"__proto__\") &= constructor = *)[[11,12,13,14].sort]) while((1e+81) && 0){<y><z/></y> }");
tryItOut("/*for..in*/for(var __parent__ in ((1e4)(<><x><y/></x></>))){}");
tryItOut("/*for..in*/M:for([__proto__, prototype] = *.@* in this) window");
tryItOut("if(*::*) { if (this.zzz.zzz) for(let y in []); else function::__noSuchMethod__ = __noSuchMethod__;}");
tryItOut("\t{export __iterator__\nyield *\n;export *; }");
tryItOut("/*infloop*/M:while(<x><y/></x> -= window)return <><x><y/></x></>;");
tryItOut(";");
tryItOut("/*for..in*/M:for(const (eval(\"window\", undefined))(<><x><y/></x></> / [[1]]) = [15,16,17,18].sort((this.zzz.zzz).watch, (-4..__defineGetter__(\"prototype\", gc))) in (export *)) {default: let (prop, __count__ = <>yyy</>) { (constructor); }case 5: break; /*infloop*/for(\f({ __noSuchMethod__: [, , ] }); throw try { export *; } catch(__iterator__ if (function(){break ;})()) { function  __proto__ () { yield -0 }  } finally { const __proto__; } ; <x><y/></x> .@*::  \"\" ) {gc() } }");
tryItOut("let (prop, __parent__ = ((yield (({__proto__ getter: function  [ /x/ ].filter(eval) (prop) { return (<x><y/></x>.eval(.2)) }  }))))) { export *; }");
tryItOut("/*infloop*/for(var __count__ = ( /x/g  !== *::*); this.__defineSetter__(\"prototype\", (1 for (x in []))); ({__noSuchMethod__ getter: function () { return (-1) }  })) {break ;[]; }");
tryItOut("/*infloop*/for(let ({ __count__: ({ __count__: __iterator__: ([15,16,17,18].filter(({}).hasOwnProperty, ({a1:1}))), __iterator__: __count__ }) }) = constructor; (\tlet (prop = [1], prop = <><x><y/></x></>) false)(); <><xxx/*\n*/>{__noSuchMethod__}</xxx></>) yield *;");
tryItOut("with({__proto__: {yield;return 0.1; }.constructor}){/*for..in*/for(var __parent__ = (<y><z/></y> << [,,]).hasOwnProperty(\"__iterator__\") in <x><y/></x>.(<x><y/></x>)) {var __parent__ = <x><y/></x>; } }");
tryItOut("if((({ __parent__: ({ __count__: __iterator__ }), __proto__: [, ] }) = (prop.__noSuchMethod__ = 5.0000000000000000000000 for each (constructor in [1,,])))) { if (new Error()) } else {return;\nyield <x/>;\n }");
tryItOut("if((function(y) { yield y; ; yield y; }(1.2e3))) { if (<{__count__}><!--yy--></{__count__}>) {export __iterator__; }} else break M;");
tryItOut("with((yield <><x><y/></x></> !== __proto__ >>> (yield window))){}");
tryItOut("/*infloop*/do {\nconstructor, __iterator__; } while( /x/g  | );");
tryItOut("switch(constructor = <y><z/></y>.isPrototypeOf(@foo) ^= [__noSuchMethod__, __proto__, prototype, __iterator__] = \t({ __iterator__: constructor })) { default: continue M;let (prop = @foo, __iterator__ = *) { (prop); }break;  }");
tryItOut("");
tryItOut("/*infloop*/for(const __parent__ = <x/>; constructor = <x><y/></x>.eval(); (uneval(@foo))) L:if(<><x><y/></x></>) {try { ; } \fcatch(__proto__) { {} }  }");
tryItOut("switch(__noSuchMethod__) { case 8: break; case 1: L:switch(*) { case <x/>: default: /*infloop*/for\n(prop; this;  /x/ ) {(__iterator__); }break;  }break;  }");
tryItOut("if((__parent__)) yield; else  if (<x><y/></x> == <x/>) (false);");
tryItOut("throw StopIteration;");
tryItOut("let(prototype) ((function(){this.zzz.zzz;})());");
tryItOut("/*for..in*/for(let [get, prop] = 1e81 in *::*) constructor = false;");
tryItOut("L: {const prop = 3.141592653589793, prop;(@foo); }");
tryItOut("throw <x><y/></x>;export prop;");
tryItOut("L:if(new ((-3/0.yoyo(<y><z/></y>)) ? typeof 1e-81 : undefined\f)) {const __iterator__; const __proto__; } else  if (( \"\" ))  \"\"  else {(true);if((prototype = __parent__)) { if ((true %= *::*)) const prototype = <y><z/></y>; else @foo;} }");
tryItOut("/*infloop*/L:for(__parent__; null; #3={a:#3#}) export prop;");
tryItOut("/*infloop*/L:for((<x><y/></x>.prototype).isPrototypeOf((<y><z/></y> ? {} : <y><z/></y>)); __iterator__ = @foo; <><x><y/></x></> .@x:: [,,]) {{}export constructor; }");
tryItOut("while((((<x><y/></x> | <x/>).valueOf(\"number\")).__lookupGetter__(\"prop\")) && 0)/*for..in*/ { yield (@foo ? true() : (yield *)) } ");
tryItOut("if(__iterator__) ; else  if (case 4: break; case ({ __parent__: //h\n({ __iterator__: ({ set: __iterator__ }) }) }) = ('fafafa'.replace(/a/g, function (__proto__, constructor)<x/>)): \fif(<><x><y/\f></x></>) {;export *; }break; default: L:if(1.3) let (__parent__, __iterator__) { export *; }break; ) {export prototype; } else {throw *::*;/*infloop*/L:do {export constructor; } while(#1=[#1#]); }\n({});\n");
tryItOut("throw __proto__");
tryItOut("L: {var constructor = 0.1; }");
tryItOut("try { Functionexport prototype\n } finally { try { return \f<><x><y/></x></>; } catch(__count__ if *) { export *; }  } ");
tryItOut("const __noSuchMethod__, function::constructor;");
tryItOut("L: continue L;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(({ prototype: ({ constructor: [__iterator__, ] }), __parent__: __parent__ }) = function ([y]) { }; (this.zzz.zzz); (yield <x/>).eval(constructor)) {var __count__ =  '' ;{(window).__defineSetter__ } }");
tryItOut("?");
tryItOut("/*for..in*/for(let __iterator__ = prop.hasOwnProperty(\"__noSuchMethod__\") in (<x><y/></x>.(<x><y/></x>))) {/*for..in*/for(var [__iterator__, constructor] = this.zzz.zzz in 0x99) ;const delete; }");
tryItOut("<bbb xmlns:ccc=\"eval(\"__proto__ =  /x/g ; const __count__;\", <y><z/></y>)\"><ccc:eee></ccc:eee></bbb> = return *.*;");
tryItOut("if(<ccc:ddd> </ccc:ddd> >>=  '' ) { if ((<x><y/></x>.yoyo(-1)) , (<x><y/></x>)(__parent__, 5.0000000000000000000000).*) {let (__noSuchMethod__ =  /x/g  %= 1e+81) { let __count__ = undefined; }with({}) { this.zzz.zzz; }  } else {if(__iterator__) yield; }}");
tryItOut("do throw  \"\" ; while(('fafafa'.replace(/a/g, 'haha'.split)) && 0);");
tryItOut("/*infloop*/M:for(null; <><x><y/></x>/*\n*/</>([@foo for (__proto__ in @foo)], <><x><y/></x></>); this.zzz.zzz) {break M;\nexport *;\nthrow *; }");
tryItOut("with({}) { for(let y in [5,6,7,8]) if((3.141592653589793 ? __noSuchMethod__ : __proto__)) {yield;set; } else var __iterator__ = <><x><y/></x></>, constructor = *; } ");
tryItOut("if((eval(\"/*for..in*/for(const [__iterator__, <x><y/></x>] =  /x/g .valueOf(\\\"number\\\") in true) {return __parent__;prototype = .2; }\", <bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb>)) ? prototype : true) {/*infloop*/do {case 4: return window;break; const __proto__ = __iterator__;break; break L; } while(*::*); } else  if (<><bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb></>) {do {} while((@foo) && 0);switch([,,z1]) { case 2: do {export prototype;export constructor; } while((<x/>) && 0);;gc()break; case <x><y//h\n/></x>: let constructor;break; case 2: return <><x><y/></x></>;break;  } } else {yield <x><y/></x>; }");
tryItOut("if(this.__defineSetter__(\"__count__\", __parent__)) {let __count__ =  \"\" , __noSuchMethod__ = __iterator__;let (__noSuchMethod__ = @foo, __parent__) { gc() } } else  if (<><x><y/></x></>.@*.@*) (); else __proto__, __noSuchMethod__ = <x><y/></x>;");
tryItOut("yield (false(({ constructor: ({ prototype: __noSuchMethod__, __iterator__: __iterator__ }\t) }) = __count__, this.zzz.zzz));");
tryItOut("let __noSuchMethod__, __count__ = <y><z/></y>\n");
tryItOut("if(({ set constructor(({ __iterator__: ({ __noSuchMethod__: prop, __noSuchMethod__: __count__ }) })) { yield __iterator__+=window.watch(\"__noSuchMethod__\", 'haha'.split) }  })) { if ((~__noSuchMethod__.__defineSetter__(\"__parent__\", Math.sin))) M:while(((void *::*)) && 0){this; } else yield;}");
tryItOut("M:if(4. = -Number()) {yield/*infloop*/while( '' [[z1,,]]){ } } else  if (yield [[1]].__proto__) L: __proto__ = 1.2e3, __count__ = <x/>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:while(<x><y/></x\t>)");
tryItOut("if((eval(\"prop = 1.2e3;\", <x><y/></x>))) { if (prop setter: function  prototype ()-0.isPrototypeOf( ''  !== null)) {(@foo);(*::*); } else {yield; }}");
tryItOut("/*for..in*/for(const [__iterator__, /*\n*/prototype] = (this.__defineGetter__(\"prop\", (function  __proto__ () { return *::* } ).apply)) in 1e-81) export *;");
tryItOut("{while((constructor) && 0)Function/*infloop*/while((Math.sin).call(window[*], (Number( /x/g )))){; } }");
tryItOut("do export *\n; while((<zzz>#0=[(p={}, (p.z = 5.0000000000000000000000)())]</zzz>) && 0);");
tryItOut("if((<x><y/></x>.(<x><y/></x>)).__lookupSetter__(\"__proto__\")) {{const prop = <x/>; } } else  if (\n4.) {return this; }");
tryItOut("/*for..in*/for(var __proto__ =  ''  in #3={a:#3#}) {export prototype;yield __noSuchMethod__; }");
tryItOut("__proto__ = __iterator__;");
tryItOut("/*for..in*/M:for(var (prop = (this * <><x><y/></x></>))((( /x/g  { yield 1.3 } ))) in (\f('haha'.split)(__parent__))){/*infloop*/do {<x><y/></x> } while([15,16,17,18].sort('haha'.split, <x><y/></x>)); }");
tryItOut("({}).__lookupGetter__");
tryItOut("/*infloop*/do {__iterator__ } while((!<x><y/></x>.__lookupGetter__(\"prototype\") , (null ? constructor : __iterator__)));");
tryItOut("export *;prop.__parent__ const __proto__;return;");
tryItOut("return <x/>;");
tryItOut("/*for..in*/for(__proto__ in #1=[#1#]) throw <x/>;");
tryItOut("let(__parent__) { 'haha'.split");
tryItOut("throw constructor;");
tryItOut("{if(undefined) {\t if (<x><y/></x>) export *; else ;}throw 3; }");
tryItOut("if(__proto__) {yield [1,,];yield *; } else  if (0/0) null else yield ;");
tryItOut("yield\n");
tryItOut("/*infloop*/for((<x><y/></x> *= null); [[]]; (1e81 = [[1]])) {\tlet __noSuchMethod__, __iterator__ = <y><z/></y>;constructor }");
tryItOut("if(<><x><y/></x></>) (<><x><y/></x></>); else (false);");
tryItOut("let(__count__, __iterator__) ((function(){this.zzz.zzz;})());");
tryItOut("if(<y><z/></y>) {yield{/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; __count__) function (function::__iterator__, constructor)<x><y/\r></x> } } else  if ('fafafa'.replace(/a/g, <><x><y/></x></>)) {return *::*; } else {L: return <><x><y/></x></>; }");
