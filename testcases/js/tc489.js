tryItOut("gc()L: {return  /x/g ; }");
tryItOut("if( /* Comment */(* in <><x><y/></x></>)) ;");
tryItOut("this.zzz.zzz;");
tryItOut("if(yield true = (__noSuchMethod__[({a2:z2})])) switch(new Array()) { case constructor = ({a2:z2}): export __iterator__;break;  }");
tryItOut("throw StopIteration;");
tryItOut("__count__ getter: /a/gi");
tryItOut("{/*for..in*/for(prototype in ((function(q) { return q; })(<bbb xmlns:ccc=\"(__parent__ = <x><y/></x>)\"><ccc:eee></ccc:eee></bbb>)))evalL:while((__proto__) && 0){(<x><y/></x>);{} } }");
tryItOut("throw constructor;");
tryItOut("let(prop = window, __parent__ = <x><y/></x>) ((function(){prototype = window, prototype;})());");
tryItOut("/*for..in*/for(__count__ = @foo === this in (constructor.prototype)) break M;");
tryItOut("delete = [15,16,17,18].some(null, false)");
tryItOut("if((__iterator__.prototype getter= new Function >>> <xxx {__noSuchMethod__}={__noSuchMethod__} />)) undefined;\n\n else  if ((( = <x/>--) for (__noSuchMethod__ in @foo))) {yield -1\t.isPrototypeOf(0/0);/*for..in*/for(const __parent__ in <><x><y/></x></>) {break ;if(arguments) {gc()break L; } else yield; } } else {/*for..in*/for(let __noSuchMethod__ in (((true).__defineSetter__)(<y><z/></y>)))(({}).hasOwnProperty).applylet (__count__, constructor) { var __noSuchMethod__ = true, constructor; }\f }");
tryItOut("return false;");
tryItOut("do throw  /x/g ; while(('fafafa'.replace(/a/g, ( \"\" ).__defineSetter__)) && 0);");
tryItOut("/*infloop*/while( '' )yield  /x/g ;");
tryItOut("/*infloop*/while((__count__ =  '' )){if(__parent__) const prop = [1], prototype; else break L; }");
tryItOut("L:if(({prop: (function ([y]) { })() })) __parent__ else {export prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in (var __proto__)) let prototype = <x/>, __proto__ = window;/*infloop*/for(var __iterator__; *; #1=[#1#]) undefined;");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] = <x/> in <x><y/></x>) {var __noSuchMethod__ = <x/>;return 1.3; }");
tryItOut("");
tryItOut("{(<><x><y/></x></>);<x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __count__) {; }");
tryItOut("/*infloop*/for(var \nwindow.__lookupSetter__(\"prototype\").unwatch(\"__noSuchMethod__\") = 1.3.isPrototypeOf(<y><z/></y>); null.watch(\"__count__\", Math.sin); [prototype .@ 0 .@ __noSuchMethod__ for (((/*infloop*/for(const __noSuchMethod__; __noSuchMethod__; *) {const prototype, function::prototype;\t; }))(yield <x><y/></x> |= prop = this) in 'fafafa'.replace(/a/g, [1,2,3,4].map)) for (prop in window) if (this)]) {continue M;let __proto__ =  /x/ , __parent__ = window; }\n/*infloop*/M:do return; while((__noSuchMethod__ = <y><z/></y>));");
tryItOut("M:if(<x/>\f.throw(*).__lookupSetter__(\"__noSuchMethod__\").isPrototypeOf(5.0000000000000000000000 / __iterator__)) { if ((Object(([15,16,17,18].filter(.2, __proto__ = <><x><y/></x></>))))) {return; }} else {throw this; }");
tryItOut("if(false) __proto__; else <x><y/></x>");
tryItOut("return;");
tryItOut("if(<x><y/></x>.watch(\"__noSuchMethod__\", prototype)) window");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const x::__count__ in __parent__ ^= 3.141592653589793.propertyIsEnumerable(\"prototype\")) {/*for..in*/for(let ((this.__defineSetter__(\"__count__\", Math.pow)))((Exception(constructor))) in ((function \n([({ prototype: ({ __parent__: constructor, __proto__: ({ prop: __iterator__, __noSuchMethod__: constructor }) }) }), ], prototype)\f { return new function  prototype (try { 0/0; } catch(constructor if (function(){yield @foo;})()) { export __proto__; } finally { {} } \f) { let prototype; } () >>> [11,12,13,14].map } )( /* Comment */__count__)))export *; }");
tryItOut("do continue ; while(( /* Comment */constructor) && 0);");
tryItOut("/*for..in*/for([x::prop, __proto__] = [,] in <><x><y/></x></>) prop = true, __parent__");
tryItOut("with({}) prototype = __parent__;");
tryItOut("L:if(var __proto__ = 1e81;) {continue L;export prop; } else  if ((({ set prototype prototype ()new function () { return 1e81 } (), prop: prop = prop }))) { }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = * in  '' ) __proto__, constructor =  '' ;");
tryItOut("M:if(({prototype setter: *::*, constructor getter: Math.pow })) {function  __iterator__ () { return <><x><y/></x></> }  } else  if ( /x/g /*\n*/) {export prop; }");
tryItOut("L:if(function ([y]) { }) default: break; case eval(\"({__noSuchMethod__: [z1,,]})\", <x><y/></x>.valueOf(\"number\")):  else break M;");
tryItOut("L: {yield 0;break ; }");
tryItOut("__count__");
tryItOut("M:do {return <x/>;<x><y/></x>; } while((prototype) && 0);");
tryItOut("/*for..in*/for(let __count__ = true.__lookupSetter__\f(\"__count__\") in __noSuchMethod__ /  '' ) {export __proto__;switch(-1\r) { default: return;break;  } prop }");
tryItOut("{return 0.1; }");
tryItOut("L:do {; } while((-__noSuchMethod__) && 0);");
tryItOut("/*for..in*/for(const yield *::*.__proto__ in this) {while((<y><z/></y>) && 0){const prototype = <x/>;yield; } }");
tryItOut("with(this.unwatch(\"__parent__\")){export __proto__;(undefined); }");
tryItOut("/*infloop*/while(new Function((-0).@*.throw((__noSuchMethod__ = <x/>)), (~[z1])) :: ((uneval((this.__defineSetter__(\"constructor\", Math.pow)))))){if(function(id) { return id } == []) { if (this.zzz.zzz) {return; }} else {return;export __parent__; }return; }\n");
tryItOut("if(window.hasOwnProperty(\"__proto__\")) function(q) { return q; } else return;");
tryItOut("with(<x><y/></x>){({a1:1});var __iterator__; }");
tryItOut("if(true) { if (<x/>) { }} else {var __count__ = (function ([y]) { })(); '' ; } const __noSuchMethod__;");
tryItOut("/*for..in*/for(const __iterator__ = (({__count__ getter: eval, constructor: new (*)( '' ) })) in (-0)) if(true) { if (\f.2) {{} } else let __proto__;}");
tryItOut("__proto__.__count__ = prototype;");
tryItOut("/*infloop*/M:for([1,2,3,4].slice() ^ __iterator__ = <><x><y/></x></>; let (__parent__, __iterator__) ( /x/g )[[,,]]; [15,16,17,18].sort('haha'.split, function::prototype) =  /x/g ) constructor.prototype");
tryItOut("let prototype = (-1), __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("if(<x><y/></x>.yoyo(<><x><y/></x></>)) { if (constructor = [15,16,17,18].filter(function  __count__ (prototype, __proto__\f)*::*, this ? __iterator__ : *) >>>=<><>( /x/ )</></>) ;} else /*for..in*/for(const [__iterator__, __parent__] = this.__defineGetter__(\"__count__\", 'haha'.split) in @foo) yield;");
tryItOut("/*for..in*/for(let prototype = ((<><><!--yy--></></>\n) instanceof (this.__defineSetter__(\"__parent__\", new Function) instanceof  \"\" .__defineGetter__(\"let\", ({}).__lookupGetter__))) in __proto__ = (__parent__.__iterator__ = null)) throw StopIteration;");
tryItOut("if(((__count__)[prototype])) {(null);const __iterator__, __parent__; } else {(1.2e3); }");
tryItOut("L:do {const prop = <x><y/></x>, __count__ = <y><z/></y>; } while((default: --.constructor = ({a2:z2})) && 0);");
tryItOut("/*infloop*/M:for(const __noSuchMethod__ = __noSuchMethod__; <x/>; *::*) {return window;yield; }");
tryItOut("/*infloop*/for(let [({ prototype: [prop, ({ function::__noSuchMethod__: prop, constructor: __iterator__ }), , ] }), ({ prop: __proto__\t })] = (window.propertyIsEnumerable(\"prototype\")); this; (<> \"\" </>.eval(let __count__ = #3={a:#3#}, function::__noSuchMethod__))) M:if(constructor) {__count__;yield  '' ; } else  if (@foo) function(y) { yield y; return;; yield y; }");
tryItOut("/*for..in*/M:for(__parent__ = __noSuchMethod__ = -3/0 in 5.0000000000000000000000) {;[1,2,3,4].slice }");
tryItOut("/*infloop*/do {continue ;var __noSuchMethod__, __parent__ = <x><y/></x>;\f } while(![1,,]);");
tryItOut("return  /* Comment */<y><z/></y>;");
tryItOut("return <x/>;");
tryItOut("with({__iterator__: (((new Function(\"gc()\"))).call).call(~<><x><y/></x></>.@*, )})if(null) {yield <><x><y/></x></>;export __count__; }");
tryItOut("if(__proto__) { if (prototype = <><bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb></>) {export __iterator__; }} else {gc() }");
tryItOut("/*infloop*/L:do (<y><z/></y>); while((constructor)());");
tryItOut(" const __noSuchMethod__;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = __proto__%=<x/> %= (window %= <><x><y/></x></>) in (__iterator__ = (#2=({__iterator__: window}))) | ((({__noSuchMethod__: <><x><y/></x></>__count__: <x><y/></x> }).valueOf(\"number\")).__lookupGetter__(\"prop\"))) do {export prototype;{} } while((<x><y/></x>) && 0);");
tryItOut("{ }");
tryItOut("if([function::__count__ = <><x><y/></x></>].filter(prototype.__parent__ = <><x><y/></x></>.__defineSetter__(\"constructor\", function (__noSuchMethod__)<><x><y/></x></>)) ?  /* Comment */(<x><y/></x>.propertyIsEnumerable(\"__count__\")) : [11,12,13,14].sort) /*infloop*/for(const __count__ = this; [1]; prop) {var prop, __noSuchMethod__ = constructor; } else  if ((function  __iterator__ ()<x><y/></x\t>).call(undefined, )) {continue L;{}\nif(undefined) { if (*::*) {gc()export prototype; }} else return <x/>; } else L:while((__parent__.@foo) && 0)throw constructor;");
tryItOut("if(__parent__.__iterator__ =  '' .isPrototypeOf((<x><y/></x> && __count__))) prototype; else {let prop = <x/>, __proto__;if((((1 for (x in []))).call((function ([y]) { })(), true,  /x/g ))) const __count__ = true, __noSuchMethod__; else {gc() } }");
tryItOut("with({prototype: this.(__proto__.(__iterator__))}){function(q) { return q; }; }");
tryItOut("{}do {return;continue ; } while((<x><y/></x>) && 0)\nlet constructor, __noSuchMethod__ = <x><y/>\n</x>;");
tryItOut("var constructor, ?;");
tryItOut("/*infloop*/for(({ __count__: ({ //h\n__count__: prop.prop }), __parent__: __count__ }) = (<><x><y/></x></> if (({a1:1})))\n; [#3={a:#3#}].some(gc); __noSuchMethod__ = false instanceof ((new Function)())) if(<x><y/></x>.yoyo(function(id) { return id })) { if (eval(\"<\\t><x><y/></x></>.__proto__\", <x/>)) let prototype = 0.1; else {prop; }}");
tryItOut("/*for..in*/M:for(var __parent__ in ((*::*)(this.__defineSetter__(\"prop\", new Function)))){export __noSuchMethod__; }");
tryItOut("if([,])  const __count__;");
tryItOut("while((#1=[11,12,13,14].sort) && 0){L: {/a/gi(window); } }");
tryItOut("__iterator__, prop\n/*for..in*/for(let __count__ = let (__parent__ = <><x><y/></x></>) <x><y/></x> + false in (-0)) (1.2e3);");
tryItOut("L: {;let __iterator__; }");
tryItOut("/*for..in*/L:for([__parent__, prototype] = (__iterator__ = __proto__.prop setter= function  __proto__ (__count__, let __proto__, __proto__ = function ([y]) { };) { gc() } ) in  '' ) continue M\n");
tryItOut("/*infloop*/for(let constructor =  '' ; <x><y/></x>; <x/>) {}");
tryItOut("if(<><x><y/></x></>.prop = <x/>.__proto__) { if (({ __proto__: __count__, prototype: constructor }) = @foo.__iterator__ = [constructor, , ({ __proto__: __noSuchMethod__ }), , ]) {prototypedo {( \"\" ); } while((null) && 0); }} else {/*infloop*/for(let __iterator__; __noSuchMethod__; arguments) const __parent__ = this; }");
tryItOut("if(*) <><x><y/></x></>;");
tryItOut("/*infloop*/L:for(this.__defineGetter__(\"prop\", .2 ? *::* : <><x><y/></x></>); !this; (prototype ^= @foo)) ");
tryItOut("do {} while(((* | function ([y]) { }).__defineSetter__(\"prop\", [1,2,3,4].slice)) && 0);");
tryItOut("constructor = __count__;");
tryItOut("/*for..in*/for(x::__count__ = new <><x><y/></x></> in (p={}, (p.z =  \"\" )())) {while((function(id) { return id }) && 0){return  /x/g ; }export *; const __proto__; }");
tryItOut("let (prop) { {} }");
tryItOut("([1,2,3,4].slice).applyreturn <x><y/></x>;");
tryItOut("for(let y in []);");
tryItOut("M:while((<x/>) && 0)const constructor = <><x><y/></x>/*\n*/</>; const prototype;");
tryItOut("if(new ([1].hasOwnProperty(\"__proto__\").prop = (uneval(<><x><y/></x></>.valueOf(\"number\"))))()) return;");
tryItOut("{{} }");
tryItOut("/*infloop*/for([] = delete eval(\"<><x><y/></x></>\", [[1]]); [,,z1]; ((new Function(\"throw <><x><y/></x></>;\"))).call(*::*,  \"\" )) {L:  }");
tryItOut("/*for..in*/for(let __iterator__ in ((Math.pow)(@foo))){export *;let __count__ = 5.0000000000000000000000, prototype; }\n([,]);\n");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = ((@foo = <x/>) & [1,2,3,4].slice) in (Object())) {continue L\nconst prop = <y><z/></y>, __iterator__;do {{}yield; } while((<x/>) && 0); }");
tryItOut("/*infloop*/M:while(String()){gc()L: {yield <x><y/></x>; } }");
tryItOut("if(*.hasOwnProperty(\"prototype\")) {L:if((1.3.propertyIsEnumerable(\"constructor\"))[null |  /x/g ]) @foo else  if (void \t<x><y/></x>) var __iterator__, __proto__ = this; else prototype } else  if (<><x><y/></x></>.hasOwnProperty(\"prototype\")) {;(<><x><y/></x></>); }");
tryItOut("throw StopIteration;");
tryItOut("yield;");
tryItOut(" get __count__(__parent__, constructor) { return window }  const __parent__");
tryItOut("if(((yield [11,12,13,14].sort) >>>=[__count__].sort(window).__lookupSetter__(\"__count__\")//h\n)) { if (new eval(undefined)) L: return __proto__;} else {gc()\n__proto__;\n/*for..in*/for(constructor in ((function(q) { return q; })(*::*))); }");
tryItOut("if((__proto__ = [prototype.(let) for (constructor in [1]) if <x><y/></x>])) {new Function } else  if ([15,16,17,18].sort((new Function(\"let __iterator__ = -0, __count__;\")), <><x><y/></x></>)) /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <><x><y/></x></>) (*::*); else {var prop; }");
tryItOut("if(__noSuchMethod__) {yield; }");
tryItOut("if({}) __iterator__ else const prop, __proto__;");
tryItOut("/*for..in*/for(prototype in <x><y/></x>) {export __proto__;//h\n }");
tryItOut("for(let y in [5,6,7,8]) prop = __count__;");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <><x><y/></x></>) export __count__;");
tryItOut("if( .@*:: (new RegExp())//h\n) { if () export *;} else {yield; }");
tryItOut("throw <><bbb xmlns=\"<y><z/></y>.__proto__ = ({a1:1})\"> </bbb></>;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (-1) in * in ( /x/g .@foo ? true % this : ((function  set (function::__parent__)<x/>).call( \"\" , (function ([y]) { })())))) let constructor\n");
tryItOut("{if(<><x><y/></x></>) {export *; } else __iterator__ = <x><y/></x>, __count__; }");
tryItOut("while(( /x/  = (prototype.__proto__ setter= [1,2,3,4].map)) && 0){function (__iterator__) { return * }  }");
tryItOut("/*infloop*/while(__parent__.prototype)__count__ = window;");
tryItOut("/*infloop*/for(const __proto__; (0.1 if ([z1])); false) __count__continue M;");
tryItOut("/*infloop*/do return; while(1e4 :: constructor);");
tryItOut("if(__count__.constructor) {var __iterator__ = null;throw <x/>; } else  { return (__proto__ = yield prototype) } ");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__count__ in ((try { return; } finally { export *; } )(<><x><y/></x></>.__defineGetter__(\"__count__\", [1,2,3,4].map).__proto__)))/*for..in*/for(let prototype in (([1,2,3,4].map)(prototype))){export *;continue L; }");
tryItOut("L: with( { yield (new RegExp(prop = prop, __count__)) } ){return; }");
tryItOut("let (constructor, __iterator__) { function  prop () { yield  ''  }  }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const __iterator__ in ((((__noSuchMethod__.__count__ = <x/> ? {} : [,,z1].throw(prototype = this instanceof ({})))).watch)((\fwindow < window.watch(\"prototype\", [1,2,3,4].map)))))/*infloop*/M:do {{} } while(({ function::__parent__: constructor, __count__: __parent__ }) = 1e+81.yoyo(<x/>));");
tryItOut("if((getter <<  \"\"  .. new String(*, function(id) { return id }))) yield  '' ;");
tryItOut("L: {M:with({__proto__: ([15,16,17,18].filter(('haha'.split).call, __noSuchMethod__).unwatch(\"__iterator__\"))}){ } }");
tryItOut("switch(typeof  ''  = __proto__ = <x><y/></x>.@foo) { default: {L:if(@foo) {export *;__parent__; } else  if (<y><z/></y>) (<><x><y/></x></>); }case 8: if( /* Comment */this.*) {constructor;return this; } else  if (this) return try { throw __count__; } catch(prototype if (function(){{}})()) { yield; } catch(__iterator__) { let /*\n*/prototype = window; } finally { throw <y><z/></y>; } ;break;  }\n;");
tryItOut("do /*infloop*/for(this; #3={a:#3#}; <x/>) {} while((this ? undefined :  /x/g ) && 0);");
tryItOut("/*infloop*/for(const __noSuchMethod__; <x><y/></x>; <><x><y/></x></>) <x><y/></x>;");
tryItOut("L:switch((uneval([z1].__defineSetter__(\"prop\", Math.sin))) ?  /x/  : function ([y]) { } ^= #1#) { case __noSuchMethod__: <x/>;\n\nbreak; default: break; break;  }");
tryItOut("M:if(({__noSuchMethod__ getter: function  __noSuchMethod__ (__parent__, ({ constructor: __noSuchMethod__ })) { yield yyy }  })) {/*for..in*//* nogeckoex bug 349964 */ for  each(undefined.prototype in * = <x><y/></x>) export *; const __parent__;return this.__defineGetter__(\"prototype\", [1,2,3,4].slice); } else  if (((function  __noSuchMethod__ (__proto__) { return * instanceof  /x/  } ).call(<y><z/></y> << __parent__, [z1])).__defineGetter__(\"__count__\", ((-1)))) {/*for..in*/for(__proto__ in <x><y/></x>) yield [,]\n } else {try { yield ((prop)); } catch(__noSuchMethod__) { with({}) gc() }  }");
tryItOut("if(-1)  else  if (prop = <x><y/></x>) {gc()gc } else gc()");
tryItOut("/*infloop*/while(\r#1=[( '' .prop)].valueOf(\"number\")){{with({constructor: function ([y]) { }})( '' ); } }");
tryItOut("let (__parent__ =  \"\" ) { export *; }");
tryItOut("/*for..in*/M:for(\f__noSuchMethod__.__parent__ in (this.throw(0)) == __proto__ = let) return;");
tryItOut("__count__");
tryItOut("let (__noSuchMethod__, __parent__ = ({__count__: <x><y/></x>})) { const __count__ = <><x><y/></x></>; }");
tryItOut("yield\n");
tryItOut("with({__noSuchMethod__: ((yield  /x/ ))})let (__iterator__) { continue L; }");
tryItOut("/*for..in*/for(var prop = [(default: break; ) for (__noSuchMethod__ in []) for each (function::__parent__ in <x><y/></x>) for (__proto__ in constructor)] in  '' .yoyo(<x><y/></x>)(*, 'fafafa'.replace(/a/g, (<x><y/></x>).__defineSetter__))) {do with({__noSuchMethod__:  /x/ ++ &= ( '' .__lookupSetter__(\"prop\"))})(<x><y/></x>); while((prop = window) && 0); }");
tryItOut("/*for..in*/for(__iterator__ in ((Function)(({ set __parent__ __iterator__ (constructor) { yield __parent__ = __parent__ }  }))))if(__parent__) { if ( for (*::*['__count__'] in .2) for (prop in true) = <x><y/></x>) var __parent__, __proto__;} else {; }");
tryItOut("\nif(__count__) { if (__count__) __iterator__ = undefined} else {export prototype; }");
tryItOut("switch(Math.pow in new (gc)([window for (__noSuchMethod__ in *)], <y><z/></y>)) { case (-0) << *: let __iterator__;break; export *;case (<y><z/></y> ? (1e81.valueOf(\"number\")) : ): break;  }");
tryItOut("/*for..in*/for(var __parent__ in \f '' ) ;");
tryItOut("with({}) let(({ constructor: __noSuchMethod__ })) { constructor = prototype;");
tryItOut("while(((<><x><y/></x></> = null), <y><z/></y>) && 0)return  /x/ ;");
tryItOut("return constructor;");
tryItOut("{prototype = 0x99, __noSuchMethod__ = <x/>; }");
tryItOut("/*infloop*/do if(eval(\"<><x><y/></x></>\", arguments)) ; else  if (prop = <y><z/></y>) {let __count__; } while(((eval(\"__proto__.__noSuchMethod__ = this\", (void [,]))) ? ((new Function(\"export *;\"))())[new  /x/g ] : (--<><x><y/></x></>([,,z1]))) ^= (uneval(window + 5.0000000000000000000000)));");
tryItOut("constructor;");
tryItOut("{export *; }");
tryItOut("if(3.141592653589793) { if (this.__defineGetter__(\f\"__parent__\", (this).__defineSetter__)) {{} } else default: throw constructor;break; }");
tryItOut("/*infloop*/L:for(const ({ prop: constructor }) = this.__defineSetter__(\"prototype\", function(q) { return q; }); prop([]) = eval(\"*::*\", <x><y/></x>); (<y><z/></y>(window, <y><z/></y>))) {gc() }");
tryItOut("let __iterator__, __parent__;return <x><y/></x>--;");
tryItOut("/*infloop*/for(__noSuchMethod__; this;  '' ) return (-0);");
tryItOut("L: export prototype;");
tryItOut("with({__count__: <y><z/></y>}){const __noSuchMethod__, constructor;export *; }");
tryItOut("do let __proto__ =  \"\" , constructor\n while(((<  get __parent__(({ prototype: __parent__ }))eval(\"window |= false\", __count__ = window)>return prototype; <y>  { return constructor } < /x>.@*)) && 0);");
tryItOut("prop: ((<y><z/></y>.__noSuchMethod__++)(__iterator__ = (eval(\"<y><z/></y>\", <><x><y/></x></>)), (@foo).__defineSetter__())).isPrototypeOf(#2=__noSuchMethod__)");
tryItOut("/*for..in*/for(__iterator__ = * in *) Math.pow");
tryItOut("throw 1e+81;");
tryItOut("{}");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>) <x><y/></x>.isPrototypeOf( '' ) else {continue M;return this; }}");
tryItOut("do {M:if( '' ) { if ({}) yield; else return prop;} } while(((({__iterator__: @foo }))) && 0);");
tryItOut("3;");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in \ftrue) __proto__ = constructor, prototype = [[1]];");
tryItOut("/*infloop*/L:for(<>__noSuchMethod__</>; ({}); ({})) {continue L;continue M; }");
tryItOut("break ;if(@foo) export *;");
tryItOut("/*for..in*/M:for(__iterator__((-1)) in ((__noSuchMethod__)(new (3)(033, this)))){; }");
tryItOut("__parent__ = constructor;");
tryItOut("try { for(let y in []); } finally { try { this.zzz.zzz; } catch(__parent__) { yield <><x><y/></x></>.__defineGetter__(\"__iterator__\", __noSuchMethod__); } finally { let(__proto__ = __count__, __iterator__ = function(id) { return id }) { {} }  } ");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = [, ({ __parent__: prototype, constructor: __proto__ }), ({ __count__: __proto__, prop: prototype }), [prop], []] = __noSuchMethod__ in <><xxx>{prop}</xxx></> <= (({__iterator__: <x/> <= <y><z/></y>,  set __noSuchMethod__ prop () { return -3/0 ^  /x/g  }  }))) {/*infloop*/for(const prototype = <x/>; this; <y><z/></y>) {gc() }const __proto__; }");
tryItOut("do constructor, prototype; while((__noSuchMethod__ = ) && 0);");
tryItOut("yield (return <y><z/></y>);");
tryItOut("while((this) && 0)if([] && this) { if (0.1) { { with(@foo - <><x><y/></x></>){export *; } } return; } else throw *::*;}");
tryItOut("throw __parent__;");
tryItOut("let(__parent__ = __noSuchMethod__.__proto__.yoyo((( '' )(<><x><y/></x></>))), get = new (<x><y/></x>)[<y><z/></y>](*::*, <x><y/></x>).yoyo(export *)) { let(x::__parent__ = ) { with({}) { return window\n; } ");
tryItOut("/*infloop*/for(const ({ constructor: [prototype, constructor, , ] }) = (__count__ for (__iterator__ in false))++; (<x/>.__lookupGetter__(\"__iterator__\")).__proto__ setter= function (__proto__) { yield *::* } ; (constructor.unwatch(\"__parent__\"))) {const __parent__, __noSuchMethod__ = null;1.3 }");
tryItOut("{{} }");
tryItOut("/*infloop*/M:for(prototype; break ; #0=[window]) {yield this;\nthrow <><x><y/></x></>;\n }");
tryItOut("if(<x><y/></x>) throw __iterator__; else  if ( '' ) const prototype = ({a2:z2}); else {return  /x/g ;{} }");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = (window |= prop.__noSuchMethod__) in constructor) {/*for..in*/for([__count__, __proto__] = function (__count__, prototype) { return <x/> }  in (-0)) var __count__;/*for..in*/for(var __iterator__ in 1e4) {;export prop; } }");
tryItOut("return;");
tryItOut("/*for..in*/for(const [__iterator__, __iterator__] = (prototype) in (__count__ = __proto__ >>>  /x/ .propertyIsEnumerable(\"__count__\"))) if(eval(\"<y><z/></y>\", <y><z/></y>)) {gc() } else  if ((__noSuchMethod__.__lookupGetter__(\"constructor = this\"))) export *;");
tryItOut("/*infloop*/M:for(__proto__ = undefined; ({}); true) throw __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (*)(@foo) in __parent__.prop) {continue M;export __parent__; }\n");
tryItOut("/*for..in*/M:for(var __proto__ = arguments === window\n in <y><z/></y>) /*for..in*/for(var __count__ in <x><y/></x>) continue M;");
tryItOut("do {return; } while((@foo.__defineSetter__(\"__proto__\", false)) && 0);");
tryItOut("__iterator__ = prop;");
tryItOut("/*infloop*/while(-1.valueOf(\f\"number\")){if(__proto__) { if (({__iterator__: <x/> })) {throw #1#; } else {throw  \"\" ; }} }");
tryItOut("/*for..in*/for(__parent__ in ((false)(__noSuchMethod__ = [z1])))gc()");
tryItOut("with(this.zzz.zzz[<><><!--yy--></></>--])window");
tryItOut("return ((({__count__: window })) ? prototype.prop getter= __noSuchMethod__ : 3.141592653589793 = prototype = #3={a:#3#});");
tryItOut("gc()\nlet prop;");
tryItOut("return;");
tryItOut("yield default: break;  >>> {}.__lookupGetter__(\"__iterator__\");");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("for(let y in [5,6,7,8]) with({}) yield (__count__ = __proto__);");
tryItOut("if([15,16,17,18].map(function (({ __iterator__: __iterator__, __noSuchMethod__: [constructor, [], ({ __noSuchMethod__: [__count__, , __noSuchMethod__] }), ({ __count__: ({ __proto__: function::__parent__, __noSuchMethod__: __count__ }), prototype: ({ prop: __proto__, __count__: __parent__ }) }), ({ prototype: throw 'fafafa'.replace(/a/g, (1 for (x in []))).yoyo(<><x><y/></x></>); })] })\t) { yield (function ([y]) { })().yoyo({}) @ \n<x><y/></x> |= 1e81 } , prototype = //h\nprototype.prototype setter= Function ^ <x/>.isPrototypeOf( '' ))) { if (('fafafa'.replace(/a/g, ({}).hasOwnProperty).hasOwnProperty(\"__count__\"))[ /= typeof \t(#2=<x><y/></x>.throw(({a1:1})))]) {break L;with(<x><y/></x>){return (-0);<><x><y/></x></>; } }} else {/*for..in*/for(const __count__ in true) gc() }");
tryItOut("(window);\nthrow undefined;\n");
tryItOut("/*for..in*/for(__iterator__ in ((constructor)(\t /x/g )))export __count__;");
tryItOut("const prototype, __noSuchMethod__ = <x><y/></x>;");
