tryItOut("/*for..in*/M:for(__parent__(window) in (__count__.(eval(\"this\", true)))[function(q) { return q; }()]) throw ({a1:1}).__count__ = <x/>;");
tryItOut("L: {(undefined); const __iterator__;{} }");
tryItOut("if((__noSuchMethod__ = <x><y/></x>)) yield; else  if (<x/>.throw(undefined)) default: break; case 2: case <x><y/></x>: export *;case 8: const __iterator__ = __proto__;break; case 3: break; const __noSuchMethod__;break; case prototype: gc()case (-0): case 1: throw this;break; case 8: const prototype = <><x><y/></x></>, __parent__;break; case 1: break M;yield;break; break L;case [,,z1]: break; gc()break; case <x/>: break; case 9: {}break;  \"\" ;break; ");
tryItOut("const __parent__ = (-0), get = false;\nexport __count__;\n const __parent__;");
tryItOut("/*infloop*/L:while(({a1:1}))/*infloop*/do if( /x/g ) {} else export __parent__; while((this.zzz.zzz) ? (prop = <><x><y/></x></>) : function::__iterator__.hasOwnProperty(\"constructor\"));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__([,]) in <bbb xmlns=\"4.\"><!--yy--></bbb>) {let __proto__;L:with({__count__: (*::* >>>=[1])}){/*infloop*/for(var __iterator__ = true;  /x/g ; #1#) function () { export *; }  }//h\n }");
tryItOut("/*infloop*/while(constructor = true){\fthrow window;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for(let __iterator__; 4.; this.__defineGetter__(\"prop\", ({}).hasOwnProperty)) if(__parent__ = <y><z/></y>) __count__ = undefined; else  if (eval(\"window\", <x><y/></x>)) {yield;export *; } const __parent__;");
tryItOut("do {const __count__ = this, constructor =  \"\" ;let __count__, __parent__ = 1.2e3; } while((\n@foo) && 0);\f");
tryItOut("with({}) { return (function ([y]) { })() .@x:: 1.3; } ");
tryItOut("while(('fafafa'.replace(/a/g, function(y) { yield y; export *;; yield y; })) && 0){[1,2,3,4].slice }");
tryItOut("let (__proto__, prop = [new  \"\" ].sort(new Function)) { if((__parent__ if (<><x><y/></x></>))) {<x><y/></x>; } else {return; } }");
tryItOut("throw true\n");
tryItOut("throw prop;");
tryItOut("with(arguments)export __iterator__; const __proto__;");
tryItOut("M:if(<bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>.(*::* instanceof window)) {var prop = @foo;{}; } else  if (constructor) L:with({__parent__\t: (this)(<><x><y/></x></>).eval(([].throw(<><x><y/></x></>)))}) /x/  else {yield [z1,,]; }");
tryItOut("/*for..in*/for(const constructor in ((function  prototype (prototype, prototype)__iterator__)( \"\" ))){eval }");
tryItOut("yield;{}");
tryItOut("/*infloop*/M:do {return <><x><y/></x></>; } while(<x><y/></x> >>= ( ''  << this));");
tryItOut("M:with(<y><z/></y>)yield;");
tryItOut("throw StopIteration;");
tryItOut("M:with(Boolean(@foo))<><x><y/></x></>;");
tryItOut("if((this.__defineSetter__(\"__parent__\", try { yield; } finally { return; } )) / <x><y/></x>.(<y><z/></y>)) export *; else  if (this .. 1e81 ? [1,,] : <><x><y/></x></>) {yield;yield  \"\" ; }");
tryItOut("/*infloop*/for(const prop; this.__defineGetter__(\" /x/g \", [,,]); (true for each (__parent__ in <><x><y/></x></>)).__lookupSetter__(\"prototype\")) yield\nif((({__noSuchMethod__: -- '' }))) { if ((#2=[<x/>])) throw <><x>/*\n*/<y/></x></>;} else yield;");
tryItOut("L:with((p={}, (p.z = <><x><y/></x></> |= <><x><y/></x></>)())){var prop; }");
tryItOut("with({__noSuchMethod__: prop = (( /x/g )[false])}){export __iterator__;function(q) { return q; } }");
tryItOut("/*for..in*/for(<zzz>eval(\"const constructor;\", <><x><y/></x></>)</zzz> in (((yield null))(((({ __count__: function::__parent__ }) =  /* Comment */this).valueOf(\"number\")))))/*for..in*/M:for(let constructor = <><x><y/></x></> &  \"\"  in <x/>) __iterator__;if((__noSuchMethod__ = [[1]])) { if (true.hasOwnProperty(\"prototype\")) {gc(){} } else export *;}");
tryItOut("do {return;{var constructor; } } while((({case 8: throw <><x><y/></x></>;break;  })) && 0);");
tryItOut("__count__; const prototype;");
tryItOut("switch() { default: export *;break;  }");
tryItOut("/*infloop*/M:while([(__proto__ = 1.2e3)].filter((new Function(\"yield;\"))))window");
tryItOut("switch() { default: export prop; }");
tryItOut("M:if((__noSuchMethod__.((this.__defineGetter__(\"__count__\", (function  constructor (prop) { yield <><x><y/></x></> } ).apply).__lookupSetter__(\"function::__count__\"))))) /*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = ({ eval(\";\", <><x><y/></x></>): ({ __iterator__: constructor, __noSuchMethod__: function::__noSuchMethod__ }) }) = (__noSuchMethod__(*,  '' )) !==  ''  | <><x><y/></x></> in __iterator__) {} else {const prototype = <x><y/></x>;{}yield 5.0000000000000000000000; }");
tryItOut("L: ");
tryItOut("export function::__parent__; const __count__;");
tryItOut("(<x><y/></x>);\nbreak ;\n");
tryItOut("if(1.2e3) return __iterator__; else  if ([z1]) gc() else {const __noSuchMethod__, __noSuchMethod__; }");
tryItOut("L:with({__iterator__: (__proto__ >= <><x><y/></x></>)})");
tryItOut("do with(__iterator__){yield (-1); } while((x::__proto__.(<x/>)) && 0);");
tryItOut("/*for..in*/for(let [__proto__, __proto__] = \n({}).__lookupGetter__ = (<x><y/></x>) in [[1,2,3,4].slice(<y><z/></y>) for (<x><y/></x> in 1e+81) if (false)]) ([z1,,]);");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <><x><y/></x></>) {[1,2,3,4].slice }");
tryItOut("/*infloop*/for(let ({ __proto__: [, ], __parent__: prop }) = (function(q) { return q; }); ({}) < #3={a:#3#}; <><x><y/></x></> %= <x/>.__lookupSetter__(\"constructor\")) throw StopIteration;");
tryItOut("yield [11,12,13,14].filter :: yyy;");
tryItOut("M:if([false].filter(<><x><y/></x></>)) { if (this.@foo) export __iterator__; else var  \"\" ;}");
tryItOut("/*infloop*/for(var __count__; (__count__.__proto__ setter= gc); (-- /x/g )) {yield  '' ; }");
tryItOut("L:while(( \"\" ) && 0){let prototype; }");
tryItOut("while(((new ('haha'.split)())) && 0){<x><y/></x> }");
tryItOut("{return; }");
tryItOut("if() (<x><y/></x>);");
tryItOut("for(let y in [5,6,7,8]) let(__parent__ = __iterator__ = this) ((function(){let(prototype = new (<x><y/></x>)(), function::__parent__) ((function(){try { return; } catch(__iterator__ if (function(){<><x><y/></x></>;})()) {  } finally { (<><x><y/></x></>); } })());})());");
tryItOut("/*infloop*/for(var prototype; ((false)([,,].__defineGetter__(\"__iterator__\", [,,]))); (++*::*.@foo)) {export *;with(prototype); }");
tryItOut("switch(eval(\"(*::*);\", __iterator__ = (uneval(constructor)))) { case 5: /*infloop*/L:for(var function::prototype = window; <x><y/></x>; <x/>) let __iterator__ =  \"\" , __noSuchMethod__;default: case 7: break;  }");
tryItOut("/*infloop*/for(this.__defineSetter__(\"prop\", function(y) { yield y; /*for..in*/M:for(var __count__ = (([,,z1] >> *::*) .. window |=  \"\" ) in <><x><y/></x></>) {yield; }; yield y; }); (__parent__+=\fyield 3.141592653589793[({a1:1}).__iterator__].__lookupGetter__(\"__iterator__\")); <y><z/></y>) {this;let (__parent__ = (-0)) { return; } }");
tryItOut("__proto__;");
tryItOut("{let(prop = new <>\f<x><y/></x></>().__lookupGetter__(\"__count__\"), __count__) ((function(){let(({ __noSuchMethod__: ({ __count__: constructor }), prop: ({ __proto__: __parent__ }) }) = (uneval((1 for (x in []))))) ((function(){let(, __iterator__ = 1.2e3) { for(let y in [5,6,7,8]) return;})());})()); }");
tryItOut("L: {export prop;let __noSuchMethod__, function::prop = <x/>; }");
tryItOut("if(__iterator__.__iterator__ = window) { if ((function(y) { yield y; /*infloop*/for(let __noSuchMethod__(undefined); <x/>; (__parent__.valueOf(\"number\"))) ;; yield y; })(<y><z/></y>, (__proto__.__count__ setter= (1 for (x in [])))).__lookupGetter__(\"__count__\")) {/*infloop*/do ; while((-1));M:with({__noSuchMethod__: (<y><z/></y>.yoyo(window))})gc() } else {return 3.141592653589793; }}");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("for(let y in [5,6,7,8]) with({})  = (-1), __iterator__ = this;");
tryItOut("/*for..in*/for(let constructor in ([15,16,17,18].sort((<><x><y/></x></>).__defineSetter__, <y><z/></y>))) /*infloop*/do /*infloop*/for((new ((Function).apply)(*)); <x><y/></x>.__lookupSetter__(\"prop\"); [<x><y/></x>].map((1 for (x in [])))) {yield function(id) { return id };yield window; } while((window)(<x><y/></x>));");
tryItOut("{return function(id) { return id };yield; }");
tryItOut("{do prototype; while(( \"\" ) && 0); }");
tryItOut("/*for..in*/M:for(var prop = <><x><y/></x></> in  \"\" ) {__noSuchMethod__; }\n__parent__;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = ((< __iterator__ <x><y/></x>)</.constructor); ((p={}, (p.z = window)()) % <><x><y/></x></>) ? eval(\"function ([y]) { }\", function ([y]) { }) : new (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(prototype.isPrototypeOf( /x/g )))((this.throw(<y><z/></y>))); Math.pow({yield [,,]; }, __count__+=*::*.__defineSetter__(\"prop\", __proto__function  constructor (__noSuchMethod__) { ({}).__lookupGetter__ } ))) {\n }");
tryItOut("with(\n(var <x><y/></x>, __count__)){export __count__; }");
tryItOut("/*for..in*/{;break L }for(const [constructor, prop] = * / __count__ in <y><z/></y>) const __noSuchMethod__, prototype = <x><y/></x>;");
tryItOut("(new Function(\"continue ;\"))\n");
tryItOut("if(this.__defineSetter__(\"__parent__\", (<x><y/></x>).__defineSetter__)) {{}var __proto__, __iterator__ = undefined; } else {return true;constructor = #1=[#1#]; }");
tryItOut("return undefined;");
tryItOut("if(Object(prototype)) { if (prop ,  '' ) { }} else ;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/for(let ({ __proto__: __proto__ }) = (export getter); ((uneval( '' )) < 1e+81.__proto__); ((Exception()) <= __noSuchMethod__ = <y><z/></y>)) let(__iterator__ = <y><z/></y>, __noSuchMethod__ = <x/>) ((function(){export *;})());");
tryItOut("{yield  \"\" ;\nvar __iterator__;\n }");
tryItOut("__proto__;");
tryItOut("let(__iterator__ = , constructor) ((function(){[__iterator__, , , , ] = constructor;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype.__parent__ in window) gc() const prototype; const __noSuchMethod__;");
tryItOut("/*infloop*/while((yield null))(<x><y/></x>).watch");
tryItOut("M:with((prop = 0x99 /= window))yield;");
tryItOut("if(export * + (constructor = __proto__)) yield null; else if(__parent__ = undefined) { if (( .@x:: __count__)) <x><y/></x>} else {break M;export __noSuchMethod__; }");
tryItOut("{}");
tryItOut("yield *::*\n");
tryItOut("{let constructor = true, prototype;break ; }");
tryItOut("do {with({__noSuchMethod__: __count__.__count__}){{} }yield (function ([y]) { })(); const __noSuchMethod__ } while((<x><y/></x>.*) && 0);");
tryItOut("yield *;");
tryItOut("{let __count__; }{export *;(1 for (x in [])) }");
tryItOut("/*infloop*/for(var prototype; yield this.__defineSetter__(\"__count__\", ([1,2,3,4].map).apply); <></>.(prototype = [z1,,]).yoyo(<x><y/></x>.hasOwnProperty(\"prototype\"))) {if(*) {<><x><y\f/></x></>;const prop =  '' , __proto__ = <><x><y/></x></>; } else export __count__;let (__noSuchMethod__ = (function  constructor (function::__noSuchMethod__, constructor//h\n)<><x><y/></x></>)()) { switch(*) { default: break;  } } }");
tryItOut("if(<><zzz><x/></zzz></>.__defineSetter__(\"constructor\", __noSuchMethod__)) let __parent__ = 1.2e3, __parent__; else  if (new (Function)()) return; const __iterator__;");
tryItOut("yield\n");
tryItOut("L:if(constructor) {return true; } else  if (<><x><y/></x></>) var prop, constructor = null;");
tryItOut("if(*::*) { if (((<x><y/></x>.watch(\"__count__\", function () { yield window } )).__lookupSetter__(\"__iterator__\")).*) {0; }} else {yield;switch(5.0000000000000000000000) { case 3: export __parent__; } }");
tryItOut("L:if(new new (new Function(\"{}\"))(this, undefined)(3()--)) {var __count__; } else  if (this.__defineSetter__(\"function::prototype\", [11,12,13,14].map)) {if(this.zzz.zzz) { if ([<><x><y\f/></x></> for each (prototype in @foo)]) continue ;} else  } else {do break M; while(([<><x><y/></x></> for (prop in <x><y/></x>)]) && 0); }");
tryItOut("M:if([[, prop, constructor, __iterator__], , prototype] = eval(\"if([,,z1]) { if (<y><z/></y>) } else {return  /x/g ;( /x/ );\\t }\", (*.__iterator__ = <><x><y/></x></>))) { if (new (\nthis.__defineGetter__(\"constructor\", function  __parent__ (__iterator__) { return null } ) == __proto__.constructor setter= (<x><y/></x>).watch)(__parent__.__proto__ getter= new Function, [,,z1].propertyIsEnumerable(\"__noSuchMethod__\"))) ;\nthrow [[]];\n} else /*for..in*/for(constructor = true in ) throw @foo;");
tryItOut("if((__proto__.prop getter= function  __iterator__ (__noSuchMethod__, __count__)(new  '' this, [,,z1])) .@ [* if (window)])) break ; else  if (prototype) ; else ;");
tryItOut("/*infloop*/M:for(__noSuchMethod__; <x/>; [*::* .@x:: ({a1:1})].map(function  prototype () { var prototype, __count__ = (-1); } ) >>> (true.valueOf(\"number\"))) {\nvar __count__ = <><x><y/></x></>;\n }");
tryItOut("yield;\nreturn;\n");
tryItOut("if([prop].filter(function(q) { return q; })) (withprototype ({)__noSuchMethod__: false/})yyy");
tryItOut("yield <><x><y/></x></>;");
tryItOut("M:with([[]]){/*infloop*/do gc() while(<><x><y/></x></>); }");
tryItOut("if(([11,12,13,14].map)) { if (__proto__)  else throw {};}");
tryItOut("let (prop) { export __proto__; }/*infloop*/for(__noSuchMethod__; @foo.@foo; true.__defineSetter__(\"__count__\", *)) return window;");
tryItOut("export __proto__");
tryItOut("return new ('fafafa'.replace(/a/g, ).))('fafafa'.replace(/a/g, [1,2,3,4].map));");
tryItOut("if(<x><y/></x>)  else  if ((<y><z/></y> ? *::* : <x><y/></x>)) throw this; else true");
tryItOut("with( /* Comment */1.3.__lookupGetter__(\"constructor\").isPrototypeOf((prop)) << [(__proto__.__iterator__ = <x><y/></x> .@*:: @foo)].some(gc))with({constructor: null.*}){yield <><x><y/></x></>;var function::__noSuchMethod__ = {}, constructor = false; }");
tryItOut("with({constructor: (//h\n(<x><y/></x> @ #1#) <= false.propertyIsEnumerable(\"__noSuchMethod__\"))}){ }");
tryItOut("/*infloop*/for(let __count__ = false.isPrototypeOf([1]); __iterator__-=1.3; this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) {return;throw @foo; }");
tryItOut("switch([1,2,3,4].slice) { default: break; case prop: break; yield  \"\"  += @foo @  for (__noSuchMethod__ in 0) if (<x/>); }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */M: for  each(const (prototype) in  '' ) export *\nconst __noSuchMethod__ =  \"\" , __count__ = undefined;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:while(0/0 < [1,,]){return;export constructor; }");
tryItOut("if(<x/>) ({}).hasOwnProperty else  if (#2=[__parent__ = 3]) {yield;if(null) {let __noSuchMethod__ = #1#, __parent__ = -1; } else  if (<y><z/></y>) export *; else {gc() } } else {}");
tryItOut("/*for..in*/for(var prop = this in <y><z/></y>) export *");
tryItOut("M:if(#3={a:#3#}) (*); else {{} }");
tryItOut("{}\n{}");
tryItOut("{continue ; }");
tryItOut("if(__iterator__) /*infloop*/L:for(this.zzz.zzz; (-0); constructor = <><x><y/></x>\r</>) var set; else /*for..in*//* nogeckoex bug 349964 */(__proto__ in (/__iterator__{gc()return ({}); }");
tryItOut("/*for..in*/for(var [constructor, __proto__] = ({__iterator__: ((((undefined).watch).apply).call)(), delete: [undefined for (constructor in [z1,,])].prototype / __noSuchMethod__.__proto__ }) in *::*) __count__;");
tryItOut("if(0x99) { if (({a2:z2})) {null;let __proto__ =  /x/g ; }} else this;");
tryItOut("M:if(__count__.__iterator__ = ([1,2,3,4].map).call((<><x><y/></x></> >> *), (<><x><y/></x></> >=  \"\" ),  \"\" \t)[([] = prop = __parent__//h\n)]) {} else  if (+(prototype instanceof window) &= <><xxx {__count__}={(__count__ = __count__)} /></>) {return;break ; }");
tryItOut("with( /x/g .__parent__ + <y><z/></y>.unwatch(\"prop\")){{}export *; }");
tryItOut("{gc()continue M; }");
tryItOut("export *");
tryItOut("/*for..in*/for(const __parent__ in ((yield ({constructor: (-0)/*\n*/, prop setter: this })).constructor)) { }");
tryItOut("/*for..in*/for(const __proto__.__parent__ in ((gc)(( '' )[true]))){/*for..in*/for(const [__parent__, constructor] = new <x><y/></x>() in ({ prototype: __noSuchMethod__, constructor: constructor }) = [, constructor]) export *; }");
tryItOut("/*infloop*/L:for(const ({ x::__iterator__: ({ __noSuchMethod__: ({ __iterator__: __iterator__ }) }), prototype: ({ __iterator__: __noSuchMethod__ }) }) = ([__iterator__, , __parent__, __noSuchMethod__, ] = __parent__).watch(\"__noSuchMethod__\", Boolean(<><x><y/></x></>)); (({}).__lookupGetter__)(); (yield constructor.((__count__ = [,,])))) {export __count__; }");
tryItOut("null;/*infloop*/for(let __noSuchMethod__ =  /x/ ; <x><y/></x>; <><x><y/></x></>) {constructor; }");
tryItOut("return;");
tryItOut("/*for..in*/for(var [__proto__, __count__] = prototype.(__iterator__ = *) in true) {null; }");
tryItOut("/*infloop*/do {export prop; } while(<>*::*</>);");
tryItOut("/*infloop*/M:for(let prop; eval(\" '' \", true); __parent__.__proto__ = <y><z/></y>) {return;{} }");
tryItOut("with(/a/gi)/*infloop*/for(let prototype = <x/>; (eval(\"(window.throw(<><x><y/></x></>))\", (__proto__ = <><x><y/></x></>))); ([-<y><z/></y> %= <y><z/></y>])) {{yield;break M; }export *; }");
tryItOut("throw *;");
tryItOut("if(new #1#(1.2e3).unwatch(\"function::__proto__\")) { if (<><x><y/></x></> <= (-1)) throw [z1];} else {/*for..in*/L:for(let [__proto__, __proto__] = 5.0000000000000000000000 in <x/>) gc()<y><z/></y> }");
tryItOut("constructor = __iterator__;");
tryItOut("if(@foo) { if (__parent__ = undefined) with({constructor: <><x><y/></x></>})__count__;} else {/*for..in*/L:for(let constructor in  \"\" ) {yield 5.0000000000000000000000;yield @foo; }continue ; }");
tryItOut("if(constructor = <x/>) { if (this.watch(\"__noSuchMethod__\", Function) instanceof [,,]) /*for..in*/L:for(__count__ in {}) export *; else {export constructor }}");
tryItOut("if((uneval(__proto__.__count__ setter= let  ({ prototype: constructor }) (/) [,,]))) {;/*for..in*//* nogeckoex bug 349964 */ for  each(let *.__iterator__ in <x><y/></x>) {M:do {{}const <!--yy-->; } while(((-0)) && 0); } }");
tryItOut("M:if((__proto__ = this)(1.3, /a/gi)) { if (#2=[ /x/g ]) {export *; } else export *;}");
tryItOut("/*infloop*/do {return true; } while(<x><y/></x> .. <x/>);");
tryItOut("/*infloop*/for(({__iterator__: <y><z/></y>, constructor setter: (new Function(\"yield *;\")) })\n; -0 === ({a2:z2}); new eval()) {/*for..in*/for(var prop = {} in  /x/ ) /*infloop*/for(var __proto__; <><x><y/></x></>; <x><y/></x>) return;/*for..in*/for(__noSuchMethod__ in (((#1=0))((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((<><x><y/></x></> .@*:: prop)))))){(Math.pow).call\nreturn *::*; } }");
tryItOut("throw *::*\nyield;");
tryItOut("L:if((-1)) { if (/*\n*/'fafafa'.replace(/a/g, <x/>)[(Math.sin)]) {continue \t;L: {window{} } } else return;}");
tryItOut("/*infloop*/for(let __proto__; #2=[(eval(\"with(<x><y/></x>){return 0.1;__iterator__, __iterator__ = ({}); }\", this) ^ new (function  __proto__ () { gc() } )(((new Function(\"(<><x><y/></x></>).watch\"))(let (__noSuchMethod__ = <x/>) undefined, true))))]; @foo) {true; }");
tryItOut("if(__proto__) let (constructor = <x/>) { yield *::*; } else  if ((* || __count__.prop)) <><x><y/></x></> else {(<x/>).__defineSetter__ }");
tryItOut("/*infloop*/for(let __parent__ = ((p={}, (p.z = 1.3)())).*; prop.eval(window); <x><y/></x> @ <x/>) {{}\f[1]; }");
tryItOut("__iterator__ = __proto__;");
tryItOut("/*for..in*/for(const [__parent__, __count__] = (1 for (x in []))() in (constructor = prop) != window--) {var __parent__; }\n");
tryItOut("with({}) { prototype = __parent__; } ");
tryItOut("[]\nlet (prototype =  \"\" ) { L: {} }");
tryItOut("/*infloop*/while({gc() }){prototype = 033, __count__;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  '' ) {<><x><y/></x></>; }while((function  __noSuchMethod__ (constructor)window(<><x><y/></x></>)) && 0){}");
tryItOut("/*for..in*/for(var prop = this in  /x/g ) {switch(__iterator__ = __proto__) { default: case prototype =  /x/ : break;  }* }");
tryItOut("try { export *; } finally { export *; } \n");
tryItOut("/*infloop*/do { } while(*);");
tryItOut("let (__noSuchMethod__, __proto__ = 0x99) { if(constructor) {let __noSuchMethod__;yield; } }");
tryItOut("/*for..in*/for(let prototype in <x><y/></x>) <y><z/></y>;");
tryItOut("with({}) { with({}) { yield <x><y/></x>.@foo; }  } ");
tryItOut("if(((5.0000000000000000000000)[ /x/g .hasOwnProperty(\"prop\")])) { if (<x/>) {const prop = <x><y/></x>, constructor;gc() } else prototype = undefined, __noSuchMethod__ = #3={a:#3#};}");
tryItOut("/*for..in*/for(__proto__.constructor in ((function(q) { return q; })(@foo)))(__iterator__);");
tryItOut("with({}) { setter = __noSuchMethod__; } ");
tryItOut("do {export __noSuchMethod__;continue ; } while((({ __noSuchMethod__: constructor, prototype: prototype }) = (@foo ? <x><y/></x> : <><x><y/></x></>)) && 0);");
tryItOut("gc()\n");
tryItOut("switch((constructor.__iterator__ = [1,2,3,4].slice) ,  /x/g ) { case 3:  }");
tryItOut("{switch(window) { default: export prototype; }return 1e-81; }");
tryItOut("M:if(<bbb xmlns=\"__noSuchMethod__|=*\n\"><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></bbb>) {export __iterator__; } else var __parent__ = [1], __parent__ =  '' ;");
tryItOut("let (__noSuchMethod__ = false) { ( void ); }");
tryItOut("/*for..in*/for(__proto__ = (yield (new (/a/gi)(false)) ? <><x><y/></x></> === <x><y/></x> : (#2=<x/>).unwatch(\"__noSuchMethod__\")) in  ''  === this) {__noSuchMethod__; }");
tryItOut("/*infloop*/while(prop.__count__ = false){export *; }");
tryItOut("try { const __iterator__; } catch(prototype if 1.2e3) { return; } finally { {} } ");
tryItOut("with(this.zzz.zzz)/*infloop*/for((true.__lookupGetter__(\"__noSuchMethod__\")[[this]]); __proto__|=__count__ = ([ ''  for (constructor in 1e-81)]) .. new Function(<y><z/></y>, prototype); 1.2e3) constructor = prop;");
tryItOut("{/*for..in*/for(const __proto__ in ((function (__iterator__) { ({}).hasOwnProperty } )(*))){(-3/0);var __parent__; } }");
tryItOut("with({function::__count__: (__count__ = prototype)})/*for..in*/for(let __parent__ in  /x/g ) {gc() }");
tryItOut("yield  /x/ ;");
tryItOut("yield <x><y/></x> ? * : *;");
tryItOut("/*infloop*/do {{}gc() } while(new ({}).__lookupGetter__());");
tryItOut("throw StopIteration;");
tryItOut("throw StopIteration;");
tryItOut("if(#1#) if(*::* if (*::*)) { if (<x/>.__lookupGetter__(\"__noSuchMethod__\")) {__parent__ = 1e81; } else {export *;continue L; }} else  if ( /* Comment */*.throw(<x><y/></x>)) return function ([y]) { }; else {throw [z1,,]; }");
tryItOut("/*for..in*/for([prototype, __count__] = +( \"\" ).__defineSetter__ in this) {gc()throw <><x><y/></x></>; }\nyield;false");
tryItOut("{/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = <x/> in [z1]) {yield null; } }");
tryItOut("M:if(~) { if ((false)().propertyIsEnumerable(\"__noSuchMethod__\")) {get.(<><x><y/></x></>); }} else {yield;; }");
tryItOut("let (__noSuchMethod__ = eval(\"true\", <x><y/></x>)\n, __parent__) { \feval(\"(-0)\", 3); }");
tryItOut("/*infloop*/do {return; } while( \"\" );");
tryItOut("L: return;");
tryItOut("/*for..in*/for(let __count__ = (__count__.constructor setter= 'haha'.split) in <{constructor}><!--yy--></{constructor}>.(<{prototype}><!--yy--></{prototype}><!--yy-->)) if((uneval(try { {[1,2,3,4].slice } } finally {  } ))) {constructor = *::*, __count__ = <x/>const __iterator__, __noSuchMethod__; } else  if ((__proto__|=<x><y/></x>)) gc()");
tryItOut("try { yield ; } catch(prototype if (function(){let(prop = window) { return;})()) { with({}) this.zzz.zzz; } catch(__parent__ if (function(){throw try { with({}) try { __parent__ = __proto__/*; } catch(__parent__) { let(__parent__ = __iterator__, constructor) { gc() }  } catch(__parent__) { yield; } finally { with({}) { yield <y><z/></y>; }  } ;})()) { throw __proto__; } catch((new (__noSuchMethod__ = __count__))) { for(let y in []); } ");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(let (prop|=constructor.__iterator__.yoyo(__proto__))(this.__defineSetter__(\"function::constructor\", function  __parent__ (__noSuchMethod__) { yield __parent__.prototype setter= 'haha'.split } )) in ((((*::*.__count__ = <x><y/></x>).__defineSetter__(\"__count__\", [1,2,3,4].slice)))((__proto__ ? function(id) { return id } : __parent__))))M:if(<y><z/></y>) { if (3.141592653589793) {{} }} else export *;");
tryItOut("switch(<x><y/></x>.__lookupSetter__(\"getter\")) { case 8: do  while(({} >>>=window) && 0); }/*for..in*/M:for(__count__ = ((function (__count__)this)(null)) in <y><z/></y>) yield;");
tryItOut("M:with(<x><y/></x>){return; }");
tryItOut("try { while((<y><z/></y>) && 0) } catch(__parent__) { with({}) { (*)\t; }  } ");
tryItOut("/*infloop*/do {{} } while((function (__iterator__, getter) { prototype; } ) <= constructor.__count__);");
tryItOut("prototype.propertyIsEnumerable(\"__noSuchMethod__\");");
tryItOut("{var prop; }");
tryItOut("let ([, [, , prop, , ], ] = (p={}, (p.z = <x><y/></x> || 1.2e3)()), __parent__ = this) { throw *\f; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <y><z/></y>) gc\n");
tryItOut("<x/>");
tryItOut("/*infloop*/for(const __iterator__; <y><z/></y>; <><>undefined</></>) var prop, __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x/>) {break M;0x99; }");
tryItOut("if(<x><y/></x>.(<><x><y/></x></>)) {/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__ in <><x><y/></x></>) const prototype; }");
tryItOut("/*infloop*/do {(*::*); } while(<x/>);");
