tryItOut("yield window;");
tryItOut("if(*) { if (({__count__: @foo })) *::*;} else {export *; }");
tryItOut("var __iterator__ = true, __iterator__ = constructor;");
tryItOut("gc()");
tryItOut("const \f__count__;");
tryItOut("L: (function (__noSuchMethod__) { yield 1.2e3 } ).call");
tryItOut("if(<bbb xmlns:ccc=\"null\"><ccc:eee></ccc:eee></bbb>.(({__count__: <x><y/></x> })) !== <x><y/></x>.__defineSetter__(\"gc()\", [1,2,3,4].map) for each (__parent__ in 0.1)) { if ((<y><z/></y>.prototype)) {yield {}; }} else export *;");
tryItOut("with({__count__: ((__count__).*)}){if(new (())(<y><z/></y> ? __noSuchMethod__ :  \"\" , <x/>)) { if (__count__ = [z1]) return;} else ; }");
tryItOut("/*for..in*/<zzz>(window)[__noSuchMethod__].eval([<><x><y/></x></>].some(gc))</zzz>yyy");
tryItOut("break M;");
tryItOut("let (__count__) { yield; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; (new  /x/g  ? __proto__ : 3/0() :: [11,12,13,14].map); \nnew Array(prototype, *::*)) {yield __noSuchMethod__;return [1]; }");
tryItOut("while(((Date())) && 0){function (prop) { <x><y/></x> } {} }");
tryItOut("throw  '' \n");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for([prop, __iterator__] = (__noSuchMethod__|=(yield this)) in +(new true(true >>>=<x/> + @foo, [<x><y/></x> for (__proto__ in *)]))) const prop, __noSuchMethod__;throw true;");
tryItOut("/*infloop*/for(<y><z/></y>; (yield <>constructor = [[1]];</>); *::*) this");
tryItOut("/*infloop*/while( \"\" ){yield;export *; }");
tryItOut("{;__iterator__ }");
tryItOut("if(<x><y/></x>) { if (__parent__ === *::*) throw [z1]; else {return;{} }}");
tryItOut("/*for..in*/for(let prototype = .2 in <x/>) {const __proto__, __parent__ = __iterator__;throw window; }");
tryItOut("with({__count__: ({})(#3={a:#3#})})return 0/0;");
tryItOut("if((__iterator__ for each (__parent__ in -1)) -= <><x><y/></x></> .. <><x><y/></x></>) { if ([z1]) {<><x><y/></x></> const __iterator__;{export *;window; } }} else const __parent__, prop = *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (prototype) in <><x><y/></x></>.eval(__proto__)) yield;");
tryItOut("let (__iterator__ = Function((#0=[ /x/ ].__lookupSetter__(\"__proto__\"))), prop) { /*infloop*/while((*::* != null)){gc() } }");
tryItOut("[1,2,3,4].slice");
tryItOut("/*infloop*/M:for((); eval(\"new ([,])()\", getter += <><x><y/></x></>\t > constructor); ((/a/gi).call(*::*, * += * >>>=<><x><y/></x></> >= [[1]], ({prototype: 0})))) {; }");
tryItOut("/*for..in*/for(let ({ constructor: __noSuchMethod__ }) in *::*) {gc() }");
tryItOut("__iterator__");
tryItOut("let (prototype, __noSuchMethod__ = ({__iterator__: <><x><y/></x></>})) { {__parent__, __proto__export prop; } }");
tryItOut("/*for..in*/\nfor(__proto__ = <><bbb xmlns:ccc=\"((eval(\"export __proto__;\\n\\n\", <x/>)) -= __proto__)\"><ccc:eee></ccc:eee></bbb></> in (prop < *\r++ ? *::* === 1.3 : ([, __iterator__, //h\n(new Function(\"export *;\")), __noSuchMethod__, ] = __noSuchMethod__ = __iterator__))) __noSuchMethod__ = __proto__;");
tryItOut("let(__count__, prop) { L: {prop, constructor; }");
tryItOut("let __count__, prototype\nif(([[prop].map([1,2,3,4].slice)].filter((1 for (x in []))))) {yield;export *; } else  if ((__parent__.__noSuchMethod__ = prototype).__proto__) gc() else if(<><x><y/></x></>) (prototype); else {throw -0;\f__iterator__, prototype; }");
tryItOut("if(function ([y]) { }.hasOwnProperty(\"constructor\")) M:with({__parent__: __noSuchMethod__ instanceof true})if(3/0) { if (3.141592653589793) var __noSuchMethod__; else {const __count__ = 5.0000000000000000000000;throw @foo; }} else  if ((window)) break ;");
tryItOut("__noSuchMethod__, __iterator__");
tryItOut("L:if((__proto__ .@ 1e-81)) {yield 1.2e3; } else  if (new new Error()((<x><y/></x>.propertyIsEnumerable(\"__parent__\")) instanceof (__parent__ = __parent__), ((({}).__lookupGetter__)(*,  /x/ )))) {/*for..in*/M:for(var constructor = [1] in <><x><y/></x></>) } } else if((__proto__))  else gc()");
tryItOut("if(__count__ = prototype) {} else  if (<!--yy-->) {throw ({__proto__: true, prop getter: function ()(-0) });(0x99).watch } else { }");
tryItOut("return ;");
tryItOut("yield; const __proto__;");
tryItOut("with({constructor: new (Function)()}){return;'haha'.split }");
tryItOut("{yield prop;(constructor); }");
tryItOut("L: {let prototype = <x/>; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = (new Date((this(@foo, <><x><y/></x></>)),  /x/ )) in (uneval(*::*))) do {1e-81; } while((<x/>) && 0);");
tryItOut("throw StopIteration;");
tryItOut("if(<bbb xmlns:ccc=\"(({__parent__: *::*.unwatch(\"__proto__\")}))\"><ccc:eee></ccc:eee></bbb>.([,,])) {throw this; }");
tryItOut("with({}) { function::function::__noSuchMethod__ = __proto__; } ");
tryItOut("let prop = __count__\nFunction");
tryItOut("yield <x/>;");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = (yield ({ set __proto__ __parent__ ()((p={}, (p.z = Boolean(__iterator__))())) })) in *::* == *) if(__parent__) { if ( /x/g ) {{}export *; }} else (undefined);");
tryItOut("if(new (<><x><y/></x></>)()) {} else  if (__proto__.eval(<><x><y/></x></>))  ;");
tryItOut("/*for..in*/for(__proto__ = eval(\"yield true;\", <>__iterator__ = false</>) in <x><y/></x>) if( /x/ ) {return;yield [[]]; } else  if (3) {return 0/0;{} } else yield;");
tryItOut("/*infloop*/while((this.__defineGetter__(\"prototype\", function ()arguments)))window;");
tryItOut("/*infloop*/while((__noSuchMethod__.__iterator__ setter= function () { ; } .__lookupGetter__(\"__parent__\")))/*for..in*/for(__parent__ in <x><y/></x>) {return;return; }");
tryItOut("[] = yyy");
tryItOut("with((#2=({__iterator__: <y><z/></y>}))){Functionyield  '' ; }");
tryItOut("if(<x><y/></x>) return; else  if (@foo) {throw function(id) { return id }; } else yield");
tryItOut("yield ((this.__defineSetter__(\"constructor\", new Function)) &= (<x><y/></x>.(undefined)) /= (__iterator__.eval(<x><y/></x>)));");
tryItOut("/*for..in*/for(const __noSuchMethod__ = prototype.__proto__ in 1.3) {{}yield *; }");
tryItOut("try { return; } catch(__parent__ if (function(){let(prototype = ((throw <><x><y/></x></>; * function::prop).isPrototypeOf(__parent__ = 0x99)), __parent__ = constructor) ((function(){for(let y in []);})());})()) { prototype = __count__; } ");
tryItOut("with(prop){@foo }");
tryItOut("M:if(null) {const __parent__ = <x><y/></x>; } else  if ((1.2e3.__defineSetter__(\"prototype\", function (__proto__, __noSuchMethod__) { yield  \"\"  } ))\n) (__parent__); else export *;");
tryItOut("with(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)\rL: ;");
tryItOut("L:if((new Function(( /x/g .__defineSetter__(\"__iterator__\", ({}).__lookupGetter__)), this).__parent__ = (__noSuchMethod__ = <y><z/></y>)(function  prototype (__noSuchMethod__, prototype) { return window } ))((__noSuchMethod__--))) {/*for..in*/for(prototype in yield) {let __proto__ =  '' ; }__iterator__, prop; } else  if ([1,,]) {continue ;export __iterator__; }");
tryItOut("/*infloop*/while(undefined){undefined; }");
tryItOut("throw StopIteration;");
tryItOut(";\nyield <><x><y/></x></>;\n");
tryItOut("M:if(+ '' ) {; } else  if (5.0000000000000000000000) {return; }");
tryItOut("let(({ prop: ({ __parent__: __noSuchMethod__ }), __proto__: ({ prop: ({ __parent__: __parent__ }) }) }), prop = ({ prop: __proto__ }) = *) { let(__iterator__) ((function(){prototype = __iterator__;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in __count__) var __parent__;");
tryItOut("{return (<y><z/></y>.eval(<><x><y/></x></>));\t }");
tryItOut("/*infloop*/while((yield *)){return ();;yield; }");
tryItOut("with( /x/ [<y><z/></y>].prop) { return ~window .@*:: let (prop) [,,z1] } ");
tryItOut("/*for..in*/for(let [prop, __iterator__] =  /x/g .__defineGetter__(\"prop\", ((/a/gi).call).call) in <x><y/></x>) {yield; }");
tryItOut("for(let y in [5,6,7,8]) const __noSuchMethod__;");
tryItOut("/*infloop*/for(((yield this)).__parent__ = [*::*]; (function  __count__ (prop, prototype) { yield undefined } (((this)[@foo]), 3/0).valueOf(\"number\")) - Math.sin; *::* + __parent__) {/*infloop*/L:for(var getter; <bbb xmlns=\"<x><y/></x>\"><!--yy--></bbb>; ({__count__ getter: Math.pow })) window;if(e) prototype = prop else  if ( { let __count__; } ) {var prototype, prototype = prototype;gc() } }");
tryItOut("/*infloop*/while(1e4){throw <><x><y/></x></>;export *; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <x><y/></x>) return @foo;\n");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("let (__noSuchMethod__ = ('haha'.split)(<y><z/></y>, __count__) in (<x><y/></x>()), ({ __iterator__: ({ constructor: prop, __iterator__: __parent__ }), __noSuchMethod__: ({ __iterator__:  }) })) { var prototype = window; }");
tryItOut("M:do {( \"\" );(null); } while((<x/>) && 0);");
tryItOut("/*infloop*/while((<><x><y/></x></> in 0))while((undefined) && 0){(window);*; }");
tryItOut("/*infloop*/while(this)Boolean().__proto__");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("with({prop: new String(__noSuchMethod__ = true) % window}){ } const __iterator__;");
tryItOut("if(+<y><z/></y> .@ (__count__ = __noSuchMethod__) == ()) {var __noSuchMethod__, prototype = window; const __noSuchMethod__; } else  if ([,,]) {evalif((@foo in null)) { if ('fafafa'.replace(/a/g, ({}).hasOwnProperty)) {return case 4: break; continue ;case *: const constructor = true;(<><x><y/></x></>);break; default: break; break; break; {}case 3: case 0: return;break; <y><z/></y>, __proto__;( /x/ );__parent__;;break; continue ;break; ; } else let 1.2e3, __parent__ = __noSuchMethod__;} }");
tryItOut("/*for..in*/for(var [constructor, prototype] =  \"\"  in prop) {__count__;break ; }");
tryItOut("switch(prototype = constructor) { default:  }");
tryItOut("/*for..in*/M:for(const [__proto__, __count__] = new (@foo)(<y><z/></y>, <y><z/></y>).__lookupGetter__(\"__iterator__\") in function::__count__%= \"\" ) while((0/0) && 0){return;; }");
tryItOut("{<x><y/></x>;switch(window) { case 1:  } } const __count__;");
tryItOut("with({constructor: __parent__})");
tryItOut("{while((prop.yield setter= new (<x/>)(-3/0)) && 0){return prototype = <x/>; } }");
tryItOut("if((((/a/gi)(this.__defineSetter__(\"__parent__\", Function))).isPrototypeOf(({prop:  /x/ }).isPrototypeOf(1.2e3)))) {/*for..in*/for(const __proto__ in (([undefined if (<x><y/></x>)])(function::__parent__.__iterator__))){gc()throw [z1]; }{} }");
tryItOut("if(\t(<><x><y/></x></> ? <><x><y/></x></> : function(id) { return id })) const __noSuchMethod__; else  if (void  /x/g ) {export __proto__;constructor; }");
tryItOut("L: {if(<x><y/></x>) const 0; else  if (<x><y/></x>) {export *;export *; } }");
tryItOut("/*for..in*/for(var __iterator__ in --__parent__ .@*:: <><x><y/></x></>) break \n__iterator__: <><x><\fy/></x></>");
tryItOut("/*infloop*/do do {} while((this) && 0); while((@foo , undefined[[,]]));");
tryItOut("function () { return false } ");
tryItOut("throw StopIteration;");
tryItOut("{return <x/>.constructor = ({ prop: ({ __count__: __noSuchMethod__ }) });{ } }");
tryItOut("let __proto__;");
tryItOut("switch(1.2e3) { case this.__defineSetter__(\"__count__\", (1 for (x in []))).__noSuchMethod__ = __parent__ << <x><\ty/></x>: if(prop = (__parent__ = <x><y/></x>.__iterator__)) {__count__ = <x><y/></x>, prototype = 5.0000000000000000000000;<><x><y/></x></> } else  if ((yield ((__proto__).watch).\fcall((p={}, (p.z = .2)()), [15,16,17,18].some(function (function::constructor, __proto__) { yield window } , this), <y><z/></y>))) {let __iterator__, __proto__; }break;  }");
tryItOut("function (__parent__, __count__)*::*");
tryItOut("return constructor = __noSuchMethod__.throw([,,z1]);");
tryItOut("/*for..in*/for(let [__parent__, , , ] in ((([15,16,17,18].sort((Function).call, [window])))((window.*).isPrototypeOf(__noSuchMethod__ = prop).unwatch(\"function::__proto__\")))){false;null; }");
tryItOut("with({}) { __parent__ = __count__; } ");
tryItOut("/*infloop*/while(!false)return;");
tryItOut("/*for..in*/for(constructor in (([1,2,3,4].map)(<></> != <y><z/></y>)));");
tryItOut("if(constructor = (-(([1,2,3,4].slice)(__count__, <x/>)[<x><y/></x>.(__parent__)]))) { if ((let (prototype, ({ __count__: prop, __iterator__: __proto__ })) __proto__.(<x\t><y/></x>) >>>=())) {yield this;gc() } else /*infloop*/L:for(prop.__noSuchMethod__ =  /x/g ; throw __iterator__;; (uneval(<x><y/></x>))) {({}).__lookupGetter__ }}");
tryItOut("/*infloop*/while((<x><y/></x> > 1e+81));");
tryItOut("/*for..in*/L:for(var __proto__ in ((Math.sin)(<y><z/></y>))){return;{} }");
tryItOut("M:if(//h\n<bbb xmlns:ccc=\"[[1]].@* in prop = ([[1]] >>= @foo)\"><ccc:eee></ccc:eee></bbb>.(0x99())) { if ([({ set __proto__() { /*for..in*/M:for(let __parent__ in ((function  __iterator__ () { export *; } )(<y><z/></y>))){} } ,  get __noSuchMethod__ __iterator__ (__proto__: *::*.__count__ = this) { yield window.__defineGetter__(\"__count__\", function  __noSuchMethod__ (prototype, prototype) { yield {} } ) }  }) for each (__parent__ in ((yield <x/>).isPrototypeOf(__iterator__ = <x><y/></x>))) for each (__count__ in (__count__ == null)) if (<><x><y/></x></>)]) ;} else {; }");
tryItOut("{/*infloop*/while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>){ } }");
tryItOut("/*infloop*/M:do  while(<><x\t><y/></x></>.prop = __iterator__);");
tryItOut("/*infloop*/for(let constructor; (eval(\"const __noSuchMethod__ = true;\",  /x/ .throw(constructor))); new (__count__)()) {; }");
tryItOut("switch((new window(<><x><y/></x></>, false))) { case 1: break; if( \"\" ) yield; else  if (null in <x><y\t/></x>) (<><x><y/></x></>);break; default: case <x/> &&  \"\" : __noSuchMethod__, __proto__ = <x><y/></x>; }");
tryItOut("if( /* Comment */window) { if ((eval)) {yield;L:if(1.2e3) break ; else  if (@foo) {{}return -0; } }} else gc();");
tryItOut("let (__proto__ = (yield prototype), prop = (this.zzz.zzz)) { (((1 for (x in []))).call(0x99 + e, (p={}, (p.z = (-1) !== <x/>)()))); }");
tryItOut("/*for..in*/for(__proto__ = () in ((this)(constructor, __parent__)) =  /x/  || undefined) {let (__noSuchMethod__ = [,,], prototype) { const prototype, prop; }return; }");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] = @foo.__defineGetter__(\"__count__\", true\t) + __parent__ = <><x><y/></x></> in ) {var __count__;let constructor = <><x><y/></x></>, prop; }");
tryItOut("prop =  /x/ , __count__; const function::get;");
tryItOut("case 4: /*for..in*/M:for(let [__count__, function::__iterator__] = ((this).__defineSetter__).call(033, undefined(), <y><z/></y>) in 'fafafa'.replace(/a/g, function(y) { yield y; const __parent__ = <x><y/></x>, __noSuchMethod__ = true;; yield y; })) L:while((({__iterator__ setter: ({}).hasOwnProperty })) && 0)if(3.141592653589793) <x><y/></x>; else  if (prototype) <x><y/></x>;break; case [<y><z/></y>.__lookupGetter__(\"prototype\")].filter(new Function): switch(undefined * true >>= ( /x/  !=  /x/ )) { case 6: break;  }");
tryItOut("M:with({__iterator__: __proto__.watch(\"prop\", Function)})throw prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <y><z/></y>) {yield  /x/ ;return; const prop; }");
tryItOut("for(let y in []);");
tryItOut("constructor = prop;");
tryItOut("/*for..in*/L:for(let __iterator__ = ((*::*)(false, <x/>)++) in <x><y/></x>) export prototype;");
tryItOut("L:if(#1=<><x><y/></x></>) return false; else  if (({__iterator__: <x><y/></x>, __iterator__:  continue  })) {__iterator__ = constructor;constructor }");
tryItOut("if(<x><y/></x> += <><x><y/></x></>) {(<><x><y/></x></>);export __count__; } else ;");
tryItOut("gc()");
tryItOut("/*for..in*/for(var constructor in #3={a:#3#}) return __iterator__ = [,];");
tryItOut("if(__count__) { if (<><x><y/></x></>) \f{export *; } else {yield true;throw 5.0000000000000000000000; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__ in eval(\"#2=[*]\", this.zzz.zzz)) while((*::*) && 0);");
tryItOut("with(1.2e3.valueOf(\"number\"))export __count__\nM:if(<x/>.eval( /x/ )) {yield this;/*infloop*/for(const __noSuchMethod__ = *::*; window; <y><z/></y>) {throw null; } } else  if (function  __parent__ (prototype, __count__) { return <x/> } \f) {return;export prototype; }");
tryItOut("/*for..in*/for(const __parent__ = 0x99 << <><x><y/></x></> in this.__defineSetter__(\"constructor\", ({}).hasOwnProperty)) let (prototype) { (1 for (x in [])) }");
tryItOut("with({__parent__: (__proto__ = .2()).__lookupGetter__(\"__iterator__\")})gc()");
tryItOut("return;");
tryItOut("/*for..in*/L:for(const prototype.prototype in (('haha'.split)(undefined))) { yield ( ''  >= undefined) } ");
tryItOut("return;");
tryItOut("return;");
tryItOut("with(null){ }");
tryItOut("{(1e+81);/a/gi }");
tryItOut("while(((uneval(prop, __parent__))) && 0){gc() }");
tryItOut("L:do {break L; } while((033) && 0)\n");
tryItOut("var __count__ = __iterator__, constructor; const constructor;");
tryItOut("__proto__");
tryItOut("constructor.prop = __iterator__;");
tryItOut("throw prototype\n");
tryItOut("while(((({__parent__: (function (__count__, __proto__)<x><y/></x>)(<y><z/></y>, window) })).hasOwnProperty(\"__iterator__\")) && 0){throw <><x><y/></x></>\n; }");
tryItOut("\nyield <><x><y/></x></>;\n");
tryItOut("/*for..in*/for(const [constructor, __count__] = [,,].__iterator__ in <y><z/></y>) gc()");
tryItOut("if([,,]) {var __noSuchMethod__; } else  if (<x/>) {export constructor;const __count__ = <><x><y/></x></>, prop, __count__ = 4.; }");
tryItOut("{{; } }");
tryItOut("/*for..in*/for(const constructor = (__count__.prop = <><x><y/></x></>) .@*:: (prototype.( /x/ )) in ((this)[3/0]).@*) yield;");
tryItOut("let(__parent__, prop = window) ((function(){for(let y in []);})());");
tryItOut("__iterator__.__parent__ = __parent__;");
tryItOut("switch((export constructor)) { default: \n__noSuchMethod__ =  /x/g ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ prop: ({ __noSuchMethod__: __iterator__ }) }) in #1=[([033])].__defineSetter__(\"prototype\", 'haha'.split)) {<><x><y/></x></>; }");
tryItOut("export *\nlet constructor = window;");
tryItOut("/*infloop*/do yield (((<><x><y/></x></> .@*:: 3/0).valueOf(\"number\")) if (new __iterator__( \"\" , <x><y/></x>))); while((__noSuchMethod__ = <><x><y/></x></> *= (let (__iterator__ =  /x/g ) undefined)));");
tryItOut("/*infloop*/while([, __proto__, ] = (yield (({constructor: <x><y/></x>}))))/*infloop*/do {\rbreak L;@foo; } while(((__noSuchMethod__.isPrototypeOf(*)).eval((eval(\"__noSuchMethod__\", prototype)))) ^ prop);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var  '' .propertyIsEnumerable(\"prototype\") in (p={}, (p.z = yield *::* = __parent__-=<x><y/></x>.__noSuchMethod__ = <xxx>{prototype}</xxx>)())) {/*infloop*/M:for(let __iterator__ = ((true).call(<x><y/></x>, null)); (this.__defineGetter__(\"__noSuchMethod__\", (*).watch)); (p={}, (p.z = undefined)())) \fL:if(<y><z/></y>) { if (prototype) continue M;} else __iterator__, __iterator__; }");
tryItOut("if(<x><y/></x>.(<x/>)) { if (([11,12,13,14].map)) {export *; } else {var __iterator__; }}");
tryItOut("/*infloop*/for(__iterator__; <><x><y/></x></>; __iterator__) return __parent__;");
tryItOut("if(x::__iterator__ || var __parent__ = <y><z/></y>;) {<><x><y/></x><!--yy--></> } else export *;");
tryItOut("/*infloop*/for(__count__; (function::prop.((<x><y/></x>)(<><x><y/></x></>,  '' ))); constructor = ~[z1,,]) {/*infloop*/while((null.valueOf(\"number\") .@x:: this.__defineGetter__(\"@foo\", [1,2,3,4].slice)))let __proto__;{L:while((prop) && 0){yield;throw <y><z/></y>; }\n;undefined; } }");
tryItOut("/*for..in*/for(let __count__ in ((function  __noSuchMethod__ (prototype, __iterator__)try { function(q) { return q; } } catch(set) {  /x/g ; } )(true != <x><y/></x>)))(function ([y]) { })();");
tryItOut("/*for..in*/for([prototype, __iterator__] = null in function::__count__ = <> { return ({a2:z2}) } </> for each (prop in 0/0) for (constructor in constructor) if (false)) /*for..in*/for(var __iterator__ in (([1,2,3,4].map)(<x><y/></x>))){var __proto__; }");
tryItOut("{}/*for..in*/for(constructor = __noSuchMethod__ = [z1] in true) yield;");
tryItOut("var __parent__ = [1,,], __iterator__;");
tryItOut("/*infloop*/for(let constructor; 4.; <x><y/></x>) __parent__;");
tryItOut("with(arguments){return 3; }");
tryItOut("/*for..in*/L:for(var [__proto__, __noSuchMethod__] = new (delete undefined.isPrototypeOf(<x><y/></x>) && #0=({prototype: function::__count__ = <x><y/></x>}))(<zzz>yield ({__count__: window })</zzz>.([__parent__ ? <x><y/></x> : 1e+81 /= <x><y/></x>].some(<x><y/></x> - [])), function(q) { return q; }(false, *).__defineSetter__(\"__parent__\", function () { gc() } )) in this.__defineSetter__(\"__noSuchMethod__\", this)) with({__iterator__:  /x/g })export __proto__;");
tryItOut("return *;");
tryItOut("if((1e+81)(__iterator__)) {export constructor;return false; } else continue ;");
tryItOut("/*for..in*/M:for(let __iterator__ in (((function (__count__, __proto__) {  } ).apply)(<y><z/></y>)))break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in *) const __proto__, __proto__ = <x/>;");
tryItOut("<><>yyy</></>");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = ++[,] in ( /x/g  .@*:: undefined)) with({__count__: window ,  /x/ }){var __iterator__ = <x/>; }");
tryItOut("/*infloop*/\tdo {/*infloop*/for(const __proto__; prop; <x><y/></x>) export *;throw <x><y/></x>; } while([1,2,3,4].slice);");
tryItOut("/*infloop*/for(const ({ __parent__: __noSuchMethod__ }) = <x><y/></x>.throw(<y><z/></y>); __parent__.__count__ = window; prototype) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let this.__proto__ in (__parent__ ? <x/> : 0.1 / (constructor))) switch(__proto__.constructor) { case 1: gc()break;  }");
tryItOut("if(<><{prop}><!--yy--></{prop}></> == --<><x><y/></x></>) return [[1]].unwatch(\"constructor\"); else export *;");
tryItOut("switch([z1,,]) { default: Math.pow }");
tryItOut("continue ;");
tryItOut("L:if(*::*) {yield; } else  if (1e81.isPrototypeOf(null)) {{} } else export *;");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; RegExp((new (<x><y/></x>)[null]()), (true\n));  /* Comment */(eval(\"(-0)\", <x/>))) {export __iterator__; }");
tryItOut("Math.sin");
tryItOut("/*infloop*/for(*; let (__parent__, prop = [z1,,]) <><x><y/></x></>; (( '' ))) {function () { yield *::* }  }");
tryItOut("{yield prop;gc() }");
tryItOut("while(((this .@x:: __proto__)) && 0)/*infloop*/M:for(let prop; <x/> /= 1e81.__count__ = (yield prop); prop = __iterator__ << (this.zzz.zzz)) {if([(()([[]], @foo))]) { if (window) throw case (constructor = .2(<x><y/></x> :: window, undefined)): break ;break; break; case  \"\"  ?  ''  : __noSuchMethod__: break; case prop = (function ([y]) { })(): export __parent__;break; case 4: return;break; default: return;;} else {break M;; } }");
tryItOut("__parent__ = prototype;");
tryItOut("if(((new (({}).hasOwnProperty)(([<y><z/></y>]), @foo)) != (eval(\"yield undefined;\", *::*) ^ window.__noSuchMethod__ = prop.unwatch(\"__iterator__\").yoyo(([15,16,17,18].map(function(q) { return q; },  \"\" .*)))))) { if ((#1=[[1]].throw(<x/>) % \n(<x><y/></x>.unwatch(\"constructor\")))) switch(this) { default: break;  }} else ;");
tryItOut("if( /x/ ) return; else  if (true) const prototype; else return <x/>\n");
tryItOut("L:while((({ set __parent__ constructor (({ __iterator__: prototype, prototype: __noSuchMethod__ }), __proto__)@foo + 0x99 })) && 0)switch((<></*\n*/x><y/></x></>)) { case 0: yield;break;  }");
tryItOut("{const constructor =  /x/ ;{return 1.2e3;return; } }");
tryItOut("M:with(<x/>.__noSuchMethod__ <= __proto__.constructor){(1e+81).watch }");
tryItOut("{(1.2e3); }");
tryItOut("if((new ((1 for (x in [])))().yoyo([,].propertyIsEnumerable(\"__iterator__\")))) { if ((yield undefined) default: break; case 8: break; {return; } ) /*infloop*/for(const __iterator__; (RegExp(<x/>\t === constructor, 5.0000000000000000000000)); new (5.0000000000000000000000)( \"\" ,  '' )) export prop; else do {\t } while(((<><x><y/></x></>).call((function ([y]) { })(), this)) && 0);}");
tryItOut("export __iterator__;");
tryItOut("while(((__noSuchMethod__(({__count__ setter: (window).call, prototype: -3/0 })) = ( \"\" ()) ^ prototype = __proto__)) && 0)if((String(Function((3/0)()), this.__defineGetter__(\"__parent__\", (1 for (x in [])))))) { } else (<y><z/></y>);");
tryItOut("{with({__noSuchMethod__: [<><x><y/></x></>].filter(function (__parent__//h\n) '' )}) const __noSuchMethod__; }");
