tryItOut("for(let y in [5,6,7,8]) ;");
tryItOut("if(*) {const __noSuchMethod__ = <x><y/></x>;, prop; } else  if (this) {return; } else __noSuchMethod__");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in \n '' ) {let(constructor = (new Function).call(<y><z/></y>, ), get) { with({}) { let __noSuchMethod__; } if(1.2e3.__noSuchMethod__ = <><x><y/></x></>)  else  if (let (__parent__) new Math.pow()) L:while((window) && 0)return; }");
tryItOut("if(new ((-0))(undefined).isPrototypeOf(<x><y/></x> for each (__noSuchMethod__ in <y><z/></y>))) {throw __parent__; } else  if (__proto__ = __count__.__count__ setter=  '' ) new Function");
tryItOut("if( /* Comment */<><x><y/></x></>) { if (prototype.(<><{prop}> </{prop}></>)) {return <><x><y/><//*\n*/x></>\n } else {let constructor, __iterator__; }}");
tryItOut("/*infloop*/for(let constructor; [<y><z/></y>].sort(gc); (__noSuchMethod__ %= <><x><y/></x></> & !x::__parent__)\n) {return; }");
tryItOut("/*infloop*/while(({__count__: (this ? 033 : 5.0000000000000000000000 << <><x><y/></x></> &= <y><z/></y>), __count__ setter: let(__proto__ = <><x><y/></x></>, __iterator__ = this) ((function(){var __proto__;})()); })){}");
tryItOut("/*for..in*/for(const __parent__ in ((function (constructor) { M:if([,]) break M; else  if (<x><y/></x>.(#1=[#1#]).__defineSetter__(\"__parent__\", eval)) gc() else {throw function ([y]) { }; } } )(<></>)))switch(window =  /x/ ) { case 1: (window);/*infloop*/for(var __noSuchMethod__; *::*; window) new Functionbreak;  }");
tryItOut("if([15,16,17,18].sort(eval, <><x><y/></x></>)) //h\n{ if (<><x><y/></x></>( /x/ , <><x><y/></x></>)(<x/> , <><x><y/></x></>, [z1])) {//h\ngc()(0.1); }} else return;");
tryItOut("L:if((constructor = *[({prototype: true, prop: (constructor+=<x><y/></x>) :: <x><y/></x> })])) {return;<x><y/></x><!--yy-->/*infloop*/for(var __noSuchMethod__; ([11,12,13,14].some); (let (__count__) <x><y/></x>)) return  /x/g ; } else  if ([(( /* Comment */__iterator__).unwatch(\"prototype\")).unwatch(\"__proto__\")]) __parent__ = __parent__;");
tryItOut("export __count__\ngc");
tryItOut("while((<x><y/></x>) && 0){(window); }break L;");
tryItOut("M:if(__proto__ = constructor) {function () { yield true }  } else  if (({__proto__: true})) ");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(__iterator__; ((<x/>)(eval(\"(-1)\", <x><y/></x>))); [<bbb xmlns=\"((yield #1#))\"><!--yy--></bbb>].some(<>continue ;</>.constructor = <x/>)) yield prototype.__parent__;");
tryItOut("do while(((<x><y/></x>).watch) && 0){return; } while((this.__defineGetter__(\"__parent__\", [1,2,3,4].map) <= __count__.constructor = 0) && 0);");
tryItOut("L:switch(prototype)\t { case 4: ( /x/g );yield;break; break; case <><x><y/></x></>: export *;case <y><z/></y>: case undefined: break; case *::*: export __proto__;break; default: case 7: break; (3/0);break; case 2: (-1);break;  }\nyield prop;");
tryItOut("with((({}).hasOwnProperty)(Exception( '' )))return null;");
tryItOut("export __noSuchMethod__; const prop;");
tryItOut("with({prop: prop.__lookupGetter__(\"prototype\")}){switch(<><bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb></>) { default: break;  } }");
tryItOut("/*infloop*/for(({prop: ({__count__: (__count__+=window)}), __proto__: (prop = <><x><y/></x></>) }) ? true : -3/0\r(*); (<x><y/></x>.__lookupSetter__(\"constructor\")) === __count__ = 1.3; ([1,2,3,4].slice).call( '' , __parent__ ? <x><y/></x> = [@foo].filter('haha'.split) : [z1].__count__ = *::*.watch(\"__parent__\", function () { gc() } ), (<><x><y/></x></>.__defineSetter__(\"__proto__\", <x><y/></x>).__defineSetter__(\"prototype\", [1,2,3,4].map)))) (__parent__ = constructor.propertyIsEnumerable(\"constructor\"));");
tryItOut("if((uneval(<x><y/></x> =  \"\" ))) {__iterator__ = <><x><y/></x></>, __proto__; } else  if (({constructor setter: 'haha'.split, __noSuchMethod__ getter: Math.pow })) ");
tryItOut("/*for..in*/L:for(const [__proto__, __count__] = let ([], __noSuchMethod__ = <y><z/></y>) undefined &= constructor = 1.3.__defineSetter__(\"__count__\", (*::*).watch) in __noSuchMethod__ = (<x/> * (false.__defineSetter__(\"__proto__\", <x><y/></x>)))) ");
tryItOut("M:if((uneval(<x><y/></x>))--) { if (( \"\" )(this)) export __iterator__;} else {let __iterator__; }");
tryItOut("M:if(prop) { if (__noSuchMethod__ ? undefined @ *::* : function (__proto__) { default: break;  } .__lookupGetter__(\"__iterator__\")) if(++prototype = *) let prototype; else  if (({__iterator__: <x/> })) {(<x/>).apply } else const __proto__; else let prototype = ({a2:z2}), __noSuchMethod__ = undefined;}");
tryItOut("L: var __iterator__ = <y><z/></y>, prop;");
tryItOut("M:if((uneval(<y><z/></y>))) /*for..in*/for(__parent__ = (<x/>.eval(@foo)) in  /x/ ) {{} } else [];");
tryItOut("with({__iterator__: try { const __iterator__, __proto__; } finally { return <x><y/></x>; } }){yield;var constructor = <x/>; }");
tryItOut("L:if([<x><y/></x>]) {var prototype; } else  if (window) return; else {yieldyield #1=[#1#]; }");
tryItOut("/*for..in*/for(let __proto__ in ((eval)(3/0))){gc()var constructor, __proto__; }");
tryItOut("throw __count__;");
tryItOut("L: {}");
tryItOut("L:  /x/g ;");
tryItOut("{}");
tryItOut("/*infloop*/do {continue ;return; } while(new (function (__proto__) { return @foo } )(<y><z/></y>));");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:do {yield;return; } while([,,z1].isPrototypeOf(true))");
tryItOut("if((({<y><z/></y>: <x><y/></x>}))) { if (this.zzz.zzz) {continue ; } else {; }}");
tryItOut("with({}) { throw __count__; } ");
tryItOut("L\f: {gc(); }");
tryItOut("/*infloop*/for(new (function(y) { yield y; gc(); yield y; })( /x/  /= true) - (3/0.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; })).eval(null ? 3.141592653589793 : <><x><y/></x></>--); eval(); __count__ = <x><y/></x>.unwatch(\"__iterator__\")) (1e-81);");
tryItOut("let(__noSuchMethod__, constructor) ((function(){break ;})());");
tryItOut("");
tryItOut("{{gc(){} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in  \"\" .propertyIsEnumerable(\"__parent__\")) let prototype;");
tryItOut("L:switch((new Function(\";\"))) { case [11,12,13,14].map: break;  }");
tryItOut("do __parent__, x::__noSuchMethod__; while((*::*.__defineSetter__(\"__parent__\", new Function)) && 0);");
tryItOut("export *\n__noSuchMethod__;");
tryItOut("<><x><y/></x></>;/*for..in*/M:for([function::__iterator__, prop] = __parent__ = @foo in __proto__) {(__proto__).watch }");
tryItOut("if(.2) { if ([15,16,17,18].some((constructor).apply, ])) {{} } else const __parent__;}");
tryItOut("const __iterator__;");
tryItOut("L: {return; }");
tryItOut("export *;");
tryItOut("if(<x/>.__parent__ >>= (gc())) \tdo {yield; } while((0.1 :: #1=[#1#]) && 0) else  if (Date((uneval([z1])), __proto__).hasOwnProperty(\"prototype\")--) throw StopIteration;");
tryItOut("do M:while((<><x><y\f/></x></>) && 0)(*); while((1.2e3) && 0);/*infloop*/L:do {true;export prototype; const prototype; } while(true);");
tryItOut("export *\nif((()++)) { if ((constructor = constructor)) {continue ; }} else {let * = *; }");
tryItOut("__proto__ = prototype;");
tryItOut("L: {continue L\n(<><x><y/></x></>); }");
tryItOut("/*infloop*/M:for(( \"\"  for each (constructor in (-0))); (#0=[({})]); <y><z/></y> * true) {function  __noSuchMethod__ (prototype, prototype) { yield <x><y/></x> }  }");
tryItOut("delete = constructor;");
tryItOut("if( \"\" ) { if (1.2e3) { }} else {Math.pow }");
tryItOut("if(this.valueOf(\"number\").*) { if (__iterator__ = this[false.__defineSetter__(\"function::__proto__\", function  __proto__ (__count__, __proto__) { return <><x><y/></x></> } )\t]) with({__iterator__: ()})yield true;} else /*infloop*/do  while((1e4 += []));");
tryItOut("if(prop = new undefined()) { if ((new (/a/gi)())) gc()} else {yield\n }/*infloop*/L:for(var prop; ( /x/  <= this).__defineGetter__(\"__proto__\", //h\nfunction  __parent__ () { return <y><z/></y> } ); <><ccc:ddd><x><y/></x> </ccc:ddd></>) gc()");
tryItOut("/*for..in*/for(var prototype in ((({}).__lookupGetter__)(<y><z/></y>)))const __count__ = this, __noSuchMethod__ = __proto__;");
tryItOut("with({}) return __noSuchMethod__ = <x><y/></x>;");
tryItOut("L:do {continue ;{(4.); } } while(((function  __noSuchMethod__ (__noSuchMethod__) { return <xxx>{__parent__}</xxx>.(\n<x/>) } )()) && 0);");
tryItOut("/*for..in*/for(var [prop, prototype] = new [1,2,3,4].map((undefined ? <y><z/></y> : __noSuchMethod__),  \"\" ) in ([[]])(this) = prototype.(*)) return;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*for..in*/for([__parent__, constructor] = function ([y]) { } ? <><x><y/></x></> : <y><z/></y> in *) L:if(undefined) { if (<><x><y/></x></>) export *;} else ;");
tryItOut("/*for..in*/for(__count__ = [15,16,17,18].filter(function(y) { yield y; ({});; yield y; }, undefined\n) in ) {/*for..in*/for(const prototype = __noSuchMethod__ in ) {throw this;gc() } }");
tryItOut("with({prop: __count__\n}){yield; }");
tryItOut("throw __parent__;");
tryItOut("with({constructor: [([this]) :: (({ prototype: __count__.__iterator__, prop: ({ __proto__: [__count__, , __parent__] }) }) = <><zzz> /* Comment */<y><z/></y></zzz></>) if (0)]}){while((case *::*: (*::*);default: return 1e81 << __iterator__;case 4: break; var __parent__ = window, constructor =  /x/ ;break; ) && 0)continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in false) {export *; }");
tryItOut("/*for..in*/M:for(const __iterator__ = let (__noSuchMethod__, __noSuchMethod__ = *) (yield <y><z/></y>) << <x><y/></x> in (let (__parent__ = __parent__, __iterator__) arguments) .@ this ? ({}) : __noSuchMethod__) {return;return <><x><y/></x></>; }");
tryItOut("/*for..in*/for([constructor, __iterator__] = (@foo -= 0x99) in (-0)) gc");
tryItOut("export *\n(prop\f.__iterator__)");
tryItOut("/*for..in*/for(const __parent__ in (( '' )(0.1.constructor = <x><y/></x>)))continue M;");
tryItOut("{function(y) { yield y; @foo; yield y; }(window).watch }");
tryItOut("if(__parent__.prop) export prop; else  if (@foo) {var __proto__ = *::*, __count__ = 3; } else __iterator__");
tryItOut("L:if([[], , , __iterator__, __iterator__] = this.(<><x><y/></x></>).call *= false if (true)) { if (this.zzz.zzz) throw StopIteration;} else {(<x/>); }");
tryItOut("/*for..in*/L:for(const ({ x::prototype: prototype }) in <><x><y/></x></>) throw <y><z/></y>;");
tryItOut("let(prop) ((function(){throw constructor;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let  > <x><y/></x>.isPrototypeOf(<x><y/></x>).__count__ in [1]) {(new Function(\"({}).hasOwnProperty\"))\nyield;\nyield break ;; }");
tryItOut("L: L: gc()");
tryItOut("/*for..in*/for(__count__ = <x/> in undefined) function  __proto__ () { yield <x><y/></x> } ");
tryItOut("/*infloop*/L:for(var __iterator__ = this;  /x/ ;  \"\" ) {const constructor, constructor; }\n");
tryItOut("let(prototype) ((function(){for(let y in [5,6,7,8]) {}})());");
tryItOut("/*infloop*/for(({ \fyield: [__iterator__] }/*\n*/) = <zzz> '' </zzz>; (#0=*); [1,2,3,4].slice) {; }");
tryItOut("/*for..in*/for(const constructor.__noSuchMethod__ in <x/>) {;false; }");
tryItOut("if( /x/g ) export *; else export *;");
tryItOut("with({__proto__: [<><x><y/></x></>].some((try { break M; } catch(prop) { var  =  /x/ , __count__ = [[1]]; } finally { {} } ).apply).throw(3).valueOf(\"number\")})return;");
tryItOut("yield .hasOwnProperty(\"__iterator__\");");
tryItOut("prototype = constructor([1,,].propertyIsEnumerable(\"constructor\"));");
tryItOut("/*infloop*/while(new ([z1,,])(__iterator__))if('fafafa'.replace(/a/g, eval))  else  if ( '' \n) return;");
tryItOut("if(new ( '' )(undefined) % ((<x><y/></x>)[*])) ; else  if (<y><z/></y>.__lookupSetter__(\"function::__iterator__\")) {<y><z/></y>;break ; }");
tryItOut("/*infloop*/for([,,]; 3/0; this) {{}break ; }");
tryItOut("/*for..in*/for(const __iterator__ = <x/> in <><x><y/></\fx></>) (*::*);");
tryItOut("let (constructor, __parent__) { var __proto__ = case 1: yield <y><z/></y>;break; default: 'haha'.splitbreak; case *: case 3: case 0: gc()case 6: undefined;break; ; }");
tryItOut("/*for..in*/for(let (__count__ = true)((__proto__ = #3={a:#3#}.__proto__)) in ((eval)([1,,] for (this['__count__'] in <><x><y/></x></>.throw(undefined)) if (__iterator__)))){return; }");
tryItOut("let (prototype) { /*infloop*/for(<><x><y/></x></>; this; constructor) __noSuchMethod__ = (function ([y]) { })(); }");
tryItOut("return;");
tryItOut("do /*infloop*/while(([,] < this)){if(<x><y/><\t/x>) export <x/>; else  if ((-1)) let prototype, __count__; else {yield window; }gc() } while(() && 0);");
tryItOut("return (<x/>.__lookupGetter__(\"__noSuchMethod__\"));");
tryItOut("<x><y/></x>;");
tryItOut("/*infloop*/for(var constructor; new /a/gi((new (<x/>\n)((<><x><y/></x></> ? __iterator__ : 0/0).@foo, (function ([y]) { } ? <x/> : <><x><y/></x></>))), (__count__)); (<><x><y/></x>< |= this)) export *;");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__) { throw __iterator__;");
tryItOut("throw __count__;");
tryItOut("L: {;( \"\" ); }");
tryItOut("throw StopIteration;return;");
tryItOut("var __count__ = <x><y/></x>, constructor = <> set __parent__ __noSuchMethod__ (constructor) { return this } </>\n");
tryItOut("{while((true) && 0){new Function }Math.pow }");
tryItOut("L: {gc() }");
tryItOut("switch( '' ) { default: ;case __proto__ = <x><y/></x>: return *::*;case 3: var prop;break;  }");
tryItOut("/*infloop*/for(var __parent__; prop <<= <x><y/></x>; (new Date())) {return <><x><y/></x></>;return  /x/ ; }");
tryItOut("{if(false) { if (try { gc() } catch(prop if window) { export *; } catch(__noSuchMethod__) { gc() } finally { return; } ) continue ; else {export __proto__; }}with({x::__proto__: <x><y/></x> & 1.2e3.yoyo((p={}, (p.z = {})())\n)}){if(undefined) { if (<><x><y/></x></>) {return;return; }} else yield; } }");
tryItOut("(-0);");
tryItOut("__parent__ = window, set = this");
tryItOut("L:if(\t#1=({prototype: (new (<><x><y/></x></>)() for each (__noSuchMethod__ in window) for each (prototype in prototype))})) if(*) gc() else  if (__iterator__ = <><x><y/></x></>) {gc()yield; }");
tryItOut("return ;");
tryItOut("M:while((({ __count__: __count__ }) = gc) && 0){yield <x/>;throw this; }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("break L;");
tryItOut("throw __parent__;");
tryItOut("{const __proto__;/*infloop*/M:for(let __iterator__;  '' ; [,,]) prototype }");
tryItOut("/*for..in*/for(let (({ __proto__: __count__, __noSuchMethod__: __proto__ }) = ({ __noSuchMethod__: prototype })) in ((function(y) { yield y; {}; yield y; })(new (gc)(__parent__ = (this.__defineSetter__(\"prop\", gc)), yield true)))){}");
tryItOut("M:if(undefined) {/gc()return  \"\" ; } else  if (0) {(0x99);return; } else \n{export prototype; }");
tryItOut("{prop, constructor = [z1]; }");
tryItOut("{export __count__;(prototype).watch }");
tryItOut("/*infloop*/L:for(let [({ __proto__: [({ constructor: ({ __parent__: ({ prop: __count__, prop: __noSuchMethod__ }) }) }), , [({ x::__proto__: prop, __proto__: __iterator__ }), [], , ]], function::__count__: ({ window.__parent__: ({ __parent__: [], prototype: ({ __iterator__: constructor, constructor: ({ __count__: x::__parent__ }) }) }), __parent__: prop }) }), \f] = yield yield ([15,16,17,18].filter('haha'.split, this)); <x><y/><\f/x>.(<x/>); constructor) {/*infloop*/M:do ; while(\f<><x><y/></x></>()); }");
tryItOut("/*for..in*/for(constructor = prop = undefined in <xxx>{__iterator__}</xxx>.(<><x><y/></x></>.unwatch(\"prop\"))) M:while((this) && 0){continue L; }");
tryItOut("M:with({__parent__: eval(\"<x><y/></x>\", __proto__)})if(__noSuchMethod__) {yield;try { throw this; } catch(__iterator__ if (function(){let __count__ = undefined, __count__ = <!--yy--> = window;})()) { export *; } catch(<x><y/></x>) { export __noSuchMethod__; }  }\n");
tryItOut("/*infloop*/do ; while( '' .unwatch(\"function::__parent__\") >>  \"\" );");
tryItOut("if(new Date(<x><y/></x>, <x><y/></x>)) { if ((this)[ /x/g ]) {return window;let delete = 3, __proto__ = <x/>; } else {yield <x><y/></x>; }}");
tryItOut("/*infloop*/while(undefined){__proto__, __iterator__ = <><x><y/></x></>;gc() }");
tryItOut("L: export __iterator__;");
tryItOut("with(new new Function\f())<x><y/></x>;");
tryItOut("L:if((prop = function(q) { return q; })) { if () {throw null; }} else throw <x><y/></x>;");
tryItOut("yield;\n/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in <><x><y/></x></>) yield -0;\n\nwith(*::*)gc()");
tryItOut("if(((p={}, (p.z = (new (/a/gi)(this, (function ([y]) { })())))()))) { if (window.__lookupSetter__(\"prototype\")) if(__iterator__)  else  if (@foo) yield [1,,]; else \tgc()} else {/*infloop*/for([11,12,13,14].map; (@foo != <><x><y/></x></>); constructor.__proto__ = <><x><y/></x></>) {throw window;function  __noSuchMethod__ (__count__, __noSuchMethod__) } }");
tryItOut("if((#2=prop)) { if ( <= this.zzz.zzz) break M;} else {var __count__, prototype = <x><y/\f></x>;export __parent__; }");
tryItOut("/*infloop*/do //h\n{yield;\n__parent__ = 1.3;\n } while(@foo--);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const this in __count__['prototype'] in (__proto__ = <y><z/></y>)) throw <><x><y/></x></>;");
tryItOut("switch(-1) { case +<x><y/></x>: ; }");
tryItOut("/*for..in*/L:for(const [function::prop, __iterator__] =  /x/ .__proto__ in (__noSuchMethod__.__iterator__ getter= (1 for (x in [])))) (1e81);");
tryItOut("M:if(__parent__ = false) {prototype = 0.1;export prop; } else {export *; }");
tryItOut("continue M; const prototype;");
tryItOut("/*infloop*/M:for(const [] = eval(\"L:with(__iterator__ = __iterator__.@foo){yield;(<><x><y/></x></>); }\",  '' ); (function  constructor ()1e-81 ? __parent__ : <x><y/></x>)(<x><y/></x> >>= true, [,,] * <x/>); (new (prototype ? prop.constructor setter= Function : 'fafafa'.replace(/a/g, gc))())) {L: {return; }if(eval(\"<><x><y/></x></>\", <y><z/></y>)) { if (<><x><y/></x></>) export *; else return this;} }");
tryItOut("prototype, constructor = window;");
tryItOut("/*infloop*/for(var __iterator__ = 0.1 = __proto__.(undefined.__lookupGetter__(\"prototype\")); (1e4.propertyIsEnumerable(\"\")); Object(<y><z/></y>)) {'haha'.splitconst __iterator__, __parent__; }");
tryItOut("if(#1=<x><y/></x>) { if (#3={a:#3#}) {gc(){} } else gc()}");
tryItOut("/*for..in*/for(const function::set in ((function  constructor (__parent__) { gc() } )((-1).call(([,,z1]).call(<y><z/></y>, ), ))))@foo;");
tryItOut("L:if(function (__count__, constructor) { yield function::prototype <= 1.3 } (('fafafa'.replace(/a/g,  /x/ )), 0/0)) {let __proto__, prototype; } else  if (__count__ = constructor) return;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((({}).__lookupGetter__)((__count__.__iterator__ setter=  \"\" ) ? true && __iterator__ : ({__count__:  \"\" })))){ do  }");
tryItOut("/*infloop*/for(var prototype; <x/> >>>= \"\"  & ( /x/  ? 0.1 :  \"\" ) === (<><x><\ty/></x></>.__defineGetter__(\"prototype\"\t, (( \"\" ).watch).call)) /  '' ; ({ __count__: get, prototype: ({ prop: prototype, prop: __parent__ }) }) = (p={}, (p.z = <x/>)())) {yield;/*infloop*/for( /x/g ; undefined; prop) {var prop = <y><z/></y>, prototype;yield <x><y/></x>; } }");
tryItOut("gc() const x::__count__;");
tryItOut("gc()");
tryItOut("{yield __parent__;let prop; }");
tryItOut("const __iterator__\nbreak L;");
tryItOut("L:if(<bbb xmlns=\"__parent__ = <y><z/></y>\">yyy</bbb> == <x/> * __parent__ = constructor) {/*infloop*/for(let __iterator__ = window; __parent__; window) return *; }");
tryItOut("return 3.141592653589793;");
tryItOut("{var prototype, __parent__ = *::*; }");
tryItOut("let (prop = 0/0(Math.sin =  /x/ , (new <><x><y/></x></>(*::*))), __iterator__) { var __parent__ =  \"\" ; }");
tryItOut("L:if(this.__defineGetter__(\"<xxx {prop}={(eval(\\\"(-1);\\\", <y><z/></y>))} />\", function  constructor (__iterator__, __parent__) { var __parent__ = @foo, __iterator__; } ){let (prototype) { ; } } else {yield undefined; }");
tryItOut("L:if(yield <><x><y/></x></>) {{if( '' ) gc()({}).hasOwnProperty } } else  if (__noSuchMethod__ = <>@foo<\f/>) /*for..in*/M:for(var null in <><x><y/></x></>) if(x::__iterator__) var function::prop =  \"\" , __proto__ = __iterator__; else  if (this) throw this; else {M:if(this) {yield <x><y/></x>;prop = <x><y/></x>; } else  if (true) {;break M; }export *; }");
tryItOut("<zzz>this</zzz>['prop'] = __proto__;");
tryItOut("break ;\n/*infloop*/for(({ __parent__(__iterator__): [__iterator__], prototype: ({ prototype: __noSuchMethod__ }\t) }) = ({ for each (__count__ in null) for (__parent__ in prototype).__parent__ setter= Function: (this)\f.call([[]], __noSuchMethod__),  set __count__ __count__ () { <x><y/></x>; }  }); -1; __count__ = (prop|=({}))) {M:if(1e-81) {return;({}).__lookupGetter__ } }\n const __proto__;");
tryItOut("(__proto__)");
tryItOut("switch(*) { case 2: /*infloop*/do yield while(prop = [[[]]].some((new Function(\"export *;\"))));break;  }");
tryItOut("({}).__lookupGetter__");
tryItOut("const __count__ = <><x><y/></x></>, function::__iterator__ = <x><y/></x>\nthis.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("return; const constructor;");
tryItOut("do {if(this.zzz.zzz) {; } } while((({__count__: (__noSuchMethod__.(gc())) })) && 0);");
tryItOut("with(this){__noSuchMethod__ = [,,z1]; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in false) {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <><x><y/></x></>) gc() }");
tryItOut("/*for..in*/for(let [prototype, __parent__] = new RangeError().eval(1e-81) in prototype =  \"\" ) { }");
tryItOut("/*infloop*/for(const __noSuchMethod__;  \"\"  >>>=true; ([<><x><y/></x></> for (__proto__ in prototype)]) >>>=(eval(\";\", (__iterator__)[__noSuchMethod__]))) {if(<x><y/></x>) { if (__parent__) throw <y><z/></y>;} else {export prototype; } }");
tryItOut("L:with( ''  .@x:: <y><z/></y>)export *;");
tryItOut("return  '' ");
tryItOut("return new ((1 for (x in [])))([15,16,17,18].some(<><x><y/></x></>, 3.141592653589793) !== prototype) > __parent__.( ''  >=  /x/ );");
tryItOut("if(undefined) {if(function ([y]) { } < <><x><y/></x></>) { if ( /* Comment */{}) {prototype = <x/>; }} else __parent__; } else  if (RegExp()) /*infloop*/while(({})){throw undefined; } else M:if( '' ) <!--yy-->; else {export __noSuchMethod__; }continue ");
tryItOut("L:while(((p={}, (p.z = <y><z/></y>)()) >>>=<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>) && 0){; }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = (__iterator__ = __parent__.prototype); (__parent__ = [z1]) || undefined; 3/0) let __parent__ = undefined, __proto__;");
tryItOut("for(let y in [5,6,7,8]) return (__noSuchMethod__ = (p={}, (p.z = <x/>)()));");
tryItOut("L:if([<><x><y/></x></> :: window ? ((uneval(this.__defineSetter__(\"__proto__\", ( \"\" ).__defineSetter__)))) : yield (constructor %= <x/>) for (yield ([1,2,3,4].slice).call(<><x><y/></x></>, <x><y/></x>) in (*::*.isPrototypeOf/*\n*/(<x><\ty/></x>))) for ([] in *::*) if ([1,,])]) {constructor = <x><y/></x>;/*for..in*/for(const prop in 0) export function::__count__; }");
tryItOut("/*for..in*/M:for(const __proto__ in (('haha'.split)(*))){let __parent__ = <x><y/></x>; }\n;\n");
tryItOut("return;");
tryItOut("continue ;\nexport prototype;\n");
tryItOut("");
tryItOut("/*infloop*/do  { yield; }  while( { yield ({constructor getter: 'haha'.split }) }  = let (__proto__ = [[1]]) window);");
tryItOut("for(let y in []); const __iterator__;");
tryItOut("return false\n");
tryItOut("/*for..in*/for(var prototype in ((function(q) { return q; })((__proto__.__iterator__)))){;gc() }");
tryItOut("if(__noSuchMethod__ = (new (Function)(<><x><y/></x></>, @foo).@foo)) ({}).hasOwnProperty else  if (.2.__iterator__) {while(([[]]) && 0)function(y) { yield y; return;; yield y; }{yield <x><y/></x>; } } else { }");
tryItOut("/*infloop*/while((#1=[ /x/g ])){Math.sin }");
tryItOut("/*for..in*/__parent__\nM:do {yield;return; } while((window) && 0);\n");
tryItOut("/*for..in*/for(__proto__ = @foo /= prop in ( \"\"  >= this.propertyIsEnumerable(\"__iterator__\"))) {/*for..in*/L:for(var window in 1e81) {const prop, constructor; }gc() }");
tryItOut("export __noSuchMethod__;export *;");
