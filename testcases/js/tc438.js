tryItOut("L: throw this.__defineSetter__(\"__count__\", <><x><y/></x></>);");
tryItOut("/*infloop*/M:for(__parent__; (eval(\"throw this;\", 0.hasOwnProperty(\"__proto__\"))); (prop =  /x/g )) {/*for..in*/for(let __iterator__ = prototype-=<><x><y/></x></> in  \"\" ) let constructor\n/*infloop*/do return <x/>; while(1e+81 ^= <x><y/></x>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__(\tfalse) in true) {export *; }Function");
tryItOut("with((p={}, (p.z = let (prototype = <x><y/></x>, prototype = <x><y/></x>) (undefined.watch(\"__count__\", (new Function(\"yield;\")))))()))/*infloop*/for(__proto__; <><x><y/></x></>; *::*) {<y><z/></y>; }");
tryItOut("({ __parent__: __count__ }).constructor = __proto__;");
tryItOut("let prop;");
tryItOut("__count__");
tryItOut("let (__proto__) { throw case <y><z/></y>: case <x><y/></x>: break; break; break; case <><x><y/></x></>: (1.2e3);break; case 3: break; ; }");
tryItOut("this.zzz.zzz;");
tryItOut("{([,,]).__defineSetter__{} }");
tryItOut("/*for..in*/for(const \f__count__ in <><!--yy--></>) {const __iterator__, __proto__ = -1\nreturn\nwith((((true for (__iterator__ in <y><z/></y>))).propertyIsEnumerable(\"constructor\"))){ } }");
tryItOut("/*infloop*/while(( /* Comment */[,,].unwatch(\"__iterator__\") for (prop.prototype in  /x/g ) for each (constructor in <><x><y/></x></>) for each (__proto__ in null)))throw this;");
tryItOut("let (({ prop: __proto__(this.zzz.zzz), prop: ({ prototype: ({ __iterator__: ({ __parent__: ({ prop: prototype }), __iterator__: ({ __iterator__: __parent__ }) }), __proto__: constructor }), constructor: ({ __iterator__: prototype }) }) }) = (#2=[<><x><y/></x></>] > 1e4.hasOwnProperty(\"constructor\")), prototype) { var \f__proto__ = false; }");
tryItOut("/*infloop*/for(const constructor; this.__defineSetter__(\"__noSuchMethod__\", <><x><y/></x></>); ({ __proto__: [,  /* Comment */<x><y/></x>.prototype], prototype: ({ prop: ({ __count__: ({ let: ({ __parent__: prototype, prop: prop }) }), __count__: [({ __noSuchMethod__: __count__, prop: constructor }), , , ({ prototype: [, , ], __count__: __parent__ })] }) }) }) = (Function).call((--(<><x><y/></x></>.__noSuchMethod__)), __proto__, let (__parent__ = *::*) undefined)((@foo @ []))) {{/*infloop*/M:do [,,z1]; while(0.1);do {;{} } while(( '' .yoyo(this)) && 0); } }");
tryItOut("/*for..in*/L:for(var constructor = ((1 for (x in []))) in (Number())) ;");
tryItOut("if((gc).[__noSuchMethod__ for (prototype in [1,2,3,4].map)]) {yield; }");
tryItOut("L: {export prototype;export __noSuchMethod__; }");
tryItOut("let (constructor = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((uneval(({a2:z2}).valueOf//h\n(\"number\"))))) { \fM:with(new Boolean(@foo)){const __parent__; } }");
tryItOut("M:if(('fafafa'.replace(/a/g, Math.sin))) {export *; } else  if ([]) {export *; }");
tryItOut("if(*.unwatch(\"__iterator__\").@foo.yoyo((let (__iterator__ = <><x><y/></x></>, prototype = <><x><y/></x></>) \x7f if (<x><y/></x>)))) /*infloop*/L:for(var prototype; ((@foo for (__count__ in <x><y/></x>))); ++1e81) {const __proto__;return *; } else  if (constructor = <><x><y/></x></>) ");
tryItOut("L:if(prop.prototype = constructor) { if (yield  '' .yoyo((null >>> __parent__))) {/*for..in*/for(let [prop, prop] =  /x/g  > [,,] in <x><y/></x>) {return *::*;\f{(undefined); } } } else {((-1)); }\n__parent__ = <y><z/></y>, __proto__ = <y><z/></y>;}");
tryItOut("if(<><x><y/></x></>) export *; else  if (<x/>) { /x/g  }");
tryItOut("if(( '' (<x/>, [1]))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in null) __proto__: thisyield; }");
tryItOut("M:with(((function (prop) { return [[1]] } ).call(* = 3/0, (window.__lookupSetter__(\"__count__\")))))export *;");
tryItOut("throw prototype");
tryItOut("{constructor;return; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <x><y/></x>) {const __proto__ = <x/>, __noSuchMethod__; } \"\" ; }");
tryItOut("L:switch(((<x><y/></x>)() /  /x/g .__iterator__ = *::*.__lookupGetter__(\"__noSuchMethod__\"))) { case (<><{__noSuchMethod__}></{__noSuchMethod__}><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)[__noSuchMethod__ || <><x><y/></x></>]\t: with((<x><y/></x>)[constructor = __proto__])var __proto__, __proto__;break; /*infloop*/for(prop; (x::__noSuchMethod__.prototype); export *\f) {return; }case 7: break;  }");
tryItOut("L:\tif(<x><y/></x>.__lookupGetter__(\"__parent__\") !== (__parent__ = @foo)) {throw __parent__; } else  if (((Math.sin)(window).@foo)) {(prototype); } else {switch(( /* Comment */<x><y/></x>)) { default: return;break; case window * <><x><y/></x></>: throw false;break;  }return; }");
tryItOut("while((this) && 0)<x><y/></x>;");
tryItOut("return;");
tryItOut("L: {return; }");
tryItOut("/*for..in*/L:for(var constructor in ((*::*)( /x/ )))gc()");
tryItOut("{(<x><y/></x>); }");
tryItOut("continue L;");
tryItOut("/*for..in*/for(let [__parent__, constructor] =  /x/  in ({prop: [11,12,13,14].sort})) --\n* /= <xxx>{constructor}</xxx>");
tryItOut("M:if(eval(\"null\", <y><z/></y>) % (\f(prototype)())) L:with((let (__count__ = __noSuchMethod__) <x/>))return  \"\" ; else  if ((( \"\"  ? prototype : @foo)).__defineSetter__) L:if(typeof this.__defineSetter__(\"constructor\", Math.pow)) { if (<x><y/></x>.valueOf(\"number\") & window @ <><x><y/></x></>) let __iterator__; else __proto__}");
tryItOut("/*infloop*/while(eval(\" \\\"\\\" \", ~ ''  % <x><y/></x>)){/*infloop*/for(let prototype = [window].map(function  __iterator__ (constructor) { yield prototype } ); (-0) & __count__; new ( '' )(<x/>, <y><z/></y>)) /*for..in*/for(let __parent__ in ((gc)(*::*))){export prop; } }");
tryItOut("/*infloop*/do yield new __noSuchMethod__(); while((constructor = __count__: 0/0.constructor = export __count__));");
tryItOut("with({__count__: constructor}){\f{} }");
tryItOut("while((<x><y/></x>.(<><x><y/></x></>)) && 0){yield;L:if(undefined) return __noSuchMethod__; }");
tryItOut("if(__parent__[[,,]]) {; } else  if (this.__defineSetter__(\"__proto__\", Math.sin).isPrototypeOf(<xxx>{__parent__}</xxx>.(__parent__ = __iterator__)).watch(\"constructor\", Math.pow)) {while((*) && 0){; } } else {__proto__\nyield\nreturn; }");
tryItOut("{}\n__noSuchMethod__\n");
tryItOut("if(<><x><y/></x></> != <x><\ty/></x>.@foo) { if ((<><x><y/></x></> .. window)) with({__proto__: *::*}){var __proto__, prop = *;break M; } else {throw @foo;return false; }}");
tryItOut("/*infloop*/[,,].constructor");
tryItOut("throw StopIteration;");
tryItOut("let (__parent__) { if(<x/>) { if (<><x><y/></x></>) {export *; }} else export *; }");
tryItOut("{(1e81);M:switch(*::*) { case 2:  } }");
tryItOut("throw prop;");
tryItOut("yield this; const prop;");
tryItOut("{/*infloop*/for(*::*;  '' ; undefined) yield <y><z/></y>; const constructor; }");
tryItOut("/*infloop*/for(const __iterator__; <x/>; (function ([y]) { })()) {export *; }");
tryItOut("{L:if(1e4) (__parent__); else export *; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("if(this) {return;var prototype = <><x><y/></x></>; } else continue ;");
tryItOut("/*infloop*/for(let [, , , []] = @foo.watch(\"__proto__\", (/a/gi).call); <x><y/><\t/x>.prop = undefined; __iterator__ = this) {(Function).applyexport *; }");
tryItOut("Math.powreturn;");
tryItOut("<x><y/></x>");
tryItOut("window['__count__'] = __parent__.prototype;");
tryItOut("if(__count__.__iterator__) { if (new (/a/gi)()) {prop;yield; } else ;}");
tryItOut("/*infloop*/L:for(let __parent__ = 'haha'.split(); delete []; (<x/>\n)) var __proto__, <y><z/></y>;");
tryItOut("this.zzz.zzz;");
tryItOut("if((!*.__defineSetter__(\"__iterator__\", 0/0))) {__noSuchMethod__ = 3/0.propertyIsEnumerable(\"prototype\"), [, , , __proto__, prototype] = #0=033; } else  if (window(Array(__count__-=0.1))) {export *; } else __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __count__ in eval(\"yield;\",  /x/ )) {gc()gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ([<><x><y/></x></>].sort(Function))(((window for each (let in 1.2e3)))) in #1#) {var __parent__, prop = *::*;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (prototype) in #3={a:#3#} | __noSuchMethod__) ");
tryItOut("return <> \"\" .__lookupGetter__(\"x::__proto__\")</>\nL:if((new /a/gi(<><x><y/></x></>, <x><y/></x>))) {gc()return  /x/g ; } else  if ((*)[-1]) {/*infloop*/while(/*\n*/@foo) } else {throw ({a2:z2}); }");
tryItOut("let(constructor =  /x/g , __noSuchMethod__ = *) ((function(){throw #1#;})());");
tryItOut("var prototype;");
tryItOut("yield new [1,2,3,4].map();");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <><zzz>1.3</zzz></> in *::*.watch(\"constructor\", new Function)) ;");
tryItOut("throw window;");
tryItOut("__proto__ = __parent__;");
tryItOut("if(__count__) { if (Iterator( /x/g ,  /x/ )) yield;} else {break ; }");
tryItOut("switch(<zzz>this</zzz>) { case 1: 'haha'.split }");
tryItOut("{/*infloop*/for(const __proto__; <><x><y/></x></>\t; this) {const __noSuchMethod__ = <y><z/></y>; }\n }");
tryItOut("with({}) { ({}).__lookupGetter__ } ");
tryItOut("{yield; }");
tryItOut("do {return; } while((window.__iterator__ = *::*\f) && 0);");
tryItOut("if( /x/g  ? <x><y/></x> :  '' ) yield [15,16,17,18].sort(({}).__lookupGetter__, <><x><y/></x></>); else if(-1) return;");
tryItOut("if((this.zzz.zzz)) {/*for..in*/for(const prop.prototype in (\f(Math.sin)(<><x><y/></x></> == <y><z/></y>))){export *;break M; } } else  if ([, , ({ __iterator__: \t({ __count__: ({ __proto__: __count__, __noSuchMethod__:  { yield  /x/  }  }) }), constructor: __parent__ }), ] = (prototype = ({}))) __parent__ = <><x><y/></x></>, prop; else {L:if(null) throw <><x><y/></x></>; }");
tryItOut("if(@foo) { if (<x><y/></x>) yield; else constructor = <><y//></x, prop =  '' ;}");
tryItOut("with({__noSuchMethod__: ([<><x><y/></x></>])})let __noSuchMethod__, __noSuchMethod__ = this;");
tryItOut("do (<x/>).__defineSetter__ while(('haha'.split(<><x><y/></x></>\r).throw(new (new Function(\"{}\"))())) && 0);");
tryItOut("L: {yield;let (__iterator__ = <x><y/></x>, __proto__ = <><x><y/></x></>) { var __proto__; } }");
tryItOut("with({}) with({}) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("if(new (Math.pow)([[1]], window)) 'haha'.split else  if ((<><x><y/></x></> :: false))  ''  else export *;");
tryItOut("{return 5.0000000000000000000000; }");
tryItOut("<y><z/></y>;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in @foo) (1.3);\n");
tryItOut("with(#0=[/a/gi]){ }");
tryItOut("/*infloop*/while(*)'haha'.split");
tryItOut("function  __count__ (prototype, let) { yield; } ");
tryItOut("var __count__, __proto__ = *;");
tryItOut("if(<><x><y/></x></> if (__parent__)) {export __noSuchMethod__;gc() } else  if ([new  \"\" (<x><y/></x>) *= (Math.sin).call( /x/ , )]) gc()");
tryItOut("/*infloop*/do {/*for..in*/for(__proto__ in <x/>) {export *; }(#3={a:#3#} || false); } while(<x><y/></x>.(prototype));");
tryItOut("M:if( /x/g \n) {/*infloop*/while(this){prototype; } } else  if ((this .@ (__proto__ = <><x><y/></x></>))) ;");
tryItOut("return;\nconst constructor = <><x><y/></x></>;\n");
tryItOut("/*infloop*/L:for(let ({ __iterator__: __proto__, __noSuchMethod__: ({ prop: ({ prototype: __iterator__, __noSuchMethod__: __noSuchMethod__ }) }) }) = window; ('fafafa'.replace(/a/g, function(q) { return q; }).__defineGetter__(\"__proto__\", /)); window in .function (constructor) { yield function(id) { return id } } .propertyIsEnumerable(\"__noSuchMethod__\")) return;");
tryItOut("yield <x/> ? arguments : .2;");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in #1=[#1#]) return;");
tryItOut("let (__parent__ = prototype = [[1]] /= <y><z/></y>) { break \n }");
tryItOut("/*for..in*/for(const prototype in this) {return; }");
tryItOut("__count__ = prop\n");
tryItOut("L: let (prop = window, __count__) { __count__ }");
tryItOut("/*for..in*/L:for(const __proto__ in (([1,2,3,4].map)(__iterator__.__lookupGetter__(\"__proto__\"))))export __iterator__;");
tryItOut("prop, __count__ = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype(<y><z/></y>) in false) {(__parent__);continue L; }");
tryItOut("if((__iterator__ = constructor)) { if (window = this//h\n) 3.141592653589793; else {var __proto__ = true, #1=[#1#] = *::*; }}");
tryItOut("var constructor = window;");
tryItOut("yield <\r><x><y/></x></>;export *;");
tryItOut("/*infloop*/L:while(window. '' .prop = (__iterator__.__iterator__, __iterator__)){yield <x><y/></x>;yield; }");
tryItOut("L: const __iterator__;\n([,,]);\n");
tryItOut("\fwhile((this.__defineSetter__(\"__count__\", (@foo).watch).watch(\"__proto__\", function(y) { yield y; function  prop (prototype) { return 4. } ; yield y; })) && 0)yield;");
tryItOut("/*for..in*/M:for(const prototype in __count__ + <y><z/></y>) prototype;");
tryItOut("if(<x><y/></x\f>.propertyIsEnumerable(\"prototype\")) { if (-false) <x><y/></x>;} else {(<x/>); }");
tryItOut("{yield <><x><y/></x></>;break L; }");
tryItOut("o");
tryItOut("switch((p={}, (p.z = constructor)())) { default:  }");
tryItOut("if(( \"\" [(throw true)])) {let prototype } else /*for..in*/M:for(let constructor in [[1]]) {const __noSuchMethod__ = <x><y/></x>; }");
tryItOut("/*infloop*/for(__noSuchMethod__; __parent__.__defineGetter__(\"__iterator__\", (1 for (x in []))); (p={}, (p.z = <x><y/></x>)())) {export prototype;return window; }/*\n*/");
tryItOut("{/*for..in*/M:for(let constructor in this) {prop = -3/0, prop; } }");
tryItOut("const __parent__, constructor;export __noSuchMethod__;");
tryItOut("__noSuchMethod__, __proto__");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("let (__proto__ =  /* Comment */<x/>, __count__ = (Exception(constructor.(<><x><y/></x></>),  \"\" ))) { /*infloop*/for(().throw(\nfalse.*); this; [.2 for ((<x><y/></x>); in ({a2:z2}))] for (__noSuchMethod__.__parent__ in prop)) {({}).hasOwnProperty } }");
tryItOut("/*for..in*/for(__noSuchMethod__ in [15,16,17,18].filter(4., (__count__.__count__ setter= new Function))) ;\n\nlet prop = __count__, prop = <x><y/></x>;\n\n");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = (uneval(<x/>)).propertyIsEnumerable(\"__iterator__\") in !(function::prop)(<x/>, -3/0)) {export *;yield {}; }");
tryItOut("/*for..in*/for(({ __proto__: prop, constructor: ({ __count__: ({ __proto__: __iterator__, __noSuchMethod__: __iterator__ }), __parent__: ({ __iterator__: __parent__, __parent__: prop }) }) }) in ((().call(window, ))((this.__defineSetter__(\"__parent__\", gc)))))<bbb xmlns:ccc=\"(__parent__ =  /x/g .__iterator__)\"><ccc:eee></ccc:eee></bbb>");
tryItOut("while(([\t, prototype] = <x><y/></x>.propertyIsEnumerable(\"__count__\").unwatch(\"__iterator__\")) && 0){yield; }");
tryItOut("/*infloop*/for(constructor; this; null) yield;");
tryItOut("yield @foo;");
tryItOut(";");
tryItOut("/*infloop*/do {export *; } while((new (({a1:1}))(window, *::*)));");
tryItOut("M:if((default: L: export __noSuchMethod__;break; return;case 4: case 0: Math.pow)(void (*.constructor = __count__))) {__parent__ = <><x><y/></x></>; } else switch(yield <y><z/></y>.prop) { default: let __count__; }");
tryItOut("/*for..in*/for(constructor in window) {export __proto__;case (prototype = <y><z/></y>): break ; }");
tryItOut("/*infloop*/do {(yield <x/>) const __noSuchMethod__; } while((@foo .@x:: <x/> ? this : undefined.__lookupGetter__(\"__iterator__\")));");
tryItOut("do prototype, setter; while((__parent__) && 0);export *\nL: {}");
tryItOut("while((<x><y/></x> /= 0.1 .@*:: []) && 0)/*infloop*/while([*].sort((this).watch)[this.__defineSetter__(\"__iterator__\", (false).watch)]){return; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in <><x><y/></x></>) <y><z/></y>;");
tryItOut("L: return (-0);");
tryItOut("return ({ __iterator__: ({ __parent__: __noSuchMethod__, prop: __noSuchMethod__ }) }) = (<><x><y/></x></>);");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("/*for..in*/L://h\nfor(let [__parent__, prototype] = __count__ * 0.1.__defineSetter__(\"__iterator__\", gc) in this) {__noSuchMethod__ = window//h\n; }");
tryItOut("let __parent__ =  /x/ ;");
tryItOut("L: gc()");
tryItOut("var __iterator__;");
tryItOut("L:do ; while(((function(q) { return q; })(3.141592653589793, <x><y/></x> ? 0/0 : true)) && 0);");
tryItOut(";");
tryItOut("with(new <x><y/></x>(++\t__proto__) for each (__count__ in function ([y]) { }) for (prototype in <x><y/></x>) if (<><x><y/></x></>)){export function::constructor;{} }");
tryItOut("");
tryItOut("switch(yyy) { default: if(*::*) {Math.pow } else return;return  '' ;break; gc() }");
tryItOut(";");
tryItOut("/*for..in*/for(var (prop.constructor)(([__iterator__, __proto__] = ({ __parent__: __iterator__, prototype: <><x><y/></x></> }))) in ((({}).__lookupGetter__)(prototype.prototype setter= Function .@ [window].sort((function  __noSuchMethod__ (__iterator__) { return <x/> } ).call)))){prop = (function ([y]) { })(); }");
tryItOut("(<><x><y/></x></>);\nlet __iterator__ =  '' , __noSuchMethod__ = (function ([y]) { })();\n\ndo {yield false;window } while((({//h\n set each()__parent__, __proto__: <x><y/></x> })) && 0);");
tryItOut("__noSuchMethod__\n");
tryItOut("const __count__ = <y><z/></y>, prop = true;");
tryItOut("with({x::__count__: *::*}){; }");
tryItOut("if(<x><y/></x>) gc() else yield <y><z/></y>;");
tryItOut("/*for..in*/for(prop.__parent__ in  \"\" ) {; }");
tryItOut("/*infloop*/do yield; while(<><x><y/></x></>);");
tryItOut("while((Boolean((uneval((<x/> & #3={a:#3#}))), <x><y/></x>.propertyIsEnumerable(\"__count__\"))) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(var  \"\" ['prop'] in @foo) M:with({__parent__: prototype})<><x><y/></x></>\n{/*infloop*/while(@foo){throw __parent__; } }");
tryItOut("{/*infloop*/for(var __iterator__; (function (__parent__, prototype) {  } )(__parent__, __noSuchMethod__) instanceof (eval(\"( \\\"\\\" .*)\", \nwindow)); (uneval(prop = -3/0))) {const prop; }/*infloop*/L:for(__count__; (<y><z/></y>.unwatch(\"__iterator__\") >>> ( '' ++)); <bbb xmlns:ccc=\"<x/> <<= <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>) while((3.141592653589793) && 0){continue ; } }");
tryItOut("L: gc()");
tryItOut("/*for..in*/M:for(const __parent__ = 0/0 ||  /x/  in <x><y/></x>) gc");
tryItOut("/*for..in*/for(var [__iterator__, prop] = new <><x><y/></x></> %  /x/g () in constructor, __proto__) {do {} while(([]) && 0); }");
tryItOut("/*infloop*/for(var function::prototype; ~; (constructor = constructor)) throw [z1];");
tryItOut("/*infloop*/do {if(Error(false, <x><y/></x>)) yield; else  if (__proto__ = ) {let __proto__; } else gc()switch(<><x><y/></x></>) { case 2: yield; } } while(({ get __noSuchMethod__ __iterator__ ()(p={}, (p.z = constructor)()),  get __parent__() { return 0/0 }  }));");
tryItOut("if(#1=[<x><y/></x>]) __iterator__;");
tryItOut("yield;;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in  /x/g .@*) ;");
tryItOut("L:if(prototype) {with(this) } else {<><x><y/></x></>; }");
tryItOut("/*infloop*/do {if((__iterator__)[ /x/g ]) { if (yield 0x99) yield  /x/g ;} else (<x><y/></x>).__defineSetter__ } while(3/0 if ());");
tryItOut("L:if(((Math.sin).call)) { if ([z1,,].__defineGetter__(\"__iterator__\", new Function)) yield __count__/*;} else {(<x><y/></x>);const __count__; }");
tryItOut("__parent__ = constructor;");
tryItOut("L: /*for..in*/for(const ({ __count__: __parent__ }) in ((function  __iterator__ () { return <><x><y/></x></>() } )(<><bbb xmlns=\"--<><x><y/></x></>\">yyy</bbb></>)))const constructor = @foo;");
tryItOut("with({__iterator__: (3/0 ?  /x/  : (function ([y]) { })().eval(--<><x><y/></x></>) ^= prototype = ({ __proto__: __iterator__ }))})constructor");
tryItOut("function () {  const __noSuchMethod__; }  const constructor;");
tryItOut("if(window instanceof [[1]]\f.@*) {if((({__count__: <x><y/></x>}))) let __proto__, __noSuchMethod__; else switch(<x/>) { case 3: throw <><x><y/></x></>;break; case __parent__: export constructor;break;  }this.zzz.zzz; }");
tryItOut("/*for..in*/for([__iterator__, prop] = <><x><y/></x></> in constructor) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (1e-81)(@foo) in __proto__) yield __count__;");
tryItOut("/*for..in*/for(let __proto__ in (({ prototype: __parent__ }).(<><x><y/></x></>.__defineGetter__(\"__iterator__\", function(q) { return q; })))) throw  *::* __count__;");
tryItOut("if((__count__ = true.hasOwnProperty(\"__count__\"))) {function(q) { return q; } } else /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__.constructor in __count__) {throw true;constructor }");
tryItOut("/*infloop*/default: break; case eval(\"(this.zzz.zzz)\", [this]): break; case prototype: break; break; ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ('fafafa'.replace(/a/g, [1,2,3,4].slice))['__count__'] in *--) {/*for..in*/L:for(prop in @foo) let __proto__; }");
tryItOut("/*infloop*/L:do {let __noSuchMethod__ = <y><z/></y>;(null); } while( '' );");
tryItOut("/*infloop*/for([({ prop: ({ __parent__: [({ prototype: constructor, __iterator__: __parent__ }), , ({ __proto__: __parent__ })], __count__: __parent__ }), __iterator__: *::*.watch(\"__count__\", gc) })] = <><x><y/></x></>\n; (false.throw(*)); yield ( /* Comment */<x><y/></x>.watch(\"__noSuchMethod__\", [1,2,3,4].map))) yield");
tryItOut("/*infloop*/L:for(*;  \"\" (); <{__parent__}><employee id=\"1\"><name>Joe</name><age>20</age></employee><bbb xmlns=\"3.141592653589793\"><ccc:ddd><!--yy--></ccc:ddd></bbb><x><y/></x> </{__parent__}>) {throw constructor;; }");
tryItOut("yield;");
tryItOut("prop.__proto__ setter= (*::*).watch.__iterator__\nyield @foo;\n");
tryItOut("if(new (Math.pow)()) {export *; }");
tryItOut("/*infloop*/while((new <><x><y/></x></>( '' )))L:if(window) { if (<x><y/></x>) {gc(){} }} else yield;");
tryItOut("throw __parent__;");
tryItOut("if(( /x/ .__lookupSetter__(\"__noSuchMethod__\"))) (__parent__, __count__); else  if (<><xxx {__parent__}={(return)} /></>) {(new Function(\"export prototype;\")) } else export *;");
tryItOut("/*for..in*/L:for(let prop in ((prototype = constructor)(this)));");
tryItOut("const gc();");
tryItOut("return *; const constructor;");
tryItOut("{/*infloop*/for(let __count__ = true; <y><z/></y>;  /x/g ) const prototype, __count__ = <y><z/></y>;let (constructor, constructor = [z1]) { const __noSuchMethod__, __parent__ = constructor; } }");
tryItOut("with({prototype: <employee id=\"1\"><name>Joe</name><age>20</age></employee>})return;");
