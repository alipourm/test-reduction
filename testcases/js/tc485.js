tryItOut("/*for..in*/for(const [prop, __parent__] = this in window) export __parent__;");
tryItOut("yyy\n\f\n\n<><x><y/></x></>;\n");
tryItOut("var __noSuchMethod__ = *::*; const __iterator__;");
tryItOut("__count__, __iterator__;");
tryItOut("throw prototype;");
tryItOut("const constructor, __count__\n/*infloop*/while(yield.__lookupGetter__(\"__noSuchMethod__\")){switch(constructor =  \"\" ) { default: __proto__break; break;  } }");
tryItOut("try { <x><y/></x>; } finally { const __count__, __noSuchMethod__; } ");
tryItOut("/*for..in*/L:for(const [\f*::*] in ((function(y) { yield y; while(( '' ) && 0)const constructor = this, setter = null\nbreak ; yield y; })(<y><z/></y>)))/*for..in*/for(let [function::__iterator__, __noSuchMethod__] = [[,]].map([1,2,3,4].slice) in [z1,,]) {gc() }");
tryItOut("return __noSuchMethod__.constructor setter= function(y) { yield y; {}; yield y; };");
tryItOut("throw function::__noSuchMethod__;");
tryItOut("/*infloop*/while(((__proto__.unwatch(\"__proto__\"))((gc(true)), <x><y/></x>)))/*infloop*/L:while(__proto__.constructor setter= default: __proto__, constructor;break; ){let constructor; }");
tryItOut("/*infloop*/M:for((function (constructor) { return {} } ).call(undefined.hasOwnProperty(\"__count__\"), ); #3={a:#3#}; (this.__defineGetter__(\"__iterator__\", {}))) {<ccc:ddd><!--yy--></ccc:ddd>return; }\n");
tryItOut("/*infloop*/do {({}).hasOwnProperty } while(([z1].__lookupSetter__(\"__noSuchMethod__\")));");
tryItOut("/*infloop*/M:for(var __proto__; @foo; [1]) {let __proto__, prop = window; }\n /x/ ;\n");
tryItOut("M:if(__count__ = #0=[<y><z/></y>]) { if (__proto__ = this) return this;} else gc()\nthrow this;");
tryItOut("yield;");
tryItOut("/*infloop*/for(({ __noSuchMethod__: ({ prop: [__parent__, ({ prop: ({ __parent__: ({ __parent__: __parent__, constructor: [, , __count__, __iterator__, __count__] }) }) })] }) }) = typeof const __proto__ = <y><z/></y>, prototype;  /x/ .yoyo(__proto__; *= ([15,16,17,18].map(({}).__lookupGetter__,  \"\" ))); (-1) == (prototype = (<><x><y/></x></> for (__count__ in window) .@x:: <x><y/></x>.([]))[1e4 >>= [,]])) /*infloop*/M:for(prototype; yield (().@*); __count__.__iterator__ getter= prop) {gc() }\nlet (constructor, function::prop) { __parent__ = {}, prop; }");
tryItOut("/*for..in*/for(const prototype in <y><z/></y>) {while((<><x><y/></x></>) && 0)yield  /x/ ; }");
tryItOut("let //h\n(constructor = eval(\"1.3\",  '' ) <= [false].map(eval), __parent__ = constructor[@foo]) { do ((-1)).__defineSetter__ while((<><x><y/></x></> <  /x/ ) && 0); }");
tryItOut("L: {export __proto__;let __iterator__; }");
tryItOut("for(let y in []);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>) return *::*; } const __noSuchMethod__;");
tryItOut("/*infloop*/do {0/0;/*for..in*/for(let __proto__ = (function(id) { return id }.__lookupGetter__(\"prototype\")) in <><x><y/></x></>) if(window) {throw prototype;\t0/0; } } while( /* Comment */* ?  \"\"  : constructor);");
tryItOut("return <x/>();");
tryItOut("/*for..in*/L:for(const (__parent__) in @foo) throw [];");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if((let =  \"\" )) { if ((p={}, (p.z = (yield <x/>))())) if(<><x><y/></x></>) null; else constructor; else {__count__ = 3; }}");
tryItOut("switch(({__parent__: <><x><y/></x></>})) { default: break; case 9: if(__noSuchMethod__ = 1e4.isPrototypeOf(\r(<y><z/></y>)[0])) export constructor;break; case 3: break; break; case this: case <x><y/></x>.__defineGetter__(\"__parent__\", Function):  }");
tryItOut("/*infloop*/M:for(this.zzz.zzz; [15,16,17,18].some(*, (__proto__.__proto__ setter= [1,2,3,4].slice)); (prototype.__proto__ = window &= false)) L:with({prototype: (window.@foo)}){export __count__;yield  '' ; }");
tryItOut("/*infloop*/M:for(constructor; yield *; window.yoyo(<><x><y/></x></>//h\n)) {__parent__ =  \"\" , __proto__ = false; }");
tryItOut("{const __proto__ =  '' , __noSuchMethod__ = __parent__ = false;[z1]; }");
tryItOut("{{(window); }{} }\nbreak ;\n");
tryItOut("return __count__.__proto__ = (yield <x><y/></x>); const constructor;");
tryItOut("if(__parent__ =  /* Comment */<x><y/></x>) {(constructor); }");
tryItOut("L:if((constructor = <x><y/></x>.let.yoyo(__iterator__ =  /x/g ))) return; else {switch((__parent__.prototype = false)) { case *::*: if(prop = (-1)) { if ( ''  <= 3) {return <><x><y/></x></>; }} else {Bconst __count__ = 033,  = (-0); }break; default: export *;break; case 0: L: {window; }break; case this: (__noSuchMethod__);export constructor;break; case 0: break; ( /x/ );break;  } }");
tryItOut("export constructor;");
tryItOut("*['__parent__'] = __noSuchMethod__;");
tryItOut("/*infloop*/while(<x/>){<x><y/></x> }");
tryItOut("/*for..in*/for(var constructor = [[]] in __count__) __noSuchMethod__;");
tryItOut("gc()");
tryItOut("let ([, , , , ], x::__count__) { L:if(function ([y]) { }[[,,]]) {return __iterator__; } }");
tryItOut("/*infloop*/M:do {let prop = [,,]; } while( \"\" );");
tryItOut("/*for..in*/M:for(const constructor = ({prototype: [1] }) in [15,16,17,18].sort(/a/gi, window)) if(++<x/>) { if (prototype >>>=<y><z/></y>) continue M; else var prop;}");
tryItOut("{return null;export __proto__; }");
tryItOut("try { let(__parent__, __iterator__ = <y><z/></y>) { this.zzz.zzz; } finally { throw delete; } ");
tryItOut("function  constructor (__count__) { return <y><z/></y> } ");
tryItOut("yield <y><z/></y>;");
tryItOut("/*infloop*/for(__count__; (!<x><y/></x> !== __proto__); var __count__, __parent__) {return <y><z/></y>;[z1]; }");
tryItOut("if((__iterator__.__parent__ getter= function (__parent__) '' )) {continue ; } else  if (*) yield #1=[#1#]; else {const prop = *::*\ngc()gc() }");
tryItOut("/*for..in*/for(var [prototype, __count__] = new  '' () in <y><z/></y>) let (__proto__ = constructor, __proto__ = <y><z/></y>) { let (__count__ = <y><z/></y>, __iterator__) { (@foo); } }");
tryItOut("/*infloop*/do /*infloop*/for((new (gc)(-0, *)); (([0/0].some(<><x><y/></x></>)) * 1e4 >>>=[[1]].__defineGetter__(\"constructor\", *::*)); (__iterator__.prop setter= eval)) {if(<y><z/></y> -= <><x><y/></x></>) { if (this.__defineGetter__(\"function::__count__\", function (__parent__)<y><z/></y>)) var prototype;} else {(function ([y]) { })()return -3/0; } } while(window.valueOf(\"number\"));");
tryItOut("if(null.hasOwnProperty(\"__noSuchMethod__\").valueOf(\"number\")--) export __noSuchMethod__; else {; }");
tryItOut(" { let constructor, constructor = this; }  const __count__;\nthrow *::*;\n");
tryItOut("{yield;/*infloop*/for(let __parent__; ([,,]\n); eval(\"undefined\",  /x/g )) export *; }");
tryItOut("if(((p={}, (p.z = this)()) if ([[]]))) L: {} else {/*for..in*/for([, ] in  /x/ ) {[1,2,3,4].mapL:do 1e-81; while(( /x/g ) && 0); } }");
tryItOut("/*infloop*/for(({ prototype: [__parent__, , [], __proto__, ], __proto__: ({ prototype: __count__, __proto__: ({ __count__: [], __parent__: __count__\t.__proto__ }) }) }) = yield this; ({}) - <x><y/></x>.hasOwnProperty(\"__iterator__\"); (<bbb xmlns=\"false\"></bbb>.propertyIsEnumerable(\"prop\")).__defineSetter__(\"function::__iterator__\", new Function)) {export *;* }");
tryItOut("if([3.141592653589793 if (3/0)]) const __iterator__; else  if \f((-1) & -0) {return __count__;; }");
tryItOut("try { __noSuchMethod__; } finally { yield 0/0; } ");
tryItOut("do {with( \"\" .constructor){;gc()export *; } } while((yield (prototype)[([,,z1].valueOf(\"number\") .@ (<x><y/></x>)(window, <x><y/></x>))]) && 0);");
tryItOut("if(gc()) { if (__parent__.__noSuchMethod__ getter= true) {export __count__; } else }");
tryItOut("/*for..in*/for(__proto__ in (([1,2,3,4].map)(-'fafafa'.replace(/a/g, Math.pow)))){/*infloop*/while(<x><y/></x>){var __proto__, __noSuchMethod__ = __count__; }yield; }");
tryItOut("{if((uneval(__iterator__ = null))) { if (__parent__) {{<><x><y/></x></>{return *; } }let (prototype = this, __parent__ = <y><z/></y>) { throw undefined; } } else return;} }");
tryItOut("if(( ? <><x><y/></x></> : 1e81)\n && (window)[(this instanceof 033)]) { if ((eval(\"G\", 0.__lookupSetter__(\"__iterator__\"))) ? ((yield true))\n : (new ((try { ; } catch(__iterator__) { yield __iterator__; }  ^ __count__))( /* Comment */(window.__lookupSetter__(\"prototype\")), (__proto__)()))) {if(<y><z/></y>) { if (prototype = __proto__) {function::__noSuchMethod__ = <y><z/></y>; }} else /*for..in*/L:for(var [constructor, ] = ((3.141592653589793() for each (prototype in  \"\" ) for (__count__ in <x><y/></x>))) in <x><y/></x>) {let (__parent__) { export *; } } }} else <></>");
tryItOut("/*for..in*/L:for(let __parent__ in let (__proto__) <x><y/></x>) {{}/*infloop*/while(({a1:1}))throw <x><y/></x>; }");
tryItOut("/*for..in*/M:for([__noSuchMethod__, prototype] = <><x><y/></x></> in window) Math.pow const __iterator__;");
tryItOut("__iterator__ = constructor;");
tryItOut("/*for..in*/for(const \n(RegExp()--.@*).prop in ((Function)(prop.__proto__ = eval(\"yield\\nvar __noSuchMethod__ = this;\", ++prop))))__proto__");
tryItOut("if(new (eval)(eval(\"yield;\", export __count__;)([11,12,13,14].sort)) >>> ([1] <<= (-0) in ((((-0))[true]).isPrototypeOf(constructor = <y><z/></y>)))) ; else let __count__ = this, __parent__ = <x/>;");
tryItOut("L:if(<x/>) export __noSuchMethod__; else [1,2,3,4].slice");
tryItOut("{*::*; }");
tryItOut("let (prop = new (<><x><y/></x></>.__proto__ === (yield *::*))()) { {} }");
tryItOut("if( /* Comment */void <x/> >>> <y><z/></y>) { if (@foo.yoyo(<><x><y/></x></>)++) M:if(<x/>) { if (undefined) {return;window; }} else {return <x><y/></x>; }} else {const __proto__ =  /x/g ;export *; }");
tryItOut("let (x::prop) { ( /x/g ); }");
tryItOut("with({__count__: prototype.prototype getter= arguments = __noSuchMethod__ = <x><y/></x>}){}");
tryItOut("/*infloop*/for(__proto__; (<x><y/></x> + []); (({prototype: __parent__}))) return;");
tryItOut("with(<><x><y/></x></> >= [1])let prop, __proto__ = <y><z/></y>;");
tryItOut("/*for..in*/for(let prototype = __count__ in <y><z/></y>) yield true;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor(<y><z/></y>.__count__ = [,]) in yield <><\tbbb xmlns=\"this.zzz.zzz ? eval(\"return window;\", __count__) : ({a2:z2}) ?  ''  : window\"><ccc:ddd> </ccc:ddd></bbb></>) {/*for..in*/for(const __parent__ in __count__) {export __parent__; } }");
tryItOut("/*infloop*/for(var [, constructor, ({ constructor: constructor, prototype: ({ constructor: constructor, prototype: ({ prototype(<><x><y/></x></>): prop }) }) }), , constructor] = (yield <><x><y/></x></>) !== ({}); \nnew (__parent__)(function::prop getter: Math.pow, <x><y/></x>); String(__parent__ = __iterator__, )) {({}).__lookupGetter__ }");
tryItOut("/*infloop*/while(new ((new Function(\"gc()\")))(<x><y/></x>)){({}).hasOwnProperty }");
tryItOut("/*infloop*/do {M:if(__noSuchMethod__ = __count__) {1e-81;({a1:1}); } else  if (((function  constructor (__count__, constructor) { let __count__ = [,], <x><y/></x>; } )((p={}, (p.z = <x><y/></x>)()), 1e81))) return 0/0; } while((prototype.__parent__));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in typeof *) /*for..in*/M:for(const prototype in __proto__) constructor =  /x/ , __count__ = true;");
tryItOut("/*for..in*/for(let __parent__ in get =  '' ) {const __iterator__; }");
tryItOut("if(((new (*)(true, @foo))((~prop)(new (<x><y/></x>)()),  /* Comment */<x><y/></x>))) { if ([[]]) export *;} else {with({__noSuchMethod__: false}){const __parent__; }const __noSuchMethod__ = <x><y/></x>; }");
tryItOut("L:while((#1=({__proto__: (#0=[arguments])})) && 0)L:if(__proto__)  else (1.3);");
tryItOut("__count__, __proto__ = this; const prototype;");
tryItOut("switch(((\n*::*.yoyo(function(id) { return id })) ? __proto__ = ({ __count__: ({ __parent__: __iterator__, __proto__: __proto__ }) }) : ([, __noSuchMethod__, __noSuchMethod__, , ] = <><x><y/></x></>.__count__))) { case 9: {let (__proto__) { ( /x/ ); } }default: break;  }");
tryItOut("/*infloop*/do /*infloop*/for((@foo++).watch(\"__parent__\", ({}).hasOwnProperty); prototype = null; ((__proto__, prop ^ <y><z/></y>).watch(\"prop\", Math.sin))) const prototype = *::*; while((new ([1,2,3,4].slice)(this.zzz.zzz)));");
tryItOut("with\f({constructor: <><x><y/></x></>}){throw <><x><y/></x></>;const __proto__; }");
tryItOut("if(window) {} else ");
tryItOut("let(__proto__, __iterator__ = __iterator__ /= <x><y/></x>) ((function(){;})());");
tryItOut("try { throw #1=[#1#]; } catch(__count__) { gc() } finally { return [z1,,]; }  const __parent__;");
tryItOut("/*for..in*/for(var (__noSuchMethod__) in [11,12,13,14].filter) yield false;");
tryItOut("yield;");
tryItOut("/*infloop*/do var __proto__ = <><x><y/></x></>; while(({__noSuchMethod__ setter: (function ( ) { yield; } ).call }))");
tryItOut("switch(__parent__ &= (({}).prototype)) { case this.__defineSetter__(\"__count__\", function(q) { return q; }): break; case Error(): with({__count__: Boolean((--))})break;  }");
tryItOut("do yield; while(((yield *::*)) && 0);");
tryItOut("if(.2.isPrototypeOf(<x/>)) {each = false; } else prop, __iterator__ = <><x><\fy/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("");
tryItOut("return 0\n");
tryItOut("/*for..in*/for(const __noSuchMethod__ = *::* in  \"\" .__defineGetter__(\"__parent__\", (constructor).apply)) {L:switch(window) { default: break; throw window;break; case 1: return {};Math.powthrow __proto__;__iterator__ = 0;break; return;break; break;  }yield __parent__; }");
tryItOut("&{}");
tryItOut("return;");
tryItOut("throw  /x/ ;");
tryItOut("with(this){(window); } const __iterator__;");
tryItOut("");
tryItOut("/*for..in*/L:for(var constructor = 0/0 = constructor.propertyIsEnumerable(\"__parent__\") in (({__count__: <x/>}))) {yield; }");
tryItOut("/*for..in*/M:for(let prop in (((<x/> ? <><x><y/></x></> :  '' .*.constructor))(constructor.__proto__))){return #3={a:#3#} }");
tryItOut("return; const __count__;");
tryItOut("var prop =  \"\" , __count__;\n\n");
tryItOut("switch(yield window) { default: (<x/>.constructor = undefined);case (new (3)()): break;  }");
tryItOut("/*for..in*/for(let __iterator__ in ((function(y) { yield y; {}; yield y; })([[1]])))yield <><x><y/></x></>;");
tryItOut("if(__parent__ = (prototype).unwatch(\"__iterator__\")) {__iterator__;([[]]); } else {return; }");
tryItOut("constructor = __iterator__;");
tryItOut("M:if((()(__noSuchMethod__, __parent__) = new  '' ())) {__iterator__ = ((uneval(@foo))), __proto__( \"\" ); }");
tryItOut("while(((yield (\t<><x><y/></x></>).call(this,  \"\" ))) && 0){{}if(<><x><y/></x></>) return; else throw *; }");
tryItOut("if((({}).hasOwnProperty)(<><x><y/></x></>, window)) { if (__parent__(__noSuchMethod__.(undefined)) = ()) yield; else let __count__ = <y><z/></y>;}");
tryItOut(";");
tryItOut("/*for..in*/for([constructor, prop] = this.__defineSetter__(\"__proto__\", Math.pow).__lookupSetter__(\"prop\") in true\n) {if(<x/>) { if (((uneval(undefined)))) const __parent__; else }with({\tconstructor: window}){const __iterator__, delete = <><x><y/></x></>; } }");
tryItOut("/*for..in*/for(__proto__ in ([11,12,13,14].some)) yield;");
tryItOut("with({prototype: ((uneval((uneval([[1]])))))})/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in 1e4) {const __parent__ = <x><y/></x>\t; }");
tryItOut("/*infloop*/for(({ constructor: __parent__, prop: prototype }) = export *;  ''  ? true : .2; (__count__ ..  /x/  > <y><z/></y>)) gc");
tryItOut("if(({prototype: 3.141592653589793})) {break L;{} } else export prototype;");
tryItOut("/*for..in*/for([__iterator__, __noSuchMethod__] = <xxx {__noSuchMethod__}={window} /> in this) {}");
tryItOut("L: function (__parent__) { (*).__defineSetter__ } ");
tryItOut("/*infloop*/for(let __iterator__; __iterator__-=let ( if (<x><y/></x>)) <x><y/></x>; Object(this, @foo).__lookupGetter__(\"__parent__\")) \flet prototype;");
tryItOut("/*infloop*/for(( \"\" .isPrototypeOf(1e+81) !=  '' ); <><x><y/></x></>.eval(window); null.isPrototypeOf(<x/>)) var __iterator__ = <>each</>, __count__;");
tryItOut("/*for..in*/for(const -1 in ((((window.hasOwnProperty(\"__parent__\"))).__defineSetter__)(0.1)))M:do {let __count__ =  { var __count__ = [], constructor = false; } ;throw false; } while((true) && 0);");
tryItOut("{do with({__iterator__: (-0)})[1,2,3,4].slice while((<y><z/></y>\n) && 0); }");
tryItOut("M:with({([this].map(*) = (true if (<><x><y/></x></>))): __parent__})if(prototype ? false :  '' )  else  if ((function(q) { return q; })) /*for..in*/for(__iterator__ in (('haha'.split)(<y><z/></y>)))const __noSuchMethod__ = this; else {{} }");
tryItOut("{{}return; }");
tryItOut("/*infloop*/for(<x><y/></x> /  '' ; []; <x/>) {{}gc() }");
tryItOut("do {gc()const prop = this; } while((.isPrototypeOf(new (undefined)())) && 0);");
tryItOut("if(yield case 2: var __parent__;case *:  == <x/>) {(1.2e3); }");
tryItOut("{L:if((true in <y><z/></y>)) (*::*); else {this; }{let (__count__ = -0) { [1]; }throw <x/>; } }");
tryItOut("switch(new (__count__.__noSuchMethod__ = <x><y/></x>++)(yield (-0))) { case constructor = <><x><y/></x></>: break; /*infloop*/do (@foo); while(((<><x><y/></x></>)(window)) > (({function::__count__: <y><z/></y>})));break; default:  } const __iterator__;");
tryItOut("{yield  /x/g ;export *; }");
tryItOut("/*for..in*/for(const prop = (#3={a:#3#})[1e81] in prop) {prop = __count__, let = @foo; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; [1,,];  \"\" ) \f{{}([z1,,]); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in [,,]) {var __proto__ = window; }");
tryItOut("/*for..in*/for(prop in ((Math.pow)(#1#)))/*infloop*/L:for(let __parent__; (<y><z/></y>)[033]; (((p={}, (p.z = __noSuchMethod__)())) |= (<x><y/></x>.isPrototypeOf(this)).propertyIsEnumerable(\"prototype\"))) yield .2;");
tryItOut("/*for..in*/L:for(let ((constructor = (@foo if (3/0)))) in ((function  __noSuchMethod__ ()constructor .@*:: this)(<y><z/></y>))){try { /*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__ in @foo) {yield <x/>;; } } finally { throw StopIteration; }  }");
tryItOut("with(((<x/>.eval((function ([y]) { })())).__defineGetter__(\"__parent__\", <><x><y/></x></>))){yield\nreturn; }");
tryItOut("while((__noSuchMethod__.(prop+=<><x><y/></x></>)) && 0){if(*::*) {//h\n if (<y><z/></y>) break ;} else {let  = null;export function::__parent__; }var __count__, __noSuchMethod__ = this; }\n__noSuchMethod__ = prop;");
tryItOut("if(<><bbb xmlns=\"<>-0</>\"><ccc:ddd><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></ccc:ddd></bbb></>) let __count__;");
tryItOut("/*infloop*/for(({ prop: prop, prototype: [1,2,3,4].slice }) = (__iterator__ = (-1)); (true.__defineGetter__(\"constructor\", function  __proto__ () { throw *;\t } ) :: __iterator__); prop.(<xxx {__count__}={__count__} />) >>>=true.prototype =  /x/g ) {{}__proto__ = __noSuchMethod__;\f }");
tryItOut("gc()\n");
tryItOut("for(let y in [5,6,7,8]) __proto__");
tryItOut("if(null) {export *;gc() } else  if (undefined( '' , *)) L:do export __count__; while((null) && 0); else {const prop;let __count__; }");
tryItOut("/*infloop*/do {return; } while(window);");
tryItOut("let(({ __noSuchMethod__: __parent__, __parent__ = <x><y/></x> &=  \"\"  })) { let(__noSuchMethod__ = (uneval( /x/ )), __parent__) { with({}) Function");
tryItOut("if(eval(\"/*infloop*/while(<><x><y/></x></>){return this; }\", <> </>)) { if (@foo) {{} } else throw <><x><y/></x></>\n}");
tryItOut("/*for..in*/for(let  /x/ ['function::prototype'] in (((1 for (x in [])))(this))){if((new (true)(@foo))) {export *; } else gc() }");
tryItOut("/*for..in*/for(let \t__proto__ in eval(\"\",  '' )) M:if(__iterator__%=<y><z/></y>) return; else  if (this.__defineSetter__(\"__proto__\", eval)) {-0;throw <><x><y/></x></>; } else {let constructor;gc() }");
tryItOut("export *\n");
tryItOut("if(constructor = function ([y]) { }) {return <x/>; } else { }");
tryItOut("L:with({__iterator__: constructor = <x><y/></x>.unwatch(\"__parent__\")})yield <><x/></>;");
tryItOut("with({__iterator__:  /x/g .watch(\"__count__\", ({}).__lookupGetter__)}){window<x><y/></x> }");
tryItOut("/*infloop*/do export prototype; while((__parent__ = <><x><y/></x></>.@*));");
tryItOut("/*infloop*/L:for(function(id) { return id }.watch(\"prop\", Math.pow) ? constructor.prototype = __noSuchMethod__ : (prop.__parent__ = -0);  /x/g .unwatch(\"function::constructor\").__parent__.throw(<>(__noSuchMethod__.constructor = false)</>); new Date(constructor([[]]) = (window)[<y><z/></y>], __proto__ = 3 >>>=yield)) {prototype.__noSuchMethod__ = __count__; }");
tryItOut("if() {break M; } else  if (<x/>) prototype = function(id) { return id }; else export *;");
tryItOut("this.zzz.zzz;");
tryItOut("let constructor = <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("__iterator__ = function(id) { return id }, __iterator__ = *::*\n");
tryItOut("set = __noSuchMethod__;yield;");
tryItOut("with({}) let(prototype = prop = __proto__, __parent__ = <y><z/></y>) { with({}) const __proto__;");
tryItOut("if(let (({ prop: [__iterator__, __iterator__, __count__, ], __parent__: [prop] })) <x><y/></x> ? __parent__ : window) { if (({constructor setter: function(y) { yield y; false;; yield y; }, __iterator__ getter: *::* })) export prop; else {<><x><y/></x></>/*for..in*/M:for(const __iterator__ = <x><y/></x> in [z1,,]) throw (-0); }}");
tryItOut("/*for..in*/for(let __count__ in ((((1 for (x in []))).call)(this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"yield (function ([y]) { })();\"))))))Function");
tryItOut("{return; }");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: constructor }) = eval(\"let (prototype = 0.1, prop) *\", <x><y/></x>); false; (yield 4.)) {}");
tryItOut("if(({} < *)) export *;*;");
tryItOut(" break L; while((undefined &= <><x><y/></x></>) && 0)\n;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [0/0 if (<><x><y/></x></>)]['prop'] in  /x/g --) {}");
tryItOut("throw  \"\" ;let __iterator__ = 1.3;");
tryItOut("do throw *; while(([15,16,17,18].some((this).__defineSetter__,  /x/ )) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const __count__ = default: export __iterator__;break;  in [15,16,17,18].sort((<y><z/></y>).apply, (<x><y/></x>)[<><x><y/></x></> != false])) if(__count__ = __noSuchMethod__.@foo) {M:if(<x/>) {; } else  if (constructor) {return *::*; }__parent__ } else (<x><y/></x>);");
tryItOut("\fM:switch((*.__lookupGetter__(\"__count__\") ::  /x/ )) { case ((__iterator__.watch(\"__parent__\", (*).__defineSetter__))++): /*infloop*/while(null.isPrototypeOf(<x/>))gc()break;  }");
tryItOut("{throw *::*; }");
tryItOut("{<x/> }");
tryItOut("this.zzz.zzz;");
tryItOut("{export *; }");
tryItOut("M:if(<x><y/></x>) {; } else  if ((-1)) {const constructor = <x><y/></x>, __parent__;;return null; } else (<x><y/></x>);");
tryItOut("L: {(<x/>); }");
tryItOut("{break M;switch(#1#) { default: case  /x/ : yield;break; const __iterator__;break; case 3:  { return  \"\" ; } case 8: var constructor;break; break; case prop: case <x><y/></x>: prototype = window, __parent__;break; case 8: break; case __noSuchMethod__: return;break; yield;continue ;<><x><y/></x></>;({});break; case 9: ;case undefined: break; gc()case 4: break; case 4: (let (prop) prototype%=*::*);case 0: continue ; } }");
tryItOut("with( /x/ .__noSuchMethod__)/*for..in*/for(let __proto__ in ((({}).hasOwnProperty)(1e4)))export prototype\n");
tryItOut("let (__iterator__ = \n<y><z/></y> ? __noSuchMethod__ = <y><z/></y> : (<><x><y/></x></> if ( /x/ ))) { /*for..in*/M:\ffor(var [constructor, prop] = <x/> in constructor) let __count__ = <x><y/></x>, prototype = []; }");
tryItOut("let(__iterator__, __noSuchMethod__ = <>-1</>) { throw StopIteration;");
tryItOut(" const prototype;");
tryItOut("export *;;");
tryItOut("with(window)function ([y]) { })';");
tryItOut("if(<> </>.(__parent__ = <x><y/></x>.__defineSetter__(\"__noSuchMethod__\", __proto__function (__noSuchMethod__) { return this } ))) {gc() const __count__;L:do {gc() } while((constructor = #1=[#1#]) && 0); } else  if (*) if((false.__iterator__))  \"\"  else  if (prop.__count__ getter\n= 3.141592653589793) { } else yield  \"\" ; else if(((function ([y]) { })().yoyo([,,]))) {yield; } else  if (((uneval( /x/g )))) {(<x><y/></x>);break M; }");
tryItOut("/*infloop*/M:for(let ({ __parent__: [], __iterator__: __noSuchMethod__ }) = <x><y/></x>.valueOf(\"number\"); eval(\"<x><y/></x>\", __parent__); .2 >= <x><y/></x>) {var __iterator__ = <><x><y/></x></>; }");
tryItOut("if(<x><y/></x>.__lookupGetter__(\"__count__\")) {<x/>; const __proto__; }");
tryItOut("/*for..in*/M:for(let prototype in (((new (((({}).__lookupGetter__).apply).call)()))(undefined))){switch((-0)[@foo]) { default: break ;break; case 2:  }if(<y><z/></y>.hasOwnProperty(\"__iterator__\") &= [<x><y/></x>]) {({}).hasOwnPropertyvar __count__ = *, prop; } else  if (\n([z1].throw(1.3))/*\n*/) {; for (prop in <y><z/></y>) } else {let __parent__ = 0/0;(__count__); } }");
tryItOut("L:with(<x/>)yield;");
tryItOut("L:while((__parent__ = <><x><y/></x></>.__lookupSetter__(\"__count__\") >>>=(__parent__.__count__ getter= function () { yield this } )) && 0)/*infloop*/while(*::*)return <>\t<x><y/></x></>;");
tryItOut("var prop, __noSuchMethod__");
