tryItOut("{export constructor\n }");
tryItOut("/*infloop*/L:for(var __parent__; +__count__ = [z1,,]; __proto__|=(-1) % __count__.throw(*::*)) /*infloop*/for(let __count__; prop = __parent__; <><x><y/></x></>.hasOwnProperty(\"constructor\")) {export *; }");
tryItOut("with({}) {  } ");
tryItOut("/*infloop*/for(([11,12,13,14].some); prototype = window; ([15,16,17,18].map([1,2,3,4].map, -1) % (constructor) = [[]])) {/*for..in*/L:for(var 1e4['constructor'] in window) {return @foo;{} }\nlet (constructor = <y><z/></y>, constructor) { export constructor; } }");
tryItOut("yield <x><y/></x>.(*::*);");
tryItOut("break M;");
tryItOut("(<x><y/></x>); const constructor;");
tryItOut("/*infloop*/M:for(([1,2,3,4].slice); (this.__defineSetter__(\"constructor\", Math.sin)); <bbb xmlns:ccc=\"1e+81\"><ccc:eee></ccc:eee></bbb>.(([*].map(function(q) { return q; })))) gc() const constructor;");
tryItOut("continue M;");
tryItOut("return;");
tryItOut("gc()");
tryItOut("throw prop;");
tryItOut("return;");
tryItOut("do {M:with({prototype: (this.__defineGetter__(\"constructor\", [,,]))}){yield *::*; } } while(((<x/>)[*::*].__defineGetter__(\"__count__\", (new Function(\"{}\")))) && 0);");
tryItOut("if(yield <><x><y/></x></>) gc()");
tryItOut("continue ;\n\n");
tryItOut("{}");
tryItOut("yield;");
tryItOut("/*for..in*/for([prototype, prototype] = (constructor = prop)(()) in new Object()) /*infloop*/L:do let prop = constructor, prototype = <><x><y/></x></>; while(*);");
tryItOut("with({}) { (<x><y/></x>).__defineSetter__ } ");
tryItOut("/*for..in*/for(__count__.set in (((1 for (x in [])))(prototype = <x><y/></x>))){return; }");
tryItOut("if(__noSuchMethod__.prop) { if (let (({ prototype: prop, prop: [] }) = new Function) *) {do {;var __iterator__ = false; } while((.2) && 0);if(0/0) var __noSuchMethod__ = <x><y/></x>; else  if (window) yield  /x/ ; else {@foo;<y><z/></y>; } } else constructor}");
tryItOut("/*infloop*/L:for(__parent__; true; false) {__iterator__ = 5.0000000000000000000000, __parent__ = function(id) { return id };const __proto__ = []; }");
tryItOut("/*for..in*/for( = <><x><y/></x></> in <x><y/></x>) let prototype, prop = <><x><y/></x></>;");
tryItOut("L: {export __proto__; const __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(const __count__ in __count__) throw @foo;");
tryItOut("{/*infloop*/for(0x99.isPrototypeOf( /x/g ); __proto__ = undefined; yield this) {gc()yield; }/*infloop*/for(prop = <x><y/></x>; <y><z/></y>; *::*) {break L;export *; } }");
tryItOut("{/*infloop*/for(var __count__; ((__noSuchMethod__+=__count__)\n); (-0.yoyo(*))) <x><y/></x>;{} }");
tryItOut("if(<><x><y/></x></>) {gc()prototype } else  if (<><x><y/></x></>) {export __iterator__; }");
tryItOut("/*for..in*/M:for(const prop = ({ __noSuchMethod__: __parent__ }) = new Error(<x><y/></x>) in (++constructor.yoyo(prop))) /*infloop*/for(const __parent__; #1=<x/>.yoyo(<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")); 'haha'.split) {(1e-81);{yield true;throw window; } }");
tryItOut("/*infloop*/for([] = ({}).__lookupGetter__; <><{__iterator__}> </{__iterator__}></>; <>\nwindow.__proto__ = constructor</>) {let (__proto__, __noSuchMethod__) { throw __iterator__; } }");
tryItOut("M:if(yield __parent__) {/*for..in*/L:for(let constructor.__noSuchMethod__ in (((new Function(\";\")))((#1=[#1#] ?  \"\"  : null))))var __proto__ = <><x><y/></x></>, __proto__; } else  if ((this.__defineSetter__(\"__noSuchMethod__\", ((3 <<= <x><y/></x>)).watch))) {yield; }");
tryItOut("return;let(prop =  /x/ , prop) ((function(){{}})());");
tryItOut(";");
tryItOut("while((new #1=[#1#](3/0).throw((this.__defineGetter__(\"prop\", (1 for (x in []))))) .@*::  \"\" ) && 0)yield;\n(new Function(\"var __parent__, __proto__ = @foo;\"))\n");
tryItOut("@foo");
tryItOut("{return; }");
tryItOut("switch(eval) { case Boolean(): break; break M;break;  }");
tryItOut("/*for..in*/for(var (__iterator__ = <y><z/></y>.throw(<><x><y/></x></> in 4.).eval('fafafa'.replace(/a/g, [1,2,3,4].slice))) in ((function () { return (new (constructor = <x><y/></x> << null)((prototype.__count__ = this.hasOwnProperty(\"prototype\")))) } \t)(('fafafa'.replace(/a/g, Math.pow)).valueOf(\"number\")))){'haha'.split\n{} }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((try { let(__noSuchMethod__) ((function(){try { __noSuchMethod__ = __proto__; } catch(constructor([,]) if (function(){for(let y in [5,6,7,8]) yield 1.3.__lookupSetter__(\"__parent__\");})()) { with({}) let(__proto__, __iterator__ = @foo) { <y><z/></y>; } catch(__noSuchMethod__) { try { prototype } catch(__parent__) { window; }  } })()); } catch(prop if undefined++(<y><z/></y>--,  '' ) &= 3.141592653589793--) { return; } catch(prototype\r) { constructor = (p={}, (p.z = __count__ = __proto__)()); } )\n.__defineSetter__)((let (prototype) window.__lookupGetter__(\"__noSuchMethod__\")).__defineGetter__(\"__iterator__\", [1,2,3,4].slice)))){/*infloop*/do {prop } while(({}).hasOwnProperty); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in <zzz>__iterator__</zzz>) {if((+function ([y]) { })) { if (this.zzz.zzz) throw @foo;} else {function (__iterator__)propconst __noSuchMethod__, __proto__; } }");
tryItOut("with(null.hasOwnProperty(\"__proto__\")){/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in __parent__) {(-0); }return 0x99;\n/*infloop*/L:for(false; null;  /x/ ) {; }\n }");
tryItOut("gc()");
tryItOut("if( /x/ .throw(window)) {break ;yield; } else  if (((<y><z/></y>).apply).apply) {break M;continue L; }");
tryItOut("if(null) {yield *::*; }");
tryItOut("L: const prop = __parent__, constructor;");
tryItOut("if(undefined) {export *; } else  if (true) {{} }");
tryItOut("do {Math.sin{gc()export set; } } while(([(this.zzz.zzz) for ([eval(\"function::__parent__\", <x><y/></x>) for each (constructor in 0/0) for each (__count__ in *)] in <x/>) for each (prop in <x><y/></x>)].throw(*::*['__noSuchMethod__'] = #1=[#1#])) && 0);");
tryItOut("/*infloop*/do {} while(<zzz>1e+81 in __parent__</zzz>);");
tryItOut("M:while((<><x><y/></x></> ? <x/> : window) && 0)switch(([.2])) { __parent__, prop }");
tryItOut("with(new (__count__ = <x><y/></x>.__parent__).__defineSetter__())/*infloop*/for(let ({ constructor: __parent__, __noSuchMethod__: prop }) = ([<x><y/></x>].map(Function)); ( /* Comment */<x/>); (this != @foo)) {<{__proto__}>yyy</{__proto__}> }");
tryItOut("throw window\n");
tryItOut("export *");
tryItOut("/*infloop*/for(var function (constructor, prototype) { return <><x><y/></x></> }  = undefined; .2; __noSuchMethod__) {(.2); }");
tryItOut("return");
tryItOut("L:if(((this.__defineGetter__(\"__iterator__\", ( '' ).__defineSetter__)).prototype = ( \"\" .valueOf(\"number\")))) { if (*::*) {yield <><x><y/></x></>;\f }} else { }");
tryItOut("/*infloop*/for(prototype; eval((-1), undefined); (Error())) {L:if(<y><z/></y>.eval(this)) {/*infloop*/do {; } while(<><x><y/></x></>); }throw  '' ; }");
tryItOut("__proto__");
tryItOut("L:with(5.0000000000000000000000.yoyo(.2))if(1e+81) { if (function ([y]) { }) {{}/a/gi } else yield;}/*infloop*/L:for(<bbb xmlns=\"<x/>\"> </bbb> = -0; new undefined; __count__ = new <x/>( /x/ )) {const prop = [,,];return; } const prop;");
tryItOut("/*for..in*/for(let prop = delete 0 in window) {export __proto__;gc() }");
tryItOut("with({}) for(let y in [5,6,7,8]) throw x::__iterator__;");
tryItOut("/*infloop*/while({}.throw((this.__defineGetter__(\"constructor\", function () { yield 0/0; } ))))(<x><y/></x>);");
tryItOut("/*infloop*/for(*::*; \n<x/>; *) export __noSuchMethod__;");
tryItOut("let(({ __noSuchMethod__: ({ __proto__: [], __noSuchMethod__: ({ __noSuchMethod__: __iterator__, prop: __proto__ }) }) })) { x::prop = __iterator__;");
tryItOut("if(this) {constructor = ({a2:z2}); } else  if (prop = __proto__) (1 for (x in []))");
tryItOut("L:if((this.__defineSetter__(\"__proto__\", \tgc))) return __noSuchMethod__; else  if ((+[,])) <><x><y/></x></>");
tryItOut("L:if() {(0/0);yield; } else  if (eval(\"<x/>\", <x><y/></x>)) yield <x><y/></x>; else <y><z/></y>;");
tryItOut("throw null");
tryItOut("/*infloop*/for(__proto__ = (this.__defineGetter__(\"__count__\", (Function).call)); (this.__defineGetter__(\"__count__\", function  __proto__ (getter, prototype) { return new  /x/ (<x><y/></x>) } ).__defineSetter__(\"__proto__\", ({}).hasOwnProperty)); (prop.__noSuchMethod__ setter= ((this.__defineSetter__(\"function::__proto__\", (({}).__lookupGetter__).apply))).watch)) if((4. + true).propertyIsEnumerable(\"prop\")) { if ([[]]) {if([]) { if ( /x/g ) {let __count__; } else export *;} }} else {}");
tryItOut("with({__noSuchMethod__: (function ([y]) { })()})gc()");
tryItOut("/*for..in*/for(__parent__ = window.propertyIsEnumerable(\"__count__\").__defineGetter__(\"__proto__\", ((1 for (x in []))).call) in window) /*infloop*/while(<x/>){<\tx><y/></x>let __iterator__ = true; }");
tryItOut("with({}) { <><x><y/></x></>; } ");
tryItOut("switch(((<><x><y/></x></>)[1e4])) { case 8: break; default: return  /x/g ;break;  }");
tryItOut("if((yield <><x><y/></x></>).hasOwnProperty(\"__noSuchMethod__\")) { if ( /* Comment */<x><y/></x>) function  constructor (prop, prop)null} else {gc() }");
tryItOut("throw StopIteration;");
tryItOut("if(<x><y/></x>) ; else {{} }");
tryItOut("/*infloop*/M:for(var __parent__; [z1,,].unwatch(\"function::__count__\");  /x/g  ? <x><y/></x> :  /x/ .__noSuchMethod__) throw <x/>;");
tryItOut("L:if((({ __iterator__: [], __iterator__: ({ [, constructor]: [__iterator__, , ] }) }) = yield <x><y/></x> >= eval(\" '' .prop = <><x><y/ prop></x></>\", [15,16,17,18].map((<x><y/></x>).call, *::*)))) /*for..in*/for(const __proto__ in  /x/ ) { } else  if (((0.1.__defineSetter__(\"__count__\", /a/gi) for each (let in  /x/ ) for each (__noSuchMethod__ in <y><z/></y>) for (yield <y><z/></y>; in undefined)))) if(this) { if (eval(\"1e+81\", *)) yield; else {var __iterator__;gc() }}");
tryItOut("L: {/*for..in*/M:for(let __noSuchMethod__ in this) ;/*infloop*/M:while(( '' \n))throw 1e-81; }");
tryItOut("L:with({__count__: (yyy--)}){L:do this; while(( /x/g  .@x:: [1]) && 0); }");
tryItOut("if((-- /x/ )) {var prop; }");
tryItOut("/*infloop*/for(<y><z/></y>;  /x/g ;  /x/g ) {;throw <x/>; }");
tryItOut("M:if((undefined)(__parent__-=this, eval(\"__parent__, __proto__ = __count__;\", window))) { if (({constructor: window, __noSuchMethod__: <><xxx>{__parent__}</xxx></> })) {yield; } else __noSuchMethod__}");
tryItOut("if(( /* Comment */*::* for each (prototype in <x><y/></x>\f))) throw StopIteration;");
tryItOut("if((yield __proto__)) {throw <y><z/></y>;; } else  if ([z1].*()) {var constructor, __count__ = constructor; }");
tryItOut("M:with({prototype: 1e-81.unwatch(\"prop\")[(\nthis\n)]}){var __noSuchMethod__; const prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__parent__) in <y><z/></y>.propertyIsEnumerable(\"__parent__\")) export __noSuchMethod__;");
tryItOut("try { return; } finally { throw prototype; } ");
tryItOut("throw <y><z/></y>\n/*for..in*/for(let [__count__, each] = <><x><y/></x></> in  \"\" ) {const __proto__, __parent__;; }");
tryItOut("if(<x><y/></x>) ; else  if (<y><z/></y>) yield prop; const constructor;");
tryItOut("let (prototype = *, __count__ = *::*.yoyo(this)) { if(()) {(this);  } }");
tryItOut("let (__noSuchMethod__) { new Function }");
tryItOut("/*infloop*/for(const __proto__ = __iterator__ = __proto__ getter: Math.sin; __count__; new ([ /x/ ])()) const __count__, prototype = false;");
tryItOut("__iterator__ = __parent__;");
tryItOut("return;");
tryItOut("/*infloop*/for(!<x><y/></x>; (<x/> |= *.unwatch(\"prototype\").isPrototypeOf((uneval(true)))); prop = this)  const prototype;");
tryItOut("if((uneval((p={}, (p.z = .2)()))).__defineGetter__(\"prop\", Math.sin)) {\freturn <><x><y/></x></>;/*infloop*/M:for( ''  == <x><y/></x>; (undefined >>>=*); false.hasOwnProperty(\"__iterator__\"))  } else  if ((constructor = (undefined.constructor)) = __iterator__.__count__ setter= Math.pow.hasOwnProperty(\"__iterator__\")) {const __parent__ = 033\n }");
tryItOut("if(gc) { if (null) {export setter;return; } else return;}");
tryItOut("L\t: let (__proto__ = ((uneval(<y><z/></y>)) ?  \"\" .prop : <x><y/></x>.( /x/g )), ({ prop: prop })) { M:with({__noSuchMethod__: <x><y/></x>.__count__ .@ (__noSuchMethod__.([z1,,]))}){continue L; } }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*for..in*/for(const (__count__ = window) in []) {const __noSuchMethod__ = *, constructor = <><x><y/></x></>; }\n");
tryItOut("throw 0/0;");
tryItOut("if(((__proto__.prop =  \"\" ) in ({__parent__ setter: [,,] }) / (let (__parent__) <x/>.valueOf(\"number\")))) { if ((<y><z/></y> % undefined)) {yield __noSuchMethod__; } else { }}");
tryItOut("/*infloop*/M:do  while([z1,,]);");
tryItOut("with({__noSuchMethod__:  \"\" }){return <x/>; }");
tryItOut("\flet (prop, __iterator__) { 'haha'.split }");
tryItOut("yield;");
tryItOut("let([, __count__, ], constructor) ((function(){try { return; } finally { {} } })());");
tryItOut("/*infloop*/do {/*infloop*/for(let __iterator__; undefined; <><x><y/></x></>) return __parent__; } while(({a2:z2}) != @foo);");
tryItOut("L: {yield;this; }");
tryItOut("L:if((eval(\"continue L;\", <><x><y/></x></>))) return <y><z/></y>; else  if (yield <y><z/></y>;) return; else {}");
tryItOut("gc() const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__.prop in (function::prototype, prop)) {L:  }");
tryItOut("break ;");
tryItOut("if(<><bbb xmlns=\" ''  instanceof  '' \"> </bbb></>) { if (constructor.(*)) return; else let \r(prop = <><x><y/></x></>) { throw this; }}");
tryItOut("/*for..in*/L:for([prototype, __iterator__] = <><x><y/></x></> in <x/>, [,,z1]) {yield ({a1:1}); }");
tryItOut("L: {throw prop;yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(true; window; false) {throw 0/0;__proto__; }");
tryItOut("M:while((new function  prop () { return function(id) { return id } } ('fafafa'.replace(/a/g, function(y) { yield y; return;; yield y; }), [1,,])) && 0)M:if((-0)) __noSuchMethod__ else  if (<x><y/></x>) {;yield; } else {return @foo; }");
tryItOut("let (({ __parent__: prop }), __parent__ = <><x><y/></x></>) { {} }");
tryItOut("/*infloop*/do {export __noSuchMethod__; } while(#1#);");
tryItOut("M:with({__proto__: (({__parent__: (\n<x><y/></x>) }))}){( '' );gc() }");
tryItOut("Function");
tryItOut("/*for..in*/for(prototype = [15,16,17,18].filter((1 for (x in [])), <x><y/></x>) in this.__defineGetter__(\"__noSuchMethod__\", 1e4)) {; }");
tryItOut("M:if((this.zzz.zzz)) (<x/>); else {const __parent__, prop = <><x><y/></x></>;constructor; }");
tryItOut("yield __count__;");
tryItOut("{L:if(#2=[({ set __parent__ __noSuchMethod__ (__count__) { (<y><z/></y>); }  })]) { if (__iterator__.__noSuchMethod__ setter= ('haha'.split).apply) {yield  /x/g ; } else {if(*::*.__parent__) {export *;export prop; } else {let __noSuchMethod__ = undefined; }{} }}L:if((new Error()) !== __parent__ = new this.__defineSetter__(\"__parent__\", 0/0)(<><x><y/></x></>)) break ; }");
tryItOut("let (__proto__ = (({}) instanceof [1,,] :: +[,,z1])) { {export each;gc() } }");
tryItOut("let (__noSuchMethod__, ({ __count__: prop, prop = (--yyy, __iterator__): constructor }) = /a/gi) { throw  /x/ ; }");
tryItOut("with({__noSuchMethod__: <>(export __parent__;.hasOwnProperty(\"constructor\"))</>}){M:do {const __count__ = window; } while((<y><z/></y>) && 0); }");
tryItOut("return [, __proto__, , , ] = prototype;");
tryItOut("/*for..in*/for(let [__proto__, __count__] = null-- in window) yield constructor;");
tryItOut("L: {(new Function(\"throw  '' ;\"))/*infloop*/for(prop = <x><y/></x>; <x><y/></x>; <x><y/></x>) {constructor = *, __parent__ = prototype;throw window; } }\n");
tryItOut("while((this.__defineGetter__(\"__count__\", (1 for (x in [])))) && 0)var __iterator__ = window, __noSuchMethod__;");
tryItOut("with((<x/>.__lookupGetter__(\"prop\"))((-1) ? <x/> : 0x99)){export prop;[] }");
tryItOut("/*infloop*/while(let (__count__ = #0=constructor, constructor) (prop = <><x><y/></x></>)){/*for..in*/for(const __parent__ = null in this) {true; } }");
tryItOut("/*infloop*/for(var yield; constructor.(window); __proto__ = <><x><y/></x></>) {return __count__;let constructor; }");
tryItOut("/*infloop*/L:do {continue ;yield <x><y/></x>; } while((prop.__iterator__ = __iterator__.__count__));");
tryItOut("with(__proto__){((this.__defineGetter__(\"__iterator__\", function (__iterator__ setter: function (prop)function ([y]) { }) { return 4. } )).watch(\"__proto__\", ({}).__lookupGetter__)) }");
tryItOut("if(0) break M;");
tryItOut("if((*::* if (<x/>))) ((4. if ([[]])));{\tlet set, prop = null;throw prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  \"\" ) {yield;yield; }");
tryItOut("/*for..in*/for(const __proto__.constructor in @foo) gc()");
tryItOut("/*for..in*/for([__noSuchMethod__, __count__] = (prop = this.propertyIsEnumerable(\"__parent__\")) in false(__iterator__ >>= (-1), *)) {gc() }");
tryItOut("\n");
tryItOut("L:while((__noSuchMethod__) && 0){Math.powbreak ; }");
tryItOut("gc()let <x/>, __iterator__;");
tryItOut("__noSuchMethod__;");
tryItOut("if(__iterator__) return @foo; else  if ([z1]) yield;__proto__, prop");
tryItOut("/*for..in*/for(const constructor in [1,,]) {{}[1,2,3,4].slice }");
tryItOut("yield .2;");
tryItOut("/*infloop*/L:for(([][<x/>]); (++3.141592653589793); <y><z/></y>.hasOwnProperty(\"__noSuchMethod__\")) export __noSuchMethod__;");
tryItOut("/*infloop*/do throw @foo; while(<><x><y/></x></>.eval(null) & __count__ = 1e4);");
tryItOut("yield <x/>\nlet prop, ;");
tryItOut("/*infloop*/M:while(<><><x><y/></x><x><y/></x><ccc:ddd></ccc:ddd></></>){{} }");
tryItOut("if(1e+81) {try { var __count__; } catch(__proto__ if false) { {} } finally { ; } export *; } else  if ((({a2:z2}).__defineSetter__(\"prototype\", default: {}break; ))) {return;throw 033; } else yield <x><y/></x>;");
tryItOut("export *;");
tryItOut("{return;if(new [[]](<x><y/></x>)) {(<><x><y/></x></>); } else  if ((<x><y/></x>.(false))) export *; }");
tryItOut("if(true) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in  \"\" ) {throw <><x><y/></x></>; } }");
tryItOut("if(__parent__ = __parent__) { if ([__noSuchMethod__ = this].filter(Function)) (033).watch else {gc()yield window; }}");
tryItOut("let (__noSuchMethod__, __noSuchMethod__ = (null\n)) { with({}) { ; }  }");
tryItOut("{export __iterator__;var prop =  /x/g , constructor = window; }");
tryItOut("L:switch((eval(\"switch( /x/ ) { case 9: throw this;break;  }\", - /x/g ))) { default: case 6: ;break; break; case 6: if(1e+81) {return;gc() } else  if (<x><y/></x>) <y><z/></y>; else gc() }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("gc()\n{}");
tryItOut("if(<x/>.__lookupGetter__(\"prop\")) __parent__ else return;");
tryItOut("prototype = __count__;");
tryItOut("{try { gc() } catch(__count__) { break ; } (__count__ = <x><y/></x>); }");
tryItOut("try\n { throw StopIteration; } catch(__noSuchMethod__ if (function(){with({}) var constructor = <><x><y/></x></>, __proto__;})()) { throw StopIteration; } catch(window if (function(){__count__ = <y><z/></y>})()) { __parent__ = __parent__; } catch(__proto__ if (function(){return (yield <y><z/></y>);})()) { return __proto__[null]; } finally { throw StopIteration; } ");
tryItOut("if(().unwatch(\"constructor\") .@x:: <bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>.((<y><z/></y>.yoyo(<x><y/></x>))) ? <bbb xmlns=\"__parent__\"><x><y/></x><!--yy--></bbb>.([11,12,13,14].some) : <><x><y/></x></>.throw(__count__).throw(<x/>) ? 1.2e3 > undefined : new (gc)(<><x><y/></x></> ===  /x/ , window)) if(({ set __noSuchMethod__()<><x><y/></x>yyy</>() }).valueOf(\"number\")) {} else  if ((eval(\"/*infloop*/M:\\nfor(let __iterator__ = constructor; [[]]; __parent__) {var __count__, prop; }\", (Number(undefined >> function ([y]) { }, <><x><y/></x></>))).__defineGetter__(\"constructor\", (1 for (x in []))))) ; const __iterator__;");
tryItOut("{<><x><y/></x></>; }");
tryItOut("/*infloop*/L:for(var [[, ], ({ __parent__: prop, prop: __noSuchMethod__ })] = \n-1; (({ __proto__: constructor, __parent__: [__parent__, function::constructor] }) = yield <y><z/></y>); eval(\"delete {}\", (__parent__-=constructor = this))) gc()");
tryItOut("new (({prototype: <x><y/></x>}))");
tryItOut("let __parent__, prototype;");
tryItOut("/*infloop*/for(__noSuchMethod__; *; ([,,z1] ?  /x/  : *::*++)) case <><x><y/></x></>: break; undefined;break; ");
tryItOut("this.zzz.zzz;");
tryItOut("M:with(1e-81.__proto__ = ((-1))[*].__lookupSetter__(\"__count__\"))");
tryItOut("if((({__noSuchMethod__: -1}))) var prop = []; else  if ((prototype.prototype = [prop if (true)]\t)) {with({__proto__: *})__noSuchMethod__;yield; } else {break ; }");
tryItOut("this.zzz.zzz;");
tryItOut("M:switch(yield #0=({__proto__: *::*})) { case 0: ({}).hasOwnPropertycase 9: break; case 3: break;  }");
tryItOut("L:if(({a2:z2}).watch(\"__iterator__\", function  __parent__ ((__iterator__), __proto__) { {throw null;yield <><x><y/></x></>; } } )) { if ([1] .@  /* Comment */constructor = this) return 'fafafa'.replace(/a/g, false); else /*for..in*/M:for(var constructor in [,,]) throw #1=[#1#];\t}");
tryItOut("/*for..in*/M:for(let __count__ in (new gc(<><x><y/></x></>,  '' ))) return;");
tryItOut("if(()) if((({ get __count__(prop) { yield; } , __proto__: __noSuchMethod__ }))) continue ; else  if (Error(*,  '' )) {continue M;(arguments); } else {(<><x><y/></x></>);return null; } else {if(prototype ? this : let prototype) { if ([11,12,13,14].filter) this;} else continue M;gc() }");
tryItOut("do {return function ([y]) { };return; } while((([({ __proto__: __parent__ }), ] = \n<x><y/></x>)) && 0);");
tryItOut("do {return  /x/ ; } while((*::*) && 0);");
tryItOut("/*infloop*/L:while(function () { return  /x/  } )switch(window) { case <x/>: break;  }\n");
tryItOut("{/*infloop*/do 1.3 while(1.3.watch(\"__count__\", [1,2,3,4].map));/*for..in*//* nogeckoex bug 349964 */M: for  each(const __parent__ in null) this }");
tryItOut("with({}) { export let; } ");
tryItOut("/*infloop*/for(this; ((uneval(eval(\"{}\", [[]]))) *= this.zzz.zzz); (([constructor <= this]))[__count__.__noSuchMethod__].*) {(*);/*for..in*/for(__parent__.__iterator__ in *::*) {L:do return 1e81; while((-0.eval(<><x><y/></x></>)) && 0); } }");
tryItOut("/*infloop*/do {(<y><z/></y>); } while(<>(-(return arguments;.valueOf(\"number\")))[[window | __parent__].filter({})]</>);");
tryItOut("if(prop.(undefined).__lookupGetter__(\"__count__\") ? null : (constructor.__count__ setter= function () { throw  /x/ ; } ) >>> 0 <= (+*::* >>= constructor = function(id) { return id })) { if (.__lookupGetter__(\"prop\") || ) /*infloop*/while(.2(<x><y/></x>,  /x/g ))let __proto__ = <x><y/></x>; else {\n{}\nthrow *::*; }}");
tryItOut("/*infloop*/for(__noSuchMethod__ = <> (this.zzz.zzz), (#2=null)</> + true; *.yoyo(<x/>); (__proto__) = [].yoyo(<y><z/></y>)) return [,];");
tryItOut("/*infloop*/for(var __noSuchMethod__; *.__defineGetter__(\"prototype\", function(q) { return q; }); prop.__count__) __proto__;");
tryItOut("");
tryItOut("( '' );");
tryItOut("/*infloop*/do let setter, __noSuchMethod__ = [,,]; while((yield *::*));");
tryItOut("/*for..in*/for(let (<y><z/></y>)(*) in null) {throw .2; { return null }  }");
tryItOut("export __parent__;");
tryItOut("L:switch(1.2e3--) { default:  }");
tryItOut("/*infloop*/do while((prop = this.unwatch(\"__proto__\")\n) && 0){/*infloop*/L:for([z1,,]; 3/0; ({a2:z2})) {throw *; } } while((new constructor.__noSuchMethod__ setter= 'haha'.split(new function () { let prop = arguments, constructor; } (), this.__defineSetter__(\"prototype\", new Function))));");
