tryItOut("{return;; }");
tryItOut("/*infloop*/do {continue ; } while((function::__iterator__ =  '' ));");
tryItOut("with({__proto__: __count__.((__iterator__ = 0.1))}){yield false; }");
tryItOut("{function  __noSuchMethod__ (prop)\t { ; } continue M; } const prototype;");
tryItOut("if(([1,2,3,4].map)()) function::__proto__, constructor; else let __count__ = 1e4;");
tryItOut("/*for..in*/L:for(__proto__.__iterator__ in (((({prototype: new Boolean(<y><z/></y>,  '' ), prop getter: (1 for (x in [])) })))(void let (__count__ = *) gc( '' ) <= <><x><y/></x></>.*))){/*for..in*/M:for(__noSuchMethod__ in null) var __iterator__ = <x/>;M:if(__count__.__iterator__ getter= __proto__) {return @foo; } }");
tryItOut("__proto__ === window; const constructor;");
tryItOut("let(({ prototype\n: __count__ }) = *::*, __parent__ = 1e4) ((function(){try {  } catch( in ) { continue L; } })());");
tryItOut("with(__noSuchMethod__){export __count__;export *; }");
tryItOut("for(let y in []);");
tryItOut("L: {gc }");
tryItOut("throw ({});var prototype = prop, __iterator__ = window;");
tryItOut("const __iterator__ = this;return constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><xxx {__proto__}={<bbb xmlns:ccc=\"__noSuchMethod__\"><ccc:eee></ccc:eee></bbb>.([<x><y/></x>].filter(({}).__lookupGetter__))} /></>['let'] in (void try { export ({a1:1}); } finally { var __count__, constructor = undefined; } )) if(( /x/g  ? false : <y><z/></y>).unwatch(\"prototype\")) {/*for..in*/for(prop in (('haha'.split)(<><x><y/></x></>)))yield;; } else if(*::*) var prop, constructor = true; else  if (<x/>) let prop = ({a1:1}), __count__;");
tryItOut("L:if(({a2:z2})) { if (Iterator(@foo)) __count__} else { }");
tryItOut("if(({ prop: ({ constructor: __proto__ }) }) = this.zzz.zzz) { if (typeof (this.@*)) const __proto__ = __count__, prototype;} else {{var each = @foo, constructor = 1e81;yield <x><y/></x>; } }");
tryItOut("if([(function ([y]) { })()] *= (false)([[1]], <><x><y/></x></>)) if(prototype) export x::prototype; else  if (<x><y/></x>) const __iterator__, prop; else {(Math.sin).apply } else  if (this.__defineGetter__(\"prototype\", eval)) /*for..in*/for(let [__noSuchMethod__, prop] = true.hasOwnProperty(\"__parent__\") in <><x><y/></x></>) {__parent__ = * } else {const __parent__, __count__;return new <x><y/></x>(undefined, [1]); }");
tryItOut("L:if([11,12,13,14].filter) {return true; } else {({}); }");
tryItOut("while(((<y><z/></y>.isPrototypeOf(*))) && 0)this;");
tryItOut("/*infloop*/for(__parent__; <x><y/></x> -=  '' ; [<><x><y/></x></>].map((function(y) { yield y; (<x/>);; yield y; }).apply)) const __count__, __iterator__;/*infloop*/do {function(q) { return q; } } while((new (function  __parent__ () {  } )(4.)));");
tryItOut("let ([], __count__ = -3/0.propertyIsEnumerable(\"__proto__\")) { continue ; }");
tryItOut("do {L: <!--yy-->/*for..in*/for(var __iterator__ = (__iterator__//h\n|=(*::*)[null]) in (0x99)) break L; } while((({__proto__: (({ __proto__: ({ __proto__: __proto__, __iterator__: __count__ }), prop: ({ prop: __noSuchMethod__ }) }) = yield.__iterator__ = this.zzz.zzz)})) && 0);");
tryItOut("throw __parent__;");
tryItOut("");
tryItOut("{yield; }");
tryItOut("let(__noSuchMethod__ = 3.141592653589793, constructor = <x><y/></x>) { yield window;");
tryItOut("{/*for..in*/for(__count__ in (((1 for (x in [])))())){export return;; } }");
tryItOut("if((({}).hasOwnProperty(@foo))) {( /x/g );gc() } else  if (*::*) gc()");
tryItOut("/*infloop*/for(var prop; __count__ = true; (-1 ? window : window)) /*infloop*/M:while(.2){const constructor, __count__; }");
tryItOut("var __noSuchMethod__ = window;\n[,];\n");
tryItOut("let (constructor, __iterator__ = 3/0 @ <>arguments</>) { if((this.__defineGetter__(\"constructor\", *::*))) { if (({__iterator__: __noSuchMethod__ = <x><y/></x> >= <><x><y/></x></> *= <x><y/></x> })) {yield *.watch(\"__proto__\", (new Function(\"export prop;\"))); }} else {export prototype; } }");
tryItOut("var prototype, __iterator__ = default: <><x><y/></x></>;break; ; const __noSuchMethod__;");
tryItOut("/*infloop*/while(constructor = __proto__)while((\f<><x><y/></x></>) && 0)const prototype = -1, __count__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(delete this.zzz.zzz; ([({a1:1}).hasOwnProperty(\"constructor\")].some(Math.pow)); __iterator__.(Math.sin).call getter= (new Function(\"return;\"))) {function(y) { yield y; return;; yield y; } }");
tryItOut("{/*for..in*/for([__iterator__, __iterator__] =  /x/g .propertyIsEnumerable(\"__proto__\") in <y><z/></y>) \t{}if([1,2,3,4].slice , prop) { if ([z1,,] *= <x><y/></x>) {yield; } else {throw @foo; }} }");
tryItOut("export __parent__");
tryItOut("return (((this for (function::<><x><y/></x></> in window)))());");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/for(const __iterator__ in __parent__) { }");
tryItOut("if(yield) { if ((<y><z/></y>.__noSuchMethod__).@*) {switch((__count__.prototype getter= ({}).hasOwnProperty)) { case 9: case 1.2e3 >= __count__:  } } else {return  \"\" ;export __iterator__; }}");
tryItOut("<!--yy-->");
tryItOut(";");
tryItOut("L:if(<x><y/></x> >>>=<x/>) {(1e81);with({prototype: false}){ } }");
tryItOut("{ }");
tryItOut("do {yield;yield 5.0000000000000000000000; } while(((eval(\"yield <y><z/></y>;\", null))) && 0);");
tryItOut("if(new __noSuchMethod__ = <><x><y/></x></>()) { if (( \"\" (this, {})) ? 'fafafa'.replace(/a/g, __parent__) : {} && @foo)  else {const __proto__, prop = constructor;(<x><y/></x>); }}");
tryItOut("{let (function::__proto__ =  set __noSuchMethod__ __iterator__ ()true, constructor = undefined) { return; } }");
tryItOut("/*infloop*/for(this.zzz.zzz; <xxx>{\fprop}</xxx>; new (true)(-3/0)) {(true); }");
tryItOut("/*infloop*/do ; while(window);");
tryItOut("/*for..in*/for(const __parent__ =  /x/  <<= <><x><y/></x></> in <x><y/></x>) {}");
tryItOut("if(<x><y/></x> >>>=<y><z/></y>.watch(\"__proto__\", throw StopIteration;)) return; else <x/> ? <y><z/></y> : <><x><y/></x></>--");
tryItOut("if((function  __parent__ (constructor, <x><y/></x>) { return *::* }  % prototype.constructor)) {/*for..in*/for(__count__ in ((/a/gi)((({__noSuchMethod__: __noSuchMethod__, __proto__ setter: (1 for (x in [])) })))))(<x/>);while(((-0)) && 0)export *; } else  if ([15,16,17,18].some('haha'.split, (<y><z/></y>.unwatch(\"get\")))) {/*infloop*/for(const prop;  '' ; false) ({}).hasOwnPropertyM:if((null\n)) { if (({__noSuchMethod__: (constructor = __iterator__)})) {return <x><y/></x>;throw <y><z/></y>; }} else {{return <y><z/></y>;{} } }\n } else __noSuchMethod__ = *;");
tryItOut("do constructor = __parent__; while(((<x><y/></x>.(undefined)) ? <><>yield true++ * @foo</></> : [[({ prop: prototype }), ({ __noSuchMethod__: yield, prop: [] }), , ], ((false |= <x><y/></x>))(window << ({})), ({ <x/>: ({ prototype: __count__, __count__: [, prop, this, constructor, __count__] }), __parent__: constructor }), ] = __noSuchMethod__ ? <><x><y/></x></> : <><x><y/></x></>) && 0);");
tryItOut("throw __count__;");
tryItOut("<xxx {__noSuchMethod__}={<y><z/></y> * 1.2e3} />");
tryItOut("let (__proto__ = (p={}, (p.z = (window.__lookupGetter__(\"__proto__\")) != <x/>.hasOwnProperty(\"__count__\"))())) { return; }");
tryItOut("/*infloop*/do if(undefined) {} else return 3/0; while(new ( /x/ .valueOf(\"number\"))((eval(\"\", ({a2:z2})))), .2);");
tryItOut("I");
tryItOut("/*infloop*//*\n*/for(const __noSuchMethod__; #1=[#1#]; function ([y]) { }) {let __proto__ = __parent__; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(__proto__ in ((/a/gi)(<><x><y/></x></>.valueOf(\"number\")))){/*for..in*/for(var __parent__ in constructor) {return <><x><y/></x></>;{} } }");
tryItOut("return;");
tryItOut("while((-3/0) && 0){;; }");
tryItOut("let __iterator__ =  /x/ ;");
tryItOut("/*for..in*/for(constructor in ((function (({ setter: ({ prototype: __parent__, __proto__: ({ __iterator__: prototype }) }), __parent__: __noSuchMethod__ })) { return <x><y/></x> = this.@foo.propertyIsEnumerable(\"constructor\") } )( /x/ ))){this; }");
tryItOut("/*infloop*/for(var __parent__; this.zzz.zzz; <y><z/></y>.eval(<y><z/></y>)) {return undefined; }");
tryItOut("return;");
tryItOut("var __parent__, prop = <y><z/></y>; const __proto__;");
tryItOut("if(__proto__ = <y><z/></y>.__defineSetter__(\"prop\", eval)) {L: try { let(__parent__ = #3={a:#3#}, __noSuchMethod__) { (@foo); } finally { return <y><z/></y>--; }  }");
tryItOut("/*for..in*/L:for(let __iterator__ = <><x><y/></x>/*\n*/</> in <><x><y/></x></>) ;");
tryItOut("if([<x/> for each (prototype in <x><y/></x>)]) { }");
tryItOut("if() {(window);yield; } else  if (([,,z1].prototype)) ");
tryItOut("var __iterator__, __count__;\nyield;\n");
tryItOut("/*for..in*/for(const __proto__ = window[true] in this.__defineGetter__(\"prop\", new Function).__lookupGetter__(\"__iterator__\")) ");
tryItOut("/*infloop*/M:for(const prototype; (let (prop) 1e4); new Iterator(__parent__ = null)) __iterator__");
tryItOut("if(<><x><y/></x></>) yield; else  if (<x/>) {(__proto__);function ()<x><y/></x> } else {yield  '' ; }");
tryItOut("with({__noSuchMethod__: @foo ?  \"\"  : <y><z/></y>}){/*infloop*/for( \"\" ; [11,12,13,14].sort; arguments + 1e-81) {/*infloop*/while(({a1:1}).unwatch(\"each\")){function  __noSuchMethod__ (__count__) { yield <x><y/></x> }  } }/*for..in*/M:for(const [prop, __parent__] = <><x><y/></x></> in <x><y/></x>) throw  \"\" ; }");
tryItOut("/*for..in*/L:for(let [constructor, __proto__] = __parent__ = null in ({a2:z2})) {evalexport __parent__; }");
tryItOut("/*for..in*/for(const constructor(*.hasOwnProperty(\"prototype\").isPrototypeOf(<x/>.__lookupGetter__(\"__iterator__\"))) in ((function  prop (__proto__, constructor) { yield typeof constructor = getter } )((this.__defineGetter__(\"__iterator__\", Math.pow) ?  \"\"  : function::constructor.__proto__ = __noSuchMethod__)))){L: {;yield; }/*\n*/ }");
tryItOut("return (__iterator__.@foo);");
tryItOut("/*for..in*/for(var ((uneval(<><x><y/></x></>)))(([1,2,3,4].map)()) in ((( ''  /= this).__defineSetter__)(new (<x><y/></x>).watch((__iterator__ |=  \"\" ), <x/>)))){ '' ; }");
tryItOut("return *.__defineSetter__(\"__proto__\", (new Function(\"return #1=[#1#];\")));\n(new Iterator());\n");
tryItOut("continue L;\n{{let (__parent__ = window, __count__ = <x><y/></x>) { ( '' ); } } }\n");
tryItOut("/*infloop*/while([]){{} }");
tryItOut("; const __parent__;");
tryItOut("export prop; const prototype;");
tryItOut("M:if((({}) == this)) { if (this.zzz.zzz) {export __proto__; } else }");
tryItOut("with({__noSuchMethod__: [, __noSuchMethod__, prop] = __count__}){with(this){(<><x><y/></x></>);(5.0000000000000000000000); }/a/gi }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__(constructor\f) in *) {var prop = *, __iterator__ = false;return; }");
tryItOut("do {return ({a2:z2})\n{} } while((__proto__.__iterator__ =  /x/g ) && 0);");
tryItOut("<bbb xmlns:ccc=\" /x/ .@foo\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*for..in*/for(var constructor = null in ([[, constructor, , , ], [__proto__, constructor, __noSuchMethod__], __count__, ] =  /x/ .__proto__ = 0)) yield;");
tryItOut("if(([,].unwatch(\"__noSuchMethod__\") >> ([11,12,13,14].filter))) { if (({__count__:  /x/ .__lookupSetter__(\"set\")})) {if((function::prototype.__noSuchMethod__))  else {throw prop; }/*for..in*/for(var [__noSuchMethod__, prop] = __proto__+=<><x><y/></x></> in <><x><y/></x></>) {}\nthrow __parent__; } else continue ;}");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("if(__noSuchMethod__.(this.__defineSetter__(\"prop\", {}))) M:if(3.141592653589793) throw __iterator__; else  if (*) {yield;return; } else gc()");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <x/>) {{} }");
tryItOut("/*for..in*/for(var constructor in ((({}).__lookupGetter__)((eval(\"({}).hasOwnProperty\", <x><y/></x>).hasOwnProperty(\"__count__\") &= (__noSuchMethod__ = (Number())))))){let (constructor) { yield; } }");
tryItOut("{return; }");
tryItOut("/*for..in*/for(var __parent__ = (__iterator__(window)) in this.__defineGetter__(\"function::constructor\", function (prototype) { export __iterator__; } )) {var __count__;const prop = <x/>; }");
tryItOut("{({a1:1});export __parent__; }");
tryItOut("switch(((1.2e3)[<><x><y/></x></>]).__defineSetter__) { default: if(this) { if (<x><y/></x>) {var constructor; } else yield;}break; case ((uneval(__parent__ = L: throw prototype;))): if([z1]) yield <x><y/></x>; else  if (*::*) {yield;export prop; }(-1);break; case ((delete *::*))[(new (__parent__ = @foo\f))]:  }");
tryItOut("M:if(prop.isPrototypeOf(__iterator__.__count__ getter= (new Function(\"yield;\")))) { if (__proto__) {/*infloop*/for(033; [,]; <><x><y/></x></>) <x/>; }} else return 1.2e3;");
tryItOut("if(<x/>) {return; } else throw window; /x/g return;return;");
tryItOut("/*for..in*/for(var <x><y/></x> in (((function  __iterator__ ()#3={a:#3#}).apply)( /x/ ))){yield; }");
tryItOut("");
tryItOut("/*for..in*/for(__proto__ = this in <y><z/></y>) {const constructor = <x><y/></x>, __noSuchMethod__; }\n");
tryItOut("return;\nL:if(constructor) break L; else {__parent__ = __count__; }\n");
tryItOut("/*for..in*/for([function::__count__, prop] =  ''  in 1e4) let prop, __noSuchMethod__ = [1];");
tryItOut("/*infloop*/M:for(eval(\"gc()\", @foo); [11,12,13,14].some; ({ set __count__(__count__, set) { let __proto__; } , __noSuchMethod__: ({prop: __iterator__ }) })) {}");
tryItOut("let (get = this) { export *\n }");
tryItOut("");
tryItOut("/*for..in*/for([__noSuchMethod__, prototype] = return in ({}).hasOwnProperty = 1.2e3) return <><x><y/></x></>;");
tryItOut("if(window) { if (prop) {} else {}}");
tryItOut("if(eval(\"case <x><y/></x>: break; case 0: ( /x/g );default: {}const __proto__;\", <x><y/></x>)[<><x><y/></x></>] < __noSuchMethod__ = *) { if ( \"\" ) var __parent__, __noSuchMethod__; else {if(<x/>) {return window; }{var prototype, prop = prototype; } }}");
tryItOut("prototypefinally { yield undefined; } ");
tryItOut("let (prototype = <x><y/></x>) { export prop; }");
tryItOut("switch((*, constructor.(<y><z/></y>))) { default: break; case <><x><y/></x></>.__defineGetter__(\"prototype\", (Math.pow).call) >>>=({ get __parent__ prop (__parent__) { return __iterator__ }  }): /*infloop*/M:while(Array()){export prop; } }");
tryItOut("with({prop: __parent__.__proto__.*}){/*for..in*///h\nfor(constructor in [,,z1]) {export *; }switch(()) { case (function(q) { return q; }).call(<x><y/></x>, null): break; default: break; case 6: /*for..in*/M:for(prop = __proto__ in [,]) export __iterator__;break;  } }");
tryItOut("return;, __proto__;");
tryItOut("with({__proto__: *::*})prop, __parent__\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (~constructor[[]\n])['__proto__'] in <x/>) {/*for..in*/for(let __parent__ in (([1,2,3,4].map)(try { function::__noSuchMethod__; } finally { function ([y]) { } } ))){export *;var prototype = *::*, __iterator__; } }");
tryItOut("{/*infloop*/M:for(const [] = (__count__ = 1.2e3) === (window); eval(\"__iterator__ = *::*, __count__ = *::*;\", <x/> in false); (prop)+=++ /x/g .@foo) {/*infloop*/L:while(<><x><y/></x></>){{}let __iterator__; } } }");
tryItOut("/*infloop*/while([z1,,]){export __proto__; }");
tryItOut("do continue M; while((#2=<y><z/></y>) && 0)\nM:with({constructor: (yield __iterator__ = -1)}){}\nthrow <x/>;\n");
tryItOut("/*infloop*/do {({}).hasOwnPropertyif(true.watch(\"0\",  '' )) {{} } else {yield 0;;\f } } while((({<employee id=\"1\"><name>Joe</name><age>20</age></employee>yyy, __count__: *::* })));");
tryItOut("let(__proto__) { this.zzz.zzz;");
tryItOut("/*infloop*/for(const __noSuchMethod__; this.__defineSetter__(\n\"constructor\", ().unwatch(\"prop\")); (__count__.prototype setter= Math.pow)) {yield; }");
tryItOut("M:with({__iterator__: constructor.prototype.__proto__})/*for..in*/M:for(!<x/> in *) switch(const prop, __parent__;) { default: *;break; case 1: let prop =  /x/ ; }");
tryItOut("L:if((({ get prop() }))) { if (__count__.__noSuchMethod__ = this) {export *; }} else return;");
tryItOut("with({}) let __iterator__ = eval(\";\", ({constructor: <x><y/></x>}));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in @foo) { { (<x><y/></x>); } const prop; }\n/*for..in*/for(__count__ = (new (<y><z/></y>)(this)) in <><x><y/></x></>) {*::*;return  \"\" ; }");
tryItOut("/*infloop*/for(__iterator__; ; <bbb xmlns:ccc=\"new (prototype+=[[1]])((new ( '' )(*,  \"\" )))\"><ccc:eee></ccc:eee></bbb>) {/*for..in*/for(var __iterator__ in  /x/ ) return;yield; }");
tryItOut("{L:if(({__iterator__: [[1]]}))  { yield __parent__ = __noSuchMethod__.propertyIsEnumerable(\"__proto__\") }  else  if (<{__parent__}><x><y/></x>yyy</{__parent__}>.(false.prop)) {export *;; }L: {(function ([y]) { })();if(<x><y/></x>) return #1=[#1#]; else (*::*); } }");
tryItOut("{return;export *; }");
tryItOut("/*infloop*/M:do {const __parent__ = this; } while(<><x><y/></x>\f</>);");
tryItOut("with({}) throw StopIteration;");
tryItOut("if(+function (prop, prototype) { yield [1] } (0x99, @foo)) {(1 for (x in []))if(<x><y/></x>) { if (this) true;} else {return #3={a:#3#}; } } else  if (prototype.__iterator__ = (gc)( /x/ , <x/>).__noSuchMethod__ = undefined) {yield 1e+81;if( '' ) { if (<y><z/></y>) ;} else {return __iterator__; } }");
tryItOut("/*infloop*/M:do {({}).hasOwnPropertyexport *; } while((function(y) { yield y; var __noSuchMethod__;; yield y; }((<x/>.@*))));");
tryItOut("if(<x/>) \f{3.141592653589793;let try { (<><x><y/></x></>); } finally { yield; } ; } else  if ( /x/ ) var __noSuchMethod__;");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("L:if(__parent__ = (window)[*]) {return *;var prototype; }");
tryItOut("if(--(( \"\"  ? * : \t*::*))(+<x><y/></x>, -1)) { if (3) /*infloop*/for(let __proto__;  /x/g ; this) {window;export constructor; } else var constructor, __proto__ = __iterator__;}");
tryItOut("let constructor, __iterator__;");
tryItOut("return \fconstructor.watch(\"prototype\", (Math.sin).apply);");
tryItOut("/*infloop*/for(export __proto__;; <x><y/></x>.prototype = constructor; (prototype = __parent__)) {L: { }(*); }");
tryItOut("var __parent__ = *, constructor = <x/>;\nconst constructor;\n\nprop = <><x><y/></x></>, __iterator__ = __noSuchMethod__;\nexport *;\n");
tryItOut("switch(((((1e-81).apply)(function ([y]) { }, <x><y/></x>)).eval(( '' ))) .@*::  \"\" ) { case  '' .isPrototypeOf(<x/>).*: throw __iterator__;break; break; break; default: /*infloop*/do {export *;const constructor; } while(<x><y/></x>);break;  }");
tryItOut("/*for..in*/for(const ((new Boolean(<x><y/></x>, window))--)(new Math.pow()) in ((gc)(prototype.__lookupSetter__(\"__parent__\")))){do {yield;break L; } while((<x><y/></x>) && 0)\nyield <y><z/></y>;{} }");
tryItOut("with({}) prop = __proto__;");
tryItOut("/*infloop*/L:do let (__proto__, __count__) { yield; } while(<><x><y/></x></> ^= <><x><y/></x></> / function(id) { return id });");
tryItOut("{[1,2,3,4].slice }");
tryItOut("{yield; }\t");
tryItOut(" { return  /x/  } ");
tryItOut("/*infloop*/for(this.__defineSetter__(\"__parent__\", function () { yield true } ); this.zzz.zzz; __parent__.constructor = *::*) \texport __noSuchMethod__;");
tryItOut("/*for..in*/for(var __parent__((let (prototype =  { yield ((#1# if (*::*))).__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map) } ) (<><x><y/></x></>.yoyo(window)))) in (Boolean(*::*.valueOf(\"number\"), prototype))) {break L;yield eval(\"let (prototype) (function ([y]) { })()\", false.@*), *::* >>> [,]; }");
tryItOut("L:if(__proto__) { if ([11,12,13,14].filter) ;} else (<y><z/></y>);");
tryItOut("/*for..in*/for(let getter in []) {;var __iterator__; }");
tryItOut("do {if(new 033()) ; else {; }{{}let __proto__ = <x><y/></x>; } } while(((( \"\" .@*))[[1]]) && 0);");
tryItOut("{M:do {continue M;gc() } while(('fafafa'.replace(/a/g, function (prototype) { yield <x><y/></x> } )) && 0); }");
tryItOut("if(<x/> ? __iterator__ : (function ([y]) { })()) { if (033.@*) prop, __iterator__ = <y><z/></y>; else {let set = true, __iterator__; }}");
tryItOut("L: {continue ;return __iterator__; }");
tryItOut("L:if(1e81.__lookupGetter__(\"(function ([y]) { })(yield [[]];)\")) {/*infloop*/for(({ __iterator__: constructor, __count__: __iterator__ }) = (<x/>.yoyo(__proto__ ^ false)); <zzz>(<x><y/></x>--)</zzz>; (<x><y/></x>.valueOf(\"number\"))) {(-0) }/*infloop*/L:for(__parent__ = (delete true); (prototype && <><x><y/></x></>); .yoyo(0.1)) \f(<y><z/></y>); } else  if (new <x><y/></x> >= [[1]](new (Function)([[]]), #2=[({prop: null for each (__parent__ in  /x/g )})])) <> </> else {let (__iterator__) { var __count__, prototype; } }");
tryItOut("<y><z/></y>;");
tryItOut("let(__noSuchMethod__ = eval(\"this\", undefined)) { yield !window;");
tryItOut("if(( ''  .@x:: <x/>)) {throw 0x99;gc() } else {let (__noSuchMethod__ = __noSuchMethod__, prototype) {  /x/  } }");
tryItOut("var __count__ =  /x/ \n/*infloop*/for(var __noSuchMethod__ =  '' ; true; *::*) {var prop; }\n");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("{with(window){const prototype = *, __parent__ = <><x><y/></x></>;\texport *; } }");
tryItOut("if(( /x/ [*::*])) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in *) const __count__;");
tryItOut("{/*infloop*/for(prototype; <x><y/></x>.watch(\"constructor\", [1,2,3,4].map); yield 1e81) {{}yield; }/*infloop*/L:for(const __proto__; window; ([11,12,13,14].map).__defineGetter__(\"__iterator__\", function(q) { return q; })) {} }");
tryItOut("return;");
tryItOut("/*infloop*/do continue M; while((<x/>.watch(\"__proto__\", function  __proto__ () { yield  /x/g  } )));");
tryItOut("{constructor }export *;gc()");
tryItOut("/*infloop*/do {continue ; } while(({}));");
tryItOut("if(__proto__ = false) { if (-3/0) {(this); }} else ;");
tryItOut("/*infloop*/\tfor((prop)[__noSuchMethod__+=<><x><y/></x></>]; ({__proto__: (__count__ &= __parent__\t)}); prototype.__count__ = false) {while((*) && 0){;throw <x><y/></x>; } }");
tryItOut("while(((Function != (__noSuchMethod__ = __parent__ ?  /x/g  : __parent__+=__parent__))) && 0){if(*::*) { }L:do yield; while((__iterator__.prop = null @ <><x><y/></x></>) && 0); }");
tryItOut("with({__noSuchMethod__: 1e81.__lookupGetter__(\"prototype\")}){ }");
tryItOut("if((p={}, (p.z = ({__parent__: __count__ = <x/>.@foo}))())) /*infloop*/for(true.unwatch(\"prop\"); <><bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb></>; null.watch(\"__parent__\", new Function)) throw [1]; else  if ((yield  \"\" .propertyIsEnumerable(\"let (__count__, __parent__ = 0/0) this, new (<><x><y/></x><\\n/>)()\"))) /*for..in*/for([prototype, prototype] = __noSuchMethod__.__parent__ in [z1]) {}");
tryItOut("{yield <y><z/></y>; }");
tryItOut("/*for..in*/L:for(const [__proto__, prop] = (prototype+=[,,z1]) in __parent__+=<x><y/></x>) {return;<x/>; }");
tryItOut("with({prototype: (__count__ = <x/> >>= (-this))}){do {gc() } while((<y><z/></y>) && 0);; }");
tryItOut("{/*for..in*/for([constructor, __iterator__] = ( /* Comment */new (__parent__.__noSuchMethod__)(('fafafa'.replace(/a/g, (1 for (x in [])))))) in new ( /x/  != window)(<y><z/></y> & window)) {__iterator__ }var prop }");
tryItOut("(<><x><y/></x></>)");
tryItOut("with(__parent__){L:if(0/0) {'haha'.split } else  if (<x><y/></x>) gc()const __noSuchMethod__ = <x><y/></x>, __iterator__ = <x><y/></x>; }");
tryItOut("/*infloop*/do <><x><y/></x></> while(true);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __iterator__ = (__iterator__.__parent__ setter= this)) {constructor = <><x><y/></x></>, __iterator__;yield; }");
tryItOut("let(__noSuchMethod__ =  /x/  / <><x><y/></x></>) ((function(){return null;})());");
tryItOut("{(<><x><y/></x></>);const __count__, [,,z1]; }");
tryItOut("let(__iterator__) ((function(){let([] = constructor) { for(let y in []);})());");
tryItOut("switch(#0=({__iterator__: this ?  /x/  : prop, prop})) { case \nthis: default: break; break;  }");
tryItOut("/*infloop*/while(this.__defineSetter__(\"__count__\", __proto__))if(__count__) yield <x><y/></x>; else {return; }");
tryItOut("let(__noSuchMethod__, prototype) ((function(){__iterator__ = __count__;})());");
tryItOut("if(new (function(q) { return q; }).call()) { if (void <x><y/></x>) {(1.2e3); } else { /x/g return; }}");
tryItOut("/*for..in*/for(prototype in (constructor = __parent__)) {return;/*for..in*/for(let __count__ in  /x/g ) {return  '' ;export *; } }");
tryItOut("M:if(false.hasOwnProperty(\"constructor\")) (window.__lookupGetter__(\"prototype\")); else if((eval(\"prop.__count__\", (new window( /x/ ))))) {{} } else {yield;var __iterator__ = (-1); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (prop.__parent__) in (p={}, (p.z = (this.zzz.zzz))())) {let prop = (0.1.__noSuchMethod__);throw function(id) { return id }; }");
tryItOut("return;");
