tryItOut("if(__count__ = <x/>) let(prototype) ((function(){return <x/>;})()); else /*infloop*/for(3/0; @foo; <x><y/></x>) {}");
tryItOut("while(((#1# |  ''  *= (__noSuchMethod__))) && 0)constructor;");
tryItOut("if((new (((\tnew ((-0))() .@*:: true if (*::*)) || (uneval(arguments))))((function::constructor = __iterator__)))) { if (<bbb xmlns:ccc=\"((1 for (x in []))).call([[1]], /*for..in*/for(let [prototype, __iterator__] =  /x/  in  \"\" ) (window);, window)\"><ccc:eee></ccc:eee></bbb>) {throw this.zzz.zzz;(@foo);<x/>; }} else <x/>;");
tryItOut("{const prototype,  = <x><y/></x>; }");
tryItOut("/*infloop*/for(var __proto__; __parent__.__iterator__ = (constructor = *) ? __proto__.__count__ = ((prop.__iterator__ !== 0x99).eval(<><x><y/></x></>[*::*] + ()))//h\n : eval(\"[<x><y/></x>].sort([1,2,3,4].map)\", (prop = true))((p={}, (p.z = __noSuchMethod__)()), [[]][null]); <><zzz>(({__iterator__ getter: ((({__iterator__: <x><y/></x>})) ? typeof  /x/  : new ({}).hasOwnProperty(<><x><y/></x></>)) }))</zzz></>) {while((new <y><z/></y>(*::*)) && 0)return false;; }");
tryItOut("return <><x><y/></x></>;");
tryItOut("do (this); while((<><x><y/></x></>.yoyo(<><x><y/></x></>)) && 0);");
tryItOut("/*for..in*/for(__proto__ = [11,12,13,14].some in (new (new Function(\"return #3={a:#3#};\"))())()) /*for..in*/for(const new String(<><x\t><y/></x></>, <><x><y/></x></>)['__parent__'] in  \"\"  & <y><z/></y>) ;");
tryItOut("if(<x><y/></x>) yield <x/>; else  if (0x99) {}");
tryItOut("if((this.__defineGetter__(\"prop\", (Function).apply))) {yield 1e81yield; } else  if (.2) if((p={}, (p.z = ((uneval(<><x><y/></x></>))))())) \t([])\n else {break ;(<y><z/></y>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in true) <><x\f><y/></x></>");
tryItOut("/*for..in*/for(__count__.__noSuchMethod__ in <x><y/></x>.(<x/>)) const __count__ = <x/>;");
tryItOut(" /x/g ");
tryItOut("return;");
tryItOut("if( \"\" .yoyo(5.0000000000000000000000)) { if ((({__count__: prop = <x><y/></x>, constructor: ({prop: prototype = this}) }))) {if((this :: *)) /*infloop*/for(var yield; <y><z/></y>; <x/>) { } } else for(let y in [5,6,7,8]) {}}");
tryItOut("{[1,2,3,4].slice; }");
tryItOut("(false)\n/a/gi");
tryItOut("switch(*::*.__lookupGetter__(\"__iterator__\")) { default: gc()break;  }");
tryItOut("with(\n({}) .@*:: <x><y/></x> ? 033.isPrototypeOf(3.141592653589793) : prototype)export *; const __count__;");
tryItOut("__parent__");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __count__ = (eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <y><z/></y>) {var __count__ = __proto__, __proto__ =  \\\"\\\" ;return; }\", <x/>)) in constructor) {(<y><z/></y>);export *; }");
tryItOut("let (__iterator__ =  \"\" ) { if([1]) \n([1,,]); }");
tryItOut("if(eval(\"let prop = <y><z/></y>, __parent__\\nprototype;\", (prop = (<><x><y/></x></>)()))) {;return; } else  if ((@foo.watch(\"__iterator__\", (Function).apply))) if(<><x><y/></x></>\n) yield; else  if (@foo.valueOf(\"number\")) \texport let; else return prop;\t");
tryItOut("L:while(([<x><y/></x>]) && 0)(@foo);");
tryItOut("if(({a2:z2})) {export *; } else  if (1.2e3) {constructorgc() }");
tryItOut("L:if(window) {/*infloop*/M:for(__iterator__.hasOwnProperty(\"__noSuchMethod__\"); ( '' )(null, -3/0)\f; <><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")) {{}return; } } else  if ((Math.pow)(this.__defineGetter__(\"__iterator__\", true))) window;");
tryItOut("/*infloop*/do {yield;return true; } while(@foo);");
tryItOut("L: /*for..in*/for(const (prop) = [z1] in <><x><y/></x></>) export *;");
tryItOut("return;");
tryItOut("/*for..in*/for([11,12,13,14].map in this) ");
tryItOut("let(({ __noSuchMethod__: ({ __proto__: __count__ }) }) = (\n__count__.prototype)) ((function(){__noSuchMethod__.prop = set;})());");
tryItOut("let (prototype = this) { const prop =  '' , <x><y/></x>; }");
tryItOut("constructor");
tryItOut("/*infloop*/for(var __parent__; <y><z/></y>;  /x/ ) {yield  '' /*infloop*/for(const __noSuchMethod__; constructor & <y><z/></y>; <x><y/></x> ? {} :  '' ) {continue M;prototype } }");
tryItOut("if( '' ) {yield <x><y/></x>; } else let __parent__, prototype;");
tryItOut("if(null) continue ; else  if ( \"\" ) {throw <x/>; }");
tryItOut("return <bbb xmlns=\".2\"></bbb>;");
tryItOut("/*infloop*/do {continue L;(null); } while([yield *::*].filter(<><x><y/></x></>.__defineGetter__(\"__parent__\", arguments)\f += --[,,z1]));");
tryItOut("/*for..in*/for(var __parent__ = function(id) { return id } in constructor) ");
tryItOut("{const prop, ;var constructor = window;\nexport __iterator__;\n }");
tryItOut("try { with({}) continue ; } catch(__noSuchMethod__ if (function(){prototype = prototype;})()) { for(let y in []); } catch(__noSuchMethod__ if (\r__iterator__ = prop)) { let(__proto__, __noSuchMethod__ = <y><z/></y>) { export *; } catch(__parent__ if (yield prototype, default: /*infloop*/do {let yield = function(y) { yield y; return <><x><y/></x></>;; yield y; }, __proto__ = constructor;@foo; } while({});)) { return ; } catch(prototype if __parent__ = arguments.valueOf(\"number\")) { this.zzz.zzz; } catch(__parent__ if [__noSuchMethod__]) { return  /* Comment */<x/>; } finally { __noSuchMethod__ = window, __proto__; } ");
tryItOut("/*for..in*/for(let constructor = (eval(\"({prop: <y><z/></y>, __iterator__: <x><y/></x> })\", (prop = <x><y/></x>)))\f in  \"\" .__parent__ = __proto__ = new <y><z/></y>()) L:if((#0=(constructor) = <x><y/></x>)) if((#1=({__iterator__: <x><y/>\t</x>}))) {export prototype;export *; } else  if (false instanceof window) {{} } else yield window;");
tryItOut("M:if(([({a1:1})])) {{const <x><y/></x>, prototype = 1.3; }(*);\nthrow <x><y/></x>;\n } else  if (eval(\" /x/ \", #1=[#1#])(<><x><y/></x></> .@*:: prototype) >>= window ^= [[]]) default: break;  else {let (prototype = function ([y]) { }) { throw constructor; }\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in *) break \nyield <x><y/></x>;//h\n");
tryItOut("with(eval(\" '' \", this.zzz.zzz))L: {gc() } const constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__iterator__) in 1.2e3) {yield constructor;let __proto__, constructor; }");
tryItOut("L: /*infloop*/do yield <><x><y/></x></>; while(null .@*:: <><x><y/></x></>);");
tryItOut("{}\nreturn <x><y/></x>.(this);");
tryItOut("{/*for..in*/M:for(var [__noSuchMethod__, __iterator__] = __iterator__ in  /* Comment */(this)[0x99]) /*for..in*/for(var prototype in 0x99.constructor) yield; }");
tryItOut("{return  { return <x/> } ; }");
tryItOut("/*for..in*/for(const prototype = \n(constructor.__noSuchMethod__ = .__defineSetter__\"__count__\", (1 for (x in []))) in (Math.sin)().__count__) /*for..in*/for(var [prototype, true] = @foo in this) export *;");
tryItOut("with((false.@foo)){/*infloop*/M:for(let __proto__; [[]]; __noSuchMethod__) <x><y/></x>; }");
tryItOut("/*infloop*/for(const ({ __parent__: __count__, prop: prop }) = ((<><!--yy--></>.(false.@*)).__lookupGetter__(\"constructor\")); ({ set __count__(__iterator__, __proto__)<y><z/></y> }).isPrototypeOf(return 1e-81;); delete (new (Math.pow)() .. -3/0 ^=  \"\" )) {/*infloop*/L:do {} while((({ __count__: __parent__ }) = null == (__count__.((<x><y/></x> *= <x/>))))); }");
tryItOut("/*infloop*/for(const constructor = function  __iterator__ ()(<><x><y/></x></>).__defineSetter__(); (window &  /x/g ); ((new ( \"\" )() !== (prototype.( /x/ )) > prototype.__iterator__).eval((this.__defineGetter__(\"__parent__\", (<x/>).__defineSetter__) ? <><x><y/></x></> : Array(this))))) return <><x><y/></x></>;");
tryItOut("/*infloop*/for(let __noSuchMethod__; [1,2,3,4].slice();  /x/g ) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in this.__defineGetter__(\"__iterator__\", 'haha'.split)) {continue M; }");
tryItOut("/*infloop*/for(const gc(); <zzz><y><z/></y>.isPrototypeOf( /x/ )</zzz>; (0.1)) \r__parent__ = this\n");
tryItOut("L: {;return <x/>; }");
tryItOut("/*infloop*/while(<x><y/></x>)throw x::function::__count__, __noSuchMethod__;");
tryItOut("({}).__lookupGetter__\n");
tryItOut("M:with({__parent__: <><x><y/></x></> & <><x><y/></x></>.unwatch(\"__count__\") |= __parent__ = (-0).yoyo(undefined--)}){export __noSuchMethod__;export prop; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const __proto__ = ({prop: 0x99 }) in 'fafafa'.replace(/a/g, (function (__iterator__, [) { yield #1= \"\"  } ).apply)) /*infloop*/for(__count__; [11,12,13,14].sort(); true.hasOwnProperty(\"__parent__\")) {throw __iterator__;while((<><x><y/></x></>) && 0)get = 1e4; }");
tryItOut("/*for..in*/for(let function::constructor in (* for each (__proto__ in <y><z/></y>)).valueOf(\"number\")) let (constructor =  { yield <><x><y/></x></> }  != null, __proto__) { /*infloop*/M:while((eval(\"-3/0\", (<y><z/></y> / -3/0)))){gc()/*for..in*/M:for(const prop in  '' ) let __iterator__ = [z1,,]; } }");
tryItOut("/*for..in*/M:for(const constructor in <x/>) {const prototype, __iterator__; }");
tryItOut("let (__count__) { export *; }");
tryItOut(";");
tryItOut("with(null[window].__lookupSetter__(\"__parent__\")){let (__count__ = 1e4) { throw [z1,,]; } }");
tryItOut("/*infloop*/M:for(let ({ __noSuchMethod__: __iterator__ }) = (({__noSuchMethod__: constructor })); (let (getter = false)  \"\" ); <y><z/></y>) {}");
tryItOut("while(((__parent__.__proto__)) && 0)var __parent__ = <x><y/></x>, prop = prop;");
tryItOut("let(__parent__ = (@foo |= [function(id) { return id } for (prototype in  \"\" ) for each (__iterator__ in  '' )]), ({ <!--yy-->: prop.__count__ })) { for(let y in [5,6,7,8]) with({}) { let(prop, __parent__) { return; } ");
tryItOut("(<><x><y/></x></>)");
tryItOut("with([15,16,17,18].map(({}).hasOwnProperty, true).__parent__)return\n{export *; }");
tryItOut("/*infloop*/do {gc()yield } while([(false <= <><x><y/></x></>)].map(function(y) { yield y; const __noSuchMethod__;; yield y; }));");
tryItOut("constructor = __iterator__;");
tryItOut("/*infloop*/L:for(( ? ((uneval(*::*))) : let (yield, __noSuchMethod__) true.yoyo([(__proto__.__parent__ = false)[__parent__.__parent__ getter= eval]])\t); (__noSuchMethod__.constructor setter= Math.pow); this.__defineSetter__(\"__parent__\", function(q) { return q; })) export constructor;");
tryItOut("L:if(__proto__) -1; const constructor;");
tryItOut("while((<y><z/></y> ? window : <><x><y/></x></> .@x:: eval(\"L:if(<x><y/></x>) {let __proto__ = <x><y/></x>, __proto__ = (-1); } else  if (null) break L;\", *)) && 0){export __noSuchMethod__;(this); }");
tryItOut("/*for..in*/for(var __proto__ = __parent__.(0x99).__iterator__ = __iterator__ = (function ([y]) { })() in (--<x><y/></x>.@*)) {gc()/*infloop*/M:for(({ __proto__: __parent__, prototype: __iterator__ }) = new (prototype)(); null; ([@foo])) {gc() } }");
tryItOut("const constructor =  \"\" , __parent__\n");
tryItOut("constructor =  /x/g , prototype");
tryItOut("if(033\f) /*infloop*/L:do {} while(prop-=__noSuchMethod__); else  if ((__iterator__ = *)(((-0))[<x/>], false).__defineGetter__(\"__parent__\", -0)) (({__iterator__ getter: /a/gi })); else export *;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(let prototype = <><x><y/></x></> in 1e-81) continue L;");
tryItOut("yield function ([y]) { };\ngc()\n");
tryItOut("switch((+5.0000000000000000000000)) { case 1: ;break; return <x><y/></x>;break; break;  }");
tryItOut("/*infloop*/L:do {yield #3={a:#3#};yyy } while((prop.hasOwnProperty(\"constructor\")));");
tryItOut("if(__iterator__) this; else {var prop, __iterator__ = null; }");
tryItOut("M:do {gc()break L; } while(([z1,,]) && 0);");
tryItOut("throw null;");
tryItOut("let (__noSuchMethod__ = window, prop) { gc() }");
tryItOut("let (__noSuchMethod__ = 0.1) { /*infloop*/do {const __iterator__;eval } while(__parent__); }");
tryItOut("__iterator__ = __proto__;");
tryItOut("M:if([15,16,17,18].map(function (prototype, __noSuchMethod__)(yield [15,16,17,18].map([1,2,3,4].slice,  /x/g )), ((eval).call(3/0, <x><y/></x>).yoyo(<><x><y/></x></>.prototype = <><x><y/></x></>)))) { if (__iterator__.__parent__ = <y><z/></y> for each (prototype in [z1,,]) & 1.3) ;} else {gc()/*for..in*/for([__count__, constructor] = *::* in @foo) return *::*; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for((new ((window['__proto__'] = [11,12,13,14].map))()); ({ set __count__(constructor, prototype) { yield <><x><y/></x></> } , prop:  /x/g  }); [, __iterator__] = ( \"\"  ? <x/> : <y><z/></y>)) ;");
tryItOut("/*infloop*/for(const [__parent__] = (new (new ({}).hasOwnProperty( /x/ , <x><y/></x>)).watch().propertyIsEnumerable(\"prop\")); *::*; true) gc()");
tryItOut("/*infloop*/while(__count__)gc()");
tryItOut("do {return (<x><y/></x>\n);return; } while(([15,16,17,18].map(/a/gi, ())) && 0);");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: [, ({ constructor: ({ prototype: __noSuchMethod__, __proto__: ({ prop: ({ prototype:  }) })\t }) }), , , ({ prop: [, , ({ constructor: ({ function::constructor: prototype }) }), , []] })], __iterator__: ({ prototype: __iterator__, __proto__: ({ __count__: [, [], , [({ prop: __noSuchMethod__ }), , , , [, , ]], ], constructor: [] }) }) }) = (this.__defineSetter__(\"__count__\", <><x><y/></x></>).valueOf(\"number\").__defineSetter__(\"prototype\", <bbb xmlns=\"new ((function (__noSuchMethod__, __proto__) { {} } ).call)()\"><><employee id=\"1\"><name>Joe</name><age>20</age></employee><!--yy--></></bbb>)); (__count__ getter: function(y) { yield y; let __proto__, __parent__;; yield y; } });  /x/  >>  ''  = <x><y/></x>) {{throw {}; } }");
tryItOut("while((((this === <y><z/></y>).yoyo( /x/ .__lookupSetter__(\"__parent__\")).isPrototypeOf( '' .@*))) && 0){/*for..in*/for([prototype, __iterator__] = [window] in ({}).hasOwnProperty) {@foo; }do {continue L;prop, prototype; } while((__iterator__) && 0)\n }");
tryItOut("/*infloop*/while( \"\"  %= null)return ({a2:z2});");
tryItOut("/*infloop*/for(var __count__; <x/>; ([(prop .. @foo)].valueOf(\"number\"))) {}");
tryItOut("if(0/0) ; const prop;");
tryItOut("/*for..in*/M:for(let prototype in new (({ __proto__: prop, prototype: __proto__ }) = ({ prop: get, yield: __iterator__ }))(({ prototype: __proto__ }) =  \"\" .watch(\"__count__\", function () {  } ))) {let (__noSuchMethod__) { let prototype = <x/>, __count__ = <><x><y/></x></>; } }");
tryItOut(" { return try { with({}) { with({}) { let __proto__, __proto__ = false; }  }  } catch(__parent__ if (function(){with({}) this.zzz.zzz;})()) { for(let y in []); } finally { let(__noSuchMethod__ = this.zzz.zzz) ((function(){let(constructor) { __proto__\f = __proto__;})()); }  } ");
tryItOut("/*infloop*/for(var [] = (null.__defineSetter__(\"__count__\", function  prototype (constructor) { yield <y><z/></y> } )); (__proto__ = function(id) { return id }); <x><y/></x>.(<x/>)/*\n*/) {var __iterator__, constructor;yield this; }");
tryItOut("let(constructor = ({a2:z2})) ((function(){const prototype = #3={a:#3#}, prototype;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let yield <x><y/></x>['__count__'] in *::*) if([]) { if (({a1:1})) (<y><z/></y>); else throw 1.3;}");
tryItOut("let (__proto__, x::__count__) { let (prop) { ;\n;\n } }");
tryItOut("with(prototype)throw @foo\nreturn;");
tryItOut(";\n/*infloop*/L:for(var prop; ((-1) ? 0x99 : 1e+81); (undefined.prototype.__parent__ = this.__defineSetter__(\"__iterator__\", (Function).apply))) {__proto__ }\n");
tryItOut("");
tryItOut("/*for..in*/for(var (prototype) in  { return; } ) /*infloop*/while((try { <y><z/></y>; } catch(__count__) { <x><y/></x> } finally { break ; } .(<bbb xmlns:ccc=\"__noSuchMethod__%=*\"><ccc:eee></ccc:eee></bbb>))){ }");
tryItOut("__iterator__ = prop;");
tryItOut("__proto__(__parent__) = constructor; const prototype;");
tryItOut("/*for..in*/for(prototype = (__proto__) in [,].eval(window)) ;");
tryItOut("{yield <><x><y/></x></>.prototype; } const prototype;");
tryItOut("return;");
tryItOut("if(\nprop) {break ;continue L; } else  if ('fafafa'.replace(/a/g, function  prototype () { yield window } )) {} else with({__iterator__: 4.})yield;");
tryItOut("__iterator__ = __parent__;");
tryItOut("if(\f<x><y/></x>) { if ([1]) {break M; }} else continue M;");
tryItOut("if(<x><y/></x>.__defineSetter__(\"__parent__\", \tMath.pow)) { if (<bbb xmlns=\" \"\" \"> </bbb>)  else export __noSuchMethod__;}");
tryItOut("(__proto__);\nlet constructor;\n");
tryItOut("if(__parent__) { if (({__iterator__: \f1e81}).__defineSetter__(\"__noSuchMethod__\", (constructor = set).__defineSetter__)) {3/0; }} else (<x><y/></x>)\nexport *;");
tryItOut("while((<x/> -= <y><z/></y>) && 0){(function ([y]) { }); }");
tryItOut("if(eval(\"({__proto__ setter: Math.sin, __proto__: false })\", <><x><y/></x></>.@*)) { if ( /x/ ) {gc()/*infloop*/for(const prototype = 1.3; <x><y/></x>; __count__) var __count__, __count__; } else {export *; }}");
tryItOut("{export *; }");
tryItOut("\n");
tryItOut("/*for..in*/for(var __parent__ = [[1]] in true) ");
tryItOut("{function  prototype () { (window); } prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(window ? prop : true.__noSuchMethod__ in (__noSuchMethod__ = 1.2e3)) switch(new ('haha'.split)( '' )) { case new <y><z/></y>function /(case 3: case false: break; ) { export prototype; } (): propdefault: /*for..in*/\ffor(\t[__iterator__, prop] = <><x><y/></x></> in <><x><y/></x></>) yield __parent__;case * ? @foo : <y><z/></y>: export prototype; }");
tryItOut("{let ({ constructor: constructor, __proto__: __count__ }) = window.__defineSetter__(\"prototype\", function(y) { yield y; var __parent__ = <x><y/></x>, __proto__ = false;; yield y; }), prototype = null; }");
tryItOut("if(<x/> < \t@foo) {return __proto__; } else {default: case *: break; break; case 9: function(y) { yield y; ; yield y; }export prototype;case 2: prop, __parent__;break;  }");
tryItOut("if((constructor|=(--*))) this;");
tryItOut("do {const prototype = *::*; } while(((( /x/g )[<x/>])) && 0);\nyield <y><z/></y> %= __proto__;\n");
tryItOut("try { let(__parent__, __count__) ((function(){__iterator__.prop = __noSuchMethod__;})()); } catch(constructor) { with({}) { this.zzz.zzz; }  } finally { break ; } ");
tryItOut("__count__, __iterator__ = [1]\n");
tryItOut("/*infloop*/do {/*infloop*/for(@foo.prototype = null; (new 3.141592653589793).unwatch(\"__proto__\"); eval(\";\", *::*) in __count__ = __proto__) ; } while((new <><x><y/></x></>() !== window));");
tryItOut("Math.pow");
tryItOut("if(undefined) {if(null) {break ;var prototype = true, prop; } } else  if ((({__count__: yield, __parent__:  ''  }))) {export __noSuchMethod__; } else {yield\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let #1=({constructor: <><x><y/></x></>}) in window.valueOf(\"number\").__count__) {/*infloop*/L:for(var ({ prop: __count__ }); this.__defineGetter__(\"prototype\", /a/gi); \n(1e-81.watch(\"__iterator__\", function  __parent__ (__count__, prototype) { return __count__ } ))) {if(this) { if (*) yield *;} else {}break M; } }");
tryItOut("return __proto__;");
tryItOut("while((1e+81) && 0)continue ;(<x><y/></x>) const __noSuchMethod__;");
tryItOut("if( \"\" ) var __noSuchMethod__ = this, __iterator__; else  if (this) export __iterator__; else ;");
tryItOut("let ([__count__, ({ __iterator__: ({ __iterator__: __iterator__ }), constructor: ({ constructor: __iterator__ }) })] = __proto__ = #3={a:#3#}) { let undefined = <x><y/></x>;\nexport *;\n }");
tryItOut("__iterator__");
tryItOut("with(__count__.__proto__ = (undefined.__iterator__.throw(true .@*:: <x><y/></x>))){this.zzz.zzz; }");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/M:while(new (<x><y/></x>.__parent__)(<x/>.__defineGetter__(\"__proto__\", Math.pow))){{} }");
tryItOut("/*for..in*/for(var prototype in ((/a/gi)((eval(\"5.0000000000000000000000\", __noSuchMethod__).__defineGetter__(\"({ __noSuchMethod__: __iterator__, prototype: __noSuchMethod__ })\", Function)))))with({}) { const __noSuchMethod__, __iterator__ = ({}); } ");
tryItOut("/*infloop*/L:for([15,16,17,18].some((new Function(\"yield;\")), <x><y/></x> @ prop); +#2=[ { yield (__proto__.__count__) } ]; this.__defineGetter__(\"prop\", (( /x/g .prototype)).__defineSetter__)) gc()");
tryItOut("return; const constructor;");
tryItOut("throw constructor;");
tryItOut("/*infloop*/do ({}).__lookupGetter__ while(new ((new Function(\"let x::prototype, __count__ = 0/0;\")))( /x/g ));");
tryItOut("gc()\n");
tryItOut("with({__parent__: ([[,,z1]].some(<x/>))}){-1; }");
tryItOut("L:with(<x/>)/*infloop*/do const __proto__ = [1]; while(<x/>);");
tryItOut("M:if(<><x><y/></x></>) {const __proto__ = *, __iterator__;export *; } else {export function::__proto__;let __parent__ = <x/>; }");
tryItOut("yield;");
tryItOut("let (__count__) { eval const prototype; }");
tryItOut("export *;");
tryItOut("let (__count__) { return; }");
tryItOut("with({__iterator__: <y><z/></y>}){__proto__, __noSuchMethod__ = <x/>;(.2); }");
tryItOut("if(__noSuchMethod__) { if ( /* Comment */<>\t<x><y/></x></>) (function ([y]) { })()} else gc()export *;");
tryItOut("{export __iterator__;var __noSuchMethod__, __noSuchMethod__; }");
tryItOut("if((((/a/gi).call).call)()) { if ((*::*)(<x><y/></x>)) {{/*infloop*/while(<><x><y/></x></>)continue ;<!--yy-->\nexport *;\n }for(let y in []); } else {({}).hasOwnPropertybreak ; }}");
tryItOut("{(<y><z/></y>); }\n/*infloop*/M:for(new (this for each (constructor in [z1,,]))(Iterator((*::* if (<x/>))), this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"return;\")))); __parent__ = <><x><y/></x></>; [11,12,13,14].map = new [1,2,3,4].map(window, this)) {;yield; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__.__parent__ in  '' ) /*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <><x><y/></x></>) (//h\n \"\" );");
tryItOut("L:with(this.__defineGetter__(\"constructor\", (new Function(\"gc()\"))))yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <>(*);</>) return;");
tryItOut("/*infloop*/for(__iterator__ = this; <y><z/></y>; ('fafafa'.replace(/a/g\f, Math.pow))) ;\nexport prop;\n");
tryItOut("const __iterator__, __proto__ = window;");
tryItOut("switch(yield constructor = (*::*\n)) { case ((Math.sin).apply)(String(({}), <x><y/></x>)).@foo: break; default: if(prototype) {return; } else ( /x/g );break;  }");
tryItOut("if((-1)) {yield <x><y/></x>;gc() }");
tryItOut("try { break M; } finally { [1,2,3,4].slice } ");
tryItOut("prototype = __proto__;");
tryItOut("let(__parent__) { ;");
tryItOut("{}");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("throw StopIteration;");
tryItOut("if(Iterator(new String(({prop: this }), <x/>), [1] >>> [,,])) M:switch((prop.__iterator__ = gc())) { default: L:if(__count__ = arguments) { if ((({a1:1}))[<><x><y/></x></>]) var __iterator__ = constructor, prototype = [[1]]; else {{} }}break;  } else  if ( |= <x><y/></x>.@*) {export prototype;const prototype = <><x><y/></x></>; } else {(<><x><y/></x></>);try { gc() } catch(__proto__) { const constructor; } finally {  }  }");
tryItOut("let (__proto__ =  , /*for..in*/M:for(let *.__noSuchMethod__ in ((undefined)(true.eval(__proto__))))continue ;) { do {;yield; } while((<x/>) && 0); }");
tryItOut("do __count__ while((__iterator__) && 0);");
tryItOut("/*for..in*/M:for(const [constructorprototype] =  yyyObject(__proto__, <><x><y/></x></>) in <x/>.@foo) {/*for..in*/for(__noSuchMethod__ =  /x/g  in {}) {(#3={a:#3#}); } }");
tryItOut("/*for..in*/for(var prototype = <y><z/></y> in -1) switch((<x/>)()) { default: break;  }");
tryItOut("/*infloop*/for(var ({ __parent__: ({ function::prop: ({ __noSuchMethod__: ({ constructor: [] }), __parent__: ({ __proto__: [], constructor: constructor }) }) }), __noSuchMethod__: ({ __count__: ({ __proto__: [], constructor: prototype }), __proto__: ({ function::prototype: ({ __noSuchMethod__: [__parent__], __proto__: ({ __parent__: prototype, __parent__: __parent__ }) }) }) }) }) = yield undefined.__defineGetter__(\"prop\", (undefined < true).__defineSetter__); this.__defineSetter__(\"__parent__\", [1,2,3,4].map); ((@foo)(*::*))) if([z1] /  /x/g ) if(1.3) <x><y/></x>; else  if (<x><y/></x>) {export *;throw 0; }");
tryItOut("if(#1=[( /* Comment */case 9: return <x><y/></x>;continue ;break; var __noSuchMethod__;default: break; case __noSuchMethod__: break M;break; case 3: gc()case 7: const prop = <y><z/></y>;break; case [[1]]: break; case  '' : (<><x><y/></x>\f</>);break; continue M;break; )].valueOf(\"number\")) { if ((function(id) { return id } if (*::*)) *= new Error()) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <><x><y/></x></>) {{} }yield; }} else {({});(1.2e3); }");
tryItOut("let (__parent__ = <x/>++) { /*for..in*/for(const __count__ in *::*) let prop = __iterator__; }");
tryItOut("{L: yield <x><y/></x>; }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in ((function () { return  } )((new (<x/>)())))){const function::__proto__ = *::*, 4;[[1]]; }");
tryItOut("{export prop;with(*){let prototype;gc() } }");
tryItOut("new Function");
tryItOut("/*infloop*/for(let __parent__; constructor.yoyo(0x99); *::*) {return;continue M; }");
tryItOut("export *;do {if(true | <x/>//h\n) { if ((let (prop, prototype) <x/> == ( \"\" .__proto__))) {(<><x><y/></x></>); } else {export <x/>;gc() }} } while((<zzz>(Math.sin)(__count__)</zzz> <<= 3) && 0);");
tryItOut("if(new (window)()) { if ((prototype)) export *;} else {yield __iterator__; }");
tryItOut("{ /x/ ;return; }");
tryItOut("while((continue ;) && 0){gc() }");
tryItOut("L: {break ; }");
