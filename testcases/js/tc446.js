tryItOut("if(this.watch(\"prop\", new Function)) { if (__noSuchMethod__%=<><x><y/></x></>) {<x/>;export __noSuchMethod__; } else {[1]throw <x><y/></x>; }}");
tryItOut("do (<><x><y/></x></>); while((__noSuchMethod__) && 0);");
tryItOut("/*for..in*/for([__iterator__, prop] = {} in <x/>) {break ; }");
tryItOut("/*infloop*/L:do {return <x><y/></x>; } while((uneval([,,])))\ncontinue \n__count__;");
tryItOut("if([,,z1].valueOf(\"number\")) var __noSuchMethod__; else  if (new prop()) undefined;");
tryItOut("/*infloop*/do (constructor =  /x/g  += ({constructor: constructor = *::* })) while((constructor.prop = ({a2:z2})).@foo);");
tryItOut("/*for..in*/M:for(const ({ constructor: [] }) in let (prototype = yield prop, prop) (uneval((prop)[this]))) {<x/>;; }");
tryItOut("/*infloop*/for(var constructor;  \"\"  ^= null; null--) {(<x><y/></x>);@foo; }");
tryItOut("{do {yield; } while(( /x/g ) && 0);with(<><x><y/></x></>)__count__; }");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = [15,16,17,18].map((false.unwatch(\"__iterator__\")).watch, [( /x/ .__lookupGetter__(\"__iterator__\")) if (#1#)]) in ([])([1])-=(({constructor: *::*}))) prop, function::constructor;");
tryItOut("var __proto__, __iterator__ = prototype\nreturn __parent__;");
tryItOut("L:with(false)return;\n/*infloop*/do export prop; while(this.__defineGetter__(\"prototype\", [1,2,3,4].slice));\n");
tryItOut("/*infloop*/for(( /* Comment */#2=[eval(\"prototype\", {})]); __count__(<><bbb xmlns:ccc=\"#1#\"><ccc:eee></ccc:eee></bbb></>); (#0=[++false % <x><y/></x>])) window\n");
tryItOut("if(<><x><y/></x></>) {} else {}");
tryItOut("let(__parent__) ((function(){let(prop =  /x/ , __iterator__ =  /x/ ) ((function(){return;})());})());");
tryItOut("while(((Number(__proto__))) && 0){/*infloop*/while(let (prototype, constructor) __parent__)return;yield 0;; }");
tryItOut("/*for..in*/for(const ({ __proto__: __iterator__ }) in __iterator__ = ({ __parent__: [, constructor], get: \f({ __noSuchMethod__: prop }) })) {L: export __count__; }");
tryItOut("/*for..in*/for(const __proto__ = window in <y><z/></y>) {throw [1,,];( /x/ ); }\n");
tryItOut("return;");
tryItOut("/*for..in*/for(var __iterator__ = new Function( '' , (~(\n<x><y/></x>.__lookupSetter__(\"__iterator__\")))) in ([11,12,13,14].sort)) /*for..in*/for(var prototype in __iterator__) export prototype\n");
tryItOut("if(yield (/*\n*/[11,12,13,14].some)) return <y><z/></y>;");
tryItOut("(false);");
tryItOut("({ __count__: __noSuchMethod__((prototype = (Date(<><x><y/></x></>, <y><z/></y>)) + @foo.yoyo(null))), prototype: default: break; case [11,12,13,14].sort: break; let /a/gi;break;  }), __proto__");
tryItOut("L:if((<x><y/></x>.__defineGetter__(\"__proto__\", <{__proto__}><ccc:ddd> </ccc:ddd></{__proto__}>))) ");
tryItOut("/*infloop*/do {const prop = __iterator__, __parent__; } while(<><x><y/></x></>);");
tryItOut("try {  } catch(__noSuchMethod__) { const __noSuchMethod__; } finally { yield; } ");
tryItOut("do /*for..in*/L:for(let __parent__ = (<>/*\n*/<x><y/></x></>['prototype'] = prototype = <x><y/></x>) in <><x><y/></x></>.__noSuchMethod__) break  while((prototype = constructor) && 0);");
tryItOut("/*infloop*/for(var __proto__; (undefined.__parent__); new ( '' )()) {return <x><y/></x>; }");
tryItOut("/*for..in*/M:for(var prototype in ({a2:z2})) break L;");
tryItOut("let (__parent__ = __count__.*) { {} }");
tryItOut("L:if('fafafa'.replace(/a/g, new Function)) var __iterator__ = <><x><y/></x></>; else  if (__noSuchMethod__) true; else {/*infloop*/do {yield __parent__;gc() } while(({ set constructor() { yield <x/> } , __count__ setter: true }))\nfalse; }");
tryItOut("yield (__parent__.__iterator__.*);");
tryItOut("let __count__, prop = <><x><y/></x></>;/*infloop*/for(window; <x><y/></x>; window) { }");
tryItOut("/*infloop*/while(new (window += ({a1:1}))().isPrototypeOf((new RegExp())()).eval(gc())){ }");
tryItOut("/*infloop*/for(const __iterator__; __parent__; this) {; }");
tryItOut("/*for..in*/for(var __iterator__ in ((/a/gi)(-3/0.@* >>=  /* Comment */ /x/ )))return function ([y]) { };");
tryItOut(" { yield prototype.prototype getter= Math.pow } ");
tryItOut("/*for..in*/for(let (true)(__parent__) in ((<><x><y/></\tx></>).call(arguments))) export prototype;");
tryItOut("let __parent__;/*infloop*/for(({a1:1}); <x><y/></x>; 3.141592653589793) {export *; }");
tryItOut("try { __noSuchMethod__ = prototype; } finally { yield [15,16,17,18].sort((new Function(\"({a1:1});\")), (({ __proto__: ({ __noSuchMethod__/*\n*/: prototype }), __proto__: constructor }) = (function (__proto__, prototype) { <y><z/></y>; } )(( /x/g  >= @foo)))); } ");
tryItOut("with({__count__: 5.0000000000000000000000 ? [z1] : 3.141592653589793.throw([z1,,].propertyIsEnumerable(\"__count__\"))})\t{{__iterator__{} } }");
tryItOut("const __iterator__, __proto__ = window;");
tryItOut("return (([]))--;");
tryItOut("return constructor = <x/>\n");
tryItOut("/*for..in*/for(const __count__ = *::* in true.__defineGetter__(\"__proto__\", this)) var __count__\n");
tryItOut("/*infloop*/L:for('fafafa'.replace(/a/g, gc); 'fafafa'.replace(/a/g, /a/gi); (this())) \f");
tryItOut("let (prototype = window) { if( /x/ ) return; else yield  /x/ ; }");
tryItOut("for(let y in []);");
tryItOut("{function(y) { yield y; break M;; yield y; }<xxx {__proto__}={false} />continue M; }");
tryItOut("L:if(eval(\"[<x><y/></x> if (__noSuchMethod__)]\", (prototype++) @ new (function  __noSuchMethod__ (__parent__, prototype) { yield <><x><y/></x></> } )(<><x><y/></x></>))) var __noSuchMethod__; else /*for..in*/for(const [__parent__, prototype] = <x><y/></x> in __count__) let prop, __iterator__ = <x><y/></x>;");
tryItOut("let(__count__) ((function(){let __iterator__ =  /x/ , prototype = true;})());");
tryItOut("let (prototype = new Object().__lookupSetter__(\"__iterator__\")) { /*infloop*/M:while(((*)(prototype = true))){\fcontinue M; } }");
tryItOut("while((<y><z/></y>) && 0)let (prototype) { return prototype; }");
tryItOut("if(null) {} else  if ( /x/ ) (__iterator__);");
tryItOut("/*infloop*/M:do {yield;prop = *::*, *::*; } while((({ set constructor(function::__noSuchMethod__)null, __proto__: <><x><y/></x></> })));");
tryItOut("if(<{__noSuchMethod__}>({a2:z2})(((-0).isPrototypeOf(1e81)), <x><y/></x>)</{__noSuchMethod__}>) {yield false;/*infloop*/do __count__; while(( /x/g .__lookupGetter__(\"__count__\"))); }");
tryItOut("/*infloop*/for(let constructor; <><x><y/></x></>; <x/>) {yield; }");
tryItOut("/*infloop*/for((prop = <x><y/></x>); this.__defineSetter__(\"prototype\"\f,  '' ); (let (, __proto__ = 0.1) window[<x><y/></x>++])) { }");
tryItOut("/*infloop*/for(var prototype; prototype.(*::* >>=  \"\" ); true) continue M;");
tryItOut("switch(([1,2,3,4].map).call(__proto__ = false .@*:: [[1]], <xxx>{__proto__}</xxx>)) { case 5: /*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in <><x><y/></x></>) let prop = <x/>;break; if(eval(\"*;\", <><x><y/></x></>)) (<y><z/></y>); else  if (<x><y/></x>.(window)) {gc() } }");
tryItOut("if((<><x><y/></x></>++).yoyo(this.zzz.zzz)) {/*for..in*/M:for(let __noSuchMethod__ = void true in true) {yield;Math.sin } } else  if (yield ((prop = __noSuchMethod__.__lookupGetter__(\"__iterator__\"))[(__parent__)[]])) M:with(.2 > 1e-81(<><x><y/></x></>))/*for..in*//* nogeckoex bug 349964 */ for  each(const (1.3)(*) in <><x><y/></x></>) yield 1e-81;");
tryItOut("if( \"\" ) { if (*) {let break L;; } else {export *; }} const \n__noSuchMethod__;");
tryItOut("if([z1,,]) case 0: break; break; case undefined: break; case function(id) { return id }: export __proto__;break; case [[]]: default:  else  if ((-0)) const __parent__; else {continue ;throw <x/>; }");
tryItOut("/*infloop*/\ffor(let __count__; \n(<x><y/></x> += <x><y/></x>); (new  '' (<x><y/></x>)) <= __parent__ for each (__noSuchMethod__ in <><x><y/></x></>)) {yield <x>\f<y/></x>;export *; }\t");
tryItOut("return prototype = <x><y/></x>;");
tryItOut("M:if(__parent__.__count__) {{return <y><z/></y>;{} } } else  if (([11,12,13,14]some)) {gc()yield undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each\f(let [prototype, prop] in (<x><y/></x>.(window))) {with(*){continue ; }/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in <x><y/></x>) gc()\n(false);@foo; }");
tryItOut("L:if(#1=[#1#]) { if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {let __noSuchMethod__ = {}; }} else {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in  \"\" ) break M; }");
tryItOut("switch(([15,16,17,18].filter([1,2,3,4].slice, function ([y]) { }))(var prototype, __noSuchMethod__ = <x><y/></x>)) { default: break; case 8: break; case 7: case Function(undefined(3.141592653589793, constructor).valueOf(\"number\")) %= (new ((__proto__)(window))()): ;break;  }");
tryItOut("{{}return false; }");
tryItOut("if([true].filter((1 for (x in [])))) { if ((#2=*::*)(new ((({a2:z2})).watch).apply(<y><z/></y>), [,,z1])) yield; else {033; }}\nvar __count__\n\n");
tryItOut("/*infloop*/while((({ __proto__: constructor, __noSuchMethod__: constructor }) = prop))break M;");
tryItOut("/*infloop*/do {yield;gc() } while(<><x><y/></x></>); const constructor;");
tryItOut("__count__(*.eval(1.2e3)) = __noSuchMethod__;");
tryItOut("export prototype;");
tryItOut("with({constructor: __count__.__count__ = (([,]).call( /x/ , *).unwatch(\"constructor\"))}){{/*infloop*/while( '' ) import  } }");
tryItOut("throw StopIteration;");
tryItOut("if((__noSuchMethod__)) { if ((__count__ != function::__proto__)) {{} } else return;}");
tryItOut("/*for..in*/L:for(var prototype = __count__ = (prototype.(function::__proto__)).__defineSetter__(\"prop\", function  constructor (prototype) { return <><x><y/></x></> } ) in (let.__count__)) while((<x/>) && 0){let prototype = <x/>, __proto__;var constructor = null, __proto__ = window; }");
tryItOut("{(<y><z/></y>); }");
tryItOut("continue ;");
tryItOut("/*for..in*/for(let __parent__ in (([1,2,3,4].map)(((<x><y/></x>)(<x/>, [,])))))__proto__ =  '' , __noSuchMethod__ = <x><y/></x>;");
tryItOut("with({}) yield this.__defineGetter__(\"constructor\", <y><z/></y>);");
tryItOut("let (__count__) { let prototype = <y><z/></y>, __count__; }");
tryItOut("let (__noSuchMethod__ = (; = \nprototype)) { const prop\n }");
tryItOut("{const prop, ; }");
tryItOut("/*infloop*/while(((*)().__defineSetter__(\"__iterator__\", (<><x><y/></x></>).watch))){<><x><y/></x></>return; }");
tryItOut("throw StopIteration;");
tryItOut("do {true;throw x::__parent__; } while((prop.__parent__ setter= (( '' ).__defineSetter__)) && 0);");
tryItOut("/*infloop*/for(true; true;  /x/g ) {const constructor = 0.1;yield null; }");
tryItOut("if(__proto__) *; else  if (( /* Comment */033)) ; else (#1#);");
tryItOut("(function(y) { yield y; ; yield y; }).apply const __proto__;");
tryItOut("/*for..in*/M:for(const prop.prop in (((function(q) { return q; }).call)((function(q) { return q; })[[15,16,17,18].filter(function(q) { return q; }, ({constructor: __count__ = undefined }))])))return;\nlet __proto__ = <><x><y/></x></>, __count__ = constructor;\n");
tryItOut("with({}) with({}) { return []; } ");
tryItOut("/*infloop*/for(yyy.(<><bbb xmlns:ccc=\"-1\"><ccc:eee></ccc:eee></\tbbb></>);  /x/g  .@ [,,]; (new function () { yield #1# } ([<x><y/></x>].some(<y><z/></y>), <><x><y/></x></>))) M:if(true) { if (this) {prototype = prop, prop = false; }} else {return;return; } const prototype;");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = __proto__ in window) var __parent__, __parent__ = *;");
tryItOut("return (<x/>.__defineSetter__(\"__proto__\", function  constructor (__noSuchMethod__, __noSuchMethod__) {  } ).@foo || __noSuchMethod__.__lookupSetter__(\"__iterator__\")++);");
tryItOut("/*for..in*/for(const get = <y><z/></y>() in (({}).hasOwnProperty)()) yield this;");
tryItOut("continue M;");
tryItOut("/*infloop*/L:for(prop = (( \"\"  for (prop in this))); *::*.watch(\"__proto__\", function  __iterator__ (prop, constructor)undefined); <x><y/></x>\n) {yield; }");
tryItOut("with(__iterator__ = __iterator__ = <x><y/></x>.eval([<><x><y/></x></>].sort(Function)).propertyIsEnumerable(\"__parent__\")){if((new Array(__parent__.__count__ getter= ({}).__lookupGetter__,  /x/ ))) { if ((Function).call( \"\" .__iterator__ = 1e81, ))  else {yield;; }}\n/*for..in*/for(( '' .yoyo(*::*))(new RegExp(-1, <x><y/></x>)) in ((([1,2,3,4].slice).apply)(*::*.__defineGetter__(\"prop\", new Function)))){yield false;gc() }\n<><x><y/></x></>;\n }");
tryItOut("if(new RegExp([,], (function ([y]) { })())) { if ( \"\" ) {;__iterator__, 0.1 = *; } else {yield <x><y/></x>; }}");
tryItOut("let(({ __parent__: prop }), __proto__ = function ([y]) { }) ((function(){with({}) { {} } })());");
tryItOut("/*for..in*/for(prototype = <><x><y/></x></>(.2) in prototype) __proto__ = <x><y/></x>;");
tryItOut("/*for..in*/for(const [constructor, prototype] = #1=[#1#] in this) yield;");
tryItOut("do {L:if(((constructor).call())) yield; else  if (eval(\"(let __count__, constructor;);\",  '' )) {gc() }return; } while(((false[null])) && 0);");
tryItOut("if(__noSuchMethod__.(<x><y/></x>)) yield prototype; else (*::*)\nthrow 1e4;gc()");
tryItOut("/*for..in*/for(const  in (([1,2,3,4].map)(constructor))){throw 033; }");
tryItOut("if(new Exception()\t) { if (__noSuchMethod__ = __parent__) prototype = true;} else {return __iterator__; }");
tryItOut("export *;");
tryItOut("if( '' ) { if (<x><y/></x>\f) return 3; else {export prototype; }}");
tryItOut("return;");
tryItOut("yield [1];");
tryItOut("prop = prop;");
tryItOut("with({}) __parent__ = prop;");
tryItOut("L: {return *::*; }");
tryItOut("/*for..in*/for(let [__count__, prototype] = ([<><x><y/></x></> for each (__proto__ in <x/>)]).__defineSetter__(\"prop\", (__iterator__ .@x:: <x><y/></x>)) in [(-0)].sort(({}).__lookupGetter__)(true.__lookupSetter__(\"constructor\") ^ __parent__ = true, <{__noSuchMethod__}><x><y/></x></{__noSuchMethod__}>.([]))) {/*for..in*/L:for(let [prop, prop] = <><x><y/></x></> /= window in <x><y/></x>) ;/*infloop*/for(let __proto__; undefined; *) gc() }");
tryItOut("/*for..in*/for([prototype, prototype] = false in true) {(undefined); }export *;");
tryItOut("L: {if(0/0) { if ((this.__defineSetter__(\"__proto__\", window))) throw prototype;} else ((function ([y]) { })()).__defineSetter__ }");
tryItOut("((uneval(__count__ = <><x><y/></x></>)))\nprototype, __parent__;");
tryItOut("with({__parent__: __parent__|=<><x><y/></x></>}){if(\nnull >>> -0) { if ( /x/g ) export *;} else {export __proto__; }M:if(window) gc() else  if (eval(\"<y><z/></y>;\",  '' )) break ; }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("gc()");
tryItOut("if(<x><y/></x>) { if ({}) {{}yield; } else ;}");
tryItOut("L:switch(+\".throw(<><x><y/></x></>) ? ~function::constructor : false .@x:: undefined <<= prototype = <x><y/></x>) { default: /*infloop*/\tfor(let __proto__; false; window) yield *::*;break;  }");
tryItOut("(<><x><y/></x></>).watch\n");
tryItOut("L: const __count__ = <x/>;");
tryItOut("L:if(prototype) {yield\nprop, prototype;break ; } else  if ((eval(\"(0.1 >>>=<><x><y/></x></>)\", <xxx {prototype}={[<x/>]} />.(prototype = 0.1)))) /*for..in*/for(const [__count__, __proto__] = (constructor+=window) in *::*) {return <><x><y/></x></>;{} }");
tryItOut("{}\nvar constructor = <><x><y/></x></>;\n");
tryItOut("/*for..in*/for(let prototype in ((([z1] ? [[]] : 0 >>= new this) > new /a/gi([<y><z/></y>].map((__parent__).__defineSetter__)))((function ([y]) { })()))){with({__count__: [11,12,13,14].some}) /x/g ;yield __noSuchMethod__.( /x/ ); }");
tryItOut("/*infloop*/M:while( /x/ ){; }");
tryItOut("/*infloop*/while(function::prop = this){const __count__, __noSuchMethod__ = #1#;export __parent__; }");
tryItOut("{/*for..in*/for(let __proto__ in <x><y/></x>) {} }");
tryItOut("{export *;(new Function(\"constructor;\")) }");
tryItOut("if(~ /x/ ) {let prototype, __iterator__; } else  if ((<x/>.__parent__)) export *; else {let prototype = <><x><y/></x></>, __count__;export prop; }");
tryItOut("var __proto__ =  '' , prototype; const prop;");
tryItOut("return <xxx>{prototype}</xxx>.(<x><y/></x> <= <y><z/></y>);");
tryItOut("for(let y in []);");
tryItOut("export *;");
tryItOut("L:if((<><x><y/></x></>)) yield; else  if ((((__iterator__ = window)).call((*::* + return;), prop = @foo, ((__parent__.throw(window))++)))) {{}yield; const __noSuchMethod__; } else {yield <x><y/></x>;return <x><y/></x>; }");
tryItOut("with({__noSuchMethod__: !constructor.__noSuchMethod__ getter= ({}).__lookupGetter__})/*\n*//*infloop*/for(const prop; __count__ = (-0); __proto__) {__noSuchMethod__ = 1e-81, __iterator__; }");
tryItOut("/*infloop*/while(__noSuchMethod__.( /x/g ))export *;");
tryItOut("switch(<x><y/></x>) { default: break; case function ([y]) { } * __parent__: break; break;  }");
tryItOut("with([,] >>>=<y><z/></y>)export *;");
tryItOut("with({__proto__: <x><y/></x>.propertyIsEnumerable(\" if (<><x><y/></x></>)\").propertyIsEnumerable(\"__parent__\")})yield;");
tryItOut("switch((let (__iterator__) *)((prototype.__count__), @foo)) { default: case  /x/g : break;  }");
tryItOut("return (__count__-=function(id) { return id });");
tryItOut("/*for..in*/for(const __parent__ in ((function  __noSuchMethod__ (__iterator__, __iterator__) { yield this.__defineSetter__(\"\", function (constructor, __count__) { yield  ''  } ) } )(__noSuchMethod__function  prop (__count__, ({ prototype: [prototype, prototype] })) { return null } ()))){/*infloop*/while((new ([1,2,3,4].map)())){{(*);return <y><z/></y>; } } }");
tryItOut("L:do {gc();gc() } while(((<><x><y/></x></> *= (function ([y]) { })() << <x><y/></x>++.valueOf(\"number\"))) && 0);");
tryItOut("with(({ prop: __proto__ }) = <><x><y/></x></> | this.prototype){constructorgc() }");
tryItOut("M:if((({}).__defineSetter__(\"prop\", [1,2,3,4].slice))) return; else  if ((prop = __noSuchMethod__)) {let constructor = 0.1; } else ");
tryItOut("/*for..in*/for(let __proto__ = <x/> != String(1e4, <x><y/></x>).unwatch(\"__parent__\") in __proto__ = false) {/*for..in*/for(__parent__ in *) ; }");
tryItOut("/*infloop*/for(var __parent__; -({ __parent__: constructor }) =  /x/ ; <y><z/></y> for (__parent__ in *::*)) /*for..in*/for(let __iterator__ in __iterator__.prototype getter= [1,2,3,4].slice) {L: (@foo);if(<><x><y/></x></> << <><x><y/></x></>) { if (0.1 >= <><x><y/></x></>) {__count__; }} else ; }\nwith({}) return;");
tryItOut("if(__iterator__) export function::prop; else  if ((yield <x><y/></x>)) window; else ;");
tryItOut("{L: {export __count__; }gc() }");
tryItOut("continue L\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let constructor; this.__defineGetter__(\"__count__\", ([1,2,3,4].slice).call).hasOwnProperty(\"__count__\"); (yield __proto__ = __parent__)) {return;<x/>; }");
tryItOut("__proto__ = __iterator__;");
tryItOut("if(<><x><y/></x></>) { if ([1,,]) var __noSuchMethod__ = __noSuchMethod__, __count__; else export prop;}");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <x/>.propertyIsEnumerable(\"prototype\") in prototype) <y><z/></y>;");
tryItOut("/*for..in*/for(prototype = [] =  in constructor.constructor = ({}).hasOwnProperty) {while((<x><y/></x>) && 0)yield;continue M; }");
tryItOut("/*infloop*/for(prototype = [0/0 for (__parent__ in <><x><y/></x></>)]; __parent__.__parent__ getter= gc; this.zzz.zzz) (__count__);");
tryItOut("export *\n");
tryItOut("const __count__\n/*infloop*/for(let __proto__; <><x><y/></x></> |= null; null &= <y><z/></y>) {export *;window; }");
tryItOut("if(new function ([y]) { }()) {return window;<x><y/></x>; } else  if (@foo &= __parent__) <x><y/></x>\n");
tryItOut("/*for..in*/for(let __parent__ in ((__noSuchMethod__)(window))){throw <x><y/></x>; }");
tryItOut("export prop;\n/*infloop*/while(__parent__)__proto__ = false, constructor = *;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in [z1,,]) {(1e+81);{} }");
tryItOut("/*for..in*/for(__parent__ = 0.1 in __parent__.prop) {throw  \"\" ;\n{}\n\nwhile(((<x><y/></x>.(<><x><y/></x></>))) && 0){yield 1e+81;yield <x><y/></x>; }function(q) { return q; }return  /x/g ; }");
tryItOut("if(((<x\t><y/></x>)()) ^= (undefined.valueOf(\"number\") * __noSuchMethod__.__noSuchMethod__ setter= ((1 for (x in []))).call)) { if (this.zzz.zzz) /*infloop*/L:while(((new *(<x><y/></x>, 0x99)).__noSuchMethod__))(yield <><x><y/></x></>)} else with({}) let let =  /x/g , __count__ = false;");
tryItOut("with({__proto__: true.__defineSetter__(\"constructor\", gc)}){yield prototype;gc\t }");
tryItOut("/*infloop*/for(let prop; ({return; }); Exception(033.hasOwnProperty(\"__proto__\"))) {return <><x><y/></x></>;gc() }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] = 3 in <y><z/></y>) {let(constructor = <><x><y/></x></>(<x><y/></x>, undefined)) ((function(){throw prototype;})());M:if((({ get prototype prototype (__parent__) { yield 5.0000000000000000000000.isPrototypeOf(function ([y]) { }) }  }))) {;; } }");
tryItOut("if(Number(*)) { if ((yield undefined.yoyo(null)) .. constructor = <><x><y/></x></>.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)) {var prototype =  /x/g , delete; const __parent__;yield <x><y/></x>; }} else if(*[3]) {export __noSuchMethod__;yield; } else  if (this) /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <y><z/></y>) export prototype;");
tryItOut("with(__proto__ = []){let constructor = prop, prop; }");
tryItOut("for(let y in []);");
tryItOut("{return false; }");
tryItOut("if([({ __noSuchMethod__: ({}).__iterator__ })] = ({ __proto__: [, [, [, __count__, , ], ]] })) { if ([1,,].throw((({ __noSuchMethod__: __iterator__ }) = [, __count__, __proto__]))) {return; { yield ([let (__parent__ = 3.141592653589793) <><x><y/></x></> if (*::*)]) }  } else export __iterator__;}");
tryItOut("{if(new Date(3/0)) export constructor; else {[1]; }return; }");
tryItOut("if(RegExp(__noSuchMethod__ = @foo, (function ([y]) { })())) /*for..in*/for(var [__proto__, __iterator__] = (Exception()) in <><x><y/></x></>) {return 0.1; } else  if ((Math.pow(<><zzz> /x/ </zzz></>, yield *::*))) /*infloop*/for(__iterator__; __noSuchMethod__; new ((#2=({prop: <y><z/></y>})).__lookupSetter__(\"prototype\"))()) __iterator__ = @foo;");
tryItOut("( /x/ );");
tryItOut("if(<x><y/></x>.constructor) { if ( /x/  in [(prop.hasOwnProperty(\"prop\")) for (__parent__ in  /x/ ) for each (__noSuchMethod__ in true) for (__noSuchMethod__ in <y><z/></y>)]) yield <x><y/></x>; else {;let prototype; }}");
tryItOut("L:if(<y><z/></y>\n) { if ( \"\"  ? ({a1:1}) : <x><y/></x>) return;} else gc()");
tryItOut("[1,2,3,4].slice");
tryItOut("({constructor: ((5.0000000000000000000000 /= <x/>).@*)})continue ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <y><z/></y>) {yield;{} }");
tryItOut("L: {yield <x/>; }");
tryItOut("do {undefined; } while((<x><y/></x>.throw(function ([y]) { })) && 0);");
tryItOut("M:with((arguments.propertyIsEnumerable(\"__noSuchMethod__\")))return;");
tryItOut("/*infloop*/for((this.isPrototypeOf(*)); this.__defineGetter__(\"__noSuchMethod__\", <><x><y/></x></>); __parent__ = (function ([y]) { })() |= window) (constructor);");
tryItOut("with({}) return prop.prototype;");
tryItOut("gc()");
tryItOut("for(let y in [5,6,7,8]) let(prop = window) ((function(){(<x><y/></x>).__defineSetter__})());");
tryItOut("throw  '' ;");
tryItOut("prototype; const __proto__");
tryItOut("L:if(({a2:z2})) { if (Boolean( \"\" \n, window)) {(-1);var __noSuchMethod__ = <x><y/></x>; } else ({}).__lookupGetter__}");
tryItOut("return;");
tryItOut("if(__noSuchMethod__.__parent__) {(new Function(\"{}\")) } else  if ( /* Comment */(function ([y]) { })()) yield; else {L: yield;continue M; }");
tryItOut("while(((! '' )) && 0)");
