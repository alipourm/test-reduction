tryItOut("do {var __proto__ = <x><y/></x>, __count__ = <x/>;(true); } while((#1=[#1#].*) && 0);");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in  /x/g  ? false :  /x/ ) {; }");
tryItOut("{ }");
tryItOut("/*infloop*/L:for(const ({ __parent__: __iterator__, constructor: __proto__ }) = ({ __proto__: [constructor], __iterator__: __parent__ }) = __iterator__.hasOwnProperty(\"let\"); <x/> ? window :  '' ; (__parent__.__parent__)) {gc() }");
tryItOut("if(((yield \t033(*::*, __parent__)).__parent__)) /*for..in*//* nogeckoex bug 349964 */M: for  each(const *::*['constructor'] in [1,,]) if(*) { if ( /x/ ) var prototype = function(id) { return id }, prop = false; else var __proto__, prop;} else __count__");
tryItOut("let(__count__ = (Number(undefined.prototype.__defineSetter__(\"__count__\", <><x><y/></x></>), new (yield <><x><y/></x></>)())), __count__) ((function(){throw __iterator__;})());");
tryItOut("while(((eval(\"<x><y/></x>\", <x><y/></x>))) && 0){*::*;const __parent__ = <x/>; }");
tryItOut("__count__ = __count__");
tryItOut("if((this.zzz.zzz)) export *; else  if () var __noSuchMethod__, prototype = <><x><y/></x></>\n");
tryItOut("if([<x><y/></x>]) { if (0.1) yield undefined; else  debugger }\nthis.zzz.zzz;\n");
tryItOut("with(constructor.prototype = [,,z1])export *;");
tryItOut("switch(prop.isPrototypeOf(<x><y/></x>)) { default: case -0 /= 1e-81: break; {}break;  }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for((__parent__['constructor'] = window()); /*\n*/(((function ([y]) { })() % 4.) != prototype.propertyIsEnumerable(\"__noSuchMethod__\") |= (true.eval(__iterator__))); constructor.*) yield;");
tryItOut("gc()");
tryItOut("{M:if(<x><y/></x>) { if (window) export constructor;} else var __parent__ = prop, __count__;Math.sin }");
tryItOut("L:while(((![15,16,17,18].filter(function () { return window } , __iterator__.__parent__))) && 0)/*for..in*/for(var [prop, prop] = ([this].map(#3={a:#3#})) || new ([[1]])(<x/>) in <x><y/></x>) {yield\nyield;gc() }");
tryItOut("while((({ set constructor constructor () { yield; } ,  set prototype(__iterator__, prototype) { yield  /x/ ; }  })) && 0){M:while((3.141592653589793) && 0)let prototype = </x>, __proto__ = 0; }");
tryItOut("if(delete  \"\" .__defineGetter__(\"getter\", 'haha'.split)) { if ([]) let __noSuchMethod__; else {var __parent__, __iterator__;M:\fdo /a/gi while((window) && 0); }}");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; constructor = __count__ ? constructor = <y><z/></y> : __parent__; new RangeError(-1) < <x><y/></x>\n) {{}yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__noSuchMethod__) in prop) {\f033; }");
tryItOut("if(*::*) {yield; }");
tryItOut("/*infloop*/do {if(new <x/>(__noSuchMethod__;\f)) switch(\f__proto__.yoyo(*::*)) { default: break; yield; } } while({\r }.yoyo(window));");
tryItOut("L: {}");
tryItOut("{const __proto__ = <x><y/></x>;export prototype; }\nif( /x/  %= @foo) (<x><y/></x>); else  if (__noSuchMethod__.__noSuchMethod__ getter= this) ; else return;");
tryItOut("/*for..in*/for(prototype in (((new Function(\"<x/>;\")))(true++))){const __proto__ = -1, __parent__ = <x><y/></x>;(*); }");
tryItOut("gc()");
tryItOut("if(this) {{return;__iterator__ }{}throw <x><y/></x>\nL: {yield -0;; } } else  if (<><>yyy</></>++.propertyIsEnumerable(\"prop\")) ;");
tryItOut("/*infloop*/L:for(var prop; <x/>; new  \"\"  .@x:: <><x><y/></x></>.watch(\"__count__\", *)((3 === <x><y/></x>))) L: break ;");
tryItOut("L: \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var yield constructor.__count__ setter= (function  __noSuchMethod__ () { function (constructor, __proto__) { return  ''  }  } ).apply[-0 ? [1] : 0/0];\f in (prototype = window.unwatch(\"prototype\"))) {throw (function ([y]) { })();yield  /x/g ; }");
tryItOut("/*for..in*/for(constructor in ((Function)(*))){yield;export *; } const __proto__;");
tryItOut("L:if((constructor)) const prop = constructor; else  if (__count__ = __proto__) {{}export __count__; } else {return __iterator__;yield; }prop = window, __iterator__;");
tryItOut("if(true) gc() else  if (#0=this.zzz.zzz) throw <x/>;\nexport __proto__;\n");
tryItOut("{break M; }");
tryItOut("/*for..in*/for(__count__ in window) return <x/>;");
tryItOut("/*for..in*/L:for(const ({ constructor: __parent__ }) in (((1 for (x in [])))((\nfunction ([y]) { })))){yield undefined; }");
tryItOut("let (__iterator__) { (-3/0).__defineSetter__ }");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in  \"\" ) {__count__return; }\ngc()");
tryItOut("{return; }");
tryItOut("{yield undefined;gc() }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = prop = <><x><y/></x></> === (p={}, (p.z = <x/>)()); (new (*)(__iterator__, *::*).eval(this / <y><z/></y>))[(*.hasOwnProperty(\"__noSuchMethod__\")).unwatch(\"prototype\")] != (yield <x><y/></x>); ({ prop: ({ __proto__: __noSuchMethod__ }) }) = __proto__) M:while((#1=[prototype.prototype = <x><y/></x>]) && 0){try { yield; } catch(__count__) { const constructor = (-0); }  }");
tryItOut("if(__count__.((<x/>.propertyIsEnumerable(\"__parent__\")))) { if (--1e+81.__defineGetter__(\"x::__proto__\", (new Function(\"\")))) __parent__ = @foo, prototype;} else return @foo\n");
tryItOut("{Math.sincontinue M; }gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__count__) in @foo) gc()");
tryItOut("/*for..in*/for(const prototype in (((function(y) { yield y; ;; yield y; }).call)(__iterator__, constructor)))\t{this.zzz.zzz;export * }");
tryItOut("with({}) continue L;");
tryItOut("if(window) {{} } else  if ((__count__ = 1.2e3)) \t{gc() /x/ ; } else { }");
tryItOut("{if((p={}, (p.z = ((eval).call).call((this.zzz.zzz), (<x><y/></x> + window), (__proto__)(function(id) { return id })))())) { if (( \"\" )[eval(\"[,]\", true)]) return; else }/*infloop*/do ({ __count__: ({ __parent__: prop }) }) while((<y><z/></y>.yoyo(<x><y/></x>))); }");
tryItOut("yield;\n;\n");
tryItOut("{return [[1]];try { let __noSuchMethod__ = this, prop = -3/0; } catch(__proto__) { let get = 033; } finally { (window).__defineSetter__ }  }");
tryItOut("/*infloop*/for(var __iterator__; \tthis.__defineGetter__(\"__iterator__\", function(q) { return q; }); prototype = this) {(function(id) { return id });return; }");
tryItOut("var prop, __parent__;");
tryItOut("/*for..in*/L:for(const x::prototype.__noSuchMethod__ in prop = <y><z/></y>) if(({__iterator__: 033 })) {var constructor = [1]; } else  if (typeof [,,z1]) {var prop = this, __count__; } else {__count__ }");
tryItOut("{}");
tryItOut("with([false if ([,])].propertyIsEnumerable(\"__noSuchMethod__\")){function  __count__ () { export __parent__; }  }");
tryItOut("/*infloop*/while(this.zzz.zzz){/*for..in*/for(let __proto__ = #1=[prototype] in <><x><y/></x></>) continue L;continue ; }");
tryItOut("if((({}).__lookupGetter__)(prototype.constructor = *::*\f -= @foo, __proto__ = __count__ <<= null, prototype = <x><y/></x> for (let __parent__, function::prop =  /x/ ; in this))) {function (__proto__) { export *; } throw  \"\" ; } else  if (__iterator__ = [,,z1](window,  /x/g )) throw <><x><y/></x></>;");
tryItOut("if(\f<x><y/></x>) {{} }");
tryItOut("/*infloop*/while((this.zzz.zzz./*\n*/__noSuchMethod__))const __iterator__, __iterator__ = __count__;");
tryItOut("yield ({a1:1})\n/*infloop*/while(this.zzz.zzz){export __iterator__; }");
tryItOut("export __iterator__\nconst __iterator__ = (-1);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in .2) {gc() }");
tryItOut("{__proto__; }");
tryItOut("if((({prototype: __noSuchMethod__ + (function ([y]) { })(), __proto__: 033 }))) { if (<><>([] = (__proto__.propertyIsEnumerable(\"__parent__\")))</></>) /*for..in*/L:for(var [function::__count__, ({ __iterator__: __noSuchMethod__ })] = false in [true.valueOf(\"number\")])  for each (__iterator__ in [z1].valueOf(\"number\")) else with('fafafa'.replace(/a/g, function(y) { yield y; ; yield y; })){__proto__: ({a2:z2}) }}");
tryItOut("/*for..in*/for(const [__iterator__, constructor] = <>this</> in <x><y/></x>) {throw <><x><y/></x></>;break L; }");
tryItOut("/*infloop*/for(const prototype; <y><z/></y>; []) ; const __noSuchMethod__;");
tryItOut("export *\nreturn;");
tryItOut("\fif((Math.pow)()) { if (new (__proto__)()) {constructor = this, __iterator__ = <><x><y/></x></>;\tvar __proto__ = 1.2e3; } else export __noSuchMethod__;}");
tryItOut("{if(<x><y/></x> = (void  /x/g )) gc() else  if (*++) {let prop = , __iterator__ = <y><z/></y>;yield; } else gc()\n }");
tryItOut("with({}) with({}) return;");
tryItOut("L:if(({}) @ <x><y/></x>.propertyIsEnumerable(\"prop\")) yield (-1); else  if (__noSuchMethod__.__parent__ = this) {; } else {/*for..in*/for(const [__count__, __proto__] = () in false) gc()throw <y><z/></y>; }");
tryItOut("/*infloop*/for(__proto__ = <><x><y/></x></>.propertyIsEnumerable(\"prop\"); <xxx>{__iterator__}</xxx>; (-1)[<><x><y/></x><\f/>]) {return ({});yield undefined; }");
tryItOut("if(delete  ''  for (function::prop in <x><y/></x>) for each (prototype in false)) {with(#1=[#1#])Math.sin } else  if (__parent__ === <><x><y/></x></> .@x:: <xxx>{__count__}</xxx>) {{}//h\nif(<x><y/></x>) { if ((<x><y/></x> > <!--yy-->)) {throw __noSuchMethod__; } else ;} } else {do {@foo; } while(((new (<y><z/></y>)())) && 0);\n }");
tryItOut("/*infloop*/for(constructor.__iterator__ = __parent__.__count__; (__iterator__ = @foo); constructor = <x><y/></x>--) {return  /x/g ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__proto__ in (new Date(((new Function(\"let = __parent__, __count__;\"))())))) {L: let __noSuchMethod__ = false, __proto__; }");
tryItOut("{(new Function(\"\")) }");
tryItOut("/*infloop*/L:do {export __iterator__; } while(prop);");
tryItOut("/*for..in*/M:for(let [__count__, __noSuchMethod__] = (0) in <><x><y/></x></>) {}");
tryItOut("let(prop, prototype = <><x><y/></x></>) ((function(){let(prototype = <x><y/></x>) ((function(){{}})());})()); const __count__;");
tryItOut("let __count__; const prop;");
tryItOut("{with({}) { prop = prop; } return;\n{/*infloop*/M:do {export *; } while( /x/ ); }\n }");
tryItOut("(<y><z/></y>);");
tryItOut("L: {var prop = null, __parent__ = 0.1;; }");
tryItOut("return\n");
tryItOut("L:with({__parent__: prop}){export *;throw false; }");
tryItOut("return");
tryItOut("if(Date(null) in ((({__proto__ setter: prototype })).__defineSetter__(\"__proto__\", ({}).hasOwnProperty))) { if (({__parent__: __noSuchMethod__})) throw <><x><y/></x></>; else /*for..in*/for(const prototype in false) return <><x><y/></x></>;}");
tryItOut("if((__parent__.__parent__)) {M:if(<><x><y/></x></>) { if (<><x><y/></x></>) \r{default: const __proto__;break;  /x/g  } else {return; }} } else  if (( { {} }  >>>= /x/g )) throw window;");
tryItOut("with(prop){return  '' ;const constructor, constructor =  \"\" ; }\nyield;\nlet __noSuchMethod__, ;\n");
tryItOut("/*infloop*/L:for(var __iterator__ = let ([[], ]) ({__iterator__: ()}) << ('fafafa'.replace(/a/g, function (constructor, __noSuchMethod__) { yield *::* } )).valueOf(\"number\"); (__count__.((( /* Comment */null for each (prototype in *) for ([1]['false'] in <y><z/></y>) for (prop in []))))); prop = prop >> <><x><y/></x></>) {(( \"\" \n));gc() }");
tryItOut("/*infloop*/for((__iterator__ = __iterator__)[new new Function(*, *)]; 1e-81.__defineSetter__(\"prototype\", new Function); true.yoyo(-0)) {; }");
tryItOut("/*for..in*/for(prop = [new (<x><y/></x>)(__iterator__(0.1))].sort(function  __parent__ (constructor, constructor) { yield (this)(constructor, <x/>) } ) in (({__iterator__: ({__noSuchMethod__: false}).__defineGetter__(\"__proto__\", <x><y/></x>), prototype setter: ({ set __noSuchMethod__ __noSuchMethod__ (__parent__) { return this }  }) }))) {gc() }");
tryItOut("return  \"\" ;");
tryItOut(" const __count__;");
tryItOut("var <><x><y/></x></>; const __count__;");
tryItOut("/*for..in*/for(var __parent__ in (eval(\"[,]\", <x><y/></x>))) const prop = *::*;");
tryItOut("/*infloop*/for(var __parent__; __noSuchMethod__; (#1# !== (RegExp(false)))) {export prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("{(([,,z1]).__defineSetter__).applylet setter = undefined, prototype; }");
tryItOut("/*for..in*/M:for(const [prop, __parent__] = (033 for (__iterator__ in prop)) % true.valueOf(\"number\").hasOwnProperty(\"prop\") in true.isPrototypeOf(null)) {/*infloop*/M:for(__noSuchMethod__ =  '' ; <x><y/></x>; 1e4) return; }");
tryItOut("with({}) with({}) export __proto__;");
tryItOut("if(((*).apply).call( \"\" .throw( /x/g ), prototype.__iterator__)) {__iterator__; } else  if ((\f({__proto__: undefined /= this}))) gc() else yield;");
tryItOut("let (__noSuchMethod__ = <x><y/></x>) { /*infloop*/L:do {yield [z1];return; } while(({ __iterator__: prop, __count__: __parent__ })-1); }");
tryItOut("L: export prop;");
tryItOut("/*infloop*/for(*::*\f; \fnull; window) {export *;(__count__); }\n");
tryItOut("export *;\n0x99;/*\n*/\n");
tryItOut("let (__parent__ = <><x><y/></x></>, __count__ = <y><z/></y>) { <><x><y/></x></> }");
tryItOut("/*infloop*/L:for(const __count__ = (*)().yoyo((({ set x::__parent__() { yield <x><y/></x> }  }))); prop = <x><y/></x>;  \"\" ) {continue L; }");
tryItOut("/*infloop*/M:for(undefined; <x><y/></x>; <x/>) {<x><y/></x>;gc() }");
tryItOut("{L: {continue ;(1 for (x in [])) }{} } const function::__noSuchMethod__;");
tryItOut("if((default: break; case 3/0: break;  .@*:: this\f)) /*for..in*/M:for(const prop in ((new Function)(@foo))){throw null;return; }");
tryItOut("for(let y in []);");
tryItOut("if(<x/>.eval(#1=[#1#])) { if (undefined.valueOf(\"number\")) {yield 5.0000000000000000000000; } else {throw [z1]; }}");
tryItOut("M:if((null).watch(0/0)) { if (__parent__) {yield; } else const __count__;}");
tryItOut("let(prototype =  /* Comment */1.3, __noSuchMethod__ = window) { for(let y in [5,6,7,8]) throw <x/>;");
tryItOut("/*infloop*/do 'haha'.split\n while(prop.__count__.__defineGetter__(\"__proto__\", function  prop (constructor) { let __parent__; } ));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in <><x><y/></x></>) {__count__ = true;const constructor; }");
tryItOut("throw window\nM:if(__proto__) { if ( /x/ ) {}} else {yield;throw undefined; }");
tryItOut("{__count__ = __proto__; }");
tryItOut("switch(__iterator__) { case : return;default: var constructor;break; case [,].prop ? ({prop setter: eval, constructor: __noSuchMethod__ }) : @foo: gc()break; nullcase yield  '' :  }");
tryItOut("let (__noSuchMethod__ = ({__proto__ getter: 'haha'.split, __count__: __parent__-=window >>= function ([y]) { } })) { {L:if(@foo) let __count__ = [1,,], prototype\nyield <x/>; } }");
tryItOut("{let (__proto__, prototype = ([, ({ __iterator__: __proto__ })] =  \"\" )) {  }{/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in  /x/g ) {var __proto__;export prototype; } } }");
tryItOut("/*infloop*/do ({}).__lookupGetter__\nif((undefined.*\t)) return <y><z/></y>; else  if (\nprototype) {var __proto__, __iterator__ = *::*;return  '' ; } while((this % prototype)\n);");
tryItOut("if(new RangeError()) { if ((function ()null)()) export __parent__;} else {}");
tryItOut("if((p={}, (p.z = #3={a:#3#}['__iterator__'] = (({}).hasOwnProperty).call(<x/>, (-0)))())) {const constructor;\n(undefined);\nM:do {yield; } while((<><x><y/></x></>) && 0); } else /*for..in*/for(var __count__ in <><x><y/></x></>) \n");
tryItOut("if(false) {yield; } else {}");
tryItOut("prototype = __parent__, __count__;export *;");
tryItOut("this.zzz.zzz;");
tryItOut("");
tryItOut("/*infloop*/for(const ({ constructor: prototype, __proto__: prototype }) = ([15,16,17,18].filter(eval, this)); <x><y/></x>; ~<x><y/></x>\f) ");
tryItOut("if(<x><y/></x>.(<x><y/></x>)) { if (new ((-1))(constructor)) return -3/0; else throw <x><y/></x>;}");
tryItOut("L: {continue M; }");
tryItOut("if((prototype = (uneval(([].unwatch(\"__count__\")))))) { if ((yield (+this.__defineSetter__(\"__noSuchMethod__\",  '' )))) {{} } else {throw false.__noSuchMethod__ *= (<y><z/></y>.@*);let constructor, prototype = 0\nlet <x/> = @foo, <x><y/></x> = 3.141592653589793; }}");
tryItOut("/*for..in*/M:for(constructor in ((eval(\"[1,2,3,4].map\", (new Array(*, .2))))[<y><z/></y> ? constructor : true.__defineGetter__(\"__iterator__\", function(y) { yield y; var constructor;; yield y; })])) var prototype;");
tryItOut("throw StopIteration;");
tryItOut("if(({constructor: this.__defineGetter__(\"__iterator__\", [1,2,3,4].map),  get constructor() { {\f} }  })) /*infloop*/M:for(var constructor; <y><z/></y>; <><bbb xmlns:ccc=\"prop\"><ccc:eee></ccc:eee></bbb></>) /*infloop*/for(prototype; <><x><y/></x> prototype, __parent__;</>.valueOf(\"number\"); this.__defineGetter__(\"__iterator__\", (Function).call)) return;");
tryItOut("false;");
tryItOut("/*infloop*/M:do export *; while(<__iterator__><x><y/></x><>)");
tryItOut("L: yield (false)[__count__];");
tryItOut("yield\n");
tryItOut("/*infloop*/for((-1 .@ <x/>);  /x/ ; let (window) *::* ? ({a1:1}) : this) Function");
tryItOut("{/*infloop*/for(var ({ constructor: set }) = [15,16,17,18].sort(function (\f) { return <y><z/></y> } , export prop; = <><x><y/></x></>); let (constructor) (uneval(__count__));  /x/g .propertyIsEnumerable(\" /x/ \")) ; }");
tryItOut("with({constructor: __count__+=*}){throw 0x99;<x><y/></x> }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let window.__noSuchMethod__ in <y><z/></y>) return 3;");
tryItOut("if(({ prop: __count__ }) = ([1])(@foo, __iterator__)) {{} } else  if ([11,12,13,14].some) gc()");
tryItOut("/*for..in*/for(const ({ function::__count__: ({ __iterator__: __proto__ }) }) in window) switch(( /* Comment */__count__)) { default: <>\f<x><y/></x></>break;  }");
tryItOut("for(let y in [5,6,7,8]) yield window;");
tryItOut("do let __parent__ = window; while(((new (function  __parent__ (prototype)*)(<x><y/></x>))) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:do __noSuchMethod__ while(yield true * <><x><\ty/></x></>(new (__count__)(), window));");
tryItOut("M:while((/a/gi([[1]])) && 0){export *; }{}\n");
tryItOut("M:if(new function(y) { yield y; continue L;; yield y; }()) /*infloop*/while(yield <y><z/></y>)(setter); else  if (__iterator__ = this.__count__ = @foo.propertyIsEnumerable(\"__proto__\")) { }");
tryItOut("if(window) { if (window) export __parent__;} else {Function }");
tryItOut("const __iterator__;");
tryItOut("yield typeof this;");
tryItOut("M:while((true.__parent__ = __iterator__ for each (__parent__ in  '' ) if (-3/0)) && 0){export function::<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; }");
tryItOut("/*for..in*/for(const __iterator__ in ([(<x><y/></x> == <><x><y/></x></>) if (__noSuchMethod__)])) {/*for..in*/for(let __proto__ in <><x><y/></x></>) {export set; } }");
tryItOut("/*for..in*/for(var [__proto__, this.__parent__] = (( /x/g ).__defineSetter__).call(<><x><y/></x></>.valueOf(\"number\"), ) in [,,z1]) {{export __parent__; } }");
tryItOut("/*infloop*/M:do  while(((prop.(5.0000000000000000000000)).valueOf(\"number\")));");
tryItOut("/*infloop*/M:for(({ __proto__: [({ prop: constructor }), , ({ prop: __iterator__, prototype: __proto__ }), ({ __noSuchMethod__.__parent__: ({ __noSuchMethod__: ({ constructor: __proto__, __parent__: ({ prop: __count__ }) }) }), __noSuchMethod__: __iterator__ }), ], __iterator__: ({ function::__proto__: [[({ __noSuchMethod__: ({ prop: __parent__, __iterator__: __noSuchMethod__ }) }), , [({ __noSuchMethod__: constructor, prototype: prop })]], ({ prototype: __count__ }), prop, ({ __proto__: (\f{ prop: __noSuchMethod__, []: __count__\t }), __iterator__: __parent__ })], __proto__: __parent__ }) }) = ([@foo for each (__iterator__ in Object())]); (yield (eval(\"function (constructor, __noSuchMethod__) { return 4. } \", /*infloop*/for(let __count__;  /x/g ; <><x><y/></x></>) var prototype, __iterator__ = <><x><y/></x></>;) for (__noSuchMethod__ in <x/>)));  /* Comment */*::*) {}{} const constructor;");
tryItOut("let(constructor = (throw window), __count__) { throw StopIteration;");
tryItOut("let(constructor = <x><y/></x>.isPrototypeOf( '' ), __iterator__ = (constructor|=this)) { try { ; } catch(__proto__ if ( '' ['__noSuchMethod__'] = (<><x><y/></x></>.__lookupSetter__(\"constructor\")))) { return; } catch(__noSuchMethod__ if ({ __parent__: ({ __proto__: ({ prop: constructor }), __count__: __iterator__ }) }) = +(this.__defineGetter__(\"__parent__\", function () { return ({a2:z2}) } ))) { __noSuchMethod__ = __noSuchMethod__; } catch(prop if (function(){let (constructor, __proto__) { with({__proto__: this}); }})()) { return; } finally { with({}) throw constructor; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in [z1,,]) __noSuchMethod__;");
tryItOut("/*infloop*/for(__count__; <><x><y/></x></>.__defineGetter__(\"__count__\",  \"\" ); <y><z/></y>) return <x><y/></x>;");
tryItOut("with((eval(\"<x><y/></x>.__lookupSetter__(\\\"__parent__\\\")\", this--) > <><zzz>*::*</zzz></>)){if(__noSuchMethod__ = constructor) {const __proto__ = null, __parent__;throw  /x/ ; } }");
tryItOut("let (__iterator__, __proto__ = [[z1].__lookupGetter__(\"__count__\")].sort(\t(new Function(\"export __iterator__;\")))) { with({\tprototype: __count__ = __count__ =  \"\" })export __proto__; }");
tryItOut("gc()\n{__parent__, __count__ = <x><y/></\fx>; }");
tryItOut("switch(set.(undefined.eval(null.__defineSetter__(\"__iterator__\", eval)))) { case 0: switch((constructor = <x/>)) { default: yield __parent__;break; case (eval(\"gc()\", <y><z/></y>)): constructorcase 1: gc() }break; with({__parent__: ({ __parent__: __noSuchMethod__ }) = new Date(5.0000000000000000000000, 1e-81) !== this.__defineGetter__(\"__iterator__\", /a/gi)}){export *;break M; }break; case 3: default: /*for..in*/for(__iterator__ = /*\n*/({constructor: 1e+81.__parent__}) in <><x><y/></x></> ?  \"\"  : __parent__) __proto__ = __iterator__;case false.hasOwnProperty(\"__parent__\"): const __parent__ = , __parent__case <><bbb xmlns=\"null / [11,12,13,14].filter\"> </bbb></>: yield;\n{}\nbreak; break; case 7: L: export __proto__\nif(0.1) { if ( /x/g ) {(<x><y/></x>); } else {export *;export __count__; }}break;  }");
tryItOut("if((({ constructor: ({ prop: ({ __parent__: constructor }) }) }) = eval(\"[[1]]\", ({a2:z2})).__proto__)) {constructor, constructor = default: return @foo;break; case  '' : throw __count__;;if(Function()) {export __iterator__; } else ({}); } else  if ( /* Comment */new function  __iterator__ ()prop = constructor('fafafa'.replace(/a/g, function  __noSuchMethod__ (\f) { throw this; } ), (__noSuchMethod__ = true))) {;if(<x><y/></x> in function::__proto__) {var __iterator__;export *; } else  if ((((<x><y/></x>.hasOwnProperty(\"__proto__\")))[<><x><y/></x></>.hasOwnProperty(\"__proto__\")])) (<>constructor\n.__lookupSetter__(\"__count__\")</>.(<> </>)) }");
tryItOut("__count__, K = <y><z/></y>;\nlet __iterator__, {};\n");
tryItOut("with([z1,,])const prop;");
tryItOut("return;");
tryItOut(";");
tryItOut("if(__noSuchMethod__) { if ((<employee id=\"1\"><name>Joe</name><age>20</age></employee>)) {M:if(<><x><y/></x></>) {return  \"\" ;var __proto__ = <x/>; } } else {if(!@foo.__noSuchMethod__) var function::__parent__, function::constructor; else {throw <x/>; } }}");
tryItOut("switch(yield  '' ) { default:  const prop;break; with(typeof let (__proto__ = ({a1:1}), __count__) 0x99)/*infloop*/while(<x/>)<x><y/></x> }");
tryItOut("yield\n{return; }");
tryItOut("with({__iterator__: (function  __count__ (constructor, __count__) { {} } ).call(this, ).__proto__ = <x/>})export __iterator__;");
tryItOut("/*for..in*/for(let __count__ in [15,16,17,18].map(<y><z/></y>, *::*)) export *;");
tryItOut("if((p={}, (p.z = 1e81 + <y><z/></y>)())) {let __count__ = *::*; } else  if (this.valueOf(\"number\"\n)) {export __proto__var prototype = 3.141592653589793, prototype; }");
tryItOut("let(__iterator__, prototype) { ;");
tryItOut("if('fafafa'.replace(/a/g, function () { var __parent__; } )) {yield <x><y/></x>;gc() } else  if (try { var __count__ =  '' , __proto__ = <><x><y\t/></x></>; } finally { const __count__ = this; }  = __proto__) __iterator__");
tryItOut("try { let(Exception(*), <><x><y/></x></> ? this : #3={a:#3#}) { let(__noSuchMethod__ = ({prop getter: <x/>, __proto__: this })) ((function(){throw prop;})()); } finally { try { throw StopIteration; } catch(__count__) { __noSuchMethod__ = __count__; }  } ");
tryItOut("let (__iterator__ = undefined + <x/>, __iterator__ = (-0)) { var __proto__, __proto__; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; ({ get __iterator__ __noSuchMethod__ ()constructor-=({a2:z2}) }); new Array(__count__).__defineSetter__(\"constructor\", [1,2,3,4].slice) !== function::__count__.__noSuchMethod__) {/*infloop*/for(let __noSuchMethod__; ({constructor: window, constructor getter: (function  prop ()constructor).apply }) += .2; prop = this) {(new Function(\"return;\")) } }");
tryItOut("yield __noSuchMethod__;");
tryItOut("L:while(((function(q) { return q; })(__count__, this)) && 0)continue M;{}");
tryItOut("return;\nexport *;\n");
tryItOut("/*infloop*/for(this; new <y><z/></y>(*::*, <><x><y/></x></>); __proto__.hasOwnProperty(\"prop\").__lookupSetter__(\"__noSuchMethod__\")) {switch( /x/g ) { case window: break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x><y/></x>) {throw 033; }");
tryItOut("/*infloop*/for(const constructor; new  \"\" (<x><y/></x>); this.zzz.zzz) M:if(<x/>) { if ( /x/ ) let __noSuchMethod__ = window, __iterator__ = 1e4;} else {}");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (([1,2,3,4].slice)(<x/>))){break L;export prototype; }");
tryItOut("/*for..in*/for([prototype, __iterator__] = (<y><z/></y>--)() in __proto__) continue L;");
tryItOut("/*for..in*/for(var __parent__(undefined) in  /x/g ) continue ;");
tryItOut("with({}) { let(constructor, __parent__) { __count__.__parent__ = prop; } ");
tryItOut("with({__iterator__: ({ __parent__: constructor, __parent__: __count__ }) = constructor: (__parent__.delete).prop getter= 'haha'.split .. *::*\t}){export constructor;export __noSuchMethod__\n }");
