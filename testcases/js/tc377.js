tryItOut("with((({ __proto__: prop }) = ({ <><x><y/></x></>: prop, prototype: __iterator__ }))){export x::__noSuchMethod__;return; }");
tryItOut("with({}) gc()");
tryItOut("return false\n");
tryItOut("try {  } finally { return; } ");
tryItOut("do {while(((let prop, prop).watch(\"__parent__\", Math.pow)) && 0){return 0.1;; }(*::*); } while(((\tyield \f(__noSuchMethod__ = __noSuchMethod__.eval(-0.isPrototypeOf(false)))\n)) && 0);");
tryItOut("throw @foo;");
tryItOut("do __noSuchMethod__ while((<><x><y/></x></> - true[prototype.(@foo)]) && 0)\n");
tryItOut("return;");
tryItOut("M:if((__noSuchMethod__ % null)) { if (+prototype) {<><x><y/></x></>;; } else throw [];}");
tryItOut("L:with({__proto__: function(id) { return id }}){if(~-3/0) { if ((__iterator__.throw(<x><y/></x>))) {yield <x/>;let prop, __proto__ = window; }} else {export *; } }");
tryItOut("{;export *; }");
tryItOut("/*infloop*/do {const __noSuchMethod__, __parent__; } while((function ([y]) { })());");
tryItOut("if(Function()) { if (({ get __proto__ __iterator__ ()(<y><z/></y>()), __proto__ setter: function (({ __proto__: prototype, constructor: constructor })) { return @foo %= *::* }  })) const constructor; else {/*for..in*/for(const __noSuchMethod__ in ((function(y) { yield y; prototype, __proto__ =  '' ;; yield y; })((function ([y]) { })()))) }}");
tryItOut("function::prototype = *::*\nvar __proto__\nthrow  /x/ ;");
tryItOut("if(__iterator__) {\flet __noSuchMethod__, __count__;export *; } else  if (<!--yy-->|=[15,16,17,18].map([1,2,3,4].map, <><x><y/></x></>)) { { return 3.141592653589793 } , __noSuchMethod__ = <y><z/></y>; }if(((p={}, (p.z = [[]])()) *= <x><y/></x>)) { if ( /x/g ) if(@foo) {export __count__;var __count__ = <><x><y/></x></>, prototype = __proto__; } else  if (<y><z/></y>) var __proto__ =  \"\" , __parent__ = <x/>; else {<x><y/></x>; }} else export *;");
tryItOut("switch(*::*) { case 0: {}break; case @foo: throw window;break; break; export *;{}break; yield;break; case 2: break; case  /x/g : default: ;break;  } const __parent__;");
tryItOut("/*infloop*/for([__proto__, ] = <y><z/></y>.hasOwnProperty(\"prop\"); yield undefined; \n'haha'.split((__parent__ = __iterator__.prop))) {{continue L; }__proto__ = __iterator__; }");
tryItOut("/*infloop*/for(var ({ prototype: [,,], constructor: __noSuchMethod__ }) = let constructor; :: <x><y/></x>; 1.2e3.(this); \n<y><z/></y> ? 033 : function(id) { return id }) {F }\n");
tryItOut("with({__parent__: (new new Function())})return *;");
tryItOut("if( \"\" .unwatch(\"__iterator__\")) {{} } else  if (__noSuchMethod__.yoyo(<><x><y/></x></>)) export <xxx>{__parent__}</xxx>;");
tryItOut("return <><xxx>{__iterator__}</xxx></>;");
tryItOut("/*infloop*/for(let __parent__; 1e81; ({ delete: __parent__, __count__: [prototype] }) = eval(\"return __proto__;\",  \"\" )) {\tthrow <x><y/></x>;export __iterator__; }");
tryItOut("yield; const prototype;");
tryItOut("throw  for ((Object(true, window))(prototype = <><x><y/></x></>) in window) for (__count__ in prop);\nL:with([1,,]){null; }\n");
tryItOut("M:if( \"\" ) {let __proto__, prototype;yield null; } else {}");
tryItOut("if(prototype) {return;var gc(); } else {__proto__ }");
tryItOut("do {export __noSuchMethod__; } while(((function ([y]) { })()) && 0);");
tryItOut("if( \"\" ) { if (new (function  function::prop ()\t { return prototype } )(#1=[#1#])) [];} else export __proto__;");
tryItOut("{export __count__;(window); }");
tryItOut("return;");
tryItOut("L: ");
tryItOut("do {[1,2,3,4].slicereturn <><x><y/></x></>; } while((<{__noSuchMethod__}>yyy</{__noSuchMethod__}>.(this.__defineSetter__(\"__proto__\", [1,2,3,4].map))) && 0);");
tryItOut("export __noSuchMethod__;if(this) gc() else  if (true)  /x/g ;");
tryItOut("if(( ''  > <x><y/></x>)) { if (__noSuchMethod__\t) (window); else {export prop;gc() }}");
tryItOut("L:if((this.__defineSetter__(\"prototype\", [1,2,3,4].map) &&  ? <x><y/></x> : 5.0000000000000000000000)) { if /*\n*/((0/0 for each (__proto__ in @foo))) {/*for..in*/M:for(let constructor in ((/a/gi)(*))){throw <x><y/><///h\nx>;return; } } else break M;}");
tryItOut("if(* &  /x/ ) {/*for..in*/for(__count__ in ((eval)(arguments)))break L; }");
tryItOut("throw @foo; const function::__parent__;");
tryItOut("/*infloop*/do {continue M; } while(__count__.watch(\"__iterator__\", (function(id) { return id }).__defineSetter__));");
tryItOut("yield\n");
tryItOut("(prop);yield;");
tryItOut("L: M:do { } while((true) && 0);\nyield  /x/ ;\n");
tryItOut("throw StopIteration;");
tryItOut("if(__noSuchMethod__ = <bbb xmlns=\"yield <x/>\"><ccc:ddd>yyy</ccc:ddd></bbb>) { if ((this.*)) {export *;let (__iterator__, constructor = @foo) { /a/gi } } else return <x><y/></x>;}");
tryItOut("var __proto__ = window, __iterator__;\nlet __count__ = __iterator__, __noSuchMethod__ = <x><y/></x>;\n");
tryItOut("{const prop =  \"\" \nreturn 1e+81; }");
tryItOut("let(null.propertyIsEnumerable(\"__noSuchMethod__\"), * = (yield window)) ((function(){return yyy.(( ''  /= <x><y/><\f/x>));})());");
tryItOut("with({prototype: ({}) === ((eval(\"export constructor;\", window))())})\n const [({ __noSuchMethod__: [__count__, , ] }), __noSuchMethod__];");
tryItOut("__proto__ = __proto__;");
tryItOut("with([]){L:switch(window) { case ( /x/g .isPrototypeOf(constructor)): export *;break; case __iterator__ =  /x/g : throw <x><y/></x>;break;  }<y><z/></y>; }");
tryItOut("let (__iterator__, __noSuchMethod__) { yield; }");
tryItOut("export *;");
tryItOut("let ([, ]) { throw .2; }\n");
tryItOut("/*infloop*/for(__noSuchMethod__; prototype.__proto__ = __count__.(<x/>);  /x/g ) {L:if((\n__noSuchMethod__ = function ([y]) { })) {function ()true[1] } else  if (#0=function(id) { return id }) {}/*infloop*/do {export __iterator__; } while(({})); }");
tryItOut("let prototype;;");
tryItOut("do {/*for..in*/for(const __parent__ =  /x/  in this) {} } while(((this.__defineSetter__(\"constructor\", function  prop (__iterator__)__parent__ = window))) && 0);\f");
tryItOut("/*for..in*/for(var __parent__ in ((({}).__lookupGetter__)( -= yield __count__.(<><x><y/></x></>))))if(function(id) { return id }) return; else  if (#1=[#1#]) {(<x/>);( /x/ ); }");
tryItOut("/*infloop*/for(var [, __noSuchMethod__] = prototype.constructor = 1.3; ( /x/g  << this); [[] if (prototype)]) gc()");
tryItOut("<x><y/></x>;return prop;");
tryItOut("let(getter) { break ;");
tryItOut("/*for..in*/for(let prototype = <x><y/></\rx> in __count__) {yield <x/>;gc() }");
tryItOut("throw undefined;");
tryItOut("/*infloop*/do /*infloop*/for(let ({ __proto__: __count__, set: ({ __count__: __parent__, __iterator__: __iterator__ }) }) = (p={}, (p.z = [,,z1])()); (prop.prototype getter= <><x><y/></x></>); [<x><y/></x>.propertyIsEnumerable(\"__proto__\")].map(new Function)) (<x><y/></x>); while( /* Comment */);");
tryItOut("if(yield) { if (@foo) var case 2: break; return true;;break; export *;break; default: break; case 5: let __iterator__, __parent__ =  '' ;case 6: {};} else (*::*);");
tryItOut("yield false;");
tryItOut("__count__ = setter;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in <x><y/></x>.(<x><y/></x>)) return  '' ;");
tryItOut("with({}) { for(let y in [5,6,7,8]) throw __proto__; } ");
tryItOut("try { prop = constructor; } catch(prop) { for(let y in [5,6,7,8]) let getter = (-0); } finally { for(let y in [5,6,7,8]) yield; } ");
tryItOut("/*for..in*/for(__proto__ = <x/> |= <><x><y/></x></>.@foo in new (undefined)(\r).__defineSetter__(\"constructor\", \f(null).watch)) /*for..in*/for(const __proto__ setter: function(q) { return q; } in [,,z1]) throw  '' ;\t");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = __parent__ ?  /x/  : *::* in  /x/ ) const prototype = __count__, __proto__;");
tryItOut("let(__proto__ = <x><y/></x>, constructor) { export function::__proto__;");
tryItOut("{let __count__ =  \"\" ;export __proto__; }");
tryItOut("/*infloop*/for(@foo; (window.propertyIsEnumerable(\"__iterator__\")); __noSuchMethod__ = <y><z/></y>) {throw <y><z/></y>; }");
tryItOut("/*for..in*/M:for(prototype in ((function(y) { yield y; throw window;; yield y; })(let (__proto__) @foo .@*:: (yield  \"\" ))))let (prototype, prototype = <x/>) { {} }");
tryItOut("/a/gi");
tryItOut("yield <y><z/></y>;");
tryItOut("gc()");
tryItOut("/*for..in*/for(var constructor in #3={a:#3#}.__count__ = (true).watch) {if(__iterator__) {;yield window; } else  if (this) {return <x><y/></x>;(1 for (x in [])) }; }");
tryItOut("L:if([<><x><y/></x></> if (<x><y/></x>)]) {yield <y><z/></y>;/*infloop*/L:for(const prototype = <><x><y/></x></>;  /x/ ; *) {return -1; } }");
tryItOut("/*for..in*/for(({ constructor: constructor, __proto__: prop }) in (((eval).call)(this.__defineGetter__(\"prototype\", Function) = (new ([1,2,3,4].slice)/*\n*/(3/0, <><x><y/></x></>))))){{}\ngc()\n<x><y/></x>; }");
tryItOut("switch(@foo.__proto__) { case 1: break;  }");
tryItOut("/*for..in*/for(const prop = ({a1:1}) in (function ([y]) { })()) { get ;let prototype = __proto__, prototype; } const prop;");
tryItOut("{/*infloop*/for(__iterator__ = <x/>; *::*; @foo) {{}return; }export __count__; }");
tryItOut("yield this;");
tryItOut("/*infloop*/for(var ({ <xxx {__parent__}={(__proto__ = <x><y/></x>)} />: __iterator__ }) = prototype.(window.propertyIsEnumerable(\"constructor\"));  /x/ ; eval(\"M:if(<x><y/></x>) { if (1e81) {export constructor;yield; } else {return *::*; }}\", new (function (prototype, __parent__) { gc() } )(prototype = this))) {break L\n; }");
tryItOut("/*infloop*/for(null; this.zzz.zzz; (new 1e81())) { }");
tryItOut("L:if((true)[<x><y/></x>])  else  if (( '' .eval( \"\" ))) (<><x><y/></x></>);");
tryItOut("{if( /x/g ) __proto__; }");
tryItOut("switch( /x/g \n) { case : let ([, __parent__, __iterator__] = function(id) { return id }) { true; }break; case 8: break; break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var prototype in <>\t<x><y/></x></>) L:if(__count__) { if (<x><y/></x>) (this);} else (<y><z/></y>);");
tryItOut("with({}) let constructor; const __count__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = eval() in (this ?  if (this) : <><x><y/></x></>.__proto__)) {do break M; while((constructor = new -3/0()) && 0); }");
tryItOut("/*for..in*/for(__iterator__ in ((function(q) { return q; })((~ \"\" ))))export *");
tryItOut("/*infloop*/for(let ({ __count__: ({ function::prop: __count__, __parent__: ({ __proto__: ({ __parent__: __proto__ }), function::prop: __noSuchMethod__ }) }), constructor: __parent__ }) = ; false .@x:: function ([y]) { }.propertyIsEnumerable(\"__parent__\") += typeof ((__proto__) = (--__parent__)).*; (yield )) {export *; }");
tryItOut("with(__noSuchMethod__)/*for..in*/L:for(const __iterator__ = /a/gi in 1e-81) {;if(@foo) (@foo); }");
tryItOut("do {export *; } while((__noSuchMethod__) && 0);");
tryItOut("return;\n(3/0);\n");
tryItOut("{const constructor = <x><y/></x>;/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in [z1,,]) {continue M; } }");
tryItOut("with(<x><y/></x>.propertyIsEnumerable(\"constructor\"))if((yield <x/>)) ; else throw *::*;");
tryItOut("/*infloop*/do {export *;(*::*); } while(<x><y/></x>);");
tryItOut(" for (prototype in __proto__.(( /x/ .__defineSetter__(\"__parent__\", <x><y/></x>))))");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in this) {let __parent__ = false; }");
tryItOut("continue ");
tryItOut("if(prop) {/*infloop*/L:for(var prototype; -0;  /x/ ) {yield #3={a:#3#}; }/*infloop*/M:for(const get = <x><y/></x>; <><x><y/></x></>; <x><y/></x>) {default: break; {}break; (this);break; ;export __noSuchMethod__; } }");
tryItOut("const __iterator__, __parent__ =  /x/ ; const \tconstructor; const __noSuchMethod__;");
tryItOut("(false);");
tryItOut("__parent__;");
tryItOut("/*infloop*/L:do {{}export *; } while(true++);");
tryItOut("/*infloop*/for( /* Comment */<><x><y/></x></>; eval(\"new (eval(\\\"yield;\\\", __noSuchMethod__))(yield false.__lookupSetter__(\\\"__proto__\\\"))\",  ''  >= new (({}).__lookupGetter__)().@*); (__proto__.unwatch(\"__proto__\"))) /*for..in*/for(const (__noSuchMethod__) in ((Math.pow)(null ^= <><x><y/></x></>.__iterator__)))");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in *::* ^= #1#) {yield\nyield; }");
tryItOut("/*infloop*/M:for(var __iterator__ = (eval() *= prototype[-0])[window.eval(<x/>)]; __parent__ = <x/>; <>((new Function)())</>) /*for..in*/for(var __iterator__ =  /* Comment */ ''  in (({__iterator__: <y><z/></y> }))) /*for..in*/for(let __proto__ in (('haha'.split)(*))){; }");
tryItOut("throw <x/>;var prop = 4.;");
tryItOut("if(<><x><y/></x></>) { if (window) } else {gc() }");
tryItOut("/*infloop*/do {break M; } while(<x><y/></x>);");
tryItOut("/*infloop*/while(__count__ = <><x><y/></x></>){gc()with({prototype: null}); }");
tryItOut("with({prop: ( /x/ )[1e4].watch(\"__proto__\", ( '' ).watch)}){/*infloop*/for(prop; true; undefined) yield;0; }");
tryItOut("while((<x><y/></x>) && 0){}");
tryItOut("if(true) {export __iterator__;; } else {break ; }");
tryItOut("/*infloop*/for( /x/ .__proto__; (<x><y/></x>++); __iterator__) {}");
tryItOut("return;");
tryItOut("return;");
tryItOut("/*for..in*/for(const __parent__ = [z1] in this) gc()");
tryItOut("{/*for..in*/for(var __iterator__ in (()(__parent__))){4.;continue M; }{export __count__;continue M; } }");
tryItOut("return ({a2:z2}); const prop;");
tryItOut("/*for..in*/M:for([__proto__, __noSuchMethod__] =  ''  in 3.141592653589793) return");
tryItOut("/*infloop*/L:while(null){{}((*::*).apply).call\f }");
tryItOut("with(--<x><y/></x>){[,,];/*infloop*/for(1.3;  /x/ ; <x/>) yield \rundefined; }");
tryItOut("if(new this(<x><y/></x> +=  '' , [z1])) { if ((~[,,z1])) {return;continue M; const __count__; }} else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in null) ; }");
tryItOut("let (({ prop: __iterator__ })) { M:while((constructor = prototype) && 0){return;yield 1e4; } }");
tryItOut("/*infloop*/while((window.__noSuchMethod__.unwatch(\"__iterator__\"))){throw @foo;throw *; }");
tryItOut("/*infloop*/for(<x><y/></x>; continue L;; undefined) return");
tryItOut("M:if(<><x><y/></x></>) eval else throw <y><z/></y>;");
tryItOut("let (__proto__, prop = __iterator__.unwatch(\"prop\")) { let (constructor = @foo) { /*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in  /x/g ) {(<><x><y/></x></>);var __parent__ =  /x/g , __iterator__ =  /x/ ; } } }");
tryItOut("{with({constructor: null\n})export *;if(*) { if (*) yield;} else export __iterator__; }");
tryItOut("with(void <y><z/></y>){var __noSuchMethod__; }");
tryItOut("with({__proto__: __proto__.__parent__ = undefined})return 1e-81;");
tryItOut("M:with({__count__: <y><z/></y>})throw function ([y]) { };");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const function::__noSuchMethod__ in window) {return;__noSuchMethod__, __iterator__; }\nif((__proto__ = 033)) { if (window) {var __parent__ = #3={a:#3#}; }\t} else export *;\n");
tryItOut("([1,,]);");
tryItOut("M:if([1,,]) {yield; } else {(<x/>); }");
tryItOut("/*for..in*/for(let prototype in ((function  __noSuchMethod__ (constructor, prototype)(__count__ = 3)/*\n*/)(undefined.propertyIsEnumerable(\"__parent__\")))){return; }");
tryItOut("let (x::prototype = <><bbb xmlns=\"#3={a:#3#}\"></bbb></>, __iterator__) { export *; }");
tryItOut("if(prop) { if (<x><y/></x>) return __parent__; else }\nreturn __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\r(this.zzz.zzz)(this.zzz.zzz) in <y><z/></y> >>= false) return false;");
tryItOut("M:with({__count__:  /* Comment */ \"\"  != <x/>}){const constructor, __noSuchMethod__ = ({a1:1});L:if(new (null)(true,  '' )) {yield *; } else {gc() } }");
tryItOut("if((constructor.prop = new (function  constructor (__parent__, __proto__) { yield <y><z/></y> } )(1.2e3, #3={a:#3#}))) /*for..in*/for(const [__noSuchMethod__, prop] = (export prototype) in <><x><y/></x></>) {const __count__, __noSuchMethod__ = undefined;gc() }");
tryItOut("/*for..in*/for(var [prototype, constructor] = 033.unwatch(\"constructor\") in (-1 * 0x99)) {if(__proto__ = <x>\n<y/></x>) {if(<y><z/></y>) { if ( \"\" ) {{} }} else export __proto__; } else  if ((<><x><y/></x></>).watch(<x/>,  /x/g )) {Math.sin } }");
tryItOut("/*for..in*/for(constructor = (__iterator__ = <x/>) in true) throw @foo;");
tryItOut(";\nyield;\n");
tryItOut("/*infloop*/for(const prop = __count__; null; *::*)  get __count__ constructor (__parent__)*::*");
tryItOut("(0/0);");
tryItOut("{if([]) { if ((/a/gi).call(\r, ([.2].sort(__noSuchMethod__)))) {/*infloop*/for(let constructor = *::*; null; #2=({__proto__: undefined\n}))  }} else {continue ; }switch((eval(\"const __parent__;\", <x><y/></x>))) { case 5: ;break;  } }");
tryItOut("/*for..in*/\ffor(const __proto__ = 'fafafa'.replace(/a/g, ({}).hasOwnProperty) in constructor.__iterator__ getter= ({}).__lookupGetter__) {( '' )\nconst undefined = <><x><y/></x></>;prop = 0x99 }");
tryItOut("L:if(prop.(function ([y]) { } ^  /x/ )) gc()");
tryItOut("/*for..in*/for(let constructor in [<><x><y/></x></> / <><x><y/></x></> if (<x><y/></x>)]) {let __proto__;\nvar __noSuchMethod__, __iterator__ = *;\nlet (__count__) { ; } }");
tryItOut("/*infloop*/for( /x/g  .@ *; yield <x/>; <x><y/></x> << undefined) {return;yield  /x/ ; }");
tryItOut("throw StopIteration;");
tryItOut("with({}) yield .2;");
tryItOut("with(~[z1,,]){export prototype; }");
tryItOut("{export __proto__;{} }");
tryItOut("{while(([,,].unwatch(\"__iterator__\")) && 0){0/0; }L:with({__parent__: 3}){(1 for (x in [])) } }");
tryItOut("for(let y in [5,6,7,8]) with({}) for(let y in []);");
tryItOut("if(('fafafa'.replace(/a/g, *++))) M:if(prop = <y><z/></y>) { if ((new Date())) export *;} else {{}return; }");
tryItOut("/*infloop*/M:for(prototype; __noSuchMethod__; *::*) {{} }");
tryItOut("/*for..in*/for(const prototype in ((gc)(eval(\"1e4\", @foo)))){throw <y><z/></y>; }");
tryItOut("/*infloop*/for((eval(\"throw [z1];\", [[]]) if (3/0)); <zzz>true</zzz>.(( ''  ? true : <><x><y/></x></>\n)); ([.\f__lookupSetter__(\"__iterator__\") | <><x><y/></x></> ? <><x><y/></x></> :  /x/g  for (__count__(__noSuchMethod__ = __parent__) in null)])) return ({__noSuchMethod__: null});");
tryItOut("L: (@foo);");
tryItOut("with({}) for(let y in [5,6,7,8]) let(__iterator__ = <><x><y/></x></>, __iterator__ = (-1)) { ");
tryItOut("if(false) {throw __proto__; } else  if (\nfalse) ");
tryItOut("if(<><x><y/></x></>) {const __iterator__ =  /x/g , constructor;export prototype; } else  if (this) {let prototype, __iterator__ = ({a2:z2});yield 1.3; } else {export *;\f }");
tryItOut("return");
tryItOut("/*infloop*/L:for(const prop; ++Exception(); __iterator__ = window) {; }");
tryItOut("{export ; }");
tryItOut("/*for..in*/L:for(let __count__ in ((/a/gi)((<xxx>{__count__}</xxx>.((new Array(*, <><x><y/>\f</x></>))))))){/*infloop*/while(<x><y/></x>){prop, __iterator__ = <x><y/></x>;/a/gi } }");
tryItOut("switch(__noSuchMethod__) { case <><x><y/></x></> <= false: for(let y in [])default: break; case 1e+81 = 033 |= __iterator__ =  \"\"  ? \n<y><z/></y>++ : constructor = __noSuchMethod__.valueOf(\"number\"): 3/0;break; break; case prop.prototype: break; break; var __count__;break; case 9: (<x>\f<y/></x>); }");
tryItOut("{prototype;<x/>; }");
tryItOut("{}");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var ({ __iterator__: __count__, __proto__: prop }) in ((#1=true)(__parent__ = <x><y/></x>))){let (__parent__ = [,,z1], constructor = window) { throw <><x><y/></x></>; }{}\f\nyield <y><z/></y>; }");
tryItOut("/*for..in*/L:for(const [prototype, __count__] = (typeof constructor.constructor =  \"\" ).prop = new (*::*)(<><x><y/></x></\t> & <><x><y/></x></>, <><x><y/></x></>) in yield <><x><y/></x></>.hasOwnProperty(\"const prop = <x><y/></x>\")) /*infloop*/M:for(let __parent__; *::*; this != <x><y/></x>) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const  in __iterator__.__parent__ setter= <x/>) {} const __iterator__;");
tryItOut("/*infloop*/for(let function::__parent__; (yield  /x/ ); prop = 1.2e3) \texport *;");
tryItOut("if((this.__defineSetter__(\"x::constructor\", prop))--) return; else  if (null.prototype = (window[#3={a:#3#}])(__parent__.prototype getter= Function, {})) {/*for..in*/for(const [__noSuchMethod__, __iterator__] = constructor in *::*) {__parent__throw *::*; }let constructor = window; }");
tryItOut("return <x><y/></x>;");
tryItOut("/*for..in*/L:for(const [__count__, __proto__] = prototype in  '' ) {/*for..in*/L:for(let constructor in null) {prop, prototype;yield; }/*infloop*/for(__count__; this.__defineGetter__(\"__iterator__\", function  __parent__ (function::__count__, __noSuchMethod__) {  } ); __count__) {break ; } }");
tryItOut("if(__noSuchMethod__ = null.__iterator__ = __proto__ =  ''  @ #2=<x><y/></x>) {#1=[#1#];gc() }");
tryItOut("return;");
tryItOut("if(-3/0) { if ( '' ) {continue M; }} else {let __noSuchMethod__; }");
tryItOut("if(#0=[[1,2,3,4].map]) case 1: gc()\nvar prototype = __parent__;\ndefault: var constructor = this;if(undefined) {var __iterator__ = [[1]], __count__;yield [1]; }break; case window\n: break; case ((arguments)[ \"\" ]):  else ;");
tryItOut("/*for..in*/L:for(const __parent__ in ((Math.sin)((<><x><y/></x>/*\n*/</>)( \"\" )))){yield; }");
tryItOut("M:with([1]){case 7: function  __proto__ (, __proto__) { yield <x><y/></x> } ([1]);break; case 9: case undefined: break; break; break; /a/gi }if(constructor.((new (new Function(\"M:with({__noSuchMethod__: true})(<><x><y/></x></>);{}\"))()))) export *; else  if (new (([1,2,3,4].slice).watch)()) M:if(delete .2) {{}var __count__ = this; } else  if ((#2=[*::*])) {export *;*; }\f else export __proto__;var prop = [z1,,];");
tryItOut("{if(<><x><y/></x></>) export prop; else {(1e81); } }");
tryItOut("return this\nyield;");
tryItOut("export prototype");
tryItOut("/*for..in*/for(let *::* in ((eval)((function ([y]) { })())))yyy");
tryItOut("switch((function ([y]) { } in  )) { default: {yield; } }");
tryItOut("{/*infloop*/for(<x><y/></x>; <><x><y/></x></>; [1]) {return window;throw <x><y/></x>; }([[]]).watch }\n/*infloop*/M:while(this.zzz.zzz.__defineGetter__(\"prop\", function(y) { yield y; __parent__ = false;; yield y; })){M:do var __proto__ =  \"\" ; while((@foo *= prop) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in (uneval(<x><y/></x>.prop)) || new (Math.pow)(<><x><y/></x></>, 0x99)) if(<x><y/></x>) { if (null) {{}export prototype; }} else {gc()<><x><y/></x></>; }");
tryItOut("if(new __parent__(undefined, <><x><y/></x></>)) {;gc() } else  if (constructor.function::__count__ setter= ({}).hasOwnProperty) continue ; else export *;<x/> /  /x/g   }");
