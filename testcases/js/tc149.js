tryItOut("while((3) && 0)export *;");
tryItOut("/*infloop*/do {return;return null; } while( /x/g );");
tryItOut("/*infloop*/while(*::*)/*infloop*/while(<x><y/></x>){return  /x/ ;yield; }");
tryItOut("/*for..in*/for(let __parent__ in ((((1 for (x in []))).apply)(__parent__ = .__parent__ = <y><z/></y>)))with(<x><y/></x>)gc()");
tryItOut("let constructor = <y><z/></y>, __iterator__;");
tryItOut("try { <x/>; } catch(__proto__ if (function(){this.zzz.zzz;})()) { with({}) return; } catch(prototype if (function(){for(let y in []);})()) { __count__ = constructor; } catch(__noSuchMethod__ if (function(){__count__ = __proto__;})()) { for(let y in [5,6,7,8]) try { {} } catch(prop) { throw -0; }  } finally { for(let y in [5,6,7,8]) for(let y in []); } ");
tryItOut("L: L:switch(@foo) { default: export __iterator__;break; case (<x/>)( \"\" ):  }");
tryItOut("/*infloop*/L:do {if((null)[prop]) { if (0) export *; else {__parent__;export __noSuchMethod__; }}with(0){__count__, __proto__ = 1.3;[1,,]; } } while(*);");
tryItOut("if(constructor) { /x/ ;var __noSuchMethod__ = @foo; } else  if ((this for each (prop in __noSuchMethod__))) <y><z/></y>");
tryItOut("yield <x><y/></x>;(false);");
tryItOut("with(((<xxx>{prop}</xxx>[ \"\" .__defineGetter__(\"__noSuchMethod__\", (*::*).watch)])())){yield <y><z/></y>; }");
tryItOut("[[, , [], , [, ]], ]");
tryItOut("switch(*::*) { default: L:if(*) { if (<x><y/></x>) #1 else {export *; }}break; if((this.zzz.zzz)) {(true); } else ;break;  }");
tryItOut("try { for(let y in []); } catch(constructor if  /* Comment */(try { (new Function(\"export __noSuchMethod__;\")) } catch(\f__iterator__ if <y><z/></y>) { constructor, __iterator__ = true; } catch(function::[[]] if <><x><y/></x></>) { gc() } catch(prop if (function(){export *;})()) { gc } catch(__proto__ if window) { throw <y><z/></y>; } .watch(\"__proto__\", Math.pow))) { throw StopIteration; } catch(__iterator__ if (function(){/*infloop*/\tfor(const [, ] = this.__defineSetter__(\"__proto__\", <y><z/></y>); __noSuchMethod__(<><x><y/></x></>, 1e4); this.__defineGetter__(\"__proto__\", gc)) {yield <x><y/></x>; }})()) { let(__proto__) { let(__parent__ = <x><y/></x>(function(id) { return id }, *), prop =  /x/ ) ((function(){throw StopIteration;})()); } catch(__count__ if (function::__parent__)[[@foo].map(.2)]) { continue ; } catch(__noSuchMethod__ if [eval(\"-1\", (-0)) === null if ([11,12,13,14].sort)]) { yield ({__proto__: <x><y/></x>}\t); } finally { for(let y in [5,6,7,8]) let(__proto__ = function::prototype - <x><y/></x>) ((function(){let(__iterator__) ((function(){*::*})());})()); } ");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */L: for  each(prop in <x/>) {4.{} } while((('haha'.split).call((this[<x><y/></x>]), window .. @foo)) && 0);(@foo);");
tryItOut("if( '' ) {;gc() } else  if (<><x><y/></x></>) {export *;(prop); } else ");
tryItOut("gc()\ndo {; } while((<y><z/></y>) && 0);\n");
tryItOut("if([z1,,]) { if (~* ? <y><z/></y> : @foo.eval((<x><y/></x>))) export __iterator__;} else const prop = <><x><y/></x></>, prop = *;");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = (function (__iterator__) { yield @foo } ).call( \"\" , ).propertyIsEnumerable(\"__count__\") in <><x><y/></x></>) {/*for..in*/for(let [prototype, __count__] = function ([y]) { } in __noSuchMethod__) {const constructor, __proto__ = let prototype, __noSuchMethod__ = 1e81;;(@foo); } }");
tryItOut("({ prototype: [], prop: __count__ })");
tryItOut("if(window) { if (new ({})( /x/ , <><x><y/></x></>)) /*for..in*/for(let prop in ((Function)([[1]])))( /x/g );} else throw  \"\" ;");
tryItOut("return;");
tryItOut("/*infloop*/for((<x><y/></x> .@*:: *::*); Number(<x/>); <x/>) return <y><z/></y>;");
tryItOut("yield yield *::*;");
tryItOut("let ( { return <x/> } ) { /*infloop*/for(; this < window; <x><y/></x>.*) {} }");
tryItOut("/*for..in*/for(__parent__ = __parent__ = [(1e81& .propertyIsEnumerable(\"__iterator__\" @foo))\f] in new (function () { yield constructor } )()) {({ __parent__: ({ prototype: ({ __noSuchMethod__: prototype }), __count__: ({ prop: constructor }) }), __noSuchMethod__: [] }) = (<x><y/></x>)[true].__iterator__ =  /* Comment */arguments.unwatch(\"({ __count__: __iterator__ })\")return <><x><y/></x></>; }");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: [, , __count__, ({ function::__noSuchMethod__: constructor })] }) = __count__ = {}; <y><z/></y>.prototype = <x><y/></x> .@x:: #1=[#1#]; ( ''  = window || <x/> * __parent__ = <x><y/></x>)) if(prototype.(<y><z/></y>)) {([1,2,3,4].map).call/*\n*/ } else  if (-3/0) gc()");
tryItOut("M:if((window instanceof  \"\" \t)) {let __parent__;{} } else if(<><x><y/></x></>) { if ( /x/ ) gc() else {{} }}");
tryItOut("do {export __noSuchMethod__with(<x><y/></x>); } while((prototype%=this) && 0);");
tryItOut("/*infloop*/for(__proto__ = yield @foo; <><x><y/></x></>['constructor'] = prototype.hasOwnProperty(\"__noSuchMethod__\").@foo; (constructor =  /x/ .isPrototypeOf((({ constructor: ({ __count__: __iterator__ }) }) = __iterator__)))) continue ");
tryItOut("let (x::__noSuchMethod__ = -1) { try { return; } finally { __parent__ = <x/>, __iterator__ = <y><z/></y>; }  }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var constructor in ((Math.sin)( /* Comment */<x><y/></x>\t |= (<y><z/></y>))))return;\t");
tryItOut("L: L:with(<>\f<x><y/></x></>)__count__ = <y><z/></y>, constructor =  /x/ ;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/for(var __parent__; \n<x><y/></x>.@*; __noSuchMethod__++) return [z1,,];");
tryItOut("switch((__noSuchMethod__.__noSuchMethod__ getter= /a/gi)) { case 6: break;  }");
tryItOut("/*infloop*/for(var [, , ({ prop: ({ prototype: ({ __count__: [, constructor, ({ prop: __count__ })], __noSuchMethod__: prototype }), constructor: ({ __proto__: ({ __proto__: ;, __count__: ({ __noSuchMethod__: __count__, __iterator__: __parent__ }) }) }) }), __noSuchMethod__: __iterator__ }), constructor] = eval(\"Function\", @foo)().prototype; (.__defineSetter__(\"prop\", eval)); +<><x><y/></x></>.propertyIsEnumerable(\"constructor\").__lookupSetter__(\"prototype\")) {{}\nconst __iterator__, __iterator__ = 1.3;\n }");
tryItOut("do {yield; } while((033) && 0);");
tryItOut("(1 for (x in []))<x><y/></x>");
tryItOut("L: {return;yield null; }");
tryItOut("{}");
tryItOut("M:if(([z1,,].valueOf(\"number\"\f)) === new Array(<x><y/></x>)) { if ((eval(\"<><x><y/></x></>\", <><x><y/></x></>))) {throw []; } else var constructor = *;}");
tryItOut("if(.*) yield; else /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in []) {{} }");
tryItOut("switch(*::*) { default: ;break;  }");
tryItOut("<x><y/></x>; const __count__\nif((__parent__(<y><z/></y>, @foo)) <= this\n.__defineSetter__(\"__noSuchMethod__\", function () { return <x/> } )) throw <y><z/></y>;");
tryItOut("/*infloop*/for(var prop; [, , ({ __noSuchMethod__: prop })] = <xxx {__parent__}={this.__defineGetter__(\"__proto__\", function(y) { yield y; yield ({});; yield y; })} /\f>; ([this])) {if(<x><y/></x>) { if (null) {const prop = @foo, constructor;{} } else eval}; }");
tryItOut("prototype");
tryItOut("if([[]]) {*::*; } else {\tbreak L;0x99 }");
tryItOut("let ([, ], __parent__\f) { /*for..in*/M:for(let window in 0x99) const constructor = [,], constructor = <x/>\n }");
tryItOut("with({__proto__: (033: (window()).__iterator__ = this.__defineGetter__(\"__proto__\", (new Function(\"yield;\"))))}){if(eval(\"true\",  for (__iterator__ in [z1,,]))) {continue L; } else Function }");
tryItOut("L:if([constructor].map((<x><y/></x>).apply)) {yield ({a1:1});; } else { }");
tryItOut("with({}) return (<y><z/></y> ? *::* : <x/>);");
tryItOut("yield *;");
tryItOut("if(let ({__noSuchMethod__; }) (uneval(*)) >>>=undefined()) /*infloop*/M:do (true); while(function (__count__, __iterator__) { yield <><x><y/></x></> } ); else  if (<xxx {__proto__}={()} />) {return <x><y/></x>\n\nM:if((p={}, (p.z = window)())) __iterator__, __noSuchMethod__; else const __proto__ = @foo, constructor = null; } else {return new (1 for (x in []))();var prototype; }");
tryItOut("if(this.zzz.zzz) {yield <x/>; } else yield undefined;");
tryItOut("{if(({constructor: #1=[#3={a:#3#}] }) -= constructor) { if (__noSuchMethod__) {gc() }} else {M:do export *; while((({a1:1})) && 0);export prop; } }");
tryItOut("L:if(eval(\";\", undefined)) {<y><z/></y>; } else  if (this >>= window) continue M; const prop;");
tryItOut("if([15,16,17,18].sort(function  constructor (__count__) { return undefined; } , function(id) { return id }.valueOf(\"number\")) / (yield  \"\" ).__lookupSetter__(\"__noSuchMethod__\")) { if (window) return;} else return @foo;");
tryItOut("M:switch(__iterator__ = *::*) { case 1: continue ;break;  }");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("export *\nexport *;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = constructor.__proto__ = [11,12,13,14].some in (\n__proto__)) if(new [1,2,3,4].map(((function  __iterator__ (__noSuchMethod__)1e4()).constructor = (eval(\"const prop = 1.2e3, __noSuchMethod__ = null;\", <><x><y/></x></>))), [*::* for each (__noSuchMethod__ in <><x><y/></x></>)])) {/*for..in*//* nogeckoex bug 349964 */L: for  each(let __noSuchMethod__ in <x><y/></x>) {(<><x><y/></x></>); }yield undefined; } else  if (new \n(p={}, (p.z = [z1,,])())()) __count__; else {{} }");
tryItOut("if(<x><y/></x>) {(1 for (x in [])) } else (<><x><y/></x></>);");
tryItOut("{/*infloop*/while( \"\" .__defineGetter__(\"__noSuchMethod__\", (new Function(\";\")))){gc()return false; }if(new (Math.pow)() << <x><y/></x> ? <y><z/></y> : 3) return false; else  if (<>__noSuchMethod__ = prop</>.valueOf(\"number\").@foo) constructor, __count__ = prototype; else {{}{} } }");
tryItOut("if(<x/>) {(#3={a:#3#});throw this; } else { } const __proto__;");
tryItOut("L: continue ;");
tryItOut("for(let y in [5,6,7,8]) case 1: break; ");
tryItOut("/*infloop*/while( /x/g )export __count__;");
tryItOut("L:if((3/0.yoyo(@foo)).prototype = <><x><y/></x></>) { if (<y><z/></y>) const prop, constructor = 0x99;} else {({}).hasOwnPropertyvar constructor, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("<><x><y/></x></>");
tryItOut("let (({ __noSuchMethod__: ({ prop: [, ({ __iterator__: [prop, prop] }), , constructor], __parent__: ({ constructor: ({ <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>: ({ __iterator__: __proto__, __parent__: __iterator__ }), prototype: __iterator__ }), __parent__: ({ prototype: ({ __count__: prop, __noSuchMethod__: __noSuchMethod__ }), constructor: __iterator__ }) }) }) }) = (('haha'.split)(1.2e3) >>>=<></>), prop) { return -0; }");
tryItOut("let(prop, __iterator__) ((function(){__iterator__ = constructor;})());");
tryItOut("with({__noSuchMethod__: (((function ([y]) { })().__noSuchMethod__).__lookupSetter__(\"__proto__\"))}){/*for..in*/for(let prototype in ((#1#)(function ([y]) { }))){({});let __iterator__; }( /x/ ); }");
tryItOut("L:with(true)\n");
tryItOut("M:switch((\n*)) { default: return;case : break;  }");
tryItOut("if(new new Function()) with({}) __iterator__ = false; else  if ( set constructor(prop) { export *; } ) /*infloop*/L:for(({__proto__: __parent__ = <x><y/></x>}); window; @foo) yield <x><y/></x>;");
tryItOut("/*for..in*/L:for(const prop = (__noSuchMethod__.constructor = @foo) in <>(constructor = (p={}, (p.z = (yield window))()))</>) ({ prototype: [], __iterator__: ({ __noSuchMethod__: __parent__, __parent__: __noSuchMethod__ }) })");
tryItOut("yield __noSuchMethod__;\nL: break M;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\t for  each(var constructor in <><xxx>{prop}</xxx></>) let (delete = this.zzz.zzz) { function(id) { return id } }");
tryItOut("/*infloop*/for(__parent__;  /x/g ; this) ([[]]).call\nyield 1e-81;\n");
tryItOut("M:if([][let (get, __iterator__) this.__parent__ = function ([y]) { }]) const __parent__; else  if ('fafafa'.replace(/a/g, /a/gi)) {/*for..in*/for\f(var prototype in ((function  prototype (prop) { yield; } )((prototype = <x><y/></x>.__defineGetter__(\"__proto__\", function (prototype))))))gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <><x><y/></x></>) {<x><y/></x>const __iterator__ = window, __noSuchMethod__ = <x><y/></x>;gc() }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <y><z/></y>) {__noSuchMethod__ = [,,z1];; }");
tryItOut("M:with({prop: *})var __noSuchMethod__;");
tryItOut("with({__count__: ((~ /x/g .throw(*::*)).__iterator__ | (yield 1.3))}){if(undefined) {yield  '' ;yield; } else  if (window) {yield prop; } else {yield; } }");
tryItOut("switch((window.\tpropertyIsEnumerable(\t\"prop\"))) { default: break; case  /* Comment */-3/0: return;break; ;break; L: {__iterator__; }break; case 9: break; case 1: return [z1];break; break;  }");
tryItOut("/*for..in*/M:for(let [prototype, prototype] = <><x><y/></x></> = <x/> in <x/>.__lookupGetter__(\"__count__\")) yield this;");
tryItOut("/*infloop*/do {break M; } while(this);");
tryItOut("if((function ([y]) { })()) { if ((1e+81)) {{}{} } else {throw prototype; }}");
tryItOut("/*for..in*/for(var [constructor, __noSuchMethod__] = __count__\f = new ({prop: <x><y/></x>})(export prototype) in null) let __count__, constructor;");
tryItOut("M:if(({ set prototype __proto__ (__count__, prototype) { let __proto__ = prototype, constructor }  })) switch(this >>> ({})) { case 5: break;  }");
tryItOut("const __iterator__ = [,], __proto__");
tryItOut("/*infloop*/do {throw ([<y><z/></y> for each (__proto__ in {})]); } while((constructor( /x/ ) = this.__defineSetter__(\"__count__\", new Function)));");
tryItOut("L:while((function::constructor) && 0)");
tryItOut("with({prop: false .@x:: <><x><y/></x></>}){/*for..in*/for(let [__parent__, prototype] = window.@foo in  \"\" ) return <x><y/></x>; }");
tryItOut("__iterator__ = __parent__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/L:for(let constructor = this.__defineSetter__(\"__parent__\", ({}).__lookupGetter__) in ({prototype: <x><y/></x>})) for(let y in []);");
tryItOut("do return; while((__parent__ = @foo.__noSuchMethod__) && 0);");
tryItOut("if((new undefined(__iterator__, false))) { if ((\nconstructor)) gc()} else var __noSuchMethod__;\t const prop;");
tryItOut("M:if((__noSuchMethod__)) /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in (function ([y]) { })()) {gc(){} }");
tryItOut("/*for..in*/for(var [__count__, prototype] = (new ((new Function(\"{}\")))()) in ({ get function::__count__ constructor (__count__, prototype) { return <><x><y/></x></> } , __iterator__ setter: [1,2,3,4].map })) (<x><y/></x>);");
tryItOut("/*infloop*/while([11,12,13,14].map)yield;");
tryItOut("L:while((window @ this) && 0)var prop = @foo, prop = @foo;");
tryItOut("L: {if( '' .eval(<><x><y/></x></>)) {return; } else  if ([<x><y/></x>].some((-0))) {continue L; } else {return; \"\"  }let prototype = null; }");
tryItOut("try { for(let y in []); } catch(__iterator__) { with({}) { __parent__; }  } ");
tryItOut("throw StopIteration;");
tryItOut("throw StopIteration;");
tryItOut("gc()\nexport constructor;\n");
tryItOut("while((prop) && 0){var each = <> </>;(window); }");
tryItOut("try { {} } catch(__parent__) {  } finally { export *; } ");
tryItOut("if(yield <><x><y/></x></>) { if (__parent__.(constructor)) <><x><y/></x></>;} else {set = <x/>, __iterator__ = __iterator__;export *; }");
tryItOut("{var __iterator__ =  '' , prototype; }");
tryItOut("/*infloop*/for(({ __noSuchMethod__: <x><y/></x>.prototype }) = 'fafafa'.replace(/a/g, (function  constructor (__parent__, __iterator__) { yield #1=[#1#] } ).apply); undefined ? __noSuchMethod__.__proto__ setter= (new Function(\"yield undefined;\")) : [, , __iterator__, __proto__, __parent__] = ({__proto__ getter: /a/gi }); ((uneval(typeof __iterator__))) >> (__parent__ = __proto__ % [@foo].sort(Math.sin))) ;");
tryItOut("yield\nif(#1#) {*; }");
tryItOut("if(this) {var let = this, __parent__;export prototype; } else  if (window) var prop =  \"\" , prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in constructor) gc()");
tryItOut("let (prototype = ((\f(<x><y/></x>).watch).apply).call(*::*.throw(__iterator__), @foo = __proto__)) { var __proto__; }");
tryItOut("L:if(<y><z/></y>) {return <x><y/></x>;return; } else  if (<><x><y/></x></>) {export __parent__;const prop; }");
tryItOut("L:with(<>yyy</>)(this);");
tryItOut("{return [1,,]; }");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(var [__proto__, __count__] =  /* Comment */(this ? <x/> : ({a1:1})) in ( /x/g )[3.141592653589793]) {export *; }");
tryItOut("if(<x/>) return arguments;\f");
tryItOut("with({}) return;");
tryItOut("/*for..in*/M:for(const [__iterator__, constructor] = __count__.__count__ setter= function(y) { yield y; export prop;; yield y; } in ) {/*infloop*/for((-0); __count__; null) __parent__ = false; }");
tryItOut("if(constructor.__lookupSetter__(\";\").__defineSetter__(\"__noSuchMethod__\", 'haha'.split)) {yield [1,,];yield false; } else export *;");
tryItOut("/*for..in*/M:for(var __iterator__ in 1.3) yield;\n(<y><z/></y>);\n");
tryItOut("\n");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/for( = -__iterator__ = @foo in <><x><y/></x></>) return window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__.__count__ in <x><y/></x>.(<y><z/></y>)) {{}export *; }");
tryItOut("{export *;break L; }");
tryItOut("if() { if (([({ constructor: __parent__ }), , ] = (({ __parent__: prototype, prop: [] }) = ({ constructor: __count__, __count__: __count__ })))) {do {let prop, prop = <x><y/></x>; } while((#3={a:#3#}) && 0);export __proto__ } else {const __iterator__, __iterator__ = <><x><y/></x></> === false; }}");
tryItOut("/*for..in*/for(var prop = <><x><y/></x></>\n in [,,]) {let __count__, __proto__; }");
tryItOut("return (uneval( '' )).throw(<x/> /= (-1));");
tryItOut("M:with((<x><y/></x>.__proto__ = null.yoyo( /* Comment */window))){throw <><x><y/></x></>;; }");
tryItOut("/*infloop*/M:for(let prototype; (let __iterator__); (<x><y/></x>.@*)) gc()");
tryItOut("/*for..in*/for(var constructor in (( /* Comment */([undefined.__lookupGetter__(\"__proto__\")].some(<x/>)))((__proto__.(prototype))))){with({}) { break ; }  }");
tryItOut("/*for..in*/for(const __count__ in prototype) L: return;");
tryItOut("yield *;");
tryItOut("prototype;\nyield;\n");
tryItOut("/*infloop*/M:for( /x/g ; window;  '' ) {{} }");
tryItOut("M:do {throw __count__; } while((<x/>) && 0);");
tryItOut("throw __iterator__;( '' );");
tryItOut("return <x><y/></x>.(<x><y/></x>);");
tryItOut("if(<y><z/></y>) { if ( \"\" ) return window;} else {<><x><y/></x></>;const __proto__ = <x><y/></x>, __proto__; }");
tryItOut("/*infloop*/for(({__count__:  \"\"  }); <x><y/></x>; new ((this).watch)()) /*infloop*/do return  \"\" ; while(this);/*for..in*/for(let constructor = __iterator__.(__noSuchMethod__.__iterator__ = prototype = @foo) in #2=({__proto__: [[]]})) {*::*;continue ; }");
tryItOut("if(([function(q) { return q; }].filter((({}).hasOwnProperty).call))) var prop, prototype;");
tryItOut("const __parent__ = <><x><y/></x></>, __noSuchMethod__ = <x/>\n");
tryItOut("/*for..in*/L:for(let constructor = () in <><x><y/></x></>) export *;");
tryItOut("/*infloop*/for((__count__.(*)); <><x><y/></x></> ?  \"\"  : <x><y/></x>; @foo) export *;");
tryItOut("L:if((null.watch(\"__parent__\", window)).throw(<x><y/></x>.__lookupSetter__(\"prop\")).prop.throw([yield *::* if (<y><z/></y>)])) {yield;\n '' ;\n{} } else return;");
tryItOut("L:if(this.__defineSetter__(\"__proto__\", function(y) { yield y; const prop;; yield y; })) {gc()with([z1,,]){let __parent__ = undefined, prop = <><x><y/></x></>; } } else {M:if(@foo) function  __count__ () { yield 0x99 }  else  if ( /x/g ) yield;\n\nif( \"\" ) { if (constructor) (3.141592653589793);} else yield;/*infloop*/for(prototype; #0=<x><y/></x>; [false].some(({}).__lookupGetter__)) let prototype; }");
tryItOut("do let(constructor = #2=//h\n[({a1:1})], [get, prop, ]) { yield ((([1,2,3,4].map).call(null, (<><x><y/></x></>);)) in (#1#)(5.0000000000000000000000)); while((<> \"\" ([1e-81].map(<x><y/></x>))</>.(*)) && 0);");
tryItOut("if(__proto__) {throw true; } else {{}let __count__ = this; }");
tryItOut("for(let y in []);");
tryItOut("{/*for..in*/for(let [prototype, __noSuchMethod__] = <x/> in  /x/ ) export *;var delete, constructor = <x/>; }");
tryItOut("/*for..in*/for\t(const [prototype.__proto__, prop] = eval(\"export *;\", function(id) { return id }) in <x/>) {export __iterator__; }");
tryItOut("var __noSuchMethod__, prop = *\n({ __proto__: [] }) = ([15,16,17,18].sort(new Function, (({}).__lookupGetter__)())), constructor = @foo.@foo const prop;");
tryItOut("( /x/g );");
tryItOut("do /*for..in*/for(let __noSuchMethod__ in <><x><y/></x></>) return; while((new (Function)()) && 0); const prop;");
tryItOut("/*for..in*/for(const __count__ = ({ __iterator__: ({ <x><y/></x>.prototype = ({a1:1}), undefined: __count__, __parent__: prototype }), prototype: constructor }) = <x/> in (function  __count__ () { return prop } )) let(__proto__ = <x><y/></x>) ((function(){return;})());");
tryItOut("throw __iterator__; const prototype;");
tryItOut("with({prototype: ({prop: <>throw <x/>;</> })})export *;");
tryItOut("with({}) { export __noSuchMethod__; } ");
tryItOut("let(__count__ = (yield b)) ((function(){throw StopIteration;})());");
tryItOut("/*infloop*/for(var __noSuchMethod__ = (<x><y/></x> >>>=*::*); [15,16,17,18].filter((window).watch, [,]); eval(\"throw this;\",  \"\" )) {return *; }");
tryItOut("if(((yield let (prop = window) <x><y/></x>).isPrototypeOf([(prop%= /x/  ^=  /x/ )]))) { if (0) do /*for..in*/L:for(let [__parent__, __iterator__] =  /x/g  in constructor) break M; while(((prop.constructor getter= this)) && 0); else {L: {yield; } }}");
tryItOut("var __iterator__ = window, __noSuchMethod__ = __count__;");
tryItOut("return;");
tryItOut("/*infloop*/for(let __count__; __iterator__.__iterator__ setter= each = constructor; <><x><y/></x></> *=  /x/ ) {<bbb xmlns:ccc=\"0/0\"><ccc:eee></ccc:eee></bbb> }");
tryItOut("with({constructor: <></> << __count__ = 5.0000000000000000000000}){{__iterator__; } }");
tryItOut("L:if(<><!--yy--></>) //h\n{__parent__\n } else {; }");
tryItOut("/*infloop*/while(try { throw 3/0; } catch(__proto__) { prototype; } finally { __proto__, constructor = <><x><y/></x></>; } .__proto__ = (({a2:z2}) >= __proto__))__parent__;");
tryItOut("/*for..in*/for(var (prototype) in ((function(y) { yield y; return <y><z/></y>;; yield y; })(delete arguments)))gc()");
tryItOut("/*infloop*/for(__proto__; [,,]; ({a1:1})) window");
tryItOut("constructor = __iterator__;");
tryItOut("let (constructor) { throw <y><z/></y>; }");
tryItOut("/*infloop*/M:do {break M;/*for..in*/L:for(const [__parent__, __proto__] = [15,16,17,18].map(Math.pow, __parent__) in <y><z/></y>) if(undefined) { if (@foo) {let __proto__; }} else {break M; } } while((function ()(function ([y]) { })() ? __proto__ : this).apply(([#1=[#1#] %= __proto__].map((prop|=(-0))))));");
tryItOut(" /x/g ;");
tryItOut("this.zzz.zzz");
tryItOut("continue L\ngc()");
tryItOut("/*for..in*/for(const __parent__ in arguments) {; }");
tryItOut("if((__noSuchMethod__ = [1,,]).valueOf(\"number\")) __count__ else {return; }");
tryItOut("if(this) { if (<y><z/></y>.valueOf(\"number\")) {const prototype = ({a1:1}); } else throw true;}");
tryItOut("if(__parent__ = (\t@foo.prop)) { if (eval(\"export prop;\", prototype).isPrototypeOf((-1))) return null; else {continue ;const __count__ = <><x><y/></x></>; }}");
tryItOut("if((1 for (x in []))( /* Comment */__noSuchMethod__)) {;return  /x/ ; } else  if (__parent__) export constructor;");
tryItOut("/*infloop*/for((uneval(<><x><y/></x></>\n)).propertyIsEnumerable(\"prop\"); ((\n#1#).hasOwnProperty(\"__noSuchMethod__\")); <x/>.hasOwnProperty(\"__count__\").throw(this.throw(true))) L:with({__iterator__: -1}){gc() }");
tryItOut("if(((constructor)[<x><y/></x>])) {if([15,16,17,18].sort([1,2,3,4].slice, *::*))  else  if (*::*.@foo) {<><x><y/></x></>;const __proto__ =  \"\" ; } else {prop = *, prototype = [z1,,]; }/*infloop*/for(<y><z/></y>; prop;  \"\" ) gc() } else {gc() }");
tryItOut("L:switch(continue L) { case 6: break; break; break; throw <y><z/></y>;break; break; break;  }");
tryItOut("if(({__proto__: @foo, setter: ([1,2,3,4].map)(@foo) })) {if(window.__count__) return *::*;const __count__, function ([y]) { } } else  if \t((-1)) <y><z/></y>;");
tryItOut("return;");
tryItOut("{__iterator__ =  '' ; }");
tryItOut("continue M;");
tryItOut("if((this.zzz.zzz)) yield <><x><y/></x></>; else  if ([,,z1] &= *::*.watch(\"__count__\", (new Function(\"const prop = <><x><y/></x></>, prototype;\"))) >>= <x><y/></x>.__count__\t) {(1e-81);throw function  constructor () {  } ; } else 1.2e3;");
tryItOut("gc() const prototype;");
tryItOut("yield\n");
