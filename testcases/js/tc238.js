tryItOut("const __proto__ = -0, __count__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var prototype in <x><y/></x>\f) {;export __parent__; }");
tryItOut("/*infloop*/M:for(prop;  /x/g ; delete -0) {var x::__count__ = getter; const __proto__; }");
tryItOut("switch(@foo) { case 1: break; case undefined.eval(<y><z/></y>) += (prop):  }");
tryItOut("{gc()L: 'haha'.split }");
tryItOut("/*infloop*/for([this.__defineSetter__(\"__parent__\", Function).__defineSetter__(\"prototype\", [1,,])].filter(function(y) { yield y; (<><x><y/></x></>);; yield y; }); 1e+81.__defineGetter__(\"__parent__\", new Function); let __parent__ = *::*.prop = (prop.__parent__ setter= function  __iterator__ (__noSuchMethod__) { (-3/0); } ).eval(yield window)) export constructor;yield;");
tryItOut("for(let y in []);");
tryItOut("__parent__");
tryItOut("M:with({__noSuchMethod__: })[1,2,3,4].slice");
tryItOut("if(this.__defineSetter__(\"__proto__\", [1,2,3,4].slice)) { if ((let (__proto__) ~4.)) { } else {prototype = #1=[#1#], prop = true;export *; }}");
tryItOut("with(<><x><y/></x></>)");
tryItOut("return;");
tryItOut("M:if(*::*)  else {let __proto__ = window, __iterator__ = [[]];return; }");
tryItOut("/*infloop*/M:for(setter; this.__defineSetter__(\"__proto__\", (1 for (x in [])));  /x/g ) continue M;");
tryItOut("L: {if((-0))  else  if (<x><y/></x>) const __parent__ = function ([y]) { }, __noSuchMethod__ = __parent__; else {} }\n__iterator__ = prototype;\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ =  '' .unwatch(\"__count__\") in this) {var __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(({ prototype: [[]], __noSuchMethod__: ({ constructor: ({ function::constructor: ({ yield\t: prototype, prop: __iterator__ }) }), __count__: [, ({ __proto__: constructor/*\n*/ })] }) }) in (((1 for (x in [])))(new  '' ()))){if(eval(\";\", .eval(window))) { if (window) {(<x/>); } else {if(<><x/*\n*/><y/></x></>) { if (<x><y/></x>) continue ; else return [,];}continue M; }} }");
tryItOut("if(* .@ <x><y/></x>) {returnlet __parent__; }");
tryItOut("/*infloop*/L:do {do {export __iterator__; } while(( \"\" ) && 0); } while([11,12,13,14].filter);");
tryItOut("gc()");
tryItOut("L:if(__proto__) { if (prop) {return;export *; }} else [,];");
tryItOut("/*infloop*/while(constructor(null, 0))let __noSuchMethod__, __iterator__ = this;");
tryItOut("/*for..in*/for(const __parent__ in ((({}).__lookupGetter__)((function () { return <x><y/></x> } ).call(__noSuchMethod__, [[]])))){continue ; }");
tryItOut("this.zzz.zzz;");
tryItOut("{/*for..in*/L:for(const [__parent__, __iterator__] = 1e-81 in ({a1:1})) {return; }yield; }");
tryItOut("/*for..in*/M:for([prototype, constructor] = ({ constructor: __parent__ }) = ({ prop: ({ prototype: ({ __proto__: __count__ }) }), __count__: prop }) in this\t.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) L:if(((__count__)( \"\" ))) {const constructor = undefined; } else  if (1e+81.unwatch(\"__parent__\") != false) {gc() } else L:while((false) && 0){}");
tryItOut("let(function::x::__count__ = [z1,,], __count__) { throw \f<x><y/></x>;");
tryItOut("while((({__count__: (1.3.@*)})) && 0)5.0000000000000000000000");
tryItOut("throw *::*\nyield <><x><y/></x></>;");
tryItOut("try { return __parent__+=Number(__parent__.window); } catch(__iterator__) { with({}) let([, prototype, , , ] = [null]) { throw StopIteration; } finally { return; } ");
tryItOut("/*for..in*/for(var [__parent__, prototype] = [11,12,13,14].map < ++<x><y/></x> in function(id) { return id }.eval(4.)) {with(window)const __proto__, __proto__; }");
tryItOut("do /*for..in*/for(const __count__ in ((eval)(.2))){gc() } while((-- /x/g  < <><x><y/></x></>.__count__ = (p={}, (p.z = constructor)())) && 0);");
tryItOut("do {{}yield; } while(((<x><y/></x>.watch(\"prop\", (new Function(\"gc()\")))) === (prop = __proto__)) && 0);");
tryItOut("if(undefined) M:while(((*::*)) && 0){{}throw #1#; } else {continue L; }");
tryItOut("prototype");
tryItOut("/*infloop*/for(var [__proto__, , , __count__] = <><x><y/\t></x></> instanceof .2; ({prototype setter: #3={a:#3#} }); window >>  /x/g ) yield  '' ;");
tryItOut("with(false)return <x><y/></x>; const __count__;");
tryItOut("if((__noSuchMethod__ = [[1]])) ( /x/ );");
tryItOut("/*for..in*/for(var constructor in (-0)) gc()");
tryItOut("if(window) { if (__count__) {throw this; }} else { }");
tryItOut("L:if(__noSuchMethod__ ? <><x><y/></x></> : N) yield <></>; else  if (((1 for (x in []))(<x/>, <x><y/></x>))) (3); else {export __proto__;(*::*); }");
tryItOut("if((prop = (<{prototype}><bbb xmlns=\"-3/0\"><ccc:ddd><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></ccc:ddd></bbb><!--yy--></{prototype}>.()))) {let (__proto__ =  \"\" ) { export __iterator__; }/*for..in*/for(let constructor in ) {export *;gc() } } else {((__count__ = null).prop) getter: @foo &= ({}).watch(\"__parent__\", ({}).hasOwnProperty) }");
tryItOut("/*infloop*/for(const prop = <y><z/></y> *= [,,].isPrototypeOf(this.__defineGetter__(\"__count__\", <><x><y/></x></>)); prototype; (1e+81)(<><x><y/></x></>,  /x/g )) {break L; }");
tryItOut("{yield;if({}) {continue L;return *::*; } else  if (prototype) yield; }");
tryItOut("/*infloop*/for(const constructor; @foo; <><x><y/></x></>) {{} }");
tryItOut("/*for..in*/M:for(prototype in (([1,2,3,4].slice)(( /x/g )[__parent__]))){}");
tryItOut("if((\nwindow.__noSuchMethod__)) { if (prototype =  /x/ ) {switch( '' ) { default: break;  } } else L:do /*infloop*/while(* += __iterator__){} while(((uneval(false))) && 0);}");
tryItOut("if(this.zzz.zzz.valueOf(\"number\")) {if((Math.sin)((arguments if (__parent__)), false)) ( '' ); else  if ( ''  , x::constructor) return <x><y/></x>; }");
tryItOut("/*infloop*/do yield; while(__noSuchMethod__);");
tryItOut("/*infloop*/for(Function(@foo); * for each (__iterator__ in [,,z1]); constructor) {(1e4); }");
tryItOut("{}var __parent__ =  '' , __parent__\n(false);");
tryItOut("M:with({__parent__: (-3/0.@foo for (__parent__ in case ({}): break; default: break; const prototype;case 7: yield this;case 3: var prototype, __noSuchMethod__;case false: {}break; ))})/*for..in*/for(const [__proto__, __parent__] = * in *) yield <y><z/></y>;");
tryItOut("let (__parent__ =  /x/g ) { let __proto__; }");
tryItOut("switch(new #1=[#1#]()) { default: break;  }");
tryItOut("if( /x/g ) \tyield __iterator__; else  if (<xxx {constructor}={<><x><y/></x></>} />) ");
tryItOut("{throw __count__;/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in  \"\" ) return; }");
tryItOut("if(('fafafa'.replace(/a/g, ({}).hasOwnProperty))) {const __iterator__ = <x><y/></x>; } else  if (false && 0.1) /*infloop*/do throw <x/>; while(.2); else gc()");
tryItOut("{return;throw 0/0; }");
tryItOut("L:if((__iterator__)) {switch(*) { case ((uneval((this)))): break; case 7: return false; }let __parent__; } else {let prototype = <><x><y/></x></>;/*for..in*/M:for(__proto__ = (true.__lookupSetter__(\"__iterator__\")) in <x><y/></x>) throw 1e+81; }");
tryItOut("if(@foo) ([z1,,] >>> <><x><y/></x></>); else  if (new (function (__iterator__, prop) { let x::prop = function(id) { return id }, __iterator__; } )(* / false)) { } else {--> }");
tryItOut("/*for..in*/for(let __iterator__ = <><x><y/></x></> in  '' ) {let __iterator__ = true, __noSuchMethod__ = .2;yield <x><y/></x>; }");
tryItOut("if((<y><z/></y>.hasOwnProperty(\"prototype\").__defineSetter__(\"__proto__\",  { with({constructor: <x><y/></x>}){return <x/>;yield; } } ))) {throw  /x/ if(<x><y/></x> ? [1]\t : __parent__) {(false);return; } } else (<><x><y/></x></>);");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  '' ) {let (__count__, __iterator__) { return; } }prototype, __iterator__\n");
tryItOut("/*infloop*/for(<x/>; constructor; <><x><y/></x></>) {throw undefined;Function }");
tryItOut("/*infloop*/for(({ __proto__: [__parent__, , ({ __count__: ({ function::__noSuchMethod__: ({ prototype: __iterator__, __proto__: __iterator__ }), __parent__: ({ __iterator__: __count__, __proto__: __iterator__ }) }) }), __parent__] }) = const __count__ = <x><y/></x>, constructor; [((*)(<y><z/></y>) = \n<x/>)].map(Function); <employee id=\"1\"><name>Joe</name><age>20</age></employee>) L:if(window) { if (return) {prototype, __count__; } else (*)\n}");
tryItOut("let (__noSuchMethod__) { ; }");
tryItOut("if(new ([11,12,13,14].some), <><x><y/></x></>) {constructor;/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in undefined) {} } else {let __count__, __count__; }");
tryItOut("/*infloop*/for(const constructor; (eval(\"__parent__ = <x/>\", new 1.3(undefined, <x><y/></x>))); 033.watch(\"__parent__\", ({}).__lookupGetter__).__parent__) {yield <><x><y/></x></>;yield <x><y/></x>; }");
tryItOut("/*infloop*/for(const ({ prop: ({ __iterator__: __proto__, __noSuchMethod__: try { ; } finally { return; }  }), prototype: __proto__ }) = this.__defineGetter__(\"__parent__\", function (__noSuchMethod__, __count__) { yield <><x><y/></x></> } ) ? __count__%=<><x><y/></x></> : this if ( /x/ ); ({prototype: function(id) { return id }.throw(<y><z/></y>)\t}); *[__proto__.__proto__ setter= [1,2,3,4].map]) return;");
tryItOut("/*infloop*/for(var constructor; new Object(); *.valueOf(\"number\")) yield;");
tryItOut("/*for..in*/for(const __parent__ = <x><y/></x> in *) {break L;{} }");
tryItOut("/*infloop*/L:for(; __iterator__ = (delete null[<y><z/></y>]).prototype %= window.propertyIsEnumerable(\"__proto__\"); ([11,12,13,14].filter).eval((__noSuchMethod__ = <><x><y/></x></>))) /*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in *) yield <x/>;");
tryItOut("gc()<x><y/></x>\n");
tryItOut("/*infloop*/L:for(var __iterator__ = ; undefined; false) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__ in (__noSuchMethod__ = *::*) & prop.( /x/g ).@*) {return;export __noSuchMethod__ }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("{{try { gc() } finally { function ([y]) { }; } yield; }prototype, __parent__; }");
tryItOut("\nL: return undefined;\n");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("(((((@foo)[<x/>]))[({ __noSuchMethod__: prototype })]).constructor) = __parent__;");
tryItOut("while(([15,16,17,18].filter(function(q) { return q; }, <x/>).@foo) && 0){var __iterator__ = @foo; }");
tryItOut("do {export *;__noSuchMethod__; } while(((((true ? * : <x><y/></x>)).watch).call(\f, ( /x/g  > ({a1:1})).propertyIsEnumerable(\"__noSuchMethod__\"))) && 0);");
tryItOut("/*infloop*/while(<><x><y/></x></> /= this){gc() }");
tryItOut("L:if( /x/ ) function  function::__noSuchMethod__ (prop) { return .2 }  else  if (<><x><y/></x></>) {yield;yield; }");
tryItOut("yield __iterator__;");
tryItOut("/*for..in*/for(__noSuchMethod__ = <><x><y\t/></x></> in []) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.__parent__ in <y><z/></y>) {function(y) { yield y; let __noSuchMethod__, __iterator__;; yield y; } }");
tryItOut("/*infloop*/L:do var __parent__ = window; while([<x/>].sort(({}).hasOwnProperty) > [11,12,13,14].filter);");
tryItOut("/*for..in*/L:for((prop) in (p={}, (p.z = getter |= @foo)())) {}");
tryItOut("/*for..in*/for(let __iterator__ in ((/a/gi)(((p={}, (p.z = <><x><y/></x></>)())))))yield;");
tryItOut("{__proto__ }");
tryItOut("yield;");
tryItOut("export __iterator__; const constructor;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(var [__count__, __noSuchMethod__] = #1#.__defineSetter__(\"constructor\", function (__parent__) { let __count__ = 0x99; } ) in this) {/*for..in*/M:for(const __noSuchMethod__ = null in x::constructor) {gc()return window; }return (/a/gi()); }");
tryItOut("/*infloop*/for(const __count__; ({__noSuchMethod__: @foo}).__defineSetter__(\"__proto__\", prototype);  /x/g .__iterator__ = __proto__ >>> this) {throw null;{} }");
tryItOut("/*for..in*/for(__parent__ = (Iterator(([[]].unwatch(\"prototype\")))).__lookupSetter__(\"__proto__\") in 5.0000000000000000000000) gc()");
tryItOut("switch( '' ) { case ((yield this) / <><x><y/></x></> > <y><z/></y>): case new Array(true, *::*): <x><y/></x>case (Exception()): break;  }");
tryItOut("M:with({__proto__: <xxx>{__iterator__}</xxx>}){0/0; }");
tryItOut("/*infloop*/while(delete @foo)throw <><x><y/></x></>;");
tryItOut("/*infloop*/\rdo /*for..in*/for(let __parent__ = this.zzz.zzz in <y><z/></y>) {let __noSuchMethod__;; } while((\n(new Number(<x/>, *))));");
tryItOut("M:with((__noSuchMethod__.(function(id) { return id })))export *;");
tryItOut("break ");
tryItOut("throw (-0);");
tryItOut(";{}");
tryItOut("/*for..in*/M:for(var [__count__, __iterator__] = __noSuchMethod__.__iterator__ setter= __noSuchMethod__ in __parent__) export __noSuchMethod__;");
tryItOut("(window); const __noSuchMethod__;");
tryItOut("do {(<x><y/></x>);constructor = <x/>, __proto__; } while((<y><z/></y>) && 0);");
tryItOut("{yield *::*; }");
tryItOut("/*infloop*/for(__proto__; *::*; this) gc()");
tryItOut("/*for..in*/\f__count__ = ({__parent__: window });");
tryItOut("yield <x/>; const __parent__;");
tryItOut("M:if((new (function  __noSuchMethod__ (__noSuchMethod__) { yield <x/> } )([z1]).__proto__)) { if ((((this.zzz.zzz))[((\"prototype\")/*)])) {(((__parent__) - __noSuchMethod__.\n(<x><y/></x>))); }} else export __parent__\nL: \f{return;{} }");
tryItOut("/*infloop*/M:for(const __parent__; (this.zzz.zzz); [1]++) yield *::*;");
tryItOut("/*infloop*/do {let __parent__, prop; } while((uneval((Object(window, __parent__)))));");
tryItOut("if(@foo) { if ([]) {break ;\rreturn <><x><y/></x></>; } else (<x><y/></x>);}");
tryItOut("try { return constructor >>= <><x><y/></x></>; } catch(__iterator__ if ) {  } catch(__proto__) { with({}) this } ");
tryItOut("/*for..in*/L:for(__iterator__ in ((Math.pow)(null.hasOwnProperty(\"prototype\")))), <><x><y/></x></>");
tryItOut("M:if(({ prop: __proto__ }) = yield  \"\" ) export prop; else  if (([<x><y/></x>])) {return; } else L: yield;");
tryItOut("{<x><y/></x>; }");
tryItOut("if(this)  else  if (prototype) gc() else prototype;");
tryItOut("if(prop)  /x/g ;\nreturn 5.0000000000000000000000;\n else {{<x><y/></x>; } }");
tryItOut("/*infloop*/M:while((<x/> for each (prop in true)\t for each (__noSuchMethod__ in undefined) for (constructor in *)))/*infloop*/for(let __count__; (eval(\"gc()\", this\t if ([z1]))); prop.__proto__ = (new Function)()) {/*for..in*/for(prop = this in ((({}))(<y><z/></y>))){\tvar __proto__ =  '' ;export constructor; } }");
tryItOut("this.zzz.zzz;");
tryItOut("M:with({__proto__: ((<x><y/></x>))})/*for..in*/for(let [constructor, prop] = [__parent__, constructor, , , prototype] = @foo == <><x><y/></x></> in this.zzz.zzz) { const __noSuchMethod__; }");
tryItOut("if( \"\"  >> constructor = <><x><y/></x></>) {{}var __count__ = <x/>, __parent__; } else __parent__;\nswitch(<><x><y/></x></>) { case null: break;  }\n");
tryItOut("if(0.1) { if (this) {yield;export prototype; } else ([z1]);}");
tryItOut("return (__parent__.prototype getter= [1,2,3,4].map .@ (this)());");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(let [__count__, __noSuchMethod__] = __count__ = window /= ({a1:1}) in ([(function(y) { yield y; /*infloop*/ '' .eval(<x><y/></x>),  \"\" ; yield y; }).call(({__noSuchMethod__: ({})}), new Function() ? __iterator__.__lookupGetter__(\"__noSuchMethod__\") : \n \"\" , this.__defineGetter__(\"prototype\", function () { export __noSuchMethod__; } ))].filter(yield prototypefunction (__proto__, __parent__) { return (<xxx>{constructor}</xxx>) } ))) 1e-81; const __parent__;");
tryItOut("0/0; const __noSuchMethod__;");
tryItOut("/*infloop*/do {prototype = (-0); } while(window);\nL:with(__count__.__proto__){<x><y/></x>; }\n");
tryItOut("M:with(4.)return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in undefined) {let constructor = <x><y/></x>, __proto__;yield  /x/g ; }");
tryItOut("/*for..in*/for(new (3/0)([1,,], <x><y/></x>)['__proto__'] in [()]) {yyy }");
tryItOut("if((RegExp())) { if (<>yyy</>) {M:if( '' ) const prototype; else  if ([z1,,]) {;return; }return } else /*for..in*/for(let [__count__, __parent__]\f = this.zzz.zzz in ([[1]]++)) gc()}");
tryItOut("for(let y in []);\ngc()\n");
tryItOut("{;throw [z1]; }");
tryItOut("/*for..in*/for(__parent__ = this.__defineSetter__(\"prop\", [1,2,3,4].slice) in (-1)) __noSuchMethod__;");
tryItOut("let \t(__parent__) { return <x><y\t/></x>; }\n");
tryItOut("try { __count__ = __count__; } catch(__count__ if (function(){for(let y in []);})()) { try { return; } catch(__noSuchMethod__ if  \"\" ) { let prop = prototype; } catch(__noSuchMethod__) { ({}).__lookupGetter__ }  } catch(prop if (0/0 += constructor).__lookupGetter__(\"__iterator__\")) { let(constructor = <x><y/></x>.__lookupGetter__(\"prototype\")) { prop = prototype; } catch(__noSuchMethod__ if /a/gi(3.141592653589793.*, 1e4)) { for(let y in [5,6,7,8]) for(let y in []); } finally { throw prop; } ");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("const constructor =  \"\" , __proto__;");
tryItOut("let (__count__) { return; }");
tryItOut("/*infloop*/do yield __noSuchMethod__; while(this.__defineGetter__(\"prop\", (__proto__).__defineSetter__));");
tryItOut("while((<></>) && 0)/*infloop*/M:for(__noSuchMethod__; <><x><y/></x></> |= <><x><y/></x></>; *::*) var prop = undefined, prototype;");
tryItOut("switch(window) {  get  }");
tryItOut(";");
tryItOut("function ()1e+81\n");
tryItOut("L\t: {gc()/*infloop*/\tfor(undefined.@* && <x/>; prototype; this.__defineSetter__(\"prop\", window)) {let (__proto__, __iterator__) { <x/>; } } }");
tryItOut("/*infloop*/for(let __iterator__; [1,2,3,4].slice; yield String(window)) __noSuchMethod__ = ((p={}, (p.z =  '' .yoyo(<x><y/></x>))()))");
tryItOut("this.zzz.zzz;");
tryItOut("if(false.@foo.eval((<bbb xmlns=\"window\"><x><y/></x> </bbb>.(eval(\"let prototype, prototype =  \\\"\\\" ;\",  /x/ )))).throw((this.yoyo(++delete this)))) L:with({__noSuchMethod__: -(<x><y/></x> -  /x/ )}){if(<><x><y/></x></>) { } else  if (<!--yy-->) return; else gc } else /*for..in*/for([__iterator__, __count__] = false in  \"\" ) var constructor = prototype;");
tryItOut("if((__count__.__parent__)) { if (false.prop = this) {export *;throw <><x><y/></x></>; }} else export __proto__;");
tryItOut("/*infloop*/for(const ({ ({ __iterator__: [], __noSuchMethod__: ({ __iterator__: prototype, __count__: __count__ }) }): [] }) = (new Function(\";\"))(<xxx {__noSuchMethod__}={(({}).__lookupGetter__)} />); this.__defineGetter__(\"__iterator__\", Function); eval(\"return;\", @foo - __proto__)) if(0.1) throw <x/>; else {gc() }");
tryItOut("Math.sin");
tryItOut("throw <><x><y/></x></>;");
tryItOut("with(<><x><y/></x></>)return;");
tryItOut("if(([this].sort(function(q) { return q; }))()) { if ((__iterator__ = prototype.__lookupSetter__(\"__noSuchMethod__\"))) {(__noSuchMethod__); }} else M:with(1e81)<y><z/></y>;");
tryItOut("{}");
tryItOut("const __count__ = <x><y/></x>, constructor;");
tryItOut("M:switch([11,12,13,14].some) { default: break; case <y><z/></y>.__iterator__ = #3={a:#3#}: function () { yield <x><y/></x> } break; case 0: case 9: /*infloop*/do {export *; } while(4.);break; break ; const constructor;return\nbreak; case 1: /*infloop*/for(typeof <><x><y\f/></x></>; this; window.__count__ = <y><z/></y> !== __parent__+=-3/0) return;case 7: <><x><y/></x></>;break; break;  }");
tryItOut("L: {yield false; }");
tryItOut("if([eval(\"export *;\", <y><z/></y>).__defineGetter__(\"__proto__\", function  prototype (prototype, __iterator__)@foo)].map((1 for (x in [])))) {|yield ({a2:z2}); } else  if ([([[1]]).call(window, <y><z/></y>, __iterator__)]) yield <y><z/></y>; else yield;");
tryItOut("return;");
tryItOut("if(({__proto__: <x/>})) { if (<></>) while(( '' ) && 0){return;export *; } else {export undefined; }}");
tryItOut("/*for..in*/L:for(const constructor = true in this.__defineGetter__(//h\n\"__noSuchMethod__\", (new function(q) { return q; }(*::*)))) /*infloop*/for((Array((null.propertyIsEnumerable(\"__noSuchMethod__\")))); ((function () { yield prototype } )((let (__count__ = *, prototype) [[1]]), __parent__)); constructor = false >= (this.hasOwnProperty(\"__parent__\"))) {/*infloop*/while([<><x><y/></x></> if (({a2:z2}))])export prototype; }");
tryItOut("if([* for each (__count__ in 4.)]) if((<y><z/></y>).call(<x><y/></x>, 033)) { if (<xxx {constructor}={[,,z1]} />) gc()} else  else with({constructor: ({ prop: constructor }) = ({ delete: __iterator__ })}){return;gc() }");
tryItOut("prop = <x/>\f;");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("yield new String(__parent__);");
tryItOut("L:do {;yield -1; } while(((prototype = <><x><y/></x></>).__defineGetter__(\"__proto__\", function () { yield <><x><y/></x></> /= false } )) && 0);");
tryItOut("/*infloop*/do {var prototype, __noSuchMethod__; } while( { return  /x/  } );");
tryItOut("\r{}return;");
tryItOut("try { with({}) let(prop, __iterator__ =  /x/g ) {  } finally { with({}) let(prop) ((function(){})()); } /*infloop*/M:while(@foo.__proto__ = #1#){{} const __iterator__;constructor; }");
tryItOut("throw StopIteration;");
tryItOut("return ( /x/  < null if (<><x><y/></x></> || true));");
tryItOut("\n\f");
tryItOut("M:if((let (__count__, try { /*for..in*//* nogeckoex bug 349964 */L: for  each(const window['prototype'] in constructor.yoyo(<x><y/></x>)) {/*infloop*/do {3.141592653589793; } while(<><x><y/></x></>);__noSuchMethod__; } } finally {  } ) ((#2=[<><x><y/></x></>]) for ((<><x><y/></x></>.yoyo(this)).constructor in [[]] != <x><y/></x>) for (constructor in *) for each (function::constructor in <x><y/></x>) for (__proto__ in @foo)).propertyIsEnumerable(\"function::constructor\"))) { if (().@*) {var __iterator__ = this, prototype; } else if(\f(((1 for (x in []))).\fcall(window, @foo))) {(new Function(\"__parent__\"))( /x/g ); }}");
tryItOut("/*infloop*/for(let [({ __parent__: __count__, prototype: __proto__ }), ] = (false.prototype = this); undefined; true.__lookupGetter__(\"__iterator__\")) {this.zzz.zzz; }");
tryItOut("return window\n");
tryItOut("__iterator__ = __iterator__;");
tryItOut(" const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var let in .2.__iterator__ =  /x/g ) [1,2,3,4].map");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in __count__) {;((<>\t<x><y/></x></>).watch).apply }\n");
tryItOut("if(*.prototype) {/*infloop*/do return -1; while(*::*); } else  if ([11,12,13,14].sort) {}");
tryItOut("var prop, __proto__;\n { yield (p={}, (p.z = eval())()) } \n");
tryItOut("if((get.__lookupGetter__(\"prototype\"))) if(this) { if (<x/>) export *; else (.2).__defineSetter__}");
tryItOut("\twith({delete: 1e81}){throw *; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("var constructor;");
tryItOut("M:switch(<y><z/></y>) { case [*.throw( /x/ )].filter(Math.pow): default: throw this; }");
tryItOut("M:if((__noSuchMethod__ = (constructor.each))) {__parent__ = <x><y/></x>;with(0x99)return [z1]; } else  if ((<x><y/></x>.(({/*\n*/__count__ getter: Math.pow })))) {(<y><z/></y>);break M\n }");
tryItOut("/*infloop*/do {/*for..in*/for(constructor = (<x/> in (new ((*::*).__defineSetter__)())) in <y><z/></y>) {M:if(<x><y/></x>) {nullreturn; } else  if (1.3) gc() } } while(<><x><y/></x></> .@*:: <x><y/></x>);");
tryItOut("{var \t__iterator__;({}).__lookupGetter__ }");
tryItOut("if(__iterator__) {let (__iterator__ =  \"\" , prototype = ;) {  } } else {L: {__parent__ = <x><y/></x>, constructor = <><x><y/></x></>;[1,2,3,4].map }/*for..in*/for(#1# | constructor = null.@* in  /x/ ) yield __noSuchMethod__; }");
tryItOut("/*for..in*/L:for([__iterator__, __parent__] = (true)[case 4: yield __iterator__;] instanceof [({a2:z2})].sort((<x><y/></x>).__defineSetter__) in *) {{}(<y><z/></y>).__defineSetter__ }");
