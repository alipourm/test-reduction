
tryItOut("with({}) { var __count__ = <><x><y/></x></>; } ");
tryItOut("with({__parent__: (yield @foo.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty))})export __noSuchMethod__");
tryItOut("/*infloop*/constructor = ([constructor, prototype, prop, __count__, ] = arguments :: __noSuchMethod__)\t.throw([z1,,]), prop = ((p={}, (p.z = (-1))()))\n/*for..in*/M:for([<><x><y/></x></>, prototype] = this.__defineSetter__(\"__iterator__\", (undefined.unwatch(\"prop\")).watch) in yield @foo) {}\n");
tryItOut("/*infloop*/M:for(let constructor; ++window; null) {this }");
tryItOut("__count__");
tryItOut("/*for..in*/for(let __iterator__ = function(q) { return q; } in __parent__) if(__parent__.__noSuchMethod__ ? 1.2e3 : __parent__.(this)) export *; else  if (<{__noSuchMethod__}> </{__noSuchMethod__}>) {}");
tryItOut("L: {yield; }");
tryItOut("with({prototype: (Exception(<x><y/></x> -  /x/g , arguments) >>= (({ get prop __proto__ (prop) { yield __noSuchMethod__ }  })))--})");
tryItOut("with({}) { with({}) { <ccc:ddd>yyy</ccc:ddd> }  } ");
tryItOut("M:if((p={}, (p.z = \nnull)())) { if (eval(\"const __iterator__ =  '' ;\", __count__ = [({a1:1})].sort([1,2,3,4].slice))) {{(@foo); }let constructor = *, __count__; }} else {/*for..in*/for(let __iterator__ = __proto__ in #1#) {gc()return <y><z/></y>; } }");
tryItOut("{ }");
tryItOut("return  /x/g ; const __noSuchMethod__;");
tryItOut("if(new (Math.pow)(<y><z/></y>.eval(false), constructor.prototype getter= function (__iterator__, prototype) { yield <y><z/></y> } ) %= (<><x><y/></x></>(({a1:1}), undefined))) export *; else {{if(*::*) {} else  if (this) {const constructor = <x/>; }export *\n } }");
tryItOut("/*infloop*///h\ndo {yield; } while(<><><!--yy--></></>);");
tryItOut("with(<x><y/></x>.__lookupGetter__(\"continue ;\")){return;export __proto__; }");
tryItOut("{yield; }");
tryItOut("const __count__");
tryItOut("if(yield <x/> *= (-0)) {if(function (window, prop)*( /x/ )) {{} } else  if ([__count__ <<= <x/>].sort(Function))  else gc()if(__count__.isPrototypeOf(<y><z/></y>).propertyIsEnumerable(\"__proto__\")) yield; } else  if (Object((!<x/>)).__proto__) {/*for..in*/for(const [__proto__, __noSuchMethod__] = (eval(\"export *;\", false)) in (eval(\"yield prop;\", __noSuchMethod__))) {; } }");
tryItOut("do {__proto__ } while((__iterator__.prototype) && 0);");
tryItOut("do const prototype = [], __proto__ = window; while((yield prototype.let setter= [1,2,3,4].slice) && 0);");
tryItOut("L: while((prop.prototype) && 0)let __iterator__, prop = [,,z1];");
tryItOut("yield (__count__-=<x><y/></x>.throw((const __iterator__ =  /x/g ))).hasOwnProperty(\"yield\");");
tryItOut("if((yield this)) { if (<bbb xmlns:ccc=\"<y><z/></y>.eval(*)\"><ccc:eee></ccc:eee></bbb>) var prop = 1e4;} else {;export *; }");
tryItOut("while((<><x><y/></x></>(<x><y/></x>, @foo).hasOwnProperty(\"__iterator__\").constructor = <xxx {__parent__}={<x><y/></x>} />) && 0) '' ");
tryItOut("let(prop) ((function(){throw StopIteration;})());");
tryItOut("return\n");
tryItOut("M\t:with({__parent__: ((__noSuchMethod__) = ({ set constructor __proto__ ()#1# }))}){/*for..in*/for(var prototype in false) {let <y><z/></y>;gc() } }");
tryItOut("/*for..in*/L:for(let __parent__ in ((undefined)([11,12,13,14].map)))(true).__defineSetter__{}");
tryItOut("L: [[1]]\n \"\" ;");
tryItOut("L: {yield;continue ; }");
tryItOut("return;");
tryItOut("let ([({ __count__: [prop, __parent__, __count__, constructor], __iterator__: constructor })] = false + <x><y/></x>) { \t/*for..in*/for(constructor in  \"\" ) yield; } const __noSuchMethod__;");
tryItOut("with(<x><y/></x>){}");
tryItOut("let (__proto__ = ({ __proto__: ({ __count__: ({ __parent__: prop, __noSuchMethod__: [, __proto__, , , __parent__] }) }) }) = default: /*infloop*/for(\t__proto__; *::*; __proto__) gc()break; case 7: case 8: break; case 8:  \"\" ;case 1: break; case (<><x><y/></x></> *= <x/>): break; case 3: break; yield;) { /*infloop*/while(<><zzz>prototype = @foo</zzz></>){export *;with(({prototype setter: /a/gi, __count__: false }))prop = __parent__, __proto__; } }");
tryItOut("/*for..in*/for(var  /x/g ['__proto__'] in ((__noSuchMethod__.propertyIsEnumerable(\"__noSuchMethod__\"))(let (__noSuchMethod__ = undefined, prototype) { gc() }))){export __parent__;yield prototype; }");
tryItOut("let(__iterator__) { this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in [z1,,]) export *;");
tryItOut("L: {{; }{} }");
tryItOut("if(*) {;break M; } else  if (this) {continue ; }");
tryItOut("with(yield __count__ = prop){M:if((yield window).__lookupSetter__(\"__proto__\")) *; }");
tryItOut("{yield; }");
tryItOut("do {yield @foo;throw <><x><y/></x></>; } while((((function  __proto__ (__count__) { switch(<y><z/></y>) { /*case 8: ( \"\" );break;  } } )(prototype !==  '' , __noSuchMethod__ = <><x><y/></x></>))) && 0);");
tryItOut("/*for..in*/for(const __proto__ = (<x><y/></x> - *::*) in false) ([z1]);");
tryItOut("throw *\n");
tryItOut("/*for..in*/for(var __count__ in ((Math.sin)( /x/ .propertyIsEnumerable(\"__noSuchMethod__\")))){export *;return *; }");
tryItOut("do ; while((__iterator__.constructor getter= [1,2,3,4].slice) && 0);");
tryItOut("prototype = __proto__;");
tryItOut("\ngc()");
tryItOut("/*for..in*/for([prop, __proto__] = prop = __noSuchMethod__ in 033) {gc() }");
tryItOut("{M:with({__parent__: *::*}){; }(new Function(\"yield;\")) }");
tryItOut("with({}) { return; } ");
tryItOut("return;");
tryItOut("return prop;");
tryItOut("/*infloop*/for(const ({ undefined && new (function  __noSuchMethod__ () { return; } )(<><x><y/></x></>, <x/>).__noSuchMethod__: ({ prop: ({ __count__: ({ __count__: constructor, __proto__: __iterator__ }) }) }), __count__: x::prototype }) = (yield RegExp((__count__.__proto__ = -0) .@x:: (<x/> - #1=[#1#])))\f; false.valueOf(\"number\"); let (__iterator__) <><x><y/></x></> || (~new (<x/> >> *::*)((__iterator__ = <x><y/></x>), 033))) {L:if((((new Function(\"export __count__;\"))).apply)) {gc()return; } else  if (__iterator__ = true) {yield;1e81; } }");
tryItOut("/*infloop*/L:for(window - [1]; (constructor);  /x/ ) {return;gc() }");
tryItOut("{{} }");
tryItOut("this.zzz.zzz.propertyIsEnumerable(\"__count__\")\n");
tryItOut("L:do {{export __noSuchMethod__; } } while(('fafafa'.replace(/a/g, (window)(constructor))) && 0);");
tryItOut("gc()");
tryItOut("return (new Function)(__parent__);return;");
tryItOut("return;");
tryItOut("while(((__parent__.constructor)) && 0)throw this.__defineGetter__(\"__count__\", eval);");
tryItOut("{case 8: break;  }");
tryItOut("if((1e4 & __count__.__parent__)) /*infloop*/L:\ffor(([new (*)(window)]); new (false)(); ( \"\" .hasOwnProperty(\"__proto__\"))) {let __parent__; } else  if ((({ __iterator__: [constructor, prototype, ] }) = constructor.__proto__)) {gc() } else gc() const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <><x><y/></x></>) {break ; }");
tryItOut("{with({__count__: prototype}){throw  /x/ ; } }");
tryItOut("let(__count__, constructor.prototype = #1#.unwatch(\"*::*\")) { try { for(let y in [5,6,7,8]) yield *::*; } catch(prototype if  /* Comment */window .. this) { /*infloop*/M:for([,,z1]; *; prototype) ; } catch(prototype if export *) { /*for..in*/for(__parent__ = <><x><y/></x></> in <x><y/></x>) continue L; } finally { return yield  /x/g ; } ");
tryItOut("/*for..in*/for([function::prop, __noSuchMethod__] = (-[,,z1]) in __noSuchMethod__) {return window; }");
tryItOut("throw StopIteration;");
tryItOut("let (__count__ = -0) { const constructor = <><x><y/></x></>, prototype =  /x/g ; }");
tryItOut("/*for..in*/L:for(var __iterator__.prototype in eval(\"yield .2;\", ())) if(getter) {export *;let constructor; } else  if ( '' ) return @foo; else {yield;return; }");
tryItOut("with((__noSuchMethod__ = [])())if(Iterator()) { if ((__count__ = <x><y/></x>)) {var prop;let __noSuchMethod__ = 1e81, __iterator__; } else {var __iterator__;yield; }}");
tryItOut("(new Function(\"yield *;\")){}");
tryItOut("with({({ \fprototype: ({ __parent__: [, , [constructor, ({ __noSuchMethod__: __iterator__, __noSuchMethod__: \n({ constructor: [], prop: [] }) }), ({ __iterator__: ({ __proto__: __iterator__, prop: [({ __noSuchMethod__: prop, prototype: __proto__ }), ({ constructor: constructor, __count__: let }), , ({ prop: prototype, __iterator__: __parent__ })] }) }), [({ __proto__: __count__.prototype, constructor: ({ prototype: [, , ], __iterator__: ({ __iterator__: constructor }) }) }), , __noSuchMethod__, \n], \t], ({ __parent__: prototype })] }) }): eval(\"L: return this\\n\", (__count__ = [[1]] + this.__defineSetter__(\"prop\", <x/>)))})if((1e81)[@foo] >>>=function(q) { return q; }(eval(\"<x><y/></x>\", .2))) { if (__iterator__ =  /x/g ) {{}\n } else {(<y><z/></y>);{} }}");
tryItOut("if((*::* .@  '' )) { if ((new Array())) {var __parent__ = null;(1e+81); }} else __parent__ getter: (window).__defineSetter__\n(*);\n");
tryItOut("with({}) try { let( { return null } ) { gc() } finally { yield <><x><y></x></>|=undefined; } ");
tryItOut("/*infloop*/do export __iterator__; while(({__proto__: \t<x/>,  get __count__ <x><y/></x> ()__count__ }) == let (prop) prop);");
tryItOut("const __noSuchMethod__ = window, __parent__ = undefined;export __noSuchMethod__;");
tryItOut(";");
tryItOut("while((*) && 0){const __iterator__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(let __proto__; window.eval(*); -0) {yield <x/>; } const __count__;");
tryItOut("if(((this.__defineSetter__(\"__iterator__\", this)))) return; else  if (this.__defineGetter__(\"__count__\", function  __proto__ (constructor) { return <><x><y/></x></> } )) {export __iterator__;yield *::*; }");
tryItOut("if((Math.sin).call(3, )) {export *; } else  if (<><x><y/></x></> >>= [1,,]) {break ;window; }");
tryItOut("if( /x/g ) { if (0/0) {yield; }} else (<x/>)\n");
tryItOut("L: {with({__count__: prop});prototype; }");
tryItOut("\n");
tryItOut("/*for..in*/for(__proto__ in (('haha'.split)([,,z1])))yield <y><z/></y>;");
tryItOut("with({__noSuchMethod__: #1#})let __iterator__;");
tryItOut("prop =  /x/ ;");
tryItOut("{do {this;gc() } while((window) && 0); }");
tryItOut("/*for..in*/M:for(const constructor in this) let __iterator__ = window\nyield window;");
tryItOut("do {gc()return; } while((window) && 0);");
tryItOut("let (<ccc:ddd><xxx>{__noSuchMethod__}</xxx><!\f--yy--></ccc:ddd>) { function(y) { yield y; ;; yield y; } }");
tryItOut("/*infloop*/while([]){export __parent__; }");
tryItOut("/*for..in*/for(let (new Boolean( /x/g )) in prototype = <x><y/></x>) {return window; }");
tryItOut("if(prop.watch(\"prototype\", <><x><y/></x></>) |= prop) {yield;export constructor; } else  if (<xxx>{constructor}</xxx>.((new (Math.pow)(<x><y/></x>, <x>\r<y/></x>)))) {prop, __count__ = null; }\nreturn;");
tryItOut("yield;<x><y/></x>;");
tryItOut("let (constructor, []) { /*for..in*/for([prop, __parent__] = ((uneval((this.zzz.zzz)))) in window) {{break L;throw window; }yield; } }\n/*infloop*/for(const __proto__; yield true; <><x><y/></x></>.propertyIsEnumerable(\"constructor\")) yield;");
tryItOut("return;");
tryItOut("{/*for..in*/for(var [__count__, prop] =  /x/g  in 5.0000000000000000000000) return @foo; const __iterator__;gc() }");
tryItOut("yield let ([]) <x/>;");
tryItOut("switch(<x><y/></x>) { case this: break;  } const __proto__;");
tryItOut("if(new [[], , , __proto__, ] = constructor = true(<x><y/></x>.isPrototypeOf(window)) .. window) { if ((this << window) = <y><z/></y>) /*infloop*/for(__parent__; (yield (@foo >>>  /x/g  ^= ([1].hasOwnProperty(\"__noSuchMethod__\")))); #1#) {__count__ }} else {for(let y in []);yield <><x><y/></x></>; }");
tryItOut("break M;");
tryItOut("var __proto__ =  '' ");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("while((export *) && 0){return;return <y><z/></y>; }");
tryItOut("{} const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(do var constructor = 1e4; while((<x><y/></x>) && 0); in RangeError(__iterator__)) {throw *::*; }");
tryItOut("if( /x/g ) {return this;yield this; } else  if ((uneval( \"\" .hasOwnProperty(\"3.141592653589793\")))) {if(<y><z/></y>) -3/0; else {{} }yield __proto__; }");
tryItOut("/*for..in*/for(const __proto__ in (( ? (({prop: window})) << this[ '' ] : __parent__)(function ([y]) { }.watch(\"__parent__\", function  __count__ ()*::*).isPrototypeOf( \"\" .__defineSetter__(\"__parent__\", function () {  } )).__defineGetter__(\"prop\", new Function)))){gc() }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((Function).apply)(__count__))){gc()if(<y><z/></y>)  else  if (<><x><y/></x></>) (function ([y]) { })(), ( \"\" .__proto__) else {; } }");
tryItOut("/*for..in*/for(__noSuchMethod__ = (function ([y]) { })() in @foo) {true;return; }if( /x/g  * ({a1:1})()) { if ( '' ) {throw <><x><y/></x></>; } else ;}");
tryItOut("do {<x/>;(new Function).apply } while(((uneval(this))) && 0); const prototype;");
tryItOut("let prop;");
tryItOut("return;");
tryItOut("/*for..in*/for(let [prototype, __noSuchMethod__] = #2=null in true[ '' ]) {gc()const __proto__ = function(id) { return id }, constructor; }");
tryItOut("L:if((constructor.prop.__noSuchMethod__)) return; else export *;");
tryItOut("let (__noSuchMethod__ = #1=[#1#]) { __proto__; }");
tryItOut("let(__parent__, __noSuchMethod__ = eval(\"(false);\", __count__)) { for(let y in []);");
tryItOut("L:if((<x><y/></x> += <x><y/></x>)) {with((<y><z/></y>)[ '' ])var prototype = <x><y/></x>;with({__noSuchMethod__: <x><y/></x>}){yield undefined; } } else {yield  '' ;const __noSuchMethod__ = __proto__, prop = window; }");
tryItOut("/*for..in*/L:for(let [__proto__, prop] = <x><y/></x> in false) {export prop;yield <x/>; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(#2=[false] for each (__iterator__ in false) for (__parent__ in <x/>)) return -0; else __proto__if( /x/ ) {([,,z1]);yield; } else  if ((4..__lookupGetter__(\"prop\"))) break ;");
tryItOut("if(<><bbb xmlns=\"[__proto__, __iterator__, ] = this.zzz.zzz\"><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></bbb></>) continue ; else  if (<x/> >>=  '' ) yield #1=[#1#]; else break ;");
tryItOut("prop = __parent__;");
tryItOut("yield\nreturn;");
tryItOut("switch(<x/>) { case ([11,12,13,14].some): break; case prototype.([[]]): ({}).hasOwnPropertybreak;  }");
tryItOut("/*for..in*/for(var __parent__.__count__ in this) const __proto__ = window, set = <y><z/></y>;");
tryItOut("yield null;");
tryItOut("/*for..in*/for(let __proto__( \"\" ) in ((eval)((([,,].eval(*::*)))[ /* Comment */<x><y/></x>]))){ /x/g ;yield <x><y/></x>;M:while((__parent__.__iterator__) && 0){let __count__ = prop; } }");
tryItOut("while((true) && 0){(#3={a:#3#}).watchexport *; }\n");
tryItOut("if((<x><y/></x for (prop in <x><y/></x>))) { if ((this.__defineSetter__(\"prop\", function(y) { yield y; break L;; yield y; }))) let (prototype) { {} } else with((new Number()))}");
tryItOut("throw *::*;\nif( /x/ ) ((-1));\n");
tryItOut("do export *; while((.2.\n__defineGetter__(\"__parent__\", new Function) ||  /x/  in undefined) && 0);");
tryItOut("with(let (get = <y><z/></y>, __iterator__ =  \"\" ) ({__parent__: <x><y/></x>}))\f{ }");
tryItOut("export *");
tryItOut("/*for..in*/for(let [__iterator__, prototype] = <x><y/></x> in prototype) break ;");
tryItOut("throw StopIteration;");
tryItOut("switch(3.141592653589793) { default: break;  }");
tryItOut("/*infloop*/for(( /x/ \n.__noSuchMethod__); this.__defineSetter__(\"prop\", [1,2,3,4].slice); (--(~*::*.yoyo(this)))) /*infloop*/for((new 'haha'.split()); 'fafafa'.replace(/a/g, Math.pow); (\n<x><y/></x>)) <x><y/></x>;");
tryItOut("(0/0);");
tryItOut("if(let (__parent__)  '' \n) const __proto__ = <x><y/></x>; else  if ((new ( /x/ ).__defineSetter__\f(yield = 1e81, @foo))) return; else {break L; }let <><x><y/></x></>;");
tryItOut("/*infloop*/do const __parent__ =  /x/g ; while(1e81 for each (getter in *));");
tryItOut("{while(( /x/ ) && 0)(__count__); }");
tryItOut("/*for..in*/for(\nlet (__count__) in (new Function).call(window(false), <y><z/></y>)) {}");
tryItOut("/*for..in*/L:for(var default: case 2: case 8:  in [[1]]) .2");
tryItOut("let (prototype = <><x><y/></x></>, __noSuchMethod__) {  }");
tryItOut("this.zzz.zzz;");
tryItOut("const \t__proto__ = [,];");
tryItOut("break ;");
tryItOut("try { for(let y in [5,6,7,8]) (-1); } catch(prop) { throw StopIteration; } finally { yield <><x><y/></x></>; } ");
tryItOut("/*infloop*/L:for(((<x/>) ? constructor.valueOf(\"number\") : * && window); typeof (<x><y/></x> .(undefined[({})])); [ if (<x/>)]) export *;let prop;");
tryItOut("/*infloop*/while(new (window)(<x><y/></x>, case <><x><y/></x></>: break; gc()break; default: break; case __parent__, prop: case <y><z/></y>: break; case 3: )){yield <><x><y/></x></>;var prop = *::*, constructor =  /x/ ; }");
tryItOut("/*infloop*/do {export *;export *\n } while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);");
tryItOut("/*infloop*/while(1e+81)__noSuchMethod__, __proto__ = function::__parent__\n/*infloop*/for(let prototype = <y><z/></y>; function::__proto__; .2) gc()\n");
tryItOut("{{if(({})) return; else  if ( \"\" ) {export *;*::*;\t } else { }{} } }");
tryItOut("/*infloop*/while(new (false)(this, 1.2e3))let (__noSuchMethod__) { throw <><x><y/\f></x></>; }\n");
tryItOut("let(prop, __count__) { for(let y in []);");
tryItOut("/*infloop*/M:for(__count__; let (yield = <x><y/></x>) @foo; null.prototype = <x><y/></x>) {[]; }");
tryItOut("if(-0) { if ((({prototype setter: (function  prop ()<y><z/></y>).call }))) {throw <><x><y/></x></>; } else {\t }}");
tryItOut("with({__proto__: [[1]]}){function (constructor, prop) ''  }");
tryItOut("if((({function::prototype: (prototype-=*::*)}))) { if (((*::**))) {{} }} else (<><x><y/><\f/x></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <x><y/></x>.valueOf(\"number\").__lookupSetter__(\"__count__\")) {if(<x/>) {var prototype;yield; }; }");
tryItOut("do L:with({__proto__: window == __parent__})with({prop: *.unwatch(\"__proto__\")})/*infloop*/L:for(__noSuchMethod__; <x><y/></x>; window) {(null);throw __parent__; } while(([11,12,13,14].filter.prototype) && 0);");
tryItOut("for(let y in [5,6,7,8]) throw get;");
tryItOut("/*infloop*/for(var __noSuchMethod__ = <><x><y/></x></>; ({}); {}) var __iterator__;");
tryItOut("do const __noSuchMethod__ = __proto__; while(((function(q) { return q; })) && 0);");
tryItOut("while((([z1].__defineSetter__(\"__parent__\", function  constructor () { yield true } )).throw(({ get prototype()<><x><y/></x></> }))) && 0){; }");
tryItOut("export prototype\n");
tryItOut("/*infloop*/while((1e-81 in <x><y/></x>)){/*infloop*/for(let __proto__ = {}; this; %=) export *; }");
tryItOut("{return [[]]; }");
tryItOut("/*for..in*/for(var prototype = ({ __parent__: ({ __iterator__: prototype }), __parent__: ({ constructor: __proto__ }) }) = (<x><y/></x>).call(<><x><<x><y/></x> y/>/x></>, ).prop in __count__) {{const __parent__ = <><x><y/></x></>, __iterator__ = <><x><y/></x></>; } }");
tryItOut("/*infloop*/for(var prop; ({}).__lookupGetter__; this.zzz.zzz) {export __proto__;{{}__count__ =  /x/g ; } }");
tryItOut("(eval)((this)[arguments]); const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in ([11,12,13,14].sort)) return; const prop;");
tryItOut("L:switch((uneval(<x>\f<y/></x>))) { case 8:  }");
tryItOut("export *;");
tryItOut("if((eval(\"null;\", (-0)))) let __iterator__, __proto__ = *; else  if (( /x/g  ^= <x><y/></x>) > ((window for (__parent__ in  /x/ )))) __noSuchMethod__ = <><x><y/></x></>\f;");
tryItOut("__proto__ = __count__;");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)  else  if ((new eval( /x/g , :))) continue ;");
tryItOut("M:if(__proto__|=null) { if (0/0.__noSuchMethod__.__lookupSetter__(\"__count__\")) {/*infloop*/for(__noSuchMethod__ = <><x>\t<y/></x></>; <x/> % <><x><y/></x></>; constructor(__parent__)) {throw <><x><y/></x></>;null; } }} else /*for..in*/for(var function::__parent__.__iterator__ in *) return @foo;");
tryItOut("yield @foo;");
tryItOut("{if({const __count__ = @foo, prop = 0.1; }) { if ( '' ) {(constructor); }} else {(<x><y/></x>);return; } }");
tryItOut("M:if([]()[new (function ()(__proto__ = __iterator__))(prototype = __proto__, (* for (__parent__ in <y><z/></y>)))]) {{gc() }if(#1=[#1#]) constructor else  if (-3/0) export __count__; else {return <x><y/></x>; } } else  if ((__iterator__)) {prototype = __proto__; } else export prop;");
tryItOut("([[]]);");
tryItOut("L:with((window)[*])(5.0000000000000000000000);");
tryItOut("/*infloop*/L:for(var __proto__; (constructor.(@foo)\f).propertyIsEnumerable(\"constructor\").__parent__ = yield [3/0]; (( '' .eval( '' ))[({ get __count__() { var __proto__ =  '' ; }  })])(\n__parent__, <y><z/></y>)) {case new (<x><y/></x>)(true, *)\n: break; case __proto__ = <x/>: {}break; throw @foo;__count__, __noSuchMethod__ = (-1), prop; }");
tryItOut("/*infloop*/for(var ({ __proto__: __noSuchMethod__, __iterator__: __count__ }) = ; (__iterator__ = <y><z/></y>);  /x/g .yoyo(<x><y/></x>)) yield;");
tryItOut("yield <x><y/></x>\n;");
tryItOut("[1,2,3,4].map");
tryItOut("/*infloop*/do yield; while((( /x/g  if ( \"\" ))));");
tryItOut("L:if(#3={a:#3#}) {return;(@foo); } else {throw <><x><y/></x></>; }");
tryItOut("if([prop = (prop.prototype = <x><y/></x>) &= let (__proto__, __proto__) 'fafafa'.replace(/a/g, *)].map(function(y) { yield y; gc(); yield y; }) /= ((uneval(({__parent__: *::* >>>=4..__lookupGetter__(\"constructor\").unwatch(\"__parent__\")}))))) { } else  if (#2=(this)()) {return;return; }");
tryItOut("while((((yield new 'haha'.split()))) && 0)gc()");
tryItOut("/*infloop*/while((constructor = __parent__.eval(new Number(<x><y/></x> .@x:: window, window))))export *;");
tryItOut("const __proto__ = false;if(* instanceof false) {__proto__ = __parent__;return [,,z1]; } else ");
tryItOut("/*for..in*/for(let constructor in __parent__) {let (__noSuchMethod__) { yield; } }");
tryItOut("/*for..in*/for(const (<x/>)(<x><y/></x>) in ((({}).hasOwnProperty)(0.__iterator__)))with(<><x><y/></x></>){{}let prop; }\n");
tryItOut("L:if([15,16,17,18].some(window, *::*)) {for(let y in [5,6,7,8]) constructor.__count__ = __count__; }");
