tryItOut("throw <><x><y/></x></>;");
tryItOut("L: __iterator__;");
tryItOut("/*infloop*/for(let __proto__; constructor; <x><y/></x>) ({}).hasOwnProperty");
tryItOut("if(<><x><y/></x></> in  /x/  - (yield __iterator__)) {(__count__ = ) } else  if \f(prop.__proto__) {gc() } else {continue ;return; }");
tryItOut("/*for..in*/for(var <y><z/></y> = 1e4 in <><x><y/></x></>) yield;");
tryItOut("M:with({constructor: ('fafafa'.replace(/a/g, 'haha'.split))})/*for..in*/M:for(var __count__ in (#1=<x><y/></x>).prototype = [1,,]) export *;");
tryItOut("/*for..in*/M:for(var constructor in (((({ prop: __parent__, constructor: prop }) = (constructor = 1e+81)).__defineSetter__)(1.2e3++)))\f{[1,2,3,4].sliceexport *; }");
tryItOut("this.zzz.zzz\n\nyield;\n;");
tryItOut("with( '' )throw <><x><y/></x></>;\nvar prototype =  \"\" , __proto__;\n");
tryItOut("L:if(<><x><y/></x></>) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop.prop in <><x><y/></x></>) return <y><z/></y>;");
tryItOut("L:if(<xxx>{prop}</xxx>) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in __count__) export __iterator__/*for..in*/for(var __proto__ = * in [[]]) __iterator__ }");
tryItOut("/*infloop*/M:while((yield \n[,]));");
tryItOut("/*infloop*/for(constructor; <><x><y/></x></> & <x/>; ({__count__ setter: ('haha'.split).apply })) let __parent__ = __iterator__, __parent__;");
tryItOut("L: return;");
tryItOut("/*infloop*/for(<x><y/></x>; window;  '' ) \fexport *;");
tryItOut("/*infloop*/M:while(__iterator__)const __iterator__, __parent__ = undefined");
tryItOut("export *\ngc()");
tryItOut("/*infloop*/for( \"\"  /= ( /* Comment */<x/>) = this; __parent__ = ((prototype) = <y><z/></y>); (__parent__ = ++<><x><y/></x></> || (yield;) = <y><z/></y> *= *::* .@*:: __iterator__.(5.0000000000000000000000))) {throw (prop.constructor = <><x><y/></x></>);if((__noSuchMethod__ = <><x><y/></x></>).eval((this.__defineGetter__\t(\"constructor\", (<x><y/></x>).__defineSetter__)))) { if (({__parent__: prototype = this })) {(new Function(\"let __parent__ = *;\"))break ; } else (<x/>);}let __iterator__ = window, prototype =  \"\" ; }");
tryItOut("/*for..in*/M:for(const [__parent__, prop] = (p={}, (p.z = __parent__.(__count__ :: #3={a:#3#}))()) in (__proto__ = [, , ({ __count__: __noSuchMethod__, prop: __proto__ }), [, , __count__]])) /*\n*/{/*infloop*/M:while(new (Function)(x::__parent__,  /x/ )){M:if(<><x><y/></x></>) yield; else  if (#1#) {yield <><x><y/></x></>; } }gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__.prop in @foo .@x:: window < __proto__ =  /x/g ) /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.let in (yield  if ( /x/ ))) {return *;yield; }");
tryItOut("/*for..in*/for([__proto__, constructor] = this in this) export *;");
tryItOut("/*infloop*/L:while(__iterator__.eval(window << <y><z/></y>++))export __iterator__;");
tryItOut("/*infloop*/while(this)if(@foo) {} else export __proto__;");
tryItOut("{}");
tryItOut("this;");
tryItOut("{with({constructor: [15,16,17,18].some((function  __parent__ (__proto__)3/0).call, 033)})const __iterator__ =  '' , __noSuchMethod__; /x/g ; }");
tryItOut("if(<y><z/></y>) { if ((eval(\"(__parent__) ^= \", <y><z/></y>.__lookupGetter__(\"constructor\")))) {__count__ = [1];gc() }} else {continue M; }");
tryItOut("if((<xxx {constructor}={<y><z/></y> % ({a1:1})} />.(<x><y/></x>.unwatch(\"prototype\") ? ( /* Comment */__proto__) : [1,,].propertyIsEnumerable(\"__iterator__\")))) { if (throw 3.141592653589793) let \f__proto__ = [,,z1], null; else throw 0/0;}");
tryItOut("switch(\t<><ccc:ddd>yyy</ccc:ddd></>.hasOwnProperty(\"__count__\")) { case new [1,2,3,4].slice(x::__count__, <x/>): <ccc:ddd><!--yy--></ccc:ddd>break;  }");
tryItOut("with(<x><y/></x>.(*::*)++){return false;export prototype; }");
tryItOut("throw StopIteration;");
tryItOut("L:with( /x/g )");
tryItOut("/*for..in*/for(let __proto__ in return;) const prop");
tryItOut("var __iterator__, prop;");
tryItOut("/*infloop*/do {M:with(([11,12,13,14].map))return __parent__; } while((<y><z/></y>.valueOf(\"number\")) -= [15,16,17,18].sort(<y><z/></y>, <y><z/></y>));");
tryItOut("undefined;");
tryItOut("/*infloop*/M:for(let __parent__; @foo; #2=__noSuchMethod__ = @foo) __iterator__;");
tryItOut("/*for..in*/L:for(var constructor in ((/a/gi)()))/*for..in*/for(__noSuchMethod__ in (((( \"\" ).__defineSetter__).call)(<y><z/></y>))){const __noSuchMethod__;return; }");
tryItOut("while(( \"\" .prop) && 0)throw <x><y/></x>;while((__proto__|= /x/ ) && 0)if(this) {gc() }");
tryItOut(";");
tryItOut("/*for..in*/for(var __count__ = 1.2e3 in <><x><y/></x></>) {{}*::*; }");
tryItOut("with({__noSuchMethod__: null <<= ([15,16,17,18].filter(Math.pow, undefined))})var prop = __parent__, prototype;");
tryItOut("{L:if([ '' ].sort(function  __parent__ (__parent__)true)) { if (prop = window) {try { throw @foo; } finally { {} }  } else {}} }");
tryItOut("export __parent__;");
tryItOut("/*infloop*/do export *; while(<bbb xmlns=\"\n(*::*.__count__)\"><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></bbb>);");
tryItOut("gc()");
tryItOut("switch([15,16,17,18].some((1e+81).__defineSetter__, ((function ([y]) { })()()))) { default: L:while((([,,].constructor).__defineSetter__(\"__iterator__\",  '' )) && 0){with({__count__: this.__defineSetter__(\"__count__\", constructor = this)}) }<y><z/></y>;case 7: throw __proto__;break; case new new Function([z1,,]): break ;break; break;  }");
tryItOut("M:with(\t((uneval(__iterator__))))do continue L; while((this) && 0);");
tryItOut("yield ({a1:1}).eval(*::*);");
tryItOut("L:if(\n /x/ .__count__.@*) { if (((this for (constructor in true))[(<y><z/></y>.__defineSetter__(\"prototype\", Math.pow))])) {{} } else yield;}");
tryItOut("__parent__ = __proto__;");
tryItOut("({ __noSuchMethod__:  { return ((constructor = setter) == [,,]).__lookupSetter__(\"__proto__\") } , constructor: prop }) = __iterator__;");
tryItOut("L:if(<x><y/></x>) {function::prop = -3/0;gc() }");
tryItOut("/*infloop*/do {yield @foo; } while((033).call(*::*, <x><y/></x>).throw((this.__defineGetter__(\"__proto__\", 'haha'.split))));");
tryItOut("if((__proto__.__noSuchMethod__ setter= ({ get constructor __proto__ ()0/0 }))) {let __parent__ = <x><y/></x>, __iterator__; } else /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in 3/0) yield @foo;");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("L:with((let (function::__iterator__) true))export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __iterator__ = (new Exception(false, undefined))) /*for..in*/for(var __count__ = [true] in <x><y/></x>) {{} }");
tryItOut("{<y><z/></y>; }\n{let __parent__ = window, prop;\nyield; }\n");
tryItOut("L: M:if(default: break; ;break; case 7: break ;break; ) {throw this;yield <x><y/></x>; } else {continue M;{} }");
tryItOut("while((eval(\"return __iterator__;\", <y><z/></y>)) && 0){var __proto__ = <x/>, __iterator__ = prop; }");
tryItOut("try { for(let y in []); } catch(__iterator__) { let([__noSuchMethod__, __parent__], prop = __parent__ = <><x><y/></x></>.watch(\"__proto__\", gc)) { throw StopIteration; } finally { constructor = __count__; } ");
tryItOut("do {gc()var __iterator__; } while((new (function  __noSuchMethod__ ()*)((prototype = window, __iterator__ = false;).apply(*::*))) && 0);if([@foo].filter([1,2,3,4].map)) {return 1e-81; }");
tryItOut("while(((/a/gi)()) && 0)do {new Function } while((*::*) && 0);");
tryItOut("if((<><x><y/></x></> + <><x><y/></x></>)) yield  /x/ ; else continue M;");
tryItOut("switch(eval(\"(-1)\", #1#)) { case (yield (<y><z/></y>)[function (constructor, __proto__) { return @foo } (window, undefined) += constructor = <x><y/></x>]\f): case 5: break; default: case 7:  }");
tryItOut("with(prop)gc()");
tryItOut("if(String(window))  else  if ((prop.isPrototypeOf(<x><y/></x>))) {{} } else gc");
tryItOut("continue L\ncontinue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in false) ; const __iterator__;");
tryItOut("let (delete = [11,12,13,14].map, __noSuchMethod__ = undefined) { /*for..in*/for(let  /x/ ['prop'] in ((/a/gi)((-1 || *::*)))){throw  /x/ ;; } }");
tryItOut("return (each = <><x><y/></x></>)\n");
tryItOut("/*for..in*/for([__count__, prop] = function(q) { return q; }(*) in eval(\"return <><x><y/></x></>;\",  \"\" )) if(window) return; else gc()");
tryItOut("if([1,,] in prop) {3.141592653589793; } else ");
tryItOut("if(Number(<x><y/></x> && <x><y/></x>)) {/*for..in*/for([constructor, __iterator__] = <y><z/></y> in true) {export prototype; }yield eval(\"export __parent__;\", (__proto__ in true)); }");
tryItOut("gc()");
tryItOut("L: {__noSuchMethod__ = *, __parent__ = 033 }\n;");
tryItOut("with(\n{__proto__: [constructor]});");
tryItOut("gc()\nthrow ({a2:z2});");
tryItOut("/*infloop*/for(let ({ prop: __noSuchMethod__ })\t = (-0)(<x><y/></x>, [[]]); (* ? #3={a:#3#} : 1.3); <><x><y/></x></> + <><x><y/></x></>) let __iterator__;");
tryItOut("do {( '' ); } while(( /x/g  .@ <y><z/></y>) && 0);");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = constructor.__count__ getter= function(y) { yield y; throw <><x><y/></x></>;; yield y; }.hasOwnProperty(\"__noSuchMethod__\") in (__proto__ || window)) {break L\nif(({a1:1})) {return; } else __count__; }");
tryItOut("L: {gc() }");
tryItOut("{with(<><x><y/></x></> / <y><z/></y> + ([] = (prop.constructor))){ \"\" ;yield; } }");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = <x><y/></x>.unwatch(\"__count__\") in <x><y/></x> *= <y><z/></y>(Function)) {gc()\nconst __noSuchMethod__ = <x/>, prop = 0; }");
tryItOut("/*infloop*/while((p={}, (p.z = <><x><y/></x></>)()))function ([y]) { };");
tryItOut("with({}) { let(__noSuchMethod__ = *::*) ((function(){yield 4.;})()); } ");
tryItOut("switch((-0)) { default: break; do return; while((this for each (__count__ in this)) && 0);case *.watch(\"constructor\", Math.sin)(): if((function ([y]) { })().__defineSetter__(\"prop\", prototype)) { if ('fafafa'.replace(/a/g, eval)) gc()} else gc()case (__proto__ = <y><z/></y>).@*: case (yield (__noSuchMethod__ = <y><z/></y>)): break; yield #2=[#3={a:#3#}];break; case [<><x\t><y/></x></>].sort('haha'.split): /*infloop*/L:for(const constructor; <y><z/></y> + (-0); new function (prop, constructor)arguments( /x/g , ({a1:1}))) {export __noSuchMethod__;/*infloop*/while( /x/g )throw *::*; }break; break;  }");
tryItOut("{}");
tryItOut("/*infloop*/M:for(__iterator__; <><x><y/></x></> *= *::*; prop = |) {break ; }");
tryItOut("/*infloop*/for(prop = <x><y/></x>; yield [[]]; prototype.prop getter= (function () { yield null } ).apply) {(@foo); }");
tryItOut("gc()");
tryItOut("{break L; }");
tryItOut("throw StopIteration;");
tryItOut("var __iterator__ = <><x><y/></x></>, prop\n");
tryItOut("with({__parent__: this})/*\n*/{__parent__;export constructor; }");
tryItOut("L: {var __count__, __noSuchMethod__ = window;{} }");
tryItOut("(((Math.sin).apply).call).apply\nyield 1.3;\t const function::prop;");
tryItOut("((__count__|=<y><z/></y>).__noSuchMethod__);");
tryItOut("/*for..in*/M:for([__parent__, __iterator__] = <bbb xmlns:ccc=\"<x><y/></x>.__defineSetter__(\f\"set\", (this).__defineSetter__)\"><ccc:eee></ccc:eee></bbb> in __count__ = window) (<x><y/></x>);");
tryItOut("yield [,,]; const __noSuchMethod__;");
tryItOut("/*infloop*/while(undefined){export __proto__; }");
tryItOut("/*infloop*/for(var ({ __proto__: prop }) = <x/>.__noSuchMethod__ = [11,12,13,14].sort.eval((void eval(\"yield;\", prototype))); [<><x><y/></x></>].some(function(q) { return q; }); <x/> >> let (constructor) new let constructor = <y><z/></y>, __iterator__;()) if(<x><y/></x>.(<><x><y/></x></>)) {export *;__count__ = null, __noSuchMethod__; } else  if (eval(\"({})\", [z1,,])) return; else {{}([]); }");
tryItOut("{throw [z1,,]; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in function ([y]) { }) return; }");
tryItOut("M:while((undefined\n -= __iterator__ ? null :  { yield __iterator__ } ) && 0)/*infloop*/function (__proto__) { yield ({}).__lookupGetter__() } ");
tryItOut("/*infloop*/for(const ({ prop: __count__, __noSuchMethod__: __noSuchMethod__ }) =  /x/g ; new (__proto__)(<bbb xmlns:ccc=\"*.@*\"><ccc:eee></ccc:eee></bbb>); __iterator__ =  \"\" ) { get  }");
tryItOut("let (__iterator__ = (1.2e3 instanceof <y><z/></y>), constructor = @foo) { throw <>/*\n*/<x><y/></x></>; }");
tryItOut("L: {(function ([y]) { });var __count__ = 5.0000000000000000000000; }");
tryItOut(" for each (__parent__ in (function ([y]) { })().unwatch(\"__noSuchMethod__\").__defineGetter__(\"function::constructor\", new Function)) for (constructor.__count__ in <x><y/></x>) for each (__count__ in  /x/ ) if ( /x/g )");
tryItOut("const prototype, __noSuchMethod__ = <y><z/></y>;yield 0.1;");
tryItOut("{var prototype, __proto__; }");
tryItOut("/*for..in*/for(let constructor =  /x/  in __noSuchMethod__ = __noSuchMethod__) {/*for..in*/for(var __proto__.__count__ in ((().watch)((true.prototype = [[]]).throw(false)))){yield null;if(3/0) {} else  if (__proto__) {let __noSuchMethod__ = null; } else {* } }if(__iterator__|=*) {{}return (-1); } else  if (eval(\"__parent__\",  '' )) *::*; else yield <><x><y/></x></>;\ncontinue ;\n }");
tryItOut("function(y) { yield y; return;; yield y; }");
tryItOut("do {throw <><x><y/></x></>;/*infloop*/for(const function::__iterator__; true;  /x/g ) {case 9: break; default: case <y><z/></y>:  } } while((eval(\"__proto__\", <><x><y/></x></>).isPrototypeOf([,,]\n)) && 0);");
tryItOut("/*infloop*/while(<x><y/></x>)");
tryItOut("/*infloop*/L:for(let function::prop; this.__defineSetter__(\"prototype\", eval); ({__parent__:  '' .x::__proto__ >= ++window,  get __parent__()\n__count__.__lookupGetter__(\"__parent__\") })) {return <y><z/></y> /= true;{<x/>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in  \"\" ) ");
tryItOut("/*for..in*/L:for([constructor, prop] = (__noSuchMethod__.prototype) in null.@foo.propertyIsEnumerable(\"prop\")) {export *;\n;\nbreak M; }");
tryItOut("if(new (prototype)()())  else yield;");
tryItOut("do return [,]; while(((__parent__.__lookupGetter__(\"constructor\"))) && 0);break L;");
tryItOut("if(window ^ undefined) {} else (1 for (x in []))");
tryItOut("L: {let constructor, prop;throw  /x/ ; }");
tryItOut("new Function(undefined.__lookupGetter__(\"__iterator__\"), <x/> ^= [[1]])");
tryItOut("yield <x><y/></x>;{gc() }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: [] }) = (new 3(undefined)) .@x:: __parent__ .@x:: false.__defineGetter__(\"__count__\", ((1 for (x in []))).apply); prototype = *; <> </>.(([0x99 ? 5.0000000000000000000000 : <y><z/></y>])\n)) ;");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = <x/>++ in *) export *;");
tryItOut("if(\n(this .@*:: 1e+81)) (~<x/>); else  if (__noSuchMethod__ = this.constructor) return;");
tryItOut("/*for..in*/for(function::prop in (constructor =  /x/g ) @ (__proto__ if (1e4))) {/*for..in*/for(__noSuchMethod__ = undefined in #1=({__count__: null})) {/*infloop*/for(let __parent__; true in  '' ; ((yield prop))) return 0x99; } }");
tryItOut("L: yyy");
tryItOut("if(eval(\"/*for..in*/for(var __parent__ = * in -1) {gc() }\", true)) continue ; else  if (__iterator__%=undefined) <x><y/></x>;");
tryItOut("return;");
tryItOut("/*infloop*/for(var constructor; this ? window : undefined; [,].valueOf\t(\"number\")) continue ;");
tryItOut("throw null\n");
tryItOut("L:if(<x><y/></x>.hasOwnProperty(\"prototype\")) { if (((3.141592653589793 ^  /x/g ).__lookupSetter__(\"prop\")).call((((Math.sin).apply).call(1.2e3, )), (({__iterator__ setter: ({}).hasOwnProperty })), new 3.141592653589793)) {continue ;break ; }} else {M:if(('fafafa'.replace(/a/g, gc)))  else {yield this; }{} }");
tryItOut("L:if(({a1:1})) {return; } else undefined;");
tryItOut("(function (function::prop) { return true } ).call");
tryItOut("if(<><x><y/></x></> ? __parent__ : ({a1:1})) {var prototype = <x/>, __noSuchMethod__ = <><x><y/></x></>;{} } else  if ([,].__parent__) {yield;__noSuchMethod__, __count__; } else {{}return; }\n");
tryItOut("/*for..in*/for(let x::__noSuchMethod__ in ((((1 for (x in []))).\tcall)(</><x><y/><\f/x></> .. *::*))){return; }");
tryItOut("if(true[]) { if ( '' ) export __proto__; else {export *;__noSuchMethod__; }}");
tryItOut("/*for..in*/for(const __parent__ in <x><y/></x>) ;");
tryItOut("/*infloop*/M:while(0){; }");
tryItOut("if(prop =  /x/ ) {with((yield <><x><y/></x></>)){yield;/*infloop*/for(__count__; ({}); *::*) {(<x/>); } } }");
tryItOut("if(__iterator__.(window)++) let (__iterator__ =  /x/g , constructor) {  } else  if (window.throw([,,])) {if(constructor *= (true for (*::*[__parent__] in undefined))) {export *;{} } else  if ((__count__ = ((function(y) { yield y; continue M; yield y; })((null if (<y><z/></y>)), ({}))))) ; }");
tryItOut("/*infloop*/do {(<x/>);throw  /x/g ; } while(((p={}, (p.z = (prototype.constructor setter= Math.pow))())));");
tryItOut("/*infloop*/L:for(const prop; 0; __proto__) {return; }\n");
tryItOut("if((<y><z/></y>.hasOwnProperty(\"__proto__\"))(-0, new (true)())) {;yield; } else  if ((-0) .@*:: true) {return; } else {(true);const __noSuchMethod__; }");
tryItOut("return <y><z/></y>;");
tryItOut("/*infloop*/L:do {((1 for (x in []))).apply<x><y/></x>, prototype; } while(0.1.@*);");
tryItOut("this.zzz.zzz;");
tryItOut("with({constructor: let __count__, get = window})continue \n");
tryItOut("/*infloop*/do {{yield;throw prop; }throw __proto__; } while(prototype.(prototype .. \f<x><y/></x>.prop = <x><y/></x>));");
tryItOut("if(<x><y/></x>) function  __iterator__ (constructor) { return #1=[#1#] } ");
tryItOut("'haha'.split");
tryItOut("M:with({__count__: #1#.yoyo(__parent__)}){let __count__; }");
tryItOut("throw <x><y/></x>;");
tryItOut("let (__count__ = <zzz>undefined</zzz>) { constructor, __noSuchMethod__; }");
tryItOut("/*for..in*/for(let [__proto__, prop] = this in <x><y/></x>) {1e-81continue M; }");
tryItOut("if(#1=[#1#]\n(this.__defineSetter__(\"__noSuchMethod__\", window))) {export constructor; }");
tryItOut("return false;");
tryItOut("/*for..in*/for(const __parent__ = this.yoyo(<x><y/></x> .. @foo) in __iterator__.prototype = [[1]]) {while((<x><y/></x>) && 0){yield; }continue ; }");
tryItOut("");
tryItOut("/*for..in*/for(let (undefined)(<><x><y/></x></>) in (((((function(q) { return q; }).call).call).call)(<><x><y/></x></>)))yield;");
tryItOut("with({}) prop = __count__;");
tryItOut("if(new __count__ &= true()) let __noSuchMethod__ = *::*, constructor = __iterator__; else {{}while((<y><z/></y>.__parent__) && 0)gc() }");
tryItOut("if(eval(\"/*for..in*/L:for(const __parent__ in ((gc)(*)))window\", 3.__defineGetter__(\"prop\", (new Function(\"prop\"))))) {function  constructor (prop) { yield <><x><y/></x></> }  } else  if (((__count__ for each (prototype in  '' )))) {} else const __parent__, __parent__ = <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(let prototype; this.__defineGetter__(\"prop\", Math.pow); (\n<><x><y/></x></>)) {gc() }");
tryItOut("L:if((\n<x><y/></x>)) yield  '' ; else {<x><y/></x>;continue M; }");
tryItOut("/*infloop*/for(var __count__; ((yield  '' ) >> eval(\"<><x><y/></x></>\", @foo)); (p={}, (p.z = @foo)())) let function  __parent__ (__parent__) { yield false } , __noSuchMethod__");
tryItOut("return;");
tryItOut("let function::__proto__ = __iterator__, constructor = false;");
tryItOut("if([(prototype.__parent__ getter= [1,,] ? <><x><y/></x></> : __parent__) for each (prop in (new (function (__noSuchMethod__, __noSuchMethod__) { [1,2,3,4].slice } ).apply())) for each (__parent__ in <x><y/></x>) if (<x><y/></x>)\t]) { if (([1,,].watch(\"constructor\", (-0)))) {} else /*for..in*/for(let prop in (prototype = <x><y/></x>)) return;}");
tryItOut("L:if(<y><z/></y>) var __noSuchMethod__ = <y><z/></y>, __count__ = window; else  if (null) {(<x/>);(function ([y]) { }); }\n\n");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut(" set __proto__(__noSuchMethod__, __iterator__) { return ((yield undefined)) } ");
tryItOut("{return this;yield; }gc()");
tryItOut("__count__gc()");
tryItOut("if((constructor.__iterator__)) __count__ = <x><y/></x>, prototype = *;");
tryItOut("if(typeof let (__parent__) false()) {export __iterator__;yield; } else  if (eval(\"[[1]]\",  /x/g ).__lookupSetter__(\"__noSuchMethod__\")) export __parent__; else return <><x><y/></x></>;");
tryItOut("/*infloop*/L:for(<x><y/></x>; this; @foo) {gc() }/*infloop*/for(prototype|=@foo; --(function  __count__ ()window).call(<><x><y/></x></>, __count__); null !== <y><z/></y>.throw((__noSuchMethod__.(<x><y/></x>)))) return *;");
tryItOut("/*infloop*/for(let prototype; @foo; *::*.isPrototypeOf(033)) {(1 for (x in [])) }");
tryItOut("gc()\n[({ prop: __proto__, ({prop getter: function () { return *::* } , __noSuchMethod__: <><x><y/></x></> }): prop })]\n");
tryItOut("if((({ get __parent__ __proto__ () { <x/>; }  }))) {var prototype = [1], __count__;throw prop; } else  if ((window--)) gc()");
tryItOut("/*infloop*/while(++<x><y/></x> ^= this)do {} while(((__parent__.prop+= /x/g .@*.__noSuchMethod__)) && 0);");
tryItOut("L:switch(__iterator__.__iterator__ = [11,12,13,14].map) { default: case  /* Comment */window: if((prototype(undefined) = true.prototype.__iterator__)) {gc()let __proto__ = <x><y/></x>, __count__; }break;  }\n");
tryItOut("switch(prototype.eval(let)) { default: yield this\n__count__;case @foo / <x/>.__lookupSetter__(\"constructor\"): break; yield;case 2: case 5: yield <y><z/></y>; }");
tryItOut("M:if(({}).prototype) { if ( '' .prototype) function(y) { yield y; ; yield y; } else }");
tryItOut("do do {(<x><y/></x>); } while((__parent__ = *::*) && 0); while(( \"\" ) && 0);");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in  \"\" ) continue L;");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("/*for..in*/for((*.__parent__) in (((Exception()) <= (constructor.(window))) |= __noSuchMethod__.(<x/>) @ ())) {/*for..in*/for(var [constructor, __noSuchMethod__] = window in *) {export __noSuchMethod__; }yield; }");
tryItOut("/*infloop*/for(const constructor; true; (new Object(@foo, 5.0000000000000000000000))) {L:with({constructor: (<x><y/></x> for (prototype in [[]]))}){break L; } }");
tryItOut("/*infloop*/for(<x/>; <><x><y/></x></>; @foo) gc()");
tryItOut("/*for..in*/for(__noSuchMethod__ in (<><x><y/></x></>)[<><x><y/></x></>]) { }");
tryItOut("");
tryItOut("this.zzz.zzz;");
tryItOut("{:__noSuchMethod__; }");
tryItOut("M:if(true) { if ( \"\" ) __noSuchMethod__ =  /x/ , __noSuchMethod__ = 4.; else var __parent__;}");
