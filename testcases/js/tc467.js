tryItOut("L:switch() { default:  }");
tryItOut("if((new new Function())(\nconstructor,  /x/g )) {function(q) { return q; } }");
tryItOut("/*infloop*/for(3.141592653589793; true; 0/0) {export *;(033); }");
tryItOut("with({let: <y><z/></y>}){return <x/>;yield; }");
tryItOut("let (__parent__ = <><x><y/></x></>, prototype = this) { const -1 = false, __parent__; }");
tryItOut("/*for..in*/for(const __noSuchMethod__.__parent__ in ((new Function)(__proto__.propertyIsEnumerable(\"__noSuchMethod__\")))){{export *;export *; } }");
tryItOut("M:while((<y><z/></y>) && 0){*::*; }");
tryItOut("/*for..in*/for(constructor.prop in ((gc)(RegExp(<><x><y/></x></>, <x><y/></x>)))){continue ; }\nwith({}) this.zzz.zzz;\n");
tryItOut("let(__parent__) { yield <><xxx {constructor}={__count__ = *::*} /></>;");
tryItOut("L:if(((p={}, (p.z = <><x><y/></x></>)()))) {return window;try { continue ; } catch(constructor) { prop } finally { return; }  } else  if (<x/>.hasOwnProperty(\"__proto__\")) __noSuchMethod__: ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in *) yield <x><y/></x>;\n /x/ ;\n\t");
tryItOut("/*infloop*/\ffor([15,16,17,18].filter((((1 for (x in []))).apply).apply, (uneval((this.__defineSetter__(\"constructor\", #1=4.))))); *::*++.eval(*); (uneval(033))\n) <x/>;\nreturn;\n");
tryItOut("/*infloop*/do {yield; } while(*::*);");
tryItOut("if(window) { if ([1].__defineGetter__(\"__count__\", eval)) {{} } else {; }}");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = new eval() in 'fafafa'.replace(/a/g\t, function (__parent__)__iterator__)) Function");
tryItOut("/*infloop*/for( '' ; __iterator__; <x><y/></x>) *;");
tryItOut("function () { yield prop } \n/*infloop*/for(this; 4.;  '' ) \t{export *;const prototype, constructor = [z1]; }\n");
tryItOut("return;");
tryItOut("let (prototype, constructor = __noSuchMethod__) { export __noSuchMethod__; }");
tryItOut("M:with({prototype: (constructor|=[[1]])}){export __count__;{} }");
tryItOut("/*for..in*/L:for(var constructor = (+false.__lookupSetter__(\"__count__\")) in window) {/*for..in*/for(var __noSuchMethod__ = __proto__ = __parent__ in yield (__parent__.__iterator__)) <x><y/></x>; }");
tryItOut("let (__parent__, __count__ = constructor >>  /x/  ^ <x><y/></x>.__iterator__.throw(true >> true)) { return @foo; }");
tryItOut("switch((__iterator__ = (new (Math.sin)( '' , __proto__)))) { default: break; case 6: break; case ( '' .yoyo([z1,,])): export __count__;break;  }return;");
tryItOut("{return #3={a:#3#};yield; }");
tryItOut("function::__proto__");
tryItOut("return [[]];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in *::*.prototype) yield <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __proto__: prototype, __parent__: get }) in #1#) {if(<y><z/></y>) {export *;break M; } else  if (#1=[#1#])  for each (__iterator__ in __iterator__) for each (__count__ in @foo) else return null; }");
tryItOut("/*for..in*/for(let prop in <y><z/></y>) continue L;");
tryItOut("/*infloop*/for(( '' )()./*\n; new function(id) { return id }((<x><y/></x>).__defineSetter__, 1e4).constructor = ('fafafa'.replace(/a/g, function () { throw null; } )); <><x><y/></x></>) {with({!<y><z/></y>: <><x><y/></x></>.hasOwnProperty(\"__proto__\")}){yield [,,];{} }return; }");
tryItOut("/*infloop*/M:while(1.3)export __proto__;");
tryItOut("/*infloop*/do {<><x><y/></x></>; } while([(__parent__ = prop) for each ((window)(@foo) in <><x><y/></x></>) if (prop\f)]);");
tryItOut("yield false");
tryItOut(" { return __count__.(((<x><y/></x>).call(__count__(), ))) } ");
tryItOut("do {} while(((yield *::*) % Date()) && 0);");
tryItOut("L:if( /* Comment */*) M:if(__noSuchMethod__) { if (null) { }} else let __proto__;");
tryItOut("for(let y in []);");
tryItOut("L:while(() && 0){return; }");
tryItOut("return;");
tryItOut("L: return;");
tryItOut("M:while(((+let (__proto__ = <><x><y/></x></>, x::__proto__) [[1]])) && 0)");
tryItOut("yield;");
tryItOut("if(let (function::constructor, __proto__) window) { if (({__parent__: prop = 1e-81})) export __noSuchMethod__; else {;yield; }}");
tryItOut("/*for..in*/for(constructor in ((function \t()prototype)(__noSuchMethod__ = function  __iterator__ () { return 0/0 } ([,,z1])//h\n))){{}yield []; }");
tryItOut("yield ({__iterator__ getter: 'haha'.split });");
tryItOut("{if(new (({}).__lookupGetter__)()) { if (( '' ( /x/g ))) (<x><y/></x>);} else {yield;throw true; } }");
tryItOut("/*for..in*/for(let __proto__ = * ? *::* :  ''  instanceof __iterator__ = prototype in ((uneval(<><x><y/></x></>))).@foo) L: throw false;");
tryItOut("try {  } catch(__count__) { yield __parent__; } finally { export *; } ");
tryItOut("L:if((false.throw(-1))) { if ((<y><z/></y> &= new String())) export *; else \texport prototype;}\ndo let constructor; while(( \"\" ) && 0);");
tryItOut("\nexport __iterator__;");
tryItOut("{/*for..in*/for(prop in (()((true.__lookupGetter__(\"__proto__\")).yoyo(__count__)))){(window).watch } }");
tryItOut("if(this.__defineGetter__(\"__count__\", [1,2,3,4].map)) (<x><y/></x>);");
tryItOut("/*for..in*/for(const __parent__ in null) var prop, __count__;");
tryItOut("/*infloop*/for(<x><y/></x>.__iterator__ >>>=eval(\"(-1) /= window\", <x><y/></x>); <><{__noSuchMethod__}><!--yy--></{__noSuchMethod__}></> ^ (new function (prop) { yield ({__noSuchMethod__: this }) } ()); (typeof 3.141592653589793) .@x:: this.zzz.zzz) throw <><x><y/></x></>;");
tryItOut("if((5.0000000000000000000000)(<y><z/></y>)) { if (0(<x/>)) const __iterator__ = #1=[#1#];} else { }");
tryItOut("if((window[<y><z/></y>]).call(this, <x/>)) { if (@foo)  if ( \"\" )} else {yield; }");
tryItOut("export *;\n__count__ = 3.141592653589793, __count__;\n");
tryItOut("/*infloop*/do {let constructor, constructor;gc() } while(((yield function::__iterator__+=<x\t><y/></x>.yoyo(this.__defineGetter__(\"__iterator__\", (function  __iterator__ (function::__proto__)this).call)))));");
tryItOut("const __proto__\nconstructor");
tryItOut("L:if(<><x><y/></x></>) prop, prop; else  if (__iterator__) ;");
tryItOut("if(<x/>) { } else return  \"\" ;\nthrow [z1,,];\n");
tryItOut("throw prototype;\n/*infloop*/for(let __count__; <x/>; <><x><y/></x></>) throw  \"\" ;['__count__'] = __count__;\n");
tryItOut("/*infloop*/while(<><x><y/></x></>.__defineSetter__(\" \", function(q) { return q; }))yield;");
tryItOut("throw ([15,16,17,18].some(({}).hasOwnProperty, (__iterator__ %= \f1e81)));");
tryItOut("/*infloop*/M:for(const function::__noSuchMethod__; <x/>; this.__defineGetter__(\"__count__\", new Function)) {(<x><y/></x>); }");
tryItOut("if(this.__defineGetter__(\"__proto__\", (new Function(\"break ;\")))) let (({ __parent__: __noSuchMethod__, __proto__: __iterator__ }) = (RegExp(undefined)), __noSuchMethod__) { var prototype = [1,,], prototype = __count__; }");
tryItOut("L: L:if(#1=[#1#]) { if ( /x/g ) { } else throw <x/>;}");
tryItOut("/*for..in*/L:for(each in (((__count__).__defineSetter__)(1e-81.unwatch(\"__proto__\"))))return; const prop;");
tryItOut("/*infloop*/do {let prototype; const __parent__; } while(((p={}, (p.z = <x><y/></x>)())));");
tryItOut("/*for..in*/for(let constructor in <><x><y/></x></>) {let __count__ = false; }");
tryItOut("/*for..in*/for(\tlet [constructor, __proto__] = [this.zzz.zzz] in +1e-81.*) {\n/*for..in*/for(const constructor =  ''  in <><x><y/></x></>) throw __proto__; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((Function)(-0))){; }/*for..in*/for(const __proto__ in ((function(y) { yield y; {}; yield y; })(__proto__['prototype'] = ({}).propertyIsEnumerable/*\n*/(\"__iterator__\")))){continue L }");
tryItOut("/*for..in*/for(const prototype = *::* in 1e81) gc");
tryItOut("do return <x><y/></x>; while((1e81) && 0);");
tryItOut("/*infloop*/for(({ prototype: __iterator__, __parent__: constructor }) = __iterator__ getter: function (__proto__) { yield <><x><y/></x>//h\n</> }  >>  /x/g ; [11,12,13,14].map; [*::* for (prototype in  /x/g \f)]) {; }");
tryItOut("/*for..in*/for(let \t[__parent__, prototype] = (yield (<ccc:ddd><x><y/></x> </ccc:ddd> ? arguments.yoyo(<><x><y/></x></>) :  /x/g .__defineSetter__(\"__parent__\"/*\n*/,  /x/g ))) in *) gc()");
tryItOut("with({prototype: __parent__ = <><x><y/></x></>.__lookupGetter__(\"__iterator__\")}){3/0 ? (-1) : <x/>; }");
tryItOut("/*for..in*/M:for(__parent__ in <><x><y/></x></>) return true;");
tryItOut("while((((p={}, (p.z = __count__)()) && (0/0)(-0)) ? __iterator__ = __proto__ .@x::  /x/  , 3/0 : (\ffalse % prototype).__lookupSetter__(\"__iterator__\")) && 0)L:if((__iterator__ = null)) {export prototype;({}).hasOwnProperty } else  if (eval(\"true\", 0/0)) yield [,];");
tryItOut("/*for..in*/for(let ({ __proto__: __iterator__, __noSuchMethod__: constructor }) in (prop.prop = window.watch(\"constructor\", (((function ([y]) { })()).watch).apply))) {export *; }");
tryItOut("if(prop = *) {export __count__; } else  if (@foo) export *;");
tryItOut("if( \"\" ) ; else  if ([1e4gc()]) export constructor; else {{} }");
tryItOut("M:if(true.__noSuchMethod__) {let (function::__iterator__, __iterator__) { export __iterator__; }yield; }");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("with({}) with({}) yield ({a1:1});");
tryItOut("throw <x><y/></x>;");
tryItOut("switch((eval(\"false\", null))()) { default: switch() { \ncase 8: break;  }\n\freturn;case 3: break; case 4: break; case (p={}, (p.z = <><x><y/></x></>)()):  } const __count__;");
tryItOut("if(~delete (<{__parent__}>yyy</{__parent__}>.([11,12,13,14].map)))  else  if (((constructor.__noSuchMethod__ = getter)().unwatch(\"__noSuchMethod__\"))) {export __iterator__; } else /*infloop*/do {export *;export __parent__; } while( \"\" );");
tryItOut("if(()) export *; else  if (#1=(\t{prop: this.__defineSetter__(\"constructor\", gc)})) {; }");
tryItOut("/*infloop*/for((uneval((constructor = __proto__) >>= prop.( '' ))); false; ([\n<x><y/></x>.@* for each (__proto__ in (@foo.valueOf(\"number\"))) if (0.1)])) {var (null)(<y><z/></y>) = ([1] if (<x><y/></x>)), prop = ({a1:1}) }");
tryItOut("{return window;yield yield; }");
tryItOut(" '' 'haha'.split");
tryItOut("/*infloop*/for(undefined; undefined; this) {{} }yield window;");
tryItOut("export prop;");
tryItOut("/*infloop*/while(([<x><y/></x>.*].some(gc))){ }");
tryItOut("for(let y in []);");
tryItOut("if(1.3--) {;return; } else  if ({}++) var __iterator__ = <x/>; else ");
tryItOut("let (__parent__ = (yield <><x><y/><\n/x></> & false.propertyIsEnumerable(\"constructor.__count__\")), __iterator__) { const __parent__ = <x/>, __count__; }");
tryItOut("const __noSuchMethod__, __noSuchMethod__\n");
tryItOut("for(let y in []);");
tryItOut("const prototype = <><x><y/></x></>;");
tryItOut("yield");
tryItOut("/*infloop*/while((new Function(true)).watch(\"__iterator__\", [15,16,17,18].some('haha'.split, prototype)))<x><y/></x>; const __noSuchMethod__;");
tryItOut("let (__noSuchMethod__ = (yield prototype)) { return; }");
tryItOut("/*infloop*/M:for(var ({ constructor: ({ prop: prototype, prop: [] }), __noSuchMethod__: prop }) = eval(\"function::prop.(<><x><y/></x></>)\", ((({}) for each (__proto__ in constructor)))); __noSuchMethod__; false.__proto__ instanceof __proto__.__proto__ =  /* Comment */\t '' ) {/*infloop*/while(true.eval(<y><z/></y>))yield false; }");
tryItOut("if(<><x><y/></x></>) { if ([,,z1]) {{}__iterator__ = prototype; } else yield;}");
tryItOut("(.2)");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in ((({}).__lookupGetter__)(((1 for (x in []))).call([z1,,], false,  '' )))){L:if(window) {export prop; } else  if (<><x><y/></x></>.__defineGetter__(\"__count__\", (function  __noSuchMethod__ (__proto__) { {} } ).call)) {return [,,z1];export *; } else {{}*; }break ; }");
tryItOut("[1,2,3,4].slice");
tryItOut("if(.2)  else {yield <><x><y/></x></>;; }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in new (eval)()) Math.sin\nthrow @foo;\n");
tryItOut("");
tryItOut("gc()\n");
tryItOut("if(new ((__noSuchMethod__).apply(*::*))(<x><y/></x>.(5.0000000000000000000000), arguments\f)) { if (<x/>) {window, function ([y]) { } }} else {let prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in __iterator__) {{} }");
tryItOut("if(((__noSuchMethod__.__parent__ setter= [1,2,3,4].map))[ /* Comment */<y><z/></y>]) throw -3/0; else  if (<><bbb xmlns=\"this.__defineSetter__(\"__noSuchMethod__\", function () { return [,,] } )\"><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></bbb></>) {const prop, __count__; }");
tryItOut("let __proto__;");
tryItOut("L: {throw window;prop = <x><y/></x>; }");
tryItOut("M:if(__proto__) {null[ '' ]@foo, __proto__ }");
tryItOut("/*infloop*/for(let \fprop; [__noSuchMethod__ = __proto__ if (<x><y/></x>)]; new /a/gi(yield \n<y><z/></y>, prototype = __proto__)) /*infloop*/do {(function ([y]) { });<><ccc:ddd>yyy</ccc:ddd></> } while(constructor);");
tryItOut("return  \"\" ;");
tryItOut("let(__iterator__, ({ __count__: ({ __proto__: [[({ __iterator__: ({ __iterator__: constructor }), __iterator__: ({ prototype: prototype, prop: __iterator__ }) })], , , new *::*], prototype: new (false)(4., <x/>) }), __count__: ({ __parent__: __iterator__, prop: ({ prototype: ({ __proto__: [] }) }) }) }) = [, __iterator__, ]) { prop = __noSuchMethod__;");
tryItOut("/*for..in*/for(let [prop, __parent__] = <x><y/></x> in [,,]) <><x><y/></x></>;\nwith(({__parent__: #1#.propertyIsEnumerable(\"prop\"),  set __proto__(__iterator__, __noSuchMethod__)++<x/> }))__proto__\n");
tryItOut("/*for..in*/M:for(__proto__(window) in (([1,2,3,4].map)(<><x><y/></x></>()))){__count__ = false, __count__ = __proto__\n { yield [, , ] = {constructor; } }  }");
tryItOut("for(let y in [5,6,7,8]) yield ({ __parent__: __proto__ }) = 3/0 < this;");
tryItOut("/*for..in*/M:for(let [__parent__, __iterator__] = ([null].map(({}).__lookupGetter__)) in <><x><y/></x></>) {throw __iterator__; }");
tryItOut("/*infloop*/do {prop = null, prop = <><x><y/></x></>;let __count__, prototype = <y><z/></y>; } while(5.0000000000000000000000);");
tryItOut("L:switch(__proto__ = 'fafafa'.replace(/a/g,  '' ).constructor =  /x/ .hasOwnProperty(\f\"__proto__\")) { case  /x/g : break; {}\nreturn <x><y/></x>;break; default: /*infloop*/L:for(prototype; undefined.__defineSetter__(\"__parent__\", function(q) { return q; }); (<><x><y/></x></>--)) ;case ([15,16,17,18].filter('haha'.split, <x><y/></x>(window).__defineSetter__(\"constructor\", <x><y/></x>))): /*for..in*/M:for(const __noSuchMethod__ in undefined) {};break; case this.__defineGetter__(\"__count__\", <y><z/></y>): yield;break; case 8: var constructor;__proto__ = __noSuchMethod__, constructor;break;  }");
tryItOut("if(<y><z/></y>) {export *; } else  if (<x><y/></x>) yield;");
tryItOut("__noSuchMethod__ = <x><y/></x>");
tryItOut("if(([11,12,13,14].filter for (__count__ in window) for each (prototype in <x/>))) { if ((#2=({__parent__: x::__parent__.__proto__}).__defineGetter__(\"prototype\", ('fafafa'.replace(/a/g, ({}).hasOwnProperty))))) /*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>)  else {__proto__;throw window; }}");
tryItOut("/*for..in*/for(const function::__iterator__ in 1e4) ;");
tryItOut("try { this.zzz.zzz; } catch(__noSuchMethod__) { this.zzz.zzz; } finally { with({}) { __noSuchMethod__ =  /x/g , __count__ = <><x><y/></x></>; } \f } \n");
tryItOut("/*infloop*/for(prototype; [({ get __iterator__ __proto__ () { yield <x/> } //h\n, __proto__: __iterator__ })]; [15,16,17,18].filter(function  __count__ (__count__, __iterator__) { return <x/> } , <x><y/></x>)) {gc(); } const __count__;");
tryItOut("/*infloop*/M:for(constructor = (prop.eval( \"\" )); (((function () { yield  ''  } )()).yoyo((<x><y/></x> ? <><x><y/></x></> : 0x99))); [window.yoyo(this)].some(new Function)) null;");
tryItOut("let(({ __parent__: __proto__, __count__: __iterator__ }) = [1,,], constructor = typeof @foo) ((function(){__proto__ = __iterator__})());");
tryItOut("const prototype = 4.;\nconst __count__ = window, __proto__ = window;\n");
tryItOut("switch(3/0 |= (-1) | eval(\"1e+81;\",  { yield; } )) { case 2: break; default: case (p={}, (p.z = null)()): break;  }");
tryItOut("if(({ prototype: prop, __parent__: __proto__ }) = ('fafafa'.replace(/a/g, Math.pow))) { if ((())) {if([1,,]) {let <x><y/></x>, constructor getter: __count__;let \t__proto__; }1e+81; } else {if( /x/g ) {throw <y><z/></y>;gc() } else  if ([[1]]) {continue L; }export __proto__; }}");
tryItOut("prop = prop;");
tryItOut("return; const __proto__;");
tryItOut("with({}) { yield; } ");
tryItOut("/*infloop*/L:do {with(this){export *;<y><z/></y>; }gc() } while([constructor].sort(Math.pow));");
tryItOut("/*for..in*/for(const __count__ in <x/>.watch(\"prop\", Math.sin).__proto__ = (__proto__ for each (__count__ in false))) {const prototype = *, __parent__ = window;continue ; }");
tryItOut("while((new (__proto__[window])(undefined, (#3={a:#3#}.__lookupSetter__(\"prototype\")))) && 0)o");
tryItOut("prototype:  /* Comment */0 /= __iterator__");
tryItOut("M:switch(<x/>) { case 6: break;  }");
tryItOut("var constructor = <x/>;");
tryItOut("if(<><x><y/></x></>) return; else  if (window) {break ; } else {}");
tryItOut("while(((eval(\"yield;\", undefined))) && 0)/*infloop*/\fL:do (new Function(\"return <x/>;\")) while( '' );");
tryItOut("while((1e-81) && 0)export *;/*for..in*/L:for(var __parent__ in ((Function)( /* Comment */new Exception()--)))let __count__ = window\n\n");
tryItOut("(<x/>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (null\n) in constructor = 'fafafa'.replace(/a/g, function(y) { yield y; {}; yield y; })) (4.);");
tryItOut("switch(window) { case this: break;  }");
tryItOut("with({__iterator__: yield ({})}){with({__proto__: (this.__defineSetter__(\"prototype\", ({}).hasOwnProperty))}){ } }");
tryItOut("/*for..in*/for(var prototype = Array(<!--yy-->) in (p={}, (p.z = new RangeError())())) {}");
tryItOut("with({__count__: null.hasOwnProperty(\"constructor\")}){throw window; }");
tryItOut("/*for..in*/L:for(constructor//h\n = (constructor) in __proto__.__noSuchMethod__ = <y><z/></y>) {yield window; }");
tryItOut("M:switch((prototype|=0.1--)) { default: case 2: (<x><y/></x>);break; /*infloop*/M:for(constructor; this; <x/>) const __parent__ = <x><y/></x>;break; case function(q) { return q; }(): return <y><z/></y>;break;  }");
tryItOut("this.zzz.zzz;");
tryItOut("L:with(new (<x/>)( \"\" ).__lookupSetter__(\"__proto__\")){if(*::*) {continue ; } else export *;continue M; }");
tryItOut("/*infloop*/do {;let __count__ = __count__; } while(\ttrue - prop);");
tryItOut("return;");
tryItOut("M:with({__proto__: __noSuchMethod__%=<x/>})[[1]];");
tryItOut("M:if((function(id) { return id }.__lookupGetter__(\"constructor\"))) {export *;export __count__; } else {var constructor;let __proto__; }");
tryItOut("/*infloop*/for(__parent__; <y><z/></y>; <x><y/></x>) yield true; const __iterator__;");
tryItOut("if(({ constructor: __proto__ }) =  /x/g try { yield (false = <x><y/></x>); } catch(__noSuchMethod__) { return; } finally { let(__iterator__) { prototype, __noSuchMethod__ = null; }  for each (constructor in *::*)) yield; const constructor; else {\treturn\n; }");
tryItOut("let (({ constructor: prop, __parent__: ({ __iterator__: ({ prototype: ({ constructor: __count__ }) }) }) }), constructor =  /x/ ) { prop = __count__; }");
tryItOut("__parent__ = constructor;");
tryItOut("/*infloop*/for(const constructor; (-([11,12,13,14].filter.__defineGetter__(\"__parent__\", (this).__defineSetter__))); eval(\"(5.0000000000000000000000 for (__noSuchMethod__ in <><x><y/></x></>))\", yield window)) const __count__ = <x><y/></x>, __iterator__ =  '' ;");
tryItOut("L:while(() && 0)continue M;");
tryItOut("prop = __proto__;");
tryItOut("M:switch(new (<x><y/></x> <<= <x/>)(__parent__ = <y><z/></y>).__count__ = --false) { case ++4.: case ((uneval( ''  , <x>\f<y/></x>))) | (this.__lookupSetter__(\"constructor\")):  }");
tryItOut("let (prototype, __noSuchMethod__) {  }\n{with(<x><y/></x>){M:with({__proto__: null//h\n})return; }continue ; }\n");
tryItOut("return;");
tryItOut("let(__parent__, __count__ = (({})[<y><z/></y>])) ((function(){throw StopIteration;})());");
tryItOut("for(let y in []);");
tryItOut("if(window.valueOf(\"number\")) gc() else  if (prop.__defineGetter__(\"__noSuchMethod__\", ( /x/g ).__defineSetter__)) export prototype; else {return; }");
tryItOut("/*infloop*/for(__proto__.prototype; <y><z/></y>.__lookupGetter__(\"__count__\"); prototype.__proto__ getter= gc) let __parent__;");
tryItOut("export *;\ncontinue ;\n");
tryItOut("try { try { return; } catch(x::__proto__ if (function(){__proto__ = prototype;})()) { try { {} } finally { return; }  } catch(__parent__ if (function(){this.zzz.zzz;})()) { __parent__.__proto__ = prop; } catch(prop) { try { let __proto__ = #1#; } catch(__parent__) { ; } finally { export *; }  }  } catch(constructor) { let(__proto__) {  /x/ ; } ");
tryItOut("/*infloop*/for(let __proto__; (([15,16,17,18].some(gc, <x><y//h\n/></x>.(<x/>))) || new (__noSuchMethod__)()); \f((function  __count__ (__iterator__) { let __iterator__ =  /x/ ; } )(({ __parent__: __count__ }) = __count__.__lookupSetter__(\"__noSuchMethod__\"), this.zzz.zzz\t))) {/*for..in*/L:for(let __noSuchMethod__ in 1e+81) export *; }");
tryItOut("/*for..in*/for(let __count__ in ((function ()*::*)(<x><y/></x>))){}");
tryItOut("/*infloop*/for(const constructor; <x/>; <x><y/></x> === <><x><y/></x></>) let , __parent__;");
tryItOut("export prototype;\ncontinue L;\n");
tryItOut("break M\nreturn;");
tryItOut("/*for..in*/for(const [prop, __proto__] = 1e4 in *) {; }");
tryItOut("export __count__;");
tryItOut("yield __parent__; const __parent__;");
tryItOut("throw this\n*;");
tryItOut("let () { (__count__); }\n");
tryItOut("/*for..in*/for(var [[, __proto__, prop]] in [*::*].filter((window).watch)) export *\n");
tryItOut("with(__count__.__iterator__ setter= 'haha'.split){throw null;null; }");
tryItOut("/*for..in*/for(constructor = [11,12,13,14].some in ({a2:z2})) yield");
tryItOut("let (constructor, __iterator__ = <y><z/></y>) { return; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("return;");
tryItOut("\nthrow *;");
tryItOut("/*for..in*/L:for(let __proto__ in 'haha'.split) {(false); }");
