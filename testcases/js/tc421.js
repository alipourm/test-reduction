tryItOut("if((((<y><z/></y>)([1])))[__proto__.*]) if(1.2e3) {; } else  if (<x><y/></x>) {yield; } else { }");
tryItOut("/*infloop*/for(let __parent__; @foo; 0) {yield; }");
tryItOut("if( /x/  !== window--) {break M;prop =  '' ; } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) ");
tryItOut("/*infloop*/for(const [, prototype, __noSuchMethod__, , [({ __proto__: __iterator__ }), , , __parent__]] = !<x><y/></x>; (([15,16,17,18].some(/a/gi, <x/>)) if (<x><y/></x>)); 0.__defineGetter__(\"prop\", gc)) (5.0000000000000000000000);");
tryItOut("{__count__ = __parent__do {;return 0.1; } while((0/0) && 0); }");
tryItOut("if(prototype.__iterator__) prop = <x><y/></x>, __noSuchMethod__ = 1e-81;\f else  if (null.eval(<y><z/></y>)) const prototype = ({a2:z2});");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in *) {if(( '' )) { if (prototype = <x><y/></x>) {return; } else /a/gi}<x><y/></x>; }");
tryItOut("constructor = prototype;");
tryItOut("{{}/a/gi }");
tryItOut("/*for..in*/M:for(__count__ = this.__defineSetter__(\"__parent__\", function  __proto__ (__parent__) { export *; } ) *= (*::* for (undefined in 3/0)) in (({ __count__: [, prototype, __parent__], prototype: ({ prototype: \n__count__ }) }) = constructor)) return;");
tryItOut("{__noSuchMethod__, constructor/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__, __count__ = this['__noSuchMethod__'] in ( \"\" .watch(\"__count__\", ({}).hasOwnProperty))) (true); }");
tryItOut("if(033) { if ((null ? null : <y><z/></y>) > let (prop) this) {{}\nexport prop;\n } else throw [];}");
tryItOut("if(false) {throw <><x><y/></x></>;yield <y><z/></y>; } else  if (<x><y/></x>) yield  /x/ ; else this;");
tryItOut(";");
tryItOut("/*infloop*/for(prop; prototype = __iterator__.prop; __parent__.__parent__ = #0= '' ) {return; }");
tryItOut("if(([] % function(id) { return id })) /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in *) yield null; else  if (__parent__-=<x><y/></x>) {constructor, prop; } else return *::*;");
tryItOut("with(<><x><y/></x></>)export *;");
tryItOut("L:if((({__proto__: new *(undefined) }) === +*::*)) {if(*.valueOf(\"number\")) {((new Function(\"(this);\"))).apply{} } }");
tryItOut("throw prop;");
tryItOut("throw StopIteration;let (__parent__ =  ''  += this) { export __parent__; }");
tryItOut("{return  \"\" ;export *; }");
tryItOut("yield (({__count__: *.prop = <><x><y/></x></> }));");
tryItOut("M:if(((yield 033))({}.eval(@foo).__lookupSetter__(\"try { __parent__ = 0.1; } catch(__proto__) { {} } finally { return true; } \"))) { if (<><x><y/></x></>.__proto__ = (gc)()((new prototype.propertyIsEnumerable(\"1.3\")))) {/*infloop*/while(*::*)__parent__, -= = 033; }} else {if(__iterator__.__proto__)  else L:if(3) [z1,,] else  if (constructor) try { /*for..in*/M:for(let [prop, __count__] = constructor in 1e-81) \t{yield true;yield; } } catch(__iterator__) { this.zzz.zzz; } finally { try { __proto__ = prototype; } finally { x::__count__ = __proto__; }  }  }");
tryItOut("{var prototype = <><x><y/></x></>;export *; }");
tryItOut("let(__noSuchMethod__, prototype = this) ((function(){var __proto__, prop = [,,z1];})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in *::*) {(__noSuchMethod__);yield *; }");
tryItOut("return  \"\" ;");
tryItOut("while((__parent__ = ([15,16,17,18].some(function (prop, __proto__) { ; } , new (*)(<x><y/></x>)))) && 0)gc()");
tryItOut("/*for..in*/for(var [__parent__, __iterator__] = (#2=3.141592653589793++) in this.__defineGetter__(\"__proto__\", ((new Function(\"let prototype = <x/>, prop;\"))).apply)) {/*for..in*/for(const [prototype, __iterator__] = ('fafafa'.replace(/a/g, this).isPrototypeOf(((1 for (x in []))).call( \"\" , this) ?  \"\" \n : prototype)) in (uneval(true))) {let prop;__proto__, __noSuchMethod__; } }");
tryItOut("yield  /* Comment */<x><y/></x>.*;");
tryItOut("if(0x99 < x::prototype) {export *; } else  if (((function(y) { yield y; return;; yield y; }())[#1=[#1#].valueOf(\"number\")].yoyo(((((@foo).watch).call).call((__iterator__)(5.0000000000000000000000, this),  /x/g .*))))) if((-0)) {var x::constructor =  set prop constructor (__parent__, prop)<x><y/></x>;; } else while((<x><y/></x>.function::__parent__%=<><x><y/></x></> /  \"\" ) && 0)M:switch(prop) { case 1: return\nyield;break;  }");
tryItOut("return;");
tryItOut("/*infloop*/for(var ({ prop: __iterator__, __count__: __parent__ }) = prototype; new (function ([y]) { })()(1e81); __proto__ = null) {/*for..in*/M:for(let [prototype, __proto__] = function(id) { return id } in false) __proto__ = prototype, prototype; }__proto__ = *::*;");
tryItOut("with({constructor: (new ((new Function(\"continue ;\")))())})continue ;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ __parent__: ({ __iterator__: __proto__, prop: __noSuchMethod__ }) }) }) = (((__iterator__) = (__parent__ =  \"\" )).prototype = *); (__parent__ =  /* Comment */prop = __parent__); <y><z/></y>.__lookupGetter__(\"prop\")) ;");
tryItOut("M:with( '' ){;yield; }");
tryItOut("with(this.__defineGetter__(\"constructor\", (window).watch))/*for..in*/M:for(const constructor = prop.__parent__ = this in this) (gc());");
tryItOut("/*for..in*/for(let __parent__ in ((eval)([<y><z/></y>])))break ;\t");
tryItOut("M:if((__count__ ? <y><z/></y> : [])) {gc() } else {if(0x99) export __count__; }");
tryItOut("{}\nreturn");
tryItOut("prop = #;");
tryItOut("L:if(this.__defineGetter__(\"<><x><y/></x></\\t>\", [1,2,3,4].slice)) {export prop; }");
tryItOut("/*infloop*/for(const __proto__; (uneval(__proto__)).__lookupSetter__(\"prop\"); ('fafafa'.replace(/a/g, eval))) {let(__count__, __iterator__) ((function(){(({}));})()); }");
tryItOut("/*infloop*/while(__parent__ = <x><y/></x>){var constructor = <><x><y/></x></>;var prop = <y><z/></y>; }");
tryItOut("{do {throw window;return; } while((<x/> , <x/>) && 0);return (!0.isPrototypeOf(<y><z/></y>)); }");
tryItOut("/*infloop*/M:do {export *; } while(<x><y/></x>);\ndo continue ; while((window) && 0);\n");
tryItOut("/*infloop*/L:for(<><x><y/></x></> @  /x/g ; this.__defineGetter__(\"__iterator__\", 0.1); <><bbb xmlns=\"null\"><x><y/></x><!--yy--></bbb></>) gc()\ntry { export *; } catch(__count__ if prop) { yield; } catch(__count__ if __parent__) { export *; } catch(__iterator__ if *) { gc() } catch(__proto__ if (function(){<x/>;})()) { break ; } catch(__noSuchMethod__) { export __iterator__; } finally { export __iterator__; } ");
tryItOut("const __count__;");
tryItOut("yield yield ;");
tryItOut("this.zzz.zzz;");
tryItOut("(undefined);");
tryItOut("/*infloop*/L:while(<y><z/></y>){export *; }");
tryItOut("/*for..in*/for(const prop =  /* Comment */<><x><y/></x></> in <><x><y/>\t</x></>) {yield; }");
tryItOut("{return;return [,,z1]; } const prototype;");
tryItOut("{do {throw this\nyield; } while((<><x><y/></x></> << <x/>) && 0);/*infloop*/for(let constructor = ( '' .valueOf(\"number\") for (__noSuchMethod__ in window) if ([,,])) ? ([, __proto__, __noSuchMethod__, __noSuchMethod__] = [, __proto__, ]) : <xxx {\t__noSuchMethod__}={<><x><y/></x></>} />; 1.3; <x/>) {; }\n }");
tryItOut("/*infloop*/for(prototype;  /* Comment */(uneval(0/0)); __parent__ = <y><z/></y>) with({prop: (({ get __count__ __count__ () { export *; } , prop: @foo }))})/*infloop*/M:do  /x/ ; while([,]);");
tryItOut("if((yield  '' )) { if ((__proto__ = window.__lookupGetter__(\"prop\"))) {export *;/*infloop*/for((-3/0 % this);  /* Comment */-0; (<x><y/></x>.(false))) throw true; }} else {/*infloop*/L:do *::*; while(<><x><y/></x></>); }");
tryItOut("with({}) yield new (<><x><y/></x></>)();");
tryItOut("/*for..in*/for(let __iterator__ in (((new Function(\"let (__count__ = this) { export __count__; }\")))(<y><z/></y>)))return <><x><y/></x></>;");
tryItOut("if(prop.__count__.yoyo((function  prop (prototype) { new Function } ((-1), *::*)))\n) {{}/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__.prop in <x><y/></x>) {continue ;__count__ = <y><z/></y>; } } else  if ( \"\" ) export *;");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("/*infloop*/for(var __count__; (<x/>.__defineSetter__(\"prototype\", ({}).hasOwnProperty)); [1,,] ^ (-1)) \nbreak ;");
tryItOut("return;");
tryItOut("/*for..in*/for([({ false: ({ __parent__: constructor, __parent__: __iterator__ }), constructor: ({ constructor: __proto__, prop: __parent__ }) }), constructor] = yield (constructor .. undefined) in (-0)) {var prototype, __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in (this.__defineSetter__(\"__count__\", Math.pow))) {yield;if( /x/ ) { if (<y><z/></y>) \f{prop, __count__;throw  \"\" ; }} else {throw __parent__; } }");
tryItOut("try { (prop in  '' ); } __count__finally { this.zzz.zzz; } ");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in <><x><y/></x></>) {}");
tryItOut("if(<x><y/></x> << <y><z/></y>) { if (*.valueOf(\"number\") ^ __proto__.__iterator__ setter= function(y) { yield y; export *;; yield y; }) {export __proto__;; } else continue L;}");
tryItOut("M:do with(( /x/ )(*::*)){prototype;yield prop; } while((prototype.constructor = undefined) && 0);");
tryItOut("try { throw prototype; } catch(__noSuchMethod__ if [*\r for each (__proto__ in window)]) { let(__proto__) { __iterator__(<x><y/></x>) = __count__; } finally { __count__ = __count__; } ");
tryItOut("/*infloop*/do yield (@foo > *::*); while(<xxx>{prototype}</xxx>.(()));");
tryItOut("/*infloop*/L:for(constructor = (<bbb xmlns:ccc=\"(function (__count__)null)(*::*, <x><y/></x>)\"><ccc:eee></ccc:eee></bbb>.([({ prop: __parent__, __iterator__: __iterator__ }), ({ prop: prop })] = <x><y/></x> | @foo).watch(\"[prototype]\", [15,16,17,18].map(0/0, false))); this.prop(arguments && 033, <x><y/></x>).__proto__ = new (<x/> ? 033 : this)((<><x><y/></x></>.((\n*::*))), <x/>); let (__noSuchMethod__ = window, __count__ = @foo) __proto__.hasOwnProperty(\"constructor\")) {throw [1,,]; }");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("{ { return true }  }");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("with(<y><z/></y>)throw  /x/ \t;");
tryItOut("try { ( '' ); } catch(__iterator__) { let __noSuchMethod__ = function ([y]) { }, __count__; } ");
tryItOut("if(x::__iterator__) {/*for..in*/for(let __count__ = (<y><z/></y> < @foo) in {}) {function  constructor () {  /x/g ; }  }return; } else  if (<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in [[1]]) {const prototype = 3/0, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("L: do {return; } while(({} &= <x><y/></x>) && 0);");
tryItOut("with((((__proto__ = constructor) >>>=(yield <><x><y/></x></>)) >= @foo))export *;");
tryItOut("/*for..in*/for(const prop in ((eval)(undefined)))/*infloop*/M:for(var __parent__; <><x><y/></x></>; <x><y/></x>) export prop;");
tryItOut("this.zzz.zzz;");
tryItOut("L:with(false){/*infloop*/for(prototype; *::*; prop) gc()/*infloop*/for(const prototype; @foo; new Object()) return null; }");
tryItOut("/*infloop*/for(var __proto__ = <{__count__}><!--yy--></{__count__}>; <x><y/></x>; [z1,,] >> @foo) yield *::*;");
tryItOut("/*for..in*/for(const __proto__.__parent__ in ((((window)\n))(/a/gi())))*;");
tryItOut("while(((//h\n(<x/>)())) && 0){while((constructor) && 0)return;return  '' ; }");
tryItOut("var prop");
tryItOut("Math.pow/*\n*/\n");
tryItOut("M:if(window) {let (__parent__, __proto__ = <x/>) {  } } else if((-1 ? true : #1=[#1#])) { if (window.__defineGetter__(\"__noSuchMethod__\",  \"\" )) {return;{} } else {yield <y><z/></y>; }\t}");
tryItOut("if(((((<x><y/></x>)(3.141592653589793.constructor =  \"\" ))).call).call((([1,2,3,4].map).call(__count__.__proto__, this.__defineGetter__(\"prototype\", (0.1).watch), 1e+81) ? ({__count__: [1,,] }).yoyo(__proto__%=<x><y/></x>) :  \"\"  |= *), ({ constructor: __count__ }) = *::*.__defineGetter__(\"constructor\", Function), __noSuchMethod__.*)) throw [[1]];");
tryItOut("constructor = __iterator__;");
tryItOut("/*for..in*/L:for(var constructor = <x/> in *::*) var prop = <><x><y/></x></>, prototype = *::*;");
tryItOut("if( /* Comment */<><x><y/></x></>) {constructor = window;/*infloop*/do *::*; while(__proto__.__noSuchMethod__ getter= Math.pow); }");
tryItOut("break L;\nconst prototype = false;\n");
tryItOut("/*infloop*/for(var (/*\n*/{ __iterator__: [__count__, prop, ], set: ({ prototype: constructor }) }) = (prototype = window); <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (this ? * : each)) {constructorvar __proto__;let prototype; }");
tryItOut("switch(<><x><y/></x></>) { case 9: break;  }");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, \tconstructor] = (__iterator__ === ({ __count__: let }) = [1,,](@foo, <><x><y/></x></>)) in __noSuchMethod__ = (new 1e4())) if(<ccc:ddd>yyy</ccc:ddd>) { if (__noSuchMethod__.(!undefined)) {yield null; } else const prototype = @foo;}");
tryItOut("/*infloop*/for(var __parent__; (yield -3/0).propertyIsEnumerable(\"function::constructor\"); String()) throw undefined;with(<x><y/></x> * <x/>)var x::__noSuchMethod__, prop = undefined;");
tryItOut("while((this.__defineSetter__(\"__count__\", ({}).hasOwnProperty)) && 0){/*for..in*/for(var [__parent__, __proto__] = <y><z/></y> in <><x><y/></x></>) export *;with({__proto__: constructor})gc() }");
tryItOut("M:if(<x/>.isPrototypeOf(<y><z/></y>)) { if () {; } else {/*for..in*/M:for(var __parent__ in ((/a/gi)(0x99)))let constructor = window;return [,]; }}");
tryItOut("with({__iterator__: undefined}){const __noSuchMethod__ = true; }");
tryItOut("/*infloop*/for(<><x><y/></x></> % .yoyo((!(yield (uneval(this))))); (yield 1e4) @ __noSuchMethod__ ^= prop = [z1];  /* Comment */(+new Function())) /*for..in*/for(var function::__noSuchMethod__ in <><x><y/></x></>) {yield; }");
tryItOut("do {throw <y><z/></y>;break L; } while((#1= '' ) && 0);");
tryItOut("do {/*for..in*/for(__noSuchMethod__ in this) let  /x/ , __proto__ = <x/>; } while(( /x/g ) && 0);");
tryItOut("L:if([] = (__noSuchMethod__)) {yield prop; }");
tryItOut("[1,2,3,4].map.prototype = __parent__;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = <x><y/></x>; 0.1; <x><y/></x>) {{} }");
tryItOut("/*infloop*/for((<><xxx>{__parent__}</xxx></>.throw(<x/>)); ((3 *= <x><y/></x>).__noSuchMethod__ = @foo.hasOwnProperty(\"prop\").__defineGetter__(\"__parent__\", eval)); (uneval(<><x><y/></x></>))) ;");
tryItOut("return\n/*for..in*/for(const (( '' )[undefined])['__noSuchMethod__'] in ((((window['__count__'])).call)(({window: prop = <x><y/></x> }))))if(4. -= <><x><y/></x></>) { if (true) (<y><z/></y>); else {yield <x><y/></x>; }}");
tryItOut("for(let y in [5,6,7,8]) with({}) { yield; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in yield (prototype = <x/>)) {yield {}; }");
tryItOut("if(constructor.prop) {{/a/gi<y><z/></y>; } } else  if (false) {yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = function(id) { return id } !== arguments in (eval(\" \\\"\\\" .isPrototypeOf(@foo)\", (__iterator__ = (-0))))) /*for..in*/for(let ((4.)(constructor)) in (<x><y/></x>.__lookupGetter__(\"__count__\"))) return window;");
tryItOut("let ({}).hasOwnProperty, __parent__");
tryItOut("/*for..in*/for(let [prototype, constructor] = (undefined.constructor-=this.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })) in [11,12,13,14].sort()) *::*");
tryItOut("if(<y><z/></y>) { if (__iterator__ ? <y><z/></y> : function (__noSuchMethod__, __noSuchMethod__)__iterator__ ? *.watch(\"prototype\", ([,,z1]).__defineSetter__) : +<><x><y/></x></>) continue ;} else {yield @foo &= <x><y/></x>; }");
tryItOut("/*for..in*/for(var prototype = (new new String(*::*,  \"\" )()) in __count__ = ([,,])[<y><z/></y>]) ;");
tryItOut("with((let (__proto__ = <x/>, __count__ = @foo)  /x/ .hasOwnProperty(\"__noSuchMethod__\")))if(false.__defineSetter__(\"prop\", 'haha'.split)) yield; else gc()");
tryItOut("/*infloop*/for(const ({ __iterator__: [__noSuchMethod__], __iterator__: ({ __parent__: __parent__, __proto__: ({ __count__: ({ __count__: prototype }), __proto__: __iterator__ }) }) }) = (@foo.isPrototypeOf(*::*)); ({ function::constructor: __parent__ }) = prop = false; (prototype.((p={}, (p.z = ({__proto__: undefined}))())))) for(let y in []);");
tryItOut("if( /x/  .. this.__lookupSetter__(\"prototype\")) /*for..in*/for(let  \"\" ['constructor'] in true) __iterator__ else  if (prototype(prototype.(<x/>), <><x><y/></x></>)) {return;/*infloop*/for(const prop = (<x/>.__lookupGetter__(\"prototype\")); eval(\"gc()\",  \"\" ); gc(<x><y/></x>, [z1,,])--) {{}/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in *::*) let __count__; } }");
tryItOut("@foo");
tryItOut("/*for..in*/for(const prop in ((({ __proto__: __count__ }) = prototype)(({prototype: false || 1e+81, constructor getter: (1 for (x in [])) }))))/*for..in*/L:for(__proto__ =  \"\"  in #1=[#1#]) return  /x/ ;");
tryItOut("if(((-0)\n)) { } else  if ((<bbb xmlns=\"(window.__defineSetter__(\"prop\", function(q) { return q; }))\"></bbb>.isPrototypeOf(true !== export __parent__;).prototype = (*.__noSuchMethod__).yoyo(({__noSuchMethod__: [,] })))) let __iterator__ =  get __iterator__() { export *; } ; else {(Math.sin).call }");
tryItOut("switch((<><x><y/></x></>).__defineSetter__(<x><y/></x>)) { case 5: /*infloop*/for([,,z1]; (new Array(0x99)); []) var function::__proto__;break;  }");
tryItOut("const __proto__;");
tryItOut("/*infloop*/for(const \t__iterator__ = new let (prop = window, __count__) ([11,12,13,14].filter); ([false]); (Error((#1=({__noSuchMethod__: __noSuchMethod__})), (null)[this]))) {; }");
tryItOut("{{{{const __noSuchMethod__ = <x><y/></x>, __parent__; } } } }");
tryItOut("throw __noSuchMethod__;");
tryItOut("with({__count__: ({ set __parent__ __parent__ (__count__) { return ((<><x><y/></x></>.__lookupSetter__(\"prototype\")).throw()) }  })}){export *;gc() }");
tryItOut("/*for..in*/M:for(var [__iterator__, __proto__] = (\t<y><z/></y> ? [] : this.eval(#1=[prop])) in __parent__) {gc()\nvar prototype = , prop = *; }");
tryItOut("with( /x/ ){yield; }");
tryItOut("yield <x><y/></x>.*;");
tryItOut("/*infloop*/for(const __iterator__; this; <><x><y/></x></>) yield;");
tryItOut("/*for..in*/for(let  = <x><y/></x> ? <y><z/></y> : __proto__.yoyo('fafafa'.replace(/a/g, function  __parent__ () { yield <x/> } )) in #1=[#1#](@foo, <y><z/></y>)) let __parent__\n");
tryItOut("if([z1,,] .. *::*.__lookupSetter__(\"__proto__\")) {yield; } else {;\nyield;\n }");
tryItOut("/*infloop*/for(({ constructor: ({ __proto__: [], prototype: ({ __parent__: <x><y\f/></x>, __noSuchMethod__: prototype }) }) }) = (__parent__ = try { yield; } catch(default: yield;case window: (*::*);case 7: case 1: <x/> if let (constructor, __noSuchMethod__) (window)[this]\f) { return; } catch(__parent__ if (function(){this.zzz.zzz;})()) { throw @foo; } catch(constructor) { \fthrow prop;//h\n } ) <<=  '' ; ( /* Comment */(function ([y]) { })() << ((/a/gi).call(0x99, ({}), 0/0))); __noSuchMethod__ = <><x><y/></x\t></>) {(0x99); }");
tryItOut("with(({__parent__: (3 in prototype)}))yield;");
tryItOut("/*infloop*/do {export __parent__\n__noSuchMethod__, prop; } while([11,12,13,14].map);");
tryItOut("{}[z1,,]\n/*for..in*/for\f(let __iterator__ = <x><y/></x>.([1]) in prop = ({a2:z2})) {return;\nyield;\n{break L;const set, __proto__ = null; } }");
tryItOut("L: if(eval(\"({a1:1})\",  '' )) {throw  '' ; } else  if (((p={}, (p.z = <x/>)())).throw(__proto__ = __iterator__) == window.__defineSetter__(\"prop\", this).__defineSetter__(\"({ __iterator__: prototype, __proto__: ({ __proto__: prototype, __parent__: constructor }) })\", function(y) { yield y; undefined;; yield y; })) const constructor =  /x/g , __noSuchMethod__ = *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const this.zzz.zzz.__proto__ in (__proto__.((__iterator__ = prototype)))) {yield (window - @foo ^= <><x><y/></x></>--);if(<xxx {constructor}={@foo} />.(<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\"))) { if (~*::*) yield;} else {var __proto__, __parent__ = window; } }");
tryItOut("{return [1,,]; }");
tryItOut("if([15,16,17,18].some(('haha'.split).apply, prop)++) window; else  if (this.__defineGetter__(\"__count__\", <><x><y/></x></>)) const constructor, __iterator__; else {new Function\n{}throw undefined\t; }");
tryItOut("L:switch(((__count__)%=__noSuchMethod__.watch(\"__iterator__\", <x/>))) { default: /*for..in*/M:for(const [__iterator__, __parent__] = eval(\"export *;\", @foo) in  \"\" ) {export __parent__; { yield <><x><y/></x></> }  }break;  }");
tryItOut("{export *;/*for..in*/for((<><x><y/></x></>)(__count__) in  /x/g ) var __iterator__, __proto__ = window; }");
tryItOut("/*for..in*/for(prototype = prop in false) {return; }");
tryItOut("*;");
tryItOut("return false\nreturn window;");
tryItOut("/*for..in*/for(var yield in ((function(y) { yield y; yield <><x><y/></x></>;; yield y; })( '' .__proto__ = new (false)(1.3)))){export __parent__;let (prototype) { export __proto__; } }");
tryItOut("yield;\n(false);\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in  \"\" ) {gc() }");
tryItOut("M:if(<x><y/></x>) ;");
tryItOut("if((this.zzz.zzz).eval(<x/> > <y><z/></y>.unwatch(\"__noSuchMethod__\"))) return <x><y/></x>;");
tryItOut("/*infloop*/for(const __iterator__; __noSuchMethod__ =  /x/g  ||  '' .__lookupSetter__(\"prototype\"); [prop =  ''  for (__noSuchMethod__.constructor in __proto__) for (__noSuchMethod__ in this)]) yield function ([y]) { };");
tryItOut("M:while((let (constructor = <x><y/></x>, __iterator__ = 1e+81) 3.141592653589793) && 0){throw null;\fbreak M; }");
tryItOut("/*for..in*/for(var __count__ in *::*.isPrototypeOf(((0 >>> this))[(this.__defineSetter__(\"__noSuchMethod__\", Math.pow))])) {{if(@foo) {continue L;yield @foo; } } }");
tryItOut("let(({ __count__: ({ prototype: prototype }) })) { throw __iterator__;");
tryItOut("M:if(__noSuchMethod__ = ({ function::__count__: __iterator__ })) gc() else const __parent__ = [[]], constructor;");
tryItOut("/*for..in*/for(((([])() for (__parent__ in <x/>)))(--\n<x><y/></x>) in (@foo != {} instanceof <y><z/></y>.valueOf(\"number\"))) {yield; }");
tryItOut("prop");
tryItOut("export __noSuchMethod__;");
tryItOut("let (__count__ = <><x><y/></x></>) { break ; }\n");
tryItOut("/*infloop*/M:for(__proto__ = (this >>> <><x><y/></x></>); ([1,2,3,4].map).call = #3={a:#3#}; window ? *::* : <x><y/></x>) {1e4 }");
tryItOut("if(prototype = <y><z/></y>.__lookupGetter__(\"__iterator__\")) (<x/>).watch else  if (prop = (1.2e3 >>> *::*)()) {if(<x/>.throw(1e4)) { if (__noSuchMethod__.constructor) {{} } else export __parent__;} } else {try { export __iterator__; } catch(constructor if (function(){export *;})()) { yield this; } finally { var __parent__ = undefined, prototype = null; } ( \"\" ); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((#2=({\f__parent__: yield  '' })) in  /x/ ) {export *;{} }");
tryItOut("/*for..in*/for(__parent__ = @foo <<= 3 in <><x><y/></x></>) var __parent__ = <x/>, __proto__;");
tryItOut("prop = ({}); const __iterator__; const __count__");
tryItOut("while((constructor) && 0)(<x><y/></x>);");
tryItOut("with({__noSuchMethod__: (void ())})[,,];{}");
tryItOut("/*infloop*/for(((undefined).apply)([[]]); ( /x/  |  /x/ ); ( /* Comment */0x99)) {return <><x><y/></x></>; }");
tryItOut("with({}) for(let y in [5,6,7,8]) let(prop = (__iterator__.__noSuchMethod__ setter= prop)) ((function(){for(let y in []);})());");
tryItOut("with({}) { throw __iterator__; } ");
tryItOut("/*for..in*/for(let __count__ = ( /x/ )() in <x><y/></x>) {}");
tryItOut("with({__noSuchMethod__//h\n: __proto__.([[]].map(/a/gi))}){/*for..in*/for(__parent__ in ((__parent__)\f(__parent__))){(Function).calllet __proto__ = <x><y/></x>; } }");
tryItOut("gc()");
tryItOut("__parent__(__noSuchMethod__) = __iterator__;");
tryItOut("M:with({prop: <x><y/></x>})const __count__, __noSuchMethod__;");
tryItOut("var prototype = window, __noSuchMethod__ = 1.3; const __parent__;");
tryItOut("export *;");
tryItOut("{if((gc))  else  if ((__count__-=true)) yield <y><z/></y>; else {const prop = [1];export *; } }");
tryItOut("/*for..in*/L:for(var [__parent__, function::__parent__] = prop = __noSuchMethod__ = (-3/0.*) in __noSuchMethod__+=[]) (prop = *);");
tryItOut("with\t({prop: undefined}){(<><x><y/></x></>); }");
tryItOut("(__iterator__) = __noSuchMethod__;");
tryItOut("return;");
tryItOut("{/*for..in*/for(var prototype = (<><x><y/></x></> for (__count__ in \t-1)).@foo in {}) /*for..in*/for(let [prototype, __count__] = [11,12,13,14].some in  \"\" ) return @foo; }");
tryItOut("__proto__");
tryItOut("with({prototype: (new this.__defineSetter__(\"constructor\", function  __count__ () { return <x><y/></x>.(<><x><y/></x></>) } ))})/*for..in*/M:for(const [__count__, __parent__] = @foo <= window in <y><z/></y>) throw this;\f");
tryItOut("/*infloop*/for(let [__noSuchMethod__, ({  { yield undefined } : __proto__,  instanceof : ({ __parent__: __noSuchMethod__, constructor: __count__ }) })] = (++<><x><y/></x></>); __proto__.prop; ({ prototype: prototype }) = <x/>.eval(<x><y/></x>)) {const prop = *; }");
tryItOut("L: {with({prototype: [ /x/g ()]}){({ prop: [__count__, prop, ], set: [__parent__, , constructor, __noSuchMethod__] }) } }");
tryItOut("/*infloop*/while((typeof <><x><y/></x></>));");
tryItOut("if(__noSuchMethod__ - this.__lookupGetter__(\"prototype\").eval(<x/>)) {Math.sin } else {L: return; }");
tryItOut("let(constructor) ((function(){yield gc();})());");
tryItOut("try { prop = __iterator__; } catch(__iterator__ if (function(){for(let y in []);})()) { throw __parent__; } catch(function::constructor\r) { with({}) { for(let y in [5,6,7,8]) with({}) { var prototype = get, prop = window; }  }  } finally { /*infloop*/M:for(function(id) { return id }; this; __count__) {export *; }\f } ");
tryItOut("if(__iterator__) {false;continue ; } else  if (<><x><y/></x></>) {(prop); }");
tryItOut("__count__");
tryItOut("while((this.__defineSetter__(\"__parent__\", __parent__ =  /x/ )) && 0)/*for..in*/for(const __iterator__ in  /x/ ) {}");
tryItOut("const __count__, __count__\n(function ([y]) { });");
tryItOut("/*infloop*/for(const __parent__ = <><x><y/></x></>; <x><y/></x>; @foo) {gc() }");
tryItOut("/*infloop*/for(const prop; true; __iterator__) {{return prop;function (__count__, prop) \"\"  } }");
