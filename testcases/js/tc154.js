tryItOut("/*infloop*/do {\fL:with({prototype:  ''  ? true : __iterator__.__lookupSetter__(\"__count__\")})<y><z/></y>; } while((new (false).watch((__noSuchMethod__ for (yield in  '' )), __count__).isPrototypeOf(false.throw(<><x><y/></x></>))[try { constructor = constructor; } finally { throw __iterator__; } ]));");
tryItOut("export *;");
tryItOut("L: {export *; }");
tryItOut("while((<x/>.__defineSetter__(\"__noSuchMethod__\", function ()[z1,,])) && 0)export *;");
tryItOut("(0/0)");
tryItOut("var constructor;\nL: \f{ }\n const __iterator__;");
tryItOut("switch(<y><z/></y>) { default:  }with({__iterator__: @foo})export *;");
tryItOut("export *");
tryItOut("return __noSuchMethod__; const __parent__;");
tryItOut("if(*::*.__noSuchMethod__) { if (#0=[3]) {yield; } else {yield; }}");
tryItOut("{{} }");
tryItOut("let(__noSuchMethod__ = <x/>) { var constructor, __iterator__;");
tryItOut("if( \"\" .__defineSetter__(\"prop\", (new Function(\"export constructor;\")))) {M:with({prop:  \"\" }); const __count__; } else {}");
tryItOut("/*infloop*/M:for(let prototype; __noSuchMethod__; new this( /x/g , __count__)) {__iterator__ = __count__;\n{}\n }");
tryItOut("{yield;gc() }");
tryItOut("__iterator__ = constructor;");
tryItOut("(function ([y]) { });");
tryItOut("let (prop) { switch(*.yoyo(1e+81.__proto__)) { default: yield ('haha'.split(this));break; {}case @foo >>= <x/>: break; case 7: case 0: break;  } }");
tryItOut("continue ;");
tryItOut("L:if()  try { function(q) { return q; } } catch(__noSuchMethod__ if (function(){;})()) {  } catch(constructor) {  } finally { ; } { if (this) /*} else {continue ;throw *; }");
tryItOut("/*infloop*/for(function::constructor; new String(); 'fafafa'.replace(/a/g, ((([,,z1])).watch).apply)) {throw StopIteration; }");
tryItOut("while((yield Iterator()) && 0)let (__noSuchMethod__ = window) { yield @foo; }\n");
tryItOut("/*for..in*/for(var __iterator__ in @foo) const __iterator__ = 1e-81;");
tryItOut("\tconstructor = 1e4, __count__\nvar prop;/*infloop*/L:for(let constructor;  /x/ ; constructor) {(__noSuchMethod__); }");
tryItOut("yield\nexport __count__;");
tryItOut("while((null) && 0);");
tryItOut("/*infloop*/for(let ({ __iterator__: [] }) = (eval(\" ''  + <><x><y/></x></>\", __count__.(<y><z/></y>))); null.propertyIsEnumerable(\"__parent__\"); \n<x><y/></x>++ | [z1].__defineSetter__(\t\"__iterator__\", Function)) {}");
tryItOut("L: {break L; }");
tryItOut("var __iterator__ = this, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((constructor.__parent__ setter= ( /x/g ).__defineSetter__))((__count__%=yyy)) in -1 if ( /x/g )\t) {return <\fx><y/></x>; }\f");
tryItOut("/*for..in*/for(const __noSuchMethod__ =  /x/  in ++*::*) return;");
tryItOut("while((new ( /x/ )()) && 0){/*for..in*/M:for(const __proto__ in true) throw <><x><y/></x></>; } const constructor;");
tryItOut("if((new ((p={}, (p.z = 3 .. window)()).__proto__ = constructor = <><x><y/></x></>)((eval(\"let constructor;\", ({__proto__: false <<= <><x><y/></x></>, constructor getter: (prop).__defineSetter__ }))), ([window] for (__count__.prop in __proto__)try { return <><x><y/></x></>; } finally { gc() } ))).watch\f(\"__proto__\", 3/0))  else  if (#0=[<x><y/></x>]) {/*infloop*/M:for(function::__proto__; <y><z/></y>.@foo; __proto__.__lookupGetter__(\"__count__\")) /*infloop*/for(<x><y/></x>; <><x><y/></x></>; [z1,,]) var __noSuchMethod__; }");
tryItOut("gc()");
tryItOut("M:with((__parent__.(Iterator(<x><y/></x>))) + (__noSuchMethod__ = prop))var __iterator__ = <x/>, constructor = null");
tryItOut("__proto__ = prop;");
tryItOut("/*for..in*/M:for(let constructor in delete) /*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in prototype) *\n/*for..in*/for(const __noSuchMethod__ = (<x><y/></x>) in <x><y/></x>) {throw prop; }");
tryItOut("throw new (<><x><y/></x></>)((-1));");
tryItOut("with({}) for(let y in []);");
tryItOut("constructor");
tryItOut("Functionvar __proto__, __iterator__ = undefined;");
tryItOut("/*infloop*/do [1,2,3,4].slice while(default: return;case 7: const __proto__ = null, __noSuchMethod__;)\nthrow <y><z/></y>;");
tryItOut("{(*);yield; }");
tryItOut("/*infloop*/while(true(__iterator__, [,,])\f){export *;(*::*).__defineSetter__ }");
tryItOut("/*infloop*/for(var __noSuchMethod__; null; (<x/>.propertyIsEnumerable(\"__proto__\"))) \nyield 1e-81;\nvar __iterator__ = ({});\n\n");
tryItOut("/*infloop*/L:for(*; null;  /x/g ) {export *;return window;\t }\n");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/for(let prototype = (~((uneval(window)))); ({ get prototype prototype (__iterator__) { export *; }  }) .@ (undefined /= __noSuchMethod__.(*::*)); this) default: break; ");
tryItOut("export constructor;\nconst prototype, constructor;\n");
tryItOut("M:if(prop) continue L; else {break L\f;yield  '' ; }");
tryItOut("if(window) { if (3/0) gc() else {({}).__lookupGetter__ }}");
tryItOut("do (#3={a:#3#}); while((<x/> <= window.__defineGetter__(\"prototype\", Math.sin)) && 0);");
tryItOut("/*infloop*/for(arguments; true;  /x/g ) {return; }");
tryItOut("{return;continue ; }\n");
tryItOut("prototype = __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */yyy");
tryItOut("return\nprototype = 1.2e3;");
tryItOut("{; }");
tryItOut("L:with(<><x><y/></x></>.watch(\"__parent__\", Function)){yield [,];/*\n*/ }");
tryItOut("if((-0).__noSuchMethod__) ([1,2,3,4].slice).call else {const __noSuchMethod__;get = *::*, __proto__; }");
tryItOut("throw StopIteration;");
tryItOut("if(((Math.pow)(#3={a:#3#}.throw(\twindow),  '' ))) {L: {(undefined).__defineSetter__ }return; } else  if (([z1]--.hasOwnProperty(\"prototype\"))) {/*for..in*/for(__noSuchMethod__ = new 'haha'.split(constructor) in (1.3 ?  ''  : [,])) throw true;if(<x><y/></x>) { if (<x><y/></x>) {; }} else yield; }");
tryItOut("do let __iterator__; while(((null & ([(<x><y/></x>.eval((-0)))]))) && 0);");
tryItOut("export *");
tryItOut("/*infloop*/for(({ set prototype(__iterator__) { yield [11,12,13,14].some }  }); @foo >>> function ([y]) { }; prop.prototype) ");
tryItOut("if(@foo) {throw *::*; } else {const prop;//h\n }\n");
tryItOut("let (__parent__) {  }/*for..in*/for(var constructor =  in true) {if(<x><y/></x>) throw false; else __proto__ }");
tryItOut("return;");
tryItOut("{yield new (<><x><y/></x></>)() = (#2=undefined) >>= <x><y/></x>.(<x/>); }");
tryItOut("{{/*for..in*//* nogeckoex bug 349964 */ for  each(let each in constructor) {return; }export __count__; }<y><z/></y>['__noSuchMethod__'] = set; }");
tryItOut("L:if((<x><y/></x>.unwatch(\"__count__\"))) do {throw *; } while((null) && 0); else {(<><x><y/></x></>); }");
tryItOut("with({__count__: ((this.__defineSetter__(\"__parent__\", Math.pow\f)) if (0.1))}){L:switch(#3={a:#3#}) { default: break;  } }");
tryItOut("do {__count__ } while(((__proto__.propertyIsEnumerable(\"__noSuchMethod__\")++)) && 0);");
tryItOut("/*infloop*/for(let __iterator__ = (1.3.watch(\"__noSuchMethod__\", function  __noSuchMethod__ (\f) { return __parent__ } )); __parent__; (false)(window)) ");
tryItOut("Function(window);");
tryItOut("var constructor\n*");
tryItOut("/*infloop*/while(@foo\r){ }\f");
tryItOut("if(<x><y/></x>) yield @foo;");
tryItOut("with(new <x><y/></x>(true)())\fif(__proto__ = false) {if(<><x><y/></x></>) { if (*::*) {{}export __iterator__; } else {throw __proto__; }} }");
tryItOut("/*for..in*/for(let prop in __proto__) <x/>.prototype");
tryItOut("return;\n/*infloop*/M:for(window; ;  /x/g ) {{}throw __iterator__; }\n");
tryItOut("gc()");
tryItOut("return <y><z/></y>;\nyield ({a2:z2});\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__noSuchMethod__ in Function( /* Comment */<y><z/></y>)) {while(((prototype = window)) && 0)return;L:if( \"\" ) { if (__noSuchMethod__) {__iterator__;1e-81; }} else { /x/ ; } }");
tryItOut(";/*\n*/");
tryItOut("gc()\n");
tryItOut("switch(__parent__) { case 6: (<x><y/>\f</x>.( /x/g )).__defineSetter__break;  }");
tryItOut("return <y><z/></y>;__iterator__;");
tryItOut("L:if([<x><y/><//h\n/x>].watch(\"__iterator__\", Math.pow)[(( /x/  ? <><x><y/></x></> : <x/>) .@x:: Object(prototype))]) { if (null.__lookupSetter__(\"__proto__\")) L: with({prop: ({a2:z2})}){;{} }} else /*infloop*/L:do {/*for..in*/L:for(let __noSuchMethod__ in __count__) ;function  __iterator__ (each, __noSuchMethod__) { yield __parent__ }  } while((yield <x/>\n));");
tryItOut("M:switch(++\t({__proto__: (undefined.*), prototype setter: function(q) { return q; } })) { default: {} }");
tryItOut("if(__proto__ for each (__iterator__ in *::*)) { if ((__proto__.__proto__ getter= function  __parent__ () { constructor; } ).__lookupGetter__(\"__noSuchMethod__\")) {var __noSuchMethod__, __parent__;yield; } else {return; }}");
tryItOut("if(constructor = true) {if(null) { if ((-1)) \t{ }} else export constructor; } else  if (__count__.__count__ = <><x><\fy/></x></>) {/*for..in*/for(const [__noSuchMethod__, prototype] = window in undefined) export prop; } else {switch(this) { default: break;  } }");
tryItOut("/*for..in*/for(let __parent__ = prototype.__proto__ in <><x><y/></x></>) throw 1e4;");
tryItOut("with(eval(\"/*infloop*/M:for(__parent__ = 1.2e3; __parent__; #1=[#1#]) {var x::__noSuchMethod__ = #1#, prototype; }\", null)){yield;/*infloop*/for(this;  /x/ ; <x/>) gc() }");
tryItOut("if() { if ((null % null.__lookupGetter__(\"__proto__\"))) {return __count__; } else {let __proto__, __iterator__\nreturn false; }}");
tryItOut("if(eval(\"([,,z1])[<><x><y/></x></>]\", false.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; ; yield y; }))) var __proto__ =  '' , __iterator__ = *; else __count__ = __count__;");
tryItOut("switch({let __parent__; } = <x><y/></x>) { default: let (__iterator__) { break M; }case 3:  }");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = 0.prototype = __iterator__ in (<y><z/></y> | this if (*))) export *;");
tryItOut("/*infloop*/do {__iterator__;return <x><y/></x>; } while(<><zzz>__parent__</zzz></>);");
tryItOut("continue M;\n(<x/>);\n");
tryItOut("M:with(true)export *;");
tryItOut("do return; while((0.1) && 0);");
tryItOut("if((__parent__ =  /x/ )) {var __iterator__;yield; } else  if (*) * else throw *;");
tryItOut("if(this.__defineGetter__(\"__parent__\", function  __parent__ (prop) { return null } )) var prototype; else \t if ((#2=function ([y]) { }.__iterator__)) {yield  \"\" ; }");
tryItOut("if(<><x><y/></x></>) {(this); } else  if (__count__) {throw setter; } else {{} }");
tryItOut("switch( /x/g .propertyIsEnumerable(\"__count__\")) { default: break; case yield null: break; return 0.1;break; case 4: gc()case (*::* .. 1.3) ? (constructor.__iterator__ setter= [1,2,3,4].slice) : prop = <x><y/></x>: throw false;break; {} } const prop;");
tryItOut("__parent__ = <><x><y/></x></>, prop = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in delete) return  /x/g ;");
tryItOut("/*for..in*/L:for(let prop = eval(\"[__parent__, , , __noSuchMethod__, constructor] = prototype.eval(<x><y/></x>)\", @foo %= *) in ('fafafa'.replace(/a/g, (function  <ccc:ddd>yyy</ccc:ddd> ()<x/>).call(#1#, <><x><y/></x></>))).__defineSetter__(\"constructor\", prop.__proto__ setter= gc)) {{ } }");
tryItOut("if('fafafa'.replace(/a/g, function(q) { return q; })) {yield; }");
tryItOut("L:do /*for..in*/for(const \t__count__ in return *;) {return 5.0000000000000000000000; } while(((null.__parent__ = this.__lookupGetter__(\"__count__\"))) && 0);");
tryItOut("/*infloop*/while(new (prototype)(false)){this;let __iterator__, __proto__ = <x/>\t; }");
tryItOut("break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype.__parent__ in (-1)) {}");
tryItOut("/*for..in*/for(let [, constructor] = ((delete return undefined).__defineSetter__(\"prop\", function(y) { yield y; ;; yield y; })) in this) {__parent__ = constructor; }");
tryItOut("/*infloop*/for(let __count__ = *; undefined; [z1]) {export *;gc() }");
tryItOut("{/*infloop*/for(prototype = prop.(@foo), __count__; (constructor.isPrototypeOf( '' ))\f; (prop = window) :: (__parent__ = *::*)) {throw *::*;/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in prop) continue M; }; }");
tryItOut("/*infloop*/for(each = (033.prototype != 1e4.isPrototypeOf([,,z1])); eval(\"const __noSuchMethod__ = <><x><y/></x></>;\", throw yield;) & constructor = ({ __proto__: __iterator__ }); ({ set __iterator__() { return undefined }  }) >>= prototype = function::__parent__) /*for..in*/for(var [, , __noSuchMethod__, , prototype] in ((Math.pow)(<bbb xmlns=\"<x><y/></x>\"><!--yy--></bbb>.([,])))){function (constructor, prototype) { yield [,]; }  }");
tryItOut("/*for..in*/for(var constructor in ((*::* for (prop in <x/>))(this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in []))))\t))with({__parent__: true}){__proto__( /x/g ); }");
tryItOut("L:if((__count__.prototype)) {} else  if ((new [1,2,3,4].slice((yield __iterator__),  /x/g ).__lookupGetter__(\"__noSuchMethod__\"))) /*infloop*/M:do gc() while(\f*::*);");
tryItOut("if((new (window)()())) {gc() } else  if ((window.prototype)) {[1,2,3,4].map }");
tryItOut("L:while((window) && 0){{}return; }");
tryItOut("if((window for each (prototype in <><x><y/></x></>) if (true))) {return;gc()\n } else  if (window) export *;");
tryItOut("return;");
tryItOut("with({__parent__: }){{}(prototype); }");
tryItOut("if(new (gc)(@foo %= <x><y/></x>)) L:if(this.zzz.zzz) {; } else {return;yield; } else  if ((yield <x><y/></x>)) {export __iterator__;<x><y/></x>; } else with(prototype%=<><x><y/></x></>){}");
tryItOut("throw prop.((++));");
tryItOut("let (__proto__, __iterator__) { return [,,z1]; }");
tryItOut("M:if(prototype = (uneval(prop))) {__count__;var constructor; } else  if ((true.@foo)) let __count__ = window;");
tryItOut("{export prop; }");
tryItOut("yield yield this++;");
tryItOut("/*for..in*/M:for(const __iterator__.__noSuchMethod__ in __iterator__.(<><x><y/></x></>)) {(3/0);/*for..in*/for(let [__iterator__, __noSuchMethod__] = [z1] in prop) {gc() } }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var *['__noSuchMethod__'] in [1,,]) {break ; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = constructor.__noSuchMethod__ in <><x><y/></x></>.unwatch(\"__parent__\")) <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>");
tryItOut("M:with((*::* for each (__count__ in @foo))){return constructor; }");
tryItOut("/*for..in*/M:for(const ((window)().unwatch(\"({ yield: __iterator__, __proto__: prop })\"))(((@foo.__lookupSetter__(\"prototype\")).valueOf(\"number\"))) in __count__) return  '' ;\t");
tryItOut("if([z1,,]) { if (<x/> ^= <x><y/></x>.__defineSetter__(\"prototype\", gc)) if(__iterator__.constructor) function (__iterator__, each) { yield undefined }  else yield *; else yield this + .2;}");
tryItOut("let (__parent__, __count__ = (this)()) { {}\n }");
tryItOut("if((typeof <x><y/></x>.(undefined)--)) try { for(let y in []); } finally { throw __parent__; } ");
tryItOut("{{} }");
tryItOut("M:if(false) {;{} } else yield 0.1;");
tryItOut("/*infloop*/for(var __count__; ({a1:1}); __count__+=__parent__) {function  __parent__ (constructor, constructor) { \fvar constructor; } /*for..in*/for([__proto__, __proto__] = <x/>.__proto__ in __count__) {var __proto__ = 1e+81;let constructor = 0.1; } }");
tryItOut("do L:\tif(*) {( '' );continue ; } else prop, __iterator__; while((__proto__.prop setter= ({}).__lookupGetter__) && 0);");
tryItOut("while(([15,16,17,18].sort(function(y) { yield y; /*for..in*/for(var __noSuchMethod__ = (__iterator__.__parent__ =  '' ).(\"constructor\") in null) yield true;; yield y; }, (__proto__ = false))) && 0){switch(@foo) { case __parent__.constructor = __proto__ = constructor: do {return __count__; } while(((<x><y/></x> if ( \"\" ))) && 0); const __count__;break; default: let __proto__ = @foo, constructor;break; case (window :: <x/> .@*:: __iterator__ = prop):  }const constructor }");
tryItOut("/*infloop*/for(<x><y/></x>[3/0]; (((constructor).call)()); (<><x><y/></x></>)[((function (__proto__, __proto__) { let __parent__ =  '' , prototype; } ).call(<x/>, null, this))]) {<x><y/></x> }");
tryItOut("while(((this.__defineGetter__(\"__proto__\", <x><y/></x>))) && 0){(yield \tundefined)throw prototype; }");
tryItOut("gc()");
tryItOut("let __parent__, prop = <><x><y/></x></>;\n__parent__;\n");
tryItOut("with({constructor: (<x><y/></x>.((function ([y]) { })()))}){return <x><y/></x>;/*infloop*/for(var __iterator__ = <><x><y/></x></>; <><x><y/></x></>; [,]) {return null; } }");
tryItOut("return __parent__");
tryItOut("{var __parent__, prototype = __proto__; const __iterator__;/*for..in*/for(const prototype in ((gc)(( /x/g .__lookupSetter__(\"prop\"))))){( '' );var __noSuchMethod__ = prop; } }");
tryItOut("if(@foo.yoyo(__count__)) /*infloop*/for(var __parent__ = (yield __count__ .. <><x><y/></x></>); (({ __iterator__: (__iterator__)(false), __noSuchMethod__: __count__ }) = this & __noSuchMethod__.isPrototypeOf((delete window) - (__parent__ = <x/>))); (function  __iterator__ () { ; } )\t([15,16,17,18].sort([1,2,3,4].slice, <x><y/></x>))) {{}function::__count__;\nexport *;\n }");
tryItOut("{yield; }");
tryItOut("/*for..in*/for(var constructor in ((function(y) { yield y; if(5.0000000000000000000000) { if (this) {yield;* }} else {yield; }; yield y; })(this)))/*for..in*/for(const __iterator__ in  /x/ ) L:do yield (function ([y]) { })(); while((- \"\" ) && 0);");
tryItOut("yield;");
tryItOut("with(1e+81)gc()");
tryItOut("let (function::__count__, constructor) { ({}).__lookupGetter__ }");
tryItOut("/*infloop*/for(1e+81; <y><z/></y>; prototype) constructor\nwith({__iterator__: new Number()}){*::*;yield; }");
tryItOut("L:if(this.__defineSetter__(\"prop\", function (__noSuchMethod__.__iterator__, __parent__) { return  } )) <x><y/></x>; else {/*infloop*/do <ccc:ddd><x><y/></x><x><y/></x><!--yy--></ccc:ddd> while(__count__ >>= <x/>); }");
tryItOut("if(__noSuchMethod__) { if (-1) {__parent__throw 1.2e3; }} else { }var __count__ = false, __parent__;");
tryItOut("while((((<y><z/></y>.prototype)(#3={a:#3#}[<><x><y/></x></>], (new [[1]](<><x><y/></x></>))))) && 0){export prop;export __parent__; }");
tryItOut("yield\n");
tryItOut("\fif(__noSuchMethod__) { if ([__noSuchMethod__, , ] = (__noSuchMethod__.(*)) | false) L:if(<x/>.yoyo(this)) (new Function(\"yield;\")) else  if (yield  /x/ ) } else {prototype, __proto__ = <x><y/></x>;/*for..in*/for(prototype = @foo in <\fx><y/></x>) return  /x/ ; }");
tryItOut("while((*) && 0){#3={a:#3#}; }");
tryItOut("/*for..in*/L:for(__proto__ = ({ prop: prototype, __noSuchMethod__: [, __iterator__, [[, __parent__, __parent__], ({ __parent__: __count__ }), ({ __parent__: __noSuchMethod__, constructor: prop }), __count__, ({ constructor: prototype })]] }) = #1=@foo in prop+=#0=({__count__: [__proto__ for (prototype in window)]})) {L:if([, [, constructor, ]] = [[]], __count__ = @foo.hasOwnProperty(\"__noSuchMethod__\").propertyIsEnumerable(\"@foo\")) { if (<><x><y/></x></> <= <x/>) {arguments }} else let constructor = <y><z/></y>, __noSuchMethod__; }");
tryItOut("/*infloop*/for(const __count__ =  \"\" ; (yield *)\t; (*::* ? <><x><y/></x></> : false)) {throw <y><z/></y>; }L: ");
tryItOut("L:  for ((__parent__) in  /x/g )");
tryItOut("/*for..in*/for([prop, prop] = (p={}, (p.z = <x><y/></x>)()) in __proto__.prop = <x><y/></x>.(1e81)) L\t: return;");
tryItOut("const __iterator__, prop;");
tryItOut("if(undefined) var __iterator__, __count__ =  '' ; else  if (({a2:z2})) throw 0; else {}\n");
tryItOut("L: ;");
tryItOut("throw constructor;");
tryItOut("/*infloop*/while((constructor = [,,].unwatch(\"__iterator__\"))){ /x/ ; }");
tryItOut("if( '' ) {export *; } else  if (__count__.__parent__ = this &= <><x><y/></x></>)  else return;");
tryItOut("let (prop = __noSuchMethod__, __proto__) { return {yield; }; }");
tryItOut("prototype.prototype = __count__;");
tryItOut("var __parent__;");
tryItOut("/*for..in*/for(__iterator__ in ( /* Comment */false)) {function ()5.0000000000000000000000/*for..in*/for(var __iterator__ = @foo in <><x><y/></x></>) *; }");
tryItOut("/*for..in*/for(var [__iterator__, constructor] = this in <><x><y/></x></>) { /x/g  }");
tryItOut("default: break; break; break; ");
tryItOut("do throw  '' ; while(((__proto__) = prop = constructor++) && 0);");
tryItOut("{do  while(([[1]]) && 0);gc() }");
tryItOut("{try { let prototype; } catch(__noSuchMethod__ if (function(){throw -0;})()) { export __proto__; } catch(constructor if (function(){;})()) { yield #1=[#1#]; } return; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(constructor; <><xxx {__iterator__}={(this.__defineGetter__(\"__proto__\", 1.3) for each (({ __parent__: prop, __count__: __noSuchMethod__ }) in <><x><y/></x></>) if (__count__))} /></>;  \"\" ) {yield;throw 3.141592653589793; }");
tryItOut("/*infloop*/for( \"\" ;  \"\" ;  /x/g ) {(prop); }");
tryItOut("L: throw __iterator__;");
tryItOut("/*infloop*/for(__parent__; ({__noSuchMethod__ getter: function(y) { yield y; prototype getter: function(q) { return q; }; yield y; }try { <x/> } catch(prototype) { return gc(); }  }); ) if(--1) {<x/>yield; } else  if ((prop.throw(false))) ; else export __parent__;");
tryItOut("return <x><y/></x>");
tryItOut("");
tryItOut("/*infloop*/while(this.zzz.zzz){return; }");
tryItOut("/*infloop*/do if(window instanceof <><x><y/></x></>) { if ((({}).__lookupGetter__)()) return [z1]; else {__proto__; }} const let; while(prop);");
tryItOut("M:if(new prop = <x><y/></x>()) {let __noSuchMethod__ = prototype, __proto__ = <x/>/*\n*/;{} } else {/*for..in*/for(prototype in <><x><y/></x></>) break ;yield <><x><y/></x></>; }");
tryItOut("M:switch(true) { default: /*for..in*/for(var (\t__parent__) in false ? true : .2) {export __noSuchMethod__;L: {break L;var prototype; } } }");
tryItOut("if(constructor.prop) {(<x><y/></x>)[this]; } else  if (new <y><z/></y>()) {/*infloop*/for(let __count__ = ( /* Comment */<x/>); @foo; *::*) export *; }");
tryItOut("export *;\nconstructor, __count__ = <x/>;\n");
tryItOut("/*infloop*/for(let [prototype, , function::set, __parent__, ] = #2=undefined; new RangeError(null, *); (<x><y/></x>.isPrototypeOf((-1)))) Math.pow");
tryItOut("if((\fthis.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map))) {return <y><z/></y>;export *; } else  if (\t({ __proto__: __parent__, __iterator__: ({ __parent__: ({ __iterator__: __proto__, prop: __count__ }) }) }) = (eval(\"__parent__, __proto__ =  /x/g ;\", *))) export *;");
tryItOut("let (<x><y/></x>.function::__count__, []) { /*infloop*/for(([, __count__, __noSuchMethod__, __iterator__, ] = new (/a/gi)()); __iterator__.(<><x><y/></x></>).valueOf(\"number\"); (<xxx {__iterator__}={<x/>} />.(((*::*)[window])))) {L:do <y><z/></y>; while(((-0)) && 0);if( /x/ ) { if (window)  else {continue M; }} } }");
tryItOut("; const prop;");
