tryItOut("M:do {let __parent__\nM:if(<y><z/></y>) {export *; } else  if (<><x><y/></x></>) {break L;let prototype = <><x><y/></x></>, yield = 033; } else return; const __count__; } while((true.hasOwnProperty(\"prop\") % \n<y><z/></y>) && 0);");
tryItOut("/*for..in*/L:for(let __iterator__ = 1.2e3 in constructor.__parent__ = (new (1 for (x in []))())) {export __parent__;if( /x/g ) { if (@foo) } else continue ; }");
tryItOut("do yield  /x/ ; while((prototype) && 0);");
tryItOut("while(((new (*::*)(this))) && 0)export __proto__;");
tryItOut("L: {continue M;.2; }");
tryItOut("while((\r[__noSuchMethod__, try { yield [1]; } catch(constructor if (function(){;})()) { {} } , ] = __proto__ = this ? (this.__defineGetter__(\"prop\", [1,2,3,4].map)) : __parent__ = *::*) && 0)gc()");
tryItOut("if(let (__parent__) .valueOf(\"number\")) {if(this) { if (<x/>) { } else <x/>;} }");
tryItOut("M:while((this) && 0){*::* /= null\n(<y><z/></y>); }");
tryItOut("<x/>");
tryItOut("/*infloop*/do {<x/>;throw <y><z/></y>; } while((__iterator__.(<y><z/></y> , window).__lookupGetter__(\"constructor\")));");
tryItOut("[[]];");
tryItOut("L:if(<x><y/></x>) { if (<y><z/></y>) continue ; else __iterator__, __proto__;}");
tryItOut("try { with({}) { throw __count__; }  } catch(__count__) { yield true.eval([,,z1] += <><x><y/></x></>); } finally { __iterator__ = __parent__; } ");
tryItOut("do {return; } while((yield Math.pow.unwatch(\"prop.__parent__\")) && 0);");
tryItOut("/*infloop*/for([((null).__defineSetter__)(1e+81)]; []; yield 5.0000000000000000000000.valueOf(\"number\")) {new Function }");
tryItOut("while((yield;) && 0){if(<><bbb xmlns=\"window\"><x><y/></x><x><y/></x><!--yy--></bbb></>) gc() else continue L; }");
tryItOut("/*for..in*/for(let [__proto__, __parent__] =  in 0) yield  \"\" ;");
tryItOut("{ }");
tryItOut("M:while(((yield  '' )) && 0) '' ;");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/for([__proto__, prototype] = __count__.eval(<><x><y/></x></>) - 033 in <{prototype}><bbb xmlns=\"__iterator__ =  '' \"><><!--yy--></></bbb>yyy</{prototype}>) with({(__count__): [15,16,17,18].filter(function ( { yield <x><y/></x> } , __noSuchMethod__) { yield 1e+81 } , window)})arguments;");
tryItOut("if(*) { if (<x><y/></x>) {yield; }} else {return;export *; }\nM:if(null) { if (<x><y/></x>) {return; }} else return;\n");
tryItOut("/*infloop*/do {/*infloop*/while(__proto__){return; }/*for..in*/for(const [__parent__, __proto__] =   in this.__defineSetter__(\"constructor\", (Math.pow).call)) export *; } while(<x/>);");
tryItOut("/*for..in*/L:for(let [__noSuchMethod__, prototype] = __proto__.* in @foo) {continue ;__proto__;; }");
tryItOut("");
tryItOut("/*for..in*/for(let prop in ((function ( '' )this)( \"\" )));");
tryItOut("if((yield  /x/g ).valueOf(\"number\")) {break M;; } else throw -0;");
tryItOut("M:while(((__count__ ? -0 : *)) && 0)(<x><y/></x>);");
tryItOut("/*infloop*/while(<x><y/></x>.(window))J");
tryItOut("const __parent__ =  \"\" \n");
tryItOut("return #1#;");
tryItOut("M:if(<x><y/></x>) {[1,2,3,4].map } else  if (<><x><y/></x></>) export constructor; else  { yield @foo } ");
tryItOut("L:with({delete: <x><y/></x>})throw __parent__;");
tryItOut("[({ prop: constructor, __noSuchMethod__: __count__ }), ], __iterator__if(*) yield <><x><y/></x></>; else <><x><y/></x></>;");
tryItOut("/*infloop*/for(1e-81 - <x><y/></x> :: (1e-81.__lookupSetter__(\"prototype\")); #1=[#1#].yoyo(__count__); \nthis ? __count__, __iterator__ = [z1,,]; : <x/>) gc()");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(__iterator__; __count__.valueOf(\"number\").__defineGetter__(\"__count__\", new Function).__count__; (( /x/g  if (<x><y/></x>)) += this.__defineGetter__(\"__proto__\", [1,2,3,4].map))) export (__count__);");
tryItOut("__parent__.__parent__ = __count__;");
tryItOut("throw StopIteration;");
tryItOut("<x><y/></x>\n");
tryItOut("yield @foo;");
tryItOut("{with({}) { const __proto__, __proto__ = <y><z/></y>; }  }");
tryItOut("/*infloop*/for(var ({ __proto__: __proto__, __iterator__: __iterator__ }) = __noSuchMethod__ = (eval(\"(new <x><y/></x>(false))\", [15,16,17,18].sort(Math.sin, @foo)));  /* Comment */<><x><y/></x></>--; [11,12,13,14].filter) while((<x><y/></x>) && 0)yield;");
tryItOut("yield  \"\" ;");
tryItOut("gc()\nwith({__proto__:  '' }){export *; }\n");
tryItOut("switch(!//h\n([1.3])) { default: break; case __count__ = (@foo\f)\n: L: yield  /x/g ;case 0: break;  }");
tryItOut("L:with({constructor: __proto__.((prototype))})L: {throw *; }");
tryItOut("M:while((new Array( \"\" --, @foo)) && 0);");
tryItOut("{continue M; }");
tryItOut("this.zzz.zzz;");
tryItOut("M:if((*::* if (<y><z/></y>))) {(eval).callvar __count__ = __parent__; } else  if (__proto__ = <x><y/></x>.(window)) {yield __parent__;(false); } else {gc() }");
tryItOut("__iterator__ = prop;");
tryItOut("{L:with(prop){}if([z1,,] << *::*) /*infloop*/L:for(__parent__ = <><x><y/></x></>; [[1]]; <x><y/></x>) break ; else  if ((({ __noSuchMethod__: [constructor, , , , ], prop: ({ __count__: __iterator__, prop: __count__ }) }) = prototype)) {throw <y><z/></y>;; } else return; }");
tryItOut("if( '' .__lookupSetter__(\"__proto__\")) return  /x/g ; else  if ([<x><y/></x>]) ;");
tryItOut("M:if(0++) if(((__proto__.(({ set __iterator__ __iterator__ (constructor, __parent__)<x><y/></x> }))\n for (({ __noSuchMethod__: __count__, __count__: prop }) in null) for (set in window) for each (__iterator__ in <><x><y/></x></>)))) {export *; } else {__iterator__ = prototype;window >> [,,z1]; }");
tryItOut("/*infloop*/for(prototype;  \"\" ; *) prop");
tryItOut("/*infloop*/do throw [,,]; while(([@foo]))\nexport __proto__;");
tryItOut("with(<><bbb xmlns=\"<x><y/></x>\"><> '' </><!--yy--></bbb></>){__parent__, __count__ = true;function  x::__parent__ ()-1 }");
tryItOut("var __count__ = <><x><y/></x></>; const prototype;");
tryItOut("/*infloop*/do export *; while(<ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd>)");
tryItOut("this.zzz.zzz;");
tryItOut("L: /*for..in*/for(let __count__ in ((<><x><y/></x></>)(prototype.__noSuchMethod__))){break M; }");
tryItOut("if( /x/ .propertyIsEnumerable(\"prop\") >>> <><x><y/></x></>.throw(<y><z/></y>)) { if ( /x/g ) {gc()\n(null); } else {let (__count__ = __count__) { /*for..in*/for(prototype in (uneval(prototype))) {;yield; } } }}");
tryItOut("export __proto__;let __parent__;");
tryItOut("(function (constructor) { yield (<y><z/></y>.propertyIsEnumerable(\"__proto__\").propertyIsEnumerable(\"__noSuchMethod__\")) } ).call(__iterator__%=(({a2:z2}) != <x/>), ++-0)");
tryItOut("with((this.zzz.zzz))\rthrow  /x/g ;");
tryItOut("for(let y in []);");
tryItOut("if(@foo) yield; else  if ((<x><y/></x> .@*:: 3.141592653589793)) ( /x/ ); else { } const prop\n/*infloop*/do {{} } while(__iterator__);\n{}\n");
tryItOut("/*infloop*/do {gc() } while(! /x/g  > (undefined <<= <y><z/></y>));");
tryItOut(" get __proto__() { return this } ");
tryItOut("const constructor, __count__;\nfunction (prototype, prop) { return window } \n");
tryItOut("let(__noSuchMethod__) ((function(){constructor = function::__proto__;})());");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("\fif() {(constructor).apply } else do {prop;throw window; } while((*::*) && 0);");
tryItOut("M:do const __proto__ = <x><y/></x>; while((<>__proto__</>) && 0);");
tryItOut("return ();");
tryItOut("continue M;\n\n/*infloop*/for(var __noSuchMethod__; null || constructor.@*; prop.(window)) {throw 4.; }");
tryItOut("if((x::prototype =  '' )) {\fyield window;yield; }");
tryItOut("/*for..in*/for(var (prop) in -3/0) const __iterator__ =  '' , __noSuchMethod__ = __count__;");
tryItOut("if(<y><z/></y>) {export __parent__;; } else  if (#1=[#1#]) ");
tryItOut("L: {/*for..in*/for(const __noSuchMethod__ in ((Function)(new function(y) { yield y; export *;; yield y; }().isPrototypeOf(#1#.__defineGetter__(\"__noSuchMethod__\",  \"\" ))))){}L:if(false)  \"\"  else {var prototype = <y><z/></y>, prototype; } } const __iterator__;");
tryItOut("function(y) { yield y; throw  /x/g ;; yield y; }\n");
tryItOut("/*infloop*/while(([1,2,3,4].slice)){}M:while((*::*) && 0)const set, __proto__ = <><x><y/></x></>;");
tryItOut("if(<xxx>{function::prototype}</xxx>) break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in 0/0) /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in constructor) {gc()Math.pow }");
tryItOut("if(__parent__, __count__) { if () {( '' );\t } else {/*infloop*/for(<x><y/></x>; [1,,]; __iterator__) {yield <><x><y/></x></>;\t }function (prototype, __count__) { return * }  }}");
tryItOut("let([(<>\t<x><y/></x></>)]) ((function(){({}).__lookupGetter__})());");
tryItOut("export prototype; const __parent__;");
tryItOut("L:if(*) {const prototype, prototype;throw 0.1; } else  if (null) (window).__defineSetter__");
tryItOut("{/*for..in*/for(var  /x/g  in window) { } }");
tryItOut("M:do {__parent__ = @foo;export *; } while((<x><y/></x>) && 0);");
tryItOut("let (__noSuchMethod__, __noSuchMethod__ =  '' ) { do ({}).__lookupGetter__ while((constructor) && 0); }");
tryItOut("with({__noSuchMethod__: null}){prop; }");
tryItOut("throw __iterator__;");
tryItOut("/*for..in*/M:for(var [yield, x::__proto__] = <x/> in this) {break ; }//h\n");
tryItOut("let([, __iterator__, __proto__], [, ]) { return ((function(y) { yield y; ;; yield y; }).call);");
tryItOut("/*infloop*/M:for(var __iterator__ = ((eval(\"[,]\", ({a2:z2}))).__parent__).unwatch(\"prop\");  /x/ ; <y><z/></y> = this.__lookupSetter__(\"__count__\")) yield;");
tryItOut("switch(().yoyo((0\n)).null) { case 3: case [] = undefined ? arguments : __iterator__: /*infloop*/for(window.*.*; <><x><y/></x></>.throw([undefined]); [,] ? @foo : <x/>++) /*infloop*/for(function ([y]) { }; <x/>; <x/>) let __iterator__, prototype;break; default:  /x/g ;break;  }");
tryItOut("L:with(null .@ 0x99)(window).__defineSetter__");
tryItOut("if(__noSuchMethod__ = <><x><y/></x></>) {var __parent__ = *::*; } else  if ((__parent__.__parent__ getter= false))  for (__proto__ in window) for each (__iterator__ in <x><y/></x>) else var __parent__ = function::__parent__, __count__;");
tryItOut("throw constructor;");
tryItOut("/*for..in*/for(const __parent__ = (/*\n*/[, ] = ({ __count__: __noSuchMethod__ })) in __count__ @ *::*) gc()");
tryItOut("{/*for..in*/for(const __parent__ in this) {return  \"\" ;<x><y/></x>; }{} }");
tryItOut("/*for..in*/for(__count__ = [15,16,17,18].filter((window).watch, <x/>) in prop = 1.3) /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.constructor in undefined) {yield;continue ; }");
tryItOut("{{}eval }");
tryItOut("if(<x><y/></x>+=__iterator__.isPrototypeOf( '' )) if((function ([y]) { })()) return; else  if ((#1=[__count__])) {return;Math.sin }");
tryItOut("prop;\n(true);\n");
tryItOut("while((((p={}, (p.z = <x/>)()))) && 0){({}).__lookupGetter__ }");
tryItOut("with(false){/*for..in*/for(var __iterator__ = window.isPrototypeOf(*::*) in  '' ) {throw <//h\nx><y/></x>; } }");
tryItOut("with({prop: (*::*())}){{}return; }");
tryItOut("{break ; }");
tryItOut("/*infloop*/while(<x/>){\tgc() }");
tryItOut("export __iterator__\n");
tryItOut("for(let y in [5,6,7,8]) with({}) { for(let y in [5,6,7,8]) with({}) let prototype = *::*; } ");
tryItOut("export prop;");
tryItOut("/*infloop*/for(const __iterator__; ([*].sort(true)); false) with({prototype: ({}) !== <x><y/></x>}){continue ; }");
tryItOut("/*infloop*/do {(new (({}).hasOwnProperty)());yield; } while(__iterator__.prototype = *::*.__defineGetter__(\"__proto__\", (new Function(\"function(y) { yield y; export *;; yield y; }\")))); const prototype;");
tryItOut("/*for..in*/'for(const [prop, throw true;] = *::* instanceof  in 0/0) {export constructor; }");
tryItOut("return");
tryItOut("{Math.pow }");
tryItOut("if(prop.__proto__\f setter= gc) { if ((this.__lookupSetter__(\"constructor\"))) return <y><z/></y>;} else let __noSuchMethod__;");
tryItOut("do {var __count__ = @foo; } while(((new Function(\"yield; const prop;\"))(__noSuchMethod__[<><x><y/></x></>], @foo) ^= (uneval(<><x><y/></x></>))) && 0);");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = __proto__ in constructor) {/*for..in*/for([__proto__, __noSuchMethod__] = (__noSuchMethod__ = <x><y/></x>) in <x><y/></x>) {break L; } }");
tryItOut("L: {let __parent__ = ({}); }");
tryItOut("__parent__ = __count__;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(<x/>; (yield @foo); (<y><z/></y> for each (__iterator__ in \ffalse)).propertyIsEnumerable(\"__noSuchMethod__\")) {yield <x/>; }");
tryItOut("/*infloop*/L:for(([15,16,17,18].filter(L:if(@foo) {[1,2,3,4].mapyield; } else continue L;, <x><y/></x>).eval(__proto__ =  /x/g )); void new Iterator().__parent__; ({__proto__: <><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb></>})) {export *; }");
tryItOut("(<x><y/></x>);");
tryItOut("/*infloop*/for(let __count__; (<x/>+=@foo ? <x><y/></x> : this); <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {throw <x/>;;function  prop (__noSuchMethod__, __proto__) { return <><x><y/></x></> }  }");
tryItOut("/*for..in*/for(__iterator__ = <y><z/></y> in <bbb xmlns:ccc=\"//h\n(window)\"><ccc:eee></ccc:eee></bbb>) if(*.__count__) return window; else {const __noSuchMethod__; }");
tryItOut("L:do {prototype setter: 'haha'.split{} } while((!prop) && 0);");
tryItOut("M:if(this.__defineSetter__(\"__noSuchMethod__\", 1e+81)) export *;");
tryItOut("return;");
tryItOut("\n__proto__, prop = 0.1\n");
tryItOut("prop = prop;");
tryItOut("/*infloop*/L:for(new /a/gi(<><x><y/></x></>, <x/>); @foo; 'fafafa'.replace(/a/g, function(q) { return q; })) {{} }");
tryItOut("/*infloop*/while((function () { export *; } ).call({}, ))yield window;");
tryItOut("return ;");
tryItOut("/*infloop*/for(constructor; this; <><x><y/></x></>.__defineGetter__(\"constructor\", function  __parent__ (constructor, __iterator__)033) > __count__.propertyIsEnumerable(\"__count__\")) {__parent__ =  /x/g , __proto__ = <><x><y/></x></>;/*for..in*//* nogeckoex bug 349964 */\nM: for  each(let prototype in <\tx><y/></x>) return <x/>; }");
tryItOut("if((__iterator__+=(__proto__ = false)++)) <x><y/></x>; else  if ((new function \t prop (prototype)<y><z/></y>() >>> (yield (-1)))) throw <x><y/></x>; else if(true) {const prop = *::*; } else {throw  /x/g ; }");
tryItOut("/*infloop*/for((<x><y/></x>.propertyIsEnumerable(\"prop\")).__defineGetter__(\"__count__\", new Function); prototype; this) {yield #0=({__iterator__: <y><z/></y>});M:if(0.*) { if (++this) { /x/ ;export *; }} else gc() }");
tryItOut("if((*.valueOf(\"number\")) >>= ((yield  \"\" ))) {for(let y in [5,6,7,8]) return <x><y/></x>; }");
tryItOut("if(undefined) const constructor = true, __iterator__; else export *;");
tryItOut("let(__proto__ = ([*].sort('haha'.split)) == *, function::__count__ = this.__lookupGetter__(\"__iterator__\")) ((function(){throw window >>>=__noSuchMethod__;})());");
tryItOut("if(window) (function(y) { yield y; ;; yield y; }).apply");
tryItOut("{return; }");
tryItOut("gc()\n");
tryItOut("M:switch(<x><y/></x>) { default: <><x><y/></x></>.__lookupSetter__(\"prototype\"), this }\n");
tryItOut("try { throw StopIteration; } catch(__parent__) { this.zzz.zzz; } ");
tryItOut("break M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>) {;//h\nreturn; }");
tryItOut("/*infloop*/while(__parent__)function  __parent__ ()<><x><y/></x></>");
tryItOut("let (#3={a:#3#}.__proto__ = (null.__lookupGetter__(\"each\"))) { /*infloop*/M:do gc() while(<><x><y/></x></>); }");
tryItOut("M:if((prop = <x><y/></x>.constructor = ( ''  :: @foo))) yield; else  if ([1,,]\n.__defineSetter__(\"__iterator__\", Function)) {}");
tryItOut("if(window.__defineGetter__(\"__noSuchMethod__\", (#1=[#1#].yoyo(<x><y/></x>)).watch)/*\n*/) {const __noSuchMethod__ = window;let prop; }");
tryItOut("/*for..in*/for(let [__parent__, __parent__] = ((void yield <y><z/></y>).propertyIsEnumerable(\"__iterator__\")) in this.__defineGetter__\t(\"constructor\", (4.).call)) M:with({__parent__: ({a1:1})})const prototype, __parent__;");
tryItOut("L:if() { if (<><><!--yy--></></>) let (__parent__, __parent__ = true) { {} }} else gc()");
tryItOut("/*infloop*/while(<x><y/></x> &= 1.2e3)//h\n { return 'fafafa'.replace(/a/g, prototype) } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in undefined) {export __noSuchMethod__; }");
tryItOut("if(({__count__: (new (new Function)())[<><x><y/></x></>.propertyIsEnumerable(\"__parent__\").__defineGetter__(\"__count__\", (new Function(\"{gcfunction (prototype) { let __count__; }  }\"))).watch(\"constructor\", <x><y/></x>)] })) yield false\n<><x><y/></x></>; else if(<x><y/></x>.__defineSetter__(\"__iterator__\", Math.sin)) { if (<><x><y/></x></> >>> #1#) return arguments;} else let __parent__, __count__ = window;");
tryItOut("if([1,,]) export *; else  if (<x/>) {return; }");
tryItOut("if((@foo).call((prototype), ))  else {yield  '' ; }");
tryItOut("/*infloop*/while((this++)){return;L:if(__proto__) var constructor = this; else  if (<x><y/></x>) {return <x><y/></x>; } else var __noSuchMethod__, __proto__; }");
tryItOut("if(((#3={a:#3#} if (<><x><y\t/></x></>)))) { if (__noSuchMethod__) ;} else {throw *; }");
tryItOut("if(({__count__: <y><z/></y> * <x><y/></x> })) return; else {yield; }");
tryItOut("; const prototype;");
tryItOut("while((this.__defineSetter__(\"function::__parent__\", function  __noSuchMethod__ () { yield 1e81 } )) && 0){yield <><x><y/></x></>; }");
tryItOut("if(.2 .@*::  \"\" ) return *::*; else {}\f");
tryItOut("if((((<x><y/></x> for each (__proto__ in 1e-81))))) {return; } else yield <x/>;");
tryItOut("/*infloop*/for(((null.__defineGetter__(\"prototype\", (gc).apply).__defineGetter__(\"__iterator__\", (1 for (x in [])))).call((null *=  '' ), )); __proto__.__count__ = [,,]; [window].sort(function (__noSuchMethod__) { yield [,,z1] } )) {M:if( /x/g  for each (constructor in <x><y/></x>)) { } else  if (__count__.__parent__ setter= function (__count__, __parent__) { yield <y><z/></y> } ) /*infloop*/M:while( /x/ .watch(\"__iterator__\", (1 for (x in []))))yield; }");
tryItOut("M:if(<xxx {__iterator__}={__count__.(__parent__)} />) { if ((let (__parent__, constructor) <><x><y/></x>\t</>.__lookupSetter__(\"__iterator__\"))) eval} else yield this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x> instanceof undefined) return \t /x/ ;");
tryItOut("Math.powprop;");
tryItOut("if(((p={}, (p.z = eval(\"function  prototype (__count__, __iterator__) { ; } \", <><x><y/></x></> && [,] *= function::__noSuchMethod__ = <y><z/></y>))()))) {function::constructor; } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) throw <x><y/></x>.__defineGetter__(\"__count__\", function  __count__ (__parent__)@foo);");
tryItOut("yield; const __parent__;");
tryItOut("if(((prop)).valueOf(\"number\")) { if ((<y><z/></y> -= <><x><y\n/></x></>)( /x/ , <x/>) | 3.141592653589793) {return; }} else L: return;");
tryItOut("/*infloop*/do  while(([prototype = get].filter(prop >=  /x/ )));");
tryItOut("/*for..in*/M:for(var __parent__ = <y><z/></y> in <><x/*\n*/><y/></x></>.eval(constructor).hasOwnProperty(\"__noSuchMethod__\")) {export prop; }");
tryItOut("{return *::*;yield; }");
tryItOut("({ __count__: prop })\f = constructor;");
tryItOut("/*for..in*/for(constructor = (#0=(function ([y]) { })()) in 1.2e3 >>>=undefined.valueOf(\"number\")) /*for..in*/for(let [__proto__, __count__] = __iterator__.__lookupGetter__(\"__proto__\") in <y><z/></y>) {yield;prop = <x/> }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each([prop]['__iterator__'] in [15,16,17,18].sort('haha'.split, ((uneval(<>\r(x><y)/></x></>))))) {{export __parent__;break ; }break ; }");
tryItOut("M:if((({ prototype: __parent__, prototype: prop }) = [[]]).@*) { if ((( '' )[ /x/ ]).*) return\nyield;} else {}");
tryItOut("L:with({__noSuchMethod__: undefined ? @foo : <><x><y/></x></>\f})continue L;");
tryItOut("/*for..in*/for(const [prototype, prototype] = (new <x/> >> undefined(((-1).__lookupGetter__(\"__count__\")).hasOwnProperty(\"__noSuchMethod__\"))) in (new Function(\"return (function ([y]) { })();\"))) if(<x><y/></x>) {<x><y/></x>; } else {export *;export *; }");
tryItOut("if((function(y) { yield y; return  /x/ ;; yield y; }).call((uneval(\n<><x><y/></x></>\f)), )) {with({__iterator__: @foo}){(undefined); }; } else {if(({ set __proto__ __iterator__ (constructor) { return  /x/  } , __proto__ getter: Math.pow })) yield 0.1; }");
tryItOut("L: {throw {}; }");
tryItOut("/*infloop*/while(([({__iterator__: prototype, constructor: * })]));");
tryItOut("/*infloop*/for((__parent__.__defineGetter__(\"__count__\", *::*)); <x><y/></x>.throw(__count__); [1].eval(<y><z/></y>)) {;<y><z/></y>; }");
tryItOut("let (__noSuchMethod__ = <x><y/></x>.__lookupGetter__(\"__parent__\"), prop) { yield;\ncontinue ;\n }");
tryItOut("M:if(Exception().valueOf(\"number\")) {(1e+81); } else (__count__)\n const constructor;");
tryItOut("/*for..in*/for(__iterator__ =  \"\"  = prototype in new (@foo)()) /*for..in*/for(__proto__ = constructor in function  __iterator__ (__iterator__) { yield prop } ()) let __parent__, __iterator__ = #1=[#1#];");
tryItOut("return;");
tryItOut("if((true.__proto__.yoyo(<><x><y/></x></> ? ([,,z1] == this) : Array()))) continue L\ncontinue M; else {let prop;let (__parent__ = __noSuchMethod__) { break ; const __proto__; } }");
tryItOut("L: let __parent__, __parent__ =  /x/ ;");
tryItOut("export *\n\n");
tryItOut("__iterator__");
tryItOut("throw StopIteration;");
tryItOut("return;");
