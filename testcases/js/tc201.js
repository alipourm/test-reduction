tryItOut("if(033) return *; else  if ( '' ) throw true; else __noSuchMethod__;");
tryItOut("gc()\n/*for..in*/L:for(const __iterator__ in ((function  prop (__proto__, __noSuchMethod__) { return *::* } )( /x/ ))){{} }\n");
tryItOut("/*for..in*/for(__noSuchMethod__ = true in <><x><y/></x></>)  '' ;");
tryItOut("gc()");
tryItOut("/*for..in*/for(var __iterator__ in (*.propertyIsEnumerable(\"__count__\"))++) L:with({prototype: (eval(\"1e+81\", <y><z/></y>))[eval(\"*\", <><x><y/></x></>)]})return;");
tryItOut("throw StopIteration;");
tryItOut("with(<><xxx>{__count__}</xxx></>\r)export *;");
tryItOut("switch(((/a/gi).\tcall(__proto__, false))) { case 6: break;  }");
tryItOut("var prop;");
tryItOut("return [<y><z/></y>].filter((yield this).watch);");
tryItOut("/*infloop*/L:while((new (true)()))/*infloop*/do {return; } while(__count__);");
tryItOut("let (__parent__) { {} }");
tryItOut("if((false /=  \"\" )) {yield  '' ; }");
tryItOut("/*for..in*/for(const function(q) { return q; }['constructor'] in ((this)(this)))export *;");
tryItOut("M:if((new  \"\"  .. true)) {__parent__ = <><x><y/></x></>;export *; } else  if (( /x/ \n.(eval(\"const __count__ = 4., __parent__ =  /x/g ;\", __parent__)))) {prototype } else {let ( for ((constructor) in <x><y/></x>) for each (__iterator__ in __iterator__) =  '' , __noSuchMethod__ = 3/0) { {var __noSuchMethod__ =  /x/ , prototype;let prototype, __parent__ = window; } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in  \"\" ) {\t//h\n }");
tryItOut("M:do {eval\n } while((this) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in yield 3) {; }");
tryItOut("/*for..in*/M:for(__proto__ in <x><y/></x>) {{} }");
tryItOut("if(new Iterator()) {gc() '' ; }");
tryItOut("/*for..in*/M:for(let constructor in <y><z/></y>) return <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__((4..*)[[,,z1]\n]) in prop ==  \"\" ) {Function\nreturn <x><y/></x>;\nlet __parent__; }");
tryItOut("let (({ constructor: new @foo, prop: [, __parent__, , ( /x/ )(<y><z/></y>)] }) = __proto__ = new Boolean()) { /*infloop*/for(({ prototype: __parent__, constructor: ({ __count__: ({ __noSuchMethod__: function::__noSuchMethod__ }) }) }) = (__iterator__.__noSuchMethod__); this.__defineGetter__(\"__noSuchMethod__\", __count__); (__count__.__noSuchMethod__ = this.__noSuchMethod__)) yield {}; }");
tryItOut(" for (each in prop = this((Iterator(window).yoyo((p={}, (p.z = <y><z/></y>)()))))) if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)");
tryItOut("if(this.__defineGetter__(\"__count__\", <x><y/></x>)) return;");
tryItOut("L:with([1.3] & window ? #2=[ '' ] : [] if (__parent__))for(let y in [5,6,7,8]) yield yield null >>> (let (__iterator__) window);");
tryItOut("({}).__lookupGetter__");
tryItOut("with(#1#.__lookupSetter__(\"__count__\"))");
tryItOut("throw prototype");
tryItOut("/*infloop*/for(__noSuchMethod__ =  \"\" ; __parent__; @foo) {{}__iterator__ = *::*; }");
tryItOut("for(let y in [5,6,7,8]) M:with(<><x><y/></x></> /= new <x/>(<x><y/></x>))/*for..in*/for(let constructor = <x/> in []) let __proto__;");
tryItOut("/*for..in*/for(__proto__ in __parent__) const __proto__;");
tryItOut("try { __noSuchMethod__ = __proto__; } catch(__noSuchMethod__) { for(let y in [5,6,7,8]) continue \f; } ");
tryItOut("/*infloop*/\tfor(this; let (__noSuchMethod__, __count__) <x/>; <x><y/></x> -=  /x/g ) ({ prototype: ({ __count__: constructor, __proto__: prop }), __count__: ({ __count__: prop }) })");
tryItOut("M:with(<x/>){}");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("L:if(((let (__parent__ = <><x><y/></x></>) (prop))())) with(*){let constructor;export *; } else {return;var __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("if(((p={}, (p.z = __parent__ ? prop : <y><z/></y>)()).isPrototypeOf(([1,2,3,4].map)()))) if((-1)) yield [z1,,]; else  if (<x><y/></x>) {yield [,];; } else  if (this.__defineGetter__(\"constructor\", <y><z/></y>)++) { } else {yield;/*for..in*/for(__iterator__ in <x><y/>\t</x>) {return *::*; } }");
tryItOut("M:if(null) { if ([]) var constructor, __count__ =  '' ; else {}}");
tryItOut("L:if(/a/gi()) { if ( /x/  | <x/>) throw this;} else {const constructor = @foo; }");
tryItOut("this.zzz.zzz;");
tryItOut("{propL: return true; }");
tryItOut("constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ([,,])(*) in  /x/g  = *) {}");
tryItOut("/*for..in*/L:for(let function  prototype (prop)<x><y/></x> *= <><x><y/></x></> in ((<><x><[, , constructor, prototype]/></x></>)(1e-81, 0x99))) {/*for..in*/for(const [, prototype, , __count__] in (-3/0;.valueOf(\"number\"))) return; }");
tryItOut("for(let y in [5,6,7,8]) yield this;");
tryItOut("/*infloop*/\tfor(<x/>; <y><z/></y>; __iterator__)  \"\" ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x>) {(@foo); }");
tryItOut("switch(<><><x><y/></x></>++.__count__</>.(function(id) { return id })) { default: yieldbreak; case 2: const prop, prop;break; case 2: export __proto__;case new ({}).__lookupGetter__(*, <x><y/></x>): break;  }");
tryItOut("M:switch(B) { default:  }");
tryItOut("/*infloop*/for(constructor; yield false; *::*) {break M; }");
tryItOut("/*for..in*/for(var __count__ =  /x/  >>= *::* in  '' ) ;");
tryItOut("if((this.zzz.zzz)[__proto__ = [z1,,]]) ; else <><x><y/></x></>;");
tryItOut("/*infloop*/for(var ({ __iterator__: prototype }) = ({__iterator__: <x/> }); <><x><y/></x></>.__lookupGetter__(\"prototype\"); window) {return;gc() }");
tryItOut("L:with(eval( /* Comment */<y><z/></y>, <y><z/></y>)){{} }\n/*for..in*/M:for(let prop = <><x><y/></x></> == undefined ? @foo /  \"\"  : <x/> in <x/> .. ((function(q) { return q; })())) if(( /* Comment */<x/> | false)) { if (function::__proto__ = <x><y/></x>) {/a/gi } else break M;}");
tryItOut("if(prop.__iterator__ = eval(\"prop.prototype setter= gc\", ({prototype getter: ({}), __noSuchMethod__: window }))) /*for..in*/M:for(let [z1].__parent__ in ((function (__count__) { yield ({ set __iterator__ __parent__ (__count__) { yield  \"\"  }  }) } )(*::*))){yield <y><z/></y>;return; } else  if (null) {/*infloop*/while({}.hasOwnProperty(\"__parent__\")){return;throw [z1,,]; }((<><x><y/></x></>.@foo)); }");
tryItOut("export *;var __iterator__ = __count__;");
tryItOut("do {(<x/>); } while((prop = <x/>) && 0); const __noSuchMethod__;");
tryItOut("L:if( /* Comment */__count__ &= (__proto__ ? <><x><y/></x></> : [z1])) { if (<xxx {__noSuchMethod__}={__iterator__} />.(eval(\"export *;\", *))) {let (prototype) { {} } } else throw @foo;}");
tryItOut("if((__iterator__ =  \"\"  *  /x/g  :: (function (prototype, __iterator__) { return <><x><y/></x></> } )(.hasOwnProperty\"__iterator__\"), <x><y/></x>))) {break ; } else  if (/*\n*/yield __proto__(*--, 0.1)) {([z1,,]); }");
tryItOut("M:if(new #3={a:#3#}(true, <><x><y/></x></>)) { if (#1=({__parent__: ((uneval(<x><y/></x>)))})) {yield <y><z/></y>;return constructor; }} else {1e81;constructor; }");
tryItOut("/*infloop*/for(constructor = undefined; -3/0; window) yield;");
tryItOut("/*for..in*/for(var __iterator__.prototype in ((({}).hasOwnProperty)(({ get __iterator__ __proto__ (prototype, __iterator__) { continue L; }  }))))/*infloop*/for(const __count__; ({ constructor: ({ __count__: prop }), prop: [, , prototype, , __count__] }).(1e81); (([prototype.prop =  /x/g  for each (constructor in <x><y/></x>) if (<y><z/></y>)]).watch(\"prototype\", Function))[(#1=[#1#].__proto__.unwatch(\"__parent__\"))]) {continue M;M:if(window) {(null); } else  if (<{constructor}><ccc:ddd></ccc:ddd></{constructor}>) {export *; } else <ccc:ddd> </ccc:ddd> }");
tryItOut("if(<><xxx {prop}={1e+81} /></>) {/*for..in*/L:for(__noSuchMethod__ = (p={}, (p.z = window ? default: {}break; case 2: (1 for (x in []))break ;break;  : <><x><y/></x></>)()) in (new (#1=[#1#])(this))) {{}export __proto__; } }");
tryItOut("L: ");
tryItOut("with({}) let([[]], constructor = ( /* Comment */(undefined\n))) ((function(){return  '' ;})());");
tryItOut("L: (@foo);\nreturn;\n");
tryItOut("if(prototype = 3/0 + <><x><y/></x></> :: this) {let __noSuchMethod__ = <><x><y/></x></>, constructor; } else  if (__parent__ @ (window.throw(<y><z/></y>))\n) {let (__iterator__) { export __noSuchMethod__; }return *; }");
tryItOut("/*for..in*/for(var ({ prototype: prototype, prototype: ({ prop: __iterator__ }) }) in (([1,2,3,4].map)(null)))");
tryItOut("M:switch(prototype = (((-3/0).watch)(__iterator__))) { default: break; break; case 0: (0x99); }");
tryItOut("let (prop) { throw <y><z/></y>; }");
tryItOut("if() yield; else  if (null) let __parent__; else let constructor = -0, __proto__ = <x/>;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("if(this.zzz.zzz) with(({a1:1}))*; else  if ((__parent__ .@*:: <y><z/></y> / ({constructor: constructor, prototype: * }))) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in @foo) {; }");
tryItOut("/*infloop*/while((function  __noSuchMethod__ (({ constructor: [, , new  \"\" ['prototype'], [, [({ __iterator__\f: __parent__, constructor: __noSuchMethod__ }), , , ], , , ]], __count__: ({ prop: ({ __iterator__: ({ __noSuchMethod__: ({ __iterator__: constructor, __count__: __iterator__ }), prop: [, ] }) }), __count__: [] }) }), []) /* Comment */(/*\n*/false.__proto__ getter= \rnew Function) >>>= /* Comment */window).call(1e4.eval((__noSuchMethod__.(constructor))), (({__parent__: true})) % (__parent__ || @foo), [1,,].__lookupSetter__(\"prototype\")))\n");
tryItOut("L:with(__count__){var prototype = constructor; }\t");
tryItOut("let (__count__ = <x><y/></x>, __iterator__) { let __noSuchMethod__ = __noSuchMethod__, prop =  /x/g ; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) export *;");
tryItOut("if(1.2e3) { if ([z1]) {(constructor); }} else \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in (<x/>)[null] ? typeof 1e+81 : new 3/0.__defineGetter__(\"prop\", function  __proto__ ()prototype = prop)) {{;<y><z/></y>; }if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.yoyo((eval(\"<><x><y/></x></\\f>\", this)))) { if (Math.sin.eval([0/0 if (<x><y/></x>)]).@foo) export *;} else {{yield (-1);let __count__ = this; } } }");
tryItOut("if((prototype = prop)) {yield <y><z/></y>; }");
tryItOut("if(( '' .yoyo(__count__ = <x/>))) { if (break ;()) const __parent__, __iterator__ = __count__;} else return;");
tryItOut("while((( /* Comment */<y><z/></y>) ? Exception() : new function(y) { yield y; continue M;; yield y; }(<><x><y/></x></>, prop)) && 0){if(<x><y/></x>) return <x><y/></x>; else {break M;yield; } }");
tryItOut("/*for..in*/M:for(const prop = prop = window.prop = .__iterator__ = undefined %= <><><><x><y/></x></></></> in (( /x/g .prop)(this, ({a2:z2})))) {<><x><y/></x></>;with(null)gc() }\n(4.)\nreturn;");
tryItOut("if(-(({a2:z2}).isPrototypeOf(033))) (true); else ;");
tryItOut("/*for..in*/for(var __count__ = 0x99 in null) return [1,,];");
tryItOut("(<y><z/></y>);\n;\n");
tryItOut("{/*for..in*/M:for(let prop in  /x/g ) {}/*infloop*/L:for(prop; __parent__; true) {export *; } }");
tryItOut("/*infloop*/M:while( { continue L; } .__parent__ = <><x><//h\ny/></x></>.valueOf(\"number\"))with({prototype: ({ constructor: prototype }) = []}){{throw <><x><y/></x></>; }if(033) export *; else  if ( \"\" ) (this); else {(<x><y/></x>);return  \"\" ; } }");
tryItOut("throw this.__defineGetter__(\"__proto__\", ( /x/ ).__defineSetter__);");
tryItOut("if( \"\" ) yield false; else  if \t(*::*) yield  \"\" ; else {yield this;yield  /x/ ; }");
tryItOut("if(__proto__) {#1=[#1#];return; } else  if () {export __proto__;if(<><x><y/></x></>) {function(y) { yield y; continue ;; yield y; }return __iterator__; } else {return;{} } }");
tryItOut("if( * this) { if (4. >>>  \"\" ) {yield constructor; }} else {gc()continue ; }");
tryItOut("/*infloop*/M:while(__noSuchMethod__){gc()return <x><y/></x>; }");
tryItOut("<y><z/></y>.hasOwnProperty(\"__parent__\") - -3/0");
tryItOut("switch((true - this = eval(\"let __count__ = <x><y/></x>, constructor = *::*;\", <><x><y/></x></>))) { default: throw true;break;  }");
tryItOut("/*for..in*/for([__proto__, __iterator__] = [<><x><y/></x></> == <x/> if (<x><y/></x>)].yoyo('fafafa'.replace(/a/g, <x><y/></x>) instanceof (prop = undefined).__defineSetter__(\"constructor\", function(y) { yield y; if(__iterator__) yield this; else  if (@foo) let __parent__\f;; yield y; })) in (this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"const __count__;\"))))[this.unwatch(\"__parent__\")]) {let ((({__proto__ = <x/> getter: ({}).hasOwnProperty, prop: @foo }))(__noSuchMethod__ = *), ({ __iterator__: case -0: break;  }) = __noSuchMethod__.__proto__) { /*for..in*/for(const __noSuchMethod__.__proto__ in ((({}).__lookupGetter__)(__proto__))){export *; } }export *; }");
tryItOut("with([z1])return window;");
tryItOut("/*for..in*/(for(const String(this) in ('haha'.split))(<bbb xmlns=\"4.\"><employee id=\"1\"><name>Joe</name><age>20</age></employee><!--yy--></bbb>(__count__)))/*for..in*/\tfor(__noSuchMethod__ in ((<><x><y/></x></>)( \"\" )))__noSuchMethod__, __noSuchMethod__ = window;");
tryItOut("if(Date()) {let __proto__ = __count__, __parent__ = <><x><y/></x></>; }");
tryItOut("with(void (yield [[]] ? window : <x/>)){switch([@foo if (undefined)]) { case \nfunction ([y]) { }: if(<x><y/></x>) { if (__count__) let constructor = *::*; else (@foo);} } }");
tryItOut("//h\nwith({prototype: this.__defineGetter__(\"prop\", /a/gi)}){/*infloop*/do yield 0/0; while(__noSuchMethod__);const prop, [constructor, __iterator__, function::constructor, ]; }");
tryItOut("let(__count__ = <x><y/></x>, prototype) { return {};");
tryItOut("if(<><x><y/></x></>) { if (*) {new Function }} else {var __noSuchMethod__; }");
tryItOut("break M;");
tryItOut("{gc()\n/*for..in*/M:for(const __noSuchMethod__ in (@foo.__defineGetter__(\"__count__\", function  __parent__ (__count__) { return false } ))) {/*infloop*/for(var __noSuchMethod__ = undefined; {}; undefined) {throw @foo;let __proto__ = 3.141592653589793, constructor; } } }");
tryItOut("/*infloop*/for(new ([window].filter(function (__iterator__)3))(); eval(\"(-0) >>>= /x/g \",  /* Comment */<y><z/></y>); ({ __count__: __proto__ }) = ({ prop: __iterator__, __proto__: __parent__ })) {M:if( /x/g ) {var __proto__ = <x><y/></x>; } else  if (<x><y/></x>) {export prototype; } else export *; }");
tryItOut("let (({ __parent__: prop }) =  \"\" , __count__ = ;.__noSuchMethod__ = ({a2:z2}) > __count__.(window)) { L:if((try { prop } catch(__noSuchMethod__) { [[1]]; } finally { const __proto__, prop; }  = (__iterator__ = @foo))) { if ( /x/g .throw(constructor)) <x><y/></x>; else {{} }} }");
tryItOut("try { for(let y in [5,6,7,8]) try { this.zzz.zzz; } finally { throw __noSuchMethod__; }  } catch(__count__ if (#2=(__iterator__ ? *::* : 0x99).__iterator__)(({prototype getter: (({}).__lookupGetter__).apply }))) { {/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <><x><y/></x></>) ((new Function(\"\"))).apply } } catch(__iterator__ if ({} > __parent__ >>> true)) { (\n<x/>); const <xxx>{__noSuchMethod__}</xxx>; } catch(__proto__ if (function(){let(delete) { __parent__})()) { this.zzz.zzz; } ");
tryItOut("/*infloop*/L:do let prop; while( { yield this } );\f");
tryItOut("with(.__lookupSetter__(\"prototype\"))/*infloop*/for(var __count__ = 0x99; window; <x/>) *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in *::*) break ;");
tryItOut("while((yield false) && 0){/*infloop*/for(let __iterator__; this; this) return; }");
tryItOut("(function () { let prop; } ).call");
tryItOut("if(*::*) { if ((1e4--)) let prototype, function::__iterator__ = <x><y/></x>;} else /*for..in*/L:for(prop in <y><z/></y>) return;");
tryItOut("/*infloop*/for(const __count__; 1e-81; __parent__) {yield  \"\" ;throw <><x><y/></x></>; }");
tryItOut("{([[]]);gc() }");
tryItOut("L:if((({ prototype: __count__, constructor: [, , __proto__] }) = [[], , ({ prototype: __parent__, constructor: __proto__ }), ({ constructor: __parent__, prop: __parent__ }), [, , , constructor, ]])) yield [,,z1];\f else  if (new (function (__noSuchMethod__, __parent__)<x><y/></x>)(false for each (__parent__ in __parent__),  /x/ ) for (let (__count__) #1# ? <x><y\f/></x> : <x><y/></x> in @foo++.hasOwnProperty(\"<><x><y/></x></>['__count__']\"))) {if(new Function) { if (*) export constructor; else {__noSuchMethod__ }} } else L:with(\tnew (null)())gc()");
tryItOut("{if([1,2,3,4].map) { if ((__iterator__.constructor = <><x><y/></x></>)) {} else {(0/0); }} }");
tryItOut("if(<x/>) { if (__iterator__) return; else }");
tryItOut("/*infloop*/M:do {throw <><x><y/></x></>;; } while(export *);");
tryItOut("L: {do V\n{} while(((0/0 && prototype)) && 0);{const __count__ =  '' , __iterator__; const prototype; } }");
tryItOut("let (__parent__) { return; }");
tryItOut("yield this\n");
tryItOut("return;");
tryItOut("/*infloop*/for(let __parent__; (__noSuchMethod__.__noSuchMethod__); __noSuchMethod__.__parent__ getter= function (prop, constructor) { {} } --) export __iterator__;");
tryItOut("let(__parent__) { gc()");
tryItOut("let ([[], ({ constructor: ({ __iterator__: __iterator__ }), __parent__: ({ __proto__: __count__ }) }), , ({ __noSuchMethod__: ({ prototype: prototype, __proto__: __noSuchMethod__ }) })], prop) {  }");
tryItOut("/*for..in*/for(const __count__ = null in []) ");
tryItOut("\fM:do {if(\nwindow) return; else  if ((new Function)(prop, this)) prototype = <><x><y/></x></>, __parent__; else yield; } while((new ({}).hasOwnProperty(yield (this)[[z1]])) && 0);");
tryItOut("if(@foo.eval(<><x><y/></x></>)) (<x><y/></x>); else  if (__proto__.__iterator__ getter= <y><z/></y>) (({a2:z2}));");
tryItOut("{{} }\nthrow ({});\n");
tryItOut("{do {break L;return; } while(((<x><y/></x>.yoyo(#1=[#1#]))) && 0);/*infloop*/for(@foo; ({ get prop __count__ (__count__) /x/g ,  set  \"\"  constructor () { export *; }  }); #3={a:#3#}.__lookupGetter__(\"__proto__\")) {break ;__iterator__ } }");
tryItOut("if({const __count__;yield; }.__defineGetter__(\"__proto__\", (1 for (x in [])))) { if (<bbb xmlns:ccc=\"([1,2,3,4].slice).apply\"><ccc:eee></ccc:eee></bbb>) let (({ __parent__: __proto__ }), ({ __proto__: __iterator__ }) = __parent__%=constructor)\n { /*for..in*/for(const prop = __parent__ =  /x/g  in <><x><y/></x></>) {(0.1)\n{} } }} else export constructor;");
tryItOut("switch(new (undefined)(<><x><y/></x></>)) { default: break;  }");
tryItOut("( /x/g .@*)");
tryItOut("M:while((<x/>) && 0){return;{} }");
tryItOut("let (__proto__, [prototype]) { export prototype; }");
tryItOut("return;");
tryItOut("L:while((<x><y/></x>.__proto__) && 0)let __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in  /x/g ) {{}yield; }");
tryItOut("if(@foo) if(033) var constructor = __proto__, __proto__ = this; else {M:switch(constructor) { case __proto__: default: return  \"\" ;break;  } }");
tryItOut("/*infloop*/M:for(let prototype; ([<x/>.unwatch(\"__iterator__\")].some(function  __parent__ () { /*infloop*/for(prototype; 0/0; <y><z/></y>) {undefined;let __iterator__, prototype = <x><y/></x>; } } )); (<><x><y/></x></> && new (this)(<x/>, __proto__))) {if(<x><y/></x>) {yield *;var constructor, __iterator__; } else {}false; }");
tryItOut("var x::__iterator__ = {};export prototype; const __parent__;");
tryItOut("for(let y in [5,6,7,8]) __proto__ = function::prop;");
tryItOut("M:if(null.prop) {if([z1,,].unwatch(\"prototype\")) ; else  if (this.zzz.zzz) {var __proto__, __proto__ = <x><y/></x>;let __parent__ = __count__; } else {x::__noSuchMethod__ = <><x><y/></x></>; }const constructor, __count__ = []; } else  if () let function::__noSuchMethod__, __count__ = #1=[#1#];");
tryItOut("/*infloop*/for((new <x/>.*); new ((function(q) { return q; }).apply)(); function (__proto__) { return [[1]] } ((__iterator__ = 1e81), @foo).__count__) yield function ([y]) { };");
tryItOut("/*infloop*/for(__proto__ = [11,12,13,14].map; this.@*; 3/0) default: return;break; case (eval(\"var set = 4., __iterator__;\", constructor)): ");
tryItOut("/*infloop*/L:for(prop; (<y><z/></y>.isPrototypeOf( /x/g )); false.isPrototypeOf(<y><z/></y>)) with({prototype: 3.141592653589793})(@foo);");
tryItOut("switch('fafafa'.replace(/a/g, eval)) { default: break; case null: <x><y/></x>;break;  }(1e4).__defineSetter__\nvar __count__;\f");
tryItOut("M:switch([z1]) { case <><x><y/></x></>: break;  }\nif([,,]) { if ((<> with </>.throw(undefined)\n)) {export *; } else -0\ngc() const __proto__;}");
tryItOut("");
tryItOut("if(1e81.watch(\"__parent__\", ({}).__lookupGetter__)) { if (prototype = <><x><y/></x></>) yield;} else __iterator__;");
tryItOut("gc()export *;");
tryItOut("do {export *; } while(( /* Comment */Math.sin().valueOf(\"number\")) && 0);");
tryItOut("/*for..in*/for(var ().__parent__ in ((__count__ = <><x><y/></x></>)(true)))new Function");
tryItOut("if(window) {yield;let __noSuchMethod__, prop; }");
tryItOut("with({prop: (p={}, (p.z =  ''  .. this)())}){yield; }");
tryItOut("yield Object(each | [[]], (let (__count__ = null, __count__ = this) 1e+81));");
tryItOut("/*infloop*/do {constructor = <x/>; } while(<x><y/></x>.unwatch(\"__iterator__\"));");
tryItOut("L:if(new (<x><y/></x>)()) if( '' ) {yield 0.1; '' ; } else continue L; else  if (<xxx {__iterator__}={new function (__proto__, __parent__) { export *; } ()} />) if(<><x><y/></x></>) yield; else {;function(y) { yield y; return;; yield y; } } else export *;{/*infloop*/while(*){return; } }");
tryItOut("if(((__parent__) ? this.__proto__ = <><x><y/></x></> : (({prototype setter: function () { yield @foo } ,  get __proto__ __noSuchMethod__ (__parent__) { yield #1# }  })) %= [,,].throw(__iterator__)/*)) {switch(<x/>) { default: break;  } } else  if ((function ([y]) { })()((constructor = [true].some(function (*, prop)<y><z/></y>)), ((/a/gi)()))) {;let __noSuchMethod__; } else gc()");
tryItOut("M:if((constructor.__noSuchMethod__).yoyo(false).__lookupGetter__(\"prop\")) {__proto__ = __iterator__; } else export constructor;");
tryItOut("/*infloop*/for(prop = ; ({ set __noSuchMethod__() { 'haha'.split } , prototype getter: gc }); (({__iterator__ setter: <x><y/></x>, function::prototype:  /x/  }))) export *;");
tryItOut("switch(*) { case (([ /x/g ])(<x><y/></x> <<  \"\" , *)): break; function (constructor, __parent__) { return <x/> } break;  }");
tryItOut("M:if(__parent__ = constructor) { if (gc()) return; else {yield; }}");
tryItOut("with((Math.pow(<x/>).@foo))/*for..in*/for(let x::__parent__ = () in <x/>) function::__proto__ = false, Math.sin;");
tryItOut("/*infloop*/M:for((({__proto__: break ; })); ((<><x><y/></x></>)[<x><y/></x>]); new Object()) {/*for..in*/for(let prototype in undefined) {prototype, constructor; } }");
tryItOut("return;");
tryItOut("if(-1) {return;{} } else yield;");
tryItOut("L:with({__iterator__: (prop = <x>\t<y/></x>)});");
tryItOut("eval const function::constructor;");
tryItOut("{export prop; }");
tryItOut("while((Number()) && 0)\fvar __count__ = [,], constructor = __parent__;");
tryItOut("{\fvar constructor;yield\n }");
tryItOut("export __count__; const constructor;");
tryItOut("gc()continue M;");
tryItOut("{/*infloop*/for(window; __count__; <x><y/></x>) switch([ \"\" ].filter(Function)) { default: yield;break;  } }");
tryItOut("/*infloop*/do var constructor = window, __noSuchMethod__; while(0/0);");
tryItOut("try { __proto__ } finally { return @foo; } ");
tryItOut("throw <x><y/></x>;let __parent__;");
tryItOut("yield ((p={}, (p.z = window)())).eval(({__proto__: window, __noSuchMethod__ getter: @foo }));");
tryItOut("((<x/>)(<>default: (-3/0);break; </>).__iterator__)");
tryItOut("/*for..in*/L:for(var prototype in 1e-81) /*for..in*/for(const __parent__ = __noSuchMethod__.__iterator__ in prototype =  \"\" ) ");
tryItOut("if(let (__parent__ =  /x/g ) (false == @foo)) { if (__count__ >>> *) {{}(1.2e3); } else {const prop = prototype, __count__ = [z1];return 3; }}");
tryItOut("while((((p={}, (p.z = <x/>.__defineGetter__(\"__parent__\", function  prototype (__count__, __noSuchMethod__) { yield __proto__ } ))()).__defineGetter__(\"prototype\", gc))) && 0)with({__noSuchMethod__: typeof this})<><x><y/></x></>;");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/do export __count__; while(false);");
tryItOut("throw __count__;");
tryItOut("/*infloop*/L:do L: {[1,2,3,4].slice } while((-0));");
tryItOut("do {/*infloop*/L:for(({ __iterator__: __iterator__ }) = <y><z/></y>; ('fafafa'.replace(/a/g, (window).watch)).yoyo([*::*].sort(this)); [1,,] instanceof *::*--) {/*infloop*/for(const prop; {}; 5.0000000000000000000000) yield (; }let prop, <x><y/></x>; } while(([11,12,13,14].some) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let __noSuchMethod__ = (({constructor: -3/0})); 0.1.hasOwnProperty(\"__iterator__\"); \f(__count__.constructor).prop) {__iterator__ = ({}), __count__;\fwith(__iterator__ =  /x/ .__defineSetter__(\"__proto__\", function  __noSuchMethod__ () { yield this } ))yield ({}); }");
tryItOut("throw __count__;");
tryItOut("L:while(((uneval(true))) && 0){(prototype).watchyield; }");
tryItOut("L:if(<><bbb xmlns:ccc=\"(new (((uneval(*::*(const __parent__ = <x><y/></x>;)))))(-3/0.eval(<x><y/></x>).__lookupGetter__(\"prop\")))\"><ccc:eee></ccc:eee/*\n*/></bbb></>) {/*for..in*/for([__count__, prototype] = (-1).__lookupGetter__(\"prototype\") in ({__count__: function::__iterator__, __iterator__ getter: [,,z1] })) {}/*infloop*/while(*::*){} } else (true);");
tryItOut("/*for..in*/for(var [__parent__, __parent__] = ((p={}, (p.z = __parent__.__parent__ = 1e4)())) in new RangeError()) {if(<><x><y/></x></>) { if (0)  else } }");
tryItOut("return <x><y/></x>;");
tryItOut("{M:while((#3={a:#3#}) && 0){var __noSuchMethod__; }with(this.__defineGetter__(\"__count__\", gc))break ; }");
