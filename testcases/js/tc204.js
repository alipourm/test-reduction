tryItOut("/*infloop*/do yield constructor; while(this.__defineGetter__(\"__iterator__\", (*).__defineSetter__));");
tryItOut("true");
tryItOut("/*infloop*/for(const __noSuchMethod__ = <x><y/></x>; <x/>; true) {yield <><x><y/></x></>; }\n\n");
tryItOut("/*infloop*/for(var prototype = (new this.__defineGetter__(\"prototype\", Function)); <x><y/></x> / @foo; ~<x/>.throw(<><x><y/></x></>)[typeof false]) return .2;");
tryItOut("return __iterator__ = __noSuchMethod__-=<x/>;");
tryItOut("while(( '' ) && 0){gc() }");
tryItOut("let (({ prototype: __noSuchMethod__ })) { M:with({__proto__: __count__.prop setter= function(q) { return q; }})export *; }");
tryItOut("do L:if(window) { if ([1,,]) {var __parent__ = [z1,,], get = ({a2:z2});return __parent__; }} else export __count__; while(((new Object((*::* instanceof window.*), [11,12,13,14].map)).propertyIsEnumerable(\"prototype\")) && 0);");
tryItOut("if([15,16,17,18].sort(Math.pow, false)) {function (__count__) { yield __noSuchMethod__ }  } else  if (({ constructor: [__count__] }) = ({ prototype: ({ __proto__: __noSuchMethod__, __proto__: __proto__ }) })) {throw <x><y/></x> > *;gc() }");
tryItOut("yield  \"\" ;");
tryItOut("constructor = @foo, __proto__ = <><x><y///h\n></x></>\n");
tryItOut("return <x><y/></x>;");
tryItOut("{return; }");
tryItOut("return function(id) { return id };");
tryItOut("/*infloop*/while(({prop: (eval(\"\", ;)) }))<x><y/></x>");
tryItOut("with(<y><z/></y>.__noSuchMethod__ = <x><y/></x>.isPrototypeOf([].watch(\"prototype\", new Function))){switch((p={}, (p.z = this)())) { default: break; case  /x/g  < <><x><y/></x></>: break; gc()break;  } }");
tryItOut("/*infloop*/for(const __count__ = (new Error([15,16,17,18].filter(function  yield; () { export prototype; } , (!__count__.prop = undefined)), (-0 % false))); (void this > this.__defineGetter__(\"__iterator__\", gc)); <y><z/></y>.eval((-1))) {yield; }");
tryItOut("/*infloop*/for(let __proto__; this.zzz.zzz; (p={}, (p.z = (this for (constructor in constructor)))())) {yield <x><y/></x>;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/while(new Date()){export *; } if (#0=[@foo])");
tryItOut("switch((<x><y/></x>)) { case 8: default: {}break; if(*::*) break ; else  if (<><x><y/></x><//h\n/>) let __noSuchMethod__; else {return [1,,]; }{}break; case (([1])( \"\" )): case ([undefined(<><x><y/></x></>) if (true)]): break; case <x><y/></x> instanceof __count__.@foo: break;  }");
tryItOut("/*infloop*/do with({__count__: 0/0}){( \"\" ); } while((true if (.2))); const __noSuchMethod__;");
tryItOut("try { throw constructor, prop; } catch(__count__) { ; } finally { ; } ");
tryItOut("let([({ __proto__: [, , __parent__] })] = ((#1=(window.throw(<x/>))).@foo)) { throw StopIteration;");
tryItOut("do {return  /x/g ; } while((*) && 0);");
tryItOut("/*infloop*/for(__count__ = *; new (#3={a:#3#})(((<x><y/></x> for each (__parent__ in <x><y/></x>)))); new ((1 for (x in [])))(__proto__, (0.@*))) if(0.1) return <x/>; else  if //h\n(window) {{} }");
tryItOut("M:if(<x><y/></x>.(this)\f) L:with({__parent__: let __parent__ = undefined, prototype = prototype})/*for..in*/for(\fprototype = [1,,] in <><x><y/></x></>) export __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in  /x/g ) continue ;");
tryItOut("if(new function  __count__ ()({} >>= 1e81)(({__proto__: __parent__.constructor getter= function  constructor ()*::*}), (__noSuchMethod__.( /x/ )))) {throw __noSuchMethod__; } else  if (window >>>=<y><z/></y>.__count__ = (new ( /x/g )(false, undefined))) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__(#1=[#1#])\f in <x><y/></x>) Function }");
tryItOut("/*infloop*/L:while(<x><y/></x>){export *;let constructor; }");
tryItOut("{return #3={a:#3#}.yoyo(__noSuchMethod__); }");
tryItOut("/*infloop*/for(let prototype = ((Math.pow).apply); \t '' ; __noSuchMethod__.let setter= <x/>) {return __count__;(prototype, __iterator__); }");
tryItOut("/*infloop*/do let __iterator__; while(([] = constructor));");
tryItOut("{break ;yield; }");
tryItOut("/*infloop*/do let (prop = *\n) { var __count__ = (-0), constructor = *::*; } while(new window().((@foo - <><x><y/></x></>)));");
tryItOut("with(yield window){const set = constructor, x::__noSuchMethod__ = window;__iterator__ = ({a2:z2}); }");
tryItOut("if([false].map(({}).hasOwnProperty)) {window;*; } else  if ([<><x><y/></x></>]) ;");
tryItOut("/*for..in*/for(var prototype.__proto__ in ((eval)(__noSuchMethod__ = ++this.zzz.zzz /= <><>(<y><z/></y>)</></>))){with({constructor: true}){gc() }M:if([15,16,17,18].some(<>__iterator__</>, #3={a:#3#})) gc() else return <><x><y/></x></>; }");
tryItOut("this.zzz.zzz\n(<x><y/></x>);");
tryItOut("/*infloop*/while( /x/g ){(function(q) { return q; }).callthrow this; }");
tryItOut("do {yield <x/>;return 3/0; } while((({ get prototype __iterator__ (function::__proto__) { break ; }  })) && 0);");
tryItOut("if((null.__defineGetter__(\"prototype\", [1,2,3,4].map))) do {let __parent__ = <x/>;continue M; } while((prop) && 0); else  if () {let ; }");
tryItOut("{}/*for..in*/for(let <!--yy--> in ((Function)( /* Comment */ /x/g ))){yield; }");
tryItOut("");
tryItOut("if(__count__) {continue M; }");
tryItOut("switch(let (__parent__ = *, prototype) prototype ? [11,12,13,14].map : /a/gi()) { case : break; default: break; case 8: do export *; while((<y><z/></y>) && 0);case (String((*::* ? <><x><y/></x></> : window))): case new 'haha'.split((5.0000000000000000000000).call((<x><y/></x> &  /x/g ), \n<>\t<x><y/></x></>)).propertyIsEnumerable(\"__noSuchMethod__\"): break;  }");
tryItOut("{(<x><y/></x>)\n{} }");
tryItOut("L:switch(((((uneval(<><x><y/></x></>))).__defineSetter__(\"constructor\", (function  prop () { yield undefined } ).call)) -=  /x/  ? (({ prop: __iterator__ }) = (new 'haha'.split(<x/>, this))) : window > window)) { case __count__: with((Math.sin).call((eval(\"return undefined;\", 1e4)), (({__proto__: this }))))with({__iterator__: <><x><y/></x></>}){yield 0x99; }if([11,12,13,14].map) {yield;yield null; } else  if (__noSuchMethod__) {(<x><y/></x>);yield; } else return;break; \n/*for..in*/for(var __iterator__ in -0) case 1: let (({ __iterator__: __iterator__ }), __proto__) { gc() }default: M:if(eval(\"5.0000000000000000000000;\", this)) { } else  if (*::*.__count__) {continue L;/*\n*/ }/*infloop*/for(let ({ __parent__: ({ __iterator__: __count__, __noSuchMethod__: [__noSuchMethod__, __parent__, , , __proto__] }) }) = constructor = <y><z/></y>; new -3/0(); __iterator__) __iterator__, prop = <><x><y/></x></>;break; break; break; gc()break; case (uneval(@foo)): break;  }");
tryItOut("/*infloop*/for(const __proto__; 0; <x/>) {throw (function ([y]) { })(); }");
tryItOut("/*for..in*/M:for(var [constructor, __proto__] = (__iterator__.__count__ = undefined / null).propertyIsEnumerable(\"prop\") in (__count__)) {/*infloop*/for(this; true; *::*) {gc()*::* } }");
tryItOut("/*infloop*/L:for(var __count__; __parent__ = <y><z/></y>; <><x><y/></x></>) {__parent____proto__ = <x><y//h\n/></x>; }");
tryItOut("while((((eval(\"<x><y/></x>\", this)) <= (this.constructor %= ([z1].eval(this))))) && 0){yield *::*;const prop; }");
tryItOut("throw __parent__;");
tryItOut("M:if(\".watch(\"prototype\", *) >>= (+({a2:z2}))) break L;");
tryItOut("gc()\nreturn;\n");
tryItOut("with({__parent__: <xxx {constructor}={constructor} />.(new null([[]]))}){if(case 3: throw [1,,];) break L; else  if (<><x><y/></x></>) {const __noSuchMethod__ = <x/>, __proto__; } else  }");
tryItOut("let (__count__ = ((uneval([[]]))), __iterator__ = true) { export __noSuchMethod__; }");
tryItOut("if((new ({}).hasOwnProperty())) /*for..in*/for(const __parent__ in ((Math.sin)([ /x/ ].sort(Math.sin)))){/*infloop*/for(<><x><y/></x></> >>=  \"\" ; ((/a/gi).call(new ({}).hasOwnProperty(*.__lookupGetter__(\"prop\")), (-null), (({__count__ setter: <x><y/></\nx> }))));  '' .__count__ /= __count__ = #1#) gc() }");
tryItOut("M:if((<x/> if (*)).throw(<x/>)) throw  \"\" ; else return;");
tryItOut("/*infloop*/M:for(let __count__ = prototype; 1.3; __count__) {return; }");
tryItOut("with({__count__: ((__iterator__.function::__proto__ setter= (function () { return (<>null</>)(function ([y]) { }) <<= (true)(<><x><y\r/></x></>, 1e4) } ).apply).__noSuchMethod__)}){if((-0)) { if (<x><y/></x>) {let prototype; } else ;}continue ; }");
tryItOut("L: {L:switch(__parent__.(#3={a:#3#})) { case ({ set constructor __noSuchMethod__ (prototype, __proto__), __proto__: (this.__defineSetter__(\"__parent__\", ({a2:z2}))) }): throw <x><y/></x>case <x/>: break; break; case 1e81 <= window: /*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype in <y><z/></y>) continue M; } }");
tryItOut("/*infloop*/while(this.zzz.zzz){(function  prop (__noSuchMethod__, __noSuchMethod__) { return false } ).call }");
tryItOut("while((<{__noSuchMethod__}>yyy</{__noSuchMethod__}>) && 0)if(undefined) { if (*::*) {return; } else {}}");
tryItOut("/*for..in*/L:for(__noSuchMethod__.prop\t in  /x/ ) return (-0);");
tryItOut("let (__count__) { yield this - ({}); }");
tryItOut("if((<y><z/></y> +  \"\" )) { if (case __noSuchMethod__.(__proto__.prototype getter= [1,2,3,4].map): break; /*infloop*/for(undefined *= @foo; * >>> <x><y/></x>; __proto__ =  /x/g ) ([,,z1]);default: yieldbreak; case 7: \nbreak; case 2: break;  = (({ prototype: ({ constructor: ({ prototype: prototype, function::__parent__: constructor }) }) }) = [])) if(prototype = __noSuchMethod__.__iterator__) { if ((yield <><x><y/></x></>).constructor = __count__.isPrototypeOf(undefined)) {return; }} else {} else try { return __noSuchMethod__; } finally { yield {windowyield @foo; }; } }");
tryItOut("if(<><x><y/></x></>.eval(<x><y/></x>).__proto__ = constructor.__parent__ setter= [1,2,3,4].map) { if (__count__ = (delete <><x><y/></x></>.__iterator__).@*) /*infloop*/do {export *; } while([z1,,]);} else {/*for..in*/for(var prop = __parent__ in 3.141592653589793) returnreturn <><x><y/></x></>; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) try { export prop; } catch(constructor if (function(){throw this;})()) { {} } catch(__count__) { return <y><z/></y>; } finally { ; } ");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {with((.2)(<x><y/></x>) = prototype = undefined)gc()if((this.zzz.zzz)) {var prototype = <x><y/></x>;export *; } else  if (__parent__ = constructor) {(this);return <x/>; } else yield; } else {return (uneval(*::*)); }");
tryItOut("if((<x><y/></x>.(<><x><y/></x></>))) {[]; }");
tryItOut("/*for..in*/L:for\t(const prop =  ''  in  /x/g ) return;");
tryItOut("if([].yoyo(3)) { } else  if (((true).call)) window;");
tryItOut("if(0/0 /  \"\" ) return; else /*for..in*/for(let __proto__ in ((/a/gi)(<y><z/></y>)))const prototype = <x><y/></x>;");
tryItOut("/*infloop*/while((uneval(<y><z/></y>))){( \"\" );export *;\t }");
tryItOut("L:do {[1,2,3,4].slice(0x99); } while((<y><z/></y>) && 0);");
tryItOut("if(window) {export *; } else { /x/ ;continue L; }");
tryItOut("L:if(<><x><y/></x></>.propertyIsEnumerable(\"function::__count__\")) {export *; } else {gc(); }");
tryItOut("while((\n[[]].hasOwnProperty(\"__iterator__\").valueOf(\"number\")) && 0){if((true.__defineSetter__(\"constructor\", (*::*).__defineSetter__) , constructor = this)) {break ; } }\nM:if(__parent__) { if (( ''  > <><x><y/></x></>)) if(<><x><y/></x></>) return; else {(this);__iterator__; }} else var delete = this, constructor;\n");
tryItOut("return;");
tryItOut("");
tryItOut("/*for..in*/for(let __iterator__ = (__iterator__.__proto__ setter= function  constructor ( { return __count__ } )true) in arguments) var prototype = *, __iterator__ = <x/>;");
tryItOut("if((({}).__defineSetter__(\"__parent__\", function () { gc() } ))) ([,,]); else {throw [[]]; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in  /* Comment */new (this)()) {__count__, __noSuchMethod__ = false; }");
tryItOut("/*for..in*/for((__count__) in (<x><y/></x> .@x:: *)(*::*.__count__ * 0/0)) ;");
tryItOut("window");
tryItOut("M:if(yield %= ) new (new Function(\"__parent__ = undefined, __noSuchMethod__;\"))(<y><z/></y>) else  if (033) {if(constructor = <><x><y/></x></>) {yield @foo; } else  if (__parent__) {\f } else {{}export __count__; } } else {M:if(window) { if (<x><y/></x>) } else let __iterator__, prop = window; }");
tryItOut("while((((null)())++) && 0){yield; }");
tryItOut("L:\tif(((yield __proto__ = <x><y/></x>))) /*\n*/{ if (((<x/> |  /x/g ).__lookupGetter__(\"__parent__\"))) {gc()export __iterator__; } else let __iterator__;}");
tryItOut("if(-1) { if (__proto__) {throw <x><y/></x>;null;__parent__ } else {yield *::*;let prototype, prototype;\f }}");
tryItOut("/*infloop*/for(const \t(-3/0)(<x><y/></x>) =  /x/ ; (<y><z/></y> ? * :  '' ++) ? new window((__count__ >= prototype)) : new (gc)(<x><y/></x>); (p={}, (p.z = ((constructor+=<x><y/></x>).valueOf(\"number\")))())) {new Function }");
tryItOut("let(({ prototype: ({ __iterator__: __parent__, prototype: prop }), constructor: ({ __proto__: __proto__ }) }), __proto__) { try { return; } catch(__parent__ if (function(){if(undefined) {break L; } else  if (*) })()) { with({}) { __noSuchMethod__ = <x><y/></x>, prop; }  } catch(__count__) { let(prop = *) { ; } ");
tryItOut("/*for..in*/for(const (this.__defineSetter__(\"__parent__\", <x><y/></x>))(new __noSuchMethod__(/*\n*/@foo, 0.1)) in (((window.propertyIsEnumerable(\"prop\")))(new Array(<x/> !==  \"\" )))){let {setter, prop; };let constructor = window, __count__ = [,,z1]; }");
tryItOut("L:if(1e4.constructor = function ([y]) { }[((false)[null])]) { if ((1.2e3 == prototype) >= this.__defineGetter__(\"__parent__\", function  prototype (prop, __iterator__) { return undefined } )) /*for..in*/M:for(setter in null) gc() else break ;}");
tryItOut("\n");
tryItOut("/*infloop*/while(\n/a/gi){let prop }");
tryItOut("if() return; else  if (((yield {}))) ; else [z1,,];");
tryItOut("with((Error(({a2:z2})).@foo)){let (function::__proto__, __parent__) { ; } }");
tryItOut("do {/*infloop*/M:for(@foo.prop; constructor |= [,];  /x/ ) {{}yield 1e+81;throw null; } } while((__parent__ = arguments) && 0);");
tryItOut("if((Number(prototype.@foo))) {gc()break M; }");
tryItOut("/*for..in*/M:for(let [prototype, constructor] = (new Exception()) in (eval(\"<x/>;\", <x><y/></x>))) {continue ;/*for..in*/for(let constructor = <><x><y/></x></> in <x><y/></x>) {break M; } }");
tryItOut("/*infloop*/for(var constructor; #3={a:#3#}; ({__parent__ getter: this, __noSuchMethod__: constructor%=<x><y/></x> })) {throw  '' ;function  prototype (constructor) { return #1=[#1#] }  }");
tryItOut("/*infloop*/for([(({__proto__: null })) for (__count__ in ({})) for (prototype in undefined)]; let (__count__, __proto__) 0x99; (yield __parent__.throw(1e4))) {(<><x><y/></x></>);#1=[#1#] }");
tryItOut("do {[1,2,3,4].slicereturn; } while((([(#0=1.2e3) for each (__proto__ in arguments) for (__proto__ in *::*)])) && 0);");
tryItOut("with({prop: this.__defineSetter__(\"prototype\", ({}).hasOwnProperty)})/*infloop*/while(undefined)continue L;");
tryItOut("while((__iterator__.constructor) && 0)this;\n__count__;\n");
tryItOut("/*infloop*/while(+ /x/g .@*){/*infloop*/do let prototype = *::*; while(this)/*infloop*/M:for(<x><y/></x>; undefined;  \"\" ) var __count__ = prop; }");
tryItOut("/*infloop*/for(var __parent__ = (#0=({__proto__: window}))[delete <></>].__parent__ * window != ({constructor: (-0) }); ((-0) in @.throw(window.__lookupGetter__(\"constructor\"))); (this /= <x/>)) {export __iterator__;/*for..in*/L:for(let __parent__ in (([1,2,3,4].map)((*.yoyo(null))))){} }");
tryItOut("M:while(((new  \"\" ())) && 0){throw function ([y]) { };(this); }");
tryItOut("do {continue ;throw <><x><y/></x></>; } while((<x><y/></x>) && 0);");
tryItOut(" get __iterator__ prop ()(function () { yield * } ).__defineSetter__(\"constructor\", gc)");
tryItOut("{return; }");
tryItOut("/*for..in*/for(const [constructor, prop] = null in ) {prototype =  /x/ ; }");
tryItOut("while(((__count__.prototype =  /x/g )) && 0){/*for..in*/for([constructor, constructor] = 0/0 ..  /x/  in @foo >>> __parent__) {let __proto__ = [z1,,], __count__ = this; } }");
tryItOut("let (__parent__) { /*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in  /x/g ) ; }");
tryItOut("if([1]) {function(q) { return q; }; } else  if (null) continue L\n");
tryItOut("/*for..in*/for\r(let __iterator__ = (prop = <><x><y/></x></>) &= prop =  \"\"  in true) ;");
tryItOut("let (__iterator__ = new eval( /x/g , __parent__: <><x><y/></x>< with({}) export *;/>)) { export x::__iterator__\nexport __count__; }");
tryItOut("/*for..in*/for(const (( \"\"  >>>=window)([15,16,17,18].map(gc\t, <><x><y/></x></>\f))) in __proto__ = <><x\f><y/></x></>) let __noSuchMethod__ = *::*, constructor;");
tryItOut("switch((\n<y><z/></y>)) { default: break; case (yield undefined): yield;break; case __iterator__: return this; }");
tryItOut("M:if( \"\" ) yield;");
tryItOut("let prototype, __noSuchMethod__");
tryItOut("do {yield; } while((#1=<y><z/></y>.__defineSetter__(\"x::__count__\", ({}).hasOwnProperty)) && 0);");
tryItOut("yield this\nlet prop =  \"\" \n([z1,,]);\n{}\n");
tryItOut("/*infloop*/do if( /x/ ) const prop = window; else {\r } while((eval(\"/*for..in*/L:for(var __noSuchMethod__ in window) {true;export *; }\", this.__defineGetter__(\"__parent__\", (new Function(\"yield <x><y/></x>;\"))))));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in (window.prop)) while((new <><x><y/></x></>(<y><z/></y>, <x/>)) && 0){(*).__defineSetter__gc() }");
tryItOut("let (constructor) { true; }");
tryItOut("\nwith(((uneval(*))))window");
tryItOut("/*infloop*/for(let prop = (({ __proto__: __parent__ }) = __count__.constructor = false.__proto__ = *::*); [11,12,13,14].filter; eval(\"/*infloop*/M:do {} while(@foo);\", [1,,])) let __parent__ = [[1]];");
tryItOut("/*infloop*/L:do {{} } while(new ([,,])() &= (-0));");
tryItOut("/*infloop*/M:while(__noSuchMethod__ = <><x><y/></x></>)gc()");
tryItOut("/*infloop*/L:for(<y><z/></y>; #1=({prototype: window}) & <x/> *= <x/>; __parent__ === this /= function(id) { return id } > 'fafafa'.replace(/a/g, function (__iterator__) { return constructor } )) with({prop: window})return window;");
tryItOut("/*infloop*/M:for(const __iterator__; (( \"\" ).__defineSetter__)(__noSuchMethod__); (window ? constructor = * : <><x><y/></x></> < <x><y/></x>)) {__noSuchMethod__ = function(y) { yield y; throw <><x><y/></x></>;; yield y; }, __count__; }");
tryItOut("if((<x><y/></x>.valueOf(\"number\"))) { if (<>[1,2,3,4].map</> %= <><x><y/></x></> :: __count__.prop getter= [1,2,3,4].slice - *::*.valueOf(\"number\").yoyo(let (prop, __parent__ = <><x><y/></x></>) <><x><y/></x></>)) {__parent__ } else {return; }}");
tryItOut("\n{}");
tryItOut("/*for..in*/for(const __count__(<><x><y/></x></>) in <x><y/></x>) { }");
tryItOut("return;");
tryItOut("let(__iterator__, constructor.prototype) { var [__count__, ] = |, __iterator__;");
tryItOut("/*for..in*/M:for(const (new )['constructor'] in (this.__defineSetter__(\"__iterator__\",  \"\" ))) {yield <x/>; }if(@foo.constructor) { if ([1,2,3,4].map(<x><y/></x>.( '' ), new eval())) {gc() } else /*infloop*/for(prototype; function ([y]) { }; (<x><y/></x>)[ \"\" ]) {export *; }}");
tryItOut("do {;export __proto__; } while(((#1=[(<x><y/></x>.( /x/g ))])) && 0);");
tryItOut("return;");
tryItOut("{{(<><//h\nx><y/></x></>); } }");
tryItOut("L: return <x/>;");
tryItOut("with({__noSuchMethod__: (<y><z/></y> if (constructor)) :: 3.141592653589793.watch(\"__parent__\", (<x><y/></x>()))}){throw undefined;throw this; }");
tryItOut("break ;");
tryItOut("if(new ([1,2,3,4].slice).call\t((<x/>.__defineGetter__(\"__count__\", Function)))) { if (if(__count__.__noSuchMethod__ = #3={a:#3#} !== prop) { if ((false < [,])[false.unwatch(\"prop\")]) continue ; else {export __count__;export __noSuchMethod__; }}) __iterator__;} else true;");
tryItOut("L:if([] = []) {export *; } else  if (undefined) {return <><x><y/></x></>;export prototype; } else export prototype;");
tryItOut("export __parent__\nbreak M;");
tryItOut("/*for..in*/for(var prop = [[[]]].sort(*::*) in __noSuchMethod__) throw <x><y/></x>;");
tryItOut("L:if(new (<x><y/></x>).apply([11,12,13,14].sort, this)) { if (false) ; else \f{export prop; }}");
tryItOut("/*infloop*/do const <x><y/></x>, __count__ = <x/>; while(<x><y/></x>.eval(*::*) = (<><x><y/></x></> >>= <x><y/></x>));");
tryItOut("/*infloop*/for(*::*;  /x/g ; false) gc()");
tryItOut("{let __count__ = this, __parent__;L:do {yield; } while(((this.zzz.zzz)) && 0); }");
tryItOut("{function(q) { return q; }export *; }");
tryItOut("/*infloop*/do __iterator__ = ({}); while('fafafa'.replace(/a/g, <x><y/></x>));");
tryItOut("if((RangeError())) return <x><y/></x>; else  if (#1=[#1#]) /*for..in*/for(const [__noSuchMethod__, __count__] = constructor.watch(\"prop\", function (__noSuchMethod__) { yield * } ) in [[1]]) L:with(0){export *; }");
tryItOut("L:if(@foo) {;yield  /x/ ; } else while((1e-81) && 0){return;continue M; }");
tryItOut("/*infloop*/for(var prop; <y><z/></y>; #1=({prototype: null})) {__count__const __noSuchMethod__, constructor; }");
tryItOut("/*for..in*/for(const prop in (('haha'.split)(<><>yyy</></>))){let(__noSuchMethod__ = (<x><y/></x> >>> this)) ((function(){let(__iterator__ = null, prop) { yield *::*;})());/*infloop*/do return; while(( /* Comment */(<><x><y/></x></>.isPrototypeOf(@foo)))); }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = new (#1#.throw( \"\" ))() in ((yield __iterator__))) {const __count__ = function(id) { return id };yield; }{}");
tryItOut("/*for..in*/for(const <x><y/></x> ?  \"\"  : <x><y/></x>['prop'] = ({prototype: <x><y/></x> }) / ~prototype = null in yield []) const constructor = *;");
tryItOut("/*infloop*/L:for(__parent__; ((yield ( /x/ )(this) = (new <>__parent__</>()))); <> </>.(__iterator__ = false) > this.watch(\"__parent__\", function(y) { yield y; function  __noSuchMethod__ () { return <><x><y/></x></> } ; yield y; })) {/*infloop*/for(this.hasOwnProperty(\"undefined\").watch(\"constructor\", __noSuchMethod__.prop setter= function (__iterator__, __parent__)); <bbb xmlns=\"(__parent__)\"></bbb>; new ([z1])(function ([y]) { }) + (__noSuchMethod__)) {(<>\"</>); } }\f");
tryItOut("switch(new ([0/0].some(<x><y/></x>))(const __iterator__)) { default: let (__noSuchMethod__ = 1e-81, prototype) { gc() }case 1: break; prototype, __count__;\nreturn 1e81;\n }");
tryItOut("with(@foo)yield;");
tryItOut("/*for..in*/for(const prop in ((eval)(try { (<x><y/></x>).__defineSetter__ } finally { (*::*); } ))){export __proto__;return; }");
tryItOut("M:if(__count__ = undefined) {prop, __noSuchMethod__ = ;export __parent__; } else  if ((<x><y/></x> for each (prototype in prototype))) {var prototype;export *; }");
tryItOut("if() {L: /*for..in*/M:for(__count__ in <><x><y/></x></>) export *;do {var __iterator__ = *::*, __proto__;; } while((window) && 0); } else  if (__iterator__ = {export __noSuchMethod__;__proto__ = *::*; }.@foo) {/*infloop*/for( \"\" ; ({}); @foo) gc() }");
tryItOut("/*infloop*/for((; window < #1= \"\"  / [[<x><y/></x>].sort(Math.pow)]; (uneval( \"\"  += <><x><y/></x></>))--) __noSuchMethod__;");
tryItOut("throw this\n");
tryItOut("switch(prop ^= false) { case (<y><z/></y> >= <x><y/></x>): if(new -1\f.hasOwnProperty(\"function::constructor\")()) var prototype, __parent__; const __proto__; else  if ([11,12,13,14].some) {/*for..in*/for(let [constructor, __parent__] = null in <x><y/></x>) return; }break; case <x/>: break; default: {}break; prop }");
tryItOut("let (prop) { /*infloop*/L:while( \"\" .propertyIsEnumerable(\"constructor\")){yield prop;throw [z1,,]; } }");
tryItOut("return (({}).watch(\"constructor\", __noSuchMethod__function (__count__) { yield @foo } )) += var __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop(<><x><y/></x></>) in (<x><y/></x> << 3.141592653589793)) {/*infloop*/for(<x><y/></x>; this;  /x/g ) ;throw @foo; }");
tryItOut("\n\nif((prop.__count__)) { if ([window.watch(\"prop\", <><x><y/></x></>) for each (__noSuchMethod__ in ((new Function(\"const constructor, __count__ = [,];\")))(@foo)) for (__count__ in __noSuchMethod__) if (<x><y/></x>)]) {; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <y><z/></y>) {{}throw constructor; }{} }}");
tryItOut("M:with({__noSuchMethod__: __proto__%=<x/>}){L: do return; while((getter) && 0); }");
tryItOut("try { let(constructor) ((function(){for(let y in [5,6,7,8]) const prototype;})()); } catch(__proto__) { with({}) return [this].filter(@foo); } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in eval(\"__parent__ = undefined\", new Iterator(<y><z/></y>, <><x><y/></x></>))) if(eval(\"let constructor;\", @foo)) { if (true) gc() else ;}");
tryItOut("/*for..in*/for(var __noSuchMethod__ in this) ");
tryItOut("with({}) L:with(constructor.prop = (new (Function)()).__noSuchMethod__ = (<y><z/></y>)(@foo))export *;");
tryItOut("M:if(new <x><y/></x>()) {M:if(<x/>) {let __noSuchMethod__ = <><x><y/></x></>; } else  if (<x/>) {gc()gc } else {export *; }yield;\nif(<><x><y/></x></>) {return <x><y/></x>; }\n } else {;if((((0.1).__defineSetter__)())) {__proto__;yield; } else {{} } }");
tryItOut("(1 for (x in []))");
tryItOut("let (__noSuchMethod__) { yield window; }");
tryItOut("try { try { with({}) __parent__ = __noSuchMethod__; } catch(__count__ if (function(){__noSuchMethod__(window.watch(\"__proto__\", prop)) = prop;})())with({}) window } catch(prototype) { \freturn [,,]\n; } finally { with({}) return 0.prototype = arguments; }  } catch(__count__ if [(__noSuchMethod__.constructor = this.__defineSetter__(\"__parent__\", function  prototype (__proto__, prototype) { yield __proto__ } )) for (__noSuchMethod__ in ({constructor: 4.})) for (__count__ in <><x><y/></x></>) for (__parent__ in <><x><y/></x></>)]) { for(let y in [5,6,7,8]) with({}) { return; }  } catch(__count__ if (function(){throw prop;})()) { with({}) { this.zzz.zzz; }  } catch(__proto__) { this.zzz.zzz; } finally { with({}) let([let, ]) { try { let prop; } catch(__noSuchMethod__ if (((new Function(\"throw ({a2:z2});\"))).call(true, __iterator__, __count__))) { return; } catch(__parent__ if (function(){return;})()) { const prototype = this; } catch(__iterator__) { ; } finally { gc() }  } ");
tryItOut("/*for..in*/for(let __noSuchMethod__ =  /x/g  in undefined) {throw #3={a:#3#};{} }");
tryItOut("/*for..in*/for((__iterator__.this.__defineSetter__(\"__parent__\", false) setter= gc\t *= (-0.__lookupSetter__(\"__count__\")).__lookupSetter__(\"__parent__\")), (gc).call(eval(\"[1,,]\", @foo), (undefined.__lookupGetter__(\"__proto__\"))).__count__ in (((Math.pow).apply)(<y><z/></y>))){__parent__ =  \"\" ; }");
tryItOut("throw StopIteration;");
tryItOut("with(true)let __noSuchMethod__ =  /x/g , prop;");
tryItOut("for(let y in []);");
tryItOut("return ({a2:z2});\nreturn;\n");
tryItOut("/*infloop*/for((((void yield <x><y/></x>) <<= (return)) ? <><xxx {__noSuchMethod__}={__noSuchMethod__} /></> : prop.isPrototypeOf(<x><y/></x>)); __iterator__ ^= true; [11,12,13,14].map) prop");
tryItOut("L:switch(<x/>) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <><x><y/></x></>) {#1=[#1#]; }case constructor = __noSuchMethod__:  }");
tryItOut("/*for..in*/L:for(let __iterator__ in ((new Function)( '' ))){let __noSuchMethod__;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (this)(<x/>) in ) {(<y><z/></y>);{} }");
tryItOut("return; const prototype;");
tryItOut("if(arguments) { if (eval(\"\", yield @foo)) {return; } else {;export *;__parent__ = null; }}");
tryItOut("export *;");
tryItOut("{;do {return  /x/ ;return; } while((false(<x><y/></x>)) && 0); }");
tryItOut("gc()");
tryItOut("/*infloop*/M:for([11,12,13,14].filter; prototype.__iterator__ getter= ({}).hasOwnProperty; __proto__ = prop) yield");
tryItOut("/*infloop*/L:while(window){;{} }");
tryItOut("let(__iterator__) { export __iterator__;");
