tryItOut("var constructor = this\n");
tryItOut("if(-3/0) break M; else  if ( /* Comment */window) {return true; }");
tryItOut("{{(window);yield; }export __count__;\nyield;\n }");
tryItOut("let (prototype) { {prototype = -0 } }");
tryItOut("if(__proto__, prototype) {export prop;L:if((this for (__iterator__ in  \"\" ))) {export __proto__; } else export *; } else  if (((\nwindow).*)) throw __count__;");
tryItOut("export __proto__;continue ;");
tryItOut("return <><x><y/></x></>;\n(<><x><y/></x></>);\n");
tryItOut("/*infloop*/do {(1e81); } while(true);");
tryItOut("let \f(constructor = prop = __iterator__, prototype = prop.__count__ = ({__noSuchMethod__: 1e81,  set prototype __iterator__ (__proto__, constructor) { yield * }  })) { switch(@foo) { case each: export *;break;  } }");
tryItOut("let prototype = #3={a:#3#};");
tryItOut("{var __noSuchMethod__ = __proto__, __proto__ = true; const prototype;export *; }");
tryItOut("/*infloop*/do function (constructor, __proto__) { throw constructor\t; }  while((__iterator__.@*\r));");
tryItOut("if((this.__defineGetter__(\"__noSuchMethod__\", function (__iterator__) { prop } ))) {yield (new <x/>);M:switch(3/0) { case __parent__: yield;break; var __count__;break;  } } else  if (new (prototype)(4.)) {return null; const __proto__;throw StopIteration; }");
tryItOut("prototype\n\nyield 5.0000000000000000000000;\n");
tryItOut("/*for..in*/for(let __proto__ in (([1,2,3,4].map)(undefined @ 1e4 = (yield <x><y/></x>.@*)))){export *;var constructor, constructor = this; }");
tryItOut("L:do {continue M; } while((@foo) && 0);");
tryItOut("with({}) { yield -3/0.isPrototypeOf(<><x><y/></x></>).__defineGetter__(\"__noSuchMethod__\", function (__iterator__) { yield #1# } ); } ");
tryItOut("yield;");
tryItOut("{;return <><x><y/></x></\f>; }");
tryItOut("/*infloop*/do export *; while(undefined)\n");
tryItOut("/*for..in*/L:for((x::__parent__) in <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {do __proto__ = __proto__; while((this) && 0); }");
tryItOut("/*infloop*/for(({ prop.__proto__ setter= Math.pow: prop, __iterator__: ({ __parent__: ({ (3.141592653589793 || this.__defineGetter__(\"__noSuchMethod__\", (<y><z/></y>).__defineSetter__)).__parent__: [({ __parent__: constructor, __iterator__: ({ __parent__: __noSuchMethod__, __parent__: __parent__ }) }), ({ ({ __proto__: __count__ }): __count__, function::<y><z/></y>: ({ __noSuchMethod__: __proto__ }) }), ({ __noSuchMethod__: ({ function::prototype: prototype, __iterator__: constructor }) })], prototype: [[prototype, , , [prototype, __proto__]]] }) }) }) = ( /* Comment */([ /x/g  ? #1=[#1#] : *::*]).isPrototypeOf(this.watch(\"prop\", Function))); __count__ = prop.__iterator__ = (new Number( /x/g , [1])).*++; prototype.prototype = new ([z1]--)) let prototype, [__iterator__, ] = -3/0 >>> <><x><y/></x></>;");
tryItOut("M:while(((<x>\t<y/></x>.unwatch(\"__iterator__\"))) && 0){throw (1 for (x in [])); }");
tryItOut("if( /x/  != [z1,,] %= true) {var __count__, __iterator__ = ({a1:1})\nwhile(((+this)) && 0)/*for..in*/M:for(let function::__count__ in (([1,2,3,4].slice)((new Object() if (0))))){let __proto__ = *::*, __count__ = <y><z/></y>;export *; } }");
tryItOut("do {[1,2,3,4].slice/*for..in*/for([__count__, prototype] = this in prop)  } while((((p={}, (p.z = prop)()))) && 0);");
tryItOut("gc()\ngc()");
tryItOut("switch(null) { case <><x><y/></x></>:  }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var [ /x/g ].some(__iterator__) in (uneval(<><x><y/></x></>))) return <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(let __parent__; new (function(y) { yield y; var prototype = true, __iterator__ = [z1];; yield y; })(@foo, ({constructor: prop})\t); eval(\"var __proto__, __iterator__;\",  /x/ .propertyIsEnumerable(\"__iterator__\"))) {/*for..in*//* nogeckoex bug 349964 */ for  each(let true.prop in \r /x/  ? <x/> :  /x/g ) {var __proto__, prototype = ({a2:z2});yield undefined; }/*infloop*/M:for(false; function ([y]) { }; [*::*]) /*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in *::*) {let <y><z/></y>; } }");
tryItOut("if(<x><y/></x>) return;");
tryItOut("if(Function()) { if (<><x><y/><\n/x></>) return; else yield false;}\n");
tryItOut("with({}) ");
tryItOut("yield;\n__proto__;\n");
tryItOut("let (prop) { M:if((eval(\"1e4\", .2))) {const constructor, __iterator__ = *;break ; } else {__count__ = true, prototype = ({}); } }");
tryItOut("L:while(((arguments).valueOf/*\n*/(\"number\")) && 0){function (prototype, __parent__) { yield <x><y/></x> } export *; }");
tryItOut("if(#1=this.zzz.zzz ? (({a2:z2}))(true, <><x><y/></x></>) : eval(\"@foo\", false)) {do {; } while((-0) && 0); } else  if ((function::constructor = *::* &&  '' ))  else {continue L;(window); }");
tryItOut("yield <x><y/></x>;");
tryItOut("while((-1(this, *::*)) && 0)/*infloop*/for(let __count__ = null; <x><y/></x>; *) {yield <y><z/></y>;yield; }");
tryItOut("return;");
tryItOut("/*for..in*/L:for(let [constructor, __proto__] = constructor =  ''  in [(true)((__iterator__ = <y><z/></y>), null)]) __parent__;");
tryItOut("L:switch( /x/g .__parent__) { case 5:  }");
tryItOut("M:switch((this.__defineSetter__(\"prototype\", Math.pow))) { default:  }");
tryItOut("if() gc() else  if ((this).apply(-window, this)) if(<x><y/></x>) { if ([[]]) {return;function::__count__ = true, __parent__; }} else {continue M;export constructor; } else gc()\t");
tryItOut("return (prop-=<x><y/></x>);");
tryItOut("gc(){}");
tryItOut("M:while(((@foo && 3)) && 0)L:if(((eval)())) throw [1]; else  if (((<><x({ __proto__: [, __parent__, ], constructor: ({ __noSuchMethod__: __noSuchMethod__ }) })><y/></x</>).call(<x><y/></x>, ))) let __parent__;");
tryItOut("let (({ constructor: ({ __count__: ({ __count__: __parent__ }), constructor: __parent__ }) })) { L:if((@foo /= <><x><y/></x></>)) {export *; } else  if (@foo) yield __proto__; }");
tryItOut(";");
tryItOut("/*for..in*/L:for(const [__count__, __parent__\t] = 1e81 += this in 1.3) {yield __iterator__; }");
tryItOut("if(__parent__.__parent__ getter= (new Function(\"yield;\")) != (String(window++))) { if (\n<x><y/></x> >> <x/>) {return;export *; }} else {gc()return false; }");
tryItOut("{break ;with({prototype: [,,z1]}){yield;gc() } }");
tryItOut("M:if((yield  /x/ )) M:if(window) { if ([[1]]) {(({})); }} else let x::__count__, __parent__; else  if ((constructor.(<><x><y/></x></>)).propertyIsEnumerable(\"__proto__\")) @foo;");
tryItOut("export __iterator__;");
tryItOut("throw *;\nM:if(-1) {continue ; } else {return;yield __iterator__; }\n");
tryItOut("/*infloop*/L:while(getter.unwatch(\"constructor\")++){const __noSuchMethod__ = <><x><y/></x></>;((eval(\"(window);\", [,,]))); }");
tryItOut("if((<><x><y/></x></> >= null)) throw 3;");
tryItOut("yield  /x/g ;{}");
tryItOut("let (({ __count__:  \"\" .valueOf(\"number\")['constructor']\t, constructor: __noSuchMethod__ }) = <bbb xmlns=\"(function ([y]) { })()\"><xxx>{__parent__}</xxx><bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb><ccc:ddd><!--yy--></ccc:ddd></bbb> .@ new window(3.141592653589793), __proto__) { do yield ({}); while((let) && 0); }");
tryItOut("/*infloop*/while(undefined === #3={a:#3#}.watch(\"__parent__\",  /x/ ))constructor = window, __noSuchMethod__ = ({a1:1})\n/*for..in*/for(var __count__ in @foo) return;");
tryItOut("/*infloop*/do {yield;while((3 |= 1e4) && 0)return @foo\nif(__proto__ + (function ([y]) { })()) {export __noSuchMethod__; } } while((<><xxx>{__proto__}</xxx></> >> constructor = null));\f");
tryItOut("M:do {continue ;@foo } while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/while((1e+81 = new (function ([y]) { })()()))/*for..in*/for(const prototype = (uneval(1e4)) in *::*) var constructor = 1.3, prop = ({});");
tryItOut("try { {} } catch(prototype if null) { const __noSuchMethod__ = window, prototype = #3={a:#3#}; } catch(__parent__) { {} } finally { let constructor = @foo, get = 5.0000000000000000000000; } ");
tryItOut("let(__iterator__ = (undefined >> this)) { this.zzz.zzz;");
tryItOut("gc()\n");
tryItOut("/*infloop*/do {var __proto__ = *::*, __parent__ = {}; } while(([3.141592653589793.@*]));");
tryItOut("if(__count__) gc() else  if (__noSuchMethod__ = <><x><y/></x></>) return ({});");
tryItOut("{Function }\n");
tryItOut("{/*for..in*/for(const __noSuchMethod__ in ((Function)(eval(\"let\", ({a1:1}))))){\nyield <x><y/></x>; }/*for..in*/for(const [__proto__, prototype] = ({__iterator__: this}) in <y><z/></y>) L: {const prototype = this;return window; } }\n");
tryItOut("{throw true; }");
tryItOut("/*for..in*/for(__iterator__ = (__count__ = true.yoyo(eval(\"\", <!--yy-->)) === (([1,2,3,4].slice).call(<><x><y/></x></>, ))) in (Function).call((prop if (prototype)).__lookupGetter__(\"prototype\"), [11,12,13,14].some)) {return this; }");
tryItOut("/*infloop*/M:for([, , , __count__, ({ constructor: ({ prototype: ({ constructor: [__count__, , , ], prop: __iterator__ }), constructor: __count__ }), __count__: ({ __noSuchMethod__: [, , []], function::__count__: [] }) })] = [*].map(*); prototype = ((Math.sin)(({a1:1}))).__lookupSetter__(\"({ __count__: __count__ })\");  -= new Exception(prototype)) {/*infloop*/while((prop = (p={}, (p.z = this)())))if(--true) {; } else  if (((window)())) {} }");
tryItOut("throw __noSuchMethod__;");
tryItOut("__parent__ = eval(\"\", ([function::__proto__].some((function (getter) { return prototype } ).call)) |= new Date()\n)");
tryItOut("L:if(new /a/gi(((<><x><y/></x></>.__defineSetter__(\"__iterator__\", prop =  /x/ function () { yield true } ))(({function::__proto__: [[]], __iterator__: <x/> }))))) { if (__parent__.prop) return;} else {{}; }");
tryItOut("{Function }");
tryItOut("if(__noSuchMethod__ = false.watch(\"constructor\", (__parent__).__defineSetter__)) { if (<><x><y/></x></>.valueOf(\"number\").__lookupGetter__(\"__proto__\")) {/*for..in*/for(const __iterator__ = <x><y/></x> in <><x><y/></x></>) ; } else { }}");
tryItOut("{yield;var __parent__; }");
tryItOut("/*infloop*/L:for('fafafa'.replace(/a/g, (((<><x><y/></x></>).__defineSetter__).apply\t).call); ([4..throw(__proto__)].filter((1 for (x in [])))); [let (prototype) __parent__].@foo) {let (prototype = false) { ; } }");
tryItOut("with([11,12,13,14].map){try { __parent__(0x99) = __iterator__; } catch(prop if this >>> constructor = (function ([y]) { })()) { with({}) ; } catch(__count__) { export *; } finally { yield (({prototype: *,  get prop __parent__ () { return <x><y/></x> }  }); }  }");
tryItOut("/*infloop*/while( /x/ .watch(\"let\", 1e+81)){prop }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (__parent__.constructor getter= function(y) { yield y; yield;; yield y; }).watch(\"function::prop\", <x><y/></x>)) /*infloop*/M:for(let ({ __count__: __iterator__ }) = *::*.propertyIsEnumerable(\"__parent__\"); prototype.__iterator__ setter= function(y) { yield y; gc(); yield y; };  \"\" ) gc()");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/for(let __count__ = eval(\"export *;\", *::*) in prop) {const __proto__ = <><x><y/></x></>, {yield;window; }; }");
tryItOut("if(window.__proto__.__defineGetter__(\"__proto__\", (Function).apply)) { if (<xxx>{__iterator__}</xxx>) /*infloop*/for(let __parent__; <x><y/></x>; @foo) let prop =  \"\" , constructor =  '' ;} else {yield  '' ;return; }");
tryItOut("yield (__count__%=#1#)");
tryItOut("let __parent__;");
tryItOut("return <x><y/></x>;\nwhile((__parent__ = 1.3) && 0);\n");
tryItOut("(new Function(\"return;\"))while((<x><y/></x>) && 0){function(q) { return q; } }");
tryItOut("/*infloop*/for((p={}, (p.z = @foo)()); ( .@*:: null); __noSuchMethod__ .@*:: <x><y/></x>) var __noSuchMethod__, __iterator__;");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] = null in <x/>) {const __noSuchMethod__ = prototype; }");
tryItOut("if((({prototype: prototype,  get __noSuchMethod__() { throw {}; }  }))) ;");
tryItOut("/*for..in*/for(let [__proto__, __noSuchMethod__] = 0x99 in  '' ) yield;");
tryItOut("/*infloop*/L:while(prop.__proto__ = [*::*]){if(*::*) { if (@foo) {false /x/g ; }} else {export *;{} }; }");
tryItOut("if((\n /x/ )) {} else  if (0x99) {#3={a:#3#};({}).hasOwnProperty }");
tryItOut("; const prototype;");
tryItOut("if((eval(\"<><x><y/></x></>\", <x><y/></x>))) return  '' ; else  if (Object()) {{}yield; } else gc()");
tryItOut("__iterator__;");
tryItOut("/*infloop*/while(<!--yy-->.__proto__ getter= this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map))/*for..in*/L:for(const *::*.__iterator__ in (([1,2,3,4].slice)(\f<><x><y/></x></> *= <x><y/></x> & <x><y/></x>)))return");
tryItOut("{with(window){yield *; } }");
tryItOut("{export __count__; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (constructor.((<><x><y/></x></> / #1=[#1#]) ? (<><x><y/></x></>.@foo.unwatch(\"__parent__\")) : [prototype, , , , __count__] =  { return constructor.__count__ } )) in ({__proto__: this.zzz.zzz })) {export *; }");
tryItOut("with({delete: (__proto__ = __noSuchMethod__)})(__noSuchMethod__)\n");
tryItOut("/*infloop*/while(([[1]] if (@foo\f)) <<= eval(\"yield;\", <y><z/></y>))continue L;");
tryItOut("/*for..in*/for(const function::__iterator__ in <><x><y/></x></>) {return <x><y/></x>; }");
tryItOut("<><x><y/></x></>;");
tryItOut("L: {/*for..in*/for(let [prop, constructor]\t = (arguments.__defineSetter__(\"__noSuchMethod__\", (new Function(\"prop;\")))) in ( /* Comment */ '' )) {with({__noSuchMethod__: <x><y/></x>})( /x/ );\fexport prop; } }");
tryItOut("switch(<><x><y/></x></> === <><x><y/></x></>) { default: break; case (new (1 for (x in []))(@foo.unwatch(\"__count__\"))): case [-1//h\n for (__parent__ in this)]: break;  }");
tryItOut("return 3.141592653589793;");
tryItOut("/*for..in*/for([constructor, prop] = ({a1:1}) in __count__) {yield;export *; }");
tryItOut("M:if((\n<x/>)) L:if(prototype.__noSuchMethod__) gc() else {;export *; } else  if (<><!--yy--></>) {let (__proto__) { {} } } else {return <y><z/></y>.__count__;return <x><y/></x>;{} }");
tryItOut(" /x/g \n/*infloop*/for(let __count__ = window; [,,]; window) gc()");
tryItOut("/*infloop*/M:for(false; ([[15,16,17,18].map(({}).__lookupGetter__, ({__iterator__ getter: [1,2,3,4].map, __proto__ getter: (-0) }))]); [1,2,3,4].map(__proto__,  '' )) export *;");
tryItOut("/*for..in*/for(const <><x><y/></x></> in <><x><y/>\t</x></>) return <><x><y/></x></>;");
tryItOut("let prop;");
tryItOut("let (({ __count__: [, , ] })) { for(let y in [])\n }");
tryItOut("/*infloop*/for(__count__; [1e4 for (__noSuchMethod__ in  '' )]; (constructor = 033 *= __parent__)) {{const __noSuchMethod__, __count__;return #1#; } }");
tryItOut("M:if(((prototype(<y><z/></y>))[__parent__.__parent__])) {let set, __parent__;gc() } else {prop = <><x><y/></x></\f>; }");
tryItOut("for(let y in [5,6,7,8]) __iterator__ = __noSuchMethod__;");
tryItOut("with(eval(\"this.constructor * <x><y/></x> >> -0\", (let (__iterator__ = 1.3, constructor) prop = <><x><y/></x></>))){if(<x><y/></x>) yield [1,,]; else  if (prototype) let __iterator__ = @foo, __noSuchMethod__ = <x><y/></x>; }");
tryItOut("while((<x><y/></x>) && 0){return -3/0;break L; }");
tryItOut("if(*::*.prototype) break ;");
tryItOut("if(<x><y/></x>) \t{} else  if (<x/>) {} else (new Function(\"export prototype;\"))gc()");
tryItOut("export constructor;\nreturn ({});\n");
tryItOut("do {{}continue L; } while(( /x/g ) && 0);");
tryItOut("const x::constructor;");
tryItOut("if(((p={}, (p.z = @foo)()))) { if ([15,16,17,18].some(Function,  /x/g )) {continue L;yield; } else {export __noSuchMethod__; }}");
tryItOut("/*for..in*/for(__iterator__ in [this.__defineGetter__(\"__noSuchMethod__\", null)]) yield <><x><y/></x></>\nif(1e-81) {(<><x><y/></x></>);gc() }");
tryItOut("switch(new __iterator__ ? ((-1) | @foo) : ([<><x><y/></x></>])) { case  /x/g .watch(\"__proto__\", function () { let prototype = 033; } ).__lookupGetter__(\"prop\"): default: if(*::*) { if ([[]]) {continue ; }} else let __proto__ = <><x><y/></x></>, __count__ = this;break; export *;break; case 2: break; case 0: case 1:  }");
tryItOut("{var __iterator__ = <x><y/></x>, prop = *; }");
tryItOut("/*for..in*/for(let __count__ = null in  \"\" ) {with({__proto__: #1#})export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in false) /*infloop*/while(<><x><y/></x></>){function  __proto__ () { yield [1,,] } let , __parent__ = #1#; }");
tryItOut("do 0.1 while((__count__) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in [true.isPrototypeOf(prop)].some([1,2,3,4].slice) ::  /* Comment */[z1] *= (__proto__.__count__ setter= Function)) {if((this.__defineGetter__(\"__proto__\", function   (__count__, __parent__) { return  /x/  } )) === @foo) {(false); } else  if () {const __parent__ = __parent__;{} } else /*for..in*/M:for(const [prop, __parent__] = function(id) { return id } in @foo) {break L; }{let prototype;export *; } const constructor; }");
tryItOut("if(<{__count__}><x><y/></x><!--yy--></{__count__}>.(null << (-0)).throw(<x><y/></x> * 0.1)) /*for..in*/for(let prototype = *::* in <><x><y/></x></>) {yield;__iterator__, __iterator__; } else  if (({__parent__: (--*::*)})) if(3.141592653589793) { if (3) } else {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <y><z/></y>) {prototype, __parent__;Math.pow }");
tryItOut("<x><y/></x>;\n( /x/ );\n");
tryItOut("if([__noSuchMethod__ for each (__noSuchMethod__ in <y><z/></y>)].__proto__ = ([z1] || __iterator__)) { if (5.0000000000000000000000\t\n) {(1 for (x in [])) } else const __iterator__, __proto__;}\n");
tryItOut("\nfalse;\n\f");
tryItOut("/*for..in*/for(let prototype = 0 <<= this in <><x><y/></x></>.__lookupGetter__(\"__proto__\")) /*infloop*/for(prototype; <><>[<x/>]</></>; prop.(new (__count__, __noSuchMethod__)(@foo, @foo))) while(((__iterator__ = 3.141592653589793)) && 0)export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((new Function(\"return <x/>;\")) in <y><z/></y>) const __proto__;");
tryItOut("/*infloop*/while(0.1){'haha'.split }");
tryItOut("yield;");
tryItOut("let (__parent__) { /*infloop*/L:while((<><x><y/></x></>)(<y><z/></y>, prototype)){return {};(__proto__); } }");
tryItOut("with({__parent__: (this.__defineGetter__(\"__noSuchMethod__\", (__noSuchMethod__ = <y><z/></y>).prop && this >>= [,,] ? <x><y/></x>.isPrototypeOf(this) : __iterator__))}){/*for..in*/for(const \rdelete = __parent__ = <x><y/></x> in __parent__.__defineSetter__(\"prototype\", gc)) {L:do export function::__parent__; while((<x/>.*) && 0); }{} }");
tryItOut("if(([]\n = prop = (eval(\";\", __proto__ & [1,,])))) {break L;{var __proto__;{} } } else  if (<><xxx {__noSuchMethod__}={([15,16,17,18].filter(({}).__lookupGetter__, __parent__ <= function(id) { return id }))} /></>) ; else {let (prototype) { undefined; }/*infloop*/while(<y><z/></y>){var prop = this;gc() } }");
tryItOut("/*infloop*/while(this){export constructor; }");
tryItOut("if(5.0000000000000000000000) {<><x><y/></x></>; } else  if (<x><y/></x>) {__iterator__; } else {export *; }");
tryItOut("switch([[1]][__parent__]) { default: L:if( '' ) { if (prop) {yield;prop = <y><z/></y>, prototype } else {export __parent__;gc() }} }");
tryItOut("var prop = __parent__, __proto__;");
tryItOut("return;");
tryItOut("/*infloop*/for(let 033; [15,16,17,18].filter((({}).hasOwnProperty).apply, ( /x/ .valueOf(\"number\")).call((constructor.(((p={}, (p.z = *)())))), ((this);)[(<x><y/></x> || @foo)])); yield this) {__proto__ = yield false }");
tryItOut("if(prop = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(constructor =  /* Comment */<><x><y/></x></>)) {if((true .. this)) throw @foo; else {export constructor;{} } } else gc()");
tryItOut("/*infloop*/while(*::* for each (__count__ in <x><y/></x>))yield\n");
tryItOut("if(#2=[<x><y/></x>]) {/*infloop*/for( \"\" ; this.throw(.2); (<x/> <= 0.1))  \"\"  } else  if (constructor+=3/0) {return 3.141592653589793;/*infloop*/for(__iterator__; let (__noSuchMethod__, __proto__) *; this.__defineGetter__(\"constructor\", true)) yield [1,,]; } else {L:with(<><x><y/></x></> .@*:: 1.3){__iterator__ = false; } }");
tryItOut("/*infloop*/do (__iterator__); while((<y><z/></y> for (prop in <x/>)));");
tryItOut("if(@foo({}, <x/>).__defineGetter__(\"prototype\", ((__count__).watch).apply) += (function (__parent__, __proto__) { yield  ''  } ).call(#2= /x/g , this.zzz.zzz)) {var __count__ = constructor, constructor = *::*; } else  if (Math.pow) {export __iterator__;throw this; }");
tryItOut("/*infloop*/M:for('fafafa'.replace(/a/g, Math.sin); ((yield <x/>))--; ((((gc).call(window for each (__noSuchMethod__ in ({}))__count__, <x><y/></x>.__parent__))[((/a/gi).call().__defineGetter__(\"constructor\", 'haha'.split))]).__iterator__)) gc()");
tryItOut("/*infloop*/for(constructor; (yield  '' ); *::*) do {/*for..in*/L:for(__proto__ in ((({}).hasOwnProperty)(<x/>))){export *;yield [,,z1]; }L:with({constructor: false})yield; } while((__noSuchMethod__.__proto__ = (constructor ? <x><y/></x> : <y><z/></y>)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x/>) {(__count__).__defineSetter__//h\n }");
tryItOut("/*for..in*/M:for(let [prototype, __proto__] = Iterator(*::*) in (({__count__: false}).eval(( /* Comment */[1])))) {return; }");
tryItOut("switch(((false)(*::*) = prop = 033)) { default: L:if([[1]]) {{} } else  if (__iterator__) {} else {export *; }case {}: return;break;  }");
tryItOut("if(new ()\t)) /*for..in*/for(\flet __iterator__ = 4. in __proto__) const prototype; else gc()");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for([ .@x:: try { yield @foo; } finally { throw <><x><y/></x></>; } ] in ((new Math.sin((uneval(.2)), (undefined.unwatch(\"__noSuchMethod__\"))))(__noSuchMethod__.(true in 0/0))))continue M;");
tryItOut("do {yield;gc()throw <y><z/></y>; } while((@foo.hasOwnProperty(\"__count__\")) && 0);");
tryItOut("/*infloop*/for(var prop; (__parent__ | <><x><y/></x></>); new (__count__)(__iterator__)) {function(y) { yield y; gc(); yield y; }export __proto__; }");
tryItOut("with({}) for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in prototype = this >= [[]]) {/*for..in*//* nogeckoex bug 349964 */ for  each(let (__proto__) in (prototype.constructor = <x><y/></x>.(*::*)) <<= false) {1.2e3; const __count__ } }");
tryItOut("L:if(setter.__parent__\n) { if (let (({ constructor: constructor }) = (( /x/g ))) ((1.2e3)[<y><z/></y>])) {( /x/g ); } else let __parent__;}");
tryItOut("L:while(((new ( /x/g )(this))) && 0){yield;export *; }");
tryItOut("L: {{var prop = undefined; } }");
tryItOut("/*infloop*/L:for(let constructor; this.throw(false); new (033)(033) .@*:: (yield [])) export __proto__;");
tryItOut("L: {return 3/0;gc() }");
tryItOut("yield");
tryItOut("");
tryItOut("__proto__");
tryItOut("return true;gc()");
tryItOut("L: (<><x><y/></x></>);");
tryItOut("/*infloop*/do  while(function ([y]) { });");
tryItOut("/*for..in*/for([__count__, __noSuchMethod__] = \tprototype.__noSuchMethod__.(((new Function(\"throw #3={a:#3#};\"))).call(<x><y/></x>, false) = <x><y/></x>) in default: /*for..in*/for(let if(this.__defineSetter__(\"prototype\", ((1 for (x in []))).call)) { if (<x/>.__proto__) {gc() }} else {/*for..in*/for(prototype in ((if( \"\" ) \r{export *;{} } else  if (*) ; else return;)(<><x><y/></x></>)))({a2:z2}); } in ((function  __parent__ () { yield __count__ = * } )(<x><y/></x>.__parent__ = prop)))yield <x><y/></x>;break; case 9: M:if(('haha'.split).call(3/0, <x><y/></x>, -0\f)) this; else  if ([1,,].isPrototypeOf(0)) yield; else case 7: yield (function ([y]) { })();( /* Comment */ /x/g );break; break case ((uneval([,]))): case 9: case this.@*: {gc() }case [window]: break; case 0: break; ) continue //h\nL;");
tryItOut("/*infloop*/M:for(var __iterator__; (<><x><y/></x></>.__lookupSetter__(\"prop\")); ([true]) >>>=(\nnull)\n) {if(( /x/ .yoyo(<x/>))) {return;return; } else  if ((<x><y/></x>.__defineGetter__(\"constructor\", Math.sin))) (x::__iterator__);/*for..in*/M:for(__iterator__ in (( /x/g )())) M:do {yield false;; } while(((yield <><x><y/></x></>)) && 0); }");
tryItOut("if((<><x><y/></x></>.@foo['prop'])) {continue M; }");
tryItOut("if(new RangeError( \"\" )) <ccc:ddd><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></ccc:ddd> else  if (__proto__ = constructor instanceof __proto__ = window) <x><y/></x>; else {;gc() }");
tryItOut("let (__parent__ = (new (function(q) { return q; })()), __parent__ = @foo) {  }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, function::gc] = constructor in ({a2:z2})) {; }");
tryItOut("if(__proto__.isPrototypeOf(<x><y/></x>.(<x><y/></x>))) {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <y><z/></y>) {export __count__; }export __parent__; } else /*for..in*/M:for(const __proto__ = (yield <><x><y/></x></>.__iterator__ = [[]]) in <x><y/></x>) throw <y><z/></y>;");
tryItOut("/*infloop*/\nfor(const  /x/g ; __count__.hasOwnProperty(\"__noSuchMethod__\"); (__noSuchMethod__(*)) = (new (new Function)((yield <x/>.__lookupGetter__(\"__noSuchMethod__\"))))) {throw prop;; }");
tryItOut("L:if([[]]) { if (1.3) {window; }} else const __proto__ = 0x99;");
tryItOut("do  while(((new ((({__count__ = <x/>, __proto__ = *::*; })[true]))(<x><y/></x>, null).valueOf(\"number\"))) && 0);");
tryItOut("/*for..in*/M:for(let __count__.constructor in (([1,2,3,4].map)(window.valueOf(\"number\"))));");
tryItOut("let (__parent__ = __count__) { __proto__; }\n");
tryItOut("L: { }\t");
tryItOut("{}/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__.prop in window) yield @foo;");
tryItOut("M:if(([__proto__.__noSuchMethod__ = false].map('haha'.split) /= ({ __iterator__: __count__, each: __parent__ }) = -#0=[true])) {/*infloop*/for(<><{prop}><!--yy--></{prop}></>; (<><x><y/></x></> += this) ? (({a2:z2}) ? this : undefined) : ( /* Comment */ /x/ ); __iterator__ = __proto__) {let (prototype, __count__ = *) { throw @foo; } } } else  if (true %= <x><y/></x>.each) {L:if((__count__ = .2).hasOwnProperty(\"prop\")/*\n*/) {} } else M:with({__count__: .2}){break ;const prop\n; }");
tryItOut("with({}) { with({}) { Array( \"\" , window) = constructor; }  } ");
tryItOut("with({}) for(let y in []);");
tryItOut("if(<x><y/></x>) gc()");
tryItOut("let (prototype = <x><y/></x>) { {} }");
