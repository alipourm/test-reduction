tryItOut("export prototype");
tryItOut("{let (__proto__ = __proto__, constructor =  /x/ ) { ; } }");
tryItOut("/*infloop*/for(const __noSuchMethod__; \n*; ((p={}, (p.z = #3={a:#3#})()))) {return; } const constructor;");
tryItOut("yield [15,16,17,18].map((eval(\"yield  \\\"\\\" ;\", __proto__)).__defineSetter__, __proto__.constructor.yoyo(__count__ = true));");
tryItOut("/*infloop*/while((window.hasOwnProperty(\"constructor\").eval(((p={}, (p.z = -1)())))).throw('fafafa'.replace(/a/g, 0/0.unwatch(\"prototype\").isPrototypeOf((__proto__ = __iterator__)))))function (__iterator__)__parent__ = __iterator__ / window <<= __iterator__");
tryItOut("/*infloop*/for(const __noSuchMethod__ = true; <y><z/></y>; __count__) {return *::*;gc() }");
tryItOut("Math.sin");
tryItOut("M:if(null.eval(<><x><y/></x></>)) { if (<y><z/></y>) } else {{}throw __count__; }");
tryItOut("return (new - /x/g ());");
tryItOut("if((~(<><x><y/></x></>(1e4, true)))) {{} } else  if (__count__ = __iterator__) {const __noSuchMethod__;__proto__ = <x/> } else {return; }");
tryItOut("'haha'.split");
tryItOut("yield __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("if([function ([y]) { }]) /*infloop*/do (<x><y/></x>); while(__proto__);");
tryItOut("return;export __proto__;");
tryItOut("if((new Boolean())) { if (<zzz>new ([11,12,13,14].some)(1e+81 .. *::*, false)</zzz\t>) /a/gi else {const __iterator__ = this, __proto__;(<x><y/></x>); }}");
tryItOut("L:do {const __count__ = true, __count__ = (function ([y]) { })();/*for..in*/M:for(const prototype in this) {return;return; } } while(((([1,2,3,4].map) ^= function(id) { return id }.__noSuchMethod__)) && 0);");
tryItOut("with({prototype: delete yield <x><y/></x>}){if((this <<= window)) { if (__proto__: __proto__) throw *::*;} else return; }");
tryItOut("/*for..in*/for(let [prototype, function::__proto__] = [, , __proto__, __parent__] = (__noSuchMethod__ = 1e81).propertyIsEnumerable(\"__count__\") in new function  __proto__ (__proto__, prop) { yield 0/0 } ()) {while(( \"\" .unwatch(\"prop\").yoyo((<x><y/></x>.(<><x><y/></x></>)))) && 0)M:if(3) {;var prop = 5.0000000000000000000000; } }");
tryItOut("{/*for..in*/for(let *::* ? [] : ><x><y/></x></>['prop'] in *::*) throw 1e81; }");
tryItOut("with(-<><x><y/></x></>)return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype(<><x><y/></x></>) in * - ({__parent__: #2=({constructor:  \"\" }), prototype: @foo })) {\t/*for..in*/L:for(__proto__ = ++ /x/g  in this) {const prop = <x/>, prop = this;yield; }if((new RangeError(constructor, this))) var __count__ = this, __proto__;/*infloop*/for(const <xxx>{__noSuchMethod__}</xxx><x><y/></x><x><y/></x><!--yy-->;  /x/g  / *::*; new String()) {( /x/ );; } }");
tryItOut("{continue ; }");
tryItOut("var __proto__ = false");
tryItOut("if(*::*) {yield true; } else  if (prototype =  /x/ ) {with(((({prototype: <x><y/></x> })).propertyIsEnumerable(\"constructor\")))while((*) && 0){export constructor; } }");
tryItOut("gc() const prototype;");
tryItOut("L: throw <><x><y/></x></>;");
tryItOut("if(((<x><y/></x>.eval(arguments)))) {return <x/>; } else  if (<!--yy--> = new RangeError()) {return;{} }");
tryItOut("do export __noSuchMethod__; while((({__parent__: #1=0/0 })) && 0);");
tryItOut(" { yield (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></> & ([]) = 1e+81( /x/ , window)) } ");
tryItOut("/*infloop*/for(const [, ({ prototype: ({ constructor: [] }), prop: [prototype] })] = (p={}, (p.z = prototype%=<y><z/></y>)()); function ([y]) { }; this.zzz.zzz ? (__parent__.__parent__ = constructor) : this ? [,,z1] : [z1]) prop = <><x><y/></x></>, prototype = false\n");
tryItOut("{export __noSuchMethod__; }");
tryItOut("if( /x/ ) { if (__noSuchMethod__) {do export x::prototype; while((prototype) && 0); } else let __noSuchMethod__ =  /x/g , __count__ = constructor;}");
tryItOut("let __count__ = <><x><y/></x></>\n");
tryItOut("{export __proto__;constructor, prop = *; }");
tryItOut("/*infloop*/for(var prop; [<x/>].sort(Math.pow); delete [z1,,]) {/*infloop*/do {break ;export *; } while(0x99); } const __iterator__;");
tryItOut("do {return <x><y/></x> } while((true['__iterator__'] = (<y><z/></y> - -1)) && 0);");
tryItOut("with(<bbb xmlns:ccc=\"((yield this))\"><ccc:eee></ccc:eee></bbb>.(yield Number(1e4,  /x/ )))/*for..in*/L:for(const [constructor, __proto__.constructor] = 1e81 in <><x><y/></x></>) {yield;; }");
tryItOut("L: {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__.constructor in new RegExp()) {}");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("L:if(null.hasOwnProperty(\"prototype\")) if((<x><y/></x>.__defineSetter__(\"prop\", Math.pow))) { if (__noSuchMethod__) throw undefined;} else (<x><y/></x>);");
tryItOut("({ prototype: ({ delete: prop }), __parent__: prototype })");
tryItOut("/*infloop*/for(const __count__ =  \"\" ; @foo; *) throw <><x><y/></x></>\n");
tryItOut("/*for..in*/L:for(const __iterator__ = ( /x/g )(<y><z/></y>, this) in  \"\" ) {\freturn;break ; }");
tryItOut("/*for..in*/for(const __parent__ in undefined) {var constructor = window, __iterator__ = *::*; }\n/*for..in*/for([prototype, __noSuchMethod__] = (RegExp(<x/>)) in *::*) if(false) {export __proto__; } else throw function ([y]) { };");
tryItOut("/*infloop*/while(true){L: {yield; }/*infloop*/M:while(null){;var __count__ = <><x><y/></x></>; } }");
tryItOut("with({}) for(let y in []);");
tryItOut("with({prototype: try { yield window; } catch(__proto__ if (function(){yield;})()) { <x><y/></x>; } catch(constructor) { export __parent__; } finally { var __noSuchMethod__, __count__; } }){var constructor;function(q) { return q; } }");
tryItOut("yield this.__defineSetter__(\"prop\", function (__noSuchMethod__, __noSuchMethod__) { return 3 } );");
tryItOut("L: {__proto__ = <x/>;return <><x><y/></x></>; }");
tryItOut("");
tryItOut("/*for..in*/for(const __parent__ = <y><z/></y> in ({a2:z2})) {var __noSuchMethod__ = __noSuchMethod__; }");
tryItOut("{{const prototype;var __proto__ = <><x><y/></x></> } }");
tryItOut("L:if(new Error(<x/>, (-0))(3/0.watch(\"prop\", *))) { if ((prop = null) :: new (false)(prop)) {throw  /x/g ;{} }} else {throw this;;, prototype = <x/>; }");
tryItOut("/*for..in*/for(let __parent__ = ([1,2,3,4].slice).call(__count__ = (-0) @  '' , ) in 1e+81) __noSuchMethod__;");
tryItOut("/*for..in*/for(let constructor in export *) {do {yield; } while((*::*) && 0); }");
tryItOut("return true;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__noSuchMethod__ in <><x><y/></x></>.__lookupSetter__(\"function::__parent__\")) while(((<y><z/></y> & <y><z/></y>)) && 0)return;");
tryItOut("/*for..in*/for(const __iterator__ in prop) {return; }");
tryItOut("{/*for..in*/M:for(prop = window in this) {(<x><y/></x>); } }");
tryItOut("/*infloop*/for(var __parent__; ( /x/ (__noSuchMethod__, <><x><y/></x></>) for (__iterator__ in <><x><y/></x></>)); void (uneval(*))) {let __noSuchMethod__ = ({a1:1}), __count__;L: let __proto__; }\n");
tryItOut("/*for..in*/L:for(__proto__ = ((prop = (constructor = 1.2e3))(prop.prop, constructor = (<><x><y/></x></> === __parent__), ({ __count__: ({ prototype: __noSuchMethod__, __iterator__: prop }), __count__: __iterator__ }) = (<x><y/></x>.valueOf(\"number\")))) in (<><x><y/></x></> .@*:: *).propertyIsEnumerable(\"constructor\")) yield [[]];");
tryItOut("/*for..in*/for(__parent__(this & <><x><y/></x></>) in true) {({}).__lookupGetter__(1 for (x in [])) }");
tryItOut("switch(((1e81 if (<y><z/></y>)))) { default: /*infloop*/while((new ([1,,])(<x><y/></x>,  \"\" ))){export __count__; }case (__proto__.hasOwnProperty(\"__count__\")): case 2: ({}).__lookupGetter__break;  } const prototype;");
tryItOut("/*infloop*/while(([15,16,17,18].map((({}).hasOwnProperty)\f.apply, @foo)) .. <bbb xmlns:ccc=\" \"\" \"><ccc:eee></ccc:eee></bbb>)@foo;\t");
tryItOut("do  while((prop = __count__) && 0);");
tryItOut("/*infloop*/for(constructor = <x/>.__defineSetter__(\"__parent__\", ((function  __parent__ (function::prototype, constructor) { export *; } ).apply).call); <x/>; ({ __count__: ({ __noSuchMethod__: prototype }) }) = __noSuchMethod__) {return 3.141592653589793; }");
tryItOut("with(new arguments(<y><z/></y>, [,,z1]))__iterator__ = constructor;");
tryItOut("if( /x/ ) ; else  if (#1#) {let __noSuchMethod__ = function(id) { return id }; } else var constructor = (-0)");
tryItOut("/*infloop*/for; [[1]]@foo; 3/0) {var this;true }");
tryItOut("switch(<><><x><y/></x></></>) { default: break;  }");
tryItOut("{return;if(<><x><y/></x></>) { if (<x/>) return; else {yield <x/>; }} }");
tryItOut("/*infloop*/for(var __proto__; <y><z/></y>; \n@foo) (prototype+=yield *);");
tryItOut("/*infloop*/L:for(* === *::*; ((window)[ '' ]); new constructor.prop(__parent__ = *::*.__lookupSetter__(\"__parent__\"), this)) <x><y/></x>;");
tryItOut("M:with({__count__: })__parent__ = window");
tryItOut("with({}) { for(let y in [5,6,7,8]) let(delete) ((function(){__iterator__;})()); } \n{__count__ = <x><y/></x>.eval(false), prototype; }");
tryItOut("throw  '' ; const __count__\nwith({prototype: @foo})return [1]; const __proto__;");
tryItOut("with({}) { case 9: constructor;break; \t; } ");
tryItOut("[1,2,3,4].map");
tryItOut(";");
tryItOut("\n;\n");
tryItOut("with({}) gc()");
tryItOut("/*for..in*/for(let __count__ = <x/> in false) <x><y/></x>, <x><y/></x>");
tryItOut("L:while(((function () { return this } ).call\t(<x/>, ).function::__iterator__ ? constructor : <x><y/></x> ? false : <x><y/></x>.__lookupGetter__(\"prop\")) && 0)function ()prop");
tryItOut("L:do {return;return; } while(((Exception())) && 0);");
tryItOut("/*for..in*/for(__proto__ in <x><y/></x>) {export *;break ; }");
tryItOut("/*for..in*/for(__proto__ in ((gc)(\n3.141592653589793))){break ; }");
tryItOut("false;");
tryItOut("/*infloop*/while(([1,2,3,4].slice)(<><x><y/></x></>)){\n }");
tryItOut("if((Function([,,]).eval(__noSuchMethod__))) { if (<y><z/></y> / [,]) {[1,2,3,4].mapyield; }} else {yield {};yield; }");
tryItOut("/*for..in*/M:for([15,16,17,18].some(<x/>, [,])['__iterator__'] in (([1,2,3,4].map)(let (__noSuchMethod__) [z1,,])))return <x><y/></x>;");
tryItOut("/*for..in*/for(prop = <bbb xmlns=\"033\"> </bbb> in window) {}");
tryItOut("yield;");
tryItOut("/*for..in*/for(var __count__ in (((new Function(\"window;\")))(<x><y/></x>))){const __proto__ = prototype, __count__;var prototype, __proto__ = 1e-81; }");
tryItOut("L: throw __proto__;");
tryItOut("with({prop: })//h\n{return; }");
tryItOut("/*infloop*/for(let __parent__; String( '' , {}); (<><x><y/></x></>)(<y><z/></y>\n,  \"\" )) {export __parent__; }");
tryItOut("with({}) { let(__parent__) ((function(){yield (yield \f__parent__);})()); } ");
tryItOut("while(([] = ({ __iterator__: __noSuchMethod__, prop: __noSuchMethod__ })) && 0)L: {constructor; }");
tryItOut("yield;\n/*infloop*/for((this.yoyo(<x><y/></x>).propertyIsEnumerable(\"prop\")); Object(); new ({}).__lookupGetter__(((1 for (x in [])))(), true)) {gc()if( /x/ ) { if ( /x/ ) throw *;} else {export *;*; } }\n");
tryItOut("L:if(5.0000000000000000000000 .. true ^ (__count__.__noSuchMethod__ setter= function(y) { yield y; throw <><x><y/></x></>;; yield y; })) /*for..in*/for(let prototype in (( \"\" )(-1))){__parent__; } else  if (__noSuchMethod__ = <x/>) throw [,,];");
tryItOut("with({}) throw StopIteration;");
tryItOut("try { let(({ constructor: constructor })) ((function(){throw __count__;})()); } finally { with({}) return; } ");
tryItOut("/*infloop*/do return __proto__; while(033\n);");
tryItOut("while((new (constructor)(false, <x><y/></x>)) && 0){with((*.valueOf(\"number\"))) /x/ ; }");
tryItOut("L: {return [[]]; }");
tryItOut("if((export __iterator__; *= new (window)(null,  /x/ ) = eval(\" /x/g \", <x><y/></x>))) {return;<x><y/></x>; } else  if ((eval)()) {throw <x><y/></x>;gc() const __count__; }");
tryItOut("L:while((new <><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")(*::*.__proto__)) && 0){gcgc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in *) throw *::*;");
tryItOut("throw StopIteration;");
tryItOut("if(<x><y/></x>) { if ( \"\" ) throw __parent__;} else {return;var prototype; }");
tryItOut("/*infloop*/for(let __iterator__; prototype;  /x/g ) yield <x/>;");
tryItOut(" if (window)");
tryItOut("(this)");
tryItOut("throw StopIteration;");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("{}\n");
tryItOut("throw prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in undefined) export prop;");
tryItOut("/*for..in*/for(var [constructor, prop] = this.__defineSetter__(\"prop\",  /x/g ) in null) {let __iterator__ = <><x><y/></x></>;function  prototype () { return @foo; }  }");
tryItOut("if(*.unwatch(\"__count__\")) var {gc }, constructor = <><x><y/></x\f></>;");
tryItOut("let (({ constructor: [], __proto__: [, , __proto__, ] }), prop = prop.__lookupSetter__(\"__parent__\")) { export  /x/ ; }");
tryItOut("{let(({ prototype: prototype, __count__: __iterator__ }), prop = <x/>) { yield <><x><y/></x></>;return #1=[#1#]; }");
tryItOut("<y><z/></y>\nvar __proto__");
tryItOut("M:with(((constructor) = constructor)){/*infloop*/while(([Boolean(true)].sort((<x/>).watch)))*::*;__count__ = constructor; }");
tryItOut("/*infloop*/for((<xxx {__proto__}={<x><y/></x>} />.(([<><x><y/></x></>]/*\n*/.sort(function (__noSuchMethod__) { return @foo } )))).eval((yield (.2.@foo))); (let (__iterator__, prop = *::*) __count__); *::*.__lookupGetter__(\"__iterator__\")) {export constructor; }");
tryItOut("/*for..in*/for(const __proto__ in [,]) {throw *;constructor, __iterator__; }");
tryItOut("throw constructor;");
tryItOut("L:switch(<><x><y/></x></>) { case 8:  }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in ( \"\"  >>= window || prototype)) (*::* if (constructor).eval(<y><z/></y>));if(<x/>) throw false; else  if ( /x/g )  }");
tryItOut("L: {<x><y/></x>; }");
tryItOut("/*for..in*/L:for(const __iterator__ = <zzz>(__noSuchMethod__.__noSuchMethod__ getter= window\n)</zzz> in undefined.hasOwnProperty(\"constructor\")) ;");
tryItOut("/*infloop*/while(<x><y/></x> .@ false.throw((delete *)))/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in <><x><y/></x><ccc:ddd>yyy</ccc:ddd></>) {L:while((this >>>=*) && 0)prototype = [ /x/ ].map(function (__count__, __parent__)<><x><y/></x></>)M:while((undefined) && 0){yield true; } }");
tryItOut("/*infloop*/for(var ({ prototype: ({ __parent__: prototype, prototype: @foo }), constructor: __parent__ }) = (-1 -= __parent__.propertyIsEnumerable(\"__proto__\"))(([,,] for (__parent__ in __proto__))); this.__defineGetter__(\"getter\", this.__lookupGetter__(\"__count__\")); function::prop || <><x><y/></x></>) ({}).hasOwnProperty");
tryItOut("break ;");
tryItOut("/*for..in*/for(var prototype in ((0/0)((({prototype: (-0) }).propertyIsEnumerable(\"__noSuchMethod__\"))))){ }");
tryItOut("let (__noSuchMethod__ = (<><x><y/></x></> % <>throw [1];</>.valueOf(\"number\")), prototype = __parent__ = null) { gc() }");
tryItOut("L:with(this.zzz.zzz){prototype }");
tryItOut("/*infloop*/M:for(let [, __parent__, ({ __count__: __proto__, __iterator__: prototype }), ({ constructor: [, __parent__, , constructor] })] = new (Math.sin)(@foo, [[]]); <><zzz><y><z/></y></zzz></> .@x:: this.isPrototypeOf(undefined); ((yield  /x/ ))) {export *; }");
tryItOut("/*infloop*/for(__noSuchMethod__; [prototype.__count__ getter= <y><z/></y>]; this.__defineSetter__(\"__proto__\", function () { return @foo } ) .@x:: void <x/>) throw <>arguments</>;");
tryItOut("continue ;");
tryItOut("/*for..in*/for(var [\tconstructor, __noSuchMethod__] = (prop.__count__--) in (/a/gi) == <><x><y/></x></>) {yield #3={a:#3#}.constructor = <><x><y/*\n*//></x></>; }");
tryItOut("throw constructor;");
tryItOut("L: {( \"\" ); }");
tryItOut("M:if(<y><z/></y>) { if (<><x><y/></x></>) } else {export __parent__; }");
tryItOut("if((<><zzz>prototype *= prop = prop</zzz></>.__lookupGetter__(\"__proto__\"))) { if ( /x/ .watch(\"each\", [1,2,3,4].slice).__count__) continue ;\n;\n const constructor; else /*infloop*/do {yield (window %= null); } while(<bbb xmlns:ccc=\"({a2:z2})\"><ccc:eee></ccc:eee></bbb>);}");
tryItOut("switch(<><><ccc:ddd> \r</ccc:ddd></> </>) { case 2: gc()case  '' ++ , constructor.eval(__iterator__): constructor = 1.2e3, __noSuchMethod__;break; case let (__proto__ = <><x><y/></x></>) 0x99: case <y><z/></y>.__defineGetter__(\"__proto__\", Math.sin): (<x/>);break;  }");
tryItOut("if([1,,]) throw  /x/ \n");
tryItOut("L: throw <><x><y/></x></>;");
tryItOut("export __count__; const __noSuchMethod__;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (<><x><y/></x></> | prop = <><x><y/></x></>) >= eval(\"let (prop, __count__ = [,]) { export *; }\", ) in (true , @foo).__iterator__) {var constructor = __parent__, __proto__ =  \"\" ; }");
tryItOut("switch(constructor-= /x/ ) { case 9: break; case 7: export *; }\n");
tryItOut("{gc()__iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var this in [({})].some(function(q) { return q; })) {}");
tryItOut("L:do {break M;{} } while((__proto__ =  '' ) && 0);");
tryItOut("while(((__proto__.(<>x><y/></x></>).__lookupGetter__(\"prototype\"))) && 0)");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: [, ({ __parent__: ({ prototype: [] }) }), [, ({ __proto__: ({ __noSuchMethod__: ({ __iterator__: __count__ }), constructor: __iterator__ }) })], prop] }) = [z1,,]; ([] = (new (true)(true) % ({ set __parent__(constructor, __iterator__) { this }  }))); ((new (1e4%=this) ? let (prototype = constructor) (-0) : let (__noSuchMethod__, __count__ = <x/>) <x/>)[((@foo ? [[1]] : <><x><y/></x></>))[1.2e3]])) throw constructor;");
tryItOut("/*for..in*/for(var -0 in true) switch(window) { default: break; break;  }");
tryItOut("if(constructor = <>1e4</>) { if (++(__parent__.__lookupSetter__(\"__parent__\")) ? (5.0000000000000000000000 || @foo) : 0x99.__defineGetter__(\"constructor\", <x><y/></x>)) {{}throw @foo; }} else L: (1e81);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in __noSuchMethod__ = *::* :: (<x><y/></x>) *= (new Object( '' , ({a1:1})))) {try { let __noSuchMethod__ = <x><y/></x>; } finally { const __proto__; }  }");
tryItOut("M:do {let each, prototype; } while((3/0) && 0);");
tryItOut("/*for..in*/for([__parent__, __count__] =  \"\"  in (({ __iterator__:  }) = ({ prototype <><bbb xmlns=\"(new  == ({ __count__: prop, prop: prototype }).watch(\"__iterator__\", ([,,z1]).watch))\"><ccc:ddd>yyy</ccc:ddd></bbb></>({ __count__: [__parent__, prototype, prop, prop, __parent__] }), prototype)) {gc()__proto__; }");
tryItOut("/*for..in*/L:for(const prop in <><x><y/>/*\n*/</x></>) {throw  '' ;break M; }");
tryItOut("M:do const function::__noSuchMethod__ = <> '' </>; while((constructor = [ '' ]) && 0);");
tryItOut("{yield; }");
tryItOut("return;");
tryItOut("while(((eval).call( /x/ , eval)) && 0)continue L\n");
tryItOut("{/*infloop*/while(((( /x/ ).call(*, )) & __parent__ = __proto__))var prototype, constructor = prop;; }");
tryItOut("if(<><x><y/></x></>) { if (yield 3) var prop; else ( '' );}");
tryItOut("/*for..in*/for(var constructor in  '' ) if(<><x><y/></x></> || each) /*infloop*/L:for( /x/ ; @foo; *::*) {null } else __noSuchMethod__");
tryItOut("for(let y in []);");
tryItOut("M:while((yield ({}).throw(false) !== __iterator__) && 0)return *::*;");
tryItOut("M:while((__proto__) && 0)return\n");
tryItOut("for(let y in [5,6,7,8]) return; const <><zzz>({__iterator__: new Array() })</zzz></>;");
tryItOut("/*infloop*/L:for(var let = ([1].__defineSetter__(\"__noSuchMethod__\", function () { return <><x><y/></x></> } ))\n; this.watch(\"__count__\", (<y><z/></y>).__defineSetter__); (uneval(<x><y/></x>))) {with(undefined)const __noSuchMethod__, __iterator__ = <y><z/></y>; }\n/*for..in*/for(let @foo in [<x><y/></x>].map(Math.pow)) if(new (__count__).__defineSetter__(<><x><y/></x></> .. __iterator__)) {return;yield *; }\n");
tryItOut("/*infloop*/L:for(({ __count__: ({ __parent__: prototype }) }) = ((//h\nfunction  __parent__ (__count__)__noSuchMethod__)((yield true), <y><z/></y>)); ( ''  >>> false) ? prototype = this : window ..  \"\" ; __noSuchMethod__.* && this.__defineGetter__(\"__noSuchMethod__\", new Function)) {with({}) {{}({}).hasOwnProperty } }");
tryItOut("let (prototype = new Object(), [] = ( /x/  in (p={}, (p.z = <><x><y/></x></>)()))) { 3.141592653589793; }");
tryItOut("var __proto__ = undefined;");
tryItOut("while((prototype.prototype+=(({prototype: <x/> })).eval(5.0000000000000000000000)) && 0){const delete;/*for..in*/for(const undefined['__count__'] in *::*) __iterator__ }");
tryItOut("/*infloop*/for(const __count__ = (yield ({ __proto__: prop, constructor: __count__ })); new Iterator(window ^ <><x><y//*\n*/></x></>.__lookupGetter__(\"__noSuchMethod__\"), ([15,16,17,18].map(Function, __iterator__))); *::* !== (-1)) (prototype = __count__);");
tryItOut("if(function ([y]) { }) { if (__parent__.__proto__ setter= (-0) & window) {export *; } else {export __iterator__; }}\n");
tryItOut("while(((({ constructor: __iterator__ }) = (<x><y>'<try { (<x/>); } catch(__proto__) { let constructor, get; } /x yield; > >>= [z1,,]).__iterator__ = prop)) && 0){gc()\n }");
tryItOut("let __noSuchMethod__ = [1,,], prop = null;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (@foo.__defineSetter__(\"constructor\",  /x/ )) in (<><x><y/></x></>.eval(undefined))) {/*infloop*/while(*::*){const prop =  \"\" , __count__ = <y><z/></y>; }L: (prototype); }");
tryItOut("L: {{} }");
tryItOut("/*infloop*/for(constructor = <y><z/></y>; <><x><y/></x></>.__lookupGetter__(\"prop\"); <><x><y/></x></>) export __count__;\nexport constructor;\n");
tryItOut("M:do {L: return <y><z/></y>;return; const __noSuchMethod__; } while(((new (033.__lookupGetter__(\"constructor\"))(__parent__ =  /x/g , <x><y/></x>).__defineSetter__(\"__iterator__\", new Function))) && 0)//h\n;");
tryItOut("let (__count__ = (prop.__proto__), ({ <bbb xmlns:ccc=\"(({ __noSuchMethod__: __parent__ }) = window != (function ([y]) { })())[({\t set __parent__(prototype, __count__) /x/ , __noSuchMethod__: * })]\"><ccc:eee></ccc:eee></bbb>: __iterator__, prototype: [] })) { /*for..in*/for(let __parent__ in ((function  __iterator__ (__parent__) { yield __noSuchMethod__.(this) } )(__proto__)))yield; }");
tryItOut("do (1 for (x in [])) while((this.__defineGetter__(\"prototype\", [1,2,3,4].slice)) && 0);");
tryItOut("/*for..in*/for(let __noSuchMethod__.__noSuchMethod__ = __count__ in  '' ) __proto__");
tryItOut("/*for..in*/for(__iterator__.__count__ in this.__defineGetter__(\"prop\", new Function)) {[__iterator__]/*infloop*/M:for((<><x><y/></x></>.__lookupGetter__(\"__count__\")); 'fafafa'.replace(/a/g, /a/gi); __count__.hasOwnProperty\f(\"__noSuchMethod__\")) __noSuchMethod__ = __noSuchMethod__; }");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] = ((1 for (x in []))).call(((-1--) ? (new (1.2e3)()) : -1()), ) in 'fafafa'.replace(/a/g, (new Function(\"/*for..in*/for(const __count__ in <x><y/></x>) {const __iterator__ = this, function::__count__; }\")))) throw StopIteration;");
tryItOut("with({prop/*\n*/: <xxx {constructor}={((~.2))} />}){if(<><x><y/></x></>) arguments; else  if (prototype = 0/0) {const constructor = <><x><y/></x></>, setter = @foo;let prop, __noSuchMethod__; } }");
tryItOut("{/*infloop*/M:for(let __parent__ = @foo(<><x><y/></x></>, this); ({__parent__: true}); <x><y/></x> &=  { yield <x/> } ) {<><x><y/></x></>; } }");
tryItOut("L:with(prototype = ( '' ++))let prototype = <><x><y/></x></>, __iterator__;");
tryItOut("return;return <x><y/></x>;");
tryItOut("/*infloop*/L:do {with({}) { {} }  } while(<><>(<x><y/></x> + (function ([y]) { })())</></>);");
