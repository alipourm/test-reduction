tryItOut("if(let ([__count__, , __parent__] = (<x><y/></x> < this), __proto__) function::__noSuchMethod__.constructor) {;__iterator__ = this; } else  if (constructor['__iterator__'] = 'fafafa'.replace(/a/g, (new Function(\"\")))) yield false;");
tryItOut("/*infloop*/for(__count__ = (p={}, (p.z = <x><y/></x>.__lookupSetter__(\"__noSuchMethod__\"))()); ({__noSuchMethod__: __proto__}); <x><y/></x>.(<x><y/></x>).eval('fafafa'.replace(/a/g, false))) /*infloop*/M:do {switch(constructor) { case 2: yield;break; default: yield {};break;  }break M; } while(new (__proto__)(true));");
tryItOut("if([]) {prototype = <><x><y/></x></>, prop = <x><y/></x>; } else ;");
tryItOut("with({prop: (new Function).call(<y><z/></y>, <x/>)})export *;\nvar function::__count__ = true;const __count__ = <y><z/></y>;\n");
tryItOut("/*infloop*/M:do var prop; while(#1=[#1#]);");
tryItOut("if(null) export prototype; else  if (((yield <><x><y/></x></>))) {export prototype; } else {export *; }");
tryItOut("{continue M;return; }");
tryItOut("/*infloop*/do /*infloop*/for(var ({ prototype: x::__noSuchMethod__ }) = this < false; (window.watch(\"prototype\", ((false).__defineSetter__))); constructor) {/*infloop*/for(({ __iterator__: __noSuchMethod__ }) =  '' .__lookupSetter__(\"this, <y><z/></y>\"); [1,,]; __count__.( \"\" )) {break M;let prototype = <x/>, __noSuchMethod__; }'haha'.split const __proto__; } while(__iterator__|=true.__defineGetter__(\"constructor\", ({}).__lookupGetter__));");
tryItOut("L:with(window){export __proto__;export constructor; }");
tryItOut("for(let y in [5,6,7,8]) yield ([([11,12,13,14].map.__defineGetter__(\"__count__\", ({}).__lookupGetter__)) if (<x><y/></x>)]);");
tryItOut("if((let (__noSuchMethod__) @foo <= <x/>)) {var x::__parent__, constructor; } else  if (__proto__) /*infloop*/for(({ set prototype() { return ((p={}, (p.z = window)()))\f } , __noSuchMethod__ setter: eval }); 033 *= null; eval(\"-3/0\",  \"\" )) yield; else {}");
tryItOut("if(__iterator__ = (({ get __count__ __parent__ (window)undefined }))) { if ( '' ) {export __count__; } else {with(*)yield true;return <y><z/></y> }}");
tryItOut("/*infloop*/M:for(var __parent__; yield [15,16,17,18].filter(({}).hasOwnProperty, *); new yield prototype.watch(\"prop\", <x/>)()) {/*for..in*/for(let [__parent__, __count__] = (/a/gi).call(this.__defineSetter__(\"__iterator__\", function(q) { return q; }), __count__ = constructor) in <x><y/></x>) {if(<x/>) Math.pow else ;(<x/>); } }");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*for..in*/M:for(let constructor = (constructor) in (-1)) yield <><x><y/></x></>;");
tryItOut("/*infloop*/do (<x><y/></x>); while(__iterator__);");
tryItOut("with({__iterator__: \n__iterator__ = break M;}){if(<x/>.prototype) { if (*::* ? <><x><y/></x></> : [,].yoyo((yield <><x><y/></x></>))) {(new Function(\"export *;\"))var __noSuchMethod__; }} else {gc()const constructor = #1=[#1#]; this  }export __count__; }");
tryItOut("/*for..in*/for(const (prop) in ((({ __iterator__: ({ x::constructor: [set, , prototype, , __noSuchMethod__] }) }) = (__iterator__))(( /x/  if (3.141592653589793)))))");
tryItOut("L: each, prop");
tryItOut("M:with((<x><y/></x>.valueOf(\"number\"))())L:if((3/0.__noSuchMethod__)--) const __proto__, __proto__; else  if (((__proto__.__proto__ setter= function(y) { yield y; break ;; yield y; })\n)) {return window;const constructor = <><x><y/></x></>; } else /*infloop*/for(@foo; @foo; ({})) {gc() }");
tryItOut("if( /* Comment */({a2:z2})) {return <x><y/></x>;; } else export *;\nyield [];\n");
tryItOut("if(__count__ = true) { if (new gc(<x><y/></x>, true\r)) } else {; }");
tryItOut("if(yield #3={a:#3#}) { if (<x/> &= {}) {return; } else { }}");
tryItOut("__count__ = prototype;");
tryItOut("while((+3/0) && 0){nullswitch(prop = __count__) { case (-0) >>>=@foo: <>\r<x><y/></x></>break;  } }");
tryItOut("/*for..in*/for(__proto__ = () in (<x/>)(undefined, [,,z1])) {/*infloop*/for(prototype; *.hasOwnProperty(\"__proto__\"); function ()(({a1:1}), <y><z/></y>)) {yield <y><z/></y>; }var __proto__ = constructor = (__iterator__.__parent__ getter=  \"\" ); }");
tryItOut("/*infloop*/L:for(__iterator__; this; ([11,12,13,14].map)) let constructor, __proto__;{}");
tryItOut("let __noSuchMethod__, prop");
tryItOut("/*infloop*/for(<x/> = prototype; null; constructor) {export *; }");
tryItOut("L:with(((1 for (x in [])))(new (@foo)(function(id) { return id }, [z1]) + ({})const __parent__ = <y><z/></y>, prototype = 1e+81;, <><x><y/></x></>)){/*infloop*/while(0.1){throw <><x><y/></x></>; } }");
tryItOut("return;");
tryItOut("throw window");
tryItOut("/*infloop*/while(({ __parent__: __count__, __iterator__: __proto__: @foo }) = (window | #3={a:#3#})){yield;__iterator__  }");
tryItOut("/*infloop*/for(const prop = this; 1e81; this) {export *; }");
tryItOut("/*infloop*/for((function(y) { yield y; throw window;; yield y; })(1e-81, window); ; __iterator__ [] = *::*) {{const prototype = 4., constructor; } }");
tryItOut("this.zzz.zzz;");
tryItOut("(<><x><y/></x></>)\nconst __parent__ = @foo;");
tryItOut("if((<><x><y/></x></>--)) let prototype, function::prop = constructor;");
tryItOut("{if(prop && *) { if (@foo++) while((*::*) && 0){break ; }} else /*infloop*/do {true;let __noSuchMethod__ = <x/>, constructor = setter; } while(<y><z/></y>); }");
tryItOut("export *\n");
tryItOut("if(true) {export *;const __proto__; } else  if (<><x><y/></x></>) {; } else {}");
tryItOut("\nreturn window;\n");
tryItOut("{if(window) var __proto__; else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {const __noSuchMethod__ = <x/>; } else {/*for..in*/for(var __proto__ in (((new Function(\"return;\")))(prototype)))throw undefined; } }");
tryItOut("/*for..in*/for(prop in [15,16,17,18].filter(({}).hasOwnProperty, (new Exception()).watch(\"__noSuchMethod__\", [1,2,3,4].map))) {;this.zzz.zzz; }");
tryItOut("while((constructor.__iterator__) && 0)return @foo");
tryItOut("constructor = prototype;");
tryItOut("(033); const ");
tryItOut("M:with(({constructor: constructor}\n)){L:switch( /x/g ) { default:  }const prototype; }");
tryItOut("L:do return undefined const __count__; while(((__noSuchMethod__ = 0.1)) && 0);");
tryItOut("with({}) let prototype, __count__ = 1e4;");
tryItOut("switch((1.2e3 >>> *.hasOwnProperty(\"__noSuchMethod__\"))) { case 8: /*infloop*/L:for(5.0000000000000000000000; ; (__parent__%=<>\r<x><y/></x></>).__noSuchMethod__ =  /x/ .isPrototypeOf([,,z1])) return 033;default: return;break;  }");
tryItOut("M:with({__parent__: <y><z/></y>.watch(\"__noSuchMethod__\", function (prop) { {} } )})yield;");
tryItOut("L:with({__noSuchMethod__: ([11,12,13,14].filter)}){{}throw  /x/g ; }throw new function(q) { return q; }() .. this++.unwatch(\" \\\"\\\" .__count__\");");
tryItOut("return;");
tryItOut("const prop = true, __parent__;");
tryItOut("gc()");
tryItOut("if((undefined.__lookupSetter__(\"prop\"))) { if (__noSuchMethod__ = (__parent__.(this))) {(new (Math.pow)()); }} else { }");
tryItOut("{if(true) { if (<x><y/></x>) {return *; }} else {\t; } }");
tryItOut("L:if((__noSuchMethod__ = <x><y/></x>)) {export *;export __count__; } else  if ((undefined if (false))) {}\nyield;");
tryItOut("return\nyield #1#;");
tryItOut("/*infloop*/for(var prop; (Number()); void <></>) {if(__count__) export *; else  if (false) const yield, constructor;let ([prototype, prototype, __count__, __noSuchMethod__] = *::* %= <y><z/></y>, prototype = #1#) { return @foo; } }");
tryItOut("if(<x><y/></x>) gc() else  if (__proto__) yield <y><z/></y>; else {}");
tryItOut("throw StopIteration;");
tryItOut("if((new (false)(__proto__, this))) {if({}) {yield; } else  } else (this);");
tryItOut("/*infloop*/for(const __parent__ =  \"\" ; <y><z/></y>; <><x><y/></x></>) {}");
tryItOut("M:if((new (function  prop (__proto__, __parent__) { continue ; } ).call(*)).hasOwnProperty(\"prototype\")) {export *;(__proto__); } else yield;");
tryItOut("/*infloop*/for(let __iterator__; <><bbb xmlns:ccc=\".2.prop\"><ccc:eee></ccc:eee></bbb></>; +<x><y/></x>) with(#3={a:#3#}){var __parent__, prototype = ({a1:1}); }");
tryItOut("{return;throw <x/>; }");
tryItOut("L: {var __iterator__ = (-1);/*infloop*/L:do {(<x><y/></x>); } while(eval(\"yield <><x><y/></x></>;\", window)); }");
tryItOut("let (constructor) { var __iterator__ = 3/0, __count__ = window; }");
tryItOut("/*for..in*/for(const __proto__ in false) {yield ((yield __iterator__ = \ttrue)).unwatch(\"constructor\");const ({ __noSuchMethod__: ({ prototype: __parent__ }) }); }");
tryItOut("(new Function(\"return;\"))");
tryItOut("if(__noSuchMethod__ = window for each (__iterator__ in null)) export prop; else {return; }");
tryItOut("{with({constructor: \t__parent__.constructor = (uneval(this))})prototype;/*infloop*/while(({constructor getter: function(y) { yield y; {}; yield y; },  get __iterator__ ({ __noSuchMethod__: __proto__, constructor: __parent__ }) (__proto__, __noSuchMethod__) { const prop, __parent__ = <><x><y/></x></>; }  })){const prototype = <><x><y/></x></>, __proto__; } }");
tryItOut("throw [,,z1];");
tryItOut("with([033]){'haha'.split }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(<><x><y/></\nx></>.constructor in return;) (<y><z/></y>);");
tryItOut("while((<><xxx>{return;}</xxx></>) && 0){if(this.__defineSetter__(\"__parent__\", (({__proto__: undefined })))) { if (([[1]])[ '' ]) {(<><x><y/></x></>)\t; } else {continue L;const constructor, __proto__; }} }");
tryItOut("const __noSuchMethod__ = @foo;");
tryItOut("{}");
tryItOut("let(__iterator__, __proto__ = __proto__) ((function(){})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in this.__defineSetter__(\"__parent__\", ([15,16,17,18].sort(gc, @foo)).__defineSetter__)) {const prototype, __iterator__ = 033; }");
tryItOut("with({prototype: new []().unwatch(\"__noSuchMethod__\")}){export *;L: throw <><x><y/></x></>; }");
tryItOut("if(({ get prop __parent__ () { L: {export __proto__; } } ,  get __count__(({ __parent__: ({ prop: constructor, prop: getter }), __noSuchMethod__: prototype })) { return constructor = __parent__.__lookupGetter__(\"__count__\").* }  })) {L:if(<><x><y/></x></>) { if (__noSuchMethod__) return;} else __noSuchMethod__ = .2, prototype;export __parent__; }");
tryItOut("if(yield ([11,12,13,14].some)) {; }");
tryItOut("/*for..in*/for([__parent__, constructor] = __count__.(((([[1]]).__defineSetter__).call).call(<x/>, <x><y/></x>)) in (new *.__defineSetter__(\"__count__\", Function)( ''  != __noSuchMethod__,  '' ))) {let constructor, __iterator__;/*infloop*/while(([15,16,17,18].filter(Math.sin, __count__.__lookupSetter__(\"__noSuchMethod__\"))))function(q) { return q; } }");
tryItOut("\n/*infloop*/do continue M; while(<x><y/></x>);");
tryItOut("/*infloop*/for(__count__.__iterator__ = <x/>; yield this __noSuchMethod__.__defineSetter__(\"__parent__\", [1,2,3,4].slicelet([prop, ({ __parent__: __parent__, __proto__: __iterator__ }), , , ] = (<x><y/></x> - true), prototype = new true) ((function(){yield eval(\"export constructor;\", this);})());); ({a2:z2})) {do {yield >;undefined } while((undefined) && 0);return; }");
tryItOut("/*for..in*/for(const __count__ in ((Math.sin)(prototype | this)))export __count__;");
tryItOut("if((#1=[#1#].__noSuchMethod__)) yield; else  if (new (({a2:z2}))()) gc() else {const __proto__; }");
tryItOut("with( /x/g )continue ;");
tryItOut("let(__proto__) ((function(){this.zzz.zzz;})());");
tryItOut("/*infloop*/for(let [] = __proto__; (__count__); (uneval( /x/ ))) {let __proto__ = <><x><y/></x></>, __proto__ = window; }");
tryItOut("((-0))");
tryItOut("with(this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))prototype");
tryItOut("/*for..in*/L:for(let __count__( \"\" ).__iterator__ in <><x><y/></x></>) return;");
tryItOut("let(prop = <><x><y/></x></>.watch(\"__iterator__\", (function(y) { yield y; {}; yield y; }).apply)) ((function(){try {  /x/ ; } catch([11,12,13,14].sort) {  } })());");
tryItOut("let (constructor = ((p={}, (p.z = eval(\"<x/>\", <><x><y/></x></>))())), ({ constructor: __count__ }) = false) { <x/>; }");
tryItOut("let (__proto__, __iterator__ = <xxx>{__noSuchMethod__}</xxx>) { if( \"\" ) export *; else  if (false) throw window; else function(q) { return q; } }");
tryItOut("return true;");
tryItOut("{[1,2,3,4].map }");
tryItOut("if((__noSuchMethod__.__noSuchMethod__[(prototype = prototype) ? (uneval(true)) : ([[1]])()\f])) L:do 'haha'.split while((__proto__) && 0); else /*infloop*/M:for(let prototype = <y><z/></y>; window; prop) {return *::*; }");
tryItOut("/*infloop*/while(this.zzz.zzz)export *;");
tryItOut("do {throw <x><y/></x>; } while((__proto__) && 0);");
tryItOut("for(let y in []);");
tryItOut("gc()");
tryItOut("with(<><x><y/></x></> .@ @foo){yield @foo;<x><y/></x>/*for..in*/for(const prototype = <x><y/></x> in  '' ) {return 0/0; } }");
tryItOut("gc()yield *\n");
tryItOut("/*infloop*/for(let __proto__; __noSuchMethod__.eval(window); new (__proto__)()) {var __noSuchMethod__ = <x/>, __count__ = <x><y/></x>;\n;\n }");
tryItOut("if((yield []).__lookupSetter__(\"__proto__\")) 0; else ;");
tryItOut("<x/>\n(<x><y/></x>.__lookupSetter__(\"constructor\"));\n");
tryItOut("/*for..in*/for(var __proto__ = eval(\"constructor\", constructor = this) in void __parent__ = prototype) 'haha'.split");
tryItOut("/*infloop*/while([15,16,17,18].map(/a/gi, .2)){var constructor = 3.141592653589793, prototype; }\n");
tryItOut("switch(<x><y/></x>) { default:  }");
tryItOut("/*infloop*/for(prop; (var setter); (<><x><y/></x></> === (__parent__))) /*infloop*/M:for(let __parent__; (yield); <><><ccc:ddd><!--yy--></ccc:ddd></></>) /*infloop*/L:for(constructor = window; undefined; __parent__) {yield arguments;; }\n/*infloop*/for(var prototype = delete (uneval((yield x::__parent__)((#1=[#1#].throw(1e4)), [z1,,]))); ([({__count__:  '' })]); (eval).call(<><x><y/></x></>['prop'] = ('fafafa'.replace(/a/g, Function)), )) export *;");
tryItOut("if(__proto__ | undefined) { if (([([#1=[#1#]])].some((<><x><y/></x></>).watch))) {export __noSuchMethod__; }} else L: {return;-0 }");
tryItOut("/*infloop*/for(let __proto__ = <x/>; true; <x/>) export *;");
tryItOut("with({__proto__: (.2.unwatch(\"constructor\"))}){}");
tryItOut("{if(let (__parent__ = [[1]]) (prop >>= @foo)) {\n{} } else  if (eval(\"\", ({a2:z2}))) if([15,16,17,18].map([1,2,3,4].slice, <x><y/></x>)) gc else \t if (()) (*::*); else {yield;this } else {/*for..in*/for(let [__proto__, constructor] = @foo in arguments) {} } }");
tryItOut("/*infloop*/do {let (prop = true) { const __parent__ = <><x><y/></x></>; } } while(<x/>);");
tryItOut("/*infloop*/for(__iterator__; <><zzz> \"\" </zzz></>; __parent__.__proto__ = ({a2:z2})) ([z1,,]).watch");
tryItOut("if(<><!--yy--></>) let __iterator__ = [[]]; else {(yield;);this.zzz.zzz; }");
tryItOut("/*infloop*/for(constructor.((new prop(this, [1,,])));  /* Comment */constructor.yoyo(new  \"\" (<><x><y/></x></>)); __parent__|=\n(__proto__)[({a2:z2})].prop = ((*)())) {{return;yield; }gc() }");
tryItOut("/*infloop*/for(const __count__ = 4.; *::*; arguments) {const __parent__, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("(0.1);let __count__ = <y><z/></y>, __noSuchMethod__ = null;");
tryItOut("function::constructor = constructor;");
tryItOut("return __noSuchMethod__;");
tryItOut("with((prop)(( /x/ )))@foo;");
tryItOut("if(__iterator__) {yield;(new Function(\"var constructor = window, __parent__;\")) }");
tryItOut("yield setter = <x><y/></x> ::  /x/g ;");
tryItOut("/*for..in*/for(__proto__ = <y><z/></y> in @foo) { '' ;; }");
tryItOut("export *\nL: L:while((<><x><y/></x></>) && 0)export __iterator__;");
tryItOut("L: {export __count__;const __iterator__ = __proto__; }");
tryItOut("{ }");
tryItOut("L: {throw window;/*for..in*/for(let __proto__ = this in <><x><y/></x></>) return; }");
tryItOut("let(constructor = #1#) { return (__noSuchMethod__ in (yield false));");
tryItOut("/*infloop*/for(const __noSuchMethod__ = -3/0; ({a2:z2}); [1,,]) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in undefined) {}");
tryItOut("__proto__ = (p={}, (p.z = ({ get <x><y/></x>\f() /x/  }))())");
tryItOut("/*infloop*/do {if(this > <x><y/></x>) { if ([15,16,17,18].some(eval, null)) /*for..in*/for(const [prop, prototype] = <x><y/></x>.__defineSetter__(\"x::get\", __noSuchMethod__) in *::*) {break M;const __iterator__ = <><x><y/></x><\f/>; } else {L: export prototype\f;/*for..in*/for(var prop = <x><y/></x> in <x><y/></x>) {} }} } while(__proto__ = (window\n) <= 'haha'.split(<x/>, <><x><y/></x></>));");
tryItOut("x::__proto__ = prototype;");
tryItOut("return true &= null;");
tryItOut("/*infloop*/do {/*for..in*/for(const prop = 5.0000000000000000000000 in this) {return return this;; }throw [[1]]; } while((\n__iterator__(__count__ = <x><y/></x>, true).__defineSetter__(\"__proto__\", (1e4 * window))));");
tryItOut("L:if((p={}, (p.z = window)()) <= eval(\"(<x><y/></x>);\", <x><y/></x>)) {export *; } else  if (*::*) {yield @foo; }");
tryItOut("prototype");
tryItOut("/*for..in*/M:for(var constructor = ('fafafa'.replace(/a/g, function  prototype (constructor, constructor) { __proto__ = {}, __proto__; } )) in <x><y/></x>) {;return [[]]; }");
tryItOut("{<{prototype}>yyy</{prototype}> }");
tryItOut("/*for..in*/for(__noSuchMethod__ in  \"\" ) /*infloop*/while([1])function(q) { return q; }");
tryItOut("if(*.unwatch(\"__count__\")) export prototype\nlet __noSuchMethod__ = @foo;");
tryItOut("M:do constructor = [constructor].map((window).watch) while((new <><x><y/></x></> >= #1=({__iterator__: true}) >>>=({__count__: prop})) && 0);");
tryItOut(";\n(<x><y/></x>);\n");
tryItOut("L:with({function::prototype(<x/>): <x><y/></x>}){{}(__count__); }");
tryItOut("throw StopIteration;");
tryItOut("export *;");
tryItOut("/*infloop*/L:for(const ({ constructor: prototype }) = __parent__.__parent__ >=  /x/g ; (prototype = window); (({}).__lookupGetter__)) if(((<y><z/></y>)[1.3])) break M; else {; }");
tryItOut("L: {return [[]]; }");
tryItOut("let (prototype) { export __parent__; }\nwith({__noSuchMethod__: this.__defineSetter__(\"__proto__\", new Function)}){(*::*); }");
tryItOut("L:if(([15,16,17,18].map(constructor, window).__lookupGetter__(\"__noSuchMethod__\"))) {const prototype = this;continue ; } else  if (@foo--) const __count__ = <x/>, prop; else break M;");
tryItOut("/*for..in*/for(let [prop, constructor] = __iterator__ in <x><y/></x>) return;");
tryItOut("do {[1,2,3,4].slice } while((null) && 0);");
tryItOut("/*infloop*/for(let __proto__; __iterator__; constructor.eval(<y><z/></y>)) {{__iterator__; }/*infloop*/do {var prototype = this, __iterator__; } while(<x><y/></x>); }");
tryItOut("if(([1.3].map(Math.sin))) { if (__parent__ = 5.0000000000000000000000) function  __proto__ () { return {} }  else {\t__proto__, constructor = <x><y/></x>;throw 3/0; }}");
tryItOut("M:with({__parent__:  \"\" }){<><x><y/></x></>\n{}__proto__, __iterator__ }");
tryItOut("M:if(__noSuchMethod__.prototype = getter = *::*) { if (new 'haha'.split(typeof <><x><y/></x></>, @foo)) function () { \treturn <x><y/></x>; } } else {/*infloop*/M:for(var __proto__; (prop.eval(4.)); (this.__defineGetter__(\"prototype\", __parent__))) let prop, prop;function(y) { yield y; (true);; yield y; } }");
tryItOut("while((let ([, , __noSuchMethod__, , ] = 0/0.__defineGetter__(\"prototype\", new Function)) window()) && 0)__count__");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {if([,] & @foo) { if (void #3={a:#3#}) {} else L:do yield 0; while((0) && 0);(function::__proto__); } while([15,16,17,18].map(<y><z/></y>, (eval(\"constructor, __count__;\", [z1]))));");
tryItOut("function  __iterator__ (__count__, __noSuchMethod__)*::*");
tryItOut("/*infloop*/for(~each; prop; ( \"\" [(Iterator())])) {const __parent__, __iterator__;prototype.__count__ }");
tryItOut("/*infloop*/M:do {(<x><y/></x>);return; } while(*::*)\n");
tryItOut("/*infloop*/for(this; [1,,](this); __count__.constructor = constructor) {yield false;{} }");
tryItOut("/*for..in*/for(__count__ = constructor =  /x/  ^ ('fafafa'.replace(/a/g, (function ()@foo).apply))\n in (__count__ = (true.unwatch(\"__noSuchMethod__\")))) L: /*infloop*/for(let [, constructor, __noSuchMethod__] = <><x><y/></x></>.unwatch(\"prop\"); Iterator(window); true.__defineGetter__(\"__proto__\", function  prototype (__parent__)undefined)) __parent__ = *::*;");
tryItOut("this.zzz.zzz;");
tryItOut("L: {var __iterator__;return  \"\" ; }");
tryItOut("with({constructor: [15,16,17,18].filter(Math.sin, <><x><y/></x></>).throw((__proto__.( '' )))})/*\n*/ const prop;");
tryItOut("yield Boolean(new Iterator(1.3, @foo), <y><z/></y>);");
tryItOut("throw function::constructor;");
tryItOut("/*for..in*/for(var \tprototype = <x/> - *::* in this) __parent__ = constructor;");
tryItOut("throw <><x><y/></*\n*//x></>; const constructor;");
tryItOut("/*infloop*/for(var __proto__ = this(); 033.prop; @foo) {return \t<x><y/></x>; }");
tryItOut("prop.prototype");
tryItOut("with({__proto__: [11,12,13,14].sort.__iterator__ = prototype}){<x><y/></x>; }");
tryItOut("return <x><y/></x>;");
tryItOut("/*for..in*/for(var 0/0['prop'] in __iterator__) {*::* >= __parent__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in  /x/g .@*) {if(<><bbb xmlns:ccc=\"({constructor: <x><y/></x>.__defineSetter__(\"prop\", (1 for (x in [])))})\"><ccc:eee></ccc:eee></bbb></>) eval else  if (constructor+=[,,z1]) var __count__, prototype = <x><y/></x>; else (-0);yield <x><y/></x>; }");
tryItOut("with({__parent__: let (__count__)  \"\" }){break M;; }");
tryItOut("prototype = prototype;");
tryItOut("if(true >>>=<><x><y/></x></>) { if (undefined.@*) {var prototype = <x/>; } else { }}");
tryItOut("if(this.zzz.zzz) return  ''  && <x><y/></x>;");
tryItOut("/*infloop*/do /*infloop*/do \n<x><y/></x>; while([z1])\n while((yield null));");
tryItOut("/*infloop*/do {{yield [,,]; } } while(((#2=({__parent__: <x/>})).__defineGetter__(\"__count__\", Math.pow)));");
tryItOut("M:while(((new String([[]]))) && 0){}");
tryItOut("export __parent__;");
tryItOut("L:if((({ __noSuchMethod__: ({ __count__: [], prop: ({ setter: ({ __count__: prototype, __iterator__: __noSuchMethod__ }) }) }), constructor: __parent__ }) = ((undefined = [z1]) if (#3={a:#3#})))) with({__parent__: (this).call(@foo, <x/>.watch(\"__proto__\", ({}).hasOwnProperty))}){export __iterator__; } else __proto__: window !==  /x/g \f < (null.propertyIsEnumerable(\"constructor\"))");
tryItOut("with({}) prototype = prop;");
tryItOut("/*infloop*/for(({ prop: __noSuchMethod__ }) = window; (().__defineSetter__(\"prop\", [1,2,3,4].map)); with({}) __iterator__ = function::__iterator__;) /*for..in*/for(let prototype in [*]) <x><y/></x>");
tryItOut("const __count__ = prototype\n");
tryItOut("/*for..in*/for(var __count__ in ((prop = <y><z/></y>)(([15,16,17,18].map(<y><z/></y>, (delete false)))))){(3.141592653589793); }");
tryItOut("/*for..in*/for(const __parent__ = __iterator__ in __iterator__) yield this;");
