
tryItOut("M:if((new (new ((({ __count__: __noSuchMethod__ }) = ({ __proto__: __count__, constructor: (function ([y]) { })() })).isPrototypeOf(<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")))(undefined.throw(0x99)))(let (prop) yyy, ~<><x><y/></x></>))) M:if(*) return; else  if (-3/0) {{} } else /*for..in*/for(__noSuchMethod__ = void <><x><y/></x></> in 3.141592653589793.eval(*::*)) yield <><x><y/></x></>;");
tryItOut("switch(constructor) { case window: return;break;  }");
tryItOut("/*infloop*/M:do {return prototype|=window; } while((__count__ = \nundefined !== 'fafafa'.replace(/a/g, new Function))); const __noSuchMethod__;");
tryItOut("with({prop: -0})const __parent__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(((({__iterator__: <x/>})).__defineGetter__(\"__iterator__\", ([15,16,17,18].some(/a/gi, <y><z/></y> for each (__proto__ in -1).prototype)).__defineSetter__)); (yield <><x><y/></x></>) && (new new window()) >>= <x><y/></x>.valueOf(\"number\"); <>yyy</> === prop|=[11,12,13,14].filter.propertyIsEnumerable(\"prop\")) /*for..in*/for(prop in ((function (({ __noSuchMethod__: __proto__ }), __proto__) { return Function } )(-3/0.valueOf(\"number\"))))yield  \"\" ;");
tryItOut("/*infloop*/do {while((this.zzz.zzz) && 0)'haha'.split } while((this.__defineGetter__(\"__iterator__\", [1,2,3,4].map)));");
tryItOut("/*for..in*/for(const prop = 3 in  '' ) {; }");
tryItOut("switch([15,16,17,18].map(function (prototype) { yield true } , true)) { case 'fafafa'.replace(/a/g, [1,2,3,4].map):  }");
tryItOut("yield (prop.__count__ setter=  \"\" );");
tryItOut("if((#0=({__noSuchMethod__: <y><z/></y>\n}))) {function (__parent__, __noSuchMethod__) { yield __parent__ }  } else {(constructor);continue ; }");
tryItOut("let (__iterator__ = window) { ; }");
tryItOut("(__proto__);\n(undefined);\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do return; while(<y><z/></y>\n);");
tryItOut("/*infloop*/for(__count__; (uneval(this)); #2=[4]) {yield; }");
tryItOut("{M:with({__parent__: __proto__})break ;let (prop) { if(<><x><y/></x></>) { if (\tthis) throw true; else __count__} } }");
tryItOut("let(__noSuchMethod__) ((function(){with({}) { return  /* Comment */<y><z/></y>; } })());");
tryItOut("/*for..in*/for(* in ((({}).__lookupGetter__)((({ __parent__: [], __proto__: ({ prototype: ({ __parent__: __proto__, constructor: prototype }), prop: ({ __iterator__:  \"\"  }) }) }))))){yield prototype;if(this.__defineGetter__(\"constructor\", Math.sin)) {yield false;return; } else  if (__proto__ == <y><z/></y>) {break ;; } }");
tryItOut("if(<x/>) { if (undefined) //h\n{{} } else throw false;}");
tryItOut("try { return constructor; } catch(prototype) { let __count__ = <y><z/></y>; }  const __noSuchMethod__;");
tryItOut("{}");
tryItOut("try { __iterator__ = __proto__; } finally { for(let y in [5,6,7,8]) export constructor; } ");
tryItOut("let(prototype, ({ prototype: __count__ })) { for(let y in []);");
tryItOut("");
tryItOut("throw __count__;");
tryItOut("break L;");
tryItOut("switch(*::*) { default: case <x><y/></x>: break; const __iterator__, prop;case 1: break; case 4: break ;this;break; case 3: {}break;  }");
tryItOut("/*infloop*/for((undefined); yield <><x><y/></x></>; <!--yy-->) /*infloop*/M:for((__noSuchMethod__ =  '' ); undefined / .2 - this for (__iterator__ in (-0)); yield new null(0)) ({}).hasOwnProperty");
tryItOut("{throw this; }");
tryItOut("if(yield #1#) /*infloop*/for(var __noSuchMethod__; this; (new Date(<x/>).yoyo(([11,12,13,14].map))) %= @foo) {continue ; } else {with({__parent__: eval(\"const constructor, __noSuchMethod__;\",  /x/g )})window;L: throw prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let   in gc()) with(*::*--){if(<x/>.__defineSetter__(\"constructor\", 'haha'.split)) var prototype; else  if (prototype < <><x><y/></x></>) //h\nreturn  \"\" ; }");
tryItOut("{throw StopIteration;if(__noSuchMethod__.(<><x><y/></x></>)) { if ((let (prop, __noSuchMethod__)  '' )) export *; else export __proto__;\n} }");
tryItOut(";");
tryItOut("/*infloop*/for([ /x/ ].map((1 for (x in []))); constructor.constructor = <y><z/></y>; * < 1e4.__lookupGetter__(\"prototype\")) {; }var prop;");
tryItOut("/*infloop*/L:for(window;  /x/ .unwatch(\"__proto__\"), eval(\"throw *::*;\",  \"\" ); (__count__.eval(3).__lookupSetter__(\"constructor\"))) yield <y><z/></y>;");
tryItOut("L:if(this.__defineSetter__(\"__noSuchMethod__\", @foo)) { if ((new RangeError())) {; } else __noSuchMethod__}");
tryItOut("return;");
tryItOut("return % \"\" ;gc()");
tryItOut("/*infloop*/L:for(var ({ __proto__: ({ __proto__: ({ prop: ({ prototype: [({ prototype: constructor, __noSuchMethod__: __count__ }), , , ({ this: [__count__, __noSuchMethod__, delete, ], __iterator__: ({ __parent__: __iterator__ }) })], __noSuchMethod__: ({ __count__: __parent__ }) }) }) }), prototype: ({ constructor: __noSuchMethod__, __iterator__: __iterator__ }) }) = eval(\"new window()\", undefined\n.propertyIsEnumerable(\"__iterator__\")); new (1e4).__defineSetter__(arguments, @foo;) > 0/0 in window; new [[,]].sort(function (prop, __iterator__)undefined)(((* = <x/>).valueOf(\"number\")), @foo)) {/*for..in*/M:for(__count__ in <x/>) yield  /x/g ;return\n }");
tryItOut("throw StopIteration;");
tryItOut("\n");
tryItOut("(++(*.__defineGetter__(\"constructor\", 'haha'.split))).__iterator__ = __count__;");
tryItOut("if(@foo\f.__parent__) {0; } else  if (eval(\"yield <x><y/></x>;\", <>\f<x><y/></x></>)) ([,,]); else continue ;");
tryItOut("{return;var __proto__ = <x><y/></x>, __parent__; }");
tryItOut("yield\nlet prop = this, __count__;");
tryItOut("if(undefined) { if (([11,12,13,14].some)) if(((1.3).__defineSetter__)()) <x><y/></x>; else {__count__: <y><z/></y> }} else L:switch(function ([y]) { }) { default: return __proto__; }");
tryItOut("with(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((1.2e3.__defineSetter__(\"__proto__\", (__parent__).__defineSetter__)))){if(<x><y/></x>) {const __iterator__ = __proto__;export prop; } else let prototype, prop = <><x><y/></x></>; }");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("/*infloop*/M:for(this.__defineGetter__(\"prop\", (<><x><y/></x>\t</>).watch).@foo; RangeError([,,].hasOwnProperty(\"function::prop\")); *.hasOwnProperty(\"prop\")) yield;");
tryItOut("if(*::*) {export __noSuchMethod__;export __noSuchMethod__; } else gc()");
tryItOut("with(-1)throw <x/>;");
tryItOut("/*for..in*/M:for(let [yield, prop] = [1] in __iterator__) 'haha'.split");
tryItOut("return undefined;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (new (Math.sin)()).__parent__ in  /* Comment */window) export *\nexport *;");
tryItOut("throw constructor;");
tryItOut("{if(<x><y/></x>) {export __noSuchMethod__; } else  if (undefined) {let prop = <y><z/></y>, __noSuchMethod__; } }");
tryItOut("{let __noSuchMethod__;const __iterator__ = ({}), __noSuchMethod__ = <x><y/></x>; }");
tryItOut("throw *::*;\nvar constructor = <><x><y/></x></>, constructor = __parent__;\n");
tryItOut("for(let y in [5,6,7,8]) export *\nexport __count__;");
tryItOut("export *;");
tryItOut("/*infloop*/for((eval(\"prop, __noSuchMethod__ =  \\\"\\\" ;\", *; = *::*)); Function; @foo <= window) {export __noSuchMethod__;const {function(q) { return q; } }; }");
tryItOut("/*for..in*/for(var yield = (*::* && ) in <><x><y/></x></>) ");
tryItOut("export __parent__;\nwith({function::prototype: undefined[ \"\" ]}){with({}) export __parent__; }\n");
tryItOut("throw prop;");
tryItOut("let(__proto__) { return;");
tryItOut("M:if(gc()) {continue ;return; } else {if(*::* ^= true) { if (-this) let __proto__ = 1e+81, __proto__; else yield;} }");
tryItOut("let(prop =  /x/ ) ((function(){gc()})());");
tryItOut("/*infloop*/L:for(const [] = (!<><x><\fy/></x></>).prop; new 'haha'.split(); ) ;");
tryItOut("function::__parent__.constructor");
tryItOut("export *;");
tryItOut("break L\n\n/*for..in*/for(var [prop, prop] = __proto__ = window in __noSuchMethod__ = <x><y/></x>) throw null;\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var [prototype, prototype] = this in @foo) let __parent__ =  /x/g , prototype;");
tryItOut("/*for..in*/for(var [__count__, __proto__] = function ([y]) { } in true) export __count__;");
tryItOut("let prop = __iterator__, prototype;return __noSuchMethod__;");
tryItOut("/*infloop*/while(( '' ).call(<x><y/></x>, )){{return <x><y/></x>;__iterator__ = null; }/*for..in*/for(const [__count__, __iterator__] = <><x><y/></x></> in @foo) {throw this; } }");
tryItOut("/*infloop*/do continue M;throw <x/>; while(<><bbb xmlns=\"let (__proto__ = <x><y/></x>, __noSuchMethod__) [[]]\"> </bbb></>);");
tryItOut("/*infloop*/for([1,,]; undefined;  /x/ ) {yield; '' ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let window.prop in <x><y/></x> /= <><x><\fy/></x></>) yield this;");
tryItOut("/*for..in*/L:for((<>function::__count__</>['__count__']) in ((function(q) { return q; })(eval(\"(<x><y/></x>( /x/ ))\", (__noSuchMethod__ = ({__count__: this }))))\n))while((((__iterator__ = 3/0).prop) = [[__parent__, __proto__, constructor]] = __proto__+=window.throw( '' )) && 0)return;");
tryItOut("/*infloop*/for(prop.__lookupSetter__(\"prop\"); eval(\"(<x><y/></x>\\n)\",  '' .isPrototypeOf([])); -3/0[prop.propertyIsEnumerable(\"__iterator__\")]) {with({__parent__: prototype}){throw  '' ; }__noSuchMethod__, __iterator__; }");
tryItOut("/*infloop*/while((*::* for each (__iterator__ in prototype))){/*infloop*/for(__iterator__ = new __count__ = <y><z/></y>((new (<y><z/></y>)(window, function::prototype)), <><x><y/></x></>); new  /x/ (1.2e3); (<x><y/></x> =  \"\" )) return *::*;/*for..in*/for(prop = [,] .. function(id) { return id } in @foo) {#1=[#1#];function::__count__; } }");
tryItOut("{/*infloop*/M:while({return; }){const __noSuchMethod__; }\n '' ;/*infloop*/while((p={}, (p.z = (window()))()))\n }");
tryItOut("with(*){const __noSuchMethod__; }");
tryItOut("with({__proto__: [3/0].sort(function(q) { return q; })}){(<><x><y/></x></>);yield\n }");
tryItOut("{export __noSuchMethod__;{} }");
tryItOut("M:with((__count__ = window))prop = [<x><y/></x> for (constructor in undefined)]");
tryItOut("export __count__; const x::constructor\nwhile((__count__ = <y><z/></y>.isPrototypeOf(__parent__.prototype setter= ({}).__lookupGetter__)) && 0)({});");
tryItOut("/*for..in*/for(let prototype in *) {throw window; }");
tryItOut("{{}yield; }");
tryItOut("/*for..in*/M:for(let __parent__ in #\f0=new *(<><x><y/></x></>)) {if(eval(\"gc()\", [[1] if \f(this)])) var constructor;if(this.zzz.zzz) { if (@foo << *::*) {let __iterator__ = window; } else {yield; }} }");
tryItOut("/*infloop*/do export *; while(constructor: [z1]);");
tryItOut("__proto__");
tryItOut("/*infloop*/do {null; } while(prop);");
tryItOut("/*for..in*/for(var __parent__ = <x><y/></x> in <><x><y/></x></>) {throw  /x/ ;throw *; }");
tryItOut("L:if((constructor = <x><y/></x> for (prop in undefined.__defineGetter__(\"prototype\", false)) for (\fprototype.constructor in (-0)) for each (__proto__ in  '' ) if (undefined)).watch) { if (((uneval(false))).__proto__) function (__noSuchMethod__, __iterator__) { yield (let (constructor) true) } } else {yield; }");
tryItOut("if(((Math.pow)() - (false == 1e81))) ; else /*infloop*/M:for(let constructor/*; this; <y><z/></y>/*) {continue ;export __proto__; }");
tryItOut("this.zzz.zzz;");
tryItOut("if( /x/ ) let function::__iterator__ = function ([y]) { }, prototype; else  if (<><x><y/></x></>) {let __noSuchMethod__ = *::*, function::prop;yield constructor; }");
tryItOut("yield #3={a:#3#};");
tryItOut("if((<{getter}></{getter}>.(([15,16,17,18].map(<x/>, <x><y/></x>))))) L:with(constructor.__noSuchMethod__ =  \"\" )yield -3/0;");
tryItOut("L:if(false) {const constructor = undefined, constructor;yield; } else  if (__parent__ = <x/>) {(@foo); } else yield <><x><y/></x></>; const __parent__;");
tryItOut("/*for..in*/for(let __parent__ in <y><z/></y>) {return <x><y/></x>;<x/>; }\n");
tryItOut("L: {gc\nexport *;switch((<x><y/></x> .. this)) { case 2: ('haha'.split).applybreak;  } }\n");
tryItOut("yield; const constructor;");
tryItOut("/*for..in*/for(var prop = (__proto__ = ({a2:z2}) .@*:: <><x><y/></x></>) in <y><z/></y>) {return window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in (new arguments().watch(\"prop\", *::*.yoyo(<><x><y/></x></>)))) if([]) {0;throw undefined; } else ( /x/ );");
tryItOut("__iterator__ = <x><y/></x>");
tryItOut("/*for..in*/for(const prototype = prop = window in yield #1=[#1#]) /*infloop*/while(*::*)(this);");
tryItOut("if((3.eval((-0)).watch(\"constructor\", prototype))) { if (return ({ prop: [], __count__: constructor }) = constructor) {const __iterator__ = window;/*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__ in <><x><y/></x></>) {var __proto__, prototype;continue L; } } else /*infloop*/for(<><x><y/></x></>; export *; (prop in this)) {return; }}");
tryItOut("var __noSuchMethod__, __count__ = undefined;");
tryItOut("return true;");
tryItOut("catch(prop if (yield -3/0 -= new ((1 for (x in [])))(<><x><y/></x></>))) { let(__count__ =  ''  !== <><x><y/></x></>) { let(prototype, __proto__ = <x/>) { break ; } catch(constructor) { for(let y in [5,6,7,8]) with({}) { function  __count__ (prototype, __noSuchMethod__) { yield window }  }  } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<y><z/></y>['__noSuchMethod__'] in <y><z/></y>) {return @foo; }");
tryItOut("{/*infloop*/for(let ({ __noSuchMethod__: x::prototype }) = eval(\"<x><y/></x>\", this); yield <x/>; constructor =  /x/ ) {(<y><z/></y>);return <x><y/></x>; }if(<x><y/></x>.throw(null)) {var __iterator__ = <x><y/></x>;<><x><y/></x></>; } else  if (yield [,]) {prop; } }");
tryItOut("/*for..in*/for(let [__count__, constructor] = new (Math.pow).apply() in <><x><y/></x></>) {export constructor; }");
tryItOut("with(<><bbb xmlns:ccc=\"0.1\"><ccc:eee></ccc:eee></bbb></> ? * - __parent__.watch(\"__proto__\", *) : (~[z1,,]))return <><x><y/></x></>;");
tryItOut("/*infloop*/for(new (1.3)(<x/>, *) .. [11,12,13,14].map.\rhasOwnProperty(\"constructor\"); (__parent__-=__iterator__ = (__noSuchMethod__.__parent__ = undefined)); ([1,,] ? <y><z/></y> : #1#)) switch(eval(\"/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in prototype) {var __iterator__; }\", #3={a:#3#} |= *)) { default: ;L:switch(<x/>) { default: break; case function ([y]) { } , -0: {} } }");
tryItOut("if(*) {if((<><x><y/></x></>\n)) { if (yield <><x><y/></x></>) {export __count__; } else var __noSuchMethod__ = null;} }");
tryItOut("/*infloop*/do Math.sin while((__iterator__ > <><x><y/></x></>) .@x:: true);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(var ({ __parent__: ({ prototype: ({ __noSuchMethod__: ({ ({ prototype: ({ __proto__: prototype }), __proto__: [__proto__, prop, ] }): prop }), prop: ({ __iterator__: [__noSuchMethod__, [], , ], __noSuchMethod__: __parent__ }) }) }) }) = [constructor]; this.__defineSetter__(\"__noSuchMethod__\", (function(q) { return q; }).call);  /x/ ()) gc()");
tryItOut("/*for..in*/for(const  /* Comment */window['prototype'] in (prototype.isPrototypeOf(undefined))) {return <x><y/></x>;(@foo); }");
tryItOut("gc()\n");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in ~<x><y/></x>) {} }");
tryItOut("/*infloop*/for(const prototype;  /x/g ; (false)(<x/>) = ( /* Comment */(-0)).__defineSetter__(\"prop\", /a/gi)) {M:if(#1=[#1#]) var __count__ = ({}), prototype; }");
tryItOut("/*infloop*/do {L: {gc()throw -3/0; }gc() } while(this.__defineSetter__(\"x::constructor\", new Function).__lookupSetter__(\"__proto__\"));");
tryItOut("if((__iterator__.((++*::*)))) { if (__proto__) /*infloop*/for(const prop = (new ('haha'.split)(<x/>)) @ (delete prototype); <><zzz>1.3</zzz></>.eval((--__parent__ = <y><z/></y>)); yyy.(__noSuchMethod__)) yield 0/0\t;\nvar prototype, __parent__;\n else var __iterator__ = this, __count__ = arguments;}");
tryItOut("/*infloop*/M:do {let prototype;__iterator__; } while(<><x><y/></x></>);");
tryItOut("/*infloop*/for(let __parent__; ( \"\" .@foo) >= eval(\"<><x><y/></x></>;\", (<><x><y/></x></> & <x><y/></x>)).propertyIsEnumerable(\"({ constructor: ({ __iterator__: __noSuchMethod__ }), __iterator__: function::__proto__ })\"); \n<{constructor}><!--yy--></{constructor}><x><y/></x> = #3={a:#3#}) ");
tryItOut("return;");
tryItOut("/*infloop*/for(const __noSuchMethod__; (gc(this)); constructor , -0) (true);");
tryItOut("with(((-0).yoyo([z1,,]))){return __count__;export *; }");
tryItOut("<ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd>\n{}");
tryItOut("/*infloop*/M:do {@foo\n } while(++({constructor getter: (*).apply,  get __parent__ __iterator__ ()*::* }) || <xxx>{get}</xxx>);");
tryItOut("with(3/0){yield prototype; }");
tryItOut("with(new Function((window.watch(\"yield ( '' .__lookupSetter__(\\\"__proto__\\\"));\", <x><y/></x>)), __parent__ = <><x><y/></x></>))let function::__parent__ = (<><x><y/></x></>), prototype = <><x><y/></x></>;");
tryItOut("let(constructor, __iterator__ = prop) { \fvar __iterator__ = this, prop = <><x><y/></x></>;");
tryItOut("return [null for (null.__proto__ in +null)\f];");
tryItOut("/*infloop*/while(<y><z/></y>){*throw -3/0; }");
tryItOut("/*for..in*/M:for(const (<><x><y/></x></>)(-0) in (({__noSuchMethod__: (new (@foo)(__noSuchMethod__)).throw((uneval(<><x><y/></x></>)))}))) let prop, __parent__;yield  '' ;");
tryItOut("M:do if('fafafa'.replace(/a/g, (new Function(\"(*::*);\")))) {__count__const  { yield @foo } , constructor = ({a2:z2}); } else throw <x><y/></x>; while(((<><x><y/></x></> for each (prototype in *::*)) == __iterator__ = [[1]]) && 0);");
tryItOut("M:with({__count__:  \"\" })/*for..in*/for(__proto__ = __proto__ = __proto__ in [z1,,]) var case 1: case undefined: break; default: let __iterator__ =  \"\" ;break; case 6: break;  = __noSuchMethod__, prototype;");
tryItOut("/*for..in*/for(var [prototype, __iterator__] = new ( \"\" )() in *::*) {{} }");
tryItOut("with({}) with({}) let(constructor = -0 ? [,,] :  /x/ ) { try { gc() } finally { yield; } ");
tryItOut("with({__iterator__: (*::* < this)}){(1 for (x in []))return; }");
tryItOut("function(q) { return q; }");
tryItOut("{/*for..in*/L:for(__parent__ in 033) (<x><y/></x>).apply }\ndo {({}).__lookupGetter__{const prototype = <><x><y/></x></>, __count__;;gc() } } while((this.__defineGetter__(\"__noSuchMethod__\", __proto__)) && 0);\n");
tryItOut("/*infloop*/do export *; while(1e-81);");
tryItOut("/*for..in*/for(var prop = __parent__ >>> <x><y/></x> in false) {yield false; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop('fafafa'.replace(/a/g, [1,2,3,4].slice)) in this) return  /x/g \ncontinue ;");
tryItOut("with(constructor & true){yield this;/*\n*/L:if(prop) throw null; else {yield; } }");
tryItOut("do constructor; while(([z1,,](<>, window)) && 0);");
tryItOut("/*for..in*/L:for(const __proto__ in (([({prop setter: Math.sin })])(__parent__)))");
tryItOut("/*for..in*/for(var prototype in <>yyy</>.(false['constructor'])) try { break L; } catch(__proto__) { return <><x><y/></x></>; } ");
tryItOut("( /x/ );");
tryItOut("this.zzz.zzz;");
tryItOut("if(033.valueOf(\"number\")) {/*for..in*/for(const constructor in ((Math.pow)(constructor)))gc()__parent__, __parent__ = 0; } else  if ((yield [[]])) continue L; else undefined");
tryItOut("({ __parent__: ({ constructor: [, prop, [/*\n*/, ]], __noSuchMethod__: __count__ }), prop: [({ __iterator__: ({ __count__: constructor }) }), , ({ constructor: ({ __count__: __count__ }), __noSuchMethod__: [__iterator__] }), ({ constructor: [, , ({ __parent__: ({ __iterator__: [__proto__, ], constructor: __iterator__ }), __noSuchMethod__: ({ __parent__: __proto__ }) }), ({ __count__: prop }), ({ (<x><y/></x>.hasOwnProperty(\"prop\")).constructor = constructor = <x/>.valueOf(\"number\"): __parent__ })]), ] })");
tryItOut(" /x/ ; const prototype;");
tryItOut("/*infloop*/L:for(__proto__; __proto__(undefined).__lookupSetter__(\"constructor\"); (yield  '' )) let (__proto__, constructor = /a/gi) { export *; }");
tryItOut("([[]])\n");
tryItOut("/*infloop*/while((<x><y/></x>.@foo != (((uneval(this))).watch(\"prop\", function(y) { yield y; ( /x/g );; yield y; }))))return __iterator__;");
tryItOut("with({__count__: ((uneval(1e-81)))\n.__proto__ = [11,12,13,14].some})(-3/0);");
tryItOut("with({}) for(let y in []);");
tryItOut("/*infloop*/M:while([this]){}");
tryItOut("__count__ = __count__;");
tryItOut("/*for..in*/M:for(\rconst prototype in <y><z/></y>) (true);");
tryItOut("{throw prop;/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in *::*) {break ; } }");
tryItOut("let(prop = (), __iterator__ = (<x><y/></x>.watch(\"constructor\", (eval).call))) ((function(){for(let y in [5,6,7,8]) throw StopIteration;})());");
tryItOut("/*infloop*/L:do yield <y><z/></y>\n while(<x><y/></x>.__parent__ &= (({__noSuchMethod__:  \"\" , prop setter: function  __noSuchMethod__ (prop, [1,,]) { yield [,,z1] }  }) .@*:: __proto__ = <x><y/></x>));");
tryItOut("/*for..in*/for(__count__ in (-0)) export prototype;");
tryItOut("/*infloop*/__parent__");
tryItOut("/*infloop*/M:for(var ({ __noSuchMethod__: __iterator__ }) = (let (__noSuchMethod__ = <x><y/></x>.valueOf(\"number\")) <><x><y/></x></>); yield (p={}, (p.z = prop)()); ((eval(\"yield #1#;\", if(null @ true) throw -1; else {return <x><y/></x>; })).yoyo(@foo))) {/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in constructor) {{} }with((undefined && *::*)){prototype;yield; } }");
tryItOut("let (__proto__ = <y><z/></y>) { /*for..in*/for(const [__noSuchMethod__, constructor] = <x><y/></x> in @foo) export *; }");
tryItOut("__count__");
tryItOut("if([0x99].sort(<x><y/></x>)) { if (prototype.__lookupGetter__(\"__noSuchMethod__\")) yield <><\tx><y/></x></>; else {Math.sin }}");
tryItOut("L: {([[1]]);return undefined; }");
tryItOut("L:if(true) if(this) {gc() } else  if ((-1)) {return true;this; } else  if ((({ __parent__: constructor }) = (new (function  getter (__parent__, prototype) { yield  /x/g  } )( \"\" )))) {{}continue ; } else let __proto__ = __count__, __iterator__ = <y><z/></y>;");
tryItOut("/*for..in*/for(const __count__(__parent__) in (((new Function(\"\")))(@foo.throw(this))))const __noSuchMethod__ = <x><y/></x>;");
tryItOut("for(let y in [5,6,7,8]) let(({ __parent__: ({ constructor: __noSuchMethod__ }), __iterator__: __parent__ }) = constructor = undefined <= 3/0 ? this : arguments) { ({ __parent__: __parent__, prototype: prop }) = __noSuchMethod__;");
tryItOut("L:if(@foo < <x><y/></x>.@*) { if ((function(id) { return id }()) ? yield prototype : ) {; }} else {let (try { let prototype = false, __noSuchMethod__; } catch(__noSuchMethod__) { return (__iterator__.(@foo)); } ) { yield <y><z/></y>; } }");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = undefined in prototype) {const constructor = <x><y/\f></x>, prototype;yield  ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (({}).__lookupGetter__).call(this, ) in (0)()) yield;");
tryItOut("/*infloop*/do constructor while((eval(0.1, <x/>) if (window))++);");
tryItOut("/*infloop*/L:while(<x/>)M:switch((<><x><y/></x></>.function::function::prop)) { case __iterator__: break;  }");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] = setter in function(id) { return id } !=  /x/ ) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in ({ constructor: __count__, __count__: prop }) = [__proto__, ]) {L: let constructor; }");
tryItOut("/*infloop*/L:for(const __count__ = __count__.__defineGetter__(\"prototype\", prototype); (p={}, (p.z = __parent__ = undefined)()); true) (<x/>).call");
tryItOut("/*for..in*/for(let __parent__ = (<y><z/></y>.constructor) in this) /*infloop*/for(let prop; <><x><y/></x></>; (yield)) ");
tryItOut("while(((*\n)) && 0){var __parent__; }");
tryItOut("L:do {return yield prop = <><x><y/></x></>;/*for..in*/M:for(const <><x><y/></x></> in <x><y/></x>) (new Function(\"gc()\")) } while(((<y><z/></y> < <x><y/\t></x>)([,,z1]) = [] = (([11,12,13,14].sort).__count__ = <x><y/></x>\n ? __count__ : false)) && 0);");
tryItOut("L: (<x><y/></x>.propertyIsEnumerable(\"constructor\"));");
tryItOut("if( \"\" .eval(*)) break L; else  if (<>yyy</>) {export *; }return <x><y/></x>;");
tryItOut("do {yield this; } while(([false].sort((1 for (x in [])))) && 0);");
tryItOut("/*infloop*/for(({ __parent__: __iterator__, __proto__: __proto__ }) = *.watch(\"__count__\", function () { yield -3/0 } ); [__count__ for (__proto__ in  /x/ )]; ({a2:z2}) ^ false) /*infloop*/for(__parent__ = <y><z/></y>; undefined; <><x><y/></x></>) <y><z/></y>;");
tryItOut("while((<><xxx>{__parent__}</xxx></>) && 0)L: {({}).hasOwnProperty }");
tryItOut("let(prop) ((function(){this.zzz.zzz;})());");
tryItOut("(<><x><y/></x></>)");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", function (__parent__, __count__) { yield (function (constructor)prop = <y><z/></y>)() .@*:: (__proto__-=window) } ))) /*infloop*/L:do {gc()break L; } while(1e+81\n);");
