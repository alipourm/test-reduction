tryItOut("if(<x/>) { if ( /x/ ) {yield;gc() }} else return\n");
tryItOut("\nlet __count__ = window, __parent__;");
tryItOut("throw undefined;\nyield;\n");
tryItOut("if(void __iterator__ = @foo) { if ((prototype = [] ?  : (-0) >>= <><x><y/></x></>)) return -1;} else /*infloop*/for(let __proto__; <x><y/></x>; __noSuchMethod__) gc()");
tryItOut("gc()");
tryItOut("/*infloop*/for(let __count__; (((yield  /x/g ).hasOwnProperty(\"__proto__\")) >>> (yield null)); ([z1,,] <= window--)) {gc() }");
tryItOut("let ([, , ] = (new [,] .@ this((function(id) { return id }.__parent__ = __proto__ = <><x><y/></x></>.unwatch(\"__count__\"))))) {  }\n\nconst export *;, __parent__;");
tryItOut("/*infloop*/for(({ constructor: ({ constructor: __iterator__ }) }) = [1,2,3,4].slice; @foo >>> (__count__ = <x><y/></x>); false) M:with(<x><y/></x>)break ;");
tryItOut("gc() const __parent__;");
tryItOut("L: {return <x><y/></x>; }");
tryItOut("/*for..in*/L:for(const [__parent__, __iterator__] = constructor =  /x/g () in __parent__ = *::*.__iterator__ setter= function (__parent__, __proto__) { gc() } ) /*infloop*/do return this; while([1,2,3,4].slice);");
tryItOut("if(__proto__.constructor = (eval(\"this\", prototype))) { if (*::*.watch(\"__parent__\", function  __count__ () { return <><x><y/></x\t></> } )) {/*for..in*//* nogeckoex bug 349964 */M: for  each(prototype in <x><y/></x>) {continue ;; } } else return 1e4;}");
tryItOut("/*for..in*/for(const __noSuchMethod__ = [[]]['prop'] in ((function (({ __noSuchMethod__: function::__proto__ }), (prototype)) { yield ({__parent__ getter: function (__parent__) { gc() }  }) } )((__parent__)[]))){const __iterator__ =  \"\" , __parent__; }");
tryItOut("for(let y in []);");
tryItOut("let (function(id) { return id }, __count__ = 0) { yield  /x/ ; }\nwith({__noSuchMethod__: ((new Function)(1e+81) + function(q) { return q; })}){ for each (__parent__ in window) if ( '' ) }");
tryItOut("let (__parent__ = __proto__.prototype = (eval(\"this\", (#3={a:#3#}.__defineGetter__(\"__iterator__\", #1=[#1#]))))) { L: \t; }");
tryItOut("__iterator__");
tryItOut("if(yield ({a2:z2})) {/*for..in*/M:for(constructor in <x/>) {/*for..in*/for(constructor in undefined)  }L:if([String(<x><y/></x>)].sort([1,2,3,4].map)) throw <y><z/></y>; } else  if (new (new Function(\"continue \\n\"))(undefined, (__count__ = 0x99))) {M:if(*::* ^  \"\" \n) let prototype, __noSuchMethod__; else let (prototype) { let __noSuchMethod__; }__count__; } else throw <x><y/></x>;");
tryItOut("/*infloop*/for(<x/>.*; window; new this\n(let (prototype) <x><y/></x>)) (__noSuchMethod__.__proto__);\nwith(new function  __parent__ () { throw *::*; } (([,,z1] for (__iterator__ in <><x><y/></x></>))))return;\n");
tryItOut("/*for..in*/for(var [__iterator__, __parent__] = eval(\"__parent__ = window\", ([z1] < <x/>)) in __parent__) {; }");
tryItOut("M:while(((<x><y/></x>.*)) && 0){;let prop =  \"\" , __noSuchMethod__; } const constructor;");
tryItOut("/*infloop*/M:for('fafafa'.replace(/a/g, *); undefined; <y><z/></y> ?  /x/  : <x/>\n) {yield <x/>;__parent__ }");
tryItOut("/*infloop*/for(let __parent__; <x><y/></x>; function(id) { return id }) gc()");
tryItOut("with({__noSuchMethod__: (prototype) = new Date(@foo)}){/*infloop*/L:for(window; *; null) function::prototype, __noSuchMethod__ = prototype; }");
tryItOut("{with(arguments for each (__parent__ in true))/*infloop*/do return; while(<x/>);if((<x/>)().prop = [11,12,13,14].sort) { if (({ set __parent__ __noSuchMethod__ (\f)\f { return ([11,12,13,14].map) } , prop: *.throw(4.) })) {{} }} else  }");
tryItOut("switch((((Math.sin).call).call(<bbb xmlns=\"<><x><y/></x></> instanceof ({a2:z2})\"><ccc:ddd><!--yy--></ccc:ddd></bbb>.((({constructor getter: (function  __proto__ ()(-0)).apply, prop getter: Math.sin }).isPrototypeOf(([11,12,13,14].some)))), ({prop setter: ({}).hasOwnProperty }) ^ <y><z/></y>))) { case delete --<><x><y/></x></>: default: break;  }");
tryItOut("/*for..in*/for(__parent__ in ((gc)(__count__ = __proto__))){yield <x/>;<x><y/></x>; }");
tryItOut("/*infloop*/L:do ; while(0.1);");
tryItOut("if(true.hasOwnProperty(\"function::prototype\")) //h\n{/*for..in*/for(prototype = true in  if (__noSuchMethod__)) { } } else  if (__iterator__ = false) {'haha'.split1.3; }");
tryItOut("/*infloop*/L:do return; while(((p={}, (p.z = false)())).__proto__ = [<y><z/></y>] >>> function::__noSuchMethod__);");
tryItOut("with(false | window)continue L;");
tryItOut("switch(false) { case 6: /*for..in*/M:for(var __iterator__ in <y><z/></y>) {var __parent__;export __parent__; }break; default: const __iterator__ = <x/>, constructor = #3={a:#3#};break;  }");
tryItOut("try { __count__ = __count__\t; } catch(constructor) { throw StopIteration; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <><x><y/></x></>.eval(function(id) { return id })) {true }");
tryItOut("/*for..in*/for([constructor, __count__] = \n({/*infloop*/for(const ({ __parent__: __count__ }) = <x><y/></x>.__parent__; (<x><y/></x> ? false : @foo);  /x/ ) ; } += -0) in ((p={}, (p.z = constructor: this)()))) export __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in this) with({__noSuchMethod__:  /x/ }){[z1]; } const prop;");
tryItOut("if(this.__defineSetter__(\"__proto__\", function  __noSuchMethod__ (prototype, ) { yield * } )) yield 3; else  if ((prototype) ^ [({ __proto__: prop }), , , ] = (({ __parent__: __count__ }) = (eval(\"__count__, __iterator__;\", #3={a:#3#})))) {{if(window) {let __iterator__;; } else  if (<x><y/></x>) @foo } } else /*for..in*/L:for(const <><x><y/></x></> in  /x/g ) {}");
tryItOut("if((<x/> >>>=window).eval()) Function else  if ((constructor = this)) {}\nwhile(( /* Comment */ /x/g ) && 0)\n const __parent__\f;");
tryItOut("case  \"\" : ");
tryItOut("for(let y in []);");
tryItOut("M:with(({constructor: <x><y/></x>})){export __count__; }");
tryItOut("L:with({__iterator__: window}){return 4.;yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var __proto__(({__parent__: constructor, __count__: ( /x/ .__defineSetter__(\"__noSuchMethod__\", (__noSuchMethod__).apply)) })) in ((({}).hasOwnProperty)(<><xxx>{false}</xxx></>)))const __noSuchMethod__ = <y><z/></y>, __parent__ = false;");
tryItOut("M:with({__count__: *::*}){function  prop (prototype) { return  /x/g  }  }");
tryItOut("__proto__: <x/>");
tryItOut("let (delete = [1], [,,]) { continue ; }");
tryItOut("yield {}; const __count__;");
tryItOut("for(let y in []);");
tryItOut("switch(<y><z/></y>) { default: throw <><x><y/></x></>;break; yield;case 8: break; case  /x/ : ;break;  } const constructor;");
tryItOut("with((<employee id=\"1\"><name>Joe</name><age>20</age></employee> === (function ([y]) { })()))function  __iterator__ (__proto__)<><x><y/></x></>");
tryItOut("let (prop = true.propertyIsEnumerable(\"__parent__\"), prop) { ; }gc()");
tryItOut("/*infloop*/L:do {yield <y><z/></y>;yield null; } while(__noSuchMethod__)\nlet __iterator__\n");
tryItOut("/*for..in*/for(let [setter, __parent__] = prototype = __iterator__ = <><x><y/></x></> in *::*) return;");
tryItOut("with({constructor: __iterator__ = <x><y/></x>}){function(q) { return q; } }");
tryItOut("with({}) { __count__ = prototype; } ");
tryItOut("{const __count__ = [], prototype =  /x/g ; }\nbreak ;\n");
tryItOut("/*for..in*/for(var @foo.prop in [(__parent__ = 4. ? (new Math.sin(*::*, 3/0)) : <x><y/></x>)].some(gc)) switch(<x><y/></x>.__defineGetter__(\"prototype\", gc)) { case (__proto__-=__noSuchMethod__).unwatch(\"this\"): var __count__, __noSuchMethod__;/*\n*/\nconst function::__count__, prototype;\nbreak; default: (new Function(\"return;\")) const __noSuchMethod__;break;  }");
tryItOut("L: continue ;");
tryItOut("{if( /x/g ) (prop);switch(__parent__) { default: case __count__.(*::*).(\"number\"): break L;break; yield;\t } }");
tryItOut("for(let y in []);");
tryItOut("M:if(__proto__) {continue ; } else  if (function ([y]) { }) {gc()continue ; }");
tryItOut("throw __iterator__;");
tryItOut("prototype = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in (([])[*])) return [1];");
tryItOut("yield @foo;");
tryItOut("export __parent__;");
tryItOut("M:with({(function(q) { return q; }).apply: (p={}, (p.z = 0.1)())}){prop = @foo, __parent__ = <x><y/></x>;eval }");
tryItOut("/*infloop*/M:for(let prop; [<><x><\ty/></x></>].some(false); @foo) export __noSuchMethod__;");
tryItOut("if(this.zzz.zzz) {prop, __count__ = 5.0000000000000000000000;gc() } else  if ((__parent__.valueOf(\"number\"))) ");
tryItOut("__count__ = constructor;");
tryItOut("/*infloop*/for(var __iterator__ = (<x><y/></x> ? <y><z/></y> : <x><y/></x> ^= (this .@ null)); (((this.zzz.zzz).watch)()); __parent__ = this.__defineGetter__(\"__iterator__\", [1,2,3,4].map)) throw (<x><y/></x> + __proto__) .@ <x/>\n;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in this) throw true;");
tryItOut("with([(\f{prototype: __proto__})])break ;");
tryItOut("/*for..in*/for(const __iterator__ in prototype) /*for..in*/L:for([__count__, prototype] = 0x99([,,z1]) in <y><z/></y>) continue M;");
tryItOut("/*for..in*/M:for(var [constructor, prop] = <><><!--yy--></></> + prototype = <x/> in constructor) export *");
tryItOut("/*for..in*/for(let __parent__ in ((({}).__lookupGetter__)(void <x><y/></x> ? yield <x><y\r/></x> : prototype = (-0)))){this\n{} }");
tryItOut("M:if(__proto__ || false .@x:: (uneval())) gc()");
tryItOut("let (__parent__) { export *; }");
tryItOut("while(((function ([y]) { })() instanceof try { gc() } finally { function (__iterator__, __proto__) { return  \"\"  }  } ) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <><x><y/></x></>) {yield; }<x><y/></x>;\n\n }");
tryItOut("__count__ = prototype;");
tryItOut("{return window; }");
tryItOut("/*for..in*/M:for([__proto__, constructor] = #2=* in function(y) { yield y; throw __proto__;; yield y; }) export function::__noSuchMethod__;");
tryItOut("return <x/>;");
tryItOut("if(({}).hasOwnProperty(new (({function::__count__: 3, prop: <><x><y/></x></> }))((<><x><y/></x></>.hasOwnProperty(\"prop\")), <x><y/></x>), \nx::__count__)) throw <y><z/></y>; else throw function(id) { return id };");
tryItOut("/*for..in*/for(let constructor = eval(\"prototype\", window) in prop.(function(id) { return id })) {/*for..in*//* nogeckoex bug 349964 */ for  each(0/0.prop in window) {gc() } }");
tryItOut("{/*infloop*/M:for(let prototype; []; __proto__) {export *; } }");
tryItOut("let (prototype =  /x/ ) { gc() }");
tryItOut("M:with( '' ){yield undefined; }");
tryItOut("/*for..in*/M:for(let in (((1 for (x in [])))((yield (constructor = prop))))){if('haha'.split % __count__ = <x/>) {gc()return; } else  if (eval(\"<><x><y/></x></>\", [z1,,]).isPrototypeOf(new Iterator())) {[,] }throw <><x><y/></x></> >>> x::__iterator__; }");
tryItOut("gc()\nexport *;\n");
tryItOut("gc()");
tryItOut("export *; const __parent__;");
tryItOut("/*infloop*/do do /*infloop*/while(<x><y/></x>)export __parent__; while(((this.*)) && 0); while();");
tryItOut("if(this.__defineSetter__(\"__count__\", (yield <y><z/></y>))) { if (eval(\"/*infloop*/for(let __parent__; ({continue L;export *; }); [11,12,13,14].map) export *;\\nexport prop;\\n\", ([,,z1]()) ? __proto__ getter: function ()*::* : <x/>.valueOf(\"number\"))) /*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__([]) in 0x99) function ()true else throw  '' ;}");
tryItOut("for(let y in [5,6,7,8]) constructor = __count__;");
tryItOut("if((-1 <  /x/g ).__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })) {const __iterator__ = window;yield; } else  if (<><bbb xmlns:ccc=\"__parent__ = <>*::*, this</>\"><ccc:eee></ccc:eee></bbb></>) {} else return;");
tryItOut(" const yield;");
tryItOut("L:if(<x><y/></x>) { if ( '' ) {return <y><z/></y>; } else return;}");
tryItOut("{prop = window\n }");
tryItOut("E");
tryItOut("if(constructor.__lookupSetter__(\"prototype\")) {throw @foo; }");
tryItOut("M:if((yield ({__count__: window}) for (__parent__ in <x><y/></x>) for (constructor in prototype).watch(\"__count__\", Math.sin))) let constructor;\nbreak ;\n");
tryItOut("for(let y in []);");
tryItOut("let(*, __proto__) { return ( /x/  << *::*)");
tryItOut("/*infloop*/do yield; while((@foo === null));");
tryItOut("this.zzz.zzz\n");
tryItOut("while((<y><z/></y> =  /x/ ) && 0)<><x><y/></x></>;");
tryItOut("while(([(yield [1])].map(Function)) && 0)let __iterator__, constructor = __iterator__;");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("\nM:if( /x/ .valueOf(\"number\")) {continue M; }\n");
tryItOut("/*for..in*/for(({ __count__: ({ __proto__: __count__ }) }) = [z1] in *) {break M; }");
tryItOut("M:while((__parent__.__proto__) && 0){if(<><x><y/></x></> @ ({a2:z2})) { if (@foo) {export constructor;{} }} else {throw window;export prop; } }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = {} in <x><y/></x>) {gc()/*infloop*/M:for(@foo; <><x><y/></x></>; @foo) const __iterator__, constructor; }");
tryItOut("with(prop = \n[z1,,]){[1,2,3,4].map({}).__lookupGetter__ }");
tryItOut("with(( \"\"  for each (__noSuchMethod__ in 1.3)) ? (<><x><y/></x></> -= <y><z/></y>) : __parent__ && [,])(__parent__);");
tryItOut("/*for..in*/for([function::constructor, constructor] = ((<><x><y/></x></> >>=  /x/g ).@* , #2=({__count__: (<x/>.hasOwnProperty(\"__noSuchMethod__\"))})) in (eval(\"*\", 3))) {yield; }");
tryItOut("with((1 for (x in [])))");
tryItOut("return; const __proto__\n");
tryItOut("this; const __noSuchMethod__;");
tryItOut("/*infloop*/for(typeof ; 'fafafa'.replace(/a/g, [1,2,3,4].slice); ([(1e81)[3/0] for each (__iterator__ in <><x><y/></x></>)])) {/*infloop*/L:for(var ({ prop: __noSuchMethod__, prototype: constructor }) = (window)(); [15,16,17,18].some(new Function, prototype); <x><y/></x>.(<x><y\t/></x>)) {[]yield <x><y/></x>; }; }");
tryItOut("{yield; }");
tryItOut("if(this) {yield prop;__iterator__ } else  if ( /* Comment */true) {; }");
tryItOut("M:with({__count__: @foo >>= constructor}){; }");
tryItOut("/*for..in*/for(const (__parent__(\n<x><y/></x>)) in ((yield __parent__))) yield;");
tryItOut("/*infloop*/do {} while(new ( \"\" [new ([1,2,3,4].map)()])(this.eval(false)));");
tryItOut("if(<><x><y/></x></>) gc() else return null;");
tryItOut("if(<xxx {constructor}={(this.@*)} />) {/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__ in <><x><y/></x></>) throw <y><z/></y>;export *; }");
tryItOut(" '' ;");
tryItOut("do {if(*) yield window; else  if (<>\t<x><y/></x></>) <x><y/></x>; else {return; }return; } while((prototype|=function(id) { return id }) && 0);");
tryItOut("{}");
tryItOut("M:if(__iterator__) {return; } else  if (<><xxx {__proto__}={ /x/ .unwatch(\"__noSuchMethod__\")} /></>) {gc() }");
tryItOut("throw StopIteration;");
tryItOut("export *\n");
tryItOut("yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__.prop in (([, __parent__, , , prop] = (__noSuchMethod__ = 4.))--)) {/*for..in*/M:for(const constructor in prototype.__parent__.watch(\"prop\", <><x><y/></x></>)) prototype\nM:with({__count__: <><x><y/></x></>}){export *;throw __iterator__; } }");
tryItOut("yield\n const __count__;");
tryItOut("if(([3])) { if (<y><z/></y>) break L; else {; }}");
tryItOut("L: gc()");
tryItOut("export *;");
tryItOut("let (get = *::*, (<><x><y/></x></>);) { let __noSuchMethod__; }");
tryItOut("; const __count__;");
tryItOut("{throw __proto__; }");
tryItOut("let (prototype = [,]) { <x><y/></x>\n }");
tryItOut("with({__iterator__: 1e+81}){{/*for..in*/for(const __noSuchMethod__ = (((p={}, (p.z = 3)())).__count__) in  '' .constructor) {([z1]); } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __count__: prop, __count__: __proto__ }) in undefined) {L: var __iterator__; }");
tryItOut("/*infloop*/for(__noSuchMethod__ = prototype; ({}).hasOwnProperty(([15,16,17,18].map(function (__iterator__)1e81, #1#)), ( /x/ .eval(window)));  /* Comment */__proto__.constructor getter\t= 'haha'.split) const __proto__ = *::*, __parent__;");
tryItOut("let (({ prototype: ({ x::__iterator__: ( /x/g )(false) | [15,16,17,18].some(function () { return <><x><y/></x></> } , __noSuchMethod__) }) }) =  /* Comment */__count__.isPrototypeOf(<x/>), prototype) {  }");
tryItOut("/*infloop*/for(prototype; (<x><y/></x>(<x><y/></x>)); (([1,2,3,4].map)(*::*, <><x><y/></x></>))) {throw <x/>; }");
tryItOut("/*for..in*/L:for(constructor(__parent__) in @foo) {yield __count__( /x/g \t) = [15,16,17,18].filter(<x><y/></x>, ({a2:z2})).valueOf(\"number\"); }");
tryItOut("yield;\ngc()\n const __noSuchMethod__;");
tryItOut("if(1e4 & {export *;; }) {} else {([1,2,3,4].slice).applyreturn <x><y/></x>; }");
tryItOut("L: ( /x/g );");
tryItOut("/*infloop*/while((<y><z/></y>.__iterator__ = window).propertyIsEnumerable(\"prototype\")){const this, prototype;( /x/ ); }");
tryItOut("//h\nif(033) {var __proto__, __count__; } else /*for..in*/for(let __proto__ in this) {yield;; }\n");
tryItOut("M:switch(eval(\"prop;\", (__iterator__ = *))) { default: {export __count__; }case (prototype = <><x><y/></x></>): throw [,,];case window: ((-1));if( \"\" ) { if (false) { }} else {export *;export __noSuchMethod__; }break; case 3: yield \t '' ; }");
tryItOut("{L:while(([11,12,13,14].map) && 0){return <><x><y/></x></>;throw *::*; }return __count__\n-0; }");
tryItOut("let (__iterator__ = <x><y/></x> %=  '' , ({ setter.constructor: ({ __parent__: \t[({ prop: __noSuchMethod__ }), __proto__, , prop, [, , __iterator__, , constructor]] }) })) { if((undefined.unwatch(\"__noSuchMethod__\"))) { if (\f(function  __proto__ (__proto__, __count__) { yield <><x><y/></x></> } ( '' ))) {} else M:if(__count__) __parent__ else {<x><y/></x> }} }");
tryItOut("throw *::*");
tryItOut("switch(1e-81) { default: case (* == <x/>): break; case 8: break;  }");
tryItOut("return (new true(3));");
tryItOut("/*infloop*/do var __proto__; while(this.hasOwnProperty(\"__proto__\").eval(((1e+81).apply(eval(\"return;\", prop.prop)))));");
tryItOut("while((({} ?  /x/  : this)) && 0)/*for..in*/for(const __parent__ in ((function  constructor (__parent__)<><x><y/></x></>)(<y><z/></y>)))#1=[#1#]; const __count__;");
tryItOut("return;");
tryItOut("prototype = __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in (<><x><y/></x></>.__lookupSetter__(\"__proto__\"))) {export __proto__;if(<x/> &= 0/0) { if ((* <= <y><z/></y>)) {yield; } else yield;} }");
tryItOut("/*infloop*/while(((yield #1=[#1#]))){const getter;let __proto__; }");
tryItOut("throw __count__;");
tryItOut("let (({ constructor: prototype }) = eval(\"#1#\", prototype)) { if(<x><y/></x>) var __parent__, __noSuchMethod__ = __proto__; else  if (__iterator__) {*; } }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__ in <y><z/></y>) 0/0;");
tryItOut("throw StopIteration");
tryItOut("while((((yield *))) && 0){L:if(<>true</>) {} else {{} } }");
tryItOut("if(((1 for (x in [])))((function ([y]) { })())--) {with(<y><z/></y> & {}){with({__noSuchMethod__: ( \"\" .__lookupGetter__(\"constructor\"))})yield; } }");
tryItOut("M:switch(__count__) { default: return; }");
tryItOut("\n");
tryItOut("M:if( /x/g ) { if (/*for..in*/for(prototype in *) {with(<><x><y/></x></>){} }) switch([1,2,3,4].slice(<x/>,  \"\" )) { case ( /* Comment */this) ? (#1#).watch : @foo.@*: /*infloop*/for(@foo; __noSuchMethod__; #3={a:#3#}) prop: *break; break; case ({ set constructor(__proto__, __proto__) { return const constructor, (function ([y]) { })();; }  }).__lookupSetter__(\"__noSuchMethod__\"): break;  } else if(-1) return window; else  if (((new Function)())) {} else (window);}");
tryItOut("if(this.__defineGetter__(\"prop\", Math.pow)) { if (new ( /x/g )()) export *; else switch(<y><z/></y>) { default:  }} const __iterator__;");
tryItOut("L:with(1.2e3)yield  /x/g ;");
tryItOut("{const __count__;var __parent__, __parent__ = <x/>; }");
tryItOut("{/*infloop*/L:for([({ __iterator__: __iterator__, __noSuchMethod__: ({ prototype: ({ prototype: __proto__ }) }) })] = 5.0000000000000000000000; this.zzz.zzz; __noSuchMethod__: (this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in []))))) /*infloop*/for(var __noSuchMethod__; function::__parent__(4.) = (__parent__ = <y><z/></y>); <x><y/></x> >> constructor << undefined /= <x/>) {{} }if([1]) <><x><y/></x></>; }");
tryItOut("{L:with({__proto__: <x><y/></x> .@ 0x99})export function::__count__; }");
tryItOut("/*for..in*/for(let __proto__ in 4.) {yield; }");
tryItOut("let([]) { return;");
tryItOut("/*infloop*/for(let __count__; (new [z1,,]); (window.watch(\"__parent__\", eval).watch(\"__parent__\", function  __parent__ ([]) { return ({a2:z2}) ===  ''  } ))) *::*;");
tryItOut("{L: L: const __count__, __proto__; }");
tryItOut("L:if(this.zzz.zzz) { if ((__parent__ if (0.1))) {eval } else {undefined;yield; }}");
tryItOut("{/*for..in*/for(let __parent__ in (([11,12,13,14].sort = ([[]] for (__noSuchMethod__ in prop))[((-0) &= <><x><y/></x></>)])(__iterator__.(null)(<x/> .. undefined for each (__parent__ in this)))))with(__count__){yield ({});{} } }");
tryItOut("while((()) && 0){}");
tryItOut("let([], [, ] = [15,16,17,18].some(function (prop, __noSuchMethod__) { ; } , null)) { throw StopIteration;");
tryItOut("export __proto__;");
tryItOut("/*for..in*/for(const [prototype, constructor]\t = __parent__ = ( \"\" .__lookupSetter__(\"__count__\")) in *::*) {yield <x><y/></x>; }");
tryItOut("M:if(new __proto__.__iterator__(([11,12,13,14].some))) {return;throw  /x/ ; }");
tryItOut("{/*infloop*/while(window)yield <x/>;; }");
tryItOut("if( /x/g ) { if ( /x/g ) ; else {\flet prototype, prototype = 0.1;var prop = __iterator__; }}");
tryItOut("with({__parent__: prototype}){function  __parent__ () { return arguments } return; }");
tryItOut("export __noSuchMethod__;\nreturn;\n");
tryItOut("if(*) { if ((({prototype: (+[,]).hasOwnProperty(\"__parent__\"), prop: constructor|=0 }))) {L: return *;gc() }} else {/*infloop*/for(let __iterator__; <x><y/></x>; <x/>) gc() }");
tryItOut("let prop = <><x><y/></x></>, __parent__ = 1e-81;\nswitch(__iterator__.propertyIsEnumerable(\"prototype\")) { default:  }\n");
tryItOut("L:do do {L: {const constructor; }break M; } while(((new  /x/ ([z1,,])) >> [( /* Comment */this)].sort(/a/gi)) && 0); while((Function('fafafa'.replace(/a/g, [1,2,3,4].map))) && 0);");
tryItOut("/*for..in*/for(let [__count__, __count__] = (__proto__ = @foo) in <x><y/></x>) yield null;");
tryItOut("if(prop) export *; else  if (*::*) export *;");
