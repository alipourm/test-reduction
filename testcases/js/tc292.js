tryItOut("if() { if (new Exception())  else {yield 1.2e3; }}");
tryItOut("with({})  for (__noSuchMethod__ in <><x><y/></x></>)catch(__parent__ if *::* > null) { yield /*for..in*/for(var __parent__ in function ([y]) { }) {return *; }catch(prototype if <y><z/></y>) {  } ; } finally { <y><z/></y>.yield = __proto__; } ");
tryItOut("{(null); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor.constructor in <><x><y/></x></>) {throw (function ([y]) { })(); }");
tryItOut("/*for..in*/L:for(var (<><x><y/></x></>)([,,z1]) in ((Function)(5.0000000000000000000000)))gc()");
tryItOut("export *;1.2e3");
tryItOut("return;");
tryItOut("{return;gc() }");
tryItOut("function(q) { return q; }with(__iterator__)var __parent__ = __parent__;");
tryItOut(";\n(null);\n");
tryItOut("/*for..in*/for(prop = false in ( /x/  % prototype)) return;");
tryItOut("<y><z/></y>");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("if(window\n) <y><z/></y> ? null : this;");
tryItOut("var prop; const prototype;");
tryItOut("with(window--)let __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in window) {{}(__noSuchMethod__); }");
tryItOut("let __proto__ = window, constructor = window;");
tryItOut("let (__count__) { let(prototype = @foo) ((function(){({}).__lookupGetter__})()); }");
tryItOut("/*infloop*/for(const __count__; new Object((-0), <y><z/></y>); new (function (\t)*)(__parent__ = <y><z/></y>,  \"\" )) M:if( /x/g .__parent__) {return <><x><y/></x></>;var __parent__ = window, __proto__ = this; } else {{} }");
tryItOut("/*infloop*/while([1,2,3,4].map >= (prop | this)){export *; }");
tryItOut("/a/gi");
tryItOut("with({prototype: <xxx {x::prop}={([<y><z/></y>].sort(function(y) { yield y; ; yield y; }))} />.('fafafa'.replace(/a/g, function  __count__ () { return __noSuchMethod__ } ))})throw this;");
tryItOut("let (constructor) { /*for..in*/for(const prototype in ((function(q) { return q; })( /x/ )))let constructor = <x><y/></x>; }");
tryItOut("if(new (prototype)()) { if (* @ /*\n*/3.141592653589793.__lookupSetter__(\"__parent__\")) {break ; } else yield;}");
tryItOut("undefined");
tryItOut("{/*infloop*/for(__proto__; prop = (<x><y/></x> >>>=null ? constructor : <><x><y/></x></>); (Boolean(this, -1))) if((<x><y/></x>[<x><y/></x>])) (@foo); else  if (#1# <<= [1,,]) function (__count__) { return [] }  else export __proto__;return <x><y/></x>.(<y><z/></y>); }");
tryItOut("/*infloop*/M:do /*infloop*/while(<x><y/></x>){const __noSuchMethod__, __noSuchMethod__ = undefined; } while(( /x/g )());");
tryItOut("/*for..in*/M:for(const prop in (((#2= \"\"  for (({ prototype: /*\n*/[__proto__, function::__iterator__] }) in this) if (*)))(<!--yy-->)))with({prototype: ({__iterator__ setter: eval, __noSuchMethod__ getter: <x><y/></x> }) .@x:: (eval(\"[ '' ]\",  /x/ .prototype))})export __noSuchMethod__;");
tryItOut("switch(1e+81) { case yield ((yield undefined)): if((this.__defineSetter__(\"__count__\", (({}).hasOwnProperty).apply))) { if (<x><y/></x>.(1e81) <= __count__ , 4.) {__noSuchMethod__;{yield *::*; } } else {(function(id) { return id }); }\f}case 1: default: if(window.__lookupGetter__(\"__noSuchMethod__\")) let __parent__; else  if (this.throw( '' )) {throw ({a1:1});(({})); }break; break; case (<x><y/></x> for each (prop in prototype)): const constructor, __iterator__;case 5: throw __iterator__;case 9: if(eval(\"var constructor;\", <x><y/></x>)) { if (__noSuchMethod__ = (/a/gi).apply) {function(y) { yield y; #1#;; yield y; } }} else {yield <x><y/></x>;{}/* } }");
tryItOut("/*for..in*/for(let __proto__ = yield function(id) { return id } in prototype = <x><y/></x> - constructor.(__iterator__))  /x/g ");
tryItOut("{M:do {yield;return <><x><y/></x></>; } while((<x><y/\f></x>) && 0); }");
tryItOut("break ;\n;\n");
tryItOut("/*infloop*/for(const [({ __noSuchMethod__: ({ prop: ({ constructor: ({ prop: __proto__ }), __proto__: [, __parent__, , __count__] }), prop: ({ prototype: ({ __parent__: prop }), prototype: ({ __count__: __iterator__, __noSuchMethod__: constructor }) }) }), prototype: ({ constructor: [, ({ prop: __noSuchMethod__ }), , , ] }) })] = prop = <xxx {constructor}={this} />;  ''  % arguments; <><x><y/></x></>.valueOf(\"number\")) yield;");
tryItOut("let __iterator__;");
tryItOut("(<x><y/></x>);");
tryItOut("break ;");
tryItOut("/*infloop*/while(({__iterator__: prop.__count__ = [(function ([y]) { })() for each (prototype in <><x><y/></x></>)]})){/*for..in*/for(var delete.prototype in  \"\" ) export *;{if(<x/>) export __proto__; else  if (1e81) constructor = <y><z/></y>; } }");
tryItOut("if(__noSuchMethod__) {break ; } else {export constructor; }");
tryItOut("{}");
tryItOut("try { ; } catch(__parent__) { export constructor; } finally { (1 for (x in [])) } ");
tryItOut("with({constructor: undefined})/*for..in*/for([__parent__, prototype] =  /* Comment */prop in ({})) {export *;yield *::*; }");
tryItOut("var __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("if(<y><z/></y>) { if (window) {throw <y><z/></y>; } else {return;(@foo); }}");
tryItOut("yield undefined;export prototype;");
tryItOut("L:while((__parent__ = \f__iterator__) && 0)");
tryItOut("M:if(window)  /x/  else  if (undefined) yield;");
tryItOut("{\n}");
tryItOut("/*for..in*/for([prop, __iterator__] = ((uneval(1e-81))).eval((<x><y/></x>.__parent__ = <x/>)) in let (constructor, __proto__) <x/>) {;{/*for..in*/for(var [__parent__, prototype] = this//h\n in  /x/ ) {throw  /x/g ;export __parent__; } } }\nif(this.__defineGetter__(\"set\", Math.pow\f)) { if (function::__parent__ =  /x/ ) {this; }} else \tyield <y><z/></y>;\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__.prototype in <>([*].map(function  __noSuchMethod__ () { return true } ))</>) /*infloop*/for(const prop; (-1); prototype.yoyo(this)) (<x><y/></x>);");
tryItOut("M:if( /x/g ) const prototype = undefined;");
tryItOut("/*infloop*/do /*for..in*/for(const [__proto__, prop] = prototype.__count__ = (__proto__).__defineGetter__(\"__parent__\", function  prototype (constructor, __proto__) { return <><x><y/></x></> } ) in constructor = prop) {/*infloop*/for(const __noSuchMethod__ = 1e4; this; (-0)) ;/*for..in*/for(let __count__ in constructor) {export *; } } while(new RangeError());");
tryItOut("with({}) { <y><z/></y>; } ");
tryItOut("export *;");
tryItOut("M:if(__count__ = 0.1) { if (constructor) (1.2e3); else {throw __noSuchMethod__;export set; }}");
tryItOut("/*for..in*/for(const __proto__ in ((__count__)(this))){( '' );break M; }\n(<x/>)\ngc()");
tryItOut("if(<x><y/></x>.propertyIsEnumerable(\"__proto__\").\twatch(\"__parent__\", /a/gi)) {yield; } else  if ((__count__ >>>=<><x><y/></x></> ^ yield __noSuchMethod__)) {return; } else @foo;");
tryItOut("yield;");
tryItOut("const prototype = [,,z1], __parent__ =  \"\" ;\n/*for..in*/for(const constructor/*\n*/ in (((1 for (x in [])))(__noSuchMethod__))){}\n");
tryItOut("/*for..in*/for(__parent__ = <x><y/\t></x>.__lookupGetter__(\"__parent__\") in ([1,,]++) &= <x><y/></x>.__count__ = prototype) if(-0) {throw <'x><y/><x;let __count__; } else export *;");
tryItOut("do {null;throw *::*; } while(((__noSuchMethod__ = this)) && 0);");
tryItOut("/*infloop*/for(let constructor; __noSuchMethod__.prototype = ([[-1].sort(function  __proto__ (constructor, constructor) { return <x/> } ).@foo]); ({a2:z2})) /*for..in*/for(var prop in this.__defineGetter__(\"prop\", Function)) export prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <x><y/></x>) const prototype;");
tryItOut("/*infloop*/L:for(({__count__: 0/0}); ; null >>>=[]) return __parent__;");
tryItOut("let(__proto__ = window[*]\n, prototype) { throw prop;");
tryItOut("/*for..in*/L:for(const __proto__ in ((({}).__lookupGetter__)(constructor++)))return (-1);\nswitch(__proto__) { default:  }\n");
tryItOut("do \t{{}let __noSuchMethod__; } while(((.2.watch(\"prototype\", Math.pow))) && 0);");
tryItOut("throw <x><y/></x>; const __parent__\n{throw <><x><y/></x></>;break ; }");
tryItOut("let(__iterator__, __iterator__) { this.zzz.zzz;");
tryItOut("[1,2,3,4].map");
tryItOut("return;");
tryItOut("/*infloop*/do {var __iterator__ = <x><y/></x>, __proto__ = ({a2:z2}); } while(yield (new 1e4(this)));");
tryItOut("/*infloop*/while((((uneval(this.__defineGetter__(\"__proto__\", new Function)))))[prototype = __noSuchMethod__])yield;");
tryItOut("/*infloop*/for((__noSuchMethod__ =  /x/ ); ([(eval(\"export __parent__;\", <x><y/></x>))].filter('haha'.split)); ((yield this))[(((<x><y/></x>).__defineSetter__)(__parent__, this))]) if(*::*) {__count__, __proto__ = __noSuchMethod__; }");
tryItOut("with({__noSuchMethod__: (let (__iterator__) __iterator__.__defineSetter__(\"++\", ({}).__lookupGetter__))}){<><x><y/></x></>; } const __noSuchMethod__;");
tryItOut("/*infloop*/for(let __iterator__; (new function(y) { yield y; <x><y\t/></x>;; yield y; }()); __parent__ = [11,12,13,14].some) /*infloop*/for(const constructor = <x><y/></x>; <><x><y/></x></>;  /x/ ) break ;");
tryItOut("with((new <x><y/></x>(__noSuchMethod__))){while((prototype) && 0)this;with((yield  /x/g  |= window)){/*infloop*/M:for(const __noSuchMethod__ = true; <y><z/></y>;  /x/g ) let constructor = __parent__, constructor;__iterator__, prototype = <><x><y/></x></>; } }");
tryItOut("L: return;");
tryItOut("/*infloop*/for(const constructor; prop; <><x><y/></x></>) {throw  '' ; }");
tryItOut("");
tryItOut("throw StopIteration;");
tryItOut("let (prototype) { /*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.__noSuchMethod__ in undefined) yield; }");
tryItOut("__parent__, __proto__ = <y><z/></y>;");
tryItOut("return");
tryItOut("if(-<x/>.hasOwnProperty(\"__noSuchMethod__\")) {if(<><x><y/></x></>) { if (*) <><x><y/></x></>; else {prop setter: function (prototype, prototype) { gc() }  }} } else export __noSuchMethod__;");
tryItOut("/*infloop*/for(@foo.__defineSetter__(\"prop\", (/a/gi).call); __iterator__-=new [(-1)]() |= [15,16,17,18].map((1 for (x in [])), prototype = this); (<><x><y/></x></>.isPrototypeOf(<><x><y/></x></>).valueOf(\"number\"))) /*for..in*/for(prop in ((function(q) { return q; })(((@foo).__defineSetter__)))){return; }");
tryItOut("{}");
tryItOut("/*infloop*/for(let __iterator__; typeof ({prototype: <><x><y/></x></> }); --<xxx>{__iterator__}</xxx>) {yield <x/>; }");
tryItOut("/*for..in*/M:for(const constructor = new Object(prop = __proto__, window[let __noSuchMethod__, prototype;].eval((<x/> & [,]))) in (constructor = 1.2e3)) {if([11,12,13,14].filter -= (prop = (new (window != 3.141592653589793)((<><x><y/></x></>)(<y><z/></y>),  \"\" )) ? *::* : Error((new (<y><z/></y>)(@foo, <y><z/></y>))))) { if (({ __parent__: [//h\n[], ({ __count__: __proto__ }), constructor, ({ __proto__: prototype, constructor: prop }), ({ __count__: prototype })] }) = ({constructor setter: Function })) {{}/*for..in*/for(prop = *[(-1)] in  \"\" ) {window;var constructor = __noSuchMethod__, __noSuchMethod__ = function::__iterator__; } } else {}} }");
tryItOut("/*for..in*/for(__proto__ in (((function  __iterator__ (__parent__, __noSuchMethod__)1e4).call)((<><x><y/></x></>) instanceof \n<><x><y/></x></>)))return;");
tryItOut("yield\n");
tryItOut("yield ({prop:  /x/g .yoyo(*) });");
tryItOut("/*infloop*/L:for(__parent__; null; [[]]) {export false; }");
tryItOut("export *\n{M:switch(*) { default:  } }");
tryItOut("/*infloop*/for(!; {/*infloop*/for(let ({ __parent__: ({ __noSuchMethod__: __noSuchMethod__, __proto__: __parent__ }), \t1e81.valueOf(\"number\"): ({ __iterator__: prop }) }) = ((p={}, (p.z = <x><y/></x>)())); (p={}, (p.z =  '' )()); ([((p={}, (p.z = <><x><y/></x></>)()))])) {export prop;do {{} } while((<x><y/></x>) && 0); } }\n; __count__.prop = let (__parent__ = (prototype = null),  = (prototype.constructor = ({ get __proto__() { let prototype = <x><y/></x>; } , __proto__: <><x><y/></x></> }))) constructor\t = (uneval((function (prototype, __count__) { return  /x/  } ).call(0.1, window, ({a2:z2}))))) /*infloop*/L:do {export *; } while((new Math.sin((p={}, (p.z = <><x><y/></x></>)())).watch(\"__count__\", Math.pow))/*\n*/)\n");
tryItOut("/*infloop*/M:while(__iterator__)return //h\n<x><y/></x>;");
tryItOut("/*infloop*/L:while(<x><y/></x>.valueOf(\"number\")){{}return; }");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let [, prop, , ] = <><ccc:ddd>yyy</ccc:ddd></>; (null.@foo *= <><x><y/></x></>); *) {let (__parent__, __iterator__ = constructor.__parent__) { /*infloop*/L:for((({constructor: <><x><y/></x></>})); 3.__lookupGetter__(\"constructor\"); __noSuchMethod__.__count__ setter= function  prop (prototype, __noSuchMethod__)[[1]]) export *; } }");
tryItOut("if(<><x><y/></x></>) export *; else  if (0.1) {gc()*; } else yield 5.0000000000000000000000;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in 0.1) {;export prop; }");
tryItOut("let (__noSuchMethod__ = (new (<x/>)()) , <x/>, constructor = false) { /*infloop*/M:for(__proto__; ( /* Comment */(eval(\"let , __parent__;\", <x><y/></x>))); * <<=  '' )  }");
tryItOut("export prop;return;");
tryItOut("throw prototype;");
tryItOut("\fif(\nprop\t) {{} } else  set __iterator__ __parent__ () { return <><x><y/></x></> } ");
tryItOut("L: { }");
tryItOut("yield __proto__\n");
tryItOut(" '' ;");
tryItOut("/*for..in*/L:for(let each = <><x><y/></x></>.__lookupGetter__(\"prototype\").__iterator__ in ((function(y) { yield y; /*infloop*/do {__parent__ = <x/>, __iterator__; } while(<x/>.eval(<y><z/></y>));; yield y; })(<x/>))){export *;/*for..in*/for(let prototype in ((new Function)((__proto__ / @foo)))){/*\n*/ } }\t");
tryItOut("export *;");
tryItOut("return ({__proto__: 1e81 })\n@foo\n");
tryItOut("/*infloop*/L:while(function(q) { return q; }(@foo)){yield __iterator__; }");
tryItOut("switch(<x/>.unwatch(\"__proto__\")) { default:  }");
tryItOut("{yield *; }");
tryItOut("if((p={}, (p.z = __count__ = [[1]])())) gc() else {function(q) { return q; } }");
tryItOut("/*for..in*/for(let prototype = <x><y/></x>.(<x><y/></x>) in *) {continue ;continue ; }");
tryItOut("{}");
tryItOut("throw <><x><y/></x></>;;");
tryItOut("with(__count__){if((#2=\f({__proto__: false}))) {;return\nvar __count__; } else  if (((<><x><y/></x></> >> __noSuchMethod__).__lookupGetter__(\"__proto__\"))) function ()<x/> else {var __parent__;function(q) { return q; } }yield <y><z/></y> }");
tryItOut("with({__count__: (* ^= (-0))}){{(\f<x><y/></x>); }return\n }");
tryItOut("let (__count__ = ( /* Comment */(4.)[window] - <x/>)) { this.zzz.zzz; }");
tryItOut("L: {throw this; }");
tryItOut("throw StopIteration;");
tryItOut("L:with((Error()) ? __parent__ = <y><z/></y> : <x><y/></x>.(<y><z/></y>)){{continue ;let prototype =  \"\" ; }throw constructor; }");
tryItOut("/*for..in*/for(__count__ in ((eval)(new (<x><y/></x>)(({a1:1}), false))))var __proto__, function::__parent__;throw StopIteration;");
tryItOut("M:while(((yield (({ set __count__(constructor) { yield *::*; } ,  })))) && 0)if(__count__[this]) { if (window) return; else return <x/>;}");
tryItOut("if(this) {([z1]);const prop; } else {eval{} }");
tryItOut("if(<x><y/></x>.__lookupGetter__(\"prop\")) {var __proto__; } else  if (<x/>) {return @foo;throw <x/>; } else {}");
tryItOut("while((<x/> >>= -0 & L:if(false) { if (<x/>)  \"\" ; else {{} }}return; !==  /x/g  instanceof (false % *).prop = [this.hasOwnProperty(\"__parent__\")].filter((Math.sin).call).throw(<><x><y/></x></>.propertyIsEnumerable(\"__count__\"))) && 0)throw StopIteration;");
tryItOut("{throw 4.; }");
tryItOut("return;");
tryItOut("export __count__\n/*for..in*/for(__parent__ = (#2=({__iterator__: try { {} } catch(__count__) { yield; } finally { export *; } })) in <x/>) {gc() }");
tryItOut("/*for..in*/for(prototype ? * : __count__ in (([1,2,3,4].map)(((new RegExp(<><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\"), ( \"\"  .@x:: ({})))) - <><x><y/></x></>.__defineGetter__(\"prop\", eval).__count__ = <y><z/></y> &= -3/0))))return prototype;");
tryItOut("L: export __noSuchMethod__;");
tryItOut("/*infloop*/do export *; while(~ /x/ )\n");
tryItOut("if(({__iterator__: <><x><y/></x></> })) yield; else  if (<x/> ===  /x/g ) {__proto__ = null; } else {(0/0); }");
tryItOut("/*infloop*/while((* === <x><y/></x>).yoyo(({}).hasOwnProperty(#1#, false)))gc()");
tryItOut("for(let y in []);");
tryItOut("let(prop = constructor.__parent__ = 3, __parent__) { this.zzz.zzz;");
tryItOut("if(3.141592653589793 != <x/>) var prototype = <x><y/></x>; else  if ([]) {let constructor, prop; } else {break ; }");
tryItOut("with((uneval( /x/g ))){}");
tryItOut("\u2029");
tryItOut("if(033) {yield this;continue M; } else export __noSuchMethod__;");
tryItOut("if(0) { if (this) {const prototype = *, __noSuchMethod__; } else { }}");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let __proto__ in (( ''  - 0/0)([11,12,13,14].some)))const __proto__;");
tryItOut("L:if(({ __proto__: constructor, (__noSuchMethod__): ({ prototype: ({ __parent__: setter }) }) }) = (\nwindow)) {export *; }");
tryItOut("/*infloop*/while(){'haha'.splitexport *; }");
tryItOut("switch(3/0) { default:  } const __noSuchMethod__;");
tryItOut("while((/*\n*/(@foo .. <><x><y/></x></>\n)) && 0){ }");
tryItOut("if((({ __parent__: prop }) = (window)(\t))) return window; else {return *;(*); }");
tryItOut("export *\n");
tryItOut("let(__iterator__) { let __iterator__;");
tryItOut("/*for..in*/for(let __iterator__ in <x/>) {\t;return; }");
tryItOut("if( \"\" ) {; }");
tryItOut("throw (-1);");
tryItOut("/*for..in*/M:for(constructor = eval(\"(prototype = ({}))(*.\\npropertyIsEnumerable(\\\"constructor\\\"), *)\", (--new (*::*)((<x><y/></x> >= <x/>)))) in new function(q) { return q; }(window)) {/*infloop*/M:for(const __count__; ({a2:z2}); #1=[#1#]) {<\tx><y/></x>;export constructor; }throw this; }");
tryItOut("M:while(() && 0){yield 1.2e3;export *; }");
tryItOut("return []\n");
tryItOut("do { } while(((window).call(*, )[constructor = <><x><y/></x></>.hasOwnProperty(\"constructor\")]) && 0);");
tryItOut("/*infloop*/for(var __proto__; this; __count__) {1e+81; }\n");
tryItOut("throw __count__;");
tryItOut("/*infloop*/M:for(var ({ ({ constructor: ({ __proto__: [__proto__, constructor, prop], prop: __count__ }) })\t: ({ constructor: prop, let:  }), __iterator__: __iterator__ = ((<x><y/></x>)(0.1, <><x><y/></x></>)), __parent__ = <x><y/></x> }) = yield <y><z/></y>; __count__ = __parent__; (<x><y/></x>.(<><x><y/></x></>))) let __parent__; const prototype;");
tryItOut("with({}) { return; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in <><x><y/></x></>) return;");
tryItOut("throw <x/>;let (__noSuchMethod__ = @foo, prototype) {  }");
tryItOut("(-3/0.__parent__)(constructor.prototype = (-1)) = __count__;");
tryItOut("L:if(({  if (__proto__): ({ __count__\f: , prototype: ({ __iterator__: __parent__, prop: ({ __proto__: __noSuchMethod__, __count__//h\n: __count__ }) }) }), prototype: ({ __proto__: [, []], __proto__: constructor }) }) = __proto__) /*infloop*/for(var __noSuchMethod__; 1e4; *::*) return null;");
tryItOut("{/*infloop*/do {if(true) {\f if (<>\f<x><y/></x></>) (null); else __iterator__ = prototype, constructor;} const constructor;gc() } while(((false).apply).call(this, ));/*for..in*/for(constructor in (((p={}, (p.z = function ([y]) { })()))(new Number((null === <x/>), <><x><y/></x></>))))yield; }");
tryItOut("with({constructor: [__noSuchMethod__] = __noSuchMethod__ %= *::*}){throw throw arguments;;; }");
tryItOut("{{}let (__noSuchMethod__ = 1.2e3) { var __parent__, __iterator__ = this; } }");
tryItOut("with((false ? *::* : 3 &= [1].prototype.watch(\"prop\", (1 for (x in []))))){; }");
tryItOut("/*for..in*/for(__iterator__ in arguments) {/*infloop*/for(<x><y/></x>; <x/>; @foo) {throw (-1);var __parent__, __parent__ = <x/>; }return; }");
tryItOut("/*for..in*/for(__parent__ = (<x/>).call(0.1, *::*, *) in 1e-81) (<><x><y/></x></>)\nif(*) { if \f( '' ) {} else const prop;}");
tryItOut("{if(yield <><>window.isPrototypeOf(__noSuchMethod__)</> <xxx {__iterator__}={3/0} /><!--yy--></>) if(eval(\";\", <><x><y/></x></> /=  '' )) {export __iterator__; } else  if ((new *(arguments, [1]))) {export *; } else {gc() } }");
tryItOut("/*for..in*/for(const prototype in (('haha'.split)(<employee id=\"1\"><name>Joe</name><age>20</age></employee>))){with({}) this.zzz.zzz;function::__proto__ = true; }");
tryItOut("switch((([<y><z/></y>])(this.__defineGetter__(\"__parent__\", gc), (this.zzz.zzz)))) { default: /*infloop*/while \"\" )let(constructor = true, prop) { *;break; throw prop;break; case 5: break; case this.__defineGetter__(\"__parent__\", undefined): /*for..in*/for(prototype = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in ( /x/ .propertyIsEnumerable(\"prototype\"))) {L: export *; }break; /*infloop*/while([15,16,17,18].filter('haha'.split, <><zzz>false</zzz></>))/*for..in*/for(const __noSuchMethod__ in ((<><x><y/></x></>)(-3/0))){export __noSuchMethod__;continue M; } }");
tryItOut("/*for..in*/for(let [__iterator__, __iterator__] =  /* Comment */ '' .@* in (<y><z/></y>++)) {constructor;/*infloop*/for(undefined; function(id) { return id }.unwatch(\"constructor\").constructor; new (Math.pow).call()) {(<y><z/></y>); } }");
tryItOut("if(new <><x><y/></x></>(prop)) { if (true) return this; else export *;}");
tryItOut("if( ^ (this.@*)) { if (--(this++) .@ RegExp()) {with({prop: (this.__defineGetter__(\"__proto__\", function(q) { return q; }))})L:with(-0) }} else export *;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = (( '' )[ \"\" ]) in ((#1=[#1#])())) throw true;");
tryItOut("return 1e4;");
tryItOut("(( /x/ )(__count__ = <><x><y/></x></>)) << (<><x><y/></x></>\n.hasOwnProperty(\"__proto__\")), [(void null)].map([,,z1])");
tryItOut("L: break ;");
tryItOut("constructor; const __parent__\n");
tryItOut("with(<y><z/></y>)export *\n");
tryItOut("do {/*for..in*/for(let [prototype, prop] = null.@*.eval((p={}, (p.z = *::*)())) in ({a1:1})) throw true;if(undefined , this) { if (__parent__.__iterator__ getter= Math.sin.eval(prop.(__iterator__))) {{;yield <x/>; } }} else yield null; } while(((<> </> -= (0.1.propertyIsEnumerable(\"__count__\")))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */<!--yy-->");
tryItOut("if(constructor.__parent__) #1=[#1#]\n");
tryItOut("<><x><y/></x></> .@ false) const constructor = []; else  if (({__iterator__: window, __count__: window })) return <x/>;");
tryItOut("continue L;let __iterator__, __noSuchMethod__ = null;");
tryItOut("L:do L: /*for..in*/for(const [__iterator__, __parent__] = __iterator__ in *::*) {return <x/>; } while(((RangeError(#3={a:#3#} >>>  '' , <x><y/></x>) / [<x><y/></x>])) && 0);");
tryItOut("with({__noSuchMethod__: __proto__ = <x><y/></x>}){export __noSuchMethod__; }");
tryItOut("do {let prop = 1e4, __parent__ = <x><y/></x>; } while(((yield [<x/> if (<x><y/></x>)])) && 0);");
tryItOut("return;");
tryItOut("const __parent__ = [1];\n{}\n");
tryItOut("/*infloop*/while([,].propertyIsEnumerable(\"prop\")){throw 1e+81;export constructor; }");
tryItOut("{__proto__ = this;break ; }");
