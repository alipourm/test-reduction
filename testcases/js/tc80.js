tryItOut("export *;");
tryItOut("{var __proto__;return; }");
tryItOut("<x><y/></x>;\nbreak\f ;\n");
tryItOut("/*infloop*/while(let (prototype = ([[1]] for each (prop in [,]))) ( /x/g .throw(<y><z/></y>.hasOwnProperty(\"__parent__\"))))/*infloop*/while(new 'haha'.split(__noSuchMethod__, this))function (__proto__, get) { gc() } ");
tryItOut("with(new this.__defineSetter__(\"prototype\", ( \"\" ).__defineSetter__))L:while((this) && 0)var __noSuchMethod__, __parent__ = <x/>; const __noSuchMethod__;");
tryItOut("M:if((<bbb xmlns:ccc=\"[1]\"><ccc:eee></ccc:eee></bbb>.(@foo.__noSuchMethod__))) { if ( { yield; }  = __count__) {var case 6: break; throw 1e4;break; default: break; return;break; export __count__;break; case false: return;break; case <x><y/></x>: export __proto__;, __iterator__ = <><x><y/></x></>; }} else {if([(((<x><y/></x>.propertyIsEnumerable(\"prototype\")) for each (__iterator__ in ({})) for each (__parent__ in 5.0000000000000000000000)))].sort(function (__count__, prototype) { yield prototype } )) return <><x><y/></x>/>; else  if (new Array()) {return <><x><y/></x></>;gc() } else {{//h\n} } }");
tryItOut("let constructor, prop =  /x/g \n");
tryItOut("{return;{} }");
tryItOut("return;\nexport *;\n");
tryItOut("return true;\t");
tryItOut("(4.).__defineSetter__\n");
tryItOut("/*infloop*/for((<><x><y/></x></>.yoyo( /x/g )); (({__count__: __count__, constructor getter: function  __proto__ (prototype, constructor)constructor })); <><x><y/></x></>) function  __noSuchMethod__ (__noSuchMethod__) { yield; } ");
tryItOut("/*infloop*/M:do if(__count__.__noSuchMethod__ setter= (1e4).call) {yield;export __parent__; } else {var __proto__ = __iterator__, __noSuchMethod__; } while((constructor.__parent__ = (<><x><y/></x></>.\f__noSuchMethod__)));");
tryItOut("let (prop = constructor >= [z1]) { yield\n }");
tryItOut("let (__count__ = function  __proto__ (__proto__, ) { yield <x><y/></x> } ()//h\n) { (<><x><y/></x></>); }");
tryItOut("L:if(<x/>) {continue L;/*for..in*/for(__count__ = 1e-81 in *) {(new Function(\"__count__;\")) } }");
tryItOut("let (({ __noSuchMethod__: [] }), __proto__ = <x><y/></x>.__iterator__) { M:__iterator__.__parent__ while((windowlet __count__; }");
tryItOut("/*infloop*/for(let __parent__; this.__defineGetter__(\"prototype\", ({}).hasOwnProperty); ) /*infloop*/for(\t[, , ] = (().unwatch(\"constructor\")); ({__noSuchMethod__: (__iterator__)[[[z1] for (__iterator__ in <><x><y/></x></>)]]}).\funwatch(\"prop\"); let.__proto__ = 0/0) {L:if(#1=[<y><z/></y>]) yyy else  if (<y><z/></y>) yield; else {null }export __noSuchMethod__; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("/*infloop*/while(new  \"\" ){null }");
tryItOut("L:if(new RangeError(*::*)) {/*for..in*/M':for(var (prop) in ((function  constructor (__parent__) { return ((<y><z/></y>)()) } )(constructor = 5.0000000000000000000000))){gc()(<x><y/></x>); } } else  if (([15,16,17,18].filter('haha'.split, __count__ =  /x/g ))) {M:while(( /x/g ) && 0)throw 0/0;do {; } while((({__noSuchMethod__: true, (__iterator__) getter: constructorfunction  __count__ (__proto__)<><x><y/></x></> })) && 0); } else ((new String()));");
tryItOut("/*for..in*/for(let prop = <x><y/></x> <= <><x><y/></x></> in #3={a:#3#}) if(0x99) undefined;");
tryItOut("/*infloop*/for(__proto__.__count__ = this.__defineSetter__(\"__proto__\", *::*); 4.; [*]) {while((<x><y/></x>) && 0)__proto__ = window, prototype = [,,];throw <x><y/></x>; }");
tryItOut("/*infloop*/for(let __iterator__ = ('fafafa'.replace(/a/g, function  __noSuchMethod__ (__noSuchMethod__, prototype) { export *; } )\n); this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; {}; yield y; }); ( /* Comment */([11,12,13,14].sort))) {M:do  while(( /x/ ) && 0); }");
tryItOut("/*for..in*/for(var yield in (([1,2,3,4].map)(<x><y/></x>))){constructor; }");
tryItOut("/*infloop*/for(({ __count__: prop, prop: ({ try { if((uneval(<><x><y/></x></>))) { if (@foo) const __iterator__ = *::*, prototype = <x><y/></x>; else {}} } finally { with({}) let(__proto__, prop) ((function(){for(let y in []);})()); } : constructor, prop: ({ __count__: constructor }) }) }) = (Math.pow); new Function(__count__.__noSuchMethod__); <><bbb xmlns=\"<><x><y/></x></>.__defineGetter__(\"__iterator__\", (1 for (x in [])))\"><!--yy--></bbb></>) {gc() }");
tryItOut("if(this) {return;yield; } else {;\tthis; }");
tryItOut("let ([]) { do {;; } while(([,,z1]) && 0); }");
tryItOut("L:if(__parent__ = __noSuchMethod__ = <><x><y/></x></>) /*for..in*/for(const window in (((new Function(\"gc()\")))((function ([y]) { })())))gc()");
tryItOut("M:do (-0); while((new Function) && 0);");
tryItOut("if([,,].valueOf(\"number\")) M:if(5.0000000000000000000000) {export *;let prototype = (-0), prototype = __noSuchMethod__; } else  if ( \"\" ) t; else {{} } else  if (0.__count__) /*for..in*/for(const [__parent__, __parent__] = (yield <><x><y/></x></>) in <x/>) {yield constructor;{} }");
tryItOut("throw StopIteration;");
tryItOut("Math.powlet __parent__ = <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for((3)(); 0.1; prototype\n) throw prop;");
tryItOut("/*for..in*/for(const __iterator__.__noSuchMethod__ in (new Number())) ( '' );@foo;");
tryItOut("while(( /* Comment */<><x><y/></x></> %= this) && 0){break ; }");
tryItOut("break \n/*for..in*/for(let [__iterator__, __noSuchMethod__] = (p={}, (p.z = <x><y/></x>)()) in  /x/g ) yield;");
tryItOut("/*infloop*/M:do if(yield <x><y/></x>) {return (function ([y]) { })(); } else  if (\f#1=({prototype:  \"\" }))  while(({__count__: <><x><y/></x></> }).prototype);");
tryItOut("/*for..in*/L:for([prop, __parent__] = window in true) /*infloop*/for(const __parent__; +*::*;  \"\" \n) {continue L; }");
tryItOut("/*infloop*/for(__count__ = @foo; this; false) break ;");
tryItOut("prop");
tryItOut("{return <x/>; }");
tryItOut("yield;while((* - <><x><y/></x></>) && 0)export *;");
tryItOut("break L;yield [[1]];");
tryItOut("switch(<y><z/></y> ^ <y><z/></y>) { case new ( '' )(window): break;  }");
tryItOut("switch((typeof __parent__, <x><y/></x>)) { case __iterator__%=3:  }");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/for(*::*.unwatch(\"__proto__\"); ({__proto__: ((uneval(true)))});  /x/ ) {[1,,] }");
tryItOut("/*infloop*/for(var [] = yield @foo; [11,12,13,14].map; ( \"\" .__defineGetter__(\"prototype\", (1 for (x in []))))) {}");
tryItOut("let (({ __count__: __iterator__ })) {  }do (__parent__); while((<><x><y/></x></> :: arguments) && 0);");
tryItOut("continue M;");
tryItOut("/*for..in*/for(__count__ in (window.__lookupGetter__(\"__parent__\").valueOf(\"number\"))) {yield  '' \nif( '' ) prototype = -1, __iterator__; else  if (<y><z/></y>\n) {yield;throw 1.2e3; } }");
tryItOut("/*for..in*/for(var [constructor, __iterator__] = this in <x><y/></x>) gc()");
tryItOut("/*for..in*/L:for([__count__, __proto__] = ((new window(undefined))[<>yyy</>]).eval(new <x/> - <x/>(3/0[[1]])) in __parent__ = __noSuchMethod__.__iterator__ = [11,12,13,14].map) {var __noSuchMethod__ = <x><y/></x>; }");
tryItOut("let(__count__ = (function(q) { return q; }).call((__proto__.__iterator__\f = prototype), function::__count__ = null, arguments)\n, __noSuchMethod__) { __noSuchMethod__ = __iterator__;");
tryItOut("{var constructor = [1,,], prototype;break ; }");
tryItOut("/*infloop*/for((__iterator__|={} >> <x><y/></x>); ; __noSuchMethod__ = __count__+=this) /*infloop*/for(({ __parent__: __count__, __noSuchMethod__: __proto__ }) = __noSuchMethod__ =  \"\" ; <x/> ? <x><y/></x> :  /x/ ; .2.constructor) {/*infloop*/for(@foo; <y><z/></y>; @foo) {export __iterator__;; } }");
tryItOut("{try { let(__iterator__ =  \"\" , __iterator__ = <y><z/></y>) ((function(){{}})()); } catch\f(__noSuchMethod__ if (function(){try { return <x/>; } catch(__noSuchMethod__) { export *; } finally { const __count__ = <x><y/></x>; } })()) { for(let y in [5,6,7,8])  } finally { throw __proto__; }  }");
tryItOut("{/*for..in*/__noSuchMethod__ }");
tryItOut("while((-1.__noSuchMethod__) && 0){/*for..in*/for(let [prototype, __iterator__] = __count__+=<><x><y/></x></> in eval(\"<x/>\", -0)) var __parent__ = function ([y]) { }; }");
tryItOut("/*infloop*/for(const prop; -0; ([15,16,17,18].filter(function (__count__, __parent__)return <><x><y/></x></>;,  ''  += *))) 1e+81;");
tryItOut("for(let y in []);");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/L:for(( \"\" )(<y><z/></y>) in (<x><y/></x>.eval(false))) {let(__noSuchMethod__ =  /x/ ) { ;gc }");
tryItOut("if() { if ((prop = 3/0)) {continue M; } else {; }}");
tryItOut("let (prop = <xxx>{__iterator__}</xxx>) { for(let y in [5,6,7,8]) ({ prototype: (\t{ prop: constructor, __proto__: prototype }) }) = x::prototype; }");
tryItOut("return;/*infloop*/while(<x/>)yield;");
tryItOut("break ;");
tryItOut("if([function () { yield; } (export *;, [1,,])].sort(__parent__)) {let __noSuchMethod__ = 1.2e3; } else  if () \t{return true; } else {export *; }");
tryItOut("M:with(x::__parent__){throw <><x><y/></x></>; }");
tryItOut("while((new ( \"\" )(false)) && 0)gc()");
tryItOut("<x/>");
tryItOut("/*for..in*/for(let __iterator__ = this in [,]) {(1 for (x in []))return @foo; }");
tryItOut("while((null for each (constructor in this)) && 0) const constructor;");
tryItOut("with(this){gc() }");
tryItOut("/*infloop*/for(window; [,]; this) yield;");
tryItOut("with({}) { return; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__.__count__ in null) /*for..in*//* nogeckoex bug 349964 */L: for  each(var getter in [,,]) {return; }\n/*for..in*/for(const __iterator__ in <x/>) export __count__;");
tryItOut("{__proto__[,,z1]; }");
tryItOut("do {Math.sin } while((<><x><y/></x></>) && 0);");
tryItOut("break ");
tryItOut("L: {export __proto__;return (yield @foo); }");
tryItOut("switch(yield __noSuchMethod__) { default: yield;case 7:  /x/g break;  } const prop;");
tryItOut("M:if(4.) let (__noSuchMethod__) { function  __proto__ ()undefined } else return;");
tryItOut("/*for..in*/for(var [__proto__, /*for..in*/for(var x::prototype in (((false).watch)(<><x><y/></x></>))){; }] = (((function ([y]) { })().@*)((this.__defineSetter__(\"__count__\", function  prototype (__count__) { yield this } )))) in (Array(<x><y/></x> |= __parent__, [[1]]).propertyIsEnumerable(\"constructor\"))) yield;do {throw undefined;export __iterator__; } while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/for(let ({ prop: prop, __iterator__(this.__defineGetter__(\"__noSuchMethod__\", 033)): [, ({ __proto__: ({ __noSuchMethod__: ({ __count__: function::__count__ }) }), prop: ({ constructor: [__parent__, prototype], __noSuchMethod__: constructor }) })] }) = return;; eval(\"(@foo).watch\", 3.141592653589793 || (-0)); <x/> ? #1=[#1#] : ^) this;");
tryItOut("/*infloop*/for(__parent__; __iterator__; false) (this)");
tryItOut("if(<y><z/></y>((!this))) { if ((__count__)(@foo) = ({ __count__: __noSuchMethod__ })) /*for..in*/for(var ({ __parent__: __count__ }) in ((eval)())){/*for..in*/for(const __noSuchMethod__ =  /x/  in <x><y/></x>) return; } else {export prototype; }}");
tryItOut("{/*for..in*/for(prototype in ((Math.sin)((({__count__ setter: <x><y/></x>, constructor setter: @foo }) != null)))){function (prototype)<x><y/></x>\n } }");
tryItOut("M:if([(-1 >= @foo)].some((<y><z/></y>).__defineSetter__)) {(1.2e3);\nprototype;\nyield; } export __iterator__;");
tryItOut("gc()if((yield  /x/g ) != [1,2,3,4].slice) { if (new (((/a/gi).apply).apply)(__parent__ = *)) {break L;continue ; }} else {yield;@foo }");
tryItOut("/*infloop*/for([(prop = *::*.propertyIsEnumerable(\"prototype\"))].filter((new Function(\"let (({ prototype: __noSuchMethod__ }) = new (eval)( \\\"\\\" , <y><z/></y>)) { /*infloop*/M:for(__iterator__ = __count__; <><x><y/></x></> >>>=this; (__count__)) {export __noSuchMethod__; } }\"))); __count__ = new ([,,z1])().isPrototypeOf((this.propertyIsEnumerable(\"prop\") >>>=undefined.__lookupSetter__(\"__count__\")))\n; (__count__.prop ?  ''  : *)) /*for..in*/L:for(const [constructor, prop] = *::* in window) yield; const __proto__;");
tryItOut("/*for..in*/L:for( else  in ((function  __noSuchMethod__ (prop) { ({}).hasOwnProperty } )(<x/> if (true)))){throw (<x/>);; }");
tryItOut("/*infloop*/for(const [({ prop: ({ prop: ({ constructor: constructor }), prototype: [, constructor] }), __parent__: __parent__ }), ({ prop: prototype }), __noSuchMethod__, __count__, ] = (prop.((p={}, (p.z = <><x><y/></x></>)()))); (((@foo.propertyIsEnumerable(\"__parent__\")).__lookupSetter__(\"__iterator__\"))(*, [z1])); prototype = [({a1:1}) for (__proto__ in <y><z/></y>) if (<><x><y/></x></>)]) {switch(<y><z/></y>) { case 9: return <><x><y/></x></>; const prototype;break; default: break; case <><x><y/></x></>: case this: case <x><y/></x>: throw <><x><y/></x></>; } }");
tryItOut("with(new (@foo)(arguments)){if(__iterator__\t) {export __proto__;let __count__ = undefined; } else  if (<x/>) {gc()var __noSuchMethod__ = __noSuchMethod__; } else {export *; }{} }");
tryItOut("{(1.3);const __iterator__ = <x><y/></x>\f; }\nthis;");
tryItOut("return;");
tryItOut("/*infloop*/L:for(__parent__; __count__.__count__ = prop.__count__ setter= Math.sin; new function (\tc) { return Math.pow(false, false) } (([prop, , __noSuchMethod__, ] = __proto__.constructor = (-1.constructor).(((({prop setter: (Function).call, function::__iterator__ setter: (1 for (x in [])) })) for ((<x/>)(*) in  /x/g ) for each (prop in function(id) { return id })))))) {/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <><x><y/></x></>) { '' ;if(__parent__) { if (<x/>) \nfunction (__proto__) /x/ } else {break ; } } }");
tryItOut("this.zzz.zzz;");
tryItOut("let (({ prototype: [], __proto__: prop }), [__parent__, __count__, ] = (null >> <x/>)) { let (each, __parent__ = __iterator__) { gc() } }\ngc()\n");
tryItOut("/*for..in*/for([__proto__, __iterator__] = *::*.__noSuchMethod__ in @foo) return;");
tryItOut("/*for..in*/for(var prop in (((new Function(\"/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in __noSuchMethod__) __proto__ = __proto__;\")))([11,12,13,14].map))){/*for..in*/for(let [__noSuchMethod__, constructor] = [15,16,17,18].filter(window, __proto__) in (eval(\"new *::*()\", (eval(\"({}).__lookupGetter__\", null))))) {continue ; } }");
tryItOut("{/*for..in*/for(var x::prop = <><x><y/></x></>\n in @foo) let __iterator__; }");
tryItOut("if(undefined.__iterator__) {throw (function ([y]) { })();; }");
tryItOut("/*for..in*/for(const prop in <><x>\f<y/></x></>) {gc()gc() }");
tryItOut("while(((RegExp(.2++, void 'fafafa'.replace(/a/g, function(q) { return q; })))) && 0)/*infloop*/for(*::*; window; __proto__) {return;__proto__ }");
tryItOut("{throw this\n }");
tryItOut("/*for..in*/L:for([constructor, __count__] = <x/> in false) {\flet __parent__ = <x/>, prototype;<x><y/></x>; }");
tryItOut("L:if(-1) ; else {return undefined;return; }");
tryItOut("L: let __noSuchMethod__ = <x><y/></x>, __iterator__\nyield;");
tryItOut("<x/>;M:if(__proto__.__lookupGetter__(\"__iterator__\")) return;");
tryItOut("/*for..in*/for(prop.__noSuchMethod__ in prop) __parent__, constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\tM: for  each(__parent__(this.__defineGetter__(\"prop\", function(y) { yield y; ++; yield y; }) < null) in (new ((function(y) { yield y; continue ;; yield y; }).call)((__proto__ = __count__)))) {yield this\n\f }");
tryItOut("/*for..in*/for(let setter in yield __count__) {/*for..in*/for(let __noSuchMethod__ in undefined) {yield  /x/ ;const __iterator__ = <x><y/></x>, __proto__ = <y><z/></y>; } }");
tryItOut("L: return;");
tryItOut("let ([({ __parent__: ({ __noSuchMethod__: __proto__, prop: ({ __noSuchMethod__: __count__, __parent__: prototype }) }), __iterator__: [[]] }), ] = (new ({}).__lookupGetter__(__iterator__--))) { gc() }");
tryItOut("/*for..in*/for(let prop =  \"\"  in <x><y/>\t</x>) throw undefined;");
tryItOut("gc()");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("{/*for..in*/for(let [prop, constructor] = eval(\"var __iterator__ = <><x><y/></x></>, prop;\", (<x><y/></x>)[[z1,,]]) .. (new ([__iterator__].sort(new Function))(__parent__.constructor)) in (__parent__ ? __proto__ : 0.1)) {yield; }while((({a1:1}).valueOf(\"number\")) && 0){(<x/>); } }");
tryItOut("try {  { return this.__defineGetter__(\"prototype\", gc) }  } finally { let __count__ = null, prop; } ");
tryItOut("throw __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("L:switch(*::*) { case -this: if([,]) gc()break;  }");
tryItOut("yield (prototype.__noSuchMethod__ = ((function ([y]) { })() ^  '' )).@foo;");
tryItOut("{continue ;continue ;/*for..in*/for(__iterator__.__proto__ in (((1 for (x in [])))(<><x><y/></x></> * false))){gc() } }");
tryItOut("if(({ set constructor delete (constructor, prop) { return false }  })) { if ('fafafa'.replace(/a/g, function(q) { return q; })) __iterator__, __proto__ = prototype;} else {yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(; []; __noSuchMethod__ = ) {yield; }");
tryItOut("if() {while(( \"\" ) && 0){throw <><x><y/></x></>;return; } } else  if (__proto__.__iterator__ =  '' .eval(Math.sin())) {const __iterator__;export *; }");
tryItOut("L: return __count__;");
tryItOut("L:while((('fafafa'.replace(/a/g, (window).watch)) |= (window)) && 0){if( '' ) {(-1); } else throw <><x><y/></x></>;/*infloop*/L:for(<x/>; <x/>; <x><y/></x>) break L; }");
tryItOut("throw prototype = @foo;");
tryItOut("/*for..in*/for(var constructor = <bbb xmlns:ccc=\"__iterator__\"><ccc:eee></ccc:eee></\tbbb> in  /x/ ) {if(0x99 >>> <><x><y/></x></>) { if (<x><\ny/></x> &= <><x><y/></x></>) gc() else {throw window; }}switch((function  constructor () { return this } ).apply) { default: break; case return: /*for..in*/for(let __iterator__ in ((Math.sin)(prototype))){const __noSuchMethod__, __iterator__; } } }");
tryItOut("if(( /* Comment */eval(\"@foo\", <y><z/></y>))) const __iterator__ = <><x><y/></x></>, __parent__; else  if ( get __iterator__(__proto__) { break M; } ) {export *; } else {evalreturn <x><y/></x>; }");
tryItOut("/*for..in*/for(const <x/> in <><x><y/></x></>) {gc() }");
tryItOut("/*infloop*/M:do {yield (-1); } while(<x/> for each (__proto__ in *::*));");
tryItOut("/*for..in*/for(({ __count__: [__count__], __iterator__({ prop: __proto__, __iterator__: prop }) }) in (uneval(prototype))) (({constructor: 1e81, __iterator__:  ''  }));");
tryItOut("let (prototype, prop = ((<x><y/></x> +  /x/ ).propertyIsEnumerable(\"set\"))) { /*infloop*/L:while((++prototype), (__noSuchMethod__.__proto__ getter= __proto__.unwatch( <ccc:ddd>yyy</ccc:ddd> \"constructor\"))){var prototype, __proto__;\fthrow true; } }");
tryItOut("if(<><zzz>let (__iterator__) ([11,12,13,14].sort)</zzz></>) { if ([z1].eval(window)(((yield true)), 1e+81.__defineGetter__(\"__count__\", eval))) {gc() } else continue ; const __iterator__;}");
tryItOut("/*for..in*/for(__count__ = () in <y><z/></y>) {[1,2,3,4].sliceexport constructor; }/*infloop*/while(__parent__ = <y><z/></y>){ }");
tryItOut("/*infloop*/for(var prop = [[1]]; __parent__; <><x><y/></x></>) throw 4.;");
tryItOut("/*for..in*/for(const __iterator__ = <x><y/></x> ?  /x/g  : <x><y/></x> in function(id) { return id }) {/*for..in*/L:for(let constructor in ((Math.sin)([,])))export __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype.__noSuchMethod__ in constructor) {export __iterator__; }");
tryItOut("/*for..in*/M:for(var delete = (Iterator()++) in (<x><y/></x>.hasOwnProperty(\"__iterator__\")//h\n)) let __proto__ = .2;");
tryItOut("/*infloop*/for(let ({ __proto__: ({ __iterator__: try { {} } catch(__iterator__ if (function(){})()) { eval } finally { {} }  }), __parent__: [__parent__] }) = null;  /x/  <= void undefined; __noSuchMethod__.__iterator__ setter= ({}).hasOwnProperty.valueOf(\"number\")) {const ({ __parent__: __count__, __proto__: __proto__ });(this); }");
tryItOut("return;");
tryItOut("gc()\nwith({}) yield <x/>.isPrototypeOf( \"\" );");
tryItOut("/*infloop*/for(const __proto__; undefined; #1=[#1#]) {/*\n*/export __iterator__;true; }gc()");
tryItOut("let (prototype, [__count__, __iterator__, , __noSuchMethod__]) { return\n }");
tryItOut("break ");
tryItOut("while((let (__iterator__) this.__defineSetter__(\"prototype\", gc)) && 0){yield 1.3;(<><x><y/></x></>); }");
tryItOut("with({__proto__: (new window.eval(undefined))}){/*for..in*/for(let __iterator__.__parent__ in ) {gc() } }");
tryItOut("L:if((window |= 3.141592653589793)()) break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in #1=({__proto__: false})) /*infloop*/for(var __noSuchMethod__; window;  '' ) ");
tryItOut("if(__iterator__.valueOf(\"number\")) {{} }");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: [] }) = ({ prop: __noSuchMethod__, __iterator__: let }) = new 0.prop = __iterator__( /* Comment */null, __parent__ = window); this >>=  /x/ .unwatch(\"__count__\"); prototype =  \"\" ) <x><y/></x>.constructor = prop =  /x/g ");
tryItOut("if(void 0) {M:switch(<x><y/></x>.__lookupSetter__(\"prototype\")) { case ([z1,,] instanceof  /x/ ):  }<y><z/></y>; } else export *;");
tryItOut("export *;\n\n");
tryItOut("if(Iterator(++this)) { if ({; }) {var prop = __count__, __proto__ = false;throw window; }} else {const __iterator__ = __count__; }");
tryItOut("if(<x><y/></x>.valueOf(\"number\")) var __iterator__, __iterator__ = __proto__; else  if (<x><y/></x>.(window)) {yield;export *; }");
tryItOut("L:with({__count__: this.__defineSetter__(\"(constructor)\", this)}){/*for..in*/for(let prototype = <x><y/></x> in <x/>) export *; }");
tryItOut("L:if(@foo) { if ( /x/ ) -1;} else throw @foo;");
tryItOut("if(p.yoyo(true)) ( /x/ ); else <x/>;");
tryItOut("throw 0.1;\nyield  '' ;\n");
tryItOut("/*infloop*/for(let prototype = eval(\"this\", <><x><y/></x></>); ([15,16,17,18].map(undefined, eval(\"{}\", @foo))).*--; (#0=<><x><y/></x></> @ typeof <><x><y/></x></> !== this.__defineSetter__(\"each\", function  prop () { yield *::* } ))) {yield <><x><y/></x></> <<= ({a2:z2}); }");
tryItOut("with(function(q) { return q; }){export *;{(<y><z/></y>);export *; } }");
tryItOut("/*infloop*/while(true(this, 3))/*infloop*/for(const prototype; <><x><y/></x></>; <x><y/></x>) {<x><y/></x>;return; }");
tryItOut("let(__proto__ = (<y><z/></y>\n), constructor = <><xxx>{prop}</xxx></>.__defineSetter__(\"__noSuchMethod__\", Math.sin)) ((function(){throw StopIteration;})());");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, __iterator__] = new (undefined)() in undefined.__lookupSetter__(\"prop\")) L:if((({ set prop __noSuchMethod__ () { return window } , constructor:  /x/  }))) yield; else {gc() }");
tryItOut("with((((yield true))[ '' ])){}");
tryItOut("/*infloop*/M:for(const constructor = this.zzz.zzz;  /x/g  .. <><x><y/></x></> >>> (yield false); 1.3) {export *;window }");
tryItOut("/*for..in*/for(let [prototype, constructor] = __iterator__.(new Boolean(__iterator__)) || <x/>\f in (yield __parent__)) {@foo;{} }");
tryItOut("");
tryItOut("let(__iterator__) ((function(){throw  '' ;})());");
tryItOut("M:if(__noSuchMethod__) return; else yield <x><y/></x>\f;");
tryItOut("{const __parent__; }");
tryItOut("if(false) {continue ; } else  if (window) { } else {break L;\texport *; }");
tryItOut("");
tryItOut("/*for..in*/for(var __iterator__ in <y><z/></y>) /*for..in*/for(let __iterator__ = (new <><x><y/></x></>) in undefined) gc()");
tryItOut("/*infloop*/while(__iterator__){return setter;break L; }");
tryItOut("if(window) const __iterator__ = 1.3; else  if ((p={}, (p.z = @foo)())) ; else {throw \t__count__; }");
tryItOut("throw prototype;");
tryItOut("with({constructor: (<><x><y/></x></>\n.@*)}){let constructor, __proto__ = arguments; }");
tryItOut("M:if((__parent__ =  '' .__defineSetter__(\"__parent__\",  /x/ ))) {continue L\nprop = [], __parent__;/*infloop*/do export __parent__; while(((1 for (x in [])))()); } else  if (false) {yield __proto__;(function (__proto__, constructor) { yield false } ).apply } else ");
tryItOut("L:while((((var constructor, __iterator__ = <x/>;)[this])) && 0){if( '' ) {gc() } }");
tryItOut("do var __iterator__ = window, __count__; while((<x><y/></x>.([,,z1])) && 0);");
tryItOut("export *");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in (<y><z/></y>.prototype)()) continue ;\n");
tryItOut("if( if (eval(\"x::__iterator__.prop\", (__parent__ = <><x><y/></x></>) < let (prototype = <x><y/></x>, __noSuchMethod__ = <y><z/></y>) this))) const __iterator__, __proto__; else  if (({__noSuchMethod__ setter: ({}).hasOwnProperty, __proto__: (new (this)( /x/g )) })) {switch\t(<x><y/></x>) { default: export *; }yield <x/>; } else __count__");
tryItOut("return (((__parent__)[*::*]) >= ({__parent__ getter: function  __parent__ (\t) { return window }  }));");
tryItOut("if(__proto__++) ; else throw __noSuchMethod__;;");
tryItOut("do M:with({__count__: -0.__defineSetter__(\"constructor\", *)}) while((yield  for (__proto__ in (-0)) for each (__parent__ in <><x><y/></x></>)) && 0);");
tryItOut("if(([1,2,3,4].slice).call(*, ) = return <x/>(*::*(__parent__, 0.1), <><x><y/></x></>)) { if (new (function::constructor.prop getter= (gc).call)(0x99.throw(<x/>), __noSuchMethod__)) {/*infloop*/for(constructor = (function ([y]) { })(); <x><y/></x>; __iterator__) {yield <x/>; }yield; }} else {let prototype;__noSuchMethod__; }");
tryItOut("let (__noSuchMethod__) { M:if(((yield 0x99) if (1e81))) yield <x><y/></x>; else gc() }");
tryItOut("\n");
tryItOut("if((eval(\"return <x><y/></x>;\", false))) __proto__ else {}");
tryItOut("return;export *\nif(#1=[#1#]) continue L; else  if (__noSuchMethod__) {export *; }");
tryItOut("return (eval(\" '' \",  /x/g )\t.watch(\"prototype\", 'haha'.split))\n(( /x/ .throw(this)));");
