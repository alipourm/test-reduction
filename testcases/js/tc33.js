tryItOut("L:do {throw __iterator__; } while(((yield ( /x/g  > <y><z/></y>)).__count__) && 0);");
tryItOut("/*infloop*/L':for(new (({ get __iterator__(__proto__) { yield __parent__ }  }))(((uneval(__iterator__))\n))/*\n*/; (yield 033); *::*) {; }");
tryItOut("const __iterator__, prop = __count__; const __count__;");
tryItOut("/*infloop*/M:do if((true)) {break ; } else  if ( /x/g ['prop'] = __proto__ <= @foo) {1.3;throw  \"\" ; } else {;const __noSuchMethod__ =  '' ; } while([5.0000000000000000000000.throw(#1=[#1#])].map(new Function\f));");
tryItOut("/*for..in*/for(const __parent__ in ((({}).hasOwnProperty)((( '' .valueOf(\"number\")))[((new (function(q) { return q; })()).hasOwnProperty(\"prop\")).unwatch(\"__proto__\")])))let prop;export *;");
tryItOut("if((( \"\"  == window).__defineSetter__(\"prototype\", /a/gi)).eval(__noSuchMethod__.(*))) {? } else  if (<x/> >>= *::*) {(@foo); } else {yield prop;return; } const __noSuchMethod__;");
tryItOut("L:if(__count__ = <><x><y/></x></> ? * : <y><z/></y>) { if (<y><z/></y>)  else {return __count__;export __count__; }}");
tryItOut("if(#1=[#1#]) return; else  if (<><x><y/></x></>) {yield gc(); }");
tryItOut("switch(([*::* for (constructor in [,,])])) { default: break;  }");
tryItOut("while(( '' ) && 0){return;yield; }");
tryItOut("switch([eval(\"(<><x><y/></x></>);\", undefined)].map([1,2,3,4].map)) { default: break; case ({__count__: !(-1)}): with({__count__: <x><y/></x>.(prop)}){<y><z/></y>;; }do {(window); } while((* in undefined) && 0);case 0: break;  }");
tryItOut("throw  '' ; const __count__; const prop;\n__proto__\n/*\n*/");
tryItOut("L: if((-0.isPrototypeOf(<x><y/></x>))) { if ((__proto__.__proto__)) throw 0/0; else gc()}");
tryItOut("throw __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in null >>> <x><y/></x>) M:switch(*::*) { case 4:  }");
tryItOut("__parent__ setter: function  __noSuchMethod__ (__iterator__) { export *; } \nfunction(q) { return q; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each\t(constructor in this.*) {yield; }");
tryItOut("__proto__");
tryItOut("with({__proto__: -0.propertyIsEnumerable(\"prototype\").__iterator__ =  /* Comment */*::*.@foo})(\n<><x><y/></x></>);");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("throw <x><y/></x>;");
tryItOut("this.zzz.zzz;");
tryItOut("case window: ;break; ");
tryItOut("let(__count__, [({ __noSuchMethod__: ({ prop: ({ constructor: constructor, prototype: prototype }) }) })]) ((function(){for(let y in [5,6,7,8]) let(__parent__ = (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice) + 3/0[], __count__ = (yield yyy !=  '' )) ((function(){yield <x/>;})());})());");
tryItOut("/*infloop*/for(const ({ __iterator__: [, __parent__], prop: ({ prop: __iterator__, __parent__: __count__ }) }) = (prototype = <><x><y/></x></>); null; ([1,2,3,4].slice).call(window, )) {return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const constructor in *::*\n) /*for..in*/for(let prototype in <y><z/></y>) {return @foo; }");
tryItOut("/*infloop*/M:for(let prototype; (p={}, (p.z = <><x><y/></x></>)()); (__parent__ = <x><y/></x> for each (__proto__ in <><x><y/></x></>) for each (prototype in undefined) for (prop in  '' ))) /*for..in*/for(const [constructor, get] =  '' .yoyo(prop) in true) let __noSuchMethod__ = function ([y]) { };");
tryItOut("let (prop = __parent__.(window).isPrototypeOf(__proto__.prototype = 0)) { @foo }");
tryItOut("/*infloop*/for(var __parent__ = [1]; 1e81;  \"\" ) {export prop; } const __iterator__; const constructor;");
tryItOut("continue ; const constructor;");
tryItOut("gc()\nif(eval(\"window\", @foo) &= [,,]) /*infloop*/for(const __iterator__ = 0x99; -0; __iterator__) yield; else  if ((prop = (eval)( /x/g  | <x/>, <><x><y/></x></>))) if(<><x><y/></x></>) { if (<><x><y/></x></>) {{}gc() }} else export *;");
tryItOut("/*infloop*/do /a/gi while((window.@foo));");
tryItOut("/*infloop*/while(( /x/ )[ \"\" ])L:if(/*\n*/__noSuchMethod__ = @foo) {yield <><x><y/></x></>; } else  if (window) export *; else {gc() }");
tryItOut("/*for..in*/for(var prop in ((([11,12,13,14].map|=(__parent__.constructor getter= Math.pow && (prop = __noSuchMethod__ = false, x::__count__ >> (*::*)[<x/>]))).watch)( /x/ \n)))/*for..in*/for(const __parent__ = try { ; } finally { __iterator__ }  in [z1,,]) yield this;");
tryItOut("if(if(([#1=[#1#]].filter(function(y) { yield y; throw #1=[#1#];; yield y; }))) {\fthrow 0/0; } else  if (__count__ =  \"\" ) (window);) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in <x><y/></x>) {throw <y><z/></y>; } } else  if ('fafafa'.replace(/a/g, [1,2,3,4].slice)) for(let y in []); else {export __proto__; }");
tryItOut("let __iterator__ = undefined; prototype ");
tryItOut("do {export each;{let constructor = 3/0; } } while(((new (<y><z/></y>).__defineSetter__())) && 0);");
tryItOut("/*infloop*/for(const (__parent__); (Math.pow)(); [1,2,3,4].slice) /*for..in*/for(let [__proto__\t, __proto__.__iterator__] =  /x/g  in false) {if(033) return; }");
tryItOut(" with ");
tryItOut("if((yield __proto__.__parent__)) { if ((#1 = .2.eval(0/0))) {export *;while((<x><y/></x>) && 0){{} } } else {if(<><x><y/></x></>) { if (window) export *;} else __count__; }}");
tryItOut("do var __iterator__, <x/>; while((([11,12,13,14].some)) && 0);");
tryItOut("{{} }");
tryItOut("if((this.zzz.zzz)) {/*for..in*/for(var (new  '' ) :: new (function(q) { return q; })().(prop.__parent__)['__proto__'] in ((function(y) { yield y; (<x><y/></x> |= 0x99);; yield y; })(<x><y/\r></x>(<x><y/></x>).__proto__ = (__noSuchMethod__ = __parent__, prototype))))/*infloop*/for(__noSuchMethod__ = *; this; @foo) {return  \"\" ; }if((new Function).call(({ get __noSuchMethod__(prop, __proto__) { \nyield __parent__ |= false } , __proto__: (<><x><y/></x></>.watch(\"__parent__\", <y><z/></y>)) }), )) { if (*::* %=  /x/g ) yield;} else {with(<><x><y/></x></>){yield window;(false); } } }");
tryItOut("yield (function ([y]) { })();\nlet __count__ = <y><z/></y>;\ngc()");
tryItOut("with({}) { ({ __iterator__: ({ __iterator__: __parent__, prop: __noSuchMethod__ }), __proto__: __count__ }) } ");
tryItOut("do ([z1,,]); while(([new <x/>( \"\" ,  \"\" )].some(Math.pow)) && 0);");
tryItOut("if(null) constructor = true, constructor;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(var ({ __iterator__: prop }) = ((function::prototype).call(b, __count__,  /x/g )); <y><z/></y> !== -3/0; *::*) {M:with({constructor: constructor = -yield new Object(<x><y/></x>, *::*)})return <x/>; }");
tryItOut("/*for..in*/for(var [__proto__, prototype] = constructor = <><x><y/></x></> -= *::*--\t in ((Math.sin).call)(-3/0, 1.2e3)) {/*for..in*/for(\tvar [__count__, __count__] = yield (function::prop = (function ([y]) { })().constructor) in (__proto__.propertyIsEnumerable(\"__proto__\"))) return <><x><y/></x></>; }");
tryItOut("return");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <y><z/></y>.prototype in false//h\n) ");
tryItOut("{M:if((null)[__noSuchMethod__]) { if (<x><y/></x>.watch(\"__noSuchMethod__\", (1 for (x in [])))) {<><x><y//*\n*/></x></>; }} else {return; } }");
tryItOut("let (__iterator__ = <y><z/></y>.__defineGetter__(\"__proto__\", Math.pow).throw(eval(\"__parent__, __proto__;\", <><x><y/></x></>))) {  }");
tryItOut("{{} }");
tryItOut("let(__parent__ = 3.141592653589793) ((function(){yield #1=[#1#];})());");
tryItOut(" const __parent__;");
tryItOut("throw <y><z/></y>;\nlet __parent__, __proto__;\n");
tryItOut("L: {yield  /x/g ; }");
tryItOut("/*for..in*/for(__noSuchMethod__ =  /x/g .eval(1.3) in (({}).hasOwnProperty).call(<x><y/></x>.__iterator__,  /x/g , (<x><y/></x>.throw(false))).@*) {/*infloop*/M:for(const __noSuchMethod__; @foo;  /x/ ) {function (constructor, __iterator__)<x><y/></x>return; } }");
tryItOut("M:if(new function(y) { yield y; ;; yield y; }(prototype, <><x><y/></x></>)) let __iterator__;");
tryItOut("continue M;\nwhile((this.zzz.zzz) && 0){throw null; }\n");
tryItOut("return RegExp( /x/ );");
tryItOut("export prop\n[z1];");
tryItOut("yield new (1e-81.watch(\"__proto__\", function(q) { return q; }));");
tryItOut("/*for..in*/for(__proto__ in ((({}).hasOwnProperty)(3/0)))export __proto__;");
tryItOut("export *;");
tryItOut("/*for..in*/for(const function::__proto__ in <y><z/></y>.__lookupGetter__(\"constructor\")) {; }");
tryItOut("yield  /x/g \n");
tryItOut("{;L:switch(false) { case false: break;  } }");
tryItOut("L:if(__iterator__ = @foo) {return;export *; }");
tryItOut("/*for..in*/for(const __parent__ in \nsetter) export __proto__;\nthrow prop;\n");
tryItOut("with(false.eval(0.1).throw(<><x><y/></x></>.propertyIsEnumerable(\"prototype\")))/*infloop*/do {__noSuchMethod__ = undefined; } while(( / <bbb xmlns=\"window\"></bbb>) >>>=([false for each (__iterator__ in window)]));");
tryItOut("/*for..in*/for(var [constructor, prototype] = ({window: this.__defineSetter__(\"prototype\", (gc).call) }) in ({ set __parent__ __noSuchMethod__ ()(new Function(\"yield;\")) })(3.141592653589793 - [[1]].@*, (({__parent__: <><x><y/></x></> })))) {const __parent__, __iterator__; }");
tryItOut("/*infloop*/M:for(let __noSuchMethod__; <x/>; ([11,12,13,14].some)) ({}).hasOwnProperty");
tryItOut("let (__proto__, [({ __iterator__: ({ __noSuchMethod__: constructor, __iterator__: constructor }) }), ({ __proto__: ({ __proto__: __count__, prototype: prototype }), prop: [] }), , ({ __parent__: ({ __count__: constructor, prototype: prototype }) })] = ('haha'.split).call(*, )) { return ([15,16,17,18].map((<x><y/></x>).call, false)); }");
tryItOut("/*infloop*/M:for(this; <x/>; <y><z/></y>) var __count__ = true, __iterator__;break M; const __count__;");
tryItOut("/*for..in*/for(let (__noSuchMethod__) in ((function  prop ()this)(({prop: <><x><y/></x></>}))))continue ;/*\n*/ const __proto__;");
tryItOut("while((([(__iterator__ = 4.)])) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(let ((uneval(<y><z/></y>)))((uneval( /x/ ))) in null) function(q) { return q; }");
tryItOut("const prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("with({prop: ((uneval([,,z1]))) |= (\nthis)})M:if(false) { if ([,,]) try { break L; } catch(__count__ if (function(){export *;})()) { const constructor; } finally { return; } } else {throw true;{} }");
tryItOut("M:with(<x><y/></x>)(function ([y]) { })()\nbreak L;");
tryItOut("/*infloop*/while((p={}, (p.z = <x><y/></x>.*)()) @ eval(\"(__count__ ? <\\tx><y/></x> : undefined)\", ([0].sort((new Function(\"{}\"))))()))yield;");
tryItOut("L:switch(@foo) { default: case  /x/ : gc()yield undefined;case null: (false);break;  }");
tryItOut("L:do /*for..in*/for([(<y><z/></y>)[<><x><y/></x></>], prototype] = __proto__ = <><x><y/></x></>.\r__lookupSetter__(\"__proto__\") in *) \t{var prototype;return; } while(([,,].__lookupGetter__(\"__count__\")) && 0); const __iterator__;");
tryItOut("L: ;");
tryItOut("return;");
tryItOut("yield;");
tryItOut("/*infloop*/do while(( if ((window(#1#)))) && 0)(1 for (x in [])) while(new RegExp(<x><y/></x>, <x><y/></x>) || __proto__);");
tryItOut("/*for..in*/for(get in <x><y/></x>) ");
tryItOut("/*for..in*/for(constructor in ((function(q) { return q; })(null.watch(\"constructor\", [1,2,3,4].slice).@*)))[[]];");
tryItOut("M:if(return  '' ) { if (<x/>) throw <><x><y/></x><///h\n>; else {gc() }}");
tryItOut("while((<><x><y/></x></> & <><x><y/></x></>) && 0)/*for..in*/L:for(const prototype =  /* Comment */<x><y/></x>.isPrototypeOf(<x/>.__defineGetter__(\"__noSuchMethod__\", function (__iterator__, __noSuchMethod__) { return <x><y/></x> } )).isPrototypeOf(__iterator__ = __proto__) in (this.__defineSetter__(\"constructor\", gc)) != 3.*) {yield; }");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = (<><xxx>{__count__}</xxx></>.__noSuchMethod__ = <bbb xmlns=\"\n('fafafa'.replace(/a/g, function () { throw <x/>; } ))\"> </bbb>) in (--__count__ = <x><y/></x>)) {/*for..in*/for(var __count__ in ((Function)(([1,2,3,4].map)()))){/*for..in*/for(var __proto__ =  ''  in <><x><y/></x></>) let prop;prototype; } }");
tryItOut("{undefined; }");
tryItOut("if(0/0) { if (constructor) throw <x><y/></x>;} else {[1,2,3,4].mapvar __count__ = window, prototype; }");
tryItOut("return\nlet __count__ =  /x/ , prototype; const prop;");
tryItOut("return true\n");
tryItOut("/*infloop*/do return <x><y/></x>; while(--this.throw(prop = window));");
tryItOut("/*infloop*/L:while((*::*\n).__defineSetter__)break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(/*var __count__ in <y><z/></y>) {yield;export function::constructor; }/*");
tryItOut("L: {{__proto__ = prototype, prop =  yield ;{} }gc() }");
tryItOut("for(let y in [5,6,7,8]) yield (uneval(arguments));");
tryItOut("for(let y in [5,6,7,8]) return window;");
tryItOut("L:if([__iterator__, ]) {let constructor = <><x><y/></x></>; } else  if (this.__defineSetter__(\"__noSuchMethod__\", function () { yield  /x/  } )) ([[]]);");
tryItOut("/*for..in*/for(__noSuchMethod__ in *::*) ");
tryItOut("{return;do let prototype; while(((__proto__.constructor getter= {gc()__noSuchMethod__; })([__count__] = Error(__parent__))) && 0);continue M; }");
tryItOut("with({constructor: <x/>})yield;");
tryItOut("/*for..in*/for(let <><x><y/></x></> in ((function(q) { return q; })((__count__ = window).isPrototypeOf(<x/>.*)))){prototype; }");
tryItOut("if(new (this.__defineGetter__(\"__parent__\", function () {  } ))(window ^= prototype)) throw StopIteration; else {/*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__ in window) {<><x><y/></x></>;\nlet __iterator__ =  \"\" ;\n }/*infloop*/do {; } while((({ get __count__ __parent__ (__iterator__, __count__) { return; }  }))); }");
tryItOut("yield\n/*infloop*/L:for(let ({ constructor: constructor, __noSuchMethod__: __count__ }) = \f<x><y/></x> = [z1,,]; yield *; this.isPrototypeOf(<x><y/></x>)) var __proto__; const __noSuchMethod__;");
tryItOut("export __count__");
tryItOut("export *\t\ncontinue M;");
tryItOut("if(window >>>=--#2=\t({__parent__: 1.3})) {export *;{} } else  if (new RegExp(( /x/g  += __count__)) :: (p={}, (p.z = __iterator__)())) continue M; else {return <><x><y/></x></>\n }");
tryItOut("return true;");
tryItOut("/*infloop*/M:for(__iterator__%=({a2:z2}); new (gc)((prototype.__iterator__)); 1e4.__noSuchMethod__) /*for..in*/for((prototype) in undefined) (new Function(\"export function::__iterator__;\"))");
tryItOut("{}\n");
tryItOut("var constructor = ({a2:z2}); const __proto__;/*for..in*/for(prototype = __parent__.constructor getter= __iterator__ in <x><y/></x>) {throw (-1);var __count__; }");
tryItOut("{break ;if(0) gc() else  if (__count__) {} else ; }");
tryItOut("L:if((<x/> <= <><x><y/></x></>)) { if (false !== -0.__lookupGetter__(\"__iterator__\")) do {yield;constructor; } while((<x/>) && 0); else return <y><z/></y>;}");
tryItOut("with({__proto__: window})__proto__;");
tryItOut("if(<x/>) { if (('fafafa'.replace(/a/g, (function(y) { yield y; return;; yield y; }).apply))) __count__ =  /x/g ; else export __noSuchMethod__;}");
tryItOut("with({}) { __count__, __iterator__; } ");
tryItOut("do {return <><x><y/></x></>; } while((__noSuchMethod__.prototype+=constructor = __iterator__) && 0);");
tryItOut("L: {yield  '' ; }");
tryItOut("return");
tryItOut("do {throw <x><y/></x>; } while((({prop setter: (this).call }) ?  '' .watch(\"prototype\", function\f  __iterator__ (__proto__, prop) { return <x><y/></x> } ) : [@foo]) && 0);");
tryItOut("if(__proto__) { if (false) {return <><x><y/></x></>\t;return <y><z/></y>; } else {let prototype = @foo, __noSuchMethod__ = <x/>; }}");
tryItOut("\nlet __noSuchMethod__ = <x><y/></x>;\n");
tryItOut("if((this.__defineGetter__(\"constructor\",  ))) { if ( /* Comment */[11,12,13,14].sort) {} else {{export *; } }}");
tryItOut("let (prototype, __noSuchMethod__) { this; }");
tryItOut("yield false\ndo {export prototype; } while((prototype) && 0);");
tryItOut("/*infloop*/L:do ; while(null);");
tryItOut("if((eval).call(<><x><y/></x></>, __parent__, <x><y/></x>)) { if ((p={}, (p.z = prototype)())) {\fif( \"\" ) {{}<x><y/></x> }\f else  if (([1,2,3,4].map)().propertyIsEnumerable(\"__iterator__\")) gc()/*for..in*/for(let __count__ in (((__parent__ = false).__defineSetter__)(void <y><z/></y> % __count__(<>1e4</>))))yield false; } else {{yield this;export constructor; } }}");
tryItOut("let (prop, __count__) { /*for..in*//* nogeckoex bug 349964 */ for  each(prototype = <x/>, __iterator__ = window in  /x/g ) return arguments; }");
tryItOut("if(((<><x><y/></x></> |= __proto__).valueOf(\"number\"))) {/*for..in*/for(const [prop, prototype] =  /x/g  in ({a2:z2})) ([]); } else  if (((#2=({let: true})) = #2=({__parent__: @foo}))) 1e-81; else export __noSuchMethod__;");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = prop in prototype = <x><y/></x>) /*infloop*/do {let __parent__, __noSuchMethod__ = <x><y/></x>; } while(3.__defineGetter__(\"__iterator__\", new Function));");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((function(y) { yield y; break ;\f\n const prototype;; yield y; })())){gc() } const __proto__;");
tryItOut("return ({__proto__: window\n});");
tryItOut("let (__count__ = <x><y/></x>, prototype) { {} }function  __iterator__ () '' ");
tryItOut("do gc() while(((<x/> % window)) && 0);");
tryItOut("with(1e4){yield; }");
tryItOut("yield ({a2:z2});");
tryItOut("<x><y/></x>;");
tryItOut("{return;throw this; }");
tryItOut("export __iterator__\n(<x><y/></x>);");
tryItOut("/*infloop*/for(var ({ prototype: [] }) = ({ set __iterator__ prop () { return (-1) } , __iterator__: false }).unwatch(\"__parent__\"); ({a2:z2}); 0/0) {if(this.__defineSetter__(\"prop\", [1,2,3,4].map)) {throw (/a/gi).call(({a2:z2}), ); } }");
tryItOut("return;");
tryItOut("/*infloop*/for(const __count__; 0/0; this) yield;");
tryItOut("let(__parent__) ((function(){for(let y in []);})());\nL:switch(__noSuchMethod__) { case 6: {}break; gc()break;  }\n\nfor(let y in []);");
tryItOut("this.zzz.zzz;");
tryItOut("switch() { case 7: break; /*infloop*/for(*; <><x><y/></x></>; <><x><y/></x></>) {{}(@foo); }break;  }");
tryItOut("/*for..in*/for(var __iterator__ in __parent__) __noSuchMethod__;");
tryItOut("/*for..in*/for(gc() in ((((Number((yield prototype)))).__defineSetter__)(<x/> in this << window /= (<y><z/></y>.watch(\"prop\", \ffunction  __count__ (({ __parent__: __parent__ }))__noSuchMethod__ = __proto__)))))return @foo;");
tryItOut("if(arguments) ");
tryItOut("break M;");
tryItOut("if(<x><y/></x>.(<x/>)) { if ('fafafa'.replace(/a/g, function  __parent__ (constructor) { yield  \"\"  in \t<><x><y/></x></> } )) gc()} else return;");
tryItOut("let __count__ = prop;");
tryItOut("var __count__ =  '' , __parent__ = <x><y/></x>; const ({ constructor: yield });");
tryItOut("if(__parent__.prototype) {continue M } else export *;");
tryItOut("/*for..in*/for([try { with({}) with({}) return; } finally { __parent__ = __noSuchMethod__; } , __proto__] = (-1) in prop && <><x><y/></x></>) {/*for..in*/for(let in <y><z/></y>) break M;yield;null }");
tryItOut("L:if(eval(\"([1,2,3,4].map((<x><y/></x> << *::*), null ? @foo :  /x/g ))\", __parent__ = false.hasOwnProperty(\"__iterator__\"))) { if (prototype) yield this.zzz.zzz;} else ");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/L:for\t(prop in <x/>) {}");
tryItOut("/*for..in*/for(__proto__ in (( /* Comment */this)((#2=[(Function)]))))export *;");
tryItOut("/*infloop*/while(<x><y/></x>){var setter;yield [,]; }");
tryItOut("if(<x><y/></x>) { if (<><x><y/></x></>) {yield constructor; }} else ( /x/g );\n<ccc:ddd><!--yy--></ccc:ddd>\n");
tryItOut("for(let y in []);");
tryItOut("if(prototype) { if ([15,16,17,18].map(({}).__lookupGetter__, <x><y/></x>) ? (__parent__ = prop).hasOwnProperty(\"__count__\") : <>this.zzz.zzz.eval(false)</>.([[]] / [z1].isPrototypeOf(false))) {let __count__, __iterator__;;yield (let (__noSuchMethod__) this); }} else {function(y) { yield y; {}; yield y; }\nif(prop) {return undefined;<><x><y/></x></>; }while((prop != <x><y\t/></x>) && 0){function  __count__ (prop) { yield 4. } (constructor); } }");
tryItOut("let (__noSuchMethod__ = (<x><y/></x>.(this) .@x:: <y><z/></y>.__lookupGetter__(\"__iterator__\"))) { let(prop, prop) { constructor = ; }");
tryItOut("__parent__");
tryItOut("yield;\n;\n");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (function::__parent__)[[]] !== <employee id=\"1\"><name>Joe</name><age>20</age></employee>.prop in __count__ = 0.1) gc()");
tryItOut("throw  \"\" \n.__lookupSetter__(\"__proto__\");");
tryItOut("let ([case 1: break; break; ] = -1 <<= __proto__) { export *; }");
tryItOut("\nconst prototype = <y><z/></y>, __noSuchMethod__;\n");
tryItOut("/*infloop*/for(let ({ __proto__: __noSuchMethod__, __proto__: prototype }) = \nthis >= *::* for each (__count__ in <x><y/></x>) for (__noSuchMethod__ in false); ((__noSuchMethod__) = __count__ = <><x><y/></x></>); (Math.pow).isPrototypeOf(this.yoyo(\f<x><y\r/></x>))) {__parent__: ((({__count__: 3 }).unwatch(\"prop\")).hasOwnProperty(\"prototype\"))M:if(__count__) {export __noSuchMethod__; } else  if (this) {yield this;yield __parent__; } }");
tryItOut("{;let __count__ = <><x><y/></x></>; const ({ __noSuchMethod__: __noSuchMethod__ }); }\nexport *;\n");
tryItOut("switch() { default: if((*::* /= ((__noSuchMethod__)(this, null)))) ; else  if ((033)[1.3].eval(default: break; case <><x><y/></x></>: break; )) {if(eval(\"(new 0x99(this))\", 1e-81 %= false ? @foo : 3)) { } else with({}) { throw StopIteration; }  } else export *;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (false)( '' \t) in (( /* Comment */({a2:z2})).unwatch(\"__proto__\"))) {/*for..in*/for(constructor in (('haha'.split)(-3/0))){ }{const __noSuchMethod__ = <x><y/></x>, constructor; } }");
tryItOut("if((p={}, (p.z = null)())) { if (({prop setter: function  prop () { return  }  })) L: {if(this) const prototype = __count__; } else {gc()<x><y/></x> }}");
tryItOut("with((new [__count__, , @foo] = -3/0((@foo()), __count__ for each (each in this))))");
tryItOut("L:if( \"\" ) {return #1=[#1#]; } else  if (void null if (this)) {gc()L: (<x><y/></x>); const prop; }");
tryItOut("({ __proto__: __noSuchMethod__ }) = ((Function).call().__parent__ = __count__), ({ prototype: __noSuchMethod__ })");
tryItOut("if((( /x/g  ?  \"\"  : prototypegc() for (__count__ in 0)) % 'fafafa'.replace(/a/g, ({}).__lookupGetter__)\t)) { if ((new Error( /x/ .@foo))) export __iterator__; else /*for..in*/L:for(let __iterator__ = this in false) (<y><z/></y>).watch}");
tryItOut("/*for..in*/for(var prop in this) {export __parent__;yield *; }");
tryItOut("; const __count__;");
tryItOut("if(([<bbb xmlns=\"<y><z/></y>\"><x><y/></x>yyy</bbb> if (this)])) { if ([11,12,13,14].sort) {(arguments); } else if( /x/g ) yield;}");
tryItOut("/*infloop*/do {do { } while((__parent__) && 0);while((4.) && 0){__count__; } } while((~ /* Comment */window));");
tryItOut("while((prop = 3.141592653589793) && 0){if(<><x><y/></x></>) /a/gi else  if (@foo.propertyIsEnumerable(\"constructor\")) {function  prototype (__iterator__, prototype)arguments } else {yield (function ([y]) { })();break M; } }");
tryItOut("if(\f(undefined--)) export *;");
tryItOut("033 = prototype;");
tryItOut(";\nL:with(1.3){export *; }\n");
tryItOut("if(__noSuchMethod__.prototype = typeof <><x><y/></x></>.__defineSetter__(\"prototype\", function  prop ()null)) export *; else  if (((<x/>.propertyIsEnumerable(\"__iterator__\")) gc#1=__parent__.(*::*))) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.prototype in <x><y/></x>.(arguments)) /*infloop*/for(var __count__; null; #1=[#1#]) { }");
tryItOut("/*infloop*/do yield @foo; while( /x/g [*::*]);\t");
tryItOut("while((<x/>[(([1,2,3,4].slice)((prototype.prototype), this)).__lookupSetter__(\"__noSuchMethod__\")]) && 0)return 3.141592653589793;");
tryItOut("return <x/>;\n{/*for..in*/for(const __count__ in function ([y]) { }) { }L: (false); }\n");
