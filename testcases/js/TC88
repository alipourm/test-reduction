
tryItOut("yield (true !== [,,z1]) ? -<><x><y/></x></> : .2.__defineGetter__(\"__parent__\", (new Function(\" /x/g ;\")));");
tryItOut("let(__parent__ = let (prop = <><x><y/></x></>, constructor = arguments)  \"\" .yoyo( /x/ )) { let(prop, __noSuchMethod__ = @foo) { constructor = __proto__;\nif(3) {} else  if (this) export *; else {break ; }\n");
tryItOut("/*infloop*/M:for(prototype = this.__defineGetter__(\"__noSuchMethod__\", new Function);  '' .throw(0.1);  /* Comment */<x><y/></x>) {;return; }");
tryItOut("while((\n'fafafa'.replace(a/, ([,,].__noSuchMethod__).watch)) && 0){M:if(<x/>) { if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) *;} else {break ;/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in [[1]]) *::*; } }");
tryItOut("return;");
tryItOut("with(yyy){ }");
tryItOut("throw StopIteration;");
tryItOut("for(let y in []);");
tryItOut("L: {return this;while((<x><y/></x>) && 0){__count__ = __iterator__, __iterator__; } }");
tryItOut("/*for..in*/for(let __iterator__ in null , this) {while(( '' ) && 0){(this).applycontinue ; } }");
tryItOut("/*infloop*/M:do /*infloop*/M:for(undefined; *; [,,]) break/*\n*/ ; while((default: (1 for (x in []))))");
tryItOut("M:if(__noSuchMethod__ = this) yield;/*for..in*/L:for(var [__noSuchMethod__, __noSuchMethod__] = ({a1:1}) in #1#) {;yield; }\f else {}");
tryItOut("return __noSuchMethod__.__iterator__ getter= undefined;");
tryItOut("/*infloop*/L:do function (__iterator__) { return <x><y/></x> }  while((__noSuchMethod__) /= prop = __count__);");
tryItOut("return 0/0 ^ <x/>;");
tryItOut("L:do for(let y in [5,6,7,8]) return <y><z/></y>.yoyo(033) == __parent__ = prop; while(((({ prototype: ({ __noSuchMethod__: this.constructor }), __parent__: ({ __parent__: __count__ }) }) = (([z1])))) && 0);");
tryItOut("L: {yield; }");
tryItOut("/*infloop*/for( /* Comment */4.; __proto__ = __parent__; *::* &= __iterator__ = true) {let __proto__ = <><x><y/></x></>, prototype; }");
tryItOut("switch((new RegExp(, [,].eval(<><x><y/></x></>).throw(__parent__)))) { default: case __iterator__|=(function ([y]) { })(): break; case 6: break; case eval(\"__noSuchMethod__:  /x/ \", <x><y/></x>): do return undefined; while(((<><x><y/></x></>.@foo)) && 0); }");
tryItOut("if(((p={}, (p.z = (uneval(3)))())) - <><x><y/></x></>['__proto__'] = (eval(\"return undefined;\", constructor))) {export prop\n } else {export *; }");
tryItOut("if(('fafafa'.replace(/a/g, (1 for (x in []))))) return <y><z/></y>; else  if (prop((__iterator__ = __parent__)) = ({a1:1})) yield window;");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = __noSuchMethod__ !== ((__iterator__ = <x/>) ? ( '' .throw(window)) :  \"\"  & <y><z/></y>) in (<!--yy-->.())) {yield window; }");
tryItOut("L:switch(__count__.__count__ getter= ([11,12,13,14].filter)) { default: break; break; case 9: \tbreak; \f }");
tryItOut("/*infloop*/L:(1 for (x in []))do M:if(@foo) { if (false) {return; } else const __count__ = <x/>;} while(prop.(let (__count__) @foo));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in window) continue M;");
tryItOut("if((prototype.__proto__)) let __iterator__, __iterator__ = this; else  if ((prop = (-1)) /= ((1 for (x in []))())) {\nprop, __noSuchMethod__;{} } else {continue ; }");
tryItOut("with({constructor: this.__defineSetter__(\"__count__\", new Function)\f}){with(({__iterator__: <><x><y/></x></>}))export __count__ }");
tryItOut("/*for..in*/for(var constructor = <bbb xmlns:ccc=\"(__count__ = 1e4)\"><ccc:eee></ccc:eee><\t/bbb> in __iterator__) {let (__parent__, ({ __iterator__: prototype }) = (@foo <<= window)) { prototype =  '' ; } }");
tryItOut("M:while((<x><y/></x> -= <x><y/></x>[({function::__proto__: 1e+81 ? <x><y/></x> : false })]) && 0){(@foo); }");
tryItOut("try\f { gc() } catch(prop) { export *; } ");
tryItOut("/*for..in*/for(var __parent__ in ((({}).__lookupGetter__)(null))){return <x><y/></x>; }\nreturn;\n");
tryItOut("/*for..in*/try { return yield this; } finally { throw __noSuchMethod__; } ");
tryItOut("/*infloop*/L:for( /* Comment */<x/>; ++this; true) {while((eval(\"function::__noSuchMethod__ = this\", (__parent__))) && 0)do {return <x><y/></x>; } while((window) && 0); }");
tryItOut("/*infloop*/M:for(.; ({constructor: <x><y/></x>.__lookupGetter__(\"prototype\"),  set constructor prop (({ prototype: prototype })) { return #1# }  }); __proto__ = __proto__) break L;");
tryItOut("/*infloop*/for(prototype; prototype |= prototype; window.prototype) {if(return *::*) { if (prototype) return prototype getter: (constructor).apply; else {{}__noSuchMethod__ =  \"\" ; }} }");
tryItOut("yield\n");
tryItOut("/*for..in*/L:for(const __iterator__ = new Date() > __proto__ = *::* in __parent__ for each (__count__ in <x/>)) gc()");
tryItOut("if(<><x><y/></x></> ? prop : <x/>) { if (<y><z/></y>) {var __proto__;yield; } else {yield; }}\nconstructor;\n");
tryItOut("yyy");
tryItOut("do {continue L; } while((true) && 0);");
tryItOut("do {{} } while((window === <><x><y/></x></>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <><x><y/></x></>) {return; }");
tryItOut("/*for..in*/for(let *['setter'] in window ? window :  '' ) if(\n__parent__, prop) { if (( /x/g .yoyo(<y><z/></y>))) {yield; }} else return 5.0000000000000000000000;");
tryItOut("for(let y in []);");
tryItOut("let (__noSuchMethod__ = this) { if([z1,,].throw(<x><y/></x>)) {let constructor, __noSuchMethod__ = <><x><y/></x></>; } else  if (@foo.__proto__) gc() }");
tryItOut("if(\nthis) {__count__, prop = *; } else  if ({}.throw(<x><y/></x>)) {var __count__, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/continue M;");
tryItOut("{export prop;/*for..in*/L:for(constructor in (((<y><z/></y>).watch)(([<y><z/></y>])))){yield;throw prototype = 0x99; } } const __iterator__;");
tryItOut("return;");
tryItOut("/*for..in*/for(var __count__ in prototype) {var __noSuchMethod__, prototype; }");
tryItOut("L: yield;");
tryItOut("if((<><x><y/></x></>.__proto__)) {try { export prototype; } catch(constructor) { continue ; } finally { const __iterator__; } return __proto__; } else  if ((undefined += *)(<x><y/></x>.(null))) /*infloop*/M:while(<x><y/></x>)constructor; else yield;");
tryItOut("let (__noSuchMethod__) { 3.141592653589793; const __count__; }");
tryItOut("with({__proto__: __noSuchMethod__(__iterator__) *= <x/>.__lookupGetter__(\"__proto__\")})function (__proto__)({constructor: (yield ( /x/g  ^ \f<y><z/></y>))})");
tryItOut("return +__parent__.__iterator__ .. (gc).call([15,16,17,18].sort((Function).call, true), );");
tryItOut("if(([(<><x><y/></x></>.throw(-0)) for (__noSuchMethod__ in null) for each (prototype in [,,z1])])) { if (__proto__.prototype getter= gc) {break M; } else {*; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in var __proto__ = undefined;) {return (-1); }let prototype, __noSuchMethod__;");
tryItOut("with({}) { let(__iterator__, each = (*++)) { with({}) for(let y in [5,6,7,8]) function(y) { yield y; false;; yield y; } } ");
tryItOut("let(prop, prop) { for(let y in [5,6,7,8]) return;");
tryItOut("if((function ([y]) { })()) { if (<x/>) export *;} else {continue L; }");
tryItOut("if(prototype) { if (prototype, prototype) {export constructor; } else return prop;}\n");
tryItOut("L:if((__parent__.* if (undefined))) { if (({this: '__noSuchMethod__.__iterator__ = 1e81})) continue ;} else throw <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in [z1]) if() {const __iterator__;(<x><y/></x>); } else  if ([(false >>> <x/>)]) {return <x/>;prototype } else {export prop;export *; }");
tryItOut("M:if(((this for each (__proto__ in __iterator__ =  /x/ ) for each (__count__ in ([[]]\n)) if (<x/>)))) {return prototype; } else  if (let (__parent__ = (<x><y/></x> ^= [1,,]).*)  '' ) export *;");
tryItOut("switch(@foo) { default: L:with({constructor: <><x><y/></x></>})continue L;break; break; break;  }");
tryItOut("L: yield;");
tryItOut("(<><x><y/></x></>);");
tryItOut("do {return <><x><y/></x></>; } while(( /x/g ) && 0);/*infloop*/for(<y><z/></y>; <><x><y/></x></>; -3/0) {export  \"\" ;{} }");
tryItOut("([this for (__parent__ in @foo)])['__iterator__'] = __proto__;");
tryItOut("if((__parent__ = <y><z/></y>) .@x:: [15,16,17,18].filter([1,2,3,4].map, (prop for (constructor in <x><y/></x>))) *=  /x/ ) { if (export __count__.yoyo(constructor)) {export *; }} else {var prop;\nexport *;\n }");
tryItOut("/*infloop*/for(([] = [] !== window); this.__defineGetter__\t(\"__proto__\", function(y) { yield y; yield __proto__;__count__, __count__ = [z1];; yield y; }); 0.1) {/*infloop*/for(let prop = <x><y/></x>; <x><y/></x>; 4.)  } const prototype;");
tryItOut("/*for..in*/for(({ prototype: ({ __noSuchMethod__: __parent__ }) }).__iterator__ in ((function (({ __count__: [], constructor: [, ({ __noSuchMethod__: __noSuchMethod__, constructor: ({ __proto__: __proto__, prototype: __iterator__ }) })] }), prop) { yield (<><x><y/></x></> >>>=prototype) ? function ([y]) { }.__lookupSetter__(\"prototype\") : #1=[#1#].unwatch(\"__iterator__\") .@ this.__defineGetter__(\"__proto__\", (<x><y/></x>).__defineSetter__) } )(__parent__ =  \"\" .eval(<><x><y/></x></>)))){; }");
tryItOut("if((<x/>.__lookupGetter__(\"constructor\"))) { if (({__count__: *})) {{}return; }\t} else var function (prop) { yield (function ([y]) { })() } ;");
tryItOut("switch(*::*) { default: break; case 0: case ((-0) &= true): L:if(<x><y/></x>) { if ( /x/ ) gc()} else yield;if( \"\" ) let __noSuchMethod__ = [[]]; else  if (<x/>) {const prop =  \"\" ;yield; }\t else {yield false; }case (constructor.unwatch(\"prop\")): break;  }");
tryItOut("with({this.zzz.zzz;: prop}){; }");
tryItOut("M:if((<><ccc:ddd>yyy</ccc:ddd></>.(())) >= ({__proto__ getter: (1 for (x in [])) })) { if (__parent__) {{(1 for (x in []))export prototype; } } else export *;}");
tryItOut("throw __iterator__;");
tryItOut("M:if(<><bbb xmlns=\"(try { for(let y in [5,6,7,8]) yield <x/> <<= __count__; } catch(__proto__ if (function(){let(__iterator__ = @foo.hasOwnProperty(\"__iterator__\"), __count__ = (null , window)) { __noSuchMethod__ = __proto__;})()) { for(let y in [5,6,7,8]) try { var __proto__, prop = ({a1:1});\t } catch(__parent__) { throw ({a2:z2}); } finally { const prop = function(id) { return id }; }  } finally { return; } \n)\">yyy</bbb></>) { if ((this.zzz.zzz)) {{}\nthrow <y><z/></y>; }} else {;throw (*.__defineGetter__(\"{}\", (<x/>).watch)); }");
tryItOut("/*for..in*/for(const prototype in ((<ccc:ddd></ccc:ddd> = <x><y/></x>.__lookupSetter__(\"constructor\"))((uneval( /* Comment */prop)))))continue ;");
tryItOut("switch(eval(\"do {export *; } while(((prop = constructor)) && 0);\", ([1,,])(<x/>, (prototype.__proto__ getter= 'haha'.split)))) { case 6: __count__ = constructor;L:if(yield) export *;yield (((<><x><y/></x></>)));break; if(constructor.__iterator__) { if (\n({}))  else yield;}break; \f<x><y/></x>break;  }");
tryItOut("let __count__;");
tryItOut("{let gc() = this;let prop = *, prop; }");
tryItOut("L: {var prop, __noSuchMethod__ = this;return; }");
tryItOut("if(window) {gc()throw (-1); } else export *;");
tryItOut("L: {/*infloop*/do throw  '' ; while(<><x><y/></x></>); }");
tryItOut("if(eval(\"__count__;\", this)) {{}gc() } else  if ((033.__defineGetter__(\"__parent__\", <x/>))) return true; else throw [,,];");
tryItOut("if((([*].map([1,2,3,4].slice).throw(<x/>--))())) {export *;yield; } else __noSuchMethod__ = __iterator__;");
tryItOut("/*for..in*/for(var [__iterator__, prop] =  '' .eval((<><x><y/></x></>.unwatch(\"__iterator__\") *= (<y><z/></y> != 0/0))(-0)) in  '' ) {var __proto__, __noSuchMethod__ = undefined;break ;export *; }");
tryItOut("var prototype = ({});");
tryItOut("/*infloop*/for(let __count__; prototype; <>< debugger y/></x>) {;return -0; }");
tryItOut("let(function::constructor) { with({}) __noSuchMethod__ = __iterator__;");
tryItOut("if(__parent__ = ({ constructor: __count__, constructor: {(<><x><y/></x></>).watch } })) { if (((({let: [,,z1]})) <<= (<x><y/></x> % 3)))  else {; }}");
tryItOut("do {yield null; } while((undefined.__defineSetter__(\"constructor\", ({}).hasOwnProperty)) && 0);");
tryItOut("/*for..in*/M:for(const [prop, constructor] = let (__noSuchMethod__ = (let (constructor = <><x><y/></x></>, constructor) <y><z/></y>)) (function(y) { yield y; break ;; yield y; })\f() in <x/>) {/*infloop*/ }");
tryItOut("/*infloop*/\rM:for(let __count__; new (new Function)//h\n(constructor); (033.hasOwnProperty(\"__count__\"))) {<x/>;yield\n }");
tryItOut("/*for..in*/for(const __proto__ = [15,16,17,18].filter((<><x><y/></x></> -= <><x><y/></x></>).watch, #0=[[15,16,17,18].sort(new Function, this.zzz.zzz)]) in __parent__ = prototype.__noSuchMethod__) (((Function).call([z1,,], )));");
tryItOut("if(true) { if (#1=[(prototype = #1=[#1#].isPrototypeOf(({a2:z2}).watch(\"__proto__\", function(y) { yield y; return <x><y/></x>;; yield y; })))]) \f{gc()return undefined; }} else {if(function::constructor.([[[1]]].eval((__proto__.(@foo))))) /*for..in*/for(var [__iterator____iterator__ , constructor]window in ) /{export *;gc() } else  if (this.zzz.zzz += constructor << window) {gc()yield @foo; }\n<><x><y/></x></>; }");
tryItOut("const __noSuchMethod__ = @foo, __parent__ = [[1]];");
tryItOut("null;");
tryItOut("{{} }");
tryItOut("export __proto__");
tryItOut("if(eval(\"__proto__\", this)) {return <y><z/></y>; } else  if (function(y) { yield y; ;; yield y; }) {__parent__ = *::*; }\nthrow this.zzz.zzz;\n");
tryItOut("/*infloop*/M:do {each = *::*; } while((new (<><x><y/></x></>)()));");
tryItOut("/*for..in*/for(let prototype in (((.2).__defineSetter__)(@foo))){}");
tryItOut("export __proto__;");
tryItOut("\n");
tryItOut("if(default: /*for..in*/for(var __count__ in (((function  constructor (set)function(id) { return id }).apply)(this)));break; .yoyo(*)) do yield; while((<><x><y/></x></> ^ <><x><y/></x></>) && 0)\n(window); else with({__noSuchMethod__: null()}){gc() }");
tryItOut("do /*infloop*/for(let __parent__;  \"\" ; <><x><y/></x></>) {<y><z/></y>; } while((prototype.__iterator__ = undefined.yoyo(<x><y/></x>)) && 0);");
tryItOut("/*infloop*/while((new new Function(window)((<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", ( /x/g ).watch)), (({__proto__: <><x><y/></x></>}))).valueOf(\"number\"))){/*for..in*/L:for(var constructor = 1.3 ? __parent__ : <y><z/></y> in <y><z/></y>) yield; }");
tryItOut("const __noSuchMethod__, __count__; const constructor;");
tryItOut("(3);");
tryItOut("/*for..in*/for(let __parent__ = <><x><y/></x></> in <x><y/></x>) { '' ;function (__iterator__)prop }");
tryItOut("try { return __count__.__count__ = <><x><y/></x></\r> != (0)(window); } catch(constructor) { with({}) throw __count__; } ");
tryItOut("/*for..in*/for(let [__proto__, function::__noSuchMethod__] = false in [[1]]) @foo;");
tryItOut("/*for..in*/for(const __parent__ in this.isPrototypeOf(<x/>)) {return\n }");
tryItOut("if( \"\" ) const prop;");
tryItOut("return 0x99;");
tryItOut("let __count__ = [,,z1];");
tryItOut("L: {\n }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("switch([[1]]) { case 7: default:  }");
tryItOut("{}");
tryItOut("with(__iterator__ =  \"\" ){if(0/0) {break M; } else continue ; const __parent__; }");
tryItOut("switch((this += window)) { case 8: M:if( /x/ ) yield <y><z/></y>;break;  }");
tryItOut("yield undefined;");
tryItOut("with({}) { let(prop = false, __parent__ = (__parent__ for (__noSuchMethod__ in [1]))) ((function(){__count__(__count__.constructor = eval(\"export *;\", <x/>)) = constructor;})()); } ");
tryItOut("/*infloop*/M:do {gc()return; } while((this.isPrototypeOf(window)) =  /* Comment */<><x><y/></x></>);");
tryItOut("/*infloop*/for(const __iterator__;  '' ; (this\n)(<y><z/></y> , 1e-81.isPrototypeOf((__parent__ = ({ set constructor(__iterator__, __noSuchMethod__)#3={a:#3#}, __noSuchMethod__: this }) .@x:: ((<x/> @ ).__lookupSetter__(\"__iterator__\")))))) ;");
tryItOut("{if(-0) break M; else  if (1.3) {yield __proto__;(({a1:1})); } else {(*::*); }let __parent__; }");
tryItOut("/*infloop*/while(#0=<x/>)M:do ; while(([11,12,13,14].some) && 0);");
tryItOut("/*for..in*/for(let __iterator__.prop in *) yield;");
tryItOut("/*infloop*/while(this.zzz.zzz){yield <><x><y/></x></>;throw (function ([y]) { })(); }");
tryItOut("let (prop = #2=__noSuchMethod__, prop) { {} }");
tryItOut("{M:if(<x><y/></x> && <x><y/></x>) { if (__parent__ = 0/0) {export prototype; } else {return <y><z/></y>;(*::*); }} }");
tryItOut("M:with({__parent__: ((case 2: continue L;break; )())})L:if(null .@*:: *) {([[1]]).watchreturn; } else  if (let (constructor, __count__) <x/>) {yield;export __count__; } const __proto__;");
tryItOut("if(this.isPrototypeOf( '' )) M:if(1e-81) (1 for (x in [])) else  if (<x><y/></x>) { { yield  /x/  }  }");
tryItOut("switch((function ([y]) { }++\t)--) { case 3: break; while((<x/>) && 0){ } }");
tryItOut("/*for..in*/for([constructor, __count__] = eval(\"return [1];\", __count__ = <x/>--) in eval(\"export *;\", <><x><y/></x></>)) {throw  '' ;const __iterator__ = __parent__; }");
tryItOut("for(let y in []);");
tryItOut("with({}) function::__parent__ = __iterator__;");
tryItOut("for(let y in [5,6,7,8]) with({}) this.zzz.zzz;");
tryItOut("if() {return; }");
tryItOut("/*infloop*/L:while((new Function(typeof new (function(id) { return id }\n).isPrototypeOf(null)((([1,2,3,4].slice).call(window, <><x><y/></x></>,  /x/g )), window--)))){<><x><y/></x></> }");
tryItOut("do {throw false;let __count__; } while((({ __noSuchMethod__: constructor, constructor: __proto__, __parent__ = [,] }) = true.__lookupGetter__(\"__proto__\").valueOf(\"number\")) && 0);");
tryItOut("L:with({prototype: \n+(window.eval(__iterator__))}){L:switch(this) { default: return @foo.__defineSetter__(\"__parent__\", /a/gi);break; case (__iterator__ = <><x><y/></x></>): break;  } }");
tryItOut("return; const __count__;");
tryItOut("\n");
tryItOut("let (prototype) { do yield; while((<x><y/></x>) && 0); }");
tryItOut("return; const __count__;");
tryItOut("L:if((new (window)(4.))) { if ((this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in []))))) {let prop, constructor = <><x><y/></x></>;export *; } else throw {};}");
tryItOut("with([ \"\"  for (prop in window)]){{}var prototype; }");
tryItOut("{prototype, __proto__ = <x/>; }");
tryItOut("with(({__proto__: <x/>,  get __count__ prop () {  }  }))return;");
tryItOut("/*infloop*/for(\fvar prop; __noSuchMethod__ = 5.0000000000000000000000, __parent__(1e+81); ((\n[z1]).__lookupSetter__(\"prototype\"))) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in undefined) {return;yield; }");
tryItOut("L: {this; }");
tryItOut("const __count__, constructor = <x><y/></x>");
tryItOut("/*infloop*/while(new __iterator__.((* === [1]))((<y><z/></y>.isPrototypeOf(<><x><y/></x></>))))<x><y/></x>;");
tryItOut("/*infloop*/while(((p={}, (p.z = true)())))continue ;");
tryItOut("/*infloop*/for(let __parent__; undefined; <x><y/></x>) {return; }");
tryItOut("/*for..in*/for(let __proto__ = gc in __noSuchMethod__) {let __count__ = [z1,,], __iterator__;export __count__; }");
tryItOut("if((__iterator__.constructor = <x/>)) { }");
tryItOut("throw prototype;");
tryItOut("\nexport *;\n");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("let(__iterator__.constructor = <bbb xmlns=\"<><x><y/></x></>\"><ccc:ddd> </ccc:ddd></bbb>) ((function(){with({}) { function  __proto__ (prop, __iterator__) { return <x><y/></x> }  } })());/*infloop*/do {/*infloop*/L:for(false; window; this)  } while(*::* + #1=[#1#])");
tryItOut("/*infloop*/for(__noSuchMethod__; this.zzz.zzz; ({prototype getter: <><x><y/></x></>.__count__ })) {{(<><x><y/></x></>); } }");
tryItOut("L:with(({ get constructor __noSuchMethod__ (__parent__, constructor)constructor }) % __parent__)\nconst prototype =  /x/g ;");
tryItOut("export __count__;");
tryItOut("if(({prototype getter: eval }) @ 'fafafa'.replace(/a/g, (new Function(\"function  prop ()<><x><y/></x></> const __noSuchMethod__;\")))) {if(undefined) {gc() } else  if (5.0000000000000000000000) const prototype; } else {export __count__;\nexport __noSuchMethod__;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in __proto__) yield #1#;");
tryItOut("/*for..in*/M:for(let __proto__ = ((<bbb xmlns:)=\"(window)([[]], <x><y/></x>)\"><ccc:</ccceee<)/bbb>.(<x/>.unwatch(\"__count__\").eval( /x/ )) in ((eval(\"[[1]]\", prototype = true)).__lookupGetter__(\"__noSuchMethod__\"))) {L: return window;({}).hasOwnProperty\nwindow;\n }");
tryItOut("M:if(({ __proto__: [, , , __iterator__], constructor: prop }) = (<x/>.@*.eval(__parent__)).@foo) M:if([15,16,17,18].some(function (prototype) { return window } , yield __noSuchMethod__)) export *;");
tryItOut("/*infloop*/M:for((function (prototype) { return <>*::*</>.hasOwnProperty(\"__count__\") } )((new RangeError(__proto__ = <x><y/></x>, ({a1:1})).unwatch(\"__noSuchMethod__\")), <><bbb xmlns:ccc=\"\"><ccc:eee></ccc:eee></bbb></>); ((yield  \"\" ).yoyo(((-1) ? *::* : <><x><y/></x></>))).propertyIsEnumerable(\"__parent__\"); __count__.constructor) M:if( { switch((function ([y]) { })()) { default: {}break;  } } ) { if (<><>function ([y]) { } &= __proto__</></>) {throw <y><z/></y>;\nyield;\nwhile((<y><z/></y>) && 0)1.3; } else {{} }}");
tryItOut("if(((*.eval(this)) - ({constructor: <x/>, function::get getter: function(y) { yield y; throw 1e+81;; yield y; } }) for each (__parent__ in __parent__ = this) if ((-0)))) { if (false.__lookupGetter__(\"prototype\")) {/*\n*/{} }} else {if(__iterator__) { if (*::*) {return constructor; } else gc()} }");
tryItOut("{{const prototype =  '' ;yield; }gc() }");
tryItOut("M:if(function(id) { return id }) {export constructor;export __parent__; } else ");
tryItOut("while((([1e4 if (<x><y/></x>)]) ^ __noSuchMethod__((-0))|=(<><x><y/></x></>)(<x><y/></x>) .. (new (<><x><y/></x></>).watch())) && 0)switch(<y><z/></y>) { default: return;break; case 7:  }");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("/*infloop*/L:for(let ({ __proto__: constructor, __proto__: x::__count__ }) = prototype = constructor; ([(return)].map(function (__count__)Exception())); {const __proto__ = null, __noSuchMethod__;return; }) while((undefined) && 0)return;");
tryItOut("[1,2,3,4].slice");
tryItOut("if(new <y><z/></y>.hasOwnProperty(\"__proto__\")(({ prototype: prop }) = ( \"\" .unwatch(\"prop\")), 4.)) yield <x><y/></x>; else  if ([[]]) {(( \"\" ).watch).call }");
tryItOut("");
tryItOut("({ __proto__: __count__ })");
tryItOut("/*for..in*/M:for(const __count__.__count__ in (([1,2,3,4].slice)(<x><y/></x>.( /x/g )))){export *;let __proto__ =  /x/ , __iterator__ = ({a2:z2}); }");
tryItOut("if(__iterator__) {if(this) { if ([1,,]) (__proto__); else {}} } else  if () {{yield  '' ; } } else yield 1e81 .@ this;");
tryItOut("/*infloop*/do {with(__noSuchMethod__)return;export *; } while(({ prop: constructor, __iterator__: constructor }) = ((yield  /x/ )));");
tryItOut("{; }");
tryItOut("{L: {export *;if(({a2:z2})) ; else  if (#3={a:#3#}) gc() else {const yield = getter; } } }");
tryItOut("{this.zzz.zzz; }");
tryItOut("if(undefined % true) __iterator__, __parent__; else  if (true) {yield  /x/ ;yield; }");
tryItOut("if(this) { if ((this.__defineGetter__(\"__parent__\", [[]]) ? new null(<><x><y/></x></>, <x><y/></x>) : 1e81.__lookupSetter__(\"__count__\"))) {switch(__iterator__ = [,,z1]) { case <><x><y/>\t</x></> <<  /x/ : gc()case 2: var __proto__;\nexport *;\nbreak; default: break; case <><x><y/></x></>.__lookupGetter__(\"prototype\"): gc()case 3:  } /x/g ; } else {throw <x><y/></x>;{; } }}");
tryItOut("do {[[1]];function::constructor, __noSuchMethod__ = *::*; } while(((({__parent__: <x><y/></x> }))) && 0);");
tryItOut("/*for..in*/M:for(const prototype = @foo in *) yield __parent__;");
tryItOut("throw __count__;");
tryItOut("/*infloop*/do {(<x><y/></x>) = prop; } while(((p={}, (p.z =  /x/ )())));");
tryItOut("while((@foo) && 0)/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in 1.2e3) {continue ;return; }");
tryItOut("__proto__, __proto__;\n'haha'.split\n");
tryItOut("if(<y><z/></y>) { if ( '' --) {; }} else {/*for..in*/for(constructor in this) ; }");
tryItOut(" const __noSuchMethod__;");
