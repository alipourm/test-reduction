tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in (new (__proto__.prototype = 0x99)(<employee id=\"1\"><name>Joe</name><age>20</age></employee>))) {( \"\"  if ([,,]));/*infloop*/for(var __parent__(#1#) = prop =  /x/ ; let (__iterator__) __count__ = @foo--; __parent__.__iterator__ = new (false)()) \f{(1 for (x in []))break M;\n\n } }");
tryItOut("L: return undefined;");
tryItOut("if(new (*::*)([1])) { if (constructor) {export __proto__; } else /*for..in*/L:for(var [get, __proto__] = (([,,].propertyIsEnumerable(\"__parent__\")).prototype = 1.2e3 % (({constructor: <x><y/></x>, each getter: function  __proto__ (prototype, prop) /x/g  }))) in [1] += * ^ <x><y/></x>.hasOwnProperty(\"__parent__\")) {/*infloop*/while(<><x><y/></x></>){prototype = <><x><y/></x></>; } }}");
tryItOut("__count__ = constructor;");
tryItOut("let(({ __noSuchMethod__: [__parent__] }), [, , , ({ __count__: __noSuchMethod__ })]) { if((<y><z/></y>--)) if(@foo) yield; else  if (-0) {const __noSuchMethod__, prop = <x><y/></x>; } else {throw <x/>;let __noSuchMethod__, prototype; } else  if (@foo %= __iterator__) L:while((-3/0) && 0)prop.constructor");
tryItOut("do {yield;if((function ([y]) { })()) -1; else  if (({a1:1})) var __proto__; } while(((delete *::* -= window)) && 0);");
tryItOut("; const __noSuchMethod__;");
tryItOut("while((true) && 0){ }");
tryItOut("let (constructor, prototype = __noSuchMethod__) { arguments; }");
tryItOut("{with({__parent__:  ''  /  '' }){gc()gc() }/*for..in*/M:for(let prop = ( /x/g  in @foo) in <x><y/></x>) return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let __proto__ in (((function (constructor, __count__)window - this >= __noSuchMethod__ =  \"\" ).call)(__noSuchMethod__)))[[]];");
tryItOut("if([15,16,17,18].some(new Function, __proto__ = (gc).@foo\f)) { if (constructor//h\n.([<x><y/></x>].filter('haha'.split)))  const __iterator__;} else {for(let y in []); }");
tryItOut("with(<x><y/></x>.throw(<x><y/></x>).__lookupGetter__(\"__count__\")){\t }");
tryItOut("break L;");
tryItOut("throw constructor\n/*for..in*/for(var __parent__ in 1e4) {(true); }\nvar __iterator__, __parent__ = this;\n");
tryItOut("if(this.__defineSetter__(\"__count__\", (window).watch)) throw <x><y/></x>; else  if (eval(\"<><x><y/></x></>\", <y><z/></y>)) {continue M; }");
tryItOut("__parent__ = __parent__\ngc()");
tryItOut("if((let ({ prototype: __parent__ }), __count__;)) {var __proto__ = prototype;window } else  if (<bbb xmlns=\"++<x><y/></x>.(<><x><y/></x></>)\"> </bbb>) yield;");
tryItOut("{ }\n");
tryItOut("prototype = function::__parent__;");
tryItOut(";\nvar prop, __iterator__;\n\n");
tryItOut("export *\nif([1,2,3,4].map) {gc()export constructor; } else  if ('fafafa'.replace(/a/g, *::*)) {export prop = 5.0000000000000000000000, __iterator__;\r } else {yield <x/>; }\n");
tryItOut("(<x><y/></x>.(-0).@foo)(let (constructor, __parent__ = <x><y/></x>) __noSuchMethod__ << ({a2:z2}).__noSuchMethod__) = __noSuchMethod__");
tryItOut("with({__iterator__: __iterator__})continue ;");
tryItOut("while((new (function(y) { yield y; yield;; yield y; })()) && 0){let __parent__, __iterator__; }");
tryItOut("do {let __iterator__, __parent__;function (prop)*::* } while((this.__defineGetter__(\"function::__iterator__\", __proto__)) && 0);");
tryItOut("false");
tryItOut("let (prototype, constructor = <x><y/></x>) { const __parent__, constructor = *; }");
tryItOut("//h\nif('fafafa'.replace(/a/g, ((new Function(\"__iterator__, __parent__ = *::*;\"))).call)) { if (([__count__%= \"\" ].filter(Function))) {} const __noSuchMethod__; else {if(new 1e4) { if ((({prototype setter: (<><x><y/></x></>).__defineSetter__,  set __count__() { yield __parent__ }  }))) yield;} else {export *; } }}");
tryItOut("throw __noSuchMethod__;");
tryItOut("{{export constructor; } }");
tryItOut("if(( /x/  > [,])) yield this; else  if (<><x><y/></x></>.*) {export __iterator__; } else {__proto__; }");
tryItOut(" { return (<><x><y/></x></>.hasOwnProperty(\"__parent__\")) } ");
tryItOut("const __noSuchMethod__ =  \"\" ;");
tryItOut("/*for..in*/for([constructor, prop] = (prop == true) ? new Array(({a1:1})) : (function::__count__ = undefined) in <><>(prop.unwatch(\"constructor\"))</></>) {with(<x/>){{} }const prototype = <x><y/></x>; }");
tryItOut("throw <><x><y/></x></>;\nthrow delete <\f><x><y/></x></>;\n");
tryItOut("with(new function(q) { return q; }()){/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in *::*) {const prop, __proto__ = *;yield null; }yield; }");
tryItOut("export *;");
tryItOut("with({}) let(constructor, prop) { __parent__ = __proto__;");
tryItOut("/*infloop*/L:for(let __count__; false.yoyo(constructor)\n; <><{__parent__}><bbb xmlns:ccc=\"-Function(this, 0/0)\"><ccc:eee></ccc:eee></bbb><!--yy--></{__parent__}></>) /*for..in*/L:for(const __proto__ = 033 in function ([y]) { }) {;var __count__ = this, constructor; }");
tryItOut("/*infloop*/for(var constructor; <><bbb xmlns:ccc=\"[15,16,17,18].filter(Function, <><x><y/></x></>) % (5.0000000000000000000000.unwatch(\"prototype\"))\"><ccc:eee></ccc:eee></bbb></>; @foo\f) {continue M\nthrow null\n }");
tryItOut("if(<x/>) { if (eval(\"[1,2,3,4].slice\", window)) M:switch() { default: break; case 4: continue M;break;  } else (1 for (x in []))}");
tryItOut("do {yield; } while((*::* >>>=<y><z/></y>.__defineSetter__(\"constructor\", ([11,12,13,14].sort).watch)) && 0);");
tryItOut("/*infloop*/while(__iterator__.constructor = (<y><z/></y>.eval(</*\n*/x><y/></x>)) .@ prototype = __noSuchMethod__)L: /*infloop*/L:for(const __parent__ = #1=[#1#]; false; #3={a:#3#}) var __noSuchMethod__;");
tryItOut("if(1e+81) {prop;(3); } else  if (<><x><y/></x></>) let prototype; else {yield window; }");
tryItOut("{{}if(<y><z/></y>) { if (<><x><y/></x></>) {yield *; }} else {yield @foo;let constructor, prop = prop; } }");
tryItOut("{}gc()");
tryItOut("L: yield this;");
tryItOut("L:while((new /a/gi(<y><z/></y>)) && 0){__proto__.__parent__throw __noSuchMethod__; }");
tryItOut("[1,2,3,4].slice");
tryItOut("if(*::* <<=  /x/ ) prop; else  if ((true)( /x/ ).prop) { } else if((~ \"\" )) { if (-0.propertyIsEnumerable(\"prototype\")) return this; else function  __parent__ () { return <y><z/></y> } }");
tryItOut("let (prototype, __noSuchMethod__ = eval(\"break ;\", arguments)) { switch(@foo) { default: return <><x><y/></x></>;break; case 7: __parent__, prototype =  \"\" ; } }\n");
tryItOut("/*infloop*/for(let prototype = __proto__ = __noSuchMethod__.unwatch(\"constructor\") .@ (eval(\"yield #1#;\", <><x><y/></\tx></>)).unwatch(\"__count__\"); *::* .@x:: constructor |= yield null &= prototype = <x/>; true.yoyo(<><x><y/></x></>).__parent__ = new Function++) if(this) {let prototype, __proto__ = @foo; }");
tryItOut("/*for..in*/for(__parent__ in (([1,2,3,4].slice)(prototype = prop)))var  { yield <!--yy--> } ;");
tryItOut("while(((constructor) = undefined >>> @foo) && 0)var __noSuchMethod__;");
tryItOut("{yield undefined; } const prop;");
tryItOut("/*infloop*/for(let __parent__; #0=[<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\") += this.__defineGetter__(\"__noSuchMethod__\", function  prop (prop, function::__iterator__)__proto__)]; (constructor.__proto__)) {let (constructor = this) { constructor; } }\r");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: __noSuchMethod__, __count__: __count__.__noSuchMethod__ }) = [z1].watch(\"__parent__\", (new Function(\"let prototype, prototype = true;\"))); gc(); window.prop.__noSuchMethod__) /*infloop*/for(-0;  /x/ ; <x><y/></x>) throw [,,z1];");
tryItOut("/*infloop*/for(@foo; ( /x/g .throw( '' , [z1]) -= <x><y/></x><ccc:ddd>yyy</ccc:ddd> < constructor.__count__\t).__lookupSetter__(\"__count__\"); ({ __proto__: [constructor] }) = ('fafafa'.replace(/a/g, function(q) { return q; }))) let(prop.__iterator__, function::__count__) { with({}) { try {  { return  \"\"  }  } catch(__parent__) { continue ; } finally { (<x/>); }  } ");
tryItOut("let (constructor) { ; }");
tryItOut("do /a/gi while(([1]) && 0);");
tryItOut("/*for..in*/M:for(let [__iterator__, __parent__] = <x><y/></x> in *) throw *::*");
tryItOut("M:if((__count__) = prototype.isPrototypeOf(constructor-=<x><y/></x>)) yield; else  if ([<x/>.__lookupSetter__(\"__count__\")]) return -1");
tryItOut("/*infloop*/for(<><x><y/></x></>; __noSuchMethod__.hasOwnProperty(\"constructor\"); *::*.valueOf(\"number\")) export __parent__;");
tryItOut("/*infloop*/for(let __parent__; (<><x><y/></x></>[eval(\"yield;\",  \"\" )]);  '' .*) let __count__;");
tryItOut("/*for..in*/for(const [function::constructor, __parent__] = let (prop) #0= /x/g  in this.*.@*//h\n) {/*for..in*/L:for(const __count__ = (__parent__.__noSuchMethod__%=(<x><y/></x>.watch(\"prototype\", [,,z1]))) in 1e-81) {(new Function(\"'haha'.split\")) } }");
tryItOut("if(return @foo) {gc(){} } else {let __iterator__; }");
tryItOut("/*for..in*/for([constructor, prototype] = ((uneval(<><x><y/></x></>.__defineGetter__(\"__iterator__\", (new Function(\"break M;\")))))) in ('haha'.split)()) M:do \t{export *; } while(((<x/>//h\n for each (prototype in true))) && 0);");
tryItOut("M:if(yield this.__defineSetter__(\"prototype\", ([1,2,3,4].slice).call)) {M:switch(0/0) { case 2: var __parent__ = <y><z/></y>;break;  }gc() }");
tryItOut("gc()");
tryItOut("if(Function().isPrototypeOf(__count__ = [,,])) { if (this ^= <x/>) {yield undefined;let prop, __proto__ =  /x/g ; } else {<x/>; }}");
tryItOut("{L:if(new <x/> *= *::*(__iterator__ = <y><z/></y>)) { if (new false()) L:  { return <y><z/></y> if ( '' ) }  else {yield <><x><y/></x></>;export *; }}; }");
tryItOut(";");
tryItOut("while((__count__) && 0)yield ({a2:z2})\n");
tryItOut("/*for..in*/for(try { const prototype, prop; } finally { export __parent__; }  = ((({__noSuchMethod__: prototype })) if ([1,,])) in .2) ;");
tryItOut("{let constructor, __noSuchMethod__; }");
tryItOut("let(__proto__, __proto__ = \n__iterator__ =  /x/g ) { try { let(__count__ = __parent__ = <x/>+= /x/ ) { try { return <y><z/></y>; } catch(__iterator__ if (function(){yield;})()) { (null); } catch(constructor) { {} } finally { {} }  } catch(__parent__ if (function(){return;})()) { for(let y in []); } catch(__noSuchMethod__) { throw StopIteration; } ");
tryItOut("{__iterator__, constructor = #3={a:#3#} }");
tryItOut("\n");
tryItOut("M:if(<x><y/></x>) (<x><y/></x>); else {throw <y><z/></y>;; }");
tryItOut("throw <>constructor</>;");
tryItOut("yield __proto__;");
tryItOut("switch(1e+81.function::prop) { default: {}\nbreak ;\ncase 9: /*for..in*/for(const <x><y/></x>.__iterator__ in ((function  constructor (__parent__) { {} } )((prototype|=window)))){Math.powyield; }case 2: break; case 5: break; (({})\f);case <x><y/></x>: if( '' ) { if (<y><z/></y>) window;} else throw <y><z/></y>;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__iterator__) in *::*) yield this;");
tryItOut("constructor = __noSuchMethod__;");
tryItOut("/*infloop*/for(let __proto__; ~<><x><y/></x></>;  '' ) {break \nexport *;new Function }");
tryItOut("/*for..in*/for(let prop = (@foo.unwatch(\"__noSuchMethod__\").watch(\"__iterator__\", arguments)) in ({a1:1})) /*for..in*/for(var __iterator__ in  /x/ ) __proto__ = -0, constructor;");
tryItOut("/*infloop*/L:for(let __count__; ({a1:1}); (__iterator__.(default: {}case 6: break;  { yield *::* } case 9: Math.pow))) yield;");
tryItOut("return;");
tryItOut("if(this.__defineGetter__(\"__count__\", (4..isPrototypeOf(<x/>) >>>=__count__.__count__ setter= function  constructor (prototype, __iterator__) {  /x/ ; } ))) { if (yield constructor.__count__) yield __count__} else while((let (__proto__ = -0) <y><z/></y>) && 0){export /*\n*/constructor;; }");
tryItOut("let (__proto__, prototype) { M:with(__parent__){export prototype;export __parent__; } }");
tryItOut("/*infloop*/L:for([[1]].watch(\"constructor\", (1 for (x in []))); __proto__ <<= true; @foo *= this) /*for..in*/for([__parent__.constructor, __count__] =  \"\" .__count__ = ({constructor: this, /*\n*/__parent__: <x/> }) in @foo) {throw  /x/ ;function (constructor) { yield 1.3 }  }");
tryItOut("if(*::*) /*infloop*/M:while(<><x><y/></x></>){let __count__ = yield window;, __noSuchMethod__;export *; } else  if (<><bbb xmlns:ccc=\"(<><x><y/></x></>.eval(<><x><y/></x></>).watch(\"__parent__\", ({}).__lookupGetter__))\"><ccc:eee></ccc:eee></bbb></>) {__parent__, __proto__ = <x/>;/*infloop*/L:while((constructor.__iterator__ = undefined)){{}let __proto__ = <y><z/></y>, x::__proto__ =  '' ; } } else {/*infloop*/do {*; } while(true)\nvar __count__;window { {} } ; }");
tryItOut("/*for..in*/for(let [prototype, __count__] = (__iterator__.( /* Comment */true)) in  '' \f) {with({__count__: ((yield  \"\" ))[ \"\" ]})(true).watchif(constructor = * .. true instanceof ([15,16,17,18].sort( \"\" , <x/>))) throw  '' ; else {let  = [[1]]; } }");
tryItOut("L: { \"\" ;L: {[1,2,3,4].map } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in this.__defineGetter__(\"delete\", function(q) { return q; })) {({}).hasOwnProperty }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __count__; in {}) {}");
tryItOut("/*infloop*/for(export prop; *;  '' ) {}");
tryItOut("with({}) { return; } ");
tryItOut("if( /x/g .__lookupGetter__(\"__proto__\")) {function  __noSuchMethod__ (__proto__)__count__ } else  if ( /x/ ) function  prototype (__count__, constructor) { return @foo; } \n\tcontinue L;\n");
tryItOut("if(([this.zzz.zzz for (each(__iterator__ << window) in new Iterator(new <bbb xmlns:ccc=\"3.141592653589793\"><ccc:eee></ccc:eee></bbb>,  \"\" )) for each (__proto__ in (<x><y/></x> for each (constructor in 1.2e3))) if (undefined)])) {with({__proto__: (\nnew (0/0)())})if(<x><y/></x>) yield; else (<x><y/></x>); }");
tryItOut("{while((yield <><x><y/></x></>) && 0)const __proto__ = this; }");
tryItOut("switch((__noSuchMethod__)[null]) { case (<x/>.valueOf(\"number\")): 3default: return null;break; break;  }");
tryItOut("if(__iterator__) {return; }");
tryItOut("/*for..in*/for(var __iterator__ = __count__.constructor = yield 033 in __parent__ = <x><y/></x> | window) {gc() }");
tryItOut("with(void <x/>)export *;");
tryItOut("*::*;\n[1,2,3,4].slice\n");
tryItOut("/*for..in*/for(const [prop, prop] = (function(id) { return id }.yoyo(<><x><y/></x></>)) in <x><y/></x>) {\tlet constructor = -3/0, __proto__ = false; }");
tryItOut("for(let y in [5,6,7,8]) (function ([y]) { })()");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop(<x/>) in <><x><y/></x></>) {;\t } const prototype;");
tryItOut("switch((p={}, (p.z = 3)())) { default: break; yield; }");
tryItOut("yield;");
tryItOut("if(( '' )) /*infloop*/L:for(var constructor =  /x/ ; <x/>; 3/0) {yield; }");
tryItOut("/*for..in*/for(const __proto__ in true) {<x><y/></x>; }");
tryItOut("{gc() }");
tryItOut("if(__parent__) throw  /x/ ; else  if (<y><z/></y>) return undefined; else {gc() }");
tryItOut("{let (__iterator__ = <x/>, __parent__ = null) { (<x><y/></x>); }switch(__parent__) { case (new Error()): break; case ~<x/>: yield;case  /* Comment */ /x/g : [,];null;break;  } }");
tryItOut("/*infloop*/M:while((<y><z/></y>.isPrototypeOf(<y><z/></y>).unwatch(\"__proto__\")))/*infloop*/for(var __noSuchMethod__; \nprototype.__count__; !__proto__) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <x><y/></x>) {gc()if(window) { if ((function ([y]) { })()) { } else export __iterator__;} }");
tryItOut("prop = __iterator__;");
tryItOut("let (constructor) { Function }");
tryItOut(";");
tryItOut("/*for..in*/for([__count__, prop] = ((--<y><z/></y>).__defineGetter__(\"prototype\", (new Function(\";\")))) in <x><y/></x>) {export __count__; }");
tryItOut("with({constructor: (yield Math.sin(*::*))}){do gc() while((__proto__ ^= true) && 0); }");
tryItOut("/*for..in*/for(var __proto__ = ; in prototype) ((-0));");
tryItOut("/*infloop*/M:do {throw ; } while([15,16,17,18].sort((1 for (x in [])), <x><y/></x>));");
tryItOut("L: yield <x><y/></x>;");
tryItOut("/*\n*/if((Object())) gc() else  if ((prop)) {return; } else let __proto__ = <><x><y/></x></>, function::__iterator__;");
tryItOut("let (__parent__ = #1#, prototype) { __count__: (yield  '' ) }");
tryItOut("if(constructor.(<y><z/></y> !== export *;)) { if (__proto__ = __proto__) if(<x><y/></x>) {return [,,z1]; } else {continue ; } else {export *;{} }}");
tryItOut("L:if([,]) { if (<y><z/></y>) yield \f<x><y/></x>;} else const __parent__, null;");
tryItOut("let (prop = ({function::__proto__: prototype}), prop = <y><z/></y>.isPrototypeOf(arguments)) { L: return this; }");
tryItOut("/*for..in*/for(var __proto__ in (('haha'.split)([z1])))let(function::function::__proto__) { __iterator__ = constructor;/*infloop*/L:for(let __noSuchMethod__ = window; <><x><y/></x></>;; *::*) let __parent__ = <><x><y/></x></>;");
tryItOut("while(([15,16,17,18].map([1,2,3,4].map, false)) && 0)\n");
tryItOut("switch(void __iterator__ = 5.0000000000000000000000, __proto__ = <y><z/></y>;) { case (Math.pow)(): if(()) { if (\n*::*) {function  prototype (__iterator__, prototype) { return <y><z/></y> } export __iterator__; }} else let prop, function::__proto__;break; break; let constructor = null, __noSuchMethod__;break;  }");
tryItOut("if((033.hasOwnProperty(\"constructor\").yoyo((yield __parent__).eval((yield this))))) export *; const __parent__; else {if([z1,,]) {Functiongc() } else  if (null) {yield; } else {({}).hasOwnPropertyreturn; }yield; }");
tryItOut("do {let(__parent__ = (eval(\"const __count__ = *;\", this)), prop) ((function(){for(let y in []);})()); } while(((function (__iterator__) { return __parent__ = [z1,,] } )()) && 0);");
tryItOut("M:while(((new RegExp())) && 0)yield prototype;");
tryItOut("if(__parent__.__parent__) { if (<><x><y/></x></>) {gc() }} else {var __proto__, __noSuchMethod__ = constructor; }");
tryItOut("{({}).__lookupGetter__while(( \"\" .valueOf(\"number\")) && 0){continue ; } }");
tryItOut("let (constructor, __noSuchMethod__ = <><x><y/></x></>) { export __noSuchMethod__; }");
tryItOut("/*infloop*/for(const prop.__count__ = yield <><x><y/></x></>; new Function(<x><y/></x>); this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; yield *::*;; yield y; })) {throw false;/*infloop*/do {throw <x><y/></x>; } while( /x/ ); }");
tryItOut("with(({ set __count__(({ constructor: ({ prop: [prop], __count__: ({ __proto__: ({ function::prop: ({ prop: __parent__, __count__: __count__ }), constructor: [, prototype] }), __parent__: __count__ }) }), __iterator__: [({ prop: [, ] }), __proto__, ] })) { yield false.__proto__ = 033 } , __parent__: <>((this.zzz.zzz));</> }))if(<x><y/></x>) {export *;const constructor = 3; } else  if () {return {}; }");
tryItOut("{{}yield; }");
tryItOut("with({__parent__: ([1,2,3,4].slice).call(__proto__%=1e+81, this.__defineSetter__(\"prototype\", Math.sin)).unwatch(\"(__proto__)\")}){L:if(__count__) { if ( /x/ ) {export *;yield; } else {}} }");
tryItOut("__proto__ = __count__;");
tryItOut("{L:with(<><x><y/></x></>){setter = undefined; }return  /x/g ; }");
tryItOut("/*for..in*/L:for(let prototype in ((({}).hasOwnProperty)(({prop setter: __count__,  set __parent__(prop, __iterator__)++ { return let (constructor, __iterator__ = 5.0000000000000000000000) <y><z/></y> } \nif(false) { } else  if (constructor) function(y) { yield y; yield <><x><y/></x></>;; yield y; } else {yield <><x><y/></x\t></>;export *; } })))){var __parent__, __count__; }");
tryItOut("with({prototype: [1]})return <y><z/></y>\n");
tryItOut("export *;");
tryItOut("try { for(let y in []); } catch(__count__ if (function(){with({}) { <x><y/></x> } })()) { __noSuchMethod__ = __proto__; } catch(__parent__ if (function(){for(let y in []);})()) { return; } catch(prop) { (false)(this) = __proto__; } ");
tryItOut("/*infloop*/while(delete <x><y/></x> -=  \"\" ){;__noSuchMethod__ }");
tryItOut("while((window(prop)) && 0){(this); }");
tryItOut("if(* for each (constructor in  \"\" )) {gc() } else  if (<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\")) export __noSuchMethod__;");
tryItOut("M:while((new <x><y/></x>) && 0){return;; }");
tryItOut("v");
tryItOut("with(([,,z1])(<><x><y/></x></>)%=('haha'.split(<><x><y/></x></>))){/*for..in*/for(let __noSuchMethod__ in ((gc)(__iterator__)))export *;/*for..in*/for\f(const __count__.getter in <x><y/></x>) return; }");
tryItOut("export __iterator__;");
tryItOut("{}");
tryItOut("M:with((({__parent__: __noSuchMethod__.yoyo(*::*).__lookupSetter__(\"__count__\") }).unwatch(\"prototype\") + each = #0=this)){return;\nif(constructor: constructor = 'fafafa'.replace(/a/g, 'haha'.split) = undefined ^= prop) __iterator__ = 1e81; else  if (__parent__ >>= RangeError()) {}\n }");
tryItOut("with({}) { (window); } ");
tryItOut("if(<><> </></>) { if ((true.propertyIsEnumerable(\"__parent__\")) ? __parent__ =  /x/  : __proto__++ && __proto__ = false) {while((0.1) && 0)(<x><y/></x>.constructor), ( '' )[ /x/g ]gc() } else {gc() }}");
tryItOut("/*for..in*/for(let __iterator__ = (this.zzz.zzz) in ({prop: <><x><y/></x></>})) /*for..in*/for(let (/*infloop*/M:while(({}).__lookupGetter__()){(({a2:z2}));return prop; })(<x><y/></x>) in (([15,16,17,18].sort(/a/gi, *::*))((<{prop}><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></{prop}> .@x:: [15,16,17,18].some((@foo).__defineSetter__, undefined)) ^= (#1=[new constructor( '' )]))))yield (function ([y]) { })();");
tryItOut(";\r const function::__count__;");
tryItOut("/*for..in*/M:for(__count__ in <x><y/></x>) break M");
tryItOut("return __proto__\ngc()M:if( /x/ ) {{} } else  if (<><x><y/></x></>) {yield <><x><y/></x></>;yield <><x><y/></x></>; } else return;");
tryItOut("/*infloop*/L:for((<x/>.eval(033)); (<x><y/></x>)[this]; (1.3[<y><z/></y>])) {}");
tryItOut("{if(export *) /*infloop*/for([__parent__, __proto__, , ] = (p={}, (p.z = <x/>)()); ({ __count__: constructor\t, __noSuchMethod__: __count__ }) = (__iterator__.__noSuchMethod__); (prototype = <><x><y/></x></>)) {yield; } else  if (new RegExp()) {{} } else return;do while((new (function  __proto__ (prop, __count__) { return <x><y/></x> } )(<><x><y/></x></>)) && 0); while((<xxx>{__iterator__}</xxx>) && 0); }");
tryItOut("L:switch(true) { default: break;  }");
tryItOut("with({}) { return [15,16,17,18].filter(Function, false); } ");
tryItOut("yield [] *  /x/g ;/*for..in*/for(var [__proto__, prop] = (uneval(0)) in <y><z/></y>) export *;");
tryItOut("return (constructor >>= __proto__);");
tryItOut("{{return;{} } }");
tryItOut("{let (__noSuchMethod__ = <y><z/></y>) { return; } }");
tryItOut("if((function (__proto__, __count__) { yield <x><y/></x> } ())) while((<x><y/></x>) && 0){;const __parent__; } else  if ((prototype ? <x><y/></x> : <x/>\f for (__count__ in <x><y/></x>) for each (prop in this))) with({}) { const __iterator__ =  /x/g ; }  else {switch(*::*) { case 7:  }let prototype, __count__; }");
tryItOut("if((constructor|=<x><y/></x>)) {throw 0;return 1.2e3; }");
tryItOut("constructor = [z1,,], constructor\n");
tryItOut("/*infloop*/for(const __proto__; __count__.prop getter= function (({ __iterator__: ({ __proto__: ({ __parent__: prototype }), prototype: constructor }) }), ({ prop: prototype })) { yield (/[,].x:: if  } ; <x/>) M:if(__noSuchMethod__ >> <><x><y/></x></>) {return  /x/ ; } const __count__;");
tryItOut("for(let y in [5,6,7,8]) try { for(let y in []); } catch(__parent__ if window(__proto__, __parent__)) { this.zzz.zzz; } ");
tryItOut("try { yield; } catch(function::prop) { var __iterator__, __parent__ =  /x/g ; } finally { export prototype; } ");
tryItOut("window;");
tryItOut("let (var prop = __iterator__, __iterator__;) { gc() }");
tryItOut("(<x><y/></x>);");
tryItOut("yield;");
tryItOut("if((<><x><y/></x></> :: constructor).prop) {(({a1:1})); } else  if ((<ccc:ddd>\t</ccc:ddd>.((new (<x><y/></x>.valueOf(\"number\"))(null))))) (((*)[false])); else \t{export __proto__;__proto__; }");
tryItOut("/*infloop*/while(true).2;");
tryItOut("M:while(([,,z1]) && 0)__iterator__");
tryItOut("gc()");
tryItOut("/*infloop*/M:while()if(5.0000000000000000000000) {return; }");
tryItOut("//h\nif(<><x><y/></x></>) { if (<>\t<>__noSuchMethod__|=<><x><y/></x></></></>) if(<x/>) export prop; else  if (__noSuchMethod__) {(<><x><y/></x></>);return __iterator__; }} else {break M;{} }");
tryItOut("L:if( \"\" ) {yield null; } else {return [z1];{} }");
tryItOut("if([([<y><z/></y>])( \"\" .__lookupSetter__(\"__proto__\"), [,])]) throw window; else  if () new Function else {<><x><y/></x></>;export __count__; }");
tryItOut("/*infloop*/do /*for..in*/for(var __noSuchMethod__ in 033) return; while(({ __count__: ({ prototype: ({ prototype: __proto__ }), constructor: prop }) }) = (export *));");
tryItOut("/*for..in*/for([prop, prototype] = (#1=new (<x><y/></x>)().hasOwnProperty(\"setter\")) in this(Function)) if(<x/>) { if ((-0)) return;} else new Function");
tryItOut("throw <x><y/></x>;/*infloop*/for(<x/>; ( ''  = true in <><x><y/></x></>.__defineSetter__(\"__iterator__\", 1e+81)); (constructor)(<><x><y/></x></>, <x><y/></x>)) /*infloop*/while(<x><y/></x> .. <x><y/></x>){{} }");
tryItOut("if(this.__defineGetter__(\"__iterator__\", <x><y/></x>)\n) {{function  __iterator__ (prototype, constructor) { return {} }  }let (__noSuchMethod__) { (__count__);\nreturn;\n } } else  if ( do ) switch( /x/g  < <><x><y/></x></>.prototype = new Error()) { case (constructor = [<y><z/></y> for each (prop in *)]): /*infloop*/for(var __noSuchMethod__; <y><z/></y>; window) {export __parent__; }break; case [] = <y><z/></y>: do {const constructor; } while((<><x><y/></x></>) && 0); } else /*infloop*/M:for((prototype.unwatch(\"__parent__\")); (return true); null) {with(@foo)gc() }");
tryItOut("{L:switch(null , [,,]) { case 5.0000000000000000000000: default: case   == (<x><y/></x>.constructor = true ^ (({__iterator__: -0}))): prop:  /* Comment */ '' break; case [11,12,13,14].sort:  \"\" ; } const constructor; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*for..in*/for(let [prototype, __noSuchMethod__] = 5.0000000000000000000000 /= <><x><y/></x><+null/> in (undefined)(*::*)) yield;");
