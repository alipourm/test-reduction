tryItOut("let (__count__ = <x><y/></x>, __iterator__) { export let; }");
tryItOut("{( /x/ .__count__); for (__noSuchMethod__ in #3={a:#3#}) }");
tryItOut("if((__proto__ = <><x><y/></x></>\n)) {throw  /x/g ;function(y) { yield y; null;; yield y; } } else  if ( { break ; } ) {switch(this) { default: break; break; prototype = this, function::prop;break; case [z1]: [1,2,3,4].slicebreak;  } } else {M:do return; while((prop) && 0); }\n");
tryItOut("let (__iterator__ = eval(\"(-1)\", .2).watch(\"prop\", /a/gi), __parent__|=[1], new (1 for (x in []))() = L: (__count__)) { try { export __noSuchMethod__; } catch(__parent__) { yield <><x><y/></x></>; }  }");
tryItOut("while(((p={}, (p.z = @foo)())) && 0)(<x><y/></x>);");
tryItOut("let (prototype) { (1 for (x in [])) }");
tryItOut("export __count__;[z1];");
tryItOut("/*infloop*/for(let prototype; (--[,].constructor)\t; function(id) { return id }.__lookupGetter__(\"prop\")) {prototypevar __count__ = , __proto__; }");
tryItOut("/*infloop*/L:for(constructor+=<y><z/></y>; \t({ __parent__: ({ prop: constructor, __count__: __count__ }), __parent__: __count__ }) = window in (__count__ if (undefined)); ({a1:1})) /*infloop*/while(\f(this.zzz.zzz) ^ <xxx {__iterator__}={<x><y/></x>} />){ }");
tryItOut("/*for..in*/for(let prop in this) {export *; }");
tryItOut("{}");
tryItOut("if(true >> this) L:if(export * < <y><z/></y> != this) {/*\n*/ if (Iterator() ? (__proto__) : (case 8: return; for each (__noSuchMethod__ in @foo))) {<x><y/></x>;yield; }} else {} else  if () {if((<x><y/></x>.__lookupSetter__(\"__count__\"))) { if (this.zzz.zzz) throw <><x><y/></x></>;} else undefined;; }");
tryItOut("/*infloop*/while((function(q) { return q; }).call(<x><\ty/></x>(), eval(\"{}\",  /x/g ), !<><x><y/></x></>.__iterator__))L:if(this.__defineSetter__(\"prop\", function () { Math.pow } )) export *; else {M:while((<x/>) && 0){ } }");
tryItOut("/*infloop*/L:for(var __proto__; this.__defineGetter__(\"__iterator__\",  /x/g  @ *); <><zzz>__proto__ = *::*</zzz></>.__defineSetter__(\"constructor\", (\nthis))) var prop, __proto__;\nswitch(*) { case  /x/g : break;  }\n");
tryItOut("while((this.zzz.zzz) && 0)L: {<><x><y/></x></>; }");
tryItOut("L:if(prototype =  \"\" ) if((window.unwatch(\"__parent__\"))) { if (function (__noSuchMethod__)<y><z/></y>(<x/>)) {gc() }} else return;");
tryItOut("export *\nbreak M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in new [1,2,3,4].slice(this, 4.)) {var prototype; }");
tryItOut("if(<x/>) { if ( /x/g ) {throw <x><y/></x>;{} } else (#1=[#1#]);}");
tryItOut("if(( /x/ .__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__).@*)) gc() else  if ((-1.prototype)) let (__count__ = <><x><y/></x></>) { /*for..in*/for(let __count__ in (((1 for (x in [])))(1e+81)))export *; }");
tryItOut("if([15,16,17,18].filter(<><x><y/></x></>, (__count__ |=  /x/g ++))) /*infloop*/for(var default: break; (<x/>).applycase this: const constructor, __noSuchMethod__;break;  = this; *::*; #3={a:#3#}) throw <y><z/></y>; else  if (#0=[<><x><y/></x></>]) {/*infloop*/constructor, __proto__; }");
tryItOut("{/*\n*/export *;with({__iterator__:  '' })export constructor; }");
tryItOut("L: /*infloop*/M:for(let ({ prop: __proto__, __parent__: __noSuchMethod__ }) = eval(\"__noSuchMethod__.__iterator__ = function(id) { return id }\", this); *::*; new String(<><x><y/></x></>, false)) throw <x><y/></x>;");
tryItOut("3.141592653589793;");
tryItOut("L:with({__count__: (<y><z/></y>.hasOwnProperty(\"*\"))})export __iterator__");
tryItOut("do ; while((-true) && 0)\n");
tryItOut("let (__proto__ = [[]]) { false\nyield  /x/g ; }/*for..in*/for(let __proto__ in <x><y/></x>.__defineGetter__(\"__noSuchMethod__\", /a/gi)) {yield; }\n");
tryItOut("yield (prop = this)");
tryItOut("return *;\n\n");
tryItOut("/*for..in*/for(var [prop, __iterator__] = (new (<x><y/></x>)()).__count__ = (new false(<><x><y/></x></>)).__count__ in (([1,2,3,4].map)(<x/>, window))) if(<><x><y/></x></>) {var __proto__; } else  if (window) {throw  \"\" ; } else let __iterator__;");
tryItOut("return; const constructor;");
tryItOut("[15,16,17,18].some(function(y) { yield y; return __count__;; yield y; }, <><x><y/></x></>);");
tryItOut("M:with((__count__ = <x/>)){throw <x><y/></x>; }");
tryItOut("/*for..in*/for(({ __count__: __iterator__, __count__: __proto__ }) in ((function  prototype ([]) { gc() } )(((/a/gi).call(<x>\t<y/></x>, ))))){let prop; } const constructor;");
tryItOut("if(null) {const __proto__, __parent__ = 1.3; } else ");
tryItOut("\tlet (__parent__) { /*infloop*/do {gc() } while(0x99); }");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = (<x><y/></x>.yoyo(<x><y/></x>)) in undefined) ;");
tryItOut("/*infloop*/for(const ({ __iterator__: ({ __noSuchMethod__: [] }) }) = yield (__noSuchMethod__); ((function ([y]) { })[3/0.__defineSetter__(\"1e81 <<= 1e-81\", [1,2,3,4].map)]); <><{prototype}> </{prototype}></>) {yield null; const prototype;try { yield; } finally { let constructor; }  }");
tryItOut("throw <x><y/></x>;");
tryItOut("/*infloop*/for(({ prototype: prototype }) = this & *::*; try { /*infloop*/for((<y><z/></y> .@x:: <><x><y/></x></>); (yield [[1]])[this ^ false]; *) {{} }\n } catch(__proto__ if <><x><y/></x></>\n) { L:switch(this.__defineGetter__(\"__iterator__\", (1 for (x in []))))\f { case (continue ;.prototype): break; default: break; case __iterator__ = this.__defineSetter__(\"__noSuchMethod__\", /a/gi): case 3: var __noSuchMethod__;\nexport *;\ncase 1: break; break; case 0: break;  } } finally { return __parent__; } ; (yield ( /x/g .__lookupSetter__(\"__count__\"))).__proto__) {} const __noSuchMethod__;");
tryItOut("L: M:if(new (__count__ = 0.1)()) { if ((let (__proto__) prop = __noSuchMethod__, prop = <x><y/></x>)) } else /*infloop*/L:for(<x/>; <>\n<x><y/></x></>; 1e4) __iterator__");
tryItOut("L:do {export __parent__;return; } while((({ constructor: __parent__, __parent__: __count__ }) = (({}).__lookupGetter__)) && 0);");
tryItOut("let(__noSuchMethod__) { {}");
tryItOut("if(<><x><y/></x></>) { if (<x/>) {const __parent__ = <x><y/></x>, __noSuchMethod__ =  '' ;{} } else let constructor =  /x/ , {yield; }}");
tryItOut("{ }");
tryItOut("/*for..in*/for(var prototype in ((gc)(undefined.throw(((p={}, (p.z = <x><y/></x>)()))))))yield <><x><y/></x></>;");
tryItOut("M:do {return <>return;</>; } while((({__proto__: this})) && 0)\n");
tryItOut("yield <x><y/></x>;");
tryItOut("if(<><{prototype}>yyy</{prototype}></>) /*for..in*/for(let [__count__, constructor] = eval(\"0x99\", *) in *) return;");
tryItOut("/*for..in*/L:for((prototype( /x/ )) in ((gc)(1e-81.prop.__lookupSetter__(\"constructor\")))){if(function ([y]) { }) { if (window) {-0; }} else {yield ([]);;<><x><y/></x></>; }{} }");
tryItOut("/*for..in*/for(var __count__ = (1e+81) in <x/>) var constructor = -0\nwith(((({}).hasOwnProperty).call('fafafa'.replace(/a/g, (new Function(\"(<x><y/></x>);\"))), ))){throw ({}); }");
tryItOut("/*infloop*/while(<x/>.isPrototypeOf(window)){let __parent__, prototype = window;export *; }");
tryItOut("L: {( \"\" );export prop; }");
tryItOut("let (__noSuchMethod__ = null.hasOwnProperty(\"constructor\"), @foo) { {} }");
tryItOut("L:do {export __count__; } while((*::*.*) && 0);");
tryItOut("continue L");
tryItOut("export __count__;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for([prop, __noSuchMethod__] = (eval(\"<x><y/></x>\", <><x><y/></x\t></>)) <= prop.prototype = <x><y/></x> in undefined * <x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")) L: var __proto__ = __iterator__;");
tryItOut("L: throw this;");
tryItOut("__count__ = <x/>, prop = <><x><y/></x></>;/*\n*/\nyield function(id) { return id };");
tryItOut("/*infloop*/M:do if(@foo) {{} } else  if ((window += function(id) { return id })) {(__iterator__); } else {const __noSuchMethod__, __noSuchMethod__;prototype = null, __noSuchMethod__ = ({a1:1}); } while(<x/>([], (-0)).hasOwnProperty(\"constructor\"));");
tryItOut("Math.pow");
tryItOut("if([({a1:1}) for each (__proto__ in window)]) { if ([11,12,13,14].sort) switch\t(prototype.((new ((/a/gi).call)([,], __noSuchMethod__))[window])) { case (new (prototype)()): default: continue M\n } else /*for..in*/for(var constructor in (((/a/gi).call)(( '' .yoyo(*))))){throw ({a1:1});const prototype, __parent__; const __noSuchMethod__; }}");
tryItOut("/*for..in*/for(var __noSuchMethod__ in __proto__) {return;\f }");
tryItOut("/*for..in*/for(let __parent__ =  ''  | constructor.(function(id) { return id }) in yield ({a2:z2}).__defineSetter__(\"prototype\", /a/gi)) L:with(@foo)(<x><y/></x>).__defineSetter__");
tryItOut("switch(new (*)() %= ([15,16,17,18].map(window, 1e81))) { default: break;  }");
tryItOut("yield\n");
tryItOut("if([,]) {}");
tryItOut("while(( /x/g ) && 0){/*infloop*/L:while((new <x><y/></x> = 1e-81));/*infloop*/for(let __noSuchMethod__; (new new (({}).hasOwnProperty)(this, 1.2e3)((-1).unwatch(\"constructor\"), eval(\"undefined\", <x/*\n*/><y/></x>))); var prop, prop = -0;) {let ; } }");
tryItOut("/*for..in*/for(const __iterator__ in ((function  __parent__ () { {} } )(this))){return __noSuchMethod__;return []; }");
tryItOut("yield (new (<><x><y/></x></>)());gc() const __count__;");
tryItOut("\fif(<x><y/></x>) ; else  if (<><x><y/></x></>) {window; }");
tryItOut("switch(__noSuchMethod__) { case 3: break; case 3: *::*default: var __noSuchMethod__, __count__ = <x><y/></x>;break; var __iterator__, __parent__;break; break; break; let (__iterator__ = window, prop = 3) { break L; } }");
tryItOut("if(eval(\"break ;\", ((function  __parent__ (__parent__) { yield  ''  } )(<\tx><y/></x>, undefined)))) ([z1]); else break ;");
tryItOut("gc()\n");
tryItOut("if(({}).__lookupGetter__) {return;if((-0)) {(true);gc() } else  if (constructor) yield true; }if(this.zzz.zzz) break L; else  if (~1e+81 != function ([y]) { }++) {<x><y/></x> }");
tryItOut("/*for..in*/for(const (prop) in (new (033)())((({__iterator__:  /x/ })))) const prop, constructor = undefined\nreturn;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <x><y/></x>) {'export *; }");
tryItOut("M:if(this(this, <><x><y/></x></>)) { if ( /x/ .__defineSetter__(\"__parent__\", (function  __proto__ ()null\t).apply)) return;} else {__noSuchMethod__ = __noSuchMethod__; }");
tryItOut("return;");
tryItOut("return @foo\n/*infloop*/for(<x><y/></x>; *; -1) {return __iterator__;var __noSuchMethod__; }\n:switch(\f[11,12,13,14].some) { default: Math.powbreak; break;  }\n");
tryItOut(";return window;");
tryItOut("(<><x><y/></x></>); const __count__;");
tryItOut("/*for..in*/for([__proto__, __proto__] = Function([,,]) in  \"\"  ===  /x/ ) {const __iterator__ = #3={a:#3#};(<x><y/></x>); }");
tryItOut("(true);export *\n/*infloop*/do {export __iterator__; } while(M:if(window) const /*\n*/__parent__ = @foo, __parent__ =  \"\" ; else export *);");
tryItOut("if(yield void false.@foo) function(y) { yield y; __proto__ = <x/>, __count__ = true;; yield y; } const constructor; else  if ([1,,]) {if(0) { if (__noSuchMethod__) {return;(arguments); }} else const __parent__ = (-1), ;{break M; } }");
tryItOut("if(([] = (@foo).call(<x><y/></x>, ))[(new (arguments)(window, <x/>))]) { if ((#0=[@foo])) /*\n*/gc() else {gc()if(__iterator__.__proto__ = <x><y/></\rx>) { if (prop) \n} else export __iterator__; }}");
tryItOut("/*infloop*/for(((yield ((uneval(this))))); __proto__ || #1#; new Function) \t");
tryItOut("this.zzz.zzz;");
tryItOut("if(<x><y/></x> == constructor =  { return (-0) } ) { if () /*infloop*/while( '' );} else {{}if(true) {throw <><x><y/></x></>; } else  if (null) {return;var __count__ = window; } }");
tryItOut("for(let y in []);");
tryItOut("L: {prototype#1=[#1#] }");
tryItOut("let (__count__ = ( /x/g  < <><x><y/></x></>.valueOf(\"number\")), ({ <x/>: constructor, prop: [] })) {  /x/ ;\nexport __parent__;\n }");
tryItOut("");
tryItOut("/*for..in*/for(var __parent__ = * in <y><z/></y>) yield <><x><y/></x></>;");
tryItOut("switch(new (__noSuchMethod__) = (;.hasOwnProperty(\"__parent__\")[<x><y/></x>.(window)])(((((function ()prototype).apply).call(__proto__, ))--)) *= (true %= this)) { case eval(\"*::* -= ({ prop: prop, prototype: __noSuchMethod__ }) = ({ __proto__: __count__ })\", __proto__): function(q) { return q; }break; break;  }");
tryItOut("L:with(#1#)const __iterator__;");
tryItOut("/*for..in*/for(__noSuchMethod__ = new Array() in <x><y/></x> !== <y><z/></y>) {switch(<><x><y/></x></>) { default: case true: gc()case 0: break; case 5: break; case 5: break; case 3.141592653589793: continue L;case null: ;case 7: let constructor =  /x/g ;break; case 5.0000000000000000000000: continue ;case 7: case 9: break;  }continue ; }");
tryItOut("throw StopIteration;");
tryItOut("if((eval(\"({prototype: <ccc:ddd></ccc:ddd> })\", this.zzz.zzz <<= [z1] if (<>\t<x><y/></x></>)))) throw window ? <x/> : null//h\n; else  if (<></>) (*::*); else ");
tryItOut("do {; } while((#1=[ /x/ ]) && 0);");
tryItOut("/*infloop*/M:for(prototype;  /* Comment */\n{} >>> *::*.yoyo(__noSuchMethod__); __noSuchMethod__) /*infloop*/while((<x><y/></x>\n))/*for..in*/for(let constructor = false in 1e4) function  __proto__ (prototype) { return <y><z/></y> } ");
tryItOut("this.zzz.zzz;");
tryItOut("if((uneval( '' ))) {yield;return; } else  if ([<><x><y/></x></>].some(function(y) { yield y; __noSuchMethod__;; yield y; })) continue M\n");
tryItOut("if(*constructor");
tryItOut("do ; while((([__count__].map(/a/gi))) && 0);");
tryItOut("{gc()var __count__, __parent__; }");
tryItOut("/*for..in*/for(window.__count__ in prototype) {let __parent__;return; }");
tryItOut("/*infloop*/L:for(__parent__; 1e-81;  /x/g ) <x><y/></x>;");
tryItOut("return this\nconst __parent__ = @foo, __noSuchMethod__ =  '' ;");
tryItOut("with((!<><x><y/></x></>.*)){L: {throw true;; } }");
tryItOut("/*infloop*/L:while(*){export prototype; }\nwith({}) { for(let y in [5,6,7,8]) if(this) { } } \n");
tryItOut("yield;\n\n");
tryItOut("/*infloop*/M:for(let [({ constructor: prop, __proto__: ({ __noSuchMethod__: __count__ }) })] = [constructor] = <y><z/></y>; (this)[prop]; __count__.__parent__ setter= Math.sin <= /a/gi .@*:: (#1=[#1#].yoyo( \"\" ))) {yield constructor;if(-0) { if (<y><z/></y>) {break L;export *; } else export __proto__;} }");
tryItOut("throw (-1);/*infloop*/for(({}).__lookupGetter__(); (<x/>); @foo.__noSuchMethod__) ( \"\" );");
tryItOut("L:do ; while(([this.__defineGetter__(\"prototype\", /a/gi) for each (__iterator__ in <x/>) if (0.1)]) && 0);");
tryItOut(";");
tryItOut("/*infloop*/L:do {throw constructor;export *; } while((__count__ = constructor:  /x/g .__defineGetter__(\"__proto__\", function(y) { yield y; export *;; yield y; })));");
tryItOut("if((new Function(\"export *;\"))) export *; else  if (delete constructor) if(__parent__ = 1.3, __noSuchMethod__ = <x><y/></x> = [15,16,17,18].filter([1,2,3,4].map, <y><z/></y>)) { if (this) (__parent__); else __proto__;}");
tryItOut("L: var prototype = 1.3, constructor;");
tryItOut("/*for..in*/for([__iterator__, __proto__] = prop = 1e+81 in <x><y/></x>) {yield false; }\n");
tryItOut("/*infloop*/for(var __noSuchMethod__; [] = __noSuchMethod__; constructor.(* instanceof <x/>)(continue , prototype)) {return; }");
tryItOut("/*for..in*/L:for(__proto__ in ((function(q) { return q; })((new (*.__noSuchMethod__)(new *::*)))))/*for..in*/for(const __parent__ in (((new Function(\"const __noSuchMethod__ = true, __noSuchMethod__;\")))(__iterator__))){continue M; }");
tryItOut("let (__count__, __iterator__ = undefined) { {} }");
tryItOut("/*for..in*/for(var prototype in ((Math.pow)(true)))yield <>[,];</>;gc()");
tryItOut("/*for..in*/M:for(let __parent__ in <y><z/></y>) {break ;return <y><z/></y>; }");
tryItOut("/*for..in*/L:for(const ( '' )(*::*) in (((Math.pow).call)({}()))){;break ; }");
tryItOut("let (prop = (<><x><y/></x></> ? <><x><y/></x></> :  /x/g )) { export *; }");
tryItOut("[1]");
tryItOut("__noSuchMethod__ = prototype\n");
tryItOut("L: continue L;");
tryItOut("gc()");
tryItOut("{/*for..in*/for(const prototype in null) {throw *;(<x><y/></x>); }var prop; }");
tryItOut("<x/>.__noSuchMethod__ = <x><y/></x>++catch(constructor) { (<x><y/></x>); } finally { @foo } ");
tryItOut("(<x><y/></x>)\ncontinue L;");
tryItOut("let (__proto__ = window) { break M; }");
tryItOut("/*infloop*/for(__parent__; /*\n*/<x><y/></x>; *::*) {var __proto__, __iterator__; }");
tryItOut("/*infloop*/for(__iterator__; (<x><y/></x> &=  \"\" ); (__iterator__.@foo)) return null; const __noSuchMethod__;");
tryItOut("default: break; ");
tryItOut("M:if('fafafa'.replace(/a/g, ({}).__lookupGetter__)) {export *;\n{}\neval } else {/*for..in*/L:for([prop, __proto__] = <><x><y/></x></> in undefined) yield <><x><y/></x></>;(__count__); }");
tryItOut("export *;\f");
tryItOut("/*infloop*/M:for(let prototype = __count__; __parent__.__parent__ = (-1).*; window[<y><z/></y>]) /*infloop*/L:for([z1,,]; return;;  /x/g ) yield true;");
tryItOut("do return; while((<x><y/></x>.throw(true)) && 0);");
tryItOut("/*infloop*/for(let __count__; (__count__ = <><x><y/></x></>;)\f.__defineSetter__(\"__count__\", (new Function(\"let(__parent__ = <><x><y/></x></>) { export *;\"))); <x><y/></x> ? false.__iterator__ : __parent__ =  /x/ ) /*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in __count__) {continue L;__count__; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var prototype = 033 in <><x><y/></x></>) {;return; }");
tryItOut("L: {export *;constructor = <><x><y/></x></>, prototype = @foo; }");
tryItOut("if(new  /x/ (<x><y/></x>//h\n)) { if ([@foo >> <x/>]) /*for..in*/for(const function::prototype in ((function  prop () { yield null } )(<x><y/></x>)))export *;} else {break ;throw window; }");
tryItOut(";");
tryItOut("return;");
tryItOut("M:do {__iterator__; } while((((this)\t[@foo])) && 0);");
tryItOut("const __count__ = <><x><y/></x></>;do return  /x/ ; while(( '' ) && 0);");
tryItOut("/*for..in*///h\nfor(var __iterator__ = constructor in <x/>.__iterator__) {yield this; }");
tryItOut("/*for..in*/L:for(const yield in ((prop.(false))(*())))/*infloop*/do {do {throw *; } while((<><x><y/></x></> >>= __noSuchMethod__) && 0); } while(true);");
tryItOut("M:if([1]) { if (@foo) {throw #1=[#1#];yield [1,2,3,4].map; }} else (<x/>)\n");
tryItOut("let(({ : constructor, prototype: __count__ })) { let(__parent__ = <x><y/></x>) ((function(){{}})());");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = ({__parent__: yield undefined, case yield undefined: default: break; case <ccc:ddd><x><y/></x><ccc:ddd></ccc:ddd></ccc:ddd>: break; case [[]]: with(*){{}continue M; }: <x><y/></x>.constructor = window })) { try { gc } catch(__iterator__ if false) { yield *; } catch(__count__) { ; } finally { throw *::*; } ");
tryItOut("if((__parent__ = <><x><y/></x></>)) { if ([#1=[#1#] for (__proto__ in __count__)]) let (__parent__) {  }} else (*::*);");
tryItOut("/*for..in*/for(var ((eval(\"<x><y/></x>.(this)\", --@foo .@x:: (--3/0))))() in ((gc)([11,12,13,14].sort)))for(let y in [5,6,7,8]) const __noSuchMethod__ =  \"\" , __parent__;");
tryItOut("__proto__ = constructor.__proto__;");
tryItOut("M:switch(({__noSuchMethod__: <x><y/></x>})) { case yield <><x><y/></x></>: if([1]) { if (prop) {throw prototype;yield; } else var __proto__, __count__;}case __noSuchMethod__ = <x/>.eval(new arguments([1,,])): throw true;break; break; default: var prototype = __noSuchMethod__, function::__noSuchMethod__ =  \"\" ;break;  }");
tryItOut("prop.__noSuchMethod__ = __proto__;");
tryItOut("return;");
tryItOut("/*infloop*/L:do {export __iterator__;export *; } while((p={}, (p.z = <><x><y/></x></>)()));");
tryItOut("export __proto__;");
tryItOut("try { with({}) { with({}) ; }  } finally { __count__ = __proto__; } ");
tryItOut("if(let (constructor) <x/>.@foo) { if (\t '' ) {__parent__ = prototype; }} else M:if(\n<><x><y/></x></>) {} else yield <x/>;");
tryItOut("{}");
tryItOut("(*::*);");
tryItOut("let([__noSuchMethod__, , prop.x::__count__, ]) { return __parent__;");
tryItOut("with({}) { with({}) { yield; }  } ");
tryItOut("L: {/*for..in*/for(let [\t__proto__, prop] =  /x/g  in .2) return;(this); }");
tryItOut("yield <><x><y/></x></\f>\n");
tryItOut("if(!arguments) {break M; } else {export *; }");
tryItOut("do return; while(((prop = <><x><y/></x></>)) && 0);");
tryItOut("/*infloop*/for(yield <y><z/></y>; yield <y><z/></y>; constructor.__iterator__ setter= function(y) { yield y; ; yield y; }) {(0/0)\n }");
tryItOut("/*infloop*/for(var __noSuchMethod__.__iterator__ = ([<><x><y/></x></> <<= 033].sort(Math.sin)); ([[]] = (uneval(<x/>)) >>>=[15,16,17,18].sort((1 for (x in [])), {})); *) {const __noSuchMethod__, constructor = this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((undefined)((new (function(y) { yield y; export *;; yield y; })(@foo, 1.2e3))) in [<y><z/></y>]) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in constructor) ");
tryItOut("with({}) { export __proto__; } ");
tryItOut("{ }");
tryItOut("with({__count__: __iterator__ = ({__count__: window, __iterator__: @foo })})gc");
tryItOut("L:if([15,16,17,18].map( /* Comment */(p={}, (p.z = false)()), eval(\"constructor = <x/>, constructor;\", eval(\"( \\\"\\\" );\", (({__parent__ getter: [1,2,3,4].slice\t })))))) { if (case 2: case 0: let constructor, constructor;break; case 1: var __parent__, __iterator__ = this;break; __iterator__, prototype;break; default: var constructor, __count__;break; case 7: break; yield;yield __parent__;break; break; case window: (prop);break; case 8: throw __iterator__;case <x><y/></x>: export *;break; break; return <y><z/></y>; = <x/>) M:with({__noSuchMethod__: (__count__+=*)})@foo;} else if((prop = 1.2e3.prototype = (( '' )(null))) >>> let ( = [z1,,]) getter) {/*for..in*/for(var __count__ in *) {} } else  if ([1].__proto__) <\fccc:ddd>yyy</ccc:ddd> else {; }");
tryItOut("if((5.0000000000000000000000 *= <x><y/></x>) ^= (<x/>.watch(\"__count__\", (__proto__).__defineSetter__))) {/*for..in*/L:for(let [__noSuchMethod__, __parent__] = *::* in this) return <x><y/></x>;export constructor; } else  if ([,,]) yield <><x><y/></x></>;");
tryItOut("return @foo\n;");
tryItOut("if(__iterator__ = undefined.__defineGetter__(\"prop\", [1,2,3,4].slice)) { if (this.__defineSetter__(\"prototype\", <x/>.eval(<y><z/></y>).eval(new (<x/>)()()) getter: Math.pow)) /*for..in*/for(var __parent__ = (uneval( /x/g )) in <><x><y/></x></>) let prototype, __count__; else {break L;yield; }}");
tryItOut("gc()\n");
tryItOut("if(--#1=[#1#]) {\n } else  if (this.__defineSetter__(\"prop\", Function)) return [z1]; else {return this;yield __proto__; }");
tryItOut("L:switch(new let (__proto__, __noSuchMethod__) function(id) { return id }.yoyo(this)) { default: break; case (-1).propertyIsEnumerable(\"__noSuchMethod__\"):  }");
tryItOut("let (constructor, __proto__) { export __parent__; }");
tryItOut("let (({ prototype: ({ __count__: __proto__ }), [, [, , __proto__], ]: ({ __iterator__: [, , [({ __noSuchMethod__: __parent__ }), , __iterator__]] }) }) = ({__proto__: true ? <><x><y/></x></> :  \"\" })) { __iterator__ = function ([y]) { }; }");
tryItOut("if(0/0 for each (__parent__ in ) + <><x><y/></x></>.valueOf(\"number\")) {return;var __proto__; } else  if (__parent__ = this) {throw __noSuchMethod__;let prototype; }");
tryItOut("while((null) && 0){let __proto__ =  \"\" ; }[1,2,3,4].map['prop'] = __parent__;");
tryItOut("const __noSuchMethod__ = *, __parent__");
tryItOut("with({}) { {return;return; } } ");
tryItOut("with({__count__: <><x><y/></\nx></>}){yield ({a1:1});eval }");
tryItOut("with({prototype: []})/*for..in*/for(let prototype in <x/>) @foo;");
tryItOut("L: /*for..in*/for(const <x><y/></x>(<y><z/></y>, 4.) in ((({}).hasOwnProperty)('fafafa'.replace(/a/g, {}))))gc()");
tryItOut("export *;");
tryItOut("/*infloop*/while((!prototype = <x/>)){var gc(), __noSuchMethod__;export *; }");
