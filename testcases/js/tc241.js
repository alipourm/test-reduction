tryItOut("/*infloop*/for(const ({ __iterator__: [prop] }) = 3; new case 0: {true, [[1]]null\nyield  \"\" ; }var prop = <><x><y/></x></>;/*infloop*/L\t:for(@foo; <x/>;  /x/ ) {const __count__; }if((( /x/  for each (__proto__ in function::__parent__)))) { if (({prop: <y><z/></y>})) {export __proto__; }\r else {__count__; }}break; default: /*for..in*/\tfor(new Function =  /x/g  in <x><y/></x>) {var constructor, constructor; }break; case this.__defineGetter__(\"__noSuchMethod__\", eval): (); <><><ccc:ddd> </ccc:ddd></></>) while((<><x><y/></x></>) && 0){throw this;return default: break; gc(); }");
tryItOut("if( '' .valueOf(\"number\")) {\t if (4.) {;yield; } else { }}\n{( /x/ );; }\n");
tryItOut("/*for..in*/for(var prototype = this.__defineGetter__(\"__parent__\", /a/gi) in ({a1:1})) {/*infloop*/for(let __parent__ = prop; <x/>; @foo) gc() }");
tryItOut("return;");
tryItOut("/*infloop*/for(prototype = __iterator__; ({a2:z2}) :: 1e-81; (((1 for (x in []))).apply)) export *;");
tryItOut("{{let  = <><x><y/></x></>, __count__; }{switch(__proto__.(@foo)) { case (@foo)():  }if(\r__iterator__ = prototype\t) {Math.sinyield <y><z/></y>; } } }");
tryItOut("/*infloop*/while(constructor)export *;");
tryItOut("with({({ __proto__: [, prop, ] }): #1=[#1#].__lookupGetter__(\"prop\").propertyIsEnumerable(\"__count__(<><x><y/></x></>)\")}){gc()L: {{} } }");
tryItOut("let(__proto__ = prop+=__noSuchMethod__) ((function(){this.zzz.zzz;})());");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(prop)return;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = <><bbb xmlns:ccc=\"(<x><y/></x> ? undefined :  \"\" )\"><ccc:eee></ccc:eee></bbb></> in <><x><y/></x></>) M:if(__parent__) \f{export *; }");
tryItOut("/*for..in*/for(var [prototype, __noSuchMethod__] = (function  constructor (constructor) { yield yield } )(this.__defineGetter__(\"prototype\", function  __count__ (__proto__, prop) { yield <x/> } )) in <x><y/></x>) {yield <><x><y/></x></>;return *::*; }");
tryItOut("");
tryItOut("const __iterator__, __noSuchMethod__;");
tryItOut("const __count__, __proto__ =  '' \n/*for..in*/L:for(var __noSuchMethod__ in 1e81) {(<x><y/></x>);{} }");
tryItOut("/*infloop*/while(((<x><y/></x> .@x:: *::*)))throw <><x><y/></x></>;");
tryItOut("__proto__ = __count__;");
tryItOut("/*infloop*/do {yield  '' ; } while((this.zzz.zzz));");
tryItOut("/*for..in*/for(constructor = this.zzz.zzz in ) {throw undefined\n }");
tryItOut("switch(__proto__.(prop)) { default: case 8: /*infloop*/L:for(var [prototype, [, constructor], ] = [<><x><y/></x></>].map(<x/>); (<ccc:ddd><!--yy--></ccc:ddd>.( )); <xxx {constructor}={window} />) while((this) && 0){const __iterator__, __proto__; }break; case 8: throw this; }");
tryItOut("/*for..in*/L:for(var __parent__ in (((Math.pow).apply)(__iterator__(<x/>)|=#1=[#1#] in  \"\" )))let __parent__, prototype;");
tryItOut("{const prop = #3={a:#3#}, __noSuchMethod__; }");
tryItOut("{{}return; }");
tryItOut("constructor(<x><y/></x>) = __proto__;");
tryItOut("L: __parent__;return;(<x/>);");
tryItOut("gc()");
tryItOut("/*for..in*/for(var constructor = ([window]) in prop) export *; const __noSuchMethod__; const __iterator__;");
tryItOut("(window)(<><x><y/></x></>) = constructor;");
tryItOut("export __count__");
tryItOut("L: /*infloop*/while((prototype.getter-=[z1,,]\n)){export *; }\nif([1,,] ? (-1) : function ([y]) { }) {; } else  if (@foo) {[1,,] } const __count__;");
tryItOut("/*infloop*/for(var prototype = (({ set __proto__ prototype () { throw <x/>; } , __iterator__:  })); ( /x/g .isPrototypeOf(3.141592653589793).__noSuchMethod__).__defineGetter__(\"({ prototype: ({ constructor: __proto__, prototype: __iterator__ }) })\", [1,2,3,4].slice); ((Math.pow).call((prototype = new Array(0x99)), <><x><y/></x></> = true.eval((prototype = [z1])), ([15,16,17,18].filter([1,2,3,4].map, <y><z/></y>).__lookupSetter__(\"prop\"\f))))) if(<><x><y/></x></>) { if (__parent__) {(3.141592653589793);false; } else {\fyield <><x><y/></x></>;<x><y/></x>; }}");
tryItOut("return;");
tryItOut("{}");
tryItOut("do {/*for..in*/M:for(let prototype = ([1,,])[<x><y/></x>] in *::*) <y><z/></y>;/*for..in*/for(var __parent__ in ((<x><y/></x>)(<x><y/></x>)))return; } while((prop.prototype) && 0);");
tryItOut("switch((uneval(<x><y/></x> === window))) { case 2: {; } }");
tryItOut("const prototype, __iterator__ = [[1]]\nlet __noSuchMethod__;");
tryItOut("with(function ([y]) { }.constructor = this){with({__noSuchMethod__: undefined}){let prototype; } }");
tryItOut("{yield []\nlet __iterator__ = @foo, __noSuchMethod__ = null; }");
tryItOut("/*for..in*/for(const __proto__ = yield (uneval(__noSuchMethod__)) in <y><z/></y>) /*infloop*/L:for(//h\nlet __parent__ = __noSuchMethod__.prototype setter= function  __iterator__ () { throw (-1); } ; <xxx {__noSuchMethod__}={<><x><y/></x></>} />; (new  /x/g )) /*infloop*/M:for(<x><y/></x>;  '' ; -0) {prop; }");
tryItOut("switch(window) { case 7: yield;break;  }");
tryItOut(" const __iterator__;");
tryItOut("let(constructor = [<x><y/></x>].map(Math.sin)) { let(__parent__ = -3/0, prop = <x/>) { continue ;");
tryItOut("/*for..in*/L:for(const prototype .@ window['constructor'] in -0 instanceof null) return window;\n/*for..in*/for(const prototype in (<y><z/></y>)[<x><y/></*\n*//x>]) {;return -0; }\n");
tryItOut("/*infloop*/do {([]).watch } while(window .@ true);");
tryItOut("M:switch(prototype = yield (-0).yoyo(__count__) >>> *::*.valueOf(\"number\")) { default: break; case 0: break; __noSuchMethod__ = ({a1:1}), prototypebreak;  }");
tryItOut("if((undefined).call(prototype.__proto__ = [z1,,], [[1]], this)) { if (([1,2,3,4].map) > prototype = __proto__: ({a1:1})) {\n const prototype; }} else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in -3/0) yield 033;continue ; }return <x><y/></x>; }");
tryItOut("if(<x><y/></x>.__defineGetter__(\"__proto__\"*::* = arguments, )) { if (new <x><y/></x>(constructor)) yield; else { }}");
tryItOut("gc()");
tryItOut("switch(({ get __parent__() { yield -1 }  })) { default: if(__proto__) constructor = *; else {{} }case 1: return;break;  }");
tryItOut("/*infloop*/M:for(let __proto__ = (throw 3.141592653589793); false; ([,,z1])[false]) {var __proto__ = (function ([y]) { })(); } const __parent__;");
tryItOut("/*for..in*/for(const __proto__ =  ''  in window) {}");
tryItOut("return export *;");
tryItOut("L: export *\n");
tryItOut("var __noSuchMethod__ = __parent__, __proto__ = window;");
tryItOut("while(((Number(prop = <x/>, <x><y/></x>))) && 0)(<x/>);");
tryItOut("L:with({__iterator__: <>try { throw *; } catch(__parent__) { const __noSuchMethod__ = *::*; } </>.watch(\"__noSuchMethod__\", Math.sin) | ((<x/>)[null])}){export *;yield undefined; }");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] =  /x/g  === <x/>[(uneval((prop.prop)))] in  /x/g .__proto__) {/*for..in*/for(__parent__ in <x/>) yield; }");
tryItOut("if((({ get __proto__(__parent__)<x><y/></x> }))) {Math.powexport *; } else {yield *::*;break L; }");
tryItOut("");
tryItOut("/*infloop*/do {} while( /x/g );");
tryItOut("L: {__count__ = false, prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __parent__: __noSuchMethod__ }) in __parent__) export *;");
tryItOut("return;");
tryItOut("{(__noSuchMethod__);/*for..in*/for(let __iterator__ in <>< {export *;; } y/> yyy < function::__iterator__ = new /a/gi(<x><y/></x>, <y><z/></y>) /xget: (let (constructor, __parent__) __count__) >) getter, __noSuchMethod__; }");
tryItOut("switch(constructor) { case 5: truebreak; case 5: case 3: return <><x><y/></\fx></>;break; case __count__: break; var __count__ = {}, prop;break; return;case 9: break; case 4: break; break;  }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((this.zzz.zzz)(#3={a:#3#}(<><x><y/></x></>, <><x><y/></x></>)))){eval }");
tryItOut("L:with(#0=({prototype: undefined.__lookupGetter__(\"__count__\")})){if((prototype+=*)) return __proto__; else {<x><y/></x>;var __parent__ = false; } }");
tryItOut("with({__iterator__: (this.__defineSetter__(\"prop\", [1,2,3,4].slice))})yield;");
tryItOut("if(eval(\"<y><z/></y>.*\", true % this != 0.1.eval( /x/ ))) { if (__parent__ = [1,,]) yield; else {}}\n{{<x><y/></x>; } }\n");
tryItOut("L: {/*for..in*/L:for(let __count__ = constructor.__proto__ = <><x><y/></x></> in undefined) {export __noSuchMethod__; } }");
tryItOut("");
tryItOut("return <y><z/></y>\n");
tryItOut("let(__proto__ = let (prop) <x><y/></x>.watch(\"__parent__\", ({}).hasOwnProperty), function::constructor = <>({__iterator__ setter: Math.pow })</>) { let(prototype, ({ __parent__: [] }) = constructor = __noSuchMethod__) ((function(){return;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in Exception()) {({}).__lookupGetter__yield __count__\n; }\n/*for..in*/for([__proto__, __iterator__] = <><x><y/><\n/x></> in <x/>) let __iterator__ = prototype, __proto__; const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let  in new Function.valueOf(\"number\")++) {if((prototype)) { if (true.isPrototypeOf(__parent__)) throw arguments;} else {var constructor = false, __parent__; }export __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(new ([,,z1])(); __parent__; ( /x/g  :: <><x><y/></x></>)) {__iterator__;gc() }");
tryItOut("do {export *; } while((1e-81) && 0);");
tryItOut("/*infloop*/for(let __parent__ = [,,] = export *; yield prop = #1#; this) yield;");
tryItOut("function::__parent__ = <x><y/></x>");
tryItOut("with({__parent__: undefined[#1=[#1#]].yoyo((yield this))})/*infloop*/while(arguments){(1 for (x in []))([[]]); }");
tryItOut("if(('fafafa'.replace(/a/g, function(y) { yield y; this;//h\n; yield y; }) for each (__count__ in <><x></*\n*/y/></x></>) if (false)).valueOf(\"number\")) { if ((new [1,2,3,4].slice(void <x><y/></x>))) {var constructor = @foo, __noSuchMethod__ = __iterator__;yield; } else {yield false;const __iterator__ =  /x/ , __parent__; }}");
tryItOut("switch(false) { case 4: continue ; }");
tryItOut("return");
tryItOut("return (this.__defineGetter__(\"constructor\", (new Function(\"gc()\"))));");
tryItOut("let prop;");
tryItOut("yield __parent__;");
tryItOut("if(((p={}, (p.z = <x><y/></x>)())) != new (eval)()) export constructor; else  if (((__noSuchMethod__ =  /x/g ).__proto__)) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <><x><y/></x></>) return <><x><y/></x></>; }");
tryItOut("prop\nlet __noSuchMethod__ = .2;\n");
tryItOut("if(((((<x><y/></x>).watch).call(@foo, <x><y/></x>, (-1))))[new (function  __noSuchMethod__ (prop, constructor) { yield [,,] } )( \"\" , null)]) if(this) { if (3) (window);} else let let = [1], __proto__ =  \"\" ; else  if ([prop.__iterator__ = #1=[window][(++1e-81.eval())] for each (__noSuchMethod__ in function::prop) if (window == __proto__)]) var constructor, __parent__ = <x><y/></x>;");
tryItOut("/*for..in*/for(var __parent__ in ((function(y) { yield y; yield <y><z/></y>;; yield y; })(<{constructor}></{constructor}>.(window -= *)))){this }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("export prototype;");
tryItOut("M:if(__noSuchMethod__ instanceof window *= typeof *) {function  __noSuchMethod__ (__iterator__) { return [[1]] } (__count__); } else  if ( /x/ ) {__proto__, __noSuchMethod__ =  \"\" ;yield this; } else export *;");
tryItOut("{}");
tryItOut("/*for..in*/for(var <x><y/></x>.isPrototypeOf( /x/ ) in ((gc)((__iterator__ >>> x::prop+=this))))function(y) { yield y; delete (+0/0); yield y; }");
tryItOut("__iterator__\n;\n");
tryItOut("*;const __count__, __noSuchMethod__ =  \"\" ;");
tryItOut("if() {function  prototype (__count__) { {} } L: {continue\f ; } }");
tryItOut("return __count__");
tryItOut("if(*::* & @foo) { if (false ::  '' ) {} else {(.2);break ; }}\n\nexport *;");
tryItOut("do break ; while(([__count__.constructor = false if (<y><z/></y>)]) && 0);");
tryItOut("return;\nthrow *;\n\n__parent__ = __noSuchMethod__;\n");
tryItOut("this; const __iterator__;");
tryItOut("[prop, , [constructor, ({ __proto__: constructor }), [prototype, , __iterator__, __count__, ], , __proto__], ] = constructor;");
tryItOut("if(( /* Comment */5.0000000000000000000000.prop.__proto__ = constructor(constructor)+=(yield <x/>)) &= (--+<y><z/></y>)) {if(RangeError()) {gc()gc() } else  if (*::*.yoyo(true)) {(true); } } else let (__noSuchMethod__ = window) { /*for..in*/M:for(var prototype in prototype) {export constructor; } }");
tryItOut("/*infloop*/default: {yield __count__ = <y><z/></y>;throw *::*; }break; break; ");
tryItOut("with({}) return;");
tryItOut("let(prop = prototype, prototype = *) ((function(){throw <x/>;})());");
tryItOut("/*for..in*/L:for(__parent__ in <><x><y/></x></>(3.141592653589793).propertyIsEnumerable(\"__parent__\")) throw constructor;");
tryItOut("do { } while((__proto__ = <x/>) && 0);");
tryItOut("L:with(<><x><y/></x></>.__count__)/*infloop*/for(let __count__; (<x><y/></x> + <y><z/></y>); __noSuchMethod__-=this) {constructor: new (function () { yield window } )() }");
tryItOut("/*for..in*/for(let [] = ({__count__: <x><y/></x>.(<x><y/></x>)}) in .) {__iterator__ = null;__proto__ = -0; }");
tryItOut("/*infloop*/for(this; ({__iterator__: window}); ({__noSuchMethod__ setter: eval, prop: -0 })) {gc()const __parent__; }");
tryItOut("do {(@foo);yield prop; } while((__proto__|=this) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var prop = this.__defineSetter__(\"__proto__\", Math.pow).hasOwnProperty(\"__noSuchMethod__\") in (let (prototype) (new (*)())((yield <x/>), constructor).__proto__)) prototype = function (__noSuchMethod__) { (new Function(\"export *;\")) } (window, 4.)");
tryItOut("{/*for..in*/for(const constructor = (<x><y/></x>.propertyIsEnumerable(\"__proto__\"))\n in [15,16,17,18].map(([1,2,3,4].map).apply, <x><y/></x>)) let __iterator__, __count__ = @foo; }");
tryItOut("while(((([window for each (__proto__ in __iterator__)]) | (eval(\"var delete;\", <><x><y/></x></>)))) && 0){let __iterator__, __iterator__; }");
tryItOut("yield --({});");
tryItOut("if([[z1,,]].sort([1,2,3,4].map)) {/*infloop*/for(const constructor; this; <x><y/></x>) { } }");
tryItOut("if(__count__ = <ccc:ddd>default: return;export prop;break L;throw __parent__;break; case *::*: break; case [[]]: case 2: var constructor, __parent__ = @foo;case prop: break; break; <ccc:ddd></ccc:ddd></ccc:ddd>.((yield <y><z/></y>))) {if((( /x/g )(prop, <x><y/></x>))) { if (new String(false)) {;let __parent__ = window; }} else {{yield false; } }with({}) prototype = undefined, __iterator__; } else ;");
tryItOut("gc() const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in true) {; }");
tryItOut("yield  /x/g ; const __iterator__;");
tryItOut("/*infloop*/for(const __proto__( /x/g ) = 'fafafa'.replace(/a/g, (<x/>)); (yield <><x><y/></x></>); function  __proto__ (({ let: __noSuchMethod__ }), function::prop) { throw window; } ((<x><y/></x>++)).*) let (prototype = ({}).hasOwnProperty, __iterator__ = new (__iterator__)()) { break M; }");
tryItOut("yield (function ([y]) { })();\n\n const __iterator__;");
tryItOut("with({}) { yield ([,].__iterator__ = <x><y/></x>); } ");
tryItOut("export __noSuchMethod__;yield;");
tryItOut("/*for..in*/M:for(let __proto__ = 1e-81 in __proto__) continue ;");
tryItOut("if(<>((prop.constructor).propertyIsEnumerable(\"(yield (<x><y/></x>++)) >>= M:if(4.) { if (constructor =  \\\"\\\" ) var __noSuchMethod__ = 1.3, __iterator__;} else yield;.prototype\"))</>) {yield ({a2:z2});for(let y in []); }");
tryItOut("/*for..in*/for(let prototype = [1,,].propertyIsEnumerable(\"constructor\") in (false)(<><x><y/></x></>)) {var __count__, prototype; }");
tryItOut("try { let(constructor, __proto__) { with({}) return (function ([y]) { }.__defineGetter__(\"__count__\", Math.sin)); } catch(__iterator__ if ((uneval( \"\" )) ? ([<x/> for each (__iterator__ in <y><z/></y>)]) : eval(\"\\flet __count__, __parent__ = __noSuchMethod__ = 1.2e3;\", <x><y/></x>))) { for(let y in [5,6,7,8]) with({}) for(let y in []); } ");
tryItOut("if(<><bbb xmlns:ccc=\"__parent__\"><ccc:eee></ccc:eee></bbb></>) = else  if (__iterator__ = *::*.__defineSetter__(\"__proto__\", *::*)) { } else {throw 033; }\nvar x::prototype;");
tryItOut("if(yield <x><y/></x>) function () { yield <x/> }  else  if (*::*.prototype) 'haha'.split else {return; }");
tryItOut("[z1,,]\n");
tryItOut("throw StopIteration;");
tryItOut("if(<x><y/></x> ^ 0) {-1if(<x><y/></x\t>++) { if ((({prop: ({a2:z2}), prop: false }))) {const  /x/g  = true; } else throw __parent__;} } else /*infloop*/for(var __iterator__; <x><y/></x>.(#1=[#1#]); \n<x><y/></x>) return (function ([y]) { })();\nconst constructor;\n");
tryItOut("if(false.watch(\"constructor\", function  __noSuchMethod__ (__iterator__, __count__) { return <x><y/></x> } )) { if (__noSuchMethod__ = \f(this > [,,])) {return; }} else gc()");
tryItOut("__parent__ = __iterator__;");
tryItOut("{return;\nvar __proto__ = <x><y/></x>, constructor;\n }");
tryItOut("while((__count__, []<x/>) && 0)");
tryItOut("if() { if (<><x><y/></x></> - <y><z/></y>) <x><y/></x>;} else /*infloop*/do {gc()throw <y><z/></y>; } while(new (((*::*).watch).call)(<x><y/></x>));");
tryItOut("if(({__parent__: this.__defineGetter__(\"constructor\", function  __count__ (constructor, let) /x/g ),  get __noSuchMethod__ prototype (prop) { continue ; }  })) { if ('fafafa'.replace(/a/g, function (\t__proto__, __parent__) { yield <y><z/></y> } )) {gc() }} else /*infloop*/M:while([,]){function () { return <y><z/></y> } throw #3={a:#3#}; }");
tryItOut("L:with(<x/>){return;(new Function(\"\")) }");
tryItOut("let (function::__iterator__ = (false).call(window, undefined), prototype) { \n }");
tryItOut("if([15,16,17,18].sort(function (__count__) {  } , prop)) {undefined;return <x/>; } else  if ( /x/g  >  \"\" ) export *; else {export prop; }break ;");
tryItOut("for(let y in [5,6,7,8]) return  '' ;");
tryItOut("L:with({\f__iterator__: yield false\n})M:switch(__parent__) { case this: break; case false: break;  }");
tryItOut("M:if( '' ) { if ((((({prop: true})) if ( '' )))[prototype: (<zzz>*</zzz>.(__proto__, __parent__))]) __iterator__; else return <x><y/></x>; const __count__;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__(new Math.pow(yield [,,])) in (<x><y/></x> == -1)) {with({each: this.__defineSetter__(\"__noSuchMethod__\", window)}); }");
tryItOut("with(033)export *;");
tryItOut("/*for..in*/for(false['__proto__'] in prop) {return __proto__;; }");
tryItOut("/*for..in*/for(const prop = @foo in false) yield {yield; };");
tryItOut("yield function(id) { return id }\n");
tryItOut("/*for..in*/M:for(var (yield this).prototype in #1#.prototype) {let constructor = <y><z/></y>; const constructor; }");
tryItOut("if(<><x><y/></x></> ? this : @foo * (window ? <x/> :  '' ) === this.zzz.zzz) L: {} else {L:if(__iterator__) {export __iterator__; } }");
tryItOut("while((this >>>  /x/g ) && 0){/*infloop*/M:for(let __noSuchMethod__; yield true; *::*.prototype.hasOwnProperty(\"__noSuchMethod__\")) { } }");
tryItOut("return;");
tryItOut("/*for..in*/M:for(constructor = <><x><y/></x></>.__iterator__ in null[undefined]) prototype = prototype;");
tryItOut("/*infloop*/for(({ __count__: constructor, prototype: prototype }) = <x><y\t/></x> <<= null; this.__defineSetter__(\"prototype\", [1,2,3,4].slice); new (__iterator__ = 1e-81)((p={}, (p.z = true)()), @foo)) {; }");
tryItOut("do \nL:if(true) var __noSuchMethod__; else  if (<y><z/></y>) throw *;\n while((eval(\"yield (<><x><y/></x></>)[<x><y/></x>]\", this.throw(window)[<y><z/></y>])) && 0);");
tryItOut("if(() % <x><y/></x>.propertyIsEnumerable(\"__count__\")) { if ((this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split))) /*for..in*/for(const __count__ = \n0.1 in @foo) {return <y><z/></y>;yield; }} else {yield;return <><x><y/></x></>; }");
tryItOut("/*infloop*/while(this :: -3/0){(<x/>);return; }");
tryItOut("if((prop)) export *; else ");
tryItOut("<!--");
tryItOut("L:if('fafafa'.replace(/a/g, function(q) { return q; })) { if ((<x><y/></x> < <><x><y/></x></>)) {export prop;export *; }} else let __parent__ = <><x><y/></x></>;(3);");
tryItOut("constructor = __iterator__;");
tryItOut("if(__iterator__ = 1e4) __parent__, prop = <y><z/></y>; else {return;break ; }");
tryItOut("/*infloop*/M:for(var ({ getter: ({ __count__: __count__, constructor: [] }) }) =  /x/g .unwatch(\"constructor\").unwatch(\"prop\"); <x><y/></x>.*; (export *)) /*infloop*/for(<><xxx>{__proto__}</xxx></>; [(new *::*) if ( '' )]; <x><y/></x> ? prop : <><x><y/></x></>.watch(\"constructor\", undefined)) {let __noSuchMethod__, constructor; }");
tryItOut("switch(@foo) { default: ;break; case <><x><y/></x></>: return;__iterator__ = [1];break; {}case <><x><y/></x></>: break; yield 3;break;  }");
tryItOut("/*infloop*/do continue ; while(__noSuchMethod__ = __noSuchMethod__ ^= (-0 if (*)) <= yield <x/> ?  ''  : [[]]);");
tryItOut("/*for..in*/for(var __parent__ in ((({}).hasOwnProperty)(__count__.__count__)))constructor, __proto__");
tryItOut("/*for..in*/for(__parent__ in ((({}).__lookupGetter__)((<x><y/></x> %=  /x/ ))))let (__noSuchMethod__ = prototype, __parent__ = null) { /*infloop*/while((function ([y]) { })()){return <x><y/></x>; } }");
tryItOut("for(let y in [5,6,7,8]) let(({ constructor: __iterator__ })) ((function(){return;})());");
tryItOut("/*infloop*/do {with(undefined){;eval }/*for..in*/for(let getter, prototype in @foo) {throw ({a2:z2}); } } while(((new gc()(3.141592653589793)) !==  ''  |=  /x/g ) / <x/>);");
tryItOut("{throw <x><y/></x>; }");
tryItOut("{{}with({__iterator__:  '' }){break ; } }");
tryItOut("/*infloop*/while(<y><z/></y>.eval(function(id) { return id })){if(<x/>) { if (<x><y/></x>) return <x><y/></x>\t; else {const __proto__ = __proto__; }} }");
tryItOut("var prototype; const prop;");
tryItOut("<x><y\n/></x>");
tryItOut("/*infloop*/while(<>this.zzz.zzz</>.(([,,z1])(<><x><y/></x></>) = (set = ({})))){/*infloop*/L:for(<\t><x><y/></x></>; <><x><y/></x></> ? @foo :  /x/g ;  /* Comment */false) {gc() }(([11,12,13,14].map)); }");
tryItOut("/*infloop*/L:for(prototype; new (<><x><y/></x></>)(); yield <x/>) {export *; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <x><y/></x>.(__proto__) in this) let constructor, __iterator__;");
tryItOut("while((__count__) && 0){let __parent__ = <x><y/></x>, prototype = -1; }");
tryItOut("{export __proto__;<y><z/></y>; }");
tryItOut("L: {}");
tryItOut("L:if(true) {/*infloop*/do function  constructor (__parent__) { throw true; }  while([[]] ? prop : ({a2:z2}));yield <><x><y/></x></>; } else  if (<y><z/></y>) {{} } else ");
tryItOut("let (__count__ = ((prop = <y><z/></y>, __iterator__ = <x><y/></x> = ({a2:z2})) for (prototype in  '' ) for (__iterator__ in (function ([y]) { })()))) { *.__lookupGetter__(\"__parent__\"); }");
tryItOut("return 1e+81[<x/>][prop+=false];");
tryItOut("/*infloop*/while((this.__defineGetter__(\"prop\", [1,2,3,4].map))){yield;return; }");
tryItOut("const constructor = 1.3");
tryItOut("let(__parent__, prototype = (export *)) ((function(){let(__proto__, [, constructor, ({ __noSuchMethod__: constructor, prototype: constructor }), , ]) { with({}) throw StopIteration;})());");
tryItOut("/*for..in*/M:for(let .2 in ((eval)(__iterator__.__parent__)))var __noSuchMethod__, prop = <><x><y/></x></>;");
tryItOut("/*infloop*/do {if((p={}, (p.z = <y><z/></y>)())) {throw <><x><y/></x></>; } } while([] = null);");
tryItOut("break ;/*infloop*/for(const ({ prop: __proto__, constructor: <x><y/></x> }) = (return); *.unwatch(\"__parent__\"); ((__noSuchMethod__).__defineSetter__).call(undefined, )) {gc()export *; }");
tryItOut("/*infloop*/for(let ({ __count__: __iterator__, __parent__: constructor }) = (__iterator__ ? 1.2e3 : <x><y/></x>.valueOf(\"number\")); prototype%=<x><y/></x> ? (typeof <x/>) : ;  '' ) {with([,].prototype = <x><y/></x>){ /x/ ;let __parent__, constructor = this; } }");
tryItOut("yield;");
tryItOut("/*for..in*/M:for(let [constructor, constructor] = Iterator() in (this.__defineGetter__(\"prop\",  /x/ ))) if((constructor.prop setter= 'haha'.split >>>=(( /x/ ).__defineSetter__).call(<x><y/></x>,  /x/g ))) let __parent__/*\n*/");
tryItOut("/*for..in*/for(let prop in ((033)((* & this))))throw @foo;");
