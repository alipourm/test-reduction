
tryItOut("if(delete <x/>) { if ((__proto__)(<y><z/></y>,  '' )) <employee id=\"1\"><name>Joe</name><age>20</age></employee> else {gc() }}");
tryItOut("try { throw StopIteration; } catch(prop if (function(){with({}) const prototype = ({a1:1}), __count__;})()) { with({}) export *; } catch(__proto__ if delete #3={a:#3#}) { for(let y in []); } ");
tryItOut("for(let y in [5,6,7,8]) __parent__ = __count__;");
tryItOut("export prop;\nyield;\n");
tryItOut("/*for..in*/for(let [[1].__noSuchMethod__ = window, ] = eval(\"arguments.__lookupGetter__(\\\"prototype\\\")\",  /x/g ) in (__parent__.__proto__ getter= [1,2,3,4].slice for (__noSuchMethod__ in 3.141592653589793))) { }");
tryItOut("L:if( \"\" ) {function(y) { yield y; yield \n@foo;; yield y; }({}).__lookupGetter__ } else  if ((function ([y]) { })()) export constructor; else yield;");
tryItOut("do <x><y/></x>; while((arguments % @foo) && 0)\nexport __noSuchMethod__;");
tryItOut("(new Function(\"if([,,]) {false } else  if (window) \\fexport *; else {export constructor; }\"))");
tryItOut("/*infloop*/L:for(__parent__; (new (function () { let prop; } )()).watch(\"each\", function(q) { return q; }); (#1=({__noSuchMethod__: eval(\"this.__defineGetter__(\\\"prototype\\\", /a/gi)\", ({ __noSuchMethod__: ({ __noSuchMethod__: __iterator__, __parent__: constructor }) }) = new (1 for (x in []))(<>try { for(let y in [5,6,7,8]) yield 1.3; } catch(__proto__ if (function(){prop = constructor\n;})()) { yield  /x/g ; } catch(prototype if (function(){try { {} } __parent__, each = (true.yoyo(<x><y/></x>))catch(__proto__) { var __iterator__ = (function ([y]) { })(), __iterator__; } })()) { this.zzz.zzz; } finally { yield [11,12,13,14].some; } </>,  /x/ ))}))) {<x><y/></x> * __count__;__iterator__, __iterator__ =  /x/g ; }");
tryItOut("for(let y in [5,6,7,8]) throw __parent__;");
tryItOut("while((<x><y/></x>-- ? __parent__.__count__ : let (__parent__ = 0, __parent__ = window) <><x><y/></x></>) && 0){M:do return prop; while((0.1) && 0);Function }");
tryItOut("{/*infloop*/for(({__noSuchMethod__: window,  set __noSuchMethod__ __count__ () { ; }  }); ; new Function((<><x><y/></x></> for each (__noSuchMethod__ in 1.3)), false)) throw 5.0000000000000000000000;export *; }");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(__parent__ in  /x/ ) yield;");
tryItOut("/*infloop*/while(__proto__)[1,2,3,4].map\ndo {prop, __parent__ = <x><y/></x>; } while((this) && 0);");
tryItOut("if(( /x/  >> 0x99)) {(constructor); } else {{}{} }");
tryItOut("/*infloop*/do {<x><y/></x>; } while(<y><z/></y>)");
tryItOut("if(eval(\"[3.141592653589793 for (__iterator__ in <y><z/></y>)]\", (__noSuchMethod__ = (<x><y/></x> .@*:: <><x><y/></x></>)))) {continue M;{export prop; } } else  if (__iterator__.prop getter= function(y) { yield y; function(y) { yield y; prop, constructor = <x><y/></x>;; yield y; }; yield y; }) export __noSuchMethod__;");
tryItOut("{gc()/*for..in*/M:for(__iterator__ in ((Math.pow)(this.__defineSetter__(\"__parent__\", eval))))__count__; }");
tryItOut("constructor = <x/>, * = [[]];");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for([__iterator__, __proto__] = 'fafafa'.replace(/a/g, (new Function(\"function(q) { return q; }\"))) in (p={}, (p.z = 3)())) while((window) && 0)*::*");
tryItOut("if((<><x><y/></x></>[false])) { if (Boolean()) { '' ;yield; } else (<><x><y/></x></>);}");
tryItOut("if((constructor%=true += undefined)) {/*infloop*/L:for(let __noSuchMethod__; (function ([y]) { })() *= @foo; ({__noSuchMethod__ setter: eval })) {( '' );new Function } } else  if (({__iterator__:  /x/  .@x:: <> { yield (<x><y/></x>++) } : <><x><y/></x></> , <x><y/></x>.__iterator__ = new function (prop, prototype) { return <x/> } (<x/>)</>,  get prototype(__count__, __iterator__) { __iterator__ = <><x><y/></x></>, prop = <x><y/></x>; }  })) {/*for..in*/for(let __count__ in this) {gc()throw  '' ; }break L; }");
tryItOut("/*for..in*/for(var prop in ((<x><y/></x>.__lookupSetter__(\"__proto__\")).*)) return;");
tryItOut("/*for..in*/M:for(const __proto__ = new RangeError() in eval(\"<x><y/></x/*\\n*/>\", (__noSuchMethod__);)) {const __iterator__, constructor = <><x><y/></x></>\f;yield <><x><y/></x></>; }\t");
tryItOut("switch(<><x><y/></x></>) { default:  }");
tryItOut("export __parent__;");
tryItOut("switch((<x/> % * * eval(\"<x><y/></x>\",  '' ))) { default: \nreturn <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var  in (((<x><y/></x>).watch)(__count__(-3/0, null)))){continue L;let prototype; }");
tryItOut("/*infloop*/L:while(try { return; } catch(__count__ if <x/>) { {} } catch(__parent__ if (function(){5.0000000000000000000000 = prop;})()) { for(let y in []); } finally { try { try { return __count__; } catch(prop if Array(1e-81, <x/>)) { var __iterator__, prop; } catch(__iterator__) { ; }  } catch(__parent__ if (function(){let(__parent__, function::prop = <><x><y/></x></>) { ([]);})()) { throw __count__; } finally { with({}) { <x><y/></x>; }  }  } ){do {const function::prop = constructor; } while(([11,12,13,14].map) && 0); }");
tryItOut("/*for..in*/for(let __iterator__ = this.__defineSetter__(\"__count__\", <x><y/></x>) in (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map))) {L:while((constructor) && 0)yield {}; }");
tryItOut("yield");
tryItOut("/*infloop*/L:for(var __proto__ = this.__defineGetter__(\"prop\", (1 for (x in []))).@*; <><x><y/></x></>.__defineSetter__(\"__iterator__\", function (__parent__) { return __parent__ } ); (void <x><y/></x>)[prop = <x/>]) switch(({}).__lookupSetter__(\"__iterator__\")) { default: falseexport *;break; case (eval(\"throw  '' ;\", true)): break;  }");
tryItOut("{let (prototype =  /x/ , __parent__ = @foo) { export __iterator__; } }");
tryItOut("/*infloop*/for(const constructor; (-1); null) let __proto__ = <x><y/></x>, constructor\nif(this.zzz.zzz ? (<y><z/></y>.hasOwnProperty(\"prototype\")--) in yyy.(<x><y/></x>) : eval(\" '' \", __count__)) {{}\nexport *;yield undefined;yield; } else return;");
tryItOut("let (prop, __parent__) { __noSuchMethod__ }");
tryItOut("/*for..in*/for(1e-81 in (([1,2,3,4].slice)(this __parent__.__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))))__count__.constructor = constructor;");
tryItOut("((this.__defineGetter__(\"__count__\", Math.pow)))((({}).@*)) = __iterator__;");
tryItOut("/*for..in*/for(let constructor.__noSuchMethod__ in ((Function)(( ''  || __proto__)))){while((prop.prototype = new function(q) { return q; }(<>__noSuchMethod__</>, <y><z/></y>)) && 0)const __noSuchMethod__; }");
tryItOut("return\n");
tryItOut("while((<y><z/></y>) && 0)gc()");
tryItOut("/*for..in*/for([__iterator__, constructor] = ((uneval(<x/>))) in __noSuchMethod__ = new Array()) {return;\f\nvar constructor = <><x><y/></x></>, __count__;\n }");
tryItOut("var prototype, constructor;");
tryItOut("/*infloop*/L:for(new undefined(); __proto__ = 0; <><x><y/></x></> % this) ");
tryItOut("if(Array([,])) {; } else  if (this.__defineGetter__(\"__proto__\", [1,2,3,4].map)) let prop, prototype =  \"\" ; else { }");
tryItOut("/*for..in*/M:for(var __count__ in ((new (new Function)(constructor = this))(__proto__ * undefined)))/*for..in*/for(let prop = (uneval((prop.prop))) in .2.watch(\"prototype\", function  prop () { yield  /x/g  } )) {default: return window;break;  }");
tryItOut("/*infloop*/for(var [, [, [, __parent__, ], \t], , , ] =  '' ; new (<><x><y/></x></> >= <><x><y/></x></>).__defineSetter__(); (uneval(prop))) {return  /* Comment */prop;var __proto__ = prop, __iterator__ = (-1); }");
tryItOut("/*for..in*/for(const [prototype, __proto__] = 4..__defineGetter__(\"prototype\", [1,2,3,4].map) in new (({}).hasOwnProperty).call((<x><y/>\t</x>\n), )(new (0x99)(window))) {/*infloop*/while(true)return <x><y/></x>; }");
tryItOut("L: {gc() }");
tryItOut("if((++[,,z1])) { if ([11,12,13,14].map) yield 3; else ({});}");
tryItOut("/*for..in*/for((new RegExp(undefined)).__count__ in ({ /x/g :  /x/  })) export prototype;");
tryItOut("return");
tryItOut("/*infloop*/for(__parent__; this.zzz.zzz; ( /x/g  < window)) {return *::*; }");
tryItOut("/*for..in*/for(let __parent__ in <><x><y/></x></>) gc()\nconst prop =  /x/ , __proto__;\n");
tryItOut("/*for..in*/for(let constructor in ((Math.sin)(eval(\"yield;\", prototype).valueOf(\"number\"))))do {throw [1,,]; } while((<><x><y/>\r</x></> < <><x><y/></x></>) && 0);");
tryItOut("if(<x><y/></x>) { if ( /x/ ) {(1 for (x in []))#3={a:#3#}; }} else export prop;");
tryItOut("do <y><z/></y>; while(((-3/0 || 0)) && 0);");
tryItOut("{}\n");
tryItOut("if(__count__.__parent__%=.yoyo([,]).propertyIsEnumerable(\"constructor\")) const prop else {export *;*::*; }");
tryItOut("gc()");
tryItOut("/*for..in*/\ffor(var __noSuchMethod__.__proto__ in ((@foo)(undefined.__defineGetter__(\"prop\", function (__iterator__)/*\n*/ { export prototype; } )))){var constructor, __noSuchMethod__ = <x><y/></x>;return; }");
tryItOut("{if( /x/ ) export *; else  if ( \"\" ) {; } else return arguments;gc() const __proto__; }");
tryItOut("{if([<x><y/></x> ? <><x><y/></x></> : <y><z/></y>].sort(\t([,,z1]).apply) === ((<x><y/></x>)(prop)) for (__parent__ in (-0)) for (constructor in <x/>)) { if (--#1# >= 1e-81.watch(\"__iterator__\", 'haha'.split)) L:if(this) { if (<x><y/></x>) {export *;break M; } else yield false;}} else {yield; } }");
tryItOut("/*infloop*/for(__parent__ @ 'fafafa'.replace(/a/g, <y><z/></y>); ((function::__count__.__count__ += ( \"\" )(__noSuchMethod__) = function (({ __proto__: __noSuchMethod__, prototype: prototype }), __iterator__) { gc() } )(\r @ __iterator__ @ ([z1]()).yoyo('fafafa'.replace(/a/g, function(q) { return q; })), <x><y/></x> >= <y><z/></y>)).valueOf(\"number\"); [[]].unwatch(\"__noSuchMethod__\")) with({}) yield __count__ = <x><y/></x>;");
tryItOut("if(1e-81) {if(<><x><y/></x></>) ; else  if ( /x/ ) { } else {export *;0/0; } } else  if ((<y><z/></y> <= <x><y/></x>)([11,12,13,14].filter)) (true); else return;");
tryItOut("return;\nexport *;\n");
tryItOut("with((<><x><y/></x></>).watch(<x><y/></x>, __parent__))export *;/*\n*/continue ;");
tryItOut("with({prop: ((yield new ( /x/ )()))})#0=1.2e3) {([11,12,13,14].filter __parent__ getter: ({}).hasOwnProperty)  else yield [1,,];}");
tryItOut("/*infloop*/while(prop = 5.0000000000000000000000.__parent__){;gc() }\ndo {let (__parent__ = *::*) { ; } } while(((window &  /x/g ).__noSuchMethod__) && 0);");
tryItOut("/*for..in*/eval(\"const __proto__ = <x><y/></x>;\", <><x><y/></x></>)");
tryItOut("{/*for..in*/M:for(var [__parent__, __noSuchMethod__] = __iterator__ = <x/> in  \"\" ) {export __noSuchMethod__; } }");
tryItOut("{export constructor;yield; }");
tryItOut("/*for..in*/L:for(var prototype((yield; = 0.1)) in typeof (typeof <y><z/></y> <<= <><x><y/></x></>)) {/*for..in*/for(let constructor in false) {; }return (__noSuchMethod__ = window) <<= *; }");
tryItOut("{throw  \"\" ; }");
tryItOut("");
tryItOut("/*for..in*/L:for((yield  \"\"  += 3) in undefined) continue M;");
tryItOut("return constructor = null;");
tryItOut("/*infloop*/for(({ prototype: ({ __noSuchMethod__: ({ __iterator__: __noSuchMethod__.__iterator__, <{prop}><!--yy--></{prop}>: ({ constructor: ({ __parent__: __iterator__ }) }) }) }) }) =  for each (__count__ in 1e4) for each (__proto__ in this) for each (constructor in new (function(q) { return q; })(*::*, <><x><y/></x></>)); __proto__.__proto__-=<x(/<y></x>.prototype; prototype.prototype getter= Math.sin) return false");
tryItOut("return\n");
tryItOut("M:if(({ get __iterator__(__parent__) { yield <x><y/></x> } , prop: this })) { if (__proto__ =  /x/g ) {const __count__; } else return;}");
tryItOut("do {prop, prototype = null; } while(() && 0);");
tryItOut("/*infloop*/while(this.__proto__){if((*::* ? x::__iterator__ : *)) {yield;{} } else {export __parent__;(function (__iterator__, __iterator__)<x><y/></x>).apply } }");
tryItOut("let (__count__ = (( /x/ ).watch)(<>this</>.__defineSetter__(\"__iterator__\", Function),  /x/g ), constructor = <><><y><z/></y></></>) { let prop = <><x><y/></x></>, prototype = 4.; }");
tryItOut("L:do if(__noSuchMethod__ for (__iterator__ in -3/0)) <><x><y/></x></>; else  if (({__count__: (prototype && *)}).eval((\n /x/  / __count__))) {this; } else {false; } while(((__count__.([ \"\" ].map((new Function(\"([z1,,]).watch\")))) getter= 1.2e3)) && 0);");
tryItOut("let prototype = <y><z/></y>;gc()");
tryItOut("/*infloop*/while(*::*)const prototype = <x><y/></x>;");
tryItOut("let (({ __count__: ({ prop: ({ __count__: [, , ] }) }) })) { /*for..in*/for(var __count__ = <x><y/></x>.@foo in window) {export *; } }");
tryItOut("/*infloop*/do return; while(((p={}, (p.z = null)())));");
tryItOut("__count__ = __iterator__;");
tryItOut("with({}) { let(({ __iterator__: __proto__, __proto__: prototype }) = <><x><y/></x></>) ((function(){for(let y in []);})()); } ");
tryItOut("if(false.__parent__) {throw constructor; } else  if (function (__parent__, __proto__) { return {} } () / 'fafafa'.replace(/a/g, (1 for (x in [])))) {M:with({__parent__: <x><y/></x>.__defineGetter__(\"__parent__\", function(y) { yield y; ('haha'.split).call; yield y; }) == (Function).call}){export __iterator__;/*for..in*/for(var __iterator__ in ((Math.pow)(3.141592653589793))){([1,,]);<><x><y/></x></>; } } } else {throw  /x/g prop = function::prototype; }");
tryItOut("with({}) return;");
tryItOut("prototype");
tryItOut("M:while((this.zzz.zzz) && 0)export *;");
tryItOut("/*infloop*/M:for(let __proto__; __parent__ = *::*; <><x><y/></x></> ? @foo : <x><y/></x>) case 2: var __count__, prop = null\f\nbreak; yield\nbreak; ");
tryItOut("const prototype = ((@foo)[*] & __parent__|=@foo + <><xxx>{__proto__}</xxx></>.propertyIsEnumerable(\"__parent__\"));");
tryItOut("/*for..in*/for(const [__proto__, __iterator__] = (( \"\" .@*))[(this)] in typeof __parent__ ^ <><x><y/></x></>) {if((p={}, (p.z = @foo in {}, this.constructor = new ([1])())())) {export *; } }");
tryItOut("throw StopIteration;");
tryItOut("const constructor =  '' , __iterator__;let prop, prop = __noSuchMethod__;");
tryItOut("break M");
tryItOut("{prototype;gc() }");
tryItOut("L:with({constructor: __parent__ = <x><y/><\f/x>})(<><x><\ty/></x></>);");
tryItOut("if(<y><z/></y>++) { if (__noSuchMethod__.__noSuchMethod__) {throw  '' ;\nconst __noSuchMethod__, __parent__;\n }} else (new Function(\"gc()\"))");
tryItOut("for(let y in [5,6,7,8]) let(prototype = this.watch(\"__noSuchMethod__\", *::*)) ((function(){for(let y in []);})());");
tryItOut("{M:while((window) && 0)({}).__lookupGetter__ }");
tryItOut("/*for..in*/for(let constructor = (* ^= <x><y/></x>) /= __proto__ = arguments >>= /a/gi(true, <><x><y/></x></>).__defineSetter__(\"__proto__\", eval) in (<x><y/></x> >>> __parent__)) const __count__, __noSuchMethod__ = <x><y/></x>");
tryItOut("let (setter) { /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in false) {yield this; } }");
tryItOut("this.zzz.zzz;");
tryItOut("do try { with({}) { function (__noSuchMethod__, __proto__) { __parent__ = *, __iterator__ = arguments; }  }  } catch(({ __iterator__: [, prop, , __proto__, __proto__], __noSuchMethod__: ({ __parent__: __proto__ }) })) { export __noSuchMethod__; } finally { with({}) { return 3; }  }  while(((<><x><y/></x></> << window)) && 0);");
tryItOut("/*infloop*/do {export *; } while([1].__lookupSetter__(\"prototype\"));");
tryItOut("/*for..in*/L:for(const prop =  ''  in this) {throw *::*; }\nbreak L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__ in __noSuchMethod__) return;");
tryItOut("with({__parent__: <xxx>{__iterator__}</xxx>}){break L; }");
tryItOut("{/*infloop*/L:for([1.2e3]; (![[]]); <><x><y/></x></>) break M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in window) {}");
tryItOut("let(__iterator__, __noSuchMethod__ = (<y><z/></y>.__lookupSetter__(\"__parent__\"))) { try { yield (__proto__.__count__ setter= gc); } catch(constructor.__count__ if [1,2,3,4].slice) { throw StopIteration; } catch(constructor if this.__defineGetter__(\"prop\", new Function)) { function::prototype = constructor; } catch(prototype) { try { prop } catch(__iterator__ if (prop = #3={a:#3#}--)) { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return <x><y/></x> < (function ([y]) { })(); }  } ");
tryItOut("if(1.2e3.throw(__count__).__lookupSetter__(\"__iterator__\")) { if ((this ? <x><y/></x> : <><x><y/></x></>)) gc() else {let __iterator__ =  '' (), constructor; }}");
tryItOut("/*infloop*/for(var __iterator__; [new Exception((-1), <x/>) for (__noSuchMethod__ in 0)]; [(new (<y><z/></y>)()) for each (__parent__ in <x><y/></x>) if (<><x><y/></x></>)]) { { yield __parent__ } \nconstructor =  \"\" , function::__parent__ = .2; }");
tryItOut("/*infloop*/for(<y><z/></y>; (__iterator__ = <x><y/></x>); this) L: {yield null; }");
tryItOut("/*for..in*/M:for(var __iterator__ in  /* Comment */(this.__defineGetter__(\"__iterator__\", Math.sin))) switch(false.__defineGetter__(\"prop\", Math.pow)) { default:  }");
tryItOut("/*for..in*/M:for(let constructor in ((__noSuchMethod__)(<y><z/></y>)))let __parent__, __count__ = __count__;");
tryItOut("L: gc()");
tryItOut("/*for..in*/M:for(var [prop, __noSuchMethod__] = new ((({}).hasOwnProperty).call)() in 1e+81) {return <x><y/></x>;constructor; }");
tryItOut("\n( \"\" );");
tryItOut("M:with([11,12,13,14].map)let __count__ =  \"\" ;");
tryItOut("let(__count__ = 1e81) ((function(){return ((yield this));})());");
tryItOut("if(<x><y/></x> -= [ /x/  for (prop in prototype)]\n) {; }");
tryItOut("M:if(('fafafa'.replace(/a/g, /a/gi))) { if (arguments) {__iterator__ = this;/*\n }} else (<><x><y/></x></>);");
tryItOut("var __parent__ = false, __parent__;");
tryItOut("/*infloop*/do  while((this.__defineGetter__(\"__iterator__\", Function)));");
tryItOut("let (constructor = {}, prop =  /x/ ) { yield false; }");
tryItOut("/*for..in*/L:for(__count__ in constructor%=<x><y/></x>) {var __proto__ = <y><z/></y>, __count__ = {}; }");
tryItOut("/*infloop*/for(let [] = (let (__iterator__) (prop = true)); (true)([z1]) = #1=[null]\r; (<x><y/></x>.__proto__)) {if([z1,,]) {} else {__count__; }; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <><x><y/></x></>) {gc()var __proto__ = this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __noSuchMethod__: ({ prototype: function::__iterator__ }), constructor: ({ prototype: constructor }) }) in [11,12,13,14].map) {do /*infloop*/for(3/0; <x><y/></x>; <><x><y/></x>\f</>) {return;let __iterator__ = window; } while((0.1.*) && 0); }");
tryItOut("");
tryItOut("new Function const prototype;");
tryItOut("if(<><x><y/></x></>)  if ((yield (function ([y]) { })()))");
tryItOut("if(this ? Object(this) : @foo) { if (window.throw( \"\" )) export prop; else (__count__).__defineSetter__}");
tryItOut("{}\n");
tryItOut("if([z1]) {<y><z/></y>; } else  if ((@foo / true)) {if((window[false])) {{}window } } else {/*infloop*/for(null['__iterator__'] = (this.zzz.zzz); (<><x><y/></x></>\n); (+#1#)) break ;while(((!null.*)) && 0){{yield 0.1;{} } } }");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = [prototype if (@foo)] in .2) export __proto__;");
tryItOut("switch(<><x><y/></x></>) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in this) {yield; }case 9: break; case 3: yield; }\n( /x/ );");
tryItOut(";");
tryItOut("__count__ = prop;");
tryItOut("/*infloop*/while((new (<x/>)(null)).unwatch(\"constructor\"))this;");
tryItOut("L: ;");
tryItOut("constructor;");
tryItOut("if(var __noSuchMethod__ = undefined, __iterator__) {export *; }");
tryItOut("if() {do __proto__ while((++(4..unwatch(\"__proto__\"))) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in ()) 'haha'.split");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const (*.throw(*)).isPrototypeOf(new RangeError())['constructor'] in (-0)) {yield true;gc() }");
tryItOut("while((this.__defineGetter__(\"delete\", false)) && 0){{throw <><x><y/></x></>; }do /*infloop*/while(#1#)let __parent__ = <><x><y/></x></>, __parent__ = 0x99; while((constructor.constructor) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in [[]]) let __noSuchMethod__ = <y><z/></y>, prop;");
tryItOut("with(++<><x><y/></x></>)break ; const __proto__;\nexport *;\n\t");
tryItOut("/*infloop*/do {{}return <y><z/></y>; } while( '' );");
tryItOut("continue M;");
tryItOut("throw StopIteration;");
tryItOut("switch(([ /x/ ].filter(function(y) { yield y; <x><y/></x>; yield y; }).yoyo(__noSuchMethod__ = <y><z/></y>))) { default: break; break;  }");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(let prototype = () in (yield )) {<><x><y/></x></>;yield <x/>; }");
tryItOut("/*for..in*/for(const __parent__ in ((function  __proto__ (__count__, __parent__) { yield (return x::prototype) } )()))if( \"\" ) { if (false) {} else { }}");
tryItOut("export __parent__; const __noSuchMethod__;");
tryItOut("if(window) {const __iterator__, __proto__ = function::__parent__; } else { }");
tryItOut("L:switch(window[1e4].__lookupGetter__(\"prototype\")) { case (this.__defineGetter__(\"function::prop\", (new Function(\"export *;\"))).throw(new undefined(undefined, null) << Date(<x><y/></x>))): break; case 2: if( /* Comment */033) { if (({ constructor: __count__, __count__: __noSuchMethod__ }) =  \"\" ) 'haha'.split} else {gc() } }");
tryItOut("/*for..in*/for(var (<x/>)((new 'haha'.split('haha'.split, *)))\r in ((function(q) { return q; })((({__proto__: window })) <= getter = <><x><y/></x></> ^= ) ? new function (constructor, __iterator__) { return ; } ((<><x><y/></x></> .@*:: *), undefined) : {})))return let = __count__;");
tryItOut(" /x/ .valueOf(\"number\");throw undefined;");
tryItOut("/*for..in*/for(let prototype = ([15,16,17,18].some(null > <><x><y/></x></> + (@foo.__lookupSetter__(\"prop\")), ({constructor: null.(<x><y/\t></x>.(undefined))})))' in ) if(prop) continue ; else  if (*::*) {(({a1:1})); }");
tryItOut("with( ''  >> constructor){<><x><y/></x></>; }");
tryItOut("/*infloop*/for(var ({ prototype: __count__, __iterator__: prototype }) = yield  /x/ ; (<><x><y/></x></>)(); ((this)(<x><y/></x>))) \t/*infloop*/M://h\ndo return; while(*::*);");
tryItOut("/*for..in*/for(const __parent__ = (('haha'.split).apply\r)(undefined,  '' ) in <><x><y/></x></>.isPrototypeOf(<><x><y/></x></>) | window.yoyo( /x/g ) ^ @foo.__defineGetter__(\"prop\", new Function)) {export *; }");
tryItOut("if(('fafafa'.replace(/a/g,  /x/g  instanceof  \"\" ))) {switch((__proto__ = this).watch(\"__parent__\", (*::*).call)) { default: break; export __noSuchMethod__;/*for..in*/for(var [prop, constructor] = *::* in [1]) Math.sinbreak; case 2: case (prop = (Math.sin).call(*, )): break; case 1: {}case 3: break; case (prototype.hasOwnProperty(\"__noSuchMethod__\")): return <x><y/></x>; }[z1,,]; } else  if ((__proto__ = <x><y/></x>)) /*infloop*/for(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; <><bbb xmlns:ccc=\"((uneval(window)).__lookupGetter__(\"prop\"))\"><ccc:\teee></ccc:eee></bbb></>; throw this) gc() else delete = {}, __noSuchMethod__ = #3={a:#3#}; const yield;\f");
tryItOut("let(prototype, __count__) { var __parent__;");
tryItOut("if(<>({}).__lookupGetter__</>\n) gc()");
tryItOut("this.zzz.zzz;");
tryItOut("<y><z/></y>;");
tryItOut("if((true.__defineGetter__(\"constructor\", (1 for (x in []))))) {gc()__proto__; } else  if (__iterator__) yield false;");
tryItOut("/*infloop*/while(__parent__)'haha'.split/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in 1e4) {continue ;prototype: <><x><y/></x></> }");
tryItOut("{throw undefined;throw prototype; }");
tryItOut("const  { yield 3 }  = true; const prop;");
tryItOut("for(let y in [5,6,7,8]) yield = prototype;");
tryItOut("with({__count__: <><x><y/></x></>}){yield;export *; }");
tryItOut(";");
tryItOut("/*infloop*/for(let __proto__ = undefined(<><{constructor}> </{constructor}></>); new <x><y/></x>.valueOf(\"number\"); ('fafafa'.replace(/a/g, eval).propertyIsEnumerable(\"__proto__\"))) {/*for..in*/for(const prop = this in ({a2:z2})) {yield prototype; }const prop; }");
tryItOut("{/*infloop*/while((__proto__.hasOwnProperty(\"prototype\").unwatch(\"__proto__\"))){/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in *) ; } }");
tryItOut("L:if(1e+81) { if (4.) yield prop; else export *;}{if( '' .__lookupGetter__(\"__iterator__\")) {yield  \"\" ; } else  if ((window.__lookupGetter__(\"__count__\"))) throw undefined; }");
tryItOut("let(__noSuchMethod__ = (__parent__) = prop, [({ __parent__: __iterator__ }), function::__parent__, , ({ __count__\f: __count__ })] = (({}).__lookupGetter__)(<><x><y/></x></>) , undefined.propertyIsEnumerable(\"__noSuchMethod__\")) ((function(){let((prototype)) { yield;})());");
tryItOut("if(new (<x><y/></x>)(<x/>)) {__noSuchMethod__, prop;function(y) { yield y; __iterator__;; yield y; } } else (prototype).__defineSetter__");
tryItOut("/*infloop*/do throw 1e+81; while(let (constructor) @foo &  /x/ .watch(\"__noSuchMethod__\", /a/gi));");
tryItOut("{ }");
tryItOut("M:if(new <x/>(#3={a:#3#})) { if (__count__ ? *::*++ : (__noSuchMethod__ =  /x/g )) {[1,2,3,4].sliceyield  '' ; }} else yield 1e-81;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__('fafafa'.replace(/a/g, eval)) in window % (\f033)[false]) prop = window, prototype;");
tryItOut("L:if(! \"\" ) { if (constructor = set) throw <><x><y/></x></>;} else ({}).hasOwnProperty\n");
tryItOut("if(this) { if (window) {var __parent__ =  \"\" ;{} } else {;gc() }}\nvar constructor;");
tryItOut("export __proto__\nwhile(((eval(\"var __iterator__ = <x><y/></x>, __iterator__ = <><x><y/></x></>;\", 0))) && 0){{} }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__\f in <x/>) *\ndo this while((( '' )[<x><y/></x>]) && 0);");
tryItOut("/*infloop*/for(({ constructor: ({ ({ prop: ({ constructor: ({ __noSuchMethod__: ({ prop: ({ __iterator__: __parent__, __parent__: __count__ }), __count__: __iterator__ }) }) }), __noSuchMethod__: ({ prototype: ({ x::set: __count__.__proto__ }), prototype: ({ constructor: __proto__ }) }) }): ({ prototype: ({ prototype: [__count__, ({ __iterator__: [, , ], constructor: prototype }), ({ constructor: ({ __count__: prototype, __count__: constructor }) }), [, constructor, __proto__, undefined, ], ] }), __proto__: <><x><y/></x\n></>.@foo }) }) }) = (*.prototype\f && (<x/>[[[]]])); (0 .@x:: -0) * (<x><y/></x>.([])); (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice))) const __proto__, prop = 1e+81;");
tryItOut("if((<x><y/></x>[[,]])) {yield *::*; } else __count__");
