tryItOut("continue M\n");
tryItOut("with( \"\" ){yield;gc() }");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; ((yield  /x/g )); yield) {const constructor, __parent__; }");
tryItOut("constructor;");
tryItOut("{while(([ \"\"  if (*)]) && 0)export *;/*infloop*/for(let prototype; #2=({__count__:  /x/ }); undefined && (__count__.(@foo))) {/*for..in*/for(const __count__ in 0.1) (function  __noSuchMethod__ ()) { yield <x><y/></x> }  } }");
tryItOut("/*for..in*/M:for(var [__proto__, __iterator__] = getter = this\n in ({ get __parent__ __iterator__ (prop, __parent__) { yield [z1] }  })) __proto__, __parent__;");
tryItOut("{/*for..in*/for([prop, prop] = (delete [,,])\f = this .@  /x/g  in *::*) {L: export *; }/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (__noSuchMethod__.prototype getter= /a/gi)) if(new window()) {throw  /x/g ; } else  if (<y><z/></y>.yoyo(this)) throw prototype; }");
tryItOut("/*infloop*/M:while(--((0/0)[1.2e3]).eval((p={}, (p.z = window)()))){/*for..in*/for(const __iterator__ in <y><z/></y>) const __parent__; }");
tryItOut(";");
tryItOut("while((({ constructor: __count__ }) = __proto__) && 0)gc()");
tryItOut("L:with({__noSuchMethod__: new <y><z/></y>(.2, __iterator__)})return;");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("gc()");
tryItOut("L\f: \n");
tryItOut("/*for..in*/M:for(var __parent__ in (((<x><y/></x>.constructor = <x><y/></x>))((this for each (constructor in prototype))))){return;let (__parent__ =  \"\" ) { var prop = <x/>, __proto__; } }");
tryItOut("switch(\t<x><y/></x>.__defineSetter__(\"prop\", function(y) { yield y; const __parent__;; yield y; }).@*) { default: case -3/0: L:if(0x99.__lookupSetter__(\"__noSuchMethod__\")) { if (<x><y/></x\n>.hasOwnProperty(\"__count__\")) yield <y><z/></y>; else {throw <><x><y/></x></>;; }}break; break; case 9: break; case 8:  }");
tryItOut("try { throw StopIteration; } finally { return <><><x><y/></x></></>; } ");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __count__] = window ? (-0.__iterator__ = __count__) : false ? this : <x><y/></x> in <ccc:ddd> </ccc:ddd>) {<{prop}>yyy</{prop}>yield (<>null</>.(<x><y/></x>)); }");
tryItOut("L:if(undefined)  else  if (<y><z/></y>) {{}yield #1#; }");
tryItOut("{/*infloop*/for(const __parent__; (p={}, (p.z = window)()); <x/>.eval(true)) {/*infloop*/M:do { } while(~0.1); }L:if(new ((1 for (x in [])))([1])) {} }");
tryItOut("continue ;");
tryItOut("return \n__count__;");
tryItOut("while((__noSuchMethod__.__count__ = <><x><y/></x></>) && 0){}");
tryItOut("L: __iterator__(undefined\n <<= Boolean(0.1))\n");
tryItOut("L:switch(prototype.__noSuchMethod__ getter= function(q) { return q; }) { case ({ get __iterator__() { return <x/> %= <x><y/></x> } , __noSuchMethod__: <x><y/></x>.(-1) }): /*infloop*/do {const constructor, __parent__;yield window; } while((yield *::*));return;case 6: break;  }");
tryItOut("/*infloop*/for((((({}).hasOwnProperty)(-3/0))[new (<><x><y/></x></>)(function ([y]) { })]); [(return)[<y><z/></y>()] for each (prop in __count__.(__count__).*)]; (__iterator__) = <x/>.__parent__ < <x/> = __proto__) export *;");
tryItOut("with({__iterator__: prop}){if(4.) {return; } else  if (<x><y/></x>) {gc()continue ; } }");
tryItOut("__noSuchMethod__ = ({}).__lookupGetter__;");
tryItOut("break L;if(window) { if (null) {gc() }} else (<x><y/></x>);");
tryItOut("do {break L; } while((this.constructor) && 0);");
tryItOut("/*infloop*/for(const prototype = ; (({a2:z2}))(@foo); (new <x><y/></x>(<y><z/></y>))) {return; }");
tryItOut("export __noSuchMethod__;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __iterator__.__proto__ = * in 3.141592653589793) {__parent__; }");
tryItOut("/*for..in*/for(let prototype in <x><y/></x>) {return 1.3; }");
tryItOut("{let __parent__; }");
tryItOut("return *;L:if(!throw 0;) {var __count__ = <y><z/></y>, __proto__ =  /x/ ; } else  if ((__proto__ = @foo)) {var constructor, prop = this;__parent__ = window, constructor; } else {yield; }");
tryItOut("{return; }");
tryItOut("if(\n__iterator__.__defineSetter__(\"prop\", (#3={a:#3#}).__defineSetter__)) { if (<><bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb></>.unwatch(\"__parent__\")) /*infloop*/do {let __noSuchMethod__ = @foo; } while(5.0000000000000000000000);} else try { yield <x/>; } catch(prototype if case 2: 'haha'.split\n{}\n) { var __parent__ =  '' , __proto__; } ");
tryItOut("let (prop, __count__ = <y><z/></y>) { let __iterator__; }\n;\n");
tryItOut("yield <x><y/></x>;");
tryItOut("M:with(<xxx>{__proto__}</xxx>.()){export __iterator__; }");
tryItOut("switch((<!--yy--> && (function ([y]) { })())) { case 4: continue ; const __noSuchMethod__; }\n(__noSuchMethod__);\n");
tryItOut("{return;/*infloop*/do {{}export *; } while(<y><z/></y>); }");
tryItOut("with({__parent__: [,,].__defineSetter__(\"constructor\", [1,2,3,4].map)})let prototype, prototype;");
tryItOut("if(([] = ({prop getter: Math.sin }) .@*:: (constructor = window))) { if (__proto__) export __iterator__; else {}}");
tryItOut("/*infloop*/for(var __parent__; yield @foo >>>=new \f*::*();  /* Comment */(<x><y/></x> ^= 3/0) || delete <x/>) {M:with(this.zzz.zzz)while(( /x/ ) && 0){yield;gc() } }");
tryItOut("if(new function () { __noSuchMethod__ = <><x><y/><///h\nx></>, __proto__ = this; } (!undefined)) export *; else  if (typeof prop.__iterator__.propertyIsEnumerable(\"constructor\")) constructor");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in new Number(((undefined).apply).call(\n<x><y/></x>, )) <= (this.zzz.zzz)) {(<x><y/></x>);/*for..in*/for(const __proto__ in window) export *; }");
tryItOut("L: ;");
tryItOut("if([(<x><y/></x>)(__parent__) = 0.1.__lookupSetter__(\"prop\") if (\t<><></></>)]) const __count__ = <y><z/></y>;");
tryItOut("L:if(constructor.__count__) yield; else  if (#2=({function::__proto__: (-1.@foo)})) {yield <><x><y/></x></>; }");
tryItOut("{throw function ([y]) { }; }");
tryItOut("/*infloop*/do {return; } while(<!--yy-->);");
tryItOut(";\nyield __count__;\n");
tryItOut("M\f:if(prop =  '' ) throw  { continue ; } ; else  if (false) {; } else {export *;return; }");
tryItOut("switch(<x/>) { default: let __proto__, constructor = <><x><y/></x></>;case this: /*infloop*/while(({__count__: __iterator__,  set constructor prop () { return <x><y/></x> }  })){\tdo return; while(( /x/g ) && 0); } const __iterator__;break; break; case 3: return false; }");
tryItOut("/*infloop*/while(let (__count__, __parent__ =  /x/ ) @foo){yield 3.141592653589793;\nbreak ;\n }");
tryItOut("/*for..in*/M:for(let (__noSuchMethod__) in  '' ) M:if(true) yield; else  if (<y><z/></y>) gc() else {; }");
tryItOut("(eval(\" { yield window(*, <><x><y/>/*\\n*/</x></>) } .__lookupSetter__(\\\"__count__\\\")\", (0.1[true])));if(@foo) { if (<y><z/></y>) var constructor;} else {var prop, <x><y/></x>; }");
tryItOut("M:if((__proto__ = <x><y/></x>)) yield false; else  if ([11,12,13,14].some\n) {export *; } else {{throw 1.3;__parent__.__count__ } }");
tryItOut("M:if((function ([y]) { })()) (window); else  if (let (__proto__ = false, prop) 1e+81) throw window; else -");
tryItOut("L:if([(uneval( '' ))].map(true).__iterator__' = yield __noSuchMethod__ /= ((1e4)[@foo])) \n{ if (1e+81.constructor) {switch(#1=[#1#].*) { case #3={a:#3#}.__proto__ = <x><y/></x>: break;  }{} }} else {yield; }");
tryItOut("let (__parent__ = <><x><y/></x></>, __count__) { prop }");
tryItOut("/*infloop*/while(<><x><y/></x></>){yield; }");
tryItOut("throw prop;");
tryItOut("try { yield window\n; } catch((<y><z/></y>)(<y><z/></y>)) { try { continue ; } finally { export *; }  } finally { with({}) yield <y><z/></y>; } ");
tryItOut("/*infloop*/for(let constructor = yield 3; new 0x99;  '' ) {throw ({a2:z2}); }");
tryItOut("L: {export *;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop(<x/>) in (<x><y/\t></x>()\f - undefined)) while((Math.sin) && 0)__iterator__;");
tryItOut("{var prototype = <x/>, constructor;const prop, __parent__ = <><x><y/></x></>; }\n/*infloop*/for(__count__ =  '' ; throw -0; *.__lookupSetter__(\"__noSuchMethod__\")) [1,2,3,4].slice\n");
tryItOut("this.zzz.zzz;");
tryItOut("switch(__parent__.prototype = \n<x><y/></x>) { case 6: throw prop = <><x><y/></x></>;break; case void __count__.__lookupGetter__(\"__proto__\"): export *;break; ;break;  }");
tryItOut("yield  == (@foo.propertyIsEnumerable(\"__parent__\").__defineGetter__(\"__parent__\", (( /x/ ).__defineSetter__).apply));");
tryItOut("/*for..in*/for([__proto__, constructor] = <><x><y/></x></> in <x><y/></x>) var prop = <y><z/></y>, __iterator__ = -1;");
tryItOut("/*infloop*/for((uneval(this)) = __count__; __parent__.prop = *.@*.valueOf(\"number\")\n; (new ({ __noSuchMethod__: __parent__, prototype: prop }) = __parent__ .@  /x/ ((3/0 &= <x><y/></x>)))) {}");
tryItOut("/*infloop*/for(__count__; ++(<><x><y/></x></> for each (__noSuchMethod__ in <x><y/></x>) for (__proto__ in __parent__)); (__proto__.(<x><y/></x>) .. [false].sort((3).watch))) do  while((this) && 0);\n\n");
tryItOut("M:while(((function ([y]) { })() % yield null) && 0){/*for..in*/L:for(var constructor = (1.3.__defineSetter__(\"__iterator__\", Math.pow)) in new (this.__defineSetter__(\"__count__\", (new Function(\"gc()\"))))()) return [undefined if (<y><z/></y>)]; }");
tryItOut("/*for..in*/for(const prop in Number(window)) return;");
tryItOut("if(eval(\"/*for..in*/for(const [setter, __count__] = window in <><x><y/></x></>) {}\", ((p={}, (p.z = function ([y]) { })())))\n) { if (new (([z1] >>>=<x/>))(eval(\" /x/ \", *::*), undefined)) /*for..in*/for(var [__parent__, prototype] = #1# in 4.) continue M; else {let prototype, __iterator__; }}");
tryItOut("/*for..in*/for(var <y><z/></y>.function::prop in <x/>) const __iterator__;\n__parent__, prop;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const <><x><y/></x></>.__count__ in <y><z/></y>) (prop);");
tryItOut("if(*.__defineSetter__(\"__count__\", (<x><y\t/></x>).__defineSetter__)) with(({__count__: false })){window; }\r else export *;");
tryItOut("return (new Number(<><x><y/></x></>));");
tryItOut("/*for..in*/for(constructor = (__count__ = <x><y/></x>) in this) {(1e4);break L; }\n");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = (uneval((prototype = -0))) in __count__ ? undefined :  '' [<><x><y/></x></>]) L:if(({ constructor: [, __iterator__, __proto__, ] }) = this) {yield;\n\n }");
tryItOut("/*infloop*/while((!__noSuchMethod__ && \n3));");
tryItOut("if(033.__lookupGetter__(\"prop\") >>> ({a2:z2})++([15,16,17,18].some(eval, (eval)), [[]])) { if ((function(y) { yield y; {}; yield y; }).apply) yield function::__parent__;} else let prop, constructor = window;");
tryItOut("/*for..in*/M:for(const [constructor, __noSuchMethod__] = eval(\";\", <><x>\n<y/></x></>).watch(\"__iterator__\", (yield constructor.setter)) in (new new Function(prototype = false, <x><y/></x>))) {yield this; }");
tryItOut("while(({}) && 0){if(({})) {continue ; } else  if ( '' ) ; else return ; }");
tryItOut("L:do export *; while((\n__noSuchMethod__.__proto__ getter= function(y) { yield y; export __noSuchMethod__;; yield y; }) && 0);");
tryItOut("/*infloop*/for(var __proto__ = #1=[#1=[#1#] +=  '' ] >>= *; function  prototype (({ __noSuchMethod__: __noSuchMethod__, __noSuchMethod__: constructor })\f, __proto__)({}).__lookupGetter__(<x><y/></x>, *::*); ([1,2,3,4].slice).call( , ([].watch(\"prop\", gc)),  /x/ )) {(<x/>);var __noSuchMethod__ = window; }");
tryItOut("{}");
tryItOut("with({constructor: window = <x><y/></x>.watch(\"__parent__\", function(y) { yield y; let __parent__ = <><x><y/></x></>;; yield y; }) != this.__defineGetter__(\"__parent__\", (new Function(\"gc()\")))}){yield; }");
tryItOut("/*for..in*/for(var [prototype, __proto__] = (([window].filter(Math.sin).\fthrow([15,16,17,18].some(window, false))) ? <xxx {__proto__}={__iterator__ = <><x><y/></x></>, __count__ = <><x><y/></x></>} /> :  /* Comment */true\t.isPrototypeOf(#1=)) in ((eval(\"return;\", undefined)).isPrototypeOf(#1# .@*:: {yield; }))) {/*infloop*/for(const [, [, , , ]] = ([__count__.hasOwnProperty(\"__parent__\")]); *; yield (prototype+=1e+81)) {; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype.constructor in !<><x><y/></x></> % constructor) let __noSuchMethod__ = <x><y/></x>;");
tryItOut("/*infloop*/for(this; __iterator__; .2) {var prototype; }");
tryItOut("L: {gc() }\nthrow <><x><y/></x></>;");
tryItOut("if(({__proto__: __parent__, prototype:  /x/g  })) export __count__; else prop: (<x><y/></x> <<  \"\" )");
tryItOut("/*for..in*/for(const let in this) throw <><x><y/></x></>;");
tryItOut("export __count__;\n;\n");
tryItOut("/*for..in*/for(let prop in (__iterator__ ? 1e-81 : @foo)) return <x><y/></x>;");
tryItOut("let ([({ __proto__: __noSuchMethod__, prop: __iterator__ }), , ]) { /*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in  /x/g ) {[z1,,]; } }");
tryItOut("M:if([<><x><y/></x></>].map\f((new Function(\"const __proto__ = *::*, constructor;\")))) yield <x><y/></x>; else yield <x><y/></x>;");
tryItOut("L:if(<x/>.@*) { if ((<><x><y/></x></>)() ? <x><y/></x>.(<><x><y/></x></>) : (__proto__.*)) export __parent__; const __iterator__; else {return;with(yield null < ({ prop: __count__ }) = ((new Function(\"return <y><z/></y>;\")))(__count__)) }}");
tryItOut("M:do yield; while((//h\n[15,16,17,18].map((*::*).watch, *)) && 0);");
tryItOut("/*infloop*/for(let ({ __parent__: [({ prop: prop }), constructor, [prototype, , prop\f, , __count__]], constructor: [prototype] }) = <y><z/></y>; (prop = function(id) { return id }); <x><y/></x>.yoyo(<><x><y/></x></>)) const prototype = 1e4, prototype = 033;");
tryItOut("<><x><y/></x></>; const prototype;break L;");
tryItOut("__iterator__ = constructor;");
tryItOut("/*infloop*/while((\n<x/> ? <y><z/></y> : <><x><y/></x></>))");
tryItOut("if((~(__parent__\r.(<x><y/></x>))() ? [ /x/g ].sort(function(q) { return q; }) : this.__defineGetter__(\"constructor\", Math.pow))) {;const __count__ = true, prototype = prototype; const __iterator__; } else {/*for..in*/L:for(var prop in 0.1) return; }");
tryItOut("if(constructor = @foo === (prop.( /x/ )) += ([*])) { if (([<><x><y/></x></>.eval(<><x><y/></x></>)])) {__noSuchMethod__ = window; }} else {;0/0; }");
tryItOut("return @foo;throw function::prop;");
tryItOut("L:switch(new Function(__parent__ = <x/>.__defineGetter__(\"__parent__\", Math.pow).constructor = *::* @ prototype.hasOwnProperty(\"constructor\"))) { default: /*infloop*/for(let prop\n = (this)() + ( /* Comment */<x><y/></x>); 'fafafa'.replace(/a/g, (function(q) { return q; }).apply); ((__count__.prototype getter= function (__count__, prototype) { yield __noSuchMethod__ } ).__count__ = 1.2e3.prop).watch(\"__proto__\", this.__defineGetter__(\"prop\", ({}).__lookupGetter__))) {var __count__, prototype;gc() }break; case 'fafafa'.replace(/a/g, [1,2,3,4].slice)\n: /*infloop*/L:for((* !== __count__); (window.__lookupGetter__(\"__noSuchMethod__\")) ? Error(<><x><y/></x></>) : arguments &= #1=[#1#]; 'fafafa'.replace(/a/g, [1,2,3,4].map)) do {var __parent__ = null, __proto__;let __proto__, prop = [1,,]; } while((this) && 0);break; ;break; case eval(\"if(yield <x><y/></x>) {throw null; } else @foo;\", (<><x><y/></x></>)((1.2e3.propertyIsEnumerable(\"__iterator__\")))): yield;case ((yield false ^ <y><z/></y>)): break;  }");
tryItOut("/*for..in*/for(let __proto__\t.prop in ((<y><z/></y>)((Object(<x><y/></x>)))))#1#;");
tryItOut("while((([-3/0.__lookupGetter__(\"constructor\").throw((new (prop)(let)))].sort(gc))) && 0){for(let y in [5,6,7,8]) export *; }");
tryItOut("L: {with({prop: 3})gc() }");
tryItOut("constructor = (<><x><y/></x></> == prop)((function  __parent__ (__noSuchMethod__) { yield __proto__ } (window, *::*)), ({a1:1})).__defineGetter__(\"prop\", function  prototype ([__count__, , , ]) { yield new (window)() } )");
tryItOut("if((eval(\"@foo\",  '' ))) { if (new (function  prop (__iterator__, __proto__) { return <x><y/></x> } )(prototype.__parent__ setter=  \"\" , null) *= [constructor|=<x><y/></x> \"\" ]) {throw [[1]]; }} else /*infloop*/for(this.__defineSetter__(\"__proto__\", gc) .@ undefined.__proto__ =  /x/ ; (#1=(false ? window : <><x><y/></x></>)); let (__noSuchMethod__ =  /x/ ) <\t><x><y/></x></>) { }");
tryItOut("if(<> </>) let (__parent__, __noSuchMethod__) { /*infloop*/Lfor(var prop = this; <><x><y/></x></>; *) ;export *; } else  if (constructor.__count__ = ({__parent__: constructor,  get __count__()<><x><y/></x></> })) export *; else {/*infloop*/for(const ({ prototype: ({ prototype: __iterator__ }) }) = ((uneval([15,16,17,18].map(this, <><x><y/></x></>)))); __iterator__ = *::*;  /* Comment */constructor) return <x/>; }");
tryItOut("/*infloop*/M:do {prop =  '' \r *= break M;, __proto__ = undefined } while((__parent__ = prototype %= prop = 4.));");
tryItOut("yield -3/0;\nM:if(([<x/>].sort((3.141592653589793).__defineSetter__))) { if ([false for (prop in window)]) export prototype; else {export *;var constructor = __proto__; }}\n");
tryItOut("with({prototype: (__proto__ = (-1)\n)}){nullyield; }");
tryItOut("/*infloop*/for(__count__; __parent__.__proto__ = @foo; /*\n*/this.__defineSetter__(\"__noSuchMethod__\", Math.pow)) let (__count__) { gc() }");
tryItOut("if([(let (constructor = [,], constructor) window) for each (__proto__ in <><x><y/></x></>)]) { if (new (__iterator__)) continue L; else let (__iterator__ = false, __iterator__ = window) { {} }}");
tryItOut("{ /* Comment */[z1] }");
tryItOut(" { /*infloop*/for(let [({ *::*: prototype })] = [] = (this)[<x><y/></x>]; __iterator__; window for (prop in this).valueOf(\"number\")) {null;return @foo; } } ");
tryItOut("if((window[window])) /*infloop*/for(0; <><x><y/></x></>; this) gc() else  if ( /x/g  = <><x><y/></x></>) <employee id=\"1\"><name>Joe</name><age>20</age></employee>");
tryItOut("/*for..in*/for(const prop = [11,12,13,14].some in <xxx>{__count__}</xxx>) /*infloop*/L:for(yield __count__; ((<><x><y/></x></>).call(undefined, __noSuchMethod__));  /* Comment */<x/>) <x><y/></x>;(({function::__count__ getter: /a/gi }));");
tryItOut("throw StopIteration;");
tryItOut("{throw __iterator__;const __count__; }");
tryItOut("/*infloop*/M:while(1e+81){continue M;(__noSuchMethod__)  /* Comment */\n<x/>, 'fafafa'.replace(/a/g, <><x><y/></x></>)  }");
tryItOut("switch(__proto__.prototype getter= (prototype).watch) { case (<><x><y/></x></>)(<x><y/></x>): export *;break;  }");
tryItOut("/*for..in*/for(const  /x/g .__parent__ in ( /x/  /= <><x><y/></x></>)) if( /x/ ) {} else  if (prop) let prop = <><x><y/></x></>, prototype;");
tryItOut("try { return; } catch(prototype if ( /x/ .*)) { ({}).__lookupGetter__ } catch(constructor if (new Iterator([], @foo)))\n { continue L; } ");
tryItOut("yield");
tryItOut("M:while((<xxx>{prop}</xxx>) && 0){ }");
tryItOut("let (__iterator__) { /*infloop*/L:for(var try { return ++__noSuchMethod__--; } catch(\f__count__) { with({}) { return; }  } finally { return (*\n); } ; (#1=[function::__count__-=x::__count__]); __count__ = *::*.@*)  }");
tryItOut("with({prototype: new Number((uneval(033)))}){/*for..in*/M:for(const __proto__ = prototype = constructor in 1.3) __count__, setter =  /x/ ; }");
tryItOut("");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = (<x><y/></x>.(<><x><y/></x></>)) in .2) const yield = <x/>, prototype = prototype;\n/*for..in*/for(const [__parent__, __iterator__//h\n] = __iterator__.__count__ setter= new Function in <x/>) {let (__proto__, __count__) { /*for..in*/for(let __parent__ in <x><y/></x>) var __count__, __count__; }var __parent__ = <y><z/></y>, constructor = __iterator__; }\n");
tryItOut("do <x><y/></x>; while((<x/>.<x/> = (<x><y/></x>)) && 0);");
tryItOut("L: {/*for..in*/for(var prop = <x/> in *::*) 1e-81\ngc()\n }");
tryItOut("with({}) let __count__;");
tryItOut("while((-1.__defineSetter__(\"prop\", ((new Function(\"return;\"))).apply)) && 0){if(<y><z/></y>.__defineGetter__(\"__iterator__\", [1,2,3,4].slice)) { if (({})) {Math.powcontinue M; }} else \t }");
tryItOut("__proto__ = *, __count__ = prototype;");
tryItOut("{if(__proto__ = window, constructor = [[]]) export constructor; else {; }__count__ = <><x><y/></x></>, __iterator__ = false; }");
tryItOut("prototype");
tryItOut("gc()");
tryItOut("with({__noSuchMethod__: new (<y><z/></y>.yoyo((<><x><y/></x></> == __iterator__)))(((yield *)) .@ <y><z/></y> <<= undefined,  ''  ? false : *)})let prop, __count__ = *::*;");
tryItOut("if(prop = __count__) export *; else  if ( /x/g ) return;");
tryItOut("var __noSuchMethod__");
tryItOut("const constructor, __iterator__ = this\n");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {/*for..in*/L:for(__parent__ in ((function () { <y><z/></y> } )(*))){var __parent__ = <x><y/></x>;return @foo; } } while(undefined);");
tryItOut("{yield;export constructor; }");
tryItOut("let __count__;");
tryItOut("/*for..in*/L:for([constructor, __iterator__] = (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(eval(\"<><x><y/></x></>;\",  /x/g ))) in *::*) switch((#1=[#1#].propertyIsEnumerable(\"__iterator__\"))) { case ( \"\"  .@*::  /x/g ):  }");
tryItOut("let __noSuchMethod__ = <x/>, __count__\n\n/*for..in*/for(this in *) {L:while((null) && 0)\t{var __proto__; } }");
tryItOut("while((((this ? function ([y]) { } : <><x><y/></x></>) :: this.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__))) && 0);");
tryItOut("if(*) { if ((uneval(Number()))) {\texport __noSuchMethod__; } else /*for..in*//* nogeckoex bug 349964 */ for  each(const ((prop)) in <x/>) __parent__}");
tryItOut("/*for..in*/for(const prototype in  /x/ ) var __noSuchMethod__, W = true;");
tryItOut("{yield __parent__;; }");
tryItOut("while((constructor = let) && 0){let __count__ = 1e-81;yield <y><z/></y>; }");
tryItOut("if( /* Comment */*) { if (4.) return; else {const __iterator__, __iterator__; }}");
tryItOut("(eval(\"return;\", <><x><y/></x></>.__lookupSetter__(\"__iterator__\")))(yield) = __proto__;");
tryItOut("if((eval(\"\\r({__iterator__.__count__: ((<x><y/></x> for each (function::__proto__ in 1e+81)))()})\", [#1# >> null for each (prototype in <><x><y/></x></>) if (prop)] ^=  in <x/>))) if( \"\" ) {; } else  if (<><x><y/></x></>) <><x><y/></x></>; else let __count__ = false, constructor; else {L:if([z1]) {<x><y/></x>; } else  if ( \"\" ) (window)//h\n; else {{} }return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var prop in (([1,2,3,4].slice)(new (new Function)())))gc()\n");
tryItOut("/*infloop*/while(new function  prop (/*for..in*/M:for(x::new  () in ((this.__defineSetter__(\"try { throw *::*; } finally { ({}).hasOwnProperty } \", [1,2,3,4].slice))(0/0.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty).watch(\"prop\", ({}).hasOwnProperty))))const function::__parent__ =  /x/ ;) /x/g (<x><y/\n></x> ?  \"\"  :  /x/g \n))/*for..in*/for(var __noSuchMethod__ in ((Function)(let (__proto__ = 0x99) __noSuchMethod__))){}");
tryItOut("if(((__iterator__ = __count__) instanceof ~arguments /= Object( \"\" , #3={a:#3#}))) { if ((!prop.hasOwnProperty(\"prop\"))) var __noSuchMethod__; else {; }}");
tryItOut("let(__iterator__ = eval(\"gc\", <y><z/></y>)) ((function(){__noSuchMethod__ = __iterator__;})());");
tryItOut("var prop = *;");
tryItOut("/*infloop*/for(<x/> + <x/>; if(__proto__) { if (false) {(undefined);export __count__; } else return window;}; <x/>) {yield;(<y><z/></y>); }");
tryItOut("if(void *.prop = *) { if (({})) {return;<x><y/></x>; }} else return -1;");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = ( \"\"  / (0.1(function ([y]) { }, <x><y/></x>))) in [#1=[#1#]].map(new Function)) {return; }");
tryItOut("with({}) { __parent__ = __parent__; } ");
tryItOut("/*infloop*/L:for(<x/>; @foo; <y><z/></y>) <><x><y/></x></>;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in eval(\"<><x><y/></x></>\", @foo)) <><x><y/></x></>;\nyield false; }");
tryItOut("do gc() while((#3={a:#3#}) && 0)\nwith({prop: (4..@foo)}){yield <x/>;; }");
tryItOut("/*for..in*/M:for(var (__iterator__) in false) {export *; }/*\n*/");
tryItOut("L:switch(__iterator__ = <x><y/></x>) { default: break; export __iterator__;break; break;  }");
tryItOut("yield  '' ++;");
tryItOut("/*infloop*/while(window >>>=window){yield ({}); }");
tryItOut("const __iterator__, prototype;");
tryItOut("export *;");
tryItOut("M:if(({ get __parent__(prop, prototype)<><x><y/></x></>, __count__ setter: this }) .@*:: new function  __iterator__ (constructor) { yield ({prototype: true}) } ()) {yield <x><y/></x>; } else  if ((new RangeError()) @ ({ __parent__: __iterator__, constructor: prop }) = true >> ({a2:z2})) with(prototype)throw <x><y/></x>; else {return __noSuchMethod__;yield *; }");
tryItOut("throw prop;");
tryItOut("function  __iterator__ (__proto__) { return; }  const prototype\r;");
tryItOut("L:if(__iterator__ | window) ;");
tryItOut("if(<x><y/></x>) { if (<x><y/></x>) [[]]} else var __count__, __iterator__;");
tryItOut("with(*::*.__defineGetter__(\"__proto__\", false)){return; }");
tryItOut("/*infloop*/for(const __iterator__; undefined;  /x/ ) yield\nexport __count__;");
tryItOut("");
tryItOut("__noSuchMethod__;");
tryItOut("/*for..in*/for(let [__count__, prototype] = ({prop: (p={}, (p.z = <x><y/></x>)()) if (<x/>).isPrototypeOf([11,12,13,14].some).@*,  get prop(getter, __iterator__)'fafafa'.replace(/a/g, ({}).hasOwnProperty) }) in ((__count__ = ({ __iterator__: __proto__ })).valueOf(\"number\"))) {throw prop; }");
tryItOut("__count__ = __parent__;");
tryItOut("with({constructor: ({prop: <y><z/></y>, __noSuchMethod__: [,,z1] })}){;yield eval; }");
tryItOut("return delete (<y><z/></y> ^ <><x><y/></x></>);");
tryItOut("if(this) { if ([[1]]) {return;(<><x><y/></x></>).__defineSetter__ }} else {throw this;export __count__; }");
tryItOut("/*infloop*/do {__noSuchMethod__export constructor; } while(<x><y/></x>);");
tryItOut("{if(<x><y/></x>.(@foo)) { if (this.__defineGetter__(\"__count__\",  '' )) {yield false; } else {; }}return; }");
