
tryItOut("return;");
tryItOut("L: {return;export *;export prop; }");
tryItOut("return (( '' .__lookupGetter__(\"prop\")))(__proto__);");
tryItOut("export *\n");
tryItOut("return;");
tryItOut("prototype");
tryItOut("do const constructor = #3={a:#3#}, constructor; while(((<y><z/></y> ? this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice) : 'haha'.split)) && 0);");
tryItOut("let (({ __count__: ({ __noSuchMethod__: ({ constructor: ({ __count__: __noSuchMethod__ }), __parent__: [__count__] }), delete: ({ __count__: ({ constructor: prop }) }) }), <><x><y/></x></>['__iterator__']: __parent__ }) = <xxx>{__parent__}</xxx>, __proto__ = new false.__defineGetter__(\"__noSuchMethod__\", Math.sin) in ([[]][[z1]]), __parent__) { const __noSuchMethod__ = __iterator__, __parent__; }\n");
tryItOut("if(-0) {export *;yield false; } else {let (prop = __count__) { (({a1:1})); } }");
tryItOut("/*for..in*/for(const J in <x><y/>\t</x>.\f(<><x><y/></x></>)) {(window);var __parent__ = <y><z/></y>; }");
tryItOut(" \"\" ; const __noSuchMethod__;");
tryItOut("/*infloop*/for(let prototype = 1.3; *::*; <><x><y/></x></>) {}\n");
tryItOut("let(__noSuchMethod__, ) { try { throw prop; } catch(__iterator__) { yield 1.2e3; } ");
tryItOut("/*infloop*/for(__noSuchMethod__; (uneval({})); this) {function ([y]) { };/*for..in*/for(var prototype in <y><z/></y>) {let __parent__, __count__;; } }");
tryItOut("if(@foo) let __proto__; else {const __count__ = <x/>, __count__ = window; }");
tryItOut("if((yield x::prop.__iterator__)) {throw <><{prop}></{prop}></>; } else  if (({ __iterator__: 1.2e3 }) = (* ? true : <x/>)) {export *;with({}) prop = function::constructor; }");
tryItOut("{}");
tryItOut("/*infloop*/L:do  while(Date(prop, <x><y/></x>) in prop.prototype);");
tryItOut("/*infloop*/for(033; <><x><y/></x></>--; ((prototype.(-1)) %= __proto__.(4.))) gc()");
tryItOut("if(\n '' ) {continue ; }");
tryItOut("if(__count__ = null) throw {};");
tryItOut("if(eval(\";\", ('fafafa'.replace(/a/g, function(y) { yield y; /*infloop*/for(prop = ({a2:z2}); <x/>; <y><z/></y>) {export *; }; yield y; })))) let __count__, __count__; else  if ([<x><y/></x>]) {continue ; } else ");
tryItOut("return (*++.hasOwnProperty(\"__parent__\"));");
tryItOut("/*for..in*/for(const __parent__ = (3.141592653589793 = <><x><y/></x></>) in this) {prototype; }");
tryItOut("__parent__");
tryItOut("return;\nyield;\n");
tryItOut("if([this]) {} else  if ((window.hasOwnProperty(\"__parent__\"))) return  \"\" ; else export __iterator__;");
tryItOut(";");
tryItOut("if(new (@foo[0x99])( /x/ , *)) { if ((1e+81 !==  /* Comment */ /x/g  /= (<><!--yy--></>.((p={}, (p.z = *::*)()))))) {return <x><y/></x>;return  /x/ ; }} else ");
tryItOut("switch(++(new (1 for (x in []))(@foo, @foo)).isPrototypeOf([,,z1])) { case (<>\n({})</> += (prototype.__noSuchMethod__ = (p={}, (p.z = <><x><y/></x></>)()))).hasOwnProperty(\"constructor\"): break; default: break; case new Error().propertyIsEnumerable(\"prop\"): /*infloop*/do {export constructor; } while((new Function).call(@foo, __proto__, constructor));break; case ({ __noSuchMethod__: __iterator__ }) = ( /x/g  if (<x><y/></x>)): while((new (new Function)()) && 0){{; } }break;  }");
tryItOut("/*for..in*/for(const constructor in (((new Function(\"prop, __iterator__ = ({});\")))(__iterator__ = [])))constructor const prop");
tryItOut("M:with((new Function()))break ");
tryItOut("let(__count__, __proto__ = 1e-81) ((function(){throw window;})());");
tryItOut("/*infloop*/while((yield __iterator__ = <><x><y/></x></>))while((true) && 0)function (__count__, __parent__) { Math.sin } ");
tryItOut("with({}) { yield *; } ");
tryItOut("let(__iterator__ = 0.1) ((function(){})());");
tryItOut("/*infloop*/for(var __iterator__; this , ; (__count__-=__noSuchMethod__)) {let prop; }");
tryItOut("with(this){yield *::*; }");
tryItOut("/*infloop*/for({} +=  /x/g ; *::* != <x\f><y/></x>; ([undefined].some(({}).hasOwnProperty))) {}");
tryItOut("for(let y in [5,6,7,8]) const constructor = true, __parent__ = @foo\nreturn *::*;");
tryItOut("/*for..in*/for(var prototype in ((__count__.isPrototypeOf(window))(<x/>))){/*for..in*/for(const [prop, constructor] = 1.3 in  \"\" ) { } }");
tryItOut("/*infloop*/for(__proto__.(<><x><y/></x></>) &= ((window.throw(false)).throw(*::*.constructor)); (p={}, (p.z = <x/>)()) >>= __parent__ = prototype; ((({__noSuchMethod__ setter: (function (__count__, __count__)try { \fexport *; } catch(constructor) { return 4.; } finally { yield; } ).call, function::constructor: -1 })))(([11,12,13,14].map)).__defineGetter__(\"prop\", (({}).hasOwnProperty).call)) { }");
tryItOut("M:if(<><xxx {__noSuchMethod__}={prop = (prototype = __proto__) instanceof Number(({prop: <><x><y/></x></>}), __noSuchMethod__)} /></>) {M:with({__proto__: 1.3()})__iterator__ = __noSuchMethod__;return 0.1; } else  if ((__iterator__ = \nthis.propertyIsEnumerable(\"__proto__\"))) {/*infloop*/for(var __parent__; [[]]; prop = 5.0000000000000000000000) {continue ; } } else {if(-function(y) { yield y; export __iterator__;; yield y; }) let __parent__ = window, __proto__ =  \"\" ; else gc() }");
tryItOut("switch(((__proto__.__proto__ = (<x><y/></x>.throw(#3={a:#3#}))).__count__ = )) { default: break; /*infloop*/for(var \t__parent__; <x/>; *::*) return  /x/ ;gc()break;  }");
tryItOut("\tif((({prototype: (prop = *::*)}))) {(<x><y/></x>);<><x><y/></x></> } else yield;");
tryItOut("let ([({ __parent__: [try { this.zzz.zzz; } catch(function::__iterator__ if (function(){let(__iterator__ = (this.__defineSetter__(\"let\", (true).watch)), __noSuchMethod__) { })()) { for(let y in []); } catch(constructor) { return <><x><y/></x></> ? 0x99 :  /x/g ; } , __noSuchMethod__, , ({ prop: prop, constructor: __parent__ }), ], __proto__: ({ __parent__: prototype, __iterator__: [__proto__, __count__, ] }) }), [prototype, __noSuchMethod__, ({ __parent__: ({ __iterator__: __count__, prototype: __iterator__ }) }), constructor, ]] = (\n__iterator__)) { with(__proto__ = <x><y/></x>){<><x><y/></x></>;const get = this, __noSuchMethod__; } }");
tryItOut("/*for..in*/for([__parent__, set] = * &  /x/  in *::*) {continue ;__count__, __proto__; }");
tryItOut("/*for..in*/\tfor(const __parent__ = (__count__ in this) !== ({a2:z2}) .@x:: <x/>\t << <x/> in new ((1 for (x in [])))(<x/>)) return <y><z/></y>\t;");
tryItOut("/*infloop*/L:while(Function()){export *;prototype, __count__ = @foo; }");
tryItOut("if(this.__defineGetter__(\"constructor\", this)) yield; else  if ((p={}, (p.z = )())) export *; else {break L;\n[1,2,3,4].map\nlet __proto__: <><x><y/></x></>, __noSuchMethod__;\nconst __parent__ =  \"\" ;\n }");
tryItOut("M:do {{} } while((const constructor = this) && 0);");
tryItOut("try { yield; } finally { var prototype = __iterator__; } ");
tryItOut("return;");
tryItOut("/*infloop*/for(const prop; <x/> >= 3/0; ([,,])) var constructor, __parent__ = __parent__;");
tryItOut("while((-3/0 , *::*) && 0)yield;");
tryItOut("return prop;");
tryItOut("L:if(+*::*) export prototype; else continue ;\n/*for..in*/\n");
tryItOut("__iterator__\n");
tryItOut("(new Function(\"continue L;\"))\nwith()throw <><x><y/></x></>;\n");
tryItOut("{}if(*::* >> __noSuchMethod__) { if (typeof <x/>(new (@foo)(window, window), <><x><y/></x></>)) [,,z1];} else {__iterator__; }");
tryItOut("/*infloop*/for(new \t[1,2,3,4].slice(); -<x/>.__lookupGetter__(\"__noSuchMethod__\"); *) {break ; }");
tryItOut("yield\nwhile((<x><y/></x>.(<><x><y/></x></>)) && 0){/*\n*/gc() }");
tryItOut("/*for..in*/L:for(let [__parent__, prototype] = gc(1.3 .@*:: <x><y/></x>, false) .@*:: new Array((__parent__ = prop\f), __iterator__.hasOwnProperty(\"__iterator__\")) in __proto__) { }");
tryItOut("/*infloop*/do {M:if(-3/0) { if ([z1,,]) {export *; } else yield [z1];} } while( /x/ ); const __proto__;");
tryItOut("if(__iterator__ = true) return; else  if (1.2e3.watch(\"__count__\", gc)(window !== *::*, undefined)) yield;");
tryItOut("{__proto__, __proto__ = window;\t({}).hasOwnProperty }");
tryItOut("if(([1,2,3,4].map).call(prototype = __count__ ^ <employee id=\"1\"><name>Joe</name><age>20</age></employee>, this)) {for(let y in []); } else  if (yield __noSuchMethod__;.constructor setter= function () { return prototype.throw(window) } ) ;");
tryItOut("with({}) (0 ?  /x/  : <><x><y/></x></>)(yield [z1,,]) = __parent__;");
tryItOut("if([this.__defineSetter__(\"__iterator__\", Math.sin)].map((true).watch)) { if (let (__iterator__) [,,]) ; else }\n");
tryItOut("/*infloop*/for(const constructor = (new ('haha'.split)((function(q) { return q; }).call(window, function ([y]) { }).__lookupGetter__(\"__count__\"))); __count__.__proto__ = ((((\n<x/>) if (constructor))).constructor = constructor.constructor); ({constructor: (-- /x/  | ({constructor: *::*})),  get __iterator__(__noSuchMethod__) { yield *::* }  })) <zzz>(__parent__ = (1 for (x in []))(<><x><y/></x></>, -3/0) <<= (__parent__%=-3/0))</zzz>");
tryItOut("if(__parent__ = *.unwatch(\"prototype\")) { if ('fafafa'.replace(/a/g, (.2).apply)) export *;} else {/*infloop*/while((p={}, (p.z = this)())); }");
tryItOut("with({__noSuchMethod__: ({a2:z2})-=(this.__defineGetter__(\"constructor\", @foo))})let (<xxx {prototype}={delete {}} />) { var prop = window, __parent__; }");
tryItOut("[] = __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("if(* >> <><x><y/></x></>.__defineSetter__(\"__count__\", (new Function(\"if( \\\"\\\" ) \\f{function () { yield <x/> } return *; } else  if ( /x/ ) {__proto__ =  \\\"\\\" ; } else {{} }\")))) /*infloop*/L:while(__parent__-=<><xxx>{prototype}</xxx></>)L:with((yield @foo))const __iterator__, prototype; else  if (__parent__.(new Error(__count__)).__count__) /*infloop*/for(<x/> , <y><z/></y>; window .@x:: 1.3; __iterator__ = this) prototype, __noSuchMethod__; else {__count__;yield  '' ; }");
tryItOut("return <x><y/></x>.prototype = <y><z/></y>;");
tryItOut("L:if(.2 ?  /x/  : null) { if ( \"\" .throw(__noSuchMethod__) , prop if ([1,,])) {} else {/*for..in*/for(const __count__ in (([1,2,3,4].slice)(true)))gc()return; }}");
tryItOut("while((@foo) && 0){<y><z/></y>; }");
tryItOut("/*for..in*/M:for(const __parent__ = <x><y/></x> in .2) constructor = <><x><y/></x></>, prop;");
tryItOut("with({constructor: this}){let __parent__ = break ;, __parent__; }");
tryItOut("if(<x><y/></x> >> <x/>) export __count__; else  if ((/a/gi(<x><y/></x>, false).__defineSetter__(\"prototype\", function  prop (function::__proto__, prototype)({ __count__: constructor, __iterator__: __iterator__ }) = __iterator__))(([11,12,13,14].some))) {{(constructor);return; } } else /*infloop*/L:for(<><x><y/></x></>.eval(null); __iterator__ = (([1])[<x/>]); ('haha'.split(({})))) {({}).hasOwnPropertyreturn; }");
tryItOut("L:if(({__count__: \n[<><x><y/></x></> if ([[1]])], __iterator__:  /x/  })) { if (<x><y/></x> && window) {L: break M; }} else (*::*);");
tryItOut("break M\nexport *;");
tryItOut("/*infloop*/M:for(const prototype; new ({})(); new (({}).hasOwnProperty)(((033).__defineSetter__).call(-__parent__, ))) {throw (-0);yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const __parent__ in ((gc)(__noSuchMethod__ = @foo)))let prototype, __noSuchMethod__ = 1e81;/*infloop*/for(__count__; <><x><y/></x></>; __iterator__) {}if(new function (prototype) { (window); } ((<><x><y/></x></>.valueOf(\"number\")))) { if ( /x/g ) ;} else {false }");
tryItOut("(033);\n{}\n");
tryItOut("L:if((true - __proto__)) constructor else  if (({__noSuchMethod__ getter: ({}).hasOwnProperty, prototype: constructor.yoyo(false) }) , [undefined].map( /x/ ).watch(\"__proto__\", Math.pow)) M:if(<y><z/></y>) gc()");
tryItOut("L:if((<x/> ^= 1e-81)) if(__iterator__) {; } else  if ((-0)) return; else {export __parent__; } else  if ((new (__iterator__ for each (constructor in window))())) {__iterator__ = constructor, __proto__; }");
tryItOut("switch( /* Comment */<x><y/></x>.__count__) { default: \n{\n}\n }");
tryItOut("/*infloop*/for(let __proto__; __noSuchMethod__ = window; constructor = <><x><y/></x></>) ");
tryItOut("switch(()) { default: M:with/*\n*/({constructor: __count__}){ }case new ((new Function(\"gc()\")))((<><x><y/></x></>.propertyIsEnumerable(\"prototype\")), undefined.__parent__): L: {let constructor, constructor; } const constructor;break; case 0: yield;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const yield null.__defineSetter__(\"x::__parent__\", 'haha'.split).__iterator__ in __count__ = [[]]) {function  __iterator__ ()<><x><y/></x></>var constructor = window, prototype; }");
tryItOut("if(( + [z1]\n)[function::__iterator__ = 0/0 ? prop = <y><z/></y> : false ||  \"\" ]) function (constructor)false else  if (eval(\"({ __noSuchMethod__: prototype, __parent__: prototype }) = <x><y/></x>.@foo\", let (__proto__ = 1e-81, __count__ = [[1]]) <><x><y/></x></>)) L: {} else [z1,,]\nreturn;\n");
tryItOut("if([(-1)].filter([1,2,3,4].slice)) {export __noSuchMethod__; } else {export *; }");
tryItOut("M:if(<><x><y/></x></>) { if (1.3) {{try { (<x/>); } finally { var __parent__; } return; };return @foo; } else  '' ;}");
tryItOut("L: {while((4.) && 0){export __count__;throw *::*; } }switch(__parent__) { default: break; case 1: break; case 2: break; return true;case 9: break; case <x><y/></x>: export *;case 6: return null;break; \t;case 4: yield; }");
tryItOut("if(*) {if(arguments.__noSuchMethod__) {return <><x><y/></x></>;__proto__; } else var __noSuchMethod__, constructor = *::*;yield <x><y/></x>; } else  if ( /x/ .yoyo( /x/ ) if (<y><z/></y>)) /*for..in*/L:for([prototype, prop] = *::* in <x><y/></x>) return;");
tryItOut("let(__proto__ = let (__iterator__, __parent__) ((<><x><y/\f></x></> for each (prototype in null)))) ((function(){return 1e-81 >= (function(y) { yield y; export prop;; yield y; }).call(__proto__, );})());");
tryItOut("return ('fafafa'.replace(/a/g, Math.pow));");
tryItOut("M:do {; } while(((<x><y/></x>)[1e4]) && 0);");
tryItOut("/*infloop*/for(__count__ = 0.1; <x><y/></x>; <><x><y/></x></>) var prototype, __proto__;");
tryItOut("");
tryItOut("throw  /x/ ;");
tryItOut("/*infloop*/while(this | *)let prototype = constructor = <x><y/></x>;");
tryItOut(";throw 3.141592653589793;");
tryItOut("__proto__, __proto__");
tryItOut("/*infloop*/for(let __noSuchMethod__ = (\n__iterator__ = <><x><y/></x></>); window; (constructor) = this.constructor) {let constructor, prop =  '' ;\tif(window) yield  /x/ ; else  if (prototype) <x/> else var constructor; }");
tryItOut("L: if(<><x><y/></x></>) {export __iterator__; } else  if ([,,z1]) {continue ; } else export *;");
tryItOut("function(q) { return q; }if(* * <x><y/></x>\t) { if ((<x/>.watch(\"__noSuchMethod__\", eval))) throw this; else throw <y><z/></y>;}");
tryItOut("{/*infloop*/do { } while(<x/>); }");
tryItOut("if(__proto__) let __parent__; const __iterator__;");
tryItOut("/*for..in*/for(let __count__ in ((Function)(this.zzz.zzz .@x:: ('fafafa'.replace(/a/g, function  __proto__ (x::__noSuchMethod__) {  } )) !== (RegExp( /x/g , <y><z/></y>)))))return\n([[1]]);");
tryItOut("with({__count__: __iterator__.((this.prop\n))})continue M\n\n{}");
tryItOut("/*infloop*/for(__parent__; (-1); false) export *;");
tryItOut("switch(({ __count__: __noSuchMethod__, __proto__: __parent__ }) = this.__defineSetter__(\"__count__\", __parent__)) { case <><x><y/></x></>(window): default: case 0: yield; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (__count__ = <x><y/></x>) in <x><y/></x>) __noSuchMethod__;");
tryItOut("if(([[]].yoyo(3))) {export gc; } else  if (@foo.__defineSetter__(\"__iterator__\", (function () { yield; } ).call)) {break M;; }\nwith({__iterator__: *})return;");
tryItOut("if(\n(constructor = __iterator__)) export prototype;return; else  if ([1,,]) {let __iterator__, prop = <><x><y/></x></>; } else {; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__noSuchMethod__) in ((yield <x/>)).valueOf(\"number\")) {yield (function(q) { return q; }).call(<x><y/></x>.isPrototypeOf(*::*), <y><z/></y>, <><x><y/></x></>); }");
tryItOut("{/*infloop*/M:do {L:with([])gc() } while( /x/g );try { prototype = __iterator__; } catch(__proto__) { with({}) { export *; }  } finally { throw StopIteration; }  }");
tryItOut("/*infloop*/L:do __parent__; while(Math.sin);");
tryItOut("/*for..in*/M:for(let [__iterator__, constructor] = (this.__defineSetter__(\"constructor\", 0/0)) .@*:: this.zzz.zzz in arguments) {; }");
tryItOut("switch((Error(@foo)) ? (*::*.__noSuchMethod__) : (0/0.isPrototypeOf([[]])))/*\n*/ { case <bbb xmlns:ccc=\"__parent__ = [[1]]\n\"><ccc:eee></ccc:eee></bbb>: {}do {export __count__; } while((__proto__) && 0);( '' );break ;break;  }");
tryItOut("/*for..in*/for(const __parent__ = eval(\"((this.__defineGetter__(\\\"prototype\\\", /a/gi)))\", ((this(new ([1,2,3,4].map)(<><x><y/></x></>), window)).propertyIsEnumerable(\"__count__\"))) in (prop.__lookupSetter__(\"__noSuchMethod__\"))) {/*for..in*/L:for(constructor in (([([11,12,13,14].sort)])(<x><y/></x> %= <x/>.constructor = (__proto__) in <y><z/></y> / constructor))){if(constructor) {continue ;throw undefined; }with(false)function  __parent__ (prop)[,,z1] }/*infloop*/M:while(<x><y/></x>){gc() } }");
tryItOut("/*infloop*/do {if((__iterator__ .@ <x><y/></x>)) gc else  if (((<x><y/></x>).__defineSetter__).call.__lookupGetter__(\"function::__parent__\")) {false; } else throw let __noSuchMethod__;;if(1e4) {var __parent__ = (-0);export window; } else  if (.2) const __noSuchMethod__; else {export *; } } while(#3={a:#3#}.throw( \"\" ));");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ = (<x><y/></x>.([1,,])) in (function ([y]) { })()) { }");
tryItOut("/*infloop*/do throw StopIteration; while(new Error(*::*));");
tryItOut("switch(('fafafa'.replace(/a/g, new Function))) { case 0: break; default: break;  } const __count__;");
tryItOut("/*infloop*/while(__noSuchMethod__ = <x/>.eval(@foo)){const prop, __parent__ = 1.2e3; }");
tryItOut("{if(<><x><y/></x></>) {const constructor, __proto__ = <x><y/></x>; } }");
tryItOut("with({}) { prop = __noSuchMethod__; } ");
tryItOut("with({__count__:  /* Comment */@foo.__iterator__ = *})L: {[z1]; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype.__noSuchMethod__ in true) {gc() }");
tryItOut("return;");
tryItOut("/*for..in*/for(const __iterator__.__iterator__ in [15,16,17,18].filter(function(q) { return q; }, (([[]] !== *)++))) {/*for..in*/for(var __parent__.constructor in ((gc\t)(<><x><y/></x></>.__proto__))) }");
tryItOut("/*infloop*/for(#0= /x/g ; *::* ? <x><y/></x> : *::*; true) export *;");
tryItOut(";\nvar __iterator__ =  \"\" , __noSuchMethod__;\n");
tryItOut("/*infloop*/\ffor(var [, __iterator__, , [, __count__, , constructor, ], ] = ((constructor.__count__ = <y><z/></y>).throw(__iterator__ = <x><y/></x>)); ((function ([y]) { })().isPrototypeOf(prop) if (<x/>)); ('fafafa'.replace(/a/g, 'haha'.split))) {return __noSuchMethod__; }");
tryItOut("if(({__parent__: window, constructor: [].constructor = false.valueOf(\"number\") })) {return\nL:do {return 1e4; } while((function ([y]) { }) && 0); } else  if (( /* Comment */ '' )) var __count__ = function(id) { return id }; else (__noSuchMethod__ = __noSuchMethod__\n)");
tryItOut("/*for..in*/for(__iterator__ = <><{prop}>>-3/0/> </{prop}></> in ((yield <y><z/></y>))) /*for..in*/M:for(let prop in (( /x/ )(new 'haha'.split()))){export __proto__; /x/g ; }");
tryItOut("M:if([] = __proto__ = window >>> <><x><y/></x></>) {/*infloop*/while(#1=[#1#]){yield;[1,2,3,4].slice } } else /*for..in*/M:for(const [__count__, __proto__] = (yield <><x><y/></x></>) in [11,12,13,14].filter) {while((*::*) && 0); }");
tryItOut("if((__proto__ = prop)) yield;throw  '' ; }");
tryItOut("throw StopIteration;");
tryItOut("let(prop =  /x/g , __noSuchMethod__) { yield (<><x><y/></x></>);");
tryItOut("/*infloop*/for(const ({ get: {{} } }) = (-3/0 >>> *::* && 3); (yield export __proto__;.prop); void <x><y/></x> === this) ;");
tryItOut("__parent__");
tryItOut("/*for..in*/for([constructor, __count__] = this.__defineGetter__(\"__count__\", function(y) { yield y; true;; yield y; }) in new ()()) {return; }");
tryItOut("/*infloop*/for(let [, prototype, , , ] = <xxx>{prop}</xxx>; ((new Function(\"export __iterator__;\"))).call(new <y><z/></y>, undefined.__proto__,  /x/ ); (@foo.isPrototypeOf(window))) window");
tryItOut("{with({__noSuchMethod__: function(y) { yield y; export setter;; yield y; }})(1 for (x in []))M:/*\n*/if(<><{__proto__}>yyy</{__proto__}>\t</>) { if ((( /x/  - *::*) % ({a2:z2}))(__iterator__))) throw <x><y/></x>; else return;} }");
tryItOut("with({__count__: <><x><y/></x></>(this).__lookupGetter__(\"__parent__\")})/*for..in*/for(var Exception() in ((#2=({__iterator__:  /x/g }))(((p={}, (p.z = (__iterator__ = arguments))()))))){M:if(<y><z/></y>) { if (__proto__) yield  '' ; else { }} }");
tryItOut("{}");
tryItOut("/*for..in*/for(const (__parent__.__parent__)['constructor'] in ()) /*infloop*/do let __iterator__; while((p={}, (p.z = (new __parent__()))()));");
tryItOut("if((true.throw(true))) gc() else  if (({a2:z2}) :: *) {yield window; } else return;");
tryItOut("{(null);if( \"\" ) { if (<><x><y/></x></>) } else return; }");
tryItOut("for(let y in [5,6,7,8]) 0 = __count__;");
tryItOut("return true; const __parent__;");
tryItOut("/*infloop*/for(__count__; constructor = (function ([y]) { })(); (033\t <=  /x/g )) {__count__;export prop; }\n/*for..in*/for(constructor in (((({}).__lookupGetter__).call)(<><x><y/></x></>)))constructor;\f\n");
tryItOut("if([new 'haha'.split(__count__)].sort(/a/gi)) (prototype); else  if ((<ccc:ddd><ccc:ddd><>@foo</><!--yy--></ccc:ddd></ccc:ddd>))  else {do {var __proto__, prop = <x/>;return; } while((<x><y/></x>) && 0);while((<><x><y/></x></>) && 0){export prop;return function ([y]) { }; } }");
tryItOut("return;if(*::*) { if ( /x/ ) {{} } else {(1 for (x in [])) }}");
tryItOut("if([z1,,] ? function ([y]) { } : window) var prototype = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in [[]]) {yield;export __noSuchMethod__; }\n{}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__.constructor in (<x><y/></x> , prototype)) {prototype/*infloop*/L:for(<x/>; *; <y><z/></y>) __noSuchMethod__ }\nif((<><x><y/></x></> for each (1e81 in function ([y]) { }))) { if ((*::* in function ([y]) { })) {[1,2,3,4].slice }} else const __count__ = (-1);");
tryItOut("{let (let, __parent__) { {} } }");
tryItOut("switch((this |= false.yoyo((<y><z/></y>.__lookupSetter__(\"__noSuchMethod__\"))))) { default: with({}) { try {  } (finally { return  /x/ ;) } case 5: case 8: case 3: if(yield null !== [,,].yoyo(true)) {break ;yield 0x99; } else  if (+(<><x><y/></x></>.propertyIsEnumerable(\"__count__\"))) {export *; } else var prototype, __parent__ = true;break;  }");
tryItOut("return;");
tryItOut("L:if(3.141592653589793) throw  \"\" ; else {export constructor; }");
tryItOut("{break ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var [1,,] in __count__ = <x><y/></x>) {const __parent__;let __parent__ = <><x><y/></x></>; }");
tryItOut("L: /*for..in*/M:for(let __iterator__ in ((this)(#1#))){(1 for (x in []))export __iterator__; }");
tryItOut("( \"\" );");
tryItOut(";;");
tryItOut("do continue M; while((null) && 0);");
tryItOut("do {return;/*for..in*/for(const  \"\" .prop in (((get).watch)((new (new Function(\"gc\"))\f( '' , [,,]))))){let prop; } } while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>) && 0);");
tryItOut("{gc() }");
tryItOut("if(*) { if (__iterator__ = null) continue ;} else {let prototype = null; }");
tryItOut("/*for..in*/for((function ([y]) { })(__noSuchMethod__) in (((1 for (x in [])))( for each (__parent__ in <x/>) for (__parent__ in true)))){yield  \"\" ; }\n");
tryItOut("if(__iterator__ = this) {throw .2;gc() }");
tryItOut("L:if(*) {<x><y/></x>; }");
tryItOut("/*for..in*/for(const [prototype, __parent__] = new (Math.pow)() in [11,12,13,14].sort) continue ;");
tryItOut("this.zzz.zzz;");
tryItOut("gc()");
tryItOut("with((uneval(window)))yield undefined;return <x><y/></x>;");
tryItOut("switch((({}).hasOwnProperty).call(<><x><y/></x></>, )) { case undefined ? -3/0 : (true);.prototype -  ''  / <x/>: break; case Date(<x><y/></x> instanceof false, *): with({}) ( /x/ );break;  }");
tryItOut("return;let __count__ = <x><y/></x>;");
tryItOut("/*for..in*/for(var prop in <x><y/></x>) {continue ; }");
tryItOut("/*infloop*/for(const ({ prototype: prototype }) = [<><bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb></>]; ((@foo).__defineSetter__)().isPrototypeOf( /x/ ); *::*) {break M; }");
tryItOut("with({}) with({}) return;");
tryItOut("with(eval(\"this;\", <x><y/></x>)){let __count__, prop = null; }");
tryItOut("/*for..in*/for(var __proto__ = ([15,16,17,18].sort(function(y) { yield y; while((undefined) && 0){{}break ; }; yield y; }, *::*)) in (yield <><x><y/></x></>)) {( /x/g );if(<><x><y/></x></>.__defineSetter__(\"__parent__\", (new Function(\"constructor\")))) { if ( /x/ .valueOf(\"number\")//h\n) {{} }} else {1e-81 } }");
tryItOut("/*infloop*/for(const __proto__ = eval(\"throw [[1]];\", \n__noSuchMethod__); ((<x><y/></x>.__defineGetter__(\"__proto__\", (new Function(\"return [1,,];\")))) .@ (constructor = []).__lookupSetter__(\"constructor\")); __count__) {; }");
tryItOut("/*for..in*/for(prop in __proto__) return;");
tryItOut("/*infloop*/for(let [] = <bbb xmlns:ccc=\"each = (__proto__ = __proto__)\"><ccc:eee></ccc:eee></bbb>\t; 'fafafa'.replace(/a/g, (constructor).watch); ((p={}, (p.z = this.hasOwnProperty(\"__proto__\"))()))) var constructor = <><x><y/></x></>, __proto__ = window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ constructor: ({ __count__: prototype }) }) in false.yoyo( \"\" )) {(<x><y/></x>); }");
tryItOut("/*infloop*/for(const __proto__; (eval(\"*::*\",  '' )); new ((<><x><y/></x></>.__defineSetter__(\"prototype\", new Function)))()()) export constructor;");
tryItOut("(__noSuchMethod__);");
tryItOut("while((__parent__) && 0){gc()yield  /x/g ; }");
tryItOut("switch(1.3) { default: case 0: break;  }");
tryItOut("/*infloop*/do {export *; } while(arguments); const __parent__;");
tryItOut("if((new Number())) {yield;(<y><z/></y>); } else  if (( { export prop; } .throw(undefined)) >>>=#1#) ;/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype.__parent__ in <x><y/></x>.(__proto__)) {var prop;if(<><x><y/></x></>) { if (0x99) export __proto__; else {\t[(<x/>); }} }");
tryItOut("with({__parent__: window}){( '' ); }");
