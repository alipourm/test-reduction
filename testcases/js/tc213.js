tryItOut("/*infloop*/for([this].propertyIsEnumerable(\"prop\").__defineSetter__(\"prototype\", function(q) { return q; }); __iterator__.prototype; __parent__ = <y><z/></y>) with(constructor.__parent__){__parent__ = false;/*\n*/ }");
tryItOut("{throw this; }");
tryItOut("do {var __proto__, prototype = (-0); } while((<><x><y/></x></> != <y><z/></y>) && 0);");
tryItOut("do /*infloop*/for(constructor =  \"\" ; @foo; <><x><y/></x></>) {break ; } while(([11,12,13,14].filter) && 0);");
tryItOut("/*infloop*/M:for(({ __count__: __parent__ }) = this.zzz.zzz < prototype =  /x/ ([1].hasOwnProperty(\"prop\")); (prop = undefined);  /* Comment */(__proto__)) {gc() }");
tryItOut("gc()/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <><x><y/></x></>) Math.sin");
tryItOut("prototype.__parent__");
tryItOut("if(<x><y/></x>\n) { if (function(q) { return q; }) {return 0;gc() } else {export *; }}{if([\r for (__noSuchMethod__\n in window)]) {yield window;\rreturn __count__; }L: [1,2,3,4].slice }");
tryItOut("/*for..in*///h\nfor(const __proto__ in ((<x><y/></x>)(*::*))\f){<><x><y/></x></>,  \"\" continue ; }");
tryItOut("let(({ prototype: __count__ }), __proto__) ((function(){for(let y in []);})());");
tryItOut("let(prototype, __count__ = __noSuchMethod__.__iterator__ = <x><y/></x> >= <><x><y/></x></>) ((function(){__iterator__ = prop;})());");
tryItOut("throw prop;");
tryItOut("/*infloop*/while((__iterator__ = ({ __noSuchMethod__: ({ __iterator__: [, __proto__, , <><x><y/></x></>.__parent__, ({ __parent__: [__proto__, prop, ], prototype: [constructor, , ] })] }) })))/*for..in*/for([prototype, __proto__] = (this.zzz.zzz) in <x/>) {export *; }");
tryItOut("if(~<><x><y/></x></>) { if () {var __proto__ = this; }} else ");
tryItOut("\tif(new ([15,16,17,18].some(/a/gi, <y><z/></y>.unwatch(\"prototype\")))()) { if (\n({__iterator__: @foo})) /*infloop*/L:for( /x/g ; false;  /x/ ) null;} else /*for..in*/M:for(const __count__ = *::* in window) ");
tryItOut("M:if(__parent__) { if (constructor) {export function::__count__;export *; }} else {Function }\n(function ([y]) { })()\nyield  /x/g ;");
tryItOut("return undefined\nyield;");
tryItOut("/*for..in*/for(const (__iterator__) in ((eval)((yield (<><x><y/></x></>.__count__//h\n = this))))){/*for..in*/for(const __parent__ = prop = #1# in prototype) {/*infloop*/for(__iterator__; window; this) break ; }/*for..in*/for(prototype = ([,,z1].throw( \"\" )) in  /x/g ) eval }");
tryItOut("/*for..in*/for(__noSuchMethod__ = .unwatch(\"__count__\") in (#2=[(new [1,2,3,4].map())])) {yield; }");
tryItOut("L:with({constructor:  /x/ })(#3={a:#3#});");
tryItOut("/*infloop*/do export *; while(( /x/  & [,,]));");
tryItOut("return {};");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__parent__ = new new (function(y) { yield y; return function(id) { return id };; yield y; })\t()((<><x><y/></x></>).watch, <><x><y/></x></>) in <x/>) export __count__;");
tryItOut("if(__parent__.(true)) return <><x><y/></x></>; else  if (__count__.__iterator__ = (\nfalse) & (<><x><y/></x></> /= @foo)) {/*infloop*/L:do {throw window;__iterator__, __iterator__; } while(@foo);/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in __proto__) {} } else {if(!__count__) {__parent__, __count__ = <><x><y/></x></>;continue ; } else  if (--([__iterator__].filter(new Function))) (function ([y]) { })(); else throw <x><y/></x>; }");
tryItOut("/*infloop*/do { /x/ ; } while(<x><y/></x>.(<><x><y/></x></>));");
tryItOut("if(eval(\"return;\", [15,16,17,18].map(eval, false))) yield <x><y/></x>; else  if ((break L)) export __proto__; else {export *;export __proto__; }");
tryItOut("if(([<x><y/></x>])) {(export __noSuchMethod__;); } else {({}).hasOwnPropertyreturn  { (<x><y/></x>); } ; }");
tryItOut("try { with({}) { with({}) __iterator__ = function::__parent__; }  } catch(function::__iterator__) { for(let y in [5,6,7,8]) this.zzz.zzz; } ");
tryItOut("/*infloop*/do export *; while(__parent__ = prop);");
tryItOut("/*for..in*/for(let __iterator__ in ((function(q) { return q; })(false)));");
tryItOut("with({}) { 4 } ");
tryItOut("with( \"\" )return;");
tryItOut("with(((prototype = <x><y/></x>)(1.3)))if([z1]) gc() else  if (<><x><y/></x></>) {(<><x><y/>\n</x></>);export __noSuchMethod__; } else {const prop;gc() }");
tryItOut("/*infloop*/do var constructor, prototype; while(try {  } finally {  } );");
tryItOut("throw constructor;");
tryItOut("Function\n\nM:while((<><x><y/></x></>) && 0){yield; }");
tryItOut("L:if(#1#) { if (3.141592653589793[__proto__]) {return; }} else {/*for..in*/for(let __noSuchMethod__.__parent__ in @foo) {export *; }M:with({__iterator__: (-1) >= window})constructor, __iterator__ }");
tryItOut("let ((__proto__.__noSuchMethod__)) { let (({ constructor: prototype, __count__: __parent__ })) { var __parent__ =  /x/g , __iterator__ = window; } }");
tryItOut("if( '' .__count__) {/*infloop*/L:do return -1; while(<x/>)\nif(<x><y/></x>) { if (function(id) { return id }) let __parent__ = 3; else {continue L; }} } else  if (__iterator__) {let(__parent__) { throw <x/>; }");
tryItOut("switch([,,]) { case 9:  }");
tryItOut("/*infloop*/L:do {{}L:  } while(function (prop) { return new RangeError([,,z1]) } (<x><y/></x> !== <x><y/></x>));");
tryItOut("__proto__ = window, prop = ({a1:1});");
tryItOut("for(let y in []);");
tryItOut("with(window){yield [1,,];return ({a2:z2}); }");
tryItOut("L: export __parent__;");
tryItOut("__count__;;");
tryItOut("if(<x><y/></x>) { if (function::prop) {export *;return true; } else (true);}");
tryItOut("/*infloop*/for(prototype;  /x/ ; 1.2e3) let __count__ = this;");
tryItOut("switch((set.__count__)) { default: if([(this.__defineGetter__(\"window.__iterator__\", function  __noSuchMethod__ (__noSuchMethod__, __parent__)(<><x><y/></x></>)[<><x><y/></x></>.eval(<y><z/></y>)]))].some(function ()if(prototype) {return;{} })) { if (<y><z/></y>.prototype) gc() else constructor =  /x/ , __count__;}break; break;  }");
tryItOut("yield; const prop;");
tryItOut("/*for..in*/for(let prototype in (([1,2,3,4].slice)((\f{ prototype: [] }) = \n<y><z/></y>.unwatch(\"*::*\"))))if((__noSuchMethod__)[*]) throw <><x><y/></x></>; else  if ((this.__defineSetter__(\"__iterator__\", function  prototype (__iterator__) { return false } ))) gc() else const prop =  \"\" ;");
tryItOut("M:do { } while((null) && 0);");
tryItOut("if(@foo) { if (<><x><y/></x></>) {yield \t<x><y/></x>;break M; }} else {return; }");
tryItOut("if( /x/g ) { if ([*::* for (__iterator__ in window)]) {throw  '' ; } else return <><x><y/></x></>;} const __proto__;");
tryItOut("__proto__ = (function  __count__ (__count__) { return (\f<x><y/></x>)(let (prop, __proto__ =  /x/ )  \"\" , @foo) } )");
tryItOut("/*for..in*/for(let [constructor, prototype] = (({__proto__: (* ? this : <x><y/></x>), __count__ setter: function  __count__ () { return <x><y/></x> }  }).valueOf(\"number\")) in <x><y/></x>.*) {var __noSuchMethod__ =  /x/g , constructor = <><x><y/></x></>;(<><x><y/></x></>); }");
tryItOut("{with({__noSuchMethod__: (({prop: 3.141592653589793 }).valueOf(\"number\"))})/*infloop*/while(false){(<><x><y/></x></>); } }");
tryItOut("if((__parent__ = window)) { if (export __noSuchMethod__;) {with({__proto__: (function (__count__, __iterator__)__iterator__).call(function::__noSuchMethod__, <><x><y/></x></>).unwatch(\"__count__\")}){return  \"\" ;return -0; } } else {__noSuchMethod__do {(<><x><y/></x></>); } while((<><x><y/></x></>) && 0); }}");
tryItOut("prop = constructor;");
tryItOut("for(let y in [5,6,7,8]) return (false\n);");
tryItOut("/*infloop*/\rfor(const ({ prototype: ({ constructor: prototype }) }) = Iterator(arguments); (constructor = (p={}, (p.z = *::*)())); 'fafafa'.replace(/a/g, /a/gi)) {; }");
tryItOut("/*infloop*/for(3.141592653589793;  '' ; <><x><y/></x></>) {throw  /x/g ;prototype; }");
tryItOut("M:do {Math.sin } while((<y><z/></y>) && 0);");
tryItOut("if(<x/>) { if (__parent__ = undefined) {export constructor; }} else ;");
tryItOut("{constructor = <x><y/></x>; }");
tryItOut("while((false) && 0)(undefined).watch\nyield <y><z/></y>;\n");
tryItOut("for(let y in [5,6,7,8]) yield \nconstructor.__proto__;");
tryItOut("/*infloop*/M:for(__iterator__; this || *; try { return <><x><y/></x></>; } catch(__parent__) { break ; }  / <><x><y/></x></>) throw null;");
tryItOut("/*for..in*/for(let __parent__ = ((function  __proto__ (__proto__, __count__) { return this.__defineGetter__(\"prototype\", function  __proto__ (constructor)1e81) } )((export *;).call(__noSuchMethod__, __proto__, #1=[#1#]), (prop\n))) in __parent__ &= <x/>) {return;throw  \"\" ; }");
tryItOut("with({__count__: true ? *::* : prop})export __proto__;");
tryItOut("if(new (( /x/g ).__defineSetter__).call(( /* Comment */<x><y/></x>))) {gc() } else  if (eval(\"yield;\", this)) {L:if(__proto__.__proto__ getter= Function) export __count__; } else export *;\nbreak L;\n");
tryItOut("/*infloop*/for(let constructor; window; <x><y/></x>) {break L;export *; }");
tryItOut("for(let y in [5,6,7,8]) __count__ = @foo, getter;");
tryItOut("while((*) && 0){(1 for (x in [])) }");
tryItOut("if(@foo /= this) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in this.__defineGetter__(\"__parent__\", function(q) { return q; }) .@x:: <x><y/></x> = [1]) {if( \"\" ) { if (window) (undefined); else {constructor; }} }");
tryItOut("/*infloop*/for(constructor;  \"\" ;  '' .hasOwnProperty(\"__count__\")) export *; const __parent__;");
tryItOut("{}export __noSuchMethod__");
tryItOut("/*for..in*/for(var [__proto__, prop] = (<x><y/></x>.(0.1)--) in  '' .eval(__noSuchMethod__)) while((undefined ^ @foo['__proto__'] = __iterator__ = __proto__) && 0){export *;(__iterator__); }");
tryItOut("/*infloop*/for(var __parent__; eval(\"new function () { export *; } (window, <x/>)\",  /x/ ); (<x><y/></x> < <x><y/></x>) .@x:: (\n<y><z/></y>)) {prop }");
tryItOut("/*infloop*/do export *; while( /* Comment */this);");
tryItOut("/*infloop*/while((new Function())){if(yield 1.3) __parent__; else  if (@foo) {gc(); } }");
tryItOut("continue M");
tryItOut("{{{(<y><z/></y>).watch } }(__parent__);\n__noSuchMethod__, __iterator__ = null;\n }");
tryItOut("M:do {export prototype; } while((<x/>) && 0);");
tryItOut("if(-0.yoyo(\n)) while((<><x><y/>\f</x></>.yoyo(prototype)) && 0){gc()(*::*).__defineSetter__ }\n else L: \tL: {return;(this).__defineSetter__ }");
tryItOut("if(this >>> (function ([y]) { })()) { if (Array().prop) {yield __parent__; } else {/*infloop*/M:for(const __iterator__ = [,]; <><x><y/></x></>;  '' ) __count__ }}");
tryItOut("prop = constructor;");
tryItOut("if((Iterator())) \r{if(prototype) var prop = 1e4;\t else  if ((yield window)) {return;return false; } } else  if ((*::* & <x><y/></x>)) {/*infloop*/for(@foo;  \"\" ;  \"\" ) {/a/gi }continue L; } else {gc() }");
tryItOut("/*for..in*/M:for(let x::__count__ = 1.2e3 in @foo) {;return -3/0; }");
tryItOut("/*infloop*/M:for(let ({ __parent__: ({ __iterator__: __parent__, prop: prop }), __count__: ({ __noSuchMethod__: __parent__, constructor: constructor }) }) = ({__proto__: (prop%=<x><y/></x>) }); (__count__[[z1,,]] !== <>\f<x><y/></x></>); <x><y/></x> for each (__noSuchMethod__ in __count__).unwatch(\"prop\")) {break L;break M; }");
tryItOut("try { return [,]; } catch(constructor if <x><y/></x>) {  } catch(constructor) { (null); } finally { export constructor; } ");
tryItOut("/*infloop*/while(prop = window)/*for..in*/for(__parent__ in 1.3) export *;");
tryItOut("with(Exception(new (Math.sin)()))export __noSuchMethod__;");
tryItOut("/*infloop*/while((__count__ ^ this)[((this)[__count__])])\ffunction (__count__, prop)<><x><y/></x></>");
tryItOut("/*infloop*/for(var prop; ({}); <x/>) gc()\nexport prop;");
tryItOut("({033;yield undefined;) }");
tryItOut("M:if(((new Boolean(yield <x><y/></x>, (var constructor = this;.@foo).eval((true && false)))) , ([1]\n).watch(\"__iterator__\", function  __proto__ (__proto__)<x><y/></x>))) {export __parent__\ncontinue ; } else  if (__count__: (*::*.isPrototypeOf(<x>//h\n<y/></x>))) {;/*infloop*/for(let ({ constructor: __iterator__ }) = -<x><y/></x>; <></>; <x><y/></x>) yield; } else {/*infloop*/while(yield)<><x><y/></x></>;if((__proto__ =  /x/g )) Math.pow else {export constructor;throw prototype; } }");
tryItOut("/*for..in*/for(var prop((uneval((<><x><y/></x></> != undefined)))) in ((((function(q) { return q; }).call(<y><z/></y>, null,  /x/g ).constructor = new new Function(<x/>(__iterator__))))(prop .@*:: 3.141592653589793 === /*\n*/this.__defineGetter__(\"delete\", [1,2,3,4].map)))){switch(constructor) { case this:  } }");
tryItOut("/*infloop*/for(const [] = +<y><z/></y>; __proto__.__parent__; __count__.constructor =  \"\" ) export __noSuchMethod__;");
tryItOut("export __proto__;");
tryItOut("{export *; }");
tryItOut("with({constructor: [] = (-1) >>= [1]})throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in ((p={}, (p.z = export __parent__)()))) switch(window) { default: /*for..in*/for(__iterator__ in ((/a/gi)([[1]]))){export __parent__; }break; break; break; case 1: /*infloop*/L:for(<x/>.__defineSetter__(\"__parent__\", Math.sin); (this.__defineGetter__(\"__parent__\", /a/gi)); [1,2,3,4].slice) {var __noSuchMethod__; }return;case 5: L:if(<><x><y/></x></>) {continue ; } else  if (<y><z/></y>) {let __noSuchMethod__ = <x><y/></x>; } }");
tryItOut("/*infloop*/do let (__parent__,  = *::*) { *::*; } while((__parent__ = this).__defineGetter__(\"constructor\", new (Math.sin).apply(*::*.@foo)));");
tryItOut("with({__count__:  \"\" })if(0.1) { if (0) this} else {let __count__, __count__; }\n");
tryItOut("with({prop: (((1e-81)[ /x/ ]) .@  \"\" )})const __count__ = constructor;");
tryItOut("if(this.zzz.zzz <=  \"\" .prototype) {/*for..in*/for(const __iterator__ = <xxx>{constructor}</xxx>.(<x><y/></x>) in 1.3) {\texport *; } } else  if ((__proto__.prototype).hasOwnProperty(\"__noSuchMethod__\")) return;");
tryItOut("L: {return; }");
tryItOut("with(\n(<x><y/></x> for each \r(__iterator__ in 1e+81))){throw  '' ;yield eval(\";\\nexport __count__;\\n\\t\", __count__); }");
tryItOut("M:switch(__count__.(yield <x><y/></x>)) { case 9: break; case 8: yield <x><y/></x>;break; default: break;  }");
tryItOut("with({}) { __noSuchMethod__ = __noSuchMethod__; } ");
tryItOut("/*for..in*/for(var [constructor, __proto__] = __proto__.__noSuchMethod__ = __parent__ = <y><z/></y> in <x/>.valueOf(\"number\")) L:do yield  /x/g ; while((prop: __count__) && 0);");
tryItOut("L: {var prop = <y><z/></y>, prop;function(q) { return q; } }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("L:with({__parent__: (*.@* ? ([11,12,13,14].filter) : Error())}){let (__proto__ = <y><z/></y>) {  } }");
tryItOut("{{continue ;gc() }if() { if (#2=({__proto__: @foo})) {} else export __iterator__;} } const __proto__;");
tryItOut("if(__noSuchMethod__ = 1e81.eval( '' .propertyIsEnumerable(\"__proto__\"))) { if ([prototype]) export constructor;} else {gc() }");
tryItOut("{{} }");
tryItOut("{return;/*for..in*/for((null) in ((({__parent__:  /x/ }))( { const get = 0/0; } ))){return;var __proto__ = 4., __count__; } }");
tryItOut("if(- '' ++) { if ( '' ) yield <x><y/></x>;} else break M;");
tryItOut("L: return;");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = ([11,12,13,14].filter) in <x><y/></x>) {(undefined); }");
tryItOut("yield ();");
tryItOut("\n");
tryItOut("({ __parent__: [, , ] }) = ([@foo].__lookupGetter__(\"prop\"))");
tryItOut("if((1e81)[*::*]()) let __count__; else  if (033 *= window.isPrototypeOf(('fafafa'.replace(/a/g, (<y><z/></y>).watch)))) export function::__count__;");
tryItOut("/*for..in*/M:for(const constructor = __iterator__ = [z1,,] in ({a2:z2})) {;export function::__count__; }");
tryItOut("/*for..in*/for(let constructor in (([1,2,3,4].map)((new (function  constructor ()function ([y]) { })(this)--)))){if(function  constructor (, prototype)window) yield <y><z/></y>; }");
tryItOut("yield\n;");
tryItOut("{returnyield; }");
tryItOut("return <x/>;");
tryItOut("/*infloop*/do {(<y><z/></y>); } while(<><x><y/></x></>\n);");
tryItOut(";");
tryItOut("return;");
tryItOut("/*infloop*/do __noSuchMethod__ = this; while(({prototype setter: ({}).__lookupGetter__, prototype getter: (new Function).apply }));");
tryItOut("gc()\nexport *;\n");
tryItOut("return (__noSuchMethod__ = 1e81.eval((({__iterator__: [1,2,3,4].map(<y><z/></y>)}))[__parent__.prop]));");
tryItOut("with(this)/*for..in*/for(let constructor in this) export __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in ((p={}, (p.z = <x><y/></x>)()))) {return <x><y/></x>; }");
tryItOut("switch(new __count__(3/0, window)) { case 6: break; /*for..in*/for(var prototype.(null) = ({__noSuchMethod__: prototype }) in prop) return <x/>;default: gc()\n }");
tryItOut("if((this.zzz.zzz)) {if(<><x><y/></x></>.eval(<x/>)) export *; } else {with(new (function (delete, __parent__) { yield <x/> } )((-1), *))/*infloop*/do case ( /x/  << __noSuchMethod__): var __parent__ = <x><y/></x>, __parent__; while(<><x><y/></x></>)\nbreak M;yield <x><y/></x>; }");
tryItOut("L:if(__proto__.propertyIsEnumerable(\"__proto__\")) {/*infloop*/M:for(this; 1e-81; []) {throw get;gc() } }");
tryItOut("{}\nif(4..yoyo(<y><z/></y>)) { if ( /x/ ) throw *;} else {gc()(@foo); }\n\n");
tryItOut("");
tryItOut("yield;");
tryItOut("L: return;");
tryItOut("{if(0/0.__lookupSetter__(\"prop\")) {let __count__ = <y><z/></y>;{} } else  if ((({__noSuchMethod__: -0, __iterator__: true }))) {} else {function(q) { return q; } } }");
tryItOut("do {/*for..in*/M:for(const prop in ((Math.sin)(prototype = __iterator__)))export prototype; } while(((( /* Comment */window) ? eval(\"export __count__;\", true).* :  /x/ )) && 0);");
tryItOut("if((p={}, (p.z =  '' )())) do const __iterator__; while((<x><y/></x>) && 0)\nexport *;");
tryItOut("if(prop) {throw prototype; }");
tryItOut("yield;");
tryItOut("/*for..in*/for(__parent__.__count__ in <y><z/></y>) return;");
tryItOut("/*infloop*/M:while((*::*).call(({}) << prop, )){}");
tryItOut("/*infloop*/M:for(__parent__; .2; __iterator__) __count__ = <><x><y/></x></>, __proto__;__iterator__;");
tryItOut("/*infloop*/for(({ prop: ({ each: ({ prop: ({ __count__\t: prototype, prototype: prototype }), constructor: prop }) }), __proto__: x::__iterator__ }) = (({constructor: (<x/>.unwatch(\"constructor\")) })); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>(<bbb xmlns=\"prop.(<{__count__}></{__count__}>)\"><ccc:ddd>yyy</ccc:ddd></bbb>, constructor = __count__); <x/>) {yield;break ; }");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("let __noSuchMethod__; const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in  '' ) throw [z1,,];");
tryItOut("/*for..in*/for(var ({ function::__proto__: __iterator__ }) in ((new Function)(this)))throw <><x><y/></x></>;");
tryItOut("let (__iterator__ = (/*\n*/__iterator__ = [[1]]), __parent__) { /*infloop*/for(constructor = [this]; new Array(this);  \"\"  > <x/>) {} }");
tryItOut("/*infloop*/L:for(const [, ({ __noSuchMethod__: ({ __parent__: ({ prototype: __proto__, constructor: __count__ }) }) }), ({ prop: ({ set: [constructor, , \t], __parent__: yield }), __iterator__: __iterator__ })] = Iterator(<y><z/></y>, <x><y/></x>).*; @foo = \r__noSuchMethod__ = __parent__; (<><zzz><><x><y/></x></>.*</zzz></>.prop)) {let __proto__;\n/*for..in*/for(constructor in <x><\fy/></x>) {gc() }\nprop, prototype; }");
tryItOut("");
tryItOut("/*infloop*/L:do if(constructor ? ({a1:1}) :  /x/g ) { if ((<x><y/></x>++//h\n)) {let getter = <y><z/></y>, __proto__; }\f else {gc() }} while(__parent__+=((\n*) == prop = 5.0000000000000000000000 >>>=<><x><y/></x></>));");
tryItOut("do {/*for..in*/for(var constructor.__proto__ in (new 0/0(<><x><y/></x></>))) {const prop = [z1], __count__; }/*infloop*/M:while(let (prototype =  '' ) true)const __count__; } while((*::*) && 0);");
tryItOut("export *;");
tryItOut("let prototype, prop = *::*\n/*for..in*/for(constructor in constructor) {yield; }");
tryItOut("((*::* :: function(id) { return id }))(this) = __proto__;");
tryItOut("if((__noSuchMethod__.__noSuchMethod__ = <y><z/></y>.@*.throw(<><x><y/></x\n></> /= 1e-81)).prop = (yield <bbb xmlns:ccc=\"\nfunction::__parent__\"><ccc:eee></ccc:eee></bbb>)) {prop; } else  if ((<zzz>__parent__.prototype</zzz>.throw((constructor)))) {;\n;\n }");
tryItOut("do throw <><x><y/></x></>; while(((-0)) && 0);");
tryItOut("((({prop: (<><x><y/></x></>++)})).throw(__proto__.prototype getter= Math.sin - null++.__lookupSetter__(\"__iterator__\")))");
tryItOut("yield;");
tryItOut("gc() const prototype;");
tryItOut("switch(prop) { case __noSuchMethod__|=0.1 *= {}: /*for..in*/L:for(let __count__.prop in constructor) export *;break;  }");
tryItOut("if( /x/ ) { if (0) export __iterator__; else {}}");
tryItOut("if(<><xxx>{__proto__}</xxx></>) {while((033) && 0){gc }/*for..in*/for(var [__count__, prop] = [, ] = @foo in <x><y/></x>) {;switch(1e81) { default:  } } } else export constructor;switch(<zzz>__parent__</zzz>) { default: break;  }");
tryItOut("/*for..in*/for(let [constructor, __count__] = new ( ''  == __proto__)(prop, window) in 'fafafa'.replace(/a/g, (new Function(\"[1,2,3,4].map\")))) {do {var constructor; } while((__proto__ = constructor) && 0); }");
tryItOut("with({prop: (({__iterator__: <x><y/></x>}))}){throw *; }");
tryItOut("M:if((this.zzz.zzz) ||  '' .*) {do {} while((5.0000000000000000000000 &&  '' ) && 0); } else  if ((eval(\"<x><y/></x>--\", -1))) if((Object(<x/>))) let prop, __proto__; const __count__; else {return;prop = #1#; } else {/*infloop*/for(let [, __iterator__]; (<y><z/></y>)(); (false)) while((<><x><y/></x></>) && 0)return <y><z/></y>; }");
tryItOut("yield this;");
tryItOut("with({prop: eval(\"yield [,];\", constructor) ? (__proto__ = <x><y/></x>) : <x><y/></x>.unwatch(\"__proto__\")}){yield  '' ;let __proto__, constructor; }");
tryItOut("let(__count__, ({ __parent__: ({ __proto__: ({ prop: __iterator__, __parent__: prop }) }) }) = (function ([y]) { })() ? (new Iterator(({}))) : (p={}, (p.z = <x><y/></x>)())) { with({}) yield true;");
tryItOut("throw StopIteration;");
tryItOut(";\nL: {}\n");
tryItOut("{; }");
tryItOut("/*for..in*/L:for(const __proto__ in ((function(y) { yield y; (*)\n; yield y; })(@foo)))yield;\n{}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __proto__: [__count__, , , __count__] }) in (uneval(<x><y/></x>))) ");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {Functiongc() } while(((eval)(<><x><y/></x></>, <><x><y/></x></>)));");
tryItOut("while((new Exception(<><x><y/></x></>, <x><y/></x>)) && 0)export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in true) {throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(function::({ getter: ({ __noSuchMethod__: ({ prop: __noSuchMethod__ }) }), __noSuchMethod__: ({ __count__: ({ __iterator__: __count__ }), get: ({ __count__: prop }) }) }) = [__noSuchMethod__([])] in ((*)(new (this.__defineGetter__(\"prop\", /a/gi)) | ((function ([y]) { })() === <><x><y/></x></> * <>\r<x><y/\f></x></>).__defineSetter__(\"__iterator__\", function(y) { yield y; __noSuchMethod__ = [1];; yield y; }) = (this.__defineGetter__(\"__proto__\", (new Function(\"M:with(0.1)return;\"))))))){while(([1].__lookupSetter__(\"prototype\")) && 0)(__proto__); }");
tryItOut("this.zzz.zzz;");
tryItOut("function(id) { return id }.__parent__ = prototype;");
tryItOut("with({constructor: (this.__defineSetter__(\"__iterator__\", Math.sin))}){/*for..in*/__parent__\nL:if(function(id) { return id } !== <><x><y/></x></>) const prototype; else  if (<x><y/></x>) \t[[1]];\n\nprop, __iterator__;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in <y><z/></y>) {\rswitch(-1) { case 1: ;break; default: break;  } }");
tryItOut("yield ([(p={}, (p.z = (function ([y]) { })())())].map(Function));");
tryItOut("L: {if(<><x><y/></x></>) (null); else  if (window) yield <x><y/></x>;; }");
tryItOut("/*for..in*/for(let prop: --[[]] in ((Math.sin)( /x/g .watch(\"__parent__\", 3.prototype))))return ( \"\"  <<= <x><y/></x>);");
