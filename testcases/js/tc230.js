tryItOut("L: (null);");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = __parent__.prop = <><x><y/></x></>++ !== (({}).__lookupGetter__()) in <><x><y/></x></> = __parent__) {yield;return #1#; }");
tryItOut("yield function::__iterator__ /= @foo.__lookupGetter__(\"__iterator__\");");
tryItOut("switch((window ? prototype :  '' )) { <!--yy--> }");
tryItOut("for(let y in [5,6,7,8]) throw <y><z/></y>;");
tryItOut("if((__noSuchMethod__.prototype === eval(\"<><x><y/></x></>\", window).isPrototypeOf(((<x><y/></x>)[prototype])))) <><x><y/></x></>; else  if (window()) {export yield;{} } else eval");
tryItOut("return; const constructor;");
tryItOut("/*infloop*/L:for(var __noSuchMethod__ = false ? <x><y/></x> : 3.141592653589793; (prop = prop >= <><x><y/></x></>); <xxx {prop}={({prototype setter: function  __noSuchMethod__ (prop) { yield <><x><y/></x></> } ,  get constructor(__proto__) { (new Function(\"var prototype = <x/>;\")) }  })} />) {yield <x/>; }");
tryItOut("L:if(({ constructor: ({  \"\" : __noSuchMethod__, prop: __proto__ }) }) = [, ({ __noSuchMethod__: prototype }), , ({ __iterator__: prop, __noSuchMethod__: __parent__ }), ]) if(*) {break ; } else  if (1e81) export __iterator__; else  if (true) const prototype; else {/*for..in*/for([\tconstructor, prototype] = this in <y><z/></y>) (function  __count__ (__count__, __iterator__)function::__parent__).applybreak M; }");
tryItOut("let (__parent__) { if(([][++prototype])) { if (eval(\"yield;\", -0.hasOwnProperty(\"__iterator__\"))) export constructor;} else {while((window) && 0){continue ;return; } } }");
tryItOut("L:if(arguments ^= <y><z/></y>.prop = undefined) ; else  if (()[eval(\"gc()\", <><x><y/></x></>)]\t) 'haha'.split\n");
tryItOut("/*for..in*/for(var __iterator__(new Function([[]], 1e81)) in ~this -= {}) L: return <x/>;");
tryItOut("{/*for..in*/for([constructor, prop] = [,,z1] - <x><y/></x> in 0.1) {<><x><y/></x></>yield  \"\" ; }throw __noSuchMethod__ }");
tryItOut("if(\n<x/>) { if (eval(\"( /x/ );\", undefined)) {;yield; }} else throw undefined;");
tryItOut("throw StopIteration;");
tryItOut("with({}) { return <><x><y/></x></>; } ");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("/*infloop*/while(return){yield 033;<x><y/></x>; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut(";/*for..in*/for(var __iterator__ = prop.eval(<x><y/></x>) in [[]]) {var __count__ = 1e4, constructor = <><x><y/></x></>; }");
tryItOut("/*infloop*/do /*infloop*/for(let __noSuchMethod__; function(y) { yield y; (null);; yield y; }; constructor =  /x/g ) prototype = 1e+81, constructor; while(1.3);");
tryItOut("export __iterator__;\nthis.zzz.zzz;\n\nexport ({ [11,12,13,14].some: ({ __noSuchMethod__: __noSuchMethod__//h\n }), __noSuchMethod__: [, , ] });");
tryItOut("/*infloop*/while((__parent__%=[,])){const __count__ =  /x/g , __iterator__; }(*::*);\nif(arguments) { if ( /x/ ) yield; else {yield;export __iterator__; }}\n");
tryItOut("function (__proto__)<>(({ get  { throw this; }  constructor (__count__, constructor)4., __iterator__: undefined }))</>");
tryItOut("let(__count__ =  '' , __proto__) ((function(){__noSuchMethod__ = <><x><y/></x></>;})());");
tryItOut("/*for..in*/M:for(prototype in ((function(y) { yield y; yield null;; yield y; })(this)))//h\n<x><y/></x>;");
tryItOut("{(<x><y/></x>);var __iterator__; }");
tryItOut("/*infloop*/for((-0).__iterator__; <><x><y/></x></>.__proto__; __parent__ & <><x><y/></x></>) {new Function }");
tryItOut("if((void <><x><y/></x></>--)) {\tyield;gc() } else  if (({})) return <x><y/></x>;");
tryItOut("with({__noSuchMethod__: 3.constructor = function ([y]) { }})/*infloop*/for((@foo)[prototype]; ({a2:z2}).*; ({ set prop() { yield <x/> } , __iterator__: 4. })) {continue M;let prototype, __parent__ =  \"\" ; }");
tryItOut("if( /* Comment */@foo) {__parent____parent__; } else  if (0x99.__defineGetter__(\"__parent__\", 'haha'.split)) {throw null;continue L; } else yield;");
tryItOut("if( /x/ ) { if ((p={}, (p.z = ({ get prop __noSuchMethod__ () { return <x/> } ,  }))())) return  \"\" \nreturn; else yield 0x99;export *;/*for..in*/for(constructor = @foo\t in *::*) {<x/>; }}");
tryItOut("while(([1,,]) && 0){export *; }");
tryItOut("let(prop = <><x><y/></x></>) { (<x><y/></x>);");
tryItOut("while((window) && 0){/*for..in*/M:for([prop, __iterator__] = <y><z/></y> in <><x><y/></x></>) {export constructor; }/*for..in*/for([<y><z/></y>, __parent__] = undefined in *) return <><x><y/></x></>; }");
tryItOut("/*infloop*/for(prop; this.__defineGetter__(\"constructor\",  \"\" ); (function (__count__) { yield; } ).call([[1]], (-1))) {export *;<x/>; }");
tryItOut("try { break ; } catch(__proto__ if 0/0) { yield __iterator__; } catch(prototype) {  } ");
tryItOut("/*for..in*/for(let (constructor).unwatch(\"__iterator__\") in (uneval(arguments))) {while(((3/0.__iterator__ = __parent__)) && 0){const constructor = #3={a:#3#}, constructor;__noSuchMethod__; }/*infloop*/while()function  prop (__parent__, __noSuchMethod__) { yield; }  }");
tryItOut("return (delete|=function ([y]) { });");
tryItOut("/*infloop*/do {L:do {let prototype; } while((try { 3/0; } catch(__parent__ if __proto__) { let prototype = <x><y/></x>; } finally { {} } ) && 0); } while(eval(\"__noSuchMethod__\", *::*));");
tryItOut("/*infloop*/L:do {with(<x/>)gc() } while(__proto__ = <x><y/></x>);");
tryItOut("__iterator__ = __count__;");
tryItOut("/*infloop*/do {return <x><y/></x>; } while(<x/>);");
tryItOut("delete, __proto__");
tryItOut("/*for..in*/for(var __noSuchMethod__ = 1e-81 in <><x><y/></x></>) continue M;Math.pow");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop = window.__parent__ in eval(\"/*for..in*/L:for(const prototype in <x/>) return constructor;\", __parent__.__lookupGetter__(\"prop\"))) let each, prototype =  /x/ ;");
tryItOut("'haha'.split\n/*for..in*/for(var __iterator__ in ((true)((#3={a:#3#} .@ null)))){<><x><y/></x></>; }");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = (yield (p={}, (p.z = ({prop: (), prop: function(id) { return id }-- }))())) in [__iterator__.(__count__ = true)]) {{<x><y/></x>; }L:do {let constructor; } while((5.0000000000000000000000) && 0) }");
tryItOut("if(__parent__.(@foo).__defineSetter__(\"prototype\", (undefined).__defineSetter__)) { if (~yield <x><y/></x>) {(__iterator__); }} else if(null) yield; else  if ([1,,]) let __iterator__ = <y><z/></y>, __parent__;");
tryItOut("/*for..in*/for(const __proto__ in window && __parent__) {L: {export *; } }");
tryItOut("__iterator__;");
tryItOut("return this;\nreturn  \"\" ;\n");
tryItOut("throw StopIteration;");
tryItOut("switch(__noSuchMethod__.@* && (__proto__ =  '' )) { default: var prototype, __count__ = <x/>;break;  }");
tryItOut("/*for..in*/prototype = ++ \"\" , __count__ const __iterator__;");
tryItOut("{M:if(__count__ = window) { if ( /x/g ) {export prop;throw @foo; }} else continue ; }");
tryItOut("{/*for..in*/for(const constructor = (yield *)++ in this.__parent__) export __count__;/*for..in*/for(let [__parent__, __parent__] = \n*::* in <x><y/></x>) D }");
tryItOut("/*for..in*/for(__proto__ = window-- in null) {export __iterator__; }");
tryItOut("return (({__proto__ setter: ({}).hasOwnProperty, constructor: ({prototype: ('haha'.split).call(<y><z/></y>, )}) }));");
tryItOut("yield;");
tryItOut("/*infloop*/M:while((this << window)(++ /x/ ))\tlet (__iterator__) { let prop, __noSuchMethod__; }");
tryItOut("try { var __noSuchMethod__ = this, prototype; } catch(({ prototype: __noSuchMethod__, __iterator__: prototype }) if (function(){(<y><z/></y>);})()) { <x/>; } catch(__count__) { throw this; } ");
tryItOut("with({}) with({}) var prototype;");
tryItOut("/*for..in*/for(let prop = undefined.__lookupSetter__(\"__iterator__\").__defineSetter__(\"__count__\", 'haha'.split) in <x><y/></x> ? this : <x><y/></x>)  /x/g ;");
tryItOut("/*for..in*/L:for(const constructor in ((Math.sin)((this.__defineSetter__(\"constructor\",  \"\" )).valueOf(\"number\")))){if( '' ) {const prop, __iterator__ = 1e4; } }");
tryItOut("/*infloop*/for(<x><y/></x>; false; (/*\n*/#0=0x99)) const __iterator__;");
tryItOut("__proto__\nyield prop");
tryItOut("return __parent__;");
tryItOut("with({prototype: <><xxx>{prototype}</xxx></>}){L:with((__proto__ = [[]])){__parent__;export *; }yield; }");
tryItOut("/*infloop*/for(var __proto__; this.zzz.zzz; this.__defineGetter__(\"__iterator__\", function  prototype (__iterator__, __parent__) { return true } )) {getter, prop = undefined;export *; }");
tryItOut("L:if((p={}, (p.z = *::*)()) >> window || prototype) {gc } else {return;return; }");
tryItOut("if((constructor = prototype.prototype = <x><y/></x>)) if(([15,16,17,18].sort(/a/gi, <x><y/></x>))) break ; else  if (yield \f0x99) {gc() } else \n else  if (window % __noSuchMethod__) {try {  } catch(prop if (function(){{}})()) { yield; } catch(constructor) { return <><x><y/></x></>; } finally { /a/gi } try { ; } catch(__proto__) { (<x><y/></x>); } finally { yield prop; }  }");
tryItOut("/*infloop*/M:for(let prop = window; <><x><y/></x></>; false) return;");
tryItOut("with({__iterator__: undefined}){return <y><z/></y>; }");
tryItOut("return 1e81\n@foo");
tryItOut("__count__;\nthrow undefined;\n");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*infloop*/M:for(const __iterator__; ((__proto__.( /x/ )) % (p={}, (p.z = <x><y/></x> in 4.)())); ([] = {} & this ^= (eval(\"yield;\", 0)))) {/*infloop*/do {export constructor; } while((<x><y/></x>.*));[] }");
tryItOut("L:do let constructor =  /x/g , __count__ = 1e+81; while((<><x><y/></x></>) && 0)");
tryItOut("<xxx {__iterator__}={ \"\" .__iterator__} />");
tryItOut("/*infloop*/for(const __count__; ({ __noSuchMethod__: prop }) = (true ? @foo : constructor);  == ([*::*])) /*infloop*/L:while(<x><y/></x>){yield [z1]; }throw __noSuchMethod__\n");
tryItOut("return new (window)().@*;");
tryItOut("for(let y in [5,6,7,8]) function  __count__ () { yield 1e81 } ");
tryItOut("let(__parent__) { throw constructor;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(var prototype in ) {return; }");
tryItOut("L: let (prototype = new ( \"\" )(false, <><x><y/></x></>)) { gc() }");
tryItOut("L:switch(window.watch(\"__noSuchMethod__\", (__noSuchMethod__.__proto__ = [1,,].throw(__count__)).__defineSetter__)) { case 4: {return  '' ;window } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in [,,]) {*; }");
tryItOut("/*for..in*/for(var [__count__, __count__] = <y><z/></y> in <><x><y/></x>\t</>.__lookupGetter__(\"prop\")) if([true]) {; } else  if (@foo) { } else {let __iterator__, __parent__; }");
tryItOut("gc");
tryItOut("if((yield .2)) {break M\n__count__; } else  if () {[[1]]; } else ;");
tryItOut("return");
tryItOut("/*infloop*/M:while((prototype+=<x/>['__count__']))/*for..in*/for(({ __parent__: [constructor, ], __count__: prop\t }) in  '' ) {yield undefined; }");
tryItOut("//h\nfor(let y in []);break ;");
tryItOut("if((<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\"))) <y><z/></y>; else {export *;Math.pow }");
tryItOut("/*infloop*/M:for(const prototype; (*::*.__lookupSetter__(\"__iterator__\")); ((function ([y]) { })().__defineSetter__(\"prop\", function (constructor, __parent__) { return <><x><y/></x></> } ))) let __proto__\nlet __proto__, constructor = 0/0;");
tryItOut("if(prop.(new ((yield undefined) for each (prototype in 1e4))(*::*, (new (({}).__lookupGetter__)(([<x><y/></x>].filter(function(y) { yield y; ; yield y; }))))))) {{yield <x><y/></x>;export *; } }");
tryItOut("L:while((function::__parent__) && 0){getter = @foo; }");
tryItOut("if(((p={}, (p.z = this)()))) {export function::__count__;let prop = @foo, prototype; } else  if (*::*) export *; else const __iterator__;");
tryItOut("switch(<><x><y/></x></>) { case 0: ; }");
tryItOut("/*infloop*/for(__proto__;  /x/g --; <x><y/></x>--) {do return; while((0.1) && 0); }");
tryItOut("/*infloop*/M:do {if(<x/>) {(false).watchreturn [z1]; }; } while((yield prototype.__proto__ = <x><y/></x>));");
tryItOut("/*for..in*/for(([1,2,3,4].map)()['prop'] in <x/>) {L:with({prototype:  \"\" }){__iterator__export *; } }");
tryItOut("gc()\n");
tryItOut("function (constructor)window\nlet constructor;\n");
tryItOut("throw  \"\" ;\nreturn __noSuchMethod__;\n");
tryItOut("yield;");
tryItOut("if(prototype.prop = new ( \"\" )(prototype)) continue ; else  if (( /x/ .*).valueOf(\"number\")) {; }");
tryItOut("L: /*infloop*/while((-1)){__iterator__; }");
tryItOut("{__count__ = <y><z/></y>; }");
tryItOut("/*for..in*/for(var [__proto__, __count__] = <x><y/></x> in true) {continue ; }");
tryItOut("switch((<xxx>{constructor}</xxx>[(eval(\"<><x><y/></x></>\", null))])) { case 1: L:while(((new new Function(__iterator__, (( /x/ )())))) && 0)({a2:z2});break; case eval(\"__noSuchMethod__.prop getter= 'haha'.split\", ( /* Comment */ \"\" .@* &= (true(null, <x><y/></x>).@foo))): for(let y in []);break; break; break;  }");
tryItOut("L:if(Object(3)--) {yield <x><y/></x>; }");
tryItOut("with({__parent__: ((constructor.delete))}){if(0.1.__defineGetter__(\"__proto__\", (new Function(\"yield this;\")))) let __parent__ = null, __parent__ = <y><z/></y>; else  if (prop) {} else {return } }");
tryItOut("with(__noSuchMethod__%=((Math.pow)())){/*for..in*/for(let __parent__ in (([1,2,3,4].map)( '' ))){var __proto__, constructor; }; }");
tryItOut("if(\f .@*:: (__iterator__ = ((*::*).watch.propertyIsEnumerable(\"__noSuchMethod__\")))) {break \f;(<x/>); }");
tryItOut("let(prop =  '' ) ((function(){export *;})());");
tryItOut("do {yield this;<y><z/></y>; } while(([z1,,]) && 0);");
tryItOut("if(#1=<x><y/></x>.x::__iterator__ = prop = true) { if (function::constructor.__count__ getter= function (__iterator__, prop) { yield ({}) } ) {{} }} else {break L;export *; }");
tryItOut("/*for..in*/for(let \r__count__ in <x><y/></x>) {yield;({}).hasOwnProperty }");
tryItOut("if((p={}, (p.z =  \"\" )())) /*for..in*/L:for(const __parent__ in arguments) {let prototype = null, __parent__;gc() } else M:do {gc()yield <x><y/></x>; } while(((__proto__ = undefined) / ( ''  ? <y><z/></y> : 0.1)) && 0);");
tryItOut("if(({a1:1})) , else const prototype, __parent__ = <><x><y/></x></>;");
tryItOut("let __proto__ = <x><y/></x>;");
tryItOut("if(( /* Comment */let.__iterator__ = [[1]])) L:if( '' ) export __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */(this !== <><x><y/></x></>) .@x:: yield __iterator__.watch(\"__iterator__\", new Function)");
tryItOut("L:if(this.__defineSetter__(\"__count__\", 'haha'.split)) { if ((++undefined).__proto__) ;} else {__iterator__; }");
tryItOut("");
tryItOut("/*infloop*/for(const __noSuchMethod__; (<><x><y/></x></> %= null .@ new undefined -= * %= -3/0.__defineGetter__(\"__count__\", <y><z/></y>));  '' \n) export *;");
tryItOut("do {let prototype, __parent__; } while((([<x/>].map(@foo))) && 0);");
tryItOut(";;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <><bbb xmlns=\"(<x/>)\"></bbb></>) {var __noSuchMethod__;/*for..in*/for(prop in ((([<x><y/></x>]))(__iterator__ = constructor))){yield __count__; } }");
tryItOut("/*infloop*/L:for(__iterator__ = constructor =  \"\" ; arguments / new __parent__ = 1e4(gc(), <x><y/></x>);  /* Comment */this.__defineGetter__(\"__iterator__\", function (__count__, __parent__)<x><y/></x>)) yield new ({})()\n");
tryItOut("if(~*.valueOf(\"number\")) { if (([1,2,3,4].map)(null, <x><y/></x>)) /*for..in*/for([__noSuchMethod__, constructor] = <><x><y/></x></> in  '' ) export *;} else continue ;");
tryItOut("if(-<><x><y/></x></>) {break ;const prototype = prop, constructor; } else  if (@foo || 1e-81) {/*for..in*/for(var constructor in <y><z/></y>) {break ; } } else  \"\" ;");
tryItOut("/*for..in*/for((prop) in ((<>{}</>.(({})\n))(prop.__parent__))){__count__ = undefined;L:switch(-0) { default: yield;break;  } }");
tryItOut("if(__proto__) return window;");
tryItOut("if(__proto__.__noSuchMethod__ = null) { if (<zzz>[[1]] ? 1e4.__noSuchMethod__ : __parent__</zzz>) (function(q) { return q; }).apply else (<x/>);}");
tryItOut("/*for..in*/for(let __parent__ = prototype = (new (new Object()).__parent__ = __parent__ = prototype) in (!@foo) % eval(\"\", (this ::  \"\" )).watch(\"__proto__\", new Function)) return;");
tryItOut("let (__noSuchMethod__, __proto__) { while((__noSuchMethod__ = window) && 0){yield;<x/> } }");
tryItOut("L:if(<x><y/></x> .@ <><x><y/></x></>) { if (undefined & <x><y/></x>) gc()} else export *");
tryItOut("/*infloop*/M:while((window).watch){/*infloop*/do {return; } while(constructor = [1])M:if([__count__ = *].some([1,2,3,4].slice)) { if (false + <x><y/></x>) {}} else ( \"\" ); }");
tryItOut("{}break M;");
tryItOut("L: yield  '' ;");
tryItOut("\tM:if(( catch +=<x/>)) {gc()export *; }\n/*infloop*/for(var prop = prop; <x><y/></x>; <x/>) {break M; }");
tryItOut("/*for..in*/__count__");
tryItOut("/*for..in*/M:for(const <x/>['prop'] in (((({ function::__proto__: prototype }).__noSuchMethod__ setter= ({}).__lookupGetter__).watch)(({ constructor: __proto__ }) =  /* Comment */1e81))){const  { return (-1); } ; }");
tryItOut("export *;");
tryItOut("continue \n");
tryItOut("M:if(true) { if ([z1]) continue M; else const prop, __noSuchMethod__;}");
tryItOut("let (constructor = <y><z/></y>) { ; }");
tryItOut("/*for..in*/M:for(const __proto__ in ((function ([]) { __proto__; } )(new <><x><y/></x></>(<><x><y/></x></>)))){export prototype; }");
tryItOut("if(Math.pow(*::*, [z1]) .@ (__count__ = __proto__)) { if ([1]) {/*infloop*/for(var __count__ = function ([y]) { }; 033; <><x><y/></x></>) {{} } }} else {yield;yield; }");
tryItOut("while((__parent__ = [[]]) && 0)__noSuchMethod__ = constructor;\t");
tryItOut("if(#1#) switch(#1#) { default: yield @foo; }");
tryItOut("{throw <y><z/></y>;/*for..in*/for(var prop = prop = try { gc() } finally { throw 1e-81; }  in @foo)  /x/g ; }");
tryItOut("do yield; while((<>eval(\"{}\", __proto__.__iterator__)</>) && 0);");
tryItOut("L: if((this.zzz.zzz().propertyIsEnumerable(\"__noSuchMethod__\"))) {{} } else yield;");
tryItOut("/*infloop*/do {export *;return; } while(({a2:z2}))\n");
tryItOut("if((p={}, (p.z = ({__proto__: eval(\"var __count__, __proto__ = window;\", <><x><y/></x></>) }).__defineGetter__(\"__iterator__\", <x><y/></x> != <><x><y/></x></>))())) { if (this.__defineGetter__(\"constructor\", (1 for (x in [])))) {/*for..in*/M:for(let __count__ in <x/>) { } }} else {[1,2,3,4].slice | (<><x><y/></x></>.prototype) }\n");
tryItOut("/*for..in*/M:for(let [__parent__, __iterator__] = (__count__ = <><x><y/></x></>.watch(\"__proto__\", (<y><z/></y>).__defineSetter__)) | __noSuchMethod__//h\n = ([11,12,13,14].map) in ((function  constructor (__count__, __parent__) { (<><x><y/></x></>); } ).call)(@foo)) {}\n");
tryItOut("if(3) (<><x><y/></x></>); else  if (window) {;__count__ }");
tryItOut("with(true , <x><y/></x>.__lookupSetter__(\"constructor\"))function(y) { yield y; break ;; yield y; }");
tryItOut("/*infloop*/while(__count__.hasOwnProperty(\"constructor\"))M:if(<x><y/></x>.(<><x><y/></x></>)) {{} }");
tryItOut("if(arguments) {(<x/>)yield; } else  if ((uneval(this @ constructor))) function  __parent__ () { return prototype }  else  '' \n");
tryItOut("/*infloop*/for(var __parent__; <><><{__parent__}> </{__parent__}><{gc()}> </{gc()}><x><y/></x></></>; ([] = undefined)) {/*infloop*/while(1e+81)export *;yield; }");
tryItOut("return ([15,16,17,18].some(Math.sin, __count__));");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(var __parent__; this; 1e+81) {export __parent__; }");
tryItOut("L:switch(true) { case [z1]: yield false;default: if(__iterator__) {gc()throw undefined; } else  if (__count__) {var __parent__ = <x/>, __iterator__ = <x><y/></x>; } else gc()break; case 6: (Math.pow).callbreak; {}break; case 6: /*for..in*/for(const [__proto__, __noSuchMethod__] = *::* in -3/0) ;break;  }");
tryItOut("M:with(([11,12,13,14].map.@foo))with(([15,16,17,18].sort(function (__count__, prototype) { (new Function(\"return  '' ;\")) } , __parent__)) :: (let (prop, prop) <y><z/></y>))/*for..in*/for(__parent__ = undefined in <x/>) return  '' ;");
tryItOut("with(((-1).isPrototypeOf(<x/>)).valueOf(\"number\"))return null;");
tryItOut("{<><x><y/></x></>export *; } const __proto__;");
tryItOut("/*for..in*/M:for((__parent__) in (((({__iterator__: [z1]})))(({ __iterator__: __proto__ }) = __noSuchMethod__))){export __iterator__; }");
tryItOut("this.zzz.zzz;");
tryItOut("if((Math.sin([__iterator__ = <><x><y/><\f/x></> for each (({ __count__: [prop, , ({ prototype: __proto__\t, __count__: __iterator__ }), ({ __proto__: prototype }), constructor] }) in @foo) for (prop in [,]) if (undefined)], (eval(\"{}\", (prop = <y><z/></y>)))))) {export __iterator__; } else  if (this) {export *;return <x><y/></x>; }");
tryItOut("{if(__noSuchMethod__.(<x><\fy/></x>)) { if (constructor = *) break M; else {export *;gc() }}return 4.; }");
tryItOut("return\n/*infloop*/while(<><></></>){/*for..in*//* nogeckoex bug 349964 */L: for  each(var __proto__ in 0.1) prototype = this, prop; }");
tryItOut("__proto__ = <x/>, __proto__ = window;");
tryItOut("switch(this.__defineSetter__(\"__iterator__\", Math.pow)) { default: yield; }");
tryItOut(";");
tryItOut("if(new (function (__proto__, __parent__)<><x><y/></x></>)((0x99 && <><x><y/></x></>), this)) { if (window / prop) { }} else yield;");
tryItOut("(@foo);");
tryItOut("/*infloop*/for(@foo.prototype; (++prop.(.2)); (__iterator__ = this.zzz.zzz)) {}");
tryItOut("/*for..in*/for(@foo in (( \"\" )[prop])) {/*for..in*/for(let prototype in <><x><y/></x></>) {const __parent__, constructor; }export __parent__\n }");
tryItOut("/*infloop*/[__parent__, __proto__]");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for(<y><z/></y>\n; __iterator__ = <></>; null.watch(\"__proto__\", 4.)) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype.constructor in false) {let prototype = <x/>, __iterator__; }");
tryItOut("throw __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var prototype =  /* Comment */let (constructor, __parent__) <><x><y/></x></> in prop) if(window) 3/0;");
tryItOut("/*infloop*/while(void (function  __proto__ () { prop = false; } ).call(window, )){let (__iterator__ = window, __proto__) { (<x><y/></x>); }<x/>; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__count__ = new (({ function::__proto__: [, prototype, gc] })).__defineGetter__(\"prototype\", function () { return; } ) in (\n1e-81)) function ()({a1:1})");
tryItOut("/*infloop*/M:while((Number(this.__defineGetter__(\"prop\", Math.sin), 3/0)\n)){if(5.0000000000000000000000.isPrototypeOf(<><x><y/></x></>).valueOf(\"number\")) { if (default: window;break; case new eval(\"return;\", <y><z/></y>)(): case constructor = function ([y]) { }: break; )  set __count__(prop) { throw <x/>; }  else gc()}return  /x/ ; const prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__noSuchMethod__) in []) {{} }");
tryItOut("if(__noSuchMethod__ = new ( \"\" .unwatch(\"__parent__\"))(null.@*)) { if (__noSuchMethod__ = (p={}, (p.z = ( \"\" [<>case (Array()): yield;break; case ( /x/g .__defineSetter__(\"prototype\", function(q) { return q; })): /*infloop*/for(const prototype = this; *::*; false) {return [z1,,]; }</>]))()) .. typeof ! /x/ ) /*infloop*/L:while((@foo)[ \"\" ])yield;\n{}\n else {(window); }}");
tryItOut("M:if(<x><y/></x>) { if (window) {} else yield <><x><y/></x></>;}");
tryItOut("if(null) {throw  /x/g ;var __count__; } else  if (({}).propertyIsEnumerable(\"__proto__\")) __noSuchMethod__ = <y><z/></y>, __iterator__");
