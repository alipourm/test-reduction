
tryItOut("for(let y in [5,6,7,8]) yield <x><y/></x>\n;");
tryItOut("switch((([z1]).__defineSetter__)()) { case (<x><y/></x> @  '' ): break;  }");
tryItOut("/*for..in*/for([__noSuchMethod__, prop] =  \"\"  in null) while(((({ get __parent__ __proto__ (__count__, __count__) { return <x/> } , prototype: this }))) && 0)throw <><x><y/></x></>;");
tryItOut("if(__count__.(window)) {yield window;__parent__ = window; } else  if ( /x/g ) /*infloop*/for(1.2e3; (@foo.yoyo(5.0000000000000000000000)); <><x><y/></x></>.watch(\"__count__\", function  __parent__ (__iterator__, __proto__)prop)) export function::prop;");
tryItOut("export *;");
tryItOut("return;");
tryItOut("switch(([,] ? [1,,] : *::*)) { case 6: break;  }");
tryItOut("/*infloop*/L:for(__count__; new __proto__.constructor-= /* Comment */*::*((let (constructor, __proto__) <><x><y/></x></>)); undefined @ ((yield [<x><y/></x> for each (__proto__ in  \"\" )] && (-__count__)))) { /x/g  }");
tryItOut("let (prop = (uneval(<y><z/></y>))) { const __count__, prop; }");
tryItOut("let (__iterator__, ({ prototype: ({ prototype: ({ __iterator__: prototype, __parent__:  }) }), __parent__: ({ __count__: [, prop, , , __iterator__] }) })) { /*infloop*/L:for(__noSuchMethod__+=@foo; (uneval( \"\" ));  /x/g ) with(null)return  \"\" ; }");
tryItOut("/*for..in*/L:for(const [__count__, __iterator__] = (window)(this) in <y><z/></y>) {yield; }\n");
tryItOut("this.zzz.zzz;");
tryItOut("{;; }");
tryItOut("/*for..in*/for(var __proto__ in undefined) return;");
tryItOut("{throw -0; }");
tryItOut("switch([[1]].__iterator__) { default: throw throw yield <x><y/></x>;;break; case <y><z/></y>: break; case 5: break; export __count__;case prototype * window: case prop:  }");
tryItOut("var constructor = this\n@foo;");
tryItOut("/*infloop*/while((p={}, (p.z = true)())){3.141592653589793;continue L; }");
tryItOut("{return; }");
tryItOut("/*infloop*/for(prop; ((<x/>)(*, this) /= ( -  .@*:: this)); delete ([*].some((false).__defineSetter__)).watch(\"__parent__\", ((eval(\"window\", <><x><y/></x></>))).\twatch)) if(<x/>) { if (window) {return; }} else break M;");
tryItOut("do {break L;window; } while((1e+81(__noSuchMethod__ =  \"\"  instanceof __parent__-=#3={a:#3#})) && 0);");
tryItOut("throw null;");
tryItOut("/*infloop*/L:while((__count__ for each (constructor in false)))break M;");
tryItOut("break ;");
tryItOut("while((this) && 0){/*for..in*/for(var __iterator__ in *::*) return <x><y/></x>; } const constructor;");
tryItOut("do export prop; while((__count__/*\n*/ = -1) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <y><z/></y>) M:if( '' ) { if ( \"\" ) {export prototype; }} else ");
tryItOut("/*infloop*/for(({ __parent__: ({ prototype: [, , ({ prototype: __parent__ }), ], prototype: ({ constructor: ({ __count__: ({ constructor: [__iterator__, , prototype, prototype, ] }), prototype: ({ __iterator__: ({ prototype: __parent__, constructor: __count__ }), __iterator__: [] }) }) }) }) }) = this.valueOf(\"number\"); ({prop: (1 for (x in [])) }).__defineSetter__(\"prototype\", (function (__noSuchMethod__, ({ __noSuchMethod__: ({ __proto__: __parent__ }), __proto__: constructor }))null.watch(\"__parent__\", <x><y/></x>) > (__count__ =  /x/g )\t).call); ([<x><y/></x>].sort(<x/>) === __iterator__.__parent__ = (window for each (__count__ in <><x><y/></x></>)).eval(<x/>))) {return (function(q) { return q; })();{}\nreturn;\n }");
tryItOut("{export __proto__; }with((__parent__ =  '' )){; }");
tryItOut("/*infloop*/for(var ({ prop: constructor, prototype: false, [<><x><y/></x></> for each (prototype in 1e-81)] }) = null; <bbb xmlns=\"(new -3/0())\"> </bbb>; (window())) {with(__proto__ = __parent__)if(*::*) {continue ; } else {}; }");
tryItOut("__parent__ = this, constructor = <x/>;");
tryItOut("/*infloop*/L:for(var ({ __iterator__: __parent__, prop: constructor }) = <x/> <<= <y><z/></y>; 4.; (new #1=[#1#](<><x><y/></x></>, window))) {Math.powreturn <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let delete.constructor in window) {do {yield;throw <><x><y/></x></>; } while((<x><y/></x>) && 0); }");
tryItOut("return\nyield;");
tryItOut("/*infloop*/for(var __noSuchMethod__; [11,12,13,14].map; (new (3/0)()[<><x><y/></x></>].__lookupGetter__(\"__parent__\"))) prototype = 033, __count__ = <><x><y/></x></>;");
tryItOut("/*infloop*/while(prop.__iterator__ = <><x><y/></x></>){return  \"\" .valueOf(\"number\");while(((new Number(<x><y/></x>.eval(<x/>)))) && 0); }");
tryItOut("/*infloop*/for(__count__; ; <><xxx>{prop}</xxx></>) 'haha'.split\nexport prop;");
tryItOut("/*infloop*/do \f{const prototype = null, prototype;export prototype; } while(<><{__parent__}><bbb xmlns:ccc=\"constructor+=(new Function(\"const __proto__;\"))\"><ccc:eee></ccc:eee></bbb><ccc:ddd></ccc:ddd></{__parent__}></>);");
tryItOut("/*infloop*/for(__proto__ = ; continue L;  /x/g ) return;");
tryItOut("let (prototype, constructor) { __parent__, prototype = <><x><y/></x></>; }");
tryItOut("L:if((('fafafa'.replace(/a/g, new Function)).valueOf(\"number\"))) default: if((uneval(033))) <><x><y/></x></>;break; <><x><y/></x></>; const __iterator__;;\nlet 1e4, __count__ = false;\nbreak;  else {;/*infloop*/for(window; <x><y/></x>;  /x/ ) __iterator__; }\nyield;");
tryItOut("/*for..in*/for(var __count__ = null in false * <x><y/></x>) prototype = __count__;");
tryItOut("/*infloop*/L:while( /* Comment */<x/> .@*:: 4.){export *; }");
tryItOut("constructor = __parent__;");
tryItOut("switch(<y><z/></y>) { default: yield <x><y/></x>;break;  }");
tryItOut("L:switch(constructor.(eval(\"prop\", <><x><y/></x></> ?  /x/  : 1e+81))) { default: continue M;break; gc()break; /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in 033) (<y><z/></y>);break; case 4: return <x/>;case 4: export prototype;break;  }");
tryItOut("if((p={}, (p.z = *::*)())) { if ( /x/g ) return;} else return;");
tryItOut("{while((new Number(window, constructor)) && 0){<x/>Math.pow }/*for..in*/for(let constructor.__count__ in (((*).watch)((<x><y/></x>)()))){{}{} } }");
tryItOut("/*infloop*/for(const prototype; \nthis.__defineSetter__(\"__count__\", (1 for (x in []))); this) export *;");
tryItOut("/*for..in*/for(let __parent__ in (([1,2,3,4].slice)([(undefined.unwatch(\"__parent__\")) for each (prototype in <x><y/></x>) for (prototype in __parent__) for (prop in  /x/ )])))do throw <><x><y/></x></>; while(( /* Comment */((<><x><y/></x></> for each (prototype in null)))) && 0);");
tryItOut("export prop;yield;");
tryItOut("/*infloop*/while((<><>@foo</></>(([1,2,3,4].slice)())))/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __count__) yield;");
tryItOut("var __count__ = ({a2:z2}), __iterator__;\n\n");
tryItOut("do (/; while((({}) & 5.0000000000000000000000) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (({prototype getter: {},  get prop()prop.propertyIsEnumerable(\"prototype\") })) in __proto__ = let (prototype) (<><x><y/></x></>.__noSuchMethod__)) {do {let __iterator__ = <x><y/></x>, __iterator__; } while((1e4) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__.__noSuchMethod__ in null) {return;const __iterator__, __proto__; }");
tryItOut("/*for..in*/M:for(const [__parent__, function::__noSuchMethod__] = this in #3={a:#3#}) {export function::__noSuchMethod__; }\nyield;\n");
tryItOut("export __noSuchMethod__;with(__iterator__ = *::*){let __iterator__ = false, x::__iterator__ =  /x/ ;yield <x><y/></x>; }");
tryItOut("/*for..in*/for(const [prop, __parent__] = (-- /x/ ) in true) {if(<x><y/></x>) {export *; } else  if (__noSuchMethod__) {yield;; }/*for..in*/for(let [__parent__, prop] = eval(\"/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 1e-81) 5.0000000000000000000000\", *) in arguments) {yield true;(*); } }");
tryItOut("{(5.0000000000000000000000 >>>=<><x><y/></x></>); }");
tryItOut("L: { /x/ ;let __proto__ = *; }");
tryItOut("switch(<x><y/></x>) { default: case 8: {}break; case arguments: (-3/0);break; {}break; case <x><y/></x>:  }");
tryItOut("{if((<x><y/></x>)(@foo, <><x><y/></x></>)) yield [z1]; }");
tryItOut("; const prop;");
tryItOut("<{__count__}\r></{__count__}> const __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("yield (delete = (window ^= -3/0));\f");
tryItOut("with(<><x><y/></x></>)function  __proto__ (__iterator__, prototype) { yield __parent__ } ");
tryItOut("yield;");
tryItOut("L: [1,2,3,4].map");
tryItOut("throw StopIteration;");
tryItOut("do if([,,z1]) {(0/0);throw window; } while(((({prototype setter: [1,2,3,4].slice, __count__: <x/> }))) && 0);");
tryItOut("L:while(([,]) && 0)export *;");
tryItOut("M:if(undefined) { if ((function ([y]) { })()) {const __iterator__, __parent__ = window;<><x><y/></x></>; } else {true }}");
tryItOut("/*infloop*/for(__parent__ = <x><y/></x> -= ({a2:z2}) .. RangeError(null) === __count__; [1,2,3,4].slice; this.__defineSetter__(\"prototype\", 'haha'.split)) L:if(({prop: * })) break ; else {(<><x><y/></x></>);break ; }");
tryItOut("L:if(prop = (__count__ .@  /x/g )) { if (__iterator__) {gc() }} else if(<x><y/></x>) __iterator__: typeof  /x/  else  if (<y><z/></y>) var __iterator__ = @foo, constructor; else {<><x><y/></x></>;return  /x/ ; }");
tryItOut("if(<y><z/></y>) {export __iterator__;[1,2,3,4].slice } else export *;");
tryItOut("if(prop.__count__) /*for..in*/\tM:for(__count__ = <x><y/></x>.yoyo(__proto__) in __noSuchMethod__) {{}gc() }");
tryItOut("/*for..in*/({ ({__noSuchMethod__:  /x/ }).prop: ({ __count__: ({ prop: constructor }), constructor: ({ __parent__: __count__ }) }) })");
tryItOut("M:if(__proto__.__noSuchMethod__ =  /x/  < [15,16,17,18].some(function () { yield <x/> } , (({}).__defineSetter__(\"__parent__\", function () { return *::* } )))) { if ((-1)) } else throw false\n");
tryItOut("/*infloop*/L:do {/*infloop*/for((({__parent__: *::*}).hasOwnProperty(\"prop\")\n); undefined.yoyo(1.3)[__count__ = this]; ((new Function(\"\")))(<x/>.*, <><x><y/></x></>)) delete; } while(({prototype:  /x/ }));");
tryItOut("/*infloop*/for(null;  \"\" ; *::*) break L;");
tryItOut("if(__noSuchMethod__) \t{ if ([,,z1]) const  = @foo, constructor; else {return; }}");
tryItOut("yield  '' ;");
tryItOut("{let __proto__, __iterator__;break ; }");
tryItOut("while(([function(id) { return id }) && 0){throw <y><z/></y>; }");
tryItOut("/*infloop*/do  while(prototype.(null));");
tryItOut("if( /x/ ) { if (this.__defineSetter__(\"__parent__\", (undefined).__defineSetter__)) /*infloop*/while([z1,,])return\nexport __proto__;} else /*for..in*/for//h\n(const ({ __iterator__: prop, __proto__: ({ prototype: __noSuchMethod__ }) }) in ((eval)((<x><y/></x>.( '' ) ? <><x><y/></x></>.hasOwnProperty(\"get\") : (window).__defineSetter__())))){}");
tryItOut("L: {L:do var prototype, prototype =  /x/ ; while((#1#) && 0); const __noSuchMethod__; }");
tryItOut("/*infloop*/for(var [] = [, , __iterator__]; \f1e4 += <x><y/></x>; (window .@x::  /x/g )) return window;");
tryItOut("/*for..in*/L:for(var prototype in ((function(q) { return q; })(__parent__ = \t<><x><y/></x></>))){export \t*;throw (-0); }");
tryItOut("return 3.141592653589793;");
tryItOut("/*for..in*/for(var __iterator__ = this.zzz.zzz\t in true += true) {gc() }");
tryItOut("{(__parent__); }");
tryItOut("/*infloop*/M:for(var prop; <> </>; ++__noSuchMethod__) {L: {__proto__ = []; }break M; }");
tryItOut("with((([1,2,3,4].map).call(__count__, try {  } catch(__proto__) {  } finally { continue M; } ))){}");
tryItOut("with(<bbb xmlns=\"<y><z/></y>\"> </bbb>)yield;");
tryItOut("let(({ __noSuchMethod__: __proto__, __iterator__: constructor }) = (__noSuchMethod__ = __iterator__) ?  /* Comment */ \"\"  : ((((@foo).__defineSetter__).call)(*::*, false))) { try { __noSuchMethod__ = constructor; } catch(prop) { throw prop; } finally { let(-1 = <><x><y/></x></>, __proto__) ((function(){export *;})()); } ");
tryItOut("yyy");
tryItOut("throw prop;");
tryItOut("/*infloop*/for([, , ] = (Function((eval)(<><x><y/></x></>))); (p={}, (p.z = @foo)()); constructor) return;");
tryItOut("let (constructor, __noSuchMethod__) { function::constructor = <><x><y/></x></>, prop; }");
tryItOut("switch((__noSuchMethod__ = *::*)) { case 8: continue M;break; gc()break; if( /x/ ) { if (0x99) var constructor = <x><y/></x>;} else ; }");
tryItOut("/*for..in*/for(var [__iterator__, __count__] = prop = function::__proto__ in 3) switch(__proto__) { default:  }");
tryItOut("return __parent__;");
tryItOut("with({__parent__: [[]].__proto__}){gc() }");
tryItOut("L:switch(({prop: 1e4 })) { case 5: break; case 4: case 6: gc()export *;break; default: break; /*infloop*/for(constructor; 0.1; <x><y/></x>) {;var __parent__ = <y><z/></y>, try { ; } catch(__parent__) { const __iterator__, __proto__; }  = 3/0; }break;  }");
tryItOut("prop");
tryItOut("{yield __iterator__;x::prototype, __parent__ = <y><z/></y>; }");
tryItOut("{const prop = *::*, prototype;with(<><x><y/></x></>){try { continue ; } finally { export *; } let __noSuchMethod__ = <y><z/></y>; } }");
tryItOut("/*for..in*/for(__count__ = <x><y/></x> & <><x><y/></x></> in <y><z/></y>) {yield;const prototype; }");
tryItOut("/*infloop*/forconst '__proto__ = ((<y><z/></y>).call( /x/g , getter).propertyIsEnumerable(\"__iterator__\")); (yield *).*<ccc:ddd></ccc:ddd> [(-prop.__noSuchMethod__ setter= /a/gi)]) export *;");
tryItOut("with(<x><y/></x>){{} }");
tryItOut("/*infloop*/do {with({__count__: arguments}) \"\" ; } while((({__parent__ setter: (({}).hasOwnProperty).call })));");
tryItOut("{return;<x/> }");
tryItOut("this.__count__ = __noSuchMethod__;");
tryItOut("if(new (<x><y/></x>.eval([,,z1]) == undefined - <x/>)((true.valueOf(\"number\")), )) {gcthrow StopIteration; } else  if (*) true else {/*infloop*/M:for(var constructor; <x/> != <x><y/></x>; <x><y/></x>.watch(\"__parent__\", [1,2,3,4].slice)) {let (constructor) prototype, #1#<x><y/></x>; }yield; }");
tryItOut("yield #3={a:#3#};\nif( /x/ .eval(window)) { if (((function ([y]) { })() ? (-0) : @foo).unwatch(\"prop\")) (Math.pow).call else export __noSuchMethod__;}\n");
tryItOut("/*infloop*/while((function ([y]) { } ? <><x><y/></x></> : <y><z/></y> if (false))){while((4.) && 0) }");
tryItOut("return;");
tryItOut("M:if(this) {yield  \"\" ;let __noSuchMethod__ = window, prop; } else  if (({a2:z2})) {<y><z/></y>; }");
tryItOut("var gc(), prop\nyield;\n<x/>;\n");
tryItOut("const __proto__ = (function ([y]) { })(), __count__ = <><x><y/></x></>;");
tryItOut("{/*for..in*/\nfor(let prototype = this in __parent__) continue ; }");
tryItOut("/*infloop*/do gc() while((#0=({__parent__:  /x/g [({a1:1})]})) !== ((yield *::*))());");
tryItOut("/*for..in*/for(let __parent__ in ((let (__count__) window)(<y><z/></y>.eval(<y><z/></y>).__noSuchMethod__%=<y><z/></y> != (((p={}, (p.z = <y><z/></y>)()))++)))){export __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in (new ( \"\" )()).__defineSetter__(\"prototype\", [1,2,3,4].slice).@foo) {/*infloop*/for(<ccc:ddd><!--yy--></ccc:ddd>.( /* Comment */[11,12,13,14].filter);  /x/ ; (((__parent__.__count__ >= ~<x><y/></x>)).call(new (Function)(), undefined.__count__ = (-1), new <y><z/></y>.__count__))) return window; }");
tryItOut("yield;");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(const [__iterator__, __noSuchMethod__] = false in prototype) yield;");
tryItOut("{__noSuchMethod__ = <><x><y/></x></>, __proto__ = undefined;let prop = arguments; }");
tryItOut("({a2:z2});\n;\n\n");
tryItOut("L:if(1.3) { if (@foo) {return;prototype; } else {gc() }}");
tryItOut("(@foo || <x><y/></x>)\nif((({__noSuchMethod__ setter: [1,2,3,4].map, prototype setter: yield ({__count__: 5.0000000000000000000000,  set prototype() /x/g  }) }))) yield constructor; else  if ([__iterator__ = constructor]) const x::__count__ = (function ([y]) { })(), __parent__ =  \"\" ;");
tryItOut("break L;");
tryItOut("/*for..in*/for((prototype) in (((this).watch)({} @ undefined)))yield;");
tryItOut("window;");
tryItOut("/*infloop*/for(const prop = (__iterator__.prototype = function(y) { yield y; new Function; yield y; }); (new true(undefined, null)); *) {;yield -3/0; }");
tryItOut("/*for..in*/for(let /[__proto__, constructor] = constructor = (getter.prototype getter= [1,2,3,4].map).prototype in {}) return ((yield window));");
tryItOut("L: yield");
tryItOut("let(__proto__, __count__) ((function(){for(let y in [5,6,7,8]) gc()})());");
tryItOut("throw StopIteration;");
tryItOut("try\n { for(let y in [5,6,7,8]) var __iterator__ = 1e-81; } finally { try { ; } catch(prop) { export *; }  } ");
tryItOut("M:while((*) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in false) gc()");
tryItOut("/a/gi");
tryItOut("with({__count__: window})__parent__\n/*for..in*/L:for(let [__noSuchMethod__, constructor] = [1,,] in 1e4) gc\n");
tryItOut("/*for..in*/for([1] in 5.0000000000000000000000) export __proto__;");
tryItOut("\fL:with({__iterator__: __parent__})M:\nwith({__noSuchMethod__: __parent__/*\n*/})/*for..in*/for(var __count__ in 0/0) {throw *::*;yield .2 <<= <x><y/></x>; }");
tryItOut("");
tryItOut("var __iterator__ = window, __iterator__ = window;");
tryItOut("M:with(<x/>.valueOf(\"number\"))([z1,,]);");
tryItOut("L: {; }");
tryItOut("if(*::*) gc() else  if (<x/>) gc()");
tryItOut("/*for..in*/for(const ({ __proto__: prototype, __iterator__: function::prototype }) in ((Math.sin)(window ? * : <x><y/></x>)))(true);");
tryItOut("if(__iterator__.prop = <y><z/></y>) M:switch(this) { case 3:  }");
tryItOut("/*for..in*//*\n*/for(var (__proto__) in ((function () { yield <y><z/></y> } )(((yield eval)))))return false;");
tryItOut("if(__noSuchMethod__) {this; } else  if (this) {gc()return 5.0000000000000000000000; }");
tryItOut("/*for..in*/for(var constructor in ((return;)((<x><y/></x> ? <\fx><y/></x> : __noSuchMethod__))))yield;");
tryItOut("with({__iterator__: let (constructor) window})var __iterator__, prototype = @foo;");
tryItOut("L: (<><x><y/></x></>).watch");
tryItOut(" { return __parent__ } ");
tryItOut("/*infloop*/for(const prop; (this.zzz.zzz)((__parent__.__lookupGetter__(\"__parent__\")), ({prototype: *})); <x/>) {{{}yield <x><y/></x>; } }\n1.3.prototype = __iterator__;\n");
tryItOut("while((__parent__) && 0)throw  /x/g ;");
tryItOut("do {__noSuchMethod__gc() } while(((*::*())) && 0);");
tryItOut("while((([,,] for each (\fconstructor in @foo))) && 0)return window;\nyield <><x><y/></x></>;\n");
tryItOut("__proto__ = prototype;");
tryItOut("var __proto__, prototype = true; const prototype;");
tryItOut("/*infloop*/while(<y><z/></y>){}");
tryItOut("/*for..in*/__iterator__");
tryItOut("/*for..in*/M:for(let __parent__ = ( /x/ --) in 0/0) break M;");
tryItOut("/*infloop*/M:for(prop; new (new Function)(); prop = <><x><y/></x></>) return;");
tryItOut("let (prop = @foo) { 0.1 }");
tryItOut("L:with(('haha'.split)())this.zzz.zzz;");
tryItOut("export *;");
tryItOut("L:with(){return; }");
tryItOut("if((yield  /* Comment */__proto__-=this.prop)) if((new [1,2,3,4].slice()).*) { if (prototype = @foo) {with(<><x><y/></x></>)const __count__;\t{} } else let prop;}");
tryItOut("M:if(<><>(window.unwatch(\"__parent__\") == __noSuchMethod__ = <x/>)</></>) export __proto__; else  if (-3/0 .@x:: window) (<><x><y/></x></>.yoyo(*))([11,12,13,14].some) else ;");
tryItOut("/*for..in*/for(var __proto__ in (([1,2,3,4].slice)(1e4)))while((__noSuchMethod__.constructor) && 0)__noSuchMethod__, try { yield; } finally { export *; } ;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("L:with(new 5.0000000000000000000000 , prototype(prop, (#2=[0x99])))L:do {export *; } while((@foo) && 0);");
tryItOut("yield;\ncontinue M;\n");
tryItOut("__noSuchMethod__ const __parent__;");
tryItOut("if('fafafa'.replace(/a/g, eval)) { if (constructor = @foo) export *;} else export *;");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in ((({}).__lookupGetter__)(null))){}");
tryItOut("L\f:with(__parent__)3");
tryItOut("if((__count__-=__noSuchMethod__)) { if (window.unwatch(\"prototype\")) \ffunction  __noSuchMethod__ () { return * } } else break M;");
tryItOut("{}");
tryItOut("while((new (this.__defineSetter__(\"__count__\", function(y) { yield y; throw <x><y/></x>;; yield y; }))(<><zzz>__count__ = prop: 1e-81</zzz></>)) && 0)with({__iterator__: this}){gc()var __count__ = this; }");
tryItOut("throw *;");
tryItOut("/*infloop*/for([11,12,13,14].some .@*:: ([prop].propertyIsEnumerable(\"function::constructor\")); (\nundefined.isPrototypeOf(this.zzz.zzz) = <>1.3</>); new  /x/g ) ");
tryItOut("/*for..in*/for(const [__proto__, __iterator__] = __iterator__ in true) (1e4);");
tryItOut("if(((undefined)(<><x><y/></x></>, <y><z/></y>)++)) { if ((<x/>.propertyIsEnumerable(\"__proto__\"))) yield;} else (<><x><y/></x></>);");
tryItOut("/*infloop*/for(const constructor; this.__defineGetter__(\"__count__\", *); ({__proto__ getter: new Function })) /*infloop*/for(var __noSuchMethod__ = <x/>; <x><y/></x>;  /x/ ) return;");
tryItOut("gc()");
tryItOut("yield ( /x/ )([[]]);");
tryItOut("/*infloop*/while([z1,,])return;");
tryItOut("/*infloop*/for(var __iterator__; prototype = window -= .2; ((<x/>))) {const __proto__; }");
tryItOut("L: {gc()yield; }");
tryItOut("with({}) for(let y in []);");
tryItOut("/*for..in*/for(var ({ __parent__: [, , constructor, ] }) in ((({}).hasOwnProperty)(this))){(this.zzz.zzz) }");
