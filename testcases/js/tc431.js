tryItOut("this.zzz.zzz;");
tryItOut("{{} }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __proto__] = [prop, , ] = [] in 3/0) {{}/*for..in*/for(var __count__ = x::__iterator__ in true)  }");
tryItOut("while(([15,16,17,18].sort((new Function(\";\")),  \"\" )) && 0)function  __noSuchMethod__ (constructor, __count__) { yield  ''  } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__.__count__ in __iterator__ = window) /*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in <y><z/></y>) [1,2,3,4].map");
tryItOut("/*for..in*/L:for(var [prototype, __proto__] = window in __proto__ = true) {(__proto__);if(<y><z/></y>) { if (<><x><y/></x></>) export *; else {prop }} }");
tryItOut("/*for..in*/for(var __proto__ =  /x/  in __count__) {break ;yield; }");
tryItOut("var __iterator__ = <y><z/></y>;export prop;");
tryItOut("with({}) try { gc() } catch(__proto__ if <x/> /=  /x/g ) { throw __count__; } catch(prototype if (function(){let __parent__;})()) { ; } catch(__count__) { gc() } finally { const <><x><y/></x></>, prop = window; } ");
tryItOut("/*infloop*/for(__iterator__; <bbb xmlns:ccc=\"<x><y/></x>.(<><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb>; (yield  \"\" ./*\n*/isPrototypeOf('fafafa'.replace(/a/g, [1,2,3,4].slice))\n)) {L:while((window) && 0){{} } }");
tryItOut("continue ;");
tryItOut("M:if(function ([y]) { }) { if (({a1:1})) export *; else export *;}\n");
tryItOut("L:if(<>*::*</>) gc else  if ((uneval(@foo))) /*infloop*/for(const prototype; null; __noSuchMethod__ = this.hasOwnProperty(\"__noSuchMethod__\").isPrototypeOf(let (__noSuchMethod__ =  \"\" , __parent__) this)) {let __parent__ = try { {} } catch(__proto__ if  /x/g ) { export *; } catch(arguments) { export *; } finally { return; } , __proto__; } else {/*infloop*/for(var ({ __count__: prop, prop: prototype }) = new Array(({a2:z2}));  '' ; __count__ << (function ([y]) { })()) {return <><x><y/></x></>; } }");
tryItOut("__iterator__ = __proto__;");
tryItOut("if( \"\"  %= 0.1) {var __count__ = <y><z/></y>; } else  if (Error() /= 1.2e3 !== [z1,,]) prop = (((3 ^= {}).__lookupSetter__(\"prop\")).*)");
tryItOut("{gc()/*infloop*/M:for(this.zzz.zzz; (*::*)(); new Object(__proto__) != (+<x/>))  const __noSuchMethod__; }");
tryItOut("gc() const set;");
tryItOut("return;");
tryItOut("do {\fgc()return; const __parent__; } while((({constructor: 0})) && 0);");
tryItOut("/*infloop*/L:for(function(id) { return id }; __proto__; (function ([y]) { })()) let __parent__ = *;");
tryItOut("/*infloop*/do  while()\nwith({}) return *::*;");
tryItOut("gc");
tryItOut("while(( /x/ ) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(__count__.prototype in 1e+81) {var __parent__, prop;throw <x><y/></x>; }\n }");
tryItOut("if(<><x><y/></x></> ? 1.3 : *::*.__lookupSetter__(\"constructor\")) { if ( \"\" ) yield *; else gc()}");
tryItOut("M:if(Object(((__proto__--).__defineGetter__(\"__proto__\", /a/gi)))) /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__.__iterator__ in ([ /x/g ])) {const __count__ = <x><y/></x>; } else throw ((yield  \"\" ));");
tryItOut("if(((~<x><y/></x>).hasOwnProperty(\"prototype\"))) { if (---1) {export prop;export *; } else {yield;-0; }}");
tryItOut("if(this.__defineGetter__(\"prototype\", 'haha'.split) for ((<x/>)(__iterator__) in <><x><y/></x></>) for (constructor in  \"\" )) if(<x><y/></x>) { if ((<y><z/></y>.__defineGetter__(\"constructor\",  /x/g ))) {function(q) { return q; }return; }} else {const __parent__ =  \"\" ;break ;' } else  if ([__noSuchMethod__.prop = <y><z/></y> for (__parent__ in __noSuchMethod__) for each (prototype in  '' )]) <><x>/*\n*/<y/></x></>;");
tryItOut("/*for..in*/for(const constructor in ((new Function)(<{__parent__}><!--yy--></{__parent__}>))){{}switch((this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }))) { default:  } }");
tryItOut("/*for..in*/for(const __iterator__.prototype in {} / 3.141592653589793) {/*infloop*/for(let __count__; __proto__; window) function (__parent__, __parent__) { /a/gi } ([1]); }");
tryItOut("constructor(undefined)");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("(*::*yyy ; const constructor;");
tryItOut("default: throw ({a1:1});");
tryItOut("yield;");
tryItOut("do {export prop;return; }\t while((<><x><y/></x></> ? <><x><y/></x></> : 1e81 / (!*::*)) && 0)\t;");
tryItOut("if((((((1 for (x in [])))(#1=[#1#], window)))[yield this])) {<x><y/></x>; }");
tryItOut("yield  /x/g  >>> 0.1 >>= (<x><y/></x>).call(__count__,  \"\" , <y><z/></y>);");
tryItOut("/*infloop*/\fM:for(let constructor; \n<x/>.throw((uneval(constructor))); (p={}, (p.z = ((({constructor: __proto__, __noSuchMethod__: __count__ })).unwatch(\"__count__\")))())) /*infloop*/for(let __count__; *::*; (new Function)()) {let getter = @foo; }");
tryItOut("let (__noSuchMethod__, __noSuchMethod__ = new function  __proto__ (__proto__)<x><y/></x>().valueOf(\"number\")) { with({}) for(let y in [5,6,7,8]) yield <x/>; }\nL: {export __count__; }");
tryItOut("let (__proto__) { /*for..in*/for(__iterator__ in (((1 for (x in [])))('fafafa'.replace(/a/g, eval)))){let constructor; } }");
tryItOut("if(Function((__noSuchMethod__ = this), (1 for (x in []))())) let __noSuchMethod__ = <x><y/></x>, prop = true; else {if(((<x/>)[ '' ])) gc() else  if (__parent__.__noSuchMethod__ setter= (undefined).__defineSetter__) ; }");
tryItOut("{/*for..in*/for(let [constructor, function::__count__] = ((eval(\"export <x><y/></x>;\", this)) for each (__parent__ in null) for (constructor in 1e-81)) in constructor ? <><x><y/></x></> : <><x><y/></x></>) if((<xxx>{__iterator__}</xxx>.((eval).call(this.yoyo(this), (\n0x99),  '' )))) {const __iterator__ =  /x/ ;gc() } else  if ( '' .hasOwnProperty(\"__iterator__\").__lookupSetter__(\"__proto__\")) export __noSuchMethod__; else {<x><y/></x>; } }");
tryItOut(";");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const [prop, <x/>] = __iterator__ in +this) __iterator__ = *::*;");
tryItOut("with({function::prop\t: ({__count__: ((p={}, (p.z = new function (__count__) { throw window; } ())())), __count__: (constructor =  /x/ ) .. (this.eval(__count__)) })}){/*for..in*/for(const prototype = this in __count__ = this) {export prototype;const __iterator__; } }");
tryItOut("if(this.zzz.zzz ? __proto__ : prototype = undefined ? true : (true.@foo)) /*infloop*/for((new gc(<><x><y/></x></>) === (<x><y/></x>.(\f<><x><y/></x></>)).propertyIsEnumerable(\"prototype\")); (constructor.__noSuchMethod__ getter= [1,2,3,4].slice); (yield __parent__ = __iterator__)) {yield *;; }");
tryItOut("yield eval(\"[,,]\", __proto__);");
tryItOut("{(*::*); }");
tryItOut("if((__parent__.__count__-=__proto__ = __count__ @ ([<><x><y/></x></>.@*].propertyIsEnumerable(\"__proto__\")))) {\flet __iterator__; } else {var __parent__; }");
tryItOut("if(<x><y/></x>) { if (*) {<x><y/></x>; }} else {__noSuchMethod__; }\n");
tryItOut("constructor = <><x><y/></x></>, __proto__ = false\nif( /x/g ) {gc() } else  if (this.zzz.zzz) {{} }");
tryItOut("/*infloop*/do if(__noSuchMethod__ = try { yield; } catch(__parent__) { export prop; } finally { {} } ) { if (((yield @foo))) {export *;; } else return;} while((\n(yield  /x/ ).__defineGetter__(\"__parent__\", [1,2,3,4].map)));");
tryItOut("/*infloop*/for(<><x><y/></x></> < 1e-81; function::prototype.prototype getter= (new Function(\"{}\")); \n( /x/g (<>\t<x><y/></x></>))((([1,2,3,4].slice).call( /x/g , )))) {gc() }");
tryItOut("/*infloop*/L:for(__count__; <y><z/></y>; *) {yield window; }");
tryItOut("/*for..in*/for(var __proto__.__noSuchMethod__ in __noSuchMethod__.(<x/>)) return;");
tryItOut("{return; }");
tryItOut("M:if([,]) { if (<x><y/></x>) break M;} else {propreturn this; }\n;");
tryItOut("throw StopIteration;");
tryItOut("if((function  __noSuchMethod__ (prop) { return (new (prototype)([z1], <x/>)) } )(prototype = (<y><z/></y>)[__count__], <x><y/></x>)) return prototype; else  if ([[1]]) {if(window) { if (<><x><y/></x></>) {export *;( \"\" ).call }} else {var __count__;export *; }/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in #1=[#1#]) ; }");
tryItOut("with(let (function::__count__, prop) [<><x><y/></x></> !== this if ([[]])])/*for..in*/M:for(var __noSuchMethod__((__noSuchMethod__ = __count__)) in ((Math.pow)((.2.get))))Function");
tryItOut("let (__parent__ = <x><y/></x> >>> [z1,,]) { (this.__defineGetter__(\"__proto__\", function (__noSuchMethod__) { yield  /x/g  } )); }");
tryItOut("with(new ([1,2,3,4].slice)())yield <x><y/></x>; const constructor;");
tryItOut("/*infloop*/L:do {} while(export __noSuchMethod__.__lookupSetter__(\"constructor\"));");
tryItOut("/*infloop*/for(const __parent__ = undefined;  \"\" ; <y><z/></y>) {(<\t><x><y/></x></>); }");
tryItOut("switch((p={}, (p.z =  /x/ )())) { case 8: break;  }");
tryItOut("/*infloop*/for(let __proto__ = __noSuchMethod__; __noSuchMethod__ = window.isPrototypeOf(((-1).throw(*))); (__count__.prototype = __count__|= \"\" )) {yield this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <x/>.yoyo([[1]])) gc()");
tryItOut("/*for..in*/for(let <x/>.__count__.prop in ((({}).hasOwnProperty)( /x/g )))gc()");
tryItOut("switch((__iterator__ = null)) { default: <y><z/></y>\nwhile((<><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb></>) && 0){\tM:while(( /x/ ) && 0){( \"\" ); } }break; case (<><x><y/></x></>) - this: return function::prototype;\nwith({__noSuchMethod__: (<x><y/></x> * <><x><y/></x></>).__lookupGetter__(\"prop\")})/*infloop*/do  while( \"\" .throw(__count__));\ncase 1: /*infloop*/break; case 6: with({}) { throw StopIteration; } case 3: break; break; L:with({__noSuchMethod__['constructor']: (\nwindow)}){ }break; case __parent__: (__parent__);case 5: case 3:  }");
tryItOut("/*for..in*/for(__iterator__ in ((function () { {(3);{} } } )(null))){throw <x><y/></x>; }");
tryItOut("L:if((new Function(constructor, eval(\"<y><z/></y>\", .2)))) { if (__count__.constructor setter= ((1 for (x in []))).apply) {const __proto__, __parent__ = *::*return; } else {/*for..in*/for(const [__noSuchMethod__, __parent__] = <><x><y/></x></> in  /x/ ) return;/*for..in*/L:for([prop, __iterator__] = (<x><y/></x>)(@foo, 0x99) in window) {[,,z1]; } }}");
tryItOut("do {return <y><z/></y>;M:do 3; while(( /x/ ) && 0); } while((({ __iterator__: constructor }) = new @foo(0.1;) += (#1=[<><x><y/></x></>]) for each (__proto__ in __count__ = (__proto__ = [z1])) for each (__noSuchMethod__ in (__proto__.(*))) if (( /x/ .__defineGetter__(\"__count__\", 4.)))) && 0);");
tryItOut("/*for..in*/for(var [, ] = ((p={}, (p.z =  /x/ )()) <<= (prototype = <x/> >>= (({constructor: function(id) { return id },  get constructor __count__ (__iterator__) \"\"  })))) in ( /x/g .eval(__iterator__))) {throw <><x><y/></x></>\f;const __count__ = <x><y/></x>; }");
tryItOut("if(*::*) { if ((__noSuchMethod__.__parent__ = (*::*)(<x/>))) export __iterator__; else {export prototype;var __count__ = false, __iterator__ = 033; }}");
tryItOut("let (prototype = ({a1:1}), __noSuchMethod__) { \fif( /x/g ) { if ((__count__)) {export *\nlet __noSuchMethod__, __noSuchMethod__ = <x/>; const constructor; }} else {gc()return this; } }");
tryItOut("if(( \"\" \n.throw((({__noSuchMethod__: false})))).propertyIsEnumerable(\"__proto__\")) { if (let (constructor) __proto__ = <><x><y/></x></>) continue ;} else {__iterator__;{} }");
tryItOut("/*for..in*/for(prop in ((function(y) { yield y; with((__parent__.__noSuchMethod__))(this.__defineSetter__(\"__parent__\", yield *::*)).__defineSetter__; yield y; })(constructor.__parent__ =  /* Comment */(#0=({__count__: <y><z/></y>}))--.__parent__ = this.zzz.zzz))) get __iterator__(__noSuchMethod__)({})");
tryItOut("/*for..in*/for(let <x><y/></x>.constructor in [,]) {yield 1e81;3; }");
tryItOut("(prop);if(*::*) export __proto__; else {yield;{} }");
tryItOut("prop = __parent__;");
tryItOut("gc() const __count__;");
tryItOut("((/*\n*/{ set __count__()this })); const prop;");
tryItOut("while((<x/>.valueOf(\"number\")) && 0)yield;");
tryItOut("/*infloop*/M:do  while(this);");
tryItOut("let (function::prototype = [, , , ] = window > -0, prototype = Number(this.__defineGetter__(\"__iterator__.__count__\", (/a/gi).call))) { if(<bbb xmlns=\"__iterator__ = __noSuchMethod__\"> </bbb>) if((eval(\"<y><z/></y>\", <><\tx><y/></x></>))) {({}).__lookupGetter__ } else  if (yield <x/>( '' )) *; }");
tryItOut("/*infloop*/M:for(var prototype\t; [,,] + [__iterator__ if (<x><y/></x>)].hasOwnProperty(\"__noSuchMethod__\");  '' ) {var prototype = true, __parent__;/*infloop*/while([<y><z/></y> for (__parent__ in window)].__defineSetter__(\"__noSuchMethod__\", (eval).apply)){constructor: <x/> } }");
tryItOut("var __parent__ = (({export *;: window})), __parent__;");
tryItOut("let (__proto__, __parent__ = __noSuchMethod__) { return; }");
tryItOut("if(__parent__ % window) gc() else  if ((null.eval(<x/>))) { }");
tryItOut("M:if(() + __noSuchMethod__.__defineSetter__(\"__proto__\", (null).__defineSetter__)) /*infloop*/L:while(*::*){(*::*).applyfunction (prop)constructor } else  if ((__count__ =  '' .yoyo(({ set __count__ __count__ (__count__, function::__noSuchMethod__) { \fyield null }  })).valueOf(\"number\"))) \flet (__proto__ = new __proto__( /x/ , 1e-81)) { ; }\n__parent__");
tryItOut("/*infloop*/for(<><x><y/></x></> != -3/0; ({prototype getter: <><x><y/></x></> }); constructor for (prop in [,])) {return @foo; }");
tryItOut("/*infloop*/for(var ({ __parent__: ({ __parent__: [], __proto__: ({ __iterator__: ({ constructor: ({ __proto__: [, , , __iterator__, __proto__], __noSuchMethod__: [constructor, , , [__noSuchMethod__, __iterator__]] }), prototype: ({ __count__: ({ __proto__: __noSuchMethod__, __count__: [constructor, __count__, , __parent__, __proto__] }), __proto__: __count__ }) }) }) }) }) = (p={}, (p.z = [*].map(function (__noSuchMethod__, __noSuchMethod__) { return 0x99; } ))()); (__parent__.([15,16,17,18].filter(function(y) { yield y; export __parent__;; yield y; }, try { return; } catch(prop if window) { for(let y in [5,6,7,8]) return ({__proto__: <><x><y/></x></> }); } catch(__noSuchMethod__ if (function(){let(let(constructor, [, , , __parent__]) { yield 0x99;) ((function(){this.zzz.zzz;})());})()) { throw StopIteration; } finally { yield __count__ <= null; } ))); eval(\"__iterator__ = window\", (({prototype setter: function(q) { return q; } })))) \f/*infloop*/do M:do {<><x><y/></x></>throw <x><y/></x>; } while((<x><y/></x>) && 0); while([false.__proto__].map((new Function(\"yield __count__;\"))));");
tryItOut("/*for..in*/for(const __proto__ in (function ([y]) { })()) gc()");
tryItOut("/*infloop*/for(prototype = <><x><y/></x></>; undefined; <x><y/></x>) break M;");
tryItOut("/*infloop*/for(let constructor; ([* for (__count__ in <x/>)]); (<x><y/\f></x>.valueOf(\"number\")).__lookupSetter__(\"__noSuchMethod__\")) if(! /x/ ) {let __proto__; } else {gc()return; }");
tryItOut("/*infloop*/for(const __iterator__; (({ get __proto__\f() { return <x/>.yoyo() } ,  set \f__count__(__count__) { yield this %= true.__lookupSetter__(\"__count__\") }  })); window) yield;");
tryItOut("M\r:with({__noSuchMethod__: (uneval(prototype))()}){@foo; }");
tryItOut("if(eval(\"void window\", <><x><y/></x></> = false)) {/*for..in*/for(let prop in (('haha'.split)(-0))); } else {}");
tryItOut("let(prop = <><x><y/></x></>, ({ __parent__: ({ __proto__: ({ __iterator__: __count__, constructor: __proto__ }), __noSuchMethod__: __parent__ }), __parent__: [, ({ __proto__: __noSuchMethod__, constructor: __count__ }), ({ prototype: __proto__ })] })) ((function(){return ( \"\" )();})());");
tryItOut("do return; while((([0/0].filter(('haha'.split).apply) !== <x><y/></x>)) && 0);");
tryItOut("function(id) { return id }; const prop;");
tryItOut("L:switch(Function( /x/ )) { default: yield;break; case 8: break;  }\n");
tryItOut("/*infloop*/while(((-3/0 for each (__count__ in *)))){gc() }");
tryItOut("/*infloop*/do {yield  /x/g ;export __parent__; } while(<><x><y/></x></>);");
tryItOut("/*for..in*/( const __parent__ = @foo, prop; for(default: case 9: case 9: const )[__proto__, __proto__");
tryItOut("while(((<x><y/></x> .@ this) >> * /= <x><y/></x>) && 0){gc()constructor; }\n{(-0); }");
tryItOut("for(let y in []);");
tryItOut("{if((new RegExp(this, <y><z/></y>))) {throw 5.0000000000000000000000 } }");
tryItOut("export __iterator__;");
tryItOut("__parent__ = __count__;");
tryItOut("M:if(typeof (<y><z/></y>\n)) continue M;\n<x/>;\n else  if (*::*) {if([[1,,] if (4.)]) {return;\tprop; } }");
tryItOut("let(__parent__ = __proto__ = @foo.@*, function::function::prop) { __noSuchMethod__.__noSuchMethod__ = __proto__;");
tryItOut("{__parent__; }");
tryItOut("/*for..in*/for(let constructor in ((function  __parent__ () { yield  { yield <><bbb xmlns=\"[11,12,13,14].some\"> \"\" </bbb></> }  = (__noSuchMethod__.prototype = <><x><y/></x></>) } )(prototype.__iterator__))){if(3.141592653589793) return; }");
tryItOut("with(__count__);");
tryItOut("M:do return ({constructor: false }); while((({__parent__: ({a2:z2}).__lookupGetter__(\"__parent__\")\f})) && 0);");
tryItOut("/*infloop*/for(const __iterator__; __iterator__ = false.throw(<y><z/></y>); false) {/*infloop*/for(this.zzz.zzz; [[]].__lookupGetter__(\"__noSuchMethod__\"); ({__parent__: <x><y/></x>, __proto__: <y><z/></y> })) {L:switch(*::*) { default:  }(-1); } }");
tryItOut("L: {yield <y><z/></y>; }");
tryItOut("try { with({}) { return <x/>; }  } catch(__noSuchMethod__) { yield eval(\"continue M;\", (*::*.yoyo(<y><z/></y>.__defineGetter__(\"__proto__\", (().watch).apply)\f))); } ");
tryItOut("/*infloop*/do {yield;(0/0); } while((<><x><y/></x></> if (<><x><y/></x></>)));");
tryItOut("/*infloop*/for(let __count__; (let (__count__) <x><y/></x>)(<x/>.isPrototypeOf(<x><y/></x>), undefined > <y><z/></y>); --(<x><y/></x> .@x:: *)) break M;");
tryItOut("yield; const __noSuchMethod__;");
tryItOut("/*for..in*/M:for(__iterator__ in <><x><y/></x></>) gc()");
tryItOut("/*for..in*/for([function(id) { return id }, constructor] = let (__iterator__ = __noSuchMethod__) <x/> in <x><y/></x>) {yield <><x><y/></x></>; }");
tryItOut("{/*for..in*/L:for(var prototype in (p={}, (p.z = <><x><y\f/></x></>)())) {var prop = .2;; } }");
tryItOut("with({}) { let(({ get: ({ __parent__: ({ __proto__: prop }) }), __iterator__: [({ __noSuchMethod__: __noSuchMethod__, __parent__: __parent__ })] }) = (__proto__.(__noSuchMethod__ = constructor)), __proto__ = window.(false)) ((function(){for(let y in [5,6,7,8]) let(__count__, __parent__) { throw constructor;})()); } ");
tryItOut("/*for..in*/for(const [prototype, __parent__] = new Object( /x/ ).__lookupSetter__(\"constructor\") in (~<y><z/></y> ^ <><x><y/></x></> += 'fafafa'.replace(/a/g, (*).__defineSetter__))) {{throw 1e+81;/*for..in*/for(var prototype in (((new Function(\"({a2:z2});\")))(({a2:z2}))))var prop, __iterator__; }/*for..in*/for(prototype in (([1,2,3,4].map)(@foo)))gc() }");
tryItOut("set = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for \r each(constructor in @foo) {export prop; }\n/*for..in*/for(__iterator__ in ((function  prop (prop, __noSuchMethod__) { yield prop } )(prototype = function ([y]) { })))yield true;\n");
tryItOut("/*for..in*/for(var constructor = #0=({__count__: __iterator__}) in ({__noSuchMethod__: (-1) })) {return prop;var __count__; }");
tryItOut("/*infloop*/for(prop; [].constructor = try { return; } catch(__iterator__ if [,,z1]) { {} } catch(constructor if <><x><y/></x></>) { throw  /x/g ; } ; 1e+81 <<= <x><y/></x>) {export __parent__;export *; }");
tryItOut("/*infloop*/while(\n( \"\"  >= <x><y/></x>))export *;");
tryItOut("/*for..in*/L:for([constructor, __count__] = [__count__ = prop] in  \"\" ) {export *; }");
tryItOut("(\neval(\"let (__count__) { return <x/>; }\", (<><x><y/></x></>).eval( /* Comment */prototype |= <x><y/></x>))).watch");
tryItOut("M:if(({ set prop __noSuchMethod__ () { const __proto__, __count__ = window; }  })) { if (prototype & <x/>) {/*infloop*/for(var __count__; this; @foo) { } } else {let __noSuchMethod__, prop = __iterator__;yield  /x/ ; }}\n0;");
tryItOut("let (({ constructor: __parent__.constructor }) = [11,12,13,14].filter, prop) { /*infloop*/M:for(const __count__ = .2; <x><y/></x>; window) break ; }");
tryItOut("yield;\n{}\n");
tryItOut("let constructor: __noSuchMethod__, __noSuchMethod__;");
tryItOut("L: {<><x><y/></x></>; }");
tryItOut("export *\n");
tryItOut("/*for..in*/for(var __proto__ = (({__parent__ setter: Math.pow })) | (yield Object()) in (([1,2,3,4].slice).call(__proto__ << __parent__, ((__count__)[ /x/ ])))) {/*for..in*/L:for(const __parent__ in (((window).watch)(@foo)))if(null) yield [[1]]; else  if (this)  else { } }");
tryItOut("with(<><ccc:ddd><!--yy--></ccc:ddd></>)continue ;");
tryItOut("return;");
tryItOut("if(<x/>[null])  else  if ((uneval((Function(this, undefined))))) /*for..in*/for(let __count__ in <y><z/></y>) {export __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<xxx>{prototype}<\t/xxx>['constructor'] in [z1,,].__iterator__) gc()");
tryItOut("M:if(window) {export *; } else throw <x/>;");
tryItOut("__noSuchMethod__ = prop\n/*for..in*/\fL:for(const __noSuchMethod__ in (((1 for (x in [])))(<x/>)))<x><y/></x>");
tryItOut(";return;");
tryItOut("let (#0=[1e-81 * true]['__count__'], prototype) { /*infloop*/L:for(var [] = ([@foo].filter(function  case true ? prop : *: break; ( /x/ );break;  () { yield  ''  } )); #1=[#1#].__count__ = <y><z/></y>.__noSuchMethod__ = (({arguments: <x/>}));  /* Comment */#3={a:#3#}) export __iterator__; }");
tryItOut("do  for each (__noSuchMethod__ in (-0)) for (__parent__ in window) for each (__proto__ in window) while((prototype %  \"\" ) && 0);");
tryItOut("/*for..in*/for(var [__noSuchMethod__//h\n, __noSuchMethod__] = (Math.sin)([1,2,3,4].map.(<y><z/></y>), undefined) in __iterator__.__iterator__ = <><x><y/></x></>) switch(window) { case <x/>: return <x/>; }\nbreak ;\n\n");
tryItOut("/*for..in*/for(const __iterator__ = let (__count__ = <><x><y/></x></>.hasOwnProperty(\"__proto__\")) ~(-1) in <y><z/></y>.__lookupSetter__(\"__noSuchMethod__\") = (<><x><y/></x></> % prototype)) {yield [z1,,];(new Function(\"undefined\")) }");
tryItOut("let __parent__, __proto__;");
tryItOut("/*infloop*/L:do {} while(<><x><y/></x></>);");
tryItOut("/*for..in*/for(const function::__parent__ in let (__proto__) <x/>.__defineSetter__(\"__iterator__\", Math.pow)) {if(<><x><y/></x></> % <><x><y/></x></>) return 0\t;/*for..in*/M:for(var prop = 0 in [1]) {yield true;throw <><x><y/></x></>; } }");
tryItOut("(prototype)\nyield <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in @foo) let __iterator__ = <x><y/></x>, __noSuchMethod__;");
tryItOut("/*infloop*/for(var ({ __parent__: __proto__, __proto__: __noSuchMethod__ }) = <x><y/></x>; this; Function(<><x><y/></x></>)) {{} }");
tryItOut("return\n");
tryItOut("L: {var prototype = __parent__;return; } const __proto__;");
tryItOut("{export prop; const prototype; }");
tryItOut("return;");
tryItOut("/*infloop*/\tfor(var __iterator__;  /x/g ; (<><x><y/></x></>[undefined].__lookupSetter__(\"__noSuchMethod__\"))) let (__iterator__ = window.\f__lookupGetter__(\"constructor\").valueOf(\"number\"), __iterator__ = ( \"\"  -= __count__)) { switch(__noSuchMethod__ = __noSuchMethod__) { case new Boolean(true, null) == 'fafafa'.replace(/a/g, function(y) { yield y; __iterator__, prototype = [];; yield y; }): {gc()return; const set; }break; case <><x><y/></x></>--: break; case __noSuchMethod__.__defineSetter__'(\"prop\"function(y) { yield y; return <><x><y/></x></>;; yield y; }): ;break;  } }");
tryItOut("/*for..in*/for(let prototype(<><x><y/></x></>) in @foo) Math.pow");
tryItOut("if(this.__defineSetter__(\"__parent__\", <x><y/></x>) >>> (yield (yield <><x><y/></x></>))) {M:if([[]]) { if ([constructor, , __count__, __count__] = ({ __proto__: __noSuchMethod__ })) {(prototype); }} else {return __proto__; const __proto__;gc() } } else  if (<{__parent__}><ccc:ddd>yyy</ccc:ddd><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></{__parent__}>) {export *;/*for..in*/for(let prop = <x><y/></x>.(<x/>) in null) return; }");
tryItOut("__iterator__");
tryItOut("/*for..in*/M:for(var [prototype, __parent__] = <><x><y/></x></>.* in *) constructor =  \"\" ;");
tryItOut("while((<><>null</></>) && 0)Math.pow");
tryItOut("return 0/0.unwatch(\"__iterator__\");");
tryItOut("/*infloop*/for(<><x><y/></x></> >>> 1e4 % __proto__.hasOwnProperty(\"__noSuchMethod__\"); ({prototype getter: new Function }).propertyIsEnumerable(\"setter\"); constructor = constructor) {this.zzz.zzz;(new (({}).hasOwnProperty)(@foo ^= <y><z/></y>)); }");
tryItOut("M:do {{}\nreturn; const __noSuchMethod__; } while((this.__defineGetter__(\"prototype\", eval) ? __count__ || -3/0 : true++) && 0); const \tprototype;");
tryItOut("L:do (new Function(\"(__count__);\")) while(((new (<y><z/></y>)( /x/ ))\n) && 0);");
tryItOut("if({}) {if([,]) {var prop = *; } else  if (<x><y/></x>) {continue L;; } else prop = <><x><y/></x></>;throw prop; }");
tryItOut("/*infloop*/for(this.zzz.zzz; <x/> ? <><x><y/></x></> : -1; false.valueOf(\"number\")) {yield #1#; }");
tryItOut("if(<><x><y/></x></>) { if ( \"\" )  else {gc() }}");
tryItOut("if(033) { } else  if ( /x/ ) gc()");
tryItOut("if((({prototype getter: function (__proto__) { return <><x><y/></x></> }  }))) export *; else  if (this.__defineGetter__(\"__iterator__\", (new Function(\"L:if(<!--yy-->) { if (__noSuchMethod__) yield;} else {continue M; }\")))) {throw <y><z/></y>; }");
tryItOut("/*infloop*/for(yield prop; (( set __iterator__ __iterator__ (__parent__)__count__ = <><x><y/></x></>)()); (uneval(constructor = window))) return;");
tryItOut("L: if(this.__defineGetter__(\"constructor\", window)) { if (({__proto__: <x><y/></x>,  get prop(__noSuchMethod__, __count__) { yield prop }  })) {return;{} } else {<x><y/></x> }}");
tryItOut("if((({constructor: <x><y/></x>}))) {let __noSuchMethod__ = <><x><y/></x></>, prop = <x><y/></x>;(<y><z/></y>).__defineSetter__ } else continue ;");
tryItOut("L:switch(((<><x><y/></x></>.watch(\"__iterator__\", (<x><y/></x>).watch))[({ __count__: __noSuchMethod__ }) = (yield [z1,,])]).hasOwnProperty(\"__noSuchMethod__\")) { default: case 0: __count__ = @foo;case 8: break;  }");
tryItOut("yield 3\n;");
tryItOut("/*for..in*/(var constructor = '__iterator__.__iterator__ setter= Math.pow.__defineSetter__(\"__iterator__\", Function) in this) prop = @foo, prototype;");
tryItOut("{gc() }");
tryItOut("<xxx {__iterator__}={this.__defineGetter__(\"getter\", <x><y/></x>)} />");
tryItOut("L:while((((([,,].__defineGetter__(\"__iterator__\", Math.sin)) for each (__count__ in  '' )))) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in #1#) yield this; }\n");
tryItOut("L: ;");
tryItOut("M:if(this.__defineGetter__(\"__iterator__\"//h\n, ({}).__lookupGetter__)) { if (([1].__defineSetter__(\"__proto__\", eval)).unwatch(\"prop\").hasOwnProperty(\"constructor\")) L: {gc()*::*; }} else {with(([1,2,3,4].slice).apply){return <><x><y/></x></>;yield; }yield }");
tryItOut("break M;");
tryItOut("with({__iterator__: \t /x/g  | <x/>});");
tryItOut("/*infloop*/for(#3={a:#3#}; ({a2:z2}); __noSuchMethod__) {let __iterator__ = <><x><y/></x></>, __noSuchMethod__;export *; }");
tryItOut("throw __parent__;");
tryItOut("L: {if( \"\" ) __count__ = __parent__; }");
tryItOut("{throw this;this.zzz.zzz; }");
tryItOut("with({}) return (this.__defineGetter__(\"prototype\", function  __count__ (__iterator__) { yield null } ))\n;");
tryItOut("__count__;return 5.0000000000000000000000;");
tryItOut("/*infloop*/for(var __noSuchMethod__; __iterator__ = <x><y/></x>; this.@foo) throw this;");
tryItOut("while((__count__.__proto__ = <x><y/></x> - __iterator__) && 0)/*infloop*/for(const __noSuchMethod__; <x><y/></x> for (__proto__ in <x/>); this.zzz.zzz) let __noSuchMethod__, __parent__ = true;");
tryItOut("/*for..in*/M:for(const __proto__ in (new (1e81)(prototype, 1e+81))) {if( '' ) {var constructor, prototype = true;; } else  if (<x/>) {yield  '' ;yield ({a1:1}); }/*for..in*/for(var __parent__ = eval in undefined) const prototype = <x/>, __parent__ = false; }");
