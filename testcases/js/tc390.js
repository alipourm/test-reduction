tryItOut("/*infloop*/for(033.prop = <x><y/></x>; (prop.__count__ <=  /x/ ); (eval(\"+{}\", /a/gi))) /*for..in*/M:for(let __proto__ = (({prototype: ~1e+81})) in  /x/ ) {/*infloop*/for(let __iterator__ = __proto__;  /x/ ; <x><y/></x>) {break ;return; } }");
tryItOut("if( /x/  .@x::  \"\" ) export *; else  if ((4..__lookupGetter__(\"prop\"))) (prop);");
tryItOut("/*for..in*/(<x><y/></x> === <><x><y/></x></>)for(const prop = __noSuchMethod__.(<x/>) in constructor) {return; }\n");
tryItOut("L: let prop;");
tryItOut("\fL:with({__proto__: [1e-81].map(gc)}){new (undefined)(); }");
tryItOut("\tL:if([1e-81].sort(Math.pow)) (*); else  if (#1=[#1#].hasOwnProperty(\"__parent__\")) {*::*; }\nyield;\f\n");
tryItOut("switch(0/0) { default: false;break; case 0: break;  }");
tryItOut("return;");
tryItOut("/*infloop*/for(*; -(__count__.@* - (let = new String(@foo, -1))); new 'fafafa'.replace(/a/g, function  __iterator__ (__count__) { (__proto__); } ) << [__count__]) {/*infloop*/for(var __proto__ = __parent__.prop setter= 4.; ( '' .__defineSetter__(\"constructor\", Math.pow))[typeof <zzz>this</zzz>]; [1,2,3,4].slice.__lookupSetter__(\"__count__\")) {do  while((<x><y/></x>) && 0); } }");
tryItOut("L: {{}const __iterator__ = <><x><y/></x></>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(constructor in ((gc)(<x/>))){{}'haha'.split }");
tryItOut("while(([z1,,]) && 0){<y><z/></y>;\n/*infloop*/for(var __count__; <zzz> \"\" </zzz>; (window >>>=@foo)) {}\n }");
tryItOut("/*infloop*/do /*for..in*/for(var \f__count__ in ((<x><y/></x>)(#3={a:#3#}))){} while((this.__defineSetter__(\"constructor\", /a/gi))(([11,12,13,14].some)));");
tryItOut("if(1e-81) {{{} }var prop; }");
tryItOut("return constructor\n");
tryItOut("if(function(id) { return id } = function(id) { return id }) { if (constructor = [1,,]) {gc() } else export constructor;}");
tryItOut("gc()");
tryItOut("/*infloop*/while(Function(*::*))/*infloop*/for(<x/>; (Array([1], <x/>)); new Function((undefined\n), window)) continue ;");
tryItOut("L\t: {with((prop.__proto__ = __iterator__ =  /x/g )){let prop, constructor = <x><y/></x>;break L; } }");
tryItOut("/*infloop*/M:do {; } while((this.__defineSetter__(\"__count__\", gc).yoyo(((__parent__.__iterator__ getter= (<><x><y/></x></>).watch)))));");
tryItOut("const __iterator__");
tryItOut("yield;");
tryItOut("with({}) for(let y in []);");
tryItOut("/*infloop*/do return @foo; while(-0[*]); const __proto__;\t");
tryItOut("/*infloop*/for(function(id) { return id } >>> <x><y/></x> in \n<y><z/></y>; (__proto__); (__iterator__ = ( \"\" .valueOf(\"number\")))) return;");
tryItOut("L: {{}yield; }");
tryItOut("{const __noSuchMethod__ = true; }");
tryItOut("this.zzz.zzz;");
tryItOut("M:do {(<x><y/></x>); } while((__count__.(prototype)) && 0);");
tryItOut("L:with({__count__: constructor})return;");
tryItOut("/*infloop*/while([[1]]){L: {yield;throw <x><y/></x>; }const __parent__; }");
tryItOut("do { } while((new /a/gi()) && 0);");
tryItOut("M:if(((new (undefined)((-0))).__defineSetter__).call(this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map), (this.zzz.zzz), (prototype = <x/>))) const __iterator__ =  '' , x::__proto__ = *\n");
tryItOut("/*for..in*/for(var [__proto__, prop] = var __noSuchMethod__ = <><x><y/></x></> in ( /* Comment */ \"\" )) ((__proto__ = #2=setter = ({ get \tprototype(__count__, prototype) { return this }  })));");
tryItOut("while((()) && 0){/*infloop*/do export *; while(__parent__);export *; }");
tryItOut("if((p={}, (p.z = this)())) { if ( /x/ .eval( '' .eval(@foo))) export prototype; else {return -0;return  '' ; }}");
tryItOut("/*infloop*/for(({ constructor: [], each: ({ __iterator__: get }) }) = window << function ([y]) { }; yield #3={a:#3#}; (uneval(<><x><y/></x></>))) return <x><y/></x>;");
tryItOut("yield; const __iterator__;");
tryItOut("/*infloop*/for(constructor; 4.; @foo) {const prototype; }");
tryItOut("if(<xxx>{__proto__}</xxx>) { if (new ({prototype: this })()) {yield; }} else {return  /x/g ;<><x><y/></x></>\nlet constructor =  /x/ , constructor = *;\n }");
tryItOut("if((([,,] -= undefined).unwatch(\"__parent__\"))) this.zzz.zzz; else  if (<x><y/></x>( '' )) {{/*for..in*/for(var prototype in ((function(y) { yield y; yield undefined;; yield y; })(this.zzz.zzz >>> window.__defineSetter__(\"__proto__\", new Function)))){{} } } }");
tryItOut("if(0/0) { if ( /x/g ) {<x/> }} else (Math.pow).call");
tryItOut("do return this; while((prop) && 0);");
tryItOut("L: gc()");
tryItOut("/*infloop*/for((__iterator__-=[]); -0 & (true++ !=  /x/g .constructor); __iterator__(this) = (yield  '' ;)(1e4)) {;(<x/>); }");
tryItOut("if(<y><z/></y>) <x><y/></x>");
tryItOut("switch([]) { case 3: export *; }");
tryItOut("/*infloop*/for(eval(\"return;\", __noSuchMethod__); *::* === <><x><y/></x></>; (({prop: 1.2e3}))) {const __noSuchMethod__, prototype; } const prototype;");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = (delete [undefined] <= __iterator__) in new (4. && undefined)(*::*)) {gc()\n/*infloop*/for(({ __count__: __proto__ }) = \t*.throw(this); #0=__count__; yield <x/>) { } }");
tryItOut("if(<x><y/></x>) export prototype; else  if (<y><z/></y>) var constructor;");
tryItOut("while((eval(\"break M;\", (#0=({prop: <x><y/></x>})))) && 0){break ;/*infloop*/do {;yield; } while([1]); }");
tryItOut("L: return -1;\n*;\n const prop;");
tryItOut("L:switch(false\n) { case yield {}: (function(q) { return q; }).callbreak;  }");
tryItOut("throw StopIteration;");
tryItOut("if( '' ) {return __proto__;function (constructor, prototype) { constructor, __proto__ = this; }  } else  if (*) __parent__: <x><y/></x>\n");
tryItOut("try { throw prop; } finally { for(let y in []); } ");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)window;");
tryItOut("yield *.__noSuchMethod__;");
tryItOut("let __proto__ = window, constructor = false;");
tryItOut("while((true) && 0)return;");
tryItOut("this.zzz.zzz;");
tryItOut("var __proto__, prop");
tryItOut("with({}) { return; } ");
tryItOut("let (__noSuchMethod__ = (undefined.__noSuchMethod__)) { do {let __noSuchMethod__, __noSuchMethod__ = <><x><y/></x></>;const __parent__ = <><x><y/>/*\n*/</x></>; } while((([15,16,17,18].map('haha'.split, 1e+81))) && 0); }\n");
tryItOut("throw __parent__;");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*for..in*/L:for(var <y><z/></y>['__noSuchMethod__'] in ((uneval(null)))(('fafafa'.replace(/a/g, <y><z/></y>)), [z1,,])) __proto__;");
tryItOut("/*for..in*/for(__parent__ = (<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")).@* in window) yield;");
tryItOut("/*for..in*/L:for(const [__iterator__, __iterator__] = (*::* > <x><y/></x>) in new ({prototype: *::*})(constructor = __iterator__, window)) {throw this; const __noSuchMethod__; }");
tryItOut("do \f{{gc()break M; } } while((!(__iterator__ = this).__lookupSetter__(\"prop\")) && 0);");
tryItOut("with({__count__: 'fafafa'.replace(/a/\ng, this.__defineGetter__(\"__noSuchMethod__\", /a/gi))})return window;");
tryItOut("return <x/>;\nexport __proto__;\n");
tryItOut("/*infloop*/do try { export __count__; } catch(prototype if (function(){__iterator__ = default: break; case 9: ;})()) { let __parent__ = <><x><y/></x></>; }  while((null.constructor)\n);");
tryItOut("return\n");
tryItOut("if((Exception( '' ))) { if ([((-1)).watch(true)]) {return ; }} else {<x/>;break ; }");
tryItOut("Math.sin\neval\n");
tryItOut("with({__noSuchMethod__: (p={}, (p.z = <x><y/></x>)())})continue L;");
tryItOut("/*for..in*/M:for(const __parent__ = (let (({ prop: ({ __noSuchMethod__: prop, constructor: __noSuchMethod__ }) }) = <><x><y/></x></>.__defineGetter__(\"__parent__\", new Function)) (#2=(.2))) in yield true , @foo) let (__proto__, __parent__ = <y><z/></y>) { gc()\n }");
tryItOut("(constructor);");
tryItOut("if(<x/>) {/*for..in*/for(const __parent__ in ((/a/gi)((<x><y/></x> ? 033 : undefined)))){export *; } } else  if ((eval(\"true\", @foo) = *::* &= <x><y/></x>).__parent__ = new __count__()) {let(constructor) { let prop = [,], __iterator__; } else gc()");
tryItOut("if(function(id) { return id }) /*\n*/case 3: constructor;break; ");
tryItOut("\rwith(( /x/g  / <y><z/></y>)){export *;return <x><y/></x>; }");
tryItOut("/*for..in*/for(prop in ((function  __proto__ (__noSuchMethod__) { yield  ''  , [,,] } )(({ prototype: __parent__ }) = let (__iterator__ = <y><z/></y>) new ((1 for (x in [])))(<y><z/></y>)))){if( '' (0.1, prop) ^  \"\" .watch(\"__noSuchMethod__\", function ()window)) /*infloop*/for(const constructor; true;  /x/g ) {continue ;export *; } else {} }\n");
tryItOut("/*for..in*/for(let constructor in (__parent__ = *::*)) {/*infloop*/for(const set = window; [z1,,]; 1e81) __parent__ = <x><y/></x>var __parent__ = <x/>, __noSuchMethod__ =  \"\" ; }");
tryItOut("return this;;");
tryItOut("M:with({constructor: <bbb xmlns:ccc=\"/*\n*/continue ;\"><ccc:eee></ccc:eee></bbb>})gc()");
tryItOut("/*for..in*/for(let __iterator__ in <><x><y/></x></>) {function(q) { return q; }throw this; }\nif(new Array( \"\" , constructor)) throw <x/>;\n");
tryItOut("-3/0\nM:if(<x><y/></x>) {gc() } else  if (false) {3; } else {yield  /x/g ; }");
tryItOut("yield\n");
tryItOut("try { throw StopIteration; } catch(prop if (function(){for(let y in []);})()) { return; } catch(__parent__ if (function(){return;})()) { let(constructor) ((function(){gc()})()); } catch(constructor if prototype.__parent__ = \n<x><y/></x>) { export __proto__; } ");
tryItOut("do /*infloop*/for([\n({prop: ( /x/g .__noSuchMethod__)})].some(Function); (__count__ = prop = 3/0); __parent__ = <x><y/></x>.unwatch(\"__noSuchMethod__\") /= #3={a:#3#}) /*for..in*/for(const prop in ((<y><z/></y>)(<x/>))){}\t while((((yield null)) ? (eval)() : ([11,12,13,14].map)) && 0);");
tryItOut("if(__proto__) {export *;{} }");
tryItOut("return;");
tryItOut("L:with({__count__: *::*}){export __noSuchMethod__; /x/  }");
tryItOut("{while(((yield let (prop = [,,]) <x><y/><\f/x>)) && 0)const prop = __noSuchMethod__; }\n<x><y/></x>; const __proto__;");
tryItOut("while((__parent__ = *) && 0)continue ; const __proto__;");
tryItOut("return;");
tryItOut("with((function ([y]) { })() << window){return  '' ;do  \"\" ; while((let (__noSuchMethod__ =  /x/g ) this) && 0); }");
tryItOut("/*infloop*/for(__iterator__; Math.sin; (Math.sin).call( '' ,  \"\" , <x><y/></x>)) {let prop =  \"\" , __count__; }");
tryItOut("{}");
tryItOut("return;");
tryItOut("return;");
tryItOut("/*for..in*/for(let [__count__, __count__] = <><>(undefined)()</></> in  \"\"  %= prop) {let __parent__;yield; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; #1=[#1#]; [[1]]) {gc() }");
tryItOut("(<x/>);L: ;");
tryItOut("__iterator__ = -3/0, __count__;");
tryItOut("if((__count__ = <x><y/></x>).__defineSetter__(\"__iterator__\", (uneval(<><x><y/></x></>)))) {/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <x><y/></x>) {throw  '' ;export __proto__; } }");
tryItOut("/*for..in*/M:for(__noSuchMethod__.constructor in 4.) {return [,,]; }");
tryItOut("/*for..in*/M:for(const [prototype, __iterator__] = ([<x><y/></x>]) in __proto__) return;");
tryItOut("/*infloop*/M:do /*infloop*/while(1e81){continue ;Math.sin } while([window]);");
tryItOut("/*infloop*/L:for(__noSuchMethod__; __proto__; <y><z/></y>) {(__proto__); }");
tryItOut("<y><z/></y>");
tryItOut("if(__noSuchMethod__ %= <><x><y/></x></> ? <x><y/></x>.__defineGetter__(\"__iterator__\", function(q) { return q; }) : [[]].__defineGetter__(\"constructor\", null)) { if (prototype) {gc() }} else {return __noSuchMethod__;{} }");
tryItOut("throw <x/>;\n;\n");
tryItOut("/*infloop*/do {var __parent__ = undefined; } while( /x/g .*);");
tryItOut("switch() { case eval(\"(uneval(null))\", *):  }");
tryItOut("prop");
tryItOut("(<y><z/></y>);");
tryItOut("/*infloop*/M:for(__count__.((*::* ? <x/> :  { return __iterator__ } )); gc(1e+81.throw(<><x><y/></x></>), __noSuchMethod__); {gc()return @foo; }) return;");
tryItOut("prototype = __count__;");
tryItOut("L: {[1,2,3,4].map }");
tryItOut("{/*infloop*/M:do ; while([[1]]);Function }");
tryItOut("/*infloop*/for(((function  __proto__ (__parent__, __count__)<><x><y/></x></>).call(0, __noSuchMethod__).propertyIsEnumerable(\"__count__\")); 'fafafa'.replace(/a/g, Math.pow); (__iterator__ = window %= this.yoyo((<y><z/></y> === __count__)).__defineSetter__(\"__noSuchMethod__\", ((new __noSuchMethod__(__proto__ .@*:: (-1))) %= __parent__ = (<x><y/></x> :: <><x><y/></x></>)).__defineSetter__))) __proto__ =  /x/g ");
tryItOut("{}");
tryItOut("let(({ prop: ({ __parent__: __proto__ }) }) = ((\ntry {  ''  } finally { return; } )[constructor = <y><z/></y>]), __iterator__ = (prop).eval('haha'.split.unwatch(\"prop\")).yoyo(@foo.@*.*)) { for(let y in [5,6,7,8]) yield ([(-<x><y/></x> .@*:: (({ get __noSuchMethod__ __noSuchMethod__ ()window, constructor setter: /*\n*/function(y) { yield y; ; yield y; } })))]);");
tryItOut("with({}) yield;");
tryItOut("{let(prototype = break ) ((function(){this.zzz.zzz;})()); }");
tryItOut("/*for..in*/__proto__");
tryItOut("export __parent__;");
tryItOut("L: {if({}) {; } else  if (<><\tx><y/></x></>) *;__parent__ = prop; }");
tryItOut("do gc() while(( /x/ .unwatch(\"prototype\")) && 0)\n/*for..in*/for(var (__iterator__\f) in ()) {/*infloop*/L:for(const ({ prop: ({ __parent__: prototype }) }) = (constructor = @foo); (new Function).call(prototype, null, 5.0000000000000000000000); (__count__.(<><x><y/></x></>))) 'haha'.split }");
tryItOut("( /x/g ).__defineSetter__ const function::__parent__;");
tryItOut("if(<x/>[ /x/g .valueOf(\"number\")]) L:if([#3={a:#3#}].map((({}).__lookupGetter__.call)) /*infloop*/for(let yield; -1; <x><y/></x>) {; }\t const __parent__;");
tryItOut("/*for..in*/for(let [constructor, prop] = (__iterator__ = constructor.eval((<><x><y/></x></>.yoyo(<x><y/></x>)))) in constructor.(*::*)) if((-0).__defineGetter__(\"prop\",  /x/g )) { if ( /x/g .eval(__noSuchMethod__)) export *; else undefined;}");
tryItOut("/*infloop*/for(let set; get = (window |= prop); prototype) {let (__parent__, __count__) { ; }(arguments); }");
tryItOut("with(( /* Comment */<y><z/></y>)(__parent__: <x><y/></x> |= true)-=(({__iterator__: @foo })).__defineSetter__(\"__parent__\", function  __iterator__ () { yield @foo } ).valueOf(\"number\"))let(prototype = __parent__.__noSuchMethod__) { this.zzz.zzz;");
tryItOut("with({__iterator__: ({ constructor: prototype, constructor: [, ] }) = (__proto__.(*::*))})/*infloop*/while(null){}");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = --window in (__count__ = true\r)) yield;");
tryItOut("let function::constructor, __proto__; const __noSuchMethod__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("return <><x><y/></x></>;");
tryItOut("/*infloop*/do {[1,2,3,4].slice } while( /x/ ());");
tryItOut("/*for..in*/M:for(const constructor in ((Math.pow)( '' )))/*for..in*/for([__parent__, __proto__] = new (<x><y/></x>)(<x/>, <y><z/></y>) in  /x/ ) yield -1;");
tryItOut("do (<x><y/></x>); while((__count__) && 0);");
tryItOut("/*for..in*/L:for(var __count__ =  in this.zzz.zzz) *;");
tryItOut("/*infloop*/for(constructor; <x/>; __iterator__) gc()");
tryItOut("if(true) return <><x><y/></x></>;");
tryItOut("if((<><x><y/></x></> ? <x><y/></x> : true.watch(\"__noSuchMethod__\", this))) { if ([z1].@foo) {;/*infloop*/for(constructor = prototype; <><x><y/></x></>; __count__) <><ccc:ddd>yyy</ccc:ddd></><x><y/></x><!--yy--> } else {with({__parent__: prop}){return  \"\" ; }gc() }}");
tryItOut("/*infloop*/while([] * -0)yield #1=[#1#];");
tryItOut("__iterator__ = prop;");
tryItOut("/*for..in*/for(let __proto__ in ((new <><x><y/></x></>( /x/g , __noSuchMethod__))(__parent__ = false.valueOf(\"number\")))){/*for..in*/for(var <y><z/></y>['__noSuchMethod__'] in (('haha'.split)((1e+81\n))))this, __proto__;(<><x><y/></x></>); }");
tryItOut("/*infloop*/M:while((p={}, (p.z = #1#)()))yield __noSuchMethod__;");
tryItOut("");
tryItOut("let(prototype, __parent__) ((function(){var __proto__ = this, prototype = <x/>;})());");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <y><z/></y>.__defineGetter__(\"__parent__\", ( /x/ ).watch) in <x><y/></x>) {if(this) window; else  if (0) {(new Function(\"__proto__, __proto__ = *;\")) } else {4.;gc() } }");
tryItOut("{export *; } const __iterator__;");
tryItOut("if((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(this.__defineGetter__(\"__iterator__\", function  __count__ (({ prototype: constructor, __parent__: prototype }), constructor) { yield this } ))\f).isPrototypeOf(((<y><z/></y> ? <><x><y/></x></> : window) ? __parent__ : (({a1:1}).watch(\"__count__\", Function)) ? __parent__ = this : __proto__.prop = window) ? eval(\"<y><z/></y>\", this) :  /x/g )) throw StopIteration;");
tryItOut("if(<><xxx>{__parent__}</xxx></>) { if ((((prop = <y><z/></y>).eval(__iterator__ = ()).eval(*))) {var prototype = this; }} else while(((( /x/ .@foo) for (__parent__ in @foo) for each (constructor in <x><y/></x>))) && 0){gc() }");
tryItOut("let (constructor, [, [({ __parent__: ({ constructor: __proto__, prototype: ({ prototype: constructor }) }) }), __iterator__, , , ]]) { throw delete; }");
tryItOut("if((constructor.( /x/ )).__lookupGetter__(\"constructor\")) {__iterator__ = <><x><y/></x></>, __iterator__ = 5.0000000000000000000000;; } else {gc()return; }");
tryItOut("/*infloop*/M:do {yield undefined.@foo;continue ; } while([15,16,17,18].map(gc, __proto__.constructor =  /x/ ));");
tryItOut("/*infloop*/L:do \nyield; while(#1=[#1#]);");
tryItOut("/*for..in*/L:for(__parent__ in @foo / <x><y/></x>) {if((yield <><x><y/></x></>)) { if (&[__count__]) export __noSuchMethod__;} else var __proto__ = this, prototype; }");
tryItOut("/*for..in*/for(const prop in <x><y/></x>) ({}).__lookupGetter__");
tryItOut("if((function(y) { yield y; return true;; yield y; })) { if ((1e-81(<x/>, function::prototype) ? [11,12,13,14].filter[<x><y/></x>.hasOwnProperty(\"__parent__\")] : (eval(\"1e+81\", *)))) return 3/0;} else ");
tryItOut("let (prop) { L:switch(arguments <<= <><x><y></x></>) { case 4: export __parent__; } }");
tryItOut("do if(<><x><y/></x></>) {yield {};break M; } while(( /x/g  < <><x><y/></x></>) && 0);");
tryItOut("if( '' ) {(<x><y/></x>); } else let __proto__;");
tryItOut("throw __proto__;");
tryItOut("throw StopIteration;");
tryItOut("{export prototype; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = ({ constructor: __noSuchMethod__, __count__: prop }) = __count__ in true) break L;");
tryItOut("");
tryItOut("with({}) export prop;");
tryItOut("L: {M:with({prototype: <x><y/></x>})export __proto__; }");
tryItOut("if(( /* Comment */window += (__count__ ? __noSuchMethod__ : <><x><y/></x></>))) {yield; } else {var __count__ = @foo, constructor = undefined;gc() }");
tryItOut("L:with({prop: let (({ __noSuchMethod__: __parent__, __parent__: __iterator__ })) (this.__defineSetter__(\"__proto__\", ((-1)).watch))}){return; }");
tryItOut("L: {function (__parent__) { return null }  }");
tryItOut("/*infloop*/do __proto__ while(<x><y/></x>);");
tryItOut("{/*for..in*/for([__noSuchMethod__, __noSuchMethod__] =  { return undefined }  in  \"\" ) {{} }/*for..in*/M:for(var prop = (p={}, (p.z = this)()) in #1#.__parent__ = <x><y/></x>) {with(*){throw  '' ;; } } }");
tryItOut("/*infloop*/for( for (__parent__ in <><x><y/></x></>); this.zzz.zzz; __parent__.__iterator__ = <y><z/></y>) gc()");
tryItOut("M:do {(<><x><y/></x></>); const __parent__; }//h\n while(( { yield <x><y/\t></x>; } ) && 0);");
tryItOut("while((#2=[({})]) && 0){true; }");
tryItOut("yield null , this;");
tryItOut("with({prop: __count__.__proto__ = yield null\n}){; }");
tryItOut("if(window) {yield;/*infloop*/M:for(function::__count__; ( /* Comment */ /x/g ); new [1,2,3,4].slice((__iterator__ = prototype))) {gc()\nexport *;if(this) throw  /x/ ; else  if (5.0000000000000000000000) constructor, __iterator__; else (true); } } else  if (((p={}, (p.z = <x><y/></x>)())[false(<x><y/></x>)])) /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in [__iterator__, , prototype] = <x><y/></x>.__proto__) __count__ = window, function::constructor = <x><y/></x>;\nL:switch({}) { default:  }\n");
tryItOut("M:if(__count__ = <x><y/></x> ? (__parent__ = <><x><y/></x></>) : window) { if (<zzz><><x><y/></x></></zzz>) {const prototype = *; } else {gc()throw window; }}");
tryItOut("return\n");
tryItOut("let (__parent__, __parent__ = eval(\"{\\fconst __count__ = *::*; }\", constructor.prototype)) { propL: {gc() } }");
tryItOut("let (({ prototype: ({ prototype: __noSuchMethod__ }) })) { /*infloop*/L:for((constructor.__proto__ setter= function  constructor (__parent__, __parent__) { return * } ); #1=[#1#]; ('fafafa'.replace(/a/g, [1,2,3,4].slice))) {((function ([y]) { })()); } }");
tryItOut(";");
tryItOut("{if((uneval(({a2:z2}) in <x><y/></x>))) {return;gc() } else  if (prop = <x/>) {} else {(#1#); } }");
tryItOut("/*infloop*/while(window)let prototype, prop = <><x><y/></x></>;");
tryItOut("switch(([( /* Comment */null) for each (prototype in <x><y/></x>) for (__count__ in <x/>)])) { default: if(undefined) {yield null; } else  if (<x><y/></x>) {(0x99); }break;  }\nexport *;yield <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (window)(<x><y/></x>) in (-0)) {yield; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var <x><y/></x>['__parent__'] in <><x><y/></x></>) export *;");
tryItOut("/*infloop*/L:do {<><x><y/></x></>; } while((p={}, (p.z =  \"\" )()));");
