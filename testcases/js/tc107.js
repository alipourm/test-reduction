tryItOut("do export __count__; while((__count__ = <x/>) && 0);");
tryItOut("with({constructor: (__proto__ =  ''  /= (-0))})yield (<x><y/></x>)(null)");
tryItOut("/*for..in*/for(let constructor in <><bbb xmlns:ccc=\"true === true\"><ccc:eee></ccc:eee></bbb></>) /*for..in*//* nogeckoex bug 349964 */ for  each(<></>['__parent__'] in constructor = window, __parent__ = *::*) let prop = <y><z/></y>;");
tryItOut("return __noSuchMethod__.prop;");
tryItOut("<x><y/></x>;\nwith({prop: __proto__.__noSuchMethod__}){var prototype;let __parent__; }\n");
tryItOut("{const __iterator__ = 1e81, __noSuchMethod__; }");
tryItOut("if([(-1)]) { if ((<><x><y/></x></>)(export *;)) const prototype = <x/>; else (window).watch}with({}) for(let y in []);");
tryItOut("/*infloop*/M:do <><x><y/></x></>; while(<><x><y/></x></>);");
tryItOut("\nL: {__parent__\nreturn; }");
tryItOut("throw function::x::__proto__;");
tryItOut("let (__proto__ = ({})) { let (__count__ = true) { prop } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(([15,16,17,18].some(function (__count__) { yield prop } , <x><y/></x>)) in <y><z/></y>) let prop = prototype, prop = false;");
tryItOut("let (__iterator__) { if() {if(window) { if (@foo) {prop; } else var __iterator__ = 0.1;} } else  if (this ^= <><x><y/></x></> && (('haha'.split).call([[1]].__defineGetter__(\"prototype\",  \"\" ), <><x><y/></x></>, (function ([y]) { })()))) {let (get = <x><y/></x>) { do {} while((__parent__\f) && 0); }export constructor; } }");
tryItOut("{return; }");
tryItOut("try { __count__ = constructor; } finally { return this; } ");
tryItOut("/*for..in*/for(var eval(\"<><x><y/></x></> <<= prototype\", __iterator__ = #3={a:#3#}) = let (__proto__ = (<x/>.isPrototypeOf(this)).@*) constructor = (function () { __parent__; } ).call({}, return undefined;) in (((1 for (x in [])))(({a2:z2}), []))) {return ({ get __iterator__() { yield <y><z/></y>; } ,  set delete(__count__, __parent__) { yield true }  });(function ([y]) { })()var __parent__, prop = undefined; }");
tryItOut("let (/*\n*/set) { ; }");
tryItOut("if((<><x><y/></x></> ?  /x/g  : 3/0)) return <x><y/></x>.(#1#);");
tryItOut("/*infloop*/for(__proto__ = ((*)(*) = <y><z/></y>).yoyo((* , <x><y/></x>)); [__parent__, constructor, __parent__] = (-1)(); (__noSuchMethod__.prototype setter= (#1=[#1#].@foo))) /*infloop*/do {(default: ;break; ).watchlet __count__, prop = <x/>; } while(prop = undefined);");
tryItOut("/*for..in*/for(const __count__ = .@* in true) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [({ __noSuchMethod__: constructor, prop: __noSuchMethod__ }), , __noSuchMethod__] in null.propertyIsEnumerable(\"prototype\")) return <x><y/></x>;");
tryItOut("return;;");
tryItOut("with({__iterator__: })break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <x/>.prototype in <x><y/></x>) {*@foo; }with({}) for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("continue ;\n{}\n const prototype;");
tryItOut("switch(window) { case <><xxx>{__noSuchMethod__}</xxx></>: break ;break;  }");
tryItOut("if(((uneval(#3={a:#3#})))) { if (typeof <x><y\t/></x>) gc()} else {return [1]; }");
tryItOut("/*infloop*/while((<xxx {__noSuchMethod__}={@foo} />.(<x><y/></x>)))var __proto__;");
tryItOut("if(<><xxx {__iterator__}={<x/>} /></>) let(window = [z1], constructor) { yield; else  if ( /* Comment */window) {yield  /x/ ; }");
tryItOut("if(__count__.propertyIsEnumerable(\"__iterator__\")) { if (function(id) { return id } < this) {return [11,12,13,14].filter; }} else M:if(#3={a:#3#}) {__iterator__ = * } else  if (window) {prop;; }");
tryItOut("switch([(1e+81.yoyo(<x><y/></x>))].map(function(y) { yield y; const prototype\nprototype getter: function \t() { return 0.1 } ; yield y; })) { case 2: if(-0) { if (window) { } else continue ;}case __noSuchMethod__.(window.__iterator__): break; default: L: {(constructor); }break;  }");
tryItOut("M:if(__noSuchMethod__.prototype) {let (__noSuchMethod__) { throw <y><z/></y>; } } else  if (-0 < <x><y/></x>) {/*infloop*/__proto__ } else {this;({}).hasOwnProperty }");
tryItOut("with({constructor: (eval(\"/*for..in*/M:for(let [__iterator__, __proto__] = ({__parent__: *::* }) in ((*)())) ;\", <bbb xmlns=\"let (__iterator__ = <x><y/></x>) [1]\"><ccc:ddd>yyy</ccc:ddd></bbb>.(this)))}){do { \"\" ; } while((#1#) && 0);gc() }");
tryItOut("if(<x><y/></x> @ @foo) continue L; else {; }");
tryItOut("{while((<x/>) && 0){(<x/>);export __noSuchMethod__; } }");
tryItOut("/*infloop*/do {L:with({constructor: (yield undefined)})({}).hasOwnProperty } while(new (3.141592653589793 ? false : <x><y/></x>)());");
tryItOut("/*for..in*/for(var __parent__ = ([z1,,] for each (prop in __noSuchMethod__ = __parent__) for ((this.__defineSetter__(\"__iterator__\", [1,2,3,4].map))(__proto__) in [prop, __iterator__] = (<x><y/></x> <= <y><z/></y>)) for each (let in [\t__count__ if (*)]) if (<><x><y/></x></>)) in (yield (uneval())(((new 4.()).__lookupSetter__(\"constructor\"))))) {;/*for..in*//* nogeckoex bug 349964 */ for  each(var (undefined['prop']) in #1=@foo) __count__ }");
tryItOut("gc const prop; const __noSuchMethod__;");
tryItOut("yield;");
tryItOut("/*infloop*/for(const constructor; [[\t, __parent__], __parent__, prototype] = ((uneval(@foo)) == let (prototype =  '' ) [1]); ((yield true))) {;__proto__ =  '' ; }");
tryItOut("if(__count__) {yield; } else  if (<><x><y/></x></>) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__.__noSuchMethod__ in (({ set __parent__\f() ''  / 1e4, constructor setter: (new Function(\"if( /x/g ) {(function ([y]) { })(); } else  if ( /x/g ) {; } else gc()\")) }))) ");
tryItOut("/*for..in*/L:for(const __parent__ in ((function ()* >= window)(\n__count__))){/*infloop*/for(var __iterator__ = (function::constructor|=<><x><y/></x></>).isPrototypeOf((<x><y/></x>.(<x\f><y/></x>))) + ((Math.sin).call((false--), [15,16,17,18].map(Math.pow, *))); new ((#1#).watch)(); this) {const constructor = (-0), constructor;'haha'.split } }");
tryItOut("/*for..in*/for(const __parent__ in __proto__.prop = (__parent__ = [].@foo)) {((prototype%=<y><z/></y>));yield false; }");
tryItOut("/*for..in*/for(var [__count__, __proto__] = (window.constructor)-- in __count__.(*::* &= (function ([y]) { })())) /*infloop*/for([15,16,17,18].filter(function  __parent__ (prop, __parent__) { yield false } , -0); <x/>[ \"\" ] %= ++; constructor(<x><y/></x>)) {export *; const __noSuchMethod__;gc() }");
tryItOut("/*for..in*/M:for(var __iterator__ in null) gc()");
tryItOut("/*infloop*/do {yield null;{} } while(this);");
tryItOut("return;");
tryItOut("if(__count__ =  /x/g ) { if (([] , __noSuchMethod__)) export *;} else export *;");
tryItOut("let(__count__ = yield __proto__+=@foo, ({ __count__: __noSuchMethod__ }) = function  __proto__ ()<><x><y/></x></>().unwatch(\"__iterator__\")) { throw prototype;");
tryItOut("with({__iterator__: ((new Function(\"gc()\"))).call(false.propertyIsEnumerable(\"prop\"), function  constructor ( for each (prop in __noSuchMethod__)) /x/  += <x><y/></x>)})[1,2,3,4].map\n(-0);throw <x><y/></x>;");
tryItOut("if(<y><z/></y> ? __noSuchMethod__ : (<x><y/></x>).call) {return __iterator__: function ([y]) { }; } else  if ((1 for (x in []))) {yield [,]; }");
tryItOut("return;{}");
tryItOut("with({}) let(__proto__ = \r<><x><y/></x></>(<><x><y/></x></>, window), __proto__ = <x><y/></x>) ((function(){return;})());");
tryItOut("M:if( '' ) { if (3) \t else {export prototype;export prop; }}/*for..in*/for(let __proto__.__count__ in (((<x><y/></x> | undefined))(constructor.constructor setter= ({}).hasOwnProperty))){const __count__ = *::*, prop = this;return; }");
tryItOut("with({__parent__: ({ __proto__: ({ prop: __noSuchMethod__, prop: <x><y/></x>, *::* }), __noSuchMethod__: __parent__ }) = ({ prop: __parent__ })}){yield; }");
tryItOut("/*for..in*/for(const [__count__, __count__] = <x><y/></x> -= new (constructor)([], <\r><x><y/></x></>) in (-3/0.prop)) {let constructor = *, __count__ = window;return; }");
tryItOut("gc()\n");
tryItOut("let (__parent__ = null) { ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in true) continue M; const __parent__;");
tryItOut("L:1.3.yoyo(window)) {(<y><z/></y>); }");
tryItOut("/*infloop*/for(var prop = <x><y/></x>; undefined;  /x/g ) var prop;");
tryItOut("__count__; const prototype;");
tryItOut("{return false; } const __parent__;");
tryItOut("return window .@x:: this;");
tryItOut("{yield;break M; }");
tryItOut("if((\n*::*.watch(\"__noSuchMethod__\", *::*)).__parent__) {do {}\n while((this.__defineSetter__(\"prop\", ({}).__lookupGetter__)) && 0);if(<y><z/></y>) /*infloop*/do {/*; } while(<x><y/></x>); } else {/*for..in*/M:for(let __proto__ in (([11,12,13,14].map)())) /*for..in*/for(let (constructor) in ((1.2e3)((undefined @ window)))){yield undefined; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype.@foo in <zzz><y><z/></y></zzz>) /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in ({})) let __proto__\n");
tryItOut("if((new [,](<><x><y/></x></>))) { if ( = [1,,]) {#1=[#1#]return; } else -1;}");
tryItOut("/*infloop*/for(yield @foo ? true :  \"\" ; <y><z/></y>.unwatch(\"__iterator__\"); (__parent__ = <y><z/></y>.propertyIsEnumerable(\"__proto__\") ? (false.unwatch(\"__proto__\")) : ([1,2,3,4].slice(({a2:z2}))\t) .@x:: (undefined <<  /x/g ))) {/*for..in*/for(const [__parent__, constructor] = (-0) && this in [,]) var __noSuchMethod__;yield; }");
tryItOut("/*infloop*/M:do {let __iterator__ = <x><y/></x>;throw 3.141592653589793; } while((({ get __iterator__(__count__, prop)<x><y/></x> })));");
tryItOut("/*infloop*/for(const __parent__; (yield *::*); false.yoyo(<x><y/></x>)) {export __noSuchMethod__; }");
tryItOut("export constructor;");
tryItOut("return eval(\"/*for..in*/for(const [__count__, constructor] = <x><y/></\\nx> in window) {Math.pow }\", <>@foo</>)\n(this)\nreturn *;'");
tryItOut("/*infloop*/M:while(false){var prop = <x/>; }");
tryItOut("with({__proto__: <><>eval(\"__proto__\", window).isPrototypeOf((eval(\"return \\t*;\", this)))</></>})yield;");
tryItOut("");
tryItOut("/*for..in*/L:for(var __iterator__ in prop = constructor) {return *; }");
tryItOut("L: {[[]] }");
tryItOut("/*infloop*/for(const ({ prop: prop }) =  /x/g ; __noSuchMethod__ = __count__; ( ''  && <y><z/></y>)) /*infloop*/for(var [, , ] = <><xxx {prop}={[,]} /></>; function::__parent__ << window; <x/> >>> [[]].__defineSetter__(\"__noSuchMethod__\", (<><x><y/></x></>).__defineSetter__)) var __count__ = true;");
tryItOut("for(let y in []);");
tryItOut("L: { }");
tryItOut("if(( '' )[this]) { if (true) {;gc() }} else {let __count__, __proto__ = <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in null %  \"\" ) {let __count__ = prop, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("if(( /* Comment */'fafafa'.replace(/a/g, (1 for (x in []))))) { if ((uneval(*::*))) {/*infloop*/for(__proto__; <x/>.constructor = window; (uneval(undefined))) {break ;export function::__iterator__; }break ; } else {with(<><x><y/></x></>.__lookupGetter__(\"__count__\")){yield 3.141592653589793;; } }}");
tryItOut("/*infloop*/for(const prop = let (prototype = <y><z/></y>) 0.1; __proto__; (<x/> >>= true)) {(5.0000000000000000000000); }");
tryItOut("let(__noSuchMethod__ = ((yield false))\n) { with({}) gc()");
tryItOut("/*infloop*/for(const prop; (this.__defineSetter__(\"constructor\", function ()prop) .@x:: (uneval(({prototype: this})))); @foo/*\n*/) {let (__proto__ = null) { export prototype; } }");
tryItOut("let (constructor = this.zzz.zzz, __iterator__) { /*infloop*/for(const prop; <><x><y/></x></>; *::*) {export prototype; } }");
tryItOut("switch(((p={}, (p.z = [,])()))) { case false *= <x><y/></x>:  }");
tryItOut("while(( '' ) && 0)/*infloop*/M:do (<><x><y/></x></>); while(eval(\"yield <y><z/></y>;\", [[1]]));");
tryItOut("switch(((uneval(({prototype: [function(q) { return q; } if (<y><z/></y>.@foo)]}))))) { default: /*infloop*/do  while(false);break; case typeof constructor: break; L:if(false) { if (constructor: *.__lookupGetter__(\"__noSuchMethod__\") = <>*.__defineGetter__(\"__parent__\", Function)</>) {yield; } else /*for..in*/for(__proto__ in (((4.).watch)(-3/0)))throw <x/>;}case ({ set __parent__(__parent__) { yield (__proto__ = <x/>) }  }): break; if((window instanceof [1])) break M;case ({a2:z2}): __noSuchMethod__ = @foo;break; break;  }");
tryItOut("if((this.zzz.zzz)((undefined = window) < (p={}, (p.z = <x/>)()), (this.propertyIsEnumerable(\"__iterator__\")))) {(1e81).watch } else {yield;/*for..in*/L:for(__count__ = <><x><y/></x></> in 4.) return @foo; }");
tryItOut("do {__parent__ = <x><y/></x>\n/*infloop*/L:for(let __parent__; @foo; (export __noSuchMethod__)) export *;return; } while((window.constructor) && 0);");
tryItOut("with({__noSuchMethod__: (__proto__.throw(<x><y/></x>))})throw undefined;");
tryItOut("M:while((<x><y/></x>().throw(({a2:z2}))) && 0){}");
tryItOut("__noSuchMethod__ = ({ __iterator__: ({ __iterator__: prop, __proto__: __proto__ }), __iterator__: [, __noSuchMethod__] });");
tryItOut("export __count__");
tryItOut("{gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in <x><y/></x>) return;");
tryItOut("/*for..in*/for(let [__parent__, setter] =  '' .__lookupSetter__(\"__count__\") ? <x/> : prop = this in (prototype = null)) if((({ __parent__: __iterator__ }) = false >= <x><y/></x>)) { if () {const prototype, prototype;export __noSuchMethod__; } else __parent__ = *::*;}");
tryItOut("continue M\n");
tryItOut("L:if((true &= 1e-81 .@*:: (true.__noSuchMethod__))) { if (({constructor: ({ prop: prop, constructor: __iterator__ }) = [[1]].__lookupGetter__(\"prototype\")})) {if((uneval(*::*))) return; else var __iterator__;const prototype = this, prototype = 1e4; }} else (*::*);");
tryItOut("let (__iterator__ =  '' , prototype = <x><y/></x>) {  /x/ ; }");
tryItOut("yield undefined;try { var setter, prop; } catch(function::constructor) {  } finally { *; } ");
tryItOut("/*for..in*/for([constructor, __iterator__] = (__count__ = (function ([y]) { })().unwatch(\"__count__\") ? this.zzz.zzz : __proto__(-3/0) = (yield true)) in ((p={}, (p.z =  '' )()))) {__count__ = constructor, __iterator__ = 1.2e3; }");
tryItOut("break M;");
tryItOut("M:if(<x><y/></x>) {return null; } else  if (@foo) prop = true; else const prop, __count__; const __noSuchMethod__;");
tryItOut("( /x/ )\n");
tryItOut("if((undefined.@*)) { if (1.3 ^= <x><y/></x>) {export __parent__;export prop; }} else __noSuchMethod__, __proto__ = __noSuchMethod__;");
tryItOut("/*infloop*/L:for(let __count__ = ((new function  __noSuchMethod__ (prop)prop(@foo))); (yield).*; ( ''  %  \"\" )) (*);");
tryItOut("return prop = <x><y/></x>.__lookupSetter__(\"constructor\") *= ( /* Comment */<><x><y/></x></>.__lookupSetter__(\"__proto__\"\f));");
tryItOut("do {(<><x><y/></x></>);export function::<x><y/></x>; } while((* != __count__) && 0);");
tryItOut("L: gc()");
tryItOut("/*for..in*/M:for([prototype, prop] = <bbb xmlns:ccc=\"(prototype = window)\"><ccc:eee></ccc:eee></bbb> in @foo.__lookupGetter__(\"prototype\")) break \n");
tryItOut("if(<x><y/></x>.propertyIsEnumerable(\"prototype\")) { if (<x/>.__lookupSetter__(\"constructor\")) {}} else __proto__, prototype");
tryItOut("function (__iterator__)<><x><y/></x></>");
tryItOut("/*for..in*/M:for(prop in ((({}).hasOwnProperty)(\n([prototype = __iterator__ for (prototype in undefined)])))){{yield arguments; }/*for..in*/for(const function::__iterator__\t in -0) yield; }");
tryItOut("/*infloop*/while(new Function)var prototype, constructor;throw <>\r<x><y/></x></>;");
tryItOut("__parent__ = prop;");
tryItOut("if(((yield new <><x><y/></x></>( /x/ , <x><y/></x>))) = new ((RangeError(__proto__).propertyIsEnumerable(\"prop\")))()) { if (prototype-=<x><y/></x>) let constructor, __proto__; else return (-1);const __noSuchMethod__, constructor = #1#;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in [[]]) {return; }");
tryItOut("/*infloop*/do  while((-0));");
tryItOut("throw StopIteration;");
tryItOut("{yield; }(({}).hasOwnProperty).apply");
tryItOut("if(new <x><y/></x>(null, @foo)) \f{ if (new Boolean()) return window; else {const <x><y/></x>;export *; }}");
tryItOut("with({__parent__: __parent__}){<><x><y/></x></>;/*infloop*/for(let __noSuchMethod__ = 0; <><x><y/></x></>; <x><y/></x>) {{} } }");
tryItOut("{continue ; }");
tryItOut("if(\f'fafafa'.replace(/a/g, Math.pow)) gc() else const __count__ = 1.3;");
tryItOut("let(__parent__ = RangeError((<y><z/></y>.__defineGetter__(\"prototype\", function (constructor, __count__)prototype)) ? <><x><//h\ny/></x></> && *::* : ~this, (uneval(<x><y/></x>)))) { throw StopIteration;");
tryItOut("/*infloop*/do {(prototype); } while(<x/>);");
tryItOut("if((<x><y/></x>.__defineSetter__(\"__iterator__\", __parent__))) {export *; } else gc()");
tryItOut(";");
tryItOut("{3.141592653589793; }");
tryItOut("with({}) export constructor;");
tryItOut("/*infloop*/do {L: {gc() }return; } while(#2=[ /x/g .*]);");
tryItOut("if(<y><z/></y>) export __proto__; else {x::__parent__, __count__; }");
tryItOut("/*infloop*/M:for(var case new (<><xxx>{__noSuchMethod__}</xxx></>)(({ __count__: __parent__ }) = true): case 1: try { return; } catch(__count__ if (function(){throw prop;})()) { let(__parent__, prop = *::*) { yield ([15,16,17,18].sort(new Function,  /x/ )); } catch(__noSuchMethod__) { with({}) { prototype = prototype; }  } finally { with({}) yield 1e+81 !=  /x/ ; } let (export *;) { yield; }case 2: throw <x><y/></x>;break; break;  = ((eval(\"arguments > 4.\", ([].*))).yoyo(yield (p={}, (p.z = 1.3)())))<x/>\t; ; [1,,].__defineSetter__(\"__proto__\", __iterator__) > \f#0=; <x><y/></x> + <x></*\n*/y/></x>) export constructor;");
tryItOut("L:if((([[]].isPrototypeOf(function(id) { return id })) & *::*)) { if ([(\neval(\"return;\", window))].some(Math.pow)) {L:if((\nthis)) { if (this) const prop = <y><z/></y>, prop; else {continue//h\n L;\tgc() }} } else /*for..in*/for(__noSuchMethod__ = ([1,2,3,4].map(.2).__defineGetter__(\"__count__\", Function)) in true.hasOwnProperty(\"__iterator__\")) yield;}");
tryItOut("export prop\nconst __parent__ = this;L: let prop;");
tryItOut("M:if(<x/>.@foo) { if (new [1,2,3,4].slice()) {/*for..in*/L:for(const [prop, __noSuchMethod__] = this.__defineGetter__(\"__parent__\", Function) in false) export *;export *; } else do {{}Math.sin } while((this @ *::*) && 0);}");
tryItOut("/*for..in*/M:for(prototype in ) {return;break M\n*::*; }");
tryItOut("{/*infloop*/for(var __count__; (__parent__.__proto__ setter= function  constructor () { return window } ); ('fafafa'.replace(/a/g, <><x><y/></x></>))) { } }");
tryItOut("do {/*for..in*/for(const constructor = <><x><y/></x></> in <x/>) <x><y/></x> } while(((<x/> for each (function::function::__noSuchMethod__ in undefined))) && 0);");
tryItOut("return;");
tryItOut("if((new (\f<x><y/></x> -= 1.2e3)())) { if ((new Function).call(new String(constructor), 1e81)) /*for..in*/for(const prop = @foo in <y><z/></y>) export *;} else {\tyield undefined; }");
tryItOut("with({}) yield [prototype.(<x/>.constructor) if (window)];");
tryItOut("M:if(*) new Function else  if (033) /a/gi else 3/0\n");
tryItOut("return ~ /x/  < null.__defineSetter__(\"__iterator__\", function(q) { return q; })\n");
tryItOut("return <x/>;prop");
tryItOut("if(const __count__, __count__ = <y><z/></y>) 'haha'.split else {export *;[1,2,3,4].map }");
tryItOut("with(<><x><y/></x></>. '' ){{} }");
tryItOut("let ([, __iterator__, prop, ]) { {} }");
tryItOut("/*for..in*/for(var [constructor, __iterator__] = [<><x><y/></x></>.valueOf(\"number\")] in (arguments()) >>> __parent__ = <><x><y/></x></>) /*infloop*/do {yield; } while((*::*.__lookupGetter__(\"__noSuchMethod__\")));");
tryItOut(" { <\f><x><y/></x></>; } ");
tryItOut("let __parent__;\nexport *;\n");
tryItOut("eval");
tryItOut("let (__noSuchMethod__ =  '' ) { yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in window) return;");
tryItOut("{export *; { function(id) { return id } }  }");
tryItOut("/*infloop*/M:for(<x/>; <x><y/></x>; <><x><y/></x></>) {; }");
tryItOut("(<y><z/></y>);");
tryItOut("__parent__ = getter;");
tryItOut("for(let y in []);");
tryItOut("L:if(0/0) { if ( /* Comment */#1=[#1#].yoyo(((p={}, (p.z = <><x><y/></x></>)())))) {;prop = window, __parent__ }} else gc()");
tryItOut("M:if(([15,16,17,18].filter((<x><y/></x>).watch, prototype = prop))) (true); else  if (window.prop) {(true); }");
tryItOut("if(--this for each (__proto__ in  /x/g )) const constructor = {}; else  if ((__iterator__.__iterator__ | * === @foo)) false; else {{} }");
tryItOut("M:if(case 3: export __parent__; const __count__;break; {} '' ;case 0: break; default: break; case <><x><y/></x></>: ;break; ) {export *;export __proto__; }");
tryItOut("/*for..in*/for(const prop = eval(\"<y><z/></y>\",  /x/ ) in export __count__) {export prototype; }");
tryItOut("/*for..in*/for(prop.__count__ in __parent__) {yield *; }");
tryItOut("/*infloop*/for(var ({ __iterator__: __parent__ }) = constructor; __iterator__.(*.__lookupGetter__(\"__proto__\")); typeof __iterator__.throw(((({}).hasOwnProperty).call(<x><y/></x>, )))) {gc()/a/gi }");
tryItOut("/*infloop*/for(__count__; <><x><y/></x></>; null) export __count__;");
tryItOut("/*infloop*/L:for((this.zzz.zzz); <zzz>[1]</zzz>; prop = -1) export *");
tryItOut("export prop;");
tryItOut("let (__parent__ = (true if (@foo))) { export *; }");
tryItOut("with({constructor: eval(\"undefined;\", <x><y/></x>.(<y><z/></y>))})const constructor = <y><z/></y>;");
tryItOut("L: {let prototype, prototype = [,,z1]; }");
tryItOut("M:if(Object([[]], <><x><y/></x></>)) { if (<x><y/></x> ^ false) {(<><x><y/></x></>);break L; }} else var prototype = {};");
tryItOut("with(eval(\"({} })\", (([<x><y/></x>\r].map(eval)) , [@foo].some(([1,2,3,4].slice).apply))))if((gc())) export __proto__; else {}");
tryItOut("if(<y><z/></y>) {; } else  if (__iterator__) {return null; } else {const __proto__ = function ([y]) { }, __noSuchMethod__;gc() }");
tryItOut("M:if(this <<= ({}).__lookupGetter__.valueOf(\"number\")) {} else  if (1e-81) ; else M:switch(true) { default: break M;break;  }");
tryItOut("/*infloop*/do {({}).hasOwnProperty } while(<x/>);\nreturn *;\nexport prototype;\n\n");
tryItOut("/*infloop*/do let(constructor, prototype = <y><z/></y>) ((function(){__iterator__ = [1,,], prototype = window;})()); while((@foo)((function ([y]) { })(), #1#));");
tryItOut("M:if(window) (window).__defineSetter__");
tryItOut("if(({ __iterator__: ({ __count__: [prop, , , ] }), __proto__: [, , __parent__, , ] }) = (yield __proto__ = prop)\n) { if (({__proto__: (*.hasOwnProperty(\"prop\")) ^= (__iterator__ = .2)(), prop: __count__.prototype })) __proto__ =  '' , __noSuchMethod__ = false else continue M;}");
tryItOut("export __noSuchMethod__;\nthrow  /x/g ;\n");
tryItOut("with(const prop = <x/>, __iterator__)/*infloop*/for(__count__; ((Math.sin).apply)( /x/  ? true : <><x><y/></x></>); ({__proto__: [<x><y/></x>]\t})) const __parent__ = window, __iterator__ = (-1);");
tryItOut("/*infloop*/do let try { break L; } catch(prototype) { __noSuchMethod__ =  /x/ , __parent__; } finally { throw <><x><y/>\t</x></>; } , __iterator__; while((<y><z/></y>)(<y><z/></y>, this)\n);");
tryItOut("if(@foo) {return <x><y/></x>; }");
tryItOut("M:if(( /* Comment */__proto__.throw(@foo))) {switch(null) { case 5: var __noSuchMethod__, __proto__;default: break; case 1: break; const __proto__ = true;break; case 8: return;case <x/>: (@foo); } }/*\n*/\n");
tryItOut("if((constructor = prop.__parent__.eval() === *.* ^ window.isPrototypeOf(\f \"\" ))) { if ((({prototype: function(id) { return id }.watch(\"__count__\", function (__noSuchMethod__) { prop = 0x99, function::__parent__; } ) }).yoyo((yield new <><x><y/></x></>( \"\" , [1]))))) /*for..in*/for(let prototype = <><x><y/></x></>++ in constructor =  /x/ ) const __parent__;} else {/*for..in*/for(const [constructor, constructor] = <x/> in 3/0) {export __parent__; } }");
tryItOut("/*infloop*/M:for(__iterator__.__iterator__ = window; ((new (<x><y/></x>)()).watch(\"__noSuchMethod__\", /a/gi).__defineGetter__(\"__iterator__\", eval)); = %= this.*) {const 4., prototype = 0;gc() }");
tryItOut("let([, ({ 4.: __proto__ }), constructor, [__proto__, , , __proto__]] = [[]], constructor) { __proto__ setter: gc");
tryItOut("prototype = __count__;");
tryItOut("do if((yield ({a2:z2}))) { if ( '' ) yield;} else {yield;gc() } while((void <y><z/></y>) && 0);");
tryItOut("/*for..in*/M:for(<><x><y/></x></>, window in ((prop = true)(this.__defineSetter__(\"__proto__\", {(__parent__); }))))function(q) { return q; }");
tryItOut("if( /x/ ) { if (<y><z/></y>) constructor} else {return window; }");
tryItOut("with({prop: (let (prototype = (<x><y/></x>)() &= prop.isPrototypeOf(0.1)) <><zzz>__noSuchMethod__</zzz></>)}){yield <><x><y/></x></>;(1 for (x in []))\n }");
tryItOut("if((eval).call((), var __parent__ = <y><z/></y>, prototype = undefined;)) {{} }");
tryItOut("/*for..in*/for(var prop in function::__noSuchMethod__) {throw <><x><y/></x></>;yield; }");
