
tryItOut("yield (__iterator__ = [,]);");
tryItOut("/*infloop*/for(let __proto__ = [,]; [__noSuchMethod__ = true].\fmap(/a/gi); this) return <y><z/></y>;");
tryItOut("prototype = __parent__;");
tryItOut("L:while((({constructor\f: this}) << ) && 0){prop = 0.1; }");
tryItOut("/*infloop*/for((-(-0)); prop.prop = <x><y/></x>; ( /x/g  != [1])) {yield <><x><y/></x></>;yield; }");
tryItOut("{let prop, prop;export __noSuchMethod__; }");
tryItOut("if(arguments) {gc() } else  if (<bbb xmlns:ccc=\"1e-81\"><ccc:eee></ccc:eee></bbb>) ; else const __parent__;\nL:do {throw  /x/g ; } while(((((function(q) { return q; }).apply).call(*, ))) && 0);\n");
tryItOut("M:with(__parent__.__proto__ setter= ({a1:1})){return;__noSuchMethod__ }");
tryItOut("window;\nexport prototype;\n");
tryItOut("L:with({__noSuchMethod__: }){let constructor, __parent__;(undefined).__defineSetter__ }");
tryItOut("yield;");
tryItOut("do {export *;{} } while((undefined) && 0);");
tryItOut("M:do {yield;with(@foo){let __proto__, __parent__ = ; } } while(() && 0);");
tryItOut("/*infloop*/for(prototype.__count__ = [11,12,13,14].sort; ({ __count__: ({ __count__: ({ __parent__: __noSuchMethod__, __noSuchMethod__: __parent__ }) }) }) = *::*; this.__defineSetter__(\"__proto__\", function () { return #1=(__iterator__.__lookupGetter__(\"__iterator__\")) } )) {export *; }");
tryItOut("with((((new Function(\"(new Function(\\\"\\\"))\"))).call(null, ).propertyIsEnumerable(\"__iterator__\").__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))){{} }");
tryItOut("/*for..in*/L:for([__proto__, prototype] = __count__.__iterator__ in [,]) {}");
tryItOut("/*infloop*/for(const prop; (__parent__ = function ([y]) { }); <x><y/><\t/x>.(__iterator__).unwatch(\"prototype\")) window;");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut(" { yield (function ([y]) { })() } \nlet prop = this, __proto__ = <><x><y/></x></>;\n");
tryItOut("do /*infloop*/do {(<x><y/></x>);return <x/>; } while(*); while((__count__) && 0);");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; __iterator__; this) {if(<x><y/></x>) {const constructor =  /x/g ;export *; } else  if ({}) {; } }");
tryItOut("L:if(([1].watch(\"prop\", (null).call))) /*infloop*/for(__parent__ = this; 3.141592653589793; <x><y/></x>) {yield 1e-81;; } else  if ");
tryItOut("L: {yield <><x><y//></x></>; }");
tryItOut("yield;");
tryItOut("{gc() }");
tryItOut("var constructor = undefined");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const 1e+81 in 5.0000000000000000000000) return;");
tryItOut("yield <x><y/></x> << constructor;");
tryItOut("if((uneval(([[15,16,17,18].map(eval, (__parent__.__proto__ = null))])))) { if (prototype%=(function  __count__ (constructor) { return __iterator__ } )(3, window)) (<><x><y/></x></>);} else const prototype;");
tryItOut("throw StopIteration;");
tryItOut("while((({ constructor: __proto__, __noSuchMethod__: __count__ }) = arguments\n[(( /x/ )[[,,]]).__lookupSetter__(\"__iterator__\")]) && 0){return; }");
tryItOut("prototype = constructor;");
tryItOut("/*for..in*/for(var (__count__) in ([<y><z/></y>])) {{} }");
tryItOut("if(new ([z1], *::*)) export *;");
tryItOut("let(__parent__ = *::* <<= window) { for(let y in [5,6,7,8]) let(prototype = ({a1:1})) { ; const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__(window) in <><x><y/></x></>) export *;");
tryItOut("/*infloop*/while(window){function  __parent__ () { yield #0=({prop:  \"\" }) } {yield\n(<><x><y/></x></>); } }");
tryItOut("(<x><y/></x>);");
tryItOut("with(<x><y/></x>){}");
tryItOut("/*infloop*/while( /* Comment */({__count__: prop\n})){M:with(Iterator(<x><y/></x>) , constructor = 1e-81){;export __count__; } }");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = #1=<><x><y/></x></> in <x><y/></x>) {var yield;; }\n");
tryItOut("switch(( '' )(false[<><x><y/></x></>], 0.1)) { default: let (prop = prototype) {  }case (({ yield: constructor }) = ({ __proto__: __count__, __iterator__: __proto__ })): case Y.__count__ getter= [1,2,3,4].slice: break; case 1:  }");
tryItOut("{do {export __count__; } while((1e+81) && 0); }");
tryItOut("M:if((new Array(prop, <x><y/></x>).isPrototypeOf((uneval(<x><y/></x>))).valueOf(\"number\")))  let  else  if ([15,16,17,18].some('haha'.split, <><x><y/></x></>.unwatch(\"__count__\"))) throw let __parent__ =  \"\" , constructor;;");
tryItOut("if(({ __parent__: __noSuchMethod__ }) = [11,12,13,14].filter) { if ((true.__count__.yoyo(new ( /x/g )([,,z1])))) throw undefined; else {export *;export *; }}");
tryItOut("/*for..in*/L:for(const [__parent__, __parent__] = __iterator__.__noSuchMethod__ setter= (1 for (x in [])) in window) <x><y/></x>;");
tryItOut("prototype");
tryItOut("/*infloop*/for(; new (let (prop = prototype.propertyIsEnumerable(\"__iterator__\") ? __proto__(prototype, undefined) : [11,12,13,14].sort) (/a/gi) .@x:: [15,16,17,18].filter(function (__noSuchMethod__, __noSuchMethod__)@foo, __proto__))(); ) {Function;{}; }");
tryItOut("switch(this.__defineSetter__(\"__proto__\", ({ set constructor() { gc() } , __parent__: <y><z/></y> }))) { case (new this >>> this()): /*for..in*/M:for(let __count__ = <x><y/></x> in @foo) ((-0));break; case 4: return <x><y/></x>;case [15,16,17,18].sort(new Function, null): case 0: /*for..in*/for([__count__, prop] = 4. in this) continue ;L:switch(__proto__) { default:  }break;  }");
tryItOut("export *;\nreturn;\n");
tryItOut("M:while((<><x><y/></x></>) && 0)return;");
tryItOut("/*infloop*/do L:do {__count__ = *;let prototype, prop = <x/>; } while((<x/>) && 0); while(__count__);");
tryItOut("{ }");
tryItOut("/*infloop*/for(var prop; (prototype.(++ /x/g )); constructor.__lookupGetter__(\"__proto__\")) ");
tryItOut("(*);/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in [[]]) {gc() }\n");
tryItOut("export *;\nreturn;\n");
tryItOut("/*for..in*/for(var __count__ in (((new Function(\"let __noSuchMethod__ = <><x><y/></x></>;\")))(Function.@*)))prop = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>) throw *::*;");
tryItOut("switch((-1.hasOwnProperty(\"prototype\").isPrototypeOf(this.zzz.zzz))) { case 2: break; case 7: {return <><x><y/></x></>;yield; }break; case 2: if(__noSuchMethod__) [1,2,3,4].slice else {gc() }break;  }");
tryItOut("with(prop = <x/>){ }");
tryItOut("if((prototype).call((function ([y]) { })().yoyo(<><x><y/></x></>), ([*::*].map(__noSuchMethod__)), <><x><y/></x></>)) {constructor = false, prop; } else  if (3.141592653589793.__defineSetter__(\"constructor\", ({}).hasOwnProperty)) {const __noSuchMethod__ = <x><y/></x>; }\t");
tryItOut("with({prop: window})gc()");
tryItOut("/*infloop*/L:while((<x><y/></x>.__lookupGetter__(\"__count__\") != ({prototype: __count__, __count__ getter: <y><z/></y> }))){/*infloop*/for(const function::prototype = [,,z1]; <><x><y/\f></x></>; *) var __proto__ = <x><y/></x>;export *; }");
tryItOut("with({prop: [1,,]}){({}).__lookupGetter__ }");
tryItOut("L: {(function ([y]) { })(); }");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = <x/> in null) {(1e+81);return; }");
tryItOut("if(.2) { if (__iterator__ = <><x><y/></x></>) {export __noSuchMethod__;let __parent__, prototype; } else {return;__parent__, prototype }}");
tryItOut("let prop;var __proto__;");
tryItOut("L:while((let (prototype = this) 3.141592653589793) && 0)if(throw this) {yield this; } else  if (eval(\"<y><z/></y>;\", false)) {var prop;let __iterator__ = <x><y/></x>, __count__; }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*/for(let __iterator__ in 1e81) yield false\nexport __noSuchMethod__;\t");
tryItOut("/*for..in*/for(const prototype in ((function (prop, prototype)window)(__count__ =  \"\" ))){export prototype;return; }");
tryItOut("/*infloop*/while((yield <x><y/></x>.__defineGetter__(\"__proto__\", 'haha'.split).propertyIsEnumerable(\"__proto__\")))/*infloop*/do export *; while(<x><y/></x>)");
tryItOut("M:switch(((*).call(prototype, [z1], __proto__))) { default: /*for..in*/for(let [constructor, __noSuchMethod__] =  in -3/0) {const __iterator__; }case 9: var prototype, prop;\nvar function::__noSuchMethod__, __iterator__ = {};\nbreak; case 2: break ;break;  }");
tryItOut("/*for..in*/for(__proto__ = eval(\"with(<>/*\\n*/<x><y/></x></>){yield __iterator__;; }\", [function(id) { return id }]) in (-0)(1e+81)) {(({}).hasOwnProperty).apply }");
tryItOut("/*for..in*/for(var null.valueOf(\"number\") in (('haha'.split)(__count__.__parent__ setter= ({__noSuchMethod__: (-1) }))))L:switch([]) { default:  }");
tryItOut("let(prop) ((function(){gc()})());");
tryItOut("L:if((function(id) { return id } ^= function::__iterator__)) {continue M;let prototype = *; }");
tryItOut("if(({({ __proto__: __noSuchMethod__, __noSuchMethod__: __parent__ }): (<x><y/></x>)(),  set constructor(__iterator__, constructor) /x/g  :: ({}) })) var constructor; else  if (('fafafa'.replace(/a/g, (<x><y/></x>).call))) {export prototype;gc() }");
tryItOut("with(false){return 1e4; }");
tryItOut("{L:switch(*::*) { default: yield;break; case 9: (*);break;  }/*for..in*/for(let __parent__ in 0/0) {} }");
tryItOut("/*infloop*/for(__iterator__; (((*.propertyIsEnumerable(\"prototype\")))[(new Number())] if ((<x><y/></x>)(prop,  /x/ ))); __count__.__parent__ = <x/>) for(let y in []);");
tryItOut("L: {(prototype); }");
tryItOut("prop = __parent__;");
tryItOut("{gc()yield; }");
tryItOut("/*infloop*/M:for([15,16,17,18].map(((Math.pow).call).apply, false); __noSuchMethod__; ({__parent__ getter: [1,2,3,4].map,  set __count__(__iterator__) { return [[]] }  })) {gc() const prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(const prototype in false) {M:if((prop.prototype setter= [1,2,3,4].map)) {const __count__ = __iterator__; } else  if (([__noSuchMethod__])) function(y) { yield y; ;; yield y; } }");
tryItOut("/*for..in*/M:for(let setter in  \"\" ) let constructor, __parent__ = <><x><y/></x></>;");
tryItOut("if(([].valueOf(\t\"number\"))) {export __count__; } else  if (((yield *::*))) {yield;function(q) { return q; } }");
tryItOut("switch(([(1e+81 for (__count__ in this))].some((<x><y/></x>.prop)))) { case 9: break; yield;default: if(window) { if (<x><y/></x>) gc() else function  __parent__ (__proto__) { {} } }break;  }");
tryItOut(";");
tryItOut("yield; const __count__;");
tryItOut("with({}) with({}) { with({}) { prototypecontinue ; }  } ");
tryItOut("if(<x><y/></x>) { if (undefined) {gc() } else {break M; }}\n;\n");
tryItOut("export __parent__");
tryItOut("return @foo; const prop;");
tryItOut("\ngc()\n");
tryItOut("{if(eval(\"function (constructor, prototype) { throw <>return  '' ;</\\t>; } \", <x><y/></x>)) return;const __count__, __count__; else  if (()) {export prop;yield; } else return window;return return <x><y/></x>; }");
tryItOut("let (prop, __iterator__ = <x><y/></x>) { return; }");
tryItOut("/*for..in*/L:for(let [constructor, prop] = __iterator__ = true in  /x/ ) {}");
tryItOut("{export prop; }");
tryItOut("yield;let prototype, prototype;");
tryItOut("with(<><x><y/></x></>){const prototype = <x><y/></x>; }export __parent__;");
tryItOut("/*infloop*/for(__parent__; new 'haha'.split(<x><y/></x>.throw( /x/g )); Math.pow .@x:: (this.zzz.zzz.unwatch(\"prop\"))) yield false;");
tryItOut("L: throw prop;");
tryItOut("while(((this.unwatch(\"__iterator__\"))) && 0)yield\n\nexport __noSuchMethod__;");
tryItOut("L: {return;M:if(((<x/>).watch).call(false, null)) { if (this.zzz.zzz) {continue ;return; } else {[1] /x/ ; }} }");
tryItOut("switch((prop%=3/0)) { case new (0.1)(*): if([,,z1]) { if (<><x><y/></x></>) <><x><y/></x></>; else return 1.2e3;}break; default:  }");
tryItOut("if((-1) .@x:: <><xxx>{prop}</xxx></> / yield __parent__ = @foo.__defineGetter__(\"__proto__\", Math.sin).isPrototypeOf((undefined.throw( /x/ ))\n)) { if (prop.prototype = [,,z1] + *::*) try { const ({}).hasOwnProperty, __iterator__ = 033; } catch(__count__ if (function(){throw <x/>;})()) { return null; } catch(constructor if (function(){[1,2,3,4].map})()) { ; } catch(prop if this) { gc() } catch(__parent__) { var __noSuchMethod__; } } else with({prototype: __count__ = __count__})(@foo);");
tryItOut("{true;export *; }");
tryItOut(";\nreturn;with(<y><z/></y>)\n");
tryItOut("do let constructor; while((0/0) && 0);");
tryItOut("__parent__ = function::__noSuchMethod__;");
tryItOut("let(prototype = <><x><y/></x></>, prop) { let __count__ = *, prop = this;");
tryItOut("/*infloop*/while(delete (\n++<y><z/></y>))/*infloop*/for(var __count__; __proto__: <x><y/></x>; (*::*--)) export __iterator__;gc()");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*for..in*/M:for(const prop = <x/> in ({function::prop:  /x/g  })) {if( \"\" ) prop = <x><y/></x>, __proto__; else  if (undefined) {var __parent__ = <><x><y/></x></>;\f }M:do if(window) {continue ; } while((delete ---*) && 0); }");
tryItOut("if([function::constructor = undefined]) {continue M;gc() } else {return true; }");
tryItOut("with(__proto__)let x::prop = null, prototype;");
tryItOut("/*infloop*/for(*; [,,z1]; __parent__) return true;");
tryItOut("return;");
tryItOut("if(x::prop.__proto__ =  /x/ ) {break L;{} } else  if (true.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)) {; }");
tryItOut("if(<><ccc\r:ddd><!--yy--></ccc:ddd></>) { if (let (prop, __iterator__) yield <x/>) function (__parent__) { return <x><y/></x> } \n} else <x/>");
tryItOut("prop, constructor; for each (__noSuchMethod__ in 3.141592653589793) for each (__iterator__ in .2)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in ({}.valueOf(\"number\").hasOwnProperty(\"yield\")).__lookupGetter__(\"__count__\")) {/*for..in*/L:for(let __noSuchMethod__ in undefined) {;const prop; } }");
tryItOut("/*for..in*/for(const __count__ in (((new Function(\"/*for..in*/for(const __proto__.__parent__ in *::*) throw .2;\")))(__count__.prototype setter= ({prototype: <x><y/></x>.hasOwnProperty(\"let\")}))))/*for..in*/for(var __proto__ = (4.__noSuchMethod__ setter: __noSuchMethod__) in <x/>) {var prop, __proto__;((function ([y]) { })()); }");
tryItOut("let (__count__, constructor) { /*for..in*/for(__count__ in <y><z/></y>) {gc()yield <y><z/></y>; } }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */L: for  each(var <x/>.__parent__ in  /x/  !=  '' ) { } }");
tryItOut("{/*infloop*/: }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__ in new (__iterator__ = <x><y/></x>)(constructor = <y><z/></y>)) {if(((<y><z/></y>.propertyIsEnumerable(\"prop\")) .@x::  /* Comment */this)) {const prop;switch(constructor) { default: break; __count__yield; } } }");
tryItOut("{}\n");
tryItOut("while((window[<><x><y/></x></>].__defineSetter__(\"prop\", Function)\n) && 0){return; }");
tryItOut("let __count__ = ((new Function(\"__iterator__ = <x><y/></x>\"))).call(3, *), __iterator__;\n\n");
tryItOut("\nexport *;");
tryItOut("if((this.__defineSetter__(\"__parent__\", 'haha'.split)).prototype = this.yoyo((({__noSuchMethod__: true })).eval(__iterator__ = false))) {yield; }");
tryItOut("if('fafafa'.replace(/a/g, ([, , __parent__, prop] = __iterator__.__iterator__ = ({a2:z2})).__defineSetter__)) {if(5.0000000000000000000000.throw(null).yoyo((__parent__.unwatch(\"__parent__\")))) { if (<xxx {__noSuchMethod__}={Iterator(<><x><y/></x></>)} />) {L:if(null) export prop; else  if (get) var __parent__ = *; else throw this;undefined; }} else {\t } } else  if (__parent__ = (<><x><y/></x></>)(false)) M:if(undefined) {throw <x><y/></x>; } else /*for..in*/for([__parent__, prop] = prop in <><x><y/></x></>) continue ; else if(<><x><y/><///h\nx></>.propertyIsEnumerable(\"prototype\")) { if (<x/>) return 1.2e3;} else break ;\t");
tryItOut("{((1 for (x in []))).callgc() }");
tryItOut("/*infloop*/for(let __iterator__ = prototype; new ((Function).call)(~{{} }, (Function).call(<y><z/></y>, [,,z1],  \"\" ).__parent__.valueOf(\"number\")); <bbb xmlns:ccc=\"eval(\"{}\", #1=[#1#])\"><ccc:eee></ccc:eee></bbb>) L: {{} const __noSuchMethod__; }");
tryItOut("while(((Math.pow)(window) -= <y><z/></y>++) && 0){if((#3={a:#3#}.@foo) .@ __iterator__.__parent__ += (return *::*)) {export *; } else {return; }L:if(__parent__) {yield; } else (1 for (x in []))(<><x\f><y/></x></>).__defineSetter__; }");
tryItOut("with(( '' .watch(\"__proto__\", (({}).hasOwnProperty).call).@*))break ;");
tryItOut("with({}) { with({}) yield <><x><y/></x></>; } ");
tryItOut("if() { if ('fafafa'.replace(/a/g, (\tnew Function).call)) {/*infloop*/while(null){; }try { let(constructor = false) ((function(){;})()); } finally { return; }  }} else do {__noSuchMethod__; } while((__count__ = <><x><y/></x></>) && 0);");
tryItOut("throw __iterator__;");
tryItOut("M:if(__iterator__ = __iterator__ .@ this.__defineGetter__(\"__parent__\", function  let (constructor, __count__)*)) function () { yield <y><z/></y> }  else  if ( \"\" ) return; else let prototype = constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("if([this for each (prototype in {})]) {continue M; } else yield;");
tryItOut("if(this for (__iterator__ in <><x><y/></x></>)) {const prototype = [,]; } else  if (1.2e3.@*) {gc() } else {export __parent__;yield; }");
tryItOut("M:if([, , , prototype] = yield (new (\f<><x><y/></x></>\n)(undefined, 1e81))) { if ([11,12,13,14].map) {(<y><z/></y>);L: ; const __noSuchMethod__; }} else {const __noSuchMethod__ = window\n/*for..in*/for([prop, constructor] = 0/0 in <y><z/></y>) function (prop) { yield *::*; }  }");
tryItOut("switch(this.zzz.zzz) { default: break; case 6: /*for..in*/M:for(let prototype in *.unwatch(\"prototype\").__lookupSetter__(\"prototype\")) {if(<x/> >>= undefined) {export *;; } else  if ((<><x><y/></x></> < [1])) {__proto__ = @foo; } else yield  \"\" ; }break; case \nnew Iterator(__parent__, window).*: export *;__noSuchMethod__ = prototype, __parent__ = undefined; }");
tryItOut("let(constructor, prop =  \"\" ) { with({}) export *;");
tryItOut("const __noSuchMethod__;");
tryItOut("if(__parent__.(undefined)(.2) = window ^= 0.1.__lookupGetter__(\"__iterator__\")) { if (([z1,,].(function::__iterator__ = __noSuchMethod__))) {/*infloop*/return; } else {/*for..in*/for(let prop = <x/> in this) {yield;return; } }}");
tryItOut("if((function(q) { return q; })) { if ([11,12,13,14].map) {(__iterator__ === <x><y/></x\t>); }} else return;");
tryItOut("for(let y in []);");
tryItOut("switch((yield <x/>)) { case 3: ( /x/ );break;  }{/*infloop*/L:for(var [, ] = ((({}).hasOwnProperty).apply)(__iterator__); *[*]; __parent__) {continue ; } }");
tryItOut("/*for..in*/for(var [constructor, constructor] = eval(\"throw *::*;\", 5.0000000000000000000000) in <x><y/></x>) {const __proto__ = <y><z/></y>; }");
tryItOut("/*for..in*/L:for(let  '' ['__iterator__'] =  set -3/0 __count__ () { return window(false, true) }  , null in  '' ) export *;");
tryItOut("/*infloop*/for(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; false; (uneval((-__count__ for (__count__ in window) for (prop in *::*))))) if((function ([y]) { })()) {continue ; } else  if (function ([y]) { }) \treturn *;");
tryItOut("if(let (setter = *) __noSuchMethod__)  else /*for..in*/for(var __parent__ in ((((new Function(\"{}\"))).apply)(true))){throw constructor; }");
tryItOut("let (function::prototype, __proto__) { let __proto__ = this, __proto__; }\nlet constructor, prop = prop;");
tryItOut("for(let y in [5,6,7,8]) gc()L:if(prototype.(<x><y/>\t</x>)) throw __noSuchMethod__;");
tryItOut("let(__count__) { let(__noSuchMethod__) ((function(){throw __parent__ = (Math.sin).call((function ([y]) { })(), (-1));})());");
tryItOut("/*for..in*/M:for(const __count__.constructor in ((uneval(<y><z/></y>)))) {yield; }");
tryItOut("throw window;");
tryItOut("{continue \t; }");
tryItOut("if(( \"\"  for (__parent__.__noSuchMethod__ in ) for (#3={a:#3#} in yield *.__defineSetter__(\"__parent__\", (new Function(\"return 4.;\")))))) { if (<y><z/></y>.valueOf(\"number\")) {(prototype.prototype = ({a1:1}));throw window; } else const __iterator__;}");
tryItOut("if(__proto__) { if (<><x><y/></x></>) let __iterator__, constructor =  \"\" ;} else {return; }");
tryItOut("let(constructor) { yield false;");
tryItOut("L: {export __iterator__;yield this; }");
tryItOut("with({}) yield\n");
tryItOut("/*infloop*/M:while(++__parent__ = undefined @ <x><y/></x>.watch(\"__proto__\", false))if(constructor) {}");
tryItOut("M:with(<x/>)<x><y/></x>;");
tryItOut("do prop while(( \"\" .__parent__ = <y><z/></y>) && 0);");
tryItOut("switch(__noSuchMethod__ = (('haha'.split).call(<x><y/></x>, constructor))) { default: while((window) && 0){gc()export *; }break;  }");
tryItOut("while((this) && 0){throw <x/>;; }");
tryItOut("{var prototype =  /x/ , prop = __parent__;yield ! '' ; }");
tryItOut("/*for..in*/for(const window.__lookupGetter__(\"constructor\") in ((().__defineSetter__)( '' )))let (__count__ = <x><y/></x>) { .2; }/*for..in*/for(let __proto__ in <y><z/></y>) {yield  \"\" ;yield *; }");
tryItOut("throw StopIteration;");
tryItOut("L: if((__parent__|= \"\" )) if(this) { if (__noSuchMethod__) {export *; }} else const __iterator__; else  if ((__proto__.__iterator__ = true.unwatch(\"__count__\"))) let __proto__, __parent__;");
tryItOut("/*for..in*/for(__proto__ in <x/>) {return;export __parent__; }");
tryItOut("if([,]) {*::*;throw prototype; } else  if ([(__noSuchMethod__ = __proto__) for (export __count__; in false) if (//h\n__proto__)]) return; else {return *::*;case <y><z/></y>: __count__ = <x/>;default: break; case *::*: let prototype; }");
tryItOut("{{} }");
tryItOut("(<x><y/></x>);throw  /x/g ;");
tryItOut("export *;");
tryItOut("L:with(0)\n");
tryItOut("{var __iterator__ = <x><y/></x>, <x><y/><\f/x> = undefined; }if(({ get __noSuchMethod__ __count__ (__iterator__, prop) { export __iterator__; } , __noSuchMethod__ getter: (1 for (x in [])) })) __iterator__.__count__ else {/*for..in*/L:for(function(id) { return id }.__iterator__ in *) ;yield undefined; }");
tryItOut("/*for..in*/for(const [constructor, __parent__] = __noSuchMethod__ in window) {gc()break ; }");
tryItOut("yield <ccc\t:ddd></ccc:ddd>[__noSuchMethod__];");
tryItOut("[[1]]");
tryItOut("/*infloop*/M:do { const prototype } while((<x/>)[@foo]);");
tryItOut("/*infloop*/for(__iterator__.constructor = [15,16,17,18].some(/a/gi, this.__defineGetter__(\"__noSuchMethod__\", function  __count__ (__noSuchMethod__, __parent__) { return <y><z/></y> } )); new (<y><z/></y>)(@foo).valueOf(\"number\"); prototype = ((())())) return;");
tryItOut("/*infloop*/for( /x/ ; __proto__ = ; yield ((*::*(#1=[#1#])) < __parent__.__parent__)) (constructor);\n[,,];\n");
tryItOut("return;");
tryItOut("{/*infloop*/do __count__; while(prototype = 'fafafa'.replace(/a/g, ({}).__lookupGetter__));/*infloop*/for(<><x><y/></x></>; <x/>; window) yield; }");
tryItOut("if(__iterator__.__count__ = (({function::__iterator__: <><x><y/></x></> }) ? (__proto__ = null) :  /* Comment */null) * <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((new Number(__iterator__)))) {if([({ __noSuchMethod__: __parent__, prototype: prop }), , ({ prop: __iterator__, prop: constructor })] = (yield this).__count__) export constructor; else  if (prototype.prototype = <x/>) export __proto__;{{} }{} } else  if (new \f([[], __noSuchMethod__, [prop, __count__]] = export __count__)()) {throw <y><z/></y>\n } else {throw *::*;\n{}\ndo {const constructor =  \"\" ; } while((<><x><y/></x></>) && 0); }");
tryItOut("if((({__noSuchMethod__:  /x/g })) -= prototype) continue ; else undefined;");
tryItOut("L: {continue ;yield; }");
tryItOut("/*infloop*/for((__parent__\t = <><x><y/></x></>.__iterator__ getter= [1,2,3,4].map); __noSuchMethod__ = (p={}, (p.z = <><x><y/></x></>)()).yoyo(__parent__ = __proto__\f = __count__); ((@foo).watch(<><x><y/></x></>, #1=[#1#]))) {;{} }");
tryItOut("let(prop = 1e4) ((function(){export *;})());");
