tryItOut("switch(*::* >>>=*::*) { case 6: /*for..in*/for(let [__iterator__, __proto__] = \n(uneval(true)) in (#1=[*::*])) throw StopIteration;default: /*infloop*/for(const __count__; (yield true); (__iterator__ = __iterator__)) L: Math.powbreak; return (@foo || 4.); const __noSuchMethod__;break; case \n(~<x><y/></x>\n)(this.__defineSetter__(\"prototype\", function(q) { return q; })): /*infloop*/M:while(<x/>)prototype = window, prop; }");
tryItOut("L: if(window) if((<x><y/></x>.throw(1e4))) { if ((false.__defineGetter__(\"prop\", ([z1,,]).watch))) return @foo; else {export *;gc() }} else throw <x/>;");
tryItOut("/*for..in*/for(<x><y/></x>['prototype'] in null) {return [,,z1];throw <x><y/></x>; }");
tryItOut("/*for..in*/L:for(prototype in ([1].isPrototypeOf(undefined).__iterator__)) yield;");
tryItOut("return\n({}).hasOwnProperty");
tryItOut("switch(__parent__) { default: L: {(true);function::__noSuchMethod__; }break; case 7: M:if(<x/>) __parent__ = <><x><y/></x></>, __parent__; else  if (prop) const __proto__ = [,], function::__iterator__ = <x><y/></x>; else {gc() }break; case 5: /*infloop*/L:for(let __parent__ = <> </>; <x/>; (yield null + \tthis)) {export prop; }break; case (<x>\f<y/></x>\n) % (window ^ false) instanceof (p={}, (p.z = false)()): return (window.isPrototypeOf([,]));break;  }");
tryItOut("/*for..in*/for(const <x><y/></x> in (((new Function(\"throw undefined;\")))(this))){1e4; }");
tryItOut("try { __iterator__ = constructor; } finally { throw __iterator__; } ");
tryItOut("return <x/>; const constructor\n<y><z/></y>\nL: \n/{[,]; }");
tryItOut("/*for..in*/for(constructor = __proto__(<x><y/></x>) in <><zzz>(this.__defineSetter__(\"__parent__\", (<><x><y/></x></>).watch))</zzz></>) {{evalwhile((@foo) && 0){var constructor, __proto__ = false;prototype; } } }");
tryItOut("if((true @ prop).__lookupSetter__(\"__proto__\")) return  /x/g ; else return <x/>;");
tryItOut("{with((<x><y/></x> if (<x><y/></x>))){export __proto__; }yield false; }");
tryItOut("if(({__count__ setter: ( /x/g ).apply })) { if (this.__defineGetter__(\"prototype\", this) for each (__iterator__ in undefined) for (prototype in true)) gc() else {return *;this; }}");
tryItOut("do var constructor = *; while((( /x/g )(#1#, <x><y/></x>)) && 0)\n");
tryItOut("for(let y in [5,6,7,8]) prototype = __count__;");
tryItOut("M:while((({prop: constructor})) && 0)export prototype");
tryItOut("/*for..in*/for(var [__proto__, __parent__] = * in [z1]) return;");
tryItOut("({}).hasOwnProperty");
tryItOut("/*infloop*/for(const __noSuchMethod__; Error()-3/0 instanceof eval(\"/*for..in*/for([prototype, __proto__] = window in <x/>) {export *; }\", #1=[#1#]) : ; (typeof window)) /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <y><z/></y>) __noSuchMethod__");
tryItOut("with(eval(\"__iterator__ = @foo.propertyIsEnumerable(\\\"__count__\\\")\", *::*))const prototype;");
tryItOut("let(__iterator__ = window, prototype = (([,,] :: <><x><y/></x></> for each (__parent__ in <><x><y/></x></> .@x:: <x><y/></x>) for each (__parent__ in *::*) for each (__parent__ in <><x><y/></x></>) if (window)))) ((function(){__count__ = __proto__;})());");
tryItOut("if(3/0) function(q) { return q; } else {__parent__(<x><y/></x>); }");
tryItOut("if(prop) <><x><y/></x></>;");
tryItOut("if( \"\" ) {if([,]) { if (<y><z/></y>) gc() else {yield; }}{return <y><z/></y>;export *; }; } else  if ( /* Comment */undefined) yield 3.141592653589793; else break ;");
tryItOut("L:with((<><x><y/></x></> ? false : <y><z/></y>)\f)var __count__ = <y><z/></y>, prop = 5.0000000000000000000000;");
tryItOut("if([[1]]) return; else  if (*::*) {__count__; }");
tryItOut("if(<\fbbb xmlns:ccc=\"0.1\"><ccc:eee></ccc:eee></bbb>) if((prototype)) yield; else  if (((yield (__noSuchMethod__.@*)))) {prop, ({ __count__: __iterator__ }) =  \"\" ; } else {(this.zzz.zzz); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <x><y/></x>) {export prototype;const prop =  \"\" ; }");
tryItOut("/*infloop*/for(const __iterator__; let (__iterator__ = false) <><x><y/></x></>; ((__iterator__).watch(null)) -= eval(\"<y><z/></y>\", <y><z/></y>)) {{}\nexport *; }");
tryItOut("L:if((eval(\"if(undefined) {return -3/0; } else  if (*::*.hasOwnProperty(\\\"__noSuchMethod__\\\")) export *;\", ({ prototype: constructor }) = prototype ? #1# : @foo))) {while((let (__count__, [z1] = [[1]]) ( '' .*)) && 0){const __parent__; } } else  if ((Math.pow)(([getter, , , , prop] = <x/>), @foo)) {/*for..in*/for(let [prototype, constructor] =  \"\" .yoyo(this) in  \"\" ) {export *;export *; }(#1=[#1#] <<= *); }");
tryItOut("with({}) for(let y in []);");
tryItOut("<x/>;");
tryItOut("yield (let (__iterator__) 1e81).__iterator__.propertyIsEnumerable(\"__iterator__\");");
tryItOut("switch(prototype) { case false: export *;var constructor = 4., __iterator__ = window;break; default: break; break;  }");
tryItOut("with({__proto__: - \"\" })([[1]]);");
tryItOut("if(this) {export function::__parent__;L:while(((prop.@foo)) && 0){let __proto__; } }");
tryItOut("if(__parent__) { { export __count__; } export __parent__; } else  if (<><x><y/></x></> ||  \"\" ) /*for..in*/for(const constructor in [1,,]) {prop = [,,z1]; } else /*for..in*/for(const __iterator__ in (((new Function(\"return;\")))(\n3.141592653589793)))return;");
tryItOut("if((((__count__ = this) ? this.__lookupGetter__(\"__iterator__\") : prototype.__count__ = arguments).unwatch(\"prop\")) , {} .@ <xxx {prototype}={constructor.__noSuchMethod__ = yield this.__defineGetter__(\"({ __noSuchMethod__: __parent__, constructor: prototype })\", (new Function(\"var constructor = __parent__, __noSuchMethod__;\")))} />) yield; else  if ((uneval(yield <x><y/></x>))) {yield; } else /*for..in*/M:for(var [__noSuchMethod__, constructor] = __iterator__ in this) {return; }");
tryItOut(" { yield 3/0 } /*infloop*/for(prop; false;  '' ) {export *; }");
tryItOut("{}\nM:with(false){return @foo; }\n");
tryItOut("return;");
tryItOut("{}");
tryItOut("M:if(__noSuchMethod__) ; else  if (<><x><y/>//h\n</x></>) {const __count__;var __proto__; } else {throw @foo; }");
tryItOut("if([[]] .. *\n) { if ((((function ([y]) { })().__iterator__ = #3={a:#3#}).watch).call) (<x><y/></x><x><\fy/></x><x><y/></x>).watch else let (__iterator__ = (<x/>.eval(@foo)), prop = <y><z/></y>) { if(true) {export *; } else  if (window) yield <x/>; }}");
tryItOut("(if()void Error(window, <><x><y/></x></>)/*) {gc() } else {window }\nthis.zzz.zzz;\n");
tryItOut("export *;");
tryItOut("{return <x><y/></x>;__parent__ }");
tryItOut("(window)\n");
tryItOut("M:if(([[11,12,13,14].some].filter((\nwindow).apply))) {return; }");
tryItOut("this.zzz.zzz;");
tryItOut("while((this) && 0)__iterator__, __parent__ = <x/>;");
tryItOut("/*for..in*/M:for(let function::constructor in ((*)(033))){}");
tryItOut("do  while((*::*.hasOwnProperty(\"__iterator__\")) && 0);");
tryItOut("if(<x><y/></x>) { if (@foo) (<y><z/></y>);} else {(1 for (x in []))throw <y><z/></y>; }");
tryItOut("/*infloop*/for(const constructor;  '' .eval(undefined); [11,12,13,14].map) {<><x><y/></x></> \"\" ; }");
tryItOut("export *; const __iterator__;");
tryItOut("this.zzz.zzz;");
tryItOut("let (constructor = #1#, __count__ =  /x/g ) { export __count__; }");
tryItOut("/*for..in*/for(var @foo.__noSuchMethod__ in ((new Function)(this .. 3/0)))if(new function  __parent__ (__proto__)[,,z1]( /x/ ,  /x/ )) {gc() } else {(033); }");
tryItOut("yield;\ncontinue L;\n");
tryItOut("for(let y in []);");
tryItOut("(-1)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prop in (this.__defineGetter__(\"__parent__\", [15,16,17,18].sort(((function(y) { yield y; throw null;; yield y; }).apply).apply, <><x><y/></x></>)))) /*infloop*/for(var __count__; (uneval(<y><z/></y>[@foo])); this.zzz.zzz(([11,12,13,14].sort).__iterator__ =  /x/ )) /*infloop*/for(new (function () { return  ''  } )(this, *); ( /* Comment */__proto__ .@x:: __noSuchMethod__ = <x/>); *.yoyo([[]])) break ;");
tryItOut("/*for..in*/L:for(var (prop) in ((function   (__noSuchMethod__, constructor) { return (~eval(\"Function\", 'fafafa'.replace(/a(__parent__)g, <x><y/></x>))) } )((-1).unwatch(\"constructor\"))))break ;");
tryItOut("/*infloop*/M:for(let __proto__;  /x/g ; 0/0) { }");
tryItOut("return;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = ((@foo << __count__.isPrototypeOf(constructor))[({ get __proto__ __iterator__ (__parent__) { return (p={}, (p.z =  \"\" )()) }  })]); new ()([z1,,], RegExp()); (\fwindow && <x/>) /= *::*) {return;/*for..in*/for(var __count__ in this) {break ; } }");
tryItOut("/*for..in*/for(var __parent__.__count__ in ((function  prototype (constructor, ({a1:1})) { return *::* } )((function () { {} } ).call(<x/>, <><x><y/></x></>)))){(<><x><y/></x></>).watch }/*\n*/");
tryItOut("/*for..in*/for(const (this.unwatch(\"prop\"))(([z1] .@x:: 1e-81)) in (([1,2,3,4].slice)(yield [(this === *) for (__count__ in (undefined ? <><x><y/></x></> : <x/>)) if (true)]))){if((__parent__ = __count__)) continue M; else  if ( /x/g  .@*::  \"\" ) return true; else let x::__iterator__, constructor; }");
tryItOut("/*infloop*/L:for(var ({ __count__: ({ __parent__: ({ __iterator__: [], __iterator__: [[], , ({ __parent__: prototype }), ] }), __count__: [] }) }) = new ('haha'.split)(this, [[1]]) ? (case (window.eval(<x><y/></x>)):  = this.__defineGetter__(\"constructor\", function(y) { yield y; <><x><y/></x></>;; yield y; })) : new Error( \"\"  %= *::*, 1.3); (new (function(y) { yield y; gc(); yield y; })().yoyo((uneval(<y><z/></y>)))); #2=prop = [1]) export __iterator__;");
tryItOut("with((1 for (x in [])))const prototype = prototype, __count__ = <><x><y/></x></>;");
tryItOut("M:if(prototype) X else  if (false) var __proto__, __noSuchMethod__ =  /x/g ; else {return;\f{} }");
tryItOut("with({prototype: (__parent__ = -1 ? ({ constructor: prototype, prop: __proto__ }) = ({ __iterator__: __parent__, __parent__: __count__ }) : new [1,,](1e81, *::*) .@*:: constructor = <y><z/></y>)})\nthrow [z1];yield @foo;");
tryItOut("/*for..in*/for(prop = @foo in (<><x><y/></x></>)) {export prop;case 4: break; default: continue L;break; break; {}case 8: ; }");
tryItOut("with({__iterator__: ([, , [, __count__], ({ prototype: ({ __parent__: prototype }) })] = false)})/*for..in*/L:for(const (set)(3/0) in ((<x><y/></x>)(__iterator__)))throw <y><z/></y>;");
tryItOut("L: ;");
tryItOut("{\n\nthrow <><x><y/></x></>;/*infloop*/for(({ constructor: ({ constructor: __parent__ }) }); ([1,,].@*); prototype) __proto__ }");
tryItOut("while((<y><z/></y>.watch(\"__proto__\", gc)) && 0){Math.sin }");
tryItOut("M:if((constructor.__noSuchMethod__ = __parent__ = prototype.prototype)) {*::*; } else  if (function::__parent__.(__parent__ = <x><y/></x>)) /*for..in*/M:for(const __proto__ = [<><x><y/></x></> for each (__noSuchMethod__ in [z1,,])] in prototype) {({ __proto__: __count__, __parent__: constructor }) = this.zzz.zzz } else /*for..in*/for(let prop in (((1 for (x in [])))(('haha'.split)))){var prototype = @foo; }");
tryItOut("return *::*;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((eval)(-3/0))){M:if(<><x><y/></x></>) { if ( /x/g ) } else {yield ; }(arguments); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <><x><y/></x></>) return\nL: {(Function).applynull; }");
tryItOut("undefined = <><x><y/></x></>;export *;");
tryItOut("let(prop) ((function(){return (<y><z/></y>\n);})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in new Array(#2=({__proto__: <x/>//h\n}))) {with({}) { yield <><x><y/></x></>; }  }\n/*for..in*/for(const __iterator__ in <><x><y/><\t/x></>) yield;");
tryItOut("if( .@*:: __proto__.prototype = ((null).call) :: this.zzz.zzz) {/*infloop*/do {(<x><y/></x>); } while('fafafa'.replace(/a/g, constructor));/*infloop*/for(( '' (<><x><y/></x></>.isPrototypeOf(true), <y><z/></y>)); 3.141592653589793 = <><x><y/></x></> ? __parent__ : @foo; this.propertyIsEnumerable(\"__noSuchMethod__\")) continue L; } else  if (1.3 = #1#) ({a1:1})--; else switch(Date()[__count__.__count__ = <><x><y/></x></>.__proto__]) { case 7: break; default: if(#3={a:#3#}) {export *;return; } else  if (<y><z/></y>) {continue L; }case ({ constructor: __iterator__, __proto__: constructor })\t = ({prototype: __parent__ = @foo,  get constructor()this }): throw null;break;  }");
tryItOut("prop = __proto__;");
tryItOut("/*infloop*/M:for(let __count__;  /x/  = (({ set __proto__\t() { return <x><y/></x> } ,  set prop __count__ (__iterator__, __count__) { continue ; }  })); new (typeof <><bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb></>)(*)) {L:if(prototype) { if (prop = <x><y/></x>) continue ; else {export *\n }} }");
tryItOut("M:if(@foo) {let __proto__ = <x/>;gc() } else  if (window) {yield;return <><x><y/></x></>; }");
tryItOut("with((__proto__\t = @foo for (__count__.__count__ in [1,,])))yield  /x/ ;");
tryItOut("M:if((({__proto__ setter: Math.pow, __iterator__: false }))) {(__iterator__);return undefined; } else  if (--set = prototype.propertyIsEnumerable(\"prop\")) <><x><y/></x></>;");
tryItOut("while((({ prop: prop, __count__: __parent__ }) = (*::*.valueOf(\"number\"))) && 0){{} }");
tryItOut("/*infloop*/for(null; (-0); (uneval(this.zzz.zzz))) {;; }\nif((this <<= \f++[1])) {function (__iterator__) { return  ''  } break ; } else  if (new (#2=[null])()) \f__parent__;");
tryItOut("with({__count__: <x><y/></x>}){function(y) { yield y; function::constructor =  /x/ ;; yield y; } }");
tryItOut("do export *\nlet __parent__ =  /x/ ; while((__iterator__ = undefined !== [11,12,13,14].sort) && 0);");
tryItOut("do M:with({prop: this})throw constructor; while((constructor = [z1,,] *= (this.__defineSetter__(\"function::prototype\", function (__parent__, constructor)prop) * ([<><x><y/></x></> for (constructor in <x><y/></x>)])).hasOwnProperty(\n\"prop\")) && 0);");
tryItOut("with(let (__proto__, prop = null) __iterator__.constructor.hasOwnProperty(\"__parent__\")){continue L; }");
tryItOut("if((true)) {/*for..in*/M:for(const [prototype, set] = <><x><y/></x></> in <><x><y/></x></>) {gc()__iterator__ = __proto__ } } else const __noSuchMethod__, prop;");
tryItOut("with(prototype = *::*.propertyIsEnumerable(\"constructor\"))if((({}).__lookupGetter__)(null, @foo)) { if (undefined /= window) yield; else {;(new Function(\"0.1\")) }}");
tryItOut("{/*infloop*/for(*; 3; <><x><y/></x></>) {} }");
tryItOut("M:switch(@foo .@ <x/> / (@foo++)) { default: gc()case continue L;.(<x/>).hasOwnProperty(\"__iterator__\"): break; case 7:  }");
tryItOut("if((<x><y/></x>)(@foo)) export *; else ");
tryItOut("/*for..in*/for(<x/> = {/*infloop*/for(var __proto__ = *::*;  /x/g ; <x><y/></x>) yield; } in *::*) {with({}) for(let y in [5,6,7,8]) __count__ = prop; }");
tryItOut("/*for..in*/for(__iterator__ in window) {yield;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((((<x/>.prototype))(new Object())) in __proto__ = this) /*for..in*/for(let [constructor, __parent__] = <x/> in <x/>) {(<x><y/>/*\n*/</x>);throw 0/0;\t }");
tryItOut("if(([<x><y/></x>].some(function  constructor (constructor) { return 1e+81 } ))) { if ((prop = <><x><y/></x></>)) {yield __count__; }} else {gc()yield undefined; }");
tryItOut("if(4. ? window : 4.) {( \"\" ); } else  if (prop.(prototype)) {prototype, prop;{} }");
tryItOut("let (__iterator__ = 3, __parent__) { {} }");
tryItOut("/*infloop*/for(let ({ __count__: __iterator__, __noSuchMethod__: constructor }) = ((Math.pow).call(<y><z/></y>, )); __count__ , <x><y/></x>; ;.unwatch(\"__proto__\")) {gc(); }");
tryItOut("L:with(false){return ({a2:z2});return <x><y/></x>; }");
tryItOut("(__noSuchMethod__) = constructor;");
tryItOut("let(__iterator__ = ([*::* if (<x><y/></x>)])) ((function(){throw __noSuchMethod__;})());");
tryItOut("export __noSuchMethod__;;");
tryItOut("/*infloop*/for(var __iterator__; function  __iterator__ () { function (__iterator__, constructor) { <><x><y/></x></> }  } (prop = 0x99\t,  \"\" ); 1.3 ? eval(\"let __noSuchMethod__;\", this.isPrototypeOf(__count__)) : *::*) {/*infloop*/for(let __proto__; 0/0; <><x><y/></x></>) var __iterator__ = __noSuchMethod__;\fFunction }");
tryItOut("with({}) let(prototype = this & <><x><y/></x></>, __proto__ = 033) { this.zzz.zzz;");
tryItOut("if(__count__) return <><x><y/></x></>;");
tryItOut("prototype(<x><y/></x>) = 0x99;");
tryItOut("/*for..in*/for(var prop in ((Math.pow)((new Array(<x/>, true).*)))){throw [];__count__ }");
tryItOut("if(*::*) yield <x><y/></x>; else  if (this.zzz.zzz) {return function ([y]) { };export __noSuchMethod__; } else {{}__proto__; }");
tryItOut("/*for..in*/for(let __iterator__.constructor in this) ;\nL:switch(this) { case [,]: break;  }\n");
tryItOut("/*infloop*/M:for(const ({ constructor: (`)['__proto__'] }) = <><>__proto__.__iterator__ getter= ( /x/ ).__defineSetter__ == (new Function)()</></>; (eval(\"undefined\", constructor)); __noSuchMethod__ += {}) return  /x/ ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in  \"\" ) {return #1=[#1#];gc() }\nexport *;");
tryItOut("if(<y><z/></y>) {return; } else {return constructor; }");
tryItOut("/*infloop*/while(0/0)let __iterator__");
tryItOut("/*infloop*/for(({ prototype: ({ __proto__: ({ prototype: __proto__ }), __count__: ({ __parent__: constructor, __noSuchMethod__: __noSuchMethod__ }) }) }) = []; new Function(yield @foo, constructor); (constructor = *)) continue L;");
tryItOut("with({__count__: function(id) { return id }.throw(<><x><y/></x></>)})return <x/>;");
tryItOut("{continue ;gc() }");
tryItOut("(undefined).__defineSetter__ const __iterator__;");
tryItOut("if(window) { if () throw -1;} else {[1,2,3,4].slicereturn; }/*for..in*/for(const __noSuchMethod__ in ((function (__count__) {  } )(prototype %  /x/g ))){return; }");
tryItOut("L:if(__parent__ = (uneval(<x><y/></x>)).valueOf(\"number\")) { if (prop = *::*) export __noSuchMethod__;} else __proto__: ({constructor:  /x/  }) ? (__parent__) : <x><y/></x>.__defineGetter__(\"prototype\", Function)");
tryItOut("while(((arguments.constructor)--) && 0)let(__parent__) ((function(){let __proto__ = -0, prop = __noSuchMethod__;})());");
tryItOut("this.zzz.zzz;");
tryItOut("return <>yyy</>;");
tryItOut("/*infloop*/for(const __iterator__ = ; -(#1# for each (\u2029 in <y><z/></y>) for each (__count__ in [1])); this / *) {/*infloop*/do {throw 0.1;function () { return  ''  }  } while(<><x><y/></x></>); }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in ((gc)( \"\" )))export *;");
tryItOut("{}\n[1,2,3,4].map\n");
tryItOut("let (__proto__ = __iterator__) {  }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*infloop*/for(({ prototype: __noSuchMethod__, this.__proto__: ({ prototype: __parent__, prototype: __iterator__ }) }) = __proto__; <><x><y/></x></> % \f \"\" .yoyo((1.2e3 ?  /x/  : <><x><y/></x></>)); new  /x/ (this, <y><z/></y>)) /*infloop*/for(let ({ __count__: ({ __noSuchMethod__: ({ __iterator__: prototype }) }) }) = ((1 for (x in []))).call(__iterator__, )[([1,2,3,4].map).call(1.2e3, )]; constructor.prototype = <x/>(window); ({a1:1})) {M:with(window)return false; }");
tryItOut("/*infloop*/for(const constructor; <><x><y/></x></> <= <y><z/></y>; __proto__ = <><x><y/></x></>) let __count__ = <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in this &= false) throw constructor; const constructor;");
tryItOut("{ /x/ ; }");
tryItOut("if(__iterator__ = <x/>) yield <y><z/></y>; else let prototype = null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in ) {var __proto__;if(<x/>) { if (<><x><y/></x></>)  else {yield;throw window; }} }");
tryItOut("yield;");
tryItOut("if(*::* .@ ({constructor:  '' , __iterator__: <><x><y/></x></>.yoyo(undefined) })) prop");
tryItOut("if( ''  @ constructor = @foo) /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in __proto__) throw <><x><y/></x></>; else  if ( /x/g .eval(*)) {throw ((this).watch).apply; }");
tryItOut("gc()throw <x><y/></x>;");
tryItOut("L: let (__proto__) { if(5.0000000000000000000000) { if (__iterator__) yield;} else {; } }");
tryItOut("while((<y><z/></y>) && 0){/*\n*/export __parent__; }");
tryItOut("/*for..in*/for(var [constructor, __proto__] = __count__ = (let (prototype = false.@*) prop.(prototype = window)) in (new Object(([,] <<= <x><y/></x>)).throw((prop.unwatch(\"__iterator__\")).__defineGetter__(\"constructor\", function (constructor) { return @foo } )))) {/*for..in*/for(__iterator__ = prop in <x/>) {export __parent__; }__iterator__ = 3/0, function::__count__; }");
tryItOut("/*infloop*/for((false ? [11,12,13,14].sort : new *::*()); (); <x><y/></x>.__lookupSetter__(\"prop\")) {; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __count__ in ((/a/gi)(\fnew <y><z/></y>)))/*infloop*/for(constructor; *::*; <x><y/></x>) let __count__ = -1, __proto__ = __iterator__;");
tryItOut("let(__proto__ = function ([y]) { }, prop) { {}");
tryItOut("M:with({__noSuchMethod__: (  = (uneval(false)))}); const __noSuchMethod__;");
tryItOut("with(<y><z/></y>)throw  '' ;");
tryItOut("export __parent__;");
tryItOut("gc()");
tryItOut("/*infloop*/for(const __noSuchMethod__; @foo for each (__noSuchMethod__ in <x><y/></x>); {}) yield;");
tryItOut(";");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = <><x><y/></x></> in  /x/g ) throw window;");
tryItOut("with({prop: [0/0].sort(<><x><y/></x></>)})var prop, setter = <x><y/></x>;");
tryItOut("if(<><x><y/></x></>) {return 1e81;export __iterator__; } else  if ( '' ) export *; else {yield null; }");
tryItOut("if(__noSuchMethod__.(((uneval(*))))) /*for..in*/M:for(var prototype = new __proto__(*::*, <><x><y/></x></>//h\n) in [1]\t) {let __proto__, __iterator__ = @foo; }");
tryItOut("let (constructor = #1=({__count__: try { \treturn <><x><y/></x></>; } catch(function::constructor) { prototype = <><x><y/></x></>, __proto__; } })\f) { (prop); }");
tryItOut("do {export __parent__;gc() } while((1e+81\n) && 0);");
tryItOut("( '' )\n;");
tryItOut("switch(__iterator__ = <><x><y/></x></>.propertyIsEnumerable(\"__parent__\").__lookupGetter__(\"__iterator__\")) { case (<x><y/></x>.throw(true).yoyo(@foo.isPrototypeOf(@foo)) % ((function  constructor (__parent__, __proto__) { return <x><y/></x> } )().@foo)): break \nreturn this;/*for..in*/for(__noSuchMethod__ = ({__proto__: __noSuchMethod__.__noSuchMethod__ = false }) in yield <><x><y/></x></>) if(0x99) ; else  if (window) {return 3/0;; } else { }case 8: __iterator__, constructorbreak; return;return  {  } ;break; const constructor = *::*;break;  }");
tryItOut("return undefined;");
tryItOut("L:do {{} } while(((<x><y/></x> < false)) && 0);");
tryItOut("M:if((Array([1]))) throw [prototype];");
tryItOut("M:if(<x/>) [z1]; else  if (__proto__ = 1e-81) {throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var prototype = (__count__ = 'fafafa'.replace(/a/g, 'haha'.split)).yoyo(String((new Function(\"Math.sin\")), #1#)) in  /* Comment */<y><z/></y>) let (__parent__, __iterator__) { yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<><x><y/></x></>.__parent__.constructor in __parent__.__parent__ = this) {}");
tryItOut("/*for..in*/for([prop, __parent__] = (function  prototype () {  } () for each (prototype in <x><y/></x>)) in [1] - *) function  prop () { return function(id) { return id } } \n(*);\n");
tryItOut("/*infloop*/for(const __parent__ = (uneval(__proto__ = -1))[prop.constructor]; (this.__defineGetter__(\"__proto__\", (({}).hasOwnProperty).apply))((this).__defineSetter__(\"__iterator__\", function  prop (__count__, __proto__) { return 1.2e3 } ), (new Object())); ((p={}, (p.z = undefined)()) for (__proto__ in @foo) for (__proto__ in <y><z/></y>))) {return;return;if(false) {(new Function(\"var __noSuchMethod__;\")) } else yield; }");
tryItOut("{if(0) {var constructor = <x/>, __proto__ = window; } else  if (<x><y/></x>) yield 0.1; else {export __count__; } }");
tryItOut("{/*for..in*/for(const [__noSuchMethod__, __proto__] = (*)(*::*, 1e4) ? this.__defineSetter__(\"__proto__\", (function(y) { yield y; __parent__ = __parent__;; yield y; }).call) : __count__.( '' ) in *) {return;let __count__ = this, prop = *; }\fvar __count__ =  /x/ ; }");
tryItOut("/*infloop*/for(<x><y/></x>; <x><y/></x>; <x/>) {break L; }\nreturn;");
tryItOut("( \"\" );");
tryItOut("return;");
tryItOut("/*infloop*/do __count__; while(new (({}).hasOwnProperty)(*, <>try { {} } catch(prop if *::*) { let constructor, constructor =  \"\" ; } </>));");
tryItOut("__parent__ = __proto__;");
tryItOut("/*for..in*/for(prototype in ((({}).__lookupGetter__)(1.3))){yield 1e81;return constructor; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in [,,z1]--) var constructor;");
tryItOut("/*for..in*/for(const prop = <x/> in ({a1:1})) ");
tryItOut("yield [<y><z/></y> = (*::*)];");
tryItOut("/*infloop*/M:for((void function (__parent__, __parent__)<x><y/></x>); prop(this) = this; new (0x99)(__proto__)) let (__proto__, __proto__) { yield; }");
tryItOut("with({__iterator__: *})this;");
tryItOut("L:if(new (false)(({}))) const <y><z/></y> = this;");
tryItOut("if(1e81) {\tlet constructor = <x><y/></x>\nexport __parent__; } else  if (__noSuchMethod__.__iterator__ = <x><y/></x>) {/*for..in*/for(let [__count__, __count__] = <><x><y/></x></>.isPrototypeOf( /x/ ) in arguments) export *; } else yield (__count__ = @foo);");
tryItOut("/*infloop*/for(var [] = (typeof gc().prototype getter= Function ? this.__defineGetter__(\"__parent__\", *::*) : __iterator__ = __parent__); (export __parent__.__lookupSetter__(\"__proto__\")); ({__count__:  /x/ })) {{return  /x/ ; }yield; }");
tryItOut("\fnull;");
tryItOut("if(__parent__ = __iterator__.*) {return  /x/  < prototype; } else  if ((-0) % function ([y]) { }.__lookupGetter__(\"__count__\") .. <bbb xmlns=\"__parent__ === <>//h\n<x><y/></x></>\"><zzz><y><z/></y></zzz><x><y/></x><x><y/></x><ccc:ddd></ccc:ddd></bbb>.((get = <x/>))) {__parent__ = #3={a:#3#}, prop = *::*; } else {L: return true; }");
tryItOut("/*infloop*/while(<xxx>{__count__}</xxx>){L:do <x><y/></x>; while((((__parent__) = [z1](false,  /x/g ))) && 0);return *; }");
tryItOut("{yield __noSuchMethod__ = *;with({prototype: <y><z/></y>})export *; }");
tryItOut("with({__parent__: function  __iterator__ (({ __proto__: prop, __proto__: constructor }), prop) { __noSuchMethod__; } ((({a2:z2}) .. window), prototype = <x><y/></x>)})const __proto__ = <x><y/>\f</x>;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = (yield (({__proto__: true}))) in (<><x><y/></x></>)) { const __iterator__; }");
