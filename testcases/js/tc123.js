tryItOut("throw prototype;");
tryItOut("let prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((__noSuchMethod__) in <><x><y/></x></>) {eval }");
tryItOut("let(({ __noSuchMethod__: prop, prop: ({ __noSuchMethod__: prototype }) }) = (~(<y><z/></y> ^= 1.2e3)), __iterator__) ((function(){with({}) yield <x><y/></x> |= __parent__;})());");
tryItOut("/*for..in*/for(let (<x><y/></x>.yoyo(<x/>))(<><x><y/></x></>) in <x><y/></x>) yield true\ncontinue L;");
tryItOut("/*infloop*/while(( '' )()){\fif(this) {break M; } else  if (-3/0) {let prototype = this;return; } }");
tryItOut("/*infloop*/while( '' )");
tryItOut("/*infloop*/while(([].__parent__))Function");
tryItOut("L:if(#3={a:#3#} = this) {return this; } else  if (!#2=this &= null >>= ) {/*infloop*/for(let prop; (({__iterator__: [z1,,]})); <><x><y/></x></> | <x><y/></x>) gc() } else {(<><x><y/></x></>);const __iterator__, prototype; }");
tryItOut("/*for..in*/M:for((__iterator__) in [,,z1]) {return;const __parent__ = __parent__, [] = __noSuchMethod__; }");
tryItOut("if(<><x><y/></x></>) { if ( /x/g  for each (<x><y/></x> in function ([y]) { }))  else {yield; }}");
tryItOut("yield @foo; const __noSuchMethod__;");
tryItOut("/*infloop*/do L:switch(true) { default: break; case this.@foo: break; case (): case <>__noSuchMethod__</>: case <x><y/></x> !== true != (<y><z/></y>.eval(<>\f<x><y/></x></>)): break; case 4: /*infloop*/do {export __noSuchMethod__;return; } while(__noSuchMethod__);break;  } while((( '' )(1.2e3) = __noSuchMethod__ = prop));");
tryItOut("/*for..in*/for(prop in (('haha'.split)(true))){const __count__;yield  /x/g ; }");
tryItOut("let (__count__ =  \"\" , constructor) { return; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(const __iterator__ in <x><y/></x>) { { yield __proto__.( '' ) }  }");
tryItOut("return ({ __noSuchMethod__: __proto__ }).prototype;");
tryItOut("M:while((<><bbb xmlns=\"\">( /x/ .eval(<y><z/></y>))</bbb></>) && 0)/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__.__iterator__ in this) {prototype = <x><y/></x>;continue ; }");
tryItOut("yield\nreturn  /x/g ;switch((++ \"\" .__defineSetter__(\"constructor\", function(q) { return q; }))) { case window: break;  }");
tryItOut("L: {}/*infloop*/for(const __count__ = false(<x/>, function(id) { return id }); (eval(\"3/0\", false)); ) {; }");
tryItOut("L:if((({a2:z2}) if (window))) const __iterator__ = <y><z/></y>; else {yield;{} }");
tryItOut("while((<><x><y/></x></>) && 0){}\t");
tryItOut("with(window){ }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in 0/0 &  /x/ ++) {(<y><z/></y>);gc() }if((new <y><z/></y>(<x><y/></x>, #1=[#1#]))) <x><y/></x>;");
tryItOut("with({}) throw __proto__;");
tryItOut("/*infloop*/for(undefined[true]; \n@foo; (__parent__--)) yield;");
tryItOut("/*infloop*/do {gc() } while(<><x><y/></x></>)\n");
tryItOut("var __count__ = <x><y/></x>, __count__\n");
tryItOut("/*for..in*/L:for(__proto__ = prop%=__count__ in (this.__defineGetter__(\"__proto__\", <y><z/></y>))) {prototype(*::*)\n }");
tryItOut("/*for..in*/for(__proto__ = () in yield <xxx {__iterator__}={prop} />) \f{( /x/ );M:switch((* for (__proto__ in constructor))) { case <x><y/></x>: break;  } }");
tryItOut("/*infloop*/while(++null >=  /x/g  ? this : true)yield 0/0; const __count__;");
tryItOut("/*infloop*/do return;export *; while(-<!--yy-->);");
tryItOut("for(let y in []);");
tryItOut("(this)");
tryItOut("return <x/>;");
tryItOut("let(__parent__ = (window.propertyIsEnumerable(\"constructor\")) || (<><x><y/></x></>.isPrototypeOf(0/0)), prop) { return (yield 0)\n;");
tryItOut("switch(window > <x/>) { default: const prop = .2, prototype = <><x><y/></x></>;\n/*infloop*/for(var prototype = window; *::*; [[1]]) 0.1;\nbreak; case 7: case <><x><y/></x></> for each (__proto__ in  /x/g ): case *::*: L: {export __parent__; }case (~__iterator__ = 0x99): var __proto__ = constructorbreak; case (!eval(\"(new Function);\", arguments)): yield  /x/g ;break; case 2: let prototype;break;  }");
tryItOut("break L;");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/L:for(1e-81; ({a1:1}); <><x><y/></x></>) {export *; }\nbreak L;\n");
tryItOut("/*infloop*/for(let __noSuchMethod__ = prototype.(typeof true); ((p={}, (p.z = __iterator__ = constructor)())); <ccc:ddd></ccc:ddd>.( /x/ .*)) return 4.;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({__noSuchMethod__: new ((( ''  if ((-1)))))(*::*.yoyo(<x><y/></x>), 3.141592653589793) }).yoyo((((true[1e81]).@foo) -= (((window).watch).call(<><x><y/></x></>, ))(__iterator__ = <><x><y/></x></>))) in <x/>) {let(__proto__) { let(prop = false, prop = .2) ((function(){{}})());export * }");
tryItOut("M:if(({__parent__: (__iterator__.(<x/>)) | *::* % .2})) {throw false;\n{}\nlet constructor = <x><y/></x>; } else  if (this) {export __count__;yield; } else continue M;");
tryItOut("switch(({__count__: __iterator__ }) .@x:: (undefined.isPrototypeOf(*))) { default: (3);case 1: const prop,  \"\" ;break;  }");
tryItOut("{} const prop;");
tryItOut("if(+this.isPrototypeOf([15,16,17,18].filter(Math.sin, __noSuchMethod__))) {yield\ngc() } else  if ('fafafa'.replace(/a/g, 1.3.prototype = (window /= (prop.__parent__ = this).constructor))) {yield;/*for..in*/for(let __proto__ in (([1,2,3,4].map)([1,,] -=  /x/ )))return; } else gc()");
tryItOut("/*infloop*/M:while(( { yield window } ) = new ( '' )())__iterator__ = #1#;");
tryItOut("/*infloop*/while(({__noSuchMethod__ getter: this, prop setter: window })){export *; }");
tryItOut("{}export [,,];");
tryItOut("with({function::__noSuchMethod__:  /* Comment */{} != 3})/*infloop*/for(const ({ prop: ({ prototype: constructor, __iterator__: __proto__ }), constructor: ({ prop: __parent__, prop: ({ constructor: , __count__: constructor }) }) }) = ((String(<><x><y/></x></>)).function::prototype);  /* Comment */ /x/  -= ([<x><y/></x>].some((undefined).watch)); ('fafafa'.replace(/a/g, [1,2,3,4].slice))) export __count__;");
tryItOut("try { __parent__ = __iterator__; } catch(__proto__ if #1=({__noSuchMethod__: (@foo.__lookupGetter__(\"prop\"))})) { yield __noSuchMethod__.__count__.yoyo([,,z1]); } ");
tryItOut("{var __proto__, prop;var __count__ = @foo, __count__ = true; }");
tryItOut("/*infloop*/for([prop, , , ] = [__count__ = __noSuchMethod__ for ( /x/ .__iterator__ in false) for each (__count__ in function ([y]) { })]; __proto__; ) this;");
tryItOut("M:if(__noSuchMethod__) continue ;");
tryItOut("/*infloop*/M:while((__iterator__.prototype = #0=[{}]))__iterator__; const __count__;");
tryItOut("if(*[null]) { if (*::*) {<x><y/></x>;gc() }} else default: const __noSuchMethod__, prop = <y><z/></y>\nM:with(RegExp()){for(let y in [5,6,7,8]) let __iterator__, __noSuchMethod__ = constructor;let (__iterator__) { yield <><x><y/></x></>; } }");
tryItOut("throw 0.1\n__iterator__//h\n");
tryItOut("with({}) { __proto__ = prop; } ");
tryItOut("if(<y><z/></y>.prop) export prop; else  if (((uneval(__parent__ = *::*.__count__)))) {L: {throw __noSuchMethod__;const constructor = <x><y/></x>, break M; = ({a1:1}); }throw false; } else if(1.2e3) throw __noSuchMethod__; else  if (this) ");
tryItOut("M:switch(yield true) { default: M:with(prototype = false.__noSuchMethod__){export __iterator__; }case let (({ __count__: ({ prototype: prototype, __parent__: __iterator__ }) }), prop) *::*: prop = ({a1:1});break; case constructor, __parent__ = constructor: case (let (__proto__ = <><x><y/></x></>) 3): ( /x/g );break; case 0:  }");
tryItOut("M:if(__noSuchMethod__%=undefined) { if ((prop for each (__proto__ in null))) {yield; }} else export *;");
tryItOut("if(let (__proto__ = <x><y/></x>, __parent__) <x><y/></x>) throw  /x/g ; else throw *;");
tryItOut("/*infloop*/for(var __noSuchMethod__; prop.prototype; (Number(({a2:z2})))) {export *;export *; }");
tryItOut(" { {return 0/0;return; } } ");
tryItOut("yield;\n(<><x><y/></x></>);\n");
tryItOut("L:while((__count__ = (prop-=<x><y/></x>)) && 0){export constructor;throw function ([y]) { };var __proto__ = [1], __proto__ = <x><y/></x>; }");
tryItOut("/*infloop*/while( '' ){/*for..in*/for(let __iterator__ in  /x/g ) {{}(({a1:1})); } }");
tryItOut("{}");
tryItOut("L: /*for..in*/M:for(const [__parent__, __iterator__] = (3.141592653589793 + <><x><y/></x></>) in 3) export *;");
tryItOut("/*infloop*/do {export constructor;/*for..in*/for(__iterator__ in <y><z/></y>) {gc()throw null; } } while((this.zzz.zzz) &= #1=[#1#]);");
tryItOut("{while((-this) && 0)prototype = *::*, __iterator__; }");
tryItOut("if((new Function(\"throw  \\\"\\\" ;\"))) if(this) { if (__parent__) {continue ; } else {}}\ngc()\n");
tryItOut("if(({prop: @foo.propertyIsEnumerable(\"__proto__\")})) { if (({ __iterator__: ({ constructor: [({ __proto__: __count__ })] }) }) = new ( /x/  , *)()) {;switch(true) { case window: break;  } }} else {/*infloop*/while((__parent__ = this)(this.zzz.zzz)){throw  \"\" ; } }");
tryItOut("M:do function  prototype (prop) { return <x/> }  while((3) && 0);");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/do constructor.constructor = __parent__; while(([11,12,13,14].sort));");
tryItOut("if((uneval(new  /x/ ()))) if(window\n) {{} } else {/*for..in*/M:for(__iterator__ in  /x/ ) return;\rthrow <><x><y/></x></>; } else {if([prop].sort( /x/g )) {const constructor = <y><z/></y>, __noSuchMethod__ = @foo; } else {yield function(id) { return id }; }{} }");
tryItOut("{/*infloop*/for(__proto__.(((yield (-0)) ? __proto__ : -3/0)); window; gc()) if( /x/g ) { if ((yield @foo)) {export __proto__;yield; }} else yield *; }");
tryItOut("/*for..in*/M:for(let [__count__, __parent__] = this.zzz.zzz ? (this.__defineSetter__(\"prop\", function(y) { yield y; {}; yield y; })) + <y><z/></y>.__lookupGetter__(\"__noSuchMethod__\") : <x/>--.unwatch(\"__noSuchMethod__\") in [] ^ (@foo.__lookupGetter__(\"constructor\"))) {if(prototype) {const __proto__ = ({a2:z2}); }\n; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in ([1,2,3,4].slice)(<y><z/></y>, <x><y/></x>)) export __iterator__;");
tryItOut("with({}) let(__noSuchMethod__ = ([<><x><y/></x></>] for (window.__parent__ in <x><y/></x>)).isPrototypeOf(<><x><y/></x></>.watch(\"prototype\", (<><x><y/></x></>).call).yoyo(eval(\"true\", (-0)))), __count__) { prop = __parent__;");
tryItOut("constructor");
tryItOut("/*infloop*/while((constructor = @foo)){function (__parent__)<x/> }");
tryItOut("throw StopIteration;");
tryItOut("M:if((*::*.eval(#1#))) { if (undefined) {gc() }} else {export *;let __iterator__ = __parent__, prototype; }");
tryItOut("\fprop.__parent__ = __noSuchMethod__;");
tryItOut("\n");
tryItOut("M:switch( ''  + (__parent__.__iterator__ = [,]).hasOwnProperty(\"prop\")) { case 9: export __proto__;break; default: case 8: break;  }");
tryItOut("do {(this); } while(((-1)) && 0);");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ __iterator__: [, constructor], prototype: [, ] }) }) = (__count__-= '' ); __parent__ =  '' ; *) {let prop, prototype = 5.0000000000000000000000; }");
tryItOut("true\nexport *;");
tryItOut("/*for..in*/for(prototype in ((({}).__lookupGetter__)(this))){/*infloop*/M:for(<x/>; (yield  \"\" ); prototype.eval({})) return true; }");
tryItOut("/*infloop*/do {(this).watch<y><z/></y>; } while(window);");
tryItOut("__parent__.constructor = prototype;");
tryItOut("/*for..in*/for(var [constructor, __noSuchMethod__] = __noSuchMethod__.__iterator__ = (<x/> / this) in new new true(<y><z/></y>)()) if(<x><y/></x>.__defineGetter__(\"__iterator__\", @foo)) let __noSuchMethod__; else  if ((-0)) constructor = __proto__;");
tryItOut("\nif([15,16,17,18].some(function (__noSuchMethod__) { {} } , <x><y/></x> in <x/>)) {export __iterator__;break ; } else {0x99;[[]]; }");
tryItOut("/*infloop*/while(-0\n)yield <x><y/></x>;");
tryItOut("if((<><x><y/></x></>.constructor)) export __iterator__;");
tryItOut("throw <><x><y/></x></>; const prop;");
tryItOut("/*for..in*/for(const prototype in (((function  __noSuchMethod__ (__parent__, __count__) { return [,,] } ).apply)())){return 1e81;yield; }");
tryItOut("return\n");
tryItOut("/*infloop*/for(let __proto__; [, ] = <x><y/></x>.(undefined); [(\f[0.1].sort((arguments).call))]) {L: {return;throw <x/>; }M:while((prop) && 0){1.3; } }");
tryItOut("if(__proto__.propertyIsEnumerable(\"prop\").unwatch(\"__parent__\")) { if ((*.__lookupGetter__(\"__noSuchMethod__\").__lookupGetter__(\"[, , , ]\"))) M:if(({function::__noSuchMethod__ getter:  '' , prototype: [1] })) { if ((__count__: ((gc).call(@foo.isPrototypeOf( /x/ ),  /x/  >>= 3, <y><z/></y>)))()) {throw null; } else let __parent__ = <x/>\n}} else {__proto__ = <><x><y/></x></>; }");
tryItOut("with({__parent__: ({__noSuchMethod__: false.throw(window)})}){if([15,16,17,18].sort(gc, window)) { if (this.__defineSetter__(\"__count__\", (function(y) { yield y; var get, constructor;; yield y; }).call)) {throw <x><y/></x>;(<><x><y/></x></>); }} else {yield; }M:if(this.__defineSetter__(\"__noSuchMethod__\", <><x><y/></x></>)) [z1,,]; }");
tryItOut("let (__parent__ = __parent__, __parent__ = @foo) { , }");
tryItOut("/*infloop*/do {throw @foo; } while(this.zzz.zzz);");
tryItOut("/*infloop*/for(const [, , [constructor, ]] = (p={}, (p.z = @foo.propertyIsEnumerable(\"__count__\") &&  /x/ .isPrototypeOf(.2))()); #0=({constructor: eval(\"*;\", (({ constructor: prototype }) = <><x><y/></x></>.isPrototypeOf((constructor.__defineSetter__(\"constructor\", new Function)\f))))});  /* Comment */new ((<><x><y/></x></>)[*])( /* Comment */({a2:z2}))) let __noSuchMethod__, constructor;\f");
tryItOut("if((__parent__ = *::*)) {return;function(y) { yield y; (<><x><y/></x></>);; yield y; } } else prototype, __count__ = *;");
tryItOut("L:if(this.(\"number\")) {return;continue ; }");
tryItOut("break ;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: constructor, __iterator__: ({  : [], prototype: window }) }) = #1#; <>(((yield #1=[#1#])) , (<x/> >> __noSuchMethod__))</>.unwatch(\"__iterator__\"); this ? __count__ : <><x><y/></x></>) {if([11,12,13,14].filter) { if (<><x><y/></x></>) {; }} else {}gc() }");
tryItOut("/*infloop*/do return; while(<x/>);\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in void __noSuchMethod__.__iterator__) {/*infloop*/L:for(const prop; undefined; <><x><y/></x></>--) export prop;switch(#2=({prop: __noSuchMethod__})) { default: break;  } }\n");
tryItOut("/*infloop*/for(var constructor = prototype = window.hasOwnProperty(\"__proto__\"); (({__iterator__ setter: function(q) { return q; } })).unwatch(\"__proto__\"); String() != __parent__ = <><x><y/></x></>) return;");
tryItOut("L: ");
tryItOut("yield;\n;\n");
tryItOut("/*infloop*/M:while(null){yield;\t '' ; }");
tryItOut("/*infloop*/M:for(new RegExp(<y><z/></y>.__defineGetter__(\"__iterator__\", <><x><y/></x></>)); eval(\"__proto__\\n\", let (__parent__, prop =  /x/ ) <><x><y/></x></>); prop.prop + ({__iterator__: undefined })) {export __noSuchMethod__;throw [z1] }");
tryItOut("do (this); while((<x><y/></x> ?  /x/  : <x/>) && 0);");
tryItOut("let([[, [(\f{ __parent__: prototype }), , ({ __proto__: constructor })], ], \t({ __noSuchMethod__: ({ prop: [__parent__, , x::__parent__] }) }), , , [, , ]], [({ prototype: ({ prop: (function ([y]) { })() }), __count__: ({ __count__: __parent__ }) }), constructor, __count__] = constructor) ((function(){for(let y in []);})());");
tryItOut("M:if(new (/a/gi).apply(<><x><y/></x></>, <><x><y/></x></>)) {export *;; } else \fbreak ;");
tryItOut("/*for..in*/M:for([function::__parent__, constructor] = new Error().* in <x/>) {/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in true) ; }");
tryItOut("switch(__count__) { case 9: break; ;break; case 1.2e3: export *;break; break; break; ; }");
tryItOut("/*infloop*/M:for(undefined; (this.zzz.zzz); new @foo(null)) /*for..in*/for(const __iterator__ in null) export __count__;");
tryItOut("/*for..in*/for(var (__count__.prop = new (this)()).prop in ((function (prop, __proto__) { #1# } )((yield ++ '' ) yyy (((yield *[(__count__.constructor)]) + this), this.zzz.zzz))))");
tryItOut("switch((window.@foo)) { case ({__iterator__: true}): switch(({a1:1})) { default: break; case <y><z/></y>: break;  }default: break; gc()break; yield;break;  }");
tryItOut("return <><x><y/></x></>\n/*infloop*/M:for((true.__defineGetter__(\"__parent__\", <x/>)); true; ( '' )[<y><z/></y>]) {__proto__ = this, __parent__ = window; }");
tryItOut("/*infloop*/for(__noSuchMethod__; this.zzz.zzz; [<><\tx><y/\t></x></> for (prototype in constructor)]) while((__iterator__ =  \"\" , __parent__ = 1e81) && 0){throw true; }");
tryItOut("while(((__proto__.__proto__ = <x><y/></x>)) && 0){gc() }");
tryItOut("if() { if (@foo) {gc() } else {/*for..in*/for(var [__noSuchMethod__, prop] = 1e-81 in false) {gc()({}); } }}\n/*infloop*/for((@foo.valueOf(\"number\")); ([11,12,13,14].map) in __parent__ <<= <><x><y/></x></>; this.eval(*).propertyIsEnumerable(\"__proto__\")) {<x/>;/*infloop*/for(__noSuchMethod__; 0/0; 033) {return;;\t } }");
tryItOut("return *;");
tryItOut("/*for..in*/for(const prop =  /x/g (this, (function ([y]) { })()) in new (__parent__)(window, <x><y/></x>)) { /x/g ; }");
tryItOut("/*infloop*/for(const __iterator__; __noSuchMethod__; [15,16,17,18].sort(((<y><z/></y>)[<x><y/></x>]), (<x/> ==  for each (prop in (({__count__:  ''  }))) if (this)))) continue M;");
tryItOut("/*infloop*/for([1,,].prototype; new String(); ()) {return;throw *; }");
tryItOut("switch(<><x><y/></x></>) { case __proto__: continue ; }");
tryItOut("/*infloop*/M:for(const prop = <y><z/></y>; #1#; <y><z/></y>) {'haha'.split }\n");
tryItOut("/*infloop*/for//h\n(const __parent__ =  \"\" ; *; <><x><y/></x></>) {const prop = @foo, __count__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(let __proto__ = 4..valueOf(\"number\") in  /x/ ) __iterator__;");
tryItOut("yield Math.sin;");
tryItOut("{<><x><y/></x></>; }");
tryItOut("/*for..in*/for(prop in <x/>) L:do {gc() } while((<><x><y/></x></>) && 0);");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/L:for([,,z1]; undefined; constructor) export prototype;\f");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in (1e-81)[<x/>]) {(<><x><y/></x></>); }");
tryItOut("constructor\n");
tryItOut("export __proto__;\n\n");
tryItOut("return  /x/ ;");
tryItOut("{return; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((({a2:z2})).watch).call(*.__noSuchMethod__ = __iterator__, )) {/*infloop*/L:for(__proto__ = (yield = .2); *++;  '' .propertyIsEnumerable(\"constructor\")) let __noSuchMethod__ = <><x><y/></x></>, __parent__ = <><x><y/></x></>;(3/0); }");
tryItOut("throw <y><z/></y>;\nvar constructor = <x><y/></x>, __proto__ = @foo;\n");
tryItOut("if((!__proto__)) \t{ if ((({x::__count__: *, __iterator__: <x/> }))) {return;true; }\f} else {*::*; }");
tryItOut("/*infloop*/for(({ __iterator__: ({ __parent__: ({ constructor: [__noSuchMethod__], __proto__, __proto__: ({ __iterator__: @foo }) }) }) }) = [<><x><y/></x></> for (__proto__ in <><x><y/></x></>)].valueOf(\"number\").throw(delete ([ /x/ .valueOf(\"number\")])); \n033.throw((yield *)); yield ((__count__)[<x/>] &= [11,12,13,14].some);) {/*infloop*/M:for(var __iterator__; this; <>yyy</>.(this === <y><z/></y>.__lookupGetter__(\"__noSuchMethod__\"))) {do {const {yield <x><y/></x>;var __parent__; }, __proto__; } while((constructor) && 0);{} }/*for..in*//* nogeckoex bug 349964 */ for  each(prop in __parent__.__defineSetter__(\t\"constructor\", eval)) {(1e-81);break  } }");
tryItOut("if(this.__defineGetter__(\t\"__noSuchMethod__\", (function(q) { return q; }).call).@foo) {/*infloop*/for(var __iterator__ = <></>; <x/>.hasOwnProperty(\"prop\"); --<x><y/></x>) {gc() } } else {/*for..in*/for([constructor, prototype] = <x><y/></x>.(try { (this); } catch(__noSuchMethod__ if (function(){gc()})()) { throw <x/>; } ) in window) {var __parent__ = window;gc() } }");
tryItOut("/*infloop*/for(var __iterator__ = [,]; yield this; this.prop = *) return;");
tryItOut("{/*for..in*/for(var [__iterator__, constructor] = * in null) {gc() }gc() }");
tryItOut("for(let y in []);");
tryItOut("with({}) { throw __count__; } ");
tryItOut("__parent__ = __iterator__;");
tryItOut("export *;");
tryItOut("/*for..in*/M:for(var prop in (((this == <y><z/></y>.valueOf(\"number\")))((this.__defineSetter__(\"__proto__\", <x><y/></x>))))){L: let (__proto__, __iterator__ = window) { yield ({a1:1}); } }");
tryItOut("/*for..in*/for(const __count__ = eval(\"__count__;\", __proto__ = [<x><y/></x>]) in (constructor.__noSuchMethod__ = (1e+81 , @foo))) {{}if((<><x><y/></x></>.hasOwnProperty(\"__parent__\"))) {{} } }");
tryItOut("for(let y in []);");
tryItOut("with\n({__proto__: (({}).__lookupGetter__)})if([<x><y/></x>].map(function  prop () { return null } )) {throw  /x/ ;export *::*; } else  if (( /* Comment */null)\n) {export *; }");
tryItOut("L: {return  /x/g ;let (__noSuchMethod__ = <x><y/></x>, __proto__ = ({a2:z2})) { continue L; } }");
tryItOut("for(let y in []);");
tryItOut("if((({ prop: ({ __count__: __proto__ }) }) = new ({}).hasOwnProperty(*::*, __count__))) { if (__noSuchMethod__) {let prototype = window, prototype = __noSuchMethod__;(function (__noSuchMethod__) { return; } ).call } else \n{/*infloop*/M:do {var __parent__; } while(-1);this; }}");
tryItOut("return [1];");
tryItOut("/*for..in*/for\r(const set in ((((__parent__.prototype).hasOwnProperty(\"prop\")).call)(([15,16,17,18].map(function  __count__ ()<x><y/></x> , <x><y/></x>, ({ prototype: setter }) = (__parent__)//h\n).__lookupGetter__(\"prototype\"))))){throw 3;x::__parent__ = window, __count__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/while(({})){export *;yield; }");
tryItOut("if((this.__defineGetter__(\"__parent__\", function (prototype, __noSuchMethod__)this.valueOf(\"number\")))) yield; else  if ([([,,].valueOf(\"number\"))].filter(yield Exception())) F else export __proto__;");
tryItOut("/*infloop*/for(constructor = <y><z/></y>; 1e-81; @foo) yield;");
tryItOut("{export prototype;var __proto__ = 5.0000000000000000000000; }");
tryItOut("/*infloop*/do L: export __proto__; while(\t(@foo < <><x><y/></x></>.__lookupSetter__(\"__count__\").__defineGetter__(\"__noSuchMethod__\", <x><y/></x>.*).__lookupSetter__(\"prototype\") for (__proto__ in ((yield;)\n))));");
tryItOut("if(eval(\"return -0;\", true)) { if ( /* Comment */null) ({}).__lookupGetter__} else {prop;return; }");
tryItOut("#1#;return;");
tryItOut("with({__iterator__: ({__noSuchMethod__ setter: Math.pow,  get __proto__(__proto__, prototype)__parent__ })})return;");
tryItOut("/*infloop*/do {return; } while(<x/>);");
tryItOut("/*infloop*/M:for(__count__.__proto__; ([] = __count__); (\r{ prop: ({ __iterator__: prototype }) }) = ((1 for (x in []))).call(prototype.__noSuchMethod__ = -0, )) {/*\n*/L:switch(<x><y/></x>[<><x><y/></x></>]) { case 2: break; case 3: break; case : break; export __iterator__;break; return <x><y/></x>;<y><z/></y>;gc()break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ prototype: ({ prop: __parent__, prop: [, [__iterator__, prototype, __iterator__, __proto__], , , ] }) }) in (1.3 < -0)) {/*for..in*/for(__count__ in ((eval)((uneval([1,2,3,4].slice)))))export *; }");
tryItOut("/*for..in*/for((undefined .@*:: <x/>).__noSuchMethod__ in ((Math.sin)(eval(\"gc()\", <><x><y/></x></>)))){export *;switch(<><x><y/></x></>) { default: export *; } }");
tryItOut("{/*infloop*/for(({ __count__: __parent__ }) = window; (eval).call(<><x><y/></x></>, window, <x><y/></x>); <x/>) {yield; } }");
tryItOut("constructor.__proto__");
tryItOut("<>0x99.__lookupSetter__(\"prototype\").__iterator__</>\n/*infloop*/for(*; 0x99; eval(\" /x/ \", <x><y/></x>)) {1.2e3; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in *) let prop = *::*, constructor = @foo;");
tryItOut("/*infloop*/for(let function::__proto__; (<y><z/></y> |= new -3/0()); *::*--) if(__noSuchMethod__ = __proto__.__parent__ = (prototype = undefined)) [1,2,3,4].slice else  if ( \"\" .__defineGetter__(\"__proto__\", (function (__iterator__) { yield <><x><y/></x></> } ).apply)) {(this); } else yield;");
tryItOut("let (__count__) { do let __proto__ = prototype, __noSuchMethod__; while((undefined.__defineGetter__(\"prop\", this)) && 0) }");
tryItOut("/*infloop*/for(var ({ __proto__: __proto__, constructor: prototype }) = (prop.__proto__ = [z1].__lookupGetter__(\"x::function::constructor\")); (prototype|=0--); 3/0 * <><x><y/></x></>) if(__iterator__\n) { if (let (__count__) let (prototype) [z1]) {return __noSuchMethod__;\r__noSuchMethod__; }} else while((prototype) && 0){export *; }");
tryItOut("do {{}export __count__; } while((\nprop) && 0);");
tryItOut("/*infloop*/while(arguments){prop = true;const prop =  \"\" ; }");
tryItOut("switch((<x/>.__lookupGetter__(\"getter\"))) { case new String(): case 8: break; /*infloop*/for(( '' .__proto__.valueOf(\"number\") >>>=<><x><y/></x></> != __iterator__ ? 3/0.hasOwnProperty(\"prototype\") : (+Error(new Function(__iterator__ = .2))));  /x/ ; ) {return *::*;gc() }default: break; case <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>: break; return (yield <y><z/></y>) % __parent__ = -3/0.__defineGetter__(\"__parent__\", (1 for (x in [])));break; case new (([1,2,3,4].map).call)(): if( \"\" ) { if (<><{prototype}><!--yy--></{prototype}></>) {if(this) {return *::*;continue ; } else  if (window)  else {*::*;let function::__noSuchMethod__, constructor; } } else {yield __parent__;(<x><y/></x>); }}break; /*infloop*/for(({ __noSuchMethod__: ({ __count__: __iterator__ }), constructor: ({ __parent__: __proto__, constructor: prototype }) }) = null; (Function()); __proto__.(delete undefined) @ void <><x><y/></x></>) yield <><x><y/></x></>;break; case 7: M:with(@foo.eval([z1]))case ((<x><y/></x>).call)((constructor), __noSuchMethod__): case false([[]].throw(null), __proto__): break; break; break; case 7: break; case *::* >> this.unwatch(\"prop\")/*\n*/: do {__iterator__ = #1=[#1#], __parent__ = undefined;return; } while((prototype = 1.3) && 0);case ('fafafa'.replace(/a/g, Math.pow)): switch((__count__.( ''  @ window))) { default: break; case 9: case 0.1.yoyo((function ([y]) { })()): <><>(* ? * : window.hasOwnProperty(\"__count__\"))</></>break; gc()break;  }case (prop = [1,,]): with({}) __parent__ = __proto__;case 2: (* ? 0x99 : <x/>);break; case  /x/g .valueOf(\"number\") ? -<><x><y/></x></> : __parent__|=<x><y/></x>: /*for..in*/M:for(__parent__ = <><x><y/></x></> ^=  /x/g  in <x><y/></x>) var prop = [];case prototype.constructor = *.prop = <x><y/></x>: case (new [,,] << ( /x/g  + <x><y/></x>)): break; case 7: constructor;(1e4);break; break; /*for..in*/for(const __iterator__ in *::*) {export __noSuchMethod__; } }");
tryItOut("M:if(eval(\"new <y><z/></y>(1e4, @foo) >>>=(( /x/ )[*])\", yield <x><y/></x>)) /*for..in*/for(let __parent__ = () in @foo) continue ;");
tryItOut("/*for..in*/for(default: yield;break; break; case 8: break; break;  in (([1,2,3,4].map)(<><x><y/></x></>)))/*infloop*/while(<x><y/></x>)const __iterator__ = 3.141592653589793, prototype;");
tryItOut("/*for..in*/for(var ({ __proto__: [, __proto__], constructor: ({ constructor: __parent__ }) }) in ((function(q) { return q; })((Date() -= (prototype for (__count__ in <y><z/></y>)) ? ((p={}, (p.z = this)())) : __count__.__iterator__ getter= new Function)))){L: (*::*); }");
tryItOut("try { {} } catch(prop) { let constructor, __count__ = <><x><y/></x></>; } ");
tryItOut("/*for..in*/for(const __iterator__.prototype in this.__defineSetter__(\"constructor\", /a/gi)) /*infloop*/for(@foo >>= <x><y/></x>; false; (__iterator__.__noSuchMethod__-=__parent__ = <><x><y/></x></>)) {export *; }\n(<><x><y/></x></>);\n");
tryItOut("if(undefined) ; else {gc() }");
tryItOut("{if((<x><\ry/></x> < [].*\n).__defineSetter__(\"__parent__\"(/, Math.sin)) { if {return;export __parent__; } } }");
tryItOut("/*infloop*/while([[1]])let prop = null;with(true);");
tryItOut("if(false)  else { '' ;-3/0; }");
tryItOut("let(({ __iterator__: __iterator__ }) = <x><y/></x>) { with({}) { with({}) this.zzz.zzz; } ");
