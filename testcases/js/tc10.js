tryItOut("if(\n<><x><y/></x></>) <x><y/></x>");
tryItOut("{return <>(new Function(\";\"))</>;\fyield; }");
tryItOut("{if( /x/g ) export __proto__; }");
tryItOut("/*infloop*/for( '' ; *; __parent__) {return;(function  __noSuchMethod__ \f(getter) { yield null } ).apply }");
tryItOut("M:with({__parent__: (({a2:z2}).__count__ @ (({__proto__: 0x99, prop: *::* })))}){continue M; }");
tryItOut("if(033) { if (<x><y/></x>) export __proto__;} else (Math.pow).call");
tryItOut("with(.watch(\"constructor\", eval) /= new <x><y/></x>(<y><z/></y>, #1#))export *;");
tryItOut("/*for..in*/L:for(var __count__ = constructor.propertyIsEnumerable(\"function::__noSuchMethod__\") in new @foo()) {if(#1=[#1#]) {export __iterator__; } else  if (({})) throw true; else {break \t;gc() }\nconst constructor = window, __count__; }");
tryItOut("M:do export *; const constructor; while((__iterator__.__count__-=__count__) && 0);");
tryItOut("if(__proto__) { if (<x><y/></x> += 5.0000000000000000000000) let __noSuchMethod__ = <x><y/></x>, __iterator__; else }");
tryItOut("(__noSuchMethod__) = __noSuchMethod__;");
tryItOut("/*for..in*/M:for(const [prop, __noSuchMethod__] = ('fafafa'.replace(/a/g, function(y) { yield y; throw 3;; yield y; })) in [033].filter(4.)) {if(.watch(\"__iterator__\", ((*).__defineSetter__).call)) { if ('fafafa'.replace(/a/g, ([1,2,3,4].map).call).watch(\"prop\", Function)) {var __iterator__ = __count__, prop = []; } else return;} }");
tryItOut("do {\texport *;yield <><x><y/></x></>; } while(((Function).call((new ((p={}, (p.z = [z1]\f++)()))()), )) && 0);");
tryItOut("while((new (<y><z/></y>)()) && 0){<y><z/></y>; }");
tryItOut("switch(3.141592653589793()) { default: ;break; case 1e4['prop'] = (({__iterator__ setter: __proto__, __proto__: <y><z/></y> })): yield;{}break;  }");
tryItOut("do {{}for(let y in []); } while((__proto__) && 0);");
tryItOut("with(void <x><y/></x>.(<y><z/></y>)){ '' ; }");
tryItOut("<x><y/></x>");
tryItOut("/*for..in*/L:for(let [__parent__, function::__parent__] = prototype in window.valueOf(\"number\").__proto__ = gc  { return (0/0 >>> false) }  ({a2:z2})).__lookupSetter__(\"prop\") in (new ((0x99).watch)(1.3)).__defineGetter__(\"constructor\", Function).yoyo((uneval(<><x><y/></x></>)))) /*infloop*/L:for(let ({ x::constructor: prop, __proto__: constructor\f }) = __iterator__.__count__; <x/>; <x><y/></x>[[1]].__count__) export *;");
tryItOut("let (({ __noSuchMethod__: ({ __noSuchMethod__: x::prop, __parent__: [, ] }), ({ __iterator__: ({ constructor: ({ constructor: prototype }) }), __iterator__: [({ prototype: ({ prop: prototype }), __noSuchMethod__: [constructor, __noSuchMethod__] }), ({ constructor: prototype })] }): ({ prototype: prototype }) })) { if((-0.valueOf(\"number\"))) M:if((__parent__ = window)) { if ((__proto__.__noSuchMethod__ setter= eval)) yield;} else export __iterator__; else  if (__proto__ = *::*[false - *]) {({}).__lookupGetter__\f } else {export __parent__;/*for..in*/for(__proto__ in ((<x/>)([,,z1]))){{} } } }");
tryItOut("export @foo;");
tryItOut("throw StopIteration;let __parent__, prototype = prototype;");
tryItOut("/*infloop*/for(let x::prototype = [,,z1] + __count__; new <><x><y/></x></> || <x><y/></x>.__defineSetter__(\"__iterator__\", 0.1); (<><x><y/></x></>.isPrototypeOf(*))) yield null;");
tryItOut("L:if((default: ({ __parent__: __count__, __count__: __noSuchMethod__ })break; break; case undefined , window: yield;__iterator__ = <><x><y/></x></>;gc()break; case this.zzz.zzz: break; .throw(__iterator__))) {let __proto__;let __count__; } else  if ((((yield undefined))).call(([1].*), ((!window).__defineSetter__)(this),  \"\" )) {; } else {falseif(let (prop) #1#) { if ((__parent__ = __noSuchMethod__ setter: (1 for (x in []))))  else throw <x><y/></x>;} }");
tryItOut("do {L: {const __iterator__;if(*) {yield __proto__; } else  if ([z1,,]) {throw <y><z/></y>; } } } while(( '' ) && 0);");
tryItOut("/*infloop*/for(({ prop: __proto__ }) = <><x><y/></x></>; ({__parent__: @foo }); <x><y/></x> == <x><y/></x>) {break ; }");
tryItOut("if([1] ? 033 /= <y><z/></y> : #0=({__proto__: prototype = true})) __count__");
tryItOut("return; const constructor;");
tryItOut("{((function (delete)#1=[#1#]).call).applybreak L; }");
tryItOut("{<><x><y/></x></>; }");
tryItOut("if(1e81) ;");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] =  /x/  in ((\t@foo.__defineGetter__(\"__iterator__\", ((constructor.(.2))).__defineSetter__))())) {L:while(([( /* Comment */(break L)) if (__proto__)]) && 0)return;/*infloop*/for(function(id) { return id };  /x/ ; constructor) __noSuchMethod__ = <x><y/></x>; }");
tryItOut("with({prop: __noSuchMethod__ = prop-=@foo}){/*for..in*/L:for(var __iterator__ = [<x/> for (__proto__ in <><x><y/></x></>)] in <><x><y/></x></>) M:if(<x><y/></x>) export *;null; }");
tryItOut("/*for..in*/for( /x/ ['__count__'] in <><x><y/></x></>) gc()");
tryItOut("L: L:with([]){continue ; }");
tryItOut("/*infloop*/do return; while(Error(Function(this.__defineSetter__(\"__noSuchMethod__\", Function)), ({ prop: __noSuchMethod__ }).constructor setter= ({a2:z2})));/*infloop*/for(prototype; ((([z1])(__count__, null)) ,  /* Comment */get); window.isPrototypeOf(undefined)) {const __noSuchMethod__, prototype\n\n/*for..in*/L:for(__iterator__ in prop)  }");
tryItOut("L: {export *;prop }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in __parent__ = this.hasOwnProperty(\"__proto__\")) /*infloop*/do {\n } while((if(@foo) { if ( /x/g ) {yield; }} else {var __proto__, prop; }));");
tryItOut("/*infloop*/for(prototype.unwatch(\"__iterator__\"); __noSuchMethod__.__proto__ = <x><y/></x>; ((function ([y]) { })() ? <><x><y/></x></> : <x><y/></x>)) undefined\n");
tryItOut("if(__proto__.__noSuchMethod__ =  /x/g ) {const __noSuchMethod__ = <><x><y/></x></>, constructor;/*infloop*/for((({function::__iterator__: prop, __parent__ getter: * })); (1e-81.prototype); ( \"\" .isPrototypeOf(this))) {function  __noSuchMethod__ () { gc() } gc() } } else  if (yield __iterator__ = -0) prototype = <x><y/></x>, __noSuchMethod__ =  /x/ ;");
tryItOut("__iterator__; const prototype\nwith({__parent__: __iterator__ = *::*})let prototype;");
tryItOut(";");
tryItOut("with(([[__proto__] if (*)]).__lookupSetter__(\"__count__\")){__proto__ = <><x><y/></x></>, __proto__;(new Function(\"0x99;\")) const prop; }\nthrow <y><z/></y>;");
tryItOut("let(__proto__ = -1) { let prop = window;");
tryItOut("if(()) /*\n*/__iterator__; else  if (new true()) {continue ; } else yield;");
tryItOut("switch(new (<y><z/></y>).__defineSetter__().@*) { default: export *;break; let (prototype) { {} }break;  }");
tryItOut("return;");
tryItOut("do {return *::* > true; } while(('fafafa'.replace(/a/g, function (__iterator__, __count__)eval(\" '' \", true))) && 0)");
tryItOut("for(let y in []);");
tryItOut("if(1.2e3.propertyIsEnumerable(\"__noSuchMethod__\")) {if() {let prototype =  /x/ , __count__; } } else  if ((({}).hasOwnProperty)()) {return function(id) { return id };return; }");
tryItOut("switch(1e+81) { default: break; with((eval)(prop = null)){/*infloop*/do * while(__parent__); }/*infloop*/while(<x><y/></x>--)const __count__ = [,,], prop = <><x><y/></x></>;break; break; case new (\rfalse)( /x/g ).hasOwnProperty(\"__count__\"): case eval(\"{};\", prototype = true) = ((__count__).@*): break; case 8: /*for..in*/L:for(let [constructor, prop] = window *= 4. in this)  /x/ ;case 6: for(let y in []); }");
tryItOut("/*infloop*/while(__count__.(*::*))[1,2,3,4].map");
tryItOut("/*infloop*/do /*infloop*/for(const prop = __count__; 1e4; <x><y/></x>) constructor while(eval(\"1e4;\", <x><y/></x>));");
tryItOut("/*infloop*/do /*for..in*/L:for(prop = eval(\"<x><y/></x>\", @foo) in (( '' ).apply).call(*, #3={a:#3#},  \"\" )) {var __noSuchMethod__; /x/g  } while((false()).prototype);");
tryItOut("if(new (<x/>).__defineSetter__(<y><z/></y>).__defineSetter__(\"__count__\", /a/gi)\n) { if ((p={}, (p.z = (constructor = *))())) {{}return function ([y]) { }; } else function::constructor = window;}");
tryItOut("L: let prop = __proto__;");
tryItOut("const prototype;");
tryItOut("{yield 1e+81;{} }");
tryItOut("if(({ get prototype() {  }  })) return constructor; else  if (((p={}, (p.z =  '' )()))) __proto__ else yield <x/>;");
tryItOut("/*infloop*/for(/let [] = [11,12,13,14].map; (eval(\"<x><y/></x>\", <x/>.throw(__proto__).isPrototypeOf(yield function(id) { return id }))); <y><z/></y> , <y><z/></y> .@*::  '' (window, <y><z/></y>)[<y><z/></y>]{if([]) { if ( /x/g ) throw <><x><y/></x></>; else {const __noSuchMethod__ = *;yield 1.3; }} }");
tryItOut("if((this.zzz.zzz)) {/*infloop*/for(__iterator__ = ({__count__: <><x><y/></x></>,  get __proto__ __count__ () {  }  }); (window--); prop.*) {;let __noSuchMethod__ = 1.2e3; } } else constructor = this, __proto__ =  \"\" ;");
tryItOut("__count__ = __count__;");
tryItOut("L:switch(yield arguments) { case ((new (undefined).watch(<x><y/></x>, __count__)).unwatch(\"__count__\")): break; <x/>break;  }");
tryItOut("yield  '' ;");
tryItOut("/*infloop*/while(window.__proto__.constructor setter= (window).__defineSetter__){return <y><z/></y>; catch  }");
tryItOut("/*infloop*/for(const __noSuchMethod__; (prototype%=-3/0); this) if(<x><y/></x>) { if (constructor) {({}).__lookupGetter__ }} else {export constructor; }");
tryItOut("do {{}return true; } while(((<y><z/></y> |  /x/ ) , __iterator__) && 0);");
tryItOut("M:if(arguments) { if ('fafafa'.replace(/a/g, gc)) {export __count__;(__count__); } else export *;}");
tryItOut("if(__count__ = <><zzz>@foo *= window</zzz></>.unwatch(\"__parent__\")) {M:do /*infloop*/for(let __proto__; 1e4; null) __noSuchMethod__ while(( \"\" ) && 0);\n }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var prop = window in window) #1#\nexport *;");
tryItOut("/*infloop*/for(var [] = new (@foo >= prop)(); <y><z/></y>[<><x><y/\f></x></>] |= ((({__count__: [[]]})) .@ (\n<x><y/></x>++)); <x><y/></x> <<= this.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)) {/*infloop*/while(([-1 for each (constructor in null)])){return __count__;; }export __iterator__ }");
tryItOut("if( \"\" ) return *::*; else  if (@foo) __count__ = <><x><y/></x></>;");
tryItOut("var __count__;");
tryItOut("let( { while((prop) && 0){export *; } } , prototype) ((function(){try { (<><x><y/></x></>); } finally { let __parent__ = <><x><y/></x></>; } })());");
tryItOut("(undefined);");
tryItOut("do <x/>; while((@foo) && 0);");
tryItOut("L:if((yield ((window)() <<= (<x><y/></x> <<= true)))) var __iterator__; else  if (<x><y/></x>.(<x/>)) with(prop)var __iterator__; else {yield;do gc() while((<x><y/></x>) && 0); }");
tryItOut("/*for..in*/for(var [prototype, prototype] = *::* in __proto__.__noSuchMethod__ = {;__parent__, __parent__; } % (function ([y]) { })()) {with(window)__parent__; } const __proto__;");
tryItOut("/*infloop*/for(let ({ prototype: __noSuchMethod__, prototype: [, , ] }) = yield __noSuchMethod__; this; ()) throw <x><y/></x>\nL:if((RangeError(__count__, @foo))) { if (this.__defineGetter__(\"__noSuchMethod__\", new Function)) {{} }} else /*infloop*/for(__noSuchMethod__;  \"\" ; *::*) export prototype;");
tryItOut("/*infloop*/L:for(<x/>; (\n__noSuchMethod__.__iterator__); -1) let (__count__ = undefined, function::__count__ = [,,z1]) { /*infloop*/for(const __proto__ = prototype; 1.2e3; [,,z1]) let prop = window; }");
tryItOut("/*for..in*/L:for(const [prototype, function::__parent__] = <y><z/></y> in <x><y/></x>) /*infloop*/for(<><x><y/></x></>; <y><z/></y>; <><x><y/></x>\f</>) {}");
tryItOut("L:while((({ prototype: ({ __proto__: [, ({ __iterator__: ({ __proto__: __noSuchMethod__ }) }), __parent__, ({ __count__: [] }), [, ]] }) })) && 0){return 5.0000000000000000000000;break L; const __iterator__; }");
tryItOut("/*for..in*/\tfor(let __parent__ = --(([1,2,3,4].map)\t.call(<x><y/></x>, false, 1e-81)) in <x><y/></x>) {const __proto__ = return;; }");
tryItOut("const delete, __iterator__ = <x><y/></x>");
tryItOut("/*infloop*/for(new RegExp(<x><y/></x>.( \"\" ), <x/>); (1.3 < <x/>); new eval()) {export *;break ; }");
tryItOut("/*for..in*/L:for(__proto__ in function(id) { return id } for each (__count__ in undefined)) {let ({ __noSuchMethod__: [__iterator__, , __count__], (this && __iterator__):  }) = (prototype.constructor = (1e+81)[[z1,,]]), ({ prop: __proto__ }) = new function  prototype () { yield <><x><y/></x></> } (<><x><y/></x></>, <x><y/></x>); }");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = prop in ([11,12,13,14].map.__lookupGetter__(\"__count__\"))) export *;");
tryItOut("/*infloop*/for(this.__defineGetter__(\"__proto__\", constructor); (__count__ =  \"\" \n) * (true <<= this.__count__); (eval)(window)) {constructor = [<><x><y/></x></>].__iterator__export *; }");
tryItOut("(<y><z/></y>)");
tryItOut("do {var __count__ = <y><z/></y>;({ constructor: __parent__, prototype: prop }) =  /x/g  } while(((-0)) && 0);");
tryItOut("/*for..in*/for(var [prototype, prototype] = @foo .. prop in  /x/g .propertyIsEnumerable(\"prototype\")) ");
tryItOut("/*infloop*/for(eval(\"[1,2,3,4].map.@foo\", (typeof (__iterator__.constructor)).__defineSetter__(\"__iterator__\", /a/gi)); (new Function).call(@foo, ) ^ this.__defineSetter__(\"__noSuchMethod__\", eval).__lookupGetter__(\"__noSuchMethod__\").__lookupSetter__(\"prop\"); (({}).hasOwnProperty)(__noSuchMethod__), false << <y><z/></y> %= (1e+81.hasOwnProperty(\"constructor\"))) /*infloop*/M:for((uneval( /x/g )); <y><z/></y>; constructor.*) __proto__ = @foo, __noSuchMethod__;");
tryItOut("{\r/*infloop*/while(prototype.__parent__ setter= (#3={a:#3#}).watch)M:if(<x><y/></x>) { if (undefined) {export __noSuchMethod__;throw <x/>; } else continue M;} }");
tryItOut("do var __iterator__ = <x><y/></x>, prop = #1=[#1#]; while((window *= __proto__ = <x><y/></x> ? undefined : *\n.throw(<y><z/></y>)) && 0);");
tryItOut("if(false) { if (__iterator__) {({}).hasOwnProperty }} else export __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M:\t for  each(var ([15,16,17,18].some(({}).hasOwnProperty, <x><y/></x>))['constructor'] in (__count__)) {L: return <y><z/></y>;with({}) { let(__proto__) ((function(){with({}) return 4.;})()); }  }");
tryItOut("for(let y in []);");
tryItOut("<ccc:ddd> </ccc:ddd>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({a1:1})['constructor'] in *::* .@*:: null) const prototype = *::*, prop;");
tryItOut("if((new eval(([[]])( '' , [z1,,])))) {( /x/  > \t<><x><y/></x></>);/*infloop*/while(<><x><y/></x></>)window; } else  if (((undefined.propertyIsEnumerable(\"__iterator__\")) .. ((gc).call(*, (function ([y]) { })(), @foo)))) {gc() }");
tryItOut("/*infloop*/for(3/0; typeof <><x><y/></x></>; __count__.prop) {throw StopIteration; }");
tryItOut("try { return (window--); } catch(prop) { __iterator__ = prototype; } finally { for(let y in []); } ");
tryItOut("{yield;break L; }");
tryItOut("throw constructor;");
tryItOut("with(Math.pow){ }");
tryItOut("if(({prototype: window})) {return <x><y/></x>;constructor = <x/>, __parent__; } else  if (<bbb xmlns=\"[1,,]\"> </bbb>.(x::__proto__ = 033)) {var __count__ = *;{} } else /*for..in*/for(const __parent__ = null in <x><y/></x>) (<x/>);");
tryItOut("yield [z1,,]\nvar __parent__ = false, __parent__ = window;gc() const constructor;");
tryItOut("{}");
tryItOut("throw window;\n/*for..in*/\n");
tryItOut("if([,]) /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <><x><y/></x></>) {export constructor; } else  if ((new ((new Function(\"with(#1=[#1#])return;\")))((new ([,]).__defineSetter__(return <x><y/></x>)), this.zzz.zzz))) var setter, __count__; else {<x><y/></x>; }");
tryItOut("L: {yield;export *\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in <x/>) this;");
tryItOut("/*for..in*/for(var (<><x><y/></x></>)([]) in <x/>) return undefined;");
tryItOut("{return window; }");
tryItOut("/*for..in*/for(var __iterator__ =  /x/  in prototype) var prototype, constructor = __iterator__;");
tryItOut("M:if(prop.throw((function ([y]) { })())) {const prop = 1e81; } else {break M;{} }");
tryItOut("if(__noSuchMethod__) { if ((({}).__lookupGetter__)()) {continue M;([,,z1]); } else const prototype, prototype;}");
tryItOut("if(__proto__) { if (*::*) __noSuchMethod__} else {<x><y/></x>;export __parent__; }");
tryItOut("let(__iterator__ = ([11,12,13,14].some)) { (((function  __parent__ (prototype) { yield this } ).apply)( \"\" ).throw(prototype = <><x><y/></x></>))(( ''  if (<>try { {} } catch(__proto__ if (function(){let __parent__ = prop;})()) { {} } finally { let prototype =  \"\" ; } </>))) = prototype;");
tryItOut("if(__noSuchMethod__ = @foo in (window())) { if (__proto__.constructor =  \"\" ) var __iterator__, __iterator__;} else {return;continue ; }");
tryItOut("do {\tyield <x/>;/*for..in*/for(var __count__ in ((eval)(<y><z/></y>)))var function::__count__ = __noSuchMethod__, constructor; } while(([15,16,17,18].some(({}).__lookupGetter__, <x><y/></x>).yoyo(((<y><z/></y>)()))) && 0);");
tryItOut("throw  /x/g ;");
tryItOut("/*infloop*/for( /x/g ; (uneval(this)).__lookupSetter__(\"__proto__\").@*; (<bbb xmlns:ccc=\"(p={}, (p.z =  /x/g )())\"><ccc:eee></ccc:eee></bbb> *= new <y><z/></y>([,,z1]) ? 1e-81().unwatch(\"prop\") : ( /* Comment */(<y><z/></y> |= __iterator__) if (window.__lookupSetter__(\"__iterator__\"))))) {L:switch(({ __iterator__: __parent__ }) = new (gc).apply(*::*, this) += (<><x><y/></x></>)) { case 2: with(\n{constructor: this.zzz.zzz})(1 for (x in [])) }{} }");
tryItOut("while(([,,] > <x><y/></x>) && 0)export *;");
tryItOut("L:do {var __iterator__;const __noSuchMethod__; } while(( '' ) && 0);");
tryItOut("gc()return;gc()");
tryItOut("L:if(__parent__.__proto__ = __noSuchMethod__) {return; }");
tryItOut("/*for..in*/for(var __iterator__ in @foo) export *; const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.prop.__iterator__ in (<x/>)(window, [,])) let __parent__;");
tryItOut("yield <x><y/></x>(<y><z/></y>);");
tryItOut("let constructor = prototype\n");
tryItOut("while((this.zzz.zzz) && 0){yield window;let(__noSuchMethod__, __proto__) { return; }");
tryItOut("switch(__count__ = (yield this)) { case undefined: this;case 1: return  \"\" ;/*infloop*/do {gc() } while(*::*);break;  }");
tryItOut("");
tryItOut("/*for..in*/for(const __parent__ = this in [[]]) {throw [[]]; }");
tryItOut("return @foo;");
tryItOut("let (__proto__, __parent__ =  \"\" ) { L: <><x><y/></x></>; }");
tryItOut("M:while(( /x/ ) && 0){this.zzz.zzz;export __proto__; }");
tryItOut("/*infloop*/do continue L; while(3/0 | __parent__);");
tryItOut("/*infloop*/L:for(let ({ prop: prop\f, __iterator__: __iterator__ }) = ([((let (__proto__) <x><y/></x>) -= (undefined , <><x><y/></x></>))].some((-3/0).__defineSetter__)); (([11,12,13,14].map)(((prototype =  { export *; } .propertyIsEnumerable(\"__count__\"))++))); (Iterator())) return (({__proto__: 0.1 }));");
tryItOut("do {/*for..in*/for(var [__noSuchMethod__, __proto__] = (__noSuchMethod__ = constructor = @foo) in 1e4) yield;/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <x><y/></x>) yield; } while((((uneval( /x/ ))).unwatch(\"prototype\")) && 0);");
tryItOut("/*infloop*/do {return false += <x/>; } while((window.__lookupGetter__(\"constructor\").__noSuchMethod__ = __noSuchMethod__ =  /x/ ));");
tryItOut("export *;\ncontinue M;\n");
tryItOut("let (prototype = __parent__) { prototype, prototype; }\nbreak L;");
tryItOut("let (__proto__) { return <x/>; }switch(*::*) { default:  }");
tryItOut("if([__count__.prototype = __noSuchMethod__].filter(<><x><y/></x></>)) with(<><x><y/></x></>){throw <><x><y/></x></>; } else export *;");
tryItOut("/*infloop*/for(const [({ __count__: ({ __iterator__: ({ __proto__: [], constructor: [function::__parent__] }) }), prototype: prototype.prop })] = [1,,].__lookupSetter__(\"__iterator__\"); this; prop = @foo) {if([window]) {yield 0; } }");
tryItOut("each = <y><z/></y>;\n__proto__ = <y><z/></y>, __proto__;\n");
tryItOut("/*infloop*/M:for(const __noSuchMethod__ = ((prototype.valueOf(\"number\") for (__parent__ in  \"\" ) for (prop in constructor))); set%=this; constructor = __count__.throw(new ([[]])())) {<><x><y/></x></>; }");
tryItOut("try { let constructor = window, __proto__; } finally { export __proto__; } ");
tryItOut("function  __parent__ (constructor, prop) { return <x\t><y/></x>; } /*infloop*/for(__proto__; let (__noSuchMethod__) 1.3; gc()) {;<x/>; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in true) const __parent__, __proto__ = <x/>;return; }");
tryItOut("if(({__parent__:  ''  })) {((__proto__)\f.call).call } else  if (new ({}).hasOwnProperty((prototype = <x><y/></x>))) export *; else const __noSuchMethod__, constructor;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/do {yield; } while(prop.__noSuchMethod__ = let = 5.0000000000000000000000);");
tryItOut("/*for..in*/for(let __count__ in <x><y/></x>) <><x><y/></x></>;");
tryItOut("if((this++)) { if (function(id) { return id } >>> <x/> << #3={a:#3#}) if((1e81 >>= false)) { if (eval(\"constructor\", -3/0)) { } else return;}\nreturn __noSuchMethod__\nL: var prototype = constructor, __count__ = [1];} else /*for..in*/for(const __noSuchMethod__ = ({a2:z2}) ? this : 3.141592653589793 in __proto__) {throw true; }");
tryItOut("/*infloop*/L:for(__parent__; window; \n#1=[#1#]) continue ;");
tryItOut("M:if((function::__noSuchMethod__.__proto__ setter= (function ([y]) { })()) , ( /x/g )(prototype)()) /*infloop*/for(let constructor = this; 0.1; undefined) {export false;throw [[]]; }\n\t else  if ((new (false)(^\t) .@*:: __proto__+= /x/ ) ? <bbb xmlns=\"new false(1e-81)\"><!--yy--></bbb> : <><zzz>(1e-81.valueOf(\"number\"))</zzz></>) {[1,2,3,4].slice/*infloop*/for(var __proto__ = @foo; 3.141592653589793; <x><y/></x>) {throw *::*;var __count__, __noSuchMethod__; } } else {/*for..in*/M:for(const ({ __parent__: prototype, __count__: __noSuchMethod__ }) in 033) return;throw this; }");
tryItOut("/*infloop*/for((Number((<x><y/></x> .@*:: new Boolean(<x/>)))); ('fafafa'.replace(/a/g, (new Function(\"return true;\")))); window) var __noSuchMethod__;");
tryItOut("M:if(3.141592653589793[<x/>].hasOwnProperty(\"__noSuchMethod__\")) { } else ");
tryItOut("{yield [,,]; }");
tryItOut("/*for..in*/L:for(const [({ prototype: [], __count__: ({ prop: ({ __proto__: <ccc:ddd> </ccc:ddd>, constructor: __count__ }) }) }), __noSuchMethod__] = constructor.valueOf(\"number\") in *) {{} const __count__;throw window; }");
tryItOut("try { for(let y in []); } catch(prop) { let(function::__parent__ = <><x><y/></x></>) { ({}).__lookupGetter__ } finally { throw StopIteration; } ");
tryItOut("switch(let (__proto__, __iterator__) (<><x><y/></x></>.__proto__ = [1]) += (prototype)( \"\" )--) { case 0: return <x/>;continue ; }");
tryItOut("let prop = function(id) { return id }, __proto__ = this\n");
tryItOut("/*infloop*/for(__count__; 1e-81++ for each (__count__ in <x/>) for (__count__ in ({a2:z2})); Object(false)) {( set __parent__ __proto__ (__iterator__, __count__)<><x><y/></x></>);const constructor, __iterator__; }");
tryItOut("if((p={}, (p.z = (<x/>.isPrototypeOf(constructor)))())) { if (<x><y/></x>.throw(<x><y/></x>)) {let __count__ = <><x><y/></x></>;yield  /x/ ; } else {yield;break \n{} }}");
tryItOut("with\t(({ prop: __proto__, __iterator__: __count__ }) = __parent__)export *;");
tryItOut("constructor = prototype\n");
tryItOut("while((new eval(this)) && 0)\treturn <><x><y/></x></>;");
tryItOut("L:while((new Iterator(this)) && 0)gc()");
tryItOut("/*for..in*/for(const __count__([]) in 0.1) {{} }");
tryItOut("M:if((({ __parent__: __iterator__, prototype: __noSuchMethod__ }) = __noSuchMethod__ ? this.zzz.zzz : (__iterator__+=this))) (__noSuchMethod__.__noSuchMethod__ getter= (new Function(\"return  /x/ ;\")).prototype) else  if (yield <x><y/></x>) ");
tryItOut("/*infloop*/M:for(set; undefined; function(q) { return q; }) yield <><x><y/></x></>;");
tryItOut("export *\n");
tryItOut("{<zzz>function::constructor</zzz><!--yy--> }{if(window) {__iterator__ = 1e+81return; } else  if (undefined) {(prop); } else {( \"\" ); } }");
tryItOut("{do {ogc } while((<x><y/></x>) && 0);({ prop: ({ let: prototype, __count__:  ''  }), __iterator__: prop }); }");
tryItOut("continue L;");
tryItOut("/*infloop*/do {/*infloop*/for(let ({ __proto__: __parent__, __iterator__: __count__ }) = new (({}).hasOwnProperty).call(); constructor = <><x><y/></x></>; (__proto__ =  '' )) {gc() }if( '' ) { if ( '' ) function(q) { return q; } else return 1e+81;} } while((new [11,12,13,14].some.__defineSetter__(\"__count__\", function(q) { return q; })()));");
tryItOut("if(function(y) { yield y; ;; yield y; }) { } else  if (try { with({}) { return window\n; }  } catch(__proto__ if [15,16,17,18].\tsort(function  prototype (constructor) { return ({a1:1}) } , arguments)) { return; } catch(__proto__ if (function(){__proto__.__count__ = prototype;})()) { var __noSuchMethod__ = (new (#0=({constructor: @foo}))()), __count__ = new ([1,2,3,4].map)(<><x><y/></x></>,  '' ); } finally { with({}) throw __iterator__; } ) break M;");
tryItOut("export prop;\f");
tryItOut("/*for..in*/for(/*__parent__ in 4.");
tryItOut("if(constructor = <x><y/></x> .@ <x><y/></x>.(<><x><y/></x></>)) yield null; else  if (function(id) { return id } = <y><z/></y>) <><x><y/></x></>; else break ; const __proto__;");
tryItOut("do {yield;return; } while(((+@foo)++) && 0);");
tryItOut("switch(function(id) { return id }) { default: /*for..in*/for(var prototype = (new (*)([1], (-0))) in <y><z/></y>) {let prop;yield; }break; var __iterator__ = false, constructor;break;  }");
tryItOut("switch([,]) { default: break;  }");
tryItOut("/*infloop*/for(((this).call(<x><y/></x>, <><x><y/></x></>)); prototype = prototype; (@foo.unwatch(\"prototype\"))) 'haha'.split\nthrow false;\n");
tryItOut("/*infloop*/for(const __iterator__ = <><x><y/></x></> !== window; ([15,16,17,18].\tmap(*::*, ([*].some(Function)))); #2=({prototype: <y><z/></y>})) {}\n/*infloop*/for(<x><y/></x>; window; <x>\t<y/></x>) var prototype;continue ; const __proto__;");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = this ? prop = <><x><y/></x></> : prop in  '' ) {if( '' .prop) (this).__defineSetter__ else  if (__noSuchMethod__.__parent__ setter= /a/gi) @foo; }");
tryItOut("if(yield = __proto__) {if( \"\"  .@x:: [,,z1]) __parent__; else ; } else  if ((new (1 for (x in []))((1e+81)(), (yield)))) /*for..in*/for(prototype in let \n(__parent__ = @foo, __iterator__ =  '' )  /x/g ) {throw [[]];__noSuchMethod__ = <x><y/></x>; } else {{with(<x/>)__count__, __iterator__;with({prototype: <><x><y/></x></>})export *; }\n }");
tryItOut("/*for..in*/for(let [__parent__, prop] = <><x><y/></x><ccc:ddd><x><y/></x></ccc:ddd></> in <x><y/></x>) break ;");
tryItOut("yield;");
tryItOut("/*infloop*/while(<><xxx>{__parent__}</xxx></>){if(__noSuchMethod__) { if ((prototype = let (__parent__) ({prop: arguments }).yield)) {continue ;throw __iterator__; }} else {throw case 1: throw *;case undefined: break; gc()break; case 2: {}default: __proto__ = this;break; function(id) { return id };break; case 4: __proto__;break; let __proto__ =  \"\" ;;default: case (Number((let (prototype, prototype) <x/>),  \"\" )): break;  }\f }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__(({__proto__: ((uneval((__parent__ = __noSuchMethod__)))) })) in ({prototype: <>*::*</>.(* >>= window)})) {continue L;{gc(){} } }");
tryItOut("let(__proto__ = 5.0000000000000000000000 @ __parent__ |= @foo()) { function (__count__) { return (p={}, (p.z =  /x/ )()) } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in arguments) {}");
tryItOut("if(eval(\"export __proto__;\", (new RangeError()))) { if (({a2:z2})\n / (-->).call(__parent__, <><x><y/></x></>)) yield;} else \tif(new (new Function(\"(window);\"))()) {\rthrow window;yield; } else {break ; }");
tryItOut("L:with({__count__: String(__noSuchMethod__ = [11,12,13,14].sort).valueOf(\"number\")}){/*for..in*/M:for(var __iterator__ = (__proto__.__parent__ getter= ({}).__lookupGetter__) in [,,z1]) {var prototype = this; }/*infloop*/M:while( /* Comment */#1=[#1#])/*infloop*/do {throw true;gc() } while(<><x><y/></x></>); }");
