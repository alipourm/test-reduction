
tryItOut("/*infloop*/while(*::*){(true); }");
tryItOut("/*infloop*/do prop = 0.1, __proto__ = (-0); while((__parent__%=3.141592653589793(*, window) ^= (({ constructor: __iterator__, __proto__: __parent__ }) = __noSuchMethod__ =  '' )));/*\n*/switch(window) { case 4: break; {}break; default: export __noSuchMethod__;break;  }");
tryItOut("{break ;export prop; }");
tryItOut("/*infloop*/while(( for each (__parent__ in this) if ({return;x::__count__; }) ? (prop.hasOwnProperty(\"__iterator__\") , new (__count__)('fafafa'.replace(/a/g, (new Function(\"export prototype;\"))), null)) : eval(\"<x/>.eval(__proto__)\", 'fafafa'.replace(/a/g, function(y) { yield y; const constructor;; yield y; })\n))){(null); }");
tryItOut("if(false.eval(window)) var delete, __parent__; else  if ((uneval(false))) {\n__proto__ =  /x/ ; }");
tryItOut("L: {export prototype; }\nthrow *;\n");
tryItOut("{gc()/*infloop*/for(((function(q) { return q; })(#1#)); ((p={}, (p.z = <x><y/></x>)())).prop; true.isPrototypeOf(0x99)) {L:switch(<x><y/></x> >> 033) { case prop.(false): break; case 6: break;  } } }");
tryItOut("L: {if(({})) let __parent__, __proto__\n{const constructor = *::*, __noSuchMethod__ = @foo; } }\t");
tryItOut("L:do {do gc() while((window) && 0); } while((eval(\"/*infloop*/M:do __parent__; while(arguments);\", __iterator__ = constructor\f)) && 0);");
tryItOut("{@foo }");
tryItOut("if(.yoyo(#3={a:#3#})) { if (((this.__lookupSetter__(\"__parent__\") <= (__parent__.prototype = window))(yield =  /x/ .throw((<x><y/></x>)), ((undefined).__defineSetter__).apply(<><x><y/></x></>//h\n.watch(\"__proto__\", [1,2,3,4].slice), [<x><y/></x> for (yield [[1]]; in [,,z1])])))) {/*for..in*/L:for(const __proto__\n = <y><z/></y> in <x/>) {} } else M:with(prop){yield;export prototype; }}");
tryItOut("yield <!--yy-->; const constructor;");
tryItOut("switch(*::*) { case <y><z/></y>: export __count__;break; default:  }");
tryItOut("M:if(([11,12,13,14].sort)) {return; } else  if (new new (*::*)(<x><y/></x>)((__proto__ =  /x/g ))) {let __parent__ = 1e+81, prop; } else gc()");
tryItOut("with((1.3 if (window)))/*for..in*/L:for(var [prop, prototype] = <><x><y/></x></> in *) {throw ({a1:1}); }");
tryItOut("L:if((<y><z/></y>.*) if (null)) { if ((-0)) {export *\n } else return __parent__ = <><x><y/></x></>;}");
tryItOut("with({}) let(({ constructor: __parent__ }), [, __noSuchMethod__, , __count__]) { with({}) { yield ~1e4; } ");
tryItOut("gc()\nlet __proto__, prototype = 0/0\n\n");
tryItOut("L: switch((window.*)) { case 8: /*for..in*/for(__parent__.prototype in *.@*) {let prototype;/*for..in*/for([function::__count__, __parent__] = [z1,,] in [1,,]) continue ; } }");
tryItOut("if(__iterator__ = -3/0.hasOwnProperty(\"__proto__\")) { if ([] = [, , \t__proto__]\n) export __iterator__;} else ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in ) const __count__ = <>try { return ( \"\"  .@x:: *); } finally { return #1=[((<x/>)[true])]; } </>;");
tryItOut("if() { if ((delete <!--yy-->.eval([15,16,17,18].filter((this).__defineSetter__, 1.2e3)))) {let prop = <y><z/></y>, __parent__; }} else yield <y><z/></y>;");
tryItOut("if(window) yield <x><y/></x>;");
tryItOut("/*infloop*/M:for(var __count__; <x/>; this) {return; }return (yield 0);");
tryItOut("L: /*infloop*/for(var [, ] = false; this; function  __noSuchMethod__ (__count__, __parent__) { return <x><y/></x> } () | this.zzz.zzz) {export *; }");
tryItOut("__noSuchMethod__ = __iterator__, __noSuchMethod__;\nexport prop;\n");
tryItOut("L: prop");
tryItOut("M:with({function::__parent__: (function(id) { return id }.valueOf(\"number\").unwatch(\"__parent__\"))})yield <x/>;");
tryItOut("const prop, prototype = undefined;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__, constructor in (())((constructor |= this)(false && *) = (__proto__ = 033))) {{/*infloop*/for(-1 for (__parent__ in __iterator__, __noSuchMethod__ = <x/>); __iterator__[({})]; (function ([y]) { })(<><x><y/></x></>)) let __iterator__ = 1.3, __count__; } }");
tryItOut("/*infloop*/while(((null.prototype) ? ((p={}, (p.z = this)()) if (<><x><y/></x></>)) : )){; }");
tryItOut("const [prop, , prototype], __count__ = true\n__iterator__ = <x><y/></x>;");
tryItOut("switch(this.__defineGetter__(\"prototype\", [1,2,3,4].map)) { case (__count__ = 033 ? [,,] : undefined): break;  }");
tryItOut("{/*infloop*/L:while((((yield window)) for each (__noSuchMethod__ in *::*) for (__iterator__ in <x><y/></x>))){/*infloop*/for(var __count__ = prototype; this;  \"\" ) {<><x><y/></x></>;; }if( '' ) {return <><x><y/></x></>; } } }");
tryItOut("let (__parent__, __parent__) { while(((({__noSuchMethod__: ( '' .prop = <><x><y/></x></>)}))) && 0)with({}) try { return; } finally { gc() }  }");
tryItOut("yield [1,,]\n");
tryItOut("/*infloop*/M:for(var ({ __noSuchMethod__: ({ __proto__: ({ __iterator__: prototype }) }) })\t = (__count__ + *); (~<><x><y/></x></>.__count__); ({}.unwatch(\"prop\") for each (__noSuchMethod__ in <x><y/></x>) for (constructor in ({a1:1})))) const constructor =  \"\" , __iterator__ = <x><y/></x>;");
tryItOut(";\nyield;\n");
tryItOut("M:while((Array().eval(<x><y/></x>.__lookupSetter__(\"constructor\"))) && 0)if(constructor.__parent__ = <y><z/></y>) \f{yield true; } else return;");
tryItOut("/*infloop*/for(#1=({__proto__: ((null).watch).call(@foo, )}); [15,16,17,18].filter(Function, __count__.__parent__); window) {gc() }");
tryItOut("(arguments.__lookupSetter__(\"__count__\"));");
tryItOut("if(*::*) const __iterator__ = prop; else ");
tryItOut("prop = (({__noSuchMethod__ setter: function(q) { return q; }, __iterator__: <><x><y/></x></> }))");
tryItOut("/*for..in*/for(__iterator__ in (((1 for (x in [])))(__count__ ?  \"\"  : <x><y/></x>)))window");
tryItOut("const __parent__, __count__ = <x><y/></x>;");
tryItOut("return;");
tryItOut("/*infloop*/M:for(__iterator__;  /x/  ? <x/> : <x><y/></x>; __iterator__.__iterator__) {throw [z1,,]; }");
tryItOut("L:if(prop.(<><x><y/></x></>).propertyIsEnumerable(\"prototype\").eval(eval(\"#1=[#1#]\", .2))) {return <x/>; } else {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((undefined)(()) in <x/> + (this)[<y><z/></y>]) {throw <y><z/></y>;let constructor = null, prop;/*for..in*/for(((@foo)(prototype)) in ((__count__ = (new (<>this.__defineSetter__(\"[,,z1]\", @foo) && (p={}, (p.z = [1,,])())</>)(<><x><y/></x></>, {})))((p={}, (p.z = <x><y/></x>)()))))/*for..in*/for(var __parent__ = [,,] in false) return; }\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = [11,12,13,14].some % (window)[<><x><y/></x></>] in (((new Function(\"var prop, __count__;\")))())) {do {let __parent__ = ({}); } while((this) && 0); }");
tryItOut("/*infloop*/while((\n<x><y/></x>.( /x/ ).__count__)){let (prop = <><x><y\n/></x></>, __noSuchMethod__) { /*for..in*/M:for(let constructor = <x/> in *::*) {true; } }yield __count__; }");
tryItOut("L: yield;");
tryItOut("L: throw true;");
tryItOut("switch(constructor.__proto__) { case 9: export *;break; case 3: continue M;case *[constructor]: ; }");
tryItOut("if(__parent__) export *;");
tryItOut("/*infloop*/M:for(let ({ __iterator__: __noSuchMethod__, constructor: ({ prototype: [, ({ __count__: prototype(#3={a:#3#}), __proto__: ({ constructor: ({ __count__: ({ setter: __iterator__, constructor: __parent__ }) }) }) }), , __parent__, []] }) }) = (eval(\"M:switch((({ set constructor(__count__)[] }))) { case 5: break; case window: /*for..in*/for([__noSuchMethod__, prototype] = <><x><y/></x></> in [[]]) var __proto__;break;  }\", __iterator__)) != ().__defineSetter__(\"__proto__\", function(q) { return q; }); (([z1].watch(\"prop\", function  __count__ (constructor) { return <><x><y/></x></> } )))[(<y><z/></y>.propertyIsEnumerable(\"__count__\"))]; return.constructor) if((prop.__iterator__ = (uneval(prop)))) { if (({ __parent__: __iterator__ }) = ((prototype for each (__proto__ in <y><z/></y>)))) {export *; }} else yield ({});");
tryItOut("/*infloop*/while((yield  \"\" ).__lookupGetter__(\"__proto__\")){}");
tryItOut("L: while(((<x/>--)) && 0){{}throw prop; }");
tryItOut("/*infloop*/M:for(<x><y/></x> || true.__defineGetter__(\"__parent__\", eval); undefined; [__count__, , x::__count__] = <x><y/></x>.(prop)) L:with({__iterator__: *::*})export __count__;");
tryItOut("{ }");
tryItOut("prop = prototype;");
tryItOut("/*infloop*/for(let ({ __count__: ({ prop: __iterator__ }) }) = 1.3\n; ((yield [,,]) .@*:: ([,,z1] >= <x><y/></x>)); <{prop}></{prop}>) { }");
tryItOut("if(<x/>\t = ({constructor: prototype, constructor: undefined })) {const prototype = null; } else {;gc() }");
tryItOut("{if([__proto__ for each (__noSuchMethod__ in [])]) function () { yield *::* }  else  if ((1e-81 |= __iterator__)) {{} }let (prototype = *::*) { [1] } }");
tryItOut("throw [];");
tryItOut("{L:if(<><x><y/></x></>) { if ( '' ) return *; else continue ;}let (constructor, __noSuchMethod__) { continue L; } }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(prop = [,,z1] in -1) M:if(3) { if ( /x/g ) const prop = <><x><y/></x></>, __count__; else {export *;return <><x><y/></x></>; }}throw __parent__;");
tryItOut("with({}) { let((<y><z/></y>)(undefined), constructor) ((function(){throw __noSuchMethod__;})()); } ");
tryItOut("if((<zzz>0/0.unwatch(\t\"__noSuchMethod__\")</zzz>.\fvalueOf(\"number\"))) {gc()continue M; } else  if (prop[ \"\" ]) {gc }");
tryItOut("L:do /*infloop*/M:do {/*infloop*/while( \"\" ){continue M; } } while((continue L\n)); while((__parent__.__count__ getter= <x><y/></x>) && 0);");
tryItOut("gc()");
tryItOut("yield;");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = (-1).watch(\"__parent__\", 'haha'.split) in (let (constructor = <x><y/></x>) @foo)) return;");
tryItOut("L: { catch export __iterator__; }");
tryItOut("/*infloop*/for(const __proto__; void <{constructor}><x><y/></x></{constructor}>; ((1 for (x in []))(<x/>)).unwatch(\"prop\").__lookupGetter__(\"__iterator__\")) /*infloop*/for(({ prototype: __parent__ }) = ( /x/  == <y><z/></y>)\f.__lookupSetter__(\"__noSuchMethod__\"); ( \"\"  ? <x><y/></x> : window); [z1] <<= ({a2:z2})\n) {var __noSuchMethod__ = *::*;var function::__parent__ = (function ([y]) { })(), __parent__ = <x><y/></x>; }");
tryItOut("this.zzz.zzz;");
tryItOut("continue ; const __count__;");
tryItOut("for(let y in []);");
tryItOut("if(((new false()).yoyo(( /x/ )()))) {yield; } else {({ prototype: constructor }){} }");
tryItOut("let __count__ = <x><y/></x>");
tryItOut("while((* / <x/>) && 0){return;{function(id) { return id };return; } }");
tryItOut("while((__iterator__ *= <x><y/></x>) && 0)gc()");
tryItOut("try { this.zzz.zzz; } catch(prop) { try {  } finally { <x/>; }  } ");
tryItOut("/*infloop*/for(constructor; (<y><z/></y>); (function::__noSuchMethod__ = )) {export *;yield 033; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; <x><y/></x>.(<><x><y/></x></>); [15,16,17,18].sort( /x/g , new (prototype)(<x/>, *::*))) {yield;export __noSuchMethod__; }");
tryItOut("export __proto__;");
tryItOut("/*infloop*/do ; while(null , undefined);");
tryItOut("do {try { this.zzz.zzz; } catch(prototype) { return; } finally { prop = prop; }  } while((function(y) { yield y; <><x><y/></x></>;; yield y; }().__lookupGetter__(\"__noSuchMethod__\")) && 0);");
tryItOut("gc()");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] = ([, ({ __noSuchMethod__: prop, prop: __proto__ }), , ] = ({ __count__: [__parent__] })) in ((<><x><y/></x//h\n></>)[#1#])) throw __count__;");
tryItOut("while(((new (function(y) { yield y; break ;; yield y; })(<x/>, <x/>))) && 0)return [,];");
tryItOut("with({}) return;");
tryItOut("<y><z/></y> .. *::*, (#1=this) / \n \"\" ");
tryItOut("let (__noSuchMethod__) { if((<x/>.__lookupGetter__(\"__parent__\")) = constructor =  /x/g ) { if (<><zzz>({ constructor: __iterator__ }) = #3={a:#3#}</zzz></>) /*infloop*/M:for(prototype = <><x><y/></x></>; window; @foo) [1,2,3,4].map} else let constructor; }");
tryItOut("if(typeof this) __count__; else __proto__, prototype = ({a1:1});");
tryItOut("let (({ __count__: __iterator__, prototype: [, [__count__], __count__, ] }) = new String()) { /*for..in*/for(var prop = <x><y/></x> in null) {(1e-81); } }");
tryItOut("/*for..in*/for(const [prop, __iterator__] =  /x/  in __proto__) {const prototype = @foo;gc() }");
tryItOut("M:while((([,]['__proto__'] = __proto__ = <x><y/></x>)) && 0){L: {break L; } }");
tryItOut("/*infloop*/for(const constructor; !true; <x><y/></x>.@*) yield;");
tryItOut("throw StopIteration;");
tryItOut("if((<><x><y/></x></> - each).__defineSetter__(\"__iterator__\", (new Function(\"break ;\")))) { if (([].__lookupSetter__(\"prop\")))  else L:with({__parent__: function(q) { return q; }(({constructor: constructor.isPrototypeOf(__count__)}))})( '' );}");
tryItOut("if([15,16,17,18].filter(function (__noSuchMethod__) { yield <x/> * constructor } , {} - undefined)) { if (<x><y/></x>.__lookupGetter__(\"__noSuchMethod__\")) {;yield; }} else gc() const __count__;");
tryItOut("{break M;if(<><> </></>) {yield @foo; } else  if (__proto__ = ({__proto__ setter: Function })) {throw <><x><y/></x></>;M:switch( /x/g ) { default: break;  } } else {do {gc() } while((<><x><y/></x></>) && 0); } }");
tryItOut("M:if((prop = [1,,])[<><x><y/></x></> .@ this]) { if (<y><z/></y> > @foo)  else {export *; }}");
tryItOut("");
tryItOut("with(__iterator__ = __proto__.yoyo(undefined)){(<x><y/></x>); }");
tryItOut("{(__noSuchMethod__);/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in __iterator__) yield; }");
tryItOut("M:while((<x><y/></x>) && 0){export *; }");
tryItOut("if() export __noSuchMethod__; else  if ((<x><y/></x> >  /x/  for each (__iterator__ in ({a2:z2}))))  else \n{; }");
tryItOut("let (constructor, ({ __count__: ({ __iterator__: prototype }), __noSuchMethod__: prototype }) = function(y) { yield y; yield <><x><y/></x></>;; yield y; }.__defineSetter__(\"constructor\", ('haha'.split).apply)) { let (__noSuchMethod__) { null += prototype, <x><y/></x> } }");
tryItOut("L: continue ;\nwith({}) { let __proto__ = @foo; } \n");
tryItOut("export *;");
tryItOut("/*for..in*/for([__parent__, prop] = 033 % (p={}, (p.z = (yield ({a1:1})))()).__parent__ in (*.hasOwnProperty(\"__count__\")) ? <x><y/></x>.unwatch(\" /x/ \").isPrototypeOf(<><x><y/></x></>.__proto__ = <x><y/></x>) : 0.propertyIsEnumerable(\"__iterator__\")) /*for..in*/for(false in (((1 for (x in [])))((__noSuchMethod__.__lookupSetter__(\"__count__\"))))){export __count__;let getter; }");
tryItOut("with({}) { yield; } ");
tryItOut("/*for..in*/for(let constructor in (((String(@foo)).watch)(__noSuchMethod__))){\fif(<x/>) { if (<><x><y/></x></>) continue L; else {break L;false; }} }");
tryItOut("with(this)continue ;");
tryItOut("throw null;");
tryItOut("/*infloop*/while((new Array( '' .__defineSetter__(\"__iterator__\", null)).unwatch(\"__iterator__\")))switch(constructor.(<x><y/></x>)) { case 2: break; break;  }");
tryItOut("/*for..in*/for(__proto__.__parent__ in (new <><x><y/></x></>) = <y><z/></y> & 0x99) {/*for..in*/for(let constructor in ((function(y) { yield y; yield null\n;; yield y; })(new -1((uneval(({a1:1})))))))/*for..in*/for(const [prototype, constructor] = __count__.__defineGetter__(\"constructor\", [z1,,]) in <><x><y/></x></>) export *; }");
tryItOut("gc()");
tryItOut("if(prop+=1e+81) {return;new Function }");
tryItOut("{if(constructor, prop = (yield <y><z/></y>).hasOwnProperty(\"__noSuchMethod__\")) { if ([15,16,17,18].sort(eval, arguments)) {continue ;{} } else export *;} }");
tryItOut("let (prototype = yield prop.prototype getter= new Function, __count__) { {/*infloop*/while(this){gc()throw constructor; } } }");
tryItOut("throw [11,12,13,14].some;");
tryItOut("\nreturn [];");
tryItOut("");
tryItOut("export *;<x/>;");
tryItOut("/*infloop*/for(var this['__count__']; (1 for (x in []))(new false(<><x><y/></x></>).yoyo( { let constructor =  \"\" , __proto__; const prop; }  ? this : {}), <employee id=\"1\"><name>Joe</name><age>20</age></employee>); (Error())) {export *; }");
tryItOut("let(__parent__ = constructor) ((function(){let __iterator__ = <><x><y/></x></>;})());");
tryItOut("let(__proto__ = RegExp()) ((function(){/*infloop*/do /*infloop*/for(const __noSuchMethod__ = <x><y/></x>; <x><y/></x>; <y><z/></y>) export *; while(prototype.__noSuchMethod__%=<x><y/></x>.(<x><y/></x>));})());");
tryItOut("try { for(let y in [5,6,7,8]) throw <x><y/></x>; } catch(__count__) { let(constructor = (*::*( \"\" ))) ((function(){with({}) ;})()); } ");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/M:for(([({a2:z2})].map(*)); __proto__ ? ({a2:z2}) : 3; this.__defineGetter__(\"constructor\", function(y) { yield y; var __proto__, __count__ = 1e-81;; yield y; })) {/*for..in*/for(const [__count__, __parent__] = * in <><x><y/><\f/x></>) {throw <y><z/></y>;return *; }export prototype; }\f");
tryItOut("with(<x><y/></x> @ constructor){throw [z1,,]; }");
tryItOut("L:if((void true === prop.__iterator__ = *)) { if (undefined if (<x><y/></x>)) {(-0) }} else __noSuchMethod__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ([]['__iterator__']\f) in \n<x><y/></x>) this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("{return <><x><y/></x></>; }");
tryItOut("switch([({ each: __count__, prop: prototype }), ] = ((p={}, (p.z = window)()))) { default: break; break;  }");
tryItOut("/*infloop*/for(var __parent__; =.__defineSetter__(\"__count__\", <x/>); this .@ __count__) {break ; }");
tryItOut("/*for..in*/M:for");
tryItOut("/*infloop*/do { '' ; } while( /x/ ); const __proto__;");
tryItOut("__count__ = prototype;");
tryItOut("let(__iterator__) { throw StopIteration;");
tryItOut("throw prototype;");
tryItOut("/*infloop*/L:while(break L){break ;yield; }");
tryItOut("L: \t/*infloop*/L:while(((*::*)().__defineGetter__(\"prototype\", __count__) -=  /x/g  if (*::*)))0.1;");
tryItOut("L: {/*infloop*/while(return;){return; } }if(<y><z/></y>) return;");
tryItOut("L:while(((__parent__ =  \"\" )) && 0){let __iterator__;{} }");
tryItOut("{if([,]) export *; else  if (yield #1#) {export __count__; } else continue  (prop.__count__); }");
tryItOut("with({prop:  \"\" .*})L: {let ([], __iterator__) { yield; } }");
tryItOut("if([#3={a:#3#}.__lookupGetter__(\"__proto__\")].filter(function (__proto__) { return this } )) { if (__parent__.__count__ = (function ([y]) { })().valueOf(\"number\")) {if({([[1]]);; }) ({return;break ; }).apply else { /x/  }eval }} else {; }");
tryItOut("/*infloop*/M:while([15,16,17,18].some(Function, let (__proto__) window++)){;/*infloop*/for(const __iterator__ = __noSuchMethod__ = <x><y/></x>.yoyo(-3/0); (p={}, (p.z = __noSuchMethod__.__noSuchMethod__ = <x><y/></x>)()); yield *) {yield <x><y/></x>;var prototype = [[1]]; } }");
tryItOut("if(this) { if ( /* Comment */this.__defineGetter__(\"__count__\", true)) [1,2,3,4].slice} else export __parent__;");
tryItOut("/*infloop*/for(const ({ __iterator__: [__count__, ], __iterator__: [, , ({ __parent__: ({ prop: prop, __noSuchMethod__: prototype }), prototype: ({ __noSuchMethod__: prototype, __proto__: __proto__ }) }), [({ __count__: __noSuchMethod__ }), [__parent__, __noSuchMethod__, __proto__, prop, ]]] }) = -1; *::*; prototype = <x><y/></x>) if((__count__.get setter= Math.sin)) {return;break M; } else \t if ([1,2,3,4].map(<x/>, <x><y/></x>)) Function");
tryItOut("{/*infloop*/for(const __parent__; window.@*; (<x><y\t/></x> >> 1.2e3)) {return; } }");
tryItOut("yield @foo;");
tryItOut("{/*for..in*/for(let delete in #1=[#1#]) {return;prototype, __noSuchMethod__; }{gc() } }");
tryItOut("[1,2,3,4].slice");
tryItOut("continue ;");
tryItOut("with({set: ({constructor:  /x/g  })})(<y><z/></y>).applyyield <><x>/*\n*/<y/></x></>;");
tryItOut("L: yield <x/> instanceof <><x><y/></x></>;");
tryItOut("M:if(0.valueOf(\"number\")) { if (({__proto__: (*::* ? true : 1e+81.@*)})) {.2; } else {/*for..in*/for(const __parent__ in __iterator__) {export constructor;var __parent__ = null, __noSuchMethod__; } }}");
tryItOut("__noSuchMethod__");
tryItOut("M:while((<x><y/></x>) && 0)prop");
tryItOut("let ([({ __parent__: ({ prop: prototype, get: prop }) }), , ({ __iterator__: ({ __noSuchMethod__: ({ __count__: __proto__ }), __proto__: __iterator__ }) }), [, ({ __count__: ({ set: __parent__ }) }), ], ], prototype =  /x/g  += <x><y/></x>.eval( /* Comment */<y><z/></y>)) { L:while((<x><y/></x>) && 0){yield 3.141592653589793; }\n/*for..in*/for(__proto__ in ((Function)(<x><y/></x>)))(undefined);\n }");
tryItOut("if((window in *::*)) { if (--@foo.watch(\"__noSuchMethod__\", function(y) { yield y; return __noSuchMethod__;; yield y; }) >= prop.isPrototypeOf(<x><y/></x>)) {throw false;return [,,z1]; }} else export *;");
tryItOut("let (({ __parent__: [], prop: ({ __proto__: prop }) }) = prototype = constructor) { /*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in constructor) {const prop, prototype; } }");
tryItOut("with(yield <x><y/></x>)(<x><y/></x>);");
tryItOut("with( \"\" ){return this; }");
tryItOut(" /x/ \ncontinue \n");
tryItOut("L:switch(1e81) { case [1,,]:  }");
tryItOut("if(((__noSuchMethod__ = function::__iterator__)((@foo(__noSuchMethod__)), delete *::*)))  \"\" ;");
tryItOut("M:with(prop)prototype");
tryItOut("if(yield 0.1) 5.0000000000000000000000; else {continue M; }");
tryItOut("{with({__proto__: (--<x/>)})windowthrow <zzz>prop * __proto__</zzz>; }");
tryItOut("/*for..in*/for(let __count__.__parent__ in ((('fafafa'.replace(/a/g, (function::__iterator__ =  '' ))) >>>=[11,12,13,14].map)(3/0.yoyo(<x/>)))){yield <y><z/></y>;__parent__ }");
tryItOut("yield __count__.(((//h\nyield <y><z/></y>)));");
tryItOut("M:if(#1=({prop: ({a1:1})\t}) >>= (new ((this).watch)(true))) { if (__parent__) break ; else yield <><x><y/></x></>;}");
tryItOut("/*infloop*/do {return;\f__noSuchMethod__ = true; } while(prop[true]);");
tryItOut("/*for..in*/for([__noSuchMethod__, [<x/>] - <x/> << __count__] = *::*.__noSuchMethod__.__lookupSetter__(\"__noSuchMethod__\") in @foo) {return;return; }");
tryItOut("constructor");
tryItOut("/*infloop*/for(var constructor; ((__iterator__.__noSuchMethod__)--); [(\nRangeError((__count__ = #1#), <><x><y/></x></>))]) {if((\n<x><y/></x>)) { if (__parent__, __noSuchMethod__ <= *) { }} else {throw <y><z/></y>; } }");
tryItOut("M:if(false ? [15,16,17,18].some([1,2,3,4].slice, -1) : (constructor) = (this())) {const __iterator__, __proto__;return; } else  if (eval(\"0/0\", true).__noSuchMethod__) {{<x><y/></x>\f; }{} } else {continue L;/*for..in*/M:for(var __iterator__ = __count__ in __parent__)  }");
tryItOut("/*for..in*/for(const true['__count__'].__parent__ in *::*) {}");
tryItOut("return 3.141592653589793");
tryItOut("{for(let y in []);export *; }");
tryItOut("{while((<><x><y/></x></>) && 0){let __parent__;var __parent__, __count__ = false; }let __noSuchMethod__ =  /x/ , constructor = *::*;\ncontinue ;\n }");
tryItOut("{;export constructor; }");
tryItOut("let (constructor, __proto__) { /*infloop*/for((\n(__noSuchMethod__ = <y><z/></y>)); *.(__parent__ = constructor); function::__proto__ = prop) \n }");
tryItOut("let (__iterator__, __noSuchMethod__ = window) { if(<x><y/></x>) {export *; } else continue ; }");
tryItOut("{;/*for..in*/M:for(let constructor.__count__ in ((/a/gi)(this.__defineSetter__(\"__iterator__\", Function))))\t{with(this)export *; } }");
tryItOut("/*infloop*/L:do (new Function(\"export *;\")) while(<x/>;);");
tryItOut("/*for..in*/for(var (prop.( /x/g )) in ((({}).__lookupGetter__)( '' )))throw false;");
tryItOut("return;");
tryItOut("if(new new <x/>()) break L\nconstructor = [,];");
tryItOut("/*for..in*/L:for(let __proto__ = (*::*)((yield <y><z/></y>)) in (this.__defineGetter__(\"__count__\", ({}).__lookupGetter__))) {if([<x><y/></x>].sort('haha'.split)) throw this; else  if (<x/>.__defineGetter__(\"__parent__\", (new Function(\"continue M;\")))) {throw <><x><y/></x></>; } }");
tryItOut("{throw [,,z1];export *; }");
