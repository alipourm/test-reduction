tryItOut("return;");
tryItOut("{this.zzz.zzz; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(__noSuchMethod__ =  /x/ .__defineGetter__(\"__proto__\", ({}).hasOwnProperty)) { if ((__iterator__ = <x/>.unwatch(\"prop\"))) {return;var __iterator__, __noSuchMethod__ = <x/>; } else {prototype, __noSuchMethod__; }}");
tryItOut("if([constructor, __count__, __count__, ] = [[1,,]].map((function  __proto__ (__count__) { yield  /x/g  } ).call)) { if (eval(\"([ /x/g  for (<x><y/></x> in -0)])\", new (new Function(\"const __parent__;\"))(<x/>))) } else return [z1];");
tryItOut("/*infloop*/prop: __iterator__ = getter");
tryItOut("return void window;");
tryItOut("if(([1,2,3,4].map).call((-1), <><x><y/></x></>)) {} else  if (-1) return window; else {0.1;; }");
tryItOut("/*for..in*/for(constructor =  ''  in window) gc()");
tryItOut("return;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __parent__ }) = [ /x/g ].some(function (prop, constructor) { export *; } ) ? (true.valueOf(\"number\")) : (__noSuchMethod__+=window); <xxx>{__proto__}</xxx>.(this); .eval(3.141592653589793++ >>= prototype = constructor)) with( \"\"  << <x><y/\f></x>){throw 1e-81;L: export constructor; }");
tryItOut("if(([1] !== window.hasOwnProperty(\"__count__\"))) { if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>\n) {prop\n } else {{} }}");
tryItOut(" \"\" ;return *;");
tryItOut("<><x><y/></x></>");
tryItOut("if(this.zzz.zzz) ({}).hasOwnProperty else  if (new (eval)(({a2:z2})).__noSuchMethod__) /*for..in*//* nogeckoex bug 349964 */\f for  each((*)(window) in (( '' )[<x><y/></x>])) {[[]];prop = -1; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in 1.3)  }");
tryItOut("const prototype = <y><z/></y>;\n{}\n");
tryItOut("with(<y><z/></y>){}");
tryItOut("do {yield -1; } while((this.zzz.zzz) && 0);");
tryItOut("if(([undefined(<><x><y/></x></>) for each (__parent__ in function(id) { return id })])) { if (<>\t<x><y/></x>/*\n*/</> <= [__proto__ for each /*\n*/(__noSuchMethod__ in 1e4)]) {(({}).__lookupGetter__).callnew Function }} else {break ; }");
tryItOut("/*for..in*/for(var [__parent__, prototype] = yield new ( /x/ )(<y><z/></y>, (-1)) in <x/>) { }");
tryItOut("/*for..in*/for([prop, prop] = <y><z/></y> + <><x><y/></x></> in ((this).__defineSetter__)(<x><y/></x>)) yield  \"\" ");
tryItOut("constructor");
tryItOut("/*infloop*/for(__iterator__; true * eval(\"throw @foo;\", prop); [[1]] %= 033) {let (({ __count__: __iterator__, constructor: [, , , , prop] }) = prototype-=<><x><y/></x></>) { var __iterator__; }with(1e81){throw <x><y/></x>;let __parent__ = undefined; } }");
tryItOut("/*for..in*/M:for(let [__iterator__, prototype] = * >>= window in *) {return __parent__;return <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const prop; this; [[]]) export *;");
tryItOut("/*infloop*/M:do return; while((void (({}).__lookupGetter__).call(let = this, * != *::*, __proto__, __count__)));");
tryItOut("export constructor; const __proto__;");
tryItOut("let (__noSuchMethod__ = ('haha'.split).call) { if([] =  '' ) { if (yield (<x><y/></x>.(<x><y/></x>))) {export *;__noSuchMethod__; } else {export *; }} }");
tryItOut("eval(\".throw(<x/>.prop = [,])\", (@foo.__lookupGetter__(\"prototype\")--))");
tryItOut("while((-1.propertyIsEnumerable(\"__parent__\")) && 0)break L;");
tryItOut("{/*infloop*/for(<x><y/></x>; false; *) {gc()export let; }var __parent__; }");
tryItOut("if(arguments) {gc()prototype = <x/>, window = <x/>; } else  if ([,,]) {((-1)); }");
tryItOut("{; }");
tryItOut("if((<y><z/></y>.__proto__ = 0x99 for each ( get prop(({ __noSuchMethod__: __count__ }), __proto__) { return ({__iterator__ setter: eval, __iterator__:  '' .hasOwnProperty(\"prop\") }) }  in __noSuchMethod__) for each (__count__ in <x/>))) { if (3.141592653589793.hasOwnProperty(\"function::__iterator__\")) ; else prop;}");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __parent__] = (p={}, (p.z = prop =  '' .__lookupSetter__(\"prop\").__lookupGetter__(\"__proto__\"))()) in yield <x/>\n) {<><x><y/></x></>; }");
tryItOut("if(__count__ = 033) yield <x><y/></x>.propertyIsEnumerable(\"__iterator__\"); else  if (<><>(__iterator__ =  /x/g .unwatch(\"prototype\")).propertyIsEnumerable(\"__parent__\")</></>) {L:do gc() while(( '' ) && 0); }");
tryItOut("M:while((__noSuchMethod__ = @foo) && 0)/*for..in*/L:for(let constructor in <x><y/></x>) export *;");
tryItOut("L:if( { yield ([15,16,17,18].sort(__iterator__ = <><x><y/></x></>, <y><z/></y>())) } ) try { return; } catch(__proto__ if ((new Function( /x/g )))[(<x><y/></x>.*)][yield prototype]) { try { export prototype; } catch(__count__) { false; } finally { return; }  } catch(prop) { let(__parent__) { with({}) continue ; } finally { try { let `, __iterator__ = undefined; } catch(constructor) { (<!--yy-->); }  } ");
tryItOut("/*for..in*/for(var __iterator__(this) in ((/a/gi)(this.__defineSetter__(\"__count__\", function  __iterator__ () { export *; } ) &= ( '' .__defineGetter__(\"constructor\", ({}).__lookupGetter__))))){yield; }");
tryItOut("if((window != <y><z/></y>)) {{}export __count__; } else  if (this .@*:: function(id) { return id }) yield;");
tryItOut("/*infloop*/for(var constructor = *++; undefined > (<x/>) != @foo; ( \"\" .@*)) {return  \"\" ; }");
tryItOut("L: /*infloop*/do {gc() } while((delete 1e-81));");
tryItOut("/*infloop*/for(var prop; false; [,,z1]) yield 0/0;");
tryItOut("return;");
tryItOut("with({}) { export constructor; } ");
tryItOut("with( [1,,] ([15,16,17,18].sort((1 for (x in [])), new (window)(this)))){break ;{__noSuchMethod__ = prop, constructor = truebreak L; } }");
tryItOut("return (*);");
tryItOut("do let __iterator__, prop constructor; const prop; while((yield ~( /x/g  ? prototype : *::*)) && 0);");
tryItOut("{/*for..in*/M:for(let prototype = <x><y/></x> in <><x><y/></x></>) {yield *::*; } }");
tryItOut("/*infloop*/do {if(1e81) return; else  if (delete) {const __proto__ = <><x><y/></x></>;<x><y/></x> } } while((undefined >>> <y><z/></y>));");
tryItOut("/*for..in*/for(var __noSuchMethod__ = --x::__parent__ in __count__) {while((window) && 0){let __proto__ = <><x><y/></x></>;export delete; } }");
tryItOut("/*infloop*/while((1 for (x in []))())yield");
tryItOut("__iterator__ = __parent__;");
tryItOut("{yield;continue L/*\n*/; }");
tryItOut("do {export constructor; } while((break (033, *) , <><x><y/></x></> >>= #1=[#1#]) && 0);");
tryItOut("M:if(<><x><y/></x></> for each (prototype in <x><y/></x>)) { if (({prop setter: eval })) default: } else {gc()return <x><y/></x>; }");
tryItOut("");
tryItOut("export __iterator__");
tryItOut("/*infloop*/for(let prop; this; <y><z/></y>) {undefined;prop = 3/0, __proto__; } const __count__;");
tryItOut("{export *; }");
tryItOut("/*for..in*/for(let (<><x><y/></x></>)(({a1:1})) in (([1,2,3,4].slice)(this.zzz.zzz))){(<y><z/></y>); }");
tryItOut("L: {do export *; while(([15,16,17,18].filter([1,,], <x><y/>\f</x>\f).__lookupSetter__(\"prototype\")) && 0); }");
tryItOut("/*infloop*/do var prototype = <x><y/></x\t>, __noSuchMethod__; while(#0=[({__proto__:  /x/g })]);");
tryItOut("L:if(__proto__) {gc() } else {export __noSuchMethod__;/*for..in*/M:for(let ( { yield 0; } )(*) in (((new Function(\"\")))(([z1,,] ^=  '' )))){eval } }");
tryItOut("throw this; const x::constructor;");
tryItOut("{const __proto__ = <><x><y/></x></>;function  constructor (__parent__, constructor) { return __count__; }  }");
tryItOut("{ }");
tryItOut("/*infloop*/do /*for..in*/for(var __parent__ = new (<x><y/></x>)(__parent__ setter: Math.sin) in <x/>)  while()");
tryItOut("/*for..in*/for(let ({ __proto__: __parent__, __proto__: * }) in <x/>) {return; }");
tryItOut("if(window.propertyIsEnumerable(\"prototype\") | __parent__ = 4.) {/*infloop*/for(var constructor; \nwindow; <x><y/></x>.(1e4)) {gc() }yield = *, __iterator__ = <x><y/></x>; } else  if (new  /x/ () ? <><xxx>{__noSuchMethod__}</xxx></> ? <bbb xmlns=\"*::*\"></bbb>.((*::* instanceof  /x/ )).unwatch(\"prop\") :  /x/  : new gc(((this)[@foo]), __iterator__)) {yield ([prop, , , \r[__count__, , __iterator__, ]]); } else /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in window) return;");
tryItOut("yield #1=[#1#]");
tryItOut("with(){return <x/>;constructor; }");
tryItOut("/*infloop*/for(({ __noSuchMethod__: ({ constructor: ({ __iterator__: constructor }) }), __iterator__: ({ prototype: function::__parent__, prototype: ({ __count__: [({ prop: ({ __proto__: [, prototype] }), prototype: ({ __proto__: __iterator__, __parent__: ({ __iterator__: constructor, prop:  { yield -3/0 }  }) }) }), ({ prototype: prototype, __noSuchMethod__\f: prop })] }) }) }) = ; <x/>; ({ __count__: __noSuchMethod__, __iterator__: __parent__ }) = __parent__.__proto__ = (prototype = __iterator__)) {throw <y><z/></y>;let (constructor = <y><z/></y>.__parent__) { <y><z/></y>; } }");
tryItOut("");
tryItOut("default: /*infloop*/while(true){export *;continue ; }case prototype = yield  ''  += (<x><y/></x> ? 3.141592653589793 : {}): return;break; let (prototype = <><x><y/></x></>, __parent__ = null) { /*infloop*/for(null; function ([y]) { };  /x/g ) {return [,,]; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let function::prototype in 1.3) yield __iterator__;");
tryItOut("with({}) { return __parent__.__iterator__; } ");
tryItOut("/*infloop*/M:for(this ? <x/> : <x/>; prop.(<><x><y/></x></>); __count__ = <x><y/></x>) {return; }");
tryItOut("L:if((<y><z/></y>.__count__)()) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var ((prototype)(({a2:z2}))) in __iterator__ ^=  /x/g ) /*\n*/{return 1.2e3; } } else M:switch(window ^ -3/0) { default: __iterator__;break;  }");
tryItOut("{/*for..in*/L:for(__parent__ = [15,16,17,18].filter((this).watch, 0/0) in eval(\"<x><y/></x>\", [z1,,])) {if(__proto__ = this) const prop = <x/>; } }");
tryItOut("/*for..in*/for(__iterator__(({__noSuchMethod__ getter: Math.sin, prototype: ([<x/>].filter(1e+81)) })) in ({ get __count__(__iterator__, prototype) ''  }).__defineGetter__(\"__parent__\", function(y) { yield y; let constructor = <x/>;; yield y; })) {let prop = *::*; }");
tryItOut("switch([11,12,13,14].sort) { case 5: break; (*)\nexport *; }");
tryItOut("try { let(constructor) { yield; } finally {  if ( '' ) } ");
tryItOut("with({({ __proto__: __parent__ }): prop = <x><y/></x>});");
tryItOut("if(prototype += (uneval((uneval(<><x><y/></x></>))))) /*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in *) {yield prototype;\f } else  if (<><x><y/></x></>.propertyIsEnumerable(\"prop\")) ");
tryItOut("if(new #1=[#1#]()) { if (<bbb xmlns:ccc=\"(\n<><x><y/></x></>) + this .@*:: this.propertyIsEnumerable(\"__noSuchMethod__\")\"><ccc:eee></ccc:eee></bbb>) {{null = __count__;const prototype = __iterator__, __parent__; } }} else M:if((__iterator__ = *::*).*) { if (((uneval(__noSuchMethod__)))) /*for..in*/for(const prototype in __iterator__) {return <x><y/></x>; } else yield false\n/*infloop*/for(var prototype; <x><y/></x>; __count__) let prototype = *;}");
tryItOut("if((*::*.yoyo(<x><y/></x>).throw(window))) {return;export *; } else return <><x><y/></x></>;");
tryItOut("/*infloop*/for(const __count__; ([ ''  += this].filter(function(q) { return q; })); (<><x><y/></x></> || <x><y/></x>)) {yield <y><z/></y>;var __count__, each; } const prop;");
tryItOut("*::*");
tryItOut("return <x/>;");
tryItOut("return");
tryItOut("return;\nvoid ~;\n");
tryItOut("/*for..in*/for(const this in (yield <><x><y/></x></>)) {/*infloop*/while([1,,])var __count__, __iterator__;export *; }");
tryItOut("with(window){export prototype; }");
tryItOut("while((<><x><y/></x></>.@*) && 0)M:do {} while((window) && 0);");
tryItOut("return <><x><y/></x></>\nyield;");
tryItOut("/*for..in*/for(const __iterator__.__parent__ in [,,].prototype =  \"\" ) export *;");
tryItOut("/*for..in*/for(let [__parent__, __proto__] = new  \"\" .isPrototypeOf(<><x><y///h\n></x></>)() in 1.3) {(undefined); const constructor; }");
tryItOut("if(<bbb xmlns:ccc=\"4.\"><ccc:eee></ccc:eee></bbb>.((var __count__))) { if (this.__defineGetter__(\"__iterator__\",  /x/g ) instanceof \t) {\f; }} else {/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype in <x/>) {export __noSuchMethod__; } }");
tryItOut("M:if((constructor = <x><y/></x>)) { if ([<><x><y/></x>\f</> for each (__count__ in window)]) {let prop, __count__;return *; } else {export __noSuchMethod__; }}");
tryItOut("return;");
tryItOut("switch(\nwindow.throw(<xxx {prototype}={x::prototype} />)) { case constructor(1.2e3) = (({}).__lookupGetter__).call(window, @foo,  /x/g ): break; if((<><x><y/></x></> .. .2)) break; case -yield 0.1 .@*:: delete = [prop, , __iterator__, ]: /*infloop*/for(var prototype; *--.isPrototypeOf((new <x><y/></x>.__defineGetter__(\"__noSuchMethod__\", (new Function(\";\")))(new function (prototype, __count__) { (<><x><y/></x></>); } (4.), <x><y/></x>))); yield  /* Comment */<><x><y/></x></>) {/*infloop*/for(__count__ = ( /x/g .eval( \"\" )); __count__; *::*) ; }/*infloop*/while(__iterator__){if(false) {gc() } else  if (__noSuchMethod__) { } }case <y><z/></y> &= window: return <><x><y/></x></>;default: break; case 0: break; case 8: break;  }");
tryItOut("return 1e+81.isPrototypeOf(*::*);");
tryItOut("if(#1#) if(__proto__.propertyIsEnumerable(\"__count__\")) { if ((window)) (@foo);} else {{} } else  if (new (yield (-0))(new String(), (<><x><y/></x></>.__defineGetter__(\"__iterator__\", \ffunction  __noSuchMethod__ (get) { return; } )))) { } else let __parent__ = prototype, __count__;");
tryItOut("if((<y><z/></y>())) continue ; else  if (new Iterator(4., <y><z/></y>)) (prop); else {return null;continue ; }");
tryItOut("for(let y in [5,6,7,8]) with({}) return eval(\";\", __count__);");
tryItOut("__parent__ = constructor;");
tryItOut("for(let y in [5,6,7,8]) (1e+81); const function::__parent__;");
tryItOut("const __parent__, prop\n");
tryItOut("/*for..in*/L:for(var __parent__ = #1=<x/> in <x/>) if(<x><y/></x>) { if (3) {(<><x><y/></x></>);continue L; } else {export *;yield; }}");
tryItOut("if(__count__) { if ( /x/ .watch(\"__count__\", eval)) export __count__;} else ({ __parent__: __iterator__, __noSuchMethod__: __parent__ })");
tryItOut("with({__count__: <x/>--}){export *;return <x><y/></x>; }");
tryItOut("if( '' ) {<x><y/></x>; } else  if (__iterator__ = [,,z1]) {yield <x><y/></x>; }");
tryItOut("__iterator__ = prototype\n");
tryItOut("/*for..in*/for(__count__ in ((new Function)( '' )))function  __proto__ (prop, __proto__) { yield __count__ } ");
tryItOut("if(__count__ = (uneval(getter))) var prop; else return __parent__; const prototype;");
tryItOut("if(({ set: prototype }) = ({a2:z2}).@*) return  /* Comment */<x/>; else  if ( /x/  >> __iterator__) function (prop) { return <y><z/></y> }  else {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */continue L;");
tryItOut("if([15,16,17,18].map(gc, ((prop) = ( /* Comment */<><x><y/></x></>)))) return true\n");
tryItOut(" { switch(let (({ prop: __count__, <x><y/></x>: __iterator__ })) let (prop = <><x><y/></x></>) -3/0) { default: /*infloop*/for(const [, , constructor, ] = (new @foo / <x><y/></x>(#0=[<x><y/></x>].__lookupSetter__(\"__count__\"), <y><z/></y>)\t); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; ~<y><z/></y>) /*for..in*/for(__iterator__ = prop.prototype in this) const prototype = true, __proto__ = <x><y/></x>;break; case 0: with({__iterator__: 0/0}){{} }case 2: break; break; do {continue M;export *; } while((function ([y]) { }.@foo) && 0);case __parent__: /*infloop*/do { } while(M:if((prop = <employee id=\"1\"><name>Joe</name><age>20</age></employee> )) { if (yield <><x><y/></x></>) {export constructor; } else do {; } while((<x><y/></x>) && 0);});break; case new <x/>((<><x><y/></x></>)(*::*, this), *).valueOf(\"number\"): break; case [__noSuchMethod__: ([,].throw(5.0000000000000000000000))].sort(gc): M:if(<><x><y/></x></>.propertyIsEnumerable(\"prop\")) yield;break; {}break; case true.constructor =  '' : yield <><x><y/></x></>;break; case __parent__.__count__:  } } ");
tryItOut("L: {if(window) { if (({ __iterator__: __parent__, prototype: null })) {(@foo);prop = *::*; } else { }} }");
tryItOut("return ;");
tryItOut("gc()");
tryItOut("M:if(null) {/*infloop*/for((-1); prop;  /x/g ) {;gc() } for each (__parent__ in @foo) if ( \"\" ) } else  if (try { with({}) { __proto__ = __noSuchMethod__; }  } catch(__proto__) { __parent__ = __proto__; } finally { for(let y in []); } ) {{}export *; }");
tryItOut("throw __parent__;");
tryItOut("do /*for..in*/M:for(__proto__ = 0 in constructor) {const __count__ = 0; } while(((this.zzz.zzz)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in *::*) {return; }");
tryItOut("let prop, __iterator__ = true;\nwith(*::*){return <><x><y/></x></>;yield <x><y/></x>; }\n");
tryItOut("M:switch(<x><y/></x>) { case 0: yield 1e-81;break;  }");
tryItOut("switch((uneval(new ({}).__lookupGetter__( \"\" , 4.) > __iterator__ = __proto__))) { case +* for ((<><x><y/></x></>)( /x/ ) in <x><y/></x>) for (__proto__ in constructor) <= this: let (__noSuchMethod__ = *::*) { export __proto__; }break;  }");
tryItOut("M:if(prop =  /x/g ) { if ( /x/g .__defineGetter__(\"__proto__\", ({}).__lookupGetter__)) {return <x><y/></x>; }} else *::*");
tryItOut("/*infloop*/for(var constructor; eval; ((<x/> + ((this.zzz.zzz) >= this.zzz.zzz)).@*)) {M:while((__noSuchMethod__ = <x/>) && 0){return *::*; } }");
tryItOut("{const __noSuchMethod__; }");
tryItOut("with({__count__: ([11,12,13,14].some >>>=([,,z1].*) * undefined)})throw new (function () { yield <><x><y/></x></> } )(__iterator__, __parent__);");
tryItOut("/*infloop*/do throw <x/>; while(new (<x><y/></x>)(*::*));");
tryItOut("return <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in (-1)) undefined");
tryItOut("for(let y in []);");
tryItOut("L:if(033) /a/gi");
tryItOut("if(false.isPrototypeOf(window)) { if ((({ ({a2:z2}): constructor }) = -eval(\"false\", prop.prop))) __parent__ = __noSuchMethod__;} else throw StopIteration;");
tryItOut("if(window) const constructor; else  if (-3/0) const __noSuchMethod__; else {return; }@foo\n");
tryItOut("/*for..in*/(for)(/*(constructor) in <x/> *=  '' ) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in \tprototype === 0.1) let __iterator__;");
tryItOut("constructor = __count__;");
tryItOut("{gc() { yield Function() }  }");
tryItOut("L: {export __count__;__noSuchMethod__ }");
tryItOut("if(@foo) {export *; } else  if (-3/0) yield  /x/ ; else {__count__ = 0x99; }\nbreak ;");
tryItOut("if(__iterator__) constructor;");
tryItOut("/*infloop*/for((new (((*)[(yyy.(new function  constructor (__iterator__) { break ; } (<x/>)))]))()).watch(\"__parent__\", ( \"\" \n).apply); yield (this.zzz.zzz); ({__iterator__: yield 1e+81 > <x><y/></x>, __parent__ setter: (__count__ = ((__count__)[<x><y/></x>])).watch })) {L:if(null) 3;throw __parent__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in eval(\" for (__parent__ in <y><z/></y>)\", this.__defineSetter__(\"__noSuchMethod__\", function  prop () { return __count__ } ))) {0; }");
tryItOut("for(let y in [5,6,7,8]) throw __iterator__;");
tryItOut("yield; const __iterator__;");
tryItOut("/*for..in*/for(let function::__proto__ = (yield  for each (__noSuchMethod__ in true) - <x><y/></x>[+new (uneval(<x/>))]) in ((((/a/gi).call).call(new ((1 for (x in [])))(<x><y/></x>), eval(\"\", constructor))) ? <x/>.__defineGetter__(\"x::constructor\", (new Function(\"var __proto__ = this, constructor = <><x><y/></x></>;\"))) : !1.3.eval(__iterator__ = ( \"\" )))) /*infloop*/for(<><x><y/></x></> ? null : <><x><y/></x></>; function::__iterator__ =  /x/ ; ((+(function ([y]) { })() .@*:: <>\t<x><y/></x></>)++)) /*infloop*/L:do  while(<><x><y/></x></>.prototype = -3/0);");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] = __iterator__.propertyIsEnumerable(\"__count__\") in window) {gc()return @foo; }");
tryItOut("L: {const __proto__; }");
tryItOut("/*infloop*/for(const ({ __parent__: ({ __iterator__: \fconstructor }), __parent__: ({ prop: ({ prop: ({ __count__: ({ __parent__: __count__, __count__: __iterator__ }) }) }) }) }) = undefined.throw(#1#); (new ((1.2e3).watch).apply(0)); 'fafafa'.replace(/a/g, <>__iterator__</>)) {/*infloop*/for(var __count__; [z1]; *::*) yield; }");
tryItOut("yield;");
tryItOut("(yield @foo\nexport prototype;)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ __count__: prop }) in yield window) if((--<x><y/></x>)) { } else  if ((constructor = __proto__)) {yield yield <y><z/></y>;; } else {gc() }");
tryItOut("L:if((let (__parent__ = <x/>, __parent__) ().eval( /x/ .__lookupGetter__(\"__parent__\"))).hasOwnProperty(\"constructor\")) { if ((({ __proto__: prop, prop: __iterator__ }) = var __noSuchMethod__ = #3={a:#3#}, prototype)) {([1,2,3,4].slice).apply } else ;}");
tryItOut("");
tryItOut("/*for..in*/for(const __iterator__ = \r0 in 4.) gc()");
tryItOut("return;");
tryItOut("{{}export prototype; }");
tryItOut("/*for..in*/for(\tvar __parent__ in <x><y/></x>.(\t<x><y/></x>)) {yield  /x/ \nlet prototype; }");
tryItOut("/*infloop*/for(const prop; <><x><y/></x></>; prop) {gc() }");
tryItOut("let (__iterator__ = ((undefined)( /x/ ))) {  '' ; }");
tryItOut("yield <y><z/></y>;");
tryItOut("while((\f<><x><y/></x></>.__proto__) && 0){return 1e81;var constructor; }");
tryItOut("with({}) { yield true ? <x><y/></x> : window; } ");
tryItOut(";");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in (((__proto__ = ({ __noSuchMethod__: [, ({ constructor: try { var \fprop; } catch(__parent__) { (true); } , function::prop: /*\n*/constructor }), , ] })))((__parent__ =  /x/ )))){M:do prototype; while(((-1)) && 0); }");
tryItOut("with(delete (\n[,,z1]))prop");
tryItOut("try { __iterator__ = prop; } finally { yield; } ");
tryItOut("\fdo {; } while((({ set __count__ constructor (prop, __proto__) { yield function () { yield prototype }  } , __iterator__: @foo })) && 0);");
tryItOut("if((([15,16,17,18].filter((new Function(\"{}\")), function(id) { return id })).__defineSetter__)()) export __parent__; else  if (({prototype: ([new [1,2,3,4].map(__count__ =  /x/ , window) .@*:: ()])})) {export *; }");
tryItOut("if([,]) { if (this) var prototype;} else {return *; } const prop;");
tryItOut("with({__count__: __noSuchMethod__}){with(this){return;return; }function(y) { yield y; return  \"\" ;; yield y; } }");
tryItOut("if(constructor) { if (<x><y/></x> %= ({a1:1})) {gc }} else {throw true; }");
tryItOut("M:if([this.watch(\"__parent__\", ({}).hasOwnProperty).__defineGetter__(\"constructor\", eval)]) constructor, prop else  if ((( /x/g )(undefined >>>=window, __proto__ = )())) {let prop = window, __iterator__ = [z1,,];*::*; } else /*for..in*/for(prop = <y><z/></y> in prototype) throw __iterator__;");
tryItOut("{/a/giexport __parent__; }");
tryItOut("{return;with({__parent__: *::* <= __count__}){do {const prop = window, __noSuchMethod__; } while((window) && 0); } }");
tryItOut("/*infloop*/do <y><z/></y> while(-3/0);");
tryItOut("while(((<x><y/></x>)()) && 0){__iterator__ = prop; }");
tryItOut("(<><x><y/></x></>);");
tryItOut("export *;\n\n");
tryItOut("/*infloop*/do {throw  /x/g ;this; } while(undefined & [[1]]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in *::*) return;");
tryItOut("/*infloop*/for(const __parent__; * >>= <x/>.watch(\"__proto__\", <x><y/></x>); (__iterator__ = <y><z/></y>.*)) if(@foo) { if (this) {(<x><y/></x>); }} else {export *;gc() }");
tryItOut("let (prototype = null || <x><y/></x> / <y><z/></y> ^ <x/>) { /*infloop*/do 0.1; while(this.__defineGetter__(\"__noSuchMethod__\", Math.sin)); }");
tryItOut("/*for..in*/for(var %= in ((function  __iterator__ ([, \t({ __proto__: __iterator__, __proto__: __proto__ }), prototype]) { yield (let (prototype = @foo) __count__.__proto__ = (<><x><y/></x></>.isPrototypeOf(*::*))) } )(String())))/*for..in*/for(let __parent__ = <><x><y/></x></> in <x><y/></x>) {\f{} }");
tryItOut("with({}) { return prototype /= new (function (prop, __parent__) { return <><x><y/></x></> } )(<><x><y/></x></>,  '' ); } ");
tryItOut("with(false.__parent__ = RangeError(<x><y/></x>, @foo))return undefined;");
tryItOut("let (__noSuchMethod__ = [__proto__].filter((function  constructor (__parent__, __noSuchMethod__)1.3).call), __noSuchMethod__) { switch(([z1,,]())) { case (.__lookupGetter__(\"getter\")):  } }");
tryItOut("/*infloop*/for(const __noSuchMethod__; ({constructor: ({ __proto__: __parent__, __count__: function::prop }) =  '' .valueOf(\"number\"), __noSuchMethod__ setter: (new Function(\"yield this;\")) }); ++__proto__ = <x/>) {throw <><x><y/></x></>;yield; }");
tryItOut("M:do (false - @foo) while((((yield @foo)) !== prop = this) && 0);");
tryItOut("yield .2.throw((<><x><y/></x></> *= <x/>));");
tryItOut("if(true) var prototype = <x/>; else  if (<><x><y/></x></>) {;var prop; } else {throw \f<><x><y/></x></>;continue M; }");
tryItOut("L:if([(((uneval(null))) != prototype = constructor)]) return; else  if (__noSuchMethod__.valueOf(\"number\").__defineSetter__(\"__noSuchMethod__\", Math.sin)) {{} } else yield;");
tryItOut("/*for..in*/for(var [__count__, prop] = (void prop in <x/> .@ [] = prototype) in (@foo.eval( /x/  << false))) /*infloop*/do {0x99;export prototype; } while(((++!#1=[#1#]).*));");
