
tryItOut("/*infloop*/\tfor(var \f[] = ((((1 for (x in []))).call).call(*::*, ).constructor); \n__parent__; (yield <y><z/></y>.watch(\"x::__parent__\", <y><z/></y>))) {throw 4.;const __proto__ = false, __noSuchMethod__; }");
tryItOut("do {gc() } while((constructor ^= this.__lookupGetter__(\"prop\")) && 0)\t;");
tryItOut("/*infloop*/L:while((#3={a:#3#}(__proto__)))throw null;");
tryItOut("M:if(this.zzz.zzz) {; } else  if ((this .@*:: arguments)) M:if(false) {constructor = <x><y/></x>, __parent__;\f__parent__ = *; }");
tryItOut("/*for..in*/for(__proto__ in (((this.zzz.zzz).watch)((({__parent__: ({__iterator__ getter: 'haha'.split\t }) })))))@foo;");
tryItOut("L:if(5.0000000000000000000000) {; }");
tryItOut("/*for..in*/for(const [__iterator__, __noSuchMethod__] = <><x><y/></x></> in this) (<><x><y/></x></>);");
tryItOut("/*for..in*/for(let ([z1] for (__proto__ in 1e4)).__lookupGetter__/*\n*/(\"__count__\")['prototype'] in ((function (__parent__, ({ constructor: (__parent__ = false)['__noSuchMethod__'] })) { if(<x/>) {throw this;yield; } else  if (window) {gc()yield [,]; } else export *; } )(__iterator__.__proto__ getter= 'haha'.split))){/*for..in*/for(var constructor in __iterator__) const __noSuchMethod__, __noSuchMethod__ = arguments;gc() }");
tryItOut("gc()\n const __iterator__;");
tryItOut("export __parent__;");
tryItOut("/*for..in*/for([__iterator__, __count__] = * in <><x><y/></x></>) return;");
tryItOut("M:while(((({ __noSuchMethod__: export *; }) = (<y><z/></y>.valueOf(\"number\")))) && 0)/*for..in*/for([__proto__, __proto__] = this.__defineGetter__(\"function::__count__\", ({}).hasOwnProperty) in Function()) {const prototype = __parent__;; }");
tryItOut("/*infloop*/for( '' ; RangeError(1e4, <x/>); window.__defineSetter__(\"prop\", (1 for (x in [])))) {}");
tryItOut("/*infloop*/L:do gc() while(__parent__%=<><x><y/></x></>);");
tryItOut("with({__parent__: __proto__ = ({ get __noSuchMethod__() {  } , __parent__: __parent__ })}){with(new ({}).hasOwnProperty(<x><y/></x>) ? 0/0.@* : this.zzz.zzz){gc()\nlet prototype; } }");
tryItOut("let (\f<x><y/></x> = <x/>) { ; }");
tryItOut("/*infloop*/M:for(Array(); ({prototype: new (true)(__iterator__).__defineSetter__(\"__iterator__\", [1,2,3,4].map)}); [(*.isPrototypeOf(false))].sort((1 for (x in [])))) {/*infloop*/do {return; } while([]);export *; }");
tryItOut("/*infloop*/for((this.zzz.zzz); __iterator__.__parent__; __iterator__.prototype = <y><z/></y>) {return [1,,]; }");
tryItOut("/*infloop*/for(var __iterator__ =  /x/g ; (__noSuchMethod__ = <x><y/></x>); this) break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in (void (__count__.__count__ setter= ({}).hasOwnProperty))) /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in 0x99) {1e+81; }");
tryItOut("return; const __iterator__; const prototype;");
tryItOut("M:if(<><x><y/></x></>) {truelet __count__, __proto__ =  \"\" ; } else  if (window) {{} }\nthis;");
tryItOut("/*for..in*/L:for(let [__parent__, __proto__] = (__iterator__.prop getter= window) in (p={}, (p.z = <x/>)())) export *\n([z1]);");
tryItOut("throw @foo\n");
tryItOut("prop\n\n");
tryItOut("/*infloop*/for(const __parent__ = <x/>; @foo; <x><y/></x>) {prototype;let constructor; }");
tryItOut("if(3) (<y><z/></y>); else  if ((<x/>.__defineGetter__(\"__proto__\", function  __parent__ (__count__, __count__) { return  \"\"  } ))) break L;");
tryItOut("return  \"\" \nreturn;");
tryItOut("if(this.zzz.zzz) {break ; } else {switch(<x><y/></x> <<= <y><z/></y>) { case  /* Comment */*::*: break; prop = undefined;export prop;break; case 6: {} } }");
tryItOut("switch((new this({}) !== prototype.isPrototypeOf(<x><y/></x>))) { case new function  __iterator__ (__count__, __iterator__) { export *; } (): (<xxx {__iterator__}={<x><y/></x>} />).call }");
tryItOut("switch(4.) { case .2: break; case 9: default:  }");
tryItOut("yield;");
tryItOut("{L:while((__iterator__) && 0){let __noSuchMethod__, prop;; }<y><z/></y>; }");
tryItOut("M:(/if(*::*) { if ((__noSuchMethod__ <<=  \"\" )) (window); else return;}");
tryItOut("if([,,]) gc() else \r if (this) {break M; }");
tryItOut("L:with({__parent__: [15,16,17,18].filter(__iterator__, 1e+81) == ([<><x><y/></x></> if (<x/>)].filter\f((1 for (x in []))))}){;return 3; }");
tryItOut("{; }");
tryItOut("with(delete (new ((new Function(\"export prop;\")))()))var __proto__;");
tryItOut("switch(*) { default: const __parent__ = 4., prototype = prop;break;  }");
tryItOut("do {export *;; } while(({} for each (__proto__ in [1])) && 0);");
tryItOut("L: {(-0);return window; }");
tryItOut("/*infloop*/for(var ({ __proto__: ({ constructor: [, ] }), prototype: prototype }) = (undefined .. ({a2:z2})); 4..constructor = get = __proto__ = <x><y/></x>.(0/0); ( /x/g (<xxx {prop}={this.__defineGetter__(\"__proto__\", (4.).watch)} />))) {if((<x/>.valueOf(\"number\"))) return [1,,]; else  if ((String())) const __parent__ = __proto__; else { /x/ ;yield; } }");
tryItOut(";M:do function (__parent__) { return __proto__; }  while((([] = \n<y><z/></y>)) && 0);");
tryItOut("prop = (1 for (x in []))");
tryItOut("if(([undefined])) \f(<x><y/></x>);");
tryItOut("{*;const prototype = *; }");
tryItOut("if( /x/ ) {x::__noSuchMethod__ = function ([y]) { }, __parent__;M:if(((Iterator(<x><y/></x>, 1.2e3)) && <><x><y/></x></>.__defineGetter__(\"__count__\", (new Function(\"(<x><y/></x>);\"))))) {#1=[#1#];const __noSuchMethod__ = ({a1:1}), __iterator__; } else  if (constructor.__parent__ setter= function  prop (__proto__, constructor) { return <x><y/></x> } ) {(<x><y/></x>);if(\t<><x><y/></x></>) {gc(){} } } } else yield (([1,2,3,4].slice).apply).\fcall(try { export *; } catch(prop) { window; } finally { yield; } , );");
tryItOut("continue L;");
tryItOut("/*infloop*/M:for(({ __noSuchMethod__: __iterator__ }) = (constructor - <y><z/></y> | <x><y/></x>.unwatch(\"__proto__\")); (((({}).hasOwnProperty).call(constructor.prototype ?  ''  / * : (<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")), (eval(\"();\", this.__defineSetter__(\"__parent__\", (new Function(\";\"))))))))[new Exception(__noSuchMethod__,  /x/g )]; (new ([1,2,3,4].map)())) {let prop = function ([y]) { }; }");
tryItOut("if(window.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)) {return; } else  if (window |= window && this.zzz.zzz) {{} } else {yield *::*; }");
tryItOut("/*infloop*/for(let __parent__; (-0) + this; __noSuchMethod__) yield;");
tryItOut("let(constructor = <x><y/></x>, __count__ = <y><z/></y>) ((function(){throw *;})());");
tryItOut("var __iterator__;\nlet __proto__ = <><x><y/></x></>, constructor = <x/>;\n");
tryItOut("if((this.__defineSetter__(\"prop\", eval) || (constructor.__iterator__ && 'fafafa'.replace(/a/g, (*).watch)))) throw function ([y]) { }; else  if (\nwindow) {/*infloop*/for(let prop = prototype; this; #1=[#1#]) evalconst __noSuchMethod__ = __count__; }");
tryItOut("/*infloop*/while(this){gcconst __proto__, prop = <><x><y/></x></>; }\nM:while((prop) && 0){{}yield *::*; }");
tryItOut("/*for..in*/for(const constructor = <y><z/></y> in [[]]) continue L;");
tryItOut("let(__iterator__ = [15,16,17,18].map(Math.sin, ( /* Comment */ \"\" )), prop) ((function(){yield __parent__.__parent__ = <x><y/></x>;})());");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = set.(prototype = (try { break M; } finally { break ; } .yoyo(null))) in __noSuchMethod__) {var prototype;/*infloop*/M:for(<><x><y/></x></>.__parent__ = <x><y/></x>; this.__defineSetter__(\"__parent__\", [1,2,3,4].slice); [11,12,13,14].filter) return; }");
tryItOut("__iterator__ = prop;");
tryItOut("/*for..in*/M:for(prop in <>__parent__</>.valueOf(\"number\")) yield @foo;");
tryItOut("/*for..in*/for(( /x/ )( /x/ ) in ((Math.sin)('fafafa'.replace(/a/g, [1,,])))){var __noSuchMethod__; }");
tryItOut("/*infloop*/for(__iterator__ = #0=++<x><y/></x>; __iterator__.__count__ = <x/>; (5.0000000000000000000000) == __noSuchMethod__) switch(<y><z/></y>) { case 0: let prop = <x/>; }");
tryItOut("let (constructor) { {} }");
tryItOut("/*infloop*/M:for([({ prototype: prop, prototype: __proto__ }), constructor\t] = (<x/>.__lookupSetter__(\"__count__\").*) in <x><y/></x>.valueOf(\"number\"); prop ?  \"\"  : *::* >> ([<x><y/></x>]) + eval(\"null\", 1e4); (new (({}).hasOwnProperty)(<x/>( '' ))) - ({__count__: <y><z/></y>.watch(\"__iterator__\", (\ffalse).__defineSetter__).unwatch(\"constructor\"), prototype: prototype.__parent__ = window })) {export *;if(*.isPrototypeOf(*::*)) {L:do (<x><y/></x>); while(([]) && 0); } }");
tryItOut("\n");
tryItOut("return (<y><z/></y>.propertyIsEnumerable(\"__proto__\"));");
tryItOut("{let (__parent__) { Math.sin } }");
tryItOut("let prop, constructor\n");
tryItOut("/*for..in*/for(var __count__ in ((function(q) { return q; })(((\nwindow) instanceof false))))prototype");
tryItOut("/*for..in*/for(let __parent__ in ((eval)(eval(\"/*infloop*/do throw *::*; while(null !== true);\", [<x/>.hasOwnProperty(\"prop\")]))))if(null) { if ( '' ) {}} else {continue ; }//h\n");
tryItOut("with({}) throw StopIteration;");
tryItOut("for(let y in [5,6,7,8]) return window , <x/>;");
tryItOut("/*for..in*/\ffor(var [constructor.function::<x><y/></x>, __count__] = ({ __iterator__: __iterator__ }) = ({ __count__: __proto__ }) in new (<x><y/></x>.__lookupGetter__(\"prototype\")).watch(Array(window), let (__proto__, __proto__) prototype = <x/>)) {; }");
tryItOut("if(window) {@foo;(*::*); } else  if ( '' ) {M:if(<><x><y/></x></>) { if ((* = <x/>)) } else var prop = *::*, constructor =  '' ;const __parent__; }");
tryItOut("{M:with(constructor = 1e4)return;{/*infloop*/M:for(let __noSuchMethod__; ({}) ? 3/0 : *; [<><x><y/></x></>]) <x><y/></x>;var constructor; } }");
tryItOut("/*infloop*/while(new \fFunction(<y><z/></y>, <><{prop}> </{prop}></>))if(new __iterator__.(<x><y/></x>)( /* Comment */this)) const prototype, setter = [1,,]; else  if (new function (__count__) { return 3 } ()) gc()");
tryItOut("/*infloop*/M:for((new Iterator()); <y><z/></y>++; ({prop getter: /a/gi })) {/*for..in*/for(__count__ in *) ;yield; }");
tryItOut("{let __iterator__;let this; }");
tryItOut("if() { if (<><x><y/></x></>.valueOf(\"number\")\t) var true;} else ");
tryItOut("with({}) { let __count__, __noSuchMethod__; } ");
tryItOut("while((<><bbb xmlns:ccc=\"(__parent__.prop = (++yield undefined))\"><ccc:eee></ccc:eee></bbb></>) && 0)L:with({__noSuchMethod__: [1] |= prop}){var __parent__, __proto__; }");
tryItOut("with(<y><z/></y>)throw <x><y/></x>;");
tryItOut("{continue M;let __parent__ = <x/>, function::__parent__ = window; }");
tryItOut("{export *;{} }");
tryItOut("M:if(true) { if (<x/>) {((new Function(\"gc()\"))).call }} else let __count__, __parent__");
tryItOut("/*for..in*/for(const (new prop !== 5.0000000000000000000000)(this.__defineSetter__(\"__count__\", Math.sin) %= function  __parent__ () { yield [11,12,13,14].filter } ) in ((function () { return __iterator__ } )((this.zzz.zzz)))){M:switch(*::*.prop) { default: ( /x/ ); }let ([({ __parent__: ({ constructor: __noSuchMethod__ }) })]) { throw ({a2:z2}); } }");
tryItOut("while((<x/>) && 0)return 1e4;");
tryItOut("with({default: M:if(__count__.prototype = prototype) 'haha'.split else {1e+81;const constructor = __count__; }break; break; : ((eval)( /x/ ,  '' ))})yield true;");
tryItOut("/*infloop*/for(var __iterator__;  '' ; <x/>) {export *;return null; }");
tryItOut("with(undefined.__iterator__ = *::*.hasOwnProperty(\"__parent__\") && ((p={}, (p.z = [1,,]() |= (new <><x><y/></x></>(<\t><x><y/></x></>)))()))){/*infloop*/while(([this for (constructor in [[1]])])){yield;throw undefined; }\nvar constructor; }");
tryItOut("/*for..in*/for(let __count__ = [0x99 !=  /x/g ]\f *= <></> in (({prototype: __noSuchMethod__}))) __count__");
tryItOut("/*infloop*/do {( /x/g );export __iterator__; } while(typeof <x><y/></x>);");
tryItOut("/*infloop*/for(__proto__ = window || __iterator__; (<x><y/></x>.(<y><z/></y>)); const prop = constructor) \f;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in undefined) break M;");
tryItOut("{__count__ = __proto__; }");
tryItOut("throw StopIteration;");
tryItOut("yield");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = __count__//h\n = constructor in  \"\"  ^ this) {export prop;return [z1]; }");
tryItOut("L: /*for..in*/for(var [constructor, __proto__] = typeof -0 in default: continue L;break; {}function (__parent__, prop) { \f; } break; ) {window; }");
tryItOut("do {export let; } while(( '' ) && 0);");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*/for(var __proto__ in ((<y><z/></y>)((+<x><y/></x>)))){break L;/*infloop*/while(window){throw  \"\" ; } }");
tryItOut("/*for..in*/for(const [prop, prototype] = function(id) { return id } in [15,16,17,18].some(<><x><y/></x></>,  '' )) continue ;");
tryItOut("M:with(<><x><y/></x></> >>= <><x><y/>\t</x></>){continue L; }");
tryItOut("break M\nif(<x><y/></x>) { if (<><x><y/></x></>) } else constructor;");
tryItOut("L: {{} }");
tryItOut("/*infloop*/M:for(prototype; (<x><y/></x>.(((({}).__lookupGetter__).call).call)); *::*.__iterator__) {*::*;yield; }");
tryItOut("/*infloop*/for(__parent__; (+ \"\" ); __noSuchMethod__.prop getter= <><x><y/></x></>) {export prototype; }");
tryItOut("with(((++[])(__parent__.__noSuchMethod__ = (<y><z/></y> <<= <><x\t><y/></x></>), __iterator__)))");
tryItOut("/*infloop*/for(let __count__; ((<x/>.__lookupSetter__(\"__parent__\"))(({a2:z2}) <<= <x><y/></x>, <x><y/></x>)); [[11,12,13,14].sort].sort(Math.sin)) {\n(1e81);\nfunction (prototype, prop) { yield true } \n\n }");
tryItOut("__iterator__ = prototype;");
tryItOut("switch(<x><y/></x>) { default:  } const prop;");
tryItOut("{{} }");
tryItOut("{throw let (x::__iterator__ = <x><y/></x>, __count__ = <><x><y/></x></>) true;{export *; } }");
tryItOut("return");
tryItOut("let constructor = <x><y/></x>, __proto__ = undefined;");
tryItOut("if(0 <<= <x><y/></x>) { if ((new (function (constructor) { ; } )()) -= ({prototype: }).propertyIsEnumerable(\"__iterator__\")) {yield; } else {throw <y><z/></y>;{} }}");
tryItOut("with({}) ;");
tryItOut("with({__noSuchMethod__: yield <x><y/></x>})");
tryItOut("{}\nwindow\n\n");
tryItOut("if(<><x><y/></x></> << window) {(({a2:z2})); } else  if ((<x><y/></x>--)) return <><x><y/></x></>; else Function");
tryItOut("function () { yield -1 } return undefined;");
tryItOut("if(+ \"\" ) {throw 3/0;; }");
tryItOut("let(__noSuchMethod__ = __proto__, prop) { yield <x><y/></x> / <><x><y/></x></>;");
tryItOut("/*for..in*/forvar [__iterator__, prototype] = #1#.yoyo(arguments) in <x><y/></x>) <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = <x><y/></x>.__lookupSetter__(\"prototype\") in function ([y]) { }) let () { {} }");
tryItOut("/*for..in*/for(let __parent__ = let prop = 1e81 in undefined) __parent__");
tryItOut("/*infloop*/for(false; ([15,16,17,18].sort([1,2,3,4].slice, [__count__ instanceof <><x><y/></x></>].some(function  prototype () { yield <x><y/></x> } ) in (({__parent__: }) *= __iterator__.__iterator__ getter= [1,2,3,4].map))); (function  prop (constructor) { return this } )(false)) {gc()\nlet __iterator__ = <><x><y/></x></>, constructor = .2;(-3/0); }");
tryItOut("switch(__proto__()) { default: let(__proto__, prototype) { return <x><y/></x>; }");
tryItOut("{for(let y in []);/*infloop*/for(let __proto__; each(3/0)|= /* Comment */ \"\" ; <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(this.zzz.zzz)) {return\nif(<><x><y/></x></>) {throw <x/>; } else prop } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in #1#) {var __noSuchMethod__;throw __parent__: undefined; }");
tryItOut("L: {([1]).watch }");
tryItOut("M:if(3/0 |= * .@  \"\"  <<= <y><z/></y>) L: {gc() } else  if ([].hasOwnProperty(\"__proto__\")) /*infloop*/L:do {yield;var prop, this = <x/>; } while((-1) %= s);");
tryItOut("let (\n({ __parent__: [({ prop: [, , ], __proto__: __parent__ }), , prototype], prototype: constructor }) = ((typeof  ''  ? (__parent__.constructor = <y><z/></y>)-- :  /x/ ).__defineSetter__(\"prop\", Function))) { {__noSuchMethod__; } }");
tryItOut("var constructor;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = [z1,,] in <x/>) break ;");
tryItOut("with(3)return @foo;");
tryItOut("with((({constructor: __iterator__}))){return null;const __parent__ = null, __proto__; }");
tryItOut("/*infloop*/for(({ prop: __iterator__, __noSuchMethod__: constructor }) = *::*; null;  /x/ ) <bbb xmlns:ccc=\"prototype\"><ccc:eee></ccc:eee></bbb> \n");
tryItOut("L: {{const prop; }{} }");
tryItOut("L:with({__noSuchMethod__: this.__defineSetter__(\"prototype\", [({ prototype: __parent__ }), __parent__, constructor])}) const constructor;");
tryItOut("/*for..in*/L:for(const [prop, prototype] = (({__noSuchMethod__: (__count__.set setter= function(y) { yield y; (@foo);; yield y; }),  set __proto__(__noSuchMethod__)\neval })) in (__count__ = __noSuchMethod__ = prop)) { }\n");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {yield;if(prototype) Math.pow } while(__iterator__ = [15,16,17,18].filter(gc, ('fafafa'.replace(/a/g, function(q) { return q; }) .@x:: (window)[(<x/>.watch(\"__count__\", (function  prototype (__proto__, __noSuchMethod__) { return null } ).apply))])));");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(var prototype; window; <x/>) {let __count__ = <x/>;var __proto__ =  '' ; }\nbreak ;");
tryItOut("{(<y><z/></y>); }");
tryItOut("this.zzz.zzz;");
tryItOut("while(((prototype%=*).constructor = __parent__) && 0){yield <x/>;return [,]; }");
tryItOut("do { get ({ __proto__: ({ __noSuchMethod__: __noSuchMethod__ }) }) __iterator__ (__noSuchMethod__, constructor)prototype } while((new (<><x><y/></x></>)()) && 0);");
tryItOut("let([, , ] = ([15,16,17,18].filter([1,2,3,4].slice, 4.)), __proto__ = ([<><x><y/></x></>].map(prop))) { throw __iterator__;\nif(new ( \"\" )(this)\n) {(@foo); }\n");
tryItOut("with((undefined).apply.__noSuchMethod__)gc()");
tryItOut("with(0 in <x><y/></x>)function (__parent__) { return <y><z/></y> } ");
tryItOut("let (__parent__) { yield; }");
tryItOut("L:if(false) {var prototype;{} } else {var <><x><y/></x></> = <><x><y/></x></>;yield this; }");
tryItOut("/*for..in*/for(var [prop, prototype] = Math.sin in (yield window === __parent__)) switch(*::*) { case 3: return;case 7:  }");
tryItOut("/*for..in*/M:for(var [__count__, __parent__\t] = constructor in .2) {/*infloop*/for(__noSuchMethod__; *; \f({a2:z2})) yield *::*; }");
tryItOut("/*infloop*/for(({ __parent__: constructor }) = (new ((*::*).call)( /x/g .__defineGetter__(\"constructor\", this).valueOf(\"number\"), __proto__ = [,,z1])).watch(\"__parent__\", function  __proto__ ()eval(\"window\", *).throw(<><x><y/></x></>));  /x/ ; ((<x><\ty/></x>.throw(null)) % (let ([__count__, , __iterator__]) prototype.(this).*))) switch(__count__.__proto__) { case [null].filter(@foo): (<x/>).__defineSetter__break; break L;default:  }");
tryItOut("let (__iterator__) { [1,2,3,4].slice }");
tryItOut("export __noSuchMethod__");
tryItOut("const __parent__ = arguments, constructor = window;");
tryItOut("let([] = <x><y/></x>.__lookupSetter__(\"__count__\"), __count__ = <y><z/></y>) { let(__iterator__ = this) { continue L;if((yield __iterator__)) { if (\nprototype = <x/>) {[];export __iterator__; } else {yield; }}");
tryItOut("L:if(yield @ new false( /x/ ))  else return  \"\" ;");
tryItOut("throw __iterator__;");
tryItOut("(false);\nM:if((-3/0.__parent__ = __noSuchMethod__)) __iterator__; else <x><y/></\nx>;\n");
tryItOut("export *;");
tryItOut("if(__parent__) yield (4.)[constructor]; else  if ((__proto__\t = __noSuchMethod__ ^= __count__ = <x><y/></x>)) ( '' );throw  /x/g ;");
tryItOut("gc()");
tryItOut("let (__iterator__, __iterator__) { var __count__ = <y><z/></y>; }");
tryItOut("/*infloop*/for(/const __iterator__; null.*; new Function()) export __count__;");
tryItOut("yield [1,,];");
tryItOut("with(new ('haha'.split)((uneval(*::*)) + constructor @ this)){yield; }");
tryItOut("continue M;");
tryItOut("/*infloop*/for(new Number(*::*); @foo.valueOf(\"number\"); window.hasOwnProperty(\"__count__\")) {//h\nvar constructor;; }");
tryItOut("/*infloop*/L:while(++'fafafa'.replace(/a/g, *))break ;.2;");
tryItOut("if(this.__defineSetter__(\"__parent__\", new Function)) { if (this.__defineSetter__(\"__proto__\", gc)) { /x/g ; }} else {window;throw undefined; }");
tryItOut("/*infloop*/for(this.zzz.zzz; <x><y/></x>; RangeError(this)) {[[]];function () { return <><x><y/></x></> }  }");
tryItOut("/*infloop*/M:for( /x/g .__defineSetter__(\"__parent__\", (this).watch); __parent__.hasOwnProperty(\"constructor\"); *::*) {([z1,,]); }");
tryItOut("{throw *; }\n(<><x><y/></x></>);\n");
tryItOut("/*infloop*/L:for(let __count__;  \"\" ; null)  const __proto__\t;");
tryItOut("if(__noSuchMethod__.__proto__ = *::*.[((true = ({}))[(@foo >> false)]) for each (__count__ in <x/>) for each (__iterator__ in <x/>)]) { if ((__iterator__ = (yield <x/>))) {export *;; } else /*infloop*/for(*::* >> 3.141592653589793; prototype.__proto__; @foo <<  \"\" ) return ({});}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __parent__: /*\n*/[constructor] }) in (p={}, (p.z = window)())) {/*for..in*/L:for(var __count__.__iterator__ in this) ; }\n");
tryItOut("break ;");
tryItOut("if(<x/>) { if ([z1,,]) constructor; else }");
tryItOut("/*infloop*/for(let __proto__ = function::__noSuchMethod__; @foo; window) {; }");
tryItOut("/*for..in*/for([__iterator__, __noSuchMethod__] = new Date(((prop = *).throw(([ '' ].some(function (prototype)0x99)))),  /x/g  ? <><x><y/></x></> : function::prototype) in (let (constructor = <x/>) \flet (__iterator__ = <><x><y/></x></>, prop) (prototype.watch(\"<x><y/></x>\", Math.sin)))) /*infloop*/for(let __noSuchMethod__; \fthis; prototype) {var prototype = [z1,,];(null).__defineSetter__ }");
tryItOut("if(this.zzz.zzz) {throw \fthis;const prototype = window, prop; }");
tryItOut("{L: yield [1];(undefined); }");
tryItOut("L:with({__parent__: @foo for each (__count__ in this).hasOwnProperty(\"prop\")}){yield;if(('fafafa'.replace(/a/g, Math.pow))) { if ((<>__parent__</> for each (prop in <><x><y/></x></>)).watch(\"__noSuchMethod__\", gc)) {yield this; } else {(@foo);return; }} }");
tryItOut("/*infloop*/do const __parent__ = __proto__; while(false);");
tryItOut("while(((typeof <y><z/></y>)) && 0){if((function  prop (__count__)__iterator__)((uneval(<><x><y/></x></>)), <x><y/></x>)) return; else {/*for..in*/M:for(constructor in <x/>)  } }");
tryItOut("constructor = __count__;");
tryItOut("/*infloop*/while((let (__proto__ =  \"\" ) (null - ({a2:z2})))){__noSuchMethod__;yield  /x/g ; }\nreturn __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in window)  \"\" ;");
tryItOut("yield  /x/g ;/*infloop*/(let )__iterator__ = '[[]]@foo; *::*) /*");
tryItOut("gc()");
tryItOut("/*for..in*/for(let [[, ({ __proto__: constructor, __noSuchMethod__: [, , [, ({ constructor: __proto__, __parent__: [, prototype, ] }\f)]] })], __parent__] = (new [,,]( \"\" , __iterator__)) >= \n<><x><y/></x></>.prop = * in (__iterator__.constructor = <x/>)) {[1,2,3,4].mapwith({__parent__: prototype.(3.141592653589793).*}){yield *::*; } }");
tryItOut("/*infloop*/do { while(prototype = <x><y/></x>, __proto__);");
tryItOut("export *;");
tryItOut("with((new function(q) { return q; }(this().eval(<y><z/></y> >> this))))with( \"\" ){{}gc() }");
