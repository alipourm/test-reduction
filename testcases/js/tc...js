tryItOut("export __proto__");
tryItOut("if(<x><y/></x>) {<><x><y/></x></>;gc() } else {return; }\n{yield 1e-81;var __iterator__ = window; }/*infloop*/L:while((){gc() }\n");
tryItOut("M:switch((-0)--) { <><x><y/></x></>.prototype }");
tryItOut("if([15,16,17,18].map(gc, 4.)) { if (new RangeError()) window;} else {\fcontinue ; }");
tryItOut("while((__noSuchMethod__) && 0)break L;");
tryItOut("/*infloop*/while(this.__defineSetter__(\"constructor\", [1,2,3,4].map))yield;");
tryItOut("if(({ set __count__()(((<><x><y/></x></>.yoyo(null)))(eval(\"(this);\", *::*))) })) M:if((function ([y]) { })()) (*); else  if (*) continue M; else {return; }\n else {prop = <><x><\ty/></x></>; }");
tryItOut("/*for..in*/for(var ({ __noSuchMethod__: __noSuchMethod__ }) in true) {let __noSuchMethod__ =  \"\" ;return; }");
tryItOut("/*infloop*/M:while((prop = window >> __count__.eval(*::*) >> (__noSuchMethod__ = __count__ = __iterator__)))/*for..in*/for(let __noSuchMethod__ = <><x><y/></x></> & window in <y><z/></y>) break M;");
tryItOut("with((p={}, (p.z = undefined ^ 1e+81.__lookupGetter__(\"__noSuchMethod__\"))()))true;");
tryItOut("if( /x/g ) { if (window) throw @foo;} else {return <><x><y/></x></>;const __iterator__ = this, constructor; }with({__iterator__: [,,z1]})continue ;");
tryItOut("if(<><x><y/></x></>) let __noSuchMethod__ = <><x><y/></x></>, prop;");
tryItOut("M:do gc() const __proto__;\t while(( /x/ ) && 0);");
tryItOut("/*for..in*/for(const constructor in ((Function)(prop))){throw window; }");
tryItOut("L:with( /* Comment */__iterator__ =  /x/g )/*for..in*/M:for(constructor = <></> in <x/>) {Math.pow } const __count__;");
tryItOut("M:if((({get: *::*}\f))) {/*infloop*/L:while( /x/ )throw @foo; } else  if (window) /*infloop*/do try { yield ((window).__defineSetter__)(__noSuchMethod__, true) *= [1,,]; } finally { throw <><x><y/></x></>; }  while(yield this.zzz.zzz);");
tryItOut("{yield *::*; }");
tryItOut(" const __iterator__;");
tryItOut("gc()\n/*infloop*/for(const __parent__; true == [,,]; <x><y/></x>) let __noSuchMethod__, constructor;");
tryItOut("throw prop;");
tryItOut("/*infloop*/do {continue ;\n;\n } while(-3/0\n);");
tryItOut("/*for..in*/for(let (__iterator__ .@*:: __iterator__)(<x><y/></x> | *::*) in ((function  prop ([((constructor++))(this), this.yoyo( \"\" ), [({ __proto__: constructor }), constructor], __count__], __noSuchMethod__) { if(0/0) {if( '' ) throw <x/>;var constructor = <x><y/></x>, prototype = __parent__; } } )((__iterator__.__iterator__ =  \"\" .throw((setter)) if (++<><x><y/></x></> @ 3/0 == eval(\"return 3/0;\", [,,z1])))))){if(new ((Function).call(<x><y/></x>, 5.0000000000000000000000))(((__parent__)[undefined]))) { if (3) {;var __iterator__, __iterator__; }} else {const __count__ = false, constructor = [1];function ([y]) { }; } }\t");
tryItOut("while((0/0) && 0)*;");
tryItOut("/*infloop*/M:for(const ({ constructor: ({ prototype: [prop, , constructor], __noSuchMethod__: constructor.prototype }), prop: ({ __proto__: ({ __iterator__: [] }), __proto__: (0x99)(<x><y/></x>, .2) }) }) = ([,,z1]++).__lookupGetter__(\"prototype\").__lookupGetter__(\"prototype\"); #1=[#1#](*); ) {return 1.3\n }");
tryItOut("/*infloop*/for(false.yoyo(undefined); constructor === __parent__; [,,z1]) /*for..in*/for(const prop = prototype in <><x><y/></x></>) {gc() }");
tryItOut("switch((p={}, (p.z =  /x/g )())) { default: (0x99); }");
tryItOut("while((*) && 0)(<x><y/></x>);");
tryItOut("L: {/*for..in*/for(const [__iterator__, constructor] = <><x><y/></x></> in window) ; } const __proto__;");
tryItOut("if(new true) { if (<x><y/></x> = 033.propertyIsEnumerable(\"__parent__\")\f) constructor =  /x/g , __parent__ =  /x/ ;} else {}");
tryItOut("let (__noSuchMethod__, __iterator__) { export *; }");
tryItOut("/*infloop*/L:do {/*infloop*/for(prop = <y><z/></y>\n; __count__.constructor <= (new Error(this, __parent__)); <x/>) prototype } while(1e81);");
tryItOut("/*infloop*/for(const __iterator__; *.__lookupSetter__(\"__count__\") >>>= /x/g --; <x/>) {return __noSuchMethod__ = constructor;const __count__, __proto__ = 3/0; }");
tryItOut("if((new Boolean())) <><x><y/></x></>; else  if (( /x/g  <<= 3)) {__parent__, constructor;if() export prototype; else  if (({__iterator__:  /x/ })) {return constructor; } }");
tryItOut("switch((++ /x/g  <= 3.141592653589793.eval((({constructor: window }))))) { case 2: break; case 4: break; default: break; [1,2,3,4].slicebreak; export *;break; case this.__defineSetter__(\"__parent__\", /a/gi): /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in this) {{}break L; }case (<x/>++): /*for..in*/for(let [__parent__, __parent__] = (<><x><y/></x></>.__defineGetter__(\"__count__\", new Function)) in <><x><y/></x></>) {gc()throw prototype; }case __count__: break;  }");
tryItOut("/*for..in*/for(__count__ in (('haha'.split)(this / <><x><y/></x></>)))if([11,12,13,14].some) {yield; \"\" ; } else  if ((0.1.__lookupGetter__(\"__proto__: __parent__\"))) var __iterator__, __noSuchMethod__ = window\n/*infloop*/for(let function::prop =  '' ; <x><y/></x>; *::*.__iterator__ =  \"\" \f) {prop; }");
tryItOut("let (__count__ = <><x><y/></x></>) { yield; }");
tryItOut("/*infloop*/M:for\f(var prop; false; ) {with(<y><z/></y>[__noSuchMethod__]){__count__let __proto__; } }");
tryItOut("switch(let (prop = 3.141592653589793, prop = #1#) __iterator__) { default:  }\n{}\n");
tryItOut("if((new (__count__.__proto__ = true++).__defineGetter__(\"__count__\", ([1,2,3,4].slice).call//h\n)())) { if ((5.0000000000000000000000).watch) {yield\nM:do (constructor); while((@foo) && 0); }} else {if([<><x><y/></x></> ? false : null.prop]) { if (--<><x><y/></x></>) {(0); } else var prop = 033;}__noSuchMethod__ = <y><z/></y>, __count__ =  '' ; }");
tryItOut("try { function () { return *::* }  } catch(__noSuchMethod__) { yield (-1); } ");
tryItOut("__iterator__ = prop;");
tryItOut("/*infloop*/L:for(var ({ __count__: yyy, __count__ }) = (<y><z/></y>.__iterator__)[__parent__ += <x><y/></x>]; (new ((eval(\"let __noSuchMethod__ =  /x/g ;\", )))(__parent__((<x><y/></x>.__defineSetter__(\"__count__\", true)\r)) = delete delete <><x><y/></x></>, __noSuchMethod__.__proto__ = <y><z/></y>)); this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split)) {/*for..in*/for(const __parent__ =  /x/g  in prototype) {window;export prop; }/*infloop*/while(__iterator__) }");
tryItOut("L:with({constructor: <><ccc:ddd>yyy</ccc:ddd></>})function(q) { return q; }");
tryItOut("/*for..in*/for(let __proto__ in ((function (__iterator__)<y><z/></y>)((<x><y/></x>)(null))))const __parent__, constructor;");
tryItOut("/*for..in*/for(const constructor = 'fafafa'.replace(/a/g, (*::*).apply) in gc(<x><y/></x>, -0)) {for(let y in [5,6,7,8])  }\n((<x><y/></x>( for each (__proto__ in <x><y/></x>))));\n");
tryItOut("throw function::prop;");
tryItOut("/*infloop*/for(__iterator__; [[1]];  /x/ ) return;");
tryItOut("undefined;\nlet __count__ = *, __count__;\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {(null) } while(((p={}, (p.z = <><x><y/></x></>)()))(function () { return 033 }  | prop));");
tryItOut("M\t:with({__iterator__: <y><z/></y>}){__count__ = __noSuchMethod__; }");
tryItOut("/*for..in*/for(let ({ prop: ({ __parent__: constructor, __iterator__: __iterator__ }), constructor: __iterator__ }) in eval(\"return;\", constructor = <x><y/></x>)) /*for..in*/M:for(const <x><y/></x> in (((window).watch)(__iterator__ = __count__))){let constructor = <x/>; }");
tryItOut("/*infloop*/for((yield); ((<employee id=\"1\"><name>Joe</name><age>20</age></employee>)[<x/>]); window) let constructor = null, __parent__;yield <x><y/></x>;");
tryItOut("while((({a2:z2})) && 0):");
tryItOut("throw StopIteration;");
tryItOut("if([[1]].isPrototypeOf(window)) {export *;const __noSuchMethod__; } else  if (('fafafa'.replace(/a/g, Function))) {yield  /x/g ;throw ({a1:1}); }");
tryItOut("export *");
tryItOut("/*infloop*/for(let __noSuchMethod__ = <x/> <= <><x><y/></x></>; this.zzz.zzz; <><x><y/></x></>) {yield  '' ; }");
tryItOut("L:while((false) && 0)let __noSuchMethod__ = <><x><y/></\fx></>, __proto__;yield <x><y/></x>;");
tryItOut("/*infloop*/M:do {yield;; } while(<x><y/></x>);");
tryItOut("with({}) { [[]]; } ");
tryItOut("{{const constructor = <x><y/></x>, __iterator__;var __count__ = @foo; } }\n");
tryItOut("do {yield;yield  /x/ ; } while((__proto__) && 0);");
tryItOut("export *");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let try {  } finally { constructor; }  in ((Function)(<x><y/></x>\n)))with({__proto__:  '' }){(<><x><y/></x></>); }");
tryItOut("if((/a/gi).call( '' ,  '' )) { if (new ((1 for (x in [])))(@foo, 0) * 3/0) yield;} else {gc()window; }\nwith({prototype: (1e+81.__lookupGetter__(\"prototype\"))})export *;");
tryItOut("if(@foo) {return *::*; }");
tryItOut("export prototype;");
tryItOut("with(((window).watch).*)yield;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(<xxx {constructor}={__noSuchMethod__} \f/>.(this.propertyIsEnumerable(\"prototype\"))){continue \ncontinue ;var __iterator__; }");
tryItOut("/*for..in*/for(let __parent__ in [[1]]) yield;");
tryItOut("return <y><z/></y>;");
tryItOut("return <y><z/></y>;");
tryItOut("/*infloop*/M:for([11,12,13,14].sort;  /x/g ; ([15,16,17,18].sort(<><x><y/></x></>, window.eval(@foo)))) {prototype.(<x/>); }");
tryItOut("yield new ((new Function(\"while((1e-81) && 0){*::* }\")))(constructor.__proto__ = *, window.hasOwnProperty(\"prop\"));");
tryItOut("let (({ __proto__: ({ __proto__: [, ] }), __proto__: ({ __parent__: ({ __iterator__: ({ prop: __proto__.prop }), __noSuchMethod__: ({ __count__: [, , , __parent__, ], constructor: __iterator__ }) }) }) }), __count__) { /*infloop*/M:for(const ({ constructor: ({ __count__: [, __noSuchMethod__, , ] }) }) = ({__count__: <><x><y/></x></>}); (__iterator__ = true); __proto__ = undefined) {if(__iterator__) throw __iterator__; else  if (*::*) {gcyield; }*::*; } }");
tryItOut("M:with({__count__: constructor})return <x><y/></x>;");
tryItOut("for(let y in [5,6,7,8]) try { throw *::*; } catch(prop) {  } finally { ; } ");
tryItOut("gc()");
tryItOut("if(__parent__ = __count__) { if ((<{__iterator__}><x><y/></x><ccc:ddd>yyy</ccc:ddd></{__iterator__}>.(window))) {if(constructor) {export __proto__;var __noSuchMethod__, __noSuchMethod__ = <y><z/></y>; } else return prototype;throw this; } else return;}\nyield \t(* ? function ([y]) { } : null);\n");
tryItOut("/*infloop*/for(const __proto__; eval(\"window\", __count__).propertyIsEnumerable(\"prop\");  /x/ ) {/*infloop*/while(this){yield; }gc() }");
tryItOut("while((<x><y/></x>.valueOf(\"number\") ^=  /* Comment */this) && 0){yield <><x><y/></x></>;let (prop = <x/>\f) { const __proto__ = __parent__; } }");
tryItOut("/*for..in*/M:for(var __iterator__.prop in ((function () { yield <x/>.__noSuchMethod__ = ({a2:z2}) } )( /x/ )))'haha'.splitgc()");
tryItOut("L: {yield;{/*for..in*/for(const __noSuchMethod__ = ({}) in true) {} } }");
tryItOut("/*for..in*/for(__iterator__ in (([1,2,3,4].map)(this)))export *;");
tryItOut("if(window = @foo === 1e4) { if (new  \"\" ) {return -0.__lookupSetter__(\"prototype\");if((__proto__.__defineSetter__(\"__iterator__\", (this).watch))) { if ((undefined)[ '' ]) {export *; } else break M;} } else return @foo;}");
tryItOut("if( /x/g  .. [,,]\t) { if (({__parent__: __noSuchMethod__ =  /x/  })) return;} else {let (__count__, __noSuchMethod__) {  }constructor = __noSuchMethod__ }");
tryItOut("throw __iterator__;");
tryItOut("if( \"\" ) {export *;const __proto__ = <x><y/></x>, prototype; } else \f{export __iterator__; }");
tryItOut("return;");
tryItOut("\n;");
tryItOut("M:if(this.__defineGetter__(\"prop\", (__noSuchMethod__).watch)\t) {let __proto__;gc() } else  if ([__parent__ for (function::prototype in undefined)]) {return *::*; } else @foo;");
tryItOut("{{ }/*infloop*/while((new (1e-81)(<x/>, window))){gc() } }");
tryItOut("if(prop-=let (__count__) (.2)[[,]]) { if (typeof (<x><y/></x>.throw(<><x><y/></x></>))) {undefined; }} else continue L;");
tryItOut("with({prototype: this.__defineGetter__(\"__count__\", function (__iterator__) { return <x><y/></x> } ) ? __parent__.(1.3) : <x><y/></x>})/*infloop*/while(({__proto__ setter: (({}).__lookupGetter__).call,  get __parent__ prototype (prototype) { var __proto__, __parent__ = <><x><y/></x></>; }  })){<x><y/></x> }");
tryItOut("Date(( /x/g .hasOwnProperty(\"constructor\"))), __parent__.__iterator__ ==  /x/  , (constructor = *)");
tryItOut("{yield __proto__;return; }");
tryItOut("throw constructor;");
tryItOut("do {for(let y in []); } while((typeof .__count__) && 0);\n");
tryItOut("if(({prop: __iterator__.constructor = 1e+81 >> <x><y/></x>, prototype getter: (function  __count__ (__count__, ({ __noSuchMethod__: constructor, prototype: ({ [__count__, return;]: prop }) })) { throw 1.2e3; } ).apply\f })) {L:with(*::*)yield <x><y/></x\t>;\tyield; const x::({ __iterator__: __count__, __noSuchMethod__: __parent__ }); } else /*infloop*/while(this >> window)(0x99);");
tryItOut("M:if(({function::prototype: undefined .@x:: __count__, __count__ getter: function () { return  /x/  }  })) {if((([[1]] if ( \"\" )).__iterator__ = yield <x/>.@*)) {continue ;return false;\n/*infloop*/for(*; <x><y/></x>; @foo) <x><y/></x>;\n }");
tryItOut("if(({__parent__: [],  set __parent__(__parent__, __noSuchMethod__) { yield; }  }).valueOf(\"number\")) (@foo); else  if (@foo .@*:: <><x><y/></x></>.throw((++false))) /*infloop*/do yield; while(<x><y/></x>); else throw *;");
tryItOut("{\n }");
tryItOut("try { with({}) { throw __count__; }  } catch(prototype) { throw __proto__; } ");
tryItOut("if(window) {M:if(__noSuchMethod__) { if (yield;) {return; }} else {var __noSuchMethod__ = <><x><y/></x></>, __iterator__ = <x><y/></x>; }/*infloop*/for(</*\n*/x><y/></x>; this; [z1]) {break L;let __noSuchMethod__ = *, __parent__ = false; } } else  if (yield (0x99 ? <><x><y/></x></> :  /x/ )) {return; }");
tryItOut("");
tryItOut("{with(*::*){throw <><x><y/></x></>; }");
tryItOut("while((new <><x><y/></x></>(<x/>, ;)) && 0)return {return <><x><y/></x></>;{} }\n");
tryItOut("{throw *;gc() }");
tryItOut("while(( '' .__lookupSetter__(\"__proto__\")) && 0){; }");
tryItOut("yield;");
tryItOut("yield true;");
tryItOut("/*infloop*/for(((yield <x><y/></x>.hasOwnProperty(\"__noSuchMethod__\"))); __parent__ = __noSuchMethod__; \n@foo) ");
tryItOut("/*for..in*/for(const [__proto__, prototype] = (this.__defineSetter__(\"constructor\", (new Function(\"gc()\")))) in #3={a:#3#}) return;");
tryItOut("yield; const __proto__;");
tryItOut("/*for..in*/for(const __iterator__ in (uneval(<x><y/></x>.valueOf(\"number\")))) {throw null;/*infloop*/while(*::* << __noSuchMethod__)gc() }");
tryItOut("L: /*for..in*//* nogeckoex bug 349964 */M: for  each(prototype in yield prop) export __count__;\nyield;\n");
tryItOut("let (__parent__ = ((p={}, (p.z = break L;)())).__defineSetter__(\"__proto__\", [1,2,3,4].slice).throw(('fafafa'.replace(/a/g, window) %= <x/> == case <x><y/></x>: yield;break; \r)), ({ __proto__: __proto__, __noSuchMethod__: ({ <>const __count__ = null, __noSuchMethod__ = <x/>;</>: constructor, __count__: [[({ __proto__: __proto__, __proto__: constructor }), ]] }) })) { function (){} }");
tryItOut("L: {/*infloop*/for([__noSuchMethod__, ({ constructor: __count__ }), , ] = this; ( /* Comment */__proto__).yoyo(( /* Comment */this)); setter = \n /x/ ) {export *;break L; }if(<x/> +  \"\" ) {<><x><y/></x></>;let prototype = -0; } else  if (<x/> if (window)) {export *;export *; }\nlet __iterator__; }");
tryItOut("if((constructor = <><x><y/></x></> ? <><x><y/></x></>[arguments] : new ({a2:z2})())) {export __parent__;let __count__, __noSuchMethod__; }");
tryItOut("M:if(this - <><x><y/></x></>\f) const __parent__ = constructor, function::constructor; else  if (<><x><y/></x></>) return;");
tryItOut("/*infloop*/for(prop = ({ prop: prototype, __parent__: __iterator__ }); <><></></>; (p={}, (p.z = )())) let null;");
tryItOut("if((033++)) {return  '' ; } else  if (__noSuchMethod__.((__noSuchMethod__ = prototype))) {/*infloop*/for(let __proto__;  /x/ ; <x><y/></x>) { } }");
tryItOut("let(constructor = ('fafafa'.replace(/a/g,  /x/ ) for (__count__ in [z1,,]) for each (__count__ in <x><y/></x>)), prototype) ((function(){})());");
tryItOut("do {\rexport *;; } while((__noSuchMethod__ <<= window) && 0);");
tryItOut("/*infloop*/L:for(const constructor; <><{prototype}> </{prototype}></>; this) {L: {return; } }");
tryItOut("L: {continue ;; }");
tryItOut("if(({ constructor: __parent__ }) = \n[z1,,]) { if (delete <><x><y/></x></>) {export *; }} else (<y><z/></y>);");
tryItOut("/*for..in*/for(const __iterator__ = [([15,16,17,18].filter(({}).hasOwnProperty, get.__count__), (undefined = (function ([y]) { })())) for (({ __noSuchMethod__: prop, prototype: prototype }) in __count__.eval(<x><y/></x>)) if (((#1=[#1#] >= <><x><y/></x></>).__iterator__))] in (__count__ = this)) /*for..in*/for([prototype, __parent__] = eval(\"__proto__\", []) in __iterator__ = __count__) {__iterator__; }");
tryItOut("let(__proto__, constructor) ((function(){throw 1e+81;})());");
tryItOut("L:if(*::*) export *; else  if (new Function(<x><y/></x>)) undefined;");
tryItOut("/*for..in*/for(__proto__ = prop in  /x/ ) export __noSuchMethod__;");
tryItOut("if(this.__defineGetter__(\"__parent__\", new Function)) { if (<x><y/></x>.( /x/ )[false]) yield; else {export set }}");
tryItOut("/*infloop*/__proto__");
tryItOut("/*infloop*/M:for(__count__; window; <x><y/></x>) var __proto__ = <><x><y/></x></>, __proto__;");
tryItOut("constructor = __iterator__;");
tryItOut("if(<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>) constructor;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = true.__lookupGetter__(\"constructor\") in ({ __count__: __iterator__ }) = (((#2=[@foo]))( '' ))) {gc() }");
tryItOut("/*infloop*/for(__noSuchMethod__ = __count__.__proto__ / eval(\" /x/ \", <><x><y/></x></>); (1.2e3.yoyo(__count__).throw(undefined( /* Comment */(this.__defineGetter__(\"__iterator__\", function  __parent__ (__proto__, get) { break ; } )), [,,] >> true)));  /x/g .eval((__count__))) let ([({ constructor: ({ __proto__: __proto__ }) }), , , , __iterator__] = #2=({__proto__: <x><y/></x>.@foo}), __iterator__ = <x/> & *::*) { var prototype; const __iterator__; }");
tryItOut("/*infloop*/M:while((void new function  __parent__ (x::__count__) { __proto__; } (window).__defineSetter__(\"__count__\", Math.pow)))if((<y><z/></y> :: <x/>)) {if( \"\" ) \f{throw <x><y/></x>;gc() } else  if (true) /*\n*/{yield;/a/gi }export *;<x><y/></x> } else  if (Boolean()) {export prop;yield <y><z/></y>; } else (0);");
tryItOut("return;");
tryItOut("M:if((uneval([[]]))) {/*infloop*/for(const prop = new Iterator(5.0000000000000000000000).watch(\"prop\", function(y) { yield y; const prop;; yield y; }); <><x><y/></x></>; ( /x/ .prototype = function ([y]) { }).__parent__) export __noSuchMethod__; } else  if (break L) {return; }");
tryItOut("M:if((new constructor() in ((p={}, (p.z = <x><y/></x>.__defineGetter__(\"__noSuchMethod__\", <><x><y/></x></>))())))) {{}/*for..in*/L:for(var __count__ = Iterator() in (-0)) yield; } else ;");
tryItOut("L: yield <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("while((this.__defineSetter__(\"prop\", ({}).__lookupGetter__)) && 0){; }");
tryItOut("throw __count__(__parent__ = <><x><y/></x></>) = <><bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb></>\n");
tryItOut("/*infloop*/for(var prop = constructor; <x><y/></x>; function::__noSuchMethod__) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in ([yield 0/0].some(<x><y/></x>))) with({__noSuchMethod__: new ([ \"\" ].some(new Function))(prop = #1=[#1#])}){gc()yield; }");
tryItOut("L:with({prototype: <><x><y/></x></>})function  prototype (prototype)<y><z/></y>");
tryItOut("try { Function } catch(prop) { throw <><x><y/></x></>; } finally { gc() } ");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = 1.2e3 instanceof (((window)(__count__)).__lookupSetter__(\"__parent__\")) in (([z1,,]).watch)()) {break ;/*infloop*/L:for((new ((gc).call).apply(1e4, function(id) { return id })); [([1,2,3,4].slice).call((function ([y]) { })(), 1e-81, window)].filter([1,2,3,4].slice); __proto__ = <bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>) {var __noSuchMethod__, prototype; } }");
tryItOut("/*for..in*/ import ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let prop in this) {  }");
tryItOut("/*for..in*/L:for(const prop in ((Math.sin)(undefined))){export __iterator__;{} }");
tryItOut("\nyield [@foo];\n");
tryItOut("L:do with([[new <x><y/></x>].map(gc)])throw __parent__; while(((true.watch(\"constructor\", new Function))(<x><y/></x>.@*(@foo.watch(\"prop\", function(q) { return q; })))) && 0);");
tryItOut("/*for..in*/for(var #1#.__count__ in ([true])) {throw (0.1 = __count__); }");
tryItOut("return __proto__ = 0/0 ? new Number() : null < +<><x><y/></x></> .@*:: 1e+81;");
tryItOut("with({prop: ((function (__noSuchMethod__, prototype)__parent__)(function(id) { return id }))}){var  { yield arguments } , constructor = #1#;export *; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((gc)(prototype)))if( '' ) { if (undefined) let __proto__ =  /x/ ;} else {yield undefined;yield; }");
tryItOut("with({__count__: (this.__defineGetter__(\"__parent__\", new Function))})throw  /* Comment */<><x><y/></x></>.yoyo((__iterator__ = __noSuchMethod__));");
tryItOut("with(<><x><y/></x></>)let __parent__ =  /x/ ;");
tryItOut("const __noSuchMethod__ = null, prototype;");
tryItOut("export *;\n");
tryItOut("with({__proto__: (null.__count__)--})export *;");
tryItOut("if(~#1# ? <x/> : <x><y/></x>) throw 0/0;if(false) {(3.141592653589793);const __parent__ = <x><y/></x>, prototype = *::*; } else  if (*) {let prop = <x><y/></x>, __parent__;export prop; } else {export __noSuchMethod__;yield; }");
tryItOut("if((p={}, (p.z = <><x><y/></x></>)())) {yield  /x/ ;return <x><y/></x>; } else  if (this.__defineGetter__(\"__proto__\", Math.sin)) yield [1,,];");
tryItOut("L:if(new ({})((null).call([15,16,17,18].filter((<x><y/></x>).__defineSetter__, false), ), (prop = __parent__)\f)) with([11,12,13,14].map){var __noSuchMethod__ =  \"\" , __parent__ = window;export *; } else  if ((({ __noSuchMethod__: __parent__.__parent__ }) = (<><x><y/></x></>.propertyIsEnumerable(\"__count__\")))) {/*for..in*/for(__count__ = new (this)() in 5.0000000000000000000000) {*::*; }L:while((true == (-0)) && 0)return; }");
tryItOut("'haha'.split");
tryItOut("__proto__( /x/ ) = prototype; const __count__;");
tryItOut("function::__parent__ = undefined;\nyield *;\t\n");
tryItOut("/*infloop*/do {} while(new (this.eval(@foo))(__parent__, 0x99));;");
tryItOut("return");
tryItOut("/*for..in*/M:for(const __count__(({constructor: <x><y/></x>, __noSuchMethod__: [,,] })) in ((((function(q) { return q; }).call(-3/0, @foo.__iterator__.yoyo(null.__lookupSetter__(\"__iterator__\")))).__defineSetter__)((1e-81 ^= <x><y/></x>.__defineGetter__(\"__proto__\", (4.).watch) + window)))){return <><x><y/></x></>; const __proto__;{yield;return; }export *; }");
tryItOut("while(((new <x><y/></x>())) && 0){[1,2,3,4].slice }");
tryItOut("let ([] = new (.2)(), prop = export *;) { yield; }");
tryItOut("L:if(false) {/*infloop*/for(({ prototype: constructor }) = __iterator__.yoyo(<y><z/></y>); prototype =  /x/ ; [,,]) {if(<x/>) return <x/>; }export *; }");
tryItOut("return  /* Comment */__noSuchMethod__;");
tryItOut("/*infloop*/for(var ({ __iterator__: ] }) = prototype%=<x><y/></x>; * - *; *) {;\t }");
tryItOut("with({}) { throw ({a2:z2}); } ");
tryItOut("throw StopIteration;");
tryItOut("if(<x/>.hasOwnProperty(\"prototype\")) {{} }");
tryItOut("const __noSuchMethod__ = <x><y/></x>\n/*infloop*/for(var __iterator__; this.__defineGetter__(\"__parent__\", function(y) { yield y; ([,,]);; yield y; }); #) const __proto__ = *::*;");
tryItOut("if([15,16,17,18].map(gc, (eval(\"__noSuchMethod__ = <><x\\t><y/></x></>\", *++)))) {yield this;export *; } else  if (this.__defineSetter__(\"__proto__\", function(q) { return q; }).unwatch(\"constructor\")) {if(( /x/ .yoyo(@foo))) { if (this.zzz.zzz) yield; else export *;} } else __count__, constructor;");
tryItOut("3;");
tryItOut("/*infloop*/L:for(window; this.__defineGetter__(\"constructor\", eval); new function ([y]) { }.eval(window)()) {with({__iterator__: window}){yield <><x><y/></x></>;( /x/g ); } }with({__parent__: @foo}){/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in this) ; }");
tryItOut("throw ({a2:z2})");
tryItOut("{}\nprop = <><x><y/></x></>;\n");
tryItOut("switch(__noSuchMethod__.__proto__ setter= function  __proto__ (prop) { continue L; } ) { case 1: /*infloop*/for(var __parent__; this; <><x><y/></x></>) {} }");
tryItOut("L: gc");
tryItOut("{L: {; } }");
tryItOut("export *;");
tryItOut("/*for..in*/for(let [each, __proto__] = arguments in ({a1:1})) {{} }");
tryItOut("/*infloop*/M:for(let constructor; ([prototype < *::* if (<x><y/></x>)]).__defineSetter__(\"__count__\", (Math.pow).apply); new (window)(<><x><y/></x></>)) {if((yield void <y><z/></y>)) M:if(this /= window) const __noSuchMethod__; else throw 033; else  if (yield  /x/g ) yield; }");
tryItOut("/*for..in*/L:for(var __iterator__.__proto__ in ((function () { yield prop.prototype } )((p={}, (p.z = (#0=({__noSuchMethod__: (__noSuchMethod__.__noSuchMethod__ setter=  /x/g )}).propertyIsEnumerable(\"__proto__\")))()) >>> ~prop = __parent__))){((<><x><y/></x></>)); }");
tryItOut("/*infloop*/for(__noSuchMethod__ = this.__defineSetter__(\"constructor\", ((prop++).watch).apply);  \"\" ; (new ('fafafa'.replace(/a/g, function  __proto__ (\t__noSuchMethod__, __count__)([15,16,17,18].filter(function (__proto__) { yield *::*; } ,  /x/ )) <<= __iterator__.prop = <y><z/></y>))(__iterator__ = (<!--yy-->.((this.__defineGetter__(\"__iterator__\", [1,2,3,4].map)))), <><bbb xmlns:ccc=\"*::* .. 0\"><ccc:eee></ccc:eee></bbb></>))) export __noSuchMethod__;");
tryItOut("/*infloop*/for([15,16,17,18].sort(__noSuchMethod__, -3/0); <x><y/></x>.(__noSuchMethod__); <y><z/></y> for (__proto__ in *)) return <><x><y/></x></>;");
