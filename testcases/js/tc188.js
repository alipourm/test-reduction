tryItOut("/*infloop*/for(new prototype = ( \"\"  .@ true); true; prop = (yield __noSuchMethod__)) {/*infloop*/do let prop, __noSuchMethod__; while(<y><z/></y>);if(*) {; } else {yield;yield __noSuchMethod__; } }");
tryItOut("let __count__ = <x><y/></x>;");
tryItOut("/*infloop*/L:for(__noSuchMethod__ = *.__defineSetter__(\"__noSuchMethod__\", (new Function(\"break ;\"))); [prop for each (__proto__ in *::*)]\n; (__noSuchMethod__.(1.3)) .. @foo()) {constructor, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("{yield //h\n<x><y/></x>;/*for..in*/M:for(__iterator__ in <><x><y/></x></>) {__iterator__, prototype; } }");
tryItOut("with(delete <x/>)export __noSuchMethod__;\t");
tryItOut("M:if(<><xxx {__count__}={<x/>}\f /></>) { if ('fafafa'.replace(/a/g, ({}).__lookupGetter__) | 1e4) {{yield;return <x/>; } } else throw *::*;}");
tryItOut("/*infloop*/for(var __noSuchMethod__; ((<x/> for each (__proto__ in *::*))); ( '' .@foo)) gc()");
tryItOut("while((window) && 0){ }");
tryItOut("if(0--) {'haha'.splitexport __noSuchMethod__; } else  if (undefined.__lookupSetter__(\"__proto__\"\n)) const prop, __parent__;");
tryItOut("/*for..in*/for(let prop in __count__.prototype = (constructor.@*)) if(constructor = #0=({constructor: null})) yield;");
tryItOut("M:with(__iterator__ =  '' )L:if( '' ) {{}export *; } else  if (<x><y/></x>) {; }");
tryItOut("yield ([,,z1].@*).__defineSetter__(\"__iterator__\", function(y) { yield y; return constructor;; yield y; });");
tryItOut("if(((prop.propertyIsEnumerable(\"__parent__\")) != (new Number(<><x><y/></x></>, undefined)))) if(({})[[,,z1]]) {yield; } else  if (var prop) {export __parent__; } else {__iterator__, __parent__ = *::*;throw 1.2e3; }");
tryItOut("/*infloop*/for(<x/>; <x><y/></x>; 3) ");
tryItOut("/*for..in*/M:for(var [__proto__, __count__] = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in false) {const delete, constructor = <x><y/></x>;gc() }");
tryItOut("/*for..in*/for(const ({ prototype: [], __parent__: [] }) = (eval(\"[z1,,]\", prototype)) in ((\t( /x/ .__defineGetter__(\"constructor\", Math.pow)))[Object(null) in  /* Comment */<x><y/></x>])) {/*for..in*/for(var __parent__ in [z1,,]) {yield  /x/ ; }if( '' ) { if (<x/>) return this; else {var prototype; }} }");
tryItOut("{throw [z1,,];yield; }");
tryItOut("/*for..in*/M:for(let __parent__ = __proto__ = constructor.( '' ) in <>yyy</>.(3.141592653589793)) {const __parent__, prototype; }");
tryItOut("M:if(( '' .__defineGetter__(\"prototype\", /a/gi))) { if (<x/>.__lookupSetter__(\"prototype\")) export prototype; else yield;}");
tryItOut("if((__proto__: this})--) { if (({a1:1}).__defineGetter__(\"__noSuchMethod__\", eval)) {continue L;/*for..in*/M:for(const __count__.__noSuchMethod__ in ((function ()('fafafa'.replace(/a/g, function(y) { yield y; export __proto__;; yield y; })))(__proto__, __count__ =  /x/ ))){return __count__;false; } } else {if(<x><y/></x>.constructor) const __count__; }}");
tryItOut("if(window.hasOwnProperty(\"__proto__\").__lookupGetter__(\"__parent__\")) { if (({prop getter: function (__parent__)1e-81 }).isPrototypeOf((<x/>.hasOwnProperty(\"prototype\")))) arguments; else {;gc() }}");
tryItOut("if(undefined != <x><y/></x> >= 1e4) { if (Number()) with((__count__.__proto__.eval(__proto__.(-3/0)))){yield; } else if( /* Comment */this\f) {continue M;export *; } else  if (new ((<><x><y/></x></>).watch)().hasOwnProperty(\"constructor\")) {export prototype; } else {yield; }}");
tryItOut("if(5.0000000000000000000000) { if ( /x/g ) function  __noSuchMethod__ () /x/g  else throw undefined;}");
tryItOut("with(<y><z/></y>)return;");
tryItOut("{}throw 1.2e3; const __proto__;");
tryItOut("return window;\nreturn __count__;\nL:if(<x/>.propertyIsEnumerable(\"__count__\")) { if ( ) export __parent__; else {return; }}");
tryItOut("/*for..in*/for(let __count__ = constructor.prototype in <x><y/></x>) {yield; }\nM:if((prop.__parent__)) { if ( '' ) __parent__ = <x><y/></x\r>; else { }}\n");
tryItOut("switch(<{__noSuchMethod__}>yyy</{__noSuchMethod__}>) { default: yield;case (break ;)[prototype()]: export *;break; case 6: break; case 4: break;  }");
tryItOut("L:switch([[1]] /  /x/ ) { case 3: let(({ __parent__: [({ constructor:  }), , [prototype], ] })) ((function(){return;})());break;  }");
tryItOut("let ([[, , [[, , , ], __proto__], , ], __parent__.prototype, , , __parent__] = __count__.prototype getter= gc) { <x><y/></x>;\f }");
tryItOut("/*for..in*/for(var __count__ in  /x/g ) {throw <y><z/></y>; }");
tryItOut("export function::__count__;\f const constructor;");
tryItOut("let (prototype = (p={}, (p.z = __noSuchMethod__)())) { return; }");
tryItOut("L:if(((#0=[true]).valueOf(\"number\"))) { if ((void __count__)) {return;return; } else gc()}");
tryItOut("while(((\n(({ prop: __parent__, __iterator__: prototype }) = (yield __proto__)))) && 0){yield -1;throw *; }");
tryItOut("L: ;");
tryItOut("if(new ((__parent__ = <y><z/></y>).throw( ''  + <x><y/></x>))(*::*, ([, constructor, prop, ] = ({ prop: [,] }).__parent__ = (*::* .@*:: null)\t.@foo)).isPrototypeOf(<>eval(\"return;\", eval( \"\" , prototype))</>)) {} else { }");
tryItOut("/*for..in*/L:for([prototype, __iterator__] = (__iterator__-=false.hasOwnProperty(\"prototype\")) in this.__defineSetter__(\"constructor\", (eval).apply)) {if( \"\" ) { if (<y><z/></y>) {let (__proto__ = ({a1:1}), ({}).hasOwnProperty) { ; } } else {with({__noSuchMethod__: (*)}){} }} }");
tryItOut("/*infloop*/for(({ __iterator__: [] }) = this.__defineGetter__(\"constructor\", (new Function(\"gc()\"))); yield <xxx>{__noSuchMethod__}<\f/xxx>.( /x/g .propertyIsEnumerable(\"__count__\")); <x/>.__defineGetter__(\"__parent__\", /a/gi).isPrototypeOf((<><x><y/></x></>))) return <x><y/></x>;");
tryItOut("do { } while((({constructor: <x/>})) && 0);");
tryItOut("do (this); while(( /x/ ) && 0);");
tryItOut("return try { with({}) var __count__, __count__ = @foo; } catch(__proto__ if (function(){let(__iterator__, __count__ = .2) ((function(){throw 1e-81;})());})()) { for(let y in [5,6,7,8]) constructor = <x><y/></x>; } catch(__count__) { return; } \f;");
tryItOut("/*infloop*/for(let __count__; <></>.(@foo.throw(function::constructor)); \n__noSuchMethod__) {M:if((__noSuchMethod__+=window)) { if ((<><x><y/></x></>.propertyIsEnumerable(\"prototype\"))) {{}try { {} } catch(__count__) { yield; }  } else {return function(id) { return id };yield; }/*\n*/}if(constructor = setter-=this) { if (({prototype setter: eval })) export __iterator__;} else {;yield *; } }");
tryItOut("");
tryItOut("if(({__iterator__: eval(\"yield 033\", eval(\"(p={}, (p.z = ( /x/ .isPrototypeOf(*::*)))())\", (try { export __iterator__; } finally { {} } .hasOwnProperty(\"__noSuchMethod__\") ? (let (prototype = <y><z/></y>, __parent__ = <y><z/></y>) .2) : (constructor = window))))})) ; else  if ((__proto__.__noSuchMethod__ getter= (1 for (x in [])))) if((1e+81 .@x:: null)) {export __count__;\n } else  if (get;) {continue ; } else {return <y><z/></y>;; } else {if((true.__defineGetter__(\"constructor\", (false).__defineSetter__) .@ ({ get __noSuchMethod__ prototype (function::__count__, function::__noSuchMethod__) { return window; }  }))) (prototype); else {export __proto__; } }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: __count__, __count__: __noSuchMethod__ }) = yield null; *::*(); yield <><x><y/></x></>) <x><y/></x>;");
tryItOut("if(()) let __parent__ = __parent__; else  if ((-1).isPrototypeOf(constructor)) L:if(<x><y/></x>) (__parent__); else {export __noSuchMethod__;continue ; }");
tryItOut("{}/*infloop*/for(__proto__prototype = [z1]; <y><z/></y>; ) export __proto__\nfalse\n/*infloop*/\fL:\twhile(--({a2:z2})){continue ;break M; }");
tryItOut("if(this.zzz.zzz) return; else  if (__noSuchMethod__) {return <x><y/></x>; }");
tryItOut("/*infloop*/for(__iterator__; (p={}, (p.z = 0x99)()); (__count__.(<><x><y/></x></>))) constructor;");
tryItOut("M:if(0x99 *= [,]) {yield; } else {/*for..in*/for(__count__ = new ( /x/ )(<y><z/></y>, *::*) in 1e+81) export *; }");
tryItOut("export prop; const __parent__; const __count__;/*infloop*/while((5.0000000000000000000000\t.__lookupSetter__(\"prototype\"))){export *; }");
tryItOut("/*for..in*/for(prototype = -1 in *) ;");
tryItOut("__parent__ = null");
tryItOut("/*for..in*/for(let [__parent__, prototype] = (undefined.constructor = <y><z/></y>)(<x><y/></x> %= *::*.prototype, <bbb xmlns:ccc=\"function(id) { return id } .@*:: <><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>) in (false.yoyo(function(id) { return id }))) {/*for..in*/for(const __noSuchMethod__ =  \"\"  in null) {{}let __iterator__ =  /x/g ; }continue M; }");
tryItOut("do {'haha'.split__noSuchMethod__; } while(((<x><y/></x>.(3/0))) && 0);");
tryItOut("((<x/> if (*::*))).__noSuchMethod__, ({ constructor: ({ prototype: ({ constructor: prototype }), constructor: __count__ }), function::__parent__: __noSuchMethod__ }) = (prop)() .@ \n*::*");
tryItOut("/*infloop*/for((@foo)[3.141592653589793]; (gc);  \"\"  ^ null) {prototype }");
tryItOut("/*infloop*/:for( /x/g ; ({}); 'fafafa'.replace(/a/g, function  __count__ (__count__, __proto__) { yield __count__ = __noSuchMethod__.(@foo).__count__ } ).hasOwnProperty(\"__parent__\")) {if( += <y><z/></y>) { if (+(new Function())) break ;} else  }");
tryItOut("do \freturn __proto__; while(([,]) && 0);");
tryItOut("M:if(__iterator__ && (( '' )\f.call(undefined, __proto__, function ([y]) { }))) *::*; else {}");
tryItOut("/*infloop*/for(('fafafa'.replace(/a/g, ({}).hasOwnProperty)); [[1]].watch(\"[]\", function(q) { return q; }); (__iterator__ = new RegExp(<x><y/></x>, *::*))) throw <y><z/></y>;\f");
tryItOut("/*for..in*/for(const prototype in ((true())(__parent__ = ({ prop: prop, __count__: __parent__ })))){return this; }");
tryItOut("/*infloop*/for([[]]; [<><x><y/></x></>].sort(Function); ({a1:1})) {__count__ = null;gc()\nM:with(@foo)'haha'.split }");
tryItOut("for(let y in [5,6,7,8]) let(function::__count__) ((function(){throw StopIteration;})());");
tryItOut("{{} }");
tryItOut("<zzz>[, , ({ __iterator__: __noSuchMethod__ }), ] = prototype</zzz>");
tryItOut("throw prototype;yield window");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*infloop*/while((({constructor getter: [1,2,3,4].slice })))L:with(0.1){}");
tryItOut("if((eval(\"return;\", 5.0000000000000000000000)).@foo) { if (new (Function)((prop &  '' ).__defineGetter__(\"constructor\", <y><z/></y>).yoyo([]), __noSuchMethod__ = new (__iterator__.watch(\"prototype\", Function))())) {let prototype = this, __count__ = *; const __parent__;gc() }} else /*infloop*/L:for(const __iterator__ = <x><y/></x>;  /x/ ; <><x><y/></x></>) [, prop, __iterator__, __parent__]");
tryItOut("{}\nyield;");
tryItOut("if(<><x><y/></x></> !== <x/>) yield;");
tryItOut("var __parent__, __noSuchMethod__ = <x/>\nvar __parent__, __proto__ = *::*;");
tryItOut("/*infloop*/gc");
tryItOut("gc()");
tryItOut("/*for..in*/for(var constructor = this in (this.__defineSetter__(\"prop\", 1.3)) <= (<x><y/></x> |  '' )) let (constructor) { M:if(<><x><y/></x></>) {export prototype;export prop; } else  if (prototype) var __parent__; }");
tryItOut("if(([1.3]).__lookupSetter__(\"prototype\")) const __iterator__;\nyield;\n else break M;");
tryItOut("if(undefined) { if (undefined) yield  /x/ ; else {yield __count__; }}");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = eval(\"<x><y/></x>\", *::*) in @foo) [z1,,]\ndo {return function(id) { return id }; } while((<employee id=\"1\"><name>Joe</name><age>20</age></employee> = [15,16,17,18].filter(({}).hasOwnProperty, 033)) && 0);");
tryItOut("if(((export *;.__parent__ getter= true)(this, <x><y/></x>) && [*::*])) {L:if([11,12,13,14].some) { if ((<x/>.valueOf(\"number\"))) {{} } else {const __noSuchMethod__ = @foo; }}gc() } else /*for..in*//* nogeckoex bug 349964 */L: for  each(let (<><x><y/></x></>)(<y><z/></y>) in __iterator__ = [[1]]) {{}(<x><y/></x>); }\n");
tryItOut("switch(constructor-=true) { default: prop =  /x/g ;break; case 9: return 3.141592653589793;switch(typeof <x/>) { default: let prototype = 1.3; }break;  }");
tryItOut("/*for..in*/for(__parent__ = *::* &= [[1]] in 3) gc()");
tryItOut("return;");
tryItOut("L:with({constructor: __count__ = [,,]})/*for..in*/for(const ({ constructor: ({ __parent__: __proto__, prototype: constructor }) }) in ((yield window))) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in #1=[<><x><y/></x></>]) {const constructor = <><x><y/></x></>, __iterator__;return false\r; }");
tryItOut("yield 3.141592653589793\nconst __noSuchMethod__ =  /x/ ;");
tryItOut("let (constructor) {  '' ; }");
tryItOut("switch(false) { default: case window: yield;break; case 6: break; case 6: return thisbreak; propbreak; switch(3.141592653589793) { case 0: export *; }case 7: break;  }");
tryItOut(";");
tryItOut("let (__count__) { M:if((__proto__)) {yield false;return 5.0000000000000000000000; } else  if ([1,,]) {/*infloop*/L:for(window; {}; <><x><y/></x></>) {export *;return <><x><y/></x></>; }throw *; } }");
tryItOut("/*for..in*/L:for(let constructor = <x/> &= __noSuchMethod__ = null.__defineGetter__(\"__count__\", eval) in <><bbb xmlns=\"(new [[1]]())\"> </bbb></>) {L:if([constructor, constructor, , ] = true\n) { if (++[11,12,13,14].some) export *;} else {throw this; }constructor; }");
tryItOut("<y><z/></y>");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = const prototype = <x><y/></x>, __noSuchMethod__ = this.yoyo(<x/>) in function::prototype = <x><y/></x>) ");
tryItOut("L:while((continue ) && 0)let (prototype) { {} }\n");
tryItOut("/*infloop*/do {{} } while( /x/ [0.1] << __proto__+=<><x><y/></x></>);");
tryItOut("/*infloop*/for( /x/g ; (( /x/g  ? <><x><y/></x></> : false) >= prop.(1e-81)).constructor; <{__parent__}></*! <!--yy--> --yy--></{__parent__}>) (<x><y/></x>);");
tryItOut("{__count__, __proto__;let __proto__ = *, __count__ = <x><y/></x>; }");
tryItOut("/*for..in*/L:for(let __count__ = yield constructor === <x><y/></x> in 1.3) throw [,];");
tryItOut("L:if((__iterator__ = [({ prop: constructor, [z1,,]: prop }), ])) { if (({ prototype: each }) = (uneval((function(q) { return q; }).call([[]], *, 033)))) <><x><y/></x></>; else {var __noSuchMethod__, __noSuchMethod__ = <x><y/></x>;gc() }}");
tryItOut("if(this.__defineSetter__(\"constructor\", (#3={a:#3#}).watch)) ; else  if (constructor-= /x/g ) {/*infloop*/for(let ({ __noSuchMethod__: ({ __proto__: __iterator__, prop: __count__(('fafafa'.replace(/a/g, ((@foo).watch).apply))) }) }) = null; (([1,2,3,4].slice).call(*, )); prototype) {function::__parent__, __noSuchMethod__ = this; } } else {/*infloop*/for(let __proto__; (-1) ? constructor : @foo; (__iterator__ = <x/>)) {/*infloop*/L:for(const __proto__ = false; [z1,,]; <y><z/></y>) {__iterator__ = null, __iterator__;const constructor = [[]]; } } }");
tryItOut("/*for..in*/for(const __count__ in <y><z/></y>) {{}yield true; }");
tryItOut("/*infloop*/M:do {{*;let __noSuchMethod__ = window, __proto__; }\n } while(return *::*);");
tryItOut("/*infloop*/for(__noSuchMethod__; #1#; prop) {export *;; }");
tryItOut("if(<><x><y/></x></>) {([1,,]);gc() } else  if (this) {(__proto__);gc() }");
tryItOut("L:switch(5.0000000000000000000000) { case 6: break; case <><x><y/></x></>: break; case 6: const constructor;break; export *; }");
tryItOut("L:if(null) {return undefined; } else  if (0.1) return;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = Number([<y><z/></y> for each (constructor in this)], * &= <x><y/></x>) in *.unwatch(\"__proto__\")) if((__proto__, __count__\n)) {; }");
tryItOut("/*infloop*/for(constructor; <x><y/></x>;  /x/ ) {{} }");
tryItOut("L:if(<zzz>new ([1,2,3,4].map)([z1,,]).__lookupSetter__(\"__iterator__\")</zzz>) { if (__iterator__.constructor) export constructor; else {L:do {;getter } while(((3/0 >>> <y><z/></y>)) && 0)let __parent__ = ({a2:z2}); }}");
tryItOut("/*infloop*/for((uneval( /x/ )); 1e+81.propertyIsEnumerable(\"constructor\"); (( /x/g .watch(\"__parent__\", (1 for (x in []))))\n)) {__iterator__ =  '' , __parent__;\fprototype; }");
tryItOut("prop = @foo\n/*infloop*/for(const ({ prop: [, , , , __count__], function::constructor: prototype }) = (yield  /x/g ); this.__defineGetter__(\"__proto__\", eval); prototype.constructor setter= this) export __noSuchMethod__;\n");
tryItOut("M:if((* != -3/0)) ; else  if (<x><y/></x>.(*)) const __noSuchMethod__;");
tryItOut("{true; }");
tryItOut("let (__proto__, __noSuchMethod__) { /*for..in*/for(const prototype in ((function(q) { return q; })(()))){__proto__; } }");
tryItOut("{(yield *); }");
tryItOut("/*infloop*/for(let __proto__ = (prop.__count__ = -0.eval([,,])); [,]; ([15,16,17,18].filter(<><x><y/></x></> - *::*, (+false)))) if([15,16,17,18].filter(Function, 0.1)) export *; else  if (<bbb xmlns:ccc=\"([arguments].filter(Function))\"><ccc:eee></ccc:eee></bbb>) {/*for..in*/M:for(let __count__ = <x/> in function ([y]) { }) {yield <><x><y/></x></>; } }");
tryItOut("/*infloop*/L:do prop = this, prototype; while(!true);");
tryItOut("/*infloop*/for(__parent__; [[,,z1]] / (); <zzz>(#2= '' )</zzz>.eval(*::*)) {export *; }");
tryItOut("/*infloop*/while((p={}, (p.z = 3)()))<x><y/></x>;\nfunction  each (__parent__)false\n");
tryItOut("if(( /* Comment */[window for (__count__ in 1.3)])) { if (\n<x/>[@foo].valueOf(\"number\")) export __count__;} else ");
tryItOut("let(({ __parent__: ({ constructor: prototype }), __iterator__: __count__ })) ((function(){__parent__ = __iterator__;})());");
tryItOut("prop = 033, constructor = -1\n");
tryItOut("function  __proto__ (__noSuchMethod__) { yield @foo } \n");
tryItOut("let([__proto__, , *::*, prototype] =  /x/g .@*) { for(let y in [5,6,7,8]) break M;");
tryItOut("return;");
tryItOut("throw prototype;");
tryItOut("export *\n");
tryItOut("gc()");
tryItOut("if(@foo) return; else __proto__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in undefined) export *;");
tryItOut("if(+[z1]) {prop }\nvar prototype = 0.1, prop = {};__noSuchMethod__ = [z1], prototype");
tryItOut("L:with(([undefined].some((Math.sin).call).yoyo( /x/g .hasOwnProperty(\"prop\"))).__lookupSetter__(\"__iterator__\"))__proto__;");
tryItOut("\n/*infloop*/do {break ; } while(null);");
tryItOut("export __noSuchMethod__;");
tryItOut("L:if( /x/g ) { if (#1=[#1#] !== undefined) {throw *::*; } else {try { gc() } finally { (true); } with({prototype: *})<!--yy--> }}");
tryItOut("do <x><y/></x>  while((((++eval(\"{}\", prototype))())) && 0);");
tryItOut("{break ;with({prop: (<x/>.__lookupSetter__(\"__parent__\"))})yield __proto__; }");
tryItOut("/*for..in*/for(const constructor = -3/0 in <x><y/></x>.__iterator__ / __proto__ = this) throw __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (*++)((@foo / <><x><y/></x></>)) in yield <y><z/></y>) {const __count__, __iterator__; }");
tryItOut("/*infloop*/for(prop = 1.3; (((function ([y]) { })())[null]); <zzz>(this.__defineGetter__(\"__proto__\", Function))</zzz>) {<x><y/></x> - window; }");
tryItOut("/*infloop*/for(({a1:1}).__iterator__; (constructor = constructor); ({prototype: * instanceof window})) /*for..in*/for(var __parent__ in [[1]]) {yield window; }");
tryItOut("if(0.1) {yield window;gc() } else {}\n*::*/*\n*/.watch(\"__noSuchMethod__\", (([1,2,3,4].slice).apply).call)\n");
tryItOut("throw constructor\n");
tryItOut("if((((++033).throw([<><x><y/></x></>].map('haha'.split))) / (false /= null))) /*for..in*/for(__parent__ in #3={a:#3#}) export *; else {break L[[]] }");
tryItOut("throw __count__;");
tryItOut("let (__count__) { var __proto__ = [[]], __noSuchMethod__ = 4.; }");
tryItOut("/*infloop*/for(x::constructor = null; <x><y/></x>; *) export constructor;");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/for(var new (<><x><y/></x></>)(); [15,16,17,18].some(function  __iterator__ () { yield new (({}).__lookupGetter__)().propertyIsEnumerable(\"__iterator__\") } , __parent__ = prop);  ''  == __proto__) throw <><x><y/></x></>;");
tryItOut("/*infloop*/for(<>prop</>.__lookupSetter__(\"__count__\"); #0=((function ([y]) { })() >= [1,,])(\nprop).valueOf(\"number\"); ((<x/>)(*, <x><y/></x>)) && ((({ __proto__: constructor, __parent__: __iterator__ }) = []))[arguments]) /*for..in*/M:for(prototype.__proto__ in this) {{} } const prototype;");
tryItOut("(new Function(\"gc()\"))");
tryItOut("while((<><{prop}> </{prop}></> >>> prototype.__parent__ = ()) && 0)M:if((function ([y]) { })()) { if (<><x><y/></x></>) yield *::*;} else #1#;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prop] = 3.141592653589793 in this) ;");
tryItOut("{return; }");
tryItOut("__iterator__ = prop;");
tryItOut("/*for..in*/for(var prototype in 1e81) let constructor;");
tryItOut("let(prop) ((function(){for(let y in [5,6,7,8]) yield 0x99 >= __proto__;})());");
tryItOut("do {yield;throw <y><z/></y>\nprop; } while((#0=({__count__: __proto__.__noSuchMethod__ = false.watch(\"__iterator__\", (constructor).watch)})) && 0);");
tryItOut("while(( \"\"  > <x><y/></x>.constructor) && 0){return;gc() }");
tryItOut("/*infloop*/L:while(#0= \"\" ){break ; }");
tryItOut("/*infloop*/for(({ __count__: __count__ }) = (0/0.__defineGetter__(\"__parent__\", function (__count__) { return  ''  } ));  /x/g .__noSuchMethod__; yield <y><z/></y>)  '' ");
tryItOut("/*infloop*/for(new Array([,,z1]); <><x><y/></x></> |= 3.141592653589793--; ~(<x><y/></x>.__lookupGetter__(\"prototype\") && [[]])) {/*infloop*/for(var [, , , ] = [15,16,17,18].sort(function  __noSuchMethod__ () { {} } , *::* if (__iterator__)++); undefined; ({ prototype: __parent__, __noSuchMethod__: ({ constructor: __count__, constructor: __proto__ }) }) = prop) {yield;{let __proto__; } } }");
tryItOut("/*infloop*/for(var __proto__; false;  \"\" ) {; }\n/*for..in*/for(var __parent__ = ({__noSuchMethod__: <><x><y/></x></>}) in <><x><y/></x></>) {let __proto__ = <><x><y/></x></>, __proto__; }");
tryItOut("/*for..in*/L:for(var [__count__, __iterator__] =  ''  in constructor) {return; }");
tryItOut("for(let y in [5,6,7,8]) let(prototype) { this.zzz.zzz;");
tryItOut("if(new 1e81()) {break ;let prop; } else  if (__parent__ = <><x><y/></x></>.throw((prop = <><x><y/></x></>))) throw __count__;");
tryItOut("M:if((new (#3={a:#3#})())) { if (new RegExp((new (<><x><y/></x></> << @foo)(-1.yoyo([,]), <x><y/></x>)))) (function::__count__); else {( '' );/*for..in*/M:for(const this in (([1,2,3,4].map)(())))return; }}");
tryItOut("/*for..in*/L:for(let ( /x/  .@*:: *::*, <x><y/></x>)((0x99)(<x><y/></x>, true)) in ((__proto__, #3={a:#3#}\n)((<><x><y/></x></>.__defineSetter__(\"prototype\", <x/>))))){export __proto__;{} }");
tryItOut("let(prop = ()) ((function(){export *;})());");
tryItOut("with({}) yield delete *::*;");
tryItOut("return;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut(" /x/ \n(__parent__);\n");
tryItOut("/*for..in*/for(prop in ((Math.sin)((each = *)))){__proto__ = false;/*for..in*/M:for(var prop in this) {yield; } }");
tryItOut("do if(this.zzz.zzz) { if (<x><y/></x> = (window /= [1])) {var __proto__ = (__noSuchMethod__);, constructor; } else {{} }} while(((0x99 != <x><y/></x>.watch(\"__iterator__\", ([1,2,3,4].map).apply))) && 0);");
tryItOut("var __proto__ = 3, prototype;");
tryItOut("(<x/>);");
tryItOut("{switch(([15,16,17,18].sort(*::*, this))) { default:  } }");
tryItOut("switch(true) { case 0: case eval(\"(0/0).watch().__proto__ = ({ set __parent__(__noSuchMethod__, __proto__)<x/> })\", (<x/>.__defineGetter__(\"__proto__\", function  constructor (constructor) { return false } ) .@ let (prop = undefined, constructor = __iterator__) __proto__)): if((this.zzz.zzz)) /*for..in*/for(var prototype in <x/>) {} else gc()break ;case __iterator__.((<x><y/></x>.())): break; default: break; break; gc()break; case 9: break;  }");
tryItOut("let __noSuchMethod__;\nexport *;\n");
tryItOut("/*infloop*/M:for(({ constructor: ({ __proto__: [({ function::prototype: function::__noSuchMethod__, __noSuchMethod__: __proto__ }), ({ __parent__: constructor, __noSuchMethod__: __iterator__ }), ] }) }) = new Object(); prop.constructor getter= Math.pow; yield true[@foo]) {{export *; }gc() }");
tryItOut("with(prop)/*for..in*/M:for(var constructor = (1 for (x in [])) in prototype) {M:if( /x/g ) { if (false) {({}).__lookupGetter__ } else (new Function(\"[1,2,3,4].map\"))} }");
tryItOut("(({}).hasOwnProperty).apply");
tryItOut("each = constructor;");
tryItOut("try { for(let y in []); } catch(__noSuchMethod__ if ((new -0((this.zzz.zzz), new ((1 for (x in [])))(<x><y/></x>, [1,,]))) .@ (0/0 === <><x><y/></x></> + Object(({}),  /x/g )))) { yield ({__parent__: [,,], prototype: __count__ })\t; } catch(prop) { return prop.([function ([y]) { }].some((eval).apply).propertyIsEnumerable(\"prototype\") * ((( \"\" ).__defineSetter__).call(<y><z/></y>.__defineSetter__(\"prop\", (1 for (x in []))), (1e81), {}))); } ");
tryItOut("/*infloop*/do {return;/*for..in*/for(const __noSuchMethod__ in ((<><x><y/></x></>)(__noSuchMethod__ = prototype))){return *; } } while(prop = ({}).__lookupGetter__ .@*:: window, __count__ > #0=({constructor: 3/0}));");
tryItOut("L:if(__parent__ = 1e81) {throw <x/>; } else {/*infloop*/while(*) '' ; }");
tryItOut("/*infloop*/while(__parent__){/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in <><x><y/></x></\t>) {}yield;\nfunction(q) { return q; }\n }");
tryItOut("/*for..in*/for(var [__parent__, constructor] = prototype.prop in -3/0) {let __count__ = this;{} }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for((false << []); (eval(\"(\\n '' )\", <x><y/></x>.__noSuchMethod__)); ((@foo.__count__)(<><x><y/></x></>.watch(\"__parent__\", (<x><y/></x>).watch))) = ({ prop: ({ __iterator__: __proto__ }) })) ");
tryItOut("{}\n\ndo __proto__, __count__; while(([1,,].throw(<x><y/></x>).@*) && 0);\n");
tryItOut("/*for..in*/L:for(var __parent__ =  /x/g  in  '' ) return;");
tryItOut("/*infloop*/M:while(\n++null){if(<y><z/></y>) ({}).hasOwnProperty else  if ( /x/g ) return; else const prop = __noSuchMethod__, __noSuchMethod__ = __noSuchMethod__; }");
tryItOut("break M;");
tryItOut("prop = (0)(window);");
tryItOut("yield (<><x><y/></x></>.valueOf(\"number\"));");
tryItOut("break M;");
tryItOut("/*infloop*/for(var constructor; __noSuchMethod__; ({a1:1})) return undefined;");
