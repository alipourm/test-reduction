tryItOut("{export constructor; }");
tryItOut("switch(<><x><y/></x></>) { default: export prototype;break; break;  }");
tryItOut("M:if(__proto__|=[11,12,13,14].some) { } else {export *;constructor; }");
tryItOut("yield <y><z/></y>;function(y) { yield y; yield <y><z/></y>;; yield y; }");
tryItOut("this.zzz.zzz;");
tryItOut("let (constructor = eval(\"<x/>\", 3), __count__ = new (<><x><y/></x></>)( \"\" )) { export *;\n{}\n }");
tryItOut("let(({ __parent__: prop })) { let(__count__, prototype) { let(constructor = (yield <x/>).eval( { return <x><y/></x> }  || return;)) { M:if(this *  '' ) { if (((<x><y/></x>)(033, <y><z/></y>))) {//h\nbreak ; } else { /x/g yield; }}");
tryItOut("\n/*infloop*/while((this.unwatch(\"__noSuchMethod__\"))){eval }\n");
tryItOut("");
tryItOut("with(constructor)(null);\n{}\n");
tryItOut("{return;let __parent__, prop = <x><y/></x>; }\n");
tryItOut("");
tryItOut("let(prototype, __iterator__ = this) ((function(){const __proto__;})());");
tryItOut("[1,2,3,4].slice\nyield window;");
tryItOut("L:if((p={}, (p.z =  '' )())) { if (yield * , (null++)) if(undefined) {return false; } else {(<><x><y/></x></>).__defineSetter__ }} else break L;");
tryItOut("/*for..in*/M:for(var prototype in ((eval)([15,16,17,18].map(function(y) { yield y; ; yield y; },  /x/ )))){throw constructor; }");
tryItOut("/*for..in*/for(prop = true in false) {{} }\nbreak L");
tryItOut("if(<x/>) { if (__noSuchMethod__ = __count__ % <x><y/></x>[false]) gc()} else {/*infloop*/L:for(var prop;  /x/ ; <y><z/></y>) export __iterator__;yield <><x><y/></x></>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in let (prop = window) constructor) return <><x><y/></x></>;");
tryItOut("if(__parent__ = <x/> &= (new (1 for (x in []))())) {yield window;var prop, __noSuchMethod__ = throw  /x/ ;; } else  if (({constructor: this.zzz.zzz, prop: * })) /*infloop*/for(033; <x/>; __iterator__) throw <><x><y/></x></>; else __proto__, prop = (function ([y]) { })();");
tryItOut("switch(@foo) { default: break; case 1: let __parent__;break;  }");
tryItOut("L:with({prop: ( /x/ )(({}))})const constructor, prototype = [];");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:for(function::__count__; (new Iterator()); eval(\"throw @foo;\", false)) {/*for..in*/for(const prototype = <x/> in <><x><y/\r></x></>) continue L;\f }");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/for(__proto__; -<y><z/></y>; __proto__.((p={}, (p.z = (undefined.valueOf(\"number\")))()))) {export __noSuchMethod__;return __parent__; }");
tryItOut("/*for..in*/for(const __count__ in ((function  __count__ (__noSuchMethod__, __proto__) { yield this.__defineSetter__(\"__noSuchMethod__\", new Function) } )(<>((uneval(__proto__)))</>))){throw <> \"\"  << *::*</>; }");
tryItOut("export *;\n[1,2,3,4].slice\n");
tryItOut("let __proto__;__count__\ncontinue ;");
tryItOut("if((p={}, (p.z = __proto__%=@foo)())) { if (eval(\"yield window;\", new (<y><z/></y>)(*::* *= __proto__, (-1)))) __parent__} else {/*infloop*/for(var prop = <x/>; *; <><x><y/></x></>) gc()gc() }");
tryItOut("if((.__noSuchMethod__)) continue\f ; else  if (__proto__|= '' ) {/*infloop*/for(__iterator__; undefined; [z1,,]) return <x><y/></x>\n/*infloop*/L:while(this) }");
tryItOut("/*infloop*/for(const __iterator__ = <x><y/></x>.__parent__; window.@foo\n++; ((yield <y><z/></y>))) {return @foo;{<><x><y/></x></>; } }");
tryItOut("if(*::*) //h\nyield, __proto__; const __parent__;");
tryItOut("throw false;");
tryItOut("function  constructor (prop, __proto__) { return <y><z/></y> } \n");
tryItOut("yield this;");
tryItOut("this.zzz.zzz;");
tryItOut("if(let (__proto__ = <y><z/></y>, __iterator__)  /x/ ) {<x><y/></x>return; } else  if (this.zzz.zzz) (new Function(\"var __parent__ = <x><y/></x>, prop;\"))");
tryItOut("/*for..in*/for(var (prototype(@foo)) in (((__proto__ = []).__defineSetter__)(*.isPrototypeOf(*::*)[(uneval(<><x><y/></x></>))])))var __parent__, __noSuchMethod__ = true;");
tryItOut("if(RegExp()) { if ((<x><y/></x>.prototype = __parent__ = <x><y/></x>, prop = [z1,,]) >= yield 3.141592653589793.__lookupGetter__(\"prototype\")) /*infloop*/for(<><x><y/></x\f></>; 1e+81; *) yield;} else \r/*infloop*/for(let constructor = [z1]; <x><y/></x>; @foo) export *;");
tryItOut("with(<><x><y/></x></> %=  /x/ );");
tryItOut("export prototype;");
tryItOut("L:with({function::constructor: null}){continue L; }");
tryItOut("do {return  \"\" ;export __noSuchMethod__; } while(( /x/g  > prototype >>= <><x><y/></x></>\f) && 0);");
tryItOut("yield __count__\n");
tryItOut("do function (constructor) { yield 1.3 }  while((this) && 0);");
tryItOut("M:switch((this.zzz.zzz)) { case 8: let(prototype = *::*) ((function(){{}})());break; default: /*for..in*/for(const prop = __proto__ in #1#) let __proto__ = 4.;break; case 8: break; /*infloop*/M:for((function ([y]) { })(); true; @foo) {{}; }break; ;break; break;  }");
tryItOut("/*infloop*/for(let ({ constructor: ({ __proto__: __iterator__, __noSuchMethod__: prop }) }) = this.__defineGetter__(\"prop\", \f[z1]); yield <x><y/></x> == constructor; [1,,]) throw 1e-81;");
tryItOut("{}");
tryItOut("let(5.0000000000000000000000) { for(let y in [5,6,7,8]) try { yield *[ /x/ ]; } finally { let(prototype = <x><y/></x>) ((function(){yield __proto__;})()); } ");
tryItOut("while(([15,16,17,18].sort(function(y) { yield y; function(q) { return q; }; yield y; }, __count__).@foo) && 0)switch(*::*) { default: yield; }");
tryItOut("{switch(<>\f\f<x><y/></x></>) { default:  } }");
tryItOut("try { __parent__ = __noSuchMethod__; } catch(__noSuchMethod__ if let (prop = function::constructor = __iterator__, prototype = __proto__) (*)) { return; } ");
tryItOut("if(gc()) { if (setter.__count__[<><x><y/></x></>.__proto__ = <><x><y/></x></>]) {{return <x><y/></x>;let (__iterator__, prop = @foo) {  } } } else {if((this++)) {__iterator__; }return; }}");
tryItOut("( /x/g );continue L");
tryItOut("/*infloop*/do var __noSuchMethod__ = <x><y/></x>, __noSuchMethod__ = <x/>\n while(new new (__proto__)(, <x/>)(()));");
tryItOut("do (false); while((__iterator__ = <><x><y/></x></>) && 0);");
tryItOut("{L: gc }");
tryItOut("return;");
tryItOut("L:with({prototype: (prop = this)}){export constructor;return <><x><y/></x></>; }");
tryItOut("(new Function(\"\"))\n");
tryItOut("/*for..in*/for(let [prototype, __count__] = eval(\"1e+81.watch(\\\"__noSuchMethod__\\\", *)\", constructor = <><x><y/></x></>) in \f!) <x><y/></x>;");
tryItOut("while((((*.__defineSetter__(\"__count__\", (return;).__defineSetter__)) + *::*(<x/>, *::*) && prop = (p={}, (p.z = window)()))) && 0){if(__count__) { if ((<x><y/></x>.eval(<><x><y/></x></>))) (<><x><y/></x></>); else return try { function ([y]) { }; } catch(prototype) { break ; } ;} }");
tryItOut("if((let (prop) <x><y/></x>)) { if (*\n) {let __noSuchMethod__ = window, function::prop; }} else {throw .2;__noSuchMethod__ = #3={a:#3#}, prop = -3/0; }\n");
tryItOut("/*for..in*/for(var ({ __iterator__: \f({ __iterator__: prop.constructor, \tprototype: ({ __count__: __count__ }) }), __iterator__: ({ __count__: __parent__ }) }) in (('haha'.split)(__noSuchMethod__ = undefined + break L;.throw(__count__)))){M:if(*::*) {Math.pow } }");
tryItOut("__proto__ = true, __iterator__;");
tryItOut("/*infloop*/for(var constructor; typeof (function ([y]) { })(); constructor.__count__ = function::prop = <x/>) {export __count__;let (__iterator__) { *::*; } }");
tryItOut("if(<x><y/></x> += __parent__) { if (undefined.throw( \"\" )) {gc()export *; }} else throw <><x><y/></x></>\nvar __noSuchMethod__, constructor = <><x><y/></x></>;");
tryItOut("do {const __iterator__;return; } while((__parent__ = <x/>.unwatch(\"constructor\")) && 0);");
tryItOut("M:do {(<x/>); } while((3/0.unwatch(\"prototype\").prop) && 0);");
tryItOut("/*for..in*/for(var r in ((Math.sin)(<><bbb xmlns: try { let(prop) { __parent__ = __parent__; } catch(__iterator__ if (function(){with({}) *::*;})()) { let(prototype =  /x/g ) ((function(){yield <><x><y/></x></>;})()); } catch(constructor if (function(){for(let y in [5,6,7,8]) ( /x/ );})()) { for(let y in []); } catch(prototype if (function(){__parent__ = prop;})()) { for(let y in [5,6,7,8]) let __noSuchMethod__, prop = function ([y]) { }; } catch(prop) { return; } finally { return; } ccc=\"Number((p={}, (p.z = <x><y/></x>)()) ? new <><x><y/></x></>() : (__noSuchMethod__.constructor getter= (new Function(\"return;\"))))\"><prop(window) ccc:eee></ccc:eee></bbb><ccc:ddd><bbb xmlns=\"(prototype = [z1])\"><xxx {constructor}={constructor} /> </bbb></ccc:ddd></>)))/*infloop*/M:while(this.__defineSetter__(\"prototype\", Math.sin))yield -0;");
tryItOut("/*for..in*/L:for(let ~constructor['__count__'] in ((*)((({}).__lookupGetter__).call( /* Comment */<y><z/></y>, ))))(@foo);");
tryItOut("{{} }");
tryItOut("/*infloop*/for(var prop; (-1 ^= __noSuchMethod__) / null.@*; eval(\"<y><z/></y>\", <><x><y/></x></>)) with({prototype: Function()})if( /x/ ) {;continue M; } else  if (prop = <><x><y/></x></>) yield; else ");
tryItOut("/*infloop*/for(var constructor; constructor = (#2=(({}).__lookupGetter__).call(new (yield window)(), (let (__proto__ = <x><y/></x>) ), null)); <x><y/></x>.__lookupSetter__(\"let\") < ({ constructor: __proto__, prop: x::__parent__ }) = window >> __iterator__.__defineSetter__(\"prop\", ((/a/gi)( /x/  <= <x/>)).apply)) {;\nexport prototype;gc()\nlet constructor, prop; }");
tryItOut("/*infloop*/do \t{const __count__;{} } while(this.__defineSetter__(\"prop\", function (__count__, __count__) { yield @foo } ).valueOf(\"number\"))");
tryItOut("/*infloop*/for(let ({ __iterator__: prop }) = this.zzz.zzz; <x><y/></x>.__lookupSetter__(\"function::__count__\"); new (Math.sin)()) (null);");
tryItOut("while(((eval(\"<><x><y/></x></>\", window))) && 0);");
tryItOut("do ; while((0) && 0);");
tryItOut("return;");
tryItOut("M:do {} while((\t<bbb xmlns=\"(({__noSuchMethod__: true,  set __proto__ __parent__ ()null }))\"><ccc:ddd><x><y/></x></ccc:ddd></bbb>.((<x/> if ( \"\" )))) && 0);");
tryItOut("/*infloop*/for(prop; prototype+=*::* = (function ([y]) { })() * new ({}).hasOwnProperty(@foo); ('fafafa'.replace(/a/g, (new Function(\"let prop, __count__ = <x><y/></x>;\"))))) {{return; } }");
tryItOut("with({__noSuchMethod__: 'fafafa'.replace(/a/g, (prototype).__defineSetter__)}){gc()(false); }\nif(__noSuchMethod__.prop) {( /x/ );<x><y/></x>; }");
tryItOut("if(*) export __iterator__; else x::prop, __proto__ = null;");
tryItOut("if((__count__.__iterator__)) { if (1.2e3.isPrototypeOf(prototype).__lookupSetter__(\"__proto__\")) ;\f} else /*for..in*/M:for([__iterator__, prop] = \f* < <x/> in false) {return undefined; }");
tryItOut("if([z1]) { if (__parent__ = prop getter: Function) {return;; } else {export *; }}");
tryItOut("yield  \"\" ;");
tryItOut("/*infloop*/L:while((true >> +=))return [1];");
tryItOut("(<x>\f<y/></x>)\n \"\" ;");
tryItOut("var __parent__ = prop;");
tryItOut("{}");
tryItOut("L: prototype = *::*, prop = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var constructor in ((Math.sin)(<><x><y/></x></>.((#1=*)) ? <x/>.eval(window).isPrototypeOf(5.0000000000000000000000 .. <y><z/></y>) : null))){/*for..in*/for(prop in ((new Function)( \"\" ))){Math.pow{} } }");
tryItOut("/*for..in*/for(const [get, prototype] =  \"\"  in true) return <x><y/></x>;");
tryItOut("if(\t /* Comment */null) ; else  if (<x><y/></x>.__defineGetter__(\"function::constructor\", function (constructor, __iterator__)__iterator__)) {__proto__, prototype = true; } else { }");
tryItOut("with(((<x><y/></x> for each (__parent__ in <y><z/></y>)))){return;var __proto__ = __parent__, __parent__; }");
tryItOut("M:if(null) yield <y><z/></y>;");
tryItOut("try { export *; } catch(prop) { let __parent__; } ");
tryItOut("if( /x/g ) {; } else const __parent__, prop");
tryItOut("/*for..in*/M:for(var <><x><y/></x></>['__parent__'] in <><x><y/></x></>) return @foo;");
tryItOut("return this.__defineGetter__(\"__parent__\", ({}).__lookupGetter__);");
tryItOut("{export *; }");
tryItOut("/*infloop*/M:for(*.__lookupGetter__(\"__count__\") % (({}).__defineGetter__(\"__iterator__\", Math.pow)); null <= 1.3((delete <x><y/></x>)); this.zzz.zzz) var constructor = function(id) { return id };\t");
tryItOut("{const __proto__;[({ __parent__: __parent__ })] } const constructor;");
tryItOut("L:if((gc() in (prototype))) if(<x/>) { if (window) {break ; } else } else {(\t*); }");
tryItOut("if(([] |= <x><y/></x>)) { if (1e+81.__lookupSetter__(\"__iterator__\")) let __proto__ = this, function::__count__;} else {throw <x/>; }");
tryItOut("try { return  \"\" ; } finally { export *; } ");
tryItOut("with({prototype: (prototype.constructor setter= Math.pow .@*:: (function ([y]) { })()++)}){/*for..in*/for(const let in (((null).__defineSetter__)((null %= 0/0)))){export prop; } }");
tryItOut("{var prop;continue ; } const __noSuchMethod__;");
tryItOut("/*infloop*/M:for(var ({ prototype: __proto__ }) =  /* Comment */-3/0 .@x:: -0; ('fafafa'.replace(/a/g, /a/gi)); (prototype = __parent__)) ({ __proto__: (prototype), __parent__: ({ yield: ({ __proto__: constructor, __count__: __noSuchMethod__ }), prop: ({ __noSuchMethod__: __noSuchMethod__, __count__: __proto__ }) }) }), return;");
tryItOut("while((constructor.(window) , <x><y/></x>.hasOwnProperty(\"__iterator__\")\f) && 0)__count__");
tryItOut("L:if() { if (false) { /x/g ;break ; }} else {export *; }\nthrow __count__;\nconst __proto__, __count__;\n\n");
tryItOut("M:while(((gc).call(<y><z/></y>, false).__lookupGetter__(\"__parent__\")) && 0){return;export *; }");
tryItOut("return *::*; const constructor;");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: ({ prototype: function::prototype, prototype: [, , ({ __proto__:  { return ({__proto__: [],  get __count__(__noSuchMethod__, __proto__)this }) << __proto__ = <x/> ,  ''  }  })] }), constructor:  { return 1.2e3 }  }) = (new Object(<><x><y/></x></>)) | 0.1 - arguments; 'fafafa'.replace(/a/g, (1 for (x in []))); __count__ = __count__ = arguments) if(({}) ? <><x><y/></x>' />\f : [z1,,]) {throw window;@foo; } else  if (3) ;");
tryItOut("var __proto__ = (-0), __noSuchMethod__ = false;");
tryItOut("if((#2=({__parent__: ([[]] :: 1e-81)}))) { if ((each = [[1]]) ? [,,]//h\n : ( ''  .@ @foo)) {break M; } else <x/>;}");
tryItOut("[z1,,];");
tryItOut("L:with(1e+81)gc()");
tryItOut("(<><x><y/></x></>);");
tryItOut("with({}) yield;if(__iterator__.(<><x><y/></x></>).watch(\"prop\", window)) return; else  if (0.hasOwnProperty(\"prop\")) gc() else {continue M; }\nconst function::__count__ = 1e+81, __count__ = <><x><y/></x></>;");
tryItOut("if(null >> true) {switch([__proto__]) { default: export *\nbreak; var __iterator__;break; case this.__defineGetter__(\"prototype\", 1e4): break; var prototype = __proto__;break;  }continue M }");
tryItOut("/*for..in*/for(\t__count__ in ((function (prototype) { <><bbb xmlns:ccc=\"1.3\"><ccc:eee></ccc:eee></bbb></> } )((this\n))))M:if(__proto__) {__noSuchMethod__; } else export __noSuchMethod__;");
tryItOut("/*infloop*/for(let __iterator__ = 'fafafa'.replace(/a/g, function () { yield <><x><y/></x></> } ); (new Boolean()); __iterator__.*::*) {gc()constructor = *, __noSuchMethod__ = function ([y]) { }; } const prototype;");
tryItOut("if(<><x><y/></x></>.isPrototypeOf(prototype =  \"\" )) {break ; } else  if (__parent__|=__count__) {__noSuchMethod__; }");
tryItOut("/*infloop*/while(null)__parent__ = __iterator__;");
tryItOut("continue L;");
tryItOut("");
tryItOut("if([setter, , constructor, , ] = eval(\"<><x><y/></x></>\", undefined)) /*infloop*/L:for(var [prototype({ __proto__: ({ __count__: __parent__ }) }) = __proto__.(eval(\"M:if(<x><y/></x>) { if (__count__) yield <y><z/></y>;} else __noSuchMethod__;\",  /x/g  in 1.3)); (({}))[<x><y/></x>]; <><xxx \t{__iterator__}={window} /></>) while((1.2e3;) && 0){(<><x><y/></x></>); } else  if ((yield (#0=({__noSuchMethod__: __noSuchMethod__})))) {switch(constructor =  /x/ ) { default: break;  } }");
tryItOut("/*for..in*/for(var __proto__ = (prototype = prop) in new (this)(<x><y/></x>)) /*for..in*/L:for(let [__count__, __parent__] =  ''  in <y><z/></y>\t >>= <y><z/></y>) {__iterator__ }");
tryItOut("var prop = <><x><y/></x></>, __count__;");
tryItOut("if(((<><x><y/></x></> for each (__parent__ in window)).valueOf(\"number\"))(prop.prototype getter= [1,2,3,4].slice) <= Exception([,,z1],  \"\" ) ? prop.prop = delete (false.__lookupGetter__(\"__parent__\")) : (prototype.valueOf(\"number\"))) export *; else {__noSuchMethod__ = __iterator__; }");
tryItOut("with({__proto__: (#2=constructor)}){};");
tryItOut("/*for..in*/for(var __parent__ = ((null).__defineSetter__)() in prototype.prop) {var __proto__ = <><x><y/></x></>;(<x><y/></x>); }");
tryItOut("with(<{__noSuchMethod__}></{__noSuchMethod__}><ccc:ddd><ccc:ddd><x><y/></x>yyy</ccc:ddd></ccc:ddd>){({a1:1});const constructor; }");
tryItOut("if(([11,12,13,14].sort)) {( \"\" );{} } else  if (({ __parent__: __iterator__ }) =  \"\"  >>>=*) (<x><y/></x>); else {return;Math.sin }");
tryItOut("try { return [15,16,17,18].filter(Math.sin, -1).__defineGetter__(\"prop\", function  __iterator__ (prototype)window()); } finally { let([({ __noSuchMethod__: __count__, __iterator__: __count__ }), , ({ : __iterator__ })] = ({ __noSuchMethod__: ({ __count__: __parent__, __parent__: __count__ }), prop: ({ constructor: __count__ }) }) = (<y><z/></y>)[false].__defineSetter__(\"prototype\", [1,2,3,4].slice)) { throw __noSuchMethod__; } ");
tryItOut("with({__count__: (<><x><y/></x></> / <x><y/></x>) ? (p={}, (p.z = false)()) : [15,16,17,18].sort(3, <x/>)}){throw window;with((((uneval(constructor)))))return; }");
tryItOut("with(033.__iterator__){yield __iterator__; }");
tryItOut("");
tryItOut("L: {<>prototype = *::*, __proto__</>; }");
tryItOut("M:with({__iterator__:  \"\" })__count__, constructor =  /x/g ;");
tryItOut(" for (constructor in <>*::*</>) for (__iterator__ in <><x><y/></x></>\n) for each (prop in window)\n");
tryItOut("if(<x/>) {switch(3.141592653589793) { default: function  __proto__ () { return #3={a:#3#} } break; case __iterator__: (033).watchbreak;  } } else  if (((__iterator__.prop)('fafafa'.replace(/a/g, /a/gi), new (__proto__ = [,,])(-<x/>, <x><y/></x>)))) {yield;return; }");
tryItOut("yield [constructor].some(__noSuchMethod__);");
tryItOut("let(__noSuchMethod__ =  \"\" , __iterator__) ((function(){export break ;;})());");
tryItOut("return true;");
tryItOut("M:if(<><>__count__.*</></>) const constructor =  \"\" , constructor; const __proto__; else  if (eval(\"\\n<x/>\", window.valueOf(\"number\"))) let __parent__; else {L:if(__count__%=<><x><y/></x></>) { if ([11,12,13,14].some) {; } else {break L;({}); }}/*for..in*/for(let __parent__ in ((function  constructor (__count__) { //h\nyield window } )(1e81)))window; }");
tryItOut("return (constructor = *::*\t);");
tryItOut("L:do export *; while((<><x><y/></x></>) && 0);");
tryItOut("if(yield  '' ) { if (<><x><y/></x//h\n></>.isPrototypeOf(<><x><y/></x></>)) ( /x/g );} else \n{}\n const __parent__;");
tryItOut("/*for..in*/for(var [each, __parent__] = (p={}, (p.z = <x><y/></x>)()) in <y><z/></y>.watch(\"__proto__\", function  __noSuchMethod__ () { return <><x><y/></x></> } ) >>= ) /*for..in*/for(prototype in (((__parent__).call)(Boolean(false, *)))){<y><z/></y>; }");
tryItOut("if(eval(\" \\\"\\\" \",  /x/g )) (<x><y/></x>); else  '' ;");
tryItOut("yield");
tryItOut("/*for..in*/for(var [__count__, __iterator__] = [] = *::*.@foo ? this.__defineGetter__(\"constructor\", /a/gi) : 1e81 ?  /x/g  : <><x><y/></x></> in #0=({__noSuchMethod__: [15,16,17,18].some(function(q) { return q; }, __parent__)})) {if(window) {} else throw #3={a:#3#}; }");
tryItOut("export *;(*::*);");
tryItOut("/*for..in*/for(let __parent__ = [, ({ prop: __count__ }), , , __iterator__] = __count__.__parent__ = this in (prototype = [11,12,13,14].map)) try { (<y><z/></y>); } catch(prop) { var prop, __parent__ = <x><y/></x>; } finally { function  prototype (constructor) { var __iterator__ = <x/>; }  } ");
tryItOut("let(__noSuchMethod__ = @foo.__lookupGetter__(\"__count__\")) { this.zzz.zzz;");
tryItOut("L: { }");
tryItOut("M:with({__proto__: 0})/*infloop*/for(__noSuchMethod__; (__iterator__ = ({ prototype: prop, constructor: __noSuchMethod__ })); (this.throw(<y><z/></y>))) {yield;(3.141592653589793); }");
tryItOut("\nif(<x/>) __iterator__, __noSuchMethod__ = <x/> else  if (__noSuchMethod__) {get; } else Math.sin");
tryItOut("while((([constructor = ++*].some(function ()let (__parent__ = true) null))) && 0)M:if(<y><z/></y>) { if ([1]) __proto__ = <y><z/></y>} else return *::*\n");
tryItOut("/*infloop*/L:for(__iterator__ = \f /x/ [null]; __noSuchMethod__ = ( /x/g .propertyIsEnumerable/*\n*/(\"__noSuchMethod__\").eval(({__parent__: [1], __parent__: this }))); (function  prototype (__parent__, [({ getter: ({ __count__: __iterator__ }), __parent__: ({ __parent__: prop }) }), prop, , , ({ prototype: ({ each: __proto__ }), 'fafafa'.replace(/a/g, ({}).__lookupGetter__): ({ prototype: prototype }) })]) { export *; } ).call(([<x><y/></x>]), (new .2(-3/0)), prototype)) {M:if(window) { if (<x/>.__defineSetter__(\"prop\", this) != this.__defineGetter__(\"function::__count__\", Math.sin)) yield [[1]]; else {var , __proto__;(1e+81).watch }}/*for..in*/L:for(let __parent__ in <><x><y/></x></>) {; } }");
tryItOut("if(@foo.unwatch(\"__iterator__\")[(- ''  ? <x><y/></x>.__lookupGetter__(\"prop\") : <x><y/></x>)]) {return; } else  if (null && @foo\t + <x/>.hasOwnProperty(\"__parent__\")\t | var __proto__ = __iterator__: *; [[]].*) {/*infloop*/while(<x><y/></x>) } else {yield;if( \"\" ) { if (*) gc()} else gc() }");
tryItOut("/*for..in*/for(var (constructor) in [,,z1]) {prop = 0/0;/*for..in*/for(var __noSuchMethod__ in <y><z/></y>)  }");
tryItOut("{{{yield; }const __proto__; }/*for..in*/for(const __count__ in ({function::__count__: __proto__ = 1.2e3})) const __proto__; }");
tryItOut("this.zzz.zzz;");
tryItOut("let prop =  \"\" ;/*infloop*/L:for(new [,,](prop);  \"\" --; constructor = [1,,]) yield  \"\" ;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let ({ __parent__: __count__, __count__: (({ this, falseprop: prop, __proto__: prototype }) }) = __proto__ = undefined; (constructor.(prototype.valueOf(\"number\"))); [set] = <><x><y/></x></>.eval(false)) {export *; }");
tryItOut("/*for..in*/M:for(let prop =  /x/g  in <y><z/></y>) { }");
tryItOut("export *;yield;");
tryItOut("/*infloop*/for((<><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", Math.sin)); this.__defineGetter__(\"__count__\", function(y) { yield y; <y><z/></y>;; yield y; }); yield <x><y/></x>) /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in constructor) {throw  '' ; }");
tryItOut("<xxx>{constructor}</xxx>yyy");
tryItOut("return 'fafafa'.replace(/a/g, <y><z/></y>);");
tryItOut("L:if((function::prop.__iterator__ =  '' .__noSuchMethod__)) { if ((({__count__:  /x/ ,  get __proto__ prototype (prototype) { return undefined; }  })).__lookupSetter__(\"constructor\")) var each;} else M:if( /x/g ) {return <x><y/></x>; } else  if (5.0000000000000000000000) {return; } const prototype;");
tryItOut("let (({ constructor: __iterator__, __noSuchMethod__: __noSuchMethod__ }) =  if ( /x/ )) { /*infloop*/for(({ __parent__: constructor }) = <x><y/></x> .@*:: 1e81; new (__proto__)(null); (({}).hasOwnProperty).call(window, )) export *; }");
tryItOut("/*for..in*/for(const 033.isPrototypeOf(3.141592653589793).delete in ((((([].__defineGetter__(\"function::__parent__\", function  __noSuchMethod__ (prototype) { try { yield; } finally { return prototype; }  } )).valueOf(\"number\"))[<y><z/></y>]).__defineSetter__())(constructor.isPrototypeOf(this)))){return this.__defineSetter__(\"prototype\", eval); }");
tryItOut("<><x><y/\r></x></>;");
tryItOut("const __parent__ = (prop = undefined), prototype;");
tryItOut("prop;");
tryItOut("do constructor while((__iterator__) && 0);");
tryItOut("return;");
tryItOut("with({constructor: (<><x><y/></x></> .. <x><y/></x>)})yield  \"\" ;");
tryItOut("do const __proto__ = <><x><y/></x></>; while((prototype = *::*) && 0);");
tryItOut("return");
tryItOut("break ;");
tryItOut("if(1e-81\n) { if ( \"\" ) [nulleach (__parent__ in this)] | new undefined;} else yyy");
tryItOut("__noSuchMethod__");
tryItOut("; const prototype;");
tryItOut("/*for..in*/for(let ((<x><y/></x>.(<x><y/></x>)).__count__)(function::__parent__ = (yield *)) in (((yield 0x99))((__count__ = this).@foo))){__noSuchMethod__, constructor = 1.2e3; }");
tryItOut("if((<x><y/></x>[4.])) {yield;export *; } else  if (([<y><z/></y>.__iterator__].map((1 for (x in []))))) gc()");
tryItOut("let (prop) { with({}) constructor = constructor; }");
tryItOut("/*for..in*/for(var prop in eval(\"throw <y><z/></y>;\", <x/>)) {throw false\nyield; }");
tryItOut("if(<>  </>) x::__noSuchMethod__ else  if ([this.zzz.zzz.unwatch(\"prototype\")].sort(gc)) <><x><y/></x></>;");
tryItOut("let(__iterator__ = __noSuchMethod__ = (([({a1:1})].sort(gc))(*::*--)), constructor) ((function(){throw __parent__;})());");
tryItOut("/*for..in*/for(var __iterator__ = (this.prototype || this ^= <><x><y/></x></>) in prototype.([z1].unwatch(\"constructor\"))) {(--<x><y/></x>);function (__noSuchMethod__) { const prototype, constructor = null; }  }");
tryItOut("L:with({__count__: new null.yoyo(this)}){this__parent__ =  /x/g , __noSuchMethod__; }");
tryItOut("{break ; }");
