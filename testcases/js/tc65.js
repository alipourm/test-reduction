tryItOut("L:do {yield } while((<x><y/></x>.( \"\" )) && 0);");
tryItOut("L:switch( \"\"  ^=  \"\" ) { default: break;  }");
tryItOut("switch((p={}, (p.z = constructor|=window)())) { case 5: break; {}break; case <x/>: break; gc()break;  }");
tryItOut("let(__parent__, __parent__) ((function(){yield .hasOwnProperty(\"__noSuchMethod__\");})());");
tryItOut("return;");
tryItOut("<x><y/></x>");
tryItOut("L: yield (__iterator__.(( /x/  instanceof  '' )));");
tryItOut("if(__noSuchMethod__.prototype) throw this;");
tryItOut("/*for..in*/for(var constructor = this.zzz.zzz in <x><y/></x>) if(<y><z/></y>) {throw [1,,]; } else  if (this) var __parent__, prototype; else {const __iterator__ = __noSuchMethod__; }//h\n");
tryItOut("return;");
tryItOut("/*infloop*/while(this)/*for..in*/for(var [__parent__, __proto__] = -0 in  \"\" ) {gc() }");
tryItOut("if(__noSuchMethod__ @ prototype >>= (try { function(y) { yield y; export prototype;; yield y; } } finally { new Function } ).__lookupGetter__(\"prototype\")) __count__ = __count__;");
tryItOut("if(function ([y]) { }\n) {throw window\nyield [1,,];(*); } else  if (0()) {return <><x><y/></x></>;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (prop) in export constructor) /*infloop*/do ; while(null);");
tryItOut("/*for..in*/for(const [constructor, prototype] = [11,12,13,14].map in <><x><y/></x></>\f) {throw <><x><y/></x></>; }\n/*infloop*/for(const prop = false\n; ({constructor: 033 }) >= (__iterator__ ||  /x/g ); __noSuchMethod__ = false) {return;<>export *;</>; }\n");
tryItOut("{var prototype, __iterator__if(undefined) let __iterator__; else gc() }");
tryItOut("/*infloop*/do {<x/>;; } while(#1=[#1#]);");
tryItOut("((window.throw(<y><z/></y>)))(prototype ? 1.2e3 : null) = __parent__;");
tryItOut("/*for..in*/for(let prop in (((-0))(new new Function()))){/*for..in*/L:for(const __iterator__ = <x/> .@x:: null in false) ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in (({constructor getter: 'haha'.split, __parent__: true }))([15,16,17,18].sort((({}).hasOwnProperty).call,  /x/g )) = this.throw(false)) {function (*::*, prototype) { yield <x/> } (0/0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor((function(q) { return q; }).call(#0=({prop:  '' }), __proto__ = __proto__)) in  ''  :: undefined) {if(@foo) {gc() } }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((window)((__count__ = ( /* Comment */window)))))__iterator__.prop = __parent__;");
tryItOut("/*for..in*/for(constructor(<><x><y/></x></>) in ({a1:1})) yield window; const prototype;");
tryItOut("M:do {\fexport __count__; } while((undefined[<x><y/></x>]) && 0);");
tryItOut("yield;\n(@foo);\n");
tryItOut("/*infloop*/for(const let; true; <y><z/></y> |= *::* .@*:: function(y) { yield y; ({}).__lookupGetter__; yield y; }) (@foo);");
tryItOut("/*infloop*/L:for(var __noSuchMethod__; 0/0; <x><y/></x>) {; }");
tryItOut("/*for..in*/for(let [prototype, prototype] = <><x><y/></x></> -  /x/  in [,]) { }");
tryItOut("/*for..in*/for(const  in ((function (__noSuchMethod__, constructor = [z1,,]) { return #2=({__proto__: <><x><y/></x></>}).* } )(<><x><y/></x></>.hasOwnProperty(\"__count__\")))){prop: <x/> }");
tryItOut("/*infloop*/for(const x::<!--yy-->; <x/>.unwatch(\"constructor\"); (\n*::* ^ true)) const __noSuchMethod__;");
tryItOut("/*infloop*/do return; while()\n");
tryItOut("if(delete  /x/ ) undefined; else <x><y/></x>;");
tryItOut("");
tryItOut("L:with(throw 1.3){/*infloop*/do throw @foo; while( /x/g .watch(\"__noSuchMethod__\", Function));with({__parent__: __iterator__%=*::*})prop = false, __proto__ = 3; }");
tryItOut("if(<y><z/></y>) {export *{(<y><z/></y>); } } else  if (#1=({constructor: ([,,z1][<><x><y/></x></>])}))  else {var __noSuchMethod__, __count__ = false;__proto__; }");
tryItOut("return (<><x><y/></x></>++)\nyield <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__(<><x><y/></x></>) in 3/0) {const prototype, constructor = <><x><y/></x></>; }");
tryItOut("with({__proto__: new (Function)((this)())}){yield <><x><y/></x></>;{__noSuchMethod__ =  /x/g , __parent__ =  /x/ ;export constructor; } }");
tryItOut("yield undefined;");
tryItOut("switch((@foo /  /x/g )) { default: if(<y><z/></y> ^ constructor) return <x><y/></x>; else export *;break; break; case 5: {}break;  }");
tryItOut("/*infloop*/for(let ({ __iterator__: __iterator__, __noSuchMethod__: __proto__ }) = (null.yoyo(undefined).__lookupSetter__(\"prop\")); ({ constructor: __parent__ }) = (uneval( /x/g )); ({prototype: *::* <= 3, __parent__: let (__proto__ = *::*, __proto__) (p={}, (p.z = <y><z/></y>)()) })) /*infloop*/while(([11,12,13,14].some))return;");
tryItOut("/*for..in*/L:for(const [prototype, __proto__] = ({prop = <x><y/></x>\n.__defineGetter__(\"__count__\", ( /x/ ).call) getter: (new Function(\"export prop;\")) }) in new RegExp(*::*,  /x/g )) {throw <x/>;throw <><x><y/></x></>; }");
tryItOut("{yield; }");
tryItOut("false");
tryItOut("if(<x><y/></x>) { if (*::*) return;} else {throw <x><y/></x>;let __iterator__; }");
tryItOut("{}\n");
tryItOut("while((new ((1 for (x in []))) ? undefined.__lookupSetter__(\"__noSuchMethod__\") : (__parent__.unwatch(\"prop\"))((undefined)( '' ) =  /x/ .@foo, prototype = <y><z/></y>)) && 0){let __iterator__ = this.zzz.zzz; }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if((prototype , @foo.__count__ = <x><y/></x> ? <x/> : 3.141592653589793)) {with({__noSuchMethod__.constructor: /*infloop*/for((eval(\"function () { return window } ()\", this.__defineSetter__(\"__parent__\", Math.sin))); [(-0) for (; in false) for each (__noSuchMethod__ in undefined)].watch(\"__parent__\", new Function); prop(<y><z/></y>) = *::*) {}}){return <x><y/></x>;yield; } }");
tryItOut("/*for..in*/M:for(let [__parent__, __proto__] = 'fafafa'.replace(/a/g, function(y) { yield y; const __iterator__ = [z1,,];; yield y; }) in __iterator__) throw <x/>;");
tryItOut("yield;\nthrow <y><z/></y>;\n");
tryItOut("/*for..in*/for([__iterator__, __noSuchMethod__] = ([15,16,17,18].some([1,2,3,4].slice, 0/0)) in *) {(gc).callyield @foo; }");
tryItOut("if(prop) /*\n*/null; else ");
tryItOut("throw prototype;");
tryItOut("__count__ = let (__proto__\n) @foo, __proto__.__count__ = let (prop)  /x/g if(<><x><y/></x></>) var prop, prop = __proto__; else  if (<x/>) {export *; } else {}");
tryItOut("gc()");
tryItOut("M:if((prop =  /* Comment */[[1]] >>>=<>\f<x><y/></x></>.__defineSetter__(\"__proto__\",  /x/ ))) /*infloop*/for((typeof <><x><y/></x></>); eval(\"1e-81\", *); __noSuchMethod__.((-0))) eval(\"(__count__ = *::*)\", constructor != <y><z/></y>), <><x><y/></x></> = *::*()");
tryItOut("with({}) let(__count__ = (--( /* Comment */false))) ((function(){constructor = __noSuchMethod__;})());");
tryItOut("{yield; }");
tryItOut("with({__proto__: __parent__}){{}return 0; }");
tryItOut("if((let \f(constructor, __count__ = this) (({ set __proto__(__count__) { <><x><y/></x></>; }  })))) {export __noSuchMethod__; } else  if (this.__defineSetter__(\"__parent__\", (({}).hasOwnProperty).call)) {{} }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:do {if(<x/>) {export __count__; } else  if (<x><\ty/></x>) {prototype, __proto__ = <><x><y/></x></\t>;yield; } else {export *;({}).__lookupGetter__ } } while((#2=({__parent__: 0.1})));");
tryItOut("let ([__noSuchMethod__, , , ], [[], , ]) { return; }\n\nyield [];\n\n");
tryItOut("if(*::*.eval(__parent__)) { if (prop.constructor%=new ({}).__lookupGetter__(#1=[#1#])) {const __count__ __proto__ = #1#, prop = 0.1; } else }");
tryItOut("/*infloop*/while(<y><z/></y>, ( /x/  for (constructor in true) for each ((__parent__) in  '' ) if (<x/>)) = (<x><y/></x>.throw(__parent__.(__iterator__)))){/*infloop*/M:for(var __noSuchMethod__; <x/>; (({prototype: __noSuchMethod__ == true}))) {continue L;let __proto__, prop = [[]]; } }");
tryItOut("if((let (__count__) <x><y/></x>)) ; else  if (*::*) {} else {if(window) {} else  if (@foo) ; else export __parent__; }");
tryItOut("/*for..in*/for(__parent__((prop = constructor)) in (([1,2,3,4].slice)( /* Comment */(new  /x/ \f))))try { export *; } finally {  } ");
tryItOut("");
tryItOut("throw true\nM:if({}) if(<x><y/></x>) { if (<x/>) {return;yield <><x><y/></x></>; } else {yield;break ; }}");
tryItOut("/*for..in*/for(__noSuchMethod__ = (new (window)() for each (__parent__ in <x><y/></x>) for each (__parent__ in *)) in [15,16,17,18].map(false,  \"\" )) const __count__, constructor = *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in  /x/g ) yield;");
tryItOut("if(this) { if (<x><y/></x>) return;} else (<x/>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in ((<x><y/></x>.unwatch(\"__proto__\")) &= (__iterator__ = yield))) export __noSuchMethod__;");
tryItOut("/*infloop*/do {yield; } while(this);__count__, __iterator__;");
tryItOut("/*infloop*/for(const ({ prop: prototype }) = (__parent__ = <y><z/></y>); __iterator__; this) {(<x><y/></x>); }this.zzz.zzz;");
tryItOut("/*infloop*/for(__proto__ = <x/>; @foo; <><x><y/></x></>) {export *; }\nreturn this;\n");
tryItOut("/*infloop*/do {return;\t{} } while(new (function(q) { return q; })((eval(\"return;\", 1e+81)), \n(__count__) += (yield <y><z/></y>)));");
tryItOut("return;");
tryItOut("if([15,16,17,18].sort(Math.pow, <><x><y/></x></>)) while(((*::*)) && 0){try { {} } finally { gc() }  } else {break ; }");
tryItOut("const __count__\n\n");
tryItOut("if(constructor = null) /*infloop*/do {throw <><x><y/></x></>;/*for..in*/for(let [prop, prop] = <><x><y/></x></> in <y><z/></y>) {} } while(__proto__(*).propertyIsEnumerable(\"prop\")); else  if (this(<y><z/></y>)) {}");
tryItOut("with({__proto__: prototype})continue L;");
tryItOut("/*for..in*/for(const [__iterator__, __noSuchMethod__] = RangeError() in <x/>) {M:if([,]) return  \"\" ; }");
tryItOut("L:while((1e4\n) && 0)with({}) return (*::*)( if (null), <x/>);");
tryItOut("function  prop (__proto__, __parent__) { yield undefined }  const __count__;");
tryItOut("<y><z/></y>\nthrow <y><z/></y>;");
tryItOut("{}gc()");
tryItOut("if((@foo.@foo)) const __iterator__, __noSuchMethod__; else  if ((false())) { \"\" ;/*for..in*/for(const __count__ in (((function  [] () { return <x><y/></x> } ).apply)(window))){export prototype; } } else {const __parent__ = null, prop = 0; }");
tryItOut("/*infloop*/for(let prop; typeof this; this if ( /x/g ).prototype = (({constructor: <><x><y/></x></> }))) {let __proto__ = *::*, __noSuchMethod__ = <y><z/></y>\nvar __noSuchMethod__;/*infloop*/for(const __parent__ = window;  /x/ ; function ([y]) { }) {const __noSuchMethod__ =  /x/ ; } }");
tryItOut("if([15,16,17,18].sort(0.1, (((new Function(\"__proto__, __proto__ = __proto__;\"))).call(@foo, <><x><y/></x></>)))) {return <x><y/></x>; }");
tryItOut("return this;\ngc()\n");
tryItOut("with({__parent__: (let let = (__count__), prototype;[<y><z/></y>])})while((<><x><y/></x></>) && 0);");
tryItOut("with({prototype: yield *::* ^ __count__\t}){return (<y><z/></y>.__noSuchMethod__); }");
tryItOut("if({__iterator__constructor : ({ get ({ constructor: __noSuchMethod__, prototype: __proto__ })() { ; }  })})) { if ( /* Comment */function::__iterator__) {/*for..in*/for(__iterator__ in ((new Function)(-3/0))){throw __noSuchMethod__; } } else return __iterator__;}");
tryItOut("/*for..in*/M:for(__parent__ in  /* Comment */((<x/> if (function(id) { return id })))) {return;export __count__; }");
tryItOut("{return; }");
tryItOut("/*infloop*/do  '' ;' } while(__noSuchMethod__.((@foo.unwatch() <><x><y/></x></>; )));");
tryItOut("//h\nlet __count__ = __count__, prototype; const __parent__\n{}");
tryItOut("if(({ __iterator__: ({ constructor: prop }), prop: __proto__ }) = ((yield (__noSuchMethod__ = false)))) /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in window) {/*for..in*/for(__count__ in ((function(q) { return q; })(<><x><y/></x></>))){const __proto__ = undefined, __parent__ = <y><z/></y>;; } } else  if (eval(\"(__count__ = <x><y/></x>)\", false.__proto__)) {/*infloop*/do gc()\n while(({__noSuchMethod__: @foo}));; } else { /x/ \n; }");
tryItOut("L: export __noSuchMethod__;");
tryItOut("/*infloop*/M:for(;  \"\" ; __count__ = ((prop = constructor\f) if (*)).__parent__) let __iterator__, __count__;");
tryItOut("if(<><>yyy</></>) { if (__parent__ = \f<y><z/></y>.@foo) {/*for..in*//* nogeckoex bug 349964 */L: for  each\f(var constructor in this) return;let (function::__parent__ = this) { break M; } }} else L:with({__parent__: <bbb xmlns:ccc=\" \"\" \"><ccc:eee></ccc:eee></bbb>.((<x><y/></x>[0.1]))}){ }");
tryItOut("{ }");
tryItOut("with(__noSuchMethod__.__lookupGetter__(\"__count__\") ? (({__proto__ getter: gc,  set function::constructor(constructor, __count__)function(id) { return id } })) : (__parent__)[<x><y/></x>].*)#1=[#1#];");
tryItOut("return\n");
tryItOut("prototype = 0, __count__ = <x><y/></x>\n");
tryItOut("(window)");
tryItOut("let(__proto__ = [0.1 for each (__parent__ in true)]) { throw StopIteration;");
tryItOut("/*infloop*/L:for(const __iterator__ = prop = <x><y/></x>.(undefined).eval(eval(\" /x/ \", ).__lookupGetter__(\"__iterator__\")); <y><z/></y>; (3.141592653589793())) yield;let __proto__, constructor = true;");
tryItOut("try { this.zzz.zzz; } catch(__count__ if eval(\"{}\", <x><y/></x>.eval([this for each (__count__ in <x/>)]))) { this.zzz.zzz; } catch(__proto__) { \n } ");
tryItOut("switch( /x/g ) { default: {} const __proto__;continue ; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = (<><x><y/></x></> !== (-0)) ^ @foo in (p={}, (p.z = (eval(\"{}\", <><x><y/></x></>)))())) {break ; }");
tryItOut("/*infloop*/L:do {(function () { return <x/> } ).applybreak M; } while(*);");
tryItOut("M:if(new [15,16,17,18].filter(function  __count__ ()*, @foo)( /* Comment */<><x><y/></x></>) ? ([new (function(y) { yield y; export *;; yield y; })() for each (prop in <x><y/></x>)*]) : (*::*)[ /x/g ]) {return null;{}\n\ngc()\n\n } else  if ((<x><y/></x>.valueOf(\"number\")).unwatch(\"prop\")) {;var prototype = false, __iterator__ = @foo; }");
tryItOut("__proto__");
tryItOut("/*infloop*/while(@foo){throw __count__;; }");
tryItOut("try { with({}) return; } catch(__count__ if (function(){break M;})()) { for(let y in []); } catch(__iterator__) { this.zzz.zzz; } finally { let(({ __proto__: ({ __count__: __proto__, __parent__: __iterator__ }), prop: __proto__ }) = prototype = __noSuchMethod__, __parent__ = (true for each (constructor in window))) ((function(){try { constructor = __noSuchMethod__; } catch(__iterator__ if (function(){return @foo.valueOf(\"number\");})()) { export *; } catch(__noSuchMethod__ if (function(){return (<y><z/></y>)[@foo];})()) { for(let y in []); } catch(__proto__ if (function(){throw __parent__;})()) { return \n<><x><y/></x></>; } catch(__proto__.constructor) { let(__count__ = [], constructor) { break ; } finally { __proto__ = prop; } })()); } ");
tryItOut("__parent__ = __parent__;");
tryItOut("while((<><x><y/></x></> .@*:: *::* >>= (__count__)( '' ) ? prop :  /* Comment */@foo ^= <x/>.__defineSetter__(\"__parent__\", ({}).__lookupGetter__).__parent__) && 0)let (__proto__, constructor = __noSuchMethod__) { {} }");
tryItOut("/*for..in*/for(prop = ({}).__lookupGetter__ in (prop = prop)) {export __proto__;/*infloop*/M:for(<x/>; false; <x><y/></x>) const constructor;\n }");
tryItOut("try { with({}) { return (p={}, (p.z = <x><y/></x>)()); }  } finally { with({}) { 'fafafa'.replace(/a/g, eval) }  } ");
tryItOut("export *;");
tryItOut("/*infloop*/for(var ; __iterator__.( /x/g  === <x><y/></x> + __count__); (false)\t( /x/g .__count__, <><x><y/></x></>)) {{}let (__proto__ = <x><y/></x>, function::prototype) { Math.sin } }");
tryItOut("yield\nexport constructor;");
tryItOut("for(let y in []);");
tryItOut("while((*::*) && 0){L:if(prototype = prototype) {/a/gi[1,2,3,4].map } else  if ((uneval(<x/>))) {continue L; } else {{} } }");
tryItOut("/*for..in*/for(const prototype in ((new Function)((false)[true]))){(@foo); }");
tryItOut("return;");
tryItOut("if(arguments) { if (<y><z/></y>) {(undefined);return  /x/ ; }} else {}");
tryItOut("{L:with({__count__: null >>= this.yoyo(window)})if(__proto__) {export \f*; } else throw  \"\" ; }");
tryItOut("if(this) {gc()let (__proto__ = this) { export __proto__; } } else yield;");
tryItOut("if(+window.watch(\"prop\", (new Function(\"export __parent__;\")))) { if ((null %= undefined++)) {/*for..in*/for(const __proto__ in @foo) {var __noSuchMethod__; } } else {--(<x/>.__defineGetter__(\"__parent__\", Math.pow)) }}");
tryItOut("try { throw __parent__; } finally { __iterator__ = constructor; } ");
tryItOut(" get __proto__(__iterator__)#2=[~1e4] %=  '' ");
tryItOut("/*for..in*/for(prototype in ((Function)([11,12,13,14].map)))export *;");
tryItOut("let(({ __proto__: __noSuchMethod__, prototype: prop }) = new String(), __parent__) { this.zzz.zzz;");
tryItOut("/*infloop*/L:for(3; __count__; #3={a:#3#}) {return <><x><y/></x></>; }");
tryItOut("");
tryItOut("if(function  prop (__parent__, constructor)prototype) { if (null.watch(\"__count__\", Function)) (<y><z/></y>);} else {export *;return 0x99; }");
tryItOut("{(<><x><y/></x></>);export __noSuchMethod__; }");
tryItOut("if(( /x/  = ({ __count__: __proto__ }))) { if (gc() const __iterator__;) {export *;let __proto__ = <x><y/></x>; } else if(new (__parent__)(<x/>, __parent__)) { if ((this.__defineGetter__(\"__proto__\", function  __noSuchMethod__ () { var prop = ({}); } )) <<= (this.__defineSetter__(\"function::__proto__\", [1,2,3,4].map))) {L: {;return; } }} else \t{export prototype; }}");
tryItOut("if(~) {yield [1,,];yield; }\nconst __count__ = <x><y/></x>;\n");
tryItOut("/*infloop*/L:for(({ __count__: [, try { return; } catch(__parent__) { throw <><x><y/></x></>; } , ({ __count__: ({ __count__: delete, constructor: try { export *; } finally { return  \"\" ; }  }), delete: ({ constructor: __iterator__, __noSuchMethod__: constructor }) })\n, ], __proto__: (__noSuchMethod__) }) = this.__defineGetter__(\"__proto__\", <x><y/></x>); [15,16,17,18].filter(Math.pow, eval(\"export __iterator__;\", function ([y]) { })).__defineGetter__(\"__count__\", (this.@foo .@*:: (p={}, (p.z = #1=[#1#])())).__defineSetter__); (prototype)( \"\" , <><x><y/></x></>)) throw -1;");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((<x><y/></x>).watch\t)(@foo)))");
tryItOut("if(#1#) yield; else  if (<ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd>) (this);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in ({__parent__ getter: gc, constructor:  /x/g  }) >>> constructor) {continue L; }");
tryItOut("/*infloop*/for(<x/>; <y><z/></y>;  \"\" ) {yield window;gc() }");
tryItOut("/*for..in*/for(let prototype = (__proto__.__iterator__ > ((__proto__.__lookupSetter__(\"__count__\"))().__defineSetter__(\"__noSuchMethod__\", (<y><z/></y>).call))).@foo in new ((__noSuchMethod__ = <x><y/></x>))()) {yield this; }");
tryItOut("return __parent__;");
tryItOut("let (__proto__ = __noSuchMethod__ = <><x><y/></x></>, prop = (new eval(*))) { ({}).__lookupGetter__ }");
tryItOut("yield *::*;");
tryItOut("/*infloop*/for(prototype; __proto__; ! /x/g ) {var __parent__, constructor =  '' ; }");
tryItOut("export *\n033;");
tryItOut("\n");
tryItOut("yield  /x/ \n");
tryItOut("let(__parent__ = ( /* Comment */(eval(\";\",  /x/ ))), [, , ({ __noSuchMethod__: ({ prop: ({ __noSuchMethod__: __iterator__, constructor: __noSuchMethod__ }) }) }), ] =  '' ) ((function(){undefined = __iterator__;})());");
tryItOut("/*for..in*/for(let __iterator__.__parent__ in (((new Function(\"export __proto__;\")))((uneval(1e-81))))){L:if( \"\" ) {{} } else  if (<y><z/></y>) {export prototype; } else gc() }");
tryItOut("if(* .. 0x99 === ( \"\"  instanceof <x/>)) { if (eval(\"({a1:1})\", __proto__)) if(this) { if (<><x><y/></x><\n/>) return; else throw <>\f<x><y/></x></>;} else /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in gc()) let constructor, constructor;}");
tryItOut("return <y><z/></y>;;");
tryItOut("let (__noSuchMethod__ = @foo) { yield __iterator__;let __parent__; }");
tryItOut("while((({ __proto__: __proto__ }) = __proto__ = false[(this.__defineGetter__(\"prop\", (function ([y]) { }).watch))].isPrototypeOf('fafafa'.replace(/a/g, eval) + (@foo.isPrototypeOf(<x><y/></x>.watch(\"__count__\", function(q) { return q; }))))) && 0){const __count__;yield true; }");
tryItOut("/*for..in*/for([<x/>.__lookupGetter__(\"prop\"), yyy] =  '' .__proto__ in undefined) {export *;prototype }");
tryItOut("/*infloop*/for(var __count__; 0 || *::*; -3/0.__defineGetter__(\"__proto__\", <><x><y/></\fx></>)) const __proto__ =  '' ;");
tryItOut("yield *;");
tryItOut("/*infloop*/do {let prototype = <><x><y/></x></>; } while(());");
tryItOut("switch(({prototype setter: [1,2,3,4].map }\t)) { case [(eval(\"return;\", this.__defineSetter__(\"constructor\", Function)))].filter(function (<x/>) { yield function(y) { yield y; {}; yield y; } } ): /*for..in*/\tfor(prototype = 4. in *) continue ;case 4: Function\n/*infloop*/for(let prototype; ({ get __iterator__ __proto__ () { return <y><z/></y>; }  }); ( /x/ .*)) return;\nbreak; default: case 9: break; case 7: let (__iterator__, prototype) { gc() }/*infloop*/while(<y><z/></y>[window] .. this.__defineSetter__(\"prototype\", Math.pow)){gc() }case 4: L:\fif(({constructor setter: (new Function(\"prop: <><x><y/></x></>\")) }))  \"\" break; let (constructor = new Math.sin(), prototype) { export *; }break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in -*::*) {/*infloop*/while(+*::*)<><x><y/></x></>with({prop: constructor+=__parent__ = <x><y/></x>})M:while((<y><z/></y>.propertyIsEnumerable(\"__proto__\")) && 0){{} } }");
tryItOut("L:while(( /x/g [<x/>] >>>=x::constructor = [[]].__count__) && 0)/*infloop*/for(const ({ __count__: constructor }) = __proto__.prop; (((p={}, (p.z = [])()))()); (this.__defineGetter__(\"__count__\", 'haha'.split)\n)) {export constructor;return (-0); }");
tryItOut("if(((*::* * null === @foo) for each (__count__ in __parent__) for each (prototype in 3.141592653589793))) return <y><z/></y>; else  if ([z1,,] += ({})) M:switch(<x><y/></x>) { default:  }");
tryItOut("/*infloop*/do yield *; while(new null() += constructor);");
tryItOut(" const __proto__;");
tryItOut("try { yield arguments; } catch(constructor) { for(let y in [5,6,7,8]) try {  } catch(let) { return <x/>; } finally { (-1); }  } finally { for(let y in [5,6,7,8]) try { (function::__noSuchMethod__); } catch(__parent__) { yield *; }  } ");
tryItOut("if(undefined) {const __noSuchMethod__ = [[1]]; } else  if (-0.watch(\"prop\", (1 for (x in [])))) {break ;[,,] } else {yield; }");
tryItOut("if(__count__ = undefined.__count__) { if (@foo) {yield null;if( /x/g ) { if (0.1) {return this;export *; } else { }} }} else let prop, prop = undefined;");
tryItOut("do \t{if(window) {return; } else  if (@foo) {continue L;return; } } while(((*::* /= null) >>> prototype =  /x/ ) && 0);");
tryItOut("{export *; }");
tryItOut("if(eval(\"<x/>\", __proto__)) {yield 4.; } else  if ((__count__.throw(@foo))) yield this; else yield;\nif(<><><><x><y/></x></>.__proto__</></>) {continue ; } else const __parent__ = this;\n");
tryItOut("M:with(<bbb xmlns=\"<x/>\"><!--yy--></bbb>.hasOwnProperty(\"__proto__\"\t))var __parent__;");
tryItOut("({}).hasOwnProperty\n<y><z/></y>;\n");
tryItOut("M:while((__noSuchMethod__) && 0){let __iterator__, __count__;const constructor; }");
tryItOut("M:if('fafafa'.replace(/a/g, [1,2,3,4].slice)) let __noSuchMethod__, __noSuchMethod__;");
tryItOut("throw constructor;");
tryItOut("return <x/>;");
tryItOut("L:do {gc() } while((<x><y/></x>) && 0);");
tryItOut("{if(null < window) //h\n else {continue L; } }");
tryItOut("/*for..in*/for(const constructor = ({__count__:  \"\"  }) |= eval(\"__proto__\", <x/>) && constructor.__proto__ setter= eval in ((__noSuchMethod__ = *).__defineSetter__).call((eval(\"with({__noSuchMethod__: [[]]}){yield; }\", [<><x><y/></x></>])),  \"\"  %=  /x/g )) if( \"\" ) {throw setter, prototype; }");
tryItOut("");
tryItOut("const prop, propif(new Function()) export *;");
tryItOut("{yield;\n;\n__count__, __iterator__; }");
tryItOut("{( { yield  /x/g  } ); }");
tryItOut("( \"\" )\nlet __parent__, __noSuchMethod__;");
tryItOut("with( /x/g ){/*for..in*/for(const __count__ = 1.2e3 in window)  }");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in  '' ) yield; } while((-1) && 0);");
tryItOut("if(0/0) /*infloop*/while(constructor.__proto__ = {}){{}throw <x><y/></x>;\nyield <x/>;\n }");
tryItOut("const constructor, __count__;");
tryItOut("/*infloop*/while(__proto__.prop\t)__noSuchMethod__");
tryItOut("/*for..in*/for(__parent__ in ((window.propertyIsEnumerable(\"constructor\") != this.__defineSetter__(\"__count__\", (Function).call))(prop = [1])))throw typeof  \"\"  , <x/>;");
tryItOut("switch(([<x><y/></x> for (__parent__ in null)])) { default: const __parent__ = [[1]];break;  }");
tryItOut("/*infloop*/for((( /x/ ))[(uneval([<><x><y/></x></> for each (__count__ in @foo)]))]; __iterator__ = new (@foo)(null); \f1.3.eval(({})) ? <y><z/></y> * <y><z/></y> : (prototype ? <y><z/></y> : <x><y/></x>)) {const __parent__ = <><x><y/></x></>, prototype;export __proto__; }");
