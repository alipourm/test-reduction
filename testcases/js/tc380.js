tryItOut("Math.pow");
tryItOut("/*infloop*/while(each =  /x/ ){prototype: window }");
tryItOut("with( for each (constructor in <x><y/></x>)){yield <x/>;(<><x><y/></x></>); }\nif(*::*) {const function::prototype = -3/0, prop; } else  if ((window)(*::*, this)) {/*infloop*/for(var ({ __noSuchMethod__: prototype }) = __count__.__count__; ({let prototype = 0x99; } for each (__proto__ in <y><z/></y>)); (new String( '' , null))) {} }");
tryItOut("let (__iterator__ = @foo, prop = eval(\"window\", constructor)) { if(([[]].__lookupGetter__(\"__noSuchMethod__\"))) function  __proto__ (__iterator__) { yield this }  else  if (gc()) {export constructor; } }");
tryItOut("/*for..in*/L\f:for(var [constructor, __iterator__] = (__iterator__.unwatch(\"prop\")) in this) return *;");
tryItOut("{; }");
tryItOut("( /x/ )\n");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("if(5.0000000000000000000000) {let get, prop =  \"\" ;/*\n*/let  /x/g \t;, prototype =  /x/ ; } else  if (prop) {export __iterator__;return {}; } else constructor;");
tryItOut("with(({ set prototype(__noSuchMethod__) { (*::*); }  })[(({}) << window)])let __proto__;");
tryItOut("try { __noSuchMethod__, __count__; } catch(__noSuchMethod__ if this) { continue M; } catch(__proto__ if (function(){__noSuchMethod__;})()) { throw ; } catch(constructor if 5.0000000000000000000000) { ; } catch(__parent__ if (function(){let constructor, {};})()) { <x><y/></x>, undefined } finally { continue ; } ");
tryItOut("/*infloop*/for(prototype = [,,z1]; this ? 0 : <x><y/></x>; new (1 for (x in []))(new (true)())) {if([1.3]) {yield function(id) { return id };(prototype); } else  if (typeof 0) {throw @foo; } else return;if(<x><y/></x>) <><x><y/></x></>; else  if (undefined) <>constructor = 1e4</>; else {; } }");
tryItOut("try { continue ; } catch(__iterator__) { __count__ = __noSuchMethod__, prop = <x/>; } finally { const __count__, prop; } ");
tryItOut("__parent__ = __proto__;");
tryItOut("L:if(prototype = <x/>()) { if ( \"\" ) {M:if([15,16,17,18].sort(((function () { return; } ).call).call, (false + <x/>))) yield; else  if (<x><y/></x>.valueOf(\"number\")) {continue M;break ; } else { }function::__proto__ = __iterator__; } else /*infloop*/while\f([<x><y/></x>]){const __proto__, prop;export *; }}");
tryItOut("const prototype = <x><y/></x>, __parent__ = <><x><y/></x></>;");
tryItOut("with(new RegExp(<x><y/></x>))*::*;");
tryItOut("/*for..in*/for(var [prop, prototype] = <x><y/></x> != null in this.__defineSetter__(\"constructor\", eval)) prototype = __noSuchMethod__;");
tryItOut("{yield * <<= undefined; }");
tryItOut("if((__iterator__ = window)) { if ((window | false)) {export __proto__; }} else {return #3={a:#3#};<x/>; }");
tryItOut("/*infloop*/M:while(void __parent__.*)<><x><y/></x>yyy</>;");
tryItOut("/*infloop*/for(constructor; (prop.( /x/g  >> undefined)); (__count__.(@foo)) >>= eval(\"export <><x><y/></x></>;\", ({a1:1}))) __count__;");
tryItOut("if((3.141592653589793)()) { if (<><x><y/></x></>.prop.yoyo(<>__noSuchMethod__</>.watch(\"__parent__\", (function(q) { return q; }).apply)).__lookupSetter__(\"prop\")\n) {export *; }} else {let (prototype =  '' , __proto__ = true) { export prop; }{} }");
tryItOut("let(prop =  ''  instanceof function ([y]) { } ? ( /x/  for (prop in false)) : <\f><x><y/></x>\f</>.throw(__parent__)) ((function(){with({}) let(prototype, __noSuchMethod__) { export prototype;})());");
tryItOut("L:with({prop: new [1,2,3,4].map((this |=  '' ), 1e4)})export __noSuchMethod__;");
tryItOut("/*for..in*/M:for(const prototype in (((<><>yyy</></>).watch)(yield __iterator__))){do this while((0) && 0);/*infloop*/for(var __noSuchMethod__; [[]]; __count__.prototype =  /x/ ) throw ; }");
tryItOut("with({constructor: typeof  '' }){break ;return; }");
tryItOut("/*for..in*/for(__proto__ in ((<{prototype}><!--yy--></{prototype}>)(this)))(-1)");
tryItOut("var __noSuchMethod__; const prop;");
tryItOut("if((('haha'.split)())) /*for..in*//* nogeckoex bug 349964 */L: for  each(const __proto__ in __iterator__ = prop) yield;");
tryItOut("{true; }\nyield <y><z/></y>;");
tryItOut("/*infloop*/L:for(var __noSuchMethod__; (uneval([15,16,17,18].sort((/a/gi).call, <y><z/></y>))); (prototype = 0.1).__defineGetter__(\"({ __count__: __iterator__, __iterator__: prop })\", (window).watch)) {export prop;break L; }");
tryItOut("/*infloop*/for(<x><y/></*\n*//x> ^ <x><y/></x>; (new function ()<><x><y/></x></>()); #1=({__parent__: prototype})) yield;");
tryItOut("/*infloop*/for(var constructor = prototype.__noSuchMethod__ = ((<!--yy-->)); __proto__.__defineGetter__(\"__parent__\", /a/gi) .. __parent__; undefined--) continue ;");
tryItOut("return;");
tryItOut("let __parent__ = undefined, __noSuchMethod__ = undefined\nthrow StopIteration;");
tryItOut("export prop;");
tryItOut("{}\t const prototype;");
tryItOut("if( ''  >> (function ([y]) { })()) return; else {; }");
tryItOut("L: {throw 1e4;return; }");
tryItOut("if((constructor <= __parent__) == (<><x><y/></x></> += window)) {gc()do  while((*) && 0); }");
tryItOut("/*for..in*/for(var prop = (false()\n) in constructor.(1.3)) var __noSuchMethod__ = *;");
tryItOut("let(prototype =  /* Comment */<x><y/></x>, __proto__ = @foo) { for(let y in [5,6,7,8]) ({constructor: constructor})if((({a2:z2}).__count__ = (constructor))) { if (__proto__ = [15,16,17,18].sort([1,2,3,4].map, true)) {with({__noSuchMethod__: this.zzz.zzz})yield <x/>; } else /*infloop*/while(true){gc() }}");
tryItOut("M:if(\n(__proto__ =  \"\" )) {gc() }");
tryItOut("{/*infloop*/while(((yield 1.2e3)));{} }");
tryItOut("/*for..in*/for(let prop = (<x><y/></x>.throw(window)) in  /x/  |= 033) gc()");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = function ([y]) { } in *) ");
tryItOut("/*infloop*/do M:with(this.__defineSetter__(\"__count__\", ({}).hasOwnProperty)){/*for..in*/for(var __proto__ in (((new Function(\"return *;\")))((function  __parent__ () { return undefined } ).call(window))))throw <x><y/></x>; } while(({a1:1})(<><x><y/></x></>, return 1.3;));");
tryItOut("/*for..in*/M:for(var prototype in <x><y/></x>\r) {break M; }");
tryItOut("throw window;");
tryItOut("M:if(function(id) { return id }) { if (false) yield [,,];} else gc()");
tryItOut("const __noSuchMethod__ = 0;");
tryItOut("__proto__ = prototype(<x/>);");
tryItOut("let([, , ({ constructor\t.__noSuchMethod__: [, ] }), [, [, ({ prototype: function::constructor }), , ], ]]) { constructor = __count__;");
tryItOut("yield ({__iterator__ setter: 'haha'.split\t, __count__:  ''  !== <y><z/></y> });");
tryItOut("let(__parent__, __noSuchMethod__) ((function(){for(let y in []);})());");
tryItOut("try { yield __iterator__.__iterator__|=(yield __parent__.__lookupGetter__(\"setter\")); } catch(__count__) { throw constructor; } __noSuchMethod__");
tryItOut("return;");
tryItOut("throw window;");
tryItOut("M:if(constructor.(constructor)) {; } else {{} }");
tryItOut(";");
tryItOut("if(new (/a/gi)(('fafafa'.replace(/a/g, [1,2,3,4].slice)))) { if (((<y><z/></y>)[prototype])) {export *;gc() } else {const function::__iterator__, __iterator__ = __noSuchMethod__; }}");
tryItOut("if((<bbb xmlns=\"(yield -3/0)\"></bbb>.(((uneval( /x/ )))))) {gc() } else  if (false) {({a2:z2});(new Function(\"\")) }");
tryItOut("/*infloop*/L:while(new RangeError()){{} }");
tryItOut("/*infloop*/for(let ({ function::__count__: \nprop, __proto__: ({ prototype: ({ __iterator__: __proto__ }), prototype: ({ prop: [__iterator__, , ] }) }) }) = \fnew (__proto__)(<x><y/></x>); +null; void 3.141592653589793) L: continue \nfor(let y in [5,6,7,8]) (function(y) { yield y; export *;; yield y; }).apply\n");
tryItOut("yield;");
tryItOut("return constructor = ({});");
tryItOut("/*infloop*/for(var __noSuchMethod__; *; __proto__) ;");
tryItOut("/*infloop*/for([({ constructor: [, , , , []] }), constructor.__proto__] = ; 3.watch(\"constructor\", function(q) { return q; }); window.watch(\"constructor\", function ([, prototype, prop], __iterator__) { yield [[1]]; } )) export prop;");
tryItOut("/*for..in*/for(const [__iterator__, __noSuchMethod__] = ({__iterator__: window,  set prototype()/a/gi }) in this.@*) {M:while((<y><z/></y>) && 0){(#3={a:#3#}); } }");
tryItOut("/*infloop*/for(const ({ __iterator__: function::__proto__ }) = <y><z/></y>.hasOwnProperty(\"constructor\") ? (prop = undefined) : this.zzz.zzz; prop(<><x><y/></x></>)-=(new Function([1,,], <x/>) %= 1.2e3 > #1#); ) *::*.hasOwnProperty(\"__count__\")gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(((prop)(yield [[1]], ({constructor: this }))).constructor in prop) {}/*\n*/");
tryItOut("{}");
tryItOut("<x><y/></x>; const __count__\t;");
tryItOut("let (constructor) { /*infloop*/for(*; @foo; 1e-81) {var __count__, __iterator__;continue L; } }");
tryItOut("try { with({}) return; } catch(__count__) { for(let y in []); } finally { throw __proto__; } ");
tryItOut("/*for..in*/for(var prop in ((__iterator__)(*))){yield; }");
tryItOut("/*infloop*/for(var [[[, ], ({ __iterator__: __count__, getter: ({ __count__: prop, __proto__: __parent__ }) }), [[prop, , , ]], ({ __count__: ({ __iterator__: __proto__, __noSuchMethod__: __proto__ }), __proto__: [__noSuchMethod__, prototype, __parent__, __proto__] }), [__proto__, []]], ({ __parent__: [prop, [, , [[1]]], []] })] = (\n((1e+81 if (prototype)))); @foo;  /x/g  >>= @foo , <x/> > this) {const prototype = 1e-81, __noSuchMethod__;return; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(const prototype = true in <><x><y/></x></>) throw -1\nlet __parent__;");
tryItOut("throw prototype;");
tryItOut("L: throw *;");
tryItOut("__proto__");
tryItOut("if(__noSuchMethod__ = <y><z/></y> >>>=(({constructor: ({set: <><x><y/></x></>,  set __parent__ prototype (prop, __parent__) { return 1e+81 }  }) }))) { if (__parent__ = this % <y><z/></y>.unwatch(\"prototype\")) {; } else }function (prop, prototype) { return <x><y/></x> } ");
tryItOut("/*for..in*/for(const __iterator__ in ([<x><y/></x>]))  /x/ ;");
tryItOut("with(function () { /*for..in*/for(const [prop, __count__] = true in <x><y/></x>) function  constructor (__parent__, __proto__) { yield <\fx\f><y/></x> }  } ){var constructor; }");
tryItOut("/*infloop*/for(([,].eval(#3={a:#3#})); __parent__ = *::*; [,,]) {var prototype = <x><y/></x\f>, __count__ = *; }");
tryItOut("L:if(<><x><y/></x>\f</> !== [1]) if((this.zzz.zzz)) { if (undefined) {default: case <x><y/\f></x>: let __proto__, prop = *;break; case 1: export *;break; gc()case null: case 2: break; {return; } } else prototype} else {/*for..in*/for(var constructor = __proto__ in 4.) ;yield 033; }");
tryItOut("do {yield;{const __parent__; } } while((new (([[,,]]))()) && 0);");
tryItOut("for(let y in []);");
tryItOut("{/*infloop*/for(let __proto__; window; (window)[<x><y/></x>]) {export __iterator__;(window); } }");
tryItOut("prop = __parent__;");
tryItOut("{\rif(({ set __noSuchMethod__() { yield __parent__ }  })) ; else \f if ((yield this)) {; }/*infloop*/while(let (__iterator__) null.throw(__parent__ = <y><z/></y>))yield  /x/ ; }");
tryItOut("{continue ; }");
tryItOut("(window);");
tryItOut("/*infloop*/for(var constructor; [(-0)].sort(null) /= (new @foo(true, <><x><y/></x></>)) && <bbb xmlns=\"({ get prop()(-1) }/*)\"> </bbb>.( '' ); ({ __proto__: ({ prop: ({ __iterator__: __count__, constructor: constructor }) }), __noSuchMethod__: __proto__ }) = <x/>.prop = <x><y/></x>) M:while(((__count__.(<x><y/></x>))) && 0){export __iterator__; }");
tryItOut("if(( @ prop = <x><y/></x>)) { if ((constructor.prototype = 'fafafa'.replace(/a/g, eval))) {/*infloop*/L:while(constructor){return *;export *; }\n }} else /*for..in*/for(__iterator__ in ((({}).__lookupGetter__)(this for (throw <y><z/></y>; in <><x><y/></x></>)))){ }");
tryItOut("if(__proto__) { }/a/gi");
tryItOut("if([z1,,]) {export *; } else {window((1 for (x in []))).apply }");
tryItOut("with(0/0.hasOwnProperty(\"__iterator__\"))let /*\n*/__proto__ = <x><y/></x>;");
tryItOut("with({__parent__: (( \"\"  === null) == <bbb xmlns:ccc=\"true\"><ccc:eee></ccc:eee></bbb>)}){if((true in undefined)) { if ([15,16,17,18].map((new Function(\"export *;\")), *::* <<= ({a2:z2}))) return;} else {yield; } }");
tryItOut("/*for..in*/M:for(var constructor in [11,12,13,14].filter - ) /*infloop*/M:for(-0; [,,]; prop) gc()");
tryItOut("L:if(yield arguments.__lookupGetter__(\"constructor\")) yield else  if (window) L: yield; else {/*for..in*/for(let __proto__ in #3={a:#3#})  }");
tryItOut("L: /*infloop*/for(const prototype = window;  \"\" ; <><x><y/></x></>) return\n");
tryItOut("/*infloop*/for(<y><z/></y> /  '' .valueOf(\"number\"); this.zzz.zzz; new Boolean(([[1]].__lookupGetter__(\"__count__\"))((undefined)(), this))) {let __proto__ = @foo; }");
tryItOut("for(let y in [5,6,7,8]) __parent__ = __iterator__;");
tryItOut("/*for..in*/for(const __count__ in [[1]]) {return <x><y/></x>; }");
tryItOut("break \n");
tryItOut("if(<x><y/></x>) { if ([,,]) {__proto__; } else {([,,]);export *; }}");
tryItOut("(<><x><y/></x></>);\nlet (prop = __iterator__, __noSuchMethod__) { {} }\n\n");
tryItOut("/*infloop*/do __parent__ = function::constructor; while( /* Comment */\f(yield (\n<><x><y/></x></>)));");
tryItOut("throw StopIteration;");
tryItOut("if({}) { if ((-0 ? 5.0000000000000000000000 : <><x><y/></x></>)) gc()} else {;break M; }");
tryItOut("/*infloop*/for(var __iterator__; this.zzz.zzz; (new (@foo)(<><x><y/></x></>))(<x/>, [11,12,13,14].map) ? -false : ~({ get __count__(__proto__) { return prototype }  })) {constructor = window, __iterator__; }");
tryItOut("/*infloop*/for(const __count__; ((Math.sin(undefined, null))((#2=(__noSuchMethod__ = #1=[#1#])))); __count__.function::constructor setter= (function(q) { return q; }).call) {continue M; }");
tryItOut("if([[]]) { if (<x><y/></x>) {export *; } else {this; }}\n/*for..in*/M:for(let __parent__ = <x><y/></x> in false) return <><x><y/></x></>;\n");
tryItOut("if(<y><z/></y>) {*;export prop; } else ;");
tryItOut("{{const constructor; }continue M; }");
tryItOut("{break L; }");
tryItOut("L:if(4.) { if (<y><z/></y>) {return  \"\" ; } else let __iterator__;}");
tryItOut("with(( /x/  if (__parent__)))export *;");
tryItOut("let(__noSuchMethod__ = [\t<><x><y/></x></>].filter([1]), __noSuchMethod__ = prototype) ((function(){const constructor, prop = <y><z/></y>;})())\n/*infloop*/for(__iterator__ = #1=({__parent__: [z1,,]}); __noSuchMethod__.__iterator__ = prop.__lookupSetter__(\"__iterator__\"); (((<y><z/></y>).__defineSetter__).call((window[*]), ))) return this;");
tryItOut("let (__iterator__ = (new (<x/>)(__noSuchMethod__).throw(yield <y><z/></y>))) { break M; }");
tryItOut("return");
tryItOut("return;\nexport __noSuchMethod__;\n const function::__proto__;");
tryItOut("if(<) { if (<x><y/></x>) {prop =  /x/ , __parent__;let __parent__ = <y><z/></y>, constructor = <x/>; }} else true");
tryItOut("export *; const prop/*\n*/;");
tryItOut("M:with(++ /* Comment */ \"\" ){const __parent__ = <><x><y/></x></>, prototype = <x><y/></x>;throw undefined; }");
tryItOut("let (({ __proto__: ({ __iterator__: __noSuchMethod__, __parent__: __iterator__ }), prototype: ({ __count__: __noSuchMethod__ }) })) { throw constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (__count__.prop |= (eval(\"throw  /x/g ;\", null)) * ~(__proto__)(this, return @foo;))) *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__(new (1 for (x in []))(<><x><y/></x></>)) in false) const __proto__ = <x><y/></x>, prototype;");
tryItOut("{return <x><y/></x>; }");
tryItOut("if((('fafafa'.replace(/a/g, window)))[([11,12,13,14].filter)]) {} else  if ((void <x><y/></x>--)) {try { __count__: 4. } finally { __noSuchMethod__ = 033, __noSuchMethod__; } const __iterator__, __iterator__; }");
tryItOut("with((new prototype.(__proto__ = __noSuchMethod__)())){export *;; }");
tryItOut("prop = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in 3/0) export *;");
tryItOut("/*for..in*/M:for(const constructor in ((3/0)(<x><y/></x>)))var constructor, undefined = undefined;");
tryItOut("{let __noSuchMethod__ = this; }");
tryItOut("if(((constructor)-=<x><y/></x>.(arguments).__lookupGetter__(\"__noSuchMethod__\"))) {/*infloop*/for(const prop; <x><y/></x> & <y><z/></y>; true) {export *;return; } } else {((uneval((<x><y/></x>)())) ? new String() : @foo.constructor); }");
tryItOut("with({__parent__: constructor instanceof <x/>})gc()");
tryItOut("while((*::*.isPrototypeOf(<x><y/></x>)) && 0){[z1,,]; }");
tryItOut("while((<x/>) && 0){{}var __proto__ = 1.2e3, get; }");
tryItOut("/*infloop*/do gc() while([15,16,17,18].some(Function, <x><y/></x>));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in false) var prop = <x><y/></x>;");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] =  \"\" (<x><y/></x>) in <x/>) var __noSuchMethod__, __proto__ = window;");
tryItOut("with({}) { try { const prototype; } catch(__count__) { break ; }  } ");
tryItOut("{}");
tryItOut("{<x/>;throw constructor; }\n{throw __proto__; }\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for(let __count__; (<x><y/></x>.prop); prop) {export __proto__; }");
tryItOut("/*infloop*/do {/*for..in*/M:for(__proto__ = 1e4 in 3.141592653589793) return; } while(((yield ( \"\"  for (constructor in window))).__defineGetter__(\"prototype\", 'haha'.split)));");
tryItOut("/*for..in*/for(__parent__ = eval in  /* Comment */<><x><y/></x></>) /*infloop*/for(<x/>; ({a1:1}); __iterator__) throw *;");
tryItOut("{/*for..in*/for(var (__count__) in ((((((@foo)(*))[ \"\" ])).watch)((function ([y]) { })()))){return  /x/ ;throw #3={a:#3#}; }/*for..in*/for(__proto__ in ((({}).__lookupGetter__)(true .. <x/>)))/*for..in*/M:for(prop in *) gc() }");
tryItOut("throw StopIteration;");
tryItOut("{}\nexport *\n{}");
tryItOut("with({}) { (({a2:z2}))\n__noSuchMethod__ } ");
tryItOut("M:if(prototype.__noSuchMethod__ =  ) { if (false.watch(\"prototype\", (this).watch)) export __noSuchMethod__; else let (constructor, __proto__) { throw  /x/ ; }}");
tryItOut("const __iterator__ = <x/>, __iterator__ = <y><z/></y>;");
tryItOut("M:if((*.propertyIsEnumerable(\"__iterator__\"))) {yield;throw <y><z/></y>; }");
tryItOut("let (__noSuchMethod__ = <><x><y/></x></>, prop) { gc() }");
tryItOut("with({}) var prop, __iterator__;");
tryItOut("gc");
tryItOut("L:\tdo { } while(((undefined.hasOwnProperty(\"prop\"))) && 0);");
tryItOut("");
tryItOut("return\n");
tryItOut("yield window;");
tryItOut("/*infloop*/M:while(4. instanceof (<><x><y/></x><function  prototype (({ __iterator__:  if (<x><y/></x>) }), prop)(3/0 -= (-0))/)>)yield null;");
tryItOut("return;");
tryItOut("/*for..in*/for([prototype, prototype] = var prototype, __count__ in __proto__) {/*infloop*/for(const [] = __parent__ = function ([y]) { }; #2=({__proto__:  '' }); ! /x/ ) {<x/> }\nconstructor = null; }\nconst __iterator__;\nreturn;\n");
tryItOut("let (prototype = this.zzz.zzz <<= new ((1.3).call)(false).propertyIsEnumerable(\"__iterator__\"), each = this) { {;{} } }");
tryItOut("__proto__ = prototype;");
tryItOut("while((window) && 0)continue L;");
tryItOut("do {/*infloop*/do return; while([,,]);/*infloop*/L:for(let constructor = prototype; window;  /x/g ) ; } while(((window != window)) && 0);");
tryItOut("return;");
tryItOut("throw prototype;");
tryItOut("break ;");
tryItOut("");
tryItOut("with({__count__: [ \"\"  if ( \"\" )]});");
tryItOut("M:if(<x><y/></x>) return <x><y/\f></x>; else {yield *::*;continue ; }");
tryItOut("prop");
tryItOut("yield\n/*for..in*/for(var constructor in ((Function)(false)))");
tryItOut("this.zzz.zzz;");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((this.__defineSetter__(\"__proto__\", {let prop = <x><y/></x>, constructor; \"\" ; }).__lookupSetter__(\"__iterator__\"))(window) in ([] + __count__)) {yield -3/0; }");
tryItOut("{gc() }");
tryItOut("break ;");
tryItOut("/*for..in*/for(let __parent__\r in (((true).call)(<x><y/></x>))){__count__ = window, __proto__export prototype; }");
tryItOut("if(this) <employee id=\"1\"><name>Joe</name><age>20</age></employee> else {return; }");
tryItOut("{ }");
tryItOut("/*for..in*/M:for(const constructor in [1]) {__iterator__; }");
tryItOut("return");
tryItOut("/*for..in*/for(let __count__ = (<x><y/></x>)[#1#] in <x><y/></x>) {@foo; }\n");
tryItOut("if(<y><z/></y>) { if (\n<><x><y/></x></>.__defineGetter__(\"0x99\", ({}).__lookupGetter__)) {const constructor = <x><y/></x>; } else ;}");
tryItOut("/*infloop*/M:for(const ({ __parent__: [, ({ __iterator__: __parent__ })], prop: ({ __parent__: function::__iterator__ }) }) = (constructor.__proto__ getter= function () { yield <x><y/></x> } ); \tnull-=(<y><z/></y>)[[[1]]]; 1.3) {var __proto__; }");
tryItOut("<><x><y/></x>\f</>");
tryItOut("/*infloop*/for(__iterator__; function(y) { yield y; throw <><x><y/></x></>;; yield y; }; <><x><y/></x></>) {{}(<x/>); }");
tryItOut("/*infloop*/while(<x/> |= (#0=({prototype: <y><z/></y>}))){if(0) throw <y><z/></y>; else  if ([z1,,]) {return; } }");
tryItOut("/*for..in*/for(let __parent__ = __proto__ = function(id) { return id } in 4.) {return 3;({}).hasOwnProperty }");
tryItOut("do const prop = (function ([y]) { })(), __noSuchMethod__ =  /x/g ; while((<>__proto__, __parent__</>.__defineSetter__(\"__count__\", __iterator__)) && 0);");
