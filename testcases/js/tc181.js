tryItOut("/*infloop*/for(const prototype = -3/0; 'fafafa'.replace(/a/g, /a/gi); constructor) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor.prop in __parent__.eval(*::*))  }");
tryItOut("do {{yield window; }null; } while(( /x/ ) && 0);");
tryItOut("/*infloop*/L:for(let __iterator__ = Math.pow + (p={}, (p.z = <x><y/></x>)()); __count__.(__proto__); <x><y/></x>.eval(*::*)) return;");
tryItOut("if(((uneval((Math.sin)())))) {gc() }");
tryItOut("/*for..in*/for(let __iterator__ in undefined) {__proto__ =  /x/g ;__noSuchMethod__ = <x><y/></x>, __iterator__ = undefined; }");
tryItOut("while((({ __parent__: [, __iterator__.__noSuchMethod__, ({ __iterator__: [, ({ prototype:  { export __parent__; }  }), , ], __proto__: ({ __iterator__: ({ prototype: constructor }), __proto__: __noSuchMethod__ }) }), ({ #3={a:#3#}: ({ __noSuchMethod__: ({ prototype: prototype }), __iterator__: ({ prototype: __noSuchMethod__, __proto__: __noSuchMethod__ }) }), __iterator__: [, __parent__, prototype] }), ] }) = <y><z/></y>.valueOf(\"number\") %= (__proto__ = __count__)) && 0)/*for..in*/for(const let = <y><z/></y> in undefined) {export __count__;yield (-1); }");
tryItOut("if(<><x><y/></x></>) { if (break L;) return; else Math.sin}");
tryItOut("/*infloop*/for(__iterator__ = ;  /x/g ; __parent__) {constructor, constructor = undefined;yield; }");
tryItOut("try { yield <x/>; } catch(prototype if (function(){})()) { (<><x><y/></x></>); } catch(__count__ if *.yoyo(__proto__)) { gc() } catch(constructor) { yield; } ");
tryItOut("/*for..in*/L:for(__iterator__ in (('haha'.split)(({prototype setter: [1,2,3,4].slice }))))L: {@foo; }");
tryItOut("with({}) throw <><x><y/></x></>;");
tryItOut("L:if(('fafafa'.replace(/a/g, function(y) { yield y; false;; yield y; }))) { if ('fafafa'.replace(/a/g, Math.pow)) {throw this; } else switch(false) { default: throw /a/gi;break;  }}");
tryItOut("if(({a1:1})) do .2; while((prototype) && 0); else  if ( /x/g  >>>=<><x><y/></x></>.hasOwnProperty(\"prop\")) {({}).hasOwnProperty(0/0); } else {throw (function ([y]) { })(); }");
tryItOut("if((function::prototype.prop getter= Function)) { if (prototype.__parent__) { const __proto__;var prop = <x><y/></x>; } else {{}yield; }}");
tryItOut("yield constructor;");
tryItOut("throw StopIteration;");
tryItOut("throw (3)\n");
tryItOut("/*for..in*/M:for(constructor in <><x><y/></x></>) <x><y/></x>;");
tryItOut("//h\nif(gc(<><x><y/></x></>, 3)) {; } else  if ([15,16,17,18].some(/a/gi, 1e81)) {gcyield; } else let __proto__ =  /x/ , __parent__;");
tryItOut("while(((({a2:z2}).constructor)) && 0){this; }");
tryItOut("/*for..in*/for(let __count__ in (null.hasOwnProperty(\"function::function::__parent__\"))) \n");
tryItOut("/*infloop*/M:do {continue L; } while(arguments);");
tryItOut("/*infloop*/for(null .@*:: 1e-81.@foo; new String(1.3 instanceof true, prototype.__count__ = -1); (__noSuchMethod__.__iterator__ =  '' )) {export prototype;new Function }");
tryItOut("var prop = prototype;");
tryItOut("(Function).apply");
tryItOut("/*infloop*/for(var ({  for (prototype in window): prototype }) = (prototype.__lookupGetter__(\"prop\")); __iterator__.(prop); .2) {/a/gi }");
tryItOut("L:with((~constructor++))Math.sin");
tryItOut("yield;\nconst __noSuchMethod__ = true;\n");
tryItOut("/*infloop*/while(<bbb xmlns=\"<><x><y/></x></> >= *::*\"> </bbb>.(__proto__ = __parent__ = this)){yield;__noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("do var constructor; while((new String(null,  /x/g )) && 0);");
tryItOut("while((__proto__+={}) && 0){\tyield; }");
tryItOut("/*infloop*/M:do {export *;default: *; = ({ constructor: ({ __noSuchMethod__: __parent__ }) }) } while([11,12,13,14].some);");
tryItOut("switch(<><><y><z/></y></></>) { case __proto____noSuchMethod__.valueOf(\"number\"):  }");
tryItOut("let (__iterator__ = *.__proto__ = @foo) { __parent__; } const __iterator__;");
tryItOut("if(<><x><y/></x></>) { if (constructor) {return [z1];yield; } else {return this;(this); }}");
tryItOut("/*for..in*/for(let (({__proto__:  \"\" ,  set constructor __noSuchMethod__ (__noSuchMethod__, prototype) { prototype = <><x><y/></x></>, prop; }  })) in (((new Function).call)((__count__ = <x><y/></x>.unwatch(\"prototype\")))))({}).__lookupGetter__");
tryItOut("/*for..in*/for([__proto__, prop] = #1=[<><x><y/></x></>] in <x><y/></x>) {yield; }");
tryItOut("if((<y><z/></y>.throw(__count__))) i else  if (*) ");
tryItOut("if(prop) {continue ; }");
tryItOut("for(let y in []);");
tryItOut("if(({ __proto__: __noSuchMethod__ }) = ({prop: <><x><y/></x></>, prop: __count__ })) while((eval(\"\", <y><z/></y>)) && 0){var __count__;let /*\n*/G; }");
tryItOut("throw 1.3;\n(<x><y/></x>);\n");
tryItOut("L: {with({__noSuchMethod__: new Number(false)})export *;yield; }");
tryItOut("/*for..in*/for([prop, constructor] = (new <x><y/></x>())(<x><y/></x>.__defineGetter__(\"constructor\", ({}).hasOwnProperty)) in [[1]]) return\n");
tryItOut("if([__noSuchMethod__, prop, __iterator__] = (--false)) { if (<><bbb xmlns=\"prop.yoyo(@foo)\"><!--yy--></bbb></>) {return <x/>;prototype, prop; } else {;gc() }}");
tryItOut("M:if(false.__lookupGetter__(\"__noSuchMethod__\")) {(<x><y/></x>); } else window;");
tryItOut("/*for..in*/for(var __parent__ = __proto__ in <x><y/></x>) \n(new Function(\"yield ({a2:z2});\"))");
tryItOut("L:if(3/0.@*) yield 0x99; else  if (-0) if(__noSuchMethod__ = <x><y/></x>) { if (((window if (undefined)))) {return; }} else var prop = null;");
tryItOut("if(constructor = <y><z/></y>) {gc() } else ");
tryItOut("return\n");
tryItOut("let (__count__, __noSuchMethod__) { {export *; } }");
tryItOut("if(false.isPrototypeOf(@foo)) let constructor = prop, __parent__ = <x/>; else constructor, __noSuchMethod__ = false;");
tryItOut("/*infloop*/for(__parent__ = undefined; (function ([y]) { })(); 0x99) ;");
tryItOut("{([1]); /x/ \nyield this;\n }");
tryItOut("constructor = __count__;");
tryItOut("/*for..in*/for(const [__proto__, __count__] = __count__ = (<x><y/></x> if (3)) in  /x/g  <<= window ? [0.1 for each (prototype in  '' )] :  \"\"  ?  ''  : true) return;");
tryItOut("(prop.(-1))\nwith({}) { prototype = __parent__; } ");
tryItOut("/*for..in*/for(__count__ = false++ in [,,z1]) {return; }");
tryItOut("/*infloop*/do yield; while(__parent__.__count__ = 0x99 .@ [z1,,]);");
tryItOut("export *;");
tryItOut(";\n\n");
tryItOut("yield prop");
tryItOut("with({__proto__: ( /x/g  &= undefined)\n})with({}) return;");
tryItOut("/*infloop*/L:for(let prototype; <y><z/></y>; <x><y/></x>) {return; }");
tryItOut("/*for..in*/for(const __iterator__ in (-1)) { }");
tryItOut("with((uneval(1e-81)) * eval(\"window\", 0) *=  '' .throw(<x><y/></x\n>)){/*infloop*/\nfor(constructor =  /x/ ; ({a2:z2}); <><x><y/></x></>) yield; }\n");
tryItOut("/*infloop*/L:do {\fyield __noSuchMethod__; } while((<><x><y/></x></> = false).@* ? <>prop</>.__lookupSetter__(\"prop\") : ~this.__defineGetter__(\"__count__\", Math.pow) |= new (({}).__lookupGetter__)((yield #1#), *::*));let (__proto__) { continue ; }");
tryItOut("/*for..in*/for(const prototype = * in -1) export *;");
tryItOut("function ()prop");
tryItOut("L: {/*for..in*/for(__proto__ = @foo in <><x><y/></x></>) yield [,]; }");
tryItOut("/*infloop*/do {; } while(<><x><y/></x></>);");
tryItOut("\nyield 'fafafa'.replace(/a/g, <x/>);");
tryItOut("L: {<><x><y/></x></>; }");
tryItOut("if((( '' .__lookupSetter__(\"prototype\"))[<><x><y/></x></>.prop =  '' ])) var __proto__, prop = __count__; else  if (this.zzz.zzz) yield; else M:if(0) {let __proto__; } else const constructor, __proto__ = false;");
tryItOut("/*for..in*/for(var __proto__ in window >= (export __parent__; << *)) /*infloop*/do {gc()yield; } while((({__proto__: __count__ = <><x><y/></x>\f</>, __iterator__: <><>[[]]</></> })));");
tryItOut("");
tryItOut("\n");
tryItOut("/*for..in*/for([({ __parent__: __noSuchMethod__ }), ({ __count__: [, ], __iterator__: __noSuchMethod__ }), ] in ((function (prototype, prototype) { yield ( \"\" .isPrototypeOf(true)) - eval(\"<x><y/></x> .. 1.3\", window) } )((<x><y/></x> = <x><y/></x>)))){/*infloop*/for(__noSuchMethod__; ({}); <><x><y/></x></>) {function  __proto__ (__parent__, __count__) { return 4. }  }\nif(([11,12,13,14].map.*)) {yield;export __proto__; } else  if (function (__proto__, ) { yield  \"\"  } (* for each (constructor in \ftrue))) (function ([y]) { }).__defineSetter__ else {(function ([y]) { }//h\n).watch__count__ = <><x><y/></x></>, prototype = true; }\n }");
tryItOut("/*infloop*/M:do var constructor = 3.141592653589793; while( /x/ );");
tryItOut("yield new <x/>(constructor).@foo;");
tryItOut("yield \t((yield __count__));");
tryItOut("let({ = new 1e-81(<y><z/></y>), constructor) ((function(){with({}) { Function } })());");
tryItOut("/*infloop*/while(\r<x><y/></x>.(5.0000000000000000000000).yoyo(delete <x><y/></x>) :: (false).call([[]], *::*)){return <><x><y/></x></>; }");
tryItOut("if(([1,,] > @foo)) /*for..in*/for(let [__parent__, __iterator__] =  \"\"  in window) {gc()const __iterator__, __parent__ = <x>\f<y/></x>; } else  if ((new (<x/>).watch())) function  __noSuchMethod__ (__parent__, __proto__) { yield <y><z/></y> } ");
tryItOut("if((true .@ __count__)) /*infloop*/L:for(let ({ prototype: ({ __count__: __iterator__ }), __noSuchMethod__: ({ constructor: __noSuchMethod__, constructor: __iterator__ }) }) =  /* Comment */*::*; <x/>\n; (yield <y><z/></y>.valueOf(\"number\"))) #1");
tryItOut("throw __noSuchMethod__;");
tryItOut("with(5.0000000000000000000000){break ; }");
tryItOut("if((* <<=  \"\" )) {let __count__ = <x><y/></x>, prototype;; } else  if ([11,12,13,14].filter) return; else {export __noSuchMethod__;yield; }");
tryItOut("let (({ __parent__: ({ __count__: prop }), __proto__: ({ prop: __noSuchMethod__, constructor: __parent__ }) }), __iterator__) { /*infloop*/for([,,];  \"\" ; true) default: yield this;return  \"\" ;break; case 4: break; case : export __count__;case #1=[#1#]: break; <y><z/></y>;break;  }");
tryItOut("M:with()function (__count__) { (<x><y/></x>); } ");
tryItOut("L: yield;");
tryItOut("var __proto__;");
tryItOut("while((__proto__.__parent__ = ()(({})) / @foo - #3={a:#3#} ? * :  /x/ ) && 0){}");
tryItOut("if(const __parent__, prototype = <x><y/></x>;.@*) { if () { } else {function  constructor ()false }}");
tryItOut("Function");
tryItOut("L:if(this) const __noSuchMethod__ = *, __noSuchMethod__; else {export __parent__; }");
tryItOut("yield __proto__ = {};");
tryItOut("with(__parent__.__iterator__+=prototype){let prototype = [z1,,], __count__ =  '' ;{} }");
tryItOut("/*for..in*/for(var [__proto__, function::__count__] = * in ('fafafa'.replace(/a/g, /a/gi))) /*infloop*/while(([-1]))[1,2,3,4].map");
tryItOut("M:with({__count__: [false]})const prop, prop;");
tryItOut("if(__iterator__) {break L;; } else  if (__proto__) {}; else prop, constructor =  /x/ ;");
tryItOut("if((__noSuchMethod__.__noSuchMethod__ = <><x><y/></x></>, *::*.isPrototypeOf(([(<x/>())].some(prop))))) (1e81); else  if ((let (__noSuchMethod__ = (__noSuchMethod__ = <x><y/></x>) >= __iterator__ = __parent__, ({ __parent__: ({ __noSuchMethod__: [] }) }) = new function  __proto__ (function::prop) { yield <><x><y/></x></> } ((-0))) __proto__.constructor =  ''  ? __proto__ :  '' )) {/*for..in*/for(const prop in ((function  __noSuchMethod__ () {  } )(undefined)))export *; }");
tryItOut("gc()\n");
tryItOut("");
tryItOut("/*infloop*/for(let __iterator__ = constructor.__noSuchMethod__ setter= true; 1.3 in  \"\" ; ({ [[], ]: prototype(__count__) })) export *\nlet prototype = null\nexport prototype;//h\n");
tryItOut("do {const prop =  /x/ , function::__count__ =  \"\" ;let constructor; } while((1.3) && 0)");
tryItOut("do {return; } while(((0/0);) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in (prop.constructor getter= window).yoyo((true.valueOf(\"number\")))) {break ; }");
tryItOut("L:with({__iterator__: ({})}){ }");
tryItOut("let (__count__ = this.__defineSetter__(\"__parent__\", <x><y/></x> < this), prop = {}.throw(<y><z/></y>)) { ; }");
tryItOut("if((false[(__noSuchMethod__.__proto__--)])) {export *;/*infloop*/M:for(__noSuchMethod__; false; window) export prototype; } else  if ((window.__iterator__ = __proto__)[<x><y/></x> & <><x><y/></x></>]) {return; } else {const __proto__;; }");
tryItOut("__parent__ = let;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__parent__, __count__] = #2=\f<><x><y/></x></> in 1.2e3) {constructor, constructor = <x><y/></x>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(var constructor = function(q) { return q; }(@foo, <x/>); __iterator__ = ({ __iterator__: prop }).@*; eval(\"yield;\", default: throw -3/0;)) 1e81");
tryItOut("this.zzz.zzz;");
tryItOut("this.zzz.zzz;");
tryItOut("break M\n");
tryItOut("prototype");
tryItOut("<y><z/></y>");
tryItOut("constructor");
tryItOut("let(prop) { let(({ __count__: ({ prototype: __count__ }) }) = (window\n)) { return \n(__iterator__.((prop = constructor)));");
tryItOut("var @foo = <x/>\n");
tryItOut("/*infloop*/M:for(({ __parent__: [], prop: ({ __noSuchMethod__: ({ constructor: ({ prototype: [, , , __iterator__, __iterator__] }), __count__: constructor }) }) }) = (__proto__ = false); __parent__ = 0.1.yoyo((uneval( { let __parent__; } ))); (yield [* for each (__proto__ in *::*)])) M:if(((uneval( /x/g )))) \t{/*infloop*/M:for(this; arguments; case 2: break; var __noSuchMethod__ = *, __iterator__ = 1e+81;case undefined: let __proto__ =  '' , __parent__;break; ) { }yield prop; } else  if (\nnull.propertyIsEnumerable(\"prototype\").watch(\"__parent__\", [1,2,3,4].map)) {/a/gi(<><x><y/></x></>).__defineSetter__ }");
tryItOut("/*for..in*/L:for(const __iterator__ in (((1 for (x in [])))(<x><y/></x>)/*\n*/))yield @foo; const __iterator__;");
tryItOut("L:switch(@foo[<><x><y/></x></>]) { case 7: let __proto__ = null, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("M:while((({}).hasOwnProperty(constructor === [[1]])) && 0){\n; }");
tryItOut("if(__count__ = <><x><y/></x></>) ; else  if (new Function( /x/ )) {let (__noSuchMethod__) { export constructor; }<><x><y/></x></>; }\n");
tryItOut("M:if(new (@foo)(033, window)) return;");
tryItOut("M:if(undefined) eval(\"-3/0\", <x/>) else yield;");
tryItOut("{}\nif(1e4.hasOwnProperty(\"__count__\")) {this-0; } else  if ((eval).call( '' ,  '' ,  /x/ )) {yield;export *; } else throw window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <><x><y/></x></>) throw <x><y/></x>;");
tryItOut("/*for..in*/for(let __iterator__ in ((({}).hasOwnProperty)((({ getter: prototype }) = <y><z/></y>--)))){throw arguments; }");
tryItOut("let <x><y/></x>, __noSuchMethod__;");
tryItOut("/*infloop*/do {gc() } while(1e-81);");
tryItOut("const prototype;");
tryItOut("with({}) { yield (uneval(*::*.hasOwnProperty(\"__noSuchMethod__\"))); } ");
tryItOut("with({}) { throw __noSuchMethod__; } ");
tryItOut("/*infloop*/for(<y><z/></y>; <x/>; <><x><y/></x></>) {export constructor;const __count__; }");
tryItOut("throw StopIteration\n");
tryItOut("/*for..in*/for([__count__, prototype] = *::* in this) (<><x><y/></x></>);");
tryItOut("M:do {L:with(null)for(let y in [])\n } while((__count__ = (yield undefined).__lookupGetter__(\"constructor\")) && 0);");
tryItOut("L: with({__count__: [1]})<x><y/></x>");
tryItOut("L: ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <><x><y/></x></>['__count__'] in ((__iterator__)(4.))) /*infloop*/M:for(@foo; 1e-81; prototype) delete");
tryItOut("for(let y in []);");
tryItOut("with({}) { try { return new (3)(@foo); } finally { let(__proto__) { const prop; }  } ");
tryItOut("L: /*for..in*/L:for(var __proto__ in ((new Function)(<><x><y/></x></>)))var constructor = <y><z/></y>, __iterator__ = __parent__\nconst __noSuchMethod__ = 0x99, constructor = <x><y/></x>; const prop;");
tryItOut("L:do {var constructor, function::__count__;export \t__proto__; } while((({a1:1})++) && 0);");
tryItOut("/*for..in*/for(var prop in [,]) {(1 for (x in [])) }");
tryItOut("/*for..in*/for(__iterator__ = <><x><y/></x></> in *::*) break ;");
tryItOut("yield  /* Comment */1.3;");
tryItOut("/*infloop*/while(prototype){/*infloop*/for(__iterator__.yoyo(window); window\n; window <= *) {yield;<><x><y/></x></>; }\n<><x><y/></x></>; }");
tryItOut("switch(constructor) { default: function  __proto__ (__count__, __count__) { yield true } break;  }\nyield;\n");
tryItOut("/*for..in*/for(var constructor in ((<x><y/></x>)(<><x><y/></x></>)))return <x><y/></x>;\n;\n");
tryItOut("/*for..in*/for(prototype in ((eval)( '' )))do gc() while(((( /x/ //h\n).watch).call(<> prototype = __proto__, __count__ = __parent__<x><y/></x> set</ <<= constructor, )) && 0);");
tryItOut("return [11,12,13,14].map;");
tryItOut("/*infloop*/for(__proto__; __noSuchMethod__ = (({ get __iterator__ __iterator__ () { return undefined }  }).throw(__proto__ = [[]])); prototype.prop = prop.*) {/*infloop*/\tfor(__iterator__ = false; true; <x><y/></x>) break ; }");
tryItOut("switch(window) { default: if((function ([y]) { } % -3/0)) {throw <><x><y/></x></>;throw [z1,,]; } else  if ((! \"\" )) {export __count__; } }");
tryItOut("/*infloop*/while(*)throw  '' \r;");
tryItOut("/*infloop*/for(window;  /x/ ; ({a1:1})) {gc()throw <x><y/></x>; }");
tryItOut("let (prototype = *::*) { with(window){(this).__defineSetter__const __noSuchMethod__ = constructor, __count__; } }");
tryItOut("if(-0) ({}).hasOwnProperty");
tryItOut("{yield <x><y/></x>; const __iterator__; }");
tryItOut("if(undefined /= <x><y/></x>) { if (undefined) {gc() } else {<x/>; }}");
tryItOut("L:if(\n*::*) {throw @foo; } else  if ((({prop: eval(\"-1\", *)})).isPrototypeOf(false if (*::*))) return");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var function::prop in 1e4) function(y) { yield y; yield @foo;; yield y; }");
tryItOut("throw StopIteration;");
tryItOut("let (constructor) { /*infloop*/M:while(<x><y/></x>){(<x><y/></x>); } }");
tryItOut("/*infloop*/L:for(var __iterator__ = true; [1]; arguments) continue ;");
tryItOut("L: export *;");
tryItOut("let (__proto__) { 'haha'.split }");
tryItOut("/*infloop*/M:for(const __iterator__; __proto__; prop) (3/0);");
tryItOut("/*infloop*/for(new function (__iterator__)[<x/>] in (__iterator__.(__noSuchMethod__))(__proto__); __iterator__.__defineSetter__(\"__parent__\", ({}).__lookupGetter__)\t; ((<><x><y/></x></>)(false, <><x><y/></x></>))) {;/*for..in*/for(prototype in ((*::*)(\n(-1))))throw *::*;\n }");
tryItOut("/*infloop*/for(let constructor; (prop\n); ([__noSuchMethod__ = <x><y/></x>])) {return false; }");
tryItOut("switch(#0=[@foo]) { default: yield  \"\" ;break; case 3: break; case 6: prop, __proto__;case (<y><z/></y>.isPrototypeOf(undefined)): /*infloop*/L:for(var __parent__ = constructor; __parent__ = false; __parent__.(__count__)) {const __iterator__;continue M\n; }break;  }");
tryItOut("do {let __parent__;export prototype; } while((this.__defineGetter__(\"prototype\", new Function)) && 0);");
tryItOut("/*infloop*/for(let __proto__; <x/>;  /x/g ) throw constructor;");
tryItOut("/*for..in*/for(let __count__ in ((function () { return ({}).hasOwnProperty } )(prop.prop setter= (0x99).watch)))export *;");
tryItOut("return;");
tryItOut("break L; const __proto__;");
tryItOut("/*for..in*/for(prototype = * = <><x><y/></x></> in ([constructor.__parent__ = <><x><y/></x></> if (<y><z/></y>)])) Math.sin");
tryItOut("if(__proto__.constructor = 3(1e81)) {return } else {for(let y in [5,6,7,8]) __proto__ = __iterator__; }");
tryItOut("M:if(__noSuchMethod__ = <x/>) {<x><y/></x>;switch( /x/g ) { default: return __noSuchMethod__\nreturn window; } } else  if (1e81 .@*:: <x/> for (__iterator__ in [z1,,]) if (1e81)) {return; }");
tryItOut("while((4.) && 0)return;");
tryItOut("/*infloop*/for(const __proto__; ([constructor]); 0x99.hasOwnProperty(\"prototype\") <= (<x><y/></x> ? true :  \"\" )) {const __iterator__, prop; }");
tryItOut("if(let (constructor) function(id) { return id }) /*for..in*/for(var [,,] / __noSuchMethod__[arguments] in ((gc)(constructor.(constructor = true))))let constructor = __iterator__;");
tryItOut("/*for..in*/M:\tfor(var __parent__ = (*::*()) in false) {Math.powthrow <x><y/></x>; }");
tryItOut("{const prototype = <x><y/></x>, __proto__ = [[1]];\f } const __noSuchMethod__;");
tryItOut("/*for..in*/for(const prop in __parent__.constructor getter= ({}).__lookupGetter__) if(<x><y/></x>.(<x/>)) {} else  if ( '' .throw(<x><y/></x>)) {window;return; }");
tryItOut("M:if(this) if(\fprop.__iterator__ = 0.1) { if ((({a2:z2}) ^= <y><z/></y>)) {{} }} else throw <><x><y/></x></>; else  if (*::*) {with({__noSuchMethod__: typeof <x/>})export *; } else {{}/*for..in*//* nogeckoex bug 349964 */ for  each(var function::__count__ in <y><z/></y>) {throw 3;yield; } }");
tryItOut("window;");
tryItOut("throw StopIteration;");
tryItOut("__count__ = constructor;");
tryItOut("L:if(('haha'.split())) ((<x><y/></x> ? arguments : <x/>));");
tryItOut("if( \"\" ) {\n if (this) {;<><x><y/></x></>; }} else ");
tryItOut("let (prop = (uneval(*))) { export *; }");
tryItOut("let(constructor = ((p={}, (p.z = undefined)()).hasOwnProperty(\"constructor\")), __noSuchMethod__) ((function(){throw StopIteration;})());");
tryItOut("return (({ set __parent__() { yield (-0) } ,  set __parent__()__noSuchMethod__ }));");
