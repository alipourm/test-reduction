tryItOut("L:if(*::*) { if (constructor = 0x99) (({__proto__: __count__.__iterator__ = window }));} else {L:switch(window >> <y><z/></y>) { case <><x><y/></x></>:  }/*infloop*/do {export __noSuchMethod__; } while((({prototype: prototype}))); }");
tryItOut("let __parent__\ngc()");
tryItOut("if((p={}, (p.z = <><x><y/></x></>)())\n.prop , [15,16,17,18].some((1 for (x in [])), 3.141592653589793)) { if (gc()) gc()} else {\n;\nreturn; }");
tryItOut("return;");
tryItOut("let (({ prototype: [, prop, , {/*infloop*/L:while(( \"\"  >> <x/>))break ;yield; }], constructor: constructor }) = <y><z/></y>) { L:while(([1] != window) && 0){if( \"\" ) {var prop = <><x><y/></x></>, prototype =  /x/ ;export var constructor = true;; } } }");
tryItOut("/*for..in*/for(var [, [setter, __iterator__, , , ], , ({ prototype: __proto__ = <>\r<x><y/></x></>, __parent__: constructor })] in #0=(function::__proto__ = -1).hasOwnProperty(\"prototype\")) ");
tryItOut("L: {gc()continue L; }\n");
tryItOut("throw <x/>;");
tryItOut("let (__noSuchMethod__, function::constructor) { while(((__count__ = __proto__.__defineGetter__(\"__noSuchMethod__\", (function  constructor ()<><x><y/></x></>)\f.apply))) && 0){return;gc() } }");
tryItOut("for(let y in [5,6,7,8]) throw prototype;");
tryItOut("/*infloop*/while((* @ #3={a:#3#}))throw  '' ;");
tryItOut("/*infloop*/for(const __proto__;  /x/g  .@x:: this.valueOf(\"number\") instanceof __noSuchMethod__ = #1=[#1#] |= <x/>.; (let (function::prototype) [z1,,]) = {gc()break L; }) do <ccc:ddd> </ccc:ddd>with((prototype.function::__count__)){{}break L; } while((<x/>.propertyIsEnumerable(\"__parent__\")) && 0);");
tryItOut("L:  \"\" ;");
tryItOut("M:switch(@foo) { case (*::*.__noSuchMethod__ = 0.unwatch(\"prop\")): M:if(false) gc() else  if (<><bbb \txmlns=\"(<xxx {constructor}={<x><y/></x>} />.(new (function(y) { yield y; return 1e81;; yield y; })()))\"></bbb></>) {gc }{(((window)));/*infloop*/do {prop = true, function::constructor; } while((\n<y><z/></y>)); }\nbreak M\n;default:  }");
tryItOut("/*infloop*/for(<x/> | null; (<x><y/></x>.__defineSetter__(\"__parent__\", new Function) >> (function  constructor (prop) { yield window } ).call(<><x><y/></x><\f/>, true)) - (*::*.__defineSetter__(\"__proto__\", function  __count__ (prototype) { return 0/0 } )) - Object(*)--; ('fafafa'.replace(/a/g, true))) break ;\nprop;\n");
tryItOut("throw StopIteration;");
tryItOut("__noSuchMethod__ = @foo, prototype = __noSuchMethod__");
tryItOut("switch(window) { default: __count__;break;  }");
tryItOut("L:if(case <><x><y/></x></>: prop;.__defineGetter__(\"constructor\", ({}).hasOwnProperty) ? Object((-0)) : #2=[ /x/g ].unwatch(\"[z1] instanceof <><x><y/></x></>\")) { if (new (new Function)()) {/*infloop*/M:while((this.__defineSetter__(\"__parent__\", [1]).throw(null | <x/>)))/*infloop*/do gc() while(*::*, __iterator__); } else /*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in __parent__) return -0;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(this in *::*) {export *;let __count__; }");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("");
tryItOut("L:if(((p={}, (p.z = 4.)()))) { if (<x><y/></x>.unwatch(\"__proto__\")) function(y) { yield y; export prop;; yield y; }} else {__iterator__; }");
tryItOut("/*for..in*/for(var __proto__ = (((([15,16,17,18].filter(continue ;, -1)) >= ({ get __noSuchMethod__ __proto__ (__iterator__) { return @foo }  })) for (prop in *::*.eval( /x/g )) for each (__iterator__ in <x/>) for each (__noSuchMethod__ in <y><z/></y>) for (prop in  '' ))) in undefined.*)  \"\" ;");
tryItOut("/*for..in*/for(__iterator__ in (constructor = (__count__.throw(constructor)))) break ;return __iterator__;");
tryItOut("__parent__ = __iterator__;");
tryItOut("with({}) { yield (new RangeError()) < (new (Math.pow).apply(prototype, <><x><y/></x></>)); } ");
tryItOut("/*infloop*/L:for(let __iterator__; ((function (__parent__, __noSuchMethod__) { yield <x><y/></x> } ).call(this, *::*)); ++<x><y/></x>) {; }");
tryItOut("if(*::*) {continue ; } else  if (RegExp(<x><y/></x>)) continue ; else export *;");
tryItOut("continue L;\n((__parent__%=<x><y/></x>));\n");
tryItOut("if((prototype != prop)) {;(<x><y/></x>); } else const __noSuchMethod__ = *, prototype = false;");
tryItOut("{const prototype, __iterator__; } const prototype;");
tryItOut("yield;");
tryItOut("/*infloop*/while(null .@x:: ( null .isPrototypeOf( /x/g )).unwatch(\"__count__\"))(3);");
tryItOut("return");
tryItOut("/*infloop*/for(let ({ __proto__: [, prototype, constructor] }) = this; __count__.__parent__ =  /x/ ; (__iterator__ = this) >= <x><y/></x>.(<x/>)) {const prototype, constructor = 0.1; }");
tryItOut("/*for..in*/for(const __proto__ = this.__defineGetter__(\"__noSuchMethod__\", eval) in null) {yield;function(q) { return q; } }");
tryItOut("switch(<x><y/></x>) { case 0: break; break; yield 1e4;case <x><y/></x>: gc()break; default: <y><z/></y>;\tcase 6: break; case <x><y/></x>: break;  }");
tryItOut("X");
tryItOut("({}).__lookupGetter__\n{}\n");
tryItOut("yield;");
tryItOut("if(prototype .@*:: this) { if (({ __parent__: ({ prototype: prop }), __noSuchMethod__: [__parent__] }) = (({ constructor: __noSuchMethod__, __iterator__: __parent__ }) = [<x><y/></x>].map(/a/gi))) throw [z1,,]; else {; }}");
tryItOut("if(-1.__iterator__ = (-0)) try { __count__ } finally { const __iterator__ = __noSuchMethod__, __parent__ = <x/>; } ");
tryItOut(";");
tryItOut("/*infloop*/for( '' ; undefined;  \"\" ) {export *; }");
tryItOut("/*infloop*/M:for(({ __noSuchMethod__: prototype, __iterator__: prop }) = constructor; (null.yoyo(<x/>)); (<x\f><y/></x>.eval(1.3))) {return;return <x/>; }");
tryItOut("throw <x><y/></x>;");
tryItOut("{function (constructor)function ([y]) { }__parent__; }");
tryItOut("/*infloop*/while((typeof <x/>.@foo(prototype.__noSuchMethod__ setter= function(q) { return q; })))break L;");
tryItOut("L: {let __count__ = [], __count__ = __iterator__; }\nL: {<x><y/></x>;gc() }\n\t");
tryItOut("if(__proto__%=__noSuchMethod__ = <xxx>{function::constructor}</xxx>.(prototype = {})) { if (<zzz>(<x/>);</zzz>) {let __noSuchMethod__ = -0; const __count__; } else /*for..in*/M:for(const // = (<x/>.@*) in false ? [,,] : <x><y/>\r</x>) export prop;}");
tryItOut("this.zzz.zzz;");
tryItOut("M:if([[1]]) {switch(/*\n*/@foo) { case ((function(q) { return q; }).call(#1#, true / *::*)): yield;export *;break; default: __iterator__ = *;break; case (eval)(): break; break; <x><y/></x>break; case (Number((({__parent__: * })))): return;break; case 5: (1 for (x in []))break; case (<><x><y/></x></>.unwatch\n(\"__proto__\") !== __parent__.__count__.hasOwnProperty(\"constructor\")): case ((prop)(<x><y/></x>)): return prototype;break; case <y><z/></y>: throw 1e81;case [5.0000000000000000000000].map(eval): {} }/*for..in*/M:for([__count__, , __count__] in ((new Function)(.2.__defineGetter__(\"__noSuchMethod__\", Math.pow))))continue M; } else  if (new (<xxx {__noSuchMethod__}={this.__defineGetter__(\"constructor\", eval)} />)()) {let constructorL: yield true; } else return *;");
tryItOut("L:switch((/a/gi)().watch(\"__noSuchMethod__\", <><x><y/></x></>)) { case ([,,z1].valueOf(\"number\")).constructor =  \"\" : /*infloop*/L:for(let __parent__ = <x><y/></x>; window; this) let __noSuchMethod__ = <><x></*/>/x></>;break; case 0: return true; }");
tryItOut("/*infloop*/for(<y><z/></y>; null; window) {}");
tryItOut("while((constructor == <><x><y/></x></>) && 0){/*\n*/{; }M:switch((eval(\"@foo;\", \f<><x><y/></x></>.__defineSetter__(\"function::__noSuchMethod__\", eval).hasOwnProperty(\"__parent__\")))) { case void (<><x><y/></x></>)( /x/ ).unwatch(\"each\"): throw (({ prop: __parent__, __proto__: __parent__ }) = __noSuchMethod__ = [[]]); } }");
tryItOut("if(constructor .@x:: <y><z/></y>) {(-1); }\nthis.zzz.zzz;");
tryItOut("/*for..in*/for(const ({ prototype: __noSuchMethod__ }) in ((new Function)(new ((-1)).__defineSetter__() * (p={}, (p.z = null)()))))break ;");
tryItOut("/*infloop*/for(let prop = <x><y/></x>; *;  '' ) ");
tryItOut("function  __noSuchMethod__ ()<x>y/>//*x>");
tryItOut("if(\f<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { if (new /a/gi( '' , __proto__).isPrototypeOf(constructor = prototype)) {if( '' ) {gc()return #1#; } else  if (3/0) {let <x><y/></x>;continue L; } else return; } else /*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <x/>.__defineGetter__(\"__proto__\", new Function)) { { yield (-1) .. @foo }  }}");
tryItOut("/*infloop*/for(new (function(y) { yield y; {}; yield y; })(prototype); *::*.__defineSetter__(\"prototype\", )\n; (<x><y/></x> & [[1]] .@*:: true >= <><x><y/></x></>)) {export *;yield <x/>; }");
tryItOut("with((new String()))/*infloop*/for(let __iterator__ = <y><z/></y>;  /x/g ; <>__parent__</>) {([,,z1]);; } const prototype;");
tryItOut("/*infloop*/L:for( /* Comment */@foo; ((p={}, (p.z = ({ __iterator__: __proto__) = (<x><y/></x>.hasOwnProperty(\"prop\"))))())); (Array(<><x><y/></x></>, prototype))) {/*for..in*/for(__parent__ in ( \"\" )) {/*infloop*/for(var __proto__; constructor; <x><y/></x>) {<x><y/></x>;(<><x><y/></x></>); }; }this.zzz.zzz; }");
tryItOut("if(<xxx {prototype}={__iterator__.__count__} />.(<><x><y/></x>.(*::*)</>.(++<><x><y/></x></>.__defineSetter__(\"prop\", Function)))) { if (((Math.sin).apply)(3.141592653589793.unwatch(\"__proto__\").yoyo( /x/g  .@*:: <x><y/></x>))) { } else {/*for..in*/for(__proto__ in false) {break ;yield; }yield <><x><y/></x></> >>= <><x><y/></x></>; }}");
tryItOut("throw StopIteration;");
tryItOut("; const prop;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/for(this; prop; __iterator__ + (1e81 .@x:: <><x><y/></x></\f>) ^= (p={}, (p.z = <y><z/></y>)())) window;");
tryItOut("/*infloop*/M:while(constructor)if(1e81 /= __parent__) { if (new (function  prototype (__proto__) { return window } )(constructor)) __noSuchMethod__ = 0.1 else {const __noSuchMethod__ = undefined, __parent__; }}");
tryItOut("if(<x><y/></x>.eval(this)) {if( '' ) return window; else {yield <><x><y/></x></>; } } else  if ((<><x><y/></x></> |= <><x><y/></x></>)) export *; else {export prototype;yield; }");
tryItOut("/*for..in*/for(var [constructor, __count__] = constructor in [[1]]) yield;\nexport prop;\n const prototype;");
tryItOut("do {throw <x/>; } while(((p={}, (p.z = <y><z/></y>)())) && 0);");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("throw StopIteration;");
tryItOut("L:switch(<x><y/></x>.(<><x><y/></x></>)) { default: constructor =  /x/ \f;break; case (new __proto__.(false)): if((__proto__)(<x/>)) { if (this) __parent__, prop = undefined; else return;} const __noSuchMethod__;while(((delete [undefined])) && 0)([z1]);case 2: break; case (window == <><x><y/></x></>): yield <><x><y/></x></>.__proto__;break; var constructor, prototype = __proto__break; break; case 3: break; case <x/>: var __noSuchMethod__, function::__proto__;case 3: /*infloop*/for(__count__; <y><z/></y>; <x><y/></x>) ( \"\" ); }");
tryItOut("/*infloop*/L:for(const __noSuchMethod__ = <x/>;  \"\" ; <><x><y/></x></>) continue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in  /* Comment */<x><y/></x>) {return __proto__; }");
tryItOut("M:switch(prop = *) { default: break; yield;break; case 4: if(<x><y/></x>) {@foo; } else  if (this) {return; } else {yield <><x><y/></x></>; \"\" ; }break;  }");
tryItOut("var __iterator__;");
tryItOut("__proto__ = __count__;");
tryItOut("with(@foo)function  prop ()<><x><y/></x></>");
tryItOut("let ([__proto__, ({ \fprop: ({ prototype: prototype }) }), __iterator__, ]) { /*for..in*//* nogeckoex bug 349964 */ for  each(let in <x/>.isPrototypeOf( /x/ ) % prototype%=@foo) do return  /x/g ; while((<x><y\t/></x> .@*:: this.__parent__) && 0); }");
tryItOut("/*for..in*/for(var __noSuchMethod__ =  in  '' .yoyo(<x><y/></x>)) function  @foo (__count__)<><x><y/></x></>");
tryItOut("throw 1e81; const prototype\n/*infloop*/while(\ffalse.__defineSetter__(\"function::__count__\", [1,2,3,4].map).__iterator__ = __parent__.hasOwnProperty(\"prop\")){<{prototype}></{prototype}>\nconst __noSuchMethod__ = __iterator__, __noSuchMethod__; }");
tryItOut("gc()\nswitch(this) { default: case prop: break;  }\n");
tryItOut("M:while((((++@foo)[((Function)(<x/>, null))])) && 0)return;");
tryItOut("if(new [] = [1,2,3,4].slice([1,,])) with({__proto__: this.zzz.zzz}){throw __iterator__; } else  if (((function ([y]) { })().unwatch(\"constructor\")) @ [,,z1] = __iterator__) {/*infloop*/while((constructor.__defineGetter__(\"constructor\", function (prototype, __noSuchMethod__) { yield ({a1:1}) } )))/*for..in*/for([constructor, __proto__] = * in this) return prototype; }");
tryItOut("__proto__ = 0x99;");
tryItOut("if(<x/>) export prototype;");
tryItOut("for(let y in []);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let ({ __parent__: __proto__, __proto__: ({ constructor: [, [__parent__, ], []], __iterator__: __count__ }) }) in (([1,2,3,4].slice)(<><x><y/></x></>.unwatch(\"__count__\").yoyo([[]].@foo)))){/*infloop*/for(<x/>; __noSuchMethod__ = <y><z/></y>; ([*::* for each (prototype in <><x><y/></x></>)])) let prototype, __proto__ = 4.;/*infloop*/*.__defineSetter__(\"__proto__\", function () { yield <x/> } ) }");
tryItOut("/*infloop*/\tL:do M:if(constructor|=<x><y/></x>) {let prototype = #1#; } else  if ((<x><y/></x> += constructor)) {1.2e3;yield; } else {return *::*;; } while((p={}, (p.z = <x><y/></x> = function ([y]) { }.*)()));");
tryItOut("return;");
tryItOut("if(@foo.unwatch(\"__iterator__\")) {const prop = window;yield; } else  if (+<><x><y/></x></>) {let __noSuchMethod__; }\nif(~[,,].eval(<x><y/></x>)) { if (*::*.yoyo(false)) { } else const __noSuchMethod__ =  '' ;}");
tryItOut("/*for..in*/for(var __count__ = (@foo.unwatch(\"prototype\")) in <y><z/></y> ? this : 0 ? this.__defineSetter__(\"prototype\", function () { return * } ) : ++undefined) {/*infloop*/do (window); while(<x/> !== null) }");
tryItOut(" if (({__noSuchMethod__: (prop = constructor - new (function (__count__, prop)__count__)())}))");
tryItOut("if(new Exception((this.zzz.zzz))) { if (new ([,].*)((new Function)(__count__, 033), <x><y/></x> >>= true)) {continue L; }} else __parent__\n");
tryItOut("yield;");
tryItOut("__count__.prop = __iterator__;");
tryItOut("");
tryItOut("/*for..in*/for(const prototype in <><x><y/></x></>) ");
tryItOut("");
tryItOut("/*for..in*/for(let __proto__.__parent__ in this.__defineSetter__(\"constructor\", function (constructor, prop) { const __iterator__, __parent__ = undefined; } )) let (({ prototype: __noSuchMethod__, let: [(//h\n{ __iterator__: constructor, __proto__: __count__ }), ] }), __proto__) { yield; }");
tryItOut("L: var __parent__ = function(q) { return q; };");
tryItOut("/*infloop*/while((yield ([(p={}, (p.z = @foo)()) if (<><x><y/></x></>)]))){do yield <><x><y/></x></>; while((<x/>.__lookupGetter__(\"__count__\")) && 0);/*infloop*/for(const prototype; (__parent__ = 1e4); gc((-1), <x><y/></x>).__proto__) yield; }");
tryItOut("{for(let y in [5,6,7,8]) continue ;{<><x><y/></x></>; } }");
tryItOut("if([1,,] for each (prototype in constructor)\n) {const #3={a:#3#} = null;( /x/g )\n(null)\nyield; } else  if ( \"\" ) return *::*;");
tryItOut("/*infloop*/for(__parent__; constructor; @foo) gc()");
tryItOut("M:with({delete: null.watch(\"prop\", (1e81).apply)})gc()");
tryItOut("while((__proto__ = 1.2e3) && 0){continue ;throw *; }");
tryItOut("if() prop = __parent__ else {{} } const prototype;");
tryItOut("/*infloop*/L:do {if((this.zzz.zzz)) {} else  if ([1.2e3].map(\t(<x/>).__defineSetter__)) {throw this;export *; } } while(((new Function(\"\"))(<y><z/></y>)));");
tryItOut("/*for..in*/for(prototype(<x><y/></x>) in  /x/ ) {(*::*);{} }");
tryItOut("{ }");
tryItOut("do { } while((3) && 0)");
tryItOut("/*for..in*/L:for(\tconst [__noSuchMethod__, prototype] = <x><y/></x> in ) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in  /x/g ) {;yield; }");
tryItOut("with({}) { try {  } catch(__noSuchMethod__ if (<x/>)) { export *; } catch(__iterator__) { return; } finally { ; }  } ");
tryItOut("return;");
tryItOut("{return;let __parent__ = prototype; }\n\n");
tryItOut("yield (<x/>++);try { throw __noSuchMethod__; } catch(__parent__ if (function(){let(prototype, __iterator__ = [,]) { gc()})()) { throw __proto__; } catch(prop if (function(){for(let y in [5,6,7,8]) export *;})()) { return new prop; } catch(__count__ if ) { for(let y in [5,6,7,8]) ; } catch(prototype) { __count__ = __noSuchMethod__; } finally { return (<x><y/></x>)[ '' ]; } ");
tryItOut("let (({ prop: constructor, prototype: __proto__ }) = [1,,], __noSuchMethod__ = true) { {} }\n;");
tryItOut("return; const __parent__;");
tryItOut("{; }");
tryItOut("prototype = prototype;");
tryItOut("{throw  \"\" ; }");
tryItOut("/*infloop*/while(\n(prototype = #1#) >= prototype%=__iterator__){/*for..in*/for(__proto__ in ((/a/gi)(*::*))){return; }{gc() } }");
tryItOut("with({}) return [z1];");
tryItOut("with(033.yoyo( /x/g ).prop)throw window;");
tryItOut("/*for..in*/for(constructor.__noSuchMethod__ in 0) if(window ? case 2: case @foo: break; (*);break;  : [z1]) { if (undefined\n.__lookupGetter__(\"constructor\")) return; else {[z1,,];__count__; }}");
tryItOut("export function::constructor;throw  \"\" ;");
tryItOut("this");
tryItOut("__proto__");
tryItOut("export *\n");
tryItOut("yield this;");
tryItOut("export __count__\n");
tryItOut("L: ;");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = prop in __proto__ = <y><z/></y>) {/*for..in*/L:\rfor(var prop in true) {<x/>; }yield [1]; }");
tryItOut("while((__iterator__) && 0)__proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("switch(('fafafa'.replace(/a/g, gc) || void true)) { case (constructor = this.constructor = @foo.valueOf(\"number\")): if(window) {} else  if (undefined) export *;break; case 9: M:if((null\n)) [[]]; else  if (__noSuchMethod__) {export *;([1,,]); }break;  }");
tryItOut("while((null) && 0){(this);return; }");
tryItOut("M:with(eval(\"<y><z/></y>\",  '' ))with(__noSuchMethod__ = return prop;){export *;prototype, __noSuchMethod__ = __proto__; }");
tryItOut("/*for..in*/for(var [__parent__, __iterator__] = undefined in *::*) {gc()'haha'.split }");
tryItOut("gc()");
tryItOut("do {__proto__ } while((0[ /x/ ]) && 0);");
tryItOut("return  /x/  instanceof 3 >>=  '' ;");
tryItOut("prototype = constructor;");
tryItOut("L: Math.sin\nthrow StopIteration;\n");
tryItOut("/*for..in*/for(const \ffunction::__proto__x::prop] =  \"\"  in  /x/g ) {yield; }");
tryItOut("if([,,z1]) { if (1.3) /a/gi} else  finally ");
tryItOut("/*for..in*/propfor(let [constructor, __count__] = (this.prototype) in (({ constructor: __parent__, __parent__: __count__ }) = [, prototype, __noSuchMethod__, __noSuchMethod__])) {(*); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.__parent__ in (({ get prototype(__proto__)(<x/>).call(prop, <x><y/></x>,  /x/g ) })).__lookupSetter__(\"prop\")) {var __iterator__ = undefined, constructor = [,,]; }");
tryItOut("let(constructor, constructor = undefined) ((function(){try { export __count__; } /*\n*/finally { export *; } })());");
tryItOut("/*infloop*/M:for((__parent__) = null.__defineSetter__(\"__count__\", Function); (<x><y/></x>.(<x><y/></x>));  \"\" ) if(@foo) {let __count__; } else (*::*);");
tryItOut("/*for..in*/M:for([prop, setter] =  /* Comment */<x><y/></x> in 1.3.__defineGetter__(\"__iterator__\", new Function)) (:).apply");
tryItOut("continue M;break M;");
tryItOut("{/*infloop*/for(prototype.__defineGetter__(\"__parent__\", new Function); ([1] >>>=false); *) {export *; }\n }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("{export *;export *; }");
tryItOut("with((#1=[(__proto__)[ '' ]])){const __proto__ = #1#; }");
tryItOut("/*for..in*/for(const __count__ = (<{__iterator__}></{__iterator__}>.(eval(\"let constructor = [,,];\", undefined))) in new (function(q) { return q; })(*, *)) M:if(*::*.@*) {return; } else  if ('fafafa'.replace(/a/g, (this).apply)) {const __noSuchMethod__ = window; } else {yield -3/0; }");
tryItOut("return;");
tryItOut("return new Math.pow(<x><y/></x>.([[]]));");
tryItOut("do /*for..in*/M:for(let [__iterator__, function::__iterator__] = (this.zzz.zzz) in  '' ) {(<x><y/></x>).call } while((\n<x/> >>= ({ __noSuchMethod__: __proto__, __proto__: __count__ }) = <x><y/></x>.([z1])) && 0);");
tryItOut("/*for..in*/for(const prop = (__count__ = window) % ({ prop: prop }) = \n-0.__lookupGetter__(\"prop\") in Exception(this.zzz.zzz, <><x><y/></x></>).watch(\"__iterator__\", function(y) { yield y; (window);; yield y; })) /*infloop*/L:for(__parent__; prototype; <y><z/></y>) {;prototype }");
tryItOut("let (__proto__, __parent__) { return; }");
tryItOut("switch(<><x><y/></x></> && <x/> >> new window.__lookupGetter__(\"prototype\")) { default: /*infloop*/for(const __iterator__; 'fafafa'.replace(/a/g, (1 for (x in []))); <x/>)  const __parent__;case 1: break; case 9: break; with({__iterator__: window})/*infloop*/L:while(prototype.constructor = ({__parent__: @foo })){export prop;export *; }break;  }");
tryItOut("M:with({__parent__: <x><y/></x>()}){Math.pow }");
tryItOut("(<y><z/></y>);\nreturn;\n");
tryItOut("throw (-0)");
tryItOut("while((<y><z/></y>) && 0)(false).watch");
tryItOut("/*infloop*/for(eval(\"<x/>\", []); (3.141592653589793 /= __count__); __proto__.x::constructor) gc()");
tryItOut("let (__noSuchMethod__) { (delete <y><z/></y>); }");
tryItOut("/*for..in*/M:for(let prop in ((Function)(this.__defineSetter__(\"__iterator__\", function(q) { return q; }))))yield;");
tryItOut("/*infloop*/for(const __noSuchMethod__; (yield <><x><y/></x></>).*; ( for each (__parent__ in this))) {export *; }");
tryItOut("{let __iterator__ = *, __iterator__;\nvar prototype;\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in window %  /x/g ) {break L;throw *::*; } }");
tryItOut("const prototype = <x><y/></x>, function::__noSuchMethod__");
tryItOut("var prototype, prototype = window;");
tryItOut("switch(new Number(prototype getter: new Function)) { case (({constructor: <><x><y/></x></>})) << (#3={a:#3#})(): let constructor = this;break; break; break;  }");
tryItOut("/*for..in*/L:for(var [__proto__, __count__] = 1.2e3 in <x><y/></x>) {return; }");
tryItOut("{continue L;return <x/>; }");
tryItOut("constructor = yield;");
tryItOut("if(constructor.@*) {gc() } else  if ((eval(\" \\\"\\\" \", window) && eval(\"this;\", @foo))) (@foo);\f else this.zzz.zzz;");
tryItOut("/*infloop*/for\f( \"\" ; (prototype = ({ prototype: __count__ })); function::__noSuchMethod__ = *) {(<><x><y/></x></>);M:with(<x><y/></x>)(1e+81); }");
tryItOut("/*for..in*/L:for(var <><x><y/></x></> ? <><x><y/></x></> : #3={a:#3#}.__noSuchMethod__ in (((<x><y/></x>--).watch)( /x/g \n.constructor = \nwindow))){{}; }");
tryItOut("switch( /x/ ) { default:  }");
tryItOut("/*infloop*/M:do let __proto__ = undefined, constructor; while(<x><y/></x>);");
tryItOut("L:if(window) L:with(window){yield -3/0;; } const __proto__; else  if (new Function(5.0000000000000000000000, [,]) in Number(\ntrue)) {if(constructor.( \"\" )) {yield 0/0;(*); } else  if ((Math.sin)) {export prototype; } } else {;return; }\n");
tryItOut("yield;");
tryItOut("{yield;with(*::*){continue ; } }");
tryItOut("if([z1,,]) { if ((__parent__ = let (__iterator__, constructor = false) __parent__).yoyo(1e4.valueOf(\"number\")--)) /*for..in*/for(var default: break; break; break; case undefined: return 1.2e3;case 7: null;break; case 1: break;  in <y><z/></y>) export __proto__;} else {if((-1)) { if (<x/>) return;} else {let __count__ = <y><z/></y>; } }");
tryItOut("; const prototype;");
tryItOut("{throw prop; }");
tryItOut("L:if(([15,16,17,18].sort(@foo, window >= @foo))) {[1,2,3,4].map\nif(<x><y/></x>) export prop; else  if (<x><y/></x>) yield;/*for..in*/for(each in  /x/g ) {throw <x><y/></x>;function  prop (prop, __noSuchMethod__) { return prototype }  } } else  if (__noSuchMethod__|=-3/0) (prototype = function::__parent__);");
tryItOut("{return <x><y/></x>;var set = <><x><y/></x></>, __proto__; }");
tryItOut("{}");
