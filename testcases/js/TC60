
tryItOut("switch( /x/g .prop.valueOf(\"number\")) { case 2: /*infloop*/for(const __noSuchMethod__ = false(); ( \"\" .__proto__ = arguments); window.unwatch(\"constructor\")) ;break; default: /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in ((this).call(.2, ))) return [1,,];(function ([y]) { })();break; case *::*: if(this) {{} } else  if (#0=[( { export *;, __parent__ = #3={a:#3#}; }  >> <><x><y/></x></>)]) 4case 5: break; case <x/>(([15,16,17,18].filter(function (__count__) { yield <x><y/></x> } , undefined)), *): /*for..in*/for(__noSuchMethod__ in <y><z/></y>) return <y><z/></y>; }\n/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__ in 1.3) L:while(((prop = <y><z/></y>)) && 0){}");
tryItOut("L:with({prototype: null})__noSuchMethod__");
tryItOut("prototype");
tryItOut("let (__iterator__ = -1 === <>try { const \t__count__ = window; } catch(__iterator__ if (function(){export *;})()) { 'haha'.split } catch(prototype if <x><y/></x>) { export window; } finally { (<><x><y/></x></>); } </>, __noSuchMethod__ = (<x/>.eval(true)).valueOf(\"number\")) { /*infloop*/while((new ([1,2,3,4].map)()))continue ; }");
tryItOut("/*infloop*/for(@foo <= false; ([1,,] || prop)[let (__noSuchMethod__ = <x><y/></x>)  '' ]; ((prop)(this) = ({}).__lookupGetter__)) {/*infloop*/while(this--){if(@foo) { if (window) {{}return; } else yield;}constructor; }/*infloop*/do {var prop = 0x99, prototype;yield; } while(prototype.constructor); }");
tryItOut("if([({ __noSuchMethod__: __iterator__ })] = <ccc:ddd><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></ccc:ddd>.@*) {; } else  if (eval(\"@foo.hasOwnProperty(\\\"__count__\\\")\", new (1e81)()) ? continue M : <x/> != window @ __noSuchMethod__.__parent__ setter= function (prototype, __proto__)<x><y/></x>) export *;");
tryItOut("do {/*infloop*/do yield  /x/ ; while(4.); } while(([[z1]]) && 0);");
tryItOut("/*infloop*/for(let __parent__ = <x><y/></x>;  '' ; @foo) this;");
tryItOut("{(#1#); }");
tryItOut(";");
tryItOut("/*infloop*/do {} while(false);");
tryItOut("try { export *; } catch(__iterator__ if (function(){export prototype;})()) { {} } catch(__proto__) {  } finally {  } ");
tryItOut("if([<x/>].*) {export __proto__;{} } else  if (this.__defineGetter__(\"__parent__\", function (constructor, __noSuchMethod__) { throw window; } )) export *;\nreturn  /x/ ;\n else  /x/ ;");
tryItOut("M:if(false[false]) {var prop = window; } else  if (__parent__\r.prototype getter= function(q) { return q; }) this");
tryItOut("let (* = -1 !== #1#.propertyIsEnumerable(\"__noSuchMethod__\"), __proto__ = (__proto__.prop getter= (1 for (x in [])))) { {} }");
tryItOut("switch(*::*.valueOf(\"number\") >>>=++) { default: break; case <x><y/></x>.(false): if(prop.__iterator__ = new ( get constructor(constructor, prop)prototype = <><x><y/></x></>)(constructor, __count__)) {<x/>;@foo; } else gc()\nbreak M;case (yield  /x/ [prototype]): export constructor;break; case 9: for(let y in [5,6,7,8]) throw __count__;break; case -3/0: /*infloop*/for(__noSuchMethod__ = 3.141592653589793; <x/>; (({__proto__: __noSuchMethod__ }) for (__parent__ in <y><z/></y>) if (*))) {continue ;( '' ); }break; case 7: let ([[], __proto__, , , [__parent__, , , prop]]) { with(function::__parent__ = <><x><y/></x></>)\tprop = <><x><y/></x></>; }case 9: prop.(( /* Comment */<x><y/></x>.valueOf(\"number\"))).isPrototypeOf(<x><y/></x>.eval(<><x><y/></x></>).throw(<x/>.isPrototypeOf(@foo)))break; case prop = <y><z/></y>.__defineGetter__(\"__count__\", ({}).__lookupGetter__).constructor: throw 0/0;break; case (yield 3)[((yield __noSuchMethod__)).__parent__]: __proto__break; case (function  __proto__ (__count__) { (({}).hasOwnProperty).apply } )(__count__ = <x><y/></x>): prototype;var __count__;break; return try { {} } finally { (<x><y/></x>); } ;break; export prop;case 2:  }");
tryItOut("let (__count__) { {} }");
tryItOut("if(*::* >>= constructor.__count__ setter= [1,2,3,4].map) { if (<><xxx {each}={function ([y]) { }().unwatch(\"<x/>.prototype\")} /></>//h\n) {yield  /x/ ; }} else {L: return;M:if(033) export __parent__; else  if (0x99) yield <x><y/></x>; else {; } }");
tryItOut("export *");
tryItOut("return <><x><y/></x></>;");
tryItOut("with({}) yield \f get prototype(prop, __noSuchMethod__)[,] ^  /x/ ;");
tryItOut("/*infloop*/while((gc(1e-81, <x><y/></x>)))yield;");
tryItOut("let(__noSuchMethod__ = new (window)(<y><z/></y>), __proto__) { let(prototype, constructor) ((function(){return;})());");
tryItOut("\twhile(((*::*.@foo) / this / @foo) && 0){break L;yield; }");
tryItOut("/*infloop*/for(let prop; (this.__defineGetter__(\"__noSuchMethod__\", -<x><y/></x>)); *) {let (__count__) { if(*::*) {{} } else {{}gc() } } }");
tryItOut("/*infloop*/M:for(var __count__; this.__defineSetter__(\"__iterator__\", eval).prototype; (uneval( /* Comment */prototype))) L: {;; }");
tryItOut("continue ;");
tryItOut("if(<x><y/></x>) { if (__iterator__ = __count__) yield window;} else {<><x><y/></x></>;continue M; }/*for..in*/for(const [prop, __proto__] = this >>>=null in (<y><z/></y> /= <y><z/></y>)) {var __count__, __parent__;export constructor; }");
tryItOut("with({__proto__: (this.__defineSetter__(\"__iterator__\", window) ? <><x><y/></x></>\n : <x><y/></x>.(0/0))}){{} }");
tryItOut("L:switch(<x/> === null) { default: break; case (__count__ = __iterator__): <x><y/></x>; const __iterator__;break; case [15,16,17,18].map(function () { yield * } ,  '' ): ( /x/ );break; case -0 != <x/>: break;  }");
tryItOut("__proto__ = __count__;");
tryItOut("/*for..in*/for(var [__parent__, prototype] = (__proto__.__parent__ setter= (1 for (x in [])).@foo) in *) {gc()return __iterator__; }export __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (undefined)(__count__) in (new *::*())) let function::__proto__ = <><x><y/></x></>, __proto__; const prototype;");
tryItOut("/*infloop*/do /*for..in*/for(let __iterator__ in ((function  prop ()<x/>)(<y><z/></y> >>> <x><y/></x>.(<x/>))))yield;return; while(setter);");
tryItOut("{__count__ }");
tryItOut("/*infloop*/for(let prototype; __proto__; constructor) export *;");
tryItOut("/*for..in*/L:for(var __iterator__ in __proto__) /*\n*/");
tryItOut("if(((-0) in <x><y/></x> += (<x><y/></x>)[true] != -<><x><y/></x></>)) {} else  if (this.__defineGetter__(\"__proto__\", (gc).apply)) {{<y><z/></y>; } } else continue ;");
tryItOut("switch((prop() << __iterator__.__proto__)) { case 5: L:with({function::constructor: yield (uneval(-3/0))}){return;gc() }break; case 4: switch( \"\" [@foo]) { case  \"\" :  }break; case 9:  }");
tryItOut("/*infloop*/while([11,12,13,14].filter){/*infloop*/L:do {(__iterator__); } while(__count__ = constructor); }");
tryItOut("if(window.__defineSetter__(\"constructor\", __iterator__)) {} else {export __parent__; }\n");
tryItOut("if(<><x><y/></x></>) { if (Error(*::*)) [prototype, __parent__, __count__, constructor, ] else {let constructor = *::*, __count__ = <><x><y/></x></>;export __noSuchMethod__; }}");
tryItOut("L:if([,,z1] & new 1.2e3() , (__iterator__ =  /x/ )) { if ((new ((<x><y\f/></x>.(4.)))(( '' .__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; ; yield y; })), #1=[#1#]) ? ((<y><z/></y>.__defineGetter__(\"prop\", (*).__defineSetter__)).@foo) : (constructor =  /x/g  ? function ([y]) { } : false))) export constructor; else /*for..in*//* nogeckoex bug 349964 */ for  each([this].some(function(q) { return q; }) in (prototype = .2)) {{throw 033;var __proto__ = this, __count__; } }}");
tryItOut("let(__count__) ((function(){function  constructor () { yield (-1) } })())\n");
tryItOut("L:if(yield [[1]].__lookupGetter__(\"constructor\") ..  /* Comment */5.0000000000000000000000) L: {yield;throw <y><z/></y>; } else  if ((p={}, (p.z = prototype)())) {yield;return <><x><y/></x></>; } else if(((prototype = 1.3))) {export *;continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ( /x/g ) in __count__ = window) {export prototype; }");
tryItOut("let (__noSuchMethod__ = <x><y/></x>, prop = <><x><y/></x></>) { let (let(__iterator__ = <><x><y/></x></>) ((function(){;})());) { return; } }");
tryItOut("L:if(<x><y/></x>.@*) {<x><y/></x> } else  if (( ''  <=  '' ).__defineGetter__(\"__proto__\", function(y) { yield y; {}; yield y; })) yield 1.3; else gc()");
tryItOut("try { this.zzz.zzz; } catch(__proto__ if (function(){yield delete.(<><x><y/></x></>);})()) { /*for..in*/for([prototype, __count__] = __iterator__ in true) {yield;throw default: throw arguments;3/0; } } ");
tryItOut("(*);");
tryItOut("L: {gc()export *; }");
tryItOut("/*infloop*/L:do {export *; } while(<><x><y/></x></>)\n");
tryItOut(";{}");
tryItOut("/*infloop*/M:do M:if( /x/ ) return <><x><y/></x></>; else \t if (*::*) export *; else \n while((((yield;))));");
tryItOut("let (prop, __iterator__) { while((-3/0) && 0){yield  /x/g ;export *; } }");
tryItOut("/*infloop*/M:do  while(new (<y><z/></y>.__lookupSetter__(\"__count__\"))());");
tryItOut("export __iterator__;");
tryItOut("/*infloop*/M:while(<x/> + __iterator__)yield -0;");
tryItOut("yield\n");
tryItOut("with({constructor: ({__noSuchMethod__: __proto__ = <y><z/></y>})})continue ;");
tryItOut("with({}) let(constructor = null %= .__lookupSetter__(\"prototype\")) ((function(){throw StopIteration;})());");
tryItOut("__count__ = constructor;");
tryItOut("/*infloop*/for(({ constructor: case ([.2].sort((033).apply).__defineSetter__(\"__iterator__\", function(q) { return q; })): default:  }) = (true(<x/>)); undefined.__lookupGetter__(\"__parent__\"); __count__ = __noSuchMethod__) export prop;");
tryItOut("/*for..in*/for(let constructor = __count__ in <x><y/></x>) let 1.2e3 = this, prototype;");
tryItOut("{do {{} } while((eval(\"{}\", new ([1,2,3,4].map)(__proto__ ^ <x><y/></x>))) && 0); }");
tryItOut("with((<><x><y/></x></> ? undefined : undefined)){export *; /x/ ; }");
tryItOut("if(@foo) {yield;const __proto__, __noSuchMethod__ = <><x><y/></x></>; } else  if (<x><y/></x>) {@foo;let prototype; } else return;");
tryItOut("try { return  \"\" ; } catch(@foo) { return; } ");
tryItOut("let(constructor) { prototype = prototype;");
tryItOut("/*for..in*/M:\tfor(var [__iterator__, constructor] = (window.__proto__+=<y><z/></y>.hasOwnProperty(\"__iterator__\")) in prototype) let  get __proto__()<><x><y/></x><\f/>\nif(null) {}");
tryItOut("export *;");
tryItOut("/*infloop*/for(let __proto__; constructor.__proto__ getter= (prototype.constructor setter= <><x><y/></x></>); <x><y/></x>.constructor = <x/>.__defineSetter__(\"constructor\", function  __proto__ (prototype, prop) {  } )) ");
tryItOut("L:while(([,]) && 0){yield __iterator__; }");
tryItOut("if( '' ) { if ( \"\" ) let constructor;} else {export __iterator__;false; }");
tryItOut("let (function::__iterator__) { /*for..in*/M:for(const __noSuchMethod__ = new prototype = @foo(033) in 4.) yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <x/>.prototype in  ''  instanceof <x><y/></x>) return null;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in [z1,,]) {let __proto__ = <\tx><y/></x>; }");
tryItOut("for(let y in []);");
tryItOut("if(__noSuchMethod__ = prototype) return; else {if(((new Function)(undefined, <><x><y/><\f/x></>)).__count__) { if (let (prototype = <><x><\ty/></x></> ^ false, __proto__ = __count__) constructor) const __proto__ = __proto__, __iterator__ = 1e81;} else yield;/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in ((window for (__parent__ in <x><y/></x>)))) <x/>; }");
tryItOut("return");
tryItOut("{}");
tryItOut("do let constructor = __iterator__, __iterator__ = prototype; while((!(<x><y/></x>.constructor)) && 0);");
tryItOut("if(__parent__) yield; else {/*for..in*/M:for(const constructor in ((*::*)(<y><z/></y> :: <><x><y/></x></>)))switch(<y><z/></y>) { case <><x><y/></x></>: break ; }throw __proto__; }");
tryItOut("if((* |= constructor)) const __iterator__ = <y><z/></y>, __parent__ = <x><y/></x>; else  if ([<x><y/></x>].sort(null)) throw -3/0; else {break M; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __iterator__] = [] = eval in -3/0) export __parent__; const yield;");
tryItOut("throw __iterator__;\nexport *;\n");
tryItOut("with({}) prop = let;");
tryItOut("let (__proto__, function::__count__) { /*infloop*/for(let __proto__; [z1,,];; ((<x/>).watch).call(*, constructor)) {} }");
tryItOut("{ }");
tryItOut("L:with(){L: export prop; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = 'fafafa'.replace(/a/g, (Function).call) in prototype) throw undefined;");
tryItOut("if(__count__ = .*) { if (new RangeError()) yield window;} else \n(__proto__).watch");
tryItOut("yield window\nreturn <x><y/></x> !=  /x/g ;");
tryItOut("with(__count__.__defineGetter__(\"__count__\", function(q) { return q; }))(return;)");
tryItOut("/*infloop*/for((this.__defineGetter__(\"__noSuchMethod__\", prototype)\f).watch(\"prop\", (3).call);  /* Comment */this.__defineGetter__(\"prop\", ({}).__lookupGetter__); ((<y><z/></y> >>> <x/>\n))(window, <x/>)) {/*for..in*/L:for(const [__noSuchMethod__, __proto__] = undefined.@foo.__defineGetter__(\"prototype\", ({}).hasOwnProperty) in ([1,,])) {__proto__ = <x><y/></x>;\tyield __parent__; } }");
tryItOut("L:if(((1 for (x in []))).call(*, )) {continue M;(/a/gi).apply }\n/*infloop*/for(var ({ prototype: constructor }) = __count__.__noSuchMethod__ ? <x><y/></x>.valueOf(\"number\") : .2.*; 'fafafa'.replace(/a/g, ({}).__lookupGetter__); [this]) {{let __noSuchMethod__, __proto__; } }\n");
tryItOut("/*infloop*/while((__proto__ >= <x/>) - <y><z/></y>.__defineGetter__(\"prototype\", export *;)){if(false) { if (window) const constructor;} else {export __count__;export __noSuchMethod__; }\nlet __parent__;let __parent__, prop;\nexport *;\n }");
tryItOut("try { const __noSuchMethod__, prop = __count__; } finally { (prototype); } __parent__, __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let @foo.__noSuchMethod__ in <x/>) function(id) { return id };");
tryItOut("let([], __proto__) { with({}) export *;");
tryItOut("if(<><x><y/></x></>.yoyo(//h\n-<x><y/></x>)) {/*infloop*/L:for(0 :: <><x><y/></x></>; (__noSuchMethod__.__lookupSetter__(\"prop\")); (#1#)) {window }{} } else {set = __iterator__, [,,z1] in 1e4.__defineSetter__(\"__iterator__\", 'haha'.split) }");
tryItOut("/*infloop*/M:do {/*for..in*//* nogeckoex bug 349964 */constructor } while((constructor = __count__.(#1#)));");
tryItOut("const constructor;\n({}).hasOwnProperty\n");
tryItOut("switch((<x><y/></x>.@foo.constructor)) { case 0: ({});break; default: break; case 7: break;  }");
tryItOut("\rif(this.__defineSetter__(\"0.1\",  if (undefined))) { if ((<><x><y/></x></>.__count__.__parent__)) <y><z/></y>;} else {this;throw window; }");
tryItOut("var __noSuchMethod__, set =  \"\" \n");
tryItOut("while(((this.__defineSetter__(\"constructor\", (1 for (x in []))))) && 0){export __parent__;export __proto__; }");
tryItOut("let \f(prop, prop = (Function(<x/>, 1.2e3).eval(5.0000000000000000000000 .@x:: <y><z/></y>))) { {} }");
tryItOut("Math.sin\nvar __proto__;\nyield;");
tryItOut("if(<x/>\n) {switch(window(<x><y/></x>, <y><z/></y>)) { default: yield <x/>;case 9: break; /*for..in*/for(let \fprototype in (((window).watch)([[]]))){(false).__defineSetter__ }break;  } } else  if ((yield  '' .valueOf(\"number\"))) undefined\nyield;<><x><y/></x></>\n else {(-1);export __parent__; }");
tryItOut("/*infloop*/for(({ __iterator__: ({ __proto__: __count__, __iterator__: [[[, , __noSuchMethod__]]] }) }) = (new (1 for (x in []))(0.1, undefined)) instanceof <y><z/></y>; this.__defineSetter__(\"__parent__\", (('haha'.split)((([<x><y/></x> if ( '' )]).__lookupGetter__(\"prop\")))).apply); ((uneval((({a1:1}) ? <><x><y/></x></> : null))))) const <!--yy-->, constructor = <y><z/></y>;");
tryItOut("{(*::*);export *; }");
tryItOut("if((-0)) { if (__parent__) {const constructor = <x/>, __parent__ =  /x/ ; }} else {; } const delete;");
tryItOut("while((__proto__ = <><x><y/\f></x></>.isPrototypeOf(let (constructor, __noSuchMethod__ = function ([y]) { }) this)) && 0)constructor, prototype = *;");
tryItOut("gc()");
tryItOut("M:if((this.zzz.zzz)) {while(( /x/g ) && 0){gc() '' ; }/*infloop*/:for(4. || -0; prop; window) {function  __parent__ () { return; } export prototype; } } else  if (constructor.__proto__ = window -= this) M:if((p={}, (p.z = <x><y/></x>)())) { if (3) {{} } else {[1,2,3,4].map }}");
tryItOut("/*for..in*/for(var prototype in <x><y/></x>) (__iterator__);");
tryItOut("while((*) && 0){ }");
tryItOut("{__parent__ = null; }");
tryItOut("let prop; const __noSuchMethod__\n/*for..in*/for(const __proto__ in (('haha'.split)(((({__parent__: undefined})).@foo))\f))__parent__, __count__ =  /x/g ;");
tryItOut("switch(0) { default: case new Function(): continue ;{continue ; }break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__proto__.__iterator__) in (RangeError().__lookupGetter__(\"__count__\"))) var __iterator__ = true, __count__ =  /x/ ;");
tryItOut("L:with([__parent__, __noSuchMethod__, __iterator__, ] = __count__)yield false;if(let (constructor, __count__) <x><y/></x>) {yield __iterator__;break L; }\n");
tryItOut("undefined const  ;");
tryItOut("/*for..in*/for(__proto__ in <><x><y/></x></>.constructor = [z1]) {yield; }");
tryItOut("/*infloop*/for((#0=[( \"\"  instanceof *)]); ({ set __iterator__() { yield (-3/0)( /x/ , this) } , constructor getter: eval }); new (new  /* Comment */ '' (<x><y/></x>\n))( in <><x><y/></x></>, <><x><y/></x></> = <><x><y/></x></>++)) {L: eval }");
tryItOut("L: {yield <><x><y/></x></>; }");
tryItOut("try { __count__ = __proto__; } finally { for(let y in []); } ");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x/>) {__noSuchMethod__return; } }");
tryItOut("/*infloop*/for(let each; []; false.yoyo(<x><y/></x>)) return \f<x><y/></x>;");
tryItOut("M:with(prototype){Functionwith(-0)return;export *; }");
tryItOut("export *;");
tryItOut("return true;");
tryItOut("if(<><x><y/></x></>) { if (null) {033; }} else {(<x><y/></x>);{} }");
tryItOut("let (__count__, ({ __proto__: constructor, prototype: ({ constructor: prop, __iterator__: constructor }) }) = <x><\fy/></x>.( \"\" )) { var __parent__ = this; }");
tryItOut("if(<bbb xmlns=\"([1].yoyo(*::*.__iterator__))\"><xxx>{__parent__}</xxx> </bbb>) let prototype =  /x/ , prop = <y><z/></y>;");
tryItOut("/*for..in*/for(var [__parent__, __noSuchMethod__] =  /x/g  in __noSuchMethod__) export __iterator__;/*infloop*/for(const __noSuchMethod__; <><x><y/></x></>; (1e4 = function ([y]) { })) { /x/g ;export *; }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ __count__: ({ constructor: prototype }) }), __count__: [, , , (<><x><y/></x></>)(<y><z/></y>), ] }) = (@foo >>  /x/g ).@*; prop.(__iterator__); ((p={}, (p.z = 3.141592653589793)()) .@*:: \t(constructor =  /x/ ))) let(prop, __count__ = true) { export *;");
tryItOut("with({prop: ( '' .__lookupSetter__(\"constructor\") &= <x/>\n)})yield window .@ *;");
tryItOut("/*for..in*/for(let __proto__ = <><x><y/></x></\f> in 3/0) return  /x/g ;");
tryItOut("yield [1]\n");
tryItOut("if(prop) const prototype; else const __count__ = this\n");
tryItOut("/*for..in*/for(var constructor = constructor = <><x><y/></x></>() in this++) break ;");
tryItOut("/*for..in*/for([__count__, __noSuchMethod__] = false in ('fafafa'.replace(/ag, ({}).__lookupGetter__)) & prop = 3.141592653589793) {break ;const __iterator__, __count__ = <x><y/></x>; }");
tryItOut("if(false) { if ((this).call( /x/g  = __parent__, (__count__ = this), null)) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in null) { } } else throw <y><z/></y>;}\n/*for..in*/for(const [prop, __iterator__] = ((yield eval(\"<x/>\", [,,z1]))) in (0/0 >= true)) /*for..in*/for(var __iterator__ in ((*::*)(({}.throw(({})))))){5.0000000000000000000000; }");
tryItOut("L: const case null: default: eval\ngc()");
tryItOut("export *; const __count__");
tryItOut("const __count__ = [,,]; const constructor;");
tryItOut("let ([__iterator__, , constructor, , __count__] = __proto__.constructor) { (null)\n }");
tryItOut("__noSuchMethod__");
tryItOut("export *");
tryItOut("/*for..in*/for(var (__parent__) in new this(true, *::*)) 5.0000000000000000000000.watch(\"__proto__\", Function);");
tryItOut("let (({ constructor: [] })) { if(this.__defineGetter__(\"prototype\", <><x><y/></x></>)) gc() }");
tryItOut("do L: {const __proto__ = <x><y/></x>, __parent__ = 3/0; } while(() && 0);");
tryItOut("M:with({prototype:  /x/g .hasOwnProperty(\"prototype\")}){let constructor;var __iterator__, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("return <><x><y/></x></>;");
tryItOut("/*infloop*/for(var prop |  \"\" ['__count__'] =  /* Comment */undefined -=  '' ; ({__count__: ((<x><y/></x>).call(\n<><x><y/></x></>, (-1)))}); this.__defineGetter__(\"prototype\", function  prototype = <><x><y/></x></> (prop))) var ({ __count__: __parent__, prop: __proto__ }) = (x::__iterator__ = null);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in this) {const __count__ = <><x><y/></x></>, __parent__ = <x/>; }");
tryItOut("if((<x><y/></x> &&  '' )) {var __parent__, prototype;let prototype = prototype, __count__; } else ;");
tryItOut("/*infloop*/do {while((<y><z/></y>) && 0)try {  } catch(constructor) { gc() } finally { return <y><z/></y>; } M:if((undefined === <><x><y/></x></>)) continue ; else  if (let (prop) <x/>) {yield; } else function  constructor (__noSuchMethod__) { return  ''  }  } while(__count__.__iterator__, prop getter= (new function(q) { return q; }\f(<x><y/></x>, <x><y/></x>)).__defineSetter__);");
tryItOut("let (__iterator__, constructor) { 0/0 }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("(<y><z/></y>).__defineSetter__\n{}\n");
tryItOut("try { return; } finally { return <><x><y/></x></>; } ");
tryItOut("");
tryItOut("continue L;\ncontinue M;\n");
tryItOut("/*for..in*/L:for(let prop = this in 1e4) {export __parent__; }");
tryItOut("if(([1,2,3,4].slice)()) { if (<></>.__lookupSetter__(\"__noSuchMethod__\").*) /*infloop*/for([, __parent__, __noSuchMethod__, , ] = <x/>.@foo; <bbb xmlns:ccc=\"(new <><x><y/></x></>)[false]\"><ccc:eee></ccc:eee></bbb>; ((function  prototype \r(__count__) { return  \"\"  } )[__noSuchMethod__.prototype = <y><z/></y>\t])) //h\nL:with({__noSuchMethod__: (p={}, (p.z = <x/>.*)())}){prototype } else {return <y><z/></y>;yield [this]; }}");
tryItOut("if((this.__defineGetter__(\"__count__\", function(y) { yield y; yield;; yield y; }))) {export __parent__;gc() } else  if (<y><z/></y> ? window : <y><z/></y>) {throw ({}); }");
tryItOut("/*infloop*/while(__noSuchMethod__ = window){yield; }");
tryItOut("return  '' ;");
tryItOut("{const  = @foo, prototype;var __parent__ = [[1]], __iterator__ = <><x><y/></x></>; }\n/*for..in*/for(var __count__ = <><x><y/></x><\t/> in <x><y/></x>) {; }\n");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(@foo){}");
tryItOut("{L: {L: {/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in ({})) ; }const __count__; } }");
tryItOut("L:if(__parent__['prop'] = <><{prototype}> </{prototype}></>) { if (true.__lookupGetter__(\"__parent__\")) *::*;} else return *;");
tryItOut("yield;\nreturn <y><z/></y>;\n");
tryItOut("this.zzz.zzz;");
tryItOut("with(<x><y/></x>){export *; }");
tryItOut("for(let y in [5,6,7,8]) (this);");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("if((null[null].__defineSetter__(\"constructor\", gc)).hasOwnProperty(\"prototype\")) let ({ prototype: __count__, prototype: __noSuchMethod__ });");
tryItOut("try { for(let y in [5,6,7,8]) ; } catch(constructor) { throw StopIteration; } ");
tryItOut("const __proto__;");
tryItOut("yield (({ get __iterator__(__count__) { yield <x><y/></x> } , constructor: *::* }).propertyIsEnumerable(\"prototype\"));");
tryItOut("switch((null.yoyo(window)) , ((prototype) = -<x/>)) { default: export prototype;break;  }");
tryItOut("var constructor, break ;;");
tryItOut("switch(<xxx>{constructor}</xxx>) { default: switch(__proto__ = <x><y/></x>) { default: case 6: break; break;  }break;  }");
tryItOut("break M\n");
tryItOut("M:switch( '' .@foo -= {}) { default: /*infloop*/L:for( \"\" .watch(\"prototype = <y><z/></y>, __iterator__\", ( /x/g ).__defineSetter__);  /x/g ; constructor.(*::*)) {export *;function(q) { return q; } }break; case ({}).hasOwnProperty: L: {gc() }case 6: let __count__ = 0.1, __proto__ = *::*;break;  }");
tryItOut("/*infloop*/for(let constructor; ((<x><y/></x>)(*::*) = (this.__defineGetter__(\"prop\", ({}).__lookupGetter__))); __noSuchMethod__) continue L;with({}) { function(q) { return q; } } ");
tryItOut("\n");
tryItOut("/*for..in*/for(var [__parent__, __iterator__] = __iterator__ in  '' ) {<><x><y/></x></>; }");
tryItOut("L:if( /x/ ) const __count__; } else  if ((Date() for each (__proto__ in ([,])) for \feach (get in <><x><y/></x></>) if (<y><z/></y>))) {M:with({__parent__: let (__noSuchMethod__) @foo}) }");
tryItOut("if((eval(\"\", [<y><z/></y> if (null)]))) export __noSuchMethod__; else  if (yield  /x/ ) {break ; }");
tryItOut("/*for..in*/for(let x::__iterator__ in __parent__) const prop");
tryItOut("/*infloop*/for(const __proto__ = this.__defineSetter__(\"__count__\", (*).__defineSetter__); (new <><x><y/></x></>(false)); (undefined != this)[__proto__ ? <x><y/></x> : <x><y\f/></x>]) throw  '' ;export __proto__\n");
tryItOut("if((__noSuchMethod__.__count__ =  '' .hasOwnProperty(\"function::__count__\") for (constructor.prototype in *) for each (prototype in <x/>))) do /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in prop) ; while((__iterator__.__count__ getter= ({}).__lookupGetter__) && 0);throw (-0);");
tryItOut("if(new ((null for (prototype in <x><y/></x>)))(<y><z/></y>, <x><y/></x>)) {return 0x99;; }");
tryItOut("this.zzz.zzz;");
