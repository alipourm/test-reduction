tryItOut("<><{__noSuchMethod__}><bbb xmlns=\"(<bbb xmlns=\"(prop = __parent__)\">yyy</bbb>.((eval).call( /* Comment */window, (([1]).call(__iterator__, <><x><y/></x></>)))))[__noSuchMethod__ = window <<= new eval() >>> ((p={}, (p.z = new (#1=({prototype:  '' }))())()))]\">yyy</bbb><!--yy--></{__noSuchMethod__}></>");
tryItOut("{yield undefined; }");
tryItOut("/*infloop*/L:do const __parent__ = null, prop; while(__noSuchMethod__ = this.__defineSetter__(\"__iterator__\", Math.pow));");
tryItOut("{if(window) <x><y/></x>; else  if (<><x><y/></x></>) {gc() } }");
tryItOut("/*for..in*/M:for(let [prop, __noSuchMethod__] = (undefined ^  /x/g ) in <><x><y/></x></> >> <y><z/></y>) {if(undefined.yoyo([z1])) { } else export *; }");
tryItOut("/*infloop*/for(var throw StopIteration;; null; ) {prop, constructor; }");
tryItOut("if((this >>> <x><y/></x>)) var __noSuchMethod__; else {<><x><y/></x></>;return; }");
tryItOut("L:if(__iterator__ = <><x><y/></x></>) ({}).__lookupGetter__ else {yield;{gc()function(q) { return q; } } }");
tryItOut("M:if(('fafafa'.replace(/a/g, [1,2,3,4].slice))) {({}).hasOwnProperty<x/>; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {(<> get prop(constructor, __count__)('fafafa'.replace(/a/g, function(y) { yield y; window;; yield y; })) === (prototype |=  '' )</>);(#1#); } while(undefined);");
tryItOut("throw __proto__;");
tryItOut("if([15,16,17,18].some((\n<x><y/></x>).watch, [3 for (prop in true)])) { if ((__iterator__.__parent__ = <x><y/></x>)) {yield <x/>;let (__parent__ = <><x><y/></x>\t</>) { yield this; } } else {/*for..in*/for(var __iterator__ = let (__parent__ =  '' ) __iterator__ in null) {const __parent__ = *::*;export constructor; } }}");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(prototype: <x><y/></x>)) __parent__");
tryItOut(";");
tryItOut("do {continue ;export prototype; } while((__count__.@foo) && 0);");
tryItOut("const __parent__ = @foo, prototype = 4.");
tryItOut(";");
tryItOut("if(false) export *; else  if ( /x/ ) {throw  \"\" ;continue ; } else ;");
tryItOut("/*infloop*/while((#1#)[<x/>]){var prop = <x><y/></x>, __noSuchMethod__;return 1e4; }");
tryItOut("return");
tryItOut("let (({ __parent__: ({ __proto__: __parent__.__parent__, function(y) { yield y; return;; yield y; }: (\f{ ;: [, []] }) }) }) = (* / <><x><y/></x></>--)) { [__proto__, ({ x::__iterator__: ({ constructor: __proto__, __parent__: __iterator__.__count__ }), constructor: [, ({ __noSuchMethod__: prototype }), ] }),  { while(( /x/ ) && 0){export *;throw *::*; } } , ({ __proto__: ({ __proto__: ({ constructor: ({ prototype: __noSuchMethod__, __iterator__: prop }) }), __proto__: ({ __parent__: [, ] }) }), prototype: __iterator__ }), ({ __noSuchMethod__: [__proto__, ({ constructor: ({ __iterator__: __proto__, __noSuchMethod__: function::__noSuchMethod__ }), prototype: __count__ }), [], ({ prop: __proto__, __proto__: ({ __iterator__: __iterator__, __proto__: prototype }) })] })] }");
tryItOut("/*for..in*/for([prop, prop] = (new (<><x><y/></x></>).__defineSetter__()) in @foo) {(@foo); }\n");
tryItOut("if((3 if (window))) {throw  /x/g ;(@foo); }");
tryItOut("if(function(q) { return q; }( for each (prop in  /x/g .__lookupSetter__(\"prop\")) if (prop))) {{}const __count__ = true, __iterator__ = #1=[#1#]; }");
tryItOut("M:if(*.valueOf(\"number\").prototype = <x/>.@foo) {} else  if (* ? @foo : 0x99) {{} } else  '' ");
tryItOut("if(<><xxx>{__proto__}</xxx></>[[z1,,] ? (__iterator__.__count__) : (this.zzz.zzz)].prop) { if (this.__defineSetter__(\"__noSuchMethod__\", (-0.@*))) let constructor = <x><y/></x>;\ngc()\n else {yield <x><y/></x> / 0.1;export __proto__; }}");
tryItOut("return  /* Comment */__noSuchMethod__.__parent__;");
tryItOut("let constructor = prototype, __parent__ = [z1];");
tryItOut("try { gc() } catch(__proto__) { set } finally { <x><y/></x>; } ");
tryItOut("try { with({}) return; } finally { __noSuchMethod__ = __count__; } ");
tryItOut("let ([, ({ prototype: ({ __count__: constructor, __proto__: __iterator__ }), prototype: <><xxx>{__proto__}</xxx></> }), , , ] = this) { L:if((null[false])) {(({a1:1})); } else  if ((<x/>.eval(window))) {throw false; } else {break M; } }");
tryItOut("if(window) {window; } else  if (__parent__) gc()\nif(<x/>) { if (<x><y/></x>) let __noSuchMethod__ = 4.;} else {}\n");
tryItOut("__proto__ = __noSuchMethod__.prototype = *::*, constructor");
tryItOut("switch(eval(\"continue M;\", <><x><y/></x></>)) { case [null]: return window;break;  }");
tryItOut("L:if((#1=false)) {yield <y><z/></y> @ prototype; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("{function(y) { yield y; ;; yield y; } }");
tryItOut("prototype");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) //h\n{ if (((<x/>.throw(__iterator__)).__proto__)) {gc() } else yield;}");
tryItOut("/*infloop*/for((([[]])(this)); <x><y/></x> <<= window;  '' .__count__ = *) {break ;const prototype; }");
tryItOut("M:if(@foo >>> this.__defineGetter__(\"__parent__\", eval)) { if (new ((<x><y/></x>).watch)(prop)) {return;return *::*; }} else {;(new Function(\"continue ;\")) }");
tryItOut("export __iterator__;throw this");
tryItOut("yield (<><x><y/></x></> .. <y><z/></y>.unwatch(\"__count__\"));");
tryItOut("try { return <x/>; } catch(__count__) { ; } finally { const __iterator__ = 0; } ");
tryItOut("if(__proto__) 3.141592653589793;");
tryItOut("with({}) __proto__.__proto__ = prop;");
tryItOut("let(__noSuchMethod__ = new new (({}))()((__iterator__++), 3/0).__lookupGetter__(\"__noSuchMethod__\"), [] = <xxx>{__count__}</xxx>) { yield 'fafafa'.replace(/a/g, <x><y/></x>);");
tryItOut("if(@foo) {export *;break L; }");
tryItOut("let(constructor = false, __count__ = (-0)) { export __proto__;");
tryItOut("/*for..in*/for(let __iterator__ = (1e4++.valueOf(\"number\") for (prop in ({a1:1})) for each (prop in __count__ = <><x><y/></x></>) for each (__parent__ in 3.unwatch(\"__proto__\"))) in (new Function).apply) {var constructor = <x/>.valueOf(\"number\")++; }");
tryItOut("/*for..in*/for(__parent__ in new (this)(<><x><y\t/></x></>, __parent__)) ");
tryItOut("yield <bbb xmlns=\" get __noSuchMethod__ __proto__ (prop) { return  /x/g .__defineSetter__(\"__parent__\", function  prototype () { ({}).hasOwnProperty } ) } \">yyy</bbb>.(({ prototype: ({ prop: prototype }) }) = [11,12,13,14].filter);");
tryItOut("with(((this.zzz.zzz)[(0x99.eval(*::*))]))let constructor = this;");
tryItOut("if(*) break M; else  if (({a1:1})) let __parent__ = <y><z/></y>; else {break L;__count__ = __noSuchMethod__ }");
tryItOut("\ndo gc() while((eval(\"window\", <y><z/></y>)) && 0);\n");
tryItOut("/*for..in*/for(let prototype in ((Math.pow)(*::*.__defineSetter__(\"prototype\", <></>))))const __count__ = <><x><y/></x></>, prop = <x><y/></x>;");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; *; <><{__count__}>yyy</{__count__}></>) new Number(eval(\"L: \",  /x/g ), (eval(\"undefined\", constructor)) &= (/a/gi)([z1], *::*)).__noSuchMethod__");
tryItOut("/*for..in*/for([__proto__, __iterator__] =  in prop = prototype) {}");
tryItOut("if((<><x><y/></x></> |= <x><y/></x>) <<= !(p={}, (p.z = <x/>)())) { if (prototype.__parent__ = eval(\"yield undefined;\", this)) \n{;new Function }} else Math.pow");
tryItOut("with({}) yield  { return -3/0.__defineSetter__(\"__parent__\", [1,2,3,4].map) } ;");
tryItOut(" \"\" ");
tryItOut("M:switch((new (Math.pow)(this))) { default:  }");
tryItOut("L:if(((prop.prototype) += <x/>)) { if ([[({ __count__: prop })]]) {switch([#1=[#1#]].sort([1,2,3,4].slice)) { case 3: export __iterator__;if(<x><y/></x>.__defineSetter__(\"__count__\", [1,2,3,4].map)) yield; else (<><x><y/></\tx></>);break;  } }} else /*for..in*/for(let __noSuchMethod__ in (([1,2,3,4].map)(<><x><y/></x></>)))__count__;");
tryItOut(" for (prototype in (false.isPrototypeOf(this.zzz.zzz))) if (new ((<><x><y/></x>\f</>)[-0])().return <x><y/></x>;)");
tryItOut("L: {{let __count__, __parent__ = <><x><y/></x></>; } }");
tryItOut("var prop;");
tryItOut("if(__count__.prop & <x><y/></x>(false)) {export __parent__; } else  if (((eval(\"break M;\", prop)).@foo)) let prototype, __count__; else return *::*;");
tryItOut("yield;");
tryItOut("return");
tryItOut("if( '' ) { if ([[15,16,17,18].map(function (__proto__, __iterator__) { return __noSuchMethod__ } , true)].map(<x><y/></x>)) M:with({constructor: 033})break L;} else /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in <y><z/></y>) {}");
tryItOut("/*for..in*/M:for(const [prototype, __count__] = ( ''  % 3.141592653589793) in <><x><y/></x></>) {export get; }");
tryItOut("var __count__ = __noSuchMethod__, __parent__ = <x><y/></x>\n");
tryItOut("L:if(<><x><y/></x></>) var prop; else  if (<y><z/></y>) __iterator__;");
tryItOut("((p={}, (p.z = <x/>)()) /= __proto__ = __proto__).@foo ? (this.__defineSetter__(\"constructor\", ({}).hasOwnProperty)).hasOwnProperty(\"__iterator__\").hasOwnProperty(\"__iterator__\") for (__noSuchMethod__ in #1#) : (eval(\"\", __parent__))");
tryItOut("if(({[]: <bbb xmlns:ccc=\"[<y><z/></y>].map(function (constructor, __noSuchMethod__) { __proto__ = prop, prop = window; } )\"><ccc:eee></ccc:eee></bbb>})\t) { if (-0) {yield  /x/g .__defineGetter__(\"__proto__\", <x/>); } else {\f/*for..in*/for(let prop in ({a2:z2})) try { this.zzz.zzz; } catch(constructor) { ; } /*for..in*/for(var [prototype, function::__noSuchMethod__] = prototype = prototype in this) {var __proto__;(({}).__lookupGetter__).apply } }}");
tryItOut("throw __iterator__;");
tryItOut("( \"\" )\n");
tryItOut("const __parent__;\nyield;\n");
tryItOut("return\nthrow __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("function (__iterator__) { yield <x><y/></x> } \nyield <y><z/></y>;\n");
tryItOut("if('fafafa'.replace(/a/\fg, Math.sin) in (((false)(null)).*)) {throw <x><y/></x>;return;try { let __count__, __parent__; } catch(prop if (function(){break ;})()) { prop; }  } else  if (<><x><y/></x></>.constructor%=(1 for (x in []))) do {return;throw  \"\" ; } while((<y><z/></y>) && 0); else {continue L; }");
tryItOut("/*for..in*/M:for([__parent__, prop] = <x><y/></x> in <><x><y/></x></>) yield 1e-81;");
tryItOut("/*infloop*/L:do {var prototype = <><x><y/></x></>, __noSuchMethod__;throw [z1,,]; } while(__proto__ - true);");
tryItOut("var constructor = true, __count__;");
tryItOut("/*for..in*/for(prop in <><{prototype}>yyy</{prototype}></>) /*infloop*/while(__count__)3;");
tryItOut("");
tryItOut("with({}) const \n__iterator__, __noSuchMethod__; const __proto__;");
tryItOut("/*infloop*/for(const ({ constructor: ({ __iterator__: [, , ({ __parent__: __parent__ })] }), __iterator__: constructor }) = function  __parent__ () { /*for..in*/L:for(let prototype in ((*)(<x><y/></x>)))throw prototype: true; } (eval(\"gc()\", <><x><y/></x></> *=  '' ), [__iterator__].sort(function (this) { return undefined } )); eval(\"<x><y/></x>\", false).watch(\"constructor\", <><x><y/></x></>) ? new Date(__proto__, <x/>) : <xxx>{__parent__}</xxx>; function  __parent__ (__parent__, [, ({ constructor: prototype, __count__: __iterator__ }), __iterator__]) { return this.yoyo(<><x><y/></x></>) } ) {L:if( \"\" ) gc()export *; }");
tryItOut("/*infloop*/for(let __parent__;  \"\" ;  /* Comment */(let (__noSuchMethod__ = ({a1:1})) @foo)) {/*infloop*/for(const function::__iterator__ = undefined; 1e+81; null) {gc() }/*infloop*/for(__noSuchMethod__ = (-3/0 >  /x/ ); [15,16,17,18].map([1,2,3,4].slice, 0.1); constructor = -1) {yield; } }");
tryItOut("if(<xxx {prop}={<x><y/></x>} />.(this !== function ([y]) { })) {if(([15,16,17,18].sort(Function, ({ set __iterator__ __count__ (__parent__) })))) {throw undefined;gc() } else  if (<y><z/></y>.yoyo([,])) {export *;var __parent__; } else {return this;export *; } }");
tryItOut("if(*::* &= [[1]] ^= true === __proto__) {var __count__ = <x/>, __iterator__ = null;return prototype; } else {gc() }");
tryItOut("/*infloop*/for(<y><z/></y> && <x/>; eval(\"<><x><y/></x></>\", function ([y]) { }) if (__iterator__); <x><y/></x> >> window) while((<><x><y/></x></>) && 0)const __noSuchMethod__ = __count__;return <x/>;");
tryItOut("{yield;yield *; }");
tryItOut("M:with({__noSuchMethod__: null})yield <x><y/></x>;");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("L:if(__parent__.__count__) {{}__parent__ = -3/0, constructor = <x><y/></x>; } else  if (({constructor: @foo})) {with(<><x><y/></x></>){export constructor; } } else {}");
tryItOut("M:if(((__proto__ = <x/>).prototype)) {evalgetter = <x>\f<y/></x>; } else  if (((<x><y/></x>).call(this, ))()) {export *; }");
tryItOut("if(((constructor)[0/0])(__noSuchMethod__ = <><x><y/></x></>, this)) {{}return; } else  if (((window)(<x><y/>\n</x>, [,,]))) {var prop = <y><z/></y>, __proto__; } else {yield;( \"\" ); }");
tryItOut("if(new (new Function)()) {export *; } else  if ( '' ) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in <x><y/></x\n>) (({}));\t } else /a/gi");
tryItOut("/*for..in*/for(const __count__ in true) {var prototype; }");
tryItOut("/*infloop*/L:for(let [({ prop: ({ prop: ({ __noSuchMethod__: __noSuchMethod__ }), __noSuchMethod__: [, , \f, ] }), constructor: 5.0000000000000000000000.prototype\t }), __iterator__, ({ __proto__: ({ __proto__: ({ constructor: prototype }) }) }), [__noSuchMethod__], ({ prototype: ({ __iterator__: ({ prototype: __parent__ }) }) })] = this.__defineGetter__(\"__iterator__\", (Function).apply); (<x><y/></x>.__lookupGetter__(\"prop\")); <x/> in #1#.*) {/*infloop*/L:while( /x/ ){yield <><x><y/></x></>; }<x><y/></x> }with((-0)){let __proto__, __proto__; }");
tryItOut("/*for..in*/for(const function::__iterator__ = @foo in (new *(undefined.@foo).*)) {\f([,]); }");
tryItOut("if(({__parent__: prop.__proto__ =  /x/g  * , prop setter: (1 for (x in [])) })) {export __count__;export *::*; } else {<x><y/></x>yyy }");
tryItOut("return *::*;");
tryItOut("throw null;L:if(( /* Comment */<x><y/></x>)) {undefined;return; } else  if (<x/> - {}) {yield 0x99;gc() } else {x::__count__, prop = false; }");
tryItOut("/*infloop*/do {prop } while(\n( /x/g  ^ <x><y/></x>));");
tryItOut("do  while((<y><z/></y>) && 0);");
tryItOut("with({__proto__: (((-0))(window))()}){function(y) { yield y; ;\t; yield y; }__proto__; }");
tryItOut("/*infloop*/L:for(const __parent__; ([((new Iterator()))]); new (function(q) { return q; })()) yield;");
tryItOut("/*for..in*/M:for(var constructor.__proto__ in ((function () { yield; } )(({ get __noSuchMethod__(function::__count__)__iterator__ = undefined })))){(window);gc() }");
tryItOut("if(*::*) { if (true) {yield;yield window; } else yield  /x/g ;}");
tryItOut("/*for..in*/for(__iterator__ = <x><y/></x> > prototype in ) /*for..in*/L:for(var __parent__ = yield <x><y/></x> in  /x/ ) *::*.watch(\"prototype\", function(y) { yield y; (<><x><y/></x></>);; yield y; }),  \"\" ");
tryItOut("__iterator__ = [1,,], __iterator__;");
tryItOut("continue ");
tryItOut("L:while((<x/>) && 0){export *; }");
tryItOut("if((<><x><y/></x></>)(<x/>)) L:if((prototype = <x><y/></x>)) <x><y/></x> else  if (({}).__lookupGetter__) {throw <y><z/></y>; } else throw [,,z1];");
tryItOut("(@foo);");
tryItOut("M:if(__count__) {(<x><y/></x>); } else {try { return; } catch(__proto__) {  } export *; }");
tryItOut("/*for..in*/M:for(let __count__ in __noSuchMethod__ =  /x/ --) L: var prototype = __parent__, constructor;");
tryItOut("\fif((this)(window).@foo) (*); else  if ((yield (<><x><y/></x></> for each (prop in <><x><y/></x></>)))) export *;");
tryItOut("{yield;\nyield __parent__;\n }\n/*for..in*/for(const [prop, prop] = #3={a:#3#} in @foo) {break L; }\n");
tryItOut("{yield; }");
tryItOut("with({__count__: [<x><y/></x>.(this) for each (__count__ in null)]}){/*infloop*/M:for(__parent__ = <x><y/></x>; -- \"\" ;  /x/ ) yield;/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in function () { return true } ) {<xxx>{prop}</xxx> } }");
tryItOut("if(eval(\"__proto__ = __count__;\", <x/> *= this)) { if ( '' ) {while((<><xxx {__proto__}={<y><z/></y>} /></>) && 0)let __proto__ = 0; } else __proto__[constructor]\t;}");
tryItOut("/*for..in*/for(let constructor = ((__count__ = this.__defineGetter__(\"__parent__\", #1=[#1#])) for (__iterator__ in  /x/ )export *;) in #3={a:#3#}) var __count__ = <y><z/></y>;");
tryItOut("/*for..in*/L:for(var __parent__ = __iterator__ =   in (-0)) ");
tryItOut("/*infloop*/L:do  while((prototype|=null).valueOf(\"number\"));");
tryItOut("/*infloop*/while(([z1,,].eval(window))++)L: while((<><x><y/></x></>) && 0)var prop, constructor = prop;");
tryItOut("do /*for..in*/for(__iterator__ = *::* in -3/0) {{} } while((*::*) && 0);");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("with({}) prototype = constructor;");
tryItOut("/*infloop*/do {; } while( /x/g );");
tryItOut("/*infloop*/M:do {const \fthrow 1e+81;;break M; } while((this.__defineGetter__(\"__proto__\", Function)));");
tryItOut("if((~(eval(\"gc()\", __proto__)))) { if (eval(\"<x><y/></x>.propertyIsEnumerable(/*\\n*/\\\"__noSuchMethod__\\\")\", +1e81.watch(\"__iterator__\", 1.2e3))) {(#1#); }} else {M:do {L: {yield  '' ;return this;\t } } while((<x><y/></x> ::  '' ) && 0); }");
tryItOut("this.zzz.zzz;");
tryItOut("do {{}return; } while((<{__parent__}> </{__parent__}>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [z1] in  /x/g ) {yield *::*;L:with({__parent__: ((<y><z/></y>).apply)()}){__parent__ = <x><y/></x>; } }");
tryItOut("export *\nfunction (__parent__) { yield; }  const __noSuchMethod__;");
tryItOut("do throw window; while((([11,12,13,14].filter)) && 0);");
tryItOut("yield;");
tryItOut("/*for..in*/for(const [__iterator__, __iterator__] = (0/0 in -0) in <><x><y/></x></>.constructor = [z1,,]) const __parent__ = null;");
tryItOut("if(<x><y/></x>.(<y><z/></y>) .@x:: 'fafafa'.replace(/a/g, function  prototype (__proto__, __parent__) { return [,] } )) throw <y><z/></y>; else  if (({ __count__: __noSuchMethod__, __proto__: function::__iterator__ }) = ({ __iterator__: __count__, __iterator__: constructor })) const __iterator__ = 033, let; else {<x><y/></x>;return true; }");
tryItOut("L: {;const __noSuchMethod__; }");
tryItOut("L:if(#1#) {let constructor, __count__ = <x><y/></x>; } else {break ; }");
tryItOut("if(__parent__ = window) { if (undefined.throw(this)) {var prototype = ({}), __parent__;var __count__ = __count__, prototype; } else {let prop, constructor = true;; }}");
tryItOut("L:if(prototype.__iterator__ setter= function(y) { yield y; export *;; yield y; }.@foo) {/*infloop*/for(const __proto__; window--; undefined for (__parent__ in __proto__)) let __iterator__, prop = [1];export prop; } else  if (([] = gc)) with((<x><y/></x>.__lookupSetter__(\"__parent__\"))){break ;throw prototype; } else {export constructor;M:if( \"\" ) {export function  __proto__ ()prototype; } else  if ( /x/g ) break ; else export *; }");
tryItOut("/*infloop*/while( '' .__iterator__){yield;(false); }");
tryItOut("/*for..in*/for(const __iterator__ in __iterator__.__iterator__ = prop = *::*) <y><z/></y>;");
tryItOut("/*infloop*/L:do switch([z1,,].valueOf(\"number\")) { case 5: break; default: case 2: case 7: /*infloop*/L:for(var ({ __iterator__: ({ __count__: __noSuchMethod__ }), __noSuchMethod__: ({ prop: [] }) }) = #1=[#1#].__defineSetter__(\"__iterator__\", Math.sin).yoyo(<x><y/></x> >>>=false)\f; let (__noSuchMethod__ = __noSuchMethod__, __iterator__) (__noSuchMethod__(window)).isPrototypeOf((prototype|=*::*)); prototype = let (prototype = function ([y]) { }) <><x><y/></x></>) {var __count__, prototype = *::*;; }{} } while(/*\n*/new gc(constructor .@ 1e-81, (constructor = ({a2:z2}))).@*);");
tryItOut("switch(prototype.valueOf(\"number\")) { default:  }");
tryItOut("with({__count__: typeof this})continue L;");
tryItOut("throw __proto__;");
tryItOut(" { return ({a2:z2}).hasOwnProperty(\"__proto__\") } ");
tryItOut("with({__noSuchMethod__: ((__proto__ = function ([y]) { } + __count__).watch(\"__iterator__( /x/g )\", function(y) { yield y; __proto__; yield y; }))}){return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const prototype in window) {export *; }");
tryItOut("yield (eval(\"return window;\", <y><z/></y>)).yoyo(RangeError());");
tryItOut("prop;prop");
tryItOut("if(this.zzz.zzz) yield @foo; else  if ([true]\f.map(Function)) {yield;; }");
tryItOut("let([, ({ __noSuchMethod__: ({ constructor: __iterator__ }), __count__: ({ __parent__: __proto__, __count__: constructor }) }), ]) { throw __iterator__;");
tryItOut("yield __iterator__;");
tryItOut("L:if((prototype = #\t2=[#1#])) {return; } else return *::*;");
tryItOut("do {var __noSuchMethod__ = -1, __noSuchMethod__;/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in (yield 1e4)) /*infloop*/L:for(var constructor; *::*; ) G } while(([return this if (*::*)].@*) && 0);");
tryItOut("with(false){this.zzz.zzz;export * }");
tryItOut("M:with({prototype: new <y><z/></y>( /x/ , <x><y/></x>)}){const prop = [[1]];window; }");
tryItOut("/*infloop*/for(__count__ = (\n<y><z/></y>); ((__count__.__noSuchMethod__ = *).watch).call(let prototype, ); <><{__count__}><!--yy--></{__count__}></>) {;function  prototype (__proto__, constructor) { yield * }  }");
tryItOut("with({__count__: #2=({__proto__:  /x/g })}){export *;\nlet __proto__ = <x/>, get = this;\n }");
tryItOut("{/*infloop*/do break L; while(let (prototype, prop) this);return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ({ prototype: constructor }) in (delete (/*\n*/new (((({}).hasOwnProperty).call).call)( ) - 1.3.hasOwnProperty(\"__proto__\").prototype))) {/*infloop*/for(const __proto__ = ( /* Comment */<><x><y/></x></>); new (<><x><y/></x></>)(__parent__, __parent__); \n<><x><y/></x></>) __proto__ = window, function::__iterator__; }");
tryItOut("let (__iterator__, __noSuchMethod__ = *::*) { continue L; }");
tryItOut("(prototype = undefined) {  }  ");
tryItOut("{L: {var constructor, __parent__;break ; } }");
tryItOut("let (__noSuchMethod__ = <x><y/></x>.isPrototypeOf(this), ({ __noSuchMethod__: __proto__ })) { M:if(({ __proto__: prop }) = __count__ = __proto__) do {yield; } while(( '' ) && 0); }");
tryItOut("let ((({a2:z2}))(<><x><y/></x></>)) { try { {} } finally { <y><z/></y>; }  }");
tryItOut("switch((prop >>> <y><z/></y>) >> <><zzz><y><z/></y></zzz></>) { case 9: /*infloop*/for(-1; <x><y/></x>; <x><y/></x>) return;case new \t(__parent__ = __parent__)((uneval(<x><y/></x>))): break; default: return false;break;  }");
tryItOut("with({function:: if (\n(function  __parent__ ()__parent__).call(<x/>,  '' )): (((eval).call)()).propertyIsEnumerable(\"__noSuchMethod__\")})if((<><x><y/></x></>.throw(<><x><y/></x></>))) { if (<y><z/></y>) throw -1;} else (__count__);");
tryItOut("for(let y in [5,6,7,8]) yield <y><z/></y>;");
tryItOut("/*infloop*/M:for(prop; ; return) ({});");
tryItOut("with({__parent__: new <x><y/></x>()}){{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__(( /x/  >>= [].throw(<><x><y/></x></>))) in ([[]])) /*infloop*/for(let prototype = @foo ? <x><y/></x> : false; [__iterator__ if (window)]; (__count__ = <>__parent__</>)) {const prop; }\nlet prototype;");
tryItOut("M:with({prop: prop = (3/0 .. 1.2e3)}){; }");
tryItOut("if(<y><z/></y>) {export __count__;return 033; }");
tryItOut("while((((function::__parent__-= /x/g ).watch(\"__proto__\", function(id) { return id }))) && 0)/*for..in*/L:for(let __parent__ = new eval() in [false]\n) if(((<x><y/></x> for (constructor in 033)))) { if (('fafafa'.replace(/a/g, function(y) { yield y; export *;; yield y; }))) <x><y/></x>; else {/*for..in*/M:for(yield; in ((/a/gi)(3/0)))break ; }}");
tryItOut("break M;");
tryItOut("M:do {throw undefined;throw *; } while((@foo.__noSuchMethod__) && 0);");
tryItOut("{L: {<y><z/></y>([]); } }");
tryItOut("/*infloop*/L:do {let (__noSuchMethod__ = __proto__ =  /x/ , [prototype, , __noSuchMethod__]) { throw new Boolean(); } } while(new #1=[#1#](<><x><y/></x></>));");
tryItOut("/*infloop*/L:for(new (this).watch(__parent__, <x><y/></x>); [11,12,13,14].sort; *::*) {with({}) false }");
tryItOut("__iterator__\n \"\" ");
tryItOut("for(let y in [5,6,7,8]) {let (__iterator__ = true) { (<><x><y/></x></>); } }");
tryItOut("do {let __iterator__, constructor; } while((prototype.constructor = ({__parent__ getter: prototype == null }).__defineSetter__(\"__count__\", [1,2,3,4].slice)) && 0);");
tryItOut("function ([y]) { };");
tryItOut("if(<x><y/></x> <= 1e4.__defineSetter__(\"prop\", new Function)) let prototype\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in __iterator__) {switch(3) { default: {}case 8: throw false;break;  } }");
tryItOut("while(((@foo())) && 0){export constructor;(<x><y/></x>); }");
tryItOut("if([__count__]) /*infloop*/for(var ({ __noSuchMethod__: ({ constructor: ({ __proto__: prototype, __noSuchMethod__: constructor }) }) }) = (__iterator__ = -0.__defineSetter__(\"constructor\", <x><y/></x>)); function ([y]) { } @ [[]]; @foo.unwatch(\"prototype\")) return; else  if ((<x><y/></x>.isPrototypeOf(<x><y/></x>)--)) __proto__ else {/*infloop*/M:for((new ++<><x><y/></x></>((({ set __noSuchMethod__ __iterator__ (constructor)@foo, prop: __noSuchMethod__ })))); (__proto__.prop)[\n(__proto__ = @foo)]; (yield [[1]])) {const prop; }__iterator__, constructor; }");
tryItOut("([[1]])");
tryItOut("{{}\nthrow __proto__;\nif(<x/>) ; else  if (constructor) constructor, __parent__ = <x/>; else {{}return; } }");
tryItOut("/*for..in*/for((new Array(1.2e3))( ''  >>= (function ([y]) { })()) in ((/a/gi)((__proto__.__iterator__ = undefined).hasOwnProperty(\"constructor\"))))\f{export *;<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb> }");
