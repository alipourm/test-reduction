tryItOut("break M;");
tryItOut("/*infloop*/while(((<x><y/></x> ^= [1].__lookupSetter__(\"prop\") ? undefined : null))(i.__count__ = <x><y/></x>,  /* Comment */<y><z/></y>))L:with({__parent__: new Boolean(1e+81, <><x><y/></x></\r>)})/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in prototype) {yield;gc() }");
tryItOut("/*for..in*/for(const prop in ((new function(y) { yield y; ; yield y; }(({__parent__: <x><y/></x>}), false))(<y><z/></y>))){L: {var __count__ =  '' ;var prototype = __count__; } }");
tryItOut("with({__iterator__: prop}){}let prop, __count__ = function ([y]) { }\n");
tryItOut("/*infloop*/for((prop = (new Object(@foo, <x/>)())).hasOwnProperty(\"constructor\") for each (__count__ in ((function (__proto__, __proto__) { yield __proto__ } ).call).call(\n<y><z/></y>, ([*::*]))) if ((eval(\"constructor\", <y><z/></y>))); (({constructor: (constructor) })); undefined.x::prop) {if((({a1:1}))[prototype].eval(('fafafa'.replace(/a/g, [1,2,3,4].slice)))) { if ((__noSuchMethod__ = <x><y/></x>)) throw -0; else break M;}L: ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <x/>) export *;");
tryItOut("{<><x><\fy/><///h\nx></>; }");
tryItOut("do #1=[#1#]; while((<><x><y/></x></>) && 0); const __count__;");
tryItOut("do var prop while((window) && 0);");
tryItOut("if(window) {; } else {export *;/*for..in*/for(let [prop, __noSuchMethod__] = ([11,12,13,14].some) in [,,z1]) {<!--yy-->;throw <><x><y/></x></>; } }");
tryItOut("let(prototype, prop = (false.__lookupSetter__(\"__parent__\"))) { let(__proto__ =  .(*::* >= <x><y/></x>)) { {}");
tryItOut("L: yield;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (p={}, (p.z = null)()) in <><x><y/></x></>) {<><x> yield *; <y></x></>; }");
tryItOut("with({prototype:  /x/g }){yield; }");
tryItOut("let ([, ({ prototype: ({ constructor: [\f({ __count__: prop }), __noSuchMethod__((-1)), ], constructor: prop }), prototype: __proto__ })] = ((__iterator__ =  /x/g ).hasOwnProperty(\"__count__\"))) { /*infloop*/while( /x/ ){return; } }");
tryItOut("L: {yield; }");
tryItOut("if(([11,12,13,14].sort)()) { if ((new (({}).__lookupGetter__)()))  \"\" ; else {return <><x><y/></x></>;gc() }}");
tryItOut("yield;");
tryItOut("if([yield window] ^ __count__ = (({ get __count__() { return false }  }))) var __iterator__; else {}");
tryItOut("do {let __noSuchMethod__ = __proto__;return <><x><y/></x></>; } while((((function(q) { return q; }).call(__iterator__, 1.2e3))) && 0);");
tryItOut("/*infloop*/for(var __proto__; <x><y/></x>; <x><y/\f></x>.propertyIsEnumerable(\"constructor\")) {__parent__ = *::*, __parent__; }");
tryItOut("/*infloop*/for(window; (__iterator__.__iterator__ getter=  '' ); <>null</>.eval(__proto__.__iterator__)) {<x><y/></x>;gc()let __parent__ = __noSuchMethod__; }");
tryItOut("M:while((this <= *) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <y><z/></y>) [1,2,3,4].map");
tryItOut(";\nyield <y><z/></y>;\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((1 for (x in [])))(())))gc()");
tryItOut("/*for..in*/for(const [constructor, constructor] = __parent__.constructor = 1e-81 in false) {yield;continue ; }");
tryItOut("while((<x/>) && 0){export __count__; }");
tryItOut("const constructor, prototype;\nyield  '' ;\n");
tryItOut("M:if(1e-81.hasOwnProperty(\"({ __parent__: __iterator__, prototype: ({ __proto__: __proto__, __count__: constructor }) })\")) {;/*infloop*/for(var prop =  '' ; 1e-81; <y><z/></y>) {this; } } else {if((this.__defineSetter__(\"constructor\",  { yield @foo } ))) { if ( typeof .__proto__) } else {throw @foo;let __iterator__, __noSuchMethod__; } }");
tryItOut("yield __parent__;");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("switch(new ((prototype, x::prototype = <><x><y/></x></>))()) { default: switch(yyy .@ prop.constructor = (new ())) { default:  }break; /*infloop*/while(eval(\"undefined\", <><x><y/></x></>)){(0x99);throw <y><z/></y>; }case [1]: return  /x/ ;break; case __noSuchMethod__: case 4: var function::__iterator__;break; break; {} }");
tryItOut("__iterator__\n");
tryItOut("/*infloop*/while(([[1]]); = false)break L\n");
tryItOut("if(new (true)(null, 1.2e3)) {return function ([y]) { };(__iterator__); }");
tryItOut("{const __parent__; }");
tryItOut("throw  /x/g ;");
tryItOut("{break ;yield prototype; }");
tryItOut("break ;");
tryItOut("yield;\ntrue;\n");
tryItOut("export *;");
tryItOut("(3.141592653589793)(<x><y/></x>)");
tryItOut("with(( ''  >> *))");
tryItOut("let (__count__ = ((prototype = ([1,2,3,4].slice.prop)))(-1)) { /*infloop*/for(({__proto__: [<y><z/></y>].map(/a/gi), __noSuchMethod__ getter: Math.sin }); (window.throw(1e81))((p={}, (p.z =  /x/ )()),  \"\" ); (<x><y/></x> ? __proto__ : [[]])) {break M; } }");
tryItOut("while((new Number(<y><z/></y>)) && 0)");
tryItOut("/*infloop*/for(constructor; (__count__ ? #1=[#1#]\n : __noSuchMethod__ = -0); (__iterator__.((function::__parent__ = [constructor, prototype, , prop])))) \tif(({})(-1)) {throw *;yield <><x><y/></x></>; } else {(this); }\t");
tryItOut("1e+81;");
tryItOut("/*infloop*/for(var eval(\"yield;\", 0x99); #0=({__count__: @foo}); new (function  __iterator__ (__iterator__) { return <><x><y/></x></> } )(<x><y/></x>)) export prototype;");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor(*) in new Array(<y><z/></y> === false, <><x><y/></x></>)) {if([1,,]) {export *;return; } else {export __proto__;var __iterator__ =  \"\" ; }yield this; }");
tryItOut("{with({__noSuchMethod__: *::*}){;return <x><y/></x>; } }");
tryItOut("if(<xxx>{__noSuchMethod__}</xxx>) { if (3/0) (1 for (x in []))} else {let constructor, constructor;export *; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((((/a/gi).apply).call)(window.__lookupSetter__(\"__count__\").__count__-=true)))var __iterator__ = window;");
tryItOut("if(function::prototype = prototype) { if (<y><z/></y> | <y><z/></y>) gc() else {export prop; }}");
tryItOut("while((eval(\"this\", <><x><y/></x></>) >> (1 for (x in []))([1])) && 0){{{} }return; }");
tryItOut("L:if((let (__proto__ = -0) ((this.zzz.zzz) ^ this.unwatch(\"prototype\") for (prototype in 0.1))).propertyIsEnumerable(\"__count__\")) { if (~1.3) case 6: } else {L\r:switch( '' ) { case 0: yield;break; gccase 0: break;  }if(033) { if (<x><y/></x>)  \"\" ; else ;} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in true)  const __proto__;");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("/*for..in*/for(constructor.__iterator__ in ((eval)((5.0000000000000000000000.__lookupGetter__(\"__parent__\")))))/*for..in*/for(__iterator__ in 1e+81.propertyIsEnumerable(\"getter\")) {L: {yield; } }");
tryItOut("if(<><x><y/></x></>.isPrototypeOf((#3={a:#3#}(window)))) { if (__noSuchMethod__.constructor = undefined) {;prototype = <><x><y/></x></>, __noSuchMethod__ = [,,]; }} else {return; } const ({ __parent__: ({ prototype: [] }) });");
tryItOut("/*infloop*/M:while( \"\" ){break ;{} } const constructor;");
tryItOut("/*for..in*/for(prop = (<x><y/\f></x>)() in ( /x/g  == [,] ? prop = __proto__ : <x><y/></x>.yoyo(<x><y/></x>))) if('fafafa'.replace(/a/g, Math.pow)) {[1,,];gc() }");
tryItOut("L:if(__parent__) { if (@foo) {Math.powreturn #1=[#1#]; }} else {return; }");
tryItOut("L: const __iterator__ =  /x/g ;");
tryItOut("/*infloop*/M:do {export __iterator__;\nif((yield *)) { if ((__count__.valueOf(\"number\"))) {} else const prototype = #1=[#1#], __parent__;} } while(arguments);");
tryItOut("/*infloop*/for((uneval(arguments)).@foo; (((prototype = __proto__.__lookupSetter__(\"prop\"))[typeof function(id) { return id } >  /x/g ]) <<  \"\"  - ); <>eval(\"throw  '' ;\", var prop = <><x><y/></x></>;+=<><x><y/></x></>)</\f>) M:if(new (new Math.sin(false, <x/>))()) {export *; } else  if (__iterator__ /= (prototype.eval( /x/ ))) /*for..in*/for(const __iterator__ in window) { }");
tryItOut("if((__proto__)( /x/ ) .@ +<><x><y/></x></> < <><y><z/></y></> .. <x><y/></x>) { if (this.zzz.zzz) [z1,,] else {/*for..in*/L:for(var prop = @foo in window) var prototype; }\f}");
tryItOut("export __count__");
tryItOut("{return;if(*::*) { if (<x><y/></x>) return this;} else {let prop;const __parent__; } }");
tryItOut("if(<y><z/></y>) {continue M;throw *::*; }");
tryItOut("({a1:1})\n__count__;/*infloop*/for(export *; ; ({__count__: (prop+=<x><y/></x>),  set __count__(__count__) { break M; const __iterator__; }  })) {gc() }");
tryItOut("switch(0.1) { case *:  }\nconstructor;\n");
tryItOut("if(1e-81) { if (3.141592653589793) {export *;return true; } else return *;}");
tryItOut("yield __noSuchMethod__;");
tryItOut("/*for..in*/for(var __iterator__ in \r((({}).hasOwnProperty)((new (Math.pow)(<x><y/></x>.hasOwnProperty(\"__iterator__\")).__lookupGetter__(\"prototype\")))))__parent__;");
tryItOut("/*infloop*/for(const __noSuchMethod__ = <><x><y/></x></>; 3/0; __noSuchMethod__) false;");
tryItOut("export __noSuchMethod__; const __count__;");
tryItOut("__iterator__, __proto__ = @foo;");
tryItOut("{var __proto__ = <x><y/></x>, constructor = function ([y]) { }; }");
tryItOut("if(prototype.throw(<x><y/></x>)) gc()");
tryItOut("if(this.zzz.zzz) M:if((function (prop, __noSuchMethod__) { yield @foo } () = __count__ = <x><y/></x> if (constructor))) {if( @ <x/>) {var __proto__;{} } else  if (<x><y/></x> ?  : <y><z/></y>) {yield ({a1:1}); } else (__iterator__); }");
tryItOut("with({}) return true;");
tryItOut("__iterator__ = __proto__;");
tryItOut("if(true.@*) { if ( ''  |= arguments) {<x><y/></x>;/*for..in*/L:for(const __parent__ = [z1] in undefined) __count__ = <><x><y/></x></>, __noSuchMethod__ =  /x/g ; } else throw <><x><y/></x></>;}");
tryItOut("/*infloop*/do {;export *; } while(@foo);");
tryItOut("with([,,])throw this;");
tryItOut("var __parent__ = this, __count__ = <x/>;\f");
tryItOut("let (__parent__ = <x/>) { let prototype = @foo, __noSuchMethod__ = __iterator__ }");
tryItOut("gc() const prototype");
tryItOut("/*infloop*/for(prop = eval(\"with({__noSuchMethod__: 0}){prop = <x/>; }\", __iterator__ = this); new (window)(); ([((p={}, (p.z = <><x><y/></x></>)())) if (#3={a:#3#})])) {prop;(<y><z/></y>); }");
tryItOut("with({__proto__: ({ set prop constructor (constructor) { export *; } , __noSuchMethod__ setter: (new Function(\"let __parent__;\")) }).unwatch(\"__parent__\")})if(-1) { if (__noSuchMethod__) ; else {(<x/>);let constructor = window, __parent__; }}");
tryItOut("throw StopIteration;");
tryItOut("if(delete ({constructor getter: (this).watch/*\n*/ }).* *= (__parent__ = <y><z/></y> in (-0))) { if ((5.0000000000000000000000.unwatch(\"constructor\")).__parent__ = (__proto__ = *::*) *= <x><y/></x>.@foo >> (new 1e+81(((p={}, (p.z = <><x><y/></x></>)())), <y><z/></y>))) {switch(window === <x><y/></x>) { default: let prototype, __proto__;break;  }throw this; } else if(false) { if (window) {(window);var yield; = 1e-81, prop; } else window;}}");
tryItOut("if(this(<xxx>{prop}</xxx>, ('fafafa'.replace(/a/g, (1 for (x in [])))))) {export *;var prop = *::*, __noSuchMethod__; } else {const prop; }");
tryItOut("export *;");
tryItOut("/*for..in*/for([__count__, prop] = ({__parent__: (__iterator__.__iterator__ = __proto__ = window)}) in [z1,,].valueOf(\"number\")) {return; }");
tryItOut("/*infloop*/while(<x><y/></x>){throw <x/>; }\nswitch(+0x99) { case ([15,16,17,18].sort('haha'.split, *)): /*infloop*/while(#1=[#1#]){Function }break; break;  }\n");
tryItOut("/*for..in*/for([prototype, __iterator__ = <x><y/></x>] = (constructor getter:  ''  |= <><x><y/></x></>) in window) (<></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__ in (<x><y/></x>.(prototype))) (-3/0)");
tryItOut("if(-- /* Comment */__parent__.propertyIsEnumerable(\"__proto__\")) for(let y in []); else  if (((prop.(0.1) for (__count__ in (<x/>.__count__ =  \"\" ))))) {M:with(__parent__ = <y><z/></y>){export *; { yield; }  }__noSuchMethod__ = __noSuchMethod__; } else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__ in (({}).__lookupGetter__)()) {yield;/*for..in*/L:for(let __noSuchMethod__ in <><x><y/></x></>) {export *; } }");
tryItOut("M:\fwith(new String())continue ; const __iterator__;");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("/*for..in*/L:for(const __count__ = prototype = window in window) {yield; }");
tryItOut("__noSuchMethod__ = [z1,,];let \f__iterator__, __iterator__;");
tryItOut("if(__noSuchMethod__) /*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in @foo) { } else  if ((true &= *::*)) return;");
tryItOut("/*infloop*/while((var constructor)){{}\nexport __parent__; }");
tryItOut("case 6: case (!'fafafa'.replace(/a/g, (new Function(\"export __noSuchMethod__;\")))): /*for..in*/for(prototype in function(id) { return id }) throw *::*;break; /*infloop*/while(prop = [1,,]){break ;gc() }break; default: break; case ((<><x><y/></x></>).watch)(): break; case __iterator__: break; break; case 9: {}break; ");
tryItOut("{/*for..in*/for(__noSuchMethod__ = window in  /x/ ) return; }");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("M:if(this.__defineSetter__(\"prop\", window)) { if ((undefined.valueOf(\"number\")).watch(\"__count__\", (function  __count__ (prop, constructor) { yield <><x><y/></x></> } ).apply)) export *; else }");
tryItOut("let (prop = [,]) { return; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(*::*; (-1); false) {yield;(true); }");
tryItOut("throw *::*;");
tryItOut("__iterator__ = constructor = (function ([y]) { })() != *::*, prop");
tryItOut("throw __noSuchMethod__;");
tryItOut("{}");
tryItOut("/*infloop*/L:while((#0=({prototype: __proto__})))\n;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x/>.get in __count__.__parent__) let constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in ('fafafa'.replace(/a/g, function  constructor () { yield this } ))) {if(*) {let __parent__, __proto__ =  \"\" ;return  '' ; } else  if (let prototype = <y><z/></y>, __parent__) {;export __parent__; } else {yield __noSuchMethod__ = 1.3, prototype = __noSuchMethod__;; }while((\t\n[[]] for (prototype try { return 1e-81; } catch(__iterator__) {  }  () in window)__noSuchMethod__) && 0) }");
tryItOut("L:with(this.__defineSetter__(\"__iterator__\", function(q) { return q; })){if(this) yield 1e-81; else  if (__count__) <x><y/></x> else {{}continue ; }\nexport __noSuchMethod__;\n }\n");
tryItOut("while((__parent__ = __noSuchMethod__) && 0){var prototype, prototype = <x/>;yield <x><y/></x>; }");
tryItOut("\fif((eval(\"(<x><y/></x>);\", this.zzz.zzz))) { if ([1,2,3,4].slice) yield; else {}}");
tryItOut("with( \"\" )/*for..in*/for(const true['__count__'] in (((1 for (x in [])))(function(y) { yield y; return true;; yield y; }( \"\" , null))))yield this;");
tryItOut("if(({prototype getter: 'haha'.split, each: @foo })) { if ((prop = this)) {return; } else ;}");
tryItOut("switch(eval(\"<x><y/></x>\", 1e4)) { case 9: (false); }");
tryItOut("switch(__iterator__.constructor = (prototype | <x/>)) { case 1: throw prototype;break; default: #1#\nexport *\nbreak;  }");
tryItOut("for(let y in []);");
tryItOut("with(undefined)yield <><x><y/></x></>;");
tryItOut("if((this)(window)) { if (#1=({constructor: __proto__})) {export __iterator__;return prototype; }} else {throw <x><y/></x>;return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let __count__ in *.hasOwnProperty(\"__noSuchMethod__\")) {gc()/*infloop*/L:for(constructor; true; (<x><y/></x>.( for each (__iterator__ in  '' )))) {__parent__, constructor; } }");
tryItOut("if(*::*.valueOf(\"number\"))  else {M:with({yield: this})export *; }");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/do {let __parent__;\nfunction (constructor)null\n } while( '' .throw(*.propertyIsEnumerable(\"prop\") ? <><x><y/></x></> < <x/> : ())(window));");
tryItOut("switch([({ __noSuchMethod__: ({ prop: [, __count__, , __parent__], prototype: ({ __count__: __iterator__ }) }) })] = __parent__.hasOwnProperty(\"__noSuchMethod__\")) { default: {}var prop = 0.1;case (prototype.*.unwatch(\"__noSuchMethod__\").prototype): if(new (__parent__)(window)) Math.powbreak; with({prototype:  '' }){throw <x><y/></x>; }break; case 1: break;  }");
tryItOut("M:if((__iterator__).__defineSetter__(\"__parent__\", <x><y/></x>)) yield \fconstructor = (<><x><y/></x></>//h\n ? * : <x/>);yield #0=null;");
tryItOut("let(({ constructor: __noSuchMethod__, __parent__: ({ __parent__: prop, __iterator__: prototype }) }), prototype = (function::prop /= undefined)) ((function(){for(let y in []);})());");
tryItOut("if(undefined) { if (<x><y/></x>) {yield;var __count__, prototype; } else export *;}");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { if ((prop = (yield *))) gc()} else {(prop); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (([<x><y/></x>.__lookupSetter__(\"prototype\")].filter(({}).__lookupGetter__) != (p={}, (p.z = <><x><y/></x></> for (__count__ in [[]]).*)()))(new Function))){(1 for (x in []))/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in null) {throw <x/>;throw *::*; } }");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __noSuchMethod__] = () in (<><x><y/></x></>.unwatch(\"__parent__\"))) let __noSuchMethod__ = 1e-81, prototype = <x><y/></x>;");
tryItOut("L:switch(1.2e3) { case 6: break;  }");
tryItOut("do let __count__ = const __parent__, __parent__ = this;, __proto__ =  \"\" ; const __iterator__; while((window.valueOf(\"number\")) && 0);");
tryItOut("/*infloop*/for(function::__parent__ = H; window; 0) {}");
tryItOut("break M;");
tryItOut("with( /* Comment */(0/0[__noSuchMethod__]))/*for..in*/M:for(var prop = <x><y/></x> ?  \"\"  : <x/>.__defineGetter__(\"constructor\", Math.pow) in [1]) {{__noSuchMethod__ }if(null) ({}).__lookupGetter__ else  if ([1]) {*;\fexport *; } }");
tryItOut("switch(yield (__noSuchMethod__)) { default: break; case prop: case false.isPrototypeOf( '' ):  }");
tryItOut("while(((eval(\"/*for..in*/L:for(let prop = 3.141592653589793 in  '' ) ({})\", ((yield  \"\" ))))) && 0){prop, prop;yield; }");
tryItOut("/*infloop*/while(function(id) { return id }constructor = window)/*for..in*/for(var [__noSuchMethod__, __iterator__] = true in <><x><y/></x></>) {}");
tryItOut("with({prop: 0x99 .@x:: <y><z/></y>}){(<><x><y/></x></>);throw __noSuchMethod__; }");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("M:if(([__iterator__].sort([1,2,3,4].map)).__lookupGetter__(\"__noSuchMethod__\")) {yield;yield [z1]; } else {/*for..in*/for(var prop in *) {gc() } const prototype; }");
tryItOut("if(*::*) { if (0x99) continue L; else (var __count__ =  /x/ ;);}");
tryItOut("if(( /x/ )[3.141592653589793] >= constructor.__count__ setter= /a/gi) ([]);continue ; else var __proto__, __proto__ = null\n");
tryItOut("if( /* Comment */__count__ = #1=[#1#])  else  if ([] = (4. ? this : ({a1:1}))) {<y><z/></y>; }");
tryItOut("if((Function(0.1, [z1,,]))) { if ( /* Comment */new ( /x/g  >>= <><x><y/></x></>)([,,z1]\n, *::*)) { }} else {<x/>;try { return; } finally { export *; }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ prop: ({ prototype: constructor }), constructor: ({ constructor: ({ __iterator__: [, , __iterator__], [prototype]: __iterator__ }) }) }) in <\tx><y/></x>.(true)) {}\n");
tryItOut("return new (([1,2,3,4].map).apply)();");
tryItOut("while((<x><y/></x>.constructor , (yield \n++false.__lookupGetter__(\"__noSuchMethod__\")(prototype|=*::*.hasOwnProperty(\"prototype\"), __parent__.prop = <x><y/></x>))) && 0){yield <><x><y/></x></>;/*for..in*/for(var \f__count__ = this.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__) in false) {switch(<><x><y/></x></> - [[]]) { case 3: throw prototype; } } }");
tryItOut("switch(__count__ = prop) { case (throw <x/> << constructor): return prop = <y><z/></y>;break; break; default: case 5: break ;break;  }");
tryItOut("{}");
tryItOut("var __iterator__ = __noSuchMethod__, constructor = true;");
tryItOut("let (__proto__ = this) { if((function ([y]) { })()) {yield 1.3;window; } else {return null; } }");
tryItOut("/*for..in*/for([constructor, __count__] = window in undefined) ;");
tryItOut("let(x::__count__ = , __count__) ((function(){(__parent__.prop).__noSuchMethod__ = __noSuchMethod__;})());");
tryItOut("M:with({constructor: <y><z/></y>}){}");
tryItOut("{while((null) && 0){return; } }");
tryItOut("L:if(__iterator__ = <y><z/></y>) { if ((+(yield <><x><y/></x></>))) {{}throw false; } else {{} }}");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*for..in*/L:for(let [__proto__, __proto__] = <><bbb xmlns:ccc=\"\t( '' .prototype).eval(constructor = #1#)\"><ccc:eee></ccc:eee></bbb></> in <y><z/></y>.__defineSetter__(\"__proto__\", eval)) return 3;");
tryItOut("export *;");
tryItOut("do {export __parent__;return; } while((<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", (@foo).__defineSetter__)) && 0);");
tryItOut("if((({__noSuchMethod__: #1# if (*::*), __noSuchMethod__: (constructor%=<x><y/></x>).__lookupGetter__(\"__count__\") }))) { if ( { yield ({__count__: ({__count__: new (((__iterator__).isPrototypeOf(({prop:  '' }))))( /* Comment */((-1).valueOf(\"number\")), (-0) || [z1]), __parent__ setter: gc })}) } ) let (__count__) { (.2); }} else {Function;throw __proto__; }");
tryItOut("L:if((({ __proto__ = null: __iterator__ }) = (*::* , this)).__lookupSetter__(\"constructor\")) {const prototype = [];var __proto__, constructor = 0x99; } else  if (( /* Comment */__noSuchMethod__.propertyIsEnumerable(\"constructor\"))) default: break; gc()__count__break; break; ");
tryItOut("{thisreturn; }");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = #1=\n.2 in [[,] for (( /x/g )(*::*) in 3.141592653589793) for (constructor in undefined)]) {yield; }");
tryItOut("for(let y in [5,6,7,8]) __proto__ = prop;");
tryItOut("{function(y) { yield y; ; yield y; } }");
tryItOut("yield <y><z/></y>;\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__.__noSuchMethod__ in __count__) {}\n");
tryItOut("return");
tryItOut("L: {/*infloop*/do {with({__iterator__: ((uneval(1.3)))})if( '' ) yield; else  if (__noSuchMethod__) ; else (<x><y/></x>); } while(let ([setter, , ] = (p={}, (p.z = true)()), __proto__ = *) __iterator__.(<x><y/></x>)); }");
tryItOut("if(new Object(window in <x/>, #1=[ { return <y><z/></y> } --])) break L;");
tryItOut("while((<y><z/></y>) && 0){{yield;break ; }yield <x/>; }");
tryItOut("/*infloop*/for(({ __noSuchMethod__: prop }) = [[]]; undefined.yoyo(<y><z/></y>); (new window( \"\" ))) return;");
tryItOut("/*infloop*/L:for(*; false; <><x><y/></x></>) {yield; }");
tryItOut("/*infloop*/M:for(let [({ __noSuchMethod__: [], __proto__: ({ __noSuchMethod__: constructor }) }), __count__] = (true.__lookupGetter__(\"__count__\") -= __iterator__ = 1e4); let (__iterator__ = (new (new this\f())())) (__proto__.__lookupSetter__(\"__iterator__\")) >> 033.watch(\"prototype\", Function); (__count__ =  /x/g )(([15,16,17,18].some((1 for (x in [])), .2).__lookupSetter__(\"__parent__\")))) ");
tryItOut("L:while((yield ((yield  { return; } ))) && 0)var __count__ = <x><y/></x>, __proto__ = <y><z/></y>\n");
tryItOut("/*for..in*/for(let [prop, prop] = (new *()) ? *::*.__lookupSetter__(\"constructor\") : __count__ = function::__proto__ in [1e+81].some(this)) yield @foo;");
tryItOut("L:if() if(<y><z/></y>\n) { if ((\n<x><y/></x>) >>> <><x><y/></x></>) {{yield false; }L:if(*) <ccc:ddd><!--yy--></ccc:ddd> else  if (*) {return <x/>;; } }} else {yield <x><y/></x>; }");
tryItOut("L: M:if((({ set prop() { return (function ([y]) { })() } , constructor: this }))) {}");
tryItOut("/*infloop*/M:do {if(constructor = -1) {yield;continue ; } else  if (({prop setter: Math.sin })) {return window; }if(<x><y/></x>.__defineGetter__(\"constructor\", (new Function(\"return <><x><y/></x></>;\"))).__defineSetter__(\"__parent__\", ({}).__lookupGetter__)) { if (<{__noSuchMethod__}><ccc:ddd></ccc:ddd></{__noSuchMethod__}>.(<x><y/></x>.( '' ))) {throw constructor;yield; } else prop = 3;}{{<x><y/></x>gc() } }\n } while(((new Function(\"throw 3;\")))(this.__defineGetter__(\"__proto__\", Math.sin), (__noSuchMethod__ = <x/> :: ([__count__ = #1=[#1#]].sort((Math.pow).call)))));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in [11,12,13,14].filter) /*infloop*/for(__count__; null.__lookupSetter__(\"prop\"); typeof yield window) break M;");
tryItOut("with({prop: (Math.pow())}){{}if(prop) {continue ; } else  if (1e81) 'haha'.split else {throw  \"\" ; } }");
tryItOut("/*infloop*/while(((uneval(<><x><y/></x></>))))export prop;");
tryItOut("{const prop = undefined;(new Function(\"break ;\")) }");
tryItOut("continue \n");
tryItOut("with({prototype: (__proto__ = [[({ __proto__: [], prototype: prototype })], __iterator__])})/*for..in*/for(const prop in <x><y/></x>.*) {/*for..in*/for(__noSuchMethod__ = 1e4 >>> <x><y/></x> in this) {'haha'.split } }");
