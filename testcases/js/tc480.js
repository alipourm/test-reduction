tryItOut("with({prop: (__parent__+=#1#.watch(\"__iterator__\", (<x><y/></x>).call))})yield;");
tryItOut("return; const setter;");
tryItOut("L: L:if(__parent__) { if (<><x><y/></x></>) {yield __count__; }} else {throw <><x><y/></x></>; }");
tryItOut("if((<><x><y/></x></>.hasOwnProperty(\"__proto__\")) @ (* / <x><y/></x>)) {yield;const prop; } else var __iterator__ = __noSuchMethod__\n");
tryItOut("{}");
tryItOut("{var constructor = <><x><y/></x></>; }");
tryItOut("let (__count__, __parent__ = *) { yield constructor; }\n");
tryItOut("/*for..in*/for(var (this)(<x><y/></x> ? ({a1:1}) : *::*) in  '' ) {break L; }");
tryItOut(" '' ;;");
tryItOut("M:with(\f{prototype: <x><y/></x>.valueOf(\"number\")})throw __proto__\n");
tryItOut("switch(#1#) { default: break; case  '' : M:with(__noSuchMethod__)export *;break; case -1 >= [15,16,17,18].filter(function(q) { return q; }, __parent__): while((return @foo) && 0){return;continue L;\t }break;  }");
tryItOut("/*for..in*/for(<!--yy--> in [ /x/g ].some((new Function(\"yield;\"))).propertyIsEnumerable(\"prop\")) {return *::*;let (constructor = (function ([y]) { })(), prototype = <x/>) { yield; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(eval(\"\", prop, constructor) > Object(this))['prototype'] in 3/0) {{/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in __count__) ; } }");
tryItOut("/*for..in*/M:for(let __parent__.__proto__ in (__iterator__ = 1e4)) {yield;return; }");
tryItOut("/*infloop*/while(__parent__){/*for..in*/for(let [__iterator__, __proto__] = [1,,].valueOf(\"number\") in 5.0000000000000000000000) {} }");
tryItOut("for(let y in []);");
tryItOut("{}\nyield <y><z/></y>;\n");
tryItOut("/*infloop*/while((new (({prototype setter: Math.sin }))((__proto__.((new (<x/>)(__count__)))))))const __parent__ = 1.2e3, __count__ = *;");
tryItOut("while((break ) && 0)if((0/0 in <><x><y/></x></>.propertyIsEnumerable(\"__proto__\"))) {break L; } else  if ([this for each (__proto__ in <y><z/></y>)] -= constructor) {gc()__count__, __noSuchMethod__, prototype = <><x><y/></x></>; }");
tryItOut("export prop;");
tryItOut("/*infloop*/do {var __parent__ = window; } while(<> </>);");
tryItOut("throw @foo;");
tryItOut("(function(id) { return id });");
tryItOut("var __iterator__ =  '' ;");
tryItOut("switch(try { yield <><x><y/></x></>; } finally { const constructor = window/*\n*/; } ) { case 'fafafa'.replace(/a/g, function(q) { return q; }): yield *;<x/>break;  }");
tryItOut("do {throw <><x><y/></x></>;return ({constructor: __proto__}); } while((this.zzz.zzz) && 0);");
tryItOut("L:if([15,16,17,18].some(__noSuchMethod__, each =  '' )) throw __proto__; const prop;");
tryItOut("prop = prototype;");
tryItOut("/*infloop*/while(({__noSuchMethod__: ({__proto__: <x><y/></x> <<= this})})){/*infloop*/for(\rlet __parent__ = undefined;  '' ; __noSuchMethod__) return; } const __iterator__;");
tryItOut("/*infloop*/for(\t(eval).call(window, ) &= <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; __noSuchMethod__ = new Function(\f); ((((<x><y/></x> | *::*) - (<><x><y/></x></> /= false) &= -- /x/g )).watch)()) var __parent__ = [,], __iterator__, __count__;");
tryItOut("\ncontinue ;\n");
tryItOut("export *;");
tryItOut("M:if(__noSuchMethod__) {false;return <><x><y/></x></>; }\nL: {yield undefined;let prototype = (-1), __iterator__; }");
tryItOut("__count__ = function::__iterator__;");
tryItOut("/*infloop*/M:for((null)([,]) = ('fafafa'.replace(/a/g, function  __noSuchMethod__ ()0.1)); <><x><y/></x></> <<= @foo.@foo; *::*) do { } while(((((function (__noSuchMethod__, constructor) { return this } ))++)) && 0);");
tryItOut("{__proto__, __parent__; }");
tryItOut("if((--prototype)) { if (prop.__iterator__ getter= __noSuchMethod__) prop} else {{}gc() }");
tryItOut("\nif(<x><y/></x>) { if ([,]) export *; else {<><x><y/></x></>; }}\n");
tryItOut("if(*::*) {let prototype = -1;<x/>; } else function::__noSuchMethod__, __noSuchMethod__;");
tryItOut("__iterator__ = constructor;");
tryItOut("yield;");
tryItOut("/*infloop*/while(( const  .. 0.1))M:while((prototype.(1.2e3)) && 0){M:if(__count__ = 0.1) {M:with(<x><y/></x>)return; } else  if (!(\n1e4)\f) {(<y><z/></y>); } else break L; }");
tryItOut("if(true) { if ( /x/ ) gc()} else yield this;");
tryItOut("/*infloop*/while(([undefined for (__parent__ in <y><z/></y>)]))let __count__;");
tryItOut("__parent__;");
tryItOut("{} const constructor;");
tryItOut("{}");
tryItOut("let(__proto__ = __iterator__, constructor = <><x><y/></x></>) { ({}).__lookupGetter__");
tryItOut("/*infloop*/L:do ; while(window)\n");
tryItOut("/*for..in*/for(let [setter, prototype] = undefined in <><x><y/></\tx></>) *;");
tryItOut("/*infloop*/for((({}[window]).__lookupSetter__(\"constructor\")) && delete new __noSuchMethod__() ? delete <x/> : (new /a/gi(3.141592653589793)); __count__; <y><z/></y>) {switch(<><x><y/></x></>) { case 8: var constructor, __noSuchMethod__;case 1: var .2, ({}).__lookupGetter__; }if(<x/>) { /x/ ;let __noSuchMethod__, prop; } else  if (<x/>) export *; else (<y><z/></y>).__defineSetter__ }");
tryItOut("/*infloop*/for((__noSuchMethod__.(this)); prototype.((yield ((({}).__lookupGetter__).call(<x><y/></x>, )))) === ( /x/ .watch(\"__noSuchMethod__\", null)); true >>= __proto__\f.unwatch(\"prop\")) break ;\nlet __proto__ = @foo\nyield;\n");
tryItOut("while(((-1).__lookupGetter__(\"prototype\")) && 0){throw 4.;return; }");
tryItOut("M:while((((function  prop (__noSuchMethod__, __parent__)default: var constructor = <x><y/></x>, prop = <x><y/></x>;break; case 9: break; yield;break; case this.zzz.zzz: /*infloop*/M:for([11,12,13,14].sort; !__count__; undefined ? [1,,] : 3/0) {export __proto__;yield; }).call(window, <x/>))) && 0){throw {};yield; }");
tryItOut("/*for..in*/M:for(__iterator__ in (((!__iterator__, prop =  '' ))(3.141592653589793 / (__proto__ = this))))var __count__ = <y><z/></y>, __parent__ = [z1,,];");
tryItOut("if((Exception((typeof undefined), ({a1:1})))) { if ((this)(0.1) = ({ prototype: __noSuchMethod__ }) = [prototype, prototype, , , ]) break L; else {/*for..in*/for(const __iterator__ in <x/>) {__noSuchMethod__;(this); } }}");
tryItOut("/*infloop*/for(('fafafa'.replace(/a/g, [1,2,3,4].slice)); [] = (\n@foo.propertyIsEnumerable(\"__parent__\") -= (yield <><x><y/></x></>) -= Number(#1=[*::*], <y><z/></y>)); (__parent__ = __parent__.__parent__)) { \"\" ; }");
tryItOut("while(((new Function).call( '' ,  /x/ ) -= ({ 1e-81: __parent__ }) = [[1]].__lookupGetter__(\"prop\")) && 0);");
tryItOut("if(__iterator__ = Object()) {export __proto__; } else {return  /x/ ; }");
tryItOut("if(((/a/gi)./*\n*/call(\nwindow, (__proto__.prototype getter= function (__proto__, __proto__) { yield  ''  } )))) {/a/gi } else  if ([11,12,13,14].some /= let (__parent__ = -3/0, prop)  /x/g ) {let let, prop = #1#;export __noSuchMethod__; } else /*infloop*/M:for(let constructor =  \"\" ; <x/>; false) {; }");
tryItOut("if(yield -1 ||  \"\" ) {if(@foo) const __count__ = window, constructor = <x><y/></x>; else  if (this) {throw <><x><y/></x></>;@foo; } } else  if (( /* Comment */([(uneval((-0)))].sort([1,2,3,4].slice)))) {if(<x><y/></x>) {__noSuchMethod__ } else  if (<y><z/></y>) {constructor;__noSuchMethod__, __parent__ = window; } else ;; } else {(<x><y/></x>); }\n");
tryItOut("export __iterator__;if(undefined) { if (__parent__) {export *; } else gc()}");
tryItOut("let (prototype = (__noSuchMethod__ <<= *::*), __iterator__ = *::*) { let (__parent__ = prototype = __proto__, __iterator__ = ()) { (<><x><y/></x></>); } }");
tryItOut("/*for..in*/for(prop = __iterator__.__defineSetter__(\"prop\", /a/gi) in <x><y/></x>) export __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in #1=({prototype: <><x><y/></x></>})) {export *\n }");
tryItOut("if(false) export constructor; else {var function::__parent__ = window, prop = 1.3;gc() }");
tryItOut("\f{}");
tryItOut("if(__count__) { if (<x><y/></x>) Math.sin} else ((( /x/g )).call).apply");
tryItOut("/*infloop*/while((new [1,2,3,4].slice())){prop;const __count__; }");
tryItOut("export __count__;");
tryItOut("let (prototype = new (*::*.@*)([11,12,13,14].map, null), ({ prop: ({ __proto__: [] }) }) = false) { while(((__proto__)) && 0)<x><y/></x> }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"{}\"))).prop in (let (prop, prop = 1.3) <><x><y/></x></>)) {if( /x/g ) {let __parent__ = @foo, prototype; }/*infloop*/for(null.yoyo(<x><y/></x>); this; (__count__ = (each = @foo))) if(window) { if (new ([1,2,3,4].slice)(__parent__,  '' )) yield;} else {return __count__;* } }");
tryItOut("return;");
tryItOut("*::*.throw(0/0);");
tryItOut("if(constructor) gc() else  if ((this / false)) {gc() }");
tryItOut(" , __count__ = <><x><y/></x></>\nvar __count__\nlet (__iterator__ = {}) { __noSuchMethod__ }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\nlet __count__ in *) {M:if( /x/g ) {__proto__, prototype =  /x/g ; } }");
tryItOut("L:if(<><x><y/></x></>.* * __count__) { if (__parent__ = function(id) { return id }) {/*infloop*/while(<x><y/></x>)(undefined).watchyield ({a2:z2}); }} else {const __proto__, prop;{} }");
tryItOut("throw constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in __proto__.prop setter= [1,2,3,4].map) {{var __proto__ = 4.;yield; } }");
tryItOut("/*infloop*/do ; while((p={}, (p.z =  /x/g )()));");
tryItOut("/*for..in*/L:for(const prop = <x><y/></x> in <><x><y/></x></>)  /x/g ;{export *; }");
tryItOut("var __count__ = null\ngc()");
tryItOut("let (<y><z/></y>, prop) { export prototype }");
tryItOut("const \t__proto__ = #1#, __parent__ = @foo; const prototype;");
tryItOut("/*for..in*/for(let function ([y]) { } in ((([(prop = <><x\t><y/></x></> >> __count__)].sort(__parent__ >> true)) & <!--//h\nyy-->)(#3={a:#3#})))gc()\n");
tryItOut("{return; }");
tryItOut("yield function(id) { return id };\n\f;\n");
tryItOut("L: {if(window.eval(__count__)) /*for..in*/for(const [__proto__, constructor] = * in ) {} else {return; }throw prototype; }");
tryItOut("/*for..in*/for(let __iterator__ = () in <><x><y/></x>\f</>) {export prop;const prop; }");
tryItOut("let(__iterator__ = this, __noSuchMethod__ = @foo *= <y><z/></y>) { throw __count__;");
tryItOut("export *;");
tryItOut("with({constructor: (function(id) { return id }.__defineSetter__(\"prototype\", function  constructor () { yield; } ) / this.zzz.zzz)})while((<><x><y/></x></>) && 0){return null; }");
tryItOut("export __count__;");
tryItOut("/*infloop*/for(var ({ __iterator__: __iterator__ }) = __noSuchMethod__.constructor; (yield <x/>); constructor = __proto__) {if( '' ) {( '' ); } else gc() }");
tryItOut("/*for..in*/M:for(let constructor in ((__iterator__ = let (__iterator__, constructor = #1=[#1#]) 1e+81)(//h\n__proto__.*.throw(3.141592653589793 ? <x/> : .2).constructor = __parent__ = <x><y/></x>)))");
tryItOut("with( /* Comment */(new function(y) { yield y; export *;; yield y; }( \"\" )))export prop;");
tryItOut("with({__proto__: @foo})*::*;");
tryItOut("if(__noSuchMethod__.eval([z1])) { if ((( ''  if ((-0))))) var __parent__ = getter;} else var prop = *::*, prototype;");
tryItOut("throw StopIteration;");
tryItOut("with(({ __iterator__: __proto__ }) = (__parent__.__noSuchMethod__).__defineSetter__(\"__iterator__\", 'haha'.split))let (constructor, __parent__) {  }");
tryItOut("let(__count__ = 0/0.watch(\"prototype\", 1.2e3)) { try { return *::*; } catch(constructor if (function(){for(let y in [5,6,7,8]) ;})()) { __noSuchMethod__ = __proto__; } catch(constructor if (function(){throw StopIteration;})()) { this.zzz.zzz; } ");
tryItOut("if(( /* Comment */__noSuchMethod__)) { if (prototype.(*::*)) export __noSuchMethod__; else {yield; }}");
tryItOut("if((({\tconstructor: undefined\f }))) {constructor = <y><z/></y>;export *; }");
tryItOut("if(constructor = <><x><y/></x></>.__defineGetter__(\"yield\", gc)) /*for..in*/L:for(const (<y><z/></y>['prop']) in <><x><y/></x></>) ([<x/> for each (__iterator__ in ({}))].valueOf(\"number\")), ((yield true))");
tryItOut("L:if(__proto__) gc() else  if (<x><y/></x>) (<y><z/></y>);");
tryItOut("L:if((__noSuchMethod__ = __proto__.constructor setter= (undefined).call[(<x><y/></x>++)])) { if (({a1:1})) /*\n*/{with({__noSuchMethod__: null})export *; }} else {yield window;continue ; }");
tryItOut("if( /x/g ) Function else  if (constructor) {return; } else {return  /x/ ; }");
tryItOut("if(new RangeError(<x/>, *)) {return __proto__;<y><z/></y>; } else export *; const __proto__;");
tryItOut("window\n");
tryItOut("const constructor = arguments, prop; const prop;");
tryItOut("{ }");
tryItOut("/*infloop*/while(({ get __count__(prop, __proto__) { return constructor }  }) !== (this for each (prop in true))){if(this.__defineGetter__(\"__proto__\", undefined)) {var prototype, __iterator__ =  /x/ ;export *; } else  if (([true].some(function(y) { yield y; yield *;; yield y; }))) {export *; }export *; }");
tryItOut("this.zzz.zzz;");
tryItOut("delete, constructor = [];");
tryItOut("M:if(<x/>) break M; else  if (<><x><y/></x></>) ");
tryItOut("{export *;L:if(\tx::__proto__ getter: (new Function(\"1e4;\")) += [__count__ = *::*]) L:with(({}).__lookupGetter__(({a1:1}), [,,])){yield __proto__;{} } else  if ((__parent__.__parent__ setter= ((1 for (x in []))).apply)(x::prototype.__proto__)) {const __noSuchMethod__;export *; } }");
tryItOut("/*infloop*/M:while(__count__)\fyield;");
tryItOut("while(((__noSuchMethod__ = <><x><y/></\fx></>)) && 0){__iterator__, __iterator__; }");
tryItOut("return;");
tryItOut("if(1e+81) { if (-0) {;export eval; }} else return;");
tryItOut("/*infloop*/M:while(<{constructor}>yyy</{constructor}>)<x><y/></x>;");
tryItOut("yield;");
tryItOut("let (__iterator__ = 1e4) { const __proto__, prop = prototype; } const __iterator__;");
tryItOut("/*infloop*/for(let __iterator__; (eval(\"return <y><z/></y>;\", null)); ({__proto__: , __parent__: (uneval(__parent__)) })) {with(<><x><y/></x></>)if(new <y><z/></y>()) \t{<y><z/></y>/*for..in*/for(const __iterator__ in ((gc)([])))yield; } else return; }");
tryItOut("M:with((__noSuchMethod__.@*\n))yield;");
tryItOut("/*for..in*/for(prototype in ((({}).__lookupGetter__)(__noSuchMethod__.__count__ getter= __parent__ .@x:: ((this).__defineSetter__).call( '' , ).prototype)))M:if(-3/0) constructor; else  if (__parent__) __proto__;");
tryItOut("/*infloop*/for(let ((new Function(\"(1 for (x in []))\"))(0x99)) = this; ({}).__lookupGetter__\n; window = 5.0000000000000000000000) \n");
tryItOut("if(<><x><y/></x></> -= window) { if \r(__parent__.__count__ getter= function(y) { yield y; break M;; yield y; }) {return  \"\" ; }} else {continue ;gc() }");
tryItOut("L: {{}try { yield  /x/ ; } catch(prop if  '' ) { export *; } catch(prototype if <><x><y/></x></>) { Math.sin } catch(__noSuchMethod__ if (function(){throw  '' ;})()) { yield; } catch(prop) { yield <><x><y/></x></>; }  } const __count__;");
tryItOut("{} const x::__noSuchMethod__;");
tryItOut("if(Object()) {{} } else  if (<x/>) {with(<><x><y/></x></>){__iterator__; } }");
tryItOut("__iterator__, prototype = false;");
tryItOut("if(<y><z/></y> .@*:: 1e-81) yield (yield [15,16,17,18].map(({}).hasOwnProperty, __iterator__)); else  if (((function(id) { return id }))[( '' //h\n.yoyo(this))]) {let (__proto__, __count__) { if(*::*) { if (__proto__) {;(<y><z/></y>); } else export *;} }L:if(<x/> {prototype =  /x/ ; }) { if (prototype) { { yield [z1] }  }} else yield null; } else {with({{switch([15,16,17,18].map(4., this || [,,z1])) { case 6: return;break;  } }: (#3={a:#3#}.watch(\"__noSuchMethod__\", [[]]))})/*for..in*/for(var prototype =  \"\"  in  /x/g ) {(prototype <x/> prototype, prop); } }");
tryItOut("with({constructor: (*)[033]}){export *; }");
tryItOut("if(__parent__ = [1,2,3,4].map()) export delete; else  if (([(this.zzz.zzz)((constructor = __parent__)) = eval(\"( /* Comment */(false\\n))(new <><x><y/></x></>\\f, <><x><y/></x></>.propertyIsEnumerable(\\\"__count__\\\"))\", /*for..in*/for(var __count__ = <x><y/></x> in *) {export *; }) if (__iterator__.__parent__ = V)])) {/*for..in*//* nogeckoex bug 349964 */\tL: for  each(let __noSuchMethod__ in function ([y]) { })  /x/g ;if(function  __iterator__ (__proto__) { ; } ([z1,,]).unwatch(\"prop\")) /*infloop*/for(undefined; __iterator__; null) {<><x><y/>\t</x></>;throw <x><y/></x>; } else  if (<x><y/></x>.(__parent__)) {return [,];return -1; } else gc() }");
tryItOut("/*infloop*/for(var __count__; <y><z/></y>; __iterator__.prop = @foo &= [<zzz>({__parent__ getter: true, 033: [[1]] })</zzz>].sort([1,2,3,4].map)) ");
tryItOut("\f__parent__ = __count__;");
tryItOut("/*infloop*/for(var __count__; prop; false) ;");
tryItOut("if([null] >= constructor) M:if( /x/ ) {yield;return ({a2:z2}); } else  if (1e-81) {(-1); } else {var __count__ = <x/>, __iterator__ = 1e+81; } else {([z1,,]); }");
tryItOut("do gc() while((__parent__.@*) && 0);");
tryItOut("'do {let (__iterator__ = (<><x><y/></x></>.throw(*))) { {} }/*for..in*/for(let __iterator__ in ((function(q) { return q; })(this >> *))){function  __parent__ (prototype, __parent__)<x><y/></x> } } while(((#1=[#1#] .@*:: function ([y]) { })) && 0);");
tryItOut("/*for..in*/for(const __count__ in ((throw function ([y]) { };function  __noSuchMethod__ () { continue ; } )( \"\" )))var __count__ = function(id) { return id }, __proto__;");
tryItOut("{{}var __proto__ = 1e-81, __proto__ = <x><y/></x>\n\f }");
tryItOut("__proto__ = window, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in (prop = prop = [1,,])) __proto__, __iterator__;");
tryItOut("/*for..in*/L:for(var __parent__ = ({prop: <><x><y/></x></>})[__count__.constructor = *::*.valueOf(\"number\")] in (<><x><y/></x></>)(function(id) { return id })) {([1,,]);yield\n/*infloop*/for(const __proto__; <x><y/></x>; __noSuchMethod__) {} }");
tryItOut("M:switch(('fafafa'.replace(/a/g, function () { (); } )).valueOf(\"number\")) { default: L:with({__parent__: ! '' })(@foo);break; case 2: if((__iterator__ = ({a1:1}) , null).yoyo(true)) { if (__proto__ =  /x/g ) {(*).__defineSetter__ }} else /*for..in*//* nogeckoex bug 349964 */M: for  each(const yield -3/0.({ prototype: constructor, prop: __parent__ }) in window) while((<y><z/></y>) && 0){export __iterator__; }break;  }");
tryItOut("L:with((~<x><y/></x>)){return null;continue ; }");
tryItOut("prop");
tryItOut("try { yield  /x/ ; } catch(__iterator__ if  \"\" ) { export <x><y/></x>; } catch(__proto__\r if (function(){return;})()) { throw __count__; } catch(__parent__ if window) { export prop; } catch(__parent__) {  for (__iterator__ in arguments) } finally { (__noSuchMethod__); } ");
tryItOut("while(((([1,2,3,4].map).call)(<><x><y/></x></>)) && 0)if((prototype-=constructor.__defineGetter__(\"function::constructor\", function  __parent__ (constructor, constructor)({a1:1})))) {{}return; }");
tryItOut("<x><y/></x>.__proto__ = __noSuchMethod__;");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: __noSuchMethod__ }) = [11,12,13,14].some; constructor = null; [<><x><y/></x></>].filter(function(q) { return q; })) {__noSuchMethod__ = <x><y/></x>, __count__ = ;return; }");
tryItOut("break L\n;");
tryItOut("if(this) { if (window) try { return; } catch(__noSuchMethod__) { prototype = <><x><y/></x></>; }  else {yield; }}");
tryItOut("if((uneval((p={}, (p.z = 1.3)()) for (({ __proto__: prop, constructor: __count__ }) in <x><y/></x>)))) { if (new (({}).hasOwnProperty)(true)) \f(-0)\n else {__proto__ = <><x><y/></x></>; }}");
tryItOut("do  while((({prototype getter: <x><y/></x>,  get prop [[]] ()window })++) && 0);");
tryItOut("L:if(__proto__ = <y><z/></y>) {return <><x><y/></\tx></>;let __iterator__, __proto__; } else  if (<y><z/></y>.hasOwnProperty(\"__proto__\")) yield this;");
tryItOut("let ([, ({ __parent__: __proto__ })]) { throw function(id) { return id } }");
tryItOut("while((this -= [z1,,]) && 0)return  '' ;");
tryItOut("while((.2) && 0){var function::prop: [[]]; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x><y/></x> || 0/0['__iterator__'] in \f({__proto__: (<> \"\" </>.([prototype for ( in __proto__:  '' )])) /= <><x><y/></x></>.eval(window)})) ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = ([15,16,17,18].map(Math.sin, #1#) ? new (new 1e+81())() : (this in function::__noSuchMethod__)()) ? let (__iterator__, __proto__) undefined .@ __count__.__count__ getter= (1 for (x in [])) : (__parent__\t.((@foo ?  \"\"  : <y><z/></y> >> ({}).__lookupGetter__(<><x><y/></x></>, prototype)))) in let (__parent__ = #3={a:#3#}) <><x><y/></x></>.unwatch(\"__parent__\")) L:with({function::prop: __iterator__.unwatch(\"prototype\")}){Math.pow }");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = @foo /= <y><z/></y> in [<x><y/></x>]) {}");
tryItOut("/*infloop*/do {yield window;*::*; } while(__noSuchMethod__ = ((<x><y/></x>).call).call(<x/>, @foo, __count__: <x><y/></x>));");
tryItOut("export prototype; const prototype;");
tryItOut("yield ((gc)(*,  '' ))\nfor(let y in [5,6,7,8]) let prop;");
tryItOut("/*for..in*/for(var [constructor, constructor] = this\n in __parent__) {gc()throw undefined; }");
tryItOut("this.zzz.zzz;");
tryItOut("try { let(({ __proto__: __count__ }), __noSuchMethod__ = null) ((function(){yield ;})()); } finally { try { (uneval(<><x><y/></x></>)) } finally { {}return; }  } ");
tryItOut("/*for..in*/for(const constructor(new Exception(__noSuchMethod__ >=  \"\" )) in prototype = prop) {M:switch( \"\" ) { case 7: break; case 1: yield;break; case 7: <x><y/></x> }M:if(false) continue M; else  if (new Date(<x><y/></x>, (-0))) (function (constructor, prototype) { return 1e4 } ).call else {const __parent__; } }");
tryItOut("break ;");
tryItOut("this\nlet __noSuchMethod__ = @foo, __parent__ = 5.0000000000000000000000;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __iterator__.constructor =  ''  & *::* in null.isPrototypeOf(new (Math.pow)())) with({__count__: <x><y/></x>})yield;");
tryItOut("/*infloop*/for(const __proto__; [033 for (prototype in  /x/ )]; __count__ = true) /*infloop*/do {gc() } while( \"\" );");
tryItOut("/*for..in*/for(let [constructor, prototype] = (uneval(window)) in #3={a:#3#} %= null) break ;");
tryItOut("((1 for (x in []))).apply");
tryItOut("do gc() while(((p={}, (p.z = (yield this))()) .. this.__defineGetter__(\"prototype\", new function::__count__(<x/>).hasOwnProperty(\"__parent__\"))) && 0);");
tryItOut("if(@foo) {let constructor = *::*, __iterator__ = true; } else if((__iterator__ :: @foo.eval(__iterator__ = function () { gc() } (this,  '' )))) { if (([(__iterator__ >>= <><x><y/></x></>)])) \t{default: throw <x><y/></x/*\n*/>;; } else {var prop = *, prototype; }}");
tryItOut("/*infloop*/while((0/0++)--){M:switch((uneval(<><x><y/></x></>.prop))) { default: break; case #2=constructor: /*infloop*/do return; while(--undefined);break; case  /x/g .unwatch(\"__count__\"): if(({__proto__: <y><z/></y>, constructor getter: (({a1:1})).watch })) {} else {let prop = prototype; }throw false;\ngc()\nbreak;  } }");
tryItOut("with({}) { var prop = ({a2:z2}); } ");
tryItOut("(3);");
tryItOut("return;");
tryItOut("with((null < <><x><y/></x></> != (constructor = <x/>))[(eval(\"-1\", window))]){ }");
tryItOut("/*for..in*/L:for([__noSuchMethod__, __iterator__] = <x/> in <><>(__iterator__) = [null]</></>) return;");
tryItOut("/*infloop*/while(<y><z/></y>){with(__noSuchMethod__ = @foo){ } }");
tryItOut("with({prototype: (--__parent__ = [[]] && ([] for (prop in 1.3)) for (__iterator__ in 1e+81) for each (__proto__ in __noSuchMethod__))})M:if(3.141592653589793\n == new <><x><y/></x></>(<><x><y/></x></>, [,,z1])) export *;");
tryItOut("{if(1.3) { if (new (prop.(*))()) {return;(window); } else {gc() }} const prop; }");
tryItOut("with({prototype: prop = [prop, ]}){if([[*::*].filter((<><x><y/></x></>).call)]) { if (undefined || function ([y]) { }) let __noSuchMethod__;} else (false);{}\nyield; }");
tryItOut("/*for..in*/for(var prop. in @foo.__lookupGetter__(\"__parent__\")) {{var __iterator__;{} }(__noSuchMethod__ = constructor), __count__; }");
tryItOut("try { {} } finally { return ({a1:1}); } ");
tryItOut("/*for..in*/for(var __noSuchMethod__.__noSuchMethod__ in (()(\n(([(yield (function ([y]) { })())].some(eval))())))){continue ;yield; }");
tryItOut("({})");
tryItOut("let (__parent__) { if(__parent__) { if ((prototype = *)) __proto__ = this;} else {return;return __iterator__; } }");
tryItOut("M:if(({prototype:  /x/ (__proto__, <><x><y/></x></>)})) L:if(__iterator__.__proto__) {; }\n{} else return;");
tryItOut("/*infloop*/for(new (( \"\" ).watch)(<x><y/></x>, __parent__).throw((yield (p={}, (p.z = <><x><y/></x></>)()))); new (<x><y/></x>.__defineGetter__(\"__parent__\", (1 for (x in [])))\f)(<>yyy</>, yield @foo); (yield [<><x><y/></x></> for (__iterator__ in <x/>)])) /*infloop*/do let __proto__ = <x><y/></x>; while(<x/>\n.propertyIsEnumerable(\"__count__\"));");
tryItOut("return <y><z/></y>;\ntry { export *; } catch(prop if (function(){throw <x><y/></x>;})()) { ; } catch(prototype) { default: throw __iterator__;;case 4: break; return;yield;case [,]: case 3: break;  } \n");
tryItOut("this.zzz.zzz;");
