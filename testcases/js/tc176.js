tryItOut("/*for..in*/for(let __parent__ = __iterator__() in __proto__ = false) {}");
tryItOut("/*infloop*/for(const prototype; new __iterator__(); constructor.propertyIsEnumerable(\"__count__\")) with(var __proto__, __parent__)/*infloop*/for(const __iterator__;  /x/ ; this) break L; const __noSuchMethod__;");
tryItOut("if(typeof 3\n\f) {throw <\n><x><y/></x></>;/*infloop*/while(-0 = arguments){__count__;let prototype = *; } }");
tryItOut("/*infloop*/while([z1] <<= <x/>);");
tryItOut("L:with({__noSuchMethod__: 1e+81})return  /x/ ;");
tryItOut("");
tryItOut("__parent__ = prototype;");
tryItOut("with((__iterator__ = (1 for (x in [])))){/*for..in*/%=return (this.__defineGetter__(\"prototype\", <><x><y/></x></>))(({__noSuchMethod__:  /x/g  })); }");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("M:do {const prototype = (-0), __proto__; } while(( \"\" ) && 0);");
tryItOut("__iterator__ = __proto__;");
tryItOut(";");
tryItOut("__iterator__ = __iterator__;");
tryItOut("if((function(q) { return q; })) {yield <><x><y/></x></>; } else  if (*.@*) {}");
tryItOut("if((<x><y/></x>.unwatch(\"__noSuchMethod__\").valueOf(\"number\"))) {prototype } else  if (yield __parent__|=(window for (__parent__ in <x><y/></x>))) <><x><y/></x></>;");
tryItOut("/*for..in*/for(var __parent__ in typeof *) {{}do {(1e4);; } while((P.__lookupSetter__(\"__iterator__\")) && 0); }");
tryItOut("let prototype;");
tryItOut("switch(#0=({prototype: prototype}) ? .2.eval(*::*) : (prop = <x><y/></x>) /= ({a2:z2}).* in 3/0) { default: switch(eval(\"export prototype;\", new ((<><x><y/></x></>).watch)(this, <><x><y/></x></>))) { default:  }break; break; case [false for (__noSuchMethod__ in <x><y/></x>)].unwatch(\"__noSuchMethod__\"): break; case constructor.__count__ getter= ({}).__lookupGetter__: break; case 3: let prototype;break;  }");
tryItOut("if(__count__ = false) {(<x/>);let constructor =  \"\" , constructor; } else undefined;");
tryItOut("{}");
tryItOut("if(({ __proto__: prop, __count__: ({ prototype: ({ __iterator__: [((<x/>.@*))( \"\" .yoyo(*::*)), , ({ constructor: constructor, __count__: prop })], __proto__: #1=[#1#]['constructor'] }), __parent__: ({ __noSuchMethod__: ({ __parent__: [, __iterator__, ], __proto__: [, ] }), prototype: ({ __noSuchMethod__: ({ __proto__: prototype }) }) }) }) }) = __count__.__noSuchMethod__ = __proto__ ? 1e+81 : null) {new FunctionL:with({prop:  /x/g }){<x/>;\freturn; } }");
tryItOut("M:with({prop: new ([constructor if (this)]) || (1e+81 ? window : prototype)(__noSuchMethod__ = <y><z/></y>)})let constructor, __parent__ = <y><z/></y>;");
tryItOut(";");
tryItOut("const prop = (-1);");
tryItOut("/*for..in*/for(var __proto__ in ((function (__iterator__) { yield window } )(3.141592653589793))){return;[1,2,3,4].slice }");
tryItOut("/*for..in*/for(__iterator__[[, constructor, __noSuchMethod__, __iterator__, __noSuchMethod__], __parent__, , , ]  = (<x><y/></x>\n) in yield true) ");
tryItOut("/*infloop*/for(var [, , ] = (-<x/> %= 'fafafa'.replace(/a/g, undefined)); 1e+81; constructor.__proto__ getter= (new Function(\"{}\")) /= ({ __iterator__: __iterator__//h\n }) = this.zzz.zzz) while((<x><y/></x>) && 0){<x><y/></x> }");
tryItOut("/*infloop*/for(const __count__; __iterator__; window) yield;");
tryItOut("while(([true]) && 0)yield  /x/ ;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(let __count__ = __noSuchMethod__ = \f '' ((uneval(*))) in  '' .__lookupSetter__(\"__noSuchMethod__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in function ([y]) { }) -1");
tryItOut("do /*infloop*/M:for(let constructor = prop; 033; <><x><y/></x></>) (false); while((__count__ = *) && 0);");
tryItOut("yield (this.zzz.zzz.__defineGetter__(\"prototype\", [1,2,3,4].map));");
tryItOut("var __noSuchMethod__\nreturn undefined;");
tryItOut("if(this) { if ((function ([y]) { })()) export *; else this;}");
tryItOut("let (__noSuchMethod__ = this .. this, constructor =  \"\" ) {  }");
tryItOut("{__parent__ = <y><z/></y>; }");
tryItOut("/*infloop*/for((case (window.__noSuchMethod__ = *): yield <x><y/></x>;/*for..in*/L:for(const __proto__ in ((function  __count__ (__count__, __proto__)<><x><y/></x></>)(<y><z/></y>))){yield  '' ; }); function(id) { return id }; (['fafafa'.replace(/a/g, function(q) { return q; })].sort('haha'.split))) {/a/giconst __count__, constructor = prop; }");
tryItOut("/*for..in*/for(const function::each in ((eval)(function  __iterator__ () { const setter = [[]]; } (<x><y/></x>)))){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__//h\n in ([[]++])) {{{}; }var prototype = <x//h\n><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in \t[]) {(<><x><y/></x></>); }\f");
tryItOut("/*infloop*/do return 0x99; while(<><x><y/></x></>.hasOwnProperty(\"constructor\"));");
tryItOut("/*infloop*/while(4.){throw this;const __count__ = window, __noSuchMethod__ = null; }");
tryItOut("L: {{} }");
tryItOut("/*infloop*/M:while(((function ([y]) { }.eval(__count__)) / [,] = <x><y/></x>))L:with({__iterator__: __iterator__|={} < ()}){{}return  /x/ ; }");
tryItOut("/*for..in*/for(var __iterator__ = yield this in __proto__.__defineGetter__(\"prototype\", ({}).__lookupGetter__)) {; const __iterator__; }");
tryItOut("do yield; while((@foo) && 0);");
tryItOut("/*for..in*/M:for(let [prototype, __parent__] = __noSuchMethod__ = this in <y><z/></y>.watch(\"__count__\", ([1,2,3,4].map).call)) {var prop = eval(\"<><x><y/></x></>\", null);M:if(<><x><y/></x></>.unwatch(\"prototype\")) __iterator__.__count__ }");
tryItOut("let __parent__ =  '' , __parent__\n");
tryItOut("function::constructor");
tryItOut("__count__.__proto__ = __noSuchMethod__;");
tryItOut("{;var __proto__ = <x/>;\nreturn;\n }");
tryItOut("{export *;throw <><x><y/></x></>; }");
tryItOut("if(constructor = __noSuchMethod__.eval(void arguments)) {throw StopIteration; } else  if (prototype >>>=__noSuchMethod__ ? (__parent__.__proto__ getter= eval) : this.__noSuchMethod__) if(*) { if ((function ([y]) { })()) {throw <x><y/></x>; }} else {throw this; }");
tryItOut("if((__proto__.__parent__).call(({ __proto__: prop, prop: constructor }).(1e81.valueOf(\"number\")))) export __count__; else {const prototype; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in ((Math.sin)(1e+81))){return null; }");
tryItOut("gc()");
tryItOut("function ()\f { return __noSuchMethod__.__count__ getter= function  __noSuchMethod__ (constructor) { yield __parent__ }  } ");
tryItOut("/*infloop*/do {__proto__ = this, __iterator__ = __parent__; } while((p={}, (p.z = (<><x><y/></x></>.yoyo(false)))()));");
tryItOut("const __count__ = false, prototype = prop;/*for..in*/for([prototype, __iterator__] = __proto__ = this in [[]]) {throw prop; }");
tryItOut("/*infloop*/L:for(<x><y/></x> < <x><y/></x>.eval((String(<><x><y/></x>\t</>).unwatch(\"let\"))); <y><z/></y>.__iterator__ = (__noSuchMethod__ = __proto__ .. true ? <y><z/></y> : *::*); ([] = yield)) {yield (function(q) { return q; })((__proto__.(<x><y/></x>))); }");
tryItOut("switch(window /=  /x/g ) { default: break; case 9: break;  }");
tryItOut("<x><y/></x>\n(true);");
tryItOut("/*for..in*/M:for(constructor in undefined) const prop = <><//h\nx><y/></x></>\n/*infloop*/M:while(<x><y/></x>){const prop;(__noSuchMethod__).call }");
tryItOut("do {(1 for (x in []))const prototype = <x><y/></x>, __noSuchMethod__; } while(([[prototype, , , , prototype], ] = let (constructor = window) false) && 0);");
tryItOut("export __noSuchMethod__;");
tryItOut("try {  } finally { [1,2,3,4].map } ");
tryItOut("M:if((p={}, (p.z = ([prop, []] = Object((prototype = *::*))))())) { } else  if ( /x/ .propertyIsEnumerable(\"prop\")) {L:if(undefined) return; else  if (constructor) {export constructor;(<y><z/></y>); } else  } else {return;yield; }");
tryItOut("if(<x/>) const getter;");
tryItOut("/*infloop*/M:while(__proto__)const __parent__, constructor;");
tryItOut("");
tryItOut("switch((<><x><y/></x></>.constructor)) { default: break M; }");
tryItOut("if(([15,16,17,18].sort(function  __proto__.__parent__ (constructor, __count__) { const ; } , ([15,16,17,18].filter( /x/g , this.__defineGetter__(\"prop\", function(q) { return q; })))))) { if (([11,12,13,14].some)++) {; }} else {yield;Math.sin }");
tryItOut("M:do {*::*;export *; } while((null) && 0);");
tryItOut("constructor = prototype;");
tryItOut("if( ''  |= <y><z/></y>.__noSuchMethod__ = .2) {;var __parent__ = true, __noSuchMethod__ = {}; } else  if (<><!--yy--></>.watch(\"__iterator__\", function () { yield * } )) return;yield *;");
tryItOut("if(__iterator__ = function ([y]) { }) { if ((p={}, (p.z = 'fafafa'.replace(/a/g, eval))())) {new Functionconst __proto__, prop; } else {let prototype, prototype =  \"\" ; }}");
tryItOut("__iterator__ = __parent__;");
tryItOut("/*infloop*/M:do {__parent__ = <x><y/></x>, __proto__ = <x><y/></x>; } while(undefined);");
tryItOut("if(__proto__ = 033) let (__proto__, __iterator__ = constructor) { (</*\n*/x><y/></x>); } else {with({__proto__: false})yield;if(__proto__ % constructor) {; } else  if ((!constructor)) return this; else throw <x/>; }");
tryItOut("/*infloop*/for((prop = ({ __parent__: __parent__, __iterator__: __noSuchMethod__ }) = this && <x><y/></x>) in ({ set ({ constructor: [[, prop, ({ __iterator__: prop })]] })(prop, constructor)\t { return this.__defineSetter__(\"constructor\", eval) }  }); ++<><x><y/></x></>; prototype = this >= (<x><y/></x>.watch(\"__proto__\", (true).apply))) {/*for..in*/L:for(__parent__ = (__noSuchMethod__.prototype) in this) yield true; }");
tryItOut("do {(prototype); } while((undefined) && 0); const __noSuchMethod__;");
tryItOut("{let(__noSuchMethod__) { gc()var constructor = <><x><y/></x></>, prototype; }");
tryItOut("/*infloop*/do {} while( '' );yield 0x99;");
tryItOut("/*infloop*/for(let ({ __parent__: ({ __noSuchMethod__: __count__, constructor: __proto__ }), constructor: __parent__ }) = [15,16,17,18].filter(function () {  } , *::*); __count__.__parent__ setter= 'haha'.split; new (__noSuchMethod__)(<y><z/></y>, 4.)) {yield; }");
tryItOut("L: yield;");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("L:if((-3/0 * *).hasOwnProperty(\"constructor\")) {;(#1#); } else const prop;");
tryItOut("M:with(((<x><y/></x>)[default: break; ].hasOwnProperty(\"prop\"))){const prop = *, __proto__; }");
tryItOut("{/*infloop*/while(<><x><y/></x></>){export constructor;yield this; } /x/g ; }");
tryItOut("if(prototype) { if (undefined) throw true;} else (<x/>).__defineSetter__");
tryItOut("/*for..in*/L:for(let [__proto__, __iterator__] = ((undefined)[@foo]) in this) __noSuchMethod__, __noSuchMethod__ = *::*;");
tryItOut("let (({ function (__iterator__) { yield; } : ({ prototype: ({ constructor: ({ __count__: [[constructor, ], ({ prototype: __parent__, prototype: __count__ }), , ({ prop: __parent__ })], __proto__: get }) }), constructor: [[(arguments)(<x><y/></x>), , , ], prototype] }), __parent__: ({ constructor: prop, __proto__: [constructor, , , ] }) })) { if(((<><x><y/></x></>.__lookupSetter__(\"__count__\")).throw(true .. null))) { } }");
tryItOut("/*for..in*/for(var prop((delete  /x/ )) in *) /*infloop*/for(const ({ prototype: prop, __count__: __count__ }) = ({__count__: <x><y/></x>, __iterator__:  \"\"  }); constructor; prop) {return; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*for..in*/for(var constructor in #1#) ");
tryItOut("/*infloop*/while(([[1]].__count__)){/*infloop*/do {__count__, yield = this;return  /x/ ; } while(prop); }");
tryItOut("L:do {for(let y in [5,6,7,8]) constructor = __iterator__; } while((__iterator__ = @foo .@x:: 0x99) && 0);");
tryItOut("{const __iterator__, __noSuchMethod__; }");
tryItOut("{export *;/*for..in*/for([__noSuchMethod__, prototype] = <x><y/></x> in  '' ) export constructor;/*for..in*/M:for(let __count__ = __parent__ in 1e81) const __count__ = 1e-81; }");
tryItOut("while(([(null).watch(0.1,  if (true))]) && 0){export __proto__;var prop, constructor;gc() }");
tryItOut("__count__ = prototype;");
tryItOut("with((new (function  prop (__count__, prototype)<x><y/></x>)(undefined,  /x/ )) %= ( /x/g .@foo)){throw *::*;\fif((0.1)((yield <x><y/></x>), [[]])) { if (<><x><y/></x></> instanceof <x/>) {return; } else {function () { const __iterator__, __iterator__ = __parent__; } gc() }} }");
tryItOut("/*for..in*/for(const [setter, prototype] = [*].filter([1,2,3,4].slice) in __noSuchMethod__) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const 1.2e3 in ({})) export __noSuchMethod__;");
tryItOut("if((new Function(\"__noSuchMethod__;\"))) {(<><x><y/></x></>);; } else var __noSuchMethod__ = <x><y/></x>;");
tryItOut("/*infloop*/while(*::*){throw prop;prop =  '' ; }");
tryItOut("yield;\ncontinue ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<><><bbb xmlns=\"\nwindow\"><!--yy--></bbb><!--yy--></></> in window) M:if(return) {return;yield; } else  if (( /x/ )) export __proto__; else [1,2,3,4].map");
tryItOut("/*for..in*/for(let __parent__(@foo) in (((function  constructor () { this } ).apply)())){L:if(*) { if ( /x/g ) {gc() }} else {export __count__;const prop, prop = {}; } }");
tryItOut("/*for..in*/for(var __noSuchMethod__.constructor in this .. *::*) export __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in ((4.)(<><x><y/></x></>, <x><y/></x>))) /*infloop*/export *");
tryItOut("if(constructor.constructor = (-#2=({__noSuchMethod__: false.unwatch(\"constructor\")}) ? prototype :  /* Comment */[[]])) {yield (({constructor: __proto__})); const prototype\nexport *;\ngc()\n } else return ( /x/g  * this.__noSuchMethod__);");
tryItOut("let (__proto__, prototype = ([<><x><y/></x></>].sort(({}).hasOwnProperty))) { ) }");
tryItOut("prototype = prototype = window, [__noSuchMethod__, __parent__, constructor]");
tryItOut("return;");
tryItOut("/*infloop*/while((__iterator__ = null).valueOf(\"number\") == [(033 -= <><x><y/></x></>) for each (__count__ in __count__) for each (__noSuchMethod__ in prop)])/*infloop*/for(1e4; true; <x><y/></x>) {(<x><y/></x);__count__; }");
tryItOut("prop = __parent__;");
tryItOut("if([]) {break L; }");
tryItOut("{if(<><x><y//h\n/></x></> - false) { if (((this for each (prop in  /x/g )))) {throw <x><y/></x>;let //h\n__proto__, prototype; } else {var  = @foo, __proto__; }} }");
tryItOut("{export *;with(<><x><y/></x></>){@foo; } }");
tryItOut("/*infloop*/M:do {/*infloop*/while((<x><y/></x>.(prop))){\tthrow 1.3; }return (new ([1,2,3,4].slice)(( /x/  :: __iterator__))); } while( '' .propertyIsEnumerable(\"__noSuchMethod__\"));");
tryItOut("/*for..in*/for(prototype.__noSuchMethod__ in __noSuchMethod__.constructor = yield __iterator__) /*infloop*/while(__noSuchMethod__){{} }");
tryItOut("for(let y in []);");
tryItOut("{if(<><x><y/></x></>) {yield;; } const constructor; }");
tryItOut("/*infloop*/for((__noSuchMethod__ =  '' ); (uneval((( '' --) @ prototype))); <bbb xmlns:ccc=\"prototype =  /x/g \"><ccc:eee></ccc:eee></bbb>) ;");
tryItOut("/*for..in*/for(__proto__ in (([__parent__%=__noSuchMethod__].map(({}).hasOwnProperty))(({})))){/*infloop*/while(eval(\"function  __iterator__ (prototype, prop) { return window } \", <><x><y/></x></>++)){yield\nvar constructor = __noSuchMethod__;constructor = <y><z/></y>; }prop = prototype; }");
tryItOut("if(window) export prop; else  if ([1].yoyo(<x><y/></x>)) __noSuchMethod__, __proto__ = [1,,];");
tryItOut("L:if(((uneval(this)) <= ({ __proto__: [__iterator__, __noSuchMethod__, prop], constructor: [__proto__, __proto__] }) = [undefined if (5.0000000000000000000000)]))  else {/*for..in*/L:for(__proto__ = <x/>.@foo in __proto__) const __proto__ = <x><y/></x>;export __proto__; }");
tryItOut("throw  /x/g ;\n/*infloop*/for(var prototype; this; this) new Function\n");
tryItOut("yield <x><y/></x>;");
tryItOut("let(__iterator__) ((function(){for(let y in [5,6,7,8]) throw StopIteration;})());");
tryItOut("do (__iterator__ = ({})); while((prop ?  /x/  : this.zzz.zzz +  << [, , __proto__, __count__, ] in <><x><y/></x></>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::__count__ in 5.0000000000000000000000.watch(\"__count__\", gc) >>= 3.141592653589793) {if(*) {var __noSuchMethod__ = undefined;; } else  if (function::__proto__) var __proto__; else export __noSuchMethod__;export *; } const prop;");
tryItOut("{<x/>; const __count__; }");
tryItOut("if(eval(\"undefined\", window) @ null , let (__noSuchMethod__ = <x/>, constructor = <x><y/></x>) <><x><y/></x></>) throw undefined; else {M:/*\n*/do {return <x><y/></x>;let constructor = false; } while((*) && 0);__noSuchMethod__ =  /x/ ; }");
tryItOut("with({__parent__: *::*}){if(true) /*\n*/{if(4.) { if (<><x><y/></x></>) {yield;gc() } else {(prototype).__defineSetter__ }} } else  if (__proto__.__iterator__ .@x:: (this.__defineGetter__(\"__proto__\", #1=[#1#]))) var __parent__, prop =  '' ;let (__iterator__) { let (function::constructor = [[1]], __parent__) { let prop = <><x><y/></x></>, this = <x><y/></x>; } } }");
tryItOut("gc()throw 1e81;");
tryItOut("/*for..in*/for(var prop = .2 in RangeError([,,].@*)) /*for..in*/for(var [prototype = __noSuchMethod__;, prototype] = (this.__defineGetter__(\"each\", (new Function(\";\")))) in  \"\" .__iterator__) ");
tryItOut("/*infloop*/for(let ({ prop: [, , , constructor, ({ __parent__: ({ constructor: prop, __noSuchMethod__: __noSuchMethod__ }), function::prop: x::prop })], __count__: ({ prop: ({ prop: [] }), prop: [, ] }) }) = [1,2,3,4].slice; !<x/>; ((p={}, (p.z = __parent__)()))(({ function::constructor: prop }) = 1e81.__defineGetter__(\"__noSuchMethod__\", (1e4).__defineSetter__))) {yield .2;export *; }");
tryItOut("let (__parent__, __noSuchMethod__ =  \"\" ) { (1e4); }\n");
tryItOut("/*for..in*/for(\fconst prototype = (({__parent__: this })) in this) {return *::*; }");
tryItOut("/*infloop*/do return; while((function (__parent__)<x><y/></x>));");
tryItOut("yield <><x><y/></x></>\n__noSuchMethod__;break ;");
tryItOut("/*for..in*/for(let null ? (-0) : <x><y/></x>['__parent__'] in @foo++) /*for..in*//* nogeckoex bug 349964 */L: for  each(const ({ __noSuchMethod__: [prop, __iterator__, ], __iterator__: prop }) in [[1]] |= \n*) {with({__count__:  '' }){prop;{} }; }");
tryItOut("with(true){yield;export *; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in __parent__) {yield  \"\" ; }");
tryItOut("/*infloop*/for(var [__parent__] = (Function([, ({ __proto__: __proto__ })] = [11,12,13,14].sort, (new [1,2,3,4].slice(constructor.constructor setter= 'haha'.split)))); ({ __iterator__: constructor, prop: [prop, __proto__, , , ] }) = ({ __iterator__: constructor, __count__: __iterator__ }); ) {if(constructor) { }\fif(__parent__.constructor = <><x><y/></x></>) {;return; } }");
tryItOut("if(__parent__) {window;var __parent__; } else yield <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x/>\f.isPrototypeOf(this)) {/*infloop*/L:for(__iterator__.__iterator__ getter= function(q) { return q; }; eval(__iterator__ = <y><z/></y>); function(id) { return id } !== 0) {yield; } }");
tryItOut("do {yield; } while((({ get __proto__(*)0 })) && 0);");
tryItOut("for(let y in []);");
tryItOut("M:while((((*)((uneval([z1]\n)), <x><y/></x>.(*::*))).__proto__) && 0)/*infloop*/M:do {\nexport *; } while(__iterator__.(<x><y/></x>));");
tryItOut("L:if(<bbb xmlns=\"<x><y/></x>\"></bbb>.([prototype if (__count__)])) { }");
tryItOut("if(( /* Comment */(__iterator__.__proto__ setter= __noSuchMethod__) ? __proto__ = __iterator__ :  \"\" )) with({}) { return; } \nexport *;");
tryItOut("L:with(<y><z/></y>)gc()");
tryItOut("if(<xxx {prototype}\t={function::constructor} />) continue L; else  if (({ get __iterator__ prop (__iterator__, prop) { return new String(typeof  /x/ ) }  })) gc() else {yield <y><z/></y>;/*infloop*/for(true; *; <><x><y/></x></>) {export *; } }");
tryItOut("if((__noSuchMethod__ = __proto__)) {function (prototype, __noSuchMethod__) { yield 3.141592653589793 }  } else  if (([11,12,13,14].some)) yield [z1]; else {{} }");
tryItOut("gc()");
tryItOut("if(((new Iterator(true)).@foo)) {if(@foo) { if (this) yield;} else {export __iterator__;export throw <x><y/></x>;; } } else  if (['fafafa'.replace(/a/g, Math.sin)]) {while((window || <><x>//h\n<y/></x></> /=  \"\"  @  /x/g ) && 0)export constructor; }");
tryItOut("let (constructor = ({}).hasOwnProperty, __parent__ =  /x/g ) {  }");
tryItOut("switch(prop = <x/>[<><x><y/></x></>]) { default: L: {var constructor = <x/>; } }");
tryItOut("/*infloop*/M:while(<><x><y/></x></*\n*//>(false.eval([[1]]), <x><y/></x>))let ([, ], ({ constructor: function::__parent__ }) = <><x><y/></x></>.valueOf(\"number\")) { \r\nreturn false;\n }");
tryItOut("let(__iterator__ = [new (constructor @ window)() for each (__proto__ in new (-1)(0.1)) for each (__noSuchMethod__ in null)], ({ __noSuchMethod__: ({ __iterator__: prototype, __count__: prototype }) })) ((function(){for(let y in [5,6,7,8]) try { with({}) { (<><x><y/></x></>); }  } catch(__iterator__) { function::__iterator__;\f } })());");
tryItOut("L:if([] = (<x><y/></x> for (this in <x><y/></x>))) {({}).hasOwnProperty } else  if (__count__ = false) yield;");
tryItOut("/*infloop*/M:for((Boolean([15,16,17,18].sort(Function, eval(\"( { return .2 } );\", undefined).unwatch(\"__iterator__\")), (function(y) { yield y; export *;; yield y; }).call( \"\" , (~*)) in ((__parent__.(window))))); [{}]; ((p={}, (p.z = (p={}, (p.z = )()))()))) return yield yield __iterator__ -= __iterator__ = ({a1:1});");
tryItOut("var prop = (-0), prototype;export *;");
tryItOut("/*infloop*/M:for(__noSuchMethod__ =  '' ; <y><z/></y>; .2) {gc() }");
tryItOut("M:do {Function(<x><y/></x>); } while((\r<x><y/></x>.isPrototypeOf(undefined)) && 0);");
tryItOut("if((<x/>)(prototype, <x/>).isPrototypeOf([@foo].map('haha'.split))) { if (( ''  + this.__defineSetter__(\"__count__\", eval))) {<x><y/></x>; } else {/*infloop*/for([prototype] = ( '' )(); (window).__defineSetter__; true.yoyo(window)) false/*infloop*/L:while(((arguments)[__count__]))export __parent__; }}");
tryItOut("M:if([11,12,13,14].map) { if ((null += this.__defineSetter__(\"__proto__\", (({a2:z2})).__defineSetter__))) {export __iterator__;/*infloop*/for(var prop; 0x99; function ([y]) { }) yield <x><y/></x>; } else yield false;}");
tryItOut("yield yield ( ''  .@ prop((let (__noSuchMethod__ = __count__, __noSuchMethod__ =  '' ) ({a2:z2}))));");
tryItOut("var __proto__;");
tryItOut("/*for..in*/for(let [__parent__, prototype] = [(uneval(<x><y/></x>))(__iterator__, __parent__)].filter((Math.sin).call) in new Object((<x/> &= {})) ^= 033.isPrototypeOf(<y><z/></y>)) {export *;0/0.throw(__count__), (-0).__lookupSetter__(\"prototype\") }");
tryItOut("while((null) && 0){export __parent__;{} }");
tryItOut("Math.sin");
tryItOut("let (__parent__ = @foo, prototype) {  }");
tryItOut("M:with({constructor: new ( /x/g )()}){; }");
tryItOut("if(yield ({a2:z2})\t) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in window) {break L;var let = window; } else  if ((<bbb xmlns:ccc=\"__proto__ = \"><ccc:eee></ccc:eee></bbb>.( /* Comment */false))) {yield <><x><y/></x></>; } else __noSuchMethod__ = <x><y/></x>;");
tryItOut("{let (__iterator__ = <><x><y/></x></>, prototype) { /*for..in*/for(const function::__proto__ in ({})) {return; } }\t }");
tryItOut("{/*for..in*/for(__iterator__ in ((((<x><y/></x>).__defineSetter__).call)(<x><y/><\f/x>))){yield \\;{} }\n }");
tryItOut("var __iterator__ = this;");
tryItOut("export constructor");
tryItOut("let(__proto__) { prop");
tryItOut("export *\n");
tryItOut("{return;continue ; } const __parent__;");
tryItOut("with({__count__: __noSuchMethod__})(<x><y/></x>)");
tryItOut("if(prop =  '' (undefined, this)) { if ( /* Comment */<y><z/></y>//h\n) true; else yield;}");
tryItOut("while((5.0000000000000000000000) && 0)");
tryItOut("");
tryItOut("/*infloop*/M:for(function::__iterator__ = gc(); function ([y]) { }; constructor) {/*infloop*/L:for(*::*; 1e81; this) gc() }");
tryItOut("if(try {  } catch(__count__ if __noSuchMethod__.function::__noSuchMethod__) { var __iterator__, __count__; } catch(__noSuchMethod__) { let __noSuchMethod__ = <x/>; } finally { continue L; } ) {gc()gc() } else  if (((<><x><y/></x></>)(<x><y/></x>) = this.throw(<x/>))) {gc()var __iterator__ = window, __noSuchMethod__; } else {yield;(this); }");
tryItOut("with({}) { let(__iterator__ = [*], constructor) { let(prop, __iterator__ = <x><y/></x>.yoyo(<x><y/></x>)) { for(let y in [5,6,7,8]) __iterator__ = __proto__; } ");
tryItOut("/*for..in*/for(let __parent__ = <x/>.__iterator__ in (__proto__ = (return <><x><y/></x></>;.(__count__ = <x><y/></x>)))) {/*for..in*/\fL:for(const __iterator__ in constructor) export *;/*infloop*/for(<x><y/></x>; 0.1; 1e-81) {return *;var __count__, constructor; } }");
tryItOut("while((new (window)(*::*.valueOf(\"number\"))) && 0){{yield; } } const __noSuchMethod__;");
tryItOut("/*infloop*/for(__noSuchMethod__; Function(<><x><y/></x></>); 3/0) {/a/gireturn; }");
tryItOut("export __parent__;");
tryItOut("L: yield;");
tryItOut("do {let __count__ = window;return; } while((0/0 .. __iterator__) && 0);");
