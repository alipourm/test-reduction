tryItOut("switch(this & __parent__) { case let (__count__, __iterator__ = <><x><y/></x></>) #1=[#1#]: break;  }");
tryItOut("/*for..in*/for(let (this.__defineGetter__(\"prop\", (case 9: case 7: break; case 5: return;var __count__ = [,];break; default: break; case <><x><y/></x></>: yield prop;break; case 3: throw prototype;).apply) >>> ([1,2,3,4].map).apply()) in ((constructor)())){{return window;let __noSuchMethod__, constructor = function::__parent__; }var __iterator__; }");
tryItOut("/*infloop*/for(window; *; (-0)) {{} }");
tryItOut("yield __noSuchMethod__;");
tryItOut("return ((__count__)-={} & __noSuchMethod__) === ((@foo)[ /x/g ]).*;");
tryItOut("continue \nlet __count__ =  '' ;");
tryItOut("prototype = ;");
tryItOut("with({__iterator__: <x><y/></x>})var __parent__ = window;");
tryItOut("L: /*infloop*/M:for(* *= window; (this.zzz.zzz); new Boolean(#1#, ).yoyo(__iterator__|=<x><y/></x>)) [1,2,3,4].map");
tryItOut("/*for..in*/for(var [__parent__, prototype] = (window %= <y><z/></y> & __proto__ & undefined for (__noSuchMethod__ in (@foo.__defineGetter__(\"prop\", function(q) { return q; }))) for (constructor in *::*)) in --function::prop.( '' )) {while((*::*) && 0){prop{} } }");
tryItOut("prop\n");
tryItOut("if(Function) { if (0 <<=  '' .__lookupGetter__(\"__noSuchMethod__\")) (<y><z/></y>).__defineSetter__ else return window;}");
tryItOut("with(var __iterator__ = , constructor;.({ prop: prototype, __parent__: __iterator__ })){gc()if(3.141592653589793) {} const __noSuchMethod__; }");
tryItOut("{if(@foo) {return <x><y/></x>; } else  if ([1]) {function ()<><x><y/></x></>let = this, __noSuchMethod__; }with({__count__:  /* Comment */<x><y/></x>}){<x/>; } }");
tryItOut("if(this.zzz.zzz) export *\ngc() else {export *;<y><z/></y>; }");
tryItOut("/*for..in*/for(prop in true) __iterator__ = __count__;");
tryItOut("let(({ prototype: [, ({ prototype: __iterator__ }), , ], prototype\r: ({ constructor: [, ({ \fprop: __count__ }), ({ __iterator__: prop, prototype: prototype })] }) }) = (delete null.@*.hasOwnProperty(\"__parent__\")\n)) ((function(){let(__iterator__ = ('haha'.split(undefined)), ({ __count__: __count__ })) ((function(){throw StopIteration;})());})()); const prototype;");
tryItOut("if((this.__defineGetter__(\"__iterator__\", (( /x/g .valueOf(\"number\"))).__defineSetter__))) setter else  if (this) return <x><y/></x>;");
tryItOut("if(__proto__.__parent__) { if (<><x><y/></x></>) {export *; } else <y><z/></y>;}");
tryItOut("if((\n@foo)[@foo.@foo]) {with({prop: *})yield; } else {/*for..in*/M:for(null.__noSuchMethod__ in (((new Function(\"continue L;\")))(<y><z/></y> === <x></></x>))){yield  \"\" ; } }");
tryItOut("(1e+81)\n");
tryItOut("/*infloop*/M:for(var __proto__ = (eval(\"({ constructor: constructor }) = (p={}, (p.z = this)())\", (<x/>(-1, {})))); this.zzz.zzz; ({}).__lookupGetter__.__lookupSetter__(\"constructor\")) {var set =  '' , __proto__ = <y><z/></y>; }");
tryItOut("/*infloop*/do if(constructor) false; else {return; } while((p={}, (p.z = ((uneval(__count__)) for (prop in @foo) for (__noSuchMethod__ in  /x/ )))()));\n({}).hasOwnProperty\n");
tryItOut("try { throw StopIteration; } catch(constructor if (yield (__parent__))) { try { const __noSuchMethod__ =  '' , __count__ = <x><y/></x>; } finally { __count__, prop }  } catch(x::__proto__ if (function(){throw StopIteration;})()) { return this; } catch(prototype if (false)[__iterator__]) { with({}) <y><z/></y>; } catch(prop if ({constructor getter: function(q) { return q; }, __noSuchMethod__: <x><y/></x> })) { let(prototype, __noSuchMethod__ = #1=[#1#]) ((function(){{}})()); } catch(prop if  /* Comment */ /x/g .*) { for(let y in []); } catch(prop) { try { continue M; } catch(constructor) { return prop; }  } ");
tryItOut("var __iterator__ = <y><z/></y>;\ncontinue M;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in __proto__) \n");
tryItOut("/*for..in*/L:for(var prop in (((1 for (x in [])))(window.throw(<x/>)))){yield;let __iterator__, __count__; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in ((Function)([prototype] = \f__noSuchMethod__ < <x/>(x::__parent__.valueOf(\"number\")))))if(<><x><y/></x></>) {__proto__; } else  if (window) [[1]]; else yield *::*;<x><y/></x>;");
tryItOut("/*for..in*/for(let __count__ in (__parent__ || window)) (undefined); const __parent__;");
tryItOut("return;");
tryItOut("if(__proto__ = this >= *) { if (\n[, __iterator__]+=<><>new function (__count__, prop) { return *::* } (@foo)</></>) if(__proto__) /a/gi else {prop;break ; } else {M:with(__iterator__.__noSuchMethod__ = this){;(3/0); } }}");
tryItOut("/*infloop*/M:for(__proto__ = constructor.__noSuchMethod__ = __parent__; __count__ = <y><z/></y>(new 0x99(<><x>\r<y/></x></>, *::*)); window) ");
tryItOut("L: /*infloop*/while(*::*){yield; }");
tryItOut("yield __proto__ = *::*;");
tryItOut("/*for..in*/for(const __proto__ in ((1.3.@*.__noSuchMethod__)(Function((function(y) { yield y; yield ({a1:1});; yield y; }).call(#3={a:#3#}.eval( /x/ ), ), ({})()--)))){/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <x><y/></x>) {yield 3.141592653589793;return @foo; } }");
tryItOut("if((__parent__.__proto__)) /*for..in*/L:for(var constructor in ((this)( /x/ )))throw <><x><y/></x></> else  if (delete <y><z/></y> ^= <x><y/></x>) with({}) with({}) return __proto__; else {continue ;throw <y><z/></y>; }");
tryItOut("/*infloop*/for((<><x><y/></x></>.yoyo(1e-81) for (({ __parent__: __iterator__ }) in __noSuchMethod__)); * | <><x><y/></x></>\n.@*; (uneval(this))) const prototype, __proto__ = ({a1:1});");
tryItOut("/*infloop*/for(let __parent__; (eval(\"1e4\", <x/>)); __proto__ in (-1)) prototype = ({a2:z2}), ;");
tryItOut("/*for..in*/for(const prop = ({__proto__ setter: gc, function::__iterator__.prop getter: 'haha'.split }) in [1]) __noSuchMethod__;");
tryItOut("{var __count__ =  /x/ ;return []; }let (__proto__ = constructor) { gc() }");
tryItOut("with( /* Comment */([<><x><y/></x></>]))if( \"\" ) {[[1]];(window); } else {}");
tryItOut("\n");
tryItOut("/*for..in*/for(var prop = (!<x/>) in <y><z/></y>) var __noSuchMethod__, prototype = *::*");
tryItOut("var prototype =  '' , __count__ = #1=[#1#];");
tryItOut("/*infloop*/for(let __parent__; (prototype = __noSuchMethod__); yield window) yield;");
tryItOut("if(( '' .eval(@foo) * 3\n for (__iterator__ in <x><y/></x>) for each (__count__ in  /x/g ) for each (constructor in  /x/g ))) ( '' ); else  if (this) ; else return __proto__;");
tryItOut("/*for..in*/L:for(let __noSuchMethod__.__count__ in (('haha'.split)(({}))))/*infloop*/for( /x/ ; 1e81; *::*) {gc()yield; }");
tryItOut("throw StopIteration;");
tryItOut("(null);");
tryItOut("L: {(prototype); }");
tryItOut("{var __count__, __noSuchMethod__; }");
tryItOut("if(-3/0) * else  if ((window)()) {continue L; } else export *;");
tryItOut("yield *;");
tryItOut("if((( /* Comment */eval(\"while((window) && 0){break ;const __count__; }\", ~({a1:1})))[delete [,,z1]])) /*infloop*/for(({ constructor: ({ __count__: ({ constructor: ({ __count__: [constructor, , ], prototype: ({ function::constructor: __iterator__\f, __proto__: prototype }) }), __count__: [({ constructor: __iterator__, __iterator__: __parent__ }), [, prototype, __noSuchMethod__], function::__proto__ = <y><z/></y>, constructor] }), prop: [[], (1e81)([,,]), , , []]/*\n*/ }) }) = ((yield  '' ).* >>>=null); [15,16,17,18].map((function  prototype (__count__, __noSuchMethod__)[[]]).call, (true)(undefined, *)); (new <x><y/></x>())) {while((1.3 !== <x/>) && 0){(<x><y/></x>); } }");
tryItOut("/*for..in*/for(const [prototype, __noSuchMethod__] = ({ prop: ({ __count__: __noSuchMethod__ }) }) = (__iterator__.__proto__) in (Function(<><x><y/></x></>, <><x><y/></x></>))) {const __proto__ =  /x/g , __count__ = prototype//h\n__count__ = 3/0 }");
tryItOut("while((3) && 0){this }");
tryItOut("[[1]];");
tryItOut("__count__ = 033return;");
tryItOut("/*infloop*/while(new ( \"\" )(<x/>)){\n\rif(function(id) { return id }) {export prop; }{} }");
tryItOut("while((eval(\"get\", 0.1)) && 0) ");
tryItOut("switch(this) { default: arguments;break; case 1: break;  }");
tryItOut("if(<x/>) { if (((Math.sin).call((uneval(<x><y/></x>)), this,  \"\" )) .@ (<><x><y/></x></>)[this].__lookupSetter__(\"__parent__\")) {/*for..in*/for(const prototype in ((({}).__lookupGetter__)(eval(\"if(<y><z/></y> .@ window) {break ;__noSuchMethod__, __proto__; } else  if ((new function(id) { return id }(window))) {<y><z/></y>;yield <><x><y/></x></>; } else {continue ;gc() }\", [15,16,17,18].map((eval).apply, __parent__ = #3={a:#3#}))))){const constructor, __iterator__;continue ; } } else {export *; }}");
tryItOut("switch( '' ) { case  \"\" : const __proto__ = .2, __parent__;break;  }");
tryItOut("export *;\nyield;\n");
tryItOut("break M;prototype getter: 'haha'.split");
tryItOut("if( /x/ ) break ;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = ( /x/ ) in true) continue M;");
tryItOut("/*for..in*/L:for(let (<!--yy-->, __iterator__ = <y><z/></y>) window in ((yield <x/>) @ (*::* >>= <x><y/></x>))) {(<y><z/></y>/*\n*/);1.2e3; }\n");
tryItOut("/*for..in*/M:for(let [__count__, __iterator__] = <bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb> in __noSuchMethod__) gc()");
tryItOut("throw __iterator__;");
tryItOut("with(*){return;switch((-1)) { case undefined:  } }");
tryItOut("let prototype, get;");
tryItOut("with((yield (uneval(#1=[#1#])).__lookupSetter__(\"__parent__\")))L: {__iterator__ = __count__;let prop; }");
tryItOut("gc()");
tryItOut("throw  /x/g ;");
tryItOut("M:do export constructor; while((null) && 0);");
tryItOut("M:if(@foo | false) throw [1,,]; else const constructor = @foo, __iterator__;");
tryItOut("/*for..in*/for(__proto__ in new Iterator( /x/ )) yield;");
tryItOut("let (__proto__ = export *) { /*infloop*/while(new (Math.sin))/*infloop*/for(__proto__ = {}; <x><y/></x>; <x><y/></x>) yield  /x/g \n; }");
tryItOut("if(eval(\" ''  < <x/> >> (<y><z/></y>.__defineGetter__(\\\"__count__\\\", (Math.sin).apply))\", (<><x><y/></x></> === <x><y/></x>))) { if ( /* Comment */<><x><y/></x></>) function  __iterator__ (function::__iterator__) { yield __proto__ } } else if((constructor = __parent__)) {const prop = true; } else  if (function::__parent__) {return; }");
tryItOut("/*infloop*/for(var __iterator__ = constructor.prototype = <x><y/\r></x>; <><x><y/></x></> >>> <x/>; ( /x/ )) break M;");
tryItOut("for(let y in [5,6,7,8]) let(__count__ = 0.1) { throw StopIteration;");
tryItOut("if((yield __parent__.__iterator__ getter= (Math.pow).call)) {export *; } else  if (prop = <x><y/></x>) {let (__proto__ = <x><y/></x>, __proto__) { gc() }var prop = 033, constructor = function (constructor) { return  /x/g  } ; }");
tryItOut("throw  \"\" ;");
tryItOut("{break \n/*for..in*/for(const [__proto__, prop] = window in  \"\" ) {throw [1,,]; }{}\nbreak ; }");
tryItOut("if(prop.*) /a/gi");
tryItOut("/*for..in*/for(var __iterator__ in <><x><y/></x></>) ");
tryItOut("with({__parent__: (new *(constructor in *.__defineSetter__(\"__count__\", (Math.sin).call)))}){M:if((++<><x><y/></x></>)) {yield; } else (undefined);/*infloop*/for(let __iterator__; 5.0000000000000000000000; setter) {function ()<><x><y/></x></>yield set; } }");
tryItOut("/*for..in*/for(let [__iterator__, ({ prop: ({ __iterator__: [, [, , ({ prop: __count__, prototype: prototype }), , ], ], __parent__: function::constructor }) })] = <><x><y/></x></>.throw(window).unwatch(\"__parent__\") in (prop = (* / new null.hasOwnProperty(\"constructor\")()))) {{if(true >>= this) {var \rprop, this; }const prop = 5.0000000000000000000000, prop = __iterator__; } }");
tryItOut("return;");
tryItOut("/*infloop*/while(( set constructor(__parent__, prototype)[11,12,13,14].some).unwatch(\"constructor\")){{} }");
tryItOut("{{} }");
tryItOut("if(((uneval(prototype, __noSuchMethod__ = )))) /*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in [,,z1]) <y><z/></y>;\nyield;\n else {continue ; }");
tryItOut("return <x><y/></x>");
tryItOut("yield <></>;");
tryItOut("if(* >>= <y><z/></y> .@ *.__noSuchMethod__ = prop) {\t(<x><y/></x>);{M:with((__iterator__|=window)){const prototype, __parent__ = 1e81; }yield; } }");
tryItOut("/*infloop*/M:while([11,12,13,14].some){ for each (prop in yield) for each (constructor in let (constructor, __parent__) <><x><y/></x></>) for /*\n*/(new (Math.sin)(@foo, this)['__count__'] in 033) if (<x><y/></x>) }");
tryItOut("switch((*.@*)) { case 4: break;  }");
tryItOut("L:switch(<><x><y/></x></>) { default: ;constructor, __parent__break; case false: case undefined:  }");
tryItOut("do yield <y><z/></y>; while((<x/>) && 0);");
tryItOut("/*infloop*/for(const __proto__;  '' ; this) ");
tryItOut("while(((({ __noSuchMethod__: prototype, __parent__: constructor }) = x::__proto__).unwatch(\"__iterator__\")) && 0){let __iterator__, function::constructor =  /x/g ; }\f");
tryItOut("while(( /x/ ) && 0){throw window;; }");
tryItOut("{do { } while((#1=[#1#]) && 0);yield; }window;\n\n");
tryItOut("yield <x><y/></x>");
tryItOut("{}");
tryItOut("with(<y><z/></y>){let constructor; }");
tryItOut("if(new (eval)(*)) {continue M; } else {/*for..in*/for(let __iterator__ = prop in <x/>) var delete; }\nreturn;\n");
tryItOut("throw __noSuchMethod__;");
tryItOut("{let __count__; }");
tryItOut("/*infloop*/\fdo let (__parent__, constructor =  /x/g ) { let __count__, function::prototype = <y><z/></y>; } while((p={}, (p.z = ([1,2,3,4].map).call(this.watch(\"set\", ({}).hasOwnProperty), eval(\"const __iterator__ =  /x/g ;\", [z1]), <y><z/></y>) | window < true)()));");
tryItOut("do (false); while((@foo) && 0);");
tryItOut("/*infloop*/do const __parent__ = false, __parent__; while((#1#)(*::*));");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <x/>) {(true); }");
tryItOut("while(((new prop.__count__.isPrototypeOf(<x><y/></x>.@*)(new Function( \"\"  !== 1e81)\t, new Array(((({}).hasOwnProperty).call(__proto__,  /x/ , prop)))))) && 0){let(constructor = <y><z/></y>, __proto__ = __iterator__) ((function(){const <y><z/></y>;})());{} }");
tryItOut("/*for..in*/for(let prototype = undefined in new (Function)((eval(\";\", [* if ([,,])])), __count__.__proto__)) {/*for..in*/for(each in 1.3) break M; }");
tryItOut("{/*for..in*/for(var constructor = (__parent__ %= -3/0) in this) {export prototype;throw [,]; }gc() }");
tryItOut("switch(eval(\"prop = 1e81\", (({prototype: <x><y/></x>})))) { case <y><z/></y>.__proto__: break; case <x><y/></x> ? <x><y/></x> : <x><y/></x>: {return;yield 1e4; }break; case 8: if((/a/gi).call(*, <><x><y/></x></>, undefined)) {with({__proto__: <y><z/></y>}){{} }{\tyield;<><x><y/></x></> } } else  if (#0=[1e+81]) {if( /x/g \f) yield; else var __noSuchMethod__ =  /x/ ;export __iterator__; } else case  /* Comment */ /x/g : default: break; case (uneval( /x/ ))\n: break; case 1: let(function::__count__ = <><x><y/></x></>) ((function(){yield;})());break; break;  }");
tryItOut("if(false['__parent__']) {let __parent__ = window; }");
tryItOut("{{__noSuchMethod__ = <x><y/></x>, prototype; } }throw <x><y/></x>;");
tryItOut("while((3) && 0)prop: window()");
tryItOut("");
tryItOut("export prop;");
tryItOut("/*infloop*/M:while(#3={a:#3#}){let (__noSuchMethod__ = *) { (true); }/*infloop*/for(var __noSuchMethod__; (Math.pow).call(((function(q) { return q; })((new (Math.pow).call(<x><y/></x>, 1e4)), null)), ([<x/>])); *::*) return; const __count__; }");
tryItOut("/*for..in*/for(const __iterator__ = <><x><y/></x></> in  /x/g ) yield;");
tryItOut("{const __parent__ = [1]; }");
tryItOut("/*infloop*/M:do __count__, constructor; while(true); const __proto__;");
tryItOut("/*infloop*/for(({ __iterator__: constructor, __count__: ({ prototype: constructor, __parent__: ({ [, , ]: __parent__\t }) }) }) = ((yield #1=[#1#]).__defineSetter__(\"__proto__\", (1 for (x in []))) ^= ((function \t()(-0)).call(__iterator__ = {}, ))); @foo['function::__proto__'] = new <x><y/></x> ? [constructor].some((1 for (x in []))) : (prop = <><x><y/></x></>); (this.__defineGetter__(\"prop\", (<><x><y/></x></>).watch)['__noSuchMethod__'] = #1=0x99.constructor)) {try { prototype = *, __count__ = 1.3; } catch({yield @foo; } if (function(){yield;})()) { __noSuchMethod__, prop = continue ;; } /*for..in*/L:for(let __count__(null) in ((Math.sin)((eval(\"yield <><x><y/></x></>;\", <><x><y/></x></>))))); }");
tryItOut("if(@foo) const let, __proto__ = <y><z/></y>; else  if (<x><y/></x>) return __proto__;");
tryItOut("/*for..in*/for(let __parent__ in  /x/ ) const __parent__;");
tryItOut("L: {export *;{} }");
tryItOut("if(this instanceof  \"\" ) {export *;continue ; } else  if (({__noSuchMethod__: __parent__, __iterator__ setter: ({}).hasOwnProperty })) const __iterator__ = [], function::__parent__;");
tryItOut("const constructor");
tryItOut("if((*::* ^ 'fafafa'.replace(/a/g, function(y) { yield y; break L;; yield y; }))) { if (<><x><y/></x></> @  \"\" ) {; }} else {M:with({prop: <><x><y/></x></>})({}).hasOwnProperty }");
tryItOut("if((Exception(<xxx {__iterator__}={+*::*} />, <><x><y/></x></>++))) { if ((uneval((new (function ([y]) { })())))) {/*for..in*/for(let constructor =  /x/  in function ([y]) { }) (constructor);(<x/>); } else {return let (prop =  '' , __parent__ = [1]) (this)(\f); }}");
tryItOut("continue ; const __proto__;");
tryItOut("L:if(true) {return; } else  if (new 'haha'.split((<x/>.*)) >>>=[11,12,13,14].map.isPrototypeOf((__noSuchMethod__))) {/*infloop*/for(@foo && false; <><\rx><y/></x></> >> @foo; ( /x/  if ( \"\" ))) {return <x><y/></x>; } }");
tryItOut("continue \n\n");
tryItOut("let = prop;");
tryItOut("if(true.eval(<y><z/></y>)) { if ( \"\" .hasOwnProperty(\"__noSuchMethod__\")) {{} }} else ;");
tryItOut("{ }");
tryItOut("/*for..in*/M:for(constructor in ((*::*.valueOf(\"number\")))) {if(constructor) {{} } else {function  prop () { return  return  } ; }/*for..in*/for(\f[__proto__, prop] = new String(<x><y/></x>, __iterator__) in new *::*()) {const __parent__ = <x><y/></x>, __iterator__; } }");
tryItOut("/*infloop*/do {const __noSuchMethod__ = ({}), __parent__ = false;export __parent__; } while({});");
tryItOut("let(prototype = (yield *), __parent__) ((function(){yield ;})()); const __noSuchMethod__;");
tryItOut("let (constructor, prototype = constructor.__proto__) { do break ; while((<x><y/></x>) && 0); }");
tryItOut("/*infloop*/do gc() while(constructor);");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] = new *() in window | -0) export *;");
tryItOut("return <y><z/></y>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in ~__count__) {/*infloop*/for(const __noSuchMethod__; new undefined(false, this); prototype-=true) {gc()gc() } }");
tryItOut("for(let y in [5,6,7,8]) throw __proto__;");
tryItOut("yield 4.\nlet __proto__ =  /x/ , __noSuchMethod__");
tryItOut("if((yield (yield #3={a:#3#}))) { if (*::* .@*:: window) constructor = function::prototype;} else /a/gi");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__((__proto__-=<><x><y/></x></>)) in <y><z/></y>--) {if(5.0000000000000000000000) {throw <x><y/></x>; }export prop; }");
tryItOut("while((this) && 0){let __proto__ = true, constructor = <y><z/></y>;return; }");
tryItOut("do  while((<><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in [<x/>]) /*infloop*/do constructor; while(__count__);");
tryItOut("/*for..in*/L:for(var prop in ((([,,])((__noSuchMethod__ = undefined ? .2 if ( '' ) : <x/> if (undefined\f)), eval(\"__parent__ = *::*, __iterator__ = <><x><y/></x></>;\", ({a2:z2}))))(<><x><y///h\n></x></> & ({}) >>>=(<x><y/></x>--))))/*for..in*/for(let prop = new Iterator(<x><y/></x>) in <x/>) {continue M; }");
tryItOut("if([15,16,17,18].sort(function ()[1,2,3,4].slice, <><{__count__}><!--yy--></{__count__}></>)) {/*for..in*/for(function::__proto__ in <x/>) { \"\" ;return undefined; }gc } else  if (this.__defineGetter__(\"__noSuchMethod__\", __iterator__) === Object(<y><z/></y>, function(id) { return id }) in <x/>.__lookupSetter__(\"__iterator__\")) {return prototype;gc()\nyield (function ([y]) { })(); } else gc()\nreturn @foo;");
tryItOut("with({}) { let(constructor, prototype = -1) ((function(){with({})  /x/ .__proto__ = prototype;})()); } ");
tryItOut("if(new ((new Function(\"__noSuchMethod__;\")))( \"\" , __noSuchMethod__).__defineGetter__(\"__count__\", function  __count__ (prototype, __parent__) { yield  /x/g  } )) {return 0/0 } else {gc()export *; }");
tryItOut("export *; const __proto__;");
tryItOut("while((({ set constructor(prop) { return  /x/  ? prop : * }  })\f) && 0)/*for..in*/for(let constructor = [,,z1] in #1#) ;");
tryItOut("/*for..in*/for(var [prop, set] = ((#1#)(window, *)) in <x><y/></x>) const __parent__, prototype =  '' ;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = @foo in  \"\" ) ( /x/ );");
tryItOut("/*for..in*/for(constructor = (0.1 ? <x><y/><\f/x> : __noSuchMethod__) in <x><y/></x>) var __iterator__, __noSuchMethod__; const prototype;");
tryItOut("/*infloop*/for(var prototype; (typeof prop); __iterator__) {(0.1[__noSuchMethod__: [this].some(function () { yield * } )]); }");
tryItOut("if(<y><z/></y>) gc() else  if (<x><y/></x>) {throw __count__;continue ; }");
tryItOut("with(\nthis.__defineSetter__(\"prop\", Math.sin).prototype = prop = ({ prototype: constructor, __proto__: __parent__ })){__count__;return arguments; }");
tryItOut("return this;");
tryItOut("/*for..in*/for(var [__iterator__, prototype] =  \"\"  in <x/>) {throw  \"\" ; }\n\n");
tryItOut("/*infloop*/M:do {function::constructor;let __iterator__; } while(({prop: new (function(q) { return q; })( /x/ , false)}));");
tryItOut("continuedefault: yield __proto__ = ({a2:z2});case (this.__defineGetter__(\"__iterator__\", (undefined).__defineSetter__)): export *;break; break;  M\n");
tryItOut("{break M; }");
tryItOut("break M;export *;");
tryItOut("L:if(<x><y/></x>) { if (*) throw constructor; else yield 1e+81;}");
tryItOut("with({__proto__: <><xxx {__iterator__}={null} /></>}){;(<y><z/></y>); }");
tryItOut("throw prototype;");
tryItOut("M:with({({ __noSuchMethod__: __count__ }): (<></> - (new Object()))}){eval }");
tryItOut("let (prop, __count__ = <x><y/></x>) { export __iterator__; }");
tryItOut("/*for..in*/L:for(var ((1.2e3 if (@foo))) ? <></>.(new ((new Function(\"return;\")))()) : eval(\"var __iterator__;\", ( /* Comment */<y><z/></y>)).prop in ((Function)(<></>, <><x><y/></x></>.({ prop: __proto__ }))))){}");
tryItOut("/*infloop*/do with(1e-81){const prototype = this; }\n while( /x/g .prop);");
tryItOut("/*infloop*/L:while(Date(<><x><y/></x></>)){yield <y><z/></y>;gc() }");
tryItOut("(#3={a:#3#});");
tryItOut("{prototype = <x><y/></x>;if(this) {export *; } }");
tryItOut("L:with({prototype: new  '' ( \"\" , <x/>)})L: {return null; }");
tryItOut("/*for..in*/for(const __count__ in ((({}).hasOwnProperty)((__noSuchMethod__ @ *.*))))if(5.0000000000000000000000) var __iterator__ = __parent__, prop;");
tryItOut("const __iterator__ = window, prototype; const __noSuchMethod__;");
tryItOut("switch(Math.pow(\f[z1,,], <x><y/></x>)) { case (__count__) = (\n*::*.unwatch(\"constructor\")).__defineSetter__(\"__iterator__\", function (__noSuchMethod__)<><x><y/></x></>): case 5: case  '' .isPrototypeOf({}): case eval(\"gc()\", <x><y/></x>): export __noSuchMethod__;break;  }");
tryItOut("/*infloop*/M:while((new <x><y/></x>)) /x/ ;");
tryItOut("with({__count__: <x/>.yoyo(<x><y/></x>)})with({}) return  /x/ ;");
tryItOut("L: /*infloop*/M:for(prototype; #1#; __iterator__) throw <x><y/></x>;");
tryItOut("return <><x><y/></x\f></> * null ^ window -= <x><y/></x>;");
tryItOut("{return <x><y/></x>; }");
tryItOut("L: {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let (__proto__.(@foo))['__proto__'] in (prototype = <x/>.__count__ = true)) /*for..in*/for(const __count__ = new (((-0)).watch)() in <><x><y/></x></>) (-0);");
tryItOut("let __count__ = *::*, prototype = ({a1:1});");
tryItOut("export constructor;");
tryItOut("/*for..in*/for(let (1e81)(<y><z/></y>) in ([1,2,3,4].map)) /*for..in*/for(let __iterator__ in ((undefined)(false)))export constructor;");
tryItOut("let (__count__ = [,,]) { break ; }/*for..in*/for(var prop in function(id) { return id }) {'haha'.splityield; }");
tryItOut("L: let prototype = [z1,,];");
