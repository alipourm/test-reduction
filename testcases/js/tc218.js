tryItOut("return;");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>) {return;{} } else (@foo);}");
tryItOut("{}");
tryItOut("__parent__, function::__iterator__ = 1e81.isPrototypeOf(*::*)");
tryItOut("return;\n/*infloop*/for(yield window; (true.hasOwnProperty(\"constructor\"));  /x/  == [,]) return window;\n");
tryItOut("/*infloop*/for(__noSuchMethod__ = arguments(); (({ set __proto__ prototype (__iterator__)__noSuchMethod__ / <x><y/></x>, constructor: <><x><y/></x></>['prototype'] }) <<= [z1][<><x><y/></x></>]); ((\n(constructor = __noSuchMethod__).__lookupSetter__(\"__noSuchMethod__\")))[<xxx//h\n {prop}={this} />]) {if( '' ) { if (true) {yield constructor;yield \fwindow; }} else throw window;let (constructor) { /*for..in*//* nogeckoex bug 349964 */M: for  each(const  in false) yield; } }");
tryItOut("/*infloop*/L:for(__count__; 1e+81; yield *) {with({__count__: <y><z/></y>})export __noSuchMethod__;yield;yield; }");
tryItOut("/*infloop*/do throw <x/>; while(__noSuchMethod__.(eval(\"new (function ([y]) { })()(#3={a:#3#}, -1)\", __iterator__ = .2)));");
tryItOut("/*infloop*/for(let prototype = (({ set __proto__(constructor, __iterator__) { yield false } ,  get prop(__count__)__parent__ }) for (__iterator__.__count__ in <><x><y/></x></>) for each (prop in 3)); prop ^= this !== (new RangeError()).\t__defineGetter__(\"__iterator__\", function (__proto__) { return __proto__ } ); ({ set __proto__(constructor) { return (prototype = (\n<x><y/></x>))\r } , __iterator__:  ''  })) {M:while((<><x><y/></x></>) && 0)yield; const prototype; }");
tryItOut("__parent__: ((__noSuchMethod__ = ({constructor: 5.0000000000000000000000 })).eval(((<x><y/></x>.__defineSetter__(\"constructor\", <><x><y/></x></>)--) for each (__noSuchMethod__ in yield *) if (<><x><y/></x></>))))");
tryItOut("/*infloop*/for(prop = -0; __count__ = this; window) {(<y><z/></y>);{} }");
tryItOut("/*infloop*/L:for([15,16,17,18].filter(__proto__, []); Exception() >= ({ prop: ({ __iterator__: __proto__ }) }) = (#0=[11,12,13,14].sort); <xxx {__count__}={3.141592653589793} />.((uneval((~(__proto__.(new Function(*::*)))))))) ");
tryItOut("return;");
tryItOut("throw constructor;");
tryItOut("let (constructor = __iterator__ = __parent__.prototype[(1e+81)]) { (window); }");
tryItOut("{}");
tryItOut("/*infloop*/for(const ({ prototype: ({ __count__: __count__ }), constructor: prototype }) = eval(\"break ;\", <y><z/></y>); ({ __proto__: __parent__, constructor: constructor }) = function::function::constructor%=1e+81; ) {const constructor = 4., prop = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(false;  '' ; false) gc()");
tryItOut("__proto__ = <y><z/></y>;");
tryItOut("return;");
tryItOut("{; }\nthrow 3.141592653589793");
tryItOut("return __parent__;");
tryItOut("if() {new Function } else  if ([<x/>].sort( '' )) gc() else {prop; }");
tryItOut("M:while(((({ __parent__: [], __noSuchMethod__: ({ constructor: __iterator__ }) }) = (__noSuchMethod__ &  /x/g )) % ((({}))).unwatch(\"__iterator__\")) && 0)/*infloop*/for(<x><y/></x> += window; #1#.valueOf(\"number\"); <y><z/></y> ?  /x/g  :  /x/g ) return;");
tryItOut("if(<x/>) ");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("(this)[window];");
tryItOut("if(prop = -3/0) /*infloop*/while(__parent__ = true) \"\" ; else  if (constructor ? <x/> : undefined) continue L; else {const function::__noSuchMethod__ =  '' ; }");
tryItOut("switch(typeof  \"\"  %=  \"\" ) { default: __parent__ = <><x><y/></x></>, constructor;break; case 3: /*infloop*/for(let __iterator__; [15,16,17,18].sort((1 for (x in [])), arguments); (-0)) var __parent__ = <><x><y/></x></>;break; yield #3={a:#3#};break;  }");
tryItOut("let (__iterator__ = 033, prop = (this.__defineSetter__(\"constructor\", function  __count__ (__iterator__, prop) { yield window } ))) { export __parent__; }");
tryItOut("M:if(*) \f else  if (*) {} else {prop =  /x/g , __proto__ = null;return; }");
tryItOut("L: ");
tryItOut("if(<x><y/></x>) { if (window) {return; } else {yield; }}\nlet __proto__ = *::*;\n");
tryItOut("export *");
tryItOut("export *\nreturn this;");
tryItOut("let(__parent__ = 'fafafa'.replace(/a/g, eval)) ((function(){for(let y in [5,6,7,8]) yield;})());");
tryItOut("return ++<><x><y/></x></>;");
tryItOut("while((__proto__, prop) && 0){; }");
tryItOut("switch(__noSuchMethod__.__iterator__ getter= ({a2:z2}).isPrototypeOf(\n(__noSuchMethod__ =  /x/ ))) { case 7: break;  }");
tryItOut("/*infloop*/M:do \nyield; while( /x/  >>>=*::*.__lookupGetter__(\"__noSuchMethod__\"));");
tryItOut("export *\nlet __parent__ = @foo;\f");
tryItOut("let (prop, __noSuchMethod__) { /*infloop*/L:for(var prop = this.__defineSetter__(\"({prop: *::* })\", (1e4).__defineSetter__); __parent__ = @foo; (__parent__.__proto__ getter= ({}).hasOwnProperty)) export *; }");
tryItOut("if((Math.sin).call(__proto__.*, (\n((undefined)(<><x><y/></x></>, window))), <x/> ? <x><y/></x> : *)) {gc() } else  if (\n >>= undefined) {return; }");
tryItOut("return;\nwith({x::x::(<x><y/></x> ? (-0) : <y><z/></y>): true.valueOf(\"number\")})<x/>;\n");
tryItOut("/*for..in*/for(var __parent__ in __noSuchMethod__, __iterator__) let prop, __proto__;\nreturn true;\n");
tryItOut("for(let y in [5,6,7,8]) yield ((<x><y/></x>).apply(<> \f</>, false));");
tryItOut("new prop = constructor;(@foo);");
tryItOut("with({({ __iterator__: prop }): null});");
tryItOut("/*infloop*/M:for(({ __proto__: ({ prototype: constructor }) }) = <x/>; (1e+81 *= constructor)\f :: ({__proto__ setter: function\r () { yield [1] }  }); -<><x><y/></x></>) return <x/>;");
tryItOut("if(constructor = this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"export __count__;\\r\")))) continue M; else return;");
tryItOut("do return; while((this.__defineSetter__(\"setter\", function  prototype ()(<y><z/></y>.watch(\"let\", (new Function(\"__parent__ = this, __count__ = <x><y/></x>;\")))))) && 0);");
tryItOut("/*for..in*/for(\fvar __proto__ in (([1,2,3,4].map)( /x/ ))){Math.sinreturn undefined; }");
tryItOut("/*infloop*/L:for(<>\t<> </></>; delete ([[]] >>> this); ( /x/ .*)) with({__iterator__: (this.zzz.zzz)}){if(([15,16,17,18].some(function  __iterator__ () { return prototype } , (<x><y/></x> ? window : *::*)))) {export *;var __iterator__, __noSuchMethod__ = <x><y/></x>; } }");
tryItOut("M:if(.hasOwnProperty(\"__proto__\")) { if ((<><x><y/></x></>)(<><x><y/></x></>)) throw @foo; else {yield 0;\f<><x><y/></x></>(); }}");
tryItOut("/*for..in*/for(var __count__ = __parent__ in @foo) ");
tryItOut("/*infloop*/do {} while(<x><y/></x>);");
tryItOut("with({__count__: (yield window).prop = (*::*\n)})L:if(this.*) export *;");
tryItOut("gc()");
tryItOut("L:if(({ __parent__: prop\r }) * <x><y/></x>\n) {yield;window } else  if (( '' .propertyIsEnumerable(\"__count__\"))) L: const __noSuchMethod__;");
tryItOut("if(prototype) { if ((* &= <><x><y/></x></>)) return; else {gc() }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (uneval(3.141592653589793)) ? (<x><y/></x>.valueOf(\"number\")) : ([15,16,17,18].map('haha'.split, __noSuchMethod__ = <x><y/></x>))['x::__parent__'] in 'fafafa'.replace(/a/g, function (prototype) { yield <x><y/></x> } )) (-0);");
tryItOut("/*infloop*/while([[1]]){/*infloop*/while(({ prop: ({ : constructor }) }) = [__parent__, ] = false.__lookupGetter__(\"prop\"))continue ;<x><y/></x> in <><x><y/></x></>; }");
tryItOut("if(prototype) {throw  '' ;yield window; } else  if (<x><y/></x>) const __parent__ = [1], prop = [,];");
tryItOut("/*infloop*/for(-1;  /x/g ; <x><y/></x>) export __parent__;");
tryItOut("{if(__count__) { if ((<x><y/></x>).call((arguments.hasOwnProperty(\"prop\")),  /x/ , prop)) {{}return <><x><y/></x></>; } else {/*for..in*/L:for(var __iterator__ = this in  /x/ ) export __parent__; }}/*infloop*/for(var ({ prop: __proto__ }) = !<x><y/></x>; function::constructor = -null; __noSuchMethod__) (new Function(\"export prototype;\")) }");
tryItOut("switch(prop) { default: with({__parent__: (__count__ = window)})\t{false;; } }");
tryItOut("/*infloop*/M:for(<><x><y/></x></>;  \"\" ; window) {}");
tryItOut("while(((<x><y/></x>.__count__ = new /a/gi())) && 0)");
tryItOut("/*infloop*/while([[1]] * <><x><y/></x></>)const __count__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(const yield =  /x/g  in each) {}");
tryItOut("yield (p={}, (p.z = (<y><z/></y> ^ <><x><y/></x></> %= (yield (__noSuchMethod__.(false)))))());");
tryItOut("/*for..in*/L:for([prop, prop] = {export *;'haha'.split } in  \"\" .__defineGetter__(\"__iterator__\", eval) ||  \"\" .__lookupGetter__(\"__noSuchMethod__\")) {if(__iterator__ = window) ([]); else  if (prop.__noSuchMethod__ = 5.0000000000000000000000) {yield; } else {const __noSuchMethod__;gc() } }");
tryItOut("if((prop)) {/*infloop*/do {__noSuchMethod__, constructor;throw <x><y/></x>; } while(#3={a:#3#}); }");
tryItOut("/*infloop*/L:for(let (<x/>)(true); (null >= arguments.valueOf(\"number\")); -3/0) {throw  /x/g ; }\nif((null\n.throw(([this.zzz.zzz].some(<x><y/></x>))))) if((eval(\"@foo\", *).@*)) { if (eval(\"yield;\", 'fafafa'.replace(/a/g, [1,2,3,4].slice))) gc()} else L: var prototype; else { }");
tryItOut("prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in __noSuchMethod__) { { yield  ''  } throw <y><z/></y>; }");
tryItOut("let(__iterator__) ((function(){with({}) try { 3 } catch(prototype) { prop } })());");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = (function ([y]) { })() in prop.__iterator__ getter= Function) {yield;\n/*for..in*/L:for(let __proto__ = <x/> in \t<x/>) ( /x/ );\n }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("L:switch(<ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd>) { default: const __parent__, __count__;continue ;break;  }");
tryItOut("if(( \"\"  for (__iterator__ in <x><y/></x>) if (<x><y/></x>))\t) {gc() }");
tryItOut("{(true); '' ; }");
tryItOut("with({}) return  /x/ ;");
tryItOut("do var \f__parent__ = 0x99; const ; while((new [1,,]\n() /= ({ __parent__: prototype }) = __proto__ = (export prototype)) && 0);");
tryItOut("{{} }");
tryItOut("if(<><x><y/></x></> if (1e-81) & undefined) { if ((new (<><x><y/></x></> % window)(__parent__ = <y><z/></y>)((((*)(<x><y/></x>,  \"\" ).propertyIsEnumerable(\"__parent__\")))[#1=false]))) yield; else gc()}");
tryItOut("/*infloop*/do let __iterator__; while(<><x><y/></x></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ([__noSuchMethod__, , , __parent__, ])['__count__'] in constructor.( /x/ )) return;");
tryItOut("prop;__proto__;");
tryItOut("/*infloop*/for( '' ; <y><z/></y>; <x><y/></x>) gc");
tryItOut("/*infloop*/for(var __proto__; ((yield #0= '' ))((+)); ([15,16,17,18].some(function  function::__proto__ ()constructor, [1,,]))) export *");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in <y><z/></y>) {export prop;yield <x><y/></x>; }");
tryItOut("/*infloop*/for(const prototype = <x><y/></x>; <//h\n><x><y/></x></>; 1e4) <><x><y/></x></>");
tryItOut("{/*infloop*/L:do {const __parent__; } while(<><x><y/></x></>.watch(\"constructor\"\t, ({}).hasOwnProperty)); }");
tryItOut("L:if(__parent__) {const constructor, prototype;export let; } else  if (@foo) {return; } else gc()");
tryItOut("/*infloop*/M:for(eval(\"switch( /x/ ) { default: yield try { __proto__ = <><x><y/></x></>, constructor; } finally {  \\\"\\\"  } ;case this: break; yield;<><x><y/></x></>.watch(\\\"__iterator__\\\", ({a1:1}))break; case *::*: break; break; export constructor;case this: prop = <x/>, yield = function ([y]) { };break;  }\", <bbb xmlns=\"this.__defineSetter__(\"__iterator__\", /a/gi)\"><ccc:ddd></ccc:ddd></bbb>); (<><x><y/></x></>).__defineSetter__; __parent__.__noSuchMethod__ setter= Function) {yield; }");
tryItOut("let ((false ^=  /x/g )(<><x><y/></x></>.__lookupSetter__(\"prototype\")) = [prototype, __iterator__, prop]) { /*infloop*/for(this.__defineSetter__(\"__iterator__\", Function); this.__defineGetter__(\"__parent__\", ( \"\" )(undefined)).__defineSetter__(\"prop\", [1,2,3,4].slice); new ((0/0.eval(yield <><x><y/></x></>)))(#2=[-3/0] &= (<><x><y/></x></> | window) && (uneval(this)), (this.__defineSetter__(\"prototype\", this)))) let __noSuchMethod__, __parent__; }");
tryItOut("with(<><{prototype}></{prototype}></>)with({}) let(__iterator__) ((function(){with({}) return;})());");
tryItOut("/*for..in*/L:for(let __parent__.__parent__ in ((((\t{__parent__: constructor = function(id) { return id }})))()))yield;");
tryItOut("let __count__, <x><y/></x> = ({a1:1})\t\n");
tryItOut("/*for..in*/for(let [__proto__, prop] = (<><x><y/></x></> if ( /x/g )) in *.__lookupSetter__(\"prototype\")) {L:switch( /x/ ) { case 0: <x><y/></x> } }");
tryItOut("this.zzz.zzz;");
tryItOut("{new Object(eval(\"/*infloop*/for(var __noSuchMethod__ = 0; undefined;  '' ) {const __iterator__ = <><x><y/></x></>; }\", (__proto__.__parent__ setter= [1,2,3,4].slice)), (__count__.prop setter= function(y) { yield y; yield;; yield y; })), 5.0000000000000000000000.__lookupSetter__(\"__parent__\").__defineGetter__(\"__proto__\", 'haha'.split) }");
tryItOut("L: {({ get __iterator__() { yield <><x><y/></x></> } , __count__ getter: (this).watch }) }");
tryItOut("if(((new function(q) { return q; }((yield <x/>), undefined)).__lookupGetter__(\"__count__\"))) yield; else gc()");
tryItOut("M:do let (__proto__, prop = <><x><y/></x></>) { yield <x><y/></x>; }L: gc() while((<x/>) && 0);");
tryItOut("/*infloop*/while(yyy)return null");
tryItOut("return prototype.prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in undefined\n) {;{} }");
tryItOut("/*for..in*/for(let __count__ = prototype.__parent__ in \n__iterator__) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__.prototype in (__iterator__ = </*\n*/><x><y/></x></>)) {export __noSuchMethod__; } }");
tryItOut("/*infloop*/do (({}).__lookupGetter__).call while(({__parent__: [window]}));");
tryItOut("do {return;return __parent__ getter: Math.sin; } while(([[]].@foo) && 0);");
tryItOut("let (__iterator__, ({ prototype: ({ __proto__: ({ prototype: ({ constructor: __parent__ }) }) }), constructor: ({ __parent__: ({ __count__: __noSuchMethod__, prop: ({ prop: __parent__, __proto__: prop }) }) }) }) = <x><y/></x> .. true.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)) { let (constructor = <x/>, __noSuchMethod__ = 3.141592653589793) { do {return; } while((undefined) && 0); } }");
tryItOut("/*for..in*/M:for(<><bbb xmlns:ccc=\"window(.2)\"><ccc:eee></ccc:eee></bbb></> = 0/0 in (uneval(false))) {const __iterator__ = -1;break ; }");
tryItOut("continue ;");
tryItOut("let (__parent__, prop = this) { let __proto__ =  '' , yield = ({}); }");
tryItOut("throw <y><z/></y>");
tryItOut("prop;\nbreak ;\n");
tryItOut("M:with([15,16,17,18].sort([1,2,3,4].map, null if ( /x/ )) || ([,,z1] === <y><z/></y> in __noSuchMethod__.__iterator__ getter= eval))if((undefined--)) {let __parent__, __noSuchMethod__; } else {return *;prototype, __count__ }");
tryItOut("/*for..in*/M:for(let prop = yield <y><z/></y> in null) {([,,]);export *; }");
tryItOut("{yield;export *; }");
tryItOut("return (undefined.__defineSetter__(\"constructor\", this)) .. prototype = -0;");
tryItOut("while(( \"\" ) && 0)function(q) { return q; }");
tryItOut("if(false) {(undefined); } else {let __proto__ = null, constructor = undefined;const constructor; }");
tryItOut("yield;\nlet (prop = <xxx {__count__}={<><x><y/></x></>} />, __count__ = window) { L: {throw (function ([y]) { })();([1,2,3,4].slice).apply } }\n");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("{/*for..in*/for(var __parent__ = ({ __proto__: __noSuchMethod__, prototype: __count__ }) = ({ prop: prop }) in ({} ? * : <x><y/></x>)) yield; }");
tryItOut("let try { export __parent__; } catch(__noSuchMethod__ if (function(){yield;})()) { \texport *; }  = this, prototype\n");
tryItOut("switch(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { default: if(<x><y/></x> / window) { if (+*::*) {<x/>export *; }} else {yield [,,z1]; }break;  }");
tryItOut("if(this) { if (<x><y/></x>) {(<x><y/></x>); }} else -1;");
tryItOut("let(({ prototype: [({ prototype: __iterator__ }), prop, , ({ __count__: ({ constructor: __parent__ }) })] })) ((function(){null;})());");
tryItOut("/*for..in*/for(let prop = __iterator__; in ((Number(yield @foo))(null)))let (prototype = prop) { {}( '' ); }");
tryItOut("/*infloop*/for(const __count__ = let (__proto__, [] = (__parent__ = <y><z/></y>)) this.__defineGetter__(\"__parent__\", Math.sin).__count__ = <><x><y/></x></>++; 1.3; ~true.valueOf(\"number\")) {}break M;");
tryItOut("if(eval(\"yield window;\", <y><z/></y>)) (<x><y/></x>).__defineSetter__");
tryItOut("constructor;");
tryItOut("let (__count__ = ([15,16,17,18].some(function (prototype) { yield let ([]) (throw -1) } , [__proto__].filter(/a/gi)))) { throw function  __iterator__ (__count__, __iterator__) {  } ; }");
tryItOut("let(prop = , ({ prototype: prototype }) = (({__iterator__: window, __parent__: window }))) ((function(){for(let y in []);})());");
tryItOut("while((constructor) && 0){prototype = 3.141592653589793; }");
tryItOut("let(({ __noSuchMethod__: ({ prototype: __noSuchMethod__ }), prop: ({ constructor: prop, (__iterator__ = <y><z/></y>).__proto__ : [, , __iterator__, , ] }) }), __proto__) ((function(){;})());");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) let constructor = [1];");
tryItOut("let __proto__, prop\n");
tryItOut("{;{} }");
tryItOut("M:if([11,12,13,14].some) return; else  if ((uneval(__proto__ = __parent__))) {/*for..in*/for(prop in <><x><y/></x></>) export *;/*for..in*/M:for(const prototype in window) return <x/>; } else {do {throw *;export prop; } while(({}) && 0);M:if([11,12,13,14].filter) {(<><x><y/></x></>);/*for..in*/for(constructor = @foo in <><x><y/></x></>) {<x><y/></x>yield <><x><y/></x></>; } } }");
tryItOut("do {/*infloop*/for(let __count__; <x/> != *::*; window .@*:: <x><y/></x>) {return;yield; } } while((<><>(this >> __iterator__)</></>) && 0);");
tryItOut("/*for..in*/for(__parent__ = ((* < true) ? let (__proto__ = true) <><x><y/></x></> : <><x><y/></x></> if ([,,])) in (({function::__noSuchMethod__: __noSuchMethod__ })).prototype = [{}].some([1,2,3,4].map)) if( /x/ ) { if (*::*) break M;} else {return this; }\n");
tryItOut("while((window .. [].__defineGetter__(\"*::*.__iterator__\", *::*)) && 0)if(<y><z/></y>) { if (-1) {throw __proto__;yield undefined; }} else __noSuchMethod__;");
tryItOut("if(<><bbb xmlns=\"undefined\"> </bbb></>.constructor) { if (constructor.prototype = ({})) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in #1#) {export *; } }} else {;{{} ''  } }");
tryItOut("if(<y><z/></y>) { if (<x><y/></x>) const __proto__ = 3.141592653589793; else {var setter = 1e81; }}");
tryItOut("/*infloop*/while(#3={a:#3#})/*for..in*/for\t(let constructor in ((function (constructor) { yield (eval(\"prop;\", __iterator__.prop)) } )(({prototype: (prop <= <x/>) }))))throw *::*;");
tryItOut("/*for..in*/for(var [constructor, constructor] =  /* Comment */<><x><y/></x></> in <x><y/></x>) return <><x><y/></x></>;");
tryItOut("/*for..in*/for(const [prototype, __noSuchMethod__] = get = __parent__ in (__count__.@*).throw(({__count__: prototype}))) {const __count__; }");
tryItOut("if(([11,12,13,14].sort.valueOf(\"number\"))) \f{ if (arguments.__lookupGetter__(\"__iterator__\")) gc() else /*for..in*/L:for(const __noSuchMethod__ = (-true) in this) {yield; }}");
tryItOut("switch(<x/> >>>= '' ) { default:  }");
tryItOut(";\nreturn arguments;\n\n/*infloop*/M:for(var ({ constructor: ({ __parent__: [prototype, [[], ({ __iterator__: prototype, __iterator__: prop }), , [const __parent__ =  /x/ ;]], window.prop] }), prop: [, __parent__, ] }) = case 6: break; default: throw <y><z/></y>;break; case 6: gc()break; break; case <y><z/></y>: windowbreak; case constructor: return undefined;.isPrototypeOf(4.);  /x/g ; (__parent__ = prototype)) export __proto__;");
tryItOut("if(prototype = __parent__) {do while((this) && 0)var constructor = __noSuchMethod__; while(((true / <x><y/></x>.__lookupSetter__(\"__parent__\"))) && 0); } else  if ('fafafa'.replace(/a/g, gc)) {(<x><y/></x>);(1 for (x in [])) }");
tryItOut("/*infloop*/L:for(var ({ constructor: ({ __parent__: set }) }) = new function (__proto__, __iterator__) { yield <><x><y/></x></> } ([<><x><y/></x></> for each (constructor in <x><y/></x>)], <><x><y/></x></>); <><x><y/></x></>(); (constructor = [])) {var prototype = [,,], constructor = <x><y/></x>; }");
tryItOut("/*infloop*/for(let [, ] = this.__defineGetter__(\"__iterator__\", Function); [11,12,13,14].some; (prototype = <x/>.@*)) gc()");
tryItOut("throw constructor;");
tryItOut("__parent__ = __iterator__;");
tryItOut("try { throw StopIteration; } \rfinally { let(constructor) ((function(){let(prototype = [,,] >>= false, prototype) ((function(){return [,];})());})()); } ");
tryItOut("if((__parent__ = ((<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\") %= ('fafafa'.replace(/a/g, /a/gi))) ? <x><y/></x>.(*) : ({ __proto__: [, , __proto__], __parent__: [__iterator__] }) = <x/> ^ this .@x:: (new (function(q) { return q; })())))) { if ((-1)) const __noSuchMethod__ = <><x><y/></x></>, __count__ = 4.; else return;}");
tryItOut("with((<x/>.__iterator__ = null |= (++<x><y/></x>)))const __count__;");
tryItOut("/*infloop*/while(null){export __count__; }");
tryItOut("gc()");
tryItOut("/*for..in*/L:for(let [prototype, prototype] = <>\r<{__iterator__}> </{__iterator__}></> in (true++ % new 0/0)) if(([z1,,])[undefined]) return <x><y/></x>;");
tryItOut("var (/");
tryItOut("let (__iterator__ = 4.) { ; }\n");
tryItOut("let(({ prototype: ({ prop: __count__ }) }) = (window .@ String(<y><z/></y>))) ((function(){__noSuchMethod__ = __count__;})());");
tryItOut("{with({constructor: (__parent__.prop)}){const __count__ = @foo, __noSuchMethod__ = <x><y/></x>;<x><y/></x> } }");
tryItOut("{let __parent__ = <x><y/></x>, prop;prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("yield;");
tryItOut("function (prototype)__noSuchMethod__ = __parent__");
tryItOut("/*for..in*/for(var prop in <y><z/></y>) with({__parent__: __parent__.__defineGetter__(\"__iterator__\", Function)}){<x><y/></x> }");
tryItOut("/*infloop*/function::prop");
tryItOut("switch(#1=[#1#]) { default: break; break; case this: const prop, prop;case  /x/g :  }");
tryItOut("L: {1e81 }");
tryItOut("__iterator__ = __parent__;");
tryItOut("if( /x/ ) gc() else  if (false :: <x><y/></x>) {const __proto__ = __parent__; }");
tryItOut("const setter");
tryItOut("with\r({__parent__: [,].hasOwnProperty(\"__parent__\")})\n{export __parent__;if(typeof this) {\tlet __proto__;yield; } else {return @foo;yield\ngc() } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in <><x><y/></x></>) {; }");
tryItOut("((-0));");
tryItOut("\tM:if((((<><x><y/></x></>)(1e81) ===  \"\"  !== (-1)) + constructor.prop getter= function(q) { return q; } %  \"\" .unwatch(\"__noSuchMethod__\"))) <ccc:ddd>yyy</ccc:ddd> else  if (__count__ = -1) {return;Math.pow } const prototype;");
tryItOut("/*infloop*/L:for(var __count__; prop.(1e4); new Function(this, constructor)) {break\t ; }");
tryItOut("M:if( /x/g ) (<><x><y/></x></>); else  if (<><x><y/></x></>) export __noSuchMethod__;");
tryItOut("M:if( /x/ ) {export *;return; } else {yield;{} }");
tryItOut("while((<x><y/></x>.*) && 0){continue ;M:while((__proto__) && 0)yield; }");
tryItOut("return __count__.unwatch(\"__parent__\");");
tryItOut("with({}) { for(let y in [5,6,7,8]) for(let y in []); } ");
tryItOut("export *;");
tryItOut("yield 0/0\n");
tryItOut("return ((uneval(3/0)));");
tryItOut("/*for..in*/for(var __iterator__ = <><x><y/></x></> in <x><y/></x>) ;");
tryItOut("if( '' ) {return\n } else  if (new null(__count__, prop)) if(new Function( \"\" )) ; else  if (<y><z/></y> ? <x/> : <><x><y/></x></>) {let prototype = <y><z/></y>; }");
tryItOut("if(<x><y/></x> = [[]] *=  /* Comment */3.141592653589793) return; else  if (this.zzz.zzz) return; else {}");
tryItOut("yield prototype; const __noSuchMethod__;");
tryItOut("while((<x/>) && 0)__proto__ = __proto__;");
tryItOut("/*for..in*/for(__count__ = <x><y/></x> /= @foo /= <y><z/></y> >>> <x/> in [11,12,13,14].filter) {throw <y><z/></y>; }");
