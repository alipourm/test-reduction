tryItOut("\nexport *;\nexport *;\n");
tryItOut("{throw 1e+81; }");
tryItOut("function  prototype () { throw 4.; } \n(<x/>);\n");
tryItOut("with(({a1:1}) in this > <y><z/></y> instanceof  /x/g ){/*for..in*/for(const __proto__ = *::*.__defineGetter__(\"prototype\", function  __parent__ (__proto__, __noSuchMethod__)undefined) in <x><y/></x>) var <x><y/></x> = <y><z/></y>; }");
tryItOut("/*infloop*/L:while((new Iterator())/*\n*/)if(window) { if ([,,])  \"\" ;} else export *\n");
tryItOut("/*for..in*/L:for(const yield = yield window() in __noSuchMethod__) {{} }");
tryItOut("with((yield [,,])){throw <y><z/></y>; }");
tryItOut("/*infloop*/for((__iterator__ = typeof this.__proto__); function  __noSuchMethod__ () { ; } (__proto__); __parent__.__proto__ = __count__ = @foo) {let constructor = <><x><y/></x></>;L\f:do {export constructor;yield 4.; } while((<><x><y/></x></> < <><x><y/></x></>) && 0); }");
tryItOut("var __parent__\n\n");
tryItOut(" default ");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("switch((eval(\"constructor += false\", __noSuchMethod__.__iterator__ = *::*))) { default: break; case 3: case 3: break; case ('fafafa'.replace(/a/g, function () { yield constructor } )): /*for..in*/for(const constructor in ((-1)(<><x><y/></x></>)))gc()break;  }");
tryItOut("if((<><x><y/></x></>)) {(1 for (x in [])) } else  if (<x><y/></x> >>> <y><z/></y>) export __proto__; else {([1,,]); }");
tryItOut("export __noSuchMethod__;/*for..in*/for(constructor =  /x/  in this) {break ;return <><x><y/></x>\f</>; }{;break ; }");
tryItOut("L: {return;<><x><y/></x></>; }");
tryItOut("break \n");
tryItOut("/*infloop*/while(<><> </></>){yield;yield *::*; }");
tryItOut("/*for..in*/for((--prop).valueOf(\"number\")['__noSuchMethod__'] in ((eval)(__noSuchMethod__.__proto__ = <y><z/></y>)))return  /x/ ;");
tryItOut("if(let (__parent__ = false, __noSuchMethod__ = <x><y/></x>) ( \"\" )[<><x><y/></x></>]) {do return [,,z1]; while((__iterator__) && 0); }");
tryItOut("throw StopIteration;");
tryItOut("throw true;");
tryItOut("{;[1,2,3,4].map }");
tryItOut("/*infloop*/while( /x/g  === *)const prop = undefined;");
tryItOut("return; const __iterator__;");
tryItOut("/*infloop*/L:do export __proto__; while( set __count__ constructor ()undefined.throw(true));");
tryItOut("M:switch(this) { default: {} }");
tryItOut("/*infloop*/for(var __proto__ = (<x><y/></x>(({}), *::*)); (new (prototype = <x><y/></x>)((*::*.__lookupGetter__(\"__count__\")))); ({ prototype: [__count__, , constructor], *: ({ constructor: __iterator__, prototype: prototype }) }) = [15,16,17,18].some((Math.pow).apply,  '' )) { { return (yield (({}).hasOwnProperty)(prototype = (-1))) }  }");
tryItOut("/*for..in*/for(__count__(<><x><y/></x></>) in ((function  prototype (__count__) { return window; } )((undefined.hasOwnProperty(\"__parent__\"))))){return *::*; }");
tryItOut("{__count__;/*infloop*/L:for(var __parent__; *::*; *::*) ; }");
tryItOut("/*for..in*/for(let [__proto__, constructor] = ((__noSuchMethod__.(__noSuchMethod__.__iterator__ = window) getter= eval) >> [0x99].hasOwnProperty(\"prototype\")) in *::*) {with({}) { <x><y/></x>; }  }");
tryItOut("if( '' .watch(\"__proto__\", __proto__)) { if (prototype = true\r) let prop; else {const __iterator__ = @foo, __iterator__ = false;export function::x::prop; }}");
tryItOut("/*infloop*/do return; while(<x><y/></x>);");
tryItOut("M:switch(*.__lookupSetter__(\"__count__\")) { default: /*infloop*/while(constructor = ({}).*){export *; }break; return 1.2e3;break; case 0: break; case 3:  }");
tryItOut("if(<><x><y/></x></>) (<><x><y/></x></>); else {let __count__, prop = 0.1;yield true; }");
tryItOut("with(this.__defineSetter__(\"prototype\", (new Function(\"if( \\\"\\\" ) {return; } else {}\"))))break ;");
tryItOut("var function::__parent__ = [z1];");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("/*infloop*/M:for((null)[__iterator__ = true | \rfalse]; prototype.(((Date()) |= [11,12,13,14].filter)); (<y><z/></y>)(__parent__, <x><y/></x>)) {gc()L:if(0/0) gc() }");
tryItOut("{var prop;([z1]); }");
tryItOut("/*infloop*/for(const prototype; (p={}, (p.z = <><x><y/></x></>)()); this.prototype >= (__proto__.__count__)) {({}).hasOwnProperty }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("if(__noSuchMethod__.unwatch(\"__count__\")) *; else  if (<x><y/></x>.propertyIsEnumerable(\"__count__\")) {;{} } else /*infloop*/while((void constructor :: <x><y/></x>)){return <><x><y/></x></>;<x><y/><///h\nx> }");
tryItOut("while(() && 0)return ([*::* != <y><z/></y>/*\n*/ for each (__iterator__ in <><x><y/></x></>) for (prop in <>__proto__</>)]);");
tryItOut("/*infloop*/L:for(const prop; <x/> >= <><x><y/\f></x></>; @foo.hasOwnProperty(\"__proto__\")) gc()const __proto__, constructor = constructor;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var prototype in <y><z/></y>) {export *; const __iterator__; }");
tryItOut("do {const __iterator__ = undefined; } while((((yield *::*))) && 0);");
tryItOut("let (__iterator__, __iterator__) { {let prop; } }");
tryItOut("switch(({ set __parent__ prop (prototype, function::__count__) { return window }  })) { default: break; break; case (({}).valueOf(\"number\").__count__): /*infloop*/for(let [, ({ __iterator__: __noSuchMethod__ }\t), , , ] = 1.2e3.__defineGetter__(\"function::prop\", Math.pow); prototype = [,].@foo; 0x99.__noSuchMethod__) {switch(<y><z/></y>) { default: case 1e81: break; var __noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__ = <><x><y/></x></>;export *;break; export *; } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */try { return 3/0; } catch(__proto__) { []; } finally { yield; } ");
tryItOut("if([, , ] = null.prototype) { if (<><x><y/></x></> <<= <y><z/></y>) {export *; } else yield; const __parent__;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in (#1=({prop//h\n: __parent__}))) {return <><x><y/></x></>; }");
tryItOut("/*infloop*/while((Function).call({}, )){if((<><x><y/></x></>)(null)) yield; else let __proto__; }");
tryItOut("/*infloop*/for(__iterator__; <x><y/></x>.unwatch(\"__proto__\");  ''  for each (__count__ in -3/0)) L: export *\n");
tryItOut("if(@foo) { if (('haha'.split)) {/*for..in*/for(let __proto__ in #1=[#1#]) {export *; }5.0000000000000000000000 } else throw [[1]];}");
tryItOut("/*infloop*/M:for(prototype; prototype%=<y><z/></y> ? (undefined - (false for (__parent__ in @foo))) : ({a1:1}) & @foo; (__iterator__ = <y><z/></y>[[(<x><y/></x>.__count__)].filter('haha'.split)])) yield ({});");
tryItOut("M:if(prototype = (([,,z1])[[,,]] < 0/0)) { if (__count__.__lookupSetter__(\"prop\")) {{}\n }} else {__iterator__;return; }");
tryItOut("M:switch(((constructor.__noSuchMethod__ = this).watch(\"prop\", <x><y/></x>) !== __proto__ = <x><y/></x>)) { case 6: break; const constructor = prototype; }");
tryItOut("/*infloop*/M:do {yield;L: {break ;export __parent__; } }\t while(([eval(\" /x/ \", <x/>)]));");
tryItOut("/*infloop*/for(({__iterator__ getter: 'haha'.split, __parent__: null }) .@*:: eval(\"1.3\", <x><y/></x>); !Array((({ constructor: __count__, prop: __count__ }) = __proto__.constructor), <x><y/></x>\n); [11,12,13,14].sort) if((yield ([1,2,3,4].map).call(false, <><x><y/></x></>))) { if (( /* Comment */.2.prop = (new (function(y) { yield y; throw <><x><y/></x></>;; yield y; })()))) {/*infloop*/L:for(var __iterator__ = [,,z1];  '' ; *::*) {prototype, [,,z1]; } }} else {{} }");
tryItOut("L: /*infloop*/for(({a1:1}); <x><y/></x>;  /x/g ) {yield;export prototype; }");
tryItOut("break L;");
tryItOut("if({}//h\n.__defineGetter__(\"__iterator__\", <x><y/></x>)) { if (({ __noSuchMethod__: __iterator__ }) = <x><y/></x>) gc()} else return;");
tryItOut("let (__proto__ = (this.__defineGetter__(\"prop\", <x/>)), __parent__ = #2=[#1#]) { {const constructor, constructor = <x><y/></x>; } }");
tryItOut("{#1#;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in ([__count__ =  '' ])) {{} }");
tryItOut("if(false) {yield __iterator__; } else  if ((function (prop) { yield false; } .propertyIsEnumerable(\"prop\"))) \n");
tryItOut("export __proto__;");
tryItOut("yield new (__noSuchMethod__.__noSuchMethod__ setter= function  prototype (__parent__, __noSuchMethod__)__parent__)(eval(\"yield;\", ( { L:if(<x><y/></x>) return; else  if (<x/>) {function::prop, __iterator__; } } )));");
tryItOut("{function (__parent__, constructor) { return <x><y/></x> } \nbreak L;\n }");
tryItOut("let (function::prop = <x><y/></x>) { yield; }");
tryItOut("with(<><x><y/></x></>.@foo)return;");
tryItOut("/*infloop*/for(__proto__ = -[<x><y/></x>].filter('haha'.split)--; (__noSuchMethod__.prop = *.throw(({prop: <><x><y/></x\f></>, __noSuchMethod__: <x/> }))); [, , __proto__, , ({ __iterator__: [, \t__iterator__, [, constructor], [], ], __iterator__: constructor })] = ({ __count__: prop })) {__count__ }");
tryItOut("/*infloop*/do return <><x><y/></x></>; while\n( /x/g );");
tryItOut("/*for..in*/for(var [constructor, __iterator__] = <x><y/></x> ^= <x><y/></x> in prototype) eval");
tryItOut("throw prototype;");
tryItOut("return [1];\n/*infloop*/for(constructor = __parent__; constructor; [z1,,]) gc()\n");
tryItOut("{/*for..in*/for(__proto__ = window in ({a1:1})) {continue L; } }");
tryItOut("let(__iterator__) ((function(){for(let y in [5,6,7,8]) for(let y in []);})());");
tryItOut("/*infloop*/L:do \f{return;export *; } while(prototype =  \"\" );");
tryItOut("let(__iterator__) { throw StopIteration; const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in ([1,,] ? <y><z/></y> : .2)) 'haha'.split");
tryItOut("/*infloop*/for(function  prop (__iterator__) { -0 } .yoyo(<><x><y/></x></>).watch(\"__noSuchMethod__\", (1 for (x in []))); ({}); ({prop: 0.1 === <x><y/></x>})) {;\nbreak M;\nM:if(undefined) {return;continue M; } else  if (function ([y]) { }) {break L; } else ; }");
tryItOut("switch(new (eval(\"export *;\", function::__iterator__ = window))) { case 4: break; default: break; break;  }");
tryItOut("for(let y in []);");
tryItOut("if(@foo / <><x><y/></x></>.__defineGetter__(\"__proto__\", function  __iterator__ (constructor, __count__) '' ) ? <><x><y/></x></>.valueOf(\"number\").propertyIsEnumerable(\"__iterator__\") : (('haha'.split).call(@foo, <y><z/></y>, *::*))) { if ((\f%=[11,12,13,14].sort)) {L: {const __noSuchMethod__ = prototype, constructor;(<y><z/></y>); } }} else {if( /x/g ) { if (--) {; } else {var constructor = @foo, __proto__;{gc() } }} }");
tryItOut("/*infloop*/for(var __count__; ([1] ? *::* : <><x><y/></x></>) != yield <><x><y/>\n</x></>; ({const constructor, __proto__ = __parent__ = this;,  get __proto__ prototype () { yield (({__iterator__: <><x><y/></x></>})) }  })) {/*infloop*/do {(*::*); } while(this);return <y><z/></y>; }");
tryItOut("L:with(false){{return;; } }");
tryItOut("/*infloop*/L:for(const __parent__ = #3={a:#3#}.__lookupSetter__(\"prototype\"); (__proto__ = <x><y/></x>); (<x><y/></x>)[<><x><y/></x></>\t]) {yield -3/0; }");
tryItOut("with({__proto__: prototype.__noSuchMethod__ setter= (<x><y/></x>).apply}){var __noSuchMethod__ = -1; }");
tryItOut("switch(<y><z/></y>) { default: break;  }");
tryItOut("while(([ \"\" .*++ if ((<y><z/></y> | <><x><y/></x></>))]) && 0)__proto__;");
tryItOut("M:if(__proto__.__parent__) { if (prototype.__iterator__.*) {continue ;yield; } else {\nthrow __proto__;\n }}");
tryItOut("/*for..in*/for(let (0/0)((-0)) in arguments) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let //h\n[, , , __count__] in  '' ) {(undefined);var false = <><x><y/></x></>; }");
tryItOut("M:if(false.hasOwnProperty(\"__iterator__\")) gc() else  if ((<><x><y/></x></>.watch(\"__noSuchMethod__\",  /x/g ))) {const __parent__ = <x><y/></x>; } else { \"\" ; }");
tryItOut("/*for..in*/L:for((<x/>)(true) in ((function  __iterator__ (prototype) { __proto__ } )(({prototype: false})))){}");
tryItOut("/*for..in*/for((true(<x><y/></x>))([([<><x><y/></x></>].filter([1,2,3,4].map)) if ( '' )]) in ((<x/>.__lookupGetter__(\"__noSuchMethod__\") != ( /x/g .watch(\"prop\", Function)))(this.__defineSetter__(\"function::__count__\", eval)))){yield; }");
tryItOut("if((function (constructor, __noSuchMethod__) { continue ;\f } ) <=  '' .valueOf(\"number\").prototype =  /* Comment */*) let __iterator__, __iterator__;");
tryItOut("while((((<x/>).eval(((p={}, (p.z = <y><z/></y>)()))))) && 0)yield 1e81;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(new Date((constructor.eval(<x><y/></x>)), <><x><y/*\n*//></x></>)){/*for..in*/for(let prop = [] in <x><y/></x>) {gc()yield; } }\n");
tryItOut("if(this.__defineGetter__(\"prototype\", null)) export prototype; else {break ; }");
tryItOut("while((undefined.yoyo(window)) && 0){gc()return <y><z/></y>; }");
tryItOut("{/*for..in*/for(__noSuchMethod__ = +window.watch(\"prop\", function () { yield __count__ } ) in [<><x><y/></x></>].filter((true).watch)) ; }");
tryItOut("/*infloop*/do {throw <x><y/></x>;export prototype; } while(eval(\"( '' .__noSuchMethod__ &= * /= @foo) !== <><x><y/></x></> if ( \\\"\\\" )\\n\", (* << *::*)[(this ^ *::*)]));");
tryItOut("/*infloop*/for(({ __proto__: __noSuchMethod__ }) = <x><y/></x>.__defineGetter__(\"__count__\", function  __iterator__ (__noSuchMethod__, constructor)<y><z/></y>); this.watch(\"prop\", let __count__ = undefined;).isPrototypeOf(<x/> !== *); (<x/>)[<x><y/></x>]) {let __count__, prototype;throw __noSuchMethod__; }");
tryItOut("(prototype) = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><><x><y//h\n/></x></>.__lookupSetter__(\"__proto__\")</> in (({constructor: [,,z1] })--)) {([1,2,3,4].map).call\n/*for..in*/for(var __parent__ in @foo) /*infloop*/for(const __proto__ = false; <><x><y/></x></>; 1e+81) ([,,]);/*for..in*/for(var (prop) in this) /*for..in*/for(const __count__ = __count__ in <y><z/></y>) {;{} }\ncontinue ; }");
tryItOut("if(false.constructor) { if (@foo.__defineSetter__(\"prototype\", @foo)) {yield; } else {gc()let __noSuchMethod__ = __iterator__; }}");
tryItOut("M:if(function (__parent__, constructor) { yield [] } ) { if (let (__iterator__ = *, __count__) <x><y/></x>) {/*infloop*/while(window) } else throw <y><z/></y>;\n}");
tryItOut("var __noSuchMethod__;do return; while((<y><z/></y>) && 0);");
tryItOut("if(function ([y]) { }.__proto__ = constructor) { if (window += <><x><y/></x></>) export *;} else {return;export __proto__; }");
tryItOut("(Math.sin).callcontinue L;");
tryItOut("L:do /*infloop*/for((uneval(*)) @ <x><y/></x>.(@foo)++; (__parent__.function::prototype setter= @foo); __noSuchMethod__.__parent__) {(this); } while(( '' .@foo) && 0);");
tryItOut("L: const prototype, __iterator__ = <x><y/></x>;");
tryItOut("{/*infloop*/for(__proto__ = <><x><y/></x></>; <x/>; <><x><y\f/></x></>) yield <><x><y/></x></>;default: break; case 3: break; break ;break; return <><x><y/></x></>;throw undefined;break; __parent__; }");
tryItOut("let(constructor) ((function(){return;})());");
tryItOut("export __iterator__;do {*::* } while((((<x><y/></x>)([,,z1], <x><y/></x>))) && 0);");
tryItOut("L:with({__parent__: constructor.prop = ([1].propertyIsEnumerable(\"__iterator__\")) @ ({}).hasOwnProperty ? __count__ = [, ] %  /x/  : new Date()}){/*infloop*/for(var __proto__; (<><x><y/></x></>.__defineSetter__(\"prop\", 033)[([15,16,17,18].some(function  __count__ () { var constructor; } ,  /x/g ))]); (true >>= <y><z/></y> * __proto__.__defineSetter__(\"constructor\", function(q) { return q; }) ? this.zzz.zzz : (new  \"\" ( '' )))) return <><x><y/></x></>; }");
tryItOut("with({}) var __count__ = <x><y/></x>;");
tryItOut("if(function(id) { return id }) throw <x/>; else  if (<><x><y/></x></>) {return;let prop; }");
tryItOut("/*infloop*/for(__parent__; ((p={}, (p.z = <x/>.@foo)())); (({1.2e3 getter: Math.pow }))) __iterator__ = 0x99;");
tryItOut("/*infloop*/for(constructor|=.2; [11,12,13,14]\t.filter; (([,])(*, *::*))) {yield;yield; }");
tryItOut("L: break M;const __iterator__;");
tryItOut("__parent__(*::*) = prop;");
tryItOut("if(*::*) { if (*) ({ prototype: __count__ }), __proto__} else {<y><z/></y> }");
tryItOut(" \"\" ");
tryItOut("/*infloop*/for((function ([y]) { })(); (uneval([z1])); prototype =  /x/g ) {{}function (constructor) { yield this }  }");
tryItOut("switch(( \"\" ())) { case (constructor): break; case break L;: export *;break; var __proto__ = __noSuchMethod__;break;  }");
tryItOut("<x/> /= (throw -1)");
tryItOut("if((__proto__.prop = (__count__ + this).throw((this.valueOf(\"number\"))))) {try {  } catch(constructor if __parent__) { break ; } catch(__count__ if (function(){constructor})()) { continue L; } catch(__parent__) { const constructor, __noSuchMethod__; }  } else return 1.3;");
tryItOut("if(033--) {continue ; } else  if (<><x><y/></x></>.propertyIsEnumerable(\"__count__\")) {(prototype).__defineSetter__ }");
tryItOut("yield <x><y/></x>;");
tryItOut("if(<x/>) { if (((4. .. @foo) >>>=Boolean(__count__, <x/>))) {if(<x><y/></x>) { if (*) (<x/>); else {break ; }}function () { yield <><\fx><y/></x></> }  }} else {export *; }");
tryItOut("with({__proto__: <><x><y/></x></>})return;");
tryItOut("");
tryItOut("if((yield <><x><y/></x></>)) return; else  if (prop.__proto__) let prop, __parent__;");
tryItOut("\n");
tryItOut("M:while((((__parent__.throw(4.))[] = [1,,])) && 0){/*infloop*/for(const prop; true; *) yield true;return constructor; }");
tryItOut("/*infloop*/do {if(this.throw\t(null)) { if (<y><z/></y>.__lookupSetter__(\"prop\")) {yield; const __noSuchMethod__; } else {({}).hasOwnProperty }} } while((({}) >> new Math.pow()));");
tryItOut("if(([15,16,17,18].sort( /x/ , typeof <x/>))) export *; else  if (eval(\"false\",  /x/ ) ? <x/> : (<x/>[#1#])) {yield;(new Function(\"\\freturn *;\")) } else {{} }");
tryItOut("/*infloop*/while((uneval(new /a/gi(window) += new Function(<x><y/></x>, undefined)))){; }");
tryItOut("/*for..in*/M:for(constructor in #1#) {yield  /x/g ; } const __proto__;");
tryItOut("__parent__ = prototype;");
tryItOut("/*for..in*/for(<x><y/></x> in window) {(false);{} }");
tryItOut("/*infloop*/L:while(__proto__.constructor getter= function  constructor () { return (<y><z/></y>.hasOwnProperty(\"constructor\")) } ){if(throw true) { if (null) __parent__} else {throw this; }M:do if(this ? 1e+81 : this) {<x><y/></x> (<x/>); } else  if (undefined / @foo) throw <><x><y/></x></>; while(((let constructor, __count__ =  \"\" )) && 0); }");
tryItOut("L:while(((new *\n)++) && 0){export *; }");
tryItOut("/*for..in*/[1,2,3,4].slicefor(const __count__ in ((function(q) { return q; })(null)))default: return;");
tryItOut("/*for..in*/for(let prop in ([prop = <x><y/></x>])) {if(let constructor.__noSuchMethod__) {*::*; }if((this && <><x><y/></x></>)) {export constructor;var __iterator__; } else  if (undefined / <><x><y/></x></>) {} else {__iterator__;gc() } }");
tryItOut("L: export __proto__;");
tryItOut("M:if(0.__lookupSetter__(\"__proto__\")) { if (<x><y/></x> ? #1# : <x><y/></x>) yield 0.1;} else var __proto__, prototype;");
tryItOut("if(window--) return  '' ; else  if ((//h\n{constructor: (yield  /x/ )})) const __count__; else {/*infloop*/for(const __noSuchMethod__; <y><z/></y>; *::*) ; }");
tryItOut("/*infloop*/while(<x/> !==  '' .(({ __iterator__: __iterator__ }) = ({ prototype: __proto__ })))if(new getter = (++null)(--( /x/g [true]))) let (constructor = __iterator__) { export prototype; }\n");
tryItOut("{break L; } window .@*:: <><x><y/></x></>");
tryItOut("throw constructor;");
tryItOut("({}).hasOwnProperty");
tryItOut("if(constructor) { if ((prop-=*::* @ (eval(\"gc()\", [1,,])).*)) (new Function(\"return <><x><y/></x></>;\"))L:do {yield; } while((<x><y/></x>) && 0); else ;}");
tryItOut("if((({constructor: -3/0 }))) export prop; else  if (<><>__count__.__noSuchMethod__</></>) {(<x><y/></x>).apply } else {return; }");
tryItOut("if((__noSuchMethod__)) L:if(this) export *; else  if ( '' ) {export constructor; } else (undefined); else  if ((Function)((new ((__count__))((new Function(\"gc()\")),  ''  >>> function ([y]) { })),  /x/g  |= <x><y/></x>)) { const __iterator__; }");
tryItOut("/*for..in*/for([__iterator__, prop] = __proto__ = __noSuchMethod__ = #1=[#1#] in __count__ = 1e81) this");
tryItOut("gc()\ncontinue ;\n");
tryItOut("/*for..in*/for(const __parent__.__count__ in ((({}).__lookupGetter__)( \"\"  -= this)))throw __parent__;");
tryItOut("/*for..in*/for(let __proto__ in ((new Function)(prop))){return  /x/ ;/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <y><z/></y>) 'haha'.split; }");
tryItOut("/*infloop*/for(const [({ __parent__: __parent__ })] =  /* Comment */(eval(\"@foo\", window)); (\nwindow); *::* in <x><y/></x> .@x:: prop ^ <x><y/></x>) gc()");
tryItOut("/*infloop*/while([, , ({ __noSuchMethod__: ({ prototype: [__noSuchMethod__, prop] }) })] = yield __noSuchMethod__ = <><x><y/></x></>)with(this)<><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [, , , ] in *::*) {return; } const __iterator__;");
tryItOut("if(__proto__ = <y><z/></y>) {{} } else return *;");
tryItOut("L: {with(3/0){(this); }(new Function(\"return *;\")) }");
tryItOut("with({}) let(({ __iterator__: \tconstructor, prototype: constructor }) = <><x><y/></x></>, __iterator__ = window) { throw *::*;");
tryItOut("let (__proto__ = new String(( /* Comment */@foo).watch(\"__count__\", new Function)), ({ __parent__: __iterator__, prototype: [, ({ __parent__: ({ prototype: constructor, yield: prop }) }), , , ({ __noSuchMethod__: function::constructor, x::__count__: ({ __count__: __proto__ }) })] })) { let(__iterator__) ((function(){with({}) { const __iterator__ = [1,,]; } })()); }");
tryItOut("break M");
tryItOut("if([1e+81].map((1 for (x in [])))) {yield __noSuchMethod__;const __noSuchMethod__, __proto__ = prototype; } else  if (<><{__noSuchMethod__}></{__noSuchMethod__}></>) export prop; else yield;");
tryItOut("if((~4.)) {export *; } else  if (((function(q) { return q; }).apply).call(((p={}, (p.z = [[]])())), )) {const __parent__, __count__;export constructor; } else __count__ = <x><y/></\fx>, __parent__;");
tryItOut("/*for..in*/for([__count__, __count__] = (undefined.propertyIsEnumerable(\"constructor\")) * (({}) ? * : null) in (function(y) { yield y; var __noSuchMethod__ = null, prototype = __iterator__;; yield y; }).call(false, (([15,16,17,18].sort(({}).__lookupGetter__, <><x><y/></x></>)).watch(\"__count__\", <x><y/></x>)))) try { let(__parent__ = 3/0, new Function) { var __count__ = -0; } finally { let(__proto__, __proto__) { export constructor; } ");
tryItOut("switch((prototype)) { case 5:  }");
tryItOut("M:do {prop = null, __proto__;{} } while((@foo) && 0);");
tryItOut("{}");
tryItOut("/*for..in*/for(__iterator__ in (('haha'.split)(<><x><y/></x></>)));");
tryItOut("return\n{throw (__count__[ /x/ ]); }");
tryItOut("/*infloop*/do {if(#0=({__noSuchMethod__: __noSuchMethod__ =  '' })) { if (([[]]())) } else {const __parent__ = <y><z/></y>, __proto__ = <x><y/></x>; } } while(constructor.__noSuchMethod__%=(this.zzz.zzz));");
tryItOut("L:if(this.__lookupSetter__(\"constructor\")) { if ((<x/> ||  /x/g )) const prop, constructor = 1.2e3; else break L;}");
tryItOut("while(((new function  __iterator__ ()(__proto__ =  '' )())) && 0){let __proto__ = constructor;(undefined); }");
tryItOut("export *\n\n");
tryItOut("/*infloop*/for(let (eval(\"let prototype = <y><z/></y>, __proto__;\", (<x><y/></x>.valueOf(\"number\"))))(__parent__ >>>=undefined.__defineSetter__(\"prototype\", Math.sin)) = this; prototype.__noSuchMethod__ = undefined; 'fafafa'.replace(/a/g, (([11,12,13,14].some)()))) {/*for..in*/for([prototype, __iterator__] = this.__defineSetter__(\"prop\", function (__parent__, __iterator__) { return __iterator__ } ) in this) let prototype, __proto__;/*for..in*/for(var [, prototype] = window.prop in window) {(<x/>); } }");
tryItOut("for(let y in [5,6,7,8]) with({}) try { return; } catch(prototype if -[,,z1].valueOf(\"number\")) { for(let y in [5,6,7,8]) const ; } catch(__parent__) { this.zzz.zzz; } finally { throw x::prop; } ");
tryItOut("/*for..in*/for(const __count__(__proto__ = [[]]) in ((({}).__lookupGetter__)('fafafa'./*\n*/replace(/a/g, function(y) { yield y; export *;; yield y; }).__defineGetter__(\"prototype\", .2.__lookupSetter__(\"__count__\")))))L:while((*::*[window]) && 0)");
tryItOut("{let (__count__ = [[1]], __proto__)let __parent__, __iterator__\t; } }");
tryItOut("return;");
tryItOut("/*infloop*/for(\flet prototype; (#2=<x><y/></x>); [15,16,17,18].map(Math.sin, ({__noSuchMethod__: <><x><y/></x></>, __iterator__ getter: window }))) ");
tryItOut("break \n/*for..in*/for(var [__iterator__, __noSuchMethod__] = (<x><y/></x>.(window)) in <><x><y/></x></>) const __noSuchMethod__, __count__ = this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in [1]) {yield;gc() }");
tryItOut("/*infloop*/M:do /*infloop*/L:for(var __count__;  /x/g ; <x><y/></x>) {gc()export *; } while(( /* Comment */(undefined in <><x><y/></x></>)));");
tryItOut("if(([[1]].watch(\"*::*\", function () { yield arguments; } ))) {return;; } else  if (this.zzz.zzz) { } else {export __noSuchMethod__;yield //h\n{return undefined; }; } const __proto__;");
tryItOut("(<x\r><y/></x>);");
tryItOut("/*infloop*/for(const prototype; constructor = window.__iterator__; (__iterator__ = __parent__.__lookupSetter__(\"prototype\"))) {gc() }\n{}\n");
tryItOut("{M:if(<><x><y/></x></>) {{} } else { (new Function(\"export *;\")) case 9: gc()break; case 3: constructor;break;  }  L: (<x><y/></x>); }");
tryItOut("if(* .@ this) (new Function(\"export __parent__;\")) else  if (__parent__ = <><x><y/></x></>) {{} } else {__count__ = __proto__;export *; }");
tryItOut("with([11,12,13,14].filter)if(__count__ = __proto__) [1,2,3,4].slice");
tryItOut("M:if(0/0 ^= [1]) {{return\n }export *; }");
