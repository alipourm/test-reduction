tryItOut("{ const __noSuchMethod__; }");
tryItOut(";");
tryItOut("M:if(*::*) gc() else  if (*::*) return <y><z/></y>;");
tryItOut("try { return; } catch(__parent__, prop if (function(){with({}) {  } })()) { for(let y in [5,6,7,8]) #1=[#1#]; } catch(prop if <><bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb></>) { this.zzz.zzz; } finally { this.zzz.zzz; } ");
tryItOut("return ({a1:1})");
tryItOut("do const constructor = ({}), prototype = __iterator__; while((window) && 0);");
tryItOut("{(-3/0); }");
tryItOut("if((new (Function)((this.__defineSetter__(\"default: break; case 0: <x><y/></x>\", Math.sin)) <= (\r{ __noSuchMethod__: [] }) = __parent__|=<x/>.watch(\"constructor\", function (__proto__, __parent__) { yield 033 } ),  /x/g ))) throw constructor;");
tryItOut("if(\n[,,]) {export setter;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((default: break; case  /x/g .@*: if(__noSuchMethod__) __noSuchMethod__ else (window);break; ) in let (delete) <employee id=\"1\"><name>Joe</name><age>20</age></employee> = <x/>) {gc() }");
tryItOut("__parent__ = __count__;");
tryItOut("/*infloop*/for(let ({ prop: prototype }) = ((getter).call(this, prototype, <x><y/></x>) == undefined = __parent__.@*); ((p={}, (p.z = <x><y/></x>)())).valueOf(\"number\"); prototype) /*for..in*/for(const (true)(#1#) in ((Math.pow)((new (({}).hasOwnProperty).call(this)))))( '' );");
tryItOut("/*infloop*/while((({a1:1})--)){export __iterator__;\f }");
tryItOut("let (__parent__) { throw  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __count__['prototype'] in ((((uneval(<x/>)).__lookupSetter__(\"__proto__\")))[prototype])) {if(<x><y\n/></x>) {gc } const __count__;{} }");
tryItOut("while(((-new Function())) && 0){return *::*; }");
tryItOut("/*infloop*/L:while(RegExp((yield window))){const __parent__ = 4., __noSuchMethod__ = <x><y/></x>; }\n");
tryItOut("prop, prop;");
tryItOut("while(({M:if(false) { if (\f<x><y/></x>) ;} else {yield; } }) && 0)if((__proto__ = <x\t><y/></x>) ? <y><z/></y>.propertyIsEnumerable(\"prop\") : <x><y/></x>.__lookupSetter__(\"__iterator__\")) export prop; else  if ([15,16,17,18].sort(/a/gi, <x><y/></x>.(0.1))) continue ; else switch([1]) { case window: if(__proto__) break ; else  if (true) throw <x><y/></x>; else {return <x><y/></x>; }break;  }");
tryItOut("/*infloop*/for(__count__; ({ set __noSuchMethod__ __count__ () { prototype, __iterator__; } , constructor getter: function (constructor) { yield  /x/g .throw(<x><y/></x>) }  }); (#2=({__proto__: constructor = <><x><y/></x></>}))) gc()");
tryItOut("let(function::prop) ((function(){(*).watch})());");
tryItOut("with(__noSuchMethod__){yield <><x><y/></x></>; }");
tryItOut("return;");
tryItOut("/*for..in*/for(__iterator__ in ((Math.sin)(1.2e3.prop))){/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in (function ([y]) { })()) {yield <x/>;continue M; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in [].unwatch(\"__iterator__\").propertyIsEnumerable(\"prop\")) /*infloop*/do throw <x/>; while(this.__lookupSetter__(\"prop\"));");
tryItOut("M:if((-<><x><y/></<employee id=\"1\"><name>Joe</name><age>20</age></employee>x></>)) {; } else  if (*::*.__lookupGetter__(\"__iterator__\")) {/a/gi } else yield __proto__;");
tryItOut(";");
tryItOut("let (__proto__) { (undefined); }");
tryItOut("/*infloop*/for(let ({ __iterator__: __noSuchMethod__ }) = __count__ = undefined; new (constructor)(<x/>); <><x><y/></x></>.hasOwnProperty(\"__proto__\")) {return <y><z/></y>;(Math.pow).apply }\nreturn;");
tryItOut("M:if(<x><y/></x>.throw(<x><y/></x>)) { if ([{gc()).call }].filter(({}).hasOwnProperty)) {window.__lookupSetter__(\"__noSuchMethod__\"); }} else ");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const __iterator__.prop in  \"\" ) {gc() }");
tryItOut("throw ");
tryItOut("while((function::constructor) && 0)<><x><y/></x></>;");
tryItOut("{{@foo } }");
tryItOut("try { <x><y/></x>; } finally { throw this; } ");
tryItOut("L:with({__noSuchMethod__: (false.__lookupSetter__(\"__proto__\")) | new ( /* Comment */0)()}){/*infloop*/for(var __noSuchMethod__; ({__iterator__: prop }); [11,12,13,14].filter) {export constructor;throw <><x><y/></x></>; } }");
tryItOut("let (__noSuchMethod__ = ((p={}, (p.z = (new (#3={a:#3#})(window, *::*)))()))) { for(let y in [5,6,7,8]) with({}) { <x><y/></x>; }  }");
tryItOut("<x><y/></x>['__count__'] = __proto__;");
tryItOut("with(<y><z/></y>\r.prototype)let (prototype) { yield; }");
tryItOut("with({__parent__: *::*}){throw __iterator__; }");
tryItOut("return;");
tryItOut("{if(__noSuchMethod__ = prototype) {var prop;yield; } else  if (__count__.propertyIsEnumerable(\"__iterator__\")) {let __count__ = <><x><y/></x></>, __proto__ = <x><y/></x>; } }");
tryItOut("if( /x/g ) { if ([[]]) true;\t} else export *;");
tryItOut("/*infloop*/do  while((\r[11,12,13,14].some));");
tryItOut("L:switch(__parent__.__defineSetter__(\"__count__\", (<><x><y/></x></>).apply)) { default: break; break; case 0: L: continue M;break; case new (this :: null)(new <x/>()): break; break; case __iterator__.__lookupSetter__(\"__count__\"): let getter, __count__;break;  }");
tryItOut("/*infloop*/L:for(let prototype = <x><y/></x>; <x><y/></x>; <x/>) yield <x/>;");
tryItOut("while((<y><z/></y>) && 0){throw <y><z/></y>;; }");
tryItOut("do const \t__proto__, __iterator__; while((<><x><y/></x></>) && 0);");
tryItOut("with((([window])[undefined])\n){ /x/g ; }");
tryItOut("return @foo;");
tryItOut("{/*for..in*/for(const __proto__ in ((false)(undefined))){let prop;throw this; }return; }");
tryItOut("{throw *; }");
tryItOut("M:switch((<x/> for (__parent__ in <><x><y/></x>/*\n*/</>) for (__count__ in *::*) for each (__count__ in false))) { default: break;  }");
tryItOut("for(let y in []);");
tryItOut("yield;");
tryItOut("{/*for..in*/for(var __noSuchMethod__ in <x><y/></x>) {yield ({});{} } }");
tryItOut("({ __noSuchMethod__: ({ constructor: [], __count__: [, ] }) })");
tryItOut("yield window;");
tryItOut("for(let y in [5,6,7,8]) with({}) { return; } ");
tryItOut("return [] << __count__;");
tryItOut("do /*infloop*/for(__count__; __iterator__; <><x><y/></x></>) {const __noSuchMethod__; } while((<x/>[((uneval(<x><y/></x>)))]) && 0);");
tryItOut("/*infloop*/M:for(prop.isPrototypeOf(<x><y/></x>); (export *; >> <x><y/></x>); <x><y/></x> @ <x/>) {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in -3/0) yield; }");
tryItOut("/*infloop*/while((yield <y><z/></y> >>> <x><y/></x>))yield;");
tryItOut("/*infloop*/for(const __iterator__ = (({__count__: [,,z1], __parent__ getter: function  __iterator__ (__count__, __parent__) { return <x><y/></x> }  }), <><x><y/></x></>)[( /* Comment */({}).valueOf(\"number\"))]; -undefined; (this.isPrototypeOf(__iterator__).__count__)) {(__count__.__parent__.eval(__count__)) }");
tryItOut("if(new (1e4)(prototype = (<x><y/></x>.__defineSetter__(\"__count__\", ({}).hasOwnProperty)) - <bbb xmlns=\"*::*\"><ccc:ddd><!--yy--></ccc:ddd></bbb>\f, ([, , __count__.constructor] = (Math.pow)(<x><y/></x>(prototype = @foo, __iterator__ = [1,,]))))) ");
tryItOut(";");
tryItOut("this.zzz.zzz;");
tryItOut("with({prototype: ([new false for each (<><x><y/></x></> in )].unwatch(\"__iterator__\"))}){do return *; while((delete  /x/ ) && 0);let (__count__) { Math.sin } }");
tryItOut("switch(this.__defineGetter__(\"__parent__\", function (__noSuchMethod__, __iterator__) { const constructor = *::*; } )) { case 3: break; case <><x><y/></x></>\n: truebreak; case 2: default: const __iterator__ = __parent__, @foo;break; case 6: yield *::*;break; const __iterator__ = <x><y/></x>;{}break; case (undefined): case  ''  !== __parent__:  }");
tryItOut("/*infloop*/for(var __count__ = ([null for each (prop in __iterator__) for each (__noSuchMethod__ in  /x/g )]); ((new Function(\"return;\")))( '' , <><x><y/></x></>); ) if(true) {var __count__;; } else {false;; }");
tryItOut("do /*for..in*/for(let __iterator__ in <x><y/></x>) { } while(((__count__.__count__ setter= [z1,,])) && 0);");
tryItOut("/*infloop*/L:for(const prototype; *::*.eval( /x/g ); (({ set prototype function::__parent__ (constructor, __parent__) { yield *::*.valueOf(\"number\") }  }))) /*for..in*/for([15,16,17,18].sort(function (prop) { yield window } , <><x><y/></x></>) in ((\nMath.pow)(null.hasOwnProperty(\"constructor\"))))continue ;");
tryItOut("<x><y/></x>; const __noSuchMethod__;");
tryItOut("if(<bbb xmlns:ccc=\"new Boolean([({}) for (__proto__ in (function ([y]) { })())], <><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb>.(__count__ = true)) {gc()yield undefined; } else  if ([__count__ = <x><y/></x>](__proto__.__defineSetter__(\"prototype\", window).@*, __parent__ = delete true)) {} else {getter = prop, prop = __proto__;export *; }");
tryItOut("/*infloop*/for(prototype = <y><z/></y>; (yield this.zzz.zzz.__lookupSetter__(\"constructor\")).watch(\"__noSuchMethod__\", [-0].map(function  constructor (prop) { yield 0.1 } )); ((this)[null].*) for (__iterator__ in prototype) if (arguments)) {<x><y/></x>return; }");
tryItOut("if(eval(\"null\", 1e81)) { if ((Math.sin).call([<><x><y/></x></>].filter(((([1,2,3,4].map).apply).call).call), yyy\n, this)) {/*infloop*/for(constructor = *; <><x><y///h\n></x></>\t; ({})) {yield false; }const __noSuchMethod__ = <x><y/></x>; } else gc()}");
tryItOut(" for each (prop in <><x><y/></x></> >> new undefined(<x/>, <x/>)) if (delete <y><z/></y>)");
tryItOut("do {/*infloop*/for(<y><z/></y> %= [,,z1]; <y><z/></y>.throw(<x><y/></x>); (<y><z/></y>[this])) export __parent__; } while(((3/0.__defineSetter__(\"__proto__\", function(y) { yield y; constructor = <y><z/></y>, __proto__;; yield y; }).@* ? (prototype.__proto__ getter= new Function ^= __iterator__ != -1) : __count__.constructor)) && 0);");
tryItOut("return;");
tryItOut("while(((yield  \"\" ).*) && 0){}");
tryItOut("/*infloop*/do {return *;export constructor; } while(<x/>);");
tryItOut("if(++(let __parent__ = function(y) { yield y; const prop, __parent__ = <><x><y/></x></>;; yield y; }; =  '' )) {;throw [z1,,]; } else {const __parent__; }");
tryItOut("for(let y in [5,6,7,8]) let(__proto__ = <x><y/></x> ^ this) ((function(){return;})());");
tryItOut("M:switch(033) { case 0: return 3; }");
tryItOut("let(prop = 3, prototype = null) { continue ;");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(__iterator__.__parent__) {;Math.sin\nwith(true){gc()Function } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in __parent__) ([1,,]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor((prop = <y><z/></y>, return prototype; =  '' )) in (null = let (__iterator__, __iterator__) (__noSuchMethod__.constructor)).unwatch(\"__iterator__\")) with( '' .watch(\"__proto__\", Math.pow)){return prototype;throw *; }");
tryItOut("while((this.valueOf(\"number\")) && 0){{} const prototype; }");
tryItOut("while((\n '' .propertyIsEnumerable(\"__iterator__\")) && 0){/*for..in*/M:for(const __iterator__ in ((function  prototype () { yield (function ([y]) { })() } )(this))){throw <><x><y/></x></>; } }");
tryItOut("export constructor");
tryItOut("if(Date()) {{} } else  if (__count__((<x><y/></x>.unwatch(\"prop\"))) = ({__count__: this})) {export prop; } else yield  /* Comment */prop;");
tryItOut("let(__iterator__) ((function(){let(prototype = constructor, [, ]) { throw prototype;})()); const __parent__;");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var \t__parent__ in <><x>y/></x</>) <y><z/></y>");
tryItOut("var prop = undefined, constructor");
tryItOut("return <><x><y/></x></> << #1#;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in x::prototype = ) {;if(null) let __count__ = <><x><y/></x></>, __parent__; else  if (*) {__noSuchMethod__; } }");
tryItOut("M:with(this.__defineSetter__(\"__parent__\", function(y) { yield y; throw true;; yield y; })){{} }");
tryItOut("L:with({__noSuchMethod__: (-1 || ({a1:1})) , (((new Function(\"yield;\"))).call(null, ))}){M:with({__count__: <x><y/></x>.(__iterator__)})gc() }");
tryItOut("with({}) throw StopIteration;");
tryItOut("export {}");
tryItOut("throw <x/>;");
tryItOut("break ;");
tryItOut("function (prototype)this\nwindow;\n");
tryItOut("M:with((constructor = __count__))gc()");
tryItOut("let (({ let: prototype }), __iterator__ = <y><z/></y>) { {} }");
tryItOut("/*infloop*/for(__proto__; null; ((p={}, (p.z = false)()))) return;");
tryItOut("M:while(((((1 for (x in []))).call( /x/g .__defineSetter__(\";\", /a/gi), (('haha'.split).call).call( /x/ , <x/>), false))) && 0){(Math.sin).apply/*infloop*/for( /x/g ; this; <y><z/></y>) throw __proto__; }");
tryItOut("/*infloop*/M:do {export prototype;throw \f*::*; } while(@foo.valueOf(\"number\").watch(\"prop\", Function).constructor);");
tryItOut("M:switch(((p={}, (p.z = *::*)())).__lookupGetter__(\"__noSuchMethod__\")) { default: if(constructor) { if (this) {export __noSuchMethod__; }} else {var __noSuchMethod__ = [[]], __count__ = function(id) { return id };export constructor; const __count__; }case ((new <y><z/></y>()).watch(\"__iterator__\", <><x><y/></x></>)): case 8: break L;break;  }");
tryItOut("/*infloop*/for(<bbb xmlns=\"<x><y/></x>\n\"> </bbb>; __count__.((yield true)); (yield  '' \n)) {(constructor); }");
tryItOut("yield\nthrow *::*\n");
tryItOut("yield (<><x><y/></x></>.__proto__++);");
tryItOut("var __parent__ = this;");
tryItOut("{window;let prototype, __iterator__; }");
tryItOut("with((<x><y/></x>.__proto__.__lookupSetter__(\"__noSuchMethod__\"))){export __count__;if(<x><y/></x>) { if (window) {{} }} else return; }");
tryItOut("/*infloop*/do if(__count__.watch(\"__parent__\", function  __count__ () { return 4. } )) { if (__noSuchMethod__) {yield undefined;var __parent__; } else <x/>;} while(null);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in <><x><y/></x></>.__parent__) {do export *; while(((Boolean(window, 0))) && 0);continue ; }");
tryItOut("/*for..in*/M:for(let [__iterator__, __parent__] = constructor in <x><y/></x>) prop;");
tryItOut("M:switch(__proto__) { case 4: throw *; }");
tryItOut("/*for..in*/L:for(const prototype.__iterator__ in @foo) constructor setter: Math.pow");
tryItOut("if((<x><y/></x> *  /x/ )) { if ((prop.__count__ setter= new Function)) throw (\t#1=[#1#].__defineGetter__(\"prototype\", new Function))[(this.throw( /x/g ))]; else {/*for..in*/for(var [prototype, __noSuchMethod__] = 0x99 in __parent__) gc }}");
tryItOut("const __iterator__ = __count__, prop;\n/*infloop*/do (false); while(this);\n");
tryItOut("try { return prop =  ''  *= false; } catch(prototype if (function(){prop = __count__;})()) { \f<x><y/></x>['__proto__'] = \t__parent__; } ");
tryItOut("(*); const __iterator__;");
tryItOut("if([11,12,13,14].some.throw(new <>continue ;</>(<><x><y/></x></>))) { if (function ([y]) { }.propertyIsEnumerable(\"constructor\")) yield; else {export *; }}");
tryItOut("/*infloop*/for(__proto__; prop = __parent__-=<y><z/></y>; <x/>) (this);");
tryItOut("throw constructor;");
tryItOut("M:while((constructor) && 0)let __proto__, prototype;");
tryItOut("/*for..in*/for(const __count__ in 5.0000000000000000000000) {{} }");
tryItOut("if((uneval(constructor = [1,2,3,4].map))) { if (<x><y/></x> * false) {return; }} else (<x/>);");
tryItOut("/*for..in*/for(var constructor in set = <><x><y/></x></>) let (__count__ =  '' ) { {} }");
tryItOut("/*infloop*/while((prop.prop getter= 'haha'.split)){ }");
tryItOut("if((<x/>.__defineGetter__(\"function::prop\", function  constructor (__noSuchMethod__, prototype) { yield false } ))) <y><z/></y> else {return 1e4;throw [1,,]; }");
tryItOut("{(1e+81); }");
tryItOut("yield;\nexport prototype;\n");
tryItOut("if([[1]]) {try { let __iterator__, __iterator__; } catch(__iterator__) { yield 033; } finally { export __proto__; }  }");
tryItOut("gc()");
tryItOut("{export *\nprototype = constructor; }");
tryItOut("/*infloop*/for(__noSuchMethod__; prototype .@*:: <y><z/></y>; yield this.__noSuchMethod__) yield;");
tryItOut("this.zzz.zzz;");
tryItOut("switch(<><x><y/></x></>) { default:  }");
tryItOut("/*infloop*/L:for(const __iterator__; (__iterator__.constructor = #0=({__iterator__: ({__proto__:  /x/  })}) .@x:: (<x><y/></x>++)); (Date())) gc()");
tryItOut("{}");
tryItOut("/*infloop*/for(var [, , (__noSuchMethod__), [[__proto__], ], __count__] = <x><y/></x>.(__noSuchMethod__); yield null\n; 0/0) {const __noSuchMethod__;window }");
tryItOut("M:while((let (__parent__ = <x><y/></x>) prototype) && 0){*::*;export *; }");
tryItOut("with({__noSuchMethod__: ((*.prototype).call((5.0000000000000000000000 && this), ) for each (__proto__ in __iterator__ =  '' ) for (constructor in <x><y/></x>\f) for each (function::__count__ in undefined) for (__noSuchMethod__ in <y><z/></y>))}){/*infloop*/for([constructor, ({ __proto__: ({ __noSuchMethod__: __count__ }), prototype: ({ <xxx {prop}={new (@foo)(*::*)} />: __proto__ }) })\f] = ({a1:1}).propertyIsEnumerable(\"window\") &= this.@*; ({prop: this.zzz.zzz >>>=(<><x><y/></x></>.unwatch(\"constructor\")) }); <x/> for (constructor in  /x/ )) throw null; }");
tryItOut("L:with({__parent__: <x/>.constructor = new ([1,2,3,4].slice)((yield this), <x><y/></x>)}){yield\n }");
tryItOut("L:if((+[,])) {{}return; } else  if ((uneval((yield prop = prop)))) {(1e81())/*for..in*/for(let __parent__ in [,,]) {{}let __parent__; } }");
tryItOut("\twith((__parent__ = -0))/*for..in*/for(let constructor = constructor in  /x/g ) {yield; }");
tryItOut("M:if(({__count__ setter: new Function,  set prototype prototype (__count__, __noSuchMethod__) { return prototype }  })) { if (window) (<x><y/></x>).watch else {{} }}");
tryItOut("if((* + undefined.yoyo((true , true)))) { if (null) {return; }} else {<y><z/></y>;prototype; }");
tryItOut("/*infloop*/L:for(var [__parent__] = <x><y/></x>; 1e-81.hasOwnProperty(\"__count__\"); ((prop)(<x/>))) {gc() }");
tryItOut("/*for..in*/L:for(let [__iterator__, prop] = ([15,16,17,18].filter ({ __proto__: function::prototype }), prop =  /x/g .eval(1e81) (function  __noSuchMethod__ (each) { yield *::* } __parent__.prop <><x><y/></x></>.unwatch(\"__parent__\").unwatch(\"__count__\"))) & (this.__defineGetter__(\"prototype\", [[1]])).watch(\"__proto__\", [1,2,3,4].slice) in ({__iterator__: [constructor, __noSuchMethod__, __parent__, ] =  /x/g  @ true})) \n{constructor = __parent__; }");
tryItOut("return;");
tryItOut("M:do {export __parent__;return __proto__; } while((((__count__ = window).valueOf(\"number\"))) && 0);");
tryItOut("with({}) { yield; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in null) {return;yield arguments; }");
tryItOut("<><x><y/></x></>;");
tryItOut("L:while((__parent__) && 0){/*for..in*/for(var var __parent__, prop; in 1.3) var __iterator__, __noSuchMethod__ = -3/0;export prototype; }");
tryItOut("if(((export constructor for ([__iterator__] in false) for (__iterator__ in <x><y/></x>) if (true)))) { if (([constructor, __count__] = __iterator__: [1])) {export *; } else export prototype;}");
tryItOut("/*infloop*/do {yield <x><y/></x>;throw this;let (constructor = ({}), __parent__ = <x><y/></x>) { throw <><x><y/></x></>; } } while(((Math.pow)()));");
tryItOut("/*for..in*/for(var [prop, prop] = __noSuchMethod__ = __proto__ ? (* for (constructor in null)) : [,,] || -0 in (*)[<x><y/></x>]) {let __noSuchMethod__; }");
tryItOut("/*infloop*/for(let ({ constructor: ({ __proto__: ({ prototype: ({ __proto__: __iterator__, prototype: __count__ }), __count__: ({ __proto__: constructor, __parent__: __proto__ }) }) }) }) = <x/>; prototype = this; window ^= [1,,].constructor = []) {return  '' ;\nexport *;\n }");
tryItOut("throw window;");
tryItOut("/*for..in*/for(var __parent__ in ((Math.pow)(window))){let prop = <x><y/></x>; }");
tryItOut("with((#2=RegExp([__proto__], <><x><y/></x></>))){}");
tryItOut("if(<x><y/></x>.eval( \"\" )) { if ((<><x><y/></x></> for each (prototype in 3.141592653589793))) {L:if([ /x/g  if (<x><y/></x>)]) (<x/>); else  if (@foo) Math.pow else ({}).__lookupGetter__ } else {}}");
tryItOut("if(((<><x/></>)((__count__.__noSuchMethod__ = __iterator__)) = -break M)) { if (([null]).unwatch(\"__parent__\")) {export prototype;/*for..in*/L:for(const prototype = this.zzz.zzz in <><x><y/></x></>) {export *;null; } }} else {{const __count__, __iterator__;return <><x><y/></x></>; }with(delete [z1]){if(__parent__) { if (<x><y/></x>) {function  __noSuchMethod__ () { yield <><x><y/></x></> }  }} else {let __iterator__, __iterator__ = this;export __iterator__; } } }");
tryItOut("/*infloop*/L:while((new Function).call(prop, __proto__.watch(\"__iterator__\", ( '' ).__defineSetter__), undefined++)){<y><z/></y> }");
tryItOut("if((({ set __count__ constructor (get, __proto__)function ([y]) { }, constructor: (RegExp()) }))) { if (3[<x/>.__lookupSetter__(\"prop\")]) /*for..in*/M:for(const [, __noSuchMethod__] = <x/> in 3/0) {__count__ = [,], __proto__;export *; }} else if(@foo) yield; else  if (true) {export *; } else {(prop);return [1,,]; }");
tryItOut("/*infloop*/while(((new Function(\"\"))\f).call(__count__.(this), new (<x><y/></x>)())){{}yield }");
tryItOut("/*infloop*/for(const constructor; (__iterator__((this.__defineGetter__(\"__parent__\", <y><z/></y>))(<x><y/></x>.unwatch(\"__noSuchMethod__\").valueOf(\"number\"), (true.throw(null)))).apply).call( /x/ .watch(\"__count__\", ({}).__lookupGetter__).@foo,  with({}) { throw __parent__; } ) \x7f ; ((-1 for each (__noSuchMethod__ in <y><z/></y>) if ( '' )) &= (+<x/> .@x:: (__iterator__.constructor = <y><z/></y>).__lookupGetter__(\"prototype\")))) /*infloop*/while(<x><y/></x>)(false);");
tryItOut("/*infloop*/for(const __count__;  \"\" ; (({ set __iterator__ __count__ ()this.setter }))) {}");
tryItOut("\ffunction  __proto__ (__noSuchMethod__) { yield (function(y) { yield y; for(let y in []);; yield y; }).call((3.141592653589793.isPrototypeOf(*::*)), let (prototype) <x><y/></x>) } ");
tryItOut("M:with({__iterator__:  '' })gc()");
tryItOut("/*infloop*/while(prop = (new [1,2,3,4].map())){/*infloop*/L:for(new (__noSuchMethod__.(*))(<y><z/></y>, 0/0); __parent__ = prop; __parent__) {__iterator__ = __proto__; } }");
tryItOut("/*infloop*/for(const ({ {}: ({ __parent__: [], constructor: ({ __iterator__: [], __parent__: ({ __proto__: [, ], __parent__: [] }) }) }), __proto__: [, , , , ] }) = <y><z/></y>; new this.__noSuchMethod__; ((uneval((this instanceof window))))) gc()");
tryItOut("if(function(id) { return id }.__defineSetter__(\"prop\", [1,2,3,4].map)) {prototype = function::constructor(), function::__noSuchMethod__return; } else  if ((--window)) let (constructor) { throw false; } else ");
tryItOut("/*for..in*/for(const __proto__ in __parent__ = null\f ? ([] >= <x><y/></x>) : (prop = -3/0) ^ ( /* Comment */*::*)) {return\nif(*) { if (<x><y/></x>) {yield *;\f } else {; }} }");
tryItOut("/*for..in*/for(var __iterator__ in ((function  function::__iterator__ (__count__, __parent__) { return __iterator__ ? <><x><y/></x></> : -0 } )(this.__defineGetter__(\"prop\", /a/gi))))throw null;");
tryItOut("return;");
tryItOut("let (function::constructor) { L: {/*for..in*/for(const __iterator__ in (('haha'.split)(undefined))){} } }");
tryItOut("/*for..in*/M:for(let prototype = ((#2=({__count__: *})) ? window :  /x/ ) in (p={}, (p.z = -0)()).@*) {__noSuchMethod__-=<x/>.prop.__defineSetter__(\"__proto__\", function(q) { return q; }); }");
tryItOut("with(yield typeof prototype)const constructor = <x/>, __parent__ = @foo;");
tryItOut("while((true.throw(([15,16,17,18].sort(false, .2)))) && 0)L: {(true); }");
tryItOut("L: {L: export *; }");
tryItOut("let (__proto__ = ( '' [null])) { switch(<y><z/></y>.__noSuchMethod__) { default: var prop =  '' , prop = <><x><y/\t></x></>;break; null; } }\nlet(__proto__, const __noSuchMethod__; = [1]) { yield;");
tryItOut("break M;");
tryItOut("for(let y in []);");
tryItOut("do {{} } while((* , <x><y/></x>) && 0);");
tryItOut("/*for..in*/L:for(const ((({ prop: ({ prop: __proto__ }), constructor: ({ prop: __iterator__ }) }) = constructor = undefined))((prop|= /x/ )) in \f(function(y) { yield y; ; yield y; })()) {L:switch(eval(\" '' .__defineSetter__(\\\"prototype\\\", prop)\", __proto__)) { case __proto__ = <x/>: if(<y><z/></y>) { if (@foo) (-0); else {return; }}break; case 0:  }/*for..in*/for(__parent__ = [(uneval(__parent__)) && prop.prop getter= function  __iterator__ ()__iterator__].sort(Math.pow) in [z1]) constructor = <x><y/></x>, prop; } const __noSuchMethod__;");
tryItOut("let prototype = this, constructor =  \"\" ;");
tryItOut("/*for..in*/for(__noSuchMethod__ = (Function([<><x><y/></x></>].some((1 for (x in []))))) in <x><y/></x>.* - new (this)(__iterator__, 1.3)) {yield this; }");
tryItOut("if(((<y><z/></y> for (prototype in <x/>)))) {return;yield this; } else  if (({prototype: <><x><y/></x></>}).__lookupGetter__(\"__iterator__\")) {}");
tryItOut("let (prop, __parent__) { this.zzz.zzz; }");
tryItOut("/*for..in*/M:for(var [prop, __parent__] = delete <y><z/></y> in *::*.hasOwnProperty(\"__iterator__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in [,,z1]) {; }");
