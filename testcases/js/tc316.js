tryItOut("throw StopIteration;");
tryItOut("; const __iterator__;");
tryItOut("yield <x><y/></x>;");
tryItOut("yield\n");
tryItOut("export *\n{}\n");
tryItOut("export *;");
tryItOut("/*for..in*/for(__count__(const __count__, __count__ = <x><y/></x>) in [][<><x><y/></x></>].__parent__.throw((constructor))) {var prototype = window; }");
tryItOut("if(({ __proto__: constructor, __proto__: __count__ }) = ('haha'.split).call(*::*, <x/>, ({a1:1}))()) let __parent__; else  if ((this ?  /x/g  : {})--) <><x><y/></x></>;");
tryItOut(" for each (constructor in __iterator__.__count__)");
tryItOut("/*for..in*/for(var __noSuchMethod__ =  \"\"  in ((({}).hasOwnProperty)((new window\n <<= [1].hasOwnProperty(\"__proto__\"))\n)));");
tryItOut("if(false) { if ( \"\" ) window;} else throw <><x><y/></x></>;");
tryItOut("if([15,16,17,18].map((Exception(<x><y/></x>, null)), (((new (<x><y/></x\t>)()))()))) { if ([] = (__noSuchMethod__ = Math.sin)) {/*infloop*/do gc() while(((<x><y/></x>)[false])); } else \nlet __iterator__;}");
tryItOut("/*infloop*/for(__iterator__; (eval(\"const __proto__;\", return __proto__;)).isPrototypeOf(window); new <><x><y/></x></> %= *) let (prop = ((function (prototype) { continue M; } ).call([[1]], ))) { const __count__ = <x/>; }");
tryItOut("{return <y><z/></y>; }");
tryItOut("");
tryItOut("/*for..in*/for(const __iterator__ in new (case <y><z/></y>: function(q) { return q; }break;  && yield [z1,,].prototype = __parent__+=this\r)((__parent__.(({let:  '' , __noSuchMethod__: __iterator__ }))))) switch(__iterator__) { default: export __parent__;break; {}break; case 3: break; break; case ({ set __iterator__ __iterator__ (prop, __count__) { yield  /x/  }  }).__parent__ = __noSuchMethod__ = <x/>: break;  }");
tryItOut("do /*for..in*/for(var prototype in (( /x/ )(*)))export *; while(((-@foo)) && 0);");
tryItOut("return (constructor) ? (function ([y]) { }[<x/>]) : this;");
tryItOut("for(let y in [5,6,7,8]) ([[1]]);");
tryItOut("if((<><x><y/></x></>((function ([y]) { })())) === new <x><y/></x>) break M; else  if (((Boolean([,],  \"\" ))[void constructor])) export setter; else const __iterator__ = <><x><y/></x></>, prototype = <x/>\n/*for..in*//* nogeckoex bug 349964 */ for  each(let \t__iterator__ in <x><y/></x>) {const __parent__ = ({a1:1});export function::function::prototype; }");
tryItOut("if(<y><z/></y>) return; else  if (('haha'.split)())  '' ; else {yield false;if(1e+81) {gc()export *; } }");
tryItOut("(this || <><bbb xmlns=\"__proto__\"><x><y/></x><!--yy--></bbb></>); const __proto__;");
tryItOut("with({__iterator__: <><{constructor}>yyy</{constructor}></>}){M:if(<x><y/></x>) {export *;let prototype; } else return;prototype, __parent__; }");
tryItOut("/*infloop*/while([__iterator__, , , ] =  \"\" .@foo)yield;");
tryItOut("switch([] = ((uneval(false))).unwatch(\"constructor\")) { case [<y><z/></y>].filter(((({}).hasOwnProperty)()).watch):  }");
tryItOut("{/*infloop*/for(__parent__;  /x/g .__lookupSetter__(\"__parent__\"); false) const prop = <x/>;/*infloop*/for(new ({}).__lookupGetter__(<x><y/></x>.unwatch(\"__noSuchMethod__\"), <><x><y/></x></>); <{prop}> </{prop}>; __iterator__) throw 4.; }");
tryItOut("do yield; while((#0=({prototype: new (prototype)(<x><y/></x>)})) && 0);");
tryItOut("with({}) return;");
tryItOut("/*infloop*/for(((new ( \"\" )(__proto__, __count__))()); *::*.__lookupGetter__(\"__iterator__\"); let (<x/> = <><x><y/></x></>) ([4.].some(({}).hasOwnProperty))) {return <><x><y/></x></>;/*infloop*/for(var function::__iterator__ = window; <x/>; false) {continue ;gc() } }");
tryItOut("if((function ([y]) { })()) return this; else  if (this.__defineGetter__(\"__proto__\", 'haha'.split)) export __count__");
tryItOut("/*infloop*/for(; [, ({ __iterator__: prop })] = []; (#2=this.zzz.zzz)) {return;/*infloop*/do /a/gi while(({a2:z2})); }");
tryItOut("let(__parent__ = constructor = [11,12,13,14].some, [({ __iterator__: __parent__, prop: __proto__ })]) { (({ get __parent__(__count__, prop) { return 3 } , prop setter: (new Function(\"throw <y><z/></y>;\")) }));");
tryItOut("M:switch( '' ) { default: export *;break; case *::*: return;break; break; case 3: __proto__ = true, __proto__ = (-0); }");
tryItOut("try { yield; } catch(prop) { break ; } ");
tryItOut("with({constructor: (let (prototype = 0.1, __noSuchMethod__ = <x/>) 3/0(prototype, <x><y/></x>)).__defineSetter__(\"__noSuchMethod__\", eval)}){/a/gi }");
tryItOut("/*infloop*/for(var __iterator__;  /* Comment */(([11,12,13,14].some) * ((-0) , undefined))\n.prop = \n<>[[]]</> <<= ([15,16,17,18].some( \"\" , ({a1:1}))).__lookupSetter__(\"__parent__\"); (\n<y><z/></y>) *= .2.yoyo(<x><y/></x>)) with(){yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__(<><x><y/></x></>) in *) {(false); }");
tryItOut("let __noSuchMethod__ = #3={a:#3#}; const __noSuchMethod__;");
tryItOut("return false;/*\nnew Function\n");
tryItOut("/*for..in*/L:for([constructor, constructor] = __iterator__ in this) {yield __proto__; }");
tryItOut("/*infloop*/for((new (case 1e81: default: ;break; case 3: break; case 9: break; __iterator__ = ({a1:1}), constructor;break; break; case 9: break; )(<x/>)); eval(\"(0);\", 0); *::*.__defineSetter__(\"__parent__\", ({}).__lookupGetter__)) continue M;");
tryItOut("if((__iterator__ = 1.3).watch(\"prototype\",  /x/ )) __parent__ = <><x><y/></x></>; else  if (new Array()) ;");
tryItOut(";\nwith({each: (p={}, (p.z = this)())}){ }\n");
tryItOut("if( '' ) {break ; } else {<><x><y/></x></>;yield; }");
tryItOut("/*infloop*/for(let ({ __iterator__: ({ constructor: __proto__ }), prototype: [prop, , __iterator__] }) = this.throw(this.__defineGetter__(\"prototype\", ( \"\" ).watch)); /a/gi; <><{prototype}>yyy</{prototype}></>) L: \t{let __count__ = true; }");
tryItOut("while(((yield prototype = window)) && 0){{ } }");
tryItOut("gc()\n/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in [,,z1]) {throw <><x><y/></x></>; }\n");
tryItOut("M:while(( /x/ ) && 0)do __noSuchMethod__ while((this) && 0);");
tryItOut("/*\n*/return; const function::prop;");
tryItOut("L: {let __proto__, __parent__; }");
tryItOut("do {{}null } while(((5.0000000000000000000000)([,,z1], *::*) ? prop.__proto__ getter= function  __proto__ () { return __iterator__ }  : prop) && 0);");
tryItOut("if((prototype.__lookupGetter__(\"__proto__\"))) { if (new gc(#\t0=({prototype: prop = [,,]}))) {yield true; const __proto__; }} else {<x><y/></x> } const __iterator__;");
tryItOut("L: return 3.141592653589793;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each( if (true.__count__)(({__parent__ setter: (1 for (x in [])),  get prop __parent__ (__noSuchMethod__, prop) { yield [] }  }))  ) {/*for..in*/for(const constructor(-3/0) in 1e4) {export get;yield; }true }");
tryItOut("/*infloop*/for(const constructor; <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; [1,,]) {<xxx {__count__}={undefined} />yield; }");
tryItOut("export *;function(y) { yield y; break ;; yield y; }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if(new <y><z/></y>(new (this)(@foo,  \"\" ), <x><y/></x>).prototype) { if (__iterator__.prototype = (({ __parent__: [, ], prop: ({ __proto__: prototype }) }) = constructor['__parent__'])) __proto__ = this;} else /*for..in*/for(prototype in *) {const __count__ = this/*\n*/; }");
tryItOut("let (__parent__ = __iterator__, __proto__) { with({__proto__: false}){__noSuchMethod__, function::constructor = null; } }");
tryItOut("with({}) { return <x><y/></x>.(<x><y/></x>); } ");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("do do {}\t while((prop.unwatch(\"constructor\")) && 0); while((<><ccc:ddd><x><y/></x>yyy</ccc:ddd></> = constructor = <y><z/></y>.__defineGetter__(\"prototype\",  '' )) && 0);");
tryItOut("do  while((null) && 0);");
tryItOut("M:with(@foo){[]; }\n");
tryItOut("__parent__\n{let __proto__, __iterator__; }");
tryItOut("while((((\tthis.__defineSetter__(\"prop\", function(q) { return q; }) >>= false.throw(<><x><y/></x></>)).isPrototypeOf((prop = prop)[-3/0.__lookupGetter__(\"constructor\")]))) && 0){;if(true & 1.2e3) { if ((__iterator__)) /*infloop*/for(0/0; *; 0.1) {yield <x><y/></x>; } else { }} }");
tryItOut("L:switch(typeof  \"\" ) { case <y><z/></y>: export *;export *; }");
tryItOut("if( \"\" ['__noSuchMethod__'] = ().eval((this.__defineGetter__(\"__noSuchMethod__\", #3={a:#3#}) if ({})))) ;");
tryItOut("return window;");
tryItOut("with({}) { ; } ");
tryItOut("throw [,];");
tryItOut("with({prototype: new Error()})/*infloop*/for(constructor; constructor = <><x><y/></x></>.eval((__parent__.prop = <x><y/></x> ? [1,2,3,4].map : -3/0.valueOf(\"number\"))); ((@foo).unwatch(\"__noSuchMethod__\"))()) {(<x><y/></x>).__defineSetter__ }");
tryItOut("/*for..in*/L:for(let [prop, constructor] =  /* Comment */ ''  -= window in <><x><y/></x></>) {var __noSuchMethod__ = window, __count__; }");
tryItOut("do return prop; const prototype; while(((let (prototype = @foo, __proto__ = window) eval(\"\", [,,z1]))) && 0);");
tryItOut("if( /x/  .@ <x><y/></x>) { if (<x><y/></x>) {return this; }} else {var __parent__;constructor; }\n");
tryItOut("/*infloop*/for(\tString(); __parent__; <x><y/></x>.__lookupSetter__(\"__iterator__\")) gc()\n{}");
tryItOut("switch(\f((new this).yoyo((<x/>)[*::*]))[({ })]) { case <employee id=\"1\"><name>Joe</name><age>20</age></employee>: let __proto__, __proto__\nlet constructor = this, constructor =  /x/ ; }");
tryItOut("throw StopIteration;");
tryItOut("return new ((new Function(\"return;\")))((3/0.__lookupGetter__(\"__noSuchMethod__\"))).__iterator__ = ;");
tryItOut("if(\f do ) (prop); else  if (constructor) {{}(1 for (x in [])) }\nconst __iterator__;\n");
tryItOut("/*infloop*/for(__proto__; (__noSuchMethod__ instanceof <y><z/></y>); new false) {( '' );yield window; }");
tryItOut("(<y><z/></y>);");
tryItOut("with({__parent__: ( + window.valueOf(\"number\") %= new Function(<x><y/></x>, <x><y/></x>))})if( /x/  .. <x><y/></x>) yield this; else  if (({a1:1}).constructor = undefined) (<x/>); else {let prototype, __parent__ = 0/0;export prop; }");
tryItOut("window['__count__']");
tryItOut("let __iterator__ = function(id) { return id }, __proto__ =  /x/ ");
tryItOut("/*for..in*/for(let (constructor)(3\f) in 3) {\fyield;; }");
tryItOut("(<x><y/></x>); const __proto__;");
tryItOut("(window)\n");
tryItOut("let (({ __iterator__: [constructor, ] })) { throw false; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((<><x><y/></x></>)(this)))yield\n");
tryItOut("/*for..in*/for(({ constructor: ({ prop: constructor }), __noSuchMethod__: [prototype, let, ] }) = ((*)) in ((eval)((new Iterator() instanceof function ([y]) { } ? null : this.@foo)))){function  prop () { return <x/> }  }");
tryItOut("return;");
tryItOut("switch(window) { case ():  }");
tryItOut("if((<x/>)[]) { if ( \"\" ) {let (__parent__ = __noSuchMethod__) { throw  \"\" ; }yield undefined; } else break L;}");
tryItOut("if(*::* >>>=[z1].propertyIsEnumerable(\"__iterator__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in  /x/g ) {export *; }");
tryItOut("if(<><x><y/></x></>) throw __parent__; else {gc() }");
tryItOut("");
tryItOut("");
tryItOut("M:if(({})) {L:while((this.zzz.zzz) && 0){export *;constructor = <x><y/></x>; }return; }");
tryItOut("while((__noSuchMethod__) && 0)function ()*::*");
tryItOut("/*for..in*/__parent__");
tryItOut("/*infloop*/while((; for each (__iterator__ in <><x><y/></x></>))){return true; }{{}; }");
tryItOut("/*for..in*/for((__noSuchMethod__ = [<x><y/></x>.propertyIsEnumerable(\"constructor\")].sort(({}).hasOwnProperty))(window.@*) in ({__parent__: (eval(\"return *;\", prop))})) if((this.__defineSetter__(\"constructor\", ({}).__lookupGetter__))) return __noSuchMethod__;");
tryItOut("/*infloop*/do do return 0x99; while((<x/>) && 0); while((((true.propertyIsEnumerable(\"__parent__\")))()));");
tryItOut(" /x/g  = __iterator__;");
tryItOut("/*for..in*/for(__count__ = [(*::*.__defineGetter__(\"__count__\", (1 for (x in []))))].filter((1 for (x in []))) ? [, __parent__] = new ({a1:1})( /x/ , *).throw(<xxx {__proto__}={__parent__} />) : __parent__.(( ? <y><z/></y> : prop)) in prototype = <y><z/></y>.__lookupGetter__(\"prop\")) {L: /*infloop*/for([1]; <><x><y/></x></>; <x><y/></x>) {const __noSuchMethod__, constructor = <x><y/></x>; }\nwindow }");
tryItOut("if(__proto__) {export __parent__;\n__iterator__;\n } else  if (let (__parent__) [<x><y/></x>].some([1,2,3,4].slice)) {var prop =  /x/g , __iterator__; } else \t{return; }");
tryItOut("(*::*);");
tryItOut("let(__proto__ = new Exception().watch(\"__proto__\", ({ delete: prototype, __iterator__: __parent__ })) ? new (<x><y/></x>[{}])() : window, prototype) ((function(){let(prop = -<x><y/></x>.watch(\"__proto__\", ( \"\" ).__defineSetter__), prop) ((function(){{}})());})());");
tryItOut("if(({ __count__: prop, x::prototype: __count__ }) = .2.prop = <x/>) { if (<y><z/></y> ^= *) {constructor, prop; }} else if(window) { if (<><x>\f<y/></x></>) return <x><y/></x>; else {return prototype; }}");
tryItOut("try { throw StopIteration; } finally { yield false; } ");
tryItOut("let (__iterator__) { if(function::__iterator__.__iterator__ = prototype) yield <><x><y/></x></>; else  if ('fafafa'.replace(/a/g, gc)) {yield arguments;(__iterator__); } else  }");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("if(<><zzz><x><y/></x></zzz></>) return; else return;");
tryItOut("let(__parent__ = __iterator__ = *::*) { __parent__ = constructor\t;");
tryItOut("M:if([yield <></>.yoyo(window || true) for each (prototype in #1=[#1#])]) export __parent__; else  if ([1,2,3,4].slice) export ; else {throw [[1]];if(<><x><y/></x></>) {export prototype; } else { '' ; } }");
tryItOut("var prototype = <x><y/></x\f>, constructor = trueif(__count__ = [,]--) throw [1];");
tryItOut("let ([1,,] .@x:: @foo( \"\" .let, (prop for each (constructor in *::*)))) { var __iterator__ = *::*, __count__; }");
tryItOut("if(prop && 3) { if (prototype.__noSuchMethod__ = <x><y/></x> & this) let (__parent__ = <x/>) { (3.141592653589793); } else {;/*for..in*/L:for(__iterator__ in ((function (__noSuchMethod__) { return undefined } )(<y><z/></y>)))continue ; }}");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: __iterator__ }) = <><x><y/></x></>; (__noSuchMethod__ = <x/>); __proto__\n) {export *;yield; }\nyield;\n");
tryItOut("for(let y in []);");
tryItOut("while((({constructor:  /x/ , constructor: <x><y/></x> }).isPrototypeOf((this.zzz.zzz))) && 0){/*for..in*//* nogeckoex bug 349964 */M: for  each(const x::constructor.prototype in ([z1,,])[(function ([y]) { })()]) {/*infloop*/for(__parent__ = <><x><y/></x></>; <x><y/></x>;  '' ) gc() } }");
tryItOut("const __parent__, prototype = __proto__;");
tryItOut("if(<y><z/></y>) { if (*::*.__lookupSetter__(\"__iterator__\")) switch([,]) { default: let prototype = >; }} else 1.3;;");
tryItOut("/*for..in*/for(const [prototype, prototype] = new Date() in (__count__, __proto__.(*))) {{} }");
tryItOut("{; }");
tryItOut("5.0000000000000000000000");
tryItOut("for(let y in [5,6,7,8]) let([__noSuchMethod__, ] = (<x><y/></x>.propertyIsEnumerable(\n\"__iterator__\"))) { let(__parent__, prop = true) ((function(){})());");
tryItOut("if(__proto__ =  /x/g ) { if (((p={}, (p.z = <x/>)()))) continue L; else { }}");
tryItOut("with(){return arguments; }");
tryItOut("let(__count__ = @foo) ((function(){throw StopIteration;})());");
tryItOut("L:if(this) export constructor;yield *::*;");
tryItOut("with(){let (__parent__) { with(<x><y/></x>)return *::*; } }");
tryItOut("/*infloop*/while(Math.pow(@foo.@*, <x/>)--){; '' ; }");
tryItOut("if(((Math.pow).apply).call(__iterator__, )) {gc() } else  if (this.zzz.zzz) return; else prototype = *::*;");
tryItOut("do {return <><x><y/></x></>; } while(([[1]]) && 0);");
tryItOut("/*infloop*/for(let __iterator__; ((new (function(q) { return q; })((function(q) { return q; }(null, false)))) >> <y><z/></y>);  '' ) {L: {yield;let constructor = __count__, prototype = 1e+81; } }");
tryItOut("with(this){export *;return [1]; }");
tryItOut("while(((<y><z/></y>.watch(\"__parent__\", (new Function(\"<x><y/></x>;\"))))) && 0)export constructor;");
tryItOut("with({constructor:  '' }){const __parent__;export *; }");
tryItOut("L:if([15,16,17,18].some('haha'.split, <><xxx>{constructor}</xxx></>)) { if (({constructor: __proto__ = <><x><y/></x></>})) {{function(q) { return q; }{(*::*); } } } else return __parent__;}");
tryItOut("/*infloop*/L:do switch([15,16,17,18].filter(gc, @foo)) { default: (<><x><y/></x></>);break; case 6: constructor = __parent__;break;  } while((( '' )(window)))");
tryItOut("/*infloop*/L:for(let ({ constructor: (window)( '' .constructor = [z1,,]) }) =  /x/ ; (<x><y/></x>)[__proto__]; [15,16,17,18].map(function(y) { yield y; export __parent__;; yield y; }, 'fafafa'.replace(/a/g, new Function))) {/*infloop*/for(typeof #1=({__parent__: {}}); ({ __iterator__: __count__ }) = <x/>.__iterator__; <x><y/><\f/x> ? *::* : this.isPrototypeOf(new  /x/g )) yield;yield 1e4; }");
tryItOut("do export *; while(([,,]) && 0); const __parent__;");
tryItOut("/*infloop*/for(let this.__defineGetter__(\"prototype\", (new Function(\"break M;\"))); (#2=(gc).call(this.zzz.zzz, (__iterator__ = window))); (--__parent__)) /*for..in*/for(var (__parent__).__iterator__ in ((({}).hasOwnProperty)(this.__defineSetter__(\"__proto__\", (<y><z/></y>).call))))L: {export *;do {return;let __iterator__; } while((__proto__) && 0); }");
tryItOut("if(<><x><y/></x>\f</>) {}");
tryItOut("");
tryItOut("do /*for..in*/for(__count__ in [[1]]) return; const constructor; while((/a/gi(({__noSuchMethod__: false}))) && 0);");
tryItOut("{Dthrow window; }");
tryItOut("with({constructor: ([15,16,17,18].some(({}).hasOwnProperty, <x><y/></x>))[({__count__: <><x><y/></x></> }).valueOf(\"number\") ^ delete <><x><y/></x></>]})if(__noSuchMethod__) return <y><z/></y>; else {yield prop;break ; }");
tryItOut("/*for..in*/for([__iterator__, __noSuchMethod__] = this.__defineGetter__(\"prototype\", function (constructor) { yield <x><y/></x> } )\n in <><x><y/></x></>.throw( '' )) if([[1]].constructor) {throw <x><y/></x>;\n } else  if (new (yield;)()) ");
tryItOut("with({prop: (__noSuchMethod__.( /* Comment */this))})<y><z/></y>;");
tryItOut("with({prototype: (\n@foo).__defineSetter__(\"constructor\",  for (constructor in *::*.throw(__iterator__).__lookupSetter__(\"constructor\")) for (prop in [[]]\n)) .@ (*.(\tthis >>>=<><x><y/></x></>))}){\t([z1])\nreturn; }");
tryItOut("if(<x/>.yoyo(<><x><y/></x></>)) {} else  if (*) {export __count__;var prototype, __noSuchMethod__; } else {let __count__ =  /x/g ;(prop); }");
tryItOut("with({}) { __proto__((__parent__ = function  __parent__ (__count__) { gc() } )) = __count__; } ");
tryItOut("/*infloop*/while(null)/*infloop*/while(\t /* Comment */-3/0){let __iterator__ = 1e-81; }");
tryItOut("/*for..in*/L:for(const [constructor, __noSuchMethod__] = void __count__ in ({__parent__: -0})) if((yield let (prop) <x/>)) /*infloop*/for(const __noSuchMethod__ = *; window; <><x><y/></x></>) {yield;(<><x><y/></x></>); } else {L:with(true)throw true;( /x/g ).watch }if(1.3)  else  if (<><x><y/></x></>) ; else yield;");
tryItOut("with(window)let __iterator__, prop;");
tryItOut("/*infloop*/L:for(var prototype = prototype; try { break ; } finally {  } ; *::*) {throw *; }");
tryItOut("L:if((<{__parent__}><!--yy--></{__parent__}>.(<y><z/></y>.unwatch(\"constructor\")))) {({}).__lookupGetter__ } else  if ((this.zzz.zzz).hasOwnProperty(\"prototype\")) return else {do {\t{}{} } while((<><x><y/></x></>) && 0);let __parent__; }");
tryItOut("/*infloop*/for(((({ __noSuchMethod__: set }) = __iterator__.__noSuchMethod__).hasOwnProperty(\"__parent__\")); 0x99; [[gc.__defineSetter__(\"__count__\", (1 for (x in [])))].map([1,2,3,4].slice)].filter('haha'.split)) throw StopIteration;");
tryItOut("let __iterator__ = <x/>;\ngc()\n");
tryItOut("");
tryItOut("L:with(<x/>){prop }");
tryItOut("{/*for..in*/for(let [constructor, __parent__] = prop.__proto__ setter= this in <><x><y/></x></>) {prototype;yield; } }");
tryItOut("throw  \"\" ");
tryItOut("L:while(((yield @foo)) && 0){__noSuchMethod__ = [,,], __noSuchMethod__ = *::*;{} }\n");
tryItOut("for(let y in [5,6,7,8]) __count__ = constructor;");
tryItOut("with(constructor);");
tryItOut("L: return <x/>;");
tryItOut("return;");
tryItOut("if(('haha'.split)) { if (<>this.zzz.zzz;</>) /*infloop*/L:for(var __count__ = (prop = <x><y/></x>); [z1]; (0.1)[getter]) yield *::*;} else /*for..in*/L:for(var constructor in <x><y/></x>) (__parent__);");
tryItOut("L:do {Math.pow } while((<y><z/></y>) && 0);");
tryItOut("for(let y in [5,6,7,8]) yield __noSuchMethod__ <= 3/0;");
tryItOut("{/*infloop*/M:for(let ({ prop: constructor, prop: ({ __count__: [, , prop], __noSuchMethod__: ({ __parent__: prototype, __proto__: prototype })\t }) }) = (__parent__ = undefined); __proto__.prototype = <x><y/></x>; false >>> constructor = <><x><y/></x></>) /*infloop*/for(const ({ __parent__: __proto__ }) = (__proto__ ? <x/> : __count__); prop.( /x/ ); eval(\"throw  \\\"\\\" ;\", <x><y/></x>)) export __noSuchMethod__;yield [__parent__ = <y><z/></y>]; }");
tryItOut("/*for..in*/M:for(var prototype in ((false)( \"\" ))) /x/ ;\n\n");
tryItOut("with((0x99++)){throw __noSuchMethod__;var __proto__ = <x/>; }");
tryItOut("/*for..in*/L:for(const x::+5.0000000000000000000000 in constructor.__iterator__ = <x><y/></x>) {export constructor; }");
tryItOut("/*infloop*/while(__count__, __iterator__){if(<x><y/></x>) { if (null) {const try { (1 for (x in [])) } catch(__proto__ if (function(){yield;})()) { function ()0.1 } ; } else ;}; }");
tryItOut("/*infloop*/for(({ __parent__: [({ __parent__: __proto__ }), , ({ prototype: prop, __parent__: __noSuchMethod__ }), [], ], __noSuchMethod__: ({ prototype: ({ __iterator__: __parent__ }) }) }) = __parent__.prop = <x><y/></x>; 1e-81; 1e-81.__lookupGetter__(\"__count__\") > (__count__)+=(p={}, (p.z = <y><z/></y>)())) yield;\n( /x/ );\n");
tryItOut("{L:if( /x/ ) {throw <x><y/></x>; } }");
tryItOut("/*infloop*/for(__noSuchMethod__; (({ __noSuchMethod__: __proto__, prop: ({ __iterator__: __iterator__/*\n*/, __iterator__: ({ prop: constructor, __noSuchMethod__: __noSuchMethod__ }) }) }) = prop.__defineGetter__(({ __count__: __count__ }), new Function).watch(\"constructor\", (<x/>).__defineSetter__)); ()) {__proto__ =  /x/g \nreturn *;\n }");
tryItOut("if(({ __count__: prop, __count__: constructor }) = (0/0)[*]) {return [];/*for..in*/for(let [__noSuchMethod__, __parent__] = 1e+81 in *::*) {gc()try { const __proto__; } finally { yield; }  } } else  if (new ((new Function(\"throw <x><y/></x>;\")))()) {M:if(<x/>) { if (@foo) { }} else const __proto__, __noSuchMethod__; } else yield;");
tryItOut("/*for..in*/for(prop in [11,12,13,14].some) {return (-1); }");
tryItOut("/*for..in*/M:for(var __parent__ in ((yield  \"\" ).yoyo(this++))) /*for..in*/for(const __iterator__ in (('haha'.split)((__proto__.__noSuchMethod__ = constructor)))){ { export prototype; }  }");
tryItOut("L:if(__count__|=\t /x/  !== __proto__ = new Date( \"\" )) {/*infloop*/for(const constructor = true; __noSuchMethod__; [,,z1]) {yield; } } else  if ((\n<y><z/></y>\t) for each (prop in __iterator__) for (__proto__.__noSuchMethod__ in [z1,,])) /*infloop*/for(__count__; (-0); <y><z/></y>) yield; else {function(q) { return q; } }");
tryItOut("const __proto__, __iterator__ = \n");
tryItOut("/*infloop*/for(const __count__;  '' ; __parent__ = <x><y/></x>) {(*::*)\n\t }");
tryItOut("with(__count__ = (__noSuchMethod__.__iterator__) ^ __proto__ = this){throw 1e81;/*infloop*/do {{Function } } while((this >= *)); }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const this in *::*) {export __parent__; }");
tryItOut("if(-0 <<= <x><y/></x>.__parent__.hasOwnProperty(\"__count__\")) with(<y><z/></y>){;{gc()return; } }");
tryItOut("/*infloop*/L:for(__proto__; null; null) {var __iterator__;let constructor = [z1,,], prop; }");
tryItOut("/*infloop*/do {if(false.unwatch(\"prototype\")) export *;export *; } while((prototype =  '' .constructor = window === 3.141592653589793));");
tryItOut("if((<y><z/></y>\n))   else __parent__");
tryItOut("/*infloop*/for((__noSuchMethod__.prop = prop ? __proto__ : yield window); \n__parent__; [11,12,13,14].map) {if( '' ) {const constructor; } }");
tryItOut("if(window++) {;yield; } else ;");
tryItOut("gc()/*for..in*/for(let __parent__ in 3) {return;yield 1.2e3; }");
tryItOut("/*for..in*/M:for(constructor in (__count__|=0/0.__lookupGetter__(\"__proto__\"))) constructor;");
tryItOut("if((return 3/0;.propertyIsEnumerable(\"__parent__\"))) {yield *::*; }");
