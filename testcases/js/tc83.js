tryItOut("{with(delete)return;\nthrow <><x><y/></x></>;\n }");
tryItOut("{};");
tryItOut(";break ;");
tryItOut("/*infloop*/do {function  __proto__ (__noSuchMethod__, prop) /x/  } while([z1,,].valueOf(\"number\"));yield;");
tryItOut("if(<><> </></>) {yield;+ } else  if (4..@foo) continue L; else {return; }");
tryItOut("yield;__noSuchMethod__;");
tryItOut("/*for..in*/for(__noSuchMethod__.__iterator__ in __noSuchMethod__ = delete  \"\" ) break M;");
tryItOut("/*for..in*/M:for(<y><z/></y>['__count__'] in __count__ = function ([y]) { }) {with(undefined.eval(null)){ } }");
tryItOut("");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const [__count__, ({ function::__parent__: [], __parent__: ({ __iterator__: ({ prop: [, , , ({ prop: __iterator__, __noSuchMethod__: __count__ }), ], __count__: [, prop, [], constructor] }), constructor: [[({ prop: __count__, __parent__: __iterator__ })], , ({ prop: __count__ })] }) }), ({ __proto__: [, Function , ], prop: __parent__ })] = ((({__count__: #3={a:#3#} }))[constructor =  \"\" ] .@ <><x><y/></x></> % [,,z1] - *); (({ get constructor(__noSuchMethod__, __proto__) { yield 1.2e3 }  })); <>((function(y) { yield y; __proto__ = 0, prototype =  /x/ ;; yield y; }).call())</>) ");
tryItOut("L: ;");
tryItOut("/*infloop*/for(({}); -<y><z/></y>--; (\nfunction::__proto__|=<x/>.valueOf(\"number\"))) {/*infloop*/for([,,]; <>(this.__defineGetter__(\"__iterator__\", (*::*).watch))</>; ((eval(\"<><x><y/></x></>;\", *::*)) <=  /x/ .valueOf(\"number\"))) {/*for..in*/for(const __proto__ in (function ([y]) { })()) {break ;(<><x><y/></x></>); } } }");
tryItOut("L:if() { if (new <x/>()++) (true).__defineSetter__ else let __parent__ = window;} const __parent__;");
tryItOut("M:with({__parent__: ~<><x><y/></x></> / [<><x><y/></x></> for each (__iterator__ in [[1]])]}){falsegc() }");
tryItOut("return (({ __iterator__: prop }) = <><x><y/></x></>.hasOwnProperty(\"__proto__\"));");
tryItOut("let(__noSuchMethod__, __noSuchMethod__ =  \"\" ) { with({}) constructor");
tryItOut("constructor = <><x><y/></x></>, <x><y/></x> = <><x><y/></x></>;\nexport *;\n");
tryItOut("/*for..in*/for(var __parent__ in ((new undefined.eval(<x/>)())((p={}, (p.z = ((uneval(<><x><y/></x></>))))()).watch(\"__proto__\", ((({a2:z2})).__defineSetter__).apply)))){let __parent__ = undefined, prototype = @foo; }");
tryItOut("let (__parent__, ({ prototype: [, each, __proto__], __count__: prototype }) = ('fafafa'.replace(/a/g, 'haha'.split))) { if(__iterator__+=<><x><y/></x></>) {;export *; } else  if (__proto__ = new /a/gi(undefined)) {if(<y><z/></y>) yield undefined; else  if (<x><y/></x>) {return; } else return [z1,,]; } }");
tryItOut("export *;\nreturn;\n");
tryItOut("M:if(('fafafa'.replace(/a/g, /a/gi))\t) throw this; else {/*for..in*/for(const prop//h\n = *::* in this) {let __proto__; }return; }");
tryItOut("with({}) with({}) { this.zzz.zzz; } ");
tryItOut("");
tryItOut("for(let y in []);");
tryItOut("if(new (yield window.eval(this);)()) {;yield; } else  if (prop.__count__ = *) {function  __proto__ (__iterator__) { yield this }  }");
tryItOut("throw <x><y/></x>; const __proto__;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ( /* Comment */prop.__parent__ getter= function(q) { return q; }.isPrototypeOf((prop.__noSuchMethod__ = <x><y/></x>)))) {M:if( \"\" ) {export *; } }");
tryItOut("if(({}.hasOwnProperty(\"prototype\"))) {return  /x/g ;var prop = <x><y/></x>; } else {{} }");
tryItOut("{switch(this) { default: undefined;break; break; case 9: export *;throw (-1);break; <x><y/></x>thisbreak;  }continue ; }");
tryItOut("throw [,,];");
tryItOut("/*infloop*/do {(1e4); } while(true);\n[1,2,3,4].map\n");
tryItOut("/*for..in*/for(var __noSuchMethod__ in <><x><y/></x></>) {prop;({}).hasOwnProperty }");
tryItOut("M:if(let (prop) <x><y/></x>) { if (window.__defineGetter__(\"__parent__\", function  __count__ (__count__) { return undefined } )) {prototype; } else {{} }}");
tryItOut("/*infloop*/M:for(prototype; (delete prop.(<x/>)); (prop.prototype = __noSuchMethod__ = (let (prototype, prototype = *::*) __proto__))) {if(\f<x><y/></x>) {throw ({}); } else  if (*) ; else yield; }");
tryItOut("L: \tswitch( '' .throw(window)) { default: break; case ((this.__lookupGetter__(\"__proto__\"))\n): break; case new (<x><y/></x>)(*, false): __noSuchMethod__, __iterator__ = true;break;  }");
tryItOut("with({prop: 3}){/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in (undefined % 1e4.__lookupGetter__(\"__noSuchMethod__\").hasOwnProperty(\"try { export __noSuchMethod__; } catch(__parent__ if prop) { Math.sin } catch(__proto__) { throw <x/>; } \"))) {const __iterator__ = @foo; } }");
tryItOut("for(let y in [5,6,7,8]) prototype = __proto__;");
tryItOut("for(let y in [5,6,7,8]) prop = __iterator__;");
tryItOut("L: yield <><x><y/></x></>;, prototype;");
tryItOut("/*for..in*/L:for(const __count__ =  /* Comment */<x/> in <x/>())  /x/ , (Function().valueOf(\"number\"))");
tryItOut("switch(true) { case  /x/g : yield *;break; case <x><y/></x>: default: case __parent__: throw false;break; case undefined: case true:  }");
tryItOut("/*for..in*/for(var __parent__ = undefined in <x><y/></x>) {[1,2,3,4].map; }");
tryItOut("if(4.) { if ({}) } else {throw 1e+81;return __noSuchMethod__; }");
tryItOut("let (__parent__, __noSuchMethod__ =  /x/ ) { var __iterator__, __count__ = 3/0; }return -3/0;");
tryItOut("with({prop: 033})({}).__lookupGetter__");
tryItOut("L:with(new (new Function)((constructor = constructor % #1=[#1#])))/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in Error(<><x><y/></x></>, <><x><y/></x></>)) {export *;/*for..in*/for(let __count__ in ((function  __noSuchMethod__ (prototype, __count__) { return this; } )(this))){export __iterator__;return <x><y/></x>; } }");
tryItOut("{/*for..in*/for(var 1e-81() in ((((1 for (x in []))).call)([]))){yield; }yield; }");
tryItOut("L: {const __proto__ = <x><y/></x>; }");
tryItOut("with({}) return;");
tryItOut("L\n/*for..in*/for(var __proto__ = __parent__.__parent__ in (\n__count__)) {break M;return; }");
tryItOut("while(( /x/g ) && 0)let [, prototype] = *, __noSuchMethod__ = prop;");
tryItOut("/*for..in*/for(let __proto__ in this) {/*for..in*/for(let __parent__ in null) {033; } }");
tryItOut("/*infloop*/for(var __parent__; new function(y) { yield y; ;; yield y; }().valueOf(\"number\"); (<><x><y/></x></> ? <y><z/></y> : <x><y/></x>)) ");
tryItOut("throw StopIteration;");
tryItOut("with({__iterator__: 1.2e3 / <x/>})let __proto__ = function::__parent__;");
tryItOut("throw StopIteration;");
tryItOut("yield\nexport *;");
tryItOut("let(__count__, prop = ({a1:1})) { throw prop;");
tryItOut("let (__parent__ = [11,12,13,14].some, ({ __iterator__: ({ __proto__: ({ [, constructor, ({ __noSuchMethod__: prototype, __parent__: __noSuchMethod__ })]: ({ __proto__: constructor, __noSuchMethod__: ({ prototype: __count__, __proto__: __iterator__ }) }) }), __count__: __count__ }), constructor: ({ (/a/gi).call(<y><z/></y>.throw( '' ), (yield __proto__)),  /x/g \n\r.__parent__: ({ prop\f: ({ constructor: [__iterator__, , __proto__] }) }), constructor: __noSuchMethod__.__parent__ }) }) = <!--yy--> ? window : (*::*()) &= (__iterator__) = <><{constructor}><ccc:ddd><\t!--yy--></ccc:ddd></{constructor}></>) { this.zzz.zzz\nthrow ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in __noSuchMethod__) export __parent__;");
tryItOut("M:with({prototype: <x><y/></x> / constructor})(true).watch\t");
tryItOut("let(__proto__ = <x><y/></x>, constructor) ((function(){return;})());");
tryItOut("with({}) (({a1:1}));");
tryItOut("let (({ constructor: ({ prototype: __parent__ }), __parent__: [__proto__, , __proto__, prototype, ] }) = <>\f<x><y/></x></>\n) {  for (__noSuchMethod__(__iterator__) in <x><y/></x>) if (window) }");
tryItOut("if([]) return this; else  if (1e-81) const *::*;");
tryItOut("if(new  /x/g ) M:switch( /* Comment */#1#) { default: function  __noSuchMethod__ (prototype, __iterator__)1e4 } else  if (constructor.propertyIsEnumerable(\"__iterator__\")) {let(({ constructor: __proto__ }), prop =  /x/ ) ((function(){throw constructor;})()); } else Y");
tryItOut("/*infloop*/while(<>__noSuchMethod__</>)with(constructor)yield #1#;\r");
tryItOut("continue ");
tryItOut("M:with({__count__: ({}).hasOwnProperty})continue ;");
tryItOut("if(<><xxx {__count__}={(eval(\"yield [1,,];\", *::*))} /></>.hasOwnProperty(\"constructor\")) return;");
tryItOut("M:if(<x><y/></x>) yield; else  if (#1=[#1#]) 1e81; else {\fyield null;const __parent__; }");
tryItOut("let (__iterator__ = ('fafafa'.replace(/a/g, <y><z/></y>)), __count__) { return prototype; }");
tryItOut("/*infloop*/do \t; while(this.eval(null));");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__iterator__\", <y><z/></y>) ? __parent__ = #0=({prop: *}) : *::*.throw(<><x><y/></x></>))var constructor, __noSuchMethod__\n");
tryItOut("{break \n }");
tryItOut("yield\nreturn;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in !(__parent__ = [z1])[(prop <<= #3={a:#3#}) / __count__ = constructor]\f) let (__count__ = new (-1)([[1]])) {  }");
tryItOut(" { return eval(\"\", yield ('fafafa'.replace(/a/g, ({}).__lookupGetter__)).isPrototypeOf(({__noSuchMethod__: this @ @foo }))) } ");
tryItOut("/*for..in*/for(let [__noSuchMethod__, (#1=<y><z/></y>)] = #2=[new Exception()] in ({__count__: (yield <><x><y/></x></>)})) {{}break M; }");
tryItOut("M:with({prototype: (uneval(window++))}){export *;throw  /x/ ; }yield;");
tryItOut("\n\ngc()\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in ((yield [, , __noSuchMethod__, , ({ setter: __noSuchMethod__, prop: __noSuchMethod__ })]).propertyIsEnumerable(\"__proto__\"))) M:if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)  else  if ((({ function::__noSuchMethod__: __count__, __proto__: constructor }) = __count__ = __parent__)) {gc()\n } else ");
tryItOut("/*for..in*/M:for(const [__iterator__, constructor] = #0=({__proto__: *::*}) in ({a2:z2})) {continue L; }");
tryItOut("if(\nthis.yoyo( '' )) { if (__proto__ = <x><y/></x> .@x:: this.zzz.zzz) {\t} else { /x/g ;let __parent__ = 0x99; }}\n/*\n*/L:switch(this) { default: gc()break;  }");
tryItOut("with((({__iterator__: true}))){ /x/  }");
tryItOut("yield window;");
tryItOut("while(( \"\" .propertyIsEnumerable(\"constructor\")) && 0){'yield constructor; }((<><x><y/></x></> = undefined +  \"\" ).valueOf(\"number\")) ");
tryItOut("return <><x><y/></x></>\n");
tryItOut("with({}) for(let y in []);");
tryItOut("/*for..in*/for(let __iterator__ in this) let constructor =  '' , x::__noSuchMethod__ = window;");
tryItOut("/*for..in*/for(__parent__ = <><x><y/></x></>.__defineSetter__(\"prop\", function (__iterator__) { return [,] } ) in -1) {const constructor;<x><y/></x>; }");
tryItOut("{prototype }");
tryItOut("with(({prototype getter: (1 for (x in [])), __parent__ setter: new Function })){var constructor: *::* = [1], prop; }");
tryItOut("L: __proto__, constructor = arguments;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in -eval(\"*::*\", this)((void window.__defineGetter__(\"prop\", [1,2,3,4].map)))) {gc()let(prop) ((function(){return 0x99;})()); }");
tryItOut("/*infloop*/for(let prop = <y><z/></y> |= true; window; (Error())) {<x/>;export __proto__; }\n/*infloop*/for(new (<y><z/></y> /= false)(*::*); (new Exception(( \"\" .unwatch(\"prototype\")),  \"\" )); *) {; }");
tryItOut("/*infloop*/for(let function::constructor = this.__defineGetter__(\"__count__\", (__noSuchMethod__)); ( /x/g .__lookupSetter__(\"@foo\")).__defineSetter__(\"__iterator__\", (__proto__.valueOf(\"number\"))[(<x>\n<y/></x> += <><x><y/></x></>)]); [15,16,17,18].map(function  __count__ () { return  ''  } , @foo.__parent__)) {break L;(1 for (x in [])) }");
tryItOut("Function");
tryItOut("if() { if ((<><x><y/></x></>[true])) } else {;var prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in __parent__) 9;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(const __parent__ = yield ( \"\" )[<><x><y/></x></>]; 1e-81; yield  '' ) {(*::*)\n }");
tryItOut("[,];");
tryItOut("if(<bbb xmlns=\"((p={}, (p.z = ())()))\"><!--yy--></bbb>.(({constructor setter: gc }))) {yield;break ; }");
tryItOut("let(__noSuchMethod__) ((function(){([[1]])(*) = __count__;})());");
tryItOut("this.zzz.zzz;");
tryItOut("switch( '' .unwatch(\"__noSuchMethod__\")) { default: break;  }");
tryItOut("let (prop, __iterator__) { /*for..in*/for(constructor in  '' ) return []; }");
tryItOut("L: {(/a/gi).calllet (constructor, __iterator__ = [#3={a:#3#}].filter([1,2,3,4].slice)) { <zzz><><x><y/></x></></zzz> } }");
tryItOut("if( '' ) {gc()let (constructor = this.*, __parent__ = undefined) { switch(<x/>.__lookupSetter__(\"__count__\")) { case 8: break;  } } } else  if (([11,12,13,14].filter)(this.zzz.zzz, 1.3.__iterator__ = this)) /*infloop*/M:for(true.__noSuchMethod__ = <x><y/></x> === <x><y/></x> === __parent__; !<y><z/></y>; __proto__) export *;");
tryItOut("let (__proto__ = (new (undefined).watch( '' , <><x><y/></x></>)), __parent__ = this) { with(*)<x/>; }");
tryItOut("/*for..in*/for(var __count__ = <>\t<x><y/></x></> in <><x><y/></x></>) (*::*);");
tryItOut("let(constructor['__count__']) ((function(){function (__parent__, __iterator__)prop--})());");
tryItOut("do \nconst __iterator__ = 1e81; while(((new (__count__.throw(-1))())) && 0);");
tryItOut("if((*)[<><x><y/></x></>].eval((uneval(*::*)))) @foo; else {gc()(\r<x/>); }");
tryItOut("let(__iterator__ = new (1 for (x in []))(((function ([y]) { })().__defineGetter__(\"__iterator__\", @foo)), [,,z1]), __count__ = __proto__ = 1e81) ((function(){with({}) { ([window if ( '' )]) = __count__; } })());");
tryItOut("/*infloop*/for(const ({ constructor: ({ __noSuchMethod__: [__parent__, __parent__] }) }) = *::*; (({}).hasOwnProperty)(window, <y><z/></y>); undefined.throw(<x><y/></x>)) /*infloop*/for(@foo; window; <><x><y/></x></>) [[]];");
tryItOut("while((*.propertyIsEnumerable(\"__count__\")) && 0){1.3 }");
tryItOut("var __noSuchMethod__, __count__ = <><x><y/></x></>;");
tryItOut("yield [] = ~<y><z/></y>;");
tryItOut("let (__proto__) { (@foo); }");
tryItOut("let (__proto__, delete = 0.1) { export *; }");
tryItOut("if((eval(\"*::*\", 3))) { if (<x><y/></x>.( /x/ )) {export __count__;__proto__; } else {[1,2,3,4].slice( \"\" ); }}");
tryItOut("if((constructor = <y><z/></y>[null])) { if (with({}) __count__ = true;) /*infloop*/for(let __count__ = <x/>; [z1]; *::*) __iterator__;} else gc()");
tryItOut("{{function(y) { yield y; yield;; yield y; } } }");
tryItOut("/*for..in*/M:for(var prototype.__parent__ in ((((<x><y/></x> > __count__)[new undefined(0)])++)((false.eval(function ([y]) { }) ? undefined.@* : <><x><y/></x></>.__defineGetter__(\"constructor\", new Function))\n)))switch(++new ((-1))()) { case 6: break; throw <y><z/></y>; }");
tryItOut("let([] = this, __iterator__) { try { yield; } finally { yield *; } ");
tryItOut("/*infloop*/for(let __parent__; #0=({__proto__: <x><y/></x>})--; []) {if((RangeError(__noSuchMethod__))) return undefined\n; else {break L;export prop; }if([constructor] = (__parent__ = <y><z/></y>)) {export *;export *; } else  if ((#1=[undefined])) const prop =  /x/g , __proto__ = <><x><y/></x>\f</>; }");
tryItOut("/*infloop*/for(__parent__.valueOf(\"number\"); <x><y/></x>.(#1#); 1e4 &= function ([y]) { }) {__iterator__ = <><x><y/></x></>, __count__ = <y><z/></y>; }");
tryItOut("yield \t<x><y/></x>return;");
tryItOut("/*infloop*/do do {yield <><x><y/></x></>; } while((1.2e3) && 0); while(({ prototype: prop }) = __parent__ >> (yield window));");
tryItOut("/*for..in*/for(let (prototype) in prop = <x/>) {function  prototype (__parent__)*::* }");
tryItOut("/*for..in*/for([constructor, __parent__] = ({gc()* }) in <bbb xmlns=\"(p={}, (p.z =  /x/ )()) .. <x><y/></x>.@foo\"></bbb>) {export *\n }");
tryItOut("for(let y in []);");
tryItOut("if(constructor = (({constructor: <x><y/></x>}).__defineSetter__(\"prop\", ((new Function(\"export *;\"))).call)).unwatch(\"constructor\")) { if ((-(({}).hasOwnProperty)())) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in 1e-81) {;(new Function(\"let __noSuchMethod__, prop;\")) }} else {export *; }");
tryItOut("return __proto__;");
tryItOut("while((<><x><y/></x></>) && 0)throw [z1];");
tryItOut("/*for..in*/for(const prop = ((p={}, (p.z = (this.__defineSetter__(\"__proto__\", ((new Function(\"yield;\"))).call)))())) in eval(\"<><x><y/></x></>\", <><x><y/></x></>)) {/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in __parent__) return <\r><x><y/></x></>; }");
tryItOut("yield *::*;export *;");
tryItOut("let(__iterator__, prototype = ('fafafa'.replace(/a/g, new Function))) { return;");
tryItOut("while((let (prototype = #3={a:#3#} | true, constructor) prototype = *::* = [,]\n) && 0)let [] = this.__defineGetter__(\"prototype\", (window).__defineSetter__), __iterator__\nwith({__parent__:  '' })throw .2;");
tryItOut("if(__count__.__proto__-=3.__lookupSetter__(\"__noSuchMethod__\")) ; else  if ( /x/g ) {{<><x><y/><\f/x></>;return arguments; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__.__parent__ in ({ __proto__\t: ({ constructor: __parent__, prop: prototype }) }) = ({ __parent__: __noSuchMethod__ }) = this.zzz.zzz) {gc()export *; }");
tryItOut("for(let y in []);");
tryItOut("with({prop: .hasOwnProperty(\"__parent__\")})M:if(__count__) { if (<><x><y/></x></>) {(1e-81); }} else ");
tryItOut("(<><x><y/></x></>);");
tryItOut("switch( /x/ ) { case 6: /*for..in*/M:for(var __parent__ = (yield <x/>) in [,,]) return [,];break; break; default: continue L;\nthrow __noSuchMethod__;\ngc() }");
tryItOut("{}export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __proto__) {__count__, prop;yield constructor; }");
tryItOut("/*infloop*/for(const __parent__; ({a2:z2}); null) return; const prop;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((({}).hasOwnProperty)(__noSuchMethod__ = null))){__noSuchMethod__; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const function::prop in window) {return; }");
tryItOut("let(__count__, prototype = (({prototype getter: gc }))[[ /x/g ].sort(<x/>)]) ((function(){if( /* Comment */this.__defineSetter__(\"__count__\", <x><y/></x>)) { /x/g ; }})());");
tryItOut("\n");
tryItOut("M:do /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in __noSuchMethod__) constructor getter: function(q) { return q; } while(((this).watch(window, <x><y/></x>)) && 0);");
tryItOut("L:while((<zzz>prototype</zzz>.(undefined.propertyIsEnumerable(\"__count__\")) >> 'fafafa'.replace(/a/g, (__noSuchMethod__)\f.__defineSetter__) >>>=1e4) && 0)if(<x><y/></x>) { if (null) {var __count__ =  /x/ ; } else throw  '' ;}");
tryItOut("/*infloop*/for(*::*; prototype = true; ( \"\" .__parent__)) {const __parent__ = <x/>, prop = <x><y/></x>; }");
tryItOut("/*for..in*/for(const __parent__ = 'fafafa'.replace(/a/g, Math.pow) in ([11,12,13,14].some)) {let __noSuchMethod__, constructor = true; }");
tryItOut("/*for..in*/\ffor(var this.__defineSetter__(\"__parent__\", ([1,2,3,4].slice(/)).__noSuchMethod__ in ({ function::__count__: __proto__, __proto__: __parent__ }) = [__noSuchMethod__]) export *;");
tryItOut("try { return; } catch(__noSuchMethod__finally { let(constructor = (uneval((<><x><y/></x></>(__count__))))) { return; } ");
tryItOut("if(this.zzz.zzz %= eval(\"prop if (*::*)\",  /x/ ).__lookupSetter__(\"each\")) { if ((\f(this.watch(\"__parent__\", Math.sin)) <= this.__defineGetter__(\"__parent__\", (#1=[#1#]).watch) @ __count__ = window++ * \n[ \"\" ].sort(({}).hasOwnProperty\t).__iterator__ = (({a2:z2}).*))) /*infloop*/for(((eval).call(*, )); ((null).watch)() for (prototype in  \"\" ) for (prototype in @foo) |= if([z1,,]) { if (<x><y/></x>) {}} else {let __parent__, __parent__ =  \"\" ;(new Function(\"const constructor = 1.3, constructor = window;\")) }; ({__count__: (new [z1,,](false)) })) /*for..in*/M:for(const constructor.constructor in [z1,,]) {yield  '' ; }} else {function(y) { yield y; var  get __noSuchMethod__() { return <x/> } , prop = <><x><y/></x></>;; yield y; }\nvar __count__ = __iterator__;\n }\nlet prop;");
tryItOut("");
tryItOut("/*infloop*/for(const ({ __parent__: ({ prop: ({ __count__: constructor, prototype: __count__ }) }) }) = \n__parent__; new ( '' )(export *); (yield (<><x><y/></x></> if (<x><y/></x>)).isPrototypeOf(prop = __parent__))) return <y><z/></y>");
tryItOut("export __noSuchMethod__;");
tryItOut("M:if(false) continue ;");
tryItOut("/*infloop*/M:do yield this; while((({}).__lookupGetter__)( /x/g , window));");
tryItOut("{export *\nexport *; }");
tryItOut("if(null.__lookupGetter__(\"constructor\")) { if (__proto__.valueOf(\"number\")) {gc()yield; } else return;}");
tryItOut("");
tryItOut("/*for..in*/for(let __parent__ = <x/> in prop) {export prototype; }");
tryItOut("L: /*infloop*/L:while((*++)){export __parent__; } const prop;");
tryItOut("/*for..in*/for(let __proto__ = true in (uneval(undefined)).__lookupSetter__(\"prototype\")) {return;with((__parent__ = -<y><z/></y>))/*infloop*/for(const constructor = (undefined(#1#)); __count__ setter: [1,2,3,4].map @  /x/g ; eval(\"function(q) { return q; }\", window)) {return; } }");
tryItOut("/*infloop*/for(({ prototype: constructor, prototype: __proto__ }) = (0x99.prototype); false ? 1e4 : undefined.__defineGetter__(\"prototype\", [1,2,3,4].map); -1.isPrototypeOf([,]) -= <><x><y/></x></>.__proto__ = \f<x><y/></x>) {throw 3.141592653589793; }");
tryItOut("if(__count__ = <y><z/></y>) {{{}; }gc() } else  if (<y><z/></y>.@* += <x/>) throw prototype;");
tryItOut("if(<y><z/></y> in <x><y/></x> ? __count__ = <x><y/></x> : *::* >> prop / 5.0000000000000000000000) { if (({__count__ getter: ({}).hasOwnProperty, __noSuchMethod__: (\fconstructor = __parent__) }))  else {throw false;return; }}");
tryItOut("L: {/*infloop*/for((null)(*::*, __count__); (Exception() ? (yield prop) : (yield null)); eval(\"/*infloop*/do {([z1]);return; } while([15,16,17,18].some(__parent__, ({})));\", let (__count__ = __noSuchMethod__, __noSuchMethod__ =  /x/g ) \f \"\" .prop = __parent__)) {return; } }");
tryItOut("L: (<y><z/></y>);");
tryItOut("/*infloop*/L:do {} while(null.throw(1.2e3)());");
tryItOut("/*infloop*/while(function ([y]) { })throw <x><y/></x>;");
tryItOut("while(((({ set __iterator__ constructor () { if(__proto__) { if (null) yield <><x><y/></x></>; else {*; }} } , prototype: (true.__defineGetter__(\"__count__\", function () { return; } )).propertyIsEnumerable(\"__noSuchMethod__\") }))) && 0)/*infloop*/for((__noSuchMethod__ = ({a1:1})); (__count__ *= <y><z/></y>[(<x><y/></x>)]); this.eval(false).eval({} .@*:: false)) {throw this;export *; }");
tryItOut("<x><y/></x>");
tryItOut("/*infloop*/L:do \fexport each; while(prop.__count__);");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(__parent__; 1e81 if ([,,z1]); new Number()) this.zzz.zzz;");
tryItOut("with( /x/g )export *\n");
tryItOut("/*for..in*/L:for(var <y><z/></y>['constructor'] in  '' .__defineSetter__(\"prototype\", (1 for (x in [])))) {with({__iterator__: (yield <><x><y/></x></>)}){{}{} }export __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\t for  each(let prop in new <y><z/></y>()) {return window;continue L; }");
tryItOut("/*for..in*/for(var __count__ in ((gc)((\f.2.hasOwnProperty(\"__proto__\"))))){yield;'haha'.split }");
tryItOut("prop");
tryItOut("if(__iterator__) yield; else return;");
tryItOut("/*infloop*/for\t(const ({ __iterator__: prop }) = this\n; *::*; new ([1,2,3,4].slice)()) {yield null; }");
tryItOut("export *\f;");
tryItOut("/*infloop*/M:for(\tconst __parent__; <y><z/></y>; let (__noSuchMethod__, __iterator__ =  /x/ ) <y><z/></y>) {while((*) && 0)let __count__ = 1e4; }");
tryItOut("{return;/*for..in*/for(const [constructor, __iterator__] = __iterator__ in null) {var function::__parent__, __iterator__ = *; } }");
tryItOut("/*infloop*/M:do var prototype;return 4.; while((prototype.__noSuchMethod__ = 5.0000000000000000000000.yoyo(@foo)));");
tryItOut("export *");
tryItOut("/*infloop*/while((({}).__lookupGetter__(<y><z/></y>))){/*for..in*/for(let __parent__ in false) {;var prop =  \"\" ; }get, __parent__ = undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  /x/g  & <x><y/></x>) {{}function::__noSuchMethod__; }");
tryItOut("/*infloop*/for(const ({  /x/ : prototype, __noSuchMethod__: prototype }) = __parent__.constructor = 1.3; (1e-81.propertyIsEnumerable(\"__count__\"))[String((__count__ = window))]; function ([y]) { }.yoyo(false)) export __parent__;");
