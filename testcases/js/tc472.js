tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (Function(<x><y/></x>))([[1]] >= <x><y/></x>.yoyo(__count__ = *::*)) in (false.hasOwnProperty(\"__parent__\")).*) gc()\nexport *;\n");
tryItOut("for(let y in [5,6,7,8]) try { this.zzz.zzz; } catch(__parent__) { let(constructor = 'fafafa'.replace(/a/g, function(q) { return q; }), prop) { yield (<x><y/></x> +  /x/ ); } finally { return <x><y/></x>.valueOf(\"number\"); } ");
tryItOut("let (constructor = (function ([y]) { })(), __noSuchMethod__ =  '' ) { /*for..in*//* nogeckoex bug 349964 */ for  each(prop in null) gc() }\n");
tryItOut("/*for..in*/for(let constructor in \n(<y><z/></y> > [z1,,])) {if(this) throw window; else  if (prop) return <x><y/></x>; else {return [z1]; }(<x><y/></x>); }");
tryItOut("export *;");
tryItOut("this.zzz.zzz;");
tryItOut("{ }");
tryItOut("this.zzz.zzz;");
tryItOut("with({__parent__: (let (__count__) ((1.2e3)())(function(id) { return id }.__parent__))})return this const __noSuchMethod__;");
tryItOut("if(prototype.__parent__) {export *;var __parent__ = __iterator__, prop; } else {let __noSuchMethod__ = <x/>, __iterator__;(+<x/>); }");
tryItOut("/*infloop*/for(function::__proto__; false.__defineSetter__(\"__noSuchMethod__\", ((<><x><y/></x></>).watch).apply) || (true @ <x><y/></x>.__defineGetter__(\"__parent__\", function(y) { yield y; {}; yield y; })); [1]) {{;const __iterator__; } }");
tryItOut("for(let y in [5,6,7,8]) prototype = prototype;");
tryItOut("M:if(({ [z1]: __noSuchMethod__, __proto__: prototype }) = [z1] , //h\n0.1) { if (constructor.__noSuchMethod__) if(*::*) {return <y><z/></y>;return 033; } else {export __count__; }}");
tryItOut("/*for..in*/for(let [__iterator__, __iterator__] = window.__lookupGetter__(\"__count__\") in this.__defineGetter__(\"__noSuchMethod__\", gc) <<= eval(\"<y><z/></y>\", <x><y/></x>)) {yield;{}\nconst __count__;\nvar __parent__, prop = window;\n }");
tryItOut("with((((<x><y/></x>)()).valueOf(\"number\"))){with(prototype){export *;__count__ = <x><y/></x>; }switch(<{prototype}></{prototype}>) { case prototype.(( /* Comment */<><x><y/></x></>).propertyIsEnumerable(\"setter\")): with(this) '' ;throw __iterator__;break; L:with({prototype: <x/>});default: break;  } }");
tryItOut("{(new Function(\"const Math.pow = [z1,,], __iterator__;\")) }");
tryItOut("/*infloop*/do {yield <><x/*\n*/><y/></x></>;/*infloop*/for(<y><z/></y>; 0x99; [z1]) {gc() } } while(({a1:1}));");
tryItOut("if( for each (__noSuchMethod__ in <y><z/></y>)) { if (<x/>) yield; else }");
tryItOut("let (prototype(eval(\"\", 3.141592653589793)), __parent__ = (__parent__ = true)) { let (__count__ = null, __count__ = __iterator__) {  } }");
tryItOut("/*infloop*/L:for(([15,16,17,18].map(eval, __noSuchMethod__ = constructor = [z1])); (4..propertyIsEnumerable(\"__parent__\")) /= Array(__proto__.eval(null), *::*); __count__.hasOwnProperty(\"__parent__\")) /*for..in*//* nogeckoex bug 349964 */L\f: for  each(constructor in (<x><y/></x>)[__iterator__]) export __noSuchMethod__;");
tryItOut("L: export __parent__;");
tryItOut("{return <x/>; }");
tryItOut("break ;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = this %= <><x><y/></x></> in @foo) {yield [,]; }");
tryItOut("if(null) {throw <y><z/></y>;return; } else  if (!1.2e3 %= null\n) return;");
tryItOut("{/*infloop*/for(var __proto__ = -3/0; constructor = 3.141592653589793; <y><z/></y>) throw [1];'M:if(<x><y/></x>) {gc() } else  if (this) gc() else {return;var function::__proto__, __iterator__ = <x><y/></x>; }\nexport *; }");
tryItOut("let (__parent__) { /*infloop*/while((--*)); }");
tryItOut("/*infloop*/while(__iterator__ =  '' )export *;");
tryItOut("M:with(prop.prototype setter= gc){/*for..in*/for(const [__count__, __noSuchMethod__] = (*::* in <x/>) in {}) export prototype; }");
tryItOut("let (yield =  \"\" ) { yield <x><y/></x>; }");
tryItOut("let __count__ = undefined, prop;");
tryItOut("M:if(let (__parent__ = *::*) window in 0/0) { if (prototype\t = break L; >  \"\" --) {prop, __parent__;033 } else 033;}");
tryItOut("let(__noSuchMethod__ = eval(\"break M;\", <y><z/></y>).*) ((function(){continue M;})());");
tryItOut("M\t:with((0.propertyIsEnumerable(\"__parent__\").yoyo((__iterator__.__iterator__ = prototype.(*)))))if(@foo)  else  if (window) {return; } else eval");
tryItOut("M:switch([,,z1] || *::*.__count__ = __parent__ ^ this.__lookupGetter__(\"__parent__\")) { case 5: with((Math.sin).call(Boolean(1e+81), )){{} const __iterator__; }\n/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in this) {{}{} } }");
tryItOut("for(let y in []);");
tryItOut("{if(*.unwatch(\"prop\")) { if ((prototype >> #3={a:#3#})) [,,z1];} else &;\n;\n\nconst __count__ =  '' ; }");
tryItOut("if(delete%=*::*) {<y><z/></y>;constructor } else  if (prop.__lookupSetter__(\"prop\")) ;");
tryItOut("/*infloop*/for([1,,] ^ <x><y/></x>; [this]; ([<y><z/></y>])) {const __parent__ = *::*, __count__ = __noSuchMethod__; }");
tryItOut("let (__noSuchMethod__ = <x><y/></x>, __parent__ = __parent__) { export __noSuchMethod__; }");
tryItOut("L:if(3.141592653589793.*) if() {var __iterator__ = [1,,];return this; }");
tryItOut("M:while((true) && 0){/*infloop*/M:for(((yield *::*)); [ /x/g ].map(function (__proto__)\t { gc() } ); (this for each (__proto__ in <x><y/></x>))) return; \"\" ; }");
tryItOut("do export *; while((({__noSuchMethod__: ( \"\"  for (__iterator__ in @foo)) })) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <><x><y/></x></>) return  { var prop, __proto__ = *; } ;");
tryItOut("if((eval(\"\", __iterator__))) {if(1.2e3) {return;var __noSuchMethod__ = <x/>; }yield <><x><y/></x></>;{function ([y]) { }; } }");
tryItOut("L: {export constructor; }");
tryItOut("/*for..in*/for/*\n*/(var [, ({ __noSuchMethod__: __count__ })] in ((({}).__lookupGetter__)([15,16,17,18].sort(([,,z1]).apply, prop+=__noSuchMethod__)))){/*infloop*/M:for(let __noSuchMethod__; (__iterator__ - null).propertyIsEnumerable(\"prototype\"); (this.__defineGetter__(\"__noSuchMethod__\", ([15,16,17,18].sort([1,2,3,4].slice, @foo))))) const __proto__, prototype = <><x><y></>; }");
tryItOut("with({ if (<x/>): this})export prototype;");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = <><x><y/></x></> .@x::  \"\"  in ([ \"\" ].filter(<y><z/></y>))) export constructor\n");
tryItOut("yield ({ export *;: __proto__ }) = __proto__ = <><x><y/></x></>;");
tryItOut("if((((this.zzz.zzz))[(0x99 for each (__parent__ in false))])) { if (<x/> :: ({ set constructor __proto__ (prototype, prop) { yield <x><y/></x> }  })) {if(<><x><y/></x></>) return; else  if (<x><y/></x>) {return this; } else {yield <y><z/></y>; } }} else {{} }\n");
tryItOut("/*for..in*/for(const prototype = function(id) { return id } in <y><z/></y>) {export *; }\n/*for..in*/for(const [__iterator__, __parent__] = window.yoyo(window) in prop = constructor) {const __proto__, __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(var __count__\r = ([1e-81 for (__parent__ in *::*)]) in (#2=({__iterator__: false}))) /*infloop*/for(let __noSuchMethod__; __parent__; function::__proto__) {return;this; }export __parent__;");
tryItOut("{throw false;return <><x><y/></x></>; }");
tryItOut("while(((uneval( \"\" ))) && 0)gc()");
tryItOut("/*for..in*/for(__parent__ = (new /a/gi(<x><y/></x>, function ([y]) { })) in -3/0) {\nbreak ; }");
tryItOut("do throw false; while(((window)(<x><y/></x>, undefined)) && 0);\nlet (prop, __iterator__ = ) { return; }\n");
tryItOut("if((__parent__ = new Math.pow())) { if (this) {throw false;continue L; }} else {(@foo) }");
tryItOut("__count__ = prototype;");
tryItOut("M:if(<x><y/></x>) { if (<y><z/></y>) export prop; else constructor}\nexport *;");
tryItOut("M:if(<x><y/></x>['__proto__'] = (__proto__ = function ([y]) { }) if ( /x/ )) { }__count__; else {let prototype;export prototype; }");
tryItOut("Math.powreturn <x><y/></x>;");
tryItOut("if((#1#.__noSuchMethod__)) const prototype = true, __proto__ = null;");
tryItOut("(L:if(eval(\"({ __proto__: get }) = ({ constructor: ({ prototype: prototype }), __proto__: ({ __proto__: prop, constructor: prop }) })\", ((<x/>)[Function()])) = false) {} else ) if (");
tryItOut("if(([].__noSuchMethod__)) {}");
tryItOut("if((<><x><y/></x></>.__noSuchMethod__ = null)) { if ((yyy.__defineGetter__(\"__iterator__\", ((<x><y/></x>).watch).apply))) (*::*); else {export prop; }}");
tryItOut("let ([, , , ] = (#0=[__proto__]), [, ]) { L:switch(this) { case 6: yield;break; default: case 3: export *;case false: break;  } }");
tryItOut("with({}) { false; } ");
tryItOut("/*infloop*/do {/*infloop*/M:for(<><x><y\n/></x></>; this; *) const __proto__ = __count__; } while(__parent__( '' , <x/>));");
tryItOut("if((p={}, (p.z =  /x/g )())) function (prototype) { return @foo }  else const prototype =  \"\" ;");
tryItOut("L:with((--(prototype.(__iterator__ = <x><y/></x>))).__lookupSetter__(\"prop\"))/*for..in*/for(var prop in window) let \fprototype = null\n");
tryItOut("/*infloop*/M:do {/*for..in*/for(__parent__ = @foo in <><x><y/></x></>) {yield <x><y/></x>; }with({}) { ; }  } while(--({}).constructor = 3/0);");
tryItOut("L:withwindow (( /* Comment */__noSuchMethod__))( /x/g );");
tryItOut("this.zzz.zzz;");
tryItOut("gc()\n");
tryItOut("if((this.zzz.zzz - prototype = constructor @ __count__ = (<x><y/></x>.valueOf(\"number\")))) { if (__count__ ^= __noSuchMethod__ === new ({}).hasOwnProperty((window .@x::  /x/g ), 0.1)) __iterator__ = (function ([y]) { })().constructor = <x><y/></x>, prop = *::*.throw( /x/ )} else (-1).watch");
tryItOut("{yield; }");
tryItOut("throw __parent__;");
tryItOut("do return __parent__; while((constructor.__proto__.eval(@foo.@*)) && 0);");
tryItOut("if(Array(@foo.valueOf(\"number\"))) __parent__; else  if (<bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>) if(3/0) {return; } else  if ( \"\" ) yield; else {} else if(eval(\"(__proto__);\", this.zzz.zzz)) {return; '' , <><x><y/></x></> }");
tryItOut("break L;");
tryItOut("do {;({a1:1}); } while((arguments) && 0);");
tryItOut("/*for..in*/M:for([__iterator__, prototype] = <xxx {__proto__}={<x><y/></x>} /> in __parent__) return;");
tryItOut("L:while((.2 >> undefined in (true[<x><y/></x>])) && 0){function () { yield <x><y/></x> } return; }");
tryItOut("L:switch(new *::*(<><x><y/></x></>) ^ [1]) { default: break; case 033['prototype'] =  /* Comment */__proto__ = <x><y/></x>: break; ;break; case 0: export each;break;  }");
tryItOut("M:switch(window %  \"\" ) { case 0: let __count__; }");
tryItOut("/*for..in*/L:for(const __count__ in (prop = 0.1)) {/*infloop*/for(const __parent__; ({x::__proto__: <x><y/></x> }); <><x><y/></x></> ^= __parent__) {__iterator__ = function(id) { return id }; } }");
tryItOut("M:if(((({ get __parent__ __parent__ (__parent__) { return <><x><y/></x></> } , __count__: <><x><y/></x></> }).isPrototypeOf(undefined)).__defineGetter__(\"__count__\", function  constructor (({ __noSuchMethod__: prototype }), __proto__) { return (__noSuchMethod__.constructor setter= new Function) } ))) /*infloop*/M:while(<y><z/></y>)window; else  if ([z1].eval(<x><y/></x>) % [z1] + [,,]) ; else {/*infloop*/for(let __noSuchMethod__ =  /x/g ;  '' ; 1e81) {return *::*; }if(<><x><y/></x></>) {gc() } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in undefined) {yield; }");
tryItOut("if(constructor =  /* Comment */1e+81) gc()");
tryItOut("do break ; while(( /* Comment */<><x><y/></x></> < (<x><y/></x>.(<><x><y/></x></>))()) && 0);");
tryItOut("/*infloop*/do {return __noSuchMethod__;/*infloop*/do {} while((new function(y) { yield y; const __proto__ = @foo, __proto__ = false;; yield y; }( \"\" ))); } while(eval(\"__proto__ = return [z1];\", __count__ = <y><z/></y>).unwatch(\"__proto__\"))");
tryItOut("M:with({constructor\t: []});");
tryItOut("while((prototype = this << ([z1,,])[0.1]) && 0)if( '' ) {export prop; } else {yield <x><y/></x>; }");
tryItOut("if(delete *::*) { if ((new this.__lookupGetter__(\"__proto__\")(((<><x><y/></x></>)(this, <>\t<x><y/></x></>)),  /x/g ))) {{}break M; } else {}}");
tryItOut("with({constructor: <zzz>(eval(\"new Function\", undefined))</zzz>}){/*for..in*/for(let __count__ = <x><y/></x> in <y><z/></y>) export *; }");
tryItOut("gc()\nbreak ;");
tryItOut("/*for..in*/for(const prop in window) {yield prop; }");
tryItOut("prop = __count__;");
tryItOut("/*infloop*/M:while((p={}, (p.z = this.__defineGetter__(\"__proto__\", function (__count__, prototype) { export *; } ))()))continue ;");
tryItOut("with({__count__: <{prop}> </{prop}><!--yy-->}){throw <x/>;return; }");
tryItOut("switch(window.__parent__) { default:  }");
tryItOut("let(prototype) ((function(){let(__parent__) ((function(){with({}) { let(prototype = prototype = <><x><y/></x></> ? null : 0) { throw __count__; } })());})());");
tryItOut("M:switch(5.0000000000000000000000) { case <x/>: case <x/>: gc()case prop: break ;break;  }");
tryItOut("export __count__\nyield;");
tryItOut("switch(return) { case 4: /*infloop*/do {export constructor;; } while(window.@*);case undefined: default: continue ;case 8: break; break;  }");
tryItOut("/*infloop*/for(const __parent__; __iterator__ = 3.141592653589793 ? undefined .@*:: 'haha'.split : \nconstructor\t; (this.valueOf(\"number\"))) {yield <><x><y/></x></>; }");
tryItOut("L:switch(typeof (@foo.yoyo(null))) { default: L: return *::*;case (<><x><y/></x></>)(<x><y/></x>, this): if((-0)) { if (5.0000000000000000000000) {\tthrow true; } else var __count__ = @foo, let;} }");
tryItOut("this.zzz.zzz;");
tryItOut("switch(<y><z/></y>) { default: break;  }");
tryItOut("[15,16,17,18].some(eval, ( '' [<x/>]\n));");
tryItOut("with(((yield (eval(\"return;\", <y><z/></y>)\n))))if(<x/>) yield __parent__; else  if ((new ((function (__parent__)0).apply)(<x/>, window))) (function::__proto__); else {yield;throw <><x><y/></x></>; }");
tryItOut("if([[1]].valueOf(\"number\") |= <><x><y/></\nx></> + 3/0) { if ( /x/g  .. <y><z/></y>)  else M:if(-1) { if (*) {let prop, prototype = <><x><y/></x></>; } else true;}}");
tryItOut("with({}) { __count__ = prop; } ");
tryItOut("{ }");
tryItOut("if(({})) {export *;; } else let __parent__;");
tryItOut("return case 8: /*for..in*/L:for(const [constructor, prototype] (3.prop).__proto__  =  in /*) gc()break;  = ({a1:1});");
tryItOut("{; }");
tryItOut("L: {export prototype; }\n");
tryItOut("{if(new (<><x><y/></x></>)(*)) { if () let __iterator__;} else {\fcontinue ; }/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in \tthis.__defineGetter__(\"prop\", (new Function(\"function(y) { yield y; try { ; } catch(__count__ if window) { false; } catch(prototype) { ( /x/g ); } finally { yield; } ; yield y; }\")))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 3.141592653589793) let __iterator__; } }");
tryItOut("L: prototype = <><x><y/></x></>, __proto__;");
tryItOut("yield <y><z/></y>;");
tryItOut("gc()\nreturn [[1]];\n");
tryItOut("with({}) { throw __proto__; } ");
tryItOut("/*infloop*/for(<><x><y/></x></>; *; null) {export prototype;yield 4.; }");
tryItOut("L:switch(this) { default: break;  }");
tryItOut("/*infloop*/L:do {yield true; } while(__iterator__%=window);");
tryItOut("return __count__.__proto__ setter= function (prop, __parent__) { {} } ;");
tryItOut("if(([(__count__.__count__ = <><x><y/></x></>)])) {gc()const __iterator__ = #3={a:#3#}, prototype =  '' ; } else export *;");
tryItOut("L:if(3.141592653589793 - *::*) const __iterator__, __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("if(yield <x><y/></x>) {export  void ; } else  if ((<><x><y/></x></>.__lookupGetter__(\"__parent__\"))) const __parent__ = __parent__; else gc()");
tryItOut("if(yield -0) {<x><y/></x>;return; } else  if (<><x><y/></x></>) {continue ;yield <x/>; }");
tryItOut("return\n/*infloop*/for(let __proto__; (--@foo %= true++); (\n(__noSuchMethod__ = __parent__))) {/*for..in*/for(let __parent__ in <><x>/*<y/>/x></>) yield; }");
tryItOut("while((__count__) && 0)var prop;");
tryItOut("if(__parent__.__parent__) {var prop = window;yield; } else  if (()) {throw __iterator__;(window); } else ([1,2,3,4].slice).apply");
tryItOut("L:if(+true) var __iterator__;/*\n*/ else  if ((<><x><y/></x></>)().@*) {let __noSuchMethod__ = @foo; } else {{} }");
tryItOut("{}/*for..in*/for(var prototype in <><x><y/></x></>) throw <x><y/></x>;");
tryItOut("/*infloop*/for(__noSuchMethod__; (uneval(this)); let (__proto__)  \"\" ) return;");
tryItOut("if(<><x><y/></x></>) break L; else  if (true) {const __noSuchMethod__ = *::*; } else yield;");
tryItOut("var prototype, __count__;\nbreak M;\n");
tryItOut("if((<y><z/></y>.valueOf(\"number\")) % [1,,] :: *::*) {yield *; }");
tryItOut("/*for..in*/for(let __count__ in this) prototype");
tryItOut("/*infloop*/\twhile((-0)){constructor = <x><y/></x>, __parent__ = @foo; } const __proto__ = <x/>;");
tryItOut("let (__iterator__ = <x><y/></x>) { break ; }");
tryItOut("{'haha'.split }");
tryItOut("/*for..in*/for(var [try { throw prop; } catch(__proto__) { yield (1.3.hasOwnProperty(\"__iterator__\")); } finally { for(let y in []); } , __parent__] = prototype.__lookupSetter__\f(\"__count__\") in 1e+81) do ; while(((-1)) && 0);");
tryItOut("/*infloop*/do {/*for..in*/L:for(var <><y><z/></y></>.__count__ in false.prop)  } while( \"\"  ? <> </> : 1e+81);");
tryItOut("with({__noSuchMethod__: #1=[constructor].__count__ = <><x><y/></x></> ? window : *})break L;");
tryItOut("let (constructor, constructor) { export prop;\nlet prototype = <x><y/></x>;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in @foo.__lookupGetter__(\"__iterator__\")) yield __noSuchMethod__;");
tryItOut("/*for..in*/for(const (constructor) in <y><z/></y>) (__iterator__);");
tryItOut("/*for..in*/for(var __parent__ in ((Math.pow)((yield ({prop setter: (-3/0).__defineSetter__ })))))let (prototype = <><x><y/></x></>, __proto__) { gc() }\nL\f:do throw *::*\nthrow prop; while((prop = @foo) && 0);\n");
tryItOut("/*infloop*/M:for((__count__ in <y><z/></y> /= (__proto__ = [1,,])); 033; Array(new (this)((new [[]])))) {switch(__count__.__count__ getter= ({a1:1})) { case 0:  } }");
tryItOut("with({}) __proto__ = each;");
tryItOut("/*for..in*/for(let __count__ = prop in eval(\"(yield @foo)\", (new <x/>()))) return <><x><y/></x></>;");
tryItOut("if(__count__) {export *; }\n");
tryItOut("with({__proto__: (new Object((<x/>.throw(.2))).((constructor.prop)))}){break ;<y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in (<><x><y/></x></>)[<{__noSuchMethod__}><!--yy--></{__noSuchMethod__}>]) export __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const  in [,,]) {for(let y in [5,6,7,8]) prop(\n); }");
tryItOut("/*for..in*/for(let function::constructor['__iterator__'] in (((({}).__lookupGetter__).apply)(<x><y/></x>.( /x/ )))){}");
tryItOut("if((#1=[#1#])[0]) yield; else  if ((({}) for (__noSuchMethod__ in return;))) yield; else {let prop;gc() }");
tryItOut("/*for..in*/M:for(var - = __count__, prototype in (([1,2,3,4].map)(*::*)))return;\n/*infloop*/do {yield; } while((p={}, (p.z = (__proto__ - <x><y/></x>))()));\n");
tryItOut("if(__parent__.__parent__) {return <x><y\f/></x>; } else  if (__parent__-=prototype\n) throw window;");
tryItOut("{/*infloop*/constructor }");
tryItOut("switch(({ getter: __count__, __parent__: prop }) = __count__.__proto__ getter= ('haha'.split).apply !==  /x/  @ !<><x><y/></x></>) { default: <><x><y/></x></>;export *; }");
tryItOut("prop");
tryItOut("/*for..in*/M:for([__count__, __proto__] = (<x><y/></x>+=[]) in <><x><y/></x></>) {let constructor =  /x/g , __noSuchMethod__ = <x><y/></x>; }");
tryItOut("let (__count__ = (<!--yy--> = constructor.isPrototypeOf(<zzz><x><y/></x></zzz>)), __parent__ = ([])([,,z1])) { if() { if ((this.__lookupSetter__(\"__proto__\"))) {return 4.; }} else {return; }\n }");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = <><zzz>(p={}, (p.z = {})())</zzz></> in __parent__|=@foo) L: throw 1e81;");
tryItOut("try { {} } catch(__iterator__) { gc() } ");
tryItOut("with({constructor: @foo})<x><y/></x>");
tryItOut("try { return prop\f.hasOwnProperty(\"__proto__\"); } catch(yield prop.prototype = [[1]].__defineGetter__(\"set\", Function); = ((0/0)) if [<><x><y/></x></>].filter(function(y) { yield y; let prototype, constructor;; yield y; })) { __count__( /x/g ) = function::prop; } finally { for(let y in []); } ");
tryItOut("throw window;");
tryItOut("M:with({__parent__: this.__defineSetter__(\"prop\", window)})throw <x/>;");
tryItOut("/*infloop*/L:for(prototype; (@foo.hasOwnProperty(\"__iterator__\")); new window.watch(\"__parent__\", (function  prop () { {} } ).apply).__defineGetter__(\"prop\", [1,2,3,4].map)) @foo;");
tryItOut(" /x/ \n");
tryItOut("if(null) yield  '' ;");
tryItOut("/*for..in*/for(prototype = * in /a/gi([11,12,13,14].filter)) {export __proto__; }");
tryItOut("yield <><x><y/></x></>;\nlet (prototype) { throw [1,,]; }\n\n");
tryItOut("{/*for..in*/L:for(prototype in <y><z/></y>) ; }");
tryItOut("prop = (function ([y]) { })();");
tryItOut("with({constructor: new (new Function(\"(<x/>).watch\"))(({a1:1}), __proto__)})getter = (-1);");
tryItOut("/*for..in*/for(constructor = <><ccc:ddd></ccc:ddd></> += ((function  prototype (prop)<x/>)\n) in undefined) {return null;return; }");
tryItOut("with(((//h\n((new Function(\";\")))(0x99,  /x/g )\t)[1e81]))(yield <><x><y/></x></>); const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each__noSuchMethod__ in @foo) /*yield;");
tryItOut("yield <x><y/></x> >>>=<y><z/></y> ? false.__lookupGetter__(\"__proto__\") :  ;");
tryItOut("throw this;");
tryItOut("if(#1=[#1#]) { if (<y><z/></y>)  /x/ ;} else undefined;");
tryItOut("L:if(*::*.hasOwnProperty(\"__count__\")) { if (this) export prop; else \r{break ;export constructor; }}");
tryItOut("__iterator__");
tryItOut("/*infloop*/for(const __count__; 3\n; yield (4.)[4.]) {/*for..in*/for(__count__ = (5.0000000000000000000000 +=  '' ) in \t*::*) {gc() } }");
tryItOut("M:if((var 033 = prototype)) let get = <><x><y/></x></>; else {throw <><x><y/></x></>; }");
tryItOut("/*infloop*/L:while(<x><y/></x>)continue ;");
tryItOut("try { gc() } catch(__iterator__ if ({__proto__: this,  get __iterator__() { let prototype, constructor = (-1); }  })) { const __parent__ = @foo, prototype = @foo; } ");
tryItOut("/*for..in*/for(__parent__ = (1e-81.valueOf(\"number\")) in  /x/g ) yield *::*;");
tryItOut("let prop = window;\n{}\n");
tryItOut("/*for..in*/for(const __iterator__ = prototype.propertyIsEnumerable(\"__count__\") in (yield {})) {false;if(<x/>) {var __proto__, __count__;var x::__noSuchMethod__ = <y><z/></y>; } }");
tryItOut("for(let y in [])");
tryItOut("/*infloop*/while((let (__parent__ = [[1]], __count__ =  '' ) undefined)){function (__noSuchMethod__) { yield <><x><y/></x></> }  }");
