tryItOut("{const __proto__ = true, __parent__ = true; }");
tryItOut("yield prototype;return;");
tryItOut("with(({ get prototype(__parent__, prop)<x><y/></x>.__proto__, __count__: <>yyy</> }))@foo;\n\n");
tryItOut("try { ; } finally { yield; } ");
tryItOut("while((@foo) && 0){}");
tryItOut("/*infloop*/L:while(delete false)yield null;");
tryItOut("if(constructor % this) if(null) throw  '' ; else  if (function(id) { return id }) @ else  if (this[<y><z/></y>]) {/*const prop; }");
tryItOut("if(arguments) {{} } else  if ( \"\" ) {; }");
tryItOut("switch(<><bbb xmlns=\"3/0\"><ccc:ddd> </ccc:ddd></bbb></>) { default: with({constructor: *::*(0/0, null)})__proto__ = <x/>, __proto__;break;  } const __iterator__;");
tryItOut("/*for..in*/M:for(let [prototype, prop] = this.isPrototypeOf(*::*).throw((window())) in <><x><y/></x></>) {export __proto__; }");
tryItOut("__proto__");
tryItOut("yield <x><y/></x>;");
tryItOut("/*for..in*/for(let prop in #0=({constructor: <x/>}) * (window.prop = window)) \tyield  /x/g \n/*for..in*/for(__iterator__ in (( /x/ )(<y><z/></y>)))gc()\f");
tryItOut("{const __parent__ = window; }\nthis for each (__count__ in <x><y/></x>);");
tryItOut("throw StopIteration;");
tryItOut("L:if(((new false( /x/ , <x/>) .@*:: __parent__ = *))[]) {for(let y in [5,6,7,8]) null }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__(prototype / this) in (new (({}).__lookupGetter__)(__noSuchMethod__.__noSuchMethod__)).__lookupSetter__(\"constructor\")) {/*for..in*/for(__iterator__ = this.__defineSetter__(\"__count__\", (true).call) in __parent__ = __noSuchMethod__) export prototype; }");
tryItOut("/*for..in*/for([__count__, set] = #2=constructor for (prop in undefined) in window) {const __count__ = undefined;let __proto__ = <><x><y/></x></>; }");
tryItOut("if(((__count__ = __proto__) - __proto__.(__count__))) { if () constructor = __proto__, prototype; else return;}");
tryItOut("/*for..in*/M:for(let [__noSuchMethod__, prototype] = window .@x:: function ([y]) { } in __parent__) break M;\f");
tryItOut("throw <><x><y/></x></>;");
tryItOut("__parent__ = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in new (this)()) { }");
tryItOut("yield; const __iterator__;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = __proto__(<><x><y/></x></>, false) in <x><y/></x>) {L:if(this) const __proto__; else {throw undefined; } }");
tryItOut("with([] = (<><x><y/></x></> instanceof <x><y/></x>))return; const __iterator__;");
tryItOut("L:if(__noSuchMethod__-=((function  __count__ (__count__, __count__) { constructor, constructor; } ).call(0, this, *::*))) {\f if ([__parent__] = 1e-81 - __parent__) {__parent__, __count__ = <><x><y/></x></>; } else ; const __count__;}");
tryItOut("prop");
tryItOut("let(__iterator__ = ( /* Comment */this.__defineGetter__(\"constructor\", /a/gi)), constructor) { for(let y in []);");
tryItOut("/*for..in*/for(const [prop, __parent__] =  ''  in  '' ) {const prototype, __noSuchMethod__; }");
tryItOut("({}).__lookupGetter__");
tryItOut("/*infloop*/for(const __count__ = new ([1])(<><x><y/></x></>); (window)(); (__parent__-=null)) ({}).hasOwnProperty");
tryItOut("M:if(<><x><y/></x></>.valueOf(\"number\")) { if ((__proto__.(yield (new ((new Function(\"return;\")))())))) {const __proto__ = export *;; } else {/*for..in*/for(var __parent__ in ((eval)(undefined))){let prop, prop;(null); } }}");
tryItOut("M:with({prop:  /x/g })<x><y/></x>;");
tryItOut("with({}) { yield [] = null; } ");
tryItOut("M:while((( /x/g )[3]) && 0){var constructor = *; }M:with({prototype: this.zzz.zzz}){ }");
tryItOut("do while((yield __count__) && 0){var __parent__ = <y><z/></y>;return; } while((__iterator__ = <x/>) && 0);");
tryItOut("M:if(@foo) {return *::*; }");
tryItOut("if(('fafafa'.replace(/a/g, (0x99).watch))) {/*infloop*/for(var __count__; __proto__; 0/0) export constructor; }");
tryItOut("do switch((this += <><x><y/></x></>)) { default: 0.1;break; case 3: case 0: return; } while(([15,16,17,18].map([1,2,3,4].map, <x><y/></x> ..  '' )) && 0);");
tryItOut("L: if(true) { if (this) {(true;gc() } else  \"\" ;} const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let prototype in (this.__defineGetter__(\"prototype\", [1,2,3,4].map))) yield\nexport __iterator__;");
tryItOut("throw  /x/g ;\nM:while((<x><y/></x>) && 0)export *;\n");
tryItOut("/*for..in*/L:for(const constructor = ({__count__ setter: (({}).hasOwnProperty).apply, prototype: 0 }) in 0.1[-1]) {M:switch(({})) { default: 'haha'.splitbreak;  } }");
tryItOut("L:if((!<>__noSuchMethod__: null</>.valueOf(\"number\"))) {let __proto__, constructor; } else  if (eval(\"/*infloop*/while( \\\"\\\" )gc()\", this.zzz.zzz)) {return\n;var x::__parent__ = <x/>; } else {return;Math.pow }");
tryItOut("/*for..in*/L:for(const prop in 3/0 if (true).__parent__) <><x><y/></x> </>");
tryItOut("/*for..in*/for(var __noSuchMethod__ = void  in __noSuchMethod__) throw <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in eval(\"let constructor, __proto__;;\", (window.propertyIsEnumerable(\"constructor\")))) L:with(this ^ <><x><y/></x></>){; }");
tryItOut("if((uneval(<y><z/></y>)).__iterator__) { if (void (undefined >> <><x><y/></x></>)) export *;} else .2;");
tryItOut("do ; while(((Object((uneval(this))))) && 0);");
tryItOut("{const __proto__ = [,,], __parent__ = this; }\n__iterator__ = false, __noSuchMethod__ = <y><z/></y>;\n\nif(#2=({yield: [1]}))  else  if (({__count__ setter: gc })) {const __proto__ =  \"\" ;Math.sin }");
tryItOut("if((prop.__proto__ = (__proto__%=<y><z/></y>))) L: {/*infloop*/for(const constructor = <x><y/></x>; __parent__; <y><z/></y>) return;; }");
tryItOut("/*for..in*/L:for(var __parent__ = <y><z/></y>['prop'] = (uneval([[1]])) in [z1]) { }");
tryItOut("with((prop = __noSuchMethod__))(__count__);");
tryItOut("/*for..in*/for([constructor, ] = ((p={}, (p.z = arguments = @foo)())) in [[1]].__lookupSetter__(\"function::__noSuchMethod__\")) (<x><y/></x>);u");
tryItOut("yield function  prototype (__iterator__, delete) { yield  ''  } ;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = [-3/0.eval(true).throw((new (arguments)())) for (__noSuchMethod__ = window.valueOf(\"number\"), constructor in window) if (@foo)] in  \"\" .__lookupGetter__(\"__parent__\")) ;");
tryItOut("/*infloop*/L:while(\tnull())gc()");
tryItOut("");
tryItOut("let(__proto__ = ((const prototype = [z1]) /= (*::*))) ((function(){for(let y in [5,6,7,8]) this.zzz.zzz;})());");
tryItOut("if(([15,16,17,18].filter(__iterator__.throw(function ([y]) { }) !== 1.2e3, window ^=  /x/ .watch(\"prop\", [1,2,3,4].map)))) this.zzz.zzz; else {/*infloop*/L:for(*::*; *::*; ({a1:1})) {yield; } const prototype; }");
tryItOut("/*infloop*/for((uneval(prototype-=[z1,,])) - (x::__parent__).__noSuchMethod__ =  /x/ .unwatch(\"__count__\"); (({<x/>: (uneval(__noSuchMethod__--)) })); <x/>{yield; } ) {if(([<x><y/></x> != while((this) && 0)export *;])) /*infloop*/do {({}).__lookupGetter__ } while(this);L:if(([window]) |=  /x/  for each (__parent__ in this)) return; else  if (*()) {0; } }");
tryItOut("{}");
tryItOut("{if(<x><y/></x>) { if (({})) {{}((Math.sin).apply).call }} else let __proto__;(new Function(\"export *;\")) }");
tryItOut("return this;\n\n");
tryItOut("try { return; } finally { constructor = __count__; } ");
tryItOut("for(let y in []);");
tryItOut("L: {L:do {yield;yield; } while(([15,16,17,18].filter(undefined, <x><y/></x>) &= __parent__) && 0);var constructor, function::prop; }");
tryItOut("return let (prop) yield <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x><y/></x>.(1.2e3)) {throw <y><z/></y>; }");
tryItOut("/*infloop*/for(<x><y/></x>; (<><x><y/></x></>).call( '' , @foo,  /x/ ); \t<><x><y/></x></>) yield;");
tryItOut("L:with({__count__: 0x99}){(*);continue L; }");
tryItOut("with({prop: !([1,2,3,4].map).call([[1]],  '' )}){(<x/>); }");
tryItOut(";let prototype = this, __proto__;\n({}).hasOwnPropertygc()\n");
tryItOut("let (__count__ = (<><x><y/></x></> .@ this[undefined.__noSuchMethod__])) { /*for..in*/for(let setter = this.__defineGetter__(\"prototype\", new Function) in true) {evalvar __iterator__ = <><x><y/></x></>; } }");
tryItOut("/*infloop*/L:for(let prop = (({ ({ __noSuchMethod__: __parent__, prop: __noSuchMethod__ }): ({ prop: ({ constructor: __proto__, __parent__: __proto__ }), __proto__: [] }), __noSuchMethod__: [] }) = prop); <y><z/></y>; ({ __proto__: __count__, __iterator__: __iterator__ }) =  /x/g .eval((( \"\"  > <><x><y/></x></>) >= (__noSuchMethod__).call))) {/*for..in*/for(const [__iterator__, __iterator__] = (prop.constructor setter= [1,2,3,4].slice) in prop) {const __proto__ = 0/0, __count__ = false;gc() } }");
tryItOut("/*infloop*/do {{} } while(window);");
tryItOut("var __parent__\n");
tryItOut("/*for..in*/L:for([__parent__, __noSuchMethod__] = (function (prototype, getter) /x/g )() in <bbb xmlns:ccc=\"undefined\"><ccc:eee></ccc:eee></bbb>.((3.141592653589793.__lookupSetter__(\"prototype\")))) switch( /x/ ) { case <x/>: let constructor;break; default: break; throw window;break; case *: return;case 3: case 9: return  /x/g ;break; case 4: return; }");
tryItOut("{ }");
tryItOut("M:if( /* Comment */* &= 0/0) gc() else  if (<><x><y/></x></> != <x><y/></x>) {return;/*for..in*/for(const constructor in <><x><y/></x></>) <y><z/></y> = <><x><\ty/></x></>; }");
tryItOut("with(return)export prop;");
tryItOut("do var prototype; while((let (__parent__ = ({__proto__: window})) (__iterator__ if (4.))) && 0);");
tryItOut("L:switch(this.zzz.zzz.prop) { case 9: gc()\n(__count__);\nbreak; var ({ __proto__: prop, getter: yield }) =  '' ;break; default: break; case 1e81: gc()break; case <employee id=\"1\"><name>Joe</name><age>20</age></employee> >= <y><z/></y>: case 1: yield;\ngc()\ncase 1: yield undefined;break;  }");
tryItOut("L: /*infloop*/for(default: break; case function::prop: export *;break; (false);;__proto__, prototype = this;break; break; case 6: break; case 0.1: break; case false: case <x><y/></x>: break; case [[]]: case -0: (-3/0);{}break; return ({});break; ; true; *) (window);");
tryItOut("prototype.constructor = __noSuchMethod__;");
tryItOut("let (prototype, __proto__) { ; }\n");
tryItOut("export __iterator__;return; const __noSuchMethod__;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = <><x><y/></x></> for (prop(true - constructor) in this) if (__count__) in *) /*for..in*/for(var __iterator__ in false) {yield <x><y/></x>;return; }");
tryItOut("with(new (null)().__iterator__)throw __proto__.propertyIsEnumerable(\"__iterator__\");");
tryItOut("export *\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in #3={a:#3#}) continue M;");
tryItOut("gc() const constructor\nbreak ;");
tryItOut("{(__noSuchMethod__);yield; }");
tryItOut("/*infloop*/M:for(const __proto__ = #3={a:#3#}; return <><x><y/></x></>; [(function ([y]) { }.__defineGetter__(\"prop\", (1 for (x in []))))].sort(Math.sin) ^= (yield <y><z/></y>).__lookupSetter__(\"__iterator__\")) window;");
tryItOut("if(__count__ .@*:: <x><y/></x>) {__noSuchMethod__, prototype;<x><y/></x> } else  if ((constructor = new false(<><x><y/></x></>, false))) {with({this: prop})return prototype; }");
tryItOut("L:with({\f__count__: (let (constructor = false, prototype)  '' )}){if(<y><z/></y>) {yield <x><y/></x>; } else  if (null())  }");
tryItOut("/*infloop*/do __parent__ = yield, __iterator__; while((prop));");
tryItOut("/*for..in*/for(__count__ in ((function(y) { yield y; window;; yield y; }(<x/> ? [11,12,13,14].filter : prototype))((let (__proto__) constructor))))continue L;");
tryItOut("while((__parent__) && 0)M:if(( ''  if (@foo))) export *; else  if (this) {let prototype = null, prop;return; }");
tryItOut("let (({ __parent__: [, prototype, ], __proto__: prop })) { ( \"\"  >>>=window)\n }");
tryItOut("export *\n");
tryItOut("L: {}\ngc()\n");
tryItOut("M:do {with({__iterator__: this.__defineGetter__(\"__proto__\", <><x><y/></x></>)}){__count__ = ({}), prototype;gc() } } while(((\n<><x><y/></x></>.__defineGetter__(\"prototype\", new Function))) && 0);");
tryItOut("while((<x><y/></x>.* for ((constructor) in (true.@*)) for (constructor['__parent__'] in true)/* ? __parent__ = this.__defineGetter__(\"__count__\", ({}).__lookupGetter__) : (-0.hasOwnProperty(\"__proto__\"\f))) && 0){{}\nreturn <x><y/></x>;\n }");
tryItOut("let(({ constructor: __proto__ })) { let(__iterator__) ((function(){yield  /x/  ^ <><x><y/></x></>;})());");
tryItOut("if((*::*.watch(\"__proto__\", function(q) { return q; })) || <x><y/></x>++.__defineSetter__(\"__parent__\", (1 for (x in [])))) window; else /*infloop*/for(undefined; false; <x/>) {(__parent__); }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("if(({ get __parent__ prop ()<x><y/></x>, constructor: prop })) { if (((undefined)[<x><y/></x>.__lookupSetter__(\"__iterator__\").unwatch(\"__noSuchMethod__\")])) {if((3/0.throw(window))) { if ((<x><y/></x> <<= __count__)) yield; else (<<y/></x)>;}gc() }} else {/*infloop*/do {constructor, []; } while((({__noSuchMethod__: prototype.(window)}))); }");
tryItOut("{}");
tryItOut("let(__parent__, __count__ = <y><z/></y>) ((function(){([z1]);})());");
tryItOut("L: {{;yield null; }\n__proto__ }");
tryItOut("throw this\n/*for..in*/M:for(let __proto__ in ((((.yoyo(<y><z/></y>.eval(<y><z/></y>))).watch).call)([ '' ])))/*infloop*/while\r(<><x><y/></x></> ? window : 1.3);");
tryItOut("if(<x><y/></x> << window) {export *; } else  if ((__parent__.unwatch(\"__iterator__\"))) const prototype;( \"\" );\ngc()\n");
tryItOut("with({prototype: ({ get prop(__proto__, __count__) { return <x/> } , constructor setter: {} })})const __noSuchMethod__, __parent__;");
tryItOut("switch((this.zzz.zzz)) { case ({__count__ setter: Math.sin }): with(-3/0.__defineSetter__(\"__parent__\", <x/>).propertyIsEnumerable(\"__noSuchMethod__\")){while((@foo) && 0){throw <x/>;gc() } }break;  }");
tryItOut("return;\n( \"\" );\n");
tryItOut("/*infloop*/M:for(let [, , ] = true.\fyoyo(5.0000000000000000000000); new *::*.valueOf(\"number\") for (@foo['__iterator__'] in  /x/g )((#0=[__parent__ = []]), (<><x><y/></x></>.unwatch(\"prototype\"))); new (({}).hasOwnProperty)()) {__iterator__ = [,,]gc() }");
tryItOut("/*infloop*/do if(<x/>) {;; } while((window >>>=@foo ::  \"\" ))\n(this);return;");
tryItOut("L:do gc() while((0 *= .2) && 0);");
tryItOut("/*for..in*/for(/*\n*/((__parent__-=__count__))(this.\t__defineGetter__(\"constructor\", [1,2,3,4].map)) in {}) while(((window).call(this, function(id) { return id })) && 0){<x/>;{} }");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", function  constructor (constructor, __count__) { yield *::* } ) % [[]] -= 1e-81) { if (((null ? null : 0.1)())) {return false; \"\" ; } else /*infloop*/for(__count__; let.__proto__ getter= /a/gi; (Iterator()).__defineGetter__(\"__parent__\",  /x/ )) {throw 0; }}\n/*for..in*/for(__noSuchMethod__ = ((new Function(\"(1e-81);\"))).call(<y><z/></y>, ) in () <<= ) {return; }");
tryItOut("if( /x/  << (![,])) __parent__, __proto__; else  if (this.__defineSetter__(\"__count__\", /a/gi) ^ ((1 for (x in []))).apply.prop) M:if(export __parent__) return; else  if (__noSuchMethod__ = <><x><y/></x></>.__lookupSetter__(\"__count__\")) {} else throw prototype; else ;");
tryItOut("/*for..in*/for(var constructor = window in @foo) throw 3.141592653589793;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const function(id) { return id } %= this in ) {export *; }");
tryItOut("let (__count__ = ([<y><z/></y>]).(<x><y/></x>.__defineSetter__(\"__noSuchMethod__\", \tfunction  __parent__ () { yield <><x><y/></x></> } ).__count__), __count__) { if(window) { if (<><\fx><y/></x></>) {return;continue ; }} else yield 033; }");
tryItOut("do /*infloop*/for(let prop; *; *::*) (<y><z/></y>); while((<x/>.isPrototypeOf([1,,]).hasOwnProperty(\"__noSuchMethod__\").yoyo((1e-81 ? * : <x><y/></x>))) && 0);");
tryItOut("/*infloop*/M:do {if() {return 1e+81;throw *; }throw @foo; } while(-(eval(\"let (__proto__ = return prop) { export *; }\", false ^= 1e4.__defineSetter__(\"prototype\", function(y) { yield y; export *;; yield y; }))));");
tryItOut("__parent__ = __count__;");
tryItOut("/*for..in*/for(let [prototype, constructor] = (yield ({__proto__: <x><y/></x>.(this)})) in ((__parent__.eval([,,])))(<x><y/></x>, <>__noSuchMethod__</>)) yield *::*;(<x><y/></x>)");
tryItOut("");
tryItOut("/*for..in*/for(var []((1.2e3 % undefined) & 0.watch(\"__count__\", this)) in (([1,2,3,4].slice)([11,12,13,14].sort)))let (x::constructor, __proto__ = 1e+81) { continue M; } const __noSuchMethod__; const setter;");
tryItOut("let (__noSuchMethod__, __parent__ = @foo) { __parent__, __count__ = false; }");
tryItOut("if(constructor.@foo( { return  /x/g  } .__parent__ getter= (1 for (x in [])), <x><y/></x>)) {yield; }");
tryItOut("for(let y in []);");
tryItOut("if((-1).yoyo(<x><y/></x>) in [yield this.__lookupGetter__(\"__noSuchMethod__\")]) { if (new String()) let __parent__ = @foo;} else /*infloop*/while(3){var constructor; }");
tryItOut("switch(__count__.prototype setter= 'haha'.split) { default: break; const constructor, <x><y/></x> = *::*; }");
tryItOut("with({__count__: ((undefined.hasOwnProperty(\"__noSuchMethod__\")).prop = prop)})yield; const yield;");
tryItOut("var __iterator__ = [], ");
tryItOut("let (__count__, [\r, constructor, ] = (([1,2,3,4].slice)(__noSuchMethod__ = null, __parent__))) { L: {return;return; } }");
tryItOut("export __proto__;\n{}\n");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = prototype.prototype getter= undefined in new (eval)(eval(\"<><x><y/></x></>\",  /x/g ))) do {{; }export *; } while((([0 for (__noSuchMethod__ in  /x/ )] -= prop.__proto__)) && 0);");
tryItOut("L: (0);throw *::*;");
tryItOut("__iterator__ = prop;");
tryItOut("/*for..in*/for(__parent__ in  \"\" ) {break ; }");
tryItOut("/*for..in*/for(prop in (((window).__defineSetter__)(window.__noSuchMethod__ = *))){/*infloop*/L:for(((p={}, (p.z = window)())); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; false['prop'] = window) {gc()throw *::*; } }");
tryItOut("try { with({}) for(let y in []); } catch(__count__) { return false[<y><z/></y>]; } finally { yield new Array(true, <><x><y/></x></>); } ");
tryItOut("/*infloop*/M:for(let function::prototype; (yield (0x99)); ({prototype: <><x><y/></x></> in *.@foo})) {export *;{prop;continue L; } }");
tryItOut("this.zzz.zzz;");
tryItOut("with(({break ; } .@x:: false)){do const prop = window, prototype; while((.2) && 0); }");
tryItOut("L:with({__count__: ()}){{}; }\n");
tryItOut("for(let y in []);");
tryItOut("gc()\nthrow <x><y/><//*\n*/x>;\n");
tryItOut("L\r: {{} }");
tryItOut("with({}) yield (eval)();");
tryItOut("/*infloop*/for((*::* .@*:: constructor = <x><y/></x>); [[1]] .. <><x><y/></x></>; (new /a/gi().valueOf(\"number\"))) /*infloop*/for(const __parent__; eval(\"@foo.isPrototypeOf( /x/g )\", (__parent__ || prototype)); ([11,12,13,14].map).propertyIsEnumerable(\"__noSuchMethod__\")) {do {(this); } while((true) && 0);false; }");
tryItOut("/*for..in*/for(const [1.2e3, __iterator__] = let (prop = __iterator__) (-@foo) .@*:: (p={}, (p.z = < yield @foo; x<y/><x >)())(<><x><y/></x></> ? prototype : (function ([y]) { })()) in prototype = <x><y/></\nx>) /*for..in*/for(var prototype.constructor in ((Math.sin)(this.__lookupGetter__(\"__iterator__\")))){gc()gc() } const __noSuchMethod__;");
tryItOut("if((new Exception())) {gc()new Function } else  if ([11,12,13,14].filter()) {/*for..in*/L:for(prop = function(id) { return id } in (<x><'y/)></x>__parent__)  } else return  \"\" ;");
tryItOut("if((function(q) { return q; }(this))) {var __parent__ = __count__; } else (window);");
tryItOut("return;\nexport  '' ;\n");
tryItOut("L:with({prop: <><x><y/></x></>[this]}){window; }");
tryItOut("<>constructor</>; const constructor;");
tryItOut("L: {/*for..in*/for(var constructor = *::* in  \"\" ) {yield; } }");
tryItOut("export *; }");
tryItOut("do {for(let y in [5,6,7,8]) prototype = __parent__;\fdo let __noSuchMethod__, __noSuchMethod__ = 3.141592653589793; while(((yield ((function(y) { yield y; (<x/>);; yield y; })()))) && 0);\t } while((![z1]) && 0);/*\n*/");
tryItOut("with([,,z1])yield;");
tryItOut("switch(<x/> ? <y><z/></y> : @foo = (<x><y/></x>.__defineSetter__(\"prop\", Math.pow))) { case this.zzz.zzz: yield this;default: break;  }");
tryItOut("this.zzz.zzz;");
tryItOut("gc()\nyield;\n");
tryItOut("{/*for..in*/for(let {let __parent__, __noSuchMethod__ = @foo; } in (__proto__.__proto__)) {} }");
tryItOut("yield;");
tryItOut("(<x><y/></x>);");
tryItOut("/*for..in*/for(const (function::prop) in (\t(new Function)(({__iterator__: /*\n*/(undefined.propertyIsEnumerable(\"constructor\")) }))))/*for..in*/for(__parent__ = -3/0 in [z1]) continue L;");
tryItOut("switch(({__noSuchMethod__ setter: (this).__defineSetter__ })) { case (true .. ({a1:1})) for (__iterator__\f in  '' ) for each (__proto__ in null): with({}) { return [z1]; } case 6: /*for..in*/for(let prototype in ((Math.pow)( /x/g ))){}default: /*for..in*//* nogeckoex bug 349964 */ for  each(function::prop((void <x><y/></x>)) in null) {export *; }break; break;  }");
tryItOut("const __count__, prototype;\nbreak ;\n");
tryItOut("break \n/*infloop*/M:for(delete = <><x><y/></x></>; window; *::*) {let __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const ( \"\" .throw(__noSuchMethod__))['__noSuchMethod__'] in (eval(\"/*for..in*/for(var constructor in ((false)(null))){ }\",  /x/  || <><x><y/></x></>))) throw constructor\n");
tryItOut("for(let y in [5,6,7,8]) /*for..in*//* nogeckoex bug 349964 */L: for  each(var __parent__ in <x/>) {[1,,];let constructor = prototype, __count__; }");
tryItOut("/*infloop*/for(const constructor; new (new (([,]).watch)([,,z1], (function ([y]) { })()))(__iterator__ & <x><y/></x>); (<x><y/></x> , * + (<x><y/></x>.throw(<><x><y/></x></>)))) yield;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = #1=[#1#] in *::*.__count__ = this.__defineSetter__(\"__parent__\", (new Function).call)) {throw let __parent__ = 0.1;; }");
tryItOut("if([15,16,17,18].some(gc, *::*)) return arguments; else  if ( \"\" .hasOwnProperty(\"__iterator__\")) {gc() } else {export constructor;yield <x><y/></x>; }");
tryItOut("/*infloop*/for(__noSuchMethod__ = <y><z/></y>; __noSuchMethod__; 4.) {(<y><z/></y>); }");
tryItOut("let (({ constructor: ({ __noSuchMethod__: __proto__ }) }), __proto__ = (<y><z/></y> + #1# & Error(null, constructor))) {  }");
tryItOut("{{}return }");
tryItOut("/*for..in*/for(let [__count__, constructor] = #1=[#1#] in this) return  \"\" ");
tryItOut("/*for..in*/for(var __iterator__ in window) {let __noSuchMethod__, constructor;export *; }");
tryItOut("gc()\n");
tryItOut("/*infloop*/M:for(<x><y/></x>; arguments;  /x/g ) {throw false;return  /x/ ; }");
tryItOut("if(<><xxx {constructor}={ '' } /></>.throw((window .@ undefined))) { if ((__count__).__defineGetter__(\"__noSuchMethod__\", gc)) {return *; } else }");
tryItOut("/*infloop*/for(let ({ __parent__: [, ({ __noSuchMethod__: __proto__, __count__: __parent__ })], prototype: prop }) = (__proto__ = [[1]]); (@foo.*)++; this.zzz.zzz) export __iterator__;");
tryItOut("/*infloop*/for(let [, __count__.constructor, [], __noSuchMethod__, ] = (({ __iterator__: ({ __proto__: constructor, __parent__: __parent__ }), prop: __count__ }) = (__proto__ = this.__defineGetter__(\"prop\", (<x><\ry/></x>).watch))); prop = null; this.zzz.zzz\n) { }if(new Math.pow()) { if () {/*for..in*//* nogeckoex bug 349964 */ for  each(var try { yield <y><z/></y>; } catch(__noSuchMethod__) { /a/gi } finally { return; } .prop in window) {/*for..in*/for(let __proto__ in <x/>) {gc() } } } else L: {gc()(<x/>); }}");
tryItOut("if(false) { if (<y><z/></y>--) export *; else break ;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <><x><y/></x></>) {return [1]; }");
tryItOut("{L: {{} }L\n:do {(__count__); } while(((uneval(true))) && 0); }");
tryItOut("/*for..in*/M:for(prop in RegExp({})) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in [[]]) yield;default: break; break;  }");
tryItOut("switch(([1,2,3,4].slice)()) { case [11,12,13,14].sort: case +__proto__.__count__: <x><y/></x>; }");
tryItOut("/*infloop*/for(1.2e3.throw(*::*); this.zzz.zzz; new (__noSuchMethod__)()) {const __proto__ = function ([y]) { }; }");
tryItOut("if(constructor) export __count__; else __noSuchMethod__ = this;");
tryItOut("let([__parent__, ({ __parent__: prop }), , __parent__, ] = ({a1:1})) { try { {} } finally { gc() } ");
tryItOut("with([15,16,17,18].sort(new eval(), @foo in <\fx><y/></x>) >> new Object(this, <x/>))M:if((__iterator__ != <><x><y/></x></> % *)) { if (undefined >>>=null) if(this) __parent__ = window; else  if (this) {prototype = <x><y/></x>, getter; } else {export prototype; } else break M\f;}");
