tryItOut("L:if(@foo) { if (<x><y/></x>) {<><x><y/></x></>, __noSuchMethod__ = window; }} else {yield; }");
tryItOut("this.__defineSetter__(\"__noSuchMethod__\", function () { this; } )");
tryItOut("/*for..in*/for([__proto__, prototype] = (__noSuchMethod__) in (return [1];.__defineGetter__(\"__noSuchMethod__\", function  __noSuchMethod__ (__noSuchMethod__, prototype) { yield .2 } ))) {L: (__count__); }");
tryItOut("/*infloop*/L:for(const prototype = __parent__ = [__count__, __count__, __count__]; (#1=[#1#] ..  \"\" )--; *()) yield  \"\" ;");
tryItOut("yield try { yield; } finally { ; }  *= @foo;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("L:if(--undefined <  /x/ .__lookupSetter__(\"__parent__\")) {__proto__, x::__proto__/*infloop*/for(__iterator__ = <x><y/></x>; <><x><y/></x></>;  /x/g ) {{}return; } } else {return;{0; } }");
tryItOut("/*infloop*/for(0.1; undefined; undefined) {throw __noSuchMethod__; }");
tryItOut("for(let y in []);");
tryItOut("do if(-1.__lookupSetter__(\"__count__\"))  { yield function  constructor (prop, function::prototype) { continue ; }  }  while((({__proto__:  ''  + <><x><y/></x></>, __noSuchMethod__: (-0) })) && 0);");
tryItOut("/*infloop*/for(var constructor = --new Object().@foo\f; (eval(\"__noSuchMethod__;\", [<x\r><y/></x>]).*); void (\n<><x><y/></x></>).valueOf(\"number\"\n)) {/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in this)  }");
tryItOut("/*for..in*/for(const __iterator__ = __parent__ = <x><y/></x> in <x><y/></x>) export *;");
tryItOut("/*infloop*/M:do {(prop); } while(this);");
tryItOut("if(<x/>\t) return  /x/ ; else  if (__parent__) {; }");
tryItOut("if(this.zzz.zzz) /*infloop*/for(const __iterator__; [1,2,3,4].map().__lookupGetter__(\"__parent__\"); (<y><z/></y>.eval(@foo))) gc()\n");
tryItOut("L: {(function (constructor, constructor)true).call }");
tryItOut("M:if(eval(\"<y><z/></y>.*\", <><x><y/></x></> , prototype;)) { if ((({ get __parent__(__noSuchMethod__, prop)*::*.__lookupSetter__(\"__noSuchMethod__\"), prop: this.__defineSetter__(\"__parent__\", gc) })))  else { }}");
tryItOut("/*for..in*/M:for(const prop in ((arguments)( '' )))var delete, __iterator__;");
tryItOut("/*for..in*/M:for(const [15,16,17,18].sort(eval, <x><y/></x>).constructor in \f) {const __count__ = true, prop; }");
tryItOut("let(prop = ) ((function(){( '' ) = constructor;})());");
tryItOut("/*for..in*/for(let [prototype, x::__parent__] = (<ccc:ddd> </ccc:ddd>) in true) null;");
tryItOut("{L:with({constructor: ((function(y) { yield y; return;; yield y; })(<><x><y/></x></>, [z1]))})if( \"\" ) {export *;export __parent__; } else  if (__count__) (__proto__); }");
tryItOut("M:if(setter = [<x><y/></x>].map(function (prototype) { gc() } )) /*for..in*/L:for(__count__ in (((new Function(\"yield;\")))(undefined))){}");
tryItOut("L:while((([(~<x><y/></x>)].map(({}).__lookupGetter__))) && 0){/*infloop*/L:for(let __noSuchMethod__; (__count__.(__iterator__)); this ? 3.141592653589793 : <><x><y/></x></>) {if(__count__) {} else  if (1e+81) {;return; } else throw 1e81; }let (({ __count__: ({ constructor: __proto__, __noSuchMethod__: __iterator__ }) }) = (function ([y]) { })()) { var p; } }");
tryItOut("{Function<ccc:ddd><x><y/></x><ccc:ddd></ccc:ddd></ccc:ddd> }");
tryItOut("L:with({__parent__: this.__defineGetter__(\"prototype\", <x><y/></x>)}){;; }");
tryItOut("/*infloop*/while(this){/*for..in*//* nogeckoex bug 349964 */ for  each(const (function::__parent__.__iterator__ =  \"\" )['__parent__'] in (({__proto__: yield  /x/ , __proto__: yield false }))) {(new ((window).__defineSetter__)()); } }");
tryItOut("{(<x><y/></x>);{} }");
tryItOut("switch(<x><y/></x>) { default: yield 5.0000000000000000000000;case <><x><y/></x></>: {;export *;\f }break;  }");
tryItOut("with({}) { throw \fprop; } ");
tryItOut("let(prop = ( '' )[([11,12,13,14].filter)], constructor) { with({}) prototype = constructor;");
tryItOut(" ");
tryItOut("{if(+[z1,,]) { if (this.zzz.zzz) {yield <y><z/></y>; } else {export *;case 1: yield  \"\" ;break; case __iterator__, x::__parent__: __iterator__ = prop; }} }");
tryItOut("if(__iterator__) {let __noSuchMethod__ =  /x/ ; } else  if (/a/gi()) <bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>");
tryItOut("throw __proto__;");
tryItOut("M:do {;( \"\" ).__defineSetter__ } while((<><x><y/></x></>) && 0);");
tryItOut("switch(<xxx {__count__}={ /x/g } />) { default: {yield false;break M; }break; case ('fafafa'.replace(/a/g, function  constructor () { yield <><x><y/></x></> } )) == <><x><y/></x></> === 0/0: false; }");
tryItOut("if(__noSuchMethod__.prototype) { if (return;) {yield <x/>;yield this; } else throw window;}");
tryItOut("{/*for..in*/for(let __noSuchMethod__ in <><x><y/></x></>) {yield true; } }");
tryItOut("const constructor = undefined;");
tryItOut("{M:if(<x/> || this) {yield <x><y/></x>; } else {throw <x><y/></x>; }Math.sin }");
tryItOut("/*for..in*/for(let __iterator__ in (((( '' ).watch).call)(#1=[#1#]))){ }");
tryItOut("/*for..in*/M:for(let prop =  /x/g .hasOwnProperty(\"constructor\").__iterator__ = (1 for (x in [])) in <zzz>prop = [1]</zzz>) {/*for..in*/M:for(var [__iterator__, prototype] = ({__proto__: __parent__ = __noSuchMethod__}) in __count__ = (true).call( /x/ ,  /x/g )) {export * } }");
tryItOut("let __proto__ = *\n");
tryItOut("yield <x><y/></x>\nconst __parent__ = <x><y/></x>, prototype;");
tryItOut("if((<x><y/></x>.unwatch(\"__parent__\"))) yield window; else  if ((this.yoyo(<><x><y/></x></>))) var *::* = undefined;");
tryItOut("return;");
tryItOut("M:while((__noSuchMethod__ = 033) && 0)([z1,,])\n");
tryItOut("/*for..in*/L:for(__count__ in ({prototype: this })) {}");
tryItOut("(new Function(\"const prototype =  \\\"\\\" ;\"))");
tryItOut("if(*.unwatch(\"__iterator__\")) let __proto__ = <x><y/></x>; else  if ([15,16,17,18].some(/a/gi, 0.1)) { } else yield window\n");
tryItOut("/*infloop*/for(const __parent__; (false.__noSuchMethod__ -= [15,16,17,18].some(function  __noSuchMethod__ (constructor) { return false } , null) -= (@foo.\nhasOwnProperty(\"__noSuchMethod__\"))); undefined) (#2=({prop: //h\n[(1.2e3 << .2) for each (__noSuchMethod__ in *::*) for (prototype in constructor)] ? [<x/>].some((({__count__: undefined })).__defineSetter__) : function(id) { return id }}))");
tryItOut("/*infloop*/for(new <y><z/></y>( \"\" , <x/>); (<x><y/></x> ? <x><y/></x> : *); *::*) return;");
tryItOut("while((<><x><y/></x></>) && 0){return  \"\" ; }\n/*for..in*/for(__count__.__parent__ in  '' ) yield 1e4;\n");
tryItOut("if(#0=({__proto__: arguments})) var __iterator__, prop = [,,]; else do {let constructor, __proto__ = <x><y/></x>; } while((new (*)()) && 0);");
tryItOut("try { this.zzz.zzz; } finally { for(let y in []); } do continue L; while((<><x><y/></x></>.eval(<><x><y/></x></>)) && 0);");
tryItOut("const <><x><y/></x></>.__count__ = __proto__.__iterator__; const prop;");
tryItOut("with({__noSuchMethod__: new (function (prop, []) { {} } )( '' )})/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in null) {(3);continue L; }");
tryItOut("/*infloop*/for(let __proto__; \t__parent__[1e-81].__iterator__; <y><z/></y> &= <x><y/></x> in <><x><y/></x><\f/>) {let __iterator__ = <y><z/></y>;return; }");
tryItOut("/*\n*/if(window) (__iterator__ = 1e+81); else  if (__noSuchMethod__) {true;export prototype; } else {yield  /x/g ;__count__ = 5.0000000000000000000000, __count__; }");
tryItOut("if(({constructor: __noSuchMethod__ }) .@x:: constructor) { if (this) {function () { return  /x/  }  }} else function ([y]) { };");
tryItOut("\tswitch((yield (-1) / this))\f { default: break;  }");
tryItOut("with({__noSuchMethod__: #1=[#1#].isPrototypeOf(<y><z/></y>)})yield __noSuchMethod__;");
tryItOut("while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>) && 0){ }");
tryItOut("if((new (0/0)((new Function()), (__count__.prop = <y><z/></y>)))) if(typeof <><x><y/></x></>) { if ((function  __iterator__ (getter, __count__) {  } ).call(((<y><z/></y>)), (new Array(<y><z/></y>,  \"\" )))) {throw <x/>;return; }} else {} else {/*for..in*/L:for(const prototype in ((function(q) { return q; })( /x/ ))){}export __count__; }");
tryItOut("{} const __noSuchMethod__;");
tryItOut("while(([,,]) && 0)throw [[1]];");
tryItOut("{if(prototype) {continue M; } else yield; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do {break M;{} } while([__noSuchMethod__].map(([1,2,3,4].map).apply));");
tryItOut("/*for..in*/M:for([__parent__, __parent__] = new Object(constructor, ) in <x><y/></x>) {__noSuchMethod__ }");
tryItOut("L:if(((*::* for (prop in <x><y/></x>)))) false; else  if ((uneval(@foo))) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <x><y/></x>.watch(\"__iterator__\", (false).watch)) {return <><x><y/></x></>;; }");
tryItOut("/*infloop*/do  /x/g ; while(null);");
tryItOut("(1 for (x in []))");
tryItOut("M:if(let (__proto__ = (new <x><y/></x>(window, true))) [Math.pow]) {*;let prop; }");
tryItOut("/*infloop*/for(const __iterator__; (function ([y]) { })(); __noSuchMethod__) {return;{} }(-[15,16,17,18].map(Function,  /* Comment */*::*));");
tryItOut("/*for..in*/for(var prop in ((Math.pow)((-0) !== <><x><y/></x></>)))gc()");
tryItOut("if(__parent__ = ( for (__noSuchMethod__ in this.__defineSetter__(\"__noSuchMethod__\", function (prop)<x><y/></x>)) if (yield [[1]]).eval(new (<x/>)(prop, __parent__))).constructor) __proto__, prop;");
tryItOut("L:while(((new RegExp(<x/>, true).propertyIsEnumerable(\"prototype\"))) && 0)with({prop: \ffunction::__count__ = @foo})L: return <><x><y/></x></>;");
tryItOut("with(<x><y/></x>)gc()");
tryItOut("{export __iterator__;do function  constructor () { return [] }  while((*::*.yoyo\f(false)) && 0); }");
tryItOut("do <x><y/></x> while((arguments) && 0);");
tryItOut("let (__proto__ = __iterator__) { this.zzz.zzz; }");
tryItOut("let([]) { for(let y in []);");
tryItOut("/*infloop*/for(var __iterator__; <x/>; <y><z/></y>) export prop;");
tryItOut("/*infloop*/for(var prop = *::* <  /x/ ; (__proto__ = prop = ((new (function  prototype ()#1=[#1#])(each))[(p={}, (p.z = <><x><y/></x></>)())])); (yield (new 0.1(0.1, *)))) export prototype\n");
tryItOut("if(({__iterator__: let (__proto__) ({}),  get __parent__(__iterator__, prototype) { return ({__noSuchMethod__:  /x/g }) }  })) {{}undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in new  /x/g  >>> (-0)((eval(\"\", __count__)), <x/>)) if( /x/g \r) { if (<ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd>) /*for..in*/L:for(let __noSuchMethod__ in .2) return @foo;} else \t{(constructor); }");
tryItOut("break L\nvar __parent__, prop = <x><y/></x>;");
tryItOut("/*infloop*/while(__proto__ = new *.__parent__()){}");
tryItOut("if(((Function)(<x><y/></x>))) { if (([1,2,3,4].map)()) {var __noSuchMethod__ = __iterator__;const prop;M:if(-0) ; else  if ([]) export *; }} else M:if(*::*) { if ([1,,]) yield <x><y/></x>; else {export *;return this; }}");
tryItOut("/*for..in*/for(var __count__ in <y><z/></y>) (<><x><y/></x></>);");
tryItOut("if(<xxx>{__proto__}</xxx>) let constructor, __count__ = <x><y/></x>; else  if (([<> </>])) return  /x/g ;\nlet __iterator__ = window, __proto__;\n");
tryItOut("<x><y/></x>/*infloop*/L:for(let __proto__; window; <x><y/></x>) {var prop, prop =  /x/g ;const __noSuchMethod__, __iterator__; }");
tryItOut("L: {export __proto__; }");
tryItOut("/*infloop*/for(var __proto__; <x><y/></x>; -0) {return;{} }");
tryItOut("if((<x/>)[4..throw(<x><y/></x>)]) if(__iterator__ =  ''  ^ <x><y/></x>.(<><x><y/></x></>)) { if (<x/>.prop) {<x><y/></x>; }} else {const constructor = window;const __noSuchMethod__; } else  if (((( /* Comment */( /* Comment */prop = <><x><y/></x></>)).__defineGetter__(\"__noSuchMethod__\", __count__.watch(\"__parent__\", function(y) { yield y; ; yield y; }))).__lookupSetter__(\"__parent__\"))) if(<x/> / prototype) {function  __parent__ () { return * }  } else (<x><y/></x>); else { }");
tryItOut("gc()");
tryItOut("if(__count__) {throw yield; }");
tryItOut("if(function () { return yield false } ((<zzz>*</zzz>.(__noSuchMethod__.(__count__))))) {L: yield;{var prototype = *, __proto__; } } else {var __count__; }");
tryItOut("continue M;");
tryItOut("let (__noSuchMethod__, __proto__) { /*infloop*/L:for(var ({ __proto__: /a/gi }) = __iterator__['prop'] = ; yield window.__defineSetter__(\"__iterator__\", (prop).__defineSetter__); <><x><y/></x></>.propertyIsEnumerable(\"__count__\")) /*infloop*/for(let constructor = <y><z/></y>; <x><y/></x>;  '' ) \t{;yield <x><y/></x>\f; } }");
tryItOut("throw StopIteration;");
tryItOut("try { default:  } catch(__proto__ if __noSuchMethod__ = 1.3 ? [[]]\n : this >>>=033\n) { for(let y in [5,6,7,8]) let(prop, __parent__ = undefined\n) ((function(){for(let y in []);})()); } ");
tryItOut("yield <x><y/></x>.watch(\"__count__\", window).__proto__;");
tryItOut("with(((yield <y><z/></y>.prototype)))gc()");
tryItOut("yield;\n{}\n\nreturn true;");
tryItOut("/*for..in*/M:for(var __iterator__ in 1.2e3) {constructor; }");
tryItOut("{'haha'.splitgc() }");
tryItOut("yield; const prototype;");
tryItOut("return this;");
tryItOut("continue ;\r\n__count__:  \"\" \n");
tryItOut("{const __parent__; } const constructor;");
tryItOut("/*infloop*/for(let __count__; new (Math.sin)(((eval).call(window, )), prop); <><x><y/></x></>.*) { }\n/*infloop*/for(prop.__proto__ = [1] - -1;  /x/ .yoyo((uneval(window))); (1 for (x in []))) with({prop: 1.3})(window);");
tryItOut("if((__count__(~ /x/ )-=@foo)) {/*infloop*/while(<x><y/></x>)return constructor; } else  if (__proto__ = window) {Math.pow/*infloop*/for(const __count__ = (__count__.prototype getter= function(q) { return q; }); (constructor =  /x/g ); __iterator__) {export *;(__parent__); } }");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(let __noSuchMethod__ = <x><y/></x>; *::*; <x/>) const prototype = this\n");
tryItOut("let(constructor = ([11,12,13,14].sort)) { prototype = constructor;");
tryItOut("/*for..in*/for(prototype.__count__ in constructor.prop) let (__noSuchMethod__) { let prop = (-1); }");
tryItOut("{continue M;<x><y/></x>; }");
tryItOut("/*infloop*/for(let prop; (uneval([[1]])).eval(true\n); prototype) {}");
tryItOut("return (undefined.constructor.propertyIsEnumerable(\"__noSuchMethod__\"));");
tryItOut("var set = <><x><y/></x></>;");
tryItOut("<x><y/></x>; const __iterator__;");
tryItOut("export prop;");
tryItOut("/*infloop*/for(__iterator__; (-0) += function(id) { return id }; *::*) {{yield <><x><y/></x></>; } }");
tryItOut("__iterator__.prop = prototype;");
tryItOut("if((new (--#1=[#1#])(<><x><y/></x></>() >>> [<y><z/></y> if (constructor)]))) {/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x><y/></x>) M:if(({a2:z2})) { if (1e-81) yield;} else {return window; } } else {033; { return this; }  }");
tryItOut("let (constructor = <><x><y/></x></>, __noSuchMethod__) { export prototype; }");
tryItOut("/*for..in*/L:for(let constructor in ((Function)((new (window)(*::*, false)))))return #3={a:#3#};");
tryItOut("/*infloop*/for(const prop; <><x><y/></x>\f</> ^ <y><z/></y>; [(yield prop)]) return <x><y/></x>;");
tryItOut("/*for..in*/try { ( /x/g ); } catch(prototype if (function(){const __count__, constructor;})()) { (@foo); } catch(prototype if (function(){const __iterator__, __iterator__ = 0/0;})()) { return; } catch(__parent__) { let function::__proto__ =  /x/g , __proto__ = <><x><y/></x></>; } ");
tryItOut("if([11,12,13,14].some.__lookupSetter__(\"prototype\")) {M:with({prototype: <ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd>}){ } } else  if (<><x><y/></x></>.throw(<y><z/></y>).propertyIsEnumerable(\"let\")) {{} }");
tryItOut("if(__iterator__) { if (<><x><y/></x></>) export constructor; else {{}export __noSuchMethod__; }}");
tryItOut("/*for..in*/for(const __noSuchMethod__ = <><x><y/></x></> :: (0.1).__defineSetter__ in <x><y/></x>) {<><x><y/></x></>; }");
tryItOut("/*infloop*/for(__parent__; window;  /x/g ) {L:switch(-0) { default: break; case <><x><y/></x></>: const __iterator__ = [z1];break;  }{yield constructor getter: Function\n;this; } }");
tryItOut("let(__proto__, prototype = [1,,]) ((function(){__noSuchMethod__ = <><x><y/></x></>, __iterator__;})());");
tryItOut("if(([(typeof this) for each (__count__ in #3={a:#3#}) for each (function::prop in __noSuchMethod__)])) { if ((<x><y/></x>)) if(prop) {<y><z/></y>; } else  if (__proto__ = this) {gc() }} else /*infloop*/for(get; x::__count__.__parent__ = 3;  \"\"  <<= -1) let __noSuchMethod__, __parent__;");
tryItOut("if(__proto__) {(<y><z/></y>); } else gc()");
tryItOut("if(<><x><y/></x></>) { if (*::*) {/a/gi(<x/>); }} else return;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*infloop*/for(true; this.__defineSetter__(\"__parent__\", ([[]]).watch); ({ __iterator__: each, __proto__: constructor }) = ((p={}, (p.z = __noSuchMethod__)())) >= __parent__ = ({a1:1})) { }");
tryItOut("/*infloop*/M:do /*for..in*/for(__proto__ in function(id) { return id }) return  /x/g ; while([15,16,17,18].filter([1,2,3,4].slice, new (( /x/g ).__defineSetter__\t)()));");
tryItOut("/*for..in*/M:for(var constructor = \n__iterator__ = <x><y/></x> in (__proto__).__noSuchMethod__) L:while((__proto__.__proto__ = 033) && 0){*::*; }");
tryItOut("L:if((new __noSuchMethod__(window.eval([,,z1]), <x><y/></x>))) export *; else  if ((({__count__: (<x><y/></x>.watch(\"prototype\", 3/0)),  set constructor prototype () { {} }  }))) { } else {\n__parent__ = function::__proto__, __noSuchMethod__ = this; }");
tryItOut("L:if(@foo) ; else  if ( '' ) return\nlet(__parent__ = arguments) { yield ({ set __iterator__(__count__) { throw 0/0; }  })\nthrow __count__;");
tryItOut("if(<x><y/></x>.@* | window.yoyo(<y><z/></y>) << ({constructor: false })) { if (eval(\"prop\", __parent__+=<x><y/></x>)) ; else if((__noSuchMethod__ .prop)) { if ((__proto__.__iterator__)) gc()} else export *;}");
tryItOut("with(--this.unwatch(\"constructor\"))L:with(window.yoyo( /x/ )\t){/*for..in*/for(let __parent__ = 0/0 in <x/>)  }");
tryItOut("do {for(let y in []); } while((this.zzz.zzz.throw(((3/0)[[1]]))\n) && 0);");
tryItOut("L:with(<x><y/></x>.(<x><y/></x>))/*for..in*/for(var __parent__ = <><x><y/></x></> in <x><y/></x>) {export *; }");
tryItOut("M:while((window) && 0)if((1e81.propertyIsEnumerable(\"prop\")))  else export __noSuchMethod__;");
tryItOut("let prop, constructor = true;");
tryItOut("switch(this) { case 8: return;default: case 6: case 8: throw <x><y/></x>;break;  } const prototype;");
tryItOut("for(let y in []);");
tryItOut("if((((*::*.__lookupSetter__(\"__proto__\"))).__defineSetter__).call(this.__defineGetter__(\"constructor\", (1 for (x in []))), @foo >>>=default: break; case  \"\" : break; break; break; \f)) __count__ else {export *;prototype, __parent__; const x::__count__; }");
tryItOut("/*for..in*/L:for(let prop in (__proto__ = <x><y/></x>)) {__count__; }");
tryItOut("M:with({prototype: ({prop: ((this.__defineGetter__(\"prototype\", [1,2,3,4].map)))[<><x><y/></x></>.eval(false)]})})export prop;");
tryItOut(" for (__noSuchMethod__ in (new (1.3)(({}), <><x><y/></x></>)).throw(\n(constructor.__noSuchMethod__ = <><x><y/></x></>))) if ((yield true))");
tryItOut("/*infloop*/for( /x/g ; (new eval()); new [z1,,] ^ 1e-81(<><x><y/></x></>, *).__lookupGetter__(\"({ function::__proto__: [, __proto__, , __parent__] })\").throw(\nfalse.isPrototypeOf('fafafa'.replace(/a/g, 3.__parent__)))) if(( /x/g )[<><x><y/></x></>]) yield;");
tryItOut("let (__iterator__ = (<x><y/></x>\n)) { export *; }");
tryItOut("switch((0x99)(~this.__defineGetter__(\"__iterator__\",  \"\" ))) { default: export *;case yield  /* Comment */ '' : export __iterator__;break; case 0: return;break;  }");
tryItOut("/*for..in*/for(var __parent__.__parent__ in ({}).hasOwnProperty) let(__iterator__) { let prop;");
tryItOut("/*for..in*/for(__count__ in (((new Function(\"set;\")))( '' ))){export __parent__;let __parent__, prop; }");
tryItOut("{throw undefined\nreturn <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const prop; constructor; <x><y/></x>) {<xxx {constructor}={([15,16,17,18].sort([1,2,3,4].slice, <><x><y/></x></>))} /> }");
tryItOut("if(<><x><y/></x></>) return; else  if (<><x><y/></x></>) throw .2; else let __iterator__;");
tryItOut("");
tryItOut("switch(((<x><y/></x>)())) { default: 3.141592653589793;break;  }");
tryItOut("do (.2); while((window) && 0);");
tryItOut("let(({ __noSuchMethod__: __proto__, prototype: ({ prop: [({ prototype: __noSuchMethod__ }), ({ __parent__: __iterator__ }), __iterator__, prop, prop], __parent__: [, [__iterator__, ]] }) })) ((function(){throw delete;})());");
tryItOut("return #1=[#1#]");
tryItOut("if(<> /x/ </>) { if (this ? (-0) : <x><y/></x>) gc()}\t else throw prototype");
tryItOut("try { for(let y in []); } catch(__parent__ if (function(){yield;})()) { for(let y in []); } ");
tryItOut("{L: {undefined; }/*for..in*/L:for([prototype, __parent__] = (({ __noSuchMethod__: constructor }) = true) in <y><z/></y>) {/*for..in*/for(let __parent__ = 0/0 in prop) {return @foo;yield constructor; } } }");
tryItOut("M:do {{} } while(( \"\" ) && 0);");
tryItOut("let __parent__;");
tryItOut("/*infloop*/for( get __parent__(__count__, __noSuchMethod__) { yield this } ; {}; prop = __iterator__) {yield __parent__;let prop, prop = <x><y/></x>; }");
tryItOut("/*for..in*/for(const (<><x><y/></x></>)(<y><z/></y>) in (uneval(<x><y/></x>))) {<x><y/></x>; }");
tryItOut("/*infloop*/for(const constructor; 0.1; __noSuchMethod__ = <x/> .@ (Function(*::*, <x/>))) __proto__: (\f@foo ? @foo :  '' .eval(this[window]))(Date(function ([y]) { }, true), 033\n)");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (((1 for (x in [])))(<><x><y/></x></> .@x:: window))){throw <x/>;(this); }yield <x/>;");
tryItOut("/*for..in*/for(__count__ in (([1,2,3,4].slice)(this = __noSuchMethod__.valueOf(\"number\"))))");
tryItOut("/*infloop*/M:for(let __parent__ = __count__; __count__; function  __noSuchMethod__ (__count__) { return @foo; } ) {__count__ = this; }");
tryItOut("if(__proto__.propertyIsEnumerable(\"__count__\") ?  /* Comment */eval(\"if([,,z1]) { if (*) {return;(__noSuchMethod__).__defineSetter__ }} else __parent__ = null;\", arguments) : <{__iterator__}></{__iterator__}>) {return; } else  if (([1,2,3,4].slice).call(this, (this.__lookupGetter__(\"__proto__\")))) {;gc() } else {yield <y><z/></y>; }");
tryItOut("let (prototype, []) { {L: {with({__parent__: -1}){{}break M; }L:if(1e+81) {let __parent__ = [], __iterator__ = 0x99; } else  if (prop) {(({}).__lookupGetter__).applyreturn <x><y/></x>; } else {yield; } }const prototype, constructor = <x><y/></x>; } }");
tryItOut("if(g = <x><y/></x>.( /x/ ))  else  if ([this] %=  '' ) {/*for..in*/M:for(const prototype = [z1,,] in *::*) {export __iterator__;yield false; } } else {(null); }");
tryItOut("yield ();");
tryItOut("/*infloop*/for(var prototype = this.unwatch(\"__noSuchMethod__\"); (p={}, (p.z =  \"\" )()); (-1) >>>=<x><y/\t></x>) yield;");
tryItOut("/*infloop*/for(([this].some(this));  /x/ ; new __noSuchMethod__ = this()) <><x><y/></x></>;");
tryItOut("let (__iterator__, __noSuchMethod__) { /*infloop*/M:for(const constructor; [<><x><y/></x></>]; __noSuchMethod__ = 3/0) let (__noSuchMethod__) { /*for..in*/for(let [__count__, __count__] = <x/> in  /x/ ) {yield null; } } }");
tryItOut("break M");
tryItOut("export prop");
tryItOut("{{}let ({ __iterator__: __proto__, prototype: ({ __count__: __count__, constructor: constructor }) }) = __noSuchMethod__ = constructor.__defineGetter__(\"__count__\", function(y) { yield y; yield 1.2e3;; yield y; }); }");
tryItOut("/*for..in*/for(({ prototype: prop }) = new (-1)(function(id) { return id }, <><x><y/></x></>) in <y><z/></y>) return [,,z1];");
tryItOut("L: {L:switch(window.__lookupSetter__(\"#1=[#1#]\")) { try { (<x><y/></x>).watch } catch(__parent__) { <x/>; }  } }");
tryItOut("M:while(((function(y) { yield y; ;; yield y; })(new function(q) { return q; }(window, prop), (__proto__.__noSuchMethod__ / new Iterator()))) && 0){/*infloop*/M:for([,] << (p={}, (p.z = (({__parent__: <x><y/></x>})))()).yoyo((__count__.constructor = __iterator__.__iterator__)); @foo; new RangeError(prototype.( \"\"  ^= null)).__defineGetter__(\"__count__\", \t((1 for (x in []))).apply)) yield; }");
tryItOut("throw  /x/g ;\nvar __noSuchMethod__ = null;\n");
tryItOut("if((({__parent__ setter: <x><y/></x> }))) { if ((<><x><y/></x></> ?  /x/g  : ({}))) ; else {yield undefined; }}");
tryItOut("try { for(let y in [5,6,7,8]) this.x::__proto__ = __count__; } catch(__iterator__ if (function(){with({}) { try { constructor; } catch(__noSuchMethod__ if (function(){throw true;})()) { return; } finally { {} }  } })()) { throw StopIteration; } catch(__parent__ if (let (constructor) (window.__parent__))) { with({prop: this}){return *; } } catch(prop { let(constructor =  /* Comment */__parent__.constructor setter= eval, __noSuchMethod__ = <y><z/></y>) ((function(){__iterator__ = __parent__;})()); } finally { throw __noSuchMethod__; } ");
tryItOut("/*infloop*/for(const constructor = prototype .@ (#0=[function::prototype]); window @ (<y><z/></y> && undefined); window) /*infloop*/L:for(5.0000000000000000000000; window;  '' ) ");
