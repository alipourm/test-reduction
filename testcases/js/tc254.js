tryItOut("/*infloop*/L:do  while((({__noSuchMethod__ setter: 'haha'.split, __parent__: [11,12,13,14].sort })));");
tryItOut("let (__noSuchMethod__ = (~<><x><y/></x></> .@x:: <x/>)) { {{}let __noSuchMethod__, prototype; } }");
tryItOut("if(((-1) = __noSuchMethod__ = <><x><y/></x>\n</>)) /*infloop*/for(const __proto__ = <x><y/></x>; function(id) { return id };  '' ) {return; }");
tryItOut("let (__noSuchMethod__ = null, __count__) { <>yyy</> } const __proto__;");
tryItOut("/*for..in*/for(let prop in #1=({constructor: this.__parent__ = window})) let __parent__, __noSuchMethod__ = this;");
tryItOut("/*infloop*/while(0 || new (gc)(true)){with({prototype: (<x><y/></x>.hasOwnProperty(\"__proto__\"))})return *;__count__ = <x><y/></x>, __iterator__ = <y><z/></y>; }");
tryItOut("yield  /x/g ;");
tryItOut("L:switch(this) { case 6: export __iterator__;break;  }");
tryItOut("if(constructor.__iterator__ = 033) { if (((p={}, (p.z = <x/>)()))) {yield window;{} } else {{} }}throw <y><z/></y>\n\nL:with({constructor: [[[]]]})let (__proto__) { gc() }");
tryItOut("let (__noSuchMethod__ = (new <y><z/></y>(033)), __parent__) { try { yield prop = window; } finally { for(let y in [5,6,7,8]) yield @foo; }  }");
tryItOut("L: {return;throw <x><y/></x>; }");
tryItOut("export constructor; const prototype;");
tryItOut("with(__proto__.(prototype.__iterator__))let constructor;");
tryItOut("let (constructor, __count__ = ) { {; } }");
tryItOut("L:if(\nnew 1.2e3.__lookupGetter__(\"__proto__\")()) { if (((yield 1e+81 ^= *))) let prop = @foo; else break ;}");
tryItOut("with({}) try { throw StopIteration; } catch(each if (function(){for(let y in [5,6,7,8]) var __iterator__, __parent__ =  \"\" ;})()) { let(constructor, __count__ = <x><y/></x>) ((function(){yield;})()); } ");
tryItOut("/*for..in*/for(__count__ = __noSuchMethod__ in #3={a:#3#}) __noSuchMethod__;");
tryItOut("/*for..in*/for((prototype) in (((new Function(\"(0x99);\")))((let (__count__, prop = {}) true\n)))){var __iterator__ = @foo; }");
tryItOut("L: {return; }");
tryItOut("while((constructor) && 0){export *;return; }\nreturn this.__defineSetter__(\"prop\", *);\n");
tryItOut("/*infloop*/for(constructor; [15,16,17,18].sort((1 for (x in [])), <x><y/></x>); __parent__) break ;");
tryItOut("with({__noSuchMethod__: new (eval)()}){return  '' ; }");
tryItOut("let (__count__ = (![[]])(__parent__), __parent__ = this) { with({prop: ( /x/g )().unwatch(\"__noSuchMethod__\")}){(0);yield <x/>; } }");
tryItOut("if([constructor = (__count__.@*)].map(eval)) { if ((<x><y/></x>.valueOf(\"number\").valueOf(\"number\"))) {L: { } }} else /*for..in*/M:for(const __parent__ in [ \"\" ].sort( '' )) L:switch(<x><y/></x> || {}) { case 6: yield;default: break;  }");
tryItOut("/*infloop*/M:for(this.zzz.zzz; this; (prototype)) {{switch() { default: break;  }export *; } }");
tryItOut("gc()");
tryItOut("\n__noSuchMethod__, prototype; const function::prop;");
tryItOut("return null.__defineSetter__(\"__iterator__\", Math.pow);");
tryItOut("__iterator__, prototype");
tryItOut("/*for..in*/for(var  =  \"\" .yoyo(<x><y/></x>) in <x/> .. 4.) {Math.sin const prop; }\n/*for..in*/M:for(let __iterator__([,]) in (([1,2,3,4].slice)((__iterator__)[3])))export *\nL:if(*) {export *; } else  if (arguments) {return <><x><y/></x></>;( /x/ ); }");
tryItOut("while((--__iterator__ = prop <= 0) && 0)/*for..in*//* nogeckoex bug 349964 */M: for  each(const __count__.prop in *) yield <><x><y/></x></>;");
tryItOut("L:if(((1 for (x in [])))) [z1,,]; else export constructor;");
tryItOut("switch(this) { case 8: continue M;break; M:do {(window);function  __parent__ () { yield  /x/g ; }  } while((function ([y]) { }) && 0);break;  }");
tryItOut("(function  let (__iterator__) { return 5.0000000000000000000000 } ).apply\nexport *;");
tryItOut("if(eval(\"\", false.isPrototypeOf( { return (<><x><y/></x></>--) } ))) ; else throw undefined;");
tryItOut("if((__parent__%=({a1:1})) , (__proto__ << 5.0000000000000000000000)) {(-0);var __count__ =  /x/ ; }");
tryItOut("if(*.constructor in (* |= <y><z/></y> && <x/>)) { if (null) {return;L:if(<><x><y/></x></>) { if (this) {var __proto__ =  \"\" , __count__ = -1;return function ([y]) { }; } else {(<><x><y/></x></>); }} } else }");
tryItOut("for(let y in []);");
tryItOut("while(() && 0){M:if(1e-81 >= .2) {switch(<><x><y/></x></>.__count__ = 1.3) { case -null: break;  }gc() } }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("with( /* Comment */('fafafa'.replace(/a/g, (<><x><y/></x></>).watch))(__proto__.(<!--yy-->)).unwatch(\"prop\"))L: ({});");
tryItOut("/*for..in*/M:for(var prop in 4.) {return;with(<x><y/></x>)yield __count__; }let(prop = #1=[#1#].throw(<x><y/></x>), prop = {}) ((function(){__proto__ = __iterator__;})());");
tryItOut("{return [[]];continue \f; }\n(<x><y/></x>);\n");
tryItOut("do if((\t /x/g  !== false)) yield; else  if (__noSuchMethod__ = __iterator__) {return;Function } else {} while(((@foo)()) && 0);");
tryItOut("if(*) { if (<y><z/></y>.throw(<x/>))  else {gc(){} }}");
tryItOut("let (__count__, __count__ = (new (gc)((this.__defineGetter__(\"__proto__\", function(y) { yield y; *;; yield y; })), 1e4))) { (<><x><y/></x></>.watch(\"__noSuchMethod__\", ({}).hasOwnProperty)); }");
tryItOut("/*infloop*/\rwhile(null.watch(\"prototype\", (new Function(\"export *;\")))){{var ({ __count__: prop, __proto__: __count__ }), constructor; } }");
tryItOut("/*infloop*/for(const ({ __proto__: __noSuchMethod__ }) = __noSuchMethod__.prototype setter= Math.pow; <x/>;  /* Comment */*) ({});");
tryItOut("/*for..in*/for((yield window).__count__ in ((\r[11,12,13,14].map)(__proto__ = prototype)))( '' .throw(@foo));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [prototype, , ({ constructor: [, ({ __noSuchMethod__: ({ __parent__: __noSuchMethod__ }) })] }), ] in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {for(let y in [5,6,7,8]) const constructor = *;yield <x<><x><y/></x></> ? __iterator__ :  '' >y || constructor; }");
tryItOut("/*for..in*/M:for(const [__count__, __iterator__] = <x><y/></x> | [[]].watch(\"__noSuchMethod__\", __parent__) in <xxx>{__count__}</xxx>.((this.__defineSetter__(\"__iterator__\", ((-1)).watch)))) export *;");
tryItOut("[1,2,3,4].slice const __noSuchMethod__;");
tryItOut("M:with((({__count__: ((-1).__lookupGetter__(\"__noSuchMethod__\")) })))M:with({get: ({ __iterator__: __iterator__, __iterator__: ({  { yield <x><y/></x> } : constructor }) })}){if(this) throw  /x/g ; else  if (<y><z/></y>) (0x99);export *; }");
tryItOut("{/*for..in*/L:for(let [constructor, prop] = -0 in .2) {{} }break M; }");
tryItOut("with({}) {  } ");
tryItOut("yield window;export *;");
tryItOut("if(({__iterator__: prototype})) { if ((uneval(<x/>))) {/*infloop*/for(let __noSuchMethod__ = <><x><y/></x></>;  /x/ ; true) {yield;const __iterator__ =  \"\" ; } } else {/*infloop*/for(let __iterator__ = <x/>;  /x/ ; <><x><y/></x></>) 'haha'.split }}");
tryItOut("gc()\nexport *\n");
tryItOut("throw <y><z/></y>;");
tryItOut("for(let y in [5,6,7,8]) break L;");
tryItOut("/*for..in*/for(var __count__(this) in new 'haha'.split(this, __noSuchMethod__).isPrototypeOf(<><x><y/></x></> | -1).watch(\"prototype\", [1,2,3,4].map)) throw StopIteration;");
tryItOut("L:do /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>) <><x><y/></x></>; while((this.zzz.zzz) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in  '' ) {yield __noSuchMethod__;L: export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x/> / true) if(prop.constructor = prototype.__proto__ = null :: 1e+81) { if (__proto__) throw this; else }");
tryItOut("/*infloop*/for(var constructor = void this; __iterator__.prop getter= (window').__defineSetter__; ((__proto__) = ({__parent__: constructor, prop setter: <><x><y/></x></> }))) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in prop.__count__ = __iterator__) {yield; }");
tryItOut("if(this) { if (<x><y/></x>) {gc()yield @foo/*\n*/; } else }");
tryItOut("export __parent__;");
tryItOut("/*for..in*/for(var [constructor, __iterator__] = <x><y/></x>.propertyIsEnumerable(\"__proto__\") in  /x/  %= 0/0) {(<x><y/></x>); }");
tryItOut("let(__count__, [] = ({__noSuchMethod__: <zzz>__proto__</zzz>})) { constructor = __count__;");
tryItOut("if((constructor = (-1)).valueOf(\"number\")) { if (new ((Exception((__proto__)))).watch() + let (__proto__ =  ''  *= <><x><y/></x></>, __proto__) [,,] ? __count__ : <><x><y/></x></>) {/*infloop*/for(let __proto__; -1; true) @foo } else {continue M;if(prototype.@*.__lookupGetter__(\"__count__\")) { if (this += *) {L:while(( \"\" ) && 0){function(q) { return q; } } }} else {;; } }}");
tryItOut("/*infloop*/L:for(let prop; (x::__proto__.((gc()))).prototype = new ( '' )(*); __proto__%=this.__count__ instanceof [11,12,13,14].filter) /*infloop*/for(([-<><x><y/></x></>].some(({}).hasOwnProperty)); __proto__; ( /x/g  |= *) ? [window].map(function  __proto__ () { return prototype } ) : prototype = <x><y/></x>) if(<y><z/></y>) {var constructor; } else  if (*::*) {gc(); } else return window;");
tryItOut("/*infloop*/for(var ({ prototype: __count__ }) = ({prototype: 1.3 }).watch(\"constructor\", (<y><z/></y>)(false.eval((function ([y]) { })()) >>= [1,2,3,4].map)); this; (constructor.prototype)) __parent__ = prop;");
tryItOut("/*for..in*/M:for(var prop = (<x><y/></x>.(<><x><y/></x></>)) in Array([1], *::*)) do {return\nyield; } while((<x><y/></x> /= <x/>) && 0)\nfor(let y in []);");
tryItOut("switch((.eval(yield <><x><y/></x></>)) < new RangeError( '' , *)((new Object(#1=[#1#])))) { case 2: L: {yield <><x><y/></x></>; }break; case 4:  }");
tryItOut("{{case __iterator__: : break; ; }if(new function (__parent__)*::*(window, 0x99)) { if (({prop setter: [1,2,3,4].slice, constructor getter: arguments })) let yield = <><x><y/></x></>\t; else {true;break M; }} } const prop;");
tryItOut("if((__proto__.@*).__lookupGetter__(\"__proto__\")) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__(this.zzz.zzz) in <x><y/></x>) {var __iterator__, __iterator__; } } else  if ([11,12,13,14].sort--[__proto__.__count__ = (<><x><y/></x></>.__lookupSetter__(\"prototype\"))]) {gc() } else /*infloop*/for(__proto__ =  \"\" ; *; 1e-81) {new Function }");
tryItOut("throw <><x><y/></x></>;/*for..in*/for(var __noSuchMethod__ = ++<x><y/></x> in true) {([,,z1]);return; }");
tryItOut("/*infloop*/for(var prop([11,12,13,14].sort); ({a2:z2}).__noSuchMethod__ = @foo; <><x><y/></x></>\n) /*for..in*/for(var __parent__ in constructor) const __iterator__ = *::*, prototype; const each;");
tryItOut("\nfunction(y) { yield y; continue L;; yield y; }");
tryItOut("/*infloop*/M:for((({}).__lookupGetter__).call([0x99], ); 'fafafa'.replace(/a/g, gc); new (constructor)()) this;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in \t#2=this) ({ function::__iterator__: __noSuchMethod__ })");
tryItOut("if(this.__defineGetter__(\"prop\", window)) yield  /x/g ; else {return  /x/g ; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; prototype.(<x><y/></x>);  ''  :: <x><y/></x>) yield;");
tryItOut("switch(\n(yield window)) { case 9: break; default: break;  }\n{}");
tryItOut("prop = __parent__;");
tryItOut("with((false != true.isPrototypeOf(({ __iterator__: constructor })-=(yield prototype))))/*infloop*/for((@foo.__defineGetter__(\"prototype\", null).watch(\"__proto__\", [1,2,3,4].slice)); ([ /x/g ].map(Math.sin)); ([z1]++)) {(<><x><y/></x></>); }");
tryItOut("return null;");
tryItOut("if() { if (((new Function)() -= (\n('fafafa'.replace(/a/g, (new Function(\"export __noSuchMethod__;\"))))))) ; else {/*infloop*/do {continue ; } while((constructor = <><x><y/></x></>));continue M; }}");
tryItOut("");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let __count__; ( '' .__count__ for ((__proto__.(undefined)).__parent__ in (-0)) if (<x><y/></x>)); window) {gc() }");
tryItOut(";");
tryItOut("{switch(<x><y/></x> ^ 0x99) { case 4: {let __iterator__ = <x/>, __noSuchMethod__;break ; }break;  }do yield; while((<x><y/></x>) && 0); }");
tryItOut("/*infloop*/for(let __noSuchMethod__; <y><z/></y>; <zzz>(function ([y]) { })() ? <x/> : <y><z/></y></zzz>) {const __count__ = <y><z/></y>;switch( /x/g ) { default: break; break; case 1e81: {}case 4: return 3;break;  } }");
tryItOut("with(<y><z/></y>.propertyIsEnumerable(\"__parent__\"))yield window;");
tryItOut("if(++<x><y/></x>) throw  /x/g ; else  if (([, __noSuchMethod__, __iterator__] = [,])) {/*infloop*/M:do ; while( /x/ ); }");
tryItOut("with(({__count__:  }))break ;");
tryItOut("let (*::* =  '' ) { export *; }");
tryItOut("{function (prototype, prototype) { return <><x><y/></x></> } yield 3/0; } const prop;");
tryItOut("M:if(__parent__) { if (String(*::*)) export *; else {throw null;let (__iterator__, __parent__ = <></xgc ></>) { export __count__; } }}");
tryItOut("if(<><x><y/></x></> === <x><y/></x>) { if (__parent__ = * for each (__proto__ in constructor))  ; else export prop;}");
tryItOut("gc()");
tryItOut("/*infloop*/do if(<x><y/></x>) let __proto__ = [1], prop; while(false);");
tryItOut("");
tryItOut("/*infloop*/while(__parent__.__parent__ getter= eval){break L; }");
tryItOut("/*infloop*/for(eval(\"(new Math.sin(1e81, false))\", (continue L)); [#0=<><x><y/></x></>.__lookupGetter__(\"prototype\") if ((this.__defineSetter__(\"__noSuchMethod__\", __proto__)))]; eval(\"[[]]\", this)) {\r{let __proto__; } }");
tryItOut("/*infloop*/M:while(*::*)break ;");
tryItOut("{gc()/*infloop*/L:for(var prototype; (Error(false, <x/>)); ({ get __proto__ __iterator__ () { yield <><x><y/></x></> } , prototype: this })) {continue ;yield 1e-81; } }");
tryItOut("while((return window) && 0)");
tryItOut("/*for..in*/L:for(var [__proto__, __iterator__] = (({constructor: this })) in <x><y/></x>) ;");
tryItOut("/*infloop*/do {let prop = <x><y/></x>; } while(__parent__.((window.__defineGetter__(\"constructor\", ({}).hasOwnProperty))));");
tryItOut("L: {throw ;<x><y/></x>; }");
tryItOut("with({constructor: this >= window}){export *;export prop; }");
tryItOut("L:if(new (window)()) var __iterator__ = window, __noSuchMethod__;");
tryItOut("L:if(((window .@x:: <x/>)((/a/gi).call(__proto__))+='fafafa'.replace(/a/g, (/*\n*/<x><y/>\t</x>).__defineSetter__))) __proto__ else {/*for..in*/L:for(let constructor in (('haha'.split)(false)))yield  '' ; }");
tryItOut("L: 'haha'.split");
tryItOut("if(__parent__) {export __parent__;yield -1; }");
tryItOut("/*infloop*/L:do {}export *; } while((__iterator__.constructor setter= /a/gi));");
tryItOut("{}\nvar __count__, __noSuchMethod__;");
tryItOut("/*infloop*/for(let __count__ = [<><x>\f<y/></x></> if (window)]; 'fafafa'.replace(/a/g, ({}).hasOwnProperty); (<x><y/></x> , 3.141592653589793)) /*infloop*/M:while(({__parent__: eval(\" \\\"\\\" \", <x><y/></x>)})){continue L; }");
tryItOut("/*infloop*/L:while([[ /x/ ].map(new Function) if (window)])continue M;");
tryItOut("{\fbreak L; }");
tryItOut("L: var __iterator__;");
tryItOut("/*for..in*/for(let __count__ in prop) {break L;const __noSuchMethod__ = ({}); }");
tryItOut("L: /*infloop*/for(let ({ __proto__: __proto__ })\f = ((new Function)((new Number()), @foo)); __noSuchMethod__ = false; (({__noSuchMethod__: (<x><y/></x> = this)}))) {var constructor = __proto__; }");
tryItOut("/*infloop*/for(var constructor; (window.isPrototypeOf(<><x><y/></x></>).eval(__count__ = (__iterator__ = <x><y/></x>))); (<><x><y/></x></>.isPrototypeOf({})) ? ((function ([y]) { })().prop = window) : <y><z/></y>.__iterator__) export *;\n{}\n");
tryItOut("return;");
tryItOut("{constructor = <x><y/></x>; }");
tryItOut("this.zzz.zzz;");
tryItOut("if((window)(<x/>)) { if (this .@*:: null) {export __noSuchMethod__; }} else {return; }\n/*for..in*/M:for(const __noSuchMethod__ in false) {constructor, __noSuchMethod__;continue ; }\f");
tryItOut("/*infloop*/M:for(let prop = arguments.watch(\"__count__\", <x><y/></x>); new Iterator([1,,], prototype);  /x/g  ? <><x><y/></x></> : __noSuchMethod__) break ;");
tryItOut("return\n(new Function(\"var __count__, __noSuchMethod__;\"))");
tryItOut("M:if(<><x><y/></x></>.@*) M:do yield  \"\" ; while((<><x><y/></x></>) && 0); else {(window);{} }");
tryItOut("M:with(undefined.__iterator__)yield window\f;\n;\n");
tryItOut("if(<><x><y/></x></>) return <><x><y/></x></>; else  if (<x><y/></x>) {; }");
tryItOut("/*infloop*/for(__parent__ =  /* Comment */(*::* ? 0/0 : @foo); <><x><y/></x></> ? [[1]] : this; #1=[#1#].__defineSetter__(\"prop\", ((*).call).apply)) var __count__ = <x/>;");
tryItOut("if(this) {*::* } else let __noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = (-{}) in __parent__.((constructor in prop.(this)))) {break M; }");
tryItOut("L: var __iterator__;");
tryItOut("let (__proto__, __noSuchMethod__ = -3/0) { const constructor = -3/0, function::__proto__; }");
tryItOut("L: {var prop = __parent__, prototype = <x><y/></x>;const __iterator__, constructor;return (-0)\n{} }");
tryItOut("with({}) { export __iterator__; } ");
tryItOut("/*infloop*/for(-- '' .__defineSetter__(\"constructor\", function () { return *::* } ), __noSuchMethod__ = *::* = prop; typeof <>\t<x><y/></x></>; prototype) export prop;");
tryItOut("M:if(<><x><y/></x></> === <y><z/></y>) export prop;");
tryItOut("L:while((new Iterator(<><x><y/></x></> -= <x><y/></x>, false .@*:: <x><y/></x>)) && 0){/*infloop*/for(let __count__; (({__count__: <x><y/></x>}).propertyIsEnumerable(\"__proto__\")); false .@  /x/ ) {let try { return; } finally { return prop; } ;/*infloop*/M:for(__parent__ = undefined; @foo; 0x99) { } } }");
tryItOut("let (__proto__ = <y><z/></y> in (function ([y]) { })(), __count__) { yield; }");
tryItOut("/*infloop*/M:for(__proto__.__count__; !prop; #1# !== <><x><y/></x></>) return;");
tryItOut("{while((<y><z/></y>) && 0){} }");
tryItOut("/*infloop*/while((({constructor: 4. / function(id) { return id },  set constructor() { return __iterator__ }  }))){/*for..in*/for(let prototype = ('haha'.split).call(__count__ = * .@ this.zzz.zzz, 3 *= <x/> &= <y><z/></y>.@*, ((yield <x/>))) in [15,16,17,18].sort([1,2,3,4].map, 3)) /*infloop*/{} }");
tryItOut("while((__proto__) && 0)yield undefined;");
tryItOut("{({ prototype: constructor, prototype: __parent__ }) }");
tryItOut("with(((/a/gi).call(true, )).@foo.throw(this.zzz.zzz.propertyIsEnumerable(\"__count__\"))){{}var __iterator__ = __noSuchMethod__; }");
tryItOut("M:with(constructor.__proto__)");
tryItOut("M:with((<x/>.__defineSetter__(\"__parent__\", undefined) for each (__noSuchMethod__ in *::*) if (<><x><y/></x></>)) .@*:: ((/a/gi).call(null, __parent__)).__parent__ = (eval(\"window\", (Math.sin).apply))){{}\nreturn;\nreturn undefined;\n;\n }");
tryItOut("if(__noSuchMethod__ = (prop)()) { if ([11,12,13,14].sort) {/a/gi }} else {prototype }");
tryItOut("/*infloop*/for(({__count__ getter: function(y) { yield y; continue M;; yield y; } }); __iterator__['constructor']; [, ] = ((<x><y/></x>).call( '' , window))) {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in false) {} }");
tryItOut("/*infloop*/do  /x/ ; while(\n(#2=prop = __proto__));");
tryItOut("/*infloop*/while(this){*;yield; }");
tryItOut("var prototype; const __proto__;");
tryItOut("if(window) do /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <x/>) break L; while((--null) && 0);");
tryItOut("M:if((true()++)) {} else  \"\" ;");
tryItOut("/*for..in*/for(const prop = ({a1:1}) in window) undefined;\nyield;\n");
tryItOut("if((<><x><y/></x></>.@*)) {let __noSuchMethod__ = <x><y/></x>; } else  if (this.eval(this)) {var __count__;const __parent__ = null, prototype = <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function  __count__ () { return __proto__ } )(__parent__.__iterator__ = __noSuchMethod__))){yield this;export __count__; }");
tryItOut("switch((1e81 in [[z1,,] in undefined])) { case ([15,16,17,18].some((new Function).apply, (<x><y/></x>++))): break; default: case 1: break;  }");
tryItOut("/*for..in*/L:for(var [prop, __noSuchMethod__] = ([15,16,17,18].map(({}).__lookupGetter__, <y><z/></y> += this)) in <><x><y/></x></>) {}");
tryItOut(" const __proto__\n");
tryItOut("M:switch(this.__defineSetter__(\"__parent__\", 'haha'.split)) { default: break; case ('fafafa'.replace(/a/g, gc())): break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in new <y><z/></y>(<><x><y/></x></>, __count__)) M:switch(({a1:1})) { default: break; return __count__;break; gc()break; {}case 0: export *;break; export *;break; case __proto__: {}break;  }");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("({a1:1});");
tryItOut("/*infloop*/for(const constructor; eval(\"/a/gi\", #2=function  __count__ () /x/ ); <><x><y/></x></>.__lookupSetter__(\"prototype\")) {export prop; }");
tryItOut("return <x/>;");
tryItOut("yield\nreturn;");
tryItOut("do {const __count__ = <><x><y/></x></>, constructor = window; } while(((this.zzz.zzz)) && 0);");
tryItOut("do {} while(([[1]]) && 0);");
tryItOut("/*for..in*/M:for(var (null.__proto__ = <y><z/></y>.unwatch(\"prototype\"))() in (((1 for (x in [])))([*].filter(/a/gi).__proto__)))export *;");
tryItOut("/*infloop*/L:for(const __count__ = eval(\";\", (uneval(<y><z/></y>))); 1e81 >= [<x><y/></x>.isPrototypeOf(undefined)].some(Function); ({prop: (([1].__proto__).valueOf(\"number\") ? (('fafafa'.replace(/a/g, 'haha'.split)).__defineSetter__(\"constructor\", (function  __proto__ (__parent__)prop).call)) : __count__ = (uneval(@foo)).__lookupSetter__(\"constructor\"))})) var prototype = this;\nconstructor = <x><y/></x>;\n");
tryItOut("/*infloop*/for(let [[__proto__, ({ __noSuchMethod__: ({ __proto__: prototype }), prototype: ({ __proto__: prototype }) }), [], , ({ constructor: prototype })]] = window; ([,,z1])(this, <x><y/></x>).constructor; (<x/> = __noSuchMethod__)) {var prop = -3/0;break M; }");
tryItOut("if(\n) { if (({ prototype: __proto__ }) = ( /x/g  && window)) break M; const __iterator__;} else {export __iterator__;yield <x><y/></x>; }");
tryItOut("{return <x><y/></x>;throw undefined; }");
tryItOut("if((\n(yield prop = window) == [this ? 0x99 : ({a1:1})].map((1 for (x in []))))) { if ((prototype = ([<x\t><y/></x>].filter((((/a/gi).call).apply).apply)))) var __iterator__ = -1, constructor; else (<><x><y/></x></>);}");
tryItOut("if(*) { if (<x/>) yield;} else {yield; }");
tryItOut("{<bbb xmlns:ccc=\"@foo >= *\"><ccc:eee></ccc:eee></bbb>  }");
tryItOut("/*for..in*/for(true['__noSuchMethod__'] in (((this.__defineSetter__(\"__proto__\", 5.0000000000000000000000)).watch)(((function::__iterator__)[true]))))/*infloop*/for(var [({ prop: ({ __parent__: [, ], __noSuchMethod__: __proto__ }) }), []] = ((new undefined)).watch((eval(\"return;\", [z1])), (this.watch(\"__count__\", (Math.sin).call))); eval(\"this.zzz.zzz;\", ('fafafa'.replace(/a/g, function (__iterator__) { return false } ))); [constructor]) continue L;");
tryItOut("export constructor;");
tryItOut("/*infloop*/\tL:for(var ({ prop: __proto__ }) = ([11,12,13,14].map); (1e4 if (undefined)); window) {with({__parent__: (__iterator__ = <y><z/></y>)})let (constructor) { let prop, prototype; }if(<x/>) ; else  if (<x/>) {__parent__var __count__ = <x><y/></x>, __count__; } else function(y) { yield y; u; yield y; } }");
tryItOut("M:with((([15,16,17,18].some([1,2,3,4].slice,  /x/g )).propertyIsEnumerable(\"constructor\"))){; }");
tryItOut("with((uneval(\n<x/>)))M:do prototype while((<x><y/></x>) && 0);");
tryItOut("L:if((<x><y/></x> <= -0)(@foo.__lookupSetter__(\"__noSuchMethod__\"))) { if ((let (__proto__ = <><x><y/></x></>) null).unwatch(\"__proto__\")) /*for..in*/for(var prototype = <><x><y/></x></> in  /x/ ) export *; else {({}).__lookupGetter__ }}");
tryItOut("with(<x/>)continue prototype ;\nL:if(((function(y) { yield y; return <x><y/></x>;; yield y; }).call).call(<y><z/></y>, )) { if (({a1:1}).watch(\"__count__\", ( \"\" ).apply)) {yield 3.141592653589793; } else ;}\n");
tryItOut("/*for..in*/for(var [prototype, prop] = <><x><y/></x></> in prop) {__noSuchMethod__, prototype; }");
tryItOut("/*infloop*/for(((uneval((__iterator__ = window | (yield <><x><y/></x></>))))); <><xxx {constructor}={constructor = (<x/> << 5.0000000000000000000000)} /></>; [,,z1]) {/*infloop*/for(let __count__ = [15,16,17,18].filter(function  *::* ()<y><z/></y>, @foo); ((yield  \"\" )); [z1]()) (<x><y/></x>).call }");
tryItOut("/*infloop*/do yield;\nreturn  '' ;\n while((<>[]</>).call('fafafa'.replace(/a/g, new Function).__lookupSetter__(\"prop\"), ));");
tryItOut("/*infloop*/for(const __count__; <x><y/></x> -= undefined; #0=(yyy === <y><z/></y>).constructor) /*for..in*/for(var __parent__ in (((true - (this.throw(()))))(prop = this.__defineSetter__(\"__iterator__\", function  __noSuchMethod__ (\tprop) { return [1,,] } )))){/*for..in*/for(__parent__ in  '' ) /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in *) (<x><y/></x>); }");
tryItOut("/*infloop*/while(<y><z/></y>){throw <x><y/></x>;return; }");
tryItOut("/*for..in*/for(const __parent__ in ((Function)(__iterator__.constructor)))M:if(\n<x/>) { if ((<><x><y/></x></> ? this : this)) let __parent__, prop;} else {continue ;return <x><y/></x>; }");
tryItOut("switch(undefined) { case 5:  }");
tryItOut("/*infloop*/for(var [, [[]]] = Function; __proto__.__count__ = ([])[#3={a:#3#}]; __noSuchMethod__%=0/0 :: *::*) {export __proto__;/*infloop*/for(var ({ __proto__: __iterator__ }) =  /x/g  ,  '' ; {}(); RegExp()) return  \"\" ; }");
