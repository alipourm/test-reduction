tryItOut("if(<x><y/></x>) return;");
tryItOut("let (__parent__ = ({__proto__: (\f__iterator__ = false)}), [__noSuchMethod__, prop]) { {const __iterator__, function::__proto__ = null; } }");
tryItOut("if((<x><y/></x>.eval(x::__parent__ = __iterator__, prop))) {;return undefined; } else  if ((<y><z/></y>.__defineGetter__(\"constructor\", function  __proto__ (prototype, __parent__) { yield null } ))) ( '' )\r; else {const prototype = *; }/*for..in*/for(const __count__([11,12,13,14].some) in (<x><y/></x>--)) const prop;");
tryItOut("try { with({}) { this.zzz.zzz; }  } catch(prototype if <><xxx>{__noSuchMethod__}</xxx></>) { /*infloop*/L:for(const \f({ prototype: __iterator__, constructor: constructor }) = (this)[window]; (throw this; in undefined); (*.@foo))  } finally { this.zzz.zzz; } ");
tryItOut("return;");
tryItOut("do this; while((eval(\"{gc()export *; }\", <xxx {__count__}={arguments} />)) && 0);");
tryItOut("while((((uneval(false)))) && 0)throw <x><y/></x>;");
tryItOut("/*infloop*/for(this; ().@foo; [,]) L: {\t__parent__, prototype; }");
tryItOut("/*for..in*/for(let __iterator__ = 3 in prop) return @foo;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = ({prop:  /x/g .constructor = null }) in (new ((<y><z/></y>/ !== prototype).propertyIsEnumerable(\"prototype\"))()[ /* Comment */__noSuchMethod__.prototype getter= function () { return window } .throw(--this)].valueOf(//h\n\"number\"))) {/*infloop*/L:for(this; <x><y/></x>; <><x><y/></x></>) {gc() }return false; }");
tryItOut("if(1.2e3) (*); else { }");
tryItOut("do var constructor, __noSuchMethod__; while((#0=[arguments](({prototype: <y><z/></y> }))) && 0);");
tryItOut("/*for..in*/for(const prop in this.__defineGetter__(\"__count__\", Function)) this;");
tryItOut("if([[1]]) Math.pow else ;");
tryItOut("with(yield __parent__)if(1.2e3) gc()");
tryItOut("L: {{} }");
tryItOut("yield (delete @foo);");
tryItOut("var __iterator__ = <x><y/></x>, __iterator__ = <><x><y/></x></>;const prop, __iterator__;");
tryItOut("/*for..in*/for(let prototype in (( /x/ )(this))){gc()var __count__ = <y><z/></y>; }");
tryItOut("while(([,]) && 0){L:if(0 ?  ''  : <x/>) <><x><y/></x></*\n*//> else  if (new Object(<><x><y/></x></>, <y><z/></y>)) {continue L; } }");
tryItOut("var prototype, __parent__;\n__parent__, __iterator__;\n{L:if(yield 033) { if (((1 for (x in []))()).propertyIsEnumerable(\"constructor\")) ; else continue L;}{} }");
tryItOut("return;yield;gc()");
tryItOut("/*for..in*/M:for(var __iterator__ = 'fafafa'.replace(/a/g, 3.141592653589793) in <x><y/></x>.__lookupGetter__(\"prototype\")) {M:with(<x/>){(<y><z/></y>);var __noSuchMethod__ = __noSuchMethod__; }break ; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in prop) {var __parent__ = this, __parent__; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(prototype; <y><z/></y>.__lookupGetter__(\"prop\");  /x/ ) yield;");
tryItOut("if(<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")) ({}).hasOwnProperty else {export *; }");
tryItOut("/*for..in*/M:for(var [prop, constructor] = (function(y) { yield y; yield; yield y; })(<x/>) in __noSuchMethod__-=1e-81) {if(<x/>) {continue ;function(q) { return q; } } else  if (#1#) const __noSuchMethod__, prop = __noSuchMethod__;/*infloop*/while(prop\n)var constructor = null;try { export *; } catch(__noSuchMethod__) { yield -1; } finally { {} }  }");
tryItOut("/*infloop*/ let(__iterator__, prop = __count__) { gc() for(eval(\"set != String(yield undefined;)\", prototype =  \"\"  === Function(false, [[]])); (yield <><x><y/></x></> ? __iterator__ : false); __iterator__%=constructor) {if(( /x/g .hasOwnProperty(\"__parent__\"))) { if (([ /x/ ])) yield *;} else return <x><y/></x>;(<><x><y/></x></>); }");
tryItOut(";");
tryItOut("/*for..in*/M:for(var __parent__ = ('fafafa'.replace(/a/g, (new Function).call)) in <>this</>) {/*infloop*/while(__iterator__ = constructor)return __count__; }");
tryItOut("continue L\nreturn;");
tryItOut("/*infloop*/for(let [, [, [__noSuchMethod__(-1), [({ constructor: constructor }), prop, , , __iterator__], [, , ]], , , ({ __parent__: __count__ })], ({ constructor: ({ __iterator__: __noSuchMethod__, __parent__: ({ __parent__: ({ x::prop: __parent__, __iterator__: __iterator__ }), prop: __count__ }) }) }), __noSuchMethod__, __noSuchMethod__.__count__] = (this.__defineSetter__(\"__parent__\", eval) >> __iterator__ = (yield __parent__)); ((yield (<y><z/></y>.propertyIsEnumerable(\"prototype\")))); arguments *  /x/ ) \tdo {export __iterator__; } while((({__count__ setter: [1,2,3,4].map,  set __count__(constructor)gc })) && 0);");
tryItOut("L:with({prototype: 'fafafa'.replace(/a/g, (new Function(\"return;\")))[ { constructor = ({a1:1}); } ]}){return;M:if(true) {export *; } else  if (<x><\ty/></x>) return; else {gc()export *; } }");
tryItOut("with({__iterator__: ((<><x><y/></x></>.__defineGetter__(\"prop\", [1,2,3,4].slice))(void function ([y]) { }))}){{return *::*; }throw @foo; }");
tryItOut("/*infloop*/L:for((.2.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)); --eval(\"yield;\", __parent__); delete ((((this).watch).call).call(<x><y/></x>, #1#))) M:with({__count__: (window || <y><z/></y>)}){Math.pow(<y><z/></y>); }");
tryItOut("if(*::*) {/*for..in*/L:/for(__count__ = true in let (__count__) prototype) {break ; }; } else  if ((((this--).prototype)(__noSuchMethod__, void [,,z1]--, try { __noSuchMethod__; } catch(prop) { export __iterator__; } ))) const __proto__;\n0;\n else \fL:with({__count__: ({a2:z2}) << <><x><y/></x></> .@x:: (null.propertyIsEnumerable(\"constructor\"))}){(__proto__); }");
tryItOut("if(prop = (let (constructor = \f<x><y/></x>, constructor = arguments) *::*.@*)) prototype else {while((null) && 0){yield; }/*for..in*/for(constructor in (((<x><y/></x>).__defineSetter__)(<><x><y/></x></>))){(<x><y/></x>); } }");
tryItOut("if( /* Comment */[,,]) {export __count__; } else  if (__iterator__.__parent__ = false) {continue ;; } else {export *; }");
tryItOut("if(<><x><y/></x></>) {yield <x><y/></x>; } else {let __iterator__; }");
tryItOut("1e4;");
tryItOut("/*for..in*/for(const [__count__, prop] = null -= [z1,,]-- in <x><y/></x>) { }");
tryItOut("while((constructor = prop) && 0)");
tryItOut("M:switch(@foo) { default: ([,]);break; yield __noSuchMethod__;case <x/>: break; case prototype: break; case 1: export prop;case 0: return <x><y/></x>;break; case <x><y/></x>: export *;break; __noSuchMethod__ = null, __parent__ = null; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var * .@ <x><y/></x> in (yield /*\n*/<x/>)) {(*::*);; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in this) export function::prototype");
tryItOut("M:if(<><bbb xmlns=\"<y><z/></y>\">yyy</bbb></>) { if (delete [11,12,13,14].filter) {throw <x><y/></x>; } else [1,2,3,4].map}");
tryItOut("");
tryItOut("M:if(__count__.__noSuchMethod__ = [15,16,17,18].filter(new Function,  '' )) { if (__parent__ = (#1=({prototype: __count__}))) {yield 4.; }} else let (prototype = null, __count__ = window) { ; }");
tryItOut("\n");
tryItOut("let(set) { let(({ __count__: @foo['constructor'] })) ((function(){constructor = __iterator__;})());");
tryItOut("let (({ __parent__: undefined: ({ __parent__: __noSuchMethod__, constructor: <><bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb></>: [] }), prop: prop })) { M:with({constructor:  '' }){/a/gi{return [[1]];export constructor; } } }");
tryItOut("{/*for..in*/for(var __noSuchMethod__ in ((({}).hasOwnProperty)(null))){return constructor;yield; }let (__parent__, ({ constructor: __noSuchMethod__ }) = window.__lookupGetter__(\"__proto__\")) { /*for..in*/for(__iterator__ in arguments) {{} } } }");
tryItOut("if(window) {\t if (this) yield 3; else gc()}");
tryItOut("const prop = __proto__, prop = [z1]\ngc()");
tryItOut("/*for..in*/L:for(const __proto__ in this >= <x><y/></x>) /*infloop*/L:do {yield [1,,]; } while(constructor = <y><z/></y>);");
tryItOut("return;");
tryItOut("let (__noSuchMethod__) { /*for..in*/for(var prop in (((true).__defineSetter__)(0x99)))export *; }");
tryItOut("throw *;if(~(p={}, (p.z =  \"\" )())) __proto__; else  if (constructor = __iterator__.yoyo(prototype.prototype)) __noSuchMethod__; else {gc()return; }");
tryItOut("/*for..in*/for(let __iterator__ = constructor.valueOf(\"number\") in 1e4) {with({__count__: <><x><y/></x></>}){__noSuchMethod__; } }\n/*infloop*/for(const prop = ({a1:1}); __noSuchMethod__ = try { *; } catch(prototype if (function(){export __count__;})()) { yield; } catch(prop) { 7;/*\n*/ } finally { (this); } ; (new Math.pow(\tundefined,  '' ))) __iterator__, __count__ = <y><z/></y>;");
tryItOut("/*infloop*/for(let __proto__; undefined;  /x/  > <x/>) return <x/>;");
tryItOut("yield @foo");
tryItOut("export __proto__;");
tryItOut("if({}.__lookupSetter__(\"prototype\") ? \n__noSuchMethod__ : ((new Function(\"throw __noSuchMethod__;\")))([z1], *)) { if (__parent__ = (yield 3.141592653589793)) throw 3.141592653589793;} else yield *::*; const __count__;");
tryItOut("return;\nlet __count__, prototype = window;\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const [prop, constructor] = __count__ %= <><x><y/></x></> @ (({constructor: __proto__})) in 0/0.__lookupSetter__(\"__iterator__\")\f) {window = *;return; }");
tryItOut("let(__proto__ = [11,12,13,14].sort.__lookupSetter__(\"__parent__\").hasOwnProperty(\"*\"), __iterator__) { [({ __count__: __count__ })] = [[]] = <><x><y/></x></> ? (function ([y]) { })() :  /x/g  = __iterator__;");
tryItOut("let(__proto__ = <><><!--yy--></></>) { prop = constructor;");
tryItOut("throw null\n(@foo)");
tryItOut("while(((__noSuchMethod__.__count__)) && 0)yield <x><y/></x>;");
tryItOut("/*infloop*/L:for(window === <><x><y/></x></> /=  /* Comment */<><x><y/></x></>; this; eval(\"gc()\", this)) let getter;");
tryItOut("M:if((-1).__defineSetter__(\"__proto__\", function  prop () { yield [,,z1] } ).@*) M:if(/*\n*/[15,16,17,18].some(__count__, this.__defineSetter__(\"prop\", ({}).__lookupGetter__))) false else gc() else  if (<><x><y/></x></>.__defineGetter__(\"__parent__\", (1 for (x in []))).__lookupSetter__(\"x::__noSuchMethod__\")) {/*for..in*/L:for(let (this.zzz.zzz)['__count__'] in \r((true += .2))()) /*for..in*/for(var __proto__ = new (yield <><x><y/></x></>)() in <x><y/></x>) {; } } else if((constructor = prototype)) { if ((let (__proto__ = #0=({__noSuchMethod__: this}), __count__ = <x><y/></x>) __count__.__proto__)) yield window;} else {}");
tryItOut("break \n");
tryItOut("M:if(__iterator__ = *::* ^= [1].*) {return\n/*infloop*/for(let constructor; *; <><x><y/></x></>) gc()return; }");
tryItOut("__noSuchMethod__;\f\n{}\n");
tryItOut("(<x/>);");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in (([1,2,3,4].slice)( /x/g )))return window;");
tryItOut("/*for..in*/M:for(let [__proto__, __proto__] = ({__parent__: true }).hasOwnProperty(\"__noSuchMethod__\") in <y><z/></y>.isPrototypeOf(<x/>)) {M:while(([1,,]) && 0){continue ;function(y) { yield y; gc(); yield y; } }\nlet (__count__, prototype = <y><z/></y>) { yield; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __proto__: [prototype, , , __proto__] }) in (new (*::*)([[]]))) {{}\nexport __noSuchMethod__; }");
tryItOut("if(<x><y/></x> += this) __noSuchMethod__; else  if (({}.__defineSetter__(\"__proto__\", Math.sin)) = [z1] <= <><x><y/></x></>) {let __parent__ = <><x><y/></x></>;throw @foo; }");
tryItOut("/*for..in*/for(const prop = ('fafafa'.replace(/a/g, new Function)\n) in (function ([y]) { })()) {return 1e81; }");
tryItOut("let ([, , [[, [__iterator__], ], , ]]) { (__parent__.__count__)\n{yield;\nconst __noSuchMethod__ = __count__;\n } }");
tryItOut("if(( /* Comment */case --__proto__: break; default: (*::*);break; )) {with({__count__: <y><z/></y> = <x/> != (eval(\"\", true))}){/*infloop*/do export *; while(<x/>); } } else /*infloop*/do {try { __noSuchMethod__; } catch(__parent__) { ; }  } while(true);");
tryItOut("/*infloop*/for(\nthis; this.__defineSetter__(\"return 1.3;\", (let (prop = <y><z/></y>, __proto__) ().__defineSetter__); prop = ({a1:1})) {var prop = <x/>; }");
tryItOut("/*infloop*/do {export *; } while((this.zzz.zzz).valueOf(\"number\"));");
tryItOut("for(let y in [5,6,7,8]) try { ; } catch(prototype if true.__iterator__ = true) { __parent__ = #3={a:#3#}; } finally\t { return __proto__: <><x><y/></x></>; } ");
tryItOut("{} const constructor;");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("try { if(arguments) { if (this.__defineSetter__(\"__parent__\", gc)) (1.2e3); else {const prop = *::*; }} } finally { yield __iterator__%= \"\" ; } ");
tryItOut("var <ccc:ddd></ccc:ddd>;(-1);");
tryItOut("if(prototype = (<><x><y/></x></>.__defineGetter__(\"__iterator__\", 5.0000000000000000000000))) { } else let (__count__ = ({a1:1})) {  '' ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ([,,]['__noSuchMethod__']) in 0.yoyo(<x><y/></x>)) { '' ;var __noSuchMethod__; }\nyield;/*for..in*/L:for(__proto__ = this.__defineGetter__(\"__proto__\", Math.pow) in window) export *;");
tryItOut("if(window.__lookupSetter__(\"constructor\")) {([,,z1]).apply } else {throw this;; }");
tryItOut("switch(__count__.((__proto__ = *))) { default: throw <><x><y/></x></>;break;  set __count__ __proto__ () { return prototype.@* } break;  }");
tryItOut("yield;\nexport __iterator__;\n");
tryItOut("L:with((((__parent__.constructor))[this.__defineGetter__(\"__proto__\", (1 for (x in [])))]))/*for..in*/for(prototype =  /x/g  in (-1)) var __count__ = *;");
tryItOut("while((((function ([y]) { })().*)) && 0){gc() }");
tryItOut("if() { if (function  __parent__ ()prop) {var __parent__ =  /x/ , __iterator__ = prototype;throw <y><z/></y>; }} else return *\n");
tryItOut("if((<><></></>.__defineGetter__(\t\"__count__\", (1 for (x in []))))) if(<x><y/></x> | *) if(<y><z/></y>) {( \"\" );{} } else ; else  if ((prototype = <x><y/></x>).propertyIsEnumerable(\"prototype\")) {}");
tryItOut("__parent__");
tryItOut("with({__parent__:  \"\" .isPrototypeOf(<x><y/></x>)}){/*infloop*/L:for(constructor\n; prop .. true; return <x><y/></x>) {gc()[1,2,3,4].map } }");
tryItOut("/*infloop*/do <x><y/></x>\f; while(<x><y/></x>);");
tryItOut("((function ([y]) { })())");
tryItOut("/*infloop*/M:while(((this.valueOf(\"number\")) == (__count__.__noSuchMethod__ setter= Function))){export prototype; }");
tryItOut("if(( ''  for each (__noSuchMethod__ in *))) { if (__count__ = null) {} else {<><x><y/></x></>;let __noSuchMethod__ = <y><z/></y>; }}");
tryItOut("do {prototype = [z1].propertyIsEnumerable(\"__proto__\") } while((<bbb xmlns:ccc=\"{}\"><ccc:eee></ccc:eee></bbb>.([11,12,13,14].some)) && 0);");
tryItOut("const constructor\n;");
tryItOut("do {if(<x><y/></x>) {<x><y/></x>; } else  if (window) {}export __parent__; } while((function::__noSuchMethod__ = <><x><y/></x></>) && 0);");
tryItOut("__proto__");
tryItOut("\u2028");
tryItOut("/*for..in*/for(var [function::__proto__, __noSuchMethod__] = [(this.\r__defineSetter__(\"prototype\", Function))] in (p={}, (p.z = <x><y/></x>)()) % ( \"\" .valueOf(\"number\").__defineSetter__(\"__parent__\", Function))) if(prototype = <x><y/></x> != (constructor = false)) /*for..in*/M:for(let prop = [[]] in  '' ) let constructor, __noSuchMethod__ = true; else  if (prop.__noSuchMethod__) const delete = *, prototype;");
tryItOut("if((new Function(({a2:z2}).eval(*::*), <y><z/></y>)).eval(<><x><y/></x><!--yy--></>)) {return; } else  if (<x\t><y/></x>.(<x><y/></x>)) {/*for..in*/L:for(let #1=[#1#] = <x><y/></x> in <x><y/></x>) {;{} } } else {let __parent__, prop; }");
tryItOut("{/*for..in*/for(var __count__ in  \"\" ) break ; }");
tryItOut("L:switch((-0)) { case 7: *;break; /*for..in*/L:for(const [prop, __proto__] = window in __parent__) {var __iterator__ = *, function::__proto__ = undefined;yield; }break; case <x><y/></x>[__parent__]: /*infloop*/do {break L; } while(3/0); }");
tryItOut("/*infloop*/while(new (__noSuchMethod__.__count__ = <x><y/></x>)(<x><y/></x>.(window))){return; }");
tryItOut("if((let (prototype = 033, __iterator__ = undefined) (new [1,,](#1#, this)))) {{} } else {/*infloop*/for(prop; <x><y/></x>; window) {;yield; } }");
tryItOut("L:switch(break L) { /*for..in*/for([constructor, prop] = (function ([y]) { }.valueOf(\"number\")) in true.propertyIsEnumerable(\"prop\")) __parent__.constructor }");
tryItOut("var __parent__ = false, prop = try { const prop, prototype; } catch(constructor if (function(){*::*;})()) { return; } finally { {} } \n");
tryItOut("/*infloop*/while(prop.@*){;gc() }");
tryItOut("do {L:switch(-1) { case <x/>: var prototype;break;  } } while(((({__count__.__parent__ ? 1.2e3 ^ 1e81 : ((/a/gi)( /x/ , *::*)): <y><z/></y>, prototype: this }))) && 0);");
tryItOut("if(([,])(window)) {while((<y><z/></y>) && 0){yield arguments; }\n } else {gc()/*infloop*/L:while((yield <y><z/></y>--))break M; } const __iterator__;");
tryItOut("for(let y in [5,6,7,8]) with({}) gc()");
tryItOut("{let (prop) { break ; } }");
tryItOut("/*infloop*/do {const constructor; } while(({a2:z2}));");
tryItOut("let(({ __count__: prop }) = window, __iterator__ = true) { for(let y in [5,6,7,8]) yield\nwith({prop: <x/>.__defineSetter__(\"__iterator__\", Math.sin)})yield [z1,,];");
tryItOut("with({__count__: ((function(id) { return id }.yoyo(@foo) .@*:: (*.__noSuchMethod__)) .. <y><z/></y> +=  /x/g  + 'fafafa'.replace(/a/g, ({}).hasOwnProperty))})if(([] for each (prototype in undefined))) /*infloop*/for(var __iterator__ = gc();  /x/ ; <><x><y/></x></>) return this; else \f if (<><zzz><x><y/></x></zzz></>) {__noSuchMethod__, function::__proto__; } else continue M;");
tryItOut("if(<><x><y/></x></>.yoyo(arguments)) {const constructor = *::*;const __parent__, __noSuchMethod__;\f } else  if ((([__proto__]) instanceof (new Exception(<y><z/></y>, <><x><y/></x></>)))) (0/0).call else  get __count__ __parent__ (prop, x::prototype)0.1");
tryItOut("{\n }");
tryItOut("/*infloop*/do {while(((Function).call(window, -1)) && 0){let prop = window;1e-81 } } while((gc)(__proto__.__proto__, <y><z/></y> / ({prop: <x><y/></x> })));");
tryItOut("L: if(window)  else  if (__iterator__) {{} }\t else {[1,2,3,4].map }");
tryItOut("if(.2) { if (try { const __iterator__ = <x><y/></x>; } catch(__count__) { try { return; } catch(__proto__) { (<x><y/></x>.(#1=[#1#]))['__count__'] = __iterator__; } \tfinally { return (uneval(@foo)); }  } finally { yield 1e-81.unwatch(\"__proto__\"); } ) {with({prototype:  /* Comment */function::__count__ >= <><x><y/></x></>}){{}; } }} else /*for..in*/for(var [__proto__, prototype] = false in  \"\" ) {continue L; }");
tryItOut("L:with([[1]])if(window) __proto__; else  if (<x><y/></x>) {yield; }");
tryItOut("if((p={}, (p.z = Error(1e-81))())) {if( \"\" ) { if (*) prototype, false; else  { return <><x><y/></x></> } }\ncontinue ;\n[11,12,13,14].map; }");
tryItOut("let (prop = __iterator__ =  '' ) { M:if(__count__) false\r; }");
tryItOut("with({__iterator__: __count__ = @foo})yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__((__iterator__ = *::*)) in ([15,16,17,18].some(/a/gi, <x><y/></x>))) {null\nlet __noSuchMethod__ = window, __noSuchMethod__ = 1e4; }");
tryItOut(" { return <></> } ");
tryItOut("1e81");
tryItOut("if((yield true)) throw false; else  if (<y><z/></y>) {__iterator__{} }");
tryItOut("/*for..in*/for(var ({ __count__: __proto__, __count__: __count__ }) in ((Error())(this.@foo)))constructor;");
tryItOut("/*infloop*/for(this.valueOf(\"number\"); eval(\"(<x><y/></x>)\", #2=[0]); (window)(0/0)) ");
tryItOut("{yield 1.3;<y><z/></y>.constructor = constructor;\n }");
tryItOut("throw StopIteration;");
tryItOut("let (prop) { yield; } const __noSuchMethod__;");
tryItOut("try { {} } finally { yield; } ");
tryItOut("if( \"\" ) { } else {<x><y/></x>; }\n@foo;");
tryItOut("/*for..in*/M:for(const ((({__parent__: <><x><\fy/></x></>})))((Date(true))) in <x/>) yield <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(var ({ __parent__: __iterator__ }) = (({}).hasOwnProperty());  { continue ; } ; (*['prop'], prototype)) {return <x/>; }");
tryItOut("this.zzz.zzz;");
tryItOut("");
tryItOut("let (__parent__) { {} }");
tryItOut("/*infloop*/while(([({get:  { return this.__defineSetter__(\"__iterator__\", function(y) { yield y; prop;; yield y; }) } ,  get prop()((uneval(<><xxx>{__iterator__}</xxx></>))) })])){{<x/>; }switch(false) { case 7:  /x/g ;break;  } }");
tryItOut("L: {const __proto__ = null; }");
tryItOut("L:with({constructor: eval(\"/*for..in*/for(var prototype in (((1 for (x in [])))(<><x><y/></x></>)))gc()\", true)}){return;yield [[1]]; }");
tryItOut("if(([, , ({ __noSuchMethod__: [, __parent__, , ] }), , ] = [ , ])) export __iterator__; else  if ([-3/0].sort(eval)) /*infloop*/do throw <x><y/></x>; while((__count__ = 0x99));");
tryItOut("throw #1#.__parent__;");
tryItOut("M:with({__noSuchMethod__: [15,16,17,18].filter(function(y) { yield y; export *;; yield y; }, 5.0000000000000000000000)})L:switch([11,12,13,14].sort) { case 4: default: export prop; }");
tryItOut("/*infloop*/M:for(let constructor; (Array()) = (); [,,]) { }");
tryItOut(" { yield (//h\n{ prop: ({ __proto__: __proto__ }) }) = __iterator__ } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in function ([y]) { }) {throw <x/>;return __count__: null; }");
tryItOut("/*infloop*/L:do {} while(<><x><y/></x></>.isPrototypeOf(*));");
tryItOut("for(let y in [5,6,7,8]) with({}) this.zzz.zzz;");
tryItOut("/*for..in*/M:for(let ({ prop: prototype, __parent__: ({ prototype: prop, constructor: __count__ }) }) in  /* Comment */ /x/ ) /*for..in*/for(var prop in ((function(y) { yield y; ;; yield y; })(<><x><y/></x></> === 3.141592653589793)))with({__noSuchMethod__: <x><y/></x>})[, , ({ get: ({ __iterator__: ({ prototype: __noSuchMethod__, prototype: __noSuchMethod__ }) }), __iterator__: prop }), , constructor]");
tryItOut("if((__parent__ < *::*)) { if (yield (__parent__.(#1#) for (__iterator__ in 1e4))) {(undefined);const __count__, __count__; }} else export *;");
tryItOut("M:if(@foo || <><x><y/></x></> ^ ((<x/> for each (prototype in <x/>)))) {while(((constructor = __iterator__)) && 0)let __noSuchMethod__;(#2=<x><y/></x>); }");
tryItOut("/*infloop*/while(__iterator__)export __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __parent__.__count__ in (([ /x/ .@*].some(function  __proto__ () { return function::__iterator__; } )))) {/*for..in*/M:for(let [__proto__, __proto__] = __parent__.__iterator__ setter= Function in (p={}, (p.z = <x><y/></x>.__lookupGetter__(\"constructor\"))())) {\tgc() } }");
tryItOut("/*for..in*/for(let prop = eval(\"<y><z/></y>\", <><x><y/></x></>) in __iterator__) return");
tryItOut("if(*::*) __count__ = false, prototype; else throw <><x><y/></x></>\n");
tryItOut("{throw <y><z/></y>;with(new Iterator(1.3, *::*))break ; }");
tryItOut("do {const prototype; } while((([15,16,17,18].some(new Function, {}))) && 0);\n/*for..in*/for(const [prototype, __noSuchMethod__]\f = ( /x/g  for each (__count__ in <y><z/></y>)) in 'fafafa'.replace(/a/g, ([1,2,3,4].slice).call).isPrototypeOf((prop.x::prop))) {const __iterator__ = *, __proto__; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in undefined) __iterator__;");
tryItOut("if( /* Comment */window) { if (this.__defineGetter__(\"__count__\", Math.pow)) {export *; } else yield;}\n");
tryItOut("while((<x><y/></x>.(.2)) && 0)Math.sin");
tryItOut("__iterator__.__parent__ = __count__;");
tryItOut("/*infloop*/for(const [[,]++, , ] = (new Error(((undefined += undefined) >> -1.__defineSetter__(\"__noSuchMethod__\", (null).watch) |= \tthis))); eval(\"let __noSuchMethod__, __proto__ = window;\", (Boolean().yoyo({} ? <x/> : <x/>))); (5.0000000000000000000000)[<x><y/></x>] ^= ([<x><y/></x>].some((1 for (x in []))))) {break ;throw <x\t><y/></x>;\f }");
tryItOut("{if(__parent__(this) = <x/>.__parent__) getter =  \"\" , __noSuchMethod__ = false;/*infloop*/while(__count__.(@foo)){export prop;yield 0/0; } }");
tryItOut("if((__parent__)) {if(<x/>) {export *;<x><y/></x>; } else  if (null) const __parent__ = *::*; else {gc() }yield 033; }");
tryItOut("let(__iterator__, prop = __iterator__.__iterator__ = ((#1=[#1#])())) { with({}) { throw this ? <x><y/></x> : <><x><y/></x></>; } ");
tryItOut("/*infloop*/do {{;; } } while( = [[]] ? prototype = * : [15,16,17,18].some(new Function, window) ? (arguments >>= <y><z/></y>) : this ==  \"\" .isPrototypeOf(*::* ? null : <x><y/></x>));");
tryItOut("{}");
tryItOut("if(@foo) { if (prop.__parent__ = #3={a:#3#}) {(true);; } else export *;}");
tryItOut("L:with(<x><y/></x>) ");
tryItOut("{throw (<x><y/></x>.valueOf(\"number\")); }");
tryItOut("continue \n");
tryItOut("{} const prototype;");
tryItOut("/*infloop*/L:while(function ([y]) { })export function::prop;");
tryItOut("switch(({(0)(window): (.watch(\"(<x/>.__iterator__)\", gc))\f, constructor: __noSuchMethod__|=true & [z1,,] })) { case 6: break; break; default: case 9: return 1.2e3; }");
tryItOut("{let(__proto__ = window.@*, constructor = window) ((function(){for(let y in [5,6,7,8]) export __count__;})()); }");
tryItOut("switch(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { default: case (<><x><y/></x></>.* ? __proto__ = undefined : prototype.delete).__defineSetter__(\"__proto__\", (new Function(\"do {{}return; } while(((new Function)(window)) && 0);\"))): let(prop = ((uneval( '' ))) ? <x><y/></x> : yield (this.__defineSetter__(\"__count__\", gc));) ((function(){let prop =  '' ;})()); }");
tryItOut("export *; const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in ({\t get __count__ prop ()undefined.__lookupSetter__(\"__parent__\") })) /*infloop*/ [1,2,3,4].slice(const __noSuchMethod__ = (x::__parent__ = false) & undefined('fafafa'.replace(/a/g, this)); <x/>--) __iterator__ = undefined, __count__;(/");
tryItOut("{return <y><z/></y>\n{} }");
tryItOut("do {with({__iterator__: [,]}){{} }L:while(( '' --) && 0)return false; } while(((({}))(@foo, *::*) | this.__defineGetter__(\"constructor\", Math.pow)) && 0);");
tryItOut("/*infloop*/for(({}).__lookupGetter__(\t); ({ __noSuchMethod__: __parent__, __parent__: __iterator__ }) = <x/> / <x><y/></x>;  /x/  .@x:: __parent__ > (<x><y/></x>)((-1), <><x><y/></x></>)) {continue ; }");
tryItOut("with({constructor: undefined})yield <><x><y/></x></>;");
tryItOut("if(window) {let constructor; } else  if ((yield *::*).unwatch(\"function::let\")) {}");
tryItOut("L: {/*for..in*/for(let __proto__ = prop = true in <x/>) {export __iterator__;(<y><z/></y>); } }");
