
tryItOut("yield eval(\" else if \", window);");
tryItOut("if(( /x/ .unwatch(\"__count__\"))) {yield this; } else {{}throw <y><z/></y>; }");
tryItOut("switch(prop.__noSuchMethod__ = __proto__.( \"\" )) { case (new (<>\t<x><y/></x></>.throw(*::*) /= <><x><y/></x></>.isPrototypeOf((---1)))()): break; case [,,z1]: L: return;break; break; case 2: /*infloop*/for(prop; [11,12,13,14].sort; ++new  '' (<x/>, *)) (window);break; case 9: do false; while((false for (__iterator__ in <x><y/></x>)) && 0);break; let (prop, __count__ = <><x><y/></x></>) { export __parent__; }break;  }");
tryItOut("/*infloop*/while(<><x><y/></x></>)export __count__\n");
tryItOut("/*infloop*/while((1e4.__defineGetter__(\"yield\", (new Function(\"return <><x><y/></x></>;\")))))__iterator__ = *;");
tryItOut("with(<><x><y/></x></>)export *;");
tryItOut("const __parent__ = this, __proto__ = #1#;\nyield;\n");
tryItOut("with({}) { yield; } ");
tryItOut("/*infloop*/for(const prototype; yield <><x><y/></x></>.prototype; ?) {/*infloop*/L:do var prototype, __iterator__ = 5.0000000000000000000000; while(this); }");
tryItOut("if(3) { if (<x><y/></x>) {export function::__proto__;return; }} else {gc() }\nyield;\n");
tryItOut("/*infloop*/do export prop; while(*);");
tryItOut("while((__noSuchMethod__.prop getter= (function  __count__ ()1.3. \n0/0 __defineGetter__(, function (__count__ = <><x>//h\n<y/></x></>) { yield  /x/g  } )).call) && 0)var __count__, __noSuchMethod__;");
tryItOut("/*infloop*/for((__proto__.__parent__ = ); (('haha'.split)());  \"\"  * <x><y/></x>) if(-0) {break M; } else  if (('fafafa'.replace(/a/g, function () { yield  /x/  } ))) {var __noSuchMethod__; } else *;");
tryItOut("if( /x/ .throw(<><x><y/></x></>)) return; else  if (new (yield <x/>)(__count__.__defineSetter__(\"__count__\", Math.pow), window)) {; }");
tryItOut("{export *;/*infloop*/do true; while([,,]); }");
tryItOut("let (prototype = Number(@foo)) { /*for..in*/for([__proto__, __parent__] = <{constructor}><ccc:ddd></ccc:ddd></{constructor}>.(window.__defineGetter__(\"constructor\", eval)) in prop = undefined) yield\nreturn; }");
tryItOut("let (constructor) { var __proto__ = [1,,], constructor; }");
tryItOut("with({}) { try { throw StopIteration; } catch(__noSuchMethod__) { with({}) { ; }  }  } ");
tryItOut("try { export prop; } catch(__proto__ if  \"\" .yoyo(<><x><y/></\tx></>)) {  } ");
tryItOut("L:with({prop: (({ set constructor __parent__ (__iterator__, __count__)eval(\"{}\", __noSuchMethod__),  set prototype prop (__proto__, __iterator__) { yield (__proto__ = <x><y/></x>) }  }))}){/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <x/>) {;throw false; }<x><y/></x> }");
tryItOut("const __iterator__;");
tryItOut("(function(id) { return id })\n");
tryItOut("if(<><ccc:ddd><!--yy--></ccc:ddd></>) { if (this()) {export *;continue M; }} else {Math.sin }");
tryItOut("with(function(id) { return id }.@foo){/*for..in*//* nogeckoex bug 349964 */L: for  each(let prop in [[1]]) {\t /x/g ; } }");
tryItOut("/*infloop*/for(delete  /* Comment */(<x><y/></x> >>>=<y><z/></y>); .2; *::* for (prop in )) /*infloop*/for(this.zzz.zzz; new 0x99( '' ); ({__proto__: return window; })) {yield; }");
tryItOut("true;");
tryItOut("L: {throw <><x><y/></x></>;__count__ }");
tryItOut("/*for..in*/L:for(const __proto__( \"\" ) in ((#1#)(([1,2,3,4].map).call(-0, __count__))))<x/>;");
tryItOut("/*for..in*/for(var [constructor, prop] = this.zzz.zzz in (true.unwatch(\"__count__\")) >> this.__defineGetter__(\"constructor\", 1e-81)) {if(null) prop else  if ([,]) ; else case 9: (@foo);break; case 1: break; ((new Function(\"return __parent__;\"))//h\n).call }");
tryItOut("const __proto__ = *");
tryItOut("yield\nyield; const __proto__;");
tryItOut("throw  /x/ ;gc()");
tryItOut("{{} }");
tryItOut("let (({ : __parent__ })) { /*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in <x><y/></x>) M:while(( '' ) && 0){; } }");
tryItOut("/*infloop*/for(let __proto__; 0/0; <x/>) {yield <><x><y/>\r</x></>//h\n;throw  \"\" ; }if([1,2,3,4].slice) { if (undefined.throw(0.1)) {{}return *; }} else {export *; }");
tryItOut("/*infloop*/for(__parent__ = *; __count__; <y><z/></y>) {__noSuchMethod__ = this; }");
tryItOut("switch(true) { default: if(/*\n*/#2=__noSuchMethod__.valueOf(\"number\") instanceof ) { if (let (__count__) prototype = <y><z/></y>.valueOf(\"number\")) /*infloop*/for(const constructor = prop; window;  \"\" ) yield @foo; else export __count__;false;} }");
tryItOut("{; }");
tryItOut("const __parent__;");
tryItOut("if(({a1:1}).propertyIsEnumerable(\"__iterator__\")) {{}gc() }");
tryItOut("throw <x/>");
tryItOut("{if(undefined) {} else { }export constructor; }");
tryItOut("this.zzz.zzz;");
tryItOut("do {gcexport __iterator__; } while((__proto__) && 0);");
tryItOut("let(__noSuchMethod__, constructor = ((\ffunction (constructor, constructor) { yield __noSuchMethod__ } ).call(__parent__,  '' , <><x><y/></x></>)) += (this.__defineSetter__(\"prop\", Math.sin))) { return [1] ^= <><x><y/></x></>;");
tryItOut("L:if(\nwindow) yield; else [1,2,3,4].map");
tryItOut("if(new Function()) {yield window; } else  if (((__noSuchMethod__ = <x><y/></x> if (<x><y/></x>) if (<x/>)))) {((1 for (x in []))).apply }");
tryItOut("/*infloop*/L:while(prop.__count__ = (-window.__defineGetter__(\"__proto__\", Function))){<x><y/></x>[this]; }");
tryItOut("{function (__noSuchMethod__) { return <y><z/></y> } (__parent__); }");
tryItOut("/*infloop*/for(true.eval(this) & \n /x/g .__iterator__; ({__parent__: this.__defineGetter__(\"__count__\", [1,2,3,4].slice).constructor >> ([constructor, constructor] = prop = *)}); ( \"\" .valueOf(\"number\")).yoyo((undefined < *::*))) return;");
tryItOut("{let (__count__, [] = [0x99 if (this)]) { ; } }");
tryItOut("prototype = #1=[(<><x><y/>\f</x></>)(*)]");
tryItOut("/*for..in*/for(constructor = new (<x><y/></x>.( '' ))(__proto__) in ([1,,])) __iterator__, __iterator__ = *;");
tryItOut("/*infloop*/while(({__iterator__:  /x/  & 5.0000000000000000000000 }))/*infloop*/while(arguments && true){{} }");
tryItOut("with(true){constructoryield; }");
tryItOut("let (constructor = #1#) { {} }");
tryItOut("if(({ prop: prototype, function::__iterator__: __noSuchMethod__ }) = ({ __noSuchMethod__: __iterator__ })) {<x/>;throw *::*; } else  if (*::* .@*:: *::*) {__noSuchMethod__; } else {const __parent__, __noSuchMethod__ = <x><y\t/></x>;; }");
tryItOut("/*infloop*/for(var __count__; constructor; ) {{} }");
tryItOut("L:if(Object()) {(*); } else ('fafafa'.replace(/a/g,  /x/g )(/) __noSuchMethod__; else 'M:while(( /x/g ) && 0){return  /x/ ;export ] prop }");
tryItOut("yield var constructor, __noSuchMethod__ = true;");
tryItOut("var prototype, __iterator__; const __parent__;");
tryItOut("let(prototype) { yield ((Math.pow).apply)(*::*);");
tryItOut("export __noSuchMethod__; const constructor;");
tryItOut("if([case 5: continue ;break; default: , , , , prototype] = (window ^  /x/ ).@foo[(window for (prototype in *) for each (prototype in window))]) { if (prototype for each (__parent__ in  /x/ )) {throw *; }} else var __parent__");
tryItOut("");
tryItOut("let (__parent__ = 5.0000000000000000000000) { continue ; }");
tryItOut("/*for..in*/for(const __parent__ in [] / __noSuchMethod__.__defineGetter__(\"__iterator__\", this)) {do {let set; } while((eval(\"__parent__\", __noSuchMethod__)) && 0); }");
tryItOut("{return;<x><y/></x>\n-1; }");
tryItOut("/*infloop*/for([<x><y/></x>].sort((constructor).apply); ((new Function)(@foo)).__parent__ =  \"\"  >>>=@foo; constructor = __noSuchMethod__) {/*for..in*/M:for(var __proto__ in <><x><y/></x></>) ;L:if(undefined)  set __iterator__ __proto__ (__parent__) { yield <><x><y/></x></> }  else {const __noSuchMethod__ = <x/>; } }");
tryItOut("; const __noSuchMethod__;");
tryItOut("/*infloop*/\tfor(new (function  __parent__ (prop)*::*)(); [<x/>].sort(case 7: gc()case 6: break; yield;break; case @foo: let getter;case 0: break; function (__noSuchMethod__) { yield <x><y/></x> } ).__noSuchMethod__ = (false for (prototype setter: (new Function(\"__noSuchMethod__ = prototype, __proto__;\")) in  '' )); __count__) L:while(((eval)(1.2e3) :: eval(\"/*infloop*/L:while(<y><z/></y>\\f)(1.3);\", *)) && 0)export __count__;");
tryItOut("do {;return; } while((((uneval( \"\" )).watch(\"__count__\", function ()<x><y/></x>))[(<xxx>{__iterator__}</xxx>.(__iterator__.(())))]) && 0);");
tryItOut("L: with({}) { for(let y in [5,6,7,8]) gc() } ");
tryItOut("L:do {new Functionreturn ({});\nyield *;\n } while(((prototype = null)--) && 0);");
tryItOut("L: {return false; }");
tryItOut("/*for..in*/for(var (<><x><y/></x></>)(({a1:1})) in ((Math.sin)( /x/g .hasOwnProperty(\"prototype\")))){(arguments); }");
tryItOut("/*for..in*/for(var __proto__ in ((Math.pow)(<x><y/></x> +=  '' ))){L:do {prototypeexport __iterator__; } while((window.__count__) && 0);export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype(window) in [(<x><y/></x>{{}; })]) {throw  /x/ ;const __noSuchMethod__; }");
tryItOut("throw *::*;__iterator__ = window, prop = {};");
tryItOut("/*infloop*/for(prototype = 0; -1; <x/>) {var get;yield; }//h\n");
tryItOut("if(this.zzz.zzz) { if (((__iterator__ = <x/>) for (__parent__ in window.prop = yield;) for each (prototype in <y><z/></y>))) {throw 3\nthrow null; }} else {continue ; }");
tryItOut("/*infloop*/for(constructor; ; (eval(\"undefined.prop =  /x/g \", ((uneval(-0)))))) {let __noSuchMethod__ = <y><z/></y>;/*infloop*/while(<x/>) }");
tryItOut("L:switch((/([11,12,13,14].sort))' { case (#2=({__iterator__: 033 << <x/>})): yield (__proto__)[1.3];break; case this: break; break;  }");
tryItOut("/*infloop*/while(*::*.__noSuchMethod__)return;{{} }");
tryItOut("let ( = * for each (__parent__ in  /x/ ), __parent__) { export *\n }");
tryItOut("M:switch((\tundefined for (__proto__ in 0x99))) { case try { return; } catch(__noSuchMethod__ if [15,16,17,18].map(gc, __noSuchMethod__ = undefined)) { return; } catch(__parent__) { /*for..in*/for(var [__count__, prototype] = @foo in <y><z/></y>) {const -0;window; } } : default: {}break; (<y><z/></y>);case __proto__--: return;break; case 2:  }");
tryItOut("let(__noSuchMethod__ = (((1 for (x in [])))(<><x><y/></x></>.yoyo( '' ), 033)), ({ __count__: {/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in  \"\" ) {{}(*); } } })) { throw  /x/ ;");
tryItOut("let(prototype, __noSuchMethod__) ((function(){throw prop;})());");
tryItOut("{if((({__proto__ getter: function  __count__ (yield, prop) { yield __parent__ } ,  set prop(__proto__) { return <x/> }  }))) {export *;throw [[]]; } else {var prototype = this, __parent__ =  /x/ ;return; } }");
tryItOut("window;");
tryItOut("let (({ __parent__: prop }), __noSuchMethod__) { gc()\nyield <><x><\fy/></x></>;\n }");
tryItOut("let (__iterator__ = (__noSuchMethod__), ({a2:z2})) { (@foo).call }");
tryItOut("if([15,16,17,18].filter(/a/gi, (/a/gi) == ([z1,,]).__defineSetter__)) /*infloop*/for(({ __iterator__: constructor, __proto__: ({ __noSuchMethod__: prototype, __noSuchMethod__: __count__ }) }) = null.__defineSetter__(\"prototype\", <y><z/></y>); [3.141592653589793 if (*)]; __count__.prop = [@foo].sort(gc\f)) { }");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = [prop, , __proto__, , prototype] = ((window)( '' )) in window) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each\f(let __parent__ in ({constructor:  /x/ })) (p={}, (p.z = <x><y/></x>)());");
tryItOut("try { <><x><y/></x></>; } catch(constructor if (function(){yield typeof *;})()) { let(__count__ = this += <x><y/></x>) { setter = __iterator__; } catch(__count__) { __iterator__ = prop; } ");
tryItOut("with({x::__parent__: (.())})export __noSuchMethod__; const __parent__;throw (new window().hasOwnProperty(\"__parent__\"));");
tryItOut("if(().call( '' , <y><z/></y>, *)) return; else  if (<y><z/></y>) {*; }");
tryItOut("prototype = constructor;");
tryItOut("L:if((new (window)(<x/>, *)/*\n*/)) const __noSuchMethod__; else  if (!([11,12,13,14].filter)) {if((<><x><y/></x></>.__proto__)) { if (__parent__ = false) ;} else var constructor; } else gc()");
tryItOut("L: __proto__ = (function ([y]) { })(), __noSuchMethod__ = this;");
tryItOut("/*for..in*/L:for(let [prop, __proto__] = \tprototype.([[]]) in <{__iterator__}>yyy</{__iterator__}>.(Iterator( /x/ , []))) { /x/ ;gc() }");
tryItOut("/*for..in*/M:for(const yield in let (prototype = <x><y/></x>) <x><y/></x>) {{<y><z/></y>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<><x><y/></x></>.delete in  \"\" ) {}\n/*for..in*/for(( \"\"  |= null) in  .@x:: this.zzz.zzz) {export __proto__; }");
tryItOut("let (constructor = <><x><y/></x></>.__defineGetter__(\"__count__\", ({}).__lookupGetter__)) { export *; }\nlet (prototype =  \"\" , __parent__ = -0) { __parent__; }\n{\n<y><z/></y>__proto__; }with({__iterator__: ({setter: undefined, __proto__: <><x><y/></x></> })})continue ;");
tryItOut("/*infloop*/for(-3/0;  /x/g ; __noSuchMethod__) return (-0);");
tryItOut("switch(((__noSuchMethod__.__proto__))) { default: case 7: /*infloop*/do {continue M;yield; } while(null);break; {export *; }case 6: case 4: break;  }");
tryItOut("with((--<><x><y/></x></>.constructor)(__parent__ = this(prop ^= ({a1:1}))))return <x><y/></x>;");
tryItOut("/*infloop*/M:for(window; [15,16,17,18].some(Math.sin, __proto__); ((new function  __iterator__ (constructor) { return __parent__ = ([z1,,] + *) } ( '' .constructor, new <><x><y/></x></>())\n))[(this.__defineGetter__(\"prototype\", ((\n<y><z/></y>)).call))]) /*infloop*/while(let (prop, __iterator__ = <><x><y/></x></>) [[]]){export *;prop = __count__, __parent__; }");
tryItOut("M:if(3) {/*infloop*/M:for(({ __proto__: ({ __noSuchMethod__: __proto__ }), __iterator__: ({ __iterator__: prototype, prototype: prototype }) }) = <>prop</>; ((yield <><x><y/></x></>)); ((let (__iterator__ = 1e-81, __iterator__) <x/>) -= <x><y/></x>.(<><x><y/></x></>))) break ; } else  if (false) L: {/*infloop*/M:while(*){;export __noSuchMethod__; } }");
tryItOut("for(let y in []);");
tryItOut("gc()\n");
tryItOut("let (__proto__, __proto__ = null) { var __iterator__ =  /x/g ; }");
tryItOut("/*infloop*/M:for(__parent__ = (null.propertyIsEnumerable(\"__count__\")).watch(\"prop\", function (constructor) {  } );  /x/ ; yield (this.__defineSetter__(\"prototype\", ('haha'.split).call))) {if(window++) return; else  if ([1,2,3,4].map) {const __parent__;throw <><x><y/></x></>; } }");
tryItOut("let(__noSuchMethod__) { prototype = __iterator__;");
tryItOut("/*infloop*/for(this.@foo; new String(); new gc()) {prop = __parent__; }");
tryItOut("L: yield true\t;");
tryItOut("/*infloop*/for(var ({ __iterator__: [, , , , ], set: ({ __noSuchMethod__: function::constructor }) }) = ({__noSuchMethod__: ( \"\" )() }).isPrototypeOf([__parent__, gc()], __iterator__); (__iterator__ = [(\ttrue//h\n())]); [11,12,13,14].filter) {throw prototype;{} }");
tryItOut("with({}) throw __parent__;");
tryItOut("/*infloop*/M:while(__iterator__, __noSuchMethod__ = this)return;");
tryItOut("do ; while((- \"\" ) && 0);");
tryItOut("yield true");
tryItOut("/*infloop*/for(__proto__; __proto__ = ( /x/g ); (#1=[<x><y/></x>])) {*::*;gc() }");
tryItOut("{gc() }");
tryItOut("with({}) { try { try { constructor.__parent__ = __noSuchMethod__; } catch(prototype if (function(){let([constructor, prototype, , , ], __iterator__) { let(__proto__, constructor) { (*);})()) { let(constructor, __count__) ((function(){throw StopIteration;})()); }  } finally { let(__parent__ = <><xxx {__count__}={(function ([y]) { })()} /></>) { let([, , , ] = new Function()) ((function(){this.zzz.zzz;})()); }  } ");
tryItOut("if(((4.--) != (@foo)(<x><y/></x>, <><x><y/></x></>))) [1,2,3,4].map else  if (033) {\fswitch([z1]) { case 5: const prop;break;  } }");
tryItOut("/*for..in*/for(let __iterator__ in prop = (__parent__ = 1e+81)) {{/*infloop*/M:for((prototype)[<><x><y/></x></>];  /x/ .propertyIsEnumerable(\"__proto__\")\f if ([[]]); (eval(\"__noSuchMethod__\",  /x/ ))) throw *::*; }__iterator__: function () { gc } ([11,12,13,14].filter, this) }");
tryItOut("L:if( \"\"  >> __noSuchMethod__['__proto__'] = prototype. setter) {propexport prop; } else  if (-0) {gc() } else {prop;/*for..in*/for(var __proto__ = <></> in false\f) (1 for (x in [])) }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do {<><x><y/></x></>\nyield <x/>; } while((@foo.prop));");
tryItOut("M:if(constructor) { if (#2=({__noSuchMethod__: __noSuchMethod__})) {__iterator__;with((<><x><y/></x></>)){continue ; } }} else {yield;/*for..in*/for(let __parent__ =  /x/  = 0x99 in <><x><y/></x></>) {0;yield @foo; } }");
tryItOut("M:do {__noSuchMethod__ } while(((constructor.constructor.__lookupGetter__(\"constructor\"))) && 0);");
tryItOut("switch((window - <x><y/></x>)) { default: yield;break;  }");
tryItOut("throw window;export __noSuchMethod__;");
tryItOut("while(((<><x><y/></x></>.valueOf(\"number\").eval((( \"\"  == *))))) && 0){Function{} }");
tryItOut("with(@foo){return; }");
tryItOut("__count__ = prototype;");
tryItOut("throw <x/>;");
tryItOut("/*for..in*/for((!1.3).__noSuchMethod__ in ((Function)(<x><y/></x> -= (__noSuchMethod__ = [,,z1])))){const __count__ = #3={a:#3#}, prototype = this;return @foo; }");
tryItOut("return;L:\fif(<y><z/></y>) {}\t else  if (undefined) return __count__; else yield __proto__;");
tryItOut("/*for..in*/for(const 1.3.__parent__ in ((/a/gi)([*::*].sort([[1]]))))if( /x/ ) { if (__parent__) ;} else return;");
tryItOut("M:do const __proto__; while((null << __parent__) && 0);");
tryItOut("/*infloop*/L:do while((this >=  /x/ ) && 0){gc()const __iterator__ = ({a2:z2}); } while(this.__defineGetter__(\"__noSuchMethod__\", ( '' ).watch));");
tryItOut("M:with({__proto__: prop = <x><y/></x> .@ (* ? <x/> : *::*) & undefined.isPrototypeOf( \"\" )})/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in this.__defineSetter__(\"constructor\", function () { __parent__ = 3.141592653589793, ?; } )) {yield prop;continue ; }");
tryItOut("{/*for..in*/for([__noSuchMethod__, let] = ( === (prop = [z1,,])) in ([1,2,3,4].slice).apply(<x/>)) {L: {throw null;break L; } } }");
tryItOut("if(<x><y/></x>) {yield <x><y/></x>;yield; } else  if (<y><z/></y>) var __parent__ = undefined; else var prop;");
tryItOut("<x><y/></x>");
tryItOut("throw StopIteration;");
tryItOut("while(((window)) && 0)M:if(false) const __noSuchMethod__ = prototype; else  if ([1]) {gc() }");
tryItOut("{this; }");
tryItOut("/*for..in*/M:for(var [__parent__, __proto__] = __iterator__.getter = <y><z/></y>.isPrototypeOf(this) in this.__defineGetter__(\"prototype\", (<><x><y/></x></>).watch)++) {}");
tryItOut("M:if((<zzz>@foo</zzz> instanceof window)) {continue ;gc() } else ;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((function (constructor) { return <x><y/></x>; } )((Error(<x><y/></x>, <y><z/></y>))))){gc() }");
tryItOut("var prototype;\nreturn  /x/g ;\n");
tryItOut("__count__, prototype = undefined;");
tryItOut("/*infloop*/M:for(const __parent__; <x><y/></x>.__defineGetter__(\"__iterator__\", (Function).apply); \nwindow) {<><x><y/></x></>; }\nwith(new (export *)(this.eval(null), <x/>)){yield;export *; }");
tryItOut("{}\nyield this;\n");
tryItOut("gc()");
tryItOut("with({constructor: #1#})yield;");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = (this.__defineSetter__(\"constructor\", function  __iterator__ (constructor) { export *; } )) in  /x/g ) {4.; }");
tryItOut("M:if(null) {{}(<x><y/></x>); } else  if ( '' ) {gc() } else (*);");
tryItOut("export *;const prop = undefined, constructor = undefined;");
tryItOut("/*for..in*/for(prop in 1e4) { }");
tryItOut("M:switch(yield this) { case 1: /*for..in*/for(const __noSuchMethod__ = __proto__ = <x/> in ( /x/g [({__proto__:  /x/ , __noSuchMethod__ getter: new Function })])) /*for..in*/for(__parent__ = try { let prototype; } catch(__iterator__ if (function(){export *;})()) { (null).watch\f } catch(prototype) { const x::__iterator__ = prop; }  in <x><y/></x>) {([]); { true; }  }default: break; case ( /* Comment */null.propertyIsEnumerable(\"constructor\")): export *;break; case 0: return @foobreak; break; case 4: with(((p={}, (p.z = <><x><y/></x></>)())))var __iterator__ = this;while(({}) && 0){constructor, __count__ = *::*; } }");
tryItOut("yield __iterator__ && __count__;\n(1 for (x in []))\n");
tryItOut(";return;");
tryItOut("/*for..in*/for(null['__proto__'] in ((((new Function(\"throw eval(\\\"throw ({a2:z2});\\\", [z1,,]);\"))).apply)((+(<x><y/></x>)))))L:with(window , <><x><y/></x></> ^ 0x99 :: [({a2:z2}) for (__iterator__ in <y><z/></y>)]){/*infloop*/M:do export *; while((new (@foo)())); }");
tryItOut("gc()\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__noSuchMethod__) in <x><y/></x>) {(@foo);yield true; }");
tryItOut("while((new (\f(-3/0 .@*:: 0/0))()) && 0)return;");
tryItOut("do {'return <y><z/></y>; } while(((new window.isPrototypeOf(;)(__proto__.__proto__))) && 0);");
tryItOut("/*infloop*/while(<x/>){export *; }");
tryItOut("{/*for..in*/for(let __count__ in <y><z/></y>) &const __count__ = false, constructor; }");
tryItOut("for(let y in []);");
tryItOut("yield; const prop;");
tryItOut("L:if(<x/>) {\t if ((~@foo.unwatch(\"__count__\").yoyo((!__parent__)))) {var constructor = <x/>;return <><x><y/></x></>; } else {gc() }}if([11,12,13,14].map.throw(<><x><y/></x></>)) {export *; } else  if ((prototype.valueOf(\"number\"))) {return; }");
tryItOut("prototype = __proto__;");
tryItOut("/*infloop*/");
tryItOut("/*infloop*/while(<></>){return; }");
tryItOut("return (yield undefined.__lookupGetter__(\"yield\"));");
tryItOut("with({function::prop: true}){yield; }");
tryItOut("let __iterator__ = window");
tryItOut("/*infloop*/for(<{__parent__}><{prototype}></{prototype}></{__parent__}>; ( '' .__defineSetter__(\"__proto__\", (<x><y/></x>).call)); (__noSuchMethod__.__parent__)) let (__iterator__, constructor = [[1]]) { export prop; }");
tryItOut("/*infloop*/M:for(let ({ prototype: __count__ }) = <y><z/></y>; __count__; <y><z/></y>) {;continue L; }");
tryItOut("M:while(((((function(id) { return id })( '' (), window))())) && 0)const __iterator__; const __count__;");
tryItOut("break ;\nreturn this;\n");
tryItOut("");
tryItOut("do __noSuchMethod__ while((Date()) && 0);");
tryItOut("if((let (__parent__) {}).@foo) { if (<y><z/></y>.\tprop) throw new Iterator(); else {L:if(<><x><y/></x></>.isPrototypeOf(1e4)) { if (new Math.pow(<x/>, arguments)) {export __iterator__; }} else { } }}");
tryItOut("L:if(__iterator__ * false) {gc(){} } else  if ((eval(\"*\", ({})) for each (prop in ({__proto__: window }).eval(({constructor setter: (new Function(\"<x><y/></x>\\n = this\")), prototype: * }))) if ((({ set __proto__ __count__ () { return  ''  }  }))))) function  prop (__proto__) { yield @foo }  else <y><z/></y>");
tryItOut("with({}) { try { (__parent__.__noSuchMethod__ setter= [1,2,3,4].map)(<><x><y/></x></>) = __count__; } finally { let (__proto__) {  } }  } ");
tryItOut("/*for..in*/for(const prototype in <x><y/></x>) {if(this) (new Function(\"let constructor;\")) }\n");
tryItOut("/*for..in*/L:for([__noSuchMethod__, prop] = return .. (yield (__iterator__)) in yield function::__parent__.unwatch(\"__proto__\")) (this.hasOwnProperty(\"__iterator__\"));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\f for  each(new Exception() for (<x><y/></x>.__count__ in window.valueOf(\"number\")) for (constructor in false)['get'] in *::* * ++true) { set __count__(__parent__, __parent__) { yield <y><z/></y> } \n <ccc:ddd></ccc:ddd> getter: <y><z/></y> }");
tryItOut("with({}) throw StopIteration;");
tryItOut("L:do gc()do yield; while(((new (1e4)())) && 0); while((__iterator__ = try { break M; } catch(__proto__) { export x::__count__; } finally { yield @foo; } .eval(__parent__)) && 0);");
tryItOut("/*infloop*/for(var prototype = (new gc(window, <x><y/></x>)); __count__.prototype = String(<><x><y/></x></>, @foo).watch(\"__noSuchMethod__\", function  prototype () { let __parent__ = <x/>; } ); (([,])[__parent__])) {let constructor = 5.0000000000000000000000, let; }");
tryItOut("let (prototype = __iterator__, __parent__) { __count__ = false; }");
tryItOut("<x><y/></x>");
tryItOut(";");
