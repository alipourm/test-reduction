tryItOut("gc()");
tryItOut("switch(true ? this : *) { default:  }");
tryItOut("/*infloop*/for(var __count__; (__proto__ = true); <><x><y/></x></> - this.__defineGetter__(\"prototype\", ({}).__lookupGetter__)) if((break [this ? window : __iterator__].@*)) { if ((<x/>.eval(@foo).__lookupGetter__(\"__proto__\"))) break ; const __noSuchMethod__; else {let (prop = *::*, prop) { {export __count__; } }export __noSuchMethod__\n }}");
tryItOut("/*infloop*/do gc() while(({ __iterator__: function::__proto__, prototype: __parent__ }) = ([<><x><y/></x></>].map((1 for (x in [])))));");
tryItOut("let (__iterator__, __noSuchMethod__) { /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__.prototype in \f<><x><y/></x></>) {{} } }");
tryItOut("__noSuchMethod__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in *) {export *; }\n");
tryItOut("L:if(0) yield <x/>;");
tryItOut("var prototype =  /x/ , __iterator__;{}");
tryItOut("M:if(function ([y]) { }) M:if([15,16,17,18].filter(eval, -3/0) | this.__iterator__) {(false);export *;throw 3.141592653589793; } else  if ( '' ([z1]).unwatch(\"__count__\") instanceof <><bbb xmlns:ccc=\"__parent__\"><ccc:eee></ccc:eee></bbb></>) {/*for..in*/for(const __proto__ in <><x><y/></x></>) {continue M; } }");
tryItOut("if(constructor.constructor setter= [1,2,3,4].map) { if ((((p={}, (p.z = <x><y/></x>)())) < 1e4)) var set;} else {continue L;let __parent__, __iterator__; }");
tryItOut("/*infloop*/for((__count__.__count__ =  /x/ )\n.__defineGetter__(\"__iterator__\", new (\t<x><y/></x>)(1e4,  '' ))--; new RangeError(prop =  \"\" );  ) L: let __count__ = <y><z/></y>, __parent__ = undefined;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*infloop*/for( /x/ ; (this); new (-0)()) {return false; }");
tryItOut("/*for..in*/for(var __iterator__ = (0/0.isPrototypeOf(constructor)) in __iterator__) {{} }");
tryItOut("{yield <><x><y/></x></>;export __count__ }");
tryItOut("if(*::*) {let __iterator__ = [[]], prototype; } else  if (([([,,]).watch(1.2e3)].map(function(q) { return q; }))) {(window); }");
tryItOut("if(@foo) return;");
tryItOut("M:if(prototype |= this) {return;throw *; } else  if ((-0)) let __count__ = <x><y/></x>; else this.zzz.zzz;");
tryItOut("/*infloop*/while(this){throw __proto__; }");
tryItOut("if((<x><y/></x> | function(id) { return id }.throw((*::* &= <y><z/></y>) .@x:: (yield #3={a:#3#})))) {} else  if (<y><z/></y>.@*) {yield; } else {export prototype;yield <y><z/></y>; }");
tryItOut("do {with( '' ){(<x><y/></x>); } } while(((<x><y/></x>.propertyIsEnumerable(\"prototype\"))[({__iterator__:  /x/ })]) && 0);");
tryItOut("with({prototype: <x><y/></x>}){yield;gc() }");
tryItOut("yield yield prop;");
tryItOut("L:if(({ __iterator__: ({ __count__: [], __noSuchMethod__: prototype }), __proto__: [] }) = new (this.zzz.zzz)(([,,z1]))) { if (let (prototype = [[,]].sort(function  __iterator__ (__parent__) { return ({a1:1}) } ), __count__ = [11,12,13,14].filter) (<x><y/></x>.(<x><y/></x>)))  catch  else (prop);}");
tryItOut("/*infloop*/M:while((eval(\"\\fexport __proto__;\", <><x><y/></x></>)))*::*;");
tryItOut("L:do {continue ;; } while(((eval(\"let (__parent__) @foo\", @foo))) && 0);");
tryItOut("export __noSuchMethod__\n(arguments);");
tryItOut("yield -1;\nconst __parent__, __proto__ = <x><y/></x>\nlet __iterator__ = __parent__;\n");
tryItOut("let (__iterator__) { gc() }");
tryItOut("let (__iterator__ = getter = (-1) , [[]] ? this : this, prop) { gc() }");
tryItOut("/*infloop*/for(__proto__; ; @foo) {;return; }");
tryItOut("/*for..in*/M:for(let __iterator__ in <y><z/></y>) {{} }");
tryItOut("M:if(__count__ = [].throw(<x><y/></x>.(__count__))) continue ;");
tryItOut("/*for..in*/for(let __proto__ in \n<x><y/></x>) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const \t({ __iterator__: prototype }) in __parent__.hasOwnProperty(\"__parent__\")) let __iterator__;");
tryItOut("return __proto__;\n\n");
tryItOut("/*infloop*/do switch(constructor;) { case 7: break;  } while((prototype = new ((1 for (x in [])))((function  __noSuchMethod__ (__count__) { yield <y><z/></y> } )(),  '' )));");
tryItOut("if(+<><x><y/></x></> >>> [,,z1] ? (({}).hasOwnProperty).apply : (<x/> && <y><z/></y> .@*:: null < null)) {(window);do ; while((*) && 0); } else  if ( '' ) throw __noSuchMethod__;");
tryItOut("if(<><>\nfunction ([y]) { }.watch(\"prototype\", function (prop) { return * } )</></>) { if ([11,12,13,14].sort) {export __parent__;/*infloop*/for(__noSuchMethod__; prop; (__noSuchMethod__ = <x>//h\n<y/></x>)) 'haha'.split }} else {return <><x><y/></x></>; }");
tryItOut("M:if(( /x/g .__defineGetter__(\"__noSuchMethod__\", false))) {const __iterator__ = function::__noSuchMethod__, __proto__ = <y><z/></y>;; } else  if (void __noSuchMethod__ % (({ get prop(__proto__) { yield <y><z/></y> }  }))) {{} }");
tryItOut("/*infloop*/L:while(1e-81)const constructor, __proto__ = [,,];");
tryItOut("/*for..in*/for(const constructor in undefined) {{} }\n");
tryItOut("return;");
tryItOut("\n(*);\n");
tryItOut("if(( '' .eval(<><x><y/></x></>))) {yield <x/>; } else  if (#3={a:#3#} * <x/>) {throw  '' ; }");
tryItOut("/*for..in*/for(let [prop, __proto__] = (default: break;  = null) in .2) gc()");
tryItOut("if(arguments) { if (this) return this; else const constructor, __count__ =  '' ;}");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("with({}) for(let y in [5,6,7,8]) <y><z/></y>");
tryItOut("/*infloop*/L:do /*infloop*/L:do export __noSuchMethod__; while(<x><y/></x>); while(<x/>.__lookupSetter__(\"constructor\"));");
tryItOut("with(3){; }");
tryItOut("/*infloop*/for(<employee id=\"1\"><name>Joe</name><age>20</age></employee> .(__proto__); new function (__iterator__) { export *; } (<><x><y/></x></>)(prototype.__count__ setter= __proto__,  /x/ ) > eval(\"/*for..in*/for(var __iterator__ = this in  /x/g ) @foo;\", __parent__ = undefined); ++<><{constructor}><!--yy--></{constructor}></>) /*for..in*/for(const prop = [[]] in null) return;");
tryItOut("const __count__ = yield;, __noSuchMethod__ = [[1]];");
tryItOut("L:if(this) {__count__, prop = null;break L; } else  if (true) /*infloop*/do {yield; } while( \"\" ); else {const __iterator__; }");
tryItOut("M:if(eval(\"-0\", undefined)) {Math.sin } else  if (<bbb xmlns=\"this\">yyy</bbb>)  else {let prop; }");
tryItOut("with(( ''  @ true)){return;export __parent__; }");
tryItOut("");
tryItOut("/*infloop*/__proto__ setter: function (__count__) { export __noSuchMethod__; } ");
tryItOut("if(__proto__ = <x><y/></x>) {return <x><y/></x>;let __noSuchMethod__, __noSuchMethod__ = *; } else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([, , //h\n, ({ __iterator__: ({ prototype: __iterator__, prop: prototype }) }), __count__] in ((let (__iterator__) 'fafafa'.replace(/a/g, <x/>)) & arguments.yoyo(eval(\"continue ;\",  /x/ )))) /*infloop*/for(const prototype; window; <x><y/></x>) continue ;");
tryItOut("with((({ __proto__: prototype, __parent__: prototype })\t = (<x><y/></x>.__noSuchMethod__ = 0/0))){& }");
tryItOut("/*for..in*/for(const __parent__ = <y><z/></y> in  /x/g ) {return; }");
tryItOut("L:with((({ __iterator__: ({ __proto__: ({ __iterator__: ({ __proto__: constructor, __iterator__: __noSuchMethod__ }), constructor: ({ __parent__: prototype, __proto__: __noSuchMethod__ }) }) }), constructor: prop }) = (constructor.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map))))with({__count__: <x/>})gc()");
tryItOut("switch((false.hasOwnProperty(\"prototype\"))) { case 4: break; default: prop, __noSuchMethod__const __iterator__ = x::__iterator__;break;  }");
tryItOut("/*for..in*/for(const prop in <x/>) {var __iterator__ = {}, __proto__; }");
tryItOut("/*infloop*/while(__count__){throw *; }break ;");
tryItOut("return __proto__;");
tryItOut("yield <><x><y/></x></>\n");
tryItOut("if((__noSuchMethod__)()) /*infloop*/for(__parent__; ({__noSuchMethod__: <><x><y/></x></>, __parent__: false }).__lookupSetter__(\"__proto__\"); ([false].sort(new Function))) if(3) { if ( '' ) {var __iterator__ = false; }} else return ({a2:z2});");
tryItOut("/*for..in*/for([constructor, __parent__] = (*++).__defineSetter__(\"__count__\", [1,,]) in <x/>) __count__ = *, __count__ = __noSuchMethod__;");
tryItOut("/*for..in*/for(__iterator__ in (\n(Math.pow)(*))){throw <x><y/></x>;throw <><x><y/></x></>; }while((0/0) && 0)let __count__ = @foo;");
tryItOut("/*infloop*/do break M; while([,,]);");
tryItOut("/*infloop*/M:for(var [] = ('fafafa'.replace(/a/g, eval));  ''  += <x><y/></x>; (<x><y/></x>)[-1].@*) export *;");
tryItOut("M:while((this.__defineSetter__(\"constructor\", Math.pow)) && 0){return <x><y/></x>;return; }");
tryItOut("L:if(__count__ >>= *::*) {/*\n*/prototypeexport __iterator__; } else  if (__iterator__.prototype setter= function (__iterator__) { yield ([] >>>= /x/ ) } ) constructor");
tryItOut("L: yield;");
tryItOut("/*for..in*/for(const [constructor, prop] = ([11,12,13,14].some) in <y><z/></y> < -1) /*infloop*/for(var prototype; __count__; ( '' .eval(false))) ;");
tryItOut("{evalthrow eval(\"__proto__\",  /x/g ).__defineGetter__(\"constructor\",  '' ); }");
tryItOut("if(((uneval(@foo))).throw(prototype ? @foo : <x/>)) {{}return ++true; } else var __iterator__ = <><x><y/></x></>;");
tryItOut("return [false.__defineGetter__(\"__iterator__\", Function) for each (__iterator__ in [z1]) for (__count__ in -1)];");
tryItOut("/*infloop*/M:while(new ((1 for (x in [])))( \"\" , [15,16,17,18].some(Math.pow, yield <x><y/></x>.__defineGetter__(\"__parent__\", ({}).hasOwnProperty))))return  '' \n");
tryItOut("L: M:if(prop = 1.3) return; else  if (function ([y]) { } < false) {{} } else yield window;");
tryItOut("M:do {__parent__ = 5.0000000000000000000000;break M; } while((true) && 0);");
tryItOut("/*infloop*/do throw undefined; while(); const __iterator__;");
tryItOut("if((yield <x/>)) { if (<x><y/></x>) {continue ; }} else {return; }\n(false);");
tryItOut("with({}) { __iterator__ = prototype; } \n");
tryItOut("let ([({ __iterator__: [prop, ({ function::*::*: __noSuchMethod__ }), [({ __parent__: ({ constructor: __iterator__, prototype: __count__ }), prototype: [, , , , prop] }), , __count__, function ([y]) { }['__noSuchMethod__'], ]], __count__: __proto__ }), constructor] = prop) { with({}) { throw __parent__; } \n/*infloop*/for(const prototype; this; #3={a:#3#}) {let __iterator__; }\n }");
tryItOut("if(3)  else  if (window.@foo) {;var __count__, __noSuchMethod__ = @foo; } else {null;return ({a2:z2}); }");
tryItOut("{yield; }");
tryItOut("with(#1=({prototype: *}))let __iterator__ = <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((<x><y/></x>)(__count__) in *::*) window;");
tryItOut("if(false) { if (this.zzz.zzz) if(({ prototype: __proto__ })) { if ((<x><y/></x>)[null]) <zzz>__count__</zzz> else throw -0;}} else L:if(Number(__parent__)) {throw window; }");
tryItOut("return;");
tryItOut("while((__iterator__.__parent__) && 0)/*infloop*/M:for(<x><y/></x>; (-0); 1e81) this;\f");
tryItOut("let (__parent__, __parent__ = window) { break M; }");
tryItOut("const constructor = typeof null;");
tryItOut("yield <><x><y/></x></>;\nthrow function(q) { return q; }\nnull;\n");
tryItOut("/*infloop*/do {{prop = <><x><y/></x></>;const __iterator__, constructor = *::*; } } while(<><x><y/></x></>(*::*) &= __proto__ = function::prototype);");
tryItOut("let __noSuchMethod__ = ({a2:z2}), __iterator__ = undefined;\n__parent__;\n");
tryItOut("return;");
tryItOut("with({__iterator__: --[ /x/ .hasOwnProperty(\"__proto__\")].map(function  __iterator__ (constructor, __count__) { yield --(~<y><z/></y>) } )}){yield <><x><y/></x></>;; }");
tryItOut("/*for..in*/for(let [constructor, __noSuchMethod__] = (<x><y/></x>.(__proto__)) ==  \"\"  in <y><z/></y>) yield gc();");
tryItOut("let __proto__;");
tryItOut("yield;\nconst prototype;\n");
tryItOut("return (__count__ = <><x><\fy/></x></>).__defineSetter__(\"getter\", Math.pow);");
tryItOut("M:if(((!window).unwatch(\"__count__\"))) {if(<x><y/></x> *= /*\n*/prop) { if (<x><y/></x>.(<x/>)) (__iterator__); else {gc() }}gc() }");
tryItOut("/*infloop*/do {return;{let __noSuchMethod__ = <x><y/></x>; } } while([,]);");
tryItOut("(undefined);\nyield;\n");
tryItOut("L:do yield; while((5.0000000000000000000000) && 0);");
tryItOut("export *;\nexport __noSuchMethod__;\n");
tryItOut("M:while((RangeError(window, (new new Function() ? new new Function(<><x><y/></x></>) : (eval(\";\", undefined))) += <bbb xmlns:ccc=\"@foo\"><ccc:eee></ccc:eee></bbb\f>.__parent__)) && 0){for(let y in [5,6,7,8]) throw  \"\" ; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for([__iterator__, constructor] = 3 in __iterator__) return  /x/ ;");
tryItOut("L: gc()");
tryItOut("{}");
tryItOut("/*for..in*/L:for(var (0); in #3={a:#3#}) gc");
tryItOut("const __parent__;");
tryItOut("M:if(<x/>) { if (3.141592653589793) {return;const __count__; }} else let __noSuchMethod__ = 1.2e3, __count__ =  /x/ ;");
tryItOut("/*for..in*/M:for(var get((-1)) in (4.\n)) {null;*::* }");
tryItOut("while((({ __iterator__: ({ __count__: [, , ({ prop: __count__ }), ({ __noSuchMethod__: __iterator__, constructor: __noSuchMethod__ }), function::prop], __iterator__: ({ function::__noSuchMethod__: ({ prototype: prototype }) }) }), constructor: prop }) = prototype) && 0)/*infloop*/for(const prop =  /x/ ; [z1,,]; prop) {export *;export __noSuchMethod__; }");
tryItOut("/*infloop*/do ; while((this.__defineSetter__(\"prototype\", (new Function(\"/*for..in*/for(const (window)( /x/ ) in ((Math.pow)(__proto__ = <x><y/></x>))){throw <x><y/></x>;gc() }\")))) .@*:: ({ get constructor(__count__, prototype)prop = (\n<x/>) }));");
tryItOut("with(({ set prop __noSuchMethod__ () { yield <><x><y/></x></> }  })){with({prototype: 033}){export *; } }");
tryItOut("let (__count__ = [z1,,].@foo) { /*for..in*/for((1e+81)(case 2: prop, prototype = arguments;case 6: case 4: let __proto__ = this, __parent__ = ({a1:1});break; break; case 7: case 7: break; default: break ;break; case <x><y/></x>: break; ) in ((prototype)(this.__defineSetter__(\"__proto__\", (1 for (x in []))))))with(constructor-=<><x><y/></x></>){/*infloop*/for(__parent__ = <x/>; <><x><y/></x></>; [,,z1]) {yield <y><z/></y>;return; } } }");
tryItOut("return constructor;");
tryItOut("return <y><z/></y>;");
tryItOut("if(constructor) {(1e81);throw true; } const constructor;");
tryItOut("with({constructor: false ?  \"\"  : @foo}){/*infloop*/for(const __proto__ = [[]]; [1]; <x><y/></x>) {{} }throw window; }");
tryItOut("this.zzz.zzz;");
tryItOut("while((var __noSuchMethod__ = <y><z/></y>, __proto__) && 0)/*infloop*/do const __proto__; while(<x><y/></x>);");
tryItOut("if(<><x><y/></x></>) { if (__iterator__) { \"\" ;gc() }} else {{}yield undefined; }");
tryItOut("if(prop) (window);");
tryItOut("{(*::*);const let = this; }");
tryItOut("if( \"\" ) { if (constructor = (this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; const __proto__ = null, __count__;; yield y; }))) {yield <y><z/></y>;('haha'.split).call }} else export *;");
tryItOut("/*for..in*/M:for(var __iterator__ in (((new Function(\"gc()\")))(<x><y/></x>)))continue \n\n");
tryItOut("{{}yield; }");
tryItOut("/*for..in*/for(let (function(id) { return id })((__parent__ = 3)) in  /x/g ) if(true) { if (function(id) { return id }) {return;yield; }} else {gc() }\nconst prop, __count__\n/*for..in*/M:for(const constructor in <><x><y/></x></>) {return  /x/g ; }");
tryItOut("if(undefined ? * : <y><z/></y>) {}__iterator__ else  if (Math.pow(<y><z/></y>).hasOwnProperty(\"<xxx>{__parent__}</xxx>\")) yield *; else {return; }");
tryItOut("/*infloop*/for(let constructor; ((x::prop.prototype =  '' ).constructor = ({ set __parent__()window })); [, constructor, __parent__, constructor] = ({__parent__: [[]], __parent__ getter: eval }).hasOwnProperty(\"__parent__\")) {/*for..in*/for(var [__noSuchMethod__, __noSuchMethod__] = __count__ in [z1,,]) {return <><x><y/></x></>;; } }");
tryItOut("throw __iterator__;");
tryItOut("<x><y/></x>;\n\t/*for..in*/L:for(const __parent__ =  \"\"  in <y><z/></y>) ;\n");
tryItOut("/*for..in*/for(var __iterator__ = \n( /* Comment */((function(q) { return q; }).call(constructor, ))) -= <bbb xmlns:ccc=\"constructor / prototype\"><ccc:eee></ccc:eee></bbb> in --window ? window : null) {/*infloop*/for(({ get __parent__ __iterator__ (__parent__)<y><z/></y>,  get __count__(constructor) { {} }  }).__defineSetter__(\"__iterator__\", ( /x/g ).call); (__iterator__.@foo |= false.valueOf(\"number\")); ({prop: this -= __proto__, __noSuchMethod__:  /x/  })) {return  /x/g ;\n{}\n{gc() } } }");
tryItOut("/*for..in*/M:for(const __proto__ in (let (__parent__) 1e+81 ? undefined\n.constructor = --@foo : (<><x><y/></x></>.@*))) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in 1e4) @foo;");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = [,,z1] in <><x><y/></x></>) {export *; }");
tryItOut("do {try {  } finally { continue M; } Math.pow } while((* = @foo) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:do export *; while(033);");
tryItOut("/*for..in*/for(var [__count__, constructor] = 'fafafa'.replace(/a/g, Math.sin) in  /* Comment */<x/>) {throw (* < <x>//h\n<y/></x>); }");
tryItOut("/*for..in*/for(let [prototype, __iterator__] = new null(<x><y/></x>) in null) {break L;yield ({a1:1}); }");
tryItOut("while((<x><y/></x>.valueOf(\"number\")) && 0){/*infloop*/for(let constructor;  '' ; <y><z/></y>) {return this;__count__; } }");
tryItOut("L: {const __parent__; }");
tryItOut("/*infloop*/for(const prop = 5.0000000000000000000000; __count__; --) return <><x><y/></x></>;");
tryItOut("if(()) {L:if(true) throw <x><y/></x>; else {let constructor;return <x/>; }L:with({__iterator__: arguments})return <y><z/></y>; } else while((<y><z/></y>) && 0)export *;");
tryItOut("throw <x/>;");
tryItOut("if(Exception((this.__defineSetter__(\"prototype\", <x><y/></x>))).prototype) {} else  if (prop = <y><z/></y>.hasOwnProperty(\"constructor\")) if(constructor = __noSuchMethod__) {continue L; } else  if (constructor = <x/>) break L; else {}");
tryItOut("M:do {<x/>;const __count__, constructor = __proto__; } while((new ([1])(<><x><y/></x></>, __proto__)) && 0);");
tryItOut("L: {if(<x/>) return <x><y/></x>; else  if (__proto__) return <x/>; else {yield;export *; }if(.2)  else  if (__noSuchMethod__) throw <x><y/></x>; }");
tryItOut("let prop;");
tryItOut("with({}) return undefined;");
tryItOut("/*infloop*/for(const __noSuchMethod__; *::*(<x><y/></x>.__noSuchMethod__ = __proto__); -3/0) return;");
tryItOut("if(this) return; else  \"\" ;");
tryItOut("if((this.__defineSetter__(\"__proto__\",  /x/g ) >>= (<x><y/></x> + <><x><y/></x></>))) {} else  if (([1][prop]).throw(new Exception()) &= ({constructor: undefined})) {const __count__, get = @foo;throw constructor; } else { }");
tryItOut("__count__ = constructor;");
tryItOut("if(arguments) {yield; } else export *;");
tryItOut("while((<bbb xmlns:ccc=\"(*).call(prototype, true, __count__)\"><ccc:eee></ccc:eee></bbb>++) && 0)if(((__noSuchMethod__ == -1) for each (__iterator__ in constructor) for each (__iterator__ in 5.0000000000000000000000))(<><x><y/></x></>.unwatch(\"__parent__\"),  \"\" )) {\t__noSuchMethod__; } else  if (this.zzz.zzz) ; else __iterator__");
tryItOut("let (prototype = ((Exception((this) if (<><x><y/></x></>))) |=  /* Comment */5.0000000000000000000000 <= <><x><y/></x></>), __iterator__) { /*for..in*/for([delete, prototype] = __iterator__ in (<x/> , <><x><y/></x></>)) if(*::* <= <x><y/></x> ? this.zzz.zzz : <x><y/></x>)  else  if (window.prop) const __proto__, x::constructor = <x/>; }");
tryItOut("if( \"\" ) {L:do {continue M;{} } while((<><x><y/></x></>) && 0); } else  if ([11,12,13,14].map) prototype = <x/>");
tryItOut("var prop = <x><y/></x>, __parent__");
tryItOut("if( /x/g ) {} else  if (__proto__.__noSuchMethod__ setter= ({}).__lookupGetter__) throw <x><y/></x>; else gc()");
tryItOut("\n<x><y/></x>;");
tryItOut("yield this.*;");
tryItOut("yield; const __iterator__;");
tryItOut("(this.zzz.zzz)(new ((window)(this))()) = prototype;");
tryItOut("/*infloop*/while(\n<><\fx><y/></x></>.propertyIsEnumerable(\"__iterator__\"))continue M;");
tryItOut("while(( ) && 0){{yield <><x><y/></x></>;case this: case 1: throw \tthis;break; /*\n*/let constructor = <x><y/></x>;default: break; case 8: (<x/>);{}break; case 5: break; case 0: case  /x/ : __count__;return;yield  \"\" ; } }");
tryItOut("{gc() }");
tryItOut("(<><x><y/></x></>);");
tryItOut("L: {throw *::*;gc()\nL:with(<y><z/></y>)constructor; }");
tryItOut("[1];");
tryItOut("while((arguments) && 0){return <x/>;var __noSuchMethod__, x::prop =  /x/ ; }");
tryItOut("gc()");
tryItOut("let (prop = const constructor, __count__, __iterator__) { /*infloop*/for( { return <y><z/></y> }  = Error(); [1,,].__defineSetter__(\"__noSuchMethod__\", function  prop (__noSuchMethod__, constructor) { return * } ); Number(window.throw( \"\" ))) { }\n }");
tryItOut("/*for..in*/for([prototype, __iterator__] = \ntrue++ in __parent__) /*for..in*/L:for(const function::__proto__ = @foo in *) gc()");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __count__] = (<x><y/></x> >>>={}) in 1e4) continue ;");
tryItOut("/*infloop*/do \t{(@foo).__defineSetter__gc() } while({});");
tryItOut("export *;");
tryItOut("do {{} } while((((\n1e-81 < (window .@ __noSuchMethod__)) <<= *)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in __parent__) {__parent__[1,2,3,4].slice }");
tryItOut("(<x><y/></x>);yield undefined;");
tryItOut("let ([, __noSuchMethod__, , __noSuchMethod__, ] =  /x/g ) { L:if(1e-81) { if (false) {(({}).__lookupGetter__).applyexport *; } else {{}(<x/>); }} }");
tryItOut("yield");
tryItOut("/*infloop*/do {export constructor; } while(Boolean());");
tryItOut("/*for..in*/M:for(var set in ((({}))(null)))export *;");
tryItOut("/*for..in*/L:for(__proto__ in __parent__ = <><x><y/></x></>) {(({ __noSuchMethod__: prop }) = <x><y/></x> | prototype.prop = 3) }");
tryItOut("__iterator__ = constructor;");
tryItOut("let (__noSuchMethod__ = prototype = prop) {  }");
tryItOut("while((#1=[#2=[1.3]]) && 0)(eval).apply\n");
tryItOut("with({__count__: yield (--<><x><y/></x></>.yoyo([[1]])).__proto__}){export prototype; }");
tryItOut("with({}) for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("let constructor = *, __count__ = <x/>;");
