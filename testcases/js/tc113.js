tryItOut("M:if(prop =  /x/g ) {return;; } else return;");
tryItOut("let(prototype = #2=[null], prop) { yield (\nnull);");
tryItOut("L: {var __count__;return; }");
tryItOut("/*infloop*/do /*infloop*/L:for(1e+81 +=  /x/ ; __proto__.__proto__ getter= (<><x><y/></x></>).__defineSetter__; <x><y/></x>.watch(\"__parent__\", [1,,])) {evalyield; } while((window)[window].watch\f(\"__proto__\", gc));");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = (true.yoyo(\fconstructor.(<x><y/></x>))) in <y><z/></y> || []) {return  if (<y><z/></y>);break M; }");
tryItOut("let(constructor = [1,2,3,4].slice) { with({}) with({}) { function ([y]) { }; } ");
tryItOut("let __parent__, constructor = <x><y/></x>;");
tryItOut("/*infloop*/M:for((prop = undefined.prop); *::*; * /= (false >>> *::*)) {export *; }");
tryItOut("if(({ prop: prop, constructor: __iterator__ }) = 1e4.unwatch(\"prototype\").eval(Object(this))) {L:with(window){continue L; }let prop = [[]];\nexport __noSuchMethod__;\n }");
tryItOut("if(this) { if (((yield ('haha'.split)))) {yield; }} else { \"\" ; }");
tryItOut("gc()\nif(__iterator__%={}) {; } else  if (prop.(*::*)) {yield <x><y/></x>;var __parent__; }\n");
tryItOut("if((--window)) L:if(#1=({prop: (<x><y/></x> ? #0=({prop:  '' }) : ( /x/g [<x><y/></x>]))})) { if (constructor) {Math.sin const prototype;return; }} else {const __noSuchMethod__, __parent__;; } else {try { for(let y in []); } catch(__noSuchMethod__ if (function(){let(prop, prop) { (0/0);})()) { try { continue ; } finally { {} }  } catch(__parent__ if (function(){break L;})()) { __iterator__ = ((yield  /x/g )) = prototype; } const __noSuchMethod__, __iterator__\nreturn; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in <><x><y/></x></>) ");
tryItOut("/*infloop*/for(false\r < #2=[window]; 0.1 <<= false; ((prototype = <x><y/></x>)(__iterator__.prototype getter= ( \"\" ).apply,  \"\" .hasOwnProperty(\"__iterator__\")))) var __proto__ = <x><y/></x>;");
tryItOut("if(1.2e3.eval( /x/ )) {{L: {return; }return; } }\nbreak M;");
tryItOut("if() {continue ;((Math.sin).apply).apply } else  if (function(id) { return id } ? #1=[#1#] : <x><y/></x>) yield <y><z/></y>;");
tryItOut("with({}) { ({ __parent__: prototype }) = function::__iterator__.prototype; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop['__noSuchMethod__'] in <x/>.__iterator__ = this.__defineGetter__(\"prototype\", /a/gi) in yield  \"\" .__lookupSetter__(\"__count__\")) if(__count__ = true) { } else  if (<x><y/></x>.eval(<y><z/></y>)) const __proto__, __count__;");
tryItOut("{with({__proto__: [11,12,13,14].some})return; }");
tryItOut("M:if(<x/>) continue M;\t else  if (false.@*) <x><y/></x>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in prop = __noSuchMethod__) {if(({constructor: <y><z/></y>, __proto__ setter: ({}).__lookupGetter__ })) {{}throw -0; } else  if ((<x/> in <x><y/></x> if ([,,z1]))) break ; else yield  '' ; }");
tryItOut("if(null) export *;");
tryItOut("/*for..in*/L:for(let __proto__(<><x><y/></x></>) in ((function (__noSuchMethod__, __iterator__) { yield __count__ } )(prototype))) \"\" ;");
tryItOut("{return *; }");
tryItOut("if(prototype = <x><y/></x>) {/*for..in*/for(let default: continue L; in 1e-81)  } else  if (prop.constructor = function (__proto__) { return  /x/  } ) {<x><y/></x> } else {L:if(window) gc() else  if (this) \n }");
tryItOut("/*infloop*/M:do {switch(((function(y) { yield y; <><x><y/></x></>;; yield y; })(null))) { case 4: break; continue ;break; {} }export *\nvar prototype; } while(({prop setter: function (constructor, __noSuchMethod__) { yield  ''  } , __noSuchMethod__ getter: ( '' ).watch }));");
tryItOut("throw *::*;");
tryItOut("/*infloop*/for(var prototype; __proto__ = <x/>; 3.141592653589793 @ this) {{} }");
tryItOut("/*for..in*/for([function::constructor, prop] = <><bbb xmlns:ccc=\"[,,]\"><ccc:eee></ccc:eee></bbb></> in  /x/g ) /*infloop*/M:for(const __iterator__;  /x/  for (__proto__ in <x/>); <><x><y/></x></>) {{} }");
tryItOut("/*for..in*/for(@foo['__count__'] in __parent__) for(let y in [5,6,7,8]) return (delete *);");
tryItOut("/*infloop*/M:for(__parent__; (({__proto__: new (function ([y]) { })(<><x><y/></x></>)\f})); RegExp().valueOf(\"number\")) try { throw StopIteration; } catch(__parent__ if (function(){yield (prototype.__noSuchMethod__);})()) { for(let y in [5,6,7,8]) let( if (__count__), prototype) ((function(){let(__parent__ = ([z1](this, *::*)), __count__ = <><x><y/></x></>) { let(__noSuchMethod__ = 3, __proto__) { })()); } catch(prop) { continue L; } finally { for(let y in []); } ");
tryItOut("/*infloop*/M:do {/*infloop*/for(-3/0; (-1).prototype = constructor; new <x><y/></x>) {export __proto__; }L:if(__proto__) {var __proto__;; } else  if (<x><y/></x>) { } else __iterator__ = window, __proto__ = [,]; } while(new ~1e4((__parent__ = *::*)));");
tryItOut("L: {/*infloop*/M:for(<y><z/></y>; [z1,,]; [,]) gc()(@foo).watch }");
tryItOut("L: {if(0x99) { if (<x/>)  else {yield <><x><y/></x></>; }}let (constructor = [[1]]) { {} } }");
tryItOut("yield [[]].__defineSetter__(\"__parent__\", ((eval).call( \"\" , <y><z/></y>)).watch);");
tryItOut("yield;");
tryItOut("/*infloop*/for(var prop; (__noSuchMethod__ = __proto__); [15,16,17,18].filter(function (__count__) { return <y><z/></y> } , <x/>)) throw 4.;\nnew Function\n");
tryItOut("/*infloop*/M:for(__proto__; 0/0.unwatch(\"__count__\"); (uneval((eval)(prototype)))) {{function () { return [z1,,] }  } }");
tryItOut("if((<>yyy</>.((><x><y/></x></>)))) ({ prototype: __iterator__, __count__: constructor }) else {with({__iterator__: (( '' .valueOf(\"number\")) >> __iterator__.prototype = <x><y/></x>)}\t){let constructor = <y><z/></y>;return; }if(<y><z/></y>) {(1 for (x in [])); } else  if (<x><y/></x>) {{}return __iterator__; } else { { return window.__defineSetter__(\"__iterator__\", function (function::__count__, __parent__) { //h\n } ) }  } }");
tryItOut("if(1e+81) { if (1e+81) __noSuchMethod__ = 1.3; else throw 0;}");
tryItOut("while(((function  __parent__ (({ prop: (\t{ prototype: __iterator__, __iterator__: __noSuchMethod__ }) }), __parent__) { yield @foo.yoyo(<><x><y/></x></>).eval((yield  /x/g )) } )) && 0)if(__iterator__) {yield <><x><y/></x></>;yield; }");
tryItOut("/*infloop*/for(const [, ] = (eval(\"export constructor;\", ((yield __parent__)))); (__parent__.constructor); yield (new (new Function(\"<y><z/></y>;\\nthrow <><x><y/></x></>;\\n\"))(__count__, (<x><y/></x> for each (constructor in [z1]))))) {/*for..in*/for(let __iterator__ in <y><z/></y>.__proto__) ; }");
tryItOut(" '' \n/*infloop*/for(let __proto__; <x/>; null) {return; }");
tryItOut("/*infloop*/for(var __proto__; function(id) { return id }.__count__ = ((Math.pow)(<x><y/></x>, constructor).unwatch(\"constructor\")).prop;  /x/ ) yield;");
tryItOut("/*infloop*/do {return; } while(<><x><y/></x></>)");
tryItOut("/*infloop*/for(var ({ constructor: prototype }) = ('haha'.split).call([,,], prototype.__parent__, this); constructor, __count__;  /* Comment */<><x><y/></x></>) {}");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __parent__] = (prototype = (1e+81)()) in new <><x><y/></x></>) /*for..in*/for(__iterator__ in ((new Function)(prototype = case 'fafafa'.replace(/a/g, <><x><y/></x></>): break; case (( /x/ )): gc()case 4.: let __parent__ = <><x><y/></x></>, prototype;default: const __count__ = false, __proto__;break; )))yield -3/0;");
tryItOut("L:if((<><x><y/></x></>).watch.yoyo((__proto__.prototype))) { if (this) new Function else {export __iterator__; }}");
tryItOut("switch(__noSuchMethod__+=<x><y/></x>) { case __iterator__ = function::__noSuchMethod__.__parent__: break; break; break; case 0: break; default: /*for..in*/for([__proto__, __count__] =  /x/g  in 3) __parent__ = *, __noSuchMethod__;break; const __noSuchMethod__ = <x><y/></x>;case 8:  }");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) let(__count__ = __parent__ = \n<x><y/></x>, __iterator__ = 1e81 @ *::*) { with({}) yield  '' .isPrototypeOf(<><x><y/></x></>);");
tryItOut("M:if((!<><x><y/></x></>).valueOf(\"number\") ? eval(\"<x><y/></x>\", __parent__) : ((<y><z/></y>)[undefined])\n) {} else {yield; }");
tryItOut("/*for..in*/M:for(let, __noSuchMethod__ in ((({}).__lookupGetter__)((prototype(arguments.*) = ((yield 0.1.@*)))))){with(constructor)__iterator____iterator__; }");
tryItOut("with({}) { continue ; } \n3.141592653589793");
tryItOut("if(<><{__proto__}></{__proto__}></>) { if (__count__.constructor = <><x><y/></x></>) {const constructor, __proto__ = arguments; }} else {var __noSuchMethod__; }");
tryItOut("with(1e-81 & undefined){return; }");
tryItOut("/*for..in*/for(var [__parent__, prop] = 0.1 .@*:: arguments in null) {let __iterator__, __proto__; }");
tryItOut("for(let y in []);");
tryItOut("\n");
tryItOut("{if(({__proto__ getter: (@foo).watch })) {(<x><y/></x>); } else  if ((-0)) continue M;/*infloop*/do __proto__ = yield, __count__; while(*::*(<><x><y/></x></>, <y><z/></y>)); }");
tryItOut("L: {L:if(<x><y/></x>) { if (3/0) let __proto__ = this, constructor;} else {var __parent__, __proto__ = true; } }");
tryItOut("do ; while(( \"\" .yoyo(__proto__)\f) && 0);");
tryItOut("/*infloop*/[__parent__, constructor, , , ]for((p={}, (p.z = (__iterator__ |= *::*))()); [let (__parent__) (prototype.propertyIsEnumerable(\"prototype\"))].some(new Error(-1, *::*)); [<employee id=\"1\"><name>Joe</name><age>20</age></employee>].sort(Function)) {return prototype;if(<x/>) gc() }");
tryItOut("return; const __parent__;");
tryItOut("with({constructor: ((yield <><x><y/></x></>).isPrototypeOf(Object()).*)}){{}/*for..in*/L:for(prototype = t in ) {__proto__\nL:if(1.2e3) prototype else {} } }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = window.constructor in (<><x><y/></x></>.eval(({})))) (Math.pow).apply const prototype;");
tryItOut("L: (<><x><y/></x><\f/>);");
tryItOut("__parent__ = __count__;");
tryItOut("/*infloop*/L:for(const __iterator__ = <><x><y/></x></>; <x/>;  '' ) { }");
tryItOut("/*infloop*/do {with({prop: (\nwindow)}){export *; } } while(eval(\"<x><y/></x>\",  \"\" ) == *.__lookupSetter__(\"prop\"));");
tryItOut("/*for..in*/\rL:for(const __iterator__ in ((({}).__lookupGetter__)((({prototype: ({__iterator__ getter: <x><y/></x>, [__count__]: (window.__proto__) })})))))switch((<><x><y/></x></> .@x:: prop(( /* Comment */this.zzz.zzz).__proto__ = false.__lookupSetter__(\"__noSuchMethod__\")))) { default: case [, , __proto__, ]: return;case [11,12,13,14].sort: break; case ({ __iterator__: ({ __iterator__: prop, prop: prototype }) }) = this: {}break; case 8: break M;case 4: break; var __noSuchMethod__ = <x><y\t/></x>; }");
tryItOut("/*infloop*/for(__noSuchMethod__; this.zzz.zzz; (yield constructor.__iterator__ = #1#.*)) /*for..in*/for(var [__noSuchMethod__, __iterator__] = new Function.* in [1,,]) {if(<><x><y/></x></>) { if (*::*) {export prop; } else {gc() }} }");
tryItOut("return constructor;");
tryItOut("if(__iterator__ =  /x/ ) {Math.powlet __iterator__ = #1=[#1#]; } else  if (new RegExp(arguments)) yield;");
tryItOut("/*infloop*/for(let __noSuchMethod__.__parent__ = #1=({__noSuchMethod__: (new (/a/gi)(*::*))}); (uneval(true)); let (function::constructor =  /x/ ) 0/0.yoyo(([1].valueOf(\"number\")).__count__ =  \"\" )) {let (__iterator__ = @foo) { ; }(1 for (x in [])) }\f");
tryItOut("{{(*).watch/a/gi } }");
tryItOut("{yield this.__defineGetter__(\"__count__\", /a/gi) >> (yield this)return; }");
tryItOut("/*infloop*/M:for(constructor; ; (eval(\"arguments\", <y><z/></y>)) += __count__|=[[]] < __iterator__ = __iterator__ = null) var __parent__ = function ([y]) { }");
tryItOut("/*infloop*/M:do {(3/0); } while(__count__);");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("M:switch(__parent__ = <><x><y/></x></>) { default: break; case case 2: break; : break;  }");
tryItOut("if({}.isPrototypeOf(void this)) {//h\nwhile((this.zzz.zzz) && 0){break L;constructor, __noSuchMethod__ = *; } } else  if (({}).__lookupGetter__) {;{return false; } }");
tryItOut("if(((p={}, (p.z = this.__defineSetter__(\"__proto__\", <><x><y/></x></>))()) for (__parent__ in __noSuchMethod__ = let (__parent__, prototype = <><x><y/></x></>) window) if (([, ({ __proto__: __noSuchMethod__ }), , ] = (prop.(<><x><y/></x></>))))\f)) yield <x><y/></x>\n else  if (new Error(constructor = <y><z/></y>)) //h\n{/*for..in*/for(const __iterator__ in ((/a/gi)(prototype.hasOwnProperty(\"__proto__\")))){(<x><y/></x>);gc() }(undefined)\n{} }");
tryItOut("if(window) { if (this.zzz.zzz) return; else {export \f__parent__;}");
tryItOut(";");
tryItOut("with(this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)){__noSuchMethod__; }");
tryItOut("/*infloop*/L:for(var prop = (([].__iterator__ = ({}))); (\n3.141592653589793); #2=[this.__defineGetter__(\"__iterator__\", ([1]).__defineSetter__)]) {}\n(<x/>);");
tryItOut("/*infloop*/while((*::* ?  /x/  : undefined ,  \"\" .__parent__ = (({ get __count__(function::prop, __iterator__)'fafafa'.replace(/a/g, ({}).hasOwnProperty), constructor: (({__count__: [1,,]})) }))));");
tryItOut("M:if((#1=(prototype.__count__ getter= 'haha'.split).throw((new (({}).__lookupGetter__)(<><x><y/></x></>))))) {\ffunction (prop) { return false }  }");
tryItOut("/*for..in*/for(prototype = (yield (({constructor: ({ get prop __iterator__ (__proto__, prop) { return (__noSuchMethod__ = [[]]) }  }), __count__ getter: [1,2,3,4].slice }))) in #3={a:#3#}) {/*infloop*/for(__iterator__;  '' .yoyo( /x/g ); prop for each (constructor in *::*)) throw <y><z/></y>;/*for..in*/for(let __iterator__ in 1e+81) {{}yield; } }");
tryItOut("/*infloop*/M:for(var [(<x><y/></x>)( '' ), , constructor.prop, ({ constructor: ({ __proto__: prototype }) }), ]; window; [15,16,17,18].some('haha'.split, (__proto__ = this) != (<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")))) {return;; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (([1,2,3,4].map)( /x/  ^ constructor))){yield; }");
tryItOut("yield; const prop;");
tryItOut("let (__iterator__) { /*\n*/__iterator__ = [,,z1]; }");
tryItOut("throw StopIteration;");
tryItOut("if( \"\" ) {M:with(-( '' [1e81])){yield;((<x><y/></x>).apply).call }switch(0.1.unwatch(\"__proto__\")) { default: return <y><z/></y>; } } else  if (function ()<x/>([z1,,], 1e-81)) {return null;__iterator__; }");
tryItOut("{{}gc }");
tryItOut("/*for..in*///h\nfor(__parent__ =  in <x/>) {const \fconstructor =  /x/ , prop = 5.0000000000000000000000; }");
tryItOut("if(eval(\";\", *)) { if (__parent__.(undefined)) {var __parent__, prop = #1=[#1#];continue ; }} else {gc() }");
tryItOut("{/*infloop*/do {prototype: (window >> -3/0)yield this; } while((eval(\"(<><x><y/></x></>);\",  \"\" ))); }");
tryItOut("with(<x/>.__iterator__ >= this.__defineSetter__(\"__count__\", false)){if(-1) {yield; } else  if (<x/>) {(this);export __iterator__; } else {{} }__count__ = <><x><y/></x></>, prototype\nthrow <x/>; }");
tryItOut("let (({ prototype: __parent__ }), __iterator__ = (<x><y/></x>.hasOwnProperty(\"constructor\"))) { L: {var prototype = <x><y/></x>, prototype = case 4: yield [z1];break; default: break; ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in prototype = (p={}, (p.z = <employee id=\"1\"><name>Joe</name><age>20</age></employee>yyy)())) {/*for..in*/for(var __count__ in ((function (__parent__, __parent__) { yield null } )(<y><z/></y>)))yield *::*; const throw StopIteration;;export prototype; }");
tryItOut("/*infloop*/L:for(new RangeError(\n<><x><y/></x></>, window); ((eval(\"#2=[<y><z/></y>]\", (<><x><y/></x></>.isPrototypeOf(<x><y/></x>)))) ? (({}).hasOwnProperty).call(false, <><x><y/></x></>, this) : (<x/> if (3.141592653589793))).watch(\"__proto__\", ([,,].unwatch(\"constructor\")).__defineSetter__); this[(@foo--)]) {__noSuchMethod__ =  /x/ , prop;gc() }");
tryItOut("yield;\ngc()\n");
tryItOut("/*for..in*/L:for(var [__iterator__, ] = ((p={}, (p.z = -1)())).eval([,] this ) in (this)().propertyIsEnumerable(\"prototype\")) {if(({ __count__: __iterator__ }).(\n*)) { if ((<x/>.yoyo( /x/g ).*)) throw *::*; else yield;}switch( /x/ ) { default: break; case 1: let __count__ = <x/>, __noSuchMethod__ = <><x><y/></x></>;break; break; case 2: case 3: continue M;break; break; case *: case 2: break; break; function  constructor (__iterator__) { return @foo } case *::*: <x/>;export __noSuchMethod__;break;  } }");
tryItOut("if((prop for (__parent__ in <x/>))) { if (__proto__) {var __iterator__ = *::*; } else var set = #1#;}");
tryItOut("{if((__iterator__ = ({a2:z2}))) { if ((<><x><y/></x></>.valueOf(\"number\"))) {throw *::*; } else throw undefined;} }");
tryItOut("/*infloop*/for(const ({ prototype: prototype }) = String((uneval(([1,2,3,4].slice)((undefined))))); \n[15,16,17,18].some((this).__defineSetter__, function ([y]) { })\f; (-1)) {export *\nexport __parent__;throw []; }");
tryItOut("if(gc) {export *;var prototype =  '' ; } else  if (((__iterator__) = new (__proto__ | this))) {export *; '' ; }");
tryItOut("/*infloop*/M:while(~<x/>.@*)/*for..in*/for(var [__iterator__, __iterator__] = <y><z/></y> in <x><y/></x>) {__parent__ set __iterator__ __proto__ (__iterator__) { return undefined }  }\n");
tryItOut("return [#3={a:#3#} ? __proto__ :  /x/g .valueOf(\"number\")];");
tryItOut("{function  __parent__ (prototype, __proto__)true/*for..in*/for(let [__proto__, __parent__] = undefined in  /x/g ) return <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__noSuchMethod__) in (p={}, (p.z = (p={}, (p.z = (@foo.isPrototypeOf([,,z1])))()))())) /*infloop*/while(<><x><y/></x></>);");
tryItOut("prototype = 0x99, __iterator__;");
tryItOut("{with(break ;)gc()yield; }");
tryItOut("do {{}gc() } while((@foo) && 0);");
tryItOut("/*for..in*/for(var ()(  = *) in ((function (prototype, ({ __noSuchMethod__: prototype })) { return prototype.__noSuchMethod__ = <x><y/></x> .@x:: <y><z/></y> } )(({prototype: (eval(\"<><x><y/></x></>\", <x><y/></x>)).__lookupGetter__(\"__count__\"), __parent__: __noSuchMethod__ = __parent__ }))))gc()");
tryItOut("if( /x/g ) throw 1e-81; else  if (null) {{}{} } else {let __noSuchMethod__; }");
tryItOut("{3;{throw [,,z1];let __iterator__, __count__; } }");
tryItOut("do {__count__+=4.; } while((<bbb xmlns=\"(function ([y]) { })().__defineGetter__(\"__proto__\", [1,2,3,4].map)\"> </bbb>) && 0);");
tryItOut("return;");
tryItOut("/*for..in*/L:for(__iterator__.__noSuchMethod__ in (function ([y]) { })()) ;");
tryItOut("yield #1#\nM:with(<x><y/></x>){export __noSuchMethod__; }\n/*infloop*/M:while(1.2e3 ? #3={a:#3#} : <x><y/></x>--){__noSuchMethod__ }\n");
tryItOut("M:if(new ([1,2,3,4].slice)()) { if (<zzz> \"\" </zzz>) gc() else <x><y/></x>;}");
tryItOut("L:while((prop) && 0){window;yield; }{while((x>) && 0)throw constructor;while((__count__ = __proto__) && 0)(new Function(\"gc()\")) }");
tryItOut("if(()) {yield; } else  \"\" ;");
tryItOut("{/*infloop*/do return  \"\" ; while(<x><y/></x>);break ; }");
tryItOut("if(({prototype: [11,12,13,14].some})) {export prototype; } else  if (((({a2:z2})\n).__count__)) export *;");
tryItOut("with(*)export *");
tryItOut("throw __proto__;");
tryItOut("if() gc()");
tryItOut("yield\nM:while(((this.__defineSetter__(\"constructor\", (function  __proto__ (__iterator__)<><x><y/></x></>).call))) && 0){continue M; }");
tryItOut("{if([,,z1]) (undefined); else {(<x><y/></x>);{} } }");
tryItOut("with({}) { let(__count__ = (__noSuchMethod__.(window)).valueOf(\"number\"), prototype = (__count__ =  /x/ )) { return; } ");
tryItOut("if([z1,,]) let __count__;");
tryItOut("L: {yield <x><y/></x>; }");
tryItOut("let ([[({ __noSuchMethod__: ({ __iterator__: __parent__, __proto__: ({ __noSuchMethod__: ({ __count__: __count__ }), __count__: __iterator__ }) }) }), , [constructor, prototype, ({ __iterator__: ({ function::__iterator__: [__parent__, , , ] }) })], , __iterator__], , ]) { /*for..in*/for(let [__proto__, __iterator__] = <><x><y/></x></> in  \"\" ) yyy }");
tryItOut("/*for..in*/for(const __iterator__ = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in ((uneval(<x/>))).throw([1].eval(-1))) while(( /x/ ) && 0){throw null; }");
tryItOut("if(prop;) {prototypeexport *; } else  if (++this.zzz.zzz) /*infloop*/for(prop; <><x><y/></x></>; false) return; else {constructor;export *; }");
tryItOut("export constructor\n");
tryItOut("/*infloop*/L:for(0.1 if (function ([y]) { }); eval(\" /x/ \", <x/>); ((yield <x/>))) return <x/>;");
tryItOut("if(prototype) 5.0000000000000000000000; else  if ([z1]) {return  \"\" ; }");
tryItOut("/*infloop*/do {export *;prototype = @foo, prop\n } while(((window instanceof prop)(<><x><y/></x></>, null)\f));");
tryItOut("let (__parent__ = [z1]) { with(<x><y/></x>)let prototype; }");
tryItOut("do const __parent__ = <y><z/></y>, __noSuchMethod__ = <x/>; while((this) && 0);");
tryItOut("throw __count__;");
tryItOut("with({__iterator__: .2}){; }");
tryItOut("let (prop = function::function::__iterator__) { with({prop: yield undefined['__count__'].__parent__ = [,,]})M:with(<><x><y/></x></>.isPrototypeOf( /x/ )){return false; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__([1,,]) in [prototype = window for each (__count__ in  /x/g ) if ((function ([y]) { })())]) ( /x/g );");
tryItOut("/*infloop*/L:do const prop; while(new (@foo)());");
tryItOut("/*infloop*/for(var ( { prop:  = [15,16,17,18].some((1 for (x in [])), <x/>); __noSuchMethod__ = undefined; eval(\"__count__.prototype setter= ({}).__lookupGetter__\", (__parent__ = @foo))) {undefined;gc() }");
tryItOut("if(({__parent__: new RegExp(case (RegExp(null, window)): (0);break; default: ;break; ) / <x/> ? window :  /x/g .yoyo(__proto__ = 1.2e3)})) {/*for..in*//* nogeckoex bug 349964 */ for  each(function::__noSuchMethod__\t in <x/>) let __proto__, __parent__; } else {default: yield;break; case 5: break; (3/0); }");
tryItOut("/*infloop*/M:for(__parent__.eval(this); (( /x/g  * this).prop); (({constructor getter:  \"\" () }))) gc()");
tryItOut("/*infloop*/for(false; (__parent__%= /x/ ); Function(null)) {}");
tryItOut("L: L:if(constructor + prototype) { if (new RangeError( /x/g , @foo)) {yield;let constructor = window; }} else gc()\n/*infloop*/for(__iterator__; <><x><y/></x></>; __parent__) constructor = <x/>;\n");
tryItOut("{prop = window; }");
tryItOut("export __parent__;");
tryItOut("if(window.@foo) yield this; else return 033;/*for..in*/for(const constructor in prop.__parent__ setter= @foo) /*infloop*/for(var [({ __parent__: __proto__ })] = (uneval(*::*)); (p={}, (p.z = 4.)()); window /= <x><y/></x>) {/*for..in*/M:for(const __proto__<><ccc:ddd><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></ccc:ddd></> = [undefined].some(function () { yield <x><y/></x> } )/ in false) let (__count__ = <><x><y/></x></>, __parent__ = <x><y/></x>) <x/>.prop{(*);continue ; } }");
tryItOut("if(__noSuchMethod__) const __iterator__; else  if (<><x><y/></x></>) {(this).__defineSetter__prop }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((prop) in <x><y/></x>) {if([,,]) throw [,]; else  if (@foo) yield; }");
tryItOut("/*infloop*/while(__count__++){return <>(<x><y/><)/x></>;{yield; } }");
tryItOut("yield (void <x/>);");
tryItOut("return __count__;");
tryItOut("/*infloop*/for(const prop; this .@*::  \"\" ; this.__defineSetter__(\"constructor\", (function ([y]) { })())) ;");
tryItOut("L:do if(#2=*::* > <x><y/></x>) throw @foo; else  if (<x><y/></x\f>[<><x><y/></x></>].throw((null.*))) /*infloop*/while(false) while(((x::__proto__.( \"\" ) ? 5.0000000000000000000000 : @foo\n)().__defineSetter__(\"__iterator__\", gc)) && 0);");
tryItOut("if(--(({prop: 0x99 }))) constructor; else  if ((uneval(this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice) ^ ([[1,,]])))) gc()");
tryItOut("(window)\n");
tryItOut("let (constructor = <y><z/></y>, __iterator__) { export *; }");
tryItOut("if(__parent__) { if (this.zzz.zzz) {export *;{let constructor, constructor;export __iterator__; } }} else {if((__iterator__.prototype = prop)) { if (<y><z/></y>.valueOf(\"number\")) {<x><y/></x>;yield; } else \rexport __parent__;\t}gc }");
tryItOut("/*infloop*/for(__iterator__; true !== undefined; ({ get __count__ prop () { var prop; } , prop: <><x><y/></x></> })) {/*infloop*/for(let constructor; ++ '' ; ([1,2,3,4].slice)(\f)) function(y) { yield y; const __iterator__ = <x><y/></x>, __iterator__;; yield y; }throw  \"\" ; }");
tryItOut("const __noSuchMethod__");
tryItOut("with({prototype: ((({}).__lookupGetter__).call('fafafa'.replace\t(/a/g, ({}).hasOwnProperty), Date(0, false)))}){return; const __proto__; }");
tryItOut("/*infloop*/L:do {const  ''  = @foo;; } while(((Math.sin)())[(__noSuchMethod__ = *.watch(\"__count__\", (false).__defineSetter__))]);");
tryItOut("let __iterator__, constructor;");
tryItOut("/*for..in*/for([__count__, __count__] = [z1,,] in *) /a/gi\nvar __proto__, prototype = <><x><y/></x></>;");
tryItOut("/*infloop*/for(( '' .valueOf(\"number\")\f.__lookupGetter__(\"prop\")); (({__count__: [z1]})); (delete [[1]])) M:if(prop = <y><z/></y>) { if (<><x><y/></x></>) {return *::*;<x><y/></x>; } else export prop;}");
tryItOut("L: {let x::constructor = window, __count__; }");
tryItOut("/*infloop*/for([({ __count__: __parent__ }), __proto__, , , prototype] = (({ get __noSuchMethod__ __count__ (__proto__) { break ;, prototype: this })) &= (--({a2:z2})); (<y><z/></y>.isPrototypeOf(__iterator__)[window.@foo]); (__count__.prop =  /x/g )) {var __parent__ = __noSuchMethod__, constructor;if(function ([y]) { }) { { yield <y><z/></y> }  } else throw <y><z/></y>; }");
tryItOut("/*for..in*/M:for(let prototype in  '' ) {if(__parent__.yoyo(__proto__)) { if (\t[z1,,]) /*infloop*/M:do const __count__, prototype; while(*::*);} else break ;var __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<x/> in  /x/ ) *::*");
tryItOut("if(__proto__ = __proto__ if (undefined)) {}");
tryItOut("L:if(( \"\" .isPrototypeOf(this))) {yield; } else {yield <x><y/></x>;var constructor =  '' , __parent__ = <x/>; }");
tryItOut("do {continue ;/*infloop*/do  while((this.zzz.zzz)); } while((__parent__.(({prototype: #1#, __proto__ getter: [1,2,3,4].map }))) && 0);");
tryItOut("const prop = 4., constructor;");
tryItOut("var prototype, __count__\n\n");
tryItOut("this.zzz.zzz;");
tryItOut("this.zzz.zzz;");
tryItOut("let ([({ prototype: __noSuchMethod__, ({ __noSuchMethod__: [], __noSuchMethod__: ({ prototype: __iterator__ }) }): __noSuchMethod__ }), , , ({ prop: prototype, __count__: ({ __count__: [, , ], __proto__: __proto__ }) })] = <x/> <<=  /x/g .\tpropertyIsEnumerable(\"prop\"), __iterator__) { {} }");
tryItOut("/*infloop*/do L:while(((new (1.2e3)().prototype)\t) && 0)gc() while(<x/> / this);");
tryItOut("with({}) export *;");
tryItOut("with((__proto__.__defineGetter__(\"__parent__\", ({}).hasOwnProperty)))yield;");
tryItOut("function(y) { yield y; {}; yield y; }");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("let __parent__ = <><x><y/></x></>\nif((<><x><y/></x></>.valueOf(\"number\"))) { if ((<x><y/></\nx>.*)) {; } else return;}\n");
tryItOut("/*infloop*/do {} while(window)");
tryItOut("(/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <><x><y/></x></>) yield;\n)\n");
tryItOut("if([11,12,13,14].sort[[function ([y]) { } for each (function::__proto__ in false)]]) {do {const __noSuchMethod__ = 4., __count__ = <x><y/></x>;continue ; } while(( \"\" ) && 0) } else  if (prop.watch(\"__proto__\", this)) /*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in [constructor]) ;");
tryItOut("{{throw prototype;/*infloop*/do /*for..in*/for(let __iterator__ in ((Math.pow)(__parent__))){1.3;__parent__ = [], prototype; } while((new 1e4 < #3={a:#3#}.eval((<><x><y/></x></> <= this))().eval(prototype = this))); } }");
tryItOut("throw StopIteration;");
