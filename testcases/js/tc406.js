tryItOut("throw __parent__;");
tryItOut("false; const prototype;");
tryItOut("L:if(this) {continue ;return; } else  if (__proto__) const prop, __iterator__;");
tryItOut("/*for..in*/for(var __proto__ in (\n.__count__)) {{} }");
tryItOut("export __count__;");
tryItOut("/*for..in*/for(let [__parent__, delete] = #0=((Math.pow).call(<x><y/></x>, @foo).hasOwnProperty(\"__parent__\")) ? __iterator__ : (function::__parent__ = constructor) in (let (prototype, prop = undefined) window) in (<x><y/></x>.(\t<x><y/></x>))) {continue L;{{}return; } }");
tryItOut("__count__");
tryItOut("yield;");
tryItOut("if(prototype) { if (<><{__proto__}><><x><y/></x></><ccc:ddd></ccc:ddd></{__proto__}></>) {gc()if(\n /x/g ) {export prop;return true; } }} else ");
tryItOut("/*infloop*/for(const ({ __iterator__: constructor }) = __proto__ = this;  for (__noSuchMethod__ in __proto__.*) if (#1#); * in  /x/g )  get prototype <><ccc:ddd> </ccc:ddd></> (__count__)({a2:z2}).valueOf(\"number\")");
tryItOut("yield;");
tryItOut("while((this.zzz.zzz) && 0){yield; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(<x/>) return <><x><y/></x></>; else  if (({ __count__: prop, __parent__: __proto__ }) = __count__) {yield; }");
tryItOut("M:if([15,16,17,18].sort(( \"\" ).call, this)) { if (<y><z/></y>) eval else (1e+81);}");
tryItOut("/*infloop*/while(constructor.__count__ || <x><y/></x>.eval(false)){<x><y/></x>;/*infloop*/L:while([window]){{}(new Function(\"\")) } }");
tryItOut("/*infloop*/for(__parent__; <><x><y/></x></>; \n<x/>) {yield; }");
tryItOut("with({__count__: function (prop, __noSuchMethod__)0/0(#0=({let: true}), <x/>)})/*infloop*/for(const prop = eval(\"__parent__ = ({ __proto__: __count__ })\", (true).call((<><x><y/></x></>)(),  { <><x><y/></x></>; } , *)); ((this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice))++); (Math.pow)(([*::* for each (delete in  \"\" )])).__defineSetter__(\"__parent__\", (false.prototype))) gc()");
tryItOut("/*infloop*/while(<x><y/></x>){; }");
tryItOut("with({}) { const __proto__ = __parent__\f; } ");
tryItOut("/*for..in*/for(var prop in [11,12,13,14].some.__defineSetter__(\"<zzz><><x><y/></x></></zzz>\", 4.)) {yield 3.141592653589793;\nyield;\n/*infloop*/for(<><x><y/></x></>; this;  /x/ ) break ; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (setter.__parent__ = (__noSuchMethod__.__count__ setter= [1,2,3,4].slice).eval(<x/>)); Array() > (({__count__ setter: Function, __noSuchMethod__:  /x/  }))) { /x/g ;{} }");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = ({a1:1}).hasOwnProperty(\"__count__\")\n in (++ \"\" )) ;");
tryItOut("/*for..in*/L:for(let [__parent__, __iterator__] = void <><x><y/></x></> % null in (prop << *::*)) /*for..in*/for([prop, __parent__] = Array((function (prop, __count__) { return -1 } )) in prop << <y><z/></y>) {/*for..in*/for(let [__count__, __iterator__] = * in  '' ) const prototype = 3, __iterator__ = prototype; }");
tryItOut("if(({ set __noSuchMethod__() { return ( /x/g .__defineSetter__(\"__iterator__\", (function(y) { yield y; yield;; yield y; }).call))[constructor = #3={a:#3#}] }  })) {gc() } else {L\f:if(<x><y/></x>) {(this); } else  if (<>/*\n*/<x><y/></x></>) #1#; else ;* }");
tryItOut("/*for..in*/for(const __iterator__ in (let constructor, constructor = *; - true)) let prototype, __noSuchMethod__;");
tryItOut("if((<><x><y/></x></>.eval(__iterator__ setter: [1,2,3,4].map))) {yield *; }");
tryItOut("return;");
tryItOut("/*infloop*/for(prototype = undefined; ((<x><y/></x>)[window]); (new (*::*)())) (<x><y/></x>);");
tryItOut("/*infloop*/L:do M:if(__parent__ = false) { if (this) {({}).hasOwnProperty } else constructor =  \"\" ;} while(prototype);");
tryItOut("const constructor = -1");
tryItOut("/*infloop*/for(getter = <x/>;  /x/ ; <y><z/></y>) {var prop, __parent__;var prototype, prop = <y><z/></y>; }");
tryItOut("do if(((function  __noSuchMethod__ (__iterator__, __count__) { return [11,12,13,14].filter } ) <!--yy-->, new (/a/gi)(window, 0x99)))) { if (<y><z/></y>.__noSuchMethod__ = <x><y/></x>) {; }} else {M:if(#3={a:#3#}) { if ([1]) {let prototype = [z1,,], __count__;; } else return ({a1:1});} } while((new ) && 0);");
tryItOut("{yield;return; }");
tryItOut("if(*::*) { /x/ ;gc() } else  if (prototype) yield;");
tryItOut("with({}) { for(let y in [5,6,7,8]) return ; } ");
tryItOut("return;");
tryItOut("yield\n((false).__defineSetter__).apply");
tryItOut("L: {const prop, __parent__; }");
tryItOut("if(Function()) { if (*.__defineGetter__(\"constructor\", Function)) /*for..in*/L:for(const prototype = (__iterator__ = true) in undefined) yield (-0); else ( \"\" );}");
tryItOut("/*infloop*/for(var [({ __count__: __parent__, prop: __iterator__ })] = let; (null !== undefined); window.eval((*::* ? __iterator__ = <x><y/></x> : 0))) (function ([y]) { });");
tryItOut("/*infloop*/while(constructor){window;switch(({a2:z2}).*) { default: let (prototype = <y><z/></y>, __count__ = 0x99) { throw ({a2:z2}); }break;  } }");
tryItOut(";yield;");
tryItOut("with(<><x><y/></x></>)({}).__lookupGetter__");
tryItOut("\n");
tryItOut("const __proto__ = this, constructor = this;");
tryItOut("L: {return; }");
tryItOut("do {} while(( for (__count__ in __parent__) if (constructor) = prop) && 0);");
tryItOut("with({}) __proto__ = prop;");
tryItOut("let (__count__, ({ __parent__: constructor, __iterator__: __parent__ }) = {} :: @foo) { /*for..in*/for(__parent__ in <x/>) throw null; }");
tryItOut("if(@foo.throw( /x/ ).__noSuchMethod__) { if (((yield  /x/ ))) {export function::prop; }} else {{(0x99);; } } const __iterator__;");
tryItOut("/*for..in*/for(var [prop, prototype] = 5.0000000000000000000000.__lookupGetter__(\"__parent__\").__lookupGetter__(\"__parent__\") in window) for(let y in [5,6,7,8]) let(prop) { return -0.@foo;");
tryItOut("export prop;/*infloop*/while(-3/0){export *; }");
tryItOut("/*for..in*/for(function::constructor in  /x/ ) /*infloop*/do yield; while( /x/g );");
tryItOut("L: return 1e4\n/*for..in*/for(__parent__ in  /x/ ) {export __proto__;var __parent__ = window, prop = *::*; }");
tryItOut("export *\nif(window.yoyo(<y><z/></y>)) { if (arguments.*) export __noSuchMethod__; else [({ prototype: prop }), constructor, prototype, ({ prototype: __count__, constructor: prop })]}");
tryItOut("{break M;__parent__ = *::*; }");
tryItOut("yield (prototype =  /x/g );");
tryItOut("export __noSuchMethod__; const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((false)(*::*) in <y><z/></y>) (window);");
tryItOut("export *\n{if(-0) var __noSuchMethod__; else  if (false) gc() }");
tryItOut("L: export __count__;/*infloop*/for([z1,,]; window; __noSuchMethod__) const __proto__, __parent__ = <x><y/></x>;");
tryItOut("L: const __noSuchMethod__ = <><x><y/></x></>, prop = constructor;");
tryItOut("return;");
tryItOut("with(([ \"\" ])){yield;export prototype; }");
tryItOut("/*infloop*/M:for(<x/> , <y><z/></y>.eval(<y><z/></y>.yoyo(this)); String(<x><y/></x>, <><x><y/></x></>).valueOf(\"number\"); undefined) ");
tryItOut("L:if(new *::*()) continue M; else  if (var __noSuchMethod__ = -3/0;) ;");
tryItOut("/*infloop*/while(-0){; }");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__, constructor = (__noSuchMethod__.unwatch(\"prop\")).valueOf(\"number\")) { /*for..in*/for(const __iterator__ in ((new Iterator(constructor))((({ __proto__: __proto__ }) = <x/>)))){const __noSuchMethod__ = <y><z/></y>;{} }");
tryItOut("const __count__ = ({}), __iterator__;1e-81;");
tryItOut("/*infloop*/M:for(var constructor = (null <= constructor.throw(false.__defineGetter__(\"prop\", (1 for (x in []))))); <y><z/></y>; [(eval(\"throw this;\", null)) ^= <x><y/></x>].sort((function(q) { return q; }).call)) {L: {if(0/0) { if ([1]) let prototype = this;} else L:with(true.__lookupSetter__(\"getter\"))export *; }throw <><x><y/></x></> - __iterator__; }");
tryItOut(";");
tryItOut("if(({ get __noSuchMethod__ __noSuchMethod__ ()[z1,,] })) {var prototype = <y><z/></y>, prop =  '' ; } else  if (eval(\"throw *::*;\", [,,z1])) return this;");
tryItOut("gc()\nif(*) {; }");
tryItOut("/*for..in*/for(var __proto__ = ++0 in [11,12,13,14].some) {/*infloop*/for(let prop; (new (function (__noSuchMethod__, constructor) { export *; } )(((#2=0/0 in this) | 3 >>> <x/>), (~__proto__))); ((<><x><y/><\f/x></> in .2) &&  /x/g ).__defineSetter__) {export *;/*for..in*/for(let __parent__ = @foo in [1]) __iterator__ = <x><y/></x>, constructor; } }");
tryItOut("switch(*::* ? window : <><x><y/></x></>) { default: gc()break; break;  }");
tryItOut("with({}) { for(let y in [5,6,7,8]) for(let y in []); } ");
tryItOut("/*infloop*/L:while(( /x/  ?  /x/g  : __iterator__.unwatch(\"__iterator__\")) / true(window, @foo))L:switch( /x/g  & <><x><y/></x></>.__proto__ = true) { default: break; -3/0;break; break; case <y><z/></y>: gc() }");
tryItOut("if(this.__defineGetter__(\"__parent__\", (3/0).watch)) /*for..in*//* nogeckoex bug 349964 */M: for  each(let <zzz><x><y/></x></zzz> in window) {{}M:if((-0)) { if (true) {; } else gc()} }");
tryItOut("L:with(<><x><y/></x></>)yield __iterator__;");
tryItOut("if(new [1,2,3,4].slice(* &= null, undefined) :: window) /*for..in*/M:for(var __parent__ in false) export prop; else  if (1e-81) throw <><x><y/></x></>;");
tryItOut("__noSuchMethod__ = this;");
tryItOut("do /*infloop*/for(new (<x><y/></x> if (undefined))((prototype.prototype)); (({ get prop constructor ()yield window })); <y><z/></y>) {throw false; } while((__noSuchMethod__.set setter= ((({a1:1})).call).apply) && 0);");
tryItOut("/*infloop*/while(@foo)with({}) { return  set __count__ prop (__proto__) { (window); } ; } ");
tryItOut("{(@foo);throw *::*; }");
tryItOut("/*for..in*/M:for(let [__parent__, __iterator__] = #1# in Number((eval).call(<x><y/></x>, ))) {yield; }");
tryItOut("with((__noSuchMethod__.(@foo) / (this.zzz.zzz).prop))L:if([1]) {export __noSuchMethod__; } else  if (*) {[1,2,3,4].mapthrow function ([y]) { }; }");
tryItOut("if(<y><z/></y>) const prop, prop = <x><y/></x>; else  if ((<y><z/></y>.__defineSetter__(\"__iterator__\", [1,2,3,4].map))) {switch(*) { case [,,]: break; case *::*: yield *::*;break; case 6: yield <y><z/></y>;break;  }__iterator__ = <\f><x><y/></x></>, constructor = this; }");
tryItOut("/*for..in*/for(let [__count__, [({ __proto__: ({ __noSuchMethod__: prop }), prototype: __count__ }), , , ({ constructor: [__proto__] }), __iterator__]] = (__proto__.__defineSetter__(\"prop\", (<><x><y/></x></>).call)) in [15,16,17,18].map('haha'.split, __parent__)) let (__count__ = <x><y/></x>) {  }");
tryItOut("{let __noSuchMethod__; }");
tryItOut("L: {({}).__lookupGetter__ }");
tryItOut("/*for..in*/L:for(const [__proto__, prototype] = (__iterator__.__iterator__) in Math.pow()) throw <y><z/></y>;");
tryItOut("/*for..in*/for(const prop = export __parent__ in (p={}, (p.z = <><x><y/></x></>)())) {function (prop, __count__) { (033); }  }");
tryItOut("do \t{if(*) export __count__; else {{} } } while((<><xxx>{prop}</xxx></>) && 0);");
tryItOut("L:with(Math.sin() >= )(<y><z/></y>);\n{}\n");
tryItOut("let (prototype = function  __parent__ (prop) { (<y><z/></y>); } ( :: <><x><y/></x></>), ({ constructor: constructor }) = (this.__defineSetter__(\"__count__\", new (Function)()))) { ({}).__lookupGetter__ }");
tryItOut("let(prototype = __iterator__++) { __parent__ = prototype;");
tryItOut("let __proto__, __count__ = <x><y/></x>;");
tryItOut("{/*infloop*/M:for([__iterator__] = @foo.__lookupGetter__(\"prop\"); ( /x/g  !== *::*); [11,12,13,14].filter) {return <x/>;yield; }/*infloop*/while(__count__){export __count__;++<><x><y/></x></> } }");
tryItOut("for(let y in [5,6,7,8]) return x::function::__proto__;");
tryItOut("with(<y><z/></y>)export constructor;gc()");
tryItOut("/*for..in*/L:for([prototype, __noSuchMethod__] = ([*::* /= <x/>]) in yield <y><z/></y>) {throw *;'haha'.split }");
tryItOut("/*for..in*/M:for(const [prototype, __noSuchMethod__] = false in <x><y/></x>) {gc() }");
tryItOut("return;");
tryItOut("/*infloop*/do { } while(this);");
tryItOut(";<x><y/></x>");
tryItOut("/*for..in*/M:for(const [__parent__, __count__] = (/*\n*/{__parent__: <x/>}) in <><x><y/></x></>.propertyIsEnumerable(\"__count__\")\n) {L:if((__count__ = <x/>)) let constructor =  \"\" ; else continue L;\t }");
tryItOut("/*infloop*/for(<x><y/></x>; 3/0; <><x><y/></x></>) {var __proto__, prop;{} }");
tryItOut("{yield *; } const __parent__;");
tryItOut("__count__ = __proto__;");
tryItOut("export *;\nexport each;\n");
tryItOut("try { yield constructor; } finally { __proto__ = __parent__; } ");
tryItOut("/*infloop*/for(__proto__; (*::* == false.propertyIsEnumerable(\"__count__\")); __iterator__. getter= *) {return;yield false; }");
tryItOut("{continue ; }\n/*infloop*/for(const __noSuchMethod__; 'fafafa'.replace(/a/g, (/a/gi).call); ( \"\" .__proto__ = <x><y/></x>)) {const prototype, constructor = <><x>\f<y/></x></>; }");
tryItOut("__proto__ = __parent__;");
tryItOut("let(__proto__ = Boolean(<><x><y/></x></>)) { return  '' ;");
tryItOut("/*infloop*/M:for(const ({ delete: [[, constructor, ({ __count__: ({ __noSuchMethod__: __noSuchMethod__, __proto__: ({ prop: constructor }) }) }), __proto__, ], , __proto__], prop: ({ prop: ({ __iterator__: ({ each: //, __iterator__: __count__ }) }) }) }) = (__parent__ = (({__noSuchMethod__: 033}).yoyo(((new (/a/gi)()).isPrototypeOf(void <><x><y/></x></>))))); (([<y><z/></y> for each (prop in __count__)])((\n*))\n); ((p={}, (p.z =  /x/g .watch(\"prop\", Math.sin))()))) {}");
tryItOut("([z1,,]);");
tryItOut("/*for..in*/for(const __iterator__ in -1 in (+(undefined instanceof __parent__))) with(((prototype.(<x/>) for (function(id) { return id }.prop in <><x><y/></x></>) for each (prop in <x><y/></x>)))){prop = {}, __parent__;return; }");
tryItOut("/*for..in*/for(let __iterator__ in window) {export *; }");
tryItOut("switch((Error(new ( \"\" )(<><x><y/></x></>, null).valueOf(\"number\"), <x/>.prototype)))\t { default: return (this.__defineGetter__(\"prop\", <x><y/></x>));break; case 1: break; continue ;break; break; switch( /x/  -= false) { case 6: export *; }yield;case (<><x><y/></x></> &= false): break; case this.__defineSetter__(\"prop\",  \"\" ): yield  /x/g ;break;  }");
tryItOut("L:if((<x><y/></x>)(<x><y/></x>)) {const __parent__ = (function ([y]) { })(); }");
tryItOut("with({}) let __iterator__ = -0, __count__ = prop;");
tryItOut("/*infloop*/M:do {throw  /x/g ; } while(<><x><y/></x></> ? <x/> : *::*);");
tryItOut("/*for..in*/L:for(const x::__parent__ in ((function  prototype ([, prototype, __iterator__, , __proto__]) {  } )((prop.(<x><y/></x>)))))return;");
tryItOut("/*infloop*/do {export *\n } while(__noSuchMethod__ = 1.3.watch(\"prop\", /a/gi));");
tryItOut("/*infloop*/M:for((new Function(<><x><y/></x></>.valueOf(\"number\"), __iterator__.prop));  , * ^ (1.2e3 &&  \"\" ); (<x><y/></x>\n)()) {(undefined); }");
tryItOut(";\nexport __count__;\n");
tryItOut("/*for..in*/for(let __parent__ = //h\n!<><x><y/></x></> in *::*) {<x><\ny/></x>yield; }");
tryItOut("{export __proto__;/*infloop*/for(let .2\f =  get prop __parent__ (__noSuchMethod__, prototype) { return this; } ; <x><y/></x>; <x><y/></x>) {break ; \"\" ; } }");
tryItOut("/*infloop*/do {if(( /* Comment */(/a/gi)( /x/ , null))[({[, __proto__, prototype, __count__]: window.__proto__})]) {(this); \"\" ; } } while(prototype.prototype setter= gc.eval([1,2,3,4].slice));");
tryItOut("do export *; while(((<x><y/></x>.unwatch(\"__proto__\"))) && 0);");
tryItOut("{return (function ([y]) { })();L: {break M; } }");
tryItOut("throw constructor;\nthrow <><x><y/></x></>;\n");
tryItOut("/*infloop*/for([__count__, , , ({ constructor: ({ function::__parent__: __proto__ }), __count__: ({ prototype: ({ prototype: __iterator__ }), constructor: ({ prop: __noSuchMethod__, __count__: __noSuchMethod__ }) }) }), ] = ('fafafa'.replace(/a/g, Math.sin)) || __parent__.__count__ setter=  \"\" ; <><xxx>{constructor}</xxx></>; gc()) ;");
tryItOut("yield <employee id=\"1\"><name>Joe</name><age>20</age></employee><ccc:ddd>yyy</ccc:ddd>;");
tryItOut("if(*) { if (1e81 != this) {export *;gc() }} else {{} }");
tryItOut("/*for..in*/L:for([prop, constructor] = <x><y/></x>() in ({a1:1})) gc()");
tryItOut("gc()\nexport *;");
tryItOut("{function(y) { yield y; return  /x/g ;; yield y; }\t(window); }");
tryItOut("/*infloop*/L:while( /x/g .@*.__proto__)/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in ((p={}, (p.z = this.zzz.zzz)()))) (setter);");
tryItOut("try { ; } catch(prop) { (<>__count__</>); } finally { ; } ");
tryItOut("do 3/0 while(( '' ) && 0);");
tryItOut("var __noSuchMethod__ = 0/0, __iterator__;(<><x><y/></x></>);");
tryItOut("/*for..in*/for(const __iterator__ = true in <x/>) {return; } const __parent__;");
tryItOut("switch( /* Comment */([<x><y/></x>].sort(Function))) { default: true;break; case undefined\n: break;  }");
tryItOut("{gc() }");
tryItOut("/*infloop*/while(#1=[3]//h\n ? <><><!--yy--></></> : new ({}).__lookupGetter__( /x/g .prop\n)){\nwith(null)throw <x><y/></x>;\nyield; }");
tryItOut("let (prop, constructor =  /x/ ) { return; }");
tryItOut("if( for (__parent__ in *) for each (__noSuchMethod__ in  /x/ )) {function ([y]) { }; } else  if ((++-0 <<= (( \"\" ).call([[1]], @foo, null)))) yield;");
tryItOut("if((prototype for ( in window) for (prop in <x><y/></x>) if (4.))) ; else {}");
tryItOut("/*for..in*/for(const [prototype, __count__] = ((yield __parent__)) in new ([1,2,3,4].map)(@foo)) {with({__proto__: (/a/gi).call(*::*, )})continue L;function(y) { yield y; __count__ = <x><y/></x>;; yield y; } }");
tryItOut("export *;");
tryItOut("");
tryItOut("if(constructor = this.__defineSetter__(\"prop\", ({}).hasOwnProperty) / [<><x><y/></x></>], constructor = 'fafafa'.replace(/a/g, (Math.pow).call)) {}gc()");
tryItOut("do /*for..in*/for(prop = 3 in []) {{} } while((yield (this.__lookupGetter__(\"function::constructor\"))) && 0);/*for..in*/for( ''  = this in [[]]) {export *; }");
tryItOut("{throw .2; }");
tryItOut("{}let(__parent__) ((function(){var __iterator__, __parent__;})());");
tryItOut("if(<></>) {if(*) /*infloop*/while(<><x><y/></x></>) else {break ; } } else  if ([<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>].map(function  __noSuchMethod__ (__iterator__) { return \n<x/>; } )) {if(this) { if (5.0000000000000000000000 >>>=<><x><y/></x></>) yield constructor; else const prop = <x><y/></x>, prototype;} }");
tryItOut("{<x/>;<x/>; }");
tryItOut("with({__iterator__: new #1#(-3/0)}){yield <x><y/></x>;var prop; }");
tryItOut("let(constructor) { if(__noSuchMethod__ = (this[__iterator__])) { if ((__iterator__ ? window : <x><y/></x>)) /*infloop*/do return <x><y/></x>yyy; while(<><x><y/></x></>); else {{} }}");
tryItOut("function  __count__ (constructor, prototype) { return 0 } ");
tryItOut("if((constructor)) { if (Boolean(<x><y/></x>)) (window); else /*for..in*/for(const __parent__ in <x/>) {}}");
tryItOut("if(false) {; } else  if (<x><y/></x>) {yield  '' ; }\n[1,2,3,4].map");
tryItOut("{/*infloop*/while(this){gc() } }");
tryItOut("prototype");
tryItOut("/*for..in*/for(const [__count__, prop] = (p={}, (p.z = __count__: <y><z/></y>)()) @ (-0) in [<><x><y/></x></>]) {/*for..in*/M:for(prototype = @foo in @foo) const __count__; }");
tryItOut("/*infloop*/while(<x><y/></x>\n[\f<><x><y/></x></>]){M:with({prop: ({__proto__: __parent__})}){if(@foo) prototype; }\ncontinue M;\twith([1])var __proto__ = #3={a:#3#}; }");
tryItOut("with(([<><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>\r</>].some(({}).hasOwnProperty))){return constructor;/*for..in*/L:for(var __proto__ in <y><z/></y>) {export *; } }");
tryItOut("with({__iterator__: null.__lookupGetter__(\"__noSuchMethod__\")})export *;  enum  ");
tryItOut("/*infloop*/do {continue ;break ; } while(((<y><z/></y>).watch(window, *))(undefined.__parent__));");
tryItOut("if(({ __proto__: constructor }) = <x><y/></x>++) /*infloop*/for(let [[, ({ constructor: [, , , prototype], prototype: ({ __iterator__: __iterator__, __proto__: __proto__ }) }), , ({ __iterator__: prop, __iterator__: [] }), ], [, ({ __iterator__: prop }), constructor], , [, , , , __proto__]] = constructor.__count__ setter= function(y) { yield y; throw  \"\" ;; yield y; }; typeof (false === <y><z/></y>); ({ get constructor __proto__ () { yield undefined }  })) continue M; else {let(prototype = +<x><y/></x>, constructor = <x/>) { throw StopIteration;/*infloop*/L:do gc() while( /x/g ); }");
tryItOut("if(yield prop.valueOf(\"number\")) { if (((null++) for (prototype.__parent__ in null) if (<><x><y/></x></>))) } else {/*for..in*/for([__proto__, function::constructor] =  /x/g  in <x><y/></x>) yield; }");
tryItOut("if() { if (*::*.watch(\"__iterator__\", <x/>)) {0.1;var prop; }} else {yield; }");
tryItOut("L:if(-1 > __proto__)  else  if ([,,] *= <x><y/></x>) throw #1#; else {return <x/>;export __parent__; }");
tryItOut("yield;");
tryItOut("/*for..in*/for([prop, __iterator__] = ( /x/g .__lookupSetter__(\"prop\") instanceof <><x><y/></x></> .@*:: true) in typeof true) {throw <x/>; }");
tryItOut("/*infloop*/while(((__proto__ = [,]) >>  ''  !== *))var __count__;");
tryItOut("{yield true; }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("if(([,,].__defineGetter__(\"__parent__\",  \"\" )) :: <y><z/></y>.__defineGetter__(\"constructor\", <y><z/></y>).unwatch(\"constructor\")) /*infloop*/for(let __iterator__ = <><x><y/></x></>; this; constructor) {gc() }\n");
tryItOut("/*infloop*/while((new (<y><z/></y> === prop)())){/*for..in*/L:for(let [constructor, prop] = (window[<x/>]) in this) {yield; } }");
tryItOut("/*infloop*/\tM:for(var ({ __parent__: __count__ }) = window; ((*::*)(null, @foo)); [1,,]) {var __count__, __count__;__iterator__ = <><x><y/></x></>, prototype; }");
tryItOut("yield __count__;");
tryItOut("/*for..in*/M:for(__iterator__ in [<y><z/></y>]) {Math.sin\n(constructor = export *;)(__count__ = __noSuchMethod__)var __iterator__, prop; }");
tryItOut("function  prop (constructor) { yield  ''  } \n{Functionyield; }");
tryItOut("M:if(((window)((uneval(<><xxx {prop}={[1]} /></>)), ( ''  /= <><x><y/></x></>)))) ; else  if (*.propertyIsEnumerable(\"function::prototype\")) {if(<x><y/></x>) \t{(prototype);var __count__, __count__; }gc() }");
tryItOut("continue M;");
tryItOut("let (__noSuchMethod__ = (<y><z/></y>.valueOf(\"number\"))) { /*for..in*/M:for([prototype, 3.141592653589793] = ( /* Comment */*--) in (\fK).call(__parent__ = , )) {return; } }");
tryItOut("with({prototype: (.((typeof #1=[#1#])))}){continue ;{1e4; } }");
tryItOut("/*infloop*/M:while(@foo\f){(<><x><y/></x></\t>);(false); }");
tryItOut("with((__noSuchMethod__ = <x><y/></x>)['constructor'] = *\n){/*infloop*/while(eval(\";\",  /x/g ))export *; }");
tryItOut("if(4.) {(<y><z/></y>);var __noSuchMethod__ = <><x><y/></x></>, __iterator__ = @foo; }");
tryItOut("/*infloop*/for( /x/g .unwatch(\"__proto__\"); <><x><y/></x></>; prototype) {}");
tryItOut("{var prototype = <y><z/></y>, __proto__ =  /x/g ;return; const __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in <x><y/></x>) {yield; }");
tryItOut("with({__count__: *::*})throw [,,];\f");
tryItOut("/*infloop*/for(__noSuchMethod__; window; true) {try { yield 1e81; } catch(prototype) { ; } finally { yield prototype; } export __parent__; }/*infloop*/while(this)export *; const prop;");
tryItOut("{}");
