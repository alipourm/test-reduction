tryItOut("M:if(([(window)[prop] for (__count__ in __parent__)])) switch((033.hasOwnProperty(\"__parent__\").__parent__)) { case 2: return <x><y/></x>; const constructor;thisbreak;  }");
tryItOut("L: var __proto__, __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in *::*) ;");
tryItOut("{if(__iterator__) return;if((({ __proto__: __proto__ }) = prototype)) __noSuchMethod__ else  if (__proto__.prop) {throw false; } else  }");
tryItOut("if(this)  const __proto__;");
tryItOut("{;\nexport constructor;\n; }\n");
tryItOut("if(<ccc:ddd><employee id=\"1\"><name>Joe</name><age>20</age></employee><!--yy--></ccc:ddd>) { if ( /x/ ) yield <x/>; else *::*}");
tryItOut("L: var constructor, __count__;");
tryItOut("/*infloop*/L:for(let __count__; __noSuchMethod__; false) if(new Iterator(window, window)) yield @foo; else  if (( /x/ .eval(#1#))) {;(new Function(\"([]);\")) } else __noSuchMethod__, prototype;\t");
tryItOut(";");
tryItOut("/*infloop*/for(var [, ] = __proto__.prototype .@x:: () -=  /x/ ; *.__lookupSetter__(\"__proto__\"); __parent__.constructor) {/*infloop*/while(<><x><y/></x></> -= __count__)M:if(this) { if ( \"\" ) {;gc() } else (this);} }");
tryItOut("/*infloop*/for(__iterator__; (((prop)) = [<><xxx {constructor}={<><x><y/></x></>} /></>]); @foo) {/*infloop*/L:while(<y><z/></y> >> __parent__)/*infloop*/for(let __noSuchMethod__ = true; <x/>; 0/0) {return @foo;gc() } }");
tryItOut("/*infloop*/while(<x><y/></x>.eval(<x><y/></x>)){/*for..in*/for(\f[__noSuchMethod__, __proto__] = function::__iterator__ in <x><y/></\fx>) {throw 1e-81; } }");
tryItOut("gc()\nvar __proto__ = <y><z/></y>, __proto__ = 1e+81;\n");
tryItOut("{return  /x/g ; }");
tryItOut("{yield <y><z/></y>;{} }");
tryItOut("/*infloop*/for(const ({ prototype: ({ __parent__: [], __noSuchMethod__: constructor }), prototype: ({ prototype: __proto__, let: ({ __parent__: __noSuchMethod__, __count__: false }) }) }) = [15,16,17,18].some(({}).hasOwnProperty,  /x/ .@*); <x/> @ ({__count__: <><x><y/></x></>,  set constructor() { return false }  }); new function(id) { return id }.unwatch(\"__parent__\")(prototype)) /*for..in*/for(const [__noSuchMethod__, __proto__] = [([(-1)].some(Math.pow))] in (false.__defineGetter__(\"__proto__\", function  constructor ()window))) let __proto__, __proto__;");
tryItOut("if(<xxx {constructor}={(<x><y/></x>.(#1=[#1#]).valueOf(\"number\"))} />) export constructor;");
tryItOut("( /x/ )( \"\" ) = constructor\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in new ({}).hasOwnProperty()) return\n");
tryItOut("M:if(<x><y/></x>) {yield; } const prototype;");
tryItOut("/*for..in*/for(let prop = ([(eval(\"return this;\", this))].sort(function  __noSuchMethod__ (__count__) { return ({a1:1}) } )) in prop =  \"\" ) return;");
tryItOut(";\n([[1]]);\n");
tryItOut("if(__parent__ = ([15,16,17,18].filter((<x><y/></x>).call, this))) { if (((<x><y/></x>).__defineSetter__)(([15,16,17,18].filter(({a1:1}), <><x><y/></x></>)), this)) throw {}; else M:if(033) {continue ;let __parent__ = <><x><y/></x></>, __parent__; } else {gc() }}");
tryItOut("3");
tryItOut("Function");
tryItOut("yield 3/0;");
tryItOut("__iterator__;__proto__;");
tryItOut("/*for..in*/L:for(const //h\n(prototype) in *::*) {return; const constructor; }");
tryItOut("M:if(yield <y><z/></y>) /*infloop*/L:for(let prototype; (*::*.yoyo(@foo)); ( /x/ .eval(window))) {} else  if ((prop.__noSuchMethod__)) { } else {return; }");
tryItOut("if((window)[__proto__]) __proto__; else  if (__count__ = true) {<x><y/></x> } else let prototype =  /x/ , __parent__;");
tryItOut("/*infloop*/L:for(const [] = new Number(new ()(window, 1.3), (prop.__parent__ =  -= ({})).prototype = new (__iterator__)(({__parent__: __iterator__}), <><x><y/></x></>)); *; [z1]) {gc()throw <><x><y/><\f/x></>.yoyo(null); }");
tryItOut("if(([11,12,13,14].some) <= <x/>) { if ([yield <>__noSuchMethod__ = <x><y/></x> @ *::*</>.(@foo) for each (__count__ in (__parent__ = true)) for each (__count__ in #0=@foo) if ((function (prop)window))]) /*for..in*/for(var __count__ in (([1,2,3,4].slice)((( /x/ ))))){; } else #0=[<x><y/></x>];}");
tryItOut("const __parent__ = <y><z/></y>, __parent__ = [1,,];");
tryItOut("if([11,12,13,14].some) if(constructor) yield;");
tryItOut("/*infloop*/for(constructor = arguments; <xxx>{__parent__}</xxx>; (continue (<><x><y/></x></> >> <><x><y/></x></>)) &= [prop.constructor]) yield (<x/>.isPrototypeOf([1]));");
tryItOut("break M;");
tryItOut("if(export constructor;) { if (<x/>) {const __proto__ = {}, prop = undefined; }} else /*for..in*/L:for(let constructor in [[]]) {gcprototype = <><x><y/></x></>, __noSuchMethod__ }const prop = function ([y]) { };\r/*for..in*/for(__noSuchMethod__ in ((function  constructor () { return prop = ([11,12,13,14].map) } )(eval(\" /x/ ['constructor'] = null\", *::*)))){return; }");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("var __count__ = <y><z/></y>, constructor; const prop;");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, prop] = yield __parent__ in [z1,,]) {const __noSuchMethod__ = __noSuchMethod__, [,,z1] = 5.0000000000000000000000; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each\f(var {__iterator__ } in (<><x><y/></x></> ^= <x/>)) {if(*::*) {(@foo); } else  if (true) return;export *; }");
tryItOut("L: { { gc() }  }(function ([y]) { });");
tryItOut("/*for..in*/for(let __proto__ = <><x><y/></x></> in function ([y]) { }) {yield [z1];return; }");
tryItOut("/*infloop*/for((#2=[*]).@foo; this; ({ __parent__: prop, prototype: __iterator__ }) = ({__parent__ getter: undefined, prototype: prototype })) for(let y in [5,6,7,8]) {}\n");
tryItOut("throw __proto__;");
tryItOut("if(({a1:1}) ? __parent__ :  '' ) 'haha'.split else  if (1e4) {/*infloop*/while(<xxx>{prototype}</xxx>)throw <x/>; } else {with\t({__iterator__: __count__.@*}){const constructor = true;return; } }");
tryItOut("if(@foo <  \"\" ) switch(__proto__.( /x/ )) { default: break; case (constructor.__count__ = __proto__):  } else  if (({constructor setter: ((new this.hasOwnProperty(\"__count__\"))).__defineSetter__ })) /*infloop*/M:while(new ((this).watch)(function ([y]) { }))(__count__).apply");
tryItOut("{}");
tryItOut("/*infloop*/M:for(const (constructor) = __proto__.prop ? constructor = @foo : ( /x/ ).call(<x/>, __count__); __proto__.unwatch(\"prototype\") -  \"\" [undefined]; (({}) < [[]])) {\tif([z1,,]) { if (<><x><y/></x></>) continue ;} else gc() }");
tryItOut("/*for..in*/M:for(__count__ in ((<x/>)()))gc()");
tryItOut("/*for..in*/for(var __proto__ in <y><z/></y>) {return <><x><y/></x></>; }");
tryItOut("yield delete @foo;");
tryItOut("if((__iterator__.(<><x>\t<y/></x></>.hasOwnProperty(\"__parent__\"))) .@*:: (__proto__ *= (__count__ = undefined)) if (true)) if( /* Comment */(p={}, (p.z = prototype)())) export *; else {((__parent__).__defineSetter__).applyconstructor: ({a1:1}) const __noSuchMethod__; } else  if (__noSuchMethod__.constructor) {with({}) { __proto__( /* Comment */ \"\" ) = __count__; }  } else if(prototype = (__parent__.__iterator__ = <x/>)\f) {yield;( /x/ ); } else return 3/0;");
tryItOut(" { throw .2; } ");
tryItOut("/*infloop*/for(({prototype: (033 if ( /x/g )) }); [__iterator__];  \"\" ) if(-0) {yield this;export getter; }");
tryItOut("__proto__.__noSuchMethod__ = constructor;");
tryItOut("/*infloop*/while(([yield  /x/g ]))continue L;");
tryItOut("yield;");
tryItOut("yield  & (-0);");
tryItOut("while(([1,2,3,4].slice) && 0){/*infloop*/do let __iterator__ = __parent__, __noSuchMethod__ =  '' ; while(prototype.watch(\"__proto__\", Function)); }");
tryItOut("let (constructor = (new function(y) { yield y; ( '' );; yield y; }() == new 3(__count__ = prop, 3))) { let (__iterator__ = #1#, constructor) { export *; } }");
tryItOut("L:if([(1.3\n) for (--@foo >= 1e+81['constructor'] in (~<x><y/></x>)) if (<><x><y/></x></>)]) { if ( \"\" ) gc() else {M:if(<x/>) {{} } else const constructor = *::*, __parent__;/*for..in*/for(let [x::__noSuchMethod__, __iterator__] =  /x/g  >>= this in <x/>) {return;function(y) { yield y; let __count__ = false, constructor;; yield y; } } }}");
tryItOut("(<x/>);");
tryItOut("L:do {get(0.1); } while((new ({__iterator__: 0x99 })) && 0);");
tryItOut("if((eval(\";\", <x/>) >=  /* Comment */<><x><y/></x></>)) { if (*) {M:while((#1=[#1#]) && 0){break ;yield this; } }} else { for each (__iterator__ in *) for each (prop in window){export *; } }");
tryItOut("yield __count__ = *::*;");
tryItOut("{}");
tryItOut("(set);");
tryItOut("if({switch((void <bbb xmlns=\"(p={}, (p.z =  /x/g )())\"><!--yy--></bbb>)) { default: case 7: break; break; return {} -= __count__;case 9: /*infloop*/M:do __proto__ = prop; while(({__count__ setter: function(y) { yield y; __parent__: __count__; yield y; } }));case 1: case (<y><z/></y>)[true]: case *::* %= *: {} } }) {/*infloop*/for(const __noSuchMethod__; 4.; true) this } else {{return; } }");
tryItOut("const constructor = *, __count__ = *::*");
tryItOut("with(<><x><y/></x></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in  /x/ ) <x><y/></x>;");
tryItOut("/*infloop*/for(var __parent__ = <y><z/></y>; <><x><y/></x></>; false) export \fconstructor;");
tryItOut("if(undefined) var __parent__ = 1.2e3, prop; else { }");
tryItOut("switch(*::* ? true : <><x><y/></x></> *= __iterator__.\f(null)) { case (new function(q) { return q; }((this.__defineSetter__(\"__parent__\", __parent__)))): with( \"\" ){gc() }/*infloop*/M:while(@foo){var __noSuchMethod__;{} }\n; }");
tryItOut("return;/*infloop*/L:while(<><x><y/></x></>)return;gc()");
tryItOut("if(({prop: (Math.sin)(__noSuchMethod__.__count__) })) {{} }");
tryItOut("/*for..in*/L:for(let constructor = <> </>.((3.141592653589793(<y><z/></y>))) in __parent__) {}");
tryItOut("/*for..in*/L:for(var __proto__ in (({ prototype: __parent__, prototype: prop }) = window--)) {const prototype, prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in @foo) {L: return;throw <><x><y/></x></>; }\n");
tryItOut("/*infloop*/M:for(__parent__;  /x/ ; <y><z/></y>) {break M;continue  }");
tryItOut("if( \"\"  &= window) {L:if(<y><z/></y>) { if (<x><y/></x>) constructor = false, __noSuchMethod__ = 3.141592653589793;} else (1 for (x in []))var __noSuchMethod__; } else  if (((new Function).apply)) { /x/g ;export __parent__; }");
tryItOut("M:do const prototype, __noSuchMethod__; while(((1e81 ^ undefined.__lookupGetter__(\"__noSuchMethod__\"))) && 0);");
tryItOut("if(<x><y/></x> += this\t) {let __parent__ = <x><y/></x>; }");
tryItOut("return;");
tryItOut("'haha'.split\n<x><y/></x>;\n");
tryItOut("/*for..in*/for(const prototype in (((new Function(\"return 0.1;\")))(*::*))){ }");
tryItOut("if([15,16,17,18].some([1,2,3,4].map, new ((#0=({(<x/>.@*): this for each (x::prop in <x><y/></x>)})))(try { \ffunction  __noSuchMethod__ (prototype, __proto__) { {} }  } finally { return; }  = (function(y) { yield y; prototype; yield y; }).call((true.yoyo( /x/  += *::*)), (\fget = this), )))) {/*for..in*/for(var prop = <><x><y/></x></>.\tthrow(<><x><y/></x></>) in __noSuchMethod__) gc()export *; }");
tryItOut("with({}) let(prop = __noSuchMethod__.__count__.prop) { return;");
tryItOut("/*for..in*/for(let set = 0.1 in  '' ) return;");
tryItOut("__proto__ = prop;");
tryItOut("/*for..in*/for(prototype = <x/> @ window in *) yield @foo;");
tryItOut("{var __proto__, prop;\f\nlet __proto__ = *, set;\n }");
tryItOut("with({__parent__: eval(\"(prop.prototype)\", ((p={}, (p.z = <y><z/></y>)())))}){let(prop, prototype = <x><y/></x>) {  }");
tryItOut("do __count__;\ngc()\n while((__parent__ = (window.*)()) && 0);");
tryItOut("{/*for..in*/for(var [prototype, constructor] = (__parent__ = <><x><y/></x></>) in [,]) {let __noSuchMethod__ = false, __noSuchMethod__ = [z1];export *; }return; }");
tryItOut("with(((__count__ = [,,z1]) ? prop = <x><y/></x> :  \"\" .propertyIsEnumerable(\"constructor\"))){do {const __iterator__ = window, prop = __iterator__;var constructor = *::*, __count__; } while(([,,z1].eval( \"\" )) && 0); }");
tryItOut("L:\tif(false) {let __proto__ = -3/0, __proto__; }");
tryItOut("M:if(((let __noSuchMethod__ = <x/>) !== <x><y/></x>.__count__ = <y><z/></y>)) {export prototype;break ; } else /*for..in*/for([__proto__, __count__] = <x/> in  /x/ ) {export *; }");
tryItOut("while((__iterator__ = this ?  /x/  *= <><x><y/></x></> : [11,12,13,14].filter) && 0)break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var /*\n*/__iterator__(5.0000000000000000000000) in ('haha'.split)) {yield window;\n/*for..in*/for(__noSuchMethod__( '' ) in ((function () { return <><x><y/></x></> } )((window.@foo)))){\treturn;continue ; }\n }");
tryItOut("with({}) yield");
tryItOut("(<x/>)\n/*infloop*/do prop = <y><z/></y>, constructor = <x><y/></x>; while((*.hasOwnProperty(\"prop\")));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let null in [z1,,]) {window;let __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in window) {__iterator__ = prototype; }");
tryItOut("(<x><y/\f></x>).call");
tryItOut("with({prototype: -1}){export *; }");
tryItOut("for(let y in []);");
tryItOut("(-0);if(return __count__) return *::*; else  if (prop = __iterator__.this getter= <x><y/></x>) {yield <x><y/></\nx>; } else {gc() }");
tryItOut("L: yield [15,16,17,18].filter(true, <x><y/></x>);");
tryItOut("for(let y in [5,6,7,8]) try {  } catch(__iterator__) { let(constructor, prototype) ((function(){with({}) { return; } })()); } finally { throw StopIteration; } ");
tryItOut("with({}) __parent__ = __iterator__;");
tryItOut("prop = __parent__;");
tryItOut("throw prototype\n");
tryItOut("/*for..in*/for(({ prototype: constructor, __noSuchMethod__: prop }) in ((({}).hasOwnProperty)((<x><y/></x>.(<x><y/></x>))))){(window); }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(const [function::__count__, __parent__] = String( /x/  || window) in * ? <><x><y/></x></> : this === ({__parent__: true})) {yield\n }");
tryItOut("if((-1)) ; else yield;");
tryItOut("if(({__count__: <y><z/></y>, prototype: <x><y/></x>-- })) export *; else  if (eval(\"<y><z/></y>\", @foo) !== this.@foo) {/*infloop*/M:for(var __parent__;  \"\" ; [,]) export *;yield; } else let __noSuchMethod__ = this, prop = <><x><y/></x></>;");
tryItOut("L:if([15,16,17,18].sort(gc, ({prototype: <x><y/></x>,  get constructor(__proto__) /x/g  }))) {(prototype);continue L; } else {export *;yield; }");
tryItOut("/*infloop*/for((#0=\nwindow); this; let ((prototype.prototype getter= ((prop.__noSuchMethod__).isPrototypeOf((p={}, (p.z = this)())))) = ({})) constructor.__count__) with({__proto__: <><x><y/></x></> >>  '' })yield;");
tryItOut("L:with({__iterator__: this.__defineSetter__(\"prop\", function(y) { yield y; <><x><y/></x></>; yield y; })})");
tryItOut("if() {<bbb xmlns=\"(function (__parent__)<x><y/></x>).call((<x/>)[this], eval(\"[]\", false))\"><!--yy--></bbb>return; } else  if ((new Date(*, @foo))) let __count__;");
tryItOut("M:switch( ''  .. prototype) { case ( >> 4.):  }");
tryItOut("function (__proto__, __iterator__)__noSuchMethod__.(1e-81)");
tryItOut("let (__proto__ = (prop = eval(\"constructor = #3={a:#3#};\", <x/>.valueOf(\"number\")) >>>=[15,16,17,18].sort((<x><y/></x>).watch, (* -= #1=[#1#]))), prototype) { M:while(((*::*.__proto__)) && 0){constructor = (-1);export __iterator__; }\nthrow <x><y/></x>;\n }");
tryItOut("if(true) if([__iterator__, , , __noSuchMethod__, __parent__] = this.__parent__) { if (__iterator__ = true) {export *; }} else yield <x><y/></x>;");
tryItOut("-");
tryItOut("if(4..valueOf(\"number\")) {let function(id) { return id }, __iterator__ = 1.3; }");
tryItOut("with({}) return new (({}).__lookupGetter__)(__proto__ = this);");
tryItOut("with({prop: __noSuchMethod__}){let prop; }");
tryItOut("gc()while((__count__) && 0){; }");
tryItOut("/*infloop*/while(\t<><x><y/></x></>.throw(<><x><y/></x></>)){{} }");
tryItOut("if( '' .__proto__) export __noSuchMethod__;");
tryItOut("with({}) for(let y in [5,6,7,8]) (3);");
tryItOut("/*for..in*/for(let __iterator__ = -*::* in false instanceof constructor) let __count__ =  /x/ ;");
tryItOut("for(let y in []);");
tryItOut("do {/*for..in*/for(const prop = (null.watch(\"__proto__\", function  __iterator__ (__proto__, __count__) { return [1,,] } )) in <><x><y/></x></>) export *;if(try { yield; } catch(__proto__) { return undefined; } ) yield <x><y/></x>; else <x><y/></x>; } while(([ '' .yoyo(0/0)]) && 0);");
tryItOut("L:switch() { case <><x><y/></x></>.__proto__ = *::*: default: {}<x><y/></x>;break;  }");
tryItOut("if(this > eval(\"<x/>\", [1])) {/*infloop*/for(let ({ __iterator__: __count__ }) = <xxx {constructor}={(-0)} />.(*::* & __iterator__); (this.__defineSetter__(\"constructor\", #1=[#1#])); ( /x/g .__lookupSetter__(\"__noSuchMethod__\"))) (@foo); const x::__proto__; } else if(*) var __proto__ = __noSuchMethod__, constructor; else  if (<x><y/></x>) __count__ = (function ([y]) { })(), prototype = <y><z/></y>;");
tryItOut("while((__noSuchMethod__ = <y><z/></y>\n.@foo) && 0)break ;");
tryItOut("if((__iterator__ = __parent__)[({__noSuchMethod__: [1]})]) if(delete ((new Function(\"throw false;\"))).call) { if (__noSuchMethod__) {{} }} else {const __iterator__, prop = <><x><y/></x></>;yield 3/0; } else {{}/*for..in*/for(const __noSuchMethod__ = false in <y><z/></y>) {var __noSuchMethod__ = <x><y/></x>, __noSuchMethod__;gc() } }");
tryItOut("L:if(([<x><y/></x> for each (__parent__ in <><x><y/></x></>)])(constructor.__count__ = constructor.constructor = window)) { if (new (<y><z/></y>)(@foo %  /x/ , <x><y/></x>).yoyo((uneval(window.valueOf(\"number\"))))) let (constructor) {  }} else L: break L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in @foo) function  __parent__ (__parent__, constructor) { export __proto__; } ");
tryItOut("for(let y in []);");
tryItOut("L: {export prototype; }");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("let(__parent__, prototype) { this.zzz.zzz;");
tryItOut("with({__iterator__: ([, __proto__, ] = __proto__)}){yield 3/0; }");
tryItOut("/*infloop*/for(const ({ __proto__: ({ __noSuchMethod__: (__proto__), new ('haha'.split).call(<x><y/></x>)['constructor']: ({ __parent__: ({ prototype: constructor }) }) }), prop: ({ __count__: __proto__ }) }) = <>().__defineSetter__(\"(yield <x><y/></x>)\", function(y) { yield y; /*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in <x><y/></x>) export *;; yield y; })</>; ({constructor: false, __count__: true }) , this.__defineGetter__(\"__noSuchMethod__\", constructor); <y><z/></y>--) {/*infloop*/do yield __iterator__; while((function (function::__iterator__, prototype) { return undefined } ).call(__count__.eval(*::*), )); }");
tryItOut("for(let y in []);");
tryItOut("({}).__lookupGetter__return <x><y/></x>;");
tryItOut("(__parent__);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <><x><y/></x></>) {throw window; }");
tryItOut("export *; const __iterator__;");
tryItOut("with({__count__: []})return  /x/g ;");
tryItOut(" for each (prototype in <xxx>{constructor}</xxx>) if (((<x/>)() ? #1=[#1#] in * : <y><z/></y>))");
tryItOut("/*for..in*/for(var __parent__ = (({ get getter(constructor, __noSuchMethod__)(p={}, (p.z = true)()), __proto__: __iterator__ = <><x><y/></x></>, __noSuchMethod__ = <y><z/></y> })) in new this.__defineGetter__(\"__iterator__\", function  __noSuchMethod__ () { if(window) {(*);return; } else ; } )(window)) L: {{}gc() }");
tryItOut("/*for..in*/for(const __parent__ in (this.*).valueOf(\"number\")) {L:if(( /x/ ( '' , this))) { if (undefined) __noSuchMethod__; else {yield; }}\nyield false; }");
tryItOut("M:if(<><x><y/></x></> <<= <y><z/></y>) { } else  if (__count__ = true) {return @foo; } const __proto__;");
tryItOut("/*infloop*/L:do throw *; while(3/0);");
tryItOut("\fwith(<x><y/></x>){*(window); }");
tryItOut("/*infloop*/L:for(let prop; @foo; 4.) {var __parent__, __iterator__ = <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for \t each(var prop in  '' ) throw <y><z/></y>;");
tryItOut("throw false;");
tryItOut("{Math.powwith( /* Comment */({__parent__ getter: function(q) { return q; },  get __count__(__noSuchMethod__) { yield <x><y/></x> }  }))return -3/0; }");
tryItOut("{}\n");
tryItOut("M:while(( /x/ ) && 0){{break ; } }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor.constructor in true) continue L;");
tryItOut("/*for..in*/for(var constructor in 3/0 -= [,,z1].propertyIsEnumerable(\"__parent__\")) export __parent__; const __noSuchMethod__;");
tryItOut("yield __parent__.constructor getter= ({}).hasOwnProperty;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M for  each(__count__ in <><x><y/></x></>) {yield; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__.constructor = (<><x><y/></x></> for (__noSuchMethod__ in __iterator__)).isPrototypeOf(new Boolean(this)), __iterator__] = __iterator__.(<y><z/></y>) in export __noSuchMethod__) {export *; }");
tryItOut("with({}) { throw __proto__; } ");
tryItOut("{export __parent__; }");
tryItOut("/*for..in*/function(y) { yield y; with({prototype: __iterator__: constructor = [z1,,]})[1,2,3,4].map; yield y; }for(const prop in <><x><y/></x></>) return null;");
tryItOut("let(__parent__ = true) ((function(){yield window;})());");
tryItOut("L:if(<><x><y/></x></>) { if (<x/>) __noSuchMethod__, __proto__;} else return <x/>;");
tryItOut("L: {}");
tryItOut("for(let y in []);");
tryItOut("while((__count__) && 0)break M;");
tryItOut("if(({}) ? <x/> : window) {/*infloop*/for(let [, , __noSuchMethod__, ({ constructor: __iterator__, __parent__: /*\n*/[, ] })] = null >>>=\n[1]; (( /x/g .unwatch(\"prototype\")).__proto__); prop) L: ;const prototype = <x/>; } else  if ((({prop: <y><z/></y>}))) return; else {let __parent__ = -0, constructor; }");
tryItOut("prototype");
tryItOut("with({}) { with({}) prop = prototype; } ");
tryItOut("L:switch(<><x><y/></x></>) { case #1=[#1#]:  }");
tryItOut("if(-1.__lookupSetter__(\"__count__\")) { if (<x><y/></x>.(*)) {break M;var function:: = 1e81, constructor; } else var constructor = <x><y/></x>;}");
tryItOut("/*infloop*/M:do return; while((Math.pow).call(true, ));");
tryItOut("/*infloop*/L:for(const __noSuchMethod__ =  '' ; window;  /x/ ) {const __noSuchMethod__, __iterator__; }");
tryItOut("/*for..in*/for(let __iterator__ in undefined) {throw <><x><y/></x></>; }");
tryItOut("/*infloop*/while(<x/>){if(-3/0) { if (*.__lookupSetter__(\"__proto__\")) {throw __iterator__; } else {break L;throw ({a2:z2}); }}L: {yield #1=[#1#];throw -0; } }");
tryItOut("try { Math.pow } catch(__parent__) { __parent__ = window; } ");
tryItOut("/*for..in*/for(let __iterator__ = (033 > [,]) in __proto__) yield;");
tryItOut("/*for..in*/for(let __iterator__ in <>(<x><y/></x>)</>) {if(this) {yield;yield; }{} }");
tryItOut("/*infloop*/do __parent__, constructor; while(<x/>)\n/*infloop*/while(<x><y/></x>.throw(eval(\"var prototype = __proto__, __noSuchMethod__ = 0.1;\",  \"\" ))){L: yield <><x><y/></x></>;(__proto__);\n\n }");
tryItOut("/*for..in*/for(constructor in ((<x><y/></x>).watch)(this).unwatch(\"__parent__\")) {export __iterator__; }");
tryItOut("try { ((<x><y/></x>)); } catch(__proto__) { __iterator__ = __noSuchMethod__; } finally { for(let y in []); } ");
tryItOut("return (uneval(<x/>));/*infloop*/while(this){throw window; }\n");
