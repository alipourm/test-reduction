tryItOut("/*infloop*/L:for(({ __count__: __proto__, constructor: __parent__ }) = __proto__.__proto__; __iterator__ = __iterator__; <x><y/></x> += <x><y/></x>) {; }");
tryItOut("M:while((prop.(window)) && 0)(<y><z/></y>);return;");
tryItOut("/*infloop*/for(function(y) { yield y; var prop = [1,,], prop = prop;; yield y; }(#1#).__defineSetter__(\"__count__\", (1 for (x in []))); <x/>; Exception(__noSuchMethod__ setter: [1,2,3,4].slice.__count__)) {{function(y) { yield y; const __noSuchMethod__, constructor;; yield y; } }export __proto__\f; }");
tryItOut("L: {1e81;export *; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(__iterator__)let (__iterator__) { var prototype; }");
tryItOut("L: throw <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(const __count__; prototype =  '' ; (Math.pow)()) /*infloop*/M:for(<x><y/></x>; [z1]; __count__) {'haha'.splitconstructor, prop = constructor }");
tryItOut("while((function(y) { yield y; return;; yield y; }) && 0)__iterator__, constructor;");
tryItOut("let(({ function::constructor: constructor }) = constructor = null) ((function(){yield ((<x/>)\n.call(undefined &= <x/>, ));})());");
tryItOut("M:do {try { (new Function(\"export *;\")) } finally { this; }  } while(('fafafa'.replace(/a/g, Function)) && 0);");
tryItOut("/*for..in*/for(let prototype([undefined for each (__noSuchMethod__ in true)]) in  '' ) export *;");
tryItOut("gc()\n");
tryItOut("L:if(({ prop: {return;gc() }, __iterator__: prototype }) = <x><y/></x>[033] == default: Math.sinyield;case 8: break; case ({constructor: <><y><z/></y></>}): {}break; ) <!--yy--> else {let __iterator__, __noSuchMethod__ =  '' ;if(<x/>) {null;export *; } else  if (0/0) function(y) { yield y; ;; yield y; } }");
tryItOut("");
tryItOut("/*infloop*/M:for(const ({ gc: [] }) = this ? [this].map(function(q) { return q; }) :  '' .hasOwnProperty(\"__proto__\") :: ((new (*::*)(<y><z/></y>) >> [z1].eval(<x/>))[<><x><y/></x></>.__lookupGetter__(\"__iterator__\") instanceof yield window]).__defineGetter__(\"constructor\", [1,2,3,4].slice); [, , ({ __count__: ({ __iterator__: __noSuchMethod__, prop: each }) })] = <x><y/></x>.hasOwnProperty(\"__parent__\")\t.valueOf(\t\"number\"); ([11,12,13,14].filter)) {with({}) return (__count__ = window);/*infloop*/for(const ({ __parent__: ({ __proto__: __parent__ }) }) = undefined.__lookupSetter__(\"__noSuchMethod__\"); [11,12,13,14].sort; let (constructor =  /x/g , prop) <y><z/></y>) const __proto__; }");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = this.zzz.zzz.prototype = false % (yield  \"\" ) in new RegExp(<x/> >>=  '' , window).hasOwnProperty(\"__noSuchMethod__\")) {this }");
tryItOut("throw StopIteration;");
tryItOut("try { export __parent__; } catch( __iterator__ __count__)(/ { yield false; } finally { prototype = constructor; } ");
tryItOut("if(window.__count__ = undefined) throw this != <y><z/></y>; else {yield; }");
tryItOut("/*infloop*/L:for(const __iterator__ = prototype.__parent__; this.__defineGetter__(\"__count__\", <><x><y/></x></>) < prop.(__count__.((undefined.__noSuchMethod__))); [({ __proto__: __iterator__, __iterator__: constructor }), __count__, , ] = (5.0000000000000000000000++)) {{} }");
tryItOut("M:while(('fafafa'.replace(/a/g, ({}).hasOwnProperty)\t) && 0)yield;");
tryItOut("switch(\n(<x><y/></x>.unwatch(\"__proto__\"))) { case 1: break; default: return; }/*for..in*/for([gc(), __iterator__] =  \"\"  += __count__ ? <><x><y/></x></> : <x/>\f in __noSuchMethod__) {export *;\f }");
tryItOut(";");
tryItOut("L: export __count__;");
tryItOut("if((constructor >>>=*::*).__parent__) var \tprop = <><x><y/></x></>; else  if (function(id) { return id }.__parent__) {constructor;do {yield <y><z/></y>; } while((this) && 0); }");
tryItOut("L:if(<><x><y/></x></>) {yield true;(this); } else {constructor;__count__; }\nlet (__parent__ = <><x><y/></x></> >>>=@foo, __iterator__ =  \"\" ) { yield <><x><y/></x></>; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:for(var prototype = new (yield)( /x/g  .@*:: true)(); <><zzz>new (<><x><y/></x></>)([<><x><y/></x></>].some(function(y) { yield y; var __count__, __count__ = <y><z/></y>;; yield y; }), <><x><y/></x></>).__iterator__ = void 1e4</zzz></>; true) export constructor;");
tryItOut("let (constructor) { /*infloop*/for(const [[], , ] = ((false.valueOf(\"number\").@*)(this, ({a2:z2}).__lookupSetter__(\"prototype\"))); ([])(prototype); (yield eval(\"0x99\", (-1)))) {yield; } }");
tryItOut("/*infloop*/do export setter while(@foo);");
tryItOut("if(new function(y) { yield y; ; yield y; }(<x><y/></x>, <x><y/></x>) >>= ({prop setter: ({}).hasOwnProperty, __proto__: null })) {; } else  if ((<x><y/></x> /= [z1]++)) function () { yield <><x><y/></x></> } break M; const prop; else {{([z1]); }; }");
tryItOut("switch(constructor = <x><y/></x>) { default: while(( /x/g ) && 0){yield;throw W; }case  \"\"  === ((eval(\"(*);\", <><x><y/></x></>)) ? prop.__parent__ =  ''  : [15,16,17,18].map((1 for (x in [])), <y><z/></y>)): with(*){; }break; case 0: case 2:  }");
tryItOut("const prop =  '' , __count__;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = function ([y]) { }; <y><z/></y>; window) {yield; }");
tryItOut("/*for..in*/for([] in __proto__.throw(([11,12,13,14].filter)).__lookupGetter__(\"__iterator__\")) {var __parent__, __parent__; }");
tryItOut("M:if((((<x><y/></x>)(true)).__defineSetter__(\"__parent__\", gc))) L:with({__iterator__: (function (__count__)undefined).call}){gc() }");
tryItOut("switch(*::*\n %= <><x><y/></x></>) { default: (<y><z/></y>);{(__count__);({ set __noSuchMethod__(__count__, constructor) { return *::* }  }), ; }break;  }");
tryItOut("/*infloop*/do throw StopIteration; while( '' .__defineSetter__(\"__iterator__\", function  prop () { var __proto__, __proto__; } ));");
tryItOut("/*for..in*/for(let __noSuchMethod__ = __iterator__ in false >>> *.*) if(undefined) {const __proto__ = <><x><y/></x></>; } else  if (Error(<><x><y/></x></>, undefined)) gc()");
tryItOut("L: while((null) && 0)export __iterator__;");
tryItOut("do yield; while((new (<x/>)(+([11,12,13,14].filter))) && 0);");
tryItOut("M:with(let (prototype) window){<x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in false) {{}return undefined; }");
tryItOut("with(new (3/0)(window)){throw @foo;return; }");
tryItOut("(<><x>//h\n<y/></x></>);let __parent__, yield;");
tryItOut("{;prop; }");
tryItOut("let(constructor = ((uneval(window @ <x><y/></x>))), __noSuchMethod__ = this >>>=[1,,]) { throw  \"\" .hasOwnProperty(\"prototype\");");
tryItOut("/*for..in*/M:for(var __iterator__ in ((<x/>)((function ([y]) { })())))export __noSuchMethod__;");
tryItOut("{{} }");
tryItOut("let ([prototype, , ({ __iterator__: ({ constructor: constructor, __noSuchMethod__: __parent__ }) }), [({ __iterator__: prototype }), ], __parent__] = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>, __noSuchMethod__) { ( /x/g ['__iterator__']|=((uneval(null)))); }");
tryItOut("false;");
tryItOut("let (__proto__, [[, prototype, , __iterator__, __count__], __proto__, prototype, prop] = (__count__-=<x><y/></x> & 1e+81)) { /*for..in*/for(__count__ = <><x><y/></x></>.__defineGetter__(\"each\", [1,2,3,4].slice) in true) return -3/0; }let(__iterator__ = __count__ = this) { let(__proto__ = null) ((function(){(new Function(\" /x/ ;\"))})());");
tryItOut("/*infloop*/while(constructor = <y><z/></y>)continue L;");
tryItOut("/*for..in*/L:for(const prototype in ([11,12,13,14].some)) function(y) { yield y; break ;; yield y; }\n");
tryItOut("if((prop = <><x><y/>\t</x><\f/>))  else  if (<x><y/></x> % *::*) Math.pow");
tryItOut("/*for..in*/for(const prop in (new function (__proto__, __count__)1e+81())) {{export *; } }");
tryItOut("{/*infloop*/for(let __proto__; (__iterator__%=* ^= null *= (window.__defineSetter__(\"__proto__\", __noSuchMethod__) >>>=0.1)); (~<x><y/></x>.constructor @ <x/> || <><x><y/></x></>)//h\n) {switch(prototype.__proto__ setter= 'haha'.split) { case <><x><y/></x></>: break;  } } }");
tryItOut("/*for..in*/M:for(let __count__.__count__ in (*--)\n) L: {export prop;break ; }");
tryItOut("try { __noSuchMethod__ = __count__; } catch(prototype) { this.zzz.zzz; } ");
tryItOut("\fwhile(( ''  / <x><y/></x>) && 0){yield;throw  \"\" ; }");
tryItOut("{*::*; }\nthrow window;");
tryItOut("return;");
tryItOut("M:if([]) /*infloop*/M:while([11,12,13,14].sort)throw <><x><y/></x></>; else return; const prototype;");
tryItOut("{(-0);break ; }");
tryItOut("let(({ __parent__: __noSuchMethod__ })) ((function(){yield {};})());");
tryItOut("if((new ( \"\" )(this) ? ({__noSuchMethod__ setter: [1,2,3,4].slice }) : [window for each (prototype in __iterator__)])) yield; else  if (<>this</>) yield window; else var prototype = [,];");
tryItOut("/*infloop*/for(let prototype; <x><y/></x>; <\nx><y/></x>.(this)) __parent__ =  \"\" , __proto__;");
tryItOut("/*for..in*/for(\n<y><z/></y>['prop'] in this) {prop; }");
tryItOut("/*for..in*/for(var prototype in window) (false);\nexport *;\n");
tryItOut("constructor getter: [1,2,3,4].map");
tryItOut("with({}) let(prototype = __iterator__ = (__count__ = *), __noSuchMethod__) { this.zzz.zzz;");
tryItOut("break L;\n;\n");
tryItOut("with({__proto__: ({ get __iterator__ __parent__ (prop, __iterator__) { <><x><y/></x></>; } , prototype:  /x/g  })}){(<y><z/></y>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (this)( '' ) in  '' ) {(1e+81);export *; }");
tryItOut("M:if(([constructor])) { if (window.__defineGetter__(\"__proto__\", Function)) {const let = <x><y/></x>;yield *::*; } else {yield window; }}");
tryItOut("do 'haha'.split while((new *::*(@foo)) && 0);");
tryItOut("/*for..in*/M:for(var __iterator__ in false) gc()");
tryItOut("export constructor");
tryItOut("L:switch([1]) { default: yield;gc()break; case __iterator__: export *;case <x><y/></x>: break ;export *;break; continue ;({}).hasOwnPropertybreak; case 5: throw constructor;case 1: break; case 6: yield;gc()break; case <x><y/></x>: break; case window: function  __proto__ () { yield <x><y/></x> } break; break; case this: let setter =  /x/g , undefined;break; case 0: break L;break; yield <x><y/></x>;break; gc()<x><y/></x>;break; case 6: var __iterator__;const __iterator__ = -1;case 8: export __iterator__;break; case <><x><y/></x></>: return 0x99;break;  }\n");
tryItOut("/*for..in*/for(let __iterator__ = <x><y/></x>.( /x/ ).__defineGetter__(\"prototype\", <x><y/></x>) in --true) {break M; }");
tryItOut("/*for..in*/for(const prototype.__noSuchMethod__ in ([1,2,3,4].map\n).call(\t<x><y/></x>, )) {export __noSuchMethod__; }");
tryItOut("if([,,z1].constructor = undefined) const __parent__, prop = __proto__;");
tryItOut("while((eval(\"constructor\", <x><y/></x>)) && 0){L:with({__proto__: <><x><y/></x></>})yield  '' ; }");
tryItOut("if((__parent__.constructor)) { if (((__iterator__ + prop)\n :: [({ prototype: ({ prototype: prototype }), prop: prototype }), (undefined)(5.0000000000000000000000)] = [__proto__ = undefined[-true]].some(function  __iterator__ (prop, prototype) { yield ([*::*]) } ))) {with({__count__: this.__defineGetter__(\"prop\", function(y) { yield y; /*infloop*/L:while(undefined)var __iterator__;; yield y; })}){/*infloop*/while(*){return;continue ; } } }} else M:if((uneval(*::*))) { if ('fafafa'.replace(/a/g, gc)) {<><x><y/></x></>;return *; } else {break ; }}");
tryItOut("/*for..in*/for(const (__proto__ = <><x><y/></x></>).__count__ in [11,12,13,14].sort) /*infloop*/M:for(let ({ __parent__: ({ constructor: prototype }) }) = __parent__ = prop; [1,2,3,4].slice ? (constructor = __iterator__ = prop /=  \"\" ) : [,] + [1].valueOf(\"number\"); <bbb xmlns:ccc=\"constructor = null\"><ccc:eee></ccc:eee></bbb>.((*.prototype = <y><z/></y>))) {let (__proto__, __noSuchMethod__) { return  /x/g ; } }");
tryItOut("try { let(__proto__, __count__ = this) ((function(){return;})()); } finally { let(__parent__, __proto__) ((function(){var constructor, __noSuchMethod__ = <x><y/></x>;})()); } ");
tryItOut("/*infloop*/for(var [, , , __iterator__, ({ constructor: ({ __noSuchMethod__: ({ constructor: ({ __proto__: ({ __noSuchMethod__: ({ __iterator__: __count__ }) }) }) }) }), __parent__: __proto__ })] = (-1.@*); __parent__; (__count__ = ({ constructor: ({ constructor: __parent__, *::*: __noSuchMethod__ }), __iterator__: ({ __count__: prop }) }))) if(*::*) { if (false.watch(\"__iterator__\", window)) {throw <x/>; }} else ;");
tryItOut("switch( /x/g ) { case 7: default: break; throw window;case 0: break;  }");
tryItOut("break ;M:if(<x/>)  { return <x><y/></x> }  else  if (this) let __count__ = <x><y/></x>; else return;");
tryItOut("return;");
tryItOut("const __iterator__ = <x><y/></x>, __proto__ = prop\nyield;");
tryItOut("if((prototype = <x><y/></x>)) { if (this.__defineGetter__(\"__noSuchMethod__\", prop)) {export *; }} else {try { gc() } finally { ; } ([,]); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let function::__count__.prop in  /x/ ) {(undefined).watch1e4; }\n const __noSuchMethod__;\n");
tryItOut("");
tryItOut("/*for..in*/M:for(__iterator__.valueOf(\"number\").prop in ((/a/gi)([__parent__, constructor, , prop, prototype] = gc())))/*for..in*/for(const __iterator__ =  /x/  in <x><y/></x>) {{} }");
tryItOut("/*for..in*/L:for(var __count__ = (<><x><y/></x></> @ <x><y/></x> ? __noSuchMethod__%=__parent__.__noSuchMethod__ : window = ('fafafa'.replace(/a/g, /a/gi))) in @foo) {return window;<x/>;M:if([]) {let function:: case , __parent__;__parent__ =  /x/g ; } else  if (<><x><y/></x></>) {(this).watchexport __noSuchMethod__; } else {} }");
tryItOut("if( /* Comment */<x><y/></x>.__parent__) {;let __noSuchMethod__ = -3/0, __parent__ = *; } else if(window) {throw <><x><y/></x></>; } else  if (null) yield; else {break ;export *; }");
tryItOut("if(prototype) {}");
tryItOut("return <> '' </>;");
tryItOut("(prop);");
tryItOut("{switch((new (<x/>).watch())) { case 7: case __iterator__ = undefined: break;  } }");
tryItOut("return new (undefined)();");
tryItOut("if(yield ( /x/g  >= <><x><y/></x></>)) {#1=[#1#] } else  if (![11,12,13,14].sort) {/*infloop*/do {return;yield; } while(<x><y/></x>);{var prototype, __proto__;const __count__ = true; } }");
tryItOut("/*infloop*/M:for(var ({ __parent__: ({ prototype: __count__, __noSuchMethod__: __noSuchMethod__ }), __proto__: [, ] }) = (let (0x99, __parent__)  '' .valueOf(\"number\")); yield <y><z/></y>.__noSuchMethod__; prototype.(@foo).yoyo(this.__defineSetter__(\"prototype\", Function))) {export *; }");
tryItOut("\nyield  '' ;\n");
tryItOut("with({}) this; const __count__;");
tryItOut("(yield 1.2e3);");
tryItOut("if(<x/>.eval(window)) {throw <x><y/></x>;; } else  if (<xxx>{__count__}</xxx>) return;");
tryItOut("do {throw @foo; } while((__count__) && 0);");
tryItOut("(eval(\"\", [[]]));");
tryItOut("");
tryItOut("if({}) { if (((({__proto__: *::* })).throw([,,] = ({ __parent__: ({ __parent__: prototype }) })))) let (constructor = (-1).valueOf(\"number\"), __noSuchMethod__ = <x><y/></x>) { break ; } else {export *;var __noSuchMethod__, __proto__ = <><x><y/></x></>; const __parent__; }}");
tryItOut("/*infloop*/for(window; (uneval((new <><x><y/></x></>(033)))); this.zzz.zzz) {const __parent__ = function ([y]) { }, each = <x><y/></x>; }");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/for(const prop.__noSuchMethod__ in <x><y/></x>) @foo;");
tryItOut("((__count__)) = prop;");
tryItOut("with(__noSuchMethod__ = window >>>= /* Comment */window)for(let y in []);");
tryItOut("prototype/*infloop*/L:do gc()\t while(prototype);");
tryItOut("if(*::*) { if (this.zzz.zzz) continue ; else {arguments; }}");
tryItOut("/*infloop*/L:do {throw  \"\" ;export prototype; } while(<>this</>);");
tryItOut("/*infloop*/for(; window; (new gc(([1].prop--), <x/>))) yield @foo\nbreak \n");
tryItOut("if(window) { if (().call(eval(\"return __noSuchMethod__;\", this), (new ([1,2,3,4].map)( \"\" , <><x><y/></x></> > [[]])))) {L: /*for..in*/M:for(__count__ in __proto__) yield; } else {L:do {export *; } while(([11,12,13,14].map) && 0); }}");
tryItOut("/*infloop*/L:for(var __proto__; (prototype .. <><x><y/></x></>.({ __count__: prototype, prop: [__noSuchMethod__, ] })); (true.valueOf(\"number\"))) export *;");
tryItOut("for(let y in []);");
tryItOut(" { (-3/0); } ");
tryItOut("return");
tryItOut("/*infloop*/for(this; *; *) {export prop; }continue L");
tryItOut("export prototype;let (__parent__ = (__proto__.constructor >>>  /* Comment */__proto__), prototype = ( /x/  *= [,,z1])) { __noSuchMethod__ = window, __iterator__; }");
tryItOut("/*for..in*/M:\ffor(constructor in (eval(\"__parent__|=<x><y/></x>\", __proto__ = ((Y))))) return;");
tryItOut("/*for..in*/for(__iterator__ in <x><y/></x> ..  /x/g ) /*infloop*/L:for(let __parent__; __noSuchMethod__; 1e81) return *::*;");
tryItOut("if([<x><y/></x> for (__parent__ in  \"\" )]) { if (constructor in undefined) {gc()const __proto__, __iterator__; }} else {/*infloop*/M:do { } while((([1,2,3,4].map).call)(<><x><y/></x></>,  /x/g ).valueOf(\"number\")); }");
tryItOut("if((\n({a1:1}).prop)) { if (([*::*].some(Function) >= (<x><y/></x>.(undefined)))) \nreturn true;} else yield;");
tryItOut("/*infloop*/do var __proto__, __proto__; while(eval(\"yield <><{__proto__}><!--yy--></{__proto__}></>;\", 1e81) for each (__proto__ in window.function::__iterator__));");
tryItOut("/*for..in*/for((window ===  /x/g  + *) in ((new Function)((this.__defineSetter__(\"constructor\", [z1,,].throw(*))))))<x><y/></x>");
tryItOut("with({x::__count__: 0/0}){return; }");
tryItOut("/a/gi\nyield [,,z1];\n");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("/*infloop*/M:for(const ({ __iterator__: prototype, prototype: [__count__, [return this;, ]\t] }) = 'fafafa'.replace(/a/g, (1 for (x in []))); [__iterator__].__iterator__; new (new Function(\"break M;\"))((function::__iterator__.prototype getter\t= __count__))) {yield;/*infloop*/M:for(__parent__ = (function ([y]) { })(); this.__defineGetter__(\"__proto__\", (new Function(\"yield (-1);\"))); ([[]] %= __noSuchMethod__)) {yield; } }");
tryItOut("yield true;if(new __parent__(<><x><y/></x></>)) { if (typeof this) { } else let __proto__, __iterator__ = true;}");
tryItOut("/*for..in*/for(__noSuchMethod__ = (__proto__+=(-0)) in (<x><y/></x> >=  /x/g )) {constructor:  /x/g ; }");
tryItOut("/*infloop*/for(var ({ ( \"\" )(undefined): __count__ }), __noSuchMethod__(*) = this.zzz.zzz; Iterator(); <x/>.__defineSetter__(\"__iterator__\", /a/gi)) {continue ;return function::__noSuchMethod__; }");
tryItOut("{if(try { continue ; } catch(prototype) { export __count__; } finally { ; } ) {yield  '' ; } else  if ( /x/  - prop) <><zzz><x><y/></x>.(false)</zzz>yyy</> else {prop = *::*, prototype;var prototype; } }");
tryItOut("if(@foo[null]) { if (( /x/ .__lookupGetter__(\"__iterator__\"))) {prop } else {<><x><y/></x></>;continue M; }}");
tryItOut("L: {}");
tryItOut("if(((p={}, (p.z = window)()))) const <x><y/></x>; else  if (\n({})) {(1e81);yield; }");
tryItOut("L:with(\ntrue <<= -0){__iterator__, prop;switch(1.2e3) { case 9: break;  } }");
tryItOut("/*for..in*/for(var window =  /* Comment */*::*.hasOwnProperty(\"x::__proto__\") in <y><z/></y>) {L:if(([] = 5.0000000000000000000000.prototype)) {continue ; }{} }");
tryItOut("/*infloop*/for(let __proto__ = <x><y/><\f/x>;  /x/ ; undefined) {case 7: /*for..in*/for(const false['prototype'] in (((*).watch)(__proto__-=<x><y/></x>)))var prototype = ; }");
tryItOut("{with(<x><y/></x>.@*)yield 1e81; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in 0.1) {throw 1.2e3; }");
tryItOut("<x/> = this, prototype;");
tryItOut("M:with({__parent__: ([__proto__, , ] = constructor)})constructor");
tryItOut("\ntry { return; } finally { yield  \"\" ; } ");
tryItOut("M:do {yield; } while(([z1]) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in ([1,2,3,4].map).call((new <><x><y/></x></>(<><x><y/></x></>, ({a1:1}))).\fthrow(prop = window), (constructor.* &= prototype = (function ([y]) { })()), __iterator__ = (-1))) /*for..in*/L:for((false); in true) {yield null; }");
tryItOut("L:do {(({}))(window) = __count__; } while((#2=[<x><y/></x>.eval( /x/ )]) && 0);");
tryItOut("let __count__, prop; const constructor;/*infloop*/for(eval(\"(new (undefined)())\", eval(\"let prototype = 033;\", \n3)); (\n<x/>).__proto__; <><bbb xmlns:ccc=\"function::constructor.isPrototypeOf(*.@*)\"><ccc:eee></ccc:eee></bbb></>) {return @foo }");
tryItOut("switch((eval(\"return 0.1;\", this.__defineGetter__(\"__count__\", ({}).hasOwnProperty)) << (prop) < *::* / <x><y/></x> ? new (function(q) { return q; })(__iterator__, <y><z/></y>) : this) .@x:: ({})) { case 7: /*infloop*/do ; while((let (__proto__ =  /x/ ) -0)(<x><y/></x> <<= {gc()return; }, __proto__));throw __noSuchMethod__;case 5: break L;if(*) { if (null.__iterator__ = <x/>) {; } else export *;}break; default: if(<><x><y/></x></>.__lookupSetter__(\"prop\")) {export *;yield <y><z/></y>; } else  if ( \"\" ) {{} } else {var __proto__, __parent__ = 033;var __noSuchMethod__; }break; case (return): break;  }");
tryItOut("export *\nlet __proto__ = <x><y/></x>;");
tryItOut("if((((Math.sin).apply).apply)((p={}, (p.z = <x><y/></x>)()))) {break L; \"\"  } else  if (((eval(\"this.__defineSetter__(\\\"constructor\\\", this)\", prop > *)).__defineGetter__(\"__noSuchMethod__\", Math.sin))) export prototype;");
tryItOut("<x/>.constructor");
tryItOut("__parent__, __proto__");
tryItOut("M:if((new Object((uneval( \"\" )), __noSuchMethod__ = ((constructor = null) .@ let = [[1]])).isPrototypeOf(constructor.(( '' )((function ([y]) { })(), [,]))))) do {} while((<x><y/></x>) && 0); else  if (this.__defineSetter__(\"__parent__\", gc).*) {if((prototype.prototype getter= [1,2,3,4].map)) prop = __iterator__, prop = this; else  if ((p={}, (p.z = __count__)())) {var __parent__ = [];export *; }let __iterator__ } else /*for..in*/for(const [__count__, (__count__)] = __count__ = <x><y/></x> in <x><y/></x>) {;yield; }");
tryItOut("/*infloop*/L:for(__parent__.__proto__ = (1 for (x in []))() % [15,16,17,18].filter(function(y) { yield y; @foo;; yield y; }, <x/>)\f.__lookupGetter__(\"function::__count__\"); (eval(\"(@foo.__defineSetter__(\\\"__noSuchMethod__\\\", null))\", __noSuchMethod__.__count__)).constructor; this.__defineSetter__(\"__noSuchMethod__\",  /x/g )) yield (__parent__ = @foo);");
tryItOut("(function ([y]) { });\nyield (function ([y]) { })();\n");
tryItOut("export *; const __proto__;");
tryItOut("if(((-0).__defineGetter__(\"prototype\", eval))) {let __iterator__, constructor =  \"\" ;yield <><x><y/></x></>; } else  if (this.__defineSetter__(\"constructor\", [1,2,3,4].map)) function (constructor) { return new prototype = [1,,] }  else let __iterator__ = *::*, __iterator__;");
tryItOut("L:with({__parent__: prop}){; }");
tryItOut("export *");
tryItOut("L:if(constructor) export *; else  if (prototype.__iterator__ = function  __count__ (__iterator__, __parent__)this(prototype.__noSuchMethod__)) {{}{} } else {gc() }");
tryItOut("__proto__ =  /x/g , __iterator__;\n/*infloop*/while(__count__)yield  /x/ ;\n");
tryItOut("");
tryItOut("/*for..in*/for(const prop in ((Math.sin)(\n<x/>)))");
tryItOut("/*for..in*/for(var  in ((function  __iterator__ (prototype, __noSuchMethod__)*::*)(*::*.__parent__)))export __proto__;");
tryItOut("with(({ set __count__ __proto__ ( { gc() } ) { yield <x/> } , __proto__: this }) >> (#1=(function ([y]) { })())){/*infloop*/L:\fwhile([,,]) }");
tryItOut("if(((3 for each (__proto__ in null)).isPrototypeOf(__iterator__.__noSuchMethod__)))  \"\" ; else {continue M; }");
tryItOut("/*infloop*/for(var __parent__; (arguments if (3) &= (/*\n*/new (#3={a:#3#})())); prop = @foo.valueOf(\"number\")) const prototype = this;");
tryItOut("let prototype = 1.2e3, __noSuchMethod__\n");
tryItOut("/*for..in*/L:for(prototype in ((<y><z/></y>)(arguments))){{}gc() }");
tryItOut("L: __count__;");
tryItOut("L:if(<x><y/></x>) {} else  if ({}) (prototype).watch else {; }");
tryItOut("{__parent__ = prop; }");
tryItOut("let (__count__ = constructor.()) { /*for..in*/M:for(let __noSuchMethod__ = *::*.__lookupGetter__(\"constructor\") in @foo) {return; } }");
tryItOut("{do {{}; }\f while(([,,z1]) && 0); }");
tryItOut("throw StopIteration;");
tryItOut("if(<><x\r><y/></x></>.valueOf(\"number\")) { if (delete *::*) {Math.powexport get; } else gc()}");
tryItOut("/*infloop*/for(; ; 0/0");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype(<><x><y/></x>\f</>) in <x><y/></x>) {continue ;function(y) { yield y; (false);; yield y; } }");
tryItOut("L: {/*infloop*/M:for(var __iterator__; delete __count__; String(true, 1e+81)) const __proto__ = <><x><y/></x></>;/*for..in*/for(var __iterator__((this)[window]) in ((({}).__lookupGetter__)(let.valueOf(\"number\").__noSuchMethod__))){'haha'.split(@foo); } }");
tryItOut("yield\nexport *");
tryItOut("with(<x><y/></x>) '' ;");
tryItOut("/*for..in*/L:for(let __parent__ = (new ({}).hasOwnProperty()) in 1.2e3) {<x><y/></x> }export __parent__;");
tryItOut("if(<x/>) { if (true) {yield; }} else ");
tryItOut("/*infloop*/L:for(let ({ <><>(constructor = * ? __parent__ = <x/> : (constructor = <><x><y/></x></>))</></>: ({ __count__:  { yield\n } , __count__: ({ constructor: prop }) }) }) = <><>(__noSuchMethod__ >>>=(<><x><y/></x></>.unwatch(\"__proto__\")))</> </>; let (__iterator__, ({ __noSuchMethod__: prop, __iterator__: ({ __iterator__: __parent__, __iterator__: <x><y/></x> }) })) [<x><y/></x>].filter(prototype); ((<x><y/></x>.@foo)\n :: prop = __iterator__)) {with(eval(\"this\",  /x/g )) }");
tryItOut("return <><x><y/></x></>;");
tryItOut("/*for..in*/for(var constructor = (<x><y/></x> ?  ''  : <><x><y/></x></>).propertyIsEnumerable(\"prototype\") in  get prototype()([15,16,17,18].some(<><x><y/></x></>, window))) {if(<y><z/></y>.isPrototypeOf(<x><y/></x>)) export constructor; else {constructor;export *; }export __iterator__\n }");
tryItOut("if(1e4.__lookupSetter__(\"prototype\")) {__iterator__ = window; } else (#1#);");
tryItOut("{yield; }");
