tryItOut("with(prototype.((<><x><y/></x></> ^ <x/>))){throw <><x><y/></x></>; }");
tryItOut("L:with(__count__.__iterator__.valueOf(\"number\"));");
tryItOut("return; const __noSuchMethod__;");
tryItOut("{}");
tryItOut("yield null; const prop;");
tryItOut("{var __noSuchMethod__ = [[1]], __iterator__\nif(<y><z/></y>.isPrototypeOf(<><x><y/></x></>)) {export __noSuchMethod__;var prop = [,,], prototype = window; } else  if ((new String(<x><y/></x>, <y><z/></y>)))  else {return  \"\" ;return; } }");
tryItOut("/*for..in*/for(var [__parent__ = <x/>, constructor] = undefined in  /x/ ) export *;");
tryItOut("/*for..in*/for(const __iterator__ = eval(\"1e4\", <y><z/></y>) ? <><x><y/></x></>.isPrototypeOf(<x><y/></x>) : new RegExp(this,  /x/ ) in function(q) { return q; }()) {/*for..in*/for(const constructor = {} in -1) {} }");
tryItOut("if(*::*) /a/gi\n");
tryItOut("{throw []; }");
tryItOut("with((get = *.hasOwnProperty(\"prototype\"))){/*for..in*/L:for(const RangeError()['constructor'] in ((({}).__lookupGetter__)((function ([y]) { })()))){M:with({__proto__: 1e81}){yield; } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in this) let prototype = __noSuchMethod__;");
tryItOut("if(eval(\"function (prototype) { yield; } \", [,])) window; else  if (x::__proto__ = <y><z/></y>) {return;yield [,,]; }");
tryItOut("if(<x><y/>//h\n</x> << <bbb xmlns=\".2 ^= __noSuchMethod__\">yyy</bbb> .. [11,12,13,14].map\t) {yield;export *; }");
tryItOut("/*infloop*/for(({prop setter: function(q) { return q; } }); ~__proto__ = false; __proto__(__proto__)/) export *;");
tryItOut("return;\nthrow  /x/g ;\n");
tryItOut("M:if(prop = __proto__) export *; else {if((__parent__ = __noSuchMethod__)) { if (undefined === <><x><y/></x></>) {window } else throw *;} }");
tryItOut("{if( /x/g ['constructor'] = <x/>) {;({}).hasOwnProperty } }");
tryItOut("/*for..in*/for(var __iterator__ = __count__.__noSuchMethod__ = arguments++ in (<><x><y/></x></>.constructor).__defineSetter__(\"__count__\", __count__ getter: function  __noSuchMethod__ (prop, __proto__) { yield *::* } function  __proto__ (__parent__, prototype) { return <><x><y/></x></> } )) {if((p={}, (p.z = [z1])())) { if (1e-81.__lookupGetter__(\"__proto__\"))  else {( /x/ );export *; }} }");
tryItOut("L:with(#3={a:#3#}){ }\nfor(let y in [5,6,7,8]) with({}) { {} } ");
tryItOut("if((__count__.yoyo(__noSuchMethod__))) { if (__proto__.(prop)) /*for..in*/for(var prototype = (prototype([11,12,13,14].map) = constructor = (++<x><y/></x>)) in (function ([y]) { } >>>=null)) export __parent__; else gc()}");
tryItOut("{export *;#3={a:#3#} }");
tryItOut("if(window) { if (<x><y/></x>) ;} else {continue M;function(q) { return q; } }");
tryItOut("return ([11,12,13,14].sort for each (prop in  \"\" ) if (<x/>));");
tryItOut("M:do {return; } while((null.propertyIsEnumerable(\"__iterator__\")) && 0)\n");
tryItOut("/*for..in*/for(let [prototype, prop] = yield (<x><y/></x> & prototype) in ((--<x/>).@*)) {/*infloop*/for(prop; 1.3; [15,16,17,18].some(constructor = <x><y/></x>, <x/>)) { }throw __count__; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((/a/gi)(__noSuchMethod__ = this.__lookupSetter__(\"prototype\")))){([prototype, , , __proto__, ] = ({ __parent__: prototype }))throw  /x/ ; }");
tryItOut("with({__parent__: ( /* Comment */<x><y/></x>)})if(constructor) ; else {throw [,]; }");
tryItOut("if(((<x><y/></x>).watch)) export prop; else  if (constructor.(1e4)) return <><x><y/></x></>;");
tryItOut(" /x/ \nM:if( '' ) {const __noSuchMethod__ = this; } else {const __noSuchMethod__ = <><x><y/></x></>, __count__/*\n*/;{} }");
tryItOut("if( \"\" ) {let prop;gc() }");
tryItOut("return;");
tryItOut("while((<><x><y/></x></>.isPrototypeOf(this.zzz.zzz)[(function(y) { yield y; return  /x/ ;; yield y; }())]) && 0) const function::__noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let prototype in *::*) {try { gc() } catch(__parent__) { <x><y/></x>; } (<><x><y/></x></>); }\nif( /x/ ) {let <x><y/></x>; } else  if (window) export __iterator__;");
tryItOut("/*infloop*/for(let __parent__; 3.141592653589793; ((uneval(this)))) {return; }");
tryItOut("/*for..in*/for(const __iterator__ in ( += __noSuchMethod__)) for(let y in []);");
tryItOut("switch((__count__.constructor =  \"\" )) { default: {} }");
tryItOut("with(<y><z/></y>){yield;export __noSuchMethod__; }");
tryItOut("/*infloop*/while(<x/>)gc()");
tryItOut("/*infloop*/M:do {yield; } while(true);");
tryItOut("for(let y in [5,6,7,8]) return __parent__ !== true//h\n;");
tryItOut("/*infloop*/for((p={}, (p.z = 0/0)()); ((yield __proto__)).valueOf(\"number\"); \n /x/ ) {}");
tryItOut("let (__count__) { L: {yield;throw [,]; } }");
tryItOut("if((Math.sin).call(<x/>, <><x><y/></x></>.yoyo([z1,,]) ? (<><x><y/></x></> if (<x><y/></x>)) : (((-0) for (__iterator__ in 1e+81))))) { if ((__proto__ = window++)) {yield;gc() } else {<><x><y/></x></>; const <x><y/></x>.__iterator__; }}");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/for(-3/0; typeof ++window; prop = 1.2e3.__defineSetter__(\"__noSuchMethod__\", -1)) /*infloop*/L:for(const ({ __noSuchMethod__: ({ __proto__: __proto__ }), prop: constructor }) = ([prop = <x/>]).__parent__; [15,16,17,18].some(function () { yield null } , Math.pow); [window]) {(<><x><y/><//h\n/x></>); }");
tryItOut("yield\n");
tryItOut("L:if(this.zzz.zzz) {const prop;/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <x/>) {return;export *; } }");
tryItOut("/*for..in*/L:for(let constructor in ((prop = 1e81\n)(eval(\" /x/ ;\", function::prototype(undefined) = (yield <><x><y/></x></>))))){export *;throw __count__; }");
tryItOut("if([z1,,]) return; else  if (window) {} else export __iterator__;");
tryItOut("{/*for..in*/L:for(let (window)(window) in [1].hasOwnProperty(\"__parent__\")) const __iterator__;L:if(__proto__ = ({prop: false, prototype: 0x99 })) export *; else {export *;\r } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(const __parent__; [11,12,13,14].sort; (undefined.valueOf(\"number\"))) {yield; }");
tryItOut("/*for..in*/for(const [prop, constructor] = <x/> in false) (<y><z/></y>)\n/*infloop*/for(const constructor; window.__lookupGetter__(\"function::prop\"); __parent__ = new eval()) { }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (function ([y]) { })()) yield -3/0;");
tryItOut("/*for..in*/M:for(false in ((function  __count__ (prop, prop) { __iterator__, prototype; } )( '' ))){@foo;export prop; }");
tryItOut("let (constructor = <><x><y/></x></>) { const constructor, __parent__ = false; }");
tryItOut("/*for..in*/M:for(const __iterator__ = * in @foo) {let __parent__ = 1e4;(([]).apply).apply }");
tryItOut("L: {__count__;return  \"\" ; }");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = <><x><y/></x>\t</> in <y><z/></y>)  try ");
tryItOut("if(undefined) { if (this) {gc() }} else export *;");
tryItOut("({}).__lookupGetter__");
tryItOut("if(prop) {\n if ((((new Function(\"const __proto__ = @foo;\")))(<x><y/></x>, <x><y/></x>)) .. (prop.constructor setter= new Function)) [,,z1]} else {/*infloop*/for(let prop; 0; true) {throw undefined;yield <x/>; }if(1e81) const __noSuchMethod__ = <y><z/></y>, constructor = @foo; else {export constructor; } }");
tryItOut("/*infloop*/for(<x><y/></x>.( /x/g ); constructor; (<y><z/></y>)(@foo, undefined).unwatch(\t\"__proto__\")) {export prototype; }");
tryItOut("if(!@foo.unwatch(\"__noSuchMethod__\")) { if (<y><z/></y>) {while((<x/>) && 0)var __noSuchMethod__ = 1e-81, __count__;const __parent__ = [1,,], __parent__; } else {Function }}");
tryItOut("throw __count__;");
tryItOut("/*infloop*/M:for(__proto__; ({prop: <y><z/></y>}); [] = 'fafafa'.replace(/a/g, Function)) {{} }");
tryItOut("/*infloop*/for(([1,2,3,4].map).call([*::* for (__iterator__ in  '' )], ); ; ({__count__:  \"\" .isPrototypeOf(3)})) {throw <><x><y/></x></>;const \f__parent__, __proto__ = <x><y/></x>; }");
tryItOut("with({}) for(let y in [5,6,7,8]) return new (new Function(\"yield;\"))(window);");
tryItOut("if((uneval(__noSuchMethod__ = .2))) {export *;\n{}\n } else  if (this /= new Object()) yield; else export *;");
tryItOut("if((Object())) { if (({}).__lookupGetter__) } else {0.1;export __noSuchMethod__; }\nyield;return;\n");
tryItOut("return;");
tryItOut("with((window).call(constructor ? <x><y/></x> : false, <x><y/></x> << undefined, false)){L: export *;; }");
tryItOut("L: export *;");
tryItOut("with({}) { __proto__ =  /x/ ; } ");
tryItOut("M:if(yield; << (function ([y]) { })()) {yield <><x><y/></x></>;({}).__lookupGetter__ } else  if ((constructor.prop = eval(\"continue ;\", undefined))) return; else export *;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ((<x><y/></x> for (constructor in #1#))).__iterator__ in (eval(\"undefined\", <><x><y/></x></>).throw(<y><z/></y>))) {if(-<y><z/></y> %= --<x><y/></x>) {( /x/ );const __proto__ =  '' , function::__iterator__ = <x><y/></x>; } }");
tryItOut("M:if(__parent__.watch(\"__proto__\", __iterator__)) { if (__noSuchMethod__ = __count__) {[,] }} else {; }");
tryItOut("return;");
tryItOut("/*infloop*/do {let __iterator__, prototype;__proto__, constructor = false; } while(__count__ != 0/0);");
tryItOut("const constructor = prop;");
tryItOut("/*infloop*/for(var prototype; function(y) { yield y; return;; yield y; }; true) export *;");
tryItOut("/*for..in*/for(const [__count__, __parent__] = (this(<x><y/></x>, window).__lookupGetter__(\"constructor\").yoyo(<><x><y/></x></> === this.__defineSetter__(\"prototype\", function  __proto__ (__count__) { return window } ) += __iterator__ != <y><z/></y>)) in Exception() <= [z1] :: <x/>) {export *;L: {export prototype; } }");
tryItOut("const __parent__, constructor = <><x><y/></x></>; const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const set in @foo) { '' \n }");
tryItOut("/*for..in*/for(prop in ((([1,2,3,4].slice).call)(__proto__))){let prop; }");
tryItOut("/*infloop*/for(var [__iterator__] = prototype = prop; ((033)()); undefined.throw([[1]])) throw __iterator__;");
tryItOut("L: const prototype;");
tryItOut("while((Iterator()) && 0)__iterator__(({}).unwatch(\"__noSuchMethod__\"))");
tryItOut("if(<zzz>'fafafa'.replace(/a/g, (*).watch)</zzz>) /*for..in*/L:for(var prototype in <><x><y/></x></>) (undefined); else  if (({__iterator__: new (<x/>)(),  get prop(({ constructor: __iterator__ })) { yield <x><y/></x> || *::* }  })) {var __iterator__, __parent__ = <><x><y/></x></>;yield window; }");
tryItOut("/*infloop*/for(<x><y/></x>; [z1]; <><x><y/></x></>) <y><z/></y>");
tryItOut("yield <y><z/></y>\nif([0.1]) throw window; else  if (*) {return;const prop, prototype; }");
tryItOut("{/*infloop*/for((continue M; if ( /x/g ).yoyo(this.hasOwnProperty(\"constructor\"))); [({ constructor: __noSuchMethod__, constructor: ({ prototype: prop }) }), , , ({ constructor: __noSuchMethod__ })] = ({__iterator__: constructor = export *;}); [] = __count__ .@x::  /x/ ) {gc() } }");
tryItOut("do  while((false) && 0);");
tryItOut("if(<y><z/></y> .@x:: <><x><y/></x></>) { if ((<x><y/></x> << <><x><y/></x></>)) {yield true; } else ({}).__lookupGetter__}");
tryItOut("M:with(<><x><y/></x></>.unwatch(\"__noSuchMethod__\")){yield <y><z/></y>; }M:if((new (<x><y/></x>.__count__) -= eval(\"{}\", window)(((window)[-1] >>> <x><y/></x>.(undefined)), 5.0000000000000000000000.__defineGetter__(\"prop\", 'haha'.split)))) /*infloop*/for(const ({ __count__: prop }) = <><x><y/></x></>; prop.prop = window; 'fafafa'.replace(/a/g, (1 for (x in [])))) export *; else  if (new (1e4)(@foo, <x><y/></x>)) {const prop;export __parent__; }");
tryItOut("/*infloop*/do {gc() } while((new Function));");
tryItOut("if(__proto__ = *::*) { if (prototype+=@foo) { } else export __proto__;}");
tryItOut("let (__noSuchMethod__) { gc() }");
tryItOut("if(Number((prototype.__parent__ = this.zzz.zzz))) {export *;const constructor = true, __noSuchMethod__; }");
tryItOut("L: {/*infloop*/do gc() while(<><x><y/></x></>);{/*for..in*/for(var (__parent__) in ((/a/gi)(new ([1])())))var __proto__, prototype; } }");
tryItOut("/*infloop*/M:while(new (constructor)()){export __count__; }");
tryItOut("let constructor = constructor, __noSuchMethod__\n");
tryItOut("(<><x><y/></x></>);");
tryItOut("/*infloop*/M:do return\nconst __noSuchMethod__;\nexport __noSuchMethod__;\n while(prop);");
tryItOut("for(let y in []);");
tryItOut("with('fafafa'.replace(/a/g, function  __count__ (__parent__) { export __count__; } ))export *;with({__parent__: <x><y/></x>.eval([1])}){const __noSuchMethod__; }");
tryItOut("if(<y><z/></y>) { if (__proto__.(*::*)) export prototype;} else {{}var prototype = 0.1, __parent__ = undefined; }");
tryItOut("if(window) ; else  if ((-0)) { }");
tryItOut("M:if(this.__defineGetter__(\"__iterator__\", 'haha'.split)) 0/0; else {; }");
tryItOut("while((false && <x><y/></x>) && 0){const constructor;if(constructor) (false); else { } }");
tryItOut("{yield  \"\" ; }");
tryItOut("/*for..in*/for(var __iterator__ in <x/>) {const __parent__;__count__ =  /x/g , prop = <x/>; }");
tryItOut("gc()");
tryItOut("yield <x/>/*infloop*/for(__noSuchMethod__.(1e4); 'fafafa'.replace(/a/g, function  __proto__ (prop) { yield prop } ); *::*.valueOf(\"number\")) {break ; }");
tryItOut("yield;");
tryItOut("/*for..in*/for(const (__iterator__.constructor) in ((\f(function  __noSuchMethod__ (prototype, ((constructor)())) { return <x/>.eval(*::*) } ).apply)((Math.sin).call(#0=({__noSuchMethod__: this}) for each (constructor in @foo), RangeError( /x/ ), undefined.__defineGetter__(\"__noSuchMethod__\", ( /x/ ).watch)))))throw StopIteration;");
tryItOut("L:with({__proto__: true})throw  /x/g ;");
tryItOut("do {<><x><y/></x>\n</>;/a/gi } while((<><x><y/></x></>) && 0);");
tryItOut("L:with(Error()){yield;export *; }");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = (<x><y/></x> for each (yield in <y><z/></y>) for (__iterator__ in <><x><y/></x></>)) in ({ __iterator__: [__parent__, , __count__, ] }) = new <y><z/></y>()) yield *");
tryItOut("with({}) { return; } ");
tryItOut("while((this.__defineSetter__(\"__parent__\", false)) && 0){L:if(1e-81) ( \"\" ); else  if ([15,16,17,18].map(((eval(\"<x><y/></x>\", 4.)).watch).call, {}.(<x/>))) {(this); } else gc()return (__iterator__ = false) << ([15,16,17,18].filter((((1 for (x in []))).apply).call, prop)); }");
tryItOut("break ");
tryItOut(" const __iterator__;");
tryItOut("/*for..in*/for([__noSuchMethod__, prototype] = (__proto__ = undefined * [3]) in  /x/ ) (-3/0);");
tryItOut("let (__parent__, prototype =  /x/ ) { export constructor; }");
tryItOut("L:if((__count__ = false)) { if (prop.((this.valueOf(\"number\")))) return; else const __noSuchMethod__;}");
tryItOut("{/*for..in*/for(const prototype = \t<><x><y/></x></> .@*:: __parent__ in <><x><y/></x></>.watch(\"prop\", (1 for (x in [])))) {const __iterator__;throw {}; }if((yield <x><y/></x>)) { if (<x><y/></x>++) {const __count__, __noSuchMethod__ = *::*;<><x><y/></x></>; }} else 033 }");
tryItOut("{var __noSuchMethod__;export __proto__\nreturn <><x><y/></x></>; }");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in -1) let __proto__ = <x><y/></x>, __proto__ = false; while(__iterator__);");
tryItOut("prop = #1#; const constructor;");
tryItOut("return undefined\n");
tryItOut("/*infloop*/for(const ({ __proto__: [, constructor, __iterator__, ], __proto__: ({ \t@foo: __count__, delete: __noSuchMethod__ }) }) = ((* == null).__defineGetter__(\"prop\", [1,2,3,4].map)); <x/>; new (@foo[[1,,]])(__count__ + window, false)) {return function ([y]) { }; }");
tryItOut("if(#1# << this.zzz.zzz) { if ([gc()]) {/*infloop*/for(this; this; *::*) {yield; } }} else {yield;continue ; }");
tryItOut("if(\n*::*.yoyo( '' )) let prototype, __proto__ = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in  '' ) ;");
tryItOut("return <y><z/></y>;");
tryItOut("if(null) {; } else {return;export *; }");
tryItOut("{ }");
tryItOut("{return;return *::*; }");
tryItOut("while((new Object()) && 0){yield\n*; }");
tryItOut("if(({a1:1})) {throw [z1,,]; }constructor = ({prototype getter: (1 for (x in [])) })");
tryItOut("prototype = __parent__;");
tryItOut("prototype, __parent__\nyyy");
tryItOut("let (__proto__ = (({__proto__: this })), prototype) { if(try {  } catch(prop) { *::*; } ) let function::__parent__ = <><x><y/></x></>; }");
tryItOut("\fif(( /x/  >>= /*\n*/throw false;)) {return; } else  if (__parent__ = <><x><y/></x></>) var __parent__; else return;");
tryItOut("switch(this([[]])) { case <xxx {prop}={__noSuchMethod__} />: case 3: break;  }");
tryItOut("/*infloop*/for(var __iterator__; <> </>; (true['__noSuchMethod__'])) {}");
tryItOut("/*infloop*/do {(undefined); } while(constructor.valueOf(\"number\"));");
tryItOut("if(prototype = prototype) {}");
tryItOut("with({__proto__: ((__count__ = @foo).__iterator__)})throw <x><y/></x>.unwatch(\"this.prop\");");
tryItOut("let (\f({ __proto__: this.__defineGetter__(\"__count__\", [1]).__noSuchMethod__, prototype: ({ __parent__: ({ prototype: ({ x::({ __noSuchMethod__: __noSuchMethod__ }): prototype }), constructor: prop }) }) }), __iterator__) { /*for..in*/M:for(let [constructor, prop] = function  __parent__ (__iterator__, __count__) { return this } .__iterator__ in  '' )  }");
tryItOut("constructor = prop;");
tryItOut("if(new ({}).hasOwnProperty(__parent__,  /x/ )) { if (this) {gc() } else {/*for..in*/for((__iterator__) in *) {; } }}");
tryItOut("/*infloop*/for(--constructor; (yield null); let (__parent__, prototype = window) [1]) {function(q) { return q; }yield [1,,]; }");
tryItOut("{yield;\nM:if(<><x><y/></x></>++) { if ( /* Comment */undefined == (window.prop = @foo)) constructor = *, __proto__; else throw  \"\" ;}\n }");
tryItOut("export __parent__;");
tryItOut("constructor");
tryItOut("this.zzz.zzz;");
tryItOut("L:do {throw @foo; } while((<x/>) && 0);");
tryItOut("[[], , ] = __parent__;");
tryItOut("/*infloop*/L:do {let constructor = this; } while((uneval((<><x><y/></x></>.valueOf(\"number\")))));");
tryItOut("for(let y in []);");
tryItOut("M\f:with({prop: __parent__})break ;");
tryItOut("with({__iterator__: (void *.__proto__) .@ (new Function).call(((uneval(__iterator__)) < this.__defineGetter__(\"prop\", (new Function(\"const prototype, __proto__;\")))), (window.throw(<x><y/></x>))) .@x:: __iterator__ = new ([11,12,13,14].sort)(( /* Comment */*::*))})/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in *::*) ");
tryItOut("let (__count__, x::__parent__) { if(window) /*for..in*/for(const prototype in .2) {throw __noSuchMethod__;prototype = constructor; } else {continue L; } }");
tryItOut("with({__noSuchMethod__: (Math.pow).call(true, )}){export *; }");
tryItOut("with({prototype: +(0x99.__proto__)})L:if((<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")) == (1e81 === [[1]])) { if ((eval(\"\", true))) {;{} }} else {<><x><y/></x></>; }");
tryItOut("if(yield (window for each (constructor in constructor))) {if((new (@foo)([[]], 1e-81)) += <x><y/></x>) { if (\r((__noSuchMethod__.prop).propertyIsEnumerable(\"prop\"))) {export *; } else {throw @foo;(undefined); }} } else {return __proto__;({a2:z2}); }");
tryItOut("L:if((undefined % (-0) + 3.@foo.*)) {let (__parent__ = null, <y><z/></y>) { throw this; } } else  if (new Date((delete <x><y/></x>), prop)) {export constructor;L: break L; }");
tryItOut("M:while((new Error((undefined.propertyIsEnumerable(\"constructor\")), __parent__ = __parent__.isPrototypeOf((__count__ = this)))) && 0){let(__iterator__ = <x/>, __parent__ = <x><y/></x>) ((function(){prop = window;})());const prop = 0.1, __noSuchMethod__ = -1; }");
tryItOut("if((yield undefined)) L:if(true) { if (<x><y/></x>) let __parent__; else {\rfunction (__parent__, __proto__) { throw #3={a:#3#}; }  }} else  if ((+([<x><y/></x>.__iterator__].map(<><x><y/></x>//h\n</>\f)))) {; } else {(<><x><y/></x></>); }");
tryItOut("var __noSuchMethod__, prop = __proto__;");
tryItOut("if((prototype = <x><y/></x>.(<x><y/></x>) &&  /x/g --)) __count__; else {{/*for..in*/for(var __parent__ = undefined in <x/>) <!--yy--> }export *;\n\n }");
tryItOut("if(@foo) {<><x><y/></x></>;break ; }");
tryItOut("if(<x/>) { if (__iterator__) {return 3/0; } else {yield <x/>;(function(id) { return id }); }}");
tryItOut("for(let y in [5,6,7,8]) let(__count__ = prototype.constructor) ((function(){gc()})());");
tryItOut("with(<x><y/></x>(false, [z1]))var __proto__;");
tryItOut("with({__iterator__: ((--#1=[#1#]).isPrototypeOf(((gc).call((0x99)(<x><y/></x>, *), true, constructor))))}){M:if(0x99) { if ( /x/ ) throw __noSuchMethod__; else yield;}; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in  /x/ ) (@foo);");
tryItOut("M:if(__count__ = *::*) {const __count__;gc() } else  if (({constructor setter: function () { return *::* }  })) {export *; } else yield false const __count__;");
tryItOut("let (__noSuchMethod__ = ((p={}, (p.z = ({a1:1}))())), [, ] = +1e-81) { export constructor\ngc() }");
tryItOut("L: let __iterator__ = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in __iterator__) {return; }");
tryItOut("; const __noSuchMethod__;");
tryItOut("{/*for..in*/for(const __proto__ in ((({}).__lookupGetter__)(__iterator__.prototype setter= [1]))){/*for..in*/for([__noSuchMethod__, __parent__] = #2=({yield: #1#})() in @foo) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in null) {yield \tthis; } } }");
tryItOut("/*infloop*/do {let getter;throw [,]; } while(undefined);");
tryItOut("\n");
tryItOut("/*for..in*/for(const __proto__ in 1.2e3 ? <x><y/></x> : *::*) {/*for..in*/for(let prop in (((new Function(\"yield null;\")))( /x/g ))){export prototype; } }");
tryItOut("__proto__ = prop;");
tryItOut("L:with(([1,2,3,4].slice).call((({ constructor: prototype, __proto__: ({ __iterator__: __parent__ }) }) = constructor), eval(\"\",  '' ) if \f(this), ({__count__ }))[ /* Comment */prototype = <x><y/></x>])return;");
tryItOut("/*infloop*/for((({a1:1}) % function(id) { return id }.throw((false >>>=*))); (<x><y/></x> |= <x><y/></x>);  \"\" .__lookupSetter__(\"__parent__\")) {const __proto__, prototype;\n__proto__;\n }");
tryItOut("L:switch(*) { case 7:  }");
tryItOut("throw @foo;");
tryItOut("export *;");
tryItOut("L:switch(({__count__: *.yoyo(<x><y/></x>)})) { case 2:  }");
tryItOut("/*infloop*/do export *; while();");
tryItOut("with({}) throw prototype;");
