tryItOut("try { export <><x\t><y/></x></>; } finally { break M; } ");
tryItOut("let (({ prototype: prop, __noSuchMethod__: ({ __parent__: ({ __noSuchMethod__: prototype }) }) }) = 0 | window, __noSuchMethod__) { /*for..in*//* nogeckoex bug 349964 */M: for  each(const __parent__ in <><x><y/></x></>) (constructor, <><x><y/></x></>).apply }");
tryItOut("with((eval(\"new (( /x/ [window.throw(<><x><y/></x></>\\t)]))(<x/> for each (__count__ in null))\", (constructor.(<x><y/></x>))))){const __iterator__ = *;/*for..in*/L:for(let __parent__ = ( /* Comment */1e4.__lookupSetter__(\"__parent__\")) in constructor) {function  __parent__ (0x99, __count__)[,,z1]4. } }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = 1e-81.watch(\"__proto__\", eval) in {}) {do return <><x><y/></x></>; while((__noSuchMethod__.valueOf(\"number\")) && 0); }");
tryItOut("if(window) ( /x/g ); else  if ((-0)) export *; else yield;");
tryItOut("M:if((this.__defineSetter__(\"prop\", [1,2,3,4].slice))) {yield 4.; } else {break ;((-0)); }");
tryItOut("L: {;gc() }\n((__iterator__ = false))(eval(\"prop\", this).__defineGetter__(\"constructor\", [1,2,3,4].map)\n)\n");
tryItOut("let (__noSuchMethod__ = @foo, __iterator__ = @foo) { const __noSuchMethod__ = 0.1; }");
tryItOut("/*for..in*/for(var [__parent__, prototype] = <y><z/></y> in 3/0) ;");
tryItOut("/*infloop*/L:for(var __iterator__; function ([y]) { }(__proto__, constructor); <x/>) M:with(window){({}).__lookupGetter__const prop; }");
tryItOut("/*infloop*/for(let __iterator__ = <x/>.@foo; [, __parent__/*\n*/, __parent__] = ++prop; eval(\"return __proto__;\", undefined.@foo)) {export *; const prototype;export (<x/>);; }");
tryItOut("__iterator__");
tryItOut("/*infloop*/for(let __count__; 1e4; this.__defineGetter__(\"__proto__\", function(q) { return q; })) {var prop, __iterator__; }");
tryItOut("{(window); }");
tryItOut("/*for..in*/M:for(var [prop, constructor] = <><x><y/></x></> in null) yield <x><y/></x>;");
tryItOut("__proto__ = constructor;");
tryItOut("/*for..in*/L:for(const prototype in (<><><x><y/></x> </></>.*)) yield (yield  /x/ .*);");
tryItOut("if(eval(\"let __proto__;\", window)(<x/>)) { if (__parent__.( /x/  ?  {  }  : [[]])) {/*for..in*/for(__iterator__ = ({prop: [1,,],  get __noSuchMethod__(prop, prop)((yield  '' )) }) in 3/0 - <y><z/></y>) {continue L;return; } }} else yield @foo");
tryItOut("M:if((__parent__ = *::*) ::  /x/g (1e+81)) return;");
tryItOut("/*infloop*/for((arguments for each (prop in each)); (prototype =  '' , <x/> :: [,]); (({constructor: x::prop = *}))) {/*for..in*/L:for(var prop in (( /x/g )(\n__count__)))export *; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(__count__(undefined) in ((function  __iterator__ (__count__)<><x><y/></x></> ? null : <x><y/></x>.unwatch(\"prototype\"))([undefined])))/*for..in*/for(const __iterator__ in this) {({}).__lookupGetter__return  /x/ , [,,z1]; }");
tryItOut("if([,,z1]) {/*infloop*/do {gc() } while(this);gc() } else return <x/>;");
tryItOut("if((yield (yield <y><z/></y>.prop = false))) { if ((([1,2,3,4].slice)(((window)[<><x><y/></x></>]))\n)) {this.__defineGetter__(\")\", gc); }} else L: {let __parent__ = *::*;prop }");
tryItOut("prototype");
tryItOut("/*infloop*/while(033 ^ null){return @foo;new Function }");
tryItOut("do //h\n__proto__:  /x/g ; while((.valueOf(\"number\")) && 0);");
tryItOut("{prop(false) = __iterator__; }");
tryItOut("switch((!prototype.__iterator__ setter= function (prop) { yield true } )) { case 0: M:while((__parent__.constructor = (new (1.3)(<><x><y/></x></>, __count__) ? <>this</> : *.valueOf(\"number\") % prototype = <x/>)\t) && 0)return 0;break;  }");
tryItOut("/*for..in*/for(var __iterator__ in 0.1) {break L; }");
tryItOut("if(<x><y/></x>) ; else  if (yield) {(0/0);//h\nbreak ; }");
tryItOut("const __parent__, __proto__ = __noSuchMethod__;{(window);; }");
tryItOut("return;");
tryItOut("/*for..in*/for([prototype, __count__] = \n\t<><x><y/></x></> in *::*) yield;");
tryItOut("/*infloop*/L:while(<x/> ? prototype : <x><y/></x>){let (__count__) { gc() } }");
tryItOut("L: {yield undefined in *::*;throw <y><z/></y>; }");
tryItOut("let ([constructor, constructor]) { /*for..in*/for(let __noSuchMethod__ = __parent__ in <><x><y/></x></>) throw  /x/ ; }");
tryItOut("M:with({x::x::prototype: <><x><y/></x></>}){const __proto__ = false; }");
tryItOut("yield 3;");
tryItOut("gc()");
tryItOut("if(<x/>) {yield;__proto__ = <><x><y/></x></>; } else 3.141592653589793");
tryItOut("/*infloop*/L:while(<bbb xmlns=\"1.2e3\"> </bbb>){export __proto__;; }");
tryItOut("/*infloop*/for(__iterator__;  { return @foo } ; 1e-81) {yield;return prototype; }");
tryItOut("with({prototype: (yield __iterator__).__lookupSetter__(\"__proto__\")[1e-81[true]]}){return;return; const prototype; }");
tryItOut("while(((__iterator__ = <><x><y/></x></>)) && 0){/*for..in*/for(const __proto__ in (((__parent__ = <x><y/></x>.unwatch(\"__noSuchMethod__\")).__defineSetter__)(__noSuchMethod__ .@*:: (gc()) /= new (5.0000000000000000000000)().__noSuchMethod__ = ((p={}, (p.z = <x><y/></x>)())))))yield; }");
tryItOut("/*infloop*/for(var __proto__; (__parent__); new Function((eval(\"while((<y><z/></y>) && 0){{(3/0);[z1]; } }\", window)).__lookupSetter__(\"prototype\"))) let prototype, window;");
tryItOut("/*for..in*/M:for(let [prototype, constructor] = this.__defineSetter__(\"__count__\", Math.pow).__lookupGetter__(\"prop\").yoyo(constructor.isPrototypeOf(<x/>)) in ({ set prototype(prop, __iterator__) { yield 0/0 }  })) {const prop; const __iterator__;[1,2,3,4].map }");
tryItOut("with(({ prototype: constructor, __count__: constructor }) =  /x/  >>>  \"\" )yield\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in ~ '' .__defineSetter__(\"__count__\", new Function)) {break M\nexport *; }");
tryItOut("/*for..in*/M:for([__noSuchMethod__, __noSuchMethod__] = null.__noSuchMethod__ in 'haha'.split.__iterator__) {let __parent__, function::__parent__ = this; }");
tryItOut("let (__noSuchMethod__ = new ((new Function(\"return <><x><y/></x></>;\"))).call(__count__), [({ constructor: ({ __noSuchMethod__: __proto__, __iterator__: __noSuchMethod__ }) }), , , __proto__, ({ __noSuchMethod__: ({ prototype: prototype }) })]) { \f/*for..in*/L:for([__parent__, __parent__] = __noSuchMethod__.__iterator__ in <x><y/></x>) {return; } }");
tryItOut("if(([z1].@foo--).__parent__ = __proto__.@foo ? [<x/>].some((this).watch) : <><x><y/></x></>--) prototype((<><x><y/></x></> ==  /x/ ) & (1.2e3.isPrototypeOf(<x/>))) else  if ([/a/gi].filter(/a/gi).yoyo((Error())))  { if(<x><y/></x>) {gc() } else var __noSuchMethod__ = <x/>; } ");
tryItOut("if(0.hasOwnProperty(\"__parent__\").__lookupSetter__(\"__count__\")) { if ((function(y) { yield y; return;; yield y; } !== [<x/>].__lookupSetter__(\"__iterator__\"))) {continue M; } else *;}");
tryItOut("if( try ) var __iterator__ = 4.; else  if (__iterator__.constructor = <><x><y/></x></>) {*::*; } else {throw  \"\" ; }");
tryItOut("/*infloop*/do {with({__proto__: <y><z/></y>})export __parent__; } while(new Function((yield  ''  .@ #1=function ([y]) { }), __noSuchMethod__.__iterator__));");
tryItOut("if(([15,16,17,18].map(*::*, <y><z/></y>)\n) .. undefined.__defineSetter__(\"prototype\", function  prototype ()3 |=  '' )) export __proto__; else  if ((__noSuchMethod__)) export __count__; else {const __iterator__ = window, x::x::prototype;return; }");
tryItOut("M:if(undefined) {}");
tryItOut("prop");
tryItOut("while(((yield  /x/g )) && 0){({}).hasOwnProperty }");
tryItOut("{{continue L; } }");
tryItOut("{yield; }");
tryItOut("export *\nL:if(1.3) {const prototype =  /x/ ;/*\n }");
tryItOut("if((({__count__ setter: [1,2,3,4].map,  get __iterator__ prototype (*) { return (prototype.isPrototypeOf([,,z1].valueOf(\"number\"))) }  })).valueOf(\"number\")\n) { if ((let (prototype) *)) {'haha'.split } else { }}");
tryItOut("let (__iterator__) { __iterator__ = <x/>; }");
tryItOut("const __noSuchMethod__;do export *; while((this) && 0);");
tryItOut("let __count__ = __proto__");
tryItOut("L:if((__iterator__ = this.zzz.zzz.__lookupGetter__(\"__count__(__parent__ = __count__)\"))) {/*infloop*/do {export *;yield __count__; } while(false++);({ __iterator__: __parent__ }) = window; } else  if ((x::constructor.__iterator__)) {if(({ constructor: constructor }) = ({ __count__: prototype, __parent__: __proto__ })) {const prop = <><x><y/></x></>, __iterator__ = undefined; } }");
tryItOut("/*for..in*/for([__count__, __parent__] = <y><z/></y>.__defineGetter__(\"__proto__\", [1,2,3,4].slice) in  \"\" .__defineSetter__(\"__proto__\", (1 for (x in [])))) {yield <x><y/></x>; }");
tryItOut("/*infloop*/M:while(true)var __proto__\nL: /*for..in*/for(\f__count__ in ((true)( \"\" ))){export __count__; }");
tryItOut("yield;");
tryItOut("let (prototype = RegExp(0x99, __parent__), prototype = this) { export __parent__;\t }");
tryItOut("/*infloop*/L:for(let __noSuchMethod__; <><x><y/></x></> ? false : undefined; null) L:if(__iterator__ = @foo.valueOf(\"number\")) { if ((\nthis.zzz.zzz)) {var prop, prototype;while((__iterator__) && 0)throw constructor;; }} else {var <x><y/></x> = true, __proto__;yield window; }");
tryItOut("{const __parent__, __noSuchMethod__ = <><x><y/></x></>;__iterator__ }");
tryItOut("{if(undefined) { if (<y><z/></y>) {export constructor;throw true; } else {(true); }}let __noSuchMethod__ =  /x/ ; }");
tryItOut("/*infloop*/for(var *::*; [__noSuchMethod__ = [1,,]].some(<x><y/></x>); (p={}, (p.z = __parent__ = this)())) {(<y><z/></y>); }");
tryItOut("/*for..in*/for(var prop in (((1 for (x in [])))(((__parent__ = <x><y/></x>)('fafafa'.replace(/a/g, [1,2,3,4].slice), let (__count__ = <x/>) window))))){ }/*infloop*/for(<><x><y/></x></>; this; <x/>) {continue M; }");
tryItOut("if(__count__.constructor = yield __noSuchMethod__ -=  /* Comment */<x/>.__lookupSetter__(\"__iterator__\")) ");
tryItOut("export *;");
tryItOut("{let constructor = #3={a:#3#}, constructor = <x><y/></x>; }");
tryItOut("{__parent__ = @foo, __iterator__;\ncontinue M;\n }");
tryItOut("/*for..in*/L:for(const __parent__ = __noSuchMethod__ in <y><z/></y>) {return this;; }");
tryItOut("if(prop.eval( \"\" ).__parent__ = ('fafafa'.replace(/a/g, function(y) { yield y; yield this;; yield y; }))) { if (undefined[<y><z/></y>]) {while((<x><y/></x>) && 0){yield 0/0; }throw <x/>; } else {}}");
tryItOut("/*infloop*/for(new ('haha'.split)([<><x><y/><\r/x></>]).throw(1e81 & undefined); new [1,2,3,4].map(this <= (-0).throw(null).unwatch(\"__noSuchMethod__\")); \t({this: <><x><y/></x></>,  get __iterator__(constructor) { return false }  })) /*for..in*/for(const __count__ in <x><y/></x>) {export __count__;yield; }");
tryItOut("if((new ( /x/g .isPrototypeOf(<x><y/></x>))((__noSuchMethod__.__defineGetter__(\"__count__\", <x/>))))) <{__parent__}></{__parent__}> else  if (new Iterator()) {const constructor =  '' , __iterator__;{} }");
tryItOut("with([15,16,17,18].map((window).apply,  /x/g ) + ({}).hasOwnProperty){if(null)  '' ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x/>) export __count__;");
tryItOut("let (prototype, ) { continue ; }\nvar constructor = __proto__, __parent__ = <x><y/></x>\n");
tryItOut("if('fafafa'.replace(/a/g, eval)) {let (constructor =  /x/g ) { return; }throw @foo; } else  if ([!<x><y/></x>()].map(new Array()) !== __count__.__iterator__|=<><x><y/></x></>.prop.watch(\"__parent__\", __iterator__).__defineSetter__(\"__noSuchMethod__\", function  __proto__ (__count__) { var prototype = <><x><y/></x></>, prop = prop = <x/>; } )) try { export *; } catch(__proto__) { throw true; } ");
tryItOut("if(prop.prop = __count__) { if (new Function(undefined)) <x><y/></x> else {export __count__; }}");
tryItOut("/*infloop*/M:for(constructor; <x><y/></x>.valueOf(\"number\"); prototype.propertyIsEnumerable(\"__noSuchMethod__\").eval(<y><z/></y>)) gc()");
tryItOut("\nbreak L;");
tryItOut("\nconst __proto__ = #1#;\n");
tryItOut("__noSuchMethod__");
tryItOut("with(<x/>.valueOf(\"number\").@*)/*for..in*/L:for(__noSuchMethod__ in __proto__) {throw <x/>; }");
tryItOut("if((constructor.__noSuchMethod__ setter= Math.sin.__defineSetter__(\"__proto__\", Math.pow))) {continue ;(__parent__); } else  if (eval(\"var prop;\", ( \"\"  << <x/>))) {[[]]; } else {{}yield; }");
tryItOut("continue L;");
tryItOut("gc()");
tryItOut("M:if(prop =  '' ) {}yield __iterator__ =  '' ; else {let __noSuchMethod__ = <x><y/></x>, __iterator__;throw (function ([y]) { })(); }");
tryItOut("/*infloop*/L:do {function(y) { yield y; {}; yield y; } } while(false[1.3]);");
tryItOut("L: /*infloop*/for(var prototype = __iterator__; this; constructor) { for (__noSuchMethod__ in *); } const __proto__;");
tryItOut("/*infloop*/M:while(this.__defineGetter__(\"constructor\", gc)){(<y><z/></y>); }");
tryItOut("{(-0); }");
tryItOut("M:if( ''  for (constructor in 5.0000000000000000000000)) {with([prop === <y><z/></y> for ((__count__) in *::*) if (*)])/*infloop*/for(*::*;  /x/g ; <x><y/></x>) {var constructor = <y><z/></y>, __iterator__;var constructor; } } else  if ((({prop: true.prototype}))) M:if((1.3 || this)) eval else  if (( /x/g .yoyo(0)))  else {;gc() }");
tryItOut("if(@foo) {gc() }\n/*infloop*/do var __iterator__ = ({}); while(this);\n");
tryItOut("{yield 1.2e3 === arguments; }");
tryItOut("switch(new ({}).hasOwnProperty(prototype)) { case 1.2e3\n: break;  }");
tryItOut("/*for..in*/for(let [constructor, __noSuchMethod__] = <x><y/></x> in this) {gc()export *; }");
tryItOut("switch(new new Function()) { default: case <x/>: with((new <x/>(@foo, <y><z/></y>))){export __proto__; }break; with({}) <x><y/></x>;break; case 1: /*for..in*/for([__proto__, <><>eval(\";\",  \"\" )</></>] = each+=({}) in this.__defineGetter__(\"__proto__\", 'haha'.split)) throw  \"\" ; }");
tryItOut("if(({}).hasOwnProperty().propertyIsEnumerable(\"x::__proto__\")) {Othrow constructor; } else yield;");
tryItOut("throw StopIteration;");
tryItOut("with({}) { yield constructor.constructor setter= function  __count__ ()1e-81; } ");
tryItOut("if((yield  '' ).__count__) {export *; } else  if (new (__noSuchMethod__ = __count__ = <x><y/></x>)()) M:with({__iterator__: (new (*::*)(<y><z/></y>))}){break M; } else if(<><x><y/></x></>\n) {(prototype); } else throw <><x><y/></x></>;");
tryItOut("with({}) { return <x><y/></x>\f; } ");
tryItOut("if(<y><z/></y>) { if ((0/0[<><x><y/></x></>])) {return; }} else {const __noSuchMethod__ = ({a2:z2}); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [1].*) {yield <x/>;const prototype = <><x><y/></x></>, __count__; }");
tryItOut("{}");
tryItOut("L: {gc()<><x><y/></x></>; }");
tryItOut("switch(prop) { default: throw ({a1:1});break; case 1: case prop.__defineGetter__(\"__noSuchMethod__\", /a/gi): break; case @foo: if(*::*) export constructor; else  if (<x><y/></x>) ;break; case prototype.__proto__ getter= function(y) { yield y; *::*; yield y; }: if( '' ) {throw *; } else  if (<x><y/></x>) {let prop = .2;(<x/>); } else var __noSuchMethod__ =  \"\" , __proto__ = 1e4;break;  }");
tryItOut("({ __parent__: ({ constructor: prototype, __parent__: __parent__ }) })");
tryItOut("throw StopIteration;");
tryItOut("M:with({prop: (<x><y/></x>.propertyIsEnumerable(\"__iterator__\"))})gc()");
tryItOut("do {{( '' ); }return; } while(( /x/ ) && 0);");
tryItOut("/*infloop*/do ; while(#1#.unwatch(\"__noSuchMethod__\"));");
tryItOut("{return __proto__.(*::*); }");
tryItOut("for(let y in []);");
tryItOut("let(({ constructor: ({ prop: __parent__, __proto__: __proto__ }) }), __proto__) ((function(){yield (__parent__ = <x><y/></x>);})());");
tryItOut("with(this){gc()return; }");
tryItOut("/*infloop*/L:for(({ __parent__: prototype, (__iterator__): [, __iterator__.__proto__, , prop] }) = (( /* Comment */new <><x><y/></x></>(__iterator__, <x><y/></x>)).@foo); (this.__defineGetter__(\"__count__\", function(q) { return q; }) >>> eval(\"window\", @foo).unwatch(\"__proto__\")); constructor.((*::* for (__noSuchMethod__ in <><x><y/></x></>)) === (yield <x><y/></x> instanceof __iterator__ = <><x><y/></x></>)) .@*:: [false] setter= gc) {<><x><y/></x></>\n/*for..in*/for(const __parent__ in <x/>) <x><y/></x>; }");
tryItOut("switch(__count__\n ? __parent__ = false : (false)[<><x><y/></x></>]) { case __proto__ = yield (constructor.(@foo)) .@*:: <x><\ty/></x>(): /*infloop*/do { } while(function::__proto__ = <x><y/></x>);break; case <y><z/></y>.propertyIsEnumerable(\"prop\"): default: /*for..in*//* nogeckoex bug 349964 */M: for  each(let prop in __noSuchMethod__) ({});case ({false: <><x><y/></x></>.eval(true)}): constructor;case <x><y/></x>.@*: return; }");
tryItOut("const __noSuchMethod__;");
tryItOut("/*infloop*/while(([11,12,13,14].sort));");
tryItOut("");
tryItOut("switch(window) { case 0: break; /*for..in*/for(let __parent__.__parent__ in ((( '' .throw( \"\" )))(<><bbb xmlns=\" /x/ \"><!--yy--></bbb></>)))gc()break; default: break; case 7: break; case [11,12,13,14].sort: (constructor)\ncase __count__ = <x><y/></x>: yield (-1); }");
tryItOut("({ __iterator__: constructor, __count__: [] })if('fafafa'.replace(/a/g, function(q) { return q; }).propertyIsEnumerable(\"__noSuchMethod__\").__count__ = (new ({}).hasOwnProperty(<x><y/></x>, constructor))) { if \f(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {gc() }} else {const __proto__ = <x><y/></x>; }");
tryItOut("/*infloop*/L:for(const prop; __iterator__ = -1.propertyIsEnumerable(\"prototype\"); (({ get prop(prototype) { __count__ = <x/>, __noSuchMethod__ = null; } , __proto__: * }))) 'haha'.split");
tryItOut("while((constructor) && 0)var prototype = <x><y/></x>;throw ;");
tryItOut("(new Function).call");
tryItOut("{yield  \"\" \n/*for..in*/for(const __parent__ in ((Math.sin)(*::*)))export *; }");
tryItOut("try { let([, __count__, __iterator__, ], prop) { this.zzz.zzz; } finally { this.zzz.zzz; } ");
tryItOut("/*infloop*/for(var __proto__; (new ({}).__lookupGetter__(<x><y/></x>, <y><z/></y>) !== (true.eval(<x/>))); __iterator__ = null) continue L;");
tryItOut("while((*) && 0)with({__proto__:  \"\" })constructor;");
tryItOut("/*for..in*/for(var __iterator__.__proto__ in (([,,] /= this)(({prop getter: gc, constructor: 0x99 }) in (prototype.__lookupGetter__(\"__proto__\")))))export __count__;");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = <x><y/></x> in <x/>) yield;");
tryItOut("/*infloop*/M:for(const [[], ({ __parent__: [, ({ __proto__: function::__proto__ }), ({ __parent__: prototype, __parent__: __proto__ })], __iterator__: [prototype, ] }), , ] = this; <>[11,12,13,14].map</>; <x><y/></x> % <><x><y/></x></>) /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 1e+81) {window; }");
tryItOut("return;");
tryItOut("/*infloop*/while(this){yield;export *; }");
tryItOut("/*for..in*/M:for(const ((function::__count__)) in ((function(y) { yield y; ;; yield y; })((#1=[<x><y/></x>.yoyo(this)])))){throw 1e-81;[[1]]; }");
tryItOut("if(__proto__) {var , __noSuchMethod__; } const prop;");
tryItOut("switch(export *) { case (new ((Error(-3/0, <x><y/></x>))[(__proto__ = 1e+81)])(<x><y/></x>\t\n, <><x><y/></x></>.prop = this)): export prototype;break; default: <x/>break;  }");
tryItOut("switch(({prototype: (constructor)[window], prop: <y><z/></y> }).eval((true.hasOwnProperty(\"__proto__\")))) { default: const prototypebreak; case (({__iterator__:  /x/  /= 3/0 })): break; case 5: {} }");
tryItOut("M:switch('fafafa'.replace(/a/g, eval)) { default: /*for..in*//* nogeckoex bug 349964 */yield *::*;break; yield;break; case (eval(\"<><x><y/></x></>\", <><x><y/></x></>)): ;break; case 8: break;  }");
tryItOut("if(prop = __noSuchMethod__) {export prop;export prototype; } else let constructor = ({a2:z2});");
tryItOut("L:if(#3={a:#3#}) yield <x><y/></x>;");
tryItOut("with({}) __noSuchMethod__ = __noSuchMethod__;");
tryItOut("const prop =  '' ; const prototype;");
tryItOut("prop = prototype;");
tryItOut("L: {let constructor = P, prototype; }");
tryItOut("/*infloop*/for(prop =  \"\" .@foo; -0; prototype =  /x/ ) return <y><z/></y>;");
tryItOut("/*for..in*/for(prototype in <y><z/></y>) if(window) (new Function(\"let __count__, __noSuchMethod__;\")) else  if (<><x><y/></x></>) {gc() } else {gc() }");
tryItOut("/*for..in*/for(const __iterator__ = (null.@* >> (__iterator__.(new Error()))) in (constructor.__count__ setter= this) & \n({__iterator__:  /x/g })) yield;");
tryItOut("/*infloop*/L:do /*for..in*/for(const constructor in (('haha'.split)((__count__ = false.*)))){gc(){} } while((new (Function)(<>export constructor;</>, ({a2:z2})))--\n);");
tryItOut("L: L:with(<><x><y/></x></>){{} }");
tryItOut("let(prop = 3.141592653589793, prototype = <y><z/></y>) ((function(){continue L;})()); const __iterator__;");
tryItOut("/*infloop*/do /*for..in*/for(var __noSuchMethod__ = \n([this.__defineSetter__(\"prototype\", <y><z/></y>)].filter(Math.sin)) in (*::*)[window]) break ; while([11,12,13,14].filter);");
tryItOut("/*infloop*/for([15,16,17,18].map(__proto__.__count__ = window, ([false].map((1 for (x in []))))); __noSuchMethod__ = __iterator__; (__proto__.prototype = new RegExp() * (new (<x><y/></x>)()))) [,]; const __proto__;");
tryItOut("yield 033;");
tryItOut("with((@foo)[__parent__])function  prop ()<><x><y/></x> \n /x/  </");
tryItOut("yield new 3.141592653589793();");
tryItOut("for(let y in [5,6,7,8]) yield [<y><z/></y>];");
tryItOut("/*infloop*/for(const function::prop; \n(@foo ? <x/> : <><x><\ty/></x></>).__iterator__; (uneval(({__iterator__: true})))) {gc()const __proto__ = ({a2:z2}); }");
tryItOut("__proto__");
tryItOut("/*infloop*/for(({a1:1}); <y><z/></y>; <><x><y/></x></>) ");
tryItOut("if((__proto__)+=(*.__defineSetter__(\"0x99\", function (__noSuchMethod__, prototype) { {export *; } } ))) { if (4. - null instanceof prop.__parent__) /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) {yield;window }} else {yield [,];\n[1,2,3,4].map\n }");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("while((((<><x><y/></x></> :: <x><y/></x>) += ([__noSuchMethod__].filter(window)))) && 0){throw window;{} }");
tryItOut("function  __proto__ (prototype)<><x><y/></x></>let (__noSuchMethod__ = <x><y/></x>, prototype) { ; }");
tryItOut("return window.propertyIsEnumerable(\"__count__\");");
tryItOut("yield <><x><y/></x></>;");
tryItOut(" '' ");
tryItOut("yield false;");
tryItOut("do {/*for..in*/for(const [constructor, prop] = (__noSuchMethod__ = * ^= [11,12,13,14].some) in <x/>) {/*infloop*/while(this.__defineSetter__(\"__count__\", Function))let __noSuchMethod__ = undefined;*::*;\nconst prop = true, null;\n } } while((new [1,2,3,4].slice(new (function  __parent__ (prop)4.)((function ([y]) { })(), prototype))) && 0);");
tryItOut("M:with(constructor = <x><y/></x>);");
tryItOut("with((this.__defineSetter__(\"__parent__\", <x><y/></x>)(1e+81, <x/>)))M:switch(#2=[*::*].*) { default: break; case __proto__ = prototype: <x><y/></x>;break; export prop;break; let __proto__break; break; case 0: return [[]]; }");
tryItOut("__count__");
tryItOut("(__count__).watch\n");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __proto__] = <x/>() in <y><z/></y>) {with(this)gc() }");
tryItOut("M:do yield; while(([11,12,13,14].some) && 0);");
tryItOut("/*infloop*/do if(new ((new Function(\"break ;\")))(prototype, @foo)) {return; }\t else  if ((1.3 .@*:: window)) {;{} } else __noSuchMethod__; while( /x/ );");
tryItOut("/*for..in*/for(__proto__ in *::*) {;yield <x><y/></x>; }");
tryItOut("/*infloop*/do return ({a1:1}); while(true); const __iterator__;");
tryItOut("if((new function  __iterator__ (__iterator__ = prop, __count__) { return true } ())) return #1=[#1#]; else {(<><x><y/></x></>); }");
tryItOut("/*for..in*/for/*\n*/(let __count__ = ( \"\"  ? function::__parent__ : <x><y/></x> if ((__count__)(1.2e3, <><x><y/></x></>))) in this) {}");
tryItOut("/*infloop*/while(((uneval( /x/g ))).prop)with(* :: 3/0){let(__parent__) { constructor = *::*; }");
tryItOut("/*infloop*/for(let [] = .2.__lookupSetter__(\"__parent__\"); yield new ((new Function(\"const __noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__;\")))(prop.(<y><z/></y>)); ((function () { yield @foo } ).call)()) {{} }");
tryItOut("L: {with({__count__: *::*}){gc() }\t<x><y/></x> }");
tryItOut("/*infloop*/for(var ({ x::__noSuchMethod__: prototype, prop: __parent__ }) = (-0) ||  /x/ ; (uneval(__proto__)); ((p={}, (p.z = 4..__lookupSetter__(\"__parent__\"))()))) {continue M;export *; }");
tryItOut("yield this.zzz.zzz;");
tryItOut("var __noSuchMethod__, prop;");
tryItOut("/*for..in*/for(const [__iterator__, __count__] = 3 in ([11,12,13,14].sort)) {L:with(<x><y/></x>){\f( '' ); } }");
tryItOut("continue L;/*for..in*/for(let prototype = * in 1e4) {this;yield; }");
