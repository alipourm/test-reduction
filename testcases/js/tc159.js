tryItOut("M:if((-1) != __iterator__) { if ((__iterator__ = <y><z/></y>)) /*\n*/{export *; }} else {var __noSuchMethod__, prototype = <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(const [__iterator__, __count__] = (__noSuchMethod__ = 3/0).__noSuchMethod__ in <y><z/></y> <= <><x><y/></x></>) {/*for..in*/for(let __noSuchMethod__ = {} in *) ; }");
tryItOut("/*for..in*/L:for(var prototype in (((/a/gi).call)((<x/>.__lookupGetter__(\"*::*\")\t)))){(window);yield; }");
tryItOut("if(5.0000000000000000000000) if(<><x><y/></x></> < <><x><y/></x></>) { if ([[]] = function ([y]) { }) gc()}{return <><x><y/></x></>; } else /*for..in*/for(var [__parent__, constructor] = #1=[#1#] in <><x><y/></x></>) {__count____proto__ }\n\nexport prop;");
tryItOut("throw <><x><y/></x></>;\nyield;\n\nconst  /x/ ;");
tryItOut("{G\fexport __count__; }");
tryItOut("/*infloop*/for(__parent__; delete function ([y]) { }; * >>= <x/>.*) /*infloop*/for(((this.__defineSetter__(\"__iterator__\", new Function)))(__noSuchMethod__ = 0x99); __parent__ = 033.hasOwnProperty(\"__count__\"); new Error([,,z1])) with((eval(\"yield <y><z/></y>\",  /x/g )))(0.1).watch");
tryItOut("L: {{}; }");
tryItOut("/*infloop*/for(var __proto__; window; <><x><y/></x></>) {return <><x><y/></x></>; }");
tryItOut("for(let y in [5,6,7,8]) ;");
tryItOut("{; }");
tryItOut("/*for..in*/for(var __parent__ = Object(prop, __parent__ = * if (__iterator__), (constructor = window)) in ({prototype: window})) if(!prop >>= *::*) throw  /x/g ;");
tryItOut("let(({ __proto__: ({ __count__: constructor, __proto__: prop }), function::prop: ({ __parent__: __iterator__, constructor: prop }) }), constructor = ([z1,,].propertyIsEnumerable(\"function::__proto__\"))) { let(__parent__) ((function(){with({}) export *;})());");
tryItOut("return;");
tryItOut("/*infloop*/while(new Date(prop))L:switch((__proto__ & this)) { default: yield;break;  }");
tryItOut("/*for..in*/for(let ((*::*.__lookupGetter__(\"__parent__\")))(-3/0 &= null) in ((function(y) { yield y; do return; while((@foo) && 0);; yield y; })(1e81))){throw <x><y/></x> ? window : <y><z/></y>; }");
tryItOut("switch(#1#.isPrototypeOf(#1=[#1#])) { case 0: {}break; const prop = null, __count__;case true / <y><z/></y> ? void this : \n /x/g :  }");
tryItOut("({ constructor: ({ __count__: __proto__, __parent__: constructor }), [, constructor, __noSuchMethod__, prop, ]: [] }) = prop = __proto__;");
tryItOut("if(<y><z/></y>) export __parent__;");
tryItOut("/*for..in*/L:for(const [__parent__, constructor] = new function  __iterator__ (__noSuchMethod__, []) \"\" (((<><x><y/></x></> ? false : this) !== undefined @ (Boolean(033, prop) for (__parent__ in <x><y/></x>))), \n(this.prop)) in *::*) {\nL: {export *; }/*infloop*/M:for(constructor;  /x/ ; [__noSuchMethod__ = __count__]) {{}yield false; } }");
tryItOut("let (prototype = window) { {} } const constructor;");
tryItOut("L: {}");
tryItOut("/*for..in*/for(\fvar __noSuchMethod__ = function(id) { return id } in <x><y/></x>) {{} }");
tryItOut("return <y><z/></y>;\n__iterator__, __iterator__;\n");
tryItOut("throw *::*;\nyyy\n\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\n__count__((new (gc)(<x/>.prop))) in (__parent__ = prop).isPrototypeOf(<><x><y/></x></>.@*)) {{M:if(({__count__: @foo})((uneval(*)))) { if (getter) var __noSuchMethod__, __parent__;} else const __noSuchMethod__; } }");
tryItOut("M:while((this.prototype) && 0)export *;\n;\n");
tryItOut("yield <x><y/></x>;\nreturn false;\n");
tryItOut("/*infloop*/L:while(<y><z/></y>){let __noSuchMethod__ = false;export *; }");
tryItOut("if(__count__(({ constructor: [, __noSuchMethod__, , __count__], constructor: __parent__ }) = [[1]].__defineGetter__(\"prop\", undefined) if (true)) = (({constructor: __iterator__ = __iterator__}))[undefined.unwatch(\"__iterator__\")]) if(<x><y/></x>.(1e81)) { if (this.zzz.zzz) {(this); } else {{}return; }} else  if (throw 'fafafa'.replace(/a/g, (((/a/gi).call([,,z1], ))).__defineSetter__)) {let (__count__ = this) { yield <><x><y/></x></>; }gc() }");
tryItOut("/*infloop*/do switch(<x><y/></x>) { case *::*:  } while(null >>> function(id) { return id }.watch(\"__noSuchMethod__\",  /x/ ) ^ (typeof <><x><y/></x></>));");
tryItOut("<{__count__}><ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd></{__count__}>");
tryItOut("/*infloop*/L:while('fafafa'.replace(/a/g, ({}).__lookupGetter__)){if(<></>) {const constructor = [,,], __proto__ = -3/0;3; } else  if (1e-81) yield *::*; }");
tryItOut("/*for..in*/for(var __proto__: __noSuchMethod__ = <x/> in ((function(y) { yield y; ;; yield y; })(<><x><y/></x></>))){export __iterator__; }");
tryItOut("return;\nbreak ; const __noSuchMethod__;\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for(var constructor = (eval(\"let __iterator__ = [1], __parent__; const constructor;\", (*::*.throw(null)))); -3/0; ([,]['__iterator__']+=[1e81].some(window) for (__noSuchMethod__ in ([undefined].filter(-1) ? __count__ = [1] : ([window]))) if (<x/>\n))) ;");
tryItOut("{function(y) { yield y; ;; yield y; }export *; }");
tryItOut("/*for..in*/M:for(var [__count__, prototype] = ~<y><z/></y>.eval( '' ) in  '' ;) {with(-3/0.__defineSetter__(\"__iterator__\", __count__));/*infloop*/for(var function::constructor = yield;; #1=[#1#].__defineGetter__(\"__iterator__\", <x><y/></x>);  '' ()) {export *;export prototype; } }");
tryItOut("M:switch((let) = <y><z/></y> .@ <y><z/></y>.yoyo(constructor.x::constructor setter= Function >>= <><x><y/></x></>)) { case __noSuchMethod__: default: export *;yield;break; /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor.prototype in  '' ) return <><x><y/></x></>;break; case <></>: break;  }");
tryItOut("{(window); }");
tryItOut("{; }");
tryItOut("/*for..in*/for(const __count__ = !(yield = ({ __parent__: prop, function::__noSuchMethod__: prop })\n) in window) {export __count__;break L; }");
tryItOut("<!--yy-->");
tryItOut("L:if(\n<><x><y/></x></>) {const prop, constructor = *::*; } else export *");
tryItOut("with({constructor: (__iterator__.__lookupSetter__(\"__parent__\"))})export *;");
tryItOut("if(((this.__defineGetter__(\"__parent__\", 4.)).hasOwnProperty(\"prop\"))) {{} } else  if (new (function (function::yield) { const set, __noSuchMethod__; } )(new *)) {throw <x><y/></x>; }");
tryItOut("/*for..in*/for((p={}, (p.z = false)())['__count__'\t] in ((( '' .isPrototypeOf([z1,,])))((uneval( ''  *= <x><y/></x>)))))gc()");
tryItOut("return __count__.propertyIsEnumerable(\"__count__\");");
tryItOut("window;");
tryItOut("do {switch(yield undefined) { default: throw prop;yield;break; return true;break; case  /x/ : gc()break; case (arguments.constructor = *::*): break;  } } while((__parent__) && 0);");
tryItOut("gc()");
tryItOut("/*infloop*/for(const __parent__;  '' ; __noSuchMethod__ = (#2=({__proto__: __parent__}))) {{(undefined); }/*for..in*/for(let [__count__, prop] = [15,16,17,18].map(this, *)-- in [11,12,13,14].sort) throw  /x/ ; }");
tryItOut("if(this.zzz.zzz) export constructor; else  if (@foo.propertyIsEnumerable(\"prop\")) (0/0).__defineSetter__ else {yield window; }");
tryItOut(";");
tryItOut("with(undefined){return;; }");
tryItOut("const __count__\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in *) const __proto__ = @foo;");
tryItOut("if((constructor.__proto__ = prototype = <><x><y/></x></>)) if(null) const constructor; else return; else if(1.3) {const prop = prop, constructor = <x><y/></x>;yield <><x><y/></x></>; } else  if ((#1=[#1#] ^= prototype)) /*infloop*/do throw [1,,]; while(false);");
tryItOut("const <x/>;");
tryItOut("/*infloop*/do {L: L:if(false.@foo) yield; else  if ((new (@foo)(0))) return <y><z/></y>;/*infloop*/do {export *;yield <x/>; } while(( ''  .@ this)); } while(0x99);");
tryItOut("for(let y in [])\n/*for..in*/M:for(const __parent__ in ((({}).__lookupGetter__)(eval(\"__noSuchMethod__: __count__\", this)))){break L;gc() }");
tryItOut("__count__");
tryItOut("with({}) ({}).__lookupGetter__yield  \"\" ;");
tryItOut("with({prop: (({}).__lookupGetter__).hasOwnProperty(\"__iterator__\")})if(<><x><y/></x></>) {break ; } else  if (window) { } else gc()");
tryItOut("/*infloop*/for(constructor = (p={}, (p.z =  /x/g )()) >> window; __proto__.__parent__ = (let (__proto__, __iterator__) 1.3); __iterator__ = constructor) {switch((this.zzz.zzz)) { case 5: throw eval(\"constructor\", prop);(<y><z/></y>); } }");
tryItOut("constructor = __parent__;");
tryItOut("prop");
tryItOut("if(prototype = 1e81.prototype.__proto__ = (*::*.__lookupGetter__(\"__parent__\"))) export *; else  if ((([,].prototype))) with({constructor: constructor = 1e+81}){{} } else {yield;function ([y]) { }.propertyIsEnumerable(\"__proto__\"); }");
tryItOut("{if((yield __proto__.prototype)) { if (#0=({__iterator__: [,,z1]})) {export __proto__; } else false} }");
tryItOut("__iterator__; const prop;");
tryItOut("/*infloop*/for(prop = this; prototype.valueOf(\"number\"); with({}) with({}) { *::* } ) throw false;;");
tryItOut("/*infloop*/while(typeof __noSuchMethod__){return undefined\f; }");
tryItOut("{throw  /x/g  } const __count__;");
tryItOut("/*for..in*/for(let (__iterator__) in {}) return prop setter: arguments;");
tryItOut("/*infloop*/M:for(const ({ __parent__: [({ prototype: __parent__, prop: __iterator__ }), __parent__, ({ __noSuchMethod__: __noSuchMethod__ })] }) = (let (__count__ = <x><y/></x>, prototype = constructor) <><x><y/></x></>)--; 'fafafa'.replace(/a/g, true).propertyIsEnumerable(\"__noSuchMethod__\"); (undefined ==  /x/ )) {yield #3={a:#3#}; }");
tryItOut("{export *; }");
tryItOut("/*for..in*/for(prop in ((new Function)(<><x><y/></x></>)))throw this;");
tryItOut("gc()\n");
tryItOut("/*for..in*/M:for(var (__count__) in ((({}).__lookupGetter__)()))(<x><y/></x>);");
tryItOut("/*infloop*/for(const __noSuchMethod__; <y><z/></y>.__lookupSetter__(\"prototype\"); <x><y/></x> == *::*) {__noSuchMethod__, __noSuchMethod__ = __noSuchMethod__;null; } const constructor;");
tryItOut("gc() const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (constructor) in 1.3) yield\nif(false) {throw ({}); } else  if (*::*) yield __iterator__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in -(eval(\"yield [,,z1];\", window))) /*for..in*/for(const constructor = * << [] in new (function  prop () { (*); } )(__parent__)) export prop;");
tryItOut("if(( /x/g .unwatch(\"__proto__\")).__lookupGetter__(\"__parent__\")) { if (<><></></>) {L:if(__count__.unwatch(\"constructor\")) { if (({a1:1}).__lookupSetter__(\"__count__\")) {const <x><y/></x>;/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in \t<><x><y/></x></>) {(1 for (x in [])) } } else {return ({});yield; }} }} else {L:with(<x/>){{\u2029 }gc() } }");
tryItOut("/*for..in*/for(var __proto__ = this in <x/>.throw(<x><y/></x>)) if(this) break ; else  if (this) throw [z1]; else {__iterator__; }");
tryItOut("let (x::prototype -3/0 ) { const prototype =  \"\" ; }");
tryItOut("return; const function::constructor;");
tryItOut("if('fafafa'.replace(/a/g, (Function).apply)) {M:if( /x/ ) ; else  if (*) {__proto__; } else return <y><z/></y>; } else {yield  '' ; }");
tryItOut("do export constructor; while((1.3) && 0);");
tryItOut("return <x><y/></x>;\n /x/g ;\n");
tryItOut("gc()do {(__proto__).__defineSetter__gc() } while(((({__noSuchMethod__: __noSuchMethod__ }))) && 0);");
tryItOut("/*for..in*/for(constructor = [] in __parent__) continue L;");
tryItOut("if(((this.__defineGetter__(\"__count__\", [1,2,3,4].map))(this, *::*)) %= eval(\"return;\", null)) {export *;; } else  if ((\nundefined)) {return;L: {} }");
tryItOut("/*infloop*/for(((p={}, (p.z = [ /x/g ].some(([,]).call))())); (uneval(('haha'.split).call(window, ))); \tthis.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; M:while((<x/>) && 0){throw window; }; yield y; })) {yield;{} }");
tryItOut("L:do <><x><y/></x></>; while((*::*) && 0);");
tryItOut("if((yield true.watch(\"prop\", ({}).__lookupGetter__))++) while((*) && 0)__count__; else return <x/>;");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("/*for..in*/for(prototype = [15,16,17,18].sort(Math.pow,  /x/ ) in (prop = *)((p={}, (p.z = [<><x><y/></x></>].some(function  prop (__noSuchMethod__, prop) { let __proto__ = <x><y/></x>, prop = -3/0; } ))()), this.__defineGetter__(\"prototype\", function  __parent__ \t() { return  ''  } )[(<x/>)[<y><z/></y>]])) {{};{let prop = ({a2:z2}), prototype;yield; } }");
tryItOut("{ }\n");
tryItOut("/*infloop*/do {{yield;; }/*infloop*/while(([].watch(\"constructor\", (new Function(\"var constructor;\")))) > false || 0.1){__iterator__ } } while(\neval(\"<x><y/></x>.isPrototypeOf(<y><z/></y>)\", (<><x><y/></x></> || <x/>)[__parent__ = #1=[#1#]]));");
tryItOut("if(<x><y/></x> .. <x/>) const prototype =  '' ; else  if (__iterator__.__proto__) yield __count__; else {}");
tryItOut("this.zzz.zzz;");
tryItOut("const __count__");
tryItOut("{if( /x/ ) {yield  '' ;gc() } else  if (this) break L; else ;let __noSuchMethod__ = 1.3; }");
tryItOut("L: yield\n");
tryItOut("/*infloop*/for(<x><y/></x>; true; function ([y]) { })  '' , constructor = <><x><y/></x></>;");
tryItOut("L: yield window;");
tryItOut("__iterator__, constructor;");
tryItOut("/*for..in*/for(null[<x/>]['__count__'] in 3.141592653589793) yield <><x><y/></x></>;");
tryItOut("/*infloop*/for(const ({ __parent__: prototype }) = 3.141592653589793.__parent__; (( \"\" )(undefined)); (yield <><x><y/></x></>)) export __count__;");
tryItOut("if((([undefined.__count__]).@foo)) {return; } else \t if (@foo) /*infloop*/for([, prop, function::prop] = <x><y/></x> = <y><z/></y>; prototype.propertyIsEnumerable(\"constructor\"); (this.zzz.zzz)) {<x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in __iterator__ = (function::prop = <>\t<x><y/></x></>)\n.valueOf(\"number\")) switch((yield  '' )) { case <><x><y/></x></>: break; continue M; }");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = <>#0=[(<x/> if (1.2e3))]</>.(-constructor = <><x><y/></x>\t</> || <><>window</></>) in (prop.__count__ = (p={}, (p.z = <x/>)()) = this.__defineGetter__(\"prototype\", function(y) { yield y; ; yield y; }).constructor = ({__count__ getter: ({}).hasOwnProperty, __parent__: * }))) /*for..in*/for(const __proto__((__parent__-=window)) in ((function () { yield undefined %= <y><z/></y> } )(this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; export \f__proto__;; yield y; })))){}");
tryItOut("M:if(this.__defineSetter__(\"__count__\", Math.sin)) {if(__iterator__.__count__ = null) {return <y><z/></y>; } else  if ((__count__ = x::prop)) {} } else  if (yield *::*.__defineGetter__(\"prototype\", <y><z/></y>)) {/*infloop*/while(constructor.__iterator__)(undefined); }");
tryItOut("while(((({__parent__: \t<><x><y/></x></> }).yoyo(constructor = [[]]))) && 0)return;");
tryItOut("M:if(<!--yy-->) export __noSuchMethod__; else {export *; }");
tryItOut("{} const constructor;");
tryItOut("let(__iterator__, __noSuchMethod__) ((function(){with({}) __proto__ = prop;})());");
tryItOut("/*for..in*/for(__proto__ = (__iterator__ = prop = __parent__) in __count__|=[1]) {export __proto__\t\n{} }");
tryItOut("with({x::__noSuchMethod__:  '' })var prop, __noSuchMethod__\n/*for..in*/M:for(let __noSuchMethod__ = <y><z/></y> in <x/>)  '' ;");
tryItOut("/*for..in*/for(var __iterator__ in null) var __count__ = window, constructor = <x><y/></x>;\nreturn;\n");
tryItOut("/*for..in*/for(const __parent__ in (([1,2,3,4].map)(<y><z/></y>.__defineSetter__(\"__count__\", <><x><y/></x\t></>).valueOf(\"number\"))))/*for..in*/L:for(__parent__ in <><x><y/></x></>) {break M; }");
tryItOut("if(__iterator__.constructor = (<x><y/></x>.yoyo(<x><y/></x>.hasOwnProperty(\"__parent__\")) for each (prototype in [z1]) if (false))) return <x/>; else {( /x/ ).watch\n }\n");
tryItOut("if(eval(\"window\", <><x><y/></x></>)) let prototype, __iterator__ = <y><z/></y>;");
tryItOut("let __parent__;");
tryItOut("do __parent__; while((null) && 0);");
tryItOut("{}\n");
tryItOut("if(@foo) { if ((<x/> == (-1)\n)) /*for..in*/M:for(__noSuchMethod__ in <x><y/></x>) } else {return;var __proto__ = true; }");
tryItOut("{/*for..in*/for(const __proto__ in <><x><y/></x></>.*) ; }");
tryItOut("if((@foo[({a1:1})].hasOwnProperty(\"prop\"))) switch(__iterator__. for each (__proto__ in ((function () { return [[1]] } ).call(false, false))) if (<><x><y/></x></>)) { case this.let: export __iterator__;break; break; <><x><y/></x></>;([1,2,3,4].map).call } else  if (<y><z/></y> % (<{__iterator__}><!--yy--></{__iterator__}>.(<><x><y/></x></>))) M:if((({__iterator__: <><x><y/></x></>, __noSuchMethod__: prototype }))) {__iterator__;throw #3={a:#3#}; } else  if (()) __count__, __parent__ = <><x><y/></x></>; else (<><x><y/></x></>);");
tryItOut("if(true) {export *;yield <x><y/></x>; }");
tryItOut("switch(<x/>) { default: break;  }");
tryItOut("if(this) { if (<x><y/></x>) ; else {continue ; }}");
tryItOut("/*for..in*/for(var [__iterator__, __count__] = (this.__defineSetter__(\"__count__\", function(y) { yield y; prototype;; yield y; })) in false + prototype) ;");
tryItOut("for(let y in []);");
tryItOut("return null\n'\n");
tryItOut("M:if(({ constructor: __noSuchMethod__ }) = __noSuchMethod__ = <><x><y/></x></>) \n else  if (__count__ = __iterator__.__parent__ = __iterator__.prop = <x><y/></x>) {; }");
tryItOut("/*for..in*/M:for(const [@foo, prop] = <x/> ^= .2[{(<x><y/></x>);break ; }] in ([<x><y/></x>].filter(new Function))) M:if(__noSuchMethod__) { if (<><x><y/></x></>) } else ");
tryItOut("if(<><x><y/></x></> *= #3={a:#3#}) return [,,z1];");
tryItOut("return ([11,12,13,14].filter);");
tryItOut("/*infloop*/for(!__proto__.__count__ = ; (uneval(([<x/>]))) ? (undefined).watch() :  '' ; yield (window.throw(__proto__.constructor = *.eval([[1]])))) {((1e-81.prop = undefined)); }");
tryItOut("L:with({prop: window}){__iterator__; }");
tryItOut("M:if(this) {let __iterator__ = window, constructor; } else  if (<><x><y/></x></>) {const __iterator__;yield; } else {__count__, __proto__ = -0; }");
tryItOut("do ; while((({ __parent__: constructor }) = (({__noSuchMethod__: <x/>}))) && 0);");
tryItOut("/*for..in*/for(var __count__ in ((let (constructor) <><x><y/>\t</x></>).watch(\"__noSuchMethod__\", [1,2,3,4].slice))) return ({a1:1});");
tryItOut("{var __count__ = undefined; }");
tryItOut("{{} }");
tryItOut("do /*infloop*/for(var ({ __proto__: prototype, __parent__: __proto__ }) = <x><y/></x> ^ null; null.hasOwnProperty(\"__proto__\"); this) {(({a2:z2})); } while((prototype.__noSuchMethod__ setter= Function) && 0);");
tryItOut("__proto__ = __count__;");
tryItOut("export *;");
tryItOut("/*infloop*/for(const __parent__; (yield <x><y/></x>); <><x><y/></x></>\n) const __iterator__, constructor;");
tryItOut("if((uneval(true))) throw window;");
tryItOut("/*infloop*/M:for(this; __parent__; [1,,]) return @foo");
tryItOut("/*infloop*/\fM:do {yield null; } while((<x/> === undefined)); const prototype;");
tryItOut("continue ;");
tryItOut("/*infloop*/L:for(const __count__ = <y><z/></y>; @foo; <x/>) {var __count__ =  /x/g ;return; }");
tryItOut("yield ((uneval(this))).__parent__ =  /x/g ();");
tryItOut("throw __count__;");
tryItOut("with( /x/g ){/*infloop*/for(#1#; null; <x/>) {__noSuchMethod__, __parent__;yield <x/>; }\n }");
tryItOut("/*infloop*/for(prototype = <><x><y/></x></>; null; (3/0)) {(<x><y///h\n></x>); }");
tryItOut("break L;\nreturn window;\n");
tryItOut("{(__count__);[1,2,3,4].map }");
tryItOut("/*for..in*/for(var [__count__, __proto__] = eval(\"L: const __parent__, __iterator__ = __proto__;\", ({}).hasOwnProperty(((uneval(<><x><y/></x></>)))++, ([1].__lookupSetter__(\"__iterator__\")))) in (-(({prototype: <y><z/></y>, prototype: <x><y/></x> })) *=  '' )) {/*infloop*/for(const __parent__; 4.; (uneval((({prototype: ({a2:z2})})) |= <x><y/></x>()))) /*infloop*/for(var __iterator__.__parent__; null.unwatch(\"__iterator__\"); window) throw  /x/g ; }");
tryItOut("do {{}var __count__ = <x/>, __iterator__; } while((<><x><y/></x></>\t) && 0);");
tryItOut("L:do export constructor; while((([<x><y/></x>].filter(function (__iterator__) { yield <><x><y/></x></> } ) %= [15,16,17,18].some(__noSuchMethod__\r, (({}).hasOwnProperty())))) && 0);");
tryItOut("/*for..in*/for(const prototype =  in <><x><y/></x></>.*) {if(({}).__lookupGetter__) {gc()M:do ; while((*::*) && 0); }/*for..in*/for([__parent__, prototype] = this in window) __count__ = arguments; }");
tryItOut("with({}) { prototype([[[,]]] > (-0).valueOf(\"number\")) = __noSuchMethod__; } ");
tryItOut("([11,12,13,14].sort)(<><x></*\n*/y/></x></> !== <y><z/></y>) = prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in __noSuchMethod__.constructor) return window;");
tryItOut("do yield <y><z/></y>; while((prop+=<y><z/></y> & constructor.__iterator__) && 0);");
tryItOut("while((( /x/g  ? 1e-81 : -3/0)) && 0){gc()let __noSuchMethod__ = null, __count__; }");
tryItOut("/*infloop*/for(((uneval((({ get __noSuchMethod__ __parent__ (__proto__, __noSuchMethod__) { yield <x/> } , __proto__: <><x><y/></x></> }))))); ({ __iterator__: ({ __count__: prototype, __proto__: ({ prototype: __proto__, __count__: [] }) }) }) = window; (prototype = @foo++ | #0=({function::prototype: [1]}))) /*infloop*/do {falsereturn; } while(__noSuchMethod__.constructor);");
tryItOut("for(let y in []);");
tryItOut("with({}) { __noSuchMethod__ = __proto__; } ");
tryItOut("yield ((#3={a:#3#}--)).call((__parent__ = 3/0).__count__, ((yield <x><y/></x>.__lookupGetter__(\"__iterator__\"))));");
tryItOut("let(prop, prop) { throw __noSuchMethod__ = __noSuchMethod__;");
tryItOut("if(<x><y/></x>) gc() else  if (*::*) {\t<y><z/></y>; } else let x::prop = function ([y]) { }, __noSuchMethod__ = #1#;");
tryItOut("export __proto__;");
tryItOut("with({__noSuchMethod__:  \"\" })return;");
tryItOut("{gc()throw *::*; }");
tryItOut("/*for..in*/for(__proto__ in ((+(yield @foo[window].propertyIsEnumerable(\"constructor\")))((yield <y><z/></y>).unwatch(\"__count__\").constructor))){/*for..in*/for(let __iterator__ in (((((@foo)[<x><y/></x>].valueOf(\"number\"))).watch)(prototype.__defineSetter__(\"__noSuchMethod__\", new Function))))__noSuchMethod__; }");
tryItOut("{(<x/>);0.1; }");
tryItOut("/*infloop*/L:do prop while(window.eval(constructor)\t);");
tryItOut("{{{}return this; }\n(<x><y\t/></x>);\n }");
tryItOut("/*infloop*/M:for(3.141592653589793.@foo; [11,12,13,14].sort; 1.2e3.isPrototypeOf([z1,,])) {continue ; }");
tryItOut("let constructor, prop;");
tryItOut("return;");
tryItOut("(0.1)\n");
tryItOut("let (__noSuchMethod__) { /*for..in*/M:for(var __count__ in ((function (x::prop, prop) { yield this } )(<y><z/></y>))){(undefined);continue ; } }");
tryItOut("{new Function }");
tryItOut("return\n");
tryItOut("/*infloop*/while(try { return; } catch(prop if (function(){prop = __noSuchMethod__;/*\n*/})()) { for(let y in []); } catch(__iterator__ if @foo.hasOwnProperty(\"__parent__\")) { try { prop = __noSuchMethod__, constructor = [,,]; } finally//h\n { return *::*; }  } catch(__parent__ if (void __noSuchMethod__).__lookupSetter__(\"__parent__\")) { \fthis.zzz.zzz; } catch(({ __noSuchMethod__: ({ __parent__: ({ __count__: [], __noSuchMethod__: prop }) }), __proto__: ({ __noSuchMethod__: prop.__parent__\t, __iterator__: [({ constructor: prop }), [, prototype, prop], __parent__, ] }) }) if (function(){with({}) { throw StopIteration; } })()) { throw StopIteration; } catch(__parent__) { with({}) { let([] = <x><y/></x>, prop = window) { throw __parent__; }  } ){L:switch(*::* + <><x><y/></x></>) { default: export prototype;break;  } }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, constructor] =  { ; }  in window) {let __parent__; }\n");
tryItOut("{__count__ = constructor/*for..in*/M:for(prototype in __noSuchMethod__) {yield null; } }");
tryItOut("throw constructor;");
tryItOut("yield ({a1:1});");
tryItOut("/*infloop*/for(let __noSuchMethod__; [(++*)].sort(function  __parent__ (__parent__) { return window } ); delete|= /x/  ?  \"\" .__defineSetter__(\"prototype\", Math.pow) : ((new Function(\"{}\"))).call((function ([y]) { })(), <><x><y/></x></>, function ([y]) { })) {[z1,,]; }");
tryItOut("export *;");
tryItOut("throw constructor;");
tryItOut("with({__parent__: prototype.(<><x><y/></x></>)})while((arguments) && 0){yield;; }");
