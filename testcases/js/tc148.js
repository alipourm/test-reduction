tryItOut("constructor = false;");
tryItOut("/*for..in*/for(const __iterator__ = (#0=-0)[(Math.sin)( /x/g )] in [,,] -= 1.3) (1 for (x in []))");
tryItOut("/*for..in*/for(const ({ prop: ({ constructor: __noSuchMethod__ }), constructor: constructor }) in ((({}).__lookupGetter__)({}--)))var constructor = ({}), prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <><x><y/></x></>) {return;yield; }");
tryItOut("prototype, prototype = <x><y/></x>;");
tryItOut("switch(([11,12,13,14].sort)) { case 1: break; return;\n(window);\n\nexport __noSuchMethod__;break; default: break;  }");
tryItOut("yield \n(uneval(-1))[ /x/g ];");
tryItOut("throw true;");
tryItOut("/*for..in*/for(constructor = yield <x><y/></x> :: null.propertyIsEnumerable(\"__noSuchMethod__\") in <x><y/></x>.(__parent__)) ;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in constructor) {/*infloop*/for(prototype; <x><y/></x>; __proto__)  }");
tryItOut("throw  '' \n");
tryItOut("var __count__, constructor = <x><y/></x>;\n({}).hasOwnProperty\n");
tryItOut("if(prototype = <x/>) { if (<x><y/></x>) {throw (function ([y]) { })();(__proto__); }} else {(<x><y/></x>);throw  /x/g ; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(this.zzz.zzz)return  \"\" ;");
tryItOut("if(*) { if (<x><y/></x>) {gc() } else function(y) { yield y; yield <x><y/></x>;; yield y; }}");
tryItOut("L: yield;");
tryItOut("/*for..in*/for(var __parent__ = [1,2,3,4].slice in (4.)) let __parent__ = <y><z/></y>, function::constructor = *;");
tryItOut("L: yield @foo;");
tryItOut("return;");
tryItOut("if('fafafa'.replace(/a/g, (@foo).__defineSetter__))  else  if (this.__defineSetter__(\"constructor\", Function)) {/*infloop*/L:do {yield {}; } while(({ get __iterator__(__count__, prototype) {  }  })); }");
tryItOut("throw <y><z/></y>;");
tryItOut("let([], __noSuchMethod__) { yield ((new (\rMath.sin)()).__lookupGetter__(\"prop\"));");
tryItOut("/*for..in*/for(let __count__ in [1]) {L: ; }");
tryItOut("/*infloop*/for(constructor; true.__defineGetter__(\"__count__\", <x/>); ([((uneval(0)))].filter((({}).hasOwnProperty).call))) {gc()return <y><z/></y>; }");
tryItOut("L:do {L:switch(.2) { case <y><z/></y>: if(<><x><y/></x></>) {let constructor; }default: case 0: break;  } } while(((__proto__ = __proto__)) && 0);");
tryItOut("M:if('fafafa'.replace(/a/g, [[]] ? <zzz>this.*</zzz> : <zzz>__iterator__ = <x/></\tzzz>)) {{prototype, __iterator__ = false;@foo; }L: constructor = undefined; } else  if ([15,16,17,18].sort(function(q) { return q; }, (eval(\"M:if([[]]) return; else (@foo);\", 3)()))) {let __count__, __parent__;/*for..in*/for(let [__proto__, prototype] = __parent__ in constructor = 1e4) {(<x><y/></x>);; } } else __proto__ = 033;");
tryItOut("if(false.yoyo(this).*) { if ([__count__.__iterator__]) {; }} else /*for..in*/for(var __proto__ = (__parent__ ?  /x/  : <y><z/></y>) in __iterator__) {prop;function(q) { return q; } }");
tryItOut("if((this < window)) {export *;__proto__, prop; }");
tryItOut("switch((this.__defineSetter__(\"__count__\", ({}).hasOwnProperty)).prototype) { case [({__noSuchMethod__: __iterator__})]: break; /*for..in*/for(__count__.__iterator__ in [1]) falsebreak; case 3: /*infloop*/while((function ([y]) { })()){__parent__; }default: export prototype;break; const __iterator__, __parent__ = <x><y/></x>;break; case 8: break ;case 0: break; case [prop]: break;  }");
tryItOut("if(this.__defineSetter__(\"__count__\", Math.pow)) {L:if(((*::*\r)(1e4))) { if ((<><x><y/></x></>.eval(null))) {return; } else function(q) { return q; }} }");
tryItOut("if(((new Function).call(prototype, ))) {{}export prop; }");
tryItOut("yield @foo;");
tryItOut("return [0<!--yy-->].some(__iterator__);");
tryItOut("/*for..in*/L:for(const window.__proto__ in (((new Function(\"(/a/gi);\")))((uneval(3/0))))){continue M; }\n/*infloop*/for('fafafa'.replace(/a/g, <x><y/></x>); new (*::*)(this.zzz.zzz); 'fafafa'.replace(/a/g, 0)\n) {/*for..in*/for(prop in <y><z/></y>) {return 3.141592653589793;export constructor; }\n{}\nreturn;if((p={}, (p.z = <y><z/></y>)()).*) {gc()continue ; } else  if ((uneval(033))) {;[1,2,3,4].slice } }");
tryItOut("yield");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in (yield __count__ = <x/>).eval((__noSuchMethod__ = this * [15,16,17,18].map([1],  \"\" )))) {/*infloop*/L:for(const __noSuchMethod__; (); (delete ((function(q) { return q; }).call).call(, <x><y/></x>))) [1]['try { yield window; } finally { export constructor; } '] = __parent__; }");
tryItOut("/*infloop*/do ([1,2,3,4].slice).apply while(eval(\"M:with(false)var prototype = this;\", let (__noSuchMethod__ = function (x::constructor) { return <y><z/></y> } (<><x><y/></x></>, false)) //h\n(window.__lookupSetter__(\"constructor\"))));");
tryItOut("L: {gc()yield false; }");
tryItOut("L:if(__iterator__) {<><x><y/></x></>; } else throw window\n");
tryItOut("/*infloop*/while(+false)/*for..in*/L:for(var prop = <><x><y/></x></> in <><x><y/></x></>) (1 for (x in []))");
tryItOut("constructor;");
tryItOut("if(__count__.__count__ = (eval)().propertyIsEnumerable(\"__parent__\")) /*infloop*/for(<x><y/></x>;  /x/ ; <x><y/></x>) {__parent__ = this;return window; } else  if (( /* Comment */null.yoyo((yield *)))) {{} export  } else var __iterator__ = __proto__;");
tryItOut("__parent__ = constructor\n");
tryItOut("[15,16,17,18].some(({}).__lookupGetter__, __iterator__)[-3/0]");
tryItOut("/*infloop*/for(let __parent__;  \"\" ; ({ __proto__: prop, __count__: constructor }) = (<><x><y/></x></> & arguments)) {yield; }");
tryItOut("/*for..in*/for(var @foo.__lookupGetter__(\"__noSuchMethod__\") in ((--*)((({prop: __count__})\t)()))){if(({__iterator__: function::constructor})) __noSuchMethod__ =  /x/ ; else {(0x99); } }");
tryItOut("/*for..in*/for(var [constructor, prop] = __parent__ in <x/>) {{} }");
tryItOut("M:with({__noSuchMethod__: <><x><y/></x></>})\r{yield; }");
tryItOut("let(__parent__ = new __count__.__lookupSetter__(\"__noSuchMethod__\")(), constructor = (Function(new [](<x><y/></x>), constructor))) { let(({ __noSuchMethod__: ({ constructor: prototype }), constructor: ({ constructor: constructor, __parent__: [, , , __parent__, ] }) }), __noSuchMethod__) ((function(){__proto__ = __proto__;})());");
tryItOut("with({prop: ({}) <<  \"\" })/*infloop*/while('fafafa'.replace(/a/g, (1 for (x in [])))){yield;L: {return true;gc() } }");
tryItOut("if(__noSuchMethod__ = __proto__) { if (__parent__.__proto__ = <x/>.isPrototypeOf( '' )) export __parent__;} else {let setter; }");
tryItOut("try { let(__proto__ = undefined.propertyIsEnumerable(\"__count__\")) { with({}) prop } catch(__count__ if (function(){return (<x><y/></x>.*) *= __noSuchMethod__ = __proto__;})()) { let(__iterator__, constructor) { yield (p={}, (p.z = null)()); } catch(x::<><xxx {prototype}={( '' .@foo)} /></>) { this.zzz.zzz; } ");
tryItOut("let (prop, __count__ = __noSuchMethod__.__count__ = window) { L:while((window--) && 0){continue M;continue M; } }");
tryItOut("let __count__, __parent__ = <x><y/></x>;");
tryItOut("L: {{} }");
tryItOut("{/*for..in*/for(constructor in <><<><x><y/></x></>x><y/></x</>) {[1,2,3,4].slice } }/*for..in*/L:for(__noSuchMethod__ in ((function (prop) {  } )(<x/>))){throw *::*;prop; }");
tryItOut("let (({ prop: ({ prototype:  for each (__parent__ in <y><z/></y>) for each (__proto__ in window) }), prop: ({ __noSuchMethod__: [], __iterator__: __count__ }) })) { /*for..in*/for(let [__parent__, __parent__] = <x><y/></x>.(constructor) in [z1,,]) {return this;break L; } }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if(this.__defineGetter__(\"prop\", false).__noSuchMethod__) { if (\t<y><z/></y>) /*infloop*/L:while(RegExp())let <x><y/></x> = <y><z/></y>, __parent__; else {{yield;\nexport __parent__;\n } }}");
tryItOut("do  while(((new Function(\"return  '' ;\"))(<x><y/></x>)) && 0);");
tryItOut("M:if(new (.2)((void [,,]))) { if (new (4.)() instanceof __noSuchMethod__ = <x><y/></x>) {with(<x><y/></x> == @foo)return <x/>;[1,2,3,4].map } else /*for..in*/M:for([__proto__, __noSuchMethod__] =  \"\"  in prop) {throw ({a1:1}); }}");
tryItOut("do yield; while((__noSuchMethod__ getter: (prototype).__defineSetter__) && 0);");
tryItOut("L:do {if( /x/ ) { if (<x><y/></x>) {var __iterator__; }} else  }\t while(((((Math.pow).call(*::*, ))[*::*.__noSuchMethod__ += *::*])) && 0);");
tryItOut("[, prototype, ({ constructor: __iterator__, prop: __count__ }), , [({ __iterator__: [prop, [], , , [, prop, ]], constructor: ({ prop: [({ ({ __parent__: ({ __count__: [] }) }): ({ prop: __noSuchMethod__ }) }), __parent__, [], ({ __proto__: ({ __parent__: ({ __parent__: __noSuchMethod__ }) }) })], __noSuchMethod__: __count__ }) }), , [({ __noSuchMethod__: [, , ], __iterator__: ({ prop: ({ get: prop }) }) })]]]");
tryItOut("return  /x/ .hasOwnProperty(\"__parent__\")\n");
tryItOut("/*for..in*/M:for(let prototype in -1) {_{} }\n");
tryItOut("\tif(__noSuchMethod__) {throw this;return <x/>; }");
tryItOut("/*infloop*/for((uneval(window))\f; <x/>; __proto__.__noSuchMethod__ = <><x><y/></x></>) yield eval(\"/*infloop*/M:for(let constructor; let(__noSuchMethod__ = <><x><y/></x></>) { break ;\\t; this) {{} }\", this);");
tryItOut("for(let y in [5,6,7,8]) yield false;");
tryItOut("");
tryItOut("/*for..in*/for(__iterator__ in this) {{([1]);export *; } }");
tryItOut("throw StopIteration;");
tryItOut("with({__noSuchMethod__: (yield +<><x><y/></x></>).__lookupGetter__(\"__parent__\")}){let constructor = constructor;return <><x><y/></x></>; }");
tryItOut("let (__parent__ = prototype = ({ set __proto__() { return <> /x/g .eval(@foo)</> }  }), __count__) { return *::*; }");
tryItOut("if((({constructor:  /x/ ,  get __proto__ prototype (default: {}break; ) { yield this }  }))) {} else  if ((<x/>)(*::*)) /*infloop*/L:for(const prop = constructor; 5.0000000000000000000000; this) 1e4; else throw this;");
tryItOut("");
tryItOut("({}); const prototype;");
tryItOut("M:if((#2=({__noSuchMethod__: {}}))) __count__ = [11,12,13,14].sort else  if (__noSuchMethod__.__proto__ = function ([y]) { }) {return @foo;var __iterator__, constructor; } else {break ;return; }");
tryItOut("/*infloop*/for(\f<x/>; function ([y]) { }; this) __iterator__ = 3");
tryItOut("while((function(id) { return id }) && 0)");
tryItOut("L: __proto__;");
tryItOut("L:if((__proto__ = __count__)) gc() else  if (* %= constructor) constructor");
tryItOut("if((({}).hasOwnProperty)()) { if (([, , , ] = *::*.(<y><z/></y>))) ( /x/ ); else if(( /x/ .@* if ( \"\" ))) yield; else  if (((break .__defineGetter__(\"prototype\", [[1]])) >> __count__ = <x/>)) {{} } else }");
tryItOut("throw false;\n/*infloop*/for(const prototype; (yield constructor ^= <x><y/></x>); #0=({__count__: (__count__.prototype)})) {return constructor;export *; }\n");
tryItOut("yield true;/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x>) return true;");
tryItOut("yield eval(\"continue ;\", <\n><x><y/></x></>);");
tryItOut("/*infloop*/for(let __noSuchMethod__; (typeof false); +<><x><y/>\f</x></>[ \"\" .eval(__proto__)] ? (-1 .@*:: <><x><y/></x></>).valueOf(\"number\") : [z1].__iterator__.__proto__ getter= function  prototype ()3.141592653589793) {}(__count__);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in <><x><y/></x></>) with(*){1e81; }");
tryItOut("{throw  /x/g ;; }\n");
tryItOut("let (__noSuchMethod__) { let(constructor = [,,z1], __parent__ = [1,,]) { ; }");
tryItOut("return ([11,12,13,14].sort);");
tryItOut("if((uneval( /x/ .__lookupSetter__(\"__parent__\")))) { if ((function(q) { return q; })()) /*for..in*/for(var [__count__, __noSuchMethod__] = #2=[__noSuchMethod__] in [(p={}, (p.z = 1.2e3)())]) {Math.sin } else {/*for..in*/for(let __parent__ in (((new Function(\"yield;\")))( /x/ ))){<>Math.pow</>; }let __count__ = <><x><y/></x></>, constructor = 4.; }}");
tryItOut("/*infloop*/L:while(([({ constructor: constructor, prop: __count__ }), ] = (yield.constructor = <x/>))){{}/*infloop*/for(<x><y/></x>; <>/x></>; this) {const prop, __iterator__; }\nreturn @foo;\n }");
tryItOut("/*infloop*/M:for(const __iterator__; 0x99++; new Math.pow(1e4, this)\n) {if(*::*) {var prop = constructor;yield; } else yield prop;var constructor = *::*, __noSuchMethod__; }");
tryItOut("/*infloop*/for(const get = __proto__ = <x/>; (uneval((* %= __iterator__))); eval(\"const <>\\t<x><y/></x></>;\", __parent__ = __proto__, prop = ({a2:z2}))) {return;yield; }");
tryItOut("return;");
tryItOut("L:if(this) gc() else  if (0.1) yield;");
tryItOut("{let constructor;{} }");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = (false.__lookupSetter__(\"prop\")).__defineGetter__(\"__count__\", function  __parent__ () { return ({a1:1}) } ) in undefined) /*for..in*/(uneval(prop = window)) const constructor;");
tryItOut("/*infloop*/L:do {L:do {if((<x><y/></x>.isPrototypeOf(<x/>)) *= this.__defineGetter__(\"__proto__\", new Function)) {<x><y/></x>; } else  if (eval(\"[]\", window)function (each) { return  /x/g ; } ) (*::*); else return; } while((((3.141592653589793)())) && 0); } while((3 ? (1e+81.throw(<><x><y/></x></>)) :  ''  >= __parent__));");
tryItOut("/*for..in*/M:for(var __proto__ in ((!<x><y/></x>)(__iterator__ = (try { let(__count__ = 3, __noSuchMethod__ = 1.3) ((function(){gc()})()); } catch(constructor if (function(){with({}) export prop;})()) { return {} .. /a/gi; } )))){continue M;<><x><y/></x></>; }");
tryItOut("{const __proto__ = this, constructor;yield; }");
tryItOut("export __parent__;");
tryItOut("let([({ __count__: [({ constructor: ({ __parent__: __parent__, <y><z/></y>: __proto__ }), __count__: ({ __count__: constructor }) })], __count__: prototype }), , , [, ({ constructor: [({ prop: __noSuchMethod__, __count__: __count__ }), ({ __count__: prototype })] }), ({ prototype: new (function  prototype ()*)(-3/0, @foo), __noSuchMethod__: constructor })], prop] =  \"\" ) { for(let y in []);");
tryItOut("gc()");
tryItOut("L: /*infloop*/L:while(*){;return null; }");
tryItOut("if((#1=[#1#] ^= <y><z/></y>.propertyIsEnumerable(\"constructor\"))['fafafa'.replace(/a/g, function (__proto__)033)]) { } else  if (({constructor getter: 'haha'.split, __parent__: ([__iterator__, <!--yy-->, ] = new ({})(window, #3={a:#3#})) })) <y><z/></y>; else switch(prop = 4.) { default: break; case 6: break; case 8: let prototype, __count__ = undefined;break;  }");
tryItOut("if([z1]) {{} } else  if (<y><z/></y>) const __parent__ = 4., __parent__;");
tryItOut("{let prop = window, __parent__; }");
tryItOut("const __iterator__;\nyield;\n");
tryItOut("/*infloop*/do {throw <x><y/></x>;\n;\n } while((((eval(\"__count__\", <y><z/></y>)) >>>=(<x><y/></x>.__lookupSetter__(\"__parent__\"))).valueOf(\"number\")));");
tryItOut("/*for..in*/for(var prop = false for each (__proto__ in <><x><y/></x></>) in {}) {export *; }");
tryItOut("<><x><y/></x></>;");
tryItOut("/*infloop*/M:for(let __parent__ =  /x/ ; @foo |= ( '' .throw(<y><z/></y>)); (!<><x><y/></x></> ^ __count__)) {/*infloop*/while([this if (4.)])yield @foo; }");
tryItOut("/*for..in*/for(var __parent__ in ((function  constructor (__noSuchMethod__, __parent__) { return (__proto__ = window) >>= (yield *) } )(((p={}, (p.z = undefined)()) == [,] <<  /x/g ))))gc()");
tryItOut("with({__iterator__: (function (__parent__)function ([y]) { }((undefined)[false], this))})/*for..in*/M:for(var __parent__ in this.__defineSetter__(\"constructor\",  /x/ )\t) {export *; }");
tryItOut("L:while((__proto__.__noSuchMethod__ getter= function ( else ) { __noSuchMethod__ = __proto__, __count__ =  /x/ ; } ) && 0)/*infloop*/for(({ prop: __parent__, __parent__: __iterator__ }) = ((((Function)() for each (constructor in *::*) if ( \"\" ))))[Date()]; * .@*:: [1].__noSuchMethod__; <y><z/></y>) {yield <x><y/></x>;<x><y/></x>; }");
tryItOut("{M:with([[]]){{} }/*infloop*/do {;export *; } while(<><x><y/></x></>); }");
tryItOut("if(__iterator__|= /x/g ) {{gc()gc() } }");
tryItOut("do 'haha'.split while(((({ constructor: __proto__ }) = __noSuchMethod__)) && 0);\f\n");
tryItOut("L: {let (prototype, __iterator__ = @foo) { {} }\ffor(let y in [5,6,7,8]) throw StopIteration; }");
tryItOut("\rreturn\n\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in window) {let __parent__ = .2; /x/  }");
tryItOut("if(false + ({ set constructor() { yield *() }  })) { if (__iterator__.__noSuchMethod__) {return <y><z/></y>; }} else do {gc() } while(([true].sort(gc)) && 0);");
tryItOut("/*for..in*/for(var __iterator__ in <><x><y/></x></>) yield (-1);");
tryItOut("/*for..in*/for(const __iterator__ = \n(__parent__ = __iterator__) in *++) export prototype;");
tryItOut("if(4.) /*\n*/throw <><x><y/></x></>;");
tryItOut("if(<y><z/></y>) {;[1,2,3,4].slice }");
tryItOut("L: yield;");
tryItOut("/*infloop*/do var prototype = <x><y/></x>; while([1][__parent__]);");
tryItOut("yield");
tryItOut("L: {export prop;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in  /x/ ) var __noSuchMethod__, __iterator__;");
tryItOut("if(<xxx>{prop}</xxx>) { if (new Error().eval(*::* * case 1: export prototype;break; )) {if(()) {var prototype = @foo; } else  if (__noSuchMethod__ = eval(\"<x><y/></x>.propertyIsEnumerable(\\\"__count__\\\")\",  /x/  for (constructor in <x/>))) {switch(<><x><y/></x></>) { default: break;  }yield <y><z/></y>; } } else __count__}");
tryItOut("/*infloop*/while(__count__.__parent__ =  '' .__lookupGetter__(\"__proto__\")){gc() }");
tryItOut("M:switch((-1)) { case  /* Comment */window: break; throw __parent__; const prototype;break;  }\n{}const __proto__ = 0/0, __proto__ = [z1];");
tryItOut("if(#1=({__proto__: #3={a:#3#}})) throw __proto__; else  if ((__proto__.(([11,12,13,14].filter)[\f({a1:1})] / ((([[]]).watch).call(#0=3/0, <x\r><y/></x>))))) ;");
tryItOut("/*for..in*/for(var //h\n[, , ] in ((function  prototype (try { (undefined); } finally { export *; } , constructor)__proto__.__proto__.__lookupSetter__(\"prototype\"))(new ((1 for (x in [])))([11,12,13,14].sort, <xxx>{__iterator__}</xxx>)))){L:do {*::*; } while(((__count__.__iterator__)) && 0);return (__iterator__ = <x><y/></x> && <y><z/></y>); }");
tryItOut("L: {let constructor = 0x99, prototype;\n(<x/>)\n\n }");
tryItOut("if([(function ([y]) { })() for ( in  '' )]) { if ([,,] << <x/>) break M\n else {export prop; }}");
tryItOut("/*infloop*/for(033; ((new Function)(__iterator__, new ({a1:1})(this))\n); window = constructor) {return; }");
tryItOut("let(__parent__, prototype) ((function(){let(prototype = @foo) ((function(){export __parent__;})());})());");
tryItOut("if(*) {; } else  if (<><x><y/></x></>) {return 0x99;var __proto__; } else gc()");
tryItOut("/*infloop*/for(<x><y/></x>.(@foo); (__iterator__ = ((* << .2) ? return : <x><y/></x>.isPrototypeOf(window))); ({ __proto__: prop, __iterator__: __iterator__ }) = (false ^ <y><z/></y>)) {yield <><x><y/></x></> >>> <y><z/></y>; }");
tryItOut("while((@foo.__defineGetter__(\"constructor\", this)) && 0){/*for..in*/L:for(let [prop, __parent__] = null in <x/>) const __parent__ = [[1]], __count__; }");
tryItOut("/*infloop*/do prototype while(Function(__count__, 4.));");
tryItOut("with({__noSuchMethod__: window.propertyIsEnumerable\t(\"__noSuchMethod__\")}){return \f<><x><y/></x></>/*\n*/; }");
tryItOut("if(#2=[*]) (<x><y/></x>)\n else  if (prop(5.0000000000000000000000) = (__proto__)[[[]]]) {gc()yield; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __proto__] = <x><y\f/></x> in __proto__) const prop;");
tryItOut("with((__count__)(((1 for (x in []))).call(<x><y/></x>, __parent__, <x/>)))__noSuchMethod__");
tryItOut("export __parent__;;");
tryItOut("/*for..in*/for(var [__parent__, constructor] = eval(\"gc()\", false) in let (__iterator__ = prototype)  \"\" ) {yield;M:with((-1))yield (function ([y]) { })(); }");
tryItOut("if(__count__ = <x><y/></x>) { if (-0 ^= *::*) ({}).__lookupGetter__} else gc()");
tryItOut("/*for..in*/for(const __count__.prop in ((eval)()))/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in 1e81) {export __count__; }");
tryItOut("/*for..in*/L:for(var __parent__ in ((({}).__lookupGetter__)([,,z1]))){function  __iterator__ (__proto__, constructor) { yield; }  }export *;");
tryItOut("let(__count__) { with({}) yield;");
tryItOut("{/*for..in*/for([constructor, __iterator__] = *::* in <x><y/></x>) {(#3={a:#3#}); }/*infloop*/for(var prototype = <><x><y/></x></>.__iterator__; ([11,12,13,14].filter); eval(\"if(<><x><y/></x></>) { if (<x><y/></x>)  else { { yield 3; }  }}\", (({}).valueOf(\"number\")))) {<><x><y/></x></>;( /x/g ); } }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prop] = false in true) return new (({}).__lookupGetter__)();");
tryItOut("/*infloop*/M:for(const __count__; <><x><y/></x></>.__defineGetter__(\"prototype\", new Function); <x/> & ((window.watch(\"__noSuchMethod__\", __parent__)))[[11,12,13,14].some]) export *;");
tryItOut("/*for..in*/for(let __count__ in ([(( /x/g ).call).apply])) {var __noSuchMethod__ = @foo, __parent__ = 033;/*for..in*/for((<x><y/></x>.eval(1e4))['constructor'] in (((*::* <= function ([y]) { }).watch)(prop.( /x/ )))){; } }");
tryItOut("M:if((__noSuchMethod__.@foo)) { if (__iterator__\n) prop;} else export *;");
tryItOut("/*infloop*/L:for(({constructor: undefined.propertyIsEnumerable(\"__noSuchMethod__\"), constructor getter: (new Function(\"{/*for..in*/for(const  /x/g ['prop'] in null) continue L; }\")) }); new Function((function(q) { return q; }).call(eval(\"new <x><y/></x>\", <x><y/></x>.__defineGetter__(\"__noSuchMethod__\", new Function).__parent__ = <><x><y/></x></>.throw([1])), (<x><y/></x>\n), gc), new RegExp().__lookupGetter__(\"prop\")); new (true)()) /*infloop*/for(var each; <x/>; <x><y/></x>) {throw 033; }\n\n");
tryItOut("yield; const prototype;");
tryItOut("with({__parent__: __noSuchMethod__+=*::*}){let <x><y/></x> = 3.141592653589793, prop = <x/>;return; }");
tryItOut("if(new RangeError().*) {/*infloop*/do yield <x><y/></x>; while(!<y><z/></y> &= (true *= __parent__)); } else return <><x><y/></x></> > ({});");
tryItOut("\nreturn <x/>;");
tryItOut("throw constructor;");
tryItOut("let (constructor = (new 'fafafa'.replace(/a/g, <><x><y/></x></>\t)(this.__defineSetter__(\"prop\", Math.sin), {}))) { gc() }");
tryItOut(";");
tryItOut("return\nbreak M; const __iterator__;");
tryItOut("/*infloop*/for(const constructor = \t#2=.2; (( \"\" ++).prop); <><x><y/></x></>.prototype = [1,,].throw( /x/g ) >>= ((__parent__ = #3={a:#3#})\n)) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in ( /* Comment */new ((/a/gi).apply)(prototype))) {try { var __count__ = this; } catch(constructor if (function(){{}})()) { throw this; } catch(prop if function::__parent__ = *::*) { ; } catch(__iterator__ if (function(){var __noSuchMethod__ = [z1,,], prototype;})()) { {} } catch(prototype if (function(){({}).hasOwnProperty})()) { undefined } catch(prototype) { gc() }  }");
tryItOut("gc() const prop;");
tryItOut("if(+\t__parent__.__lookupGetter__(\"__iterator__\")) L:if(true) {throw constructor;/a/gi } else continue ; else  if (prop;) break ;");
tryItOut("L: {yield <x/>;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in 3/0) prop;");
tryItOut("M:if(eval(\"( \\\"\\\" .yoyo(5.0000000000000000000000))\", __parent__.constructor)) [1,,] else  if (<><x><y/></x></> != __parent__) gc() else __parent__, prop");
tryItOut("let (constructor = false) { let delete, prop; }");
tryItOut("/*for..in*/for(prototype = ({__noSuchMethod__: new ([1,2,3,4].map)(), prop: <x><y/></x>() }).__lookupSetter__(\"prototype\") in ( /x/g )[__iterator__]) window;");
tryItOut("if(new Boolean('haha'.split(<x><y/></x>))) /*infloop*/for(constructor; undefined; 033) yield true;");
tryItOut("while((new (*::*)()) && 0)/*infloop*/while(*)prototype;");
tryItOut("if(this) {throw <y><z/></y>;null; } else yield <x/>;");
tryItOut("/*for..in*/L:for(const __iterator__ in <x/>) {__noSuchMethod__ = __proto__; }");
tryItOut("{undefined }");
tryItOut("M:if((null > true)) { if ([z1,,]) while((<>return;</>) && 0)yield @foo;} else {throw <x/>;export __noSuchMethod__; }");
tryItOut("export *;");
tryItOut("return;");
tryItOut("if(((p={}, (p.z = <><x><y/></x></>)()) for each (constructor in __count__) if (@foo))) {__parent__;prop, prototype = __count__; } else {let __count__ = true;const __parent__, __proto__ = *::*; }");
tryItOut("let(__iterator__) ((function(){for(let y in []);})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ prop: ({ __parent__: __noSuchMethod__, __parent__: prop }), constructor: __proto__ }) in __count__ = <><x><y/></x></>) {L:with({__count__:  /x/ }){var prototype;let constructor = prop; } }");
tryItOut("if(*::*) { if (\nprototype = true) {gc()gc() }} else (false);");
tryItOut("{return @foo;\nreturn;\n }");
tryItOut("/*infloop*/for(const ({ __count__: prop, __noSuchMethod__: __iterator__ }) = yield this.zzz.zzz; <bbb xmlns=\" /x/ \"><ccc:ddd><!--yy--></ccc:ddd></bbb>.(([11,12,13,14].map)); (new __noSuchMethod__())()) {L:with({__count__:  \"\" })throw true;export prototype; }");
tryItOut("/*for..in*/L:for(const (__parent__ = window.@foo.watch(\"prototype\",  /x/g .__defineSetter__(\"__parent__\", gc)), prototype = (#1=[<>constructor setter: (1 for (x in []))</>]))((window)(1.2e3, ({a1:1}))) in (([1,2,3,4].slice)(__parent__ = (* if (<x/>))))){eval }");
tryItOut("/*infloop*/for(<y><z/></y>; ({ __noSuchMethod__: __count__ }) = window; new true.@*(*::*.isPrototypeOf(undefined))) gc");
tryItOut("throw StopIteration;");
tryItOut("switch(null) { case @foo: continue ;break; break; ;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in (yield -0 = prototype < null)) {while((( /x/  for each (prop in #1#) for each (prototype in (d)) for each (prop in <><x><y/></x></>) for (constructor in <><x><y/></x></>) if ( '' ))) && 0) }");
