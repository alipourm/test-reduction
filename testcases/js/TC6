
tryItOut("yield (__proto__ = this); const __parent__;");
tryItOut("M:while(((new /a/gi([__count__ = <y><z/></y>].some(new Function) ? 'fafafa'.replace(/a/g, \feval) : this))) && 0){default: continue M;break; return prop;[1,2,3,4].slice }");
tryItOut("let (__count__ = prototype.propertyIsEnumerable(\"__proto__\").__iterator__, __noSuchMethod__ = this.zzz.zzz) { if(prototype = *) export *; }");
tryItOut("do {[1,,];(<><x><y/></x></>).apply } while((<><x><y/></x></>) && 0);with({prototype: -1})");
tryItOut("/*for..in*/for(const __iterator__ =  in 1e4 .@ *::*) {yield; }");
tryItOut("/*infloop*/for(<><x><y/></x></>; 3; undefined) {throw <y><z/></y>; }");
tryItOut("switch( /x/g .@foo) { default:  }");
tryItOut("const constructor;");
tryItOut("yield; const prototype;");
tryItOut("L:while((__proto__ = export *) && 0)return prop;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __proto__, __count__: __parent__ }) =  '' ;  /x/ ; (( \"\"  for each (__proto__ in @foo)))) {with({}) { __count__ = __iterator__; } if((<><x><y/></x></>)()) { if (({}).constructor) {export *;{} }} else {(<x><y/></x>).watch\t }//h\n }");
tryItOut("if((prototype = constructor)) { \"\" ; } else  if ((yield <y><z/></y>)) {export __proto__; } else return @foo;");
tryItOut("M:if( /* Comment */true) __count__; else  if ((([11,12,13,14].map).throw((<x/>--)))) { /x/ ;yield <x/>; } else 1.2e3;");
tryItOut("/*for..in*/for(var prop in (([1,2,3,4].map)((({ constructor: [, , __iterator__, , ], prop: ({ prop: constructor }) }) = __iterator__)))){const constructor, __proto__; }");
tryItOut("/*for..in*/for(let constructor in ((function (setter) { continue ; } )(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(<><{__proto__}>yyy</{__proto__}></>) - prop.__parent__ = [15,16,17,18].map(({}).__lookupGetter__, this))))with({prototype: (033)[*::*]})(prop);");
tryItOut("if(-*::*) (1 for (x in [])) else {; }");
tryItOut("M:with(yield false /=  /x/ \n){/*infloop*/for(__iterator__; 1.3; @foo) {[1,2,3,4].slice } }");
tryItOut("let([, , , ({ prop: __noSuchMethod__ }), ] = ~[1], __parent__) ((function(){constructor = prop;})());");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = (let (__noSuchMethod__, yield) <><x><y/></x></>).watch(\"constructor\", function  <!--yy--> (__noSuchMethod__) { yield (-1) } ) in 'fafafa'.replace(/a/g, (window).watch)) L:if(<{prototype}>yyy</{prototype}>) let prototype = @foo, __noSuchMethod__;");
tryItOut("/*infloop*/M:for(__parent__; __proto__; ( \"\"  &=  /x/g )) {prop = <><x><y/></x></>;export *; }");
tryItOut("/*for..in*/for(var __count__.__parent__ in __noSuchMethod__) let __parent__;");
tryItOut("gc()");
tryItOut("/*infloop*/do {return;(@foo); } while(@foo);");
tryItOut("/*for..in*/for(const __count__ = <x><y/></x> in 1e81) {const constructor = __parent__; }");
tryItOut("__proto__ = __proto__;");
tryItOut("L:if(yield __iterator__) { if (__parent__ = 5.0000000000000000000000) {let prototype = null, __count__; } else {{__proto__ = this;throw *::*; } }}");
tryItOut("/*infloop*/L:for(var __noSuchMethod__; --1.__lookupGetter__(\"__parent__\"); <><zzz>this</zzz></>) {export *; }");
tryItOut("/*infloop*/for(__noSuchMethod__; (false > [1]) ? ({ __noSuchMethod__: ({ prototype: __noSuchMethod__ }), __parent__: ({ __proto__: ({ __proto__: constructor }) }) }) = constructor.constructor : true.throw(__count__ = [].watch(\"__proto__\", (function  prototype (constructor)(@foo.hasOwnProperty(\"yield\")))//h\n.call)); ((__proto__ = ).* | __parent__ = window.prototype)) let(__noSuchMethod__ = false) { ");
tryItOut("/*infloop*/for(var prop; <><xxx {__proto__}={__iterator__ = false} /></>;  ''  ? <x/> : <x><y/></x>) export __iterator__;");
tryItOut("L: yield this");
tryItOut("/*for..in*/for(__proto__ in ((new Function)(<x/>))){ }");
tryItOut("{export *;(prototype); }");
tryItOut("/*for..in*/M:for(var [__parent__, prototype] = prototype in  \"\" ) ;");
tryItOut("/*infloop*/for(prototype = ((<x/> for each (__iterator__ in undefined) :: 3/0 ? __proto__.constructor = __noSuchMethod__ = __parent__ : <y><z/></y>) <= (this.__lookupSetter__(\"__noSuchMethod__\"))); (p={}, (p.z = __noSuchMethod__)()); (this.__defineGetter__(\"__iterator__\", ([1,2,3,4].map).call))) {} const __parent__;");
tryItOut("#3={a:#3#};");
tryItOut("if({}) {export *;(<x><\ty/></x>); } const __iterator__;");
tryItOut("/*for..in*/for(const constructor in this) {continue ; }");
tryItOut("with({}) ;");
tryItOut("switch(__count__ = false) { default: with({getter: #2=<x/>.valueOf(\"number\").eval(prototype = -1)}){const __noSuchMethod__, prototype;return @foo; }/*infloop*/for(__iterator__; prototype.__defineSetter__(\"constructor\", gc).isPrototypeOf((<!--yy-->)); (this.__defineSetter__(\"__count__\", (Function).call) <<  )) {M:if( \"\" ) {(<x><y/></x>).watchthrow false; }(<x/>); }yield (false.watch(\"prop\", 'haha'.split)).__iterator__;break; case 6: break; case (p={}, (p.z = (RangeError((__proto__.__proto__))))()): /*for..in*/M:for(let prop in this) {return <><x><y/></x></>;yield this; }break;  }");
tryItOut("if((__parent__ = 0.1)) {yield;(<x/>).apply\nvar __parent__ = *, prop = null;\n }");
tryItOut("with({__iterator__: <x><y/></x>[this] &= __parent__.* setter= function(q) { return q; }}){if( \"\"  *= (<x><y/></x>.__count__ = 033)) {eval } else  if (yield *) return <x><y/></x>; else {const __noSuchMethod__ = .2; } }");
tryItOut("if(<x><y/></x>) {export prop; } else ;");
tryItOut("return eval(\"__proto__\",  /x/ );");
tryItOut("-3/0;");
tryItOut("with(<x/>){(<y><z/></y>); }");
tryItOut("{export *;export *\n }");
tryItOut("return  \"\" ;\nyield;\n");
tryItOut("return;\nyield;\n\nlet (__parent__) { gc() }");
tryItOut("while(([z1,,]) && 0)(({a2:z2}));");
tryItOut("<employee id=\"1\"><name>Joe</name><age>20</age></employee>\n");
tryItOut("yield  /x/ \nthrow <y><z/></y>;\n__count__ =  /x/g , __proto__;\n");
tryItOut("with({}) throw StopIteration;");
tryItOut("if(function  __noSuchMethod__ ()([15,16,17,18].map(Math.pow, (prototype = [window].map(Math.sin).hasOwnProperty(\"__count__\"))))) throw prototype = (/a/gi); else with(this){if(*::*.unwatch(\"prototype\")) {export *;{} } else  if (*) yield; else export __parent__;return window; }");
tryItOut("return null;\nreturn;\n");
tryItOut("/*infloop*/while([[, , , ], ({ __noSuchMethod__: __noSuchMethod__ })] = (({a1:1}).hasOwnProperty(\"__parent__\")));");
tryItOut("with('fafafa'.replace(/a/g, (new Function(\"*;\"))))export __parent__;");
tryItOut("{/*for..in*/for(var prototype in <x/>) {yield; } }");
tryItOut("if(<xxx>{prop}</xxx>) {continue M; } else  if (\n*::*) {( /x/ );return; }");
tryItOut("\nbreak ;\n");
tryItOut("return (Math.sin);");
tryItOut("{/*infloop*/for(__count__ = <><x><y/></x></>; <x><y/></x>; 4.) {break M; }@foo; }");
tryItOut("{\t(<><x><y/></x></>);; }");
tryItOut("__iterator__ = __proto__;");
tryItOut("/*for..in*/for(const [prototype, ({ constructor: ({ function::__noSuchMethod__: ({ constructor: ({ __proto__: [({ __parent__: __noSuchMethod__ }), __iterator__, , [constructor, ], ({ constructor: prototype })] }), __iterator__: __proto__ }), constructor: __iterator__ }) })] = __parent__.__iterator__ = (__count__ ^= <><x><y/></x></>) ? __noSuchMethod__ += __noSuchMethod__ : constructor = <><x><y/></x></> in window) {do {throw undefined/*; } while((<><x><y/></x></>.propertyIsEnumerable(\"__parent__\")) && 0);/*for..in*/M:for(var constructor = void <><x><y/></x></> in <x><y/></x>) {return; } }");
tryItOut("/*for..in*/for(prototype = ((uneval(<><x><y/></x></>)).__count__ = (-1) < undefined) in 'fafafa'.replace(/a/g, prop.__noSuchMethod__ getter= function  __count__ (__proto__)*)) {let constructor = (), __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(const [prop, __proto__] = (constructor = (function ([y]) { })()) in <x/>) {yield <x><y/></x>;throw this; }");
tryItOut("{throw window;/*infloop*/do return <y><z/></y>; while(([[]] for each (prop in window))); }");
tryItOut("{0x99; }");
tryItOut("L: {/*for..in*/for(const __parent__ in ((function ()1e-81)(<x><y/></x>))){continue L; } }");
tryItOut("({ function::prototype: (__proto__), __parent__: __proto__ })\n");
tryItOut("if( / <zzz>#1#</zzz> ^ (new Number())) { if ((yield (<><x><y/></x></>()).watch)) throw @foo;} else {gc() }");
tryItOut("/*infloop*/for((with({}) let(__noSuchMethod__ = window(), __count__ =  '' ) ((function(){this.zzz.zzz;})()););  '' .__lookupSetter__(\"__proto__\"); (__count__ = __iterator__)) {(this);__parent__, prop; }");
tryItOut("if((({ get prop __noSuchMethod__ ()0/0 }))) { if ((<x/> ? @foo : true)) {return true;export constructor; }} else export constructor;");
tryItOut("if(<x><y/></x>) { if (3.141592653589793) export *; else {yield <x><y/></x>;<><x><y/></x></>; }}");
tryItOut("L:switch(case *::* != @foo: break; break;  = __count__) { case 9: break M;break; case 9: break;  }");
tryItOut("/*infloop*/L:while(new (<x><y/></x>)(<x><y/></x>))M:if((function  prop () /x/ )(*::*)) { if (Math.sin(window, <x><y/></x>)) export *;} else gc()");
tryItOut("L:if((prop = prop -= ({constructor: window, __proto__ getter: Math.sin }))) return window; else /*infloop*/for(*::*; this; <y><z/></y>) {gc()export *; }\f");
tryItOut("if(__proto__.__iterator__ setter= (/a/gi).apply) { if ((3 || <><x><y/></x></>.__lookupGetter__(\"__count__\"))) {{yield window; } } else eval(\"(this).__defineSetter__\", undefined)}");
tryItOut("throw prototype;\n\rbreak ;\n");
tryItOut("*;/*infloop*/M:for(var __noSuchMethod__; this; <><x><y/></x></>) {((-1)); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((prototype) in __noSuchMethod__.((prop = 5.0000000000000000000000))) {\nthrow this;\n }");
tryItOut("if(new eval(\"throw prop;\", ([true]))) {export __noSuchMethod__; } else  if (prototype *=  /x/g ) {return  /x/ ; }");
tryItOut("let(constructor = window.yoyo([[1]])) ((function(){throw StopIteration;})());");
tryItOut("/*for..in*/for(let __parent__ in ((function(y) { yield y; yield #3={a:#3#};; yield y; })(*))){gc()yield; }");
tryItOut("L:switch((new Number(5.0000000000000000000000 |= [z1], <x><y/></x>))) { case 3: break; __iterator__ = <x><y/></x>;break;  }");
tryItOut("let prototype =  /x/ \nlet get;");
tryItOut("if(<x/>) (function(q) { return q; }).call");
tryItOut("/*for..in*/for(const function::__iterator__ = (<x/>)[<><x><y/></x></>] in  \"\" ) 'haha'.split");
tryItOut("var prototype;");
tryItOut("/*for..in*/for(let prop in ({})) {let __proto__, __iterator__ = null; }");
tryItOut("for(let y in []);");
tryItOut("L:with(new  \"\" (function ([y]) { })){{}return -3/0; }");
tryItOut("M:while((-0) && 0){var delete, __iterator__ = <x><y/></x>; }");
tryItOut("-3/0M:with((p={}, (p.z = 0/0)())){/*infloop*/M:for(true; (function ([y]) { })(); <x><y/></x>) {prototype; }<x/>; }");
tryItOut("/*infloop*/for(var [] = __iterator__+=<y><z/></y>; Math.pow(); [15,16,17,18].map(eval, constructor)) {<><x><y/></x></>export prototype; }");
tryItOut("let (constructor) { if(<x/> in __iterator__.__lookupGetter__(\"constructor\")) const x::__noSuchMethod__ = <y><z/></y>, __noSuchMethod__; else const __noSuchMethod__; }");
tryItOut("{(0x99); }");
tryItOut("{return;yield; }");
tryItOut("with({__noSuchMethod__: <><xxx>{prototype}</xxx></>}){L: continue L;; }");
tryItOut("let (({ __proto__: __count__ }) = (__iterator__)) { /*infloop*/for(let __noSuchMethod__; ({ get prop __iterator__ (__iterator__) { yield @foo } ,  set __parent__ __noSuchMethod__ (constructor)<><x><y/></x></> });  { gc } ) const __proto__ = <x><y/></x>, __count__; }");
tryItOut("do {; } while((yield <y><z/></y>.__defineSetter__(\"__count__\", eval)) && 0);");
tryItOut("if(new ((({}).hasOwnProperty).apply)(<x/>) < __iterator__ = <y><z/></y>) { if (prototype = function::__count__+= \"\"  ? #1=[#1#] :  /x/g ) {gc()export __count__; } else {var \t__noSuchMethod__, __parent__ =  '' ; }}");
tryItOut("/*for..in*/for(const [__count__, __proto__] = ([__parent__, , __count__, ] = <{__count__}><ccc:ddd>yyy</ccc:ddd></{__count__}>) in 3.141592653589793) __proto__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var [__count__, prop] = constructor.watch(\"__parent__\", (((1 for (x in []))).apply).call) ? false >= <y><z/></y> : ([1,,].throw(window)) in <x><y/></x>.__lookupGetter__(\"__proto__\")) {/*infloop*/while(__proto__){break ;[1,2,3,4].map }yield;\nreturn;\n }");
tryItOut("/*infloop*/for(var [__count__, prop, __count__, __parent__, ] = ((1 for (x in [])))(<x><y/></x>, 5.0000000000000000000000); new (<x><y/></x>)(); <x><y/></x>.__iterator__) {let __count__; }");
tryItOut("export prototype\nfor(let y in [])\n");
tryItOut("return ([15,16,17,18].map((<x/>).apply, (({__proto__: <y><z/></y>.throw(<><x><y\f/></x></>), __count__: <><x><y/></x></> >> null }))));");
tryItOut("/*for..in*/for(let (<x/>.isPrototypeOf(\f<><x><y/></x></>))(this.__defineSetter__(\"function::constructor\", function (__count__, __proto__) { export __parent__; } )) in this.zzz.zzz) {<x><y/></x>.(<x><y/></x><x><y/></x><!--yy-->);if(-1) {(<x><y/></x>);yield #3={a:#3#}; } else  if ([,,]) {break ; } }");
tryItOut("/*infloop*/for(; <x><y/></x> ^ <x><y/></x>; ((1 for (x in []))).call((yield <><x><y/></x></>), new (this).watch(window, undefined), __noSuchMethod__)) {return; }");
tryItOut("{this; }");
tryItOut("if(window) { if (1e+81) ; const __parent__;} else {{export constructor;__iterator__ = window;export *; } }");
tryItOut("L:with({prop: (__proto__ = undefined.yoyo((return  '' )))}){with(<y><z/></y>){(1.2e3);var __parent__, constructor; } }");
tryItOut("let(prototype = <><x><y/></x> </>) { __parent__ = constructor;");
tryItOut("with({}) throw __iterator__;");
tryItOut("const function(q) { return q; } = <x><y/></x>;");
tryItOut("yield __noSuchMethod__\n const __proto__;");
tryItOut("/*for..in*/for(var <x><y/></x>.( \"\" )['__parent__'] in (((eval).apply)((__noSuchMethod__.__iterator__ getter= Function))))gc()");
tryItOut("/*infloop*/while(#1=({__noSuchMethod__: <><x><y/></x></> += <x/>})/*\n*/)M:if(window) { if (@foo) {; } else {let __noSuchMethod__, constructor = <x><y/></x>;const __proto__ = window; }}");
tryItOut("if((1 for (x in []))((let (__iterator__ = {}, prop = <x><y/></x>) (( /x/ )[ '' ])), undefined.constructor = <x><y/></x>)) { if (constructor = [, [, , , ], , , ] = (p={}, (p.z = (function(id) { return id } %= 3))())) with({prototype: (uneval(<x/> .@x:: <x><y/></x>))}){gc()[1,2,3,4].slice } else {__count__ = <x/>, __parent__;throw throw *;.prototype setter= [1,2,3,4].slice; }}");
tryItOut("{}");
tryItOut("L:with({__proto__: eval(\"{return <x><y/></x>; }\", eval(\"with(033)export *;\", (prototype = constructor)))}){throw StopIteration; }");
tryItOut("gc()");
tryItOut("let (prototype) { export __iterator__; }");
tryItOut("for(let y in []);");
tryItOut("yield;");
tryItOut("yield (prototype = null);");
tryItOut("export __proto__;\nexport *;\n");
tryItOut("return;");
tryItOut("/*infloop*/L:for(const __parent__ = window; this; @foo) {<><x><y/></x></>;*; }");
tryItOut("L: {let __proto__ = prototype, __proto__ = window; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = ({ __parent__: __iterator__, __parent__: constructor }) =  \"\" .constructor = <x/> in (p={}, (p.z =  /* Comment */<><x><y/></x></>)())) let constructor, __iterator__;");
tryItOut("L:if(<x><y/></x>) {{}export *; } else ;");
tryItOut("L: {var __count__ = @foo;export constructor; }");
tryItOut("/*infloop*/M:do if(window) prop, __parent__ = <><x><y/></x></>; else  if ( /x/g .hasOwnProperty(\"prop\")) {return; } while(<x><y/></x>.isPrototypeOf(<><x><y/></x></>) -= (__iterator__ = <x/>));");
tryItOut("if(new <x><y/></x>( /x/g )) ; else  if (<><x\f><y/></x></>.__defineSetter__(\"prop\", function  __noSuchMethod__ () { yield 1e81 } )) throw <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(<x/>; [[1]]; undefined) {export *;continue ; }");
tryItOut("export *;");
tryItOut("throw StopIteration;");
tryItOut("L:if(__proto__ = __noSuchMethod__.__count__ setter= eval) { if (new (new Function)(this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; if(null) {} else  if (3.141592653589793) return <x><y/></x>;; yield y; }))) yield *; else \tyield <x><y/></x>;}");
tryItOut("try { gc()\f } catch(prop) { {} } finally { yield; } ");
tryItOut("L: /*for..in*/for(const __noSuchMethod__ = 1e+81 in  /x/g ) {; }");
tryItOut("/*infloop*/do {[({ prop: ({ constructor: <><x><y/></x></>.__iterator__, prototype: __count__ }) }), , , ({ [({ __parent__: [] })]: [, , __count__, , ] })] } while(prototype-=<><x\t><y/></x></> ? <x><y/></x> : this);");
tryItOut("with({}) constructor = __noSuchMethod__;");
tryItOut("__noSuchMethod__ = <x><y/></x>;");
tryItOut("export __proto__;\nL: return;\n");
tryItOut("M:with(3.141592653589793){throw __count__; }");
tryItOut("/*infloop*/for( =  /x/ .isPrototypeOf((-1));  /x/ ; constructor.(<y><z/></y>.__defineGetter__(\"__proto__\", (1 for (x in []))))) break ;");
tryItOut("/*infloop*/while(prop.throw([,,z1]))return {};");
tryItOut("if(null) var return;; else {(1 for (x in []))\n }");
tryItOut("/*infloop*/for(var __proto__ = <><x><y/></x></>; *; true) {continue L; }");
tryItOut("{}");
tryItOut("if([,] ? <y><z/></y> : undefined) /*infloop*/do {function (__proto__, __noSuchMethod__) { return; } throw ({a2:z2}); } while([11,12,13,14].sort) else return window;\nfunction(y) { yield y; (<x><y/><\t/x>).watch; yield y; }\n const __count__;");
tryItOut("if(((this)[ \"\" ])\n) { if ([[1]]++) yield <><x><y/></x></>;} else {;/*infloop*/for(var __count__;  '' ; __iterator__) {break M;var __iterator__ = this; } }");
tryItOut("M:if([__proto__.continue ; getter= 'haha'.split].sort(function(q) { return q; })) { if (__parent__ = 0x99) (<x><y/></x>).apply else {throw  \"\" ;M:switch(1e-81) { case @foo: continue L;break; case 7: yield true;{}break; default: {}function (__count__) { ({}); } case 4: break;  } }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [,]) yield -1;");
tryItOut("if(<y><z/></y>) {export *; } else  if ((prop ? <y><z/></y> : <x/>)) { } else (false).__defineSetter__\n");
tryItOut("/*infloop*/for(const __proto__ = constructor; <x><y/></x>; <><x><y/></x></>) {;const __parent__ = <x><y/></x>; }");
tryItOut("/*for..in*/for([constructor, __iterator__] =  \"\" .throw(<><x><y/></x></>).isPrototypeOf(false) / #0=({__noSuchMethod__: prototype.constructor setter= function  __count__ () { return  /x/g  } }) in this.__defineSetter__(\"constructor\", (1 for (x in [])))) {/*for..in*/M:\tfor(let [__iterator__, prototype] = 1.3 in __count__) yield ; }");
tryItOut("/*infloop*/L:while(<y><z/></y>)prototype =  \"\" ;");
tryItOut("/*for..in*/for(const (__proto__) in (([1,2,3,4].slice)((uneval((<x><y/></x>.throw(<><x><y/></x></>)))))))throw window;while(((yield  '' ) / ('fafafa'.replace(/a/g, (/a/gi).apply))) && 0)/*for..in*/for(let __noSuchMethod__ in (([1,2,3,4].map)(<><x><y/></x></>)))return;");
tryItOut("return __noSuchMethod__.watch(\"prototype\", [1,2,3,4].slice).valueOf(\"number\");");
tryItOut("while(((<y><z/></y>)) && 0){/*for..in*/L:for(const __count__ in window || @foo) return\n }");
tryItOut("/*infloop*/for(const prototype =  /x/  = new (eval(\"__count__\", true)); <><x><y/></x></>.__iterator__; new ({}).__lookupGetter__((@foo.__defineSetter__(\"__proto__\", function(y) { yield y; ; yield y; })), <y><z/></y>)) /*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in __noSuchMethod__) *::*\n");
tryItOut("/*infloop*/while(function  prop (__parent__)this){;continue M; }");
tryItOut("{__proto__ = null, prototype;export prop; }");
tryItOut("{{with({prop: -1})L: prototype = <><x><y/></x></>, constructor; }let (prototype) { {throw __parent__;yield <x><y/></x>; } } }");
tryItOut("if([({ prototype: __iterator__ }), , , , prototype] = <x><y/></x>.__defineGetter__(\"constructor\", function (prop) { return @foo } ) , eval(\"null\",  '' )) {const __noSuchMethod__ = [z1,,], __proto__;{} } else  if (( /x/g  , <x><y/></x>) .@x:: 'fafafa'.replace(/a/g, Math.sin)) if(<><x><y/></x></>) yield; else gc()");
tryItOut("switch((true.eval(<x><y/></x>))) { case 4:  }");
tryItOut("/*for..in*/for(var __count__ in ((function (__iterator__, __noSuchMethod__) { return (p={}, (p.z = #1=({__parent__: <x><y/></x>}))())((\n__proto__.watch(\"prop\", eval))) } )(033)))L: ;");
tryItOut("export __iterator__;");
tryItOut("/*infloop*/for(__parent__-=(constructor = __iterator__.@foo); [(--{})].map(gc); (<><x><y/></x>\t</>.throw(<><x><y/></x></>)) if ( /x/ )) return null;\n(<><x><y/></x></>);\n");
tryItOut("yield <><x><y/></x></>;");
tryItOut("/*infloop*/do {try { yield <><x><y/></x></>; } catch(__iterator__ if (function(){(1 for (x in []))})()) { const __noSuchMethod__; } catch(constructor) { gc() } finally { yield prop; }  } while(++this += __noSuchMethod__);");
tryItOut("if(([1].__defineGetter__(\"constructor\", Function/*) <<= ([1,2,3,4].slice)(*, *))) { if (((new arguments())(#0=[<><x><y/></x></>]))) {__proto__ = window, prop = function ([y]) { }; }} else {let(__count__ = #1=[#1#]) { continue ; }");
tryItOut("/*for..in*/for(__proto__ = ([__parent__, , ] = constructor) in ((function::constructor.__count__ setter= (*).call) @ <x/>)) export *");
tryItOut("L:with({__iterator__: \n__iterator__.__defineSetter__(\"__proto__\", function  prop (default: case 3: break M;break; break; , __count__) { /*for..in*/for(var [__iterator__, __noSuchMethod__] = #3={a:#3#} in @foo) {;break M; } } )}){}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in *) return;");
tryItOut("L: gc");
tryItOut("yield <y><z/></y>;");
tryItOut("");
tryItOut("let([[__noSuchMethod__, , , __proto__, ], prototype]) ((function(){with({}) { return __iterator__ = #3={a:#3#}; } })());");
tryItOut("do constructor; while(( /x/ ) && 0);");
tryItOut("let (prototype, [[], [({ constructor: ({ function::constructor\f: ({ __noSuchMethod__: constructor, __iterator__: __iterator__ }) })\n })]]) { yield; const __noSuchMethod__; }");
tryItOut("/*infloop*/for(var prototype; (__parent__ = __parent__ = 1.2e3); this.zzz.zzz) {return undefined }");
tryItOut("L: {return this;var prop;\f }");
tryItOut("if(('fafafa'.replace(/a/g, __parent__ = ((constructor)[this])))) { if ((function(y) { yield y; ;; yield y; }\n).apply) throw try { yield; } catch(__iterator__ if (function(){{}})()) { break M; } catch(prototype) { throw 0.1; } ;} else {let constructor =  /x/g , constructor = <x><y/></x>; }export __count__;");
tryItOut("/*infloop*/for(var prototype; 1e+81; !*::*) L:if(({})[1e-81]) {{;return; } (constructor) } else  if ( \"\" ) return;");
tryItOut("constructor = prop;");
tryItOut("L: let prototype, __parent__;");
tryItOut("/*infloop*/do {continue M;if(function ([y]) { }) {gc()export *; } else  if (__count__) ; else return this; } while(([( /x/  for (prototype in <x><y/></x>))].sort(Math.sin)));");
tryItOut("return;");
tryItOut("if(__proto__) M:with(this.__defineSetter__(\"__proto__\", ({}).hasOwnProperty))let __iterator__;");
tryItOut("M:while(((p={}, (p.z = __iterator__)())) && 0)export *;");
tryItOut("with(new <x><y/></x> += 3.141592653589793([({ set __iterator__() { return window }  })]))gc()");
tryItOut("export __proto__;");
tryItOut("throw [z1,,];");
tryItOut("arguments;");
tryItOut("/*for..in*/M:for([1.3, constructor] = this.zzz.zzz ? typeof @foo : (Function()) in <y><z/></y>.__defineSetter__(\"__noSuchMethod__\",  '' )) {var [prop, \f, __iterator__] = [__parent__];var ({ prop: __noSuchMethod__ }); }");
tryItOut("with({__count__: let (prototype = true) prototype = *::*})throw <><x><y/></x></>;");
tryItOut("let(getter, __proto__) { function  prototype (constructor, __proto__) { return window }  const __noSuchMethod__;");
