tryItOut("{let __proto__ = <><x><y/></x></>; const prototype;/*infloop*/for(let prototype; (uneval(new (Math.pow\r)())); prop = null) /*for..in*//* nogeckoex bug 349964 */ for  each((<x><y/></x>)( /x/g ) in <x/>) prototype; }");
tryItOut("throw -3/0; const __count__;");
tryItOut("if(\n(x::prototype = false)) {yield 1e4; } else  if ('fafafa'.replace(/a/g, gc)) {try { return null; } catch(constructor) { (({a1:1})); } /*infloop*/for(window *= <y><z/></y>; 3[__noSuchMethod__]; @foo .@  \"\" ) throw __parent__; }");
tryItOut("/*for..in*/for(let [__proto__, constructor] = (uneval(new @foo.hasOwnProperty(\"function::__count__\").__defineSetter__(\"prop\", (this).watch)((*::*.__proto__), <y><z/></y>))) in ((<><x><y/></x></>).watch(<><x><y/></x></>, undefined)).__defineGetter__(\"__parent__\", new Function)) ;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prop] = 0.1.__proto__ = null in <x/>) {export prototype; }");
tryItOut("switch(<x><y/></x>) { default: ; }");
tryItOut("break ; const getter;");
tryItOut("/*infloop*/for(<><x><y/></x></> .@*:: eval(\"this.zzz.zzz\", <x><y/></x> ^ false); \nfalse.__lookupSetter__(\"__proto__\"); <x><y/></x> :: <x><y/></x>.(<><x><y/></x></>)) ([z1]);");
tryItOut("L: throw <y><z/></y>;");
tryItOut("if(new gc(yield;.isPrototypeOf(<x><y/></x>) > ((<><x><y/></x></>)(<x/>, <x/>)))) {/*infloop*/for(const [__count__, , , __proto__, __parent__] = (true[ /x/ ]); <x><y/></x>.(window); ( /x/g )()) break M; } else  if (new (try { __parent__, prototype; } finally { return; } )() / null.unwatch(\"prop\")( get prototype __count__ (__parent__) { return <x><y/></x>; } )) throw StopIteration; else {prototype = <x><y/></x>, __iterator__ = [[1]];(\fthis--); }");
tryItOut("do { } while((( /x/  , 1e81).watch(\"function::constructor\", (*::*).watch)) && 0);");
tryItOut("{__count__;/*for..in*/for(var [prototype, __parent__] = (.@foo) in <x><y/></x>) const constructor; }");
tryItOut("let (prop) { L: {let constructor = -1;<y><z/></y>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x><y/></x>) yield;");
tryItOut("yield ({__proto__: [,,] });");
tryItOut("try { throw StopIteration; } finally { return (__count__ = __parent__).constructor = <x><y/></x>.yoyo(<><x><y/></x></>); } ");
tryItOut("/*infloop*/M:for(const __proto__; <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((({prop setter: window, prop: 1e+81 }))); -1) const constructor;");
tryItOut("prototype = __iterator__\n");
tryItOut("with({}) { __proto__.constructor = prototype; } ");
tryItOut("export prop; const prop;");
tryItOut("L: {constructor = *, <x/> = window;//h\nthrow window; }");
tryItOut("let (__proto__) {  }");
tryItOut("yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ( /x/ )( \"\" ) in (function ()\n { return this.zzz.zzz } )) []");
tryItOut("/*for..in*/L:for(const __parent__ in <x><y/></x>) {/*infloop*/while(false)yield <x><y/></x>; }");
tryItOut("default: export prop;case <x><y/></x>: 5.0000000000000000000000;break; break M;export __parent__;break; case 5: /*infloop*/L:for(__count__ = <x><y/></x>; <x><y/></x>; this) ");
tryItOut("with({__iterator__: [(null / 5.0000000000000000000000).*]}){var __count__;{__iterator__gc()function (__count__, __proto__)prop } const constructor; }");
tryItOut("if(yield (uneval([[1]].some(<x><y/></x>))).eval(((__iterator__.__count__) , ([1,,] %= [[1]])))) L: let prototype = 1e4, __proto__ = @foo;");
tryItOut("eval{}");
tryItOut("<!--yy-->");
tryItOut("with({}) { return [window.__lookupSetter__(\"__count__\") if (<><x><y/></x></>)]; } ");
tryItOut("{yield this;; }");
tryItOut("/*infloop*/L:for(const __iterator__ = prototype.(-3/0); (window = <><x><y/></x></>.@foo); ([ /x/g ].some([1,,]) &= __count__(*::*))) throw <x><y/></x>;");
tryItOut("__noSuchMethod__");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do  while([1,2,3,4].slice);");
tryItOut("{__count__; }");
tryItOut("/*for..in*/for(let ({ __parent__: __parent__ }) in \n(-0)) do {/a/giexport *; } while((*::*) && 0);");
tryItOut("L:if([[1]]) const x::prototype; else  if (+<x><y/></x>) return <><x><y/></x></>; else {throw (-0); }");
tryItOut("export *");
tryItOut("if(( /* Comment */((1e-81.propertyIsEnumerable(\"__iterator__\")))[[15,16,17,18].filter(gc, <y><z/></y>)])) { if (({ set prop(__parent__, __noSuchMethod__) { /*for..in*/for(var [__noSuchMethod__, prop] = ((4.)[<><x><y/></x></>]) in  '' ) yield; } ,  get __count__ __noSuchMethod__ (__noSuchMethod__: ((({ set  { yield __count__ }  prototype (__parent__) { return <x/> }  }))).call((__proto__.__iterator__ getter= (<><x><y/></x></>).__defineSetter__), (.2.__lookupGetter__(\"__proto__\"))))((<y><z/></y>)[<x><y/></x>].__lookupGetter__(\"each\")) })) {/*for..in*/for(var __proto__.__parent__ in constructor.__iterator__) ; } else {yield <y><z/></y>; }}");
tryItOut("let ([]) { let prop, __iterator__; }");
tryItOut("/*infloop*/do {yield __proto__;{} } while(__iterator__.constructor);");
tryItOut("/*for..in*/for(var function::prop(new ([,,z1])(<y><z/></y>,  /x/g )) in <x><y/></x>) /*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in __noSuchMethod__) function(y) { yield y; gc(); yield y; }");
tryItOut("throw constructor;");
tryItOut("/*for..in*/L:for(var set in __proto__ = prop) /*infloop*/for(((yield <x><y/></x>)) .. __proto__ = false; __noSuchMethod__ = [[1]];  '' .__defineGetter__(\"__parent__\", 0/0.@*\t)) {const __iterator__ = window, __proto__; }");
tryItOut("/*infloop*/for(const ({ prototype: ({ __parent__: __count__ }) }) = (prototype = [z1] >>= <y><z/></y>.hasOwnProperty(\"__parent__\")); ((this.__defineSetter__(\"__iterator__\", gc))).call(void @foo & (<x><y/></x>.__defineGetter__(\"prototype\", Math.sin)),  ''  === false.hasOwnProperty(\"__noSuchMethod__\")); ({constructor getter: ({}).__lookupGetter__ })) {yield;throw true; }");
tryItOut("try { this.zzz.zzz; } catch(prop) { yield <y><z/></y>; } ");
tryItOut("return (continue M) % <x><y/></x> /= true\n;");
tryItOut("/*for..in*/for(let [[], prototype] = <zzz>__proto__</zzz> in <x><y/></x>) {continue L; }let (constructor) { /*infloop*/while((<><x><y/></x></>\n)){yield window; } }");
tryItOut("/*infloop*/for(prop; void window; 'fafafa'.replace(/a/g, function(q) { return q; })) (window).__defineSetter__");
tryItOut("while((\n \"\" ) && 0){const __parent__ = @foo; }");
tryItOut("if((Date())) __count__ else do yield <x><y/></x>; while((0.1) && 0);");
tryItOut(";");
tryItOut("");
tryItOut("{;return .2; }");
tryItOut("if((<x/>())) {throw constructor; } else  if (<y><z/></y>.__lookupSetter__(\"__noSuchMethod__\")) {throw <y><z/></y>; } else return 0x99;");
tryItOut("if(__count__ = <x/>.unwatch(\"prop\")) { if (<bbb xmlns:ccc=\"[] + #1#\"><ccc:eee></ccc:eee></bbb>) /*for..in*/for(const __iterator__ in *) (;).call} else *;");
tryItOut("M:do {if((((<x><y/></x>).watch)(*))) {continue L;; } else  if (<><x><y/></x></>.isPrototypeOf( '' )) {export *;yield true; } else {__count__ }return (\n<><x><y\r/></x></>); } while(( /* Comment */<y><z/></y>.yoyo(this)) && 0);");
tryItOut("/*for..in*/for(const __proto__ in ((gc)([[]]))){[1,,]; }");
tryItOut("if() ; else {var prototype =  \"\" ;const __count__; }");
tryItOut("try { {} } finally { {} } ");
tryItOut("while(((*::* .@ 0/0)) && 0){yield;const __proto__, constructor = #1=[#1#]; }");
tryItOut("break \nbreak M;");
tryItOut("gc()\n");
tryItOut("M:if(<x/>) throw  /x/ ; else  if (window) {return; } else {( /x/ ); }");
tryItOut("switch(<y><z/></y>.valueOf(\"number\") |= gc()) { default: export *;break;  }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = constructor =  /x/ .__proto__ in (<x><y/></x>())) {export prop; }");
tryItOut("return\n/*infloop*/M:for(*::*; <x><y/></x>; <x/>) let constructor, __count__ = <><x><y/></x></>;\n/*infloop*/M:for(const prototype = null.@foo; constructor =  ''  <= window |  '' ; prototype.(<><x><y/></x></>)) __noSuchMethod__\n");
tryItOut("L:if(constructor = ((function ()__iterator__)()).throw((@foo)[ /x/ ])) {;/*infloop*/for(var __proto__ =  /x/ ; function(id) { return id }; 3) return; } else M:if(constructor = constructor) gc() else 'haha'.split");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in *( /x/ , *)) {const __proto__ = undefined, __iterator__ =  \"\" ; }return; }");
tryItOut("M:if([<x><y/></x>.(0/0).yoyo(new Date(undefined))]) yield;");
tryItOut("if((__parent__ <<  '' )) let __count__, prop; else  if (new ({}).__lookupGetter__(window)) {export *;prop; }");
tryItOut("yield -0;;");
tryItOut("/*infloop*/for(<><{prototype}><xxx>{__noSuchMethod__}</xxx>yyy</{prototype}></>; <x/> if (<x/>).__defineSetter__(\"constructor\", ((new Array(<y><z/></y>))).watch); (<><x><y/></x></>)(<><x><y/></x></>)) {yield this; }");
tryItOut("if((this >>= window)) {__parent__.prototype } else  if (prototype = 3/0.throw(~\fnull)) var __iterator__; else {let;throw __count__; }");
tryItOut("/*infloop*/for((p={}, (p.z = <><x><y/></x></>)()); (this.zzz.zzz); @foo.__defineGetter__(\"__noSuchMethod__\", Math.pow)) (<><x><y/></x></>);");
tryItOut("{gc() }");
tryItOut("throw <x/>;");
tryItOut("{let __iterator__;(undefined).__defineSetter__ }");
tryItOut("switch(<x><y/></x>) { case 4: continue ;case <><x><y/></x></>: undefined;default: case <><x><y/></x></>: (0);break; throw window;case 7: break;  }");
tryItOut("{throw <y><z/></y>;yield; } const prop;");
tryItOut("/*infloop*/L:while(<y><z/></y>.__lookupSetter__(\"__iterator__\")\n)return <x><y/></x>");
tryItOut("if(0) { if ((__count__)) {{} } else {gc() }}");
tryItOut("do throw <><x><y/></x></>; while((<xxx>{__parent__}</xxx>) && 0);");
tryItOut("with({constructor: <><x><y/></x></>})prototype = null;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (~(constructor ^= <x><y/></x>)) in  '' ) {let (constructor) { function(q) { return q; } } }");
tryItOut("<x/>;");
tryItOut("for(let y in []);");
tryItOut("if(4.) {const __proto__ = __count__, prototype = window; }");
tryItOut("M:with(__count__.([11,12,13,14].filter))[[1]];");
tryItOut("if( /* Comment */<x><y/></x>) yield; else  if (prototype.__iterator__ setter= function (constructor) { yield <></> } ) yield;");
tryItOut("let (__parent__, [({ __count__: prototype, __count__: __count__ })] = (({}).hasOwnProperty).call(3.141592653589793, <><x><y/></x></>)) { try {  } catch(prototype) { throw  \"\" ; } finally { yield; } ; }");
tryItOut("{with({}) gc() }");
tryItOut("switch(<><x><y/></x></>) { case [z1]:  }");
tryItOut("M:with({__count__: this.__defineSetter__(\"__proto__\", Math.pow)})Math.sin");
tryItOut("if(this.__defineSetter__(\"__proto__\", [1,2,3,4].slice)) export __parent__;");
tryItOut("do {{} } while((eval(\"#1#\", <x/>)) && 0);");
tryItOut("L:if(0.1) {export __noSuchMethod__; }");
tryItOut("export constructor;\n\n");
tryItOut("");
tryItOut("/*for..in*/M:for(const __parent__ = [1,,] in 5.0000000000000000000000) {<><x><y/></x></>;gc() }");
tryItOut("throw StopIteration;");
tryItOut("switch( /x/g ) { case ( '' .@*): break; if(undefined) __proto__ = undefined, __proto__; else  if (window) const __parent__;default: return;break; case 1: /*infloop*/M:for(-3/0; __iterator__; prop) {yield;{} }case 3:  }");
tryItOut("/*infloop*/for(const [function::__noSuchMethod__, __count__, prop] = *::*.*; \t(<><x><y/></x></>(this, __count__)); this.__count__) {export *; }");
tryItOut("while(((__noSuchMethod__.x::yield getter= ({ __parent__: prototype }) = (<x><y/></x>.(__count__)))) && 0){if( /x/g ) {return; } else  if (-0) export __proto__; else {return __iterator__; }'prototype }");
tryItOut("__iterator__ = prototype;");
tryItOut("L: yield window;");
tryItOut("L:if({}) { if (<x/>) return <x><y/></x>; else {__parent__ =  /x/g ;gc() }}");
tryItOut("with({prototype: constructor-=([z1].__defineGetter__(\"prototype\", ({}).__lookupGetter__))})switch((uneval(<x><y/></x> >>> (function ([y]) { })()))) { default: return;break;  }");
tryItOut("M:if(<y><z/></y>) { if (__noSuchMethod__) yield <x/>; else {return function(id) { return id };\t }}");
tryItOut("<y><z/></y>; const __count__;");
tryItOut("let (__count__ =  '' , __noSuchMethod__) { /*infloop*/for(let __iterator__ = [z1,,]; false; 0.1) {export __parent__;; } }");
tryItOut("if(undefined\n) {(*); }");
tryItOut("prototype = __parent__;");
tryItOut("/*infloop*/do {; } while((new ((__parent__).__defineSetter__)(window)));");
tryItOut("/*for..in*/for(let constructor =  /x/g  -= * in <x/>) export prop;return <x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in 0/0) {throw  /x/ ; }");
tryItOut("L:if(let (({})(window), constructor = (constructor.__lookupSetter__(\"constructor\").propertyIsEnumerable(\"prop\"))) (yield (1e-81.__lookupGetter__(\"prototype\"))).isPrototypeOf(constructor / x::__iterator__).@foo) { if ((<x><y/></x>)[null].propertyIsEnumerable(\"__parent__\")) {if((!@foo)) yield 5.0000000000000000000000; else  if (true.@*) (-3/0);L: yield; }} else { }");
tryItOut("Function");
tryItOut("while(( /x/g  << window) && 0)/*infloop*/for(let constructor = (\fnew /a/gi(((window).watch).call)); __noSuchMethod__.__proto__ = false ? <x><y/></x> :  /x/ ; <><bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb></>) {switch(<><x><y/></x></> ?  /x/g  : [1,,]) { case 0: var prototype, __iterator__;break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__.__count__ in eval(\"let __noSuchMethod__ = [,,], __iterator__ = <><x><y/></x></>;\", <y><z/></y> .. <x><y/></x>).__lookupGetter__(\"__proto__\") |= @foo) /*infloop*/do {continue ;; } while([[]]);");
tryItOut("switch(( /x/g  .@x::  \"\" ) * <><x><y/></x></>--) { case 2: while((({})) && 0)<><x><y/></x></>; }");
tryItOut("gc()");
tryItOut("export *;");
tryItOut("throw constructor;");
tryItOut("if(#1=[#1#]['prop'] = let (__proto__ = window) <><x><y/></x></>) /*for..in*/for(var prototype in <><x><y/></x></>) {<y><z/></y>; }");
tryItOut("const __noSuchMethod__;/*for..in*/for(constructor in (((__parent__).__defineSetter__)( '' )))return;");
tryItOut("/*for..in*/for([__parent__, prototype] = __count__ = prototype = throw window; in yield true.unwatch(\"__proto__\")) {/*for..in*/M:for(\fconst prototype in ((gc)(prop = window)))yield;L: {/*infloop*/for(var __proto__; this &= false; <y><z/></y> .@ <><x><y/></x></>) yield; } }");
tryItOut("/*infloop*/for((__count__.prototype = *.__lookupGetter__(\"__iterator__\")); \n(); undefined) {var __proto__, __iterator__; }");
tryItOut("Math.pow\n{}\n");
tryItOut("gc()\n{}\n");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let //h\n__noSuchMethod__ in <><x><y/></x></>) {if(function ([y]) { }) {yield prototype; } }__count__; }");
tryItOut("{;(__proto__); }");
tryItOut("export *");
tryItOut("if( /* Comment */<><x><y/></x></> % <x><y/></x>) {return;let __proto__; } else  if ((this.__defineSetter__(\"constructor\", __iterator__))) this else {export *;var prop, __noSuchMethod__; }");
tryItOut("/*for..in*/for(const __parent__ = <y><z/></y> in  /x/g ) yield;");
tryItOut("/*infloop*/while(( /* Comment */null))do {throw window;return; } while((prop) && 0);");
tryItOut("if(<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>) {yield;return; }");
tryItOut("with({}) { with({}) { return; }  } ");
tryItOut("{}\n{}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */__iterator__");
tryItOut("with({}) __proto__ = constructor;");
tryItOut("return;");
tryItOut("/*infloop*/for(let __count__;  /* Comment */__parent__; Math.pow(new <x/>.isPrototypeOf(({}))([15,16,17,18].sort((constructor).__defineSetter__, 5.0000000000000000000000))).__proto__ = (p={}, (p.z = <><x><y/></x></> >>  /x/g )()).eval(({constructor }))) {if() if(prototype = <><x><y/></x></>) throw <><x><y/></x></>; else {} }");
tryItOut("([1,,])(@foo)");
tryItOut("if(this\n) (function  __count__ (getter, prop)<><x><y/></x></>).apply else yield @foo;/*for..in*/for(let prop in 1e-81) {let __count__ = null, __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in 3.141592653589793) continue M");
tryItOut("with({__parent__: *::*\n}){if(window) <y><z/></y>; else  if (<x/>)  else  }");
tryItOut("/*infloop*/()for(let [prototype, ({ prop: ({ __proto__: [constructor] }), __proto__: ({ __noSuchMethod__: [, , , [, __noSuchMethod__, __iterator__], ], constructor: __iterator__ }) })] = window.__lookupGetter__(\"__proto__\")(({ get __count__ __iterator__ () { return undefined }  }).@*); /a/gi()) {if(undefined) {} else  if (__iterator__) (function ([y]) { }); else [,];(false); const {with(<y><z/></y>)throw false; }; }");
tryItOut("/*for..in*/for(var prototype in ((function(q) { return q; })([[z1,,]].some('haha'.split\t))))continue ;");
tryItOut("if(1e-81) {yield; } else  if ((new (eval)() ^ ({ __parent__: __iterator__ }) = eval(\"this\",  /x/ ).hasOwnProperty(\"prototype\"))) yield  \"\"  else __count__ = <x/>;");
tryItOut("/*infloop*/for(var __noSuchMethod__; <><xxx {constructor}={(__proto__ = <y><z/></y>)} /></>; window >> [,] =  /x/g ) {export __iterator__;break ; }");
tryItOut("{}\n const prototype;");
tryItOut("if(true) gc() else throw <x/>;");
tryItOut("(<x><y/></x>);");
tryItOut(" const __noSuchMethod__;");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <x><y/></x>) {gc()return; }");
tryItOut("if(<x/>) { if (eval(\"this.throw(prop)\", delete.__proto__)) (<x/>);} else return;");
tryItOut("this.zzz.zzz;");
tryItOut("if(<><bbb xmlns=\"(<x><y/></x>.__lookupSetter__(\"__noSuchMethod__\"))\"></bbb></>) {/*infloop*/for(prop; eval(\"[0.1]\", <x><y/></x> >>>=<><x><y/></x></>);  * -3/0) {return; } } else  if (('fafafa'.replace(/a/g, (this).__defineSetter__))) {/*for..in*/for(let __iterator__ in ((([1,2,3,4].slice).apply)(0/0)))return <x/>; }");
tryItOut("throw false");
tryItOut("/*for..in*/M:for(const prop = (__proto__ = __parent__) in __proto__) {; }");
tryItOut("with(__count__ = __parent__.hasOwnProperty(\"constructor\"))var __parent__\nprototype = <x><y/></x>, __noSuchMethod__ = undefined;");
tryItOut("return ~<>__parent__</> - ({});");
tryItOut("if(<><bbb xmlns=\"<><x><y/></x></>\">yyy</bbb></>) <x/> else  if (*::*) { } else {export prop; }");
tryItOut("/*for..in*/\ffor(const [__parent__, prop] = (continue L - (prop = <x><y/></x>)) in this > [1,,]) {M:if((uneval( /x/g ))) let __parent__ = -3/0, constructor =  '' ; else  if (5.0000000000000000000000 % function ([y]) { }) (1.2e3); else {const prop, __noSuchMethod__; } }");
tryItOut("M:\fif(({__count__: <><x><y/></x></> if (<x><y/></x>) })) let prop, prop; else  if (<><> </></>) /*infloop*/for(const constructor = this; [1,,]; <x><y/></x>) {yield; } else {/*infloop*/while(({a2:z2}))return;with(Boolean(__iterator__, 1e81)); }");
tryItOut("L:with({__iterator__: <x/>}){return  /x/ ; }");
tryItOut("L: if((p={}, (p.z = (Function)())())) { if ((([(-0)].sort('haha'.split)).__count__)) {prop\n } else throw <y><z/></y>;;\r}");
tryItOut("/*infloop*/while(3/0){return;yield <><x><y/></x></>; }");
tryItOut("/*infloop*/M:while(((p={}, (p.z = __count__)())).throw((p={}, (p.z = this)()))){with({__parent__: __parent__});continue ; }\nreturn;\n");
tryItOut("L: yield <x/>\n__noSuchMethod__ = __parent__;");
tryItOut("if([11,12,13,14].some) {throw <x/>; } else  if ((<y><z/></y>.__defineGetter__(\"prototype\", @foo))) constructor = window, __count__ = *; else {/*for..in*/for(__noSuchMethod__(prop = <x><y/></x>) in (((<y><z/></y>).watch)(new (window)((<x/> - <x><y/></x>)))))if(<x/>++) { if (undefined + this) {(window);let prop; }} else yield <x><y/></x>; }");
tryItOut("export __parent__;");
tryItOut("/*for..in*/for(const prop = constructor.__parent__ in ~(yield this)) {L:switch(<y><z/></y>) { case 3:  }\nconst __iterator__;\nthrow StopIteration; }");
tryItOut("this.zzz.zzz;");
tryItOut("with([[1]])while((#2=window) && 0)throw <><x><y/></x></>;switch(__count__.__count__ = 3.watch(\"__parent__\", Math.sin)) { case this.zzz.zzz: break; M:if(((<y><z/></y>)[<x/>].isPrototypeOf(__count__.__count__ getter= eval))) {return let prototype, prop;;let __parent__ = null, __iterator__; } else  if (([z1].@*)) var __proto__, __parent__ = __noSuchMethod__; }");
tryItOut("break \nM:with({prototype: undefined});\t");
tryItOut("/*infloop*/for((eval(\"prop = <><x><y/></x></>\", <y><z/></y> <<  '' ).yoyo(<y><z/></y>)); <bbb xmlns:ccc=\"constructor-=false -= *::*\"><ccc:eee></ccc:eee></bbb>; (<x><y/></x>.valueOf(\"number\").propertyIsEnumerable(\"__count__\"))) {}");
tryItOut("if((({ set constructor(prop) \"\" (<><x><y/></x></>).yoyo(delete false), __iterator__: (let (__count__ = @foo, __count__ = null) window\n) }))) { if (__parent__+=new break L;(function ([y]) { }, <><x><y/></x></>).prototype.valueOf(\"number\")) {{}/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in window) Math.sin }} else __iterator__ = *, __noSuchMethod__ = .2;");
tryItOut("for(let y in []);");
tryItOut("gc()");
tryItOut("let (__proto__, __iterator__ = __count__) { return <x><y/></x>; }");
tryItOut("/*for..in*/for(const [prop, __noSuchMethod__] = <x/> + false\n in delete <x><y/></x>) var constructor, function::prop = 3/0;");
tryItOut("L: {throw  /x/ .__parent__;M:with((yield (-0)))export prop\n }");
tryItOut("/*infloop*/for(const prototype; constructor = <y><z/></y>, prototype = ([11,12,13,14].sort); <y><z/></y>) {__noSuchMethod__;\\ } const __count__;");
tryItOut("/*infloop*/for(eval(\"yield <x><y/></x>.__lookupGetter__(\\\"prototype\\\");\", <y><z/></y>); (*)[Function(constructor\f = -3/0)]; new  /x/ (this)) yield (prototype.prop =  /x/ );");
tryItOut("/*infloop*/L:for(<ccc:ddd> </ccc:ddd>.@*; false == *; (constructor = <x/>)) export *;");
tryItOut("/*for..in*/M:for(__iterator__.__proto__ in (((new Function(\"throw constructor;\")))(\tthis ^ false))){return; }");
tryItOut("/*infloop*/for(const __count__; ([15,16,17,18].filter(((/a/gi).call).call, <y><z/></y>[__count__])); (__parent__ = <><x><y/></x></>)[__count__]) {throw <x/>; }");
tryItOut("if(__proto__.__count__) {let prop = @foo;yield; } else  if ((__count__.(<x><y/></x>))) var __parent__;");
tryItOut("throw <y><z/></y>;");
tryItOut("let (setter) { if(constructor = true) {let __noSuchMethod__; } else continue ; }");
tryItOut("/*infloop*/for(let prototype; <x/>; <zzz>(function ([y]) { })()</zzz>) if((<><!--yy--></>.(__parent__.valueOf(\"number\")))) /*infloop*/for(const __count__; ((1 for (x in [])))(<x><y/></x>, <x><y/></x>); <x/>) continue  else {let prop, __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.prototype in (false)(<x><y/></x>)) {if(undefined) { if (prop) {throw  /x/g ; } else {yield;<x><y/></x>; }}yield *::*;var __parent__; }");
tryItOut("L: 'haha'.split");
tryItOut("{'haha'.split }");
tryItOut("throw StopIteration;");
