tryItOut("/*infloop*/L:do {yield;return *::*; } while(Number(({__proto__: <x><y/></x>, __noSuchMethod__ setter: ( /x/ ).watch }), *));");
tryItOut("yield; const __proto__;");
tryItOut("/*infloop*/for(__proto__; (*).call(<><x><y/></x></>, ); new ([1,2,3,4].slice)([<x><y/></x>].sort([1,2,3,4].slice), (({}).__lookupGetter__)(<x><y/></x>,  /x/ ))) {/*for..in*/for(var prototype = new function  function::__parent__ (__proto__, prototype) { return  \"\"  } ([1,,]) in  '' ) {const __parent__ = __noSuchMethod__, __proto__ = undefined; } }");
tryItOut("M:with((RangeError()) -= __iterator__)export *;");
tryItOut("/*infloop*/L:do {constructor;/*infloop*/while(null){\flet prop = <x><y/></x>, __parent__; } } while((eval(\"window.__defineSetter__(\\\"prop\\\", ({}).hasOwnProperty)\", (null.hasOwnProperty(\"prop\")))));\n{if(<x><y/></x>) { if (*) } else {{}1e+81; } }\n");
tryItOut("M:with([[1]]){gc() }");
tryItOut("return;");
tryItOut("constructor = __parent__;");
tryItOut("{switch(prototype) { default: throw <x><y/></x>;break;  }prototype = prop; }");
tryItOut("export prop; const __iterator__;");
tryItOut("if(new String(1e+81)(\n<><x><y/></x></>, true)) { if (<>(new Function(@foo.unwatch(\"prototype\")))</>) prop} else L: yield *;\r");
tryItOut("\rgc()/*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in window) {__parent__ = false, __proto__;yield; }");
tryItOut("while((({}).__lookupGetter__) && 0){export *; }");
tryItOut("while(([Error(*::*)]) && 0){; }");
tryItOut("L:with({constructor: __iterator__}){yield;{} } const __iterator__;");
tryItOut("((new 'haha'.split()) ^ ((yield __parent__)).constructor);");
tryItOut("export *\n");
tryItOut("if(<><x><y/></x></>.@foo) { if (((constructor.watch(\"prop\", [1,2,3,4].slice)))(__proto__.prototype = [[]], <x/>)) {*; }} else Function");
tryItOut("yield <x><y/></x>.valueOf(\"number\");");
tryItOut("M:if(new (arguments)(prop: *::*((new try { w } catch(__parent__ if (function(){gc()})()) { export *; } finally { export *; } ())))) throw __iterator__;");
tryItOut("do {function  prototype (__proto__) { continue M; }  } while((null) && 0);");
tryItOut("{/*infloop*/for(let prototype; (Math.sin).call(0, <y><z/></y>); constructor) {throw [z1,,];while(((-0)) && 0){export prop; } } }");
tryItOut("if(false) (<><x><y/></x></>); else  if (( { ; } (window)).throw(+__noSuchMethod__).__lookupSetter__(\"__proto__\")) /*for..in*/for(const [__count__, constructor] =  /x/g  in false) {(true); }");
tryItOut("/*for..in*/for(var prototype in delete) with((( /x/g \t\n) |= false .. __parent__))false;");
tryItOut("/*for..in*/L:for(const [__parent__, __proto__] = __proto__.__count__ = window in (this.__defineSetter__(\"constructor\", <x><y/></x>\t))) throw <x/>;");
tryItOut("return;");
tryItOut("with({}) __iterator__ = prototype;");
tryItOut("/*for..in*/for(prop in false.@*) if(__proto__.prop = <x><y/></x>) { if (this.\r__defineSetter__(\"constructor\", (1 for (x in [])))) {yield  '' ;{} } else export prototype;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __proto__ in (@foo)(__parent__ = <><x><y/></x></>) = eval(\"3\", __proto__)) /*for..in*/L:for(const true = ([<y><z/></y> for each (__iterator__ in <x/>)].filter(<x><y/></x>)) in this) { /x/ ; }");
tryItOut("/*infloop*/for(var __parent__ = constructor; this; <x><y/></x>) let __iterator__ = try { ; } catch(__proto__) {  /x/  } , __parent__; const __iterator__;");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = <x><y/></x> in null) export *;");
tryItOut("with({constructor: ((eval)([,,].isPrototypeOf(<><x><y/></x></>), <><x><y/></x></>))})export __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in constructor) {{} }");
tryItOut("while((prototype =  \"\" ) && 0){continue M;var prop; }");
tryItOut("let (__iterator__ = constructor.prototype = (new (function  setter (prototype) { var __iterator__; } )())) { export *\nyield <x><y/></x>; }");
tryItOut("/*infloop*/L:while(({a1:1})){throw <><x><y/></x></>;const prop = 1e81; }");
tryItOut("yield this;");
tryItOut("M:if(0.1) /*infloop*/for(let __proto__; ([z1] | [z1,,]); \t__proto__ .@ false) {} else  if ((<x/>.__defineSetter__(\"prop\", [1,2,3,4].map).__defineGetter__(\"__iterator__\", function (constructor) { continue L; } ))) {export __proto__; } else {throw <x><y/></x>;yield []; }");
tryItOut("if(((0/0).call(true, ((<x/> for (__noSuchMethod__ in *))), prototype))) { if (*::*) {for(let y in []); } else /*infloop*/L:for(let ({ prop: ({ __noSuchMethod__: ({ __count__: prototype }) }), prop: ({ __parent__: __iterator__, prototype: ({ __iterator__: __noSuchMethod__ }) }) }) = ({__count__: <x/>}); <><y><z/></y></>;  /x/ ) {yield;return; }}");
tryItOut("{if(<x><y/></x>) return; else  if (window) (1e-81); }");
tryItOut("let (__count__ = (new Function(\"return null;\"))().__iterator__, [, __iterator__, , , []] = function(y) { yield y; export constructor;; yield y; }) { {} }");
tryItOut("/*infloop*/do {yield;throw 3.141592653589793; } while(<x/>);");
tryItOut("const __count__ = undefined, __parent__ = <x/>;");
tryItOut("{}");
tryItOut("/*for..in*/for(var prop = (prop( \"\" ) = yield (function ([y]) { })())[<bbb xmlns:ccc=\"eval(\"__proto__\", 1e-81)\"><ccc:eee></ccc:eee></bbb>] in *::*.valueOf(\"number\")) /*infloop*/L:while(let (constructor = (this.zzz.zzz)) (<x><y/></x>.(-1)))export *;");
tryItOut("throw <x/>;");
tryItOut("/*for..in*/for(let [15,16,17,18].filter(((function  __iterator__ (__noSuchMethod__, prop)[]).call(<x><y/></x>, <x><y/></x>, window)).call, <employee id=\"1\"><name>Joe</name><age>20</age></employee>.__count__ = __noSuchMethod__.__parent__+=constructor.(function::prop)).prototype in ((Math.sin)((*)[[delete].map([1,2,3,4].map)]))){*; const __count__; const prototype; }");
tryItOut("/*for..in*/for(var __iterator__ = (new ([1,2,3,4].slice)(( /* Comment */@foo.throw(--0)))) in this.__defineGetter__(\"__parent__\", [1,2,3,4].map)) {M:with(((5.0000000000000000000000)[<y><z/></y>])) }");
tryItOut("let (__parent__, __count__) { if((__noSuchMethod__ = window)) { if ( \"\" .constructor = 0x99) {\ryield;[1,2,3,4].slice }} else {export *;return; } }");
tryItOut("{{/*for..in*/for(var __count__ = <y><z/></y>++ in (-0)) __parent__ }if(new (yield <<x><y/></x> >)(<><x><y/></x></>[<x/>])) {/*for..in*/for(let __proto__ in 1.2e3) {; } } else {*; } }");
tryItOut("/*infloop*/while(<x/>(*, this)){{} }");
tryItOut("/*for..in*/for(let __parent__ in ((<x><y/></x> .. new (@foo)(window))(__proto__.__parent__ setter= constructor.__proto__)))/*for..in*/for(var <y><z/></y> in this) {var [,] =  /x/g ;(#1#); }");
tryItOut("switch(3/0) { default: case [,]: case window: <x/>; }");
tryItOut("return;");
tryItOut("(<x/>);");
tryItOut("if(0) { if ( /* Comment */<x><y/></x>) {export *; } else ( '' );}L: /*for..in*/for(const __proto__ = __parent__ in *) {yield;; }");
tryItOut("/*for..in*/for(const ({ __proto__: ({ prototype: ({ __proto__: __proto__ }) }) }) in ((function  __noSuchMethod__ (__iterator__)({ prototype: [], prototype: [__iterator__, __parent__, __proto__, ] }) = [11,12,13,14].some * <y><z/></y> ? <y><z/></y> : <><x><y/></x\t></>)((new *::*.hasOwnProperty(\"prop\")(([prop])))))){/*infloop*/do {;; } while(5.0000000000000000000000);/*infloop*/L:while(<><x><y/></x></>[__count__]); }");
tryItOut("/*infloop*/do {} while(<>[0/0].map(@foo)</>.__defineGetter__(\"__iterator__\", eval));");
tryItOut("L:with((let (__count__ = ( /* Comment */constructor), ({ prop: ({ __iterator__: __iterator__, prototype: __noSuchMethod__ }), __parent__: ({ prop: constructor }) }) = ((yield ([] for (__count__ in __noSuchMethod__))))) prototype = <x><y/></x>(((this in this) .@*:: @foo.propertyIsEnumerable(\"prop\")), (<><x><y/></x></>.watch(\"__proto__\", function (__noSuchMethod__) { return false; } ))))){let (prop) { let __noSuchMethod__ = *, __parent__ = @foo; } }");
tryItOut("{gc() }");
tryItOut("return __count__;");
tryItOut("L:while((__noSuchMethod__ = <><x><y/></x></>) && 0){/a/gi }");
tryItOut("L: throw <x><y/></x>\f;");
tryItOut("/*for..in*/for(const __proto__ in <><x><y/></x></>) {gc }");
tryItOut("return;");
tryItOut("/*for..in*/L:for(__parent__ in __parent__ = __iterator__) {var __noSuchMethod__;\ngc()\n; }");
tryItOut("{const __proto__ = <><x><y/></x></>;var prototype = [[1]], 1.2e3 = <><x><y/></x></>; }");
tryItOut("switch(@foo) { default: let ([] = ((<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\") if (undefined))).isPrototypeOf(prop)) { {do {(<x><y/></x>); } while((this.zzz.zzz) && 0);gc() } }/*infloop*/for(__count__ =  '' ; this; <><x><y/></x></>) gc()case 4: case 1: case 4: break;  }");
tryItOut("switch(<y><z/></y> < __count__ = *::*) { default: break; case 6: __proto__ = <x><y/></x>;break; case 9: break; case ({ __iterator__: [, prop], __count__: ({ prop: __iterator__ }) }) = -<><x><y/></x></>: (1 for (x in [])) }");
tryItOut("export constructor\n");
tryItOut("/*infloop*/for(const __parent__; ([[]] >>>=null); ({  '' : __count__ }) = <><x><y/></x></>) {{/*infloop*/while(<y><z/></y>){; } }break ; }");
tryItOut("M:if(__parent__.prototype) { if ((function ([y]) { })() + <x/>) return; else {return <><x><y/></x></>;export __proto__; }}");
tryItOut("L:if(true) { if (3.141592653589793) {prototype = this;const yield null;; }} else {throw <x><y/></x>;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for(let __proto__; (window ^= <y><z/></y>); new this()) [1,2,3,4].map{(prop);export prototype; }");
tryItOut("{function  __iterator__ (__proto__) { yield window }  }");
tryItOut("if((new (#1=[#1#])(<x><y/></x>, 1e-81))) return true; else  if (4. >>= <y><z/></y>.__defineSetter__(\"__parent__\", Math.pow)) {yield;let (__parent__ = ({a1:1}), __iterator__ = <><x><y/></x></>) { return *; } }");
tryItOut("if(((<y><z/></y>.*) for each (__proto__ in undefined) for each (__count__ in *)).constructor = ~<><x><y/></x></>) { if () {L: __count__ = <><x><y/></x></>; }} else throw StopIteration;");
tryItOut("L: {; }");
tryItOut("/*infloop*/M:do {return *::*;new Function } while(('fafafa'.replace(/a/g, ({}).hasOwnProperty).eval(.2.watch(\"__iterator__\", <x><y/></x>))));");
tryItOut("let(constructor = (window.prop)) { return;");
tryItOut("if(true) {gc() } else {export *; }");
tryItOut("/*infloop*/for(prototype = eval(\"Function(this, <x/>)\", @foo || 0.1.unwatch(\"prototype\")); (<><x><y/></x></>.unwatch(\"__parent__\")); ) {([,,z1]);; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; undefined; __iterator__|=__proto__.__lookupSetter__(\"__noSuchMethod__\")) {return <x/>; }");
tryItOut("if('fafafa'.replace(/a/g, __parent__ = #1=[#1#])) yyy else  if (((new false) = @foo)) /*for..in*/L:for(__iterator__ in (( \"\" )(*::*))){export *;return false; } else (null);");
tryItOut("with(([, , []] = ({ __proto__: function::__proto__, __parent__: constructor }))){/*infloop*/for([15,16,17,18].some(function(y) { yield y; return;; yield y; }, this.zzz.zzz); <y><z/></y>; __noSuchMethod__ = this << __iterator__) {export __noSuchMethod__;yield <><x><y/></x></>; } }");
tryItOut("M:if((new ([1,2,3,4].map)(this))) { if (()) {let __noSuchMethod__;; } else (<y><z/></y>);}");
tryItOut("if(<y><z/></y>) {yield; } else  if (eval(\"*\", [[]]) && (this.__defineGetter__(\"prop\", (<><x><y/></x></>).watch)) , ((try {  \"\" ; } catch(__noSuchMethod__) { let constructor = [,,z1]; } .@foo)[(this.__defineSetter__(\"__proto__\", function (constructor, __noSuchMethod__) { {} } ))])) if((this.__lookupSetter__(\"__proto__\"))()) ;");
tryItOut("let (__count__ = *::*, __count__ = delete <x><y/></x> >>>=__count__.( /x/ )) { /*infloop*/do {if(<x><y/></\tx>\t.yoyo(null)) break M; else  if (__noSuchMethod__ = undefined) {throw *::*;export __iterator__; } } while(0x99); }");
tryItOut("var __proto__;");
tryItOut("/*for..in*/for(let prop = ({a1:1}).__defineGetter__(\"__iterator__\", (__parent__).__defineSetter__) in *::*) {gc() }");
tryItOut("prototype = <><x><y/></x></>, __count__ = <x/>;const prop = <x/>, __iterator__ =  /x/g ;");
tryItOut("let (__count__, __count__ = <><x><y/></x></>) { {} }");
tryItOut("if(({ constructor: __parent__, __iterator__: prototype(<y><z/></y>) }) = this.__defineGetter__(\"__parent__\", (3/0).call) &= <{prototype}>yyy</{prototype}>) (function(id) { return id }); else  if (eval(\"<x><y/></x>\", *::*)) export __iterator__; else yield;");
tryItOut("M:switch(this.__defineSetter__(\"prop\", Math.pow)) { case 5: gc() const __parent__;let prop = false, __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (gc).apply.__iterator__ in  /x/g ) {switch((this)[<x><y/></x>\n]) { case 4: function ()*break;  } }");
tryItOut("yield\nexport __iterator__;");
tryItOut("while((<x/>) && 0){ }");
tryItOut("do {throw @foo;{} } while((@foo.@foo) && 0);");
tryItOut("{};");
tryItOut("M:if((uneval(<x><y/></x>))) if([z1]) { if (prop) yield <x><y/></x>; else throw <><x><y/></x></>;} else return __parent__;");
tryItOut("{}");
tryItOut("/*for..in*/for(var prototype in function () { ; } ()) if(([__iterator__, __noSuchMethod__, , ] = (\n<y><z/></y>).eval(prototype.__lookupGetter__(\"__noSuchMethod__\")))) export *; else let prototype =  '' ;");
tryItOut("if(('fafafa'.replace(/a/g,  \"\" ))) { if ((({}).hasOwnProperty).call(__noSuchMethod__, )) {continue ; } else continue L;}");
tryItOut("/*infloop*/L:for(~<x><y/></x>.unwatch(\"__count__\").*; <x/>; *::*) {/*for..in*/for(const constructor = * in 1e+81) yield <y><z/></y>;switch( /x/g ) { case <x/>:  } }");
tryItOut("with({__proto__: })/*for..in*/for(let [prop, prop] = prop = <><x><y/></x></> in  /x/ ) {<x/>; }");
tryItOut("throw StopIteration;");
tryItOut("L:do return (({__count__ setter: false })); while((new function  __count__ (__proto__, __iterator__)<x><y/></x>(, 1e+81)) && 0);");
tryItOut("/*infloop*/for(<x><y/></x>;  { return #1=[#1#] } ; [this for each (set in undefined)]) {var __proto__ = prototype, __count__; }");
tryItOut("__noSuchMethod__ getter: (null).__defineSetter__");
tryItOut("let (prototype =  /* Comment */<><x><y/></x></>.@*, __parent__ = window.throw(<y><z/></y>.valueOf(\"number\"))) { __count__ = 3/0 }");
tryItOut("\n");
tryItOut("if((!<x><y/></x>)) {gc()(<><x><y/></x></>); }");
tryItOut("with({__iterator__: prototype = (__iterator__ = <x><y/></x>)})/*infloop*/while(-3/0){var __iterator__ =  \"\" ; }");
tryItOut("if((this.__defineGetter__(\"__proto__\", gc))) { if (__count__) {export *; } else (<><x><y/></x></>);}");
tryItOut("return;");
tryItOut("let (__noSuchMethod__, __count__ =  /x/g ) { gc() }");
tryItOut("do {let __proto__ = 3.141592653589793; } while((prop) && 0);");
tryItOut("switch(this[false.prop]) { default: break; case 'fafafa'.replace(/a/g, Math.sin): break;  }");
tryItOut("L: var constructor = <x><y/></x>;");
tryItOut("return");
tryItOut("{export __iterator__; }");
tryItOut("/*infloop*/while(prop){__count__ = *, prototype; }");
tryItOut("switch(constructor = @foo) { case [3.141592653589793 for (constructor in *::*)]:  }");
tryItOut("let (__iterator__) { return; }");
tryItOut("try { try { yield ~[z1].isPrototypeOf((__parent__ = [,])); } catch(__parent__ if (function(){let(__count__ = <x><y/></x>, function::__proto__) { let(yyy) ((function(){\n__count__;})());})()) { let(__iterator__, __parent__ = *) { let(constructor) ((function(){gc()})()); } catch(prototype if new (<x/>)(<x/>)) { try { yield; } catch(__iterator__) { return; }  }  } finally { throw StopIteration; } ");
tryItOut("/*infloop*/\nfor(({ __count__: __noSuchMethod__ }) = (this.__defineGetter__(\"__noSuchMethod__\", function (__proto__) { yield <><x><y/></x></> } )); (\n<><x><y/></x></>).unwatch(\"prop\"); @foo) {if((uneval(*::*))) { if ('fafafa'.replace(/a/g, [1,2,3,4].slice)) {export 7;(0.1); } else {throw (function ([y]) { })();prop; }}gc() const prototype; }");
tryItOut("while((<><x><y/></x></>) && 0)return\n");
tryItOut("/*infloop*/while(<><x><y/></x></>.isPrototypeOf(__iterator__)){export constructor;export *; }");
tryItOut("/*for..in*/for(let \fconstructor in ((function  constructor (constructor, __noSuchMethod__) { return [[1]] ? <x/> : prototype } )(((<x/>)( '' ) for each (prototype in <><x><y/></x></>))))){break ; }");
tryItOut("if((let (prototype = <y><z/></y>, __parent__ = function(id) { return id }) #1=__count__)) (<x><y/></x>); else const __noSuchMethod__ = __parent__;");
tryItOut("let constructor = 0/0;");
tryItOut("/*infloop*/for(const __noSuchMethod__; function  __parent__ (__parent__) { return void constructor } ; (({prop setter: (-1).call, __proto__: (constructor.(1.3)) }))) export __proto__;");
tryItOut("/*infloop*/L:do if(([([11,12,13,14].filter)].sort(eval(\"export *;\", this)))) { if ((<x><y/></x>.yoyo(window)/*\n*/.__noSuchMethod__)) null\t; else {return;{{} } }\t} while(var prototype);");
tryItOut("prototype = @foo, __parent__;");
tryItOut("/*for..in*/for(let prototype = <x/> in <y><z/></y>) return;");
tryItOut("return new (function ([y]) { })((#0=({__iterator__: <x><y/></x>}))).prop;");
tryItOut("return new (new Function)(1.3,  /x/ );");
tryItOut("if(<><x><y/></x></>.__iterator__) 1 else  if (('fafafa'.replace(/a/g, 'haha'.split))(<><x><y/></x></>)) gc()");
tryItOut("with({prop: <>this.__defineGetter__\r(\"__iterator__\", function  __noSuchMethod__ (__noSuchMethod__) { yield <x><y/></x>; } )</>})L: gc()");
tryItOut("yield");
tryItOut("{\t0;while((null) && 0){constructor =  /x/g  } }");
tryItOut("/*for..in*/M:for(let __iterator__ in ((gc() = *::* || this.zzz.zzz)((--[z1]\t.__lookupSetter__(\"__noSuchMethod__\"))))){}");
tryItOut("for(let y in [5,6,7,8]) throw <x><y/></x>;");
tryItOut("if((({}).__lookupGetter__).call(-3/0, try { yield; } catch(__count__) { gc() } finally { const prop; } , undefined)) {gc() } else  if (undefined / 0) {default: break; break; break; case 4: case  /x/ : break; let __noSuchMethod__, __iterator__; }");
tryItOut("if((new Function(\";\"))()) { if (( /x/  & window)) yield <x><y/></x>; else (<><x><y/></x></>);}\n");
tryItOut("with({__parent__: <x><y/></x>.hasOwnProperty(\"__proto__\")}){continue L;const window = <><x><y/></x></>; }");
tryItOut("while((eval(\"return;\", 3.141592653589793)) && 0)let prototype = undefined, __iterator__ = <x><y/></x>;");
tryItOut("L: var __iterator__, constructor = <x><y/></x>\n");
tryItOut(" '' ");
tryItOut("\nif(false) <x><y/></x> else {({}).hasOwnPropertylet __proto__ = true, __proto__ =  '' ; }");
tryItOut("export *;");
tryItOut("let(constructor = (({__noSuchMethod__: this.__defineGetter__(\"__parent__\", <y><z/></y>)})), ({ constructor: prototype, __proto__: __proto__ })) ((function(){prop = __proto__;})());");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if(null) break ; else  if (<y><z/></y>) {([1]);( /x/g ); } else {-0export *; }");
tryItOut("M:while((<><x><y/></x></>) && 0){export __count__;(<><x><y/></x></>); }\n");
tryItOut("do yield <x/>; while((window.propertyIsEnumerable(\"constructor\")) && 0);");
tryItOut("yield prop\n(* >>= 3); const constructor;");
tryItOut("if(<y><z/></y> -= *) { if ((yield #3={a:#3#})) constructor\n} else {/*infloop*/M:for(let ({ function::prop: prototype }) = [11,12,13,14].map;  \"\"  if (<><x><y/></x></>); \n1e4) yield undefined;/*for..in*//* nogeckoex bug 349964 */\t for  each(const __noSuchMethod__ in 1e81) var constructor =  '' , __count__; }");
tryItOut("\n__parent__, __iterator__ = <x><y/></x>;\n");
tryItOut("/*infloop*/for(__iterator__\r( \"\"  ^= null) = this.zzz.zzz; let (__parent__) false; prop = #2=typeof  /* Comment */3/0) {throw constructor; }");
tryItOut("{export *;constructor, __iterator__; }");
tryItOut("do {yield prototype; } while(((yield undefined)) && 0)\n;");
tryItOut("/*infloop*/L:while( \"\" .__defineGetter__(\"constructor\", function(q) { return q; }).(<x><y/></x>\n)((eval)([15,16,17,18].some(<x><y/></x>, 0.1), constructor)) getter= new Function){(<><x><y/></x></>); }");
tryItOut("yield");
tryItOut("L: { }");
tryItOut("");
tryItOut("/*infloop*/for(var [] = ({__parent__: true}); (yield ([, ({ prop: __iterator__, __count__: __parent__ }), ({ prototype: __iterator__ }), __parent__, ({ prop: constructor, __iterator__: __proto__ })] = window)); prop = window) /*infloop*/M:for(let constructor; <x/>; <x/>) {null }");
tryItOut("do gc() while((~constructor = -1 ? new ([,])(({a2:z2}), <><x><y/></x></>) : <x><y/></x>.( '' )) && 0);");
tryItOut("prop = __noSuchMethod__;");
tryItOut("*['__noSuchMethod__'] = __noSuchMethod__;");
tryItOut("/*infloop*/while(undefined){export *; }\t");
tryItOut("throw let;");
tryItOut("with({__iterator__.prop: ({prototype: false})})yield <y><z/></y> /= prototype;");
tryItOut("if(this.zzz.zzz) ; else  if ([z1]) export __noSuchMethod__;");
tryItOut("while(([15,16,17,18].filter(eval, (setter.prototype) ? (this(([<><x><y/></x></> for (prototype in [z1])]),  /x/g ) .@*:: (({constructor: <y><z/></y> }))) : function ([y]) { })) && 0){throw this; }");
tryItOut("switch(({prototype: ([15,16,17,18].filter((1e+81).watch, prototype)) })) { case new ('haha'.split)(null, 1.2e3).hasOwnProperty(\"__count__\"): switch([,,z1][<y><z/></y>]) { default: case <><xxx>{prop}</xxx></>: return null;break; case (undefined < 033): (true);break; yield __proto__;case 3: ;break;  }break; case [[1]]:  }");
tryItOut("for(let y in [5,6,7,8]) with({}) throw prototype;");
tryItOut("switch((++<x><y/></x>)) { default: /*for..in*/for(let (<x><y/></x>)((function ([y]) { })()) in <x><y/></x>) 0/0;break; if(1e4) {constructor } else  if (({a2:z2})) {}break;  }\n{}");
tryItOut("");
tryItOut("for(let y in []);");
tryItOut("L: {throw eval(\"__count__\", <><x><y/></x></>); }");
tryItOut("let (constructor) { while((function(id) { return id }) && 0)(< continue  ><x><y/></x><constructor(<x/>.eval(this)) />); }");
tryItOut("L:if((prop.isPrototypeOf(<y><z/></y>))()) { if ((new (new Function)( '' ++)).constructor = ([1] if ( '' ))) {return;return;\n;\n } else {if(__proto__) export *;/*infloop*/for(-3/0; (<x><y/></x> || <x/>); (<><x><y/></x></> | undefined)) yield; }}");
tryItOut("L: function(y) { yield y; ; yield y; }");
tryItOut("/*for..in*/L:for(var [__parent__, prototype] = <x><y/></x> in false) var __iterator__;");
tryItOut("M:if((x::__noSuchMethod__.__count__)) {if(constructor = window) var constructor = 0/0; else  if (typeof <y><z/></y>) (<><x><y/></x></>);{Math.pow{} }\nexport constructor;\n } else  if (*) __iterator__; else /*infloop*/M:for(let __parent__; default: /*infloop*/M:for(constructor = (this /= __proto__.__iterator__/*\n*/); [15,16,17,18].some(('haha'.split).apply, [<x><y/></x>].sort(function (prototype, prototype) { yield <><x><y/></x></> } ));  /x/ ) {return; }break; case 4: if(<y><z/></y>) { if (*::*.prototype) \fvar __parent__; else yield *::*;}cbreak; ;  .. ([[1]].eval(<x><y/></x>)).__parent__ = (<x/>.prototype)) {export *\f;{} }");
tryItOut("M:if(let (__iterator__, __proto__ = *::*) <x><y/></x>) {throw <><x><y/></x></>; } else ;");
tryItOut("/*infloop*/for(let __proto__; .__defineGetter__(\"__count__\", ((new Function).apply).call); __proto__) {/*for..in*//* nogeckoex bug 349964 */M: for  each(let prop in <x><\ty/></x>) return window;\f/*for..in*/M:for(__proto__ = __proto__ in *::*) {return  '' ; in  } }");
tryItOut("L:with({constructor: <x><y/></x>}){{} }");
tryItOut("do break ; while(((this.zzz.zzz)) && 0);");
tryItOut("L:do yield window; while((let (__count__ = [[__parent__, __iterator__, , ] if ([[1]])]) \nfalse) && 0);");
tryItOut("return <y><z/></y>\n");
tryItOut("return;");
tryItOut("with(true.unwatch(\"__parent__\"))/*infloop*/for(var __iterator__ =  /x/g ; (-1); <x/>) {constructor{} }");
tryItOut("yield <y><z/></y>;");
tryItOut("with({prototype: (<x/> <<= true ? [constructor.__iterator__ getter= gc] : new (gc)(this, __iterator__) + constructor in <x><y/></x>)}){/*infloop*/L:while(<x/>); }");
tryItOut("let(__parent__ = <x><y/></x>, constructor) { return;");
tryItOut("switch(#1#) { default: break;  }");
tryItOut("if((p={}, (p.z = ({a1:1}))())) { if ((Math.sin).call(({a2:z2}), )) {( /x/ ).__defineSetter__ } else {(eval\r).callexport *; }}");
tryItOut("L:if((__parent__.unwatch(\"prop\"))) {{}null; } else  if (@foo) {yield <y><z/></y>; } else {var constructor =  /x/g , __parent__;; }");
