tryItOut("<{__parent__}>prototype, </{__parent__}>");
tryItOut("constructor = function::__parent__");
tryItOut("/*infloop*/for((\nprototype =  /x/g ) = ({a2:z2}) && false.hasOwnProperty(\"__parent__\"); this.__defineSetter__(\"constructor\", (new Function(\"yield <y><z/></y>;\"))); (__iterator__.__proto__ getter= Math.sin)) while((<y><z/></y>.watch(\"prototype\", Math.pow)) && 0){\n(new Function(\"return __parent__;\"))\n }");
tryItOut("if(\nundefined) { if (null.propertyIsEnumerable(\"prop\")) return;} else yield *;");
tryItOut("/*for..in*/M:for(let __iterator__ = null in <></>) {const __iterator__ = .2; }");
tryItOut("M:do {/*for..in*/for(const __parent__ = -1 in window) {export *; } const __proto__;/*for..in*///h\nfor(var constructor in ((new Function)(__count__))){gc() } const __noSuchMethod__; } while(((__noSuchMethod__) = (<x/> in <y><z/></y> === (--true))) && 0);");
tryItOut("{L: export __parent__; }");
tryItOut("if((1e-81.__lookupGetter__(\"prop\"))(this.__defineGetter__(\"__iterator__\", ((new Function(\"gc()\"))).call), null)) { if ((function  __proto__ ()this.watch(\"__count__\"\r, (<><x><y/></x></>).__defineSetter__))) {/*for..in*/for(let [__count__, __iterator__] = new *::*(<x/>) in @foo) {throw [,,z1];return; } } else {<x/>throw .2; }}");
tryItOut("/*for..in*/for(var 0.1.__count__ in ((({}).hasOwnProperty)(<>(this.zzz.zzz)</>)))break ;");
tryItOut("(<x/>);");
tryItOut("export *;");
tryItOut("M:do {gc() } while((__parent__.(let (__parent__) window)) && 0);");
tryItOut("let(prototype = \n(__parent__.prototype), constructor =  /x/g ) { try { export *; } finally { __parent__; } ");
tryItOut("L: {(<><x><y/></x></>);\f(__iterator__); }");
tryItOut("this.zzz.zzz;");
tryItOut("yield false;");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = (<x><y/></x>.(<><x><y/></x></>)) in *::*) throw <x><y/></x> >>> #3={a:#3#};");
tryItOut("/*infloop*/for(constructor+=(window >>= <x><y/></x>); <x><y/></x> > <x><y/></x>; (__parent__+=<x/>)) {return;(3); }");
tryItOut("L: {export *; }");
tryItOut("while((({ __proto__: __parent__, prop: ({ __proto__: constructor, __count__: __noSuchMethod__ }) }) = window ? 0.1 :  \"\" ) && 0)const constructor, prototype = *::*;");
tryItOut("let (constructor = (true)) { gc() }");
tryItOut("__iterator__ = __proto__;");
tryItOut("throw StopIteration;");
tryItOut("{L:if(-1) {} else  if (<><x><y/></x></>) {{}( '' ).watch }var prototype; }");
tryItOut("M:do {while((++window) && 0){let prop, prop = window; } } while((-true.__lookupSetter__(\"__noSuchMethod__\")) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("with(((p={}, (p.z = <x><y/></x>)())\n))yield this; const __count__;");
tryItOut("throw constructor;");
tryItOut("if(<><x><y/></x></>.yoyo(<y><z/></y>)) (undefined); else  if (/a/gi(false , <x/>)) break ;");
tryItOut("with({}) let(({ __proto__: prop })) { with({}) yield prototype.__parent__++\t;");
tryItOut("let prototype = *::*, __parent__ = <><x//h\n><y/></x></>");
tryItOut("yield <x/>\n");
tryItOut("/*for..in*/for(let prop in ((\tthis /  /x/  += <x><y/></x>.valueOf(\"number\"))(new ((Function).apply)())))yield @foo;");
tryItOut("{(gc).call\n }");
tryItOut("if(this) export *;");
tryItOut("while((window) && 0){{let constructor = <x/>, prototype = *::*; } }");
tryItOut("if(<><x><y/></x></>.__defineSetter__(\"constructor\", Math.pow)) /*infloop*/L:for(const __noSuchMethod__ =  '' ; undefined; <x><y/></x>) gc()");
tryItOut("{}");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/while(this)yield;");
tryItOut("while((new ([1,2,3,4].slice)()) && 0)yield [1,,];");
tryItOut("/*infloop*/for(prop; __noSuchMethod__.(([<x/> for (constructor in <x><y/></x>)]\n)); __iterator__.constructor getter= function (constructor, prototype) { yield this } ) /*for..in*/for(let __parent__ = <x><y/></x> in arguments) yield <y><z/></y>;");
tryItOut("let constructor, __noSuchMethod__;");
tryItOut("return (({ constructor: __proto__ }) = ([<y><z/></y>].sort(true)))\n");
tryItOut("with({}) { ; } ");
tryItOut("let __proto__ = __parent__;");
tryItOut("gc() const __parent__;\nif(this.__defineGetter__(\"function::prop\", function  prop ( { return this } )({ get __iterator__ constructor () { yield  /x/  } , __count__: * }))) {/*infloop*/while(window){#3={a:#3#};return <x/>; } }\n");
tryItOut("switch((prop)) { case 7: /*for..in*//* nogeckoex bug 349964 */\t for  each(const __iterator__ in 4. >>=  /x/g ) {if((<y><z/></y>).call(undefined, )) {return; } }break;  }");
tryItOut("return <x><y/></x>;return x::__count__;");
tryItOut("prototype = <x><y/></x>;");
tryItOut("let prototype = <y><z/></y>;\n{}\n");
tryItOut("/*for..in*/for(const constructor = [#3={a:#3#}].map((-3/0 >>>=this).__defineSetter__) in (@foo.watch(\"__proto__\", var __iterator__ = <><x><y/></x></>, __proto__;))[(__count__ = @foo)] .@ ((function  __parent__ (__proto__, constructor)__count__)(<x/>).isPrototypeOf((((gc)(<x><y/></x>)).watch(\"constructor\", [1,2,3,4].slice))))) yield;");
tryItOut("prototype = this, __noSuchMethod__ = <x><y/></x>;\n4.;\n");
tryItOut("/*for..in*/L:for(<><x><y/></\tx></>['__parent__'] in (((<><x><y/></x></>).__defineSetter__)((new Array(this, <y><z/></y>))))){const __parent__ = <y><z/></y>, __parent__ = <x/>; }");
tryItOut("switch((__proto__.constructor setter= (3/0).watch)) { case function(id) { return id } try { throw x::__count__; } finally { return; }   /= : yield <><x><y/></x></>;case window: break;  }");
tryItOut("throw __iterator__;");
tryItOut("with(([constructor.__noSuchMethod__ = @foo]))if((<x/> .@*:: false)[<y><z/></y>]) {constructor } else  if ((new RegExp())) {{return; } } else {gc()yield; }");
tryItOut("if(({ prop: constructor, __count__: __proto__ }) = prop = prop) { if (<><x><y/></x></>.__lookupGetter__(\"__iterator__\") <<= (this.__defineGetter__(\"__iterator__\", function (function::constructor, __parent__) { return __count__ } )).constructor) {export *; } else ;}");
tryItOut("\tvar constructor = undefined\nreturn;");
tryItOut("/*for..in*/L:for(let __iterator__ = 3 *= <x><y/></x> in <x><y/></x>) {throw <x/>;let __proto__; }");
tryItOut("while(((yield (__iterator__ = 4.(null)))) && 0){let prop;; }");
tryItOut("let prop = ({}), __noSuchMethod__ = <x/>\n/*infloop*/for((void <y><z/></y>); new ((*::*).__defineSetter__)(); [<x><y/></x> if (window)]) <x/>;");
tryItOut("constructor//h\n = __noSuchMethod__;");
tryItOut("if(__parent__.((new function  prototype (__noSuchMethod__, __iterator__) { const prop = ({a2:z2}); } ((__count__.hasOwnProperty(\"prototype\")), [1])))) {yield 0.1;export *; } else  if ( '' ) {return;window } else continue ;");
tryItOut("/*for..in*/L:for((prototype) in (((<x><y/></x>).__defineSetter__)([z1] .@ true))){{}return <><x><y/></x></>; }");
tryItOut("{/*infloop*/for(prop; ((function(q) { return q; })()) .@ (({ get __count__ prop (__noSuchMethod__)[,] })); this.propertyIsEnumerable(\"__parent__\") ^ (prototype << 033)) ; }");
tryItOut("throw prop;");
tryItOut("");
tryItOut("/*infloop*/for(let prop; __parent__.__parent__ = (<><x><y/></x></> == true); 0/0.propertyIsEnumerable(\"constructor\")) return 3/0;");
tryItOut("L:if(__iterator__ = [[1]]) /*infloop*/for(let prototype = \t__iterator__; window; <x><y/></x>) {yield;//h\n{} } const __noSuchMethod__;");
tryItOut("/*infloop*/for(var prototype, __parent__; __count__ = constructor; __parent__.constructor setter= * ? @foo : @foo) {return  \"\" ; } const prototype;");
tryItOut("/*for..in*/for(let [__count__, prop] = prototype.__count__ setter= eval in new RangeError(__count__, <x><y/></x>).__parent__ = (\n__proto__) == eval(\"(!(<x/>.__defineGetter__(\\\"<x><y/></x>\\\", 'haha'.split)))\", void undefined(false, undefined))) try { export *; } finally { ; } ");
tryItOut("({}).__lookupGetter__");
tryItOut("if((p={}, (p.z = (yield.__defineSetter__(\"__iterator__\", new Function)))()).throw(arguments)) { if (( /x/g  |= @foo.yoyo((yield __proto__)))) export __proto__;} else {yield;gc() }");
tryItOut("if(<x><y/></x>) {var constructor = <x><y/></x>;var prop = window; } else var prototype = <x><y/></x>\n");
tryItOut("return __count__.__iterator__ = [15,16,17,18].map(function(q) { return q; }, false);");
tryItOut("let (({ prop: constructor }), [, ] = prototype.__iterator__) { /*for..in*/for(const [__iterator__, __noSuchMethod__] = let (__parent__, __iterator__ = *::*) (function ([y]) { })() in ({__noSuchMethod__ getter: Math.sin,  get prototype __iterator__ () { ( /x/ ); }  })) {return ({a1:1}); } }");
tryItOut("switch(__count__ = ({})) { case 2: if((*)[undefined].@*) { if (<x/>) /*for..in*/L:for(var __count__ = prototype in [z1]) {} else /*infloop*/do yield; while(undefined);} }");
tryItOut("{yield;yield *::*; }");
tryItOut("/*for..in*/M:for(var function::__parent__(*) in (([1,2,3,4].map)((1.2e3 |= false)))){}");
tryItOut("*::*.__proto__ = getter;");
tryItOut("let(__parent__, prototype) { __count__ = __iterator__;");
tryItOut("/*for..in*/for(var constructor = -1 .@x:: window in  \"\" ) {export prototype;if(__proto__.__proto__ = null) return; else {return;throw ({}); } }");
tryItOut("");
tryItOut("{gc()(<y><z/></y>); }");
tryItOut("/*for..in*/for(var constructor in (((1 for (x in [])))((constructor = this.*))))(#3={a:#3#});");
tryItOut("with({__proto__: false.isPrototypeOf(*)[ /x/g .__count__].@*})/*infloop*/do const __iterator__; while([,,z1] constructor)\n/*infloop*/L:while(<x><y/></x> .@ *::*){yield  \"\" \n( /x/ ); }\n");
tryItOut("if(<x><y/></x>) { if ( /x/ ) yield null;} else {yield;[1,2,3,4].slice }");
tryItOut("let(__noSuchMethod__ =  /x/g , __parent__ =  \"\" ) ((function(){ '' ;})());");
tryItOut("while((( '' .watch(\"__proto__\", (yyy).__defineSetter__))) && 0)throw this;");
tryItOut("L:if(prototype.constructor setter= /a/gi.throw( /x/ \n)) {gc() }");
tryItOut("switch((__proto__.constructor)) { case <><x><y/></x></> = __proto__: /*infloop*/L:while(((function ([y]) { } :: <x/>).unwatch(\"__count__\"))([true.isPrototypeOf(<x><y/></x> instanceof <><x><y/></x></>)\t], (<><x><y/></x></> %  '' ))){if(undefined in <><x><y/></x></>) {prototype = @foo, constructor; } else  if (.2 %= 0/0) {export __noSuchMethod__;continue ; } else break ; }break;  }");
tryItOut("if((!@foo)) {{} }");
tryItOut("let (({ prototype: __iterator__, __iterator__: prototype }) = (eval(\" /x/g \", <><x><y/\r></x></>)), case 6: Math.sindefault: break; case 0: const __proto__ = <x><y/></x>;break; yield ;) { var __parent__ = 4., prop; const constructor; }");
tryItOut("/*infloop*/L:while(<x><y/></x>)yield;");
tryItOut("L:if(this.__defineGetter__(\"__proto__\", gc)) let (__iterator__ = <x><y/></x>, prototype = __proto__) { (function ([y]) { })(); } else  if (window.propertyIsEnumerable(\"__proto__\")) {if(!-1) {export *; } else  if ( /* Comment */ \"\" ) break M;\t\ryield; }");
tryItOut("this.zzz.zzz;");
tryItOut("return;");
tryItOut("/*for..in*/for(const [__iterator__, __parent__] = __count__ in  /x/ ) {export *;var __parent__ = <><x><y/></x></>; }");
tryItOut("__count__");
tryItOut("let({/a/gi\n }) ((function(){let(__parent__ = prop .. -0, __count__ = -1) { return;})());");
tryItOut("if(!arguments.__defineGetter__(\"__count__\", true).__lookupSetter__(\"__count__\")) { if (eval(\"\",  /x/g \n)) {;if((<><x><y/></x></>[*::*])) { if (eval(\"{}\", [])) export __proto__; else /*for..in*//* nogeckoex bug 349964 */__noSuchMethod__) yield <y><z/></y>;} } else let __count__ = @foo;\n@foo;\n}");
tryItOut("/*infloop*/do throw <x><y/></x>; while(__count__.prototype);");
tryItOut("yield ((<y><z/></y> for (__noSuchMethod__ in [z1,,]))--);");
tryItOut("if((__proto__.constructor = Math.sin)) { if (<><zzz>prototype = <x/></zzz></>) { }} else yield <x><y/\f></x>;");
tryItOut("switch(__iterator__.(\n([11,12,13,14].sort))) { case #2=eval(\"return;\",  \"\" ): break; var __proto__ = <><x><y/></x></>; } const __parent__\f;");
tryItOut("if((p={}, (p.z = <y><z/></y>)())) { if (prototype.prototype) yield window; else __count__}");
tryItOut("return;");
tryItOut("if(eval(\"({__count__: this })\", prop.__proto__ = <x><y/></x>))  eval continue ;");
tryItOut("try { ; } finally { export *; } ");
tryItOut("/*for..in*/for(__count__ = void @foo instanceof <x><y/></x> in <x><y/></x>) {prop = <x/>; }");
tryItOut("continue \n");
tryItOut("/*infloop*/for([1]; window; null) {gc()<y><z/></y>; }");
tryItOut("switch([({a2:z2})].some(Math.pow)) { case (gc()): default: break;  }");
tryItOut("for(let y in [5,6,7,8]) let __proto__; const __proto__;");
tryItOut("/*for..in*/for(let (__proto__) in ((((({__count__: window }))).apply)(( /x/g )(, <x><y/></x>)))){/*for..in*/L:for(let __count__ = * in @foo) ({}).__lookupGetter__ }");
tryItOut("{yield; }");
tryItOut("while((*(false, <y><z/></y>)) && 0){export __parent__;/*for..in*/M:for(let __noSuchMethod__.__parent__ in null) {{} } }");
tryItOut("throw StopIteration;");
tryItOut("if((new eval(\"{yield [z1];continue M; }\", ({a1:1})))) { if (<bbb xmlns:ccc=\"1.2e3.unwatch(\"__noSuchMethod__\")\"><ccc:eee></ccc:eee></bbb>) {prop = <x><y/></x>;const __parent__; } else {{__noSuchMethod__; } }}");
tryItOut("{throw *; }");
tryItOut("L: {if( /x/g  &= null) { if ('haha'.split) break L; else {export *;return <><x><y/></x></>; }} }");
tryItOut("export *; const __proto__;");
tryItOut("/*for..in*/for('var prototype = /new ([15,16,17,18].map(Math.sin, \t<> </>))(((/a/gi).call(*::*, ))()) in ) {{true;break ; } }");
tryItOut("/*for..in*/for(const prop = (new this()) in (this.__defineSetter__(\"__noSuchMethod__\", [z1]))) {gc() }");
tryItOut("{let __parent__ = <x><y/></x>;default: break; case 8: ;break;  }");
tryItOut("do continue L; while((((yield this))((this.__defineSetter__(\"prototype\", function  __parent__ () { yield this } )))[<><><x><y/></x></> & -3/0 === 0/0[__count__]</>.(function (__noSuchMethod__, __parent__) { yield true } (@foo))] %= (__iterator__.(<x><y/></x>))) && 0);");
tryItOut("if(window) {return; } else {gc() }");
tryItOut("this.zzz.zzz;");
tryItOut("{{} }");
tryItOut("/*infloop*/for(var ({ __count__: __proto__ }) = ({__noSuchMethod__: this}); this -= (({}).__lookupGetter__).call(this.__defineSetter__(\"__noSuchMethod__\", (function (__noSuchMethod__) '' ).call), ++*::*, (null.prototype =  \"\" )); [({ prototype: __iterator__, __noSuchMethod__: prop })] = ({ constructor: [, prototype, , __iterator__], __count__: ({ __proto__: __parent__ }) })) {L:switch(({})) { case <x><y/></x>: Math.sinbreak; case window: break;  }{} }");
tryItOut("/*infloop*/for(var ({ __count__: [], __iterator__: \r[] }) = [null for each (prop in window)] ^ this.zzz.zzz; __parent__ = <x><y/></x>; --{const prototype, __count__; { {} }  }.__count__) {yield <y><z/></y>; }");
tryItOut("if(__proto__) { if (eval(\"prototype, constructor = <x/>;\", eval(\"true;\", (Array())[<x><y/></x>]))) {return __count__; }} else __iterator__;");
tryItOut("if([15,16,17,18].map( '' , <x><y/></x>)) {'haha'.split } else  if (<><x><y/></x></>.__iterator__) {(*); }");
tryItOut("do {yield *::*; const constructor; } while((((((eval(\"([,]).call(<y><z/></y>, )\", null)))) ? (([constructor.<x/> >>= (yield [,])].map([1,2,3,4].map)))() : [15,16,17,18].filter((#1=[#1#]).watch, <x><y/></x>) % (__parent__ = prototype))) && 0);");
tryItOut("with({}) { ; } ");
tryItOut("{return <y><z/></y>; }");
tryItOut("{}var prototype;");
tryItOut("/*for..in*/for(var [__parent__, __parent__] = (constructor = undefined.eval([z1,,])) in ((Math.sin).call)(1e+81, false)\t) yield;");
tryItOut("do let __proto__ = __iterator__; while(((#2=window.eval(this) < [15,16,17,18].sort(<y><z/></y>, -1))) && 0);");
tryItOut("let prop = prop, prop = <><x><y/></x></>; const __noSuchMethod__;");
tryItOut("new Function");
tryItOut("with(<><x><y/></x></>.__lookupGetter__(\"__parent__\")){M:if(function  prototype (prop, __proto__) { return <y><z/></y> } (__parent__ <<  /x/ )) var __iterator__ = __count__, __parent__; else  if (\f<x/>.watch(\"__iterator__\", Math.sin).isPrototypeOf([11,12,13,14].some)) { } }");
tryItOut("while((prop.watch(\"__iterator__\", undefined)) && 0)gc");
tryItOut("with(( \"\"  = [[]] -= <x><y/></x>)){; }");
tryItOut("switch((new window())) { case 5: break; case (({prop: ({})})):  }");
tryItOut("if(<y><z/></y>) export *; else  if (false) {gc() } else {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype(*) in {}) {export __iterator__;gc() }");
tryItOut("return __proto__;");
tryItOut("L:with((0x99.isPrototypeOf(__iterator__).eval(({a2:z2}).*) += (yield null < this))){throw <><x><y/></x></>; }");
tryItOut("if(prototype) {Math.sin } else {const constructor = __iterator__, __noSuchMethod__;__parent__ = <x/>; }");
tryItOut("return");
tryItOut("if((new __proto__ =  \"\" .throw(<x><y/></x>)( /* Comment */<y><z/></y>[this.isPrototypeOf(<><x><y/></x></>) ? (__proto__ = 3.141592653589793) : (<x><y/></x> >>= <x><y/></x>)]))) { if ([15,16,17,18].sort(new Function, new (<x/>)())) {L: {__iterator__, prototype; }/*infloop*///h\nM:for(let constructor =  /x/ ; 0.1; <y><z/></y>) ; }} else {yield;/*infloop*/for(let __count__ = (new Function(\"prop, __count__;\")).*\t; ({ get __iterator__(__noSuchMethod__) { const prototype = __parent__, __count__; }  }); (eval(\"<><x><y/></x></>\", *))) var __iterator__; }");
tryItOut("return constructor = prototype;");
tryItOut(" const prop;");
tryItOut("throw prototype;");
tryItOut("prototype;");
tryItOut("/*infloop*/do {{}throw true; } while(1e81 |= window);");
tryItOut("let (__proto__ = __iterator__ =  /x/ .__defineGetter__(\"__parent__\", function (__parent__)undefined)) { yield; }");
tryItOut("return <x/>--;");
tryItOut("({}).__lookupGetter__");
tryItOut("while((([[]]\n)) && 0)let constructor, __iterator__ =  \"\" ;");
tryItOut("/*infloop*/while((true.unwatch(\"prop\")).valueOf(\"number\")){/*infloop*/M:for(\n<><x><y/></x></>.propertyIsEnumerable(\"__count__\"); __proto__ = prop; typeof ([1,2,3,4].slice)()) {var constructor; const __noSuchMethod__; } }");
tryItOut("gc()\nreturn;\n");
tryItOut("with(__noSuchMethod__ * *.watch(\"constructor\", function () { yield <>gc</> } ) >  \"\"  >> #1#){/*for..in*//* nogeckoex bug 349964 */ for  each(const <x><y/></x>['__noSuchMethod__'] in __count__) {return  \"\" ; } }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in __proto__ =  /x/g .__defineGetter__(\"prototype\", function  prototype (__iterator__) { throw <y><z/></y>; } )) {with({}) yield __iterator__; }");
tryItOut("{while((this.zzz.zzz) && 0){let __noSuchMethod__;const __count__, __count__ =  '' ; }yield 3; }");
tryItOut("/*for..in*/for(const __iterator__ = -0.unwatch(\"__parent__\").__defineGetter__(\"__parent__\", (new Function(\"continue ;\"))) in ()) ;");
tryItOut("yield @foo\ngc()");
tryItOut("/*infloop*/while(yield (({ __parent__: prototype }) = 0/0)){if([15,16,17,18].sort(/a/gi, <x/>))  else  if (<x><y/></x>.yoyo(<><x><y/></x></>)) {const __iterator__ = [,,];break M; }return; }");
tryItOut("\n");
tryItOut("/*for..in*/for(const __proto__ in ((\tfunction  __noSuchMethod__ (__proto__)true[ /x/ ])(__parent__(window) = __iterator__.prototype))){(this);let __proto__ = <><x><y/\f></x></>, prop; }");
tryItOut("/*infloop*/L:while(#0=prop.__iterator__ = undefined)if(new (new Function).apply()) { if (__proto__.throw((yield -3/0))) {yield <y><z/></y>; }} else {continue M; }");
tryItOut("__parent__ = prop;");
tryItOut("if(<x/>) export constructor; else continue M;\t");
tryItOut("with(__proto__ >> <x><y/></x>)gc");
tryItOut("/*infloop*/for(const prototype = ((p={}, (p.z = 3.141592653589793)())); constructor; (this.__defineSetter__(\"__count__\", function(y) { yield y; ;; yield y; }))) {{} }");
tryItOut("if(this.zzz.zzz) { if (true >>= this) {/*infloop*/for(<><x><y/></x></>; [,,]; -0) break M;const __proto__ = constructor; }} else {gc() }");
tryItOut("{{export *; } }");
tryItOut("return\n");
tryItOut("/*infloop*/for(prototype.prototype; ({constructor getter: function(y) { yield y; (Math.sin).apply; yield y; } }); \n<><x><y/></x></>) export *;");
tryItOut("let constructor;");
tryItOut("if([1,,] & <x><y/></x>) { if ( get __noSuchMethod__ __proto__ (prop) { return __iterator__ = [,,z1] } ) yield;} else {export __noSuchMethod__;<><x><y/></x></> }");
tryItOut("with({prototype: <x/>.__defineSetter__(\"prop\", [1,2,3,4].map)}){/*for..in*/for(var __proto__ in ((Function)( /x/g  .@*:: this)))throw <x/>;\nreturn;\nyield; const prototype; }");
tryItOut("M:if(~@foo && (p={}, (p.z = __iterator__)())) {const prop, __iterator__ =  '' ; } else export __iterator__;return new (3)((<><x><y/></x></>.yoyo(<x><y/></x>)));");
tryItOut("/*infloop*/M:do {do /*for..in*/L:for(__iterator__ in __iterator__) export constructor; while((constructor =  for each (prop in <x><y/></x>) for (prototype.__noSuchMethod__ in <y><z/></y>) if (<x><y/></x>)) && 0);do {export *; } while((prop/*\n*/) && 0); } while((*.__defineGetter__(\"__parent__\", (*::*).watch)));");
tryItOut("while(((<><x><y/></x></>.valueOf(\"number\"))(*.prototype)) && 0)yield");
tryItOut("/*infloop*/while(__iterator__ =  /x/g ){break ;var constructor, prop; }");
tryItOut("throw __count__;");
tryItOut("let(__parent__ = 0.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) ((function(){for(let y in []);})());");
tryItOut("/*for..in*/for(var [__proto__, __parent__] = __iterator__-=window in <x><y/></x>.throw(<x><y/></x>).__lookupGetter__(\"__proto__\")) {export __count__; }");
tryItOut("L:switch(((eval(\"if(0) gc() else  if (this) function(id) { return id };\", [1,,]))++)) { case 3: throw  /x/g ;break; case 5: ;case 7: yield  '' .propertyIsEnumerable(\"prop\");break; default: case 7: case (0/0.constructor): var prototype = <y><z/></y>;break; case 8: break;  }");
tryItOut("var constructor, prop;");
tryItOut("try { gc() } catch(constructor if (function(){\fyield <x/>;})()) { export __count__; } catch(__proto__) { export *; } finally { {} } ");
tryItOut("const __count__ = false;");
tryItOut("/*infloop*/for(let __parent__; (__count__.default: break; ); yield \nwindow) /*infloop*/L:for(const prototype; new (<x><y/></x>)[(* || this)](); ((({ prop: __count__, constructor: constructor }) = (new this(<y><z/></y>))).isPrototypeOf(__parent__.((prototype ^ 1e+81))))) {const constructor = <x><y/></x>, constructor = 5.0000000000000000000000; }");
tryItOut("let ({ <x/>: ({ constructor: ({ constructor: [constructor, , , ({ __iterator__: __parent__, __noSuchMethod__: __count__ })] }), constructor: [, , [, ], [({ constructor: \fprop }), ({ constructor: prototype, prop: constructor }), , , ({ prop: constructor })]] }) }) = function(id) { return id })");
tryItOut("/*infloop*/do {return;var yield = __count__; } while(4.);");
tryItOut("");
tryItOut("L: {yield 033;({}).__lookupGetter__ }");
