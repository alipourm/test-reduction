tryItOut("/*infloop*/do {<x><y/></x>;break ; } while(eval(\"__count__, prototype = <y><z/></y>;\", *));");
tryItOut("M:if(( /x/  != 1.2e3)) if( /x/g ) { if (undefined) {return;export *; }} else yield (-0); else  if (new Date().unwatch(\"__parent__\")) {continue ; }");
tryItOut("L: L:while((eval) && 0){yield; }");
tryItOut("with({__iterator__: (prototype.(__proto__ :: this).@*)}){with( \"\" .__defineSetter__(\"prototype\", function(q) { return q; })){const prop = *::*;/*for..in*/for(var [__proto__, __iterator__] = *::* in prop) {let __iterator__ = window, __noSuchMethod__;{} } } }");
tryItOut("{break ; }");
tryItOut("/*for..in*/for(let __proto__ in ((Math.pow)(<><x><y/></x></>))){throw  \"\" ; }");
tryItOut("L: {return <><x><y/></x></>;yield #3={a:#3#}; }");
tryItOut("yield <x><y/></x>;");
tryItOut("if( /* Comment */( /x/ .eval( '' ))) { if ((((<x><y/></x>)[ /x/ ])())) {const __count__, prototype = *::*; } else yield;}");
tryItOut("while((((({constructor: <x/>})))()) && 0){{}export *; }");
tryItOut("/*for..in*/for(let __parent__ = __parent__ in (constructor.__iterator__ getter= /a/gi)) break ;");
tryItOut("L: {break ;break ; }");
tryItOut("M:with({__parent__: (prop|=<x><y/></x> for each (__proto__ in ([<x><y/></x>].filter((this).__defineSetter__))) for each (constructor in __parent__) for (constructor in false))}){while((window) && 0)gc()/*for..in*/for([__parent__, prop] = false in <><x><y/></x></>) (0x99); }");
tryItOut("const __parent__ = (this.__defineGetter__(\"prototype\", function(y) { yield y; <x><y/></x>;; yield y; })), prop;\nyield;\n");
tryItOut("let (prop = this -= -1) { yield; }");
tryItOut("if(let (constructor = new gc\n()) constructor) {return <x><y/></x>;; }\n{with({try { return (({a1:1})++); } catch(__noSuchMethod__ if (function(){constructor = prototype;})()) { return; } : (function(id) { return id } -= 1.3)}){yield;yield; } }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in new <x><y/></x>( /* Comment */window, __proto__)) {/*for..in*/L:for(prototype() in <y><z/></y>) {yield; }/*infloop*/M:for(prop; [15,16,17,18].some(({}).hasOwnProperty, <x><y/></x>); (((p={}, (p.z = <x\f><y/></x>)())))) {([1,,]); } }yield (prop--);");
tryItOut("break M;");
tryItOut("M:if(({})) { if (0.hasOwnProperty(\"constructor\")) {L: {yield;; } }} else /*infloop*/while([, ] = ({__iterator__: [,,]}))<x>\t<y/></x>;");
tryItOut("/*for..in*/for(var [constructor, \rprop] = __parent__ = try { export __parent__; } catch(__proto__ if (function(){return  /x/g ;})()) { prop; }  in eval(\"{(__noSuchMethod__);yield; }/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in {}) \", *::*)) <><x><y/></x></>;");
tryItOut("M:if( /x/g  % __iterator__.(<y><z/></y>)) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in 0x99) throw <><x><y/></x></>; }");
tryItOut("yield prop setter: ({}).hasOwnProperty");
tryItOut("M:if( /x/ ) { if (( /x/  ? true : <y><z/></y>).hasOwnProperty(\"__count__\")) {continue ; } else var __count__;}");
tryItOut("if(<><x><y/></x></>) ; else  if (<x><y/></x>) [1,2,3,4].map else break ;");
tryItOut("/*infloop*/for(let __iterator__ = (\n__proto__ -= <y><z/></y> ? (window if (<><x><y/></x></>)) : ((@foo))); __parent__ = (#1=  [__iterator__]).prototype.@foo; ([(yield true)].filter(<><x><y/></x></>.__defineGetter__(\"__count__\", new Function)))) /*infloop*/for(([11,12,13,14].sort); ([constructor = this for each (__proto__ in <x/>)]); __noSuchMethod__) {<><x><y/></x></> }");
tryItOut("{if(false) { if (*) (__iterator__); else let __count__;}(arguments); }");
tryItOut("__iterator__");
tryItOut("if((\n<x><y/></x>).__defineSetter__(\"__count__\", Math.sin)) { if ((p={}, (p.z = new (eval).call(window, <><x><y/></x></>).yoyo((Function)()))())) {if( '' )  \"\"  else  if ( /x/ ) {return <y><z/></y>;continue ; } } else Math.sin}");
tryItOut("export __count__;export *;");
tryItOut("do {__proto__ } while((__proto__) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const __noSuchMethod__;  /x/ ; <><x><y/></x></\t>) return  \"\" ;");
tryItOut("let(typeof 1e+81.prototype = __proto__, ({ prop: constructor, __noSuchMethod__: ({ __proto__: function::getter }) }) = __count__ =  /x/ ) { ");
tryItOut("{L: { } }");
tryItOut("for(let y in [5,6,7,8]) let(({ prototype: [prop, __iterator__, __proto__, ] }) = (@foo >>> 3.141592653589793)) ((function(){yield ({constructor: <x><y/></x>});})());");
tryItOut("yield; const x::prototype;");
tryItOut("break ;");
tryItOut("/*for..in*/for(var [constructor, constructor] = 'fafafa'.replace(/a/g, Object(prop = <x/>, __iterator__ = new [(function ([y]) { })()]([ '' ]), constructor = ( % <x/>))) in (prototype.prop = 1e-81 .. <y><z/></y>)) {switch((({ set prototype __proto__ (prop, constructor) { return ((uneval(1e4))) }  }))) { case 2: /*infloop*/do {let __proto__;__parent__ = <x><y/></x>, __proto__ } while(window.__lookupSetter__(\"__proto__\"));case (this)( '' ): break; /*for..in*/for(var __proto__ = __proto__ in 0x99) return @foo;break; break;  }L: var constructor = 0; }");
tryItOut("M:if(false ? <x/> : <><x><y/></x></>) { if (__iterator__ = (new Function(<y><z/></y>))) try { const __iterator__ = <><x><y/></x></>; } finally { return; }  else {; }}");
tryItOut("M:switch(new Function()) { default: ;break;  }");
tryItOut("if(__noSuchMethod__|=(Iterator(<><x><y/></x></>, <><x><y/></x></>))) {(<x><y/></x>); }");
tryItOut("'haha'.split");
tryItOut("/*for..in*/L:for(__proto__ in (()((null && <x><y/></x>))))yield;");
tryItOut("M:switch((prop.prototype setter= eval)) { default: export *;break; do {yield; } while(((__parent__ = <><x><y/></x></>;).unwatch(\"prop\")) && 0); }");
tryItOut("/*infloop*/\tfor(<y><z/></y>; [1]; (yield *)) {export *; }");
tryItOut("return prop;");
tryItOut("L:if(__noSuchMethod__) return; else /*infloop*/L:while( /x/ )var prototype = @foo;");
tryItOut("L: {/*\n*/__parent__ = constructor; }");
tryItOut("let (__iterator__) {  set constructor(__parent__)(<x><y/></x>.yoyo(*)) }\n");
tryItOut("return;");
tryItOut("if(~(__iterator__.__defineGetter__(\"prop\", Function))) {throw <x/>;yield; } else  if (void (p={}, (p.z = ++*::*)())) {;return; }");
tryItOut("export constructor\n");
tryItOut("/*for..in*/for(let __count__ in ((( /* Comment */ \"\" ) ,  /x/ .__lookupGetter__(\"__parent__\"))(({__count__ setter: (new Function(\"export __count__;\")), __iterator__: <y><z/></y> }).__lookupSetter__(\"prototype\"\t))))export __noSuchMethod__;");
tryItOut("with({__iterator__: prototype = __proto__ = this.zzz.zzz})(null);");
tryItOut("L: export prop");
tryItOut("/*infloop*/while((#0=({__proto__:  \"\" .prototype}))){(<x><y/></x>); }");
tryItOut("/*infloop*/M:for(const prototype = ( \"\" .__defineGetter__(\"get\", ((*::*).watch).apply)).*; ({ prototype: prop, __iterator__: constructor }) = ({__count__: * }).yoyo(( /* Comment */<><x><y/></x></>.__noSuchMethod__ = this));  /x/g  %= (*.eval(*)) ^ (__count__)) /*infloop*/do {{} } while((<><x><y/></x></>.unwatch(\"__noSuchMethod__\")));");
tryItOut("with(({prototype: <x><y/></x> })){return; }");
tryItOut("/*infloop*/for\t(var ({ prop: __iterator__, prototype: prop }) =  /x/ .propertyIsEnumerable(\"constructor\"); <><>(Function)</></>; __noSuchMethod__) yield;\t const prototype;");
tryItOut("with({}) { try { __parent__ = <x><y/></x>; } catch(__parent__ if prop: [,,z1] = #3={a:#3#}) { ; } catch(constructor) { return __count__; }  } ");
tryItOut("try { throw __parent__; } catch(__iterator__) { true } ");
tryItOut("/*infloop*/while(__count__.(<><> </></>)){;Math.pow }");
tryItOut("/*infloop*/for(let prop; []; @foo) export __noSuchMethod__;");
tryItOut("/*for..in*/for(__iterator__ in 1e4) {{}continue M; }");
tryItOut("try { export *; } catch(prototype) { ; } \n/*infloop*/for(let __noSuchMethod__ = <><x><y/></x></>; [,]; <><x><y/></x></>)  get __count__(setter) { return true } ;");
tryItOut("/*infloop*/while(this.zzz.zzz){throw [z1,,];\n\n }");
tryItOut("{gc() }");
tryItOut("return;");
tryItOut("export __noSuchMethod__;");
tryItOut("if(__iterator__ %= <><x><y/></x></>) { if (__count__ =  '' ) if( /x/g ) { if (<x><y/></x>) export *;} else {prototype = <x/>; }} else {export *; }");
tryItOut("let(prop = <><xxx {__count__}={__count__.(/*\n*/this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty))} /></>, function::constructor) ((function(){with({}) constructor = prop;})());");
tryItOut("let prototype, __proto__ = __iterator__;");
tryItOut("M:while(((([1,2,3,4].slice)(*::*))) && 0){__noSuchMethod__prototype }");
tryItOut("export *;window\n");
tryItOut("L:if(new (<><x><y/></x></>).watch()) { if (undefined) {/*for..in*/for(const [__noSuchMethod__, __count__] = <x><y/></x> in  /x/ ) {gc()return; }/*infloop*/for((-1); 1e4; <x><y/></x>) {<x><y/></x>; } }} else /*for..in*/for(constructor = \tNumber(<><x><y/></x></>, <><x><y/></x></>) in  /x/g ) {throw this; }");
tryItOut("/*infloop*/do {yield *::*;return; } while(prop);");
tryItOut("return;");
tryItOut("/*for..in*/for(var [__proto__, __parent__] = undefined in (-1)) ");
tryItOut("return <x><y/></\fx>");
tryItOut("/*infloop*/for(('fafafa'.replace(/a/g, (new Function(\"yield constructor;\")))); __count__.prop = <x><y/></x>.throw((1 for (x in []))); \nwindow) throw false;");
tryItOut("for(let y in [5,6,7,8]) try { {} } catch(__parent__ if __noSuchMethod__) { return <><x><y/></x></>; } catch(__count__) { return  { yield *::* } ; } finally {  } ");
tryItOut("/*for..in*/L:for(let constructor = <><x><y/></x></>.__lookupGetter__(\"function::__proto__\") in <><x><y/></x></>) {(<x/>); }\n");
tryItOut("break M;");
tryItOut("/*infloop*/do export *; while((new ((window).call)((prop.__count__), *)).unwatch(\"__proto__\"));");
tryItOut("{} const __iterator__;");
tryItOut("/*for..in*/M:for(__proto__ in (null)(<x/>)|=__proto__.watch(\"__noSuchMethod__\", ((<x/>).__defineSetter__).apply) for each (__iterator__ in true++) for each (__parent__ in 1e81) for each (function::__parent__ in  /x/ )) return;");
tryItOut("if(([__noSuchMethod__])) {yield\nL:if(<x><y/></x>) { if (__count__) (<x/>);} else yield;let __proto__ =  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each\n(var prototype in this) {return <><x><y\n/></x></>; }");
tryItOut("/*infloop*/L:for(let __proto__; __proto__.(033)(0); (new eval(.2,  \"\" )).\fisPrototypeOf(RangeError(0/0, 0.1))) *::*\n");
tryItOut("var __noSuchMethod__; const prop;");
tryItOut("with({}) throw __parent__;");
tryItOut("if(this.__defineSetter__(\"constructor\", 3)) /*for..in*/for(prop in (([1,2,3,4].slice)(Function()))){ } else export *;");
tryItOut("L: {throw *::*\nexport *;{} }");
tryItOut("if(window.prop = <x><y/></x>) { if (<></>) {for(let y in []);export *; } else {{}/*for..in*/for(prototype = throw StopIteration; in constructor) {return [,];(this); } }}");
tryItOut("do /*for..in*/for(var constructor = <y><z/></y> in window) function () { throw <y><z/></y>; }  while((__iterator__.throw(4.).__defineSetter__(\"__noSuchMethod__\", (this).watch)) && 0);");
tryItOut("if(<y><z/></y>) gc()");
tryItOut("{break L\f;<x><y/></x>; }");
tryItOut("for(let y in []);");
tryItOut("{export *;{}return; }\n");
tryItOut("{L:if(('fafafa'.replace(/a/g, <y><z/></y>)) ? @foo % <><x><y/></x></> : __noSuchMethod__.prototype = <><x><y/></x></>) { if ([11,12,13,14].some) {return *; } else __parent__} }");
tryItOut("/*for..in*/for(let [prototype, prop] = <><x><y/></x></> in true) {yield *; }");
tryItOut("L:if(([1,2,3,4].map(false >>> <x/>,  \"\" ))) {function  __parent__ (__noSuchMethod__, __iterator__) { (<y><z/></y>); }  } else  if (<x/>) gc() else {export *;const __iterator__, prototype; }\n/*infloop*/do return; while((<x><y/></x>)(<y><z/></y>));");
tryItOut("gc()( '' \f);");
tryItOut("\t\fM:if(new (function (__count__, __iterator__)0/0)()) export *;");
tryItOut("do return undefined; while(((.propertyIsEnumerable(\"function::__parent__\"))) && 0);");
tryItOut("M:if([,,z1]) {return ({a2:z2}); } else  if (<x><y/></x>.__defineSetter__(\"constructor\", /a/gi)) export *;");
tryItOut("while((this) && 0){throw prototype; }");
tryItOut("throw  /x/g ;\nconstructor;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in (<y><z/></y>.__defineGetter__(\"prop\", function () { __proto__, constructor =  /x/g ; } ))) {for(let y in [5,6,7,8])  }");
tryItOut("yield;");
tryItOut("/*infloop*/while(function (prototype, __count__) { return window } .prop)/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in false) {function  constructor (prop, prop) { return; }  }");
tryItOut("with({__count__: (__noSuchMethod__ = Number()).unwatch(\"__parent__\")}){true(__noSuchMethod__); }");
tryItOut("");
tryItOut("throw prototype;");
tryItOut("{var __proto__ = *::*;export constructor; }");
tryItOut("__proto__ = this.__defineGetter__(\"function::__noSuchMethod__\", function(q) { return q; })");
tryItOut("throw __proto__;");
tryItOut("const __noSuchMethod__ = @foo;");
tryItOut("export __noSuchMethod__;");
tryItOut("if(prop+=(new <><x><y/></x></>)) {while((<x/>) && 0)yield [1]; } else {yield;yield; }");
tryItOut("/*for..in*/for(let [__proto__, __proto__] = <><x><y/></x></> in  /x/ ) {gc()@foo; }");
tryItOut("/*for..in*/for(const __parent__ = (new function (prototype, prop) { continue ; } (3/0,  /x/ )).@* in this.__defineSetter__(\"__count__\",  '' )__parent__.hasOwnProperty()) {\fif(-1)  else  if (<x><y/></x>) { /x/g ;prop, prop; }/*infloop*/do {export *; } while(window); }");
tryItOut("/*infloop*/for(({ function::__parent__: [, ], __noSuchMethod__: __count__ }) = [(<x><y/></x> = <><x><y/></x></>) if (this)]; eval(\"let prop;\", <x/>); eval(\"function(y) { yield y; const __parent__;; yield y; }\", <><x><y/></x></>)) {;yield <><x><y/></x></>; }");
tryItOut("do continue ; while(([,] | __iterator__.__defineSetter__(\"__noSuchMethod__\", (__parent__ = (<x><y/></x>)))) && 0);");
tryItOut(";");
tryItOut("switch((\n(new /a/gi())).eval((prototype = __iterator__))) { case __noSuchMethod__.(undefined ? .2 : __parent__): {} }");
tryItOut("if(__noSuchMethod__) $ else  if (window) {( /x/g ); }");
tryItOut("if(<x><y/></x> .@*:: @foo) /*for..in*//* nogeckoex bug 349964 */ for  each(let \fprop in @foo) {} else function  __parent__ (constructor) { export __count__; } ");
tryItOut("{if(arguments.eval((__count__%=@foo))) {L:if(__proto__.__count__) {<y><z/></y>;<x><y/></x>; } else  if (3.__defineSetter__(\"prototype\", [1,2,3,4].slice)) yield; else (new Function(\"return;\"))if(this) { if ((constructor = ({a1:1}).__defineSetter__(\"__noSuchMethod__\", __count__))) } else yield 033; } }");
tryItOut("[1,2,3,4].slice");
tryItOut("if(return <x><y/></x>;__proto__) {prop;\n<x/>;\n/*infloop*/do {} while(@foo); } else  if (window .@*:: window.isPrototypeOf(5.0000000000000000000000 .@*:: __iterator__)(this.__defineSetter__(\"__proto__\", Function) >> [].__parent__ = window ? <x><y/></x> : <><x><y/></x></>, )) let(prototype) { let(__iterator__ = <x/>, __proto__ = __iterator__) ((function(){yield  /x/ ;})()); else {/*infloop*/while(window)Math.powreturn <><x><y/></x></>.prop; }");
tryItOut("do {gc()L: { \"\" ; } } while((__count__++) && 0);");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("if(let (__proto__, __proto__ = new (function (__count__) { yield *::* } )(#1=[#1#])) __noSuchMethod__.prototype) /*for..in*/:for(let __noSuchMethod__ = (new ( /x/g )()) in true) {constructor = <><x><y/></x></>;throw function ([y]) { }; } else { }");
tryItOut("do export function::prototype; while((__proto__ = @foo) && 0);");
tryItOut("/*infloop*/for(__count__ = *; <><x><y/></x></>;  '' ) prop = <x><y/></x>;");
tryItOut("with({}) ([0.1 for (__proto__ in  \"\" )])(prop = <x><y/></x>) = __noSuchMethod__;");
tryItOut("/*infloop*/for((let (__noSuchMethod__, __iterator__ = <x/>) [1]); __iterator__; __iterator__) if(__parent__.constructor = function (__noSuchMethod__) { yield @foo } ()) {if((__iterator__.constructor \tgetter= Function)) yield window; }");
tryItOut("/*for..in*/L:for(const [constructor, prop] = ((({ constructor: prototype, __proto__: __parent__ }) = false.__defineGetter__(\"prop\", function  <x/> (set, __noSuchMethod__) { return 1.2e3 } )) instanceof __noSuchMethod__ = <><x><y/></x></>) in ([[1]] @  '' ) || function::__noSuchMethod__ = <x><y/></x> == <x/>) /*infloop*/for(prototype = (new ((-1).throw(__count__))([15,16,17,18].sort((1 for (x in [])), ([11,12,13,14].map)))); [11,12,13,14].map; ((p={}, (p.z =  /x/ )()))()) /*infloop*/for(#1#; this; <x><y/></x>) {break L; }");
tryItOut("L:with({__iterator__:  '' .unwatch(\"constructor\")}){continue ; }");
tryItOut("if((function  __parent__ (__iterator__) { return false } )( ''  && <x/>)) {return window;yield; } else  if ([\fconstructor = false, ({ prop: \fyield, set: [, ] }), [, , prototype, ({ __proto__: ({ prop: prototype }), function::__proto__: ({ prop: prototype, __count__: [,,] }) }), prop], , ({ __noSuchMethod__: [[, ], ({ __proto__: prop })] })] = undefined * <x/>) /*infloop*/L:while(({a1:1})){if(1e81) { if (*) {(@foo); } else } }");
tryItOut("/*for..in*/for(var ((__iterator__.isPrototypeOf(false)))(((constructor = 1.2e3) < prop = <x><//h\ny/></x>)) in ((function(q) { return q; })(<bbb xmlns=\"({a1:1})\"> </bbb> .@x:: (this.hasOwnProperty(\"__iterator__\")))))gc() const constructor;");
tryItOut("continue M;");
tryItOut("__noSuchMethod__while((#1#[5.0000000000000000000000]) && 0){var prop;this } const constructor;");
tryItOut("/*infloop*/for([15,16,17,18].map(eval, <x><y/></x>); __noSuchMethod__.__iterator__ = undefined.watch(\"__proto__\", <x/>); (0x99 <= 3)) {export __count__;const __count__, __parent__; }");
tryItOut("with({}) { let(({ __parent__: prop })) { constructor = __proto__; } ");
tryItOut("return  /x/g  ? this : [1].__proto__;");
tryItOut("1e4.hasOwnProperty(\"__parent__\").__count__ = @foo ? 0 : <><x><y/></x></>;0;");
tryItOut("with(){return;/*for..in*/for(let __parent__ = function::__noSuchMethod__ = __parent__ in <><x><y/></x></>) {yield; } }");
tryItOut("if(#2=[<x><y/></x>]) { if (<x><y/></x> <<= <y><z/></y>) gc()} else const prototype = __count__;");
tryItOut("\f/*infloop*/for(('fafafa'.replace(/a/g, gc)); <y><z/></y>.__defineSetter__(\"prototype\", [1,2,3,4].map); (@foo *  '' )) return true;(null);");
tryItOut("if(<><xxx {__noSuchMethod__}={0x99} /> </>) (<y><z/></y>); else  if ([<x><y/></x> - 3]) yield;");
tryItOut("/*infloop*/for(var __iterator__ = (this.__defineGetter__(\"__parent__\", (([15,16,17,18].filter(( \"\" ).apply, false))).call)); (({__noSuchMethod__ getter: 5.0000000000000000000000,  get __iterator__()<x><y/></x> })).eval(true.__lookupGetter__(\"__count__\")).watch(\"__noSuchMethod__\", function () { yield (uneval(*::*)) } ); (--[15,16,17,18].filter(window, new (false)( /x/ )))) {L:with({prop: this |= *::*.eval(__proto__.__proto__ =  /x/ )}){constructor;/*for..in*/for(const [function::__parent__, constructor] = true in #1=[#1#]) {/*\n*/function  prop ()033gc() } } }");
tryItOut("__proto__ = constructor");
tryItOut("M:while(( /x/ ) && 0){break ; }\n");
tryItOut("return");
tryItOut("<>@foo</>");
tryItOut("L: {break M;let __parent__; }");
tryItOut("/*infloop*/do <x><y/\t></x>; while(eval(\"1.3\", *::* .@ <x><y/></x> instanceof (\ntrue)));");
tryItOut("yield;");
tryItOut("/*for..in*/for(__iterator__(<><x><y/></x></>) in ((({}).hasOwnProperty)((#0=*)))){yield; }");
tryItOut("{ }");
tryItOut("/*infloop*/do prototype.unwatch(\"__noSuchMethod__\").constructor while((p={}, (p.z = <><x><y/></x></>)()));");
tryItOut("/*infloop*/while(delete  '' ){(5.0000000000000000000000); }");
tryItOut("do __count__, __iterator__; while((this.zzz.zzz) && 0);");
tryItOut("L:while(( /x/g ) && 0)/*infloop*/for(const  enum  = []; *;  '' ) {yield set; }");
tryItOut("throw __parent__;");
tryItOut("gc()const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::__proto__.__iterator__ in null) {yield; }");
tryItOut("if(({ set __noSuchMethod__(prototype)__iterator__ })) let prop; else if((var __iterator__ = window)) {;const prop = <x/>; } else  if (#0=[(<x><y/></x>.isPrototypeOf( /x/ ))]) return *;");
tryItOut("/*for..in*/for([(@foo).call(true, false) if (<x><y/></x>)] in (((new Function(\"continue ;\")))((<><x><y/></x></> for (__count__ in 1.3)))))let (__proto__ = 1e4, __iterator__) { return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in __parent__.prop = new (new Function(\"continue M;\"))()) {if(window) /a/gi else return 3;(this.zzz.zzz); }");
tryItOut("while((({ get __proto__\t prop () { yield __count__ }  }).propertyIsEnumerable(\"__parent__\")) && 0)__parent__ = prop;");
tryItOut("do {with({}) { return (function ([y]) { })(); }  } while(((<x><y/></x>.eval(<x><y/></x>)).yoyo(this ? prop : true)) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for((<y><z/></y>).__defineSetter__(); *; (yield ((uneval(function::__parent__)).__defineGetter__(\"prop\", gc)))) /*infloop*/for(__parent__ = 0.1; <x><y/></x>; <x/>) export __parent__;");
tryItOut("( \"\" );");
tryItOut("switch((\nprototype)) { default: window;break; case 1: M:do {let prop;export true; } while((window) && 0);case 2: M:do {{} } while((*) && 0)\n(#1=[#1#]); }");
tryItOut("if(constructor.__defineGetter__(\"function::__noSuchMethod__\", [1,2,3,4].slice)) if(*::*.watch(\"__noSuchMethod__\", (window).apply)) ; else  if () ; else {function  __iterator__ (__iterator__) { return <y><z/></y> } yield; } else return this;");
tryItOut("/*infloop*/for(let prop = constructor; [,]; window) {function  constructor (__noSuchMethod__, prop) { export *; } 1e+81; }");
tryItOut("if(((new Function(\"return;\"))).call(function ([y]) { } ? null : <x><y/></x>, )) { if ((this ? @foo : <x><y/></x>)) {var __proto__ = [1,,], __noSuchMethod__;(<x><y/></x>); } else {;const __noSuchMethod__; }}");
tryItOut("let (({ __proto__: [__noSuchMethod__, ] }), ({ __proto__: ({ __count__: __iterator__ }), __parent__: __parent__ })) { throw 1.2e3; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prop] = Boolean() in (({a2:z2}).propertyIsEnumerable(\"prototype\") - 033 for (prop in *::*))) {do {export *; } while((false) && 0); }");
tryItOut("do ; while(( '' ) && 0);");
tryItOut("if(<y><z/></y>()) export *; else  if ((\n(this.__defineSetter__(\"__iterator__\",  /x/ )).*)) { /x/ ; }");
tryItOut("M:do \f while(((__iterator__ = .2 && ({a1:1}))) && 0);");
tryItOut("return true;");
tryItOut("/*for..in*/M:for(__iterator__ = undefined in <y><z/></y>) {}");
tryItOut("L:if((((window++))[(new (Function)([1]).__iterator__)])) {return <x><y/></x>;throw this.__proto__; }");
tryItOut("M:with((-1)){continue ;var prop = <x><y/></x>; }");
tryItOut("M:if(-3/0) M:do export prop; while((<y><z/></y>) && 0); else  if (yield <x><y/></x> < ({__iterator__ setter: ({}).hasOwnProperty })([,,] >= 1e4)) let __parent__, __parent__; else {\tL: {; } }");
tryItOut("gc");
tryItOut("throw @foo;/*infloop*/for(const constructor = ([15,16,17,18].filter(<x><y/></x>, (true in *))); 'fafafa'.replace(/a///h\ng, Math.sin); \n '' ) yield 0/0\n");
tryItOut("if(*) with({__count__: __parent__}){break ; } else  if ((p={}, (p.z = (\n\t /x/ ))())) let prototype = <><x><y/></x></>; else export *;");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/do return; while((#0=({__noSuchMethod__: (__iterator__ = __parent__)})));");
tryItOut("if(<y><z/></y>.valueOf(\"number\")) gc() else  if (__count__(*) = [undefined.__defineGetter__(\"__count__\", function () { return undefined } ).watch(\"constructor\", function (__proto__, __count__) { yield 3/0 } )].map(([1,2,3,4].map).call)) return @foo; else {yield true\n }");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("return new Object()\n;");
tryItOut("if( '' --) return __count__; else  if (new (((<y><z/></y>)(window, 0/0)))(@foo.__defineSetter__(\"__proto__\", (4.).__defineSetter__), <y><z/></y>)) export *;");
