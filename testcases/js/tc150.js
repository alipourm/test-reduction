tryItOut("prop = __count__;");
tryItOut("if([1,,]) {-0;continue L; } else  if ((({__parent__: false }))) {{}break ; } else export *;");
tryItOut("{; }");
tryItOut("/*infloop*/for(let ({ __proto__: ({ __count__: ({ __noSuchMethod__: __parent__ }), prop: ({ constructor: __noSuchMethod__, prop: ({ __count__: ({ __proto__: ({ constructor: ({ constructor: __proto__ }), __parent__: ({ __noSuchMethod__: __proto__, __proto__: __iterator__ }) }) }) }) }) }), __count__: <y><z/></y> }); <x><y/></x>.__noSuchMethod__.__parent__; \tlet (prop) ({a1:1}).__iterator__ = <{__parent__}><!--yy--></{__parent__}>.(__noSuchMethod__.constructor)) {yield [z1].__defineGetter__(\"function::__parent__\", [1,2,3,4].slice);let (constructor, ({ __noSuchMethod__: __parent__, __noSuchMethod__: __proto__ }) = ('fafafa'.replace(/a/g, 'haha'.split))) { if(<><bbb xmlns=\"this\">yyy</bbb></>) {throw null; } } }");
tryItOut("return *::*;");
tryItOut("/*for..in*/for(const prop in \t((/a/gi)((1e+81.__count__ = null))))if(undefined) const __iterator__ = window; else continue ;");
tryItOut("/*infloop*/while((Number())){yield false;( /x/g ); }");
tryItOut("return (prototype = <x><y/></x>);");
tryItOut("");
tryItOut("L:while((<bbb xmlns=\"__parent__(3.141592653589793) = <x/>.yoyo(.2)\">yyy</bbb>) && 0)[__proto__ =  /x/g , ({ __parent__: prototype })]");
tryItOut("yield  '' ;");
tryItOut("/*for..in*/for//h\n(let prop in (( /x/g ).__defineSetter__.@foo)) /*infloop*/for(new (window)([,]); *::* = (@foo.unwatch(\"__noSuchMethod__\")); this) throw <y><z/></y>;");
tryItOut("/*for..in*/for(__count__ = false in [,,z1]) return\n");
tryItOut("let (({ prototype: ({ __proto__: __noSuchMethod__, prop: __noSuchMethod__ }) })) { /*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in [,,z1]) export __iterator__; }");
tryItOut("let try { throw prototype; } catch(__iterator__ if (function(){break M;})()) { ; } finally { __proto__; }  = function ([y]) { }, __noSuchMethod__ = <x><y/></x>;");
tryItOut("if(({ constructor: prop, __parent__: prototype }) = <x/>) { if \f(eval(\"throw undefined;\", (yield (__parent__ = <y><z/></y>).watch(\"__noSuchMethod__\", Math.pow)))) {export *; }} else {return  /x/ ; }");
tryItOut("M:if([<x><y/></x> for each (__proto__ in <y><z/></y>)] ^ new (-0) in /a/gi) {var __iterator__ = undefined; }");
tryItOut("let (({ prop: ({ __noSuchMethod__: [__count__, constructor, __proto__, []], __proto__: ({ __parent__: prop, prop: [, , , ({ __count__: [prototype, prototype, prop, __iterator__, ] })] }) }), __iterator__: [({ each: ({ __noSuchMethod__: <x><y/></x>['constructor'] }) })\f, __count__, ({ __proto__\r: [] }), ] }) = ({constructor: ((@foo) ? delete <y><z/></y> : false)}), (prop)) { /*for..in*/for([prototype, __proto__] = @foo in this) {export *;let __parent__ = 0/0, prop = __proto__; } }");
tryItOut("with(<bbb xmlns=\"<></>\"> { return <y><z/></y> } </bbb>)yield 0.1;");
tryItOut("let prototype = <x><y/></x>, constructor;");
tryItOut("/*infloop*/for(const prototype; <x><y/></x>; window.prototype = [z1]) {export __parent__; }");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("if((yield @foo)) { if (* + null) if(<x/>) { if (#1#) throw prototype;} else {return; } else {let __proto__;export *; }}");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(function  prototype () { gc() } ; (this > (-0)); RegExp(__noSuchMethod__ ? window : null, <x><y/></x>)) { }");
tryItOut("{__iterator__/*infloop*/M:while(5.0000000000000000000000){return <x><y/></x>; } }");
tryItOut("r");
tryItOut("/*infloop*/do {gc()yield 1.2e3; } while((-this).__parent__);");
tryItOut("let (constructor) { ; }");
tryItOut("with(@foo *= *)/*infloop*/for(const __iterator__ = [5.0000000000000000000000].filter((function (constructor, constructor)var prototype, __proto__ = 1.3;).apply); constructor.@*; __iterator__.__count__ = this.__defineGetter__(\"__count__\", function(q) { return q; })) {export *;({a1:1}); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in *::*) let __parent__ = #3={a:#3#};");
tryItOut("/*infloop*/do  while(*::*)\n");
tryItOut("/*for..in*/for(prototype = __iterator__.watch(\"__count__\", gc) in constructor) if(function ([y]) { }) { if (__noSuchMethod__) __proto__ setter: function (prototype, prop) { var constructor = <x><y/></x>; }  else {}}");
tryItOut("/*infloop*/for(const __count__; (__iterator__.__proto__ setter= Function) %= (yield *) << <xxx>{__count__}</xxx>; 'fafafa'.replace(/a/g, Function)) {{}yield; }");
tryItOut("/*for..in*/M:for(let <x><y/></x>.(1.2e3).__lookupGetter__(\"prop\")['__proto__'] = (function ([y]) { } ? <x><y/></x>.valueOf(\"number\").throw(prop+=this) : this.zzz.zzz) in constructor.__noSuchMethod__) yield;");
tryItOut("/*for..in*/__parent__, prop =  /x/ ");
tryItOut("let (__count__ = (new <x><y/></x>(3.141592653589793))) { /*infloop*/for(<x><y/></x>; prop;  \"\" ) {continue ; } }");
tryItOut("/*infloop*/L:do yield  /x/g ; while((({ __noSuchMethod__: constructor, __iterator__: __noSuchMethod__ = window }) = null && <><x><y/></x></>)[__parent__.(\nwindow).__iterator__]);");
tryItOut("L: const prototype;");
tryItOut("__iterator__ = constructor;");
tryItOut("M:if(({__iterator__: 0x99})) { if ([prototype, ] = prototype) {export __parent__; }} else {continue ;throw <x/>; }");
tryItOut("\nwhile((({__proto__: yield .2,  set __count__() { yield  ''  <= <x><y/></x> }  })) && 0){{}{yield; } }");
tryItOut("if(((1 for (x in [])))()) { if (@foo window.valueOf(\"number\")) {yield *::*; } else prototype =  /x/ , __noSuchMethod__ = *::*;}");
tryItOut("/*for..in*/M:for(const [__parent__, ({ __count__: ({ x::__proto__: constructor }), prop: ({ __proto__: constructor }) })] = (~<><x><y/></x></>) in __parent__ .@*:: true) return;");
tryItOut("L:with({__noSuchMethod__: eval(\"window\", 033)})gc()");
tryItOut("switch(5.0000000000000000000000) { case 1: {}break;  }");
tryItOut("if(yield (<{prototype}> </{prototype}>.((prototype.__lookupSetter__(\"__count__\"))))) { if (1e81 != __parent__) {return null;if(__noSuchMethod__.isPrototypeOf(*::*)) gc() else  if ((p={}, (p.z = <y><z/></y>)())) constructor =  /x/ , __iterator__ = ({}); else (({a1:1})); } else {prop; }}");
tryItOut("throw __count__;");
tryItOut("/*infloop*/L:for(({ prototype\t: ({ __noSuchMethod__: [], __proto__: ({ __proto__: ({ prop: [__proto__, __parent__, gc(), constructor], __noSuchMethod__: ({ prototype: __noSuchMethod__, __parent__: prototype }) }), __noSuchMethod__: ({ __noSuchMethod__: __iterator__ }) }) }), constructor: [({ <xxx>{__proto__}</xxx>: __parent__, __proto__: __noSuchMethod__ })] }) = yyy; true <<= *::*; (++<x><y/></x>.eval(undefined)).__defineGetter__(\"__iterator__\", (new Function).call)) if( \"\" ) { if (true) {{} } else export *;}");
tryItOut("yield\ncontinue ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in [,]) 0x99;");
tryItOut("break M;");
tryItOut("M:switch((this.__defineGetter__(\"constructor\", function(y) { yield y; yield;; yield y; }))) { case prototype = #3={a:#3#}: export *; }");
tryItOut("with([11,12,13,14].sort){;export *; }");
tryItOut("{#3={a:#3#}; }");
tryItOut(";");
tryItOut("/*for..in*/for(__count__ in __parent__) {return <y><z/></y>; }");
tryItOut("export __count__\n<><x><y/></x></>");
tryItOut("if(<><x><y/></x></>) {break M; }");
tryItOut("while((__parent__ = <x><y/></x>.__defineGetter__(\"__iterator__\", Math.pow).prop = ) && 0){let __proto__ = __iterator__, x::__iterator__; }");
tryItOut("/*for..in*/for(const prototype = __noSuchMethod__ =  /x/  in new (this).__defineSetter__() .@ <x/>) let (prop = <><x><y/></x></>) { __noSuchMethod__, prop = prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in  '' ) gc()");
tryItOut("yield\nprototype = constructor;");
tryItOut("with(<x><y/>\n</x>.@*){return 1e+81;__iterator__ = <><x><y/></x></>, __proto__ = *::*; }");
tryItOut("if(this) {let (__proto__) { {} } }");
tryItOut("/*for..in*/for(const constructor in (([1,2,3,4].slice)(this)))L: ");
tryItOut("yield");
tryItOut("let(prototype = (false .@x:: <x><y/></x>)) { for(let y in []);");
tryItOut(" /x/g ;");
tryItOut("/*for..in*/for(var __count__.__count__ in new function(q) { return q; }(([*::*].sort(*)))) (null);");
tryItOut("/*infloop*/for(const prop = [prop, ] = \n<x><y/></x>.unwatch(\"__parent__\"); (({prop: (.2).call(<y><z/></y>, *)})); true) {;yield; }\n");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/for(({ prop: __parent__ }) = (window[ { [1,2,3,4].slice }  = @foo]); [,,]; Iterator(yield == [,,], @foo)) /*for..in*/for(const constructor in [[]]) break M;");
tryItOut("/*infloop*/L:for(prop; __parent__ = undefined.yoyo(<><zzz>@foo</zzz></>); (__parent__) = prototype-=(-0))  { yield __proto__ } ");
tryItOut("L:if(this) { if (<><x><y/></x></>) {}} else {yield *::*;throw  /x/g ; }");
tryItOut("with({}) { return; } ");
tryItOut("let (prototype = __count__) { L:if((uneval(this))) yield (function ([y]) { })() else  if (({a2:z2})) return arguments; else {var prop = <><x><y/></x></>\n } }");
tryItOut("yield (<><x><y/></x></> << [[]]);");
tryItOut("/*for..in*/for(const __proto__ = * in <x/>) var __count__;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((({}).__lookupGetter__)(prototype))){export __count__;return; }\nyield this;");
tryItOut("/*infloop*/do {let constructor, constructor;/*for..in*/for(const [__iterator__, __noSuchMethod__] =  /* Comment */new <x/>([,,]) in 0) {{} } } while((*['__proto__']%=({__proto__ getter: function(q) { return q; },  get prop(prop) { yield @foo }  })));");
tryItOut("{return <><x><y/></x></>;{yield <x><y/></x>; } }");
tryItOut("/*for..in*/for(let [__iterator__, <bbb xmlns:ccc=\"__parent__ %= null\"><ccc:eee></ccc:eee></bbb>] = RangeError('fafafa'.replace(/a/g, #3={a:#3#}) for ((new -3/0(<x><y/></x>))((uneval(<><x><y/></x></>))) in .2) for each (__proto__ in <><x><y/></x></>) if (<x/>)) in (__parent__.__noSuchMethod__ getter= ({}).__lookupGetter__)) {yield prop = <><x><y/></x></>; }");
tryItOut("L:if((constructor = yield <y><z/></y>)) { if (constructor.__count__) {return  /x/ ;const prototype, __proto__; const __proto__; } else {return @foo;/*infloop*/for(const __iterator__ = <y><z/></y>; this; [z1,,]) {gc()gc() } }}");
tryItOut("with({__noSuchMethod__: new <x><y/></x>(*, *)}){continue M; }");
tryItOut("with(<y><z/></y>){(<x/>); }");
tryItOut("M:if(__proto__-=!<x/>) do return *::*; while((prop = false) && 0); else  if ((<bbb xmlns\t:ccc=\"*\"><ccc:eee></ccc:eee></bbb>.(([-1].map([1,2,3,4].map))))) {export __noSuchMethod__;yield ({}); }");
tryItOut("with({prop: eval(\"export *;\", (<x><y/></x> .@*:: window for each (__parent__ in <><x><y/></x></>) for (__proto__ in 0) if (this)))}){(function ([y]) { })(); const __iterator__;<><x><y/></x></> <<= 3; }");
tryItOut("while((prop\t) && 0){switch((-0)) { default: case <x/>: break; case window: case 0: yield;break; (this);break; case 9: break; export __count__;break; case 8: break;  }return;\nlet __parent__, __parent__;\n }");
tryItOut("/*for..in*/for(const __iterator__ = (__noSuchMethod__.constructor) in <y><z/></y> ? 1e4 : <y><z/></y>) {const __proto__;undefined; }");
tryItOut(";");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = --false.__lookupGetter__(\"prototype\") in <y><z/></y>) __parent__ = <x><y/></x>; const __noSuchMethod__\n//h\n");
tryItOut("/*for..in*/for(let prototype = 3.141592653589793 in *) {export *;export __iterator__; }\nvar constructor = <x/>, __count__;");
tryItOut("with({}) { return [<x/> << <><x\r><y/></x></> if ((-0))]; } ");
tryItOut("/*infloop*/do {yield <y><z/></y>; } while(<x><y/></x>);");
tryItOut("/*for..in*/for(const __iterator__ in (this.__defineGetter__(\"constructor\", *::*))) __noSuchMethod__");
tryItOut("/*infloop*/for(; new (<y><z/></y>)() for (__count__.__parent__ in __count__); <x/> ,  /* Comment */this) if(<x/>) return; else {break ; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (([1,2,3,4].slice)(constructor.((constructor.__count__ .@ 'fafafa'.replace(/a/g, new Function)))))){4.; }");
tryItOut("(*).__defineSetter__gc()");
tryItOut("\nyield window;");
tryItOut("L: {/*infloop*/M:while(window) /x/g ;(false); }");
tryItOut("/*infloop*/for((function  __count__ (__parent__) { var constructor; } ).call(*, <y><z/></y>, <>export prototype;</>).__noSuchMethod__ = ~ /x/g ; @foo % [,,z1] % RangeError(); __parent__.valueOf(\"number\")) { const __count__;gc() }");
tryItOut("if(<><x><y/></x></> / <x><y/></x>) { if (0/0.propertyIsEnumerable(\"prototype\").isPrototypeOf(__proto__ =  '' )) return __parent__; else {if( /x/ ) return; }}");
tryItOut("/*infloop*/for(var __count__; eval(\"eval(\\\"return;\\\", <><>undefined</></>)\", ({__count__: (return) })); yield (false.eval(window))) __parent__, __noSuchMethod__;");
tryItOut("if(delete window) { if (((function  prop (__count__) { yield window.eval(true) } ).apply).call((prototype)(*::*, *::*++.watch(\"prop\", Math.pow)), __parent__.( '' ).hasOwnProperty(\"__count__\"), (({ prototype: constructor }) = __count__ = window))) {/*infloop*/while( /x/g ){ }return null; }} else {export __noSuchMethod__; }");
tryItOut("throw prototype;");
tryItOut("/*infloop*/while((p={}, (p.z = --constructor)()))let __noSuchMethod__, prototype = true; const prototype;");
tryItOut("/*infloop*/for([] = <x><y/></x>.(function ([y]) { }); (.2[*::*]); constructor = 0.1) {return prototype; }");
tryItOut("M:while((__proto__) && 0)return;");
tryItOut("M:do  /x/ ;\nexport function::__proto__;\n while((prop = (-1).__defineGetter__(\"constructor\", function () { this; } )) && 0);");
tryItOut("/*for..in*/for(let __count__ in -1) yield  /x/g ;");
tryItOut("L: {{}return [[1]]; }");
tryItOut("yield [];");
tryItOut("let (__iterator__ = __noSuchMethod__, prototype) { return <x/>; }\nif((yield ((function ([y]) { })())(<><x><y/></x></>,  \"\" ) instanceof ({ set __noSuchMethod__ __count__ (__iterator__, prototype) { yield window } , __proto__: x::__iterator__ }))) { if ((__proto__%=(<><x><y/></x></>.__lookupSetter__(\"__count__\"))).hasOwnProperty(\"prototype\")) {__count__, constructor = <y><z/></y>;let __proto__ = @foo; }} else {; }");
tryItOut("/*infloop*/M:for(((yield  /* Comment */({}).valueOf(\"number\"))); *; ({ __count__: __proto__ }) =  /x/g ) export __iterator__;new Function");
tryItOut("/*infloop*/do {L: yield ({a1:1});/*infloop*/L:for(__proto__ = <x><y/></x>; (-0); this) \r{(1 for (x in [])) } } while((.unwatch(\"__proto__\")));");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {<x/>export __noSuchMethod__; } while( /x/ ());");
tryItOut("L: {\texport __proto__; }");
tryItOut("with({}) yield __iterator__ = __proto__;");
tryItOut("if(<><x><y/></x></>) {} else  if (null) ; else {{}return; }");
tryItOut("/*for..in*/for(((<x><y/></x> & yield;) != <><x><y/></x></>)(*) in ((function (prop, __count__) { return (#2=prototype = __parent__ - <x/>) } )(*::* for (prop in *::*))))export *");
tryItOut("yield (([1,2,3,4].map).@foo)\nM:with({__count__: (prop *= <x><y/></x>++)})\fif(*) break ; else  if (null) {return;var __proto__ = <y><z/></y>; }");
tryItOut("{const __proto__ =  '' , __parent__; }\n");
tryItOut("/*for..in*/L:for(var prop = #1# in --[]) {}\nexport __parent__;");
tryItOut("with(<y><z/></y>){throw undefined; }");
tryItOut("yield eval(\"{}\", this);");
tryItOut("break L;");
tryItOut("export *\nconst constructor = *::*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in __proto__ = [1,,]) while(() && 0){return;break L\ncontinue ; }");
tryItOut("switch(return __noSuchMethod__) { case 6:  }");
tryItOut("/*for..in*/M:for(constructor = [({ __count__: [[], ({ __noSuchMethod__: ({ prop: __count__ }), prop: ({ __noSuchMethod__: prototype, __noSuchMethod__: prop }) }), ], constructor: ({ __proto__: ({ prop: [, ] }) }) }), ({ __iterator__: ({ prototype: ({ __noSuchMethod__: ({ constructor: prop }) }) }) }), ] = [] in <><x><y/></x></>.throw(window) === <><x><y/></x></>) {throw StopIteration; }");
tryItOut("/*infloop*/for((<y><z/></y>.hasOwnProperty(\"constructor\")); [11,12,13,14].filter; (__parent__+=1e81)) {}");
tryItOut("return this.__defineGetter__/*\n*/(\"__noSuchMethod__\", <x><y/></x>);");
tryItOut("M:with({__parent__: <x><y/></x>})return;");
tryItOut("M:do return ; while((<><x><y/></x></>) && 0);");
tryItOut("/*for..in*/for(const __count__.constructor in ((__proto__.__lookupSetter__(\"__noSuchMethod__\"))(null))){; }");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = __parent__.__count__ getter= (<><x><y/></x></>).call in this) {<x><y/></x>; }\nlet (__iterator__) { {} }");
tryItOut("if(new (function  prototype () { yield <><x><y/></x></> } )()) { if (this) continue L; else }");
tryItOut("return new (new (<bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb>)())();");
tryItOut("/*for..in*/for(let [__parent__, __count__] = (this.__defineSetter__(\n\"prop\", /a/gi)) in [z1]) {<x><y/></x>;(<x><y/></x>); }");
tryItOut("if((__parent__\n)(@foo <<= 1e4, new (<x><y/></x>)())) { if (__iterator__.(__noSuchMethod__)) {}\n\tprop getter: [1,2,3,4].slice\n} else {return <><x><y/></x></>; }");
tryItOut("if(<><xxx {__count__}={4..valueOf(\"number\")['__count__'] ? <x/>.__iterator__ : (prop.__count__ setter= <><x><y/></x></>).__parent__} /></>) { if (([(4.)([[]], [1,,])].some(/a/gi))) {{/*for..in*/for(__noSuchMethod__.5.0000000000000000000000 setter= function(q) { return q; } in __iterator__) {export *; } } }} else /*for..in*/M:for(let __parent__ in __noSuchMethod__) {gc() }");
tryItOut("let (__noSuchMethod__, constructor) { export *; }");
tryItOut("/*infloop*/L:for(__noSuchMethod__; __iterator__ = (this.isPrototypeOf(<x><y/></x>)[this.__defineSetter__(\"prop\", (window).watch)]); (uneval())) {/*for..in*/for((033)(this) in (((1 for (x in [])))((__proto__.yoyo(<x/>)))))(<><x><y/></x></>);/*infloop*/M:do export constructor; while( /x/g ); }");
tryItOut("with({}) return (<x/>.isPrototypeOf(__proto__));");
tryItOut("L: {/a/giconst __iterator__, prototype = 0x99; }");
tryItOut("L:if((\nprototype.constructor getter= gc)) {const .2__parent__, prop; } else  if (\f(([Boolean(this)]))) (__parent__+=<><x><y/></x></>);");
tryItOut("/*infloop*/L:while((new (eval)()))/*for..in*/M:for(prototype = <><x><y/></x></\t> in null) {const prototype; }");
tryItOut("switch((__noSuchMethod__ = (prop++))) { default: case 5: case 0: if(({a2:z2})) { if (false) ;} else {gc() }\n(#1=[#1#]);break; \n__proto__;case (uneval(get)).prototype = *.eval(((p={}, (p.z = *::*)())\t.propertyIsEnumerable(\"constructor\"))): return  /x/ ; }");
tryItOut("{{} }");
tryItOut("const prop = 1e81");
tryItOut("return;");
tryItOut("switch(\rundefined) { case (new (<x><y/></x>)((function ([y]) { })())): let (__parent__ = <y><z/></y>--) { do {} while((yield *) && 0); }case (<x><y/></x>.__noSuchMethod__ = *::*).valueOf(\"number\"): /*for..in*/for(const (<x/>)(__parent__) in window) {*;continue ; }throw (new ( \"\" )(<><x><y/></x></>));break; break; default:  }");
tryItOut("\n");
tryItOut("throw StopIteration;");
tryItOut("with({__parent__: <><x><y/></x></>.hasOwnProperty(\"__proto__\")})yield;export __count__;");
tryItOut("/*for..in*/for((prop) in ({})) \f{/a/gi/*infloop*/L:while([,,])export __proto__; }");
tryItOut("let (prototype) { /*infloop*/M:for(const __noSuchMethod__ = (<x><y/></x>.eval(prop)); __count__.propertyIsEnumerable(\"prototype\"); yield -0; ? ({a1:1}) : <x><y/></x>) {;; } }");
tryItOut("with(window)throw <x><y/></x>;\n\n");
tryItOut("if(<><x><y/>\t</x></>) { if (<y><z/></y>) {} else yield;}");
tryItOut("with({__noSuchMethod__: (constructor) <<= (window |= (-0))})([1,,]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in 0.1) M:if( \"\" ) {const __count__, __iterator__ = __parent__;__parent__; } else  if ([1]) {let __proto__;prop; }");
tryItOut("/*for..in*/M:for(var prototype = true in __iterator__.__proto__) function  prototype (__proto__, __iterator__) { yield <y><z/></y> } ");
tryItOut("{continue ; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let __count__; prop-= /* Comment */(this)(); ({ ({}): ({ __count__: (__iterator__)[undefined]['__iterator__'] }) }) = ({ constructor: __noSuchMethod__ })) yield  \"\"  <<= window;");
tryItOut("/*for..in*/for(const constructor = (__parent__.__count__ = <><>undefined</></>) in (<x/>[null])) /*infloop*/do {return;return; } while(<x><y/></x>);");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in constructor) {continue M;(x::__parent__); }");
tryItOut("yield <x/>;");
tryItOut("M:switch(constructor.prop = /*\n*/[yield <x><y/></x>]) { default: window\n;break; case 3[__iterator__].watch(\"__count__\", (<x/>).watch) ^ 'fafafa'.replace(/a/g, function(q) { return q; }): break;  }");
tryItOut("let (constructor = (*.prop)) { L:with({__count__: ( /x/g .eval(1.3))}) }");
tryItOut("/*infloop*/for(let prop = (<x><y/></x>).call(window, __count__ = <x><y/></x>, <><x><y/></x></>); (__count__.__count__ getter= function(q) { return q; }); <employee id=\"1\"><name>Joe</name><age>20</age></employee>) eval");
tryItOut("do var __parent__, __proto__\n/*infloop*/L:for(try { yield; } catch(prop) { gc() } finally { *::*; } ; <y><z/></y>; __count__) {throw this; } while((-0 ? null : constructor) && 0);");
tryItOut("do {constructor = __parent__5.0000000000000000000000; } while((constructor-=1e-81) && 0);");
tryItOut("if([11,12,13,14].some) export __parent__; else  if ((Function())) {; } else var constructor");
tryItOut("/*infloop*/do {const prop = undefined;if(*) {yield; } } while((prop = <x/> << this.@*));");
tryItOut(";");
tryItOut("{ }");
tryItOut("/*infloop*/for(( /x/ )((#2=<><x><y/></x></>), [[1]]); \n(prop = 3.141592653589793 ? \n /x/g  : <x/> >>= (p={}, (p.z = *::*)())); new 'fafafa'.replace(/a/g, (eval).call)) {export *;throw this; }");
tryItOut("for(let y in []);");
tryItOut("if((\nthis.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })).watch(\"__parent__\", function  prop () { return \n(<y><z/></y> for (prop in <y><z/></y>)) } )) let constructor, constructor; else let (constructor, __iterator__) { throw 1e81; }");
tryItOut("for(let y in [])\n");
tryItOut("/*for..in*/for(var prop in (new ( '' )())) {gc()((-1)); }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for( /x/ .__lookupGetter__(\"prototype\"); yield 1e4; prop = ({ 4.: __count__ })) {__noSuchMethod__ = [,,z1];L:switch(<x/>) { case 4: let constructor;break;  } }");
tryItOut("L: do let __iterator__ = {}; while(( '' ) && 0);");
tryItOut("if(__count__ = <x><y/></x>) {const __proto__; } else throw  '' \n");
tryItOut("return;");
tryItOut("var __parent__;");
tryItOut("/*infloop*/do yield prototype; while(.2);");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(x::prototype in [z1,,]) ;return  /x/g \nexport *; }");
tryItOut("/*infloop*/do {propL: undefined; } while((1 for (x in [])) instanceof <x/>.unwatch(\"__proto__\"));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in false) {let prop =  '' , prop;gc() }");
tryItOut("__parent__");
tryItOut("/*infloop*/while( \"\" ({constructor: prop}))throw  /x/g ;");
tryItOut("if((export *)) { if (delete (this >> 1.2e3)) let prop; else {[[]]__proto__, prop; }}");
tryItOut("L: {{} }");
tryItOut("do {[]\nexport *;\ncontinue ;\nexport *; } while(((p={}, (p.z = <y><z/></y>)()) % *) && 0);");
