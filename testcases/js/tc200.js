tryItOut("/*infloop*/while( /* Comment */this){; }");
tryItOut("L:while((1e4) && 0){yield; }");
tryItOut("/*infloop*/M:while(__count__+=[new (arguments)(this, this)])/*for..in*/M:for(let [__count__, constructor] = prop in -3/0) {return __count__; }");
tryItOut("<bbb xmlns=\"((3.141592653589793 ==  '' ['prototype'])-={})\"></bbb>");
tryItOut("yield;");
tryItOut("/*infloop*/while(<x/>)var __parent__ = @foo, __parent__;");
tryItOut("return;");
tryItOut("return;");
tryItOut("__parent__");
tryItOut("/*infloop*/L:for(let __parent__; #1=[#1#]; (new prototype(<y><z/></y>, @foo))) let (__proto__) { (null); }");
tryItOut("/*infloop*/do {let __iterator__;(({})); } while(__parent__ = false);");
tryItOut("for(let y in [5,6,7,8]) throw constructor;");
tryItOut("(<x><y/></x>);");
tryItOut("if( \"\" ) {{} } else  if (<><xxx {prototype}={([new Error((#1=[#1#].__lookupSetter__(\"__iterator__\")), ({a2:z2})) .@x:: ((undefined).watch).call(window, ) for (__iterator__ in new (Math.pow)(window, <y><z/></y>)) for each (__proto__ in (eval(\"undefined\", [,,]))) for each (prop in prototype) for (prototype.__noSuchMethod__ in <x/>) for (prototype in #1=[#1#])])} /></>) {export *;if(< function (({ prop: __parent__, __parent__: [, [__iterator__, , ], ({ prototype: constructor, __parent__: prototype })] }), ({ constructor: prototype })) { if(( /x/g )()) {yield; } else  if (4. - this) yield function(id) { return id }; else {const prop = undefined, __count__ = <x/>; } } xy/>) { if (function ([y]) { } .. <y><z/></y>) } else {return [,,];return; } } else {continue M; }");
tryItOut("L: {<x><y/></x>;export __iterator__; }");
tryItOut("/*infloop*/L:\tfor(function::constructor(<><x><y/></x></>) >>>=(0/0([1])); ({ get prototype constructor () /x/ ,  set __proto__ __parent__ (prop) { yield ( /x/g  for (constructor in <x/>)) }  }); ({__noSuchMethod__ getter: ( \"\" ).call, function::function::__parent__: prototype }) !== ) let (__count__ = *, prototype) { prop; }");
tryItOut("if((__noSuchMethod__[*::*])) {export constructor; } else  if (__count__) ;");
tryItOut("/*for..in*/for(let __iterator__ = @foo.yoyo(4.) in __iterator__ = ( '' .hasOwnProperty(\"__count__\"))) {export __parent__;if([(#1=[#1#] / <x><y/></x>)].map((true).watch)) { if (('fafafa'.replace(/a/g, gc)).__noSuchMethod__ = case @foo: yield <x/>; << <x/>)  else {<bbb xmlns=\"prop\">yyy</bbb> }} }");
tryItOut("constructor = (\t{ constructor: prop });");
tryItOut("/*infloop*/for(__proto__; ((gc).apply).call(<y><z/></y>, <><x><y/></x></>); this.__iterator__ = -0) {/*infloop*/do {let __noSuchMethod__, constructor; } while([[1]]); }");
tryItOut("let __proto__ = <><x><y/></x></>, __iterator__ = <x><y/></\nx>;yield;");
tryItOut("return <><x><y/></x></>\nreturn <><x><y/></x></>;");
tryItOut("/*for..in*/\rM:for(constructor in __parent__(yield <y><z/></y>)%=new /a/gi() |= (constructor( /x/g ))) if(prop.__proto__ getter= (function  constructor (return;) { yield  /x/g ; } ).apply ? 3.141592653589793.propertyIsEnumerable(\"__parent__\") : <x><y/></x>) { if (<x/>) let constructor, __proto__ = <><x><y/></x></>; else export __count__;}");
tryItOut("@foo/*for..in*/for(var [prop, __parent__] = <y><z/></y> !== prop in  /x/ ) {export *; }");
tryItOut("with({prop: ([<y><z/></y> if (this)])})/*for..in*/for(const [prototype, prototype] = ([__parent__]) in  '' ) {var __proto__ = <x><y/></x>;yield __noSuchMethod__; }");
tryItOut("/*infloop*/M:for(var prop = true;  \"\" ; this) (<x><y/></x>);");
tryItOut("const set = <x><y/></x>");
tryItOut("M:while(((())(let (__parent__) @foo\t)) && 0) '' ;");
tryItOut("{/*for..in*/for(let __parent__ in ((Math.sin)((<><x><y/></x></>.yoyo((__noSuchMethod__.(<><x><y/></x></>)))))))export *; }");
tryItOut("{switch(([__iterator__, , prototype] = <><x><y/></x></>.propertyIsEnumerable(\"prop\"))) { case ([1] !== true).@*: break; default: break; case [,]:  \"\" __count__ = constructor, __parent__;case __noSuchMethod__ = \n0 | this: __iterator__;switch(__parent__.({})) { case 1: case 2: yield  /x/g ;break; let __noSuchMethod__ = <x><y/></x>, __parent__ = window; }break; /*for..in*/for(var [__iterator__, prop] = window in ;[false]) {return;export __proto__;yield undefined; }break; case (({ __iterator__: ({ __noSuchMethod__: __parent__ }), constructor: [prop, prop, ] }) = <><x><y/></x></> += <x><y/></x>): {yield undefined; } } }");
tryItOut("/*infloop*/L:for(const __proto__ = new *.constructor; ++*; (0/0)(<x/>,  \"\" )) {}");
tryItOut("{}");
tryItOut("return;");
tryItOut("{/*for..in*/L:for(let __parent__ in  /x/g ) {__iterator__, prop = <><x><y/></x></>; }; }");
tryItOut("let (__parent__ = <xxx>{constructor}</xxx>, ({ __parent__: __noSuchMethod__ })) { {gc() } }");
tryItOut("/*for..in*/for(const __iterator__ in ({a1:1})) prop = __noSuchMethod__;");
tryItOut("with({constructor: window.constructor}){L: {'haha'.split{} }{yield <x><y/></x>;throw this; } }");
tryItOut("this.zzz.zzz;");
tryItOut("with((this || <x><y/></x>).__lookupGetter__(\"prop\"))continue L;");
tryItOut("if(__proto__) {break ;(/a/gi).\tcall } else  if (this) {}");
tryItOut("with(([] = <x><y/></x> ? <><x><y/></x></> : 1e4)){((eval(\"__parent__.__parent__\", (prototype))));export *\t; }");
tryItOut("({})((yield this)) = __noSuchMethod__;");
tryItOut("(window);;");
tryItOut("let __noSuchMethod__ = window; const prop;");
tryItOut("let(__count__ = undefined ? <><x><y/></x></> : <><x><y/></x></>, ({ setter: __proto__, __noSuchMethod__: constructor })) ((function(){this.zzz.zzz;})()); const __parent__;");
tryItOut("true");
tryItOut("{ { L: yield this; } return; }");
tryItOut("/*infloop*/for(const [, , , ] = 1.2e3 >> this\n &&  <!--yy--> Math.pow)(#1#,  /x/g ); (3.unwatch(\"constructor\").throw(const __noSuchMethod__ =  '' , prototype = <><x><y/></x></>)); ({a1:1}).hasOwnProperty(\"prop\")) {if(.hasOwnProperty(\"__parent__\")) {gc() } else  if (0x99.hasOwnProperty(\"__noSuchMethod__\")) throw null;((function ([y]) { })()).__defineSetter__ const __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in ({function::constructor: <x/>})) (1 for (x in []))");
tryItOut("if([((p={}, (p.z =  '' )()) %= __count__ = #1#)].filter(__noSuchMethod__:  /x/g function ()#1#)) { if (window) {({}) } else yield;}");
tryItOut("throw StopIteration;");
tryItOut("continue \n(<x><y/></x>);");
tryItOut("/*for..in*/for(const __count__ = ((new function () { yield [1,,] .@ * } ()) <<= Error()) in \n<x><y/></x>.valueOf(\"number\")) {return __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in __noSuchMethod__.(<x><y/></x>)) \nM:\fswitch( \"\" ) { default: 4.; }\n");
tryItOut("with({prototype: <employee id=\"1\"><name>Joe</name><age>20</age></employee>}){if(__count__ = 1.3) __parent__: undefined; }");
tryItOut("if(__noSuchMethod__ = true) L: (<y><z/></y>); else return;");
tryItOut("/*infloop*/while(<><x><y/></x></>){var __noSuchMethod__;return; }");
tryItOut("if(__parent__.__count__%=void true) { if (((<y><z/></y>.__lookupSetter__(\"prototype\") if (3/0)) == (void \n@foo))) {<x><y/></x>;L:switch( /x/ (*::*)) { default: break; case 5: true;case  /x/ .isPrototypeOf( '' ): while(( \"\" ) && 0)export __count__;break;  } }} else {(-3/0.__noSuchMethod__);if(arguments) { if (<x><y/></x>.(<x><y/></x>)) {}} else {yield;(undefined); } }");
tryItOut("/*infloop*/M:for(const ({ constructor: ({ __parent__: constructor }) })\t = true; ({ set __iterator__(prop)@foo }); let (prototype = <><x><y/></x></>)  \"\" ) {yield false;{} }");
tryItOut("export *\nlet constructor, __iterator__;");
tryItOut("M:if(<y><z/></y>) (new <x><y/></x>(this))\nbreak M; else {/*infloop*/for(const ({ __noSuchMethod__: ({ __noSuchMethod__: ({ __proto__: __iterator__ }), function::__iterator__: [] }) }) = ([11,12,13,14].map.__proto__); ({__count__: prototype = prototype, constructor: (window)( { yield  /x/g  } , undefined) }); this.zzz.zzz) ; }");
tryItOut("let(prop = , __noSuchMethod__) { with({}) throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x><y/></x>) ( \"\" );");
tryItOut("if((new 1e4().propertyIsEnumerable(\"prop\"))) ");
tryItOut("let (constructor = undefined ||  if (*)) { L: {export constructor;export __iterator__; } }");
tryItOut("yield;");
tryItOut("gc()\n");
tryItOut("switch((* ^= *)) { default:  }");
tryItOut("/*for..in*/L:for(var ['__proto__'] in [11,12,13,14].map) {export __proto__;throw  /x/ ; }");
tryItOut("/*for..in*/L:for([prototype, __parent__] = <><x><y/></x></> in <x><y/></x>) throw <><x><y/></x></>;");
tryItOut("/*infloop*/for(const ({ prop: ({ __proto__: \f({ __proto__: [prototype] }), prototype: constructor }) }) = 'fafafa'.replace(/a/g, <><x><y/></x></>); <xxx {prop}={@foo\t} />(([(<><x><y/></x></>.__iterator__)]), (({a1:1}).propertyIsEnumerable(\"__iterator__\"))); __noSuchMethod__ = ( /x/  if (<x><y/></x>))) {{}return; }");
tryItOut("let(prop = this , <y><z/></y>) ((function(){let([], ({ constructor: __noSuchMethod__, __noSuchMethod__: __noSuchMethod__ })) ((function(){throw __noSuchMethod__;})());})());");
tryItOut("with(1.3.(this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map))\f)export __proto__; const __iterator__;");
tryItOut("let(__parent__ = ({ get __count__(__proto__) { return (@foo -  '' ) } , prototype: __parent__%=<x><y/></x> }), __noSuchMethod__ = __iterator__ @ prototype.isPrototypeOf((prototype = <><x><y/></x></>))) { constructor.prop = prototype;");
tryItOut("return; const __iterator__;");
tryItOut("L:if((this.zzz.zzz)) {__count__;<x><y/></x>\t; } else /*for..in*/for(__parent__ = <x/> in 1e4) prototype(window) __proto__: __parent__ = new ([1,2,3,4].map)((function ([y]) { })())");
tryItOut("export *\n");
tryItOut("continue ;");
tryItOut("__parent__");
tryItOut("var function::__parent__ = [[]], __proto__;");
tryItOut("1e81;");
tryItOut("/*infloop*/L:do {throw [[]]\n } while([]);");
tryItOut("/*for..in*/L:for(var constructor in (((1e4 >= this))(({ prototype: ({ prop: ({ prototype: ({ prop: ({ function::__proto__: ({ prop: constructor }) }) }), __iterator__: ({ __noSuchMethod__: constructor, __proto__: [[__proto__, , , __parent__], ({ __noSuchMethod__: __parent__ }), ] }) }), prop: (__noSuchMethod__) }), prop: __proto__ }) = <>Function()</>))){{export *;export *; } }");
tryItOut("/*for..in*/for(var constructor in ((function(q) { return q; })(((new this() for (__count__ in *::*) for (__count__ in null(/ for (__count__ in [z1,,]))))))gc()");
tryItOut("switch(*::*) { case __count__ == <x/> if (4.).__lookupGetter__(\"__count__\"): __parent__ = <x><y/></x>break; /*for..in*/M:for(__iterator__.__count__ in 3) {(new Function(\"const prototype, __parent__;\"))gc() }case ((<x/> ^ *::* ^= <><x><y/></x></\f>)--): yield;break; default: /*infloop*/L:for(let ({ constructor: __noSuchMethod__ }) = (<bbb xmlnsccc=\"__proto__.(*)\"><ccc:eee></ccc:eee>)</bbb>; <x/>; window) {}break; case ((1 for (x in [])))(): {with('fafafa'.replace(/a/g, <x><y/></x>)){const prototype, __proto__;gc() } }break; case 3: throw prototype;break; case 4: break; case 8: break; case 9: (*::*).watchbreak; switch(arguments) { case __parent__: gc()break;  }break;  }");
tryItOut("{if((++[[]])) { if (((-1)((<x/>).call(undefined)))) const __noSuchMethod__;} else {gc(){} }if(__iterator__) __iterator__ else  if (window) {return; } }");
tryItOut("if(<x><y/></x> for each (__count__ in <y><z/></y>)) {/*infloop*/L:for(const constructor = (function(q) { return q; }).call(window, 1e4); (new (<x/>)()); (<x><y/>\t</x> / function ([y]) { })) {export prop; }; } else  if ([((Boolean(<\n><x><y/></x></>)) || try { return this; } catch(__count__) {  } finally { export *; } )]) break ;gc()");
tryItOut("while((__noSuchMethod__.prop = (new (\f({}).hasOwnProperty)())) && 0)/*for..in*/for([__parent__, \f__iterator__] = <x><y/></x> in [1,,]) {yield;*\n }\f(({}).hasOwnProperty).apply");
tryItOut("L: yield;");
tryItOut("let(prototype) ((function(){{}})());");
tryItOut("throw constructor = __parent__\n");
tryItOut("/*for..in*/L:for(__proto__ in ((({}).__lookupGetter__)(1e+81)))L:if(prop = *) {break ; }");
tryItOut("if((prop = <><x><y/></x></> = <><x><y/></x></>)) { if (__proto__ =  /x/ ) \nyield;\n else {yield; }}");
tryItOut("if() {return;if((true.eval(__proto__)) != (__parent__+=3.141592653589793)) continue ; else  if (([15,16,17,18].map((-0), prototype.@foo))) var __proto__; else {gc() } } else {do return; while((__proto__ = ( /* Comment */ \"\" )) && 0); }");
tryItOut("/*for..in*/M:for(const [constructor, prototype] = __iterator__-=(<x><y/></x> || window) in (false <= getter)) { const __iterator__; }");
tryItOut("L:if((({ __proto__: __iterator__, __count__: ({ __noSuchMethod__: prop, constructor: __iterator__ }) }) = eval(\"throw [1];\", window))\f(this)) {do {;return; } while((@foo ? 1e4 : <x/>) && 0);/*infloop*/for(let __count__ = __count__ = <y><z/></y>; <x><y/></x>.eval(null);  /* Comment */([<x/>].map((<x><y/></x>).watch))) {let __count__, __iterator__ = constructor; } } else  if ( /* Comment */[,]\t for ((@foo)(prototype) in *)[__noSuchMethod__ < true.__proto__]) switch(__count__ = {}) { case constructor.__noSuchMethod__ = window: prop = <x><y/></x>;break;  }\t else { }");
tryItOut("<x><y/></x>['prototype'] = constructor;");
tryItOut("do yield <><x><y/></x></>; while((this) && 0)\n");
tryItOut("return\n__proto__ = #1=[#1#];");
tryItOut("/*infloop*/for(var ({ constructor: __noSuchMethod__, prop: prototype }) = <x><y/></x>\n; __proto__; <zzz><x/> :: #1#</zzz>yyy.watch(\"constructor\", function  __noSuchMethod__ () { return __iterator__, __count__ } )) ;");
tryItOut("with((__proto__.__count__)){(1 for (x in [])) }");
tryItOut("return;");
tryItOut("/*for..in*/for(var function::__proto__ = ('fafafa'.replace(/a/g, <y><z/></y>)) in [,] ? this : <><x><y/></x></>) {yield <x/>;yield <><x><y/></x></>;\nexport *;\n }");
tryItOut("throw StopIteration;");
tryItOut("M:if(( /* Comment */(new Boolean( '' , __noSuchMethod__)))) {false;return; } else export *;");
tryItOut("{}");
tryItOut("M:switch(__count__) { case 4. >= window: /*for..in*/L:for(let constructor in (((<x/>).call)(<y><z/></y>)))gc()break; break;  }");
tryItOut("/*for..in*/for(__parent__ in ((function  __noSuchMethod__ (__noSuchMethod__, __proto__)<y><z/></y>)(((p={}, (p.z = window)()))))){yield <y><z/></y>; }");
tryItOut("L:while((new ((function ([y]) { })())()) && 0){gc()export prop; }");
tryItOut("yield __count__.__proto__;");
tryItOut("L:with( '' ){export *; }");
tryItOut("M:if((\n(function ([y]) { })())) const __count__ = window; else  if (<y><z/></y>) (window);");
tryItOut("__count__");
tryItOut("with({prop: ({ __proto__: ({ \f__iterator__: __iterator__ }), __iterator__: ({ __proto__: __parent__ }) }) = Boolean(033,  /x/ ) - null .. <><x><y/></x></>})export each;");
tryItOut("yield ([(__noSuchMethod__ = (function  prototype (prop) { yield <x><y/></x> } )(1e-81, <y><z/></y>))].some(__parent__ = (-1)));");
tryItOut("{yield false;; }");
tryItOut("switch(__noSuchMethod__ = constructor) { case (yield  /* Comment */<x/>): break; case <><x><y/></x></>.throw(default: throw <>__count__</>;case 1: prototype;break; export __parent__;break; case 7: (@foo);case 7: throw <><x><y/></x></\n>;case  /x/g : throw  '' ;break; case 7: break; *::*;;break; \f(<x><y/></x>\f);break; ): return (((<x><y/></x>).watch)());/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in  /x/ ) { }break;  }");
tryItOut("do /*for..in*/M:for(let prop in ((new Function)( \"\" [<y><z/></y>]))){(<><x><y/></x></>); } while(([(*)(([window]))]) && 0);");
tryItOut("if(@foo.constructor = <y><z/></y>) {let (__proto__ = <x><y/></x>, prop) { export __count__; }return; } else  if (@foo()) {{}gc() }");
tryItOut("export *; const constructor;");
tryItOut("__proto__ = __count__;");
tryItOut("while((__iterator__ = __count__) && 0)/*infloop*/M:for(const ({ prototype: ({ __proto__: __parent__, prop: ({ __proto__: prototype.prop }) }), prop: ({ constructor: ({ __count__: __count__ }), prop: [({ __proto__: \t({ prototype: prototype, prototype: __count__ }), __parent__: ({ __count__: constructor, __proto__: prop }) }), , , , ] }) })\f = __proto__ = *::*(#1=[#1#] >>= <x/>) == ([1,,].hasOwnProperty(\"__proto__\")).__defineGetter__(\"x::__count__\", function(y) { yield y; return;; yield y; }); ([prototype, __noSuchMethod__].map(({}).__lookupGetter__)); ((true.propertyIsEnumerable(\"prototype\")).eval([[]]))) {yield; const prop;gc() }");
tryItOut("/*for..in*/for(prototype = this >>> <x><y/></x> in <><x><y/></x></>.__lookupGetter__(\"__count__\")) {if(([, , __parent__]\t = window.prop)) yield; else  if (__count__ = <x><y/></x>) {var __parent__ = *::*, prototype; }break M; }");
tryItOut("if((__proto__ =  /x/g )) { if (\ntypeof  /x/g ) \r__iterator__;} else ");
tryItOut("with({prototype: 0x99})with({__parent__: (yield <!--yy-->)});");
tryItOut("return;");
tryItOut("/*infloop*/L:do {continue ;{gc()return; } } while(((this.zzz.zzz).isPrototypeOf(3.141592653589793.*)));");
tryItOut("/*for..in*/for(let ({ __count__: __parent__, __iterator__: __count__ }) in <x><y/></x>) ");
tryItOut("L:if( /* Comment */new (({}).__lookupGetter__)()) {break ;( \"\" ); } else {<x><y/></x>; }");
tryItOut("yield <><x><y/></x></>\nexport prototype; const __noSuchMethod__;");
tryItOut("/*infloop*/L:while(this.__defineGetter__(\"__proto__\", (RegExp(window, __proto__).isPrototypeOf(__iterator__%=<x><y/></x>)).__defineSetter__))");
tryItOut("switch(prop) { case ('fafafa'.replace(/a/g, ({}).__lookupGetter__)): let __iterator__ = [1];break;  }");
tryItOut("do {if(({ constructor: ({ __noSuchMethod__: __noSuchMethod__ }) }) = ({ prop: [, \t, prototype], __iterator__: prop })) { if (true) continue L;} else {return [z1,,]; }if(__iterator__.__proto__ setter= [1,2,3,4].map) {export prop; const __parent__; } } while((function(id) { return id }.propertyIsEnumerable(\"prototype\")) && 0);");
tryItOut("this.zzz.zzz; const prototype;");
tryItOut("return;");
tryItOut("do {; } while((constructor = <><x><y/></x></>) && 0); const prop;");
tryItOut("with({}) let(constructor, __proto__ = this) ((function(){try {  } catch(__iterator__) { <><x><y/></x></>; } finally { return 0.1; } })());");
tryItOut("/*for..in*/L:for(let [__count__, __count__] = [1,,] in (<y><z/></y>.hasOwnProperty(\"__iterator__\"))) {return; }");
tryItOut("/*for..in*/for(window.__iterator__ in __noSuchMethod__ = 5.0000000000000000000000 ? (p={}, (p.z = __parent__)()) : window.yoyo(<x><y/></x>).isPrototypeOf(('fafafa'.replace(/a/g, Function) / prop = __parent__))) M:if(new (eval)()) { if ((<>prop</>.__parent__)) return  \"\" ;} else continue ;");
tryItOut("/*infloop*/for(let __count__; [[1]]; <><x><y/></x></>) {throw this;export __iterator__; }");
tryItOut("return;");
tryItOut("do \nprototype|=5.0000000000000000000000 while((new ([1,,])()) && 0);");
tryItOut("with({prop: (-__count__ = 0x99 !== (*)(<y><z/></y>))})/*for..in*/for(let this = this.__defineGetter__(\"__proto__\", function  prop (\t) { return; } ) in this) {yield @foo; }\f");
tryItOut("; const constructor;");
tryItOut("L:if(3.141592653589793) {} else {}");
tryItOut("return;");
tryItOut("/*infloop*/for(constructor = <><x><y/></x></>\f; __count__; <y><z/></y>) ");
tryItOut("if((__iterator__ = 'fafafa'.replace(/a/g, gc))) (@foo)(-1) else  if (<xxx {__noSuchMethod__}={(<x><y/></x> << <><x><y/></x></>)} />) {return [1] }");
tryItOut("L:with(({ prototype: ({ prop: ({ prototype: constructor }), __iterator__: ({ __count__: ({ __parent__: ({ prototype: constructor, __count__: __noSuchMethod__ }) }) }) }), __iterator__: [[({ __proto__: ({ constructor: prototype }) }), ], ] }) = (__proto__ = __parent__.get = __parent__ *= <><x><y/></x></>)){export __noSuchMethod__ }");
tryItOut("for(let y in []);");
tryItOut("if(__count__ = <x><y/></x>) yield;");
tryItOut("/*infloop*/for(__parent__ = <x><y/></x> = * / __count__.(new *::*()); [,,z1]; (new (function  function::__noSuchMethod__ (__count__, __iterator__) { return  ''  } )() <<= @foo.__count__ || (([1,2,3,4].map)((RegExp(__noSuchMethod__, 3)), <x><y/></x>)))) {{export *; }{{(this); } } }");
tryItOut("/*for..in*/for(var (__noSuchMethod__.prototype) in (({__noSuchMethod__: <y><z/></y> }).prototype)) {let (getter =  /* Comment */<x/>) { let __noSuchMethod__ = [,,z1], __proto__ = ({a1:1}); }/*infloop*/do {yield <x><y/></x>\n/*infloop*/L:while(\t<x><y/></x>){let \r__proto__;var __proto__ = true; }break ; } while((window .. <><x><y/></x></>.*)); }");
tryItOut("while(([[]]) && 0)/*infloop*/while(<x><y/></x>)(<><x><y/></x></>);");
tryItOut("const __parent__");
tryItOut("M:if(__proto__ = <x><y/></x>.(<y><z/></y>)) { if ((<!--\fyy--> >>>=this.__defineSetter__(\"__count__\", new Function))) {<x><y/></x>;({a2:z2}) }} else {return this; }");
tryItOut("/*infloop*/M:for(__noSuchMethod__ = ({prop: ( \"\"  for each (__parent__ in <><x><y/></x></>) for each (constructor in ({a2:z2}))),  get __count__ constructor (__proto__, __proto__) { yield set }  }); 3.141592653589793\n; (<x><y/></x> if (<><x><y/></x></>))) {yield; }");
tryItOut("L:if(*) {break ;gc() } else  if (<x/>) export *;");
tryItOut("Math.sin const constructor;");
tryItOut("if((({function::prototype: __iterator__.prop}))) let __iterator__; else {( /x/ );/*infloop*/for(let ({ prop: __proto__ })\t = (this.zzz.zzz); window.__defineGetter__(\"__count__\", function  constructor (__noSuchMethod__, __parent__) { return #1=[#1#]; } ); +<y><z/></y>) /*infloop*/for(window; false; this) {} }");
tryItOut("if(<x/>) { if (__proto__ = <x><y/></x>.( /x/g )) {; } else continue L;}");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in (undefined.eval(@foo))) return; const __iterator__;");
tryItOut("if(<><x><y/></x></>) {(window); } else  if (<><x><y/></x></>) {return; }");
tryItOut("if(delete = \tthis) yield <x/>; else  if (<><x><y/></x></>.eval(<x><y/></x>)) {(<y><z/></y>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var null in (<><x><y/></x></> === 1e+81)) {continue ;\f }");
tryItOut("{return; }\n");
tryItOut("for(let y in []);");
tryItOut("prop.prop = __iterator__;");
tryItOut("export __iterator__;");
tryItOut("return; const __iterator__");
tryItOut("if((<x><y/></x> ^= this)) {export __count__; }for(let y in [5,6,7,8]) ([]);");
tryItOut("let(({ prototype: [, ({ each: constructor }), [, , ], ({ __proto__: __noSuchMethod__, __parent__\f: [,,] }), ] }) = (<><x><y/></x></> ^ <><x><y/></x></>.__lookupGetter__(\" { {} } \")), __proto__ = @foo - 0) { this.zzz.zzz;");
tryItOut("L:with(<y><z/></y>)if(#1#) { /x/ ; } else  if (<><x><y\t/></x></>) {break M; }");
tryItOut("if(<x><y/></x> ? <x/> : <><x><y/></x></>) {export prop;export __iterator__; } else {return undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in function ([y]) { }) continue ;");
tryItOut("export *\n const prop;");
tryItOut("L:with({__proto__: __proto__ = [, ]})let __noSuchMethod__, prototype;");
tryItOut("/*for..in*/for(const constructor = <y><z/></y>.@foo in eval(\"(function  throw <><x><y/></x></>; (__noSuchMethod__)window.__defineSetter__(\\\"__proto__\\\", (new Function(\\\"return;\\\")))).call(([(this.__defineGetter__(\\\"<><bbb xmlns=\\\\\\\"yield <><x><y/></x></>\\\\\\\">yyy</bbb></>\\\", (new Function(\\\"var __count__ =  /x/g , __parent__ = <x><y/></x>;\\\"))))].map((<><x><y/></x></>).watch)), constructor =  \\\"\\\" )\", [15,16,17,18].sort((new Function(\"var __count__;\")), __noSuchMethod__))) __proto__ = __parent__;");
tryItOut("/*for..in*/for(const __parent__ in ((('haha'.split).call)((__parent__ = <x><y/></x>.hasOwnProperty(\"__parent__\") - <x><y/></x>.prop)))){yield; }");
tryItOut("with({}) { throw window; } ");
tryItOut("if(export *() ? prop = <x/> : (({__iterator__, __parent__: ((__parent__)[<x><y/></x>]) }))) {if([1,,]) {(undefined).__defineSetter__export __parent__; } else yield;while(( \"\" ) && 0){gc() } } else  if (this.__defineGetter__(\"prop\", 'haha'.split)) /*infloop*/for(let ({ __proto__: __noSuchMethod__ }) = new Number(null); (let (prototype) @foo); (<x><y/></x>)[<><x><y/></x></>]) yield; else /*for..in*/for(({ __parent__: constructor, prop: constructor }) in ((function(q) { return q; })((constructor = ([11,12,13,14].sort).yoyo(<x><y/></x> >>>=<x><y/></x>))))){yield;export *; const false; }");
tryItOut("L:if(#3={a:#3#}) yield 1e4\r; else {prop = <><x><y/></x></>, __proto__ = <><x><y/></x></>;export \tprototype; }");
tryItOut("for(let y in [5,6,7,8]) with({}) { (<x><y/></x>).__defineSetter__ } ");
tryItOut("{ }");
tryItOut("return prop = <><x><y/></x></>;");
tryItOut("M:if(<xxx {__parent__}={(--<x><y/></x>)((new (<x/>)(4., true)), 0.1)} />) { if ((constructor) = (({constructor: <x><y/></x>}))) {export *;export prototype; } else {{} }}");
tryItOut("if((new ('fafafa'.replace(/a/g, function () { return <y><z/></y> } ))(0x99.eval(*::*), <><x><y/></x//h\n></>))) <y><z/></y>; else  if (<x><y/></x>.watch(\"getter\", function(y) { yield y; gc(); yield y; }) for each (__proto__ in <y><z/></y>.__lookupSetter__(\"__iterator__\")) for (__iterator__.yield in <x><y/></x>)) yield;");
tryItOut("Function");
tryItOut("if(__count__.__proto__ = <x/>) { if ((this(1e-81))) export *;} else continue L;");
tryItOut("break L;");
tryItOut("/*infloop*/M:while(this)export *;");
tryItOut("__noSuchMethod__ = <x/>\n");
tryItOut("/*infloop*/for(yield false = (<><x><y/></x></>)(<x><y/></x>); gc() ? (yield <y><z/></y>) : <x><y/></x>.isPrototypeOf(<x/>); __count__) /*for..in*/for(let __noSuchMethod__ in (( /x/ )(((yield (eval(\"return\", undefined)))))))/*for..in*/for(var [prop, prop] = *::* in <x/>) {export *; }");
tryItOut("continue \ntrue;");
tryItOut("if((uneval(<x><y/></x>))) return @foo; else  if () {\t } else {export *;break ; }");
tryItOut("if(1e4) yield; else {do {var prototype = <x><y/></x>;; } while(((*::* in <><x><y/></x></>)) && 0); }");
tryItOut("try { for(let y in [5,6,7,8]) ; } finally { with({}) yield; } ");
tryItOut("{M:while(((-1)) && 0){constructor = <x/>, prop = <y><z/></y>;constructor = *::*; }gc() }");
tryItOut("L:if(#2=-3/0) { if (0/0 ::  '' ) yield; else {<><x><y/></x></>; }}");
tryItOut("with({prop: new <>\t<x><y/></x>\f</>(*)})let __parent__, __count__;");
