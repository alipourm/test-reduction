tryItOut("for(let y in [5,6,7,8]) throw __count__;");
tryItOut("/*for..in*/for(prop\t = <x/> in undefined) const constructor = ({});");
tryItOut("/*infloop*/for((\f<x><y/></x>[3/0]).__lookupSetter__(\"prototype\"); __iterator__ = (window.hasOwnProperty(\"prop\")); (__noSuchMethod__.__lookupSetter__(\"prop\"))) {var __count__; }");
tryItOut("while((new Iterator([])) && 0)gc()");
tryItOut("/*infloop*/L:while(<><x><y/></x></>){ }\n@foo;\n");
tryItOut("let(__parent__ = ([15,16,17,18].sort([1,2,3,4].slice, void (function (__proto__) { yield 0/0 } )))) { for(let y in []);");
tryItOut("if(__iterator__ = let (__proto__) -1(<x><y/></x>)) { if ( /x/g ) /*for..in*/for(__proto__ = <x/> in window) {__iterator__;yield __proto__; }} else do return [z1]; while((*::*) && 0);");
tryItOut("constructor = undefined;");
tryItOut("switch(<x><y/></x>.throw(__count__)) { case ({__count__: <x/>, __noSuchMethod__ }): let prop = *::*, __noSuchMethod__; }");
tryItOut("if(this |= __proto__.__noSuchMethod__) {yield undefined; } else export prop;");
tryItOut("yield  /x/g ;");
tryItOut("/*for..in*/for(const __count__ in (new (<x><y/></x>)(<x/>, <x><y/></x>))) {yield;\nreturn;\n'haha'.split }");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = (null)(<><x><y/></x></>) = <x><y/></x> ^ false in prototype) {return; }");
tryItOut("/*infloop*/for(({ __iterator__: prop, prop: __proto__ }) = constructor = false; new (@foo)(*); ([[]] *= <><x><y/></x></>)) {{}let *::*; }");
tryItOut("M:with( /x/g ){; }");
tryItOut("yield\nconst __noSuchMethod__ = @foo;");
tryItOut("switch(<x><y/></x>.unwatch(\"__proto__\")) { default: var __parent__, constructor;{prototype = <x><y/></x>; }break; case 9: yield this;break;  }");
tryItOut("function(id) { return id };");
tryItOut("yield");
tryItOut("if(prototype = @foo -= undefined.throw(true)) {{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in @foo) {Vgc() }/*infloop*/for(let let;  /* Comment */<x><y/></x>; (<y><z/></y>.__lookupSetter__(\"constructor\"))) return;yield <x/>(__count__);");
tryItOut("/*infloop*/for((new gc(({a1:1}), __parent__).hasOwnProperty(\"prototype\")); (yield new function(y) { yield y; yield  /x/ ;; yield y; }()()); ({__noSuchMethod__: * })) return;");
tryItOut("/*for..in*/for(var [prop, prototype] = ({ get __count__ __count__ (__count__, prop) { return __iterator__ } ,  get __noSuchMethod__ prototype (__count__, prop) { yield 1e+81 }  }) in true) let __iterator__, prototype;");
tryItOut("__proto__ setter: (eval).call");
tryItOut("L:with({__parent__: (window)(1e+81)})export prop;");
tryItOut("'haha'.split");
tryItOut("while(( \"\"  -= getter >>= __count__ |= ({a2:z2}).@*) && 0)function  __proto__ (prop)\f { return __iterator__.(<><x><y/></x></>) } ");
tryItOut("let (__parent__ = \f<\f><x><y/></x></>) { export *; }");
tryItOut("with(<><bbb xmlns:ccc=\"<y><z/></y> - prop.propertyIsEnumerable(\"__count__\")\"><ccc:eee></ccc:eee></bbb></>)if(__noSuchMethod__--) yield [,,]; else ");
tryItOut("M:if(<x/>) { if (<y><z/></y>) {let __noSuchMethod__, prop; } else {;yield; }}");
tryItOut("(3.141592653589793);");
tryItOut("/*infloop*/do \nreturn;\n while((yield true));");
tryItOut("case ((this.zzz.zzz .@x:: #1=[#1#]))[(__iterator__ = <><x><y/></x></>)].@foo: break; ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <x><y/></x>) export *;");
tryItOut("yield;\nreturn  \"\" ;\n");
tryItOut("L: {let (__parent__ = window.__iterator__ === ((<x><y/></x>)())) { with({prop: ([15,16,17,18].sort([1], false))})yield <y><z/></y>; }function(y) { yield y; return 5.0000000000000000000000;; yield y; } const __iterator__; }");
tryItOut("*;");
tryItOut("__count__");
tryItOut("let(constructor = [ /* Comment */null &= <y><z/></y>.prop].sort(prop = __count__), prop.constructor) ((function(){let(__count__) { for(let y in []);})());");
tryItOut("while(((*::* ? __noSuchMethod__.__defineGetter__(\"__parent__\", function(q) { return q; }) : this >>>=<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", Function)) | (@foo.propertyIsEnumerable(\"constructor\"))) && 0)/*infloop*/while([1,,])__proto__");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("if(constructor = <><x><y/></x></>) return; else gc()\n");
tryItOut("{<x><y/></x>.constructorif(<y><z/></y>) {gc() } else {} }");
tryItOut("/*for..in*/for(let (3/0.__count__)['__count__'] in (((({}).hasOwnProperty).call)([[1]])))L:do {throw <x><y/></x>; } while((Date( /x/ , null)) && 0);");
tryItOut("/*for..in*/M:for(let __proto__ in <><x><y/></x></> >>> undefined) {}");
tryItOut("function (__iterator__) { yield false } ");
tryItOut("while(([,,z1]) && 0){continue ;export prototype; }");
tryItOut("for(let y in []);");
tryItOut("if(.2.propertyIsEnumerable(\"__noSuchMethod__\")) {let prop;; }");
tryItOut("if(((eval)(<x><y/></x>))[( /* Comment */-3/0)].unwatch(\"constructor\")) {const __iterator__ = prototype;/*infloop*/for([11,12,13,14].map; new function  __count__ (__proto__, __proto__) { return <x/> } ( /x/g , ({a2:z2})); prop.(<y><z/></y>)) L:if(this) { if (constructor) {__count__return __count__; }} else {prototype; } } else  if ((({}).hasOwnProperty).call((#3={a:#3#}( \"\" ) && <x><y/></x>), (@foo *= <x><y/></x>))) {}");
tryItOut("switch((<y><z/></y>)[new ((prototype.__count__ getter= function  prop (prototype, __proto__) { ; } ))()]) { case [1,2,3,4].map: break; case 0: default: const prop = window\nreturn ({a2:z2});break;  }");
tryItOut("{if(new new Function(@foo, .2)) (this); else  if ((uneval(*))) throw ({a1:1})\ngc() }");
tryItOut("{}\n__noSuchMethod__ = true;\n");
tryItOut("with({}) { {} } ");
tryItOut("if((__iterator__.(this) &&  /x/  for each (__proto__ in (<x/>)))) {(*); } else  if (typeof window) {;switch(this |= prototype) { default: break;  } } else M:if(this) { if (__noSuchMethod__) {return this;return <><x><y/></x></>; } else {[1,2,3,4].slice-0; }}");
tryItOut("if(([11,12,13,14].sort)) {let (__count__) { yield *; } } else {let constructor; }");
tryItOut("do return; while((([[]])()) && 0);");
tryItOut("/*for..in*/for(__parent__.__count__ in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {let (__parent__ = false) { gc(); } }");
tryItOut("L:if( \"\" ) {yield /*\n*/this } else /*infloop*/for([, , [({ function::constructor: __noSuchMethod__, prop: __parent__ })], ({ __proto__: ({ __iterator__: __count__, __parent__: __count__ }) })] = //h\n--this; __count__.__noSuchMethod__ = yield ([@foo for (prototype in [[]])]); *) {__noSuchMethod__ = <><x><y/></x></>, constructor = __noSuchMethod__;#1#; }");
tryItOut("try { ; } catch(function::x::x::prototype if constructor ?  \"\"  : <><x><y/></x></>) { (*); } finally {  } ");
tryItOut("{yield; }");
tryItOut("if(*::*) { if (({a2:z2})) {const , __count__; }} else var __parent__ = <x><y/></x>;");
tryItOut("yield;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for((prop.hasOwnProperty(\"constructor\") , new (function ([y]) { })()(<x/>)); this.zzz.zzz; try { this.zzz.zzz; } catch(__proto__ if (function(){let(prototype = window, __proto__ = __proto__) { throw  '' ;})()) { with({}) return; } ) {(new Function(\"export __iterator__;\"))<y><z/></y>; }");
tryItOut("return;if( '' ) {return <y><z/></y>;/*infloop*/while(false)this; } else {/*for..in*/for(let prototype = 4. in ({a2:z2})) {prop = <y><z/></y>, constructor, prototype;let __parent__ = <><x><y/></x></>; } }");
tryItOut("function  prop (__count__) { return 1.2e3 } \n__noSuchMethod__ =  \"\" ;\n");
tryItOut("/*for..in*/for(const __iterator__ = ({__iterator__: <y><z/></y> }) in ({a2:z2})) {export __proto__;{} }");
tryItOut("/*for..in*/M:for(var prop\f = * in prop) var __parent__ = <x><y/></x>;");
tryItOut("L:if(( /* Comment */0/0)(new Date(033))) { }");
tryItOut("if( \"\" ) throw <><x><y/></x></>; else {yield (-0);export *; }");
tryItOut("{return <x/>;const __proto__ = *::*; }");
tryItOut("let(({ __proto__: __proto__ }), __noSuchMethod__) { for(let y in [5,6,7,8]) function  __parent__ () /x/ ");
tryItOut("throw false\n");
tryItOut("let (prototype, __parent__) { Math.pow }");
tryItOut("/*for..in*/for(var __iterator__ in this) break L;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = ((undefined .@x:: @foo) .@ __count__.prototype = -3/0\t.__defineGetter__(\"prototype\", /a/gi))\t in (arguments.constructor)) {{} }");
tryItOut("do M:\tif(__parent__) { if (<x><y/></x>) (1e81); else { }} while(((function ([y]) { }.propertyIsEnumerable(\"prop\"))) && 0);");
tryItOut("while((4. -= [,]) && 0){yield; }/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __iterator__) prop, __parent__;");
tryItOut("while(( /x/g ) && 0){3;; }");
tryItOut("let(prop, __proto__) ((function(){for(let y in [5,6,7,8]) with({}) __parent__;})());");
tryItOut("L:if(<x><y/></x>) yield <><x><y/></x></>; else  if ( \"\" ) {yield undefined;throw prop; } else {return;let prototype; } const __proto__;");
tryItOut("/*for..in*/for(let __iterator__ in *) const prototype = true;");
tryItOut("__proto__");
tryItOut("L:do yield; while((this /  \"\" ) && 0);");
tryItOut("gc()/*\n*/{yield; }");
tryItOut("");
tryItOut("L:if( /x/ .isPrototypeOf(window) &= null) { if ([(this.__defineSetter__(\"constructor\", function () { var __parent__; } ))].some(Math.pow)) {{} /x/g ; }} else {}");
tryItOut("/*for..in*/for(var __noSuchMethod__ in <y><z/></y>) {delete = <><x><y/></x></> }");
tryItOut("do /*for..in*/for(prop.__iterator__ in ((Function)((<x><y/></x>[ /x/ ]).__defineGetter__(\"constructor\", /a/gi))))yield __count__\n while((prototype = true--) && 0);");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <><x><y/></x></> > *.__lookupGetter__(\"__count__\")) if(new Exception(<x><y/></x>)) { if (\tconstructor = @foo()) } else {{}__count__; }");
tryItOut("if(this.isPrototypeOf([z1,,])) { if ((__count__ == <x/>)) window\nthrow this; else {throw  '' ;<x><y/></x>; }}");
tryItOut("/*infloop*/L:for(__iterator__ = ('fafafa'.replace(/a/g, null)); [(yield @foo) for each (__proto__ in <x><y/></x>)*]; eval(\"const __proto__;\", <y><z/></y>)) {{}yield; }");
tryItOut("var __proto__\n");
tryItOut("/*for..in*/for(let prototype in 4.) {export *;return 0.1; }");
tryItOut("switch(@foo .. #3={a:#3#}) { case 4: /*infloop*/for(const __iterator__; __count__; __parent__.(__iterator__ = <x><y/></x>)) {Math.pow }default: with(__count__)__count__ = function(id) { return id };; }");
tryItOut("const __iterator__, __proto__ = <x><y/></x>\nM:with({__iterator__: prototype}){(<><x><y/></x></>);let constructor = true; }yield <x/>;");
tryItOut("/*infloop*/while(__iterator__ = <x/>){(this); }");
tryItOut("export *; const __count__\n");
tryItOut("/*infloop*/for((eval(\" \\\"\\\" \", this.zzz.zzz)); [<x><y/></x>]/*\n*/; *) /*for..in*/for(var [[__proto__, __count__, prototype, ], __proto__] = <y><z/></y> in eval(\"(new Function(\\\"(<><x><y/></x></>);\\\"))\", 3/0)) if(<y><z/></y>.eval(<x><y/></x>)) {yield;{} } else  if (false(d)) if(prototype)  else {yield;export *; }");
tryItOut("if((new (function  constructor ()(( import )()))(__noSuchMethod__.((<y><z/></y>.valueOf(\"number\")))))) {/*infloop*/do (<y><z/></y>)\f; while(#3={a:#3#}); } else  if (++([1,2,3,4].map)() = constructor = <><x><y/></x></>) function (prop) { return (-1) } \n;\n else {{}continue ; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__iterator__, prototype] = <x/> in M:if((1e+81\n)) {const __iterator__; } else  if (null) {constructor, __count__ = <x><y/></x>;{break ; } }) {{}if(*) yield *::*; else  if (1e-81) return; else {; } }");
tryItOut("M:if(<><x><y/></x></> %= window) { if ((({ __noSuchMethod__: ({ __noSuchMethod__: __iterator__, __iterator__: __iterator__ }), __proto__: ({ prototype: constructor, __iterator__: __proto__ }) }) = -0)) yield; else {<x><y/></x>\nreturn;if(prototype.__noSuchMethod__) {export *;continue L; } else throw <><x><y/></x></>; }}");
tryItOut("yield; const __parent__;");
tryItOut("L: L: let __parent__;");
tryItOut("if((__noSuchMethod__ >= __iterator__ + (new RegExp(undefined, <x/>)).__lookupGetter__(\"prop\"))) {{return;export *; }/*for..in*/for(var prop = \t__noSuchMethod__ = undefined in window) __count__; } else  if (({ __parent__: ({ function::__noSuchMethod__: __noSuchMethod__, __parent__: ({ __noSuchMethod__: __parent__, prototype: constructor }) }), __proto__: <x/> }) = (({a1:1}) ===  \"\" )) {__count__, __parent__ = __noSuchMethod__;if(\r(*::*.@*)) { if (( \"\" .unwatch(\"prototype\"))) {return  /x/ ; } else {break ;const __parent__ = this, prop; }} }");
tryItOut("if((this)\n) export prop;");
tryItOut("if((+<x/>))  else  if (__proto__+=__parent__) {return;false; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in this) {;return; }");
tryItOut("do false; while((( /* Comment */*::*)) && 0);\n{}\n");
tryItOut("if(yield __noSuchMethod__ = <><x><y/></x></>.__defineGetter__(\"constructor\", (new Function(\"switch(0x99) { case @foo: /*for..in*/for([prop, __proto__] = <x><y/></x> in <y><z/></y>) (__parent__);break;  }\")))) {let function::__parent__, __iterator__ =  /x/ ;let prototype = __iterator__constructor ; } else  if ((new ((typeof eval(\"L: continue L;\", -1)))( /x/g  %= Object(), [(__iterator__3/0 for (__noSuchMethod__ in function ([y]) { })) for each (__iterator__ in (<><x><y/></x></>);)]).propertyIsEnumerable(\"__proto__\"))) {/*for..in*/([1,2,3,4].slice).applyfor(const prototype in ((function (prop) { @foo } )( /x/g ))){__parent__ = <><x><y/></x></>, function::__noSuchMethod__ = <x><y/></x>;(this); }/*for..in*/M:for(function::__count__ in  /x/g ) {yield <y><z/></y>;export __iterator__; } }");
tryItOut("L:if(__parent__ =  '' ) return ({a1:1}); else {var __count__; }\n/*infloop*/M:for(var [, ] = <><x><y/></x></> <<=  /x/g ; ; <x/> , *::*) {export prop;yield  /x/ ; }");
tryItOut("if((p={}, (p.z =  { yield <x><y/></x> } )()) - <y><z/></y>) {gc()\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor([z1] *= true/*\n*/) in {yield  /x/g ; }) L:if() {export *;var __count__; }");
tryItOut("switch( '' ) { default:  } const __parent__;");
tryItOut("{export __count__; }");
tryItOut("M:if(<><x><y/></x></> = <x><y/></x>) *");
tryItOut("M:if(true) {return;return; } else  if (<><x><y/></x></>) __parent__");
tryItOut("this.zzz.zzz;");
tryItOut("return ();");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in window.propertyIsEnumerable(\"prop\")) {/*infloop*/for(const [] = 'fafafa'.replace\f(/a/g, ({}).hasOwnProperty); (__count__ =  /x/ ); prototype.__proto__ %= (<x/>.__iterator__)) {throw <x><y/></x>;return (function ([y]) { })(); }/*infloop*/while(*::*.__proto__){0/0; } }");
tryItOut("/*infloop*/for(const constructor; null; constructor) {gc()export __iterator__; }");
tryItOut("{with(</*\n*/x><y/></x> ? <y><z/></y> : <y><z/></y>){/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in window) {prop = __iterator__, __count__ =  /x/ ;var __proto__, prototype; } } }");
tryItOut("for(let y in []);");
tryItOut("with((__iterator__ = __proto__))/*for..in*/M:for(var __noSuchMethod__ in (([,,z1].isPrototypeOf(<x><y/></x>))(([15,16,17,18].filter(undefined, true))))){gc()let constructor = <x/>; }");
tryItOut("/*infloop*/for(3/0; <x/>;  /x/g ) yield <x><y/></x>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in null) return (-1);");
tryItOut("L: \nyield (-0);\n");
tryItOut("try { Z; } catch(__count__) { yield function::prop; } finally { yield [,,z1]; } ");
tryItOut("/*infloop*/for([15,16,17,18].sort(eval, ([[1]].filter(/a/gi))); this.__defineSetter__(\"__noSuchMethod__\", gc); <x><y/></x>.unwatch(\"__count__\").throw(<x><y/></x>.(__noSuchMethod__))) {return;if((<y><z/></y>.watch(\"__iterator__\", *))) {return ({}); } else  if ((prop)) {return case 6: return undefined;break; export *;; } else (<><x><y/></x></>); }");
tryItOut("if(('fafafa'.replace(/a/g, [1,2,3,4].slice))) yield constructor;let __iterator__ = @foo; else  if (null.isPrototypeOf(*::*.__defineGetter__(\"prototype\", Math.sin))) {{}export *; } else {return; }");
tryItOut("/*infloop*/for(var ({ prototype: prototype }) = __iterator__ = {}; ((new Object(<x><y/></x>))).call(prototype.__proto__, ); eval(\"/*infloop*/for(const __iterator__; 1e+81; (function ([y]) { })()) {<><x><y/></x></>; }\", window)) __noSuchMethod__\n;\n");
tryItOut("if({} >>>=<x><y/></x> >> *) ; else return *::*;");
tryItOut("L: for(let y in [5,6,7,8]) let(prototype) ((function(){yield (prototype.__parent__);})());");
tryItOut("/*for..in*/M:for(*-- in [constructor]) {continue L;/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in *) gc() }");
tryItOut("if(Date(window.@*,  /x/g )) { if ([1,,] + null) <x/>;} else {null;export prototype; }");
tryItOut("M:if(*) { if (-3/0) {var __parent__ = <x/>;continue L; }} else {__count__ =  '' ; }");
tryItOut("/*infloop*/do {/*for..in*/for(const (constructor) in function(id) { return id }) {{}return; } } while([<y><z/></y>] for ((__iterator__)(<y><z/></y>) in 'haha'.split( '' , *)));");
tryItOut("if(<><bbb xmlns=\"Error(@foo, []).__lookupSetter__(\"prop\")\"> </bbb></>) return; else \f if (<><x><y/></x></>.watch(\"constructor\", new Function)) {if(/a/gi) {gc() } else  if (window) {} else {<x/>; } }\nif(<x><y/></x> ? *::* : ({})) { if (<x><y/></x>.(<><x><y/></x></>)) (1 for (x in [])) else {continue M; }}");
tryItOut("with(({__parent__: ( /* Comment */(<y><z/></y>).call(true,  /x/ )) })){ (uneval(constructor)) if(@foo) { if ([1]) var __iterator__;} else __noSuchMethod__ = <y><z/></y>, constructor = <x/>;yield <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x/>) {break /*\n*/L;return null; }");
tryItOut("while((<><x><y/></x></>) && 0)yield;");
tryItOut("/*for..in*/L:for(constructor in (([1,2,3,4].slice)(this)))throw <x><y/></x>\n");
tryItOut("throw (__parent__);");
tryItOut("for(let y in [5,6,7,8]) let(__parent__ = (function  __noSuchMethod__ (prototype) { yield <x><y/></x> } )( /x/g ), each) { let(__iterator__) { const prototype = *::*;");
tryItOut("M:while((((__count__ = <><x><y/></x></>).eval((({}).__lookupGetter__).call(window([z1,,], true), undefined, null)))) && 0)/*infloop*/for(var __proto__; this; <y><z/></y>) ");
tryItOut("/*infloop*/L:for(let __iterator__; ({__parent__ setter: function  prop () { (<y><z/></y>); }  }).valueOf\f(\"number\"); [window if ({})]) /*infloop*/L:for(__proto__; ((<x/>.watch(\"prototype\", 'haha'.split))); [,,z1]) export *;");
tryItOut("yield  \"\" ;");
tryItOut("/*infloop*/M:while(typeof constructor.__noSuchMethod__ = (true.@foo)){var __iterator__ = [], __noSuchMethod__;L: {return  /x/g ;break L; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in 1e81) ");
tryItOut("/*for..in*/for(var __iterator__ in ((function  __proto__ ([], [, , ({ prop: null['__parent__'] }), ]) { export *; const __noSuchMethod__; } )(prop =  for (prototype in false)))){with({__proto__: ([__count__.function::__count__ getter= [1,2,3,4].slice for (3/0 in <y><z/></y>)])}){throw true;let (__proto__ = null, __iterator__) { (({a2:z2})); } } }");
tryItOut("/*infloop*/for(__parent__ = this; [null for each (constructor in window)]; \t<x><y/></x>.isPrototypeOf(<x/>)) {{} }");
tryItOut("if(null) {const prototype = <x><y/></x>; } else  if (0) {{} } else ");
tryItOut("L:do {export *;{} } while((<><x><y/></x></> if (@foo)) && 0);");
tryItOut("if((p={}, (p.z = ((@foo.hasOwnProperty(\"prop\"))))())) if((arguments.eval( /x/ ) % ++(uneval(true)))) __parent__, __proto__ = constructor; else return <><x><y/></x></>; else constructor const __noSuchMethod__;");
tryItOut("{throw StopIteration; }");
tryItOut("let (prop = [<y><z/></y>].some((1 for (x in []))), __count__ = (__parent__ = @foo)) { yield <x><y/></x>; }");
tryItOut("(\r<x><y/></x>)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __parent__) const __noSuchMethod__ = {}\n");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((gc)(#1=[#1#])))(1e-81);");
tryItOut("gc()");
tryItOut("while(((new ('haha'.split)(([<><x><y/></x></> for (constructor in *)].@*), ('fafafa'.replace(/a/g, <x><y/></x>)).throw((__count__ = this))))) && 0){ }");
tryItOut("L: yield  /x/g ;");
tryItOut("if((({ set __proto__ prop () { yield new <x><y/></x>( /x/ , window) } ,  get prop constructor ()this.__defineSetter__(\"__count__\", Function) }))) {var __noSuchMethod__, __parent__ = <x/>; const __proto__; } else  if ([15,16,17,18].sort(*, <y><z/></y>)) {yield 3/0 .@ <x/>; }");
tryItOut("/*infloop*/for(__noSuchMethod__; false; 1e-81) {if(null.__iterator__) { if (((function (__count__) { (*::*).call } )(<x/>))) prop =  \"\" ;} else {__parent__ } } const __count__;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(let [__count__, __parent__] = ([15,16,17,18].some((1 for (x in [])), (-1.yoyo(<y><z/></y>)))) in <><x><y/></x></>) {yield;const prop; }");
tryItOut("/*infloop*/for(let __count__; ({ __parent__: __iterator__, prop: ({ constructor: ({ prop: [prototype, , prototype], __proto__: __count__ }), __iterator__: __iterator__ }\r) }) = ({ __noSuchMethod__: ({ prop: __parent__ })\f }); (<x><y/></x>)//h\n.call(<><x><y/></x></>, )) {prop;/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in this) [1,2,3,4].map }");
tryItOut("function (__iterator__, __count__) { yield true } \n/*infloop*/for(const constructor = [\n<><x><y/></x></>].map(Function); [,,z1]; (uneval((function ([y]) { })()))) {(0/0); }");
tryItOut("/*infloop*/while((this &= <x/>))yield;");
tryItOut("/*for..in*/L:for(let __proto__ in <><x><y/></x></> @ *::*) switch(constructor.(window)) { case 7: 3/0;break; yield  '' ; }");
tryItOut("if(this.__defineSetter__(\"__parent__\", __iterator__function (function::prototype, __count__) { return  /x/g  } ) &= window) {( /x/g );yield; } else  if ((__parent__ = constructor)) {; } else {yield <><x><y/></x></>;continue L; }");
tryItOut("return this;");
tryItOut("L: {yield *;return; }");
tryItOut("/*infloop*/L:for([prop, ({ __parent__: [], prototype: __proto__ }), __count__, __proto__, ({ constructor: [__parent__, ], __parent__: [, __iterator__, ] })] = <bbb xmlns=\"Exception()\"></bbb>; Iterator((new (<><x><y/></x></>)(false))); (this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; })).eval((yield (continue )))) var __noSuchMethod__ = prototype;");
tryItOut("/*infloop*/M:for(__count__; 'fafafa'.replace(/a/g, function  __parent__ /*\n*/(__proto__, delete)__proto__).__parent__ =  /* Comment */(eval(\" \\\"\\\" \", true)); (({a1:1}) , ({}))) {with(<><x><y/></x></>){}return this; }");
tryItOut("if(new Exception()) { if (prop .@x:: <x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")) prototype = __noSuchMethod__, set = -0;} else {__noSuchMethod__, __count__ = <x/>; }");
tryItOut("/*for..in*/for(const [__iterator__, each] = let (prop = ([<y><z/></y> for each (prototype in <><x><y/></x></\t>)])) ( '' )[ /x/g ] in \n<x><y/></x>) /*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <><x><y/></x></>) {;set = __proto__, __proto__; }");
tryItOut("for(let y in [])");
tryItOut("let (__iterator__ = <><x><y/></x></>, __noSuchMethod__ = <x><y/></x>) { gc() }");
tryItOut("return\n");
tryItOut("M:switch(__noSuchMethod__ = __proto__) { case 8: break; ;break; default: case 1: yield;case prop.(this): do {return <><x><y/></x></>;continue M; } while((yyy) && 0);continue M;\n(undefined);\nreturn constructor;export constructor; }");
tryItOut("let (prop = prop = 1e4) { export __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var function::__count__ in __noSuchMethod__.__count__) ((yield null)).watch");
tryItOut("/*infloop*/for(const __iterator__ = @foo >>>=<x><y/></x>; __noSuchMethod__ =  /x/g ; <><x><y/></x></>.*) {let constructor = ({a1:1});; }");
tryItOut("if(<><x><y/></x></>) {yield {};continue ; } else let __noSuchMethod__ =  \"\" , prototype = @foo;");
tryItOut("/*for..in*/for(let //h\n__parent__.__count__ in true) yield <><x><y/></x></>;\nvar constructor, prototype;\n");
tryItOut("if((yield (p={}, (p.z = <y><z/></y>)()))) {{}{} } else  if (<y><z/></y> ?  \"\"  : @foo.__parent__ = +*::*.hasOwnProperty(\"__iterator__\")) M:if(((<x><y/></x>))) { if (prop .@ <><x><y/></x></>) {export __proto__; } else {continue M;__proto__, constructor }}");
tryItOut("if((Math.pow).apply()) { if (<><{__iterator__}><ccc:ddd><x><y/></x></ccc:ddd></{__iterator__}></>) {constructor } else {{}export *; }}");
tryItOut("let([, , , ], __noSuchMethod__ = (constructor.__noSuchMethod__)) { __proto__ = constructor;");
tryItOut("while((#1=__count__ = constructor) && 0){/*infloop*/for(const __proto__ = __parent__;  /x/ ; <y><z/></y>) gc() /x/g ; }");
tryItOut("M:do /*for..in*/for(let constructor =  \"\"  in [[1]]) window; while((1.2e3) && 0);");
tryItOut("/*for..in*/L:for(__count__ = (__count__[<x><y/></x>]) in this) <x><y/></x>;");
tryItOut("let (__count__, constructor = (this)) { /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in window) yield; }");
tryItOut("/*for..in*/for(var constructor.__iterator__ in ((Function)(#0=( '' )(<y><z/></y>) = __iterator__.__noSuchMethod__))){break ;yield new <employee id=\"1\"><name>Joe</name><age>20</age></employee>; }");
tryItOut("gc()");
tryItOut("with((true.((yield <x><y/></x>))))for(let y in [5,6,7,8]) return <><x><y/></x></>;");
tryItOut("/*infloop*/for(each; [15,16,17,18].sort([1,2,3,4].map, @foo); __noSuchMethod__ = <><x><y/></x></>) let constructor;");
