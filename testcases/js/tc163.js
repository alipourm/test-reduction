tryItOut("M:if(- '' [({a2:z2})]) if(null) {;break ; } else  if (<x><y/></x>) {return;; } else {yield(null); }");
tryItOut("if(({ __proto__: ({ __iterator__: prototype }) }) = 3/0) try { {} } catch(__parent__) { break M; }  else  if (<><> </></>) {return ({a2:z2});export prototype; } else {(window); }");
tryItOut("/*for..in*/for(const __iterator__ = -3/0 << <x><y/></x> , (this.zzz.zzz) in #1=[#1#]) {gc() }");
tryItOut("/*infloop*/while(new Object()){return __count__; }");
tryItOut("do ; while(((__parent__.constructor = __count__ < (-1)(constructor))) && 0);");
tryItOut("let (prototype = new Object(<y><z/></y>)) { __proto__ = <y><z/></y>, __noSuchMethod__; }");
tryItOut("<y><z/></y>;");
tryItOut("if((new Function(__proto__ = [,,z1]))) {switch(__proto__.__iterator__ getter= (*).__defineSetter__) { case *::* > this: var prototype = this;break;  } } else  if (<>4.</>.(<ccc:ddd><!--yy--></ccc:ddd>.((({}) << window)))) {yield ({});(<><x><y/></x></>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype((new Number(this, this))) in prop) switch([[]]) { default: (<><x><y/></x></>);break;  }");
tryItOut("if(<> </>.([3/0].map([1,2,3,4].slice))) { if (this.__defineSetter__(\"__iterator__\", Function)) {\tif(()) prototype = @foo; else  if (null) {yield; }if(( /* Comment */window)) {let constructor = 1.2e3;function(y) { yield y; {}; yield y; } } } else {\t((__iterator__.(true))); }}");
tryItOut("/*infloop*/for(let prototype; __noSuchMethod__ = void <><x><y/></x></> ^=  \"\" ; <><x><y/></x></> ? null : __proto__) /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in function(id) { return id }) {}");
tryItOut("return;\n({}).__lookupGetter__\n");
tryItOut("do {{} }\r while(((delete <><x><y/></x></>)) && 0);");
tryItOut("while((__noSuchMethod__.__iterator__ = __iterator__.prototype setter= Math.pow) && 0)__parent__;");
tryItOut("let (__count__, __iterator__) { /*for..in*/for(const [prototype, function::__proto__] = (<><bbb xmlns=\"( \"\"  *= 5.0000000000000000000000)\"></bbb></> .@*:: 1e-81.__defineSetter__(\"prop\", (function (prop)return;).apply)) in this.zzz.zzz) throw  '' ; }");
tryItOut("return ((033)(033)) :: ({prop:  /x/g });");
tryItOut("return;");
tryItOut("switch((this.__defineGetter__(\"__proto__\", \t.2))) { default: break; {break L; }break; case 5: break; case  \"\" --:  }");
tryItOut("let(__count__) ((function(){let(prop = ( /* Comment */prop,  /x/ .__defineSetter__(\"prop\", eval))) ((function(){let(__noSuchMethod__) ((function(){for(let y in [5,6,7,8]) yield (__iterator__ = []);})());})());})());");
tryItOut("while(((new Function((-0))) >>>=(Object([z1])) instanceof <y><z/></y>) && 0)let (prototype = (<y><z/></y>), prop = *::*) {  }");
tryItOut("/*infloop*/M:for(const __iterator__; (__noSuchMethod__.constructor = <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")); (p={}, (p.z = (yield  /x/ ))())) if(((p={}, (p.z = .2 >>>=__iterator__)()))) {yield <x><y/></x>; } else  if ((p={}, (p.z = 'fafafa'.replace(/a/g, window))())) {var __iterator__; }false ");
tryItOut("if([,]) { if (this.zzz.zzz /= <><x><y/></x></>--) { } else {throw window;gc() }}\n");
tryItOut("with({}) { let(__count__ = <x><y/></x>) { export __proto__/*; } ");
tryItOut("/*infloop*/for( '' .watch(\"__parent__\", function(q) { return q; }); __parent__ =  /x/g ; constructor.__proto__ getter= (((<x><y/></x>).__defineSetter__).call).call) {}");
tryItOut("M:while((yield (new (<><x><y/></x></>).__defineSetter__(function ([y]) { }, [,,]))) && 0){/*infloop*/for(const __proto__; (0/0 |= *); ((-1) .. *)) {yield  \"\" ; }\n }");
tryItOut("if(null) gc() else  if (*::*) {(<x/>);const __proto__ = <x/>, prop = <x/>; }");
tryItOut("Math.pow");
tryItOut("L:switch(window) { default: break;  }");
tryItOut("L: {throw <><x><y/></x></>;constructor = 3.141592653589793;let yield = <x><y/></x>, __count__; }");
tryItOut("/*infloop*/for(var __proto__.__parent__ = (<x><y/></x>)(#1=[#1#]), __parent__; new (*)(0x99).valueOf(\"number\"); (!true)) ");
tryItOut("for(let y in []);");
tryItOut("if(<><x><y/></x></>.*) ; else { } const prop;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:while([,,])export *;");
tryItOut("let (({ constructor: __count__, __parent__: prop }), constructor) { /*infloop*/M:while(*){yield [1];export *; } }");
tryItOut("yield eval(\" /x/g \", *::*);");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __count__] = (typeof <x><y/></x>) in ['fafafa'.replace(/a/g, (1 for (x in [])))]) /*infloop*/while(( /* Comment */(new function::__noSuchMethod__(( \"\" .__lookupSetter__(\"__noSuchMethod__\")), null))))L: {gc() }");
tryItOut("var prop, prop;");
tryItOut("let(constructor) ((function(){[z1,,];})());");
tryItOut("if(*) {yield 0/0;{continue M;yield; } }");
tryItOut("gc()");
tryItOut("yield;");
tryItOut("L: gc()");
tryItOut("export __count__\nreturn;");
tryItOut("if((-0)) { if (#3={a:#3#}) yield __count__; else const __parent__ = true;}");
tryItOut("/*infloop*/while(new Array(null).constructor.@foo){yield true; const prototype;export *; }");
tryItOut("/*infloop*/for(var __iterator__ = window; this; (prop.__proto__ getter= function(q) { return q; })) {//h\ngc()export *; }");
tryItOut("do <x/>; while((__parent__) && 0);");
tryItOut("/*infloop*/for(let __noSuchMethod__; ({prop: this ^ this}); *::* for each (__noSuchMethod__ in <x/>)) {}");
tryItOut("if(true) { if ((yield constructor)) yield <><x><y/></x></>; else __parent__}");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { if (this.zzz.zzz) ((new Function(\"throw @foo;\"))).applyyield; else {/*for..in*/for(var __iterator__ in ((eval)(__parent__))){{}( '' ); } }}");
tryItOut("M:do {__iterator__ = __iterator__; } while((prototype = prop) && 0);");
tryItOut("L: {/*infloop*/M:for(var ({ function::__parent__: __iterator__ }) = new ((1 for (x in [])))(); __parent__ = __count__; ([,,].eval(<x><y/></x>))) let __noSuchMethod__, __proto__L: {const constructor, prop = ({a2:z2}); } }");
tryItOut("L:if(<><x><y/></x></>.__defineGetter__(\"prototype\", [,,z1])) { if (*) {({a2:z2});function(y) { yield y; export *;; yield y; } }} else with(true)gc()yield [];");
tryItOut("/*for..in*/for(const [function::prototype, __count__] = arguments.propertyIsEnumerable(\"__iterator__\") in eval(\"let prop = *::*, __noSuchMethod__ = 3;\", <x/>))  /x/ ;");
tryItOut("__parent__((eval(\"throw [1,,]\\n\", function ([y]) { }))) = __proto__;");
tryItOut("if(__proto__.__count__ = ) { if (<x/> ? window : <x><y/></x>) {(1 for (x in []))M:if( /x/g ) {const set = null, __count__ = [z1];gc() } else {; } }} else prop");
tryItOut("L: {let (__proto__ = ({ \t__iterator__: prop }) = __noSuchMethod__ = __noSuchMethod__) { /*infloop*/L:for(const __count__; this; <x><y/></x>) yield; } }");
tryItOut("const prop = <><x><y/></x></>, __proto__;");
tryItOut("M:with(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>){export __noSuchMethod__; }");
tryItOut("for(let y in [5,6,7,8]) continue M");
tryItOut("switch(<x><y/></x>) { default: export *;break;  }");
tryItOut("yield;");
tryItOut("L:do {gc() const prop;prototype, __proto__ = <><x><y/></x></>; } while(((yield undefined)) && 0);");
tryItOut("return;");
tryItOut("try { let __proto__ = 3; } catch(constructor) { return <y><z/></y>; } ");
tryItOut("continue L;");
tryItOut("with(__proto__ = constructor.__parent__ getter= function (prop)<><x><y/></x></>.__lookupGetter__(\"__parent__\"))switch(this) { default: \tlet __proto__;break; break; case 8: continue ;case 5:  }");
tryItOut("do {yield 0/0; } while((<bbb xmlns:ccc=\"(p={}, (p.z = ({ __noSuchMethod__: __iterator__ }))())\"><ccc:eee></ccc:eee></bbb><ccc:ddd></ccc:ddd>.((<zzz><x><y/></x></zzz>.([window])))\n) && 0);");
tryItOut("L:if(__parent__)  else  if (prop = <><x><y/></x></>, constructor) yield __noSuchMethod__;");
tryItOut("M:switch(this.constructor) { case -1.__lookupGetter__(\"__proto__\"): prototypebreak;  }");
tryItOut("/*infloop*/for(let __parent__; (1.3.__defineGetter__(\"constructor\", new Function)); (Function)(4., <x><y/></x>.(window))) {return; }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("switch(( /* Comment */@foo.@foo++)) { case <>window</>.yoyo(__iterator__ >>= window)\t:  }");
tryItOut("yield (__count__);");
tryItOut("yield ({a1:1})();");
tryItOut("L: {const __noSuchMethod__; }");
tryItOut("/*infloop*/for(let prop; __count__.prototype setter= (eval).call; function(id) { return id }) default: break; case (({({ __proto__: ({ __noSuchMethod__: __proto__ }) }) setter: Function })): @foo;break; case (({__parent__ getter: function  __iterator__ (constructor) })): ");
tryItOut("if(<x><y/></x>) return; else  if (([15,16,17,18].sort( '' , window))) {continue L; }");
tryItOut("__iterator__.__count__ = __count__;");
tryItOut("{__parent__if(@foo) { if ([]) {}} else return; }");
tryItOut("M:with(<x><y/></x>){(window); }");
tryItOut("return this.__defineGetter__(\"__iterator__\", function(q) { return q; });");
tryItOut("/*for..in*/L:for(var constructor in (((new Function(\"L:switch(<x><y/></x>) { case <><x><y/></x></>: break;  }\")))(Array())))__count__");
tryItOut("M:if(__count__) { if ((<x><y/></x> .@*::  '' )) \r{yield  set prototype __count__ () { yield window } ;; }} else yield this;");
tryItOut("{M:do {{} } while((__iterator__) && 0); }");
tryItOut("switch(((this.__defineSetter__(\"__noSuchMethod__\", new Function)).prop)) { case prototype = <y><z/></y>: break; /*for..in*/for(const [__parent__, __count__] = __count__ in *) export __iterator__; } const prop;");
tryItOut("if((__parent__ = null)) { if (var prop = <x><y/></x> ^=  /x/  <= 0x99 + window) export __iterator__; else {/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in 1e+81) (<><x><y/></x></>).watchreturn window; }}");
tryItOut("if(*::*) { if ([[]].*) yield; else {if() {prototype } else let __proto__, prototype;yield; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let null.watch(\"prototype\", [1,2,3,4].map)['\t__count__'] in constructor = function ([y]) { }\f) {/*infloop*/for(const __parent__ = <><x><y/></x></> /  /x/ ; \f#0=[Function(<x><y/></x>, <x><y/></x>)]; x::__iterator__.throw(true)) ; }");
tryItOut("if(<x><y/></x>) continue ; else  if (this) const __iterator__ = *::*, prop;");
tryItOut("{yield;L: { } }");
tryItOut("/*for..in*/for(var (__proto__) in (('haha'.split)((let (__noSuchMethod__) this | \n(function ([y]) { })().__lookupSetter__(\"prototype\"))))){gc }");
tryItOut("/*infloop*/for(__noSuchMethod__; ([[1]].__lookupSetter__(\"constructor\")) <<= (eval(\"prop\", 0)); <x><y/></x>.(3)++) L: continue ;");
tryItOut("yield;");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, __iterator__] = this.__defineGetter__(\"__parent__\", eval) in null) {throw <><x><y/></x></>; }");
tryItOut("{'haha'.split; }");
tryItOut("/*infloop*/L:for([this.zzz.zzz for (prop in (yield 1e-81)) for (prototype in window) for (__parent__ in <><x><y/></x></>) for each (__count__ in  \"\" )]; ({ set __proto__ __count__ () {  } , prototype: constructor }); ([11,12,13,14].map)) if(({ get __noSuchMethod__ __proto__ (prop) { yield <><x><y/></x></> } , prototype: undefined }))  else function(y) { yield y; [,]; yield y; }");
tryItOut("if(this << <y><z/></y>) {yield;gc() } else {yield <x><y/></x>; }");
tryItOut("with({__noSuchMethod__: <>(<x><y/></x>--)</>}){gc()/*for..in*/M:for(let [constructor, prop] = <x/> in *::*) {yield; } }");
tryItOut("/*for..in*/for(const [__iterator__, __parent__] = (<><x><y/></x></>.prototype) in (<x/>.throw(<x><y/></x>))) {export __noSuchMethod__; }");
tryItOut("M:with({delete: *}){if((3/0.__defineGetter__(\"__parent__\", <y><z/></y>)))  { continue L; }  else break ; }");
tryItOut("/*for..in*/M:for(let (__parent__)(<y><z/></y>) in __parent__) throw  /x/g ;");
tryItOut("default: let prop = .2;break; gc()break; if(prototype = <><x><y/></x></>.valueOf(\"number\")) {let (prop = ({}), __count__) { return; }if(undefined) yield; else  if (false) {; } } else {return;throw *::*; }");
tryItOut("with({__count__: (\r__noSuchMethod__.__lookupGetter__(\"constructor\")) ? (constructor.unwatch(\"__proto__\")) : __noSuchMethod__ @ [,,] <<= <><x><y/></x></>})yield;");
tryItOut("with({}) return __noSuchMethod__.unwatch(\"prop\");");
tryItOut("let (__noSuchMethod__, prop) { [1,2,3,4].slice }");
tryItOut("/*for..in*/M:for(let __iterator__ in (([1,2,3,4].slice)(__noSuchMethod__, __iterator__))){gc()let __iterator__; const prototype.__parent__; }");
tryItOut("/*infloop*/do while(( /x/ ) && 0)return; while((function ([y]) { }()));");
tryItOut("let __noSuchMethod__;");
tryItOut("/*for..in*/L:for(let [__count__, __proto__] = (function (({ __count__: constructor, __noSuchMethod__: __noSuchMethod__ })) { \fyield new Object() } ).call(/*\n*/([]().valueOf(\"number\")), ((0/0)( \"\" , 5.0000000000000000000000))) in --(eval(\"var __iterator__;\", <x><y/></x>)).throw(<x/>)) throw <><x><y/></x></>; const __count__;");
tryItOut("new Function");
tryItOut("{export *;; }");
tryItOut("/*for..in*/for(const prop = (window(!(-1))) in yield * ?  /x/g  : [z1]) var __iterator__;");
tryItOut("/*infloop*/L:for(__iterator__.constructor = \f(Function)(*::*).__lookupGetter__(\"__noSuchMethod__\"); (.2 + ({ prototype: __count__, prototype: __iterator__ }) = <y><z/></y>.__defineSetter__(\"__iterator__\", function (__count__, __proto__) { let __count__, prototype; } )); ({constructor: arguments, __proto__: __noSuchMethod__ = this ? (yield 3) :  /* Comment */eval(\"yield;\", <x><y/></x>) })) {/*for..in*/for(let __noSuchMethod__ = (<x><y/></x>.(<y><z/></y>)).yoyo(~\f<x/>) in <x><y/></x>) {;<bbb xmlns=\"0.1\"><!--yy--></bbb> }(__parent__); }");
tryItOut("this; const __count__;");
tryItOut("/*for..in*/for(var prop = ({}).yoyo( '' ) in undefined) throw ;");
tryItOut("/*infloop*/for(const ({ prototype: ({ prototype: __noSuchMethod__, prop: __noSuchMethod__ }) }) = this.zzz.zzz; window.yoyo(<x/>); [[1]] >> <y><z/></y>.valueOf(\"number\")) {{}return  /x/g ; }");
tryItOut("return;return;");
tryItOut("/*for..in*/M:for(prototype = ((-0)--) in @foo) {const __parent__;const __iterator__, __noSuchMethod__; }");
tryItOut("if(this.__defineGetter__(\"prototype\", 'haha'.split) ^=  \"\"  >>= function(id) { return id }) { if (this.__defineSetter__(\"__noSuchMethod__\", <x><y/></x>)) {M:if(*.__lookupSetter__(\"prototype\")) return  /x/ ; else  if (({})) export prototype; else {continue ; } } else yield this.__defineGetter__(\"__iterator__\", function(y) { yield y; {}; yield y; });}");
tryItOut("return;");
tryItOut("/*for..in*/for(let __count__ =  /x/g  in window) {yield undefined; }");
tryItOut("return 0/0;");
tryItOut("/*infloop*/for((); null\n; (__proto__ = *)) ");
tryItOut("(4.)\nL:if(3.141592653589793) { if (*) {export __proto__; } else var __parent__ = get, __parent__;}");
tryItOut("L:switch(((function (__iterator__, __parent__) { return <x><y/></x>; } )( /x/g ,  /x/g ))--) { case 6: break; default: let prototype, constructor =  '' ; const __parent__;case (prototype =  \"\" ) <<=  /* Comment */4.:  set prototype __count__ (prop)(({__iterator__: <x/>}))break; case 6: return;case 4: var __iterator__, __noSuchMethod__;break; case 4: throw  '' ;break; break; break; case 1: break;  }");
tryItOut("return;");
tryItOut("return __proto__;");
tryItOut("yield;");
tryItOut("/*for..in*/for(var (prototype) in ((({}).__lookupGetter__)(eval(\"arguments\", <><x><y/></x></>)))){let __noSuchMethod__; }");
tryItOut("/*for..in*/M:\ffor(const __noSuchMethod__ in __parent__.__parent__ setter= [1,2,3,4].slice) {eval const __iterator__;#3={a:#3#} }");
tryItOut("if( \"\" .yoyo(<x/>) ? undefined : -3/0.throw(<y><z/></y>) < this/*\n*/.__defineSetter__(\"__noSuchMethod__\", ( /x/ ).__defineSetter__)) /*for..in*/M:for(var __count__ in (([1,2,3,4].map)(true <= constructor > @foo.__defineGetter__(\"__parent__\", eval)))) else  if ((<x><y/></x>)) constructor; else gc()");
tryItOut("return;");
tryItOut("/*infloop*/for(const prototype; (function () '' (*, <><x><y/></x></>) ^ this.propertyIsEnumerable(\"__iterator__\")); *::*/*\n*/.__noSuchMethod__ = <x/>) with(([15,16,17,18].map(({}).hasOwnProperty, prop))){var constructor;break ; }");
tryItOut("L:if(let prototype;) export prop; else  if (1e+81 ? 5.0000000000000000000000 : __proto__)  set __proto__ <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> (__parent__) { export __count__; } ");
tryItOut("if(this) return; else  if (this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice)) {throw <><x><y/></x></>; }");
tryItOut("while(((<ccc:ddd></ccc:ddd>).call(false, #1=[#1#])) && 0){return <x><y/></x>;const function::prototype = false, __noSuchMethod__; }\n");
tryItOut("if(__proto__ .. <y><z/></y>) {gc() } else  if ((p={}, (p.z = <x/>)())) {gc() }");
tryItOut("M:if(#2=(gc())) { if (__proto__, ({ __parent__: __iterator__, each: ({ prototype: ({ prop: __proto__ }) }) })) {export prototype;yield; }} else {yield;export *; }");
tryItOut("/*infloop*/for(constructor; new <x/>(); (new (__noSuchMethod__.([1,2,3,4].map))((__noSuchMethod__.__proto__ = ), new ((<x><y/></x> & [[]]))((([1,2,3,4].slice).call(true, <x><y/></x>)))))) {prop, __count__ = <><x><y/></x></>;L:with({prop: ( ''  * 033.throw((yield  '' )))})throw __parent__; }");
tryItOut("with(*::*){return; }");
tryItOut("/*for..in*/L:for(__count__ in ((({}).__lookupGetter__)(prop.__proto__ setter= -3/0))){export __iterator__;switch((Iterator(<><x><y/>\t</x></>, window))) { case <><x><y/></x></>: case 1: break M;break;  } }");
tryItOut("__proto__;");
tryItOut("/*infloop*/while(\n[true].filter(try { break ; } finally { break ; } ) >= <><x><y/></x><!--yy--></>(__proto__.(this)))/*infloop*/do switch([#3={a:#3#}].some(*::*)) { case 1: continue ;break;  } while(({ __count__: __proto__ }) = [15,16,17,18].map([,], [,,]));/*infloop*/do gc() while((([11,12,13,14].some)[0/0]));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in this.zzz.zzz) {return -0;switch(( '' [<><x><y/></x></>])) { default: case 2: break L{} }\f }");
tryItOut("/*infloop*/while(window){return null; }");
tryItOut("export *;");
tryItOut("try { <x/>; } catch(__parent__ if [,,z1]) {  } catch(prototype) { (this); } ");
tryItOut("if((const x::__noSuchMethod__ =  /x/g , __count__;.unwatch(\"constructor\"))) { if (@foo) yield\n<x><y/></x>\nL: try { ; } catch(__count__ if (function(){const prototype = #1=[#1#];})()) { let constructor, prototype; } finally { continue ; } } else {yield  /x/g ; }");
tryItOut("if(export *;) { if (__parent__) {{}let __count__ = *; }} else return;");
tryItOut("/*for..in*/for([__parent__, __iterator__] = *::*.__iterator__ in [[]]) {var __parent__, prototype; }");
tryItOut("if(((({__iterator__: window}))).call(constructor = ({__iterator__: *::* }), new Object(export *;, @foo) <= undefined, [11,12,13,14].filter) >> (prototype = (new Number( /x/g .unwatch(\"prop\")))) for (__iterator__ in *::* ::  \"\" )) { if ((prop = )) {/*for..in*/for(const __proto__.__parent__ in (((new #3={a:#3#}()))(window)))while((<><x><y/></x></>) && 0){(function ([y]) { });; } }} else {\n }");
tryItOut("prototype = __parent__;");
tryItOut("{/*for..in*/M:for(prop = new 1e81(this) in *.__defineSetter__(\"__count__\", function  __proto__ (__count__)0)) {/*for..in*/for(let __noSuchMethod__ in ((new Function)(((__iterator__: eval(\"undefined\",  /x/g )}))))){yield this; } } }");
tryItOut("/*for..in*/for(var __count__ = __proto__ = ({ __proto__: ({ constructor: __proto__ }) }) in (3\n)) {if((__iterator__.__defineSetter__(\"__proto__\", function (prop) { {} } ))) { if ((export \t*)) return [1]; else {throw prop; }} }");
tryItOut("/*infloop*/for(undefined; __parent__; 5.0000000000000000000000) ");
tryItOut("M:if( \"\" ) { } else {break ; }");
tryItOut("L:  else if ");
tryItOut("if( \"\" ) function::__count__, constructor; else {[z1]; }");
tryItOut("with(window.watch(\"(__iterator__)\", function (constructor)1.3./*__lookupSetter__(\"prop\"))){return; }");
tryItOut("{with({__parent__: window})__iterator__, prop; }");
tryItOut("{}");
tryItOut("/*infloop*/for(__noSuchMethod__; window; @foo) {return \f*::*;const __parent__ = 1e81; }");
tryItOut("L: gc()");
tryItOut("if(constructor) { if (*::*) {break L;continue ; }} else __parent__\nyield this;");
tryItOut("/*for..in*/for(var [prop, prototype] = prototype = -3/0 in (eval(\"<><x><y/></x></> ? <x><y/><\\f/x> : -0\", ((1 for (x in [])))(<><x><y/></x></>)))) /*infloop*/while(__parent__.__iterator__)throw false;");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = __noSuchMethod__ = <y><z/></y> in <x><y/></x>) {'haha'.split__iterator__ = true, prototype; }");
tryItOut("if((({prop: this.zzz.zzz }))) /*infloop*/for(let constructor = (this.__defineSetter__(\"__noSuchMethod__\", new Function)); <><x><y/></x></>.watch(\"__proto__\", (new Function(\"let constructor;\")));  \"\" .__iterator__) {let __noSuchMethod__, prototype;gc() } else eval");
tryItOut("if(null) export __proto__; else {\tbreak ;var __iterator__, __noSuchMethod__ = *::*; }");
tryItOut("L:switch(<><x><y/></x></> instanceof __parent__ = <><x><y/></x></>) { default: yield;case (this.__defineSetter__(\"constructor\", function ()({a1:1}))):  }");
tryItOut("do {{}const yield = <><x><y/></x></>; } while((((p={}, (p.z = __noSuchMethod__.prop)()))) && 0); const prop;");
tryItOut("/*infloop*/L:while('fafafa'.replace(/a/g, eval))let __proto__ = this, prop\t;");
tryItOut("export *");
tryItOut("/*infloop*/for((({__noSuchMethod__: \narguments, __count__: prop.prototype setter= (this).apply })); (constructor.(({}))).propertyIsEnumerable(\"constructor\"); (((<><x><y/></x></>.yoyo(undefined).__parent__).__lookupSetter__(\"__proto__\"))--)) /*infloop*/while(#1=[#1#]);");
tryItOut("if((-0)) {} else  if ((yield  /x/g )) {do {export *; } while(() && 0);L:with(window.yoyo(0.1))export *; }");
tryItOut("/*infloop*/L:for(const ({ prop: [, , , , ] }) = ([(__proto__) if (*)].__parent__ = __iterator__); new constructor.prop(); __noSuchMethod__) yield function::prototype;");
tryItOut("\n");
tryItOut("");
tryItOut("return;");
tryItOut("if((p={}, (p.z = __count__)())) { if (<x><y/></x>.unwatch(\"__parent__\")) ;} else {const __iterator__ = function ([y]) { }, prototype;; }");
tryItOut("if((yield export prototype;)) { if (prototype = constructor.__count__ = @foo != <><x><y/></x></>.__lookupSetter__(\"constructor\")) {/*for..in*/M:for(prototype in (([[1]])(@foo))){(<x><y/></x>); } } else \fwith(true){export *;break M; }}");
tryItOut("let(prototype, __noSuchMethod__ = <y><z/></y>) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(var [({ prototype: prototype })] = #1=[#1#] ? 4. : window; (constructor).__defineSetter__(); \t\n.\n__defineSetter__(\"__parent__\", Math.sin)) {({__proto__: }){; }__proto__, prototype }");
tryItOut("if((constructor = {})) {export __parent__;yield window; } else  if (__proto__.__proto__ = ({__count__: @foo, __iterator__: constructor })[\nwindow]) yield function::prop;");
tryItOut("{(prop); }");
tryItOut("/*infloop*/M:for(each; (new (6)(((yield undefined.__lookupSetter__(\"prototype\"))))); <x><y/></x> = ((function ([y]) { })())(<x><y/></x>, window)) return  { yield 'fafafa'.replace(/a/g, function  __iterator__ (__iterator__) { return * } ) } ;");
tryItOut("do {gc()\nconst constructor = -3/0, x::__proto__;\n } while(((__parent__.__count__)) && 0);");
tryItOut("do ; while((('fafafa'.replace(/a/g, eval).yoyo(prototype%= if (prototype)))) && 0)\n");
tryItOut("return .2");
tryItOut("/*infloop*/M:for(const prototype = (([,,])[true]); (function(y) { yield y; prop = <y><z/></y>;; yield y; })(<><x><y/></x></>, <><x><y/></x></>); (((yield <><x><y/></x></>)) ? (uneval()) : void !#1#)) yield;break ;");
tryItOut("(L:if( /* Comment */ /x/g  if (<><x><y/></x></>)) { if (eval(\"export *;\", let (__parent__) <x/>).__proto__)) {(@foo); }/* else ({ __count__: __noSuchMethod__, __proto__: __parent__ }) = let (prototype = false)  '' , ({ prop: prototype, \f__iterator__: __noSuchMethod__ })\n/*infloop*/do ; while(<x><y/></x>);}\n");
tryItOut("/*for..in*/L:for(let [__noSuchMethod__, __noSuchMethod__] = (uneval(<><bbb xmlns=\"<><x><y/></x></> - *.eval(*::*)\"><ccc:ddd> </ccc:ddd></bbb></>)) in *::*.prop) {0\n;const __count__ = undefined, prop; }");
tryItOut("const __noSuchMethod__, __noSuchMethod__;/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in *::*) __parent__");
tryItOut("/*for..in*/M:for(var prop = this.__defineGetter__(\"prototype\", __iterator__) in prop) {yield; }while((prototype) && 0)const __noSuchMethod__, constructor = <><x><y/></x></>;");
tryItOut("/*infloop*/do {/*infloop*/for(const with({}) { for(let y in []); }  = ({__proto__: <x><y/></x>}); ({ __noSuchMethod__: prop }) = [z1]; yield.__iterator__.propertyIsEnumerable(\"__count__\")) {gc()const __parent__, __iterator__; } } while(null);");
tryItOut("do {(false); } while((<x><y/></x>) && 0)\n");
tryItOut("/*infloop*/do function(q) { return q; } while((__proto__ = <x><y/></x>));");
tryItOut("return;");
tryItOut("with(yield = <><x><y/></x></>){{}; }");
