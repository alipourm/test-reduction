tryItOut("/*infloop*/\tM:for(__count__; (<y><z/></y>); ({ constructor: function::__parent__, setter: __noSuchMethod__ }) = __parent__) <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in (null == window)) yield [1,,];");
tryItOut("if(((function::__noSuchMethod__).*)) {if((function  __noSuchMethod__ (constructor, prototype) { ; } ).call(true, this)) {if(*::*) { if (<x><y/></x>) yield; else {window__iterator__; }} }const constructor = <x><y/></x>\n }");
tryItOut("L: yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in __count__) {/*for..in*/for(let [__count__, constructor] = <x><y/></x> in <><x><y/></x></>) {yield <><x><y/></x></>;yield __count__; }throw <x/>; }");
tryItOut("M:while((true) && 0){var __noSuchMethod__, constructor = <><x><y/></x></>;var prop = [1,,], __iterator__ = <x><y/></x>; }");
tryItOut("export __parent__");
tryItOut("if( /x/ ) { if (__noSuchMethod__) export prop; else {yield; }}");
tryItOut("switch(<><x><y/></x></>.hasOwnProperty(\"__count__\")) { case 1: __noSuchMethod__ = *::*; }");
tryItOut("with({__noSuchMethod__: ((0x99 /= ((uneval(window))))((function ([y]) { })(), yield  '' (*::*,  '' )))})let(prototype = (this .@*:: @foo) ^= (((-0))[__count__])) ((function(){let(__iterator__, prototype = <><x><y/></x></>) { return;})());");
tryItOut("switch((++yield <x/>)) { default: export *; }");
tryItOut("/*infloop*/for(const []; prototype|=<x><y/><///h\nx>.__lookupGetter__(\"constructor\"); this.__defineSetter__(\"prototype\", window.unwatch(\"__count__\") !== <x/>\n)) /*infloop*/M:for(const x::prop;  /x/g ; true) ;");
tryItOut("export ;\nif(<x><y/></x>.( '' )) {{} } else  if ( /x/g .valueOf(\"number\")) {__proto__ = __iterator__, x::__parent__;let (__count__ = -1) { return; } } else {export constructor;/*infloop*/L:while(<><x><y/></x></>)return 0; }");
tryItOut("if(prop) { if (<><> </></>) {yield [z1];let (constructor) { {} } }} else __iterator__");
tryItOut("/*for..in*/for([__proto__, constructor] = <> ''  <= <y><z/></y></> in __proto__ = <x/>) constructor;");
tryItOut("switch(<x/>.yoyo( \"\" )) { case (*.valueOf(\"number\")): default: break ;break; case 2:  }");
tryItOut("export *\nreturn <><x><y/></x></>;");
tryItOut("do {yield #1# = .2;yield ({a2:z2}); } while((new <><x><y/></x></>(0.1, null)) && 0);");
tryItOut("if(<ccc:ddd><x><y/></x></ccc:ddd>) { if (prototype =  '' ) {(<x/>); } else {; }}");
tryItOut("M:with(__iterator__.__iterator__)/*infloop*/for(<y><z/></y>; <x/>; @foo) yield;");
tryItOut("/*for..in*/L:for([] in ((function (prototype, __proto__)(__iterator__.__iterator__))(false)))/*infloop*/for(const __count__; ; #3={a:#3#}) export __count__;");
tryItOut("while((*) && 0){export *;gc() }");
tryItOut("if([__parent__ /= <x/>].some((p={}, (p.z = <y><z/></y>)()))) { if ((\n__proto__)) /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in __count__) {undefined;; }} else __proto__ = __noSuchMethod__;");
tryItOut("/*infloop*/for(this.isPrototypeOf(null);  /x/ ; (function () { return <><x><y/></x></> } ).call(<x><y/></x>, )) {yield;export *; }");
tryItOut("with({__parent__: <employee id=\"1\"><name>Joe</name><age>20</age></employee>}){((this.__defineSetter__(\"prop\", function ()window))); }");
tryItOut("/*infloop*/do {();; } while((this.__defineGetter__(\"prototype\", (function  __proto__ (prototype, __parent__) { gc() } ).apply) in __iterator__.unwatch(\"__iterator__\")));");
tryItOut("/*for..in*/for(__parent__ =  /* Comment */(new ()(null, <x><y/></x>)) in window & <><x><y/></x></>.__parent__ = (constructor = 0x99)) {/*for..in*/for(const [__count__, __proto__] = new (function ([y]) { })( /x/ , <x><y/></x>) in [[]]) L: {/a/gi }function (__noSuchMethod__, __proto__ = <y><z/></y>) { return #1=[#1#] } \nexport *;/*infloop*/for(__proto__;  /x/g ;  \"\" ) {function (prototype) { yield #1# } ; } }");
tryItOut("L:while((eval(\"<><x><y/></x></>.__iterator__ = <x/>\", new function  __count__ () { __proto__; } (__noSuchMethod__, constructor).throw(0.1.*))) && 0)/*infloop*/for(let __parent__ = this; window; function ([y]) { }) {var prototype = <x/>, __parent__ = <x><y/></x>; }");
tryItOut("with({}) { let(__parent__ = 0) ((function(){let prop;})()); } ");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do //h\n{ } while(((__parent__ = __iterator__ for each (__parent__ in <x><y/></x>) for (prop in undefined))));");
tryItOut("if(<x><y/></x>.watch(\"__count__\", function  setter (__proto__) { <><x><y/></x></>; } )) { if ([11,12,13,14].sort.valueOf(\"number\")) \n{constructor, __proto__ = false; }} else function(y) { yield y; throw [,,z1];; yield y; }");
tryItOut("/*for..in*/for( /x/ ['constructor'] in (((prototype =  \"\" ).__defineSetter__)(<x/>))){/*for..in*/for([prop, __noSuchMethod__] = * in  \"\" ) {{} } }");
tryItOut("if(constructor) /*for..in*//* nogeckoex bug 349964 */ for  each(constructor in <><x><y/></x></>) function (prototype, constructor) { yield  ''  } ");
tryItOut("/*for..in*/for(const __iterator__ = try { return <x><y/></x>; } catch(__noSuchMethod__ if (function(){gc()})()) { export *; } ['prop'] = <x><y/></x> || false in #1=prop = undefined) {(<><x><y/></x></>);yield\n }");
tryItOut("return;");
tryItOut("if((prop)) { if (prop.__noSuchMethod__.prototype) {throw new ((<x><y/></x>.unwatch(\"__parent__\")))(); } else {if(1.2e3) {const prop, __noSuchMethod__ = <x><y/></x>; } else break M; }}__iterator__ = windowwith({__proto__: <y><z/></y>[@foo].propertyIsEnumerable(\"__proto__\")})if(__proto__) { if (<y><z/></y>) {throw prop;(<y><z/></y>); }} else break L;");
tryItOut("/*for..in*/for(let constructor in .2.valueOf(\"number\")) ");
tryItOut("");
tryItOut("L: :");
tryItOut("{yield __proto__;([1,,]); }");
tryItOut("/*infloop*/for((__proto__ = \f<x><y/></x>); (gc).call(<><x><y/></x></>, );  /x/ ) gc()");
tryItOut("/*infloop*/for(({ __count__: __noSuchMethod__ }) = ([*::*].filter('haha'.split)); ( ''  & <x/>); new (*)({}, <x><y/></x>)) {({__parent__: *::*}); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in <x><y/></x>) {true; }");
tryItOut("/*infloop*/for(var __proto__; new ((<x><y/></x>).__defineSetter__)(constructor >>= *::*, true); <x><y/></x>.yoyo( /x/g ).unwatch(\"__iterator__\")) L: yield *;");
tryItOut("while((({prototype: <>false</> })) && 0);");
tryItOut("L:if(set.__proto__ = [undefined.__lookupGetter__(\"__count__\")].some(eval)) throw 0; const __proto__;");
tryItOut("; const prototype;");
tryItOut("while(( '' .@foo) && 0){gc()return *::*; }");
tryItOut("while((function ([y]) { }) && 0){let __proto__ = const constructor;; }");
tryItOut("return *;");
tryItOut("if(false && <x><y/></x>) {function::__proto__;gc() } else  if (yield constructor = null) {; }\n/*infloop*/for(const \f[, __count__, prototype = window, __parent__, ({ __parent__: ({ prototype: ({ __iterator__: __count__, prototype: constructor }) }) })] = [<x><y/></x> in <><x><y/></x></>]; __proto__%=(gc()); \n(constructor.__count__ = *::*)) var prop, prop;\n");
tryItOut("for(let y in [5,6,7,8]) let prop;");
tryItOut("with((/*\n*/<><x><y/></x></>)(<x><y\r/></x>))yield undefined;");
tryItOut("if(__proto__.__noSuchMethod__%=\n([true].filter(({}).__lookupGetter__))) {export __iterator__;(undefined); } else {L: {<x><y/></x> }throw [,,]; }");
tryItOut("{[1,2,3,4].mapyield; }");
tryItOut("with({}) return ();");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in *) return 1e-81\nif(<x><y/></x>) {yield; }");
tryItOut("do yield; while(((<x><y/></x>.(this))) && 0);");
tryItOut("<zzz><><xxx>{__count__}</xxx> </></zzz>");
tryItOut("if((each.(__proto__))) { if (this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) {yield;<><x><y/></x></>; } else {;var __count__, __count__ = <x><y/></x>; }}");
tryItOut("{return; }");
tryItOut("/*for..in*/for(var (__parent__) in <y><z/></y>) {<x/> }");
tryItOut("gc()");
tryItOut("let(__noSuchMethod__ = ({__parent__: ([<><x><y/></x></>])}), __noSuchMethod__ = 'fafafa'.replace(/a/g, function (__noSuchMethod__, prop) { var __noSuchMethod__ = 1e81; } )) { throw StopIteration;");
tryItOut("{<><x><y/></x></>;; }");
tryItOut("if(*::* :: new [z1,,]( '' , window)) { if (({ function::prototype: __count__ }) = (__iterator__)[undefined]) {const __proto__; }} else return <x><y/></x>;");
tryItOut("/*for..in*/for(const [__parent__, __count__] = this.__defineGetter__(\"__noSuchMethod__\", __count__ = (new <x><y/></x>(function(id) { return id }))) in ({__parent__ getter: (new Function(\"prototype;\")) })) {break L;let __count__ =  \"\" , prop; }");
tryItOut("{gc() }");
tryItOut("if((*::*.__parent__ >> prototype = ( /x/g .__lookupGetter__(\"__parent__\")))) {export prop; } else  if ((<zzz>(yield this)</zzz> %= (__count__.watch(\"prop\", (Math.sin).apply)).unwatch(\"prop\"))) {} else {{let __parent__;; }; }");
tryItOut("while((({a1:1})) && 0){\tyield <><x<y/></x></>; }");
tryItOut("if(<> </>) {return <x><y/></x>; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; ((function (__noSuchMethod__, __noSuchMethod__) '' ).apply)(__noSuchMethod__ = <><x><y/></x></>\t, false); *) {yield;L:with( /x/g ){window;continue L; } }");
tryItOut("{/*infloop*/for(false.eval(constructor); undefined.throw(*); ( /* Comment */<><x><y/></x></>)) {constructor }L: {export __noSuchMethod__;gc() } }");
tryItOut("while((-undefined) && 0)break ;");
tryItOut("/*for..in*/for(prototype in ((null)(prop))){let function::__iterator__, __proto__;\t }");
tryItOut("const __parent__, __proto__ = arguments");
tryItOut("throw __iterator__;");
tryItOut("L: {break ;return <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(let __count__.__noSuchMethod__ in ((new Function)(({prototype: <!--yy--> .@*:: constructor }).watch(\"__proto__\", [1,2,3,4].slice))))this.zzz.zzz;");
tryItOut("/*infloop*/while(//h\n3.141592653589793){return  /x/g ; }");
tryItOut("if(({__noSuchMethod__: ({})})) { if (new ()(__parent__ = *::*)) \nthis;\n} else {let __iterator__;export *; }");
tryItOut("let (prop)\t { /*for..in*/for([__iterator__, __count__] = undefined in 1e4) gc() }");
tryItOut("M:with({prototype: [,,z1]}){{L:switch(this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__)) { default: ; } } }");
tryItOut("with({__noSuchMethod__: (({a2:z2}).*)})const __count__ =  '' ");
tryItOut("/*for..in*/for(let __parent__.__count__ in (((1e4 .@*:: <x><y/></x>).__defineSetter__)(__noSuchMethod__.(<x/>)))){return #1#; }");
tryItOut("try { let __iterator__; } catch(__proto__) { return; } finally { {} } ");
tryItOut("while((__iterator__) && 0){;{} }");
tryItOut("switch(<ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd>) { default: break;  }");
tryItOut("throw StopIteration;");
tryItOut("{continue L\nyield; }");
tryItOut("M:do let __iterator__, __count__ = window; while((__count__ = ([<x/>].some(this))) && 0);");
tryItOut("/*for..in*/for(const __parent__ = __count__ in ({a2:z2})) export constructor;");
tryItOut("while((<><x><y/></x></>) && 0)gc()");
tryItOut("/*infloop*/M:do yield; while(([1,2,3,4].slice).call(*::*, <><x><y/></x></>));");
tryItOut("if(this.zzz.zzz) {yield; } else  if (((eval(\"gc()\", @foo).eval((true ? <><x><y/></x></> : <y><z/></y>)))())) {L:if(new *(!this)) gc() else  if (<><>(({}) for (__proto__ in window))<\n/></>) return; }");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <x/>[<x><y/></x>].prototype in __iterator__+=prototype|=<y><z/></y>) <x/>;");
tryItOut("return \n<x><y/></x>;");
tryItOut("M:if((new * = @foo()) > ((<><x><y/></x></>.( /x/ .valueOf(\"number\")))[new Function(~<x/>)] <= this.__defineSetter__(\"__noSuchMethod__\", (new Function(\"export __count__;\"))))) {/*infloop*/for(var prototype; (new [[,,]]()); <x><y/></x>.@*) let (__noSuchMethod__ = *::*, prop = *::*) { throw <x/>; } }");
tryItOut("/*infloop*/do {return; } while(this.zzz.zzz);");
tryItOut("/*for..in*/for(var [prop, prop] = 0 in __parent__) ");
tryItOut("M:with((#2= /x/ .watch(\"constructor\", function (__parent__, prop) { (<><x><y/></x></>); } ).propertyIsEnumerable(\"__parent__\"))){var __iterator__ = <><x><y/></x></>;yield <y><z/></y>; }");
tryItOut("/*infloop*/for(let eval(\"gc()\", 1e4)['constructor']; __noSuchMethod__(*) = __parent__ = function::__noSuchMethod__ = [,,].propertyIsEnumerable(\"prototype\"); ([prop](__count__ | <x><y/></x>))) L: {__count__ = @foo;throw <x><y/></x>; }");
tryItOut("/*infloop*/L:for(#2=(5.0000000000000000000000 >>> *::*); <><><ccc:ddd>yyy</ccc:ddd></></> != this .@ \f__parent__; (({ prototype: [constructor, constructor, __noSuchMethod__], __iterator__: [, , ] })).call(this.zzz.zzz, typeof new (let)(), *.eval( /x/ ))) {throw Error(constructor, 3.141592653589793);(i).__defineSetter__ }");
tryItOut("{export *; }");
tryItOut("L: const __count__, prop;");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in each) gc()");
tryItOut("/*infloop*/for(__iterator__ = new (function(y) { yield y; {}; yield y; }).__lookupGetter__(\"prototype\")((yield (* <<=  '' .*)), undefinedeach (__noSuchMethod__ in <x/>)); true; <y><z/></y>.__defineSetter__(\"__parent__\", ({}).hasOwnProperty)) /*for..in*/for(let __noSuchMethod__ in undefined) return <y><z/></y>;");
tryItOut("/*for..in*/for(arguments\n in (((function ((<><x><y/></x></>);, window) { yield <><x><y/></x></> } ).apply)((({ set constructor(__iterator__, __count__) { yield window }  }))))){return ({}); \"\" ;\t }");
tryItOut("/*infloop*/L:do {with(<><x><y/></x></>){return <><x><y/></x></>; }const __iterator__ = false, __count__ = null\n } while((window.* || -3/0));");
tryItOut("return ([11,12,13,14].sort);");
tryItOut("with({__proto__: [11,12,13,14].sort})if((((-0))())) {[1,2,3,4].map }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in __parent__) /*infloop*/while(undefined){return 1e+81; }");
tryItOut("/*infloop*/M:for(var ({ __proto__: ({ __proto__: prototype, __count__: [({ __iterator__: [], __noSuchMethod__: __parent__ }), \ftry { throw StopIteration; } finally { for(let y in [5,6,7,8]) let(constructor = [], __count__ = <x><y/></x>) { gc() } ] }), __proto__: [, ({ __parent__: __noSuchMethod__ })] }) = <>yyy</>; ( /* Comment */()); ( /x/ .yoyo(<>{return 1e+81\n__parent__;/*for..in*/for(__count__ in <><x><y/></x></\t>) ; }</>))) /*infloop*/while([<x><y/></x>.( '' ) for \teach (__proto__ in <><x><y/></x></>) for (__proto__ in (-0))].__noSuchMethod__ = ((<y><z/></y>).__defineSetter__)())const prototype = <><x><y/></x></>, __parent__;");
tryItOut("gc()\n");
tryItOut("L:do {(true);M:if(new (*::* >= 1e+81)( \"\"  >>=  \"\" )) { if (1e81) [[1]]; else case 4: throw <x><y/></x>;default: export prop;var prototype = <><x><y/></x></>;break; case 6: constructor = <x><y/></x>;break; case this: case *: throw <x><y/></x>;case 5: break; break; } } while((++(<x/>.__count__ =  \"\" ).@foo) && 0);");
tryItOut("throw prop;");
tryItOut("{{gc() } }");
tryItOut("do if(prototype.__parent__.__defineSetter__(\"__count__\", (1 for (x in [])))) { if (eval(\" /x/g  / __count__ setter: true\",  '' .isPrototypeOf(*::*))) {return [1,,];export __parent__; } else {}} while(((uneval(new [1,2,3,4].slice( '' , prop))) ? (new RegExp( \"\" , *::*) <<= (*::*.watch(\"__iterator__\", ({}).hasOwnProperty))) : <><xxx {constructor}={-3/0} /></>.__parent__ = <y><z/></y>) && 0);");
tryItOut("yield null\n");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__count__\", (new 'fafafa'.replace(/a/g, \fwindow)).watch))do <><ccc:ddd> </ccc:ddd></> while((window @ 3/0) && 0);");
tryItOut("with({}) return;");
tryItOut("if() { if (#1=[#1#](this).@foo) <x><y/></x>;} else {evalgc() }");
tryItOut("{{}const __noSuchMethod__, __iterator__; }");
tryItOut("return <><x><y/></x></>--;");
tryItOut("{/*infloop*/for(__proto__ = <y><z/></y>; <x/>; .2) {export __parent__; } }return;\nexport *;\n\n");
tryItOut("");
tryItOut("");
tryItOut("let (__proto__) { {} }");
tryItOut("/*infloop*/for(let __count__; (eval(\"<y><z/></y>\", (1e81 <= ({ constructor: prototype, __iterator__: __parent__ }))(-3/0.watch(\"__count__\", (new Function(\"yield;\"))), <bbb xmlns=\"<x><y/></x>\">yyy</bbb> ))); (__proto__ = <y><z/></y>(<x><y/></x>, <x><y/></x>).eval((prototype.__proto__ = <><x><y/></\tx></>)))) {if(this.__defineGetter__(\"prototype\", (<><x><y/></x></>).__defineSetter__)) __count__ }");
tryItOut("yield <x><y/></x>");
tryItOut("/*infloop*/for(__count__ = *::*; <bbb xmlns:ccc=\"eval(\"if(<x/>) return this; else  if (<y><z/></y>) export *;\", ({ __count__: __proto__ }) = 'fafafa'\f.replace(/a/g, window))\"><ccc:eee></ccc:eee></bbb>; 'fafafa'.replace(/a/g, (1 for (x in [])))) {with(((((function ([y]) { })() for each (__iterator__ in this))).__lookupSetter__(\"__proto__\").yoyo(<><x><y/></x></> == undefined) ? {} : (Math.pow)())){<x><y/></x>;return; }L: { } }");
tryItOut("yield [15,16,17,18].some(eval, -3/0)");
tryItOut("let (^ = null.*, __parent__ = @foo .. <x><y/></x>.@foo) { L:if((false - <y><z/></y>)) {([1]);; } else  if ((++<x/>)[ '' ]) {return \f<x><y/></x>;{} } else __count__ }");
tryItOut("switch(*::*.isPrototypeOf(<y><z/></y>)) { case 3: default:  }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = <><x><y/></x></> in <x/>) {yield 1e-81; }");
tryItOut("/*infloop*/M:while(__parent__ = __proto__);");
tryItOut("/*for..in*/for(let prototype in __proto__ = *::*) { ''  }");
tryItOut("do throw constructor; while(((__parent__ = (<><x><y/></x></> === *::*))) && 0);");
tryItOut("while((([z1] *= (this.__defineGetter__(\"__parent__\", [1,2,3,4].slice)))) && 0)throw StopIteration;");
tryItOut("if(((({prop: <><x><y/></x></>})) *= <x/>)) export __proto__; else  if (( /x/g  &= [,]) == this.__defineSetter__(\"__iterator__\", function(q) { return q; })) {(__noSuchMethod__); }");
tryItOut("/*for..in*/for(const (__iterator__) in <><x><y/></x></>) gc()");
tryItOut("/*for..in*/for(var [function::__parent__, prototype] = __proto__ = <x><y/></x> in true) yield;");
tryItOut("/*infloop*/for((-0) <<= 0.1; (<x/> .@*:: function(id) { return id }); [15,16,17,18].sort(( /x/g ).__defineSetter__, <><x><y/></x></>)) {(4.); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do {yield [,,];{} } while( \"\" );");
tryItOut("{return ({ get __noSuchMethod__ __iterator__ (__noSuchMethod__) { return  ''  }  }); }");
tryItOut("/*infloop*/for(const __proto__; <bbb xmlns:ccc=\"(@foo != true)\"><ccc:eee></ccc:eee></bbb>\n; ((new ( /x/g )(<><x><y/></x></> :: constructor)).@foo)) //h\n{export *; }");
tryItOut("/*infloop*/M:for(let __count__; (__parent__ = true.@foo); new Iterator()) {break L;; }");
tryItOut("{/*infloop*/for(case 1: return this;break; break; export __proto__;break; break ;case 7: ([[1]]);yield;break; case 2: default: case 6: break ;break; case 9: (*);.__defineSetter__(\"__count__\", ({}).__lookupGetter__);  '' .hasOwnProperty(\"var prop;\") <= ; let (__iterator__ = <><x><y/></x></>) this = <y><z/></y>) {constructor =  \"\" , __iterator__;__parent__ =  /x/g , __parent__ = this; }1e-81 }");
tryItOut("var constructor, prototype\n;");
tryItOut("/*for..in*/for(let <x/> &=  /x/ .unwatch(\"__proto__\")['__iterator__'] in false instanceof  /x/g ) {}");
tryItOut("L: ");
tryItOut("yield\n/*infloop*/for(const constructor; window; [z1]) export *;");
tryItOut("do with(this)yield; while((({ __parent__: __iterator__ }) = constructor = @foo) && 0)\f;");
tryItOut("throw prototype;");
tryItOut("switch(([undefined](eval(\"prototype(@foo .. <y><z/></y>, this).propertyIsEnumerable(\\\"__noSuchMethod__\\\")\", *::*), ('fafafa'.replace(/a/g, [1,2,3,4].slice) | [(__noSuchMethod__ = <y><z/></y> | [,]())])))) { default: break; case (this.zzz.zzz): case 7: case 4: break ;break;  }");
tryItOut("{}return <x><y/></x>;");
tryItOut("constructor");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.__proto__ in arguments) ;");
tryItOut("{var __count__ = undefined, __count__; }");
tryItOut("return;if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(([,,][<x/>]))) { if (yield false) {export constructor;throw this; }} else {; }");
tryItOut("do {return; } while((window) && 0); const __parent__;");
tryItOut("if(eval(\"export prototype;\", (#1# || <x/>)).valueOf(\"number\")) { if ( + ({}).*) {<x/>\n }} else (<x/> ? __noSuchMethod__ : -3/0);");
tryItOut("if(033.* ? 1e4.__defineGetter__(\"__proto__\", function(y) { yield y; gc(); yield y; }) : <x/>) { if (<bbb xmlns=\"(*::*.throw(<x/>))\">yyy</bbb>.((uneval(eval(\"break ;\", <><x><y/></x></>))))) {return; }} else {var function::__iterator__ = this, prop = true\n;@foo; }");
tryItOut("export \f*\nthrow function(id) { return id }\nlet __parent__, prototype =  '' ;");
tryItOut("/*for..in*/for(const __parent__ =  in <><x><y/></x></>) {return window;__noSuchMethod__ = <><x><y/></x></>, __count__; }");
tryItOut("throw __parent__;");
tryItOut(" .prototype = prop;");
tryItOut("let (__proto__ = [11,12,13,14].sort) { with(*)yield\n }");
tryItOut("let (__parent__ = (({ __count__: <><x><y/></x></> }) = <y><z/></y>), __count__) { {} }");
tryItOut("with({prop: <x><y/></x>.unwatch(\"prototype\")}){if(<y><z/></y>) return <x/>\f; }\nif((4..constructor = <><x><y/></x></>)) let prop = 3, __noSuchMethod__ = <><x><y/></x></>; else  if ((setter = <x/>)) let prop =  /x/g , __parent__;");
tryItOut("/*infloop*/do switch(@foo) { case <x><y/></x>: break;  } while((({ set prop __count__ (__iterator__) { return  /x/  @ <x/> } , prototype getter: <y><z/></y> })));");
tryItOut("__proto__ = constructor;");
tryItOut("let(__iterator__ = 0.1) { yield\n");
tryItOut("let (__count__ =  /x/g ) { yield <x/>; }\n(<y><z/></y>);;");
tryItOut("{}\n/*infloop*/for(const ({ __parent__: __proto__, __parent__: [] }) = <xxx>{__noSuchMethod__}</xxx>; new Error(__iterator__.__count__, <x><y/></x>); *::*) {const __count__ = <x/>, __parent__ = [,]; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x/>) const prototype = *;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("/*infloop*/M:for(__parent__ = yield <x/>; (5.0000000000000000000000 for (__proto__ in [[1]])); __count__ = __parent__) <x><y/></x>;");
tryItOut("\n");
tryItOut("/*infloop*/M:\nfor(constructor; ([(({ __proto__: ({ __proto__: ({ prototype: __count__ }) }), __proto__: ({ __count__: prop = prop = 1.3 }) }) = ([15,16,17,18].map(/a/gi, window).@foo.__parent__))]); new <x><y/></x>(<y><z/></y>, <x/>)) M:if(0x99) ; else  if (@foo) {; }yield;");
tryItOut("if(*) { if (gc) {while(((<><x><y/></x></>.__noSuchMethod__).__lookupGetter__(\"__iterator__\")) && 0)/*infloop*/for(let __parent__; <><x><y/></x></>; 0/0) {( /x/g );let __parent__, __noSuchMethod__ = this; } } else (prop = __noSuchMethod__\t).__count__ = __parent__;}");
tryItOut("with(prototype){@foo; }");
tryItOut("yield *::*; const constructor;");
tryItOut("/*for..in*/for(var __count__ in ((function ()(p={}, (p.z = undefined .@x:: *::*)()))((this.zzz.zzz)))){yield __iterator__, prototype;/*for..in*/L:for(constructor = true in <x><y/></x>) {gc()yield; } }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in window\t) {gc() }");
tryItOut("{.2; }");
tryItOut("/*infloop*/L:for(!<><x><y/></x></>;  /x/g  == <><x><y/></x></>; ((this if (<y><z/></y>)))) return;");
tryItOut("yield (({__proto__: <x><y/></x>}));");
tryItOut("/*infloop*/for\t(let __iterator__; ({ set __parent__() { yield true }  });  .__lookupGetter__(\"__parent__\")) return;");
tryItOut("/*for..in*/for(var prototype in ((function(y) { yield y; let (constructor = <><x><y/></x></>) { gc() }; yield y; })(let (prototype =  \"\" ) __iterator__.__noSuchMethod__ setter= function ()undefined))){L: export *;( '' ); }");
tryItOut("if(([1].valueOf(\"number\"))) do {throw window; } while(((<><x><y/></x></>)(null)) && 0); else  if (*::*) {yield;; }");
tryItOut("if(window) { if (false) {(this); }} else var constructor = <x><y/></x>, prop;");
tryItOut("/*for..in*/for(let [false, __parent__] = prop = yield [z1] = [[1]] in new (false)(undefined)) M:if(yield (-0)) { if (({ get prop prop () { yield 1e-81 } ,  get __count__(prop) { yield __noSuchMethod__; }  })) new Function else var __count__ = prototype;}\r");
tryItOut("{let (__parent__ = (*.prop), [__proto__, __iterator__]) { arguments }let (prototype) { return undefined; } }");
tryItOut("with({}) return;");
tryItOut("/*for..in*/__count__\n/*for..in*/M:for([__proto__, __count__] = (uneval(this)) in prop.__proto__) {5.0000000000000000000000;L:if(*::*) {throw <><x><y/></x></>; } else {{} } }\n");
