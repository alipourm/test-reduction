tryItOut("/*infloop*/for(const [] = 1.3; (<x><y/></x>.hasOwnProperty(\"__parent__\") != __proto__); (prop = <bbb xmlns:ccc=\"([this for each (each in /*\n*/[1,,])])\"><ccc:eee></ccc:eee></bbb>)) throw (typeof  \"\" );");
tryItOut("L:switch([,,] >>>=0.1.unwatch(\"__count__\")) { default: break; break; if((__proto__ = __noSuchMethod__)--) yield __parent__; else  if (prop.propertyIsEnumerable(\"__noSuchMethod__\")) {break ;yield; }case 1: case 7: break;  }");
tryItOut("while(((1e-81 % 1e81)) && 0){/*infloop*/do M:while((__parent__) && 0){__iterator__, __count__ } while(new (<x/>.@foo.__proto__ = __count__, __iterator__)()); }");
tryItOut("<x/>\n");
tryItOut("M:if(prop = undefined, __iterator__) { }");
tryItOut("M:if(this.__defineSetter__(\"__proto__\", function(q) { return q; })) { if (({__parent__: window.__proto__})) return <><x><y/></x></>; else (/*\n*/<><x><y/></x></>);}");
tryItOut("let (__proto__, __iterator__ = 1.3) { {} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in <><x><y/></x></>) {(-1).__defineSetter__ }");
tryItOut("throw <y><z/></y>;\nyield;\n");
tryItOut("L: {undefined;export __iterator__; }");
tryItOut("let prop = <x><y/></x>;");
tryItOut("{} const __proto__;");
tryItOut("if(false) {/*infloop*/for(const __proto__; 'fafafa'.replace(/a/g, function  __parent__ () { return ({a1:1}) } ); [new Date()]) /*for..in*/for(__proto__ in ((function  prototype (__parent__, constructor) { throw *::*; } )(5.0000000000000000000000))){throw function ([y]) { }; }throw true++; } else  if (window.__defineSetter__(\"__proto__\", [1,2,3,4].map).watch(\"__noSuchMethod__\", [new <y><z/></y>().isPrototypeOf(new (window)( /x/g , <x/>)) for (constructor in constructor) for each (__iterator__ in window) if (<x><y/></x>)])) {if(true) {[1,,]; } else {throw <><x><y/></x></>; } } else [];");
tryItOut("/*infloop*/do return [[]].sort(function  prototype (let __noSuchMethod__, __iterator__ = __count__;)__iterator__); while(this.zzz.zzz.eval( /x/ .__noSuchMethod__));");
tryItOut("/*infloop*/for(__iterator__; [ /x/ ]; ('fafafa'.replace(/a/g, function () { return __parent__ } ))(__count__)) {var __proto__\n const __iterator__; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let x::__proto__ = (-0); @foo; <><x><y/></x></>) {<><x><y/></x>\t</>; }");
tryItOut("{do {Math.powlet prototype, __proto__; } while(((prototype).__defineSetter__(\"__count__\", (eval).apply)\t) && 0);/*infloop*/for(<><x><y/></x></>.__lookupSetter__(\"yield\"); [11,12,13,14].map; (<><x><y/></x></>)(*::*, 1e4)) gc() }");
tryItOut("M:if( /x/ ) continue ;");
tryItOut("/*for..in*/L:for(let  in ((function (__parent__, constructor) { Math.sin } )(*::* - <x><y/></x>)))");
tryItOut("export *;");
tryItOut(" { yield ((typeof (<><x><y/></x></> *= <y><z/></y>)).unwatch(\"__proto__\")) } ");
tryItOut("__proto__ = (#0=<y><z/></y>).watch(\"prop\", (false).watch) = constructor;");
tryItOut("export *;");
tryItOut("/*for..in*/for(__parent__ in undefined.valueOf(\"number\")) {{/*infloop*/L:while(<x><y/></x>)return; } }");
tryItOut("switch(([1].hasOwnProperty(\"prop\")) <= ((Math.sin).call(__noSuchMethod__, prototype, <y><z/></y>))) { default: case 7: return;case <x/>: /*infloop*/while(__iterator__)<xxx>{__noSuchMethod__}</xxx> }");
tryItOut("if( /x/ ) { if (null) export __iterator__;} else yield let\nwhile(( /x/ ) && 0){{}yield; }");
tryItOut("do {if((new (__noSuchMethod__)(({})))) {throw constructor;function(q) { return q; } } else  if ((<><x><y/></x></>)[false]) {yield; } } while(((@foo ,  '' ).eval(@foo || null)) && 0);");
tryItOut("/*infloop*/M:for(const ({ __parent__: ({ __count__: __noSuchMethod__ }), constructor: __iterator__ }) = (uneval((x::__iterator__ = <y><z/></y>))); *::*; eval(\"#1=[#1#]\", <><x><y/></x></>)) {const __count__ = <x><y/></x>, __count__;throw 033; }");
tryItOut("{{continue M; }if(false) ; else <x/>,  \"\"  }");
tryItOut("with({__proto__: [function  __count__ (__count__, __noSuchMethod__)({})([z1])]}){if(*)  else (<x><y/></x>); }");
tryItOut("{}");
tryItOut("if(-3/0) return; else {return; }");
tryItOut("if( /x/ ) { if (false) export *;} else var __iterator__, __iterator__ = prop;");
tryItOut("{while((constructor) && 0){return false;throw 0; }; }");
tryItOut("/*infloop*/for(let [prototype] = (yield 0); <zzz>(RangeError())</zzz>; (<><x><y/></x></> || false.__noSuchMethod__ = <x><y/></x> >> <><x><y/></x></>) ? (this.__defineGetter__(\"__noSuchMethod__\", Math.sin)).__noSuchMethod__ = new  \"\"  & (\n(<><x><y/></x></>.__lookupGetter__(\"each\"))) : <x/> :: 5.0000000000000000000000) /*for..in*/for(let prototype in 1e4()) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <y><z/></y>) {export __noSuchMethod__; }");
tryItOut("{if(this = this) L:if(<x><y/></x>, false) {} else  if (((constructor.__noSuchMethod__ setter= this)())[*.__defineSetter__(\"prop\", new Function)]) /*infloop*/for(const __count__; prop = prop.hasOwnProperty(\"__noSuchMethod__\") !== <y><z/></y>; <><!--yy--></>) ; else { } }");
tryItOut("export prop\nlet prop = [,];.prop");
tryItOut("/*infloop*/do L:if(*::* , <><x><y/></x></>) break L; else export *;/*for..in*/for(var [prop, __noSuchMethod__] = (({__proto__ setter: function  constructor (__noSuchMethod__, prop) { gc() } , __count__ setter: [1,2,3,4].slice })) in *::*) <><x><y/></x></> while((({ prototype: __parent__, constructor: prototype }) = <x/> << window));");
tryItOut("/*for..in*/for([__noSuchMethod__, __parent__] = Iterator(<zzz> get __parent__() { return 0x99 } </zzz>.((function ([y]) { })().watch(\"__proto__\", [1,2,3,4].map))) in (1e4 - this.hasOwnProperty(\"__count__\"))) <x><y/></x>;");
tryItOut("L:with(({ \"\"  ? (this.__defineGetter__(\"constructor\", 'haha'.split)) :  /x/ ['prototype'], __noSuchMethod__: (<x/>.__parent__ = this) })){export *;if((window.__lookupSetter__(\"__parent__\")) *=  /x/  % <x/>) {throw \t4.; } else if(<><x><y/></x></>) {constructor; } }");
tryItOut("break L\n/*infloop*/while([[1]].watch(\"prototype\", ({}).hasOwnProperty)){<x><y/></x>const __noSuchMethod__, __proto__ = ; }");
tryItOut("prototype = __iterator__;");
tryItOut("if( \"\" ) {export __parent__; } else continue \n");
tryItOut("with(<><!--yy--></>){throw -0;prop = @foo, __noSuchMethod__ = __iterator__; }");
tryItOut("with( /* Comment */(__noSuchMethod__ = (-0))){return @foo; }");
tryItOut("yield\nyield <><x><y/></x></>;let __count__;");
tryItOut("/*infloop*/for(<x><y/></x>; arguments;  /x/ ) continue ;");
tryItOut("if((p={}, (p.z =  /x/g )())) { if (({prototype getter: ({}).hasOwnProperty })) return <y><z/></y>;} else {{}return |; }");
tryItOut("M:with({__count__: (prop.prop)})/*infloop*/do {} while(<x><y/></x>);");
tryItOut("/*infloop*/for(const constructor; [(<x><y/></x>.(<y><z/></y>))(this.__proto__ = [[1]])].sort(function  __noSuchMethod__ () { return ( ''  ? *::* : 1.2e3) } ); ( /x/g )[__noSuchMethod__].__lookupGetter__(\"__proto__\")) \x7f");
tryItOut("let(__noSuchMethod__ = prototype =  '' ) ((function(){return;})());");
tryItOut("constructor = prototype;");
tryItOut("L: yield 1.3;");
tryItOut("M:if() {return; } else {(0x99).watch{gc()yield window; } }");
tryItOut("\n");
tryItOut("M:do L: (-0)\nMath.sin while(((__count__.__parent__\f = <x/>)) && 0);");
tryItOut("with({__parent__: ([(function ([y]) { })()].sort((1 for (x in []))))}){(<y><z/></y>); }");
tryItOut("var __noSuchMethod__, prop;return <x>\f<y/></x>;");
tryItOut("if(new (true)()\r) { if (5.0000000000000000000000.propertyIsEnumerable(\"__iterator__\")) __count__, __iterator__ = @foo; else {}}");
tryItOut("do const prototype, __noSuchMethod__ = window; while(((( \"\" (0.1, [,,]).__defineSetter__(\"prop\", <><x><y/></x></>)))((__noSuchMethod__ = ((*::* for (__iterator__ in  \"\" )))), (function (__proto__, __proto__) { return <x><y/></x> } )(window))) && 0);");
tryItOut("/*infloop*/while(#2=[<x><y/></x>] ? (__proto__.__proto__) : (({}).__defineSetter__(\"__iterator__\", (new Function).apply)))throw null;");
tryItOut("/*infloop*/do export *; while(yield  /x/ );");
tryItOut("if(new <x><y/></x>(*)) while((constructor) && 0){export prototype; }\nreturn;");
tryItOut("for(let y in []);");
tryItOut("if(__parent__.prop) {;break ; } else  if ( /x/ ) return @foo; else return <x/>;");
tryItOut("let(__noSuchMethod__ = *) { __proto__ = prototype;");
tryItOut("__iterator__ = 3/0;");
tryItOut("if(new function  constructor (__parent__, x::__noSuchMethod__) { return #3={a:#3#} } (*)) /*infloop*/M:do {return; } while(__count__ = @foo); else  if (function  __parent__ () { return <x><y/></x> } ( '' )) const __proto__, __noSuchMethod__\nvar __parent__ = this;");
tryItOut("(1 for (x in [])) const __parent__;");
tryItOut("M:with([window === *::*.__iterator__])return prototype;");
tryItOut("\ncontinue ;");
tryItOut("export *;");
tryItOut("this.zzz.zzz;");
tryItOut("L:while(([z1]) && 0)");
tryItOut("/*infloop*/while(([( /* Comment */1e4.yoyo(<><x><y/></x></>))].filter(eval))){while((constructor) && 0)throw <x/>; }");
tryItOut("/*for..in*/for(__count__ in  \"\" ) return;");
tryItOut("let(prop = [,]++, __parent__ = Math.pow()) { return;");
tryItOut("if(<x><y/></x>) { if ( /x/ ) { } else export __iterator__;}");
tryItOut("return <x><y/></x>");
tryItOut("throw <y><z/></y>;");
tryItOut("/*infloop*/for(let function::__iterator__; this; (\nnew (function (__proto__, x::__noSuchMethod__) { let __iterator__; } ).apply() &= <x/>.@*)) {while((<{__iterator__}><x><y/></x><!--yy--></{__iterator__}>) && 0){let __proto__ = __proto__, prop, __noSuchMethod__; }L:if(<><x><y/></x></>) {return; } else  if (<x><y/></x>) {break ;gc() } else export *\n }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in __noSuchMethod__ = ( /x/g )) {with({__parent__: <bbb xmlns=\"<x><y/></x>\"><!--yy--></bbb>})return prop; }");
tryItOut("L: gc()");
tryItOut("break M;");
tryItOut("switch(window)//h\n { default:  }");
tryItOut("if(*) { if (<><x><y/></x></>()) {((1 for (x in []))).apply }} else function \t __parent__ () { return __count__ } ");
tryItOut("if((\nwindow).isPrototypeOf([z1] += <x/>)) { if (<><bbb xmlns=\"prototype = <x><y/></x>\">yyy</bbb></> .. (5.0000000000000000000000 -= <x/>)) <><x><y/></x></>} else {let (prop = x>__iterator__ = [z1]y/></x>) { let __parent__; } }");
tryItOut("/*infloop*/do <><x><y/></x></>; while([15,16,17,18].map(Function, function ([y]) { }));");
tryItOut("while((<><ccc:ddd> </ccc:ddd></>.(__proto__ = true)) && 0)with({__proto__:  \"\" }){return __parent__;continue ; }");
tryItOut("/*for..in*/M:for(__parent__ = window.unwatch(\"__parent__\") in window) null;");
tryItOut("try { let(({ __noSuchMethod__: ({ prop: ({ __parent__: ({ prototype: __iterator__, prototype: __parent__ }) }), __iterator__: ({ constructor: ({ __count__: prototype, constructor: __proto__ }) }) }) }) = function::__count__ = <y><z/></y>) ((function(){__iterator__ = prototype;})()); } finally { //h\nlet(prop, __count__) ((function(){throw StopIteration;})()); } ");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = <x><y/></x> in @foo) {yield true;return; }");
tryItOut("with({}) try { try { let(prototype = 3, delete = 1e-81) ((function(){const __parent__ = __parent__;})()); } finally { with({}) export constructor; }  } catch(__proto__) { let(__count__) { __iterator__\f = prop; } ");
tryItOut("if( /x/g  = \f<x><y/></x>.(<y><z/></y>)) if(<x><y/></x>) { if (<x><y/></x>) let __iterator__;} else {export __iterator__;throw __parent__; }");
tryItOut("L:if((~*::*)) let __proto__;");
tryItOut("return;");
tryItOut("let (__proto__ = [<x><y/></x> / -0].map(({}).hasOwnProperty), prototype = new (__proto__)(<x><y/></x>, 5.0000000000000000000000)) { yield *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in *::*) {export __iterator__; }");
tryItOut("/*for..in*/L:for(let __count__ in this) {}\nlet (__proto__ = <x/>) { constructor = (-0), __proto__; }\n");
tryItOut("prop: (3.141592653589793)((p={}, (p.z = this.__defineSetter__(\"prototype\",  '' ))())) = (<><x><y/></x></>.*.constructor = (__parent__.__defineSetter__(\"__iterator__\", function  __proto__ (__parent__) { export __parent__; } )))");
tryItOut("if(__iterator__ = 'fafafa'.replace(/a/g, function (constructor) { break L; } )) {(3/0).watchconstructor } else  if ((((this.__defineGetter__(\"constructor\", (this).watch))).call((<><x><y/></x></> .@*:: (( '' ).call((-0), null, <x><y/></x>))), 1.2e3.isPrototypeOf(function ([y]) { }), (prop.(__noSuchMethod__))))[((<y><z/></y>.__lookupGetter__(\"__proto__\")) for (<x><y/></x>.prop in *::*) if (__count__))]) {export *;with({__count__: [,,]}){gc()\fthrow <x><y/></x>; } } else switch(let (__noSuchMethod__ = @foo)  /x/ ) { case new (( \"\"  ? 1e-81 : <x/>))(): const __iterator__ = 3.141592653589793, x::__iterator__;break; (-0);\n }");
tryItOut("/*infloop*/L:do {/*for..in*/for(const __proto__ = undefined in [11,12,13,14].map) yield prototype; } while(*);");
tryItOut("let (__proto__ = window) { break ; }");
tryItOut("/*for..in*/M:for(__proto__ =  /x/  in prop) yield true\n");
tryItOut("if([]) continue M; else  if (<x/>) ; const constructor;");
tryItOut("with({__noSuchMethod__: undefined}){export prototype;throw @foo; }\n");
tryItOut("L: with({}) { throw #1=[#1#]; } ");
tryItOut("return prototype.__count__ getter= ({__count__: <x><y/></x> .@*:: (-1) });");
tryItOut("let (__proto__) { var prototype; }");
tryItOut("/*infloop*/for(let prototype; <x><y/></x>; #1=[#1#]) return undefined;");
tryItOut("if(this.__iterator__.yoyo(function (prototype, __count__) { return <x><y/></x>; } ())) { if (((<y><z/></y>)[window][prototype] , (function ([y]) { })() >> <><x><y/></x></>)\n) {/*infloop*/for(var __iterator__ = *; 0.1; this) {}<><x><y/></x></> }} else try { export __noSuchMethod__; } catch(__iterator__ if (function(){export *;})()) { ; } catch(__proto__ if (function(){;})()) { yield; } ");
tryItOut("if((prop =  /x/ )) { if (<y><z/></y>.watch(\"__proto__\", new Function)) {let __parent__, prop = [[]]; } else {(3/0);throw @foo; }}");
tryItOut("do throw 1.2e3; while(((return prototype) / __proto__ = window) && 0);");
tryItOut("for(let y in []);");
tryItOut("\nyield *;");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/for(*; function(id) { return id } .. __noSuchMethod__; [new (new Function)(<y><z/></y>,  \"\" )].map(function(y) { yield y; with( \"\" ); yield y; })) yield constructor;");
tryItOut("/*infloop*/M:for(let prop(window) = arguments; this ? <x/> :  \"\" ; ({__noSuchMethod__: prototype = __proto__ }\f)) /*infloop*/for(prototype = 033; <><x><y/></x></>; <><x><y/></x></>) yield;");
tryItOut("L:if( /x/ ) continue ; else  if ( /x/g )  else { }");
tryItOut("/*infloop*/M:for(const __parent__; new RangeError().@foo; function::__iterator__ = @foo.@foo) {<x><y/></x>(undefined); }");
tryItOut("if((({__parent__: 3}))) return  \"\" ; else (3/0);");
tryItOut("L: return;");
tryItOut("__parent__, __iterator__ = [[1]]\n");
tryItOut("with({delete: prop})<><x><y/></x></>;null;");
tryItOut("for(let y in [5,6,7,8]) return \r<x/>;");
tryItOut("/*infloop*/for((__noSuchMethod__)[(__iterator__ = __count__.__lookupGetter__(\"prototype\"))]; 3/0.*.@*; [[]].__proto__.propertyIsEnumerable(\"getter\")) M:if((*::* for each (__proto__ in window))) {(true); } else  if (eval(\"__parent__ = __iterator__.__proto__ = ({})\", (prop.eval(this)))) {yield; } else yield;");
tryItOut("/*for..in*/for([x::constructor, __iterator__] = *::* in 0/0) ");
tryItOut("if((__iterator__ = *::*)) (undefined); else  if (__noSuchMethod__.eval( \"\" )) {prop; }");
tryItOut("if( /x/g ) gc() else  if (this) {function (prop) { break ; }  } else export *; const prop;");
tryItOut("/*infloop*/M:do {/*for..in*//* nogeckoex bug 349964 */M: for  each(const __parent__ in  /x/g ) throw (<x><y/></x>); } while(--<x/>);");
tryItOut("for(let y in [5,6,7,8]) constructor.__proto__ = prototype;");
tryItOut("/*infloop*/M:while(__proto__.prop setter= [1,2,3,4].map){if(({__iterator__: [z1,,]})) { if (<x><y/></x>.propertyIsEnumerable(\"__iterator__\")) {yield; }} else {return __parent__; }return; }");
tryItOut("{while((1e81.__count__) && 0)var __noSuchMethod__ = \f<x><y/></x>, __iterator__; }");
tryItOut("with({}) let undefined.eval(<><x><y/></x></>);/*for..in*/M:for(var [__proto__, prototype] = __proto__ in null) {return function(id) { return id }; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((this.zzz.zzz)(([15,16,17,18].map((-3.141592653589793).apply,  >>> <y><z/></y>.isPrototypeOf((<x><y/></x>[__noSuchMethod__]))))))){(prop).__defineSetter__ }");
tryItOut("break M;\nlet (each = yield (new String())) { switch((__noSuchMethod__ = constructor)) { case 9: break;  } }\n");
tryItOut("prop = __parent__");
tryItOut("M:with(([11,12,13,14].sort[new (<><x><y/><\t/x></>).watch((prototype =  \"\" ), <x><y/></x>)] -= (this.__defineSetter__(\"__parent__\", ({}).__lookupGetter__)))){if(#3={a:#3#}.@foo) __noSuchMethod__, __noSuchMethod__ = 0.1; else  if (({ set prop(prop)this.__defineGetter__(\"getter\", function(q) { return q; }).eval('fafafa'.replace(/a/g, function (__proto__)<><x><y/></x></>)), prototype: (([11,12,13,14].map)) })) {gc()export prototype; } else /*infloop*/L:do {; } while(function ([y]) { }); }");
tryItOut("if(<><x><y/></x></>) (__noSuchMethod__); else  if ((<x/>.unwatch(\"constructor\"))) {#1#; }");
tryItOut("{if(<x><y/></x>) {var __proto__, __parent__ = [[1]]; } else  if (undefined) {return;0x99 } }");
tryItOut("if(('fafafa'.replace(/a/g, prototype)).isPrototypeOf(undefined++)) continue L; else  if ((prototype = <><x><y/></x></>)) <{__count__}> </{__count__}> else {with([15,16,17,18].some(Function, <><x><y/></x></>)){gc() } }");
tryItOut("/*for..in*/for(const __iterator__ in ((<><x><y/></x></> ^= <x><y/></x>)[<x><y/></x>.propertyIsEnumerable(\"__iterator__\")])) gc()gc()");
tryItOut("/*infloop*/M:do /*infloop*/L:for(const prop = constructor; <x><y/></x>; <x><y/></x>(<y><z/></y>, <x><y/></x>)) break M; while((#1=prop = constructor , __iterator__ = this));");
tryItOut(" const __iterator__;");
tryItOut("{while(( \"\" (<y><z/></y>,  /x/g )) && 0)/*infloop*/for(let __proto__ = null = prototype; <x/>.unwatch(\"__iterator__\"); ({ __noSuchMethod__: __count__ }) = __count__ = <x><y/></x>) ; }");
tryItOut("let (__noSuchMethod__) { if(<><x><y/\n></x></>) { /x/g ; } else  if (<x/>) {return  '' ;return null; } }");
tryItOut("/*for..in*/for(__proto__ = __noSuchMethod__ = <x><y/></x> in gc()) \n{yield }");
tryItOut("do return; while((__proto__) && 0);");
tryItOut("/*infloop*/do {/*infloop*/for( /x/ .__proto__.throw((this.__defineSetter__(\"prototype\", __noSuchMethod__))); <x><y/></x>.valueOf(\"number\"); [<x/>]) #1#;/*for..in*/for(var constructor in ((function(y) { yield y; gc(); yield y; })((yield true))))throw __parent__ = <x><y/></x>; } while(__count__.__noSuchMethod__ = <x><y/></x> for (__iterator__ in  '' ) for (__parent__ in 1.2e3)__iterator__.watch(\"__noSuchMethod__\", eval(\"throw <x><y/></x>;\", <x><y/></x>)));");
tryItOut("{yield\ncontinue ; }");
tryItOut("if((prop|=*::*)) * else {/*for..in*/for(let __noSuchMethod__ = *::* in prototype) {yield prototype; }/*infloop*/while(<ccc:ddd><!--yy--></ccc:ddd>)continue M;\t }/*for..in*/for(var [11,12,13,14].map['__noSuchMethod__'] in ((true)((this.__defineSetter__(\"prototype\", function (prop, prop)<x/>))))){}");
tryItOut("/*for..in*/M:for(var constructor in (((new Function).call)(033)))({}).__lookupGetter__\n\n");
tryItOut("if((<y><z/></y> .@ this)) { if (constructor) {break ;(#1=[#1#]); } else {return  /x/g ; }}\nlet(prototype, __parent__ = <><x><y/></x></>) ((function(){;})());");
tryItOut("return;\nexport __parent__;\n");
tryItOut("/*infloop*/M:for(__proto__ = (0 !== (this.propertyIsEnumerable(\"__proto__\")).watch(\"__iterator__\", new Function)); constructor.eval(*::*); \n<><x><y/></x></> ? 1e81 : <y><z/></y> |= {}) if(((({}).hasOwnProperty).apply([,,z1]))) {yield 1e81; }");
tryItOut("export *; const __count__;");
tryItOut("var __iterator__ = __proto__, __count__ = window;/*for..in*/for(var constructor in window) var __count__ = *::*;");
tryItOut("L:with({__proto__: /*\n*/'fafafa'.replace(/a/g, function (prop, prop)function ([y]) { })}){*::*;L:with({__noSuchMethod__: 3.141592653589793}){[1,2,3,4].slice } }");
tryItOut("for(let y in []);");
tryItOut("L:with({__parent__: ([[,] <= null(__parent__)] * [15,16,17,18].filter((<y><z/></y>\f).watch, true || function ([y]) { }))})if(['__noSuchMethod__']) {({}).hasOwnProperty } else export prop;\t");
tryItOut("L:if(prototype.__defineSetter__(\"prototype\", (eval).apply)) [prop] else {yield;; }");
tryItOut("if(({__noSuchMethod__: __parent__ / <><x><y/></\tx></>, constructor: ([] = this.__defineGetter__(\"__noSuchMethod__\", @foo)) })) {let (prototype = *::*) { return __proto__; }/*for..in*/M:for(let (__proto__) in ((window)(([[]].hasOwnProperty(\"__parent__\"))))){gc() } }");
tryItOut("export __count__;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = __iterator__; true; this) {break ;const prop; } const __noSuchMethod__;");
tryItOut("if(let (__noSuchMethod__, __iterator__) default: M:if(__count__+=<><x><y/></x></>) return;case 0: L: {gc() }break; case __parent__ = prototype.valueOf(\"number\"): try { let constructor = this, __iterator__ = this; } finally { export yield -1;; } break; ) { if ((\n(function(id) { return id } / __noSuchMethod__))) {__count__;(#1#); } else { }}");
tryItOut("if(eval(\"[,,z1] in prop\", <x><y/></x>.throw(undefined)) <= #2=[1e-81]) { if (this.zzz.zzz .@ yield) {const prototype, __count__;yield 3/0; }} else /*for..in*//* nogeckoex bug 349964 */ for  each(var prop(@foo) in constructor) {throw prototype;export *; }");
tryItOut("continue \n");
tryItOut("/*infloop*/for((new __noSuchMethod__); 1e4;  /* Comment */__count__ = ((__count__++).__defineSetter__(\"__parent__\", *::*))\n .@ #2=<xxx {constructor}={*} />) {/*infloop*/L:for(<x><y/></x>.(<><x><y/></x></>); (prototype = ([*].sort(/a/gi))); <x><y/></x> , window) {prop =  \"\" , __parent__;export *; }export __parent__; }");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] = function ([y]) { } in  \"\" ) return;");
tryItOut("false;throw  /x/ ;");
tryItOut("M:if(null) { if (window) throw <x><y/></x>;} else const {};");
tryItOut("L: const __count__ = Function.constructor;");
tryItOut("if(*) {({a2:z2}); } else ");
tryItOut("/*for..in*/for(let prop in *::*) {return;; }");
tryItOut("/*infloop*/for(const __parent__ = ({a1:1}); <><y><z/></y></>; __proto__) /*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in prop) {return; }");
tryItOut("if(*) yield;");
tryItOut("/*infloop*/M:for(const __iterator__;  /* Comment */__parent__ = undefined; ({__proto__: (new function () { yield new [](this, <x/>) } (<x><y/></x> <<=  \"\" , (__parent__.prototype = <><x><y/></x></>))) })) if(((let (__proto__, __noSuchMethod__) this) = (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(window)))) {const __parent__ = (-1)\n<y><z/></y>; }");
tryItOut("for(let y in [5,6,7,8]) __parent__ = __proto__;");
tryItOut("let (({ prototype: __noSuchMethod__ }), __count__ = <x><y/></x>) { export *; }");
tryItOut("M:if((function (each) { return *::* } )[<><x><y/></x></> = [z1,,]]) { if ('fafafa'.replace(/a/g, /a/gi)) let __proto__ = window, __iterator__ = true;} else continue M;");
tryItOut("/*infloop*/for( '' ; this.__defineSetter__(\"__parent__\", [1,2,3,4].slice); ({__count__: eval(\";\", __proto__) })) with( /x/ ){continue M;throw 5.0000000000000000000000; }");
tryItOut("break M\n");
tryItOut("try { return __iterator__ = ({a2:z2}); } finally { with({}) { prototype; }  } ");
tryItOut("throw <x><y/></x>;\n<><x><y/></x></>;\n");
tryItOut("while(((constructor)(window)) && 0)yield;");
tryItOut("with({}) return;");
tryItOut("export *; const __iterator__;");
tryItOut("/*for..in*/for(let prototype in (({__parent__: (* for each (constructor in *)).valueOf(\"number\")}))) {([,,]).__defineSetter__/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 1.3) {{} }\n; }");
tryItOut("/*for..in*/for([__count__, x::__proto__] = __count__.eval(window) in -3/0) continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in  /x/g ) {throw <><x><y/></x></>;{} }");
tryItOut("const __parent__, prototype;let (prop, constructor) { const constructor; }return\nreturn @foo;");
tryItOut("with(eval(\"export prop;\", 4.) = <><x><y/></x></> , null)continue L;");
tryItOut("prop");
tryItOut("L:while(((yield [])) && 0){return; }");
tryItOut("/*infloop*/M:while(({ set __parent__(prototype) /x/  })){return window; }");
tryItOut("throw StopIteration;");
tryItOut("if(@foo) { if (null) {(*); }} else ");
tryItOut("{{}yield undefined; }");
tryItOut("yield __noSuchMethod__;");
