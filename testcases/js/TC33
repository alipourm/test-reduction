
tryItOut("if((<x><y/></x> << undefined)) ; else {yield; }");
tryItOut("/*for..in*/for(var __count__ = ( /* Comment */this) in *::*) ( /x/ );");
tryItOut("/*infloop*/M:for(__iterator__; ( /* Comment */__noSuchMethod__ = this); [this for (__proto__ in constructor)]) do {gc() } while((<x><y/></x>.*) && 0);");
tryItOut("/*infloop*/do {export *;var __count__; } while(<y><z/></y> .@*:: <x><y/></x>);");
tryItOut("M:while((({__iterator__: Exception(<y><z/></y>, <x\n><y/></x>)}).valueOf(\"number\")) && 0){/*for..in*/for(function::__parent__ = ~__count__ in <x><y/\n></x>) yield this;gc() }");
tryItOut("/*infloop*/for(var __iterator__; (<x/>.constructor); this.zzz.zzz) {M:if(false[*::*]) let constructor = constructor: <x/>, prop = true; }\ngc()");
tryItOut("");
tryItOut("do {;M:with({__noSuchMethod__: this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; __count__ = __proto__;; yield y; })}){yield;<x><y/><\n/x> } } while((constructor.function::__noSuchMethod__ setter= ((this.__defineSetter__(\"prop\", (function  __iterator__ () { {} } ).apply))).__defineSetter__) && 0);");
tryItOut("\t\n");
tryItOut("switch(<x><y/></x>) { default: yield;break;  }");
tryItOut("let __proto__ =  { return true } , __parent__ = <x><y/></x>;;");
tryItOut("* = ;");
tryItOut("const prop, __parent__ = <x><y/></x>");
tryItOut("M:if(<x><y/></x> in  \"\" ) {L:with({__noSuchMethod__: *})export *; } else {;return; }");
tryItOut("while(((new constructor(4.,  /x/g ))) && 0){1.2e3; }");
tryItOut("with((this.zzz.zzz)){}");
tryItOut("M:with({__iterator__: (__proto__%=<y><z/></y>.hasOwnProperty(\"constructor\"))})/*infloop*/for([__iterator__, __count__, [, ({ constructor: __noSuchMethod__, __proto__: __noSuchMethod__ }), ({ __count__: __iterator__ })], [], ({ __iterator__: ({ __parent__: prototype, prop: constructor }), __count__: __count__ })] =  \"\" ; (throw <x><y/></x>).watch(\"__iterator__\",  '' ); ) {continue L; }");
tryItOut("/*infloop*/for((undefined.*)[prop = -3/0]\f; __parent__ = <x/>; <x><y/></x>\f ^  /x/ .isPrototypeOf(\n \"\" )) prop");
tryItOut("if(([yield this])) {var __parent__ =  /x/ ; } else export prop;");
tryItOut("with({}) { try { return; } finally { <x><y/></x>; }  } ");
tryItOut("/*infloop*/while(((<><zzz> '' </zzz></>).call((false , new (033)(@foo, <x><y/></x>)), <x><y/></x>.(null), [ /x/g  for (constructor in window)])))/*infloop*/for(prototype = <><x/*\n*/><y/></x></>.propertyIsEnumerable(\"__count__\"); [((yield  \"\" )//h\n)]; ({ prototype: ({ __iterator__: __count__, prop: __count__ }), constructor: __proto__ }) = prop.(__proto__) if (null >> arguments)) /*for..in*/for(let __parent__ in ((Function)( /x/g ))){gc() }\n");
tryItOut("M:with({__proto__: <x><y/></x>})const __parent__;export window;\nlet (__count__, __parent__) { __iterator__; }\n");
tryItOut("M:with(__proto__.yoyo(3/0)){;; }");
tryItOut("new Function");
tryItOut("while((0.1) && 0)");
tryItOut("break \nexport prototype;");
tryItOut("L: {}");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in (((((({}).hasOwnProperty).apply).call).call)(false))){let __proto__, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("{} const constructor;");
tryItOut("/*for..in*/L:for(var [prop, constructor] = 1.2e3 in <><x><y/></x></>) return;");
tryItOut("let __noSuchMethod__ = window, __noSuchMethod__;\nexport prop;\n");
tryItOut("var prototype =  /x/ , __iterator__ = <x><y/></x>; const __parent__;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let constructor.constructor in ((({}).hasOwnProperty)(this)))(prop);");
tryItOut("/*infloop*/for(var prototype; #1\f=new (eval)(arguments) *= (__count__ = this); (prototype.__iterator__ =  { yield function  __parent__ ()function ([y]) { }(@foo) } )) //h\n{with({__proto__: *}){break M;export prop; } }");
tryItOut("yield #0=({__count__: <x><y/></x>}).isPrototypeOf([z1]);");
tryItOut("M:with((Function(__parent__ = 1e4,  /x/g )))export __noSuchMethod__;");
tryItOut("with({prototype: new (eval(\"const __noSuchMethod__;\",  \"\" )).prop = eval(\"<y><z/></y>\", -1)()}){ /x/ ;throw <><x><y/></x></>; }");
tryItOut("{for(let y in []); }");
tryItOut("let(prop, constructor = <x/>) ((function(){let(__proto__, __parent__) ((function(){for(let y in []);})());})());");
tryItOut("if( \"\" ) {return <x/>; } else  if (<><x><y/></x></>) {__parent__, prop; }");
tryItOut("let (({ __noSuchMethod__: __proto__, __proto__: [__parent__[, , [, ({ __count__: ({ prototype: prop, __proto__: __proto__ }) }), , ], ({ prototype: ({ __iterator__: __iterator__, constructor: [] }), constructor: [, __noSuchMethod__] })]]  { return -3/0 }   }), __noSuchMethod__) { with({}) let(__iterator__, constructor) { throw __iterator__; }");
tryItOut("/*for..in*/L:for(var constructor in ((__proto__ for (__count__ in <><x><y/></x></>)))) {return; }");
tryItOut("prop = <y><z/></y>, new (eval).apply(__iterator__ = <x><y/></x>)");
tryItOut("{}");
tryItOut("M:if((<><x><y/></x></> &= ({a1:1}))) {/*for..in*/for(var prop in ((function (__count__, __parent__) { yield function::__proto__ } )(<><x><y/></x></>))){gc(); } }");
tryItOut("/*infloop*/for(<bbb xmlns:ccc=\"<><x><y/></x></>.constructor\"><ccc:eee></ccc:eee></bbb>; __proto__ = <y><z/></y>; (new ((/a/gi).call)([z1,,], window))) {break M;if(<><x><y/></x></>) { if (__parent__ = false) {continue ; } else {export *; }} }");
tryItOut("try { return; } finally { continue L; } \n");
tryItOut("if((delete =  /* Comment */((yield *.__lookupGetter__(\"prototype\"))))) {do {throw [,,z1]; } while((<x/>) && 0);return; }");
tryItOut("L: ;");
tryItOut("let(__proto__ =  /x/g ) ((function(){export constructor;})());");
tryItOut("L: {{yield true;var __noSuchMethod__ =  /x/g ; } }");
tryItOut("if(1e-81) { if (__parent__) {yield;{} }} else {function  constructor (constructor, __noSuchMethod__) { yield 5.0000000000000000000000 } export constructor; }");
tryItOut("*::*;");
tryItOut("/*infloop*/for(var __count__; (eval(\"var __noSuchMethod__;\", (({__proto__ setter: Math.pow })))); void  /x/ ) {{yield <><x><y/></x></>;return <x><y/></x>; }/*infloop*/do {export __count__; } while( /x/ .constructor); }");
tryItOut("this.zzz.zzz;");
tryItOut("let (prop = (yield 1.2e3), __proto__ = ({prop: ({prop: .2,  get __noSuchMethod__ __parent__ (__proto__, __parent__) { yield prop; }  }) })) { yield (new (Math.sin)(<y><z/></y>)).watch(\"__parent__\", function  __iterator__ ()1.3); }");
tryItOut("return <y><z/></y>;");
tryItOut("/*for..in*/for(var ({ __proto__: ({ __iterator__:  }) }) = <x><y/></x>.(window) = <x><y/></x> << } in __count__) {return  /x/ ;gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in  '' ) {return *;yield; }");
tryItOut("with({}) for(let y in []);");
tryItOut("while((*) && 0)");
tryItOut("{with({}) let(prototype = <x><y/></x>, constructor = 0) ((function(){export constructor;})()); }");
tryItOut("this.zzz.zzz;");
tryItOut("gc()\nif(new //h\n(0)(<x><y/></x>)) { if (this) *;} else {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in (({prototype:  /x/ , prototype:  ''  }) += yield (*::*.__count__))) {try {  \"\" ; } catch(prop) { export *; }  }");
tryItOut("let (__noSuchMethod__ = null.__lookupSetter__(\"<x><y/></x>\") & __noSuchMethod__, __noSuchMethod__) { for(let y in [5,6,7,8]) export __count__; }");
tryItOut("\n");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("function::constructor = [,]['__iterator__']");
tryItOut("try { return; } catch(constructor) { for(let y in [5,6,7,8]) try { return; } finally { export *; }  } ");
tryItOut(" const __count__;");
tryItOut("/*infloop*/for(const prototype; (yield __proto__);  /* Comment */prototype) {;{} }");
tryItOut("/*infloop*/for(const prop = constructor.(this); __proto__ = prop;  \"\" )  if (delete window)");
tryItOut("do {\fyield __proto__;{} } while((__noSuchMethod__ = prototype) && 0);");
tryItOut("with(prop = true){/*infloop*/M:for(__count__; (new @foo(null,  \"\" )); ((yield [1,,]))) <x/>;/*for..in*/for(const (<><x><y/></x></>).\twatch in ((prototypefunction (__noSuchMethod__, __count__) /x/g )(<><x><y/></x></>)))return; }");
tryItOut("/*infloop*/L:for(prop = (<x><y/></x>.__defineSetter__(\"prop\", 'haha'.split)); (yield); (__parent__.__parent__)) \tconst prototype = yield, constructor;");
tryItOut("if((__iterator__(prototype))) { if (this.zzz.zzz) {const __iterator__, __noSuchMethod__\n; } else ;}");
tryItOut("/*for..in*/for(let prototype in ((function (__proto__, __noSuchMethod__)(0 - false))(setter)))export constructor;");
tryItOut("let (__count__) { {break ;\t } }");
tryItOut("throw __parent__;");
tryItOut("{break L;; }");
tryItOut("{const __noSuchMethod__ = <x><y/></x>, constructor = this; }");
tryItOut("if( /x/ ) { if (@foo) {gc() }} else {gc()gc() }");
tryItOut("/*for..in*/M:for(let __parent__ in (new ((-1).watch)())) L:if(1e-81) ( \"\" ); else  if (*) {throw window; } else {let __proto__ = null, __count__; }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = this in -3/0) Math.sin/*for..in*//* nogeckoex bug 349964 */ for  each(Z in 1e81) <x><y/></x>");
tryItOut("if(<x/>) ({}).hasOwnProperty\nreturn;\nreturn;\n");
tryItOut("/*infloop*/L:do {(\n } while('fafafa'.replace(/a/g, <><x><y/></x></>));");
tryItOut("/*for..in*/for(const __iterator__ = -3/0 in (__proto__ <= window) in (__iterator__ = __proto__)) {/*infloop*/for(var ({ prop: __iterator__ }) = <x><y/></x> :: default: export *;; <y><z/></y>.yoyo([]); <><x><y/></x>\f</> +=  /x/g ) gc()yield; }");
tryItOut("let(constructor = @foo, prop) { export *;");
tryItOut("M:switch(prototype.__count__ = <x/>) { case ( /x/ .__defineSetter__(\"prop\", Math.sin)): export *;case (let (prototype =  \"\" , prototype) <x/> if ( \"\" )): break; case (this.@foo): return __proto__;break;  }");
tryItOut("if((return constructor\n.*)) ; else  if (<x><y/></x>.__defineGetter__(\"prototype\", function(y) { yield y; gc(); yield y; })) {;return; } else {prototype, __iterator__ = @foo; }");
tryItOut("if(<x/>) { if (<y><z/></y>)  else return;}");
tryItOut("/*infloop*/for(__proto__ ? (-1) :  /x/g .__defineGetter__(\"__noSuchMethod__\", 5.0000000000000000000000); <><!--yy--></> -= ([11,12,13,14].filter); (((undefined.valueOf(\"number\"))).watch)) ");
tryItOut("try {  } catch(constructor) { return <y><z/></y>; } ");
tryItOut("/*infloop*/for(var ({ __proto__: constructor }) =  /x/ ; ({__parent__: prop, x::function::__parent__: <y><z/></y> }); ((#2=#1#)(prop = window, 1e81)) <<= __noSuchMethod__) return 1e4;");
tryItOut("prototype = constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__.({a1:1}) in *) throw <x><y/></x>;");
tryItOut("with(3 ? ((p={}, (p.z = this)()).throw( /x/g )) @ __proto__-=++(-1) : (new (function  __iterator__ (__iterator__, constructor) { return <><x><y/></x></> } ).call(function(id) { return id })))if(constructor) {export __count__; } else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in \flet (constructor = <x/>, constructor = -1) constructor = *::*) M:with({__proto__: <x/>}){throw false; }");
tryItOut("L:if(<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>) { if (@foo) export get; else /*for..in*/for(const [__parent__, __count__] =  /x/  in <y><z/></y>) return;}\nM:if((function ([y]) { } instanceof @foo)) L:while((<x><y/></x>) && 0)const __count__ = true; else  if ((0x99)(this)) {continue M;continue ; } else {if(window) { if (__noSuchMethod__) {yield  \"\" ; }} else var prototype, prop; }\n");
tryItOut("do L:if((window.__defineGetter__(\"__parent__\", (([1,2,3,4].slice).call).call))) (<><x><y/></x></>); while((({ __iterator__: __proto__ }) = (__noSuchMethod__.constructor)) && 0);");
tryItOut("(4.);");
tryItOut("if(window -= this == <x><y/></x>.(*)) while(( /x/  != <x><y/></x>) && 0){<x><y/></x>export *; } else __proto__ = <><x><y/></x></>, constructor({__iterator__: (function ([y]) { })(), constructor: 1e4 }), <xxx {constructor}={constructor} />.(__proto__.valueOf(\"number\"));");
tryItOut("__iterator__ = delete;");
tryItOut("/*for..in*/L:for(((yield <y><z/></y>))((--new ([,])(this))) in constructor) {if(<y><z/></y>) {; } else yield __count__; }");
tryItOut("/*infloop*/do {yield prop, __count__; } while((<y><z/></y>)(constructor, <y><z/></y>));");
tryItOut("{function(y) { yield y; {}; yield y; } }");
tryItOut("(((function(q) { return q; })( '' ) for (__parent__.prop in <x><y/></x>) if (-3/0))).__defineSetter__");
tryItOut("L:if(prop.__count__) { if (constructor = null) {while((true) && 0){let constructor = this;yield; } }} else {/*for..in*/L:for(__parent__ = <x/> in window) {throw *::*; } }");
tryItOut("{window;export __iterator__; }");
tryItOut("/*for..in*/for(let constructor = (({ __parent__: ({ prop: ({ prototype: ({ __count__: [], constructor: [, __iterator__] }) }) }), prop: ({ prop: ({ function::__parent__: [__noSuchMethod__, ({ prototype: prototype })] }) }) }) = )\t.unwatch(\"prop\") in __iterator__ prototype .__count__ = window(/) {/*for..in*/for(const * /= <x><y/></x> in new false(__proto__)) {function::__noSuchMethod__{} }return (<x/> if (null)); }");
tryItOut("L: /*infloop*/L:do export prototype; while(<y><z/></y>);");
tryItOut("yield <><x><y/></x></>;\n;\n");
tryItOut("__noSuchMethod__, __noSuchMethod__;");
tryItOut("L: {if(__count__) export __parent__; }");
tryItOut("M:if((<x><y/></x>.( /x/ ))) (eval(\"@foo\", set));");
tryItOut("/*infloop*/do yield; while(*);");
tryItOut("L:switch(*) { default:  }");
tryItOut("let(prototype =  break .unwatch(\"[1,,]\").__parent__) ((function(){constructor = __noSuchMethod__;})());");
tryItOut("export __proto__");
tryItOut("if(<>@foo</>) null;");
tryItOut("{yield [z1]\ndo this while((<y><z/></y>) && 0);if(undefined) export __count__; else  if (__count__) /*for..in*/for([constructor, prototype] = *::* in __iterator__) {{}continue M; } }");
tryItOut("M:if(({ set function::prop __proto__ () { export *; }  })) { if (#1=[prototype].isPrototypeOf(* /= [1,,])) {if(prototype.__count__ = prototype = window) {return;yield; } else {export prototype;let constructor;\n } } else export *;}");
tryItOut("return __count__.isPrototypeOf(undefined);");
tryItOut("yield (-1)");
tryItOut("with({__count__: ( '' .isPrototypeOf(*::*))})var __proto__, __noSuchMethod__;");
tryItOut("M:if(('fafafa'.replace(/a/g, function  __count__ () { return; } ))) { if (/a/gi) {break M;try { throw <x/>; } finally { ; }  }} else {switch(#3={a:#3#}) { case  /x/ :  }*::*; }");
tryItOut("L:with(<><x><y/></x></>)//h\nlet __parent__ = *, prop;");
tryItOut("/*infloop*/for(<><x\t><y/></x></>; <><x><y/></x></>; __count__) {{} }");
tryItOut("null; const prop;");
tryItOut("[");
tryItOut("prop = __parent__;");
tryItOut("if((__noSuchMethod__.([[]]))) {yield;yield; }");
tryItOut("export __proto__\nL:with(@foo)([,,z1]);");
tryItOut("var __parent__, prototype = <x><y/></x>;");
tryItOut("/*infloop*/for(\nlet __count__; (uneval(<><x><y/></x></>)); (__proto__ = prop)) ");
tryItOut("switch(false) { case 4: function (__noSuchMethod__, __count__)true }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (-1)['__parent__'] in [z1]) export *;");
tryItOut("__parent__ = prototype;");
tryItOut("let (function::__proto__) { /*for..in*/\fL:for(let __count__ = [z1] in __noSuchMethod__) {yield  /x/ ;let 033; } }");
tryItOut("yield ;");
tryItOut("let (__noSuchMethod__ = <x/>, ({ __count__: __noSuchMethod__ }) = <x><y/></x>) { ; }");
tryItOut("if(<><x><y/></x></>.watch(\"__parent__\", Function)) {yield this; } else  if (Exception(__noSuchMethod__)) {<bbb xmlns:ccc=\"3/0\"><ccc:eee></ccc:eee></bbb>export prop; } else {prop = 3/0, __noSuchMethod__;gc }");
tryItOut("/*infloop*/while(false instanceof prop)if(<x><y/></x>) ({a1:1}); else  if (__count__) {yield; }");
tryItOut("let(prop, __noSuchMethod__) ((function(){<x><y/></x>; const prop;})());");
tryItOut("if(5.0000000000000000000000) return this; else {export __parent__; }");
tryItOut("let ( ) { yield; }");
tryItOut("let (__noSuchMethod__, function::prop) { while(((({ __noSuchMethod__: __parent__, prop: __iterator__ }) =  /x/g .propertyIsEnumerable(\"prop\"))) && 0){yield __proto__; } }");
tryItOut("let(prop, __count__ = (function  constructor (__iterator__, __noSuchMethod__)3).call(<><x><y/></x></>, try { return @foo; } catch(__parent__ if (function(){export constructor;})()) {  } , this)) { let(__count__) ((function(){try { yield; } finally { let constructor, __iterator__; } })());");
tryItOut("M:with({__iterator__: [11,12,13,14].map}){return this;\nconst prototype = [1,,], prop = *;\n }with({prop: <x><y/></x>.propertyIsEnumerable(\"prop\")}){Functionvar __proto__, prop; }");
tryItOut("L:if((({}).__lookupGetter__)(( /x/g .eval(<x><y/></x>)), <x/>[*::*])) { if (let __parent__ = <x><y/></x>.hasOwnProperty(\"__noSuchMethod__\")) break//h\n M;} else with(({a2:z2}).@*)/*for..in*/for(var __noSuchMethod__ = this in 1.2e3) throw let prop, __count__ = <><x><y/></x></>;;");
tryItOut("/*infloop*/M:for((uneval((let (__proto__, __count__ = <x/>) this.isPrototypeOf(*)))); /*\n*/({ __parent__: ({ __proto__: __iterator__ }) }) = @foo >>= (@foo , this); (({__parent__: ((function ([y]) { })() >>= 0/0)}))) continue ;");
tryItOut("M:while((<><x><y/></x></> >>>=<x/>) && 0){; }");
tryItOut("/*infloop*/M:for(let ( for (function::__iterator__ in <x><y/></x>)) <y><z/></y> = [<x/>].some((prototype).watch)++; <><x><y/></x></>().yoyo(*::*.valueOf(\"number\")); 0x99.isPrototypeOf(([15,16,17,18].sort(<y><z/></y>, <x/>.throw(<><x><y/></x></>))) && this.hasOwnProperty(\"constructor\") ? <x><y/></x>.__defineSetter__(\"__iterator__\", [1,2,3,4].slice) : function::function::__noSuchMethod__.(0/0))) const __noSuchMethod__, __proto__;");
tryItOut("if((<>(let (__iterator__ = 3/0) <><x><y/></x></>) .@ window.__defineSetter__(\"__proto__\", ({}).hasOwnProperty)</>.((p={}, (p.z = (__proto__ * undefined))())))) {let (__proto__) { function(q) { return q; } }let (__iterator__ = prototype, __parent__ = <x><y/></x>) { L:if(this) gc() else  if (*) return; }\t }");
tryItOut("return <x><y/></x>;");
tryItOut("__noSuchMethod__;{}");
tryItOut("return new ((<x/>).__defineSetter__)(<><x><y/></x></>, __proto__);");
tryItOut("__proto__ = <x><y/></x>, prop");
tryItOut("M:if(__parent__.prototype = @foo) { if ((<><x><y/></x></>.yoyo(<><x><</>))) {gc()switch(__proto__) { undefined, this } }} else { }\n");
tryItOut("/*infloop*/L:while(this)yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(undefined.constructor in prop = ([, , , ({ __iterator__: ({ prop: constructor, __iterator__: __noSuchMethod__ }) })] = function(id) { return id }.__defineSetter__(\"__parent__\", window.__defineSetter__(\"prop\", ({}).__lookupGetter__)))) {/*infloop*/for(var ({ __proto__: [__count__] }) = ((yield  '' ).__lookupGetter__(\"__count__\")); ([15,16,17,18].sort(({}).__lookupGetter__, (constructor.valueOf(\"number\")).__lookupGetter__(\"constructor\"))); {__noSuchMethod__ = constructor, constructor = <x><y/></x>;(function(q) { return q; }).apply }) gc()/*\n*/if(constructor %= {}) (__noSuchMethod__); else <x><y/></x> }");
tryItOut("\tlet (__count__, prototype) { gc() }");
tryItOut("<x/>;");
tryItOut("{with(function(id) { return id })let __proto__, __iterator__;return this; }");
tryItOut("L: return;");
tryItOut("/*infloop*/for(constructor; __parent__ for each (__iterator__ in [z1,,])[(new false(*))] , ([15,16,17,18].filter(*, <x/>)); (function(q) { return q; })()) return;");
tryItOut("if(((new ( \"\" )())((-3/0)[ /x/g ].throw(new (<y><z/></y>)(prototype, #3={a:#3#})).valueOf(\"number\")))) {switch(((prop = <><x><y/></x></>))) { default: case 7: [1,2,3,4].slicebreak;  } } else  if ([<x/> || ++this].filter(function  __count__ () { yield (function ([y]) { })() } )) {break ;with((yield *::*)){{} } }");
tryItOut("/*for..in*/for(var __iterator__ = ([[[,,z1]].sort(gc) for (<x><y/></x>['__proto__'] in window) if (<x><y/></x>)].sort(({}).hasOwnProperty)) in ({ prototype: __parent__ }) = true) {}");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*infloop*/for(__proto__; this; this) return;");
tryItOut("if((-0)) {{} }");
tryItOut("/*infloop*/do  while(<><x><y/></x></>.constructor = *);constructor;");
tryItOut("if(({ __proto__: ({ __parent__: ({ constructor: __count__ }), __iterator__: [__count__, , , prop, prototype] }), __count__: ({  : __iterator__, prop: ({ __noSuchMethod__: __iterator__ }) }) }) = __parent__) {( /x/g );yield window; } else {do {export *; } while((__noSuchMethod__ = (eval).call(true, __iterator__,  /x/g )) && 0); }");
tryItOut("M:if(@foo.__defineSetter__(\"prototype\", gc)) {break M; } else  if (*::* ? <><x><y/></x></> :  /x/ ) __proto__");
tryItOut("/*for..in*/L:for(let constructor in <x/>) {}");
tryItOut("/*for..in*/for(let prop in  /x/g ) {export *;yield; }");
tryItOut("/*for..in*/L:for(var [__parent__, prop] = ([, , , ] = 0) in __noSuchMethod__.__lookupSetter__(\"prop\")) return  /x/ ;");
tryItOut("{}");
tryItOut("__iterator__");
tryItOut("let(constructor = //h\n<><x><y/></x></>.__defineGetter__(\"prototype\", (eval).apply)) ((function(){return;})());");
tryItOut("export function::constructor");
tryItOut("this\n{}\n\n");
tryItOut("/*for..in*/for(let __count__ = (function  __count__ (prototype, prototype) { return arguments } )(<y><z/></y>) in <x/>) {__parent__, __iterator__;/*for..in*/M:for(let prop = .2 in <x/>) {prop, __count__ = null; } }");
tryItOut("with({__proto__: this}){; }");
tryItOut("do { { yield (function  __noSuchMethod__ (__count__) { return 5.0000000000000000000000 } ).call(((p={}, (p.z = undefined)())), true) }  } while((\n[1,,] ? \n__count__ : prototype['constructor']) && 0);");
tryItOut("/*for..in*/for(const prop = (.2)() in __iterator__ = prototype) {\nyield *; }//h\n");
tryItOut("if((*::*.isPrototypeOf(0/0))) {var prototype; } else __count__ = window;");
tryItOut("let (__count__ = arguments) { /*infloop*/for(; (-1); this) (1 for (x in [])) }");
tryItOut("L\t: var prop = function(id) { return id };if(<><>undefined.__iterator__</></>) { if ((default: let __noSuchMethod__, getter;).call(prototype = __count__, new (new Function)())) let __proto__ =  \"\" , __count__ = undefined;\nreturn;\n} else var prop, constructor\ngc()");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\",  /x/g )) {; } else {const constructor = *::*, __proto__ = true\n }");
tryItOut("L:if(<y><z/></y>.prop) { if (prototype.__noSuchMethod__ getter= function(y) { yield y; {}; yield y; }) {return; } else {yield undefined;\ngc()\nthrow function ([y]) { };return this; }}");
tryItOut("with({}) { for(let y in [5,6,7,8]) yield (new Object(const __noSuchMethod__ = prototype, __parent__.__noSuchMethod__)); } ");
tryItOut("prop = setter;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in gc()) {/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in ([[]].valueOf(\"number\"))) {const prop, __iterator__;throw __iterator__; }/*infloop*/M:do <x><y/></x>; while((p={}, (p.z =  '' )())); }");
tryItOut("/*for..in*/M:for(let __iterator__ in b) {__count__ = <><x><y/></x></>;yield <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in __iterator__ = <y><z/></y>) {export *;yield <y><z/></y>; }");
tryItOut("while((Boolean(@foo, [,,]).prototype = (constructor.__lookupGetter__(\"__iterator__\"))) && 0)var __proto__;");
tryItOut("export constructor\n");
