
tryItOut("switch( \"\" ) { default: break; continue M;break; gc()(__proto__);break; const __iterator__ =  /x/g ;break;  }");
tryItOut("if(RegExp((uneval(__iterator__)))) switch() { case 8: export *;break; default: break; prop, __proto__;break;  } else  if ((let (prop = *::*)  /x/g )) {var __iterator__;Function }");
tryItOut("M:if( /x/g .isPrototypeOf(undefined)) {} else {/*for..in*/for(let __noSuchMethod__ = (new (1e-81)(*)) in @foo) {} }");
tryItOut("let prop, constructor = eval(\"undefined\", window.@foo);");
tryItOut("/*infloop*/for(var ({ __proto__: ({ __iterator__: constructor, prop: __parent__ }), prop: ({ constructor: constructor }) }) = (((-1) in __noSuchMethod__)[*::*]); <x><y/></x> -= [[]]; #2=#3={a:#3#}) export __parent__;");
tryItOut("{break ; }");
tryItOut("/*for..in*/for(constructor = [1,,].__lookupGetter__(\"function::constructor\") in function::constructor|= '' ) {var prop = <x/>, __iterator__;let __iterator__; }");
tryItOut("/*infloop*/do {switch(<x><y/></x>) { default:  }yield <><x><y/></x></>; } while(<y><z/></y>);");
tryItOut("{yield [[1]];if(((prototype.__noSuchMethod__ = this).propertyIsEnumerable(\"__parent__\"))) {/*for..in*/for(var [__noSuchMethod__, {}] = <x><y/></x> in true) break ;return; } }");
tryItOut("/*for..in*/for(var (__count__) in *) __parent__ const __proto__;");
tryItOut("let([] = new ((({__parent__ getter: null, constructor getter: (function  constructor (__count__) { return *::* } ).call })))(), [({ __count__: __iterator__, __parent__: __noSuchMethod__ }), __proto__, , [, [constructor, ]], ]) ((function(){throw StopIteration;})());");
tryItOut("return;");
tryItOut("/*for..in*/L:for(window['constructor'] in ((function(y) { yield y; L:if(*) {export __parent__;return; } else  if (<><x><y/></x></> @ __proto__) {/*for..in*/for(let __parent__ in false) {throw  \"\" ;{} } } else L:if( '' (<x><y/></x>, prototype)) break ;; yield y; })(3)))__proto__ = * || [[1]]");
tryItOut("yield false");
tryItOut("switch(window) { default: this; }");
tryItOut("if(([11,12,13,14].some)) { if (__noSuchMethod__%=new RegExp( /x/ )) {yield;return; } else {return <x/>; }}");
tryItOut("\n");
tryItOut("/*infloop*/while(({ __noSuchMethod__: ({ __parent__: __proto__ }), __count__: ({ __iterator__: __noSuchMethod__ }) }) = (*::* != __iterator__).eval(-3/0)){ \"\" .propertyIsEnumerable(\"__proto__\"); }");
tryItOut("/*for..in*/M:for(const <x><y/></x>['__iterator__'] in (((this.__defineGetter__(\"prototype\", function  constructor (prop, constructor)((__iterator__)[false]))))((eval(\"return @foo;\", \n__proto__.prop))))){var prototype, __count__ = *; __proto__if(prototype{{} } }");
tryItOut("L:if((p={}, (p.z = .isPrototypeOf(new (/a/gi)( /x/ )))())) {function(q) { return q; } } else  if ((<x><y/></x>\n) / this &= RegExp([11,12,13,14].filter)) {break ;export *; } else {/*for..in*/for(__count__ = new Boolean(undefined) in this) break ; }");
tryItOut("do export *; while((eval(\";\", undefined)) && 0);");
tryItOut("with({}) prototype = prop;");
tryItOut("for(let y in []);");
tryItOut("{with(*) const constructor\ndo {var prototype; } while((window) && 0);/*infloop*/for(prop = [,]; <x/>; (<x>)<[1] y/*/></x>) {export prop;\f } }");
tryItOut("/*infloop*/while((this.__defineSetter__(\"__noSuchMethod__\", prop) for each (__parent__ in <x><y/></x>) for each (prototype in prop) for each (__proto__ in <y><z/></y>))){let __proto__, __count__;\n<x><y/></x>\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  /x/g .valueOf(\"number\")) /*for..in*/for(var __noSuchMethod__\f in __count__) {gc(); }");
tryItOut("/*for..in*/for(let (__proto__) in ((function  __proto__ () { /*for..in*//* nogeckoex bug 349964 */M: for  each(let __count__ in <y><z/></y>) {export *;\n(<><x><y/></x></>); } } )((<x><y/></x>.hasOwnProperty(\"__proto__\"))))){yield *; }");
tryItOut("with(__count__.((({__noSuchMethod__ setter: function(q) { return q; } }))))this.zzz.zzz;");
tryItOut("{__noSuchMethod__ }");
tryItOut("{const __proto__, __proto__\ndo ; while((*::*) && 0); }");
tryItOut("/*infloop*/do const __proto__; while(__iterator__.__defineGetter__(\"__proto__\", gc));");
tryItOut("/*infloop*/while(((<y><z/></y>).__defineSetter__)() <= <x><y/></x>['__parent__'] = (p={}, (p.z = <y><z/></y>)()))/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in 033) {let __parent__ = prop, constructor;var __noSuchMethod__;\t }");
tryItOut("with((#2=({__noSuchMethod__: eval(\"(const __iterator__ = <x><y/></x>, constructor)\",  '' ())})))with({prop: new ((3/0).call)()})( /x/ [<y><z/></y>]);");
tryItOut("export *");
tryItOut("return let (__iterator__, __parent__ = 0x99) <x/>;");
tryItOut("if((__noSuchMethod__ || [z1,,])) {continue ; } else  if (prototype = <><x><y/></x>\f</>) {__iterator__;throw *; } else export __parent__;");
tryItOut("/*infloop*/while(<x\f><y/></x> @ .2)return;");
tryItOut("/*infloop*/while(<x><y/></x>){ }");
tryItOut("/*for..in*/for(let __iterator__ in ((Function)((uneval((<y><z/></y>)[\r<><x><y/></x></>]))))){return <x><y/></x>.(<x/>);return (__parent__.__proto__); }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:for(<x/>; (__parent__ = __proto__.constructor = 'fafafa'.replace(/a/g, [1,2,3,4].map)); (window().valueOf(\"number\"))) {L:switch(([11,12,13,14].sort)) { default: break;  }\n{return <><x><y/></x></>; }var constructor, __proto__ = <x><y/></x>;/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in 1.3) {}\f }");
tryItOut("{}\n__proto__, __parent__;\n");
tryItOut("/*infloop*/while(__noSuchMethod__)let(__proto__ = __noSuchMethod__.(true)) ((function(){return __iterator__.prop getter= /a/gi;})());");
tryItOut("yield;\nlet constructor;\n");
tryItOut("if((new ((uneval(__count__.watch(\"constructor\", function  function::__iterator__ ()1e+81))))())) { if (\f(eval(\"this\", <x><y/></x>))) -0;} else {export *; }");
tryItOut("yield window;");
tryItOut("throw constructor\n\n");
tryItOut("/*for..in*/for(const __iterator__ =  in prop) {yield;; }");
tryItOut("M:if(prop = __parent__) (<x/>); else  if (([1,2,3,4].map)) return  '' ; const constructor; else {continue L;return; }");
tryItOut("if(1e4 & undefined && this /= -0) { if (this\n) {do {gc() } while((<x/> >>= <y><z/></y>) && 0);L:if(this) { if \f(-1) {var __parent__;\f__count__, constructor; } else {const  = <x/>, prop;export *; }} }} else {yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let constructor in ((Function)( '' )))gc()");
tryItOut("gc()\nreturn prototype;{}");
tryItOut("{if((({}).__lookupGetter__).call( '' , window)) { if (export *) {}} else {continue L; } }");
tryItOut("/*infloop*/for(<><x><y/></x></>;  \"\" ; *::*) {throw ({a1:1});yield; }\n");
tryItOut("continue M\nM:if(this) (033); else  if (*::*) {true; }");
tryItOut("(new Function(\"break ;\"))\nreturn;");
tryItOut("if(arguments.hasOwnProperty(\"__iterator__\")) {L:if(this.__defineGetter__(\"prop\", ({}).hasOwnProperty)) {{}if(function(y) { yield y; ; yield y; }) prototype else  if (eval(\"\", <y><z/></y>)) {gc() } } } else  if ((window).call(this, )) return; else yield true;\ncontinue L;\n");
tryItOut("return  /x/ ;");
tryItOut("");
tryItOut("for(let y in [5,6,7,8]) gc");
tryItOut("let(prototype = ((1 for (x in []))).call(void <\fx><y/></x>, , prop)) { with({}) let(__parent__) { export __noSuchMethod__;");
tryItOut("let __count__, constructor = *;/*infloop*/while((/a/gi @ <x/>) ? @foo : [null if (undefined)])export constructor;");
tryItOut("/*for..in*/for(const function::__parent__.__count__ in ((function (this.zzz.zzz;) { return (new (Function)([11,12,13,14].map, constructor)) } )(<y><z/></y>))){#3={a:#3#};{break M;var __parent__; } }");
tryItOut("/*infloop*/for([, [prop, [__parent__, prototype]], ({ __proto__: __iterator__, __noSuchMethod__: ({ __proto__: __count__ }) }), x::__proto__, ] = (<x/>)(<//h\n><x><y/></x></>, window); false == <x/>.\fwatch(\"__count__\", Function); (this.prop)) [1,2,3,4].map");
tryItOut("function(q) { return q; }");
tryItOut("/*infloop*/while(([,,].eval(prototype))[<x><y/></x>]){__parent__ = [], __count__; }");
tryItOut("/*infloop*/while(__proto__){(return true;); }");
tryItOut("throw __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:for(var ({ prototype: ({ __count__: __noSuchMethod__, prototype: ({ __parent__: __parent__ }) }), __iterator__: __parent__ }) = __iterator__.prop; 'fafafa'.replace(/a/g, gc) .@ (delete.__parent__ = <><x><y\f/></x></>); eval(\"(function(q) { return q; })(({ function::this: __count__ }))\", this.__defineGetter__(\"constructor\", /a/gi))) L: {const __iterator__, __proto__;yield  /x/ ; }");
tryItOut("if(({prop: <><x><y/></x></>.prop = *::*})) { if (((p={}, (p.z = window)()))) {export *;/*for..in*/for(let __noSuchMethod__ in ((({}).hasOwnProperty)(undefined)))return <x/>; } const prop;} else L:if((__count__.constructor = <y><z/></y>)) { if (#1=[#1#]) \n{/*infloop*/for(<><y/>/x>; prototype; <x><y/></x>) \fyield prop; } else return @foo;}");
tryItOut("with({}) return;");
tryItOut("/*for..in*/for(var __proto__ in ((function  __parent__ (__noSuchMethod__) { return  /x/g  } )(__proto__ = *::*)))/*for..in*/for([__iterator__, __parent__] = <x><y/></x> in constructor) export *;");
tryItOut("this.zzz.zzz;");
tryItOut("let(__proto__ = <x/>[<><x><y/></x></>], __iterator__) { this.zzz.zzz;");
tryItOut("while(() && 0)let prototype; const prop;");
tryItOut("/*infloop*/for('var __noSuchMethod__ = new /a/gi(<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>); (<bbb xmlns:ccc=\"__count__\"><ccc:eee></ccc:eee></bbb>.constructor) <<= 'fafafa'.replace(/a/g, <></>);  (__parent__ = null) (eval(\"gc()\", ( /x/ .propertyIsEnumerable(\"__iterator__\")))[__count__ = __iterator__])) {{if(<x/>) {yield; } } }");
tryItOut("if(eval(\" \\\"\\\" \", <x><y/></x>)) {{} } else  if () {return @foo; } else var __proto__ = window, __count__ = return;;");
tryItOut("M:switch((new 'haha'.split(__count__))) { default:  }");
tryItOut("M:if(__proto__.(*::*.__lookupGetter__(\"__proto__\"))) { get prop prototype (prop)\t { yield this .@*:: function ([y]) { } }  }");
tryItOut("L: {break M; }");
tryItOut("with({}) ");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*infloop*/do {gc() } while([z1]);/*for..in*/L:for(null in (([1,2,3,4].slice)(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)))yield;");
tryItOut("/*for..in*/for(const [prop, __iterator__] = this in *) export *");
tryItOut("/*infloop*/L:do while(((@foo.propertyIsEnumerable(\"prop\"))) && 0)yield; while(eval(\"['fafafa'.replace(/a/g, function  prototype (__noSuchMethod__) { const {var __proto__ =  \\\"\\\" , __proto__; }; } )].filter([1,2,3,4].slice)\", (RangeError(__parent__ = constructor, prototype))));");
tryItOut("return (!(prop = 3/0)[[11,12,13,14].sort]);");
tryItOut("with(__parent__){return 1e81;var prop,  ; }");
tryItOut("/*infloop*/for(var constructor; (null.valueOf(\"number\")); (4.).watch.unwatch(\"constructor\")) {/*for..in*/for(var  /* Comment */<x><y/></x> === <x><y/></x>.prop in __proto__.__proto__ = prototype = -1) {break M; } }");
tryItOut("{/*for..in*/for(let __iterator__ in x::prop) {return <y><z/></y>; \"\" ; }/*infloop*/do yield <x><y/></x>; while( /x/g .throw(prototype)); }");
tryItOut("falseif(*::*.constructor = <x/>) { if (false.__lookupSetter__(\"constructor\") ? export prototype : (<><x><y/></x></>).isPrototypeOf(new [1,2,3,4].map())) <x><y/></x>} else {yield true; }");
tryItOut("with(new Boolean(<{constructor\t}><ccc:ddd> </ccc:ddd></{constructor}>))let (__iterator__, prototype) { /*for..in*/for(var __proto__ in ((<><x><y/></x></>)((function  prototype (__proto__) { ; } )(this, <y><z/></y>))))gc() }");
tryItOut("/*infloop*/while(<><\tx><y/></x></>){}");
tryItOut("__count__");
tryItOut("with(__count__ = [1,,])break M\nif(<x/>) const prop = 0.1; else  if ([,]) continue M; else {function (prototype) { return  }  }");
tryItOut("if(new function  prototype (__iterator__, set) { return \f__parent__.__count__ getter= (1 for (x in [])) } (__iterator__ for (__parent__ in @foo))) /*infloop*/do {return; } while(this.prototype); else  if (new ((4..__defineGetter__(\"prototype\", Math.pow)).watch)(* & ({a1:1}), prop = (prototype.prop = -1))) (\neval(\"__proto__\", <y><z/></y>));");
tryItOut("({a1:1})\n__proto__;");
tryItOut("if(eval(\"this\", (<><x><y/></x></>.__defineSetter__(\"__iterator__\", function (__iterator__, constructor) {  } ).watch(\"prop\", gc)))) { if (new (0x99 in <\t><x><y/></x></>.unwatch(\"constructor\"))) {return 4.return <y><z/></y>; }} else {{}for(let y in [5,6,7,8]) throw <y><z/></y>; }");
tryItOut("gc()");
tryItOut("if(let (prototype = <x><y/></x>) 1e-81) {{}export *; }");
tryItOut("{/*infloop*/for((null).call(new (function  __iterator__ (prototype) { yield <x><y/></x> } )(#3={a:#3#}), ); (function  __iterator__ (constructor, __proto__) { yield  ''  } )((5.0000000000000000000000.yoyo(<x><y/></x>))); new (((null).__defineSetter__)())()) this;continue L; }");
tryItOut("return @foo");
tryItOut("/*for..in*/for(let [__count__, __proto__] = eval(\" /x/g .eval(false)\", ({} |= @foo)) in [] = ((uneval( '' )))) {/*for..in*//* nogeckoex bug 349964 */L: for  each(let delete 1.2e3.unwatch(\"prop\").prop in (yield <x/>)) ; }");
tryItOut("if(<><x><y/></x></>) {(false); } else  if (window) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__.__proto__ in 1e-81) 'fafafa'.replace(/a/g, gc), *");
tryItOut("if(((new Function).watch).call(new window(this) &= -3/0.isPrototypeOf(({})), @foo.valueOf(\"number\")) === <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {L:if(<x/>) { if (arguments .@x:: <y><z/></y>) __noSuchMethod__; else {; }} } else {gc() }");
tryItOut("if(__parent__ = undefined) {((1 for (x in []))).apply } else M:if([,,z1].@foo) { } else  if ((uneval(window))) export prototype; else {yield;prop, function::__count__; }");
tryItOut("\n");
tryItOut("L: (<y><z/></y>);");
tryItOut("M:if( /x/g ) {return @foo;gc() } else /*infloop*/for(var __proto__ = null.constructor = __count__; ( \"\" .__count__ = [,,z1]); <x/>) {export __count__; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in (<x><y/></x> & <x><y/></x>)) {({}).hasOwnPropertycontinue ; } } const __parent__;");
tryItOut("/*for..in*/for([__iterator__, constructor] = (this ? false :  /x/ ) in (prop.prototype)) for(let y in []);");
tryItOut("with({}) { ; } ");
tryItOut("if(<x><y/></x> + window) {/*for..in*/L:for([prototype, __count__] = (--undefined) in [z1]) var prop = 1e-81, constructor = #1#; } else  if (5.0000000000000000000000 >> <x><y/></x>) export __noSuchMethod__");
tryItOut("<><x><y/></x></> !== (function ([y]) { })().__iterator__['__proto__']\nyield;\nif([1,,] >= <><x><y/></x></>) { if ([undefined >= <><x><y/></x></>].map(function(q) { return q; })) {gc()yield <x><y/></x>; } else {(1e+81); }}\n");
tryItOut("yield");
tryItOut("/*infloop*/for(<x/>; function(id) { return id }; __noSuchMethod__.__noSuchMethod__) {thisexport prop; }");
tryItOut("export __count__;let __parent__ = __proto__, __iterator__;");
tryItOut("L:if(<y><z/></y>) {export __proto__;export *; } else  if (this) {prop = <><x><y/></x></>, * = <><x><y/></x></>; }");
tryItOut("/*infloop*/do /*infloop*/for(var __proto__; (__parent__.__parent__ setter= /a/gi); *::*) window; while( '' );");
tryItOut("/*for..in*/for(let {return; } in <><x><y/></x></>) {}");
tryItOut("/*infloop*/for(__parent__; <y><z/></y>; this.__defineGetter__(\"__proto__\", function(id) { return id })) { }");
tryItOut("/*infloop*/M:for((constructor > null); ({ __parent__: [[, __iterator__, prototype, prototype], ({ prop: ({ __parent__: prototype }), __noSuchMethod__: __iterator__ }), ({ __proto__: [__parent__, prop, ] })] }) = (1.3[<><x><y/></x></>]) << this.__defineSetter__(\"constructor\", function(y) { yield y; {}; yield y; }).propertyIsEnumerable(\"__iterator__\"); new __iterator__ = true()) {export *;const __iterator__; }");
tryItOut("if(<x/>) let __count__ = {}, __proto__ = <><x><y/></x></>; else  if (<y><z/></y>) throw  /x/g ;");
tryItOut("/*for..in*/for(let prop = [*::*] in <x><y/></x>) {; }");
tryItOut("export __iterator__;yield\nM:if(<y><z/></y> ? ({a2:z2}) : __noSuchMethod__) {gc() } else  if (<y><z/></y>.valueOf(\"number\")) yield .2; else {let prop = <><x><y/></x></>; }yield;");
tryItOut("/*infloop*/do {(window);export __count__; } while(*::*);");
tryItOut("with(__noSuchMethod__ = 3)return\ngc()");
tryItOut("/*infloop*/for((eval(\"export *;\", <><x><y/></x></>)); <x/>; ((<x/>))--) {{}{} }yield;");
tryItOut("/*for..in*/for(__parent__(__parent__) in this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) let(prototype, __parent__) { throw StopIteration;");
tryItOut("(window);let constructor;");
tryItOut("let (__parent__ = __count__) { (<><x><y/></x></>); }");
tryItOut("with({__count__: (0x99)[#1#]})Function");
tryItOut("if(prop = true) (*::*); else prop const __parent__;");
tryItOut("/*infloop*/while(*::*){return;export *; }\n");
tryItOut("export *\n");
tryItOut("<x><y/></x>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in 033) {yield; }");
tryItOut("{{} }");
tryItOut("L:if(([5.0000000000000000000000].filter(Math.pow))) /*infloop*/M:for(__count__; __parent__; @foo) {[1,,]; } else  if (@foo) {let __noSuchMethod__, constructor = <><x><y/></x></>;/*infloop*/M:for(const ({ __noSuchMethod__: __count__, __noSuchMethod__: __proto__ }) = ({ get __parent__(__parent__, __proto__)__parent__,  get prototype(__parent__) { yield this }  }); <><x><y/></x></>.isPrototypeOf(<y><z/></y>); [<y><z/></y>].some(((1 for (x in []))).call)) {0.1; } } else let(prototype = 0/0) ((function(){;})());");
tryItOut("/*infloop*/M:while(new (constructor)((RangeError(__count__, <><x><y/></x></>)), false) *= )<xxx {__proto__}={<><x><y/><\t/x></>} /> const prop;");
tryItOut("if(([z1,,].__lookupGetter__(\"prototype\").prop = (get.__parent__ setter= (function ()prop).apply))) __parent__ = *::*; else  if (new (<x/> <= prop)()) {{}[]; } const prototype;");
tryItOut("for(let y in [5,6,7,8]) break M;\nreturn 5.0000000000000000000000;\n\f");
tryItOut("if(({prop: ((null)( /x/ ,  /x/g )),  get __iterator__ __parent__ (__parent__, __iterator__) { yield <>\t<x><y/></x></>.watch(\"__iterator__\", function(y) { yield y; export *;; yield y; }) }  })) { if (__parent__ = undefined) /*infloop*/do let __proto__ = __parent__, __parent__; while(<><x><y/></x></>); else yield #1=[#1#];}");
tryItOut(" '' ;");
tryItOut("return; const (prototype);");
tryItOut("let (__count__ = null) { {; } }");
tryItOut("{false(); }");
tryItOut("var __iterator__ = new (eval)(<x><y/></x>) >>> __count__.constructor, __iterator__ = (3.141592653589793)[ '' ]\ngc");
tryItOut("let __proto__, prototype = <x><y/></x>\n({ prop: __noSuchMethod__, prop: __noSuchMethod__ })");
tryItOut("{}");
tryItOut("try { <x/>; } catch(__count__ if yield *::*) { yield; } ");
tryItOut("if(\nnull) { if (this) throw undefined; else {{} }}");
tryItOut("/*for..in*/for(let arguments in ((Math.pow)(new <x><y/></x>.yoyo(__proto__, prototype)(<x/> !== <><x><y/></x></>)))){L: {/*for..in*/for(var __noSuchMethod__ = <y><z/></y> in *) new Function }L:if( '' ) 'haha'.split else  if ( \"\" ) let constructor, __parent__; else constructor; }");
tryItOut("(4.);");
tryItOut("with({}) return  '' ;");
tryItOut("/*infloop*/while( /x/ .\n__parent__)L: yield <><x><y/></x></>;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for([({ __parent__: ({ __proto__: ({ prototype: ({ __iterator__: ({ prop: prototype }) }), prop: ({ __parent__: __parent__.__proto__, __parent__: ({ __noSuchMethod__: prototype }) }) }) }), __noSuchMethod__: ({ __iterator__: __parent__, __noSuchMethod__: ({ __iterator__: ({ __count__: ({ __noSuchMethod__: [], __noSuchMethod__: ({ constructor: prototype, constructor: constructor }) }), function::__noSuchMethod__: __noSuchMethod__ }) }) }) })] = false.prop.unwatch(\"prop\"); .eval(function ()<x/>()); ({__proto__: prop.__noSuchMethod__ = x::__proto__})) (@foo);");
tryItOut("{}");
tryItOut("if([,]) yield; else {}");
tryItOut("(__noSuchMethod__);");
tryItOut("do {throw <x><y/></x>; } while((((this.__defineSetter__(\"prop\", __noSuchMethod__)) %= prototype-=@foo)) && 0);return");
tryItOut("switch(<><xxx {__proto__}={*} /></>) { case 4: /*infloop*/L:for(var ({ prototype: try {  } finally { export *; } , function::prop: ({ constructor: prop }) }) = (this.zzz.zzz += <><x><y/></x></>.propertyIsEnumerable(\"__iterator__\")); (<y><z/></y>.__lookupSetter__(\"prop\")); (yield <><x><y/></x></>)) yield;{}default: break; case 2: let prototype = false, prototype;break; if(constructor) { if (<><x><y/></x></>)  else return;} }");
tryItOut("M:if(__iterator__ = ( /* Comment */window)) {{} } else  if ((1 for (x in []))) gc() else {yield @foo; }");
tryItOut("/*infloop*/while(this)return window;");
tryItOut("this.zzz.zzz;");
tryItOut("M:switch(<><x><y/></x></>) { case 8: let prop = true; }");
tryItOut("while((*::*) && 0)continue ;");
tryItOut("/*infloop*/do {export *;do /*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in [[]]) <x><y/></x>; while((this < null) && 0); } while(this.zzz.zzz);");
tryItOut("/*for..in*/for([constructor, __parent__] = __noSuchMethod__ = eval(\"@foo\", <x/>) in  /x/  = (__noSuchMethod__.__count__ = -3/0)) gc()");
tryItOut("break M\n\nyield __parent__;\n");
tryItOut("if((new Function([11,12,13,14].filter ? /a/gi : ([true].map(function(y) { yield y; throw 1e-81;; yield y; }))))) {if(@foo / window) {throw false; } else  if ( set __parent__(prototype) { yield __count__.(((__proto__)(*, <><x><y/></x></>))) }  && <x><y/></x>.(undefined)) {(this); } else continue ; } else  if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {const prop =  '' ;; } else with(([z1]++ * undefined)){;export *; }");
tryItOut("do {while((this) && 0){return this; }(\n); } while((new Number()) && 0);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype.__proto__ in  '' ) {/*for..in*/L:for(__parent__ in *::*) {} }yield <x><y/></x>; }");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("/*for..in*/L:for(const __iterator__ in this.zzz.zzz) yield 1.3.*.watch(\"prop\", function  __proto__ () { export *; } );");
tryItOut("if(prototype = 0/0.__defineSetter__(\"__iterator__\", 0x99)) {; } else {( \"\" ); }");
tryItOut("if(__noSuchMethod__.__parent__) {} else  if ( /x/ .unwatch(\"constructor\")--) yield;");
tryItOut("M\t:if(((({})).call).apply) <x><y/></x>; else {let __iterator__ = <x><y/></x>; }");
tryItOut("<xxx>{constructor}</xxx>");
tryItOut("{((yield <x><y/></x>.hasOwnProperty(\"prototype\")));/*infloop*/do { } while(@foo); }");
tryItOut("prop, __iterator__\nexport *;\n");
tryItOut("if(({ get __count__(prop, __proto__) { yield window } , constructor getter: ('haha'.split).apply })) /*for..in*/for(let __iterator__ in ((gc)(++ '' )))__parent__, __count__; else  if (prop.__noSuchMethod__ setter= (/a/gi)\f.call) if(*) 'haha'.split");
tryItOut("return;");
tryItOut("if(__proto__ setter: gc.isPrototypeOf(( /x/ .propertyIsEnumerable(\"__iterator__\")))) { if (\t[[]]) {}} else var *::*;");
tryItOut("switch((#1=[#1#].propertyIsEnumerable(\"__parent__\")--)) { default: /*for..in*/for(__noSuchMethod__ in undefined) {function () { return this } {} } }");
tryItOut("/*for..in*/for(var (( /x/g  || <><x><y/></x></>))( /x/ ) in (((Error()))( ? <x><y/></x>.propertyIsEnumerable(\"__iterator__\") : * for (__iterator__ in prop))))return;");
tryItOut("M:with((* = __proto__-=<x><y/></x>)){if((prototype = @foo)) Math.pow else  if (__proto__ = yield <><x><y/></x></>) {const __noSuchMethod__;{} } }");
tryItOut("/*for..in*/M:for(let [prop, prototype] = ((yield [1].throw(<x><y/></x>))) in <x/>.__defineSetter__(\"__noSuchMethod__\", __proto__)) {return; }");
tryItOut("/*infloop*/for(const __iterator__ = [__iterator__ |= <x><y/></x> if ((prop = __noSuchMethod__))] for each (__count__ in +1e-81) for each (__iterator__ in (prototype.__defineGetter__(\"__count__\", function  constructor (prop) { return <y><z/></y> } ))) if (null); this;  /x/g ) /*infloop*/while(<><x><y/></x></>){var constructor, prototype; }");
tryItOut("/*for..in*/for(var [prototype, __count__] = ({} % #1=[#1#]) in (yield <><x><y/></x></>)) {continue ;gc() const constructor; }");
tryItOut("yield {}\n");
tryItOut("let (__proto__) { let prop =  /x/g , constructor = false; }");
tryItOut("<x><y/></x>;");
tryItOut("return;\nyield;\n");
tryItOut("switch(#0=window) { default: break; export *;break; case 9: let constructor, prototype = [];/*for..in*/for(const prototype in constructor) {({}); }case 1: if(({a2:z2})) return; else return -3/0; }");
tryItOut("prototype = prototype;");
tryItOut("M:if((<><x><y/></x></> >= <x><y/></x> || function ([y]) { })--) { if (true.__parent__ = ((new Function(\"gc()\")))(<y><z/></y>)) {break ; }} else while(((.propertyIsEnumerable(\"__iterator__\"))) && 0)if(__count__) { if (<x><y/></x>) {const __noSuchMethod__, prototype = *; }} else {prop }");
tryItOut("return;M:if(1.2e3) /*for..in*/for(const constructor =  \"\"  in -0) __count__ = <><x><y/></x></>, __iterator__ = false; else  if ([,,] -= <x/>.hasOwnProperty(\"__noSuchMethod__\")) {}\nreturn; else {{}<!--yy--> }");
