tryItOut("L:switch(__count__ = <y><z/></y>) { default: gc()break; case 1: L:if(<><x><y/></x></>) yield; else  if (false) gccase __iterator__.(this): case 1e+81(1.2e3, <x><y/></x>): break;  }");
tryItOut("L: while((3.141592653589793) && 0)return <x/>;");
tryItOut("/*infloop*/for((this.zzz.zzz); new ((<x><y/></x>).call)(undefined, *); #3={a:#3#} &  '' ) {yield;throw  '' ; }\n/*infloop*/do break L; while( /x/g \n);\n");
tryItOut("if((new let (__parent__ = 1e-81) <><x><y/></x></>((<><x><y/></x></>.@foo), <x/>))) throw StopIteration;");
tryItOut("return 0.1;");
tryItOut("if((__count__ = this.__defineGetter__(\"constructor\", \rnew Function)))  else  if (prototype) { }");
tryItOut("do function (prototype)this while((<x/>) && 0);");
tryItOut("if(<x><y/></x>) {yield; } else ;");
tryItOut("switch(__noSuchMethod__.(1e+81)) { default: case ((<><x><y/></x></>)) ^ __iterator__ = __noSuchMethod__++: /*for..in*/M:for(let __count__ = <x/> * this in <x><y/></x>) {yield @foo;throw 033; }break; case 9: break; case (__noSuchMethod__ = set): continue ;break; return *::*;break; case 4: /*infloop*/L:for(prototype.(<x/>); (({a2:z2})[<y><z/></y>]); __proto__ = this) throw __noSuchMethod__;break; case 7: (1e+81);break;  }");
tryItOut("return undefined;");
tryItOut("return  /x/ ;");
tryItOut(";\ngc()\n");
tryItOut("/a/gi const prototype;");
tryItOut("L:with({__iterator__: (prototype)})\twhile((prop) && 0){false; }");
tryItOut("with({}) { for(let y in [5,6,7,8]) throw StopIteration; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for each (constructor in (<y><z/></y> if (<y><z/></y>))) for  each(__proto__ in []) /*infloop*/for(let constructor = false; __proto__; prototype) {;yield; }");
tryItOut("/*infloop*/M:for(<x/>; #1=[#1#]; *::*) export *;prototype;");
tryItOut("with({}) { with({}) try { return; } catch(prop if (__noSuchMethod__ = constructor)) { return <><x><y/></x></>; }  } ");
tryItOut("'");
tryItOut("return #1#;");
tryItOut("/*infloop*/while((#2= /x/ ))/*infloop*/for(window; <><x\t><y/></x></>; undefined) <x><y/></x>;");
tryItOut("/*infloop*/for(let ({ __parent__: __proto__, __proto__: __noSuchMethod__ }) = this.__proto__; [prototype].filter(eval); new Object()) <><x><y/></x></>\n");
tryItOut("if((([11,12,13,14].some) if ([[]]))) L: {break ;[,,] } else {return throw [z1];; }");
tryItOut("/*infloop*/for(__count__ = null; __proto__; window =  /x/g ) false;");
tryItOut("/*infloop*/for(const constructor = <x/>; [new RegExp(<><x><y/></x></>) for each (prototype in <><x><y/></x></>) if (<x/>)]; this.zzz.zzz) __proto__\n/*infloop*/for(__noSuchMethod__ = 0/0; __proto__; __iterator__) {gc()__parent__; }");
tryItOut("/*infloop*/for(__proto__; null; 1.2e3) {yield;var __iterator__ = <y><z/></y>, prop = <x/>; }");
tryItOut("M:with(yield <x/>.__lookupSetter__(\"__count__\")){let (__iterator__) { {} }/*infloop*/do  while(033); }");
tryItOut("let (({ prop: prototype }), prop = (<x/>.@* ? -* : new [1,2,3,4].slice(<>\t<x><y/></x></>))) { {} }");
tryItOut("{let prototype = [z1,,], let;/*for..in*/for(var [__noSuchMethod__, prop] = (__noSuchMethod__ = <x><y/></x>) in .2) {{}export *; } }");
tryItOut("yield null\n");
tryItOut("L:if(new <x><y/></x>(1e-81,  '' ) ? [#3={a:#3#}] : (window)()) {{}yield; } else gc()");
tryItOut("{let __proto__; }");
tryItOut("break L; const __parent__;");
tryItOut("export *;");
tryItOut("if((let (prototype) <y><z/></y>)) ; else  if (((this.__defineGetter__(\"prop\", prototype))(window ^ <x><y/></x>) = let (__proto__ = (__parent__.*)) __parent__)) {yield -0; }");
tryItOut("yield;/*for..in*/for(var __proto__ = -1 in 1e81) yield;");
tryItOut("with({__iterator__: [15,16,17,18].some(function  constructor () { export prop; } , *::*)})");
tryItOut("return true\nyield false.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])));");
tryItOut("{with(([(3 += <x><y/></x>)].some(function  prototype (prototype, __proto__) { return false } ) , Exception(<><x><y/></x></>)))'haha'.split }");
tryItOut("/*for..in*/for([__noSuchMethod__, __count__] = <><x><y/></x></> in <><x><y/>\t</x></>) (<x><y/></x>).call");
tryItOut("let (__iterator__) { yield *; }");
tryItOut("/*for..in*/for(var __count__ in ((({}).__lookupGetter__)(<x/>)))(*::*);");
tryItOut("L:with({__count__: <x/>}){continue ;var __iterator__, __count__ =  /x/ ; }");
tryItOut("( '' ); const __iterator__;");
tryItOut("{(1 for (x in []))(window).__defineSetter__\nwith(*::*)function (prototype, constructor) { yield  \"\"  }  }");
tryItOut("/*infloop*/for(__count__; (uneval((<x/>)[ /x/g ])); 'fafafa'.replace(/a/g, function(y) { yield y; ;; yield y; })) { }");
tryItOut("{/*for..in*/for(var constructor.__parent__ in (((new Function(\"export __count__;\")))((<x><y/></x>)[<x/>]))){gc()\f } }");
tryItOut("constructor = __proto__;");
tryItOut("/*infloop*/for(const (__iterator__); <x/> = -3/0 !== this.isPrototypeOf(.2); (__count__ = true || <><x><y/></x></>)) return ({a1:1});");
tryItOut("");
tryItOut("let (prop =  '' , __parent__ = __iterator__) { throw __parent__; }");
tryItOut("if(1e-81) {return 033; } else  if (<><x><y/></x></>) {{} }");
tryItOut("if(* | -0) if(__noSuchMethod__ =  '' ) {<x><y/></x>;{} } else *;");
tryItOut("L:if([__iterator__, __parent__, __parent__, ].prop) return;\ncontinue \nL;\n");
tryItOut("let(__proto__ = <x><y/></x>) ((function(){try { yield <y><z/></y>; } finally { {} } })());");
tryItOut("/*for..in*/for(let [] in (__iterator__.propertyIsEnumerable(\"__noSuchMethod__\") >> function(id) { return id }.yoyo(<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>))) {do {const constructor;window; } while((*::*) && 0); }");
tryItOut("{L:switch([1]) { default: break;  }export prop; }");
tryItOut("/*infloop*/do {export *; } while(true)");
tryItOut("throw prototype;");
tryItOut("/*infloop*/do {gc(){} } while(eval(\"/*for..in*/for(const [__proto__, __noSuchMethod__] = (<><x><y/></x></>[@foo]) in null) {__count__, prototype = constructor:  '' ; }\", ) .@x:: ((undefined-- < <x/>) for each (prototype in this) for (*::*['__proto__'] in this) for each (__proto__ in  \"\" )));");
tryItOut("if( \"\" ) {let (prop, function::__parent__) { try { ; } catch(prop if  /x/g ) { yield; } catch(__noSuchMethod__) { <><x><y/></x></>; } finally { export *; }  }do {yield;window; } while((<x><y/></x>) && 0); } else function(id) { return id }");
tryItOut("{L:\fwith({constructor:  '' })break L;__iterator__ = prop; }");
tryItOut("if(prop.yoyo(<x><y/></x>).throw(prototype)) { if (return prototype = @foo.__lookupGetter__(\"__noSuchMethod__\");) {{} }} else export *;");
tryItOut("let (prototype = 1e-81) { export *; }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = <><><ccc:ddd><ccc\f:ddd><x><y/></x>__proto__</ccc:ddd></ccc:ddd></>\n</>; 0.1 ^=  { return prototype.prop } .yoyo([0]\t).__parent__; @foo) {arguments;{prop = (new Date()) } const __iterator__; }");
tryItOut("with({__proto__: (__count__ & this)})if(*) {this; } else {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (*)(//h\n(throw false) && (undefined.valueOf(\"number\"))) in prop.hasOwnProperty(\"constructor\") <<= ([15,16,17,18].map((<x><y/></x>), (*::*.isPrototypeOf(<y><z/></y>))))) /*infloop*/\rfor(let ({ default: break; case 6: gc()\nyield 3;\nbreak; : __noSuchMethod__.__count__, __count__: __iterator__ }) = this.__defineSetter__(\"__count__\", (new Function(\"yield this;\"))); __iterator__ = prop; prototype.__count__ setter= function  __proto__ (,)([,].isPrototypeOf( /x/g ))) yield <x/>\nMath.sin");
tryItOut("/*infloop*/M:for(__iterator__|=yield <><x><y/></x></>;  /x/ ; (prop+=<y><z/></y>.eval( /x/ ))) {let prop =  \"\" ; }");
tryItOut("L:if(window) ;\n/*for..in*/for(const prototype in (((new Function(\"__iterator__, try { break ; } catch(__count__) { export __iterator__; } finally { break L; } ;\")))(<><x><y/></x></>))){default: break ;break; gc()case prop: yield;break; case 3: break; case 6: export prop;{}break; yield this;break; ;case 4: break;  }\n");
tryItOut("/*infloop*/for(let ((1.3)[0/0]) .. <><x><y/></x></>.__count__.valueOf(\"number\"); ({ prop: __noSuchMethod__ }) = window >= window; <x/> === *::*.@foo) {(<x><y/></x>); }");
tryItOut("__iterator__");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = new Function(*::*.@foo !== return __noSuchMethod__) in this++\n) return;\n/*infloop*/for((<y><z/></y>)(<ccc:ddd></ccc:ddd>) = this.zzz.zzz; null; __iterator__ = (new *::*())) {const prop, __parent__ = 3;const __count__ = this, __parent__ = null; }\n");
tryItOut("gc()");
tryItOut("var constructor = this, constructor;/*infloop*/M:while(*::*){; }");
tryItOut("if((<x><y/></x>.( '' )) = ({__noSuchMethod__: [{}].map(Math.pow)})) yield *; else this.zzz.zzz;");
tryItOut(";");
tryItOut("if((yield prototype.__parent__.propertyIsEnumerable(\"constructor\"))) /*infloop*/while(function::__iterator__)export constructor; else  if (new ((#3={a:#3#}.__noSuchMethod__))() <= <x/>) {{export *; } }");
tryItOut("yield (<x><y/></x> ? 5.0000000000000000000000 : function(id) { return id });");
tryItOut("return false;\nreturn;\nswitch(<x><y/></x>) { case 8: ; }");
tryItOut("gc()throw *;");
tryItOut("if(({prototype: <y><z/></y>}).eval(*::*.hasOwnProperty(\"__count__\")).propertyIsEnumerable(\"setter\")) /*infloop*/for(let prop; 1e+81\n;  /* Comment */<x><y/>/*\n*/</x>) {__proto__;return; } else eval\nreturn;");
tryItOut("{return *; }");
tryItOut("with(<x><y/></x>.(1e4))*");
tryItOut("if((yield false.hasOwnProperty(\"__parent__\") %= <employee id=\"1\"><name>Joe</name><age>20</age></employee>)) continue M\nyield; else {<x/>;return new function (false)null(null); }");
tryItOut("M:if(({constructor: true })) {__parent__ = [1,,];{} }");
tryItOut("with({prop: (__count__%=(function::__proto__ = <><x><y/></x></>))})continue M;");
tryItOut("with({__noSuchMethod__: (([15,16,17,18].map(<><x><y/></x></> += <x/>, (eval(\"throw *;\",  /* Comment */<x><y/></x>))))(@, )).hasOwnProperty(\"__proto__\")}){if(<x><y/></x>) { if ( /x/ ) {(new Function(\"window;\")) }} else *::*; }");
tryItOut("if((((uneval(<><x><y/></x></>)))[undefined.isPrototypeOf(<x/>)])) {/*infloop*/L:while(<employee id=\"1\"><name>Joe</name><age>20</age></employee>){break M;yield; } } else with((prototype|=<><x><y/></x></>)){const constructor, __parent__;yield @foo; }");
tryItOut("if(<x><y/></x>.( '' )++) { }");
tryItOut("/*infloop*/while(( \"\"  ? true : 0.1).propertyIsEnumerable(\"prop\")){L: {[1,2,3,4].map }(new Function(\"/*for..in*/L:for(let __parent__ in (((1 for (x in [])))(<><x><y/></x></>.*)))if([z1]) { if (<y><z/></y>) return <x><y/></x>;} else return;\")) }");
tryItOut("{/*for..in*/for(__iterator__ in ((function  prototype (prototype)\f '' )(arguments)))return ({}); }");
tryItOut("if(<><x><y/></x></> .@x:: (function ([y]) { })()) return  \"\" ;");
tryItOut("while(('fafafa'.replace(/a/g, function (__iterator__)<y><z/></y>)) && 0)let __iterator__, __noSuchMethod__;");
tryItOut("/*infloop*/while((*::*.throw(prototype) += <x/>).__iterator__ = this === [z1])/*for..in*/for(const prop in <><x><y/></x></>) {function (constructor, __parent__)<x><y/></x> }");
tryItOut("/*for..in*/for(const constructor.prop in (((undefined.watch(\t\"__noSuchMethod__\", 'haha'.split)).watch)(*::*)))switch(window.__lookupSetter__(\"__count__\")) { default:  }");
tryItOut("/*infloop*/for(5.0000000000000000000000; ((<x><y/></x> /= <><x><y/></x></>) ? <>\f<x><y/></x></>.throw(false) : __parent__ = @foo.__defineSetter__(\"(prop)\", Math.sin)); (__proto__.__proto__ getter= gc.*)) yield;");
tryItOut("\n");
tryItOut("{if(prototype) { if ([,,]) (constructor);} else {true;continue L; }gc() }");
tryItOut("/*for..in*/M:for(var [__count__, prop] = (__count__)-=function ([y]) { } in yield new [[1]](prop).hasOwnProperty(\"prototype\")) ;");
tryItOut("if( <= ({ set prototype __noSuchMethod__ () { return; }  }).throw(#3={a:#3#}.yoyo(undefined))) {/*infloop*/for(var constructor; <><x><y/></x></> %= prop; null.yoyo(<x><y/></x>)) {let __noSuchMethod__ = <y><z/></y>; }if( /* Comment */<y><z/></y>) { if (({get: <x/>})) {return <x/>;throw 3/0; }} else {{gc() }return; } }");
tryItOut("{\n(-0).*; }");
tryItOut("with({__parent__: __count__.prop setter= (1 for (x in [])).throw(__proto__.(__parent__.__count__ setter= Math.sin))--})let (prototype, prop = new eval(@foo, @foo)) { var constructor, prototype = *;\nwith({__count__: <><x><y/></x></>})(@foo);\n }");
tryItOut("/*for..in*/L:for(var ({ __proto__: prototype }) in ((Function)(0)))/*for..in*/for(let [__count__, prop] = ({ __noSuchMethod__: ({ prop: ({ __noSuchMethod__: __parent__, __iterator__: prop }) }) }) = ([[1]] >> [z1,,]) .. __noSuchMethod__.prototype setter= [[]] in ~<><x><y/></x></>) with({}) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__iterator__.isPrototypeOf((function ([y]) { })()))([<y><z/></y>]) in <x/>) {return \fconstructor;export __noSuchMethod__; }");
tryItOut("{yield; }");
tryItOut("switch(__proto__ != <><x><y/></x></>.propertyIsEnumerable(\"__count__\")) { case ({prop getter: function(q) { return q; }, __iterator__: (<><x><y/></x></> >>>={}) }): /*\n*/let __iterator__;\nvar this, prop = <><x><y/></x></>;\ncase __parent__.propertyIsEnumerable(\"__iterator__\"): break; break;  }");
tryItOut("/*infloop*/L:for(var __proto__; [eval(\"null\",  \"\" )]; ([15,16,17,18].sort(Math.sin, *))) gc()");
tryItOut("let(({ eval: constructor, __proto__: __iterator__ }) = null !=  /x/g ) { with({}) { var __iterator__, __parent__; } ");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] =  \"\" .__defineGetter__(\"__count__\", eval) in <y><z/></y>) (window);");
tryItOut("/*infloop*/for(constructor; undefined; (new String(, [])).__lookupGetter__(\"__count__\")) ");
tryItOut("with((let (__noSuchMethod__) <y><z/></y> ::  '' \f .@ ([,,].delete).watch(\"constructor\", \ffunction (__noSuchMethod__)undefined)) .@*:: (uneval(function ([y]) { })).constructor){if(<x><y/></x>) continue L; }");
tryItOut("for(let y in []);");
tryItOut("");
tryItOut("with({}) { throw __noSuchMethod__; } ");
tryItOut("gc()");
tryItOut("if((__noSuchMethod__.prototype = window)) return *.__proto__ = <><x><y/></x></>;");
tryItOut("if(([prop].some((function(q) { return q; }).call))) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x><y/></x>) { { yield [,,z1] } ;gc() } else  if ((0 < -1)) {yield <><x><y/></x></>;yield\nfunction(q) { return q; } } else {(<><x><y/></x></>); }");
tryItOut("/*for..in*/L:for(let (true)(@foo) in (([1,2,3,4].map)(0.1 + <><x><y/></x></>)))__count__");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(__count__.hasOwnProperty(\"__count__\"))) { if ((constructor)[this].isPrototypeOf((let (__iterator__) let this;))) with([z1,,])throw this;} else {export __parent__; }\n");
tryItOut("/*for..in*/for(let prop in ((eval)(<x><y/></x>))){}");
tryItOut("/*infloop*/do {} while((yield ((p={}, (p.z = 0/0)()))));");
tryItOut("/*for..in*/for(prop in __noSuchMethod__ = __count__) yield <><x><y/></x></>;");
tryItOut("/*infloop*/for(new (function(y) { yield y; [1,2,3,4].map; yield y; })(<x/> > [z1,,]//h\n, [,,z1]); ({__parent__, __parent__:  \"\"  }); (eval(\"this\",  \"\" ))) L: export __proto__;");
tryItOut("/*for..in*/for(var * in ((Function)(prototype))){var prototype; }");
tryItOut("const constructor, __count__;");
tryItOut("L:if(\nnull.hasOwnProperty(\"constructor\")) {; } else (null);");
tryItOut("/*infloop*/for(let __noSuchMethod__ = __count__;  /x/g ; @foo) {return; }");
tryItOut("if(let ([, , , , ] = [1e81].sort(/a/gi)) 0/0 << (0/0.*.*)) {/*infloop*/for(window; this; __parent__) {return <><x><y/></x></>;yield __count__; }with({case <><x><y/></x></>: break; var constructor = window, prototype = this;default: let prop = -3/0;break; : (__iterator__ =  \"\" )})default: if(0) {( /x/ );break ; } else constructor = #3={a:#3#}, __proto__;{}; } else  if ((yield ({a1:1}))) L:switch(__iterator__ = window) { default: case 7: case 9: break; yield *::*;break; return;;break;  } else yield;");
tryItOut("throw __parent__;");
tryItOut("if((setter = x::function::prototype.eval(const __proto__))) {/*for..in*/for(var prototype in ((1e+81)([,])))(true); } else { }");
tryItOut("yield __parent__");
tryItOut("export *;let (let = *::*) { return [z1]; }");
tryItOut("throw *;");
tryItOut("L:if(String() @ (new [1,2,3,4].slice(0).@foo)) { if (<y><z/></y> @ @foo) {gc(){} }} else yield 4.;\nM:if((<x><y/></x>.__iterator__.isPrototypeOf(([,])))) { if (false\n) {return;yield; } else throw <><x><y/></x></>;}\n");
tryItOut("/*infloop*/do throw <><x><y/></x></>; while(prototype * __proto__);");
tryItOut("/*infloop*/for(#1=[window]; *::*.@foo .@*:: this.eval(((p={}, (p.z = __parent__)()).yoyo(<x/>.yoyo(-0)))) >> \neval(\"gc()\", undefined); (eval(\"export constructor; const __noSuchMethod__;\", \f /x/  :: (-0)++))) let(__noSuchMethod__, prototype = <x><y/></x>) ((function(){try { gc() } catch(setter) { __noSuchMethod__ } finally { yield __count__; } })());");
tryItOut("__parent__:  '' ");
tryItOut("if(3) { if (function ()return <x><y/></x>;()) export __iterator__; else {yield; }}");
tryItOut("/*infloop*/for(let __noSuchMethod__; (__iterator__); (prototype.__noSuchMethod__).__lookupGetter__(\"__proto__\")\n) return window;with({}) <x><y/></x>;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in void Iterator(<><x><y/></x></>)) {;export prop; }");
tryItOut("with(){/*for..in*/for(const __iterator__ = new (<x><y/></x>)(<>\f<x><y/></x></>, *) in undefined) return; }");
tryItOut("L: return 3.141592653589793;");
tryItOut("__count__ = [,,];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in ((arguments ?  /x/g  : <x><y/></x>).isPrototypeOf(#0=typeof __proto__))) {gc() }");
tryItOut("");
tryItOut("/*infloop*/do return; while((+(p={}, (p.z = @foo)())));");
tryItOut("try { return; } catch(__count__) { constructor = prop; } finally { yield <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; } ");
tryItOut("throw StopIteration;");
tryItOut("{return;(1e4).__defineSetter__ }");
tryItOut("yield true.prototype\nvar __proto__ = [[1]], __parent__;");
tryItOut("if(('fafafa'.replace(/a/g, undefined))(this >>> <x><y/></x>)) { if ([11,12,13,14].some) { '' ; } else export *;}");
tryItOut("/*for..in*/for(prototype in  '' ) {break L; }");
tryItOut("if(<><x><y/></x></> >= *) {/*infloop*/L:for(<x><y/></x>.__defineSetter__(\"prototype = __count__;\", function  __noSuchMethod__ (__parent__) { return __noSuchMethod__ } ); [z1].watch(\"__parent__\", (new Function(\"{}\"))); (new (*::*)( \"\" ))) {let prop, prototype = <x><y/></x>;continue ; } } else  if (yield __parent__.__count__ = <><x><y/></x></> for (__count__.prop in 1e81)) {L:with({prop: null}){{} } }");
tryItOut("gc()");
tryItOut("if() {let function::__iterator__ = __proto__; } else ");
tryItOut(";");
tryItOut("if(__proto__.unwatch(\"__noSuchMethod__\")) /*for..in*/for(var constructor = (<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")) in Exception((({}) for each (prototype in null)))) {{\tprototype = <><x><y/></x></>; }var __parent__, __noSuchMethod__ = ; }");
tryItOut("for(let y in [5,6,7,8]) throw __count__;");
tryItOut("export __proto__;\nthrow window;\n");
tryItOut("if([11,12,13,14].map) { if ((<y><z/></y>.@foo)) /*infloop*/while(<y><z/></y>){export __iterator__; } else return prototype;}");
tryItOut("");
tryItOut("throw constructor;");
tryItOut("__iterator__ = prop;");
tryItOut(";");
tryItOut("<x/>;");
tryItOut("if(1e4) { if (prototype = undefined) ([]);} else {throw this; }");
tryItOut("/*infloop*/for(let (__iterator__ = window, __proto__) * ? null > null : <x/>.prototype; <xxx {__proto__}={!<x><y/></x>.hasOwnProperty(\"constructor\")} />; (uneval(__proto__ = <\f><x><y/></x></>\n))) switch((prototype.(*)).eval(<x/>.unwatch(\"__iterator__\"))) { case 7: break; case 5: break; {}return @foo; }");
tryItOut("if(<><{__iterator__}></{__iterator__}></>) { if (<y><z/></y> ^= <x><y/></x>) M:with(this.__defineSetter__(\"__count__\", Math.sin))return; else ((-0)).__defineSetter__}");
tryItOut("/*infloop*/do 4.; while(window);");
tryItOut("if(([<x><y/></x>].sort(Math.sin))) {yield <x><y/></x>;return  /x/ ; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(('haha'.split).call(constructor, <x><y/></x>, __parent__)++) { if (new Date(@foo) ? (prototype = <x/>) : (function ([y]) { } - <><x><y/></x></>)) continue L;} else {return; }");
tryItOut("while(((new (function ()( ''  >> *))())) && 0){}");
tryItOut("if(1.2e3) {} else  if ( /x/g ) yield <x><y/></x>;");
tryItOut("/*infloop*/while( '' )for(let y in []);");
tryItOut("with({__parent__: new Function()}){yield;export *; }");
tryItOut("(<><x><y/></x>/>);");
tryItOut("let (__parent__, prop = null.__proto__ = *) { /*for..in*/for(__parent__ in ((gc)(<x/>))){function  __parent__ (__iterator__) ''  } }");
tryItOut("try { yield; } finally { continue ; } ");
tryItOut("L:while((<bbb xmlns:ccc=\"(-1)\"><ccc:eee></ccc:eee></bbb>) && 0)throw <y><z/></y>; const __proto__;");
tryItOut("if(false) return; else  if ([,,z1]) <x><y/><\t/x> else \nthrow __parent__;");
tryItOut("if((({__parent__: ([__iterator__].map(function ()@foo)) })) for each (__noSuchMethod__ in this) if (false)) yield");
tryItOut("if([undefined :: __count__]) { '' ;{} } else {undefined;const constructor, prototype = {}; }");
tryItOut("with({prop: <x/>}){(__count__); }");
tryItOut("/*infloop*/M:for(let __count__ = <><x><y/></x></>; 1e-81; <x/>) {return <><x><y/></x></>;; }");
tryItOut("yield;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = ({ prototype: ({ __count__: __iterator__ }) }) = @foo.@* in (constructor.constructor = (eval(\"3.141592653589793\",  \"\" ) >= (yield <y><z/></y>)))) /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in this) gc()");
tryItOut("if([window].filter((true).__defineSetter__)) { if (<><x><y/></x></>.yoyo(prototype)) throw  \"\" ;} else gc()");
tryItOut("/*infloop*/M:do __parent__ while();");
tryItOut("/*for..in*/M __noSuchMethod__:for(var ({prop setter: 'haha'.split }) in constructor) {continue L; }");
tryItOut("M:switch((function::__proto__.constructor.valueOf(\"number\"))) { case (new ([1])() .@x:: #1=[#1#].valueOf(\"number\")): function(y) { yield y; undefined; yield y; }break; case (__iterator__.__proto__ = @foo.*)(((yield  { yield #1# } ))): export *; }");
tryItOut("M:if((this.__lookupGetter__(\"prop\"))) { if (0x99) gc()} else return;");
tryItOut("throw [[1]];\n{yield 5.0000000000000000000000; }\n");
tryItOut("this.zzz.zzz;");
tryItOut("prop = __noSuchMethod__;");
tryItOut("try { let(constructor, __noSuchMethod__ = prototype = 5.0000000000000000000000) ((function(){__noSuchMethod__ = __proto__;})()); } finally { yield ({}.*)([15,16,17,18].map(<><x><y/></x//h\n></>, <><x><y/></x></>)); } ");
tryItOut("return;");
tryItOut("return *::*;");
tryItOut("/*infloop*/for(new 0.1(); ([, , , __iterator__]\t = prop = new Number( /x/ , eval(\"<y><z/></y>\", <y><z/></y>))); (<x><y/></x>.hasOwnProperty(\"constructor\"))) {/*infloop*/for(let __iterator__ = *; ({}); prop) {gc() } }");
tryItOut("if((__parent__.prototype getter= function(y) { yield y; ; yield y; })) return __iterator__;");
