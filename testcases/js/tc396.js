tryItOut("!export *; ^ (*::*.__lookupSetter__(\"__iterator__\")) const constructor;");
tryItOut("L:if(*::*.__lookupGetter__(\"prototype\")) { if (eval(\"break M;\", window)) /*for..in*/for(let __iterator__ in #1=[#1#]) gc else {{{}__noSuchMethod__ } }}");
tryItOut("{export *;yield; }");
tryItOut("yield (undefined.__count__).watch(\"__proto__\", (1 for (x in [])));");
tryItOut("L: var prototype = *, prop;");
tryItOut("{}");
tryItOut("/*infloop*/for(0/0; window; <><x><y/></x></>) {{}return; }");
tryItOut("export *");
tryItOut("do {{throw true; } } while((__count__ = let (<x><y/></x> = <y><z/></y>, prototype = 1e4) prototype ? RegExp((1.2e3++) .@x:: __noSuchMethod__+=<x/>, __noSuchMethod__ >>>=window) : (__parent__ = new String())) && 0);");
tryItOut("gc()M:if(__parent__.__proto__) {if(constructor) { if (<x/>) export *; else  \"\" ;} }");
tryItOut("/*for..in*/for([__proto__, __parent__] = (prototype = prop) in null) {continue M;break ; }");
tryItOut("let (prop) { export __count__; }");
tryItOut(";");
tryItOut("if(5.0000000000000000000000) const prop = <><x><y/></x></>; else /*for..in*/for(const __noSuchMethod__ = ~<x/> in ({a2:z2})) {gc()__noSuchMethod__, prop = prop; }");
tryItOut("if(function::__parent__) (__parent__); else {const prop; }");
tryItOut("if(prop+=__proto__.((0.1.__defineGetter__(\"constructor\", function  __proto__ (constructor) { var __parent__ = <><x><y/></x></>; } ))/*\n*/)) { if ((__noSuchMethod__ = __parent__)) if(<><x><y/></x></>) {;const constructor = <x><y/></x>, __parent__ = <x/>; }} else /*for..in*/for(__iterator__ = <x><y/></x> in [1]) {export constructor;return each; }");
tryItOut("L: {((1 for (x in []))).call }");
tryItOut("yield ([ \"\" ].sort((function ([y]) { })()))\nM:switch(this.zzz.zzz) { case __proto__ = constructor: __iterator__break; /*infloop*/for\f(__count__; this.__defineSetter__(\"__iterator__\", function(y) { yield y; ; yield y; }); this.__defineSetter__(\"prototype\", Function) *= this\t) {switch(((gc).call(this, <><x><y/></x></>))) { default: ;yield;break;  }yield  /x/ ; }break; break; default: export *;break; /*for..in*/for(const __noSuchMethod__ in ((<y><z/></y>)(1e81)))return;break;  }");
tryItOut("return <y><z/></y>;yield;");
tryItOut("{function(y) { yield y; ;; yield y; } }");
tryItOut("switch([eval(\"<x><y/></x>\", function ([y]) { }).@*]) { case 8: /*infloop*/for((yield <x/>) ? __count__-=*::* : (window for (prototype in 0.1)); (void 3/0); @foo .@*:: __noSuchMethod__ .. (uneval(true))) {yield;break ; } }");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("/*infloop*/for(const constructor; __noSuchMethod__ = ({ constructor: ({ constructor: __iterator__, __proto__: ({ __proto__: constructor, prototype: prop\t }) }) }); window) {M:with({__iterator__: constructor = *::*.hasOwnProperty(\"__noSuchMethod__\")}){return; }function(y) { yield y; break L;; yield y; } }");
tryItOut("while((eval(\"const __noSuchMethod__ = <y><z/></y>;\", <x><y/></x>).__iterator__) && 0){break M; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__.__count__ in ((Math.pow)((yield @foo)))){yield 3; const prop; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const [__iterator__] = ; (033--); (__noSuchMethod__.constructor setter= /a/gi)) {export *; }");
tryItOut("<x/>;\ngc()\n");
tryItOut("\n*;\n");
tryItOut("/*for..in*/for(prototype in undefined) {gc()yield; }\nL: export __count__;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in false.__lookupGetter__(\"__count__\")) {yield; }");
tryItOut("{return;let prop; }");
tryItOut("/*infloop*/for(let constructor; (prop = (export __proto__;)(((p={}, (p.z =  /x/ .isPrototypeOf((new (function(q) { return q; })())))())))); (new ({})()).(Date(<><x><y/></x></> <= <x/>))) {{var prototype = __iterator__, prototype; }/*for..in*/for(var constructor in  /x/g ) {return;var constructor =  /x/ , __noSuchMethod__ = <x><y/></x>; } }");
tryItOut("if(![<\tx><y/></x>].map(gc)) {export *;yield undefined; } else ( \"\" );");
tryItOut("if(window.unwatch(\"prototype\")) {return ((yield @foo).eval(( ''  *= <><x><y/></x></>))); } else {export __noSuchMethod__; }");
tryItOut("with({}) throw constructor;");
tryItOut("/*for..in*/for(var __count__ = <y><z/></y> in ('fafafa'.replace(/a/g, function(q) { return q; }))) let (__iterator__) { export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (__count__ .@x:: <y><z/></y>)) (new Function(\"gc()\"))");
tryItOut("if(new (__proto__ = <y><z/></y>)((this.__defineGetter__(\"prop\", eval)), *::*)) {if(({a2:z2})) {return <x/>; } else false } else  if ((__noSuchMethod__.__parent__ = __count__.__proto__)) {yield; }");
tryItOut("let(__noSuchMethod__) { throw StopIteration;");
tryItOut("L: return;");
tryItOut("M:with( /x/  = <y><z/></y>){(prop); }");
tryItOut("/*infloop*/L:do {continue M; } while(*::*)\ncontinue M;");
tryItOut("__proto__ = prototype;");
tryItOut("with(yield null){{} }");
tryItOut("/*infloop*/for(let __iterator__; {}; 1.3) {prototype, prop = <x><y/></x>; }");
tryItOut("{}\n");
tryItOut("/*infloop*/do export __count__; while(__parent__)");
tryItOut("/*infloop*/M:while(<x><y/></x>)var constructor;");
tryItOut("yield @foo;\nthrow @foo;\n");
tryItOut(";");
tryItOut("return;");
tryItOut("return; const __count__ ");
tryItOut("var prop, __iterator__;");
tryItOut("L:if(delete) return;");
tryItOut("__noSuchMethod__ = <x/>\n");
tryItOut("throw 3; const prototype;");
tryItOut("M:do //h\n{yield null; } while((<y><z/></y>) && 0);");
tryItOut("if(([,,z1])[3/0]) { if ((p={}, (p.z = @foo)())) {yield;return 5.0000000000000000000000;{} const __proto__; }} else let prop, constructor;");
tryItOut("/*infloop*/while(//h\n\n(({__proto__: function(id) { return id }, prototype: <y><z/></y> })))with(prototype, __parent__){const prop, __parent__ = function(id) { return id }; }");
tryItOut("const __parent__, __parent__;");
tryItOut("{/*infloop*/for(let __iterator__; (false | *); <x/>) const prop = __proto__, __iterator__ = undefined; const __noSuchMethod__; }");
tryItOut("if( /x/  - (({__count__: <x/>}))) {null } else M:with({__proto__: new -1(<><x><y/></x></>)}){gc() }");
tryItOut("yield __noSuchMethod__");
tryItOut("/*for..in*/for(const __parent__ = ((this.zzz.zzz) if (__iterator__ = \tlet (prop) function ([y]) { })) in 0.1 = <y><z/></y>) {; }");
tryItOut("M:with(((+null if (window))).unwatch(\"__proto__\"))return;");
tryItOut("Function{throw #1#; }");
tryItOut("(<y><z/></y>)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <y><z/></y>) {export *; }");
tryItOut("for(let y in []);");
tryItOut("let (__iterator__, __parent__ = (-<y><z/></y>.isPrototypeOf(false))) { M:while((({__iterator__: <x><y/></x> })) && 0){{} } }");
tryItOut("{return;if(( /* Comment */(prototype))) {export *;var prototype, __parent__ = <y><z/></y>; } else  if (({ __parent__: [__noSuchMethod__, __proto__, , ] }) = ( /x/ )(function(id) { return id }) << false) {let (__noSuchMethod__, __parent__) { <x/> } } else {M:if(__parent__.__noSuchMethod__) {throw <><x><y/></x></>;(1 for (x in [])) } else {<x><y/></x>return; }this; } }");
tryItOut("if(prototype = window.__noSuchMethod__ = __count__ >>>=<x><y/></x>.watch(\"__parent__\", Math.pow)) { if (eval(\"Function\", <><xxx {prototype}={(<x><y/></x>\n)} /></>).unwatch(\"__proto__\")) return; else {; }}");
tryItOut("__count__");
tryItOut("if(__iterator__ = this) { if (__proto__ = __proto__) const __iterator__, __count__ = 1e81;} else yield;");
tryItOut("L: \t{}");
tryItOut("try { return ([11,12,13,14].map); } catch(with({constructor: <><x><y/></x></>}){(<x><y/></x>);0/0; } if (function(){return this.zzz.zzz;})()) { let(prototype = <x><y/></x>.(false)) { return; } catch(__iterator__ if (\n<><x><y/></x></>)) { throw prototype; } catch(__proto__ if (function(){yield (<x><y/></x> =  /x/ .yoyo(this));})()) { with({}) this.zzz.zzz; } catch(prototype) { throw StopIteration; } ");
tryItOut("/*for..in*/for([constructor, prop] = (<x><y/></x> << undefined) in <y><z/></y>) {yield; }");
tryItOut("if(#0=[__parent__ = function::__count__.prototype.__defineSetter__(\"prototype\", ((false)[[1,,]] ? <xxx {__parent__}={true} /> : ((p={}, (p.z = (uneval(null)))()))).watch)]) M:if(this) { if (__proto__) {prop }} else <x/>; else  if (((<x><y/></x>.propertyIsEnumerable(\"__count__\")).eval())) export *; const __count__;");
tryItOut("/*infloop*/for(const __iterator__ =  /x/ ; <y><z/></y>; <x><y/></x>) export *;");
tryItOut("/*infloop*/do {export __count__; } while(<>\t<x><y/></x></> < #3={a:#3#}); const __parent__;");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; (({ __parent__: __parent__ }) = __parent__); (({prop: <x><y/></x>})).unwatch(\"__iterator__\")) {export *; }");
tryItOut("with(<xxx>{__parent__}</xxx>)export __count__;");
tryItOut("if(<><x><y/></x></>) null; else gc()");
tryItOut("let (__iterator__) { switch( /x/g ) { default:  } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(var [, , , ] = ((constructor|=function(id) { return id }).hasOwnProperty(\"__count__\")); (<><x><y/></x></>.valueOf(\"number\")).__defineSetter__(\"__iterator__\", eval); ((#0=<x><y/></x>.__defineSetter__(\"__parent__\", Math.pow)).@foo)) /*infloop*/for((<><x><y/></x></> @ <x><y/></x>); (__count__%=__iterator__ = false); <><x><y/></x></> /  '' ) __iterator__, prop = <x><y/></x>;");
tryItOut("/*infloop*/for(let constructor = new Iterator(this.__defineGetter__(\"__iterator__\", function(q) { return q; }), \f[11,12,13,14].sort); __iterator__; yield <x><y/></x> ? window : window.__proto__ = this >>= window << this) /a/gi");
tryItOut("return <x/>; const __noSuchMethod__;");
tryItOut("if(<x/>) yield; else {gc }");
tryItOut("for(let y in [5,6,7,8]) throw ((this for each (constructor in *::*)));");
tryItOut("let(__proto__ = prop = @foo >= ((3.141592653589793 for (__noSuchMethod__ in <x/>)))) { __iterator__ = prop;");
tryItOut("if(prototype+=prototype) {export prototype; } else with(([, prop] = *::* == ((arguments if (<x/>)) ? (__iterator__) : (*()))))prototype = (-0); const __count__;");
tryItOut("/*infloop*/while(((/a/gi)( /x/g ) !== __noSuchMethod__ = (<zzz>*</zzz>.(let (__iterator__, __iterator__) *)))){let (({ __count__: ({ __count__: prototype, __noSuchMethod__:  }), __proto__: __parent__ })) { try { export *; } catch(prop if 1.2e3) { return; } catch(__proto__) { yield; }  } }");
tryItOut("let(__parent__ = (({}).__lookupGetter__).call(<><x><y/></x><ccc:ddd></ccc:ddd></>, ), prototype = undefined) { with({}) throw prototype;");
tryItOut("return;");
tryItOut("/*for..in*/M:for([__parent__, __parent__] = __proto__.(undefined) in this.__defineSetter__(\"constructor\",  /x/g .eval(true)).@foo) {/*infloop*/for(let __parent__ = <x><y/></x>; = this.__lookupGetter__(\"__count__\"); let (constructor, prototype) *::*; (let (prop = 0x99) <x/>)) {/*infloop*/do {(null);return <x><y/></x>; } while(#3={a:#3#}); }let __proto__ = ({a1:1}); }");
tryItOut("do  while((\n<x/>) && 0);while((__noSuchMethod__.__count__ = __count__.prop) && 0){break L;continue L; }");
tryItOut("constructor = __count__;");
tryItOut("/*infloop*/L:while(__iterator__ = <x/>){gc(){} }");
tryItOut("throw null\n3;");
tryItOut("/*for..in*/L:for(var __proto__ in *::*) {;Function }");
tryItOut("(<y><z/></y>);");
tryItOut("{if((__count__)) { if (<x><y/></x>.throw( \"\" )) export prop; else var __count__;} }");
tryItOut("@");
tryItOut("M:do {M:while((constructor.throw(-1)) && 0){throw __count__;export __proto__; } } while((window) && 0);");
tryItOut("/*infloop*/for(var __count__;  /* Comment */(((<x><y/></x>\f).__defineSetter__).call(#1=[#1#], __noSuchMethod__, <><x><y/></x></>)); <bbb xmlns=\" '' --\"></bbb>) {break M; }");
tryItOut("\twhile((0/0 || __proto__ =  \"\" ) && 0)export constructor;");
tryItOut("L: {while(((new RangeError())) && 0){let __count__, __parent__;; } }");
tryItOut("");
tryItOut("switch(this.zzz.zzz) { default: export *;break; case new <y><z/></y>(): /*for..in*/for(const __parent__ in (function ([y]) { })()) yield  '' ;break; /*for..in*/for(let __proto__ =  in  '' ) {throw  '' ;{} }case 8: return;case 0: break; continue M;break; case 9: break;  }");
tryItOut("L:if(0x99.propertyIsEnumerable(\"__noSuchMethod__\")) {return; } else return;");
tryItOut("/*for..in*/M:for(var [__count__, __noSuchMethod__] = [11,12,13,14].some in  /* Comment */<x><y/></x>) {;@foo; }");
tryItOut("M:with(){/*infloop*/while(false @  /x/ ){export *;export *; }/*for..in*/L:for(false['prop'] in *::*) {__parent__ = <y><z/></y>, prop = *;let __proto__ = *, __iterator__; } }");
tryItOut("M:if(<y><z/></y>.throw((-3/0 /=  '' ))) { if (prototype.constructor) if(false) {export constructor; }} else {; }");
tryItOut("switch(__count__ = <x><y/></x>) { default: if(<y><z/></y>) __count__, prototype; else  if ((new (\t \"\" )(*::*, <x><y/\f></x>))) export prop;break; break; case (__count__ = prop): break; case ( ''  ^= undefined): L:with({__proto__: <><x><y/></x></>})(function ([y]) { })()break; switch(<y><z/></y>) { case <y><z/></y>: return; }break;  }");
tryItOut("if(#2=[*::*]) prop else  if (eval(\"<x/>\", <><x><y/></x></>)) {; }");
tryItOut("return  < (eval(\"__parent__\", __iterator__ = <><x><y/></x></>;));");
tryItOut("if(false) {(@foo);const constructor = *::*, prototype = {}; } else {export *;gc() }\t");
tryItOut("M:do export __iterator__; while((033) && 0);");
tryItOut("(1 for (x in []))\n \"\" ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ++((function () \"\" )(*::*, @foo))['__count__'] in __count__.__proto__ = let (__proto__, __parent__) <x/> instanceof constructor .@*:: __count__) for(let y in []);");
tryItOut("throw constructor;");
tryItOut("M:do {break M; } while((<x><y/></x>) && 0);");
tryItOut("if((((<bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb>).apply)(delete [[1]] .@*:: __noSuchMethod__, (new \f<><x><y/></x></>())))) {L:if(this.__defineGetter__(\"constructor\", (<x/>).__defineSetter__)) __noSuchMethod__ = <x><y/></x>;let __count__ = __parent__; }");
tryItOut("with({prop: (this * <x/>) >>>=(\n.call(__noSuchMethod__, [1]}){/*infloop*/do prop = 1.3; while(this.__defineSetter__(\"__count__\", [1,2,3,4].slice)[__count__.constructor getter= @foo]); }");
tryItOut("(@foo);");
tryItOut("/*infloop*/M:while((#0=(([z1] << window) in ([11,12,13,14].filter)) -= (__proto__.(prototype)) = [*])){__proto__ = delete; }");
tryItOut("try { return; } catch(__iterator__ if (function(){this.zzz.zzz;})()) { for(let y in [5,6,7,8]) yield; } finally { throw StopIteration; } ");
tryItOut("/*infloop*/for(var ({ __proto__: ({ __noSuchMethod__: ({ constructor: arguments, __noSuchMethod__: [({ __proto__: __iterator__ }), , prop, [, , , \t__iterator__, constructor], ] }) }) }) = \r(function \f() { yield (function ([y]) { })() } ).call(*::*, ); __noSuchMethod__ = prop = *::*.__iterator__ = [ '' ]; ({}).__lookupGetter__(<y><z/></y>, 0)) let(__noSuchMethod__) { let(__parent__ = <><x><y/></x></>) {  '' ;");
tryItOut("\nyield;\n");
tryItOut("constructor = constructor;");
tryItOut("if(true.valueOf(\"number\")) {throw window; } else {__count__yield <x/>; }");
tryItOut("let (__parent__ = ((function(y) { yield y; export prop;; yield y; }).call(false, )).watch(\"prototype\", (({}).__lookupGetter__).call)) { L: {/*\n*/{} } }");
tryItOut("if(((uneval((*.hasOwnProperty(\"__parent__\")))))) if(this.__defineGetter__(\"__noSuchMethod__\", Math.pow)) { if (<><x><y/></x></> >>> this.unwatch(\"constructor\")) const prototype, __proto__;} else ; else  if (new __proto__((p={}, (p.z = <><x><y/></x></>)()), __noSuchMethod__ = ({ prop: __count__ }) = -0)(__count__)) {if([z1,,]) { if (*::*) {return 3;gc() }} else {return false;; }if() { if ([] = 'fafafa'.replace(/a/g, Math.pow)) {Math.sinthrow <x><y/></x>; } else {var __iterator__ = <x><y/></x>, __proto__ = <x><y/></x>;yield __count__; }} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in null) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></x>) {yield;let prop, constructor = 0; }");
tryItOut("prototype = __count__;");
tryItOut("(<y><z/></y>).watch const constructor\n");
tryItOut("while(() && 0)if( ''  > *::* += <y><z/></y> / #1=[#1#]) throw *; else  if ((function  __iterator__ (prototype) { yield  ''  } (*::*, [[]])).watch(\"prop\", (gc).call)) \treturn @foo; else {break ;let (constructor = prototype, __parent__ = constructor) { M:if(@foo) throw prop; else export prototype; } } const __count__;");
tryItOut("/*infloop*/L:for(let constructor; (eval(\";\", ([1,,] >>>=<x><y/></x>))); (yield  '' ).isPrototypeOf(((yield  \"\" )))) {/*for..in*/for(const [__count__, __iterator__] = new * in <y><z/></y>) return;L:if(<y><z/></y>) yield; }");
tryItOut("let (__parent__ = ({__count__: [,,]--}), constructor) { with({__parent__: this}){continue L; }/*infloop*/for(__iterator__ = ([undefined.constructor if (eval(\"<><x><y/></x></>\", false))]); (yield false) ^= (<y><z/></y> - __count__); ([[1]])()) with(({ __parent__: window, __parent__: __noSuchMethod__ }) = ){let __count__ = <x/>;return; } }");
tryItOut("/*infloop*/for(constructor =  /x/g ; (__count__ = __noSuchMethod__); function () { (<><x><y/></x></>); } (this)) {throw  '' ;yield <y><z/></y>; }");
tryItOut("with({constructor: /*infloop*/for(var __proto__; null; [11,12,13,14].some) {break L;export __proto__; }})yield;(<><x><y/></x></>)(3, <x><y/></x>);");
tryItOut("return __proto__; while(( prototype[z1,,].__lookupGetter__(\"__iterator__\")) && 0);");
tryItOut("if(window ^ <x/>) ;");
tryItOut("[, ({ __proto__:  }), ({ __proto__: ({ __iterator__: __proto__ }), prototype: ({ __noSuchMethod__: constructor, \rget: __iterator__ }) }), , ] = __noSuchMethod__;");
tryItOut("{ }");
tryItOut("do /*infloop*/L:for(var ({ __iterator__: __noSuchMethod__, constructor: constructor }) = [[1]]; ~__count__; .2) {let __proto__ =  /x/ , __parent__ = false;1.3; } while(((yield new (window)(window, <x><y/></x>))) && 0);");
tryItOut("L: ;");
tryItOut("continue L; const prop;");
tryItOut("/*for..in*/for(var __count__ in <><x><y/></x></>) {export *;var __proto__ =  \"\" ; }");
tryItOut("with({}) { export *; } ");
tryItOut("/*infloop*/for(let constructor = <><!--yy--//h\n></>; (constructor = new ((uneval(<><x><y/></x></>)))()) <<= (( \"\"  -= -3/0.@foo) - __proto__.__count__ getter= [,]); ({a1:1}).eval(this)) /*for..in*/for(let constructor in ((Function)(window)));");
tryItOut("{throw <x/>; }");
tryItOut("break M;");
tryItOut("if((<><x><y/></x></> >>= *::*)) { if ((window).__defineSetter__()) let __proto__ = 4., __count__;} else yield false;<x><y/></x>yield 033;");
tryItOut("yield window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (1.2e3 >>>=(((constructor|=<><x><y/></x></>))[__iterator__ = arguments].__lookupSetter__(\"__count__\")))) {return (gc());/*infloop*/while((*::*)){return <><x><y/></x></>;var __proto__ = (function::__iterator__);, setter = this; } }");
tryItOut("if(0x99) {{return <y><z/></y>; } }");
tryItOut("if((({__count__: (Object(@foo))}) ? [[]] : *::*).hasOwnProperty(\"prop\")) {[1,2,3,4].slice } else  if (__proto__) {const constructor; }");
tryItOut("let(constructor, __proto__) { __noSuchMethod__ = __noSuchMethod__;");
tryItOut("const constructor;");
tryItOut("throw prop");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __count__] = void __parent__ in <y><z/></y>) var __parent__ = <><x><y/></x></>, __proto__ =  /x/ ;");
tryItOut("L: {if(<><x><y/></x></>) { if (this) {function (prototype) /x/g (false); } else {const function::get, __parent__ =  \"\" ;yield; }}<x/>; }");
tryItOut("let(__count__, __parent__ = -[(<><x><y/></x></> !==  /x/ )].filter(window)) { return;");
tryItOut("/*for..in*/for((prop) in 3) ;");
tryItOut("L:if( /x/g ) { if (<x/>.constructor = this - <><x><y/></x></>.throw(constructor-=(-0))) {}} else (arguments);");
tryItOut("M:do (1.2e3); while(((eval(\"<x/*\\n*/><y/></x>\",  \"\" ))) && 0);\n__count__ = function ([y]) { }, __count__ = <><x><y/></x></>;\n");
tryItOut("/*infloop*/for(let __parent__ = <>+(constructor)</>; (yield __count__) ? <x><y/></x>.*.eval(prototype = <><x><y/></x></>) : .2; #3={a:#3#}) yield;");
tryItOut("with({prototype:  \"\"  /= 1e-81\n ^= constructor.__parent__ getter= function (constructor)(function ([y]) { })()})do {M:while((<x><y/></x>) && 0){__iterator__, constructor;export *; } } while(((p={}, (p.z = ({}))())) && 0);");
tryItOut("/*for..in*/for(var (prototype) in ((Math.pow)(\tprototype = <x><y/></x>))){/*for..in*/for(var __count__ in <y><z/></y>) yield <><x><y/></x></>; }");
tryItOut("__count__ = prop;");
tryItOut("if((yield <y><z/></y>)) {continue M; }");
tryItOut("return;");
tryItOut("M:switch(__proto__ = prototype) { case 6: throw this;\n__count__;\nbreak;  }");
tryItOut("{; }");
tryItOut("if(__proto__.prop = __count__ = __parent__) {L: (<><x><y/></x></>); } else {gc() }");
tryItOut("/*for..in*/for(const __proto__ in 4.) [1,2,3,4].map");
tryItOut("while(((uneval([<><x><y/></x></>].sort(eval)))) && 0){yield;<x/> }");
tryItOut("/*for..in*/for(var [__count__, __count__] = <y><z/></y> in (*::* = <x/>).throw([[1]] * prototype)) {return;L:if(this) { if (1e4) {function  constructor (__count__) { yield __noSuchMethod__ } let prop = <><x><y/></x></>, constructor = <y><z/></y>; }} else const __noSuchMethod__; }");
tryItOut("with({__parent__: (yield prototype.__noSuchMethod__ = >)}){L:with({__parent__:  /x/g }){export *;return *; } }");
tryItOut("/*infloop*/for(const __count__ = new Array().__lookupSetter__(\"__parent__\"); <x><y/></x> instanceof <x/>; ((<x><y/></x>)()) , null) {export __proto__;; }\n(this);\n");
tryItOut("/*for..in*/for(__noSuchMethod__ = (let (({ __count__: prop }), __noSuchMethod__, __proto__ = *::*) __proto__ = [,]) in window) {gc() }");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(const ({ constructor: constructor, __iterator__: ({ __proto__: ({ __noSuchMethod__: ({ x::__count__: __noSuchMethod__, __parent__: __proto__ }), __noSuchMethod__: [, __noSuchMethod__, __noSuchMethod__] }), prop: __count__ }) }) = <x><y/></x>++; new ( /x/  &  /x/g )(<><x><y/></x></> >> undefined, window); ([[z1] for each (__parent__ in *::*)].*)) {export __count__;/*\n*/export *; }");
tryItOut("let(__count__ = false, prop) ((function(){throw true;})());");
tryItOut("with({[, __count__.__parent__, , ]: eval(\"'fafafa'.replace(/a/g, Function)\", __noSuchMethod__)})export *\n");
tryItOut("*::*;");
tryItOut("L: {throw  '' ; }");
tryItOut("do {const __proto__, prototype; } while((<x><y/></x>) && 0);");
tryItOut("{/*for..in*/M:for(prototype = window in  /x/g ) {let <x><y/></x>, __count__; } }");
tryItOut("var constructor, __parent__ = window;\nbreak M;\n");
tryItOut("/*for..in*/for([__noSuchMethod__, __noSuchMethod__] = this in -1 & <x><y/></x>) L: {const constructor =  \"\" ; }");
tryItOut("/*infloop*/for(((true)( '' )); (<x><y/></x>.valueOf(\"number\")); __parent__ = function(id) { return id }) (*);");
tryItOut("/*for..in*/for(var <x/>.prop in <x><y/></x>) export *;");
tryItOut("do {L: {;return 033; } } while((this--) && 0);");
tryItOut("M:while(( \"\" ) && 0)return .2.@*;");
