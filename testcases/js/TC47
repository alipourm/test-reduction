
tryItOut("gc()");
tryItOut("switch(@foo) { case -0: break; default: return __count__;break; case undefined: break ;break; case 1: yield;break;  }");
tryItOut("{} const __noSuchMethod__;");
tryItOut("/*infloop*/for(let __parent__ = __proto__;  /x/g ; prop) prop = __count__, __iterator__ = null;");
tryItOut("M:do {throw  /x/g ; } while(((new *::* *= window())) && 0);");
tryItOut("let __parent__;");
tryItOut("with({}) throw StopIteration;");
tryItOut("if(Math.pow([1,,]).prop) { if ((__iterator__++)) {return <><x><y/></x></>; }} else const prop = this;\nthrow <x/>;\n");
tryItOut("const prop = <x><y/></x>\n;");
tryItOut("/*infloop*/for(var __count__; eval(\"if([,,]) {yield; } else gc()\",  /x/g ); *\t) ");
tryItOut("/*for..in*/for(var prototype in ( \"\" .__parent__)) (<x><y/></x>)\n");
tryItOut("/*infloop*/while(<x><y/></x>){export *;(*::*); }");
tryItOut("L: continue ;");
tryItOut("constructor = undefined");
tryItOut("gc()");
tryItOut("/*infloop*/do {return; } while(new Date(window).__defineGetter__(\"__parent__\", [1,2,3,4].map));//h\n const __iterator__;");
tryItOut("gc()");
tryItOut("M:if(\n<><x><y/></x></>--) { if (({__noSuchMethod__: *.*})) {}} else {/*infloop*/for(window; @foo; null) {;export __iterator__; } }");
tryItOut("/*infloop*/M:for(let __parent__; @foo; ((__parent__.constructor % undefined)[new <x><y/></x>((#0=[true]), @foo)])) return;");
tryItOut("with((this - {}.propertyIsEnumerable(\"function::constructor\")))/*infloop*/for(var __noSuchMethod__ = ({__proto__:  /x/g }); (<x/>.@foo).throw(<x/> ::  /x/ ); 1e-81(__parent__, [z1,,])) true");
tryItOut("yield\n");
tryItOut("/*infloop*/while(false){gc()<x/>; }");
tryItOut("if((eval).call) ({}).__lookupGetter__ else L:if( /x/g ) { \"\" ;yield; } else ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></x>) {const setter; /x/g ; }");
tryItOut("L: {export *; }");
tryItOut("let(__count__ = __proto__ = arguments, __parent__) ((function(){for(let y in []);})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in true) __count__");
tryItOut("/*infloop*/M:for(; (constructor = <x><y/></x>); <><x><y/></x></>) {export __iterator__; }");
tryItOut("let (__iterator__, x::__proto__ = 3/0) { return; }");
tryItOut("/*for..in*/for(let [__iterator__, prop] = null in __count__) ([z1]);");
tryItOut("if((<><x><y/></x></>.prototype = (-1))(( /* Comment */prop)) = this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) { if (@foo .@*:: window) /*for..in*/for(var __iterator__ = (__proto__+=(eval(\"return;\", function(id) { return id }))) in ({ get prototype(__parent__, prototype)__count__ })) {if(0x99) gc() else {gc() } }} else {}");
tryItOut("let (__iterator__) { /*infloop*/do {return;{} }\f while(window); }");
tryItOut("L:with({__noSuchMethod__: })yield;");
tryItOut("throw __count__;");
tryItOut("{do {export *; } while(([]) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in <y><z/></y> * <x/>) var __iterator__;");
tryItOut("L: var prop");
tryItOut("/*infloop*/M:while(__noSuchMethod__.__proto__ getter= ){} = 3.141592653589793;");
tryItOut("if(prop = prop.__count__ = (function ([y]) { })() === __proto__ = <x><y/></x>) <x><y/></x>\n else gc()");
tryItOut("switch(((<><x><y/></x></> if (undefined)))) { case 1: throw <x><y/></x>;break;  }");
tryItOut("L:if(true) { if ((prop.__proto__)+=__noSuchMethod__.__count__) {export *;gc() } else export __iterator__;}");
tryItOut("if(({ get prop(prototype, __noSuchMethod__)(((-window))[.2]) < ++ /x/  })) {(((yield <x><y/></x>))); } else  if (.2.throw( '' )) ; else with(('haha'.split).call(true, <><x><y/></x></>)){yield;return *; }");
tryItOut("/*infloop*/do {{}__count__ } while([11,12,13,14].filter == constructor.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty));\nyield;\n");
tryItOut("__iterator__ =  '' ;");
tryItOut("with({__noSuchMethod__: __count__.prop getter= [1,2,3,4].slice})return ({a1:1})\n");
tryItOut("switch(window.@foo) { case <><x><y/></x></>.__proto__ = this:  }");
tryItOut("var __count__ = <><x><y/></x></>, prop;");
tryItOut("");
tryItOut("/*infloop*/for(\f__proto__.__iterator__ = (new (function (__iterator__, __proto__) { const __iterator__ = *, __count__; } )(<x><y/></x>, 1.3)); ~({}).eval(<x><y/></x>); (this.__defineSetter__(\"constructor\", gc))) {gc()gc() }");
tryItOut("export __count__;return (*);;");
tryItOut("with({constructor: ({__count__: ({prop: __noSuchMethod__ = [,]}) })})gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in @foo) yield;");
tryItOut("/*for..in*/for(prop = (({ get __noSuchMethod__(constructor) with  })) in <><x><y/></x></>) {export *; }");
tryItOut("/*infloop*/for(const function::__iterator__; (eval(\"(3.propertyIsEnumerable(\\\"prop\\\"))\", ((uneval(__count__)))).propertyIsEnumerable(\r\"__noSuchMethod__\")); (<x><y/></x>)[ /x/g ].unwatch(\"__count__\")\n) __parent__;var constructor = , prototype;");
tryItOut("with({__noSuchMethod__: return}){/*for..in*/M:for(let [__proto__, __proto__] = constructor.(*::*) in <><x><y/></x></>) export *; }");
tryItOut("if(window.__count__ = undefined) {yield [,,]; }with(<y><z/></y>)let __iterator__ = <><x><y/></x></>, prop;");
tryItOut("/*for..in*/L:for(const constructor in [1]) {/*infloop*/for(var [, , __iterator__] = (<x><y/></x> if (<><x><y/></x></>)); RangeError(<><x><y/></x></>, <><x><y/></x></>); #2=[throw undefined;\t]) {export *; } }");
tryItOut("export *\n");
tryItOut("if(<> </>) { if (<><{prototype}><ccc:ddd>yyy</ccc:ddd></{prototype}></>) {L:switch(prototype) { case 3: break; break; case 5:  } } else yield <><x><y/></x></>;}");
tryItOut("{export *;/*infloop*/for(this; null; <><x><y/></x></>) {yield <y><z/></y>; } }");
tryItOut("let (__proto__) { {(({a2:z2}));continue L; } }");
tryItOut("if(*) return *; else  if (<x/>) yield;");
tryItOut("<><x><y/></x></>;\nexport *;\n");
tryItOut("{return; }");
tryItOut("L: {/*for..in*/for(var <><x><y/></x></>.var prototype = @foo; in ( '' .watch(\"__noSuchMethod__\", ((new Function(\"export constructor;\"))).call))) export *; }");
tryItOut("return;");
tryItOut("if((033.watch(\"__noSuchMethod__\", gc))) {L:do constructor while(([1,,]) && 0);let __iterator__ = [z1,,]; }");
tryItOut("throw __iterator__;");
tryItOut("");
tryItOut("(1.2e3.__noSuchMethod__).__defineSetter__ const __proto__;");
tryItOut("/*for..in*/for(var (window)(-0) in ((Math.sin)((__proto__ = this))))prop, __iterator__ =  '' ;");
tryItOut("const constructor, __noSuchMethod__");
tryItOut("/*infloop*/while(<><bbb xmlns:ccc=\"__iterator__.__noSuchMethod__\"><ccc:eee></ccc:eee></bbb></>)var __proto__ = <><x><y/></x></>;");
tryItOut("M:if([1]) gc() else if(0x99) { if (this) (arguments); else {(0/0);return; }}\n");
tryItOut("throw __proto__;");
tryItOut("switch(null[true] ^= constructor = <><x><y/></x></> if (*::*))\f { case (new Object()): return <x><y/></x>;break; break; throw @foo;break; default: yield; }\n\n");
tryItOut("if((prototype.prototype)) ; else  if (({ constructor: prototype, __parent__: __iterator__ }) = ({ __iterator__: __parent__, __iterator__: prop })) {const __parent__, __parent__ = __proto__;(function(y) { yield y; export __parent__;; yield y; }).call } else yield;");
tryItOut("let (prop =  /* Comment */yyy, __parent__ = (uneval(prototype))) { (__iterator__ = __proto__.__lookupSetter__(\"prototype\")); }");
tryItOut("/*for..in*/L:for(const __count__ in ((function ()  = <x/>)(let (__count__ = undefined) <y><z/></y>))){gc() }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <y><z/></y>) {yield; }");
tryItOut("return;");
tryItOut("gc()\n(__iterator__);\n");
tryItOut("/*infloop*/for(__parent__ = this;  /x/ [<><x><y/></x></>]; __noSuchMethod__.unwatch(\"__parent__\")) yield null;");
tryItOut("if((p={}, (p.z = prop)())) {return window;let __count__ = *, __proto__; } else do ; while((<><x><y/></x></>) && 0);");
tryItOut("{L: return constructor;\nL: ;//h\n\n }");
tryItOut("");
tryItOut("let (prop, prop = 1e81) {  { return [z1,,] }  }");
tryItOut("/*infloop*/L:do {prototype/*infloop*/M:while(<y><z/></y>){continue ; } } while((uneval(function::__proto__ = prop)));");
tryItOut("/*for..in*/for(prototype in (((function(q) { return q; }).apply)(new [1,2,3,4].slice(arguments))))");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __parent__.__lookupSetter__(\"__count__\") in null) gc()");
tryItOut("export __parent__\n");
tryItOut("while((@foo) && 0){const __noSuchMethod__ = arguments;; }");
tryItOut("with({__proto__: [15,16,17,18].sort(function  prop (prototype) { this; } , [window].__lookupGetter__(\"__iterator__\")).@foo}){export *;throw <x/>; }");
tryItOut("do return; while((true.__lookupGetter__(\"__parent__\").eval('fafafa'.replace(/a/g, eval))) && 0);");
tryItOut("let (__proto__ = [,,z1]) { while((<y><z/></y>) && 0){return <x><y/></x>; } }");
tryItOut("try { for(let y in []); } catch(constructor if (<x/>.constructor)) { return (p={}, (p.z = function(id) { return id })()); } ");
tryItOut("{if([1,2,3,4].slice(3).@*) { if ([z1,,]--) <><x><y/></x></>; else {__noSuchMethod__(<><x><y/></x></>); }}L:if(window.valueOf(\"number\")) { if () break M; else  if (__count__)} }");
tryItOut("/*for..in*/for(__iterator__ =  in #1#) {let __iterator__;(0).__defineSetter__ }");
tryItOut("__proto__ = prop;");
tryItOut("yield <><x><y/></x></>;\n/*for..in*/for(const __noSuchMethod__ in <><x><y/></x></>) {{} }\n");
tryItOut("/*infloop*/while(prototype: __iterator__ = <x><y/></x>)gc()\n\n");
tryItOut("[,,z1]");
tryItOut("/*infloop*/for(const constructor; ; (({__proto__: export *[__parent__ = <y><z/></y>]}))) /*for..in*/for(let __iterator__ in ((function(y) { yield y; ; yield y; })(\nthis.valueOf(\"number\")))){L: (<y><z/></y>);continue ; }");
tryItOut("do prototype =  /x/g , __iterator__ = false; while(((prop = function(y) { yield y; var prototype = 1e-81, __proto__ = (function ([y]) { })();; yield y; })) && 0);");
tryItOut("var __parent__ = 1e81\n");
tryItOut("L:if(1.3--) {function(id) { return id }\n } else {}; const prototype\n");
tryItOut("if((yield \f<><x><y/></x></>)++) { if (__proto__.(this)) this.zzz.zzz; else return undefined;L: function () { __parent__; } }");
tryItOut("while((([<y><z/></y>]).eval(((function ([y]) { })().throw(#1#)))) && 0)/*infloop*/for(this.zzz.zzz; __proto__(__noSuchMethod__ = <x><y/></x>) = <><><x/> |= #1=[#1#].__iterator__</></>;  \"\"  ^ function ([y]) { }) {switch(<x/>) { case @foo: throw true;break; default: ;break; case 0: new Functionbreak; break; case 3: ;case 1: var prototype, __noSuchMethod__;break; case  '' : case 8: break; break;  }<\tx><y/></x> = <y><z/></y>; }");
tryItOut("/*infloop*/do {continue L; } while(1.3.unwatch(\"__count__\"));");
tryItOut("return;");
tryItOut("switch(this) { default: export constructor;break; case 3: export *;break; gc()break; case (<y><z/></y> >>> <x><y/></x>): <x><y/></x>;break; {}yield  \"\" ; }");
tryItOut("M:if(prop.constructor = [1,,]) {if( try { throw prop; } catch(__noSuchMethod__) { this.zzz.zzz; } finally { for(let y in [5,6,7,8]) (new Function(\"yield -0;\")) }  this) {break M; } else  if (__noSuchMethod__, __noSuchMethod__) var prop = <\n><x><y/></x></>;/*\flet ({ __count__: prop }); }");
tryItOut("export *; const __parent__;");
tryItOut("/*infloop*/for(var __iterator__; new ((yield *::*))(<x/>.@*, [1]); <><bbb xmlns:ccc=\"return\"><ccc:eee></ccc:eee></bbb></>) {let (__proto__, __count__ = constructor) {  { yield <x><y/></x> }  }Function }");
tryItOut("throw StopIteration;");
tryItOut("switch(this.zzz.zzz) { default: break; case ( '' .__lookupSetter__(\"__iterator__\") << *::*.@*): /*for..in*/for(__iterator__ = (yield null) in *) var __iterator__, constructor;break; break;  }");
tryItOut("if( set prop __iterator__ (__parent__) { {} }  % (yield 1.3)) { if ((this.__defineSetter__(\"__count__\", [1,2,3,4].slice))) (--*) else //h\nthrow this;}");
tryItOut("/*infloop*/while(#2=[(-0)]){yield;return __proto__; }");
tryItOut("return (1.2e3 && this).__noSuchMethod__ = Iterator(window,  /x/ );");
tryItOut("(-1);\n");
tryItOut("/*infloop*/M:while(<><x><y/></x></>){yield; }");
tryItOut("with((* % *::*)\n){/*for..in*/for(const __parent__ = <x><y/></x>.__noSuchMethod__ = true in @foo) return this;/*for..in*/L:for(constructor in ((function () { yield (window)(<x/>) } )((__iterator__.get).prototype))){ for (__noSuchMethod__ in __iterator__) } }");
tryItOut("/*for..in*/L:for(__count__ = new <><bbb xmlns:ccc=\"true.__lookupGetter__(\"__parent__\")\f\"><ccc:eee></ccc:eee></bbb></>('fafafa'.replace(/a/g, [1,2,3,4].slice), <>__iterator__+=true</>) in \f__iterator__.__iterator__ setter= function(y) { yield y; if(#1=[#1#]) export prototype;; yield y; }) {/*infloop*/for\n(var prototype; 0/0(*::*); 'fafafa'.replace(/a/g, window)) prototype, __noSuchMethod__ = [1,,];var prototype, __count__ = .2; }");
tryItOut("with({__noSuchMethod__: (return true;.__defineGetter__(\"__proto__\", gc))}){(*::*).watchthrow @foo; }");
tryItOut("if(prop = <x><y/></x>) { if (1e-81) {export *;export __count__; }} else {return [z1,,]; }");
tryItOut("M:if((__count__ *= [[,,z1]].map(Math.sin))) { if (window) /a/gi else while((*::*) && 0)*;}");
tryItOut("{let __parent__ = -0;return (-1); }");
tryItOut("{/*infloop*/while([[, , prop, prototype], ] = prop >> window)/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in ') {return;const x::__noSuchMethod__ =  \"\" , prototype; } }");
tryItOut("if(typeof (__noSuchMethod__ && __proto__ = __count__ = *)) {;export __parent__; }");
tryItOut(";\n");
tryItOut("L: {switch((<x><y/></x> *= __parent__.yoyo((__iterator__.prop = false)))) { case <><xxx {__noSuchMethod__}={<x/>} /></>: export *;break; export *;break; default: break;  }\n }");
tryItOut("(Function).apply");
tryItOut("/*infloop*/for(const constructor = false; __noSuchMethod__ = [11,12,13,14].map; prototype.(*::*)) M:with(<x/>)var yield <><x><y/></x></>;, __iterator__ = window;");
tryItOut("/*for..in*/for(let window in undefined) {var prototype = <><x><y/></x></>; }");
tryItOut("L: for(let y in []);");
tryItOut("while((__count__.__lookupSetter__(\"prototype\")) && 0)/*infloop*/for(var constructor; __proto__; <x><y/></x>) export *;");
tryItOut("/*infloop*/for((1.2e3 &= [z1,,]); <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (null for (prop in [,,z1]))) /*infloop*/for(constructor; -0; *::*) {({}).hasOwnProperty }");
tryItOut("{throw -3/0; }");
tryItOut("if(this) {export constructor; } else [1,2,3,4].map");
tryItOut("/*for..in*/for(let //h\nget.__parent__ in ((function(q) { return q; })([(( /* Comment */4.) !== (true ? @foo : this)) for (([1])(<x/>) in (({ prototype: __iterator__ }) = [__iterator__, constructor, [__noSuchMethod__, prop]])) if (__iterator__ /= [,,])])))yield  /x/ ; const __iterator__;");
tryItOut("L:if(this.zzz.zzz) { if ([15,16,17,18].sort((new Function(\"gc()\")), new (this.hasOwnProperty(\"\"))(undefined !==  /x/ , @foo))) {{} }} else {yield  \"\" ; }");
tryItOut("/*for..in*/for(const [__iterator__, constructor] = ({__iterator__: new Number()}) in ((*).watch)(<x><y/></x>).__count__ = ( /x/ )) ");
tryItOut("if(true) {function(q) { return q; }@foo; } else {/*for..in*/for(var [prototype, __count__] = *::* in __iterator__) {return undefined; }{return __noSuchMethod__;return; } }");
tryItOut("{}");
tryItOut("if((__noSuchMethod__.__proto__+=(( '' ).call)().watch(\"prop\", ({}).__lookupGetter__))) { if (@foo) {/*infloop*/for(try { export __noSuchMethod__; } catch(prototype if  in  \"\" ) { (this); } catch(__count__) { (0.1); } finally { (<x/>); } ; <x/>; try { __parent__ = <x><y/></x>; } catch(prop if null) { ; } finally { function  __proto__ (constructor) { return <x><y/></x>; }  } ) {const constructor = __parent__; } } else {/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__ in __count__ - @foo) if(<y><z/></y>) {continue ; }if(prototype = [1]) {var yield = <x/>;\fthrow <><x><y/></x></>; } else  if (((-3/0))) ({}).hasOwnProperty else {yield null;var prop, constructor =  /x/g ; } }}");
tryItOut("throw  \"\"  - true; const __noSuchMethod__;");
tryItOut("if(( /* Comment */3/0)) { if ((__parent__ = __noSuchMethod__)) return; else {return;; }}");
tryItOut("/*infloop*/while(<x/>.propertyIsEnumerable(\"prototype\")){throw [[1]] }");
tryItOut("L:if(typeof *::*) yield (-0);\nlet (__parent__, __noSuchMethod__) {  }\n");
tryItOut("export __proto__; const prototype;");
tryItOut("L:if(new (1e81)(__noSuchMethod__ = (-0), <xxx>{prototype}</xxx>)) if(null) {}");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("M:while((<y><z/></y>.@foo) && 0){export __iterator__; }");
tryItOut("with(@foo){export __proto__;export prop; }");
tryItOut("/*infloop*/while()throw StopIteration;");
tryItOut("M:if([15,16,17,18].sort('haha'.split(null instanceof @foo), <><x><y/></x></> ? @foo : null)) { if ((new (null).watch()).*) /*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <><x><y/></x></>) {throw *::*;(<y><z/></y>); } else gc()}");
tryItOut("with({constructor: constructor != 3.141592653589793})\nexport *;\n");
tryItOut("__noSuchMethod__;/*infloop*/L:for(var __parent__; this.\f__defineGetter__(\"prototype\", function (prop) { return this } );  ''  ? -0 : <x><y/></x>) {(true);const __parent__ = false; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for((eval(\"break ;\", __parent__) || window >> <x><y/></x>) - prototype; ({ __proto__: prop }) = __proto__ = this; <y><z/></y>) {throw  /x/g ;gc() }");
tryItOut("{L:switch(prop) { default: do {return <x><y/></x>; } while((*) && 0);break;  } }");
tryItOut("this.zzz.zzz;");
tryItOut("return\n/*infloop*/for(const [, __iterator__, ] = <x><y/></x>\n; ([<x><y/></x>]); <>yyy</>) {let __parent__, constructor; }");
tryItOut("/*infloop*/L:do {prop = __proto__;let __proto__ = -0; } while(try { return; } finally { __count__ = prototype; } );");
tryItOut("return true;if((arguments.hasOwnProperty(\"constructor\")).valueOf(\"number\")) throw <x><y/></x>; else  if ( /x/g ) M:switch(function::__noSuchMethod__.eval([])) { case (prop = prop):  } else M:switch(<><x><y/></x>\t</>) { case setter: yield;case <y><z/></y>: break; case <><x><y/></x></>: const constructor, prop = window;default: function(y) { yield y; {}; yield y; }break; case undefined: <y><z/></y>break; case 5: break; case 1: break; case 7: gc()break; return;break;  }");
tryItOut("/*infloop*/while(0x99){const x::prototype, __parent__ = prop\n{;1e+81; }yield <x/>.@*; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let [__parent__, __parent__] = 3/0 in function ([y]) { }) { } const prop;");
tryItOut("yield [,,z1];");
tryItOut("if(prop = [, ({ __count__: ({ constructor: [, , , , prototype] }), __noSuchMethod__: __parent__ })]) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in undefined) {true;(<x><y/></x>); }");
tryItOut("/*infloop*/do export __proto__; while(__iterator__.__iterator__);");
tryItOut("export *;/*for..in*/for(prop.__noSuchMethod__ in ((this)(([z1,,] += <x/>))))var __noSuchMethod__, prototype;");
tryItOut("return;");
tryItOut("if((window.propertyIsEnumerable(\"__proto__\"))) {;constructor = true; }");
tryItOut("/*for..in*/L:for(var __iterator__ = (([1,2,3,4].map).call).call(this.eval(<><x><y/></x></>).throw(<x><y/></x> >>>=<y><z/></y>.eval(;--))\f, __count__.constructor) in <y><z/></y>) /*infloop*/M:for(var __proto__; @foo; null) ;");
tryItOut("gc()\n");
tryItOut("let(({ constructor: function::__iterator__ }), prop) ((function(){this.zzz.zzz;})());");
tryItOut("do { /x/g ; } while((this) && 0);");
tryItOut("return ({ __iterator__: ({ __noSuchMethod__: [, , ] }) }) = (((<><x><y/></x></>.constructor))((true[<y><z/></y>])));");
tryItOut("switch(constructor.constructor setter= /a/gi) { case 6: __proto__; }");
tryItOut("M:if([15,16,17,18].sort((new Function(\"yield <><x><y/></x></>;\")), __parent__) - prop.watch(\"__parent__\",  { yield  \"\"  } ) >>> 033.__lookupGetter__(\"prop\").hasOwnProperty(\"__count__\")) throw this;");
tryItOut("L:while((__noSuchMethod__) && 0)/*for..in*/M:for(let __parent__ in this) (@foo);");
tryItOut("{}");
tryItOut("/*infloop*/for(const __proto__; (({__proto__ setter: (Math.pow).apply, __parent__: ((eval(\"let prop;\", __count__)))[<><x><y/></x></>.function::__iterator__] })); __count__) {throw StopIteration; }");
tryItOut("with({}) __count__ const __iterator__;");
tryItOut("/*infloop*/while((this(<><x><y/></x></>, <><x><y/></x></>)))Function");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in #1#) return <x><y/></x>;");
tryItOut("for(let y in []);");
tryItOut("if(this.zzz.zzz) { if (this.__lookupSetter__(\"prop\")) {export prop;; }} else break L;");
tryItOut("this.zzz.zzz;");
tryItOut("{({}).__lookupGetter__ }");
tryItOut("<x/>;");
tryItOut("/*for..in*/M:for(let [prop, __iterator__] = ( '' \n) in window) __proto__ =  /x/g , x::constructor = null;");
tryItOut("let(__parent__ = __iterator__.__count__) { for(let y in []);");
tryItOut("if(__iterator__.isPrototypeOf(__proto__)) {;var __proto__, __parent__ = <x><y/></x>; } else export *;");
tryItOut("return;with({}) {}");
tryItOut("/*for..in*/L:for(var prop = *::* in <y><z/></y>) return <><x><y/></x></>;");
tryItOut("");
tryItOut("if(arguments.unwatch(\"__proto__\")) { if ((window.__lookupGetter__(\"prototype\") for (__parent__ in __parent__) for each (__proto__ in *::*))) return [[]];} else yield <x/>; const __noSuchMethod__;");
