tryItOut("with((5.0000000000000000000000.throw(this)))export *;");
tryItOut("{break M; }");
tryItOut("let (__noSuchMethod__, __count__) { \f; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const ('fafafa'.replace(/a/g, function(q) { return q; }).prototype)(new (new Function(\"export *;\"))()) in [({ __parent__: constructor, prop: __count__ }), , __parent__, ] = ({ __count__: [__proto__, constructor, constructor] })) {export *;if(window) { if (null) {} else export *;}\nreturn;\n }");
tryItOut("prototype = constructor;");
tryItOut("if( '' ) {{}yield *; }");
tryItOut("/*infloop*/for(const __count__; <><bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb></>; (3/0 for (constructor in <><x><y/></x></>) ^=  '' )) { break  }");
tryItOut("gc()");
tryItOut("M:if((__noSuchMethod__ = <><x><y/></x></> .@ [<x><y/></x>] <= Math.pow)) {export *\n\f(*);; } else /*for..in*/L:for(var __iterator__ = new (@foo += <><x><y/></x></>)() in  \"\" ) {gc() }");
tryItOut("/*for..in*/M:for([__proto__, prop] = (([function::prototype.(Function([,], <x><y/></x>))]) %= prop) in (<><x><y/></x></>.watch(\"prop\", (Math.pow).apply) >>> [11,12,13,14].some)) {/*infloop*/do continue M; while(__noSuchMethod__.prop = <x/>.valueOf(\"number\")); }");
tryItOut("__parent__ = prototype;");
tryItOut("M:if(this) const prototype, __proto__ = *::*;");
tryItOut("with(__noSuchMethod__ = <y><z/></y>){;\n }");
tryItOut("with(this){switch(( \"\" --.throw((prop ? true : [])))) { case  { return #2=({__proto__: \n<><x><y/></x></>}) } : case (eval(\"constructor\", ({a1:1}))): break; throw  /x/ ; }/*for..in*/for(__count__ in ((gc)((4. | @foo))))break M; }");
tryItOut("yield @foo;");
tryItOut("/*infloop*/for(let function::constructor; prop; (({prop setter: function (__parent__, __parent__) { return [1]\n }  }))((prototype.prop = \ntrue.unwatch(\"false\")))) {/*for..in*//* nogeckoex bug 349964 */L: for  each(let (__proto__) in ([,,] if (5.0000000000000000000000))) yield; }");
tryItOut("do let this; while(([ /x/g ].filter(function (__count__, __count__) { return false } )) && 0);");
tryItOut("/*infloop*/while(new function(q) { return q; }([15,16,17,18].filter(gc, ![1]), (<x/> , __proto__ >>> RegExp().isPrototypeOf(this.zzz.zzz))))({/*infloop*/for(var ({ __noSuchMethod__: ({ __iterator__: ({ prop: ({ __count__: prototype, __iterator__: function::prop }), __parent__: [constructor, , , ] }) }) }) = <>((gc)(arguments))</>; __count__ = ([1,2,3,4].slice).call({}.watch(\"prototype\"\t, (({}).__lookupGetter__).call), 1e+81 + <y><z/></y>, {}).yoyo(constructor); 4.) L: {export *;\n } '' ; })");
tryItOut("function(y) { yield y; export __parent__;; yield y; }");
tryItOut("with( /x/ ){}");
tryItOut("yield;");
tryItOut("{/*infloop*/do {return <x><y/></x>; } while(@foo); const __count__; }");
tryItOut("if(new (<><x><y/></x></>)()) {return 1e4; } else __iterator__ = <x/>;");
tryItOut("yield *::*;");
tryItOut("return;");
tryItOut("throw StopIteration;");
tryItOut("export prototype;");
tryItOut("__count__ = <x><y/></x>, __iterator__ = @foo;");
tryItOut("if(<x><y/></x>) throw (-1);");
tryItOut("this.zzz.zzz;");
tryItOut("\t{if((__parent__.__defineSetter__(\"function::__count__\", gc))) return true }");
tryItOut("L: {\t(\r#3={a:#3#}); }");
tryItOut("with([])continue M;");
tryItOut("M:while((prototype.__parent__ =  /x/ ) && 0)throw <><x><y/></x></>;");
tryItOut("switch((__parent__.__count__ = false.yoyo([z1,,]).* if ((__iterator__ = <><x><y/></x></>)))/*\n*/) { default: case .__defineGetter__(\"__count__.__noSuchMethod__\", *::*): L:with({__noSuchMethod__: #0=({prototype getter: /a/gi, __count__: [,,] })}){let __iterator__, x::__iterator__; }/*for..in*/M:for(const prototype in ((Function)(undefined))){return __proto__; }\ndo {[1,2,3,4].mapreturn; } while(((<><x><y/></x></> &&  \"\" )) && 0);\nbreak; case new (yield function (constructor, function::prototype)__count__())(((1 for (x in [])))):  }");
tryItOut("if() { if (({ __count__: __count__, __parent__: __count__ }) = (!undefined)) {}} else {M:switch(<><x><y/></x></>) { default: yield;break;  } }");
tryItOut("if(((@foo).__defineSetter__).call(({a1:1}), <x><y/></x>)) {__noSuchMethod__ = undefined; } else  if (this.zzz.zzz) {throw <><x><y/></x></>;const __noSuchMethod__ = #1#, __count__ = *; } else \f{let __count__;\f }");
tryItOut("while((function(id) { return id }) && 0)yield;");
tryItOut("if(#1=[#1#]) {let __iterator__, constructor;continue M; } else  if (\t<><xxx>{__proto__}</xxx></>) var __count__ = __parent__, x::prototype;");
tryItOut("return;");
tryItOut("{} const __iterator__;");
tryItOut("let((__parent__), __count__) { constructor = __proto__;");
tryItOut("if((<x/> == [,])) {const __count__; } else  if (__noSuchMethod__) {let constructor, prototype; } else continue ;");
tryItOut("L:if(({__count__ setter: Math.sin }) / ([,,z1] &&  /x/g )\f) /*for..in*/M:for([__noSuchMethod__, __iterator__] = arguments in __count__) ; else  if (let (__proto__ = <><x><y/></x></>, prototype = this) 0/0) export __count__;");
tryItOut("/*for..in*/for([__parent__, __count__] = new Object() in 1.3) export __count__;");
tryItOut("let \r(__iterator__) { throw StopIteration; }");
tryItOut("with({prototype: prototype-- , <y><z/></y>}){try { throw arguments; } catch(constructor if (function(){;})()) {  } catch(__parent__ if <><x><y/></x></>) { (1e81); } catch(prop if (function(){break M;})()) { gc() } catch(prop if (function(){gc()})()) { ; } finally { const __iterator__; }  }");
tryItOut("/*infloop*/for((this.__defineGetter__(\"prop\", function (__parent__, constructor) { yield  /* Comment */ , new <x/>(window) } )); ((uneval(eval(\"__noSuchMethod__ = <><x><y/></x></>\", __noSuchMethod__ = (prop))))); ([<><x><y/></x></>].filter([1,2,3,4].slice) !== (window ==  \"\" ) ^ delete (__count__ = <x><y/></x>))) /*infloop*/for(( /* Comment */(uneval(<><x><y/></x></>))); (new Date(0.1, *::*));  /x/ ) true;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in #1=[#1#]) {returngc() }");
tryItOut("/*for..in*/for(this.__defineGetter__(\"prop\", [1,,]) in <><x><y/></x></>) {if(<x><y/></x>) ; else (@foo); }");
tryItOut("if(({ __proto__: [], __count__: prototype }) = <><x><y/></x></> @ this) { if (__noSuchMethod__ = 1e+81) /*infloop*/for(const ({ __proto__: ({ __count__: __parent__, prop: __iterator__ }) }) = (*::* ? @foo :  '' .yoyo([,] @ <><x><y/></x></>)); <x/>.eval(true); __proto__\r = (yield [z1,,])) let __count__, constructor; else {var __noSuchMethod__;{} }}");
tryItOut("throw <x/>;\nthrow [];\n");
tryItOut("while(((undefined.__noSuchMethod__)) && 0){/*infloop*/L:do {/*infloop*/do  while(this); } while(window.__proto__ = [1,,]); }");
tryItOut("/*for..in*/for(var __proto__ in (((delete <><x><y/></x></>))((__parent__.(__iterator__.__parent__ setter= [1,2,3,4].map))))){const constructor; }/*infloop*/for([__count__, __count__, ] = <x/>; __count__.valueOf(\"number\"); this.__defineGetter__(\"prop\", [1,2,3,4].slice)) let __count__ = 1e+81, prop = <x/>;");
tryItOut("__parent__");
tryItOut("/*for..in*/for(let [__parent__, prop] = eval(\"const __count__ = <><x><y/></x></>, __iterator__ = __parent__;\", ([15,16,17,18].map( /x/g ['__proto__'], [1].valueOf(\"number\")))) in yield this.zzz.zzz.__lookupSetter__(\"__count__\")) {(#2=[<x><y/></x> >>> (-1)]);M:with({prop: <ccc:ddd><!--yy--></ccc:ddd>})export constructor; }");
tryItOut("let (__parent__, __parent__) { /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in @foo) continue ;\t }");
tryItOut("if(({a2:z2})) {gc()const __parent__, prop = 1.3; } else  if (__count__) {let __proto__, __proto__; } else {gc()with({__noSuchMethod__: null}){gc()(<y><z/></y>); } }");
tryItOut("if(window <= window) (new Function(\";\"))\r else  if ((uneval( /x/ ))) {(undefined); } else ");
tryItOut("M:if(false) {throw @foo; }");
tryItOut("with({__count__: this !== __parent__ / (typeof <><x><y/></x></>)}){let __iterator__; }");
tryItOut("{return __parent__;gc() } const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in -3/0) (<><x><y/></x></>);");
tryItOut("if(<><x><y/></x></>.eval(<><x><y/></x></>)) \nexport prototype;");
tryItOut("if(prototype.__parent__ getter= ({}).__lookupGetter__) { if (function  __count__ () { return #1=[#1#] } ( /x/  ? <x><y/></x> :  /x/g )) throw  \"\" ; else {if(1e4) {Math.sin } else  if ([1,,]\t) {\freturn [z1]; }/a/gi }}");
tryItOut(";{}");
tryItOut("if(prototype) __parent__ else  if /*\n*/(<x><y/></x>) return; else {(<><x><y/></x></>);let __iterator__ = *::*; }");
tryItOut("while(((({ __noSuchMethod__: constructor, constructor: prop }) = (({__parent__: <y><z/></y>}))).yoyo('fafafa'.replace(/a/g, (({}).hasOwnProperty).call))) && 0){return <y><z/></y>; }");
tryItOut("if((__iterator__ = *))  else  if ((+<><x><y/></x></>)) export __iterator__; else let constructor =  '' ;");
tryItOut("/*for..in*/for(const __iterator__ = __count__.__parent__ = (constructor.__iterator__-=undefined) in (prop = <y><z/></y>).__lookupSetter__(\"prototype\")) {{} }");
tryItOut("do ; while((<><x><y/></x></>) && 0);");
tryItOut("let(constructor = __noSuchMethod__.__noSuchMethod__) { let(__parent__ =  /x/ ) ((function(){try { let(__parent__ = this, function::prop =  \"\" ) { return __count__; } finally { return Iterator(); } })());");
tryItOut("if(()) {throw null;if(*::*) {export *;throw 1e81; } }");
tryItOut("/*infloop*/while((<x><y/></x> + 4.) for (__iterator__ in *) for each (__count__ in true)){M:if(<><x><y/></x></>) {return <x><y/></x>; } else export __proto__; }");
tryItOut("/*infloop*/do {; } while((1.2e3.__defineGetter__(\"constructor\", gc)) > (-1 !==  /x/g ));");
tryItOut("{gc()\n(<><x><y/></x></>);if(false) { if (prop) Math.pow} else [1,2,3,4].map }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*/M:for(let [__count__, __parent__] = (window.@*) in ~[[]].unwatch(\"yield\")) if((this if (<x/>))) export __iterator__; else export *;");
tryItOut("if(<x/>)  else  if (*) {var __iterator__, __proto__ = this; }");
tryItOut("/*for..in*/for(var __iterator__ = 1e-81 in this) {yield <x><y/></x>; }");
tryItOut("{if( /x/ ) { if (<x><y/></x> if ([,,])) yield; else let __noSuchMethod__;} }");
tryItOut("if(__noSuchMethod__ = window) { if (<><x><y\r/></x></> /  /x/ ) constructor =  /x/g  else let prototype = this;}");
tryItOut("let (__iterator__ = window) { yield; }");
tryItOut("L: export *;");
tryItOut("while((({a2:z2})) && 0)return;");
tryItOut("{switch(((p={}, (p.z = <>export prop;</>)()))) { default: break L;break; case 5: (window);case 4: export __count__;case 9: break;  }if(prototype) [,,]; else  if (undefined) {} else constructor; }");
tryItOut("let (__proto__, @foo = <x><y/></x>) { return <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var __parent__.__proto__ in <><x><y/></x></> ? null : __proto__) {[1,2,3,4].slice(<y><z/></y>); }");
tryItOut("M:if(void \f<><x><y/></x></>) {yield; } else  if (delete #3={a:#3#} - <bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:eee></bbb>) const __noSuchMethod__;");
tryItOut("export *\n");
tryItOut("/*infloop*/for((<x/>)[<y><z/></y>]; (prop = <x/>); [<x><y/></x>].filter(function(q) { return q; })) __parent__");
tryItOut("let (prop = (([11,12,13,14].map).valueOf(\"number\")) .. (new Error([1]))[this], __parent__ = (-@foo.__lookupGetter__(\"__iterator__\"))) { const __parent__; }");
tryItOut("");
tryItOut("with({}) for(let y in []);");
tryItOut("L: __iterator__ = __proto__;");
tryItOut("/*infloop*/while(prototype['__iterator__'])(1e-81);");
tryItOut("return prototype = constructor;");
tryItOut("L: [z1];");
tryItOut("/*for..in*/for(var (Object(*::*)).__proto__ in function (__parent__, __proto__) { yield <><x><y/></x></> } ) const __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("prototype =  \"\" ;\n\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(prototype = __parent__.prototype in true.valueOf(\"number\") >>> ({constructor: this.__defineSetter__(\"__noSuchMethod__\", function ()this)})) {/*for..in*/for(const [prototype, __count__] = yield.prototype in window) {0x99; } }");
tryItOut("with({prototype: <x><y/></x> ? (-0) : __count__});");
tryItOut("var #3={a:#3#};switch([[]] >>=  /x/g ) { default: break L;break;  }");
tryItOut("L:if(<x/> *  \"\" ) {/*infloop*/for(let ({ prototype: \f({ prototype: __noSuchMethod__ }), __iterator__: [] }) = <><x/></>; ((function  __noSuchMethod__ (__count__, prop) {  } )()); <y><z/></y>.propertyIsEnumerable(\"__count__\")) {__noSuchMethod__;while(((-0)) && 0)export *; }/*infloop*/M:for([11,12,13,14].sort ? __noSuchMethod__ = window.throw( ''  && <><x><y/></x></>) : 'fafafa'.replace(/a/g, <x><y/></x>)--; ( ''  .. <x/>.__defineSetter__(\"prop\", Math.sin)); \f* >= this ^= this.__defineSetter__(\"__noSuchMethod__\", /a/gi)) export __proto__; }");
tryItOut("/*for..in*/for(__iterator__.prototype in (((<><x><y/></x></>).watch)( /x/g  .@x:: <y><z/></y>)))return;");
tryItOut("{gc() }");
tryItOut("if(eval(\"constructor = <x/>\", __iterator__.__iterator__)) {throw true;__proto__, prop } else  if ((+ /x/g ())) return; else {continue ;export __parent__; }/*for..in*/L:for(const __proto__ in eval(\"var __proto__;\", #3={a:#3#})) \rwith(<x/>)throw this;");
tryItOut("/*infloop*/M:for(let [, ({ __count__: prototype, prop: prop }), ({ __proto__: [] })] = (RangeError()); eval(\"{}\", <x><y/></x>); ( /x/ (constructor))) export prop; const __parent__;");
tryItOut("");
tryItOut("if(0/0) { if (__count__) {return .2; }} else  const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::__parent__ in undefined) eval");
tryItOut("export __iterator__;\nundefined;\n const prototype;");
tryItOut("while((1e81) && 0){export __proto__; }");
tryItOut("with(\n([15,16,17,18].filter((Math.sin).apply, this.__defineGetter__(\"constructor\", function  __noSuchMethod__ (__iterator__) { yield *::* } )))){if(false.@foo) {;; } else yield;; }");
tryItOut("M:if((([* for each (__iterator__ in <><x><y/></x></>)]) == false.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map))) {for(let y in []);const __count__ = this; } else /*infloop*/do {yield this;export *; } while(@foo);");
tryItOut("if(((uneval((({}).__lookupGetter__))))) var __noSuchMethod__ =  /x/g ; else  if (let (constructor, ({ __proto__: ({ __count__: __count__ }) }) = (<x><y/></x>.([,]))) __parent__) {var __proto__, __count__ = function ([y]) { }\ncontinue  } else ;");
tryItOut("/*for..in*/for(const [prop, __parent__] = <></> in <x><y/></x> -=  '' ) do {(__parent__); } while((<x><y/></x>\n) && 0);");
tryItOut("if(true) { if (__count__ = function::__proto__ = <x/>) return; else {with({}) { yield typeof (function ([y]) { })(); }  }}");
tryItOut("/*for..in*/for(const constructor in ((eval)(++constructor)))/*\n*/{{}if((1e+81)()) {break L; } else function () { yield undefined }  }");
tryItOut("if(prop = ({ constructor: prop })) M:with({__parent__: \f<x><y/></x>,  \"\" })(this); else  if ('fafafa'.replace(/a/g, 'haha'.split)) {(*); } else export *;");
tryItOut("with({__parent__: (({function::__iterator__*::*, prototype: @foo }).\t__defineGetter__(\"prop\", function(y) { yield y; ; yield y; }))})let(prototype =  /x/ ) ((function(){/a/gi})());");
tryItOut(" const __proto__;");
tryItOut("let __iterator__, __count__;");
tryItOut("/*for..in*/for(var __count__ in @foo) {<x><y/></x>;break ; }");
tryItOut("M:with((__noSuchMethod__))with({constructor:  /x/g }){let prop = 4., __parent__;return @foo; }\n");
tryItOut("L: __noSuchMethod__");
tryItOut("if((( /x/ .hasOwnProperty(\"__noSuchMethod__\")).*)) { if (( \"\" .isPrototypeOf(@foo))) export prop; else __proto__ = <><x><y/></x></>;}");
tryItOut("L: {var prop, __noSuchMethod__;yield window; }");
tryItOut("let constructor = -1;");
tryItOut("var prop;");
tryItOut("gc()\n(<x><y/></x>);\n");
tryItOut("let __proto__");
tryItOut("L:with(this.yoyo((arguments <<= [])))L: \nlet __parent__, __proto__ = window\nthis.zzz.zzz;");
tryItOut("{let constructor = null, __noSuchMethod__;M:switch(prop) { default: const constructor = let;break; case *::*: return;break;  } }");
tryItOut("var __parent__;break ;");
tryItOut("{return window;<><x><y/></x></>; }");
tryItOut("/*for..in*/for(__parent__ = this in 1e+81) {gc()export *; }");
tryItOut("while((eval(\"(({__proto__: <x><y/></x>}))\", (<x><y/></x>.propertyIsEnumerable(\"__iterator__\")))) && 0){let constructor, __proto__ = <x><y/></x>;function () { yield @foo }  }");
tryItOut("if(((function (__iterator__) { {} } ).call(<x><y/></x> %= <y><z/></y>, ))) with((<xxx>{__parent__}</xxx>.(<x><y/></x> >> *::*)))export constructor;");
tryItOut("with(true = true.constructor = ([15,16,17,18].sort((1 for (x in [])), <x><y/></x>))){/*infloop*/M:while((yield (window[<><x><y/></x></>]))){let __proto__;({ __parent__: __iterator__, <x><y/></x>: __iterator__ }) }let __noSuchMethod__ = <x><y/></x>, constructor = null; }");
tryItOut("with(undefined){var __count__, __count__; }");
tryItOut("if(\n(-0).constructor) {undefined; } else  if (@foo) {yield;(prop).watch }");
tryItOut("/*for..in*/M:for([__count__, prop] = ((uneval( \"\" ))).prototype.propertyIsEnumerable(\"constructor\") in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {switch(<y><z/></y>) { default: break M;break; yield; } }");
tryItOut("for(let y in [5,6,7,8]) with({}) { var __noSuchMethod__ = @foo, __count__ = __count__; } ");
tryItOut("/*infloop*/for(let __iterator__; (__parent__ = undefined); *.__defineSetter__(\"constructor\", <><x><y/></x></>)) {let prop = <x/>;return; }");
tryItOut("L: {with({}) { let setter =  /x/ , __proto__ = <x><y/></x>; }  }");
tryItOut("__iterator__ = __count__;");
tryItOut("{try { try { throw __noSuchMethod__; } catch(prop if ) { let(prototype = prototype, yield = 1.3) { prototype = [,,z1]; } catch(prototype) { throw StopIteration; } finally { prototype = prototype; }  } finally { throw prototype; }  }");
tryItOut("L:while((<x><y/></x> * *) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each((__noSuchMethod__) in prop) break L;/*for..in*/for(constructor =  in __count__) {(prop);prop = ({a2:z2}), constructor; } }");
tryItOut("with(eval(\" /x/  ^= <y><z/></y>\", <x><y/></x> << this))break L;");
tryItOut("L:switch(throw false) { case (~function ([y]) { }):  }");
tryItOut("/*for..in*/for(const  set __count__(prototype) { /*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in  /x/g ) {var __proto__; } }  in ((function  __iterator__ (({ __noSuchMethod__: ({ __parent__: ({ __iterator__: this }), __iterator__: __iterator__ }), __iterator__: ({ __iterator__: [, , (__parent__), function::prop.prototype, ] }) }))__proto__)(([({ prop: [, prop, , constructor, prototype] })] = ({ function::constructor: ({ __proto__: prop }) }))))){with(<x/> >>> this\n)continue ;(__parent__); }");
tryItOut("M:if(constructor = this) {; } else  if (\nthis) [1,2,3,4].slice");
tryItOut("let (__parent__, if(export *) { if (new (@foo)([ '' ])) var __noSuchMethod__, __count__ = prop; else {\twith({__parent__: [z1]}){const __proto__ = function ([y]) { };let __parent__ = false; } }}) { L:with(1.2e3){return;; }yield constructor; }");
tryItOut("switch(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { default: break; case x::prototype: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in (({constructor: ({__iterator__ setter: * })}))[__parent__ = <x><y/></x> &=  /x/ ]) switch('fafafa'.replace(/a/g, *::*) % <y><z/></y>) { case ({break L; })(<x><y/></x>.yoyo(#1=[#1#]), <y><z/></y>) .@*:: @foo: default: case (eval(\"5.0000000000000000000000\", *::*)): /*for..in*/for(let __iterator__ in #3={a:#3#}) continue L;break; yield *::*;break;  }");
tryItOut("M:with({__count__: ((<x><y/></x>)(1e+81))}){export prop;Math.pow }");
tryItOut("/*infloop*/L:for(const [__noSuchMethod__, [], ({ __proto__: ({ __noSuchMethod__: [constructor, , constructor] }) }), ] = 0.1; <xxx>{__noSuchMethod__}</xxx>.((([1,2,3,4].map).call( /x/ , ).__defineGetter__(\"__count__\", (0/0).__defineSetter__))); window for each (__iterator__ in [])\r if (this)) {/*infloop*/do throw  '' ; while(*::*);return <><x><y/></x></>; }");
tryItOut("with()/*for..in*/for(const prop in <x/>) (([,]).__defineSetter__).call\nL:if(new 0.1) {const prop = <><x><y/></x></>, constructor; } else {(<><x><y/></x></>).watch }\n");
tryItOut("/*for..in*/for(const prop = (033 .@x::  \"\" ).__lookupGetter__(\"__noSuchMethod__\") in [1].__parent__ = __count__) /*for..in*/for(constructor.__count__ in ((gc)((yield ({})) >>= new (({}).hasOwnProperty)()))){prototype }");
tryItOut("const prop = __iterator__, __noSuchMethod__;");
tryItOut("do @foo; while(((function () { var __noSuchMethod__, __proto__ = <><x><y/></x></>; } ).call(0, )[this].propertyIsEnumerable(\"__parent__\")) && 0)\t;");
tryItOut("throw StopIteration;");
tryItOut("let (__parent__ = @foo) {  }");
tryItOut("let(__iterator__) ((function(){<x><y/></x> = constructor;})());");
tryItOut("return\n");
tryItOut("L:if(--__count__.constructor getter= ( \"\" )) try { continue M; } finally { gc() }  else {/*for..in*/M:for(const [constructor, __count__] = prototype in <x/>) return; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(const __proto__ = window in __noSuchMethod__) gc()");
tryItOut("var __parent__; const delete;");
tryItOut("with(this){__iterator__ = 3, __parent__;__parent__ =  '' ; }");
tryItOut("return #3={a:#3#};\nyield <><x><y/></x></>;\n");
tryItOut("M:if((__iterator__.constructor)) {} else yield undefined;");
tryItOut("return <><x><y/></x></>\nif( \"\" ) let __parent__ = <><x><y/></x></>, __proto__ = -0;");
tryItOut("if((__proto__.(true instanceof __noSuchMethod__))) { if ((eval(\"(eval(\\\"return 0x99;\\\", ( \\\"\\\" .eval(false)) <<= __proto__.__count__ = this))\", (<><ccc:/*\n*/ddd><x><y/></x><x><y/></x><ccc:ddd></ccc:ddd></ccc:ddd></> = [[]].@foo)))) if(\nfalse.__defineSetter__(\"__proto__\", <x><y/></x>)) (prototype); else  if (const get) {yield  /x/g ; } else {break M;; } else {{}{} }}");
tryItOut("with( /* Comment */<x/>.propertyIsEnumerable(\"__proto__\"))return <bbb xmlns=\"<x/>\">yyy</bbb>;");
tryItOut("with(null){({}).hasOwnProperty\nreturn;\n }");
tryItOut("\nvar prototype =  '' , prop = __parent__;");
tryItOut("if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {<x/> } else  if ((undefined | undefined)) {yield;prototype; }");
tryItOut("/*infloop*/for(var [] = (throw (yield this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty))); ((1 for (x in []))\f).call(<><x><y/></x></>.isPrototypeOf(<x><y/></x>), ); this.__defineGetter__(\"constructor\", eval)) if(__iterator__) {export *;var constructor = this; } else  if (export *) {yield;{} } else {function  prototype (prop) { yield <x/> }  }__count__ = @foo;");
tryItOut("if((-3/0.hasOwnProperty(\"__noSuchMethod__\")) >>>=<x><y/></x>()) return; else  if ('fafafa'.replace(/a/g, function(q) { return q; })) return;");
tryItOut("/*for..in*/M:for([__count__, prototype] = ( /* Comment */<x><y/></x>) in undefined) (*);");
tryItOut("__proto__; const __proto__;\n/*for..in*/for(let prop = \n(<{__noSuchMethod__}> </{__noSuchMethod__}>.(<x/>.isPrototypeOf( /x/g ))) in (uneval(<y><z/></y>))) L:switch([[1]]) { default: case 3: with(({a2:z2}))throw  /x/g ; }\n");
tryItOut("M:do prop = *; while((<><x><y/></x><x><y/></x><!--yy--></>) && 0);");
tryItOut("while(((({__iterator__: window}))[new function () { return constructor; } (<x><y/></x>, [z1,,])]) && 0){gc()return <><x><y/></x></>; }");
tryItOut("return  /x/ ;\nvar prop, __parent__ = this;\n");
tryItOut("L: /*for..in*/for\t(var __count__ in *) {export __parent__; }");
tryItOut("let(__parent__ = \nyield (-1) for (prop in [1,,]) ) { throw __iterator__;");
tryItOut("/*infloop*/M:for(const constructor.constructor = String().throw(\f1e4); [<x><y/></x>].map((1 for (x in []))) ? * >> <x/> : <x><y/></x>.(<><x><y/></x></>); \n({})) {yield;yield  '' ; }");
tryItOut("/*infloop*/L:while(prop)__count__;");
tryItOut("/*infloop*/L:for(-prototype.(__noSuchMethod__ = __iterator__) setter= (constructor).__defineSetter__.@foo; __parent__ = <x/>;; ([<y><z/></y> if (0)])) {/*infloop*/while([window].some(({}).__lookupGetter__))window;constructor = undefined, constructor; }");
tryItOut("continue ;");
tryItOut("switch(null) { default: break; case 6: [1,2,3,4].sliceconstructor = window;break;  }\ndo {{}null; } while((prototype = __iterator__) && 0);");
tryItOut("return  ''  ^ #1#;");
tryItOut("return;");
tryItOut("/*infloop*/while( /* Comment */ '' ){return; }");
tryItOut("if(\n[,,] -= constructor.throw((new ([[]]).__defineSetter__(<x/>)))) if((Number(prototype, window))) { if (__count__ = <><x><y/\t></x></>) {const function::__parent__, __proto__ = <y><z/></y>;( \"\" ); }} else {export *; } else  if ((__noSuchMethod__ = __iterator__).__proto__ = let (prop, __iterator__) \f1e+81.eval(new function (prototype)#3={a:#3#}(<><x><y/></x></>))) {export __iterator__;export constructor; } else /*infloop*/for(var __proto__;  /x/g ; undefined) {export *;<x><y/></x>; }");
tryItOut("L:if(__proto__.prototype = <><x><y/></x></>) {yield [1,,];");
