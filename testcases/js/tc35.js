tryItOut("return <y><z/></y>;");
tryItOut("with({}) { export *; } ");
tryItOut("M:with(<><zzz>1e4.*</zzz></>)export *; const __parent__;");
tryItOut("/*for..in*/for(var [prototype, __noSuchMethod__] = new window.__lookupGetter__(\"constructor\") in ((arguments<\tx><y/></x>))) yield;");
tryItOut("/*infloop*/for(function::__iterator__ = let (__proto__ =  /x/g , __parent__(/) *::*; (((1 for (x in []))).call(function(id) { return id }, 1.2e3)); <x><y/></x> |= <x><y/></x>) gc() const __proto__;");
tryItOut("var __iterator__ = <x/>, __count__\nreturn;");
tryItOut("L:with(<><x><y/></x></>.@foo)let __parent__;");
tryItOut("let (prototype = <><x><y/></x></>) { gc }");
tryItOut("/*infloop*/for(let new __count__([11,12,13,14].map, *::*) for (__parent__ in <x/>) for (__count__ in true) for (__proto__ in 1.3); (prototype) = [constructor, ]; (/a/gi)) {{export *; }new Function }");
tryItOut("/*infloop*/for(var prop = <><x><y/></x></>;  '' ; prop) export *;");
tryItOut("do continue ; while((Array(<><x><y/></x></>)) && 0);");
tryItOut("with({get: (p={}, (p.z = (eval(\"*::*;\", <x><y/></x>)))())}){gc()var , prop; }");
tryItOut("<x/> ? window * <x><y/>\f</x> : ((eval(\"<x/>\", <x/>)) if (<><x><y/></x></>))\n{}\f");
tryItOut("M:if(#2=<><x>\r<y/></x></>.valueOf(\"number\")) if(<><x><y/></x></>) {let __parent__,  =  '' ;(<><x><y/></x></>); } else  if (<x/>) yield; else  if (*::* for (x::prop in <x/>)) {throw #3={a:#3#}; } else {}");
tryItOut("do do { } while((<><x><y/></x></>) && 0); while(([window].map(function(q) { return q; })) && 0);");
tryItOut("return <x><y/></x>.eval(<y><z/></y>);");
tryItOut(" for (constructor in [let (constructor) 0]) for each (__parent__ in ((<y><z/></y>).watch())) for (__proto__ in <{__noSuchMethod__}><x><y/></x>yyy</{__noSuchMethod__}>) for each (constructor in <x><y/></x>.hasOwnProperty(\"__count__\")) for (__proto__ in null)");
tryItOut("/*infloop*/for(({ __count__: ({ prop: ({ __proto__: null.__iterator__, __iterator__: __proto__ }) }) }) = (yield false); __iterator__.__noSuchMethod__ getter= Math.sin.propertyIsEnumerable(\"constructor\"); ((({ prop: __proto__, __parent__: __iterator__ }) = ([[]] >= <x><y/></x>))[(<{/*\n*/__count__}> </{__count__}>.((3.141592653589793.@foo)))])) /*for..in*/for(var __iterator__.__parent__ in  \"\" ) {break M;throw <x/>; }");
tryItOut("/*for..in*/for(const [__iterator__, __count__] = gc().__lookupSetter__(\"prototype\") ? __iterator__ = null :  /x/ .yoyo( \"\" ) in true ? * : <><x><y/></x></>) [1,2,3,4].slice");
tryItOut("M:with(__parent__()--){trueyield <y><z/></y>; }");
tryItOut("continue ;");
tryItOut("L: gc()");
tryItOut("M:switch(this.watch(\"prop\", function  __count__ () { yield 1.2e3 } )) { default: continue ;break; case <y><z/></y>: break; L: let  = <x><y/></x>, __noSuchMethod__ = 033;break; case (({ set __count__(__iterator__, constructor)<x><y/></x> !== 1e81, __proto__: delete  })): break; case ((yield *)) @ (this.__defineGetter__(\"prototype\", ({}).__lookupGetter__)): export __iterator__;break; break; case 6: break; case 1: break;  }");
tryItOut("let (constructor, function::constructor) {  }");
tryItOut("");
tryItOut("switch(<y><z/></y>) { case <><x><y/></x></>: case 6: break;  }");
tryItOut("L:with({__proto__: gc()})let __parent__, __parent__;\n(this);\n");
tryItOut("/*infloop*/for(let __proto__;  ''  || #3={a:#3#}; #3={a:#3#} ==  /x/g ) var <x><y/></x>, __noSuchMethod__;");
tryItOut("let (__iterator__ = undefined.constructor) { false; }");
tryItOut("with(__noSuchMethod__.(__iterator__)){{}export *; }");
tryItOut("L:with( \"\" ){__proto__; }");
tryItOut("/*infloop*/M:for(({ __proto__: __noSuchMethod__ }) = (yield [1,,]); prop; <x/>) var constructor;");
tryItOut("<ccc:ddd> </ccc:ddd>");
tryItOut("/*for..in*/for(var __proto__ in this) false");
tryItOut("/*infloop*/do {L:with(null){yield;return; }return; } while(<x><y/></x>.__defineSetter__(\"__proto__\", ({}).hasOwnProperty).@*);");
tryItOut("; const __parent__;");
tryItOut("return (__parent__.(null));");
tryItOut("throw __parent__;");
tryItOut("L:while((this) && 0){return window;function () { yield false }  }\nif(<y><z/></y>) {return; } else  if (<><x><y/></x></>) { /x/g  }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("with((yield  /x/g .propertyIsEnumerable(\"__iterator__\")))yield;");
tryItOut("if(<><x><y/></x></> if ( /x/g )) { if (__parent__ =  '' ) break ; else {return;(__parent__); }}");
tryItOut("");
tryItOut("/*infloop*/for(var prototype; *::*; prototype) return  '' ;");
tryItOut("return;");
tryItOut("/*infloop*/while(((-3/0 if (<><x><y/></x></>)) -= <><></></>)){if(constructor.__parent__ getter= eval) {yield <x/>; } else  if (<x><y/></x>.__defineGetter__(\t\"constructor\", (new Function(\";\")))) {throw this; }export __parent__; }");
tryItOut("for(let y in [5,6,7,8]) yield ('haha'.split)().watch(\"prop\", function () { yield <><x><y/></x></> } );");
tryItOut("__parent__");
tryItOut("{}");
tryItOut("({ __count__: prototype }) = eval(\"eval\", [1,,]), prototype;");
tryItOut("return;");
tryItOut("/*for..in*/for(var __parent__ in undefined.@*) {function  __noSuchMethod__ (__iterator__, function::__proto__)-1 }");
tryItOut("let(null = <><x><y/></x></>) ((function(){export *;})());\nL:switch(<><x><y/></x></>) { default: throw 1.2e3;case 9:  }\n");
tryItOut("if(* >= 4.) {gc(); }");
tryItOut("/*infloop*/do { } while(<y><z/></y>);");
tryItOut("L:with({__iterator__: (this ?  \"\"  : *)})(-0);");
tryItOut("if(((<x><y/></x>.__iterator__ = prop) ^= 'fafafa'.replace(//h\n/a/g, window in @foo))) { if ((<>yyy</>.@*)) if((Math.pow).call(constructor, [,,z1], <x><y/></x>)) const constructor, __noSuchMethod__ =  \"\" ; else  if (*::*.*) yield;} else {return;\nbreak ;\ngc() }");
tryItOut("L:with(/a/gi()){export prop; }");
tryItOut("if((<>__count__ = ({ __parent__: __proto__, __count__: __noSuchMethod__ })</>.isPrototypeOf(this))) { if ((<x><y/></x>.(<x><y/></x>))((new new Function(<x><y/></x>)))) if( \"\" ) continue M; else  if (__parent__ = (this ? <!--yy--> : 0/0)) {return; }} else return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <><x><y/></x></> ? undefined : *::*++ << <><ccc:ddd><!--yy--></ccc:ddd></>) switch(<x><y/></x>) { case 1.2e3: break; case 4: false;let prototype = <><x><y/></x></>, prop =  /x/g ;break;  }");
tryItOut("while((([prop.__parent__])) && 0){(window);throw __parent__; }");
tryItOut("/*infloop*/L:for(const *.constructor = 'fafafa'.replace(/a/g, gc).@foo; <x><y/></x>; break M) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in (false++)) /*for..in*/M:for(const __noSuchMethod__ in __count__.__count__ getter= Function) {return; }");
tryItOut("L:while((*) && 0)return false;");
tryItOut("/*infloop*/do {__noSuchMethod__;const constructor, __count__ = __count__; } while(false);");
tryItOut("break M;");
tryItOut("switch((new String(this))) { case 3:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in <><x><y/></x></> >>> null) {const __noSuchMethod__ = <><x><y/></x></>, __parent__; }\n");
tryItOut("let constructor = <x><y/></x>");
tryItOut("if(null.*) { '' ; } else  if (1e4) prototype, __proto__;/*\n*/");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(\flet __iterator__.__count__ in new (null)()) {M:with( \"\" ){export prototype; }/*infloop*/while((RegExp())){; } }");
tryItOut("__proto__ = delete;");
tryItOut("M:while((<x/> *= <><x><y/></x></>) && 0);");
tryItOut("/*infloop*/for(var prototype; ([15,16,17,18].sort(([1,2,3,4].slice).apply, window)); __noSuchMethod__.__proto__ setter= 'haha'.split) {{}let (__count__ = 5.0000000000000000000000, //h\nthrow <><x><y/></x></>; = *::*) {  } }");
tryItOut("/*for..in*/for(const __count__ in (-0)) var prototype = <x><y/></x>;");
tryItOut("/*for..in*/for(const __proto__ in ((new Function)((this / <><x><y/></x></>))))if(eval(\"with({__proto__: [1]})return 1e-81;\", 4.)) {(0.1).__defineSetter__ } else  if (<y><z/></y>.prop\t) {; }");
tryItOut("L: {yield;L: 1e+81 }");
tryItOut("with((@foo)())let prop;");
tryItOut("with({__count__: (((<x><y/></x>.prop = <x><y/></x>)[*]).__defineSetter__ << (<x/> >=  '' .__defineGetter__(\"__noSuchMethod__\", (new Function(\"yield;\")))))})with({constructor: new ('haha'.split)(<><x><y/></x></>)}){}");
tryItOut("/*infloop*/M:forconst constructor = [15,16,17,18].map(({ prop: __noSuchMethod__ }) = 5.0000000000000000000000.hasOwnProperty(\"constructor\"), __parent__ = this); (<x><y/></x>.__lookupSetter__(\"__count__\")).prototype; <y><z/></y>) L:if(false) {(1.2e3); } else {; }");
tryItOut("{( '' ); }");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/do export __proto__; while([[1]]);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (<><x><y/></x></>\n) in __iterator__) var __count__;");
tryItOut("while((@foo) && 0)throw <><x><y/></x></>;");
tryItOut("{<x/>;try { export __noSuchMethod__; } finally { return this; } ; }");
tryItOut("do {/*infloop*/do export *; while(((function(y) { yield y; var constructor;; yield y; }).call(<x/>, <><x><y/></x></>, <x><y/></x>))); } while((__proto__.__iterator__ setter= window.yoyo(-[z1](Error( /x/g , -0), [[]]))) && 0);");
tryItOut("yield; const constructor;");
tryItOut("{return <y><z/></y>; const getter;/*for..in*/for(prototype in <y><z/></y>) {Math.sinexport *; } }");
tryItOut("yield window >= <y><z/></y>\f;");
tryItOut("let (__parent__ = (yield (eval(\"<x><y/></x>\", true))).__iterator__, __proto__) { throw ; }");
tryItOut("with(window){{null;/*infloop*/for(var [, , constructor, __iterator__, __parent__] = this ^= <><x><y/></x></>;  set __count__ constructor (({ prototype: [, ], __count__: ({ __noSuchMethod__: __noSuchMethod__ }) }), prop) { yield constructor.throw(false) } ; (<y><z/></y>)( /x/g )+=<x><y/></x> + <x><y/></x>) {/*for..in*/M:for(let __count__ = window in 0x99) {export *;const __parent__, __noSuchMethod__ = window; }gc() } } }");
tryItOut("with({}) return this.zzz.zzz;");
tryItOut("with([1,2,3,4].map(function  let () { return true } , <><x><y/></x></>.__lookupSetter__(\"__proto__\")) ^ RangeError(5.0000000000000000000000.@*))/*for..in*/for(__proto__ = <><x><y/></x></> in @foo) ");
tryItOut("var __iterator__ = <x><y/></x>;");
tryItOut("if(__iterator__) {(this);L:if(<y><z/></y>) {yield; } else  if (constructor) ( /x/g ); }");
tryItOut("if(yield) { if (case 7: {}break;  .@*:: <><x><y/></x></>) {const __noSuchMethod__ = <><x><y/></x></>; } else {return;export *; }}");
tryItOut("let (__iterator__ = <>(this.propertyIsEnumerable(\"__parent__\"))</>.(*.__noSuchMethod__ = <x><y/></x> & ({a1:1}))) { switch(<><>__count__ < __iterator__ = <><x><y/></x></></zzz><><x><y/></x></>;</>) { case __parent__ = constructor: break;  } }");
tryItOut("yield this;");
tryItOut("/*infloop*/L:while([,]){yield [,,z1];yield; }");
tryItOut("L: {return *::*;null; }");
tryItOut("export __iterator__");
tryItOut("gc()\n;");
tryItOut("L:if(prototype.__parent__ =  \"\" ()) { if (<y><z/></y>) return;} else {yield true;if(<y><z/></y>) { if (1e+81) {<x><y/></x>;yield; } else export *;} }");
tryItOut("(undefined); const prop;");
tryItOut("let(__proto__) ((function(){return;})());");
tryItOut("L:if( \"\" ) {const __proto__, __count__;throw __noSuchMethod__; }");
tryItOut("with({}) prop");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in (prop = 0x99)) {yield;yield\n<y><z/></y>; }");
tryItOut("L:with(eval(\"[[]]\", <><x><y/></x></>))export *;");
tryItOut("/*for..in*/for(let __proto__ in (([1,2,3,4].slice)((yield __noSuchMethod__ = constructor >= <x><y/></x>)))){[]-0; }");
tryItOut("/*infloop*/while((yield  \"\" ))return;");
tryItOut("M:with({__iterator__: (undefined <  '' \n @ )})/*infloop*/for(__noSuchMethod__ =  /x/g ; true; -0) yield @foo;");
tryItOut("/*for..in*/L:for(let constructor in ((p={}, (p.z = window)()))) {/*infloop*/((-1)).__defineSetter__ }");
tryItOut("let __iterator__, __count__;yield  '' ;");
tryItOut("get = prop;");
tryItOut("M:while(((__noSuchMethod__.throw(*::*))) && 0)yield <></>;");
tryItOut("new Function");
tryItOut("M:if([z1]) { if (__proto__)  else ;}");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("let(__proto__) { new Function");
tryItOut("yield *;");
tryItOut("while(( \"\" ) && 0){gc()return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__proto__) in prototype.prop) ({ __noSuchMethod__: [], __parent__: [] }) = true-- <<= (eval(\"*::*\", <x><y/></x>));");
tryItOut("let(prototype = (<><x><y/></x></> *= undefined).__defineSetter__(\"__count__\", (undefined).__defineSetter__//h\n)) ((function(){for(let y in [5,6,7,8]) let(__noSuchMethod__, __proto__ = __proto__ = <x><y/></x>, prototype) { throw __proto__;})());");
tryItOut("{__count__with({prototype: 3}){throw <><x><y/></x></>; } }");
tryItOut("throw StopIteration;");
tryItOut("yield;");
tryItOut("/*infloop*/while(--@foo -= #3={a:#3#}.throw(null) *= new ('haha'.split())(true .@x:: constructor)){__proto__; }");
tryItOut("L: constructor, __iterator__;");
tryItOut("/*for..in*/for(var (false)( '' ) in <><x><y/></x></>) { }");
tryItOut("/*for..in*/M:for(var [__parent__, \fprototype] = constructor = <x/> in (__iterator__+=*::*)) with({prop: this})yield;");
tryItOut("with((__parent__ = <><x><y/></x></> <= ((yield 5.0000000000000000000000)))){continue M;let __count__; }");
tryItOut("/*infloop*/for(let (__parent__) <x/>; try { yield __iterator__%=<><x><y/></x></>; } catch(__parent__ if 'fafafa'.replace(/a/g, ({}).__lookupGetter__)) { throw StopIteration; } catch(__parent__ if get) { return; } catch(__count__ if (function(){try { export *; } finally { ; } })()) { throw __proto__; } catch(__iterator__ if (function(){break ;})()) { let(prop = -3/0) ((function(){break ;})()); } catch(prototype) { return; } ; <x/>) {yield;export constructor; }if(this :: <x><y/></x>) {continue ; } else  if (eval(\"function(id) { return id }\", [z1,,])) return @foo;");
tryItOut("{if(<><x><y/></x></>) { if ( \"\" ) continue M; else {Functionyield <x><y/></x>; }}return; }");
tryItOut("/*infloop*/L:for(<x><y/></x>.throw(<y><z/></y>); <y><z/></y> | prototype.(__iterator__ = undefined); (uneval((this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice))))) constructor");
tryItOut("const __count__ = [,], constructor = <x><y/></x>;");
tryItOut("/*infloop*/for(var constructor; <xxx {__count__}={__count__} />.(<><bbb xmlns:ccc=\"__proto__.__parent__\"><ccc:eee></ccc:eee></bbb>yyy</>); __count__ = <x><y/></x>) {if(1.3) {throw @foo; } const prop; }");
tryItOut("L:with(({}))__iterator__, __count__ =  \"\" ;");
tryItOut("/*infloop*/for(({ __iterator__: function::__iterator__ }) = (Function); constructor = ((<x><y/></x>.(<><x><y/></x></>)))(); ((prop -= function ([y]) { }.yoyo(delete <><x><y/></x></>)))) {switch(__count__.__iterator__ = window) { default:  } const prop; }");
tryItOut("/*for..in*/for(let [getter, __proto__] = !__iterator__ ? prop : <x><y/></x> in __noSuchMethod__) /*for..in*/for(let __noSuchMethod__ in (\t(function () { throw this; } )(<><x><y/></x></>))){return; }");
tryItOut("return;");
tryItOut("{export *;gc() }");
tryItOut("return;");
tryItOut(" { yield ~eval(\"export *;\", <x><y/></x>) } do throw constructor; while((([11,12,13,14].filter)) && 0);");
tryItOut("while(((<><x><y/></x></>.__defineGetter__(\"constructor\", /a/gi)) &= (<y><z/></y> .. undefined)) && 0){var prototype, __count__ = true; }");
tryItOut("{export *;if((\n \"\" )) (*); else  if (default: /*infloop*/for(<x><y/></x>.yoyo(<><x><y/></x></>).__defineSetter__(\"__count__\", (function (__proto__, constructor)__proto__).apply); Math.pow(); __parent__ = (p={}, (p.z = *::*)())) {yield; }break; case prop: ) export prop\t; }");
tryItOut("/*infloop*/for(var ; ((yield <x><y/></x>)); (yield <x><y/></x>)) {var [1] = *;yield __proto__; }");
tryItOut("L:if(undefined) { if (-3/0) yield  /x/ ; else __count__ = ({a1:1}), prop;}");
tryItOut("{((new Function(\"\"))).apply }");
tryItOut("while(((yield [15,16,17,18].some(gc, this))) && 0){with({__noSuchMethod__: <x/>}){this; }/*infloop*/M:for(const [, , constructor, ] = __iterator__; ((p={}, (p.z = @foo)())); !this) { } }");
tryItOut("if(033) __parent__; else  if ((new RangeError(true))(<y><z/></y> | <y><z/></y>)) throw StopIteration;");
tryItOut("{prop }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <xxx>{constructor}</xxx>.((#0=[<x><y/></x>].__parent__ = <x><y/></x>.__lookupGetter__(\"prop\")))) /*for..in*/for(var __parent__ in .2) break M;");
tryItOut("let prop = true, function::__parent__;");
tryItOut("/*infloop*/do prop, constructor = this; while(([__proto__].filter(function  prototype ()null)));");
tryItOut("let(__noSuchMethod__) { try { yield true; } finally { try { ; } finally { export prototype; }  } ");
tryItOut("{/*infloop*/for(constructor = <><x><y/></x></>; eval(\"export *;\", 5.0000000000000000000000); gc()) export __parent__; }");
tryItOut("if(this) M:if(eval(\"false\", -0)) return [[]]; else {yield undefined; }");
tryItOut("M:if(({a2:z2})) { if (eval(\"(new function(y) { yield y; switch(<y><z/></y>) { case 7: break;  }; yield y; }(__parent__.__parent__))\", eval(\"switch(this) { case 9:  }\", [<x><y/></x> for (__proto__ in [,,z1])]))) {/*for..in*/for(let prototype = [undefined].filter(gc) in (function ([y]) { })()) @foo; } else {break ;function (export __count__;) ''  }}");
tryItOut("switch((this.zzz.zzz)) { case 4:  { (1e+81\t); } ;default: case (new (033)()): break;  }");
tryItOut("try { for(let y in []); } finally { let(({ prop: [] })) { {} } ");
tryItOut("{if(<x/>) {return;var __iterator__; } else  if (__count__) {return; }constructor = this; }");
tryItOut("M:if(*) {} else {throw true; }");
tryItOut("yield *::*;");
tryItOut("/*for..in*/for(const [__count__, __count__//h\n] = *::*.__parent__ in (prop)) (4.);");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/for(const constructor in ((Math.sin)(((.2 >>= this)))))if(null) { if (arguments) (*::*); else {;{} }}");
tryItOut("/*infloop*/for(let ({ __count__: __proto__ = <x><y/></x> }) = eval(\"return true;\", __proto__); (yield __noSuchMethod__.__count__); (<x><y\t/></x> ==  \"\" ) in new (Function)(window)) {const __noSuchMethod__ = prop; }");
tryItOut("/*for..in*/M:for(__iterator__ in [[]]) {export __parent__;\n(*::*);\n }");
tryItOut("/*infloop*/do {return  '' ;prototype; } while(('fafafa'.replace(/a/g, (function  __iterator__ ()false).apply)).propertyIsEnumerable(\"__iterator__\"));");
tryItOut("if((continue )) {break ; } else  if ([1,2,3,4].map()) {export *;let prop, __count__; } const prototype;");
tryItOut("if([15,16,17,18].filter(Math.pow, 1e81)) {function(y) { yield y; ; yield y; }let prototype = arguments; } else function (constructor, __count__)[z1]yield window;");
tryItOut("if((constructor.hasOwnProperty(\"prototype\"))) { if (('fafafa'.replace(/a/g, false))) {let __count__;; } else var constructor, __count__;}");
tryItOut("do {this;continue ; } while((constructor = __parent__) && 0);yield __count__ = *::*;");
tryItOut("{throw 033;gc() }");
tryItOut("if( '' ) { if (<x><y/></x>) {prototype } else {__proto__ }}");
tryItOut("while((({__parent__ setter: (new Function(\"gc()\")), __proto__: @foo })) && 0)");
tryItOut("continue ;");
tryItOut("/*infloop*/L:while((5.0000000000000000000000)){Functionexport __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var each in (function ()throw StopIteration;).call((__noSuchMethod__ = <><x><y/></x></> >=  \"\"  + -1), (p={}, (p.z = #1=[<>__iterator__ getter: [1,2,3,4].slice</>].unwatch(\"__parent__\"))()), (function () { yield @foo } ))) if(__count__ =  '' ) { if (~*::*) prototype, prototype = ({});} else gc()");
tryItOut("/*for..in*/for(var __parent__.prop in (([1,2,3,4].map)(#2=[constructor = <x><y/></x> |= let (prop, prototype = *::*) true]))){__iterator__;break ; }");
tryItOut("L: /*for..in*/for(var [prototype, __iterator__] = __noSuchMethod__.prop = null .. this in  \"\" .eval(*)) const __count__, __count__ = prototype;");
tryItOut("__proto__ = prototype;");
tryItOut("while((<><x><y/></x></>) && 0)(false)\n");
tryItOut("__noSuchMethod__, __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in false) with({__proto__: __parent__}){yield window; }");
tryItOut("return;\n{}\n");
tryItOut("if(prototype.prop) {__parent__;throw @foo; } else  if (new  /x/ ()) <x><y/></x>;");
tryItOut("/*infloop*/do /*for..in*/for(const __count__ in ((function  constructor () { throw <x><y/></x>; } )( /x/ ))){yield <y><z/></y>;return; } while(3/0.unwatch(\"__noSuchMethod__\"));");
tryItOut("L:if((this.__defineSetter__(\"__iterator__\", (false).__defineSetter__))) { if (<x><y/></x>.__proto__) {export prop; }} else {}");
tryItOut("return; const prototype;");
tryItOut("/*infloop*/while(this\n <<= ({__proto__: (Array(*, 1e4)), __parent__: ({__count__ setter: [1,2,3,4].slice,  set prototype(__iterator__) { yield 1.2e3 }  }) })){L:if(<x><y/></x>) { if (1e81) {continue M; } else {throw <y><z/></y>; }}Math.pow }");
tryItOut("do {(3/0);(prop); } while(((<y><z/></y> + <><x><y/></x></> .@*:: <x><y/></x>)) && 0);");
tryItOut("with({__parent__: function(id) { return id }})<x/>;\n{}\n");
tryItOut("L:'if(this) { if (0.1) export *; else {throw {gc() };yield; }}");
tryItOut("L: {;\nconstructor, __proto__;\n/*infloop*/for(const __iterator__ = window;  '' ; return;) {throw __iterator__;break L; } }");
tryItOut("//h\nwith({__noSuchMethod__: (-0)})yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in prop) {( \"\" ); }");
tryItOut("throw __noSuchMethod__;");
