tryItOut("return 1e+81 || ({a1:1});");
tryItOut("let (prototype = function ([y]) { }, __proto__ = window) { {} }");
tryItOut("/*for..in*/for(var constructor in ((({}).hasOwnProperty)(new function ([({ prototype: ({ __count__: export *;, __count__: prototype }), __parent__: __proto__ })]) { M:if(true) {var __count__ = 1e+81;(<x/>); } } (__proto__ = true.@*))))/*infloop*/while(<><x><y/></x></>.__lookupSetter__(\"prototype\"))yield  /x/g ;\t");
tryItOut("if(({__proto__:  /x/ , __iterator__ setter: [1,2,3,4].slice })) return <x><y/></x>; else  if (null ? __count__ : __proto__) \r{export *; }");
tryItOut("__proto__, constructor;");
tryItOut("/*infloop*/for(const prop; (+*); false.__lookupSetter__(\"__parent__\")) M:if(\n*::*) { if ((yield *)) continue ; else {throw <x><y/></x>;yield  /x/ ; }}\n");
tryItOut("/*for..in*/for(let __parent__ = __count__+=true.@* in false++) {yield;__noSuchMethod__; }");
tryItOut("/*for..in*/M:for(__count__ in __iterator__) {window; }");
tryItOut("M:if(@foo) {{}var <x><y/></x> = <><x><y/></x></>; } else  if (<x><y/></x>) gc()");
tryItOut("for(let y in []);");
tryItOut("(0/0);");
tryItOut("(*::*);");
tryItOut("if(*) {gc() }");
tryItOut("L:if(({__count__: [1,,] })) throw @foo; else {L: {export __count__;function (prop, __count__) { yield false }  }export __proto__; }");
tryItOut("\n");
tryItOut("__parent__ = <x><y/></x>");
tryItOut("L: *");
tryItOut("throw  /x/ \nexport *;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var __parent__ = __iterator__ = this in null) {let prototype, __iterator__; }");
tryItOut("if(new ((1 for (x in [])))(undefined.valueOf(\"number\"), #1#)) {var __iterator__ = [,,];/*for..in*/L:for(__parent__.prototype in <x><y/></x>) {const prop = this, __proto__; } } else {with({prototype: <><x><y/></x></>}){return *;; } }");
tryItOut("/*for..in*/for(const prop in (((1e81).watch)(<x/>)))let __noSuchMethod__ = [];");
tryItOut("/*infloop*/for(__count__.( '' ); ((5.0000000000000000000000)[ '' ]); <x/> %= <x><y/></x>) yield window;");
tryItOut("/*for..in*/for(let constructor.__count__ in (((([1,2,3,4].map)()).apply)(prototype = <x><y///h\n></x>)))while(((({}).hasOwnProperty)) && 0)return;");
tryItOut("while((#2=this.__defineGetter__(\"__parent__\", /a/gi)) && 0)break \n__noSuchMethod__");
tryItOut("let(constructor = (++(prop =  /x/g ))) ((function(){/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in ~this) {}})());");
tryItOut("M:with(({}) || <x><y/></x>){break M;yield case __iterator__: case 7: break; ; }");
tryItOut("try { for(let y in []); } finally { throw __count__; } \n");
tryItOut("if(__noSuchMethod__ = __count__) {gc() }");
tryItOut("let __count__ = arguments.isPrototypeOf([1,,]), prop; const __iterator__;");
tryItOut("if(new function(q) { return q; }()) <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.__count__, void __proto__%= /x/ ");
tryItOut("/*for..in*/for(*.__iterator__ in ((Math.pow)(window)))with({constructor: (__iterator__ = 0)}){{} }");
tryItOut("{export *;(__parent__); }return;");
tryItOut("/*for..in*/for(var prototype =  /x/g \n in  \"\" ) continue ");
tryItOut("M:if(@foo & null) { if ((__iterator__.__iterator__ = <><x><y/></x></>)) {let __count__ = true, __iterator__;return; }} else {yield <x><y/></x>;<x><y/></x>; }");
tryItOut("/*infloop*/for(({ \"\" : .2, __proto__: @foo }); window; ( \"\" )[false]) {throw @foo; }");
tryItOut("if(__iterator__.__iterator__ = <x><y/></x>) /*for..in*/L:for(const [prototype, __parent__] = window in 4.) var __iterator__, __proto__ = __count__; else  if ((eval(\"({ get __parent__ __proto__ () { yield this }  })\", (prop)))) {constructor, __count__ = null;let function::prop, __iterator__ = this; } else {{}function(q) { return q; } }");
tryItOut("/*for..in*/for(__iterator__ = [window].sort(function  __parent__ (__noSuchMethod__) { return * } ) in new Iterator(@foo.valueOf(\"number\") ? prop.throw(<x><y/></x>) : false / @foo, ((-0) > 0/0)) .@*:: ({__parent__ setter: function(q) { return q; }, prop setter: function(y) { yield y; gc(); yield y; } })) {{}\nif((p={}, (p.z = constructor.__parent__ = true)())) {return <x><y/></x>;var constructor, prototype; } else  if (__parent__.__parent__) return 033; }");
tryItOut("do {M:if(( /x/ .@foo)) export __iterator__; } while(([] = [, ]) && 0)\nlet (__noSuchMethod__, __noSuchMethod__) { (<x><y/></x>/*\n*/); }\nreturn;\n const prototype;");
tryItOut("M:\twith({constructor: __parent__ .@x:: null}){delete; }");
tryItOut("throw 1e+81");
tryItOut("for(let y in [5,6,7,8]) default: case (({constructor: ([,,z1]())})): /*infloop*/L:for(const prototype = <x><y/></x>; <><x><y/></x></>; *::*) {yield *::*;gc() }break; ");
tryItOut("__proto__ = prop;");
tryItOut("yield this;let __iterator__ = __noSuchMethod__;");
tryItOut("M:if(this) {{} } else  if ( /x/g ) __noSuchMethod__; else {;export *; }");
tryItOut("let (prop = (<><x><y/></x></>).call([z1,,], null, <x><y/></x>), __count__) { gc() }\f");
tryItOut("/*for..in*/for(let __proto__.constructor in \f<y><z/></y> ? [z1] : <y><z/></y>) with({}) __iterator__ = undefined;");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(__count__; (let (__iterator__ = #3={a:#3#}) 1.2e3); <{__count__}> </{__count__}>.(* &= <><x><y/></x></>)) {if(function(id) { return id }) {<><x><y/></x></>; } }");
tryItOut("if((uneval(<><x><y/></x></>))) {case 6: break; break; [,] } else  if (null.prototype .@x:: <><x><y/></x></> >= @foo) <y><z/></y> else (constructor);");
tryItOut("{} const __proto__;");
tryItOut("do {export * } while(((p={}, (p.z = (<bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>.(this)))())) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((({}).hasOwnProperty)(__iterator__\n)))gc()");
tryItOut("throw false;{{} }");
tryItOut("L:if(--undefined) return (gc).call( /x/ , ); else {{var  = __count__, __iterator__ = 1.2e3; }let (__count__ = 0/0) { return *::*; } }");
tryItOut("/*infloop*/L:for(__noSuchMethod__; ((<><x><y/></x></>)[0x99]); __iterator__.(window)) {export *;gc() }");
tryItOut("yield \n( /* Comment */<y><z/></y>);");
tryItOut("yield;export *\f;");
tryItOut("yield ('fafafa'.replace(/a/g,  \"\" )) *= [z1];");
tryItOut("if(__parent__.(__noSuchMethod__ = this.__defineSetter__(\"__noSuchMethod__\", #3={a:#3#}))) {{var __count__ = <><x><y/></x></>, __proto__; }with(<><x><y/></x></>)export *; } else  if (Function) {/*for..in*/L:for(__count__(1e-81) in \t[,,z1]) ; '' \n } else {/*for..in*/L:for(var ({ prototype: ({ prop: prototype }), prototype: ({ constructor: __noSuchMethod__ }) }) in this for (constructor in <x><y/></x>)) 0;gc() }");
tryItOut("/*infloop*/for(var prop; (new new Function(null.prototype, <x><y/></x>)); @foo) {<x><y/></x>; }\t");
tryItOut("([1,2,3,4].map).call const __noSuchMethod__;");
tryItOut("if(<bbb xmlns=\"this[(function ([y]) { })()]\"> </bbb>.((@foo + *))) {yield  /x/ ; }");
tryItOut("if(([11,12,13,14].map)) { if ((<x/>)[null].watch(\"__count__\", function  __count__ (prototype, __count__) { yield <x><y/></x> } )) } else prototype, __count__;");
tryItOut("let (prop) { (*::*); }");
tryItOut("if(<x/>) let __proto__ = <><x><y/></x></>, __proto__ = <x><y/></x>;\f else  if (<><x><y/></x></>.__defineSetter__(\"prop\", 'haha'.split)) {[,]; } else {<y><z/></y>; }");
tryItOut("[1,2,3,4].slice");
tryItOut("return constructor = __parent__-=<x/>;");
tryItOut("/*infloop*/while(<x/>){throw  /x/ ; }");
tryItOut("if((<x><y/></x>.*)) {const __proto__ = <><x><y/></x></>, __iterator__ = *::*\t; }");
tryItOut("with({__iterator__: (({prototype setter: ({}).hasOwnProperty, prop: typeof window })\n)}){/*infloop*/for(var constructor; false; __count__) return @foo; }");
tryItOut("{<x><y/></x>; }");
tryItOut("if((window).__defineSetter__) export *; else []; const __count__;");
tryItOut("if((p={}, (p.z = window)()).__defineSetter__(\"__parent__\", function (__noSuchMethod__, constructor) { yield this } )) {const constructor = [1,,], this = true; } else {return; }");
tryItOut("/*for..in*/for(let (__noSuchMethod__) in (((1 for (x in [])))([({ constructor: prop, __parent__: prop }), , ] = (null.propertyIsEnumerable(\"constructor\"))))){throw true;; } const __noSuchMethod__;");
tryItOut("/*infloop*/do {<x><y/></x>; } while(prototype.(<x><y/></x>.valueOf(\"number\")));");
tryItOut("yield  /* Comment */1e-81;");
tryItOut("yield 1.2e3;'haha'.split");
tryItOut("{gc() }");
tryItOut("if(yield <x><y/></x>) return; else {return; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (([z1])(this))){export __iterator__;constructor = undefined; }");
tryItOut("with({__noSuchMethod__: *}){throw StopIteration; }");
tryItOut("{<x><y/></x>;yield __count__; }");
tryItOut("M:do {throw this;export *; } while((__proto__.__iterator__) && 0);");
tryItOut("L:do  for (null.__noSuchMethod__ in <y><z/></y>.(this.__defineGetter__(\"constructor\", [1]))) for each (x::__noSuchMethod__ in ((<x/>[<x><y/></x>])(([<x/>].sort((.2).watch))))) while((__count__.prototype) && 0);");
tryItOut("with({}) { yield; } ");
tryItOut("let (prototype = (<x><y/></x>)[this] ? (typeof function ([y]) { }) : ) { L: {M:if(__parent__ =  /x/g ) {false; } else yield; } }");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("/*infloop*/do {L: ({a2:z2})return; } while(__parent__.constructor);");
tryItOut("gc()");
tryItOut("__count__ = __proto__;");
tryItOut("if( \"\" ) {break ;; } else {yield; }");
tryItOut("{if((((/a/gi)((<x><y/></x>.*))))) { if ((new eval(\"export *;\", .2)((window >>= <><x><y/></x></>)))) export *;} else {yield;throw <y><z/></y>; } }");
tryItOut("L:if(<x/>) { if (<x><y/></x>) prop = <y><z/></y>, gc() =  if (<x><y/></x>);} else return <><x><y/></x></>;");
tryItOut("L: ;");
tryItOut("do {{} } while(((null).call(@foo, )) && 0);");
tryItOut("if(((Math.sin).call)) { if (({}).__lookupGetter__(eval(\"<x/>\", <x/>))) return; else {gc()/*infloop*/M:while( \"\" )const __parent__ = <y><z/></y>; }}");
tryItOut("__proto__.__proto__ = prop;");
tryItOut("L:if(yield  /x/ .isPrototypeOf(window)++) /*infloop*/for(__iterator__ = __count__ = ({}); ( /x/g .prop = <><x><y/></x></>); (prototype.__parent__)) {yield; }");
tryItOut("/*infloop*/M:for(let ({ __proto__: ({ __noSuchMethod__: prototype }), __noSuchMethod__: prototype }) = * |= true.__lookupGetter__(\"prop\"); 4..hasOwnProperty(\"constructor\"); window) {gc() }");
tryItOut("/*for..in*/for(let prop = constructor in (export prop; >>>=@foo)) let (function(q) { return q; }, prototype) { return; }");
tryItOut("; const __proto__;");
tryItOut("do {break ; } while(([window].sort('haha'.split)) && 0);");
tryItOut("let (__parent__ = <><x><y/></x></>, <><x><y/></x></>) { export *; }");
tryItOut("if(([15,16,17,18].sort(function () { yield (\n<><x><y/></x></>) } , (<zzz><><x><y/></x></></zzz>.(* >>= 1e-81))))) { if ([1,,]) {/*for..in*/L:for(let __parent__ = window in true) {export *; } } else yyy}");
tryItOut("throw prototype\nreturn <><x><y/></x></>; const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__(window) in [1,,]) __count__");
tryItOut("if(@foo\f) export *;");
tryItOut("with({__iterator__: ([, , __count__] = __parent__)})var __iterator__;");
tryItOut("if(prototype = __parent__) { if (<x/> *=  /x/g ) {prop, __iterator__;; }} else <><x><y/></x></>\n");
tryItOut("return\nconst __noSuchMethod__ = *::*, __count__ = <y><z/></y>;");
tryItOut("throw StopIteration;{<x><y/></x>;with({__count__: <x/>}){const constructor = prop, prop =  /x/ ; } }");
tryItOut("if(new Exception()) break L; else  if ( /x/  += 1e-81\n) yield 3.141592653589793;");
tryItOut("yield [15,16,17,18].sort(({}).hasOwnProperty, undefined);");
tryItOut("/*infloop*/while(__iterator__( '' )(window) = ({prop setter: function () { return ((yield true)) }  }))L: return;");
tryItOut("L: ");
tryItOut("/*for..in*/for(const __parent__ = <xxx>{prototype}</xxx> in [null--].hasOwnProperty(\"__iterator__\")) {new ([1,2,3,4].map).call(this.__defineSetter__(\"__iterator__\", new Function), window[[,,]] , ([11,12,13,14].filter))(([<y><z/></y>].some((/a/gi).apply)), new (function (constructor)<x/>)(prototype)) }");
tryItOut("/*for..in*/for(let prop = this.__defineSetter__(\"prop\", throw prop;) in true.valueOf(\"number\")) __proto__ = <x/>, prop = __iterator__;");
tryItOut("/*for..in*/for(let [x::__iterator__, constructor] = null && <zzz><y><z/></y></zzz> in __proto__ = prop.prop) ");
tryItOut("null const constructor;");
tryItOut("gc()\n");
tryItOut("{{}let prop;{throw -0;if(prop) {export constructor; } else  if (<><x><y/></x></>) {window; } } }");
tryItOut("with({prototype: RegExp( /x/g )})continue M;");
tryItOut("do function  1.3 (__parent__) { export *; }  while((<x/>) && 0)\nwith({constructor: new (eval)(window)}){__iterator__, prototype; }");
tryItOut("{throw <><x><y/></x></>; }");
tryItOut("");
tryItOut("with({__proto__: new (*.watch(\"__noSuchMethod__\", (@foo).watch))()})\nL:if([<x><y/></x> for (__parent__ in this)function  prop () { yield 1e-81 } ]) { if ((({__iterator__: <x/>, __parent__: <x><y/></x> }))) ;} else {{} }\n/*for..in*//* nogeckoex bug 349964 */ for  each(const delete in @foo) throw window;\n");
tryItOut("/*infloop*/for(null; <x/>; prop) (this)\n\n");
tryItOut("do {<> { yield * } </> } while((<><x><y/></x></>.hasOwnProperty(\"prop\")) && 0);");
tryItOut("let (prototype, constructor) { var prop; }");
tryItOut("if([11,12,13,14].map) throw  /x/ ; else  if (( /x/ ).*) yield window; else {return this;return; }");
tryItOut("if(this.__defineSetter__(\"constructor\", function(q) { return q; })) { if (__proto__.constructor getter= eval) {return this; }} else ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in this) {let constructor = (-1), prop = <x><y/></x>; }");
tryItOut("switch([__parent__ = <y><z/></y> for (__parent__ in this)]) { default: <x><y/></x>; const __proto__; }\nif( /* Comment */*) {return 0/0; } else  if ([15,16,17,18].some(-3/0,  '' )) prototype = <>__count__</>;\n");
tryItOut("/*for..in*/L:for(__count__ = false in this) continue ;");
tryItOut("L: yield //h\n<x><y/></x>;");
tryItOut("throw StopIteration;");
tryItOut("{}");
tryItOut("L: \nexport __count__;");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in ({ prop: ({ __count__: prototype, __proto__: prop }), __count__: [] }) = ({ set __parent__() { return __parent__ } , constructor getter: <x><y/></x>\f })()) {const constructor = 1e+81; }");
tryItOut("M:switch( /x/ .__count__.prototype = (new Function).call(constructor;\n{}\nyield, )) { case 9:  }");
tryItOut("__proto__, __noSuchMethod__ = __parent__;return constructor; const prop;");
tryItOut("switch((@foo = prototype))\f { default: continue L;break; prototype = [z1,,], constructor; }");
tryItOut("const prop, __iterator__ = (-0); const __iterator__;");
tryItOut("if(null.watch(\"__noSuchMethod__\", Math.sin)) {return .2; }");
tryItOut("return;");
tryItOut("{Functionwith({__noSuchMethod__: <x/>}){return;prop = <y><z/></y>, __noSuchMethod__ = <x><y/></x>; } }");
tryItOut("while(((({ get __iterator__(__iterator__) { return @foo }  }))) && 0){function  __count__ (__proto__, prop) { yield <x><y/></x> }  }");
tryItOut("/*for..in*/for(let __iterator__ in ~<><x><y/></x></>) yield;");
tryItOut("if(*) {continue ; }\n");
tryItOut("if(yield (gc())) {<><x><y/></x></>;/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <><x><y/></x></>) var constructor = <x><y/></x>; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = <x><y/></x>\f.__noSuchMethod__.isPrototypeOf(5.0000000000000000000000[*::*]).__iterator__ = <{prop}> </{prop}>.(Number()) in (__proto__ = (prop.__count__ setter= (1 for (x in []))))) let __noSuchMethod__, __count__;");
tryItOut("prototype = __count__;");
tryItOut("switch(--<x><y/></x>) { case 4: yield undefined === this; } const __noSuchMethod__;");
tryItOut("if(false)  else  if ((new (function () { return new (({a1:1}))( /x/ ) } )()).__defineSetter__(\"__proto__\", [1,2,3,4].map)) {export *;/*for..in*/for(constructor in <><x><y/></x></>) {;yield <x><y/></x>; } } else if(4.) {{} } else \t if (({a2:z2})) gc() else  /x/ ;");
tryItOut("/*infloop*/for(const constructor = false; null; undefined) let __proto__, __noSuchMethod__;");
tryItOut("L: /*for..in*/for(var [__proto__, __noSuchMethod__] = let (__proto__ = <x><y/></x>) __proto__ ? ((__parent__.constructor = 3))[<><x><y/></x></>.throw(*)] : ({ get __parent__() { export prototype; } , prototype: undefined }) in (<x><y/></x> if (<x><y/></x>))) /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in []) throw  '' ;");
tryItOut("L: with((new (window)()) in  \"\" ){if(*::*) {__proto__ = [1,,]*; } else ( \"\" ); }");
tryItOut("/*infloop*/while(((1e81)[<y><z/></y>])){yield ;\n\n }");
tryItOut("L: {*::*yield; }");
tryItOut("with({}) ");
tryItOut("if(__noSuchMethod__ + 1e+81) { if (new <><x><y/></x></>(( yield  ? this : <y><z/></y>))) { }} else {{} }");
tryItOut("{throw null;\r@foo; }");
tryItOut("/*for..in*/for(var __parent__ =  in (__parent__ = *\n || )) {with({constructor: __parent__-=<y><z/></y>.@*}){ }throw <><x><y/></x></>; }");
tryItOut("let(__parent__) { let(prop = Math.pow) { let(({ __proto__: __count__ }) = +__noSuchMethod__) ((function(){with({}) { let(({ __iterator__: prototype, __count__: __count__ }) = (prop = function(id) { return id })) ((function(){for(let y in []);})()); } })());");
tryItOut("if(__iterator__) {}\f else  if (#2=[this.__defineGetter__(\"__parent__\", __noSuchMethod__ + constructor)]) /*infloop*/do yield __iterator__; while(([,,z1].*)); else {{(<><x><y/></x></>); }\texport __iterator__; }");
tryItOut("/*infloop*/for([,,]; *;  /x/ ) {return constructor; } const __proto__;");
tryItOut("L: {'haha'.splitL:if(<x><y/></x>) yield {}; else  if ( /x/g ) {function(y) { yield y; var __iterator__ = <x><y/></x>;; yield y; } } else {<y><z/></y>; } }");
tryItOut("if((<><x><y/></x></>(*, __count__))) return 033;");
tryItOut("yield;export *;");
tryItOut("__noSuchMethod__");
tryItOut("if(++<><x><y/></x></>) ; else  if (([15,16,17,18].filter(gc, false))) {new Functionprototype, constructor; }");
tryItOut("gc()yield __count__;");
tryItOut("/*for..in*/for([prototype, __proto__] = window in @foo) {(*).__defineSetter__ }");
tryItOut("if(__iterator__.yield getter= function () { return * } ) {/*for..in*/for(let __parent__ in ((@foo)(constructor))){__iterator__; }\f; } else  if (constructor = __noSuchMethod__) { } else {gc()([,]); }");
tryItOut("let (__noSuchMethod__, __parent__ = this.__defineGetter__(\"__noSuchMethod__\", new Function)) { const constructor = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(let __proto__; ('fafafa'.replace(/a/g, function(y) { yield y; yield;; yield y; })).__defineSetter__(\"__iterator__\", [1,2,3,4].map); (/a/gi).call(__iterator__, @foo,  /x/g ) @ prototype, __proto__) {with({})  }");
tryItOut("while((undefined.__defineGetter__(\"__proto__\", 'haha'.split) ? ((p={}, (p.z = (prototype+=[z1]))())) : <><xxx {prop}={prototype} /></> <<=  ''  %= <><x><y/></x></> === __count__ = __count__ /= [15,16,17,18].filter(function () { yield (__iterator__)() || #1=({get: null}) } , (p={}, (p.z = window)()))) && 0)");
tryItOut("let (__iterator__ = new Boolean(arguments)) { /*infloop*/while(<x><y/></x>){gc(){} } }");
tryItOut("{throw <y><z/></y>;gc() }/*infloop*/for(<x/>; ({a1:1}); *::*) {(false);return this; }");
tryItOut("/*infloop*/for(const ({ prototype: [, (1e81)(<y><z/></y>), , [, , , , ], ] }) = null; (@foo)[__noSuchMethod__]; @foo.valueOf(\"number\") <= <><x><y/></x></>.__defineGetter__(\"constructor\", function (constructor, __proto__) { break ; } )) {continue ;throw \t<x><y/></x>; }");
tryItOut("{constructor = window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const yyy @ (1 for (x in []))['__count__'] in (~true)) {constructor = prototype; }");
tryItOut("/*for..in*/for(__count__ = (1.3.__defineSetter__(\"prototype\", function ()<x><y/></x>)) in @foo) /*for..in*/L:for(const __proto__ = <x><y/></x> - this in <><x><y/></x></>) 0x99");
tryItOut("/*infloop*/for(__proto__; new ((<x><y/></x> for (prototype in @foo)).unwatch(\"prop\"))(((<y><z/></y>)\f), 1.3); (var constructor)) {while((({ get constructor __proto__ () { return -3/0 }  })) && 0)export constructor; }");
tryItOut("/*infloop*/L:for(const __iterator__; __proto__ = <y><z/></y>; \n'fafafa'.replace(/a/g, function (constructor)<x><y/></x>)) return;L:if((+true)) return; else  if (__iterator__ = this) return __parent__; else {let prototype =  '' , constructor = [z1];case undefined: break;  }");
tryItOut("if((constructor = <x><y/></x> &  /x/g ) == (this.zzz.zzz((), <x/>))) L:with({__noSuchMethod__:  /x/g })-0; else {gc() }");
tryItOut("__proto__ = *::*, __iterator__");
tryItOut("(null); const __noSuchMethod__;");
tryItOut("do {(<x/>);let constructor = constructor; } while(((eval(\"{yield delete;prototype }\", prototype >> __parent__))) && 0);");
tryItOut("/*for..in*/M:for(const prototype = 'fafafa'.replace(/a/g, new Function) in (1 for (x in []))) [1,2,3,4].slice");
tryItOut("");
tryItOut("(undefined)(@foo) = __proto__\n/*infloop*/for(const prop = true <<= constructor; __parent__.__iterator__; <x/>) {yield;L:switch([[]]) { case 7: /*infloop*/do {yield; } while( \"\" ); } }");
tryItOut("; const __proto__;");
tryItOut("v\n");
tryItOut("/*infloop*/for(@foo; .2; window) {const __count__;gc() }");
tryItOut("*::*");
tryItOut("let (__proto__ = <y><z/></y>, \t[, ({ __parent__: __count__ }), ({ prop: __parent__, __noSuchMethod__: constructor }), ]) { while((.2) && 0){let __count__; } }\nM:do {gc()(*); } while((1e81) && 0);");
tryItOut("if(({function::prototype:  })) {if(\n.2) {1e4, __count__; } else yield *; } else  if (new (([<x><y/></x>] >>>=__iterator__.(<x/>) @ ({ __parent__: __parent__ }) = 3 <=  '' ))(\n({a1:1}) ? (const __proto__ = <x><y/><//*\n*/x>, __iterator__) : true)) L: export *;");
