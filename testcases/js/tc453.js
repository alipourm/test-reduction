tryItOut("{{}yield window; }");
tryItOut("<x><y/></x>");
tryItOut("L: {yield undefined; }");
tryItOut("with({}) { yield [z1] .. .yoyo([1]); } ");
tryItOut("/*infloop*/for(prop; (<x><y/></x>).@foo.unwatch(\"__parent__\"); (__iterator__.(window))) {while((__count__) && 0){window;export *; } /x/g  = undefined; }");
tryItOut("with((({prop: new <><x><y/></x></>(1.3), __noSuchMethod__ setter: function (prop, __parent__) { /*for..in*/for(let [__count__, __iterator__] =  /x/  in  '' ) {continue ;yield <x><y/></x>; } }  })))export __proto__;");
tryItOut("/*for..in*/for(__iterator__ =  \"\"  in window.__lookupSetter__(\"x::__proto__\")) {; }");
tryItOut("with((-1)[<><x><y/></x></>])break ;");
tryItOut("/*infloop*/while( /x/ ){; }");
tryItOut("yield;\n/*for..in*/for(const __count__ in -0) constructor;\n");
tryItOut("M:with({__parent__: ((function(q) { return q; })[(new Function( /x/g ))])})for(let y in []);");
tryItOut("L:with({__noSuchMethod__: Function(Math.sin, ([15,16,17,18].filter(/a/gi, <x><y/></x>)))})yield;");
tryItOut("while((null) && 0)yield __proto__;");
tryItOut("if(*::*) { if ((yield null)) /*infloop*/L:for(let prototype; <x><y/></x> |= <x><y/></x>; (prop = __parent__) ? <y><z/></y>.constructor : this.throw(<><x><y/></x></>)) {continue M;break ; } else {{} }}");
tryItOut("L: L:if(0x99) { if (<y><z/></y>) {var __noSuchMethod__; } else yield;}");
tryItOut(";\ngc()\n");
tryItOut("if(<x><y/></x>.watch(\"__parent__\", eval)) {throw <><x><y/></x></> } else throw <x><y/></x>;");
tryItOut("/*for..in*/for(const [constructor, prop] = prototype.__proto__ setter= Function[prototype.(__proto__)] in <x><y/></x>.(<><x><y/></x></>)) {{}/*for..in*/for(let [__proto__, prototype] = (__proto__.constructor = [1,,]) in *::*) yield; }");
tryItOut("let __iterator__, __noSuchMethod__ = constructor");
tryItOut("/*infloop*/M:do gc() while(constructor.__noSuchMethod__ setter= [1,2,3,4].slice);");
tryItOut("/*for..in*/for(__iterator__ = __count__ = 3; in (undefined === <><x><y/></x></>)) {(1 for (x in [])){} }");
tryItOut("/*infloop*/for(__noSuchMethod__;  /x/g ; <><x><y/><\f/x></>) {windowyield; }");
tryItOut("while((({constructor: <x><y/></x>})) && 0)if(((-0))[prop] ? (({__iterator__ setter: (window).__defineSetter__, __noSuchMethod__: (-0) })) : (function (prototype) { return <x><y/></x>\f } ).call(null, )) { if (let = ({ __noSuchMethod__: __parent__, __iterator__: \tprop })) var prop = undefined, prototype;} else <bbb xmlns=\"__parent__ = [[]]\"\t><!--yy--></bbb>");
tryItOut("{}; const constructor;");
tryItOut("if((yield undefined)) export *; else {break L;var prototype, ; }");
tryItOut("/*infloop*/\rfor(var constructor = (new Exception(<x/>, <x/>));; __noSuchMethod__; <x><y/></x>) break M;");
tryItOut("do {if(this.zzz.zzz) {return <x><y/></x>;__parent__ = [1,,], prop; } else { '' ; } } while((__proto__.__iterator__ = *) && 0);");
tryItOut("with(4.){/*for..in*/for(let prototype in __count__) __noSuchMethod__;\tlet (prototype = false) { __noSuchMethod__ = null; }<><x><y/></x></>; }");
tryItOut("/*for..in*/for([__count__, set] = \nnew (this.zzz.zzz)((constructor = __iterator__ = <></>).unwatch(\"__noSuchMethod__\"), function(id) { return id }.*) in this) {<><x><y/></x></>;([z1,,]); }");
tryItOut("while((prototype.__defineSetter__(\"__iterator__\", 1.3)) && 0){yield\ncontinue M; }");
tryItOut("/*for..in*/for(constructor =  /x/  in __proto__) gc()");
tryItOut("L:while((([15,16,17,18].filter([1,2,3,4].slice, <><x><y/></x></>))) && 0)let __count__ = <x/>;");
tryItOut("prototype");
tryItOut("yield;");
tryItOut("/*for..in*/for(__iterator__ in (((new Function(\";\")))((false++))))gc()");
tryItOut("throw __parent__;yield;");
tryItOut("M:if(@foo) { if ( \"\" ) *, @foo} else export ;");
tryItOut("/*infloop*/while(<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\"))while((__count__) && 0){yield @foo; }");
tryItOut("return;");
tryItOut("if((-1)) { if (([window]\n.map(eval))) return; else yield 0.1;}");
tryItOut("switch((1e81)(true, *)) { default: return <><x><y/></x></>;break; switch(__iterator__) { case [[]]: break; default: break; case #1#: break; yield prop;break;  }break; case 1:  }");
tryItOut("M:if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) { if (1e-81) {throw *;let __parent__, __parent__ = <><x><y/></x></>; }} else \twith({constructor: prototype.prop}){do {throw this; } while((*::*) && 0); }");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("L: {return }");
tryItOut("/*infloop*/while(Date(<x/>.__defineSetter__(\"prop\", function(q) { return q; }), <x/>)\n){const prototype = __iterator__, set;; }");
tryItOut("if(\n<><x><y//*\n*/></x></>.valueOf(\"number\").__defineSetter__(\"__proto__\", (new Function(\"gc()\")))) (<x><y//x); else  if ((typeof var __count__, __proto__ = __count__;)) {;export prop; }");
tryItOut("{} const each; const __proto__;");
tryItOut("/*infloop*/while(window != [[11,12,13,14].some for (__parent__ in <y><z/></y>)] + ([window.watch(\"__parent__\", 'haha'.split)])){while((@foo) && 0)with( \"\" )window }");
tryItOut("if(__noSuchMethod__.__count__ !== __noSuchMethod__.__proto__ = *::*.@*) {L: {let prop, prop;throw @foo; } }");
tryItOut("__iterator__.__proto__ = 0.1;");
tryItOut("/*infloop*/for(var __count__; prop = window; constructor-=({prototype: [z1], __iterator__: @foo }) >> function  __proto__ (__count__, __parent__)try { *::*; } catch(__parent__) { yield; } finally { (<x><y/></x>); } ([[1]])) {continue L\nswitch( /x/g ) { case 1: (<><x><y/></x></>);break; default: export *; }L: {gc() } }");
tryItOut("yield;");
tryItOut("let __iterator__, constructor;");
tryItOut("{return;{(<x><y/></x>);return <x><y/></x>; } }");
tryItOut("/*infloop*/L:do {throw window; } while([@foo.eval([z1]) if (*::*)]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in 3/0) {return;yield true; }");
tryItOut("([,,]);");
tryItOut("yield (({ set __noSuchMethod__(prototype, __noSuchMethod__) { return <><x><y/></x></> } , __count__: <x><y/></x> }));");
tryItOut("/*for..in*/for(constructor = 1e4.@foo in ([15,16,17,18].filter(function  function::__noSuchMethod__ (__iterator__) { yield; } , [1,,]))) {export *;<x><y/></x>; }");
tryItOut("/*for..in*/for(var __parent__ =  /*infloop*/while  in constructor) {gc()return 0; }");
tryItOut("/*infloop*/do try { (3/0); } finally { yield this; }  while(1e4);");
tryItOut("if(<x/>) {gc(){} } else  if (<><y><z/></y></>) export __parent__; else ");
tryItOut("try { with({}) { with({}) { with({}) { continue ; }  }  }  } catch(__proto__ if (function(){__noSuchMethod__ = __noSuchMethod__;})()) { (*.hasOwnProperty(\"__iterator__\")); } catch(__iterator__) { try { return (__noSuchMethod__ = __proto__); } finally { this.zzz.zzz; }  } finally { this.zzz.zzz; } ");
tryItOut("var prototype = <y><z/></y>; const prototype;");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__) { this.zzz.zzz; const __noSuchMethod__;");
tryItOut("L:with((new RangeError()) += window.yoyo(1e81)){ }");
tryItOut("throw StopIteration;");
tryItOut("continue L;");
tryItOut("if(__count__ = <><x><y/></x></>.__lookupSetter__(\"__proto__\")) { if ({}) {break L; }} else {throw null; }");
tryItOut("L:do {throw __iterator__;yield; } while((.yoyo(@foo)) && 0);");
tryItOut("if(null .. 1.3) null else  if ( /x/ .propertyIsEnumerable(\"constructor\")) {continue L;yield; }");
tryItOut("export *;\n__parent__;\n");
tryItOut("for(let y in []);");
tryItOut("if(-(<x><y/></x> .@*:: window)\t) Math.sin");
tryItOut("/*infloop*/for(let __proto__; (yield ({ __count__: [] }) = break L); * %  /x/g ) {return 0.1;__parent__; }");
tryItOut("for(let y in []);");
tryItOut("L:with(<><{__count__}><!--yy--></*\n*//{__count__}></>)/*infloop*/while(__count__.prototype getter= <><x><y/></x></>){var constructor = <y><z/></y>, __iterator__ = <y><z/></y>;var prop = <x><y/></x>, __proto__ = this; }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in ((__iterator__.unwatch(\"__iterator__\")).watch(\"__parent__\", (new Function(\"(new Function(\\\"return;\\\"))\"))))) /*infloop*/M:for(let prototype; prototype.__iterator__; <xxx {__parent__}={(function ([y]) { })() ^ @foo} />) {__noSuchMethod__ }");
tryItOut("M:if(this\n) {do gc() while(((-1)) && 0); }");
tryItOut("if(033 <<= (new [] % *::*())) {let(({ __iterator__: __proto__\t })) ((function(){return <y><z/></y>[ \"\" ];})()); }");
tryItOut("/*infloop*/while((1e4)(this) = (prototype))yield <y><z/></y>;");
tryItOut("/*infloop*/for(<x/>; false;  '' ) {var constructor = [], __iterator__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(const (new (<><zzz>0.1</zzz></>)())(\nnew Math.sin()\r) in <x><y/></x>.hasOwnProperty(\"__parent__\")) (<y><z/></y>);");
tryItOut("with\t({__proto__: __proto__.__count__ getter= (1 for (x in []))}){}");
tryItOut("/*for..in*/for(let constructor in ((function ([y]) { })() ?  ''  : this)[<><x><y/></x></>.valueOf(\"number\")]) window;");
tryItOut("switch(([15,16,17,18].filter( \"\" , [1,,]))) { case 8: if(*) { if (3/0) gc() else {var constructor; }}/*infloop*/do {gc } while(prototype = <y><z/></y>);break;  }");
tryItOut("var __count__ = <><x><y/></x></>, __proto__;\n/*for..in*/for(let prop in __iterator__) prop = <><x><y/></x></>\n*::*;\n");
tryItOut("if(__iterator__ = 1e4) { if (true.prototype = function::constructor) {gc() }} else { get \f__proto__(constructor, prop) { yield (-1) } gc() }\nyield;");
tryItOut("/*infloop*/do return this; while(__iterator__.__proto__ getter= (function(q) { return q; }).call.*);");
tryItOut("if() { if ((eval(\"if(constructor) yield <><x\\t><y/></x></>; else  if (<x><y/></x>) {const prototype = <x><y/></x>\\f, __iterator__ = <x><y/></x>; } else ;\", <><{__parent__}></{__parent__}></>))) {{} }} else if( /x/g ) (__noSuchMethod__);");
tryItOut("return function(id) { return id };\nreturn;\n[,,z1];");
tryItOut("/*infloop*/for( /x/g ; <y><z/></y>; window) {<><x><y/></x></>\nconst __count__ = (-1);while((3.141592653589793++) && 0)return; }");
tryItOut("let (({ __count__: undefined, constructor: prop }) = prototype = [[1]]) { let __parent__; }");
tryItOut("if(__count__ = false) { if ( '' ) yield;} else gc()\nundefined.__noSuchMethod__;var __noSuchMethod__;");
tryItOut("with({}) { with({}) { throw constructor; }  } ");
tryItOut("with({__noSuchMethod__: __count__ % (eval(\"prototype.prototype\", (yield prototype)))}){/*infloop*/while((-1)); }");
tryItOut("return ({__count__:  });");
tryItOut("return;");
tryItOut("let(prototype) ((function(){with({}) { (__iterator__); } })())");
tryItOut("__count__");
tryItOut("try { with({}) let( /x/ .__iterator__ = this.__defineGetter__(\"constructor\", Function)) ((function(){for(let y in []);})()); } catch(__proto__ if (0/0 <<= window)--) { return; } catch(__iterator__ if (function(){null//h\n.hasOwnProperty(\"__parent__\")})()) { for(let y in [5,6,7,8]) if((yield <x><y/></x>)) { } else  if ((<><x><y/></x></>)) {const prop = true; } } ");
tryItOut("/*for..in*/for(var __proto__ in  \"\" ) {return __iterator__;yield; }");
tryItOut("throw StopIteration;");
tryItOut("if(__count__ = yield <><x><y/></x></>.constructor = <x><y/></x>) {/*infloop*/for(@foo; (null.isPrototypeOf(<x/>)); [11,12,13,14].map) yield (-1); }");
tryItOut("var __iterator__, constructor = this;");
tryItOut("{if(<x/>) x::__parent__ = 1e81; else  if (<x/>) yield #3={a:#3#}; else continue ; }");
tryItOut("__parent__.((-0)).__iterator__ = __parent__;");
tryItOut("/*infloop*/for(var __count__; x::__noSuchMethod__.__defineGetter__(\"prototype\", Math.pow); ({ __count__: ({ <x><y/></x>: __proto__, eval: __iterator__ }) }) = new <><x><y/></x></> ? (constructor) : this((window ? <><x><y/></x></> : this), -3/0).__defineSetter__(\"prototype\", [1,2,3,4].slice)) {/*for..in*/for(prop in null) export *; }");
tryItOut("{yield [[]]; }");
tryItOut("/*infloop*/for(<x><y/></x>; @foo; [[]]) {break M; }");
tryItOut("while((this) && 0)/*infloop*/for(__parent__ = !@foo; 1e+81; ) break ;");
tryItOut("if(new <><x><y/></x></> ? <y><z/></y> : window(3/0 ^= function ([y]) { }, <><x><y/></x></>) % [, constructor] = (__parent__ = <><x><y/></x></>)) __parent__ = *, __count__; else  if ((\n__proto__ = (new String()), __parent__).propertyIsEnumerable(\"__count__\")) { '' ; } else export constructor;");
tryItOut("with({prototype: (uneval(<y><z/></y>)) .@x:: ({prototype: false }).unwatch(\"__noSuchMethod__\")})export prop;");
tryItOut("/*infloop*/for(constructor; eval(\"var __count__ = __noSuchMethod__, __iterator__ = <x><y/></x>;\", {}); <x><y/></x>) export *;");
tryItOut("/*infloop*/L:for((prototype.__iterator__ = constructor = let (__proto__ =  /x/ , __proto__ =  '' )  \"\" ); \n__noSuchMethod__ = [1,,].unwatch(\"__iterator__\"); default: break M;break; __parent__;case ( /x/g  :: false): /*infloop*/for(*; <y><z/></y>; __noSuchMethod__) continue ;break; case 9: ) /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in this) {{} }");
tryItOut("do {let function::__noSuchMethod__, __parent__ = undefined; } while((([0].filter(Math.pow))) && 0);");
tryItOut("let([({ __iterator__: constructor }), ({ __count__: [] }), constructor, ] = constructor %= <><x><y/></x></> -= undefined) ((function(){with({}) try { let prop = *::*; } catch(prototype) { return; } })());");
tryItOut("M:with(__noSuchMethod__)throw <><x><y/></x></>;");
tryItOut("/*infloop*/while(true){while((prop = <x/>) && 0){break M;const constructor = <><x><y/></x></>; }M:while((1e-81) && 0)throw *; }");
tryItOut("L:if(prototype = undefined) { if (eval(\"this .@*:: <y><z/></y>/*\\n*/\", __noSuchMethod__ = arguments.*)++) {gc() } else {break ; }}");
tryItOut("continue ;");
tryItOut("/*for..in*/for(const __iterator__ = 1.2e3.prototype = <x><y/></x> in 1e4 += <><x><y/></x></>) yield <x/>;");
tryItOut("{/*infloop*/for(var ({ getter: __noSuchMethod__((__noSuchMethod__.valueOf(\"number\"))), prop: constructor.prop }) = ((__count__[@foo])(<x/> <= 0x99,  /x/ )).__lookupSetter__(\"__noSuchMethod__\");  '' .prop.__defineSetter__(\"__parent__\", 'haha'.split); __count__) {__count__ = @foo, __noSuchMethod__ = this;\ncontinue L;\n } }");
tryItOut("__proto__ = constructor\n/*for..in*/for(constructor in (((new Function(\"{ }\")))([] = @foo + function(id) { return id })))M:switch( '' ) { default:  }");
tryItOut("with(false)gc()");
tryItOut("return;");
tryItOut("const constructor = 033");
tryItOut("/*infloop*/do  while([__parent__ = this]);");
tryItOut("return;");
tryItOut("yield;");
tryItOut("/*for..in*/for(let __count__ in <><x><y/></x></>) return __parent__;");
tryItOut("{yield __proto__.yoyo(<><x><y/></x></>); }");
tryItOut("if(({ __iterator__: __iterator__, __count__: __parent__ }) = ({ __iterator__: ({ __parent__: __iterator__ }), __count__: ({ constructor: __noSuchMethod__ }) })) {const __proto__ = __count__;continue ; } else  if (this.zzz.zzz) {(*);break ; }");
tryItOut("/*for..in*/for(const undefined in ((*)([true].map(({}).hasOwnProperty)))){gc()const __noSuchMethod__; }");
tryItOut("{/*infloop*/L:for(\n(true.unwatch(\"constructor\")); [11,12,13,14].sort; __proto__ = __noSuchMethod__) {yield  \"\" ;continue ; }if((undefined)[@foo]) {throw <><x><y/></x></>; } else  if (null) prop; else break ; }");
tryItOut("if(prop.__noSuchMethod__) {/*infloop*/for(((p={}, (p.z = prototype)())); (new (new Function)( /x/ , @foo).__iterator__); (<x/>)()) export prop; } else  if (let (__proto__ = <><x><y/></x></>, __count__ = this) <><!--yy--></>) {L: var prototype, __iterator__ = <><x><y/></x></>; } else L: {gc() } const prototype;");
tryItOut("break L;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = new (false)(__count__) in function::__count__ = (__count__.__lookupGetter__(\"x::prototype\"))) {const __iterator__ = <><x><y/></x></>, {; }; }");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; __count__.x::prototype setter= function  __iterator__ (constructor, __proto__) { 'haha'.split } ; __noSuchMethod__ = __parent__()) M:if(prop = @foo) { if ((__iterator__ = this)) Function else return true;}\t");
tryItOut("M:with((<><x><y//>(/</x></>).apply){}");
tryItOut("with(1.2e3 in (uneval((function ([y]) { })()))){gc() }");
tryItOut("while((0x99) && 0)throw this;");
tryItOut("if( '' )  else  if (prototype) {throw <><x><y/>\t</x></>; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("for(let y in []);");
tryItOut("return ;");
tryItOut("if(export __noSuchMethod__) { if ((new ((new Function(\"continue ;\")))().propertyIsEnumerable(\"__iterator__\"))) const prop, __iterator__ = <><x><y/></x></>; const __proto__;} else {}");
tryItOut("try { return; } catch(constructor) { for(let y in [5,6,7,8]) return  /x/g ; } ");
tryItOut("prop = __iterator__;");
tryItOut("L:with({each: ('fafafa'.replace(/a/g, <y><z/></y>))})export __iterator__;");
tryItOut("/*infloop*/do {/*infloop*/L:for(window; 0; <><x><y/></x></>) {( /x/ ); }yield; } while((({__proto__: <x><y/></x><x><y/></x>}) = (uneval())));\nif(<x/>) __iterator__; else yield window;\n");
tryItOut("/*for..in*/for(let [prop, __parent__] = (yield <><x><y/></x><\f/>) for (prop in ({})) in (eval(\"{}\", this))) yield prototype;");
tryItOut("yield ([,].__defineGetter__(\"__count__\", (1 for (x in []))));");
tryItOut("with((p={}, (p.z = constructor = this)()).throw((this.__defineGetter__(\"constructor\", /a/gi))))gc()");
tryItOut("return new (__noSuchMethod__)([z1]);");
tryItOut("/*infloop*/do {return  \"\" ;\n;\n } while(new String((-0)));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((__noSuchMethod__)( \"\" \n) in [] ? * : <y><z/></y>) (window);");
tryItOut("if(<><x><y/></x></>) { if (#3={a:#3#}) const prototype = null; else (delete);}");
tryItOut("/*for..in*/for(let (<x><y/></x>)(<x/>) in __noSuchMethod__) /*infloop*/while(prop)return true\n/*infloop*/for(let __parent__ = #1#; 1.3; undefined) function::__iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var *::*.isPrototypeOf(this)['prototype'] in new __iterator__) {yield; }");
tryItOut("/*for..in*/L:for(let [__proto__, prototype] = <x><y/></x> in function ([y]) { }) ;");
tryItOut("yield 3.141592653589793;");
tryItOut("/*for..in*/for(let [__count__, constructor] = __proto__ = (-0) in <x><y/></x>) (<x/>);");
tryItOut("let(__parent__, __proto__ = <><x><y/></x></>) { const __parent__ = <x><y/></x>;with((<x/>)[window]){let __count__, __parent__ = <y><z/></y>;; }");
tryItOut("/*infloop*/for(let __parent__ = (p={}, (p.z = ({prototype:  '' }))()); ({}); (this.unwatch(\"prop\"))) <x><y/></x><!--yy-->.*, (\n<y><z/></y> >>= 1e-81)");
tryItOut("{yield; }");
tryItOut("with(({__parent__ setter: function(y) { yield y; ; yield y; } })){export __count__; }");
tryItOut("var __proto__, __proto__ = [z1];\n\n");
tryItOut("M\t:with(__iterator__.(false))L:do {continue M; } while((true) && 0);");
tryItOut("M:do throw <><x><y/></x></>; while((*::*.__parent__) && 0);");
tryItOut("{__parent__let constructor =  /x/ ; }");
tryItOut("const __proto__ = this\n/*infloop*/for(const prototype; ({a1:1});  '' ) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in 3) (<x><y/></x>);");
tryItOut("let (prop = <><x><y/></x></>, prototype) { throw <x><y/></x>; }");
tryItOut("gc()\n");
tryItOut("/*infloop*/while(<><x><y/></x></>.__proto__)(prop.__defineGetter__(\"prototype\", 1e4));");
tryItOut("/*for..in*/L:for(prop = __parent__ in [z1]) yield;");
tryItOut("do [, , ] while((__proto__ = <><x><y/></x></>) && 0);");
tryItOut("M:if(*) {return 0x99;const __noSuchMethod__, prototype; }");
tryItOut("/*infloop*/L:for(var ({ __count__: __proto__, __proto__: ({ prototype: ({ x::constructor: constructor }), __iterator__: [__parent__] }) }) = __noSuchMethod__.(({__noSuchMethod__: window}));  \"\" ; #1) {<><x><y/></x></>; }");
tryItOut("/*for..in*/for([__count__, __parent__] = new /a/gi(({prop: ({function::__proto__ setter: ({}).hasOwnProperty, __count__ getter: new Function })})\f, <y><z/></y> instanceof  /x/ .__noSuchMethod__) in prototype = (<x><y/></x>.throw(window))) let (__iterator__ = <><x><y/></x></>) { throw false; }");
tryItOut("/*infloop*/for(prop; yield (<>@foo</>.([[1]])); (this.zzz.zzz) %= <x/>.__parent__ = this ? (<><x><y/></x></> === prototype) : __noSuchMethod__ = undefined) {const __proto__ = window, __proto__;/*for..in*/for(var [prop, __count__] = prop in  /x/ )  }");
tryItOut("if(eval(\"__proto__\", __parent__)) return this; else  if (3.141592653589793 == <x><y/></x>) /*infloop*/do {;yield <x><y/></x\t>; } while( /x/g .watch(\"__proto__\", window));");
tryItOut("{ if (*::*)function (__parent__, __parent__) { return prop } while((<x><y/></x>) && 0)gc()prop = this; }");
tryItOut("M:with({__parent__: this})<\f><x><y/></x></>;");
tryItOut("<> /x/ </><ccc:ddd><!--yy--></ccc:ddd>");
tryItOut("return;");
tryItOut("if([__proto__, ]) throw  '' ; else export __count__;");
tryItOut("/*for..in*/for(const constructor.function::prototype in (((void  ''  === <y><z/></y>).watch)(this)))throw __iterator__;");
tryItOut("with({__count__: *::*}){yield;if(__count__) { if (<y><z/></y>) export *; else export prop;} }");
tryItOut("__count__;var __iterator__;");
tryItOut("");
tryItOut("/*for..in*/L:for(var [__count__, prop] = <xxx>{__parent__}</xxx>.((prototype = <x><y/></x>)) in *::*.__lookupSetter__(\"__iterator__\")) {return __iterator__; }");
tryItOut("/*infloop*/for(const delete; window['__proto__']; (*.watch(\"__count__\", <><x><y/></x></>))) {switch((function::__iterator__)(((<x><y/></x>)[<><x><y/></x></>]))) { default: break; break; case ((-1) >>>=-0.isPrototypeOf(<x><y/></x>)): break; case 6: /*for..in*/for(const [__noSuchMethod__, prototype] = (__noSuchMethod__.(0)) in @foo) break L; } }");
tryItOut("[15,16,17,18].some(<></>, <x><y/></x>)");
tryItOut("([]);");
tryItOut("/*infloop*/for(let (window)(yield null) = @foo; ((((gc).call).call)([z1,,] -  \"\" )); (((function (prop, __parent__)let(__count__ = [11,12,13,14].filter) ((function(){{}})());<y><z/></y>)(function (__proto__)[1])) <<= <x><y/></x>.valueOf(\"number\"))) {/*infloop*/for(var __iterator__ = function(id) { return id }; @foo | (p={}, (p.z =  /x/g )()); <><x><y/></x>yyy</>) if(1.3) const __parent__ = <><x><y/></x></>, __iterator__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(var __count__ = [,,] %= <y><z/></y>(.2) = <>yyy</> in (<x><y/></x> if (window)) + this) {/*for..in*/for(prototype in ((Function)(<><x><y/></x></>)));\t\ncontinue ; }");
tryItOut("yield;");
tryItOut("/*infloop*/for(const ({ __parent__: ({ let: prop( \"\" ), function::prototype: ({ prop: [, ] }) }) }) =  ; <><xxx>{__iterator__}</xxx></>; <y><z/></y>.//h\npropertyIsEnumerable(\"prototype\")(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)) do L:while(((prop).call((continue L;);, .2, 0/0)) && 0)return; while((window /  '' ((this.zzz.zzz))) && 0);");
