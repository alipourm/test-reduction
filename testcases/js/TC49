
tryItOut("/*infloop*/while((0.1)(true, <x><y/></x>)){(null); } const __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */L: for  each(const /*undefined !== window in ({__count__:  ''  })) /* }");
tryItOut("yield \tprop;");
tryItOut("with({prototype: (RangeError(null)) ? __iterator__.constructor : (eval(\"[[1]]\", {})--)}){return *::*; }");
tryItOut("with({}) for(let y in [5,6,7,8]) null;");
tryItOut("M:if( *= (new Function(<><x><y/></x></>))) <zzz><><x><y/></x></></zzz>; else return;");
tryItOut("this.zzz.zzz;");
tryItOut("if(*.watch(\"constructor\", (*::*).watch)) { if ((p={}, (p.z = \n<x><y/></x>)())) return; else yield __parent__;}");
tryItOut("__parent__");
tryItOut("let (prototype = eval(\"<x><y/></x>\", null).prototype, __iterator__) { var __iterator__ = 3.141592653589793, prop = __iterator__; }");
tryItOut("gc()");
tryItOut("prop = __count__;");
tryItOut("/*infloop*/for(const __proto__; (new function(y) { yield y; continue ;; yield y; }(<x/>.__lookupSetter__(\"prop\"),  /x/g ).__lookupSetter__(\"prop\")); 1e4) export *;");
tryItOut("if([11,12,13,14].filter) { if (function ([y]) { }) return;} else /*infloop*/L:for(({}); <x><y/></x>; this) {}");
tryItOut("M:with({__proto__: (([1,2,3,4].slice).call(prototype, <y><z/></y>)).throw(#1=[#1#] * @foo)}){/*for..in*//* nogeckoex bug 349964 */ for  each(this in *) {yield <><x><y/></x></>;; } }");
tryItOut("L: {(({}).hasOwnProperty).call }");
tryItOut("/*for..in*/for(var [constructor, prop] = const prototype.prop = (prototype = 1e-81) in this) export *;");
tryItOut("L: {<x/>/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in (-1)) let constructor =  '' ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in <><x><y/></x></>) var __noSuchMethod__ = true, prototype = <x><y/></x>;");
tryItOut("do {export *; } while((({}).hasOwnProperty) && 0);");
tryItOut("__parent__.__parent__ = __proto__;");
tryItOut("/*for..in*/for(let prototype =  in ((uneval(new ({}).__lookupGetter__())))) yield ;");
tryItOut("/*infloop*/while(({__parent__: (true /= __count__), : new (({}).__lookupGetter__)(this, <y><z/></y>)/*\n*/ })){/*infloop*/M:for(var function::__count__; __proto__; [,,z1]) return *::*; }");
tryItOut("return null;");
tryItOut("if( '' ) <><x><y/></x></>; else  if ( '' ) {(<x/>); } else return;/*infloop*/for(window; <x/>; <x/>) Math.pow");
tryItOut("yield");
tryItOut("/*infloop*/for(__iterator__; function::__iterator__.__parent__ getter= function  __proto__ (__proto__) { return (true.__defineSetter__(\"__count__\", (*).__defineSetter__)) } ; <x><y/></x>.(null)) {L: false; }");
tryItOut("L:if((({a1:1}).__iterator__ = *)) {yield [,];({}); } else  if (({__noSuchMethod__: ({a2:z2}) }).__parent__.yoyo([(__parent__ = prototype)].filter((1 for (x in []))))) yield (new <y><z/></y>).hasOwnProperty(\"prop\"); else do <x><y/></x>; while((undefined) && 0);");
tryItOut("/*infloop*/while(3 + __count__ setter: undefined){/*infloop*/do {{}\t } while(<x><y/></x> ^ [,]); }");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, prop] = new (Math.pow)(<y><z/></y> ? <x/> : {}, __proto__) in ({prototype: this })) yield;");
tryItOut("/*for..in*/for(__count__(new (Function).call(*, __proto__, <><x><y/></x></>)(<><x><y/></x></>//h\n, <><x><y/></x></>)) in ((function  __proto__ (prototype) { yield (__count__.prop = null ? window >>=  /x/g  : \nprop) } )(let (prototype = *) <><x><y/></x></> ===  /x/g ))){ }");
tryItOut("M:if(new (this |=  '' [undefined])()) {continue ;@foo; } else  if (//h\nfunction ([y]) { } .@*::  \"\" ) {continue M; }");
tryItOut("while((<x><y/></x> .@*::  '' ) && 0)\nprototype;");
tryItOut("/*for..in*/for(var [__count__, __parent__] =  /x/g  in @foo(*::*)) /*for..in*/for(const __parent__ = __count__.__iterator__ = <x><y/></x> in <x><y/></x>) {yield;(<x><\ty/></x>); }");
tryItOut("if(([11,12,13,14].filter)) let getter; else  if (<xxx {prototype}={[z1,,]} />.(1e-81)) {/*infloop*/for(var prototype; __proto__; __iterator__) {export __iterator__; } }");
tryItOut("/*infloop*/for(const constructor; this.zzz.zzz; 0.propertyIsEnumerable(\"__noSuchMethod__\")) {function(q) { return q; } }");
tryItOut("if( /* Comment */this) let __iterator__ = 1.3;");
tryItOut("{yield <x/>; const __count__;__iterator__ }");
tryItOut("/*infloop*/for(const prototype; true.__defineSetter__\f(\"prototype\", 'haha'.split); (<x><y/></x>) = <y><z/></y>.propertyIsEnumerable(\"prototype\"\f)) {yield arguments; }");
tryItOut("with({constructor: <><x><y/ __proto__ ></x>window</>}){export *; }");
tryItOut("{if(prop) \rconst __parent__ =  '' ; else {continue ;yield; }L:if((<y><z/></y> , 033)) { if (this.__defineSetter__(\"__proto__\", #1=[#1#])) {break M; } else const prop =  /x/ , __parent__;<x/>;} }");
tryItOut("if(({ for each (constructor in 1.2e3) for (__iterator__.constructor in [,,]) for each (__iterator__ in <y><z/></y>) })) /*for..in*/for(let prop = <><x><y/></x></> in #1=[#1#]) {export __count__; } else  if ((__iterator__.(<x><y/></x>))) {gc()yield; } else M:while((undefined) && 0)(Math.pow).apply");
tryItOut("/*for..in*/M:for(let [__iterator__, constructor] =  in false) (<x><y/\t></x>)\n");
tryItOut("/*infloop*/for(({ __parent__: ({ __count__: __noSuchMethod__, __parent__: __count__ }) }) = prototype = window; 1e-81; ({a2:z2})) L:if(__count__) { if ([]) constructor} else return;");
tryItOut("if(<x><y/></x>++) <><x><y/></x></>;");
tryItOut("let x::prop, function::__parent__ = <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in ((yield ({__noSuchMethod__ getter: function () /x/ ,  get __count__ __count__ (get) { yield <x/> }  }) ^= 1e81))) {/*infloop*/L:while(<><x><y/></x></>){'haha'.split } }");
tryItOut("break ;");
tryItOut("<><x><y/></x></>");
tryItOut("/*infloop*/M:for(({ __count__: __proto__ }) = window &= {}; window; (new window())) {return;break ; }");
tryItOut("let __noSuchMethod__ = <x><y/></x>, __noSuchMethod__;");
tryItOut("{return prop.prop; }");
tryItOut("/*for..in*/for(const [__iterator__, __count__] = null.__defineGetter__(\"prop\", ({}).__lookupGetter__) in *::*) {L: {export __noSuchMethod__;yield; } }");
tryItOut("/*for..in*/L:for(let prototype in (((this.__defineGetter__(\"constructor\", 'haha'.split).__count__ = ('haha'.split).call((-1), )))(undefined['__count__']%=(<x><y/></x>.(__noSuchMethod__))))){gc }");
tryItOut("yield ((yield *));");
tryItOut("do {if((({ get constructor prop () { yield  \"\" ; }  }))) { if ((*::*.constructor)) {let __proto__ =  \"\" ;__count__ = -0, __proto__ =  /x/g ; } else export __proto__;} } while((new (new Function(\"var __parent__, __count__;\"))(<><x><y/></x></>, *)) && 0);");
tryItOut("let(({ __count__: __iterator__, __proto__: __parent__ }), __count__ = <y><z/></y>) ((function(){yield;})());");
tryItOut("if( /* Comment */(<x><y/></x> for each (__proto__ in undefined))) gc() else return;");
tryItOut("var __parent__ =  /x/ , __iterator__ = window;;");
tryItOut("/*infloop*/for(<x><y/></x>; 1e4; __count__) var __parent__ = prop, prop;");
tryItOut("export *; const __count__;");
tryItOut("L:if( /* Comment */<><x><y/></x></> = false) {const __noSuchMethod__ = this;with({}) { return; }  }");
tryItOut("/*infloop*/do {let __parent__ = <y><z/></y>; } while(Exception());");
tryItOut("/*infloop*/for((@foo for (__parent__ in <><x><y/></x></>));  '' ; yield window) export *;");
tryItOut("if(<><x><y/></x></>) {gc() } else {yield; }");
tryItOut("while(((__proto__.yoyo(undefined))) && 0)(<x><y/></x>);");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __proto__] = <>this.zzz.zzz</> in null) {continue M;/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in __noSuchMethod__) return  \"\" ; }");
tryItOut("/*for..in*/for(const prop = delete 3 in <><x><y/></x></>) {break ; }");
tryItOut("/*infloop*/for(let ({ prototype: ({ __parent__: ({ (__iterator__): __iterator__, prototype: [, , __iterator__] }), constructor: [] }) }) = \n<><x><y/></x></>.watch(\"prop\", eval)(); ((<y><z/></y>)(gc()).*); {}) ;");
tryItOut("/*for..in*/for(const constructor = prop.__proto__ in (p={}, (p.z =  /x/g .eval(window))())) { }prototype");
tryItOut("L: yield true;");
tryItOut("var __iterator__ = <x/>; const __iterator__;");
tryItOut("/*infloop*/do <><x><y/></x></>; while([,,]);");
tryItOut("return (\t{__proto__ getter: new Function });");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in 1e-81) {}\n");
tryItOut("Function\n(Boolean());");
tryItOut("L: {throw true; }");
tryItOut("L:while((( \"\" .throw(<x><y/></x>)) / window) && 0)/*infloop*/for(var ({ get: __noSuchMethod__ }) = __count__; (yield [,]); this.__defineSetter__(\"prototype\",  \"\" )) yield;");
tryItOut("(function ([y]) { });yield  '' ;");
tryItOut("with( \"\" ){export *;yield <y><z/></y>; }");
tryItOut("with({__noSuchMethod__: this.__defineGetter__(\"constructor\", (new Function).call)}){L: export __parent__; }");
tryItOut("M:switch(([@foo for (__iterator__ in false)])()) { default: /*infloop*/for(((uneval(new function () { return <x><y/></x> } ().hasOwnProperty(\"__parent__\")))); setter.__parent__; (({}).__lookupGetter__).call((__parent__.prop setter= function(id) { return id }), (uneval((true.__iterator__))),  '' )) {gc()do {gc() } while((__proto__ = __parent__) && 0); }break; /*for..in*//* nogeckoex bug 349964 */L: for  each(var ({ prototype: __count__, x::prototype: prop }) in window) {export *; }break; (1 for (x in []))break; case 'fafafa'.replace(/a/g, __proto__ = <x/>).unwatch(\"__proto__\"): /*for..in*/for(const (1e-81.watch(\"__count__\", false)).prop in (eval(\";\", 0/0))) return <x/>;return this;return *::*;break; case (<y><z/></y> .@  /x/g ): break;  }");
tryItOut("while((String()) && 0){gc }");
tryItOut("if(null) return *::*; else  if (-1.__defineSetter__(\"prototype\", eval)) getter; else {export *;throw <x><y/></x>; }");
tryItOut("export __parent__\n/*for..in*/L:for(var [__proto__, __noSuchMethod__] = eval(\"((this.zzz.zzz)() for (constructor in prop) for (<x/> in window) for (prop in null))\", __noSuchMethod__ .@ <><x><y/></x></>.unwatch(\"__noSuchMethod__\")) in yield false) \n{}");
tryItOut("let (constructor = eval()) { /*infloop*/for(let ({ __parent__: __parent__ }) = <><x><y/></x></> ? *::* : [[1]]\t; (-window); 5.0000000000000000000000 | window) {yield; }\nlet constructor, prototype = <><x><y/></x></>; }");
tryItOut("default: break; case (\"__proto__\",  __noSuchMethod__ (*::*).call): break; ");
tryItOut("{(prototype);/*infloop*/while( '' .*)break  }");
tryItOut("return ({ set __count__(__parent__, __count__) { return constructor\n } ,  set prop __count__ (constructor, __proto__) { return <x/> }  }).valueOf(\"number\");");
tryItOut("L:if(null.propertyIsEnumerable(\"constructor\")) return;");
tryItOut("with(break L;){(<y><z/></y>);yield this; }");
tryItOut("{export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype(this.zzz.zzz) in (constructor = {})) ;");
tryItOut("while((window) && 0){if(prototype) { if ({}) {<y><z/></y>;__proto__; } else __parent__;}var prototype; }");
tryItOut("const __noSuchMethod__;");
tryItOut("if(yield <x/>) let __proto__, __iterator__; else  if ((__parent__.__parent__)) yield #3={a:#3#};");
tryItOut("\f");
tryItOut("return ('fafafa'.replace(/a/g, Math.sin) @ (void *));");
tryItOut("export *;");
tryItOut("if(1e4.unwatch(\"prototype\")) /*infloop*/for((false >>> <x><y/></x>); constructor = *; (<x><y/></x>.@*)) {throw this; } else  if (eval(\"({prototype: <><x><y/></x></> })\", <x><y/></x> != <y><z/></y>)) gc()");
tryItOut("{\twhile((( \"\"  instanceof undefined)) && 0){continue M;const constructor, __count__ = <x><y/></x>; }gc() }");
tryItOut("if(this.zzz.zzz) gc() else  if ((__noSuchMethod__ = <><x><y/></x></>)) {yield *::*; } else {export constructor; }");
tryItOut("prop = __parent__, __noSuchMethod__;");
tryItOut("export *\n");
tryItOut("/*for..in*/L:for(const __iterator__ = new (prototype.constructor)() in --each = <><x><y/></x></>) return;");
tryItOut("/*for..in*/for(let __proto__ =  /x/  @ * in  \"\" ) {yield 3;(this); }");
tryItOut("if(#1=*::*) \n{M:if( /x/ ) {<y><z/></y>; } else  if (<>\t<x><y/></x></>) {yield <><x><y/></x></>;yield this; }; }");
tryItOut("prototype");
tryItOut("with({}) for(let y in []);");
tryItOut("gc()");
tryItOut("M:if(0.yoyo(__proto__)) yield; const prop;");
tryItOut("{ /x/ let (__iterator__, constructor) { export *; }throw prop; }");
tryItOut("L: {yield <x><y/></x>;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__.__noSuchMethod__ in true) {; }");
tryItOut("/*infloop*/for(const constructor = window; (({ __iterator__: <x/>.constructor, constructor: ({ __iterator__: [] }) }) = ((uneval(false))).yoyo((({prop setter: [1,,], __iterator__: window })))); (function () { return <x><y/></x> } ).call((<x/>--), ((1 for (x in [])))(), <y><z/></y>)) return *");
tryItOut("L: {let __parent__, __noSuchMethod__;gc() }");
tryItOut("L:if([[1]]) { if (<> get __iterator__( /x/g , [z1], __proto__){}</>) gc() else {function  prop (constructor, __proto__) { yield  ''  } gc() }}");
tryItOut("/*infloop*/for(var prop = true; __proto__; __parent__) const function::true, constructor =  /x/ ;");
tryItOut("if(<><x><y/></x></>.__defineSetter__(\"__count__\", function () { throw [[]]; } )) {Math.sin }");
tryItOut("/*for..in*/for(__proto__ = new @foo.propertyIsEnumerable(\"prototype\")() in ((({ prop: __proto__, __iterator__: __proto__ }) = 'fafafa'.replace(/a/g, [1,2,3,4].map)) @ (__count__ = ((true)())))) const constructor;");
tryItOut("var ({ __proto__: ({ __noSuchMethod__: [\tprototype] }), __count__: prototype }), __parent__;");
tryItOut("/*infloop*/M:while((uneval((<y><z/></y> <<= <x><y/></x>)))){/*for..in*/for(let prototype in ((<x><y/></x>)(<><x><y/></x></>)))return; }");
tryItOut("L:do prototype; while((((yield <y><z/></y>))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in function::__parent__ = <><x><y/></x></>) export *;{}");
tryItOut("{; }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: ({ constructor: __parent__, __parent__: [, , , __proto__]\t }) }) = [yield *]; #0=[this\f.__defineSetter__(\"function::__iterator__\", gc).isPrototypeOf(*[@foo])]; __noSuchMethod__ = prop) export *;");
tryItOut("{return window;__iterator__ = constructor; }");
tryItOut("/*infloop*/for(var prototype; <><x><y/></x></>; prototype) {}");
tryItOut("if(undefined) yield; else  if (<x><y/></x> ? @foo : <x><y/></x>) var __iterator__;");
tryItOut("if(*::*[@foo] << (true.watch(\"constructor\", 0x99)).\t__defineSetter__(\"__proto__\", ({}).hasOwnProperty)) { if (([@foo].sort(gc))) function::__proto__, constructor = 1e4; else {yield;let __parent__ = <><x><y/></x></>; }}");
tryItOut("let (({ __noSuchMethod__: __count__, __proto__: ({ __iterator__: __count__, __noSuchMethod__: [, , , ] }) }) = (__iterator__ = true.hasOwnProperty(\"prototype\"))) { let ([] = __proto__ = prototype) { var __noSuchMethod__ = this, prop = constructor; } }");
tryItOut("/*infloop*/while(<xxx {prototype}={(prop = this)} />.((<y><z/></y> for (__proto__ in const __proto__ = <x/>;)))){yield  /x/ ; } const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x/>) M:if(this.__defineSetter__(\"prototype\", Math.sin)) { if ((false.propertyIsEnumerable(\"let\"))) gc()} else {{}return .2; }");
tryItOut("/*infloop*/while(<>yyy</>){prototype = 1e4;function  prototype (delete, __parent__) { yield <><x><y/></x></> }  }");
tryItOut("if(undefined) (undefined); else  if (prop &= 1.3) return; else ({}).__lookupGetter__");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((({}).hasOwnProperty)(window))){ }");
tryItOut("/*infloop*/M:while((true <<= <x/> for ((prop) in <x/>) for (constructor in <>__noSuchMethod__</>))){let __iterator__, __parent__ = 3.141592653589793;/*infloop*/for(__noSuchMethod__ =  \"\" ; window; <x><y/></x>) {[,,];throw <y><z/></y>; } }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = (--(-1).unwatch(\"__proto__\")); (x::prototype-=-1); .2) ;");
tryItOut("switch(false :: [,]) { default: L:if((({prototype: [1,,]}))) { if (*::*) const constructor = 1e+81, constructor;} else {thisgc() }break; break; case 3: break L;break;  }");
tryItOut("return;");
tryItOut("L: {var <x><y/></x> = <><x><y/></x></>, __iterator__ = <y><z/></y>; }");
tryItOut("L:if([15,16,17,18].filter((__iterator__)(__noSuchMethod__), <><x><y/></x></>)) prop, constructor =  /x/g ; else {/*infloop*/for(let prop = new @foo(yield undefined); (<x/>.propertyIsEnumerable(\"__proto__\")); (({ __iterator__: __iterator__, __noSuchMethod__: __count__ }) =  /x/  == 3.141592653589793)) yield .2;return undefined; }");
tryItOut("__count__.__parent__ = function::prototype;");
tryItOut("break L");
tryItOut("{}{}");
tryItOut("switch((-0)()) { case 5: var prop = <y><z/></y>, constructor;break;  }");
tryItOut("yield (new (yield 1e81).valueOf(\"number\"));");
tryItOut("null\nthrow window; const constructor;");
tryItOut("if(5.0000000000000000000000) {let get = 0, __proto__ = <x><y/></x>; } else {/*infloop*/while( /x/ ){var __noSuchMethod__; }return; }");
tryItOut("/*for..in*/for(__count__ = undefined.((this.eval(undefined))) in  /x/g ) {[[]]; }");
tryItOut("if((prototype)) __iterator__; else  if (<><x><y/></x></>) yield <x><y/></x>;");
tryItOut("/*infloop*/for(const __iterator__; yield ({constructor: <x/> }); constructor) export *;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(const constructor in ((Math.pow)(eval(\"function  prop (__iterator__, prop) { yield  \\\"\\\"  } \", window)))){export *; }\nexport __parent__;\n");
tryItOut("return (eval(\"return @foo;\", true));");
tryItOut("/*for..in*/M:for(const __proto__ = true if ((-1)).__proto__ = ({__count__: new Function(<y><z/></y>.propertyIsEnumerable(\"x::__parent__\")), setter getter: ({function::__proto__: 1e-81}) }) in <x><y/></x>.(@foo)) {let (__noSuchMethod__ = this) { var constructor = -1; }return <x/>; }throw function::__iterator__;");
tryItOut("/*infloop*/do {if(<x/>) {prototype;return (-1); } else  if ((-0 <  '' )) {([1]); } else return; } while((((({}) - #3={a:#3#}))( \"\" .eval([1]))));");
tryItOut("with({__iterator__: <y><z/></y>})var __parent__, prop;export *;");
tryItOut("if(function(q) { return q; }) { if (* = 1.2e3 / (-1).__lookupSetter__(\"prop\")) {(false);/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in <y><z/></y>) {;'haha'.split } }} else {var <x><y/></x>\f;return\nreturn; }");
tryItOut("with({}) prop = __count__;");
tryItOut("L:while((Math.pow) && 0)yield;");
tryItOut("/*infloop*/do {yield; } while(constructor.__count__ = <><x><y/></x></> * eval(({a1:1}),  '' ));");
tryItOut("yield @foo;\n(0.1);\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in (<x><y\n/></x> = ({ __parent__: function::prototype }))) [1];");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const [__iterator__, constructor] = <x><y/></x> in #1=[#1#]) {return;export __proto__; }");
tryItOut("/*infloop*/while(0){yield;return *::*; }");
tryItOut("{gc()return; }\n");
tryItOut("with((p={}, (p.z = function(id) { return id })())){__iterator__;if(false) function  __proto__ ()#1=[#1#] else  if (<x><y/></x>) var constructor, prop; else <x><y/></x>; }");
tryItOut("let (prop) { new Function }");
tryItOut("L:with({__noSuchMethod__: <y><z/></y>}){{} }");
tryItOut("if(( ''  + function ([y]) { }.__defineGetter__(\"__parent__\", ).watch(\"function::prototype\", \f[1,2,3,4].slice).__proto__)) {/*infloop*/for(#3={a:#3#}; *::*; __count__) {yield  /x/g ; } const prop;yield new (-3/0)(); } else  if (prop = -0) {{} } else /*for..in*/for(__noSuchMethod__ = eval(\"export __proto__;\", this.__defineSetter__(\"__proto__\", gc)) in false) throw -1;");
tryItOut("L:if((\n<><x><y/></x></>)) export __noSuchMethod__; else {(try {  \"\" ; } catch(prop if (function(){function  constructor (__iterator__) { export *; } })()) { export __iterator__; } finally { throw __iterator__; } )\n }");
tryItOut("try { return; } finally { {let prop = <x><y/></x>; } } ");
tryItOut("let prototype, __parent__ = undefined;");
tryItOut("L: {export *; }");
tryItOut("/*infloop*/L:while(@foo)");
tryItOut("try { ([,,]); } catch(__iterator__ if (function(){throw @foo;})()) { gc() } catch(__proto__) { throw <><x><y/></x></>; } finally { <><x><y/></x></>; } ");
tryItOut("/*infloop*/do {while((constructor = prop) && 0)let __proto__;L:if((([prototype--].map((false).__defineSetter__)).unwatch(\"<bbb xmlns:ccc=\\\"(this.zzz.zzz)\\\"><ccc:eee></ccc:eee></bbb>\")))  for (__iterator__ in window) } while(this.__defineGetter__(\"constructor\", <y><z/></y>));");
tryItOut("/*infloop*/M:do let __count__ = prop; while(__count__.constructor setter= [1,2,3,4].slice);");
tryItOut("/*for..in*/for(prototype in (([1,2,3,4].slice)(typeof window))){;yield; }");
tryItOut("window;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = 033-- in *::*) (__count__);");
tryItOut("/*for..in*/M:for(let prototype = (<x><y/></x>)[*] in ((p={}, (p.z = function::__iterator__ = __parent__ getter: Math.pow)()))) /*for..in*/L:for(const [__parent__, __iterator__] =  /x/  in window) {var __iterator__ = this; }");
tryItOut("L:if((Function).call(@foo, <x/>)) {return <y><z/></y>;yield; } else const __parent__ = <><x><y/></x></>, __iterator__ = false;");
tryItOut("/*for..in*/for(var __proto__ in (([1,2,3,4].slice)((uneval(new (({}).hasOwnProperty).apply())))))var __iterator__ = <><x>\t<y/></x></>;\n/*infloop*/for(Number([z1], 3/0); [<x/>].map(({}).hasOwnProperty); __proto__ == <><x><y/></x></>) {continue L;gc() }\n");
tryItOut("delete;\nbreak ;\n");
tryItOut("/*for..in*/for(const this in ((Math.pow)(this.__noSuchMethod__)))__proto__ = <x><y/\r></x>, __parent__ = <x><y/></x>;");
tryItOut("if(constructor = *) {[1,2,3,4].sliceexport __iterator__; }");
tryItOut("let ([]) { ; }");
tryItOut("<><x><y/></x></>;");
tryItOut("switch(({a2:z2})) { default: break; case (prototype.__count__ getter= function(y) { yield y; window;; yield y; }) ? ( /* Comment */<><x><y/></x></>) : prop.prototype = 1e-81: break;  }");
tryItOut("/*infloop*/for(yield; ({a2:z2}); this *= <y><z/></y>) {return; const prototype; }");
tryItOut("/*infloop*/for(var __iterator__; (Math.sin).call(<y><z/></y>\n ? 'fafafa'.replace(/a/g, /a/gi) : __iterator__ = 3.141592653589793, ); eval(\" /x/g \",  /x/g ).__defineGetter__(\"__parent__\", this)) {__parent__ = *, function::__proto__; }");
tryItOut("/*infloop*/M:do gc() while(this.__defineSetter__(\"__proto__\", ({}).hasOwnProperty)\n);");
tryItOut("with({}) { {} } ");
tryItOut("M:switch(new (eval)()) { default: continue \n(new Function(\"return null;\"))\nbreak; break; case --__parent__: {}case (yield new Object([], __iterator__)): case false instanceof 3.141592653589793: ( '' ); }");
tryItOut("let prototype, __parent__;(*::*)\n");
tryItOut("with({}) { try { ; } catch(__count__ if null) { function(q) { return q; } } catch(__parent__ if (function(){export *;})()) { break L; } catch(prototype if (function(){break ;})()) { export *; } catch(prototype if (function(){{}})()) { return; } catch(constructor if <x><y/></x>) { const __proto__; } catch(x::constructor if (function(){__proto__;})()) { Math.sin } catch(__iterator__ if ({})) { yield \f({a1:1}); } finally { const constructor; }  } ");
