tryItOut("/*for..in*/for(__proto__ = <{prototype}>\t<!--yy--></{prototype}> in [[]]) {const prototype, __noSuchMethod__ = 1e-81;yield; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("L: {M:if(-3/0) (1 for (x in [])) else  if (arguments) {break ; } else yield <y><z/></y>; const prop; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(prototype.__count__ in ((<x/>)(window))){(Math.pow).applyreturn; }");
tryItOut("function (__parent__) { yield this } ");
tryItOut("");
tryItOut("if(*::*) const __proto__, function::__iterator__; else {M:if(<><x><y/></x></>) export *; else return; }break ;");
tryItOut("/*for..in*/for(var function::__proto__ in (((033).__defineSetter__)(0x99 .. <x><y/></x>.@foo))){/*infloop*/M:for(const ({ constructor: __iterator__ }) = __count__; __iterator__.(*::*); (0x99--)) {let prop;return <><x><y/></x></>; }{export *; } }");
tryItOut("let (constructor, ({ prop: __iterator__ })) { continue M; }");
tryItOut("/*for..in*/for(let __parent__ in <x><y/></x>.(__proto__)) {prototype; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; @foo; true) yield;");
tryItOut("return (uneval(undefined)) <<= window.throw( \"\" );");
tryItOut("yield;");
tryItOut(" \"\" ;");
tryItOut("/*for..in*/for(var prop in (((*::* for each (prop in <x><y/></x>)).watch)((__proto__ = (null -= <x><y/></x>)).unwatch(\"__iterator__\"))))/*infloop*/do {/*for..in*/M:for(__noSuchMethod__ = #1=[#1#] in this) { } } while(__noSuchMethod__.hasOwnProperty(\"__noSuchMethod__\"));");
tryItOut("/*for..in*/for(let constructor in (([false if ()]) | (<y><z/></y>)( /x/g , undefined))) ;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for([__noSuchMethod__, __proto__] = 1e-81 in false) { }");
tryItOut("/*for..in*/for(let [prototype, __parent__] = __parent__ in <y><z/></y>) (@foo);");
tryItOut("/*infloop*/for(eval(\"__parent__\", <x/>); __count__ = __count__; (uneval(<><x><y/></x></>))) ;");
tryItOut("L:if(3/0) { if ([({ __count__: __parent__ }), __proto__, ] = prop) {export __count__; }} else /*for..in*/L:for(var prop = (+<x><y/></x>) in this) (false);");
tryItOut("with({__parent__: (<><x><y/></x></>)(this[ /x/ ])})export *;");
tryItOut("/*for..in*/for(var prototype = <><x><y/></x></> in null) {break ;yield; }\n(*).watch\n");
tryItOut("M:if(((uneval(<x><y/></x>)))) {prototype = prop; } else \nreturn <><x><y/></x></>;");
tryItOut("with(window.watch(\"__noSuchMethod__\", function (__count__) { (this); } )){let __count__; }");
tryItOut("/*infloop*/M:for(prototype.__noSuchMethod__ = [[]]; __noSuchMethod__ = <x/> >>>=!0/0; (this.zzz.zzz)) {/*for..in*/for(const [__count__, prototype] = [11,12,13,14].map in this) if(this) {let function::__noSuchMethod__ =  \"\" , __parent__ = [,]; } else {yield <><x><y/></x></>; } }");
tryItOut("M:with(prototype = false){break ;const window = window, prototype; }");
tryItOut("{{{}/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in [z1,,]) {throw constructor;false; } }gc() }");
tryItOut("/*for..in*/for(const __parent__ = __count__ in 1e-81) {;export __iterator__; }");
tryItOut("return;");
tryItOut("L: {let prototype = <x><y/></x>;(<x><y/></x>); }");
tryItOut("L:if(continue M;) {return; } else {return  /x/g ;yield <x><y/></x>; }");
tryItOut("throw constructor;");
tryItOut("with({__proto__: constructor}){const prop, __iterator__;continue M; }");
tryItOut("let (({ constructor: ({ __noSuchMethod__: __noSuchMethod__, constructor: [, , prop, ] }) }) = [(([1,2,3,4].slice).call(<><x><y/></x></>, <x><y/></x>,  /x/ ))].map((function (prototype, prop)__parent__).call)) { with({constructor: [[1]] instanceof  /x/g }){yield null;var __noSuchMethod__, __count__ = <x/>; } }");
tryItOut("do {continue ;{} } while((([<y><z/></y> if (true)] /= /a/gi)) && 0);");
tryItOut("if( get ) { if ((({__parent__: 0.1})) ===  '' .eval(033)) yield;} else {continue ; }");
tryItOut("{/*infloop*/for((__iterator__ = <y><z/></y>--); (null |= null); new Iterator()) {0.1; }if((constructor)[<><x><y/></x></>].__lookupSetter__(\"prototype\")) ;\f else export __count__; }");
tryItOut("__proto__ = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__ in prototype) /*for..in*/for(const [__iterator__, __count__] = ({ prototype: constructor }) = __count__ in window) {/*infloop*/while(prototype){return *;gc() } }");
tryItOut("/*infloop*/for((({a2:z2}))(this,  '' ); function::__count__ = undefined; <x><y/></x>.eval( \"\" )) break \nL:while((\tfalse) && 0){var __parent__ = <y><z/></y>, __parent__ = <><x><y/></x></>;yield window; }");
tryItOut("L:if(*::*) {export *;__proto__; } else return function ([y]) { };");
tryItOut("this.zzz.zzz;");
tryItOut("export *\n/*for..in*/for(__parent__ in ((function  __iterator__ (__iterator__, __parent__) { yield;\r } )(false)))return null;");
tryItOut("/*for..in*/for(const constructor in @foo) const constructor =  \"\" ;");
tryItOut("L:if((this.__defineSetter__(\"__proto__\", function(q) { return q; }))) { if ((!@foo)) {} else  /x/g ;}");
tryItOut("if(prototype\t) { if ( /x/g )  '' ;} else (this);");
tryItOut("with(window)export __proto__;");
tryItOut("return\n");
tryItOut("{if( /x/g ) { if (4.) throw (-0);} else {return [,]; } }");
tryItOut("/*infloop*/M:do \t{while((new (eval)( \"\" )) && 0){1e-81; } } while( \"\" )\n");
tryItOut("{{with({__count__: prototype = <><x><y/></x></>})export __parent__;; } }");
tryItOut("/*infloop*/while(<><x><y/></x></>)return -3/0;");
tryItOut("switch((prototype = *::* ? null : <x><y/></x>)) { case 8: return;export *;break;  }\nwith({__count__: void [z1]}){__parent__ = <y><z/></y>; }");
tryItOut("gc()");
tryItOut("<y><z/></y>.hasOwnProperty(\"__parent__\")");
tryItOut("__parent__ = <x/>;if(<x/>) yield  /x/ ; else {return; }");
tryItOut("{for(let y in [5,6,7,8]) with({}) throw __iterator__;(({ __parent__: __count__, prototype: ({ prototype: __noSuchMethod__ }) })); }");
tryItOut("/*infloop*/M:for(let [__noSuchMethod__, , , prototype, prop] = ((new (constructor).apply(__iterator__) >>= (uneval(__noSuchMethod__))) & (gc)()--); 3.141592653589793; prop = <\f><x><y/></x></>.propertyIsEnumerable(\"__proto__\")) {if(3/0) throw this; }");
tryItOut("L: {M:with({__noSuchMethod__: (true.__lookupGetter__(\"__iterator__\"))})break ;return; }");
tryItOut("with(__parent__: <x/>}')M:switch((({__noSuchMethod__: this, constructor: true }))) { default: break;  }");
tryItOut("if(arguments) {{break M; } } else  if (void (undefined\n)) return <x><y/></x>; else { import  }");
tryItOut("(false);");
tryItOut("{; }");
tryItOut("switch(window || prototype.yoyo(constructor)) { case [window if ( /x/g )]: return;if(<><x><y/></x></>) { if (<x/>) {prototype = 1.3, __noSuchMethod__ = 1e-81; }} else export *;break;  }");
tryItOut("return ({__iterator__: <x><y/></x>});");
tryItOut("throw __noSuchMethod__;");
tryItOut("let(__parent__ = 5.0000000000000000000000 .@*:: this, prop) { ({ prototype: prototype })");
tryItOut("({ prototype: prototype })if((function ([y]) { })()) { if (__proto__ = ({ constructor: __parent__, constructor: __proto__ })) { } else ;}");
tryItOut("/*infloop*/for([prototype, ({ __noSuchMethod__: prop, constructor: ({ constructor: [__proto__], __parent__: __noSuchMethod__ }) }), [[, , <x><y/></x>, prop, ], , ]] = (prop.(__parent__).watch(\"__noSuchMethod__\", ({}).__lookupGetter__)); null; __noSuchMethod__.((function  __proto__ () { yield <x><y/></x> } ).apply)) return <><x><y/></x></>\n");
tryItOut("new function(y) { yield y; throw <x><y/></x>;; yield y; }( /x/g , <><x><y/></x></>);");
tryItOut("{L:if( '' ) { if (<y><z/></y>) {try { continue ; } finally { null }  } else {throw <x><y/></x>;null; }}{continue M;<><x><y/></x></>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <x><y/></x>) ");
tryItOut("/*infloop*/while((<><x><y/></x></>.eval(<><x><y/></x></>))){{}; }");
tryItOut("yield (__count__;\n)\f;");
tryItOut("throw __proto__;");
tryItOut("__iterator__ = prop;");
tryItOut("__count__ = prop;");
tryItOut("if((function ([y]) { })[*::*]) if(undefined) {  { yield (__iterator__\f = prototype) }  export *;export __proto__; } else  if (<y><z/></y>) {export *;gc() } else {var prop = <><x><y/></x><\f/>;constructor: this } else {let prototype =  /x/g ; }");
tryItOut("__proto__, prototype\n");
tryItOut("let(__count__ = this) ((function(){const __proto__ =  '' ;})());");
tryItOut("return;");
tryItOut("M:if([\n1e-81]) return else {yield; const constructor; }");
tryItOut("(#3={a:#3#});with({}) { return constructor; } ");
tryItOut("/*infloop*/M:for(<x/>.__defineSetter__(\"constructor\", (this).call); new ([,,z1])(*::*); eval) if(<><x><y/></x></>) {(*);yield null; } else  if (this) export __count__;");
tryItOut("^");
tryItOut("while(( /x/ \n) && 0)yield  \"\" ;");
tryItOut("export *;");
tryItOut("with({__parent__:  '' .(eval(\"__proto__ =  '' ;\", + /x/g ))}){yield *::*;\nyield  \"\" ;\nexport *; }");
tryItOut("L: {var __proto__;; }{continue ;const __proto__ = this; }");
tryItOut(";/*for..in*//* nogeckoex bug 349964 */M: for  each(const __parent__ in *::*) {throw 0;__parent__ = <x><y/></x>, __noSuchMethod__; }");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("let (constructor = <x><y/></x>, __noSuchMethod__) { if(--<y><z/></y>) throw {}; }");
tryItOut("L:with({constructor: false}); const prop;");
tryItOut("/*infloop*/for(((p={}, (p.z = false)()) :: //h\nprototype = *::*); (function (__count__, __proto__) { return @foo; }  && [#3={a:#3#}]); (p={}, (p.z = [z1,,])())) var __parent__;");
tryItOut("L: ;");
tryItOut("let (__count__, __count__ =  /x/g ) { return <><x><y/></x></>; }");
tryItOut("/*infloop*/do prop, prototype; while([1]);");
tryItOut("L: { }\n/*infloop*/while(__iterator__ = ({a2:z2}) === -0)/*infloop*/while(5.0000000000000000000000){3.141592653589793{} }\n");
tryItOut("{return true;(new Function(\"throw 0;\")) }");
tryItOut("if(new window()) {return;/*for..in*/M:for([__noSuchMethod__, __iterator__] = <x><y/></x> in this) {; } } else  if ((__parent__ for each (prototype in window)) /= new false) {return; } else do gc() while((function(id) { return id }) && 0);");
tryItOut("return; const prototype;");
tryItOut("if((p={}, (p.z = false)())) {{} } else  if (#1=[,]) ;");
tryItOut("L:with(@foo.propertyIsEnumerable(\"__proto__\") || (-3/0 .. 1e4))/*infloop*/M:for(<><><x><y/></x></>.watch(\"__iterator__\", <x><y/></x>)</>; (yield null); prop = this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__) .. *.watch(\"constructor\", (function ([y]) { }).call)) ([[1]]);");
tryItOut("switch(undefined ? -1 : <>default: /*for..in*//* nogeckoex bug 349964 */ for  each(var <y><z/></y> in true) {<y><z/></y>;do return  /x/ ; while((<><x><y/></x></>) && 0); }case (@foo[1e-81]): export *;case 6: L: \tcase new Function(): </>) { default: break; case 5: break; {let constructor = <y><z/></y>, constructor;yield @foo; }break;  }");
tryItOut("L: {__iterator__export *; }");
tryItOut("let (__parent__ = @foo, __proto__) { __parent__, __iterator__; }");
tryItOut("export __proto__\n\n/*infloop*/while(({__parent__ getter: function(q) { return q; } }))__iterator__, __iterator__; const __noSuchMethod__;");
tryItOut("L:if(try { throw prototype; } catch(constructor) { continue M; } finally { var prototype = 3.141592653589793; } (false)) gc() else  if ((({constructor: , prop getter: (undefined).watch }))) function  __proto__ (__proto__) { return __iterator__ }  else /*for..in*/M:for(const [__count__, __iterator__] = try { (<x><y/></x>); } catch(__parent__) { var prop = this, prototype; } finally { {} }  in <y><z/></y>) {}");
tryItOut("/*infloop*/for(const __count__; (function(y) { yield y; function  __noSuchMethod__ (prototype) { yield  /x/g  } ; yield y; }).call(__noSuchMethod__, <x><y/></x>); #2=({__noSuchMethod__: <x><y/></x>})) __parent__ =  /x/g , __iterator__ = <x/>;");
tryItOut("");
tryItOut("with(({}).hasOwnProperty = <y><z/></y>){;const __noSuchMethod__ = undefined, __iterator__ = __parent__; }");
tryItOut("L: let prototype = arguments;");
tryItOut("/*infloop*/for(const [({ constructor: ({ __count__: __proto__ }) }), ] = (__count__.(eval(\"return 0;\", ({ constructor: __noSuchMethod__, constructor: constructor })))); __parent__.(function(id) { return id }); (yield <x><y/></x> ? <><x><y/></x></> : <x><y/></x>)) {yield <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(const prototype in (( \"\" )(window)))return <x><y/></x>;");
tryItOut("if(0/0) let __count__ = undefined, constructor = 1.3; else  if (<x><y/></x>) __iterator__ else \n{let; }");
tryItOut("switch((this.__defineGetter__(\"<x><y/></x>\", (new Function(\"yield;\"))) if (({ set prop __iterator__ () { yield undefined; } ,  get prototype(__proto__, __iterator__) /x/g  })\t <<= (*::* >>>=1e+81)))) { default: with(({prototype getter: (1 for (x in [])), __iterator__: (-( /* Comment */<y><z/></y>.unwatch(\"prototype\")) - ({})) })){<><x><y/></x></>;/*infloop*/for( '' ; <x/>; (function ([y]) { })()) return this; }break; case ((({__noSuchMethod__: #1# % <><x><y/></x></>})).unwatch(\"[]\")): case 0: var prop = <x><y/></x>.(033\t);case 7: {; }break; case 7: yield;__count__ = (__parent__ = <><x><y/></x></>)break; prop = <><x><y/></x></>;/*for..in*/for(const [function::__noSuchMethod__, constructor] = true in  '' ) {const __proto__, constructor;let prop; }break;  }");
tryItOut("let ({ prototype: [, prop] }) = <> </>, __proto__ = #3={a:#3#} / \f<x><y/></x>");
tryItOut("L: #1=[#1#];");
tryItOut("");
tryItOut("do {*::*;function(q) { return q; } } while(( ''  /=  /x/g ) && 0);");
tryItOut("return this.prop = <><x><y/></x></> | [__parent__, __proto__, \t, __proto__, __iterator__] = prototype.constructor setter= Math.pow;");
tryItOut("/*infloop*/for(({__count__:  '' }) >> this.__defineGetter__(\"__parent__\", 1e+81); (new (yield prototype / <x/>)); ({__noSuchMethod__: this -= __parent__.*, __proto__: #0=<><x><y/></x></> })) if(\n \"\" ) yield;");
tryItOut("gc()\n\n");
tryItOut("if(<y><z/></y>) let (function::function::__proto__, __parent__ =  /x/g ) { let prop, __count__; } else  if ((yield [11,12,13,14].sort)) yield *::*;");
tryItOut("/*for..in*/for(__proto__ = false in <x><y\f/></x>) export prop;");
tryItOut("L: {__proto__ }");
tryItOut("with(#2=[({a1:1})] ? prop :  /x/g [<x><y/></x>].__lookupSetter__(\"prototype\")){({}).__lookupGetter__\n;throw __noSuchMethod__; }");
tryItOut("let (__parent__, constructor = 1e+81 ? <x><y/></x> : <x><y/></x>) { with({prototype: <y><z/></y>})yield; }let(__parent__ = (#1=[this])) ((function(){throw StopIteration;})());");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(undefined.__defineGetter__(\"prototype\", (*).watch); .2.unwatch(\"__noSuchMethod__\"); __proto__) ");
tryItOut("/*infloop*/do  while(<x/>.__lookupGetter__(\"prototype\"));");
tryItOut("let (__parent__ = {}) { __parent__ = <x><y/></x>, constructor }");
tryItOut("L:if(<xxx {prop}={prototype.__noSuchMethod__} />) {/*for..in*/for(__proto__ = null in <x><y/></x>) {let prop = <><x><y/></x></>, prop = __parent__; }yield; } else continue ;return 1e81;");
tryItOut("M:switch(*) { case <><x><y/></x></>: yield; }");
tryItOut("/*for..in*/for([function::prop, setter] = (++false.<y><z/></y>, let (constructor = *, __count__) (-0) = (Number((prop if (function(id) { return id })) @ <x><y/></x>.yoyo(function ([y]) { })))) in __parent__.__proto__) {/*for..in*/for(let prototype(function(id) { return id }) in #1=[#1#]) {throw <x/>; }return null.hasOwnProperty(\"__proto__\"); }");
tryItOut("/*for..in*/for(let __iterator__ in  \"\" ) {\f{return;L:if(<x/>) {<><x><y/></x></>; } } }");
tryItOut("__parent__ = window, prop = null;/*for..in*/for(var __parent__ in ( /* Comment */*)) {}");
tryItOut("let(__count__ = undefined) { throw __parent__;");
tryItOut("L:with({constructor: get = undefined}){/*infloop*/for(const __iterator__; -3/0; true) {{} } }");
tryItOut("/*infloop*/L:for(__count__; new Date(\n(true(__proto__, <><x><y/></x></>)), [,] >= prop); Object(#3={a:#3#})) {yield (prop = null); }");
tryItOut(";");
tryItOut("M:if((({}).__lookupGetter__)((prop = <><x><y/></x></>), *)) {continue ; } else  if (throw (<x/>)(__parent__)) {let (({ __count__: constructor }), __iterator__) { ( /x/g ); } } else {}");
tryItOut("return;");
tryItOut("M:switch(()) { default: export __count__; }");
tryItOut("do { } while(( /x/g ) && 0);");
tryItOut("\n");
tryItOut("/*infloop*/while((Math.pow).apply)/*for..in*/L:for(let __iterator__ = 'fafafa'.replace(/a/g,  /x/ ) in eval(\"__iterator__ = ({});\", window)) {return;throw <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(let [__count__, delete] = (({prop: (false.isPrototypeOf(#1#)) })) in []) {(false);const __parent__; }\n");
tryItOut("/*for..in*/for(const __proto__ in [15,16,17,18].filter(@foo, <x/>)) L: return null;");
tryItOut("<y><z/></y>");
tryItOut("/*for..in*/for(var 1e4['__noSuchMethod__'] in ((function(y) { yield y; if(.2) {'haha'.split }; yield y; })((<x/>.__defineSetter__(\"__iterator__\", Math.pow)))))__count__;");
tryItOut("( '' ).__defineSetter__ const constructor;");
tryItOut("L: ( /x/g );");
tryItOut("if(<x/>) ; else  if (<x><y/></x>) {throw <><y/ > <x><y/></x>.__lookupSetter__(\"__count__\") </x>;constructor, __proto__\n");
tryItOut("if(prop = arguments) (<><bbb xmlns=\"true\"><!\t--yy--></bbb></>); else const __iterator__;");
tryItOut("/*for..in*/for(const constructor in ((Math.sin)((false *= @foo.__defineSetter__(\"__noSuchMethod__\", function () { return <x><y/></x> } )))))gc()");
tryItOut("if() { if (@foo) } else {}");
tryItOut("{(<x/>);var __count__ = ({__proto__: <x/> }), *::* = {} ^ __proto__; }");
tryItOut("/*infloop*/for(null += __noSuchMethod__; *::*; <><x><y/></x></>.@*[<><x><y/></x></>[<y><z/></y>]]) const __noSuchMethod__;");
tryItOut("with((eval(\"<><xxx {prototype}={({a1:1}) = prototype} /></>\", (({__iterator__: 5.0000000000000000000000})) ? (__noSuchMethod__ = eval(\"break ;\", .2)) : (#1=({prototype: undefined == window})))))const prop, __noSuchMethod__;if(*) gc() else  if (__parent__) gc()");
tryItOut("{continue M; }\n");
tryItOut("/*for..in*/for(var __count__ in ((#2=<x><y\t/></x>) ? --<x/> : <{prop}> </{prop}>)) /*for..in*/for(const [__noSuchMethod__, __proto__] = (1 for (x in []))(this.zzz.zzz).watch(\"__noSuchMethod__\", new Function) in <y><z/></y> .@x:: <x/>) var __parent__ = <><x><y/></x></>;");
tryItOut("yield false\nreturn;");
tryItOut("do {throw __count__; } while((({ __parent__: prop }) = ((*::*)(throw undefined;, <>></x></>))) && 0);");
tryItOut("return (gc(prop = <><x><y/></x></>, 1e4));");
tryItOut("if(__noSuchMethod__ = this *= <y><z/></y>.__defineSetter__(\"__parent__\", (new Function(\"return ({a1:1});\")))) {{}\n } else {throw window;/*infloop*/for(var (__parent__{ prop: [__parent__, prop] }) = -0; __noSuchMethod__ = <x><y/></x> && <><x><y/></x></>; eval(\"function ([y]) { }\", <><x><y/></x></>)) {var __noSuchMethod__, function::prototype = window; } }");
tryItOut("/*infloop*/do {/*infloop*/for(let prototype; undefined; <><x><y/></x></>) gc()<x/>; } while((yield  /x/g ));/*infloop*/while((__proto__ = ([15,16,17,18].map(({}).__lookupGetter__, __parent__) for each (constructor in 1.2e3) for (__parent__ in [1]) for (__iterator__ in prototype)))){const \n__count__ = @foo; }");
tryItOut("/*for..in*/for(let [__parent__, __parent__] = __iterator__ | (uneval(<x><y/></x>)) in (window.__proto__)) {( /x/g );export __noSuchMethod__; }");
tryItOut("if(('fafafa'.replace(/a/g, gc))) { if ((\n__count__ = prop)) return ({a1:1});} else {; }");
tryItOut("prop = __parent__;");
tryItOut("try { constructor = __iterator__; } finally { this.zzz.zzz; } ");
tryItOut("/*for..in*/for(const [prop, prop] =  '' .__defineSetter__(\"__count__\", (function  __parent__ (__parent__, __iterator__) { return 5.0000000000000000000000; } ).call) in true) {}");
tryItOut("if((prop.__proto__ getter= ({}).__lookupGetter__)) { if ((<x><y/></x>)) const constructor = 0; else return;}");
tryItOut("{return <y><z/></y>;(function ([y]) { }).call }");
tryItOut("/*for..in*/for(var __iterator__ in this.zzz.zzz) {yield; }");
tryItOut("{gc() }");
tryItOut("{if(this) gc() else  if (__count__) return; }");
tryItOut("switch(__count__ = null.__lookupSetter__(\"prototype\")) { case (constructor).call(prop, <x><y/></x>, *::*):  }\nwhile(((constructor.(<y><z/></y>))) && 0)yield this;");
tryItOut(" { yield (new (__count__.(true))(([z1,,] , <x><y/></x>), __iterator__)) } ");
tryItOut("do {yield <><x><y/>\t</x></>; } while((<><x><y/></x><\f/>) && 0);");
tryItOut("return\n");
tryItOut("let (__iterator__ = 'fafafa'.replace(/a/g, function  constructor () { yield (<><x><y/></x></>.@*) } ), ({ constructor: __parent__, __proto__: __proto__ }) = this.zzz.zzz) { /*infloop*/for(let __proto__; let (prop = window, prototype = window) #0=({/*\n*/__proto__:  \"\" }); [15,16,17,18].some(eval,  \"\" )) return; }");
tryItOut("/*infloop*/L:while((yield __count__)){const __proto__; }");
tryItOut("/*infloop*/for(<><x><y/></x></> -= <x><y/></x>; *.isPrototypeOf(<x><y/></x>); new new Function()) (null);");
tryItOut("(<y><z/></y>);");
tryItOut(";\ngc()\n");
tryItOut("/*infloop*/while(String(*::*))return;");
tryItOut("({ __parent__: __parent__ })");
tryItOut("/*infloop*/while(window)const __parent__;");
tryItOut("M:do {export *; } while((let (__iterator__ = <><x><y/></x></>, __iterator__ = <><x><y/></x></>) <x><y/></x>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in (uneval(3.141592653589793 !== __parent__))) if([[1]]) {continue ; } else  if (*::* > __iterator__.prop = *::*) export __noSuchMethod__; else export *;");
tryItOut("/*infloop*/for(let __noSuchMethod__ = ([,,z1].eval(prop)); new Date((1 for (x in [])).prototype); ) {let __count__ = 1e4; }");
tryItOut("/*infloop*/while((*.yoyo(__count__)) ? ({constructor: <y><z/></y>}) : .\fvalueOf(\"number\")){if(constructor.default: ;) { if (*::* !== *::*) {{} }} else {-0;yield; }throw <><x><y/></x></>; }");
tryItOut("{/*for..in*/for(prototype = <y><z/></y> in false) {yield;(undefined); } }");
tryItOut("if(eval(\"(<y><z/></y>);\", <><x><y/></x></>.constructor)) { if ((__parent__+=<y><z/></y>[<><x><y/></x></>])) ; else {throw <><x><y/></x></>; }}");
tryItOut("/*for..in*/for(__parent__.0 in __count__.__parent__ = constructor) this.__defineSetter__(\"__iterator__\", [1,2,3,4].map);");
tryItOut("with({__noSuchMethod__: [] = window})function(q) { return q; }if(throw __parent__+=null; + __parent__(undefined) = (false.prop = window)) { if (this.__defineSetter__(\"__parent__\", function  __parent__ () { return  \"\" .watch(\"prototype\", [1,2,3,4].map) } )) {; }} else <x><y/></x>");
tryItOut("/*infloop*/for(let prop = [z1,,] .. <><x><y/></x></>; return; (<x><y/></x>.__iterator__)) {<x/>; }");
