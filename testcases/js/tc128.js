tryItOut("with(({__noSuchMethod__: ([[1]] |= <x/>)}))__noSuchMethod__");
tryItOut("while((({ __noSuchMethod__: prototype.__parent__ }) = [11,12,13,14].map.function::__proto__) && 0)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <><x><y/></x></>) function (__count__) { return  \"\"  } ");
tryItOut("/*for..in*/for(const [__proto__, prototype] = (constructor) =  /x/ .propertyIsEnumerable(\"__proto__\").eval(__parent__[true]) in  \"\"  for (__proto__ in 1e+81)) {/*infloop*/L:for(this.__defineGetter__(\"__count__\", ({}).__defineSetter__); break ; __parent__) {return; } }");
tryItOut("throw null");
tryItOut("/*for..in*/for(let __iterator__ = (<x><y/></x>.(<x><y/></x>)) in __count__) {function::prototype; }");
tryItOut("throw  \"\" ;");
tryItOut("if(undefined) {const prototype =  '' , __noSuchMethod__ = 0x99;; } else  if (__proto__.watch(\"prop\", [1,2,3,4].slice)) {yield __noSuchMethod__; }");
tryItOut("if(__proto__.__proto__ = (__iterator__ = [1,,])) { if ((constructor.__count__ setter= function  __proto__ (prototype, __proto__) { return ([1,2,3,4].map).call(*::*, <x/>) } )) {/*for..in*//* nogeckoex bug 349964 */M: for  each(let __count__ in false) {window;throw <x><y/></x>; }return; }} else {continue M; }");
tryItOut("/*for..in*/L:for(let  /x/g ['__count__'] in ((Math.sin)((((yield #1=[#1#])))()))){L: {;yield this; }gc() }");
tryItOut("while((__proto__%=undefined) && 0){let __noSuchMethod__ = true; }");
tryItOut("/*for..in*/for(const get in [,]) {prop = @foo;continue ; }");
tryItOut("/*infloop*/for(new (new Function)()++; <y><z/></y>;  \"\" ) throw <y><z/></y>;");
tryItOut("do {let prop = __noSuchMethod__\nlet __count__, prop; } while(((yield <x><y/></x> ? 3/0 : true)) && 0);");
tryItOut("if(({__parent__: __count__.__iterator__ getter= <x/> })) {continue L; } else  if ([1e4].some(0x99)) throw <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const export *; = prop = <><x>\f<y/></x></> in *::*) {do {const __noSuchMethod__;__parent__, prototype = true; } while((__parent__) && 0); }");
tryItOut("/*infloop*/do {; } while(__iterator__ = #1#);");
tryItOut("eval\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __parent__: [], __proto__: [prototype, , prototype, , constructor] }) in (this.zzz.zzz)) {return false;(<x><y/></x>); }");
tryItOut("yield @foo();");
tryItOut("{let __noSuchMethod__; }");
tryItOut("let(__proto__ = true) ((function(){return this;})());");
tryItOut("/*for..in*/for(let prop = window in  \"\" ) yield <><x><y/></x></>;");
tryItOut("{__proto__;/*infloop*/for(var prop = true; 1.3; this) continue M; } const prop;");
tryItOut("/*infloop*/for(var constructor; (#2=<><x><y/></x></>); ~<x/>) throw *::*;");
tryItOut("{ }");
tryItOut("let(({ __noSuchMethod__: prototype })) ((function(){return Iterator(<x><y/></x>, __noSuchMethod__);})());");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("if([15,16,17,18].some(('haha'.split).call,  /x/g )) {export *; }");
tryItOut("M:with({prop: this.__defineSetter__(\"constructor\", function  __proto__ (prop) { return __parent__ } )}){return;if(<x/>) { if (undefined) {return;export *; } else {<x><y/></x>throw *::*; }} }");
tryItOut("L:do {export *; } while(((({ constructor: ({ prototype: __iterator__ }), __count__: [, __parent__, ] }) = (({a2:z2}) = -3/0.@foo))) && 0);");
tryItOut("L:if(([__noSuchMethod__\n])) (<><x><y/></x></>); else {\t(<x/>); }");
tryItOut("export *; const prototype;");
tryItOut("/*infloop*/for(((prop)[(window++)]), ((Function).call(-1,  /x/ ) &= (new undefined)); (<><> </></>\f > ( \"\" .__lookupGetter__(\"prop\"))); new Array()) if(3/0[(0/0 /= undefined)]\t) { if ((* < <><x><y/></x></>).propertyIsEnumerable(\"__noSuchMethod__\")) break L; else {continue L; }}");
tryItOut("");
tryItOut("do with({__iterator__:  /x/g })const constructor; while((((p={}, (p.z = 1.3.hasOwnProperty(\"constructor\"))()))) && 0);");
tryItOut("@foo = __parent__;with({__parent__: (p={}, (p.z = <x/>.@*)())}){true; }");
tryItOut("L:do {{} } while(((__proto__)) && 0);");
tryItOut("let (prop = <x><y/\t></x>.(function(id) { return id })) { if(<y><z/></y>) { if (this) {var __parent__, [1,2,3,4].slice = this; }} else {/a/gi__noSuchMethod__ = function::prop, constructor = __count__; } }");
tryItOut("/*for..in*/for(const __proto__ in ((({}))( \"\" ))) '' ");
tryItOut("let (prototype, __parent__) { if({}) { if (<x><y/></x>) const __iterator__;} else {gc() } }");
tryItOut("with({__count__: (true.valueOf(\"number\")).eval(*)}){return; }");
tryItOut("return;");
tryItOut("{; }");
tryItOut("let (prototype = (window.*), constructor = <><x><y/></x></>) { yield; }function  __iterator__ () { return <><x><y/></x></> } ");
tryItOut("/*infloop*/M:for(var __noSuchMethod__ = __count__; false; window) {}");
tryItOut("/*infloop*/while(--true .. <><x><y/></x></>)const __iterator__ =  '' , __noSuchMethod__;");
tryItOut("/*infloop*/for(({ prototype: __parent__, __count__: prop }) = __iterator__ = 0x99; this.__defineSetter__(\"prop\", 'haha'.split); __proto__.prototype getter= new (0x99)()) ((#2=[({__noSuchMethod__: ([1](<x/>, <><x><y/></x></>)),  get __noSuchMethod__ constructor (__noSuchMethod__) { return (undefined /= <x><y/></x>) }  })]));");
tryItOut("do {{} } while((eval(\"<><x><y/></x></>\", (-1))) && 0)\n");
tryItOut("return (yield __proto__, __parent__);");
tryItOut("{switch((@foo)()) { default: if((1.2e3.__defineGetter__(\"__count__\", function  __count__ (prop) { constructor = __proto__, prop; } ).__defineGetter__(\"__proto__\", function  __iterator__ () { ({}).call } ))) { if (__iterator__) __noSuchMethod__, __proto__;} else {with({__proto__: __count__}){gc() }; }\tbreak; break;  } }");
tryItOut("while((<x><y/></x>++) && 0){gc()/*for..in*/for(let [__noSuchMethod__, function::function::__iterator__] = <x/> in <><x><y/></x></>) \texport __parent__\n }");
tryItOut("/*for..in*/for([__proto__, __proto__] = (uneval(*)) in (-0)) {/*for..in*/for(const constructor in window) [1,2,3,4].slice }/*infloop*/M:for(<><x><y/></x></>; <y><z/></y>; @foo) (prototype).__defineSetter__");
tryItOut("/*for..in*/for(const constructor in this <<= *::*) let (__parent__) { yield  \"\" ; }");
tryItOut("/*infloop*/for(let ({ set: constructor, prop: (\t{ __iterator__: __noSuchMethod__, __noSuchMethod__: __count__ }) }) = ;; eval(\"undefined\",  \"\" ); __parent__.prop = __count__) /*infloop*/for(let __count__ = <x><y/></x>; *::*; ({a1:1})) {{}return -3/0; }");
tryItOut("{gc() }");
tryItOut("if((-1) = [( '' .*).__defineGetter__(\"constructor\", <><x><y/></x></>)]) while((window.prop) && 0){; } else  if (new Array(({a2:z2}) >= (prop = ( /* Comment */<x/>)), (*::* >> this)([11,12,13,14].map, #3={a:#3#}))) /*infloop*/for(let (__count__ = <y><z/></y>) this; <><x><y/></x></>; [/*\n*/<><x><y/></x></>]) yield  \"\" ; else {with({}) __noSuchMethod__ = prop; }");
tryItOut("let (prototype, __parent__) { let __count__, prop; }");
tryItOut("L: {M:if(__noSuchMethod__) yield <x><y/></x>; else  if (<><x><y/></x></> && undefined) {gc()[1,2,3,4].map } else ;/*infloop*/do {(<x/>);<y><z/></y>; } while(<><x><y/></x></>.watch(\"__noSuchMethod__\", function(y) { yield y; (function(id) { return id });; yield y; })); }");
tryItOut("/*infloop*/for(var __count__; this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty); -3/0) {/*for..in*/for(let (\f{ __iterator__: __parent__ }) in ((Function)(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)))continue L; }");
tryItOut("do {/*infloop*/for(<x/>; <x/>; <x><y/></x>) export prop; } while((<y><z/></y> = [,,]) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var  \"\" ['__noSuchMethod__'] in Exception()) export prototype;");
tryItOut("getter;\nwith({__noSuchMethod__: 0x99}){return;'haha'.split }\n");
tryItOut("if(++true) {export __noSuchMethod__; } else {(new Function).applyyield .2; }");
tryItOut("{yield;; }");
tryItOut("export *\nif((uneval(<x/>))) export __count__; else {export *; }");
tryItOut("switch(*::*) { case 2: break; break;  }");
tryItOut("yield\n");
tryItOut("if(constructor.prop) {L:do {gc() } while((1e81 || __iterator__) && 0); } else (window);");
tryItOut("let (__parent__ =  /x/g ) { __parent__, __parent__ = <x/>; }");
tryItOut("/*for..in*/for(const (*)(true) in ((Math.pow)(<x><y/></x>.isPrototypeOf( \"\" )))){gc()return window; }");
tryItOut("/*for..in*/for(const [__proto__, prototype] = let (__iterator__ = true ? 3.141592653589793 : <x><y/></x>) __proto__.@* in (new ((1 for (x in [])))(<x/>(this, <><x><y/></x></>), (<x><y/></x>)(<y><z/></y>)))) {/*for..in*/M:for(const [__iterator__, prototype] = -1 in 0) const constructor = true;if(@foo.unwatch(\"__noSuchMethod__\")) __noSuchMethod__; else  if ([15,16,17,18].map(new Function, <x/> ? window : (function ([y]) { })())) {__count__ } }");
tryItOut("throw  /x/g \n");
tryItOut("prototype: (prop = <><x><y/></x></>.watch(\"__count__\", (__iterator__ = <x><y/></x> && <x><y/></x>).watch))");
tryItOut("/*for..in*/for(const (<><x><y/></x></>.__parent__ = -3/0)((<><x><y/></x></>.eval(<><x><y/></x></>))) in (new @foo(true))) {{} }");
tryItOut("while(((1e4.hasOwnProperty(\"__parent__\"))) && 0)yield;");
tryItOut("if((this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))) { if (this.zzz.zzz) {<x><y/></x> } else const prop = *::*;}");
tryItOut("L: {let (prop = *) { throw 1e4; }/*infloop*/M:do {throw  '' ; } while(([new (<x/>)(__parent__)])); }");
tryItOut("if(@foo) {export ({a2:z2}) } else  if (new this.__defineGetter__(\"__proto__\", 'haha'.split)()) with(function::__iterator__){gc()(3); }");
tryItOut("switch(((<><x><y/></x></> && <x><y/></x>//h\n).@foo)) { default: throw ({a2:z2});break; /*for..in*/for([__count__, __parent__] = (function ([y]) { })() in __parent__) {__proto__; }break;  }");
tryItOut("/*infloop*/M:for(const __iterator__ = constructor.yoyo(\t '' ); \tyield (function::__parent__ = [1,,].eval(__noSuchMethod__.prototype)); \n@foo instanceof <><x><y/></x></>.throw((this.__defineSetter__(\"__iterator__\", true)))) {export *; }");
tryItOut("yield __parent__ = <x><y/></x>.hasOwnProperty(\"__parent__\");");
tryItOut("/*for..in*/M:for(get in ({ constructor: ({ __noSuchMethod__: __proto__ }) }) = ( '' )(<x><y/></x> && [[1]])) {if(arguments) <bbb xmlns:ccc=\" /x/g \"><ccc:eee></ccc:eee></bbb><x><y/></x>  else {throw ;let prototype; } }");
tryItOut("/*infloop*/for(({ __parent__: [, ({ __count__: ({ __proto__: constructor }), prop: ({ <><x><y/></x></>: __iterator__, prop: __noSuchMethod__ }) }), , , ] }) = (uneval((this.__defineGetter__(\"constructor\", function(y) { yield y; yield null;; yield y; }) @ <><x><y/></x></> in <><x><y/></x></>))); null(constructor); this) /*for..in*/M:for(const __count__ in ((<x/>)(<><x><y/></x></>))){return <><x><y/></x></>; }");
tryItOut("if((<x><y/></x>++.__count__ = (new (function (__noSuchMethod__, prototype) { yield prototype } )()))) {(-1) = __iterator__; } else  if ((prototype.__proto__ getter= yield true)) continue L; else {const __proto__, prop;<><x><y/></x>yield; />.prototype = __noSuchMethod__; }");
tryItOut("this.zzz.zzz;");
tryItOut("try { try { ; } finally { let prototype; }  } finally { this.zzz.zzz; } ");
tryItOut("M:while(((<x/>.*.hasOwnProperty(\"__count__\"))) && 0){{} }");
tryItOut("with({__parent__: constructor = (constructor = <x><y/></x>)}){/*for..in*/for(let prop in @foo) export __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in (<><x><y/></x></>)) let (__proto__ = true == <><x><y/></x></>, __iterator__) { throw __iterator__; }");
tryItOut("yield (<x/> == __count__);");
tryItOut("export *; const __proto__;");
tryItOut("(new Function).callL: {{} }");
tryItOut("/*for..in*/M:for(var [prototype, __iterator__] = (prop = @foo) in window) (this);");
tryItOut("if(window) {( /x/g ); } else yield 033;");
tryItOut("constructor = arguments, prototype\n");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("if((p={}, (p.z =  '' )())) (eval).call else throw <x><y/></x>;");
tryItOut("/*infloop*/for(const __count__ = new (<x/>)(<x/>, .2); (new (<><x><y/></x></>)() :: (this.'constructor =  /x/g )); eval(\"/*infloop*/for(__noSuchMethod__ = <x><y/></x>; <y><z/></y>; @foo) function(y) { yield y; yield;; yield y; }\", \n /x/ ).__defineGetter__(\"__proto__\", function(y) { yield y;  '' ; yield y; })) /*for..in*/for(__parent__ in ((({}).hasOwnProperty)(__count__)))yield;");
tryItOut("/*for..in*/for(var constructor = prop = undefined in *::*) {export *;export prototype; }");
tryItOut("let (__iterator__ = []) { return <x/>; }");
tryItOut("let (this, []) { /*for..in*/for(let __noSuchMethod__ in ((__parent__)(-0))){let __proto__;this; } }");
tryItOut("switch(window.constructor--) { case <><bbb xmlns=\"new (this)(<><x><y/></x></>, -0) !== false\"> </bbb></>: break; break; case each%=prop = #1=[#1#]: default: const __parent__;case 4: continue L; }");
tryItOut("/*for..in*/for(let [prop, __count__] = (uneval(([15,16,17,18].filter((function (function::__noSuchMethod__, __parent__) { return <y><z/></y> } ).call, @foo)))) in (uneval(undefined))) [,];");
tryItOut("with((__count__ = ([1,2,3,4].map([15,16,17,18].some(Math.pow, <x/>)))))yield;");
tryItOut("/*infloop*/for( '' ; undefined; function(id) { return id }) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in this()) M:if(__parent__.constructor) return;throw *;");
tryItOut("L: {gc() }\n");
tryItOut("if( /x/g ) export constructor; else  if (<><x><y/></x></>.__parent__ = -3/0) yield 3/0;");
tryItOut("break ;\n;\n");
tryItOut("/*infloop*/for(var (function(id) { return id })(let (prop = null, prop) <x/>) = [1]; new Function in __noSuchMethod__ =  ''  >>> __proto__;  '' ) window;");
tryItOut("let (prototype = ([15,16,17,18].map((1 for (x in [])), window)) += ( /x/  -= <x/>)) { export __count__; }");
tryItOut("L:if((this.zzz.zzz)[new ([1,2,3,4].map).apply(#3={a:#3#})]) {yield;__parent__ = undefined, prop = *; } else {return <x><y/></x>; }");
tryItOut("/*for..in*/M:for(var __count__ = <><x><y/></x></> in false) var constructor = null, __parent__ = constructor;");
tryItOut("yield;");
tryItOut("with(.2){gc() }");
tryItOut("M:with({__proto__: <><x><y/></x></>.__parent__ = undefined}){yield [,]\n;; const __noSuchMethod__; }");
tryItOut("with({}) { /*infloop*/while(String(__parent__))//h\n/*for..in*/M:for(constructor in ((gc)( /x/ )))const prototype = .2; } ");
tryItOut("throw StopIteration;");
tryItOut("if(this) { if ((constructor = __count__))  else {break M; }}");
tryItOut("if((yield 1e4)) {let __noSuchMethod__; }");
tryItOut("with({__proto__: prop});");
tryItOut("throw __iterator__;");
tryItOut("with({}) { __count__ = __iterator__; } \n");
tryItOut("L: {if(setter = <x/>) {__iterator__ = #3={a:#3#};false } const __noSuchMethod__; const prop;throw -1; }");
tryItOut("L:if(<y><z/></y>.eval( /x/g )) export \r*; else  if (constructor = 1e+81) {let prototype; } else {let constructor; }");
tryItOut("/*infloop*/do {gc()return; } while((uneval(window)));");
tryItOut("{L:do {export __iterator__;const prop, prototype; } while(( '' ) && 0);{(__noSuchMethod__);yield; } }");
tryItOut("{( /x/ ); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M:\n for  each(let __parent__ in prototype+=<x><y/></x>) continue \nexport __parent__;\f");
tryItOut("if( '' ) {return; } else  if ((void (RegExp()))) \t{! }");
tryItOut("with({__count__: <x/>})export *;");
tryItOut("/*for..in*/for(let [prototype, __proto__] = ((<><x><y/></x></>)(undefined\n, *)) in <><x><y/></x></>) gc()");
tryItOut("/*for..in*/for(var [__parent__, __iterator__] = <{__noSuchMethod__}>yyy</{__noSuchMethod__}>.([15,16,17,18].map([1,2,3,4].map, <><x><y/></x></>\r < 033)) in <x><y/></x>yyy ? 1e4 : ({a1:1})) {/*infloop*/M:for(let prop; this; 1e-81) {export prototype;{} } }");
tryItOut("/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; (-1)) {[1,2,3,4].sliceexport *; }");
tryItOut("L:if((__count__\t.__proto__ getter=  /x/g  .@*:: (yield (prop = <x><y/></x>)))) /*infloop*/while(this.zzz.zzz); else  if (__noSuchMethod__.( /x/g ) && __proto__ = @foo) /*for..in*/for(var [__parent__, prototype] = true in <x><y/></x>) {var constructor, prototype = __parent__;yield <><x><y/></x></>; }");
tryItOut("var __iterator__ = true, __proto__ = <x/>;\nif(<x/>[<y><z/></y>]) {const __noSuchMethod__, constructor; } else  if (void <x/>) __iterator__ = <y><z/></y>, prop; else continue \tM;\n");
tryItOut("L: {prototype, __iterator__ = <x><y/></x>;[]; }");
tryItOut("prototype = __parent__;");
tryItOut("with(\neval(\"prop\", [[]]) === .prototype)gc()");
tryItOut("while((<><x><y/></x></>) && 0)0.1");
tryItOut("/*infloop*/for(<ccc:ddd><!--yy--></ccc:\nddd>; (+yield true).__defineGetter__(\"{export *;function  __proto__ (__noSuchMethod__, __iterator__: true) { export function::__iterator__; }  }\", function  prototype (__parent__, constructor) { yield <><x><y/></x></> } ); eval(\"<zzz>true</zzz>\", <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)) return [ /x/  if (*)];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in !__noSuchMethod__) {window; }");
tryItOut("while((({__parent__ getter: function(y) { yield y; yield prop;; yield y; }, __parent__: this })) && 0)return;");
tryItOut("return new <><x><y/></x\f></>(<x><y/></x>, prop);");
tryItOut("try { __parent__ = __noSuchMethod__; } finally { let(prototype, prop) ((function(){for(let y in [5,6,7,8]) prop = __parent__;})()); } ");
tryItOut("L:if(__proto__ = @foo) {{; } } else  if (new Array(constructor) if (false).*) throw ({__iterator__: [[1]] }); else if(()) {yield <><x><y/></x></>;\t } else {__count__function (prop) { yield true }  }");
tryItOut("/*infloop*/do {yield <><x><y/></x></>\nbreak ; } while(({ __count__: function(q) { return q; }, __iterator__: constructor }) = this.zzz.zzz);");
tryItOut("L: {( /x/ );\rthrow <><x><y/></x></>; }");
tryItOut("/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>;  /x/g ) {yield; }");
tryItOut("/*for..in*/for(let (<x><y/></x> != [z1])['__iterator__'] in new ( /x/ )(this, <x><y/></x>)) {if([15,16,17,18].filter(<x><y/></x>, (__count__ = <><x><y/></x></>)) :: <x/>) {yield; }(*) }");
tryItOut("new (function  prop (__proto__) { return __parent__ } )(null, <x><y/></x>).__count__");
tryItOut(";if(<x><y/></x>) {<x/>;gc() } else throw window;");
tryItOut("\f;const constructor, prop = null;");
tryItOut("let __proto__;");
tryItOut("L: {return <x><y/></x>.(this); }");
tryItOut("throw -3/0;");
tryItOut("while((<x><y/></x>[this]) && 0){while((<x><y/></x>) && 0){throw prop; }gc() }\nreturn\nexport *;\n");
tryItOut("{{}export *; }");
tryItOut("(*::*);");
tryItOut("with({}) { [({ __parent__: __count__ }), , ({ __count__: prototype }), [__noSuchMethod__, ], [, , constructor, __proto__, ]\r] = __proto__; } ");
tryItOut("switch(this.__defineSetter__(\"__count__\", function  prototype (prop, __parent__) { (({})); } )) { default: case 1: return prototype;\nconst __proto__;\ncase [z1] != <y><z/></y>.__lookupSetter__(\"constructor\").hasOwnProperty(\"__noSuchMethod__\"):  } const window.valueOf(\"number\")['__count__'];");
tryItOut("yield  for (__proto__ in function ([y]) { });");
tryItOut("{yield 4.;{} }");
tryItOut("/*infloop*/do throw 0x99; while((<x/> ? <x><y/></x> :  '' ))\n/*infloop*/for((prop = this); ({prototype: <y><z/></y>, __parent__: <x><y/></x> }); new 1e4(0/0) :: <x><y/></x>) {/*for..in*/for(var [constructor, prop] = new Exception( \"\" , 0.1) in  \"\" ) __proto__, __count__; }");
tryItOut("return this;");
tryItOut("do export *;\t while((++[z1]) && 0);");
tryItOut("/*infloop*/for(({ __proto__: [], constructor: constructor }) = (@foo)().propertyIsEnumerable(\"prototype\"); #1=[#1#]; 1e81.prop.prop =  /x/ .isPrototypeOf( '' ).__defineGetter__(\"prop\", Function) ? this.zzz.zzz : new Date(prop)) this.zzz.zzz;");
tryItOut("/*infloop*/while((<><x><y/></x></>['__parent__']|=((new Function(\";\"))).__lookupSetter__(\"let\"))){continue ; }");
tryItOut("/*for..in*/for([__parent__, __proto__] = this.__defineGetter__(\"prototype\", /a/gi).__proto__ in (__count__.__count__ = ([,,] if (this)))) {/*infloop*/for(__count__; (__proto__ =  '' ); (null.__iterator__)) {;this }__proto__, __count__ = [,,]; }");
tryItOut("return;");
tryItOut("/*for..in*/for(const __proto__ in  /x/ ) ; const __count__;");
tryItOut("/*for..in*/for(let [null.isPrototypeOf(<x/>), prototype] = eval(\"<y><z/></y>\", (<x><y/></x>.yoyo(this))) in __proto__, -1) {return;break ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var  in <x/>) {Math.sinyield; }");
tryItOut("let prop = window, prop");
tryItOut("return ({}) | prototype.(<x><y/></x>) .@ window ? *::* : 1e4 == __proto__%=<><x><y/></x></>;");
tryItOut("with({}) { try { __parent__ = <><x><y/></x></>; } finally {  }  } ");
tryItOut("with(this.__defineGetter__(\"__count__\", function (prototype,  { return <><x><y/></x></> } ) { return constructor } ))var __count__ = this;");
tryItOut("if(undefined) { if (<x/>) {;\t } else ;}");
tryItOut("{}if(<x/>) {return null; } else  if ({(this); }) {;return [z1]; }");
tryItOut("if(constructor) yield; else __count__, constructor;");
tryItOut("(function  __parent__ (__proto__, prop) { export __proto__; } ).apply const __parent__;");
tryItOut("/*for..in*/for(var __count__ = this.__defineGetter__(\"constructor\", [1,2,3,4].map) in 1e+81.__defineSetter__(\"__proto__\", new Function)) { }");
tryItOut("do {return <x/>;L: \n([,,z1]); } while((__noSuchMethod__ = (new (function(q) { return q; })())) && 0);");
tryItOut("/*infloop*/L:for(var prototype; (* > (1e+81[new ((1 for (x in [])))(x::prototype)])); function  constructor ()<><x><y/></x></>) {yield; }");
tryItOut("(function(id) { return id });");
tryItOut("M:with({__noSuchMethod__: (yield [1])}){/*infloop*/for(__iterator__ =  /x/ ; false;  /x/g ) {return; } }");
tryItOut("prototype = /*for..in*/M:for(__proto__ = ( /x/g  ^= ({a2:z2})) in __noSuchMethod__) ;");
tryItOut("with({this.__defineSetter__(\"__parent__\", <><x><y/></x></>)--: new eval(undefined)}){export *;(}) }");
tryItOut("L:if('fafafa'.replace(/a/g, gc)) {; } else  if ([z1]) {(Function).apply } else {for(let y in [5,6,7,8]) const function::__proto__ = <y><z/></y>;break L; }");
tryItOut("throw StopIteration;");
tryItOut("M:if([true].map(Function)) (*::*); else  if ([1].@*) {(*::*);gc() } else let __count__ =  finally \ndo {const __parent__ = <x/>;let prototype = <y><z/></y>; } while(( /x/g  * <x><y/></x>) && 0);");
tryItOut("continue L;");
tryItOut("L:switch(({a1:1}).@foo) { case 4: break; case <xxx {__noSuchMethod__}={(*.__parent__).constructor} />: let prototype = null;break;  }");
tryItOut("while((()) && 0)(<y><z/></y>);");
tryItOut("/*for..in*/M:for(prototype in ((/a/gi)(constructor = __noSuchMethod__ = true++)))gc()");
tryItOut("/*for..in*/for(const [prototype, __parent__] = yield new Iterator(<x><y/></x>.@*) in window) throw <x/>;");
tryItOut("if(this\t) {(({a1:1})); } else  if (__count__) {yield; }");
tryItOut("/*for..in*/for(__count__ in @foo) {export __parent__; }");
