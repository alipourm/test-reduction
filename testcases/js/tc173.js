tryItOut("try { return prototype.__noSuchMethod__; } catch(__proto__) { with({}) __count__ = this, __noSuchMethod__; } finally { let(prop = <x><y/></x>) ((function(){{}})()); } ");
tryItOut("L: ;");
tryItOut("try { yield; } catch(__iterator__) { yield -prototype; } ");
tryItOut("[1,,]");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in this) 'haha'.split const constructor;");
tryItOut("do {#1=[#1#];return function (prop) { return true } ; } while((prop.__proto__ = ) && 0);");
tryItOut("M:if() { if ([,,]) {continue L;<y><z/></y>, undefined }} else {function (__parent__) { export __noSuchMethod__; }  }");
tryItOut("/*infloop*/for(new ((new Function(\"(<>__iterator__</>); const constructor;\")))(); if(this.zzz.zzz) ; else  if (window << 1.2e3) throw <x/>; this) /*for..in*/for(let prop in ((false)(prototype =  /x/ ))){continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor.__count__ in this.__defineGetter__(\"__iterator__\", __parent__)) /*infloop*/for(new function(q) { return q; }(); <><x><y/></x></> ? @foo : <x><y/></x>\n; 1e81) {yield undefined;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in (let (constructor = <y><z/></y>, __count__ = window) constructor.eval((yield [[]])))) if((((((function(q) { return q; }).apply).call)())++)) { if (((__iterator__)())) @foo} else __parent__;");
tryItOut("M:switch(({__count__:  /x/ .__defineSetter__(\"__iterator__\", <x><y/></x>).@foo, __noSuchMethod__: (([11,12,13,14].some).yoyo(new Boolean(__count__.prototype = ({a2:z2})))) })) { default:  }");
tryItOut("while(( /x/g ) && 0)yield false;");
tryItOut("L: return;");
tryItOut("__parent__ getter: gc");
tryItOut("L:while((((constructor = this) / <><x><y/></x></>.eval(this))) && 0){/*infloop*/L:for(({a1:1}); <x><y/></x>; false) {throw __iterator__; }\f{Math.sinthrow 0.1; } }");
tryItOut("L:if((new prop(<><x><y/></x></>)).__parent__) { if ( '' ) /*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <><x><y/></x></>) {export __noSuchMethod__; }} else {__parent__, prop = <x/>; }");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("/*for..in*/for(const prototype = () in (-0)) if([#3={a:#3#}]) { if (prop) throw ({a2:z2});} else {export *;return [[1]]; }");
tryItOut("L: /*for..in*/for(__noSuchMethod__ in ((new Function)(<><x><y/></x></>))){export __parent__; }");
tryItOut("throw StopIteration;");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("with({}) { ; } ");
tryItOut("do {const prop, __parent__ = this; } while(((window.isPrototypeOf(<y><z/></y>))) && 0);");
tryItOut("L:switch(arguments !== [z1,,]) { default: return __iterator__.yoyo([,,z1]);case <y><z/></y>: __iterator__ = [,,]; const constructor;case --this && true: break; M:if( /x/g ) { if (*::*) {export *;yield @foo; } else <x/>;}break; case ([].yoyo(1e-81) for each (prototype in #3={a:#3#}) for each (__proto__ in [z1,,]) for (__proto__ in __count__)): return (\n<x><y/></x>);break; /*for..in*/for(let [__parent__, __noSuchMethod__] = <><{__iterator__}></{__iterator__}></> in 033) {;break L; }break; case 6: break; case (constructor.(constructor)): break; case 0: break;  }");
tryItOut("with(prop.__parent__ = function::__proto__(prototype = <><x><y/></x></>) = constructor.(<x><y/></x>))if(<y><z/></y>) 3/0 else {let __count__, __count__ = __count__;continue ; }");
tryItOut("let ([({ constructor: __iterator__ })], __count__ = 1e4.hasOwnProperty(\"__iterator__\")) { var prop = this, constructor = __count__ =  /x/g , __parent__; const prototype; }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/while(__count__)export prototype;");
tryItOut("while((<x/>) && 0){yield 0; }");
tryItOut("while((__noSuchMethod__.watch(\"__noSuchMethod__\", Function)) && 0){let \f(prototype =  /x/ , __noSuchMethod__) { let __noSuchMethod__; } }");
tryItOut("/*for..in*/L:for(((({constructor: <><x><y/></x></>, prototype:  ''  })))(__parent__ = -3/0) in (yield window)) throw [z1,,];");
tryItOut("/*for..in*/for(let [prototype, prototype] = eval(\"4..yoyo(<x><y/></x>)\", new function (__proto__)<x/>(this, <x/>)) in ((new (@foo)( /x/ , @foo) :: (p={}, (p.z = {})())).throw(<>this</>)--)) throw <y><z/></y>;/*for..in*/L:for(__parent__ in ((@foo)(constructor))){var __noSuchMethod__ = this; }");
tryItOut("M:with(let ([] = constructor.__proto__) ((([1,2,3,4].map)()) >> <y><z/></y>.prop) / ([(constructor.__parent__ setter= /a/gi)].filter(function (constructor, prop)\t { yield <><x>\f<y/></x></> } )))if( /* Comment */((function  prop (__noSuchMethod__, __parent__) { return window } ).call(*::* +=  /x/ , *::* < 1e+81, <><x><y/></x></>))) {return  /x/g ; } else {const __proto__; }");
tryItOut("/*infloop*/for(var constructor; (({__noSuchMethod__: <x><y/></x>, __noSuchMethod__ getter: <x/> })); [11,12,13,14].some) {;gc }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("export prop;\nif(@foo) {this;throw false; } else {break L;let __parent__, __noSuchMethod__ = <x/>; }\n");
tryItOut("M:if(({ __noSuchMethod__: __noSuchMethod__, __iterator__: ({ prop: ({ constructor: __count__, __noSuchMethod__: prop }) }) }) =  \"\" ) {yield; }");
tryItOut("if(this.__defineSetter__(\"__iterator__\", function () { return yield throw undefined;\n__count__, prototype;\n } )) { if (Math.sin([[1]])) {{return; } }} else {let prop = <x><y/></x>;yield <x><y/></x>; \"\"  }");
tryItOut("if(__parent__ = true) {L:with({prop: @foo}){export *;throw <x/>; }\n } else  if ((1e81 for each (prototype in window))) {[1,2,3,4].map }");
tryItOut("do {function  __parent__ () { return window; } <x><y/></x>; } while((each) && 0);");
tryItOut("<employee id=\"1\"><name>Joe</name><age>20</age></employee>");
tryItOut("if(null << #1#) throw __proto__; else  if (__count__ = constructor) {yield .2; }");
tryItOut("do {continue ;(<y><z/></y>); } while((((new Function).apply)() * (setter.constructor =  /x/ )) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (RangeError(<x/>, [1,2,3,4].map))([[]].__count__) in (<><x><y/></x></> + <x><y/></x>)) yield;");
tryItOut("with(<x><y/></x> / @foo if ( /x/g )){/*infloop*/for(const constructor; <x><y/></x>; *) ; }");
tryItOut("try { {} } finally { yield; } ");
tryItOut("for(let y in [5,6,7,8]) /*for..in*/for(let constructor = * in undefined)  /x/ ");
tryItOut("with({constructor: (eval(\"{ /x/ ;return <x><y/></x>; }\", (__parent__ = <x><y/></x>).throw(1e81.@foo)))})/*infloop*/L:do {export __noSuchMethod__;const let, __parent__ = function ([y]) { }; } while(<><x><y/></x></>.__defineSetter__(\"__count__\", ({}).hasOwnProperty));");
tryItOut("let(constructor = <y><z/></y>) { yield [1];");
tryItOut("__noSuchMethod__ = <y><z/></y> in Function(, __count__: prototype)yyy");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*for..in*/for(const __parent__ =  /x/g  === *::*.__defineGetter__(\"__count__\", function(q) { return q; }) in (<y><z/></y> for each (prototype in <x><y/></x>))) __iterator__;");
tryItOut("switch(function(id) { return id }) { case 3: yield; }");
tryItOut("/*for..in*/M:for(let [({ __noSuchMethod__: constructor.__parent__, __count__: [({ __noSuchMethod__: __iterator__, prototype: __count__ }), , ] }), __proto__] = window in (<x><y/></x>.constructor = <x><y/></x>)) {(new Function(\"export __proto__;\"))var prop = *, __proto__ = <></>; }");
tryItOut("let(prop = 0/0) { throw __parent__;");
tryItOut("L:if(this.__defineGetter__(\"constructor\", ({}).__lookupGetter__))  { export *; }  else  if (({prop: __parent__, prototype: null })) continue M\nlet constructor; else {var __count__ = true;0x99; }");
tryItOut("/*for..in*/for([__noSuchMethod__, __proto__] = __noSuchMethod__ = true in <x/>) return  \"\" ;");
tryItOut("/*for..in*/for(let prototype.__iterator__ in  /* Comment */(<><x><y/></x></>.valueOf(\"number\"))) yield window;var __parent__ =  /x/ ;");
tryItOut("do with({__proto__: 'fafafa'.replace(/a/g, eval)}){gc() } while((__iterator__.__proto__) && 0);");
tryItOut("M:if(<x><y/></x> === <x><y/></x>) {var __iterator__ = this, __noSuchMethod__ = 5.0000000000000000000000;__proto__, __proto__;\nvar __proto__;\n } else  if () {return  \"\" ; }");
tryItOut("/*infloop*/M:for(constructor.(({a1:1})); false; yield (yield window) ? ({ prop: __noSuchMethod__ }).(#0=({prototype: 1e-81})) : __parent__.__lookupSetter__(\"constructor\")) {/*for..in*/L:for(var __noSuchMethod__ = __parent__ = prop in [,,z1]) {gc() }/*infloop*/do let , __parent__; while(__noSuchMethod__.__defineGetter__(\"__parent__\", Function)); }");
tryItOut("(window);");
tryItOut("L: {{}; }");
tryItOut("let ([[__noSuchMethod__], ({ __proto__: prototype }), , __noSuchMethod__]) { yield; }\nreturn ((uneval( \"\" )));");
tryItOut("if([<><x><y/></x></>].sort(Function)) { if (<><y><z/></y>++</>.(#1=[ /* Comment */<><x><y/></x></>]) - prototype = __iterator__) {}} else L:if(((__count__)).watch) { if (((prop.__lookupGetter__(\"__proto__\"))-=(__proto__ = __noSuchMethod__))) {\rthrow *; }} else {}");
tryItOut("while(((['fafafa'.replace(/a/g, <x><y/></x>)])) && 0){return;break L\n }");
tryItOut("/*for..in*/for(__count__ = {} in (eval(\"throw <y><z/></y>;\", (0 .@*:: <y><z/></y>)))) {L: {return; }__count__, each = 1e4; }");
tryItOut("let (__proto__ = 'haha'.split((\n__iterator__), prop), __count__ = this.__defineSetter__(\"prototype\", function  each () { gc() } )) { (<x><y/></x>); }");
tryItOut("with(@foo)function  prototype () { ({}).hasOwnProperty } ");
tryItOut("if([;]) { if ((*.propertyIsEnumerable(\"constructor\"))) return; else export __parent__;}");
tryItOut("\fif(\f(<><x><y/></x></>)(<y><z/></y>) = +<x><y/></x>) { if (this.__defineGetter__(\"prototype\", <><x><y/></x></>)) {/*for..in*/L:for(const (__proto__) in ((function(y) { yield y; const constructor =  /x/ ;; yield y; })(<><x><y/></x></>))){break L;export *; }gc() } else /*infloop*/do /a/gi while(__noSuchMethod__.__iterator__ = this);}");
tryItOut("let(constructor = ({__noSuchMethod__: this }), __count__ = function  prop (constructor)window) { yield 1e+81 -= <><x><y/></x></>;");
tryItOut("gc()");
tryItOut("/*for..in*/for(let __noSuchMethod__ = __noSuchMethod__.prop = function::__parent__ in *::*[*]) {/*infloop*/for(var __proto__; ((-0))(prototype); *::*.@*) (false\n) }");
tryItOut("/*infloop*/for(({ set prototype return  \"\" ; (prop, [, , ({ __noSuchMethod__: __count__ }), , yield]) { return (p={}, (p.z = <><x><y/></x></>)()) } ,  set function::__iterator__(__parent__) { yield __count__.throw(<y><z/></y>) }  }); ({__proto__: __iterator__.__noSuchMethod__ setter= function (__proto__, setter) { yield [] }  }); constructor = *) /*infloop*/L:for(const __count__; (<y><z/></y>.__lookupGetter__(\"__count__\"));  ''  = (yield *::*)) ;");
tryItOut("let ([, __noSuchMethod__, __parent__], ({ prop: __count__, __parent__: ({ prototype: ({ __proto__: constructor }) }) }) =  /x/g .__defineGetter__(\"__count__\", (new Function(\"gc()\")))) { /*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in new ((Function).apply)()) {continue ; const __noSuchMethod__; } }");
tryItOut("eval");
tryItOut("let (__parent__ = [prop].some((1 for (x in []))).@foo, __noSuchMethod__) { if(<><x><y/></x></>) let constructor = <x><y/></x>, __noSuchMethod__ = *; else {export prototype; } }");
tryItOut("export *;");
tryItOut("continue L\ngc()");
tryItOut("{gc()\n }");
tryItOut("try { let(__count__, __proto__ = false >>> *) ((function(){try { let([constructor] = void @foo, constructor = this) { with({}) function (prop, __noSuchMethod__)<x><y/\n></x> } finally { let(__parent__) { try { var __proto__, constructor; } finally { yield this; }  } })()); } catch(__proto__ if (function(){yield this;})()) { export __proto__; } catch(__iterator__) { try { return; } catch(__iterator__) { var __proto__ = window, constructor; }  } finally { throw StopIteration; } ");
tryItOut("return;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((({}).hasOwnProperty)(__parent__)))/*infloop*/for(this.__defineSetter__(\"__count__\", Math.sin); (__count__|=<x/>); __proto__) {let __iterator__ = <x><y/></x>; }");
tryItOut("/*infloop*/do yield; while(true);");
tryItOut("/*for..in*/for(var __proto__ in (((Math.sin).call)(__parent__)))constructor, setter;");
tryItOut("return;");
tryItOut("/*for..in*/\fL:for([prop, __noSuchMethod__] = 1e-81.eval((*.propertyIsEnumerable(\"prototype\"))) in <x><y/></x>.hasOwnProperty(\"__count__\")) {yield [z1]; }({ prop: __iterator__, prop: __iterator__ })");
tryItOut("do {return; } while(((let (__proto__ = new __parent__(<x><y/></x>.(window))) new (gc)(__noSuchMethod__ = \t<x><y/></x>))) && 0);");
tryItOut("if(window for (__noSuchMethod__ in constructor)) {return;[]; } else  if (false\n) {gc() } else continue M;");
tryItOut("if(*::*) let prototype = __parent__; else  if ([15,16,17,18].some((1 for (x in [])), <>false</>)) {return; }");
tryItOut("{;return; }");
tryItOut("while((*) && 0){var constructor =  /x/g , __count__ = <!--yy-->;let(__iterator__) { try { 'haha'.split } finally { export __noSuchMethod__; }  }");
tryItOut("/*infloop*/for(let [__proto__] = [z1] :: window; delete (<y><z/></y>(3, true) == (let (__parent__ = 0x99, __proto__ = @foo) ({ (( '' )(<><x><y/></x></>)) % <><x><y/></x></> ? arguments : 1.2e3: __proto__, __parent__: [, , , , ] }))); function::__noSuchMethod__ = ) {L: let ({ __noSuchMethod__: __iterator__ }) = ( \"\" .yoyo(<><x><y/></x></>)); }");
tryItOut("/*infloop*/M:for(__noSuchMethod__ = ('fafafa'.replace(/a/g, \t(eval).apply));  \"\" .isPrototypeOf(window); RegExp()) { }");
tryItOut("if(<x><y/></x>) throw window; else export __iterator__\n");
tryItOut("return;");
tryItOut("/*infloop*/L:for(<><x><y/></x></> -= __noSuchMethod__; <x/>\f.__defineGetter__(\"prop\", Function); (__proto__)) ");
tryItOut("return ([,,] if (@foo)) >>  /* Comment */1e+81;");
tryItOut("this.zzz.zzz;");
tryItOut("with({__count__: [11,12,13,14].filter.throw(({__parent__: <><xxx>{constructor}</xxx></>}))})switch(null) { case  /x/ : export *;__count__break; default: break ;{}break; throw 1e81;break; case 0: let constructor = 3/0; }");
tryItOut("with({__parent__: (({__noSuchMethod__ setter: function  __count__ (__noSuchMethod__) { return <x><y/></x> }  }))})do var __iterator__ = <x><y/></x>, __noSuchMethod__ = <y><z/></y>; while(((<x/>)[<><x><y/></x></>]) && 0);");
tryItOut("switch((undefined.propertyIsEnumerable(\"__iterator__\"))) { case 5: case __parent__: export __proto__;break; default: break;  }");
tryItOut("/*for..in*/for(var prototype = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in  { switch(false) { default:  } } ) while((*) && 0){yield (-0); }");
tryItOut("with((function(y) { yield y; yield;; yield y; }).call((__parent__ = true.throw(#2=({prop: <x><y/></x>}))), ([([11,12,13,14].filter)]), __parent__ = function(id) { return id }));");
tryItOut("/*for..in*/for(var __proto__ in ((({}).__lookupGetter__)(<><bbb xmlns=\"<y><z/></y>\"> </bbb></>))){while((prop) && 0){; } }");
tryItOut("/*infloop*/while(__parent__ = ((p={}, (p.z = <x></*\n*/y/></x>)())))export constructor;");
tryItOut("function(id) { return id }\n = __iterator__ = <y><z/></y>.prop;");
tryItOut("/*for..in*/for(__proto__ in ((gc)(1e4)))export *;");
tryItOut("/*infloop*/for(((1 for (x in []))); (([11,12,13,14].filter).eval(5.0000000000000000000000 += <x><y/></x>)); <bbb xmlns=\"constructor > __count__\"> </bbb>) {/*infloop*/for(var __proto__; ( '' .eval(null)); __count__ = <><><x><y/></x></></>) {} }");
tryItOut("/*infloop*/M:do return; while(<x/>.__noSuchMethod__ = <y><z/></y> ? true :  \"\" );");
tryItOut("switch(<y><z/></y>.valueOf(\"number\")) { case 9: {yield; }break; {export __iterator__;export *; }break; case ((this !== <x><y/></x>).throw(*::*.watch(\"prop\", {}))): if(((1e+81)(false, <x/>))) yield; else  if (#1=[#1#].prototype) export prop;break; {/*for..in*/M:for(__parent__ = __noSuchMethod__.(<x><y/></x>.(undefined)) in <x><y/></x>) {export *;__iterator__; /x/g ; } }default: break; case 7: case 1: L:with((__iterator__.([this instanceof <x/> for each (__count__ in <><x><y/></x></>)]))){__parent__ = <x/>; }break; case 2:  }");
tryItOut("__parent__ const __count__;");
tryItOut("return <><x><y/></x></>;switch((eval(\"<y><z/></y>\", <y><z/></y>))) { case (-0) >>= window.propertyIsEnumerable(\"__count__\"): break;  }");
tryItOut("/*for..in*/for(var (function::constructor) in \n<y><z/></y>) {Math.pow{let __noSuchMethod__, __count__ = undefined;const constructor = (-0), prototype = this; } }");
tryItOut("if(*) {let (prop = 0/0) { if(__noSuchMethod__) { if (<><x><y/></x></>) <><x><y/></x></>; else break M;} } }");
tryItOut("if(#3={a:#3#}[ /x/ ]) {{} } else  if (((new Function)(-3/0))) {return <y><z/></y>;export *; }");
tryItOut("if([15,16,17,18].sort(function(q) { return q; }, (prototype.valueOf(\"number\")))) export __count__;\nyield;\n else  if (prop.__proto__) {return @foo; } else let __proto__ = __proto__, __parent__ = 3.141592653589793;");
tryItOut("/*for..in*/for(var __iterator__ = 'fafafa'.replace(/a/g, Function) in __parent__) <>\t<x><y/></x></>;");
tryItOut("/*infloop*/for(; this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; /*for..in*/<xxx {__count__}={#1=[#1#]} /><x><y/></x><x><y/></x><ccc:ddd></ccc:ddd>; yield y; }); constructor = __count__.*.throw([[1]] ? this : <><x><y/></x></> %= function(id) { return id })--) {}");
tryItOut("while(((--new Number())) && 0)let (__iterator__, constructor = false) { gc() }");
tryItOut("/*for..in*/for(let __parent__ in  /x/g ) /*for..in*/for(var case false: gc()break; default: case 7: break;  in false) return <><x><y/></x></>; const __count__;");
tryItOut("yield (-1)\nconst __iterator__ = prototype;");
tryItOut("/*for..in*/L:for(let prototype = Date() in __noSuchMethod__) {yield; }");
tryItOut("/*for..in*/for([__iterator__, __proto__] = (__parent__.prototype = <y><z/></y>) in @foo) {var __iterator__ = true =  /x/g , prototype = *;/*infloop*/M:for(let ({ __iterator__: __noSuchMethod__ }) = prototype.(true)(this); <x><y/></x>.hasOwnProperty(\"constructor\"); ((uneval((__parent__ = __proto__))))) {function  prototype () { {} }  } }");
tryItOut("L:with(({__proto__: [({ __iterator__: __parent__, __noSuchMethod__: __noSuchMethod__ }), constructor] = undefined.unwatch(\"prototype\") }))prop = __proto__;");
tryItOut("/*infloop*/for(({ __parent__: __parent__ }) = (__iterator__ = \n<x><y/></x> >>>=1.2e3); arguments >>= @foo; <y><z/></y>) {;var prototype, __count__ =  /x/g ; }");
tryItOut("with({}) { const __noSuchMethod__, __noSuchMethod__ = try { throw 0x99; } catch(prototype) { break ; } finally { break M; } ; } ");
tryItOut("/*for..in*/for(const __iterator__ in -1) return this;");
tryItOut("switch([constructor, , __parent__] = [<x><y/></x> if (<>\f<x><\ty/></x></>)]) { default: case 8: {}__iterator__case 0: prototype = <y><z/></y>, prop = __count__\t; }");
tryItOut("/*infloop*/while(([<><x><y/></x></> |= <x><y/></x>.@foo].sort(([1,2,3,4].slice).apply))){gc()switch(__noSuchMethod__) { default:  } }");
tryItOut("/*infloop*/do throw let; while(({ __count__: ({ x::__count__: ({ __iterator__: __count__ }) }), __noSuchMethod__: #1=[#1#] -= <x><y/></x> }) = (Number(let (prototype, __parent__) let (__noSuchMethod__ =  /x/g , \f) __iterator__, this.\f__defineSetter__(\"__iterator__\", function  __iterator__ (__noSuchMethod__) { yield *::* } ))));");
tryItOut("for(let y in []);");
tryItOut("let (constructor = false) { ; }");
tryItOut("/*infloop*/while((\n* .@*:: __proto__ = __iterator__)){/*for..in*/for(__parent__ =  ''  in <x/>) {gc() } }");
tryItOut("while((constructor) && 0){{;*; } }");
tryItOut("__iterator__ = *, __iterator__");
tryItOut("with({__count__: [#1=[#1#].throw(<y><z/></y>).prop for (<y><z/></y>.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty) in prop)]}){do return 0x99; while((1e+81) && 0); }");
tryItOut("{/*for..in*/for(constructor = (@foo.hasOwnProperty(\"prototype\")) in <><x><y/></x></>) {return; }yield; }");
tryItOut("if(1e81.propertyIsEnumerable(\"prototype\")) break M; else  if ((({a1:1}).__parent__)return;");
tryItOut("/*infloop*/for(let __count__; (#1=<y><z/></y>); <></>) export constructor;");
tryItOut("with(3)break ;");
tryItOut("let (__proto__, __proto__) { yield; }");
tryItOut("L: {yyyyield; }");
tryItOut("{__parent__ = __proto__; }");
tryItOut("if([]) throw constructor;");
tryItOut("export *; const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in ({ __count__: constructor, prototype: __proto__ }) = 3.141592653589793 < <><x><y/></x></>) var prop;");
tryItOut("if(({ __proto__: ({ __count__: ({ prop: __iterator__ }) }) }) = [(window.yoyo(null))].map(Math.pow)) {yield; }");
tryItOut("/*infloop*/L:for(__iterator__; *::*--; (new [[]]())) {yield __count__; }");
tryItOut("let (prototype, __noSuchMethod__) { \n }");
tryItOut("/*infloop*/L:for((this.@foo); (<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))); <><ccc:ddd></ccc:ddd></>.((({__noSuchMethod__: <x><y/></x> })))) {<!--yy-->let __count__, __proto__;\f }");
tryItOut("/*infloop*/for(__iterator__; __proto__.unwatch(\"prototype\"); (p={}, (p.z = __count__)())) gc()");
tryItOut("switch(<><zzz><\fx><y/></x></zzz></> += new String(new (@foo;)(prototype, undefined))) { case (eval(\"var __parent__ = *, constructor;\", new [1,2,3,4].map(({a2:z2}), this))): do {if(@foo) this; else {;continue ; } } while((new (((constructor.__count__|=(<><x><y/></x></>.__lookupGetter__(\"prototype\"))).throw(((<x/> === <><x><y/></x></>) * [1]))))()) && 0);break; default: /*for..in*/for(const [__proto__, __count__] = false in __parent__) __proto__, *::*;break; case 5: case ([* for each (__proto__ in *::*)][prototype%=null]).watch(\"__count__\", this.__defineSetter__(\"constructor\", /a/gi)): break; case 0: export *;case (#1=[({a1:1})] += -undefined >> (uneval(false))): case 5: yield;break; case 9: break; return\n/*infloop*/do return; while(@foo);break; case new Function: { }break;  }");
tryItOut("with(true){gc()(033); }\nreturn;\n");
tryItOut("/*infloop*/for(let (setter) = (new (((__parent__.(@foo)) >>= 0x99))( '' , (p={}, (p.z = *)()))); *::*--; (prop)\f = ({ prototype: ({ __count__: ({ __parent__: [__count__, \f__noSuchMethod__, __parent__, , ], constructor: prop }), __parent__: constructor }), prototype:  /x/g  <<  '' .__proto__ })) continue M;");
tryItOut("if([] = delete window) if(__parent__) {}");
tryItOut("break M;");
tryItOut("/*infloop*/for(const ({ __proto__: __iterator__ }) = <bbb xmlns:ccc=\"__iterator__.__noSuchMethod__ = <x><y/><\f/x>--\"><ccc:eee></ccc:eee></bbb>; window; (((new (function(y) { yield y; throw <x/>;; yield y; })()))((this)( /x/g ), function(id) { return id }))(((uneval( /* Comment */<><x><y/></x></>))), ((typeof ({}))[prop = [,]]))) ");
tryItOut("L:if((#1=(this.__defineSetter__(\"constructor\", function  __count__ (__parent__, prop) { yield <x><y/></x> } )))) { if (([] = prop = constructor)) {/*infloop*/M:do window; while(function ([y]) { }); } else {{} }}");
tryItOut("/*for..in*/for((__iterator__) in __proto__) {yield true; }");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = const __proto__; in  '' ) {throw [,,z1];yield; }");
tryItOut("/*for..in*/for(let __count__ in <><x><y/></x></>) { }");
tryItOut("__proto__, __iterator__\nlet __noSuchMethod__\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(__parent__ = [(-0) for (__noSuchMethod__ in __count__)] in undefined) function  prop (prototype, __iterator__) { yield <x/> } \n");
tryItOut("{yield 1.3;{} }");
tryItOut("return;");
tryItOut("/*infloop*/for(let prop; 1e81; ({a2:z2})) {export prototype; }");
tryItOut("/*infloop*/do {gc()yield; }/*\n*/ while((__proto__ && <x><y/></x>).valueOf(\"number\").propertyIsEnumerable(\"prop\"));");
tryItOut("if(undefined.@*) { if ((<><x><y/></x></> !== [z1])) (null);} else {yield;break ; }");
tryItOut("with(({a1:1})){;gc() }");
tryItOut("switch(new ([,,])(new window(*::*, null), function(id) { return id })) { case 2: break;  }");
tryItOut("if(__proto__.__count__ = prop = function(id) { return id }\n) { if ((__parent__.__proto__ = @foo).@*) {prop;return *; } else {[z1,,];if(*::* ? 1e+81 : __proto__) continue ; else {; } }}");
tryItOut("let (({ setter: [, , __noSuchMethod__, __noSuchMethod__], __proto__: ({ prop: prop, __parent__: ({ __count__: ({ prop: [<!--yy-->, ] }) }) }) }), __iterator__ = ([1,,].hasOwnProperty(\"__count__\"))) { this.zzz.zzz; }");
tryItOut("{throw (null)[<><x><y/></x></>].*;{} }");
tryItOut("L:if(((p={}, (p.z = this)()))) { if ((<><x><y/></x></> ? true : @foo)) M:if((yield <><x><y/></x></>)) {{}let __iterator__, prototype; } else {yield; }} else export __proto__;");
tryItOut("'haha'.split");
tryItOut("with(__iterator__.__proto__ getter= function  __count__ () { return false } ){export function::__count__;{export *;continue L; } }");
tryItOut("/*infloop*/for(const __proto__; ()(); <y><z/></y>[-3/0] ? ({__count__: prop}) : (__proto__.__noSuchMethod__)) return;");
tryItOut("with({prop: --null}){{export __iterator__;gc() }\n }");
tryItOut("switch(\nthis.__defineGetter__(\"constructor\", function(y) { yield y;  { return [[]] } ; yield y; })\n) { default: if(let (prop = null) *::* < /*for..in*/M:for(var [__noSuchMethod__, __proto__] = (<x><y/></x>.(@foo)[this]) in <x><y/></x>) {if(@foo) @foo; else  if (<><x><y/></x></>) throw false; else {return __proto__;3/0; }constructor; } +=  /x/ ) {;; } }");
tryItOut("yield prop.(*);");
tryItOut("with({prototype: (true.yoyo(@foo)).__lookupSetter__(\"prototype\")})let 0x99 = <y><z/></y>;");
tryItOut("yield *::*\n");
tryItOut("{if(prop) { if (<x><y/></x>) yield  \"\" ; else {var __noSuchMethod__, __count__; }}gc() }");
tryItOut("/*for..in*/for(let (__parent__.prop.__lookupSetter__(\"constructor\"))((({ set prop(({ constructor: __parent__, __count__: prop }))(<x><y/></x>.propertyIsEnumerable(\"constructor\")),  set __noSuchMethod__ constructor (constructor, prop) { return (@foo.valueOf(\"number\") += ({__proto__: <x><y/></x>})) }  }))) in (('haha'.split)(__noSuchMethod__ = <x><y/></x>))){gc() }");
tryItOut("/*infloop*/for((); export prototype;; [11,12,13,14].sort || *::*.prototype) return;");
tryItOut("/*for..in*/for(const __noSuchMethod__ = <x><y/></x>.@foo in <x><y/></x>) {yield;; }");
tryItOut("/*infloop*/M:for(const __parent__ = [11,12,13,14].sort; <><x><y/></x></>.hasOwnProperty(\"prototype\"); (prop.( /x/ ) -= ~__parent__)) {{};export *; }");
tryItOut("{/*for..in*/for(const [__noSuchMethod__, __count__] = prop = __count__ in <x><y/></x>) {export __iterator__; }M:if(@foo.__noSuchMethod__) var @foo = <><x><y/></x></>; else return; }");
tryItOut("with(this)M:with(({prototype: <x/>})){}");
tryItOut("L:\fif(Array()) { if ((prototype.( /x/g ))) {if(__count__.(true)) yield  '' ; else  if (this.yoyo(1e-81)) {throw prototype;continue ; } } else {throw prop;(<><x><y/></x></>); }}");
tryItOut("let(prototype = (new  \"\" ()), [__iterator__, , ] = ([,])[@foo]) ((function(){for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) __count__, __proto__;})());");
tryItOut("M:switch((__count__)) { default: break;  }");
tryItOut("\n");
tryItOut("L: export __parent__;");
tryItOut("/*for..in*/for(const prototype in ( =  '' )) throw new window(<y><z/></y>); const __count__;");
tryItOut("{}");
tryItOut("let(__iterator__ = <x/>) ((function(){let __parent__;})());");
