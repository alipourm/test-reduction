tryItOut("export *;;");
tryItOut("/*infloop*/for(<><x><y/></x></>; __count__; @foo) yield;");
tryItOut("try { (constructor) = __noSuchMethod__; } finally { with({}) { let(__proto__) ((function(){this.zzz.zzz;})()); }  } ");
tryItOut("with({}) try { @foo; } catch(constructor) { __iterator__ = @foo,  '' ; } ");
tryItOut("if( /* Comment */<zzz> /x/g </\tzzz>) { if ((p={}, (p.z =  '' )())) {var __noSuchMethod__;throw __count__; }} else {this.zzz.zzz; }");
tryItOut("/*infloop*/for(({ __proto__: prototype, __proto__: ({ __noSuchMethod__: ({ __noSuchMethod__: __iterator__, __count__: __noSuchMethod__ }), constructor: prototype }) }) = constructor|=*::*; eval(\"((undefined)(true))\", (Function(<x><y/></x>))) <= <zzz><x><y/></x></zzz>; (new #1#((* ..  \"\" )))) {export __count__;\freturn  \"\" ; }");
tryItOut("case 4: throw <x><y/></x>;default: break; case 4: ;throw export *;;break; ");
tryItOut("for(let y in []);");
tryItOut("do {falsedo { /x/  } while((<x><y/></x>) && 0); } while((continue ) && 0);");
tryItOut("/*infloop*/for((new [1,2,3,4].slice([<y><z/></y> if (prototype)])); ({prop: __proto__ =  ''  }); constructor(undefined) = window) switch(arguments) { case __noSuchMethod__:  }");
tryItOut("prototype\n");
tryItOut("export prototype;");
tryItOut("return;");
tryItOut("do {({}).hasOwnProperty } while(((())) && 0);");
tryItOut("/*for..in*/for(let (__parent__ = [[1]] for (prototype in @foo)) in ((function ()[, [, , , __count__, ], [__iterator__, , , , ], , ] = <><x><y/></x></>[ '' .__lookupSetter__(\"prototype\")])(eval(\" if ((\\n<y><z/></y>))\", {} || <><x><y/></x></>)))){export constructor;yield <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const ({ __iterator__: ({ __parent__: __count__ }) }) = ({__parent__: (#2=[window]),  get prop() { [1,2,3,4].slice }  }); ([<><x><y/></x></>].sort('haha'.split)); (-1) *= <x><y/></x>) const __iterator__, prop");
tryItOut("M:if(window) {(<y><z/></y>); } else /*infloop*/for(window; <><x><y/></x></>; <x><y/></x>) {continue ; }");
tryItOut("with({}) throw prop;");
tryItOut("L:switch(__proto__.__proto__ setter= function(y) { yield y; return;; yield y; }) { default:  }");
tryItOut("'fafafa'.replace(/a/g, 0x99)");
tryItOut("{const prototype, __noSuchMethod__ = 1.2e3;function () {  }  }");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.isPrototypeOf(new (@foo)())) {<x/>; } else  if ((__count__.prototype = new (<><x><y/></x></>))) {export __proto__; } else {/*for..in*/for(var prototype = <><x><y/></x></> in ({a1:1})) __count__yield <x><y/></x>; }");
tryItOut("false;\ngc()\nyield prototype;\n\n");
tryItOut("L:with(#0=({function::prop: (p={}, (p.z = [,,z1])())}))L: {export __noSuchMethod__;/*infloop*/for(let __parent__ = this; @foo; <x/>) yield (-0); }");
tryItOut("/*infloop*/L:for(const prop; undefined.watch(\"constructor\", 0/0); [window for (prototype in <x/>)]) {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__.prop in window) {}\nexport *;\n__parent__ = prototype; }");
tryItOut("with( /* Comment */@foo)var __noSuchMethod__ = ({a2:z2}), __noSuchMethod__ = __noSuchMethod__\ncontinue ;");
tryItOut("\nwith(3 for each (__parent__ in false)){break M; }\n");
tryItOut("if(<><x><y/></x></>) { if ( /x/g ) {const __noSuchMethod__ =  '' , __count__; }} else {let constructor;function(q) { return q; } }");
tryItOut("if((<x><y/></x>.prototype = <x><y/></x>).eval(__iterator__.((let (prop = __iterator__)  /x/ ))).__proto__ = ((__iterator__ = prototype) ^= __proto__ .@ __parent__)) { if ((eval(\"{}\",  /x/g )) if (@foo)) if(-- /x/ ) return null; else  if (__count__ :: prototype) {gc() } else return 0/0; else {{; } }}");
tryItOut("M:with({*::*['__noSuchMethod__']:  \"\"  - -0})(<y><z/></y>);");
tryItOut("for(let y in []);");
tryItOut("M:switch(1e-81) { case __iterator__: gc()default: export *; }");
tryItOut("{<x><y/></x> }");
tryItOut("with(prototype.__defineGetter__(\"constructor\", function ()*::*) >>= ((new Function(\";\"))))gc()");
tryItOut("/*infloop*/for(const [] = <></>; <{__parent__}><ccc:ddd><!--yy--></ccc:ddd></{__parent__}>;  \"\" ) {continue ;yield;\nvar prop = window;\n }");
tryItOut("0.1;");
tryItOut("/*infloop*/for(<x><y/></x>.(function(id) { return id })((0/0.valueOf(\"number\"))); this.__defineGetter__(\"__noSuchMethod__\", try { throw <x><y/></x>; } catch(__parent__) { yield; } ); new Iterator(function:: = {}, <><x><y/></\rx></>)) ;");
tryItOut("with({__iterator__: __iterator__}){return;yield; }");
tryItOut("L:with(( /x/ .prototype = <y><z/></y>).*);");
tryItOut("/*infloop*/while(<{__noSuchMethod__}>\f</{__noSuchMethod__}>)function  constructor (prop)__parent__");
tryItOut("/*infloop*/while(constructor = this.__defineSetter__(\"__parent__\", /a/gi)){throw null;gc() }");
tryItOut("/*for..in*/for(const prop(({ __noSuchMethod__: ({ prototype: __iterator__, __noSuchMethod__: [__proto__, , prototype, , __noSuchMethod__] }), constructor: [({ __proto__: __count__, __proto__: prop }), ({ __count__: prop }), ({ constructor: prop, __iterator__: (p={}, (p.z = @foo)()) }), ] }) = ({ __parent__: prototype })) in ((function (__parent__) { yield <employee id=\"1\"><name>Joe</name><age>20</age></employee> } )(Error(*::*, __parent__) >>= (<y><z/></y>) | 'fafafa'.replace(/a/g, function  __proto__ (__proto__)null))))'haha'.split");
tryItOut("/*for..in*/for(const __parent__ in 1e-81) {yield;return <x><y/></x>; }\nexport *;return  /x/g ;");
tryItOut("/*for..in*/for(var __parent__ in new <x/>(-0, <x><y/></x>).constructor) {L:if(window) {{}let __parent__; } }");
tryItOut("var window __parent__;");
tryItOut("{let __proto__ =  \"\" , __iterator__ = <x><y/></x>;export *; }");
tryItOut("if(this - (#2=[new (1e-81++)(__proto__ @  '' )])) {throw prop;yield  \"\" ; } else {({}).__lookupGetter__if(let (function::prop, __proto__ = <><x><y/></x></>) (function ([y]) { })()) {Math.pow } else  if (<x/>) {break L; } }");
tryItOut("yield (new ('haha'.split).call(*, let __noSuchMethod__ = null;));");
tryItOut("/*infloop*/while([[]](<y><z/></y>, true))return;");
tryItOut("");
tryItOut("/*for..in*/for(let prototype = <><x><y/></x></> | null in  /x/  %= true) new Exception(1e+81), true");
tryItOut("M:if(@foo) { if ((1e+81)(this.zzz.zzz, eval(\"<x><y/></x>\", null |= this))) yield;const __parent__ = [z1,,];} else {export __noSuchMethod__; }");
tryItOut("({}).hasOwnProperty");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in __parent__ = window) {let __count__ =  \"\" , __noSuchMethod__;break L; }\f");
tryItOut("{throw ({a2:z2}); }do {export prototype;var constructor = 0/0, prototype\t; } while((*::*) && 0);");
tryItOut("/*infloop*/M:for(const prototype; this.__defineSetter__(\"__proto__\", ((-1)).__defineSetter__); __iterator__.prop === (\n<><x><y/></x></>(new RegExp(undefined)))) L:with({prototype: <y><z/></y>}){return <><x><y/></x></>; }");
tryItOut("if( \"\"  == (<x/>)[__count__]) ; else  if (Array(__noSuchMethod__, @foo)) yield;");
tryItOut("gc()yield [[]];");
tryItOut("with({}) { let(prototype = <x/>.isPrototypeOf(4.), __parent__ = (1e81.valueOf(\"number\"))) { for(let y in [5,6,7,8]) gc() } ");
tryItOut("/*for..in*/for(var prototype = (eval(\"[1]\", <\f><x><\ty/></x></>)) in new null()) return <><x><y/></x></>;");
tryItOut("/*for..in*/for(var __iterator__ = <><x><y/></x></> in <><x><y/></x></>) const __iterator__ =  /x/ , function::__parent__;");
tryItOut("L: ");
tryItOut("let(__count__, __parent__) { {}");
tryItOut("/*infloop*/for(const __parent__ = let (__iterator__, __noSuchMethod__) ([, __iterator__, prop, ] = true); ({__proto__: __iterator__, __proto__: true })\t.propertyIsEnumerable(\"prop\"); constructor = ({a1:1}).watch(\"constructor\", (undefined / -3/0).__defineSetter__)) {}");
tryItOut("{if(this\t.propertyIsEnumerable(\"prototype\")) { if (<y><z/></y> >>  /x/ ) } else {continue L; } }");
tryItOut("export *;");
tryItOut("/*infloop*/while(<x><y/></x>.watch(\"constructor\", new Function)){{} }");
tryItOut("if(new ( \"\" .watch(\"__noSuchMethod__\", (({}).hasOwnProperty).apply))((eval(\"window\", 0x99)))) { }");
tryItOut("/*infloop*/L:do throw <x><y/></x>; while(<><x><y/></x></>);");
tryItOut("let (({ prototype: __noSuchMethod__ }), __parent__) { //h\n/*infloop*/L:for(let ; this.__defineGetter__(\"prop\", 'haha'.split); this = constructor) {yield;continue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in <><bbb xmlns=\"({prototype setter: function (prop, __proto__) {  } , __count__ getter: this }) ? new 033 : (({__iterator__ setter: 1e4 }))/*\n*/.propertyIsEnumerable(\"__count__\")\">yyy</bbb></>) {return; }");
tryItOut("/*for..in*/for(let [constructor, __parent__] = ([1,,])(1.2e3) in <><x><y/></x></>.valueOf(\"number\")) {yield this }");
tryItOut("");
tryItOut("");
tryItOut("if(window() < <x/> -= arguments) { if (new <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>(this.__defineGetter__(\"constructor\", Math.sin))) /*infloop*/for(var __iterator__; this; <y><z/></y>) {yield; } else }");
tryItOut("prototype");
tryItOut("/*for..in*/L:for(const [prop, __noSuchMethod__] = (new String(({a1:1}))) in (prototype = this)) {yield; }");
tryItOut("L:with\n({__proto__: (yield eval(\"let constructor = <x/>, __noSuchMethod__;\",  \"\" ).valueOf(\"number\"))}){for(let y in []);/*infloop*/do export __proto__; while(window); }");
tryItOut("/*infloop*/for(const __parent__; undefined.eval(constructor); (p={}, (p.z = *::*)())) break L;");
tryItOut("/*infloop*/for(const __iterator__ = [z1,,]; this.zzz.zzz; 'fafafa'.replace(/a/g, ((1e81).call).call)) yield;");
tryItOut("/*infloop*/for(let __proto__; <><x><y/></x></>.hasOwnProperty(\"__iterator__\"); (yield null)) {/*infloop*/L:do return; while(null); }");
tryItOut("(__parent__);<x><y/></x>;\ngc()\n");
tryItOut("gc()\n;");
tryItOut("let(set = ([11,12,13,14].sort)) ((function(){yield 'fafafa'.replace(/a/g, (window).__defineSetter__\t).__defineGetter__(\"prop\", gc);})());");
tryItOut("return (<x><y/></x> @ this);");
tryItOut("(1e81);/*infloop*/for(<><x><y/></x></>; @foo;  \"\" ) throw <x><y/></x>;");
tryItOut("/*infloop*/M:while(__count__)(function(id) { return id });");
tryItOut("{if(*::*) {; } }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (({__iterator__ setter: function(y) { yield y; (<x/>);; yield y; }, __count__ getter: ({}).__lookupGetter__ }) in 0.1) {__noSuchMethod__case <y><z/></y>: break L; }");
tryItOut("{;M:if(false) { if (null) __parent__;} else {yield;let __count__ =  /x/ ; } }");
tryItOut("if(((([[]] || this)(<><x><y/></x></>)).__defineGetter__(\"__iterator__\", (function (__iterator__) /x/g ).apply))) {throw *; }");
tryItOut("with({__count__: ( /* Comment */(-1)) for each (__noSuchMethod__ in <><x><y/></x></>) for each (__count__ in true)}){L:if( '' ) { if (*::*) gc() else {(window); }} }");
tryItOut("/*for..in*/M:for(let prop = <x><y/></x> !== this in <zzz> ''  , function(id) { return id }</zzz>.((uneval(__parent__ > (-1))))) {;gc() }");
tryItOut("{ }");
tryItOut("with((new (__iterator__ = (__proto__ for (prop in [,,])))((function  __count__ () { export __proto__; } ()), (null.__defineSetter__(\"__noSuchMethod__\", __parent__)))));");
tryItOut("if(new (null == <><x><y/></x></>)(__parent__.(<><x><y/></x></>))) { if ([z1]) {let (constructor = __iterator__) { var constructor, __parent__; }if(<x><y/></x>(this.hasOwnProperty(\"__parent__\")).function::__proto__) {return;{yield <x><y/></x>;[,,]; } } } else }");
tryItOut("if(new ((({}).hasOwnProperty).call)(this.__defineSetter__(\"__count__\", @foo).watch))) return <y><z/></y>; else {with(false % [[1]])throw 033; }");
tryItOut("{}");
tryItOut("if(let (prop = 0/0) null) { if (this.zzz.zzz) {__noSuchMethod__; }} else {return;prototype; }");
tryItOut("export __proto__;");
tryItOut("gc\nif(<><x><y/></x></>) {continue M; } else {continue ; }\n");
tryItOut("/*for..in*/for((constructor) in (((1 for (x in [])))('fafafa'.replace(/a/g, eval)))){if((yield *::*)) gc() else {* } }");
tryItOut("if( /x/g [ /x/ ][(<x/> ::  '' )]) { if (false.@foo) gc()} else throw constructor;");
tryItOut("with({__iterator__: -0 *= #1=[#1#]})throw <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = <x/> ? true : [] in (eval).call(window, <x><y/></x>)) {/*infloop*/for(var __iterator__;  /x/ ; __count__) export *;yield; }");
tryItOut("if([1]) {<><x><y/></x></>.propertyIsEnumerable(\"__count__\") == (({__count__: [,],  set constructor __count__ (prop, __proto__) { yield window }  })) } else  if ([({ __proto__: constructor }), ] = []) switch(function::prototype%=<x/>) { default: const __parent__; }");
tryItOut("if((__iterator__++).propertyIsEnumerable(\"__count__\")) { if (null /= <><x><y/></x></>.eval(this.__defineGetter__(\"prototype\", (({}).hasOwnProperty).call))) {/*for..in*//* nogeckoex bug 349964 */ for  each(var each in prop) break L; }} else {}/*\n*/");
tryItOut("L:with({: constructor = __noSuchMethod__}){var prototype = window;* }");
tryItOut("/*for..in*/for(var __proto__.__noSuchMethod__ in ((Function)(<><x><y/></x></>|=[,,z1]))){; }");
tryItOut("if(this.__defineGetter__(\"prop\", (1 for (x in []))) .@x:: function::let ^ false) {break L; } else  if (__count__) let function::__noSuchMethod__ =  /x/g , __parent__; else return @foo;");
tryItOut("if(<x>\f<y/></x>.unwatch(\"prototype\")( \"\" .__lookupSetter__(\"constructor\"))) { if ((([1,2,3,4].slice)(true.__lookupSetter__(\"<><x><y/></x></>\")))) {throw (*::*[window]); } else if(<x/>) {(<x><y/></x>); }}");
tryItOut("M:if((__proto__.__iterator__)) __iterator__ = <x><y/></x>;");
tryItOut("\nif( \"\" ()) return;");
tryItOut("/*for..in*/for(const [__proto__, __noSuchMethod__] = <><x><y/></x></> in getter) {var prop, __noSuchMethod__;var __parent__; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in eval(\"/*for..in*/for(var [__proto__, __noSuchMethod__] = 3/0 in 1e4) {export *; }\", <x/>.eval(<><x><y/></x></>))) {yield; }");
tryItOut("throw StopIteration;");
tryItOut("if([11,12,13,14].filter) {export prop;3/0; } else  if ((-1).watch(\"__noSuchMethod__\", ({}).__lookupGetter__)) const __count__, prototype = <x><y/></x>; else {(null);return; }");
tryItOut("let (__noSuchMethod__, constructor = *::*) { let (prototype = {}, __noSuchMethod__) { var __proto__; } }");
tryItOut("do null['prototype'] while((new (new (new Function(\"yield  /x/g ;\"))(<><x><y/></x></>))(this) !== (*::*.propertyIsEnumerable(\"__noSuchMethod__\"))) && 0);");
tryItOut("M:with(constructor)continue ;");
tryItOut("if((<bbb xmlns=\" '' \"> </bbb>.(<x><y/></x>.__parent__))) /*for..in*/for(let x::__parent__ in ((/a/gi)( /x/g )))let __parent__ =  /x/g ; else {<><x><y/></x></>;(<><x><y/></x></>;); }");
tryItOut("with({__noSuchMethod__: ((function ([y]) { })() for (constructor in  /x/ ).valueOf(\"number\"))}){/*for..in*/for(var function::__iterator__ in <><x><y/></x></>) {export *; } }");
tryItOut("__count__.__proto__ = __proto__;");
tryItOut("let (prop = (__proto__ = null), constructor) { gc() }");
tryItOut("try { __iterator__ = constructor; } catch(__proto__) { __parent__ = __iterator__; } ");
tryItOut("");
tryItOut("/*for..in*/M:for(var constructor = 0x99 ^= new ((1 for (x in [])))(<><x><y/></x>\f</>) in Object(#1=[ /x/g ], *)) {{}/*for..in*/for(var __count__ in <><x><y/></x></>) {yield window; } }");
tryItOut("M:with({__noSuchMethod__: <><x><y/></x></>.watch(\"__iterator__\", constructor) >= window[window]}){\fL:if(Iterator(this.zzz.zzz, <x><y/></x>)) \n else  if (constructor|=(--[1,,])) if(\t[[]]) { if (<x><y/></x>) (<y><z/></y>).watch} else {return constructor;export __proto__; } else {/*infloop*/for(__proto__ = (~<y><z/></y>); __iterator__: __iterator__[<><x><y/></x></>]; null -= <y><z/></y>) {;var constructor = <x><y/></x>; } } }");
tryItOut("/*for..in*/for(const constructor = 'fafafa'.replace(/a/g, new Function) in 1.3) {let prototype; }");
tryItOut("return (undefined)('haha'.split);");
tryItOut("0/0<ccc:ddd></ccc:ddd>");
tryItOut("if(0/0.__defineSetter__(\"constructor\", ({}).hasOwnProperty)) gc()\nexport function::__count__; else  if ([,] .@*:: <{__count__}></{__count__}> .. <><x><y/></x></>.throw(window).yoyo((new Object((new Function()))))) /*for..in*/for(const __iterator__ = (let (__iterator__) <x><y/></x>) in @foo |= <><x><y/></x></>) \t");
tryItOut("if(gc(<x><y/></x>, <><x><y/></x></>)) { if (constructor, prototype([[1]])%=~*) (window)\n /x/g ; else let  = <>__noSuchMethod__ = ((yield window))</>, prop =  /x/ ;}");
tryItOut("throw __count__;");
tryItOut("throw prop;");
tryItOut("if((0 :: 1.3).hasOwnProperty(\"prop\")) {L:if(window) { if (prop = undefined) /*for..in*/for(let prop = __noSuchMethod__ in <x><y/></x>) let __count__ =  /x/g ; else {yield 3.141592653589793;while((null) && 0){let each = <x><y/></x>, prototype = 3.141592653589793; } }} } else  if ((-0 << __iterator__)) yield else /*infloop*/while(([z1,,].propertyIsEnumerable(\"constructor\")).@*)var prototype = *;");
tryItOut("try { for(let y in [5,6,7,8]) for(let y in []); } finally { with({}) { return; }  } ");
tryItOut("/*infloop*/for(var ({ __iterator__: __iterator__, __iterator__: __noSuchMethod__ }) = (new (<x><y/></x>.isPrototypeOf(__proto__))(prototype = window.valueOf(\"number\"))); <x><y/></x> >>> <x><y/></x>; delete *)  /x/g \nif(*) gc()");
tryItOut("if(void  /x/g ) {{gc()break ; } } else  if (eval(\";\", 033).eval(.2.unwatch(\"prototype\"))) {export constructor; }");
tryItOut("with((1.3()))do continue ; while((*) && 0);");
tryItOut("with({}) { __iterator__; } ");
tryItOut("");
tryItOut("/*infloop*/\tfor(<x><y/></x>\n; <xxx>{prop}</xxx>; (this.zzz.zzz)) {let (__noSuchMethod__, __count__) { /*infloop*/for(var __proto__;  '' ; <x/>) gc() } }");
tryItOut("if([15,16,17,18].some('haha'.split, *::*)) gc");
tryItOut("/*for..in*/for(const constructor in (p={}, (p.z = prototype)()) @ false.prop) /*for..in*/for(__proto__ in false) {yield this; }");
tryItOut("with({}) { export __noSuchMethod__; } ");
tryItOut("/*infloop*/for(let __proto__; <x/>; (null++).__noSuchMethod__ == [, __proto__.delete, __proto__, __iterator__, ] = (uneval(__count__ = <x><y/></x>))) {{/*infloop*/while((-0)) }export __count__; }");
tryItOut("/*infloop*/for(__iterator__.__parent__.__noSuchMethod__ && export *; *::*.__lookupSetter__(\"prop\"); (<x><y/></x> if ({}))) {;/*infloop*/do {yield null;; } while(null); }");
tryItOut("/*for..in*/for(__proto__ in (([1,2,3,4].map)(<x/>.propertyIsEnumerable(\"__noSuchMethod__\")))){/*for..in*/for(__parent__.constructor in ((<><x><y/></x></>)((@foo)[[,,]]))){const __proto__, __count__ = null; }const prototype, prop; }");
tryItOut("{return; }");
tryItOut("/*for..in*/L:for(var prototype = __count__.__iterator__ = constructor.prototype getter= Math.pow in (__iterator__ = *::*.hasOwnProperty(\"__parent__\"))) {return; }");
tryItOut("{([]);const setter; }");
tryItOut("let prop = @foo, __count__; const prop;");
tryItOut("{with({}) throw __proto__; }");
tryItOut("do break ; while((true) && 0);");
tryItOut("export *\n");
tryItOut("with({__iterator__: (<x><y/></x> ? __proto__ : <x><y/></x>)++})if((new (function(q) { return q; })(<><x><y/></x></>,  /x/ ))) yield <x><y/></x>; else  if ((function () { return prototype } )(window).unwatch(\"__count__\")) {{} } else {{};{} }");
tryItOut("L: {{}prototype = #1#, prototype; }");
tryItOut("/*infloop*/for(var constructor; prototype = (<x/> :: <y><z/></y>)++; <y><z/></y>) {;var prop, __count__ = __iterator__; }");
tryItOut("L:if((({ get prototype __noSuchMethod__ (__parent__) { switch(__proto__, prop) { default: L\t: { }break;  } } , __proto__.constructor: let (prop = *, prototype) new ((new Function(\"let prop, __iterator__ = window;\")))() }).__defineGetter__(\"__count__\", * %= <><x><y/></x></>))) {L:if(1e4) { if (window) {yield  /x/g ;throw null; }} else {export *;\f } } else {export *;break L; }");
tryItOut("if((<y><z/></y> if (window))) (prop); else  if (#1#) with({__iterator__: this.__defineSetter__(\"__iterator__\", 'haha'.split)\t})(<><x><y/></x></>); else return *::*;");
tryItOut("/*for..in*/for(var __parent__.__proto__ in ((Math.pow)(this.__defineSetter__(\"__noSuchMethod__\", (function (__iterator__)*::*).call)))){let __parent__ = prototype, __iterator__ = this;M:while((<><x><y/></x></>) && 0)export *; }");
tryItOut("/*for..in*/for(const __count__ in ((function (({ constructor.__iterator__: ({ \t__count__: __noSuchMethod__ }), __count__: __count__ }), Object( /x/g  <<= null, Array())) { return __noSuchMethod__ = {let __noSuchMethod__ = -3/0;let prototype = *, __iterator__; } } \t)(++[[1]]))){*; }");
tryItOut("");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in 0/0) (<><x><y/></x></>);");
tryItOut("/*infloop*/for(const [set] = __count__ = <><x><y/></x></> &= (prop = yield false.watch(\"__parent__\", (__parent__ + <><x><y/></x></>.*).__defineSetter__)); [11,12,13,14].filter; ( \"\"  === get)) export ;");
tryItOut("return;");
tryItOut("(<><x><y/></x></>)\nreturn;");
tryItOut("switch(new <><{prototype}></{prototype}></>) { case 8: break; let __proto__;break; case 7: /*for..in*/for(var prototype in (((1 for (x in [])))((__proto__ = *.yoyo(<x><y/></x>)))))return <x><y/><\f/x>\nconst prop = (-0), constructor = __iterator__;break; case 9:  }");
tryItOut("L:if(null) yield #3={a:#3#}; else {Functionfunction  __proto__ () { yield <x><y/></x>; }  }");
tryItOut("/*infloop*/M:while(#1=({__iterator__: this.zzz.zzz}))var __parent__ = *::*, __proto__ = [,];");
tryItOut("for(let y in []);");
tryItOut("{switch((-3/0 .@x:: [,,z1])) { default: yield <><x><y/></x></>;break; gc()case window .@*::  /x/ : break;  }L:if(#3={a:#3#} >> (<><x><y/></x></>.__defineGetter__(\"prototype\", ({}).hasOwnProperty))) {yield @foo; } }");
tryItOut("while(() && 0)let(prototype) { this.zzz.zzz;");
tryItOut("if(new  \"\" (<><x><y/></x></>, *::*)) {throw window;throw true; } else  if ((yield.__parent__ setter= Function)) {1.2e3; }");
tryItOut("if(null) { }");
tryItOut("let (__iterator__, prop) { yield; }");
tryItOut(" /x/ ;");
tryItOut("/*for..in*/for(const prototype = <><x><y/></x></> instanceof window in (-0)) break ;");
tryItOut("if((yield *)) return; else  if (__noSuchMethod__ |= @foo) {export *; }");
tryItOut(";\n/*for..in*/for(let __parent__ in  '' ) return;\n");
tryItOut("let (constructor = <x/>(({ get __parent__ constructor (prop, __proto__) { return * }  })), ({ prop: __proto__ })) {  }");
tryItOut("/*for..in*/for(let [__count__, prototype] =  /x/g  in  /x/g ) yield;");
tryItOut("/*for..in*/for([__proto__, [[, , __parent__], prototype, ], constructor] = (<x><y/></x>.(arguments)) in (new [1,2,3,4].map(undefined, false))) {yield; }");
tryItOut("if((new Function((( /x/g .throw(<x><y/></x>)).watch(\"prototype\", yield;))))++) { if (prop.prototype%=true >> __parent__) {let (__noSuchMethod__ = new [1,2,3,4].slice(), prop = \n__proto__) { if(5.0000000000000000000000) (undefined); else  if ([z1]) {yield constructor; } else return; }\n__iterator__;\n }} else {<x><y/></x> const ; }");
tryItOut("yield constructor;");
tryItOut("M:if((this.__iterator__ = <x><y/></x>.__defineGetter__(\"__parent__\", __noSuchMethod__))) {export *; } else  if ([prototype, prototype] = <><bbb xmlns:ccc=\"[]\"><ccc:eee></ccc:eee></bbb></>) return; else {if((@foo.__defineSetter__(\"__parent__\", Math.sin))) {(arguments); }/*infloop*/for(var prototype; constructor; window) gc() }");
tryItOut("if(new (\tfunction  __proto__ (__iterator__) { let __parent__, prop; } )('fafafa'.replace(/a/g, function(q) { return q; }) :: (<><x><y/></x></>.*))) { if ( /x/  &= <y><z/></y> *= prop.__parent__) ( /x/g );} else gc()");
tryItOut("/*for..in*/for(var constructor = 1e4 in #1#) {yield <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M/*\n*/: for  each(var  /x/g  in prototype = this) {/*for..in*/for(const [__iterator__, __iterator__] = function::__iterator__ = [,] in ({a1:1})) {;__noSuchMethod__ } }");
tryItOut("M:if(([<x><y/></x> && [,] for (<y><z/></y> in 033) for each (prototype in <x><y/></x>)])) {yield;export constructor; } else prototype;");
tryItOut("{<x><y/></x>; }");
tryItOut("/*infloop*/while(RangeError(yield (__parent__.*) << Function(), [z1,,] == this.isPrototypeOf(__noSuchMethod__ = [,,z1]))){M:if( /x/ ) {this; } }");
tryItOut("if((each.__parent__ = +<y><z/></y>)) yield *::* else  if (new String() <<= ({ __iterator__: __proto__ }) = ({ __count__: __proto__ })) while((<x/>.watch(\"__count__\", function(q) { return q; })) && 0)L: yield; else (<x><y/></x>.prop = <y><z/></y>);");
tryItOut("yield 1.2e3 ? <\fx><y/></x> : undefined;");
tryItOut("yield \ngc()");
tryItOut("L:with(undefined)/*for..in*/M:for([__iterator__, constructor] = prop.__noSuchMethod__ = new 1e4() in 1e+81) L:if(constructor) { if (prop) (-3/0);} else gc()");
tryItOut("/*infloop*/for(const __proto__; <x/>; *::*.isPrototypeOf((function ([y]) { })())) continue M;");
tryItOut("let (__proto__) { ; }");
