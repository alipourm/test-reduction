tryItOut("/*infloop*/do {yield __noSuchMethod__;let prop } while([,]);");
tryItOut("__count__ = prototype;");
tryItOut("/*infloop*///h\nfor(var prototype = [15,16,17,18].filter((__iterator__.(*)).__defineSetter__, eval(\"({ set __proto__(__iterator__, __proto__)[z1,,].@* })\", ({ get __count__(__iterator__, function::function::__count__) { return (*.__lookupSetter__(\"prototype\")).valueOf(\"number\") }  }))); 0;  /x/ .__count__ = window) switch(<bbb xmlns:ccc=\"([<y><z/></y> /  '' ].map(function (__iterator__, __parent__) { return <x><y/></x> } ))\"><ccc:eee></ccc:eee></bbb>) { case __noSuchMethod__: break; default: break; gc()break; case 2: __noSuchMethod__ = 033, __parent__ = <><x><y/></x></>;break;  }");
tryItOut("if(window) {__proto__ = prop;yield; }");
tryItOut("export *; const constructor;");
tryItOut("if(constructor.@foo) {(<><x><y/></x></>).__defineSetter__break L; } else  if ( /x/g .throw(\f*)) {return <x><y/></x>; } else {/*for..in*/for(var __proto__ in (((1 for (x in [])))(undefined))){yield null; }\nreturn;\n }");
tryItOut("{if(true)  else  if (1e+81) {let __proto__;{} }\nreturn ((p={}, (p.z = 1e+81)())); }\n/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in <x><y/></x>) 0.1");
tryItOut("return undefined / __parent__;");
tryItOut(" ''  const __noSuchMethod__;");
tryItOut("let (delete =  /x/g , function::constructor) { /*infloop*/do {/*infloop*/for((-1); <x><y/></x>; <x><y/></x>) {break ;function  prototype (__count__) { yield; }  }return <x/>; } while(__parent__.__proto__ getter= (new Function(\"return;\"))); }");
tryItOut("if(__iterator__ = window) gc() else  if (( /x/g )()) yield window;");
tryItOut("/*for..in*/L:for(((<y><z/></y>.watch(\"prop\", (({}).hasOwnProperty).call))(( /x/g [this]))) in ((/a/gi)( for (prop in #1=[#1#]) for (*['__count__'] in ({a1:1})) for each (__count__ in <x><y/></x>) for each (constructor in *)))){/*infloop*/for(let ({ prop: [__noSuchMethod__, [__proto__, , , __iterator__], ], __noSuchMethod__: [, ] }) = 1e-81 ^= []; new (<{function::__parent__}><ccc:ddd>yyy</ccc:ddd></{function::__parent__}> > <x/>)(<x><y/></x>); (uneval(<x/>))) let (prototype) { (3); } }");
tryItOut("/*for..in*/for(const __count__ in ((function  __parent__ (__noSuchMethod__) { \n(*);\n } )(undefined))){var prop = null, __parent__ = <><x><y/></x></>;\nfunction  __count__ (__noSuchMethod__) { yield __parent__ } \n/*infloop*/for(const __iterator__; null -  '' ; __iterator__ = prototype) throw this; }");
tryItOut("with({__proto__: [,,z1].__defineSetter__(\"__proto__\", __noSuchMethod__)}){yield; }");
tryItOut("L: /*infloop*/for(const ({ __noSuchMethod__: [__count__, constructor, ] }) = ((yield __parent__)) *= ; new export *\t(); <{prop}> </{prop}\f>) yield <x><y/></x>;");
tryItOut("yield let (prop = true) 3/0.__defineSetter__(\"__parent__\", function  prototype (prototype, constructor) { throw  '' ; } );");
tryItOut("L:do {throw <x><y/></x>; } while(( /x/ ) && 0);");
tryItOut("for(let y in []);");
tryItOut("if(({ get constructor prototype () { return eval(\"<y><z/></y>\", 5.0000000000000000000000) } , prop: (window.__defineGetter__(\"prototype\", ({}).__lookupGetter__))//h\n })) L:with(<x><y/></x>){break ;const __noSuchMethod__ = <x><y/></x>, prop = @foo; } else  if ((__parent__ = ({ __iterator__: prototype }))) /*infloop*/for(var __count__; window--; ([__parent__].sort(<><x><y/></x></>)) * (<><x><y/></x></> >>> (-1))) {let (prop) { return undefined; } } else {/*for..in*/for(let __noSuchMethod__ in ((({}).__lookupGetter__)(<x/>))){<y><z/></y>; } }");
tryItOut("let (__noSuchMethod__, prototype =  \"\" ) { {gc() } }");
tryItOut("/*for..in*/L:for(var __iterator__ in 1e81) {gc(){} }");
tryItOut("/*infloop*/L:for(var __count__; (yield (-(@foo\n))); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <><x><y/></x></>) {(<><x><y/></x></>);export __noSuchMethod__; }");
tryItOut("/*infloop*/for(function(id) { return id }; 0x99;  '' ) break ;");
tryItOut("if(__iterator__) {{}(@foo); } else  if (false) {<x><y/></x>;return __count__; }");
tryItOut("return;");
tryItOut("/*for..in*/for(__count__ in ((Math.pow)(let (__count__ = -3/0) __proto__)))break M;");
tryItOut("/*for..in*/for(prototype in __iterator__.__lookupSetter__(\"__iterator__\")) yield __iterator__\f;");
tryItOut("/*infloop*/for(let __parent__; new gc(); #2=({__count__: <\rx><y/></\tx>}).__iterator__.__noSuchMethod__) ;");
tryItOut("/*infloop*/do {}var prop = *, __noSuchMethod__ =  '' ; while((\fwindow.__defineSetter__(\"prototype\", 'haha'.split).valueOf(\"number\")));");
tryItOut("/*for..in*/M:for(__parent__ in ((true)(window))){{(<><x>//h\n<y/></x></>);gc }gc() }");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = this.zzz.zzz in (#1= /x/g )) {let constructor = <x><y/></x>;throw __proto__; }");
tryItOut("if(0x99 != null) {L:if(this) yield; else  if (prototype) { /x/ ;export constructor; }prototype = <x/>; } else export *;");
tryItOut("while((__count__) && 0){export prototype;function (4.,  \"\" ) { return [[]] }  }");
tryItOut("return <x><y/></x>; const __noSuchMethod__;");
tryItOut("with({}) throw prototype;");
tryItOut("with(window ? __count__ : 0){with(*)[1,2,3,4].slice for (this.__defineSetter__(\"constructor\", function () { return __iterator__ } )['__proto__'] in constructor) for each (prop in <><x><y/></x></>) if (<x><y/></x>) }");
tryItOut("if(true) { } else  if (<y><z/></y>) {return;(@foo); }");
tryItOut("yield;\nconst __iterator__ = prop;\n");
tryItOut("(false);");
tryItOut(" for each (__parent__ in <x><y/></x>()) for each (prop in (__proto__ = *::* .@x:: <y><z/></y>)) for (getter in prototype = 1.2e3.__parent__ = <x/>[@foo]) for each (__count__ in undefined)");
tryItOut("if(1.3) {const ({ __count__: __noSuchMethod__, constructor: __noSuchMethod__ }) = -0.__lookupGetter__(\"__iterator__\"), __count__ = <x><y/></x>; } else /*for..in*/L:for(let x::__proto__ = function::__iterator__ in <x/>) export __proto__;");
tryItOut("let (__iterator__, __parent__) { let (__count__) { L: export constructor; } }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const ((new __noSuchMethod__.(false < true)()))( + (function ([y]) { })()) in new (__proto__.prop = 0/0)(__proto__ = <><x><y/></x></>, )) {prototype = null, __noSuchMethod__; }");
tryItOut("if( /x/g  ^= this)  else  if (([15,16,17,18].map(function  __noSuchMethod__ ()*, new <x><y/></x>(<><x><y/></x></>)))) /*for..in*/for(let prop(<><x><y/></x></>) in ((( /x/  -= __noSuchMethod__).__defineSetter__)((__noSuchMethod__ = 1e-81)))){prototype = <><x><y/></x></>;(<x><y/></x>); }");
tryItOut("{}\n");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("switch(<y><z/></y>.__lookupSetter__(\"constructor\") !=  /x/ ) { case ( ''  + (eval())): {yield window;gc }\ndefault: break;  }");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while((prototype.yoyo(constructor.__noSuchMethod__ setter= eval)))continue ;");
tryItOut("__noSuchMethod__: (yield [({})].eval(*.watch(\"__parent__\", ( '' ).watch)))");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (<x/> | window) in <y><z/></y>) break M;");
tryItOut("");
tryItOut("if(4.) { if (<><x><y/></x></>) gc()} else {export __count__;yield; }");
tryItOut("let (constructor = (p={}, (p.z = <x/>)()), function::] = true) { if(<x><y/></x>.__lookupSetter__(\"__proto__\")) {const __parent__, __iterator__; } }");
tryItOut("for(let y in [5,6,7,8]) with({}) var __noSuchMethod__ = <><x><y/></\nx></>; const __parent__;");
tryItOut("if(((<><x><y/></x></>.__noSuchMethod__)((<y><z/></y>.hasOwnProperty(\"__count__\")))())) {{break ;return []; } } else  if (\nconstructor = <y><z/></y>.valueOf(\"number\") .. __proto__ = <x><y/></x> %= prop.__iterator__ = false) {/*for..in*/for(var [prop, __iterator__] = ((p={}, (p.z =  \"\" )())).__parent__ in (1e+81.__parent__ = <><x><y/></x></>)) {/*for..in*/for(const __iterator__ in <><x><y/></x></>) {return <y><z/></y>; }; } }");
tryItOut("/*for..in*/for(__noSuchMethod__ = eval(\"(p={}, (p.z = prototype)())\", (({prop: __iterator__ }))) in (this.zzz.zzz)) {for(let y in []);let prop, __iterator__ }");
tryItOut("/*infloop*/while((yield <x/>))return *;");
tryItOut("L:if(yield prototype) /*infloop*/for([,]; @foo; __iterator__) {gc() } else {/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in window) {{} } }");
tryItOut("/*infloop*/do /*infloop*/for(__proto__; <><x><y/></x></>; 1e-81) {gc() } while((1e4 if (__parent__)));");
tryItOut("/*for..in*/for(var get = <><x><y/></x></> %= return; in <><\fx><y/></x></>) return <><x><y/></x></>;");
tryItOut("/*infloop*/for(<><x><y/></x></>; function (constructor, __proto__) { yield @foo } ; @foo) {let prototype; }");
tryItOut("throw <x/>;");
tryItOut("/*infloop*/while((__noSuchMethod__ = ((constructor if (<x><y/></x>)))).valueOf(\"number\")){M:do ( '' ); while((4.) && 0); }");
tryItOut("export prop\n");
tryItOut("if(\n((-0).@foo)) {/*for..in*/for(var __count__ in <x><y/></x>) {gc()/*infloop*/while(__noSuchMethod__)let __count__ = window; } } else  if ((new <><x><y/></x></>().prototype = window >> null.hasOwnProperty(\"__count__\")) *= prototype = __parent__) *\n<x><y/></x>; else break ; const __proto__;");
tryItOut("/*for..in*/M:for(prop in -3/0) {yield; }");
tryItOut("/*for..in*/M:for((__parent__.prop) in ((((__iterator__.__iterator__ =  /x/g .isPrototypeOf((prop.setter)).unwatch(\"__noSuchMethod__\")).watch).call)(({a1:1}).hasOwnProperty(\"__parent__\").hasOwnProperty(\"__noSuchMethod__\")))){return; }");
tryItOut("yield (<x/> @ false.__lookupGetter__(\"constructor\") >>= prototype = <><x><y/></x></>);");
tryItOut("/*infloop*/for(var __count__; __parent__( '' ); * > __proto__) { }");
tryItOut("if(<><x><y/></x></> >>>=true) { if (<x><y/></x>.__lookupGetter__(\"prototype\")) with({__count__: <><x><y/></x></>}){(function(y) { yield y; {});; yield y; }).applyconst __parent__ = null, __noSuchMethod__; }} else export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L://h\n for  each(var __proto__ in #1=[new <x><y/></x>(0x99, <><x><y/></x></>).watch(\"__proto__\", ((__proto__ = prop)).__defineSetter__) >> (yield  /x/g  += \tprototype)]) export *;");
tryItOut("/*for..in*/for(var prototype in <y><z/></y>) L: return;");
tryItOut("return ({ __count__: __count__ }) =  for each (__parent__ in ({__proto__: <x><y/></x>, __iterator__: <><x><y/></x></> })) if (this);");
tryItOut("if(033)  else  if () ; else {__noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("do yield <x/>; while(((__iterator__)[5.0000000000000000000000]) && 0)");
tryItOut("/*infloop*/M:do export prop; while(new (({}).__lookupGetter__)(<x><y/></x>.*,  '' .@foo));");
tryItOut("yield <><x><y/></x></>;\nlet (__iterator__) { var __iterator__; const prototype; }\n");
tryItOut("{if(#1#) { if (1.2e3 ? <><x><y/></x></> : 4.)  else /*infloop*/M:for(__noSuchMethod__; <x><y/></x>; *) ;}let(__noSuchMethod__ = this) { gc() }");
tryItOut("while((#0=<y><z/></y>) && 0){try { export __iterator__; } catch(__proto__ if (function(){prototype, __noSuchMethod__ = <x><y/></x>;})()) {  } catch(__proto__) { yield <x><y/></x>; } (-0)(__iterator__); }");
tryItOut("with({__count__:  /x/g .constructor}){continue ;continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in 1e-81) if(prop = constructor = (.2 & 3.141592653589793) for each (prop in <x><y/></x>), ({ __parent__: prop, __parent__: prop }) = window) yield; else  if ((eval(\"yield true;\", 1.2e3))) (new Function(\"export *;\"))");
tryItOut("try { let(__iterator__ = __count__ =  \"\" ) { prop.__noSuchMethod__ = __count__; } finally { with({}) { yield ({__count__: --<x/> }); }  } ");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("return eval(\"x::constructor.__parent__ getter= undefined\", new (__parent__)(__parent__));");
tryItOut("M:with({__count__: [z1]})return <y><z/></y>;");
tryItOut("/*infloop*/M:for(const __count__; (<x><y/></x>()); <><> </></>\f) {yield;export *; }");
tryItOut("M:if((uneval((!<><x><y/></x></>.__defineSetter__(\"prop\", eval) >>> __iterator__.__noSuchMethod__)))) { if (Date(.@foo, (#1# = .2).isPrototypeOf(constructor = __iterator__))) {throw StopIteration; }} else {export prop; }");
tryItOut("/*infloop*/for(let __count__; *::* / Date(false); ({constructor: __proto__.__noSuchMethod__ setter= function  prop () { return 033 }  %= ({a1:1})})) if((new (yield 4.))) { if ( /x/g ) with(__count__)gc()} else ");
tryItOut("do {/*for..in*/for(var [__parent__, [, ({ [] + false: __iterator__ })]] = [] == this in  /x/g .__defineSetter__(\"__count__\", Math.pow)) {with({__iterator__: prop})( /x/ ); }M:while((__iterator__ = 033) && 0){gc()throw <><x><y/></x></>; } } while((([15,16,17,18].map('haha'.split, <x><y/></x>.(<x><y/></x>).isPrototypeOf((null)[<y><z/></y>])))) && 0);");
tryItOut("/*for..in*/for(const __iterator__ in ((false)(null)))var constructor = 1e4, __iterator__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(var [, , , []] = function\t (__iterator__) { return @foo } (#0=({__iterator__: <><x><y/></x></>})); +*::*.prop; (yield window)) yield [,,];");
tryItOut("let(__iterator__ =  /x/ , __iterator__) { RangeError()");
tryItOut("L: {if(*) { if ( \"\" ) ; else gc}export __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(*::* = @foo; \f<y><z/></y> <<= <x/> - {;undefined; } -=  /x/g ; __iterator__|=(window)()) {if(null) {gc()yield <x><y/></x>; } }");
tryItOut("if((<><x><y/></x></> >>>=new (<x><y/></x>)(<x/>))) gc() else {eval }");
tryItOut("/*for..in*/L:for(let constructor = (((1 for (x in []))(({ function::__parent__: __iterator__ }) = (0.1 < prop)))()) in (<y><z/></y>.valueOf(\"number\").throw((new Iterator()).__lookupGetter__(\"__proto__\")))) {__parent__, __parent__ = [,,]; }");
tryItOut("/*for..in*/for(var __parent__ in ((({}).hasOwnProperty)(this.__defineGetter__(\"__noSuchMethod__\", new Function)()))){export __parent__/* }");
tryItOut("var prop = <><x><y/></x></>, prototype;\nyield;\n");
tryItOut("if(<y><z/></y>) {export __proto__; } else gc()\n");
tryItOut("/*for..in*/for(const prototype = [15,16,17,18].sort(Math.pow, <x/>) in <><x><y/></x></>) __iterator__");
tryItOut("while((__parent__.(constructor)) && 0)yield @foo;");
tryItOut("('fafafa'.replace(/a/g, /a/gi))");
tryItOut("/*infloop*/for(__parent__; (((uneval(@foo)).__defineGetter__(\"constructor\", 'haha'.split)).eval((((let (__noSuchMethod__ = <y><z/></y>) <y><z/></y>)).call(([[]].watch(\"__proto__\", function(q) { return q; })), [,,z1]))))\f; new RegExp(<y><z/></y>, new (*::*)(<y><z/></y>))) {/*for..in*/for(var [__count__, __count__] = !window , <><x><y/></x></>\t in <x><y/></x>) {export *; }/*infloop*/for(__iterator__;  /x/ ; [z1,,]) export prototype\r; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; new Function([__count__.prop getter= gc].some('haha'.split), <><zzz>({}).hasOwnProperty</zzz></>); ({})) let ((p={}, (p.z = 3/0)())<!--yy-->) { ; }");
tryItOut("if(<x><y/></x> * <y><z/></y>) /*for..in*//* nogeckoex bug 349964 */M: for  each(const function::__parent__ in __count__) const __iterator__, __noSuchMethod__ = *::*; else {throw *;yield; }\nfunction(id) { return id }; const  /x/g ;");
tryItOut("/*for..in*/for(constructor in ((function (__proto__, __parent__)prop|=prototype.prototype%=(3.141592653589793)())(<>(({}).hasOwnProperty).call((<><x><y/></x></>)[*::*], )</>))){if(({}).hasOwnProperty(*, @foo)) var __iterator__, __iterator__; else  if (this.zzz.zzz) {} else {yield;const constructor = <><x><y/>\t</x></>; }/*infloop*/for(prop; <x><y/></x>; *::*) __count__; }");
tryItOut("if((new (<y><z/></y>.__noSuchMethod__)((<x/>)(), 1e-81))) { if (__parent__ = (function ([y]) { })()) if(function(q) { return q; }) { if ((1e81['constructor']|=new String())) {gc() } else {*::*const prototype, __iterator__ =  '' ; }} else let (constructor) { for(let y in []); }}");
tryItOut("/*infloop*/M:for(var constructor; <x><y/></x>; <x><y/></x>) {throw <x><y/></x>; }");
tryItOut("/*for..in*/for(const __count__.constructor in (((({ __noSuchMethod__: ({ __noSuchMethod__: __count__, constructor: prototype }), __parent__: __iterator__ }) = (<><x><y/></x></>.throw(<x><y/></x>).hasOwnProperty(\"__proto__\"))).watch)(\tprototype = <x><y/></x> ? <><x><y/></x></> : new (/a/gi)(prototype, *)))){/*infloop*/M:for(constructor; ( ''  ? <><x><y/></x></> : function(id) { return id }); prop = __iterator__) const __noSuchMethod__ = <x><y/></x>, prop = this; }");
tryItOut("{ }");
tryItOut("/*infloop*/L:for(constructor; 1e+81;  /* Comment */<x/>.unwatch(\"prop\").__count__ , (([prop].some((1 for (x in [])))).@*)) ;\nwith(<x/>){gc() }\n");
tryItOut("L: {((-<x><y/></x>));return; }");
tryItOut("((({__noSuchMethod__: <><x><y/></x></>})));/*infloop*/for(this; [*].sort(3); function  (1e4['prop']) (__parent__) { return (<><x><y/></x></>)[<><x><y/></x></>] } ) {(<y><z/></y>); }");
tryItOut("while((<y><z/></y>) && 0)L:if(<x><y/></x>) {let __proto__, prop;const __count__; } else  if (<><x><y/></x></>) prototype");
tryItOut("if([15,16,17,18].some(function  constructor (__noSuchMethod__)__count__, 'fafafa'.replace(/a/g, function  set (__parent__) { yield this } ))) {return; }");
tryItOut("with({prop: (((__iterator__|=__count__))())})export __proto__;");
tryItOut("export *;let x::prototype, __iterator__; const __count__;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("{return;function(id) { return id };return <y><z/></y>; }");
tryItOut("return  \"\" ;");
tryItOut("if((this.__defineSetter__(\"__count__\", function(y) { yield y; -0;; yield y; }))) { if (constructor |  \"\" .__defineGetter__(\"__proto__\", <><x><y/></x></>)) {throw <x><y/></x>; } else {gc()yield <y><z/></y>; }}");
tryItOut("if(eval(\"throw <y><z/></y>;\", *::*)) arguments else {let prototype, constructor;yield; }");
tryItOut("if((yield window)) { if (<><x><y/></x></>.hasOwnProperty(\"__proto__\")) {{yield this; } } else const __iterator__, __noSuchMethod__ = null;}");
tryItOut("if((<x/> += var __proto__, prop = ({a1:1});)) throw #1=[#1#];");
tryItOut("/*infloop*/for(var __noSuchMethod__; *::*; eval(\"<><x><y/></x></>;\", <><x><y/></x></>)) {eval__parent__; }");
tryItOut("let(__parent__ = [1,2,3,4].map(prototype, <x><y/></x>), constructor) { return;");
tryItOut("do {export *; } while((true) && 0);");
tryItOut("/*infloop*/for(const prop; 1e-81; ({ get __noSuchMethod__ __iterator__ (eval(\"yield;\", ({__proto__: *, __noSuchMethod__ setter: (1 for (x in [])) })), __proto__) { return <y><z/></y>.isPrototypeOf((__parent__ = -1)) }  })) {function ([y]) { }export *; }");
tryItOut("do {@foo;continue ; } while((({constructor: prototype})) && 0);\nreturn <x/>;\n");
tryItOut("return <x><y/></x>.__lookupGetter__(\"constructor\");");
tryItOut("export *;({ prop: __proto__, prototype: __count__ }) = ( /x/ .propertyIsEnumerable(\"constructor\")), __parent__;");
tryItOut("let (__count__ = ([this])) { {export __count__;switch((eval)(<><x><y/></x></>)) { case <x/>.__lookupSetter__(\"__proto__\"): /*infloop*/M:for(const __count__; ({}); ((p={}, (p.z = 0/0)()))()) {let constructor, __noSuchMethod__ = <x/>; }break;  } } }");
tryItOut("if(1e4.__defineGetter__(\"constructor\", function  __count__ (constructor, prop) { return @foo } )) { if ([]) <><x><y/></x></>} else {{} }");
tryItOut("L:if((({__iterator__ setter: ((yield __count__.__noSuchMethod__ getter= __proto__ = ({}))).__defineSetter__ }))) { if ((p={}, (p.z = undefined)())) {with({constructor: <><x><y/></x></>})<x><y/></x>;continue \n } else {set;; }}");
tryItOut("return\n");
tryItOut("M:do \fM:if((new !<y><z/></y>)) { if (prototype) function::constructor: <x><y/></x>} else if((<x/>.valueOf(\"number\"))) { if ([15,16,17,18].filter(true, <x><y/></x>)) {return true;let __parent__ = -3/0, constructor; }} else ; while((033 === @foo) && 0);");
tryItOut("with(this)return;");
tryItOut("/*infloop*/while(this >= (<><x><y/></x></> + <x><y/></x>)){ }");
tryItOut("with(prototype)return [,,];");
tryItOut("with({}) { return false; } ");
tryItOut("return __iterator__ = __count__ ?  /x/  : __iterator__;");
tryItOut("/*infloop*/for(; new <><x><y/></x></>(); this.__defineSetter__(\"__count__\", (this).__defineSetter__)) return __parent__;");
tryItOut("/*infloop*/for(var constructor; prototype; null) {return; }");
tryItOut("L: {/*for..in*/for(const __proto__ = (constructor = constructor) in function(id) { return id }) const __noSuchMethod__, __count__;if((<x/>)[ set prop prop (constructor)__count__ = *.__defineGetter__(\"prop\", (new Function(\"const constructor = <><x><y/></x></>, __noSuchMethod__;\")))]) {{{} } } else {;yield; } }");
tryItOut("if(<x/>) { if ((<{prototype}>yyy</{prototype}>.(<x><y/></x>)) + //h\n(new RangeError()).unwatch(\"prototype\")) {return; } else {/*infloop*/for(__count__; *; null) {<x><y/><\t/x>return <x/>; } }}");
tryItOut("export *;");
tryItOut("/*infloop*/L:for(prop; new (( /x/ )())(); (__proto__-=(((Math.pow).call)()))) {return (1 for (x in []))([z1]); }");
tryItOut("M:do continue ; while(((yield prop = <><x><y/></x></>)) && 0);");
tryItOut("let(__noSuchMethod__, <x><y/></x> = undefined) ((function(){{}})());");
tryItOut("{Function }");
tryItOut("/*infloop*/do {throw StopIteration; } while([*].filter(__proto__));");
tryItOut("__count__, __proto__;");
tryItOut("{const prototype, __iterator__;{{}yield [1,,]; } }");
tryItOut("L:switch([4. if (<><x><y/></x></> ^= *)]) { default: this.__defineGetter__(\"__count__\", (<x><y/></x>).watch)['__parent__'] = __iterator__;break; break; case (yield 0): /*for..in*/M:for(var __proto__ = (__parent__.throw(<x><y/></x>) .@x:: __parent__.valueOf(\"number\")) in #1#) /*infloop*/for(__proto__ = <x><y/></x>; <x><y/></x>; 1e4) {export __count__; }case 1: export *;\n(<x><y/></x>);\nbreak; case 9: break; case (({ prototype: [, , , __proto__, constructor], __iterator__: \f({ yield: __parent__ }) }) = new <><x><y/></x></>([,])): with({}) let __noSuchMethod__;break; case 3: <x><y/></x>;break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(const true.prop in ((function () { yield; } )(eval(\"L:with(<><x><y/></x></>){let __parent__, constructor = <><x><y/></x></>; }\", <><x><y/></x></>) = <x/>))){const __iterator__ = function(id) { return id }, __iterator__ = window; }");
tryItOut("return;");
tryItOut("\n/*for..in*//* nogeckoex bug 349964 */ for  each(set in <y><z/></y>) return;\n");
tryItOut("with(undefined) \"\" ;");
tryItOut("if(eval(\"(({a1:1}));\", __parent__).@*) yield; else  if (prop) while(((function ([y]) { })()) && 0)(<><x><y/></x></>); else gc()");
tryItOut("L:if(constructor) {{}throw <><x><y/></x></>; } else  if (__iterator__) {let prop = -3/0, prop =  /x/ ; } else {throw <x><y/></x>; }");
tryItOut("{ }");
tryItOut("/*infloop*/do gc() while(({__noSuchMethod__: <><bbb xmlns=\"<x><y/></x>\"> </bbb></>}));");
tryItOut("let (__noSuchMethod__ = __count__ = <><x><y/></x></>) { gc() }");
tryItOut("__noSuchMethod__ = this, __parent__;\nfunction  __noSuchMethod__ () { yield undefined } \n{/*for..in*/L:for(let __noSuchMethod__.__proto__ in (function ([y]) { })()) return; }");
tryItOut("/*infloop*/for(__iterator__; <x><y/></x>; window) ({}).__lookupGetter__");
tryItOut("/*infloop*/L:while(*)/*infloop*/L:while(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)");
tryItOut("L: {do /*\n*/{throw 0;yield; } while((-window) && 0); }");
tryItOut("gc()");
tryItOut("let (prop, constructor = [[1]]) { const constructor; }");
tryItOut("while((prop) && 0)(<x><y/></x>);");
tryItOut("switch((constructor = @foo) -= [* for each (__iterator__ in prototype)]) { case this: break; gc()break;  }");
tryItOut("{let (constructor =  /x/g , __count__) { let __iterator__; }{{}let __parent__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype = __parent__.__proto__ in [[]]) M:do {(({a2:z2}));gc() } while((__proto__) && 0);");
tryItOut("{/*infloop*/do {({}).hasOwnPropertybreak ; } while(*::*);with({}) throw default: yield <y><z/></y>;case  /x/ : case 6: break; case __noSuchMethod__: ( '' );break; ; }");
tryItOut("/*infloop*/for(var __proto__ = ((yield __proto__ = [,,z1] if (<><x><y/></x></>))); (-1).*; (<><x><y/></x></>).watch) {yield (this.zzz.zzz); }");
tryItOut("{export *;{} }");
tryItOut("/*for..in*/for(const __count__ in (()((__noSuchMethod__ = false())))){L: throw @foo;/*\n*/ }");
tryItOut("/*infloop*/for(var __parent__; (constructor = -3/0); (__noSuchMethod__\t.__iterator__ >= <x/>[try { constructor = <y><z/></y>, __noSuchMethod__; } catch(__proto__ if <><x><y/></x></>) { export *; } catch(constructor if (function(){export *;})()) { true; } catch(let) { continue L; } finally { const prototype = constructor, __count__; } ] = [z1] @ <x/>)) {{}__proto__, __iterator__; }");
tryItOut("__count__ = __count__;");
tryItOut("/*infloop*/for(__noSuchMethod__ = function  prototype () { yield 0.1 } (new (null)( /x/ ), typeof true); __noSuchMethod__ = ( /x/g .constructor = window) for (prototype in *::*) for (__noSuchMethod__ in window) for (__iterator__ in *::*); this.__defineSetter__(\"yield\", (1 for (x in [])))) {do {break M; } while(( /x/ ) && 0); }");
tryItOut("for(let y in [5,6,7,8]) throw __count__;");
tryItOut("return;\nreturn <x><y/></x>;\n");
tryItOut("if([__noSuchMethod__.__lookupSetter__(\"__iterator__\")]) break ; else  if (new (this.zzz.zzz)(window)) __iterator__;");
tryItOut("/*for..in*/for(const __count__ in ((3.141592653589793)(@foo))){}");
tryItOut("__parent__");
tryItOut("let (constructor = ((uneval(__count__))), __parent__) { switch(null) { default: /*infloop*/for(arguments; <><x><y/></x></>; __proto__) let prototype; } }");
tryItOut("if(*.yoyo(constructor).watch(\"__noSuchMethod__\", function(y) { yield y; /*infloop*/while(this.zzz.zzz)let prop, getter;; yield y; })) {} else {/*for..in*/for([__iterator__, __iterator__] = <y><z/></y> for (__parent__ in 1e-81).__lookupGetter__(\"this\") in [,]) {yield  '' ; } }");
tryItOut("L:do {export __parent__;export *; } while((__iterator__) && 0)\t;");
tryItOut("yield __iterator__;");
tryItOut("return -1;");
tryItOut("M:if((<y><z/></y>.yoyo(-0))) { if (this.zzz.zzz) yield  /x/g ;} else export __iterator__;");
tryItOut("if(('fafafa'.replace(/a/g, ([1,2,3,4].slice).call))) { if (true.__lookupGetter__(\"prop\")) {{}gc() } else export *;}");
tryItOut("return  /x/g  .@ prop < (prototype = constructor);");
tryItOut("if(let (prop) false) {return;let prototype = false, __parent__ =  \"\" ; } else {{} }");
tryItOut("{var __noSuchMethod__ = <><x><y/></x></>;; }");
tryItOut("/*for..in*/for(prototype = this - <><x><y/></x></>.yoyo(<y><z/></y>) in [,,].yoyo(prop)) {<x/>;/*for..in*/L:for(const __count__ =  /x/  in false()) return <x/>; }");
