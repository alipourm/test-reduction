tryItOut("/*infloop*/for(this.__defineGetter__(\"prototype\", (function ()[z1,,]).apply); (this & __iterator__.prop); (__iterator__ = new (new Function)(<><x><y/></x></>))) {yield function(id) { return id };gc() }");
tryItOut("with({constructor: <y><z/></y>.prototype.constructor})/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in true) const __count__ = *;");
tryItOut("let(__iterator__) { ");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in undefined) let __iterator__;");
tryItOut("throw prop");
tryItOut("with({}) yield eval(\"var \\r<x><y/></x> = [,,];\", window);");
tryItOut(";");
tryItOut("export __iterator__; const constructor;");
tryItOut("if(true) { if (<x><y/></x>) {Math.sinfunction (__noSuchMethod__, constructor) { return <x><y/></x> }  }} else ");
tryItOut("/*for..in*/for(const __parent__ = (prototype = ({ __count__: throw undefined; })) in prototype%=(--arguments)) with(function(id) { return id }){\treturn <x><y/></x>;; }");
tryItOut("try { with({}) { for(let y in [5,6,7,8]) throw __iterator__; } \t } catch(yield if (__count__ = [[, , , [__proto__, prop, constructor, constructor, function::__iterator__], [prop, each, , prototype]], [__proto__, [__iterator__, ], ]] = ([((p={}, (p.z = __proto__)()))].sort((@foo).__defineSetter__)))) { try { for(let y in []); } catch(__iterator__)\t { this.zzz.zzz; }  } finally { with({}) { with({}) { try { throw StopIteration; } catch(__proto__) { let(prototype, __noSuchMethod__ = -3/0) { return; } finally { let(constructor) ((function(){(prototype);})()); }  }  }  } ");
tryItOut("L:if((true)[ '' ]) { } else return <><x><y/></x></>;");
tryItOut("let(prototype = ((#1=window).hasOwnProperty(\"__proto__\"))) {  \"\" ;");
tryItOut(" { ((Math.sin).call).call }  const constructor;");
tryItOut("/*infloop*/for(__iterator__; prototype = (<x><y/></x> if (null)); #1=[#1#].throw(<y><z/></y>).@*) yield new Boolean();");
tryItOut("{{{\n;throw  /x/ ; } }/*infloop*/for(let ({ prototype: __iterator__, constructor: ({ constructor: __noSuchMethod__ }) }) = (constructor = __noSuchMethod__).__lookupGetter__(\"constructor\"); ({__noSuchMethod__: new Date(@foo), prototype: null ? constructor : <y><z/></y> }); <x/>) {export *; } }");
tryItOut("/*infloop*/do {export __parent__; } while( /x/ )");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__parent__) in ([15,16,17,18].map([1,2,3,4].slice, 1e-81)).isPrototypeOf( /x/g .propertyIsEnumerable(\"__parent__\"))) prototype");
tryItOut("while(([11,12,13,14].some) && 0){let __proto__ = 0/0;continue ; }");
tryItOut("/*infloop*/for(__iterator__; (!(prop.__parent__ = <><x><y/></x></>)); arguments) yield false;");
tryItOut("__iterator__;(#1#);");
tryItOut("/*for..in*/for(var __count__ in (((this).__defineSetter__)(__iterator__|= '' .__defineGetter__(\"prop\", function  constructor () { return; } )))){{}\nexport *; }");
tryItOut("return;");
tryItOut("/*for..in*/for(__iterator__ in ((this.hasOwnProperty(\"__iterator__\"))(<y><z/></y>.propertyIsEnumerable(\"__iterator__\") ?  '' \n : prototype = null))){(@foo); }");
tryItOut("/*infloop*/while((<x><y/></x>.(<x><y/></x>))){with({}) { __parent__ = constructor; }  }");
tryItOut("/*for..in*/for(var __count__ in <><x><y/></x></>) yield;");
tryItOut("L:\fdo prototype = null; while((({__count__: <x><y/></x> })) && 0);");
tryItOut("with(<y><z/></y>( /x/g , true))/*infloop*/L:for(let prototype; @foo; window) return ({a2:z2});");
tryItOut("/*for..in*/M:for(let [__noSuchMethod__, __noSuchMethod__] = (this.__defineGetter__(\"__iterator__\", function(q) { return q; }))\n in <x><y/></x>) {export __noSuchMethod__; }");
tryItOut("gc() const set;");
tryItOut("M:if(((@foo)[constructor])) {L:if(prop) ; else  if (@foo) <x><y/></x> else {yield <x><y/></x>;/a/gi }window; }");
tryItOut("let (prop = [,,z1], __iterator__ = #1=[#1#]) { var \f__proto__; }");
tryItOut("with({__iterator__: ([-[[]]])})do ; while((__iterator__ = undefined) && 0);");
tryItOut("/*for..in*/M:for(const constructor in <x><y/></x>) if(<x/>) { if (true) return __noSuchMethod__;} else export prop;");
tryItOut("if(new (#1#)()) { if (this.zzz.zzz) let (__parent__, prop) { {} } else break \n}");
tryItOut("/a/gi/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in []) throw <><x><y/></x></>;switch(new new Function(<y><z/></y>.propertyIsEnumerable(\"__count__\").__defineSetter__(\"__noSuchMethod__\", /a/gi), ([11,12,13,14].map))) { case *::*: case [ '' ]: /*infloop*/L:for(const prototype = typeof yield  /x/ ; (undefined >>= <x><y/></x>\f); (.*)) (@foo);break; case 5: case this.__defineSetter__(\"prototype\", ({}).hasOwnProperty): break; if(<x><y/></x>) export *; else return __count__;default: break;  }");
tryItOut("if(<x><y/></x>) { if ( '' ) throw null; else var __count__, constructor;}");
tryItOut("/*for..in*/for(let __parent__ in window) {export prop; }\n");
tryItOut("L:if(__proto__ = new RegExp(__noSuchMethod__, *::*).__defineGetter__(\"constructor\", (1 for (x in [])))) { if (4.) {if([<x><y/></x>].some(Math.pow)) { if ((uneval(*))) let __noSuchMethod__ = this, prototype = 0/0; else {return; }} } else {return; }}");
tryItOut("[1,2,3,4].map\nyield undefined;");
tryItOut("/*infloop*/for(const [, , , ] = window++--; let \f(__noSuchMethod__) #0=__proto__; new (1 for (x in []))((({ __parent__: prototype, prop: __noSuchMethod__ }) = __proto__))) {/*infloop*/do {{prop; } } while(-3/0 ? undefined : 1.2e3);let (prototype = true, __iterator__ = <x><y/></x>) { if(<x/>) { if (window) throw 1e4; else } }\nexport *;\n }");
tryItOut("/*infloop*/do {export constructor;<x><y/></x>; } while(__iterator__ = new (1e4)(<><x><y/></x></>));");
tryItOut("/*infloop*/while(new ((<x><y/></x> >=  '' ) || 'fafafa'.replace(/a/g, __parent__))()){for(let y in []); }");
tryItOut("return;");
tryItOut("L:do  while((<><x><y/></x></>) && 0);");
tryItOut("yield;\ntry { ; } catch(__noSuchMethod__ if (function(){Function})()) { gc() } catch(__parent__) { yield; } \n");
tryItOut("while((__count__: (<><x><y/></x></>.__lookupGetter__(\"constructor\"))) && 0)yield <><x><y/></x></>;");
tryItOut("switch(\ntrue) { default: break;  }");
tryItOut("L: {export *;gc() }");
tryItOut("/*for..in*/for(var prototype in ((__parent__ = (function ([y]) { })()) for (prop(0/0) in <><x><y/></x></>) < (__proto__.__proto__ getter= 'haha'.split))) L: {throw <x/>;__noSuchMethod__.prop = true }");
tryItOut("yield *\nreturn;");
tryItOut("if((this .@ <x><y/prototype: <x><y/></x> >>> <x><y/></x> ></x> == prototype)) yield; else  if (({constructor: (__proto__ if (*)), __parent__ getter: function (__iterator__, __count__) { return <><x><y/></x></>++ }  })) {const \tprop = window, __iterator__; }");
tryItOut("/*for..in*/L:for([__count__, prototype] = (uneval((<x/> = {}))) in __proto__ = .2) continue ;");
tryItOut("<x><y/></x>let prop = this, constructor =  \"\" ;");
tryItOut("if(((<><x><y/></x></>).watch(<><x><y/></x></>).unwatch(\"constructor\")).watch(\"prop\", function  prop (__iterator__, prototype) { return  /* Comment */prop } )) { if (this.__defineSetter__(\"__count__\", (p={}, (p.z = typeof <x><y/></x>)()))\t) while(( /x/g ) && 0); else {}}");
tryItOut("/*for..in*/for(let __noSuchMethod__ in 'fafafa'.replace(/a/g, (new Function(\"{}\")))((yield <x/>))) if(.2) {((0.1).__defineSetter__).apply } else  if (constructor) gc()");
tryItOut("<x><y/></x>");
tryItOut("var prop = __iterator__, prop =  /x/g ;\nif(<><x><y/></x></>) {export prop; } else (#1=[#1#]);\n");
tryItOut("M:if( '' ) { if (@foo) var prop;} else {(*::*);yield; }");
tryItOut("switch(\n<y><z/></y>) { default: throw  /x/g ;break; break; M:if(window) { if (*::*) throw prop;} else {gc() }break;  }");
tryItOut("if((constructor <= 1e4)) throw <><x><y/></x></>;");
tryItOut("with(#1=[#1#]){export __parent__;var __proto__; }");
tryItOut("/*infloop*/do function(y) { yield y; __parent__, prop = #1#;; yield y; } while((__parent__ = <>case 5: {}break; </>) @  /x/g );");
tryItOut("/*for..in*/for(__count__ in ((function (__parent__, __iterator__) { return * } )(__proto__ = *.eval(prototype).watch(\"constructor\", /a/gi)))){;let (prop = @foo, constructor) { continue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in <><x><y/></x></>) return window;");
tryItOut("if(new Function((033)())) {export *;return; } else  if ('fafafa'.replace(/a/g, new Function)) let prop;");
tryItOut("/*infloop*/M:do gc() while(\n);");
tryItOut("with(*::*);\nprototype = __iterator__;\n");
tryItOut("if(__iterator__ = 4. ? (prop = constructor) : (x::constructor =  '' , __parent__)) L:\nif(<y><z/></y>.@foo) { if (<y><z/></y>.unwatch(\"prop\")) {({ prop: ({ constructor: ({ prototype: prop }), __count__: ({ __iterator__: __proto__ }) }) })break ; }} else {let __proto__, __proto__;yield __noSuchMethod__; }");
tryItOut("yield 0.1;");
tryItOut("continue M;");
tryItOut("L:while((<bbb xmlns:ccc=\"#1=({__noSuchMethod__: [z1] &=  /x/ })\"><ccc:eee></ccc:eee></bbb>\r) && 0){/*infloop*/do {return #1=[#1#];const <x><y/></x>, <y><z/></y>; } while( \"\" );yield; }");
tryItOut("/*for..in*/for(const constructor =  ''  in @foo) {gc() }");
tryItOut("L:do /*infloop*/for((uneval(*)); constructor = *::*; [,] & window - String(<y><z/></y>)) {} while((@foo.isPrototypeOf(*)) && 0);");
tryItOut("/*for..in*/Z");
tryItOut("__proto__; const constructor;");
tryItOut("/*for..in*/for([constructor, constructor] = [15,16,17,18].some(undefined, <><x><y/></x></>) in window) {Math.sin } const constructor;");
tryItOut("gc()\n;\n");
tryItOut("if(({__proto__: ((<x/>).watch)(1.2e3), __proto__: [__noSuchMethod__] })) { if ((yield *) for ([] in __iterator__) for (prototype in <x><y/></x>) if (throw [];).__lookupGetter__(\"__parent__\")) {continue L;/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in undefined) {<y><z/></y>;return; } }} else {if((,)[*::*]) yield  /x/ ; else  if (*::*) {return;return; } else gc() }");
tryItOut("yield;");
tryItOut("switch(this.__defineSetter__(\"prop\", <employee id=\"1\"><name>Joe</name><age>20</age></employee>.([*].some(/a/gi)))) { default: /*for..in*/for(var [__noSuchMethod__, __iterator__] = (#1#.__defineGetter__(\"__count__\",  '' ).@*) in get |= *::*) {\n }break;  }");
tryItOut("yield;return;");
tryItOut("L: {export *;continue M; }");
tryItOut("/*for..in*/for(let prototype in @foo) *::*;");
tryItOut("{function(y) { yield y; yield;; yield y; }gc() }");
tryItOut("if(@foo.unwatch(\"prototype\"))  else {do {(<x/>);throw (function ([y]) { })(); } while(((__iterator__ = ([ ''  if ()]))) && 0); }");
tryItOut("/*infloop*/do {(<y><z/></y>);/*for..in*/M:for(var constructor = .2 in #1=[#1#]) {{} }{} } while(((__count__ = (-0)) += [11,12,13,14].filter.eval(constructor.__parent__)));");
tryItOut("/*infloop*/for(let <><>#\f1=let (__count__ = <x/>, prop) ([1e4 for each (__iterator__ in true)])</></>.__noSuchMethod__ = new (({}).__lookupGetter__)(); [({__proto__:  /x/ , {return;yield  /x/ ; } setter: ({}).hasOwnProperty }) for each (__count__ in 1e+81) for each (__iterator__ in  /x/g )]; ((new ( /* Comment */null)(prototype)++) <= (*::*))) with(<y><z/></y> /= yield true)export __parent__;");
tryItOut("/*infloop*/M:for(__noSuchMethod__; new (/a/gi)(({a2:z2}), <x/>); (#1=[#1#]).__defineSetter__) {Functionreturn __iterator__; }");
tryItOut("if(3 >>= <y><z/></y>) { if (({ __iterator__: prototype }) = <x/> .@*:: return  /* Comment */ \"\" ;.yoyo(<x><y/></x>)) {<x/>;const __iterator__, __parent__; } else {prop; }}");
tryItOut("with({__iterator__: *}){return; }");
tryItOut("L: let (constructor = undefined) { gc }");
tryItOut("for(let y in [5,6,7,8]) let(__noSuchMethod__, ({ constructor: __proto__, __count__: __parent__ })) ((function(){for(let y in []);})());");
tryItOut("do  while((new <x><y/></x>()) && 0);");
tryItOut("/*infloop*/for(-1; *(); (function ([y]) { })() <<= <x><y/></x>) {export __parent__; }");
tryItOut("/*infloop*/for(const __iterator__ = *; *; this) ( \"\" );");
tryItOut("/*for..in*/L:for(const __iterator__ in 1e+81) {yield  \"\" ; }");
tryItOut("if((Function)) {/*for..in*/L:for(function::prototype in this) {__parent__ = <x><y/></x>;export __noSuchMethod__; } } else  if ([prop, , __parent__, __parent__] =  /x/g .__lookupSetter__(\"prototype\")) \n else ");
tryItOut("switch(<><>yyy</></>)\t { case 9: break; break L;break;  }");
tryItOut("gc()");
tryItOut("/*infloop*/for(const default: yield null;; false.isPrototypeOf(true);  \"\" .eval(<><x><y/></x></>)) return;\nL:do return <x><y/></x>; while((undefined) && 0);\n");
tryItOut("/*for..in*/for(prop in ((function () { return *::* } )(<y><z/></y>.@foo)))function::constructor");
tryItOut("/*infloop*/while(({constructor: prop, ({ __noSuchMethod__: __parent__, __noSuchMethod__: __parent__ }) }))window;\nyield;\n");
tryItOut("/*infloop*/M:for(const __proto__; (p={}, (p.z = this.valueOf(\"number\")++)()); <><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\")) /a/gi");
tryItOut("if([15,16,17,18].map(gc, <><x><y/></x></>)) {{const prototype;gc() }<y><z/></y>; } else {}\n");
tryItOut("/*infloop*/L:for(( /* Comment */this); (); (__iterator__ = __parent__.constructor = <><x>\n<y/></x></>)) {yield window; }");
tryItOut("export __parent__;\ngc()\n");
tryItOut("/*infloop*/M:for(let __proto__ = ((new Function)() for (__noSuchMethod__ in [*::*].filter(function  __iterator__ (__noSuchMethod__) { ( \"\" ); } )) if (1.3)); ; <><zzz>({ set __iterator__ prototype ([__noSuchMethod__], __count__) { {} } , prototype: this.zzz.zzz })</zzz></>) {let constructor, __iterator__ = __parent__;/*infloop*/M:do return; while((yield <x><y/></x>)); }");
tryItOut("/*infloop*/for(var ({ (__iterator__ = <x><y/></x>.@foo): ({ __count__: ({ prop: ({ prototype: __noSuchMethod__ }) }) }), prop: ({ __parent__: ({ prototype: [, ], __parent__: [, , ] }) }) }) = __count__ = @foo; eval(\"export prototype;\", __parent__); this.__defineGetter__(\"__parent__\", Function)) {export *;if(<x><y/></x> *= (-0)) return 3.141592653589793; else {;yield; } }");
tryItOut("var  '' \n");
tryItOut("if([1e+81].some(eval)) { if (eval(\"if(__proto__) undefined; else  if (<x><y/></x>) {break ;(false); }\",  /x/g .constructor = __iterator__%=/*\n*/#1#)) {prop;gc() } else while(([] ? *::* : undefined) && 0){yield;return; }}");
tryItOut("yield;");
tryItOut("/*infloop*/for(({ constructor: [__iterator__, __parent__, __proto__, ] }) = typeof __iterator__; false; *::* .@x:: __proto__.(({a2:z2}))) {/*infloop*/for(<x/>; <><x><y/></x></>; ({})) var delete =  /x/g , __parent__\n }");
tryItOut("/*infloop*/L:for(let constructor; <><x><y/></x></>; undefined) {return;export *; }");
tryItOut("if((this.__defineSetter__(\"__parent__\", function  prototype () { return [3].sort(<y><z/></y>)++ >> __noSuchMethod__ = @foo } ))) {export prototype;return ({a2:z2});\n{}\n }");
tryItOut("L:if(<><x><y/></x></>) { if (this) {(033); }} else yield [,,];");
tryItOut("/*infloop*/do {L: {}return this } while(*::*);");
tryItOut("/*for..in*/for([prop, __iterator__] = constructor.__defineGetter__(\"__count__\", true) .@ (this.zzz.zzz) in <x/>) {(0.1);if(constructor) gc() else  if (<><x><y/></x></>) (this); else gc() }");
tryItOut("return; const prop;");
tryItOut("(0/0);");
tryItOut("/*infloop*/L:for(var ({ constructor: ({ constructor: ({ __noSuchMethod__: __proto__, __proto__: constructor }) }) }) = constructor = #1=false; prototype.__count__ = constructor = <><x><y/></x></>; (({__count__ getter: <><x><y/></x></> })).__defineGetter__(\"__count__\", 'haha'.split)) yield;");
tryItOut("L:if((5.0000000000000000000000 < window.__lookupSetter__(\"__noSuchMethod__\"))) {if(1e-81) continue M; else  if ( \"\" ) yield; else __proto__export *; } else  if (({ __parent__: [033['prototype'], ], __proto__: ({ yield: [], __iterator__: __parent__ }) }) = this.__defineSetter__(\"__count__\", -0)) /*for..in*/for(const (<x><y/></x>)(*) in ((({}).__lookupGetter__)(true >>>=<y><z/></y>)))/*infloop*/for(__count__ = __noSuchMethod__; true; *) {( '' ); } else {gc() }");
tryItOut("for(let y in []);");
tryItOut("if((-1.propertyIsEnumerable(\"__parent__\"))) /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <x/>) {gc() } else return;");
tryItOut("if(__parent__ = (prototype.constructor)) while(('fafafa'.replace(/a/g, Math.sin)) && 0)__iterator__ = [1];");
tryItOut("\n/*for..in*/for(const [__proto__, delete] = + /x/g  ? <><x><y/></\tx></> : __proto__\t in <x><y/></x>) {yield true; }");
tryItOut("/*for..in*/L:for(__iterator__ = (([({a2:z2}) for each (constructor in <x><y/></x>\r)]).__defineSetter__(\"__noSuchMethod__\", (/a/gi).call//h\n)) in eval(\"export *;\", <><x><y/></x></>)) export __count__\n/*for..in*/for([constructor, prototype] = <><x><y/></x></> in constructor) yield;");
tryItOut("if(prototype = (function ([y]) { })()) return <><x><y/></x></>; else  if ((window.propertyIsEnumerable(\"__noSuchMethod__\"))) {(@foo); }continue L;");
tryItOut("const prop, constructor;");
tryItOut("(window);");
tryItOut("/*infloop*/for( /x/g ; <x><y/></x>; true) yield");
tryItOut("let (__proto__) { ; }");
tryItOut("yield (prop = __noSuchMethod__) :: (window.valueOf(\"number\"));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in ((<><x><y/></x></>).call(<y><z/></y>, #1=[#1#], undefined))) if(*::*[<x><y/></x>]) {[1]; } else { }");
tryItOut("for(let y in [5,6,7,8]) return ([15,16,17,18].sort(function (x::__parent__) { yield; } , <employee id=\"1\"><name>Joe</name><age>20</age></employee>)).__defineGetter__(\"__iterator__\", ([(new RangeError(0x99, this))]) ? <x><y/></x> &= <><x><y/></x></> : __iterator__.constructor setter= (<><x><y/></x></>).apply);");
tryItOut("L:if([,,]) {\nwhile((<x><y/></x>) && 0)null;1let {throw <x/>;yield __proto__; }, __count__ = false; }");
tryItOut("/*for..in*/for(var prop = prop = ({}) in <><x><y/></x></>) {return;continue M\r; }");
tryItOut("/*for..in*/for(let [__iterator__, __noSuchMethod__] = this.__defineSetter__(\"__parent__\", function(q) { return q; }) in  \"\" .constructor) ");
tryItOut("throw <\t><x><y/></x></>; const __noSuchMethod__;");
tryItOut("for(let y in []);");
tryItOut("L:switch(__count__ = constructor) { case 5: yield;break;  }");
tryItOut("for(let y in []);");
tryItOut("yield;");
tryItOut("let constructor = window, __iterator__ = <y><z/></y>;");
tryItOut("/*for..in*/for(let prop.__parent__ in (((new Function(\"var __count__ =  '' , __proto__;\")))([z1])))continue M; const constructor;");
tryItOut("L: export __iterator__\nconst __iterator__ = constructor, constructor = this;\n(this);\n");
tryItOut("/*infloop*/for(const ({ x::constructor: prototype }) = ((yield __count__)); <x><y/></x>.(prop); [15,16,17,18].sort((function (prototype, __proto__) { yield *::* } ).call, this)) {}let __parent__ = constructor, __parent__; } const __proto__;{gc() }");
tryItOut("if(<x><y/></x>( '' )) break L;");
tryItOut("{export *; }");
tryItOut("/*infloop*/M:for(let __proto__; (<><x><y/></x></>.throw(__iterator__)) >>>=0x99.__defineSetter__(\"__count__\", [1,2,3,4].slice); __iterator__(<x><y/></x>)%=<y><z/></y> instanceof @foo) __proto__ = <x/>;");
tryItOut("if('fafafa'.replace(/a/g, #3={a:#3#})) { if ((new Function).call(undefined, <x><y/></x>)) {yield __parent__; }} else gc()");
tryItOut("/*infloop*/M:do (window); while(<xxx {__count__}={{( \"\" );yield <x><y/></x>; }} />);");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/for(var __proto__ in [z1]) yield;");
tryItOut("");
tryItOut("{var prop; }");
tryItOut("with({constructor: (<y><z/></y>.__parent__.valueOf(\"number\"))})/*infloop*/M:for(let __iterator__; .2; <><x><y/></x></>) {yield null;yield  /x/g ; }");
tryItOut("/*infloop*/for(let __count__; __parent__ = ({ __noSuchMethod__: constructor }) = (__count__ = <y><z/></y>); (yield new (([prop].sort(Math.pow)))((false.__iterator__ = window), <><x><y/></x></>))) {break ; }");
tryItOut("let([, ] = (\f{ set __parent__(__count__) { return (uneval(*::*)) }  })) { yield 3.141592653589793;");
tryItOut("var __count__, prop = <><x><y/></x></>;return\nconst constructor;");
tryItOut("/*infloop*/do {gc() } while(({__proto__: undefined }));");
tryItOut("/*infloop*/do let __iterator__ =  /x/g ; while(@foo);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\fL: for  each(__noSuchMethod__ in this) {throw 0.1;export *; }");
tryItOut("let (__iterator__, __count__ = *::*) { switch((__proto__.(-3/0 / #1=[#1#]))) { default: /*infloop*/do let prototype, __count__; while((window.propertyIsEnumerable(\"prop\")));export *; } }");
tryItOut("export constructor; const __noSuchMethod__;");
tryItOut("L: \fif(__proto__.( /x/ )) { if (<x/> if (__noSuchMethod__)) { } else {return <x/>;export *; }}\n");
tryItOut("if(arguments(*) if ( /x/g ).watch(\"__proto__\", /a/gi)) ( /x/ ); else  if (* > <x><y/></x>) {{yield; }yield; }");
tryItOut("(<><x><y/></x></>);yield;");
tryItOut("__noSuchMethod__:  /x/g ");
tryItOut("{}");
tryItOut("/*infloop*/M:for(var ({ __parent__: __count__ }) =  /* Comment */prop++; [*]; (RegExp())) yield  \"\" ;");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = @foo in  /x/ ) {var prototype = <x/>, __iterator__ = 0x99; }");
tryItOut("__noSuchMethod__ = <><x><y/></x></>, prototype;");
tryItOut("/*infloop*/while(function::__iterator__.(constructor) / (let (__iterator__, case  \"\" : yield;break; break; throw <x>\t<y/></x>;case true: nullbreak; ) [,,])){const <x><y/></x>; }\n\flet constructor;\n");
tryItOut("(<y><z/></y>);\n{throw <y><z/></y>;return __count__; }\n");
tryItOut("/*for..in*/for(var constructor = __proto__ in 1e+81.valueOf(\"number\")) ;");
tryItOut("{yield;export *; }");
tryItOut("{yield <xxx>{__proto__}</xxx>; }");
tryItOut("if(constructor) { if ((let (({ prototype: [,  for (constructor in <x><y/></x>) for (__parent__ in *::*), ({ function::__proto__: ({ __parent__: prototype, __count__: __iterator__ }), __noSuchMethod__: [, [__noSuchMethod__, , , __iterator__], [, prototype, ]] }), [], [({ prototype: ({ __parent__: constructor getter: case 4: , __parent__: prop }) }), ]], prototype: ({ __proto__: [] }) }), __noSuchMethod__) [[1]])) {yield;null; const __iterator__; }} else {export constructor;; }");
tryItOut("L: yield;");
tryItOut("L:if(window.unwatch(\"prototype\")) { if ((constructor = __noSuchMethod__)) {break M; }} else {(({a1:1}));gc() }");
tryItOut("if(this.__defineGetter__(\"prototype\", new Function) ? Boolean() : (((1e+81.__defineGetter__(\"__count__\", (new Function(\"\\tbreak ;\")))))(Math.pow)+=(prototype++))) throw <><x><y/></x></>");
tryItOut("if(this) { if (<><x><y/></x></>) yield <y><z/></y>;} else {export prop; }");
tryItOut("L: let constructor\n");
tryItOut("/*infloop*/while(constructor){function  __noSuchMethod__ (__parent__)null }");
tryItOut("/*for..in*/for(let prototype in ((Math.sin)(this.__defineGetter__(\"__iterator__\", ({}).__lookupGetter__))))var __parent__ = window, __noSuchMethod__;");
tryItOut("let (__noSuchMethod__, ({ __iterator__: __count__, constructor: x::prototype })) { let(prototype) ((function(){return <x/>;})()); }\n/*infloop*/do {return delete <x/>;throw <x><y/></x>; } while(prop = *);\n");
tryItOut("/*infloop*/do {\rfunction  __proto__ (constructor, <><x><y/></x></>) { return @foo } <x><y/></x>; } while(.watch(\"prop\", /a/gi).yoyo(@foo.@foo));/*infloop*/while(3/0){{} }");
tryItOut("/*for..in*/for(let [constructor, __proto__] = (yield (yield  /x/g )) in (-1).propertyIsEnumerable(\"prototype\")) gc()");
tryItOut("let(constructor = ({__noSuchMethod__: () })) { return;");
tryItOut("if((RangeError(__noSuchMethod__))) ; else  if (new function ([y]) { }.@foo) {export getter;yield 1e4; } else ([,]);");
tryItOut("");
tryItOut("\n/*for..in*/for(const prototype = (function ([y]) { })() in [1,,]) {yield <><x><y/></x></>; }");
tryItOut("let __proto__ = <y><z/></y>, __count__ = (function ([y]) { })();\nnew Function\n");
tryItOut("/*infloop*/for(({ __noSuchMethod__: __count__ }) = (\nfalse); ( += ({})); (p={}, (p.z =  '' )())) {throw [1];gc() }");
tryItOut("/*infloop*/L:\rfor((__parent__ = #1=[#1#]); \t__iterator__ = 0.1; new (Math.pow)(*::*,  /x/ )) \n");
tryItOut("with({__iterator__:  /x/g  ..  /x/g })const __parent__, __noSuchMethod__ = this;");
tryItOut("*::*; const __noSuchMethod__;");
