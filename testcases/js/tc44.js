tryItOut("\n");
tryItOut("/*infloop*/while([[]])return;");
tryItOut("let(__iterator__ = prototype.(*::*).__proto__, prototype) { let(__count__ = new Number(!-1, <y><z/></y>), constructor) { for(let y in []);");
tryItOut("/*infloop*/L:for(const __iterator__; prototype; window) {return;throw <x><y/></x>; }");
tryItOut("let(constructor) { throw StopIteration;");
tryItOut("yield <x><y/></x>;");
tryItOut("/*for..in*/for(3 in ((((__noSuchMethod__ = this).watch).call)(<> /x/ </>))){gc() }");
tryItOut("/*infloop*/L:while(prototype){true; }");
tryItOut("{const __proto__ = this; }");
tryItOut("/*for..in*/for(prototype in ((/a/gi)(*)))yield;");
tryItOut("if(<x><y/></x> &&  /x/g ) { if (__count__ = ({})) yield; else /*for..in*/for(let __proto__ in false) constructor}");
tryItOut("/*for..in*/for(let 4 in ((eval)(([1] = \n#1#))))return <x><y/></x>;");
tryItOut("{/*for..in*/for(const x::__proto__ in <y><z/></y>) /*for..in*/L:for(prop = null in  \"\" ) ; }");
tryItOut("{ }");
tryItOut("if(new *(<x><y/></x>.__iterator__, __count__ = true())) {L:do (-1); while((this) && 0); } else  if ('{/*for..in*/for(var __noSuchMethod__ = (uneval(<x/>\n)) in <x><y/></x>) /a/gi(<x/>.hasOwnProperty(\"__iterator__\")); }");
tryItOut("yield <y><z/></y>.constructor;");
tryItOut("\nreturn \f<x><y/></x>\nbreak ;\n");
tryItOut("switch( ''  ? <x/> : null) { default: case 2: break; case : /*infloop*/while(3/0)return constructor;case 5: {return; }break;  }");
tryItOut("<x><y/></x> & __proto__['__noSuchMethod__'] = [15,16,17,18].map(gc, \f[[]] & .2.__count__)");
tryItOut("({}).hasOwnProperty\n<y><z/></y>;\n");
tryItOut("L: {/*infloop*/L:while(false){var prop, __iterator__ =  { yield * } ; }if(<><x><y/></x></>) {__count__ = true; } else {(<x><y/></x>); } }");
tryItOut("\n");
tryItOut("L: {}");
tryItOut("/*for..in*/for(var __parent__ = [3.141592653589793].sort('haha'.split) in 1e81) {const prop = this;(<x/>).watch }");
tryItOut("if((<x><y/></x> -= -3/0, <x><y/></x>)) {yield;throw export __iterator__;; } else  if (*) __noSuchMethod__ = [[]], prototype;");
tryItOut("{yield;__proto__; }");
tryItOut("let (prototype) { L: new Function }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop(@foo) in __parent__) export prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("const __count__, __count__\nwith({constructor: --<><x><y/></x></> in ( /x/g  ?  /x/  : window)})const __parent__;");
tryItOut("for(let y in [5,6,7,8]) with({}) try { for(let y in []); } finally { get = __noSuchMethod__; } ");
tryItOut("[1,2,3,4].slice");
tryItOut("if((eval)()) continue L; else  if (( ''  ==  /x/ )) return <x/>");
tryItOut("__noSuchMethod__");
tryItOut("L:while(( '' ) && 0){let __noSuchMethod__ = yield;; }__iterator__ = __parent__;");
tryItOut("export prop;export __noSuchMethod__;");
tryItOut("let([, , , ({ __parent__: [\f, , prop] })] = prototype.hasOwnProperty(\"function::__count__\")) ((function(){this.zzz.zzz;})());");
tryItOut("(<><x><y/></x></>);");
tryItOut("export prop\nwhile(((this.__defineSetter__(\"prop\", function(q) { return q; }))) && 0)throw  /x/g ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in 0.1) throw  \"\" ;");
tryItOut("if(<><x><y/></x></>) {break ;var __count__; }\nif(<x><y/></x> | 1e4.__defineGetter__(\"__count__\", 0x99)) {yield this; } else  if (prop) export __proto__; else {@foo;throw false; }");
tryItOut("while((<><xxx>{__parent__}</xxx></>) && 0){ } const __count__; const prototype;");
tryItOut("if(@foo) { if ([,]) {throw null;export *; } else {;export __noSuchMethod__; }}");
tryItOut("if(window = true) { if (()) yield; else {; }}");
tryItOut("/*infloop*/for(var ({ __iterator__: prop, prop: __count__.constructor }) = constructor.constructor = (__iterator__ = __noSuchMethod__); (((  for (__parent__ in -3/0))).throw(<><x><y/></x></> >>= __parent__)); (prototype)[-1]) {(undefined); }");
tryItOut("let (__parent__ = __iterator__ <=  *= (), constructor) {  }");
tryItOut("do {yield <y><z/></y>;this; } while((<><>false</></>) && 0);");
tryItOut("L:if(true) { if ((@foo[<y><z/></y>])) Function else {gc()continue ; }}");
tryItOut("__proto__;");
tryItOut("/*for..in*/for(const __iterator__ = (__noSuchMethod__ in ({__noSuchMethod__ getter: (function ([y]) { })(), __noSuchMethod__ getter: (1 for (x in [])) })) in let (__proto__, prototype) <x><y/></x>) L:with({prop: window = <><x><y/></x></>}){throw @foo; }");
tryItOut("L: return __noSuchMethod__;");
tryItOut("prototype = \t__parent__;");
tryItOut("__iterator__ = __parent__;");
tryItOut("/*for..in*/for(var prototype in ((( /x/g ))((__count__.__count__ = (new Number(<><x><y/></x></>))) :: [window]))){}return  /x/g ; const __noSuchMethod__;");
tryItOut("prop = <x><y/></x>, __proto__;");
tryItOut("throw ");
tryItOut("if() { if ( /* Comment */yield __noSuchMethod__.propertyIsEnumerable(\"constructor\")) {/*infloop*/for(const __parent__; -1 === __proto__; <x><y/></x>) {return <><x><y/></x></>;export *; }{} } else  const __iterator__;}");
tryItOut("if((++0.1)) { if ((<x/> ? <x><y/></x> : 0)) {gc() }} else __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\f for  each(let prop.__parent__ in [<x/>].some((<x/>).watch)) ;");
tryItOut("{break M;/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in 3/0) {export *;__iterator__; } }");
tryItOut("if(true) { if (<><x><y/></x></>) {delete } else {(<x><y/></x>); }}");
tryItOut("if(undefined) { if ((-0)) {} else {throw *::*; }}");
tryItOut("/*infloop*/M:while((this.__defineSetter__(\"constructor\", [1,2,3,4].slice).propertyIsEnumerable(\"__noSuchMethod__\").__defineGetter__(\"__count__\", function  __noSuchMethod__ () { if(*) { if (<y><z/></y>) return *;} else {export prototype; } } )))const __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("with({prop: __proto__ =  \"\"  if (<x/>)}){new Function }");
tryItOut("M:switch(<><x><y/></x></>) { default: break;  }");
tryItOut("export */*\n*/;");
tryItOut("/*infloop*/do with({}) throw StopIteration; while((true .@x:: @foo).propertyIsEnumerable(\"prototype\"));");
tryItOut("/*infloop*/while(<y><z/></y>)(function ([y]) { })()\n/*infloop*/while((yield continue ;))return  /x/ ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in this *= (new (<y><z/></y>)(this))) __noSuchMethod__;");
tryItOut("L: {gc() }");
tryItOut("if(__noSuchMethod__.constructor = <><x><y/></x></> >= 0x99)  else  if (new <y><z/></y> ? window : null(__iterator__ >>= 1e+81)) {L:if(Error(<x/>, *::*)) { { throw *; }  } } else {return  /x/g ; }");
tryItOut("prototype = prototype;");
tryItOut("export __proto__\n");
tryItOut("/*infloop*/while(__parent__.yoyo(new new Iterator(({a1:1}).@*)(new Exception(<x><y/></x>))))Math.pow");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __proto__) return 033; while([function  __proto__ (__count__, __proto__) { return <><x><y/></x></> } (window).__defineSetter__(\"prototype\", Math.pow)].some(({}).hasOwnProperty)); const __iterator__;");
tryItOut("/*for..in*/for(const __iterator__ = (default: case 7: let 1e4 = true;break; ) in (!*::*)) var constructor = this, constructor;");
tryItOut("/*for..in*/this.zzz.zzz;for(let [__parent__, __iterator__] = <zzz><x><y/></x>.(*)</zzz> in ) {(window).watch }");
tryItOut("throw StopIteration;");
tryItOut("([z1,,]);");
tryItOut("/*for..in*/for([prop, __proto__] = * in ( ''  && @foo)) {if(this << this) { if (new ((1e-81).__defineSetter__)()) {{} } else function  __proto__ (__noSuchMethod__) { yield window } }{break M;Math.sin } }");
tryItOut("do {gc()with({}) { yield <y><z/></y>; }  } while((__iterator__ = prototype) && 0);");
tryItOut("/*for..in*/for(const [__parent__, __count__.__parent__] = (\n@foo) in <x><y/></x>) {export __iterator__;throw  \"\" ; }");
tryItOut("M:if(null) {var __iterator__;return #1=[#1#]; } else  if ((this %= @foo - )) {const __proto__ =  \"\" , prototype;let __count__ =  /x/ , __iterator__; } else {let __noSuchMethod__ = __count__;var __parent__ = <x><y/></x>, constructor = [1,,]; }");
tryItOut("this.zzz.zzz;");
tryItOut("return prototype = __noSuchMethod__.propertyIsEnumerable(\"prop\");");
tryItOut("this.zzz.zzz;");
tryItOut("M:if((__noSuchMethod__ = ({a2:z2})) &= __iterator__.( /x/g )) do {constructor = *::*; } while((<x><y/></x>) && 0); else  if (prototype.__parent__ = ([*.__defineGetter__(\"__count__\", (1 for (x in []))) for (prototype.prop in __noSuchMethod__)throw ( /* Comment */@foo);])) {let prototype, __iterator__;(*); }");
tryItOut("/*for..in*/for(var [ \"\" , prototype] = (<x><y/></x>.(delete)) in window) {}\rif(((uneval( \"\"  - * > ('fafafa'.replace(/a/g, function (__count__) { {} } )))))) { if ( '' ) const __noSuchMethod__, __iterator__; else gc() const __count__;}");
tryItOut("yield (new (({}).__lookupGetter__).apply(true));");
tryItOut("if(<x><y/></x> ===  '' ) yield [1]; else  if (window.*) {return ({}); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in  \"\" ) __iterator__ = <y><z/></y>, function::__iterator__ = __proto__; const constructor;");
tryItOut("if(//h\nprototype =  \"\" ) throw __parent__; else {(@foo);try { {} } catch(__iterator__) { (this); }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__.function::__proto__ in default: /*infloop*/do { } while(<y><z/></y>);break; break; ()) L:with({prop:  /x/ })gc()\n/*infloop*/M:while(window){yield *::*; }");
tryItOut("try { return; } catch(prototype) { constructor; } finally { this.zzz.zzz; } ");
tryItOut("prototype = __proto__;");
tryItOut("if(([*::* for each (__proto__ in <><x><y/></x></>)])[<><><><x><y/></x></></></>]) { if (yield (__parent__ = __parent__)) {throw <><x><y/></x></>; }} else return;");
tryItOut("return null;");
tryItOut("return;");
tryItOut("M:with(__count__['prototype'] = h){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in (uneval(true))) {return __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in (Date(let (prop = (function ([y]) { })()) <x/>))) {(function(y) { yield y; (<><x><y/></x></>);; yield y; }).call{} }");
tryItOut("/*for..in*/__parent__");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(((<x/>)(__noSuchMethod__ = __iterator__)) in <><>#0=[<y><z/></y>]</></>) throw  '' ;");
tryItOut("return;");
tryItOut("return;");
tryItOut("if(((new ((new Function(\"{\\t}\")))()) < <><x><y/></x></> for (__count__ in  { yield <x><y/></x> } ))) {} else  if (__iterator__.__count__) M:if(__count__ = this.__defineGetter__(\"__iterator__\", Function)[#1=[#1#] -= [,,]]) /*infloop*/for(__parent__ = (this.zzz.zzz); constructor !== <y><z/></y>;  \"\"  %=  /x/ ) {<x/>;gc() } else for(let y in []);");
tryItOut("{yield; }");
tryItOut("let ( = ((uneval(<y><z/></y>)))) { /*infloop*/for(__proto__ = ({ set __iterator__ __parent__ (constructor) { yield <x><y/></x> } \f }); <><x><y/></x></>; <x/>) {yield; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__.__proto__ in @foo) return;");
tryItOut("(1e4)");
tryItOut("if(let) __count__ = __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("M:if((__proto__.constructor)) { if (this) {return; } else {}}");
tryItOut("/*infloop*/M:do <><x><y/></x></> while(__count__.constructor);");
tryItOut("while((new (gc)(this)) && 0){1.2e3; }");
tryItOut("/*infloop*/M:while(<><bbb xmlns=\"@foo\">yyy</bbb></>)yield <x/>;");
tryItOut("/*for..in*/L:for(let [prop, function::prop] = <x><y/></x>.@* in <><x><y/></x></>) window;");
tryItOut("/*infloop*/for(__proto__; (@foo >>= <><x><y/></x></>); 5.0000000000000000000000 ? constructor : *::*) {; }");
tryItOut("__proto__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prototype in  /x/ ) {<><x><y/></x></>;\f }\nyield\n/*for..in*/for(const [yield, __parent__] = __proto__ = <x><y/></x> in <y><z/></y>) {break L; }");
tryItOut("/*for..in*/M:for([prop, each] = gc(((__noSuchMethod__)\r-=(-0 + __iterator__ setter:  /x/g )),  /* Comment */new (function(q) { return q; })(<><x><y/></x></>)) in (yield constructor.unwatch(\"constructor\"))) L:switch( /x/  in undefined) { case 7: throw prototype;break;  }");
tryItOut("/*infloop*/for(const __count__; \rconstructor = ([15,16,17,18].map(new Function, ((function(y) { yield y; yield;; yield y; })()))); null) {var __noSuchMethod__ = constructor, constructor = true; }");
tryItOut("/*infloop*/M:do { } while((new Function));");
tryItOut("/*infloop*/do {break ;return  '' ; } while([1]);");
tryItOut("let (constructor, __iterator__ = (* .. window)) { /*infloop*/for(undefined * * if (<y><z/></y>) /= new ([1,2,3,4].slice)(); ( /* Comment */ \"\" ); <x/>) {gc() } }");
tryItOut("for(let y in []);");
tryItOut("if(([prototype, __proto__, ] = new <y><z/></y>())) {prop, __parent__ = 0.1;continue ; } else  if (<x><y/></x>.eval(<><x><y/></x></>)) continue ; else {throw <x/>;#1#; }");
tryItOut("M:if((yield)) { if (eval(\"( \\\"\\\" .valueOf(\\\"number\\\"//h\\n))(<x/>, <x/>)\", prototype >= <y><z/></y>)) ((p={}, (p.z = 0.1)()));} else {if(()) export __count__; else {__count__ = undefined;({}); } }");
tryItOut("if(({ __proto__: __noSuchMethod__, __count__: __iterator__ }) = (this.__defineGetter__(\"prototype\", *::*)).yoyo((let (__count__ = [,,]) { export *; }))) if( /x/g .__lookupSetter__(\"__noSuchMethod__\")) {}\n\t else  if (return (p={}, (p.z = ([11,12,13,14].map))())) switch(<x><y/></x>) { case 3: const prop, __count__ }");
tryItOut("return <x><y/></x>;<x><y/></x>;");
tryItOut("while((<x><y/></x>['constructor'] = \n*.propertyIsEnumerable(\"__parent__\")) && 0)if(0.1 @ function(id) { return id }) throw true\n__iterator__, __proto__; else {{}var constructor = *::*; }");
tryItOut("/*infloop*/for(new (3)((<x><y/></x> - <><x><y/></x></>), __iterator__+=undefined); ({__noSuchMethod__: (__proto__ %= (uneval(prototype))), constructor: try { ; } catch(constructor if ( '' ())) { let __proto__; } catch(prototype if (function(){})()) { return <x><y/></x>; } catch(__parent__) { let prototype = null, __iterator__ = *; }  }); 1e81) export *;");
tryItOut("/*infloop*/for(const 1e81 + <><x><y/></x></>; #1=[#1#] = <x><y/></x>; this.zzz.zzz.__lookupGetter__(\"constructor\")) {/a/gi const ({ __proto__: [], __proto__: __proto__ });({(<x/>);export __count__; }); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __proto__ in <><x><y/></x></>) {}");
tryItOut("yield;(*::*);");
tryItOut("L: let (prototype = #1#.__lookupSetter__(\"prop\")) { L:do {return <><x><y/></x></>;let __noSuchMethod__ = 0x99, __proto__; } while(({}) && 0); }");
tryItOut("throw __count__;");
tryItOut("return;");
tryItOut("if(.2 if ( \"\" )) <x><y/></x>; else {/*for..in*/for(let [__proto__, constructor] = window in *::*) {export prototype;<><x><y/></x></> }; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __iterator__ in <x/>) ( /x/g );");
tryItOut("L: {return; }/*infloop*/while(constructor){const __noSuchMethod__ = <><x><y/></x></>;__parent__: (M:switch(*) { default: return constructor;break; break; continue M;case 1: gc()break;  }) }");
tryItOut("/*for..in*/for(var [__proto__, function::prop] = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in <><>*::* >>= this.prototype.isPrototypeOf(<x><y/></x> = [({a2:z2})].some(function(q) { return q; }))</></>) {if(<y><z/></y>) export prototype; else ;/*infloop*/for(const ({ __parent__: ({ __iterator__: [, __count__, ({ prototype:  /x/ , __noSuchMethod__: constructor }), ] }), __noSuchMethod__: __proto__ }) = prototype.(1e81.unwatch(\"constructor\")); (#2=({constructor: (prototype = prototype)}).constructor); new ([ '' ].watch(\"__noSuchMethod__\", (new Function(\"{}\"))))((__count__ = (<><x><y/></x></>++)))) {export __noSuchMethod__;return } }");
tryItOut("const __parent__ = ({}), __noSuchMethod__ = 3\n");
tryItOut("if(let (prop, constructor = <><x><y/></x></>) (window.__lookupSetter__(\"__noSuchMethod__\"))) \f{let (__noSuchMethod__) { prototype = @foo, __proto__; }export *; } else {with({prop: 1e-81}){export __parent__; }/*for..in*/for(let [__iterator__, __iterator__] = @foo in  /x/g ) throw <><x//h\n><y/></x></>; }");
tryItOut("let __parent__, __proto__ =  /x/g ;");
tryItOut("/*infloop*/for(let constructor; ({ __noSuchMethod__: [1].__count__, __iterator__: prop }) = <x/> >= <y><z/></y> & null.__lookupSetter__(\"__iterator__\"); <><zzz>new (new Function)()</zzz></>) *;");
tryItOut("M:with({prototype: <x><y/></x> &&  '' }){ }");
tryItOut("switch(yield.prop) { case __parent__ = __iterator__\n: break; case 2: break; case (new Iterator(1e81)) << *[[z1,,]]: export __noSuchMethod__;case 0: break; let (__parent__, <y><z/></y> = <><x><y/></x></>) { prototype; }case 7: case 7: yield;return arguments;break; break;  }");
tryItOut("return\nlet (__iterator__ = <x><y/></x>, __count__) { let (prototype)//h\n { return \t /x/g ; } }");
tryItOut("/*for..in*/for(let __parent__ in ((new Function)(<x/>.prototype = this.__count__))){/*for..in*/for([prop, __proto__] = (__iterator__)++ in  \"\" ) {prototype = @foo; } }");
tryItOut("let (prototype) { const gc(), __count__ = <x/>; }");
tryItOut("yield * &= <x/>;");
tryItOut("if(<><xxx>{__proto__}</xxx></>) {yield 1e4;Math.pow } else  if (__count__) __noSuchMethod__ = [[1]], prototype =  /x/g ;");
tryItOut("M:if(typeof (1.3)) ; else {export __count__; }");
tryItOut("/*infloop*/while(<x><y/></x>)throw *::*; const __count__;");
tryItOut("let (__proto__, __proto__) { var prop = <x><y/></x>, prototype; }");
tryItOut("if(((<x/> <= <x/>).__lookupGetter__(\"__count__\").watch(\"__noSuchMethod__\", function () /* Comment */false .@ <><x><y/></x></>))) {{} } else  if ([<> </>]) {;/*for..in*/for(var (<y><z/></y>.__defineGetter__(\"__noSuchMethod__\", Function))(null.valueOf(\"number\")) in ((/a/gi)(())))throw 0; } else throw __count__\nif(<x/>) {return undefined;gc() } else { }");
tryItOut("__proto__, prototype;");
tryItOut("M:with({prop: <x><y/></x>})gc()");
tryItOut("if(__iterator__ = __parent__) Math.sin else  if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) const prop, prototype; else yield;\f");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in constructor) ");
tryItOut("/*for..in*/for(var [__parent__, __noSuchMethod__] = (__iterator__ = @foo).unwatch(\"__proto__\") in (eval(\"window\", undefined)) ^ #1=[#1#]++) if([true].map(/a/gi)) { if (true()) {let __noSuchMethod__, prototype = [1];{} } else {;const __count__ = <x><y/></x>, prop = <x><y/></x>; }}");
tryItOut("let( = <>\n \"\"  .@*:: (function ([y]) { })()</>) { let(__count__) { let(constructor, ({ __iterator__: constructor })) ((function(){throw x::__iterator__;})());");
tryItOut("/*infloop*/for(__count__; <x/> &  /x/g .yoyo(([*].sort( /x/g ))) ? <xxx>{__noSuchMethod__}</xxx> : (__iterator__ = __noSuchMethod__.constructor); (prototype = __iterator__)) break L;");
tryItOut("L: {constructor; }");
tryItOut("#3={a:#3#}");
tryItOut(";");
tryItOut("M:if((<></> >> (true << <><x><y/></x></>((__iterator__.throw(this)), new Object())))) return __iterator__ = RangeError( /x/g ).__parent__ = [window]; else {let __count__;while(((this.__defineSetter__\f(\"prop\", function  __count__ ()__parent__))) && 0){return 0x99; } }");
tryItOut("let prototype = null, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [, , ] in <x/>) {let prototype = #1=[#1#];throw arguments; const __count__; }");
tryItOut("if([((function (constructor, __proto__) { var __count__; } ()).propertyIsEnumerable(\"__parent__\"))]) { if (#3={a:#3#}) {let (__noSuchMethod__ = #1#, __noSuchMethod__) { L:if(undefined) {export __count__; } else  if (<x><y/></x>) {gc() } } } else {gc()export __parent__; }}");
tryItOut("with(null)");
tryItOut("let(__proto__) ((function(){__noSuchMethod__})());");
tryItOut("L:if(<><x><y/></x></>\n) {yield #3={a:#3#};const __parent__ = ({a1:1}), constructor; } else <><x><y/><\t/x></>;");
tryItOut("L:if(!<y><z/></y>) {3;/*infloop*/do {/*infloop*/for(let __iterator__ = <><x><y/></x></>; __parent__; *) <x><y/></x>;yield window; } while((prototype = __proto__ = <><x><y/></x></>.__iterator__ = <x><y/></x>.throw(<><x><y/></x></>) = new (eval)(<><x><y/>\t</x></>, <x><y/></x>))); }");
tryItOut("L: __proto__");
tryItOut("while(((~(3/0 = (__noSuchMethod__ = function ([y]) { })))) && 0){with({prop: [15,16,17,18].sort(Function, 1e4)}){break L; } }");
tryItOut("/*for..in*/for(var (__noSuchMethod__.unwatch(\"__proto__\"))([[1]]) in ((({__parent__ setter: (1 for (x in [])),  set __iterator__ __count__ (__count__) { return true }  }))(<y><z/></y>))){constructor = window, __proto__;gc()\nconst prop = __iterator__, __iterator__, prototype = __noSuchMethod__;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in (<><x><y/></x></> .@ S)) yield window;");
tryItOut("/*infloop*/for(var __proto__.__iterator__; this %= false , yield 1.2e3; null) {if(this) {continue ;return __parent__; } }");
tryItOut("/*for..in*/for(const prop = constructor = [z1] in 1.3) {let x::prop, __parent__;*::*; }");
tryItOut("/*infloop*/for(var const prototype, prop; = [11,12,13,14].sort; __iterator__.prop = (\t__noSuchMethod__ ? <x><y/></x> : 0/0) for (prop in [[1]]) if (window); (__noSuchMethod__ & null)) ({}).hasOwnProperty");
tryItOut("function  __noSuchMethod__ ()<y><z/></y>");
tryItOut("export constructor;yield;");
tryItOut("M:if( \"\" ) { if (*) {throw 1e-81;( /x/ ); } else \fcontinue ;}");
tryItOut("gc()");
tryItOut("{}\nbreak ;");
tryItOut("try { return; } finally { let __proto__; } ");
tryItOut("/*for..in*/for(let prop = __proto__ &= this.eval() in  /x/  -= (({__iterator__ setter: gc })) >> [[]].isPrototypeOf(constructor)) {yield (function ([y]) { })(); }");
tryItOut("{}");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:for(let ({ prop: constructor }) = (Array(1e4)); <y><z/></y>.__proto__ = (prototype = -1); __parent__ =  '' .eval(<x><y/></x>.(__parent__))) return;");
tryItOut("throw __proto__;");
tryItOut("L:switch(let ([, ({ __proto__: __proto__, __iterator__: __proto__ })]) ({ set prop(__proto__) { (<><x><y/></x></>); }  }).unwatch(\"__count__\")) { case [this].sort([1,2,3,4].slice): /*for..in*/for(let [[__count__ for (prototype in <y><z/></y>)], constructor] = @foo.isPrototypeOf(<y><z/></y>) in -3/0) var __proto__\ncase ([11,12,13,14].map): break;  }");
tryItOut("return;");
tryItOut("/*for..in*/M:for(let ([__proto__ = __proto__].sort(__proto__)).prop in (([1,2,3,4].map)( /x/g .unwatch(\"__proto__\").__count__))){var __proto__;/*infloop*/M:do Math.sin while(1e4); }");
tryItOut("/*infloop*/L:for((function ()new ({}).hasOwnProperty()).call(({ set __noSuchMethod__(__parent__, __proto__)(033 || <y><z/></y>),  set __iterator__ __noSuchMethod__ (__iterator__, prototype) { yield window - __proto__ }  }), <><>*::*</><ccc:ddd>yyy</ccc:ddd></>); <><x><y/></x></>.watch(\"__iterator__\", Math.pow); prototype = new #2=*.@foo) x::prop = this(__iterator__ = this\n, <y><z/></y> -= 3/0), __parent__ = (RangeError( /x/g ,  \"\" ))");
tryItOut("do /*for..in*/for(__noSuchMethod__ in (((#3={a:#3#}).__defineSetter__)(__proto__ = null)))return 3.141592653589793; while(((__proto__.__parent__)) && 0);");
tryItOut("[,,z1]");
