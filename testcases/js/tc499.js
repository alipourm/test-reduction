tryItOut("yield [[]];");
tryItOut("{ }");
tryItOut("L: if([15,16,17,18].map([1,2,3,4].slice, null)) { if (prototype) <><x><y/></x></>} else {yield <x/>; }");
tryItOut("/*infloop*/while([eval(\"{}\", <x><y/></x>)].filter((prop.throw(eval(\"return;\", true))).watch)){; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*infloop*/for(const prop = new *; ([11,12,13,14].some); ((__noSuchMethod__ = *).__defineGetter__(\"prototype\", [1,2,3,4].map) for each (__proto__ in (prop.__iterator__)))) {//h\nexport *;return (__iterator__ ? *::* : window); }");
tryItOut("if(<>()</>) {yield;throw <x/>; } else  if (new ((eval(\"var __proto__;\", <x><y/></x>)))( \"\"  ^ <x><y/></x>[#0= \"\" ])) {let try { var __iterator__; } catch(constructor if (function(){})()) { throw <><x><y/></x></>; } catch(prototype if (function(){( '' );})()) { <y><z/></y>; } catch(__iterator__ if (function(){var prop, __parent__ = __noSuchMethod__;})()) { yield *::*; } catch(__proto__ if (function(){<x><y/></x>;})()) { 1e-81; } finally { continue M; }  }");
tryItOut("/*infloop*/for([,,] ? ((p={}, (p.z = (function(id) { return id }.__defineSetter__(\"constructor\", [1,2,3,4].map)))())) : (function  constructor ()undefined).call(<x/>, ); ({ set prototype(prop) { return -0.unwatch(\"constructor\") } , prototype: eval(\".2\", <x><y/></x>) }); (prototype & <><x><y/></x></>)) yield;");
tryItOut("with({__iterator__:  /x/ .propertyIsEnumerable(\"__iterator__\")}){/*for..in*/for(let constructor = __noSuchMethod__ in [,]) export __iterator__; }");
tryItOut("L:if([*]) { if (*::*.hasOwnProperty(\"prototype\")) { }} else {; }");
tryItOut("{do eval while(( /x/ ) && 0); }");
tryItOut("gc()\nif(<><x><y/></x></>) ( /x/g );\n/*for..in*/for(let __parent__ in [[]]) [];");
tryItOut("<x/>;gc()");
tryItOut("/*infloop*/do {/*for..in*/for(var __parent__ in window) {gc()export *; }; } while(export __iterator__);");
tryItOut("/*for..in*/for(var function::__noSuchMethod__ = [15,16,17,18].sort((new Function(\"__parent__;\")), [15,16,17,18].map(Math.pow, true).__defineSetter__(\"__iterator__\", function (constructor) { yield function(id) { return id } } )) in (-0)) {var prototype = @foo; }");
tryItOut("for(let y in [5,6,7,8]) __proto__ = __count__;");
tryItOut("/*infloop*/while(null.prop)gc()");
tryItOut(";");
tryItOut("with({}) let (__count__ = *::*.*) { { /x/ ; } }");
tryItOut("L:if(<x><y/></x>) {return; } else {yield __iterator__;export __iterator__; }");
tryItOut("L: {(0.1);var prop; }");
tryItOut("(<x/>);");
tryItOut("if([z1]) {(new Function(\"{}\"))return window; } else {let prototype, getter;__count__; }");
tryItOut("{(new (__noSuchMethod__)(5.0000000000000000000000) != constructor = __proto__);throw 'haha'.split; }");
tryItOut("let (yyy, [constructor, , prototype]) { /*for..in*/for(__proto__ = (__proto__) in (-1)) export __count__; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("(<x><y/></x>);/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in prop) __noSuchMethod__ = <x><y/></x>; const __proto__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("let ");
tryItOut("if(<y><z/></y> .@x:: function(id) { return id }) {; } else ");
tryItOut("L:if(this) { if (4.) {continue L;export *; } else {; }}");
tryItOut("return <><x><y/></x></>;\nif([11,12,13,14].some) {export each; } else  if ( \"\" .*) {; }\n");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __iterator__] = --(-1).hasOwnProperty(\"prop\") = __iterator__.getter\n in this.__defineGetter__(\"__parent__\", <><x><y/></x></>)) /*for..in*/for(const new prototype = constructor().prototype in __noSuchMethod__.__iterator__ = @foo) {/*infloop*/for(const prototype = arguments; 1e+81; window) {export *;throw this; }switch(<x><y/></x>) { case true: (@foo); } }");
tryItOut("/*infloop*/for(let __iterator__ = <><x><y/></x></>; this; __parent__: <>__parent__</>) {yield;gc() }");
tryItOut("let (constructor =  '' [({a2:z2})], ({ prop: __parent__ }) = <><x><y/></x></>.__lookupGetter__(\"__count__\")) { var __count__; }");
tryItOut("L:with({__iterator__ = ([15,16,17,18].sort(true, <><x><y/></x></>) != (1e-81.eval(this))) ? * .@x:: <x/> / ((<x><y/></x> if (#1=[#1#]))) : new Iterator():  /x/g }){let(prototype = false, __parent__) ((function(){return [1];})()); }");
tryItOut("let \f(constructor =  '' , __count__ = <x><y/></x>) { (<x><y/></x>); }");
tryItOut("if((1e-81.@*--\n)) { if (({a1:1})) var __noSuchMethod__ = <y><z/></y>;\r else }");
tryItOut("");
tryItOut("if(__noSuchMethod__ = <y><z/></y>.__defineGetter__(\"__parent__\", function(y) { yield y; {}; yield y; })) { if ( \"\" ) /*infloop*/for(var __count__; 1e+81 * <x><y/>\f</x>; prop = [])  \"\" ; else /*infloop*/while(<x><y/></x>){\fcontinue L;yield; }}");
tryItOut("if((__iterator__)) var __iterator__, __proto__ = @foo; else throw <><x><y/></x></>;");
tryItOut("if(X.valueOf(\"number\")) { if ((__parent__.let setter= <xxx {__iterator__}={(new (#1#)(@foo))} />)) const __count__; else {return [[]];; }}");
tryItOut("throw (eval(\"{}\", constructor = ({a1:1})))\nL: var __proto__ = <x><y/></x>\n");
tryItOut("let (prop, __noSuchMethod__) { M:if(new [[]](1e+81, 033)) {yield #3={a:#3#};export __noSuchMethod__; } else  if (Exception(*::*, <x><y/></x>)) {;__count__ = <><x><y/></x></>, prototype; } }");
tryItOut("L:with(<x><y/></x> <= prototype){ /x/g ;export *; }");
tryItOut("\tlet (({ __parent__:  }) = undefined, prop) { L: {export *;\rMath.sin } }");
tryItOut("/*for..in*/L:for(const \t__count__ in ((Math.pow)(<xxx>{constructor}</xxx>)))({});continue L;export prototype;");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/for(var constructor in (([1,2,3,4].map)(new new Function((__parent__ =  \"\" .__lookupSetter__(\"__count__\"))))))var prototype, __count__ = constructor;");
tryItOut("if(__iterator__ = <><x><y/></x></>) {throw prop; } else {continue L;export *; }");
tryItOut("return\nconst __count__ = this;");
tryItOut("let(__iterator__, __iterator__ = this.__defineGetter__(\"prototype\", (<x><y/></x>).watch)) { let(prototype) { try { with({}) { yield *.__lookupSetter__(\"__parent__\"); }  } finally { prop = __iterator__; } ");
tryItOut("if((-1)) gc()");
tryItOut("");
tryItOut("if((new Function(\"export *;\")) = null) {*; } else  if ( '' .watch(\"prototype\", (1 for (x in []))).yoyo((#1=[window]))) if(false) { if ( /x/g ) {continue ;yield; } else throw *::*;}");
tryItOut("let (__iterator__) { throw __proto__; }");
tryItOut("{for(let y in []);if(__proto__) {export __iterator__; } else  if (@foo) gc() }");
tryItOut("yield  \"\" ;");
tryItOut("/*infloop*/while((__iterator__ = __proto__.prop = ((-3/0).watch(*::*))\n)){(<y><z/></y>);var __count__ = __noSuchMethod__, prototype = false\f; }");
tryItOut("L:if(eval(\"new .2( /x/ )\", (1.3))) { if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) if(false) {;throw <x><y/></x>; } else  if ( '' ) {yield  /x/ ;yield; }} else {continue M; }");
tryItOut("/*infloop*/do {let (__parent__ = [,,z1], __proto__ =  /x/g ) { {const __proto__ =  /x/g ;yield; } } } while(eval(\"@foo\", __iterator__).hasOwnProperty(\"__count__\"));");
tryItOut("/*for..in*/for(let __proto__ in ((/a/gi)((({ set __noSuchMethod__ x::__parent__ (({ setter: ({ prop: __count__ }) })) { constructor = *, constructor; }  })))))do {} while((((<><x><y/></x></>)()) ? 1e81++ : yield this) && 0);");
tryItOut("/*for..in*/for(prop in Function) /*infloop*/for(let ({ __parent__: [] }) = [11,12,13,14].sort; ((function ([y]) { })()); __proto__ = <><x><y/></x></>()) function(y) { yield y; false;; yield y; }");
tryItOut("/*infloop*/M:for(var constructor; [,];  /x/g ) yield __proto__;");
tryItOut("/*infloop*/L:do {export prototype; } while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);");
tryItOut("{yield;(<x/>); }");
tryItOut("L:if(constructor.constructor setter= Function) {export prop;return <><x><y/></x></>; } else  if (new (({}).__lookupGetter__)()) if( /x/g ) yield; else gc()");
tryItOut("if(#1#.isPrototypeOf(({ get __iterator__() { export __proto__; } , __iterator__: __parent__ }))) { if ([[1]]//h\n) export __count__;} else {gc()export *; }");
tryItOut("if(((this.__defineSetter__(\"constructor\", eval)) in prop.propertyIsEnumerable(\"x::let\"))) let __count__, prototype =  /x/g ;");
tryItOut("M:switch((\t<><x><y/></x></>.__noSuchMethod__ =  \"\" .throw((__noSuchMethod__.__iterator__ getter= function (__count__, prop) { return __parent__ } )))) { case 0:  }");
tryItOut("continue \n");
tryItOut("/*for..in*/for(var prototype in ((function(q) { return q; })((this.__defineSetter__(\"prototype\", /a/gi)))))/*infloop*/do {function (__proto__, __count__: (-1)) /x/  } while(arguments);");
tryItOut("/*for..in*/for(const __count__ in (((<><x><y/></x></>(prop)).__defineSetter__)(__proto__ = (eval(\"yield window;\", ({a2:z2})) ? 0.1 : ({__proto__ setter: function  __iterator__ (constructor, __parent__)this })) + __parent__ = ())))if([this].some((1 for (x in [])))) { if (<x/>.throw(<x><y/></x>)) {export *; } else {export __parent__;let prop = this, prototype = <y><z/></y>; }}");
tryItOut("if(this().unwatch(\"prop\")) { if ((yield (let ([, ]) <x><y/></x>.prop))) {let __proto__ = <x/> = <y><z/></y>; } else ;}");
tryItOut("throw __iterator__;");
tryItOut("continue /*infloop*/for(let __count__ = <x><y/></x>; (-1); <y><z/></y>) {return __noSuchMethod__;yield <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.prototype in ({})) throw true;");
tryItOut("return;");
tryItOut("return <><x><y/></x></>;");
tryItOut("return;");
tryItOut("{return (prototype =  \"\" ); }");
tryItOut("( '' );");
tryItOut("/*infloop*/for(const ({ __parent__: constructor }\r) = ({ set __proto__(constructor, __iterator__)<x><y/></x>.__lookupSetter__(\"prop\") }); [[] = ] & *; ({arguments: (function ([y]) { }.__count__)})) /*for..in*/L:for(const __noSuchMethod__.prototype in [1,,].unwatch(\"constructor\")) {gc }");
tryItOut("if((((__noSuchMethod__ = constructor).__proto__ = __parent__ = <x><y/></x>).watch).call((({__proto__: true }).unwatch(\"__count__\").yoyo(((<y><z/></y>.hasOwnProperty(\"__parent__\")))(, undefined))), [prototype & window].filter([1,2,3,4].map), (new (gc)([1].watch(\"__iterator__\", false))))) {(\f[z1]);(<><x><y/></x></>); } else  if (<x><y/></x> ? (-0) : @foo @ <x><y/></x> >>>=get) {var __iterator__ = *, __noSuchMethod__ = <x/>; } else let __count__ = {};");
tryItOut("L:with({__proto__: }){arguments; }");
tryItOut("/*infloop*/for(var prototype; <x><y/></x>; [,]) {}");
tryItOut("if((.2.valueOf(\"number\")).watch(\"__proto__\", gc)) { if ([15,16,17,18].some((1 for (x in [])), function ([y]) { })[__parent__.__iterator__ getter= <x/>]) {/*infloop*/for(const __proto__ = constructor; <x><y/></x> instanceof 1e+81; this) <x/>return  \"\" ; } else {export *; }}");
tryItOut("M:do throw StopIteration; while(( /* Comment */function ([y]) { } !== <x/>.yoyo(new (@foo)())) && 0);");
tryItOut("export __count__;");
tryItOut("/*infloop*/M:for((undefined); ( /x/ .__lookupSetter__(\"__noSuchMethod__\")); Math.sin ^ [1].//h\nthrow(this)) gc()\n1.3;");
tryItOut("/*infloop*/do if(1e4)  else  if (window) {var __noSuchMethod__, __noSuchMethod__ = window;__count__ } else {let constructor, __proto__ = <y><z/></y>; } while(new String(<><x><y/></x></>));");
tryItOut("/*for..in*/M:for(const [prop, __parent__] = <x/> in this) {return; }{if(<x><y/></x> ? <><x><y/></x></> : <x><y/></x>) { if (this -= true.\fvalueOf(\"number\")) {{}; } else const __parent__ = ({a2:z2}), constructor;}export *; }");
tryItOut("return prototype.__count__ getter= ({}).__lookupGetter__;");
tryItOut("return  \"\" ;");
tryItOut("with( \"\"  .@ <><x><\fy/></x></>.valueOf(\"number\")){export *;continue L; }");
tryItOut("/*for..in*/for([prototype, constructor] = ( '' .__lookupGetter__(\"constructor\").propertyIsEnumerable(\"__proto__\")).__defineSetter__(\"prop\", Function) in Error(__proto__ = false, <x><y/></x>)) if(new (window)(<><x><y/></x></>).__defineSetter__(\"__count__\", 'haha'.split)) { if (new prototype()) {continue ;(-3/0); } else __noSuchMethod__;}");
tryItOut("if(set = __iterator__ = <x><y/></x>) if(null) {export __iterator__; }");
tryItOut("/*infloop*/M:for(const [prototype, , __iterator__, ({ prop: __iterator__ }), ] = ((.2 for (__iterator__ in <x/>)))(( /* Comment */<><x><y/></x></>))+=(prototype.__defineGetter__\t(\"prototype\", /a/gi));  \"\"  === export *;; this) var constructor.prop, prop = (1.2e3.valueOf(\"number\"));");
tryItOut("/*infloop*/L:for(new RegExp() >>> ((1 for (x in [])))().isPrototypeOf(new (this.zzz.zzz)()); (<y><z/></y>.__lookupSetter__(\"constructor\") ^= arguments); /a/gi((prop = ({})),  /x/ )) {switch((new ('haha'.split)(\nwindow, <x><y/></x>))) { case <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>: break;  }/*for..in*/for(const prop =  /x/g [__count__] in null) throw  /x/ ; }");
tryItOut("/*\n*/with((this.__defineSetter__(\"__parent__\", <><x><y/></x></>).eval((__iterator__ :: <><x><y/></x></>))))[1,2,3,4].slice\n");
tryItOut("do {} while((prototype) && 0);");
tryItOut("if(this) {continue ;return 0.1; }");
tryItOut("let(({ prototype: ({ __iterator__: ({ __proto__: ({ __count__: ({ __parent__: prototype, constructor: __iterator__ }) }) }), __noSuchMethod__: prop }) }) = 'haha'.split()) ((function(){yield __noSuchMethod__;})());");
tryItOut("/*infloop*/M:do {yield;/*infloop*/for(var __parent__; new ((({}).hasOwnProperty).apply)(@foo,  /x/ ); ++ /x/ ) yield <y><z/></y>; } while(((uneval(<y><z/></y> %  '' )).throw((<x><y/></x>.__parent__.unwatch(\"prop\"))[<><x><y/></x></>['__noSuchMethod__'] =  \"\"  .. 3.141592653589793])));");
tryItOut("\flet(__parent__ = ((__proto__, constructor.@*) ? null.watch(\"__iterator__\", [1,2,3,4].map) ? this /= [,] : 0x99 : new (/a/gi).apply( \"\"  >> __count__ = undefined, __parent__;)), __parent__) { return <><x><y/></x></>\nL: {gc()\n }");
tryItOut("/*for..in*/for(var __iterator__ in (((p={}, (p.z = <><x><y/></x></>)()))((#0=({prop: <><x><y/></x></>}))))/*\n*/){M:switch(1e81) { default: ; } }");
tryItOut("/*infloop*/for((__parent__ = this.__defineSetter__(\"__count__\", /a/gi)); 1e81.__defineGetter__(\"__iterator__\", function () { Math.pow } ); <x><y/></x>[false].__lookupGetter__(\"__proto__\").isPrototypeOf(null)) with(<y><z/></y>)false");
tryItOut("/*infloop*/for(const ({ constructor: ((function(y) { yield y; gc(); yield y; }\f).apply).call(( \"\"  -= <x><y/></x>), ).__proto__ }) = /*for..in*/L:for(var [__parent__, __noSuchMethod__] = function ([y]) { } in ({})) {true;[1,2,3,4].map }; (__noSuchMethod__ = <><x><y/></x></>)\n.@*; ++false == prototype = [__parent__, , __noSuchMethod__, , __proto__]) for(let y in []);");
tryItOut("/*infloop*/M:for(var ({ prop: ({ __proto__: ({ __proto__: constructor }), __noSuchMethod__: [({ __noSuchMethod__: ({ __count__: ({ __parent__: x::__parent__, setter: __noSuchMethod__ }) }), prototype: prototype }), constructor, , [({ prototype: __proto__, __proto__\f: ({ __count__: __count__, __parent__: ({ __noSuchMethod__: __proto__, __count__: constructor }) }) })]] }) }) = function ([y]) { }; 'fafafa'.replace(/a/g, (new Function(\"( '' );\"))).throw(#0='fafafa'.replace(/a/g, Math.pow)); (new __count__)) {if(*::*) { if (<{__proto__}></{__proto__}>) {; }} else {export prop;__noSuchMethod__ =  '' ; } }");
tryItOut("{; }");
tryItOut("/*infloop*/M:do with({}) { return (<x><y/></x> >>= <x><y/></x>)--; }  while(yield [1,,]);");
tryItOut("for(let y in [5,6,7,8]) yield true;");
tryItOut("while(((yield prototype.(@foo))) && 0)/*for..in*/for(let constructor = <x><y/></x> in <x/>) {([1]); }");
tryItOut("if(this.__defineGetter__(\"__iterator__\", 'haha'.split)) /*infloop*/for(let [__iterator__] = RegExp(); ( \"\"  if (this)); <><x><y/></x></>.__lookupGetter__(\"constructor\")) ({}).hasOwnProperty");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in (yield ({__count__: (<y><z/></y>.__defineGetter__(\"constructor\", Function))}))) export __parent__;1.3");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((function(q) { return q; })(*))){return;const __count__, __noSuchMethod__; }");
tryItOut("if((({constructor: x::prop}))) L: yield __iterator__; else  if ((0/0.@*))  else {}");
tryItOut("{/*infloop*/while(prototype.constructor getter= function  *::* (constructor, prop) { yield <x/> } )if(window) {yield *::*; } else  if (this) {return;<y><z/></y>; }/*infloop*/for(let constructor; <; <x><y/></x>) {prop; } }");
tryItOut("{/*infloop*/for(__iterator__; [z1,,]; (-0)) {yield;; }L:if([<x><y/></x> if (__parent__)]) {export *;(window); } else  if ((window\n)) <x/> }");
tryItOut("do {{} } while((__noSuchMethod__ = * ? (3/0.__proto__) : ({ set prop __count__ (function(id) { return id }, __count__) { <x><y/></x> } , __count__: prop })) && 0);");
tryItOut("return;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in (<x><y/></x> ^=  \"\" )) __count__;");
tryItOut("if(*) yield <y><z/></y>;");
tryItOut("L: {if(window) export *; }");
tryItOut("yield;\n{}\n");
tryItOut("let(constructor = (0/0)[<y><z/></y>]) { with({})  for each (constructor in window) for (constructor in  '' )");
tryItOut("throw StopIteration;");
tryItOut("if(*::*) {constructorreturn; } else  if (this) ; else {break ; }");
tryItOut("if(new Boolean(({a1:1})) ? --<x><y/></x> :  '' .prototype) {gc()<x><y/></x> } else  if (<x/>) export prop; const __noSuchMethod__;");
tryItOut("if(@foo) { if ((yield [,,])) export constructor\nfunction  __noSuchMethod__ ()1e4} else {export *; }");
tryItOut("({}).__lookupGetter__");
tryItOut("/*for..in*/for(const [prototype, __count__] = arguments in (eval(\"__noSuchMethod__ = @foo, __count__;\", [,,z1]) ? <x/>.hasOwnProperty(\"prototype\") : (prop = window))) {/*for..in*/for(let [__count__, __iterator__] = <x/> ? *::* :  \"\"  in __proto__) {this;export __noSuchMethod__; }const __proto__ = <><x><y/></x></>, __count__ = this }");
tryItOut("continue \n//h\n");
tryItOut("if(<x><y/></x>\n) {throw [[1]]; } else  if (1e81) yield;");
tryItOut("if() { if (__iterator__ = <y><z/></y>) yield @foo;} else export *;");
tryItOut("{{} const __noSuchMethod__;{gc()let (prototype = ({a1:1})) { break ; } } }");
tryItOut("L:with({__count__: (__noSuchMethod__.__iterator__ = true)}){if((-1 += this)) {; } }");
tryItOut("do *::* while((#0=__count__.__parent__ setter= <><x><y/></x></>) && 0)\n");
tryItOut("/*infloop*/for(let /*\n*/constructor = ({ __noSuchMethod__: ({ constructor: [, ({ __proto__: ({ __noSuchMethod__: __noSuchMethod__ }), __proto__: ({ __proto__: __count__ }) }), ], constructor: __parent__ }), prototype: ({ __iterator__: <><x><y/></x></>(<><x><y/></x></>) }) }) = constructor; yield <x/>.valueOf(\"number\") <<= __iterator__ = <x><y/></x>; ) {return undefined;<x><y/></x>;var __noSuchMethod__ = <><x><y/></x></>, __iterator__ = __iterator__\ngc() }");
tryItOut("do  while(([z1,,]) && 0);\nreturn;\n");
tryItOut("/*for..in*/for(let constructor in ((Math.pow)( /x/  == yield |= prop.([15,16,17,18].map([1,2,3,4].map, null)))))throw ((@foo .@x:: window) +  /x/ --);");
tryItOut("if(__noSuchMethod__: <zzz><>C</></zzz>.((({__count__: * })))) {{}break M; } else {__noSuchMethod__ = __proto__, prototype; }");
tryItOut("/a/gi");
tryItOut("constructor");
tryItOut("/*infloop*/L:for(({ constructor: [({ prop: ({ __iterator__: __parent__, D: __iterator__ }) }), Math.pow, ] }) = ({prototype: let (__parent__) <x><y/></x> }) && -=; constructor; (<x><y/></x>.__lookupGetter__(\"constructor\").isPrototypeOf((({}).__lookupGetter__)(-3/0))++)) return;");
tryItOut("prototype = prop;");
tryItOut("/*for..in*/for(var [constructor, prototype] = (p={}, (p.z = [[1]])()) in *) { }");
tryItOut("M:switch((<><x><y/></x></> >>>=undefined)) { case 2: function(y) { yield y; export prototype;; yield y; }break; break;  }");
tryItOut("M:do ; while((window) && 0);");
tryItOut("/*for..in*/L:for(const [prop, x::__count__] = * ? <x/> : [,,z1].constructor in  \"\" ) let (__count__ = <x/>, __noSuchMethod__) {  }");
tryItOut("with(0x99.throw((function ([y]) { })()))const prototype = true, __noSuchMethod__ =  \"\" ;");
tryItOut("<><x><y/></x></>__count__ = prop;");
tryItOut("/*infloop*/L:for(({ prototype: [, ({ prop: __parent__ }), , __proto__], __iterator__: __iterator__ }) = (true\n); prototype+=(({}).__defineSetter__).call(window, ); (( \"\" .eval(false)).propertyIsEnumerable(/*\n*/\"({ __proto__: __count__ })\") for (((this[true]))(3.isPrototypeOf(<y><z/></y>)) in <y><z/></y>) for (__noSuchMethod__ in <><x><y/\f></x></>) for each (__noSuchMethod__ in *::*))) {export constructor;-0; }");
tryItOut("with({__count__: <bbb xmlns=\"(eval).call( \"\" , )\">yyy</bbb>}){yield <><x><y/></x></>;{yield  /x/ ;const constructor = this; } }");
tryItOut("if(({}).__defineSetter__(\"__noSuchMethod__\", (<x><y/></x>).__defineSetter__)) yield; else  if ((({a2:z2}) for each (__proto__ in 033))) yield; else continue M;");
tryItOut("let  /x/ ;");
tryItOut("for(let y in [5,6,7,8]) (function (__proto__, __parent__) { yield *; } ).call(<><x><y/></x></>, [1,,])['{(*::*); }'] = __parent__;");
tryItOut("( /x/g )");
tryItOut("yield;");
tryItOut("/*infloop*/L:while(eval(\" \\\"\\\" \\f;\", prototype)){yield <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x><y/></x> !== <><x><y/></x></>) window;");
tryItOut("gc()");
tryItOut("/*for..in*/for(constructor = constructor = -(constructor.eval(true)) in __proto__ = prop) {/*infloop*/while( \"\"  for each (prop in window)){;return __iterator__; } }");
tryItOut("/*for..in*/L:for(const constructor in ({ set __count__ __proto__ (__proto__, constructor) { yield prototype.(3.141592653589793) }  })) {/*for..in*/for(var [__proto__, <x/>] = -0 ? null : <><x><y/></x></> in <><x><y/></x></>) { } }");
tryItOut("if(this) {yield 1e4;prop; } else return;");
tryItOut("L:if((window |= -0)) {yield; } else yield undefined;");
tryItOut("/*infloop*/for(const ({ __parent__: ({ __parent__(each.__iterator__ getter= /a/gi): prototype, prop: ({ __noSuchMethod__: ({ __count__: __parent__ }), prototype: [, , prop, ] }) }), __noSuchMethod__: [] }) = function::__parent__.__parent__ getter= Math.pow.yoyo(new (<x/>)()\n); Math.pow(*::*, true) - *::* >>>=[]; undefined) L: {gc() }");
tryItOut("/*infloop*/for(1e81.eval(-3/0).watch(\"prop\", (__parent__ = window).__defineSetter__);  '' .__parent__.__count__; (~yield true)) yield  /x/ ; const prop;");
tryItOut("/*for..in*/for(__parent__ in (('haha'.split)(false)))if(<x><y/></x>.__noSuchMethod__.throw(new <x><y/></x>((function ([y]) { })()))) break ; else  if (var __proto__;) {yield 5.0000000000000000000000; } else {true }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop(<><x><y/></x></>) in <><x><y/></x></>) throw constructor;");
tryItOut("switch(__noSuchMethod__.constructor) { case 3: break; case 0: throw  /x/ ;break;  }");
tryItOut("while((__noSuchMethod__ = <x/>) && 0){/*infloop*/do ; while( /x/  >>>=<><x><y/></x></>); }");
tryItOut("/*infloop*/while( * ({prop: (window)(), __proto__: true })){/*infloop*/do {export prototype; } while(__proto__.__count__ setter= gc);yield <x/>; }");
tryItOut("/*infloop*/do { \"\" ;__parent__; } while((({__noSuchMethod__: <x/>--}).__lookupGetter__(\"__count__\")));");
tryItOut("/*for..in*/for(const __count__ in ((({}).__lookupGetter__)(let (prop = <x/>)  /* Comment */this))){return <><x><y/></x></>;break M; }");
tryItOut("/*for..in*/for(const __count__ = <x><y/></x> in <x/>) var __iterator__ = <><x><y/></x></>;/*infloop*/for(var [] = //h\n#2=[*::*]; __parent__ = [z1,,]; true.valueOf(\"number\")) {return window; }");
tryItOut("/*for..in*/for(const __iterator__ in ((/a/gi)(*::*))){throw [];gc() }");
tryItOut("/*infloop*/while(__noSuchMethod__(this) = *::*.__noSuchMethod__){export prototype;export prop; }");
tryItOut("{var prop =  /x/g , break M;; }");
tryItOut("if(( /x/  ? (this.zzz.zzz) : this.__defineGetter__(\"__parent__\", (function(y) { yield y; gc(); yield y; }).call))) if(3) {{}yield <x><y/></x>; } else  if (this) let prototype, __noSuchMethod__ = #3={a:#3#}; else  else  if ((constructor.valueOf(\"number\"))) {} else export __noSuchMethod__;");
tryItOut("return;\nlet constructor = *, prop = __count__;\n");
tryItOut("let (prototype = <><x><y/></x></>) { break ; }");
tryItOut("/*for..in*/M:for(let (__count__) in (((__count__ = \n<><x><y/></x></>).\nwatch)(constructor.(<bbb xmlns=\"<y><z/></y>\"><ccc:ddd></ccc:ddd></bbb>))));");
tryItOut("if(prop = null.prop) {this; }");
tryItOut("with({}) { return constructor = (yield *); } ");
tryItOut("export *;");
tryItOut("switch(__iterator__.__iterator__ setter= [1,2,3,4].slice) { default:  }");
tryItOut("do {(@foo).watchreturn; } while((window > 0x99) && 0);");
tryItOut("if(((-1) for each (getter in  /x/ ))) M:switch(null) { default: break; case [[]]: break; case 5: const __iterator__;break; case null: (@foo);export __count__;break; case <><x><y/></x>/*\n*/</>: break L;{}break; <x><y/></x>; } else  if ((*.__lookupSetter__(\"__count__\"))) do yield; while((undefined) && 0);");
tryItOut("if(window) {const constructor = 0/0, constructor; }");
tryItOut("L: {return;__proto__ = <><x><y/></x></>, constructor = <x/>; }");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(__count__ in  /x/g ) {L: {\n;__noSuchMethod__ }break ; }");
tryItOut("M:with((\n(window ? prop : this)))const __proto__;");
tryItOut("if(window) {gc() } else {export __noSuchMethod__; }");
tryItOut("if(<xxx {__proto__\f}={(p={}, (p.z = [,,])())} />.((eval).call(this.@foo, ((function () { return  /x/g  } ).call)\t.call((function ([y]) { })(), <x/>, true), window))) var __iterator__ = [[]], prototype = <><x><y/></x></>; else  if (<><x><y/></x></>.yoyo(*)) {{M:with({__noSuchMethod__: null}){export __noSuchMethod__; }let (prop, prototype = <y><z/></y>) { continue ; } } }");
tryItOut("while((new ([1,2,3,4].map)(({__count__:  >>> (eval(\"if(<><x><y/></x></>) {; } else  if (<x><y/></x>) (function ([y]) { })\\t; else {;return <y><z/></y>; }\", 4.))}))) && 0)M:if((<x><y/></x> ).throw((window ? undefined : function ([y]) { }))) {export *;var prop, prop = <x><y/></x>; } else  if ((uneval(undefined)) ? __noSuchMethod__ : 'fafafa'.replace(/a/g, (({}).hasOwnProperty).call)) const constructor = [,], prop\t; else break\t L;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = prototype = prop === (get) ? (prototype.__lookupSetter__(\"constructor\")) : (prototype%=((({ get __count__() { export *; }  })).__defineSetter__(\"constructor\", function (constructor) { try {  } catch(__noSuchMethod__ if (function(){({}).__lookupGetter__})()) { continue L; } catch(__noSuchMethod__) { export *; }  } ))) in __iterator__.constructor getter= new Function.@foo) /*for..in*/M:for(const __parent__ = __iterator__ in <><x><y/></x></>) {return;const __proto__ = this, constructor = <x/>; }");
tryItOut("/*infloop*/M:for(const ({ prototype: ({ prop: ({ __noSuchMethod__: ({ __count__: function::__noSuchMethod__, prototype: __noSuchMethod__ }), __count__: ({ prop: __parent__ }) }), __iterator__: ({ prop: ({ constructor: __iterator__, __parent__: __iterator__ }) }) }), __proto__: [constructor, __noSuchMethod__, , ({ __parent__: ({ prop: __proto__, __proto__: __parent__ }) }), ({ __proto__: ({ prototype: __iterator__, prop: prototype }) })] }) = ({constructor setter: function(q) { return q; }, prop: false :: [[]] }); (<xxx>{prototype}</xxx> for each (__iterator__ in <><x><y/></x></>)).@*; [1] > prototype , ([<y><z/></y> if (<x><y/></x>)]) * ><x><y/></x></>.__defineGetter__(\"__iterator__\", (new Function).apply).unwatch(\"__parent__\")) {}");
tryItOut("continue ");
