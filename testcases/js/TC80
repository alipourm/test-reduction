
tryItOut("L: case 3: default: break; case 6: break; break; yield 3/0;case 2: gc(), __parent__;");
tryItOut("{}");
tryItOut("M:if(\nnew (new Function(\"yield *::*;\"))('fafafa'.replace(/a/g, new Function))) {continue M;export *; } else  if (new 'haha'.split(true, <y><z/></y>) && #1=this) {return; }");
tryItOut("for(let y in [5,6,7,8]) for(let y in [])\n");
tryItOut("let (__parent__, __parent__ = this) { export constructor; }");
tryItOut("[1,2,3,4].map");
tryItOut("__parent__\n");
tryItOut("switch((this.__defineGetter__(\"setter\", eval))\t) { case 1: export *;\nreturn <><x><y/></x></>;\ndefault: evalbreak; return false; }");
tryItOut("/*for..in*/for(let __parent__\f in *::*) const __noSuchMethod__ = *::*, __proto__ = ({a1:1});");
tryItOut("with({__proto__: (({ prop: prototype, constructor: ({ __parent__: function::__count__ }) }) = <><x><y/></x></>.watch(\"__count__\", 'haha'.split))}){({}).__lookupGetter__/*infloop*/while((-0)){}\t }");
tryItOut("/*infloop*/while(constructor *= [[1]]){ }");
tryItOut("/*infloop*/do with(<x><y/></x>){case (*)( \"\" ,  /x/ ): (false).__defineSetter__break;  } while(this[<y><z/></y>]);");
tryItOut("{__iterator__, __parent__;throw *; }");
tryItOut("{}\n");
tryItOut("/*for..in*/for(const __parent__.__count__ in ((function(y) { yield y; yield;; yield y; })((prototype)[<x/>]))){/*infloop*/while(<x><y/></x>)export *; };");
tryItOut("/*infloop*/do {export __count__; } while(( \"\" .__proto__));");
tryItOut("/*for..in*/for(__count__ = <><!--yy--></>.yoyo((<x><y/></x>.@*--) === prototype(try { export *; } finally { export prototype; } )) in [( /* Comment */*) for each (prop in false)]) {return #3={a:#3#}; }");
tryItOut("[, ] = constructor;");
tryItOut("L: { }");
tryItOut("var constructor = __iterator__, __noSuchMethod__ = (-1);\n\n");
tryItOut("/*for..in*/L:for(const setter =  if (<x><y/></x>) >= prop = <x/>.isPrototypeOf(@foo.eval(null)\n) in ++[15,16,17,18].map([1,2,3,4].map, window).*) {/*infloop*//*\n*/while(@foo.yoyo(@foo))let __noSuchMethod__, __proto__ = (-0); }");
tryItOut("for(let y in []);");
tryItOut("L:if(null) { if ( \"\" ) {return; } else {throw -1; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in *::*) __parent__");
tryItOut("/*for..in*/M:for(this.isPrototypeOf(<><x><y/></x></>)['__parent__'] in  /x/g ) for(let y in []);");
tryItOut("M:while(( /x/g ) && 0){gc() }");
tryItOut("while((__parent__.__iterator__ = (*.@*)) && 0){const __parent__, __noSuchMethod__ = <x/>; }");
tryItOut("switch(constructor: <{__noSuchMethod__}><zzz>(let \f(prototype = 3, x::__count__ = [,,]) <x><y/></x>)</zzz><!--yy--></{__noSuchMethod__}>) { default: break; break; case (<x><y/></x> /= 0): gc()break;  }");
tryItOut("if(window) {if(constructor.__lookupGetter__(\"__count__\")) yield; else  if (prop.__noSuchMethod__) {} else {;return function(id) { return id }; } } else  if (__proto__ = <employee id=\"1\"><name>Joe</name><age>20</age></employee>) if((__count__ = ({}))) throw window;");
tryItOut("export constructor; const __count__;");
tryItOut("/*infloop*/L:\tfor(var __parent__; .2; true) throw @foo;");
tryItOut("do {yield *; } while((default: (<><x><y/></x></>).watchbreak;  = [1,,]) && 0);");
tryItOut("/*infloop*/for(__proto__; Object(@foo, *) * (__proto__ && 1e81); ('fafafa'.replace(/a/g, 'haha'.split))) let (__proto__, prop = 033) { export constructor; }");
tryItOut("/*for..in*/for(let [set, __count__] = @foo in <x><y/></x>) {export prototype; }");
tryItOut("/*infloop*/for(__parent__;  /x/g ;  \"\" ) export <x><y/></x>;");
tryItOut("/*for..in*/for(const prototype = eval(\"yield;\", prop.__iterator__ = <x/>) in  /* Comment */ ''  .. 'fafafa'.replace(/a/g, function(q) { return q; })) /*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in ({a2:z2})) constructor;");
tryItOut("/*infloop*/for(const prototype = __iterator__; <><x><y/></x><\r/>; @foo) {break L; }\n");
tryItOut("M:switch(undefined) { default: break; function  __parent__ (let) { return; } yield;break; break; case <x><y/></x>:  } const prototype;");
tryItOut("{var setter; }");
tryItOut("if(((Math.pow(window, <x><y/></x>)) %= __proto__.__defineGetter__(\"__proto__\", function  __iterator__ () { yield * } ) if (1e81))) {/*for..in*/L:for(({ prototype: prop, __proto__: __proto__ }) in ((/a/gi)(\n({})))){export prototype; }{constructor; const prototype;(constructor); } } else  if ([11,12,13,14].some) for(let y in []); else export *;");
tryItOut("/*infloop*/do /*infloop*/for(let __count__; ((yield [,,] ? window : __parent__)); (prop = 0/0)) {; } while(<x/>[0/0((<)x if (<y><z/></y> .@*:: (-0)) ><y/></x)]);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var (eval(\"1e+81\", *)).prototype in (<><x><y/></x></>++)) {yield;(1e4);\n{}\n } }");
tryItOut("do {export *; } while((*) && 0);");
tryItOut("/*infloop*/L:for(({prop setter: (1 for (x in [])) }); [15,16,17,18].some(({}).__lookupGetter__, [[1]] >>> *); (__iterator__-=<y><z/></y>.eval(prototype))) yield;");
tryItOut("let (__proto__, __proto__) { ; }");
tryItOut("return 4.;");
tryItOut("let prop = (@foo).apply(), __iterator__ = <y><z/></y>\nthis.zzz.zzz;");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((\tfunction(y) { yield y; if(\n(prototype =  /x/g )) { if (function(id) { return id } ^= <x/>) {export __proto__;{} } else {yield *::*; }}; yield y; })(=.throw( \"\" ))))1e-81;");
tryItOut("{return; }");
tryItOut("if(<><x><y/></x></>) let let; else  if (<><x><y/></x></>) {}");
tryItOut("while((__count__) && 0){L: {export prop;(<x><y/></x>); }export *; }");
tryItOut("if(prop-=-0 .@x:: window || prop = 4.) { if (<><x><y/></x></>.unwatch(\"__noSuchMethod__\").constructor) continue M; else return;}");
tryItOut("/*for..in*/for(const x::constructor in (((new Function(\"( /x/g );\")))(typeof <y><z/></y>.__defineGetter__(\"__noSuchMethod__\", (gc).call)\n))){/*infloop*/do {gc() } while(<><x><y/></x></>);gc() }");
tryItOut("if(__proto__%=((gc)(constructor, __noSuchMethod__))) { if ((<x><y/></x> instanceof .prototype setter= true)) prototype, __proto__} else return;");
tryItOut("try { export *; } catch(prototype) { <x><y/></x>; } ");
tryItOut("if((window.__lookupSetter__(\"prop\")()) .@x::  \"\" \n((<><x><y/></x></>.valueOf(\"number\")),  /x/g )) {Function } else  if ((<><x><y/></x></>)(window.prototype = __iterator__)) {let(__proto__, prototype = <><x><y/></x></>) { ; }");
tryItOut("if(__iterator__) { if (({ __iterator__: ({ __parent__: prototype }), __noSuchMethod__: ({ __parent__: __parent__, prototype: __iterator__ }) }) = [(this.__defineSetter__(\"__count__\", gc)) for (__iterator__ in @foo) if (#3={a:#3#})] >>> 'fafafa'.replace(/a/g, (1 for (x in [])))) {/*for..in*/L:for(let prototype = (<x/> << @foo)(( /x/g .unwatch(\"prop\"))) in true) export *; }} else const get;");
tryItOut("{M:if(null) { if (<x><y/></x>)  /x/g ;} else yield; }");
tryItOut("(new Function(\"switch( '' ) { default: case 2: gc()break; ;break; yield;case this:  }\"))\nif(this) { if (@foo) [1,2,3,4].map else {return; }}\n");
tryItOut("0x99");
tryItOut("with({__count__: ({a1:1})})return;");
tryItOut("while((__count__) && 0)prop = null, delete\n");
tryItOut("L:do return  '' ; while((prototype.prototype = __count__ = Date()) && 0);");
tryItOut("L: {throw #1#; }");
tryItOut("do M:if(*) { if (<>[], __proto__</>)  { return undefined }  else {throw <><x><y/></x></>;break M; }} while(((*).__defineSetter__) && 0);");
tryItOut("/*infloop*/for(const ({ __proto__: ({ prototype: constructor, __proto__: [[, [, ]], ] }) }) =  '' ; __iterator__; ) gc");
tryItOut("yield true;");
tryItOut("throw __parent__; const __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("{switch((function(y) { yield y; return;; yield y; }).call(this, )) { default:  } }");
tryItOut("M:if(__parent__) M:with({__noSuchMethod__: (( \"\" )(<x><y/></x>, <x><y/></x>)) !== [undefined]})var prototype; else  if (<bbb xmlns:ccc=\"__count__ = *::*\"><ccc:eee></ccc:eee></bbb>.(undefined.valueOf(\"number\"))) {yield; } else /*infloop*/M:for(const ({ __parent__: __proto__ }) = \tprototype--; ; 'fafafa'.replace(/a/g, ({}).__lookupGetter__)) {gc() }");
tryItOut("L:switch(*) { case *::*: break;  }");
tryItOut("switch(\n<x/>) { case 9: break; default: break; break;  }");
tryItOut("M:if(\tnew ((eval(\"<x><y/></x>.__lookupSetter__(\\\"prototype\\\")\", (yield prototype))).eval(([15,16,17,18].map(Math.sin, prototype).__defineGetter__(\"__proto__\",  \"\" ))))()) throw <><x><y/></x></>; else  if (()) return ({a2:z2}); else {constructor = *;function (__count__) {  }  }");
tryItOut("/*for..in*/M:for(prop.prototype in ((({}).__lookupGetter__)((0x99.__lookupGetter__(\"constructor\").__count__)))){;gc() }");
tryItOut("const __proto__ = <x><y/></x>;");
tryItOut("/*for..in*/for(const prototype = -1\n in \tconstructor in (__parent__.constructor getter= 'haha'.split)) {export *;M:with({prototype: <><x><y/></x></>.throw(3.141592653589793)}){(1e-81);; } }");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/for(__noSuchMethod__ = ([1,2,3,4].map)(); this.throw(<x><y/></x>); function(q) { return q; }(\f.2 >>>=(((new Function(\"([1,2,3,4].map).apply\"))).call( /x/g , )))) export *;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = (eval(\"(({}))(\\fprototype: undefined, <><x><y/></x></>)\", (<x><y/></x> if ( '' ))).__iterator__ = [<><x><y/></x></>].valueOf(\"number\")) in prop.prop getter= function () { yield <y><z/></y> } ) yield; const function::__proto__;");
tryItOut("/*for..in*/for([prototype, __count__] = (((p={}, (p.z = false)()) &= __count__ >>= <><x><y/></x></>).throw(((__count__ = [1,,]) in (__parent__ if (@foo))))) in <x/>.__defineSetter__(\"__count__\", 'haha'.split)) {yield __noSuchMethod__;const __noSuchMethod__ = undefined; }\n");
tryItOut("/*infloop*/for([({ __iterator__: prototype, __iterator__: __count__ }), ({ __iterator__: __parent__, __count__: ({ prop: prop }) }), , ] = new prototype(); <><bbb xmlns:ccc=\" /* Comment */window\"><ccc:eee></ccc:eee>\t</bbb></>; (constructor.constructor getter= eval)) {if( '' ) { if (constructor) {yield 0/0; }} else {gc()return <x><y/></x>; }var __noSuchMethod__, delete = this; }");
tryItOut("let (({ __count__: constructor }), ({ __noSuchMethod__: ({ __count__: ({ __proto__: __proto__ }), __count__: ({ constructor: prototype, prototype: __noSuchMethod__ }) }) })) { M:if(<><x><y/></x></>) <x><y/></x> else gc()let __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/><\f/x>) {gc()return <x><y/></x>; }");
tryItOut("/*infloop*/while(__parent__){export __noSuchMethod__; }");
tryItOut("/*infloop*/for(var [[[prototype], ({ __proto__: [] }), __proto__, ({ prototype: ({ constructor: ({ __noSuchMethod__: __count__, prop: getter }) }), __proto__: ({ __iterator__: prototype, __noSuchMethod__: prototype }) })], __iterator__] = [,].@*.unwatch(\"constructor\");  '' .hasOwnProperty(\"<zzz><x/> === [[1]]</zzz>\"); ((<x/>(this, __parent__)))[[11,12,13,14].filter , __proto__.unwatch(\"prop\")]) {return <y><z/></y> ? <y><z/></y> : <x/>; }");
tryItOut("(<x><y/></x>);");
tryItOut("/*for..in*/for(var prototype = ({ set function::prop(prototype) { return; } ,  get __noSuchMethod__ __iterator__ () { yield prop; }  }) in *::*) throw [[]];");
tryItOut("{if(__iterator__) { if (false) {yield true;; } else yield;} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor((__iterator__ ? this : __proto__)) in (<><x><y/></x></> == @foo)) {function  __proto__ (__parent__, prototype)0/0throw var __parent__ = this, __noSuchMethod__;; }");
tryItOut(" /* Comment */<x/>");
tryItOut("/*infloop*/for(false[undefined]\n; (); __count__.__noSuchMethod__ = *::*[(yield <x/>)]) export __proto__; const constructor;with(@foo)yield ({});");
tryItOut("with(this.zzz.zzz){/*for..in*/for(var __proto__ = undefined.__lookupSetter__(\"__count__\") in <x><y/></x>, 0/0) {if( '' ) { if (@foo) continue ;} else {yield __iterator__;return undefined; } }{} }");
tryItOut("/*infloop*/while(this.__defineSetter__(\"__iterator__\", function  __count__ (prototype) { yield true } )){var constructor, __iterator__;function(q) { return q; } }");
tryItOut("L: {}");
tryItOut("if((yield)) break L; else {if(3) {{}\r } else constructor;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for([, constructor, ] = <x/>.propertyIsEnumerable(\"__parent__\"); ( /* Comment */(__proto__, __parent__ = [1,,];.hasOwnProperty(\"prototype\")) & let prop = undefined\n); ( '' .__proto__ = <x><y/></x>)) {1.2e3 }");
tryItOut("{(.2); '' ; }\n/*infloop*/M:for(const __noSuchMethod__; undefined; (({getter: (<><x><y/></x></> += <x><y/></x>) }))) { /x/ ;yield; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((function () { /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <><x><y/></x></>) {{} } } )(__noSuchMethod__)))/*infloop*/while()var __parent__;");
tryItOut("L: ");
tryItOut("/*for..in*/M:for(var __iterator__ in ((null)((__count__ = (this || <x/>\t))))){M:if(new this(this)) { if ((function  __proto__ (prototype) { gc() } (__noSuchMethod__ = (-0), <x/>))) {yield 033; } else export __count__;} }");
tryItOut(" null ");
tryItOut("with({__noSuchMethod__: __noSuchMethod__ = ({__iterator__: (<x/>.__noSuchMethod__), __proto__: this.watch(\"constructor\", function  __noSuchMethod__ ()__noSuchMethod__, constructor) })}){/*for..in*/for(const [__parent__, __proto__] = [prototype, __count__].sort(({}).__lookupGetter__) in <><x><y/></x></>) {/*infloop*/L:do { } while(<><x><y/></x></>);{\t} }/*for..in*/for(let  { return window }  in <><x><y/></x></>) return arguments; }");
tryItOut("/*infloop*/M:for([__count__, , ] = yield <x><y/></x>; prop = (new ('haha'.split\n)()); ()(( = window || <>\t<x><y/></x></>)).watch(\"prop\", ([1,2,3,4].map).call)) ");
tryItOut("/*infloop*/do /*infloop*/for((eval(\"/*infloop*/for( /x/ ; __noSuchMethod__; false) ;\", 033)); (<><x><y/></x></>.__lookupSetter__(\"prototype\")).__count__.__defineSetter__(\"__count__\", function(y) { yield y; ; yield y; }); ((<x><y/></x> if (window)).__defineSetter__(\"prototype\", function  __parent__ (constructor, prototype) { return <x><y/></x> } ))) {throw @foo;; } while(this.__defineGetter__(\"__count__\", <x><y/></x>(__iterator__)).throw(<x><y/></x>.( '' )));");
tryItOut("/*for..in*/for(let __proto__ in let (prototype = [11,12,13,14].some, __iterator__ = *::*) (__noSuchMethod__))  if ([, constructor, ] = (( ''  if (true))))");
tryItOut("if(*) {Functionyield; }");
tryItOut("this.zzz.zzz;");
tryItOut("{var prototype = <x><y/></x>, function::__count__ = <x><y/></x>; }");
tryItOut("/*infloop*/for(({ prop: (<><x><y/\f></x></>)(3) }) = ( /x/  !== <x><y/></x>); (__parent__ = window); ({__parent__ setter: ({ __count__: [__count__, prototype, , constructor], prototype: ({ __iterator__: prop, __proto__:  /x/  })\t }), <x><y/></x>.yoyo(this): [1] >>= #1=[#1#] })) {continue ; }");
tryItOut("yield;");
tryItOut("while((__noSuchMethod__) && 0){/*for..in*/for([__count__, __iterator__] = this for each (__iterator__ in <><x><y/></x></>) in (prop)( /x/ )-=(true.__defineSetter__(\"__iterator__\", <y><z/></y>)))  { return #1=[#1#] } ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in *::*) /*for..in*/for(let __iterator__ = <x/> in *) throw @foo;");
tryItOut("/*infloop*/for(const ({ __iterator__: constructor }) = 'fafafa'.replace(/a\t/g, 'haha'.split); @foo; Boolean(<x/>, ([11,12,13,14].filter))) /*infloop*/for(*::*; <x><y/></x>; (0/0[@foo])) yield [1,,];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y/></x>) {{}{} }");
tryItOut("with({}) { return function ()<><x><y/></x></>(eval(\"M:if(<><x><y/></x><\\f/>) { if (false) {continue L; } else return 3/0;}\", false)); } ");
tryItOut("/*infloop*/for(const [] = (eval(\"0x99 \\\"\\\" \", eval(\"{}\", function(id) { return id })))--; <></>; <><x><y/></x></>[this]) {return; }");
tryItOut("{if(yield ({ __proto__: ({ __parent__: prop, __iterator__: prototype }), __proto__: ({ prop: __count__ }) }) = [, , [, prop, constructor, prototype], ({ __noSuchMethod__: let, constructor: __noSuchMethod__ }), prop]) {break ;return <><x><y/></x></>; } else  if (prototype) {return; } }");
tryItOut("/*for..in*/for(var ({ __count__: ({ __count__: prototype }) }) in (((((<zzz>(* == window)</zzz>.((\n__iterator__)))[this.zzz.zzz.yoyo(<><x><y/></x> </>)])).watch)(0.1))){export *;L:with({__noSuchMethod__: prototype = #3={a:#3#}.__proto__})return; }");
tryItOut("yield 0.1;\nreturn;\n");
tryItOut("if(((yield <x><y/></x>))()) { if ('fafafa'.replace(/a/g, this).constructor) gc()} else (window).__defineSetter__");
tryItOut("let (__proto__ = (* % __proto__)) { {} }");
tryItOut("const prop;");
tryItOut("/*for..in*/for(var __parent__ = eval(\"[[]]\", <> prop <x><y/></x></>) - @foo in window) ;");
tryItOut("L:with({__noSuchMethod__: (Function)(this, <><x><y/></x></>)}){return;yield <y><z/></y>; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in function (__noSuchMethod__) {  } ) {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop.__parent__ in  /x/  !== ({a2:z2}) || new (this)()) {export __iterator__\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in __parent__) yield;\nyield <><x><y/></x></>.__count__;\n");
tryItOut("(@foo);");
tryItOut("[,,z1], __iterator__ = (<x><y/></x> +  \"\" ) = __count__;");
tryItOut("break M; const __proto__;");
tryItOut("{ /x/g ; const __proto__; }");
tryItOut("this.zzz.zzz;");
tryItOut("function(y) { yield y; gc(); yield y; }");
tryItOut("{export *;gc() }");
tryItOut("if(__count__ = <bbb xmlns:ccc=\"<y><z/></y>.propertyIsEnumerable(\"__count__\") < <x><y/></x> >>>=<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>) {/*for..in*/for(let [prop, __iterator__] = *::* in <x/>) ([]);return window\nreturn  /x/ ; }");
tryItOut("let (constructor = setter = __proto__) { yield; }");
tryItOut("let ([, , , , ] =  /x/  .@x:: constructor.__count__ =  /x/g , prop = (([11,12,13,14].some))) { L:if(*::* >> <x><y/></x>) var prototype; else  if (<x/> = <x/>) this;\nyield;\n }");
tryItOut("if(4..propertyIsEnumerable(\"__proto__\").propertyIsEnumerable(\"__noSuchMethod__\")) if(constructor) {yield; } else return;");
tryItOut("/*infloop*/thisfor(var constructor; new (({}).__lookupGetter__).apply((__iterator__), 0.1); <x><y/></x>.hasOwnProperty(\"__proto__\")) {yield; }");
tryItOut("if(@foo\n) { if (undefined.isPrototypeOf(window)) throw null; else {export *;{} }}\n/*for..in*/M:for(var __noSuchMethod__.__count__ in (([1,2,3,4].slice)(this))){if(<><x><y/></x></>)  { return  ''  }  else  if ({}) {gcyield *; } }\n");
tryItOut("M:if(('haha'.split)) with({__noSuchMethod__: (({__noSuchMethod__: window}))}){__parent__;this }");
tryItOut("with({}) { return; } ");
tryItOut("/*for..in*/for([constructor, __parent__] = <x><y/></x> in *) {prop = window, prototype =  /x/ ; }");
tryItOut("yield <><x><y/></x></>.unwatch(\"prototype\");__noSuchMethod__ = <><x><y/></x></>, constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const ([true])(<x/>) in yield <x><y/></x>[window.__defineGetter__(\"constructor\", Math.pow)]) {throw export *;/*for..in*/for(const prototype in {}.@*) {M:switch(<x/> *= 3) { case __parent__ =  /x/ : return window;break;  } } }");
tryItOut("let(__parent__ = ('fafafa'.replace(/a/g, new Function)), prototype) ((function(){try { __iterator__ = prop; } finally { try { false; } catch(__parent__ if (function(){var __parent__;})()) { let __proto__, prop = *::*; } catch(__iterator__ if (function(){export __count__;})()) { throw <y><z/></y>; } finally { {} }  } })());");
tryItOut("M:if((((function ([y]) { })().yoyo(<x><y/></x>)) instanceof <x><y/></x\t>\r)) {L:switch(( /x/ .unwatch(\"__iterator__\"))) { case 2: yield;break;  } } else throw  \"\" ;");
tryItOut("var constructor, __count__;\n/*for..in*/for(var [constructor, prop] = <><x><y/></x></> in <y><z/></y>) {yield; }\n");
tryItOut("if(__noSuchMethod__.__noSuchMethod__ getter= ({}).hasOwnProperty) [1,2,3,4].map else  if ((yield  \"\" )) export *;");
tryItOut(";throw 033;");
tryItOut("yield;");
tryItOut("let (__parent__, prototype = ((<x/>).call(constructor, <x><y/></x>))) { /*infloop*/do {; } while((\nwindow)); }");
tryItOut("M:with({__count__:  /x/ })gc()");
tryItOut("return;");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(let __noSuchMethod__((*::*.__defineSetter__(\"constructor\", /a/gi))) in ((( \"\" ).__defineSetter__)(undefined))) {if(@foo) <><x><y/></x></> else  if (*) {function  __noSuchMethod__ () { return <x/> } ( /x/ ); } else export __noSuchMethod__; }");
tryItOut("let __iterator__ = [[]];\nvar __count__ = 0, prop;\n");
tryItOut("L: {/*for..in*/for(var delete in <x><y/></x>) return <x><y/></x>;__parent__ = <><x><y/></x></>; }");
tryItOut("let(__noSuchMethod__ = __parent__ = <y><z/></y>.__defineSetter__(\"prototype\", (constructor).__defineSetter__)) { let(constructor) ((function(){})());");
tryItOut("switch(prop: this.__defineGetter__(\"constructor\", ({}).hasOwnProperty) !== ((window)[*::*])) { case 7: break; /*infloop*/while([<x/>]);default: M:if(({a2:z2}) ? *::* :  /x/g ) { if (this) let __parent__, prototype = [,,]; else @foo;}case 3: return <><x><y/></x></>;case 5: /*infloop*/M:for(const __proto__ = 0; X; prop) \tvar __parent__, constructor = undefined; }");
tryItOut("/*infloop*/for(let ({ constructor: __count__ }) = __iterator__ = 033; (this if (this)); (p={}, (p.z = constructor)())) ({}).__lookupGetter__");
tryItOut("try { let(({ __proto__: prop, prototype: prototype }) = yield <><x><y/><\f/x><\t/>) { yield __parent__ = true; } catch(__count__ if 0/0.throw(false)) { return undefined; } catch(__count__) { yield; } finally { return new ((1 for (x in []))).call( \"\" .propertyIsEnumerable(\"__proto__\")); } ");
tryItOut("break ;");
tryItOut("/*infloop*/while([<x/>].map(<x><y/></x>)){let function::__iterator__; }");
tryItOut("while((<><bbb xmlns:ccc=\"--<employee id=\"1\"><name>Joe</name><age>20</age></employee>\"><ccc:eee></ccc:eee></bbb></>) && 0)yield (function  __parent__ (getter) { yield arguments } );");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var function::__noSuchMethod__ in ((function(y) { yield y; L:if(<><x><y/></x></>) { if (-3/0) {;export *; } else {{} }}; yield y; })([z1].__lookupSetter__(\"__proto__\"))))prototype, prop = <y><z/></y>;");
tryItOut("let(constructor, __noSuchMethod__) ((function(){for(let y in []);})());");
tryItOut("/*infloop*/for(let __count__;  /* Comment */true.*; let __iterator__ = <x/>, function::__count__.isPrototypeOf(((function () { yield (-1) } ).call(false, )))) ({ constructor: __iterator__\f, __parent__: __iterator__ }) = constructor;");
tryItOut("L: return -3/0;");
tryItOut("{let __proto__ = false, __count__;export __proto__; }");
tryItOut("if(\n(yield this)) {/*for..in*/for([prop.__iterator__, __count__] = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> :: this.__defineSetter__(\"constructor\", function(q) { return q; }).__proto__ in <><x><y/></x></>) {yield;return; } } else if(prop) { if ((<>__count__|=*::*</>.(<y><z/></y>))) {} else {;let (constructor) { yield; } }}");
tryItOut("do {if( \"\" ) yield;export getter; } while(( \"\" ++) && 0);");
tryItOut("<>with({}) { return; } </>");
tryItOut("/*infloop*/while(__noSuchMethod__.prop){throw true;L: {(<x><y/>//h\n</x>); } }");
tryItOut("/*for..in*/for((p={}, (p.z = __iterator__.__proto__ setter= (function (__count__) { {} } ).apply)()).prototype in constructor = true) /*for..in*/for/*\n*/(const __iterator__ in ((Function)(({__noSuchMethod__: prototype.__iterator__}))))throw <x/>;");
tryItOut("yield __noSuchMethod__;\n{}\n");
tryItOut("for(let y in [5,6,7,8]) (eval).call");
tryItOut("M:if(<x><y/></x>) { if (<x><y/></x>) (<><x><y/></x></>);} else {export *;; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __iterator__] = [11,12,13,14].some in constructor) {if( \"\"  < @foo) { if (<><x><y/></x></>++) break ;} else export *; }");
tryItOut("var prototype = *, let; const __parent__;");
tryItOut("L:if(<x><y/></x> .unwatch(\"constructor\")) {M:if(\targuments.__defineSetter__(\"__parent__\", Math.pow)) {continue M;return; } else  if ((__iterator__.__noSuchMethod__ setter= (new Function(\"(<x><y/></x>);\")))) throw 1e81; else (); } else {<y><z/></y>;/*for..in*/for(const [prop, prototype] = <x/> in __noSuchMethod__) const __count__ =  /x/g ; }");
tryItOut("if(this) { if (<x/>) yield; else {(-3/0); }}");
tryItOut("/*infloop*/for(let prop; (new Function).apply(<x><y/></,  '' ).@foo; __proto__ = *::* @ __parent__.unwatch(\"constructor\")) {return;gc() }throw (new Function);");
tryItOut("switch(this) { default: export *;break; throw try { break ; } finally { yield <><x><y/></x></>; } ;break; (this);break; {}break; yield ;break;  }");
tryItOut("/*infloop*/for([, ({ x::constructor: ({ __count__: ({ prototype: [[prototype, __iterator__, __noSuchMethod__, __parent__, ], , ({ __noSuchMethod__: constructor, constructor: __proto__ }), , ], __noSuchMethod__: prop }), prototype: ({ constructor: __count__, __parent__: [] }) }) })] = __iterator__ = <><x><y/></x></>; *.valueOf(\"number\"); ([({ __parent__: prototype }), , , , __proto__] = +this % -[1,,])) {/*infloop*/L:for(var __proto__; <><x><y/></x></>; -0) {var prop = <y><z/></y>, __proto__ = __noSuchMethod__; }L: {yield; }\n/*for..in*/for(let [__iterator__, delete] = #1# in prototype) \n }");
tryItOut("do {yield; } while((*::*.__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))) ^= (eval(\";\", <><x><y/></x></>))) && 0);");
tryItOut("const __count__;");
tryItOut("if((<x/>)(new this,  '' ) .. (<x><y/></x> /= @foo)) { if (this.__defineGetter__(\"prototype\", function(q) { return q; })) { }} else {yield; }");
tryItOut("/*infloop*/ get __noSuchMethod__ __proto__ ()window.__lookupGetter__(\"prototype\")");
tryItOut("/*for..in*/for(let __count__ = null ^= arguments in *::*) /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in ({__parent__: (this.unwatch(\"__proto__\")) })) const constructor, constructor = *;");
tryItOut("if(function::__iterator__ = return;) { if ((get. \"\" )) export *; else {var prototype = 3.141592653589793; }}");
tryItOut("while((constructor++) && 0)export prop;");
tryItOut("const constructor, constructor = *::*;");
tryItOut("/*for..in*/for(var [prop, __noSuchMethod__] = ({\f get prototype prop (__count__)__noSuchMethod__ = <x/> == <><x><y/></x></> }) in this.__defineSetter__(\"__count__\", Math.sin)) {( '' ); }");
tryItOut("/*for..in*/L:for(const [function::__parent__, __count__] = eval(\"L:if(window) {return arguments; } else  if (0) {{} }\", ({})) in undefined) {return; }");
tryItOut("(this);\nyield;\t\n");
tryItOut("/*for..in*/for(const [constructor, prop] = (([<><x><y/></x></>].filter(<x><y/></x>)))-- in prototype = (new ([1,2,3,4].slice)(window))) {let(__proto__, delete = undefined) ((function(){yield false;})());/*infloop*/for(let (<><x><y/></x></>)(this) = __proto__.prop; ({__noSuchMethod__: __parent__.prototype, prototype setter: (function (<x/>, <x><y/></x>) { yield <><x><y/></x></> } ).call }); constructor.__proto__ = 3) {;__parent__; } }");
tryItOut("throw StopIteration;");
