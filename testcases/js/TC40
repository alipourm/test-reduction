
tryItOut("switch(-1) { default: (<x/>); }");
tryItOut("switch(prop % 0/0) { case 8: if((__parent__.( \"\" ) .. ( /x/g .eval(__count__)))) { if (prototype .. __noSuchMethod__) var __iterator__ = <x><y/></x>, prop;} else ; }");
tryItOut("with( '' )M:if(<><x><y/></x></>) {const __count__, prop; } else  if (*) {; } else {const prototype; }");
tryItOut("{}\n;");
tryItOut("/*for..in*/for(const x::prop = 1e-81 in __parent__ |= *::*) M:with(let (prototype =  '' ) (new (<x><y/></x>)())){this; }");
tryItOut("if((eval(\"gc()\", (<x><y/></x>)(5.0000000000000000000000)))) {L: (x::prop); }");
tryItOut("L:if(#1=[#1#]) { if (()) {export __parent__;__parent__ = *::*, __parent__ = window; } else {var prop = __count__, constructor = null;<x><y/></x> }}");
tryItOut("L:with((this(<><x><y/></x></>).*(({ __iterator__: __iterator__, __count__: prototype }) = <><x><y/></x></>.__lookupSetter__(\"__count__\"), prop = __proto__))){let constructor; }");
tryItOut("do {<x><y/></x>; } while(([11,12,13,14].filter) && 0);");
tryItOut("let (set = ({ __noSuchMethod__: __count__ }) = constructor.((({__count__: \n /x/g }))), __count__) { L:if((#2=[<x><y/></x>] .@x:: this.__defineSetter__(\"__proto__\", function(y) { yield y; export function::prop;; yield y; }) <= [, , ] = (prototype.constructor setter= Math.pow))) {yield  /x/g ; } else  if ((@foo.valueOf(\"number\")) %= /*\n*/((p={}, (p.z = __iterator__)()))) {;/*infloop*/do export *; while(<x><y/></x>); } else {export *; } }");
tryItOut("L: /*for..in*/L:for(let [prop, __count__] = <x><y/></x> in <><x><y/></x></>) undefined");
tryItOut("M:if(this) { if (__count__ = #3={a:#3#}) {return; } else }");
tryItOut("yield constructor = <y><z/></y>;");
tryItOut("/*for..in*/for(let __iterator__ in ((eval)('fafafa'.replace(/a/g, 'haha'.split))))if(<><x><y/></x></>) {export __iterator__; } else  if (window) function  __iterator__ (prop) { yield *::* }  else ");
tryItOut("/*infloop*/while((<y><z/></y> if (__iterator__))){return  \"\" ; }");
tryItOut("with({__parent__: ()})let(__parent__) { for(let y in []);");
tryItOut("M:if(({ constructor: __noSuchMethod__ }) = (prototype =  /x/ ), ({ constructor: __parent__, __noSuchMethod__: prop }) = (([1,2,3,4].map).call).call(4., \r '' , this)) \fyield; else  if ((yield arguments) , [<x><y/></x> for (prop in prop)]) /*for..in*/for(const <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> = ([11,12,13,14].some) in  '' ) let prop; else {L:while((1e-81.constructor) && 0){{false; } }continue ; }");
tryItOut("throw  \"\" \n/*for..in*/M:for(let __iterator__ = (yield [[]]) in  /x/g ) throw [z1];");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = @foo in ({a1:1})) break ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function () { yield  \"\"  } )((this.__defineSetter__(\"__iterator__\", ({a2:z2})))))){return;export __iterator__;/*\n*/ }");
tryItOut("/*for..in*/for([__iterator__, prototype] = [] > <y><z/></y> in (function  prototype () { return * } )) {\fthrow undefined; }");
tryItOut("/*infloop*/while(__iterator__ = <x><y/></x>){break L/*; }");
tryItOut("/*infloop*/while(__parent__){}");
tryItOut("/*for..in*/const __noSuchMethod__ in (constructor)((function ([y]) { })())) /*infloop*/while(((<><x><y/></x></>)(this, true)))gc()");
tryItOut("/*infloop*/do {} while(new (<x><y/></x>).__defineSetter__\f(<x><y/></x>.(<x><y/></x>)));");
tryItOut("L: {var prototype; }\n");
tryItOut("/*for..in*/for(var constructor in <y><z/></y>) /*for..in*/for(let [__count__, __iterator__] = [,,z1] in 1.2e3) ");
tryItOut("__count__ = prototype;");
tryItOut("/*infloop*/while(<x/>)var prototype, __parent__\n/*for..in*/for(var __count__ = (<><x><y/></x></>\n) in <x/>) let prototype, __parent__ =  '' \nconst __proto__, __proto__;");
tryItOut("\fif((3/0.valueOf(\"number\"))) yield false; else  if (this.__defineGetter__(\"prototype\", Function)) let __noSuchMethod__ = <x><y/></x>; else  if ");
tryItOut("/*for..in*/for(let [[1], prototype] = this.__noSuchMethod__.__lookupSetter__(\"prop\") in (<x><y/></x>)[0.1]) {@foo; }");
tryItOut("/*for..in*/for(let __proto__ = null in (function ([y]) { })()) ( /x/g );");
tryItOut("yield (<><zzz>1e4.__noSuchMethod__</zzz></>.__count__);");
tryItOut("( \"\" ); const function::prototype");
tryItOut("L: {yield <y><z/></y>; }");
tryItOut("yield;throw -0;");
tryItOut("with({}) { <><x><y/></x></>['prop'] = prop; } ");
tryItOut("if( \"\" ) { if (<x><y/></x>) {export __iterator__; }} else {yield; }");
tryItOut("/*for..in*/L:for(const prototype = function(id) { return id } in arguments) default: export *;break; case *: var __count__, prototype = *::*;break; case 9: export __parent__;break; ");
tryItOut("if(this) {yield __noSuchMethod__;function(q) { return q; } } else  if (([(#0=[[]]) if (#1=({__proto__: constructor}))])) {export *\n }");
tryItOut("/*for..in*/for(let  \"\" .constructor in ((({}).hasOwnProperty)(constructor.prop))){(__count__);export *; }");
tryItOut("if((-0) ? arguments : <><x><y/></x></> &= +RegExp()) {let prototype\nlet __iterator__ = undefined;\nreturn <><x><y/></x></>;\n } else  if (null) /*for..in*//* nogeckoex bug 349964 */\t for  each(__parent__ in #1=[#1#]) yield;");
tryItOut("if( '' ) {{}; } else return;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("if(<x/>) {return false;; }");
tryItOut("/*infloop*/for((p={}, (p.z = (-1).unwatch(\"constructor\"))()).eval((new (__iterator__.__parent__)(null ? *::* : ({a1:1})))); ; ([1,2,3,4].map).call((Number(__noSuchMethod__ = <x/>)), ([1,2,3,4].map).\tcall(<y><z/></y>, <><x><y/></x></>))) do /*for..in*/M:for(var __iterator__ in (( '' )(<x><y/></x>))){false;(({a2:z2})); } while((__iterator__ = <y><z/></y>) && 0);");
tryItOut("/*for..in*/for([__iterator__, constructor] = false in __noSuchMethod__) \n");
tryItOut("(( '' .hasOwnProperty(\"__noSuchMethod__\")))([1,,]--)\nyield <x><y/></x>;\n");
tryItOut("with({}) for(let y in []);");
tryItOut("/*infloop*/L:for(__iterator__; (this.zzz.zzz >>= (eval(\"break ;\", *::*))); *) \nM:if(this) {export __iterator__; } else  if ([z1]) {export __parent__; } else {export __noSuchMethod__; }");
tryItOut("__proto__ = this;");
tryItOut(";\nprototype = <x><y/></x>;\n");
tryItOut("let(constructor =  /x/g , __proto__ = <y><z/></y>) { yield;");
tryItOut("{continue ;\tgc() }");
tryItOut("if(function  __parent__ () { return window } ) {throw <x><y/></x>; }");
tryItOut("if(([11,12,13,14].map)) {true;/*infloop*/\fdo continue L; while(<y><z/></y>); } else {(window); }");
tryItOut("{(*);throw <><x><y/></x></>; }");
tryItOut("let ([[]] = 0/0.hasOwnProperty(\"constructor\")) { break L; const __noSuchMethod__; }");
tryItOut("if(false) {yield __iterator__; } else  if (this.__lookupGetter__(\"constructor\")) export *; else var __noSuchMethod__ = window, constructor;");
tryItOut("L: export *;");
tryItOut("do throw <><x><y/></x></>; while((1.2e3) && 0);");
tryItOut("L:if(<><x><y/></x></>.__defineSetter__(\"constructor\", function(y) { yield y; yield <x><y/></x>;; yield y; }).yoyo([z1,,].prop = <x><y/></x>)) {return *::*; } else {({ __iterator__: __count__ }); }");
tryItOut("do /*infloop*/for(var prototype; <><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\"); ((p={}, (p.z = *)()))) {with(<x><y/></x>)([z1]); } while((__proto__.__noSuchMethod__ = (-3/0 for (__iterator__ in <><x><y/></x></>))) && 0);");
tryItOut("/*for..in*/L:for(var prototype = 1.3.__proto__ in false) {windowconst prop, __proto__ = *::*; }");
tryItOut("let(__count__ =  \"\" .throw(prototype).@foo) { let(__parent__ = (<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>.(__count__ = -3/0)), __noSuchMethod__ = (gc)) { __parent__ = __count__;");
tryItOut("if(__iterator__ = <x/>) { }");
tryItOut("with(__noSuchMethod__ = this){continue ;{} }");
tryItOut("if((constructor = constructor for each (constructor in <y><z/></y>) for each (__iterator__ in <x><y/></x>) for each (__count__ in window))) {return;switch(1.3) { case (1.2e3\n): yield; } } else {(function(id) { return id });M:if(__proto__) return; else (undefined);\r }");
tryItOut("/*infloop*/for(let [, , , , ] = ({ set __parent__ __noSuchMethod__ (R)<><x><y/></x></>, __proto__ setter: 1e+81 }).@foo; ([3/0 if (<><x><y/></x></>)].filter((new Function(\"yield;\")))); (this.__noSuchMethod__ if (prop))) const __parent__ = window, __iterator__ = *::*");
tryItOut("break ; const prototype;");
tryItOut("with(prop = undefined){ /x/g ;; }");
tryItOut("if(new Function) yield 1e4; else export *;");
tryItOut("for(let y in []);");
tryItOut("M:while((((window)(function(id) { return id }) = (this.__defineGetter__(\"__proto__\", /a/gi).hasOwnProperty(\"__iterator__\")))) && 0){/*infloop*/do {throw <><x><y/></x></>;(__count__); } while([ \"\" ].some(this));var __noSuchMethod__ = ({a2:z2})\ndo const __count__ = <><x><y/></x></>; while((<><x><y/></x></>) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in prototype.(__noSuchMethod__)) /*infloop*/for(#1# ? 0 : []; <x><y/>\r</x>; __noSuchMethod__.( /x/g )) (<><x><y/></x></>);");
tryItOut("/*infloop*/while(Function(void window).@*)let __proto__, __iterator__;");
tryItOut("M:if(@foo.propertyIsEnumerable(\"constructor\") > (@foo .@x:: <><x><y/></x></>)) { if (<x><y/></x> || undefined) do {export *; } while((prop) && 0); else var __proto__ =  '' ;}");
tryItOut("return undefined;");
tryItOut("with({}) throw __noSuchMethod__;");
tryItOut("\n");
tryItOut("/*infloop*/M:while(__noSuchMethod__ = [1,,])break ;");
tryItOut("/*for..in*/for(var function::function::__count__ in (([1,2,3,4].slice)(return <><x><y/></x></>.unwatch(\"__parent__\"))))/*for..in*/M:for(const __parent__ in ((@foo//h\n)(*)))yield <><x><y/></x></>;");
tryItOut("/*infloop*/for(var [, , [prototype], , __parent__] = new <x><y/></x>(true); yield window; !(((-1) for (__noSuchMethod__ in true)))) {prop; } const __parent__;");
tryItOut("if([11,12,13,14].filter) { if (({__iterator__:  /x/g \n,  get __iterator__() { ({}).hasOwnProperty }  })) break ; else {export *; }}\n");
tryItOut("with(RegExp((function ([y]) { })() >>>=__iterator__, constructor).unwatch(\"prototype\"))with({}) __parent__ =  /x/g ;");
tryItOut("{}\n");
tryItOut("while(([]) && 0)export *;");
tryItOut("if(window) {({}) } else  /x/g ");
tryItOut("/*for..in*/for(const (<><x><y/></x></>.unwatch(\"prop\"))\n.__count__ in ((Math.sin)(prototype.([#0=[*] >>>=(__count__ = true)].filter([1,2,3,4].slice).propertyIsEnumerable(\"constructor\"))))){do {let constructor = <><x><y/></x></>, __parent__ = <x><y/></x>; } while(((__noSuchMethod__) = <><x><y/></x></>) && 0);M:with({__iterator__: #1#}){continue ; } }");
tryItOut("/*infloop*/while(eval(\"[1,,]\", -0)){{}export *; }");
tryItOut("/*infloop*/do let \n(__noSuchMethod__ = this, prototype = <x/>) { if( '' ) ; else  if (?) {function  constructor ()-1throw true; } else {; } } while(new ((yield *))(__proto__ = <x><y/></x>));");
tryItOut("return (null >> *::*).__count__;");
tryItOut("switch((gc).apply) { default: break;  }");
tryItOut("let (__parent__ = (__proto__) ? [] = ({ __proto__: __parent__, prototype: function::prop }) : (__proto__|=-0)) { return +window; }");
tryItOut("Pwith((__proto__ *= (window / ({ set __noSuchMethod__ prop (<y><z/></y>) { ; } , prototype: 0/0 }))))throw <><x><y/></x></>;");
tryItOut("return (constructor = __count__);");
tryItOut("let (({ __count__: prototype, __count__: __proto__ }), __proto__ = 'fafafa'.replace(/a/g, [1,2,3,4].slice)) { export prototype; }");
tryItOut("if(( \"\" .watch(\"prototype\", 'haha'.split))[[(-0) if (.2)]]) { if (({get: __parent__ })) {yield; } else /*for..in*/L:for(const  for (({ let: prop }) in ([this])) for (x::__parent__ in *::*) in *) {export *;this }}");
tryItOut("if(eval(\"this.__defineSetter__(\\\"getter\\\", ({ __noSuchMethod__: __noSuchMethod__, prototype: __noSuchMethod__ }) = (<><x><y/></x></>)[<y><z/></y>])\", function ([y]) { } /= window)) {switch(true) { default:  } } else  if (function(q) { return q; }()(\n(<><bbb xmlns=\" '' \"></bbb></>.@foo), [[constructor/*\n*/, , prop, __parent__], , , , ] = @foo)) /*infloop*/while(undefined .@*:: arguments ? <y><z/></y> :  '' )const __proto__ = @foo;");
tryItOut("/*infloop*/for(const __parent__; arguments; <x/> @ *::*) /*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in this) \f");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__.__iterator__ in function ([y]) { })  { throw window; } ");
tryItOut("throw __iterator__;");
tryItOut("with(<x/>){/*infloop*/do function(y) { yield y; ;; yield y; } while((prototype = [11,12,13,14].sort))\n{throw  /x/ ; } }");
tryItOut("if(<><x><y/></x></>) { if (constructor) return <x><y/></x>; else {const __proto__, __noSuchMethod__ = <><x><y/></x></>;return null; }}\n");
tryItOut("with({}) { for(let y in [5,6,7,8]) return; } ");
tryItOut("{{; } }");
tryItOut("{yield;let constructor = 3, prop = <x><y/></x>; }");
tryItOut("if(\nundefined.constructor = this) { if ((uneval((Math.pow).call))) /*for..in*/for(const this.prop in ((@foo)([] /= [,,z1])));} else {{gc() } }");
tryItOut("/*infloop*/for(var __parent__.prototype.__proto__ = (.2 | @foo)(({a1:1}).isPrototypeOf(window)); (this.__defineGetter__(\"__count__\", ((prop)[<><x><y/></x></>]).__defineSetter__)) >>  /x/g ; <zzz>({a2:z2})</zzz>.(<>__noSuchMethod__ = <x/>.propertyIsEnumerable(\"__iterator__\")++</>)) {L:if((yield __parent__ = <x><y/></x>)) {__noSuchMethod__, prop; } else  if (this.__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)) export *; else {throw __proto__;export *; }do ; while(((gc())) && 0); }");
tryItOut("return;");
tryItOut("return;");
tryItOut("\fdo {function (__parent__, prototype) { yield <><x><y/></x></> } \nreturn;\n } while(((<x/>)()) && 0);");
tryItOut("with((true || [,,] += let (__proto__ = (this.__defineGetter__(\"constructor\", <x/>))) ({ get prop(__count__) { (function  prop (prototype, __iterator__) { \tyield <x><y/></x> } ).apply }  })))/*infloop*/for(<><x><y/></x></>; true; __count__) {{}continue L; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(set.prototype in ((function(y) { yield y; throw <><x><y/></x></>;; yield y; })(new function(q) { return q; }())))undefined;");
tryItOut("return <y><z/></y>;");
tryItOut("let (prop = (<y><z/></y>)()) { return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let (\twindow)(<x><y/></x>) in __parent__) {M:if(window) { if (*::*) *; else export prototype;} }");
tryItOut("/*for..in*/for(prop in ((function (constructor, ({ prototype: set })) { while((undefined) && 0)1e+81; } )((#1=[<y><z/></y>.unwatch(\"__proto__\")]))))for(let y in [5,6,7,8]) yield null;");
tryItOut("if(<><\nx><y/></x></>.__lookupGetter__(\t\"__iterator__\")) { if ((([11,12,13,14].map) for (({ __iterator__: __iterator__, __noSuchMethod__: __parent__ }) in __proto__))) export *;} else export __iterator__;");
tryItOut("export __proto__\nlet __noSuchMethod__");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if([1,,]--.__defineSetter__(\"prop\", function  __proto__ (__proto__) { yield <y><z/></y> } )) {break M; } else  if ((eval(\"yield this;\", undefined))) const function::__noSuchMethod__ setter: function(y) { yield y; yield;; yield y; }, __proto__;");
tryItOut("if(([1,2,3,4].slice)(#3={a:#3#}, yield \f(eval(\"this\", prop)))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in true) {; } } else  if (Math.pow) {return;if(null ===  \"\" ) {} else  if (this) const __parent__ = window, prototype =  \"\" ; } else {{let __proto__;const __parent__ = false; } }");
tryItOut("with({prototype: (<x/>.yoyo(G))}){M:with(null){; } }");
tryItOut("return;\neval\n");
tryItOut("if(\n@foo ^= __noSuchMethod__ =  /x/  != (void (-3/0\n.yoyo(([<>try { constructor = <><x><y/></x></>, __noSuchMethod__ = true; } finally { return @foo; } </>]))) for each (__iterator__ in __proto__.__count__ = ([* for each (__proto__ in @foo)])) if (*[yield <x><y/></x>]))) { if (1.3) if(__proto__ = __iterator__) {yield  '' \n; } else  if ((prop = *::* @ __proto__.(*::*))) {{} } else /*\n*/{__iterator__;while((false) && 0)yield; }} else return");
tryItOut("L: export *;");
tryItOut("M:do {\r{} } while((#2=<x><y/></x>.*) && 0);");
tryItOut(" if (<> </>)");
tryItOut("/*for..in*/for(let __iterator__ = ({ set __parent__ __iterator__ () { var __count__, prototype; } , __iterator__: prop.eval(<x><y/></x>) }) in ({__noSuchMethod__ setter: eval })) {break L;{} }");
tryItOut("yield  /x/ ;");
tryItOut("with(prop << -1)return;");
tryItOut("if(1e+81.__proto__ = (({}).hasOwnProperty).call(<y><z/></y>,  \"\" , true)[eval(\"__noSuchMethod__, __proto__;\", *::*)]) {L:if(prop(0x99, __count__)\f) export __count__; const __parent__;/*infloop*/for(let __noSuchMethod__ = 3/0; (undefined.isPrototypeOf(constructor)); null) const __parent__ =  /x/ , prop; }");
tryItOut("/*infloop*/for(<x/>; <><x><y/></x></>; [z1]) {<><x><y/></x></>; }");
tryItOut("let(__proto__, prop = <><x><y/></x></>) { return 1e+81;");
tryItOut("/*for..in*/for(( /* Comment */<><x><y/></x></>)((window[undefined])) in (([1,2,3,4].map)(({ prop: constructor }) = @foo.isPrototypeOf(#3={a:#3#}))))let delete = [z1,,], constructor = 5.0000000000000000000000\n");
tryItOut("if( ''  +=  /x/ ) /*infloop*/M:for(let __parent__; new Number(null); this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; yield;; yield y; })) {return  /x/ ; } else {(__parent__);if(3/0.__lookupGetter__(\"get\")) {break M;(1 for (x in [])) } }");
tryItOut("let(__iterator__ = null) { throw StopIteration;");
tryItOut("{/*for..in*/for(var [__parent__, __iterator__] = ( /x/g  = <y><z/></y>) in undefined) {(<><x><y/></x></>); }/*infloop*/for(prop = <x><y/></x>.*; ((<x><y/></x> for (prototype in @foo))); <y><z/></y>[__proto__.let getter= prototype]) {let prototype = <x/>;__parent__ = constructor, __noSuchMethod__ = this } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in  '' ) {#1#; }");
tryItOut("with({}) { (__noSuchMethod__); } ");
tryItOut("{}");
tryItOut("try { throw StopIteration; } catch(throw this ? __iterator__ : @foo | * if (*);) { let([] =  '' , __count__ = this.zzz.zzz) { let(prototype, __count__ = eval(\"<y><z/></y>\", null)) { throw __noSuchMethod__; } ");
tryItOut("L:switch(__proto__.prop = __iterator__ =  /x/g ) { default: break;  }");
tryItOut("do {let prop = constructor = this, prototype; } while((null ? <><x><y/></x></>.* : new  ''  *= *()) && 0);");
tryItOut("if(<><x><y/></x></>) {; } else  if ((new yield \n<><x><y/></x></>(this > #1#, .2))) var getter = 1e4, __count__ = <x/>;");
tryItOut("(function ([y]) { });");
tryItOut("let (__proto__ = ((__count__) .@*::  /x/ )) { if(({__iterator__: <x><y/></x>}) const ) M:if( /x/ ) { if (<x><y/></x>/*\n*/) {export __count__; } else {break M;\freturn 1e81; }} }{}");
tryItOut("if((__count__ >> window)) { if ( /x/g .unwatch(\"__noSuchMethod__\")) {throw <x><y/></x>; }} else {/*for..in*/M:for(var __noSuchMethod__['__parent__'] in <y><z/></y>) return;; }");
tryItOut("/*for..in*/__noSuchMethod__");
tryItOut("break L");
tryItOut("let(prototype = <><x><y/></x></>(*)) { this.zzz.zzz;");
tryItOut("if(*::*) export *;");
tryItOut("switch(prototype = __proto__) { case eval(\"\", #3={a:#3#}).yoyo(<y><z/></y>): default: break; L: yield; const case *.throw(function(id) { return id }): (window).watch;break; case ({ get __parent__ __noSuchMethod__ (constructor) { return <x><y/></x> &= *::* } , prototype getter: (1 for (x in [])) }): {}break; case 3: case 7: case 8: /*infloop*/L:do {} while( /x/ );break;  }");
tryItOut("yield 0\n");
tryItOut("{__iterator__ = (-0); }");
tryItOut("/*for..in*/for(const ('fafafa'.replace(/a/g, function ()new <y><z/></y>( /x/ , 0))).__parent__ in (((<><x><y/></x></>)()))) {(* /  /x/ );*::*.isPrototypeOf(<y><z/></y>); }with({__noSuchMethod__: this.__defineSetter__(\"__parent__\", new Function)})L: {(1 for (x in [])) }");
tryItOut("do {break L; } while((\f<x><y/></x> & __proto__) && 0);");
tryItOut("let (function::prop = -0, __iterator__ =  '' ) { (-1); }");
tryItOut("L:if(yield <><x><y/></x></>) ([]); else {return; } const __parent__;");
tryItOut("with((prop = <y><z/></y>) ? <><y/></x> : (#1=[#1#] % [[1]])){(-0); }");
tryItOut("var prop");
tryItOut("/*infloop*/L:for(let prototype; ([15,16,17,18].map((*).apply, *::*)) >> undefined; ('fafafa'.replace(/a/g, <x/>)))  for each (prop in (constructor.prototype setter= [1,2,3,4].slice)) for each (__iterator__ in let (prop)  \"\" )");
tryItOut("yield; const prop;");
tryItOut("let prop = true");
tryItOut("let prototype = this, __proto__ = *::*;\nyield constructor;\n");
tryItOut("let(__noSuchMethod__ = void undefined) { for(let y in [5,6,7,8]) (new Function(\"yield <><x><y/></x></>;\"))");
tryItOut("/*infloop*/M:for((new 'haha'.split((prototype.__iterator__), null)) ? <x><y/></x> ? try { throw StopIteration; } catch(__iterator__ if (function(){this.zzz.zzz;})()) { throw StopIteration; } finally { for(let y in [5,6,7,8]) yield; }  :  \"\"  : \n<x/>; ! '' ; ) return function(id) { return id };");
tryItOut("with({}) return;");
tryItOut("M:if(eval(\"with({constructor:  /x/ .@foo}){break ; }\", (new arguments))) /*for..in*/for(const [prototype, __proto__] =  ''  in <><x><y/></x></>) {return; }\r else  if (*) {<x/>\nthrow [,,]; }");
tryItOut("with({}) { return; } ");
tryItOut("/*infloop*/L:\ffor(constructor; [1,,]; window) return *::*;");
tryItOut("let(__iterator__) { ;");
tryItOut("if(4..__lookupSetter__(\"prop\") -= prop , 5.0000000000000000000000) { if (<x><y/></x>.unwatch(\"__noSuchMethod__\")) default: break; case (yield window):  else if((-0)) {export *;yield; } else  if ([,,]) {let ;(null); } else {}}");
tryItOut("if() { if (((__proto__).watch.__defineGetter__(\"prop\", /a/gi)) ? (new (gc)(<x/>,  /x/g )\n(this.__defineGetter__(\"__parent__\", new Function).prop >= __count__ =  /* Comment */window, (p={}, (p.z = <y><z/></y> .@ <x><y/></x>)()))) : \n[z1] && new (function(y) { yield y; let  = *, __proto__ = 3;; yield y; })(false, window)) break M;} else {with({__noSuchMethod__:  /x/ }); const prototype; }");
tryItOut("switch(window) { default: ;case 1: gc()case 7: export *;break; case  /x/g : yield <><x><y/></x></>;case false: this;case 6: break; -3/0;break; yield 1e4;break; case 3: continue M;continue ;( /x/ );break; case 7: (<><x><y/></x></>);break; break; return [,,z1];break; propbreak; case false: case <x><y/></x>: yield;break; case 0:  }");
tryItOut("/*for..in*/M:for(let (delete <x/>).prop in (([1,2,3,4].map)((~yield  /x/ .@foo)))){function  yield (constructor)__iterator__/*for..in*/for(\flet <x><y/></x>.unwatch(\"constructor\").function::__noSuchMethod__ in <x><y/></x>) {return;\nvar prop = [1,,];\n } }");
tryItOut("{return undefined;export *; }");
tryItOut("/*for..in*/for(var [get, __count__] = this in __noSuchMethod__) {gc() }");
tryItOut("L:while((let ([] = (constructor = *::*)[yield arguments]) ({ __parent__: prototype, prototype: prototype }) = //h\nlet (constructor = <><x//h\n><y/></x></>) <><x\r><y/></x></>) && 0)(*::*);");
tryItOut("/*infloop*/for(function(y) { yield y; ;; yield y; };  \"\" .hasOwnProperty(\"__count__\"); (constructor = <x><y/></x> !== new true(*))) {@foo }");
tryItOut("(1e81) const constructor;");
tryItOut("switch(1e81)\n { case <y><z/></y>:  }");
tryItOut("yield (eval(\"__count__ = <x><y/></x>.__defineGetter__(\\\"__noSuchMethod__\\\", gc)\", prototype.__iterator__ setter= Math.sin)); const __proto__;");
tryItOut("/*for..in*/for(const ((*::*)( { /*infloop*/while(<x><y/></x>)prop = <x/>;; } )) in (((new Function(\"/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in undefined) throw  /x/g ;\"))\t)(prototype))){}\nfunction(y) { yield y; return;; yield y; }");
tryItOut("/*infloop*/for(prototype; <x/>; [1,,].throw(this)) {/*for..in*/for(const constructor = <x><y/></x> in [[]]) {var constructor; }yield\n<x/>; }");
tryItOut("with({__noSuchMethod__: __parent__ = null}){/*infloop*/for(let constructor; true; prototype) {(<y><z/></y>); } }");
tryItOut("L: {/*for..in*/L:for(__iterator__(3/0) in ((function(q) { return q; })(<><x><y/></x></>.__lookupSetter__(\"__iterator__\")))){1e+81; } }");
tryItOut("export *;");
tryItOut("/*infloop*/for(var __noSuchMethod__; <y><z/></y>; (false())) M:switch(this.zzz.zzz) { case 2: break; break; return; }");
tryItOut("/*infloop*/L:for constructor = __proto__ = window(let prototype; __parent__ = true");
tryItOut("L:if(((window.yoyo((__proto__-= '' )))(undefined.eval(( \"\"  * @foo)), ([(function ([y]) { })()])))) {continue M;break ;\ngc()\n\nwith({constructor: <>constructor: 1e81</>})<x><y/></x>\n }");
tryItOut("L:if([*::*]) export * else {if(4.) export *; else  if ((function ([y]) { })()) {yield;; } else continue ; }");
tryItOut("if([__parent__.(__iterator__ = __noSuchMethod__)].filter(function ()<x/> != default: break; case false: return <><x><y/></x></>;) &= __proto__) {yield 1.2e3;function  __noSuchMethod__ () { return \f@foo } \nbreak M;\n } else  if \f((this.__defineSetter__(\"constructor\", <x><y/></x>)) << (String())) { } else  \"\" \n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ constructor: __parent__ }) = ((false if (#1=[#1#])))['constructor'] in __proto__) L:if(<x/>.__lookupSetter__(\"__iterator__\")) {; } else  if (<y><z/></y> @ <><x><y/></x></>) const constructor, __iterator__ = window;");
tryItOut("L:if(false.throw(<x><y/></x>)) { if () {yield;export __proto__; const __noSuchMethod__; } else if( \"\" ) { if (*) {return <><x><y/></x></>; }} else {return;; }}");
tryItOut("export *\n");
tryItOut("{const constructor, __iterator__; }");
tryItOut("\nthrow this;\nM:with({__parent__: this.@foo})(<x/>);");
