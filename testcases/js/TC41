
tryItOut("{}{}\n");
tryItOut("switch((yield (yield throw *::*\t))) { case 8: ;case <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>: var __iterator__;break;  }");
tryItOut(" '' \n");
tryItOut("{yield;export __parent__; }\nlet(({ __parent__: ({ __iterator__: __noSuchMethod__ }) }) = 'fafafa'.replace(/a/g, (new Function)(<x><y/></x>, __parent__)), __iterator__) { ");
tryItOut("with(<x><y/></x>.valueOf(\"number\"));");
tryItOut("{continue M;M:with({get: @foo}){<x><y/></x>; } }");
tryItOut("__parent__ = __proto__;");
tryItOut("/*for..in*/for(const new ({} @ prototype)['__count__'] in false.__iterator__ = <y><z/></y>) {(#1#).__defineSetter__if(<x/>) { if ( '' ) {yield;export __proto__; }} else {const __iterator__ = #3={a:#3#}, __iterator__ = [];yield  /x/g ; } }");
tryItOut("L:if(prototype.(<x/>)) throw  /x/ ; else const constructor, prototype = @foo;");
tryItOut("with({__iterator__: (constructor-=<><x><y/></x></>.yoyo( /x/g ))[(~ '' )]}){if(@foo) {} else  if (__proto__) {; }__count__ = 0x99; }");
tryItOut("if(__proto__ = prototype) {yield;let (constructor, prototype = prototype) { do {export *; } while((__proto__) && 0); } } else {var prototype = -3/0, constructor = window;{} }");
tryItOut("var default: <x/>;break; , __proto__ = __count__");
tryItOut("(<x><y/></x>);");
tryItOut("/*infloop*/for(undefined;  /x/g ; [,,z1]) continue L;");
tryItOut("switch((__proto__.(this.*))) { case (new ({}).hasOwnProperty(<><x><y/></x></>)): with({__proto__: <x><y/></x>.isPrototypeOf(setter)})throw <><x><y/></x></>;break;  }");
tryItOut("0/0; const __proto__;");
tryItOut("{/*infloop*/for(*; <y><z/></y>; undefined) let __iterator__ = @foo; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = (<><x><y/></x></>.@foo) in (<><x><y/></x></> ,  /x/ )) [1,2,3,4].map");
tryItOut("L:with({prototype: (['fafafa'.replace(/a/g, eval)].filter((1 for (x in []))))}){__noSuchMethod__; }");
tryItOut("if(()) L: {prototype = window; } else {do break M; while((null) && 0);let prototype, __parent__; }");
tryItOut("let(prototype) { let(constructor = [[1]], __count__ = <x><y/></x>) { <y><z/></y>;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((function  __parent__ (__count__, prop) { yield <x><y/></x> >>= <x><y/></x> } \f)((.2 .. *::*)['delete']))){M:if((({__count__: ({a1:1}), __parent__: <>\f<x><y/></x></> }))) { if (({__proto__: {}})) {(1 for (x in []))var function::prototype, __proto__ = *::*; }} else continue ; }");
tryItOut("let(({ __parent__: ({ constructor: __iterator__ }) }) = __count__ = eval(\"var __proto__ = window, __parent__: this;\", 3)) { this.zzz.zzz;");
tryItOut("L:if(( \"\" .eval(constructor.prop))) {/*infloop*/for(let prototype; -0.1; this.__defineSetter__(\"__iterator__\", [1,2,3,4].slice)) export __parent__;continue ; } else var ({ function::prototype: __parent__ }) = <x/> >>>=this;");
tryItOut("switch(<y><z/></y> ? this : @foo) { default: case  /x/g : return window;case __noSuchMethod__ = true:  /x/g  }\n");
tryItOut("M:if(({ __noSuchMethod__: undefined }) = [<><x><y/></x></>window]) yield *; else  if (((__iterator__ & [z1,,]).__count__ = #1=(-0))) {M:if('fafafa'.replace(/a/g, [1,2,3,4].map)) {(this);{} } else  if (__iterator__ = __parent__) {export *; } else {continue L; } }");
tryItOut("/*for..in*/L:for(let prototype =  /* Comment */this.zzz.zzz in ((__noSuchMethod__)(1e81))) with(([1,,] |= [1])){__parent__: @fooreturn; }");
tryItOut("/*infloop*/L:for(({__proto__ getter: (-1) }); (new Function()); ([__count__, , __parent__] = false.prototype)) const ({ constructor: prop: [15,16,17,18].sort(function  prototype ()function ([y]) { }, <x><y/></x>), __noSuchMethod__: ({ __noSuchMethod__: __proto__ }) }) = __noSuchMethod__.constructor = @foo.hasOwnProperty(\"__proto__\");");
tryItOut("try { var __proto__ = <x/>; } finally { return; } \nwhile((window) && 0)yield true;");
tryItOut("while((arguments) && 0)continue ;");
tryItOut("if(yield __parent__ = constructor.yoyo(<><x><y/></x></>)) { if (<bbb xmlns:ccc=\"__iterator__: ({a1:1}).prop\"><ccc:eee></ccc:eee></bbb>) if((yield *(window))) { if ((+true)) {var __proto__ =  /x/g , __proto__ = false;{}\t } else /*for..in*/L:for(let [__parent__, x::__proto__] = @foo in <x><y/></x>) {yield;({}); }} else {/*infloop*/M:do /*for..in*/L:for(let [prototype, __proto__] = prop = [[1]] in 1.2e3) {var __iterator__; } while((<x><y/></x>)(*, <><x><y/></x></>)); }}");
tryItOut("switch([[,] if (<x><y/></x>)]) { case prop = *::*: break; <><x><y/></x></>;break;  }");
tryItOut("M:if(yield  /x/ ) return; else  if (this) {if(((yield __count__))) { if ((function::__noSuchMethod__ = *::*) +  \"\" .@*) export __iterator__; else }yield __proto__%=<y><z/></y>; } else {if(this\n) {yield; } else /*var constructor;while((__iterator__.(*)) && 0){(*::*); } }");
tryItOut("(prototype) = prop;");
tryItOut("if( \"\" ) {while(((+prototype)) && 0){ } } else  if ((eval(\"/*for..in*/for(var prop in (((0).call)(({a2:z2})++))) set __count__ prop (__parent__, prop) { break ; } \", <><xxx {__noSuchMethod__}={#1=[#1#].__noSuchMethod__ .@ __iterator__} /></>))) export *; else break ;");
tryItOut("L:while(( \"\" ) && 0){for(let y in [5,6,7,8]) true; }");
tryItOut("M:if((({__proto__: [prop]}))) {/*for..in*/for(let [prop, prototype] = this.__defineSetter__(\"prototype\", function (__parent__, constructor) { yield this } ) in <y><z/></y>) {(<><x><y/></x></>);gc() } } else  if () ; else ( /x/g )\n");
tryItOut("let (({ __count__: [[1]], constructor: prototype }) = ((function ([y]) { })().*)) { ; }");
tryItOut("M:if(<y><z/></y>) (<x><y/></x>); else const __iterator__, prop(({}).__lookupGetter__).call( \"\" , 0.1, <x/>) ");
tryItOut("return default: {}break; truebreak; case 4: break; 'haha'.split;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> in *) {if(<><x><y/></x></>) { if (__iterator__) gc() else {gc() }}if(prop) { if (<><bbb xmlns:ccc=\"false / *\"><ccc:eee></ccc:eee></bbb></>) yield;} else L: ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __count__ in (__count__.__iterator__ = true)) if(new (*)(false)) {(<x><y/></x>); } else { yyy const prototype; }");
tryItOut("L:if((new ({}).__lookupGetter__(__noSuchMethod__, [,] >>>=__noSuchMethod__))) {}");
tryItOut("let constructor, prop = (function ([y]) { })()\n");
tryItOut("/*for..in*/for(let __iterator__ in (((-0).__defineSetter__)( '' ))){<x><y/></x><x/>; }");
tryItOut("export *;export __proto__;");
tryItOut("const __proto__, __noSuchMethod__; const __count__;");
tryItOut("{({}).__lookupGetter__ }");
tryItOut("/*for..in*/for(let prototype =  /x/  in (constructor.__defineGetter__(\"prototype\", Math.sin))) {{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype.__parent__ in <y><z/></y>) yield 033;");
tryItOut("/*infloop*/M:while(prototype = <><x><y/></x></>){yield;true; }");
tryItOut("/*infloop*/do {with(prop.(this)){if(window) return; else  if (true) ; }return ((<x/>)[1e-81]); } while(([<><x><y/></x></>].sort(function(y) { yield y; continue M;; yield y; })) ^= (<y><z/></y> - <x><y/></x>) for (__count__ in window));");
tryItOut("/*for..in*/L:for(var constructor in ((<x><y/></x>)(__proto__))){true;; }");
tryItOut("let prop\nif(undefined) { if (this) ( '' );} else {yield prototype; }");
tryItOut("/*for..in*/for(let prop.__count__ in (([1,2,3,4].map)(yield [,,] instanceof (new (__noSuchMethod__ = )())))){/*for..in*/for(__iterator__ = * in <y><z/></y>) export \t*; }");
tryItOut("{L:switch(function  prop (function::prop) { yield <><x><y/></x></> } ((\nfunction(id) { return id }), (-0))) { case 5: continue M;case 1: let prop; } }");
tryItOut("return ({prop: new Function}) && [z1,,].prototype;");
tryItOut("with({__proto__: (__noSuchMethod__ = (function ([y]) { })())})if(this) gc() else {__parent__ }");
tryItOut("5.0000000000000000000000;");
tryItOut("/*for..in*/L:for(let __iterator__ in [,]) {}");
tryItOut("M:if(<><zzz>(({__proto__ setter: function(y) { yield y; gc(); yield y; }, __iterator__ getter: Math.pow }))</zzz></>.__parent__ = ([1,2,3,4].slice)(<y><z/></y>) .@ (gc())) return <><x><y/></x></>; else  if (new Error((new Iterator( '' ))) for each (constructor in eval(\"<><x><y/></x></>\", <x><y/></x>)) for ((prop) in null) for each (__count__ in <><x><y/></x></>)) {{} }\nlet (function::__proto__ = arguments) { {} }");
tryItOut("if((<x/>++)) { if ((( \"\" ).watch)) [11,12,13,14].sort} else {<x/>;{} }");
tryItOut("while(((__iterator__ = (\n[, prop, , , __noSuchMethod__] = 1.2e3).__noSuchMethod__)) && 0){const prototype = <x><y/></x>;(<><x><y/></x></>); }");
tryItOut("if(( '' .isPrototypeOf(<x/>))) {const __proto__; } else {{}__proto__ = *; }");
tryItOut("{yield;throw *::*; }");
tryItOut("/*for..in*/for(let prop.prop in (((function(q) { return q; }).apply)( /x/g [<><x><y/></x></>]))){( '' );/*for..in*/for(let __noSuchMethod__ =  ''  in window) {{}yield; } }");
tryItOut("{}/*infloop*/L:for(({}); 0.1; __iterator__) break//h\n M;");
tryItOut("L:if(<x><y/></x>) function  constructor () { return <>case (__proto__.__count__ = set.__defineSetter__(\"__parent__\", /a/gi)\n): yield (typeof  \"\" );break; default: break; /*for..in*/for(var [prototype, __noSuchMethod__] = constructor = *::* for (__parent__ in <><x><y/></x></>) for each (__iterator__ in window) in (eval(\"return __noSuchMethod__;\", <x><y/></x>))) {return;(true); }break; case 2: ((-1));break; case let(constructor) { gc(): break; case  \"\" : </> }  else  if (<x/>) {<><x><y/></x></>var constructor = window, __proto__; }");
tryItOut("if(RangeError(* + 1.2e3, eval(\"export *;\", @foo))) { if ((__noSuchMethod__.__noSuchMethod__ getter= function(q) { return q; }))  if (new (<y><z/></y>)(false, false).__noSuchMethod__.propertyIsEnumerable(\"__count__\"))} else {return;throw <x><y/></x>; }");
tryItOut("{/*infloop*/for(const ({ prop:  }) = ((yield <><x><y/></x></>))(__parent__ = (-0)) =  ''  ^  /x/g ; __parent__; __noSuchMethod__.( /x/ ) !== (<y><z/></y> %= \t<x><y/></x>))  }");
tryItOut("/*for..in*/L:for(let [prop,  /x/ ] = (eval(\"L:do {continue ;__parent__ = <>export __parent__;</>; } while((033) && 0);\", this))[({__parent__ setter: Math.sin })] in ({ __iterator__: function::constructor }) = function::__count__ = false) {L:with((<x/> >= <x><y/></x>)(((<><x><y/></x></>.yoyo(@foo))[new (((false).__defineSetter__).call)()]))){throw (this.__defineGetter__(\"__proto__\", function  __proto__ (__parent__) { ; } )); } }");
tryItOut("L:while((<x><y/></x>) && 0)window;");
tryItOut("/*for..in*/L:for(* in window) \n/*infloop*/for(let __count__ = <x/>.@*; (p={}, (p.z = (function ([y]) { })())());  '' .__lookupGetter__(\"__proto__\") %= prototype = <><x><y/></x></>) {throw false; }\t\n");
tryItOut("");
tryItOut("if(((<x/> < <x><y/></x>) &= (prototype = this))) /*infloop*/L:for(*::*.prototype = function(id) { return id }; ((function(y) { yield y; (<><x><y/></x></>);; yield y; }).call(__count__ >= 033, )); *::*.constructor = delete.prop)  else  if (true) {;L:if([<x/>]) Math.pow } else {yield;gc() }");
tryItOut("let (prototype(arguments) = 'fafafa'.replace(/a/g, (1 for (x in []))).__lookupGetter__(\"__parent__\"), __noSuchMethod__ = <x><y/></x>.unwatch(\"constructor\")) { /*for..in*/for(__iterator__ = *.hasOwnProperty(\"__proto__\") in function(id) { return id })  \"\" ; }");
tryItOut("if(new Function) const each, __iterator__ =  /x/ ; else \flet __proto__, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("L:switch(-3/0) { case <><x><y/></x></>: break; default: case 7:  }");
tryItOut("switch([[]]) { case [11,12,13,14].map: let (__proto__ = -1) { export __parent__; } }");
tryItOut("/*for..in*/for(constructor = __noSuchMethod__ = this.__defineSetter__(\"__parent__\", (new Function(\"break M;\"))), __proto__ in [#3={a:#3#}]) {(@foo);\n\n }");
tryItOut("/*infloop*/for((new (function (__iterator__) {  } )()) || constructor.([1,,]); (({__proto__: prototype})); (new (false)( /x/g , <><x><y/></x><\t/>))) {var __iterator__ = window, __noSuchMethod__;return; }");
tryItOut("prototype.prototype setter= function (prop, __iterator__)null const __noSuchMethod__;");
tryItOut("/*for..in*/for(var __count__ = (prototype)() in window ? true : *) /*infloop*/for(prototype; <><x><y/></x></>; <><x><y/></x></>) export __iterator__;");
tryItOut("/*infloop*/M:do {/*infloop*/for(window; <y><z/></y>;  \"\" ) let __proto__;return <><x><y/></x></>; } while(window);");
tryItOut("__count__.((({ set __count__() { return prototype }  }))).valueOf(\"number\");");
tryItOut("if(function(id) { return id } &= undefined) {yield; } else {{} }");
tryItOut("/*infloop*/for(const constructor; __proto__ + <><!--yy--></>; (let (function:: for each (__iterator__ in true) for each (prototype in false) if ( /x/g )) (5.0000000000000000000000))) {L: /*infloop*/for(let __parent__;  '' ; arguments) {yield; } }");
tryItOut("var prototype;");
tryItOut("L: let prototype = undefined, yield ^;;");
tryItOut("gc()");
tryItOut("if((~<y><z/></y>)) {let (__iterator__) { /*infloop*/for(const __noSuchMethod__ = undefined; 5.0000000000000000000000; .2) var constructor; } }");
tryItOut("__parent__, __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <y><z/></y>) yield;");
tryItOut("let(prototype = [z1](eval, <><x><y/></x></>), __proto__ = 3 / <x><y/></x>) ((function(){throw StopIteration;})());");
tryItOut("with({}) {  } ");
tryItOut("let (__noSuchMethod__, prop = (undefined &&  '' )) { continue ; }");
tryItOut("with({}) { __proto__ = constructor; } ");
tryItOut("switch(window) { case 1: default: return;break; ;break; case this: case <x><y/></x>:  }");
tryItOut("/*infloop*/do {export *; } while((prototype = <><x><y/></x></>));");
tryItOut("L:if((([1,2,3,4].slice)(prop = <x><y/></x>))) this.zzz.zzz; else  if (constructor = (<x><y/></x>.__lookupGetter__(\"__proto__\"))) var prototype; else {}");
tryItOut("if(<x/>) (<x/>).apply else  if (<x><y/></x>) {;(<x/>); } else {return *; }");
tryItOut(";\nlet __parent__ = <><x><y\t/></x></>;\n");
tryItOut("prop = __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __count__ = null\n in 1.2e3) {break ;gc() }");
tryItOut("/*infloop*/gc");
tryItOut("with(true){break ; }");
tryItOut("{with({constructor: (yield <y><z/></y>)}){<x><y/></x>;const __count__, __noSuchMethod__ = prop; }if(<x><y/></x>) { if (new (function(y) { yield y; [1,2,3,4].slice; yield y; })(this)) export *;} else {break M;return  /x/ ;\t } }");
tryItOut(" get prop __noSuchMethod__ (__count__, ({ constructor: prop })) { return ~__proto__.eval(*::*) } ");
tryItOut("continue M");
tryItOut("if(<xxx>{__iterator__}</xxx>) {/*for..in*/for(var getter in (((1 for (x in [])))(@foo))){return; }/*for..in*/for(let constructor in ((/a/gi)( '' ))) } else  if (#2=({__noSuchMethod__: this.__defineSetter__(\"\", Function)})) {yield <x><y/></x>; }");
tryItOut("if(constructor) {return;export *; } else  if (<x/>) continue ; else try { __noSuchMethod__; } finally { export __iterator__; } \n");
tryItOut("/*infloop*/do {{}throw constructor; } while((void window.eval(function(id) { return id })));");
tryItOut(";\nyield [[]];\n");
tryItOut("let (constructor, prop = ((<><x><y/></x></>)(try { yield; } catch(__noSuchMethod__ if undefined) { true; } ))) { if(( /x/g  <<  /x/g )) { if (((1 for (x in []))).apply) { }} else  }");
tryItOut("throw StopIteration;");
tryItOut("continue L;");
tryItOut("while((constructor) && 0){function(q) { return q; } }");
tryItOut("with({}) yield __proto__ =  \"\" ;");
tryItOut("/*for..in*/for(const constructor.prototype in <><x><y/></x></>) /*for..in*/for(let [__iterator__, __proto__] =  '' .unwatch(\"constructor\") in <><x><y/></x></>) const prop, prop;");
tryItOut("with(*)var __proto__, constructor = this;");
tryItOut("do {let(__proto__) ((function(){let(constructor, __parent__) ((function(){throw StopIteration;})());})()); } while(((__proto__.prototype) in <y><z/></y>) && 0);");
tryItOut("/*infloop*/for(this; (p={}, (p.z = (yield __count__))()); (<y><z/></y>.watch(\"__count__\", ([[1]]).watch).@foo)) gc");
tryItOut("for(let y in []);");
tryItOut("if((<><x><y/></x></>)(<x/>)) L:if(__parent__ = (this.__defineGetter__(\"__iterator__\", new Function)), constructor = <x/>) {__proto__; } else  if (<x><y/></x>) {function(y) { yield y; {}; yield y; }throw *; } else return; else  if ( ''  >>> <><x><y/></x></>) (1 for (x in []))");
tryItOut("L:if(<y><z/></y>) { if (window) {throw prop; }} else {gc() }");
tryItOut("L: {; }");
tryItOut("{/*infloop*/for((true if ([[1]])); (typeof window); __noSuchMethod__.__iterator__ = <x/> getter= function  __noSuchMethod__ () { export *; } ) function::__parent__; }");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {return;(window %= [1,,]); }");
tryItOut("L:while((prop) && 0)export *;");
tryItOut("if(__proto__ = __parent__) {if(@foo) { if (true) { }} else <x/>; }prop = new (<x><y/></x>)()\ncontinue L\n\fexport *;\n;\n");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("L: function  __iterator__ () { continue ; } ");
tryItOut("if( '' ) prototype else __count__: \f '' \n(constructor);\n");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(let [__parent__, prototype] = (prop = <><x><y/></x></>).valueOf(\"number\") in (new <><x><y/></x></>(<><x><y/></x></>)) >>>=<><x><y/></x></>[<><x><y/></x></>]) /*for..in*/L:for([__iterator__, __proto__] = (Object(undefined, <y><z/></y>)) in <><x><y/></x></>) {yield <x><y/></x>;return constructor; }");
tryItOut("if((this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__))) with({__noSuchMethod__: @foo}) else *;");
tryItOut("let(__proto__ = ((gc))[eval(\"*\", this)], constructor) { with({}) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\rvar __iterator__ in window) {var prototype; }");
tryItOut("if(prototype, __count__ = <x><y/></x>.watch(\"prototype\", (gc).apply)++--) {L:with(#3={a:#3#}){const __noSuchMethod__; }<x/>; } else  if (((yield 0)) .@*:: ({}) ? constructor.__proto__ : 4. === *::*) gc() else {const __noSuchMethod__ = false; }");
tryItOut("Function");
tryItOut("if(null) { if (new Boolean()) {;__parent__; } else {if(this) {var __parent__ = 0/0;return __iterator__; } else yield undefined;/*for..in*/for(var __parent__ in prop) {yield; } }}");
tryItOut("do {(({}).__lookupGetter__).apply } while(([window] /= __iterator__ >>=  '' ) && 0);");
tryItOut("/*for..in*/for([constructor, __parent__] = (({ set prop __iterator__ (prop, null) { return <x><y/></x> } , __count__: prototype })) in new (get)(undefined, undefined)) {;(<x/>); }");
tryItOut("null;gc()");
tryItOut("L: {M:if(*::*) {if([]) return; else {export prototype;\t }Function } else  if (<x><y/></x>.(true)) {if(-0) {continue ;return; } else  if ([,]) prototype = <x><y/></x>, __count__ =  '' ;return <x><y/></x>; } else /*for..in*/for(prototype in ((new Function)(*::* / this)))\nthis;L:while((<>this.__defineSetter__(\"__iterator__\", <x><y/></x>)</>) && 0)/*for..in*/for(const prototype = <><x><y/></x></> in  /x/g ) gc() }");
tryItOut("if((__parent__ = let (__parent__) constructor) ? ({})(undefined, <><x><y/></x></>)\n : prototype = prop) {/*infloop*/do {break L; } while((function(q) { return q; })); } else  if ((uneval( \"\" )).eval(1.3.isPrototypeOf(#1#))) {switch(({ prop: __proto__ }) = window && __iterator__) { case 1: break; default: /*infloop*/L:for(let __noSuchMethod__; this; <x><y/></x>) 3.141592653589793;break; case <x/> *  '' :  } } else {return new (<><x><y/></x></>)(({a2:z2})) for each (__count__ in <><x><y/></x></>); }");
tryItOut("continue ; const __parent__;");
tryItOut("let (__parent__, prop) { {/*infloop*/for((__parent__%=<><x><y/></x></>); null; <><bbb xmlns:ccc=\"<x/>\"><ccc:eee></ccc:eee></bbb></>) {const prototype = ({a2:z2});<x><y/></x>; } } }");
tryItOut("\n(*::*);");
tryItOut("/*infloop*/for((!true); ( \"\" .isPrototypeOf(this) :: this.throw(true)); <><y><z/></y></>.([15,16,17,18].filter((new Function(\"break ;\")), *::*))) {const __noSuchMethod__ = window, __iterator__ = @foo; }");
tryItOut("yield const __parent__ = this, __parent__;.prop getter= arguments;");
tryItOut("(<x\f><y/></x>);");
tryItOut("/*infloop*/for(let __proto__; ()//h\n; function ([y]) { } <= ([1,2,3,4].slice).call( /x/g , ) ? this.zzz.zzz : \n(new Function(\"export __count__;\"))) {{}if(prop) return __count__; else  if (-3/0) {return; '' ; } }");
tryItOut("yield\n(window).watch");
tryItOut("let (__noSuchMethod__ = __count__) {  }");
tryItOut("M:if((({a2:z2}) ^=  \"\" )) throw  '' ; else  if ('fafafa'.replace(/a/g, function(y) { yield y; const constructor = 1e-81;; yield y; })) {if(window) { if (window) {const __iterator__ = this, __count__; } else {var __parent__, __count__ = constructor; }}throw <x><y/></x>; }");
tryItOut("yield Function();");
tryItOut("/*for..in*/for(const __parent__ in <><x><y/></x></>) function(q) { return q; }");
tryItOut("let (__proto__ = (__proto__ = (<x/>.__lookupGetter__(\"prototype\"\t)).__noSuchMethod__)) { /*for..in*/for(const [__parent__, prop] = ([<y><z/></y> for each (__parent__ in window) for (__proto__ in <y><z/></y>)] for (__parent__(<x/>) in 033) for each (constructor in constructor) for (__parent__ in {}))[<x/>] in ((gc).call(window, ))) {yield;[1,2,3,4].map } }");
tryItOut("/*infloop*/while(<><x><y/></x></>){export __proto__; }");
tryItOut("L:if() { if (<><x><y/></x></> * this) {continue M;; } else {}} const __count__;");
tryItOut("if((prop = <x><y/></x>)(1e+81,  \"\" )) { if ((uneval((function(q) { return q; }())))) {} else {var __count__;/*for..in*/for([prop, prototype] = <y><z/></y> in  /x/ ) let __parent__, constructor = 1.2e3; }}");
tryItOut("do return; while((()[<x><y/></x>]) && 0);");
tryItOut("let prop;");
tryItOut("if(<><x><y/></x></>) {yield <><x><y/></x></>;yield; } else  if (<><\fx><y/></x></>) {yield <x/>; } else {window; }");
tryItOut("yield \n//h\n;");
tryItOut("L:do {let __count__, yield; } while((\f<><x><y/></x></>) && 0);");
tryItOut("let(__parent__ = eval(\"3/0\", yield <><x><y/></x></> !== <x><y/></x>), __parent__) ((function(){try { for(let y in [5,6,7,8]) this.zzz.zzz; } finally { /*infloop*/while((*))<x><y/></x>; } })());");
tryItOut("if(<y><z/></y> for each (__noSuchMethod__ in <><x><y/>\f</x></>)) {yield;yield; } else {yield  /x/g ; }");
tryItOut("throw __parent__;");
tryItOut("with({}) { return; } ");
tryItOut("while((__count__.prop setter= function(y) { yield y; return;; yield y; }) && 0){const __iterator__ = window;yield <x/>; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(\n<><x><y/></x></>)gc()");
tryItOut("gc()");
tryItOut("M:switch(((({}).__lookupGetter__).call((new (#2=@foo)(prototype = prop)) || window, ({__parent__: (p={}, (p.z = <x/>\f in #1=[#1#])()), __noSuchMethod__: (null ? window\f :  /x/ )\f })))) { default: L:with(([0 if (<x><y/></x>)]));break; case 9: break; case 1: /*infloop*/for(<x><y/></x>; window; (-1)) {( /x/ );const __proto__, prototype; }case ((yield ({ function::prop: __count__ }) = __noSuchMethod__\n)): break; case 1: export *; }");
tryItOut("/*infloop*/L:for(const __count__;  '' ; <x><y/></x>) {{} }");
tryItOut("0;");
tryItOut("/*for..in*/for(const __count__ in (( /* Comment */this.__defineSetter__(\"prototype\", __parent__))(Object(([11,12,13,14].some).valueOf(\"number\")))))return (<y><z/></y>).call(-3/0, window)");
tryItOut("M:if(this.__defineGetter__(\"__noSuchMethod__\", new Function) && [z1] -= undefined) {;throw 3.141592653589793; }");
tryItOut("{let (__noSuchMethod__ = false) { var __parent__ = <x><y/></x>; } }");
tryItOut("/*for..in*/M:for(prop in ((function(y) { yield y; break ;; yield y; })((@foo\n)))){continue L;yield window; }");
tryItOut("if(delete 3.141592653589793) {(0.1);var __proto__ = null, constructor = undefined; } else  if ( /x/ ) {yield false; }");
tryItOut("/*infloop*/for(((__parent__.__count__ =  /x/ ) >>> [11,12,13,14].sort)\n; false.__defineSetter__(\"prototype\", function(q) { return q; }); (uneval(__iterator__ = -1)).isPrototypeOf([<><x><y/></x></>].some(Function).__defineGetter__(\"__proto__\", function () { yield ({}) } ))) [1,2,3,4].slice\nexport __parent__;");
tryItOut("/*infloop*/for(const constructor = (Boolean()) ? (uneval(((4.)[window]))) : prop = *; new (window)(<y><z/></y> =  /x/ ); <><x><y/></x></>) {continue ;{} }");
tryItOut("M:if(\nwindow) { if (let (__parent__ = (\n--false <<= this)) (constructor = <y><z/></y>) ? ({ __count__: __parent__ }) = (Number(<><x><y/></x></>, __proto__)) << yield window : ({prop: (<><x><y/></x></> .@*:: <x><y/></x>).propertyIsEnumerable(\"__count__\") })) {if(__parent__ = [[1]]) {return;return; } else  if ((new false)) {1e81 } else export prop//h\n; }} else if((this.zzz.zzz)) { if (({ __noSuchMethod__: __parent__, constructor: __count__ })) {const __parent__, __proto__ = <x><y/></x>; } else throw <x><y/></x>;}");
tryItOut("/*infloop*/L:do {/*for..in*/for(let __count__ in ((eval)((function ([y]) { })()))){return @foo; }let constructor; } while(__parent__ = prototype);");
tryItOut("continue L\nfalse;");
tryItOut("if(( '' )( '' )) with([__proto__].sort(yield this;function  constructor (__parent__) { return undefined } ))(( /* Comment */#3={a:#3#})); else  if (\n(-0) == <x><y/></x>) {__count__, constructor = [1];/*infloop*/for(const each = String(); (({ set __count__ __count__ (prototype, __proto__)<x><y/></x> })); ([undefined if (1e4)])) {export __iterator__;return; } } else {if([+__iterator__].some('haha'.split) /= arguments(@foo, <x><y/></x>).propertyIsEnumerable(\"__count__\")) { if ([11,12,13,14].sort) function (__noSuchMethod__, __noSuchMethod__)1e4 else with({__iterator__: [null].map(gc)})} }");
tryItOut("let(prototype, Error((1.2e3 .@x:: __noSuchMethod__) , ~*, Error(<x/>, window))) ((function(){let(__parent__) ((function(){yield \nthis;})());})());");
tryItOut("if(({ __parent__: ({ __parent__: [] })\f, prop: function::__proto__ }) = ( /* Comment */*::*)()) { if ((yield <x/> || __noSuchMethod__)) {{} }} else return *;export *;");
tryItOut("/*for..in*/for(var setter in ((Math.sin)(@foo if (__count__).unwatch(\"__count__\"))))constructor");
tryItOut("/*infloop*/while(<y><z/></y>){ } const __parent__;");
tryItOut("{(__count__); }");
tryItOut("/*infloop*/M:for(<><xxx {__count__}={prototype.__parent__} /></>; constructor = 3; __noSuchMethod__) {<y><z/></y>;return []; }");
tryItOut("let(prototype) ((function(){export *;})());");
tryItOut("if(( /x/g  ^ window .. <xxx>{__iterator__}</xxx> || (([constructor, [__proto__, , ], , ]) %= constructor.__iterator__ =  '' ))) {/*infloop*/do export __iterator__; while(<x/>); } else  if ((new function  __count__: <y><z/></y> () { var __proto__ = <x/>, __count__ = <><x><y/></x></>; } (window, <x/>).eval(( /* Comment */window))).propertyIsEnumerable(\"prototype\")) __count__\n__noSuchMethod__; else {for(let y in [5,6,7,8]) gc() }");
tryItOut("yield (1e4.constructor = __iterator__)++;");
tryItOut("if(<><bbb xmlns:ccc=\" '' .__lookupGetter__(\"__parent__\")\"><ccc:eee></ccc:eee></bbb></>) { if ([ \"\" ]++) {(*);/*infloop*/while(#1#)033 }} else <><x><y/></x></>;");
