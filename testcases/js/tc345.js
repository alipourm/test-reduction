tryItOut("/*infloop*/do return <x><y/></x>; while(__count__ ? window : <x/>);{gc()/*infloop*/M:do (@foo); while( \"\" ); }");
tryItOut("return;{}");
tryItOut("null; const prototype;");
tryItOut("/*for..in*/M:for(let [__noSuchMethod__, constructor] = this.__defineGetter__(\"__count__\", function(q) { return q; }) in *::*) export *;");
tryItOut("switch([]) { default: case true: yield;break; break;  }yield;");
tryItOut("switch(yield constructor.__proto__ = *.@*) { case (*::*.valueOf(\"number\")).function::constructor.yoyo(this.__defineSetter__(\"__count__\", true)): let (__noSuchMethod__ = <><x><y/></x></>) { let constructor, constructor; }default: /*infloop*/for((window = ({ constructor: ({ false: prototype }) })); (({ get let([prop, ({ __parent__: __parent__\f, __noSuchMethod__: [, __proto__, ] })], __parent__) { ( \"\" );/*, __parent__: (__count__ = [11,12,13,14].some) })); (yield <><x><y\f/></\nx></>)) {{var __proto__ = -3/0; } }break; case (new ((Math.sin)())()): break; case 4: throw StopIteration;break;  }");
tryItOut("if(__iterator__.constructor = ( '' .throw(false))) {continue ; }");
tryItOut("for(let y in [5,6,7,8]) with({}) with({}) { ; } ");
tryItOut("var prototype = __noSuchMethod__, constructor, __proto__ = <><x><y/></x></>;");
tryItOut("if(this ? #3={a:#3#} : <><x><y/></x></>) break M; else export __parent__;");
tryItOut("with(this.zzz.zzz)<><x><y/></x></>;");
tryItOut("export *;{}");
tryItOut("with({}) { export constructor; } ");
tryItOut("/*infloop*/L:for(<x><y/></x> = window; [z1,,]; *::*) { }");
tryItOut("with({}) { (__proto__) = prototype; } ");
tryItOut("L:with({__proto__\t: ((function ([y]) { }.throw( /x/g )) in __iterator__)})/*for..in*/for(var [<></>, function::__iterator__] = __proto__ = this in  \"\"  instanceof <><x><y/></x></>) {/*infloop*/for(let __parent__; <y><z/></y>; <><x><y/></x></>) throw 1e81;export constructor; }");
tryItOut("{const constructor, prototype; }");
tryItOut("/*infloop*/for(const __parent__; ; new [1,2,3,4].map()) with(({ prototype: prototype, function::__proto__: __count__ }) = (uneval({}))){yield ({a2:z2});switch(<><x><y/></x></>) { case *::*: undefined;break; default: return this;case 0: break;  } }");
tryItOut("M:if((-1.yoyo(<x/>))) return <x><y/></x>; else {}");
tryItOut("switch(__noSuchMethod__.__iterator__ = \f<x><y/></x>.( /x/g )) { default: switch( /x/g ) { default: var constructor = constructor, prototype =  '' ; }break; case 4: break;  }");
tryItOut("/*for..in*/L:for(let [constructor, __parent__] = prototype = -1 in 1e81) break M;");
tryItOut("with({__parent__: new (({}).hasOwnProperty)()})yield;\neval\n");
tryItOut("/*infloop*/do {var constructor; } while((let __proto__));");
tryItOut("let (__count__, __parent__) { continue ; }");
tryItOut("{if(0) {; } else  if (<x/>) {{}const prototype, __proto__; }/*for..in*/M:for(const __iterator__.__proto__ in ((/a/gi)(__proto__.function::__noSuchMethod__ getter= (new Function(\"var __noSuchMethod__ = <><x><y/></x></>;\")))))*; }");
tryItOut("if(new <y><z/></y>) * else  if (yield <><x><y/></x></>) gc()");
tryItOut("/*for..in*/for([__parent__, constructor] =  in <xxx>{__parent__}</xxx>) while((@foo) && 0){; }");
tryItOut("if(this.__defineSetter__(\"__parent__\", function  __count__ (prop)(constructor = __parent__))) return __iterator__; else  if (__noSuchMethod__.__iterator__ setter= [1,2,3,4].slice) {{}M:if(#1=({__parent__: false in this})) {prototype = prototype, prop =  '' ;export *; } }");
tryItOut("do {with(__noSuchMethod__ .@*:: #1#)yield undefined;/*for..in*/for(var prop in ((\tnew Function)(__parent__ =  '' ))){prop, prop = undefined; } } while(() && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in <><x><y\f/></x></>) throw  /x/g ;");
tryItOut("/*infloop*/M:for(var prototype; constructor;  \"\" ) {;export *; } const prototype;");
tryItOut("let (prototype =  \"\" ) { export prop; }");
tryItOut("with([\r[this.watch(\"__parent__\", (window).watch)].sort(({}).__lookupGetter__) for each (__parent__ in window) for (eval(\" '' \", __parent__) in  /* Comment */window) for ((window)(false) in ()) for each (__noSuchMethod__ in @foo)]){export __proto__; }");
tryItOut("/*infloop*/while(( /x/ \n)){<><x><y/></x></>;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/\tfor(__proto__; (#2= \"\" .prototype); ({})) {export __parent__;if(0.1) {return 0; } }");
tryItOut("if(true) { if (3.141592653589793) continue L;} else {return;\fyield <x><y/></x>; }");
tryItOut("{}\n");
tryItOut("/*infloop*/while(yield (*)(@foo)){;{} }");
tryItOut("while((({__iterator__: window, var __count__ = <x/>; })) && 0){prototype, __noSuchMethod__; }");
tryItOut("if(<x><y/></x>) { if ((-0)) const __count__, __proto__; else const function::__count__ = __parent__, __iterator__;}");
tryItOut("/*for..in*/M:for(const [prototype, __noSuchMethod__] = __parent__ in ((function  __parent__ ()prototype).call(<><x><y/></x></>, new <><x><y/></x></>([z1], <><x><y/></x></>)).*)) {export constructor; }");
tryItOut("while(((__parent__)) && 0)prototype = null, __noSuchMethod__ = false; const __iterator__;");
tryItOut("switch(new (undefined)()) { default: break; ;case 8: break;  }\nM:if((<x/>)[@foo]) return prototype; else ");
tryItOut("with(__noSuchMethod__ .. window);");
tryItOut("if((({__parent__: this}))) {( '' );{} } else {/*infloop*/while(#0=[this])break M; }");
tryItOut("if(033) {{__count__ = 1e-81; } }");
tryItOut("<><x><y/></x></>;");
tryItOut("/*for..in*/for(var [__proto__, __proto__] = __parent__ in this) {export *;yield __noSuchMethod__; }");
tryItOut("let(__parent__ = this) ((function(){prototype;})());");
tryItOut("/*infloop*/for( ; (__count__ = prop); (5.0000000000000000000000).call(this, <><x><y/></x></>)) {let __iterator__; }");
tryItOut("if(this\f.propertyIsEnumerable(\"__parent__\")) {}");
tryItOut("/*infloop*/do throw  \"\" ; while(__proto__);");
tryItOut("with({__iterator__: window.yoyo(*::*)}){with({}) { let(__noSuchMethod__) ((function(){let(prop = 033) ((function(){yield (function ([y]) { })();})());})()); }  }");
tryItOut("continue ;");
tryItOut("L: {export prototype; }");
tryItOut("/*infloop*/M:while(0x99){gc()gc() }");
tryItOut("/*for..in*/L:for([__parent__, __iterator__] = constructor in <x><y/></x>) {yield @foo; }");
tryItOut("__count__");
tryItOut("let(Math.pow) { yield constructor;");
tryItOut("if(typeof (eval(\"\", __proto__).@foo.__lookupSetter__(\"__iterator__\"))) /*infloop*/M:while(Iterator(<x><y/></x>)){yield this;undefined; }export prototype;");
tryItOut("{if(( '' )[__iterator__]) {yield this; } }");
tryItOut("if(#2=[[[]] .@x:: 3]) gc() else  if (({__iterator__ setter: {M:if(<x><y/></>) { if (<><x><y/><//*\n*/x></>) let prototype = <x><y/></x>;} else __noSuchMethod__, __noSuchMethod__ = null; } })) {throw <y><z/></y>; }\nM:if((({__parent__ getter: null }))) export *; else {gc()/*for..in*/for(const [__count__, __iterator__] = 1e4 in <x/>) {export __count__; } }/*");
tryItOut("M:if(<y><z/></y>) export *; else  if (<y><z/></y>) {(this); } else {export __proto__;; }");
tryItOut("/*infloop*/do return x::constructor\f; while(((<><x><y/></x></>).call)([[,] if ( /x/g )], \n<y><z/></y>));");
tryItOut("if(([<><x><y/></x></>]).eval((({}))[@foo])) { if ( '' ) {if(<x><y/></x>.__lookupGetter__(\"__parent__\") :: (1 for (x in []))) {gc() } else  if (window) {true; } } else {/*infloop*/M:for(let ({ __noSuchMethod__: ({ __count__: constructor, __proto__: ({ __proto__: __iterator__, __count__: __parent__ }) }) }) = ({constructor: <><x><y/></x></>, constructor setter: function  __proto__ (__noSuchMethod__, prototype) { yield <><x><y/></x></> }  }); <y><z/></y>; [\t[,,z1] if ( /x/ )]((window for each (<><x><y/></x></> in arguments)),  /x/ )) __noSuchMethod__switch(('fafafa'.replace(/a/g, function  prototype (__count__, __count__)@foo))) { default: export __noSuchMethod__;case [__noSuchMethod__].filter(Function): ;case 9: case 3: break; new Function const __noSuchMethod__; } }}");
tryItOut("{export __proto__; const __noSuchMethod__; }");
tryItOut("/*infloop*/M:while(4.){{const prop = <x/>, prop = <><x><y/></x></>; } }");
tryItOut("gc() const prototype;");
tryItOut("/*for..in*/for(__proto__ = (<y><z/></y>-- + (/*\n*/__count__.())) in ()) {/*infloop*/while(prototype.constructor){/*for..in*/for(const __proto__ in (((/ yyy(__proto__, prop) { (new Function).call } )(1e4))){throw @foo;var prototype, __noSuchMethod__; } const __noSuchMethod__;export *; } }");
tryItOut("var __proto__ = <x/>//h\n\n");
tryItOut("/*for..in*/for([prototype, , ] in (((<y><z/></y>.unwatch(\"__proto__\").__lookupGetter__(\"__proto__\") >= (Object())).__defineSetter__)(__parent__.(<x><y/></x>.propertyIsEnumerable(\"__parent__\") ? <><x><y/></x></> : (uneval(<><x><y/></x></>)).@foo))))const __noSuchMethod__ = #3={a:#3#};");
tryItOut("/*infloop*/do {/*for..in*/for(var [__iterator__, __proto__] = (.2 %= <x><y/></x>) in undefined) {/*for..in*/for(var [constructor, __proto__] = <x/> in  /x/g ) {yield; } }(<x><y/></x>); } while(#1=[<x/>].hasOwnProperty(\"__iterator__\"));");
tryItOut("/*infloop*/for(const  = 'fafafa'.replace(/a///h\ng, Math.sin); __parent__.hasOwnProperty(\"prototype\"); @foo()) {continue ;try { export *; } finally { export *; }  }");
tryItOut("if((/a/gi)( /x/g , #3={a:#3#}).valueOf(\"number\")) { if (<!--yy-->) yield;} else {\f/*for..in*/for(let ({__iterator__: null}) in prop) export let;if(window) { if (@foo) {export __iterator__;break ; } else <x><y/></x>;} }");
tryItOut("return;");
tryItOut("/*infloop*/for(__iterator__; (this.zzz.zzz); __noSuchMethod__) {(null);return; }");
tryItOut("with(@foo)(0x99);");
tryItOut("switch((true--).propertyIsEnumerable(\"__parent__\")) { default: export *;break;  }");
tryItOut("with(( ''  >> __count__) += new ((<><x><y/></x></>).apply)({export prop; }))L:with(prototype.prop)return true;");
tryItOut("/*infloop*/M:for((\n<x><y/></x>); (__noSuchMethod__ = prototype); ([prop if (false)]())) {/*for..in*/for(var [__count__, __proto__] = undefined >>> 3/0 in __iterator__) {gc()continue M; } }");
tryItOut("<y><z/></y>\nprop: *\n");
tryItOut("__parent__ = __count__;");
tryItOut("with({__parent__: (++( /* Comment */<x><y/></x>))}){var prop = <x><y/></x>; }");
tryItOut("for(let y in [5,6,7,8]) return new ((new Function(\"export *;\")))();");
tryItOut("yield;");
tryItOut("while((*::*\n) && 0)const __iterator__, __count__ = true;");
tryItOut("{/*for..in*/for(__parent__.prototype in ((__proto__ =  \"\" )(this.__defineGetter__(\"each\", /a/gi))))const __parent__ = <><x><y/></x></>; }");
tryItOut("L:if((__iterator__)[ { yield new Number() } ]) { if ((new this((function ([y]) { })(), *))) yield <x><y/></x>; else {yield; }}");
tryItOut("/*infloop*/L:for(prop; (this.zzz.zzz); [(__count__ & [1]) if ( '' )]) {L:switch(<><x><y/></x></>) { case <x/>: {}break;  }case false: break; case (function ([y]) { })(): case 9: break; case __parent__: ;break;  }\r");
tryItOut("/*for..in*/for(__noSuchMethod__ = __proto__ =  /* Comment */__parent__ / .2, ({ __parent__: [prototype], __parent__: ({ constructor: yield }) }) = new ( ''  ^ *::*)(this.zzz.zzz, @foo) in (__proto__ = 1e81.__noSuchMethod__)) /*infloop*/for(const [] = \t(<x><y/></x>.propertyIsEnumerable(\"prop\")); <x><y/></x>.__lookupGetter__(\"__count__\");  /* Comment */__noSuchMethod__) gc()return <y><z/></y>;");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("let (__iterator__) {  }");
tryItOut("__parent__, return <x><y/></x>;");
tryItOut("if([constructor].some(function(q) { return q; })) { if (*) {#3={a:#3#}; }} else {this; }");
tryItOut("{/*infloop*/for(let prop; ((0x99.*).eval((constructor.prototype))); eval(\"export *;\", ( /x/g .isPrototypeOf(function ([y]) { })))) {gc; }var __proto__\n }");
tryItOut("/*infloop*/for(var prototype; ---1; <><x><y/></x></> ? true : <x><y/></x>) ;");
tryItOut("M:\tif(__noSuchMethod__ = #3={a:#3#}) { if ((__proto__.eval(<y><z/></y>)).\f__defineGetter__(\"__noSuchMethod__\", new Function)) break M; else {throw window;throw null; }}");
tryItOut("L:if(( /x/g .__lookupGetter__(\"(__parent__)\"))) {gc()<><x><y/></x></>; } else  if ((__proto__ =  \"\" )(constructor = <x/>)) {continue M;return\nyield <y><z/></y>; }");
tryItOut("let (__proto__) { (__proto__); }const __noSuchMethod__, prop = window;");
tryItOut("return;");
tryItOut("M:switch([new function(y) { yield y; (<x/>);; yield y; }(#1=({__proto__: <x><y/></x>\n}), (//h\nyield this))['prop']] = \ttrue.prototype , ((gc)(window)).unwatch(\"prototype\")) { case 9: throw constructor;default: break; break; break;  }");
tryItOut("/*infloop*/L:for(3/0; <><x><y/></x></>; __noSuchMethod__) Math.pow");
tryItOut("{}");
tryItOut("/*for..in*/for(let __iterator__ in (((new Function(\"/*for..in*/for(__parent__ in  /x/ ) {yield this;(<><x><y/></x></>).watch }\")))(0/0.@*)))yield\n");
tryItOut("M:with( /* Comment */033){(null); }");
tryItOut("/*infloop*/do export *; while(__proto__.constructor = null);");
tryItOut("{return; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = ((<><x><y/></x></>).yoyo((<x><y/></x>.\t__lookupGetter__(\"__parent__\")))) in \nundefined) /*infloop*/L:do  const prop; while(4.);");
tryItOut("/*infloop*/for((this)[ /x/g ]; __parent__ = __parent__; function(q) { return q; }) [1,2,3,4].map");
tryItOut("throw StopIteration\n/*infloop*/for(((<x><y/></x>); & constructor).isPrototypeOf(<xxx {__iterator__}={<y><z/></y>} />); let (__count__ =  /x/ , __count__ = (-0)) (this.__defineGetter__(\"__count__\", Math.sin)).watch(\"prop\", ().__defineSetter__); ((({ function::__proto__: ({ __iterator__: <y><z/></y>, __proto__: prop }), __count__: \t({ constructor: __proto__, __parent__: prototype }) }) = [, __iterator__, , ]) <= 'fafafa'.replace(/a/g, (<x><y/></x>).apply))) {return;return; }");
tryItOut("/*for..in*/L:for(let __parent__ = (__noSuchMethod__ = [,,]) in <x><y/></x>) /a/gi");
tryItOut("M:if(<x><y/></x>) { if ( /x/g )  else var __iterator__, __proto__;}");
tryItOut("/*infloop*/for(@foo; [z1,,]; arguments) ( '' );");
tryItOut("/*infloop*/for(__proto__ = new Date(<xxx {function::__proto__}={<y><z/></y>} />); (__parent__); ((<><x><y/></x></> .@*::  \"\" ) , __iterator__.prototype getter= gc @ undefined.unwatch(\"prop\"))) continue L\n");
tryItOut("/*infloop*/do return; while(window %= 0.1);");
tryItOut("/*infloop*/M:for(this; *::*; <x><y/></x>) {function(y) { yield y; yield [1,,];; yield y; } }");
tryItOut("while(((( /x/g ).call((uneval( \"\" )), eval(\"<x><y/></x>\", __count__)).unwatch(\"__parent__\"))) && 0)if([z1]) { if (<x><y/></x>) ({}).__lookupGetter__} else {const prop, __parent__ = [1];\t /x/ ; }");
tryItOut("let (constructor = {<><x><y/></x></>; }) { if(<x/>) { if (new ({}).__lookupGetter__(null)) throw <><x><y/></x></>; else export *;} }");
tryItOut("if(<x><y/></x>.__proto__) { if (prop) var prop = <x><y/></x>; else const __noSuchMethod__;}");
tryItOut("let (({ __count__: __noSuchMethod__ }) = 1e-81.propertyIsEnumerable(\"__count__\")) { /*infloop*/for(let __count__ = <x><\ty/></x>; [1,,]; null) { } }");
tryItOut("L: {break M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __proto__ in this.zzz.zzz) yield;");
tryItOut("/*infloop*/while(<x/>){yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <><x><y/></x></>) ;");
tryItOut("with(({ prop: ({ __iterator__: constructor, __parent__: __parent__\n }) })(( \"\"  ^= .2.unwatch(\"constructor\"))) =  /* Comment */true()){/*for..in*/for(var [__proto__, constructor] = (new Iterator(#2=__proto__ = __count__)) in __noSuchMethod__ =  /x/ ) {return;(<x><y/></x>); } }");
tryItOut("do ({a2:z2}) while((3.141592653589793) && 0);");
tryItOut("L:if(<><x><y/></x></>) yield; else ;");
tryItOut("{}");
tryItOut("for(let y in [5,6,7,8]) with({}) return;");
tryItOut("/*infloop*/M:for(arguments.__defineGetter__(\"prototype\", (new Function(\";\"))); ((yield <x><y/></x>)); (p={}, (p.z =  /x/g )())) export __parent__;");
tryItOut("break M;");
tryItOut("/*for..in*/for(let __proto__(constructor) in ({__proto__ getter: true, __parent__: false })) {let (prop = 5.0000000000000000000000, __count__) { {} } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in (({ __count__: ({ prop: __iterator__ }) }) = (yield undefined))) {M:if( /x/g ) {yield;function  constructor () { {} }  } else  if (@foo) {export __proto__; } }");
tryItOut("return null;");
tryItOut("/*infloop*/M:while(5.0000000000000000000000){gc()return null; }");
tryItOut("do {throw <x/>; } while(((<x><y/></x> * <x><y/></x>\t).__parent__) && 0);");
tryItOut("/*infloop*/for(__noSuchMethod__; ((uneval(-<y><z/></y>)))[__count__.__parent__ getter= Function]; 0x99) let \t(__count__ = (-0.hasOwnProperty(\"prop\"))) { let __parent__ = <y><z/></y>, __proto__; }");
tryItOut("with({prop: (!<x><y/></x>)})return  '' \n/*for..in*/for(const [constructor, constructor] = [1] *= window in *::*) return\n\n");
tryItOut("{yield\n/*for..in*/for(__proto__ in ((eval)((true.*)))){return;{} } }");
tryItOut("/*infloop*/L:for(__proto__; (({ constructor: ({ __noSuchMethod__: __parent__ }) }) = [__proto__]); this.zzz.zzz) /*infloop*/M:while((String(undefined, 0.1))){/a/givar prop; }");
tryItOut("/*infloop*/for([1]; <><x><y/></x></>; (function ([y]) { })()) (window);");
tryItOut("/*infloop*/for([11,12,13,14].some ^ <></> .@*:: new (3.141592653589793)1e81, \"); *::*; (prop.__noSuchMethod__ = __iterator__ .@x:: *::*)) {constructor = <y><z/></y>, __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const <>break ;</>.__count__ in *::*) {/*infloop*/for(var __proto__ = ; (<y><z/></y> >= #3={a:#3#}); [ /x/  for (prop in <x><y/></x>)]) export *; }");
tryItOut("M:while(([11,12,13,14].map.isPrototypeOf(window)) && 0){/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__(<><x><y/></x></>) in window) return <><x><y/></x></>; }");
tryItOut("if(false) { if ([,,]) {var __count__;{} } else throw undefined;}");
tryItOut("if((<y><z/></y>.@foo.__lookupSetter__(\"prop\") << (*::*.__defineSetter__(\"__noSuchMethod__\",  \"\" ))).__defineSetter__(\"prototype\", this.zzz.zzz)) {/*infloop*/L:for(this /= (5.0000000000000000000000.__count__); (each.(*::*)); __count__ = (new ({}).__lookupGetter__( \"\" )).prototype = (yield <x><y/></x> .. <y><z/></y>)) {return;let (constructor = ((uneval( '' )))) { Function } }(false /  /x/g ); }");
tryItOut("/*infloop*/L:for(var prop; (uneval([11,12,13,14].some)); (__parent__.(<><x><y/></\tx></>))) {while((<><x><y/></x></>) && 0)var __proto__;\f }");
tryItOut("do {export __parent__;const __count__; } while((__parent__) && 0);");
tryItOut("continue L;");
tryItOut("let __count__ = <x><y/></x>, constructor;");
tryItOut("if(new (gc)(* %= <x><y/></x>, constructor)) {if([this for (__parent__ in [,,])]) { if () var __proto__ = window, prototype; else {gc() }} } else  if (<bbb xmlns:ccc=\" '' \n\"><ccc:eee></ccc:eee></bbb>) {break ;<><x><y/></x></> }");
tryItOut("prototypeswitch((new RangeError([* for (__noSuchMethod__ in  /x/ )]))) { default: case 8: constructorbreak; \t }");
tryItOut("/*for..in*/for(let constructor(prop) in delete this) {/*for..in*/M:for(var __count__ in ((Function)(new (*::*)(0x99))))export __parent__;const constructor = <><x><y/></x></>, __noSuchMethod__ = 3/0; }");
tryItOut("with({__parent__: (__noSuchMethod__)}){let (__proto__ = <><x><y/></x></>) { export *; } }");
tryItOut("/*infloop*/for([<y><z/></y> >>= *::* for each ( ''  in __parent__) for (prop in .2)]; <zzz>(prop ^ new (<><x><y/></x></>)( /x/g ,  '' ))</zzz>; <><x><y/></x></>.__lookupGetter__(\"__iterator__\") !== 4.) {yield [,,]; }");
tryItOut("{(this);\t }");
tryItOut("x");
tryItOut("return (({prototype: @foo.__lookupGetter__(\"__iterator__\"),  get __noSuchMethod__ __noSuchMethod__ (\f({ __noSuchMethod__: prototype, __parent__: prototype }))(__proto__.@*) }));");
tryItOut("if(export *;) __count__ = constructor, constructor; else export *;");
tryItOut("/*infloop*/L:for(var __proto__; __count__.__proto__ getter= (({}).__lookupGetter__).apply; ({__noSuchMethod__: false }).__parent__) {gc()L:if(@foo) let prop = <x><y/></x>; else  if (@foo) { } else {yield this;{}\f } }");
tryItOut("{;export *\f; }");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("L:if(__proto__ = null) {{}function  prop (prototype, __noSuchMethod__)constructor } else switch(#1#[window]) { default: return;break;  }");
tryItOut("L:with({__parent__: <><{__iterator__}>{yield;/*for..in*/for(let [yield, __noSuchMethod__] = prototype in #3={a:#3#}) let __parent__; }</{__iterator__}></>})M:with({prop: __parent__ = 0.1\r})throw 0x99;");
tryItOut("let(__proto__ = <x/>, ({ prototype: ({ constructor: ({ prop: ({ __proto__: __noSuchMethod__, __iterator__: __proto__ }) }), __iterator__: [({ __iterator__: prop, __iterator__: __proto__ })] __iterator__  }) })) ((function(){try { throw __noSuchMethod__; } catch(__iterator__) { with({}) let(constructor = constructor = <x><y/></x>.__defineGetter__(\"__count__\", ( \"\" ).watch) + ({this: __parent__}), (constructor) = prototype = <><x><y/></x></>) { for(let y in [5,6,7,8]) return; } finally { for(let y in []); } })());");
tryItOut("{( \"\" );var prototype; }");
tryItOut("with({__parent__: ( /* Comment */ /x/ )}){/*infloop*/for({}; this; <x><y/></x>) export __proto__; }");
tryItOut("L:if(__iterator__) { /x/g ; } else  if (this) {; } else continue ;");
tryItOut("/*infloop*/L:while(__noSuchMethod__)__proto__ = , __iterator__ = <><x><y/></x></>;");
tryItOut("return __noSuchMethod__.prototype;");
tryItOut("yield;");
tryItOut("throw *\n");
tryItOut("return;[1,2,3,4].map");
tryItOut("if(null &= <y><z/></y>) gc() else  if ( { (function ([y]) { })(); } ) ({__count__: [15,16,17,18].some(function(y) { yield y; ;; yield y; }, -0)}), __proto__.__iterator__");
tryItOut("for(let y in [5,6,7,8]) with({}) { export *; } ");
tryItOut("while(((\n[1] !== __noSuchMethod__)) && 0){<y><z/></y>;return; }");
tryItOut("if((({prop: <x/>})).__count__ = 1e+81 &= window) do var __noSuchMethod__ = [,,]; while((</*\n*/x><y/></x>) && 0); else  if ((__noSuchMethod__ = prop).prop = eval(\" /x/g \", #1=[#1#])) {this;\nif(this) {return; } else  if (export *;) {{} } else try { {} } catch(__proto__) { __count__ = *::*; } \n }");
tryItOut("do {const __noSuchMethod__ = *::*, __iterator__;M:if(null) {{} } else  if (033) {let constructor = *;return <><x><y/></x></>; }\n } while(((\n(p={}, (p.z = [1,2,3,4].slice())()))) && 0);");
tryItOut("M:if(this) {__iterator__ = true, __iterator__ = <x><y/></x>; } else L: E");
tryItOut("var __noSuchMethod__, __noSuchMethod__\f\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in constructor) throw undefined;");
tryItOut("/*for..in*/for([__parent__, constructor] = typeof (1e81.@foo !== (new ('haha'.split)())) in ([15,16,17,18].some(function(q) { return q; }, ({a2:z2}))).propertyIsEnumerable(\"__parent__\")) prop = <x><y/></x>, prototype = <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("M:if(+__count__ = (*::* ^ *::*.eval(({__noSuchMethod__ getter: Math.sin })).__defineGetter__(\"constructor\", new Function))) with({({ constructor: __count__ }): (<><x><y/></x></>)(@foo, ({ __noSuchMethod__: ({ __proto__: __iterator__ }) }))})function(id) { return id }; else  if (true) {return <x><y/></x>;{} } else {return; }");
tryItOut("L:if((3.141592653589793 .. 5.0000000000000000000000.propertyIsEnumerable(\"prop\"))) /*for..in*/for(let __count__ = [,,z1] in prototype) ");
tryItOut("return  /x/ ;");
tryItOut("if(({__parent__: (__iterator__%=this) })) { if ( /x/ ) __noSuchMethod__ = constructor; else {{const __parent__, prop;throw window; }if(<x><y/></x>) yield false; else x }}");
tryItOut("yield *; const __count__");
tryItOut("/*infloop*/while(<ccc:ddd> </ccc:ddd>){\t}");
tryItOut("with({}) let constructor = try { (<x><y/></x>); } catch(__proto__ if (function(){return #1=[#1#];})()) { ; } catch(prototype) { ; } ;");
tryItOut("return (function(id) { return id } > 0x99) .@ (<x><y/></x>)\n/*infloop*/M:for(var [] = [11,12,13,14].\fsort; this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map); true.watch(\"prototype\", @foo)) {if(window) export prop; else  if (this) return; else {yield; } }");
tryItOut("/*for..in*/for(const __iterator__ in -1) {return #1#; }");
tryItOut("throw \n@foo;");
tryItOut("/*infloop*/do do gc() while(((__proto__ =  /x/g )) && 0)\n while(true)\n");
tryItOut("/*for..in*/M:for(let __count__.__parent__ in (('haha'.split)(prop = return <x/>;.__lookupSetter__(\"prop\"))))let (prototype, __iterator__ = \f<x><y/></x>) { export __count__; }");
tryItOut("prototype = *, prototype = true;");
tryItOut("throw StopIteration;");
tryItOut("{M:if((uneval(0/0))) { if (0 <<=  \"\" ) { }} else gc() }");
tryItOut("{'haha'.split }");
tryItOut("/*for..in*/M:for(var [__iterator__, __noSuchMethod__] = undefined in __iterator__) yield;");
tryItOut("/*for..in*/for(const prop in (('haha'.split)(((Function).call(<><><ccc:ddd>yyy</ccc:ddd></></>, eval(\"export *;\", 1e+81), ((window if ()).yoyo(true)))))))/*infloop*/for(({ prop: ({ __count__: __parent__, function::prototype: [] }), __proto__: <><bbb xmlns=\"\"><!--yy--></bbb></> }) = <><x><y/></x></> ? @foo : <><x><y/></x></> < ({prop setter: Math.pow }); new <><x><y/></x></>(-1); (<y><z/></y> <= <x/>)) if(constructor) ; else  if (({a1:1})) {gc() } else {; }");
