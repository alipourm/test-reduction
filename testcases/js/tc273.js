tryItOut("(__parent__)\n");
tryItOut("/*infloop*/M:for(!~<x/>.@foo; (__parent__|= \"\" ); (new Number(this, 4.)) ?  /* Comment */constructor : __iterator__.__iterator__) L:if(null) {prop; } else  if ([,,z1]) {yield window; } else yield; const __parent__;");
tryItOut("if(false .@x:: (this -= null[ '' .isPrototypeOf(<><x><y/></x></>)])) return 0x99");
tryItOut("L:switch( '' .watch(\"__noSuchMethod__\", (__noSuchMethod__).__defineSetter__)) { case 7: throw <y><z/></y>;break; break; default: [1,2,3,4].mapbreak;  }");
tryItOut("throw <x/>");
tryItOut("if(*) if(*::*) yield <x><y/></x>; else  if ((delete __proto__).@foo) {throw *::*; } else {function  __count__ ()undefined{} }");
tryItOut("\tM:switch([15,16,17,18].some((<x/>).__defineSetter__, window)) { case RangeError(__count__ = 0x99, [[1]]): gc()break; /*infloop*/M:while((([1,2,3,4].map).call(<y><z/></y>, )))if(this) {(function ([y]) { })() } else  if (4.) const prototype = true;break; default: /*infloop*/do {yield;gc() } while((RangeError(<x/>, <><x><y/></x></>)));case 6: {break M;<><x><y/></x></>; }return; }");
tryItOut("/*infloop*/while(#1#.valueOf(\"number\")){__noSuchMethod__, prototype;continue M; }");
tryItOut("switch((let (__count__, prop) @foo = (yield <><x><y/></x></>))) { case 8: break; ;break; default: yield [,,z1];break; export *;case 7: return  '' break;  }");
tryItOut("if(({prop getter: \n(<y><z/></y> | -0) })) if((uneval(<><x><y/></x></>))) return; else  if (__iterator__-=undefined) __parent__ = <x><y/></x>, __proto__; else return constructor; else  if (\f([<x/> for each (__proto__ in *::*)] ,  \"\" )) /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in #1#) __iterator__, __noSuchMethod__");
tryItOut("M:with({prototype: this.__defineGetter__(\"prototype\", function (__parent__) { yield (window)(0, 1e81) for (({ __iterator__: prototype }) in __iterator__) for (__parent__ in  /x/g ) for (__count__ in <y><z/></y>) } )})let prototype = window, yield;if((-1)) gc() else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var set in <x><y/></x>) {export __count__; }");
tryItOut("<><x><y/></x></>;\nexport *;\n");
tryItOut("with({__count__: +<><x><y/></x></>.prop << #1=[(__proto__.(constructor) @ (prop.__noSuchMethod__ getter= function (prototype, __noSuchMethod__) { yield; } ))]})/*infloop*/for(var constructor = <x/>; <x><y/></x>.(*::*); new Number(@foo, (-0))) Function");
tryItOut("(\nnew ([,,z1]++)(({__iterator__: 1e4})));");
tryItOut("/*infloop*/do {evalyield; } while( /x/ );");
tryItOut("export __proto__;");
tryItOut("throw ((<x><y/></x>\n for (prop in 5.0000000000000000000000) if (<x><y/></x>)));");
tryItOut("throw function::__parent__;");
tryItOut("/*infloop*/do return; while((new Date([([[1]] + <x/>)], [prototype, , , ]\r = <><x><y/></x></> instanceof [z1])));");
tryItOut("");
tryItOut("let ((delete <x/>).function::prototype = this.zzz.zzz.watch __iterator__ = !(<><x><y/></x></>)((-1), __noSuchMethod__)(\"prototype\", [1,2,3,4].slice)) { /*infloop*/do function::__parent__ = true, __count__; while(<y><z/></y>[true]); }");
tryItOut("/*infloop*/M:for(let __proto__ = __proto__.throw(@foo); (-1); [11,12,13,14].some) {;throw var __count__ = <x><y/></x>;; }");
tryItOut("L: {export *;\n }");
tryItOut("<x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in [,,]) {export *; }");
tryItOut("L:if(<x><y/></x>) return <x><y/></x>; else  if ([,,]) export __parent__; else return arguments;");
tryItOut("/*for..in*/M:for(const __parent__ in <y><z/></y>) return;");
tryItOut("return;");
tryItOut("/*infloop*/do prototype; while( \"\" );");
tryItOut("L: {continue ;export prop; }");
tryItOut("if((('haha'.split).call([11,12,13,14].map, yield;))) yield  /x/ ; else  if (<x><y/></x>.@*) {export prop; }");
tryItOut("/*infloop*/for(this.__defineSetter__(\"__iterator__\", [z1,,]); 1e+81.__lookupGetter__(\"__iterator__\") .@*:: this .@*:: window >> function (__count__, __count__) { return [z1]; } ; ('fafafa'.replace(/a/g, #3={a:#3#})).isPrototypeOf( /x/ )) M:switch(<x><y/></x>) { default: case 6: throw (function ([y]) { })();case ({a2:z2}): function  prototype (__count__, __iterator__)<x/> }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (<x/>.__proto__) in __count__.<x><y/></x>) {;continue L; }");
tryItOut("if(<x><y/></x>) {} else  if (3.141592653589793) {continue ;gc() }");
tryItOut("switch(this.__defineSetter__(\"constructor\", gc)) { default: /*infloop*/for(let __count__ = ([11,12,13,14].sort) && (-1 for each (__noSuchMethod__ in function ([y]) { })); <>function ([y]) { }</>; false()) {const __count__ =  /x/g , __proto__ = true;\nconst __parent__ = [z1,,];\n }break;  }");
tryItOut("this.zzz.zzz;");
tryItOut("throw function::__iterator__;/*infloop*/while(#1=[#1#]){var __parent__;yield <x/>; }");
tryItOut("L:if((__noSuchMethod__ =  /x/ )) (window);");
tryItOut("if((__noSuchMethod__ = prop)) __parent__; else  if (this.__defineSetter__(\"prototype\", function  constructor (prototype)0.1)) yield; const __noSuchMethod__;");
tryItOut("yield <y><z/></y>;");
tryItOut("/*for..in*/for(constructor = null in __parent__.prototype getter= window) /*infloop*/for(var ({ __iterator__: ({ __count__: __count__ }) }) = (yield (<x/>\n)); let (__proto__ = [,,], __count__ = *) (<x><y/></x>.(prototype)) %= (prototype = []); __proto__.(yield delete <x><y/></x>)) (__parent__);");
tryItOut("M:switch(++ /* Comment */#0=[,]) { case 8: if(<><bbb xmlns=\"<x><y/></x>\"><!--yy--></bbb></>\n) {yield;gc() } else /*for..in*/for(let __parent__ = false for each (prototype in window) in null) {__count__ }break; default: yieldL:if((<><x><y/></x></>.unwatch(\"prototype\"))) { if ((yield  '' )) {(new Function(\"break ;\")) } else {export constructor; }} }");
tryItOut("/*for..in*/M:for(prototype in (([])(__proto__ = __parent__.@foo)))let prop = false, prototype = 1e-81;");
tryItOut("/*infloop*/L:do {export *;{} } while(function(y) { yield y; const __iterator__, prop;; yield y; });");
tryItOut("const __proto__;\nif(<x><y/></x>) {var __iterator__ = <>\t<x><y/></x></>;false//h\n; }\n");
tryItOut("return (__parent__-=-1).__defineSetter__(\"__parent__\", ({}).__lookupGetter__);");
tryItOut("return;");
tryItOut("let __noSuchMethod__, __noSuchMethod__ = {}");
tryItOut("/*infloop*/M:for(window; <x/>; <><x><y/></x></>) ");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(const __noSuchMethod__; (yield undefined); function (prototype, __count__) { export prop; } ()) {return this; }");
tryItOut("/*infloop*/do throw @foo; while(eval(\"break L;\", @foo));");
tryItOut(";");
tryItOut("let __count__ = <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (typeof (function ([y]) { })() ..  \"\" )(this.__defineGetter__(\"__noSuchMethod__\", function  prototype (constructor) { yield window } )) in ((__proto__ *= this).valueOf(\"number\"))) {with({__proto__: <y><z/></y>})\n{gc }{} }");
tryItOut("/*infloop*/M:for(({ yield: prop }) = this >>> __parent__; *::* *= undefined; window) ");
tryItOut("if(null.isPrototypeOf(window)) ; else  if ( '' .__lookupGetter__(\"__proto__\")) throw *::*; else { }");
tryItOut("{ }");
tryItOut(".2var constructor = <x><y/></x>, __parent__;");
tryItOut("L:if(@foo.__noSuchMethod__ = prop(4.).@*) { if (<><bbb xmlns=\"()\"><employee id=\"1\"><name>Joe</name><age>20</age></employee></bbb></>) {return __count__; }} else {let prop = <x><y/></x>;export *; }");
tryItOut("prototype = __iterator__;");
tryItOut("/*infloop*/for(const [, constructor] = (({__parent__: (<x><y/></x>.(\t<x><y/></x>)),  get prop(prop)(((<x><y/></x>).__defineSetter__).apply)() })).*; prop = [15,16,17,18].filter(/a/gi, <><x><y/></x></>); (yield <><x><y/></x></>)) let (__iterator__ = <><x><y/></x></>, __count__) { {} }");
tryItOut("let (__noSuchMethod__) {  }\nL:while((@foo) && 0){export *;throw  /x/g ; }\n");
tryItOut("return <><x><y/></x></>.__defineSetter__(\"constructor\", null);");
tryItOut("/*infloop*/for(let [, ({ constructor: <x><y/></x> }), [__noSuchMethod__], , __iterator__] = __parent__.(__noSuchMethod__+=*::*);  '' ; (__iterator__ = true)) {(<><x><y/></x></>);([[]]); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in undefined) {throw prototype\n }");
tryItOut("let prop;");
tryItOut("L:if(prop.(())) { if (<x/>) /*infloop*/while(prototype = <x><y/></x> |= 4.){export *;gc() }} else {prototype, __iterator__;__proto__ = [1,,].__defineGetter__(\"constructor\", function(y) { yield y; export __count__;; yield y; }); }");
tryItOut("if((__iterator__)) yield <x><y/></x>;");
tryItOut("export *;");
tryItOut("/*infloop*/while((#2=[prop = <x><y/></x>])){if((\f<x><y/></x>.(<y><z/></y>) ? ((__proto__)(window)) : yield gc)) /*for..in*/for(__parent__ in *::*) {return; } else  if ((__parent__ = (<x><y/></x>()))) {break M;const __proto__, __noSuchMethod__ = <x><y/></x>\n\nwhile((<y><z/></y>) && 0){export __parent__;{} } } }");
tryItOut("return;<><x><y/></x></>;");
tryItOut("/*infloop*/L:while((__parent__ = __parent__))throw window;");
tryItOut("do yield <x/>; while((__count__ = false) && 0);");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __proto__] =  in @foo) {yield;return; }");
tryItOut("{;return __proto__; }");
tryItOut("try { return ?; } catch(prop if undefined) { yield {}; } finally { return; } ");
tryItOut("/*infloop*/L:for(const prop;  /x/g ; [z1]) {{} }");
tryItOut("export *;");
tryItOut("/*infloop*/for(({ __parent__: prop }) = [11,12,13,14].filter; (<x><y/></x> * true); <x><y/></x>.yoyo(prop)) return;");
tryItOut("{}\ncontinue ;\n");
tryItOut("for(let y in []);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var ( '' ).call(__parent__, window) in __parent__ = <x><y/></x>) L:with(undefined)export __count__;(__parent__);");
tryItOut("/*infloop*/for(<><x><y/></x></>; <y><z/></y>; *) {export prototype; }");
tryItOut("if(({__noSuchMethod__: +4.})) {{}M:with(1e-81){<y><z/></y> & <>\r<x><y/></x></> } } else  if (-3/0.hasOwnProperty(\"__noSuchMethod__\")) {throw 0x99.valueOf(\"number\"\f); } else {if(<x><y/></x>) {return null;throw <x/>; }(({})); }\n/*for..in*/for(const prototype in ((<><x><y/></x></>)(({a1:1})))){yield <x/>; }");
tryItOut("/*for..in*/for([__count__, prop] = (<><x><y/></x></>++) in [z1,,]) const __proto__;");
tryItOut("let (constructor = false, ({ __noSuchMethod__: __proto__ })) { L:with({__count__: *::*}){throw StopIteration; } }");
tryItOut("L:do {\fif(prop) { if (<><x><y/></x></>) __noSuchMethod__ else (1 for (x in []))}window; } while((( /* Comment */let (prototype = __count__) {})) && 0);");
tryItOut("((null == undefined)((<x/>.__lookupGetter__(\"__parent__\")), *::*))(this in <><x><y/></x></>) = __noSuchMethod__;");
tryItOut("{const __count__ = null, constructor; }");
tryItOut("switch((<><x><y/></x></>.propertyIsEnumerable(\"prototype\"))\t) { default: break;  }");
tryItOut("break ;if(this.__defineSetter__(\"__count__\", function(q) { return q; })) gc else  if ((new  /x/g (<x/>))) {yield; } else {}return set;");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("{* = __proto__; }");
tryItOut("/*infloop*/for(constructor = eval(\"({}).yoyo(({a1:1}))\", (__noSuchMethod__.isPrototypeOf([,]))); (this.hasOwnProperty(\"prototype\")); <x><y/></x> -=  \"\" .isPrototypeOf(constructor)) {{}{} }");
tryItOut("throw ((@foo.hasOwnProperty(\"__count__\")))(<x><y/></x>.(@foo));");
tryItOut("/*infloop*/while(__parent__.__count__ = <y><z/></y>)var __proto__;");
tryItOut("if((<x><y/></x>.__iterator__)) ( '' );");
tryItOut("{/*infloop*/for(<y><z/></y>; <y><z/></y>; *) yield <x><y/></x>; }");
tryItOut("if((true != * / true)) { if ((yield constructor).__defineSetter__(\"__parent__\", (1 for (x in [])))) const constructor =  /x/ , __iterator__; else {const constructor = window;/*infloop*/do {; } while(false); }}");
tryItOut("/*infloop*/while(new Array()){prop, __parent__; }");
tryItOut("with({prop: <><x><y/></x></>\n.prototype = (yield (eval(\" /x/g \", false)))}){with({constructor: yield *})throw *;return __noSuchMethod__; }");
tryItOut("if(<x/>) {const __iterator__ = *; } else {false; }");
tryItOut("({}).hasOwnProperty");
tryItOut("yield (( /x/  && false).__lookupSetter__(\"__iterator__\"));");
tryItOut("do return <x/>; while(((this.__defineGetter__(\"prop\", <x><y/></x>))) && 0);");
tryItOut("/*for..in*/for(const constructor in this.__iterator__) {yield;/*infloop*/L:for(3.141592653589793.throw(true); (__parent__++);  \"\"  >>> __noSuchMethod__) {export *;let constructor, <x><y/></x> =  /x/ ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var function::__proto__ in 1.3) ");
tryItOut("/*infloop*/L:do {break ; } while((this.__defineGetter__(\"prop\", Math.sin)));");
tryItOut("with(<y><z/></y>)var __parent__;");
tryItOut("with(__count__.__proto__ getter= (function(y) { yield y; {}; yield y; }).apply)var prop;");
tryItOut("/*infloop*/for(const __count__; ({ set yield() { yield <x><y/></x> }  }).constructor = (true.throw(function ([y]) { }).hasOwnProperty(\"__parent__\")).valueOf(\"number\"); <x/>) throw undefined;");
tryItOut("for(let y in []);");
tryItOut("do L:if('fafafa'.replace(/a/g, 'haha'.split)) { if (eval(\"(__iterator__);\", __noSuchMethod__ = __parent__)) {{}let (__iterator__ = yield) { break M; } } else {function ()constructor = *::*; }} while((constructor = prop(0.1)) && 0);");
tryItOut("if(new ('haha'.split)(function ([y]) { },  \"\" )) { if ([11,12,13,14].sort) {throw [,,z1];0; } else \f{const __noSuchMethod__; }}{{}yield *::*; }");
tryItOut(" const __parent__;\t");
tryItOut("const prototype\n");
tryItOut("/*for..in*/for(let constructor = *::* in <x><y/></x>) return null;");
tryItOut("yield  /x/ \n");
tryItOut("; const constructor;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __parent__] = Iterator(constructor.(this), %).__noSuchMethod__ = yield *++ in __count__.hasOwnProperty(\"prop\")) {L:/if((((<y><z/></y>).__defineSetter__)(<x/>, @foo))) {return  /x/g ;return window; } else  if ((__iterator__ = window)) (*); else {export -0; }with(prop++)/*infloop*/while(__iterator__){ } }");
tryItOut("let(prototype, ({ __count__: __noSuchMethod__ }) =  /* Comment */<y><z/></y> | -0) { \n");
tryItOut("/*infloop*/while( \"\" .yoyo(<x><y/></x>).valueOf(\"number\")){ { (<x/>); }  }");
tryItOut("do {yield; } while(((({ __parent__: __proto__, __count__: prototype }) = ({ __noSuchMethod__: prop, prototype: __iterator__ }))) && 0);");
tryItOut("export prop;");
tryItOut("/*infloop*/do export *; while(__noSuchMethod__ = ());");
tryItOut("/*for..in*/for(constructor in ((({}).hasOwnProperty)(({ get __iterator__(setter) { return constructor = <x><y/></x>.constructor.__defineGetter__(\"__count__\", ({}).hasOwnProperty) } , __iterator__: (Math.sin)(<x><y/></x> == true, <><x><y/></x></>) }))))/*infloop*/for(new (window)(false, ({a1:1})); [,,] | 'fafafa'.replace(/a/g, <><x><y/></x></>) >= eval(\"export *;\", [11,12,13,14].map); Function(this.zzz.zzz)) { /x/g ; }");
tryItOut("export *; const __count__;");
tryItOut("with({__noSuchMethod__: window})gc()");
tryItOut("Function");
tryItOut("/*infloop*/M:while(new  \"\" ){yield <x><y/></x>; }");
tryItOut("if((__iterator__)) { if (5.0000000000000000000000) false\n} else throw  /x/g ;");
tryItOut("return;");
tryItOut("L: (3.141592653589793);");
tryItOut("null\n");
tryItOut("let(prototype) ((function(){for(let y in []);})());");
tryItOut("__iterator__");
tryItOut("let (__proto__) { /*infloop*/L:for((Exception(3.141592653589793, <x/>)); (yield this); (yield function(id) { return id })) {} }");
tryItOut("if(<y><z/></y>++) { if (* &= <><x><y/></x></>) {break ; }} else {export __count__; }");
tryItOut("return;");
tryItOut("while((true) && 0)yield  '' ; const ({ __noSuchMethod__: __proto__ });");
tryItOut("/*infloop*/for(<ccc:ddd> </ccc:ddd>; Function(<x/>, prop); (Math.sin).call(*::*, __iterator__)) {return;export __noSuchMethod__;with(<x><y/></x>){; } }");
tryItOut("if((Iterator(<ccc:ddd><x><y/></x>yyy</ccc:ddd>, true)) ^=  '' ) {export __noSuchMethod__;yield; }");
tryItOut("/*for..in*/for(var [prop, constructor] = [,] /= window in this) export *;");
tryItOut("\n;var prototype, function::__parent__ = <x/>;");
tryItOut("/*infloop*/for(__proto__; this.__defineSetter__(\"__parent__\", function(y) { yield y; const __iterator__;; yield y; }); <bbb xmlns:ccc=\"<><x><y/></x></>.prototype = -0\"><ccc:eee></ccc:eee></bbb>.(prototype.constructor)) \f{continue L; }");
tryItOut("/*infloop*/for((); __count__.constructor getter= <y><z/></y>; (prototype = (prop = __parent__))) {let __noSuchMethod__;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in __iterator__) with(yield  /x/g ){return;const this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const [11,12,13,14].filter in prop = <x/>) {(undefined); }");
tryItOut("this.zzz.zzz;");
tryItOut("");
tryItOut("break L;\nconst \r__parent__;\n");
tryItOut("/*for..in*/L:for((0)(window) in <><x><y/></x></>) /*infloop*/while(0/0){let __proto__ = <y><z/></y>;const __proto__, prop; }\nthrow *::*;");
tryItOut("with({__noSuchMethod__: [@foo]})let __proto__ = *::*, __proto__ = window;");
tryItOut("export __iterator__;\nif((prototype.eval(<><x><y/></x></>) <= ([11,12,13,14].some))) {if(__noSuchMethod__) {prototype, __iterator__; } }\n");
tryItOut("{<><x><y/></x></>; }");
tryItOut("if(this.zzz.zzz) {(<y><z/></y>);(*); } else  if (this.zzz.zzz ? *::* + function(id) { return id } : <>([[]].unwatch(\"__parent__\"))</>) return;");
tryItOut("L:if((this.zzz.zzz)) { if (({constructor: <><x><y/></x></>})) {{}break M; }} else {(3);export __parent__; }");
tryItOut("/*infloop*/M:for(const prop; --true; 0/0) {__noSuchMethod__ = (eval).apply, prototype;const __parent__, __proto__; }");
tryItOut("M:if(try { 'haha'.split } catch(__proto__) { (3/0); } finally { yield; } .(new (function (prop, __parent__)false)(constructor))++.watch(\"constructor\", (0.__noSuchMethod__).valueOf(\"number\"))) M:with({__noSuchMethod__: 1e+81})/*for..in*/M:for(const delete((<y><z/></y>)) in <y><z/></y>) var prop = <><x><y/></x></>;");
tryItOut("{let __count__ = <x><y/></x>; }");
tryItOut("/*for..in*/M:for(let [__noSuchMethod__, prop] = (\tlet (__parent__ = (p={}, (p.z = <x><y/></x>)()), __count__) (<x><y/></x>__parent__.__count__ ).(constructor, ).__iterator__) in [__proto__.__count__ =  /x/  >>= <><x><y/></x></>]) {return *::*\n }");
tryItOut("do M:if( /x/g  <= __iterator__) {continue ; } else  if (<><x><y/></x></>.prototype = <x/>)  else ; while((1.3) && 0);");
tryItOut("<y><z/></y>\n");
tryItOut("try { with({__count__: this})yield; } catch(prototype if (function(){for(let y in [5,6,7,8]) return;})()) { throw StopIteration; } finally { throw StopIteration; } ");
tryItOut("");
tryItOut("/*infloop*/for(var prop = yield <><bbb xmlns:ccc=\"(<y><z/></y>\n)\"><ccc:eee></ccc:eee></bbb></>; (\f({ __parent__: ({ __parent__: [({ __parent__: __iterator__ }), , __count__] }), prototype: ({ prototype: __iterator__ }) }) = ((uneval(<y><z/></y>))).@foo); __count__ = (new (((true).call(prop, *::* ? prototype : <><x><y/></x></> ? __noSuchMethod__ = this : null.yoyo(<x><y/></x>))))(__count__.prop = this.__defineSetter__(\"prop\", [1,2,3,4].slice)))) {L: {export __iterator__;return; } }");
tryItOut("/*for..in*/for(new 1.2e3.__parent__ in ((((function (__proto__) { yield true } ).call).call)(let (__count__ = null) <><x><y/></x></>))){var __count__ = -1;__iterator__; }");
tryItOut("/*infloop*/while(constructor = __iterator__)return <><x><y/></x></>;");
tryItOut("/*infloop*/for((eval(\"{}\", this)); Exception(<x/>, *); (yield  '' )) let __noSuchMethod__ = [1,,], constructor;");
tryItOut("/*infloop*/for(let prop = prototype;  '' ; 1e4) {gc() }");
tryItOut("return <x><y/></x>.\n__count__;");
tryItOut("{with({}) { this; }  }");
tryItOut("gc()");
tryItOut("do {;let prop; } while((<><x><y/></x></>) && 0);");
tryItOut("L:if(new false()) {export __proto__; } else  if ((new (function (__noSuchMethod__, prototype) { return; } )())) return;");
tryItOut("if((Math.pow)) { if (__iterator__.(<y><z/></y>)) yield @foo; else {/*for..in*/L:for(let __proto__ in window) throw *; }}");
tryItOut("{__iterator__; }\n/*for..in*/for(var [constructor, __iterator__] = <x><y/></x> in __parent__) {; }\n");
tryItOut("([[z1]].sort((1 for (x in []))))\ncontinue M;");
tryItOut("/*infloop*/for(this.zzz.zzz > ((uneval(033)));  /x/ ; prototype = <><x><y/\f></x></>) {if(*) {export __iterator__; } else  if (3/0) { } else {gc()0 } }");
tryItOut("/*infloop*/do ; while(__count__[*::*]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>) yield;");
tryItOut("/*infloop*/while(( \"\" .hasOwnProperty(\"constructor\"))){{continue ; }yield *::*; }");
tryItOut("{yield <x/>; }");
tryItOut("do let constructor = @foo; while(((__proto__.__noSuchMethod__: this.zzz.zzz setter= Function)) && 0);");
tryItOut("export *\nif(({})) { if (function ([y]) { }) yield <y><z/></y>;} else var __proto__;");
tryItOut("yield  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in *::*) continue L;\nreturn;\n");
tryItOut("if(new  \"\"  &= true((prop.isPrototypeOf(1e81)), @foo)) { if ((__proto__.__count__ setter= (function () { yield; } ).call)) /*for..in*/for([__count__, __iterator__] = this.zzz.zzz in ({__count__: *})) {gc()yield <y><z/></y>; }} else {M:if(undefined) { if (@foo) yield <><x><y/></x></>; else {var __iterator__ = this, this;gc() }}let (__proto__) { return [[]]; } }");
tryItOut("while((undefined) && 0)prop, __proto__;");
tryItOut("if((( /x/g [undefined]) for each (__iterator__ in try { {} } finally { yield; } ) if (3))) /*infloop*/<y><z/></y>");
tryItOut("if(new ((1 for (x in [])))(let (__proto__ = window, __proto__) <><x><y/></x></>)) return; else {{} } const <x/>;");
tryItOut("");
tryItOut("L: @foo;");
tryItOut("__noSuchMethod__, __parent__ = <><x><y/></x></>\nlet __count__ = <y><z/></y>;");
tryItOut("let(function::__iterator__) { yield <y><z/></y>;");
tryItOut("with({({ __noSuchMethod__: [({ __iterator__: set, __noSuchMethod__: ({ constructor: [, , , __noSuchMethod__, ] }) }), , __iterator__] }): eval(\"({ __count__: [] }) =  /x/ [.2]\", (window |= #1#.@*)(((uneval([11,12,13,14].map)))))}){with({__noSuchMethod__: __noSuchMethod__.__count__ = *::*}){gc() } }");
tryItOut("return;");
