tryItOut("{/*for..in*/L:for({yield; } = __parent__ in <><x><y/></x></>) export *; }");
tryItOut("L:while((prototype = <y><z/></y>) && 0){;yield; }");
tryItOut("continue M");
tryItOut("return;\nprototype;\n");
tryItOut("/*infloop*/L:for(prop; window; ({ __count__: ({ function::__noSuchMethod__: [__count__, yield, constructor] }), __noSuchMethod__: ({ __parent__: ({ constructor: __count__ }) }) }) = __iterator__%=@foo - prop) {{yield <y><z/></y>;if(__proto__) yield <x/>; else  if (*.unwatch(\"prop\")) {do export __noSuchMethod__; while((window) && 0); } else {throw this; } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in this) {}");
tryItOut("if(window - <x><y/></x>) throw #3={a:#3#}; else  if (;) {return; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; (<x/>.__lookupGetter__(\"constructor\")); eval(\"return 0;\", .2)) {export __count__;break L; }");
tryItOut("//h\nwith(<x><y/></x>.yoyo( \"\" )){let __count__, prototype; }");
tryItOut("__parent__;");
tryItOut("/*infloop*/while(true){{}gc() }");
tryItOut("{if( '' .@foo) const constructor; else ; }");
tryItOut("L:if( \"\" ) {{} } else  if (function ([y]) { }) {; }");
tryItOut("L:if(return; ? prototype : <x><y/></x>) export *; else  if (yield [z1]) break L; else {}");
tryItOut("/*infloop*/while((uneval(({a1:1}))) -= <><x><y/></x></>.constructor if ({}))throw [undefined];");
tryItOut("if((<x><y/></x> === <x><y/></x> for (prototype in <><x><y/></x></>) if (*::*))) { if (__iterator__%=new (new Function)(<x><y/></x>, *::*)) /*for..in*/for(__iterator__ = <><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\") in <><x><y/></x></>) ( '' ); else { }}");
tryItOut("L:if((new (<x/>)(0))) {break ;{} } else  if (this.__defineGetter__(\"__count__\", function  prop (__iterator__, __count__)new *())) {export *;yield; } else const constructor, constructor = <y><z/></y>;");
tryItOut("/*for..in*/for(const __iterator__ = (__proto__ = window).__lookupSetter__(\"__proto__\") in 5.0000000000000000000000) {yield <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(const constructor in ((eval(@foo))(window .@ <y><z/></y>))) export @foo;");
tryItOut("L: /*for..in*/M:for(__noSuchMethod__ in 1.2e3) return;");
tryItOut("/*infloop*/M:for(__proto__; (constructor, __noSuchMethod__.isPrototypeOf(({}))); <\tx><y/></x>.(true)) {break M;let __count__, __iterator__; }");
tryItOut("gc()\nconst __proto__\n");
tryItOut("/*for..in*/M:for(const prop = let ([, constructor] = (<x><y/></x> <= <x/>), x::prototype) this.__lookupGetter__(\"prop\") in <x><y/></x>) /*for..in*/for(const [__count__, prop] = (yield __count__) in <y><z/></y>) prototype = *, prototype;");
tryItOut("/*infloop*/for(let ({ [prototype, ]: prop, __count__: __noSuchMethod__ }) = .2.@*((prop.__count__), __proto__); false; 'fafafa'.replace(/a/g, Function)) default: M:do return; while((this ? <y><z/></y> : <x/>) && 0);break; (<x/>);case ([11,12,13,14].some): yield (<><x><y/></x></>);break; case 1: const __count__;break; case 3: break; ");
tryItOut("if((yield eval(\"__proto__;\", (((-1))[(function ([y]) { })()])))) {[,,]; } else  if (true) throw undefined;/*\n*/ const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in 3.141592653589793) {return <x><y/></x>; }");
tryItOut("/*infloop*/L:for(let __count__; (yield (function ([y]) { })()); ([1,,] &= constructor)) {let __iterator__, __parent__; }");
tryItOut("/*infloop*/do { } while(prop);");
tryItOut("M:do yield; while((__parent__ = #1=[#1#].__lookupGetter__(\"__count__\")) && 0)");
tryItOut("return <x><y/></x>; const constructor;");
tryItOut("break M\n");
tryItOut("while((<><x><y/></x></>.unwatch(\"__noSuchMethod__\")) && 0){yield; }");
tryItOut("L:switch((new <x/>([z1], <x/>) || this.__defineSetter__(\"__count__\", function () /x/ )).watch(\"prop\", (((<><x><y/></x></>).watch).watch).apply)) { default: break;  }");
tryItOut("return;");
tryItOut("");
tryItOut("let (__iterator__ = (uneval(null))) { /*infloop*/do constructor; while(({prop: @foo % ({ this: __parent__ }) = __iterator__.eval([z1,,]), __count__: ( = <x/>) })); }");
tryItOut("/*for..in*/M:for(const __parent__ in @foo) /*for..in*/for(let __iterator__ in (((1 for (x in [])))(@foo))){{}const __proto__ = <x><y/></x>; }");
tryItOut("throw __iterator__; const __iterator__;");
tryItOut("while((033) && 0)throw <x><\ty/></x>\t;");
tryItOut("/*infloop*/L:while(window.__proto__)(false);");
tryItOut("/*for..in*/for(const constructor = (*::* instanceof <x><y/></x>) in export *;) {gc() }");
tryItOut("return this;\nbreak ;\n");
tryItOut("/*infloop*/L:while(__parent__++)/*infloop*/M:while((p={}, (p.z =  \"\" )()))(null).watch");
tryItOut("/*for..in*/L:for(const prototype = (let (__proto__ =  '' , prop = window) [z1,,]) in new (({}).hasOwnProperty)()) switch(<x/>) { case 2: throw __iterator__; }");
tryItOut("do with({constructor:  '' }){return this; } while(([yield ].sort(gc)) && 0);");
tryItOut("(<x><y/></x>);");
tryItOut("with((__iterator__ :: window for each (__parent__ in <><x><y/></x></>)[function  __proto__ (__proto__) { yield @foo } (this)]))/*infloop*/L:for(new function  __noSuchMethod__ (constructor, __count__) { yield  /x/  } ()++; [<x><y/></x>].sort(function  constructor (__iterator__, __count__) { yield this } ); ((yield this)).valueOf(\"number\")) {return false; }");
tryItOut("/*infloop*/do export *; while(*);");
tryItOut("if((constructor.__count__ getter= (<><x><y/></x></> ^= <y><z/></y>) @ (<y><z/></y>)())) {return -0;continue L; } else  if (eval(\"(-1)\", (<><x><y/></x></>.valueOf(\"number\"))) *= (prop = null .. <y><z/></y>)) {with(true){yield;return *::*; }/*infloop*/M:for((*.yoyo((uneval(__count__)))); eval(\"const __parent__ = @foo, __parent__;\", []); ({(window)(@foo): undefined for each (__noSuchMethod__ in <x><y/></x>) })) continue ; } else continue L;");
tryItOut("let (__iterator__ = (yield this <<= (__count__).apply), ({ prototype: [], {export *; }: [] })) { {throw  '' ; } const __proto__; }");
tryItOut("(new RegExp(*::*))([15,16,17,18].some(eval, <><x><y/></x></>)) = __count__;");
tryItOut("{throw 0.1; }");
tryItOut("yield;yield null;");
tryItOut("let __proto__;\n/*infloop*/do /*for..in*/for(var __parent__ in arguments) {yield; } while((<y><z/></y>.@*));\n");
tryItOut("const gc();");
tryItOut("return;");
tryItOut(";");
tryItOut("export __proto__;");
tryItOut("export *\n\n");
tryItOut("export *;");
tryItOut("return;");
tryItOut("/*for..in*/for(var __iterator__ = __count__ = (function ([y]) { })() in ~ '' ) let prototype = 3.141592653589793, __proto__ = null;");
tryItOut("{var __parent__, prop = function ([y]) { }; }\nif(({ __parent__: __iterator__ }) = __count__.constructor = @foo) {prototype;(*); } else  if (\t[([15,16,17,18].map(Function, <x><y/></x>)) for each (prototype in <x><y/></x>)] && (__parent__ & 0x99++)) var __count__ = <x><y/></x>;");
tryItOut("if((prototype = this)) let __count__; else  if ([1]) {const __count__; } else {const __proto__ = *::*, prototype; }");
tryItOut("/*infloop*/while(false % <x><y/></x>)yield this;");
tryItOut("if((window.__noSuchMethod__ = <y><z/></y>)) {\t if (__proto__) (1e4 <= true(<><x><y/></x></>, null)) - undefined.yoyo(window)['__proto__'] else {{}\nlet (__proto__ = <y><z/></y>, __count__) { var __count__, constructor; } }}");
tryItOut("L:with(__count__ = <><x><y/></x></>)\t{break M; }");
tryItOut("if([z1].eval(<x><y/></x>) ? [this for each (__count__ in window)] : window.throw(*)) {[1]; const __count__; } else  if (([11,12,13,14].some)(<x><y/></x>++, (1e-81 instanceof undefined >>= <x><y/></x>.(<><x></></</>)))) /*infloop*/M:while(<><x><y/></x></>)export prop;");
tryItOut("/*infloop*/for(__count__ = this.zzz.zzz; ('haha'.split).call(__parent__, (constructor-=<x><y/></x> :: 1e-81), (0x99.__lookupGetter__(\"__proto__\"))); eval(\"export *;\", <><x><y/></x></>)) {prop = constructor;/*infloop*/for(*; <><x><y/></x></>; @foo) return; }");
tryItOut("export *\n");
tryItOut("while((this) && 0){/*for..in*/for(__noSuchMethod__ in true) {export *;const prototype = undefined; }yield; }");
tryItOut("gc()");
tryItOut("{;prototype, prop; }");
tryItOut("switch((this.__defineSetter__(\"__count__\", case <x/>: break; ))) { default: (false).applybreak;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in new <><x><y/></x></>()) {Lif(null()) {yield prototype; } else yield true; }");
tryItOut("/*infloop*/for(let prop = [z1,,]++; new undefined(); new (/a/gi)(<x><y/></x>)) throw #3={a:#3#};");
tryItOut("/*infloop*/while(<y><z/></y>.watch(\"constructor\", Function))(<x><y/></x>);");
tryItOut("L:do const constructor, prototype = false; while((__proto__ =  /x/g ) && 0);");
tryItOut("with((({__proto__: eval(\"5.0000000000000000000000\", prop),  get (*::*)(Array())()delete undefined .. constructor|= if ( '' ) })))with(*)export *\n");
tryItOut("/*infloop*/do ; while(__count__ = 5.0000000000000000000000);");
tryItOut("M:do <x><y/></x> while((*) && 0);");
tryItOut("L:switch(new 'haha'.split(this) < <><x><y/></x></> - @foo) { case __parent__(<x><y/></x>): break; default: if(3.141592653589793.@foo) {export *; } else  if ( /* Comment */__iterator__) {export __iterator__;yield 5.0000000000000000000000; }break; case (-1)\n: case (new (<x><y/><///h\nx>)(@foo, undefined)): const __count__;case (__proto__ = (let (constructor, function::__iterator__) 0.1)): break; case 2: {}break; case constructor = 3/0: (this);break;  }");
tryItOut("/*for..in*/for(([15,16,17,18].filter('haha'.split, (-0)).hasOwnProperty(\"function::__parent__\")).__parent__ in this.__defineGetter__(\"prop\", Math.pow)) try { const prototype; } catch(__parent__ if prototype = <x><y\n/></x>) { let __noSuchMethod__ = __parent__, prop; } catch(__iterator__ if (function(){{}})()) { (-0); } catch(__parent__) { gc() } finally { yield; } ");
tryItOut("/*infloop*/for([1] ^= *; (new prototype.(true)()); +eval(\"@\",  /x/ )) return;");
tryItOut("/*for..in*/for(var *::* in ((function  constructor (delete, constructor) { yield prototype = <y><z/></y> } )((__parent__ <<= <y><z/></y>))))yield;");
tryItOut("{<><x><y/></x></>;return; }");
tryItOut("/*for..in*/for(const ({ prop: ({ __count__: ({ __noSuchMethod__: __noSuchMethod__, prototype: constructor }), \t__count__: ({ __count__: __proto__ }) }) }) in (new Function(Exception(), <y><z/></y>))) {throw [[1]]; }");
tryItOut("/*infloop*/for(var ({ constructor: __iterator__, __parent__: prop }) = (<y><z/></y>)(1e81, this); this.__defineGetter__(\"__proto__\", ({}).hasOwnProperty); <y><z/></y>.prototype = *) return;");
tryItOut("for(let y in [5,6,7,8]) export __count__;");
tryItOut("M:with(this.zzz.zzz)const //h\n__noSuchMethod__ = false, <x><y/></x>;");
tryItOut("yield (gc()); const function::__proto__;");
tryItOut("/*infloop*/for((__proto__ = __count__.__count__ = window / window).watch(\"prototype\", Math.sin); <y><z/></y>.*; [[1]] !== 5.0000000000000000000000) {return; }");
tryItOut("/*infloop*/for([11,12,13,14].filter;  \"\" .watch(\"prop\", function () { return; } ); <y><z/></y>) {export prototype;let (__parent__ = (\ntry { [1,2,3,4].slice } catch(prop if  \"\" ) { return; } catch(constructor if window) { continue ; } catch(prop if *::*) { __count__, prop = 0x99; } catch(__proto__ if (function(){yield <><x><y/></x></>;})()) { ; } catch(constructor) { <x><y/></x>; } finally { export *; } )) { const __iterator__ = <><x><y/></x></>, prop; } }");
tryItOut("return;");
tryItOut("/*infloop*/do /*for..in*/for(const __count__ in (([1,2,3,4].slice)(function(y) { yield y; return <><x><y/></x></>;; yield y; })))constructor; while(void x::__count__.propertyIsEnumerable(\"__iterator__\"));");
tryItOut("/*infloop*/for(let __parent__ = new <><x><y/></x></>( /x/ ); #1#.throw(<y><z/></y>); function(y) { yield y; (this);; yield y; }()) return;");
tryItOut("return;");
tryItOut("/*for..in*/for(const __count__ = <y><z/></y> in (p={}, (p.z = ((uneval(<x/>))))())) {; const prop;export __parent__; }");
tryItOut("default: let(prototype =  /x/ ) { yield <y><z/></y>;case (yield <y><z/></y>.__iterator__ = window): (window);break; break; ");
tryItOut("/*infloop*/for(__parent__ = [1]; ((yield (((Function).call(4., *)))(new Date(), ((<>><y</>).call(this, ))))).valueOf(\"number\");  /* Comment */<!--yy-->.((<><x><y/></x></>))) throw StopIteration;");
tryItOut("do {/*for..in*/for(\t__noSuchMethod__ = ( \"\" ).call([], *::*, ) in prop) {export *; } } while((__noSuchMethod__ = let) && 0);");
tryItOut("if(<x><y/></x>) {gc()prop; } else  if (false) var constructor = arguments; else __iterator__: <><x><y/></x></>let (__iterator__ = Array()) {  /x/  }");
tryItOut("/*infloop*/while((let (prototype = window, constructor) __iterator__)){yield;gc() }");
tryItOut("/*infloop*/do L: {gc()const __proto__ = -3/0; } while(__count__.__proto__ getter= function  __count__ (constructor, __count__)undefined);");
tryItOut("yield\nthrow [z1];");
tryItOut("for(let y in [5,6,7,8]) try { return <x/>; } finally { let(prop, __iterator__) ((function(){@foo;})()); } ");
tryItOut("/*infloop*/do {return; } while(this);");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */M: for  each(var (let) in __parent__) return <x><y/></x>;L: {if(*) ; else  if (this) {window; }continue L; } }");
tryItOut("L: {export __iterator__; }\n[1,2,3,4].map\n");
tryItOut("let(__proto__ = prototype = prop) ((function(){let(constructor = prop.__iterator__, []) { let(({ __parent__: prototype, __iterator__: [({ prop: __iterator__, __noSuchMethod__: __iterator__ })] }), __iterator__) { default: /*for..in*/L:for(var __noSuchMethod__ in ((Math.pow)(*))){;yield 033; }break; return\nconst prop, __iterator__ = <><x><y/></x></>;case 0: break; {{}export __count__; }break; })());");
tryItOut("if(__noSuchMethod__.__parent__ = ((yield )))  else  if ((prototype = <><x><y/></x></>) ? __noSuchMethod__ = new new (new Function(\"var prototype, __noSuchMethod__;\"))(false)() : yield @foo * \nundefined.__lookupSetter__(\"__noSuchMethod__\")) {{} } else {var __count__, prop;continue \n }");
tryItOut("let (setter = (({__iterator__\t: null, prop: __parent__ = <x/>['__count__'] })), __noSuchMethod__ = prototype - null) { <xxx>{constructor}</xxx> }");
tryItOut("__parent__ = this.zzz.zzz | delete @foo");
tryItOut(";");
tryItOut("gc()\nL:if(*::*) constructor, __parent__ = @foo;");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = (eval(\"with({prop: (yield <x><y/></x>)})return\\n\", (([11,12,13,14].sort)(this .@x:: ({a1:1}))))) in (*.hasOwnProperty(\"__iterator__\")).prop) {if(yield (this -=  /x/g ))  else  if (__iterator__ = ([false])) true; else (constructor);yield undefined; }");
tryItOut("L: {throw window;return (-0); }");
tryItOut("if(__iterator__) {yield  /x/  %= [,,];(<y><z/></y>).__defineSetter__ }");
tryItOut("L: {if(({constructor: (function(q) { return q; })([1]), __iterator__ setter: Math.pow })) { if (((function  __iterator__ (({ __iterator__: [, , ], prop: [({ __proto__: constructor }), __iterator__, __iterator__] }), __noSuchMethod__) { return \n*\n }  new Function)(undefined))) {return  '' ;return <><x><y/></x></>; } else {true__iterator__ = null, __noSuchMethod__; }}/*infloop*/while([c].some(Math.sin)){/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in function ([y]) { }) {function::__proto__ = window;return <><x><y/></x></>; }false; } }");
tryItOut("do {{}{} } while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/for(var __proto__; <zzz><><x><y/></x></></zzz>; (__proto__)() |= (<x><y/></x>.throw(<><x><y/></x></>))) {L:with({__proto__: {}}){__count__ }Function }");
tryItOut("switch(<x/> -=  \"\" ) { case <x/>:  }");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("/*infloop*/for((*::* ? 5 : <y><z/></y>); let (__parent__ = window) true; ) throw <><x><y/></x></>;");
tryItOut("/*infloop*/for(const ({ prop: ({ __proto__: ({ prop: ({ prototype: __parent__, __count__: prototype }), prototype: ({ __iterator__: __count__ }) }) }) }) = new (prototype ? function ([y]) { } : [[]])(\n<><x><y/></x></>, prop) ? ( /x/g ).apply(3.141592653589793).__lookupSetter__(\"constructor\") : ({__parent__ setter: window, prop: <><x><y/></x></> }); *::* if (033); this.__defineSetter__(\"x::__noSuchMethod__\", (<{__proto__}><ccc:ddd> </ccc:ddd></{__proto__}>.( ''  @  \"\" )))) /*infloop*/for(let ({ __count__: __proto__, __iterator__: __iterator__ }) =  /x/g .__defineGetter__(\"constructor\", [[]]); constructor.__proto__ = <x><y/></x>; ([11,12,13,14].map)) yield;");
tryItOut("/*infloop*/do throw <x><y/></x>; while(typeof constructor.unwatch(\"__iterator__\"));");
tryItOut("if(0) { if (undefined) { }} else window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((function ([y]) { })()) in new (true)(true)) {}");
tryItOut("/*for..in*/L:for(let __proto__ in this) throw -3/0;");
tryItOut("for(let y in [5,6,7,8]) ((prop = (__noSuchMethod__ = __proto__)))([((__iterator__)(__noSuchMethod__,  /x/ )).__iterator__ for (prop in <x/>) for (5.0000000000000000000000.__count__ in undefined) for each (__count__ in window)]) = (<x><y/></x>.(<><x><y/></x></>))((undefined)[(([[1]])(false, <y><z/></y>))].__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))));");
tryItOut("/*infloop*/for(let ({ __count__: ({ __iterator__: __proto__, prototype: __count__ })\t }) = prototype = __parent__; (<x><y/></x>.(({constructor: 4. })).__noSuchMethod__); (1.3 .@ null).watch(\"__iterator__\", Math.pow)) return;");
tryItOut("do (*::*); while(([({ prop: constructor }), ] = (new (-3/0)(constructor = false)), __noSuchMethod__) && 0);");
tryItOut("yield 033;;");
tryItOut("if(((({}).hasOwnProperty).apply).call(window, (<><x><y/></x></>--) @ ((p={}, (p.z = __noSuchMethod__)())))) switch(1e+81) { case <><x><y/></x></>: break; yield <y><z/></y>;break;  }");
tryItOut("throw function::prototype;");
tryItOut("if() {__noSuchMethod__ = [z1,,], constructor = this;yield; } else  if (constructor.constructor = <x/>) {return; } const prototype;");
tryItOut("{}\n");
tryItOut("if(get = __parent__) with({prop: <><x><y/></x></>})return;");
tryItOut("prop = __count__;");
tryItOut("/*infloop*/do {} while( \"\" );");
tryItOut("/*infloop*/for(__iterator__; __parent__; (<x><y/></x>.throw(@foo) || this) <= *) {return;L:with({prototype: [z1,,]}){switch(*) { default:  } } }");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>) {throw window;continue ; }} else {break M; }");
tryItOut("return (0x99).watch();");
tryItOut("let (__count__ =  /* Comment */* || false % prototype.propertyIsEnumerable(\"prototype\"), ({ <y><z/></y>: prop })) { /*infloop*/M:while(yield = <x/>){yield;return constructor; } }");
tryItOut("/*infloop*/for(const prototype; function(q) { return q; }();  /* Comment */window.propertyIsEnumerable(\"__proto__\")) {gc(); }");
tryItOut("{constructor/*infloop*/do {let (__count__ = true) { (1.2e3); } } while(({__count__ getter: (new Function(\"yield [,,z1];\")) })); }");
tryItOut("/*infloop*/for(const prop\t; (__parent__ = window); export * ? ( /x/ \n) : __count__.(null)) { { yield <x><y/></x> } return; }");
tryItOut("if(window.valueOf(\"number\") instanceof yield <><x><y/></x></>) (*::*); else var __iterator__ = <x/>;");
tryItOut("if(__parent__.\t__parent__) {return [,];throw <x\t><y/></x>; } else {(/a/gi).call }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <x/>.throw(#1=[#1#] , __iterator__) ? <></> : null in *::*) {__iterator__ = undefined, prototype; }");
tryItOut("/*for..in*/for(let __iterator__ in (this.isPrototypeOf( /x/ ))) export *;");
tryItOut("/*infloop*/do throw window; while(this.__defineSetter__(\"__proto__\", [1,2,3,4].map));");
tryItOut("{yield @foo; }");
tryItOut("with(this.__defineGetter__(\"__proto__\", [1,2,3,4].slice)){/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in <><x><y/></x></>) {gc() }export prop; }");
tryItOut("M:if((__proto__ -= <><x><y/></x></>)) {/*for..in*/M:for(var __iterator__ in ({a1:1})) break M;do {} while((__proto__.__noSuchMethod__) && 0); } else  if (<y><z/></y>) {/*for..in*//* nogeckoex bug 349964 */ for  each(const get in constructor) [z1,,]; } else {return 0x99; }");
tryItOut("if(({}).__lookupGetter__((0.1), null)) /*infloop*/do {__count__;{} } while(<x><y/></x>); else let (setter = constructor, prototype) { let __proto__ = *; }");
tryItOut("M:with({__parent__: *::*})constructor = <x/>;");
tryItOut("/*infloop*/for(var constructor = (({prop: arguments}) /= (eval(\"export *;\", __parent__))); ([undefined].map(<x><y/></x>)); 1e4.watch(\"__noSuchMethod__\", Function)) /*infloop*/while((function ([y]) { })() - ({__count__: 3/0,  get __count__ prop ()<><x><y/></x></> }))return <x><y/></x>;");
tryItOut("let (__noSuchMethod__) { return; }");
tryItOut("try { yield; } catch(__count__) {  } ");
tryItOut("const __iterator__;");
tryItOut("gc()");
tryItOut("do {if(({yield __proto__; }) >> [<><x><y/></x></>].hasOwnProperty(\"constructor\")) {/*for..in*/for(const constructor in ((({}).hasOwnProperty)(delete <y><z/></y>)))export *; } else  if ([1,,]\n) {L:if(prototype) gc() else  if (false) {yield; } else {let constructor = 1e4, __parent__ = <><x><y/></x></>; }export __count__; } } while(([<x><y/></x>.(<><x><y/></x></>)].some((@foo < __noSuchMethod__))) && 0);");
tryItOut("/*infloop*/for(__count__ = 1.2e3; {}; <x/>) {yield; } const __parent__;");
tryItOut("__count__ =  '' , prop = undefined;");
tryItOut("(__count__.constructor)");
tryItOut("with(*::* *= (__iterator__.prop getter= function  __count__ () { \tyield 3/0 } )){/*infloop*/while(function(id) { return id }){var prop = <y><z/></y>;return; }__parent__, constructor = @foo; }");
tryItOut("break L");
tryItOut("{}/*infloop*/L:for(window; __noSuchMethod__; prop) {throw function::constructor; }");
tryItOut("/*for..in*/for(const [prototype, __parent__] = (this.__defineGetter__(\"__count__\", (({ get constructor(__iterator__) { yield 3/0.__iterator__ } , __proto__: __iterator__ })))) in ([undefined].sort(({}).hasOwnProperty))) {return;export prop; }");
tryItOut("{}\n\f/*infloop*/for(var __proto__; __noSuchMethod__.(undefined); <x><y/></x>.(<><x><y/></x></>)) {{}return  /x/ ; }/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in (1.3 & #1=[#1#])) {export prop; }");
tryItOut("do M:with({/*infloop*/for(let prototype.__parent__ = Object(<x/>); <><x><y/></x></>.isPrototypeOf(this); constructor = this) {;undefined; }: ((new ((constructor+=-1))(@foo .. true)).unwatch(\"__iterator__\"))})/*infloop*/M:for(const __noSuchMethod__ = <x/>; <y><z/></y>; <x><y/></x>) {<><x><y/></x></>;yield; } while((prototype = __noSuchMethod__.__noSuchMethod__ = [,]) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const __noSuchMethod__.__count__ getter= (function(q) { return q; }).apply in delete #3={a:#3#}\n) gc()");
tryItOut("/*infloop*/for(const __parent__; \n.2; prop) {throw <><x><y/></x></>;yield constructor; }");
tryItOut("return;");
tryItOut("switch((yield *::*)) { default: Math.powcase 2:  }");
tryItOut("let ({ __parent__: __count__, __noSuchMethod__: __proto__ }) = this.zzz.zzz\n");
tryItOut("/*for..in*/M:for(function::prototype in ({}).watch) /*infloop*/do {export constructor;let prototype, __count__ = *; } while(window);\n/*infloop*/for((__count__ = #3={a:#3#})(); __proto__ = this; [-0].sort(window) -  ''  instanceof @foo) {return this; }\n");
tryItOut("M:if(1e4 == <x><y/></x>) {gc() } else {;__noSuchMethod__ = <x/>; }");
tryItOut("/*infloop*/for(var __noSuchMethod__;  \"\" .__parent__ = false.hasOwnProperty(\"__noSuchMethod__\"); window) {export *;{} }");
tryItOut("/*for..in*/for(var prop in window) {function(q) { return q; } }");
tryItOut("if((({: null__count__ , __noSuchMethod__:  /x/  }))) { if ([__proto__]) ;} else prop = export getter, constructor = <x/> in (__count__ = __count__ = <><x><y/></x></>), prop = (__proto__.(*)).yoyo(1e81.propertyIsEnumerable(\"prop\"))");
tryItOut("throw <x/>;");
tryItOut("let(({ __iterator__: ({ __count__: [prop, __count__, , __iterator__], __count__: __count__ }), __parent__: [({ __proto__: __noSuchMethod__ }), __count__, ({ __noSuchMethod__: __count__, prototype: prop }), , [__iterator__, ]] }), __proto__ = (new ((new Function(\"yield {};\")))()).__iterator__ = ) { throw StopIteration;");
tryItOut("with({__noSuchMethod__: __parent__.constructor setter= function  prototype (prototype, x::__proto__)window}){{__proto__ = <><x><y/></x></>, __count__;export *; } }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in this) {export *; }");
tryItOut("/*for..in*/for(let [__iterator__, ((( \"\" )) <= <><x><y/></x></>.constructor = window)((3.__lookupGetter__(\"__iterator__\")))] = (p={}, (p.z = *)()) in [, ] = <><zzz>default: </zzz></>) {(#1#); }\n{ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const case 7:  in __parent__ setter: [1,2,3,4].map) var prop, constructor;");
tryItOut("<><x><y/></x></>;\n1e-81\n");
tryItOut("while((('fafafa'.replace(/a/g, ((this += this)).__defineSetter__))) && 0){yield *;/*for..in*/for(var __noSuchMethod__ = prototype.__count__ in 0/0) {; } }");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, __proto__] = *.watch(\"constructor\", function () { yield <y><z/></y> } ) in ) {null; }gc()");
tryItOut("return;");
tryItOut("if(let (__noSuchMethod__ = <><x><y/></x></>, __count__ = #1=[#1#]) 033.@foo) yield; else {return false;export *; }");
tryItOut("with({}) ");
tryItOut("with(prototype){yield <x><y/></x>;#1# }");
tryItOut("continue L;yield *::*;\t\nif(<x><y/></x>) { if (this) yield window;} else const __parent__, __proto__;");
tryItOut("gc()");
tryItOut("let (constructor = new Function) { yield; }");
tryItOut("/*infloop*/for(prop = ({a1:1}); (-3/0.eval( \"\" )); #1=[#1#].unwatch(\"__iterator__\")) {export *; }\f");
