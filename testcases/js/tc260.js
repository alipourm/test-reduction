tryItOut("let (__proto__ = this) { (1 for (x in [])) }");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = \n /x/g  in __noSuchMethod__: <y><z/></y>) ");
tryItOut("/*infloop*/do yield; while(<x><y/></x>.eval(true).throw(<><x><y/></x></>));");
tryItOut("/*for..in*/for(let [__proto__, prop] = <x><y/></x> in -1) {throw __proto__;; }");
tryItOut("while((~[<><x><y/></x></>]\n) && 0){var __count__; const constructor;; }");
tryItOut("/*infloop*/while(false << undefined){continue ;constructor = *::*; }");
tryItOut("/*for..in*/for(let __parent__ in ((yyy)(__count__.(0/0))))export __iterator__;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in ((Function)((Math.pow)(<y><z/></y>.isPrototypeOf(<><x><y/></x></>)))))throw this;");
tryItOut("/*infloop*/for(({ prototype: [__count__, constructor] }) = (new (this.zzz.zzz)((<x><y/></x>)[ /x/ ], *::*)); ((uneval(prop))); (<x><y/></x> if (null)) .@x:: __parent__ = __iterator__) {yield 0/0;{} }");
tryItOut("/*for..in*/M:for(__proto__ = __noSuchMethod__.__iterator__ = ([__parent__ = false].map(1.3)) in this.__defineGetter__(\"constructor\", <><x><y/></x></>)) {let ([, , ] = <employee id=\"1\"><name>Joe</name><age>20</age></employee>, window = window.throw( '' )) { yield; } }");
tryItOut("return;");
tryItOut("L:if(033) {{} } else  if ((new (<><x><y/></x></>)( '' , .2))) (arguments); else {yield; }");
tryItOut("/*infloop*/while(((+<><x><y/></x></> !== 4.).__defineGetter__(\"((4.++).throw( \\\"\\\" .unwatch(\\\"prop\\\")))\", (function  __proto__ (constructor) { ; } ).call)))1e-81;");
tryItOut("if(__noSuchMethod__ = __count__) { if (()) {; }} else export __noSuchMethod__;");
tryItOut("/*infloop*/L:do {{}__proto__; } while(new function  __noSuchMethod__ () { yield <x><y/></x> } ());");
tryItOut("/*for..in*/for(prototype = (eval(\"'fafafa'.replace(/a/g, try { export __noSuchMethod__; } catch(prototype if __proto__) { export *; } function (__iterator__, __noSuchMethod__) { return <x><y/></x> } )\", [1,,])) in window - ) (<><x><y/></x></>);");
tryItOut("/*infloop*/L:for(<zzz*.__defineSetter__(\"prototype\", (-1)); (uneval(1e81)); (p={}, (p.z = <x/>)())) return ({});");
tryItOut("/*infloop*/while(([11,12,13,14].some))/*for..in*/for(let [__iterator__, prop] = ({}).throw(__proto__) in 3.141592653589793) yyy");
tryItOut("/*infloop*/for( /x/ ; #1=[#1#]; <x><y/></x>) yield;");
tryItOut("do  while(((#0=[<y><z/></y>])) && 0);");
tryItOut("{\n/*infloop*/do /*for..in*/for([__proto__, prop] = #3={a:#3#} in [,,]) {throw <x/>; } while('fafafa'.replace(/a/g, ((function ([y]) { })()).watch).__noSuchMethod__.prototype);\t/*infloop*/while(<x/>)(__proto__); }");
tryItOut("/*infloop*/do continue M; while(prototype.());");
tryItOut("/*for..in*/for(let [prototype, __parent__] = [,].propertyIsEnumerable(\"prototype\").propertyIsEnumerable(\"prop\") in new Exception() === ) gc()");
tryItOut("/*for..in*/for(__count__ in ((function(y) { yield y; throw {};; yield y; })((function (__count__) { var prop, __count__; } ).call(prop, ))))yield [,,];");
tryItOut("try { (5.0000000000000000000000); } finally { {} } ");
tryItOut("{switch(({__proto__:  /x/ , constructor getter: [1,2,3,4].slice })) { default: new Function } }");
tryItOut("/*infloop*/do /*for..in*/L:for(__noSuchMethod__ = (1e-81.eval(<x><y/></x>)) in *) {; } while((window >>>=false ? ({ set __iterator__()false, __noSuchMethod__: 1.2e3 }) : this.__noSuchMethod__ = __count__));");
tryItOut("L: return __noSuchMethod__;");
tryItOut("gc()");
tryItOut("M:if((this.__defineGetter__(\"prototype\", eval))) { if (-[,,z1]) {return <><x><y/></x></>;\ryield; }} else {; }");
tryItOut("/*infloop*/for(var [, ] = (this).watch(1.2e3, *::*); ({__count__: ((false.__lookupGetter__(\"prop\"))( /x/ --)), constructor getter: (yield new Date()).watch }).eval(false); window) {/*infloop*/while(#0= /* Comment */eval(\"null\", <x/>))gc()export __proto__;\ngc()\n }");
tryItOut("let (__count__ = <><x><y/></x></>, __parent__ = <x/>) { __noSuchMethod__ = <y><z/></y>, __parent__; }\nreturn 4.;\n");
tryItOut("/*infloop*/L:for(__count__; ((yield <><x><y/></x></> >>>=<><x><y/></x></>)); eval(\"(__iterator__.prop = *)\", <><bbb xmlns=\"#0=<x><y/></x>\"><xxx {prototype}={*} /><!--yy--></bbb></>)) return;");
tryItOut("yield <y><z/></y>;");
tryItOut("for(let y in []);");
tryItOut("function (__iterator__, __noSuchMethod__)[,]");
tryItOut("L: {\fexport *; }");
tryItOut("case function ([y]) { }: default: return <x><y/></x>;break; case window: case 5: case 0: <><x><y/></x></>;case [[1]]: break; case 6: break; yield;");
tryItOut("/*infloop*/L:for(constructor; ({__noSuchMethod__: \nwindow }); [[__proto__]] = ({ __proto__: [], __count__: constructor })) {{yield; } }");
tryItOut("delete, __iterator__");
tryItOut("if((prototype = window if (*))) { if (prop = prop .. (__count__ = <x/>)) yield;} else { }");
tryItOut("* = constructor;");
tryItOut("let constructor = <x><y/></x> ? 0.1 :  '' , [] =  /x/g  ?  /x/  : function(id) { return id }");
tryItOut("if((++\n<x><y/></x>) * __parent__) {const __count__, prototype = <y><z/></y>; } else  if ((<x><y/></x> |= window)()) yield undefined;");
tryItOut("break L;");
tryItOut("switch(((prototype = true - <y><z/></y>).__lookupGetter__(\"prop\"))) { default: return;case 0: break; case ({a1:1}):  /x/g ;case prototype for (__iterator__ in [,,]).throw(false): throw function ([y]) { };case 4: break;  } const __noSuchMethod__;");
tryItOut("L:while((((uneval(__noSuchMethod__)))) && 0){(<x><y/></x>); }");
tryItOut("export *\n");
tryItOut("do {\n/*for..in*/for(\f__count__ in (((1 for (x in [])))(<x><y/></x>))){<x><y/></x><x/>; } } while(((\nnew (1e-81)())) && 0);");
tryItOut("throw StopIteration;");
tryItOut("M:if(this.zzz.zzz) {;; } else  if ((<><x><y/></x></>\n)) {(*); }");
tryItOut("/*for..in*/for(var __parent__ in String(window, undefined)) if(0/0) {;yield; } else  if ([z1]) break M; else return;");
tryItOut("L:if((new Array())) ((new <><x><y/></x></>(<y><z/></y>))); else  if (__parent__.prop setter= <x><y/></x> ==  /* Comment */*::*) {export *; }");
tryItOut("/*for..in*/M:for(__parent__ in (('haha'.split)(({__noSuchMethod__: null -= \r<x><y/></x>}).__noSuchMethod__)))switch(window) { default: break; case <x><y/></x>:  }");
tryItOut("/*for..in*/for(case 'fafafa'.replace(/a/g, function  prop (prototype, __iterator__)<x><y/></x>): return *;case new  '' (): break;  in (((1 for (x in [])))((({}).hasOwnProperty)())))");
tryItOut("if((prototype.__proto__ = ((yield <x><y/></x>)))) let (__parent__ = <x><y/></x>.__defineSetter__(\"__iterator__\", eval)) { return 1.2e3; }");
tryItOut("if((<><x><y/></x></>.__lookupGetter__(\"__proto__\"))) if(*.unwatch(\"prop\")) {export *;continue L; } else  if (<><x><y/></x></> <=  '' ) {{}prototype; } else  if (new (({}).hasOwnProperty)(prototype)+= /x/ \n) {/*infloop*/M:for(<><x><y/></x></>; <y><z/></y>; window) (<><x><y/></x></>);L: let prop, prop = this; } else (({a2:z2})).__defineSetter__");
tryItOut("throw (<><x><y/></x></> % window);/*infloop*/L:for(let prototype = (function ([y]) { })() && .2 += __iterator__; ( /x/g  ? <x><y/></x> : *::*) @ constructor =  /x/ ; (new Number( '' ))) {{; } }");
tryItOut("M:if(eval(\"<y><z/></y>\", <x><y/></x>) += 5.0000000000000000000000.hasOwnProperty(\"__iterator__\")[(yield <y><z/></y>)]) { if (\n((<><x>\f<y/></x></> for each (prototype in 3.141592653589793)))) K else {throw <x><y/></x>\n/*for..in*/M:for(var constructor in prop) yield @foo;gc() }}");
tryItOut("/*infloop*/for(var [, , __proto__] = (\n<x><y/></x>); [{}]; <x><y/></x>) {var __iterator__; }");
tryItOut("with(__iterator__){throw <>//h\n<x><y/></x></>;export prototype; }");
tryItOut("if(window) { if ( \"\" ) {switch(__count__) { case 0:  } }} else export *;\n{}\n");
tryItOut("/*infloop*/for(const __parent__ =  /x/ ; __proto__; this) throw @foo;");
tryItOut("continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L:\r for  each(const prop in prototype) throw <x/>;");
tryItOut("let (__count__) { if((new try { (function  __proto__ \f(__parent__, prop)false).apply } catch(__proto__ if 3/0) { export *; } )) { if ((1.3.eval(<y><z/></y>))) {yield; } else constructor = window;} }");
tryItOut("while((3/0.valueOf(\"number\")) && 0)const prop, __count__ = null;");
tryItOut("with({prop: (<bbb xmlns=\"(*::*.prototype)\"><\t!--yy--></bbb>.((delete <x><y/></x>)))}){export constructor; }");
tryItOut(";");
tryItOut("/*for..in*/for(var __count__ = <y><z/></y> = new __count__ = <y><z/></y>(({__noSuchMethod__:  /x/ }), typeof 3.141592653589793) in [15,16,17,18].filter(@foo, <\t><x><y/></x></>)) {let (__iterator__, __proto__ = <\nx><y/></x>) {  }export prototype;\ngc()\n }");
tryItOut("while((this ^= [z1,,]) && 0)L:with(*)let constructor;");
tryItOut("yield  /x/ ;");
tryItOut("export __noSuchMethod__;const __proto__, __iterator__ = *::*;");
tryItOut("/*infloop*/M:while(null){let prop = <><x><y/></x></>, __count__ =  \"\" ; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((1 for (x in [])))(* != window))){return;Math.sin }");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(let __iterator__ in <x><y/></x>) var __count__, prop = undefined");
tryItOut("if(false) gc() else {return  /x/g ; }");
tryItOut("/*infloop*/for(var prop; constructor.__parent__; prototype.prop = <><x><y/></x></>) {/*for..in*/M:for(const constructor in window) return;export __noSuchMethod__; }");
tryItOut("{return; }");
tryItOut("with({__count__: <><x><y/></x></>}){;yield; }\n");
tryItOut("/*infloop*/while(yield  '' )return;");
tryItOut("/*for..in*/for(const (this)(window) in *) false;");
tryItOut("switch(undefined.__lookupSetter__(\"__count__\")) { case 'fafafa'.replace(/a/g, function (function::__count__) { return <x/> } ) !== ((__iterator__)*.prototype = (<><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\"))): L: break L;var __iterator__, __iterator__ =  '' ;break; /*infloop*/do {(-1).__defineSetter__export prototype; } while(#1#);case [(this.zzz.zzz)]: break; break; default:  }");
tryItOut("{/*infloop*/for(var prototype; <y><z/></y>; prop) yield; }");
tryItOut("M:if((<x><y/></x>++)) gc() else \t if (this.hasOwnProperty(\"__iterator__\")) {yield; } else export __noSuchMethod__;");
tryItOut("");
tryItOut("/*infloop*/for([(Number(1e81)) for (__proto__ in 1e81)]; (Function(), ); let (prop) (this >= <x><y/></x>)) {'haha'.split }");
tryItOut("if(prototype.prop = @foo.unwatch(\"__noSuchMethod__\")) {L: yield; }");
tryItOut("throw *::*");
tryItOut("return;");
tryItOut(" set __proto__() { (({a1:1})); } ");
tryItOut("__iterator__: undefined");
tryItOut("try { for(let y in []); } catch(__count__ if (function(){let(__noSuchMethod__ = prop.(this .. {})) ((function(){yield (yield window);})());})()) { with({}) with({}) get = __proto__.__proto__; } finally { constructor = prop; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (yield <y><z/></y> ? <x><y/></x> : undefined)) if(__noSuchMethod__) {Function }");
tryItOut("if([z1,,] % (5.0000000000000000000000.throw(<>__parent__</>)) /= <y><z/></y>.throw(false)) {if(__count__) ; else  if ([11,12,13,14].filter) <x/>; else prototype, __parent__ = <><x><y/></x></>; } else  if (__iterator__ = <><x><y/></x></> :: __iterator__) {break ;let __noSuchMethod__; }");
tryItOut("with({}) { yield (<x/> /= this.__defineSetter__(\"__proto__\", function(y) { yield y; null;; yield y; })); } ");
tryItOut("/*infloop*/for(__noSuchMethod__ =  /x/ .watch/*\n*/(\"__iterator__\", Function); __proto__ = <y><z/></y>.__defineSetter__(\"set\", (Math.sin).call); <y><z/></y>) {yield  '' ;export __parent__; }");
tryItOut("if((gc(*::*, (({ set function::__proto__() { return false }  }))))) yield");
tryItOut("if((window.propertyIsEnumerable(\"constructor\"))) {with({__parent__: <><x><y/></x></>})return *; }");
tryItOut("with({}) { throw prototype; } ");
tryItOut("let (({ __proto__: ({ __proto__: [] }), __proto__: ({ prop: [[, ({ prototype: __proto__ }), ], ({ __count__: __iterator__ })], __iterator__: ({ __parent__: ({ __count__: ({ __proto__: prototype }) }), getter: [({ __count__: __count__, __iterator__: getter }), ] }) }) })) { M:switch(new ([1,2,3,4].slice)()) { case prototype.__lookupSetter__(\"__count__\"): break; /*infloop*/M:for(function::__proto__; [1,,]++; (<x><y/></x>.unwatch(\"__proto__\"))) {export *; }export *;break; case 3: break; default: ;break; throw <><x><y/></x></>; } }");
tryItOut("with({}) { with({}) { yyy }  } ");
tryItOut("/*infloop*/for(({ __noSuchMethod__: ({ __count__: __parent__, __proto__: prototype })\n, __iterator__: ({ prop: __count__ }) }) = ([((p={}, (p.z = [z1])()))]); __parent__.constructor = __noSuchMethod__ = #1#; __iterator__.__noSuchMethod__ =  /x/g ) export prop;");
tryItOut("if(1e4) { if ((void (-1)).propertyIsEnumerable(\"__parent__\") if (*)) {prototype; } else {truelet __iterator__ = prop; }}");
tryItOut("__count__((1.3 in <x><y/></x>--))");
tryItOut("with(new this.zzz.zzz(eval(\"return *;\", __count__ = <y><z/></y>), __noSuchMethod__))return;\nlet prop;\n");
tryItOut("if(<x/>) { if ((yield (({constructor: <x><y/></x>})) .@ __parent__ = __proto__)) {const prototype = 1e+81; } else export *;}");
tryItOut("");
tryItOut("/*for..in*/for(const __iterator__(<x/>) in __iterator__ = false) break M;");
tryItOut("for(let y in [5,6,7,8]) let(__count__ = ++<><x><y/></x></>) ((function(){yield null ||  \"\" ;})());");
tryItOut("L:while((window) && 0)__count__");
tryItOut("let (setter(<x/>), ({ prop: __iterator__, __parent__: prototype })) {  }");
tryItOut("/*for..in*/for(const __parent__ = [1,2,3,4].slice in  /x/g ) {/*infloop*/for(let prop = <y><z/></y>; window; undefined) {export *; }let constructor; }");
tryItOut("M:if(__proto__) export prop;");
tryItOut("/*for..in*/for(const __parent__ = (('haha'.split)(( \"\" .@*\t))) in (((prop)([1],  '' )))()) {__parent__, __noSuchMethod__\n/*for..in*/M:for(const prototype in <y><z/></y>) const prop; }");
tryItOut("/*infloop*/for(let ({ __count__: __iterator__ }) = (uneval(0.1.constructor = <y><z/></y>)); (<><x><y/></x></>)(<y><z/></y>) = return;; (<y><z/></y>)(this) =  \"\" .propertyIsEnumerable(\"prop\")) {with(*::*)yield this;(*); }");
tryItOut("with(new (({}).hasOwnProperty)()){yield; }");
tryItOut("while((((Array(window))[[[]]])) && 0){export *;return <x><y/></x>; }");
tryItOut("/*infloop*/for([] = true; __iterator__ = false; <y><z/></y> < __noSuchMethod__) let __noSuchMethod__;");
tryItOut("/*for..in*/for(const [prop, prototype] = Error(<x><y/></x>, *::*) in __proto__) {}");
tryItOut("/*infloop*/for(var ({ __count__: __noSuchMethod__ }) = (true.watch(\"__noSuchMethod__\", Math.sin)); let (prototype = @foo, prototype) constructor = <><x><y/></x></>; (true.*)) {return;throw __proto__;\t }");
tryItOut("{gc() }");
tryItOut("__parent__ = __parent__;");
tryItOut("with({__count__: <y><z/></y>}){(*); }");
tryItOut("do export *;__noSuchMethod__, prototype;{export __noSuchMethod__;yield <><x><y/></x></>; } } while(((uneval(<>window</>))) && 0);");
tryItOut(" '' \n");
tryItOut("/*infloop*/L:for(let constructor; (({}).__lookupGetter__).call(('fafafa'.replace(/a/g, eval))[__parent__.prototype setter= new Function],  \"\" .*, (033\n)); new RangeError(-__iterator__ = true, (<x><y/></x> :: <x/>))) [,,z1]");
tryItOut("return;");
tryItOut("if(*.valueOf(\"number\")) {/*infloop*/M:for(var __count__;  /x/g ;  /x/ ) gc()(1e+81); }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(1e+81['function::constructor'] in #1=[*::*]) { const __parent__; } }");
tryItOut("/*for..in*/for(const prop(<x><y/></x>.unwatch(\"__parent__\")) in <y><z/></y> ^ this.__count__) {do let __proto__, __count__ = true; while((1.3) && 0); }");
tryItOut("let (__count__) { /*infloop*/while(*.propertyIsEnumerable(\"__parent__\") ? null.hasOwnProperty(\"constructor\") : <y><z/></y>)var __iterator__ = __proto__; }");
tryItOut("<><x><y/></x></>\n");
tryItOut("throw  \"\" ;");
tryItOut("");
tryItOut("M:with({({ x::prototype: ({ __count__: __count__ }) }): <><x><y/></x></>.yoyo(033)})yield 5.0000000000000000000000;");
tryItOut("/*infloop*/for( /x/ ; \f(-1); <><x><y/></x></>) {function(y) { yield y; break L;; yield y; } }");
tryItOut("/*for..in*/for(let ({ prototype: __proto__, __noSuchMethod__: __noSuchMethod__ }) in (((new Function(\"if(<y><z/></y>) {export prop;return window; } else prototype = <><x><y/></x></>;\")))(3/0))){export *;gc() }");
tryItOut("if([[]]) ; else  if ( /x/g ) { }");
tryItOut("/*infloop*/L:for(function  prototype ((getter)) { return [* for (__count__ in  \"\" )] & prototype } ; this.__defineSetter__(\"__count__\", ((new Function(\";\"))).call).isPrototypeOf(null); ({ prototype: prototype })\t = __proto__ = this.__defineGetter__(\"__count__\", (1 for (x in [])))) {{if(true) {yield <><x><y/></x>\t</>; }return; }if( for each (prop in <><x><y/></x></>).__lookupSetter__(\"constructor\")) {{} } else  if (((this.__lookupGetter__(\"prototype\")).eval(this.__defineSetter__(\"prop\", (-0)) >= yield  '' ))) let constructor; }");
tryItOut("/*infloop*/do undefined; while(([(<><x><y/></x></>.*)].sort(/a/gi)));");
tryItOut("while((__iterator__) && 0)yield yield;");
tryItOut("/*for..in*/for(const __count__ in window) {continue M;export *; }");
tryItOut("export __parent__;");
tryItOut("if([11,12,13,14].map)  else  if ((3/0 += <x><y/></x>.yoyo(window))) let __proto__; else {export *;export __count__; }");
tryItOut("__parent__ = prototype, __iterator__ = arguments;");
tryItOut("/*infloop*/do {if(<><x><y/></x></>) (<y><z/></y>); else const prototype;let constructor =  /x/ , __count__; } while(((new Function).call((this.__defineGetter__(\"__iterator__\", (*).apply)), ( /x/ .yoyo( /x/ ))).valueOf(\"number\")));");
tryItOut("L:if(new (Math.pow)(<><x><y/></x></>)) {/*infloop*/M:do {gc() } while(prototype); } else  if ((1e+81 ? * :  /x/ )) {let __iterator__ = @foo; }\nreturn");
tryItOut("var function::__proto__ = __proto__, __count__ = <x><y/></x>;\n[1,,];\n");
tryItOut("L: var __noSuchMethod__ = false;");
tryItOut("{/*infloop*/for(RangeError(); prototype; <><x><y/></x></>(*, [,,z1])) L: var prop; }");
tryItOut("M:with(new prop( /x/ , <x><y/></x>))(*);");
tryItOut("{return;prototype, __iterator__; }");
tryItOut("if( /x/  = [@foo for each (prop in {})]) {return window;{} } else  if (((__parent__) = (window).watch)) var prototype, constructor = false;");
tryItOut("if(@foo) export prop;");
tryItOut("/*infloop*/do gc() while(eval(\"<y><z/></y>\", <><x><y/></x></>));");
tryItOut("M:if(eval(\"'haha'.split\", -3/0.__defineGetter__(\"__parent__\",  \"\" ))/*\n*/) gc() else  if (prop.(constructor.(({a1:1})))) this.__defineSetter__(\"__iterator__\", function(y) { yield y; [[]];; yield y; }); else yield this;");
tryItOut("__parent__ = prop;");
tryItOut("(4.)\nthrow StopIteration;");
tryItOut("/*infloop*/for(-0; arguments;  '' ) let prototype;");
tryItOut("{{yield; }return __noSuchMethod__; }");
tryItOut("try { (<y><z/></y>); } \ffinally { const __iterator__; } ");
tryItOut("while((@foo) && 0)let __noSuchMethod__ = #1=[#1#];");
tryItOut("/*for..in*/for(var __count__ = __parent__ in <x><y/></x>) {const __count__, __count__; }");
tryItOut("/*infloop*/do <x/>\nlet __noSuchMethod__ = true, __proto__ =  /x/ ; while(<x/>);");
tryItOut("if( /x/ ) {/*infloop*/while(*::*())( /x/ );/*for..in*/M:for(const __proto__ in ((function(q) { return q; })((new function  __parent__ (__noSuchMethod__) { return <><x><y/></x></> } (<x/>, prototype)))))const false; }");
tryItOut("prop['prop'] = __parent__;");
tryItOut("L:with(this){export *; }");
tryItOut("{; }");
tryItOut("/*for..in*/M:for([__proto__, true] = new String((<x><y/></x>.(4.))) in this.__count__ = <><x><y/></x></>) {(<x/>);yield; }");
tryItOut("/*for..in*/for(const prop in __noSuchMethod__\n) /*for..in*/for(constructor = __parent__ = <y><z/></y> in <y><z/></y>) {gc()gc() }");
tryItOut("if(((*).__defineSetter__)((__noSuchMethod__ = <y><z/></y>), [15,16,17,18].map(Function, <x><y/></x>))) {with({__proto__: 0/0}){(5.0000000000000000000000);yield; } } else /*\n*/ if (({ prototype: prototype }) = ({ __iterator__: __parent__, prototype: __iterator__ })) if(<x><y/></x>) { if (__count__)  else gc()}");
tryItOut("/*infloop*/for(let __parent__; prop; [ /x/ .__count__ = <x><y/></x> if (*)]) /*infloop*/M:while((function ([y]) { }) >> Object({})){yield;yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__( '' ) in this.__defineSetter__(\"function::__proto__\", Math.pow)) {const __noSuchMethod__;{} }");
tryItOut("/*infloop*/for(({ __proto__: [] }) = (<><x><y/></x></> % window for (constructor in <x/>)); this.__defineSetter__(\"__proto__\", <><x><y/></x></>); [1,2,3,4].map) return;");
tryItOut("if(([,,z1].isPrototypeOf(*::*))[export *]) { if (window) {;yield; } else {if(<><x><y/></x></>) {var __proto__ = @foo;__iterator__ = *, constructor = <><x><y/></x></>; } else  if (prop) __iterator__; }}");
tryItOut("L: {export *;let __iterator__ = this, constructor =  /x/ ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __proto__ in let (__iterator__ =  /x/ ) function ([y]) { }) [z1,,];");
tryItOut("while((<{__noSuchMethod__}> </{__noSuchMethod__}>.()) && 0)let (__noSuchMethod__) { export *; }");
tryItOut("/*infloop*/for(let __iterator__; (*.__count__); prototype = this.zzz.zzz || export *;) {M:if(<x><y/></x>) {gc() } else  if (<y><z/></y>) var __proto__\nreturn [1,,];; }");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((function  __count__ (__iterator__) { return __noSuchMethod__.constructor = <><x><y/></x></> } )([(new Exception([z1]) !== [z1,,])].some((((p={}, (p.z = @foo)())) === ((yield  /x/g ))).watch))))yield constructor;");
tryItOut("/*for..in*/for(var [__proto__, __count__] = <x><y/></x> && <x><y/></x> in constructor) with({__proto__: *})let prototype, __count__ = prototype;");
tryItOut("if(( { yield; } .unwatch(\"__proto__\"))) export *; else  if (({__proto__: false })) if(<y><z/></y>) (<><x><y/></x></>); else  if (__parent__) __proto__ else {export *; } else {window; const __iterator__;if( /x/g ) { if (undefined) {const __parent__ = <><x><y/></x></>; }} else {throw  '' ;{} } }");
tryItOut("L:if(<x><y/></x>) throw [];");
tryItOut("/*for..in*/L:for(let function::__parent__ = <><x><y/></x></> , -3/0 in <x><y/></x>) ?");
tryItOut("/*infloop*/for(let __noSuchMethod__; this.zzz.zzz && [0.1]; __iterator__ = <x/>) {/*for..in*/for(const prop in <x><y/></x>) this;L:if(<><x><y/></x></>) {yield; } }");
tryItOut("let ( \"\" , __parent__ = @foo) { export __parent__; }\n");
tryItOut("L:with(__proto__ = @foo){/*infloop*/for((new \f'fafafa'.replace(/a/g, (gc).apply)(3, .2)); this.__defineSetter__(\"prop\", function  __count__ (prop) { gc() } ) << (({function::constructor: <x/>, __proto__ getter: function  prototype (prop) { export *; }  })); ([15,16,17,18].filter(function  prop ()new (<x/>)(), [ \"\" ]))) /*infloop*/for(x::__count__; eval(\"<y><z/></y> >= <y><z/></y>\", new ({}).hasOwnProperty());  /x/g ) {let prop; } }");
tryItOut("L: yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __count__: __iterator__ }) in ({a1:1})) return this;");
tryItOut("return <x><y/></x>.(<x><y/></x>);");
tryItOut(";");
tryItOut("/*for..in*/L:for(var __count__ = [<><x><y/></x></>.watch(\"const prototype = <x><y/></x>, __proto__ = __noSuchMethod__: this;\", Math.sin)].map(<x><y/></x>) <<= {} :: window in __iterator__ = __iterator__) {{}if(export *) __parent__ = window; else  if (new ([1,2,3,4].slice)()) Math.sin }");
tryItOut("/*infloop*/do  /x/ \nyield; while(new [1,2,3,4].slice());");
tryItOut("with({}) { return; }  const __iterator__;");
tryItOut("while((prop) && 0){throw StopIteration; }");
tryItOut("L: { }");
tryItOut("{__count__ = [1], __count__; }");
