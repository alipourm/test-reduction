
tryItOut("if((yield (<><x><y/></x></>)[*::*])) { if ((({}) + this)) /*infloop*/for(const prop; [1]; var __iterator__, __count__ = 1.2e3) export prop;} else {;; }");
tryItOut("M:if((prop.hasOwnProperty(\"__iterator__\")).throw((<x><y/></x>).call(window, ))) {export __count__;if([1]\n) {__count__; } else  if ((-0)()) gc() else const constructor = <x><y/></x>, __parent__; } else  if (eval(\"* || <y><z/></y>.@foo\", prop.@*\f.__iterator__)) {let __noSuchMethod__ = <x/>, __parent__; }");
tryItOut("{if(<x><y/></x>) { if (#3={a:#3#}) yield; else (constructor)}/*for..in*/for(const [__count__, __iterator__] = null.__lookupGetter__(\"prototype\") = (*\n) in <> </>) {M:do {( /x/g ).apply } while((window) && 0); } }");
tryItOut("/*for..in*/L:for(var __proto__ in ((function  constructor (prop, prop) { let (constructor) { export *; } } )(eval(\"new (/a/gi)()\", 'fafafa'.replace(/a/g, new Function)) == __count__ = 1e-81)))throw this;");
tryItOut("/*infloop*/M:while(*(new [1,2,3,4].map(-1)))export prop\n");
tryItOut("L: {gc() }");
tryItOut("/*for..in*/for(const [\t__parent__, __parent__] = window in []) {export *; }");
tryItOut("let prototype = __count__, __noSuchMethod__\nL:if(__count__) {<><x><y/></x></>; } else  if (#1=[#1#]) throw this;");
tryItOut("L:with(((<><x><y/></x></>)([z1],  /x/g )))this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  \"\" ) {yield;export __parent__; }");
tryItOut("let(({ __count__: __proto__, prototype: __parent__ }) = <y><z/></y>, constructor) { return (true)\n");
tryItOut("if(case #1=[#1#] += prototype .@x:: ({}) %  \"\" : yield this; const constructor;break; yield <x><y/></x>.( \"\" );break; case 8: ) gc() else  if (__iterator__) /*for..in*/for(constructor = prop in  '' ) {<y><z/></y>;(prop); } else var __noSuchMethod__ = (function ([y]) { })(), __noSuchMethod__ = window;");
tryItOut("L:if(window) { if (( \"\" ).call(<y><z/></y>, )) {let __iterator__, constructor = [,];yield; } else /*infloop*/\ffor(<><x><y/></x></>; this; <x><y/></x>) {throw 1e+81;throw <x/>; }}");
tryItOut("continue ;break ;");
tryItOut("for(let y in [5,6,7,8]) with({}) { throw window; } ");
tryItOut("(this);var constructor =  /x/ ");
tryItOut("/*for..in*/for(let __noSuchMethod__ in undefined) __parent__;");
tryItOut("with(#2=({__count__: @foo}) || function(y) { yield y; return <><x><y/></x></>;; yield y; }.__lookupSetter__(\"prop\")){/*for..in*/for(const __count__ in  /x/g ) {yield <x/>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var delete(true) in false) {;function (__noSuchMethod__, __iterator__) { export __noSuchMethod__; }  }");
tryItOut("{( /x/g ); }");
tryItOut("");
tryItOut("/*for..in*/for(const [__iterator__, constructor] = ((this)()) in {}) /*for..in*/for(__proto__ in <x><y/></x>) {<y><z/></y>;this; }");
tryItOut("with(const __count__ = true;)break L;");
tryItOut("export prototype;");
tryItOut("/*for..in*/for(const __count__ = <y><z/></y> in <y><z/></y>) {(@foo);; }");
tryItOut("L: {if(\f<><bbb xmlns=\"(uneval(window))\"> </bbb></>) ;/*infloop*/M:do <x/>; while(__proto__ <= [,]); }");
tryItOut("if(<x><y/></x>) { if (5.0000000000000000000000) {} else {continue L; }}");
tryItOut("");
tryItOut("{{(window);M:if(window)  else  if (<y><z/></y>) {let yield, constructor = function ([y]) { };var prototype = [[1]]; } else { }\ngc() }with(({a1:1})){throw <x><y/></x>; } }");
tryItOut("if(Exception(((-1).__iterator__ ^ (prop || 033)))) {M:switch([]) { default: throw  /x/ ;break; case <y><z/></y>: const prototype = <x><y/></x>;break; case 0: if(prototype) { if (true) (<y><z/></y>).apply else {var __proto__ = this, __iterator__; }}\t } const prototype;/*for..in*/for(var __count__ = return <x><y/></x> in <x><y/></x>)  } else export *; const __proto__;");
tryItOut("return +(<x><y/></x> %= @foo);");
tryItOut("return <><x><y/></x></>\n/*infloop*/for(<x><y/></x>; false; __count__) yield;");
tryItOut("do export *; while((<xxx {__noSuchMethod__}={((<y><z/></y>)())} />) && 0);");
tryItOut("/*infloop*/while(null)/*for..in*/L:for(var __count__ = this.__defineGetter__(\"__parent__\",  /x/g ) in this) break M;");
tryItOut("M:if(__count__.prototype = --<y><z/></y> , <><x><y/></x></> / *) export *; else  if (__iterator__ = __count__ < __parent__ = window) /*infloop*/while([,])let prop = @foo;");
tryItOut("{throw StopIteration; }");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("var __noSuchMethod__ = 0x99; const prototype;");
tryItOut("if(__noSuchMethod__ = (<x><y/></x>.(@foo))) if([,,]) { if (*::*) {;try { return; } catch(prototype) { {} } finally { {} }  } else return;} else  if (<><x><y/></x></>[prop].unwatch(\"__noSuchMethod__\")) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.__count__ in <x><y/></x>) {export __count__; }");
tryItOut("export *;");
tryItOut("/*infloop*/for(var __noSuchMethod__; eval(\" { return this } \", __noSuchMethod__ = #3={a:#3#}.__lookupSetter__(\"__count__\")).__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))); #0=({__noSuchMethod__: <><x><y/></x></>++\n}).__lookupSetter__(\"__noSuchMethod__\")) L: {/*for..in*/for(let [prototype, getter] = <><x><y/></x></> in this) export constructor; }");
tryItOut("return <y><z/></y>;");
tryItOut(";");
tryItOut("if((yield 0x99 ? <y><z/></y> :  '' )) ");
tryItOut("if(<><x><y/></x></>) export __noSuchMethod__; else __proto__;");
tryItOut("");
tryItOut("\n");
tryItOut("{{yield;(1 for (x in [])) }/*for..in*/for(const [, prototype, , ] = (<y><z/></y>.prop) in ({a1:1}))  '' ; }");
tryItOut("for(let y in []);");
tryItOut("switch(*::*) { case  ''  for each (prop in null):  }");
tryItOut("/*infloop*/for(let(__proto__) ((function(){(try { export constructor; } catch(prototype if null) { break M; } \fcatch(prototype)//h\n {  } finally { (null); } );})());;  /x/ ; 3.141592653589793 &= __noSuchMethod__ @ *) {; }");
tryItOut("for(let y in []);");
tryItOut("if((typeof (('fafafa'.replace(/a/g, ( \"\" ).__defineSetter__))[(p={}, (p.z = *::*)())]))) {/*infloop*/L:for(let prop = this;  '' ; @foo) {export *; }; }");
tryItOut("if(__proto__) { if (__count__) {[1,2,3,4].map }} else export *;");
tryItOut("yield window;");
tryItOut("/*infloop*/for(let (__noSuchMethod__ = 1e-81) function(id) { return id } >>> ({ set __count__ __proto__ (this, __iterator__) { var function::__parent__ = <x><y/></x>; } , constructor: * })\n; <>yyy</>; (new ( '' )(true, <x><y/></x>))\n) {M:switch(([11,12,13,14].sort)) { case (__iterator__ = false) !== -1: const //h\nprototype = window;\nyield;\nbreak; case 3: break; case 0: break;  } }");
tryItOut("if(this > false.eval(new ([[]])())) /*for..in*/for(prototype = 1.3 in false) ");
tryItOut("if((function (prototype)<x><y/></x>).call(__proto__.(<x><y/></x>), <y><z/></y> ? <x/> : prop)) {(window); } else  if ((([1,2,3,4].map)( \"\" ) for each (prototype in (eval( '' ))) for (__count__ in <x><y/></x>) for (__proto__ in  /x/ ) for (__noSuchMethod__ in <><x><y/></x></>))) {var __parent__;yield 1e+81; }");
tryItOut("/*infloop*/M:do \t{continue L;{gc() } } while((this.__defineGetter__(\"__count__\", eval)));");
tryItOut("let __iterator__ = null, prop =  \"\" ;\n/*infloop*/M:for(var prototype = @foo; [1]; constructor) {(false); }\n");
tryItOut("if(<x/>) export *; else  if (*) var prototype, __noSuchMethod__ = true; else {;return; }");
tryItOut("if(each.@*.throw(__count__ = this .@ @foo)) gc()");
tryItOut("__parent__, x::__proto__");
tryItOut("(<x><y/></x>);\nlet prototype = [z1,,], __iterator__;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (prop) in <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((<><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\"))).__lookupSetter__(\"prop\")) return 1.2e3(-3/0).unwatch(\"__proto__\");");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__iterator__)(__count__, <><x><y/></x></>).__proto__ in prop.__proto__ getter=  /x/ ) return this; const export __parent__;;");
tryItOut("do {; } while((__parent__) && 0);");
tryItOut("throw __iterator__;");
tryItOut("with({}) { /*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = __count__ in \nconstructor) {export *;__parent__; } } ");
tryItOut("if(1e4) {continue L; }");
tryItOut("if(this) { if (<x><y/></x>) return;} else {gc()yield; }\n");
tryItOut("{function(q) { return q; }true; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("this.zzz.zzz;");
tryItOut("switch(( '' .__iterator__).throw(yield <y><z/></y> , <><x><y/></x></\r>)) { case [15,16,17,18].map(function(y) { yield y; /*for..in*/for([prop, __proto__] = window in <y><z/></y>) yield 033;; yield y; }, ((Function(<x><y/></x>, 1e-81)))[__iterator__.(window)] instanceof __noSuchMethod__.(#2=({__proto__:  /x/ }))): break;  }");
tryItOut("const __count__ = @foo, __count__");
tryItOut("/*infloop*/for(export prototype; try {  } finally { return *::*; }  = ( /x/ .__lookupSetter__(\"__iterator__\"))[#1=[#1#]]++; (1e4.__count__)) {export prop;{'haha'.splitbreak L; }with(window)let prototype =  '' ; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for((uneval(!<x/>)); ((eval)((({__parent__: <y><z/></y>, constructor: <x><y/></x> })))); ( /x/  ? 1.2e3 :  '' )) {if(--null += @foo) {{} } else {var __iterator__ = <x><y/></x>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor { yield [11,12,13,14].filter }  ('fafafa'.replace(/a/g, 'haha'.split)) in this.__defineGetter__(\"__parent__\", (*).apply)) 1.3");
tryItOut("if(gc()) {<x/>.propertyIsEnumerable(\"yield <x/>;\"); } else  if ((({ __noSuchMethod__: [[]] }) = [,,])) ; else function(q) { return q; }");
tryItOut(" get __proto__ __iterator__ () { /*\n*/return window } ");
tryItOut("L:do /*{gc() }  typeof   while((/*window) && 0);");
tryItOut("yield ((1 for (x in [])))(<><x><y/></x></>).propertyIsEnumerable(\"__iterator__\");");
tryItOut("(-0);;");
tryItOut("L: arguments;");
tryItOut("if(<x/>.valueOf(\"number\")) {const __parent__ =  '' , constructor; } else ;with({__parent__: ({prototype getter: false }).__defineSetter__(\"__count__\", this.__defineGetter__(\"__parent__\", 'haha'.split))})if(window) __parent__");
tryItOut("/*for..in*/for(const prototype in ((function(y) { yield y; throw true;; yield y; })((1e4.(<x><y/></x>.__proto__ = *))))){M:with(__count__ = __proto__)const constructor; }");
tryItOut("const prop, prop =  /x/ \n\fvar __noSuchMethod__ = try { gc() } finally { export  <employee id=\"1\"><name>Joe</name><age>20</age></employee> __count__; } \nwhile((\fnew 'haha'.split(<x/>, (({a1:1})).__defineSetter__)) && 0){let __iterator__, __parent__ = <y><z/></y>;/*for..in*/for(let __parent__ in ((Function)(this))){export *;throw @foo; } }");
tryItOut("if(Math.sin if ( /x/g )) {return;return; } else  if (<><x><y/></x></> .. (-0)) {let prototype; } else export *;");
tryItOut("throw StopIteration;");
tryItOut("if( \"\" .__defineSetter__(\"prop\", function  __parent__ (__count__) { return null } )) constructor; else  if (eval(\"export *;\", <x><y/></x>)) {; } else {gc()gc() }\f");
tryItOut("/*for..in*/\rfor([__parent__, __parent__] = prototype in windowunwatch(\"constructor\")) 1.2e3");
tryItOut("/*for..in*/for(const ({ constructor: [], prop: ({ constructor: ({ __proto__: __count__ }), prototype: [, ] }) }) in ({a1:1})) {(<x><y/></x>);; }");
tryItOut("/*for..in*/for(var 'haha'.split in ((\t({}).hasOwnProperty)([1,,]\n))){;__proto__; }");
tryItOut("{throw *;return; }");
tryItOut("if(prototype.__proto__ setter= window)  else /*for..in*/for(var prop in (( /* Comment */new (function(q) { return q; })(window, <><x><y/></x></>))(getter =  /x/g  ? <x><y/></x> : window))){with((let.__noSuchMethod__ getter= Function))const constructor, __iterator__; }");
tryItOut("__parent__ = prop;");
tryItOut("/*for..in*/for(const [prop, constructor] = [, ({ constructor: ({ __parent__: __proto__, __noSuchMethod__: __parent__ }) }), , function::__count__] = ((1e4 = [,]).__iterator__) in __count__ = <><x><y/></x></>++) /*infloop*/while(#2=<y><z/></y> !== <x><y/></x>){do {(arguments); } while(((function ([y]) { })()) && 0); }");
tryItOut("if( \"\" .__count__ === (this.unwatch(\"constructor\"))) ({}).__lookupGetter__\n else {if([,].__count__) {yield;gc() } else  if (window) {gc() }const constructor = -1; }");
tryItOut("switch(((<x><y/></x>.__defineSetter__(\"__count__\", Math.sin))[(this.zzz.zzz)[(p={}, (p.z =  '' )())]])) { case 1: break; default: gc()\n;\nbreak; case [,,z1]: if((([[1]] for (__noSuchMethod__ in <x><y/></x>)))) yield this; else  if (<x><y/></x>.*) {{} } else throw  /x/ ;case 0: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in 1e4) gc()");
tryItOut("while((this.__defineSetter__(\"__noSuchMethod__\", (1 for (x in [])))) && 0)const prop, __proto__ = __count__;");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*for..in*/for(var __iterator__ = this in [,,z1]) {yield window;var prop, prop = false; }{__proto__, prop; }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ = (prop &= this) in (__iterator__.function::__iterator__.isPrototypeOf(true.throw(prop).yoyo([(<x><y/></x>.(<x/>))\t for each (__proto__ in constructor) for each (__iterator__ in  /x/g /*\n*/)])))) {/*infloop*/L:do return *::*; while(prototype.__noSuchMethod__ setter= Math.pow); }");
tryItOut("{;yield *::*; }");
tryItOut("let (__parent__ = #3={a:#3#}) { (@foo); }");
tryItOut("continue ;");
tryItOut("gc()export *;");
tryItOut("this.zzz.zzz;");
tryItOut("do {L: ;let (__count__) { export __proto__; } } while((prop.( /x/g )) && 0);");
tryItOut("/*infloop*/for([({ __noSuchMethod__: __noSuchMethod__ }), function::prop] = ([*].sort(<><x><y/></x></>))[ /x/g ++]; this.zzz.zzz; (<><x><y/>\t</x></>.prop)) {function  __noSuchMethod__ () { return <x><y/></x> }  }");
tryItOut("const \n__noSuchMethod__ =  /x/g , constructor = @foo;\nthrow <><x><y/></x></>;\n");
tryItOut("switch(prop.__count__ getter= [1,2,3,4].map) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor(__parent__.valueOf(\"number\")) in (__count__ = false)) {prototype }break;  }");
tryItOut("let(__proto__) { for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*infloop*/do gc() while(undefined);");
tryItOut("if(\nnull) { if (<x><y/></x> !== null) {export __parent__;return [z1]; }} else gc()");
tryItOut("/*infloop*/while(([15,16,17,18].sort(({}).__lookupGetter__, prototype = __parent__)))do {const prototype = __proto__, __noSuchMethod__; } while(([1,,]) && 0);\f");
tryItOut("/*for..in*/M:for(const __iterator__ in null)  /x/g ;");
tryItOut("with([@foo.yoyo(this)].map('haha'.split)){if((constructor.__parent__)) {return 0/0;export *; } }");
tryItOut("do return undefined; while((-1) && 0);");
tryItOut("with({prop: (<x><y/></x>.__defineSetter__(\"prototype\", Function))./*\n*/__lookupSetter__(\"prototype\")})* =  /x/ [<><x><y/></x></>]");
tryItOut("try { prop = true, __count__ = null; } finally { this; } ");
tryItOut("if((#1=__parent__) = <x/> ? [z1,,] : window) {const __proto__, __parent__;gc() } else export prop;");
tryItOut("if(new function ([y]) { }()) M:with({__parent__: }){; }");
tryItOut("let (__count__ = (yield prop.__defineGetter__(\"__iterator__\", [1,2,3,4].map))) { /*for..in*/for(var prop = [z1,,] in <x><y/></x>) yield  /x/g ;\nM:with(this.zzz.zzz)try { let([, ({ prototype: prop, prototype: __noSuchMethod__ }), , , ] = __iterator__%=__parent__) ((function(){let __parent__ = @foo, __parent__ = [,,];})()); } catch(__parent__ if (function(){return;})()) { var false; } catch(constructor) { throw StopIteration; } finally { let(__iterator__ = (__iterator__, __proto__), [__noSuchMethod__, , , , __count__]) { __proto__(-033) = return new (this.__defineSetter__(\"prop\", [1,2,3,4].map))();; } \n }");
tryItOut("do { } while((<x><y/></x> *  \"\" ) && 0);");
tryItOut("M:if(*.__lookupGetter__(\"prop\")) var prop, prototype = <><x><y/></x></>; else prototype = <\f><x><y/></x></>, __iterator__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(var [__count__, , ] = ((*::*)([[]], <x><y/></x>).__noSuchMethod__); (3/0).watch((__proto__|= \"\" ), 1e4); undefined) __proto__");
tryItOut("\n");
tryItOut("return;");
tryItOut(";");
tryItOut("const prototype = ({a2:z2}), __parent__; const __proto__;");
tryItOut("with({__iterator__: /*\n*/(<><x><y/></x></>.//h\nprototype = *::*) *= new 3.141592653589793(null, <x><y/></x>)});");
tryItOut("/*infloop*/for(function::constructor = <x/>; new (new Function(\"break ;\"))(~<y><z/></y>.constructor, (*::*)); <x/>) (<><x><y/></x></>);");
tryItOut("with(prototype ^ undefined)const constructor\ncontinue L;");
tryItOut("/*infloop*/for(__noSuchMethod__; ({}); __iterator__) {return prototype; }");
tryItOut("switch(<x/> && 0) { default: yield <x><y/></x>;/*infloop*/for(const __count__ = this; <x><y/></x>; -1) {return; }break;  }");
tryItOut("\fif(__proto__ = null) {let __proto__ =  '' ; } else  if (eval(\"return <x><y/></x>;\", window)) {prototype = <><x><y/></x></>, prop = <x/>;var __proto__, prototype; } else gc()");
tryItOut("/*for..in*/for(var ([11,12,13,14].some)([[]]) in (([1,2,3,4].slice)((uneval((({ get __noSuchMethod__ prototype () { return <y><z/></y> }  })))))))if((this.zzz.zzz).__lookupGetter__(\"prop\")) { if ((eval(\"<x/>\", <x/>))) var __iterator__, __proto__ = <x/>; else {{}prototype, __count__; }}");
tryItOut("/*for..in*/for(let constructor = prototype = -0 in <x/>) {return <x><y/></x>;[1,2,3,4].slice }");
tryItOut("(undefined)\neval");
tryItOut("if(([11,12,13,14].map != (delete 0.unwatch(\"constructor\")))) { if (([new function(q) { return q; }(new (true)(), ({ constructor: __noSuchMethod__ }) = new #1=[#1#] = <y><z/></y>(), prop = ((yield  /x/g )))]\f.some(Math.sin))) gc() else {/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in (prop.__count__ = <x><y/></x>)) {return; } }}");
tryItOut("L: {/*for..in*/for(var [prototype, *, , constructor, __noSuchMethod__] in (((p={}, (p.z = window)()))((this.zzz.zzz))))yield;if((uneval(((uneval(function ([y]) { })))))) {continue M;({}); } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) return; }");
tryItOut("/*infloop*/for(let __count__ = #1=[#1#];  '' ;  /x/ ) throw @foo;");
tryItOut("/*infloop*/for(__parent__; <{__count__}>yyy</{__count__}>.((new [1,2,3,4].map((__proto__++)))); gc(((yield <y><z/></y>)) <<= gc(), (({a1:1}).__defineGetter__(\"__proto__\", true)))) return __iterator__;");
tryItOut("{/*for..in*/for(__iterator__ in  /x/ ) {export __iterator__; }return (-1); }");
tryItOut("prop = this;\nconstructor;\n");
tryItOut("/*for..in*/L:for(let each = 1.2e3 in [1,,]) continue ;");
tryItOut("\nL:with(this.__defineSetter__(\"__parent__\", function  __parent__ () { let __count__ = 1e-81; } ))continue L;");
tryItOut("M:if(<x/>['__iterator__']-=<y><z/></y>) {continue ; } else {prototype }");
tryItOut("Mwhile((([1e4 for (__parent__ in  /x/g )])) && 0){var __count__ = {<x><y/></x>;constructor }; }");
tryItOut("/*infloop*/while(<x/>){throw 1e-81 ? 1e-81 : <y><z/></y>;{; } }");
tryItOut("/*infloop*/do {/*infloop*/while(__parent__.__noSuchMethod__ getter= prototype)<><x><y/></x></>;if(__iterator__) arguments; } while(window ?  /x/g  : <x><y/></x>.__lookupGetter__(\"__parent__\")); const constructor;");
tryItOut("L:do {return; } while((__parent__) && 0);let ;\n-3/0;\n");
tryItOut("function(y) { yield y; export __count__;; yield y; }\n\n");
tryItOut("/*infloop*/while(({ set prop(constructor, __parent__) { yield __noSuchMethod__; }  }).prop){(undefined);switch( \"\" ) { case * .@x:: this:  } }");
tryItOut("if(prototype.__defineGetter__(\"__noSuchMethod__\", window)) { if ((return  /x/g )(new (<x><y/></x>)(), function ([y]) { })) export prop;} else if( /x/ ) { if ((function ([y]) { })()) {export __iterator__; } else continue M;}");
tryItOut("/*for..in*/M:for(const [__count__, x::__iterator__] = true in let (__proto__) __iterator__) {; }");
tryItOut("i\n");
tryItOut("{throw <x><y/></x>; }");
tryItOut("/*for..in*/for(constructor in ((({(yield;); }).call)((new <y><z/></y>(null, this)), <><x><y/></x></>))) export *\n");
tryItOut("({ prototype: [, __iterator__, ({ prop: ({ __count__: prototype }), prop: ({ __count__: __proto__ }) }), __proto__], __count__: ({ prototype\f: ({ __iterator__: ({ __count__: ({ prop: __proto__.prop }) }), prop: ({ prop: prop }) }), __count__: __proto__ }) })");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = __count__ = (({a2:z2}) /= false) in *) {__iterator__ = (function ([y]) { })();undefined; }");
tryItOut("/*for..in*/for(const prototype = #0=() .@x::  ''  in __parent__ = prototype.__count__)  /x/g ;");
tryItOut("var __iterator__, __iterator__ = <x><y/></x>;\nL:with({__count__: ((*::* for (__proto__ in try { return [,]; } catch(__parent__ if (function(){(new Function).apply})()) { export *; } catch(__noSuchMethod__ if (function(){return;})()) { prop, __iterator__; } catch(prototype) { {} } finally { return #1#; } )))})gc()\n");
tryItOut("/*for..in*/for(const __count__ = ({__proto__: window }) in __count__ = <x><y/></x>) {gc() }");
tryItOut("throw StopIteration;");
tryItOut("if((eval).call([11,12,13,14].map, ( /x/g  + (-0)), <><x><y/></x></>).__proto__ = (<> </>.(undefined))) { if ([,,z1]) /*infloop*/for(var ({ prop: __count__, __iterator__: __iterator__ }) = new Boolean(); null < (-1); (new Math.sin())) export __iterator__;(false); else ;}");
tryItOut(" get __noSuchMethod__ __noSuchMethod__ () { return ((<x/> .. window) >= this.__defineSetter__(\"__proto__\", <x><y/></x>)) } ");
tryItOut("/*infloop*///h\nM:do {} while(#1# == *::*);");
tryItOut("/*for..in*/L:for(const  /* Comment */__noSuchMethod__ in ((function (__noSuchMethod__, ({ __count__: __iterator__, __iterator__: __iterator__.__parent__ })) { yield <>new (<x/>)(*, *)</> } )(({ get __proto__() { yield this } ,  set constructor(constructor, __proto__) { throw @foo; }  })))){if(*::*) {break L; } else  if ((eval(\"(__count__.isPrototypeOf(<x><y/></x>))\", ({++)))) (4.); }");
tryItOut("with({__parent__: [[]] |= this.__iterator__ = (<x><y/></x>\t.propertyIsEnumerable(\"__parent__\"))})yield __proto__;");
tryItOut("throw StopIteration;");
tryItOut("{while((let prop = <x><y/></x>, __proto__ = 1e4;) && 0){gc()return  \"\" ; } }");
tryItOut("/*infloop*/L:for(__proto__ = ({__iterator__: <x><y/></x>}); ([1,2,3,4].slice).call( /x/g , <><x><y/></x></>).valueOf(\"number\"); window) return <><x><y/></x></>;");
tryItOut("let() ((function(){for(let y in [5,6,7,8]) with({}) { prop = __count__; } })());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for \t each(const __noSuchMethod__(*::* * <y><z/></y>) in <><x><y/></x></>++) yield;");
tryItOut("__iterator__ = __iterator__;");
tryItOut("{[1,2,3,4].slice }");
tryItOut("gc()");
tryItOut("with({constructor: new (eval(\" '' \", __iterator__))(((*::* for each (__iterator__ in <><x><y/></x></>))), <><x><y/></x></>)}){const __noSuchMethod__ = __noSuchMethod__, prototype = <x><y/></x>;return; }");
tryItOut("if(Array()) {throw __parent__.prop = window;throw StopIteration; } else  if ((#1=[#1#] , [,,] ? <x/> != <><x><y/></x></> : __parent__.__noSuchMethod__)) ;");
tryItOut("/*infloop*/L:for(let __iterator__ = \n*.valueOf(\"number\"); (__parent__ =  /x/ ); ([15,16,17,18].filter(this, <x><y/></x>))) \t{continue M\n; }\nlet(__parent__) { let(<ccc:ddd><!--yy--></ccc:ddd>) { (__iterator__) = __iterator__;");
tryItOut("if(<><bbb xmlns:ccc=\"prop\"><ccc:eee></ccc:eee></bbb></>) {throw <x><y/></x>; const prototype;yield prototype; } else  if (__iterator__ = *::*) {L: throw 0.1; } else <y><z/></y>;");
tryItOut("if((__count__.__defineGetter__(\"__iterator__\", function(q) { return q; }))\n) { if (([<x/> if (*)])\t) {return [1,,];([[]]); } else {M:while(([<x><y/\f></x>]) && 0){M:if(this) { if (null) return;} else const prop;export *; } }}");
tryItOut("with((__count__ = <x><y/></x>.*))if(#3={a:#3#}) return  \"\" ; else {;__proto__; }");
tryItOut("/*infloop*/L:while(__count__.__proto__ getter= (*).watch)/*for..in*/for(const __iterator__ in @foo) {throw __noSuchMethod__;let __proto__ = null; }");
tryItOut("let(__parent__) ((function(){yield;})());");
tryItOut("/*infloop*/L:while((p={}, (p.z =  \"\" .unwatch(\"return;\"))()))let (__count__ = <x/>, __count__ = prop) {  }");
tryItOut("/*infloop*/while(__proto__)/*for..in*/for(prop in [1]) {return 0.1; }");
tryItOut("if((({__count__: <x><y/></x>}))) { if ((__noSuchMethod__.eval(@foo))) (#1=[#1#]); else while(([1]) && 0)let, __proto__;}");
tryItOut("switch(__noSuchMethod__ = <y><z/></y>) { default: break;  }");
tryItOut("/*for..in*/for(let __count__ in (([1,2,3,4].slice)(__parent__.__count__ = (new ({}).hasOwnProperty(@foo,  '' )) << [15,16,17,18].map(({}).hasOwnProperty, (<><x><y/></x></>.eval( '' ))))))if(this.__defineGetter__(\"prototype\", (<><x><y/></x></>).__defineSetter__)) { if (([11,12,13,14].map)) /*infloop*/for(1e+81; this; <x><y/></x>) let __parent__, __noSuchMethod__; else {{yield;return; } }}");
tryItOut("yield;");
tryItOut("do {continue ;\n{}\n } while(((<> '' </>.eval( \"\" )).unwatch(\"__proto__\").eval(getter = 1e+81 @ <y><z/></y>.__noSuchMethod__ = __count__)) && 0);");
