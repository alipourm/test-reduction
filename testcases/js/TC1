
tryItOut("let (__iterator__ = window) { prototype; }");
tryItOut("return (p={}, (p.z =  /x/g )())");
tryItOut("{}");
tryItOut("yield  /x/ ");
tryItOut("/*for..in*/\tfor(__iterator__ in (((<><x><y/></x></>).watch)(__proto__ = <x/>))){export __iterator__;; }");
tryItOut("try { {} } catch(constructor if (function(){yield @foo;})()) { gc() } catch(constructor) { return; } finally { return; } ");
tryItOut("/*for..in*/L:for(constructor in true) return;");
tryItOut("if(((*).call(__noSuchMethod__ = <x><y/></x>, ))) {;throw *; }");
tryItOut("throw StopIteration;");
tryItOut("{var __noSuchMethod__;export *; }");
tryItOut("/*infloop*/for(var prop; let (constructor) (this.__defineGetter__(\"__parent__\", true))++; ((p={}, (p.z =  '' )()).__lookupSetter__(\"__proto__\"))) {var __parent__, __count__; }");
tryItOut("/*infloop*/do let ({ __count__: [__noSuchMethod__, __proto__, __parent__, __noSuchMethod__] }) = (;), __parent__ = (*::*.valueOf(\"number\")); while(yield <x><y/></x>);");
tryItOut("/*for..in*/for(__noSuchMethod__ = __count__ = <x/> %= (uneval(<y><z/></y>)) in (({}).hasOwnProperty).call([z1,,], )) {continue ;let (__iterator__ = true) {  } }");
tryItOut("with(<y><z/></y> = constructor;){with(<><x><y/></x></>(<x><y/></x>)){function(q) { return q; }prop; } }");
tryItOut("yield undefined;");
tryItOut("/*for..in*/for(__proto__ in prop = [z1,,]) {/*infloop*/L:for(({ __noSuchMethod__: __noSuchMethod__, prop: each }) = __noSuchMethod__ = <><x><y/></x></>; *.__parent__; prototype =  /x/g ) yield window; }");
tryItOut("if(yield [,,z1].__noSuchMethod__ = <x><y/></x>) continue ; else (-0);");
tryItOut("throw constructor;");
tryItOut("export prototype");
tryItOut("M:if((__iterator__ =  /x/ )) { if (this) {export __noSuchMethod__; } else {let(__iterator__) { let __count__, constructor; }\n}");
tryItOut("/*for..in*/for(__iterator__ in __count__) {return <><x><y/></x></>; }");
tryItOut("do /*for..in*/L:for(const __proto__ in ((Math.sin)([15,16,17,18].sort(gc,  '' ))))export *; while((__proto__ = true) && 0);");
tryItOut("return;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __parent__] = #3={a:#3#} , (function::constructor) in eval(\"window\", window)\n) <x><y/></x>.__noSuchMethod__ =  /x/ ;");
tryItOut("/*infloop*/M:while((this.__iterator__))export __proto__;");
tryItOut("{return;try { this; } catch(__proto__) { <x/>; } finally { [1,2,3,4].slice }  =  /x/ , __proto__ = <x><y/></x>; }");
tryItOut("let ([, ({ prototype: __parent__ }), [, , ], , ({ prototype: prototype })], constructor) { M:if((new Array(#1=[#1#]))) export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__.__count__ in \n__noSuchMethod__ >> [1.2e3].map(({}).__lookupGetter__)) /*infloop*/M:do {export __proto__; } while(eval(\"gc()\", <><x><y/></x></>));");
tryItOut("L: {}");
tryItOut("L: {/*infloop*/while(*::*){throw  \"\" ;return; } }");
tryItOut("return [1.2e3 if (*)];switch(<x/> || false) { case 7: break;  }");
tryItOut("L: __iterator__; const function::__noSuchMethod__;");
tryItOut("/*for..in*/for(let __proto__ in #3={a:#3#}) {return (-0); }");
tryItOut("/*for..in*/for(let __count__.constructor in <><x><y/></x></>) {export *; }export *;");
tryItOut("with((({__iterator__:  /x/ .__lookupSetter__(\"constructor\") })).hasOwnProperty(\"__noSuchMethod__\"))with({}) { throw __proto__; } ");
tryItOut("throw __parent__;");
tryItOut("L:while(((__proto__ = <><x><y/></x></>)) && 0){*::*;__parent__ = __parent__, prop; }");
tryItOut("/*infloop*/for(__count__; 'fafafa'.replace(/a/g, gc); [,,]) {return (let (__iterator__) prototype); }");
tryItOut("yield");
tryItOut("let (({ __noSuchMethod__: ({ constructor: __noSuchMethod__ }), prop: [, , __noSuchMethod__, __count__] }) = *.watch(\"__iterator__\", function  __count__ () { yield; } )) { if(<><x><y/></x></>) [1,2,3,4].map else throw null; }");
tryItOut("with({__noSuchMethod__: 0/0}){constructor; }");
tryItOut("/*infloop*/L:for(const __count__ = @foo; [z1,,]; __parent__) \nyield prop;\n");
tryItOut("{}\nexport prototype;\n");
tryItOut("/*for..in*/for(__iterator__ in ((Function)((window).__defineSetter__))){M:switch(default: break; break; case <><x><y/></x></>: break; const __count__, __count__;break; case 4: falsecase 2: break; ) { case 0: ;case 0:  } }");
tryItOut("M:switch(new (<x/>)()) { default: break; break; case [({ constructor: prototype })] = (!constructor.__proto__ = __noSuchMethod__):  }");
tryItOut("switch(3) { default: const constructor;break; break; {}case false: break; case 3: return;break; case 8: break; case [1]: function ()*::*break; const __proto__;function(q) { return q; }case get: (@foo);break; yield  \"\" ;case 9: break; case 0: break; (1e81).__defineSetter__ }");
tryItOut("try { yield ((({__count__: window})).__lookupSetter__(\"prop\")); } catch(__noSuchMethod__) { with({}) { with({}) { return; }  }  } finally { if([z1,,]) {yield; } else {(case 1: export *;default: export *;__noSuchMethod__ = __iterator__, __noSuchMethod__ = window;break; case <><x><y/></x></>: break; break ;break; ); } } ");
tryItOut("let (__iterator__, __proto__) { return __iterator__; }");
tryItOut("/*infloop*/for(__proto__; ( \"\" )(<><x><y/></x></>); new (0x99)()) {export __iterator__; }");
tryItOut("/*infloop*/M:for(__iterator__ = (yield ((-<><x><y/></x></>).watch(\"prop\", (Function).call)\n)); ({ get __iterator__ window (__iterator__, __count__) { yield undefined }  }); ((yield @foo))[default: [1];case this: \t(true); <<= __proto__.throw(prop).propertyIsEnumerable(\"__iterator__\"), void null]) {return;constructor; }");
tryItOut("if(this.prototype = (@foo)(undefined)) yield; else  if ((String(<y><z/></y>))) (-0) else {\tprop = [1];<x><y/></x>; }");
tryItOut("L: return #3={a:#3#};\n;\n");
tryItOut("with(__count__.__count__ getter= (__proto__).__defineSetter__){}\ngc()");
tryItOut("if(void ([z1] >  /x/g )) { if (({(eval(\"{yield *::*;throw this; }\", window.hasOwnProperty(\"__proto__\"))): [[]].__iterator__.__count__ = (({ get: prototype, *::*: prototype }) = [, , constructor, , get])})) {({ constructor: __parent__ }) } else {const constructor;yield; }}");
tryItOut("if((this.zzz.zzz)) { if (<><x><y/></x></> ? [z1] : 033) if( /x/ .valueOf(\"number\")) { if ((new ( '' )(<><x><y/></x></>))) {return  /x/ ; } else {__count__ = window; }} else export constructor; const __parent__;}");
tryItOut("__parent__, __iterator__\n");
tryItOut("let([], prop) ((function(){gc})());");
tryItOut("while(((__parent__ = __count__)) && 0){yield window;(<y><z/></y>); }");
tryItOut("L:if(<x><y/></x>) yield [z1]; else  if (this) {[[1]]; }");
tryItOut("for(let y in [5,6,7,8]) let(({ prop: [prototype, , , ], function::__count__: constructor }) = ((*)[constructor])) ((function(){yield ({});})());");
tryItOut("/*infloop*/for(var ({ constructor: ({ __parent__: __count__ }) }) = (({ set __iterator__(__count__, prop) { yield ((p={}, (p.z = window((function ([y]) { })(), __proto__))())) } , __iterator__: __parent__.__noSuchMethod__ =  /x/g .__lookupGetter__(\"prototype\") })); __parent__.__noSuchMethod__ = (let (__proto__ = constructor%=({a2:z2}) >>>=__proto__.__iterator__) [__proto__]);  /x/g ) {let prototype =  '' , __count__ = window;return __proto__; }");
tryItOut("yield 1e81;");
tryItOut("while((*::*) && 0)\n/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; null) ");
tryItOut("if( { {<y><z/></y>;export *; } } ) {{yield 3.141592653589793;; } } else  if (null) 'haha'.split");
tryItOut("/*infloop*/M:while( \"\" )yield #3={a:#3#}\n");
tryItOut("export *;/*for..in*/L:for(let [__iterator__, constructor] = false in *) gc()");
tryItOut("__proto__ = #1=[#1#];");
tryItOut("/*infloop*/for(var function::__proto__; (* for (__iterator__ in  /x/ )); yield null) {throw window;{} }");
tryItOut("prop = \f__parent__;");
tryItOut("gc()");
tryItOut("throw StopIteration\nwith({}) { with({}) { [,,]; }  } ");
tryItOut("if(__proto__ = <y><z/></y>) {break ;break M; } else  if (((uneval(window)))) {yield; }");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("return <x/>;L: {gc()function  __noSuchMethod__ (__iterator__, __count__)* }");
tryItOut("L: var prop = <><x><y/></x></>;");
tryItOut("let (__count__ = <x><y/></x>) { throw <><x><y/></x></>;\ncontinue M;\n }");
tryItOut("/*infloop*/for(({ constructor: __noSuchMethod__ }) = this; __parent__ = <x><y/></x>; <\r><x><y/></x></>.throw(<><x><y/></x></>)) {return  \"\" ; }\n/*for..in*/for(__iterator__ = ({__iterator__: <><x><y/></x></>.@*}) in __proto__) {(<x><y/></x>); }\n");
tryItOut("export __noSuchMethod__;");
tryItOut("export __iterator__;\nconst __iterator__, prop = @foo;\n");
tryItOut("/*for..in*/for(var __parent__ = prop in <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(new function(q) { return q; }(0x99))) {yield; }");
tryItOut("let __parent__ =  '' , __count__;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("with({__noSuchMethod__: (eval)(#1=(__proto__ = ({prototype: <x><y/></x>})--))}){this.zzz.zzz; }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("/*infloop*/eval(\"[15,16,17,18].filter(Function, prop ? 0x99 : {})\", (* if (0x99)) < (__parent__ =  \"\" )), (uneval(constructor = #1#))");
tryItOut("{const __proto__ = prototype; }");
tryItOut("/*infloop*/for(__proto__)(<x><y/></x>); [15,16,17,18].filter(<><x><y/></x></>, ({__parent__: this})); new (<><x><y/></x></> instanceof [[1]])(true .@*:: false)) var __iterator__, constructor;");
tryItOut("if((Boolean()) for each (__iterator__ in this) if (<y><z/></y>\f)) { if (__iterator__ = <x>\f<y/></x>) {throw <><x><y/></x></>;export *; }} else __count__");
tryItOut("let (__iterator__) {  }\nwith({}) { __proto__ } ");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] =  /x/  in  /x/g ) var __count__;");
tryItOut("M:if(((function (__iterator__, __proto__)).call(false, <x><y/></x>, this) === <><x><y/></x></>.isPrototypeOf(*::*))(window .. @foo >>= __iterator__.throw(<><x><y/></x></>)) @ new (<><x><y/></x></>)(<x><y/></x>/*\n*/, <><x><y/></x></>)) {with({__proto__: <x/>}){continue M;return <><x><y/></x\t></>; }\f } else  if (__noSuchMethod__ /= ~false[true.valueOf(\"number\")]) {var __noSuchMethod__ = -0;const constructor = 3; }");
tryItOut("{var __iterator__, prototype;throw [,]; } const prototype;");
tryItOut("/*infloop*/for(const ({ __parent__, prototype: ({ __noSuchMethod__: ({ __parent__: __count__ }), prop: ({ __iterator__: __count__ }) }), prop: ({ __noSuchMethod__: (\t{ prop: ({ __proto__: prototype, prop: ({ __count__: new (__proto__)() }) }) }), __iterator__: prop }) }) = (prototype .. .2) if ( '' ); (gc()); * | <x><y/></x>) {;L:if(\f[z1].prop > new  /x/ ()) { if (<x/>) ; else (<x/>);} }");
tryItOut("switch(__count__[null .@x:: R]) { default: break; return;case (function  __count__ (__count__, __parent__) { return #1#.constructor.__defineGetter__(\"__count__\", ({}).__lookupGetter__) } ): let prototype = __count__, prototype;break; case \n(~constructor): break; case 8: yield;break; case function () { return * } : if(__count__ = <><x><y/></x></>) return; else throw *;break; case (((Function).call)()): break;  } const prop;");
tryItOut("export prototype; const __count__");
tryItOut(";");
tryItOut("/*infloop*/while(prop){export __proto__;{} }");
tryItOut("switch(__count__ .@x:: <><x><y/></x></>) { default: case <><x><y/></x></>: break; (<x><y/></x>); }");
tryItOut("let __iterator__;");
tryItOut("with(__count__.__iterator__ setter= (1 for (x in []))){export *;try { var constructor, __parent__; } catch(constructor) { return <y><z/></y> = this; }  }");
tryItOut("if((__parent__.yoyo(<><x><y/></x></>))) {var __parent__ = window, prop;return <x/>; } else  if (undefined) {/*infloop*/while([[]]){throw 0.1; } }");
tryItOut("L: {gc()/*infloop*/do const __count__, __iterator__ = window; while(<x><y/></x>.(each) >> (__proto__ = this)); }");
tryItOut("([1]).call");
tryItOut("/*infloop*/while((if(<><x><y/></x></>) { if (<x>\r<y/></x>) continue ;} else let prototype))if(__proto__|=prop = @foo) { if ((({}).hasOwnProperty)(<><x><y/></x></>, __iterator__)) return window;} else {continue L; }");
tryItOut("/*infloop*/do /*infloop*/L:for( /x/g  .@x:: <><x><y/></x></>; prototype.yoyo([,])(); ([,,] !== <y><z/></y>)(*::*.unwatch(\"__parent__\"))) __iterator__ = 1.2e3; while(new __count__);");
tryItOut("/*for..in*/for(var <x/>['prototype'] in ((/a/gi)(((1 for (x in [])))([1].propertyIsEnumerable(\"__parent__\"))))){/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in window) {const __parent__;export __count__; } }");
tryItOut("case 5: break; default: prop = prototype;break; case 3 .@x:: <><x><y/></x></>.propertyIsEnumerable(\"constructor\"): with({prop: ({ set __count__(__iterator__) { /*infloop*/do /*for..in*/for(var __parent__ in 1e-81) return; while(<><x><y/></x></>\n / 5.0000000000000000000000);\t } , (-1): this.zzz.zzz.* })})if(__noSuchMethod__.__parent__ = <><x><y/></x></>) continue M; else  if (prototype = ({ __iterator__: [] })) throw <x/>;/*infloop*/while(new new Function(-0))L: { }break; case constructor: break; case ({constructor: __noSuchMethod__, prototype: ({a2:z2}) }) instanceof --__proto__ = <x><y/></x>: /*for..in*/for(prototype in <x><y/></x> %= 033) /*for..in*/for([__count__, constructor] =  in __parent__) break; ");
tryItOut("__parent__ = __parent__;");
tryItOut("\tL: with(<bbb xmlns=\"<>(this && [,])</>.((4. in (__iterator__)))\"><!--yy--></bbb>.(window instanceof <x/>))<zzz><y><z/></y>,  \"\" </zzz>");
tryItOut("/*for..in*/for([prototype, __proto__] = prop > * in (<><x><y/></x></> !== prototype)) yield;");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/for(var [__proto__, prop] = new (arguments) in (__noSuchMethod__)) {yield;prototype; }");
tryItOut("/*infloop*/M:for(({ prop: function::__parent__, __noSuchMethod__: [[], , ({ __parent__: ({ __proto__: constructor }) }), ({ __proto__: ({ __iterator__: ({ __proto__: [prop, __noSuchMethod__, __proto__] }) }) }), __iterator__] }) = (window.propertyIsEnumerable(\"constructor\")); ((false)(undefined)) < this.zzz.zzz; ([11,12,13,14].filter)) {let (prototype = <x><y/></x>) {  } }");
tryItOut("{export __parent__; }");
tryItOut("break M;");
tryItOut("/*for..in*/for(__iterator__ in  /x/g ) /*infloop*/M:while(<x/>){yield __count__; }");
tryItOut("/*for..in*/for(const constructor = ({ __proto__: [, x::constructor, __iterator__, __proto__] }) = (<><x><y/></x></> & void null) in <><x><y/></x></> === <><x><y/></x></>) /*infloop*/for(const prop; ((* for (__proto__ in *::*))); __noSuchMethod__%=[[1]]) {throw <y><z/></y>;\t<x><y/></x>; }");
tryItOut("{}yield;");
tryItOut("this.zzz.zzz;");
tryItOut("L:switch((\n__proto__|=(*::*))) { default: break; case 8: break;  }");
tryItOut("L: {true; }");
tryItOut("throw  \"\" ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var  /x/g ['__iterator__'] in __count__) export *;");
tryItOut("{throw StopIteration;/*infloop*/L:do {<x><y/></x> } while((prototype.__count__)); }");
tryItOut("M:if( /x/ ) {/*for..in*/for(var __proto__.constructor in prototype) export prop; } else  if (((__count__ = window))()) {/*for..in*/for(var [__count__, prop] = ({ __noSuchMethod__: __count__, __parent__: constructor }) = 1.3 in (true())) {return;yield;__noSuchMethod__, __iterator__; } } else {yield window; }");
tryItOut("for(let y in []);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do L:switch((<><x><y/></x></>.__lookupSetter__(\"__iterator__\"))) { default: L: {var __proto__, __parent__;yield; } } while(@foo\n);");
tryItOut("with({}) with({}) { yield <><x><y/></x></>; } ");
tryItOut("yield *\n");
tryItOut("({ __noSuchMethod__: [[]] }) = (delete this)");
tryItOut("if((Math.pow).call((-undefined.hasOwnProperty(\"__iterator__\")), (uneval((prototype.prototype = (function ([y]) { })())))) ? @foo : (prototype = this)) { if ((uneval(K))) {/*for..in*/for(const [prototype, __count__] =  /x/  in #1#) export *; } else {/*infloop*/while((new Function(<x><y/></x>)))(<x><y/></x>); }}");
tryItOut("if(Math.sin) {yield; const __proto__;; }");
tryItOut("{if(*) export __iterator__; else  if (<><x><y/></x>\f</>) __noSuchMethod__ else {<x><y/></x>; } }\f");
tryItOut("/*infloop*/for(this.__lookupGetter__(\"__noSuchMethod__\"); (1e-81.isPrototypeOf( /x/g )); undefined.hasOwnProperty(\"prop\").* <= <><{__parent__}><!--yy--></{__parent__}></>) continue M;\n{/*for..in*/for(let constructor = <x><y/></x> in <y><z/></y>) ;const __noSuchMethod__ = 4.; }\n");
tryItOut("if(constructor) { if (__noSuchMethod__(__count__) = ()) return;if(String(function(id) { return id }, this)) {{return __proto__; } } else  if ((4..__defineSetter__(\"__proto__\", Math.sin))) break ; else return <x><y/></x>;} else constructor = 033, __iterator__ = #3={a:#3#};");
tryItOut("this.zzz.zzz;");
tryItOut("if(undefined.@*) export *; else  if (<x><y/></x><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd>.(<x><y/></x>.__defineSetter__(\"prototype\", function  __parent__ (function::__count__)prop))) {const prototype = window;*::*; } else {gcbreak ; }");
tryItOut("(with([,] ? const __parent__ = *::* : ((window += *::*).unwatch(\"function::__iterator__\")))){return;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in ({a1:1}).propertyIsEnumerable(\"__count__\")) throw <><x><y/></x></>;");
tryItOut("with({prop:  /* Comment */(#3={a:#3#})() instanceof ( /x/g  = <x/>\n)}){(yield;);__noSuchMethod__; }\n");
tryItOut("/*infloop*/M:for(let __iterator__ =  /x/g ++; <x/> ^  /x/ ; ((p={}, (p.z = <><x><y/></x></>)()))) (<x><y/></x>);");
tryItOut("/*infloop*/while(this.zzz.zzz)/*for..in*/for(let __noSuchMethod__ = * in 3.141592653589793) {yield;return; }/*for..in*/for(var __proto__ in (('haha'.split)(this))){gc(){} }");
tryItOut("with(1e81.throw(({prototype: @foo,  get __iterator__(__parent__) { yield <><x><y/></x></> }  })))/*for..in*/M:for(__iterator__ in <x/>) ");
tryItOut("switch(__count__.__parent__ = false) { case 1: continue M;case 9: L:while(() && 0){*let constructor; }break;  }");
tryItOut("/*infloop*/while((@foo.isPrototypeOf(true) .@ 3/0 != __proto__))yield prototype;");
tryItOut("/*infloop*/M:while(((window)(<x/>))){M:do  while((<><x><y/></x></> *  /x/g ) && 0); }");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var set in __parent__) var prototype;");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in ((gc)(*::*.throw(<><x><y/></x></>))));");
tryItOut("do function ([y]) { }; while((*::*) && 0);");
tryItOut("/*for..in*/for(let __proto__ = (-([1,,] <=  \"\" )) in 4.) <x/>; const prop\n/*infloop*/for(let __noSuchMethod__ = false.*; this.zzz.zzz; (this += <x><y/></x>)) (false);");
tryItOut("/*infloop*/L:do {/*infloop*/L:for([1,,] instanceof *; ((function () { (1 for (x in [])) } )()); null([z1,,], 1e-81)) 1e81 } while(yield (yield ({})).eval(__noSuchMethod__ = <x><y/></x>\n));");
tryItOut("/*infloop*/for( \"\" ; <><x><y/></x></>; constructor) {yield prototype; }");
tryItOut("L: {yield;if(<y><z/></y>) let  each: 3 .. (yield <x><y/></x>/*\n*/.__proto__ = (<><x><y/></x></> ? <><x><y/></x></> : undefined)) __iterator__ = <x><y/></x>; else * }");
tryItOut("/*for..in*/L:for(const [prototype, prototype] =  /x/  in constructor = __count__.(*::*)) function(id) { return id };/*for..in*/for(const [prototype, constructor] = <y><z/></y>.isPrototypeOf(null) in <><x><y/></x></>) {}");
tryItOut("M:with({prop: 'fafafa'.replace(/a/g, {})})const __count__; const __count__;");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(__iterator__ = __parent__\n in function(id) { return id }) {{yield; }{} }");
tryItOut("/*for..in*/for(var Q in @foo) yield <><x><y/></x>\t</>;");
tryItOut("let (__count__, gc()) { yield  /x/ ; const [__iterator__, , , __noSuchMethod__, __parent__]; }");
tryItOut("/*for..in*/for(var __iterator__ = (({__count__: <x/> + <x><y/></x> })) in *::*) export *;");
tryItOut("with(constructor = false)({}).hasOwnProperty");
tryItOut("M:if((this.__defineSetter__(\"__proto__\", (1 for (x in []))).prop = #0=[<x><y/></x>])) { if (__iterator__ = [,]) throw this; else yield;}");
tryItOut("with({}) for(let y in []);");
tryItOut("/*infloop*/L\f:for(<><bbb xmlns=\r\"5.0000000000000000000000\"> </bbb></>; [11,12,13,14].map; ({__noSuchMethod__ getter: prop = window })) {/*for..in*/for(var __count__ = <x/> += (-0) in * ? [z1,,] : [,]) {export __iterator__\n } }");
tryItOut("/*for..in*/M:for(let prototype = window.__proto__ in window) /*infloop*/do {{} } while(<y><z/></y>) const (this.__defineGetter__(\"prop\", ({}).hasOwnProperty));");
tryItOut("yield\n{return; }");
tryItOut("/*infloop*/for(const __parent__; null; ) yield;");
tryItOut("/*infloop*/M:for(({ constructor: [({ constructor: ({ __iterator__: ({ __count__: prop, __parent__: __count__ }) }), prop: __parent__ }), ({ __proto__: [__noSuchMethod__, , , __count__]<ccc:ddd> </ccc:ddd>, prototype: constructor }), __proto__], prop: [] }) = (__count__ for each (__iterator__ in <x><y/></x>)); ('fafafa'.replace(/a/g, Math.sin)); (+[15,16,17,18].map((*);, <>/*\n*/<x><y/></x></>))) /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in __proto__) {continue ;__iterator__ = __iterator__, __noSuchMethod__; }");
tryItOut("do yield; while(('fafafa'.replace(/a/g, (1 for (x in [])))) && 0);");
tryItOut("if(<><x><y/></x></>) yield <y><z/></y>;");
tryItOut("throw __parent__;");
tryItOut("if(<x/>) {; } else  if ((-1)) 1e-81; else {prototype, prop;; }\n/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in  '' ) {; }");
tryItOut("M:if(true__noSuchMethod__ __count__  += *[this.zzz.zzz]) {; } else  if (__proto__) ;");
tryItOut("if(1.2e3) {(undefined); } else  if (<><x><y/></x></>)  else {let prop, constructor = <x/>; }");
tryItOut("if(null.*) {break ;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in eval(\"yield;\", {}) *= function ([y]) { } -= __parent__) {export constructor; }");
tryItOut("L: {/*\n*/ }");
tryItOut("L:do throw StopIteration; while((export *) && 0);");
tryItOut("/*infloop*/for(let ({ prop: __parent__, __count__: [({ prop: constructor, __parent__: __parent__ }), , ] }) = #0=(this.__defineGetter__(\"prop\", __parent__)); this.__defineSetter__(\"prototype\", [1,2,3,4].slice); <><x><y/></x><\f/>()()) {yield;while((*) && 0){prototypeexport __parent__; } }");
tryItOut("if(prototype.prototype =  /x/g ) return;");
tryItOut("return;");
tryItOut("if(<bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb>) { if (({ __noSuchMethod__: __count__, prototype: __proto__ }) = (<><x><y/></x></>)[ /x/g ]) yield <y><z/></y>; else {return <x><y/></x>; }}");
tryItOut("/*infloop*/L:for(const prop; new (this)(__noSuchMethod__); -3/0.throw( /x/ )) {}");
tryItOut("return eval(\"*.unwatch(\\\"__count__\\\")\", (/*\n*/ /x/g  <= prop));");
tryItOut(";");
tryItOut("for(let y in []);");
tryItOut("with({}) return [let (__proto__, __proto__ = __noSuchMethod__) 1.3].throw(#2=[window]);");
tryItOut("let (constructor = <x><y/></x>) { yield <x><y/></x>; }");
tryItOut("/*infloop*/L:for(const ({ prop: __noSuchMethod__, constructor: function::prototype }) = __proto__.@*; (p={}, (p.z = [,])()); constructor =  /x/ .valueOf(\"number\")) {return; }");
tryItOut("let (__parent__) { yield }");
tryItOut("L: {continue M; }");
tryItOut("let (__noSuchMethod__) { (3/0); }");
tryItOut("if([]) {{} } else  if (<><x><y/></x></>) yield; else {var __iterator__, __noSuchMethod__;export *; }\n");
tryItOut("let(__count__ = (this.eval(@foo)), prototype =  '' ) ((function(){\tconstructor = __proto__;})());");
tryItOut("/*infloop*/while(prototype+=( /= @foo .@ prototype.__iterator__ = *)){const __count__, constructor =  /x/g ; }");
tryItOut("export x::__count__;\ncontinue M;\n");
tryItOut("{} const \t__noSuchMethod__;");
tryItOut("let (__proto__ = *, __proto__) { ; }");
