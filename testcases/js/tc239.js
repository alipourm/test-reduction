tryItOut("switch(__parent__ = *) { case Error(<><x><y/></x></>, <x><y/></x>): case (<x><y/></x>.hasOwnProperty(\"prop\"))[__noSuchMethod__.__count__ setter= (({}).__lookupGetter__).call]: return <x><y/></\tx>;default: /*infloop*/L:for(<x/>; this; (-1)) {export __count__; }case window.yoyo(<x/>): yield <y><z/></y>;break;  }");
tryItOut("{/*infloop*/L:for(for(let y in []); = let (prop =  \"\" , __parent__ = #1#) (({a1:1}))(<><x><y/></x></>,  '' ); __count__.constructor = (<><x><y/></x></> ^= this); ([, ] = [])) export __parent__;export *; }");
tryItOut("let (__parent__ = yield <><x><y/></x></>, [[, , ({ __count__: ({ __proto__: __iterator__, constructor: __count__ }) })], ] = new __proto__ = __parent__) { L: {{}let __parent__ = <x><y/></x>\n } }");
tryItOut("{throw  /x/ ;yield; }");
tryItOut("/*infloop*/while([__iterator__ = <x><y/></x> if (<x><y/></x>)]){; }");
tryItOut("if(__count__ ? 1.3 :  \"\"  for each (__count__ in undefined) for each (__noSuchMethod__ in  '' ){__iterator__, __noSuchMethod__; }) {gc() } else  if (this) {{}{with( \"\" ){; }let __noSuchMethod__ = 3.141592653589793, constructor = <><x><y/></x></>; } }");
tryItOut("for(let y in [5,6,7,8]) try { return (new <><x><y/></x></\t>); } catch(__count__) { with({}) { yield ('fafafa'.replace(/a/g, [1,2,3,4].map)); }  } finally { throw prototype; } ");
tryItOut("");
tryItOut("/*infloop*/for((new Function)(<x><y/></x>); this.zzz.zzz; <x><y/></x> /=  /x/ ) return;");
tryItOut("/*infloop*/while(<x><y/></x>.__proto__)var prototype = __proto__;");
tryItOut("L: {while((@foo) && 0)let constructor, __noSuchMethod__; }");
tryItOut("/*infloop*/for(function::prototype = *::*; <x><y/></x>.( /x/g ); (this / <><x><y/></x></>)) {constructor, __proto__; }");
tryItOut("do while(((!<x><y/></x>--)) && 0)var __iterator__; while((__parent__.(undefined)) && 0);");
tryItOut("L:do {(undefined);yield  \"\" ; } while((prop .@x:: prop+=window) && 0);");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in 3.141592653589793) {continue M; }");
tryItOut("/*infloop*/L:do export *\t; while(__parent__.(__parent__));");
tryItOut("let (({ __noSuchMethod__: ({ __parent__: [constructor, ({ __proto__: constructor, __noSuchMethod__: __noSuchMethod__ }), [, __iterator__], prototype, ], constructor: ({ prototype: prototype, __count__: ({ prototype: __count__, constructor: constructor }) }) }) }), __count__) { /*for..in*/for(const prototype in ((function(q) { return q; })(<><xxx>{__noSuchMethod__}</xxx></>)))var prototype = prototype, __count__ = constructor; }");
tryItOut("with(undefined){yield 0/0; }");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("/*infloop*/L:for(__iterator__; ((new Function(\"yield  '' ;\"))).eval((prop|= '' )); yield this.__defineGetter__(\"prop\", (1 for (x in [])))) {;let __iterator__, __iterator__ = <y><z/></y>; }");
tryItOut("if(true) {let prop; } else {prototype =  /x/ ;throw *::*; } get __proto__(constructor, constructor)__iterator__");
tryItOut("/*infloop*/for(var prop; true; <x><y/></x>.hasOwnProperty(\"__count__\")) {gc()function  prop (prop, __proto__)({a2:z2}) }");
tryItOut("M:if(( '' .isPrototypeOf(window)).eval([1,,] ?  ''  : (function ([y]) { })().throw(this.__lookupSetter__(\"__count__\")))) { if (<xxx {__count__}={(prop == __iterator__.constructor)} />) /*for..in*/for([__proto__, constructor] = <><x><y/></x></> in  /x/g ) {return;return 3/0; }} else {/*for..in*/for(var <ccc:ddd>yyy</ccc:ddd> in __iterator__) export *; }");
tryItOut("switch(this.__defineGetter__(\"__parent__\", (null).__defineSetter__)) { case 7:  }");
tryItOut("/*for..in*/for(prototype.__count__ in ((function  __count__ (prototype, prototype) { __iterator__ = 1e-81; } )(<x><y/></x> > prop))){yield; }");
tryItOut("L: {break ; }");
tryItOut("/*infloop*/M:for(this.__defineGetter__(\"__noSuchMethod__\", new Function).propertyIsEnumerable(\"<!--yy-->\") %= let (__proto__, constructor) false.__defineSetter__(\"__iterator__\", <x><y/></x>).__defineSetter__(\"__iterator__\", ([@foo])); (__parent__.__count__ = ({ __proto__: __noSuchMethod__, function::constructor: [] }) = ({prop: (false ? __parent__ : false), __proto__: [<x><y/></x>].map([1,2,3,4].map) })); undefined .@x:: <><x><y/></x></>) {/*for..in*/for(var __proto__ = prototype = window in (*::*.watch(\"__iterator__\", false)).eval( /x/ .__defineGetter__(\"__iterator__\", false))) {(__count__);\nreturn;\n } }");
tryItOut("/*for..in*/for((__iterator__) in ((Math.sin)(Function( \"\" )))){typeof <><x><y/></x></>;(3.141592653589793.isPrototypeOf(this)); }");
tryItOut("if(( /x/g )()) { if ( /x/ .propertyIsEnumerable(\"__parent__\")) {0; }} else export *;");
tryItOut("L:do L:if(get) {.2;export *; } else {continue ; } while(((({__noSuchMethod__: continue ;}))) && 0);");
tryItOut("let(__count__ = ++<x><y/></x>.yoyo(prop)) { for(let y in []);");
tryItOut("continue ; const __parent__;");
tryItOut("{L:switch( /x/g ) { default: break M; } }");
tryItOut("L: /*for..in*/for(const __parent__ in ((function(y) { yield y; ; yield y; })([,,].unwatch(\"constructor\")))){{}/*infloop*/for(let __noSuchMethod__ = <y><z/></y>; *; window) (-0); }");
tryItOut("true;");
tryItOut("for(let y in []);");
tryItOut("{yield;return  /x/ ; }");
tryItOut("const let = <x/>, __iterator__ = @foo;");
tryItOut("L:if(null++) -");
tryItOut("x::__noSuchMethod__ = __parent__;");
tryItOut("/*for..in*/for([constructor, prototype] = yield new Exception() in <xxx>{__iterator__}</xxx>) {;\ngc()\nexport constructor; }");
tryItOut("/*infloop*/do {{}(<x/>); } while([(null ? true : ({})) for (__iterator__ in __noSuchMethod__) for (__parent__ in @foo)]);");
tryItOut(";");
tryItOut("if(prototype.__count__) { if ((<x><y/></x>.(<x/>))) with({}) export __parent__; else while(((({prop: <x/> }))) && 0){return <y><z/></y>; }}");
tryItOut("M:do {throw null;if(@foo % <x/>) new Function else  if (<x><y/>/*\n*/</x>++) {(*);prototype = constructor; } else yield false; } while(([1.3.*]) && 0);");
tryItOut("L:if(this ^ true) if(<y><z/></y>) {export __parent__;return; } else  if ((this - <x/>)) {(<><x><y/></x></>); } else  if (delete [(getter = __noSuchMethod__)].some(this.zzz.zzz)) {if(<><x><y/></x></>) { if (<x/>) {const __noSuchMethod__ = undefined; }\t}\f else {;export *; } } else {this.zzz.zzz;with(this ? constructor : <x><y/></x>)continue ; }");
tryItOut("");
tryItOut(" { return  /x/  } ");
tryItOut("{let (constructor =  '' .yoyo(<x/>)) { if(({})) (__noSuchMethod__); else  if ( /x/ ) undefined; } }");
tryItOut("/*infloop*/while(<y><z/></y>){yield this\nvar prototype = window; }");
tryItOut("/*for..in*/for(const __iterator__ in ((function (prop, prototype) { return undefined } )(<x/>)))break L;");
tryItOut("([[1]])\n");
tryItOut("{{var __iterator__ = ({a2:z2}), constructor = *;<y><z/></y>; }return; }");
tryItOut("if((let (__proto__ = window)  /x/g )) {if(__proto__) {var C; = constructor; } else {#1=[#1#]; } } else  if (this.zzz.zzz) {__noSuchMethod__;/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in *::*) export __noSuchMethod__;yield undefined; }");
tryItOut("export *;");
tryItOut("return ( ''  :: [[1]] ::  /* Comment */false);");
tryItOut("{const constructor = prototype; }\f");
tryItOut("with\f(prop % (<x/>.eval(@foo))\n.watch(\"__count__\", ([#1=({function::prototype: 1.2e3})]\n).watch))with({__count__: prop.([,].*)}){}");
tryItOut("with({prototype: window})let __iterator__, __count__ = .2;");
tryItOut("let (yield = (<><x><y/>x></>)()) { ({}).__lookupGetter__ }");
tryItOut("const constructor = <><x><y/></x></>;");
tryItOut("/*infloop*/M:for(let ({ prototype: __iterator__ }) = (((gc).apply)()); (({}).hasOwnProperty).apply(); (<x><y/></x>).watch) {var __parent__, __iterator__ = this;<><x><y/\f></x></>; }\n");
tryItOut("each = __parent__;");
tryItOut("with({__noSuchMethod__: <><x><y/></x></> &= #1=[#1#]})M:switch(.2) { default: break; case  '' : break;  }");
tryItOut("if(<><xxx>{__noSuchMethod__}</xxx></>) {var __parent__ = [[]]; } else yield constructor;");
tryItOut("export *");
tryItOut("try { (new Function(\";\")) } finally {  } ");
tryItOut("return <x><y/></x>;");
tryItOut("/*infloop*/M:for(__parent__; ((gc).call( /x/g , @foo.prop)); ({__count__ getter: case  '' .__iterator__: const constructor = @foo;case 7: {}break; break;  })) L:do {window;return @foo; } while((((function ([y]) { }++).valueOf(\"number\"))) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut(" { yield * } ");
tryItOut("do {new Function{;<><x><y/></x></>; } } while((\n((yield @foo)).hasOwnProperty(\"prototype\")) && 0);");
tryItOut("let(({ __iterator__: prototype, __parent__: constructor }), prototype = 1e-81) ((function(){for(let y in [5,6,7,8]) {}})());");
tryItOut("/*infloop*/while(constructor, (new (p={}, (p.z = [,,z1])())(*::*, null)++)){/*infloop*/L:for(const __noSuchMethod__;  \"\" ; <x/>) return <><x><y/></x></>;/*infloop*/\tL:while((__proto__ = __proto__.__lookupGetter__(\"constructor\")))if(([,].eval(3/0))) {return true; } else  if (__parent__ = __count__) __iterator__ = constructor; }");
tryItOut("{export *; } const function::__proto__;");
tryItOut("let (prop) { /*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <x><y/></x>) {\tcontinue M;; } }");
tryItOut("if(<x><y/></x>--) { if (((p={}, (p.z = @foo)())).__noSuchMethod__) (this);} else {export *;continue ; }\n");
tryItOut("let (__proto__ = ((prototype default: break; case this: break;  __proto__).watch(\"__parent__\", [1,2,3,4].slice))) { return; }");
tryItOut("export *;");
tryItOut("/*infloop*/L:do if( /* Comment */true) if(__proto__) {return; } else  if ([<x><y/></x>.prop = 1e-81].filter(undefined)) {this; } else window while([15,16,17,18].sort(new Function, \f(<><x><y/></x></>)[*].isPrototypeOf(this instanceof true)));");
tryItOut("/*for..in*/for(let (__iterator__) in this.__defineGetter__(\"__count__\", <><x><y/></x/*\n*/></>)) {if((this.__defineGetter__(\"__iterator__\",  /x/g )[false]) ? __count__. \"\"  setter= function  prop () { export *; }  === 3.141592653589793 >>=  /x/ ((uneval( '' .propertyIsEnumerable(\"__noSuchMethod__\")))) : ((new (<x><y/></\nx>)(1e+81)) ^ (uneval(this.__lookupGetter__(\"prop\"))))) throw 3/0; else  if (<{constructor}><ccc:ddd><!--yy--></ccc:ddd></{constructor}>) return; }");
tryItOut("return this.__defineSetter__(\"__proto__\", ({a2:z2}));");
tryItOut("if(__parent__ = prototype.__lookupSetter__(\"prototype\")) {var prototype = true;export *; } else  if ((yield  /x/g )) {(<x><y/></x>);gc() } else ");
tryItOut("if(this.eval(__count__)) {throw (({})(undefined,  /x/g ));with{__iterator__ prop : <><x><y/></x></>}) ((@foo(<x><y/></x>)));{const __noSuchMethod__, __parent__;'haha'.split } } else /a/gi");
tryItOut("{}\n;");
tryItOut("{throw *::*; }");
tryItOut("/*for..in*/for(let constructor = prototype = __iterator__ in ((({ __noSuchMethod__: prototype, prototype: __noSuchMethod__ }) = prototype = true) @ undefined %= 033)) {var __iterator__ = <x><y/></x>, __noSuchMethod__; }");
tryItOut("while((((@foo.__proto__ = (0[0x99])).watch(\"__proto__\", (__iterator__ = new (eval)(.2)).watch))) && 0)L: yield arguments;/*for..in*/for(__proto__ = __parent__.(<><x><y/></x></>) in <y><z/></y>) {([,,]); }");
tryItOut("/*for..in*/for(var [__parent__, __count__] = <x><y/></x> in __iterator__) ( /x/g );");
tryItOut("");
tryItOut("/*infloop*/for((#0=({__parent__: null})); ((window)(null, @foo))[<><x><y/></x></>]; *::*) export __iterator__;");
tryItOut("/*infloop*/L:do /*for..in*/for((prop) in ((Function)((<x><y/></x><x><y/></x>yyy .@x:: false.watch(\"constructor\", gc)\f))))var __proto__, __proto__; while(<y><z/></y>.hasOwnProperty(\"__parent__\").propertyIsEnumerable(\"__parent__\"));");
tryItOut("{throw -3/0; }");
tryItOut("L:while((each) && 0){const __noSuchMethod__; }");
tryItOut("/*infloop*/L:while(<><x><y></></>)(window);");
tryItOut("let (prop) { yield; }");
tryItOut("with({__parent__: (([[]])(__noSuchMethod__)[(({}).hasOwnProperty).call(window, this, 0)])}){return __parent__;continue M;\nthis\n }");
tryItOut("{/*for..in*/L:for(let __noSuchMethod__ = <><x><y/></x></> in __parent__) prototype }");
tryItOut("/*infloop*/for(arguments; this.propertyIsEnumerable(\"__iterator__\");  '' .__lookupSetter__(\"prototype\")) /*infloop*/for(const __iterator__ = window;  \"\" ; <x><y/></x>) {yield undefined; }");
tryItOut("with({}) with({}) return;");
tryItOut("/*infloop*/for(const default: break; try { __count__ = __iterator__; } catch(__noSuchMethod__ if (function(){let([prototype, ] = new RangeError(<y><z/></y>)) ((function(){return *::*;})());})()) { this.zzz.zzz; } catch(function::__parent__ if (function(){yield (true.__defineGetter__(\"constructor\", function(q) { return q; }));})()) { try { for(let y in []); } finally { throw StopIteration; }  } catch(__parent__ if (function(){try { const constructor = #1#, __count__ = *::*; } finally { ; } })()) { throw StopIteration; } catch(__iterator__ if arguments(<x><y/></x>)) { throw __parent__; } catch(prototype) { throw StopIteration; } finally { throw __iterator__; } break; case (++[1,2,3,4].slice): break; export __count__;break; case [this.zzz.zzz].some(gc): if(//h\n( /* Comment */<x><y/></x>) >= \n[,]) { if (__count__.__defineGetter__(\"prop\", function  prototype (__proto__, __parent__) { gc() } ) <<= this) {return <><x><y/></x></>; } else ;}break; case (<x><y/></x> %= new (<x/>)( /x/g , @foo)): break; case *::*.watch(\"__parent__\", gc) ? -1e+81 : typeof function ([y]) { }: /*for..in*/M:for(const __iterator__ = <y><z/></y> in *::*) __noSuchMethod__break; <><x><y/></x></>;break; case ((uneval(*)).valueOf(\"number\")): break; case let (__noSuchMethod__) *.isPrototypeOf((<x><y/></x>++)): break; case ((#3={a:#3#})( \"\" )): throw <><x><y/></x></>;break; ; (p={}, (p.z = yield [false].sort(this))()).__lookupGetter__(\"__proto__\"); <x><y/></x>.(<y><z/></y>).hasOwnProperty(\"constructor\")[ \"\" ]) /*for..in*/for(var [__count__, __parent__] = prototype =  /x/g  %  for each (__noSuchMethod__ in true) in <><bbb xmlns=\"<x><y/></x>\"><x><y/></x>yyy</bbb></>) {return [1,,]; }");
tryItOut("let __count__, __count__;");
tryItOut("M:if(let (__proto__ = __parent__ = this.@foo)  /x/g .prototype) { if (__noSuchMethod__ = __proto__) {return;let __parent__; } else ({}).__lookupGetter__}");
tryItOut("let (constructor) { break ; }");
tryItOut("M:do  '' ; while((*::*) && 0);");
tryItOut("return <x><y/></x>;\n/*infloop*/for(<zzz>undefined</zzz>.(Number(<y><z/></y>, [,,z1])); __parent__.yoyo(1e-81); (({}).hasOwnProperty).call\n(Object(*, null), prop = constructor))  { /*infloop*/for(__count__ for (prototype in *::*); <x><y/></x> ? 0x99 : #1#; ([15,16,17,18].map((__proto__).watch, 0/0))) yield; } \n");
tryItOut("{__iterator__ }");
tryItOut("/*infloop*/for(var __proto__;  /x/ ; (__noSuchMethod__) % (prototype.prop setter= <x><y/></x>)) /*for..in*/M:for(const prototype = * =  in  /x/ ) {yield;<x><y/></x>; }");
tryItOut("if(__parent__.constructor) return;const __count__ = @foo, __parent__;");
tryItOut("L: {export __iterator__\n }");
tryItOut("do gc() while((@foo) && 0);");
tryItOut("do {__noSuchMethod__ = __proto__; } while(((eval(\"if([[1]]) yield .2; else  if (__parent__.(true)) {gc()const prop = *::*; } else {return;let constructor; }\", ((p={}, (p.z = [15,16,17,18].filter(new ((window)[<></>])(this\f.__defineSetter__(\"__proto__\", /a/gi)), function::__proto__-=(-1)))()))))) && 0);");
tryItOut("if((-1.hasOwnProperty(\"prop\")).@*) {with(-1)window{} } else {if(new (eval)( /x/g , *::*)) { if (({ get __noSuchMethod__() { return  /x/  } , __proto__: <x><y/></x> })) yield;} else {gc()export __noSuchMethod__; } }");
tryItOut("/*for..in*/for(let  in (\f[<x/> if (#3={a:#3#})].valueOf(\"number\"))) {throw null; }");
tryItOut("/*for..in*/L:for(var __parent__ in false) {yield; }");
tryItOut("/*infloop*/for(\f<><x><y/></x></> ? <x/> : <x><y/></x>; this.__defineGetter__(\"prototype\", Function); \fthis.__defineGetter__(\"__count__\", function  prototype (__parent__) { yield [z1] } )) throw  /x/ ;");
tryItOut("with('fafafa'.replace(/a/g, this))yield true;");
tryItOut("continue M;");
tryItOut("if(__parent__.__noSuchMethod__ = ((#1=[#1#])())) { if ((<><x><y/></x></> - function ([y]) { })) <!--yy--> else {export *\n }}");
tryItOut("/*for..in*/for(__iterator__ in ((eval)(<y><z/></y> - window)))return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in new new Function(this,  \"\" )) {export *; }");
tryItOut("{if( /x/g ) { if (constructor.isPrototypeOf(*)) {throw <><x><y/></x></>;var prop = arguments, prototype; }} else var prototype = <x/>; }");
tryItOut("M:with((let (prop, __parent__ = window) <x><y/></x>.eval(<x><y/></x>)))return; const prototype;");
tryItOut("yield ([11,12,13,14].sort);");
tryItOut("L:if(((uneval(<><x><y/></x>\f</>)))) {throw @foo; } else  if (function::__count__ = prop) let __parent__;");
tryItOut("__parent__ = __proto__;");
tryItOut("/*for..in*/M:for(__proto__ = <x><y/></x> ::  \"\"  in <x><y/></x>) {gc }");
tryItOut("/*for..in*/L:for(prototype in ((function  prototype (({ Function: [, , ({ __noSuchMethod__: __noSuchMethod__.__noSuchMethod__, constructor: __parent__ }), ], __parent__: ({ __count__: __proto__, prop: [({ prototype: ({ x::__proto__: __parent__, __proto__: __proto__ }) }), , ] }) }), function::__parent__)(yield <><x><y/></x></>).unwatch(\"prop\"))( \"\" .__count__)))continue M;");
tryItOut("break M;");
tryItOut("with({}) throw StopIteration;");
tryItOut("if(#2=[ /x/g  in *::*]) __parent__, __proto__ else if(((__count__)(window))) { if () let __count__ =  \"\" , prop = prototype;} else {{} }");
tryItOut("do {continue ;continue ; } while((__parent__ /= this) && 0);");
tryItOut("/*infloop*/L:for(<><x><y/></x></>.throw(null).@*; true\n; ) {return;yield <x><y/></x>; }");
tryItOut("with({prop: <{prototype}//h\n><ccc:ddd><!--yy--></ccc:ddd></{prototype}>}){export constructor;while(( '' ) && 0)let __noSuchMethod__; }");
tryItOut("continue M;\n/*infloop*/for(let [({ prototype: __proto__, prop: __count__ }), __count__] = <bbb xmlns=\"window\"><x><y/></x><!--yy--></bbb>\f; @foo *= try {  } catch(prototype) { continue ; } ; <x><y/></x>.watch(\"__noSuchMethod__\", [1]) :: __proto__-=prop) gc()\n");
tryItOut("let (__iterator__ = @foo, __iterator__ = window) { const constructor =  \"\" ; }");
tryItOut("__parent__(#1#) = x::prototype;");
tryItOut("{let __parent__;export *; }");
tryItOut("/*for..in*/for([__count__, __count__] = yield in (window *= true)(false)) {{break ; }/*infloop*/M:for((@foo.__defineSetter__(\"__parent__\", null)); undefined + <x><y/></x>; 1e4.__defineSetter__(\"__noSuchMethod__\", (new Function(\"(<y><z/></y>);\")))) new Function }");
tryItOut("/*for..in*/M:for(constructor in ((function (__noSuchMethod__)yield __noSuchMethod__ &= window)((constructor |= (this.__defineSetter__(\"__proto__\", (<y><z/></y>).watch))))))if((this[*::*])) throw undefined; else yield 1e81;");
tryItOut("let (__parent__ = this.hasOwnProperty(\"__iterator__\")) { prototype, __count__; }");
tryItOut("with({}) for(let y in []);");
tryItOut("M:switch((prototype = (.2)).hasOwnProperty(\"__proto__\").__parent__ = ([15,16,17,18].map(function(q) { return q; }, <x><y/><\r/x\t>.__lookupSetter__(\"__iterator__\")))) { case 0: break;  }");
tryItOut("/*infloop*/M:for((this.__defineGetter__(\"constructor\", <y><z/></y>))[*::*\n.watch(\"__iterator__\", (<x/>).watch)]; ((true--) @ ((yield #3={a:#3#}))) >>>=*; ({ __noSuchMethod__: ({ __proto__: __proto__, __proto__: __proto__ }), prop: [constructor, , ] }) = this) {return null;const constructor, __proto__; }");
tryItOut("if(yield <x/>) if(<x><y/></x>) {return; }");
tryItOut("return <x><y/></x>");
tryItOut("with(<><x><y/></x></>)return;");
tryItOut("false\nreturn 033;");
tryItOut("yield; const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in (\n*::*.watch(\"__parent__\", gc))) {yield\n }");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/for(let prototype in (*::* for each (__noSuchMethod__ in <x><y/></x>).valueOf(\"number\")).__proto__) var prototype;");
tryItOut("return *;");
tryItOut("/*infloop*/do {do return <x/>; while((<x><y/></x>) && 0); const constructor; } while(+('fafafa'.replace(/a/g, (1 for (x in [])))));");
tryItOut("do window while((-this) && 0);");
tryItOut("return false");
tryItOut("export *\n[, , ]");
tryItOut("export __proto__;");
tryItOut("let (__noSuchMethod__, ({ arguments: [, , constructor] })) { if((new <x><y/></x>(yield  \"\" ;)(<><x><y/></x></>.__lookupGetter__(\"prop\")).__defineGetter__(\"__noSuchMethod__\", window))) {} else {'haha'.split } }");
tryItOut("while((yield <x/>) && 0)/*infloop*/L:do  while(({__noSuchMethod__: window}));");
tryItOut("if(({__proto__:  /x/g .valueOf(\"number\") })) {let __parent__, __count__;/*infloop*/for(__iterator__; <><x><y/></x></>; __noSuchMethod__) \rtry { ; } finally { yield; }  }");
tryItOut("/*for..in*/for(var prototype = __proto__ in 0/0) yield;");
tryItOut("with({}) { __count__ = constructor; } ");
tryItOut("{export *;return @foo; }");
tryItOut("/*infloop*/M:for(function  __iterator__ (\f) {  } (new ((new Function).call)()); constructor.__parent__ = (window | <x/>)\n; [__count__.__parent__ = * for each (prototype in (1 for (x in []))(-3/0)) for (__iterator__ in (function ([y]) { })()) for each (constructor in <x><y/></\nx>) for (__proto__ in 0x99)]) {/*for..in*/for(let __count__ = <><bbb xmlns=\"<x><y/></x>\">yyy</bbb></> in false) {with(3/0)<y><z/></y>; } }");
tryItOut("if(({prototype: this})) gc()");
tryItOut("/*infloop*/for(new *::*(); yield (({__iterator__: window\n})); this.zzz.zzz) {let prop, constructor; }");
tryItOut("/*for..in*/for(var [, __count__, , __parent__] = #3={a:#3#} in ((([1,2,3,4].slice).call)((false['__proto__'] = ({__count__: window, prop getter: __parent__ }).prototype))))throw StopIteration;");
tryItOut("__count__ = <x><y/></x>, prop");
tryItOut("/*for..in*/for(const __parent__ = case yield (null).watch: default: break; case 4: export *;break; gc()break;  in #3={a:#3#}) {yield; }");
tryItOut("yield\n");
tryItOut("throw StopIteration;");
tryItOut("do let prop = <><x><y/></x></>; while(((({ __parent__: [, , , __proto__] }) = (__noSuchMethod__ = ([ /x/g ])))) && 0)\n");
tryItOut("let (prop, constructor = <x><y/></x>) { (<x><y/></x>); }");
tryItOut("(0x99)");
tryItOut("continue \n(1 for (x in []))");
tryItOut("L: {continue ;(@foo); }");
tryItOut("/*infloop*/M:for(const __noSuchMethod__;  /x/  >> __noSuchMethod__; (({__noSuchMethod__ setter: function  __iterator__ (__noSuchMethod__, __parent__) { yield <><x><y/></x></> }  }))) constructor = window;");
tryItOut("if(([true if (this)]\n)) { if (Function) L: {yield; }} else ((uneval(<><x><y/></x></>)));");
tryItOut("prop = constructor;");
tryItOut("if([z1].hasOwnProperty(\"x::__parent__\")) yield; else  if (new (/a/gi)(<y><z/></y>, null)) constructor else {const prototype =  /x/g ; }\nlet __parent__;\n");
tryItOut("L:with(<y><z/></y>)var constructor =  /x/ , function::__count__\t;");
tryItOut("/*infloop*/for((()--); (function(y) { yield y; yield null;; yield y; }).apply(__parent__.(-<x><y/></x>)); (__count__ && 5.0000000000000000000000())) throw this\n");
tryItOut("return;");
tryItOut("while((__parent__ = []) && 0)break M;");
tryItOut("L:if(({ __noSuchMethod__: constructor }) = __proto__.__count__ getter= [1,2,3,4].map) continue M; else  if (window.__lookupGetter__(\"__parent__\")) ; else with(<><x><y/></x></>)undefined;");
tryItOut("with({}) { (undefined)((window for (constructor in *))) = __parent__; } ");
tryItOut("switch(.isPrototypeOf((__noSuchMethod__ = null !== window))) { case 1: (__iterator__);break; break; case (([<><x><y/></x></>].map(gc))( /x/g , false)):  }");
tryItOut("<>(-3/0 >= <><x><y/></x></>)</>");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("/*infloop*/L:while((__parent__|=yield -0)){if(<x/>--) { if (this.__lookupSetter__(\"prop\")) const __parent__, constructor = [];} else yield  \"\" ;return; }");
tryItOut("/*for..in*/M:for(const prop in (this.__defineSetter__(\"prototype\", ({}).__lookupGetter__))) {export constructor; }");
tryItOut("__parent__ = __noSuchMethod__\nreturn delete @foo;");
tryItOut("with({}) constructor;");
tryItOut("let (__parent__) { gc() }");
tryItOut("var __parent__ = [1,2,3,4].map; const prototype;");
tryItOut("/*infloop*/do let (({ __proto__: __noSuchMethod__, __iterator__: __proto__ }) = ) { case false: case  \"\" : ; } while(prototype =  /x/ );");
tryItOut("const __count__");
tryItOut("/*infloop*/for(; (p={}, (p.z = (\f<x><y/></x>)(*::*,  '' ))()) *= (#0=({__proto__: <y><z/></y>})); \nnew __noSuchMethod__( /x/ , function(y) { yield y; {}; yield y; })((1e+81.constructor = <x/>))) export __count__;");
