
tryItOut("if((__proto__.__count__)) { if (({__noSuchMethod__: __count__.prop})) {return window\n; } else {if([,,z1]) {continue ; } else  if (<><x><y/></x></>) __proto__; }}");
tryItOut("let (__iterator__, __parent__) { let (__count__ = this) { export *; } }");
tryItOut("M:with(<><x><y/></x></> instanceof window)let prototype;");
tryItOut("L:if(this.__defineSetter__(\"__count__\", new Function)) M:if((<><x><y/></x></> += <><x><y/>/*\n*/</x></>)) {break L;(<x><y/></x>)\n } else  if (<x/>[<y><z/></y>]) ; else ;");
tryItOut("M:switch(((__proto__.constructor).isPrototypeOf((yield \n( \"\"  :: <x><y/></x>))))) { case 7: M:if(this.zzz.zzz) { if (0x99) L: {__iterator__ = __parent__;continue L; } else /*for..in*/for([__noSuchMethod__, prop] = #1# in <><x><y/></x></>) {function(y) { yield y; gc(); yield y; } }}default: break; case 3.141592653589793.__defineSetter__(\"__proto__\", (<y><z/></y>).call): /*for..in*/for(const __proto__ = <x/> in <y><z/></y>) let prop = window, prototype = <><x><y/>\f</x></>;break; break; break;  }");
tryItOut("/*infloop*/M:while(true){const __parent__, constructor = true; }");
tryItOut("/*for..in*/for(__parent__ = setter if ( /x/ ).prop in prop) {;<{constructor}>yyy</{constructor}>yyy }");
tryItOut("return;");
tryItOut("if(eval(\"let __iterator__ =  /x/g , __iterator__ = 1e81\", ('fafafa'.replace(/a/g, eval).yoyo('fafafa'.replace(/a/g, ({}).__lookupGetter__))))) { if ( /x/g  >>>=<x/> - this) /*for..in*/for(const __iterator__ = [__iterator__].map((function(y) { yield y; {}; yield y; }).apply) in  \"\" ) yield; const constructor;} else yield @foo;");
tryItOut("while((<x><y/></x>.prop) && 0)export __noSuchMethod__;");
tryItOut("M:while(([15,16,17,18].map('haha'.split, 0/0)) && 0){var __iterator__ = <><x><y/></x></>; }");
tryItOut("");
tryItOut("let (__count__) { L:if(__noSuchMethod__, __parent__.@foo) let __parent__, __count__; else  if (((uneval(__proto__ = [,])).unwatch(\"prototype\"))) {} }/*for..in*/L:for(const __noSuchMethod__ = /*\n*/ \"\"  &= <x><y/></x> = __proto__ in (0 .@x:: (function ([y]) { })() ? <x><y/></x> : \t((<x><y/></x>)[ /x/g ]))) (true);\nbreak ;\n");
tryItOut("L: {if((this.__defineSetter__(\"__count__\", *))) {return [[1]];/*for..in*/for(var __iterator__ in (([1,2,3,4].map)(true))); }let __proto__ = <x><y/></x>, __proto__ = #3={a:#3#}; }");
tryItOut("if([z1,,]) { if (<x><y/></x>) {return *; }} else break M;");
tryItOut("{__noSuchMethod__; }");
tryItOut("L: throw <x><y/></x>;");
tryItOut("with({constructor: <> </>[<xxx {__noSuchMethod__}={*::*} />.(__iterator__ = undefined)]})M:with(.2){return;yield 3/0; }");
tryItOut("yield this.__defineGetter__(\"__iterator__\", (__parent__).call).__defineSetter__(\"__parent__\", gc);");
tryItOut("switch((('fafafa'.replace(/a/g, gc))())) { default: {this }throw 1.2e3;case this.zzz.zzz: throw this;break; case prop = @foo:  }");
tryItOut("return prop;");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("if( \"\" ) yield window;");
tryItOut("/*infloop*/L:while( /x/g ){@foo; }");
tryItOut("const __count__; const prototype");
tryItOut("/*infloop*/while([15,16,17,18].map(function(q) { return q; }, #1=\t({({ __iterator__: __iterator__ }):  /x/ (window)}))){export __count__\nthrow <x/>; }");
tryItOut("if(this) {__count__;(<><x><y/></x></>); } else  if ([[]]) ");
tryItOut("if(__noSuchMethod__\f) {continue ;__noSuchMethod__ = @foo; } else  if (-1 ? ((*.__iterator__) = <y><z/></y>.unwatch(\"get\").propertyIsEnumerable(\"prop\")++) : (uneval((1e-81 + \f<x><y/></x>.__defineGetter__(\"constructor\", /a/gi))))) yield; else {null }");
tryItOut("{}");
tryItOut("let(prototype = null, prototype = false) ((function(){return;})());");
tryItOut("/*for..in*/for(__noSuchMethod__ = false.prop in  : <><x><y/></x></> ? break  : [<y><z/></y>].sort(eval)) {if(__parent__) {; } else  if (( /* Comment */<x/>)) return <x><y/></x>;yield; }");
tryItOut("M:if(<x><y/></x>) {export *;<><x><y/></x></>; } else  if (<x><y/></x>) {yield ({a1:1});(false); }\n");
tryItOut("/*infloop*/while(<y><z/></y>)return;");
tryItOut("L: {return; }");
tryItOut("function(q) { return q; } const constructor;");
tryItOut("__count__ = #3={a:#3#}, __count__;");
tryItOut("if((let (__noSuchMethod__, <x><y/></x> =  '' ) let (prop) undefined)) { if (prototype.__proto__ setter= /*\n*/({}).hasOwnProperty) {; }} else {}");
tryItOut("(<>\n<x><y/></x></>).watch");
tryItOut("if(<x><y/></x>.([[1]])) {if(<><x><y/></x></>) {null; } else {yield <x><y/></x>;export prop; } }");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in  /x/ ) gc()");
tryItOut("if(({ set __count__ __proto__ (constructor, __count__) { return *::*.propertyIsEnumerable(\"__parent__\")++ }  })) {let prop, __count__ = <x/>;if(((p={}, (p.z = *::*)()))) yield 4.; else  if (<><x><y/></x></>.__defineSetter__(\"__iterator__\", <y><z/></y>)) \f{L: {(null); } } }");
tryItOut("let (__proto__) { yield; }");
tryItOut("let (__proto__ = @foo, __noSuchMethod__) { let prop =  '' ; }");
tryItOut("if(*) { if (false) \t{yield;\f } else {{}const prototype = *; }}");
tryItOut("return;");
tryItOut("while(((5.0000000000000000000000.@foo) ^= [,,].__defineSetter__(\"prototype\", function(q) { return q; })) && 0){export prototype; }");
tryItOut("let(constructor = ((this.__defineSetter__(\"__count__\", 'haha'.split).eval(Exception(prototype, [[1]]))).hasOwnProperty(\"__count__\")), constructor = this.zzz.zzz) { yield (this.__defineGetter__(\"prototype\", (Function).apply));");
tryItOut("with({__parent__: ([15,16,17,18].filter((1 for (x in [])), 1e81 >>> this))}){let let = @foo;\r\nyield;\n }");
tryItOut("return;");
tryItOut("");
tryItOut("L: {__parent__continue ; }");
tryItOut("/*for..in*/M:for(const constructor in ((({}).hasOwnProperty)(1e+81))){throw  \"\" ; }");
tryItOut("prop = <y><z/></y>, constructor = function ([y]) { }");
tryItOut("/*for..in*/for(__parent__( \"\" ) in ((function  __iterator__ (__noSuchMethod__) { {} } )(window[let (prop, __proto__) ().@foo])))with({__iterator__: (gc([z1,,], [z1]))})switch(<><x><y/></x></>) { case 6: break; case __noSuchMethod__: __parent__ = 0/0,  { yield <x><y/></x> } ;continue L;continue L;default: const prototype = *;var prototype = this;break; continue ;break;  }");
tryItOut("if(({ __iterator__: ({ __proto__: __count__, __parent__: __parent__ }), __count__: ({ prop: prop }) }) = window) {yield; }");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in constructor) {[1,2,3,4].sliceFunction } while(( /x/g ).watch);");
tryItOut("(@foo)\n/*for..in*/M:for(var prototype in  /x/ ) {continue ; }");
tryItOut("M:with({__count__: <x><y/></x>})<x><y/></x>;");
tryItOut("const __proto__ =  /x/ ;\nvar __iterator__ = 1.3;\n const __parent__;if(new (function(y) { yield y; export *;; yield y; })((<x><y/></x>.@foo)\n, (([,,]).__defineSetter__)((null.unwatch(\"prop\")), *::*))) {L:with(window)export *;if(@foo) { if (*) __noSuchMethod__; else {yield ({}); }} } else {; }");
tryItOut("with({prop: <\f><x><y/></x></>.@foo})");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in ) {gc() }");
tryItOut("/*for..in*/for(var get in new Boolean(<x><y/></x>, [[1]])) yield;");
tryItOut("__iterator__ = *, __iterator__");
tryItOut("if(((__count__) = -- /x/ )) M:do  while((__noSuchMethod__.__noSuchMethod__) && 0)\nvar __iterator__;");
tryItOut("var __iterator__ = [];\nprop = ({ __iterator__: __noSuchMethod__ }) = ((function  __proto__ (prototype)<y><z/></y>).apply)()\n");
tryItOut("/*infloop*/while(1e4)yield;");
tryItOut("/*for..in*/M:for(let __iterator__ in (([1,2,3,4].slice)())){if(({__noSuchMethod__: <y><z/></y> })) {} }");
tryItOut("if(<x/>--) (constructor);");
tryItOut("{(({a2:z2})); }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("gc()");
tryItOut("with({}) let(__iterator__) { for(let y in [5,6,7,8]) __noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/do {(<y><z/></y>);export __parent__; } while(__noSuchMethod__ = 0.1);");
tryItOut("export __count__;");
tryItOut("with(([1,2,3,4].map)()){gc()gc()\neval\n }");
tryItOut("/*infloop*/for(__iterator__ = #2=[__proto__]; ((uneval(window)).*); constructor.(function(id) { return id }.hasOwnProperty(\"prototype\"))) {continue ; }");
tryItOut("throw this;");
tryItOut("if((- /* Comment */this ? \nfalse : [,,])) /*infloop*/for(let __count__; <x><y/></x>; *::*) (this); else {return [,,]; /x/ ; }");
tryItOut("return ({__iterator__ setter: Math.pow });");
tryItOut("{if(__proto__ = (<><x><y/></x></>)(1.3, null)) {yield <><x><y/></x></>;__parent__; } else  if ((-window)[(yield this)]) {yield <><x><y/></x></>;yield false; } else break ;L: return;(__count__).__defineSetter__let (__count__ = function(id) { return id }, __noSuchMethod__) { export __parent__; } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/M:for(var constructor = this.zzz.zzz in __iterator__ = this.__defineSetter__(\"prop\", /a/gi)) {\t/*infloop*/for(<x><y/></x>; (-0);  '' ) {false; } }");
tryItOut("return;");
tryItOut("throw  /x/g \n");
tryItOut("/*infloop*/M:while( '' )return window;");
tryItOut("if((<x><y/></x> :: [1,,])) const constructor; else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>)  else prop, __iterator__ = *;");
tryItOut("let (__parent__, ({ prop: __proto__, __proto__: prop }) = 1.3) { if(([11,12,13,14].some)) {var function::__iterator__;gc() } else  if ( \"\" ) throw function ([y]) { }; else {yield  /x/g ;yield; } }");
tryItOut("/*infloop*/L:for(let __count__; (function  prop (function::__count__, __count__)<x/>)(window); __noSuchMethod__.prototype - (<x><y/></x>)( /x/ , __count__)) /*infloop*/for(var prototype = <x/>; <><x><y/></x></>; @foo) yield;continue L;");
tryItOut("/*infloop*/do {( /x/g );yield; } while(( \"\" .yoyo(__noSuchMethod__) ^= (false.hasOwnProperty(\"prototype\"))));");
tryItOut("{/*infloop*/for(new ([1,2,3,4].slice)(); true; null) {if(false) { if (! /x/ ) return;} else __iterator__;{continue ;; } }if((uneval( /x/g ))) /*infloop*/for(const __count__ = <x><y/></x>.__defineSetter__(\"prop\", (new Function(\"function  __parent__ ()yyy\"))); [prop, , , prototype] = yield true; (true)())  /x/g ; }");
tryItOut("try { let([constructor, ({ prop.__count__: ({ constructor: ({ __noSuchMethod__: prototype, prototype: __iterator__ }) }) }), ({ __parent__: prop, prototype: [, prototype, ] }), prototype] = [11,12,13,14].filter, __proto__ = (yield <><x><y/></x></>)) ((function(){constructor = prop;})()); } catch(__noSuchMethod__) { for(let y in [5,6,7,8]) for(let y in []); } finally { let(constructor = window -= <><x><y/></x></>.@* ^= (function ([y]) { })()) { try { throw 0/0; } finally { try {  } finally { let __count__, __parent__; }  }  } ");
tryItOut("/*for..in*/for(var __iterator__ = (__noSuchMethod__ = this) in *) if(<xxx>{__count__}</xxx>) break M; else /*for..in*/for(const __noSuchMethod__ in [[]]) yield  /x/g ;");
tryItOut("yield;");
tryItOut("{let(prop, constructor) ((function(){export constructor;})()); }");
tryItOut("L: { }");
tryItOut("{continue L;/*infloop*/M:do {yield;yield; } while( ''  > this); }");
tryItOut("yield;");
tryItOut("L: {export __proto__; }");
tryItOut("M:if(this.__defineSetter__(\"__proto__\", ((delete.__parent__.prop)).__defineSetter__)) {{}gc() } else  if ([ '' .watch(\"prop\", [[]])]) {/*infloop*/for(const ({ set: <x><y/></x>.throw(constructor) }) = -1 ? <y><z/></y> : 1e81; [true].sort\f(Function); <y><z/></y>, new window(*::*) = [__noSuchMethod__ for (__count__ in *::*)]) /*infloop*/for( '' ; null; {}) {yield; }/*infloop*/L:while(window){{export *;yield; } } } else const constructor;");
tryItOut("switch((__proto__.prototype)) { case (__noSuchMethod__.([__count__] = ({ prototype: __parent__ }) :: window)): break; case 4:  }");
tryItOut("/*infloop*/M:for(const constructor; ((((uneval(*::*))) /  /x/ \f\n.__defineGetter__(\"__iterator__\", (this.zzz.zzz))))(__count__ = __iterator__[<x/>]); <bbb xmlns=\"(([<y><z/></y>]).valueOf(\"number\") -= __noSuchMethod__)\"></bbb>) let (prototype = <y><z/></y>) { ; }");
tryItOut("L:if(this.zzz.zzz) __proto__, __iterator__; else  if ((__count__) = do export *; while((#1#) && 0);) {export __iterator__;{var constructor;yield @foo; } } else {__iterator__; }");
tryItOut("/*for..in*/M:for([__count__, __iterator__] = <x><y/></x> in __noSuchMethod__) export prototype;");
tryItOut("export *;\nbreak ;\n");
tryItOut("{}");
tryItOut("let (__iterator__ =  \"\" ) { __noSuchMethod__ = prototype; }");
tryItOut("yield\n");
tryItOut("{while(((.2.__defineSetter__(\"__count__\", function () { return <x><y/></x> } ))) && 0)throw 1.2e3.unwatch(\"prototype\"); }//h\n");
tryItOut("__parent__.constructor = __iterator__;");
tryItOut("/*for..in*/for(__proto__.constructor * #1=[constructor+=*::*].constructor in ((function  __parent__ (each) { gc() } )(constructor.constructor)))if(function  prop () { return @foo } .propertyIsEnumerable(\"constructor\")) { if (({__proto__: this.zzz.zzz, __proto__ getter: ([1,2,3,4].map).apply })) {{export *; } } else {{} }}");
tryItOut("with({}) __parent__ = prop;");
tryItOut("");
tryItOut("L:if(\fnull) { if (constructor)  for each (__iterator__ in //h\n1.2e3)\f} else break ;");
tryItOut("with({__count__: @foo})export *\n");
tryItOut("if((eval(\" '' \",  \"\" ).__count__ = <><xxx {prototype}={#0=[<y><z/></y>]} /></>)) export *; else {return this\ndo return prototype; while((*) && 0); }\t");
tryItOut("with({prototype: [__iterator__ = true]})/*infloop*/do { } while( /x/ );");
tryItOut("<x><y/></x>\nlet prop = *, prop = <x><y/></x>\n get __proto__ prototype (({ __parent__: [prop, ], constructor: prop }), __proto__) { yield (__parent__, __count__ >>> 3.141592653589793) } ");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <x/>) switch(__parent__ = __proto__) { default: /*infloop*/do ; while(undefined);case Iterator(null): break;  }");
tryItOut("/*for..in*/for(const [__iterator__, __parent__] = [15,16,17,18].filter(({}).hasOwnProperty, ({ prototype: __iterator__ }) = ({ __count__: __proto__ })) in 'fafafa'.replace(/a/g, Math.pow)) if(<><bbb xmlns=\"<><x><y/></x></> / @foo\"><!--yy--></bbb></>) throw *::*;");
tryItOut("/*infloop*/for(var ({ __proto__: prop, __proto__: [__noSuchMethod__] }) = this; constructor.constructor = (<x><y/></x> >>>=\n*); [11,12,13,14].sort) continue L;");
tryItOut("{export prototype;let (prototype = <x><y/></x>.__defineGetter__(\"__count__\", (function  __parent__ () { <x><y/></x> } ).apply), prototype) { let (constructor, __noSuchMethod__ = <x/>) { /*for..in*/L:for(let [get, constructor] = <><x><y/></x></> in <x><y/></x>) yield [z1,,]; } } }");
tryItOut("while((new yield (<y><z/></y>)\f( /x/g , prop)) && 0)/*infloop*/do {( \"\" ); } while(prop = 5.0000000000000000000000);");
tryItOut("if((new ((yield .2))(( \"\"  %= *), true ? null : false)))  else {var prototype = <><x><y/></x></>, function::__parent__; }");
tryItOut("if(constructor) yield <><x><y/>\t</x></>; else let __noSuchMethod__, __proto__ = (-0);");
tryItOut("with({}) return;");
tryItOut("export __count__; const prop;");
tryItOut("yield;");
tryItOut("with([z1])throw  '' ;");
tryItOut("M:with(__proto__)<><x><y/></x></>");
tryItOut("(function ([y]) { })()");
tryItOut("L:if(1e4(<><x><y/></x></>)) {constructor; }");
tryItOut("/*infloop*/for([yield undefined]; ({a2:z2}) %= <x/>.__count__;  ''  for each (__proto__ in prop) <= function::__iterator__.watch(\"prop\", ({}).hasOwnProperty)) {break ;switch(window) { case 8: let default: break; case this: throw window;case <x><y/></x>: break;  = 3/0;break;  } }");
tryItOut("{; }");
tryItOut("/*infloop*/M:do {if([1].yoyo(0.1)) { if (.valueOf(\"number\")) {/*infloop*/for(<x/>; <x><y/></x>; window) {__count__;let prop = <><x><y/></x></>, __noSuchMethod__ = window; } }} else {L: export *; } } while(constructor = <x><y/></x>.__defineGetter__(\"__count__\", this).*);");
tryItOut("/*for..in*/L:for(const prop = @foo in @foo) export __noSuchMethod__;");
tryItOut("with({prototype: true}){}");
tryItOut("/*infloop*/L:do {throw StopIteration; } while(eval(\"switch(-3/0) { case 8:  }\", return));");
tryItOut("/*for..in*/for(var [function::__proto__, prop] = [15,16,17,18].sort(function  __parent__ (__count__) { ; } , (-1)) in  \"\" ) {return <><x><y/></x></>;yield ({}); }");
tryItOut("/*infloop*/for(({ prop: prototype, __noSuchMethod__: ({ constructor: ({ constructor: __noSuchMethod__, prototype:  /x/g ['__noSuchMethod__'] }) }) }) = #0=(<><x><y/></x></> in <x/>) ? (++033) : <x/>.yoyo(null); const prototype = window, __count__ = 1.3( /x/ .isPrototypeOf(prop = *), new  /x/ (( '' --), arguments)); null) if([,,z1]) {yield;(prototype); } else  if (*) {const prop, __noSuchMethod__; }");
tryItOut("yield window");
tryItOut("\nthrow <><x><y/></x></>;\n");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(__noSuchMethod__; __count__ = __iterator__, setter = __parent__; (<x/> for (prop in <x><y/></x>))) {let __noSuchMethod__ = @foo;Function }");
tryItOut("while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.__parent__ = __iterator__) && 0){throw this;(this); }");
tryItOut("while(((new Function).call(new true, __proto__ = __count__, 3.141592653589793\n)) && 0){{}prototype = __parent__, constructor = prototype } const __noSuchMethod__;");
tryItOut("__parent__");
tryItOut("\nlet (__parent__) { {break L;gc() } }var __proto__ = var __proto__ = <x/>, prototype;, constructor;\nthrow __parent__;\n");
tryItOut("if([__count__export *;]) {yield;/*for..in*/for(var __count__ in <><x><y/></x></>) yield; } else  if (((p={}, (p.z = prototype = null >>= eval(\" /x/ \", <><x><y/></x></>))()))) {/*for..in*/for(const function::__noSuchMethod__ in  \"\" ) {var function::__proto__ = this;yield; }export *; } else /*for..in*/for(constructor in ((function (__count__, __noSuchMethod__) { return #2=<><x><y/></x></> % [11,12,13,14].some } )([15,16,17,18].filter(({}).hasOwnProperty, __proto__))))/*infloop*/while(prop = window)break ;");
tryItOut("with(+this.*)if(-prototype =  '' ) {var constructor = 1.2e3, __proto__ = (-1); } else ({a2:z2})");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("throw [11,12,13,14].some; const prop;");
tryItOut("/*for..in*/for(let __proto__ in ((([(this < null)]))(eval(delete *::*))))switch((__proto__ <  /x/g )) { default:  }{}");
tryItOut("/*infloop*/do var prop = *::*, __noSuchMethod__; while((( \"\" ++).@foo));");
tryItOut("let (__iterator__ = (__count__ = constructor), __noSuchMethod__ = true) { \n }\n/*infloop*/L:for(#1=[#1#]; __proto__; <><x><y/></x></>) yield;");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("with({}) yield <x/>;");
tryItOut("/*infloop*/for(let __noSuchMethod__; <x/>; <x/>) {yield;033\n; }\n");
tryItOut("if(((uneval( \"\"  ? [15,16,17,18].map((function () { return  \"\"  } ).call, false) : (this.__defineSetter__(\"__iterator__\", function ()*)))))) {constructor, __proto__ } else  if ((__proto__.('fafafa'.replace(/a/g, Math.sin))).unwatch(\"__noSuchMethod__\")) /*for..in*/for(var [__noSuchMethod__, __iterator__] = #3={a:#3#}[ '' ].__count__ = 'fafafa'.replace(/a/g, 'haha'.split) in  /x/ ) while((__count__) && 0){} else {throw @foo; }");
tryItOut("{return;/*for..in*/for(const [__noSuchMethod__, __count__] = __count__ = <y><z/></y> in 0) /*infloop*/while(@foo)gc() }");
tryItOut("with(<x><y/></x>.(-3/0)){(this); }");
tryItOut("L:if( '' ) {yield; }");
tryItOut("if((new ( /x/g )())) {let prop; }");
tryItOut("yield;\n for each (prototype in undefined)\n");
tryItOut("/*infloop*/for(const ({ prop: [[__noSuchMethod__, __iterator__, ], ({ __iterator__: prop }), [__parent__, prop, __iterator__, ]], constructor: [[, , constructor, __iterator__, constructor]]\t }) = #1=<><x><y/></x></>; <y><z/></y> >>>=@foo - __count__ = constructor; <>(new (<x><y/></x>)(1.3))</>) gc()");
tryItOut("do  while((((new (<x><y/></x>)(<x><y/></x>)).hasOwnProperty(\"__count__\"))) && 0);");
tryItOut("M:if(((<x><y/></x>)(<y><z/></y>, <x><y/></x>))) <><x><y/></x></> else  if (let (constructor = <x><y/></x>) [,,] ? <x><y/></x> : window.yield) {(*::*);@foo; }");
tryItOut("let(var __count__ = arguments, x::__proto__ = yield __parent__;) ((function(){let(__noSuchMethod__ = (#1=({__count__: @foo.propertyIsEnumerable(\"__noSuchMethod__\")}))) { return ( \"\" .unwatch(\"prop\"))[window--];})());");
tryItOut("/*infloop*/for((this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty));  /x/ ; constructor) while((window) && 0){constructor = true, __parent__ = 3/0;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const [,,z1] in this) { }");
tryItOut("if([,]) { if (((p={}, (p.z =  \"\" )()))) yield;} else { }");
tryItOut("for(let y in []);");
tryItOut("throw StopIteration;");
tryItOut("with({({ constructor: <><x><y/></x></>.constructor, __noSuchMethod__: ({ __count__: ({ __proto__: [({ prop: __noSuchMethod__ }), ({ __parent__: __noSuchMethod__ }), this, ({ constructor: __iterator__ }), ], prop: __iterator__ }) }) }): ((*::*.isPrototypeOf(function ([y]) { })).eval(<x><y/></x>.propertyIsEnumerable(\"__count__\")).__iterator__ = <employee id=\"1\"><name>Joe</name><age>20</age></employee>.( \"\" .propertyIsEnumerable\t(\"__noSuchMethod__\")))}){/*for..in*/for([prop, constructor] = constructor in window) {const prototype = prototype, __parent__;continue ; }(<y><z/></y>); }");
tryItOut("{/*for..in*/for(var [prototype, constructor] =  /x/g .prototype.constructor = <y><z/></y>.yoyo(<y><z/></y>) in (-0)) <x><y/></x>;/*infloop*/for(var ({ function::__iterator__: ({ prop: ({ __count__: constructor }), __proto__: ({ prop: function::__count__ }) }), __parent__: delete }) = new (<><x><y/></x></> ^= -0)(); ([<> /x/g </> for (prop in __noSuchMethod__) if (*)]); [eval(\"let __parent__ = false;\", window)].map(function(q) { return q; })) export *; }");
tryItOut("__proto__ = __proto__;");
tryItOut("if(([([,,] for each (prop in @foo))].map(function(y) { yield y; /*infloop*/while(<x><y/></x>)throw function ([y]) { };; yield y; }))) {} else /*for..in*/for(__noSuchMethod__ = <y><z/></y> in window) {return;const __count__, set; }");
tryItOut("/*for..in*/for(var prototype in prop) {new Boolean(undefined) }");
tryItOut("if(new Function([1], 3)) {gc() }");
tryItOut("M:switch(*) { case 2: default: break; case null: let __parent__ = <><x><y/></x></>;break; break; case 5: case @foo: return <><x><y/></x></>;break; (undefined);break; case window: break; return this;break; break;  }");
tryItOut("if((<y><z/></y> != this).yoyo((@foo.__lookupSetter__(\"prototype\")))) {return;{} } else  if ((({constructor:  /x/g }))) {yield window; }");
tryItOut("try { (-0); } catch(prop) { let __parent__, __iterator__ = __count__; } ");
tryItOut("/*for..in*/for(let __proto__ = <x/> in  \"\" ) let __count__ = *;");
tryItOut("/*infloop*/while(new ([])())if(<x><y/></x>.(true)) {export __iterator__;continue ; } else  if ( /x/g ) do \t{throw window;return; } while((null) && 0);");
tryItOut("if( '' ) { if (1e-81) { } else return *;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in \n1e+81) {return <><x><y/></x></> }");
tryItOut("(1 for (x in [])) const __proto__;");
tryItOut("throw __parent__;");
tryItOut("L:if((Iterator(<y><z/></y>, 0x99)).throw(<x><y/></x>.(@foo) >= ( /x/g [<><x><y/></x></>]))) {return; } else  if (<bbb xmlns=\"@foo\"></bbb>) M:if(<><x><y/></x></>)  else [1,,]");
tryItOut("/*infloop*/L:do {/*for..in*/for(const this.constructor in <x><y/></x>) yield; } while(window);");
tryItOut("/*for..in*/for(const [prop, __count__] = ((uneval(<x><y/></x>))) in *::*) throw <><x><y/></x></>;");
tryItOut("{prop, __iterator__;var __proto__ = *, __proto__ = false; }\n");
tryItOut("return;");
tryItOut("do {yield @foo; } while(( /* Comment */ /x/ ) && 0);");
tryItOut("while((1e-81.__defineSetter__(\"__parent__\", eval)) && 0){<x><y/></x>; }");
tryItOut("switch(yield 5.0000000000000000000000.__count__) { case 5: return; }");
tryItOut("yield <><x><y/></x></> != <x><y/></x>;");
tryItOut("let (setter, prop = ([__count__.__iterator__ getter= (new Function(\";\"))].filter(function(y) { yield y; yield;; yield y; }))) {  }");
tryItOut("/*for..in*/for(__parent__.prototype in <x/>) {[[1]]; }");
