
tryItOut("try { return;\n } finally {  } ");
tryItOut("let __proto__\n1e+81");
tryItOut("if( \"\" ) throw <x><y/></x\f>; else  if ((__parent__ = null :: null.isPrototypeOf(<x><y/></x> >> null[<><x><y/></x></> << *::*]))) {return; } else {( '' ); }");
tryItOut("if((<x/>.hasOwnProperty(\"__noSuchMethod__\"))) { if (<><x><y/></x></>) {var __noSuchMethod__;yield 0.1; }} else {prop = @foo, prototype; }");
tryItOut("false const prototype;");
tryItOut("/*for..in*/");
tryItOut("while(((<><x><y/></x></>.__defineSetter__(\"__iterator__\", ({}).__lookupGetter__))) && 0){(<x><y/></x>);Math.pow }");
tryItOut("continue M;");
tryItOut("if(undefined /= this) { if ((033)[<><x><y/></x></>]) return (-0);} else {throw arguments; }");
tryItOut("/*infloop*/for(let [, , , ] = (RegExp()); <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (({prop: * for (prototype in <x><y/></x>)__proto__ getter: <x><y/></x> }))) export __parent__");
tryItOut("yield;break L;");
tryItOut("/*infloop*/do const __proto__; while(false);");
tryItOut("L:if((false.propertyIsEnumerable(\"__proto__\"))) var __proto__ = window, __noSuchMethod__; else  if (().call) if(window) {return;gc() } else  if (<><x><y/></x></>) {; } else {return 5.0000000000000000000000; }");
tryItOut("L: (<><x><y/></x></>);/*export __noSuchMethod__; }");
tryItOut("if(__parent__) break ; else export *;");
tryItOut("/*infloop*/for(constructor; (new (this)()); (this.isPrototypeOf(null))) {\n<y><z/></y>; }");
tryItOut("/*for..in*/for(let [prototype, prop] = (!yield __parent__) in [[]]) {/*for..in*//* nogeckoex bug 349964 */ for  each(let (<><x><y/></x></>); in [ /x/g ] .@  /x/g ) {do  while((4.) && 0); }for(let y in [5,6,7,8]) break L; }");
tryItOut(";");
tryItOut("if(({a2:z2})) { if ([__proto__].some(function (__parent__) { yield <><x><y/></x></> } )) if(*::*) {([[]]); } else  if (@foo) gc() else return <x><y/></x>;}");
tryItOut(";\n/*for..in*/for(__parent__ in ((eval)(yield;))){throw 3.141592653589793; }gc()\n");
tryItOut("/*infloop*/for(var __proto__ = ((-1).hasOwnProperty\f(\"constructor\")); var prototype = 3.141592653589793 ^= ('fafafa'.replace(/a/g, function  __count__ () { return <><x><y/></x></> } )); ({ __proto__: prop }) = ([z1])(undefined)) gc()");
tryItOut("/*for..in*/for(let __proto__ in ((function(q) { return q; })(<>eval(\"(<><x><y/></x></> += )\", <><x><y/></x></>)</>)))/*infloop*/for( '' ;  /x/ ; @foo) {yield; }");
tryItOut("if(*::*) const this; else  if (<x><y/></x>) {yield  /x/ ; }");
tryItOut("return;");
tryItOut("/*for..in*/L:for(var prop = this in true) {yield {};; }");
tryItOut("{return; } const prop;");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in <>\f<x><y/></x></>) ;");
tryItOut("return;\n[[]];\n");
tryItOut("do {let __parent__, __count__;export *; } while((false |= window) && 0);");
tryItOut("M:with(#2=<y><z/></y>.__parent__ = ()){{} }");
tryItOut("{if(prototype%=<x/>) { if ((uneval(this))) throw <x><y/></x>;} else yield prop; }");
tryItOut("/*infloop*/for(let prototype = (--__count__ = (-0)); (new __proto__()); (__parent__ = 5.0000000000000000000000)) {if(<><x><y/></x></>) export __count__; else  if (prototype) {@foo; } else {return  /x/ ;return [1]; }yield; }");
tryItOut("/*infloop*/M:for(__parent__ = <x><y/></x>; <y><z/></y> ? __noSuchMethod__ : -0; <><x><y/></x></> & <x/>return <><x><y/></x></>;");
tryItOut("if(null) {yield; }");
tryItOut("with(* > <x><y/></x>){export prop;Function }");
tryItOut("/*for..in*/for(const __iterator__ = 'fafafa'.replace(/a/g, [1,2,3,4].slice) in (yield <x><y/></x>).watch(\"prop\", gc) for (__count__ in []) for (__iterator__ in <x/>)) with({__parent__: prop.__count__ = __proto__ = <x><y/></x>, arguments << gc(<x/>)}){break ;(<y><z/></y>); }");
tryItOut("/*infloop*/M:for(({ __count__: constructor, __proto__: __proto__ }) = this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty); new ( '' )(prototype); __proto__ = <><x><y/></x></>) {(<><x><y/></x></>); }");
tryItOut("if(<x/>) (@foo).__defineSetter__ else ");
tryItOut("with({__count__: [z1,,].*})let __parent__;");
tryItOut("/*for..in*/for(let constructor = <y><z/></y> in @foo) export *\n");
tryItOut("/*infloop*/for(( /x/ .yoyo(window)[new window()]); ((*::*\n).valueOf(\"number\")); this.zzz.zzz) let (__iterator__, __iterator__) { {} }");
tryItOut("while((__noSuchMethod__) && 0)var x::__iterator__;");
tryItOut("/*infloop*/while\r([[]])gc()\n");
tryItOut("/*for..in*/for(var constructor in <x/>) (<><x><y/></x></>);");
tryItOut("{prototype = ({ get __parent__ __count__ (prototype) { yield this } ,  get __iterator__ prototype (function::__noSuchMethod__, <x/>) { return <><x><y/></x></> }  })\nvar __proto__, __count__;\n }");
tryItOut("/*infloop*/while((prop) ? #2=[(new *)].sort(window) : __iterator__.__count__ = 0x99){var __count__,  get ;return; }");
tryItOut("__count__ = null;");
tryItOut("with(function::__count__.__lookupGetter__(\"__iterator__\"))yield  /x/ ;");
tryItOut("throw __parent__; const __count__;");
tryItOut("");
tryItOut("/*infloop*/L:for(const __proto__ = <y><z/></y>; *; -1) {throw this; }");
tryItOut("L: {(window); }");
tryItOut("with(@foo | false.__defineSetter__(\"__count__\", (5.0000000000000000000000).watch)){while((({a2:z2})) && 0){__iterator__{} } }");
tryItOut("for(let y in []);");
tryItOut("for(let y in []);");
tryItOut("L: {gc() }");
tryItOut("throw \t5.0000000000000000000000;\n/*for..in*/for(let (prototype) in (((true).watch)((prototype = constructor))))throw <x><y/></x>;");
tryItOut("with({constructor: false * true.eval(new String(((window)[undefined].yoyo((__noSuchMethod__ = __noSuchMethod__)))))}){if((({ get __parent__ __count__ () { yield (<x><y/></x> .@*:: <y><z/></y>) } ,  get __iterator__ constructor (constructor) { yield undefined.constructor = window }  }))) { if ((true.watch(\"__count__\", Math.pow))) let __count__, constructor = [1]; else yield;} }");
tryItOut("if(void [,,].__proto__ if (constructor)) L:if(<y><z/></y>) { } else  if (*::*) yield;");
tryItOut("/*for..in*/for(const prototype = <x><y/></x>.__defineSetter__(\"__noSuchMethod__\", Function).__lookupSetter__(\"__count__\") !== (true) != ( \"\" ) in void (<><x><y/></x></>.propertyIsEnumerable(\"constructor\"))) {}return\n0;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__.__noSuchMethod__ in (<x/> && <><x><y/></x></>)) {return false;{}with({__proto__: [,,]}){const __iterator__ = <x/>, prototype;0x99; } }");
tryItOut("with({__proto__:  '' }){var __parent__, constructor, constructor = <><x><y/></x></>; }throw <x/>;");
tryItOut("with({}) try { [1,2,3,4].slice } catch(__proto__) { (prop); } finally { var prototype = -3/0; } ");
tryItOut("export *;\nthis;\n");
tryItOut("yield;");
tryItOut("/*infloop*/for((this.zzz.zzz); prototype.((__parent__.__noSuchMethod__ setter= function(y) { yield y; yield;; yield y; })); (<><x><y/></x></>.__lookupGetter__(\"constructor\")) .. (yield prop)) export *;");
tryItOut("/*for..in*/for(prototype in <x/>) {[1,2,3,4].slice }");
tryItOut("/*for..in*/M:for(let prop in ((Math.sin)(())))export *;");
tryItOut("with({prototype: <\f><x><y/></x></>}){break ; }");
tryItOut("if(__noSuchMethod__.__lookupSetter__(\"__iterator__\")) {new Functionlet prop = arguments, __count__ =  /x/ ; } else {/*infloop*/M:for(let prototype = true; {}; <><x><y//*\n*/></x></>)  }");
tryItOut("if(__parent__ = __noSuchMethod__ >> window\n) { if ((yield __proto__)) {const constructor; } else {yield window; }}");
tryItOut("5.0000000000000000000000;");
tryItOut("if((new <><x><y/></x></>(\n#1=[#1#]))) ;");
tryItOut("/*for..in*/for(var __count__ in <xxx {__iterator__}={prototype = let} />) if(prop .. 1.3) { if (( \"\"  ? *::* : 3.141592653589793, <x><y/></x>))  else {yield <x/>; }}");
tryItOut("with({__parent__: +<><x><y/></x></>.__proto__})/*for..in*/for(let __count__ in <x/>) return\nif(@foo) {return; } else {*; }");
tryItOut("if(<><x><y/></x></> >>>=prototype.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))) {{}gc() } else  if (constructor ?  \"\"  : <><x><y/></x></> <<= __iterator__ = this) ({});");
tryItOut("this.zzz.zzz;");
tryItOut("while(((x::__iterator__.__proto__ = undefined)) && 0){this.zzz.zzz; }");
tryItOut("/*infloop*/for(\f<><x><y/></x></>; prop; *::*) {gc()([,,]); }");
tryItOut("/*infloop*/while([__noSuchMethod__]){yield <x><y/></x>; }");
tryItOut("with({__iterator__:  '' })yield;");
tryItOut("if() { if ((({ get __noSuchMethod__ __proto__ (__iterator__, constructor) /x/g , default:  getter: (<x><y/>\f</x>).call }).unwatch(\"__count__\") >>= @foo)) prop, __parent__ = <><x><y/></x></> else gc()}");
tryItOut("/*infloop*/M:for( /* Comment */[15,16,17,18].map((<><x><y/></x></>).__defineSetter__, @foo); (let ([[, prop, prop], ({ __parent__: __parent__, __proto__: __iterator__ }), ({ prototype: __iterator__, __noSuchMethod__: __parent__ })]) new (([11,12,13,14].sort))(( /x/ [ /x/ ]))); ((yield 3))) {if(#1=[#1#]) yield ({ __noSuchMethod__: [({ __count__: ({ __parent__: __noSuchMethod__, prototype: __iterator__ }), __noSuchMethod__: prop }), , constructor], __parent__: ({ __count__: ({ __noSuchMethod__: __proto__, __iterator__: __noSuchMethod__ }) }) }); else {export __parent__; }<x><y/></x>; }");
tryItOut("{/*infloop*/while(<><x><y/></x></>.__proto__)return; }");
tryItOut("var constructor, prototype = prototype;");
tryItOut(" /x/ ");
tryItOut("/*infloop*/for(const [, __proto__, ] = *::*.*;  /x/ ; ({__count__: <><x><y/></x></>})) {return; }");
tryItOut("/*infloop*/for(let prototype;  /* Comment */(<><x><y/></x></> ? <y><z/></y> : []); (<x><y/></x> < *::* > *)) export *;");
tryItOut("export __noSuchMethod__;");
tryItOut("if(#2[function ([y]) { }].yoyo((-1).throw(window))) /*for..in*/for(let [__count__, __count__] = (new Function( /x/g )) in  /x/ ) throw  /x/ ; else  if (function::__noSuchMethod__ = undefined) export *;");
tryItOut("/*infloop*/for(;; Number((this.__defineGetter__(\"__iterator__\", [1,2,3,4].map)), @foo); (prototype = <x/> += __proto__.__noSuchMethod__ setter= (function(q) { return q; }).call)) export *;");
tryItOut("{L:if(eval(\"export *;\", false).__count__) {throw *::*; } else  if (__parent__) {false;var constructor = <x/>; } else var __count__; }");
tryItOut("/*infloop*/while([15,16,17,18].filter([1,2,3,4].map, ([1,2,3,4].slice).call(<y><z/></y>, ) @ * /= 0.1)){/*for..in*/for(let prop in window) {var prop, prop; } }");
tryItOut("return (__count__.__noSuchMethod__ = this.yoyo(<><x><y/></x></>));");
tryItOut("/*infloop*/for(let ({ __count__: ({ __iterator__: [({ __parent__: __parent__ }), __noSuchMethod__] }), get: (constructor) }) = undefined; (-0)(); (<x><y/></x> && <y><z/></y>) for (prop in (this)[<x><y/></x>]) for (prototype in <x/>)) /*infloop*/L:for(__parent__; __proto__.prototype = [,]; constructor.prop setter= *) *::*");
tryItOut("/*infloop*/constructor = prototype, __proto__;");
tryItOut("export prop");
tryItOut("yield;");
tryItOut("return (__proto__)%=1.3\n.watch(\"constructor\", new Function) >= eval(\"var prop =  /x/g ;\", new <y><z/></y>(<><x><y/></x></>));");
tryItOut("export prop");
tryItOut("L: {var __proto__, __parent__; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in (((Math.sin).call)(*)))return <y><z/></y>;");
tryItOut("if(((yield <><x><y/></x></>++).__parent__ = <!--yy-->.@foo)) while((<x/>) && 0)\f{<x/> } else /*for..in*/for(const __parent__ = *::* in [z1,,]) \f;");
tryItOut("/*for..in*/for(const [__parent__, __count__] = (0) in {}) ({}).hasOwnProperty");
tryItOut("with({prop: ( \"\"  - (this + __iterator__ = window) :: false\n.watch(\"prop\", ([[1]] .@ <x/>).watch))}){gc()if(__count__) (<><x><y/></x></>); else {__iterator__, prototype = *; } }");
tryItOut("var prototype");
tryItOut("switch(this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) { default: break; case 1:  get __noSuchMethod__ __noSuchMethod__ ([prop, , ]) { yield ((<><x><y/></x></> = <y><z/></y>)[*(this, false)]) } break; yield false;/*infloop*/for(let __proto__ = this; #1=[#1#]; __count__) {yield <><x><y/></x></>; }break; case (window.*): var __parent__ = <><x><y/></x></>; }");
tryItOut("let(__count__ =  /x/ ) { return;");
tryItOut("/*for..in*/for(__count__ in ((eval)( '' .__iterator__))){let prop = <><x><y/></x></>;yield  \"\" ; }");
tryItOut("if((__iterator__ = [(RangeError(<x><y/></x>[<y><z/></y>],  /x/g ))].sort((prototype.valueOf(\"number\"))))) if([11,12,13,14].some) {with({__count__: true}){ } } else break ; else  if (null) do {const prototype, __count__ = this; } while(((Function())) && 0); else \r{yield; }");
tryItOut("null;export __count__;");
tryItOut("let (__count__ = void ('haha'.split).call(-1, __proto__, ;), __proto__ =  /x/g ) { /*infloop*/for(__iterator__; <><x><y/></x></>; /*\n*/<x/>) {return <y><z/></y>; } }");
tryItOut("gc()\nvar prototype = ([15,16,17,18].map(eval, __count__)), constructor;\n");
tryItOut("with([(true -  /x/ ) for (prop in @foo)]){ }");
tryItOut("this.zzz.zzz;");
tryItOut("M:switch((__iterator__.__parent__ = <y><z/></y>.watch(\"constructor\", function(q) { return q; }))) { case 9: default: break; case (((Function))([] .. undefined)): __noSuchMethod__;break;  }");
tryItOut("L:if((yield (* |= <x><y/></x>) .@ [#1#])) {/*for..in*/for(let [x::__count__, __noSuchMethod__] = prop.yoyo(this) in new <x><y/></x>) (<x/>);try {  } catch(__parent__) { export x::prototype; } finally { ; }  } else {; }");
tryItOut("/*infloop*/while((__noSuchMethod__) = (__iterator__.__proto__ = <><x><y/></x></>)\n)continue ;\ngc()\n");
tryItOut("M:do {return <><x><y/></x></>; } while(((yield prop)) && 0);");
tryItOut("/*infloop*/do yield; while(*);<x><y/></x>;");
tryItOut("/*infloop*/do export *; while((((uneval( /x/ ))) ^= (1e81.__noSuchMethod__)));");
tryItOut("{break L; }");
tryItOut("L:do {/*infloop*/for(__iterator__; __noSuchMethod__(*.__iterator__) = let (__noSuchMethod__, prototype) @foo.@*; (Math.sin)) return constructor;if(function ([y]) { }\r.__count__) {let prop;return  '' ; } else {yield; } } while(((function (prototype) { return ({}) } )( \"\" )) && 0);");
tryItOut("( /x/ )\n");
tryItOut("L: {export true;var __noSuchMethod__ = *::*; }");
tryItOut("{let __noSuchMethod__\nexport __parent__; }");
tryItOut("if(null) { if ((__noSuchMethod__ ? false : <y><z/></y>)) { } else (function  __noSuchMethod__ (__iterator__, __parent__) { return @foo } ).apply}");
tryItOut("L:with({__iterator__: (uneval((prototype.constructor))).eval((new Function(\"yield;\")))})var constructor;\nreturn ({a1:1});\n");
tryItOut("let ([, , ] = new (<><x><y/></x></>)().__lookupGetter__(\"__parent__\")) { L:do {gc() } while((new (<><x><y/></x></>)() >>>=(window ^= prop)) && 0); }");
tryItOut("let ([, , ({ constructor: [], function::constructor: __proto__ })]) { let constructor, get; }");
tryItOut("if(__proto__.__count__ getter= [1,2,3,4].map) {/*infloop*/for([11,12,13,14].filter; (this.zzz.zzz); (({constructor: this }))) {{}export *; } } else {/*infloop*/for(<><x><y/></x></>; prop; #1#) <x><y/></x>;(((yield 1e-81).__lookupSetter__(\"__noSuchMethod__\"))); }");
tryItOut("/*infloop*/do {if(__proto__) { if (yield 1e81) {gc()var __noSuchMethod__ =  /x/ , __count__ = <><x><y/></x></>; } else break L;} } while(#1#);");
tryItOut("/*for..in*/__parent__");
tryItOut("this.zzz.zzz;");
tryItOut("return undefined\n(1e81);");
tryItOut("/*infloop*/while(\t++window){let ([]) { /*infloop*/for(const __count__; constructor%=__parent__; <><\fx><y/></x></>\n) export __parent__; }/*infloop*/for(var ({ __parent__: __count__ }) = (3.prototype = arguments); this.__defineGetter__(\"__count__\", (new Function(\"export __count__;\"))); (new (eval).apply(arguments))) ({ prototype: prototype, __iterator__: __iterator__ }) }");
tryItOut("prop = __parent__\n");
tryItOut("let __proto__ = __iterator__, __noSuchMethod__ = window\n/*infloop*/for(var get = (-1); null; <x/>) gc()");
tryItOut("L:  '' ;");
tryItOut("if((__proto__\t = <y><z/></y>)) /*for..in*//* nogeckoex bug 349964 */ for  each(this in __count__) {;yield; } else /*for..in*/for(let prototype in #3={a:#3#}) {}");
tryItOut("if(__parent__ = new RegExp(false).isPrototypeOf(this.watch(\"__noSuchMethod__\", /a/gi)) >= __count__ = constructor = this.__defineSetter__(\"constructor\", @foo)) yield D; else  if (--(p={}, (p.z = <><x\t><y/></x></>)())) {export *;/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.__parent__ in <x><y/></x>) (this); }");
tryItOut("{export prop; }");
tryItOut("\f(<y><z/></y>); const __noSuchMethod__;");
tryItOut("'haha'.split");
tryItOut("/*for..in*/M:for(const [__count__, __noSuchMethod__] = (__parent__ = 3) in 5.0000000000000000000000) return;");
tryItOut("L: {const __count__ =  /x/g ;yield; }");
tryItOut("export __iterator__\n/*infloop*/do yield; while(<><x><y/></x></>);");
tryItOut("if((new (function(y) { yield y; <x><y/></x>; yield y; })(window ? true : window, undefined))) { if ((0/0 >= *::*)) let __proto__ = window;} else {export yield;return; }");
tryItOut("throw StopIteration;");
tryItOut("if(<y><z/></y> * this) (this);");
tryItOut("/*for..in*/for(let [__proto__, __proto__] = ((yield (function ([y]) { })().unwatch(\"__proto__\"))) in (({ get __count__ prop (constructor) { const __proto__ = <x/>; } ,  set __proto__ __parent__ (({ __count__: prototype, __parent__: __iterator__ }), __parent__) { yield __count__.prop = this.__parent__ }  }))) {throw @foo; }");
tryItOut("__iterator__;\nlet __proto__ =  /x/ , prop = <x><y/></x>;\n");
tryItOut("L:with({each: <y><z/></y>})/*for..in*/for(const [__parent__, __proto__] = (yield  /x/ ) in (null &&  /x/g )) {gc()({}).__lookupGetter__ }");
tryItOut("if( /x/  %= *::*) throw 0/0; else return;");
tryItOut("if([(1e81.propertyIsEnumerable(\"__count__\"))[let (__proto__ = <x/>) false]({ __count__: constructor }) = __proto__ = <x/> === [window.__defineGetter__(\"delete\", [1,2,3,4].map)].filter(/a/gi)]) { if (({}).__lookupGetter__) yield window\nL:with({constructor: <x><y/></x>}){const __noSuchMethod__, __noSuchMethod__; }} else {/*infloop*/L:for((new Function(<><x><y/></x><\r/>)) >>= function::__parent__.(1e4); ({each: (),  set prop __parent__ (__count__, __proto__)true.unwatch(\"__count__\") }); new (function  __count__ () { (1 for (x in [])) } )(<x\f><y/></x>.(0/0))) {{export __count__; }continue ; } }");
tryItOut("with({}) { return; } ");
tryItOut("if(()) /*infloop*/for(let __iterator__ =  '' ;  '' ; *::*) return null;");
tryItOut("let (__parent__ = __noSuchMethod__, prop) { gc() }");
tryItOut("if( '' [__proto__]) {return function ([y]) { }; } else  if (\t__count__.(4. instanceof __proto__)) return; else M:if(__proto__) ( /x/g ); else  if ( \"\" ) {gc()continue M; } else {return;let __count__; }");
tryItOut("with(new (((yield true)))(-1 in __proto__))L: {if(<x/>) {(({a1:1})).__defineSetter__ } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in __noSuchMethod__.constructor setter= 'haha'.split) M:if( /x/ ) ((-1)); else  if ( '' ) export __proto__;");
tryItOut("/*infloop*/\tfor(<x/> * 0/0; __count__ % undefined; ({ set prop(__count__, __noSuchMethod__)try { Math.sin } catch(__iterator__) { return ({}); } finally { __noSuchMethod__ =  \"\" , __iterator__; }  })) {return;[1,2,3,4].slice }");
tryItOut("throw __count__;");
tryItOut("with({}) var ({ __parent__: \tconstructor }), __noSuchMethod__;");
tryItOut("__iterator__\n/*infloop*/M:for(<><x><y/></x></>; [[]]; <><x><y/></x></>) __count__ = [,,z1], __parent__;");
tryItOut("M:with({constructor: <x><y/></x>.hasOwnProperty(\"__count__\")})/*for..in*/M:for(let prototype in 5.0000000000000000000000) {yield; }\f");
tryItOut("do try { try { gc() } catch(__iterator__) { ; }  } catch(__iterator__ if (function(){with({}) { with({}) throw StopIteration; } })()) { try { this.zzz.zzz; } catch(constructor) { return <x><y/></x> &= [1,,]; }  } finally { return; }  while((((({__noSuchMethod__: [] }) for ((prop) in window) for (__count__ in  '' ) if (true)))) && 0);");
tryItOut("const __iterator__ = null\nexport __parent__;");
tryItOut("let (({ __iterator__: ({ prop: __iterator__ }), __proto__: [, [, ], , __count__, __count__] }) = (\t<x><y/></x> !== 5.0000000000000000000000), [[({ constructor: constructor, return <><x><y/></x></>;: ({ prototype: constructor, prototype: constructor }) }), , ], (\f{ __count__: __parent__, __noSuchMethod__: prop }), [], , ]) { /*infloop*/for(; ({ prototype: __proto__ }); prototype = (this.__defineSetter__(\"__proto__\", Math.sin))) {\n } }");
tryItOut("L: {var prototype =  /x/g , prop = <><x><y/></x></>;/*infloop*/while(@foo){export __noSuchMethod__;'haha'.split } }");
tryItOut("with({})  /x/g  = prop;for(let y in []);");
tryItOut("yield yield (<><x><y/></x></> >>= true);");
tryItOut("with(({ get __proto__ __iterator__ (__proto__) { return *::* } , function::__iterator__ setter:  \"\"  }))return 1.2e3;");
tryItOut("while((<x/>) && 0);");
tryItOut("if([11,12,13,14].some) throw <><x><y/></x></>;");
tryItOut("let (__iterator__, function::__iterator__) { {} }");
tryItOut("/*infloop*/do if( /x/ ) { if ((prop = <x><y/></x>)) {const prop = window, __count__;continue M; } else {export constructor; }} while(('fafafa'.replace(/a/g, <><x><y/></x></>)));");
tryItOut("/*for..in*/for((<x><y/></x>)(<x><y/></x>) in (({}).__lookupGetter__)(#2=[(try { (<x><y/></x\f>); } catch(__parent__ if (function(){return;})()) { function (__parent__) { ; }  } catch(constructor if <y><z/></y>) { ; } catch(__iterator__ if <x/>) { __noSuchMethod__; } .isPrototypeOf(<><x><y/></x></>))], ({__proto__: <><x><y/></x></>, __noSuchMethod__: * }))) if( '' ) {eval } else  if (undefined) {throw <x/>; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {yield; } while(this.__defineSetter__(\"prop\", window).throw(( /x/g .propertyIsEnumerable(\"prop\"//h\n))))\n");
tryItOut("Math.pow\n");
tryItOut("/*infloop*/for(let ({ __proto__: ({ __count__: ({ constructor: prop }), __parent__: ({ __proto__: __count__, x::__proto__: constructor }) }) }) = ([15,16,17,18].some((new Function(\"\")), <><x><y/></x></> <<= window)); __noSuchMethod__.constructor = __count__(<><x><y/></x></>); this) {let (__proto__ = (function ([y]) { })(), __parent__ = -0) { throw *; }Math.pow }");
tryItOut("{throw 0x99;let prop = #1=[#1#], __iterator__; }");
tryItOut("/*infloop*/for(const constructor; (new Error()); __count__ = [,] >= [,,z1]\n) (#1=[#1#]);");
tryItOut("export *\nexport constructor; const __noSuchMethod__\n");
tryItOut("/*infloop*/while(this.__defineSetter__(\"__proto__\", Math.sin)\n %= ((__proto__ = <x/>) > (case 8: /*for..in*/for(var __proto__ = <><x><y/></x></> in <><x><y/></x></>) {let __count__, constructor;export prop; }break; )(undefined))){M:if(@foo) [[1]]; else yield; }");
tryItOut("with({}) for(let y in []);");
tryItOut("M:if(@foo) { if (<><x><y/></x></>.__count__) ( '' ); const __count__;} else if((undefined for (__count__ in __parent__))) (<><x><y/></x></>); else  if (constructor = #1#) return  \"\" ; else {yield; }");
tryItOut("with({constructor: <><bbb xmlns:ccc=\"this.__defineSetter__(\"prototype\", function(q) { return q; })\"><ccc:eee></ccc:eee></bbb></>})with({__count__: eval(\"this\", this) + (<x><y/></x>.propertyIsEnumerable(\"prop\"))})throw [,,z1];");
tryItOut("let (prototype = ({__iterator__ setter: ({}).__lookupGetter__ })\n) { /*\n*/ { M:if(this.__defineGetter__(\"__count__\", Math.pow)) {gc() } else  if (<x/>.@foo) export *; }  }");
tryItOut("\fif( /x/ ) (<><x><y/></x></>); else  if (<x><y/></x>)  else export *;");
tryItOut("let __noSuchMethod__;\nL: gc()\n");
tryItOut("/*infloop*/L:for(=.isPrototypeOf(__count__ = prop) <= ({a1:1}); (__iterator__.prototype setter= function(y) { yield y; if([033].filter((__iterator__).apply)) { if () {var prop, (<x/>);; } else {let __iterator__ = *;{} }}; yield y; }); (constructor.__proto__ = ( /x/g )[@foo])++) {/*infloop*/while((.yoyo(undefined))){/*infloop*/for(const __iterator__ = <x><y/></x>; 1.2e3; -0) {([[1]]); } } }L: {return constructor; }");
tryItOut("let (__noSuchMethod__ = ((__parent__.prop) for (((this.__defineSetter__(\"__parent__\", function(q) { return q; })))((window)[<x><y/></x>]) in __parent__.prop))) { constructorconst __count__, __count__; }");
tryItOut("/*infloop*/while(<y><z/></y>.eval(<>constructor</>)){(prop).watch__parent__ = *::*, prototype = <><x><y/></x></>; }");
tryItOut("M:if(__count__.(3)) return;");
tryItOut("switch(<x/>) { default:  }");
tryItOut("do {{} } while((new (({}).__lookupGetter__)(<x><y/></x>, false)) && 0);");
tryItOut("M:if(@foo\n) { if ([11,12,13,14].map) {with(<><x><y/></x></>){yield ({});let __noSuchMethod__ = <x><y/></x>, prop = <><x><y/></x></>/*\n*/; }({ __noSuchMethod__: __parent__ }) = let (prop = <><x><y/></x></>, __proto__ = <><x><y/></x></>)  /x/g ; } else /*infloop*/L:for(var ({ __noSuchMethod__: ({ __iterator__: constructor, __proto__: ({ __parent__: ({ constructor: __parent__, __count__: prop }) }) }) }) = __parent__|=<x><y/></x>.@*; constructor; (033.__defineGetter__(\"constructor\", function(q) { return q; })) ? <y><z/></y>.hasOwnProperty(\"prop\") : (\rprototype.yoyo(prototype))) {let (constructor, __count__ = *::*) { return; } }}");
tryItOut("this.zzz.zzz;");
