tryItOut("M:if((\n__iterator__).hasOwnProperty(\"__proto__\")) { if (#2=!<x><y/></x>()) <x><y/></x>}\t else {}");
tryItOut("let (__noSuchMethod__ = <employee id=\"1\"><name>Joe</name><age>20</age></employee>) { {if(window) {return <x><y/></x>;new Function } else  if (<x><y/></x>) {gc() if (1e+81) }gc(){} } }");
tryItOut("yield\nlet prototype = <x><y/></x>, prototype = __proto__;");
tryItOut("L: {throw prop;__count__ = window, __parent__; }");
tryItOut("/*infloop*/do {{}; } while(null);");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("/*infloop*/while( '' .yoyo(prototype) !== new RangeError(-1)){throw ({}); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var function::__iterator__ in ((this.__defineGetter__(\"constructor\", function(q) { return q; })))) const prototype;");
tryItOut("/*infloop*/L:do {if(<x/>) break M; else  if ( '' ) ((function ([y]) { })()).watch else {return; }//h\nwhile(((Function)()) && 0)__parent__; } while((--*::*));");
tryItOut("let(prototype, ({ __iterator__: ({ __count__: [] }) })) { yield __noSuchMethod__;");
tryItOut("{continue L; }");
tryItOut(";");
tryItOut("/*infloop*/do export *; while(<>this</>);");
tryItOut("(<y><z/></y>)");
tryItOut("/*for..in*/for(__parent__ = 1e-81 in [,,z1]) export *;");
tryItOut("const __iterator__ = *; const constructor;");
tryItOut("yield; const __proto__");
tryItOut("/*infloop*/L:for(<x><y/></x>.isPrototypeOf(__count__).__lookupSetter__(\"__count__\"); new __count__(); (p={}, (p.z = <x/>.propertyIsEnumerable(\"__proto__\"))())) {function  __parent__ (each) { var constructor = <><x><y/></x></>, __parent__; } ; }");
tryItOut("with({prototype: \t((4..watch(\"prop\", function  prototype () { <x><y/></x>; } ).__lookupSetter__(\"__iterator__\"/*\n*/)).isPrototypeOf(__parent__ =  /x/ )) ^= window})/*for..in*/for(let constructor in ((function (prototype, get) { yield <bbb xmlns:ccc=\"new function  constructor ()[z1]()\"><ccc:eee></ccc:eee></bbb> } )(([15,16,17,18].some(function  __parent__ (__count__, __iterator__) { yield (false += *) } , [((uneval(<x/>)))])).valueOf(\"number\") ? this : eval(\"/*for..in*/for(prop in (((new Function(\\\"(1e-81);\\\")))(prop))){}\", <x><y/></x>.throw(<y><z/></y>))))){break M; const constructor; }");
tryItOut("switch((__count__ = <x><y/></x>)) { default: throw prop;case __noSuchMethod__.constructor = ((this.__defineSetter__(\"setter\", 1e4)) && *): with({}) export *;break;  }");
tryItOut("if(false) { if (yield null;) {<x><y/></x> } else {export __proto__;return constructor; }}");
tryItOut("{}M:with(undefined){export __proto__;__iterator__; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = (yield 1.3) in ({a2:z2})(this, prototype)) {{}(@foo); }");
tryItOut("L:if( /* Comment */(void prototype)) { if ( set __proto__ __parent__ (prop)(undefined())) {if(prototype%=window) {constructor; } else  if (++__noSuchMethod__) {let __iterator__ = <><x><y/></x></>, __parent__; } else eval } else return 5.0000000000000000000000;}");
tryItOut("do {;var __noSuchMethod__, __proto__ = @foo; } while((@foo) && 0);");
tryItOut("do return\n{} while((__iterator__ = __proto__) && 0);");
tryItOut("throw StopIteration;");
tryItOut("( /x/g );\n \"\" ;\n");
tryItOut("{}\n");
tryItOut("M:if(__parent__ = *.yoyo([z1,,]).__lookupSetter__(\"constructor\")) {let (__count__, __proto__) { /*for..in*/\ffor(__noSuchMethod__ in ((Function)(<><x><y/></x></>)))let __proto__ = <x><y/></x>, prop; }const __parent__; } else  if ([15,16,17,18].filter(function(q) { return q; }, (<x/>\n))) { \"\" ;\n;\n }");
tryItOut("let(({ __parent__: __count__, __iterator__: __noSuchMethod__ })) ((function(){with({}) var __noSuchMethod__, __proto__ = *;})());");
tryItOut("export *;");
tryItOut("if(constructor.__parent__ = <><x><y/></x></>) {continue ; } else ;");
tryItOut("if(new (('fafafa'.replace(/a/g, ({}).hasOwnProperty)) ? __count__ = [15,16,17,18].map((prototype).apply, <x/>) : (delete new Date(<x/>)))(yield [15,16,17,18].some(({}), <><x><y/></x></>\t), (prop = __iterator__))) /*for..in*/for(var __proto__ = this in ({a2:z2})) {return window;export __parent__; } else  if ((uneval(((<x/> if ( /x/g ))))).hasOwnProperty(\"__noSuchMethod__\")) {/*infloop*/for(let [prop, , prototype]\t = (this.zzz.zzz); (#2=*); Math.sin) {break M;yield; } }");
tryItOut("/*for..in*/for([__noSuchMethod__, __parent__] = 1e+81 in <x><y/></x>) {; }");
tryItOut("(this);");
tryItOut("/*infloop*/do {with({get: (( \"\"  ::  '' )(undefined.propertyIsEnumerable(\"__noSuchMethod__\"), __count__))}){gc()M:do {return __noSuchMethod__; } while(( '' ) && 0); } } while(({prototype: [1,,] <<= this.unwatch(\"__iterator__\"), [__iterator__, ({  '' : __proto__ }), __noSuchMethod__]: ('fafafa'.replace(/a/g, {})) }));");
tryItOut("while((undefined) && 0)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const @foo in [z1]) yield;");
tryItOut("{M:do prototype = [,,]; while((#0=(const prop = -1, __parent__) -= <x/>.eval(*)) && 0); }");
tryItOut("switch(({}).__lookupGetter__()) { case 3: {throw *; }break; default: return  /x/g ;<y><z/></y>case 7: ; }");
tryItOut(" /x/g ;\nyield;\n");
tryItOut("/*infloop*/M:for(let ({ prop: __iterator__, prototype: __count__ }) =  /x/ ; (); <x/> ,  '' ) var prototype, __parent__ = *;");
tryItOut("if(((constructor.__noSuchMethod__ = *::*) > [__proto__].map(Function))) { if ( \"\" ) yield  /x/g ; else if(#1=[#1#]) {(<x/>); } else yield;}");
tryItOut("/*infloop*/for(__count__; ({__proto__: undefined, prototype: __proto__ }); ((eval(\"\", arguments)) != let (__count__ = __noSuchMethod__) [1,,])) yield undefined;");
tryItOut("with({}) yield (this.__defineSetter__(\"__proto__\", @foo));");
tryItOut("prop, __proto__ = 1e+81\n");
tryItOut("{let (__parent__) { const __parent__, prototype = 1.2e3; }/*infloop*/do {const prototype, __iterator__ = [[]]; } while(<x><y/></x>); }");
tryItOut("let (__parent__, __count__ = ((gc).call(new undefined(), ))) { try { var __iterator__, __count__ = true; } catch(__proto__) { continue L; } finally { yield; }  }");
tryItOut("let(__parent__) ((function(){return;})());");
tryItOut("if( /x/ ) { if (true) (undefined); else gc()} const __proto__;");
tryItOut("if((({ __count__: __proto__, prop: __proto__ }))) Math.pow\nswitch(([15,16,17,18].some((new Function(\"yield;\")), null).__lookupSetter__(\"__count__\"))) { default: break;  }");
tryItOut("/*for..in*/for(var __iterator__ = false in @foo) {/*for..in*/for(const __parent__ in __iterator__) break ; }");
tryItOut("{return <x/>;break ; }");
tryItOut("throw <><x><y/></x></>");
tryItOut("if((new (new Function(\"({ constructor: ({ constructor: __iterator__ }) })\"))(<y><z/></y>))) { if ([__proto__ == <x/> >>> @foo]) /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <y><z/></y>) continue ;\r else {}}");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = (new )function  __count__ (x::__proto__) {  } () in <x><y/></x>) /*infloop*/M:for(false; [z1,,]; true) (true);");
tryItOut("(*::*);");
tryItOut("{with({__parent__: x::__parent__}){export x::__noSuchMethod__; }\f }");
tryItOut("do __proto__, __proto__ = <><x><y/></x></>; while(((this > false)--) && 0);");
tryItOut("if((this.__defineGetter__(\"prop\", [[]].__iterator__))) {L:if(<y><z/></y>--) { if (new __noSuchMethod__, __iterator__;()) export __parent__; else let __parent__;} } else {__proto__ = 0/0, __iterator__; }");
tryItOut("{throw StopIteration;/*for..in*/M:for(constructor = __proto__ =  /x/g  in #3={a:#3#}) <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const [constructor, prototype] = window.throw(([15,16,17,18].map(function(y) { yield y; prop;; yield y; }, <><x><y/></x></>))) in (new (1 for (x in []))())) __proto__, prop = *::*\nreturn;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M:\f for  each(var [15,16,17,18].some((1 for (x in [])), <><x><y/></x></>).__parent__ in ({__count__ setter: 'haha'.split })) {}\n");
tryItOut("if((uneval((@foo.yoyo(true) || constructor( '' ) = (Object(false, undefined)))))) { if ((((undefined++) for each (__iterator__ in __noSuchMethod__) for (prop in window)) |= <{__proto__}></{__proto__}>.(this))) this} else let (__noSuchMethod__, prototype = <><x><y/></x></>) { (*); }");
tryItOut("if( \"\" ) return false; else  if (( get __parent__ __proto__ (__iterator__, prototype) { return (-0) }  = prototype)) {;export __noSuchMethod__; }");
tryItOut("/*for..in*/for(const prop = yield new (<x/>)(window, <x/>) in ((yield null))) const __parent__;\ngc()\n");
tryItOut("case 5: ;export prototype\nbreak; default: break; case <> </>: ;break; break; /*for..in*/for([__count__, __parent__] = new  in 3/0) {if(0.1) gc() else  if (<><x><y/></x></>) yield; else {prop = <x><y/></x> } }break; break; /*infloop*/M:for(var __parent__; <x><y/></x>; <x/>) {}");
tryItOut("/*for..in*/for([prototype, __noSuchMethod__] = delete <><x><y/></x></> in ({ __iterator__: __parent__ }) = ({ prototype: __noSuchMethod__, __iterator__: __iterator__ })) /*for..in*/L:for(var prototype = __parent__.yoyo(*) >= __proto__.__parent__ = <><x><y/></x></> in __count__) yield <x><y/></x>;");
tryItOut("if( /x/g .__defineSetter__(\"__noSuchMethod__\", gc)) \t{let (constructor = (continue M)) { window; }/*infloop*/while(prototype){@foo;Math.sin } }");
tryItOut("L:with(({__iterator__: null})){export __count__; }\nswitch(<><x><y/></x></> instanceof *::*) { default: break; case 2: break;  }\n");
tryItOut("if(({__noSuchMethod__ getter: [1,2,3,4].slice })) { if (prototype.(<x><y/></x> .@x:: <><x><y/></x></>)) /*infloop*/for(var prop = *::*; false; <x><y/></x>) {new Function__iterator__ = this, __iterator__; } else if(<><x><y/></x></>) {var constructor = @foo, __parent__; } else let __count__ = <x/>;}");
tryItOut("M:if(<x><y/></x>.hasOwnProperty(\"__parent__\")//h\n) ((\x7f = constructor)) .. !<><x><y/></x></> else  if (prototype) {if(<><><ccc:ddd> </ccc:ddd>\f</></>)  } else if(__parent__) {export *; } else  if (prop) return <y><z/></y>;");
tryItOut("/*infloop*/do { } while(new (gc)());");
tryItOut("if((+<y><z/></y>)) { if ((eval(\"__noSuchMethod__ = __count__;\", (<x><y/></x>.(<x/>))))) return false\nyield;} else throw true;");
tryItOut("__noSuchMethod__ =  /x/ ;");
tryItOut("if(* ?  ''  : this) return; else  if (<><><><x><y/></x></></></>) if(<x><y/></x>) {export *;yield; } else {return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ( /* Comment */<y><z/></y>)['prototype'] in *::*.@*) {if(this.watch(\"__proto__\", (/a/gi).apply)) {({}).hasOwnPropertyL:if(this.__defineGetter__(\"constructor\", false)) {yield; } else __parent__ = [,], prototype =  '' ; } }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("with({}) return;");
tryItOut("let (__parent__ = new (new Function)()) { var __proto__ = (-0); }");
tryItOut("{}");
tryItOut("/*infloop*/for(var __proto__; (undefined.watch(\"function::__noSuchMethod__\", 0)); prop.constructor = (<x><y/></x> for (prop in <x/>))) 'haha'.split const __iterator__;");
tryItOut("return eval(\"(<x/>);\", <x><y/></x>);");
tryItOut("/*infloop*/for(prop = ((p={}, (p.z = (@foo =  '' ))())); null; ([11,12,13,14].sort)) /*for..in*/for(__proto__ in  \"\" ) {break M; }");
tryItOut("{/*for..in*/for(__proto__ = <x><y/></x> in {}) {break ; }<><x><y/></x></>; }");
tryItOut("return;");
tryItOut("M:if( /x/g ) { if (true) {export prototype; } else {yield; }}");
tryItOut("yield;");
tryItOut("let (constructor = __noSuchMethod__.setter ? this.zzz.zzz : <><x><y/></x></> ? [11,12,13,14].map : \nconstructor, __count__ = ((uneval(*::*)) = (<x/> ? <><x><y/></x></> :  '' ))[(__proto__.__count__)].__noSuchMethod__ = this.zzz.zzz) { throw StopIteration; }");
tryItOut("/*for..in*/for(prop = (uneval(<x/>)) in this.zzz.zzz) gc()");
tryItOut("/*for..in*/for(/*\n*/const __count__ in ((function (prop, __proto__) '' )(false))){return; }");
tryItOut("M:if(<x><y/></x>) { if (({a1:1})) {;export prop; } else prop = 033}");
tryItOut("{while(({}.eval(__iterator__)) && 0){export __iterator__; } }");
tryItOut("L:if(yield __iterator__) /*infloop*/L:while(window){continue ;export *; } else __count__");
tryItOut("gc()");
tryItOut("while(((eval(\"{}\", <><x><y/></x></>))) && 0){throw __parent__; }");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(let ({ __proto__: [__count__, __count__] }) = prototype = <><bbb xmlns=\"prop.__proto__\"><employee id=\"1\"><name>Joe</name><age>20</age></employee><!--yy--></bbb></>.unwatch(\"__proto__\"); ('haha'.split)(__count__.prototype, [].__noSuchMethod__); [11,12,13,14].map.__noSuchMethod__ = ((<><x><y/></x></>).__defineSetter__)( /x/g .prototype = *::*)) {if(<><x><y/></x></>) __proto__ = <y><z/></y>, __proto__ = true; else {return @foo; }{__noSuchMethod__(-0) } }");
tryItOut("/*infloop*/do /*for..in*/for(__proto__ in 3.141592653589793) {gc()throw this; } while(__parent__.__iterator__ getter= ([z1]).__defineSetter__);");
tryItOut("{yield null;\nwhile((new #1=[#1#]([15,16,17,18].some((__proto__).call, ))) && 0)__count__%=<x/>;\n");
tryItOut("while((false) && 0){while((033) && 0){throw __iterator__; } }");
tryItOut("/*infloop*/do {return null; } while(<><x><y/></x></>);");
tryItOut("/*infloop*/for(__noSuchMethod__; (); new Object()) yield;");
tryItOut("break L;");
tryItOut("{if(constructor :: false !==  /* Comment */prototype) { if (null) {return;{} } else ;} }");
tryItOut("L:switch(null.unwatch(\"prop\")) { case <><x><y/></x></>--: break;  }");
tryItOut("let (prototype = <xxx {prototype}={([* for each (__count__ in {})])} />, prototype) { throw StopIteration; }");
tryItOut("/*for..in*/M:for(var [__parent__, __iterator__] = 1.3 ? <><x><y/></x></> : <y><z/></y> in (<y><z/></y>)[<y><z/></y>]) {const __noSuchMethod__;yield [1,,]; }");
tryItOut("while(( /x/ ) && 0);");
tryItOut("M:if(<><x><y/></x></>) {return true; }");
tryItOut("/*infloop*/M:for(033.@foo; __iterator__.constructor = true; (Function)( /x/ )) export *;");
tryItOut("for(let y in [5,6,7,8]) gc()\n");
tryItOut("L:with({constructor: (({__noSuchMethod__:  /x/ })) in ((yield <x><y/></x>.valueOf(\"number\"))[@foo << <><x><y/></x></>]), this.__defineGetter__(\"__iterator__\", (window).apply)}){gc(){} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let *::* in <><bbb xmlns=\"*\"><ccc:ddd>yyy</ccc:ddd></bbb></>) {throw ++true;\t/*for..in*/for(const __parent__ in -1) {__count__; }\ngc()\n\n }");
tryItOut("");
tryItOut("let (__proto__) { if(({a1:1})) { if (__count__) {gc() } else const __iterator__ = window, __proto__;} }");
tryItOut("let(({ __proto__: __iterator__, constructor: prop }) = (<y><z/></y> ? function(id) { return id } : @foo), prototype = 3) { for(let y in []);");
tryItOut("M:if(__iterator__) {export *; } else  if (<><x><y/></x></>) {__iterator__ = *; }\nbreak M;");
tryItOut("gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__.constructor in 0.1) {return <x><y/></x>;continue ; }");
tryItOut("for(let y in []);");
tryItOut("break L;/*infloop*/for(<x/>; <x><y/></x>; null) {yield @foo;return; }");
tryItOut("yield __proto__;");
tryItOut("/*infloop*/M:for(new (<><x><y/></x></>)(); (this.__defineSetter__(\"x::__count__\", window)); (prop.__iterator__)) yield  \"\" ; const __iterator__;");
tryItOut("/*infloop*/for(const ({ __parent__: ({ __iterator__.__parent__: [, , ], prototype: [__iterator__, prop, ] }), function::__iterator__: \r({ __iterator__: ({ __noSuchMethod__: __proto__ }) }) }) = __proto__ = (<><x><y/></x></>\n); *::*; <>yyy</> *= 0/0) yield <><x><y/></x></>;");
tryItOut("'haha'.split\n/*infloop*/do {let __parent__ = <>< __noSuchMethod__, __count__ x><y/><'/'x></>; '' ; } while(({__proto__: <x><y/></x>}));\n");
tryItOut("L: export prototype;");
tryItOut("/*infloop*/for(const __noSuchMethod__; [@foo](({let getter: ({}).hasOwnProperty, __parent__ getter: Math.sin })); new (Math.pow)( /x/ , 1e81) === ()) gc()");
tryItOut("L: (<y><z/></y>)([[]])");
tryItOut("try { continue L; } catch(__proto__) {  } ");
tryItOut("/*infloop*/for((__parent__); (this.__defineSetter__(\"__noSuchMethod__\", ({a1:1}))\n.@*); -1) ");
tryItOut("if((this.__defineSetter__(\"__parent__\", <x><y/></x>))) {return; } else yield;");
tryItOut("if((this.__defineSetter__(\"constructor\", (function  __parent__ (function::constructor) {  } ).call) for each (__iterator__ in __proto__) if (undefined))) {return [1,,]; } else  if (({prototype: window, __iterator__: <y><z/></y>.propertyIsEnumerable(\"__proto__\") }) / (null.isPrototypeOf(<x><y/></x>))) throw <x><y/></x>;");
tryItOut("L:with({__parent__: let (__iterator__ = {}) *::*})return 1e+81;");
tryItOut("");
tryItOut("/*for..in*/for(__parent__ in true) return ({})\nswitch((([1,2,3,4].map)(0x99, window))) { default:  }");
tryItOut("for(let y in [5,6,7,8]) prop = constructor;");
tryItOut("{/*for..in*/for(var ({ prototype: [], __count__: prop }) in ((function ([y]) { })().\fyoyo( \"\" ).__lookupSetter__(\"__count__\"))) export *; }");
tryItOut("/*for..in*/for(const __parent__ in (this.zzz.zzz)) {\nyield  /x/ ;\n }");
tryItOut("switch( '' .prototype = prop.valueOf(\"number\")) { default: M:if((yield ({try { let(constructor = [ /x/g ].map(\f<x><y/></x>)) ((function(){this.zzz.zzz;})());\t } finally {  }  }))) {throw function ([y]) { };export prototype; } else  if (([[]] >> this)) export *; else {throw <><x><y/></x></>;{} }break; case ([1,2,3,4].slice(eval(\"this.isPrototypeOf(@foo)\",  /x/ )--)): break; break; case 2: const __parent__ = <y><z/></y>;break; case (__proto__ = <x/>.valueOf(\"number\")): break; /*infloop*/for(var function::__parent__; __iterator__.prop; ) {({break M;return null; }); }gc()break; case (#0=[false]): {}break; with([-1].map(Math.sin)){__parent__ = *::*, __iterator__ = <x/>;(<y><z/></y>); }break; break; ({}).hasOwnProperty }");
tryItOut("switch((__parent__ = <x><y/></x> <= ({a2:z2}))) { default: yield window;export prop;break; case 9: /*for..in*/L:for(__noSuchMethod__ = (-0).__defineSetter__(\"__iterator__\", prop).__parent__ =  '' .valueOf(\"number\") in __parent__) {__count__, prop = <y><z/></y>; }break; //h\n(constructor);break;  }");
tryItOut("prop;");
tryItOut("/*for..in*/for(var [__parent__, constructor] = @foo in <><x><y/></x></>) {return; }");
tryItOut("if(__count__.__proto__ = new __parent__ = (#0=[\t<><x><y/></x></>])(arguments.__iterator__, eval(\"gc()\", <><x><y/></x></>))) {gc() } else  if ((<x><y/></x>.hasOwnProperty(\"constructor\")).eval(null)) {;new __noSuchMethod__(<x><y/></x>).__lookupGetter__(\"prototype\"); } else return false;");
tryItOut("{yield *; }");
tryItOut("/*for..in*/for(let [prototype, /*for..in*/for(var __count__ in @foo) {yield;return; }] = (*::*.propertyIsEnumerable(\"__parent__\") <<= (1.2e3.__lookupSetter__(\"__proto__\"))) in (\n((prototype.valueOf(\"number\"))\n))) {yield; }");
tryItOut("/*infloop*/L:while((*.watch(\"prop\", (constructor =  \"\" ).watch))){if((({}).hasOwnProperty)) {var __proto__ = <x><y/></x>, prototype = <x><y/></x>\n } }");
tryItOut("{function (__iterator__) { return; } {} }");
tryItOut("/*for..in*/for(prop.__proto__ in <y><z/></y>) __parent__;");
tryItOut("switch((((export __parent__)).watch()) || (function(y) { yield y; (this);; yield y; })(__parent__, this)) { default: break; throw <x><y/></x>;case ( \"\"  & <x><y/></x>): break; break; break; case 8: break; break;  }");
tryItOut("M:if(<x><y/></x>.throw(<x><y/></x>).valueOf(\"number\")) export __iterator__; else L:switch(<x/>) { default: case 7: return;break; case 1: break;  }");
tryItOut("/*for..in*/M:for(const __parent__ in #1#.__defineSetter__(\"__noSuchMethod__\", Math.pow)) /*for..in*/for(var __iterator__ = (<\f><x><y/></x></>) in arguments) true;");
tryItOut("if(([1,2,3,4].slice)) {/*for..in*/L:for(var [__iterator__, constructor] = ([11,12,13,14].some) in  /x/ ) {(window);yield <y><z/></y>; }throw __count__-=function ([y]) { }; } else ;");
tryItOut("/*infloop*/do {prop, prototype;M:if(([,]).call([], __noSuchMethod__ << <x/>, prop)) {__iterator__, __noSuchMethod__ = <><x><y/></x></>; } else  if ([15,16,17,18].map(constructor, gc(window))) continue ; } while( \"\" .__lookupGetter__(\"__noSuchMethod__\"));");
tryItOut("{/*for..in*/for(let __parent__ in ((function () { return __proto__ =  /x/  } )((__proto__ = 3))))yield;/*infloop*/for(let prototype; this; false) {*::*;throw <><x><y/></x></>; } }");
tryItOut("L:if((uneval( /x/g .watch(\"__proto__\", (function(q) { return q; }).call)))) {/*for..in*/for(let prototype.constructor in true) ({ []: ({ prop: __iterator__ }), prop: ({ __proto__: __parent__, __noSuchMethod__: prop }) })continue L; } else /*\n*/{gc() }");
tryItOut("{/*infloop*/do __proto__ = *::*, prototype; while(__iterator__.__count__); }");
tryItOut("if( \"\" ) { if ( /* Comment */<y><z/></y>) {if(window) {__iterator__ } else  if ( \"\" ) (new Function(\"break ;\")) } else yield window;}");
tryItOut("/*infloop*/for(const prop = <><x><y/></x></>; [1]; *) export *;/*for..in*/for(let __proto__ in ({})) __proto__ = <\fx><y/></x>, __count__ = <><x><y/></x></>;");
tryItOut("\twith(this << <y><z/></y>){with({__proto__: (<><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", new Function))})'fafafa'.replace(/a/g, function(y) { yield y; ; yield y; }) }");
tryItOut("M:with(#2=({__iterator__: (<x/> + <><x><y/></x></>)}))/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in  /x/ ) <bbb xmlns:ccc=\" /x/ \"><ccc:eee></ccc:eee></bbb>");
tryItOut("__proto__;__parent__ = 0x99, __count__\n{/*infloop*/for(null; window; null) {(*::*);yield; } }");
tryItOut("do {let __proto__ = <x/>; } while((true) && 0);");
tryItOut("constructor = *::*; const constructor;");
tryItOut("/*for..in*/for(__noSuchMethod__ = <xxx {__iterator__}={false} />.((false.watch(\"__noSuchMethod__\", *))).hasOwnProperty(\"__proto__\") in <>/*for..in*/for(var __count__ in ) .2;</>[__proto__]) {(<!--yy-->); }");
tryItOut("M:if(({}).hasOwnProperty()) {\nL:if(prototype = [1,,]) let __noSuchMethod__; else  if (undefined .@*::  /x/g ) yield;{return <><x><y/></x></>; } } else  if (([,] > (((<><x><y/></x></> + prototype).watch(\"__iterator__\", ({}).hasOwnProperty)) > *::*.valueOf(\"number\")))) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x><y/></x>) export *; } else {throw __iterator__; }");
tryItOut("while((new (null(false, <><x><y/></x></>))(<y><z/></y>, <>__proto__</>)) && 0)export __parent__;");
tryItOut("while((<><x><y/></x></>) && 0){(@foo);\f }");
tryItOut("/*for..in*/for(const [prototype, __proto__] = window in this) __iterator__.__iterator__");
tryItOut("/*infloop*/L:for(var ({ __iterator__: [__count__, , __parent__] }) = [new (new Function(\"{}\"))() if ((function ([y]) { })())]; \neval(\"export __parent__;\", M:with({constructor: x::constructor = false}){const __count__; }).__proto__; constructor.(1.3) += (uneval(prop))) {this; }");
tryItOut("do {return;/*infloop*/M:for(( /* Comment */ /x/g ); 3/0.__lookupGetter__(\"__noSuchMethod__\"); ({constructor-1, __parent__: __parent__ }) + @foo(*)) { /x/g ; } } while((typeof (new (__count__.prop))) && 0);");
tryItOut("1e+81\nthrow <x><y/></x>;");
tryItOut("return;");
tryItOut("switch(*) { case 3: break; case 6: break; default: break; break; gc() }");
tryItOut("yield <x/>;");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("with({}) null");
tryItOut("/*for..in*/for(const __noSuchMethod__ in *::*) throw __parent__;");
tryItOut("(<x><y/></x>)");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let prop = <x/>; <x/>; <x/>) __proto__");
tryItOut("for(let y in []);");
tryItOut("if(this) gc() else  if (*::*) {return 0; } else throw <x><y/></x>;");
tryItOut("while(((1e4.*)) && 0){{throw <x/>; } }");
tryItOut("if(prototype = ({a2:z2})) {prop; } else {<x><y/></x> }");
tryItOut("L:if(Number(){if(((uneval(false)))) [[]]; else  if (new function (__parent__, __proto__) { return <y><z/></y> } ()) { '' var prop = <><x><y/></x></>; }return; }");
tryItOut("let(__parent__, __count__ = this) { __noSuchMethod__, __parent__ = <x></*y/</x>;");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("yield __noSuchMethod__ = (<x><y/></x>.([1])).*;");
tryItOut("/*infloop*/while(((({ x::__proto__: __count__, __count__: __count__ }) = (<><x><y/></x></>))))if(prototype) {throw false;return <x><y/></x>; } const __iterator__;");
tryItOut("if(delete this) {yield 0.1;export __parent__; } else {throw window;(-1) }");
tryItOut("while(((__iterator__ = 1.2e3)[\n(<x/> < <x><y/></x>)]) && 0)while((function () { yield <x><y/></x> } ( /x/g )) && 0)if(((new Function(\"continue L;\")))((window.__count__ = *::*), window)) { if (<x><y/></x>(__count__)) ([z1,,]); else yield;\nfunction (__proto__, __noSuchMethod__) { yield this } \n}");
tryItOut("constructor = prototype;");
tryItOut("try { let __noSuchMethod__; } catch(__noSuchMethod__) { gc() } finally { export *; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in (this <<= undefined)) /*infloop*/while(this.__noSuchMethod__)(<><x><y/></x></>);");
tryItOut("let (constructor =  /* Comment */true) { yield; }");
tryItOut("return;");
tryItOut("M:if((<x><y/></x>).call) {gc()<x><y/></x>++ }");
