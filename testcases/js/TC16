
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */( for  each(let __parent__.prop in )(__noSuchMethod__ = <x><y/></x>)) ' while([,]);");
tryItOut("if(yield -1 = (uneval(*)).constructor) {yield true; }\t else  /x/ ;");
tryItOut("while((++[[]]) && 0){/*for..in*/for(var prop in <x><y/></x>) {throw (-0);gc() }while((0x99) && 0){let __iterator__, __noSuchMethod__ = [[]];(@foo); } }");
tryItOut("if((1e+81.constructor)) { if (eval(\"*::*\", <y><z/></y>)) {gc()__count__, __noSuchMethod__; } else {throw *::*; }}");
tryItOut("/*infloop*/for(new (this)(({a2:z2}), <><x><y/></x></>);  /x/g .isPrototypeOf(#3={a:#3#}); ) {return; }");
tryItOut("M:with({__iterator__: <x><y/></x>}){ { return false } gc() }");
tryItOut("/*infloop*/for(\fconst __iterator__; prop+=(#2=({prop: window})--); (eval(\"0.1\", [,,])).@*) if( \"\" ) __proto__ =  '' ; else  if (~<><x><y/></x></>) yield;");
tryItOut("let(__noSuchMethod__ = __count__, __count__ = __parent__) ((function(){const prototype = *::*;})());");
tryItOut("with(this.__defineGetter__(\"prop\", ({}).hasOwnProperty)){(new Function).callyield; }");
tryItOut("if(let (constructor = 3.141592653589793) *::* - __count__) {return; } else  if (({__iterator__: <><x><y/></x></>(window), prop: (*.__lookupGetter__(\"constructor\")) })) /*for..in*/propfor(var __noSuchMethod__ in (({})(this))){return true;const __proto__; } else {with([true].some(function () { return <x><y/></x> } )){; } }");
tryItOut("/*for..in*/for(const constructor = <x><y/></x> in __noSuchMethod__) ;");
tryItOut("L: __parent__;");
tryItOut("if((undefined >> __proto__)) (033).__defineSetter__ else {continue M;export prop; }");
tryItOut("M:with({__parent__: 1.2e3.__defineGetter__(\"prototype\", function  prototype () { return true } )})return;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(__proto__ = (0.1.isPrototypeOf(<x/>)) ? export __proto__ : gc() in <x><y/></x>) {}");
tryItOut("L:with({prototype: __proto__.(-0)})export  set __parent__ prototype (__iterator__, constructor)-0\n");
tryItOut("break M;");
tryItOut("return yield this;");
tryItOut("if((let (prototype = eval(\"yield constructor\", 1e-81)) (prototype = <x><y/></x>)[[<><x><y/></x></> if (window)]])) if(0) {let __iterator__, __noSuchMethod__ = [,];[1,2,3,4].slice } else  if (prototype) {prototypereturn; } else return; else  if (({__count__: (prop = <><x><y/></x></>)}))  else {L: {} }");
tryItOut("M:if((<><x><y/></x></> *= <x><y/></x>)) {; } else  if (eval(\"__iterator__\", undefined)) ([1,,]);");
tryItOut("{break ;return <><x><y/></x></>; }");
tryItOut("M:if((*);) export *;");
tryItOut("{/*infloop*/for(<x><y/></x>; <x><y/></x>; this) var __proto__ = <x><y/></x>; }");
tryItOut("with(*::*){this; }");
tryItOut("/*for..in*/for(let [prototype, __proto__] = undefined in  /x/g ) export *\n\nthrow <><x><y/></x></>;\n");
tryItOut("/*for..in*/\tfor(let 'fafafa'.replace(/a/g, (1 for (x in []))) = ({ prop: prototype, constructor: prop }) = ({prototype: window,  get function::__noSuchMethod__ prop (__proto__) { yield this }  }) ? (new Function(\"gc()\"))(undefined) : * in (__noSuchMethod__ = true)) {if(false) { if (<><x><y/></x></>) {}} else {var __iterator__ = null, __count__; }continue M; }");
tryItOut("if((new RangeError())(.__lookupGetter__(\"prop\"), <x><y/></x> @ #1=[#1#])) \f{\fswitch((<y><z/></y>.__defineSetter__(\"__noSuchMethod__\", new Function))) { default: /*for..in*/for(var \t[__iterator__, __noSuchMethod__] =  ''  in __proto__) return [z1];case <><x><y/></x></>.valueOf(\"number\"): {{} }break;  }\n/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in ({})) return; }");
tryItOut("/*infloop*/for(let function::__noSuchMethod__; (<><x><y/></x></>.unwatch(\"prop\")); ) {<><x><y/></x></>; } const prototype;");
tryItOut("with((-<><x><y/></x></>)){{throw *::*;throw <x><y/></x>; } }");
tryItOut("with(<x><y/></x>.unwatch(\"let\")){{}return <><x><y/></x></\f>; }");
tryItOut("gc()");
tryItOut(";while((undefined) && 0){export __noSuchMethod__; }");
tryItOut("L:if(033) gc() else  if (<y><z/></y>) gc()");
tryItOut("/*for..in*/for(each in ((({}).__lookupGetter__)(new Object()[([<y><z/></y>].sort(gc))]))){/*infloop*/for(__iterator__.__noSuchMethod__ = ~<><x><y/></x></>; (<x><y/></x>.(window)) !== (constructor.__count__); (prototype = __proto__)) const constructor, __parent__; }");
tryItOut("/*infloop*/L:for(<><x><y/></x></>; <x><y/></x>;  /x/ ) {export *;return <x><y/></x>; }");
tryItOut("/*infloop*/for(\t__count__.constructor = prototype = <><x><y/></x></>; \n*; function  [, , __noSuchMethod__] (prototype, __noSuchMethod__) { __parent__ = <x><y/></x>, __parent__ = <y><z/></y>; } ) yield;");
tryItOut("let __noSuchMethod__ = 3.141592653589793");
tryItOut("yield null;");
tryItOut("with({}) { try { (__iterator__); } catch(__proto__) { Function }  } ");
tryItOut("while((*::*) && 0)export __parent__;");
tryItOut("if((__count__.__lookupSetter__(\"__count__\") - ('fafafa'.replace(/a/g, /a/gi)))) { if (<{__proto__}>yyy</{__proto__}>.(var __count__ = this)) {/*infloop*/while((Math.sin).call(<x><y/></x>, undefined))/*for..in*/for(var __parent__ in (([1,2,3,4].map)(#1#)))return;__count__ = window; }} else yield true\n");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in 0.1) export 1e+81");
tryItOut("with({}) { let(__noSuchMethod__, __proto__ = __noSuchMethod__) { return <y><z/></y>; } ");
tryItOut("while((__iterator__.prop / (({ get __count__() { return ( /x/g )[#3={a:#3#}] }  })).yoyo(new (<><x><y/></x></>)(<x/>) / ({__noSuchMethod__:  '' , prop }))) && 0){{export *; } }");
tryItOut("\f__noSuchMethod__%=<><x><y/></x></>) && 0)<><x><y/></x></>;");
tryItOut("/*infloop*/M:for(let __iterator__ = <x><y/></x>.hasOwnProperty(\"prop\"); <y><z/></y>; (this.__defineSetter__(\"__noSuchMethod__\", Math.sin))) {yield true; }");
tryItOut("/*infloop*/for(let ({ constructor: ({ __parent__: [({ __count__: __parent__, prototype: [__count__] })], __noSuchMethod__: ({ constructor: [], __proto__: ({ __noSuchMethod__: [, ], __parent__: [] }) }) }), __parent__: ({ yield: ({ function::__iterator__: (null)(1e-81), __iterator__: ({ __iterator__: __count__, prop: __parent__ }) }), prototype: prototype }) }) = yield  \"\" .@foo; \n[11,12,13,14].map; (<><x><y/></x></> <<= 4.).unwatch(\"__count__\")) {return;with(this.valueOf(\"number\")){yield; } }");
tryItOut("(__noSuchMethod__);");
tryItOut("/*for..in*/for(let prop in ((__count__ for each (__iterator__ in  /x/g )))) return 1e81;");
tryItOut("L:with({__noSuchMethod__: ({ getter: prop }) = ++[<x/> if (1e4)]})(<x><y/></x>);");
tryItOut("/*infloop*/do {window;yield <x><y/></x>; } while((new 1.3(<><x><y/></x></>, <x/>)));");
tryItOut("L: ;");
tryItOut("let(prototype = __iterator__ = (new Object(<x><y/></x> ? window : false))) ((function(){this.zzz.zzz;})())\n/*infloop*/L:for(let ({ constructor: ({ __proto__: __proto__ }), x::constructor: [, , __count__, __iterator__] }) = __iterator__; __proto__%=<><x><y/></x></>.__noSuchMethod__; <{__parent__}></{__parent__}>) break ;");
tryItOut("if(constructor) { if ([ \"\"  <= <><x><y/></x></>].map(null)) yield new <x><y/\r></x>(prototype.__lookupSetter__(\"__iterator__\")) > 3/0.prototype = <><x><y/></x></>; else {if(constructor)  else  if (1e+81) throw this;export *; }}");
tryItOut("let (prop, __noSuchMethod__ = <><x><y/></x></>) { if(@foo) { if (1.3) (__noSuchMethod__);} else {return;{} } }");
tryItOut("/*infloop*/for(__proto__.__parent__ = eval(\"*::*\", <><x><y/></x></>); prototype.constructor; constructor.(<x/>)) gc");
tryItOut("{if(({ prototype: /*\n*/prototype }) = set ^= ({a1:1})) { if (<x/> *= <y><z/></y>) {do {yield;arguments; } while(((__iterator__.__iterator__)) && 0); }} else {(<><x><y/></x></>);__proto__; }let (__proto__) { return; } }");
tryItOut("(<x><y/></x>)\n");
tryItOut("let([]) ((function(){yield [(uneval(constructor)) if ([z1])] .@x:: __count__.__noSuchMethod__ ? false for (let in __iterator__) : *::*;})());");
tryItOut("do @foo\t; while((this.__defineGetter__(\"__noSuchMethod__\", Math.pow)) && 0);");
tryItOut("for(let y in []);");
tryItOut("L:if(* ?  /x/g  : []) { if ((Math.sin).call(~new 033, <x><y/></x>.yoyo(<x/>))) export *; else {/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in prop) /*infloop*/for( '' ; __iterator__; constructor) {return;let constructor, prototype; } }}");
tryItOut("if((((0/0).__defineSetter__).call)) {@foo;/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in []) gc() } else  if ((__parent__.propertyIsEnumerable(\"__noSuchMethod__\"))) const constructor;\n \"\" ;\n");
tryItOut("L:if(\n<><x><y/></x></>.__defineGetter__(\"__parent__\", (<><x><y/></x></>).watch)) { if (this) if(<x/>) {export prop;yield window; } else  if ((-1)) {export *; } else {{}continue ; } else {}}");
tryItOut("M:if(Math.sin(*::*, <><x><y/></x></>)) { } else {do {break ;continue ; } while((([11,12,13,14].sort)) && 0); }");
tryItOut("/*infloop*/while(prop = constructor = [1,,].hasOwnProperty(\"__parent__\")){{(false);gc() }/*infloop*/do const __proto__ = []; while(__count__-=window); }");
tryItOut("let ([({ __count__: __iterator__, prototype: ({ __noSuchMethod__: prop }) }), [[__iterator__, ]], , __iterator__, ]) { with(__iterator__){continue ;return; } }");
tryItOut("@foo = __count__;");
tryItOut("yield <x/>;[[]];");
tryItOut("/*for..in*/for(__iterator__ in <><x><y/></x></>) export *; const constructor;");
tryItOut("if(<><x><y/></x></> == window) { if (!new Function((eval(\"const __noSuchMethod__ = prop;\", [[1]]))))  else }");
tryItOut("/*infloop*/while([[1]])continue M;");
tryItOut("if(#0=[<y><z/></y>] >>> false.hasOwnProperty(\"constructor\")) {L:if(<y><z/></y>) new Function else  if (false) {return 0.1;yield this; } } else  if ((\t<><x><y/></x></>.prototype ? (prop/*\n*/.(<x><y/></x> -= -0)) : this.__defineSetter__(\"__proto__\", function(q) { return q; }).__noSuchMethod__ = *::*.@*--)) gc()");
tryItOut("export <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(const constructor in [#0=[this.zzz.zzz]].map(({}).hasOwnProperty)) {constructor, __count__ = <x><y/></x>; }");
tryItOut("with({}) { __parent__ = function::constructor; } ");
tryItOut("throw StopIteration;");
tryItOut("prototype = __proto__;");
tryItOut("let prop, __parent__; const __noSuchMethod__;");
tryItOut("let (prop, __proto__) { throw ({}); }");
tryItOut("let (true) { let __iterator__ = window; }");
tryItOut("if((uneval((<x><y/></x>.(<y><z/></y>))))) {return; } else  if ((<><x><y/></x></>)(__count__).__lookupGetter__(\"prototype\")) {export prototype;<y><z/></y>\n; } else { }");
tryItOut("(false <<= true).__defineSetter__\nif((p={}, (p.z = function ([y]) { })()) /= \nFunction(this) @ <x><y/></x>.__proto__) ({}).__lookupGetter__ else let (__parent__ = []) { export *; }");
tryItOut("let (let(prototype = [,]%=<y><z/></y>, [] = (<y><z/></y>.prototype)) ((function(){for(let y in []);})());) { if(new __noSuchMethod__(3.141592653589793.eval( /x/ )))  else  if (\neval) {let prop;export __noSuchMethod__ } }");
tryItOut("/*for..in*/M:\rfor(const ({ __proto__: <><x><y/></x></> }) in <x/>[constructor]) { }");
tryItOut("/*infloop*/L:while(1.2e3){yield;L: {( /x/ );; } }");
tryItOut("__parent__ = __iterator__;");
tryItOut("/*infloop*/while(());");
tryItOut("return let (constructor) (function (, __noSuchMethod__) { yield <x><y/></x> } ).call([1], );");
tryItOut("{/*infloop*/do (@foo); while(( /* Comment */#3={a:#3#}).(prop = [])); }");
tryItOut("export *;\ngc()\n");
tryItOut("do {{} } while(([] = [ \"\" /*\n*/]) && 0);");
tryItOut("/*infloop*//*\n*/M:for(let __iterator__ = (({__parent__ getter: *::*, prop getter: (({}) >>>=<x><y/></x>).watch }).constructor); __noSuchMethod__.__count__; ({prototype getter: function  x::__parent__ (__count__)[[]], __count__ setter: (prop.__iterator__ = [,,])-- })) {{return;throw -1; } }");
tryItOut("yield;");
tryItOut("if(<><x><y/></x></> |= true >> (__proto__ = @foo).__defineGetter__(\"__iterator__\", Math.pow)) {/*infloop*/for(({ constructor: prototype }) = ; __proto__.constructor = true; \n<x><y/></x>) {; } } else  if (<y><z/></y>) /*for..in*/for(let [prop, __noSuchMethod__] = (<x><y/></x> if (<x><y/></x>)) in 3.141592653589793) export constructor; else {{} }");
tryItOut("if(__parent__ ^= @foo.__defineSetter__(\"__count__\",  \"\" )) {let __noSuchMethod__; }");
tryItOut("/*infloop*/L:while((({__proto__:  /x/g  })))while((<><x><y/></x></>) && 0){let __noSuchMethod__, __parent__ = <><x><y/></x></>; }");
tryItOut("let(__noSuchMethod__ = (undefined.hasOwnProperty(\"__noSuchMethod__\")) ? (this.__defineSetter__(\"__iterator__\", eval)) :  /x/ .eval(window)) { for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("if(prop.prototype = false.@*) { if (-0) /*infloop*/do {return  '' ; } while(constructor); else {throw #3={a:#3#};gc() }}");
tryItOut("/*infloop*/for(({ function::__noSuchMethod__: [, constructor, __count__, constructor, ] }) = ; (null); +let (__parent__ = __count__) 1e4) ");
tryItOut("yield;");
tryItOut("/*infloop*/M:while((<y><z/></y> for each (__parent__ in this)));");
tryItOut("/*for..in*/L:for(const 1e4.__proto__ in <><x><y/></x></>) {let __parent__, __noSuchMethod__;( /x/ ); }");
tryItOut("let(__noSuchMethod__ = \nprop) { let(__parent__) ((function(){{}})());");
tryItOut("throw StopIteration;");
tryItOut("if((this.zzz.zzz)) {export *; }");
tryItOut("L: {yield *::*;yield 1.2e3; }");
tryItOut("if(return;) { if (__noSuchMethod__ = true) yield <x/>;} else throw  /x/g ;\n/*infloop*/for((__iterator__.prop getter= (new Function(\"yield;\"))); prop = [1,,]; this) {}\n");
tryItOut("return String(#1#);");
tryItOut("do {if(0x99) var prop; } while(([[]]) && 0);");
tryItOut("if(</*\n*/><><x><y/></x>.(undefined)</></>) {/*for..in*/for(let <x/*\n*/><y/></x> in prop) {; }continue ; }\n__iterator__ = <><x><y/></x></>, __iterator__;");
tryItOut("yield prototype;");
tryItOut("throw StopIteration;");
tryItOut("this.zzz.zzz;");
tryItOut("return @foo\n");
tryItOut("for(let y in []);");
tryItOut("let (__count__) { return /*\n*/-undefined.isPrototypeOf(<><x><y/></x></>); }");
tryItOut("*::*\nif(function(id) { return id }) let __parent__ =  \"\" , x::__proto__;");
tryItOut("/*for..in*/for(__parent__ in (this.__defineSetter__(\"__proto__\", /a/gi))) {gc()/*infloop*/do {gc()export *; } while(constructor); }");
tryItOut("/*infloop*/do {yield window;( \"\" ); } while([null for (__noSuchMethod__ in 0)]);");
tryItOut("M:while((({__proto__: ( \"\" .isPrototypeOf( /x/g )) >> constructor.unwatch(\"__count__\")})) && 0)yield prototype;");
tryItOut("with([15,16,17,18].sort(function  __iterator__ (__proto__, prop) { return <><x><y/></x></> } , [[1]]))break L;");
tryItOut("with({__parent__: prototype}){;return window; }\nreturn;");
tryItOut("/*for..in*/for(var __proto__ = -3/0 in <><x><y/></x></>) {const prop; }");
tryItOut("{}\ngc()\n");
tryItOut("throw __parent__;");
tryItOut("M:if(\f3/0) {return <x/>; } else  if (__proto__) {const constructor = <x/>; } else {return this; }");
tryItOut("with({prop: ({__count__: (continue )})});");
tryItOut("M:switch(@foo) { default: break;  }");
tryItOut("do /*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = __proto__ = 0.1 in false)  while((let (constructor, __parent__) true) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<x><y/></x>-- in new (undefined >>>  '' )()) {gcthrow prototype; }");
tryItOut("let(__proto__ = ({__noSuchMethod__: <x/>\r, __noSuchMethod__: *::* }), __count__ = @foo) ((function(){__iterator__ = function::prop;})());");
tryItOut("return\n");
tryItOut("if(window) {if(<x><y/></x> * <><x><y/></x></>) { if ((this.__proto__)) break L; else {[1,2,3,4].mapyield <x><y/></x>; }}L:if(<><x><y/></x></>) { if (<y><z/></y>) {yield; }} else ; }");
tryItOut("{/*infloop*/L:for(__parent__; [1,,]; <><x><y/></x></>) {throw  \"\" ;return window; } }");
tryItOut("/*infloop*/while(new __proto__(window))M:if( '' ) { if ( '' ) export *;} else {; } const __iterator__;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(var __count__; ({__proto__ setter: (1 for (x in [])), case ((new Function(\"export *;\\r\"))).call(1e-81, #1=[#1#]): function(q) { return q; }break;  }); (x::prop.__count__)) /*infloop*/for(let __iterator__; void [z1,,];  { return 3.141592653589793; } ) {(<x/>);gc() }");
tryItOut(" if (null)");
tryItOut("{if(<><bbb xmlns=\"<><x><y/></x></>\">return <y><z/></y>;</bbb></>)  let finally { with({}) { (this); }  }  }");
tryItOut("if(\nprototype = <><x><y/></x></>[delete 1e+81])  else  if ((yield @foo)) yield;");
tryItOut("let __noSuchMethod__, function::__count__;\n;\n");
tryItOut("if((#1=({prop: this}))) {export function::__noSuchMethod__;{{}; } } else ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in __iterator__) yield  \"\" ;");
tryItOut("/*for..in*/for(__noSuchMethod__ in (uneval(this))) throw #3={a:#3#};");
tryItOut("yield ++([prop, {<><x><y/></x></>;(<x><y/></x>).__defineSetter__ }, ] = __iterator__);");
tryItOut("return <x><y/></x>");
tryItOut("try { break M; } catch(__parent__) { return this; } finally { return (-0); } ");
tryItOut("{{yield this; } }");
tryItOut("/*for..in*/for(__count__ in __parent__) {yield;eval }");
tryItOut("/*infloop*/while(Array(prop)){yield;\tcontinue ; }");
tryItOut("/*infloop*/M:do constructor = @foo, __parent__ = <><x><y/></x></>; while(([,] <= 4. * __iterator__ = __proto__)(@foo, <bbb xmlns=\"null\"> </bbb>));");
tryItOut("L:switch(<xxx {__iterator__}={[1,,]} />) { case 9: case (null *=  /x/ ): {yield;throw this; }export *;case 3: break; case 7: /*infloop*/for(const __iterator__; (-3/0); ((<x><y/></x>)[<x/>])) (\n<y><z/></y>);break; case new ((1 for (x in [])))( /x/  <<= {}, 1.2e3):  }");
tryItOut("{yield *;/*for..in*/for(var prototype in [[1]]) {\fthrow __count__; } }");
tryItOut("{var __iterator__ =  /x/g , __proto__ = [,];prototype = function(id) { return id }; }\n__proto__ = __count__;");
tryItOut("export constructor;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do return true; while(window);");
tryItOut("/*infloop*/M:do {var __proto__, constructor;throw <><x><y/></x></>;\t } while(__iterator__.unwatch(\"__noSuchMethod__\"));");
tryItOut("/*for..in*/for(prototype in ((function () { yield <> </> } )( \"\" )))for(let y in []);");
tryItOut("/*for..in*/for(const [[], , , __iterator__, ] in (((*::*).__defineSetter__)(([true].map('haha'.split) if (undefined))))){;break L; }");
tryItOut("{}");
tryItOut("while(([[11,12,13,14].some ? ((yield false)) : ({__iterator__: this.__defineGetter__(\"__noSuchMethod__\", )})]) && 0){if(<y><z/></y>) { if (null) __parent__ = 033, __proto__ = ; else {}} }");
tryItOut("if((prototype.eval(<x/>))) var constructor; else export *; const __parent__;");
tryItOut("/*for..in*/for(const prop.prop in (((function(q) { return q; }).call)( /x/g )))let(prop = <x><y/></x>, __proto__) ((function(){gc()})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype.__noSuchMethod__ in [15,16,17,18].sort(Function, [,,z1])) {if(3.141592653589793) { if (-1) {} else (<x><y/></x>);} }");
tryItOut("with({__count__: yield *::*}){yield;yield <x/>; }");
tryItOut("let (__parent__ = constructor.__iterator__ = true) { ; }");
tryItOut("if([1]\f) return; else {}");
tryItOut("/*infloop*/M:for(prototype = (({a2:z2}).isPrototypeOf(true)).throw( /x/g ); new Date(*,  /x/g ); ({}).watch(\"__noSuchMethod__\", (this).watch)) {<x><y/></x>; }");
tryItOut("/*infloop*/M:do {{}/*infloop*/for(prop = .2; <><x><y/></x></>; window) {export prototype; } } while(__iterator__ = <y><z/></y>);");
tryItOut("/*infloop*/L:while([__count__, ])switch(yield -0) { case 5: __noSuchMethod__ = <><x><y/></x></>;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x><y/></x>) {continue ; }");
tryItOut("if(({ prop: [, ({ __proto__: [prop], prop: __count__ }), ({ __noSuchMethod__: constructor }), ({ prop: __count__, constructor: ({ constructor: function::__noSuchMethod__, __noSuchMethod__: __count__ }) }), __proto__], __noSuchMethod__: ({ __parent__: (gc())(3/0), prototype: [, [constructor, , __count__, __count__, prop], , ({ __count__: __parent__ })] }) }) = (yield window)) {continue L; } else  if (<><x><y/></x><//h\n/>.__parent__--) { }");
tryItOut("let __parent__, constructor;\n{if(<><x><y/></x></>) return 1e81;const __proto__, __proto__; }\n");
tryItOut("M:if(delete <y><z/></y>.valueOf(\"number\")) {break M;break ; } else  if (([1.3].map(function  prototype (prototype, constructor) { return true } ))[[] > <y><z/></y>]) switch() { case <x><y/></x>:  }");
tryItOut("L: switch(true) { default: break;  }");
tryItOut("{{}with({__noSuchMethod__: #1#.yoyo((-1))})(1 for (x in [])) }");
tryItOut("/*infloop*/do return (__noSuchMethod__ = __count__); while(<x/>);");
tryItOut("if(<xxx>{__noSuchMethod__}</xxx>) {let __proto__ = 1e4, __parent__ = [[]];/*infloop*/do {(__noSuchMethod__);\t } while(({ prototype: function::__proto__, __iterator__: __noSuchMethod__ })); }");
tryItOut("while(((yield (*::*.isPrototypeOf(false)))) && 0)/*infloop*/for(<x/>; [1,,]; -1) {prop =  /x/ ; }");
tryItOut("/*for..in*/for(let prop in ((Math.sin)(<x><y/></x>))){const __noSuchMethod__, __iterator__ = <x><y/></x>; }");
tryItOut("{function  __iterator__ () { return <><\fx><y/></x></> } yield false; }");
tryItOut("with({}) { return ((function ([y]) { })().isPrototypeOf([[]])) .@*:: constructor.prototype; } ");
tryItOut("/*for..in*/for(var ({ __proto__: __iterator__, __parent__: ({ __parent__: prop }) }) in yield __count__ if (@foo)) {break M; }");
tryItOut("switch(prop = __parent__((this)[<x><y/></x>] / __noSuchMethod__) .. (({__proto__: __noSuchMethod__,  set __parent__ __iterator__ (constructor, __iterator__) { const __count__; }  })).__defineGetter__(\"prop\", (p={}, (p.z = (__count__ = <x><y/></x>))()))) { case window: return; }");
tryItOut("{/*for..in*/for(var prototype = (@foo != <x><y/></x>) in  \"\" ) {try { return  '' ; } catch(prop if (function(){gc()})()) { export *; } catch(prop if (function(){(1 for (x in []))})()) { continue ; } catch(__count__ if (function(){gc()})()) { export *; }  } }");
tryItOut("M:if((yield [(-0) if (true)])\t) {return <><x><y/></x></>; } else  if (new ((undefined).watch)(window).__lookupSetter__(\"__noSuchMethod__\")) {break ;yield <x/>; }");
tryItOut("while((this.zzz.zzz) && 0){gc()export *; }");
tryItOut("/*infloop*/M:for(__noSuchMethod__.__noSuchMethod__ = (var constructor = <y><z/></y>); ((/a/gi).call)(this, *::*); __count__ = (<x><y/></x>[this])) throw <><x><y/></x></>;");
tryItOut(" /x/g ;export __count__;");
tryItOut("do if(__iterator__) yield [,]; else  if (__parent__) {;const __iterator__ = @foo, __count__ = window; } else {yield *;yield <x><y/></x>; } while(( /* Comment */<><x><y/></x></> for each (prototype in this) for (prop in <><x><y/></x></>)) && 0);");
tryItOut("{throw  /x/g ;break \t; }");
tryItOut("switch([1,,]) { case true: yield [];break; case false: case 2: (<x><y/></x>);case 8: export __proto__;case <x><y/></x>: const __noSuchMethod__;break;  }");
tryItOut("/*infloop*/L:do {export __count__; } while( /x/g );");
tryItOut("/*infloop*/do {({}).__lookupGetter__ } while(--([<><x><y/></x></>]));");
tryItOut("if((prop)) { if ( /x/  + [[]]) {} else {break ; }}");
tryItOut("do function(y) { yield y; var __parent__ = __parent__;; yield y; } while(((<><x><y/></x></>.__defineGetter__(\"__iterator__\", (function ([y]) { })()))) && 0);");
tryItOut("{yield;continue ; }");
