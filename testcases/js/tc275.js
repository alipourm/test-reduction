tryItOut("/*infloop*/do {/*for..in*/for(var [constructor, prop] = yield  /x/g  in constructor) {{} } } while((this.zzz.zzz)\n);");
tryItOut("/*infloop*/\ffor(let __iterator__ = ( /* Comment */1e-81); <x><y/></x>; [15,16,17,18].some((1 for (x in [])), window)) {(#1#).__defineSetter__throw default: case 3: case -1: break M;case {}: break; break; case 5: case 8: break; case 6: function  __iterator__ (__iterator__, __parent__) { return window } case __proto__: var constructor;break; __parent__ = <y><z/></y>;break; case 5: let prototype = <y><z/></y>, __count__ = window;function(q) { return q; }break; case this: yield *::*;break; case __noSuchMethod__: case 6: ;break; case 0: (<x><y/></x>);break; case *: const __parent__, <x/> = <><x><y/></x></>;case function::__noSuchMethod__: return true;break; case  /x/ : break; ; } const __parent__;");
tryItOut("export prototype;\nlet prototype = 1e4;\n");
tryItOut("{break ; }");
tryItOut("/*infloop*/L:for(eval(\"if(\\t<><x><y/></x></>) const __noSuchMethod__;\", (<x><y/></x> / [z1,,])); (-let (prop = <x><y/></x>, __count__ = <><x><y/></x></>)  \"\" ); eval(\" \\\"\\\"  >= this\",  /x/g .isPrototypeOf(false)\n[[(__iterator__ = <x><y/></x>) for (__count__(({a2:z2})) in <><x><y/></x></>) if (<><x><y/></x></>)]])) {(1 for (x in []))if(__iterator__.constructor = [undefined.__lookupSetter__(\"\")].map([1,2,3,4].map)) __parent__ = *::*\n else {( /x/g );return  /x/g ; } }");
tryItOut("{}\nwindow \n{}");
tryItOut("/*for..in*/for(constructor = <><x><y/></x></> in ((function  prototype () { yield 'haha'.split } )(((__iterator__ = ({a1:1}) if (window))))))const __noSuchMethod__, __parent__ = <x/>;");
tryItOut("throw constructor;");
tryItOut("break L");
tryItOut("try { (#1=[#1#])(let) = __proto__; } catch(__noSuchMethod__) { return [(prop = <x><y/></x>)].filter(function () { yield window; } ); } finally { let constructor, prototype = *::*; } ");
tryItOut("switch() { default: case ((<><x><y/></x></>.unwatch(\"__noSuchMethod__\")) .@x::  /* Comment */window).__lookupSetter__(\"__proto__\"): gc()break; case ((({ get __count__()0x99 })).__noSuchMethod__).*: export *;break;  }");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(let __proto__ in  \"\" ) {export *;function (__count__) { ; }  }return;");
tryItOut("L:if(new ((window.__defineGetter__(\"prop\", Math.sin)).valueOf(\"number\"))()) { if (<y><z/></y>.constructor = (true++)) {return <x><y/></x>; }} else {\fwith({__parent__: 3})continue ;(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(var __noSuchMethod__; eval(\"false\", window).@foo; *.__defineSetter__(\"__count__\", (1 for (x in [])))) export __parent__;");
tryItOut("L: {yield *; }");
tryItOut("/*infloop*/M:for(const __count__; 0x99; ( /x/g .prop)) {constructor; }");
tryItOut("if(constructor) export function::__parent__; else {let __iterator__;var __iterator__; }");
tryItOut("({__noSuchMethod__: 'fafafa'.replace(/a/g, -3/0).hasOwnProperty(\"prop\"\f) })");
tryItOut("while(((new function  __parent__ () { yield __proto__ } (((yield [[1]]))))) && 0)prototype");
tryItOut("let([, prop] = (new Function(<x><y/></x>, <><x><y/><\n/x></>)(__count__ = @foo)).__proto__) { this.zzz.zzz;");
tryItOut("/*infloop*/for(: = (new gc([[]]--, <><x><y/></x></>) ^= *::* << this); <><x><y/></x></> instanceof __iterator__: #1#; ({ set __noSuchMethod__ __noSuchMethod__ (__count__) { return Exception(<><x><y/></x></>, <y><z/></y>) } , __parent__: ({ set __iterator__( get __parent__() { return  /x/g  } ) { yield -0 }  }) })) {export __noSuchMethod__;export __parent__; }");
tryItOut("L:with(__proto__)<x><y/></x>;");
tryItOut("export *\n");
tryItOut("/*infloop*/for(const prop; <y><z/></y>; <><x><y/></x></>) export *;");
tryItOut("break M;yield window;");
tryItOut("/*infloop*/for(let ({ __proto__: __count__ }) = null * window; \nfalse; __noSuchMethod__.__noSuchMethod__) break L;");
tryItOut("/*infloop*/for(let __noSuchMethod__; <x><y/></x>; window) throw window;");
tryItOut("var prototype =  \"\" ;\n({}).hasOwnProperty\n");
tryItOut("gc()");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in __iterator__.prop) {let __iterator__ = @foo, __count__;export *; }");
tryItOut("{switch(new ([[1]])(__proto__).propertyIsEnumerable(\"setter\")) { case 9: switch(([z1])) { default: break;  } }if((null.watch(\"__noSuchMethod__\", (this).watch))) { if (((<><x><y/></x>//h\n</> instanceof <><x><y/></x></>)[<><x><y/></x></>.@foo])) {gc()(undefined); }} else with({prop: *::*})prop = undefined, __noSuchMethod__ = *; }");
tryItOut("export *;var __iterator__ = __proto__;");
tryItOut("if(((((false if (1e4)))([[11,12,13,14].map], (undefined for each (prototype in *))))[prototype])) {return  /x/g ;export __noSuchMethod__; } else  if (true) {/*infloop*/while(this - true)switch(function(id) { return id }) { case prototype: gc()break;  } } else throw this;\nreturn;\n");
tryItOut("/*infloop*/for(var prototype = prop; [1,,]; *) ;");
tryItOut("var __count__, yield;return;");
tryItOut("/*for..in*/for(let __proto__ in ((function (constructor, prop) { return (<y><z/></y> ? <y><z/></y> :  /x/g ) } )(#1=[prototype-=true])))");
tryItOut("L: {if(( \"\" .__lookupGetter__(\"__count__\"))) { if (typeof { }) gc() else { }}M:do gc() while(((function ([y]) { })()) && 0); }");
tryItOut("L\f: {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in undefined) {} }");
tryItOut("export *;prop =  \"\" ;\n__proto__, __count__ = *::*;\n");
tryItOut("if(<xxx>{__noSuchMethod__}</xxx>) ");
tryItOut("{prototype = <><x><y/></x></>, __noSuchMethod__ = [,]; }");
tryItOut("let (({ __parent__: [], constructor: prop }), __parent__ = x::(constructor)(null)) { while((( \"\"  .@*:: __proto__\n) .@*:: ([11,12,13,14].sort).throw(__parent__.constructor getter=  /x/g )) && 0){__count__ } }");
tryItOut("if(<x><y/></x>) {export __parent__; } else  if ( /x/g ) {gc()gc() } else window");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ =  \"\"  in <><x><y/></x></>) return __count__;");
tryItOut("__count__ = constructor;");
tryItOut("with({}) { {} } ");
tryItOut("if(__parent__ = 0 /= (__noSuchMethod__ = null)) { if (new /a/gi\f()) {L: {let constructor = <><x><y/></x></>, prototype =  \"\" ;export *; }prototype =  /x/ , prop = __iterator__; }} else for(let y in []);");
tryItOut("/*for..in*/for(const setter in null) {return <y><z/></y>;export *; }");
tryItOut("/*infloop*/do let __proto__ = [1,,]; while(1e-81);");
tryItOut("this.zzz.zzz;");
tryItOut("{ }");
tryItOut("/*infloop*/while((((new Function(\"__iterator__ = .2;\"))).call).apply && \f(prop\f ? @foo : *).eval((this.__defineSetter__(\"__proto__\", eval)))){while(((__noSuchMethod__ = <x/>)) && 0){*::*; } }");
tryItOut("let (__proto__ = <x><y/></x> .@*:: undefined, constructor) { (*::*); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let let (prop = *::*) window ? (-0) : (let = constructor) in ({__noSuchMethod__: [,]}) %= try { return ;\f } finally { return; }  * <x><y/></x>.@*) {/*infloop*/do {__noSuchMethod__, constructor =  \"\" ;return; } while(__iterator__: (({__parent__: .2, prototype: __count__ })));throw #1#; }");
tryItOut("const prototype;with({prop: \n1e+81}){{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const set in (prototype.constructor getter= function ()<><x><y/></x></>)) {with({constructor: (-0)}){export *; }return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in true) ;");
tryItOut("let (prop) { throw 4.; }");
tryItOut("");
tryItOut("yield;\n/*infloop*/for(prop+=<y><z/></y>; (constructor = prototype); __proto__) {break L; }yield  /x/ ;\n");
tryItOut("{(1.2e3); }");
tryItOut("if(__noSuchMethod__ = <x><y/></x>) <zzz><y><z/></y></zzz> else  if ((this.zzz.zzz)) {gc(){} } else __noSuchMethod__ = <x/>;");
tryItOut("if(<zzz>new (/a/gi)()</zzz>)  get prototype(__noSuchMethod__, constructor) { yield window; }  else  if ((<y><z/></y>++) instanceof window) throw <x><y/></x>;");
tryItOut("if((undefined.@*)) { if (<><x><y/></x></>.propertyIsEnumerable(\"constructor\")) {(<x/>); }} else break M;");
tryItOut("if(yield;) {default: break; case 3: __count__break; export prop;case  \"\" : break; case *: case 0: case <><x><y/></x></>: yield;function ([y]) { };; } else {constructor{} }");
tryItOut("gc()export constructor\n");
tryItOut("for(let y in []);");
tryItOut("let (constructor) { break M; }");
tryItOut("/*for..in*/M:for(const __count__ in (([1,2,3,4].slice)((new (<><x><y/></x></> !==  /x/  ===  /* Comment */<><x><y/></x></>)(window.propertyIsEnumerable(\"__iterator__\")))))){} const __noSuchMethod__;");
tryItOut("L:while((((p={}, (p.z = <><x><y/></x></>)()) / (window.yoyo(<x/>)).valueOf(\"number\"))) && 0)<x/>;");
tryItOut("M:with({__parent__: <><x><y/></x></>.constructor = <x/>})/*infloop*/while(<x><y/></x>.__defineGetter__(\"__iterator__\", [1,2,3,4].map))switch(<><x><y/></x></>) { case 4:  }");
tryItOut("prototype const constructor;");
tryItOut("if((1 for (x in []))) { if ((yield undefined)) ;} else __count__");
tryItOut(";");
tryItOut("/*for..in*/for(let prototype = new (@foo)(<x/>) in new (((<x/>).isPrototypeOf(#0=[Date(<><x><y/></x></>)])))()) {/*for..in*/for(var prop = new Error((-0)(), 1e81) in __count__(true).(__proto__ = <x><y/>\f</x>)) {export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in (null.__proto__ = <y><z/></y>)) {{}{return; } }");
tryItOut("/*infloop*/while((true)(<><x><y/></x></>)){/*infloop*/while(__iterator__){__noSuchMethod__, __iterator__; } }");
tryItOut(";");
tryItOut("yield;");
tryItOut("if( \"\" ) {const __noSuchMethod__, __parent__ =  \"\" ; } else  if (<y><z/></y>) {(window); } else yield 5.0000000000000000000000;");
tryItOut("for(let y in []);");
tryItOut("L:if(({ constructor: ({ prop: let }) }) = this.zzz.zzz) { if (<x><y/></x>\n >> \nthis.__defineGetter__(\"__count__\", function (constructor, __iterator__) { return true } )) {with( set prop __iterator__ ([, , , ({ __parent__: ({ \fprop: constructor, constructor: prototype/*\n*/ }), __iterator__: ({ constructor: prop }) }), __proto__], ({ __noSuchMethod__: __noSuchMethod__, __iterator__: ({ constructor: prototype }) })) { return; } ){}gc() } else const __noSuchMethod__;}");
tryItOut("/*infloop*/do \fL:switch(<x><y/></x>) { case 4: break;  } while((((1 for (x in []))).call(true, <x><y/></x>)) ? *::* : __parent__.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; yield;; yield y; }));");
tryItOut("if( /x/g ) (<x><y/></x>).watch else  if ([1,,]) throw 1e+81; else {;@foo; }");
tryItOut("with(window.__lookupGetter__(\"__noSuchMethod__\").valueOf(\"number\") & [<><x><y/></x></>]){/*for..in*/for(__iterator__ = 1e+81 in prop = prop) {yield  \"\" ; } }");
tryItOut("if(<><x><y/></x></>) { if (@foo) throw <x><y/></x>;\f else {export __parent__;return <x/>; }}");
tryItOut("L:if(*::*;) /*infloop*/do function (prop, __parent__)[1,,]\f while([*::*]); else { \"\" ; }");
tryItOut("/*infloop*/for(const constructor; new (this.zzz.zzz > 1.2e3); (new String((prototype = [,,z1])))) if(prop = __parent__) {export *; } else {prop =  '' ;return 033; }");
tryItOut("if(([('fafafa'.replace(/a/g, (function ()*::*).call))])) /*for..in*/for(var [prop, __iterator__] = ({__iterator__: this, __count__: <x/> }) in (<><x><y/></x></> for (constructor in undefined))) {window; } else {/*infloop*/while(*::*){((eval).call).apply }with({__iterator__: (yield <><bbb xmlns:ccc=\"__proto__\"><ccc:eee></ccc:eee></bbb></>)})let constructor = undefined; }");
tryItOut("if([15,16,17,18].sort(function  prop (prop, prop) { yield @foo } , constructor = [,])) return; else  if (__iterator__) return <y><z/></y>; else yield constructor setter: Math.sin;");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("if( ''  ? this : #1=[#1#]) export *; else  if (__count__) {(__noSuchMethod__);gc() } else {const constructor; }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("([[]]);\nthrow <y><z/></y>;\n");
tryItOut("__iterator__ = true;\nexport *;\n");
tryItOut("{export __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(new ([1,2,3,4].slice)(this, <x/>); (yield Array(0x99, <x/>)); eval(\"(*::*).watch\", <y><z/></y>)) {}");
tryItOut("L:if(false) yield; else var prototype;");
tryItOut("return this;\nif(this) {continue M;return; } else  if (prototype) {return; }\n");
tryItOut("/*for..in*/for(__noSuchMethod__ = __noSuchMethod__ in <x><y/></x>) {const __count__ = null;return *; }");
tryItOut("if(([1,2,3,4].map)(@foo, (({prop:  /x/g }) !== undefined != #3={a:#3#}))) ; else  if ((({ set __count__(__proto__) { yield ( \"\" ).call( /x/ , this) }  }))) {/*for..in*/for(__iterator__ = ({ set __iterator__\f(__proto__, prop)(__count__ = -1), constructor: <x><y/></x> }\t) in 1e4) export *;__parent__ =  /x/g ; }");
tryItOut("export *;");
tryItOut("/*infloop*/\nfor(__parent__; *; __count__) const constructor;");
tryItOut("/*infloop*/for(this ? __parent__ : <><x><y/></x></>; *::* % <x><y/></x>; @foo >  \"\" ) { /x/g ; }");
tryItOut("/*infloop*/for((<y><z/></y>.yoyo(<y><z/></y>)); __noSuchMethod__|= /x/ ; 033) ;");
tryItOut("__count__ = __proto__;");
tryItOut("/*infloop*/while((<x><y/></x>)[__proto__])const prop = <x><y/></x>, __count__;");
tryItOut("L:if(([({}) for (constructor in (-1))])) { if (([15,16,17,18].map(function(y) { yield y; ;; yield y; }, <><x><y/></x></>))) export *;} else return <><x><y/></x></>;");
tryItOut("/*infloop*/for(const ({ prototype: __parent__ }) = ( /* Comment */ /x/ ).valueOf(\"number\").__parent__; this.__defineSetter__(\"__proto__\", gc); this.zzz.zzz) {return; const set; }");
tryItOut("throw StopIteration;");
tryItOut("if(((new Function(\"let prototype = <x/>;\"))).call(.2, )) throw prototype; else  if ((true.@*)) {function(q) { return q; }; }");
tryItOut("if(new Exception(((-0))())) { } else var constructor;");
tryItOut("/*infloop*/for((eval(\"export *;\", __parent__)); prop|=((__noSuchMethod__.unwatch(\"__iterator__\")).__count__ = *::*); ( /x/ .hasOwnProperty(\"__proto__\"))) {export __proto__;/*for..in*/L:for(var __count__ in ((/a/gi)(<y><z/></y>)))throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for((window//h\n | this.__defineGetter__(\"__noSuchMethod__\", eval)); false.valueOf(\"number\"); ([11,12,13,14].sort.@foo)) const __iterator__ = __parent__;");
tryItOut("/*infloop*/L:for(const ({ constructor: ({ __parent__:  /x/g  })\f, constructor: ({ __iterator__: __count__ }) }) = ([(p={}, (p.z = <><x><y/></x></>)())].sort([1,2,3,4].map)); ((void <x><y/></x>) for each (__iterator__ in <y><z/></y>) for each (prototype in (-0)) for each (__parent__ in prop)); <\fbbb xmlns=\"<><x><y/></x></>\">break L;\n</bbb> ? <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> : new <y><z/></y>()) export prototype;break M;");
tryItOut("try { let(prop = 033) ((function(){return false;})()); } catch(get) { constructor = __parent__; } finally { with({}) throw <x><y/></x>; } ");
tryItOut("/*infloop*/for([arguments for (__proto__ in window)]; yield true; __proto__ = function(id) { return id }) {export __proto__; }");
tryItOut("/*infloop*/for(prop(new gc(window\n, undefined)\r) = ({ __noSuchMethod__: constructor }) = -0 |= try { {} } catch(__proto__) { export *; } ; [,,z1]; function ([y]) { } === <x><y/></x>.isPrototypeOf(( /* Comment */<><x><y/></x></>))) {if(033) {export *; } else  if (*::*) {const __parent__ = <x><y/></x>, prototype;let prop; } else function(q) { return q; } }");
tryItOut("do {with({__parent__: (!<x><y/></x>)})return; } while(((#0=({constructor: yield this})).__lookupGetter__(\"__iterator__\")) && 0);");
tryItOut("if([window]) /*infloop*/M:for(<><x><y/></x></>; <y><z/></y>; prop, __iterator__ = this) {export __iterator__; }");
tryItOut("/*infloop*/while(*::*)(prop);");
tryItOut("/*for..in*/for(const [__proto__, prototype] = (1.3)[this] in ({a2:z2})) {const constructor = [z1], __count__ = this;{} }");
tryItOut("if(({prototype: [<y><z/></y>].map(false)})) return; else  if (<><bbb xmlns=\"*\"> </bbb></>) {{} }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"constructor\", <><x><y/></x></> = <x/>))(this);");
tryItOut("{return <x/>; }");
tryItOut("M:with(((new Exception(this, null)) /= <x><y/></x>.propertyIsEnumerable(\"__parent__\")))function(y) { yield y; let __noSuchMethod__;; yield y; }");
tryItOut("/*infloop*/while(((p={}, (p.z = this)())));");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __count__: prototype }) }) = new (function(y) { yield y; return;; yield y; })(); (__iterator__ = *::* if (<><x><y/></x></>)); (~[].@foo)) {[1,2,3,4].map }");
tryItOut("gc()yield;");
tryItOut("/*infloop*/while(({__noSuchMethod__ getter: function \t constructor (__proto__)function ([y]) { } })){[,,]const __count__, __noSuchMethod__; }");
tryItOut("throw prop;");
tryItOut("switch(<y><z/></y>) { default: const constructor, constructor = null;break;  }\nexport prop;\n");
tryItOut("{const prototype = <><x><y/></x></>, prototype;if(false) { if (<x><y/></x>) {<x><y/></x>; }} else var __iterator__, constructor = <y><z/></y>; }");
tryItOut("{const __noSuchMethod__, __parent__;/*\n*/( '' ); }");
tryItOut("/*for..in*/M:for(var prototype in (((1 for (x in [])))(<x/>.__defineGetter__(\"__proto__\", function  constructor ()(new (function ([y]) { })(<><x><y/></x></>) |=  /x/g  .@ <><x><y/></x></>)))))prototype");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("switch([11,12,13,14].sort) { default: break;  }");
tryItOut("/*for..in*/M:for(let [({ get __count__ constructor (constructor) { {} }  }), __parent__] = (uneval((({constructor: <><x><y/></x></>}).__lookupGetter__(\"\\r\")))).hasOwnProperty(\"prototype\") in [11,12,13,14].sort) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in ({a1:1}).prop) constructorL: {var __parent__;(function  prototype (__noSuchMethod__)false).apply } }");
tryItOut("/*infloop*/while(*)export constructor");
tryItOut("/*infloop*/for((p={}, (p.z = ((\tfunction (constructor, __iterator__) { yield this } ).call(<><x><y/></x></>, #1=[#1#], <x><y/></x>)))()); (prop = <x><y/></x>.__lookupSetter__(\"__parent__\"));  /x/g ) break L;");
tryItOut("return this;");
tryItOut("with({constructor: function ([y]) { }})gc()");
tryItOut(";/*infloop*/for(window;  /x/ ; <><x><y/></x></>) {gc()const constructor; }");
tryItOut("L:with({__proto__: prototype = prop})Math.sin\n");
tryItOut("/*infloop*/M:for(let ({ __iterator__: [, , prop] }) = [<><x><y/></x></>]; null ? window :  /x/ ; <y><z/></y>) throw [z1];");
tryItOut("yield ((<><x><y/></x></>)[-3/0]); const __noSuchMethod__;");
tryItOut("L: export *;");
tryItOut("/*for..in*/for(const __count__ = ((__parent__.prototype = <x><y/></x>.@foo) ? new ({}).__lookupGetter__(__iterator__ = 1e81()) : <><bbb xmlns:ccc=\"prop.__parent__\"><ccc:eee></ccc:eee></bbb></>) in .propertyIsEnumerable(\"__count__\")) var prototype =  /x/ ;");
tryItOut("/*for..in*/for(let __iterator__ = *::*.__defineSetter__(\"prototype\", function (prototype) { try { let constructor, constructor = true; } catch(prop if  /x/ ) { ; } catch(__proto__ if [[1]]) { {} }  } ) in new ((#1#).watch)(<><x><y/></x></>)((<><x><y/></x></>).call( /x/ , ), (*::*)(__count__,  '' ))) {/*for..in*/L:for(__parent__ = function  prototype (__proto__, __noSuchMethod__) { yield 1e+81 }  in <x><y/></x>.__defineGetter__(\"__proto__\", function(q) { return q; })) {yield [[]]; } }");
tryItOut("if(__proto__.__proto__) { if (('fafafa'.replace(/a/g, function(y) { yield y; throw 1.2e3;; yield y; }))) /*for..in*/for(__iterator__ = 1e+81 & undefined in /*\n*/<><x><y/></x></>) let prop = [,,];} else yield;");
tryItOut("with({__count__: (<x><y/></x> ? <><x><y/></x></> : <x><y/></x>)(<><x><y/></x></>.propertyIsEnumerable(\"constructor\"))})L:if(*::*) {yield; } else  if (<><x><y/></x></>) var prototype = <><x><y/></x></>; else {export constructor;(<x/>); }");
tryItOut("/*infloop*/L:for(__iterator__; {}; <y><z/></y> && (__noSuchMethod__.((__parent__.prototype setter= new Function)))) /*for..in*//* nogeckoex bug 349964 */ for  each\n(let prototype in (yield *::*)) {export *;with({__count__: arguments})yield <x/>; }");
tryItOut("with(* &  '' ){default: case (__parent__ = constructor.@foo): *::*;(0/0);case (__proto__): L:switch(<x><y/></x>) { default: yield;case  /x/g  - <x><y/></x>: let __count__, prop; } }");
tryItOut("/*infloop*/for(__proto__.__parent__ setter= (({a2:z2}).throw(window)).__defineSetter__; prototype.(__parent__ = (yield [,])); (({ prototype: ({ __parent__: __iterator__ }), __count__: ({ function::prop: ({ __parent__: __noSuchMethod__ }), __count__: ({ prop: __count__ }) }) }) = (__parent__ = \t<><x><y/></x></>))) {throw false; }");
tryItOut("{/*infloop*/while(<><x><y/></x></>)const __proto__ = @foo;if((({get: <x><y/><\t/x>, __proto__ setter: <><x><y/></x></> }))) {/*infloop*/while(({__noSuchMethod__ getter: Math.sin, __proto__: *::* })){{} } } else  if (this) {{(true); } } }");
tryItOut("{export prop; }");
tryItOut("const __iterator__, __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  \"\"  ? this : 0.1.constructor) {var __proto__, __count__ = [,,z1]; }");
tryItOut("/*for..in*/for(arguments in ({__count__: eval(\"((({}).hasOwnProperty)())\", *::*.@*).eval(#0=[(p={}, (p.z = constructor)())])})) for(let y in []);");
tryItOut("if(!#3={a:#3#}) /*for..in*/for(__proto__.__iterator__ in (((new (4..unwatch(\"prototype\")//h\n)(<y><z/></y>)).watch)(__proto__.yoyo(function::__iterator__ && <y><z/></y>))))return;");
tryItOut("<ccc:ddd> </ccc:ddd>");
tryItOut("L:while(((prototype = <y><z/></y> + (yield <><x><y/></x></\f>))\n) && 0){throw <x/>; }");
tryItOut("/*infloop*/while(({ get prop(prototype, constructor) { yield __iterator__ = * } , function::__noSuchMethod__ getter: Math.sin })){throw *::*;__parent__, __iterator__ = undefined; }");
tryItOut("if([this]) { if (function  prototype (__iterator__, x::set) { export *; } (<x><y/></x>) << yield ({ __proto__: ({ prop: constructor }), __proto__: ({ prototype: __count__ }) }) = __iterator__ = <x><y/></x>.__lookupGetter__(\"__iterator__\")) {gc()M:do {L:with(*::*){; } } while((prop = eval(\"{throw <x><y/></x>; }\", <><x><y/></x></>)) && 0); } else prop, __count__}");
tryItOut("do {return;{} } while((<x><y/></x>) && 0)");
tryItOut("{throw <x/>;(0/0); }");
tryItOut("{{} }");
tryItOut("with(constructor){export constructor; }");
tryItOut("/*infloop*/M:do {{} } while(@foo.yoyo(<x><y/></x>));");
tryItOut("/*for..in*/for([constructor, function::prototype] = function(id) { return id } in (function ([y]) { })().yoyo(<x><y/></x>)) {gc() const __iterator__; }");
tryItOut("switch(Boolean()) { \rdefault: do yield @foo; while((this) && 0); const __count__;case 7: break; prop;/*infloop*/M:while(__noSuchMethod__.hasOwnProperty(\"prototype\")){({}).hasOwnPropertythrow 3/0; }case (({prop: {}, constructor: * })): L:if(window +=  /x/g ) {L: if(false) yield; else gc() const prototype; }{}case (--window.__lookupGetter__(\"__parent__\").eval(( '' .eval(1e4)))): yield *::*;case (window .@*:: <><x><y/></x></>) / (__parent__ = <x><y/></x>).throw((prop for (prototype in <y><z/></y>))): break; /*infloop*/for(yield = __parent__; @foo; __count__) {let prototype, __iterator__ = false;return; }break; case 5: break;  }");
tryItOut("let (__count__ = let (__proto__, prototype = (-1).__lookupSetter__(\"__parent__\")) __iterator__(<x/>), set) { {const __proto__;/*infloop*/while(<><x><y/></x></>)let __proto__; } }\nL:with(new (@foo)())while((window.__lookupGetter__(\"prototype\")) && 0)continue M;\n");
tryItOut("/*infloop*/do (false); while(<!--yy--> / <x/>.@*);");
tryItOut("if(false) { if (*) {export *; } else {yield \t4.;gc() }}");
tryItOut("for(let y in []);");
tryItOut("with({}) { ({ __iterator__: ({ prototype: ({ __proto__: prototype, __proto__: __noSuchMethod__ }) }) }) = __proto__; } ");
tryItOut("try { let(__parent__ = <x><y/ ({ __iterator__: __parent__, __count__: ({ __count__: prototype }) })></>) ((function(){throw __count__;})()); } finally { constructor = __noSuchMethod__; } ");
tryItOut("L: throw ({a1:1});");
tryItOut("<x><y/></x>if((((function ([y]) { })(__iterator__.__noSuchMethod__ setter= Math.sin, ({}) ^ <><x><y/></x></>)).__iterator__ = let __noSuchMethod__ = 0, prop = constructor: <x><y/></x>;\t)) { if (prop\n) {prototype; } else M:with(__iterator__){export __proto__;throw window; }}");
tryItOut("const __count__ = window, constructor = undefined;");
tryItOut("let(__count__ = new new Function()) ((function(){let(__proto__, __count__ =  \"\" .watch(\"__noSuchMethod__\", <x/>)) ((function(){try { <x><y/></x> } catch(prop) { 1e4; } })());})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in [3/0.propertyIsEnumerable(\"prototype\")]) {*const prototype = <y><z/></y>;M:with(arguments){yield 1e-81;export *; }\f }");
tryItOut("continue ;");
tryItOut("if(this) {__noSuchMethod__ = get;/*for..in*//* nogeckoex bug 349964 */M: for  each((@foo(<y><z/></y>, <><x><y/></x></>))(false.prototype) in  /x/ ) {} }");
tryItOut("/*for..in*/for(var (__parent__) in  \"\" ) {M:with(this){let constructor;return [,]; }switch( /* Comment */true) { __proto__ } }");
tryItOut("switch(prototype) { case <y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\"\t): break; break;  }");
tryItOut("L: return 4.;");
tryItOut("/*for..in*/for(var __parent__ = (String()) in undefined) {/*infloop*/while( \"\" ){yield [,];return __count__; }\nL: gc()\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in (yield <x><y/></x>)) {/*infloop*/for(const constructor = 0x99; undefined; <x><y/></x>) function(y) { yield y; (<x/>).apply; yield y; } }");
tryItOut("with(-0.valueOf(\"number\"))throw constructor+=window;");
tryItOut("/*infloop*/do {export get;gc() } while(false);");
tryItOut("L:with(([__proto__ = [, , ]].map(this.__defineGetter__(\"__parent__\", 'haha'.split), {} .@ prop%=[,]))){/*infloop*/for(__count__ = <x/>; undefined; window) {export __iterator__; }with(prop)Math.sin }");
tryItOut("let (__parent__) { throw  /x/ ; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = function::constructor =  if (*) /= __noSuchMethod__ in ({__proto__: 033,  get constructor(__count__) { return 1e-81 }  }) && <y><z/></y>) /*for..in*/for(const [[,,], __proto__] = new (default: __noSuchMethod__break; )(* / function ([y]) { }, __count__) in (uneval(this))) {yield;/*for..in*/for(let prop in ((({}).__lookupGetter__)(('fafafa'.\treplace(/a/g, eval)))))export __iterator__; }");
tryItOut("/*infloop*/for(var constructor = <y><z/></y>; <x/>; <x/>) (3.141592653589793);");
tryItOut("while(([z1].@foo) && 0){throw <x><y/></x> }");
tryItOut("this.zzz.zzz;");
tryItOut("\nthrow 4.;\n\n(undefined);");
