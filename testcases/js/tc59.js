tryItOut("/*infloop*/for(let constructor; constructor.((uneval(<x><y/></x>))); [[constructor != *].some(new Function)].map(<x><y/></x>.(3.141592653589793))) with({}) { throw __parent__; } ");
tryItOut("if( /x/g ) { if (true) {}} else __parent__ = 3.141592653589793, constructor = [,,z1];");
tryItOut("{}\n");
tryItOut("var __noSuchMethod__ = <x><y/></x>\n");
tryItOut("if(([z1,,].*)) {}");
tryItOut(" const __noSuchMethod__;");
tryItOut("/*for..in*/M:for(const __proto__ = <><x><y/></x></>.__defineSetter__(\"__parent__\", Function) in *) if(*) {}");
tryItOut("{with({}) yield __parent__ = (new [](1e-81, <><x><y/></x></>));return this; }");
tryItOut("/*infloop*/for(__proto__; <bbb xmlns:ccc=\"<employee id=\"1\"><name>Joe</name><age>20</age></employee>\"><ccc:eee></ccc:eee></bbb>; ({ set prop(__noSuchMethod__, __count__) { return * }  }).eval((this.__defineSetter__(\"constructor\", new Function)))) /*infloop*/M:while((this))let __proto__ = null;");
tryItOut("/*infloop*/for((((__parent__ =  '' ).__defineSetter__\t(\"constructor\", Math.pow)).__defineSetter__(\"prototype\", Math.sin)); <x/>;  /x/g  >>= <><x><y/></x></> %= (__proto__ = constructor) /= <x><y/></x>.(this) ? __noSuchMethod__ = [[]] : <x/>--) export __iterator__;");
tryItOut("if(window < 5.0000000000000000000000) gc()");
tryItOut("with({__proto__: <><x><y/></x></> / 1.2e3})\f{export *; }");
tryItOut("/*infloop*/L:for(const prop = <><x/></>; <x><y/></x>.(#1=[#1#]);  \"\" \n) {if( /x/g ) {let __noSuchMethod__, constructor; } else const __parent__ = #3={a:#3#},  /x/g ; }");
tryItOut("\nexport prototype;");
tryItOut("{;let __noSuchMethod__, <x><y/></x>; }");
tryItOut("M:while((constructor.__noSuchMethod__ = __iterator__.__parent__) && 0){/*infloop*/L:for(const __iterator__; __noSuchMethod__; <><x><y/></x></>) {let __parent__;__parent__, constructor = null; } }");
tryItOut("if(<x><y/></x> = 0/0) {\t if ((new window.yoyo(*::*)())) {;return <y><z/></y>; } else {{} }}");
tryItOut("switch([] <= (<x><y/></x>())) { case window *= (<y><z/></y>.watch(\"prop\", gc)):  }");
tryItOut("M:if((({a2:z2}).watch(\"prop\", [1,2,3,4].map))) { } else  if (eval(\"{}\", <x/>))  \"\" ; else {return;export __iterator__; }");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = __noSuchMethod__.prop in  /x/ ) {const prop = <x><y/></x>; }\n\n");
tryItOut("with((@foo.__count__)){throw __count__; }");
tryItOut("/*for..in*/for(({ __iterator__: [[__iterator__, __proto__, __proto__, ], [__parent__, , , ], , , ],  if (*): ({ __count__: ({ __count__: __noSuchMethod__, prototype: constructor }), .2.__defineGetter__(\"prop\", <x><y/></x>): ({ function::constructor: __count__, __proto__: prototype }) }) }) in *.unwatch(\"__parent__\")) {gc()* }");
tryItOut("M:if(false) { if (undefined) *; else {}}");
tryItOut("if(({__iterator__: new (<x/>)(*) }).@*) { if (String((({ __parent__: __noSuchMethod__, setter: prototype }) = <><x<y /></x></>.__lookupGetter__(\"__noSuchMethod__\")))) {__parent__ = __proto__; }} else {const __parent__, prototype;(new Function(\"export prop;\")) }");
tryItOut("(({__count__: __iterator__ = <><x><y/></x></>.hasOwnProperty(\"constructor\")}))");
tryItOut("/*infloop*/while(prototype.__count__%= /* Comment */1e81)export prop;");
tryItOut("with({__noSuchMethod__: \t1e+81})yield;(window);");
tryItOut("do gc() while((0/0.__lookupSetter__(\"__proto__\")) && 0);");
tryItOut("with({prop: (({prop: [[]], __parent__: <x><y/></x> }))})case 9: break; ");
tryItOut("let(function::prototype) { let(constructor = ) ((function(){with({}) { throw StopIteration; } })());");
tryItOut("let (__noSuchMethod__, function::prop = *::*) { /*infloop*/for(const (function ([y]) { })(); <x/>.yoyo(3/0); (p={}, (p.z = ( /x/ );)()))  }");
tryItOut("do <xxx>{__count__}</xxx> while((*) && 0);");
tryItOut("while(((<x><y/></x>)(get)) && 0){{} }");
tryItOut("L:if(new (-0[@foo] && __parent__\t%=(constructor = <x/>))()) {if(*)  else  if (@foo) {break M;\t().__defineSetter__ } else {yield; } }");
tryItOut("if(([, __iterator__, , __noSuchMethod__] = [__parent__])) { if (new Boolean(<x/>, [z1])++) const prop;} else return;var try { break L; } catch(__parent__ if (function(){continue L;})()) { return __iterator__; } finally { return window; } ;");
tryItOut("let (__count__ = constructor) { yield; }export __noSuchMethod__;");
tryItOut("with\t(window.__lookupGetter__(\"__noSuchMethod__\")){export *;throw <x/>; }");
tryItOut("yield <><x><y/></x></>;\nconst prototype;\n");
tryItOut("if(([,,z1].function::prototype)) (__count__);");
tryItOut("throw __proto__\n");
tryItOut("M:if(<><x><y/></x></>.@*) {yield; } else  if (__parent__ = true) {{}; } else  { yield 3 } ");
tryItOut("throw null;3;");
tryItOut("/*for..in*/for(prop((function ([y]) { })()) in eval(\"/*infloop*/for( '' ; <x><y/></x>; <><x><y/></x></>) export prototype;\", __proto__)) {export __noSuchMethod__;export prototype; }");
tryItOut("if(*::*) { if ([1,,]) return; else var prototype = <x/>, __count__\f;}");
tryItOut("for(let y in []);");
tryItOut("L: __parent__;");
tryItOut("with({prototype: <x><y/></x>.propertyIsEnumerable(\"__parent__\")}){}");
tryItOut("/*for..in*/for([__noSuchMethod__, __count__] = ({prototype setter: (<x/>).__defineSetter__ }) in __parent__ = ({return [z1,,]; })) yield;");
tryItOut("/*for..in*/for(const *::*['__iterator__'] in true) { continue \neval\n }");
tryItOut("with({prop: ((new String()) |= <y><z/></y> == <x><y/></x>(yield <x><y/></x>))}\t)(this.__defineGetter__(\"constructor\", @foo));");
tryItOut("if(((this ? (prototype && true) : __parent__ = .2).__defineSetter__(\"__count__\", (function(q) { return q; }).apply)).hasOwnProperty(\"__noSuchMethod__\")) let(prototype = <x><y/></x>, constructor =  \"\" ) { yield; else if( /* Comment */(null)([[1]], <y><z/></y>)) {M:if(<><x><y/></x></>) {const __parent__;prototype } else  if (<><x><y/></x></>) {; } } else  if ((__parent__.__noSuchMethod__)) {var __count__, constructor = [,,z1];export *; } else gc()");
tryItOut("L: /*infloop*/for(1.2e3;  /x/g ; ({}).__lookupGetter__) {gc() }");
tryItOut("L:with(this.__defineGetter__(\"__parent__\", <y><z/></y>)){prop, __proto__;eval }");
tryItOut("do {yield;constructor } while(((((<x/> >>= <><x><y/></x></>))[__count__.watch(\"__parent__\", Function)])) && 0);");
tryItOut("({ constructor: __proto__, __parent__: [] })");
tryItOut("/*for..in*/for(let  get __iterator__ constructor (prop, __proto__) { yield <x><y/></x> } .__parent__ in (#1=[#1#].__count__ = this)) with({}.watch(\"prop\", (({}).hasOwnProperty).call\t)){(constructor);__iterator__; }");
tryItOut("/*infloop*/while(typeof prototype.@*)for(let y in []);");
tryItOut("{throw  \"\" (<zzz><><x><y/></x></></zzz>.((this.__defineGetter__(\"__parent__\", function (constructor)1e81)))) }");
tryItOut("with({__parent__: <x/> >>= @foo})yield this;");
tryItOut("/*infloop*/for(const ({ function::prototype: prop, constructor: __proto__ }) = (+<><x><y/></x></>.watch(\"__iterator__\", gc)); new (this.__defineSetter__(\"prototype\", [1,2,3,4].map))([z1,,]); new <x/>[ \"\" ]()) return  /x/g ;");
tryItOut("/*for..in*/M:for(let __iterator__ =  /x/  in <><x><y/></x></>) (false);");
tryItOut("export *");
tryItOut("if(__proto__.(((({__count__: *, prototype getter: (1 for (x in [])) })) <<= yield <><x><y/></x></>))) { if (((this.__defineGetter__(\f\"__count__\", new Function).*) for each (constructor in __parent__ = [z1,,])/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in @foo) L:if(<><x><y/></x></>) {; } else  if (-0) {prototype, __noSuchMethod__; })) {with(prop.( /x/g .hasOwnProperty(\"__parent__\"))())yield (<x/> %  /x/ ); } else {const __count__, __noSuchMethod__\n }}");
tryItOut("gc()");
tryItOut("if(prop = \r<>\t<x><y/></x></>\n) {<x><y/></x>; } else  if (*) return;");
tryItOut("L: {return; }");
tryItOut("/*infloop*/do (<x><y/></x>); while(<><x><y/></x></> - <x/>);");
tryItOut("this.zzz.zzz;");
tryItOut("with({__iterator__: *}){while((let (__noSuchMethod__, prototype) <x><y/></x>.__defineGetter__(\"__noSuchMethod__\", function () { return true } ).eval((<x><y/></x>[ '' ])[__iterator__ = *::*])) && 0)gc() }");
tryItOut("L: {while((__count__) && 0); }");
tryItOut("yield <y><z/></y>;");
tryItOut("switch(<><x><y/></x></>) { default: break;  }");
tryItOut("let(function::__noSuchMethod__ = *::*, prop) { break L;");
tryItOut("if((new Function(null)).__lookupGetter__(\"__iterator__\")) {/*infloop*/M:do  while((new function  __noSuchMethod__ (__noSuchMethod__, __parent__)this( /* Comment */__proto__, <x><y/></x>))); } else  if (new Number()) {gc }");
tryItOut("this.zzz.zzz;");
tryItOut("if(yield @foo) return <x/>; else  if (__noSuchMethod__) {export prop; } else __parent__, constructor;");
tryItOut("while(((prototype.prop)) && 0)1e-81");
tryItOut("/*infloop*/for(prototype = constructor-=<x><y/></x>; (<x><y/></x>\n.isPrototypeOf((__iterator__.constructor = __count__))); yield <x/> || <><x><y/></x></>) {return;return false\n{export __parent__;;export *\n__parent__ } }");
tryItOut("break ;\ncontinue ;\n");
tryItOut("throw  /x/g ");
tryItOut("(prototype);");
tryItOut("/*infloop*/for(@foo; <y><z/></y>; <><x><y/></x></>) export constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("if(yield  '' ) const __noSuchMethod__; else {function  __iterator__ (__proto__, __proto__) { (4.); } 'haha'.split }");
tryItOut("let ([prototype, ({ __noSuchMethod__: [] }), true['__iterator__'], , ({ __proto__: __count__ })]) { return [15,16,17,18].sort(__parent__, @foo); }\n");
tryItOut("if( /* Comment */this.zzz.zzz ?  /* Comment */( '' .__lookupSetter__(\"__proto__\")) : ((new  '' (\t)) + false)) {for(let y in []);L: {__iterator__; } } else {/*for..in*/for(var prop = ((__count__)()) in @foo) {let constructor = undefined//h\n;(([,,z1]).watch).apply }; }");
tryItOut("with({}) { __noSuchMethod__ = __proto__; } ");
tryItOut("if([z1,,].valueOf(\"number\")) let __count__ =  /x/g ; else {<x><y/></x>;return; }");
tryItOut("/*infloop*/L:for(const [] = ([__iterator__ = <x><y/></x>]); (true <<= constructor.__iterator__ = prop); (__count__)|=constructor++) {let prop;var __noSuchMethod__ =  \"\" , __iterator__ =  '' ; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in *::*) {var prop; } }");
tryItOut("/*for..in*/for([__parent__, __noSuchMethod__] = 5.0000000000000000000000 in (new (function(y) { yield y;  { ; } ; yield y; })(Date(true, <y><z/></y>)))) {return; }");
tryItOut("if(delete <><x><y/></x></>.prop <= window ? window : undefined.__lookupSetter__(\"__count__\")) {{__iterator__ = 3.141592653589793, __iterator__ = *::*;continue L; }export prototype; } else {{} const __iterator__; }");
tryItOut("L: function (prototype) { return <><x><y/></x></> } ");
tryItOut("with({}) { with({}) { return __noSuchMethod__ = true; }  } ");
tryItOut("if(null--) yield; else {gc() }");
tryItOut("M:if(<x><y/></x> & [[]]) {yield <><x><\ny/></x></>; constructor, __iterator__ = 1e+81 :with({__count__:  '' .*}){export __noSuchMethod__; } }");
tryItOut("/*for..in*/for(var [constructor, prototype] = <x/>( \"\" ).__defineGetter__(\"__count__\", return) in [1,,]) /*infloop*/L:while(<x/>){{}return; }");
tryItOut("let (constructor = <x/> < <><x><y/></x></> .. (setter.__iterator__ getter= (new Function(\"return @foo;\"))), __noSuchMethod__ = __proto__ =  /x/ ) { /*for..in*/for(let prototype.prototype in @foo) <x><y/></x>;\f/*infloop*/while( /x/g )yield *::*; }");
tryItOut("/*infloop*/L:for((*); constructor >= undefined; @foo) {{} }");
tryItOut("L:if([3/0].hasOwnProperty(\"__count__\"))  else /*infloop*/L:for(const __iterator__; (({__iterator__: <x><y/></x>, prop getter: gc })); <x><y/></x>.(<y><z/></y>)) {break L; }");
tryItOut("/*for..in*/for(var prototype in ((function (__iterator__)\n(\f<><x><y/></x></>))((* in \n(*.propertyIsEnumerable(\"constructor\")))))){(window);return; }");
tryItOut("/*for..in*/for(let __iterator__ = <x><y/></x> in <><x><y/></x></>) throw <x/>;");
tryItOut("/*infloop*/for(this.zzz.zzz\t; (RegExp(null)); eval(\"-1;\", true)) {/*infloop*/L:for((* .. <><x><y/></x></>);  \"\" .@*; [15,16,17,18].filter(Math.pow, *)) {__iterator__ = *::*, __iterator__ =  \"\" ; }\nyield; }");
tryItOut("/*for..in*/for(const ({ __parent__: ({ __parent__: __noSuchMethod__ }) }) in ()) {{} }");
tryItOut("if((Array(window.__count__))) {(window); } else  if ((<><x><y/></x></> .@x:: -1).call(false, )) undefined;");
tryItOut("with({}) __count__ = __count__;");
tryItOut("if((__iterator__, prop().eval(this.zzz.zzz))) gc() else  if ((Number(<x><y/ constructor(<><x><y/></x></>)><//*>(/)) >>>=[[1]].yoyo(*)) {;\n{}\n } else yield <x/>;");
tryItOut("if((function ([y]) { })()) { if (__proto__) {return;__noSuchMethod__; }} else {yield;var __noSuchMethod__, __proto__ = window; }");
tryItOut("L:with({__noSuchMethod__:  '' })/*infloop*/L:for(let __noSuchMethod__ = window; <>\n<x><y/></x></>; <x><y/></x>) let prototype = this, prototype = window");
tryItOut("L: if(@foo) yield; else  if ((<x/>.__lookupGetter__(\"prototype\"))) yield; else {yield; }");
tryItOut("with({}) { let(__parent__, __count__ = +<x/>) ((function(){let(constructor = __proto__.constructor setter= *) ((function(){return function::__count__ = #1#;})());})()); } ");
tryItOut("with(<bbb xmlns:ccc=\"((Math.sin).apply).call(<x><y/></x> !== <x><y/></x>, (window).call( \"\" , undefined, [[1]]))\"><ccc:eee></ccc:eee></bbb>)__count__ = this;");
tryItOut("if(<y><z/></y> instanceof <x/>.eval(__count__ = <><x><y/></x></>)) {while((*) && 0)\n{{} } } else @foo");
tryItOut("@foo\ncontinue M;");
tryItOut("function (constructor) { return (~[z1].__defineGetter__(\"__count__\", eval)).propertyIsEnumerable(\"__proto__\") } ");
tryItOut("try { let(constructor = <><bbb xmlns:ccc=\"@foo ? 3/0 in [1,,] : \"><ccc:eee></ccc:eee></bbb></>) ((function(){with({}) with({}) return ( '' .propertyIsEnumerable(\"__proto__\"));})()); } catch(__proto__ if (function(){throw StopIteration;})()) { this.zzz.zzz; } catch(__count__) { try\t { __noSuchMethod__.constructor = constructor; } finally { for(let y in []); }  } ");
tryItOut("if( '' ) const prototype, __proto__; else  if ((RegExp([1,,]))) export *;");
tryItOut("/*infloop*/for(let __iterator__; <x><y/></x> = <x><y/></x>; __proto__ = <y><z/></y>) let __proto__ = this;");
tryItOut("/*for..in*/for(__iterator__ in ((function(q) { return q; })([[1]]))){while((*::*) && 0){return window; }with(({ constructor: __parent__, __proto__: __iterator__ }) = <><x><y/></x></>){do break M; while((<x><y/></x>) && 0);/*infloop*/while(*){\tthrow @foo;var prop, prop; } } }");
tryItOut("/*for..in*/for(const constructor in ((new Function)(()))){if(Function) { if ([,,]) { } else { }}export *; }");
tryItOut("/*infloop*/for(([1,2,3,4].slice).call(<x><y/></x>, true); [15,16,17,18].filter(({}).hasOwnProperty, 0.1); ( /* Comment */-0)) ");
tryItOut("if(@foo) { if ((new Boolean(<x><y/></x>))) {}} else {yield []; }");
tryItOut("gc()try { throw *::*; } catch(__iterator__) { return; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in function ([y]) { }) false;");
tryItOut("/*for..in*/M:for(let (true)( /x/g ) in (((eval).apply)(this /= <x><y/></x>)))if((yield 1.3)) { if (this.zzz.zzz)  else 1e+81;}");
tryItOut("/*for..in*/for(let [__parent__, __proto__] = *.hasOwnProperty(\"prototype\") in __iterator__) {return;export prototype; }");
tryItOut("let (__proto__ = Date(<x/>)) { /*for..in*/for([__iterator__, (<y><z/></y> in <x/>)] = __iterator__%=*::* in 1e+81) export __count__\nexport prop; }\n");
tryItOut("L: {(this); }");
tryItOut("/*for..in*/L:for([prop, __noSuchMethod__, __count__] = (p={}, (p.z = <x><y/></x>)()) in <x/>) ;");
tryItOut("{ \"\" ;let (__count__, constructor = ({a2:z2})) {  } }");
tryItOut("M:if(Array(@foo, window).isPrototypeOf(<x><y/></x> || 0/0)) { if (this.__defineSetter__(\"__proto__\", function \f(__iterator__, constructor) { throw <><x><y/></x></>; } )) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in  /x/ ) {yield *::*; } }} else {throw <><x><y/></x></>;return; }");
tryItOut("do return null; while((window) && 0);");
tryItOut("/*infloop*/while([({a1:1})]){throw  /x/g ; }");
tryItOut("; const prop;");
tryItOut("for(let y in []);");
tryItOut("let(__iterator__, __parent__) { {}");
tryItOut("L:with(<x><y/></x>.(window)){{yield @foo;false; }var prop; }/*for..in*/L:for(const __noSuchMethod__ in -<x/>) {{} }");
tryItOut("if(<><xxx>{__proto__}</xxx></>) {\n/*for..in*/M:for(var __parent__ = new (1 for (x in []))((__proto__.prop setter= (\n*::*)),  \"\" .yoyo(constructor)) in ({}.__noSuchMethod__ = @foo)) {} }");
tryItOut("M:with({function::function::__parent__: (( \"\" \n).isPrototypeOf(eval(\"#1=[#1#]\", <y><z/></y>)))}){if(undefined) return window; else  if (*::*) {export try { (*); } catch(prototype if <x/>) { let __noSuchMethod__; } ; } }");
tryItOut("with({}) yield [constructor];");
tryItOut("/*infloop*/while((<><x><y/></x></>)[__noSuchMethod__] >>>=__iterator__ = window){gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in __proto__) {continue M; }");
tryItOut("/*infloop*/for(var prototype; (3.141592653589793 if (<x><y/></x>)).(\"__count__.prototype\"); (0[window] | <><x><y\t/></x></> = this).propertyIsEnumerable(\"__noSuchMethod__\")) {constructor; }");
tryItOut("let(constructor) { gc() const prop;");
tryItOut("/*infloop*/do {throw  /x/g ;M:if([,,z1]) {return;return; } else  if (*::*) let constructor = *; } while(1e4.@foo\n);");
tryItOut("L:if([15,16,17,18].filter( /x/g ,  '' )) return undefined;");
tryItOut("L: return;\ndo {} while((this) && 0);\n");
tryItOut("{/*infloop*/L:for(const __proto__; (-0).__lookupSetter__(\"__proto__\"); __parent__) {var __noSuchMethod__ = window, __count__ = [1,,];return; } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do {new Function } while(null);");
tryItOut("/*for..in*/for(let [constructor, delete] = <x/> in <><x><y/></x></>) {gc() }\narguments\n");
tryItOut("if( /x/ ) {return <x><y/></x>; } else  if (*::*) {return;var __proto__, __proto__; } else gc const prop;");
tryItOut("L:while((<><x><y/></x></> ? <><x><y/></x></> : #1#) && 0)export *;");
tryItOut("if( /x/ ) const set = #1=[#1#], __proto__ = null;");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) { throw __parent__; } ");
tryItOut("with(( /x/  ? null : .2).*){with({({ prop: ({ function::prop: __iterator__ }) }): +<x><y/></x>[[,]]})export *; }");
tryItOut("while((new Function(__proto__)) && 0){while((<><x><y/></x></>) && 0)break M; }");
tryItOut("throw each;");
tryItOut("gc()\n");
tryItOut("__noSuchMethod__;");
tryItOut("switch((uneval(window))) { case 3:  }");
tryItOut("/*infloop*/M:for(([11,12,13,14].filter) .@*:: this; (<><x><y/></x></> + <x><y/></x> if (constructor\f)); //h\n__proto__.__count__ = <><x><y/></x></>) {return <x/>;return; }");
tryItOut("if(eval(\"yield;\", __proto__ = {})) {gc() }");
tryItOut("/*infloop*/M:for(new RegExp(); true; __noSuchMethod__ = {}) {(<><x><y/></x></>/*\n*/); }");
tryItOut("/*for..in*/for(__count__ = * in prop.propertyIsEnumerable(\"__proto__\")) {((*)); }");
tryItOut("/*infloop*/for(__parent__; ({__count__: (prop+=this.eval( \"\" )), constructor: ((yield *)) }); ) {if((function ([y]) { }\r for each (__proto__ in -0) for each (__noSuchMethod__ in <y><z/></y>))) { if (null.__lookupSetter__(\"constructor\")) {var __parent__ = function::__count__;{} } else return window;}with({prototype: this}){return <y><z/></y>;const __noSuchMethod__ = <y><z/></y>, __proto__ =  /x/g ; } }");
tryItOut("if(x::__count__%=let (constructor = constructor, constructor = @foo) 1.3) { if (typeof yield __iterator__) return this; else continue L;}let (__proto__, __noSuchMethod__) { (arguments); }");
tryItOut("for(let y in [5,6,7,8]) let(prop = ({__parent__ setter: false, __proto__: ([3/0]) })) { for(let y in []);");
tryItOut("yield;");
tryItOut("L:if(((<><x><y/></x></>).watch).call( \"\" , <y><z/></y>, *::*)) { if (--((({}).hasOwnProperty)())) {return ({a2:z2});({}).__lookupGetter__ } else return;}");
tryItOut("if(((( { {} } ).apply)(*::*[\r]))) { if (this.hasOwnProperty(\"prop\")) yield; else {yield *::*; }}");
tryItOut("if([[], __parent__, , , ] = export *;) {if((yield <x><y/></x>)) return <><x><y/></x></>; else {continue L; } } else export *;");
tryItOut("with({}) try { __proto__, __iterator__ = <><x><y/></x></>; } finally { ; } ");
tryItOut("/*for..in*/for(var __count__ in true.valueOf(\"number\")) yield;");
tryItOut("/*for..in*/for(prop = ({ __count__: ({ prototype: ({ __proto__: __proto__, __parent__: <><x><y/></x></> }), constructor: [[({ __noSuchMethod__: __proto__ }), , , ({ __count__: __parent__ })], prototype, , ({ __proto__: ({ __parent__: prototype }) })] }) }) in  '' ) try { {} } catch(__iterator__ if (function(){export *;})()) { export __proto__; } catch//h\n(__proto__) { return; } ");
tryItOut("if((RegExp())) return __parent__;");
tryItOut("/*for..in*/L:for(let [__count__, prototype] = prop.prototype setter= /a/gi in (<x/> >> {}).watch(\"__count__\", Math.pow)) {( \"\" );export *; }");
tryItOut("do (window); while((<x><y/></x>) && 0);");
tryItOut("if(0) {-1;(<><x><y/></x></>); } else  if ( /x/ ) {var constructor = <y><z/></y>; } else {gc() }");
tryItOut("M:if( ) var __noSuchMethod__, prop =  \"\" \nwith({}) {  } ");
tryItOut("L: let (prototype) { /*infloop*/do const prop = -3/0; while(<y><z/></y>); }");
tryItOut("M:if(new this(*::*, <x><y/></x>)) {yield;gc() }");
tryItOut("(true);");
tryItOut("with({}) { with({}) { try { let __parent__ = (function ([y]) { })(); } catch(__parent__ if (function(){export *;})()) { break M; } catch(__parent__) { export prop; } finally { export *; }  }  } ");
tryItOut("/*for..in*/for(__parent__ in __noSuchMethod__) {export __parent__;gc() }");
tryItOut("/*for..in*/for(let constructor in [throw  \"\" ;].some([1,2,3,4].map)) {throw [[]]; }");
tryItOut("/*infloop*/M:while(__proto__.__count__ getter= function () { return (__proto__ = null) } ){/*for..in*/for(var __iterator__ = <y><z/></y> in  /x/ ) {{} }\nlet delete;\n }");
tryItOut("/*infloop*/L:for(var ({ __parent__: __proto__ = this, __proto__ }) = __parent__.__parent__ = (({} ^= (-0))./hasOwnProperty(\"prop\")); yield (function(q) { return q; }).apply; (this.zzz.zzz)) gc()");
tryItOut("/*infloop*/for(var [__proto__, [, , ], , [, , , ]] = ([<y><z/></y>.__lookupSetter__(\"prop\") if ( /x/ )]); (this.__defineSetter__(\"prop\", (new Function(\"throw true;\")))); __count__ = <y><z/></y>) {; }");
tryItOut("/*for..in*/L:for(let __proto__ = (<x><y/></x> = __noSuchMethod__) in void (yield <y><z/></y>)) /*infloop*/for( '' ; __iterator__; <x/>) return (-1);");
tryItOut("/*infloop*/for([[]]; true; #3={a:#3#}) {prop, __iterator__ = <y><z/></y>;yield; }");
tryItOut("export __noSuchMethod__;");
tryItOut("/*for..in*/for(const __parent__ in  '' .__parent__ = [z1,,]) {M:switch(prototype) { case 1: break; default: break;  }{} }");
tryItOut("/*for..in*/for(const [, , ({ function::__proto__: ({ __proto__: __proto__ =  /x/ , constructor = 5.0000000000000000000000, __parent__: [({ constructor: __noSuchMethod__ }), __iterator__] }) }), [({ __proto__: ({ prototype: ({ __count__: prototype, __iterator__: __count__ }), prop: ({ prototype: __iterator__, __noSuchMethod__: prop }) }), prototype: ({ \f__count__: __iterator__ }) }), , __noSuchMethod__]] in ((({ prop: __parent__ }) = Object())((Function).call([1,,], ))))let(__count__) ((function(){__parent__['__count__'] = __proto__;})());");
tryItOut("with({__iterator__: eval(\"<x/>\", false)}){__iterator__;let __count__; }");
tryItOut("(undefined);");
tryItOut("/*infloop*/while(*::*)yield;");
tryItOut("if(<y><z/></y>) {return; } else  if ([z1,,].__lookupSetter__(\"__parent__\")) {yield;__proto__;\t }");
tryItOut("{return; }");
