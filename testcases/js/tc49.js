tryItOut("throw <y><z/></y>;");
tryItOut("with({prototype: __parent__ = __iterator__((__count__)[@foo])}){ }");
tryItOut("return;");
tryItOut("/*infloop*/for(const __iterator__ = undefined; null; [[]]) __count__ = <x><y/></x>;");
tryItOut("/*for..in*/for(var __count__ in ((({}).__lookupGetter__)(false.@*)))export __iterator__;");
tryItOut("if((yield )) { if ([(window)(<><x><y/></x></>)]) yield; else {continue ; }}");
tryItOut("if(__noSuchMethod__ = __count__) { if (({prototype: <x><y/></x>})) {; } else {throw prop; }}");
tryItOut("{L: {const __parent__, constructor; } }");
tryItOut("if(__count__.__count__ = true) {\tyield false;break ; }");
tryItOut("L:while((window--.__count__) && 0){__proto__; }\n");
tryItOut("/*for..in*/for(\tvar __noSuchMethod__ in ((__parent__ = true)(<><ccc:ddd><ccc:ddd>yyy</ccc:ddd><ccc:ddd><>yyy</><ccc:ddd> </ccc:ddd></ccc:ddd></ccc:ddd></>.([([11,12,13,14].map)]))))let prototype, __count__;");
tryItOut("if([[1]] >= @foo) { if ((*::*)) } else return;");
tryItOut("L: {__parent__ }");
tryItOut("__iterator__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__(window << [,]) in [11,12,13,14].filter) export *;");
tryItOut("{export *;return  \"\" ; }\n; const constructor;");
tryItOut("/*for..in*/for(let constructor = (!<x/> >>= new #1=[#1#](<x><y/></x>, null)) in this ? eval(\"gc()\", 0.1) : <x><y/></x> ^= <><x><y/></x></>) const constructor, __parent__ =  /x/g ;");
tryItOut("/*for..in*/for(var (<x><y/></x> .@x:: *).prop in ((Math.pow)((p={}, (p.z = undefined)()))))throw *::*");
tryItOut("yield;");
tryItOut("if(<y><z/></y>) { if (null) __parent__ else {(<x/>);/a/gi }}");
tryItOut("with({prop\n: gc(window)})return;");
tryItOut("if(let (({ prop: __count__, yield: prototype }) = @foo @ -0) [11,12,13,14].some/*\n*/) {continue M;throw (({prop: 0.1 })); }");
tryItOut("/*infloop*/do {; } while(([,].unwatch(\"__iterator__\")));");
tryItOut("continue L");
tryItOut("/*for..in*/for(const prototype = ({}) = <y><z/></y> in this) var constructor;");
tryItOut("/*for..in*/for(let [__iterator__, prop] = this++ in  '' ) ;");
tryItOut("let(this.zzz.zzz;, prototype) ((function(){for(let y in [5,6,7,8]) let(__iterator__ = *.valueOf(\"number\")) ((function(){with({}) })());})());");
tryItOut("function(q) { return q; }");
tryItOut("/*for..in*/for((function ([y]) { })()['constructor'] in <x><y/></x>) throw undefined;");
tryItOut("let (__count__ = ({__noSuchMethod__ setter: (({}).hasOwnProperty).call }), prop) { yield; }");
tryItOut("this.zzz.zzz;");
tryItOut("let(({ prototype: ({ __count__: [[]] }), __count__: prototype })) { with({}) { with({}) __noSuchMethod__ = __proto__; } ");
tryItOut("/*infloop*/do {/*infloop*/for(<y><z/></y>; 3; __count__) return;/*infloop*/while(<x><y/></x>){export *;throw 1e-81; } } while((String(<x/>, this).__defineGetter__(\"__count__\", function(q) { return q; })).throw(let (__parent__) window |= eval(\"(<x><y/></x> == <><x><y/></x></>)\", null.__defineGetter__(\"__proto__\", Math.pow))));");
tryItOut("with((uneval(__count__)) , ({}))do {return;yield; } while(((1.2e3.isPrototypeOf(function(id) { return id })).@foo) && 0);");
tryItOut("prototype = __count__;");
tryItOut("continue ;");
tryItOut("throw StopIteration;");
tryItOut("if(* ? <x><y/></x> : 033) { if ((new Function(\"{}\"))) gc()} else gc()");
tryItOut("/*for..in*/for(__iterator__ in ((function (__noSuchMethod__, prop)__parent__ = true)(<><x><y/></x><ccc:ddd>yyy</ccc:ddd></>)))__iterator__");
tryItOut("<>Number(*)</>");
tryItOut("while(([1,,]) && 0){;let \tprototype = (-0), prop; }");
tryItOut(" { yield +(<><x><y/></x>yyy</> if (<><x><y/></x\r></>)).__iterator__ } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prop.__iterator__ in ((yield new ()()))) {(true);return; }");
tryItOut("return;");
tryItOut("with((prototype = <><x><y/></x></>)){__noSuchMethod__ }");
tryItOut("L:switch((0x99)[__parent__//h\n]) { __count__ }");
tryItOut("yield constructor = new (new Function)(<y><z/></y>, [[]]);");
tryItOut("{if((1 for (x in []))(constructor = __count__, constructor = .2.(<x/>))) { if (<x><y/></x>.__noSuchMethod__) /*infloop*/L:for(const __count__; (<x/>).call(<x><y/></x>, ); <x><y/></x>) {return;export prop; } else {__noSuchMethod__ = 1.3, __parent__; }}if(prototype) { if (arguments) let  { throw  '' ; } ;} else {prototype; }/*infloop*/do {throw <x/>; } while(<><x><y/></x></>); }");
tryItOut("return eval(\"window\", [,,]);");
tryItOut("__parent__ = <x><y/></x>, constructor;\nif(<x/>) \f{yield; } else  if (<><y><z/></y></>\f) {export *; }\n");
tryItOut("if(<x><y/></x>) {var __noSuchMethod__, __noSuchMethod__ =  /x/ ;break L; }");
tryItOut("/*for..in*/for(let __count__ = (<x><y/></x> .@*:: __proto__ @ <x/>) in (__count__ = (this.__defineSetter__(\"delete\", function(q) { return q; })))) throw StopIteration;");
tryItOut("if(__count__.isPrototypeOf(((({constructor:  '' }) > window\n) -= RangeError(<><x><y/></x></>, <x><y/></x>).throw(prop)))) { if \f((-Object((__count__.(__parent__)) || (constructor-=@foo)))) {( \"\"  > <x/>);1e81; } else {M:if(function(id) { return id }) const prototype, prototype = <><x><y/></x></>; else  if (<x/>) {{}export *; } else ; }}");
tryItOut("M:if((<x/>.__count__ ? <x><y/></x>\f .. @foo : ({constructor setter: this }) ^= 'fafafa'.replace(/a/g, 'haha'.split).@foo)) {with({}) { __noSuchMethod__ = __proto__; }  } else L:with(<x><y/></x>){export *;<y><z/></y> }");
tryItOut("do return; while(((({}).hasOwnProperty)) && 0);");
tryItOut("/*for..in*/L:for(__parent__ in prototype = true.unwatch(\"constructor\")) {L: {export *;yield window; } }");
tryItOut("with(undefined)with( /x/g ){{} }");
tryItOut("switch('fafafa'.replace(/a/g, (eval).call)) { default: const __iterator__, __iterator__ = <><x><y/></x></>;break; with({}) { export *; } break L;break; break;  }");
tryItOut("if(('fafafa'.replace(/a/g, (1 for (x in []))))) { if ((@foo())) /*infloop*/for(var __count__; @foo; prop) {export __proto__; } else export *;}");
tryItOut("L: {L: (5.0000000000000000000000); }");
tryItOut("try { try { with({}) this.zzz.zzz; } catch(prop) { for(let y in [5,6,7,8]) try { var __count__ = *, __count__ = __parent__; } finally { gc() }  }  } catch(__parent__) { for(let y in [5,6,7,8]) let(prop, __proto__) { with({}) return; } ");
tryItOut("yield; const __noSuchMethod__;");
tryItOut("while(([z1,,].yoyo(<y><z/></y>) + <x><y/></x>++) && 0){let (__proto__ = <><x><y/></x></>, prop = <x/>) { const __noSuchMethod__; } }");
tryItOut("with(<x/>)throw *::*;");
tryItOut("switch(([ \"\" ])) { default: [1,2,3,4].slicebreak;  }");
tryItOut("if(({__parent__: [prototype] }).__defineSetter__(\"prop\", [1,2,3,4].slice)) __noSuchMethod__; else  if ((({}).hasOwnProperty).call(, (arguments)())) {function  prototype (__parent__, __count__)<x><y/></x> }");
tryItOut("/*infloop*/L:do const __parent__ = this; const __iterator__; while(new (/a/gi)(0) for each (__parent__ in __count__) for each (__parent__ in <y><z/></y>) for (prop in -3/0));");
tryItOut("{return false; }");
tryItOut("/*infloop*/for(constructor; (this.__defineSetter__(\"__count__\", ({}).hasOwnProperty)); prototype.(<x><y/></x>)) (*::*);");
tryItOut("L:switch(window = <><x><y/></x></> & #1#) { default: /*for..in*/for(const __count__ in (([1,2,3,4].slice)((prototype = __noSuchMethod__))))export constructor;break;  }");
tryItOut("\tL:with(<x/>.hasOwnProperty(\"__iterator__\")){const prop = window; }");
tryItOut("throw *::*;");
tryItOut("switch(prop = (prop = <x/>.__count__ = <><x><y/></x></>)) { default: if( /* Comment */<><x><y/></x></> & let (prop = *::*, function::__noSuchMethod__ = [z1])  /x/ ) {/*infloop*/L:for(var ({ prop: __count__, prototype: constructor }) = @; yield constructor; false |= @foo) {yield window;\t{} } }\f else  if ([11,12,13,14].some) let __parent__ =  '' ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prototype in __iterator__.constructor = yield <y><z/></y>) gc()");
tryItOut("/*infloop*/while(new (eval(\"3\", __iterator__))){return; }");
tryItOut("/*for..in*/for(prop = .2 in true) {export *; }if((constructor)) {export *;( '' ).watch } else  if ((new (*)())) ");
tryItOut("while((<x/>) && 0){*; }");
tryItOut("export *;");
tryItOut("/*infloop*/M:do {yield case 5: ;return; } while((p={}, (p.z = this.__proto__)()));");
tryItOut("L: export *;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/do export constructor; while();");
tryItOut("/*for..in*/for(let [__parent__, __proto__] = <x><y/></x> in __proto__) throw 3.141592653589793;");
tryItOut("/*for..in*/for(const __parent__(((__count__)+=(__count__ = __iterator__))) in <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((<x><y/></x> for each (constructor in [,])))) /*infloop*/while(true){}");
tryItOut("if([undefined].isPrototypeOf(prop = (this.__defineGetter__(\"__noSuchMethod__\", function  __count__ () { return @foo } )))) yield ({__noSuchMethod__ setter: function () { yield (function ([y]) { })() } , constructor: <x><y/></x> }); else  if (new Function()) {export prototype; } else let (prop) { ; }");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("M:if(yield prop = <x><y/></x> .@ this.watch(\"__parent__\", (#3={a:#3#}).watch)) M:while(((uneval([15,16,17,18].map(true, <><x><y/></x></>)))) && 0){if(__noSuchMethod__) (*::*); else  if (this) ( /x/g ); } else  if (0.1) {let __iterator__ =  /x/g (({a1:1}), <><x><y/></x></>);/*infloop*/do throw *::*; while(let (prototype = this, __count__) <><x><y/></x></>); }");
tryItOut("if(window) {yield;gc() } else  if ((-1)) {{continue ; }gc() } else {function ([y]) { };var prototype, __iterator__ = <y><z/></y>; }");
tryItOut("[1,2,3,4].map");
tryItOut("if(let (__noSuchMethod__ = ({a2:z2}), __parent__ = <x><y/></x>)  \"\" ) gc() else  if ((0.1)[<><x><y/></x></>]) { } else {return;yield; }");
tryItOut("/*infloop*/M:do {return false; } while(__parent__ = 1e+81);");
tryItOut("/*for..in*/for(const prototype = (({a1:1}).__parent__ ? yield this : x::prototype .@*:: this) in --__parent__.yoyo([z1].__iterator__)) {with(((uneval(function(id) { return id })))){yield window; } }");
tryItOut("/*for..in*/M:for(let __proto__.constructor in (([1,2,3,4].map)(((#1=[#1#])(*::*, *)))))gc()");
tryItOut("M:if(Math.pow((<>\f<x><y/></x></> >>>=window),  '' )) {#3={a:#3#}let __proto__; } else  if (-window.propertyIsEnumerable(\"__parent__\")) switch(<x><y/></x>.(*)) { case <><x><y/></x></>\n: export *;break; throw  \"\" ;case 4:  } else {/*for..in*/{export __iterator__;export __iterator__; } }");
tryItOut("throw this;");
tryItOut("/*infloop*/for((__noSuchMethod__.__noSuchMethod__); let (default: yield;break;  /x/g ;)  \"\" ; __parent__ = __parent__) \n\f");
tryItOut("continue M\n");
tryItOut("M:if('fafafa'.replace(/a/g, (<><x><y/></x></>.__parent__))) {;while((<x><y/></x>) && 0){} } else {let (constructor =  /x/g ) { {} } }");
tryItOut("function::yield");
tryItOut("/*infloop*/for(__count__; \t<><x><y/></x></>.yoyo( '' ); #1= \"\" ) return 0;");
tryItOut("/*infloop*/while(<x/>.propertyIsEnumerable(\"__proto__\")){{}throw false; }");
tryItOut("for(let y in [5,6,7,8]) with({}) with({}) throw StopIteration");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop//h\n in ((Math.sin).call(<x><y/></x>++, function(id) { return id },  '' ))) {return undefined;constructor }");
tryItOut("/*infloop*/for(prop = @foo %= function ()</*\n*/x><y/></x>(prop); (__count__(1e4)); true) {}");
tryItOut("L:if(null) { if (0.1) throw [1];} else {return #1=[#1#];break M; }");
tryItOut("/*for..in*/for(let constructor = yield 1e+81 in {}) {(1.3);M:switch(__parent__) { default: break ;break; case 5: export __noSuchMethod__;break; {}break; case <x/>: case 5: constructor, prototype; } }");
tryItOut("with({constructor: (delete )}){*; }");
tryItOut("return;\nyield <x/>;\n");
tryItOut("/*infloop*/for(const ({ __iterator__: [constructor], __iterator__: __noSuchMethod__ }) = ([15,16,17,18].sort(gc, <><x><y/></x></>)); ; <\r><x><y/></x></>.\tvalueOf(\"number\")) {/*for..in*/L:for(let __count__ = undefined in arguments) break L;<><x><y/></x>\t</>; }");
tryItOut("{/*for..in*/M:for(const __noSuchMethod__ = (<><x><y/></x>\f</> <= function(id) { return id }.isPrototypeOf(prop.constructor = <x><y/></x>)) in [15,16,17,18].sort((constructor).__defineSetter__, <x><y/></x>) ? window : ( /x/g  * <x/>)) /*for..in*/L:for(const __iterator__ in 033) {return this;({a2:z2}); } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__(<><x><y/></x></>) in __parent__) prototype, prototype = this;");
tryItOut("if(<><x><y/></x></> !== -1) { if ((null.prop)) {{} } else gc()}");
tryItOut("{yield ({}); }");
tryItOut("/*for..in*/for(let constructor(__iterator__) in (((new Function(\"/*for..in*/for(var [__iterator__, __parent__] = <y><z/></y> in *::*) gc()\")))(*))){/*infloop*/L:do {export __parent__; } while(this);do /*infloop*/do throw <x/>; while(\t__parent__.prop ? false : (({}).__lookupGetter__).call([z1], <><x><y/></x></>)); while(((window ? *::* : __parent__)) && 0); }");
tryItOut("throw __iterator__;");
tryItOut("with([yield 3.141592653589793\f])(__noSuchMethod__, __noSuchMethod__ = this);");
tryItOut("/*infloop*/M:while(:){/*for..in*/M:for(__proto__ in  /x/ ) {(__parent__); }__proto__ = __proto__; }");
tryItOut("let (__proto__, prototype) { let __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in *::*) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for \f each(const __proto__ in this.__defineSetter__(\"__count__\", [1,2,3,4].map)) prototype;");
tryItOut("if(<y><z/></y> == \n0x99 <= __iterator__) {__count__, __proto__ = false; } else  if (eval(\"([1].eval(false))\", __parent__.(__count__))) ( /x/ ); else {(continue ;).watch{} }");
tryItOut("{gc()return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (prototype) in  ) function  constructor (prop) { throw  \"\" ; } ");
tryItOut("/*for..in*/for(const __iterator__ = (new ((function(id) { return id } == <><x><y/></x></>.__count__.__parent__))(<x><y/></x>.(__iterator__),  /x/ .*) for (__count__ in ((function (__iterator__) { yield true } ).call(<y><z/></y>, <><x><y/></x></>))) for each (prop in <x><y/></x>.([,])++) for (__proto__ in (false.__proto__)) for (prop.__count__ in <x><y/></x>) for (__proto__(0x99) in *::*)) in __proto__|=<><x><y/></x></>.constructor) /*for..in*/M:for(var [prototype, prop] = (0.1 if ( /x/g )) in this) ;");
tryItOut("/*infloop*/for(prop; new (function(q) { return q; }).call((constructor, prototype != setter.throw(new ([[]]).__defineSetter__(@foo,  /x/ ))), )(prototype = window < <y><z/></y> = <><x><y/></x></>, __noSuchMethod__.prototype); [11,12,13,14].map\n.isPrototypeOf\f(* ? 1.3 : <x><y/></x> &= window)) {*::*.unwatch(\"__noSuchMethod__\"); }");
tryItOut("{/*for..in*/for(let constructor = <x><y/></x> in [1,,]) gc() }");
tryItOut("let (__noSuchMethod__, __proto__ = (__proto__--)) { export constructor; }");
tryItOut("let __proto__\n");
tryItOut("with({constructor: *::*})export constructor;");
tryItOut("<x><y/></x>\n");
tryItOut("__noSuchMethod__ = -0;");
tryItOut("L: {prop; }");
tryItOut("return 3.141592653589793;");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", 1e81\n)) {with({}) { let(__noSuchMethod__ = window, constructor) { prop = <><x><y/></x></>; }  } else  if (new ('haha'.split)([])) ; else {return (eval(\"-1\", <><x><y/></x></>));do {continue ;/*for..in*/for(let __count__ in constructor) yield =  /x/ ; } while((<!--yy-->) && 0); }");
tryItOut("(constructor);");
tryItOut("{if(<x><y/></x>.isPrototypeOf( /x/ )) ; else {gc()\nvar __iterator__, constructor;__parent__ = *; }M:if(<x><y/></x>) { if ( /x/ ) {undefined; }} else return; }");
tryItOut("gc()\nyield 1.3;\n");
tryItOut("yield ({constructor: });");
tryItOut("if(null) (<><x><y/></x></>); else  if (prop) ");
tryItOut("if(constructor) /*for..in*/for(let __parent__ = <x><y/></x> in <x/>) Math.pow else {(window); }");
tryItOut("/*infloop*/for(const __noSuchMethod__; new Boolean(<><x><y/></x></>, @foo); (0/0 .@*:: __parent__ = <x><y/></x> ? (p={}, (p.z = prop)()) : <x><y/></x>.(<><x><y/></x></>))) gc()");
tryItOut("L:\tif(5.0000000000000000000000) {yield <x/>; } else  if (<><x><y/></x></>) {gc() } else __count__");
tryItOut("let(({ prototype: __count__, __iterator__: ({ prototype: ({ prop\f: __noSuchMethod__, __noSuchMethod__: ({ prop: __parent__ }) }), 0.1 >>> [1].valueOf(\"number\"): ({ __proto__: [], constructor: __proto__ }) }) }) = (* / __count__ = <><x><y/></x></>), __noSuchMethod__) { with({}) throw delete;");
tryItOut("{; }");
tryItOut("{/*for..in*/M:for(let __noSuchMethod__.__iterator__ in ((__parent__.prop)((function (({ __noSuchMethod__: prototype }))(this.hasOwnProperty(\"constructor\"))).call(<><{prototype}><x><y/></x><!--yy--></{prototype}></>, 3.141592653589793)\f)))if(\n1e4) (__parent__); else {let __noSuchMethod__, __count__;[1,2,3,4].map } }");
tryItOut("__iterator__ = __iterator__;");
tryItOut("/*infloop*/for(((uneval(prototype)))(__count__ = __parent__, null); (this.__defineGetter__(\"constructor\", (1 for (x in []))).throw((@foo if (__proto__)))); eval(\"<y><z/></y>\", 0)) export __parent__;\nfunction (__proto__) { let prototype = true, __iterator__; } \n");
tryItOut("if([(uneval(((-1).__lookupGetter__(\"__noSuchMethod__\"))))].sort((({__iterator__: this.__defineGetter__(\"__count__\", eval) })))) {Math.sin } else  if (undefined) if({}) C else yield  '' ; else ");
tryItOut("/*for..in*/(yield 0x99), constructor === __noSuchMethod__for(let __parent__ = * & *::* in \t__noSuchMethod__) {export __iterator__;const constructor = false, prototype; }");
tryItOut("break ;");
tryItOut("if((prop = (prop = each) for (prop in null) for each (__count__ in __count__))--) while((.2 * <x><y/></x>) && 0){throw 0x99; } else  if (eval(\";\", *++)) {do {yield;var prototype, prop = [,,]; } while((undefined) && 0);with(#3={a:#3#}){<x><y/></x>/*for..in*/for(var [__count__, __count__] = [,] in 5.0000000000000000000000) export prototype; } }");
tryItOut("export __parent__");
tryItOut("/*for..in*/for(prototype = (__noSuchMethod__) in ({a1:1}).__lookupSetter__(\"constructor\")) {/*infloop*/for(const constructor = <><x><y/></x></> ? @foo : prototype; this.isPrototypeOf(constructor); <x><y/></x>) { } }");
tryItOut("with(( \"\"  << [[1]] ? (<><x><y/></x></> <<  /x/ ) : [11,12,13,14].some\t)){return;/*for..in*/for(const __iterator__ in <x><y/></x>) {throw function::constructor; } }");
tryItOut("/*for..in*/for(__proto__ = <x><y/></x>, __count__ in __iterator__-=*::*) if(*::* << constructor) {(Math.sin).call }\n/*for..in*/for((__count__.__proto__ = undefined) in (((function(q) { return q; }).call)(prop([[]]) = <><x><y/></x></>.eval(<y><z/></y>)))){export *; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (__count__ >>> ((yield (null.__parent__ getter= function  __noSuchMethod__ (__parent__, __count__) { yield this } )))) in (null.eval([,,]))) if((null\n)) {prototype = window, prop = (function ([y]) { })();throw <x/>; } else ;");
tryItOut("with({prop: -1}){M:if(<y><z/></y>) { if (*) {export *;__proto__ = [], x::1e-81; } else {<x><y/></x>export *; }} }");
tryItOut("L:if([z1]) yield; else  if ( /x/g ) break L; else {continue ; }");
tryItOut("/*for..in*/for(var [__iterator__, __proto__] = __iterator__ = __proto__ in ([this].some(({}).hasOwnProperty).__lookupGetter__(\"prop\"))) { else  }");
tryItOut("/*for..in*/for([__parent__, constructor] = new RangeError( /x/ ++) in @foo.*) {yield <x><y/></x>; }");
tryItOut("L: (__proto__);");
tryItOut("M:while(([11,12,13,14].sort) && 0){;L: prop }");
tryItOut("/*for..in*/for(let prototype = <><x><y/></x></>() in ({__parent__: 4. .. ,  set __count__(prototype) { return this.__defineSetter__(\"__proto__\", Math.pow) }  })) {const constructor;if(<x/>) yield; else  if (<><x><y/></x></>) <x><y/></x> }");
tryItOut("/*infloop*/for((({break ; }).apply).call([-3/0 for (prop in <><x><y/></x></>)], (new gc(true,  /x/ )), true).constructor = [<><x><y/></x></>] * (undefined in [1]);  /x/ () || gc(); __iterator__ /= <x><y/></x> >>>=(<><x><y/></x></>.throw(__iterator__))) {__parent__, __noSuchMethod__;if(\f-3/0\f) {eval } else  if (__parent__) gc() else const constructor = @foo; }");
tryItOut("/*for..in*/for([function::constructor, prototype] = __count__ = <x/> in __proto__ = __parent__) {[z1];\nthrow *::*;\n(0.1); }");
tryItOut("if((.2 -= window).__lookupSetter__(\"prop\")) { if (@foo.valueOf(\"number\").hasOwnProperty(\"__iterator__\")) {/*infloop*/for(let function::__parent__; this; constructor) yield __iterator__;([,]); } else yield <><x><y/></x></>;}");
tryItOut("let([[, ({ __count__: prop }), , ({ prop: prop, prototype: function::__noSuchMethod__ })], , ({ __proto__: constructor, __noSuchMethod__: [] }), ({ __proto__: [__proto__, __noSuchMethod__, __proto__], __parent__: [, __count__, , __noSuchMethod__, __count__] })], delete) ((function(){let(undefined['prop'] = <x/>.prop, []) { this.zzz.zzz;})());");
tryItOut("<>try { try { gc() } catch(__count__ if (function(){return undefined;})()) { prototype; } catch(__parent__ if <x><y/></x>) { continue L; } finally { throw constructor; }  } finally { -3/0.__parent__ = get; } </>");
tryItOut("with({__proto__: (*::* *= window)}){/*for..in*//* nogeckoex bug 349964 */M: for  each(const \tprototype in 3) ;/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in 1e+81) {break M;export __count__; } }");
tryItOut("with({}) { for(let y in [5,6,7,8]) prop = __noSuchMethod__; } ");
tryItOut("@foo");
tryItOut("L: __iterator__ = *::*, __count__ = prototype;");
tryItOut("/*for..in*/for(var [constructor, prop] = (({}).__lookupGetter__) in <x/>) {<employee id=\"1\"><name>Joe</name><age>20</age></employee> }");
tryItOut("switch(Object()) { case prototype = *: throw  /x/ ; }");
tryItOut("with({prop: new *\t()})if(__count__) {} else  if (1e-81) var prop = __iterator__;");
tryItOut("case 3: break; default: ");
tryItOut("return;\nvar __proto__ = <x><y/></x>;\n");
tryItOut(";");
tryItOut("({}).hasOwnProperty\n");
tryItOut("/*for..in*/L:for(var [x::yield, __count__] = let (({ __parent__: __count__, __noSuchMethod__: __iterator__ }) = __noSuchMethod__ = [[1]], prop = (<y><z/></y> ? window : prototype)) ({ __count__: __iterator__ }) = <y><z/></y> ^ @foo in (new function (prototype) { yield [,,] } (window))) continue M;");
tryItOut("if(this) {\t/*for..in*//* nogeckoex bug 349964 */M: for  each(const this['__count__'] in __iterator__) __count__, constructor =  /x/g ;if(__iterator__ = <x><y/></x>)  else [1,2,3,4].slice } else ");
tryItOut("with(([11,12,13,14].filter)){<y><z/></y> /x/g ; }");
tryItOut("__noSuchMethod__ = <x><y/></x>, constructor = true;\n;\n");
tryItOut("let(__noSuchMethod__) { constructor = __parent__;");
tryItOut("return;\nvar prototype;\n\nif(\n) {export *; } else {export *;let __count__ = function::constructor; const __count__; }");
tryItOut("let(prop = <x><y/></x>) ((function(){({}).__lookupGetter__})());");
tryItOut("/*infloop*/M:while([z1,,].__defineGetter__(\"constructor\", [1,2,3,4].map)[new (true)(<x><y/></x>)])/*for..in*/for(var constructor in ((<x><y/></x>)([z1]))){throw this;break L; }");
tryItOut("L:do {export *;continue L; } while((prototype.(<><x><y/></x></>)) && 0);");
tryItOut("do {( /x/ ); } while((*::*()) && 0);");
tryItOut("switch( /x/g ) { case 7: break; default: break; case 6: ;case this.zzz.zzz: break; prop = [,]; }");
tryItOut("/*infloop*/while(__noSuchMethod__ ^ @foo){let(__parent__, __parent__) ((function(){gc()})());return; }");
tryItOut("{[z1]; }");
tryItOut("do {/*for..in*/L:for(let [__iterator__, __parent__] = * in <x><y/></x>) export __iterator__;<xxx {//h\n__noSuchMethod__}={(__count__.prop) === (new <><x><y/></x></>(<y><z/></y>)).__defineSetter__(\"prototype\", [1,2,3,4].map)} /> } while(( /* Comment */[<x><y/></x>].some(gc)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let set in ++(eval)(0x99, *)) M:if( /x/g ) { if (<y><z/></y>) (<x><y/></x>);} else {export *;throw <><x><y/></x\t></>; }");
tryItOut("do h while((function(id) { return id }) && 0);");
tryItOut("with(((({a2:z2})) ? (null.__lookupSetter__(\"__noSuchMethod__\")) : __count__ = this))throw StopIteration;");
tryItOut("if(prop.__proto__ getter= Math.sin .@  set __proto__ constructor () { return yield (uneval(this)) }  <  /x/ ) {__iterator__ = -1, __parent__;if((__proto__ = *)) {; } else {throw true;yield; } }");
tryItOut("gc()\nthrow <x/>;\n\n");
tryItOut("while((new Date([15,16,17,18].some(gc, __count__))) && 0)gc()");
tryItOut("switch( /x/g ) { default: new Functionbreak; function  prop (__count__) { yield __noSuchMethod__ } break;  }");
