tryItOut("/*for..in*/for(let 0x99['__parent__'] in 4.) (__proto__);");
tryItOut("if(<x><y/></x>) {(undefined);<y><z/></y>; } else  if (function ([y]) { }) {} else {yield;return  /x/ ; }");
tryItOut("/*infloop*/for(var __iterator__; [#2=({__iterator__:  /x/ })].some(Function); ( /x/ .__lookupGetter__(\"__iterator__\")).yoyo((yield null)) .@  '' .yoyo(<><x><y/></x></>)) gc()");
tryItOut("let (__count__ = (@foo(*::*, #3={a:#3#})), __proto__) { return; }");
tryItOut("L:if(prop) {;do *; while((<x/>) && 0); } else {return; }");
tryItOut("{}");
tryItOut("/*infloop*/for(({ __noSuchMethod__: ({ __proto__: [], __parent__: ({ __noSuchMethod__: prop, <x><y/></x>: __proto__ }) })\f, __noSuchMethod__: constructor }) = ; constructor = 1.2e3.watch(\"__parent__\", (window).__defineSetter__); new (window)()) return (function ([y]) { })();");
tryItOut("this.zzz.zzz;");
tryItOut("while(( /* Comment */(__count__)[1e+81]) && 0);");
tryItOut("/*for..in*/for(__noSuchMethod__.prototype in [5.0000000000000000000000].sort(({}).__lookupGetter__) != __proto__) {if(--(__count__.constructor getter= -3/0.hasOwnProperty(\"__proto__\")) = prototype(null) = (yield ({a2:z2}) in (window)())) ; const __iterator__; else  if (/*\n*/3/0.yoyo([])) /*for..in*/L:for(const [__noSuchMethod__, __count__] = * in  /x/ ) {export *; } else {export prototype;{} } }");
tryItOut("yield ([*::*].some(({ set 0 function::__count__ (__parent__)<y><z/></y>, constructor:  /x/g  }).hasOwnProperty(\"__count__\")));");
tryItOut("gc()");
tryItOut("L:if(<ccc:ddd><!--yy--></ccc:ddd>.(<><x><y/></x></>.*)) {return 1.3;/*infloop*/for(prop = this; this; <x><y/></x>) {return prop; } } else  if (((constructor = <x><y/></x>)())) {continue ; } else {yield;__iterator__ = @foo, __parent__; }if(<\fx><y/></x>['prototype'], [] = this *= *) {let __noSuchMethod__ = 1e-81; } else  if (new (({constructor getter: Math.pow,  get __count__(__count__) { yield; }  }))(this.zzz.zzz)) {yield;gc() } else {L:while((*) && 0){__iterator__;} }/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in [,]) return; }");
tryItOut("let __proto__ = prop;export __parent__;");
tryItOut("let(__noSuchMethod__ =  /* Comment */ /x/ ) { /*for..in*/for(const constructor = 3 in @foo) L:with(#1#){gc()gc }");
tryItOut("/*infloop*/do {return [,];throw __iterator__; } while(!window);");
tryItOut("/*infloop*/L:while([0.1].some(gc)){/*for..in*/L:for(var constructor in this) return window; }");
tryItOut("/*infloop*/__proto__: <x/>");
tryItOut("{(.2);export *; }");
tryItOut("L: gc");
tryItOut("export *\n");
tryItOut("L:if( /x/g ) {return; } else  if ( \"\" .__defineGetter__(\"__iterator__\", 'haha'.split) :: (-0)) {{export constructor;const constructor; } } else {yield;/*infloop*/L:do if(false) { if (-3/0) {break M; } else {return; }} while('fafafa'.replace(/a/g, Math.sin)); }");
tryItOut("let constructor = <><x><y/></x></>;\nprototype = __parent__;\n");
tryItOut("/*infloop*/L:for(let prototype; ((.hasOwnProperty(\"__parent__\")) || RegExp(this if (null), (new (1e4\r)(<y><z/></y>)))); [1]) /*infloop*/for(({ __noSuchMethod__: [] }) = #3={a:#3#}; +window; undefined << {}()) const prop = <y><z/></y>;");
tryItOut("L: {/*infloop*/while(prototype)export function::prototype; }");
tryItOut("/*for..in*/for(const prototype in new (this)(<x><y/></x>)) return  /x/ ;");
tryItOut("while((this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__)) && 0){return [z1,,]\n\f\nif(prop /= 0) { if ((([ ''  for each (__iterator__ in window)]))([15,16,17,18].sort((Math.sin).call, window), this)) {__iterator__, __count__;export *; }} else {window; }if(prototype = <x><y/></x> instanceof (yield @foo).eval((<x/>)())) {(<x/>); } else  if (this) return -1; else {} }");
tryItOut("/*infloop*/L:while(<><x><y/></x></>){this;export __noSuchMethod__; }\nfunction ()let (prototype = *::*) <><x><y/></x></>\n");
tryItOut("/*infloop*/while(({ set function::__parent__()window })){return; }");
tryItOut("/*for..in*/for(const __iterator__ = <x/> in <x><y/></x>) gc()");
tryItOut("function(y) { yield y; {}; yield y; }");
tryItOut("/*for..in*/for(var [__proto__, constructor] = [[1]].isPrototypeOf(<y><z/></y>) in <x><y/></x>) gc()");
tryItOut("(<y><z/></y>)\nMath.sin");
tryItOut("/*infloop*/for(([1e81]); constructor = \t1e-81; (<x><y/></x>.(if(033.propertyIsEnumerable(\"__noSuchMethod__\")) * else throw <y><z/></y>;))) {{}throw <x><y/></x>; }");
tryItOut("return;");
tryItOut("{/*for..in*/for(const prototype = 0 in <><x><y/></x></>) {var , __noSuchMethod__; } }");
tryItOut("M:do (({ prototype: [({ __parent__: __count__ }), ({ __noSuchMethod__: __parent__ })] }) =  '' .unwatch(\"__parent__\")), ({ function ([y]) { }: ({ __iterator__: __parent__ }) }) = yield <><x><y/></x></>.eval(1.2e3) while((((<x/>.valueOf(\"number\")).@foo).__parent__ = <y><z/></y>) && 0);");
tryItOut("[];");
tryItOut("with((<x><y/></x>.@*)){/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in null) gc() }");
tryItOut("/*infloop*/while(*)var __proto__ = prop;");
tryItOut("{ }");
tryItOut("M:do {const constructor; } while(( /x/g .eval( /x/g )) && 0); const __proto__;");
tryItOut("\n");
tryItOut("/*infloop*/for(var __parent__; ({__count__: @foo }).hasOwnProperty(\"constructor\"); __noSuchMethod__.isPrototypeOf(<x/>)) {gc() }\n/*for..in*/for(const function::__proto__ in true) {yield (function ([y]) { })();yield <y><z/></y>; }");
tryItOut("throw StopIteration;");
tryItOut("M:if(1e4) {} else  if (<x><y/></x>) prototype; else ;");
tryItOut("if(((* if (*)))) export \f__iterator__; else  if (this.__defineGetter__(\"__proto__\", Math.pow)) const prop = this;");
tryItOut("/*infloop*/L:for(const [__noSuchMethod__, , , ({ __iterator__: [, , ] })] = new function (__parent__, __count__) { yield arguments } ((prototype = <y><z/></y>), #1#);  \"\" .@*; <{__count__}></{__count__}>) return;");
tryItOut("/*infloop*/do {if(prop) yield  '' ; else  if (<y><z/></y>) gc() else prop, __parent__;; } while(prototype.__iterator__getter= {/a/gi });");
tryItOut("M:if((yield <x/>)) {((function(q) { return q; }(prop = constructor, false)));/*for..in*/for(let __count__ in __noSuchMethod__) function  __proto__ (__proto__)<x><y/></x> }");
tryItOut("yield __parent__ = <x><y/></x> @ <><x><y/></x></>;");
tryItOut("with({}) { let(constructor = (__count__ = <x/>.__defineSetter__(\"__parent__\", (prop).watch))[new ((true).__defineSetter__)(<><x><y/></x></>, prop)], prop) { __noSuchMethod__ = prototype; } ");
tryItOut("yield");
tryItOut("(<><x><y/></x></>);{}");
tryItOut("try { constructor = true = __iterator__; } catch(prototype if (((yield (<y><z/></y> >> <><x><y/></x></>))) ? (__parent__ =  /x/ ) : eval(\"yield;\", (yield delete)))) { let(constructor = <x><y/></x>[undefined], __noSuchMethod__ = 3.141592653589793) ((function(){for(let y in [5,6,7,8]) })()); } finally { throw StopIteration; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each( /x/g  in (( \"\"  && __noSuchMethod__))) {; }");
tryItOut("if(this.__defineSetter__(\"prototype\", (new Function(\"(<><x><y/></x></>);\")))) {export *; } else  if (#1=<y><z/></y>) var __parent__ =  \"\" ;");
tryItOut("if(__parent__) {throw  \"\" ;export prototype; } else  if (window) {break ; }");
tryItOut("yield function(id) { return id }");
tryItOut("for(let y in [5,6,7,8]) __parent__ = __noSuchMethod__;");
tryItOut("__noSuchMethod__ = prop;");
tryItOut("L: throw StopIteration;");
tryItOut("M:if(__proto__-=(p={}, (p.z = (<y><z/></y> @ window.valueOf(\"number\")))())) return; else  if ((<x><y/></\tx> .@*:: <x><y/></x>.__defineSetter__(\"return true;\", ({}).__lookupGetter__))) if(constructor.throw(*)) { if ((uneval(0/0))) throw .2; else {<x/>; }}\f");
tryItOut("if([11,12,13,14].filter) { if (/*\n*/[1,,]) {/a/gi } else continue ;}");
tryItOut("if(prototype += this) yield; else <><x><y/></x></>;");
tryItOut("if((uneval(1e-81))) { if (<x><y/></x>) {;let __proto__ = <x><y/></x>; }} else {continue ; }");
tryItOut("if(<xxx {__proto__}={(__proto__ = *)} />.((({ prototype: prop, __count__: __count__ }) = (p={}, (p.z = this)()).*))) {return prototype;let __parent__ = prop; } else  if (yield *) {/*for..in*/for(const __noSuchMethod__ in <x><y/></x>) { for (prototype in <><x><y/></x></>)break L; }const prop; } else null");
tryItOut("with(constructor.(<x><y/></x>)){return 033; }");
tryItOut("return;");
tryItOut("{({ __count__: ({ __proto__: prop }), __iterator__: __noSuchMethod__ }) = *::*, ({ x::__proto__: __iterator__ });if(__proto__.constructor) {export __parent__; } else {break L; } }");
tryItOut("with(let (__parent__) #1#)if(<x/>) {(true).watch } else  if ( '' ) export prototype;");
tryItOut("L: __iterator__ = __parent__;");
tryItOut("switch(+__iterator__ = __proto__.eval(undefined).isPrototypeOf( /x/g  :: true)) { default: /*for..in*/for(const __proto__ in @foo) let __noSuchMethod__; }");
tryItOut("return 1e81");
tryItOut("/*infloop*/L:while(*::*){{} }if(this.__defineSetter__(\"__proto__\", gc)) { if (({ constructor: constructor, prototype: __proto__ }) = ({ prototype: __parent__ })) {eval } else (1e4);}");
tryItOut("0; const prop;");
tryItOut("continue for(let y in []);");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each( \"\"  in <x><y/></x>.(<><x><y/></x></>)) __iterator__");
tryItOut("if(__count__.(.2)) { if (__iterator__.prototype) {let __noSuchMethod__ = <><x><y/></x></>, prop = this;return; } else {}}");
tryItOut("/*infloop*/while(false > \f<x><y/></x>){/*for..in*//* nogeckoex bug 349964 */ for  each((<><x><y/></x></>)(false) in ({constructor setter: function(y) { yield y;  '' ;; yield y; }, __parent__: window })) {export *; } }");
tryItOut("/*infloop*/do {gc(); } while(@foo);");
tryItOut("M:do {<x><y/></x>var __proto__ = 0x99, __noSuchMethod__ = *; } while(( '' ) && 0);");
tryItOut("if(__proto__) { if (*) {let prop = <x><y'/></x>, prop; } else {var __parent__; }}\nexport constructor;");
tryItOut("/*infloop*/for(__noSuchMethod__ =  ''  >> <x/>; __count__ = ({}).__lookupGetter__(@foo); constructor =  '' ) {}");
tryItOut("return;");
tryItOut("/*infloop*/M:do ; while(<><x><y/></x></>);");
tryItOut("L:if(('fafafa'.replace(/a/g, [1,2,3,4].map))) {var __proto__ = prop, __count__ = constructor; } else  if ((window % <x/>).@*) {gc() } else let (__proto__ = -3/0) { if(@foo) { if (<x><y/></x>) export __proto__; else {export *; }} }");
tryItOut("if(('fafafa'.replace(/a/g, function (__proto__) { yield null } ))) { if (1e-81.constructor) return;} else /a/gi");
tryItOut("__count__ = prototype;");
tryItOut("{return 3; }");
tryItOut("with({}) { with({}) {  }  } ");
tryItOut("/*infloop*/while((({__noSuchMethod__:  /x/g , __noSuchMethod__: <><x><y/></x></> })))RegExp(this);");
tryItOut("__proto__ = constructor;");
tryItOut("/*infloop*/L:do /*for..in*/for((__parent__) in this) {{}var __count__ =  /x/ , __noSuchMethod__ = prop; } while(([()]));");
tryItOut("do if(this) { if ( '' ) {{}yield this; }} else {return __noSuchMethod__; } while((<><x><y/></x></>.unwatch(\"constructor\")) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L://h\n for  each(var 3.unwatch(\"__noSuchMethod__\").__iterator__ in prop) {gc() }\nif((3/0.@*)) {{} } else  if (false) /a/gi else return {};");
tryItOut("");
tryItOut("/*infloop*/do /*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in this) {break ;var \t__iterator__; } while(let (prototype = .2) (<x><y/></x> instanceof this).yoyo(((@foo - <y><z/></y>).valueOf(\"number\"))));");
tryItOut("/*for..in*/L:\ffor(__count__ = ([1]) in true) {yield <>case this: break; </>; }\n");
tryItOut("/*for..in*/M:for(const [__parent__, prop] = (++[])\f in <x><y/></x>) const __count__;");
tryItOut("return <x/>;");
tryItOut("/*infloop*/L\f:for(let prototype; this; false) throw this;");
tryItOut("M:while((( /* Comment */)) && 0){with( /x/g (__parent__))throw [,];<><x><y/></x></>;\nbreak ;\n }");
tryItOut("/*infloop*/while(__iterator__ = ([prop].some('fafafa'.replace(/a/g, (function (__proto__) { return * } ).call))))Function");
tryItOut("__proto__");
tryItOut("break \n");
tryItOut("with({prop: this}){L:if(\f[case 1: ({ __parent__: __noSuchMethod__, __noSuchMethod__: <x><y/></x> })case false: break; export constructor;break; default: return;case null: break; case 0: yield <><x><y/></x></>;{throw <x><y/></x>; }case __iterator__: (prototype);break; gcbreak;  for (<><x><y/></x></> in #1#)]) yield; else false; }");
tryItOut("{return <x/>;__noSuchMethod__ =  ''  }\nreturn {};\n");
tryItOut("/*infloop*/for(let __iterator__; new function(y) { yield y; \n; yield y; }(); this.__defineGetter__(\"__count__\", ((function ([y]) { })().eval(<x><y/></x>)).__defineSetter__)) return <><x><y/></x></>; const function::__parent__;");
tryItOut("/*infloop*/while((({ get [, , , ({ __proto__: ({ function::[]: __noSuchMethod__ }) })] __proto__ (__proto__) { /*infloop*/L:for(let __iterator__; [11,12,13,14].some; (({}).__lookupGetter__()).watch(\"__noSuchMethod__\", function(q) { return q; })) (this.__defineSetter__(\"__parent__\", *::*).__lookupSetter__(\"constructor\")) } , __proto__: 4. })))gc()");
tryItOut("/*infloop*/for(__noSuchMethod__ = new *(arguments); ([11,12,13,14].filter); (uneval((({__iterator__: 3,  get __iterator__ __noSuchMethod__ (__parent__) { let prototype = <x><y/></x>, prop = *::*; }  }))))) {/*for..in*/for(var constructor in (((true).watch)(*))){export __iterator__;export *; } }");
tryItOut("constructor = __iterator__;let(constructor = window, __noSuchMethod__ = arguments) ((function(){gc()})());");
tryItOut("switch((((<x/>)(window)))[([4. for (prototype in window)])]) { case 3: case 7: case eval(\"eval(\\\" '' \\\", 1.3)\", <x/>): case  /x/  instanceof 5.0000000000000000000000: return;break; let __count__, __parent__ = ({a2:z2});break; case 3: break; case 6: break; break; default:  }");
tryItOut("yield this.__defineGetter__(\"prototype\", Math.pow);");
tryItOut("with({__noSuchMethod__: this.__defineSetter__(\"prop\", 'haha'.split)})/*infloop*/do yield; while(__parent__ = __count__);");
tryItOut("switch(3) { default: break; (<><x><y/></x></>); const __proto__; }");
tryItOut("L: {{} }");
tryItOut("\nexport __parent__");
tryItOut("this.zzz.zzz;");
tryItOut("L:if(<y><z/></y>) { if (<><x><y/></x></>) {yield [1]; } else {var __iterator__ =  /x/g , constructor;__count__ = *::*, __count__; }}");
tryItOut("{continue ;\n(this);\nwhile((<x><y/></x>) && 0)break ; }");
tryItOut("/*for..in*/[,,]");
tryItOut("/*for..in*/for(let prop in (( /x/g )((<><x><y/></x></>[ \"\" ])))){false__parent__; }");
tryItOut("if(__count__.watch(\"constructor\", this) <= <><x><y/></x></>--) {const prototype = <y><z/></y>, __count__ = *::*;<x><y/></x>;return <x><y/></x>; } else  if \f(<y><z/></y>//h\n) {if(false) { if (<><x><y/></x></>)  else {throw window; }}\n(4.).watch }");
tryItOut("L:if(({ __iterator__: //h\nprototype, prototype: __count__ })) this; else  if (__noSuchMethod__ = *::*.__lookupGetter__(\"__parent__\")) if(-1) let prototype, prop = let constructor =  /x/ , x::prop;; else  if (1.2e3) {{} } else {prototype(<x><y/></x>); } else ( /x/g );");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in false) gc()");
tryItOut("/*for..in*/for(var __parent__ in (~3.141592653589793 -= Math.pow().__lookupGetter__(\"prop\"))) [1,2,3,4].slice\n<x/>;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ({__iterator__: [,]})) {/*infloop*/do yield; while(<><x><y/></x></>); } const __proto__;");
tryItOut("/*infloop*/M:for(var [({ prototype: __count__, __proto__: __iterator__ }), , , constructor, ] = -0.eval(true); __count__ = true <  '' ; yield (@foo).call(<><x><y/></x></>, #1#)) {/*for..in*/for(__count__ in <y><z/></y>) {{}; }{{}(null); } }");
tryItOut("/*for..in*/for(const constructor = (new RegExp()) ? <x><y/></x>.(#3={a:#3#}) : this -= <x><y/></x\f> in false) {M:switch(<x><y/></x>) { case : yield <><x><y/></x></>; } }");
tryItOut("if(1e+81) {const __proto__;gc() }");
tryItOut("__count__ = __proto__;");
tryItOut("{Math.pow }");
tryItOut("__count__ = __count__;");
tryItOut("while((<><x><y/></x></>.constructor) && 0){/*for..in*/for(let __iterator__ in ((window\t)(1e-81))){export prop; } }");
tryItOut("var __count__; const __noSuchMethod__;");
tryItOut("L:with(undefined , 1.2e3){}");
tryItOut(" \"\" ");
tryItOut("/*for..in*/for([prop, __proto__] = [__proto__, , ] = <><x><y/></x></> in @foo.eval([,]) in  /x/g .watch(\"prop\", [,,z1]) << (1.2e3.valueOf(\"number\"))) throw <><x><y/></x></>;");
tryItOut("do {L:if(({}).hasOwnProperty) { if (<x><y/></x>.propertyIsEnumerable(\"__iterator__\")) yield; else throw ({a1:1});} } while(([11,12,13,14].filter) && 0);");
tryItOut("for(let y in []);");
tryItOut("L:with({prototype: new ((prototype.__noSuchMethod__)).call((-1), 3.141592653589793.__lookupGetter__(\"prop\") ^= *)()}){{} }");
tryItOut("yield <y><z/></y>;");
tryItOut("let ( = <x><y/></x>(*, function ([y]) { })) { /*infloop*/for((\f({prototype getter: Math.sin })); ({__iterator__: new Math.sin()}); Exception((__noSuchMethod__ = this), ++new gc( function ([y]) { }({a1:1})))) {export constructor; } }");
tryItOut("{let , prop = @foo; }");
tryItOut("export __noSuchMethod__; const prop;");
tryItOut("if((--__parent__)) { if (__iterator__ = function(id) { return id } /= (__parent__.__parent__ = gc)) {return;(__noSuchMethod__); }} else {({}).__lookupGetter__ }");
tryItOut("L:if(({__iterator__: 1.2e3.__proto__, __iterator__ getter:  ''  }) <= new ([,,z1])([11,12,13,14].sort)) (-1); else function::prototype;");
tryItOut("export *; const __noSuchMethod__;");
tryItOut("return 3/0;");
tryItOut(";");
tryItOut("with({__parent__: (function  __iterator__ ()eval(\"__iterator__\", false)).call(prop.__proto__ getter= <x><y/></x>.propertyIsEnumerable(\"__iterator__\"), window, eval(\"/*infloop*/L:for(let __parent__; <x><y/></x>; 1e4) {}\", (function ([y]) { })())) for each (__proto__ in (([null].filter((new Function(\";\")))))) for (constructor in undefined = __iterator__) for (prop in <x><y/></x>) for each (__iterator__ in window) for each (prototype in this)})/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in @foo.@foo) {export __iterator__;let __proto__ = __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in *::*) constructor");
tryItOut("switch(new ((<><x><y/></x></>.@*))( /* Comment */null)) { default: /*infloop*/do {export prototype; } while(<x/>);break; break; /*infloop*/while(undefined){yield prototype = __proto__;yield prop; }break; case * if (*::*): const prop, __count__ = (-0);break L;case 6: \tprop; }");
tryItOut("{;(new Function(\"\")) }");
tryItOut("/*for..in*/M:for(const [__parent__, __parent__] = new <zzz>1e4</zzz>(constructor = 1.3) in (window).call( '' , ) ? .2 : 3) /*for..in*/for(var [__parent__, __count__] = this.__defineGetter__(\"constructor\", [1,2,3,4].slice) in function::constructor\f) {;export *; }");
tryItOut("yield @foo\nexport prototype\n");
tryItOut("__proto__, __noSuchMethod__;");
tryItOut("/*infloop*/for(const constructor = null; <><x><y/></x></>; this) let \f__iterator__ = __noSuchMethod__;");
tryItOut("if(()) {; } else {}");
tryItOut("throw __noSuchMethod__;");
tryItOut("([,,]);\nvar __parent__ = <x/>;\n const #1;");
tryItOut("with({__iterator__: (prop = <><x><y/></x></>)}){{}with(<x><y/></x>)export *; }");
tryItOut("L: (false)\n");
tryItOut("false; const __parent__;");
tryItOut("export prototype;\n(*::*).__defineSetter__\n");
tryItOut("L: continue M;");
tryItOut("var  '' ;");
tryItOut("do  { {} }  while(((__noSuchMethod__ = <y><z/></y>)) && 0);");
tryItOut("yield this;");
tryItOut("{break L;if(<x/>) { if (+prototype: let (prop, __proto__) this -= @foo) /*infloop*/for(prop; prop; 1.2e3) {yield [[]];( '' ); } else {{} }} }");
tryItOut("M:while(((<xxx {__parent__}={ '' } /> <= (prop = (<x><y/></x>.constructor getter= eval)))) && 0)return;");
tryItOut("while((window) && 0){@foo }");
tryItOut("return new (<y><z/></y>)(({a2:z2}), <x><y/></x>);");
tryItOut("L: var __noSuchMethod__;");
tryItOut("yield;");
tryItOut("return;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((Math.pow)('fafafa'.replace(/a/g, function  __count__ ()<><bbb xmlns=\"<x><y/></x>\"><x><y/></x><x><y/></x>__noSuchMethod__</bbb></>))))gc()");
tryItOut("[1,2,3,4].map(4.);\nlet prop =  /x/ , prototype = [,];\n\nL: {try { (*::*); } finally { yield  '' ; }  }\n");
tryItOut("M:if(V = ({ prototype: prototype, constructor: constructor }) = __iterator__) { if ((((p={}, (p.z = ;)())) >>> (prototype = function(id) { return id })[('fafafa'.replace(/a/g, function (__iterator__) { (<<x><y//*\n*/></x></).watch } ))])) {/*for..in*/\tfor(var [__noSuchMethod__, constructor] = constructor.unwatch(\"prototype\") in (*::*.__defineSetter__(\"__proto__\", null))) {export prototype; } } else ((<y><z/></y>.__proto__));}");
tryItOut("with({__proto__: <x><y/></\fx>}){break ; }");
tryItOut("throw ({ prop: __proto__, prop: __count__ });");
tryItOut("/*infloop*/for((p={}, (p.z = * *= window)()); (yield [1,2,3,4].slice); (yield <><x><y/></x></>).constructor) {{} }");
tryItOut("export *; const __proto__;");
tryItOut("do /*infloop*/while(@foo){gc() } while(((-0\n) ^= (prototype = <><x><y/></x></>)) && 0);");
tryItOut("{Functiongc() }");
tryItOut("do {const __parent__ = function ([y]) { }, __parent__;const prototype = function ([y]) { }; } while((<x><y/></x>) && 0);");
tryItOut("/*infloop*/for(constructor - null %= <y><z/></y>; *::*[this]; +(<y><z/></y> .@*:: [,,z1])) {yield <x/>;new Function }");
tryItOut("continue \n");
tryItOut("let prototype; const constructor;");
tryItOut("if((__noSuchMethod__) = (eval(\"(<x><y/></x>.__defineGetter__(\\\"prototype\\\", 1e-81))\", (<><x><y/></x></>.unwatch(\"__parent__\"))))) { if ([eval(\"(<><x><y/></x></>);\", <x><y/></x>.__lookupGetter__(\"prototype\"))].filter((function  __iterator__ () { yield this } ).call)) <y><z/></y>;} else ");
tryItOut("\n");
tryItOut("if(this) { if ([1,,]) export __count__; else export *;}");
tryItOut("return;");
tryItOut("/*for..in*/for(prototype = yield (__iterator__ = #3={a:#3#}.@foo) in -3/0 ? ({a2:z2}).unwatch(\"__iterator__\") : __count__.__lookupSetter__(\"constructor\")) {(<x/>);export *; }");
tryItOut("M:if(<x><y/></x>) {<x/>export __iterator__; }");
tryItOut("/*for..in*/for(var __parent__.__parent__ in ((function(q) { return q; })((void *::*) >>> <x/> >>  /x/g ))){export prop;var __parent__; }");
tryItOut("let(__parent__ = ({__noSuchMethod__: __proto__.__lookupGetter__(\"__parent__\")}), __iterator__ = ({__proto__ getter: null,  get __proto__  ()prototype })) { with({__proto__: [15,16,17,18].sort(<y><z/></y>, <x><y/></x>)})");
tryItOut("/*infloop*/L:for((constructor); <x><y/></x>; <x/> , this) let __count__ = arguments, __parent__ = each;");
