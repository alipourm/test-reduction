tryItOut("\twith({prototype: this}){throw __iterator__.eval(*::*);; }");
tryItOut("{}");
tryItOut("(eval(\"yield (__proto__ = null);\", (__noSuchMethod__ = <y><z/></y>).isPrototypeOf(<><> </> </>)))\n/*infloop*/while(this){export __iterator__;return __iterator__; }\n__count__ = prop;\n");
tryItOut("M:if((p={}, (p.z = <><x><y/></x></>)())) { if ((<><x><y/></x></>\n) :: this.__defineSetter__(\"__parent__\", function (case true: (null);, __iterator__) { yield <><x><y/></x></> } )) {return;M:if(new  \"\" ([1,,], this)) yield; else { } } else  get prototype __noSuchMethod__ (__parent__) { var __iterator__, __proto__; } }");
tryItOut("/*infloop*/for(this.zzz.zzz.@*; (return __parent__); new String((let (__parent__, __proto__) window).prototype = (typeof this).watch(\"__noSuchMethod__\", function  constructor () { export *; } )))  { /*for..in*/for(const __count__ in (\f(Math.pow)(#1=({prop: <x><y/></x>})))){continue M; } } ");
tryItOut("if( /x/ \n.isPrototypeOf(prop instanceof __proto__|=true)) with({__count__: constructor}){let prop = __parent__, __count__; } else  if (prototype = window) {if(0) k; else  if (<><x><y/></x></>) {{}let __iterator__ =  /x/g ; } }");
tryItOut("M:if(__iterator__.prototype) {break M;/*infloop*/M:for(const __count__ = this; undefined; <y><z/></y>) (<x/>); } else  if ((__noSuchMethod__ = <><x><y/></x></>) || (__iterator__.((<x/>);)) ? (<><x><y/></x></>)(constructor) = @foo.__lookupGetter__(\"__proto__\") : __count__) export __noSuchMethod__;");
tryItOut("/*for..in*/for(var __count__ in ((({}).hasOwnProperty)(<x><y/></x>.((function ([y]) { })()))))throw  '' ;");
tryItOut("M:if((getter.constructor getter= function(q) { return q; })) { if (__proto__ = <x><y/></x>) yield window\nconst prototype = [], constructor = @foo;} else {let (constructor = window, __iterator__) { const prop; } }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"__proto__\", (1 for (x in []))\t))prototype, __noSuchMethod__ = <x/>;");
tryItOut("/*for..in*/for(const prop = __proto__ = null.prop = this in this.zzz.zzz) /*for..in*/for(const __parent__ = ('fafafa'.replace(/a/g, function  __count__ (__count__) \"\" ).__proto__) in @foo--) var __count__;");
tryItOut("if(#1=[#1#]) { if ( /x/ .watch(\"prop\", ([,]).watch)) eval else (new Function(\"gc()\"))}");
tryItOut("while((__count__) && 0)");
tryItOut("return prototype;");
tryItOut("{export *; const prop; } const constructor;");
tryItOut("let (__parent__ = @foo % __parent__, __iterator__ = <x/>) { __proto__ = <x><y/></x>, __iterator__ = 0.1; }let *::* = @foo, __iterator__ = window;");
tryItOut("try { with({}) try { throw __noSuchMethod__; } catch(({ ({ prototype: __count__ }): [__noSuchMethod__, __proto__, , , ] }) if (prototype = <x><y/></x>.hasOwnProperty(\"__parent__\"))) { break ; }  } catch(__proto__) { with({}) { return; }  } ");
tryItOut("with({__parent__: @foo(prototype, undefined)((({prototype: function(id) { return id } }))).__parent__}){{} }");
tryItOut("do gc() while((__noSuchMethod__) && 0)\nwhile(([z1,,]) && 0){yield; }");
tryItOut(" /x/g ;");
tryItOut("this.zzz.zzz;");
tryItOut("\tfunction (__noSuchMethod__, __proto__)<><x><y/></x></>\n( /x/g );\n\n/*infloop*/do (1e-81); while(@foo);\n");
tryItOut("/*for..in*/M:for(const constructor.constructor in (__parent__);) {}");
tryItOut("for(let y in [5,6,7,8]) continue ;");
tryItOut("return ({__parent__: 0/0 || -3/0, each setter: ( \"\" ).watch });");
tryItOut("/*infloop*/\nfor(__proto__; (({ yield: ({ __iterator__: __parent__, __proto__: __count__ }) }) = ((eval(\"<x/>\",  /x/ )) < (yield <y><z/></y>))); window) if((prop = (window)(<x><y/></x>, __noSuchMethod__))) {;yield <x/>; }");
tryItOut("switch(-3/0 ? 3/0 : ({a2:z2}) >>>=<x/>.unwatch(\"constructor\")) { default: /*for..in*/for(var [__proto__, constructor] = (Math.sin).call.valueOf(\"number\") in __iterator__ = 4..propertyIsEnumerable(\"__count__\")) export __count__;case 5: case #1# = <x/>: break;  }");
tryItOut("/*infloop*/for(__parent__; <x/>; false) {{} }");
tryItOut("if('fafafa'.replace(/a/g, Function) ? this.__defineSetter__(\"__iterator__\", new Function) : __count__.(<><x><y/></x></>)) const __noSuchMethod__ = null;");
tryItOut("/*infloop*/for(new (({a2:z2}).isPrototypeOf( /x/ ))(<!--yy-->,  /x/ ); __parent__ = (void 1.3); [window].sort((1 for (x in []))).@foo) {{} }");
tryItOut("let (__iterator__) { yield [] = <><x><y/></x></>.__iterator__ = *::*; }");
tryItOut("{gc() }");
tryItOut("if( /* Comment */<y><z/></y>) { if (yield function(id) { return id } .@x:: (-1).unwatch(\"__count__\")) return null;} else export __iterator__;");
tryItOut("L: {{} }");
tryItOut("L: let ([, , , __parent__] = new (new Function)( /x/ , this), __proto__) { (null).apply }");
tryItOut("switch( /x/ ) { case window: break;  }");
tryItOut("with(__proto__ = __iterator__ = <x><y/></x> <<= yield <x><y/></x>.constructor = *)(-0);");
tryItOut("/*for..in*/for(var <employee id=\"1\"><name>Joe</name><age>20</age></employee>['__noSuchMethod__'] in ((('haha'.split).apply)((new ( '' )([,])).__parent__))){var __noSuchMethod__;throw <y><z/></y>; }");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, (0).__defineSetter__))if((__count__)|='fafafa'.replace(/a/g, function () { export *; } ) ^ <x/>++) { if ((__noSuchMethod__.__parent__)) /*infloop*/for(<x><y/></x>; <x><y/></x>; __noSuchMethod__) {yield *::*; } else continue ;}");
tryItOut("if((({__proto__: __iterator__-=true}))) if( /x/g ) {yield <><x><y/></x></>;gc() } else  if (<x/>) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ __iterator__: ({ __iterator__: __parent__, prop: __proto__ }), __parent__: constructor }) in *) {/*infloop*/M:for(var function::__iterator__; [#1=[#1#]].sort((eval).apply); (('fafafa'.replace(/a/g, function  __parent__ ()<><x><y/></x></>)))[<x/>.watch(\"prop\", ({}).__lookupGetter__)]) const function::__proto__ = <x><y/></x>, prototype;; }");
tryItOut("if((prop.__parent__)/*\n*/) {if(<y><z/></y>) yield prototype; else {export __count__; } }");
tryItOut("yield null;\n(<x><y/>\f</x>);\n");
tryItOut("/*infloop*/for(this; ({}); #2=[__parent__]) switch(__count__.__lookupGetter__(\"__iterator__\").hasOwnProperty(\"prototype\")) { case 2: let prototype; }");
tryItOut("let prop; const __noSuchMethod__;");
tryItOut("switch(>) { default: break; const __parent__ = __proto__, prop;break; case [1]: break;  }");
tryItOut("yield __parent__ = #0=*;");
tryItOut("if((yield <><x><y/></x></>)) ({}).__lookupGetter__ else  if ((function(y) { yield y; return;; yield y; }(<><x><y/></x></>))[<x/>.__defineGetter__(\"__count__\", (<y><z/></y>).__defineSetter__)]) {; } else L: export __iterator__;");
tryItOut("[__count__+=1e4 if ([z1,,]\t)];");
tryItOut("gc()with(\n<x><y/></x>){yield; }");
tryItOut("/*for..in*/L:for(var prop.__iterator__ in (((new Function(\"let __proto__ = <><x><y/></x></>;\")))(new <x><y/></x>(<x/>,  /x/ ))))return false");
tryItOut("/*infloop*/do  while(//h\n(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(eval(\"throw arguments;\", __parent__ = window)) .@x::  /x/ ));");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*infloop*/while( /x/g  <<= constructor){yield undefined; }");
tryItOut("/*for..in*/for(prototype in (yield @foo)) {null; }");
tryItOut("/*for..in*/L:for(__proto__ in this.zzz.zzz) default: /*for..in*/L:for(let (#2=[constructor = window]) in __iterator__ = window)  /x/ ;break; ");
tryItOut("prop = __proto__;");
tryItOut("do if(undefined) { if (<><x><y/></x></>) export __noSuchMethod__; else {;; }} while((prototype = constructor) && 0);");
tryItOut("var __proto__ = 5.0000000000000000000000, __count__;\n(4.);\n");
tryItOut("/*for..in*/for(const 3/0 in ((function ()<x/>)(constructor.(undefined))))(gc).call\ndo {var prototype;yield prop; } while(((prop = @foo * true)) && 0);\n");
tryItOut("with({__iterator__: __count__ = window})export *;");
tryItOut("if(((window)\f[<x/>] .. [])) /*for..in*/L:for(const [__proto__, __iterator__] = ((__noSuchMethod__ = __count__).valueOf(\"number\")) in (function (__iterator__, __parent__)false).call(3.141592653589793, )) {if(false) {function(q) { return q; }continue L; }return null; } else {/*for..in*/M:for(prop = <x/> in -1)  }");
tryItOut("/*infloop*/for(var __proto__ = eval(\"__iterator__: 0x99\", (-1)); __parent__.watch(\"prototype\", ({}).hasOwnProperty);  /* Comment */arguments) return");
tryItOut("{return window;gc() }");
tryItOut("L:if(((__iterator__ = @foo)[((__parent__ = prototype)[[({a2:z2}) for each (__proto__ in prop)]])])) {L:if(new (<x><y/></x>)()) ; else return; }");
tryItOut("return;");
tryItOut("");
tryItOut("continue ;\n");
tryItOut("/*infloop*/for(let ({ constructor: __parent__, prop: <x><y/></x> }) = prototype.prototype getter= function  constructor (__noSuchMethod__)false; prototype.__proto__; constructor = prop) const __proto__, __proto__;");
tryItOut("{\f}\n[1,2,3,4].slice\n\nyield *::*;");
tryItOut("L:if(*::*) {let prop, __proto__;*::* } else  if (*) ");
tryItOut("return;");
tryItOut("L:\tswitch([11,12,13,14].map instanceof <x><y/></x>.hasOwnProperty(\"__iterator__\")) { default: break; export __proto__;break; case __noSuchMethod__ = let __count__: case ((<x><y/></x>)\t[ '' ]): /*infloop*/for(this; <><x><y/></x></>;  '' ) return;break; case [this for (__noSuchMethod__ in <><x><y/></x></>)]: break;  }");
tryItOut(";return __proto__;");
tryItOut("with({}) { __proto__ } ");
tryItOut("/*for..in*/for(setter in (((new window(<><x><y/></x></>) , (yield 0.1).__parent__).__defineSetter__)(((Function)\t.call((prototype.(false)), ( ''  for (__count__ in  { let __count__ = #3={a:#3#}; } )), <><x><y/></x></>[<x><y/></x>])) %= (this.__defineGetter__(\"__parent__\", (1 for (x in []))))))){/*for..in*/M:for(let [, yield] = eval(\"{}\", <><x><y/></x></>) in {}) const __count__, __noSuchMethod__; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("with({__parent__: (uneval(<y><z/></y>))}){/*infloop*/do {const __parent__ = constructor;function (prototype, __count__) { throw ({}); }  } while(false); }");
tryItOut("/*for..in*/L:\tfor(var __parent__ = prototype = __parent__ in @foo) {(this);{yield;const prototype; } }");
tryItOut("yield;");
tryItOut("export *;");
tryItOut("if(constructor = window) {L:if(Iterator(0.1)) /*for..in*/for(var [prop, __parent__] = (-0) in *::*) 1.3; else  if (__noSuchMethod__ = prototype) <>setter;</>; } else  if ((constructor =  \"\" ).prototype = (<y><z/></y> ? constructor : undefined)) switch(1.2e3) { default: break; case *: break ;break; case <y><z/></y>: gc()case @foo: break; return <><x><y/></x></>;break;  } else {/*infloop*/M:for( /* Comment */-3/0; this.__defineGetter__(\"__proto__\", (*::*).__defineSetter__); __iterator__ = true) return; }");
tryItOut("{\rexport *; }");
tryItOut("/*infloop*/M:for(__noSuchMethod__; 0/0; Error(((Math.sin).call(true, 1e-81))).watch(\"__noSuchMethod__\", Function)) yield  /x/g ;");
tryItOut("/*for..in*/for(const __parent__.__iterator__ in ((Function)(<><x><y/></x></>)));");
tryItOut("throw <x><y/></x>;");
tryItOut("switch(this) { case 1: while((eval(\"[1,,]\", this)) && 0){ } }");
tryItOut("L:if(<x/>) var __iterator__ = __iterator__; else  if (<y><z/></y>) var __proto__;");
tryItOut("L:if(((let (__parent__ = this, __proto__ = this) 5.0000000000000000000000))(__noSuchMethod__.__iterator__/*\n*/)) { if (eval(\"(false.__noSuchMethod__ = <><x><y/></x></>)\", <x><y/></x> .. <y><z/></y>)) with([15,16,17,18].map(function(y) { yield y; (Math.sin).call; yield y; }, (p={}, (p.z =  /x/ )())))yield __count__;} else /*infloop*/L:for(({ __iterator__: __parent__, prop: constructor }) =  /x/ .yoyo(false); #1#.valueOf(\"number\"); this\n.__defineSetter__(\"__iterator__\", prop)) {switch(window) { case 8: break; throw *::*;case 3: yield;break;  } }");
tryItOut("/*infloop*/for(0/0; __parent__%=<><x><y/></x></>; <x/>++) {yield; }");
tryItOut("/*infloop*/L:for(({ __noSuchMethod__: __count__, __proto__: try { const constructor = window; } catch(__noSuchMethod__) { break ; } finally { return; }  }) = let (__parent__, prototype = <><x><y/></x></>) __parent__; this; ('fafafa'.replace(/a/g, function () { return  /x/  } ))) {{} }");
tryItOut("throw prop;\n/*for..in*/for(var [__count__, __noSuchMethod__] = 1e4 in ({})) var __parent__;\n");
tryItOut("\n");
tryItOut("/*infloop*/for(let __iterator__.__iterator__; false * ++<y><z/></y>; (false.propertyIsEnumerable(\"constructor\") .@ __iterator__-=*).unwatch(\"prototype\")) ; const __proto__;");
tryItOut("yield;\n/*for..in*/for(let __proto__ = <x><y/></x> in  \"\" ) {return;var __parent__ = 0; }\n");
tryItOut("{(__noSuchMethod__.watch(\"__parent__\", function(y) { yield y; let __noSuchMethod__;; yield y; })); }");
tryItOut("L:if((RangeError())) if(('fafafa'.replace(/a/g, new Function))) { if (*) gc() else yield;} else  if (window.__defineGetter__(\"prop\", gc)) return; else {__parent__, __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(const <x><y/></x>.__lookupGetter__(\"__count__\") in ((new Function)(--*))){return; }");
tryItOut("{if(__count__ @ @foo) { if (this.__defineSetter__(\"constructor\", (gc).call))  else {gc()return; }}; }");
tryItOut("return 1e4;export constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in __noSuchMethod__ = constructor) {L:if( != [11,12,13,14].map) return; else yield; }");
tryItOut("if((__proto__ = 0/0 * export *;)) {/*for..in*/M:for([__iterator__, __noSuchMethod__] = <y><z/></y> in  /x/ ) break M;return; } else  if ((__parent__\n)) {continue ; } else window;");
tryItOut("function  __iterator__ () { yield __proto__; } var __iterator__ = *::*, __count__;");
tryItOut("{{}\n }\nwith({__parent__: ((eval)())})throw StopIteration;");
tryItOut("/*infloop*/for((Function); yield  /x/g ; false .@ *::*) {return <x><y/></x>;* }");
tryItOut("/*infloop*/do {return;export *; } while(({ __count__: ({ prop: __noSuchMethod__, __parent__: __count__ }), prop: ({ constructor: prop, __noSuchMethod__: __count__ }) }) = prototype.watch(\"prototype\", Math.sin));");
tryItOut("const __noSuchMethod__ = [z1,,], __count__\n");
tryItOut("/*infloop*/while( '' .valueOf(\"number\")){prop; const constructor\n; }");
tryItOut("\n/*for..in*/for(var [prop, __parent__] = 3 <<= * in <><x><y/></x></>) ");
tryItOut("if((function::__noSuchMethod__.__count__).prototype = new *(<x><y/></x>, prop)) {if(<><x><y/></x></>) { } } else  if (({ __proto__/*\n*/: __iterator__ })\f = (__noSuchMethod__ = <y><z/></y>)) export *;");
tryItOut("/*infloop*/do __proto__ = 0/0.eval( '' ) while(({prop setter: ({a2:z2}), prop: \n<><x><y/></x></> }));");
tryItOut("M:switch(<y><z/></y>.propertyIsEnumerable(\"__parent__\")) { default: return this; }");
tryItOut("gc()\n");
tryItOut("if(this.zzz.zzz) {const this = #1#, prop; } else let __count__ = function(id) { return id }; const yield eval(\"{}\", null);");
tryItOut("/*for..in*/for(var constructor in ((Math.pow)(((<><x><y/></x></>.@foo)[([z1,,]//h\n.__lookupSetter__(\"prototype\"))])))){return null;yield; }\nfunction(y) { yield y; yield __parent__;; yield y; }\n");
tryItOut("while((<x><y/></x>) && 0){let prop = <x/>, __noSuchMethod__ =  \"\" ;yield undefined; }");
tryItOut("if(\n1e+81) { if (<x><y/></x>) {let prop = false;; }} else return <><x><y/></x></>;");
tryItOut("\tconst __iterator__ = true;");
tryItOut("do throw <x><y/></x>; while((this) && 0);");
tryItOut("/*for..in*/L:for(let constructor in ((1 for (x in [])))(<x><y/></x> & <x><y/></x>, __iterator__.isPrototypeOf(<><x><y/></x></>))) {L:with(<x/>){{} } }");
tryItOut("let (__count__) { L:switch(<x><y/></x>) { case __proto__: case 3: function(q) { return q; }break; let constructor =  /x/ , __noSuchMethod__; }\nlet (prototype, __count__ = <y><z/></y>) { return; }\n }");
tryItOut("with(<x><y/></x>){let __iterator__; }");
tryItOut("L: yield;");
tryItOut("constructor, __proto__ = <x/>;");
tryItOut("/*for..in*/for(const [prop, __iterator__] = (uneval(((({__parent__: __proto__ })).__lookupSetter__(\"prototype\")))) in null.hasOwnProperty(\"prop\")) /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <><x><y/></x></>) throw 3.141592653589793;");
tryItOut("if() {__iterator__ = prototype; } else {prototype | __count__; }");
tryItOut("do yield; while(() && 0);");
tryItOut("if(prototype.__proto__) if((constructor.prototype = <x><y/></x>)) { if (__iterator__ = __iterator__) const constructor =  '' , __noSuchMethod__;} else {return [z1]; } else  if (arguments) M:with((uneval(setter = <x><y/></x>))) else /*for..in*/for(prop =  /x/g  in *) yield <><x><y/></x></>;");
tryItOut("let (3/0 =  \"\" , prop) { const prop =  \"\" , __iterator__; }");
tryItOut("{[,,z1]/*for..in*/for(var function::__iterator__( /x/ ) in ((function () { gc() } )((gc())))){/*infloop*/<x/>return; } }");
tryItOut("if(window.yoyo(prototype).isPrototypeOf( /x/g )) { if (1e81 .@ (window if (this))) {__proto__;export *; }} else return;");
tryItOut("yield;");
tryItOut("return");
tryItOut("L:if(((this.__defineSetter__(\"prototype\", @foo)) >>> prototype = window)) {;if((function  prop (constructor) { yield <x/> } ).call(*::*, #3={a:#3#})) {new Function } else throw <y><z/></y>; } else {var prop = @foo\n }");
tryItOut("/*infloop*/do {{} } while(constructor);");
tryItOut("/*for..in*/for(var [__count__, __iterator__] = (uneval('haha'.split())) in (prop.__iterator__)) {__count__, __iterator__;/*infloop*/for(const constructor; ({ set prototype(__noSuchMethod__) { yield <x><y/></x> }  }).__iterator__ = (__parent__.(*)); ((<x><y/></x> if (#3={a:#3#}))) .@*:: eval(\"{}\", <y><z/></y>)) if(arguments) { if ( /x/g ) {} else {{case function ([y]) { } <<= (__count__ = __proto__.hasOwnProperty(\"prototype\")): __noSuchMethod__ = __count__;break; break; {}break; }; }} }");
tryItOut("/*infloop*/for(.__lookupGetter__(\"__iterator__\"); Math.pow(<><x><y/></x></>) if (<><x><y/\t></x></\n>); __parent__) {do {(<x><\ty/\r></x>).callyield  \"\" ; } while((\n\tprop = this) && 0);return; }");
tryItOut("try { with({}) { (false); }  } catch(__proto__) { __count__ = prop; } finally { __count__ = __iterator__; } ");
tryItOut("const __noSuchMethod__;");
tryItOut("if(((p={}, (p.z = (eval(\"__noSuchMethod__ = undefined\", (__proto__.__noSuchMethod__ = *))))()))) let (({ __iterator__: [prototype, ({ __proto__: prototype, __noSuchMethod__: constructor })] }) = ([1,,].isPrototypeOf(<x/>))) { /*infloop*/for(let #1# = false; @foo; case 8: yield  /x/ ;break; default: @foocase false: continue ;break; {}break; break ;case window: break; ) {__proto__, __iterator__ = *;var prototype = <><x><y/></x></>; } } else  if (__noSuchMethod__ = [, , , __parent__] = prototype.(@foo.prototype =  \"\" )) {/*for..in*/M:for(let prop in ((function (1.3) { {} } )(<y><z/></y>))){(null);export constructor; } }");
tryItOut("const __proto__, prop = <y><z/></y>");
tryItOut("let([, prototype, ] = (#2=__iterator__.yoyo(undefined) |= (function::prop.prototype = [1,,]))) ((function(){let constructor;})());");
tryItOut("/*infloop*/M:do break L; while((//h\n<><x><y/></x></> |= [,,]) ? <x><y/></x> ? 3.141592653589793 : 0/0 : constructor.__iterator__);");
tryItOut("let (prop, prototype) { return; }");
tryItOut("do export *; while((<x/>) && 0);");
tryItOut("do let constructor = this; while(([].__proto__ = this.__defineSetter__(\"__iterator__\", gc)) && 0);");
tryItOut("/*infloop*/for((function ([y]) { })()\t == true; (new Boolean()).watch(\"prototype\", ((eval(\"<x><y/></x>\", @foo))).__defineSetter__); (this.__defineSetter__(\"__count__\", @foo) === <><x><y/></x></> if (constructor).__noSuchMethod__ = constructor.prototype)) (false)\n");
tryItOut("__noSuchMethod__ = __count__");
tryItOut("5.0000000000000000000000;\ndo prop; while((window) && 0);\n");
tryItOut("return window\n");
tryItOut("let(__count__ = ((p={}, (p.z = 1.3)()))) ((function(){let(__parent__ = ((*).call(<x><y/></x>, constructor)), __parent__ = (<x/>++)) { throw prop;})());");
tryItOut("L:with({constructor: arguments}){return;\nyield constructor;\n }");
tryItOut("{;<x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in false) __iterator__;");
tryItOut("if((<x/>['constructor'] = (( /x/g )(*::*, <x/>)))) { if (true) yield;} else yield;");
tryItOut("/*infloop*/for(var __iterator__; __noSuchMethod__ = ({prototype getter: ({a2:z2}) }); [z1,,]) {({ prop: __noSuchMethod__ }), __parent__;( \"\" )\n__parent__; const __parent__; }");
tryItOut("if((p={}, (p.z = __proto__)())) export *; else  if ((<x/>.prop)) ([[1]]);");
tryItOut("with({__count__: (constructor = yyy)}){let(__proto__ = let (yield =  /x/ ) <x><y/></x>) ((function(){([,,]);})()); }");
tryItOut("with({__parent__: <x/>})");
tryItOut("M:if(<y><z/></y>) {let __noSuchMethod__ = <y><z/></y>, constructor = 0/0; }");
tryItOut("/*infloop*/for(var prop; undefined; (eval(\"__noSuchMethod__ = ({__proto__: constructor,  set prototype __parent__ (prototype)constructor }).eval(__noSuchMethod__.prototype)\", (((.2 >>> false))[new (__parent__)()].unwatch(\"function::__iterator__\")))) ?  ''  : (__count__ = <x/>)) return;");
tryItOut("/*infloop*/L:for(<y><z/></y> | constructor; new Object(__iterator__); (__proto__ =  \"\" )) {return window;__parent__ =  '' , __noSuchMethod__; }");
tryItOut("/*for..in*/for(var prototype.__count__ in <x/>) {export prototype; }");
tryItOut("gc()");
tryItOut("if([#3={a:#3#} if ()]) { if (<y><z/></y>()) {prototype, __proto__ = throw __iterator__;; }} else {function(q) { return q; } }");
tryItOut("/*for..in*/for([__iterator__, constructor] = (yield prototype(<x/>) = (<x/>)(1.2e3, <><x><y/></x></>)) in (this.__defineGetter__(\"__parent__\", (new Function(\"{}\"))))) {const __proto__ = <x><y/></x>; }");
tryItOut("{with({constructor: (window.@foo)})if(<><x><y/></x></>) {;(<x><y/></x>); }L:do return <x><y/></x>; while((1e81) && 0)\nreturn <x/>; }");
tryItOut("/*infloop*/for(constructor.__proto__ setter= function  constructor (prop) { yield (\rfalse instanceof  /x/ .*) } ; <><x><y/></x></> > 0.1.isPrototypeOf( /* Comment */<x><y/></x>); prop = \r(p={}, (p.z = <x><y/></x>)()) /= constructor = eval(\"this - <x><y/></x>\", <x/> ? 033 : window)) \t{export function::__noSuchMethod__ }");
tryItOut("L:if(new (new Function)((<x><y/></x>.(;)), <y><z/></y>)) return; else  if (prototype.prop = (eval(\"gc()\",  '' ).hasOwnProperty(\"prototype\"))) {__proto__ = <x><y/></x>; } else export *;");
tryItOut("/*for..in*/for(__count__ =  /x/  in ([<x><y/></x>.(window)])) {/*infloop*/for(var constructor; *::*; null) export *;{export *; } }");
tryItOut("gc()");
tryItOut("/*for..in*/for(var constructor in ((Function)(((let (__parent__ = <x/>) 1.2e3 for ((__iterator__)(<x/>) in arguments) for (prototype in null)) ? undefined.prototype = <><x><y/></x></>.__defineGetter__(\"prop\", false) : (<x/>)([[1]], undefined).eval(<y><z/></y>)))))/*for..in*/for(const __proto__ = ({}) &= undefined in <x><y/></x>) let prop;");
tryItOut("/*infloop*/while(\n((( /x/g ).__defineSetter__)(this, window))){<x><y/></x> }");
tryItOut("if(prop = null) throw <><x><y/></x></>; else {<x><y/></x> }");
tryItOut("let (({ __noSuchMethod__: ({ __count__: [, , , ] }), __noSuchMethod__: [] }), prop) { return  /x/ .watch(\"__iterator__\", /a/gi); }");
tryItOut("function::__parent__ = __parent__;");
tryItOut("if(this) {({}).__lookupGetter__ } else  if (<x><y/></x>) {yield; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:do {/*infloop*/L:for(const [, [({ prop: __iterator__, __proto__: [] }), __proto__, [, [prop, __count__, __count__, , ], __noSuchMethod__], ({ __noSuchMethod__: , __iterator__, ] }), function::constructor], , constructor, ] = <x/>++; ([<x><y/></x> for each (__iterator__ in <x><y/></x>)]) <<= (__iterator__.__count__ =  /x/ ); (this.__defineGetter__(\"prototype\", new Function))) return; } while((yield <x><y/></x>).prop.watch(\"__iterator__\", function(q) { return q; }));");
tryItOut("prototype = __parent__;");
tryItOut("let (__count__) { if([@foo].filter(\t(-0).watch) <<= 1.3 >>>=__parent__) {prototype = <><x><y/></x>/*\n*/</>; }\t else  if (this.__defineSetter__(\"__count__\", ({}).__lookupGetter__)) {/*infloop*/L:for(<x><y/></x>; <x><y/></x>; <y><z/></y>) yield <x><y/></x>;; } }");
tryItOut("while((@foo -= <><x><y/></x></>) && 0)gc()");
tryItOut("if(\fthis) { if (<x><y/></x> /= <><x><y/></x></>) {break L; }} else { '' ;; }");
tryItOut("if((void <y><z/></y> % constructor.__iterator__ setter= 'haha'.split).isPrototypeOf(prototype.(+[<x/>].sort(true)))) /*for..in*/for(const constructor in <x/>) ; else  if (new ((5.0000000000000000000000)())( /x/g .unwatch(\"__proto__\"), <x><y/></x>).valueOf(\"number\")) {let (function::__noSuchMethod__) { \nwhile((<x><y/></x>) && 0)export *; } } else {return -3/0 }");
tryItOut("__count__ = __iterator__;");
tryItOut("if(null) let each, __noSuchMethod__ = *::*; else  if (<x/>) function(q) { return q; }");
tryItOut("/*for..in*/for(__parent__ in ((function (<x><y/></x>.__count__, __proto__)[(function ([y]) { })()].some((new Function(\"(*).__defineSetter__\"))))(033)))gc()");
tryItOut("M:if( /* Comment */__noSuchMethod__ = \t3.141592653589793) { if ((__proto__.hasOwnProperty(\"prototype\"))) {const constructor =  '' , __parent__; }} else break ;");
tryItOut("{(__iterator__); }");
tryItOut("{yield;{continue L; } }");
tryItOut("{if(constructor.(<><x><y/></x></>)) {\n } else  if ((-1) if (<><x><y/></x></>)) yield 4.; else {yield; } }");
tryItOut("if((<x><y/></x>.(false))) const __parent__, yield;");
tryItOut("/*for..in*/for(let [({ __proto__: ({ __iterator__: ({ constructor: __count__, __proto__: ({ __noSuchMethod__: ({ __iterator__: prototype }), yield: __proto__ }) }), ({ prototype: __noSuchMethod__ }): [({ __noSuchMethod__: [prototype, , , ], constructor: prop }), , , ({ prop: [], __proto__: function::__noSuchMethod__ })] }) }), constructor] = (prop.constructor =  ''  if ((function ([y]) { })())) in <bbb xmlns=\"3.141592653589793\"></bbb>.__defineGetter__(\"prototype\", function(y) { yield y; gc(); yield y; })) continue M;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) __noSuchMethod__;");
tryItOut("if([15,16,17,18].map(({}).__lookupGetter__, [1,,])) {const prototype;(-3/0); } else  if (RangeError()) {(3/0); } else ;");
tryItOut("M:if(undefined) if( \"\" ) function::__proto__;window;");
tryItOut("while((<xxx {constructor}={this.__defineSetter__(\"__count__\", function(q) { return q; })} />.(((*::*)()))) && 0)/*infloop*/do const __noSuchMethod__; while(<x><y/></x>);");
tryItOut("export *;");
tryItOut("{const __noSuchMethod__ = ({});var delete = null, delete; }");
tryItOut("L:if((<><x><y/></x></>.unwatch(\r\"__count__\")).__iterator__ = false) { if ((let (prototype) undefined)) {return constructor;let constructor = *, constructor = <x/>; }} else {export __noSuchMethod__ }");
