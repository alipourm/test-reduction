tryItOut("if(({constructor getter: function  constructor () { return \n(yield this) }  })) L: {<><x><y/></x></>; }\n");
tryItOut("if(([<><x><y/></x></> for each (constructor in constructor)])) {export *; }");
tryItOut("constructor, __iterator__;\ndo var __iterator__ = <y><z/></y>, __noSuchMethod__ =  '' ; while((new (5.0000000000000000000000)(({a1:1}), *)) && 0);\n");
tryItOut("let (__noSuchMethod__ = __iterator__ = <x><y/></x>, constructor = <x/>) { gc() }");
tryItOut("with(.2)prototype, __count__;");
tryItOut("/*infloop*/L:for(const prototype; *::*; __noSuchMethod__[null]) {; }");
tryItOut("/*infloop*/do {continue L;; } while(new [ '' ]);");
tryItOut("[1,2,3,4].slice");
tryItOut("/*for..in*/for(prop = (*::* >>= <x/> !== (yield \n<x><y/></x>)) in [11,12,13,14].map) {\tif(this) { if (*::*) {yield;return false; } else export __noSuchMethod__;}throw 0; }");
tryItOut("if(__count__) yield @foo; else  if (#2=[<x><y/></x>]) {return [,];continue ; } else {gc()yield 1.2e3; }");
tryItOut("L: {break ; }");
tryItOut("/*infloop*/while((each.*) && *)/*infloop*/for(({ prop: __noSuchMethod__, __noSuchMethod__: [prop, , , __parent__, __count__] }) = 1.2e3; ([15,16,17,18].map(function(y) { yield y; ;; yield y; }, [1](__parent__,  '' ))); delete window) const prototype = #1#;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in <x><y/></x> ?  ''  : {}) Function");
tryItOut("/*for..in*/M:for(__proto__ = window.unwatch(\"prop\") in @foo) {return;(1.2e3); }");
tryItOut("try { let(__parent__ = this.zzz.zzz.prototype) { __noSuchMethod__ = prop; } catch(__noSuchMethod__ if (function(){return;})()) { let(prop, prototype = (yield -3/0.throw(<><x><y/></x></>); ? this : <x/>)) { return prototype = window; } catch(function::__noSuchMethod__ if [-0 if (#1=[#1#])].unwatch(\"prototype\")) { return; } catch(__count__ if this) { yield  \"\" .watch(\"__parent__\", (1 for (x in []))).__proto__; } catch(__parent__) { try { return __count__: __proto__%=__count__; } finally { this.zzz.zzz; }  } finally { prop = __count__; } ");
tryItOut("with(void prop.(<x\t><y/></x>.valueOf(\"number\")))throw window;");
tryItOut("do {var __parent__; } while(((<><x><y/></x></>.propertyIsEnumerable(\"__count__\").__iterator__ = prop = *)[(this)[window]]) && 0);");
tryItOut("switch([<x><y/></x> ? true : this\n]) { default: if(window += function(id) { return id }--) {let __iterator__ =  \"\" , __parent__;return undefined; } else {yield false; }break; case (yield (--<><x><y/></x></>)): var prototype = window, __parent__\ngcbreak; case 8: yield (((gc).apply).call(<><x><y/></x></>, <><x><y/></x></>))[\f<x><y/></x>.*];break; case 5: const __count__;break; case 2: /*for..in*/for(const [prop(this), undefined] = (__iterator__ = <x><y/></x>) in __proto__) break L;break; case new new Function(@foo, [[]]): return __proto__;break; case 3: break; case this.zzz.zzz: /a/gi\nvar function::__parent__, prop; }");
tryItOut("M:with(('fafafa'.replace(/a/g, prop))[({ __count__: [[]], prototype: prototype }) = this / __parent__ = null, __count__ = <x><y/></x>])switch(\t(function ([y]) { })().__count__) { case (( \"\" )()): yield;default: break;  }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let __iterator__ in ((new Function)((new [,,](3.141592653589793)))))function (__iterator__, @foo)[,] }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const prototype in (((this).call)( /x/g )))yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prototype in [15,16,17,18].some(<x><y/></x>, <><x><y/></x></>(@foo))) {\nwhile((1.3) && 0){let __parent__ = <x/>; } }");
tryItOut("/*infloop*/for(const ({ __parent__: constructor, prototype: ({ x::__proto__: __count__, __count__: ({ constructor: constructor }) }) }) = new ( '' )(__count__ = __iterator__); __proto__.constructor = 3; (prototype = true)) {return ({a1:1});{L: {let __count__ = function ([y]) { }; }const __proto__ = <x><y/></x>, __iterator__ = __count__; } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(__count__.__proto__.watch(\"prop\", ((1 for (x in []))).apply))/*infloop*/for(<><x><y/></x></>; this; undefined) gc()");
tryItOut("/*for..in*/for(\fconst [__proto__, __parent__] = (<x/> < <><x><y/></x></>.eval(undefined)) in ((uneval(0)))) {var __proto__ = <><x><y/></x></>; }");
tryItOut("__parent__ = __proto__;");
tryItOut("try { let(({ prop: prototype, prop: __count__ }) = <><x><y/></x></> &= 5.0000000000000000000000, prototype = <y><z/></y>) { with({}) const prop = this; } catch(constructor if (function(){try { export __iterator__; } finally { __iterator__; } })()) { yield; } catch(constructor) { for(let y in [5,6,7,8]) throw StopIteration; } finally { prototype = constructor; } ");
tryItOut("M:switch( /x/g .watch(\"__iterator__\", Math.pow)) { case 5: /*for..in*/L:for(var [__proto__, ({ __iterator__: ({ __count__: [, , , constructor, ({ get: __count__, prototype: prototype })] }), __iterator__: ({ prototype: __iterator__ }) })] = 3/0.@* in <><x><y/></x></> /= window) { '' ;export *; }break; case [__count__.prototype] = (): if(window.__defineSetter__(\"__count__\", gc)) { if ((@foo , <x/>)) yield <x/>;} else function(q) { return q; }case <x/>: /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in prototype = <x><y/></x>) break ;break;  }");
tryItOut("/*infloop*/for(prototype; 1e4; null) {function(q) { return q; }yyy }");
tryItOut("switch(<x><y/></x>.isPrototypeOf( /x/g )) { case 4: break; case 9: (<x><y/></x>);break;  }");
tryItOut("with({__count__: prototype}){; }");
tryItOut("/*infloop*/for(__count__; (constructor, __proto__ = [z1,,] = <y><z/></y>); <><> </></>) {constructor = this; }");
tryItOut("if(((<x><y/></x> instanceof <><x><y/></x></>).__defineGetter__(\"__proto__\", @foo))--) { if (eval(\"(new ('haha'.split)())\", ((p={}, (p.z = __count__)()).hasOwnProperty(\"__iterator__\")))) var __iterator__ = <y><z/></y>, constructor; else export *;}");
tryItOut("L: {{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (undefined)(null) in *) {; }\n/*infloop*/for([1]; ({a2:z2});  /x/g ) {continue ; }\n");
tryItOut("if(this ? <x/> :  /x/ .unwatch(\"prop\")) function(q) { return q; } else {;export __proto__; }");
tryItOut("/*infloop*/for(var __count__; constructor; <x><y/></x>.isPrototypeOf(1.2e3).unwatch(\"__proto__\")) try { return; } finally { return; } ");
tryItOut("L:if(( /x/g ++)) { if ((__iterator__ if (*::*))) {const constructor; } else {; }}\n");
tryItOut("/*for..in*/for(let __parent__ in  \"\" ) {gc() }");
tryItOut("/*infloop*/while(@foo((eval(\"yield <x/>;\", this))))");
tryItOut("if((*.watch(\"prototype\", Math.pow))) return; else  if ((__parent__.(undefined))) {continue M; }");
tryItOut("with({__count__:  \"\" }){continue ; }");
tryItOut("/*infloop*/L:for([, constructor, prototype] = *::*; let (__proto__)  /x/g ; #3={a:#3#}) {return;(__count__); }");
tryItOut("L:if() {throw  { return this } ;(true); }");
tryItOut("let (({ __iterator__: [, , , prop, ], constructor: __iterator__.constructor }) = , [({ constructor: __noSuchMethod__, __iterator__: prop }), ({ : prototype }), ]) { /*for..in*//* nogeckoex bug 349964 */__proto__ for  each(let __parent__ in @foo) {yield <><x><y/></x></>; } }");
tryItOut("/*infloop*/for(const __parent__ = window in <x><y/></x>; <y><z/></y>.__lookupSetter__(\"__count__\"); new #3={a:#3#}()) {__noSuchMethod____count__ }");
tryItOut("\fif(__parent__)  else  if (this.zzz.zzz) throw <x><y/></x>;");
tryItOut("/*for..in*/for(let ((typeof <y><z/></y>))(__proto__ = <><x><y/></x></>) in ((((eval(\"(function (__parent__, __iterator__) { return (function ([y]) { })() } )().__lookupGetter__(\\\"constructor\\\").__lookupGetter__(\\\" for each (__parent__ in <x><y/></x>) for (__iterator__ in window)\\\")\", (( <x><y/></x>{ -3/0 __iterator__ getter: (<x><y/></x>).apply, prop: <x/> }) %= (<y><z/></y> for each (__count__ in this)))))).__defineSetter__)(__iterator__.__noSuchMethod__ setter= @foo))){/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in .2) {; }/*infloop*/M:for(<x><y/></x>; <x><y/></x>; __parent__|=<x/>) {throw  \"\" ; } }");
tryItOut("M:if('fafafa'.replace(/a/g, Math.pow)) { if ((constructor)) {let prototype; }} else {({}).__lookupGetter__ }");
tryItOut("if((3.141592653589793 *= *::* = <x/>\n)) if(yield <x/>) __noSuchMethod__ = (__iterator__ = prop) else  if (this.__defineSetter__(\"__count__\", <x><y/></x>)) yield; else {<x/>let; }");
tryItOut("switch(<x/>) { case 0: export *;break; case 3: throw prop;break; case 1: break; ;break; default: case 8: var __proto__ = [[]];break; ;break; <y><z/></y>break; case null: case 9: break; case 1.2e3: continue ;break; case false:  }");
tryItOut("/*infloop*/do  while(({constructor: (this.__lookupSetter__(\"prop\")) }));");
tryItOut("/*for..in*/for(const __iterator__ = ({ __noSuchMethod__: __iterator__, prop: __proto__ }) = ({ function::__iterator__: __iterator__ }) in eval(\"yield false;\", <y><z/></y>).__defineSetter__(\"prototype\"\f, function(q) { return q; })) ;");
tryItOut("while((((this % <x><y/></x>.__parent__ = this.__defineSetter__(\"__proto__\", prototype)))) && 0){ /x/ ;return window.isPrototypeOf(false); }");
tryItOut("L: {export constructor;return __parent__; }");
tryItOut("prototypeif(true % undefined) { if ( /x/g  -= __iterator__) (prototype); else { \"\" ; }}");
tryItOut("/*infloop*/for([window[ \"\" ].__defineGetter__(\"prototype\", false)].some(this.watch(\"__noSuchMethod__\", this)); __proto__.__count__; (this.watch(\"__noSuchMethod__\", new Function).__noSuchMethod__)) {new Function\nfunction  __count__ () { return  /x/g  } \n }");
tryItOut("({ constructor: __parent__, constructor: ({ __proto__: ({ prototype: ({ __count__: ({ __count__: [] }) }) }) }) })");
tryItOut("M:if(({prop: !<'x{(<><x><y/></x></>); }>y __noSuchMethod__ />constructor = ([[1]] for each (prop in <x><y/></x>)(([1,2,3,4].map)())), __noSuchMethod__</x>})) export *; else  if ((prototype = default: L: break; case 9: (1.2e3);break; ([z1,,]);break; case 4: case ((<x/>)): break; )) return;");
tryItOut(";");
tryItOut("/*infloop*/M:do {prop = <x><y/></x>;return; } while(( var .propertyIsEnumerable(\"x::__count__\")));");
tryItOut("/*for..in*/M:for(const [, ({ __iterator__: __proto__, prototype: x::get })] in (('haha'.split)(5.0000000000000000000000)))/*infloop*/for(*::* += @foo; this.__lookupSetter__(\t\"__noSuchMethod__\") , ; (prototype = *::*)) return prototype;");
tryItOut("switch(#0=(\n /x/ )\n.__lookupGetter__(\"__iterator__\")) { default: ({ prop: prototype }) = prototype;case __noSuchMethod__ = ({__parent__ getter: window }): switch(__noSuchMethod__/*\n*/ =  /x/g ) { case 6: gc() }\nFunctionbreak; case (((new null))./*\n*/__defineSetter__)( \"\" , ((3 if (<y><z/></y>)))): break; case eval(\"#1=[#1#]\", ~<><x><y/></x></>): break; gc()break; case 0: function  __proto__ (__proto__, __count__)__proto__ }");
tryItOut("continue M;");
tryItOut("function (__iterator__)1e-81\n");
tryItOut("if((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((__parent__.((-1) :: null))))) {export *;<x><y/></x> = (let (__parent__: [,]) (-1)\n); }");
tryItOut("L:do {/*for..in*/for(let(prop.__count__, __count__ = ((uneval(<><x><y/></x></>)))) { yield ('fafafa'.replace(/a/g, function(y) { yield y; /*infloop*/M:while( \"\" )throw <x/>;; yield y; })); in (((prototype-=Array(*)))(__parent__ = ({ prop: prototype, \tprop: __count__ })))){('haha'.split).__defineSetter__ }{{} } } while((let (__count__ = <x><y/></x>) {}) && 0);");
tryItOut("/*for..in*/for(let [function::__count__, __proto__] = [z1] &= window in [1,,] ? *::* : <x/>) {let __parent__; }");
tryItOut("if(({prop: <x/> }) (constructor); else  if (*.__defineSetter__(\"prototype\", ({}).hasOwnProperty)) arguments else export *;");
tryItOut("switch(({__parent__: })) { case !<x/>: default: break; case ( /* Comment */[1].valueOf(\"number\")).watch(\"__parent__\", #0=({prop: window >>= true})): break;  }");
tryItOut("L:if(__count__) { if (yield 0.1) return;} else {export *; }");
tryItOut("/*infloop*/M:do {return <x/>; } while(<><x><y/></x></>);");
tryItOut("/*infloop*/for((eval(\"prop =  /x/ \", __iterator__ = true instanceof <y><z/></y>)); @foo = <x><y/></x>; * << *::*) __parent__");
tryItOut("do {if(null) { if ('fafafa'.replace(/a/g, function (__proto__,  { throw __iterator__; } ) { yield  \"\"  } )) {export __proto__; } else export *;} } while(((~<x/>)) && 0);");
tryItOut("{;\tyield @foo.(this \"__count__\"); }");
tryItOut("L:with(@foo & false.hasOwnProperty(\"__iterator__\"))return;");
tryItOut("var __parent__\nM:if((eval(\"null\", <x><y/></x>))(<><zzz>prop</zzz></>, let (prototype = -3/0) 1e4)) { if (<y><z/></y> .@ @foo %=  /x/g ) {yield;with({prop: <y><z/></y>\t}){yield  '' ;yield; } } else {undefined }}");
tryItOut("throw *::*;");
tryItOut("{__proto__, __parent__;; }");
tryItOut("with({}) { throw function::__iterator__; } ");
tryItOut("M:if(<x><y/></x>[<x/>] instanceof Function.valueOf(\"number\")) { if ((__count__.valueOf(\"number\") + (__proto__)(prop, *::*).__noSuchMethod__)) return window;<><x><y/></x></>; else {M:if(true) {return undefined;case 9: /*infloop*/for(var __parent__ = prop, __noSuchMethod__; <x/>; @foo) return this;case 8: default: break; yield;break; case 1:  } else  if (this) {let prototype = <><x><y/></x></>; } }}");
tryItOut("/*for..in*/for(const __parent__ = __count__ = __parent__ = 1.2e3 in (<x/>.valueOf(\"number\") for (true(prototype) in <y><z/></y>) for (constructor in <x/>))) {continue L;const __noSuchMethod__ = prototype, __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <x/>)  for (__parent__ in ({ __count__: function::__count__, constructor: __iterator__ }) = eval(\"break L;\", null))\n{with({__noSuchMethod__: <><x><y/></x></>}){function(y) { yield y; return 1.3;; yield y; } }yield; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in  /x/g ) {let __proto__; }\n/*for..in*/for(let [prop, __iterator__] = new RangeError(window) in <x><y/></x>) throw <y><z/></y>;\n");
tryItOut("do undefined; while((Object(window)) && 0);");
tryItOut("let (__parent__) { L: {eval } }");
tryItOut("with({}) { let([], __noSuchMethod__ = <x/>) { throw __noSuchMethod__; } ");
tryItOut("while((( /x/g .hasOwnProperty(\"__noSuchMethod__\"))) && 0)if(Function(<><x><y/></\nx/*\n*/></>)) {return this;let __parent__ = prototype: null; }");
tryItOut("if(<><x><y/></x></> -= __noSuchMethod__) { if ((__noSuchMethod__.\r__parent__ getter= 0.1)) {yield;; } else {<!--yy-->this; }}");
tryItOut("if( null .valueOf(\"number\")) yield  '' ; else prop = constructor;");
tryItOut("if(new (yield __count__ = 0/0)() <<= prop = throw false;) {if(__parent__.prop) { if (yield <x><y/></x>) { }} else __noSuchMethod__; } else  if (__noSuchMethod__) {((default: break;  ^ [RegExp(<x><y/></x>)])); }");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = true ? undefined : undefined in window) {yield; }");
tryItOut("{yield *::*; }");
tryItOut("gc()");
tryItOut("if(([15,16,17,18].some(function () { yield null } , (<x/>.unwatch(\"__noSuchMethod__\"))))) ");
tryItOut("for(let y in []);");
tryItOut("prop");
tryItOut("export __noSuchMethod__; const prototype;");
tryItOut("/*infloop*/for(__noSuchMethod__ = (typeof this); (<x><y/></x> >>>  /x/ ); [@foo].map(Function)) {gc() }\n/*infloop*/for(var __count__ = <x/>; <><x><y/></x></>; window) {export __parent__; } const constructor;");
tryItOut("{}\n");
tryItOut("(@foo).watch\nyield prototype;\n");
tryItOut("L:while(((this.__defineGetter__(\"__iterator__\", L:if(window) {const constructor, prop;let __noSuchMethod__, prototype; }continue L;))) && 0){return;__noSuchMethod__; }\f");
tryItOut("with({prototype: (p={}, (p.z = (this.__defineGetter__(\"constructor\", <x><y/></x>)))()) / 0/0.hasOwnProperty(\"__proto__\")}){yield window; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("while(((prop.__count__ setter= (1 for (x in [])))) && 0){/*for..in*/for(var (prototype) in  /x/ ) throw [prototype if (__parent__)]; }");
tryItOut("/*infloop*/for(let ({ __parent__: {}, __noSuchMethod__: [, , , prototype, ] }) = this.__defineSetter__(\"__proto__\", Function).hasOwnProperty(\"__count__\"); Error(); (let (__noSuchMethod__ = @foo) *::*)) /*for..in*/for([__noSuchMethod__, __iterator__]\t = ( /x/g  ? <><x><y/></x></> :  /x/ ) in prop) {{}0/0 }");
tryItOut("/*for..in*/M:for(const __proto__ in ((this.__defineSetter__(\"__noSuchMethod__\", Math.pow))(new (([<><x><y/></x></> if (__proto__)]))())))/*infloop*/for(constructor;  /x/ ;  '' ) {export *; }");
tryItOut("continue \n");
tryItOut("M:if((new (Math.pow).apply((yield (<x/>.__parent__ = window)), yield [[1]])).__lookupSetter__(\"__iterator__\")) {/*for..in*/M:for(var [__proto__, __noSuchMethod__] = ((__iterator__ , <><x><y/></x></>).valueOf(\"number\")) in <y><z/></y>) /*for..in*/for(const [set, __noSuchMethod__] = <x><y/></x> in 4.) { } } else  if ('fafafa'.replace(/a/g, (*).call)) {return;constructor: this }");
tryItOut("return true");
tryItOut("/*infloop*/for(let prop; <x/>; <employee id=\"1\"><name>Joe</name><age>20</age></employee>) if((({__iterator__ getter: ([1,2,3,4].map).apply,  get __count__ __noSuchMethod__ (constructor, __iterator__) { return setter ? <x/> : <x><y/></x> }  }))) {return <x><y/></x>;; } else {return; }");
tryItOut("switch(( /* Comment */this.zzz.zzz)) { default: case 1: break;  }");
tryItOut("var __iterator__ = <><x><y/></x></>; const prototype;");
tryItOut("return function(y) { yield y; [,,z1];; yield y; }();");
tryItOut("/*infloop*/for(var ({ prop:  }) = (__iterator__.constructor = <x/>); new (window.@*.prop)(x::__count__ &= <><x><y/></x></>.__defineSetter__(\"__count__\", new Function), (<y><z/></y>.throw(true)).__count__ = (uneval(<y><z/></y>))).__iterator__; (\n__proto__)) {/*for..in*/for(let [constructor, constructor] = \n[window].some(new Function) in 'fafafa'.replace(/a/g, function(q) { return q; })) { } }");
tryItOut("break ");
tryItOut("let(__proto__, prototype) { yield;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("let (__iterator__, [({ __count__: __proto__, constructor: [, , prototype] }), , ({ __iterator__: prop })] = (<x/> / undefined)) { with({prop: })'haha'.split }");
tryItOut("__count__ = __parent__;");
tryItOut("if(*::*) {throw this; }");
tryItOut("with({}) let(prototype) ((function(){<ccc:ddd> </ccc:ddd>})());");
tryItOut("do {<x><y/></x>; } while((eval(\"return <><x><y/\\f></x></>;\", <y><z/></y>)) && 0);");
tryItOut("L:while((__count__ === <><x><y/></x></>) && 0){export *; }");
tryItOut("/*infloop*/for(let __iterator__; <x><y/></x>.__lookupSetter__(\"__proto__\"); <><{__count__}><ccc:ddd>\t#0=__parent__ </ccc:ddd></{__count__}></>) /*infloop*/L:for(var __noSuchMethod__; const constructor.prop, __iterator__ = 3/0;; <><x><y/></x></>) {(undefined);; }");
tryItOut("__count__\n");
tryItOut("with({constructor: (new ((({a2:z2}) - -3/0)[arguments || prototype]))(( /x/g  ? <x><y/></x> : <x><y/></x>) for each (__iterator__ in true), (*::*)[prototype].valueOf(\"number\"))}){} const __iterator__;");
tryItOut("/*infloop*/for(let __proto__; 0/0; true) {this; }");
tryItOut("switch(false) { default:  }");
tryItOut("with({__proto__: ({__noSuchMethod__ setter: <><x><y/></x></> })}){var prototype = null; }");
tryItOut("/*for..in*/for(const (__parent__)(<x/>) in -3/0) var constructor =  /x/g ;");
tryItOut("(<x><y/></x>)\nconstructor.__proto__ getter= @foo;");
tryItOut("M:if(( ''  ? [,,] : <><x><y/></x></>)) /*for..in*/M:for(let __parent__ = __noSuchMethod__ in <x/>) { } else {return [z1]; }");
tryItOut("/*infloop*/M:while(++<><x><y/></x></>)yield;");
tryItOut("/*infloop*/for(const __noSuchMethod__ = [,,]; #1=[#1#]; (<x><y/></x>.(true))) {break L; }");
tryItOut("/*for..in*/for(const prototype = __iterator__%=window in prototype = (({}).hasOwnProperty)()) {/*infloop*/for(<x/>; 0.1; <x/>) {export  /x/ ;<x><y/></x>; }({}).__lookupGetter__ }");
tryItOut("/*infloop*/while(new new Function((function ([y]) { })()\n))if(({a2:z2}).yoyo(__count__)) { if ([15,16,17,18].sort(({}).__lookupGetter__, __parent__))  else return;}");
tryItOut("{yield; }");
tryItOut("return (function ([y]) { })().unwatch(\"prototype\") instanceof prop.eval(<><x><y/></x></>);");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("export *;");
tryItOut("if(undefined) { if (undefined) yield; else {{} }}");
tryItOut("{export *;(this); }");
tryItOut("{L: {return; }/*for..in*/M:for(const prototype in 1e4) {(undefined); } }");
tryItOut("with({__parent__: this.__defineSetter__(\"constructor\", (1 for (x in [])))})eval");
tryItOut("gc()");
tryItOut("try { return true; } catch(prototype if (function(){break ;})()) { break ; } catch(__iterator__) { this; } ");
tryItOut("let (prototype, prop) { [1]; }");
tryItOut("(<y><z/></y>);\n/*for..in*/for(prop in ((eval)( \"\" ))){throw this; }\n");
tryItOut("with({__iterator__: <x><y/></x>.__lookupSetter__(\"__proto__\")}){export __parent__;throw @foo; }//h\n");
tryItOut("const __noSuchMethod__ = ((<x><y/></x>));");
tryItOut("/*infloop*/for(let __noSuchMethod__; <x><y/></x>.(null)\n;  /x/ ) break M;");
tryItOut("with(yyy){L: {var __count__; } }");
tryItOut("if((1.3++)) yield @foo; else {(<x/>);{} }");
tryItOut("null;");
tryItOut("let constructor = try { yield; } catch(prototype if (function(){return;})()) { (<><x><y/></x></>); } ;with(function(id) { return id }){yield; }");
tryItOut("if((( /x/g ).watch)(<xxx>{__noSuchMethod__}</xxx>)) {export __count__;/*for..in*/for(var __parent__ in (([1,2,3,4].slice)(undefined))){} }");
tryItOut("{/*for..in*/for(let __proto__ in ((function  constructor ([, , ({ prop: __parent__, prototype: ({ __parent__: prop, prototype: prop }) }), ]) { return ((undefined).call((*::* !=  /x/g ), )) } )(delete constructor =  \"\" )))/*for..in*/for(var [__parent__, prototype] = ({__noSuchMethod__: [1], constructor getter: <y><z/></y> }) in window) {break M; }{return this;{} } }");
tryItOut("if(<x/> -= <x><y/></x>) { if (eval(\"*\", <y><z/></y>) , ('fafafa'.replace(/a/g, Math.sin))) const __proto__;}\n else {__count__ = <y><z/></y>export *; }");
tryItOut("return (*::*.valueOf(\"number\"));");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = new true(({})[false]) in ((__noSuchMethod__ = __parent__ = undefined).__defineGetter__(\"prototype\", ([1,,][window])))) /*for..in*/for(var [prototype, __noSuchMethod__] = (~ \"\" ) in __proto__) {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__noSuchMethod__)( '' ) in *::*) {const constructor = (function ([y]) { })();; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in *::*) return *;");
tryItOut("L:/*\n*/if(new true()) { if (<><x><y/></x></>) return constructor; else {let \nconstructor = <y><z/></y>, constructor;const __noSuchMethod__ = 1e4, __proto__ = true; }}");
tryItOut("{M:switch(*) { case 6: yield; } }");
tryItOut("M:if(<><x><y/></x></>[[,,]]) {const __noSuchMethod__ = (-0), __iterator__;prop; } else {yield;prototype, __iterator__ = constructor; }");
tryItOut("export *;\nexport *;\n");
tryItOut("while((([__count__, ] = [.2].map([1,2,3,4].slice).*)) && 0){if((__count__.constructor+=1e81)) { if ((false())) return this; else {}}__noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__; }");
tryItOut(";\n{}\n\n");
tryItOut("with({prototype: constructor}){L:if(* = __count__%=undefined) L:if([1]) __count__, __iterator__ =  \"\" ; else  if (undefined) {export *;gc() } else {{}yield 1e+81; } }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*infloop*/do {yield; } while((<x/>.yoyo(\nwindow)));");
tryItOut("do for(let y in []); while(((({ prop: __count__ }) = ( \"\" \n).hasOwnProperty(\"prototype\"))) && 0);");
tryItOut("let (constructor) { [,] }");
tryItOut("if((#2=[(new <y><z/></y>())])) {[1,2,3,4].sliceL:if([z1,,]) {yield <x><y/></x>; } } else  if (([ /x/g ].filter(function  constructor (__count__, __parent__) { yield  \"\"  } ))) {\t/*for..in*//* nogeckoex bug 349964 */ for  each(const (prop) in prop) export __proto__; }");
tryItOut("/*infloop*/while(prop\n){let __noSuchMethod__ = <x><y/></x>, __parent__ = false; }");
tryItOut("/*for..in*/for(const __parent__ in ((<><x><y/></x></>)(-__iterator__.constructor getter= window.throw(window)))){export prop;if( /x/g ) { if (__iterator__.__iterator__) return; else this} }");
tryItOut("constructor = ({ __iterator__: prototype, prop: constructor }) = false = *::*\n\tif(().unwatch(\"__proto__\")) (*::*); const __parent__;");
tryItOut("/*infloop*/for(window; 'fafafa'.replace(/a/g, ({__parent__ setter: /a/gi })); <><x><y/></x></>.set) {return;__parent__ = @foo\n(3/0);\n }");
tryItOut("/*for..in*/for(__proto__ in ((((__proto__.__proto__ = __proto__ = (case 7: ) ===  '' )).watch)((__iterator__+=.2.yoyo(new (*)(<x/>, <x><y/></x>)))++ .@x:: *::*.__defineSetter__(\"prop\", function  __count__ (__proto__, __count__)function(y) { yield y; const constructor = <><x><y/></x></>, prototype;; yield y; }))))__iterator__ const __count__\n");
tryItOut("let (({ __proto__: ({ prototype: ({ get __iterator__( '' ) { yield false } , __noSuchMethod__: <><x><y/></x></> }), __noSuchMethod__: [] }) })) { with({x::__proto__: ((({x::__parent__ setter: this })))[<x/> ? * : *]}){throw 4.; } }");
tryItOut("with(1e-81){__noSuchMethod__ }");
tryItOut("with({__proto__:  /x/g })return\n");
tryItOut("if(*) {gc() } else  if (<><x><y/></x></>) throw undefined;");
tryItOut("M:if( /x/g  || [].prototype) /*for..in*/for(var __count__ in [z1,,]) {__parent__;break L; }\r else  if (1e4) export *;");
tryItOut("try { let(constructor) { __proto__ = prop; } finally { return; } ");
tryItOut("with(null){const __iterator__ = <y><z/></y>, prototype = this; }");
tryItOut("/*infloop*/L:for(let [, , __iterator__] = <><x><y/></x></> || false; [[[1]]].sort(*::*); (++*::*)) ;");
tryItOut("/*infloop*/while(((__noSuchMethod__ = Exception())[new *::*() <= (uneval(<x><y/></x>))((\nprototype = <x/>))])){return;gc() }");
tryItOut("let (__parent__) { <><x><y/></x></>; }");
tryItOut("/*infloop*/M:while([1,,].valueOf(\"number\")){yield;if(/*\n*/( ''  = ({a1:1}))) {let __noSuchMethod__ =  /x/g ;function  __proto__ (prop, constructor)window } }");
tryItOut("/*infloop*/L:for(const prop; <><>(prototype.(prop).__defineSetter__(\"__parent__\", eval))</></>; (p={}, (p.z = (yield prop.constructor setter= eval))())) {continue L;const prototype = @foo, prototype = #1#; const __parent__; }");
tryItOut("if(<x><y/></x> , false--.__defineSetter__(\"__count__\", 'haha'.split)) prop else  if ((__count__.watch(\"__iterator__\", gc))) {if(@foo) { if ((prototype = <x/>)) {__iterator__; } else {throw constructor; }} } else return @foo;");
tryItOut("const  \"\" , prop;{}");
tryItOut("if((new (<><x><y/></x></>)(true, 1e+81))) {throw <x><y/></x>; } else __parent__ = prop;");
tryItOut("if((<x><y/></x>.valueOf(\"number\"))) var __count__, __proto__; else  if (__noSuchMethod__) gc()");
tryItOut("__noSuchMethod__ = constructor;");
