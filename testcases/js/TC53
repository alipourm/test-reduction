
tryItOut("( /x/ );\nprototype = window, prototype;\n");
tryItOut("/*for..in*/L:for(let __parent__ in ((/a/gi)(-0)))gc()");
tryItOut("switch(({ __proto__: constructor }) = this.__defineGetter__(\"__count__\", window)) { default: break; case (this in null): L: \n{export *;var constructor; }break; case eval(\"prototype = function::__parent__\", \n<><x><y/></x></>): case 4: continue ;break; case (this.zzz.zzz): break; (null);break ;break;  }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = new Number() in <x/>) {var __iterator__ = <y><z/></y>, __noSuchMethod__ = __proto__;continue L; }");
tryItOut("{}");
tryItOut("for(let y in [5,6,7,8]) with({}) { for(let y in []); } ");
tryItOut("while(([ /x/g ]) && 0)/*for..in*/for(__parent__ in ((Math.sin)(<x/>)))yield;");
tryItOut("/*infloop*/L:for(__iterator__ = ({__iterator__ getter: gc, prop: (__parent__ = #1=[#1#]) }); (<><x><y/></x></>.__lookupSetter__(\"__iterator__\").hasOwnProperty(\"__proto__\")); (prop.__count__ = window.isPrototypeOf(*::*))) {export *;/*infloop*/do {return;return; } while((return false)); }");
tryItOut("/*for..in*/for(const constructor in (\f([1,2,3,4].map)((__iterator__.prototype setter= (1 for (x in []))))))break ;");
tryItOut("if(0x99) let __iterator__ = <x><y/></x>; else  if (033) {{}; } else <x><y/></x>");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in @foo) {}gc() } while(false);");
tryItOut("{/*for..in*/L:for(__parent__ in *) { }if((#1#)(this)) {throw <x><y/></x>;; } else {export *; } }");
tryItOut("if(undefined) (({a2:z2})); else ( /x/g );");
tryItOut("if( /* Comment */(*++)) (#3={a:#3#}); else {yield; }");
tryItOut("while((this.zzz.zzz) && 0){/*infloop*/while(false +  '' ){throw this; }yield; }");
tryItOut("/*infloop*/do (true); while(((([[]] for each (prop in <x><y/></x>))) !== ((<y><z/></y>)(prop))).yoyo(__noSuchMethod__ = window));");
tryItOut("let(__noSuchMethod__, __noSuchMethod__) { for(let y in []);");
tryItOut("let(__noSuchMethod__, constructor) { @foo;");
tryItOut("");
tryItOut("do {export *; } while(((new function ()1e4().\n__defineGetter__(\"__parent__\", Function) for each (constructor in #1#))) && 0);");
tryItOut("/*infloop*/for(({ __iterator__: ({ __proto__:  }), function::each: prototype }) = ([11,12,13,14].map);  /x/ .__count__ = this; (constructor = prop.prop getter= function  __noSuchMethod__ (constructor) { yield ~<><x><y/></x></> }  .@ (this.__defineSetter__(\"prop\", function  __count__ (prop, __parent__) { yield #1=[#1#] } ).__iterator__ = new RangeError(eval(\"return <y><z/></y>;\", 3) &= (void  \"\" ))))) {switch(constructor = (__proto__ = __iterator__)) { default: switch((__count__+=this)) { default: return <x/>;break;  } }export *; }");
tryItOut("{}");
tryItOut("L:with([let (prop, prototype) this << <x/> || ({})].throw((++prototype))){M:if(null) { if ((*::* | prototype)) ;} else return; }");
tryItOut("if((prototype)) {; }");
tryItOut("{M:if(this.__defineSetter__(\"__iterator__\", (new Function(\"function(q) { return q; }\")))) {const __proto__; } else  if ((eval(\"switch(__parent__) { {let __proto__ = <x><y/></x>;<><x><y/></x></>; } }\", eval(\"(this .. [[1]])\", ( /* Comment */[1]))))) let __count__ = false; }");
tryItOut("if(#2=[__proto__]) { if (prop|=[({a1:1}) >>> __parent__ = <x><y/></x>].sort(function () { \freturn * } ).__lookupSetter__(\"__noSuchMethod__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(var setter in null) yield;} else with({prop: ()})gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(x::constructor in __parent__ = ; >> <x><y/></x> ^= (this.__defineSetter__(\"constructor\", true))) {for(let y in []); }");
tryItOut("([]); const __noSuchMethod__;");
tryItOut("if((<><x><y/></x></>.__defineGetter__(\"__proto__\", -1) * (function ([y]) { })())( /* Comment */<x/>, new [1,2,3,4].slice(__proto__))) {__iterator__ }");
tryItOut("let (prototype) { {{}/*infloop*/L:for(let prototype; true; <><x><y/></x></>) ; } }");
tryItOut("M:do  while(([, ({ __count__: __proto__, __parent__: prop })] = (<x><y/></x>.unwatch(\"__noSuchMethod__\"))) && 0);");
tryItOut("while((<x/>()) && 0)yield;");
tryItOut("L:with({constructor: ( /* Comment */this && window)})yield (<x><y/>)x>;\n0.1;\n\n({ __iterator__: __proto__, setter: __count__ });");
tryItOut("/*for..in*/for([[1]] in  /x/g ) yield ({a1:1});");
tryItOut("if(this.constructor) delete = prototype;");
tryItOut("/*infloop*/L:do {const __noSuchMethod__ = 3/0, prop = window;\n<x><y/></x>;\nreturn  \"\" ; } while(\n__noSuchMethod__)\nreturn @foo; const __count__;");
tryItOut("let (prop = ({__parent__: (0x99)() }), prototype = ( /x/ )()) { if(null) prototype; else  if (this.isPrototypeOf([z1])) /*infloop*/for(const prop = ! '' ; ((arguments)(this)); (undefined >>> __count__))  { return this }  else {yield <x><y/></x>; } }");
tryItOut("if(__iterator__.prop--) \t{{}; } else  if ([(<x/>.__noSuchMethod__)].map(@foo)) {<><x><y/></x></>; } else {with({prop: <><bbb xmlns=\"(__noSuchMethod__.constructor)\"><ccc:ddd></ccc:ddd></bbb></>})var __proto__ = <y><z/></y>; }");
tryItOut("if(prop) function(y) { yield y; gc; yield y; } else  if (0.1) let prototype = this, __noSuchMethod__; else {(*);yield 0/0; }");
tryItOut("yield;\n({}).__lookupGetter__\n");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("L: {}\n");
tryItOut("/*infloop*/for(__count__;  /x/  *= ~1e-81; ([11,12,13,14].map.throw((this.*)))) {export *;\r }");
tryItOut("if(@foo.prop) { if ((window.@foo)) { }} else return [1];");
tryItOut("throw prop;");
tryItOut("{/*for..in*/for(__parent__ in ((new Function)(<y><z/></y>)))yield window; }");
tryItOut("/*for..in*/L:for(var \t '' .__noSuchMethod__ in [[1]]) gc()");
tryItOut("L:if(#0=[window]) continue ;");
tryItOut("throw __count__;");
tryItOut("throw -1;\n;\n");
tryItOut("if(__proto__) {return; }");
tryItOut("export __noSuchMethod__");
tryItOut("/*for..in*/M:for(__proto__ = __noSuchMethod__.constructor = (*.valueOf(\"number\")) in ((__iterator__) ^ #0=1.2e3.isPrototypeOf(((yield false))))) throw window;");
tryItOut("if(__count__) { if (prototype.throw(prototype) || 0x99.__noSuchMethod__) {gc() }} else return constructor = *::*;");
tryItOut("/*infloop*/for((yield true); ({__proto__: 3, __iterator__: @foo }); <y><z/></y>.*) {{} }");
tryItOut("/*for..in*/M:for(var prototype in eval(\"yield;\", ({ __noSuchMethod__: __noSuchMethod__ }) = ({ get __noSuchMethod__ __parent__ (__noSuchMethod__, __count__) { return <x/> }  }))) /*infloop*/do  while(__parent__+=[,,z1].isPrototypeOf((__iterator__.(4.))));");
tryItOut("with({__parent__: (__parent__.@foo)})export __proto__;/*infloop*/do {return [z1]; } while(true);");
tryItOut("yield this.__defineSetter__(\"__parent__\", null);");
tryItOut("L:if(((this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) += <><{__proto__}></{__proto__}></>)--) { if (((<><x><y/></x></>.__iterator__).prototype)) {gc()\ngc() }} else /*for..in*/for(__proto__.constructor in ((function(q) { return q; })(undefined ? __proto__ : undefined))){; }");
tryItOut("L:if(\neval(\"({})\", <><x><y/></x></>)) export __noSuchMethod__; else ");
tryItOut("/*infloop*/for(const [prototype, []] = __count__; ([true]); (--function::prototype |= (p={}, (p.z = <><x><y/></x></>)()))) ");
tryItOut("L:if(prototype) \t{yield;export prop; } else  if (__iterator__.__noSuchMethod__ setter= 'haha'.split >>= ([*].filter(<y><z/></y>))) let constructor; else {export *; }");
tryItOut("Math.sinreturn;");
tryItOut("/*infloop*/for((yield ({}))['__iterator__']; (__iterator__: ((*::*)[__parent__]))++; (<x><y/></x>.(<><x><y/></x></>))) prototype");
tryItOut("{{/*for..in*/for(var __parent__ in {}) return; } }");
tryItOut("if((*::* |= @foo)) { if (__count__ = __noSuchMethod__) {throw false;let constructor; }} else {.2; }");
tryItOut("/*infloop*/for(({ __noSuchMethod__: ({ __parent__: [prototype, , ({ prop: __noSuchMethod__, prop: __iterator__ }), [, [__proto__, __parent__, ], , , prop], ({ constructor: ({ constructor: __parent__ }), \n__count__: [prototype, __parent__, __count__] })], function::__proto__: __proto__ }), __count__: <\tx><y/></x>.__noSuchMethod__ }) = (eval(\"<x/>.hasOwnProperty(\\\"prototype\\\")\", Boolean())); prototype(*::*).prototype getter= (<y><z/></y>).__defineSetter__; (@foo.unwatch(\"__iterator__\"))) {while((export function::prop) && 0){let __iterator__;export *; } }");
tryItOut("/*infloop*/while(yield this.__defineSetter__(\"__parent__\", function  constructor (__proto__)true))gc()");
tryItOut("return;yield undefined;");
tryItOut("for(let y in [5,6,7,8]) with({}) return;");
tryItOut("return;");
tryItOut("if(__count__) { if (<x><y/></x>) return <x/>; else prototype, __parent__}");
tryItOut("while((eval(\"throw window;\", new (function (return @foo;) { yield  /x/g  } )( '' ))) && 0)\f{constructor = undefined, __parent__; }");
tryItOut("if((<><x><y/></x></> if (*))) {return this === window; } else  if ((let ({ __count__: prototype }))__defineSetter__(\"prototype\", ({}).hasOwnProperty)) {\tif(this.zzz.zzz) { if ((p={}, (p.z = null)())) {{} }} else {return  \"\" ; }/*infloop*/do {yield; } while( \"\" ); } else {;M:if(prop = <x><y/></x>)  }");
tryItOut("try { export __parent__; } finally { throw StopIteration; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in [,,]) {export __noSuchMethod__; }");
tryItOut("if(yyy) { if (({ __iterator__: prop, prototype: [] }) =  /x/ ) {/*for..in*/M:for(var (__parent__) in <x><y/></x>) {{}export *; }const __count__ = window;//h\n<x><y/></x>gc() }} else /*infloop*/M:while((constructor = <y><z/></y>) !== (<x><y/></x>.watch(\"__parent__\", <x><y/></x>)))constructor");
tryItOut("let (__noSuchMethod__, Math.sin) { /*for..in*//* nogeckoex bug 349964 */ for  each(<x/>.unwatch(\"__proto__\")['__proto__'] in false) {continue ;return; } }");
tryItOut("(0x99);\nexport constructor;\n");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((Function)(1e4)))( \"\" );");
tryItOut("{}");
tryItOut("with({__count__: (<><x><y/></x>yyy</>.(<><x><y/></x></>.__proto__))})throw this;");
tryItOut("switch((<{prototype\t}><!--yy--></{prototype}>.(prototype.__parent__ = ((<y><z/></y>).__defineSetter__)(3/0 :: *::*)))) { default: case 7: {} }");
tryItOut("for(let y in [5,6,7,8]) yield \ntrue.watch(\"function::__count__\", eval);");
tryItOut("L: {continue M;return; }");
tryItOut("return (-true)\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in undefined) {__noSuchMethod__ = <><x><y/></x></>, prop = this; }/*infloop*/for(let __proto__ = <><x><y/></x></>; window;  '' \f) {var prototype = <><x><y/></x></>;yield <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (null)(typeof  \"\" ) in eval(\"{}\", false)) /*for..in*/M:for(__count__ in (((-0))( \"\" )))return;");
tryItOut("\n");
tryItOut("break L;\n{}\n");
tryItOut("const constructor = arguments, __iterator__ = <y><z/></y>;");
tryItOut("L:while(((eval(\"[11,12,13,14].filter\", <x/>))) && 0)yield;");
tryItOut("throw getter;");
tryItOut("yield window;");
tryItOut("break ;");
tryItOut("/*infloop*/for(var __proto__ = prop getter:  /x/ ; <y><z/></y>; true) const prop = -3/0;\nwith(arguments){return; }\n");
tryItOut("{{  return 1e+81;return; /x/g  }yield; }");
tryItOut("export *\n");
tryItOut("yield;");
tryItOut("/*for..in*/for(var [, , prototype, , ] = (Number(<><x><y/></x></>, <y><z/></y>)) in [,]) { }");
tryItOut("if((null--)) {let prop = <x><y/></x>, __iterator__ = [1];export *; } else  if (prop.__lookupGetter__(\"__proto__\").yoyo(*::*.__lookupGetter__(\"__noSuchMethod__\"))) __iterator__ else return <y><z/></y>;");
tryItOut("if((this)[<>{}</>]) { if ((@foo.watch(\"__parent__\", (new Function(\"__parent__;\"))))) {<x><y/></x>const prop, __proto__; }} else {{}const prototype = function(id) { return id }, prototype; }");
tryItOut("/*for..in*/for(this['__noSuchMethod__'] in -1) {{} }");
tryItOut("let (constructor = ((#1#).call(-3/0, [[1]], window)), __count__ = __count__;) { export *; }");
tryItOut("__noSuchMethod__");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in -<><x><y/></x></> + ({ set window(prototype, __parent__) { yield @foo } , <x/> setter: [1,2,3,4].slice })) {(this); }");
tryItOut("L:do /*infloop*/for(const __proto__ = <x><y/></x>;  /x/ ;  '' ) export *; while((constructor|=*::*.__iterator__) && 0);");
tryItOut("if([4..constructor = (-0)]) { if (((prototype = prop).isPrototypeOf(([[1]].*)))) {yield undefined; } else if(window) {;yield; } else  if (1.3) {prototype }\nthrow <x><y/></x>;}");
tryItOut("/*for..in*/for(this['prototype'] in new Number(try { return; } catch(__count__) { for(let y in [5,6,7,8]) __parent__ = [z1]; } finally { prop = prop; } )) break L;");
tryItOut("__parent__ = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype.__proto__ in __count__) {yield 1e+81; }");
tryItOut("continue ;");
tryItOut("if(\n([11,12,13,14].some)) {L:do ; while((([1,2,3,4].slice).call(<><x\n><y/></x></>, <><x><y/></x></>, <y><z/></y>)) && 0);do {} while(([,,z1]) && 0); } else  if (__iterator__ =  \"\" ) {{return __noSuchMethod__;; }(prop ? * : <y><z/></y>); } else with(constructor)let prototype, prop =  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in false) with({__proto__: <x/>}){ }");
tryItOut("/*infloop*/M:for(const [({ __parent__: ({ __noSuchMethod__: __count__, __proto__: ({ prototype: ({ __proto__: constructor }), __proto__: ({ getter: ({ __proto__: ({ __iterator__: __noSuchMethod__ }) }) }) }) }), __count__: [({ __proto__: ({ __parent__: __iterator__.\fconstructor, __parent__: ({ prototype: ({ __noSuchMethod__: prop, __iterator__: prototype }), prop: __proto__ }) }), prop: prop })] })/*\n*/] = <xxx>{__count__}</xxx>(eval(\"((yield __count__))\", <y><z/></y> = <x/>), true && ({prop: *.__defineGetter__(\"constructor\", function(q) { return q; })})); Iterator(-(prototype.constructor), (eval(\"/*for..in*/for(prototype = null in @foo) gc()\", *.propertyIsEnumerable(\"__noSuchMethod__\")))function  prototype (__noSuchMethod__) { <y><z/></y> } ); ( /x/g  &= 3) ==  /* Comment */false) return window.@foo;");
tryItOut("while(( /x/ .watch(\"__count__\", Math.pow)) && 0);");
tryItOut("<{__count__}><!--yy--></{__count__}>");
tryItOut("{(<x/>) }");
tryItOut("if(new Math.pow()) { if (<><bbb xmlns=\"(function::prototype.((__parent__, constructor.( \"\" ))\r))\">yyy</bbb></>) {gc()/*infloop*/for(0; <><x><y/></x></>;  '' ) yield; }} else ");
tryItOut("const __noSuchMethod__, __parent__;");
tryItOut("if(<><x><y/></x></> > __proto__) 1e-81 else  if ((<x/>.propertyIsEnumerable(\"__proto__\"))) yield <x><y/></x>;/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in ) {export *;(1e-81).call }");
tryItOut("if(<x><y/></x> <<=  /x/ ) { if (__count__ & [[]].__defineGetter__(\"constructor\", /a/gi)) {/*infloop*/for(const ({ __noSuchMethod__: [__noSuchMethod__], constructor: prototype }) = (yield *); *; ( /* Comment */undefined ? 0x99 : 0)) continue ;(<y><z/></y>); }} else {M:if(1e-81) {;; } else  if ([[1]]) ; else return <x><y/></x>;const prop = 0.1, prototype; }");
tryItOut("/*infloop*/for(((prototype = undefined)([\tcontinue L], gc()));  /* Comment */(eval(\"/*for..in*/L:for(var 3.141592653589793.* in __count__) {var let __parent__ = (, const __proto__ = <x><y/></x>, __count__\\n;; = <><x><y/></x></>, __count__; }\", constructor.__iterator__ = (undefined = *::*))); new (arguments)[this]) {yield prop = __parent__;gc() }");
tryItOut("/*infloop*/M:for(( /* Comment */(try { const __count__ = *, prototype = <><x><y/></x>\f</>; } catch(__parent__ if (function(){;})()) { (__count__); } (true,  \"\" ))); __iterator__+=false; (__iterator__ = ([* if (<y><z/></y>)]) >>= yield)) /*for..in*/M:for(let constructor in (([(constructor.hasOwnProperty(\"prototype\"))])(new new Function( /x/ )))){yield  /x/g ;export prototype; }");
tryItOut("with({__iterator__: (let (prop = undefined) (window.__defineGetter__(\"prop\", function(y) { yield y; yield;; yield y; })))}){let __proto__, __parent__; }");
tryItOut("/*for..in*/for(const __count__ in __noSuchMethod__) {while((<x><y/></x>) && 0){return 1e4; } }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/do export *; while( \"\" .__iterator__.@*);");
tryItOut("switch(__proto__) { case undefined: case 8: break; return;gc()break; break;  }");
tryItOut("/*infloop*/while((__proto__ >> <y><z/></y>)){__parent__ }");
tryItOut("const __noSuchMethod__, throw StopIteration;;");
tryItOut("/*infloop*/for((<{constructor}>yyy</{constructor}>.hasOwnProperty\t(\"__parent__\")); __iterator__; this.__defineSetter__(\"prop\", [1,2,3,4].map)) let __noSuchMethod__, __iterator__ =  \"\" ");
tryItOut("if(((({prop: let (__noSuchMethod__ = this) undefined })))(undefined, 4.)) {export __count__;let (__proto__, prototype) { return; } }");
tryItOut("switch([(({ __parent__: prop }) = ({ prop: [z1,,], __noSuchMethod__: ({ prototype: [__parent__, ] }) }))]) { case 2: break;  }");
tryItOut("if(@foo) yield window;");
tryItOut("yield true\nexport *;");
tryItOut("{var __count__, __proto__ = prop\n }");
tryItOut("/*infloop*/for(__count__; constructor.__count__ getter= prop = 033 >= window; ((uneval(true)))) switch(__parent__ in 5.0000000000000000000000) { case <y><z/></y>: case 3: case 3:  }\n");
tryItOut("{}");
tryItOut("/a/gi");
tryItOut("/*infloop*/for(try { try { gc() } finally { __count__; }  } finally { <x><y/></x> } ; ([@foo]); <x><y/></x> <= <y><z/></y>) return undefined;");
tryItOut("with(@foo)(__proto__);");
tryItOut("/*for..in*/for(let __count__ = __noSuchMethod__.throw(({prop: __iterator__(*) = [function(id) { return id }].filter(/a/gi), __proto__: eval(\" \\\"\\\" --\", (uneval(window))) })) in -0 for (prototype.__iterator__ in  /x/g ) for (__proto__ in @foo)) if((__iterator__ = x::__count__)) {export *; } else  if (3/0)  else ;");
tryItOut("__iterator__ = prop;");
tryItOut("return;throw true;");
tryItOut("with({}) return ];");
tryItOut("if((p={}, (p.z = new ((@foo).apply)())())) { if ([(new (-0)(*)) for each (prop in [z1])]) {gc()with([1]){yield <x><y/></x><!--yy-->; }const __proto__ = window, prop; }} else yield *;");
tryItOut("/*infloop*/for(let ({ __count__: __parent__, __iterator__: prototype }) = __count__.__parent__ = [,,]; ; __noSuchMethod__ = [[1]]) {prop = window;return [1,,]; }");
tryItOut("L:if(<><x><y/></x></> ?  '' [prop: window] : prototype = prop) {if(*) (__count__); } else {var prototype; }");
tryItOut("/*infloop*/L:for(const ({ prototype: ({ __proto__: []\r }), prototype: __noSuchMethod__ }) = (p={}, (p.z = prop)()); <><>new (<x/>)()</></>;  /* Comment */<x/>) {yield <{prototype}> </{prototype}>; }");
tryItOut("L:if(#0=[(*::*.__defineGetter__(\"constructor\", 'haha'.split))].__parent__) var __count__ =  /x/ , __iterator__ =  \"\" \n");
tryItOut("if([(4..eval(__iterator__)).__count__ = (++false)]) { if ((__iterator__)) yield;} else yield;");
tryItOut("( /x/ );(this).__defineSetter__");
tryItOut("M:if(\n \"\" ) {yield;break ; } else {\nbreak M;([]); }");
tryItOut("with({__iterator__: (null).__defineSetter__})while((<x/>) && 0)yield ({a2:z2});");
tryItOut("prototype");
tryItOut("/*for..in*/for(<ccc:ddd>yyy</ccc:ddd>['constructor'] in Object()) {/*infloop*/L:for(<><x><y/></x></>;  /x/ ; true) {__iterator__ =  \"\"  }/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in (\n({prototype: this,  set __proto__(prototype) { <><x><y/></x></>; } \t }))) M:if(void []) prototype = <x><y/></x>; }");
tryItOut("export *\nexport __parent__;");
tryItOut("/*infloop*/for(let __parent__; [,,]; <><x><y/></x></>) var __parent__; const prototype;");
tryItOut("with({__count__: <y><z/></y>})return this.__defineSetter__(\"prop\", @foo).__proto__ = ++true;");
tryItOut("if((false .. *::*)) { if ((prototype.prototype)) return;} else {yield;[1,2,3,4].slice }");
tryItOut("/*for..in*/for(const __proto__ in ((new Function)((prototype.prototype))))gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(/a/gi.__noSuchMethod__ in this.__defineSetter__(\"__iterator__\", 'haha'.split)) do {export *; } while(((new Function).call(0, )) && 0);return;");
tryItOut("if(__count__) { if ((eval(\"<><x><y/></x></>\", 1e-81)) >>= (3/0.__defineGetter__(\"__parent__\", 'haha'.split))) let __proto__;} else gc()");
tryItOut("if(prototype.__noSuchMethod__ setter= (([1,2,3,4].map).apply).apply) { if ( \"\" .valueOf(\"number\")) {/*infloop*/for(Error(true, *); (*.__lookupSetter__(\"__parent__\")); <><x><y/></x></> if (@foo)) {L: {export *;__noSuchMethod__ }\n(new Function(\"throw @foo;\")) } }} else {/*infloop*/do {(window); } while(new ('haha'.split)((new Function).call(window, <x><y/></x>), 1e81)); }");
tryItOut("if(#3={a:#3#}) {;gc() } else  if ((null)[null]) {( \"\" ); }\n");
tryItOut("if(this.zzz.zzz) return function::__iterator__; else  if (prop = ((new (<><x><y/></x></>)(false, 0)).__defineGetter__(\"prop\", function(y) { yield y; break M;; yield y; }))) { } else {}");
tryItOut("");
tryItOut("return (<x><y/></x>.eval(<x><y/></x>))(false !== *) @ (null.throw(<x><y/></x>));");
tryItOut("if(({__noSuchMethod__: {({});1e81; }}))  else {if(<><x><y/></x></>) { if (1e+81) var __iterator__ = <x/>;} else {gc()try { yield  '' ; } catch(__iterator__) { (*); } finally { prototype, __proto__; }  }yield; }");
tryItOut("/*for..in*/for([prop, __proto__] = 3.141592653589793 /= prototype in *) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in ((__count__) = (prototype.__noSuchMethod__-=undefined.constructor))) {yield (__parent__ = __noSuchMethod__); }");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/<!--yy-->");
tryItOut("/*infloop*/for(eval(\"*::*.isPrototypeOf( \\\"\\\" ).__lookupGetter__(\\\"__noSuchMethod__\\\")\", constructor.__iterator__ setter= /a/gi); (true.isPrototypeOf()) += [z1,,]; <ccc:ddd><x><y/></x></ccc:ddd>) {__iterator__ =  \"\" ;export prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in [[1]]) throw  /x/ ;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __noSuchMethod__] = (this -= eval(\"(function ([y]) { })()\", <x/>)) in  /x/g ) {/*for..in*/for(__proto__ in this) {return true;throw <><x><y/></x></>; } }L:if([[1]]) { if (null) {yield <x><y/></x>;yield <y><z/></y>; } else __parent__}");
tryItOut("{let (__proto__, __noSuchMethod__ = <x><y/></x>) { export __parent__; }/*for..in*/for(prop in ((({}).hasOwnProperty)(<x><y/></x>))){break M;return; } }");
tryItOut(";");
tryItOut("if(<x><y/></x>) { if (null) this; else return;}");
tryItOut("__proto__ = __count__;");
tryItOut("/*for..in*/for(const [__proto__, __parent__] = (({__proto__: undefined, __iterator__: __count__ }))(<><zzz>(function::constructor: __proto__)[<x/>]</zzz></>, <><x><y/></x></> .@*:: <x/> === ([1.3 for each (__iterator__ in <y><z/></y>)])) in case constructor = <><x><y/></x></>: /*infloop*/for(null; <x/>; ({a2:z2})) var __iterator__;) {let __iterator__ = #1=[#1#];yield; }");
tryItOut("{}\nreturn;");
tryItOut("/*for..in*/L:for(let __iterator__.__noSuchMethod__ in (((1 for (x in [])))((!*::*)))){return *; }");
tryItOut("M:if([1,,]) {const __parent__;;throw <x/>; }");
tryItOut("/*infloop*/for(const  { yield <x><y/></x> }  .@*:: <x/>; (__parent__ = 0.1 if (#1#)); ('fafafa'.replace(/a/g, gc))) {<x/>;{} }");
tryItOut("if(<y><z/></y>) let constructor, prototype; else  if (<>\f<x><y/></x></>) Function else {export *; }");
tryItOut("/*infloop*/while(<>\t<x><y/></x></>.__parent__){yield @foo;throw window; }");
tryItOut("/*infloop*/for(const prop; --prop; __noSuchMethod__.prop) throw -3/0");
tryItOut("let (__iterator__) { gc()\nyield <x/>; }");
tryItOut("/*infloop*/while(function(id) { return id }.__iterator__){;gc() }");
tryItOut("do L:if(void  \"\" ) export __count__; else  if (constructor = constructor) throw 0.1; else __noSuchMethod__, prototype; while((<y><z/></y> | (function ([y]) { })().yoyo(<y><z/></y>)) && 0); const __parent__;");
tryItOut("M:if(([] = true)) {return __count__; } else  if ([<xxx>{__iterator__}</xxx>.(Date())].filter(([[[1]]].map(eval)))) {L: {break L;return; } }");
tryItOut("/*for..in*/L:for(prop = <x><y/></x> || 1.2e3 in 0.1.__defineGetter__(\"__iterator__\", (new Function(\"yield true;\"))) if (constructor)) {M:if(false *= *::*) {} else {export *; } }");
tryItOut("let (prop, constructor = (__proto__.prototype getter= function(y) { yield y; export *;; yield y; })) { /*for..in*/for(let __noSuchMethod__ =  \"\"  in true) var __count__, __noSuchMethod__ =  '' ; }");
tryItOut("/*infloop*/for(var __parent__; <x/>; undefined / __noSuchMethod__) {return; }");
tryItOut("/*infloop*/do {{}M:while((eval(\"gc\", window)) && 0){gc()return <><x><y/></x></>; } } while(\t(yield ((yield this))));");
tryItOut("0; const __proto__;");
tryItOut("/*for..in*/for(let __parent__ =  /x/g  in @foo) yield <><x><y/></x></>;");
tryItOut("throw {}\n");
