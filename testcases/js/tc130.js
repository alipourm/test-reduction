tryItOut("if((new Iterator(<x><y/></x>, undefined))) { if (<x><y/></x>.(__count__)) function (try { function  prop () { yield <><x><y/></x></> }  } catch(__iterator__ if <x/>) { yield; } finally { yield <><x><y/></x></>;\n } ) { return; }  else {gc() }}");
tryItOut("continue M;");
tryItOut("throw __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("{{} }");
tryItOut("if(.(((p={}, (p.z = prop = ({a2:z2}))())))) /*for..in*/for(var constructor in (((gc).call)(false))){ } else  if (-3/0) {return; }");
tryItOut("while((*::*) && 0){const __proto__;\t }");
tryItOut("switch(#1=[#1#]) { default: break; break; (null);Math.sincase function ([y]) { }: break; case *: case <x><y/></x>: ;case 8: ;break; case <><x><y/></x></>: case <><x><y/></x></>: case 1: *::*;break;  }");
tryItOut(";const __count__ = undefined;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in arguments) {return this;; }");
tryItOut("with({__parent__: (Math.pow)})yield; const __noSuchMethod__;");
tryItOut("for(let y in [5,6,7,8]) let case <x/>: break; ;\n/*for..in*//* nogeckoex bug 349964 */[1,2,3,4].map\n");
tryItOut("export __parent__");
tryItOut("let constructor = ({});");
tryItOut("if(__noSuchMethod__ = {}) {export  <ccc:ddd><!--yy--></ccc:ddd>*;gc() } else {/*infloop*/for(this; <x><y/></x>;  /x/ ) {;return; } }");
tryItOut("let (prototype) { let (__parent__ = Iterator(0, <x/>), prop) { ; } }\n");
tryItOut("for(let y in []);");
tryItOut("with(((eval)(__count__ = this)));");
tryItOut("for(let y in [])\nreturn <x/>;");
tryItOut("for(let y in [5,6,7,8]) return (<x/>.isPrototypeOf(0/0));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__, __proto__ in  '' ) gc()");
tryItOut("let(__iterator__) ((function(){{}})());");
tryItOut("while(((({ get constructor(prop) { continue L; } , constructor: prop.__count__ getter=  ''  })).throw(([({ __iterator__: __iterator__, prototype: __iterator__ }), ({ prototype: prop })] = __iterator__))) && 0)//h\nexport *;");
tryItOut("'haha'.split");
tryItOut("while((__proto__ = <>\t<x><y/></x></>) && 0)<x><y/></x>");
tryItOut("if(<x/>,  /x/ ) { if (<x/>) {({});Math.pow }} else <x/>\n");
tryItOut("/*infloop*/M:while(1.3)let __parent__ = <x/>, __noSuchMethod__;");
tryItOut("if(/a/gi((<x><y/></x> .@ <><x><y/></x></>).call(__noSuchMethod__ = window.false, (gc()), null--), <x/>.__defineGetter__(\"prop\", +3.141592653589793))) for(let y in [5,6,7,8]) let constructor = [z1,,], __iterator__;");
tryItOut("yield\n");
tryItOut("/*infloop*/for(({ __noSuchMethod__: __count__ }) = (new RangeError(<><x><y/></x></> <=  '' )); this.__defineGetter__(\"__noSuchMethod__\", (<x/>).__defineSetter__)(constructor = prototype, <x><y/></x>).hasOwnProperty(\"__parent__\"); [15,16,17,18].filter(function  __proto__ (__iterator__, constructor) { return #1=[#1#] } , <x><y/></x>).__proto__) *;");
tryItOut("let(__count__) ((function(){for(let y in [5,6,7,8]) prop = __noSuchMethod__;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in (<x/>)[this] >>> false.__iterator__) {yield 0;break ; }");
tryItOut("{/*infloop*/while(<></>){{}let __proto__, constructor = <x><y/></x>; } }");
tryItOut("L: M:if(prototype) { if (<><x><y/></x></>) {export *;continue ; }} else {var __count__, __count__ = prototype; }");
tryItOut("/*infloop*/for(let [] = __parent__; ({ __iterator__: __proto__ }) = (__iterator__ = <x/>); [(\n1e-81)].map(Math.pow)) {L:with(true)let constructor = <><x><y/></x></>, __parent__; }");
tryItOut("with((\nnew (eval)())){; }");
tryItOut("L:if(<x><y/></x>) {throw __parent__; } else  if (prototype) {;export __count__; } else yield <><x><y/></x></>;");
tryItOut("if(__count__ = 1.3 &= ([z1].__lookupGetter__(\"constructor\"))) {__count__yield window; } else  if ([<x><y/></x> for (__count__ in prototype)]) throw true; else {export *; } const prop;");
tryItOut("L: {export *;throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const [__proto__, __parent__] = (__parent__ = prototype = prop\f.__count__ getter= [[]]) in __noSuchMethod__ - this) {<x/>; }");
tryItOut("{yield window; }");
tryItOut("gc()");
tryItOut("/*for..in*/for([__count__, constructor] = (<x/> for each (constructor in <x><y/></x>)) % <x/> |= [1] in ( \"\" .__proto__ = @foo)) /*infloop*/do {yield; } while(new <bbb xmlns=\"({a2:z2})\"><ccc:ddd>function::__parent__</ccc:ddd></bbb>());");
tryItOut("M:while((function ([y]) { } | __iterator__) && 0){return; }");
tryItOut("/*for..in*/M:for(const constructor in ((((new Function).call(({ __iterator__: ({ constructor: ({ __count__: prop }) }), __iterator__: ({ __proto__: constructor }) }), (((<x><y/></x>).apply).call(true, this, prop)))).watch)\t(null))\f){/*infloop*/M:for(const ({ __iterator__: ({ constructor: constructor }) }) = (constructor = #1=[#1#]); __noSuchMethod__ = new (<><x><y/constructor = <x><y/></x> ><(//x></>.__defineSetter__(\"__parent__\", function  __count__ (__parent__, __parent__) { export __noSuchMethod__; } ))(__proto__ = <y><z/></y>, <><x><y/></x></>); (#0=<x><y/></x>.(<x><y/></x>))) {L: {prop = *; }yield true; } }");
tryItOut("/*infloop*/for(let constructor; this.zzz.zzz; __parent__-=this.throw((function::prop.__parent__ \fsetter= ))) {return; }");
tryItOut("M:switch((__iterator__)) { default: function  __iterator__ () { export constructor; } case 4: throw @foo; }");
tryItOut("/*infloop*/for(const new Function = this; <><x><y/></x></>; <y><z/></y>) {const __iterator__;return; }");
tryItOut("/*infloop*/for(var constructor; [prop]; (__count__.__iterator__)) /*for..in*/L:for(prop = <y><z/></y> in [,,]) {{}throw  \"\" ; }");
tryItOut("( \"\" );");
tryItOut(" \n");
tryItOut("export __count__;");
tryItOut("(null);");
tryItOut("return [({ __parent__: constructor, prototype: [] }), [], ({ constructor: [, ], prop: prototype }), ] = let (constructor) __noSuchMethod__.__lookupGetter__(\"constructor\");");
tryItOut("while((window) && 0)break ;");
tryItOut("throw false;\nif(*) yield *;\n");
tryItOut("switch(this.zzz.zzz) { case yield __proto__ = __proto__: break; case 033: default: break;  }");
tryItOut("if(#0=String(this)) {/*for..in*/for(getter = <><x><y/></x></> in __count__)  }");
tryItOut("let (__parent__) { yield; }");
tryItOut("throw StopIteration;");
tryItOut("if(__noSuchMethod__++) { if (((p={}, (p.z = <x><y/></x>)()))) { }} else export constructor;");
tryItOut("yield [z1];");
tryItOut("if(this) ; else {(1 for (x in []))yield *::*; }");
tryItOut("@foo;");
tryItOut("L:\tswitch((__count__\t.__iterator__ = (prop)[1e+81])) { default: throw <x><y/></x>;break; case prop.(#2=[ '' ]): case (({}).__lookupGetter__)(<x><y/></x>, this): /*for..in*/for(const  /*infloop*/while  in <><x><y/></x></>) {break ; }break;  }");
tryItOut("let (__noSuchMethod__, __proto__) { try { export *; } finally { yield; }  }");
tryItOut("if(__noSuchMethod__ = __parent__.constructor setter= <x><y/></x>) let constructor, __iterator__; else  if (((<x><y/></x> >> prop).valueOf(\"number\"))) {return;continue M; } else if(<x/>) { if ([z1]) {export constructor; }} else ( \"\" );");
tryItOut("while((prototype.(@foo)) && 0)export prop;");
tryItOut("L:if((constructor ^ prototype.isPrototypeOf((<x><y/></x> == <x><y/></x>)))) let prop, __noSuchMethod__; else  if (false.__defineGetter__(\"constructor\",  /x/g )) .2; else return;");
tryItOut("if(function ([y]) { }) ; else {yield *; }");
tryItOut("do default: return window /= <y><z/></y>; const prototype\nbreak; break; case 5: break; do {} while(((<x/>.__defineSetter__(\"prototype\", [1,2,3,4].map))) && 0);break; case 2: {;(constructor); }break; with(({prototype })){export *;gc() }break;  while((((yield new (yield __proto__)(<x><y/></x> << #1=[#1#]) if ([[z1] -= __iterator__ for each (constructor in  /x/ ) for (__noSuchMethod__ in *)])))) && 0);");
tryItOut("/*for..in*/for(var constructor in (<x><y/></x>)[prototype]) if(prototype) {}");
tryItOut("return\nlet 5.0000000000000000000000 = -1;");
tryItOut(";");
tryItOut("M:if(export *) function () { yield this }  else  if ([11,12,13,14].map) let __count__; else __iterator__ = 1e+81, constructor;\t");
tryItOut("/*for..in*/for(var [prop, __count__] = ({__noSuchMethod__:  /* Comment */window}) in <x><y/></x> ?  \"\"  : <x/>) {<x/>;/*infloop*/do export *; while(*::*); }");
tryItOut("/*infloop*/for(let prototype = <y><z/></y>; true; \n<x><y/></x>) throw ({ __iterator__: __iterator__, prop: __noSuchMethod__ }) = this %= undefined in [z1,,];");
tryItOut("/*infloop*/for(prototype; (__proto__.prop); ({__iterator__: <x/> })) {return;throw 033; }");
tryItOut("L: if(#1#) { if (3.141592653589793) null;} else export *;");
tryItOut("new Function\ngc()\n");
tryItOut("__proto__: (<x/>)(<x/>) = yield ((*).__defineSetter__).call(<x><y/></x>, window)");
tryItOut("/*for..in*/for(var __count__ in ((window)([constructor.( /x/ )])))/*\n*/do export prototype; while((null) && 0);");
tryItOut("export *;");
tryItOut("M:if(this) <x/>; else  if (@foo) export __proto__; else break ;");
tryItOut("if(eval(\"<x/>\",  '' ) || Boolean(this) for each (__count__ in void <><x><y/></x></>) if (<><x><y/></x></>).hasOwnProperty(\"__parent__\")) return; else  if (++(((__proto__).__defineSetter__).call|=1e4)) __proto__ else {return;/*infloop*/M:while([1]){continue M; } }");
tryItOut("/*for..in*/\ffor(__noSuchMethod__ in ((function (__noSuchMethod__) { yield __iterator__; } )([1][false] *  /x/ ))){if(null) {([,,]); } else {gc() }; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in yield *) yield __iterator__;");
tryItOut(" '' ");
tryItOut("try { with({}) let(__iterator__ = <y><z/></y>, __parent__) { let(prop) { throw __noSuchMethod__; } finally { try { with({}) { yield __proto__%=@foo; }  } finally { let(prop) ((function(){return  /x/ ;})()); }  } ");
tryItOut("if((*.throw(<><x><y/></x></>))) {<><x><y/></x></>;yield; } else {'haha'.split }with('fafafa'.replace(/a/g, /a/gi)){export *;__noSuchMethod__ = <><x><y/></x></>, prop = <><x><y/></x></>; }");
tryItOut("L:if(prop.constructor) { if (({ __iterator__: constructor }) = *::* instanceof [z1,,]) {/*for..in*/L:for(__iterator__ = __count__.__iterator__ in (([1,2,3,4].map)([, (-0), ] = prototype = *))){} } else throw *::*;}");
tryItOut("yield false;");
tryItOut("/*for..in*/L:for([__iterator__, __parent__] = window in <x><y/></x>) (<><x><y/></x></>);");
tryItOut("L:while((<x/>) && 0){__iterator__; }");
tryItOut("do {yield;; } while((<><x><y/></x></> :: 3.141592653589793) && 0);");
tryItOut("if( /x/g ) { if () (0.1);} else ");
tryItOut("/*infloop*/while(this){L:switch(0.1.prop = <x><y/></x>) { default: case [function ([y]) { } for each (__noSuchMethod__ in this)]: /*for..in*/for(var [__noSuchMethod__, constructor] = null in 1.3) export __noSuchMethod__; } }");
tryItOut("/*infloop*/for(const typeof window = (__parent__ = [z1,,]).__parent__; __noSuchMethod__ =  /x/ .unwatch(\"prop\")\f; (new (let (__iterator__ = *::*, __iterator__ = *::*) false)().valueOf(\"number\") <= (void (-true)))) {export constructor;yield; }");
tryItOut("{while((true) && 0){window;(this); }window; }");
tryItOut("/*infloop*/M:for((this.zzz.zzz).*; <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; \f(this.__defineSetter__(\"__count__\", function(y) { yield y; break L;; yield y; })).__lookupGetter__(\"__iterator__\")) {let ([prototype, constructor, , prop]) { gc() }let function::__count__ = <x/>, constructor =  '' \n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in 3)  \r");
tryItOut("/*infloop*/while((function::__iterator__.(null).*)){return; }");
tryItOut("this");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (prop) in null) ;");
tryItOut("/*for..in*/L:for(let [constructor, prop] = __noSuchMethod__ in true) {return;{} }");
tryItOut("throw __proto__;");
tryItOut("if(*) { if (<><x><y/></x></>) {export prototype;throw <x/>; } else {return;yield; }}");
tryItOut("yield Function(false, <x><y/></x>) instanceof null.__defineSetter__(\"constructor\", Math.sin);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let prototype in <><x><y/></x></>) {[1,2,3,4].mapthrow ({a2:z2}); }");
tryItOut("while((<x/>) && 0)yield;");
tryItOut("/*infloop*/M:while((<y><z/></y> %= <y><z/></y>))return;");
tryItOut("this.zzz.zzz\n/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in *) __noSuchMethod__ = *::*, __noSuchMethod__;");
tryItOut(" { <>export *</>\nwith(undefined) get constructor __count__ ()<y><z/></y> } ");
tryItOut("M:if(@foo /=  '' ) { if ((new [[]])) export *; else {(<><x><y/></x></>);{} }}");
tryItOut("/*for..in*/for(__count__ = [new __noSuchMethod__ == constructor() for (<zzz> '' </zzz> in __count__ = <y><z/></y>) for each (__proto__ in *) if (<x><y/></x>)] in new this.__defineGetter__(\"__parent__\", [1,2,3,4].map)()) {([11,12,13,14].some)__noSuchMethod__; }");
tryItOut("/*infloop*/do yield <><x><y/></x></>; while(0);");
tryItOut("if(<x><y/></x>) export *; else {__iterator__, __iterator__ = function ([y]) { }; }");
tryItOut("let (__parent__ = (*.watch(\"prototype\", function  __iterator__ ()<><x><y/></x></>))) { false !== (null != 3.__iterator__) }");
tryItOut("if(void __parent__ + *::*) {try { this.zzz.zzz; } catch(prototype) { __noSuchMethod__ = __noSuchMethod__; } finally { return function  __noSuchMethod__ (constructor) { return #1=[#1#] } ((<x><y/></x> ? ({a1:1}) : [z1]), __parent__); }  } else  if (prototype = [15,16,17,18].\fsome('haha'.split, )) /*infloop*/do const prototype; while(__noSuchMethod__); else {argumentswith(0)yield 1e81; }");
tryItOut("/*infloop*/do {{}yield  /x/g ; } while(*);");
tryItOut("throw StopIteration;");
tryItOut("\nreturn;\n");
tryItOut("{/*infloop*/for(var constructor =  /x/g ; __count__; [z1]) ; }");
tryItOut("while((<x><y/></x>.propertyIsEnumerable(\"constructor\")) && 0){return; }");
tryItOut("return undefined\n( /x/g )\n");
tryItOut("/*infloop*/while(__count__ = this ^= new String()){export __parent__; }");
tryItOut("var __parent__ = prop");
tryItOut("/*for..in*/for(var prototype = (\t[__parent__ if (<x><y/></x>)]) in true) {return;let __noSuchMethod__ = *::*, __noSuchMethod__; }");
tryItOut("/*for..in*/for(const __proto__ = (<><x><y/></x\t></> % function(id) { return id })[(__iterator__.@*)] in ([undefined for each (__iterator__ in window)])) break ;");
tryItOut("if(null) continue ; else  if (undefined) {return window;(prototype).watch }");
tryItOut("/*infloop*/while(this.zzz.zzz){ }");
tryItOut("break ;");
tryItOut("/*for..in*/for(var __count__((yield <x><y/></x>)) in (([1,2,3,4].map)((prop.__iterator__))))break ;");
tryItOut("default: ((__parent__).watch).callcase 3: return;");
tryItOut("with({prototype: ([ /x/g ].some( \"\" )).throw((((new <x/>(false, 1e81)) if (<><x><y/></x></>))))}){{var __iterator__; }{L: throw <><x><y/></x></>; } }");
tryItOut("if( /x/g ) if(<x><y/></x>) {export *;prototype;//h\n } else  if ([,,z1]) {continue ; } else {throw null;; }");
tryItOut("with({__count__: new function () { return <x><y/></x> } ()})with( '' [<x><y/></x>]){yield @foo;throw <y><z/></y>, ({a1:1}); }");
tryItOut("/*infloop*/while(3.141592653589793){__parent__; }");
tryItOut("for(let y in [5,6,7,8]) try { let __iterator__ =  /x/ , delete = #1#; } catch(prototype) { export __iterator__; } ");
tryItOut("if(<><x><y/></x></>) { if (<x><y/></x>.__lookupSetter__(\"prop\")) __noSuchMethod__;} else {gc() }");
tryItOut("try { ; } finally { __count__, __iterator__; } ");
tryItOut("/*infloop*/for(new function  constructor (prop, __parent__) { return [1,,] } (new new Function((__noSuchMethod__.__defineGetter__(\"constructor\", (<y><z/></y>).watch)), this)); @foo(); <>prototype = __noSuchMethod__</>) {/*infloop*/do throw function ([y]) { }; while(\ntrue); }");
tryItOut("return true.yoyo(( \"\" ++ >>=  /* Comment */ /x/ ));");
tryItOut("");
tryItOut("/*for..in*/for(const [__parent__, __noSuchMethod__] = const constructor in <><x><y/></x></> + <><x><y/></x>\t</>) return (new Boolean());");
tryItOut("/*infloop*/while(([11,12,13,14].some) << -(new ([1,2,3,4].slice)(*)))return arguments;");
tryItOut("/*infloop*/L:do [1,2,3,4].slice while([11,12,13,14].map);");
tryItOut("__proto__");
tryItOut("continue \n");
tryItOut("/*infloop*/do {if(undefined) {continue ; } else  if ( '' ) [,,z1] } while(__iterator__ = <y><z/></y>);");
tryItOut("if({} , null) {{/*infloop*/while(arguments)export __proto__; }yield this; }");
tryItOut("/*for..in*/for(var __count__ in (({prop: <x/>,  set __proto__(){} }))[ /* Comment */new /a/gi(<><bbb xmlns=\"[,,z1]\"></bbb></>)]) [15,16,17,18].filter(eval, <x><y/></x>);");
tryItOut("/*infloop*/while(\f({__count__: <><x><y/></x></>, __iterator__: [,,z1] }).throw( /x/ ))yield;");
tryItOut("L:if() { if (__count__) L:switch(((@foo).apply).call(<x/>, )) { default: case (<ccc:ddd> </ccc:ddd>): case 0: {}break; case 6: break; break;  } else {if(__noSuchMethod__) yield\ncontinue M; else gc()with({}) gc() }}");
tryItOut("if(*::*) throw <x><y/></x>;");
tryItOut("if(<><x><y/></x></>()) { if (~<x><y/></x>[{let prototype = <y><z/></y>, let; }]) export __proto__;} else {return; }");
tryItOut("if(true) { if (<y><z/></y>.__lookupSetter__(\"__count__\")) throw arguments;} else {throw *; }");
tryItOut("try { throw 0/0; } catch(__proto__ if (function(){gc()})()) { return arguments; } catch(prototype) { function(y) { yield y; gc(); yield y; } } finally { break ; } ");
tryItOut("if(<y><z/></y>.__lookupGetter__(\"prop\").@*) {throw [[]];/*for..in*/M:for(__parent__ in ((new Function)((this++))))/*for..in*/for(let prototype in *::*) {yield \tthis; } } else  if (__count__.__noSuchMethod__ =  '' ) {throw *::* &= <x/>; } else const prototype, prop\nyield __proto__\n");
tryItOut("L:switch((0.1)) { default: break;  }");
tryItOut("{}");
tryItOut("if(<><x><y/></x></>) { if (this) {yield; } else {export *; }}");
tryItOut("if(yield ( /* Comment */prototype = new RangeError(1.3))) { if (__count__ ? <x><y/></x> : prop > (__count__ =  '' ) >> #1#.throw( \"\" )) /*for..in*/for(let prop = new Array(<><x><y/></x></>, <x><y/></x>) in <><x><y/></x></>) {yield *::*;const constructor = <><x><y/></x></>; }} else {let __count__ = ({a1:1}), function::__count__ = @foo; }");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = (__iterator__.constructor) in ((function () { yield <x><y/></x> } ).call)(@foo)) /*for..in*/for(const __count__ =  /x/g  in <y><z/></y>) {gc()prototype = <><x><y/></x></>; }");
tryItOut("/*for..in*/for([prototype, __parent__] = *::* in <x><y/></x>) gc()");
tryItOut("/*for..in*/M:for(const [__proto__, __noSuchMethod__] = ((eval(\"[null]\", ([0.1].some(\tfunction  __iterator__ (__proto__) { throw  \"\" ; } )))).__defineSetter__(\"__iterator__\", ( /x/  = this))) in eval(\"with(1.3){export *;export *; }\", (<y><z/></y> if (<>\r<x><y/></x></>)))) {return ( /x/ .watch(\"__iterator__\", 'haha'.split)); }");
tryItOut("{return @foo;yield; }");
tryItOut("if(new RangeError(<><x><y/></x></>, <x><y/></x>)) {\t if ((p={}, (p.z = -1)())) return;} else {yield; }");
tryItOut("gc");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((new Function)((4. &= false)))){return __noSuchMethod__; }");
tryItOut("/*infloop*/do {export *; } while(window.eval(prop).unwatch(\"prop\"));");
tryItOut("export *;");
tryItOut("/*for..in*/for(let __parent__ = (* if (<><x><y/></x></>)) in  /x/ ) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in ({a2:z2})) \fyield this;/*for..in*/for(const __parent__ = * in <><x><y/></x></>) {yield; }");
tryItOut("M:if(eval(\"this.__defineGetter__(\\\"__count__\\\", function  constructor () { return  /x/  } )\", <y><z/></y> &= 033) << ((({}).__lookupGetter__).call('fafafa'.replace(/a/g, Function).eval((new ((window).call)(0.1, <><\tx><y/></x></>))), ))) {; { {} }  } else  if (yield) {RegExp();return \t(Math.sin - (__iterator__ = ({a2:z2}))); } else return  /x/ ");
tryItOut("if(constructor) { } else \nif(<><x><y/></x></>.__lookupGetter__(\"function::constructor\")) {var __noSuchMethod__ = <x/>; }");
tryItOut("L: {/*infloop*/for(__proto__ = [] instanceof __proto__; <x><y/></x> ===  \"\"  ^ null != [1,,]; (prototype = *::*)) __count__ = <x/>;break M; }");
tryItOut("/*for..in*/for(let  = ['fafafa'.replace(/a/g,  '' ) for (prop in @foo) for each (__proto__ in <x><y/></x>)] in (__noSuchMethod__ =  /x/ )) {if(<x><y/></x>) return; else  if ( /x/g ) {((-1));const __noSuchMethod__ = @foo, constructor = 033; } else return <x/>;return; }");
tryItOut("with( '' .valueOf(\"number\"))L:if(this.__defineSetter__(\"function::prop\", function  prototype (prop)Math.pow)) export *;");
tryItOut("var constructor;");
tryItOut("L:if(this.zzz.zzz) {\f if ((((*::*.hasOwnProperty(\"*\")) if (false)))) <x><'y/></x>;} else {/*infloop*/for(const __count__ = @foo; constructor;  /x/g ) {const __noSuchMethod__, __count__;var __noSuchMethod__, __proto__ = 1e4; } }");
tryItOut("if(this.__defineSetter__(\"__count__\", [1,2,3,4].map)) let (prototype = [[]]) { throw <><x><y/></x></>; } else do {this; } while((1e81) && 0);");
tryItOut("yield;");
tryItOut("yield prototype = this.throw(<><x><y/></x></>);");
tryItOut("if(yield (constructor)) {export __noSuchMethod__; }");
tryItOut("/*for..in*/L:for(const  \"\"  .@x:: <x><y/></x> in ((Math.pow)(this.zzz.zzz))){;gc() }");
tryItOut("with({prototype: 1.3})break M;");
tryItOut("/*infloop*/for(new RangeError(.2, this);  '' .propertyIsEnumerable(\"__count__\"); new (<x/>)(0/0, undefined)) return;");
tryItOut("let (__count__) { L:switch((<x><y/></x> ? <><x><y/></x></> : <x><y/></x>)) { case 7: break;  } }");
tryItOut("for(let y in [5,6,7,8]) prop = prototype;");
tryItOut("L: /*infloop*/do /*for..in*/M:for(const [__noSuchMethod__, constructor] = (new (<><x><y/></x></>).call((new Function).call(__proto__, [[1]], <><x><y/></x></>), true)) in *) throw  /x/ ; while(1e+81 .@*:: true);");
tryItOut("while(([undefined].isPrototypeOf([15,16,17,18].filter([1,2,3,4].map, <><x><y/></x></>))) && 0){;; }");
tryItOut("while((\f(/a/gi)) && 0)with(\t([1,2,3,4].slice)().hasOwnProperty(\"__proto__\")\f){<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>export *; const __count__\n }");
tryItOut("for(let y in []);");
tryItOut("M:if(delete.([1.2e3].sort(function  __noSuchMethod__ (prop, prototype) { return prop } ))) { if (<bbb xmlns=\"({ prototype: __noSuchMethod__ }) = __parent__\"\r> </bbb>.(__parent__.(#2=({__noSuchMethod__: [z1]})))) throw @foo;} else {export *;throw <x><y/></x>; }");
tryItOut("L: export prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in ({prop setter: eval }).yoyo(undefined())) {if([[1]].propertyIsEnumerable(\"__count__\")) { if (1e81) gc()} else {yield __iterator__;export constructor; }O }");
tryItOut("switch(({__count__: undefined.propertyIsEnumerable(\"__noSuchMethod__\"),  get __noSuchMethod__() { yield <bbb xmlns=\"(__noSuchMethod__.__iterator__ = 0/0)\"></bbb> }  })) { default: break; case 1: if((this .@*::  '' )) { if (<><x><y/></x></> for (__count__ in window)) __iterator__ else {return;var prototype = [,,z1]; }} }");
tryItOut("__noSuchMethod__\n");
tryItOut("L: if((@foo && <y><z/></y>)) var __proto__, constructor; else  if ([[]]) yield window; else {; }");
