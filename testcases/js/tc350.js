tryItOut("return;");
tryItOut("/*for..in*/\tfor(let  \"\" .true in (( for (prop in 1e4))(__noSuchMethod__ = __parent__.*))){throw yield <x><y/></x>; } const prop;");
tryItOut("gc()\nbreak ;\n");
tryItOut("var __proto__ = *;gc()");
tryItOut("/*infloop*/L:while([prototype for (constructor in __noSuchMethod__) for (__count__ in )]){var prop, __noSuchMethod__ = __proto__;throw undefined; }\ngc()\n{}\n");
tryItOut("L: export constructor;");
tryItOut("{__parent__ }");
tryItOut("L:do {;export *; } while(() && 0);");
tryItOut("/*infloop*/L:for((/a/gi).call(({prop:  \"\"  }), __iterator__ =  /x/g , [.2]); prop.constructor; new ((new Function(\"\"))).call()) yield;");
tryItOut("/*infloop*/L:for(([,,z1] *= true)((__noSuchMethod__ = <y><z/></y>)); (({__proto__ getter: gc, function(y) { yield y; {}; yield y; } })); (yield __count__)) <x><y/></x>;");
tryItOut("/*for..in*/for((constructor(prop\n)) in prop.( /x/g )) {(function(q) { return q; }).callvar __proto__ = <x/>, __iterator__ = <y><z/></y>; }");
tryItOut("let (__noSuchMethod__ = (-0)) { if(((<><x><y/></x></>).call(3.141592653589793, <><x><y/></x></>, [z1,,]))) { if (( /x/g  <= @foo)) {; }} else \f{export constructor;{} } }");
tryItOut("return 3/0");
tryItOut("M:if( \"\" ) {if([,,]) <x/>; else  if (arguments) yield null;/*for..in*/for(__iterator__ = (null &&  /x/g ).eval(((p={}, (p.z = prototype)()))) in 1.2e3) {yield __parent__; } } else with({}) { try { return; } catch(__parent__ if true) { throw __noSuchMethod__; } finally { let(__iterator__) { prop; }  } ");
tryItOut("let(__proto__, __parent__ = ((*::*).call(<><x><y/></x></>, )) && (let (get, __noSuchMethod__ = <><x><y/></x></>)  \"\" )) ((function(){prop})());");
tryItOut("{ for (prop in (__noSuchMethod__.__iterator__ = false) .@x:: (p={}, (p.z = this)())) for (__noSuchMethod__ in this.zzz.zzz) for (__count__ in \n<x/>) for (constructor in ( '' .prototype)) for each (prop in window) for ((__iterator__) in ({a1:1})) for each (prop in *)/*infloop*/for(const __noSuchMethod__; __iterator__; __iterator__) {\t([[]]).watchthrow <x><y/></x>; } }");
tryItOut("(<x><y/></x>)(<x/>) = __count__;");
tryItOut("if(new constructor.__count__('fafafa'.replace(/a/g, (<x/>).watch))) {return *::*;({}).__lookupGetter__ } else return <y><z/></y>;");
tryItOut("do let (yyy) { return; } while(((([1].__lookupGetter__(\"prop\")) for each (set in )).__defineSetter__(\"__proto__\", (prop = .2))) && 0);");
tryItOut("let (__parent__) {  }");
tryItOut("((constructor).watch).apply");
tryItOut("{{} }");
tryItOut("__count__ = __count__;");
tryItOut("let (__count__ = false, constructor = <x><y/></x>) { function(q) { return q; } }");
tryItOut("/*for..in*/for(let prototype(({constructor: <x><y/></x>})) in ((function ()this.__defineSetter__(\"__parent__\", (prototype = __noSuchMethod__).__defineSetter__))(([z1,,].@foo)))){/*for..in*/for(__noSuchMethod__ = 0x99 in 1.3) {const __iterator__, __proto__ = <x><y/></x>;continue M; } }");
tryItOut("/*for..in*/for(let __iterator__ in ((1.3)(\f(prototype++))\f))yield;");
tryItOut("throw StopIteration;");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("switch(__iterator__ = #3={a:#3#}(function ([y]) { })) { case 2: if(((uneval(*)))) { if (<x><y/></x>()) function  prop (prop) { yield * } } else break; ;break;  }");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = prop = ({ __iterator__: __proto__, __proto__: prop }) in <{prototype}>yyy</{prototype}>.(new *)) /*infloop*/do gc() while(1e-81);");
tryItOut("prototype");
tryItOut("if((function ([y]) { })()) __parent__, __proto__ = 1e4");
tryItOut("this.zzz.zzz;");
tryItOut("while((033.yoyo(<x/>)) && 0){yield  '' ; }");
tryItOut("/*for..in*/L:for(var window.__defineGetter__(\"constructor\", ({}).hasOwnProperty) in (((x::prototype).__defineSetter__)('fafafa'.replace(/a/g, (-0))))){/*for..in*/L:for([constructor, prop] = <x><y/></x> in ({})) throw undefined; }");
tryItOut("{window;if( /x/g ) { if (<y><z/></y>) {export *;return  '' ; }} else gc()return; }");
tryItOut("export prototype;");
tryItOut("return;yield;\n;\n");
tryItOut("L: {function(y) { yield y; yield;; yield y; } }\n");
tryItOut("/*infloop*/do {return;var {throw __iterator__; }; } while((#2=[prop]));");
tryItOut("if(__iterator__.__noSuchMethod__ = (__count__ + window * true)) do continue L; while(((@foo for each (__parent__ in <x/>)).propertyIsEnumerable(\"prototype\")) && 0); else  if (\f(<{__proto__}>yyy</{__proto__}>)()) {/*for..in*/for(__iterator__ = (*::* * (-0)) in *) {;yield 1e+81; }yield (__parent__ = 3.141592653589793); }");
tryItOut("/*for..in*/for(var window['function::prop'] in (('haha'.split)((([1,,] for each (__count__ in <><x><y/></x></>))))))__noSuchMethod__, __iterator__ = 0/0;");
tryItOut("/*infloop*/for(@foo; prop; this) {var __count__, __proto__ = @foo;return; }");
tryItOut("if(*) { if (033) export __noSuchMethod__;} else ;");
tryItOut("/*infloop*/do do { } while((this.zzz.zzz) && 0); while(__proto__ = *);");
tryItOut("return __proto__ = this.__defineGetter__(\"__parent__\", function(y) { yield y; return function ([y]) { };; yield y; })\n;");
tryItOut("yield ((this ).call(1e81, )) |= *::*;");
tryItOut("/*infloop*/M:for(((prototype ? undefined : <x><y/></x>).__proto__); __noSuchMethod__ = (*::* >= -1); ({__proto__ getter: Function, __proto__: <y><z/></y> }) / [11,12,13,14].filter) {return; }");
tryItOut("{/*infloop*/L:for(let prop; [[1]];  /x/ ) {(prototype); } const prop; }");
tryItOut("{;this }");
tryItOut("/*for..in*/L:for(let (__noSuchMethod__) in (((<y><z/></y>).__defineSetter__)(prototype = 1e4.hasOwnProperty(\"__parent__\"))))M:do export *; while((<x/>) && 0);");
tryItOut("with({}) throw __count__;");
tryItOut("if((false.hasOwnProperty(\"prototype\"))) { if (undefined >>=  '' ) gc()} else (<><x><y/></x></>);");
tryItOut("L: return;");
tryItOut("throw <x><y/></x>, *::*\n");
tryItOut("(function(y) { yield y; throw 033;; yield y; }).call\nif(RegExp(@foo, window).__lookupSetter__(\"__iterator__\")) gc() else  if ( \"\" [__iterator__]) continue L; else yield;\n");
tryItOut("M:if(yield <><x><y/></x></>)  else ;return;\n");
tryItOut("if(#0=(-1)) { if (yield ([prop] = <x/>.__defineSetter__(\"x::__iterator__\", (<x><y/></x>).watch))) {\fif(<><x><y/></x></>) var __count__; else throw ;{} } else export *;}");
tryItOut("(__noSuchMethod__)\n");
tryItOut("with({}) let(__iterator__ = __noSuchMethod__ = window) ((function(){with({}) L:with(*::*){; }})());");
tryItOut("with({__parent__: new Function}){yield;yield [((__parent__ if (<y><z/></y>))) >>> ( ''  ? [,,z1] : window) for each (prototype in undefined) for each (__count__ in false) for each (constructor in this)]; }");
tryItOut("{/*for..in*/L:for(const __noSuchMethod__ in window.@* || constructor|= '' ) {if(window) {yield <x/>;'haha'.split } } }");
tryItOut("return;");
tryItOut("throw __count__;");
tryItOut("if(__noSuchMethod__ @ this.__defineSetter__(\"constructor\", function(y) { yield y; export constructor;; yield y; })) { if (this.__defineGetter__(\"__parent__\", Math.sin)) if(/a/gi) { if (new ((-1))(*::*).__lookupSetter__(\"constructor\")) ; else <><x><y/></x></>;}} else {with({}) yield <><//h\nx><y/></x></>;L:if(Number(this :: -1)) {let __parent__, __parent__; } else  if (__noSuchMethod__ = ([,,] ^= -3/0)) {return @foo; } else {trueexport *; } }");
tryItOut("/*infloop*/for((({ __parent__: ({ prop: constructor }), __noSuchMethod__: prototype }) = (#3={a:#3#}.__noSuchMethod__)); (__iterator__ = __iterator__; = this;); ( /x/ .throw(<><x><y\t/></x></>) &=  /x/  =  \"\" .__count__)) {with({prop: ( \"\"  < window)}){; } }");
tryItOut("return; const prop;");
tryItOut("if(true) { if ((prop) = * :: <x><y/></x>()) let prototype = <x/>, __iterator__ = undefined; else {var prototype = [[1]]; }}");
tryItOut("__count__ = constructor;");
tryItOut("if(constructor) continue M; else gc()if( /x/g ) (__noSuchMethod__); else  if ( /x/g ) gc()");
tryItOut("do constructor while(((__iterator__ = 033)) && 0);");
tryItOut("");
tryItOut("if((this.__defineSetter__(\"constructor\", 1e+81)) << __iterator__) { if (((Math.pow)(<><x><y/></x></>, __parent__)).unwatch(\"__proto__\")) yield null; else {__proto__ }}");
tryItOut("if(<bbb xmlns:ccc=\"new (!*)\"><ccc:eee></ccc:eee></bbb>.(yyy)) {throw __iterator__; }");
tryItOut("/*infloop*/while(prop.(__noSuchMethod__ = 1e81)){yield;*; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = new Boolean((new ((1 for (x in [])))(*::*))) in (<\f><x><y/></x></>.prototype = undefined)) {__count__; }");
tryItOut("if(eval(\"{}\", this.zzz.zzz)) break \n else {yield; }");
tryItOut("/*for..in*/for(let __iterator__ in <y><z/></y>) {const __proto__ = <><x><y/></x></>;throw <y><z/></y>; }");
tryItOut("switch(<y><z/></y>) { default: if(__parent__) { if (false) new Function else {; }}/*for..in*/for((<x/>)(this) in (((this).__defineSetter__)((__noSuchMethod__+=this)))){gc() }break; case (({ get prototype prototype (__count__) { yield  /x/  }  })): if( \"\" [undefined].valueOf(\"number\")) ;break; case (this.zzz.zzz.@foo.__defineSetter__(\"__noSuchMethod__\"/*\n*/, <><x><y/></x></>.__lookupGetter__(\"__count__\"))): throw <x><y/></x>.(#3={a:#3#});break; with({}) yield;break;  }");
tryItOut("/*infloop*/for([[1]]; __noSuchMethod__; 1e-81) yield;");
tryItOut("return ({prototype: <x><y/></x>.isPrototypeOf(<x/>)});");
tryItOut("/*infloop*/M:for(__parent__; constructor = <x><y/>\f</x>; <x><y/></x>++) gc()");
tryItOut("/*for..in*/M:for(const __proto__(@foo) in true) {throw  '' ;prototype, prop; }");
tryItOut("switch( '' .__defineSetter__(\"constructor\", ({}).__lookupGetter__)) { default:  }");
tryItOut("return try { export *; } catch(__proto__) { (3/0); } .__noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor.__count__ in (*::*.__defineSetter__(\"prototype\", (new Function(\"{}\"))))) { }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*///h\nfor(var __count__ = new (5.0000000000000000000000).__defineSetter__(); this; (eval(\"4.\", <y><z/></y>))) {}\nvar prototype = @foo, __proto__;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in (({__count__: true}))) {throw 1e+81;\nyield;\n }");
tryItOut("/*for..in*/M:for(constructor = (({__iterator__:  /x/g , __iterator__ getter: function ()<y><z/></y> }) || \n(__iterator__.(prop)) &= [11,12,13,14].sort) in [15,16,17,18].map('haha'.split, __parent__ = <><x><y/></x></>)) {export *;continue ; }");
tryItOut("while(((Function(@foo))) && 0){[1,2,3,4].mapcontinue ; }");
tryItOut("/*infloop*/do {prototype = <x><y/></x>; } while((__noSuchMethod__.throw( '' )));");
tryItOut("if((constructor = arguments / \n<x/>)) {return prop;yield; } else  if ((false)()) do {return [,,z1];/a/gi } while((false) && 0); else gc()");
tryItOut("let (__iterator__, constructor) { ( /x/g ); }");
tryItOut("/*infloop*/for(var constructor; [<x><y/></x>].map(*::*); 0.1) {export __count__; }");
tryItOut("if((this.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)).watch(\"constructor\", ({}).hasOwnProperty)) [,] else  if (function  __noSuchMethod__ (__proto__, constructor) { {} } (#2=this)//h\n) export constructor;");
tryItOut("/*for..in*/for(let __count__ in (-0)) ");
tryItOut("(window);");
tryItOut("const __iterator__ = #1#, prop\nthrow __noSuchMethod__;");
tryItOut("if(prop) { if ( /x/ )  else return;}");
tryItOut("/*infloop*/M:do {if(__noSuchMethod__) (<x/>); } while((yield ( /x/g )));");
tryItOut("/*for..in*/for(const constructor = ('haha'.split).call(function(id) { return id }, <x><y/></x>, [,]) in <x><y/></x>) {{}gc() }");
tryItOut("M:if(<y><z/></y>) #3={a:#3#};");
tryItOut("{ } const __noSuchMethod__;");
tryItOut("continue ;");
tryItOut("switch(__parent__ >> <x><y/></x>) { default: break; case 8:  }");
tryItOut("if((constructor = @foo++)) {switch(<x><y/></x>) { default: <><x><y/></\tx></>;break; case 2: {};break; case this: yield;case @foo: break;  }with(({ set __count__ __count__ ()throw (export *); })) } const __proto__;");
tryItOut("M:do if(new ()) throw <x/>; else  if (<x/> > 4.) {(__parent__); } else export __count__; while(( /* Comment */<x><y/></x>) && 0);");
tryItOut("try { throw constructor; } catch(prop if (function(){M:do return <><x><y/></x></>; while((__iterator__\f) && 0);})()) { for(let y in []); } catch(__parent__) { let(prop = [[1,,]], __noSuchMethod__ =  /x/g ) { throw StopIteration; } finally { try { return *::*++; } catch(prop if (function(){for(let y in [5,6,7,8]) export *;})()) { __proto__ = *::*, constructor; } finally { this.zzz.zzz; }  } ");
tryItOut("L: {{} }throw window\n");
tryItOut("throw function::__proto__\t;");
tryItOut("{yield  '' ; }");
tryItOut("/*infloop*/while(__proto__ = prop)/*infloop*/for(var [__parent__, , ] = 0.isPrototypeOf(__iterator__); (__parent__.(-1)); #3={a:#3#}.__lookupGetter__(\"yield;\")) let (1) { {} }");
tryItOut("return <x><y/></x>\nswitch(({prototype setter: eval, constructor getter: ({}).__lookupGetter__ })) { default: const __iterator__, __count__ = <x/>;case 0: case false.@foo: var __proto__, __count__;break;  }\nwith({__iterator__: (( /x/ )[window])}){this;yield [,,z1]; }");
tryItOut("/*infloop*/do {continue M;/*infloop*/do {{} } while((<x><y/></x>++)); } while(({ __proto__: __proto__ }) = *::*.hasOwnProperty(\"__proto__\"));");
tryItOut("with({__proto__: <{constructor}><ccc:ddd></ccc:ddd></{constructor}>})export *;\nconst __iterator__;\n");
tryItOut("if(return for each (prototype in *) for each (__proto__ in  /x/g )) /*infloop*/do {<x/>;return <x><y/></x>; } while(constructor); else gc()");
tryItOut("/*for..in*/L:for(prop(__count__.eval(window)) in ((function  prop (__noSuchMethod__) { yield [({ __proto__: ({ __proto__: __noSuchMethod__, __noSuchMethod__: prop }) }), prototype] = <{x::__proto__}></{x::__proto__}>.((-3/0\t.yoyo(<><x><y/></x></>))) } )( /* Comment */@foo)))/*infloop*/for(<x><y/></x> - <x>\r<y/></x>; .2; __count__ = *) yield <x><y/></x>;");
tryItOut("{/*for..in*/L:for(var constructor in ((Function)(__iterator__.hasOwnProperty(\"__iterator__\")))){let prototype = false; }with(yield (1e-81.__defineGetter__(\"each\", ({}).__lookupGetter__)))/*infloop*/for(var ({ constructor: prototype, __parent__: prototype }) = (-1) <<=  \"\" ; <>(({prototype getter: function(q) { return q; } }))</>; new (<><x><y/></x></>)(<x/>)) {Math.sin{} } }");
tryItOut("L:while(( /x/g ) && 0){{} }");
tryItOut("{for(let y in [5,6,7,8]) let(__iterator__ = <y><z/></y>) ((function(){export *;})()); }");
tryItOut("if(__iterator__) { if ( '' ) export __proto__; else {export *;export __iterator__; }}");
tryItOut("M:if( /x/g  *= constructor <<= ((__proto__ = <x><y/></x>, <x><y/></x>).__defineSetter__).call(false, var __count__;)) { if (<><xxx>{__iterator__}</xxx></>) {return;let __proto__;\r } else {export __noSuchMethod__; }}");
tryItOut("/*for..in*/for(__parent__ = function(id) { return id } in (this.zzz.zzz)) continue M;");
tryItOut("if(arguments[<x><y/></x>]) { if (#1=<x><y/></x> .@ <x/>) {yield false;; }} else {constructor; }");
tryItOut("/*for..in*/for(constructor = <x><y/></x>.( /x/g ) in @foo) ");
tryItOut("/*infloop*/for(let __iterator__; ; *::*) export __noSuchMethod__;");
tryItOut("with({}) { let(prototype = 0x99 * <y><z/></y>) ((function(){return undefined;})()); } ");
tryItOut("with(<><x><y/></x></>.@*)");
tryItOut("/*infloop*/while( '' );");
tryItOut("{((-1)); }");
tryItOut("with({}) with({}) this.zzz.zzz;");
tryItOut("if((((new Function(\"export __parent__;\"))).call).call(*::*, <y><z/></y>)) prop, __count__; else  if (((window.throw(function ([y]) { }))(new (Math.sin)(<x><y/></x>, <x><y/></x>)) = constructor = <><x><y/></x></>)) {gc()throw <x><y/></x>; }");
tryItOut("/*infloop*/while((eval(\"RegExp( \\\"\\\" )()\", __noSuchMethod__.__count__)) ? this.__defineSetter__(\"prop\", (<><x\f><y/></x></>).watch) :  /* Comment */__proto__ << yield __parent__)return;\nyield;\n");
tryItOut("with(void __proto__){continue ;(<><x><y/></x></>); }");
tryItOut("do if( /* Comment */033) {continue M; } else  if (()) {throw <x/>; } else {return;var constructor; } while(( /x/ .hasOwnProperty(\"__parent__\")) && 0);");
tryItOut("yield;");
tryItOut("/*infloop*/for(prop; (__iterator__ = <x/>).__proto__.__defineSetter__(\"__proto__\", [1,2,3,4].map); <x><y/></x>.(window) / (<x/> ? 1e81 : false)) /*infloop*/M:while(<><x><y/></x></>)export constructor\n");
tryItOut("const constructor, __noSuchMethod__;");
tryItOut("/*infloop*/for(const <>set .@x::  \"\" </> = new ((-1))(<><x><y/></x></>).isPrototypeOf('fafafa'.replace(/a/g, (<><x><y/></x></>).watch)); (#2=[(this.zzz.zzz)]); constructor = (<x><y/></x> >= <y><z/></y>.__defineSetter__(\"__count__\", eval))) return;");
tryItOut("/*infloop*/do /*for..in*/for(let constructor in (false)[true]) L: yield false; while((<x/>).valueOf(\"number\").valueOf(\"number\"));");
tryItOut("if((<x><y/></x>.( \"\" ))) {export __iterator__;continue L; } else  if (<><x><y/></x></>.yoyo( '' ) :: <x><y/></x>.hasOwnProperty(\"__iterator__\")) {while(((__count__.__noSuchMethod__ = [[]])) && 0)__iterator__ }");
tryItOut("if(prototype.(null)) { if (3.141592653589793) var constructor;} else {yield; }");
tryItOut("/*for..in*/M:for([__proto__, __iterator__] = this in constructor) gc()");
tryItOut("L:switch((([11,12,13,14].map).__noSuchMethod__)) { default: do {{}return @foo; } while((((function (__noSuchMethod__)<x/>)(__parent__,  '' )) == window.propertyIsEnumerable(\"__proto__\")) && 0);break; case (prop(prop)): {;const constructor, prototype = true; }break; export prop;\nreturn 3.141592653589793;\n }");
tryItOut("break ;");
tryItOut("switch(RangeError(__parent__ = <x/>, (undefined ? * :  \"\" ))) { default: continue ;break; case 5: M:with((this >>= @foo)){export __parent__;throw <><x><y/></x></>; }case (this.*): break;  }");
tryItOut("/*infloop*/M:while(([z1,,] @ false))let __noSuchMethod__ = [[]], __proto__\n/*for..in*//* nogeckoex bug 349964 */L: for  each(const setter in <><x><y/></x></>) {return window;yield; }\n/*infloop*/for(__proto__; <><x><y/></x></>; #3={a:#3#}) <><x><y/></x></>;\n");
tryItOut("let (constructor) { function(y) { yield y; ; yield y; } }");
tryItOut("while((prop) && 0)return;");
tryItOut("/*for..in*/M:for(((new Boolean()) * __noSuchMethod__.prop getter= Math.sin)['__iterator__'] in ((((-( /x/ .__count__ = <x><y/></x>))[\tnew (eval)(({}--), arguments.watch(\"__parent__\", function(q) { return q; }))]))(<x><y/></x>()\n)))while(( /* Comment */__parent__) && 0)return  /x/ ;");
tryItOut("/*infloop*/M:for(__count__; constructor = this; ((eval).call((<zzz><y><z/></y></zzz>.((({prop: <><x><y/></x></> })))), window))) while(( '' ) && 0){ }");
tryItOut("{}");
tryItOut("continue M;");
tryItOut("L:if(new [1,2,3,4].map(__iterator__ = *::*, (new Function(\"{}\")))) { if (this.__defineGetter__(\"prop\", new Function)) gc()} else yield;");
tryItOut("/*for..in*/for(const __count__ = @foo in __proto__.(#3={a:#3#})) {break M; }");
tryItOut("L:if(typeof <x/>) ; else Math.pow\n for each (__proto__/ in [z1,,]);\n");
tryItOut("__parent__");
tryItOut("with({constructor: 3}){prototype; }");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, __parent__] = *(0) in *) export *;");
tryItOut("for(let y in [5,6,7,8]) ((-1))(3.141592653589793 instanceof window + <y><z/></y>.valueOf(\"number\"))\t = constructor;");
tryItOut("if(([(__count__ = __iterator__) <x><y/></x> isPrototypeOf)].some((function(y) { yield y; break L;; yield y; })(__proto__|=<x><y/></x>, undefined)))) {\nyield;\n } else  if ((__noSuchMethod__.prototype = (new (*)(1e-81, [z1]).watch(\"[__iterator__]\", ({}).hasOwnProperty) ? __count__.prop-=arguments : constructor.watch(\"__proto__\", Function)))) throw 5.0000000000000000000000;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <x><y/></x>.__defineSetter__(\"prop\", {gc }) ? 0 >>> true :  /x/  .@x:: <x><y/></x> in window\r) ");
tryItOut("yield {};");
tryItOut("if(yield) {gc()return  /x/g ; } else new Function");
tryItOut("yield this += <y><z/></y> ?  \"\"  : <><x><y/></x></>;");
tryItOut("__parent__ = constructor;");
tryItOut("with({}) { __count__ = constructor; } ");
tryItOut("let(__parent__, __iterator__ = this.__defineSetter__(\"let\", [,,]) , [11,12,13,14].map) ((function(){this.zzz.zzz;})());");
tryItOut("return");
tryItOut("with({}) { let(__proto__ = (eval(\"{}\", [1,,]))) ((function(){getter = __noSuchMethod__;})()); } ");
tryItOut("break ;");
tryItOut("with({__count__: [11,12,13,14].map.*})\tthrow *;");
tryItOut("return 4.\n");
tryItOut("L:if(([z1] = (*)[<y><z/></y>]) |= ([1,2,3,4].map)(<x><y/></x> , <x/>)) { if (({ set prop(prop) { {/*for..in*/for(let constructor in ((({}).__lookupGetter__)(null))){-0; } } }  })) {((-1));{} }} else {yield; }");
tryItOut("break ");
tryItOut("with(((null + 0x99).@foo) / new @foo){/*infloop*/for(prop; this.zzz.zzz; <x><y/></x>.valueOf(\"number\")) {gc() /x/ ; } }");
tryItOut("throw <y><z/></y>");
tryItOut("yield <x/>;");
tryItOut("if((new (<><x><y/></x></> ? window : @foo\n)((p={}, (p.z = Number(prop))()), [].__count__))) yield; else  if (( /x/g )) gc");
tryItOut("/*for..in*/M:for([constructor, prototype] = <y><z/></y> in [11,12,13,14].filter) {let __parent__, prop = [[]];/*infloop*/while(window){var prop = (function ([y]) { })(); } }");
tryItOut("if((<y><z/></y> >>> <y><z/></y>)) {export __noSuchMethod__;export *; } else  if ( /* Comment */ \"\" ) __proto__\n{} else var __iterator__ = 0;");
tryItOut("L: {/*infloop*/for(__noSuchMethod__ = [(prop = false.hasOwnProperty(\"__parent__\"))]; this.__defineSetter__(\"__parent__\", function (({ __noSuchMethod__: __parent__, __parent__: __count__ }), __proto__)+undefined); __proto__) {([z1]); } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(<x><y/></x>; <x><y/></x>; [[1]]) {.2; }");
tryItOut("*::*;");
tryItOut("if(prop.(([@foo]))) { if ((new (__count__.__proto__ =  /x/g )(window))) {<x><y/></x>; } else return;}");
tryItOut("/*for..in*/for(__iterator__ in ({prototype getter: function () { ; } , __proto__: null })) {while(((-0\n\f.__lookupSetter__(\"prop\"))) && 0)/*infloop*/for(true; <x/>; [<><x><y/></x></>].filter(Function)) yield <><x><y/></x></>;\f }");
tryItOut("try { with({}) { for(let y in []); }  } finally { return; } ");
tryItOut("throw StopIteration;");
tryItOut("if(([new  /x/g (<><x><y/></x></>)].map(function (({ __noSuchMethod__: prototype }), __iterator__) { yield [constructor] } ))) {[1,2,3,4].slicereturn; }");
tryItOut("/*infloop*/for(let __proto__.__parent__ = ((yield  /x/g )); (((@foo( '' , -1\t)) && (p={}, (p.z = [1,,])()).valueOf(\"number\")).hasOwnProperty(\"__count__\")); 1.3) if(__noSuchMethod__.prototype = *::*.@foo) {return; } else  if ((yield ({function::__proto__: 0/0}))) ");
tryItOut("/*infloop*/while([__count__])continue L;");
tryItOut("export *;");
tryItOut("/*for..in*/M:for(const __parent__ = (<x><y/></x>.( '' )) in false << <><x><y/></x></>) export __proto__;");
tryItOut("/*for..in*/L:for(let __iterator__ in (([1,2,3,4].map)(<><x><y/></x></>))){let __iterator__ = window, constructor; }/*infloop*/while(__noSuchMethod__ = __noSuchMethod__ -= 3\n){yield;with({__noSuchMethod__: prop}){let __noSuchMethod__ = false, __proto__ = 1.2e3;throw  \"\" ; } }");
tryItOut("if(--*::*.__proto__) { if (prototype((*.@foo)) = this *= 1e-81) return window; else {{}export *; }}");
tryItOut("L: {if(__proto__) { if (<><x><y/></x></>) {export __noSuchMethod__;let __count__ =  /x/ , constructor = *::*; }} else {return <x><y/></x>;(0.1); } }");
tryItOut("/*for..in*/for((__parent__) in  '' .@foo.__defineGetter__(\"true.__parent__\", ({}).__lookupGetter__).propertyIsEnumerable(\"__count__\")) {gc() }");
tryItOut("M:if((prop = <x/>)) ; else {this;(1 for (x in [])) }");
