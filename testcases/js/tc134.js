tryItOut("with(((prototype%=<x><y/></x> .. <x/>\n if (prop.(@foo))))){if(constructor = <><x><y/></x></>.unwatch(\"__noSuchMethod__\")) continue ; else  if ((-0) ^= this) {gc() } else return; }");
tryItOut("/*for..in*/for(let [prop, prototype] = @foo\f in <><x><y/></x></>) [1,,];");
tryItOut("L: {yield *::*; }");
tryItOut("if(yield __iterator__-={} >>> <y><z/></y>.@foo) throw 4.");
tryItOut("L:if(()) { if (#0=({__parent__: [,,z1]})\n) ;} else {Functionexport *; }");
tryItOut("/*for..in*/for(var constructor in ((\n__parent__ =  /x/ )(((<y><z/></y>)[(false.constructor)])))){export *; }");
tryItOut("/*for..in*/L:for(const __proto__ in (((new  /x/g (this, false)))((undefined)())))if(window) {(<><x><y/></x></>);let prototype; } else ;");
tryItOut("/*for..in*/for(prop = eval(\" \\\"\\\" \", 1e-81) in true >>= <><x><y/></x></>(((1 for (x in []))))) /*for..in*/for(let getter in -0) {__iterator__ = (function ([y]) { })();yield;\r } const __parent__;");
tryItOut("/*for..in*/M:for(let [prototype, __parent__] = __count__ in const __count__ = <x><y/></x>;) {return true; }");
tryItOut("if((<y><z/></y> = 1.2e3).valueOf(\"number\")) return <><x><y/></x></>; else ;");
tryItOut("with(__proto__){return; }");
tryItOut("export *");
tryItOut("yield  '' ;");
tryItOut("while(( if (__noSuchMethod__)[__proto__, ({ __proto__: __iterator__ }).watch(\"__count__\", /a/gi)]) && 0){do break\f L; while((\twindow >> <x><y/></x>) && 0); }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for([__proto__, prop] = (<x/> if (<x/>)) in ({a1:1})) eval");
tryItOut("let (constructor = new Error()) { /*for..in*/for(__parent__ in []) {; } }");
tryItOut("switch('fafafa'.replace(/a/g, \ffunction  __noSuchMethod__ (__count__) { yield this } )) { case <x><y/></x>.__lookupSetter__(\"__parent__\"): L:if(<x><y/></x>) { if (*) } else const export *;, __proto__;break; export __proto__;break; return  '' ;break;  }");
tryItOut("L:if(\n*::*) export *;");
tryItOut("/*infloop*/M:for(var __parent__; <y><z/></y> < (__noSuchMethod__ = *::*); constructor.__noSuchMethod__ setter= gc) {if(<>__iterator__</>) {__proto__ = <><x><y/></x></>;[1,2,3,4].map } else  if (<x/>) {<x/>; } else {{} } }");
tryItOut("while((({__proto__: constructor = <x><y/></x>, __parent__: 5.0000000000000000000000 })) && 0){gc() }");
tryItOut("with({}) for(let y in []);");
tryItOut("let (__noSuchMethod__ = ((yield <y><z/></y>) >>>=(<xxx {__iterator__}={ /x/g } /> += (this).call((this.__defineSetter__(\"__proto__\", function  1e-81 () { return 0 } )), <y><z/></y>--, @foo)))) { if(<bbb xmlns:ccc=\"false\"><ccc\f:eee></ccc:eee></bbb>) { if (false) {yield true; }} else export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in arguments) M:with({prototype: *::*})yield <y><z/></y>;");
tryItOut("with(this\n)yield;");
tryItOut("/*for..in*/for([({ __iterator__: [, [, , ], []], prototype: ({ __iterator__: ({ __iterator__: ({ prototype: ({ __parent__: ({ prototype: constructor, prototype: __iterator__ }) }) }) }), prototype: [] }) }), __parent__] = [].map(({}).__lookupGetter__) in __count__.constructor getter= (1 for (x in []))) break M;");
tryItOut("/*infloop*/for(null = constructor.propertyIsEnumerable(\"__iterator__\");  /x/ ; ({constructor setter: new RangeError() })) {let __iterator__ =  \"\" ;gc() }");
tryItOut("/*for..in*/M:for(const ({ __proto__: ({ __parent__: __iterator__ }), __count__: constructor }) in (eval(\"/*infloop*/do return this; while(<><x><y/></x></>);\",  /* Comment */ /* Comment */<x/>))) if(window.yoyo/*\n*/(window)) {Math.pow<y><z/></y>; } else  if (window) ( /x/ ); else {return <><x><y/></x></>; }");
tryItOut("/*infloop*/L:while(yield default: __proto__ = <x><y/></x>, prop = null; const prototype;;break; )gc()");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const __iterator__ = 0 in false) {continue ; }");
tryItOut("yield\n");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = [11,12,13,14].filter in <x/>) .2");
tryItOut("while((prop = (eval(\";\", prop.prototype))) && 0){L: {yield;export __parent__; } }");
tryItOut("/*infloop*/for(({ __proto__: ({ __iterator__: [, __proto__] }) }) = this.__defineSetter__(\"__noSuchMethod__\", this).throw(new -3/0(prop)[(function ([y]) { })() |= @foo]); ((1 for (x in []))).call((new (({}).hasOwnProperty)()),  /x/g .watch(\"prop\", 'haha'.split)); <y><z/></y> %= <><x><y/></x></> ^ new (/a/gi).call(undefined, 3.141592653589793)) {/*for..in*/for(var __proto__ in [1]) var __iterator__;let prop; }");
tryItOut("L:if(\nvar __noSuchMethod__; | new <><x><y/></x></>(this, <x><y/></x>)) { if (<bbb xmlns:ccc=\"[<y><z/></y>.prototype for each (__count__ in -3/0)]\"><ccc:eee></ccc:eee></bbb>.((__parent__.__count__))) export *; else {do {{}null; } while((__proto__) && 0); }}");
tryItOut("{with({}) for(let y in [5,6,7,8]) export *;if((0\n)) prop, __count__; else  if (({}).__lookupGetter__) {let __iterator__ = null; } else {throw  /x/g ;constructor, __noSuchMethod__ = <y><z/></y>; } }");
tryItOut("L: {(<x><y/></x>);return 1e-81; }");
tryItOut("with((({ constructor: [({ __count__: constructor, constructor: [prop, __parent__] }), ], prototype: ({ __noSuchMethod__: (\t{ __count__: __parent__ }), __proto__: __iterator__ }) }) = (function(q) { return q; })((constructor.(((window if (<y><z/></y>)))) !== __iterator__))))return (((Math.pow).watch)(__noSuchMethod__, window));");
tryItOut("if(<><x><y/></x></> ,  /x/g ) var prototype = <><x><y/></x></>[window], constructor = true; else {with((__count__ = @foo))({}).hasOwnProperty }");
tryItOut("with((1e4 for (true.__parent__ in <><x><y/></x></>))){return;yield; }");
tryItOut("((--__iterator__))(<>[11,12,13,14].sort</>) = prototype;");
tryItOut("/*infloop*/M:while((-1) .@  '' )do continue ; while((1e81) && 0);");
tryItOut("{{{} } }");
tryItOut("/*for..in*/for([__iterator__, __parent__] = __iterator__ = new ([1]--)((<xxx>{prop}</xxx> = <x><y/></x>)) = (--( '' .valueOf(\"number\"))) in (@foo\n)) {yield 0x99;yield <x/>; }");
tryItOut("/*for..in*/L://h\nfor(let __proto__ = (__proto__.__iterator__ = *::*) << [15,16,17,18].map(undefined |= (function ([y]) { })(), new (prop = @foo)(({constructor setter: (new Function(\"Function\")),  set __iterator__ __count__ (__iterator__) { yield; }  }), <x><y/></x>)) in (yield (-1))) if((yield <y><z/></y>)) const __parent__ = <x><y/></x>;");
tryItOut("L: {break ;<y><z/></y>; }");
tryItOut("/*for..in*/for(const prop = __noSuchMethod__.__proto__ in prototype = let (__noSuchMethod__, __iterator__)  \"\" ) {throw throw  /x/g ; }");
tryItOut("{yield 0;prototype; }");
tryItOut("/*infloop*/L:for(const __count__; #3={a:#3#}; <x><y/></x>) {yield (-1);export *; }");
tryItOut("/*for..in*/for(let ({ __count__: ({ __noSuchMethod__: [], prototype: [const __parent__ = window;, , ] }) }) in ((((new Function(\"while((eval(\\\"__noSuchMethod__\\\", prop)) && 0)/*infloop*/for(const prototype = function ([y]) { }; 3.141592653589793; <x><y/></x>) {function  prototype (constructor)truebreak ; }\"))).apply)(window.eval(window))))/*infloop*/for(__count__; __count__; __count__+=false) {throw false;;\n }");
tryItOut("with({}) { return *; } ");
tryItOut("/*infloop*/for(const each; (eval(\"/*for..in*/for(const __iterator__ in *::*) export __iterator__;\", 4.)); prototype = (window)( '' )) ;");
tryItOut("");
tryItOut("const __count__ =  /x/ ; const prop;");
tryItOut("{[1,2,3,4].slice }");
tryItOut("M:with(<><!--yy--></>)__noSuchMethod__ = undefined;");
tryItOut("/*for..in*/M:for([__proto__, prototype] = +(new <y><z/></y>()) in (__noSuchMethod__ = [])[new (undefined)([z1], __count__)])  ");
tryItOut("if((uneval((__parent__ = #1#))).isPrototypeOf(__parent__ = ([[1]])())) export *; else  if (String((prototype\n).@*)) export *;");
tryItOut("/*for..in*/for(let x::constructor in (((1 for (x in [])))((constructor = false))))return;\f");
tryItOut("L:if(prototype) { if ((yield <><x><y/></x></>)) with({function::__count__: * /  '' })default: break; } else {L: ;__proto__; }");
tryItOut("function (__noSuchMethod__, __noSuchMethod__) { yield  ''  } \n");
tryItOut("while(([11,12,13,14].map) && 0){{} }");
tryItOut("with({prop: prop.__parent__}){}");
tryItOut("{/*for..in*/for(delete =  /* Comment */new (true()) in function  constructor ()<><x><y/></x></>(__count__, @foo).__noSuchMethod__) {/*for..in*/for(let constructor in this) {prop = undefined, __iterator__;(window); } }M:do {(thisthrow  '' ;);__count__, __count__ =  /x/ ; } while(((true ? <><x><y/></x></> : <x><y/></x>)) && 0); }");
tryItOut("/*infloop*/do return; while(<xxx {__parent__}={((p={}, (p.z = #2= /x/g .__lookupGetter__(\"prop\"))()))} />.(((( /x/g .prop) for (__iterator__ in 1.3) for each (__noSuchMethod__ in __noSuchMethod__) for each (prop in *::*)))));");
tryItOut("/*infloop*/M:for(var [, ] = [[]].__defineGetter__(\"__noSuchMethod__\", function (constructor) { return <y><z/></y> } ); new ({}).hasOwnProperty(<y><z/></y>, (each = *)); __count__) return;");
tryItOut("if(3.141592653589793) { if () __count__} else {this; }");
tryItOut("if(<><x><y/></x></>) return @foo;");
tryItOut("L: return;");
tryItOut("/*infloop*/for(export *; (__iterator__.x::$ =  \"\" .hasOwnProperty(\"function::__count__\") >>>=[1,,].yoyo(false)); (window.propertyIsEnumerable(\"__noSuchMethod__\").isPrototypeOf(prototype.(<x><y/></x>)))) {}");
tryItOut("let(__iterator__) ((function(){with({}) { with({}) { this.zzz.zzz; }  } })());");
tryItOut("if(new (Math.sin)(<><x><y/></x></>,  \"\" ).propertyIsEnumerable(\"__proto__\")) { if ( '' ) {[[1]] } else {export *; }}");
tryItOut("return [__iterator__];\nyield;\n");
tryItOut("{}\ncontinue M;\n");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("L: <x/>; \"");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in *::*) return <x><y/></x>;");
tryItOut("/*for..in*/for(let __count__ in ((Math.sin)(__count__.constructor = #1#)))yield [[1]];/*infloop*/while(<><x><y/></x></>){continue L;return; }");
tryItOut("with(<><x><y/></x></>)");
tryItOut("{/*infloop*/M:for(let __iterator__; true;  /x/ ) __parent__ } const constructor;");
tryItOut(" /x/g ;");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __parent__ }) = *::*; (1 for (x in []))(); this.__defineSetter__(\"__parent__\", Math.pow)) {throw <x/>\n }");
tryItOut("if(((prototype.prop = [[]])()//h\n.yoyo(let (default: yield @foo;break; ) ({__parent__ getter: (1 for (x in [])), __noSuchMethod__: <><x><y/></x></> })))) { if (<xxx>{prop}</xxx>) M:while(([1]) && 0){let __iterator__ = this; }} else {constructor, __iterator__; }");
tryItOut("throw StopIteration\n");
tryItOut("if((yield  /x/g ) % this.__defineSetter__(\"__parent__\", function () { return prototype } )) { if (undefined) break M\n} else {if(* & <y><z/></y>) * }");
tryItOut("if([11,12,13,14].filter) {(#1#);{} } else  if (({prop: *::* })) {var constructor = *;\f } else {gcyield; }");
tryItOut("this.zzz.zzz;");
tryItOut("yield;");
tryItOut("L: L:if(\t '' \n) {/*infloop*/do {break L;export __iterator__; } while(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(const constructor; __iterator__ < __proto__; __proto__.constructor) ;");
tryItOut("/*for..in*/M:for(let prop = 1.3 @ <x><y/></x> in false) { }");
tryItOut("with(yield *);");
tryItOut("/*infloop*/L:for(const prop; prop.constructor; <xxx {__count__}={(1e-81)(<><x><y/></x></>, arguments)} />.((eval)())) yield;");
tryItOut("prototype = __parent__;");
tryItOut("/*infloop*/do yield; while(1e4);");
tryItOut("/*infloop*/for(let constructor; ({a1:1}); *::*) yield;");
tryItOut("while((__noSuchMethod__ = (prop = <x/>).@foo) && 0)with(<x><y/></x>){yield __parent__;export *; }");
tryItOut("if(((prop).__defineSetter__())) {return [,,z1];/*infloop*/for(this.zzz.zzz\t; 1e81--; *::*) export *; }");
tryItOut("if( \"\" .prop = true) { if ((__proto__ |  \"\" )) \t{return __proto__; }} else {export prop; }");
tryItOut("/*infloop*/for(let ({ prototype: ({ __count__: __parent__ }) }) = window.propertyIsEnumerable(\"__proto__\"); prop, prop; yield __noSuchMethod__ = @foo) {const m, prototype; }");
tryItOut("{return; }");
tryItOut("L:while((<x/> >>= 3) && 0){/*infloop*/for(const __proto__ = null; (function ([y]) { })(); [[1]]) {(@foo); } }");
tryItOut("let (__noSuchMethod__) { ; }");
tryItOut("/*infloop*/for(var prop.prop = prop.prop; this.__defineSetter__(\"prototype\", (1 for (x in []))); (new *::*(this.zzz.zzz +=  \"\" , *))) {with({}) let __count__ = (function ([y]) { })(); }");
tryItOut("switch(this.__defineGetter__(\"constructor\", Function)) { case 0: /a/gibreak; default:  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ( /x/g )(<><x><y/></x></>) in  /x/g ) ;");
tryItOut("/*for..in*/L:for(const [, <xxx {prop  { return function  prototype ()<><x><y/></x></>((__parent__ *=  /x/ )) }  }={<><x><y/></x></> ?  /x/  : .2.__count__ = ((uneval(<><x><y/></x></>)))}/>, , ] in ((Math.pow)((eval(\"__noSuchMethod__ = arguments, __proto__;\", constructor.propertyIsEnumerable(\"__count__\"))))))L: {gc()/*infloop*/for(var constructor; <><x><y/></x></>; false) {gc()let __noSuchMethod__ = <y><z/></y>, constructor; } }");
tryItOut("with({__parent__: 'fafafa'.replace(/a/g, /a/gi)}){yield; }do  while(((__noSuchMethod__.valueOf(\"number\"))[new ((*::*).watch)((window)[<><x><y/></x></>], <><x><y/></x></>)]) && 0);");
tryItOut("");
tryItOut("/*for..in*/M:for(var [__parent__, __iterator__] = [(yield constructor.throw(eval(\"this.zzz.zzz\", ({}))))].filter((Math.pow).call) in ((__noSuchMethod__.__count__ = 033.__parent__))[({constructor: __iterator__})]) {yield (window / <x/>);if(false.prototype = __count__) { if (<x/>.__lookupGetter__(\"prototype\")) var __parent__;} else let constructor = this, __parent__; }");
tryItOut("/*infloop*/M:do let prototype = <x><y/></x>; while(3.141592653589793);");
tryItOut("/*for..in*/for(yield = ( /x/  , this.) += __iterator__ = <><x><y/></x></>++ in prototype) (window);");
tryItOut("if((new  /* Comment */<><x><y/></x></>(new ( \"\" )(<x><y/>\f</x>), ([11,12,13,14].map)))) { if ((__iterator__.prop)) {break (({a1:1}))\n }} else {return;(<x><y/></x>); }");
tryItOut("with({__parent__: @foo.propertyIsEnumerable(\"prop\")})({ prop: let, prototype: __iterator__ })");
tryItOut("gc()\n");
tryItOut("export  '' ; const __count__;");
tryItOut("with({prop: (this.zzz.zzz).propertyIsEnumerable(\"__parent__\")}){break L;var prop = [,,z1], __iterator__ =  /x/ ; }");
tryItOut("with({prop: (prototype.prop = this)})gc()");
tryItOut("prop");
tryItOut("/*for..in*/for(const __proto__ in (([1,2,3,4].slice)(((this.__defineGetter__(\"__noSuchMethod__\", (function  __parent__ (prop, __noSuchMethod__) { return <x><y/></x> } ).apply)))(undefined)))){export *;prototype; }");
tryItOut("/*infloop*/prop = [z1,,], __parent__");
tryItOut("if([,,z1]) {var prop, __noSuchMethod__;const __proto__ = __noSuchMethod__, __count__ = <x><y/></x>; } else  if (Array(([true if (prop)]), <x/>)) {if(<> { return __iterator__.__proto__ = arguments >= -0 <=  \"\"  } </>) { /x/g ; } }");
tryItOut("let (prototype = @foo, __proto__ = __parent__) { return; }\nL: {L:while((*) && 0){yield 3;yield window; }gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in prop) {gc() }");
tryItOut("__noSuchMethod__ = this.zzz.zzz/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in -1) { }");
tryItOut("try { throw StopIteration; } finally { let(constructor = *::*) { function(q) { return q; } } ");
tryItOut("");
tryItOut("yield __iterator__\nthrow StopIteration;");
tryItOut("with(this){/*for..in*/M:for(const __noSuchMethod__ = this['__iterator__'] in window.hasOwnProperty(\"__proto__\")) {if(1.3.__lookupGetter__(\"__iterator__\")) {throw __noSuchMethod__; } else const __count__ = false; } }");
tryItOut("/*infloop*/L:for(__iterator__ = <y><z/></y> |= prop.__proto__ getter= <ccc:ddd> </ccc:ddd>; 'fafafa'.replace(/a/g, function(y) { yield y; {}; yield y; })\f; ({ get prototype() { return; }  }).@*) {if([[]]) { if (*::*) yield @foo; else #3={a:#3#}}gc() }");
tryItOut(" /x/g ;\n(window);\n const prototype;");
tryItOut("while(( '' ) && 0){yield .2;(__parent__); }");
tryItOut("/*for..in*/for(var [__proto__, @foo & @foo] = yield (p={}, (p.z = <x/>)()) in #0=[<><x><y/></x></>]) yield;");
tryItOut("switch(__count__ = false >>> false) { case (<><x><y/></x></>.throw(false)) , \t(@foo.unwatch(\"prototype\")): return this;break;  }");
tryItOut("switch(null) { case ! { yield (new function(y) { yield y; yield *::*;; yield y; }(<>yyy</>)) } : break;  }");
tryItOut("M:switch(<><x><y/></x></>) { case 5: break;  }");
tryItOut("prop = false");
tryItOut("/*infloop*/for(var constructor; <><x><y/></x></>.watch(\"__proto__\", Function); ({ set __count__ prop (__proto__, constructor) { var prototype; } , __proto__ getter: @foo })) {export *; }");
tryItOut("return  /* Comment */*;");
tryItOut("return;");
tryItOut("/*for..in*/M:for(prototype = (1.3.__defineSetter__(\"__parent__\", function  prop () { yield <y><z/></y> } )) in ([null])) {/*for..in*/for(const constructor = ((p={}, (p.z = <><x><y/></x></>)())) in true) {{}return <x><y/></x>; } }");
tryItOut("return ((uneval([ '' ])));");
tryItOut("gc()");
tryItOut("/*for..in*/for(var __iterator__.__parent__ in (\f(new window += <x/>)( '' -- >= __proto__ = prototype = __noSuchMethod__++.watch(\"prototype\", (eval).apply))))\f{/*for..in*/for(const __noSuchMethod__ =  /x/g  > <><x><y/></x></> in (function ([y]) { })()) do {(prop); } while((this) && 0); }");
tryItOut("/*for..in*/L:for(const prop in <x><y/></x>\n/*\n*/<ccc:ddd> </ccc:ddd>//h\n) {}\n");
tryItOut("return prop = <x>\f<y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in constructor()) __proto__.prototype");
tryItOut("{yield;throw  '' ; }");
tryItOut("/*for..in*/for(var [prototype, constructor] =  /* Comment */<x/>.__lookupGetter__(\"constructor\") in prop.(({__noSuchMethod__: 0/0\f, __noSuchMethod__: <x/> }))) do {L:while((__noSuchMethod__) && 0){this; } } while(([,,].isPrototypeOf(3.141592653589793)) && 0);");
tryItOut("let __proto__ = *::*, __proto__ = @foo; const constructor;");
tryItOut("{L: {{}false; } }");
tryItOut("/*infloop*/do {*throw undefined; } while(null @  '' .yoyo(new (eval)(<x><y/></x>)));let __count__ = <x><y/></x>, __noSuchMethod__\n{break ;'haha'.split } const __noSuchMethod__;");
tryItOut("/*infloop*/L:do \f; while(new (false)(<x><y/></x>, __iterator__));");
tryItOut("/*for..in*/L:for(let prop = [,] in *) {return;let (__proto__ = [,]) { var constructor; } }");
tryItOut("/*infloop*/L:for(const __count__; __noSuchMethod__; <x/>) prop = undefined;");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in ) {var __count__; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const ({ __count__: __parent__ }) = 0x99; (({ __iterator__: __noSuchMethod__ }) = prototype.prop = eval(\"<><x><y/></x></>\", window)); __noSuchMethod__ = __noSuchMethod__) let __noSuchMethod__;");
tryItOut("{if(<><bbb xmlns=\"() ? 033.__noSuchMethod__ : (function (prop) { ( /x/ ); } )()\">yyy</bbb></>) {yield;/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in false) ; } else {export *; } }");
tryItOut("let(__parent__, __iterator__ = this) { return;");
tryItOut("this.zzz.zzz;");
tryItOut("");
tryItOut("/*for..in*/for(var constructor = [this.__defineSetter__(\"__noSuchMethod__\", function  each (__count__, __iterator__) { return __parent__ } )constructor] in <employee id=\"1\"><name>Joe</name><age>20</age></employee>) L: {return; }");
tryItOut("return (__iterator__.__parent__ = __iterator__ >>  /x/g );");
tryItOut("(<x/>);");
tryItOut("if(<><x><y/></x></>) return 3; else  if (true) {var constructor = ({a2:z2}), __count__;__noSuchMethod__ = false; } else break ;");
tryItOut("if((yield ({}).__lookupGetter__(window))) {return false;export //h\nprop; } else  if ((-1)) throw <x/>; else L:if(window) {(window); } else  if (<><x><y/></x></>) export prop;");
tryItOut("/*for..in*/__proto__");
tryItOut("[1,2,3,4].slice");
tryItOut("/*for..in*/for(const __parent__ in ((eval)(__parent__(<x><y/></x>)-= ''  instanceof ))){/*infloop*/for(prop; <x/>; (([1,2,3,4].map)(#1=[#1#]))) yield; }");
tryItOut("if() { if ((prototype = <x><y/></x> |= (yield  '' ))) __iterator__;} else export __proto__; const __parent__;");
tryItOut("this.zzz.zzz; const prototype;");
tryItOut("/*for..in*/M:for((<x><y/></x>.*) ^ (+*::*)['constructor'] in ((function  __noSuchMethod__ (({ __noSuchMethod__: ({ prop: __parent__ }), __proto__: __iterator__ }), __count__)( /x/g  <= constructor = [[1]].__defineSetter__(\"__parent__\", ( /x/ ).call)))((((false).__defineSetter__)(__parent__))()))){M:with({__noSuchMethod__: function ()true})1e+81;__iterator__; }");
tryItOut("throw window;\nlet __iterator__ = __iterator__;\n");
tryItOut("export __count__\n");
tryItOut("if(true) { if (__iterator__ = null) yield;} else *::*;");
tryItOut("export __proto__;0/0;");
tryItOut("/*for..in*/for(let constructor.each in (((constructor = constructor).__defineSetter__)(__proto__|=\nnull)))(<><x><y/></x></>);");
tryItOut("{ }");
tryItOut("__count__");
tryItOut("if(<><xxx>{prop}</xxx></>) export __noSuchMethod__; else  if (window &= prop)  else {export *;export __iterator__; }");
tryItOut("if(<bbb xmlns:ccc=\"[15,16,17,18].filter(<x/>,  '' ).hasOwnProperty(\"prop\")\"><ccc:eee></ccc:eee></bbb>) {/*infloop*/for(<><x><y/></x></>.throw(1.2e3).eval(<x><y/></x>\n); \n<><x><y/></x></>; this) {/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in @foo) export *;return; }export __parent__; } else {/*for..in*/for(__proto__ in window) {let function::__iterator__ = true, __parent__ =  /x/g ;({}).__lookupGetter__ } }");
tryItOut("/*for..in*/for(const (undefined || this) = ([1].propertyIsEnumerable(\"__proto__\")) in (Iterator())) throw null;");
tryItOut("throw <x/>\n{return 0/0;export *; }");
tryItOut("{gc()\t } const __count__;");
tryItOut("L: if(5.0000000000000000000000)  else const __noSuchMethod__ = *, constructor;");
tryItOut("/*infloop*/L:while(0.1)yield ((window)[({__count__: 3/0}).__iterator__]);");
tryItOut("var __noSuchMethod__, __parent__ = <><x><y/></x\t></>\n");
tryItOut("if(window) { if (new Function().*) (__parent__);} else {export __iterator__; }");
tryItOut("if(__iterator__.prototype.prop) { if (*)  else {const __count__ = null; }}");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/for(__iterator__ in ((Math.sin)(__proto__)))yield ({a2:z2});");
tryItOut("{if(__proto__ = this) { if (<x><y/></x> for (__parent__ in *::*)) switch(null) { default:  } else __parent__;} }");
tryItOut("/*for..in*/for(var prop in <x><y/></x>) <x><y/></x>");
tryItOut("L:if(<x/>) gc() else ;");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __proto__] = <x><y/></x> in this) yield *;\n/*for..in*/for([__parent__, __noSuchMethod__] = window in prototype) {(true);__count__ }\n");
tryItOut("switch(((p={}, (p.z = __proto__ = <x><y/></x>)()).unwatch(\"prop\"))) { case 5: if(((__proto__ = this)(<><x><y/></x></> ? @foo : <><x><y/></x></>)))  else {}break; default: break;  }");
tryItOut("if(prop) return <x/>; else  if (<><!--yy--></>) /*infloop*/do /*infloop*/M:for(let __proto__; 4.; <><x><\fy/></x></>) {export constructor;let prop; } while((<x><y/></x>)()); else /*infloop*/do 0 while(3.141592653589793);");
