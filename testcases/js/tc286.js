tryItOut("if(<><x><y/></x></>.prototype = <><x><y/></x></>) const prop, __count__ = 3/0\nL: throw <x><y/></x>; else  if ('fafafa'.replace(/a/g, 'haha'.split)) {{ '' ;with({}) throw  \"\" ; } } else {const __count__, __proto__;yield; }");
tryItOut("let(__iterator__) ((function(){let(__noSuchMethod__ = (uneval( \"\" ))) ((function(){yield new (({}).hasOwnProperty).call(-3/0, true).yoyo(eval(\"break ;\", [,,]));})());})());");
tryItOut("/*for..in*/for(let __count__ =  /* Comment */(uneval( /x/ ))\t in <x/>) {(0x99);export *;switch(@foo) { default: __noSuchMethod__ =  /x/ break;  } }");
tryItOut("/*infloop*/for(var [, ({ __iterator__: __iterator__, __parent__: [] }), ] = false; false ? false : *; (<x/>++) in (Function)()) yield __noSuchMethod__;");
tryItOut("/*infloop*/for(var prop = (({__parent__: undefined,  set __parent__ __iterator__ () { return __iterator__ }  })); let (__parent__) ({a2:z2}); __iterator__ = __iterator__) (__proto__);");
tryItOut("/*for..in*/for(let constructor in (\t((!RangeError([z1,,];, @foo)))(<><x><y/></x></>.prop = [[1]])))__iterator__ = 1.3, __parent__ = this;");
tryItOut("switch(@foo) { case 2:  }");
tryItOut("/*for..in*/for(let __proto__ in ((function () { yield <y><z/></y> } )([,,]))){export *; }yield;");
tryItOut("M:do throw <x><y/></x>;({ __parent__: __noSuchMethod__ }) while(((prototype.__parent__)) && 0);");
tryItOut("gc()");
tryItOut("with({__iterator__: \n \"\" }){break M; }");
tryItOut("<><ccc:ddd><ccc:ddd>yyy</ccc:ddd></ccc:ddd></>");
tryItOut("with({__iterator__: 3.141592653589793})__parent__ = [z1];");
tryItOut("L:if((prototype.__noSuchMethod__ = [z1,,])) yield <y><z/></y>; else {undefinedexport *; }");
tryItOut("{L: {let __noSuchMethod__, constructor\nyield; }(.2); }");
tryItOut("/*for..in*/for(var __proto__ =  /x/ .unwatch(\"__iterator__\") in <x/>) __count__, constructor = #1#;");
tryItOut("export prop;");
tryItOut("export *\n4");
tryItOut("do [1,2,3,4].map while(([({__count__: <x><y/></x>,  set __iterator__ prototype (__iterator__, __count__) { yield <><x><y/></x></> }  })].some(function (prop) { yield __proto__ } )) && 0);");
tryItOut(";");
tryItOut("__proto__");
tryItOut("L:if((({constructor: constructor.isPrototypeOf(<x><y/></x> |= true), __noSuchMethod__ getter: ((__iterator__) %= (__parent__.(<><x __noSuchMethod__: set.__count__ setter= /a/gi><y/></x></>))).__defineSetter__ }))) {(__count__); } else  if (__count__ ? prototype : null.throw(({ set __parent__()(({prop: <><x><y/></x></>, __count__: <x><y/></x> })) }))) var __iterator__ = 4.\n");
tryItOut("let (__proto__) { /*for..in*/for(let [__noSuchMethod__, __parent__] = undefined in <x><y/></x>) yield\n }");
tryItOut(";\ngc()\nthrow *;");
tryItOut("throw __count__;");
tryItOut("do { } while((void <x><y/></x>) && 0);");
tryItOut(";\n;\n");
tryItOut("let (__parent__, __parent__ = \n(eval(\"throw undefined;\", this))) { with({constructor: [prototype = <x><y/></x>].map((delete -3/0))})return window; }");
tryItOut("M:if(window) ; else  if ((Iterator())) export *; else export prototype;");
tryItOut("return this;");
tryItOut("M:switch( ''  / ([15,16,17,18].some(([1,2,3,4].map).apply, (new RangeError((new ((function::__iterator__).__defineSetter__)( /x/g ))))))) { default: if(@foo) { if ((++__count__ = <x><y/></x>)) {return <y><z/></y>;{while((4.) && 0)(<><x><y/></x></>); } }} else {(window); }case 3: L: {export prop; }case [] = ([this]): break;  }");
tryItOut("/*infloop*/for(--({__proto__: <y><z/></y>}); prototype = #1=[#1#]; [__noSuchMethod__ for (prop in false)])  for each (__noSuchMethod__ in ([] = [prop])) for (function::__iterator__ in (yield <x/>)) for each (__parent__ in 3/0 .@ true)");
tryItOut("<><x><y/></x></>export *;");
tryItOut("/*infloop*/M:while(this){ }");
tryItOut("if(prototype = <><x><y/></x\t></>) let (__iterator__, __iterator__ = <y><z/></y> << __count__) { M:if(arguments) {return;try { var __proto__, prototype; } finally { export *; }  } } else  if (<x><y/></x>.@foo) L: {export *; }\n else {(<><x><y/></x></>);{export prototype; } }");
tryItOut("/*infloop*/while(prop =  /x/g ){return;/*infloop*/for(var [, ({ prototype: prototype, prototype: prop }), ({ __parent__: constructor }), , []] = prototype+=@foo; ( /x/ .__lookupGetter__(\"constructor\")); (__noSuchMethod__.__iterator__ = yield __proto__)) {} }");
tryItOut("{prototype = <y><z/></y>;export *; }\n");
tryItOut("if((((yield [(new (<><x><y/></x></>)(<><x><y/></x></>)) ? (true.hasOwnProperty(\"__noSuchMethod__\")) : {}].some((1 for (x in [])))))[<><>(<><x><y/></x></>['__iterator__'] if (-0)) ? false.__lookupGetter__(\"prototype\") : this.*</></>])) /*for..in*/L:for(prototype = (uneval(<y><z/></y>)) in <x/>) yield <><x><y/></x></>;");
tryItOut("M:if(<><zzz>[11,12,13,14].sort</zzz></>) { if (__noSuchMethod__.prototype = (gc)(true).isPrototypeOf(<><xxx {__parent__}={__count__.__count__ = __parent__ = <><x><y/></x></>} /></>)) return;} else ");
tryItOut("return [15,16,17,18].sort((undefined).__defineSetter__, (__count__ = __noSuchMethod__));");
tryItOut("/*infloop*/for(setter; (p={}, (p.z =  '' )()); <x><y/></x>) var __count__ = 5.0000000000000000000000, constructor;");
tryItOut("for(let y in []);");
tryItOut("L:do {const __count__ = null\t;(eval).apply } while((<x><y/></x> /= <x><y/></x>) && 0)\n{L:if('fafafa'.replace(/a/g, /a/gi)) {yield;\nexport *;\nthrow __count__; } else  if (null) {; } }");
tryItOut("L:if(@foo/*\n*/) __iterator__ = #3={a:#3#}, __proto__ = [1]; else  if ((function ([y]) { })()) {break L; }");
tryItOut("if(({prop: [(<x><y/></x>.__lookupGetter__(\"__parent__\"))], constructor setter: Math.pow })) { if (prototype = (yield .2)) if(true) {gc()yield; } else  if ( \"\" ) return __iterator__; else (@foo >>> this);}");
tryItOut("L:if((Math.sin).apply) { if ([11,12,13,14].map) {[,,];export constructor; }} else {; }");
tryItOut("/*infloop*/for((new __noSuchMethod__(eval(\"prototype = <x><y/></x>.throw(1.3.__count__)\", ([15,16,17,18].some(gc, <x><y/></x> *= ({a1:1})))), ((yield <y><z/></y>.prototype)))); \r(new (1.3).apply(3.141592653589793).__count__)\n; ++prototype) {gc()__count__ = __proto__; }");
tryItOut("__noSuchMethod__ = __proto__;(*);");
tryItOut("/*for..in*/L:for((undefined)[false].prototype in this.__defineGetter__(\"prototype\", Function)) {yield; }");
tryItOut("if([1,,] + #3={a:#3#}.isPrototypeOf([z1].__noSuchMethod__) ? (<><x><y/></x></> , constructor for (__iterator__ in  /x/g )) : ( \"\" ).watch) L:if(this.__defineSetter__(\"constructor\", ({}).__lookupGetter__) ^ [__iterator__]) { if ([__noSuchMethod__].filter('haha'.split)) yyy} else /*for..in*/\tfor(let prototype = this in <x><y/></x>) export __parent__; else {/*infloop*/for(__iterator__%=false; window; constructor = (eval(\"<><x><y/></x></>\", <x><y/></x>).eval(undefined.throw(null)))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const (__noSuchMethod__) in  /x/g ) let constructor =  '' , __noSuchMethod__ = <x/>; } }");
tryItOut("/*infloop*/for(let __iterator__; __noSuchMethod__.prop = new (<><!--yy--></>)((gc().yoyo([11,12,13,14].some).hasOwnProperty(\"function::__proto__\"))); ({ __noSuchMethod__: prop }) = *::*) {if([].constructor) ([z1,,]); else var constructor = <y><z/></y>; }");
tryItOut("/*infloop*/for(let __count__; prop.(({})); [11,12,13,14].sort >>> ++<x><y/></x>) {__count__ = 0x99;yield this; }");
tryItOut("with(let (__proto__, prop =  /x/g ) 0.1);");
tryItOut("let(constructor = <><x><y/></x></>.@*.prop = <>< function  __proto__ ()(@foo.unwatch(\"__parent__\"))><</>, __proto__ = \n<x><y/></x>) ((function(){let(prototype = false <<  '' ) { for(let y in [5,6,7,8]) yield;})());/*infloop*/for(let __proto__; (function () { yield this; } ).apply|=<><x><y/></x></>; new ((({}).__lookupGetter__).call)((Boolean(<x><y/></x>, <><x><y/></x></>)))) { }");
tryItOut(";export __parent__;\nyield;\n");
tryItOut("let(prototype = ({}).hasOwnProperty( /x/g )) ((function(){yield <x/>;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in __proto__) {export *; }var constructor, __noSuchMethod__ = null;");
tryItOut("if((('fafafa'.replace(/a/g, ({a2:z2})))((*::*)(3.141592653589793)))) if(constructor) ; else  if (new Error(false,  \"\" )) constructor = 1.2e3, __proto__ = window;");
tryItOut("var __proto__ = <x/>\t;");
tryItOut("if() { if (__iterator__.(false)) return window;} else ");
tryItOut("M:if(new (function(y) { yield y; <x><y/></x>;; yield y; })(<x/>) , 'fafafa'.replace(/a/g, ((033).watch).apply)) {yield;/*infloop*/L:do export *; while(__noSuchMethod__); } else  if (undefined) {yield;/*for..in*/for(var constructor in ((try { yield; } catch(__parent__) { const constructor = this, __count__ = *::*; } )( \"\" )))3; } else /*for..in*/for([__noSuchMethod__, prototype] = <x/> in <x/>) export __parent__;");
tryItOut("<x/>;continue L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in this) export *;");
tryItOut("L:with(({prototype: this}))__noSuchMethod__;");
tryItOut("if(-3/0) eval else  if ((let (throw  /x/ ;, constructor) <x/>)) {M:with({__iterator__: <x/>})export *; } else {export *;(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(let (<y><z/></y>)(<x><y/></x>) in ((/a/gi)(@foo.isPrototypeOf(this)))){var constructor;let __parent__; }\nconstructor = <x><y/></x>;");
tryItOut("prototype, __iterator__ = <>(null);</>;");
tryItOut("{ }");
tryItOut("prototype, __proto__ = (eval([[1]]))");
tryItOut("(uneval(*::*)).valueOf(\"number\")");
tryItOut("if(*::*) { if ( /x/ ) {throw *; }} else export *;");
tryItOut("let (__count__ = *.__parent__ = [1].__noSuchMethod__) { if(* / @foo) {gc()yield undefined; } else  if ((prototype = 1e81)) {<y><z/></y>;break L; } else  }");
tryItOut("; const __count__;");
tryItOut("var prop = *::*;");
tryItOut("yield;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("{do {if(1.3) prototype, prototype = <x><y/></x>; else  if (false) {} else gc() } while((__count__ = <x><y/></x>) && 0); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__ in *::*) {gc() }");
tryItOut("/*for..in*/for(var constructor.__parent__ in ((<y><z/></y>)(this.zzz.zzz))){yield; }");
tryItOut("if(<x/>) {var __noSuchMethod__; } else  if (1e-81) ;");
tryItOut("throw this; const __count__;");
tryItOut("/*for..in*/for(let [1,2,3,4].map()['__noSuchMethod__'] in ((({}).__lookupGetter__)([z1,,])))export __noSuchMethod__;");
tryItOut("/*for..in*/for([constructor, constructor] = #0=({prop: (<x><y/></x> if (undefined))}) in __count__ = <><x><y/></x></>) {/*infloop*/while(delete <x><y/></x>)export <><x><y/></x></>;yield this; }");
tryItOut("prototype = __parent__;");
tryItOut("/*infloop*/do for(let y in []); while((yield ( /* Comment */__proto__)));");
tryItOut("yield (yield <x/> !== ((<y><z/></y>).watch)(*::*)[(RangeError(new ( \"\" ).__defineSetter__(-3/0)))]);");
tryItOut("M:with((x::__iterator__.prototype if (@foo)) ? __count__ = new this(function (constructor, __parent__) { return  \"\"  } ) : (window(*)).hasOwnProperty(\"prototype\"))yield;\nreturn __parent__;\nyield  \"\" ;\n\n");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("if(( for (prototype in ((function::__proto__))))) gc() else {L:with(prototype.__proto__ getter= (new Function(\"throw <><x><y/></x></>;\"))){let __iterator__ = *::*, prop; } }");
tryItOut("/*for..in*/for(__parent__ = __parent__ =  /x/ .throw( /x/ ).* in new  /x/g (false)) export *;");
tryItOut("/*for..in*/for(constructor = <zzz>(function ([y]) { } ?  /x/g  : null).eval(0/0 ^ function(id) { return id })</zzz> in (prototype = __count__)) if(0/0) undefined; else {<y><z/></y>; }");
tryItOut("if(null ? @foo : __count__) {continue\f M;__proto__, __proto__; }L:if(({ __parent__: try { gc() } finally { yield __count__; }  }) = (export *)) { if (('fafafa'.replace(/a/g, gc))\t) {}} else {continue ;(undefined); }");
tryItOut("L: yield 0/0;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var x::constructor((<><x><y/></x></>.throw({}))) in @foo ? 1.2e3 : <x><y/></x>.throw(false)) yield *;gc()");
tryItOut("/*for..in*/M:for(let __proto__ in  /x/ ) {var __count__, __proto__ =  /x/g ; }");
tryItOut("/*for..in*/for(const __iterator__ in try { return <y><z/></y>; } finally { __parent__, __proto__; } ) {return; }");
tryItOut("{}\nyield; const constructor;");
tryItOut("L: (<x><y/></x>);");
tryItOut("with({__proto__: (uneval(void arguments))})/*infloop*/M:for(const prop; (-this); this.__defineSetter__(\"__proto__\", function ()this)) yield;");
tryItOut("constructor const __noSuchMethod__;");
tryItOut("switch((4. ? <><x><y/></x></> : window)) { default: break;  }");
tryItOut("with((1 for (x in []))){/a/gireturn; }");
tryItOut("/*infloop*/M:do throw __noSuchMethod__; while((({__count__:  == [15,16,17,18].some(eval, <><x><y/></x></>)})));");
tryItOut("<{__iterator__}><ccc:ddd> </ccc:ddd>\r</{__iterator__}>");
tryItOut("/*infloop*/do export __noSuchMethod__; while(prop);");
tryItOut("for(let y in [5,6,7,8]) return __parent__;");
tryItOut("{/*infloop*/M:for(\n /x/g ; ({ getter: Math.pow }); ({__noSuchMethod__: <x><y/></x>}).__defineSetter__(\"constructor\", __noSuchMethod__ = <x/>)) (__parent__) = constructor; }");
tryItOut("/*for..in*/for(let __iterator__ in <y><z/></y>.__parent__) /*infloop*/for(*::*; <><x><y\n/></x></>; null) {}");
tryItOut("constructor = __proto__;");
tryItOut("/*infloop*/while(new (function (prop)__parent__)(@foo).isPrototypeOf(@foo , [1,,]).__lookupSetter__(\"__noSuchMethod__\"))M:if(let(__count__ = 0.1, prototype = new 'haha'.split()) ((function(){this.zzz.zzz;})());) yield; else  if ((<x><y/></x> || ({a1:1}) + <x><y/></x>.(null))[false.@foo]) __noSuchMethod__ = prototype, function::__count__;");
tryItOut("do with({__noSuchMethod__: ({})}){yield; } while((constructor = __iterator__: @foo) && 0);");
tryItOut("L:with({__proto__: [<zzz>true</zzz>].sort(new Function) .@x:: window})switch(undefined) { case 0: \nthrow __noSuchMethod__;default: break; <y><z/></y>;break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in null) return;");
tryItOut("if(~__count__ = ({ __noSuchMethod__: [constructor, , function::constructor], __iterator__: prototype })) { if (new (( /* Comment */ /x/ ).hasOwnProperty(\"__iterator__\"))((constructor = this),  \"\" )) do {gc() } while(( '' ) && 0);} else with({__iterator__: #1#}){yield false;{} }");
tryItOut("M:if(this.zzz.zzz) {/*infloop*/do {export __proto__;let prop, constructor = []; } while(__iterator__); } else  if ((__count__.__noSuchMethod__ setter= function(q) { return q; })) /*for..in*/for(const __count__ = @foo in <><x><y/></x></>) (-0); else 1.3;");
tryItOut("/*infloop*/while( /x/g )if(<y><z/></y>) {return;(@foo); } else const arguments, __noSuchMethod__ = <x><y/></x>;");
tryItOut("L: let __iterator__ = 1.3;");
tryItOut("switch(window .@*:: ({a2:z2}).__lookupGetter__(\"prototype\")) { default:  }");
tryItOut("if([] = #3={a:#3#}) {continue M; } else  if (<xxx {constructor}={(constructor.prototype getter= function  __count__ (prop, __proto__) { let __proto__, prototype = [,,z1]; } )} />) while((<><x><y/></x></> .@ <x><y/></x>) && 0)return <><x><y/></x></>; else break M;");
tryItOut("M:with({prop: 0/0})export *;");
tryItOut("with({__noSuchMethod__: (__count__.propertyIsEnumerable(\"__parent__\"))}){yield; }");
tryItOut("let __count__ = .2, __proto__ = *::*;");
tryItOut("with\f([,]){}\n\n");
tryItOut("while((<y><z/></y>.throw(window)) && 0)var prop =  /x/g , __proto__;");
tryItOut("if(( /x/ .watch(\"__count__\", new Function))) {let __parent__, prop; } else { \"\" ; }");
tryItOut("\n\f");
tryItOut("return;");
tryItOut("let setter = <x><y/></x>yield");
tryItOut("/*infloop*/while( '' ){const __count__;export __iterator__; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(new (/a/gi)().watch(\"__iterator__\", [<><x><y/></x></> if (*::*)]); (__proto__).call(window.throw(arguments),  '' .__defineSetter__(\"__proto__\", Math.sin), *) << <><x><y/></x></>.*; this) {do yield; while((new this) && 0);return; }");
tryItOut("/*infloop*/while(this.__defineGetter__(\"constructor\", Math.pow) .. new Date())const prototype;");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].slice)) { if ((eval(\"throw [z1];\", (<><x><y/></x></>).throw(constructor.__noSuchMethod__ = arguments)) > <x><y/></x> + this)) { }} else {/*for..in*/M:for(try { throw *; } catch(__noSuchMethod__ if null) {  } catch(prototype if (function(){gc()})()) { {} } catch(@foo) { (<><x><y/></x></>); } finally { break ; }  in ((Function)(<x/>.eval(<y><z/></y>))))yield *::*; }");
tryItOut("return new RangeError();\ndo export *; while((*) && 0);\n");
tryItOut("{if(null >>= @foo) {let prototype = @foo, constructor = this;var prototype; } else export __parent__;/*infloop*/for(const __iterator__; (__noSuchMethod__ = set = [,,]); (let (__iterator__ =  /x/g , prop = <x><y/></x>) [15,16,17,18].map(function  constructor (prototype, constructor) { yield {} } , <x><y/></x>))) /*for..in*/M:for(__proto__ in window) export __count__; }");
tryItOut("/*infloop*/while((@foo ?  \"\"  : true.hasOwnProperty(\"__iterator__\"))){}");
tryItOut("/*infloop*/while((constructor.__noSuchMethod__ getter= ( ''  && <><x><y/></x></>).__defineSetter__))const prototype, __parent__\n");
tryItOut("if([11,12,13,14].map) {/*infloop*/for(\t__iterator__; (prop.__iterator__); constructor = window) <y><z/></y>;function(q) { return q; } } else {@foo;/*for..in*/for(let [prop, __parent__] = (<><x><y/></x></> .. <><x><y/></x></>) in  \"\" ) {gc() } }");
tryItOut("if((@foo.constructor = 3)) return\nyield; else return;");
tryItOut("/*infloop*/for(var constructor; <x><y/></x>([[]], this); (#1=this.__lookupGetter__(\"__proto__\"))) {export *;export *; }");
tryItOut("/*infloop*/for(<{__parent__}><ccc:ddd>yyy</ccc:ddd></{__parent__}>; constructor.constructor; ([11,12,13,14].filter && (<><x><y/></x></> in [,]))) gc()\n(function ([y]) { })();\n const __noSuchMethod__;");
tryItOut("__count__ = __parent__; const __noSuchMethod__;");
tryItOut("let(__proto__) { return *::* %= true;");
tryItOut("while((@foo) && 0)(new Function(\"(<x><y/></x>);\"))");
tryItOut("__parent__");
tryItOut("if(prop) export *; else const __count__ =  '' , __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("/*for..in*/M:for(let (__iterator__.hasOwnProperty(\"__noSuchMethod__\"))(<bbb xmlns:ccc=\"[[]]\"><ccc:eee></ccc:eee></bbb>) in [[1]]) {__parent__gc() }");
tryItOut("with(*::*){L: {{} } }");
tryItOut("/*for..in*/for(const __parent__ in ((function(q) { return q; })((yield window))))export *");
tryItOut("__count__ = prototype;");
tryItOut("/*for..in*/for(var [__parent__, prototype] = constructor = this in <x><y/></x>) {const prop, prop = <x><y/></x>;throw <><x><y/></x></>; }");
tryItOut("L: export *");
tryItOut("/*for..in*/for(var __noSuchMethod__.__proto__ in (({})())) /*infloop*/L:for(var __count__; <x/>; setter) <x><y/></x>;");
tryItOut("if(()) /*infloop*/do {return; } while(*::*); else  if \n((-0)\n) /*for..in*/for(let prop in *) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <x><y></x>) if((-1)) { if ([1,,]) prototype = [,,];} else {throw <x><y/></x>; }");
tryItOut("\nif(<x><y/></x>) {([]); } else  if (<x><y/></x>\t) (true); const __proto__;");
tryItOut("if(prop >>> window) if(window) { if (function(id) { return id }) break M;} else export *; else  if () {const prop;return; } else var constructor;");
tryItOut("try {  } catch(__proto__) { export *; } ");
tryItOut("@foo\n{}");
tryItOut("if(<x/>) gc() else  if (window) {yield <x/>;return 1.2e3; }");
tryItOut("/*for..in*/for(const __proto__ =  /x/  in  '' ) M:if(<y><z/></y>) { if (<x><y/></x>) {gc() } else (__noSuchMethod__);}");
tryItOut("{let(__parent__ = *::*, __parent__ = __noSuchMethod__;) { throw __count__;with({__parent__: {}.eval(((void 033).__defineGetter__(\"__count__\", Function)))}) }");
tryItOut("let (__count__) { let(__count__) ((function(){;})()); }");
tryItOut("if([<x><y/></x>.(*) for (prop in <x><y/></x>) for each (prototype in <x><y/></x>)]) { if (new this.__defineSetter__(\"prop\", (1 for (x in [])))()) {continue ;\nyield <><x><y/></x></>;\n }} else \tbreak ;");
tryItOut("/*for..in*/for(const constructor in ((function(q) { return q; })(this.__iterator__)))do {export *; } while((__noSuchMethod__ + prototype) && 0);, __parent__.isPrototypeOf(__parent__)");
tryItOut("return __parent__;");
tryItOut("if(__count__) export  \"\" ; else {gc() }");
tryItOut("if(<x/>) { if (/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in <x/>) var eval) yield;} else this;");
tryItOut("return;return;");
tryItOut("/*for..in*/for(prop =  /x/  in this.__defineGetter__(\"prototype\", <x><y/></x>)) {__noSuchMethod__ setter: (<x/>).watchM:if(yield (<><x><y/></x></>)) L:with(<y><z/></y>){let __parent__;__count__, __noSuchMethod__; } else export *;(1 for (x in [])) }");
tryItOut("return;");
tryItOut(" { yield [11,12,13,14].filter }  const __noSuchMethod__;");
tryItOut(";\nM:with({__parent__:  /x/g }){export __iterator__;(<x/>); }\n");
tryItOut("return;");
tryItOut("/*infloop*/for(constructor = (<x><y/></x> if (<y><z/></y>)); (new (function (__noSuchMethod__) { export __iterator__; } ).call()); <><x><y/></x></>.constructor) {yield <x/>; }prop = <x><y/></x>, __noSuchMethod__ = *;");
tryItOut(";");
tryItOut("if(<y><z/></y>.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))) {\t if ( ''  >>>=(function ([y]) { })()) {export prototype;<x><y/></x>; } else yield;}");
tryItOut("if(__proto__) yield <><x><y/></x></>; else  if ((3.propertyIsEnumerable(\"constructor\"))) {prop; } else __count__ = <x><y/></x>\nif(<x><y/></x>) {; } else var __count__ = null, __parent__;");
tryItOut("let ([] = (\n'this), __iterator__) { if(033 !== 1.3.__defineSetter__(\"prop\", [1,2,3,4].slice)) { if (window) __count__; else ;} }");
tryItOut("let __iterator__;");
tryItOut("L: {if(<y><z/></y>.@foo) {var __noSuchMethod__ = <x><y/></x>;gc() } else  if ([1,,].__proto__) {true = <y><z/></y>; } else yield -1; }");
tryItOut("{let (constructor) { (__iterator__); }\nreturn #3={a:#3#}\n\n }");
tryItOut("{\t{constructor, __count__; }; }");
tryItOut("const __iterator__;{yield;var prop = -1; }");
tryItOut("while((RegExp((__parent__.__count__.unwatch(\"__noSuchMethod__\"))[(let.__count__ = (undefined)[window])], [11,12,13,14].sort ==  /x/g .eval((let (__noSuchMethod__ = <y><z/></y>, prototype = <><x><y/></x></>) undefined.constructor)))) && 0)if(<x><y/></x>.__defineGetter__(\"__iterator__\", /a/gi)) { if ((eval(\"const __proto__ = __noSuchMethod__, __iterator__ = window;\", <x/>)) ? (-3) : (uneval(window))) {return;( '' ); }} else {yield  '' ; }");
tryItOut("if(this.watch(\"__proto__\", function (prototype, __parent__)window) << (this.watch(\"__noSuchMethod__\", Function)).\n__lookupSetter__(\"__count__\")) { if (prototype = <><x><y/></x></>) {return; } else gc()}");
tryItOut("if(window -= prop.watch(\"prop\", (<y><z/></y>).watch).throw([11,12,13,14].some || <x><y/></x>.constructor = undefined)) if((typeof *)) { { yield prototype } export __parent__; } else {export prop; } else  if (#1=[#1#]) {throw <><x><y/></x></>; } else {export *;/*for..in*/for(var [prop, prototype] = (prototype.eval(@foo)) in [[1]]) __noSuchMethod__ = window; const __parent__; }");
tryItOut("/*infloop*/for(__count__; (window)().hasOwnProperty(\"__count__\"); __iterator__.0/0) ;");
tryItOut("if((<><x><y/></x></> == <y><z/></y>.valueOf(\"number\"))) { if ( /x/ .valueOf(\"number\")\n) return; else /*for..in*/for(case false: break; return __noSuchMethod__;default: break; <><x><y/></x></>;break;  in ((3.141592653589793)(<x><y/></x>))){export __noSuchMethod__; }}");
tryItOut("with({__parent__: null.throw(<x><y/\f></x>)}){export *; }");
tryItOut("(true).__defineSetter__\nlet __noSuchMethod__;\n");
tryItOut("/*for..in*/for(let prop in new (function (constructor, prop) { return this } )(())) if([[]]) export __parent__; else  if ([1]) {<x><y/></x>;( \"\" ); } else ;");
tryItOut("/*for..in*/L:for(let [__count__, prop] = if(<y><z/></y>) { if (\") {export __count__; } else var prototype, function::__parent__;} = [] in (({__iterator__: <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>}))) if(this) { } else <x><y/></x>;");
tryItOut("yield <><x><y/></x></> /= <x><y/></x>.\f__noSuchMethod__ = window;");
tryItOut("for(let y in [5,6,7,8]) constructor = prop;");
tryItOut("/*infloop*/for(({ __parent__: constructor }) =  /* Comment */ /x/ ; window >>> <x><y/></x>; 0/0.*) {return; }");
tryItOut("M:if(#2=[null]) { if () export *; else throw  '' ;}");
tryItOut("if(<x><y/></x>) {undefined;const __iterator__ = [,], __count__ = *::*; } else {constructor = <x><y/></x> }");
tryItOut("with({__noSuchMethod__: (p={}, (p.z = window)())})export __parent__;with({__noSuchMethod__: 1e-81}){yield true; }");
tryItOut("let(__parent__ = <ccc:ddd><x><y/></x> </ccc:ddd>, __noSuchMethod__ = __proto__) { {}");
