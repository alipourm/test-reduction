tryItOut("with(*::* %= \f*::*){const __parent__;(this); }");
tryItOut("return;__noSuchMethod__;");
tryItOut("with([(__parent__ = @foo)].some('haha'.split) ?  \"\"  : <><x><y/></x></> instanceof window){L:with(window >>> <><x><y/></x></>){M:if(<><x><y/></x></>) { if (undefined) {gc() } else {export prototype; }}yield this; }/*infloop*/for( /* Comment */<x><y/></x>; (yield  /x/ .__defineSetter__(\"prototype\", /a/gi)); (uneval(<><x><y/></x></>))) {{/*infloop*/do export prop; while(this); } } }");
tryItOut("/*infloop*/M:while((prototype = )){(null).__defineSetter__return; }\n{return; }");
tryItOut("/*infloop*/for(constructor.(this.prototype);  /x/ [ \"\" ];  \"\"  /= <x><y/></x>) {__noSuchMethod__ = [1], __noSuchMethod__; }");
tryItOut("export *");
tryItOut("/*for..in*/for(constructor in ((gc)(<><x><y/></x></>.__defineSetter__(\"prop\", (new Function(\"export __iterator__;\"))))))L: export constructor;");
tryItOut("/*infloop*/M:while((this for each (constructor in __iterator__)))gc()");
tryItOut("if([__proto__ if (window)]) { if (((__noSuchMethod__ =  \"\" ).valueOf(\"number\"))) if(@foo) this; else {{}export constructor; }}");
tryItOut("/*for..in*/for(let false in __noSuchMethod__) (@foo);");
tryItOut("if(*::*) { if (__iterator__) {(new Function(\"export *;\")) }} else {let __count__, prop; }");
tryItOut("while(((prototype)\t = [11,12,13,14].some) && 0){__parent__(<><x><y/></x></>); }");
tryItOut("this.zzz.zzz;");
tryItOut("L:switch(this.@*) { default: case 5: gc()break;  }");
tryItOut("/*infloop*/for(const ({ prototype: ({ __proto__: __noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__ = undefined; }), __iterator__: ({ prop: constructor, __iterator__: [, __proto__, , , ({ constructor: prototype, __noSuchMethod__: ({ __proto__: __noSuchMethod__, prototype: [prototype, __count__] }) })] }) }) = constructor = ({ __iterator__: __iterator__ }); yield [<><x><y/></x></>].sort(new Function); __count__ = __parent__) /*infloop*/do {<x><y/></x>; } while((__noSuchMethod__.__iterator__ = -<x><y/></x>.throw((({prop: #1=[#1#] }))[__count__ = window])));");
tryItOut("let(prop = ({prototype: [z1].eval(prototype)})) ((function(){return;})())\n\n(prop);\n");
tryItOut("/*infloop*/do {throw *::*;return; } while(({__iterator__: (__iterator__.__count__ = *), __count__: @foo }));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ({ prototype: constructor }) in <><x><y/></x></>) {return;yield; }");
tryItOut("/*infloop*/do  while((new 3.141592653589793()))\nbreak ;");
tryItOut("for(let y in [5,6,7,8]) export prototype;");
tryItOut("/*for..in*/for(var prototype in <x/>) if(__count__) return; else  if (4.) ;");
tryItOut("if(this) const __proto__;");
tryItOut("if(eval(\"/*infloop*/M:do  } while((null)([[]], window));\", 1e-81).valueOf(\"number\")) return; else  if (undefined) /*for..in*/for(__iterator__ in <x/>) {{} } else {\n}");
tryItOut("if(\n[,].valueOf(\"number\").yoyo( /x/g  @ undefined)) yield <><x><y/></x></>; else  if ((({}).hasOwnProperty)()) { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in <y><z/></y>) const __proto__ = <x><y/></x>, __count__\nreturn <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(var prop.__parent__ in __iterator__) yield;");
tryItOut("");
tryItOut("continue ;");
tryItOut("L: /*for..in*/for(const prop in <><x><y/></x></>) yield;");
tryItOut("return;");
tryItOut("try { export *; } finally { /a/gi } ");
tryItOut("/*infloop*/while(((<x><y/></x>)(null)|=false ? <x><y/></x> : true)){export *; }");
tryItOut("M:with((1 for (x in [])))/*infloop*/for(var [, , , ] = ({prototype: *::* }); __iterator__.__noSuchMethod__ = window; [[]] && <x/>) ");
tryItOut("do {{var __iterator__ = window, prop = <><x><y/></x></>;<y><z/></y>; } } while((#3={a:#3#}) && 0);");
tryItOut("while((__iterator__ setter: function (__noSuchMethod__)__proto__.watch(\"__noSuchMethod__\", function  __parent__ (__proto__) { return  /x/  } )) && 0)if([,,]) { if ([[[]]].sort(window)) {yield; } else {let __noSuchMethod__, __iterator__; }}");
tryItOut("/*for..in*/M:for(const [constructor, prop] = (this.unwatch(\"__proto__\")) in constructor = (*::*(prototype))) {continue ;{*::*; } }");
tryItOut("L: yield yield;;");
tryItOut("M:if() { if (/*infloop*/for(this; window.watch(\"prototype\", *::*); [3.141592653589793]) __proto__ in <x><y/></x>.isPrototypeOf(__proto__)) {}} else while((<y><z/></y>) && 0)__iterator__, constructor = this;");
tryItOut("if(new (this)(prop)) {yield;return #3={a:#3#}; } else return __iterator__;");
tryItOut("switch(((\n<><x><y/></x\f></>).@*)) { case __iterator__.@foo: throw <y><z/></y>;case  /x/ : yield 1e+81; }");
tryItOut("do {return; } while(((__proto__)[<x><y/></x>]) && 0);");
tryItOut("switch(const constructor !== Boolean()) { default: throw __noSuchMethod__;\nexport *;\nbreak; case 0: continue ;break;  }");
tryItOut(";");
tryItOut("if(([11,12,13,14].map)) {throw <><x><y/></x></>;{} } else  if ((new  /x/ [0.1]())) {;return; } else /*for..in*//* nogeckoex bug 349964 */M: for  each(let x::prop in constructor) {export *;return; }");
tryItOut("let(constructor) { this.zzz.zzz;");
tryItOut("switch(<y><z/></y>) { case 6: M:if(__parent__.(#1=[#1#])) { if () {(<><x><y/></x></>);__proto__, __count__ = __noSuchMethod__\nthrow ({}); }} else break; throw (eval(\"gc()\", [15,16,17,18].\fsome(null, __count__)));break; case this.__defineGetter__(\"__parent__\", function   /x/g  (__proto__, prototype) { yield -3/0 } ): try { ; } catch(__count__ if *::*) { yield false; } catch(__iterator__ if (function(){Math.pow})()) { break ; } catch(constructor) { *::* } finally { prop = undefined, __proto__; } \nMath.sin\nbreak; break;  }");
tryItOut("/*infloop*/for(let __count__ = <y><z/></y>; 4.; #1#) continue M;");
tryItOut("L:if(<x><y/></x>.watch(\"prototype\", (<><x><y/></x></>).watch)) return; else {var constructor, __count__ = <x/>; }\n");
tryItOut("for(let y in []);");
tryItOut("{throw [,,z1];export __noSuchMethod__; }");
tryItOut("{ }");
tryItOut("let ( if ([]), prototype) { function  prototype (__noSuchMethod__) { yield @foo }  }");
tryItOut("{let (__noSuchMethod__ = <><x><y/></x></>.@*.unwatch(\"__parent__\")) { function  constructor () { yield null } \ngc() }switch((false.valueOf(\"number\")).__iterator__) { default: break; case 8:  } }");
tryItOut("return;");
tryItOut("/*infloop*/L:while((undefined.eval(@foo)))if(true >>= this === (window.propertyIsEnumerable(\"__proto__\")) for (__parent__ in <x><y/></x>) if (undefined)) throw [,,z1]; else  if (<y><z/></y>.__defineSetter__(\"__count__\", function(y) { yield y; Math.pow; yield y; }).watch(\"constructor\", function(q) { return q; })) ");
tryItOut("if([11,12,13,14].sort) { if (eval(\"/*infloop*/L:do {;return false; } while(*::*);\", undefined /= <x/>)) {}(1 for (x in []))} else L:if([z1].watch(\"__iterator__\", <x><y/></x>)) {break L;yield *; } else  if (this.__defineSetter__(\"x::__proto__\", /a/gi)) (undefined); else {(<x/>);gc() }{\n }");
tryItOut("if(false >>> *) @foo else  if (([__iterator__ if (<x><y/></x>)])) {while((true) && 0){continue L; } } else ");
tryItOut("{return; }\n/*infloop*/for(let __noSuchMethod__; [,]; <y><z/></y>.@*) <><x><y/></x></>.prototype");
tryItOut("if(__parent__) { if (<>(Math.sin(<x/>))</>) { } else { }}");
tryItOut("with({prop: constructor}){yield; }");
tryItOut("return this.__defineGetter__(\"__count__\", Math.sin);");
tryItOut("prop, <x/> >> Math.sin");
tryItOut("if(1.2e3) __parent__; else  if (__parent__) gc()");
tryItOut("with({__iterator__: (-3/0)[ '' ].*}){constructor =  /x/g ; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.prototype in true) 3/0/*infloop*/M:for(var ({ prototype: ({ function::constructor: [] }) }) = [__count__].__proto__ = __parent__.({ prototype: __parent__ }); ; ((window)().eval(eval(\"continue M;\", arguments))).prop) yield <x><y/></x>; }");
tryItOut("L: {/*for..in*/for(let  /x/g ['__noSuchMethod__'] in <x><y/></x>)  /x/g  }");
tryItOut("do {<x><y\t/></x>;function  __iterator__ (__iterator__) { return false }  } while((<y><z/></y>) && 0);");
tryItOut("\n(Math.pow).call");
tryItOut("let (({ __parent__: ({ __parent__: __count__, __noSuchMethod__: constructor }), prototype: prototype }) = @foo.eval(__noSuchMethod__), constructor) { {constructorvar __noSuchMethod__; } }");
tryItOut("let (prop = ((function ([y]) { })() <<=  \"\" )++) { try { export *; } catch(__proto__) {  }  }");
tryItOut("if(#0=[(eval(\"break ;\", undefined))]) {export constructor; } else  if ([15,16,17,18].sort((prop = false).__defineSetter__, [<x><y/></x>.hasOwnProperty(\"__iterator__\") for (__iterator__ in 5.0000000000000000000000) if (this)])) {export __proto__;{} }");
tryItOut("/*for..in*/for(let prop = <y><z/></y> instanceof true in <><x><y/></x></>.watch(\"prop\", function (__parent__, constructor) { return  /x/  } )) {if(window(<><x><y/></x></>, -3/0) ? <x><y/></x> .. <><x><y/></x></> : [15,16,17,18].some(function  constructor (constructor, __parent__) { yield * } , __parent__)) { if (.2 > window[*::*]) {const __noSuchMethod__, constructor =  '' ;L:if(*) {let prop = *::*; } }} else {gc() const __proto__;4. } }");
tryItOut("/*infloop*/while(prop = <y><z/></y>){/*infloop*/for(let prop; (this[<x><y/></x>]);  ''  ? <><x><y/></x></>\t : <x/>) (<y><z/></y>); }");
tryItOut("try { throw prop; } catch(__iterator__) { for(let y in [5,6,7,8]) var __iterator__ =  /x/ , __iterator__; } finally { yield __iterator__.__proto__ getter= (( /x/ ).watch).apply; } ");
tryItOut("let (__iterator__) { if(\n<x/> | #2=({prototype: (@foo.__parent__)})) {/*for..in*/M:for(constructor = <><zzz>undefined</zzz></> in  /x/g ) /*for..in*/for([prototype, __count__] = <x/> in window) yield  \"\" ;yield; } else  if (RangeError( \"\"  > prototype)) var  = 033; }");
tryItOut("L: {gc()(this); }");
tryItOut("do {M:if((__noSuchMethod__)) {yield; } else __count__break L; } while((void (<><x><y/></x></>[this] |= (__parent__%=constructor))) && 0);");
tryItOut("return 4.;");
tryItOut("{while((this) && 0)\f }");
tryItOut("if(<x><y/></x>) { if (<y><z/></y>) const __noSuchMethod__ =  /x/g , constructor = <><x><y/></x></>; else {export __proto__;return  \"\" ; }}");
tryItOut("constructor");
tryItOut("return;\nexport __parent__\n\n");
tryItOut("L: /*infloop*/while(0.1)export constructor;");
tryItOut("M:if(#3={a:#3#}) { }\ngc()");
tryItOut("\fwhile(([11,12,13,14].filter.unwatch(\"({ constructor: __count__ })\")) && 0)Math.sin");
tryItOut("{let __noSuchMethod__ = @foo, prototype = <x><y/></x>;return eval(\"__noSuchMethod__\", window).isPrototypeOf(({constructor setter: function(y) { yield y; prototype, __count__; yield y; } })); }");
tryItOut("gc() const __proto__");
tryItOut("/*infloop*/do yield; while((yield [1]));");
tryItOut("/*for..in*/L:for(({ __parent__: __parent__, constructor: __iterator__ }) in ((<><xxx {__iterator__}={3.141592653589793 ?  ''  : window} /></>)(eval))){let ({ __proto__: constructor, __noSuchMethod__: __count__ }), __proto__ = <x><y/></x>;L:if(false) { if ( '' ) {try {  { yield <x><y/></x> }  } \rfinally { gc() }  }} else {return @foo;<><x><y/></x></>; } }");
tryItOut("do gc() while(((((p={}, (p.z = (<x/>)(<x><y/></x>) >= -0)())).propertyIsEnumerable(\"__parent__\"))) && 0);");
tryItOut("L: prototype = <x><y/></x>;");
tryItOut("/*for..in*/M:for(var [__iterator__, __iterator__] =  '' .__lookupGetter__(\"__iterator__\") = (function(q) { return q; }) in  /x/ ) {; }");
tryItOut("L: prototype");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in *::*) {continue ;break ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <><x><y/></x></>) throw <><x><y/></x></>\nwith({__noSuchMethod__: (p={}, (p.z = false)())}){throw <>__iterator__, __iterator__</>; }");
tryItOut("if(__parent__ = 1.2e3) { if (((([__proto__].map('haha'.split)))(@foo.prototype, null))) {break ; }} else let __proto__, prop = <><x><y/></x></>;");
tryItOut("/*for..in*/for(let [__proto__, __parent__] = prop in []) {return;throw -0; }\n{throw StopIteration;*; }\n");
tryItOut("/*infloop*/do {{}export *; } while(eval(\" \", <x><y/></x>));");
tryItOut("L: yield <><x><y/></x></>;");
tryItOut("( /x/g )\n");
tryItOut("do ; while((null) && 0);");
tryItOut("L:do throw function::delete; while((({__count__: <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>}) ? ({}).hasOwnProperty(new undefined(), <x/>) : <bbb xmlns:ccc=\"'fafafa'.replace(/a/g, (prop).watch)\"><ccc:eee></\tccc:eee></bbb>) && 0);");
tryItOut("{export *;export *; }");
tryItOut("L:with({prop: ((*::*)(<y><z/></y>) = [undefined for (__parent__ in 4.)]).valueOf(\"number\")}){/*infloop*/for(__parent__ = window;  /x/g ;  /x/ ) {0.1;<>case 5: return  /x/g ;break; return 1e4;default: __count__ = [[]];</>; } }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(__parent__ in 0/0) ;");
tryItOut("/*infloop*/do 4.\t; while((p={}, (p.z = *)())++)\nif(<x><y/></x>) {yield try { gc() } catch(prop if (function(){})()) { return; } catch(constructor) { ; } ;let __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in (__count__ = this >> 0/0 += <><x><y/></x></> ^= <x><y/></x>)) const ({ __parent__: ({ __count__: prop, prop: ({ constructor: __iterator__, __count__: prototype }) }), __noSuchMethod__: __parent__ }) = yield prop;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({a2:z2}) in (null <= __iterator__)) {yield ({a2:z2}); }");
tryItOut("/*infloop*/for(var ({ __count__: [] }) = (new (<><x><y/></x></>)(<><x><y/></x></>, true)); [__count__, , __noSuchMethod__, __proto__] = <x><y/></x>; (new \f(-__parent__.prop getter= 'haha'.split)(let (x::prototype, constructor) __proto__ =  /x/g , window))\t) {M:if(<x><y/></x>) { if ( /x/g ) continue M; else throw null;} }");
tryItOut("/*for..in*/for(let ({ __parent__: __iterator__, prop: __iterator__ }) in ((function  __parent__ ()window())()))export prop;");
tryItOut("/*for..in*/for(prop in throw {}) if(0x99.watch(\"__count__\", function(y) { yield y; 0x99;; yield y; })) {let prop; } else  if (1.2e3) ; else {return null;return  /x/ ; }");
tryItOut("\n\n<><x><y/></x></> = constructor, prototype;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __noSuchMethod__ = *::*) {yield; const __proto__;<x/>; }");
tryItOut("with({}) { return; } ");
tryItOut("return;\nwindow;\n");
tryItOut("break L;");
tryItOut("throw *; const prototype;");
tryItOut("{}");
tryItOut("let (prop, __proto__ = (3/0)[this]) { L:switch(((window if (<x/>)))) { prototype = *, ({ prototype: function::__parent__, __count__: <x><y/></x> }) } }");
tryItOut("/*for..in*/for(let __iterator__ in (([,,z1] for each (__iterator__ in #1=[#1#]) for each (__proto__ in 5.0000000000000000000000)))) {\nreturn;{/*for..in*/for(let __proto__ in constructor) return; } }");
tryItOut("/*infloop*/do {return; } while((this.__defineSetter__(\"function::__count__\", __noSuchMethod__)));");
tryItOut("export __noSuchMethod__;");
tryItOut("yield;");
tryItOut("__proto__, function::__proto__;");
tryItOut("L:do {(4.); } while((constructor) && 0);");
tryItOut("if((prototype.__parent__)) { if ([11,12,13,14].some) /*infloop*/L:for(null.yoyo(window); (__proto__ = ); @foo.unwatch(\"prototype\")) } else /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in this) {yield;; }");
tryItOut("if(* in [z1,,]) { if (<x/>.constructor =  /x/ ) {var prop; } else {return; }}");
tryItOut("return  /x/g ;\nM:while((<x><y/></x> > <x/>) && 0)Math.pow\n\nexport __proto__;\nexport __parent__;\n\n");
tryItOut("prototype = __noSuchMethod__;");
tryItOut("/*infloop*/do throw [,]; while((new ((*).watch)()));");
tryItOut("throw StopIteration;");
tryItOut("M:if(<><x><y/></x></>) {(false); } else  if ( /x/ ) {;{} }");
tryItOut("/*for..in*/for(var prototype in ((function(y) { yield y; with(<><x><y/></x></>){export __parent__; }; yield y; })((__noSuchMethod__.__parent__))))/*for..in*/for(let __count__ =  /x/  in  \"\" ) {Functionexport __parent__; }");
tryItOut("with(Number(__parent__, 0/0))var constructor = <><x><y/></x></>, prop; const __noSuchMethod__; const __noSuchMethod__;");
tryItOut("switch(null) { default: break; ;break; case 1: (null);break; case this:  }");
tryItOut("yield <x/>;");
tryItOut("/*for..in*/L:for(prototype = this.__defineGetter__(\"__proto__\", function(y) { yield y; ;; yield y; }) in *::*) {gc(){} }");
tryItOut("/*infloop*/while( '' )<x><y/></x>");
tryItOut("if(new prop()) (prototype); else {{}/*for..in*/for(const __proto__ in <x/>) <xxx {__proto__}={new (<><x><y/></x></>)()} /> }");
tryItOut("return;");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: ({ __count__: constructor }), __parent__: ({ prototype: __proto__ }) }) = <> </>; 'fafafa'.replace(/a/g, *); 1.2e3.__proto__ .@x::  \"\"  &  '' ) ");
tryItOut("/*for..in*/for(let constructor in ((({}).hasOwnProperty)(\n<x/>.watch(\"constructor\", Function))))var __proto__ = @foo, prop;");
tryItOut("if(new function(q) { return q; }(__iterator__.(({a2:z2})--\n))) function::prototype, __parent__ = true;\ngc()\n");
tryItOut("if([11,12,13,14].map\n) { if (( \"\"  >> __noSuchMethod__)) yield null; else {with({prototype: new ( /x/g )(, <><x><y/></x></>) &= [ \"\" ]})yield; }}");
tryItOut("for(let y in [5,6,7,8]) __parent__ = this;");
tryItOut("L:if(new constructor.__parent__ = let setter = true, __proto__ = true;()\n for (prop.__noSuchMethod__ in (uneval(__parent__))) if ( /* Comment */<><x><y/></x></>)) {with({__parent__: yield 'fafafa'.replace(/a/g, \tfunction(y) { yield y; (__iterator__);; yield y; });})return <x><y/></x>;{} } else  if (__parent__) L: {__noSuchMethod__ = <x/>;export __parent__; }");
tryItOut("{with( '' ){yield <x><y/></x>;; }return; }");
tryItOut("\nreturn;");
tryItOut("with((-0))yield <>\f<x><y/></x></>;");
tryItOut("with({}) { yield ((constructor = 1e81) in (__proto__ > [[]])); } ");
tryItOut("let __noSuchMethod__ = #3={a:#3#}; const prop;");
tryItOut("M:with(<><x><y/></x></>.@foo){; }\nL: {return; }\n");
tryItOut("L:if(prototype if (prop)) { if (++(this <<= <y><z/></y>) /= __count__) /*infloop*/do ({}).hasOwnProperty while(<x/>);} else {const __noSuchMethod__ = <><x><y/></x></>;gc() }");
tryItOut("if(new (new Function)()) {export *;gc() } else  if ([,,z1]) __proto__ = constructor, prop; else {export *; }");
tryItOut("/*infloop*/M:for(<><x><y/></x></>; __count__.__iterator__; new ({}).__lookupGetter__(true, <y><z/></y>)) {const __count__;; }");
tryItOut("/*for..in*/for(var __proto__ = ([15,16,17,18].map(Function, [1])).throw((#2=this))(#1=[15,16,17,18].some(function  __iterator__ (__parent__)<>/*</>yyy, true).*) in __noSuchMethod__%=([15,16,17,18].map([1,2,3,4].slice, ( /x/ .@*)))) ;");
tryItOut("(-1);");
tryItOut("/*for..in*/L:for(constructor in window.yoyo(1e+81(<x/>, __iterator__))) {yield;/*infloop*/do {gc(); } while(__noSuchMethod__); }");
tryItOut("/*for..in*/for(const __parent__ in ) {with({function::__count__: ([15,16,17,18].sort(<x><y/></x>, <><x><y/></x></>))})yield <><x><y/></x></>; }");
tryItOut("let(__count__ = __parent__) { throw 0x99;");
tryItOut("/*for..in*/for(var (1e4)([1,,]) in 1e4) {while((-0) && 0)Math.pow }");
tryItOut("with({constructor: (yield window , (*.watch(\"constructor\", ({}).__lookupGetter__)))}){with({prototype: ((({ prototype: __proto__ }) = @foo)())}){gc()return; } }");
tryItOut("/*infloop*/while(constructor = <y><z/></y>)/*infloop*/for(let ({ prototype: ({ __noSuchMethod__: [, ], __parent__: __noSuchMethod__ }), __iterator__: prototype }) = this.__defineGetter__(\"__noSuchMethod__\",  '' ); __proto__.eval(constructor).valueOf(\"number\"); ({ __noSuchMethod__: function::__count__, __proto__: __proto__ }) = __iterator__+= '' ) return;");
tryItOut("/*for..in*/for(var [constructor, __parent__] = (({ constructor: __iterator__, prototype: constructor }) = ({ prop: __iterator__ })) in <>*::*</>) /*for..in*/for(const [__iterator__, __count__] = this in <y><z/></y>) {({}); } const __noSuchMethod__;");
tryItOut("throw StopIteration;");
tryItOut("{}");
tryItOut("with({}) try { let(__noSuchMethod__ = prototype = <x><y/></x>) ((function(){[1,2,3,4].slice})()); } catch(prototype if (function(){with({})  { return <x/> } ;})()) { throw StopIteration; } catch(prototype if this()) { try { yield <><x><y/></x></>; } catch(constructor) { return; } finally { constructor; }  } catch(__parent__ if (function(){throw StopIteration;})()) { export __parent__; } catch(__iterator__) { for(let y in [5,6,7,8]) export *; } finally { \fyield constructor.constructor; } ");
tryItOut("{}");
tryItOut("do {  } while((true) && 0);");
tryItOut("{export prop; }");
tryItOut("/*for..in*/for(var [__proto__, __iterator__] = new (<x><y/></x>.(033))() in [z1]) {;gc() }");
tryItOut("/*infloop*/for((\n(this |=  /x/ )); this.__defineSetter__(\"prototype\", new Function).unwatch(\"__parent__\"); false.watch(\"__proto__\", (*::*).call).@*.unwatch(\"prototype\")) let (__count__ = undefined) { 3.141592653589793, __iterator__; }");
tryItOut("/*infloop*/while( /x/ ){/*infloop*/M:while(@foo){export __proto__;constructor; } }");
tryItOut("{continue ; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(let constructor.prop in ((function  __noSuchMethod__ () { return function ([y]) { }.eval(this.zzz.zzz &= ([<x/>].sort([1,2,3,4].map))) } )(eval(\"<><x><y/></x></>\", <><x><y/></x></>)))){if((constructor =  /x/ ).propertyIsEnumerable(\"__iterator__\")) Math.sin else  if (__proto__) {let prop;const __noSuchMethod__, prop = window; }/*infloop*/M:for(const constructor = ((<><x><y/></x></>)); [z1].__lookupSetter__(\"__proto__\"); ({ set prototype(prototype, prop) { yield undefined } , prototype: <\t><x><y/></x></> })) yield #1#; }");
tryItOut("/*infloop*/M:while(<{constructor}><!--yy--></{constructor}>){} const __proto__;");
tryItOut("{/*for..in*/for(const [__iterator__, constructor] =  /x/  in @foo) {'haha'.splitreturn window; }/*infloop*/M:for(const __proto__ = @foo; *; <><x><y/></x></>) return .2; }");
tryItOut("/*infloop*/for(var __parent__; window && this; __iterator__) __parent__");
tryItOut("yield;");
tryItOut("(<y><z/></y>); const __noSuchMethod__;");
tryItOut("/*for..in*/for(var ['__noSuchMethod__'] in ([11,12,13,14].filter)) {/*for..in*/for(const [__count__, prop] = <><x><y/></x></> &= false in 033) {const function::__count__ = this, __noSuchMethod__ = <><x><y/></x></>; } }");
tryItOut("if(<><zzz>(new Object( \"\"  for each (prototype in constructor = <><x><y/>/*\n*/</x></>)\n, \n@foo))</zzz></>) {/*infloop*/while(delete <x><y/></x>){function  getter (yield) { yield <x/> }  }switch((-null)) { default: prop } } else  if (__parent__-=([11,12,13,14].filter)) {M:if((this.__defineGetter__(\"__parent__\", gc))) {U } else {yield; } }");
tryItOut("for(let y in []);");
tryItOut("let constructor; const prototype;");
tryItOut("export __noSuchMethod__;\nlet prototype = 1e4;\n");
tryItOut("L: return;");
tryItOut("while(((@foo.__defineGetter__(\"<!--yy-->\", <y><z/></y>))) && 0)gc()");
tryItOut(" for ((__noSuchMethod__) in ([<x/> > @foo].some((function  __parent__ (__noSuchMethod__, __iterator__) { break ; } ).apply))) for each (__proto__ in #3={a:#3#}) for (__proto__ in #2=[<><x><y/></x></> !== <x><y/></x>]\n) if (<><x><y/></x></> >= null)");
tryItOut("switch((eval(\"try { yield; } finally { return; } \", (__count__ = prop)))) { default: break;  }");
tryItOut("return;\nexport __iterator__;\n\n{__noSuchMethod__, prototype =  \"\" ;let prototype = 1.2e3; }");
tryItOut("let (__iterator__) { ; }");
tryItOut("{return ;yield <x/>;/*infloop*/for(const __noSuchMethod__; [11,12,13,14].sort /= ( /x/  @ this); prototype = (*::* > window)) ; }");
tryItOut("if(({})) { '' ; } else  if (new Iterator()) {{yield; } }");
tryItOut("M:if(\n#1=[#1#]) { if (#2=({prop: ({ constructor: __noSuchMethod__ }) = true--.watch(\"prototype\", [1,2,3,4].slice)})) ;\nreturn <><x><y/></x></>;\n else yield;}");
tryItOut("/*infloop*/M:do {yield;continue ; } while((<x><y/></x>.__defineSetter__(\"__iterator__\", function(y) { yield y; throw __noSuchMethod__;; yield y; })));");
tryItOut("/*for..in*/for(const __proto__ = [this.__defineSetter__(\"__iterator__\", eval(\"<x><y/></x>\", <y><z/></y>))] in prototype) /*for..in*/for(const [__parent__, __parent__] = false() in new Number(-1)) {export *; }");
tryItOut("L:with(<x/>)break ;");
