tryItOut("/*for..in*/for([prop, __proto__] = (__parent__.__lookupGetter__(\"__proto__\")) in  /x/g  in [z1,,]) var constructor = prop, prototype =  \"\" ;");
tryItOut("if((\f[,] < <><x><y/></x></>)) yield; else  if (prop) {gc()return; } else ;");
tryItOut("/*for..in*/undefined");
tryItOut("L: while((<x><y/></x>) && 0){function (__proto__)<><x><y/></x></> }");
tryItOut("{<><x><y/></x></>;yield; }");
tryItOut("{}");
tryItOut("/*infloop*/do ; while(<xxx {prop}={<><x><y/></x></>.@foo} />);");
tryItOut("__iterator__\n");
tryItOut("/*infloop*/M:while([(@foo >>= window)].some(function(y) { yield y; export __noSuchMethod__;; yield y; }).eval(prototype = window))@foo;");
tryItOut("/*infloop*/L:for(var prop;  /* Comment */window.throw(null); *::* ? 3/0 : 5.0000000000000000000000.valueOf(\"number\")) (__iterator__\f);");
tryItOut("with({prototype: (__count__ = (p={}, (p.z =  \"\" )()))}){throw <x><y/></x>; }");
tryItOut("<xxx>{__parent__}</xxx>");
tryItOut("if((<x><y/></x> < [,,]).*) {if(<></>) { if (let (prototype = <x><y/></x>) {}) {var prop = this;export *; }} else {/*infloop*/for(var __count__ = prototype; 0.1; <><x><y/></x></>) void -3/0 }export __proto__; }");
tryItOut("let (__iterator__, __proto__) { *::*; }");
tryItOut("with({}) let(function::constructor = (\tthis++), __parent__ = 1.3) { for(let y in [5,6,7,8]) export prop;");
tryItOut("(*);[1];");
tryItOut("try { \rreturn @foo > {}; } catch(constructor if () || window !==  \"\" ) { for(let y in []); } ");
tryItOut("{(1 for (x in []))let constructor, function::__count__; }");
tryItOut("/*for..in*/for(let (prop) in @foo) {gc()gc() }");
tryItOut("/*infloop*/for(const ({ __iterator__: prop, __parent__: ({ __iterator__: __parent__, constructor: __count__ }) }) = __noSuchMethod__; null; <><x><y/></x></> ? false :  set __parent__(__count__) { __count__ } ) gc()");
tryItOut("L:while((@foo) && 0)prop = null\n");
tryItOut("/*for..in*/L:for([prototype, __count__] = typeof *::* in <> if (true)</>) /*infloop*/while( '' )<x><y/></x>;");
tryItOut("while((function::__proto__ >> {}) && 0){M:if(__parent__) { if (<><x><y/></x></>) return; else gc()}export __parent__; }");
tryItOut("var __noSuchMethod__ = constructor");
tryItOut("with( /x/ )const prop = function ([y]) { }, __proto__;");
tryItOut("with(__proto__){return;[1,2,3,4].map }");
tryItOut("{return 5.0000000000000000000000; }");
tryItOut("let (__noSuchMethod__) { /*for..in*/for(const [__count__, __parent__] = <>\t<x><y/></x></> in __count__) {;(__proto__); } }");
tryItOut("if(\n((<x/>)[@foo]).*) (prototype); else  if ((({prop: [<x><y/></x>].sort(Math.sin)}))) L:do {gc() } while((({a2:z2})) && 0);");
tryItOut("L:do {M:with(033)yield; } while((<x><y/></x>.yoyo(window)) && 0);");
tryItOut("L:with({__proto__:  /* Comment */<><x><y/></x></>\f})yield;");
tryItOut("false;\nexport constructor;\n");
tryItOut("yield prototype;/\n");
tryItOut("while(((yield 1.3)) && 0)yield <><x><y/></x></>;");
tryItOut("let (constructor) { do  while((#1=[#1#]) && 0); }");
tryItOut("function(q) { return q; }");
tryItOut(";yield;");
tryItOut("\tif(window) {yield <><x><y/></x></>;yield; } else  if (<y><z/></y>) continue \nconst prop, __parent__ = <x/>; const getter;");
tryItOut("if(window) { if ( '' ) {var __iterator__ = prop, prototype;{} }} else //h\nyield *::*;");
tryItOut("if((0.1 & <><x><y/></x></>.unwatch//h\n(\"prototype\"))) return true || *::*; else {<x/>; }");
tryItOut("/*for..in*/for(const __proto__ in (eval(\"{}\", @foo != undefined)).__defineGetter__(\"__count__\", ({}).__lookupGetter__)) {-0 }");
tryItOut("window");
tryItOut("/*infloop*/for((prop|=[11,12,13,14].filter); __iterator__ | this.zzz.zzz; [[].__lookupSetter__(\"constructor\")]) {return __noSuchMethod__;break ; }");
tryItOut("with(<x/> >> @foo);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while(this.zzz.zzz <= (__count__ = window));");
tryItOut("let(__noSuchMethod__, __iterator__) ((function(){for(let y in []);})());");
tryItOut("\f");
tryItOut("{/*for..in*/for([__parent__, constructor] =  in <><x><y/></x></>) {return window; } }");
tryItOut("if(new (eval)((<x><y/></x>.hasOwnProperty(\"prototype\")), <x><y/></x>)) {gc()M:if(this) {yield;{} } }");
tryItOut(".unwatch(\"({}).__lookupGetter__\") = __noSuchMethod__;");
tryItOut("//h\nL:with(__proto__+=<><x><y/></x></>()[__count__ = true]){\tif(({a1:1})) return; else  if ([1,,]) const __parent__ = throw <><x><y/></x></>;; else ; }");
tryItOut("for(let y in []);");
tryItOut("if((this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))).@foo) for(let y in []); else  if (__noSuchMethod__(@foo) =  /* Comment */<x><y/></x>) {L:with((<x/> ? (-0) : <x><y/></x>))function(id) { return id };yield *::*; } else yield <><x><y/></x></>;");
tryItOut("if((({a2:z2}))) {return window;{} } else  if (__count__ = .2) {throw *::*; }\nyield; const __proto__;\n");
tryItOut("{yield this;\nexport *;\ngc() }");
tryItOut(" const prototype;");
tryItOut("M:while((__proto__.__iterator__ = (<x><y/></x>.prop).yoyo((((-0))(@foo) = this.zzz.zzz))) && 0){if(false) {(<x><y/></x>);L:while((([[]] % <><x><y/></x></>)) && 0)\f{ } }yield this.zzz.zzz; }");
tryItOut("/*for..in*/L:for(var [prototype, prop] = (__proto__.valueOf(\"number\") *= __count__ = @foo) in new (prop = <y><z/></y>)().__lookupGetter__(\"prop\")) {{}return __count__ = (-1).__proto__ =  /x/ ; }");
tryItOut("if(true.@foo) { if (new Boolean()) continue ; else prototype = ({a1:1});}");
tryItOut("throw <><x><y/></x></>;const __parent__ = <><x><y/></x></>, __noSuchMethod__;");
tryItOut("throw StopIteration;\nyield, __iterator__;\n\n");
tryItOut("L:with({__parent__: (__noSuchMethod__.(new 3(5.0000000000000000000000,  /x/ )).__defineSetter__(\"__proto__\", this.__defineGetter__(\"__count__\", function ()undefined))//h\n)})export *;");
tryItOut("/*infloop*/while(this){break M; }");
tryItOut("do  while((let (__proto__ =  '' , constructor) <><x><y/></x></>) && 0);");
tryItOut("return Function;");
tryItOut("{__iterator__ = #1=[#1#], __iterator__*;if(window) { if (<y><z/></y>) } else {yield; } }");
tryItOut("export *; /x/ ;");
tryItOut("/*infloop*/M:for(var ({ __count__: constructor, __parent__: prop }) = (((function  constructor (\t) {  } ).apply)(window, <x/>)) in  /x/ ; __count__ = (<><x><y/></x></>.unwatch(\"prototype\")); __parent__) throw null;gc()\f");
tryItOut("{yield  '' ;let __proto__ = (-1); } const __proto__;");
tryItOut("let (<x><y/></x> = false, prototype) { const prop = <x><y/></x>; }");
tryItOut("/*infloop*/do {M:if(void #1=[#1#]) {return;<x><y/></x>; } else  if (constructor = [15,16,17,18].some(([,]).watch, <x><y/></x>)) {yield; }{gc()return window; } } while([, [({ __proto__: ({ prototype: __proto__ }) }), ], ({ __count__: ({ function::prototype: [] }), __count__: __noSuchMethod__ }), __count__, ] = ({ ({ prop: ({ __count__: __noSuchMethod__, __iterator__: prop }), constructor: [__iterator__] }): ({ __noSuchMethod__: ({ prop: ({ __iterator__: ({ __count__: ({ __noSuchMethod__: __noSuchMethod__, prototype: __count__ }) }) }), __proto__: [({ __proto__: ({ __iterator__: constructor, constructor: __count__ }), __iterator__: prototype }), __count__, ({ \f__proto__: __noSuchMethod__, __parent__: ({ constructor: yield, prototype: constructor }) })] }) }) }));");
tryItOut("let (constructor, __parent__ = this.__defineGetter__(\"__noSuchMethod__\", function () { yield <x><y/></x> } )) { if(<x><y/></x>) ; else  if (<x/>) {let __proto__ =  \"\" , __noSuchMethod__ = null;export *; } else throw prop; }");
tryItOut("let <><x><y/></x></>, __count__ = null; const __parent__;");
tryItOut("/*for..in*/M:for(var [__iterator__, __iterator__] = <x><y/></x> in  /x/g ) return __proto__;");
tryItOut("{{continue ;gc() }__count__ = (-0); }");
tryItOut("let (__count__ = __count__.__noSuchMethod__) { x::__count__ = this; }");
tryItOut("var prototype, __count__ = <x><y/></x>;");
tryItOut("/*for..in*/for(let constructor = undefined.__noSuchMethod__ in (([1,2,3,4].map)((eval(\"\", ~prototype))))){return <><x><y/></x></>;if(constructor = <><x><y/></x><\f/>) continue ; else {;export *; } }");
tryItOut("{yield;with({__iterator__: false.__proto__})export prop; }");
tryItOut("if((prop = <y><z/></y>).__proto__ = <x/>.propertyIsEnumerable(\"constructor\")) { if (this.__defineGetter__(\"function::__iterator__\",  /x/  ^ null)) {export *;break M; }} else throw constructor, constructor = __count__;");
tryItOut("if(constructor ^ eval(\"yield 1.2e3;\",  \"\" )) { if ((( \"\" .valueOf(\"number\")\n).__proto__)) {}} else {L: {export *; } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(new Function(({a1:1})); yield ((<><x><y/></x></>).call(<><x><y/></x></>, <y><z/></y>, @foo)) >>> <y><z/></y>.*; __noSuchMethod__ = <><x><y/></x></>.__lookupGetter__(\"__parent__\")) {yield;return null; }");
tryItOut("const __parent__;");
tryItOut("/*infloop*/M:for(let prototype = *;  \"\" ;  /x/ ) const __proto__, constructor = *::*;");
tryItOut("L:while((true) && 0){with(this.zzz.zzz){/*for..in*/for(let [constructor, __noSuchMethod__] = undefined in *::*) (undefined);let __parent__ = <><x><y/></x></>, __noSuchMethod__ = <y><z/></y>; } }");
tryItOut("throw __iterator__;");
tryItOut("while((<bbb xmlns=\"prototype\">yyy</bbb>.(*::*\n)) && 0){return  '' ;{} }");
tryItOut("if(\n '' ) { if (true(<x/>)) {let __parent__, __parent__ = .2; }} else __count__;");
tryItOut("/*for..in*/L:for(__count__ = <><x><y/></x></> in *::*) return <y><z/></y>;\nreturn <x><y/></x>;\n");
tryItOut("if([11,12,13,14].map) var constructor, constructor; const __parent__; else  if ((.yoyo(__proto__ = this)/*\n*/) / (*.__defineSetter__(\"prop\", <><bbb xmlns:ccc=\"(constructor / <><x><y/></x></>)\"><ccc:eee></ccc:eee></bbb></>))) {M:if( if (<y><z/></y>)) { if (3) var __proto__ = null;} else {}<x><y/></x>; }");
tryItOut("/*infloop*/while(arguments.__proto__)window;");
tryItOut("if(<y><z/></y>.hasOwnProperty(\"__noSuchMethod__\") ^ __parent__ .@*:: ((this).watch).call(*::*, *::*, <><x><y/></x></>).yoyo((__iterator__.((prototype.valueOf(\"number\")))))) /*for..in*/for(__iterator__ = this in delete <y><z/></y>) gc() else ;");
tryItOut("while((--(Date(<><x><y/></x></>(return;))).throw(new (gc)(yield window))) && 0){(1e4);with(function ([y]) { })return; }");
tryItOut("/*for..in*/for(const ((delete this.zzz.zzz))(() *= \t /* Comment */[,,z1]) in @foo) export getter;");
tryItOut("/*infloop*/for(var __parent__; ~__parent__; new (*::*)()) let prototype = 4., __count__ = window;");
tryItOut("/*infloop*/do {break ; } while(<x><y/></x>);");
tryItOut("return 4.; const __proto__;");
tryItOut("while((<x/>) && 0){yield <x><y/></x>; }");
tryItOut("/*infloop*/L:for((p={}, (p.z = undefined.hasOwnProperty(\"__noSuchMethod__\"))()); function  __noSuchMethod__ (__count__) { export prototype; } ([(__proto__+= /x/g .__defineSetter__(\"__parent__\", /a/gi)) !== ((__proto__).watch)(-0,  /x/g )].filter(<zzz>[z1]</zzz>.(<x/>.@foo)),  ''  ? <><x><y/></x></> : 033); ((prop if (<><x><y/></x></>)) :: (__noSuchMethod__ = this))) gc()");
tryItOut("let (prototype = <><x><y/></x></>) { return; }");
tryItOut("throw window;");
tryItOut("if((constructor.__count__)) switch(null) { case 0: continue L;case 5: return  /x/ ;break;  } else {return constructor\n }");
tryItOut("return #1=[({})].isPrototypeOf((prototype = (uneval('fafafa'.replace(/a/g, ({}).__lookupGetter__)))));");
tryItOut("M:if((try { return; } catch(__count__) { export *; } .function::constructor).__lookupGetter__(\"__iterator__\").__lookupSetter__(\"prototype\")) { if (window.eval([z1,,]).__parent__) export __proto__;} else if(throw  /x/g ) ; else  if ((+<><x><y/></x></>)) throw *::*;");
tryItOut("const  if (<y><z/></y>);");
tryItOut("throw __iterator__;");
tryItOut("{/*infloop*/while((prop = (<x/> != #3={a:#3#})())){__proto__ = @foo, __proto__; }(<><x><y/></x></>.__defineSetter__(\"__count__\", function (__iterator__, prop) \"\" )); }");
tryItOut("let (prop, __proto__ = new (gc)(((new Function(\"gc()\")))(prop)((yield prototype)), ([<y><z/></y>]))) { /*infloop*/do gc() while(({})); }");
tryItOut("switch(({__proto__: this })) { case <y><z/></y>.watch(\"__iterator__\", Math.sin): do yield; while((0/0) && 0);break; case ([* != <><x><y/></x></> for each (__noSuchMethod__ in {}) if ( '' )]): break;  }");
tryItOut("/*infloop*/while(__parent__)false");
tryItOut("L:if(null) {yield; const __noSuchMethod__;1.3\n } else  if (({__iterator__: ({a1:1}) for (__count__ in  \"\" ) for (__proto__ in this) for each (__proto__ in *)})) break \n<x><y//*\n*/></x>;return <x><y/></x>;");
tryItOut("{yield; }");
tryItOut("yield <><x><y/></x></>;\nreturn;\n");
tryItOut("throw this;");
tryItOut("L:if(([1,2,3,4].map)(function ([y]) { }, window))  else  if () (<x><y/></x>); const __proto__;");
tryItOut("{(undefined).watch }");
tryItOut("/*infloop*/for(const __parent__; ([,] %= false) ? window : -0.__defineGetter__(\"__iterator__\", ([1,2,3,4].map).call); new (function  __noSuchMethod__ (prop)<x/>)()) function(q) { return q; }");
tryItOut("while(([({ prototype: ({ __noSuchMethod__: ({ __proto__: prototype }), constructor: prop }), __parent__: ({ __parent__: __count__ }) }), ] = ((__iterator__ if (__parent__)).propertyIsEnumerable(\"__proto__\"))) && 0){L:if([,,]) {} else  if (\twindow) {break ;gc() } }");
tryItOut("L:if((#3={a:#3#})[window .@ <x/>()]) { if (<x><y/></x>.(3.141592653589793) if (prototype = false)\n) {return;yield; } else return;}");
tryItOut("/*for..in*/for(let [__proto__, constructor] = __count__ = eval(\"\", [15,16,17,18].filter([1,2,3,4].map, <><x><y/></x></>)) in (__parent__ = <x><y/></x>).__iterator__ = ) {\nfunction  __iterator__ (__iterator__, __iterator__) { return //h\n<y><z/></y> } (__count__) }");
tryItOut("{yield;; }");
tryItOut("with({__proto__:  \"\" }){((function ([y]) { })()).watchreturn this; }throw __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in ([ ''  if (1e81)])) yield prop;");
tryItOut("yield *;");
tryItOut("continue ;");
tryItOut("break ;");
tryItOut("/*infloop*/L:for(const [__parent__, , ] = [15,16,17,18].some(<x><y/></x>, __count__); this.__defineSetter__(\"__noSuchMethod__\", function  constructor (__count__)({a1:1})); (new (<x><y/></x> *= @foo)(<x><y/></x>, <><x><y/></x></>))) for(let y in [5,6,7,8]) throw __count__;");
tryItOut("function (__count__) { let __noSuchMethod__ =  /x/g ; } ");
tryItOut("M:switch( { export *; } ) { default:  }");
tryItOut("<{x::prop}>yyy</{x::prop}>");
tryItOut("L:\tif(window if ([,,z1])) { if (([15,16,17,18].filter(((1 for (x in []))).apply, <x><y/></x>(@foo, __parent__)) !== ([__noSuchMethod__] = *::*))) \n} else var constructor, __count__;");
tryItOut("{<y><z/></y>; }");
tryItOut("L: return;");
tryItOut("if() { if ((false.__defineSetter__(\"__parent__\", Function))) {}} else {yield  /x/g ; }");
tryItOut("gc()\n");
tryItOut("throw StopIteration;");
tryItOut("let ([, __count__, __iterator__] = constructor >>= <y><z/></y>, __iterator__) { L: ({}).hasOwnProperty }");
tryItOut("{}");
tryItOut("if((__count__ = (((3).__defineSetter__).call))) {yield <x><y/></x>; } else  if (new gc((window if (<y><z/></y>)), <x><y/></x>)) {return; } else {(window); /x/g ; }");
tryItOut("/*infloop*/M:for((eval(\" '' \", window)); (prop = *::*); [this for each \f(constructor in (function ([y]) { })()) for (__count__ in prop)].isPrototypeOf(<><bbb xmlns:ccc=\"((undefined).watch)(window)\"><ccc:eee></ccc:eee></bbb></>)) {return; }");
tryItOut("/*infloop*/M:for(let __parent__ = (function ([y]) { })(); this; *) {export *; }");
tryItOut("/*for..in*/for(prop in (((function (constructor) { ; } ).call)(__noSuchMethod__))){let __proto__ = <x><y/></x>;(<x><y/></x>); }");
tryItOut("yield;do var __iterator__, prototype = #3={a:#3#}; while((<x/>) && 0);");
tryItOut("with()with({constructor: this.__defineSetter__(\"prototype\", Function)})yield;");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/for([__proto__, prototype] = __count__ /= <y><z/></y> in __noSuchMethod__) {const __count__ = *, __parent__;yield; }");
tryItOut("/*infloop*/do {break ; }\f while([<>yyy</> for each (__iterator__ in delete <x><y/></x>)({ constructor: __proto__, (<zzz>false</zzz>.( /* Comment */ '' ))(eval(\";\", 0).eval(let (prototype = <><x><y/></x></>) <x/>)): ({ __proto__: ({ constructor: constructor }), prototype: [, try { continue ; } catch(prop if (function(){export prototype;})()) { return; } , __iterator__] }) })]);");
tryItOut("/*for..in*/M:for(const prototype = true in true) export *;");
tryItOut("with(prototype.(__noSuchMethod__)[prototype]){{throw <><x><y/></x></>;constructor, __proto__ = [z1]; }if(prop.(*)) { if (__noSuchMethod__ = (-0)) {return; }} else {{} } }");
tryItOut("if(constructor) {function (prototype, __proto__) { return <><x><y/></x></> } return <y><z/></y>; } else  if ((typeof  /x/ )) ");
tryItOut("if(\n[, __parent__, prop, __noSuchMethod__] = (constructor = @foo)) { if () {;var __noSuchMethod__, prop = <><x><y/></x></>; } else return\n}");
tryItOut("M:with({__parent__: null % 1e-81}){/*for..in*/L:for(let __proto__ in [,,z1]) {return @foo; }throw <x/>; }");
tryItOut("{Math.powyield  '' ; }");
tryItOut("let(({ __proto__: false }), __parent__) { throw prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in (false.__lookupGetter__(\"__count__\"))) var prototype, constructor = undefined;");
tryItOut("if(0/0) { if (__noSuchMethod__) {throw (-0);{} }} else yield;");
tryItOut("/*infloop*/for(const constructor = yield undefined; (( /x/g  & constructor) === ((function  prototype (__proto__, __iterator__) { return window } ).apply)); (function::__noSuchMethod__ = 0x99)) {switch((({ __count__: yield, prototype: prop }) = [, prop, ])) { case delete true: break; default: __parent__, constructor;case 4: case 2: export *;case *.__noSuchMethod__: case (<x/>.unwatch(\"\")): break;  } }");
tryItOut("L: var x::__parent__ = *;return [z1,,]\n");
tryItOut("/*for..in*/for(__count__ = <x><y/></x> in (<><x><y/></x></>);) return <x><y/></x>;");
tryItOut("return [z1,,];");
tryItOut("if((uneval(undefined))) { if ([1,2,3,4].map) {M:if(__proto__) const __iterator__; }} else {do {export *;let prototype = <><x><y/></x></>, __parent__ = @foo; } while((<x><y/></x> &= [z1]) && 0);yield window\n( '' ); }");
tryItOut("if(([11,12,13,14].some)) L: ; else {}");
tryItOut("with(((uneval( /* Comment */<><x><y/></x></> .@x:: <><x><y/></x></>)).__noSuchMethod__ = (yield *) > new (new Function)(<x/>)))yield;");
tryItOut("\flet (__parent__) { /*for..in*/for(let (@foo)(<x/>) in undefined) {break M; } }");
tryItOut("L:with(({ __count__: prototype }) = (this.zzz.zzz)){if( { return __noSuchMethod__.__lookupGetter__(\"prototype\") } )  else  if (prototype = __proto__) {export __proto__; }if(window) {__count__, __proto__;break ; } else  if (true) let x::constructor, getter = __proto__; }");
tryItOut("let (constructor, ({ prototype: [], __iterator__: [] }) = RangeError(<x><y/></x>.__defineGetter__(\"__iterator__\", function  __iterator__ (prototype) { yield constructor } ).__count__ = *::*, ( =  /x/ ))) { /*for..in*/for(let [__noSuchMethod__, __proto__] = (prop = gc) in  /x/g ) {;throw  \"\" ; } }");
tryItOut("if(__iterator__) return -3/0; else  if ((new (Math.sin)()).prop) {M:with(undefined)const __noSuchMethod__; }");
tryItOut("throw StopIteration;");
tryItOut("return __parent__");
tryItOut("/*for..in*/M:for(prototype(*) in [15,16,17,18].sort(Math.pow, constructor)) {if(this) { if (<x/>) {__noSuchMethod__;const each; }} else {throw get; }/*infloop*/for(var __iterator__ = undefined; false; <x><y/></x>) {kreturn; } }");
tryItOut("with(0);\nexport *\n");
tryItOut("let(prototype = ((3/0).call).call((p={}, (p.z = null)()), )) ((function(){yield __noSuchMethod__\n;})());");
tryItOut("constructor = constructor;");
tryItOut("/*for..in*/for(__noSuchMethod__ in ((* |= window)(<xxx>{set}</xxx>))){L:if(@foo) {export *; } else {} }");
tryItOut("throw constructor;");
tryItOut("let(prop = <><bbb xmlns=\" for (__parent__ in @foo)\"><!--yy--></bbb></>, [, , ]) { this.zzz.zzz;");
tryItOut("/*infloop*/L:while(<x/>){;(<><x><y/></x></>).__defineSetter__ }");
tryItOut("const __count__ = <y><z/></y>, __iterator__; const __parent__;");
tryItOut("if(<><x><y/></x></>) gc()");
tryItOut("/*for..in*/for(const \tfunction::__parent__ in ((('haha'.split).apply)(<x><y/></x>.__iterator__))){gc() }");
tryItOut("return;");
tryItOut("/*infloop*/M:do yield; while((__iterator__ = *::*)); const prop;");
tryItOut("/*infloop*/for(({ __count__: ({ [[({ prototype: constructor })] = new (([11,12,13,14].sort))([<x><y/></x> if (0/0)])]: [] }), window: [({ __iterator__: [[, ({ prototype: __parent__, __iterator__: ({ __count__: __iterator__ }) }\f), ]] }), , ] }) = window; (let (__count__ =  '' ) [1].@*); this.__defineGetter__(\"__proto__\", function () {  } )) /*for..in*/for(const [__iterator__, __proto__] = typeof (new Object(arguments, @foo)) in constructor =  /x/g ) L:if(((false %= (function ([y]) { })()).eval('fafafa'.replace(/a/g, [1,2,3,4].slice)))) {} else <ccc:ddd><!--yy--></ccc:ddd>\t");
tryItOut("/*for..in*/for([] in (__count__\n)) {M:with({__noSuchMethod__: <y><z/></y>})let __iterator__;/*infloop*/do {yield <><x><y/></x></>;let __proto__ = constructor; } while(#1=[#1#]); }");
tryItOut("/*for..in*/for(var [__parent__, prototype] = constructor.__noSuchMethod__.__iterator__ in ({}).__lookupGetter__(\"__proto__\")) {let (__iterator__, __iterator__) { ; } }");
tryItOut("with({__count__: 4.( for each (__parent__ in [[]])).__lookupSetter__(\"__parent__\")})yield (__proto__ = <x/>);let(setter = this, __proto__ = (function ([y]) { })()) ((function(){yield;})());");
tryItOut("with({}) return <x/>;");
tryItOut("/*infloop*/for(__proto__;  /* Comment */({}).hasOwnProperty();  /x/g .__lookupGetter__(\"prop\")) const prop = undefined;");
tryItOut("L: { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __count__.__parent__ = <y><z/></y>.eval((__iterator__.__noSuchMethod__ = <y><z/></y>))) {{var function::prop; }return null; }");
tryItOut("L:\twith({prototype: *::*})throw null\nprototype;");
tryItOut("with({__proto__: <x><y/></x>})(throw 0;);");
tryItOut("/*infloop*/do (<><x><y/></x></>); while([,,]);");
tryItOut("let (__noSuchMethod__, ({ prop: __iterator__ })) {  }");
tryItOut("while(((__parent__.(@foo(setter: false))).__iterator__) && 0)/*infloop*/for(var (prop.constructor = eval(\"3/0\", undefined))(<y><z/></y> .@*:: 1e81); this & <x><y/></x>.valueOf(\"number\").hasOwnProperty(\"prototype\"); [15,16,17,18].some(033, <y><z/></y>)) {yield;let __parent__ = prototype, prototype; }");
tryItOut("return this;");
tryItOut("return;");
tryItOut("with({}) { let(__iterator__ = __proto__) { export prototype; } ");
