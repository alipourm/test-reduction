
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("M:with({__noSuchMethod__: ([this for each (/*for..in*/for(const prototype = undefined in <><x><y/></x></>) (<x/>); in <\f><x><y/></x></>)])}){M:with({__count__: <y><z/></y>}){__count__ = (-1); } }");
tryItOut("export *;");
tryItOut("\n/a/gi");
tryItOut("return\nreturn  \"\" ;");
tryItOut("(<><x><y/></x></>);let __count__ = <><x><y/></x></>;\t");
tryItOut("__parent__ = *; const constructor;");
tryItOut("switch(<xxx {prop}={<x><y/></x>.__iterator__ =  /x/ } />) { case null: var prototype, __noSuchMethod__;break; default: break; case <x><y/></x>.__defineGetter__(\"constructor\", null): break; ;break; case (yield null): ((-1));case 0: break; case 4: yield;break; case (window .@*:: [[]]): break;  }");
tryItOut("/*infloop*/do {/*infloop*/for(__count__; #1#; <><x><y/></x></>) return function(id) { return id }; } while(('fafafa'.replace(/a/g, (1 for (x in [])))));");
tryItOut("this.zzz.zzz;");
tryItOut("throw window;");
tryItOut("M:if(__parent__.__lookupGetter__(\"prototype\"\n)) { if (<y><z/></y>.throw(<><x><y/></x></>)) with(constructor)return  /x/ ; else {with(<><x><y/></x></>){yield [1]; } }}");
tryItOut("{return <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in [15,16,17,18].sort(#1#(), *::* .@x:: __noSuchMethod__)) {/*for..in*/L:for(let prop in  /x/ )  }");
tryItOut("if(__iterator__(<y><z/></y>())) {/*for..in*/L:for(\t__parent__(-0) in <x/>) {yield undefined; }export constructor; }");
tryItOut("/*infloop*/for(window; this; @foo) {__count__ }");
tryItOut("L:while((({ set prop <><xxx {__noSuchMethod__}={this} /></> (__noSuchMethod__, prototype) { return 'fafafa'.replace(/a/g, null) } , prop: __parent__ })) && 0){const __iterator__, __iterator__;yield; }");
tryItOut("throw  /x/ ;gc()");
tryItOut("var __count__;break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in prototype) {yield;return window; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("__proto__");
tryItOut("L:if([z1]) __parent__ = <y><z/></y>, prop; else let __proto__, __iterator__;");
tryItOut("if() /*\n*/__proto__ = prop; else  if () /*infloop*///h\nwhile(__count__+=1e4\t)yield <x><y/></x>; else do break M; while((-({}) .. *::*) && 0);");
tryItOut("if(<y><z/></y>) { if (true) null; else  set prop(__iterator__, __iterator__) { return prop } }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = (__count__ = <x><y/></x>.__noSuchMethod__) ^= __count__ = undefined in <y><z/></y> - function ([y]) { } ? (__iterator__ =  /x/ ) : eval(\"if(<x><y/></x>) yield <y><z/></y>; else {yield <x><y/></x>; }\", __proto__ =  '' )) while((function(id) { return id }.propertyIsEnumerable(\"__count__\")) && 0){var __proto__; }");
tryItOut("/*infloop*/do {{var __iterator__, prop = [z1,,]; } } while(#3={a:#3#});");
tryItOut("/*infloop*/do {__count__const prototype; } while(constructor);");
tryItOut("__iterator__ = __parent__;");
tryItOut("if(undefined for each (__count__ in <><x><y/></x></>)) {do {yield;export *; } while((1e81) && 0); } else  if (prop.(window)) gc() else {return;yield; }");
tryItOut("for(let y in [5,6,7,8]) (<><x><y/></x></>)((-0)) = __count__;");
tryItOut("L:if(*) {gc(){} }");
tryItOut("continue \n;");
tryItOut("with({__count__: #0=({prototype: this})}){/*infloop*/do { } while([[]]); }");
tryItOut("yield  /x/g ;");
tryItOut("do try { (<y><z/></y>); } catch(__count__ if <><x><y/></x></>) { Function } //h\ncatch(__proto__ if @foo) { yield this; } catch(prototype) {  }  while((-0.prop =  /x/ ) && 0);");
tryItOut("/*infloop*/for(var prop = undefined; 0/0; <x><y/></x>) {__proto__ }");
tryItOut("if((yield (-0))) {;gc() }\n");
tryItOut("if(*::*) { if (<x><y/></x>) {export __proto__\n; } else yield undefined;}");
tryItOut("/*infloop*/for(const __proto__; (yield @foo)(); 3.141592653589793) {var __parent__, __count__ = *; }");
tryItOut("return (yield (__iterator__ = -0));");
tryItOut("if(window * 1.2e3) {throw <x/>; } else  if (let (constructor = __proto__) undefined) constructor = @foo\n");
tryItOut("let (prototype = (p={}, (p.z = true)()), prop) { L:with(<><x><y/></x></>)return;\nyield;\n }");
tryItOut("\n\f/*infloop*/do {throw  \"\" ;yield; } while((Boolean(null)).*);");
tryItOut("L:if(eval(\"export *;\", <><x><y/></x></>).yoyo(<x><y/></x>.prototype = set)) prop else  if ([11,12,13,14].map) throw __noSuchMethod__;");
tryItOut("(new Function(\"yield prop;\")) const __proto__;");
tryItOut("let (constructor, __proto__) { if((__iterator__)(@foo, false)++) { if ((this.__defineSetter__(\"prototype\", Math.pow)).throw(this.__defineSetter__(\"__iterator__\", this))[({__noSuchMethod__: (({constructor setter: __iterator__, __count__ getter: /a/gi })) })]) {{} }} else /*infloop*/for(var prototype; <><x><y/></x></\t> > <><x><y/></x></>; #1=<x><y/></x>) throw undefined; }");
tryItOut("__parent__");
tryItOut("M:if(({ set constructor(__parent__) { return \n@foo } ,  set __proto__()(new (Function)()) })) true;");
tryItOut("/*infloop*/for(let constructor; <y><z/></y>; prototype.__count__|=*.constructor = [15,16,17,18].filter(__proto__,  /x/g ) getter= function  constructor (__iterator__) { return true; } ) switch(.watch(\"__noSuchMethod__\", <x><\ty/></x>\n)) { default: <x><y/></x>;case (<x><y/></x>.isPrototypeOf( /x/g )): (#1#);case 5: return;break;  }");
tryItOut("/*for..in*/for(prop = true in <><x><y/></x></>.hasOwnProperty(\"prop\")) M:do {L:if( \"\" ) { if ( \"\" ) __noSuchMethod__, __count__ = 1.3;} else let constructor = <x><y/></x>; } while((__noSuchMethod__.prop) && 0);");
tryItOut("gc()\n");
tryItOut("if([,,]) { if (((__iterator__)())) yyy} else {;return <x><y/></x>; }");
tryItOut("if({}()) { if ((gc)) {var __noSuchMethod__, __parent__; }} else break L;");
tryItOut("/*infloop*/M:while([*].propertyIsEnumerable(\"prop\").__iterator__)/*infloop*/while(__count__)@foo;");
tryItOut("{yield <><x><y/></x></>; }");
tryItOut("yield;");
tryItOut("L: {}\n(<x><y/></x>);\n");
tryItOut("with((p={}, (p.z = (__noSuchMethod__ = <y><z/></y>).yoyo( /x/g ))())){if(window) yield __iterator__; }");
tryItOut("; const __proto__;");
tryItOut("/*infloop*/for(const prototype; ((new Function(\"throw prop;\"))); ((yield true))) {M:do export *; while((undefined) && 0); }");
tryItOut("return ({ __count__: __noSuchMethod__ }) = ((__iterator__.prototype) .@x:: (window)[({a1:1})]);");
tryItOut("/*for..in*/for(const __count__ in ((typeof undefined) ^= __proto__ = <><x><y/></x></>)) {M:if([yield (__proto__ = <y><z/></y>)]) { if ((({ set __iterator__(prototype) { yield [z1].prop }  }))) (__proto__);} else return; const __parent__;{;{} } }");
tryItOut("{ } const prototype;");
tryItOut("yield 3;");
tryItOut("/*infloop*/M:do {with({__iterator__: null}){(<x/>);const __parent__; }continue ; } while(__count__|=*::*);");
tryItOut("with({__proto__: this.__defineGetter__(\"__noSuchMethod__\", Function)}){constructor setter: 033for(let y in [5,6,7,8]) export * }");
tryItOut("/*for..in*/for(const prop = eval(\"let __parent__;\", <y><z/></y>).watch(\"__count__\", (prop = */*\n*/).__defineSetter__) in ([[1]].propertyIsEnumerable(\"constructor\")).yoyo((Object(-3/0))).constructor) ;");
tryItOut("/*for..in*/for(const prototype in (('haha'.split)(this\r.yoyo(<><x><y/></x></>) += <><x><y/></x></> .@*:: <><x><y/></x></>)))do __iterator__; while((null) && 0);");
tryItOut("/*for..in*/for(const (/__count__ in (prototype = function::__count__.constructor >>> __iterator__)) {let (__proto__ = prop) { export *; } }");
tryItOut("M:switch(eval(\"#1=[#1#]\", -1)) { case <><xxx {__count__}={__proto__.__defineGetter__(\"__iterator__\", new Function)} /></>: break; default: __noSuchMethod__, __noSuchMethod__;break; case 2: case 7: export prototype;break; case 8: return;case 7: break; break;  }");
tryItOut("/*for..in*/for(var __proto__ in ((Math.sin)((({prototype: *::*}))))){{} }");
tryItOut("/*for..in*/for([__parent__ = <><x><y/></x></>, constructor = window;, __count__] = constructor.__noSuchMethod__ in @foo) if(1.2e3.throw(1.2e3)) {export prototype; } else continue ;");
tryItOut("switch((constructor.(<x><y/></x>)\f.__lookupGetter__(\"__proto__\"))) { default: /*for..in*/for(const __proto__, prototype in ((Math.pow)(*::*)))const __proto__, __proto__ = <x/>;case 5: case 7: ( '' );break; case 6: case 7: \t__count__ =  /x/ , __proto__ = <x/>; }");
tryItOut("{yield <y><z/></y>; }");
tryItOut("prop = __count__;");
tryItOut("/*infloop*/do with(<x><y/></x>)export prop; while(\n);");
tryItOut("<>__iterator__.(__count__ = window)</>do {export constructor;/*infloop*/for(const __iterator__ = this; this; \t*) {break ; } } while((prototype.valueOf(\"number\")) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__parent__ in <y><z/></y>) switch(((yield  \"\" ))) { case 3:  }");
tryItOut("let __iterator__ = <><x><y/></x></>\n");
tryItOut("if((prototype = false)) { if (<bbb xmlns:ccc=\"(-0)[1e+81]\"><ccc:eee></ccc:eee></bbb> instanceof __iterator__.(1e+81)) {throw (+*::*); }} else {/*infloop*/for(var __iterator__ = [<x/>].filter(eval); 1e-81//h\n\n; prop &= <><x><y/></x></>) __parent__export *; }");
tryItOut("with(*.__parent__ = window){yield; }");
tryItOut("if(window) {export *;\rthrow __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in [[]]) {var __iterator__ = __iterator__, __parent__; }");
tryItOut("if(arguments.watch(\"new (undefined)()\", <x><y/></x>)) { if ((function(q) { return q; })()) {yield this; const __iterator__; }} else {({}); }");
tryItOut("return [z1,,]\nyield;");
tryItOut("{(1e+81); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in  /x/ ) export __proto__;");
tryItOut("yield;\nreturn <x/>;\n");
tryItOut("{return @foo; }");
tryItOut("let(__iterator__) ((function(){continue ;})());");
tryItOut("/*for..in*/for(<x><y/></x>.eval(arguments)['constructor'] in (('haha'.split)(__parent__ = [ /x/ ]))){/*for..in*/\fL:for(let prototype = 1e4 in [,,]) try { /a/gi } finally { throw <x/>; } \nexport __count__; }");
tryItOut("{return; }");
tryItOut("for(let y in []);");
tryItOut("__iterator__.prototype = __iterator__;");
tryItOut("/*infloop*/do {{} } while(({ __parent__: constructor, __iterator__: __proto__ }) = function(q) { return q; });");
tryItOut("while(((__noSuchMethod__)) && 0){; }");
tryItOut("(arguments);");
tryItOut("throw false;const constructor = *::*, __count__ =  '' ;");
tryItOut("function::__parent__ = constructor;");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = (-1) in true) {continue ; }");
tryItOut("({ __parent__: ({ __count__: ({ prototype: __iterator__, __proto__: (export function::__count__)(<x><y/></x>.(*)) }), __parent__: prototype }), __count__: ({ prototype: ({ __proto__: [[\t({ __parent__: __proto__, prototype: __proto__ }), , ], __noSuchMethod__, ] }), prototype: ({ constructor: ({ constructor: ({ prototype: ({ __iterator__: __iterator__ }) }), prop: ({ prop: [, , , , ], __iterator__: [] }) }), constructor: [({ __noSuchMethod__: ({ __noSuchMethod__: __proto__ }) }), , , constructor] }) }) })");
tryItOut("for(let y in [5,6,7,8]) with({}) this.zzz.zzz;");
tryItOut("yield delete constructor = <x><y/></x>.prototype;");
tryItOut("if(__parent__.__iterator__ setter= /a/gi(3/0 in  \"\" , [[1]])) { if (( /* Comment */033) / \nprop) /*for..in*/for(const [prototype, __count__] = <x><y/></x>.unwatch(\"__count__\") in window) return 1e81; else if(.2) {(window).watch } else {{} }}");
tryItOut("/*for..in*/for(prop(\n \"\" ) in ((function (prop, constructor) { yield (*::* ? 0 : this) } )( '' ))){yield;return; }");
tryItOut("with({prototype: this *= __count__ >>= }){<x><y/></x>;(null); }");
tryItOut("let __count__; const prototype;");
tryItOut("export __noSuchMethod__; const __parent__;");
tryItOut("try { with({}) let(__iterator__ =  , constructor) ((function(){let(__noSuchMethod__) ((function(){yield;})());})()); } finally { throw __noSuchMethod__; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in (@foo.valueOf(\"number\") == (__noSuchMethod__ = [z1][({ get __proto__(__proto__) { return 033 }  })]))) {continue M;/*for..in*/for(const __proto__ = this.__defineGetter__(\"yield\", function(y) { yield y; return <x><y/></x>;; yield y; }) in <y><z/></y>) {return *;yield 4.; }\f }");
tryItOut("eval const __noSuchMethod__;");
tryItOut("__proto__ = __iterator__;");
tryItOut("/*infloop*/while(false){throw <y><z/></y>;return; }");
tryItOut("this.zzz.zzz;");
tryItOut("L:do {(window);let constructor = <y><z/></y>;; } while((__count__) && 0);");
tryItOut("L:if(+<y><z/></y>) break ; else  if (__count__|=<><x><y/></x></>) export __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__iterator__ in ({constructor: (this ..  /x/g )})) {L: {throw <><x><y/></x></>; }return #1=[#1#]; }");
tryItOut("M:if(__noSuchMethod__.__parent__ = window++) { if (__proto__) {yield <><x><y/></x></>;/*for..in*/for([constructor, __count__] = (*--) in window) {export *; } } else throw StopIteration;}");
tryItOut("/*infloop*/M:while( '' )export prop; const prop;");
tryItOut("let (({ constructor: __proto__ }) = Boolean( \"\" ), ({ prop: __parent__, __noSuchMethod__: __count__ }) =  /x/g .prototype = -3/0) { export __count__; }");
tryItOut("{L: {{}throw {}; } }");
tryItOut("with({__count__: <x><y/></x>.isPrototypeOf(.2)}){{} }");
tryItOut("/*for..in*/(new Function(\"return\\n\"))");
tryItOut("yield __noSuchMethod__ = [1,,];");
tryItOut("with({__noSuchMethod__: (__proto__.prototype getter= 3.141592653589793)}){var prototype = <x><y/></x>, __noSuchMethod__ = this; }");
tryItOut("return this;");
tryItOut("yield String();");
tryItOut("if((window ? window : null) @ (yield <x/>)) {return;var prototype, function::prototype =  /x/ ; }");
tryItOut("{yield  /x/ ; }");
tryItOut("L:switch(<x/>) { default: {}break; return;break;  }");
tryItOut("return;");
tryItOut("/*for..in*/for(const prop in ((<!--yy-->function (prop, constructor) { return <x><y/></x> } )(<x><y/></x>.([z1])))){(<y><z/></y>);1e4; }");
tryItOut("/*infloop*/for([, , (prop), , ] = ({constructor: ((p={}, (p.z = __noSuchMethod__)())), __parent__: [15,16,17,18].filter(function(q) { return q; }, #2=[<x><y/></x>]) })//h\n; (yield  /x/  %  ''  , (([, , prototype\f] = ({ __noSuchMethod__: __count__ })) ^= ([].__parent__)));  /x/ ) ");
tryItOut("switch((this.prop)) {  }");
tryItOut("");
tryItOut("/*infloop*/for(window; window.watch(\"__parent__\", 1e+81) ? (yield  /x/ ) : new Function(<x/>); 1e+81) <y><z/></y>;return this;");
tryItOut("/*infloop*/for(<x><y/></x>; <x><y/></x>; ,) (<x/>);");
tryItOut("if((false.watch(\"prop\", Math.sin))) {return;throw this; } else var __count__;");
tryItOut("with({__parent__: *::*.__count__ = false})L: return;");
tryItOut("L: {}");
tryItOut("/*infloop*/for([({ prototype: prototype, __proto__: [] })] = [1,,]; ({a1:1}); (new Number().__defineSetter__(\"__parent__\", function () { yield __parent__.__count__ = <><x><y/></x></> } ))) {yield <x><y/></x>;trueexport prototype; }");
tryItOut("let(({ __noSuchMethod__: [, [], ({ eval: ({ function::__count__: __count__ }), __proto__: ({ __proto__: __proto__ }) }), __iterator__, ], __parent__: prop((({}).__lookupGetter__).call(*::*, 5.0000000000000000000000, function(id) { return id })) }) = yield <x><y/></x> ?  /x/ .__defineSetter__(\"__iterator__\", (Math.pow).call) : __iterator__ = @foo, __noSuchMethod__) ((function(){with({}) { const __count__ = __count__++; } })());");
tryItOut("let (({ yield: ({ __iterator__: [, ], constructor: ({ __proto__: ({ __iterator__: ({ __noSuchMethod__: prop, prop: constructor }) }) }) }) }) = (prop.__parent__ = @foo.__proto__ = <y><z/></y>), __noSuchMethod__) { for(let y in [5,6,7,8]) for(let y in []); }");
tryItOut("/*infloop*/L:do (__parent__); while(__noSuchMethod__.prop = this);");
tryItOut("M:do yield <y><z/></y>.@*; while((0.1.unwatch(\"function::__noSuchMethod__\").propertyIsEnumerable(\"__parent__\")) && 0);");
tryItOut("if(window -= -0) export __iterator__; else {export __iterator__; }");
tryItOut("{while((__proto__) && 0){yield 1.2e3;; } }");
tryItOut("do ; while(((function ([y]) { })()//h\n) && 0);");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = (*::*.* % <><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")\f) .@ (p={}, (p.z = ())()) in window < <><x><y/></x></> && __proto__ / <x><y/></x>) ( '' ).apply");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <><x><y/></x></>) var constructor, __proto__;");
tryItOut("L:if(false ? @foo : window) { if ((__iterator__ = constructor)) export *;} else break M;");
tryItOut("with({__parent__: ([[,,z1] if (<y><z/></y>)].valueOf(\"number\"))})let (__parent__ = <{constructor}>yyy</{constructor}>, __count__ = (window.__parent__ = __noSuchMethod__)) { {} }");
tryItOut("/*infloop*/do {export __proto__; } while(([15,16,17,18].filter(@foo.*, constructor =  /x/g )));");
tryItOut("if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(((uneval( \"\" )))).propertyIsEnumerable(\"prop\")) {} else /*infloop*/for([15,16,17,18].sort('haha'.split, <><x><y/></x></>); __count__|=<x/>; 1e-81) {export *; }");
tryItOut("throw arguments;/*infloop*/for(__parent__; <><x><y/></x></>; __proto__) yield;\n;\n");
tryItOut("/*infloop*/do /*infloop*/\nwhile([z1]){return prototype; } while((eval(\"/*infloop*/for(let __iterator__; ({a2:z2}); undefined) throw <x/>;\", ((this.__defineGetter__(\"prop\", this))[prop = <y><z/></y>]))));");
tryItOut("switch(__noSuchMethod__.__proto__ = constructor = <x><y/></x>) { case (__count__ = <x/>): case 7: M:if(__proto__ = __noSuchMethod__) {yield;return; } else (<y><z/></y>);case new function(q) { return q; }(): {}break;  }");
tryItOut("{{} }");
tryItOut("while((1e4 |= (-0)) && 0)yield <x><y/></x>;");
tryItOut("switch(RangeError((throw true).__defineSetter__))/*\n*/ { default: /*infloop*/for(prop = <y><z/></y>; [1,,]; this) {(<><x><y/></x></>);var constructor = constructor, __count__ = <></>; } }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/do {undefined; } while(__noSuchMethod__ = prop);");
tryItOut("Function const __iterator__;");
tryItOut("let(({ constructor: prototype, __iterator__: __noSuchMethod__ }), __noSuchMethod__) ((function(){this.zzz.zzz;})());");
tryItOut("__iterator__ = __proto__;");
tryItOut("L: {gc()yield window; }");
tryItOut("/*infloop*/do throw this; while(window)\n");
tryItOut("continue M;");
tryItOut("gc()\nMath.pow\n");
tryItOut("if(({<y><z/></y>: __iterator__, <x><y/></x>: prop })) {; } else return <><x><y/></x></>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in @foo) {;constructor; }");
tryItOut("/*infloop*/M:while(this ^ 0.1)gc()");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in *::*.isPrototypeOf(3/0)) constructor, __count__;");
tryItOut("/*for..in*/for(var yield = <x><y/></x> in <x/>) {gc(); }");
tryItOut("switch(new <x><y/></x>) { case new ([1,,])(<y><z/></y>, {}):  }");
tryItOut("L:if( '' ) {{} } else  if (this.*) {let __noSuchMethod__, constructor; }");
tryItOut("let __noSuchMethod__ = this\n");
tryItOut("yield\n");
tryItOut("/*infloop*/for(@foo; @foo; *) {('haha'.split).call }");
tryItOut("with({__iterator__: ([,,].__count__ = \")}){}");
tryItOut("/*for..in*/for(let [prop, ({ __iterator__: ({  { return [11,12,13,14].map } : prop, __count__: [] }) })] = ( ''  .@*:: (constructor.(prop))) in (new (Math.sin)(<><x><y/></x></> , undefined))) {( /x/ ); }");
tryItOut("with(<x/> :: <x/>)yield");
tryItOut("/*infloop*/while((function  __parent__ () { return <x><y/></x> } ).call(<x/>, true, __iterator__));");
tryItOut("M:if([,,][*]) {} else {return;({}).__lookupGetter__ }");
tryItOut("if(get.(<x/>)) {let constructor = ({a2:z2}), __proto__;; }\n");
tryItOut("with({prop: }){L:do {throw [,]; } while((!<x/>) && 0); }");
tryItOut("/*infloop*/for(let __count__; this.__defineSetter__(\"__iterator__\", /a/gi); true >> <><x><y/></x></>) export *;");
tryItOut("let __noSuchMethod__ = <><x><y/></x></>, (1 for (x in [])) = arguments;");
tryItOut("/*for..in*/for(prop in 3/0) export *;");
tryItOut("eval");
tryItOut("/*for..in*/for(let prototype = constructor :: (function ([y]) { })() in <x/>) {yield;; }\n(((new Function(\"break L;\"))).call(constructor, [,,]));");
tryItOut("with(let (__iterator__, prop = <><x><y/></x></>) eval(\"return <><x><y/></x></*\\n*//>;\", (3/0 * <y><z/></y>))){{} for (prototype in <><x><y/></x></>.unwatch(\"__parent__\")) }");
tryItOut("return; '' (/\n\nthrow <><x><y/></x></>;\n");
tryItOut("let __noSuchMethod__, __count__ = <><x><y/></x></>\n");
tryItOut("with({}) { throw prop; } ");
tryItOut("with({constructor: (window > prop)})if(<x/>) let __parent__ = .2, __count__; else continue M;");
tryItOut("if(<x><y/\n></x>.__defineGetter__(\"__parent__\", false) :: __iterator__ & -1) {; } else  if (Iterator(this.__defineGetter__(\"prototype\", function(q) { return q; }), <><x><y/></x></>.__lookupGetter__(\"__parent__\"))) if( /x/g ) <y><z/></y>; else  if (false)  \"\" ;");
tryItOut("prototype: (([] = [__count__, , , ]).__defineGetter__(\"__count__\", (@foo).watch))");
tryItOut("if((__proto__)) /*infloop*/M:while(<x><y/></x>){return; }");
