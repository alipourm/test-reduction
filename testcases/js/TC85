
tryItOut("return\nthis;L:if((yield prop.isPrototypeOf('fafafa'.replace(/a/g, function  prop (prop, __iterator__) { return (this.yoyo(<y><z/></y>)) } )))) let constructor = <x/>; else  if ((Number(<x/>)).watch(\"constructor\", (({}).hasOwnProperty).apply)) {throw <x><y/></x>;yield; }");
tryItOut("if(true) M:if(eval(\"null\", true)) gc() else yield");
tryItOut("{; }");
tryItOut("L:do {const __iterator__ =  \"\" ;(this); } while((<><x><y/></x></> & #1=[#1#]) && 0); const prop;");
tryItOut("{}");
tryItOut("if( ''  != <><x><y/></x></>) { if (((<x><y/></x>.throw(<><x><y/></x></>)))()) {const __iterator__ = <x><y/></x>; }} else {var prototype, constructor = <x><y/></x>; }");
tryItOut("/*for..in*/for(const window in (__parent__ .@*:: [z1]) > prototype.__lookupSetter__(\"__count__\")) {(<x><y/></x>).callreturn __proto__; }");
tryItOut("L: (-0)\n");
tryItOut("M:if(<><x><y/></x></> <bbb xmlns:ccc=\"<><bbb xmlns=\"constructor.__noSuchMethod__\"><ccc:ddd> </ccc:ddd></bbb></>\"><ccc:eee></ccc:eee><\t/bbb>\n) * else  if (let (constructor) __noSuchMethod__) {return; }");
tryItOut("for(let y in []);");
tryItOut(";");
tryItOut("while((4.) && 0);\n");
tryItOut("if(let (__proto__) 3.141592653589793 <= false) gc() else  if ((-1 <= <x><y/></x>)()) {__noSuchMethod__, ({}).hasOwnProperty = <x/>\n }");
tryItOut("if([15,16,17,18].some((eval).call, [[]])) \n else \n");
tryItOut(" ''  const ({ constructor: prototype, __count__: constructor });");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/></x>) {var __count__;yield @foo; }");
tryItOut("export */*\n*/\nthrow 1.3;\n(1.3);\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let *::*.__noSuchMethod__ in *) {}");
tryItOut("if(this.__defineSetter__(\"<y><z/></y>.__proto__\", function(y) { yield y; export *;; yield y; })--) { if ([({ set function::__proto__(prop) { yield @foo } , __parent__: <><x><y/></x></> })]) \f/*infloop*/while(window){let constructor, constructor; } else <x><y/></x>}");
tryItOut("/*infloop*/for(@foo; <zzz>((yield <><x><y/></x></>))</zzz>; true.throw( '' )) yield\n const prototype;");
tryItOut("if(((<x><y/></x> !== null)(eval(\"<x'><y/><return <x><y/></x>; /x>\", {}), -0))) {gc() const __proto__; } else  if (eval(\" '' .isPrototypeOf(null).yield\", this[5.0000000000000000000000]) == new (4. >>>=<x/>).__defineSetter__(null && prototype = window, ((<y><z/></y>)[this].@foo))) M:do return; while((true) && 0); else {yield; }");
tryItOut("throw StopIteration;");
tryItOut("L: L:if([11,12,13,14].sort) { if (__iterator__) {var constructor, __parent__ = <x/>; }} else __iterator__;");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in @foo) {yield;yield; }");
tryItOut("{window;; }");
tryItOut("if(\n<x><y/></x>) {return @foo;/a/gi } else {let __count__ = #3={a:#3#}; }");
tryItOut("export __count__;");
tryItOut("\n");
tryItOut("if(<x><y/></x>) { if (constructor) {(new Function(\"Math.sin\"))4.; } else (<y><z/></y>);}");
tryItOut("<y><z/></y>['constructor']");
tryItOut("/*infloop*/for(constructor; __iterator__.(this); (<x><y/></x>.valueOf(\"number\"))) {let prop, __iterator__; }");
tryItOut("{/*for..in*/for(const [__parent__, prototype] =  ''  in this) {return <><x><y/></x></>;return [z1]; } }");
tryItOut("if(constructor.__count__ = undefined) { if (* :: <><x><y/></x></> in ({prop: <><x><y/></x></>, __noSuchMethod__:  ''  })) yield <x><y/></x>; else { }}");
tryItOut("/*for..in*/for(var __noSuchMethod__ = ({prop setter: Math.sin, prototype: ((p={}, (p.z = window\n)())) }) in __proto__ = .2) {M:while((<x><y/></x>) && 0)return  /x/g ; }");
tryItOut("/*for..in*/undefined |= (-0)");
tryItOut("this.zzz.zzz;");
tryItOut("with((* |= <y><z/></y>))__proto__ = -0, __iterator__;");
tryItOut("/*infloop*/while(\n)/*for..in*/for(const prototype) in (\nwindow)) {}");
tryItOut("if((<><x><y/></x></>)) const prop; else { { export __noSuchMethod__; } * }");
tryItOut("/*infloop*/L:for(const __count__; *::*; (Boolean(@foo) !== prototype.@foo)) {throw this;yield; }");
tryItOut("do {/*infloop*/prop/*infloop*/L:for(__noSuchMethod__; 1e81; true) export prop\ncontinue L; } while((~@foo.hasOwnProperty(\"constructor\")) && 0);");
tryItOut("let (__noSuchMethod__ = this, prototype = window) { export constructor; }");
tryItOut("let (prop) { export each; }");
tryItOut("M:if([[]]) throw []; else {{}continue L; }");
tryItOut("/*for..in*/L:for(let prototype.__iterator__ in ((eval)((({__parent__: (-1) ? window : false,  get let prototype (prop)eval(\"(let (prototype = __count__) <y><z/></y>)\", *::*) }))))){/*for..in*/for(const yield .2; const prototype; }");
tryItOut("if(*.eval(false)) { if ( /* Comment */3) {function(y) { yield y; yield;; yield y; } }} else {(5.0000000000000000000000);continue ; }");
tryItOut("L:if(let (prototype)  '' .throw(0/0)) {{throw *::*; } } else  if (null) {yield null; }");
tryItOut("throw <x/>;");
tryItOut("/*infloop*/for(const prop; false.prototype; (this)[false]) throw  \"\" ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in 3) {(<y><z/></y>);export __proto__; }\n");
tryItOut("/*for..in*/for(var [prop, prop] = Date() in <x><y/></x>\n) export __noSuchMethod__;");
tryItOut("if((<x><y/></x>.__defineGetter__(\"prop\", (<y><z/></y>).__defineSetter__))) { if (()) {const prototype, prop = __parent__;; } else {<><x><y/></x></>; }}");
tryItOut(";");
tryItOut("if(prop) { if ((gc)) {return;export *; }} else yield this;");
tryItOut("export *;");
tryItOut("/*infloop*/M:for(<><x><y/></x></>; <x><y/></x>; <><x><y/></x></>) throw __proto__;");
tryItOut("if((((__noSuchMethod__ + this) && prop == __proto__ for (#3={a:#3#}['__noSuchMethod__'] in yield; = prop)))) {;throw <><x><y/></x></>; } else  if ((<x/>.throw(__parent__))) gc()");
tryItOut("/*infloop*/do  while(5.0000000000000000000000\t);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop['[1,,]'] in <><x><y/></x></>) return [1];");
tryItOut("L: export __parent__;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <y><z/></y>) constructor;export *;");
tryItOut("/*infloop*/for(var [] = window ? (new constructor.prototype) :  /x/g  ? false : <x/>; [((function  get () { ; } )( '' ))]; (__parent__ = [[]])) {__proto__, prototype = (function ([y]) { })();{} }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if(<y><z/></y> >> __count__ = * for each (x::constructor in *) if ([,,])) {/*infloop*/while(*::*){window; } } else  if (0) {if(__proto__.__count__) { if (({ __count__: __noSuchMethod__, prototype: constructor }) = new (prototype)(window, <x><y/></x>)) {/*infloop*/while(false)const __noSuchMethod__;if(prop) var prop; else  if (<><x><y/></x></>) {(*); } else 0.1 } else {var __parent__ = window; }} }");
tryItOut("/*for..in*/for(const __count__ = __parent__.__defineSetter__(\"<employee id=\\\"1\\\"><name>Joe</name><age>20</age></employee>\", [1,2,3,4].map) in false.watch(\"__iterator__\", undefined)) {{break L; } }");
tryItOut("/*infloop*/L:for((-1); new ((uneval(__count__)))(<x><y/></x> &= <x><y/></x>, __proto__); new Date()) {L:if(\f{}) { if (arguments) throw __noSuchMethod__; else {export __iterator__; }} }");
tryItOut("{yield;\t }");
tryItOut("L:if([1,2,3,4].slice(window)) {__proto__ = __noSuchMethod__; }");
tryItOut("throw StopIteration;");
tryItOut("with({}) let(__count__, __proto__ = function ([y]) { }) { return <x/>;");
tryItOut("/*for..in*/for(const __noSuchMethod__((__parent__.__noSuchMethod__)) in ((/a/gi)( \"\" (0.1 >>>=window)))){yield;yield -3/0; }");
tryItOut("if(this) {(prototype).watch } else  if ((<y><z/></y> *= <x/>)) if(\ntrue) export *;");
tryItOut("if( /x/ ) {null; }");
tryItOut("/*for..in*/L:for(var constructor in *) {continue ;gc() }");
tryItOut("{L:if((++this)) Math.sin else  if (\n<x><y/></x>.prop = <x><y/></x>.(#3={a:#3#})) yield; else {let prototype = this;; }const __noSuchMethod__ = <x><y/></x>, constructor = this; }");
tryItOut("let constructor = <x/>, __parent__ = <><x><y/></x></>;");
tryItOut("/*for..in*/for(var [prototype, __count__] = (__proto__.( '' )) in @foo) {var function::prototype = <y><z/></y>;{} }");
tryItOut("prototype.__proto__\n");
tryItOut("switch((Math.sin)) { default: yield undefined;break;  }");
tryItOut("do constructor, __proto__; while(([15,16,17,18].sort((prop = this), yield __parent__.propertyIsEnumerable(\"prototype\")).__iterator__) && 0);");
tryItOut("/*infloop*/M:for(<x><y/></x> >> \f*::*; __count__ ? (<x><y/></x>.eval({})) : null; this ^ .2) {return constructor = <><x><y/></x></>; }");
tryItOut("/*for..in*/for((__parent__(@foo)) in 1.2e3) <><x><y/></x></>\n");
tryItOut("let (constructor, ({ __parent__: \f__iterator__ })) { with(<x><y/></x>)const prop = <x><y/></x>, prototype; }");
tryItOut("while(((#0=[ '' ]\n)) && 0){export prop;3/0; }");
tryItOut("\fM:with(__count__\n){yield; }");
tryItOut("L:while(((<><x><y/></x></>.yoyo(<y><z/></y>))) && 0)(false);");
tryItOut("while(('fafafa'.replace(/a/g, #3={a:#3#})) && 0);");
tryItOut("/*infloop*/for(var __proto__; let __iterator__ = <x><y/></x>, prop;; this) {(*);return *::*; }");
tryItOut("this.zzz.zzz;");
tryItOut("var __count__, constructor;");
tryItOut("__parent__, arguments = __count__;");
tryItOut("for(let y in [5,6,7,8]) let(({ prop: prototype, getter: prop }) = new Array([,,]), __noSuchMethod__) { this.zzz.zzz;");
tryItOut("/*for..in*/for([__proto__, __iterator__] = true.isPrototypeOf(arguments) in  /x/ )  '' ;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] = 0 / prototype getter: <x><y/></x> in __parent__ = true.throw(1e81)) let constructor = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in [11,12,13,14].filter) {export prototype; }");
tryItOut("return;return  /x/ ;");
tryItOut("/*infloop*/for(<y><z/></y>;  \"\" ; <><x><\fy/></x></>) {return *; }");
tryItOut("/*infloop*/while(({constructor: [[]] }))var __noSuchMethod__ = *::*;");
tryItOut("\t'fafafa'.replace(/a/g, ({}).__lookupGetter__);\ncontinue \nlet(({ __proto__: __noSuchMethod__ })) ((function(){for(let y in [5,6,7,8]) yield (#0=[1,,]) ? (*::*.propertyIsEnumerable(\"prop\")) : (Math.pow).call(*::*, window);})());");
tryItOut("L: {L:if(<y><z/></y>) { if ( /x/ ) { '' export *; } else {;yield @foo; }}let (__noSuchMethod__) { /*infloop*/while(*)gc() } }");
tryItOut("/*infloop*/M:while(([, , __parent__] = [11,12,13,14].sort.__defineGetter__(\"__noSuchMethod__\", gc))){/*infloop*/L:while(prototype){export *;3/0; } }");
tryItOut("/*for..in*/for(constructor = __iterator__ = <y><z/></y> in this) /*for..in*/for(var [__iterator__, __noSuchMethod__] = this in  /x/g ) gc()");
tryItOut("/*infloop*/for(this.__defineGetter__(\"__count__\", (1 for (x in []))); ( \"\" .*); [(this.__iterator__)].some((0/0).apply)) {yield <y><z/></y>;{} }");
tryItOut("return;null");
tryItOut("yield new ((((((1 for (x in []))).call).call).call).apply)();");
tryItOut("export *;__parent__ = function(id) { return id }, prototype = null;");
tryItOut("{throw __count__;throw __parent__; }");
tryItOut("let (prop, __noSuchMethod__ = 1.3) { gc() }");
tryItOut("Math.pow");
tryItOut("return (-0);\n(null);\n");
tryItOut("with(<x><y/></x>.( /x/g ));");
tryItOut("if(#1#()) { if (prototype) {let __count__ = <x><y/></x>, __noSuchMethod__;break L; }} else {export *;<><x><y/></x></>; }");
tryItOut("");
tryItOut("/*infloop*/L:for(var __count__; __count__; <x><y/></x>) {return <x/>;__count__ = <x><y/></x>, __parent__ = true; }");
tryItOut("continue M\ngc()");
tryItOut("return (;");
tryItOut("/*for..in*/for(let prototype = <x/> >>> <y><z/></y> in constructor) let __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((constructor) in null.*) __parent__ = false;");
tryItOut("L:if(this.zzz.zzz) export constructor;");
tryItOut("yield;export constructor;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/L:for(__iterator__ in ()) {return @foo;/*for..in*/for(prop.__count__ in [,,z1]) {return this; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in prop.__defineSetter__(\"__count__\", Math.sin).watch(\"prototype\", function(q) { return q; })) {if(window) {yield; } else export constructor; }");
tryItOut("{yield\n }");
tryItOut("if(*::*)  else {const __iterator__ = <x/>; }\nvar __noSuchMethod__;");
tryItOut("with({__iterator__: (__parent__ = ((__proto__.prototype = <y><z/></y> for (__iterator__ in false))(this.__defineGetter__(\"__iterator__\", Math.pow))))}){if((uneval(<><x><y/></x></>))) { if (constructor = this for each (__noSuchMethod__ in <><x><y/></x></>)) {export *; }} else throw  \"\" ; }");
tryItOut("M:if(<x/>) { if (this) continue M;} else \n{gc() }");
tryItOut("do if((({__iterator__ setter: Function, prop getter: (new Function(\"<><x><y/></x></>;\")) }))) { if (({ prototype: function::constructor, __count__: __parent__ }) = 1e81) {yield  /x/ ; }} else throw <x><y/></x>; while(() && 0);");
tryItOut("L:with({prop: null}){ }");
tryItOut("/*for..in*/for(const __count__ in ((([1,2,3,4].map).apply)((yield [[]].watch(\"__count__\", eval))))){return constructor;/*for..in*/for(let __iterator__ in (((function  __iterator__ (prototype) { return #1# } ).apply)(<y><z/></y>))){throw ({a2:z2}); } }");
tryItOut("/*infloop*/for(__iterator__([15,16,17,18].map((new Function(\"__proto__\")), [,,z1])) = 'fafafa'.replace(/a/g,  /x/ ); function(id) { return id };  /* Comment */function ([y]) { } & <><x><y/></x></> .@*:: <y><z/></y>) if( '' ) gc() else  if (@foo) __iterator__; else {yield __parent__;; } const __parent__;");
tryItOut("if( /x/ .__iterator__ = <x/>) {yield;const __parent__; } else  if ((__parent__.@*)) const __proto__;");
tryItOut("M:if(true) {new Function( /x/g ); } else  if ( \"\" ) export *; else ([,,z1]);");
tryItOut("export prototype;");
tryItOut("while((('fafafa'.replace(/a/g, 'haha'.split))) && 0){gc() }");
tryItOut("if(('haha'.split).call((__count__.yoyo().unwatch(\"__parent__\")), (<><><x><y/></x></></>.watch(\"function::__proto__\", function (__count__) { return (prop.((<x/>)(false))) } )))) { if (#1=[(var __count__, __noSuchMethod__ = <><x><y/></x></>)]) {true\n \"\" ;/*for..in*/for(const [prototype, __proto__] = * in <x/>) {yield;; } }} else M:if(__count__ > [,,]) {const constructor = @foo;let prop = prototype, __parent__ = <><x><y/></x></>; }");
tryItOut("with(new (</>)()){export __proto__; }");
tryItOut("/*for..in*/for(var __parent__ = ({ __parent__: __iterator__,  /x/ : __noSuchMethod__ }) = <><x><y/></x></>.yoyo(<><x><y/></x></>) in <x><y/></x> ? (-0) : <x><y/></x>) {return; }");
tryItOut("/*infloop*/for(var __noSuchMethod__() = (uneval()); new (+<x><y/></x>)(undefined(), [[1]]); window) {{var __parent__, __count__; }M:if(null) throw <x><y/></x>; else  if (false) {return <y><z/></y>; } else {export __noSuchMethod__;; } }");
tryItOut("/*for..in*/for(var __proto__ = new Boolean(constructor =  /x/ (#1=[#1#])) in export prototype\n) let (function:: = window) { ; }");
tryItOut("with(this.__defineGetter__(\"__count__\", function (__count__, __iterator__)__noSuchMethod__ = constructor))continue M; const prototype;");
tryItOut("/*infloop*/do {if(\r<><x><y/></x></>) { if (<><x><y/></x></>) export *;} else {function (__proto__) { (true); }  } } while(((yield null)).@foo);");
tryItOut("yield;gc()");
tryItOut("M:if(3/0) /*infloop*/for(var constructor; 3.141592653589793 ? prototype : <><x><y/></x></>; new function(y) { yield y; const __parent__ = undefined, __parent__;; yield y; }(033)) gc()");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = (new Function)() in <x><y/></x> && [,] .@*:: 'haha'.split(__noSuchMethod__)) /*infloop*/for(__proto__ = <x><y/></x>; [][@foo]; __noSuchMethod__.__proto__ getter= this) (prototype);");
tryItOut("__parent__");
tryItOut("/*infloop*/while(undefined.hasOwnProperty(\"__proto__\"))gc()");
tryItOut("switch(eval(\"( \\\"\\\" .__lookupSetter__(\\\"__noSuchMethod__\\\") || window)\", ([1,2,3,4].slice) >= (gc).call(prop, ))) { case (p={}, (p.z = yield ([15,16,17,18].filter(/a/gi, (p={}, (p.z = [[]])()))))()): break;  }");
tryItOut("let (({ prototype: ({ prototype: [, , , ] }), prop: ({ __count__: //h\n[, [__count__, ({ __proto__: constructor })], prototype, ], __parent__: ({ __proto__: [(constructor), , constructor], prototype: __parent__ }) }) })) { M:switch(({prototype: yield <x><y/></x>, prop setter: /a/gi })) { case  '' : return <x><y/></x>; } }");
tryItOut("L: {/*infloop*/for(function ([y]) { }; __parent__; ({a2:z2})) {yield; }return  \"\" ; }");
tryItOut("/*infloop*/do M:if(prototype.prototype) {export *;return undefined; } else  if (<><x><y/></x></>.valueOf(\"number\")) export get; else {{} } while(\n(3/0).call([11,12,13,14].some, ));");
tryItOut(";");
tryItOut("/*infloop*/while((eval)()){const __iterator__;export *; }\n;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const <x><y/></x> in ((function(y) { yield y; /*infloop*/for(__count__ = #1# ^ true; new <x/>\n; (uneval(__iterator__.__iterator__ getter= /a/gi))) const each, prototype = window; const __noSuchMethod__;; yield y; })(({ __iterator__: prop, __count__: [, ] }) = __count__)/*\n*/)){break ; }\t");
tryItOut("( for each (constructor in <x><y/></x>) for each (prototype in this));\nexport *;\n");
tryItOut("if(([(new <x/>())\n])) with({__iterator__: #1#})if((3.isPrototypeOf(false))) { if (0x99 >>= null) export *; else {return *; }} else  if (new (/a/gi)()) if(this) { if (<x><y/></x>) __parent__; else {gc()let __iterator__, __count__ = [,,]; }} else yield\ngc()");
tryItOut("do L:while((prototype.constructor = <><x><y/></x></>) && 0)continue M; while((\n[1,2,3,4].slice(Math.sin, (--__count__.watch(\"__parent__\", Math.sin)))) && 0);");
tryItOut("; const prototype;var __parent__ = *::*, __proto__;");
tryItOut("const get, __count__;");
tryItOut("if(window) { if (function (__proto__) { yield __iterator__ = (constructor = #3={a:#3#}) }  = new function  __iterator__ (__noSuchMethod__)\f__count__(<><x><y/></x></>)) if(<x><y/></x>) {throw <x><y/></x>; }} else {do break ; while((-1) && 0); }");
tryItOut("L:if(\tnew function(y) { yield y; yield;; yield y; }()) yield; else {; }");
tryItOut("/*for..in*/for(prop =  ''  in this .@x:: <y><z/></y>) export *;");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = <><x><y/></x></> in <y><z/></y>) {return #3={a:#3#};(1.3); }");
tryItOut("while((constructor = constructor) && 0)continue ;");
tryItOut("yield yield window;");
tryItOut("/*for..in*/for(let (((1e-81).call(*, )--\f))(([15,16,17,18].sort(new Function, __count__.__iterator__))) in ((/a/gi)((uneval(1e4)).constructor.__lookupGetter__(\"__proto__\")))){throw StopIteration; }");
tryItOut("__proto__ = prop;");
tryItOut("with({}) { with({}) { return; }  } ");
tryItOut("if(3.141592653589793) throw null\ngc()");
tryItOut("{ \"\"  }");
tryItOut("L: {}");
tryItOut("if(((<y><z/></y>).apply) /= [15,16,17,18].filter(Function, [[]]\n)) {;prop } else yield #1#;");
tryItOut("__parent__");
tryItOut("/*infloop*/M:do let __count__, __proto__ = 3; while([{var __proto__ = <><x><y/></x></>, __count__;yield; }].filter(gc));/*for..in*/for(let [__parent__, __iterator__] = <><ccc:ddd> </ccc:ddd></> in (({a2:z2}))[__parent__]) f");
tryItOut("let (__parent__) { __parent__ }");
tryItOut("{@foo;{/*for..in*/for(var __parent__ in (-1)) return; } }");
tryItOut("L:switch((__proto__ =  /x/  for (__iterator__(*::*) in *) for (__noSuchMethod__ in [,,]))) { case new Number(prototype, prop)((new <><x><y/></x></>([]))): {}break; break; default: function  prop () { yield true } break; case : break; case 0: /*for..in*/for(const __iterator__ in (((new Function(\"L:if(<><x><y/></x></>) { if (-0) ((new Function(\\\"export __count__;\\\"))).call} else {throw [1]; }\")))(__iterator__ = <y><z/></y>)));break; }; }");
tryItOut("let(__noSuchMethod__ = <x/>, ({ __iterator__: [prop, ({ __count__: __count__ }), , , ({ __parent__: __iterator__, __noSuchMethod__: __count__ })], __proto__: [, ] }) = false) ((function(){})());");
tryItOut("/*infloop*/L:do {export __noSuchMethod__; } while((*)());");
tryItOut("return  '' \n\n");
tryItOut("/*for..in*/for(let [__count__, __proto__] = __parent__ = window.eval(('fafafa'.replace(/a/g, this))) in (<xxx>{constructor}</xxx>.((new this(<x><y//h\n/></x>))).hasOwnProperty(\"__count__\"))) {do break M; while(((eval(\"/*for..in*//* nogeckoex bug 349964 */L: for  each(let __noSuchMethod__ in __iterator__) gc()\", (case [z1]: break; default: (this);break; case 5: break; case this: yield window;break;  = window < prop = true)).throw(new 1e+81()))) && 0); }");
tryItOut("while(( \"\" ) && 0){gc() }");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: constructor, __noSuchMethod__: constructor }) = <><x><y/></x></> @ <x><y/></x>; 1e4.hasOwnProperty(\"function::__parent__\"); (__proto__.__count__ = null ? #1# : function ([y]) { })) ;");
tryItOut("const prop = <x><y/></x>;");
tryItOut("/*infloop*/do /*infloop*/for(let __count__; <y><z/></y>; undefined) {const constructor = <x/>; } while( >>>=<y><z/></y>);");
tryItOut("__iterator__, prop");
tryItOut("__count__ = prop;");
tryItOut("/*for..in*/for(const constructor = (((p={}, (p.z = @foo)()))++) in *()) {const __iterator__, prototype;gc() }");
tryItOut("");
tryItOut("switch(<y><z/></y>) { default: break;  }");
tryItOut("/*infloop*/L:while(true |= {})prototype;");
tryItOut("{if(\n '' ) {throw (-0);export *; } else  if ((new String())) {} }");
tryItOut("yield (-1);");
tryItOut("if({}) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in null) return undefined;");
tryItOut("/*infloop*/do /*for..in*/for(var __noSuchMethod__ in (([1,2,3,4].slice)( \"\" ))){{} } while(((eval(\"[1,2,3,4].map\", ((new Function)(__iterator__, window.unwatch(\"\")))))));");
tryItOut("M:with(([15,16,17,18].sort(new Function,  /x/g )) ? __noSuchMethod__ = 0/0 : ()){break ; }");
tryItOut("throw __count__;");
