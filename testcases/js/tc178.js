tryItOut("{yield  /x/g ; }");
tryItOut("/*infloop*/for(const __parent__; <x><y/></x>.hasOwnProperty(\"constructor\").@foo ?  '' .isPrototypeOf( '' ) : (function ([y]) { })(); \n<><x><y/></x></>) throw undefined;");
tryItOut("L: {{} }");
tryItOut("/*for..in*/for(var [prototype, __proto__] = (uneval(<x><y/></x> ^ this)) in ({prop:  \"\" }) ? ( /x/ ) : <zzz>1.2e3</zzz>) {<x/>; }");
tryItOut("switch(<x><y/></x>) { \fdefault: break;  }");
tryItOut("{if(constructor) return;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __count__ in <y><z/></y>) <y><z/></y>;");
tryItOut("prototype = __iterator__;");
tryItOut("const __parent__, prop = <x><y/></x>\n");
tryItOut("this.zzz.zzz;");
tryItOut("L: {}");
tryItOut("for(let y in [5,6,7,8]) (<x><y/></x>);");
tryItOut("L:if(__noSuchMethod__.__parent__) {yield @foo;\fbreak M; } else  if ((return;.prototype =  /x/g )) {return  '' ;gc() } else { }");
tryItOut("return;/*for..in*/for(__iterator__ = __proto__ = \f{} in new String()) (window);");
tryItOut("/*for..in*/]( /* Comment */<x><y/></x>) in <x><y/></x>) {/*for..in*/for(let [__noSuchMethod__, __count__] = <y><z/></y> in true) {prop = <x/>; }prototype; }");
tryItOut("/*infloop*/while(([1,,].propertyIsEnumerable(\"__noSuchMethod__\"))()){}");
tryItOut(";\nlet (__noSuchMethod__ = <><x><y/></x></>, __proto__) { ( /x/g ); }\n");
tryItOut("switch(prototype) { default: delete, __parent__ =  \"\" ;break; const __proto__;case 5: case <x><y/></x>: export *;break; case [[1]]: yield; }");
tryItOut("throw constructor;");
tryItOut("return");
tryItOut("if(this.zzz.zzz) __parent__ else  if ((<x><y/></x>.__defineGetter__(\"__iterator__\", gc) != this.valueOf(\"number\"))) __count__: (new ((new (__iterator__)()))(([-3/0 for each (__iterator__ in  \"\" )]), 1e81)) && function  constructor \f(__iterator__, function::__parent__) { yield __proto__ } ()");
tryItOut("L:if(({ __parent__: __noSuchMethod__, __noSuchMethod__: <x><y/></x> }) =  /x/g  + window) __count__ = *::*, __count__;");
tryItOut("gc()");
tryItOut("{yield;(<y><z/></y>); }\ncontinue ;/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in __iterator__) {export *; }\n");
tryItOut("/*infloop*/M:for((this += __noSuchMethod__ <  \"\" ); <><x><y/></x></>.isPrototypeOf(@foo);  '' .propertyIsEnumerable(\"__noSuchMethod__\")) {var __proto__ = [,];export __proto__; }");
tryItOut("throw StopIteration;");
tryItOut("constructor");
tryItOut("/*infloop*/for(\n /x/  |= window; __parent__.__iterator__ getter= /a/gi.__defineSetter__(\"constructor\", (Function).call); (#1#[<><x><y/></x></>])) {; const __count__; }");
tryItOut("L:with({prop: __parent__ = 1e-81}){return true;L: return; }");
tryItOut("with({__count__: (__proto__ = <x><y/></x> % new ( /x/g )(undefined, prototype))})continue L;\nyield;\n");
tryItOut("if(#2=({prototype: *})) { if (yield <x><y/></x>) var constructor = (-1); else const [1] = this;}");
tryItOut("/*for..in*/for(var ({ prototype: prop, constructor: __iterator__ }) in (-1) ? 2 : ( /x/g  .. @foo).@*) {throw StopIteration;continue ; }");
tryItOut("/*for..in*/L:for(var prop in yield x::__parent__) if(([,,z1] if (-0))) { if ((([1,2,3,4].slice).call(__count__, ))) \tM:if(<x><y/></x>) {gc()yield; } else  if (<x><y/></x>) [1,2,3,4].map else {export *; }}");
tryItOut("let (__parent__) { /*infloop*/for(var constructor = null; false; <><x><y/></x></>) __noSuchMethod__, __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in <x><y/></x>) {<x><y/></x>;return null; }");
tryItOut("/*infloop*/do {return 0.1\n } while(new (function::x::__proto__.(((yield <><x><y/></x></>)\f.__noSuchMethod__ = window)))((-)(), <x/> > (function(id) { return id } .@x:: window)));");
tryItOut("while(((({ __noSuchMethod__: [prototype] }) = ({ prototype: ({ prototype: __iterator__, constructor: __iterator__ }) }))) && 0){export *;M:with([11,12,13,14].sort){export __proto__; '' ; } }");
tryItOut("return (this.__defineSetter__(\"constructor\", function  prop () { return <x/> } ));");
tryItOut("yield;continue M;");
tryItOut("/*infloop*/L:while([15,16,17,18].some(__parent__%=4., (new (new Function(\"export __iterator__;\"))(prototype, *::*)).__lookupGetter__(\"prop\"))){(-0);return; }");
tryItOut("let() ((function(){for(let y in [5,6,7,8]) for(let y in []);})());");
tryItOut("const prop, __noSuchMethod__ =  /x/ \n");
tryItOut("if(Exception()) {gc()return; }");
tryItOut("with({__parent__: ('fafafa'.replace(/a/g, [1,2,3,4].slice)) for each (prototype in <x><y/></x> -  /x/ ) for ((__iterator__) in  \"\" ) /= (function(q) { return q; })(<x/>, constructor)})/*infloop*/L:do {return <x><y/></x>;let __noSuchMethod__; } while(prop);");
tryItOut("with({}) { const prototype, constructor; } ");
tryItOut("M:with({__parent__: <xxx>{prototype}</xxx>}){return (window || gc()); }");
tryItOut("with({__noSuchMethod__: <x/>}){<y><z/></y>; } const prop;");
tryItOut("return;");
tryItOut("L: {; }");
tryItOut("with({}) { with({}) { throw StopIteration; }  } ");
tryItOut("/*infloop*/for((__count__ = new ((<x><y/></x>.(null)))((<x><y/></x>.__lookupSetter__(\"prop\")), (__iterator__.__count__ getter= <><x><y/></x></>))); -3/0; (1 for (x in []))) {/*infloop*/for(function::__noSuchMethod__;  \"\"  &= (window for (constructor in .2)); window) {let prototype, prop =  '' ; } }");
tryItOut("M:if(({})) { if (this)  else Math.pow}");
tryItOut("if(((({}).hasOwnProperty)(<x><y/></x>, this).__defineSetter__(\"prototype\", ([1,2,3,4].map).apply) ? <x><y/></x>.(1e4).__defineSetter__(\"prototype\", (1 for (x in []))) : ())) yield; else  if (({__proto__ getter: Math.pow, __noSuchMethod__: (({ prop: ({ __count__: __noSuchMethod__ }) }) = new (true)(({}),  /x/g )) })) {yield <><x><y/></x></>; } else var constructor = prop; const prop;");
tryItOut("/*infloop*/for([this for (5.0000000000000000000000.get in 0)]; <><x><y/></x></> ^= this; __count__ = constructor , (true += true)) {return; }");
tryItOut("if((function(q) { return q; }).call(1e81, )) {return *::*\ngc() } else  if ((*::*.unwatch(\"set\").*.*)) do {{}(<><\fx><y/></x></>); } while((this ? undefined : <x><y/></x>) && 0);");
tryItOut("let constructor, __noSuchMethod__\nif((<x><y/><x//h\n> - <><x><y/></x></>)) { if (__noSuchMethod__) {;export *; }} else constructor");
tryItOut("yield new Iterator();");
tryItOut("/*infloop*/L:while(function::prototype = constructor) \"\" \n<x/>;");
tryItOut("with({__count__: Function = __parent__}){}");
tryItOut("if(<y><z/></y>) { if (({a2:z2})) const __parent__ = 1e81; else {export __proto__; }}");
tryItOut("/*for..in*/for(let __proto__ = <x><y/></x>.* in [,,z1]) {let __noSuchMethod__, prop = @foo;let <x><y/></x> = this, prototype = constructor; }");
tryItOut("L: __proto__ = set;");
tryItOut("if('fafafa'.replace(/a/g, function  prop ([], ({ __proto__: function::__iterator__ })) { {} } )) { if (this.__defineSetter__(\"prototype\", (-1))) with([z1,,]){ }} else return 0;");
tryItOut(";if((new __noSuchMethod__(window, *::*))) { if (#0=new constructor(__count__, window)) export function::__noSuchMethod__;} else yield;");
tryItOut("/*infloop*/M:do {gc() } while(-3/0);");
tryItOut(" /x/g \nexport *;");
tryItOut("/*infloop*/L:for(var __count__; <><x><y/></x></>(); [z1].valueOf(\"number\")) {return  \"\" ; }\n{yield;continue ; }\n");
tryItOut("/*for..in*/for(const __count__ in ((*)(true)))1e4;");
tryItOut("while((({prototype: null.__noSuchMethod__})) && 0){\fexport *;if(<><x><y/></x></>) { if ( /x/g ) return; else export *;} }");
tryItOut("/*infloop*/M:while(<><x><y/></x></> >> __parent__){(*::*); }");
tryItOut("if(yield <x><y/></x>.__defineSetter__(\"prop\", 0)++) {((yield @foo)).watch(\"prop\", function(y) { yield y; yield __parent__;; yield y; });; } else  if (( /* Comment */(p={}, (p.z = *::*)()) instanceof constructor.( /x/g  instanceof this))) throw this;");
tryItOut("<x><y/></x>");
tryItOut("throw __proto__;");
tryItOut("while(( '' ) && 0)return;");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = this in <y><z/></y>) let prototype;");
tryItOut("if((uneval(#0=#1# .@x:: __iterator__.(0/0)))) yield; else {var __proto__ = window;yield __parent__ }\n");
tryItOut("do {function (*::*) { yield; }  } while((0.1) && 0);");
tryItOut("export *;");
tryItOut("const ({ __count__: prototype, __parent__: __proto__ });( '' ) = __proto__");
tryItOut("with({}) with({}) yield <x><y/></x>.__iterator__;");
tryItOut("yield [11,12,13,14].map;");
tryItOut("L:switch(<x><y/></x>) { case <><x><y/></x></>:  }");
tryItOut(";\nprototype = <x/>, prop = <><x><y/></x></>;\n");
tryItOut("if(__iterator__) {; } else  if (<>\t<x><y/></x></>) let __parent__ = [[1]]; else {{}const __proto__; }");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("with(eval(\"/*for..in*/L:for(const [__proto__, *] = (1e+81 | <><x><y/></x></>) in <><x\\t><y/></x></>) {with({prop: <><x><y/></x></>}){export __noSuchMethod__;break L; } }\", __proto__.prop = __proto__.(<x><y/></x>))){M:with(4..__defineGetter__(\"__proto__\", (new Function(\"{}\"))/*\n*/)){export prototype }{export constructor;export *; } }");
tryItOut("if((<x><y/></x>.propertyIsEnumerable(\"prototype\")) ? 3/0 == <\f><x><y/></x></> : __iterator__ = <x><y/></x>) {export *; } else  if ('fafafa'.replace(/a/g, function () { yield undefined } )) /*infloop*/L:for(prop = <x><y/></x>; <y><z/></y>; __proto__) {(*); } else {/*infloop*/L:do let __iterator__ =  /x/g ; while(<x><y/></x>); }");
tryItOut("if(new ([1,2,3,4].map)()) return (/a/gi).call(*::*,  /x/ , <y><z/></y>); else {M:with(<x><y/></x>[033]){export constructor; }do {export *;return; } while((false) && 0); }");
tryItOut("__parent__ = __proto__;");
tryItOut("{L: {yield <x><y/></x>;throw window; } }");
tryItOut("/*infloop*/\fM:for(var __proto__; this; (Math.sin)) /*for..in*/M:for(let prop in (([1,2,3,4].map)(([<y><z/></y>].filter(({}).hasOwnProperty).__noSuchMethod__)))){export *; }");
tryItOut("/*infloop*/for(let ({ prop: prototype }) = [new (({}).hasOwnProperty)()]; __proto__ = <x/>; (let (prototype) <x/>.hasOwnProperty(\"__parent__\"))) yield <x/>;");
tryItOut("if(<y><z/></y>) { if (yield  '' ) yield [[1]];} else return;");
tryItOut("let (__noSuchMethod__ = *::*) { yield; }");
tryItOut("yield <x><y/></x>");
tryItOut("gc()\n");
tryItOut("yield (-0).__count__; const __count__;");
tryItOut("/*infloop*/L:while( \"\" .__defineSetter__(\"__proto__\", (false).__defineSetter__))prototype;");
tryItOut("{const prop, __proto__;([1,,]); }");
tryItOut("while((new (prop = @foo)(try {  } finally { export __parent__; } )) && 0){if(-__parent__) export constructor; else  if (prototype) return (-0); const prop;if(<x><y/></x>) break ; else  if (0.1) throw <><x><y/></x></>; else {let __count__; } }");
tryItOut("while(((this.__defineSetter__(\"prop\", Function).__count__)) && 0)(false);");
tryItOut("\n");
tryItOut("/*for..in*/for(var ({ constructor: prototype, x::__parent__: ({ __noSuchMethod__: __noSuchMethod__ }) }) in eval) /*for..in*/for(let prototype in ((\n /x/ )(window))){let <><x><y/></x></> = 1e+81;var prototype; }");
tryItOut("/*for..in*/M:for(var __parent__ = (window.unwatch(\"__parent__\")).valueOf(\"number\") in 1e4) gc()");
tryItOut("continue M; const prototype;");
tryItOut("(new Function(\"throw window;\"))");
tryItOut("yield;");
tryItOut("{export default: export prop;case  /x/g : yield (-1);;return window; }");
tryItOut("let ([] = false >>= <y><z/></y>) { return @foo; }");
tryItOut("throw StopIteration;");
tryItOut("var __iterator__, __iterator__ = <><x><y/></x></> = false, prop = <x><y/></x>;");
tryItOut("let(__noSuchMethod__ = [], __noSuchMethod__ = <y><z/></y>) { let __proto__;");
tryItOut("while(((<x/> for (% in *::*).__lookupGetter__(\"__iterator__\"))) && 0)new Function");
tryItOut("return window");
tryItOut("if((throw <y><z/></y>;.hasOwnProperty(\"__iterator__\"))(__noSuchMethod__.false getter= function(q) { return q; }, (<><x><y/>\r</x></> if (<x/>)))) yield  \"\" ;");
tryItOut("throw <><x><y/></x></>;\nexport *;\n");
tryItOut("/*for..in*/for(let (constructor.isPrototypeOf(*::*))([ /x/ ]) in ((({}).__lookupGetter__)((<x/>.eval(<><x><y/></x></>) for each (__parent__ in *) for (__noSuchMethod__ in  /x/g ))))){}");
tryItOut("/*infloop*/for(var __count__; (<y><z/></y> * window)[((p={}, (p.z = function::__count__ = <><x><y/></x></>)()).isPrototypeOf(([z1,,].__defineSetter__(\"__parent__\", function(q) { return q; })) === <x/>))]; null) {/*infloop*/M:for(const prototype = .2; undefined; this) __noSuchMethod__const __noSuchMethod__ = null; }");
tryItOut("this.zzz.zzz;");
tryItOut("if((eval(\"<x><y/></x>\", this).__defineGetter__(\"prototype\", *::*)) ? new (new Function(\"\"))(<><x><y/></x></>) : ((__parent__) = false <= <y><z/></y>)) /*for..in*/for(let (prototype) in (prototype++)) {gc()export *; } else  if (eval(\"(prop = window)\", arguments .@x:: this)) var prop, constructor; else {export __noSuchMethod__;continue ; }");
tryItOut("if((export *)) {continue ;break ; }");
tryItOut("throw  /x/g ;");
tryItOut("do gc() while(([15,16,17,18].filter([1,2,3,4].slice, ((undefined <= __iterator__).__defineGetter__(\"__parent__\", window)))) && 0);");
tryItOut("/*infloop*/for(var __noSuchMethod__ = let (prop, constructor = ({constructor: *::*})) new Number(); 1.2e3 <<= __proto__; (return)(this.zzz.zzz)) { }");
tryItOut("[, , prototype(window), , ]");
tryItOut("L:if((*::* * <x><y/></x>))  else  if ( /x/ ) {(@foo);(#1=[#1#]); } else {}");
tryItOut("M:if(true) { if ([new (//h\nthis)()undefined]) {while((<><x><y/></x></>) && 0)[z1]; }} else {yield  \"\" ; }");
tryItOut("/*infloop*/L:for(({ __count__: __iterator__, prop: ({ __noSuchMethod__: __count__ }) }) = ({ constructor: prototype }) = this+=__noSuchMethod__ = return 0/0;; ~__count__ = __iterator__ = true; (prototype = @foo)) {const __proto__ = <x><y/></x>, this; }");
tryItOut("do L:while((<><x><y/></x></>) && 0)let __parent__; while((({ prototype: __count__ }) = .2.hasOwnProperty(\"__noSuchMethod__\")) && 0);");
tryItOut("break M;return;");
tryItOut("L:if(\n<><xxx>{__proto__}</xxx></>) {<><x><y/></x></>;return <x/>; } else let (({ prop: __parent__, prop: prop }), __proto__) { if((prop +  '' )) gc() else  if (each = <x/>) {; } else export *; }");
tryItOut("yield __count__;");
tryItOut("for(let y in [5,6,7,8]) <x/>");
tryItOut("export *;");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, function  getter (__parent__)*::*)){[1,2,3,4].map }");
tryItOut("<x/>;");
tryItOut("/*infloop*/while(<x/>){({a2:z2});; }");
tryItOut("if(this) (__count__);");
tryItOut("L:if(<x/>) {__iterator__, prototype;{} }");
tryItOut("try { this.zzz.zzz; } catch(__iterator__ if __parent__.constructor) { for(let y in [5,6,7,8]) gc() } catch(__iterator__) { throw __proto__; } ");
tryItOut("let (prototype = <xxx {__count__}={(1e-81.__lookupGetter__(\"__proto__\"))} />, ({ constructor: ({ __proto__: prop }) }) = __iterator__ =  '' ) { {export __noSuchMethod__; }\nreturn undefined;\n }");
tryItOut("let (prototype) { yield; }");
tryItOut("switch((__iterator__ = null)) { case 1: break;  }");
tryItOut("L:if(<><x><y/></x></>) { if (<y><z/></y>) {return  \"\" ; } else export <x><y/></x>;}");
tryItOut("L: for(let y in []);");
tryItOut("switch((<x/>--)) { case 4: break;  }");
tryItOut("/*infloop*/do ; while(new (<x><y/></x>).watch());");
tryItOut("return true ^= <x><y/></x> === <y><z/></y>.__defineGetter__(\"__noSuchMethod__\", new Function);");
tryItOut("/*for..in*/L:for(const prop in (({( \"\" ); })((uneval(<><x><y/></x></>)))))return\n;");
tryItOut("return;");
tryItOut("L:if(new (<xxx {prop}={((uneval(yield <x/>)))} />)()) yield undefined; else  if (((p={}, (p.z = *::*)()))) {yield;try { <x/>; } catch(__count__) { prop = this; } finally { throw *; }  } else /*infloop*/do {;{} } while(0x99);");
tryItOut("continue M;");
tryItOut("/*infloop*/for(var prototype = 0/0; <x/>; <><x><y/></x></>) {(new Function(\"return;\"))yield *::*; }");
tryItOut("/*for..in*/for(let __proto__ = (uneval([(prototype|=(eval).call(<x/>, this, this)) for (( /x/ ).call(prototype = __parent__, <x><y/></x> % null) in let (__noSuchMethod__, constructor) true) for (<y><z/></y>.prototype in 1e-81) for each (prop in __noSuchMethod__)])) in [<><x><y/></x></> :: 1e81 for each (__parent__ in <x><y/></x>) if ([[1]])]) let (let = constructor === 1e81.watch(\"__count__\", (1 for (x in []))) != /*\n*/(\n /x/g ), __count__ = null.watch(\"__noSuchMethod__\",  /x/ ) ::  '' ) { break L; }");
tryItOut("M:if(<x/>) const prototype;");
tryItOut("if((<x><y/></x>.( '' ))) {yield null; } else  if ((#1#)(<><x><y/></x></>, [])) ; else {return; }");
tryItOut("L: {const __iterator__;/*infloop*/while(prototype.unwatch(\"prop\") if (<><x><y/></x></>))return; }");
tryItOut("do {/*infloop*/for(({ constructor: ({ constructor: __parent__ }), prop: [, , , prototype] }) = \n; .2[[]].hasOwnProperty(\"__noSuchMethod__\"); this.__defineSetter__(\"delete\", <x><y/></x>)) L: {throw *;export constructor; } } while((__proto__.__proto__ getter= ((null).call).apply) && 0);");
tryItOut("undefined");
tryItOut("/*infloop*/while((gc(<y><z/></y>, <><x><y/></x></>)))function  __proto__ (__count__) { return <><x>\t<y/></x></> } ");
tryItOut("let (prototype) { continue M; }");
tryItOut("if(__iterator__.(<><x><y/></x></>)) {constructor = true, __noSuchMethod__ =  '' ;const __iterator__ = @foo, function::prop = 1.2e3; }");
tryItOut("if(__proto__ = <x/>.__lookupSetter__(\"constructor\")) { if (3.141592653589793.yoyo(__count__)) \fswitch(prototype.__noSuchMethod__ setter= (5.0000000000000000000000).call) { case <y><z/></y>.constructor: break; ( /x/g );break;  } else {export prop;L: {\t; } }}");
tryItOut("(__noSuchMethod__);\n/*for..in*/for(__noSuchMethod__ in ((function () { (\f<x><y/></x>); } )(<y><z/></y>))){yield <><x><y/></x></>;\f }\n");
tryItOut("L: L:if(let (prop, prototype =  \"\" ) *::*) var __parent__, prototype =  /x/g ; else  if ((yield 0/0).prototype = (new Function(\"export *;\"))) {return; }");
tryItOut("/*infloop*/while((yield  \"\" ))L: export constructor;");
tryItOut("__noSuchMethod__ = ;");
tryItOut("const __count__;/*infloop*/while([,]){}");
tryItOut("/*for..in*/for([__noSuchMethod__, __noSuchMethod__] = (this.zzz.zzz++.valueOf(\"number\")) in 3) /*for..in*/for(var constructor =  /* Comment */true in __count__) {(<><x><y/></x></>); }");
tryItOut("/*infloop*/for(let __noSuchMethod__ =  \"\" ; [[1]];  \"\" ) {yield [1];return  { yield  /x/  } ; }");
tryItOut("if(1.3) { if ((new Math.pow(true))--) {/*infloop*/for(let __iterator__ = __parent__; <><x><y/></x></>; *::*) (window);default: if(({ get __count__(constructor, prototype) { yield this }  })) {__parent__, __noSuchMethod__ =  \"\" ; } else  if (<x><y/></x> ? <><x><y/></x></> : 1.2e3) {; }case (<x><y/></x>.valueOf(\"number\")).unwatch(\"__parent__\"): break; case  '' .unwatch(\"__iterator__\"): case 7: yield ;prototype }} else  /x/ ");
tryItOut("/*infloop*/for(const __iterator__; 4.(); ((Function)(((*::*).watch).apply, <x><y/></x>))) L:with({prop: (function ([y]) { })()}){gc()var x::__parent__; }");
tryItOut("L:if(__noSuchMethod__|=V) { if (prop.eval(__parent__) >>> 0x99 <= 1e4) var __iterator__;} else {/*for..in*/for(var [__count__, __proto__] = <x/> in <><x><y/>/*\n*/</x></>) {return (function ([y]) { })(); } }");
tryItOut("with({__proto__: x::prototype})export *;");
tryItOut("L:if(__noSuchMethod__.__proto__) gc() else  if (((uneval(__iterator__)))().@*) {throw prototype; } else {[1,2,3,4].mapreturn; }with((__parent__ = __parent__)){const prototype = <><x><y/></x></>, prop; }");
tryItOut("if(([11,12,13,14].map)) {\n<x><y/></x>;export constructor; } else  if ((p={}, (p.z = <><x><y/></x></> / *::*)())) {(<><x><y/></x></>);\f } else {export constructor; }");
tryItOut("L:switch((p={}, (p.z = (new Function()))())) { default:  }");
tryItOut("{yield;/*for..in*/for(var __iterator__ in 1e4) ; }");
tryItOut("if([new 0/0(0.1) if (null)]) {L: return; } else  if (eval(\"break M;\", (uneval(<><x><y/></x></>)))) {let (__noSuchMethod__, __proto__) { __proto__; } }");
tryItOut("return;");
tryItOut("with({}) return ((uneval(this.__lookupGetter__(\"__proto__\")))).__defineGetter__(\"prototype\", new Function);");
tryItOut("\nconst prop;yield this\n");
tryItOut("/*for..in*/for(var [prototype, __count__] = <bbb xmlns:ccc=\" /x/g \"><ccc:eee></ccc:eee></bbb> in __noSuchMethod__) /*infloop*/for(let __noSuchMethod__ = <><x><y/></x></>; *::*; undefined) yield;");
tryItOut("{const __noSuchMethod__ = [], __noSuchMethod__;yield prototype; }");
tryItOut("for(let y in [5,6,7,8]) let constructor = <x><y/></x>;");
tryItOut("let (({ x::__count__: ({ constructor: __count__ }) }) = (3.141592653589793\f ? *::* : __proto__.__proto__), ({ __proto__: prototype, __parent__: __noSuchMethod__ }) = (<x><y/></x> | ({a1:1}))) {  }");
tryItOut("/*for..in*/for(const [__proto__, __iterator__] = false.__parent__.unwatch(\"__noSuchMethod__\") in __iterator__ = 1e81) {export __count__; }");
tryItOut("while(((<><x><y/></x></>.__defineSetter__(\"constructor\", #1#))) && 0)constructor;");
tryItOut("(<x><y/></x>);");
tryItOut("if(*) {return; } else return;");
tryItOut("return;");
tryItOut("/*for..in*/L:for(var [__parent__, __proto__] = ([11,12,13,14].some % ) in new ((1 for (x in [])))(prop =  ''  != <x/>)) {/*for..in*/for(const [function::__parent__, prop] = prop = [z1] @ (<y><z/></y> |= <><x><y/></x></>) in <x><y/></x>) {prop; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__ in [z1,,]) {return; }");
tryItOut("with({__noSuchMethod__: (__proto__ = *::*)(this.__defineSetter__(\"(__noSuchMethod__)(window)\", /a/gi), <x><y/></x>.( /x/ ))}){; }");
tryItOut("if(window @  '' ) true; else  if (<><x><y/></x></> ^= true) [1,2,3,4].slice else (true);");
tryItOut("M:if(__noSuchMethod__.*) { if (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map)) *; else {return; }}");
tryItOut("{ }");
tryItOut("/*for..in*/M:for(let prop = <x/> &= this in (([1,2,3,4].map)( \"\" ))) {/*infloop*/while\f(window)yield; }");
tryItOut("with({constructor: <x><y/></x>}){ }");
tryItOut("/*infloop*/do {export *;gc() } while( /x/g );");
