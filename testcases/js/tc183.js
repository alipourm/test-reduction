tryItOut("if(yield window) continue M; else  if (((uneval(yield <x/>))).valueOf(\"number\")) {return\nlet prototype, __parent__; }");
tryItOut("/*for..in*/for(__parent__ in undefined) export prototype;");
tryItOut(" '' \n");
tryItOut("switch(0/0) { default: {} }");
tryItOut("let (__count__ = (new function (__noSuchMethod__, prop)this(__count__).watch(\"prototype\",  /x/g )), [({ __count__: [, , ], prop: __noSuchMethod__ }), ({ __parent__: prototype })]) { __count__ }");
tryItOut("let (prop, __parent__) { yield function(id) { return id } }");
tryItOut("L:if(((<><x><y/></x></>.watch(\"constructor\", (window).watch)) for ((__parent__) in undefined.constructor = constructor) if (undefined))) {return ( '' .__lookupGetter__(\"__parent__\"));; } else ");
tryItOut("yield <><x><y/></x></>;if([z1,,]) { if ([]) {yield; } else }");
tryItOut("/*for..in*/for(__iterator__ = <x/> in (([,])((function::__parent__.__lookupSetter__(\"constructor\")))))*::*");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in __count__ = ([11,12,13,14].filter)) {/*infloop*/for(<x><y/></x>; <x/>; <><x><y/></x></>/*\n*/) {export *; }if((uneval(1.2e3))) { if (* -= <x><y/></x>) throw 3.141592653589793;\t else ({ prototype: prop, prop: constructor })} }");
tryItOut("throw prop;");
tryItOut("M:switch(([prototype, __proto__, __iterator__, __iterator__] = __noSuchMethod__.eval(( '' )))) { case constructor = prototype.\t(<x/>).watch(\"function::prototype\", Function): break; default: break; /*infloop*/L:for(let __parent__; let (prototype = *::*, __proto__) this.__defineGetter__(\"__iterator__\", Math.pow); this.__defineGetter__(\"__parent__\", function(y) { yield y; break ;; yield y; }).unwatch(\"__iterator__\")) {var __noSuchMethod__ = *::*;const __iterator__; }break; case (eval(\"let (prototype) { break ; }\", (({}) > __proto__))): case 1: ; }");
tryItOut("let (__noSuchMethod__ = prototype = new (gc)(false, <\n><x><y/></x></>) >>>=[__parent__].some(<><x><y/></x></>).__defineGetter__(\"__noSuchMethod__\", function (constructor, prototype) { yield #1# } )) { /*for..in*/M:for(prototype = (new ([[[]]].map( set __iterator__ function::__noSuchMethod__ (__proto__) { yield constructor } ))(window)) in new eval(__count__)) /*for..in*/for(let getter = (3/0.__lookupSetter__(\"__noSuchMethod__\")) in *::*) {; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var [, ({ constructor: __parent__, __iterator__: constructor }), ({ __parent__: prototype })] in *::*) {export *;/*infloop*/while([,,])return; }");
tryItOut("/*for..in*/M:for(var [__parent__, __parent__] = ( /* Comment */<><x><y/></x></>) in <x/>) {function(y) { yield y; throw __iterator__;; yield y; } }");
tryItOut("/*infloop*/for(let ({ __proto__: __parent__, __iterator__: __proto__ }) = (__proto__ = <x><y/></x>); constructor & [1,,]; (__proto__ === [,,z1])) {}");
tryItOut("/*for..in*/for(prop in <x><y/></x>) {{} }");
tryItOut("if((- \"\" )) break M; else {(new Function(\"(prop);\")) }");
tryItOut("/*infloop*/M:do {return;; } while(new 'fafafa'.replace(/a/g, [1,2,3,4].map)(String()));");
tryItOut("with(prototype-=true){yield <><x><y/></x></>;function () { return window }  }");
tryItOut("M:if(--(delete  \"\" )) { if ((0.1.__lookupGetter__(\"prototype\") .@ <y><z/></y> || -3/0)) continue ;\f} else {constructor, prop; }");
tryItOut("(");
tryItOut("with({__proto__: 0x99}){; }");
tryItOut("/*for..in*/M:for(let ({function::prototype:  if (<><x><y/></x></>)})[__noSuchMethod__'[]] in ([11,12,13,14].sort)) /*infloop*/for(033; [,]; ({a1:1})) {-0;'haha'.split }");
tryItOut("/*for..in*/L:for(const [__count__, get] = (yield <x/>) in 1e+81) \nconst ({ __proto__: ({ __count__: ({ __iterator__: prototype, __proto__: __count__ }) }), __iterator__: ({ __iterator__: constructor }) }) = prototype.__parent__;");
tryItOut("/*for..in*/L:for([constructor, prototype] = constructor in window) ");
tryItOut("with(<x><y/></x>.__defineGetter__(\"[, , __count__]\", <x/>)){window; }");
tryItOut("let(__count__, prototype = .2) { throw __iterator__;");
tryItOut("if(this.__defineGetter__(\"__parent__\", [1,2,3,4].map)) {} else ;");
tryItOut("{}");
tryItOut("");
tryItOut("/*infloop*/L:for(let prototype = __parent__ = <><x><y/></x></>.watch(\"__noSuchMethod__\", ({}).__lookupGetter__); <><></></>; [z1]) {if(window) yield; else  if (try { return arguments; } catch(__proto__ if  /x/g ) { continue ; } finally { ; } ) export __count__; else {<y><z/></y>;export *; } }");
tryItOut("/*infloop*/L:for(<y><z/></y>; constructor; this) {yield; }");
tryItOut("if((<><{__proto__}><>__iterator__ = <><x><y/></x></></> </{__proto__}></> .@*:: 1e81 ^= [, __noSuchMethod__, __count__].__parent__)) L: { } else /*for..in*/for(const x::__proto__ = <x/> in window) (return  \"\" ;);");
tryItOut("if(get = false) { if (<><x><y/></x></>.unwatch(\"__proto__\")) yield; else {( \"\" ); }}");
tryItOut("constructor = prototype;");
tryItOut("M:with({__parent__: @foo.unwatch(\"__iterator__\")})/*for..in*/for(const __count__ = [11,12,13,14].map in this) {export __noSuchMethod__; const __iterator__; }");
tryItOut("throw undefined;");
tryItOut("yield;\nlet __count__;\n");
tryItOut("with({}) { let(__count__ = ((let (__proto__ = *) ())), __proto__ = window >>= (__count__)) ((function(){try { this.zzz.zzz; } catch(__noSuchMethod__) { with({}) { yield; }  } finally { prototype = prototype; } })()); } ");
tryItOut("L{/*infloop*/M:for(var __proto__ = function ([y]) { }; window; this)  } <bbb xmlns:ccc=\"({ __count__: ({ __noSuchMethod__: __parent__, prop: prop }) }) = constructor\"><ccc:eee></ccc:eee></bbb> ");
tryItOut("return;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in this.zzz.zzz) if(<><x><y/></x></>) {throw true; } else (<y><z/></y>);");
tryItOut("for(let y in []);");
tryItOut("if(new (new Function)()) {{}function(y) { yield y; break M;; yield y; } } else  if ( \"\" ) __noSuchMethod__;");
tryItOut("/*infloop*/do {export __proto__;yield <><x><y/><\f/x></>; } while((prop.prop = <x><y/></x> <= false));");
tryItOut("do /*infloop*/M:while(4.){export *; } while(((0x99 & *::* !== #3={a:#3#} &= *)) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("yield\ngc");
tryItOut("{with({prototype: ((p={}, (p.z = <><x><y/></x></>)())) % *::*}) /x/g ; }");
tryItOut("while(((({__count__: ({ constructor: __count__, __parent__: function::__parent__ }) = new ([1,2,3,4].slice)(__noSuchMethod__, function::__count__, <><x><y/></x></>) }))) && 0)/*for..in*/L:for(const (this.__defineGetter__(\"__noSuchMethod__\", (1 for (x in [])))) = constructor.__parent__ = __noSuchMethod__ = this in <y><z/></y>.yoyo(undefined)) {/*infloop*/L:do yield; while( /x/g ); }");
tryItOut("switch(export __iterator__; = <><x><y/></x></>) { case [eval(\";\", (window//h\n if ( '' )))\r].sort(true >= <x/>): break; case 7: \tif(eval(\"null\",  \"\" )) { if () yield;} else {;return; } }");
tryItOut("L:do gc() while((window) && 0);");
tryItOut("if(__count__|=<x/>) L: throw <x/>;");
tryItOut("if(constructor) {continue ; } else  if (([window |= *].sort((1 for (x in []))))) {; } else {return; }");
tryItOut("/*infloop*/M:for(const __parent__.__proto__; ([(__parent__.__count__ setter= ))].filter(Math.pow));  \"\" ) {\n__noSuchMethod__ = <y><z/></y>;export __parent__; }");
tryItOut("gc()\n__noSuchMethod__, __iterator__;\n");
tryItOut("var constructor =  '' , __parent__ = undefined;");
tryItOut(";");
tryItOut("with({__parent__: [*::*].map(constructor)})return;");
tryItOut("if(this.zzz.zzz) { if (*) /*infloop*/for(<><x><y/></x></>; {}; window) return 1e81; else (__parent__|=null)}");
tryItOut("/*for..in*/for(const __count__ in x::__proto__.prototype = <><x><y/></x></>) {L:if((-<x/>)) return; else throw <y><z/></y>; }");
tryItOut("/*infloop*/L:do {if(*::*) export *; } while(((this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)\t)((<x><y/></x>[*::*]((yield  /x/ ), window)))));");
tryItOut("/*infloop*/L:while(#1#)throw this;");
tryItOut("/*infloop*/L:for(const __iterator__; try { {} } catch(prop if (function(){prototype = *::*;})()) { return; } catch(constructor if true) { throw {}; } catch(__noSuchMethod__, __parent__) { {} } finally { prop; } ; constructor & <x><y/></x>) export *;");
tryItOut("with([,,z1])constructor, __count__ = @foo;");
tryItOut("while((-window) && 0)continue M;\n{const function::__count__, constructor = true;if(<x/>) { } else  if ((-1)) {let __proto__ = prototype, constructor = prototype;let __noSuchMethod__ =  \"\" , constructor; } else ({a2:z2}); }\n");
tryItOut("export __noSuchMethod__;");
tryItOut(";\nreturn;\n\nyield;\n");
tryItOut("const __noSuchMethod__ = window, __parent__\n");
tryItOut("M:if(({ get constructor(__proto__, __count__) \"\"  })) { if ((false.__parent__)) (<x/>).__defineSetter__ else //h\ntry { throw StopIteration; } catch(__parent__ if (function(){prop = __proto__;})()) { throw StopIteration; } catch(__noSuchMethod__ if this.__defineGetter__(\"prop\", <x><y/></x>)) { for(let y in [5,6,7,8]) throw __proto__; } \fcatch(prop) { return __count__ < <x/>.eval(delete arguments); } finally { __parent__ = prototype; } }");
tryItOut("M:if([<x><y/></x>.( /x/ ) for ((__parent__) in prototype) for (__iterator__ in __noSuchMethod__)]) {function  __proto__ () { return prop }  } else  if ( \"\" ) {const prototype = 1e-81;return; }");
tryItOut("if(<xxx {__iterator__}={(([[[1]]].some(function (prop) { yield <y><z/></y> } )).__parent__/*\n*/)} />) /*for..in*/M:for(let ( /x/g )(<x><y/></x>) in <><x><y/></x></>) yield window;\f else do yield null; while(( !== window) && 0);");
tryItOut("if(__noSuchMethod__.unwatch(\"__parent__\").prototype =  ''  | <><x><y/></x></>) {export __iterator__;/*for..in*/L:for(let prototype = [[1]] in <x><y/></x>) {export *;throw <x><y/></\nx>; } } else  if (__parent__.prototype) {with(1e4)return undefined\t; }");
tryItOut("throw __proto__;");
tryItOut("/*for..in*/for(const  ['constructor'] in ((__iterator__)(.__noSuchMethod__ = __iterator__)))continue L;");
tryItOut("{return\nreturn 1.3;export __iterator__; }");
tryItOut("L: {let constructor, __proto__ = *::*; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x><y/></x>) yield prototype;");
tryItOut("/*for..in*/L:for(prop in ((eval)()))M:if( /x/g ) {;prototype, __proto__ =  /x/g ; }");
tryItOut("switch((__proto__-= '' ).__defineGetter__(\"function::__proto__\", ({}).__lookupGetter__)) { case (): break; case (gc).call(*, (function (__iterator__)[1]).call(*::*, <><x><y/></x></>), this): <><x><y/></x></> }");
tryItOut("continue M\nif(<><x><y/></x></>) {let constructor; } else const constructor =  /x/ ;");
tryItOut("yield __proto__ = true;");
tryItOut("gc()\nthrow  { yield __parent__ } ;\n const __count__;L:if((* ,  /x/g )) { if (__parent__.__count__ = <y><z/></y>) {throw <>\t<x><y/></x></>;try { let __proto__; } catch(__proto__ if (function(){prop})()) { continue L; } catch(constructor if <x/>) { export *; } catch(constructor) { ( '' ); } finally { var __proto__ =  /x/g , __proto__ =  /x/ ; }  } else __noSuchMethod__}");
tryItOut("__proto__;");
tryItOut("if(<x/>) yield  /x/g ; else  if ('fafafa'.replace(/a/g, function(q) { return q; }) >> constructor = __proto__) {constructor;constructor = 1e+81; }");
tryItOut("(<x><y/></x>);let __proto__ = prop, __count__;");
tryItOut("let (__parent__) { /*infloop*/for(const __count__; <><><y><z/></y></></>; \n(uneval(0/0))) {yield; } }");
tryItOut("/*infloop*/for(((yield ).__defineSetter__(\"prop\", Math.sin)); eval(\"return;\", <><x><y/></x></>); <x/> % __proto__.__count__ = [1,2,3,4].slice.prop = \n<><x><y/></x></> if (*::*)) throw eval(\"window\", __noSuchMethod__)\n/*for..in*/for(let __noSuchMethod__ = (delete (\n__proto__ = *::*)).__lookupSetter__(\"__proto__\") in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {/*infloop*/for(var ({ __iterator__: ({ prototype: __count__, constructor: __proto__ }), function::prototype: __parent__ }) = #1#().*; (<y><z/></y>.watch(\"prototype\", function (__parent__, [1,,]) { yield null } )); true.*) yield <x><y/>\t</x>;\nreturn null;\n__iterator__ = <x/>; }");
tryItOut("export __noSuchMethod__;");
tryItOut("/*for..in*/for((__noSuchMethod__)(<x><y/></x>) in prototype) constructor, __proto__");
tryItOut("/*for..in*/L:for(prop in ((Math.sin)((window instanceof true))))yield;");
tryItOut("yield");
tryItOut("with(__iterator__ = window)const getter, __count__;");
tryItOut("/*infloop*/for(let {({}).__lookupGetter__ } = *; 4.; true) {return *;var prop; }");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("yield ([15,16,17,18].sort(function (__proto__, __count__)true, (/a/gi)()));");
tryItOut("M:if(RangeError(void <><x><y/></x></>)) { if ((({ constructor: ({ prototype: constructor, __count__: ({ __proto__: prop }) }) }) = ([15,16,17,18].some(function  __parent__ (prototype) { yield <x><y/></x> } , [1,,] % [,,z1])))) const prototype, __count__ = @foo; else {/*infloop*/for(let __proto__;  '' .__defineSetter__(\"__iterator__\", eval); __proto__ = window) {gc()constructor, constructor = 0.1; }return -1; }}");
tryItOut("if((eval(\"yield false;\", <x><y/></x>))) { if (( ''  &= <><x><y/></x></>)) {return;yield window; }} else {return;yield 1.3; }");
tryItOut("with({__iterator__: <x/>}){window;; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in  /* Comment */(prototype.constructor getter= function (prototype, constructor) { yield this } ).yoyo(*::* ? @foo : 0x99)) let ([({ prop: prop, constructor: ({ prototype: __noSuchMethod__, prototype: __parent__ }) }), ({ __parent__: [__parent__, __count__], prop: __iterator__ }), ({ prototype: __parent__, __iterator__: ({ prop: __iterator__ }) })]) { if( /x/g ) let (prop) { __parent__ } }");
tryItOut("__parent__;");
tryItOut("if(prototype = [1]) false; else  if (prototype) (<x/>); else export *;");
tryItOut("/*infloop*/M:while(__proto__ = 0.1)yield\n");
tryItOut("let (({ prop: prototype }) = (-0) || *) { (window); }");
tryItOut("switch((-0--)) { case (__count__ setter: Math.pow): constructor = <><x><y/></x></>; const 033;case (new RangeError()):  }");
tryItOut("export constructor;");
tryItOut("let(__proto__ = <x/>) { this.zzz.zzz;");
tryItOut("/*infloop*/do L: { } while((__iterator__.((__proto__((function ([y]) { })()) = ([<><x><y/></x></> for (constructor in  '' )]))(*.__lookupSetter__(\"set\")))));");
tryItOut("with(+__parent__.__proto__ = [1]){if(<y><z/></y>) { if (*::*) throw function(id) { return id }; else {export *; }}__parent__ = <x><y/></x>; }");
tryItOut("gc()");
tryItOut("/*for..in*/for(var __iterator__ in 1e-81) const __count__ =  /x/g , constructor;");
tryItOut("do case 2: /*for..in*/L:for(function::prop in (([,,z1])(__proto__))){ /x/ ; }break; break; case 2: break; default: var __proto__ = constructor, __iterator__ = 1e-81;case __noSuchMethod__: case 3: let __parent__, __noSuchMethod__;break;  while(((-1).__lookupGetter__(\"__iterator__\")) && 0);");
tryItOut("throw constructor;");
tryItOut("/*infloop*/L:for(let __parent__; <x/>; [15,16,17,18].sort(\n__iterator__, (({__count__: <><x><y/></x></>, __noSuchMethod__:  /x/g  })))) {return; }");
tryItOut("/*infloop*/for(constructor; new ([[[1]]])((1 for (x in []))());  /x/  / null) throw  /x/g ;");
tryItOut("try { (this | null); } finally { with({}) with({}) yield undefined; } ");
tryItOut("/*for..in*/for(var constructor in (([1,2,3,4].map)([,,z1]))){/a/gi }");
tryItOut("/*infloop*/do return; while(-0);");
tryItOut("/*infloop*/L:do {gc() } while((\f<y><z/></y> -= false.@foo));");
tryItOut("{ /x/g ; }");
tryItOut("while((new (#2=({__count__:  \"\" }))(<y><z/></y>\n, @foo)((false == [z1,,]) ? [false].some((1 for (x in []))) : (undefined)[__iterator__])) && 0){};");
tryItOut("/*infloop*/M:for((this.prototype); __parent__ = [[1]]; <{__count__}>yyy</{__count__}>.prop = (('fafafa'.replace(/a/g, 'haha'.split)).throw(({constructor: false })))) export *;");
tryItOut("yield undefined;");
tryItOut("with({constructor: 0/0})yield <x><y/></x>");
tryItOut("with(prototype = new Iterator(true)){ /x/g throw __proto__; }");
tryItOut("{while(((({__count__:  /x/g }))) && 0){let (prop = null, prototype = <y><z/></y>) { (<y><z/></y>); }let constructor, __count__;{} } }");
tryItOut("M:if((__count__ = new Math.sin(1e+81.__defineGetter__(\"__noSuchMethod__\", function  prototype (__parent__) { yield; } )))) { if ((this for (__noSuchMethod__ in window))) {let __parent__ = <x/>;let __noSuchMethod__ = *::*, __iterator__ = ; const __noSuchMethod__; } else return;}");
tryItOut("L: return;");
tryItOut("if((__count__ = [,,z1]).constructor) { if ((1 for (x in []))) {M:with(<><x><y/></x></> .@x:: __noSuchMethod__.({ prototype: prototype }))export *; }} else /*for..in*/for(let prototype((__iterator__+=constructor)) in [__proto__] = undefined.throw(<><x><\fy/></x></>)) var prop = prototype;");
tryItOut("/*for..in*/for(const __parent__.__count__ in (([1,2,3,4].map)(#2=({__proto__: constructor})))){return 3.141592653589793; }");
tryItOut("return;");
tryItOut("/*infloop*/for( /x/  |= <x/>; (this.__defineSetter__(\"constructor\", 5.0000000000000000000000)); (<><{constructor}> </{constructor}></> != *)) throw *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in (3.141592653589793)(<x><y/></x>, <><x><y/></x></>)) ;");
tryItOut("do {M:with(<x/>){let __count__ = <y><z/></y>, __noSuchMethod__;<y><z/></y> } } while((<><x><y/></x></>[1e+81]--) && 0);");
tryItOut("/*infloop*/do  while([[]].__lookupGetter__(\"prop\").__lookupSetter__(\"constructor\"));");
tryItOut("");
tryItOut("/*infloop*/while((uneval(eval(\"true\", null))))L: {return <y><z/></y>; }");
tryItOut("if( \"\" ) { if (--( \"\"  + @foo) / <x><y/></x>.(<x/>)()) {/*infloop*/L:for(var constructor; (yield *::*); prototype%=({a2:z2})) {yield;(null); } } else {switch((new (\t<x/> ?  /x/  : 1e81)((<x><y/></x> <<= <x><y/></x>), window))) { default: let __count__;case (eval(\"__count__\\n\", __proto__ =  \"\" )): return;case 5: export *; }yield true; }}");
tryItOut("while(((__noSuchMethod__ & new (null)() ? ~*::* : ([11,12,13,14].sort))) && 0)/*for..in*/for(let [prop, __noSuchMethod__] = (eval(\"<x><y/></x>\", window)++) in [[1]]) return;\n(<x/>);\n");
tryItOut("/*infloop*/M:for(__iterator__ = <><x><y/></x></>; Exception(); <x/>.__lookupSetter__(\"__iterator__\")) return;");
tryItOut("while((__parent__) && 0)return (new (function(y) { yield y; export *;; yield y; })(RegExp()));");
tryItOut("return;");
tryItOut("/*infloop*/for(const constructor; new (Function(<x/>.__lookupGetter__(\"__count__\"))); (--[z1].unwatch(\"__noSuchMethod__\") && yield 0.1)) export *;\nMath.sin\n");
tryItOut("/*infloop*/L:for((yield (p={}, (p.z = true)())); @foo; ([(function(q) { return q; })(@foo, <y><z/></y>)]).throw((function ([y]) { })()\n)) {(yield __noSuchMethod__); }");
tryItOut("{return; }");
tryItOut("M:while((/*infloop*/M:for(1.2e3; <y><z/></y>; null) {var __proto__; }.__lookupSetter__(\"__iterator__\")) && 0)export prototype;");
tryItOut("with({}) { let(__count__) { ; } ");
tryItOut("export __noSuchMethod__; const prototype;");
tryItOut("for(let y in [5,6,7,8]) ");
tryItOut("export *;");
tryItOut("throw <y><z/></y>;");
tryItOut("return yield ( \"\" .throw(this));\nfunction(q) { return q; }\nbreak M;\n");
tryItOut("/*infloop*/for(let constructor = window; __proto__; this) {return (-1); }");
tryItOut("/*infloop*/M:for(var __iterator__ = new RangeError(constructor, (function ([y]) { })()); (yield 5.0000000000000000000000); false.__noSuchMethod__) {return; }");
tryItOut("L:if((__count__ = eval(\"M:if(<x><y/></x>) { if (prop) gc() else {export prop;export __iterator__; }}\", ( /* Comment */<x><y/></x>.__parent__ = [[]])))) { if ( /x/ ) if((({ set __count__()this, constructor: <x><y/></x> }))) {gc() } else  if (let (__iterator__ = <><x><y/></x></>, constructor) <x/>) {export __noSuchMethod__; } else var __iterator__, __iterator__ = this; else {function::__proto__ = __noSuchMethod__;/*infloop*/for(<x><y/></x> > <x><y/></x>; (@foo %= ({})); prototype = __noSuchMethod__) {export constructor; } }}");
tryItOut("L:if(<y><z/></y>.prop) throw (constructor = <y><z/></y>); else  if (( /x/g .unwatch(\"__noSuchMethod__\"))) export *;");
tryItOut("/*infloop*/for([<x><y/><\f/x>] %= <x><y/></x>.unwatch(\"__iterator__\"); [( /x/g ++)].map((({}).__lookupGetter__).call); (window)((__proto__.__lookupSetter__(\"function::__iterator__\")))) with({prototype: +<x><y/></x>})const prototype, __proto__ = <x><y/></x>;");
tryItOut("switch(<x/>) { case undefined: export __count__; }\nreturn true;");
tryItOut("throw prototype;");
tryItOut("if((<y><z/></y>)(<><x><y/></x></> << false) *= __iterator__%=undefined) with({prop: yield  /x/g  ? continue ; ^= <x><y/></x> : this}){} else  if ((__proto__ = ({ __iterator__: prop }))) /*infloop*/do {yield;throw [[1]]; } while((1e81 ? 3/0 : window));");
tryItOut("/*infloop*/(/*()this.__defineGetter__(\"prototype\", 'haha'.split); (1e4 < <x/>)[__count__ === @foo]; <><><x><y/></x></></>.(*::* >>=  /x/ )) prop{yield *;export prop; }");
tryItOut("/*infloop*/L:do {L: {export __proto__;return false; }(window); } while(constructor = true);");
tryItOut("{gc()\n }");
tryItOut("while((this) && 0)export *;");
tryItOut("\tif(1.3) yield; else  if ( '' ) function::prototype, constructor = prototype;");
tryItOut("return  /x/g ;\nexport prop;\n");
tryItOut("var __noSuchMethod__;");
tryItOut("*::*;yield __noSuchMethod__;");
tryItOut("/*infloop*/do {let __iterator__, __iterator__ = 1e4; } while(((__iterator__ = <><x><y/></x></>) & (<y><z/></y>.__count__)));");
tryItOut("if(<><x><y/></x></> ^ *) { if ((<x/>.propertyIsEnumerable(\"prototype\"))) yield; else {export __proto__; }}");
tryItOut("return; const prop;\nfor(let y in []);\n");
tryItOut("let(prototype = (<x><y/></x>.(<><x><y/></x></>)), prop) { with({}) with({}) { return \n<><x><y/></x></>; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in (new Function())) {if(new ((new ((typeof <x><y/></x>) &= \n-1)(<y><z/></y>)\f))(eval(eval([z1,,])))) { if ((yield constructor: <><x><y/></x></> = 3/0.@foo)) {} else yield;}(Math.pow).apply }");
tryItOut("<x><y/></x>;\n(window);\n");
tryItOut("do return; while(([[]]) && 0);");
tryItOut("if([]) return;");
tryItOut("/*for..in*/for(var ({__iterator__:  ''  }) in ((function  __proto__ () { M:if((__count__.unwatch(\"__count__\"))) {(<><x><y/></x></>); } } )((new RangeError(-0))))){/*for..in*/for(function::__noSuchMethod__ in <y><z/></y>) {gc()const prop, __noSuchMethod__; }\n }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(<><x><y/></x></>.__count__)gc()");
tryItOut("if(new undefined(({}))) export *; else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) const __count__ = prop;");
tryItOut("with({__iterator__: [] = __parent__})/*infloop*/for(prop; arguments; <x><y/></x>) \t{let __count__, __noSuchMethod__;{} }");
tryItOut("{switch(@foo) { case this: var __noSuchMethod__; } };");
tryItOut("{*::* %= 1e4.__defineGetter__(\"prop\", (new Function(\"([[1]]);\")));/*for..in*/for(const __iterator__ = [,,] in <x><y/></x>.propertyIsEnumerable(\"prototype\")) break ; const prototype; }");
tryItOut("for(let y in []);");
tryItOut("let (__count__ = prop = window <<= __iterator__, __proto__) { if(__iterator__) [1,2,3,4].map else  if (<x/>) __parent__, prop; else return <x><y/></x>; }");
tryItOut("/*infloop*/M:for(var __parent__; prototype = (yield 0); <x><y/></x>\f.hasOwnProperty(\"prototype\")) {if(#3={a:#3#}) {return <x><y/></x>;yield function ([y]) { }; } else prop;return -1; }");
tryItOut("/*for..in*/M:for(var [__parent__, __noSuchMethod__] = <y><z/></y> in  /x/ ) {{let prop = @foo, let;const __count__; }((<x><y/></x> ? @foo : 0.1))(<x><y/></x>) }\n");
tryItOut("/*infloop*/for(var __noSuchMethod__; (prop = (eval(\"(Boolean([]))\",  /* Comment */1.3))); ({__iterator__:  /x/g  })) {yield ({__count__: <><x><y/></x></>}); }");
tryItOut("return 1e4;/*infloop*/M:do {return @foo;gc() } while(3.prop for (constructor.__noSuchMethod__ in *) if (*::*));");
tryItOut("if( ''  &= function ([y]) { }.*) \n({ __parent__: __parent__ })\n else  if (<><x><y/></x></>.__lookupGetter__(\"__noSuchMethod__\")) {export *; } else {export *; } const __iterator__;");
tryItOut("{return  \"\" ;(*); }");
tryItOut("/*for..in*/for(let __iterator__ in (((new Function(\"if((( /x/g )).valueOf(\\\"number\\\")) { if ((__count__)) //h\\n( \\\"\\\" );export __count__; else if( /x/g ) {return @foo;yield; } else  if ( '' ) {let __noSuchMethod__, __proto__; } else {;export __noSuchMethod__; }}\")))(@foo))){{{} } }");
tryItOut("return;");
tryItOut("return <><x><y/></x></>;");
tryItOut("return  /x/  :: <y><z/></y>;");
tryItOut("for(let y in []);");
tryItOut("{M:do var __noSuchMethod__, __count__ = <x/>; while((null) && 0) }");
tryItOut("/*infloop*/for(let ({ __parent__: ({ __parent__: constructor, __proto__: prop }), __proto__: ({ prop: constructor }) }) = <x/>.eval(this); ([15,16,17,18].some(({}).__lookupGetter__, <x/>)); new (<x><y/></x>)( /* Comment */ '' )) {return 033;export __noSuchMethod__; }");
tryItOut("__count__ = window\n/*infloop*/for(const constructor; function::constructor = __proto__; (<x><y/></x> << window)) {let __noSuchMethod__; }\nexport *;");
