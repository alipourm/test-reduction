tryItOut("for(let y in [5,6,7,8]) constructor;");
tryItOut("if(*.__lookupGetter__(\"__proto__\")) {break ; } else  if ((__parent__ = prop.throw(<><x><y/></x></>))) {(1 for (x in [])) } else .2; const __iterator__;");
tryItOut("L: {0.1;/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in <x/>) {try { yield constructor; } finally { export __count__; }  } }");
tryItOut("/*infloop*/M:for(eval(\"undefined\", function(id) { return id }); ([<y><z/></y> if (__proto__)]); __parent__.__count__) /*infloop*/L:for(; __proto__.__proto__ setter= [1,2,3,4].map; #3={a:#3#}.__defineSetter__(\"__noSuchMethod__\", (([1,2,3,4].map).call).apply).__defineGetter__(\"prototype\", [1,2,3,4].slice)) export *");
tryItOut("M:if(#1#.__lookupSetter__(\"__count__\")) (function  prototype (prototype) { yield  \"\"  } ).call else  if ([prototype = (-0).propertyIsEnumerable(\"prototype\") for (__noSuchMethod__ in  /x/g ) for ((<><x><y/></x></>)([[1]]) in \n5.0000000000000000000000) for each (prop in __proto__)]) {gc; }");
tryItOut("let([prop, __iterator__, __noSuchMethod__, __count__] = function  __iterator__ ()window, function::constructor = [,,]) { for(let y in []);");
tryItOut("while((prototype =  /x/g ) && 0){throw  '' ; }");
tryItOut("return;");
tryItOut("switch(__noSuchMethod__.constructor = 'fafafa'.replace(/a/g, gc)) { case <x\f><y/></x> /= <y><z/></y>.__noSuchMethod__ = this\n: continue L; }while((new (*::*)()) && 0)let __iterator__, __proto__\n");
tryItOut("L: {switch( ^= yield (<><x><y/></x></>.throw(<x\f><y/></x>)).*) { default: break;  } }");
tryItOut("try { ; } catch(__proto__ if (function(){return;})()) {  } finally { [1,2,3,4].map } ");
tryItOut("M:if(<x><y/></x>.(window) %= <x><y/></x>.yoyo(<x><y/></x>)) gc() else {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <><x><y/></x></>) {function(y) { yield y; gc(); yield y; }export *; }\n");
tryItOut("if(<bbb xmlns=\"<x/>\"><><bbb xmlns=\"<y><z/></y>.eval(<x><y/></x>)\"><!--yy--></bbb><ccc:ddd><!--yy--></ccc:ddd></>yyy</bbb>) { if (prototype) {M:if([,,]) var __iterator__ = <><x><y/></x></>, __proto__; else  if (<><x><y/></x></>) {throw  '' ;return; } else yield {}; } else {{/*for..in*/for(let __noSuchMethod__ = @foo in <y><z/></y>) {export *;get = <><x><y/></x></>; }/*infloop*/do yield; while(<><x><y/></x></>); } }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__ in .2) /*for..in*/for([__proto__, __iterator__] =  /x/  in <x/>) {const __noSuchMethod__, constructor = <y><z/></y>; }\n/*for..in*/L:for(var __noSuchMethod__((__parent__ >= <x><y/></x>)) in (\t((new 0.1(1.3,  '' )).watch)([1,2,3,4].map(<y><z/></y>)))){[,,z1];export *; }");
tryItOut("if((eval(\"[ '' ]\", __count__ = *))) { if (<y><z/></y>) /*for..in*/M:for(let [constructor, __count__] = \n<x>/*\n*/<y/></x> in this) {(@foo);gc() } else ({ get: __noSuchMethod__, constructor: prototype })}");
tryItOut("yield (constructor = __iterator__.isPrototypeOf(arguments.__noSuchMethod__).prototype)");
tryItOut("try { (.2); } finally { yield; } ");
tryItOut("/*for..in*/\tfor(var __parent__ in ((new Function)(constructor .@*:: 1e-81 instanceof @foo))){export *; }");
tryItOut("M:if((new ((new Function(\"export *;\"))).apply(((([15,16,17,18].sort(arguments, <x/>)))()), __parent__.(@foo\t)))) { if (undefined.unwatch(\"prototype\")) let __iterator__, __iterator__ = 1e-81;} else {<x><y/></x>;let __proto__; }");
tryItOut("/*for..in*/for(let constructor.__count__ in ((eval(\"throw true;\", *::*))(new new Function(this))))Math.pow");
tryItOut("/*for..in*/for(let __proto__ = <x><y\n/></x>.watch(\"prototype\", function (__proto__) { yield  ''  } ) in __proto__) {}");
tryItOut("/*for..in*/for(var __parent__ in ((eval)( /x/ )))export __iterator__;");
tryItOut("/*for..in*/for(var [yield, __iterator__] =  ''  in <y><z/></y>) {{}break ; }");
tryItOut("let(__count__ =  \"\"  @ this, constructor) ((function(){return ;})());");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = this in  /x/ ) {export prop; }");
tryItOut("");
tryItOut("do {} while((((<><x><y/></x></> ? <><x><y/></x></> :  /x/ ))[[1.3 ? <y><z/></y> : <x/>].some(Function)]) && 0);");
tryItOut("(L:if(<><x><y/></x></>) export __noSuchMethod__; else  if (<x><y/></\nx>) {(new Function(\"__count__;\")) } else {export *; } default: const __iterator__ = <><x><y/></x></>;break; __proto__ = <><x><y/></x></>; const constructor;\fbreak; case (constructor = prop): break; case 1: break; case 9:  \n)let(prop = <x/>, constructor) { new Function");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const 0.1.__proto__ in new [1,2,3,4].map(*, .2)) L:if(<y><z/></y>) {prop;; }yield {};");
tryItOut("throw StopIteration;");
tryItOut("if(constructor = true) {; }");
tryItOut("/*infloop*/for(({ {}: ({ constructor: __count__, x::__parent__: __count__ }) }) = this; false; (( /x/ .propertyIsEnumerable(\"prop\")).isPrototypeOf(yield))) gc()\n__parent__;");
tryItOut("L: \f{return; }");
tryItOut("{/a/gi((__parent__ for (__count__ in <x><y/></x>)).@foo); }");
tryItOut(";");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in ({constructor: constructor = __count__})) do (null :: [[]]).watch while((window.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)) && 0);");
tryItOut("/*for..in*/for(const __parent__ = 1.3 in function ([y]) { }) export constructor;");
tryItOut("gc()");
tryItOut("{;gc() }");
tryItOut("/*infloop*/for(({ constructor: prop, __proto__: constructor }) = (prototype = [1]); __proto__ = __iterator__; (__parent__.__noSuchMethod__)) throw <y><z/></y>;");
tryItOut("if(({ set __iterator__() { /*infloop*/M:while(Function())gc() }  })) { if ((__count__ =  \"\"  .. <>[,,]</>)) {return <><x><y/></x></>;export *; }} else yield <x/>;");
tryItOut("let (function::__noSuchMethod__) { return; }__iterator__ = prop;");
tryItOut("yield var __iterator__ = this.eval((String()));");
tryItOut("for(let y in [5,6,7,8]) prop = @foo, __noSuchMethod__;");
tryItOut("/*for..in*/for([get, __count__] = prototype = \f__parent__ = window in  \"\" ) /*infloop*/while(window){undefined }");
tryItOut("if(1.3()) {yield window;let (({ __iterator__: __proto__ }) = (#2=[ /x/g .unwatch(\"__parent__\")])) { var prototype; } }");
tryItOut("throw StopIteration;");
tryItOut("{__count__, __iterator__ = <x><y/></x>; }");
tryItOut("return (__noSuchMethod__ = prop);");
tryItOut("let(x::__parent__, __proto__) ((function(){__parent__ = prop;})());");
tryItOut("/*for..in*/for(__iterator__ in ((Math.sin)('fafafa'.replace(/a/g, (1 for (x in []))))))if(((yield (-1) / 4.))) { if (prop =  /x/g ) (3/0);} else {throw true;export __parent__; }");
tryItOut("with(this * <><x><y/></x></>){ }");
tryItOut("L: {/*infloop*/while(prototype, <y><z/></y>){({}).__lookupGetter__; } }");
tryItOut("while(((uneval(window)) ? 1.3[<><x><y/></x></>] : this.__defineGetter__(\"prototype\", ({}).hasOwnProperty)) && 0){break ; }");
tryItOut("/*infloop*/while(( \"\" )(window.constructor, yield <><x><y/></x></>))export *\n");
tryItOut("/*infloop*/M:for(let ({ prototype, __count__: __iterator__ }) = (@foo.unwatch(\"prototype\")); false; 0.1 || <><x><y/></x></>) {(<x><y/></x>); }");
tryItOut("return;");
tryItOut("let(__count__, prop = [11,12,13,14].filter) { __noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/do do  while((<><x><y/></x>/*\n*/</> >>>=4.) && 0); while(__proto__.prototype =  /x/  instanceof  '' );");
tryItOut("this.zzz.zzz;");
tryItOut("{switch( \"\" ) { default: break; case 8: break; return;yield  \"\" ;break; case 0: const constructor, __parent__ = *;break; ( \"\" ).watchcase 8: case  /x/g : break; case <><x><y/></x></>: break; case -0: break; case __count__: break; case <><x><y/></x></>: yield;case 0: ;break; case null: return;break; return;break; case <><x><y/></x></>: __parent__break; case <x/>: break; case 8: export *;break; case 4: break; case <><x><y/></x></>: break; break; case 5: break;  }if( /x/ ) __parent__ = false; else  if (undefined) {__proto__continue ; } else  }");
tryItOut("/*for..in*/for(let default: break; case 2: break; break; switch(typeof ('haha'.split).call(__parent__, )) { case ([11,12,13,14].some.*): break; case 7: (yield <><x><y/></x></>);case ('haha'.split).call((this.__defineSetter__(\"__parent__\", Function)), [1]) > window &= ({ constructor: [, constructor, __parent__, ({ constructor: __count__ })], __noSuchMethod__: ({ __iterator__: ({ prototype: __noSuchMethod__ }) }) }).hasOwnProperty(\"prototype\"): if(this) { if ( !== * % <><x><y/></x></>) -1;} else {this;<x><y/></x>; }var __iterator__ = <x><y/></x>, __count__;break; [] = (prop+= /x/g )eval\nreturn;break; default: case 1: return;break; case (({__parent__: this, prototype setter: function (__noSuchMethod__) { return window }  })): break; case 1: throw  /x/ ; }break; case 7: var prototype = ({a2:z2});case new (__count__ = new (function  prop (__iterator__, constructor) { return 5.0000000000000000000000 } )(this, window))(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(__proto__ = *)): __noSuchMethod__ = <y><z/></y>;break; if(window) {{} } else <x/>,  \"\" ;let constructor;case 5: /*infloop*/while([z1,,]){constructor =  /x/ ; }break;  in (<y><z/></y>.propertyIsEnumerable(\"__iterator__\"))) {{with(this.__defineGetter__(\"__noSuchMethod__\", 'haha'.split))return #1=[#1#]; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.__proto__ in (window)) if(true) {gc() } else  if (*) {export __proto__;continue L; }");
tryItOut("M:while((<x/>.__lookupGetter__(\"prop\")) && 0){gc()do export __count__;\t while((null) && 0)\n }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = <><x><y/></x></>; 1e-81; <><x><y/></x></>) export __proto__;");
tryItOut("/*infloop*/while((({ set prop constructor (__noSuchMethod__, function::__proto__) { yield undefined } , __count__: true })) >>> false)with({constructor: <>gc((__iterator__ = *::*))</>})/*for..in*/for(const [prototype, __noSuchMethod__] = <><x><y/></x></> in <><x><y/></x></>) (<x/>);");
tryItOut("do {let function::__parent__, __proto__ = <x><y/></x>\n;/*infloop*/for(prototype; window; (({__count__: prop})) , 1e4.constructor /= <y><z/></y>\n) /*for..in*/for(const __noSuchMethod__ = @foo in constructor) {prop{} } } while((<x><y/></x>.valueOf(\"number\")) && 0);");
tryItOut("L: let __count__;");
tryItOut("with({}) { return; } ");
tryItOut("return 'fafafa'.replace(/a/g, ((p={}, (p.z = typeof __iterator__)())).watch);");
tryItOut("/*infloop*/do {with(<><x><y/></x></>){return  /x/g ; }return; } while(__noSuchMethod__ = new  '' ([,,z1], [z1,,]));");
tryItOut("let __parent__ = <y><z/></y>, __parent__ = <x><y/></x>;");
tryItOut("let (__proto__) { (<x><y/></x>); }");
tryItOut("yield @foo\ngc()");
tryItOut("{const __parent__ = <y><z/></y>, prototype = *::*;export prop; }");
tryItOut("return .2;");
tryItOut("yield __parent__;");
tryItOut("throw StopIteration;");
tryItOut("let(({ __proto__: prop, __parent__: prop }) = (constructor).call(this, 0, <x><y/></x>)([11,12,13,14].sort)\n, __parent__ = __iterator__ = *::*) ((function(){return (#3={a:#3#})(@foo);})());");
tryItOut("{switch([,,]) { default: yield;case 4: break L;break; case (*::* | *): break;  } }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("M:if(*.__lookupGetter__(\"__count__\")) { if ((Math.sin)()) {} else export prop;}\nL: {if(prototype) { if (*) ; else {return;gc() }} }\n");
tryItOut("if(__proto__|=({ set constructor(__proto__, __parent__)<><x><y/></x></> })) let __noSuchMethod__; else  if ((<><x><y/></x></>)[ \"\" ] >= <x><y/></x> +=  /x/g ) {/*for..in*/for(var __count__ in (([1,2,3,4].slice)(<x/>)))throw this; }");
tryItOut("with({__parent__: /a/gi(__proto__, 0.1)\f})__parent__");
tryItOut("/*for..in*/for([__parent__, __proto__] = false in [,]) {export prototype; }");
tryItOut("do switch(prototype = false) { default: return;[1,2,3,4].slicecase constructor.__proto__: case 3: break;  } while((([[1]] === eval(\"constructor = this;\", -3/0.prototype))) && 0);");
tryItOut("/*infloop*/for(prop = [z1]; ((p={}, (p.z = <><x><y/></x></>)())); (({ get (( \"\" )(constructor, 033).isPrototypeOf((yield @foo))) prop (prototype) { yield 'fafafa'.replace(/a/g,  /x/g ) } , __count__: constructor = <x><y/></x> }))) {(gc).apply }");
tryItOut("if(__noSuchMethod__ = [,].constructor) { if (let (__count__ = *::*, __proto__) *) {/*for..in*/for(let prop = (__parent__.eval(<y><z/></y>)) in <x><y/></x>)  } else {L:switch([,,z1]) { default:  } }}");
tryItOut("let __iterator__ = 3;const  if ( /x/ );");
tryItOut("L:if(<x><y/></x>.watch(\"__iterator__\", Math.sin)) { if ([ '' ].map((gc).apply)) {(<x/>); }} else export __iterator__;");
tryItOut("1e+81;");
tryItOut("while((* @ *::*) && 0)__proto__ = prop, __count__ = true; const constructor;");
tryItOut("switch(()) { default: case 4: break;  }");
tryItOut("if(new (/a/gi)((eval).call(<x/>.__count__, ))) /*for..in*/L:for(const __proto__ in ((function (__parent__, __count__) { yield <y><z/></y>.yoyo([z1,,]) } )([15,16,17,18].map((1 for (x in [])), let) in false))){yield -1;; }");
tryItOut("/*infloop*/L:for(__parent__ = (new (__proto__)([z1,,])); delete (p={}, (p.z = [,,])()); *::*.__lookupGetter__(\"__iterator__\")) {var prop; }");
tryItOut("/*for..in*/for(var __parent__ in <y><z/></y>) x");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in [15,16,17,18].map(Math.sin,  /* Comment */prototype)) {if(prototype.eval(<x><y/></x>)) { if ((new ({}).hasOwnProperty())) {yield;return; } else constructor}yield; }");
tryItOut("throw StopIteration;");
tryItOut("let (__count__, prototype = function(id) { return id }) { yield; }");
tryItOut("/*for..in*/L:for(var __parent__((String(<y><z/></y>, *::*))) = (({__count__: ( '' )(true, __noSuchMethod__)})) in (new (function (constructor, __noSuchMethod__) { return (delete __proto__) } )())) {export __noSuchMethod__;//h\n }");
tryItOut("/*for..in*/for(let prototype.__iterator__ in (((this).watch)([z1,,]))){{}/*for..in*/for(var constructor in ((function(q) { return q; })(.2))){export prototype;/a/gi } }");
tryItOut("/*infloop*/M:for(prop; [1]; <><x><y/></x></>) break ;");
tryItOut("with(prototype)gc()");
tryItOut("try { gc() } finally {  case 4: return @foo; const __iterator__;{} } ");
tryItOut("/*infloop*/L:for(+1.2e3; (new <x/>(<x><y/></x>, <><x><y/></x></>)); let (prototype) <><x><y/></x></>.watch(\"prop\", function(y) { yield y; const prop;; yield y; })) break ;");
tryItOut("/*for..in*/for(const prototype in null) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in  /* Comment */eval(\"<x/>\", @foo)) {if(__count__.unwatch(\"__proto__\")) __noSuchMethod__ =  /x/g , __count__ = window else {gc()let __count__ = null; }for(let y in [5,6,7,8]) let window = [,,z1]; }");
tryItOut("/*infloop*/for(let \t__count__; -1; <bbb xmlns:ccc=\"__parent__\"><ccc:eee></ccc:eee></bbb>) let __proto__, __proto__ = 1.2e3;");
tryItOut("{}\n");
tryItOut("let(__count__ = , ({ prop: prototype, function::__count__: ({ prop: [__iterator__] }) }) = [15,16,17,18].map(Math.pow, [,]).__lookupGetter__(\"prop\")) ((function(){for(let y in []);})());");
tryItOut("L: let __parent__ = ({});");
tryItOut("/*infloop*/while(__parent__ = <x><y/></x>)L:with({prop: [,,z1].__count__ = -1}){return <><x><y/></x></>; }");
tryItOut("/*infloop*/M:for( /x/ ; prop = [1]; ({a2:z2}).unwatch(\"prototype\")) ");
tryItOut("L:with(new @foo){{} }");
tryItOut("while((#1=[((({}).hasOwnProperty)(0/0))]) && 0){L: {prop, prop }\fL: {window(1e4);\f } }");
tryItOut("/*for..in*/M:for(const [__count__, __proto__] = constructor.__parent__ = (([(-1)].sort(function  __noSuchMethod__ (__parent__)null)))[((((<y><z/></y>).__defineSetter__).apply)())] in (this.__defineGetter__(\"prop\", (<x><y/></x>).__defineSetter__).prop = prop = <y><z/></y>)) ; const __proto__;");
tryItOut("/*infloop*/do return; while(<x><y/></x>);");
tryItOut("let (({ prop: __parent__ })) { {} }");
tryItOut("if(( /x/g )()) {throw true; } else return 1e4;yield <x><y/></x>;");
tryItOut("{{if(<x><y/></x>) {gc() } else  if (__proto__) yield;/*for..in*/for(var constructor =  ''  in <x><y/></x>) export __iterator__; } }");
tryItOut("if(<xxx {__parent__}={(prototype =  /x/g )} />\t.((new Function)((#3={a:#3#}.watch(\"__iterator__\", function(y) { yield y; break ;; yield y; })), [1] -  '' ))) {{; } } else {{} }");
tryItOut("/*infloop*/for((__proto__ = @foo.throw(\n__proto__ = prototype)); (__count__.__proto__ getter= (new Function(\"\"))); ([15,16,17,18].filter(<><x><y/></x></>, false))( for each (__count__ in <><x><y/></x></>).__proto__, window % 3/0)) ;\nthrow <x><y/></x>;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in new Date(-0)) /*infloop*/do return <x><y/></x>; while( /x/g  % __parent__);");
tryItOut("let __iterator__ =  /x/g , __noSuchMethod__ = @foo; const prototype;");
tryItOut("/*infloop*/do continue ; while((\t__proto__-=<x><y/></x> <<= (*++)) >>= (new ((1 for (x in [])))(<y><z/></y>).constructor = (__noSuchMethod__ || <x/>)))\nwith({}) { return; } ");
tryItOut("try { return; } catch(prop) { const setter = 3/0, prototype; } finally { export __noSuchMethod__; } ");
tryItOut("yield (((new function  __iterator__ ()__count__()))); const prop;");
tryItOut("M:if([(p={}, (p.z = prototype)())]) let (__iterator__) { export *; } else  if (*::* === (function ([y]) { })()) {/*infloop*/for(const prop; true ,  \"\" .__iterator__; #1#.@foo) {/*for..in*/L:for(let [prop, __parent__] = (__count__).apply in @foo) (prototype); } }");
tryItOut("[]");
tryItOut("/*for..in*/for(const ({ __parent__: ({ __iterator__: prototype }) }) in -3/0) yield __proto__;");
tryItOut("/*infloop*/for(__iterator__ = this.isPrototypeOf((yield <x/>)).@*; <x><y/></x>.__count__ =  /x/ ; \nnew <><x><y/></x></>()) {export *; }");
tryItOut("{/*for..in*/for(var [__noSuchMethod__, x::prop] =  \"\"  in <x/> / <y><z/></y>) {yield 3;if(__noSuchMethod__.(*)) { if ((__count__)) new Function else ;} } }");
tryItOut("/*infloop*/for(@foo >> @foo.valueOf(\"number\"); <x><y/></x>\n.propertyIsEnumerable(\"__iterator__\"); (1.2e3.__count__)) {let (__noSuchMethod__) { /*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in *::*)  get prototype(__noSuchMethod__)*::* }/*for..in*/for(const  \"\"  in (((yield arguments).__defineSetter__)(((false -= __iterator__) *= #1#\f)))){if(@foo) yield <x><y/></x>;Math.sin }\r }");
tryItOut("/*for..in*/for(var __parent__ in (([15,16,17,18].filter((<><x><y/></x></>).apply, true))('fafafa'.replace(/a/g, function(q) { return q; }))))(__noSuchMethod__);");
tryItOut("let ([, ] = ((uneval((undefined)[<x><y/></x>]))), prop) { do yield <x/>; while((__count__ = __count__) && 0); }");
tryItOut("if(new ((true).watch)(<x/>, this)--) {if(<><x><y/></x></>) { if (constructor) yield <><x><y/></x></>;} else {; } }");
tryItOut("return <x/>;");
tryItOut("/*infloop*/for(Boolean( /x/ , this); 3.141592653589793; (__iterator__ = 3.141592653589793 %= <><x><y/></x></> .@x:: <x><y/></x>)) {{}if(@foo) {{}; } else {;window; } }");
tryItOut("/*for..in*/for(var prop = <x\r><y/></x> in <><x><y/></x></>) {throw <x><y/></x>; }");
tryItOut("for(let y in [5,6,7,8]) let(prototype, delete = __iterator__ = [z1]) ((function(){let(, __proto__) ((function(){__proto__ = __count__;})());})());");
tryItOut("do gc() while(((#2=[z1])) && 0);");
tryItOut("if(this += @foo.watch(\"__count__\", gc)) { if () with({<xxx {constructor}={ /x/ } />: (prop = __parent__)})break ; else {<><x><y/></x></>; }}");
tryItOut("/*for..in*/for(const __proto__ in (((((new Function(\"yield  '' ;\"))).call).call)(new __iterator__(<x><y/></x>, 1e4)))){{}__iterator__; }");
tryItOut("let(__iterator__) { ;");
tryItOut("/*infloop*/do {with(({a2:z2}))prototype = -1, __noSuchMethod__; } while(function::__parent__ = <x><y/></x>);");
tryItOut("if(false.*) { if ((({ __iterator__: __noSuchMethod__ }) = __iterator__ = prop = [[]]) >>> this |= this) {export *;/*infloop*/for(var __count__; new Boolean(undefined, __proto__); +(<y><z/></y>)(<x><y/></x>)) 4. }} else {(window); }");
tryItOut("while(([({ __count__: __iterator__, __noSuchMethod__: __proto__ }), __proto__] = (prop = <x><y/></x>) && (__count__ = undefined.eval(1e81))) && 0){return <x><y/></x> }");
tryItOut("this.zzz.zzz;");
tryItOut("while((({ set __parent__(__count__) { yield  }  })) && 0){(<x><y/></x>);( /x/g ); }");
tryItOut("\nthis.valueOf(\"number\").__defineSetter__(\"prototype\", 'haha'.split)) * { if () (undefined);} else {export __noSuchMethod__;; }");
tryItOut("/*infloop*/while(#2=true | *::*.hasOwnProperty(\"__count__\"))break ;\nexport *;\n");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do export function::__noSuchMethod__; while(eval(\"var __proto__, __count__;\", constructor));");
tryItOut("L:while((<x><y/></x>.* :: (* <<= <><x><y/></x></>).__lookupSetter__(\"__parent__\")) && 0){break  }");
tryItOut("/*infloop*/M:while((__parent__ = <x/>)){if(@foo) ; else {yield <x><y/></x>; } }");
tryItOut("if(<x><y/></x>) { if (---1) break ; else return *::*;}");
tryItOut("/*for..in*/for(const prop = Array(this) in ( \"\"  * *)) {/*for..in*/for(let prototype in (((new Function).call)(undefined['prototype']))) }");
tryItOut("do {with({__iterator__: <x><y/></x>}){gc() } } while((<><xxx>{}</xxx></>) && 0);");
tryItOut("/*infloop*/do const __parent__; while(null);");
tryItOut("L:if( /x/ ) { if (<y><z/></y>) {} else {; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let *::*.__parent__ in arguments) {with(this)with(<x><y/></x>\n){if(window) throw __parent__; } }");
tryItOut("/*for..in*/for(let __proto__ in (((new Function(\"const prop =  '' ;\")))(1e81)))(@foo);");
tryItOut("/*infloop*/do {return function(id) { return id };\n; } while(let = Function(window,  /x/g ));");
tryItOut("return;");
tryItOut("with(true.throw(<y><z/></y>) ? __proto__.__lookupSetter__(\"__noSuchMethod__\") : <y><z/></y> || window)__parent__, prototype;");
tryItOut(";");
tryItOut("L:do {let __proto__ = false, __count__ = undefined; } while((false) && 0);");
tryItOut("yield;\n@foo;\n");
tryItOut("if([15,16,17,18].map(<><x><y/></x></>,  \"\" .watch(\"__count__\", new Function))) if(<!--yy-->) this; else {export __count__; }\ngc() else {<x><y/></x> }");
tryItOut(";with({prototype: 1e4.@foo})continue M;");
tryItOut("/*infloop*/do {/*for..in*/for(let __count__ = null in <x/>) {export *; }(.2); } while((new function(q) { return q; }((<x><y/></x> ? <x><y/<zzz>(new (<x><y/></x>)())</zzz>></x> : [[1]]))));");
tryItOut("yield throw __count__;;");
tryItOut("if(this) { if (undefined) { } else gc()}");
tryItOut("with((delete))return;");
tryItOut("switch(*::*.*) { \tcase 2: break;  }");
tryItOut("try { continue ; } catch(__proto__) { return; } finally { export __noSuchMethod__; } ");
tryItOut("let(__count__ = (<><x><y/></x></> >>>=*::*.throw(constructor = <x/>)),  { yield (#3={a:#3#}.propertyIsEnumerable(\"__count__\")) } ) { ({ set prop() { yield *::* }  }) = constructor;");
tryItOut("L: {*::*;export constructor; }");
tryItOut("/*for..in*/for(const [constructor, prototype] =  \"\"  && <><x><y/></x></> in this >>>=undefined) (new Function(\";\")) const constructor;");
tryItOut("/*infloop*/for(0x99; @foo; false) {yield; }");
tryItOut("/*for..in*/for(prop = [,,z1] in delete <y><z/></y>) {yield;/*infloop*/do gc() while([,,z1]); }");
tryItOut("throw <x><y/></x>;");
tryItOut("with(let (prop, __count__ = <x><y/>\t</x\n>) new window.propertyIsEnumerable(\"__iterator__\")){return [[]]; }");
tryItOut("if((__iterator__)) return; else  if (true * @foo) {with({constructor: <y><z/></y> = true})return; }");
tryItOut("/*infloop*/for(const constructor = <x><y/></x>; 0; <><x><y/></x></>) \nyield window;");
tryItOut("M:if(((__parent__ = null) ? 033 : __parent__ =  /x/g )) {__proto__, constructor = __proto__;constructor, __parent__; }");
tryItOut("/*infloop*/L:do {(<><x><y/></x></>).watch } while([11,12,13,14].sort);");
tryItOut("export *;\t const prop;");
tryItOut("\rif((this for (__noSuchMethod__ in prop)).isPrototypeOf(let (__noSuchMethod__ = <x><y/></x>) <><x><y/></x></>)\f) yield <x/>; else yield (function ([y]) { })();");
tryItOut("while((this.__defineSetter__(\"delete\", (function  getter (({ constructor: __count__ }), prop) { yield  /x/g  } ).apply)) && 0)continue ;");
tryItOut("if([,,z1]) {prop; } else  if ((this.__defineGetter__(\"prop\", *::*))) {let __noSuchMethod__ = undefined, __parent__ = #3={a:#3#};if((<><x><y/></x></>.unwatch(\"__noSuchMethod__\"))) yield; else  if (<><x><y/></x></>) {yield; } else { } }");
tryItOut("if(<><x><y/>/*\n*/</x><///h\n>) ; else gc()");
tryItOut("with({}) {}");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __count__] = [,,] in  /* Comment */<><x><y/></x></>) ;");
tryItOut("/*infloop*/L:for(let __noSuchMethod__; (({ get __count__(<><x><y/></x></>, __parent__) { let __parent__, constructor = prop;\nexport __noSuchMethod__;\n } , prototype: (new RegExp(*, true)) }).*); <xxx {prototype}={<><x><y/></x></>.eval(<><x><y\t/></x><\f/>)} />.(eval(\" /x/ \", <x><y/></x>))) {__noSuchMethod__ =  \"\" ;export *; }");
tryItOut("/*for..in*/for(var [__iterator__, prototype] = <x/> += [,,] in @foo) let __proto__, __parent__ =  \"\" ;if((({ super  setter: (new Function(\"({}).__lookupGetter__\")), __count__: <x><y/></x> }))) {let __parent__ = <y><z/></y>;gc() }__parent__; const prop;");
tryItOut("__noSuchMethod__, __iterator__\n");
tryItOut("throw prototype;");
