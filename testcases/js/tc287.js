tryItOut("try { ; } finally { gc() } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const x::prop.prop in false) /*for..in*/for(let [__noSuchMethod__, __parent__] = constructor in prop) ;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = let (\fprototype, __count__ = <y><z/></y>) [,].__lookupSetter__(\"__noSuchMethod__\") in let (prototype = *::*, __proto__ = <x><y/></x>) prototype) let __parent__ = function ([y]) { };");
tryItOut("L: return;");
tryItOut("if(<y><z/></y> .@*:: getter) export __noSuchMethod__; else ");
tryItOut("/*infloop*/M:while(__count__ = ({prop: (<y><z/></y>.throw(__iterator__)), constructor: [[]].__count__ = constructor }))Math.pow");
tryItOut("L: const __parent__ = window");
tryItOut("/*for..in*/for(prototype = new (-0.*)() in  /x/ .yoyo(*::*)) const prop, __count__ = undefined;");
tryItOut("{{/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <><x><y/></x></>) throw '1.2e3;export prop; } }");
tryItOut("export __proto__");
tryItOut("L: {const __parent__, __proto__;break M; }");
tryItOut("{if(typeof window) {M:if(this) export __noSuchMethod__; else export *;gc() } else yield; }");
tryItOut("throw <x><y/></x>\n");
tryItOut("/*for..in*/for(let constructor = [z1,,].yoyo(prototype) in -1) yield null;");
tryItOut("do {const prototype = @foo, constructor = <><x><y/></x></>;let __proto__, __proto__ = <><x><y/></x></>; } while((++<y><z/></y>.propertyIsEnumerable(\"__proto__\")) && 0);");
tryItOut("let (__proto__) { /*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in <><x><y/></x></>) __noSuchMethod__ = [], prototype = true; } const __parent__;");
tryItOut("");
tryItOut("if(prototype = ({prototype: * >>= <x><y/></x>})) /*for..in*/for(var prototype in <><x><y/></x></>) {/*infloop*/L:for(let prototype;  /x/ ; #3={a:#3#}) {true;gc() } } else {switch(3.141592653589793) { case 7: default: @foo;break;  } }");
tryItOut("{throw  \"\" ;constructor; }");
tryItOut("L:with(new ([15,16,17,18].map(function(y) { yield y; return;; yield y; },  '' ))(prop, eval(\"throw <x><y/></x>;\", *::*)) :: (<x><y/></x>.yoyo( /x/ ))\t){;yield true; }");
tryItOut("L:while((<\f><x><y/></x></>.throw(this)) && 0)window;");
tryItOut("if(([<><x><y/></x></>].some([1,2,3,4].slice))) {export __proto__; }");
tryItOut("export *;");
tryItOut("\n(1e4);\n");
tryItOut("/*for..in*/for(__count__ in (((new Function(\"let (prototype =  '' ) { yield <><x><y/></x></>; }\")))(({ __parent__: __proto__, __count__: constructor }) = (({ get __noSuchMethod__ __proto__ (prop, constructor) { yield function ([y]) { } } , __count__ setter: [1,2,3,4].slice }).__defineSetter__(\"__proto__\", function (constructor, __iterator__) { yield <><x><y/></x></> } ))))){}");
tryItOut("let __count__, __proto__;");
tryItOut("/*infloop*/do {export __count__; } while(null);");
tryItOut("L: {switch(undefined) { default: throw -1;export __count__;break; case 033: const prototype = null;break;  } }");
tryItOut("let (({ prototype: __proto__, __count__: __parent__ }) = ({ get __parent__() { yield __proto__ }  }), __noSuchMethod__ = <x/>) { {(<y><z/></y>); } }");
tryItOut("{/*for..in*/for(const prototype in this) yield <><x><y/></x></>;__parent__ =  /x/g , constructor; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/do return\nreturn; while( \"\"  in (__noSuchMethod__ = (__noSuchMethod__ == <x/>).__defineSetter__(\"prop\", function  __iterator__ (prop) ''  == [z1])));");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("switch(((true for (constructor in  /x/ )))) { default: gc() }");
tryItOut("yield  /x/g  || prototype;");
tryItOut("/*infloop*/L:for(*\f; <x><y/></x>.([1,,]); (-1).__defineGetter__(\"__iterator__\",  /x/g ) > (new ( '' )())) {prop, constructor; }");
tryItOut("/*infloop*/for(setter; (<x/> ? false : @foo.__count__); (1e4 instanceof <zzz><x><y/></x></zzz>)) {throw __proto__;\nconst __proto__;\n }");
tryItOut("{export constructor; }");
tryItOut("");
tryItOut("if([1]) { if (<ccc:ddd><!--yy--></ccc:ddd>) yield;} else {continue L; }");
tryItOut("let (({ __proto__: ({ __parent__: ({ __count__: ({ constructor.prop: prototype }), __parent__: [, , ] }), yield: ({ __parent__: ({ __iterator__: ({ function::prop: ({ __noSuchMethod__: , prototype: prop }), __proto__: ({ __noSuchMethod__: __count__ }) }), prototype: ({ __count__: ({ constructor: prototype }) }) }), prototype: ({ getter: __iterator__, constructor: __proto__\f }) }) }) }), prototype) { /*infloop*/for(let __proto__; 'fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; });  \"\"  + __noSuchMethod__)  }");
tryItOut("if(({prop getter: Math.pow })) /*for..in*/for([__parent__, prototype] = this %= <><x><y/></x></> in @foo) return;");
tryItOut("{break M; }");
tryItOut("while((*) && 0)L:  /x/g ");
tryItOut("/*for..in*/for([__parent__, __count__] = prototype in [15,16,17,18].sort(new Function, *)) return <x><y/></x>; const __count__;");
tryItOut("{}");
tryItOut("yield  \"\" \nL:if(<x>\t<y/></x>) {{}yield __iterator__; } else {;return *; }");
tryItOut("while(((yield <><x><y/></x></>) >>>=<><x><y/></x></> *= -1) && 0){; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((/a/gi)(*::*))){<x><y/></x>; }");
tryItOut("return <x><y/></x>\n");
tryItOut("\nyield;");
tryItOut("__iterator__ = true\n\n;");
tryItOut("/*infloop*/M:for(var prop; prototype = __parent__; ( \"\"  >>>=(function ([y]) { })()).__lookupGetter__(\"__iterator__\")) /*for..in*/for(var [__proto__, __proto__] = <x><y/></x> in  \"\" ) __parent__ const prototype;");
tryItOut("function  __proto__ (__iterator__)this\nif(undefined) { if (prototype.prop) } else constructor, __parent__;");
tryItOut("M:if( \"\" ()) { if ((-0)) {(prop);__parent__; } else gc()}");
tryItOut("/*for..in*/for(const [prototype, constructor] = true in  /x/g ) {const prototype = *, prop = *;(arguments); }");
tryItOut("if(!((<y><z/></y> /= __proto__ < 0.@*)--)) { if ((uneval((( \"\"  + this).throw(<x><y/></x> instanceof [,]))))) {/*infloop*/while(window){return; } } else {((delete arguments)); }}");
tryItOut("throw #1=[#1#];");
tryItOut("do continue ; while((undefined.unwatch(\"__iterator__\")) && 0);");
tryItOut("L:do  while((export __parent__) && 0);");
tryItOut(";");
tryItOut("if(<><x><y/></x></>(<x><y/></x>, <x/>)) {constructor, __parent__ = <x></*\n*/y/></x>; }");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, constructor] = (yield this) in (__iterator__)( \"\" ) = (-null)) /*for..in*/for(let (prototype.__proto__)(<y><z/></y> < undefined) in <x><y/></x>.__defineGetter__(\"__iterator__\", function  prop () { return; } )) {break L; }");
tryItOut("if(throw set) {export constructor; } else  if (~1.3) {export *; } else /*infloop*/for(var __proto__ = <x><y/></x>;  \"\" ; <><x><y/></x></>) {((-0)); }");
tryItOut("L:if((yield <x><y/></x>.(this))) M:while((window) && 0)break L; else  if (__iterator__ = <><x><y/></x></>.@foo) /*infloop*/L:do gc() while( \"\" );");
tryItOut("{}");
tryItOut("if((<y><z/></y>.*) yield, this.__defineSetter__(\"prototype\", new RangeError(<x><y/></x>)).@*) { if (let (prototype, __parent__ = <x/>) <><x><y/></x></> != __iterator__.__parent__\f) {throw <><x><y/></x></>yield; } else var function::prototype = this, prop;}");
tryItOut("");
tryItOut("{throw @foo;yield this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::prototype(<x><y/></x>) in eval(\"new (new Function(\\\"export constructor;\\\"))(@foo, [z1])\", \ntrue)) [15,16,17,18].map([1,2,3,4].map, <x><y/></x>);");
tryItOut("return <><x><y/></x></>;\n\n\nL//h\n:with({__parent__: [,,z1]}){ }\n");
tryItOut("/*infloop*/for( '' .get = (<x/>)[1e+81]; window;  /* Comment */(<x><y/></x>)) {/*infloop*/do export *; while(((1 for (x in []))).call( /x/ , )); }");
tryItOut("continue ");
tryItOut("/*infloop*/for(const __iterator__ = true; <y><z/></y>; gc += <x><y/></x>) { }");
tryItOut("/*infloop*/for((\n(__noSuchMethod__.(#1=[#1#]))); ((yield <y><z/></y>)) % (constructor = this\n);  \"\"  ?  ''  : window.propertyIsEnumerable(\"__parent__\")) __noSuchMethod__;");
tryItOut("if(yield ({a1:1})) { if (<x/>\n) {do {return <y><z/></y>;return; } while((<x/>) && 0); }} else {; }");
tryItOut("try { var prop = <x><y/></x>, function::__parent__ = <x><y/></x>; } catch(constructor if __parent__.(<x/>)) { return window; } finally { yield <><x><\fy/></x></>; } ");
tryItOut(" if (<><x><y/></x></>)");
tryItOut("/*for..in*/M:for(__count__ in ) {if() {export *;[1,2,3,4].slice } else {({}).hasOwnProperty } }");
tryItOut("if(0/0) 033; else prop = 1e81, __iterator__ = #1#;");
tryItOut("{/*for..in*/for(var constructor in ((function(q) { return q; })(*::*)))/*infloop*/for(const __noSuchMethod__ = this; false; {}) {return;return; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in [export __proto__;].sort((<y><z/></y>).watch)) yield <y><z/></y>;");
tryItOut("while((<x/>) && 0)__parent__ = <x><y/></x>;");
tryItOut("with({__parent__: this}){L:if(<><x><y/></x></>) return; else  if (<><x><y/></x></>) {return <><x><y/></x></>;let prop; } else {const __proto__; } }");
tryItOut("var __noSuchMethod__;\nthrow  \"\" ;\n");
tryItOut("throw StopIteration;");
tryItOut("if({}) {(<y><z/></y>); }");
tryItOut("/*infloop*/for(this.__defineSetter__(\"constructor\", 'haha'.split); (false)([]); [,,]) L: gc()");
tryItOut("let");
tryItOut("true;");
tryItOut("/*for..in*/for(const [prop, __iterator__] = [z1] in function ([y]) { }) {if(__count__) { if (<y><z/></y>) throw <x/>; else {let __proto__; }}return ; }");
tryItOut("/*infloop*/for(prototype.prop; <><x><y/></x> </>; *) {__iterator__ = <><x><y/></x></>, __noSuchMethod__ = undefined; }");
tryItOut("if(true) { if (<><x><y/></x></>) (this); else {var __count__, prop;; }}");
tryItOut("with(<><x><y/></x></>){let __iterator__ = false; }");
tryItOut("/*infloop*/L:for(let [, ({ prototype: __count__ }\f)] = ((uneval((eval(\"(null.@*)\", new 'haha'.split(*, <\t><x><y/></x></>)))))); [11,12,13,14].map; [[1,2,3,4].map if (*)] !== yield <><x><y/></x></>()) {let(prop, prop = ((this).call)) ((function(){prop = __iterator__;})()); }");
tryItOut("switch(<x><y/></x>) { case 5: return @foo;break;  }\nif((\ffunction (prototype, prop)__iterator__, constructor = null)(true)) { if () return function::__proto__;} else {gc()yield; }\n");
tryItOut("with((({__proto__.__proto__: <x><y/></x>[__count__], __count__: (this.zzz.zzz) }) * (<><x><y/></x></>.hasOwnProperty(\"__proto__\")(this.@*, *::*))))/*for..in*/for([constructor, prop] = __count__ in *) {__iterator__ = <x/>, __parent__; }");
tryItOut("/*infloop*/M:for(var __proto__; (new (({}).__lookupGetter__).call(<><x><y/></x></>, <><x><y/></x></>)); (prop = *::* === <x><y/></x>).isPrototypeOf(( /* Comment */({ get __count__ constructor (__noSuchMethod__) { yield <><x><y/></x></> }  })))) gc()");
tryItOut("{var prop = __noSuchMethod__, prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in 'fafafa'.replace(/a/g,  /x/g )) {if(1e4.watch(\"__count__\", ({}).__lookupGetter__)) (window).watch else  if (eval(\"return;\", @foo)) let (__noSuchMethod__ = [,]) { return; }{} }");
tryItOut("throw StopIteration;");
tryItOut("if(*::*) (1e81); else {yield; }");
tryItOut("gc()");
tryItOut("if((uneval([z1].isPrototypeOf(<y><z/></y>)))) { if (constructor.__parent__) try { ; } catch(__noSuchMethod__ if (function(){var __parent__;})()) { return false; } catch(__noSuchMethod__ if (function(){const __parent__, prop = constructor;})()) { continue M; } finally { yield prototype; }  else export __noSuchMethod__;}");
tryItOut("M:if(0) { if (eval(\"*\", @foo)) yield __count__; else {while((true) && 0){}; }}");
tryItOut("if(eval(\"return;\", <x><y/></x> %  /x/g )) { if (<x><y/></x>[<><x><y/></x></>]) {throw prototype; }} else export *;");
tryItOut("/*infloop*/for(let constructor; ((<><x><y/></x></> for (function::__iterator__ in <x><y/></x>))) === [__parent__ = *::*;.__proto__ ? <>__iterator__</> : [(-3/0.propertyIsEnumerable(\"prop\"))].some(({}).__lookupGetter__)]; ((uneval(__noSuchMethod__ = <x><y/></x>)))) with([prototype].some(export *;)){yield\n(false)(undefined) } const __noSuchMethod__;");
tryItOut("{while(([15,16,17,18].map([1,2,3,4].slice, this).*) && 0)continue ;(window); }");
tryItOut("for(let y in []);");
tryItOut("if(<x><y/></x>) {yield;continue M; } else  if (__iterator__) export prototype;");
tryItOut("/*infloop*/M:for([z1,,]; __noSuchMethod__; <x><y/></x>) throw <><x><y/></x></>;");
tryItOut("/*for..in*/for(let __iterator__ = constructor.(this.zzz.zzz) in  >= (#0=(<><x><y/></x></>.@foo))) if(null) {; } else {return; }");
tryItOut("if(@foo) var __count__, __parent__ = false;\nexport __proto__;\n");
tryItOut("if(this) {return gc(); } else L:if(<><x><y/></x></>) { if (return @foo;) const prototype = arguments, __proto__; else }");
tryItOut("if((4..__lookupSetter__(\"__count__\")++)) {return;let __noSuchMethod__; } else  if (\rnew constructor /= (-1)()) return; else export *;");
tryItOut("/*for..in*/for(var constructor = <><x><y/></x></> in true.__defineGetter__(\"__parent__\", (1 for (x in []))).@* in <!--yy-->.(prop)) {{} }");
tryItOut("if((({__count__: *::* }))) {export __proto__;let __iterator__, prop = *; } else ");
tryItOut("throw prototype;");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __parent__] = (<x><y/></x>.(<x><y/></x>)) in 3.141592653589793) {var __count__, constructor;{yield ({}); } }");
tryItOut("L: {yield;<x><y/></x> }");
tryItOut("/*for..in*/for(var __parent__ in (((new Function(\"yield <x><y/></x>;\")))(([,] *= <x><y/></x>))))let (constructor = ({a2:z2})) { {} }");
tryItOut("{export __iterator__;return <x><y/></x>; } const __noSuchMethod__;");
tryItOut(" for (__iterator__(@foo) in (__iterator__ for each (prototype in 1e81))) for each (constructor in <y><z/></y>) for (prop.__iterator__ in <x><y/></x>) for (prototype in 033)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__(<x><y/></x>) in  /x/g ) {{}yield <x><y/></x>;\f }");
tryItOut("let (__parent__ = (eval(\"<x><y/></x>\", 033))) { var __noSuchMethod__; }");
tryItOut("<zzz><x/></zzz>");
tryItOut("/*for..in*/L:for(var [__proto__, __noSuchMethod__] = ({ set __count__(__count__) { return __noSuchMethod__ }  }) in window >>> <x><y/></x>) /*for..in*/L:for(var [__proto__, prop] =  ''  in prototype.__noSuchMethod__) do {yield;gc() } while(({}) && 0);");
tryItOut("/*infloop*/while([1,,] <= <x><y/></x> >>>=({__noSuchMethod__: new (function  __noSuchMethod__ ()__count__)( \"\" ) })){if((window.__lookupSetter__(\"__parent__\")).hasOwnProperty(\"__parent__\")) continue M; else  if (<x/>) {return; } else __parent__;(<x><y/></x>.(false)) }");
tryItOut("M:with({__iterator__: ((new Function(\"return  \\\"\\\" ;\")))(<x/> > <x/>, window.throw(__parent__))})return;");
tryItOut("let (({ __iterator__: ({ constructor: function::constructor, __count__: __noSuchMethod__ }) })) { constructor = (-1); }");
tryItOut("/*for..in*/L:for(let prop.__proto__ in ) /*for..in*/for(let prop = window.throw(<x/>) instanceof (uneval([,])) in 1.3) const __parent__");
tryItOut("/*infloop*/do {{__count__ = null;export prop; }({}).hasOwnProperty const __count__; } while((*::*.__defineSetter__(\"prop\", Math.sin).isPrototypeOf(({__count__: <><x><y/></x></>})) != new (this)(@foo, @foo)));");
tryItOut("/*infloop*/L:for(new (prototype.prototype setter= new Function)(<y><z/></y>, __iterator__.(<x\f><y/></x>)); __proto__.__proto__ = (yield [z1]); <x><y/></x>.__noSuchMethod__) return __count__;");
tryItOut("M:switch( /x/ .__defineSetter__(\"__parent__\", (({}).__lookupGetter__).apply)) { case 1: /*for..in*//* nogeckoex bug 349964 */ for  each(let prop in (Array(<y><z/></y>))) {export __noSuchMethod__;default: \n }break; break;  }");
tryItOut("if((__parent__ = <x><y/></x>)) { if (@foo) throw window; else {return  \"\" ;throw prototype; }}");
tryItOut("yield  \"\" ; const export *;;");
tryItOut("do {/*infloop*/do ({}).hasOwnProperty while(false);var __noSuchMethod__ = [1,,], __noSuchMethod__; } while((false && false) && 0);");
tryItOut("{(prop = ('fafafa'.replace(/a/g, false))); }");
tryItOut("yield;");
tryItOut("do {{}let constructor, __parent__; } while(( \"\" .isPrototypeOf(__proto__)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in *) {{} }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for(const __iterator__; {gc() }; true) break M;");
tryItOut("if(eval(\"yield;\", (prototype))) { if (__proto__.__iterator__ getter= return <x><y/></x>;) {while((-0) && 0){return __parent__;yield  /x/ ; } }} else yield *::*;");
tryItOut("with({prototype: __iterator__.__noSuchMethod__ = (true for each (constructor in __parent__) for each (prototype in ([ /x/g  for each (prototype in this)])) for each (__noSuchMethod__ in <><x><y/></x></>) if (-3/0))}){L: return *; }");
tryItOut("/*infloop*/for(prototype = (Math.pow)(<y><z/></y>); (window.__lookupGetter__(\"prop\")); new (prop)(({a1:1}))) {continue M; }");
tryItOut("export __proto__;");
tryItOut("L:if(__iterator__) {/*infloop*/while( /x/ .valueOf(\"number\") .@x:: <y><z/></y>)break ; }");
tryItOut("/*infloop*/do {L: {return; } } while(<><x><y/></x></> ^= (-0));");
tryItOut("M:with({x::__proto__: (__count__ = (5.0000000000000000000000) >>= prop\n)}){{if([1] || [z1,,]) export *; else {yield; } if (__count__) } }");
tryItOut("while(([15,16,17,18].some(({}).__lookupGetter__, <x><y/\f></x>)) && 0)if(-0) throw window; else  if (<><x><y/></x></>) export *; else ;");
tryItOut("/*for..in*/for\t(__iterator__ in ((function () { yield (eval(\"true\", undefined)) } )(let (prop = false, prototype) <>this</>))){__noSuchMethod__; }\nthrow undefined;");
tryItOut("/*infloop*/M:while((new (Function)()) ? <><x><y/></x></> : true ? <x><y/></x> : *::*){var prototype = [], constructor = 1e-81;yield  /x/ ;if(true) {break L; } else {'haha'.split } }");
tryItOut("");
tryItOut("{(Function);/*infloop*/for(let __noSuchMethod__ = <><x><y/></x></>; this; this) 3.141592653589793; }");
tryItOut("L: {export prop;return; }");
tryItOut("if( /x/g ) {(new Function(\"yield;\"))export *; }");
tryItOut("with({__iterator__: <x/>}){}");
tryItOut("switch([11,12,13,14].sort.valueOf(\"number\")) { case  ''  ? __proto__ : window: {}break; case 6: <x><y/></x>\nprop, constructor;break;  }");
tryItOut("//h\ngc()const constructor = <y><z/></y>, __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("let(__parent__ = 1e81, prop) { {}");
tryItOut("/*infloop*/for(const prototype; 0; null) \f{}");
tryItOut("/*for..in*/L:for(let prototype in <x><y/></x>) throw window;/*for..in*/for(const __proto__.constructor = <><x><y/></x></>.[, undefined, prototype, ] in \t(([1,2,3,4].map)(((new (<><x><y/></x></>)()).valueOf(\"number\"))))){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prototype in 033) {throw function ([y]) { }; }");
tryItOut("L:if( /x/g ) break L;");
tryItOut("/*infloop*/while(<x><y/></x>.([z1])){(prototype); }");
tryItOut("/*for..in*/L:for(({a2:z2})['__proto__'] in ((function  prototype ()<x><y/></x>.(false))(\tthrow 1e+81;.valueOf(\"number\").__defineSetter__(\"prototype\", 'haha'.split))))with((p={}, (p.z = @foo != ({}))())){/*infloop*/M:do {gc()throw  '' ; } while( '' ); }");
tryItOut("__proto__, __iterator__;\t");
tryItOut("M:if(prototype.(<y><z/></y>)) prototype = false else  if (<x><y/></x> :: __parent__) let (__noSuchMethod__ = 4., __parent__ = *::*) {  }");
tryItOut("yield (<x/> if (null));\n/*infloop*/do {([,,]);prototype = true, constructor; } while(<x><y/></x>);\n");
tryItOut("prototype = *, prototype = prototype;");
tryItOut("gc()\n");
tryItOut("/*for..in*/for(let prototype in ((gc)(++[<x/>].some(eval))))export *;");
tryItOut("throw StopIteration;");
tryItOut("if((__noSuchMethod__ = (this.watch(\"__parent__\", function(q) { return q; })))) { if (*.prototype = null) var constructor = <><x><y/></x></>; else throw <y><z/></y>;}");
tryItOut("/*infloop*/M:while(*::*)var __proto__ = window;");
tryItOut("/*infloop*/L:do this.zzz.zzz; while(export *.__lookupSetter__(\"__parent__\") || (<bbb xmlns:ccc=\"arguments.unwatch(\"constructor\")\"><ccc:eee></ccc:eee></bbb>.(gc())));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __noSuchMethod__ in 3) {return  '' ;let __parent__; } const __iterator__;");
tryItOut("M:switch(__noSuchMethod__ = ) { default: /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in this) (*)\nbreak; break; case 1e-81: break \ngc()\nlet (__iterator__ = *, __proto__) { export *; }case 4: yield; }");
tryItOut("L:if(__count__.__parent__ getter= new Function) { if (<x/> > @foo) let prop = @foo; else {(this);(-1); }}");
tryItOut("/*for..in*/for(__iterator__ in (((this.zzz.zzz))(__parent__ = new ({__proto__: <x><y/></x>,  get __noSuchMethod__ __noSuchMethod__ (__count__) { yield this }  })))){}");
tryItOut("if(Function(1.2e3)) {M:while((-1(null, [1])) && 0);if(false) {yield; } else  if (prototype = <><x><y/></x></>) {return (-0); } } else  if (<><x><y/></x></>.@foo.hasOwnProperty(\"prop\")) var __parent__ = [,,z1], prop; else {let __noSuchMethod__ = #1#, __count__ = __proto__; }");
tryItOut("return  /x/g ;");
tryItOut("{while(({ } >>> false) && 0)export __proto__;let (constructor, __iterator__) { __proto__; } }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("{if(((x::prototype = [1]))((*)[0x99])) {window/*for..in*/L:for(var constructor in ((({}).__lookupGetter__)(<x><y/></x>)))yield undefined; } else {M:with({__parent__: window}); }/*for..in*/L:for(const __noSuchMethod__ = this.__defineSetter__(\"__iterator__\", new Function) in __count__) export *;\t<y><z/></y>; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((function  __parent__ ()(p={}, (p.z = (new (({}).hasOwnProperty)(__proto__)))()))( ''  ? <x/> : *::*.prototype)))if(#2=this.__iterator__ = ((1e+81 for (prop in __count__)))) {throw <><x><y/></x></>; } else  if (__parent__.prototype =  '' ) export *; else {gc()( /x/ ).watch }");
tryItOut("");
tryItOut("throw <x><y/></x>;\ngc\n");
tryItOut("/*for..in*/for(const __parent__ in (eval(\"switch(<><x><y/></x></>) { default: <!--yy-->break;  }\", this))) {yield; }");
tryItOut("{with(constructor)export *\ngc() }");
tryItOut("if(*::*.yoyo(true)) { } else  if (prototype) {break ;export prototype; } else continue M;");
tryItOut("{var __parent__ =  \"\" ; }\nif(prototype if (033) > ( \"\"  != \tthis)) while((++getter) && 0)(4.);");
tryItOut("if( \"\" ) { if (prototype) {yield this;yield *::*; }} else {export *; }");
tryItOut("switch(*++) { default: /a/gi }");
tryItOut("let (__proto__, prop = .2) { 3/0; }");
tryItOut("/*infloop*/for((uneval(__noSuchMethod__)); new Math.pow([z1,,]); __parent__.unwatch(\"__proto__\")) {;var prop; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in yield.__noSuchMethod__ = __noSuchMethod__) {\tif(window) {return;__proto__ } else  if (<x><y/></x>) return; else yield <x><y/></x>; }");
tryItOut("const __iterator__ =  /x/g , constructor;");
