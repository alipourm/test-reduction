tryItOut("with({__proto__: (this.\f__defineGetter__(\"prototype\", window).valueOf(\"number\")[(\n<y><z/></y>)])}){while((new  '' .__lookupGetter__(\"prop\")(<x/>)) && 0)/*for..in*/for(let  /x/  in __noSuchMethod__) yield {}; }");
tryItOut("switch((\n((yield <x><y/></x>)))) { default: /*infloop*/do {for(let y in []); } while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);break;  }");
tryItOut("{{with({__iterator__: null})#1#; } }");
tryItOut("with({}) { yield this.__defineGetter__(\"__parent__\", (<><x><y/></x></>).call); } ");
tryItOut("with({}) { return; } ");
tryItOut("L: throw <><x><y/></x></> ^ <x><y/></x>;");
tryItOut("/*for..in*/for([__count__, delete] = __noSuchMethod__.__noSuchMethod__ setter= /a/gi in <x><y/></x>) {return;switch(<x><y/></x>) { default: continue ; } }");
tryItOut("if([[]] for (__count__ in false) if (<x><y/></x>)) {<><x><y/>__proto__ /x></>; } else  if ((<x/>.watch(\"__proto__\", function (prop) /x/g ))) {/*for..in*/for(const prop in <y><z/></y>) \r__iterator__ = 3/0; } else {return; }");
tryItOut("if((function  __proto__ ([__count__, , [prop, ({ constructor: __iterator__ })], ({ constructor: __iterator__, __parent__: [[__parent__], ({ __iterator__: prop }), ({ __proto__: __count__, __proto__: constructor }), , ] })])(eval(\"<y><z/></y>\", <><x><y/></x></>.__defineGetter__(\"__parent__\", function () { yield {} } )))\r).call(\nprototype = , (function (constructor, __iterator__) { export *; } )((yield <y><z/></y> >= <y><z/></y>)))) { if ([(this.__defineGetter__(\"prototype\", Math.sin)--).hasOwnProperty(\"__iterator__\")]) ('fafafa'.replace(/a/g, (1.2e3).apply));} else if(prop =  /x/ ) {Vlet let = <><x><y/></x></>, constructor = __parent__; }");
tryItOut("export __parent__;");
tryItOut("/*for..in*/M:for(let __parent__.__count__ in undefined) ({a2:z2});");
tryItOut("\n(window);\n");
tryItOut("if( '' [prop]) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var prop in 3/0) {export *;export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in #1=[0/0]) {<xxx {prototype}={<x/>} /> }");
tryItOut("if(__count__ = [, ]) if(let (__iterator__)  \"\" .@*) let __proto__ = <x/>, constructor; else  if ((<>\f<x><y/></x></>)()[([15,16,17,18].some(eval, <y><z/></y>))]) {throw <y><z/></y>; } else ; else {\n@foo; }");
tryItOut("/*for..in*/for(var ((<x><y/></x>.(<y><z/></y>)))((uneval( /x/ ))) in (@foo['__proto__'] = <><x><y/></x></> for (prop in [,]))) {/*infloop*/do  while(function(id) { return id });throw <x><y/></x>; } const \t__count__;");
tryItOut("if( '' ) L:if([<y><z/></y>].some([1,2,3,4].slice)) { if ((prop.__noSuchMethod__)) [1,2,3,4].map else {__iterator__ }} else  if (5.0000000000000000000000 + <><x><y/></x></>) {var __proto__; } else export __iterator__;");
tryItOut("/*for..in*/M:for(let __proto__ in <x/>) {__parent__ = __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__noSuchMethod__ in <y><z/></y>) {yield; } const __iterator__;");
tryItOut("{return; }");
tryItOut(" for ( /* Comment */__count__ /= ({ set  { return true }  __parent__ (constructor) { yield <y><z/></y> } , __parent__: {} }).({}) in ((uneval(({}))).yoyo(1.2e3 .. <><x><y/></x></>))) if ( /x/g \n, ({var __parent__ = <><x><y/></x></>, prototype; }).call(<x><y/></x>, *::*)(true, (String(<><x><y/></x></>))))");
tryItOut("let(__iterator__) { ");
tryItOut("export *;L:while((#1=[#1#]) && 0){const __proto__ = __iterator__, __count__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(var __proto__ = (-1) in 0.1) gc()");
tryItOut("gc()");
tryItOut("while((([z1,,])[<y><z/></y>]) && 0){}");
tryItOut("let (constructor, [, ]) { return; }");
tryItOut("/*infloop*/M:for(__parent__.__lookupSetter__(\"__count__\").eval([*::*]); (true << __count__); (this.__defineSetter__(\"return  /x/ ;\", ('haha'.split).apply).isPrototypeOf((__count__ = <><x><y/></x></>)))) return ({});");
tryItOut("");
tryItOut("/*infloop*/for(const \ndelete = window; this; *::*) {gc()continue ; }");
tryItOut("\nif(__noSuchMethod__ < new [,,](<x/>, *)) gc() else yield;");
tryItOut("do {<y><z/></y>;throw <><x><y/></x></>; }\t while((<y><z/></y> < window) && 0);");
tryItOut("if(<><xxx {__noSuchMethod__}={@foo} /></>) throw __noSuchMethod__; else  if ( catch ) ({}).__lookupGetter__ else ");
tryItOut("let ([], x::constructor) { /*for..in*/M:for(var [function::constructor, __proto__] = ((uneval(<x><y/></x>))) in __noSuchMethod__) gc() }");
tryItOut("if(({ __proto__: __count__, constructor: [({ __parent__: ({ __proto__: __count__, prototype: __proto__ }), __noSuchMethod__: ({ prop: constructor }) }), ] }) = Function) { if ((function(y) { yield y; yield  /x/ ;; yield y; }).call(, ((new Function(\"throw <y><z/></y>;\"))).call(<x><y/></x>, <y><z/></y>), ((__proto__) | (({constructor: <x><y/></x> })))).*) {return;throw window; } else /*infloop*/for(const __count__ = <x><y/></x>.(\ffalse); (p={}, (p.z = 0)()); 3.141592653589793 , (-1)) {yield; }}");
tryItOut("/*infloop*/for((([<x/>].sort([1,2,3,4].slice) ^= true.__noSuchMethod__ = __parent__ ^ new [1,2,3,4].map() * ((false >>> #3={a:#3#})[(* |= undefined)])).yoyo(((eval(\"((-0).watch(\\\"__proto__\\\", ( /x/ ).__defineSetter__))\", __count__ = __iterator__: @foo)).hasOwnProperty(\"prop\")))); this.zzz.zzz--; eval(\"(prop = [[1]], __noSuchMethod__[__count__.( /x/ )])\", null *= <x/>) :: <>null</>) {return; const __iterator__; }");
tryItOut("if(5.0000000000000000000000.throw(<><x><y/></x></>)) { if (prototype) {} else {return [z1,,];; }}");
tryItOut("if([11,12,13,14].filter) { if (RangeError(prop, <y><z/></y>)) return; else {/*for..in*/for(let __parent__ = <><x><y/></x></> in <x/>) return;throw <y><z/></y>; }}");
tryItOut("let (__proto__ = , __parent__ = __count__) { ; } const __iterator__;");
tryItOut("continue ; const prototype;");
tryItOut("if(export *) return [[1]]; else  if (__proto__.__iterator__ getter= function(y) { yield y; ; yield y; }) {;; }");
tryItOut("if(([15,16,17,18].sort(function(y) { yield y; var __count__ = __iterator__, __iterator__ = <x><y/></x>;; yield y; }, (Math.pow).call(<y><z/></y>, (function ([y]) { })()) for each (__parent__ in (this.__defineGetter__(\"prop\", ({}).hasOwnProperty))).@*))) {/*for..in*/for(const [__proto__, constructor] = <><x><y/></x></> in 0x99) {export constructor;[1,2,3,4].slice } } else  if (prototype) yield <><x><y/></x></>;");
tryItOut("prototype, __noSuchMethod__;");
tryItOut("if(#2=*) {{}export *; } else  if ((prop != (function ([y]) { })())) {/a/gi }");
tryItOut("L:switch((<><x><y/></x></> < @foo).prototype) { default: break;  }");
tryItOut("/*infloop*/do {(false);gc() } while(<x><y/></x>);");
tryItOut("L:if(!\nwindow |  \"\" ) gc() else  if (<x><y/></x>.prototype) {prop = new __iterator__(function(id) { return id }) } else export *\nreturn;");
tryItOut("if( /x/ ) {export prop; } else {eval({ __parent__: function::prop }) = ({ constructor: __iterator__ }) }");
tryItOut("/*infloop*/do __iterator__, __noSuchMethod__ = <y><z/></y>; while(<><x><y/></x></>);");
tryItOut("with({__noSuchMethod__: new ((function(y) { yield y; yield <x/>;; yield y; }).call)((-@foo.__parent__), null)}){(<y><z/></y>);M:if(__noSuchMethod__) {(1 for (x in []))continue L; } }");
tryItOut("/*infloop*/for(let prop; (__parent__ = <x/>); (uneval(prop))) gc()");
tryItOut("with({__parent__: ({})}){}");
tryItOut("(__count__);");
tryItOut("/*infloop*/L:while(({ constructor: constructor, __iterator__: __proto__ }) = <\fx><y/></x>.(null))yield;\nconst prop;\n");
tryItOut("/*for..in*/for(let prototype in let (prototype = *.eval(<x><y/></x>)) (<x/>.yoyo(1.2e3))) { }");
tryItOut("L: export prop;");
tryItOut("this.zzz.zzz;");
tryItOut("switch([[]]) { case 9:  }");
tryItOut("(*)");
tryItOut("with((window.__defineGetter__(\"constructor\", (1 for (x in [])))))/*for..in*/M:for(prototype in ((Function)(prop))){export __parent__; }");
tryItOut("yield  '' ; const __parent__;");
tryItOut("if(__iterator__) {gc()export __iterator__; } else  if ( '' ) {let __noSuchMethod__, prop; }");
tryItOut("break ;");
tryItOut("/*infloop*/M:for(/*\n*/ /x/ ; @foo; *) ;");
tryItOut("/*infloop*/for(<x><y/></x>; __parent__; __proto__) {break ;gc() }");
tryItOut("M:if( '' ) { if (<x><y/></x>) {const __parent__, x::constructor = @foo;break M; } else {continue L;yield; }}");
tryItOut("var constructor;export *;");
tryItOut("/*for..in*/M:for(var [__iterator__, constructor] = this in (<><x><y/></x></>.valueOf(\"number\"))) {let (__proto__) { prop } }");
tryItOut("<x/>;");
tryItOut("return;");
tryItOut("yield;");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = (this.__defineGetter__(\"prototype\", (({a1:1})).watch)) in (Iterator(5.0000000000000000000000)).watch(\"__count__\", <><x><y/></x></>)) {do {yield;true } while((1e-81.__count__ = this) && 0); }");
tryItOut("__iterator__ = ;");
tryItOut("if(null.isPrototypeOf([])) /*for..in*/for(__proto__ = null in  /x/g ) {([z1,,]).watchyield <y><z/></y>; } else \nif((__proto__ = ( \"\" .watch(\"__noSuchMethod__\", function (__proto__) { return null } )))) { if ((window)) __proto__} else {case <x/>: export *;default: return function(id) { return id };break;  }\t");
tryItOut("/*infloop*/while(new RangeError(__noSuchMethod__ = true, false)){'haha'.split }");
tryItOut("let prototype, __iterator__ = constructor;");
tryItOut("/*infloop*/for(new [z1](arguments()); [15,16,17,18].sort(eval, <x/>); *) {let prototype;throw  /x/g ;\nreturn;\f\n }");
tryItOut("with({__iterator__: [11,12,13,14].filter}){__iterator__ = 0/0; }");
tryItOut("yield\nyield;");
tryItOut("/*infloop*/M:do {(<x><y/></x>); } while(this.zzz.zzz);");
tryItOut("if(1e+81) {<><x><y/></x></>{} }");
tryItOut(";\n(<x/>);\n");
tryItOut("{prototype; }");
tryItOut("/*infloop*/for(var prop = ([] -= <><x><y/></x></>) ? (__count__\n ? * : __noSuchMethod__.__parent__ = 5.0000000000000000000000) : true /= false; default: const __noSuchMethod__ =  '' , constructor = [1];.yoyo(window); ({ __parent__: constructor }) = 'fafafa'.replace(/a/g, ({}))) export __noSuchMethod__");
tryItOut("if((undefined = false if (__count__))) { if (.__defineGetter__(\"prop\", function(q) { return q; })) do let __noSuchMethod__ = <y><z/></y>, __iterator__; while((true) && 0); else yield;\nyield <x><y/></x>;\n}");
tryItOut("if(new Boolean(<><x><y/></x></>)) {export __noSuchMethod__;return; } else  if ((__count__ = prototype)) {let getter; }");
tryItOut("/*infloop*/for(; [15,16,17,18].sort((new Function(\"(function ([y]) { });\")), *); <x/>--) {}");
tryItOut("/*for..in*/L:for(let [yield, __noSuchMethod__] =  /* Comment */ /x/g .throw(#1=[-0]) in <><x><y/></x></>) {window;return; }");
tryItOut("L://h\nif(throw this) { if (window[ /x/g ]) {return; }} else return <><x><y/></x></>;");
tryItOut("while((<><x><y/></x></>) && 0)export delete;");
tryItOut("/*for..in*/for(__count__ in (((__proto__ = __noSuchMethod__).watch)(__noSuchMethod__ <= <><x><y/></x></>.unwatch(\" get __noSuchMethod__(__noSuchMethod__, __iterator__) { return (undefined[function::constructor]) } \"))))const constructor = <x><y/\t></\rx>;");
tryItOut("/*infloop*/do {{} } while((<x><y/></x>__parent__));");
tryItOut("/*infloop*/do { } while((({ constructor: __proto__, __proto__: constructor }) =  /* Comment */({a2:z2})));");
tryItOut("/*for..in*/for(let __parent__ in (*--)) L: {}");
tryItOut("if(Object((let (prototype, __count__)  \"\" ))) yield; else  if (yield [, __noSuchMethod__, constructor, __parent__, __parent__] = [,,]) {export yield false;;\n'haha'.split\nL:while((<><x><y/></x></>) && 0)yield; }");
tryItOut("/*infloop*/do yield; while(<><x><y/></x></>);");
tryItOut("/*for..in*/for(var __count__ in ((function(q) { return q; })(((<y><z/></y>.watch(\"__parent__\", /a/gi)) for (prototype in window))))){yield *; }\nwith({}) { try { throw false; } catch(__iterator__ if (function(){let prop = false;})()) { ( /x/ ); } catch(constructor if (function(){gc()})()) { {} } catch(prop if (function(){export *;})()) { yield <><x><y/></x></>; }  } ");
tryItOut("/*infloop*/while( \"\" )prop");
tryItOut("export *;var prototype, constructor;");
tryItOut("function(q) { return q; }");
tryItOut("L:with({constructor: __noSuchMethod__ =  /x/g }){yield <x/>;throw  \"\" ; }");
tryItOut("export __proto__\n");
tryItOut("{\twith(const __noSuchMethod__ = false, try { prop = false, __iterator__; } catch(__parent__ if (function(){yield *::*;})()) {  } \nconstructor =  /x/g ;){{} } }");
tryItOut("const constructor =  \"\" ; const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */constructor = ((prototype)(<x><y/></x>))");
tryItOut("L:if(<><zzz>[15,16,17,18].filter(Math.pow, this)--</zzz></>) {let (__proto__ = -1, __proto__) { export constructor; }while((__noSuchMethod__) && 0)/*infloop*/do export __iterator__; while(true); } else ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let [, __iterator__, prototype, ] in undefined.@*) return;");
tryItOut("with((<x><y/></x>))(window);");
tryItOut("if(([\f(__count__)])) { } else  if (5.0000000000000000000000) {; }");
tryItOut("L:if(this.__defineGetter__(\"__count__\", (1 for (x in [])))) { if (<><x><y/></x></> >>> undefined) {/*for..in*/for(const constructor = *.__defineGetter__(\"__parent__\", function(y) { yield y; export constructor;; yield y; }) in <><x><y<y><z/></y> =  /x/g  + __proto__ /</'x></>) {var __noSuchMethod__ = *, constructor;M:\twith(5.0000000000000000000000)yield; }return <y><z/></y>; }} else switch(<x><y/></x> ?  \"\"  : null) { default: ; }");
tryItOut("throw <y><z/></y>\n(__noSuchMethod__);");
tryItOut("var __iterator__ =  /x/ , __parent__ = 1e+81;");
tryItOut("this.zzz.zzz;\nif((__proto__ = function::prop)) { if (this < 1e4) gc()} else let __iterator__ = <><x><y/></x></>;\n");
tryItOut("L: return\n");
tryItOut("/*for..in*/for(let __iterator__ in this) {<x/>;return; }");
tryItOut("/*for..in*/for(__count__ in (-1)) break ;");
tryItOut("L:if(yield <><x><y/></x></>) var prop; else  if (-0x99) { } else export constructor;\n{}\n");
tryItOut("<xxx {__noSuchMethod__}={__iterator__ = (({constructor: (<x><y/></x> .. false) }))} />");
tryItOut("with({}) { ( \"\" ); } ");
tryItOut("throw prop\n\nwindow;");
tryItOut("/*infloop*/for(__noSuchMethod__; ; __noSuchMethod__) {const constructor = [,,], prop = prop; }\nif(__parent__) {const __count__, prop = <y><z/></y>; } else  if (<y><z/></y>) const prop;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __iterator__: [[__iterator__, __proto__, , , ], , __count__, prop, ({ __count__: [, ({ __noSuchMethod__: ({ __iterator__: __count__ }) }), , , __noSuchMethod__], __iterator__: __iterator__ })] }) in window.throw(__parent__)) export *;");
tryItOut("if(<x><y/></x>[__count__] >= (__count__[__parent__])[(*::* , window)]) while((@foo) && 0){Math.pow } else  if () {var constructor = this, __noSuchMethod__ = [[]]; }");
tryItOut("return prototype;");
tryItOut("/*infloop*/for([,,][__proto__.\r__iterator__ getter= (Math.sin).apply]; (window.__lookupGetter__(\"constructor\").__defineGetter__(\"__parent__\", (new Function(\"yield;\")))); (yield (<><x><y/></x></>))) {yield; }\n");
tryItOut("try { {} } finally { return false; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__.__parent__ in (<x><y/></x>).call(<x><y/></x>, [z1,,], 1.3)--) {/*infloop*/for(let ({ __iterator__: ({ function::prop: __count__ }), setter: __parent__ }) =  \"\" yyy; ( \"\" .propertyIsEnumerable(\"constructor\")); (prototype = false.watch(\"setter\", ({}).hasOwnProperty))) {return __iterator__;let __count__; }this; }");
tryItOut("/*infloop*/for(let ({ __proto__: __parent__, prototype: constructor }) = (\n '' ); <x><y/></x>; new <x><y/></x>({})) {yield;yield <><x><y/></x></>; }");
tryItOut("if(<y><z/></y>) {false<x/>; } else {let __noSuchMethod__, prototype = 0/0;let __parent__; }");
tryItOut("if(<x><y/></x>--)  else  if ((Array(window))) { } else {Math.pow__iterator__ =  \"\"  }");
tryItOut("\nreturn __proto__;");
tryItOut("/*infloop*/for(Array();  \"\" |=__proto__.(<><x><y/></x></>); (new Object(<><x><y/></x></>))) [11,12,13,14].some.__parent__ = ;");
tryItOut("M:while((<xxx>{__parent__}</xxx>) && 0){if(Object(*)) { if (-0) prop; else __noSuchMethod__, prototype = <x><y/></x>;} }");
tryItOut("constructor");
tryItOut("{var __proto__; }");
tryItOut("{yield false;function  __proto__ (__proto__) { let x::constructor = <y><z/></y>; }  }");
tryItOut("L{(<x><y/></x>);yield  /x/g ; }");
tryItOut("throw __iterator__;");
tryItOut("/*infloop*/for(__proto__; #1=[#1#]; window) {{}export __proto__; } const constructor;");
tryItOut("/*infloop*/do ; while( \"\" .throw(true));");
tryItOut("return;");
tryItOut("while((5.0000000000000000000000) && 0){([,,z1]).watch; }");
tryItOut("break L");
tryItOut("let (__parent__ = <x><y/></x>) { let __iterator__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(prototype = __count__ = __parent__.prop in .2) {const constructor;continue\f ; }");
tryItOut("L: {yield this; }");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = -0 in [11,12,13,14].sort) if(<y><z/></y>) return ; else  if (undefined) {__noSuchMethod__;gc() }");
tryItOut("L: {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in <><x><y/></x></>) {{} }");
tryItOut("if((prototype.constructor getter= (1 for (x in [])))) {yield; } else  if (({ prop: __iterator__ }) = (prop <<=  /x/ )) {const __noSuchMethod__, __noSuchMethod__ = -0;(null); } else {let prop, constructor =  /x/g ; }");
tryItOut("var prototype\n");
tryItOut("for(let y in [5,6,7,8]) prop = constructor;");
tryItOut("with(null++)");
tryItOut("throw \t<x><y/></x>\n/*infloop*/for(__noSuchMethod__ = (this.__defineSetter__(\"prototype\", function (function::yyy) { yield *::* } )); 1e-81.watch(\"constructor\", (new Function(\"function  __parent__ (__noSuchMethod__, __noSuchMethod__) { yield function(id) { return id } } \"))); (<><x><y/></x></>++)) {return  '' ;yield __proto__; }");
tryItOut("/*infloop*/M:for(var prototype; ([11,12,13,14].map); new (<><x><y/></x></>)(.2)) {/*for..in*/L:for(const [__noSuchMethod__, prop] = (*)[__count__] in ((this.__defineSetter__(\"__count__\", 'haha'.split)) for each (prototype in  /x/g ) if (*::*))) __proto__, __iterator__ = <x><y/></x>; }");
tryItOut("do export *; while((<x><y/></x>.(undefined)) && 0);");
tryItOut("Function");
tryItOut("/*for..in*/L:for(__proto__ = <x><y/></x> in <y><z/></y>) {}");
tryItOut("switch(prop) { default: break; case [,,]: /*for..in*/for(const __noSuchMethod__ in  \"\" ) {var __count__, __proto__ = __count__; }break; case 5: const prototype, constructor;break; /*for..in*/for(const __parent__ = 1e+81 in <x/>) {export prop;function(q) { return q; } }case (<><x><y/></x></> ? *::* : window): throw <x><y/></x>;break; throw \t__noSuchMethod__;break; case  /x/g : this;break;  }");
tryItOut("/*\n*/switch(window) { default: break; yield; const get;break; case ((eval(\"with({__count__: <x><y/></x>}){gc() }\", 5.0000000000000000000000))\n): if((__iterator__.function::constructor getter= (<y><z/></y>).call)) {yield; } else  if ( /x/ .*) {[1,2,3,4].slice }break; case <x><y/></x>.__lookupGetter__(\"__count__\"):  }");
tryItOut("if(eval(\"if(-1) yield; else var __noSuchMethod__, __noSuchMethod__;\", <><bbb xmlns=\"__iterator__.__noSuchMethod__ = try { {} } catch(__iterator__ if <x><y/></x>\f) { function (prop, prop)<><x><y/></x></> } \"><bbb xmlns:ccc=\"(-1)\"><ccc:eee></ccc:eee></bbb></bbb></>)) ; else export *;");
tryItOut("yield <x/>;");
tryItOut("with((function ([y]) { })())export *;");
tryItOut("/*infloop*/do return <><x><y/></x></>; while(this)\nexport __iterator__\n");
tryItOut("return (eval(\"continue M;\", *::*)).eval(([15,16,17,18].map(/a/gi, prototype)));");
tryItOut("/*infloop*/L:for(({ __noSuchMethod__: ({ prototype: __iterator__, prototype: ({ __count__: ({ __proto__: [], __parent__: [({ __count__: prototype }), , constructor, , ({ __iterator__: __parent__ })] }), __count__: ({ get: ({ ( \"\" )(window): __proto__ }), __iterator__: prototype }) }) }) }) = ('haha'.split()); <x/> = yield  \"\" ;; eval(\"( /* Comment */*::*)\", (__iterator__ = (window).call(window, ))) @ (this.yoyo(.2)).valueOf(\"number\").eval( /x/ .unwatch(\"__proto__\") ? <y><z/></y> == false : __parent__)) const prop");
tryItOut("/*for..in*/for(var __proto__ = this.__defineSetter__(\"__count__\", (1 for (x in []))) % ({ constructor: prototype, prop: __parent__ }) = ([11,12,13,14].sort) in (new ((null).watch)([,])).prototype = window) {if(\nprop = <><x><y/></x></>) { if ([(<bbb xmlns=\"__proto__\"><ccc:ddd>yyy</ccc:ddd></bbb>.(__iterator__.prototype))]) break L\n} else gc() }");
tryItOut("/*infloop*/do {continue M;\n } while(({__parent__: ,  set prototype(__iterator__) { export __noSuchMethod__; }  }));");
tryItOut("with({}) throw  /x/ ;");
tryItOut("/*infloop*/for(new Function; ([[1]] > arguments); (window <<= [,])) {yield;yield prop; }");
tryItOut("\tgc() const __parent__;");
tryItOut("__parent__ = __count__;");
tryItOut("M:while(((*::*)()) && 0){continue ;/*infloop*/for(false; [z1]; true) (3.141592653589793); }");
tryItOut("gc()");
tryItOut("L:with(<x/>.__defineSetter__(\"constructor\", (0x99).__defineSetter__)){constructor = <>__count__</>, __proto__;export __noSuchMethod__; }");
tryItOut("if(undefined.unwatch(\"__count__\")) {prototype = *;var __parent__, prop; } else return <x/>;");
tryItOut("if(yield @foo.__count__) { if ( \"\" ) {{}throw @foo; }} else var __noSuchMethod__, __noSuchMethod__;");
tryItOut("return; const __iterator__;");
tryItOut("/*infloop*/M:while(*){}");
tryItOut(";\nreturn;\n const __iterator__;");
tryItOut("let (__parent__, __count__ = null) { Math.pow }");
tryItOut("while(( /* Comment */(function (default: ) { yield 'null } )) && 0){const __count__ = <><x><y/></x></>;if(1e81)  else  if (({a1:1})) return; else {{} } }");
tryItOut("throw false;\nyield\n");
tryItOut("\fL\t:switch(({__iterator__: this.__defineGetter__(\"__iterator__\", \t(prototype).apply)})) { default: L:if([z1].yoyo(*::*).*) { if ((({a1:1}))().__defineSetter__(\"prototype\", true)) {; }} else ( '' );break;  }");
tryItOut("L: {(window); }");
tryItOut("var __noSuchMethod__ = null, __parent__;");
tryItOut("switch(window) { case 6: gc()( '' );break; ( \"\" ); const __proto__; }");
tryItOut("throw prop;");
tryItOut("yield 1e-81;");
tryItOut("/*infloop*/do {/*infloop*/M:for(let __count__; try { const __parent__; } catch(__count__ if (function(){export *;})()) { break ; } catch(__proto__) { return <x><y/></x>; } finally { ( \"\" ); } ; ((<x><y/></x>).__defineSetter__)( \"\" , <x><y/></x>)) {}/*for..in*/for(let constructor in \fnew null)  } while([[]]);");
tryItOut("switch(((p={}, (p.z = ({__count__: yield constructor; }) >  \"\" )()))) { case constructor.__iterator__ = undefined.throw(<x/>) | ((true if (constructor = *::*, __iterator__)).throw(<x><y/></x>.isPrototypeOf(true))): break; default: break; {yield 1e-81;throw @foo; }break; try { export constructor; } finally { __proto__, __proto__; } case 7:  }");
tryItOut("export __iterator__");
tryItOut("/*infloop*/while(setter = <x><y/></x>)var __noSuchMethod__;");
tryItOut("/*infloop*/M:for(const prototype; (p={}, (p.z = ({}))()); constructor) {if(((constructor.__count__) in true.throw(<y><z/></y>))) {return;yield; } else {{}throw [[]]; }{with({constructor: true}){yield; } } }");
tryItOut("");
tryItOut("const __noSuchMethod__, constructor;\n{}\n");
tryItOut("{var prototype, __iterator__; }");
tryItOut("/*for..in*/for(const prototype = <xxx {__proto__}={__noSuchMethod__} /> in <x/>) {__count__ = true; }");
tryItOut("M:while((<><> </></>) && 0)const constructor = <><x><y/></x></>, __iterator__ = <x><y/></x>;");
tryItOut("if(0x99) { if (<x><y/></x>) let constructor, prop;} else {__proto__; }");
