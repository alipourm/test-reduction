tryItOut("var __parent__ = __proto__ = <><x><y/></x></>, constructor\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__.__noSuchMethod__ in <>yyy</>) let (__count__ = (__count__ = window), __count__) { /*infloop*/do  while(function(id) { return id }); }");
tryItOut("/*for..in*/M:for(let \t<x><y/></x>.(<x><y/></\tx>) in ((/a/gi)(((uneval(<y><z/></y>))))))export __iterator__;");
tryItOut(";\nif(!<><x><y/></x></>) continue L;\n");
tryItOut("{; }");
tryItOut("/*infloop*/L:do {/*infloop*/do {yield this; } while(<><x><y/></x></>.__parent__ = \n<x><y/></x>); } while(new ((({a1:1})).watch)( '' ));");
tryItOut("\n");
tryItOut("M:if(__iterator__) var __noSuchMethod__ getter: (1 for (x in []));");
tryItOut("if((({function::__parent__ setter: Math.pow, prop: <><x><y/></x\t></> }))) {throw this; }\n{/*infloop*/while([__proto__ if (<x/>)]){function(id) { return id }; }function(y) { yield y; ({}).__lookupGetter__; yield y; } }");
tryItOut("/*infloop*/do yield <><x><y/></x></>; while((this.__defineGetter__(\"__parent__\", null) for (\t[].__defineSetter__(\"__proto__\", function(q) { return q; }).__parent__ in -1) if (*::*)));");
tryItOut("try { /*for..in*/L:for(__parent__ in ((function(y) { yield y; return;; yield y; })(window.eval(-3/0)))){const __count__ = [[1]], prototype = (-1);return; }catch(__count__ if (function(){for(let y in [5,6,7,8]) return;})()) { with({}) { for(let y in []); }  } ");
tryItOut("var __noSuchMethod__, __iterator__;");
tryItOut("/*infloop*/for(*::*; [(this.__defineSetter__(\"constructor\", eval))]; @foo.propertyIsEnumerable(\"__parent__\").__lookupGetter__(\"prop\")) {/*for..in*/for(var [__noSuchMethod__, constructor] = arguments.unwatch(\"prop\") in (Math.pow)()) {break ; }with({constructor: 'fafafa'.replace(/a/g, function(q) { return q; })}){L:if(0) { if (*) {return null; } else return <y><z/></y>;}const constructor; } }");
tryItOut("if(this.throw(<y><z/></y>)) {yield  /x/ ;L:with({prototype: (function ([y]) { })()}){this; } } else  if (<x/> .@ [,,z1]) yield;");
tryItOut("/*infloop*/for(let constructor = eval(\"<y><z/></y>\", <>{-3/0; }</>); eval(\"<><x><y/></x></>\", <x/>); <><x><y/></x></>) {let constructor = <y><z/></y>;yield <x><y/></x>\nexport *; }");
tryItOut(";");
tryItOut("/*for..in*/for(constructor = <x/> ? @foo : window -= ('fafafa'.replace(/a/g, Math.sin)) in [prop].some(function(q) { return q; }) ?  /x/  : null) /*for..in*/L:for(var [prop, __parent__] = <><x><y/></x></> in -1) {}");
tryItOut("if((new (this)(null)) ? (yield false) : ([<x><y/></x>].map(<x><y/></x>))) { if ((uneval(*))) export __count__;} else {if(window) { if ([z1]) {var __iterator__, __proto__;constructor; } else return <x><y/></x>;}(<y><z/></y>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__.constructor in  /* Comment */__proto__.__proto__) {/*infloop*/for(<><x><y/></x></>.unwatch(\"__proto__\"); this.__defineGetter__(\"__iterator__\", new Function); 'fafafa'.replace(/a/g, (1 for (x in [])))) /*infloop*/<{constructor}\f><{__count__}><ccc:ddd><!--yy--></ccc:ddd></{__count__}><!--yy--></{constructor\t}>/*\n*/let yield, prototype\n }");
tryItOut("with({prototype:  ''  ? this : true}){throw (-1); }");
tryItOut("/*infloop*/for(-0 .@x:: window; prototype.valueOf(\"number\"); new Date()) return;");
tryItOut("{continue M;let __noSuchMethod__ = -1; }");
tryItOut("if(void this) (({}).__lookupGetter__).apply else {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in [15,16,17,18].filter(Math.sin, <y><z/></y> >>> <y><z/></y>)) /*infloop*/while(__proto__ = @foo){}");
tryItOut("{}");
tryItOut("with({__iterator__: (<xxx>{function::constructor}</xxx>.([11,12,13,14].sort))}){gc() }");
tryItOut("break M;");
tryItOut("if(eval(\"<xxx>{prototype}</xxx>\", [,,])) {<x><y/></x>; } else \n{{} }");
tryItOut("continue \ndo (window); while((__proto__ = <y><z/></y>) && 0);");
tryItOut("/*for..in*/L:for(const (this.__defineSetter__(\"__iterator__\", (eval\f).call)) >>> (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map)) if (this).valueOf(\"number\").constructor in ( /* Comment */prototype).watch(\"__parent__\", ({}).hasOwnProperty)) M:if(window ^= 5.0000000000000000000000.*) {break ; } else  if ([<x><y/></x>]) {} else yield;");
tryItOut("if( '' .valueOf(\"number\").__lookupGetter__(\"__noSuchMethod__\")) export *; else  if (*.__lookupGetter__(\"__count__\")) {yield window; } else {L:with({prop\n: <><x><y/></x></>}\t)var prop; }yield ((<><x><y/></x></>(<x><y/></x>)).__lookupGetter__(\"__count__\"));");
tryItOut("let(({ __parent__: ({ __proto__: <x><y/></x> }), __proto__: __noSuchMethod__ })\t) ((function(){try { return (<x/> + function(id) { return id }); } catch(__count__ if yield.__noSuchMethod__\t = window) { this.zzz.zzz; } catch(__noSuchMethod__) { yield (<//h\n><x><y/></x></>.__defineSetter__(\"prototype\", function  __noSuchMethod__ () { return <><x><y/></x></> } )); } })());");
tryItOut("{/*infloop*/do {;return; } while(let (constructor =  /x/g ) (prototype.__proto__ setter= __parent__)); }");
tryItOut("__parent__ = __proto__;");
tryItOut("/*for..in*/for(const [__proto__, __iterator__] = (<><x><y/></x></>)() in <x><y/></x>.__lookupSetter__(\"__proto__\")) break M;");
tryItOut("/*infloop*/for(__proto__ = ({}).__lookupGetter__; ((#1#).call)((true.__defineSetter__(\"__proto__\", /a/gi)) .. __iterator__ = [1,,], __proto__ .@ window);  /x/ ) {gc()break ; }\nreturn;\n");
tryItOut("if(this.__defineGetter__(\"__iterator__\", Function)) {}/*infloop*/for((yield new Exception()); (__count__-=<x><y/></x>); ( '' )((prototype = <><x><y/></x></>),  '' )) M:with({__iterator__: <><x><y/></x></>.watch(\"prop\", function(y) { yield y; (<y><z/></y>);; yield y; })})let __parent__;yield  /x/ ;\nexport *;\n");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("while((true) && 0){\t(true); }\nlet (prototype = prototype) { gc() const constructor; }/*for..in*//* nogeckoex bug 349964 */ for  each(var  /x/g .__proto__ in <y><z/></y>) if(@foo) {constructor =  '' , __iterator__ = <><x><y/></x></>;function (__count__, __parent__) { export __parent__; }  }");
tryItOut("__count__");
tryItOut("/*infloop*/do {prototype; } while(<x><y/></x> @ __proto__.prop = window);\nreturn;\n");
tryItOut("{__iterator__ = @foo;return; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {__proto__ =  \"\" ;/*for..in*/for(let [__parent__, __proto__] = new arguments(function(id) { return id }) in <><x><y/></x></>) {033 } } while([<><bbb xmlns:ccc=\"prop\"><ccc:eee></ccc:eee></bbb></>]);");
tryItOut("/*infloop*/for([] = (uneval(__parent__)); (__count__ = <x/>, __parent__); <><x><y/></x></> += 3/0) {/a/gi }");
tryItOut("/*for..in*/for(<x/>/*\n*/['constructor'] in @foo if (window)) with({constructor: [11,12,13,14].map}){}");
tryItOut("if((constructor = prop)) const prop; else  if (({prop: 1e4 })) const __noSuchMethod__ =  \"\" , __count__ = <><x><y/></x></>;");
tryItOut("/*infloop*/while([1,2,3,4].map){/*for..in*/for(var __count__ in ((({}).__lookupGetter__)([constructor])))function(y) { yield y; false;; yield y; }throw prop = function(id) { return id }; }");
tryItOut("if(<xxx>{__noSuchMethod__}</xxx>.(this)) {const prop; } else  if (<x><y/></x> = <y><z/></y> ^= prototype+=<x><y/></x>) return  /x/ ;");
tryItOut("return; const __iterator__;");
tryItOut("L:if((-0 / (+prototype.constructor getter= (new Function).call))) { if (<><x><y/></x></>\n < new (<x><y/></x>)(<><x><y/></x></>)) {break M;var prop; }} else yield;");
tryItOut("x::__parent__");
tryItOut("do __proto__, prototype; while(([11,12,13,14].filter) && 0);");
tryItOut("export prototype;\nexport *;\n");
tryItOut("/*infloop*/while(new ([1,2,3,4].slice)() || 1e4){{*::*;/*for..in*//* nogeckoex bug 349964 */M: for  each(const constructor in [,]) {} } }");
tryItOut("prop = constructor;/*infloop*/for((let (__proto__) window)++; __noSuchMethod__.__proto__ getter= [1,2,3,4].map; [,,]) return;");
tryItOut("/*for..in*/for(let <><x><y/></x></>.yield in (((@foo).watch)(([undefined]))))__parent__");
tryItOut("for(let y in []);");
tryItOut("yield <x/>;\nreturn;\n");
tryItOut("/*for..in*/for(const constructor = __count__ = (1.3 &= <y><z/></y>) in <x><y/></x> ^= null) {gc() const __parent__;{ } }");
tryItOut("if(this) {*; } else return [];");
tryItOut("let (__count__ = [,,], constructor) { __iterator__ }");
tryItOut("if(new new Function(false, ((uneval(__iterator__)))[[<><x><y/></x></> if (window)]])) {let (__proto__ = @foo) { let __proto__ = .2; } }");
tryItOut("for(let y in []);");
tryItOut("L:if(yield <><x><y/></x></> += (p={}, (p.z = <x><y/></x>)())) var __parent__, prototype = <y><z/></y>; else  if (function(q) { return q; }()((constructor.__lookupGetter__(\"__iterator__\").hasOwnProperty(\"__count__\")))) {with(<><x><y/></x></>){return *::*;yield; }let __count__ = window, __iterator__ = <><x><y/></x></>; }");
tryItOut("if(delete *::* <<= __count__) {yield <x><y/></x>;<><x><y/></x></>; }");
tryItOut("M:if(__iterator__ = <x><y/></x>.(__proto__) in null.eval(0/0)) {yield;return  '' ; } else  if ((4..unwatch(\"__noSuchMethod__\"))) {throw <x><y/></x>;{export *; } } else default: yield;yield;break; case 5: <x><y/></x>\t;;break;  /x/ ;break; case 1: {}yield <x><y/></x>;break; case true: __noSuchMethod__, prop = set;break; case 3: export *;break; case 7: (<x/>);break; break M;case 5.0000000000000000000000: break; let __parent__, __count__;yield;break; __proto__;break; ");
tryItOut("/*infloop*/for((uneval( /x/g  instanceof <x><y/></x> <= __iterator__ = <><x><y/></x></>)); (this.zzz.zzz); (-0.@foo.yoyo(([<x><y/></x>].sort(({}).hasOwnProperty))) / constructor.__noSuchMethod__ = <x><y/></x>.__proto__ = ({__iterator__: <><x><y/></x></>, __count__: prototype }))) {return; }");
tryItOut("if(<x><y/></x>.(<y><z/></y>)) yield; else yield @foo;with(<x><y/></x>){yield <y><z/></y>; } const __noSuchMethod__;");
tryItOut("/*infloop*/for((([<x><y/></x>]).eval([11,12,13,14].sort)); ({}) = 'fafafa'.replace(/a/g, ({}).__lookupGetter__);  /x/ ) switch(<x/>) { default: with({constructor: <><x><y/></x></>}){return;{} } }");
tryItOut("case <x/>.__lookupSetter__(\"prop\"): ");
tryItOut("if(null = eval(\"<x/>\", prototype).hasOwnProperty(\"__iterator__\")) {L: {\f(window);{} }undefined } else this;\n;\n\ndo {(__noSuchMethod__); } while(( /x/g ) && 0);");
tryItOut("/*infloop*/do /*infloop*/while(((uneval((<y><z/></y>.__iterator__)))))continue ; while((yield __count__ = true--));");
tryItOut("let (getter = <y><z/></y>) { export *; }");
tryItOut("while((Object(#1#, window)) && 0)gc");
tryItOut("L: yield prototype;");
tryItOut("continue ;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__count__ in ((function(y) { yield y; ; yield y; })(__proto__))){yield;function (prop, __noSuchMethod__)<y><z/></y> }");
tryItOut("L:with({prop: [({ __iterator__: __iterator__ })] = []})([1]);");
tryItOut("while(((({ [({ __proto__: __proto__ }), constructor]: ({ __iterator__: [], prop: [export function::prototype;, ({ constructor: prop }), , [, __count__]] }), __count__: ([] .@ <x><y/></x>)['__iterator__'] }) = (new -1()--))) && 0)L:if(prop != __proto__[-- /x/ ]) { if (delete <y><z/></y>\n) yield;} else break ;");
tryItOut("while((1.2e3) && 0){}");
tryItOut("{M:with(constructor .@ each)if(window) {gc()continue ; } else  if (<x/>) {let constructor; } else {export *;{} }export *; }");
tryItOut("L:if(case 9: let __parent__ = (function ([y]) { })(), __proto__;break; var __iterator__ = this;break; return;yieldbreak; default: prop = (eval(\"prototype = ({a1:1});\",  /x/g ))) export *; else [,];");
tryItOut("/*infloop*/while((1.2e3).call(<><x><y/></x></>, <><x><y/></x></>).propertyIsEnumerable(\"__proto__\"))return (<><x><y/></x></>.__defineGetter__(\"__iterator__\", <x><y/></x>)) .@x:: (typeof  /x/ );");
tryItOut("/*for..in*/for(__noSuchMethod__ = <x/>.watch(\"prop\", 'haha'.split) in  \"\" ) {var __noSuchMethod__, __count__; }");
tryItOut("throw StopIteration;");
tryItOut("M:if(<y><z/></y>\t) { if (3.141592653589793) @foo;} else {export *; }");
tryItOut("/*for..in*/L:for(var [constructor, ] in *) /*infloop*/\ffor(const prototype; 5.0000000000000000000000 * *; 0/0) ");
tryItOut("L: {; }");
tryItOut("let(__iterator__(@foo) = (function ([y]) { }(<x><y/></x>))) { let(prototype) { try { ; } catch(__iterator__) { ; } finally { continue L; } ");
tryItOut("if( \"\" [__noSuchMethod__] &= window()) {return; } else  if ((yield {throw null; })) do {continue M;(<><x><y/></x></>); } while((__count__ = __count__) && 0);");
tryItOut("export *;");
tryItOut("/*infloop*/L:while((__count__ = ({ get __parent__(__proto__, __proto__) { return <y><z/></y> } , __parent__ setter: new Function }))){if((+<x><y/></x>)) return; else let __count__ = null;/*for..in*/for(const [__parent__, __iterator__] =  /x/g  >>>=(eval).call(function ([y]) { }, prototype, -3/0) in <x/>) {({)} } }");
tryItOut("throw StopIteration;");
tryItOut("export __noSuchMethod__;\nreturn;\n");
tryItOut("{}\nconst __proto__ = <><x><y/></x></>, __noSuchMethod__ = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in constructor) gc()");
tryItOut("M:if([15,16,17,18].some([1,2,3,4].map, (~({__proto__ getter: ((-0)).watch })) for ((set)(<x><y/></x> -= *::*) in (this.zzz.zzz)))) { if (new (this.zzz.zzz)()) gc else yield <x/>;}");
tryItOut("/*infloop*/for([15,16,17,18].sort(eval, <><x><y/></x></>); (\nwindow); ({__proto__: <x><y/></x>, __iterator__: __count__ = *::* })) { }");
tryItOut("throw \tx::__count__;");
tryItOut("L:with(function () { return <x/> } ())/*for..in*/for(var [constructor, prop] = false in true) {yield;let setter, constructor; }");
tryItOut("/*for..in*/M:for(let [__count__, prop] = let = __iterator__ in <x/>) ");
tryItOut("L: M:with({__iterator__: <y><z/></y>})('haha'.split).apply\t");
tryItOut("/*infloop*/do export *;return [1,,]; while(/*\n*/[15,16,17,18].sort(eval, new (null)( \"\" ) ? #0=[1e-81] : new (({}).hasOwnProperty).call(<><x><y/></x></>, <\tx><y/></x>)));");
tryItOut("let(prop = ([(({}).__lookupGetter__).call(#1=[#1#], constructor|=<x><y/></x>) if ((-1))]), prop = __noSuchMethod__(\n@foo) = (__count__.__noSuchMethod__ = [ \"\" ])) { let constructor = (<x><y/></x>.(arguments)) && *::* for each (__iterator__ in <x><y/></x>), __parent__;");
tryItOut("/*for..in*/for(__iterator__ = [[1]] in *) { }");
tryItOut("with({__noSuchMethod__: undefined})let x::__noSuchMethod__ = *, constructor;");
tryItOut("/*infloop*/do while((__noSuchMethod__) && 0)gc() while(null.__parent__ = 1.3);");
tryItOut("\nlet ((function \t prop (constructor) {  } ).call = __noSuchMethod__ getter: (((Iterator(<x><y/></x>)) for \feach (__proto__ in *)))) { let (\r__iterator__) {  } }");
tryItOut("{const __count__, __parent__;continue ; }");
tryItOut("L: {(-3/0).apply }");
tryItOut("with({__count__: (++<y><z/></y>--)}){L: {continue L; } }");
tryItOut("/*infloop*/for(__parent__; @foo; undefined) {(null);function(y) { yield y; gc(); yield y; } }");
tryItOut("/*infloop*/for(const \t({ __count__: ({ __count__: ({ constructor: __iterator__, prototype(window): ({ __parent__: [, , __count__] }) }), prop: ({ __proto__: ({ constructor: ({ __noSuchMethod__: constructor, constructor: __proto__ }) }), __count__: prototype }) }) }) =  /x/g ; new new function  __noSuchMethod__ (prototype) { yield __proto__++ } (false |=  \"\" )(); (this.__defineGetter__(\"__count__\", function (__iterator__, __parent__) { return -0 } ))) {gc()gc() }");
tryItOut("let (__count__ = new ((yield null))().valueOf(\"number\"), constructor) { M:if(__proto__) { if (true) constructor = {};} else export *; }");
tryItOut("M:if() throw false; else  if ( '' ) {return; } else {continue ;yield; }");
tryItOut("if(<x><y/></x>.prop) { if ((-1 if (-3/0))) {const __count__ = 0x99, __count__;var __noSuchMethod__; } else {constructoryield  /x/g ; }}");
tryItOut("for(let y in [])\nreturn @foo.prop;");
tryItOut("do {/*infloop*/for(let prop; [11,12,13,14].sort; ({prototype setter: (1 for (x in [])) })) /*infloop*/for(let __iterator__; Iterator([,]); (this.zzz.zzz)) {const constructor, __noSuchMethod__; }if(window) export prop; else  if (prop.__parent__ = this) let __iterator__ = __noSuchMethod__, __iterator__; else export *; } while((({__noSuchMethod__: __noSuchMethod__ | undefined, prototype setter: <x/>\n })) && 0);");
tryItOut("/*for..in*/for(let [prop, prop] = function(q) { return q; }((p={}, (p.z = window)()), *) in {}) {/*for..in*/for(function::__proto__ =  /* Comment */function(id) { return id } ? prop : <><x><y/></x></> .. [1] in function::__count__ = this) {yield <y><z/></y>;gc() } }");
tryItOut("(<><x><y/></x></>);\f\nFunction\n");
tryItOut("switch((void function  __parent__ (function::__noSuchMethod__, __iterator__) { return (new (({}).__lookupGetter__)(<><x><y/></x><>, function(id) { return id })) } .eval((__proto__-=this.zzz.zzz)))) { default: break; case [prop if ( /x/ )]: if(('fafafa'.replace(/a/g, *::*))) { if (function(y) { yield y; let __parent__, __noSuchMethod__ = <><x><y/></x></>;; yield y; }.prop) {return; } else set = null;}break; case 3: with({__noSuchMethod__: __noSuchMethod__ = ({})});/*infloop*/while((-0))yield ;break;  }");
tryItOut("switch(undefined |= <y><z/></y>) { case __parent__ in <y><z/></y>: {gc() }break;  }");
tryItOut("M:if(eval(\"<x><y/></x>\", [,,])) gc()");
tryItOut("/*for..in*/for(const [__parent__, __parent__] = window in <\t><x><y/></x></>) { }");
tryItOut("/*for..in*/for(var [prop, __iterator__] = __count__.__count__ = 1.3 / false in __count__.valueOf(\"number\")) export prototype;");
tryItOut("M:switch(<x/>) { case 1: break; default:  }");
tryItOut("(p={}, (p.z = ({prop:  /x/g }))())");
tryItOut("let (__proto__ = (({}).hasOwnProperty).call(*, @foo\n), __count__) { L:if(<><x><y/></x></> -= function::set.yoyo( for (__parent__ in null).(*)).watch(\"__noSuchMethod__\", )) { if (__noSuchMethod__)  get __count__(__iterator__) { return <x/> }  else {const __iterator__ = *; }} }\n{}");
tryItOut("while((([* for (\f0/0 in this)])) && 0)export *;");
tryItOut("if(\n<><x><y/></x></> !=  '' ) ");
tryItOut("/*infloop*/for(__parent__; (-1).__lookupGetter__(\"__count__\"); null) {return;return; }");
tryItOut("L:if(new #1=[#1#]) {yield; } else Math.pow");
tryItOut("with({}) { ({ __noSuchMethod__: __count__, __noSuchMethod__: constructor }) = prop; } ");
tryItOut("/*for..in*/L:for(let constructor =  /x/g  in <x><y/></x>) {return; }");
tryItOut("/*for..in*/for(let __parent__ in [z1]) {return;false; }");
tryItOut("if( /* Comment */true) {gc() } else  if (0.1++) {gc() }");
tryItOut("let (__parent__) { export __noSuchMethod__\ndo return *; while((new [z1,,]([11,12,13,14].filter, 033)) && 0); }");
tryItOut("/*infloop*/for( /x/ ; <x/>; __iterator__) {break ;var undefined, __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((p={}, (p.z = <x><y/></x>)()) in <><x><y/></x></>.*.isPrototypeOf\f(((uneval(prop.unwatch(\"__parent__\")))))) {var constructor =  /x/g , constructorwhile((5.0000000000000000000000) && 0)yield window; }");
tryItOut("if(<x><y/></x>) {yield;return <><x><y/></x></>; } else {export constructor; }\nyield <y><z/></y>;\n\n\n");
tryItOut("with({__count__: ( '' .__parent__ = {})}){yield;; }");
tryItOut("{let __proto__, __proto__ = [z1]; }");
tryItOut("/*infloop*/for(const ({ __iterator__: [constructor, ({ __noSuchMethod__: __noSuchMethod__ })] }) = __count__; [arguments] || (new (undefined)()); (new ((yield <x/>))()) == <x><y/></x>['__parent__']%=( \"\" )()) {with({__iterator__: [,,]})gc()/*infloop*/for(var __count__; false; <x><y/></x\t>) {{} } }");
tryItOut("");
tryItOut("(([<x><y/></x> > <x\n><y/></x>].some(<x/>)))(__noSuchMethod__)");
tryItOut("/*infloop*/while(__parent__.hasOwnProperty(\"__noSuchMethod__\")(prop =  { gc() } , <x><y/></x>))yield;");
tryItOut("{L: {yield;([1]);\f }L: throw  \"\" ; }");
tryItOut("/*for..in*/for(let __noSuchMethod__.prototype in (([1,2,3,4].slice)(('fafafa'.replace(/a/g, 'haha'.split)).__iterator__)))break L;");
tryItOut("/*infloop*/M:for(var ({ constructor: __iterator__, __parent__: __iterator__ }) = <y><z/></y> .@*:: <x/>; new (<><x><y/></x></>)(<x><y/></x>, 1e81); arguments.watch(\"__iterator__\", -0)) yield continue ;;");
tryItOut("do {L:do if(<><x><y/></x></>) { if ( /x/ ) {return <x><y/></x>;new Function }} else yield [[]]; while((new Error(0x99, this).isPrototypeOf((prototype = 5.0000000000000000000000.__noSuchMethod__))) && 0); } while((*::*.watch(\"__proto__\", (<><x><y/></x></>).watch).propertyIsEnumerable(\"constructor\")) && 0);");
tryItOut("/*for..in*/M:for(prop = function::__count__.prop setter= [,,z1] in <><x><y/></x></>) {window;gc() }");
tryItOut("switch(__noSuchMethod__) { default: break; case 5: function(q) { return q; }break; [1,2,3,4].map }");
tryItOut("throw constructor;");
tryItOut("/*infloop*/for(const [[, , , ], , , __count__] = 4..__count__ = <x/>; 'fafafa'.replace(/a/g, function  __noSuchMethod__ () { yield @foo } ).eval(yield *); __count__.(window)) prop = <y><z/></y>, __count__;");
tryItOut("constructor = __parent__;");
tryItOut("/*infloop*/L:for(const __iterator__ = undefined; this; <><x><y/></x></>) ({ __count__: __count__, __count__: prop })");
tryItOut("/*infloop*/do {gc() } while(__noSuchMethod__--);");
tryItOut("/*for..in*/L:for(var __parent__ = (__parent__ = __count__) in (p={}, (p.z = ({a2:z2}))())) {var __count__, prop;with(function(id) { return id }.__parent__)/*for..in*/for(__count__ in (((window).watch)(1.2e3)))gc() }");
tryItOut("export *;");
tryItOut("/*for..in*/__count__\n");
tryItOut("throw __parent__;");
tryItOut("/*for..in*/for(const constructor = __parent__.__parent__ getter= (new Function(\"yield <y><z/></y>;\")) in @foo) ");
tryItOut("let(({ prop: __count__, prop: __parent__ }), __proto__) { for(let y in [5,6,7,8]) yield __iterator__;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*for..in*/for(const [__parent__, prop] = true in  /x/g ) {let __count__ = <><x><y/></x></>, __iterator__ = *;export __count__; }");
tryItOut("gc()");
tryItOut("with(true.__defineSetter__(\"__parent__\", ( /x/g ).__defineSetter__) , null.constructor){break L;return; }");
tryItOut("do {return; } while((true) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in <y><z/></y>) {*::* }");
tryItOut("__noSuchMethod__.__iterator__ = __noSuchMethod__;");
tryItOut("M:with({__parent__: -(function::__iterator__.__noSuchMethod__ = <y><z/></y>)})'haha'.split");
tryItOut("this.zzz.zzz;");
tryItOut("return 0\n/*infloop*/L:do {#1#;; } while(constructor.__proto__);");
tryItOut("if(__iterator__ = 5.0000000000000000000000) { if (this.__defineGetter__(\"__count__\", [1,2,3,4].slice)) break M;} else /*infloop*/for(<y><z/></y>; 4.; <><x><y/></x></>) continue M;");
tryItOut("let (__parent__ = <><x><y/></x></>, __proto__ = <x><y/></x>) { /*for..in*/M:for([prototype, __parent__] = 3.141592653589793 in this) {const __noSuchMethod__, __noSuchMethod__ = <x><y/></x>; } }");
tryItOut("with(new setter)return;");
tryItOut("/*infloop*/for(var prop; (p={}, (p.z =  /x/ )()) ^ <\fx><y/></x> ? <x/> : <x><y/></x>; <><bbb xmlns:ccc=\"__noSuchMethod__ = false\"><ccc:eee></ccc:eee></bbb></>) (<x/>);");
tryItOut("if( '' ) ");
tryItOut("let (__iterator__, constructor) { ({}).__lookupGetter__ }");
tryItOut("/*infloop*/for(let prototype.prop = (); void <><x><y/></x></>; yield prototype[ '' ]) ;");
tryItOut("L:switch(__count__) { default: [z1,,]case <bbb xmlns:ccc=\"yield <y><z/></y>\"><ccc:eee></ccc:eee></bbb>: case typeof <x><y/></x>.valueOf(\"number\"): case *.__lookupGetter__(\"get\"): return;break;  }");
tryItOut("with((prototype % [1,2,3,4].map)){__count__; }");
tryItOut("/*infloop*/do /*for..in*/L:for(__proto__ = #2=<y><z/></y> in <x><y/></x>) continue ; while((__noSuchMethod__.prototype = (uneval(window)) >> ( /x/g )[ /x/ ]));");
tryItOut("[1,2,3,4].map");
tryItOut("while((this.__defineGetter__(\"__count__\", /a/gi) |= <y><z/></y>) && 0)__proto__ = <x><y/></x>;");
tryItOut("/*infloop*/for(var [({ prototype: x::__proto__, __noSuchMethod__: constructor }), ({ prototype: __count__, __noSuchMethod__: constructor })] = constructor.constructor setter= *::*; --false; __iterator__ = __iterator__.@*) {throw 4.; }");
tryItOut("M:with({__proto__: __parent__ = {}}){(prop); }");
tryItOut("{/*infloop*/M:do <y><z/></y>; while(__count__); }");
tryItOut("switch(*::*) { case 0:  }");
tryItOut("return 'fafafa'.replace(/a/g, gc);");
tryItOut("with({__noSuchMethod__: (uneval((constructor.prototype setter= [1,2,3,4].map)))}){gc()/*infloop*/do let __noSuchMethod__, prop\n while((++__parent__\f -  /x/g )); }");
tryItOut("/*infloop*/M:for(const __parent__; <><x><y/></x></>; undefined) const __proto__, prop =  \"\" ;");
tryItOut("with({__iterator__: (prototype.__count__+=(yield;))})return new <><x><y/></x></>(__iterator__, constructor);");
tryItOut("switch(*) { default: yield; }");
tryItOut("yield;");
tryItOut("with({}) let(({ (\n(false <<  /x/ )): __count__, __iterator__: [[prop, , , , prototype], , __count__, ] }), (null)(prop) = <><x><y/></x></>) ((function(){let(({ __parent__: [], __noSuchMethod__: ({ __noSuchMethod__: constructor }) }), prototype) { with({}) prop = __noSuchMethod__;})());");
tryItOut("with({}) { let(__parent__) { return; } ");
tryItOut("eval");
