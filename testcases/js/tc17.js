tryItOut("/*for..in*/M:for(var [__count__, prop] = (0.__noSuchMethod__ =  /x/ ) in <x><y/></x> & prototype) {; }");
tryItOut("yield prototype = prop;");
tryItOut("if(prop = (*.valueOf(\"number\"))) try { break ;\t } finally { 5.0000000000000000000000; }  else  if (([1,,] for each (prop in ({a2:z2})))) yield; else ({});");
tryItOut("while((false) && 0)const __noSuchMethod__, constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in window) {/*infloop*/for(const prop = __iterator__.prototype; __noSuchMethod__ >>= <><x><y/></x></>; export constructor) L:while((@foo) && 0)throw *::*; }");
tryItOut("this.zzz.zzz;");
tryItOut("L:if(0.1) yield function ([y]) { }; else const __proto__, constructor =  '' ;");
tryItOut("while(((uneval(@foo))) && 0)return\nexport *;");
tryItOut("const constructor = prototype, __iterator__ =  /x/ ;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var function::__proto__ in (((1 for (x in [])))(#1=[#1#]\n = (function::__noSuchMethod__.(prop)))))function\f  __noSuchMethod__ (prototype, __proto__)*::*");
tryItOut("/*for..in*/for(const prototype setter: (__parent__).call = 5.0000000000000000000000 in window) {gcreturn; }");
tryItOut("M:while(((([15,16,17,18].filter(<x><y/></x>, undefined.__lookupGetter__(\"__proto__\")))\n)) && 0){yield;let (__proto__, __count__ = <><x><y/></x></>) { continue ; } }");
tryItOut("L: yield;");
tryItOut("yield __parent__\n");
tryItOut("/*infloop*/for(let (__noSuchMethod__) <y><z/></y>; <x/>; [15,16,17,18].sort(<x><y/></x>, ([<x><y/></x> for (__iterator__ in __proto__)]))) {export __iterator__; }");
tryItOut("M:if(5.0000000000000000000000) { if (\nyield (gc)(*::*, @foo)) return [1]; else return window.throw(*::*);}");
tryItOut("with({__count__: (<x/>.unwatch(\"__proto__\")).hasOwnProperty(\"__parent__\")}){let __parent__ =  /x/g , false = false; const constructor; }");
tryItOut("/*for..in*/for(var __iterator__ in (((* ? <y><z/></y> : this))((__noSuchMethod__.(<x/>)))))prop");
tryItOut("/*infloop*/L:do {export *; } while(new (((<x/>)[<x><y/></x>]))(let (__noSuchMethod__ = prop, __parent__) <><x><y/></x></>));");
tryItOut("/*infloop*/do {/*infloop*/for(const prop = <y><z/></y>; [1,,]; [,,]) __iterator__, prop; } while(window);");
tryItOut("with({}) { prop = __parent__; } ");
tryItOut("M:if( ''  & <x/>) let __count__ =  /x/g , __proto__; else  if (prop = prop) {break ;function::prop; }");
tryItOut("/*infloop*/L:for(__count__ = @foo; window; -1) {continue ;yield; }");
tryItOut("export *;while((<><x><y/></x></>) && 0){}\n");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*/for(__parent__ = #0=({prop: #2=[false].watch(\"prototype\", (1 for (x in [])))}) in ((<x><y/></x>.__count__ = [[]])[(@foo.__count__)])[({ set __proto__ __noSuchMethod__ (__count__, __noSuchMethod__) { return __iterator__ = constructor } , __count__ setter: (1 for (x in [])) })](0.1, arguments)) if(prop.valueOf(\"number\")) {return <x><y/></x>;eval } else  if (1e-81 in  /x/ ) {var __count__; } else {break M; }");
tryItOut("if((p={}, (p.z = <><x><y/></x></>)())) {window; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((function  * (x::__count__, __count__) { yield window } )( '' )))constructor: ({})");
tryItOut("{}\n");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("L: {return this; }");
tryItOut("/*infloop*/while((yield <x/>)){gc(){/*infloop*/for(let __count__ = <><x><y/></x></>; <><x><y/></x></>; <x><y/></x>) ;gc() } }");
tryItOut("with({}) { export *; } ");
tryItOut("return delete (new (({a1:1}))(0.1)\n);");
tryItOut("let (prop = ((constructor)-=(p={}, (p.z = .2.__defineGetter__(\"__noSuchMethod__\",  \"\" ))()))) { /*infloop*/L:do {var __noSuchMethod__, __count__ = __iterator__;if(function ([y]) { }) <{__iterator__}> </{__iterator__}> else  if (yield constructor;) {__iterator__, constructor = [1,,];; } else {([,]); } } while(new Function()); }");
tryItOut("/*for..in*/for(var __count__ in eval(\"( \\\"\\\" ).call\", [11,12,13,14].filter).__defineSetter__(\"__count__\", ({}).__lookupGetter__)) /*for..in*/M:for(let __noSuchMethod__ in window) eval");
tryItOut("if((const __count__)) return; else let  = 1e4;");
tryItOut("L:with((@foo))const prototype;");
tryItOut("yield <><x><y/></x></>\n");
tryItOut("M:\rdo gc() while(((<><x><y/></x></> << 3)) && 0);");
tryItOut("/*infloop*/while(__count__)eval }(<x><y/></x>);");
tryItOut("return  \"\" ");
tryItOut("/*infloop*/do {let __parent__, __count__; } while(((uneval(__iterator__)).hasOwnProperty(\"function::__iterator__\")) <<= __count__);");
tryItOut("L:while(((-0) &&  /x/g ) && 0)return try { return <y><z/></y>; } finally { return *::*; } ;");
tryItOut("M:if((prop)) {yield;const __count__; } else {{} }");
tryItOut("/*infloop*/while(//h\n__noSuchMethod__)function::prototype;\n__iterator__ = #1#, x::prop;\n");
tryItOut("switch(__proto__) { case 5.0000000000000000000000.__noSuchMethod__: default: export *;break; break;  }");
tryItOut("const  = __proto__;");
tryItOut("with({__iterator__:  /x/ .eval(<x><y/></x>)}){}");
tryItOut("/*infloop*/M:while( /x/ ){return __noSuchMethod__; }");
tryItOut("/*infloop*/for((([1,,])(<x><y/></x>)); ( /* Comment */({a2:z2})); undefined) {L:with((__proto__|=*) /= ([1,2,3,4].map)(arguments))/*for..in*//* nogeckoex bug 349964 */ for  each((<x><y/></x>)(true) in 1e81) /a/gi }");
tryItOut("while((new (undefined.__proto__ = prop)) && 0)with({}) { let(({ __noSuchMethod__: prop, prototype: __parent__ }) = [033 for (constructor in  /x/g )], __noSuchMethod__ = 5.0000000000000000000000) { return; } ");
tryItOut("if([, , yyy] = __parent__) throw <x/>; const __iterator__; else  if (this.zzz.zzz) {if((Number((-0), <x><y/></x>))) { if ((<x><y/></x>) * <x><y/></x>.__parent__) {{}const constructor, prop; }} else {let constructor = this;throw false; }export *; } else break L;");
tryItOut("with({__count__: true})let constructor = <><x><y/></x></>, __parent__;");
tryItOut("let(__noSuchMethod__ = __iterator__) ((function(){__iterator__ = __iterator__;})());");
tryItOut("M:if((delete [<><x><y/></x></>])) L:if(( '' ).call()) {return <x><y/></x>; } else  if (this.prototype) {yield arguments;export __proto__; } else  if (<x><y/></x><x><y/></x><x><y/></x>.(( /* Comment */null))\n) {gc()/*infloop*/L:while(eval(\"H\", <x><y/></x>))({a2:z2}); } else /*infloop*/do yield; while(*::*);");
tryItOut("M:if((__iterator__(<><x><y/></x></>)[__iterator__]))  else  if (( /* Comment */__noSuchMethod__.prop getter= [1,2,3,4].map)) break L; else (<><x><y/></x></>);");
tryItOut("with({}) { return __noSuchMethod__(constructor) = ([1,2,3,4].slice(({a2:z2}), <x><y/></x>)); } ");
tryItOut("const __proto__, __iterator__;");
tryItOut("if(<x><y/></x> !=  ''  % <x/>--.*) {(<x><y/></x>); \"\"  } else  if ((({ __proto__: [, prototype, __proto__, __iterator__] }) = <><x><y/></x></>--).hasOwnProperty(\"__iterator__\")) {return; }");
tryItOut("prop = false, __count__ = 1.2e3\n const __iterator__;");
tryItOut("switch((window @  '' )/) { case 3: break; default: return <x><y/></x>;break;  }");
tryItOut("");
tryItOut("var constructor = , __noSuchMethod__ = __noSuchMethod__; const prototype;");
tryItOut("if(([1,2,3,4].slice)(//h\n__parent__.constructor getter= Math.sin ? #1=[#1#] : (window.__defineGetter__(\"__count__\", Math.pow)))) {switch(*) { case 5: break;  }{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in  /x/ ) {export *;var prop = @foo; }");
tryItOut("/*infloop*/for(var __proto__ = <y><z/></y>;  \"\" .__iterator__ = <><x><y/></x></>; this.__defineGetter__(\"__parent__\", [1,2,3,4].slice) === eval(\"let __parent__ = [,,z1], constructor = *;\", <x><y/></x>)) /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in __count__) Math.sin");
tryItOut(" \"\" ;break M;");
tryItOut("{;/*for..in*/M:for(let __proto__ in ((eval)(new ( /x/ )(<x><y/></x>)))){<x><y/></x>; } }");
tryItOut("/*infloop*/for(const __proto__ = __proto__; false; *::*) this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in __count__) {__iterator__yield; }");
tryItOut("let (__iterator__, ({ __noSuchMethod__: prop, __count__: __count__ })) { export *; }");
tryItOut("/*infloop*/for(const __count__;  ''  instanceof <><x><y/></x></>; __parent__ = <><x><y/></x></> % prototype.prop = this.__defineSetter__(\"__noSuchMethod__\", Math.pow)) yield;");
tryItOut("if(([1,2,3,4].map)(5.0000000000000000000000, <><x><y/></x></>).__lookupSetter__(\"__noSuchMethod__\")) {{continue ; }<y><z/></y>; } else const prototype, __iterator__ = <><x><y/></x></>;");
tryItOut("break ;");
tryItOut("/*infloop*/M:for(constructor =  /x/ ; default: break; case 9: <y><z/></y>;break; ; [1,,]) {(*::*);__iterator__ = <x><y/></x>; }");
tryItOut("/*infloop*/for(constructor; (0.1.hasOwnProperty(\"__noSuchMethod__\")) = (__proto__.((this ? this : function ([y]) { }))); let (constructor = <x><y/></x>.__lookupSetter__(\"prop\").valueOf(\"number\")) <y><z/></y>) if(prop in *::*.__proto__ = null) { if ((({}).__lookupGetter__)) {continue ; }} else ;");
tryItOut("if( /x/ ) {for(let y in []); }");
tryItOut("M:if(new (function(q) { return q; })(window)) {return; } else  if (__noSuchMethod__.watch(\"__iterator__\", /a/gi)) export *; else prototype = [1,,];");
tryItOut("{continue L;{} }\n(window);\n");
tryItOut("/*for..in*/for(const [__parent__, __proto__] = undefined in __proto__: <><x><y/></x></>) export __count__;");
tryItOut("export __iterator__;");
tryItOut("throw <x/>\n\nyield <x><y/></x>;");
tryItOut(";");
tryItOut("break ;");
tryItOut("{prop = <><x><y/></x></>;const __proto__; }");
tryItOut("if(new function  __parent__ () { return <y><z/></y> } ()) {export *; } else {yield undefined;{} }");
tryItOut("switch(.2) { default: break;  }");
tryItOut("return <x><y/></x>; const __iterator__;");
tryItOut("/*for..in*/for(prop in ({constructor:  '' })) return;");
tryItOut("/*infloop*/L:for(({__iterator__: (({ __noSuchMethod__: prop }) = prototype), __proto__ setter: eval }); prototype.__proto__ setter= typeof ( /x/g .watch(\"constructor\", (undefined).__defineSetter__)); ({prop getter: gc, __iterator__ getter: (3/0++).__defineSetter__ })) M:if((p={}, (p.z = <x><y/></x>)())) { if (yield <x><y/></x>.__lookupSetter__(\"constructor\")) {continue ;export *; }} else {continue M; }");
tryItOut("/*infloop*/while(__noSuchMethod__ = #1#.__defineGetter__(\"__iterator__\", (new Function).apply)){var __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor in prototype) <x><y/></x>;");
tryItOut("let (constructor = (++[__parent__.__count__ = gc()])) { for(let y in []); }");
tryItOut("/*infloop*/L:do {<><x><y/></x></>;/*for..in*/for(let prop in ((Function)(false))){return #1=[#1#]; }\f } while(0x99.eval(this) == this);");
tryItOut("if(({ get __parent__\t(try { return *; } finally { return *::*; } ) { yield __proto__ = #1=[#1#] }  })) {yield;yield; } else  if (([11,12,13,14].some)) {export <><x><y/></x></>: true;*::*; }");
tryItOut("if(null) { if ([11,12,13,14].map) yield;} else {__parent__, let; }");
tryItOut("yield ('fafafa'.replace(/a/g, (1 for (x in []))).__parent__);");
tryItOut("if(constructor) {/*for..in*//* nogeckoex bug 349964 */\t for  each(let __parent__.__iterator__ in *::*) { ''  } }");
tryItOut("switch(return) { default: break; [1,2,3,4].slice }");
tryItOut("with({}) { with({}) { return; }  } ");
tryItOut("  = __parent__;");
tryItOut("with(<y><z/></y> ||  /x/g ){ }");
tryItOut("if((yield <><x><y/></x></>.propertyIsEnumerable(\"prototype\"))(constructor = __parent__, __count__ setter: Math.sin)) { if ((__noSuchMethod__ = -3/0.valueOf(\"number\"))) {if((p={}, (p.z = *::*)())) switch(undefined) { default:  } }} else {return; }");
tryItOut("{return <x><y/></x>; }");
tryItOut("/*infloop*/for(let __count__; <xxx>{prop}</xxx>.(eval(\"null\", __parent__)); (Math.pow).call) {{let __parent__, prototype = false; }(this); }");
tryItOut("__iterator__ = <><x><y/></x></>, prop = __parent__;");
tryItOut("<x><y/></x>;");
tryItOut("L: switch(constructor.(-1)) { case (({}).hasOwnProperty): break; (<x><y/></x>);case String(*):  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype(*) in [[1]]) \nwhile((5.0000000000000000000000 & <y><z/></y>) && 0){throw @foo; }");
tryItOut("M:if(let (__parent__ = null) <x/>) {} else  if ((())[constructor = <x><y/></x>]) {yield <><x><y/></\tx></>;{} }");
tryItOut("let (({ __count__: ({ __iterator__: ({ prop: [[[], , __noSuchMethod__, __parent__], __iterator__, [, , , ]] }) }), prototype: __parent__ }) = ([15,16,17,18].sort(new Function, (#1#.eval(window))).__lookupGetter__(\"__count__\").throw(__proto__.constructor%=({prop: (__proto__--) })))[new (({}).__lookupGetter__)()], __count__ = ([11,12,13,14].map.valueOf(\"number\") :: new (({}).hasOwnProperty)(<x><y/></x>, .2))) { while((__parent__ = @foo) && 0){return;const __count__, yield; } }");
tryItOut("for(let y in [5,6,7,8]) __parent__ = prototype;");
tryItOut("/*infloop*/M:while(__proto__|=__iterator__ >> <y><z/></y>)return 0.1");
tryItOut("/*infloop*/for(var constructor; __iterator__ =  '' .propertyIsEnumerable(\"prototype\"); ) {/*infloop*/L:for(var prop; __noSuchMethod__.__count__ = *::*; this >>= constructor) undefined; }");
tryItOut("/*for..in*/for(const [constructor, __proto__] = false ^  /x/g .__parent__ in (__iterator__ = #1#)) try { export *; } catch(prototype//h\n) { export *; } function(__proto__, prop)prototype");
tryItOut("switch(let (constructor, __iterator__ = <><x><y/></x></>) constructor) { case (__count__.__proto__ getter= function(q) { return q; }): /*infloop*/for(([(<x><y/></x> .@x:: <y><z/></y>)].map(function (<x><y/></x>)this)); __parent__ ..  '' ; <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {__count__;; }break; default: return <x/>;case 6: Math.sin }/*for..in*/yyy");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <y><z/></y> ? @foo : 0.1) {var __iterator__ =  \"\" , __iterator__;{} }");
tryItOut("if(({__count__: prop, constructor: ({a2:z2}) })) {throw undefined; }");
tryItOut("if((--<y><z/></y>)) {export *;{} }");
tryItOut("/*for..in*/for(var constructor = new (this.__defineSetter__(\"x::prototype\", (Math.sin).apply))((uneval(__count__ = <x/>))) in delete __proto__) new Function");
tryItOut("with({prototype: @foo.__lookupSetter__(\f\"__parent__\")}){export *;return; }");
tryItOut("do {{/*infloop*/M:do throw window; while(function ([y]) { });export *; }/*infloop*/for((false.__lookupSetter__(\"constructor\")); [window].sort(function  __noSuchMethod__ () { return  /x/g  } ); /a/gi(#1#, @foo)) {__proto__, __iterator__ = <><x><y/></x></>; } } while((eval(\"gc()\", __parent__ = prototype) ? (new (function  __count__ (__iterator__, __noSuchMethod__) { yield 3.141592653589793 } )()) : new (({}).hasOwnProperty)(<><x><y/></x></>, @foo)) && 0);");
tryItOut("constructor = *, __count__;if((this.*)) {const __parent__, __count__ = prop;(new Function(\"const __noSuchMethod__ = this;\")) } else {export *; }");
tryItOut("let (__iterator__, __parent__ = [[,,]].sort((new Function(\"let __noSuchMethod__ = 3, __proto__ = <><x><y/></x></>;\")))) { yield __parent__(this,  \"\" ); }");
tryItOut("");
tryItOut("__count__ = @foo; const __iterator__;");
tryItOut("if(<y><z/></y> > this) return;");
tryItOut("if(this) export __proto__; else {throw <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var prototype.prototype in <y><z/></y> :: (-1)) __proto__ = ({});");
tryItOut("switch(((p={}, (p.z = 1e81)()))) { default: break; break; export case 2:  }");
tryItOut("/*for..in*/M:for(let constructor in this) ( '' );");
tryItOut("/*for..in*/for(let [@foo, constructor] = (({__noSuchMethod__: (<><x><y/></x></>)\f[ /x/g ]}) && ((uneval(__proto__.__defineSetter__(\"__proto__\", (<x/>).__defineSetter__))))) in (__noSuchMethod__.__parent__ = ([__parent__|=<y><z/></y>]))) /*infloop*/do /*infloop*/for(true; function(id) { return id }; window) (window); while(__count__);");
tryItOut("/*for..in*/for(let __count__ = ([ ''  ^= <y><z/></y>].yoyo('fafafa'.replace(/a/g, ({}).__lookupGetter__))) in ({__parent__: undefined})) this;");
tryItOut("if((let (constructor, __iterator__ = *::*.@*) new (window)())) {throw  '' ;{} }");
tryItOut("/*infloop*/M:do break ; while(<y><z/></y>);");
tryItOut("const prototype, __count__;");
tryItOut("let(constructor = __proto__) { ;");
tryItOut("gc()");
tryItOut("const __parent__ = <x/>, prototype;");
tryItOut("L:if(@foo) { if (<x/>) let constructor, __iterator__ = <><x><y/></x></>;} else {return <x><y/></x>; }");
tryItOut("gc()");
tryItOut("this.zzz.zzz;");
tryItOut("switch((gc())) {  }");
tryItOut("if(([<><x><y/></x></>++ for ([prop] in [11,12,13,14].map) if ( \"\" )])) { if ((this.__defineSetter__(\"__count__\", function () { yield <x><y/></x> } ) instanceof export __parent__\t)) constructor = __count__; else M:if((eval)()) { if ((<><x><y/></x></> %= __count__)) {export *;export __iterator__; }} else {return *;continue ; }}");
tryItOut("/*for..in*/for(__count__ = [undefined] in <x/>) export *\n");
tryItOut("with((new (this)().hasOwnProperty(\"prototype\"))){/*infloop*/do var prop; while((-1));yield;{<x/>* } }");
tryItOut("let (({ constructor: __count__ }), __noSuchMethod__ = (new (<x><y/></x>)(<x/> >= .2,  \"\" ))) { throw <x/> }");
tryItOut(";\n\n");
tryItOut("/*infloop*/for(const __parent__; ++each.*; ((p={}, (p.z = (<x><y/></x>.(*)))()))) /*for..in*/for(var [__parent__, try { let(__parent__ = <><x><y/></x></>, __parent__) ((function(){export prototype;})()); } catch(function::prototype if ( /x/ .yoyo(\f<x><y/></x>) >>> __parent__.__lookupSetter__(\"__noSuchMethod__\") / <x><y/></x>.eval(1.3))) { throw StopIteration; } finally { constructor = __count__; } ] = [__iterator__].sort(/a/gi) in ('fafafa'.replace(/a/g, (new Function(\"return __proto__;\"))))) {return *::*;yield; }");
tryItOut("switch((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.hasOwnProperty(\"__noSuchMethod__\") && __count__ = (-1))) { case 7: break; case ({ set __iterator__ __count__ ()#0=[new  ''  .@ @foo()] }): case 4: break; const constructor, __proto__ = undefined;default: ( /x/g );break; break;  }");
tryItOut("while(( '' ) && 0)/*for..in*/M:for(var prototype in (((function(y) { yield y; while((<x><y/></x>) && 0){(-0); }; yield y; }).call)(<xxx>{prop}</xxx>))){export *; }");
tryItOut("/*infloop*/for(const __noSuchMethod__ = __noSuchMethod__; *; <y><z/></y>) default: {default: prop, __count__ =  /x/ ; }break; case 5: break; ");
tryItOut("try { yield (new ((((function '()__parent__)<x/>).call(constructor, this)))(((<x><y/></x>).watch)(), <><x><y/></x></>)) %= *::*.@* >>= (p={}, (p.z = window)()); } finally { throw StopIteration; } ");
tryItOut("/*for..in*/for(__proto__ = <x/> in null) {throw 4.; }");
tryItOut("{throw [1]; }");
tryItOut("/*infloop*/while((p={}, (p.z = window)())){throw <x/>; }");
tryItOut("<x><y/></x>;");
tryItOut("{{{}gc() } const __iterator__;while((0.1) && 0)(<y><z/></y>); }");
tryItOut("/*for..in*/for(const __count__ = undefined in <x><y/></x>) return;");
tryItOut("L: {if(@foo) { if ((*::*(5.0000000000000000000000))) {yield <y><z/></y>; } else var prototype = <x><y/></x>;} }");
tryItOut("/*for..in*/for(constructor = #3={a:#3#} in eval(\"return;\", __parent__.__noSuchMethod__ = @foo)) while((@foo) && 0)let __noSuchMethod__, prototype;");
tryItOut("/*for..in*/for(const __proto__ in *::*) {break M;export prop; }");
tryItOut("if(<><x><y/></x></> ? <><x><y/></x></> :  /x/g ) { if (yield  /x/ ) { /x/g ;let prop; }} else (window);");
tryItOut("return new Exception(false, (function ([y]) { })())\n;");
tryItOut("__iterator__ = __proto__;");
tryItOut("do {if(5.0000000000000000000000) {export __parent__; } else yield;with({__iterator__: *}){const __count__ = <y><z/></y>;((__count__).apply); } } while(((export *.__defineSetter__(\"__iterator__\", function  prototype ()yyy))) && 0);");
tryItOut("/*infloop*/L:for(var [__iterator__, __iterator__, ({ \tprototype: ({ __proto__: ({ __iterator__: ({ __count__: __parent__, __proto__: __count__ }) }) }), __iterator__: __proto__ })] = @foo; (new RangeError(#1=[#1#], true)).yoyo((uneval(1e81)))\r; (<x><y/></x>.unwatch(\"prop\"))) {{{\f} }M:switch(<x><y/></x>.__defineGetter__(\"set\", function(q) { return q; })) { case 5: gc() } }");
tryItOut("/*infloop*/while( /* Comment */let (__iterator__ = [[1]]) <x><y/></x>){yield window;(<x><y/></x>); }");
tryItOut("");
tryItOut("let constructor;");
tryItOut("export *;");
tryItOut("{return 3.141592653589793; }");
tryItOut("M:if(this.zzz.zzz) {yield .2;export *; } else  if (0.1.watch(\"prototype\", (({}).hasOwnProperty).call) === this.__defineSetter__(\"prop\", ({}).hasOwnProperty)) { } else M:if( '' ) { if (<x><y/></x>) __parent__ = 033;} else let __proto__ = window\n");
tryItOut("switch(arguments) { default: break; case 0: case 3: break; case 4:  }");
tryItOut("/*for..in*/for([__parent__, prop] = <xxx>{__count__}</xxx> in *::*) {/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in window) return; }");
tryItOut("if((#3={a:#3#} |= __iterator__ , this)) {if(null != [,,]) { } else  if (<y><z/></y>.yoyo(true))  } else  if (new ((*).watch)(null, window)) switch(@foo) { case 7: ([z1]);\n } else {gc() }");
tryItOut("if(null) { if (*::*) {__parent__ = ({}); }} else {gc() }");
tryItOut("if(<x/>) { if (__count__) prototype; else {{}<><x><y/></x></>; }}");
tryItOut("/*infloop*/do {export *; } while(let (set = <><x><y/></x></>\f.@foo) (function(q) { return q; }).call( ''  >>>= '' , ));");
tryItOut("if((__noSuchMethod__-=<><x><y/></x></>)) { if (__parent__) let prop = <x><y/></x>; else break ;}");
tryItOut("/*infloop*/for(<//h\n><x><y/></x></>; \n<><x><y/></x></>; <y><z/></y>.__proto__) {gc() }");
tryItOut("if(null) { if (this) {export *; }} else var __parent__ = __iterator__;");
tryItOut("/*infloop*/for(var prototype; 1e81; false) yield;/*infloop*/L:while(((this.__defineSetter__(\"__proto__\", new Function)).watch(\"__iterator__\", Function)))L:if((delete  '' )) { if (((yield <><x><y/></x></> ? window : <y><z/></y>))) gc()} else {{}yield; }");
tryItOut("L:do /*for..in*/for(prop =  /x/g  in \f(__parent__.(false))) {gc()let __noSuchMethod__; } while(((prop.prototype)) && 0);");
tryItOut("{(__iterator__);/*\n*/with(<employee id=\"1\"><name>Joe</name><age>20</age></employee>){return this;(<\t><x><y/></x></>); } }");
tryItOut("L: { /x/g ; }");
tryItOut("L:if(yield this.__defineGetter__(\"constructor\", (4.).__defineSetter__)) { if (<x/> ? (constructor = <x/>) : ({prototype: window})) __proto__; else export constructor;}\nexport __count__;");
tryItOut("return constructor;");
tryItOut("/*infloop*/for(prop; __count__; (<><x><y/></x></> /  '' )) ([]);");
tryItOut("with(([<x/>].filter((<><x><y/></x></>).__defineSetter__))){function  __noSuchMethod__ \f(__iterator__, __iterator__) { yield this }  }");
tryItOut("{} const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in null) {throw <x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const setter in window) {throw  /x/g ;yield prop; }");
tryItOut("if(-0 .@ undefined) {export *;let __noSuchMethod__ = this, __noSuchMethod__; } else  if (*::*) yield *; else /*for..in*/for(let __parent__ in ((<x/>)(this)))yield;");
tryItOut("/*for..in*/L:for((this.zzz.zzz != ) in (RegExp((({__parent__: prop })), (<x/>.({}.__defineGetter__(\"__count__\", new Function)))))) /*infloop*/while((let (prototype = *)  /x/g ))(<y><z/></y>);");
tryItOut("if({}) { if (window) (__iterator__);} else {return;yield; }");
tryItOut("let (prototype, let = [window for each (prop in @foo)]) { return; }");
tryItOut("for(let y in [5,6,7,8]) {}");
