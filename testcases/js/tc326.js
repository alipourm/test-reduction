tryItOut("return;");
tryItOut("if(this.__defineGetter__(\"prop\", function  prototype ()<x/>))  else <x/>;");
tryItOut("/*infloop*/for(yield true ^= @foo; (<><x><y/></x></> ? <><x><y/></x></> : <><x><y/></x></>) ? <x/>.__parent__ = undefined : <y><z/></y>; ({__iterator__ getter: ((((eval).apply).apply).apply).call })) while((<><x><y/></x></>) && 0)yield 1e+81\n/*for..in*/for(__proto__ = (({__noSuchMethod__: __parent__ = 1.3})) in  \"\" ) yield;");
tryItOut("{}");
tryItOut("/*infloop*/while(window <= undefined)return 1.3;");
tryItOut("{yield 0x99;return; }");
tryItOut("/*infloop*/M:do Number(@foo, true); while(* .. 5.0000000000000000000000);");
tryItOut("M:if(@foo) { if (new __noSuchMethod__(*)) return;} else let prop, __parent__;");
tryItOut("/*infloop*/do yield <x/>; while(this.__defineSetter__(\"prototype\", *));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M:\t for  each(const __noSuchMethod__ in __count__) ");
tryItOut("throw __iterator__;");
tryItOut("let (__iterator__ = (prototype = false | let (prototype = this) window.throw((__count__.yoyo(window))) for (__noSuchMethod__ in __noSuchMethod__ = * | try { export *; } catch(__noSuchMethod__ if (function(){})()) { yield __count__; } catch(__proto__) { ; } finally { undefined; } )({  { return (function ([y]) { })() } : ({ prototype: __parent__, prop: constructor }) }) for (__parent__.prop in <>case 0: break; </>) for (__count__ in [1])).__defineSetter__(\"constructor\", Math.pow)) { /*infloop*/for(__iterator__ = 3; (p={}, (p.z = undefined)()); (<x/>)[window]) {export *;{} } }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("export constructor;");
tryItOut("if(<><x><y/></x></>) {export __noSuchMethod__;yield; } else yield this;");
tryItOut("M:with({__proto__: 0/0}){let prop;return; }");
tryItOut("/*infloop*/M:for(__count__ = prototype, __parent__ = ({ __noSuchMethod__: __iterator__ }); <x/>; (true)(<><x><y/></x></>) = (constructor)+=__proto__) {(<><x><y/></x></>);; }");
tryItOut("while((-0) && 0){ }");
tryItOut("throw StopIteration;");
tryItOut(" default ");
tryItOut("if((__count__)( /x/ ) = ) ; else yield;");
tryItOut("/*for..in*/M:for(__iterator__.__noSuchMethod__ in *::*) {return;let constructor = <><x><y/></x></>; }");
tryItOut("{;(({}).__lookupGetter__).apply }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in prototype.__iterator__ setter= (undefined).apply) {break ;return <x><y/></x>; }\nlet(__noSuchMethod__, prop = <x><y/></x>.(*::*)) ((function(){(yield <><x>\t<y/></x></>)['prototype'] = __proto__;})());");
tryItOut("if(new ([11,12,13,14].map)(each.(false))) let __parent__ = <x><y/></x>; else {gc() }");
tryItOut("for(let y in []);");
tryItOut("L:if(<x/> <= undefined) yield; else  if ((this.__lookupGetter__(\"__iterator__\"))) \f{return;export *; } else export *;\nif((({prototype: __noSuchMethod__, constructor: <x><y/></x> }))) { if (<><x><y/></x></> ? <><x><y/></x></> :  '' ) {export *; }} else {return; }\n");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop.__iterator__ in <x/>.__iterator__ =  \"\" ) /*infloop*/for(prototype; undefined; (new [[]](__noSuchMethod__, this))) {(-1);null; }\n/*for..in*/for(const __proto__.prop in (((function (__count__, prop) { return; } ).call).call( '' , __noSuchMethod__, @foo))) {yield <x><y/></x>;{} }");
tryItOut("return\nthrow !<x><y/></x>.propertyIsEnumerable(\"prototype\");");
tryItOut("{/*for..in*/L:for(var __noSuchMethod__ in (((({__count__ setter: Math.sin })).watch)(new (new Math.sin((__count__.__proto__ getter= [1,2,3,4].map)))([(__iterator__ = this)], new (/a/gi)((<><x><y/></x></>.throw(0/0).__defineGetter__(\"__parent__\", ({}).__lookupGetter__)),  '' .__noSuchMethod__ = @foo)))))return; }");
tryItOut("/*infloop*/for((yield \n__noSuchMethod__); __noSuchMethod__ = ({__count__ setter: (-0).watch, __count__: <><\tx><y/></x></> }); (new (arguments)())) {/*for..in*/for(let prototype in (((5.0000000000000000000000).watch)(null)\f))export *;; }");
tryItOut("/*for..in*/L:for(let __proto__ in *.__lookupSetter__(\"prop\")) L: {((function ([y]) { })());const __iterator__ = this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in [[1]]) {yield null;gc() }");
tryItOut("");
tryItOut("with({}) { return <x><y/></x> ? (prototype = <><x><y/></x></>) : [z1]; } ");
tryItOut("if( \"\" ) { if (__iterator__) {throw <x><y/></x>;{} }} else {return; }");
tryItOut("/*infloop*/do yield {}; while(<><x><y/></x></>);");
tryItOut("__proto__ = __proto__;");
tryItOut("L: {if( '' \n) {__noSuchMethod__var constructor =  /x/g , __noSuchMethod__ = -1; } else while((<y><z/></y>) && 0){continue M;throw <><x><y/></x></>; } }");
tryItOut("with(delete (yield true.@foo))/*infloop*/M:while(@foo)return;");
tryItOut("M:if(Object().__iterator__) {export *;{} } else  if \t(<x><y/></x>.throw(prop)) {export *; }");
tryItOut("/*infloop*/while(1e81)__noSuchMethod__, __proto__ = prop;");
tryItOut("if((new (__proto__)(\f))) continue ; else yield 033;");
tryItOut("if(<><x><y/></x></>) yield @foo; else  if ( \"\" ) {yield;var prototype = @foo, __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(const constructor in (((<y><z/></y>).watch)([[1]])))export *;");
tryItOut("<x><y/></x>with((<x/> ^= window)){M:with({__proto__: eval(\"(__parent__); const constructor;\", (prototype = null))}){(__count__); }\nif(<x><y/></x>) throw  '' ; else  if (__proto__) {return; }\n }");
tryItOut("while(((<><x><y/></x></>\n)) && 0)yield this");
tryItOut("export *;");
tryItOut("/*infloop*/L:for(var yield <x><y/></x> = x::prop %= window; ((p={}, (p.z = 'fafafa'.replace(/a/g, eval))()) !== (new 'haha'.split((__proto__ = [,]), [[1]]))); ((__count__ = null).valueOf(\"number\"))) gc()");
tryItOut("with(<x><y/></x>)gc");
tryItOut("if((( /x/ .__lookupGetter__(\"__proto__\"))())(<><x><y/></x\t></> <<= <x><y/></x>, (get = <x/>))) {yield true;/*for..in*/L:for(const __parent__ = (eval).call(this, <><x><y/></x></>, this) in window) {Math.sin } }");
tryItOut("with({}) { for(let y in [5,6,7,8]) export __noSuchMethod__; } ");
tryItOut("/*for..in*/M:for(const [constructor, __iterator__] = (this.propertyIsEnumerable(\"__noSuchMethod__\").unwatch(\"prototype\")) in __proto__ = __iterator__ ^ @foo.*((yield (new ((new Function(\"(*::*);\")))())))\f) {({}).__lookupGetter__continue ; }");
tryItOut("/*for..in*/for(__noSuchMethod__.__iterator__ in (((new Function(\"export *;\")))(true.@*))){/*for..in*/for(let prototype in ((({}).__lookupGetter__)(<x><y/></x>))){yield undefined;let prototype = <y><z/></y>; }export __parent__; }");
tryItOut("if(constructor) ");
tryItOut("with({__noSuchMethod__: <x><y/></x>}){export prop;(*).__defineSetter__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in 1e81) {throw <y><z/></y>; }");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("let __proto__;");
tryItOut("L:if((this.zzz.zzz)) { if (yield <><x><y/></x></>) {if(<><x><y/></x></>) { if (({}) != function::prototype) {(window);return  '' ; } else {let __parent__ = <x/>, function::__iterator__;case 5: {}break;  }} } else gc()}");
tryItOut("__noSuchMethod__, __noSuchMethod__;");
tryItOut("/*infloop*/M:for(var __parent__; new ((window).call)(*::*, [[1]]); <><x><y/></x></\t>.*) { /x/g ;return @foo; }");
tryItOut("{; }");
tryItOut("yield;\n(undefined);\n");
tryItOut("<!--yy-->");
tryItOut("const each, __parent__");
tryItOut("let (prop, __count__ = #2=null ? <x/> : [z1,,]) { M:while((__iterator__.__count__ = 1.2e3) && 0){prop = <x/>, constructor; } }");
tryItOut("with(<x/>){;/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in #1=[#1#]) {(*::*); } }");
tryItOut("switch( /x/g ) { default: break L;case 8: <><x><y/></x></>break; break;  }");
tryItOut("const prop = 3, prop;");
tryItOut("(this)\n");
tryItOut("L: {/*infloop*/for( /x/ ; @foo; <x/>) {{}let __count__ = #1#, __proto__ = __iterator__;\f } }");
tryItOut("while(((this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }))) && 0)throw <><x><y/></x></>;");
tryItOut("M:while((false) && 0){return;return *::*; }");
tryItOut("let(prototype = new (function (__parent__) { yield; } )(((__noSuchMethod__ = undefined).isPrototypeOf(\f! /x/ ).propertyIsEnumerable(\"__noSuchMethod__, this\")), [11,12,13,14].sort)) { throw __iterator__;");
tryItOut("M:if(({ __proto__: __noSuchMethod__, constructor: prototype }) = (<x/>.@foo)) { if (({prototype: ((uneval(<x/>))),  set constructor() { yield prototype } \t })) export *;} else {M:if(<x><y/></x>) yield <y><z/></y>; }");
tryItOut("/*infloop*/for(const prop; (({__noSuchMethod__: @foo}) , @foo); <><x><y/></x></> .@x:: __parent__) {return <y><z/></y>; }");
tryItOut("if( ) {/*for..in*/L:for(var prototype in ((Function)(__count__.prototype = window))){/*for..in*/for(const [__parent__, __proto__] = * in [[1]])  } } else  if ((.2.prototype = __parent__)) {throw @foo; } else with({}) { throw window; } ");
tryItOut("yield *;");
tryItOut("/*for..in*/for(null.prop in (__proto__.prototype getter= (this).__defineSetter__ ^ (__parent__ = <y><z/></y> :: true ? <><x><y/></x></> : prop))) ((yield window) if (<x><y/></x>));");
tryItOut("while(((({}).hasOwnProperty(new <><x><y/></x></>(@foo),  \"\" ))) && 0)let __parent__, prop;");
tryItOut("L: {do <><x><y/></x></>; while((__parent__.*) && 0);L:if(__count__ = @foo)  '' ; else  if (prototype = @foo) window else yield prop; }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, (0/0).watch) += [, constructor, ] =  \"\"  < 0.1; constructor.__noSuchMethod__ = prototype = [,].__count__ :: __noSuchMethod__.__count__ setter= function () {  } ; __proto__.x::__count__ setter= ([1,2,3,4].map).apply.eval(prop(eval(\"\", 1e+81)) = \n(-0).throw([ /x/ ].filter(<><x><y/></x></>)))) {/*infloop*/do yield; while(1.2e3[-3/0]);return }");
tryItOut("/*infloop*/for(const ({ prototype: ({ set: Function }), __parent__: __parent__ }) = this.hasOwnProperty(\"__proto__\"); (null == @foo) >>= <x/> !== false; (.sort)) {with({__noSuchMethod__: (uneval(#2=({__count__: window})))})switch(<x><y/></x>) { default: break;  } }");
tryItOut("with(++ /x/ )");
tryItOut("continue M;");
tryItOut("{throw  \"\"  }");
tryItOut("/*infloop*/while(*)return;");
tryItOut("/*for..in*/for(const __count__ in function ([y]) { }.hasOwnProperty(\"__noSuchMethod__\") / <><xxx>{__iterator__}</xxx></>) (/a/gi).apply");
tryItOut("let(__noSuchMethod__) { this.zzz.zzz;");
tryItOut("L:if( \"\" ) {constructor = __count__; } else  if (__parent__.__noSuchMethod__ setter= function (__count__, __iterator__\t) { {/*\n*/} } ) {{}\nthrow <x/>;\nthrow <x><y/></x>\n } else {if( /x/ )  '' ; else {; } }");
tryItOut("/*infloop*/for([] = <employee id=\"1\"><name>Joe</name><age>20</age></employee> if ([15,16,17,18].sort(,  /x/ )); (delete <><x><y/></x></>); ({__noSuchMethod__ setter: (__parent__.__iterator__) })) {if([15,16,17,18].sort((<x/>.__iterator__), [15,16,17,18].filter(({}).hasOwnProperty, ( /x/  if (<><x><y/\f></x></>))))) {} else  if ((__iterator__-= '' [<x/>.eval(true)])) {setter, prop = <x/>; } else continue L; } const __noSuchMethod__;");
tryItOut("let constructor\nconst constructor = <x><y/></x>, true = __count__;");
tryItOut("switch(<x/>) { default: export __proto__;break;  }");
tryItOut("M:if(-3/0) {const __proto__ = ({}); = window, constructor = 033; } else  if (!<><x><y/></x></>.valueOf(\"number\") /= (Math.sin).call(<y><z/></y>, true, <x><y/></x>)) gc() else if([])  else  if (1e-81) {return  /x/ ;(1 for (x in [])) }");
tryItOut("throw this;");
tryItOut("/*infloop*/M:for(<x><y/></x>; [[]]; [[]]) {yield;return; }");
tryItOut("/*infloop*/while(( /x/g  > <y><z/></y>)){{} }");
tryItOut("/*infloop*/for(({ prop: __count__, __noSuchMethod__: __proto__ }) = ( /x/ .__defineGetter__(\"prop\", function () { yield window } )); (__iterator__.__proto__.@foo); 'fafafa'.replace(/a/g, Math.sin)) {return; }");
tryItOut("let(__count__ = new (null).watch()) { try { /*infloop*/for(constructor = <><x><y/></x></>; 0/0; <x><y/></x>) yield; } catch(constructor if (function(){this.zzz.zzz;})()) { return; } catch(__proto__) { return (<x/> <<= *::*); } ");
tryItOut("if(0.1.__lookupGetter__(\"__noSuchMethod__\")) { if (\n<x><y/></x>.\t(.2)) {gc() } else throw  /x/g ;}");
tryItOut("/*infloop*/for(let __iterator__ =  /* Comment */[,]; null.__lookupSetter__(\"__iterator__\"); ({__count__: <x><y/></x>})) {yield __iterator__; }");
tryItOut("L: if(@foo) return window; else  if ( \"\" ) const __iterator__; else throw window;");
tryItOut("L: var constructor = #1=[#1#]");
tryItOut("for(let y in [5,6,7,8]) __parent__ = prop;");
tryItOut("throw <x><y/></x>;\nif( \"\" ) { if ( \"\" ) {return  \"\" ; }} else {export __iterator__;export constructor; }\n");
tryItOut("if(<y><z/></y>) var __proto__; else  if ((<y><z/></y>.hasOwnProperty(\"__count__\"))) {return;{} }");
tryItOut("if(<x><y/></x>) { if (this) continue ;} else throw 3;");
tryItOut("with(new ({}).__lookupGetter__(prototype)){ const ;\nFunction const __iterator__;\n }");
tryItOut("return <y><z/></y>;\nthrow <x><y/></x>;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor.__parent__ in  /x/g ) /*infloop*/L:while(<x><y/></x>){yield prototype; }");
tryItOut("{var prop = <x><y/></x>\t; }");
tryItOut("throw StopIteration;");
tryItOut("if(<x/>) return <x/>; else  if (1e+81) {return <x><y/></x>; } else __iterator__ = null, __parent__;");
tryItOut("L:with({__proto__: true}){/*for..in*/for(__noSuchMethod__ = __proto__ = <><x><y/></x></> in @foo) {yield window;; }var prop; }");
tryItOut("if(\n<><x><y/></x></> >= false) {;(@foo); }");
tryItOut("if(this.zzz.zzz) yield @foo; else {( '' ); }");
tryItOut("M:with({function::__noSuchMethod__: (yield <x/>)}){; }");
tryItOut("with(<>__parent__ .@x:: *</>){var __noSuchMethod__ = this, prototype; }");
tryItOut("{(<x/>); }");
tryItOut("/*for..in*/for(let constructor in [1,,] .@ true) {export prop;return *::*; }");
tryItOut("throw null;yield window;");
tryItOut("continue M;");
tryItOut("/*for..in*/for(__iterator__ in window) yield;");
tryItOut("if(<y><z/></y>) let __noSuchMethod__, __parent__;");
tryItOut("L:with({}.__defineSetter__(\"__proto__\", Function)){prototype; }({ __iterator__: prop }), __proto__");
tryItOut("do { } while((<> \"\" </>) && 0)");
tryItOut("{with(__noSuchMethod__)yield  \"\" ; }");
tryItOut("M:if(<>(this.__defineSetter__(\"prop\", Function)) >> <><x><y/></x></> -= <><x><y/></x></>.__parent__ = (this.zzz.zzz)</>) if(1e+81) {export *;export constructor; } else  if ( '' ) {return <x><y/></x>; } else  if (try { for(let y in []); } catch(__count__) { throw StopIteration; } .prototype) {yield;/*infloop*/L:for(<><x><y/></x></>; *; -1) {yield; }yield <><x><y/></x></>\n3.141592653589793 } else /*infloop*/L:for(var __count__; <><x><y/></x></>; [1]) export *;");
tryItOut("if(let (__proto__ = <x><y/></x>, __count__ = constructor) this.*) { if (this) /*for..in*/for(let prototype in <><x><y/></x></>) gc() else {set;\n{}\n }}");
tryItOut("L:if(({ prop: __iterator__ }) = delete null) /*for..in*/M:for(const __iterator__ = this.zzz.zzz in [,]) yield; else  if (new (function(q) { return q; })(this <<= window ? this.__defineGetter__(\"constructor\", eval) : ((*::*\t if (this))))) {yield;break L; } else {export __count__;let __noSuchMethod__ = constructor, get; }");
tryItOut("L: {var __count__, __iterator__ = ({a2:z2}); }");
tryItOut("/*infloop*/while(<y><z/></y>.prototype)return  /x/ ;");
tryItOut("/*infloop*/M:while(__noSuchMethod__)yield;");
tryItOut("while((__count__) && 0){if(([@foo])) { if (function (prototype, __noSuchMethod__) { yield *::* } ()) let __proto__ = __proto__; else ;} }");
tryItOut("while(((<><x><y/></x></>)(<><x><y/></x></>) ^ <x/> = *) && 0){{L:if(this) { if (constructor.constructor) {{} } else var setter = @foo;} }; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = true in this.zzz.zzz) {\tprop/*infloop*/L:for(__noSuchMethod__; <x><y/></x>; [1,,]) {trueyield; } }");
tryItOut("/*infloop*/L:do { } while(([@foo\n].filter((new Function(\"return;\")))).throw(*::*));");
tryItOut("/*infloop*/for(__parent__; (<x><y/></x> = [z1,,].prop = [1]); 5.0000000000000000000000 - <><x><y/></x></>) {L: { }/*for..in*/L:for(__parent__ in (((new Function(\"prop;\")))(<x/>.valueOf(\"number\")))){constructor; } }");
tryItOut("var prop =  /x/ ;");
tryItOut("if((__count__.(<x><y/></x>))) /*infloop*/__noSuchMethod__for( /x/g (<><x><y/></x></>); <><x><y/></x></>.unwatch(\"delete\"); __parent__: undefined+={}) return; else  if (constructor = prototype = [<y><z/></y>]) {if([1,,]) {{} }(<x><y/></x>.valueOf(\"number\")); } else {__noSuchMethod__;; }");
tryItOut("");
tryItOut("\n<x><y/></x>\n\n\n");
tryItOut("switch([let (__parent__) {}].map((gc).call).__defineGetter__(\"__count__\", (/a/gi)())) { default: case 0: break; x::__count__: <employee id=\"1\"><name>Joe</name><age>20</age></employee>break; with({}) with({}) { let(constructor, __iterator__) ((function(){yield 0.1;})()); } break; case 8: return;break; case  '' .__parent__: (<><x><y/></x></>);case <y><z/></y> ? 3/0 : *: continue L; }");
tryItOut("with({constructor: (*::* ^  /x/g )})function(y) { yield y; gc(); yield y; }(0x99, @foo)\nreturn;\n");
tryItOut("/*for..in*/for([prototype, prop] = this.zzz.zzz in ) {export *;let __proto__, __count__; }");
tryItOut("with({}) for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*infloop*/for(function(id) { return id }; undefined; true) yield;");
tryItOut("L:if(prototype = -3/0) {(*::*); } else export *;");
tryItOut("/*infloop*/for(__iterator__; #0=({__proto__: ({a2:z2})}); \n@foo !== (#1=<x><y/></x>)) constructor;");
tryItOut("/*for..in*/for(var function::__count__ =  /x/g  in  '' ) {}");
tryItOut("/*for..in*/for([__iterator__, function::__count__] = __parent__ in  \"\" ) (Math.sin).apply");
tryItOut("try { __parent__ = constructor; } catch(prop if (function(){let(prop) ((function(){with({}) { __proto__ = \t__iterator__; } })());})()) { this.zzz.zzz; } finally { throw StopIteration; } ");
tryItOut("if( '' )  else let __proto__;");
tryItOut("L:if((((1 for (x in []))).call).call(prop, <x/>, __iterator__)\n) return <><x><y/></x></>; else {prop,  /x/g ; }");
tryItOut("/*infloop*/for(({ __proto__: function::__parent__, __proto__: prop }) = ( '' .watch(\"__iterator__\", __iterator__)); new prototype; <x/> >= [z1]) {export *; }");
tryItOut("if(<x><y/></x>) { if (<><x><y/></x></>) { } else {yield; }}");
tryItOut("if(([[1]])(<><x><y/></x></> === [z1]).isPrototypeOf((this.__defineSetter__(\"__iterator__\", <x/>) && <x><y/></x> .@*:: <><x><y/></x></>))) { if () {(this);\n({a2:z2});\nfunction::__iterator__ = this; } else function  __parent__ (prop)'haha'.split()}");
tryItOut("export *\nthrow __noSuchMethod__");
tryItOut("L: {(*);{} }");
tryItOut("/*infloop*/for(let prototype = 4.; <x><y/></x>; [,,z1]) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in (String(+(function ([y]) { })()))) {{return;/*infloop*/for(__parent__ = <y><z/></y>; this; <x><\ty/></x>) export *\nreturn; }return; }");
tryItOut("if( '' ) {var __noSuchMethod__ = 1e81;break ; } else ( /x/ );");
tryItOut("if( set __iterator__ prop (__count__) { yield window } ()) if((-1)) { if ( /x/ ) yield <y><z/></y>; else <x><y/></x>} else {( /x/ );/*for..in*/L:for(let [prototype, __parent__] = false in [[]]) var __count__; }");
tryItOut("/*for..in*/L:for(let [prop, __noSuchMethod__] = <x/> in 3) throw window;");
tryItOut("this.zzz.zzz;");
tryItOut("if([,,]) {return undefined; }");
tryItOut("L:with({__proto__: (-0) ? <x/> : [,]}){let (__noSuchMethod__) { L:if(<><x><y/></x></>) {gc()throw <x/>; } else  if (<x><y/></x>) throw <y><z/></y>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype = ({a2:z2}).constructor in (#1=[#1#])[-- /x/ .hasOwnProperty(\"prop\")]) export __noSuchMethod__;");
tryItOut("let (__count__ = (Number(try { (window); } catch(prototype if (function(){-3/0})()) { throw <x/>; } catch(__noSuchMethod__) { __noSuchMethod__, constructor; } finally { throw true; } , [[]])), __proto__) { /*for..in*//* nogeckoex bug 349964 */ for  each(const  /x/g  in window) {yield; } }");
tryItOut("for(let y in [5,6,7,8]) with({}) { yield constructor.prop = __proto__ = (-0); } {export *;\rprop; }");
tryItOut("L:with(#1=[#1#]){let prototype, __noSuchMethod__ = <><x><y/><\f/x></>; }");
tryItOut("(5.0000000000000000000000); const getter;");
tryItOut("do const __parent__, __noSuchMethod__; while(((-* -= ( /* Comment */[z1,,]))) && 0);");
tryItOut("if(__parent__.(<x/> /= [,])) {export *; }");
tryItOut("export *;");
tryItOut("return window;break ;");
tryItOut("if('fafafa'.replace(/a/g, (1 for (x in [])))) {__iterator__;/*for..in*/for(var prototype in undefined) { }with(()){} }");
tryItOut("if(constructor) { if (__count__) {var __count__, __noSuchMethod__;return undefined; }} else {export __count__;; }");
tryItOut("switch( \"\" .valueOf(\"number\")) { case ( /* Comment */null): break; default: {}break; case 7: let __parent__;break;  }");
tryItOut("/*for..in*/for(constructor in ((eval)(undefined)))<><x\f><y/></x></>;\n[1,2,3,4].slice\n");
tryItOut("/*infloop*/for(const __parent__; [15,16,17,18].some(function  __parent__ (__count__, prop) { yield null } , *::* >>= *::*); null) {export *;yield <x/>; }");
tryItOut("L:if(4.)  else  if (<x><y/></x>) {yield;throw  '' ; }");
tryItOut("let(prototype = __parent__\n) ((function(){throw __parent__;})());");
tryItOut("{export *; }");
tryItOut("for(let y in []);");
tryItOut("__iterator__ = prototype;");
tryItOut("/*for..in*/for(let __iterator__ = ({__iterator__ setter: /a/gi, prop: window }) in (<x/>.throw(0.1)).@foo) const prototype;");
tryItOut("let (__parent__ = window) { yield; }");
tryItOut("if(({ __noSuchMethod__: prototype })) {let prototype = [1];yield <><x><y/></x></>; } else  if (yield (new ('haha'.split)(<><x><y/></x></>).eval(({}).valueOf(\"number\")))) return <y><z/></y>; else (<><x><y/></x></>\f);");
tryItOut("/*for..in*/for(let __iterator__ in (prototype = __count__)) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in  '' ) Math.pow");
tryItOut("with( /x/g  <= @foo){switch(0) { default: case @foo: break;  } }");
tryItOut("if([11,12,13,14].some) \fyield __count__;");
tryItOut("with((\n<x><y/></x>)).2;");
tryItOut("if((({a2:z2})__defineSetter__(\"__noSuchMethod__\"continue ; , function  __count__ (__iterator__, __proto__) { yield [,,z1] } ))) { if (<><x><y/></x></> ? 1e4 : <x><y/></x>) {return <x><y/></x>; } else {return; }}");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = __proto__.prop getter= gc in true.* for each (constructor in this()) for (__noSuchMethod__ in (*.prototype = <y><z/></y>))) /*infloop*/for(<><> </></>; \t(({ set prototype constructor (__noSuchMethod__, __proto__) { return __parent__ }  })); false) continue L;");
tryItOut("return null ::  /x/g  ;");
