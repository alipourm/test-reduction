tryItOut("/*for..in*/L:for(const prototype in  /x/ ) {return -0; }let (__parent__ = <y><z/></y> in [,,]) { continue L; }throw __iterator__;\r");
tryItOut("export x::__count__;");
tryItOut("{/*infloop*/do {} while(<x><y/></x>); }");
tryItOut("let(__parent__, __iterator__) ((function(){let(__proto__ = ([false]), __noSuchMethod__ = __iterator__ = __noSuchMethod__.unwatch(\"prop\")) { return;})());");
tryItOut("M:while(((function  __proto__ (;) { return undefined .@ .2 } ).call(true.unwatch(\"prop\")++, prop-=<x/>, yield <><x><y/></x></>)) && 0)/*for..in*/for(const (__parent__ = prop.@foo) in +null\t) /a/gi\n");
tryItOut("return 0; '' ;");
tryItOut("let (prototype, __parent__ = __proto__ || <x/> - __count__ =  '' ) { (1 for (x in [])) }");
tryItOut("L\f:with({constructor: +(this in <x><y/></x>)}){gc()var __iterator__, prop; }");
tryItOut("export constructor;");
tryItOut("return ;");
tryItOut("if('fafafa'.replace(/a/g, eval) == [[1]]) export __noSuchMethod__;");
tryItOut("/*infloop*/L:for(__parent__ = __iterator__-=window; eval(\"<x/>\", null); *::*.__defineSetter__(\"x::yield\", function  prototype (constructor, __noSuchMethod__) { yield *::* } )) {<x><y/></x>;throw *::*; }");
tryItOut("/*infloop*/for(let constructor\f; [z1,,]; <x/>) {yield;export __iterator__; }");
tryItOut("/*infloop*/do {<x/> } while(this);");
tryItOut("L:if([<x><y/></x> for each (constructor in <><x><y/></x></>)]) { if ( /x/ ) {Math.sin } else yield <><x><y/></x></>;}\nconst prototype;");
tryItOut("if(true) {break L; } else export __count__\nfunction  __parent__ () { {} } ");
tryItOut("if(__count__-=__count__) { if ( /* Comment */false) {__count__; } else throw 0/0;}");
tryItOut("if(( \"\" .hasOwnProperty(\"__noSuchMethod__\").__lookupGetter__(\"constructor\"))) { if ((true.constructor)) {throw 1e81;var __proto__ = throw  { yield <x><y/></x> } ;, __parent__ = __parent__; }} else {export *\nexport __count__;gc() }");
tryItOut("/*infloop*/while(<x><y/></x>){}");
tryItOut("/*infloop*/for(__count__; ({ __iterator__: ({ prototype: ({ prototype: __proto__ }) }), __iterator__: constructor }) = (().call(<x><y/></x>, undefined for each (constructor in <><x><y/></x></>))); __count__ = <x/> >> new Exception()) M:if(prototype) var __parent__, __iterator__ = 0x99; else  if (0/0) /*infloop*/M:for(__noSuchMethod__ = #1=[#1#]; this; <><x><y/></x></>) const __proto__, __iterator__ = <x><y/></x>; else 'haha'.split");
tryItOut("if(yield <><x><y/></x></>) yield; else  if (*::*.hasOwnProperty(\"prototype\")) if(((\tyield (new function  prop (__proto__)3(undefined))))) {/*infloop*/M:while(this){let constructor, __proto__ =  '' ;return; } } else {throw this;const __proto__ =  '' ; }");
tryItOut("if(this.eval((prototype.__parent__ = *::*).*)) /*for..in*/for(let constructor = __parent__.(window) in undefined) {export *; } else {let constructor;M:with({__iterator__: <><x><y/></x></> .@x::  \"\" }) if ([,,z1]) }");
tryItOut("throw prop;");
tryItOut("while(((yield 0)) && 0){let prototype = <x><y/></x>, prop = -1;({}).__lookupGetter__ }");
tryItOut("for(let y in []);");
tryItOut("L: if(<x/>.__defineSetter__(\"constructor\", //h\nfunction  __iterator__ (__proto__, __noSuchMethod__)prop).__lookupGetter__(\"__count__\")) { if (window.valueOf(\"number\")) {gc() } else {return; }}");
tryItOut("return <x/>;");
tryItOut("throw StopIteration;");
tryItOut("const __noSuchMethod__ = <x/>, __iterator__\nreturn ({});");
tryItOut("try { throw constructor; } catch(prop if null.__defineSetter__(\"prototype\", *::*)) { continue ; } catch(__count__) { with({}) { __iterator__ = [,,]; }  } ");
tryItOut("if(((p={}, (p.z = *::*)()) >> (this.valueOf(\"number\")))) { if (1.2e3) { }} else {;if([11,12,13,14].map) { if (<><x><y/></x></>.constructor = true) const prototype, __proto__;} else {(undefined);prop, __parent__; } }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in [<><x><y/></x></>]) {(*); }");
tryItOut("throw window;");
tryItOut("if(0.1 ? <x><y/></x> : (-0)) { if (constructor.(('fafafa'.replace(/a/g, -3/0)))) true;} else {if(true) {{} } else  if ( '' ) {break ; } }\n");
tryItOut("L:if((-1)) __noSuchMethod__; else {return *; }");
tryItOut("export *;");
tryItOut("with([,] << <><x><y/></x></>){export *; }");
tryItOut("if((({__count__: *}))) { if ((({__proto__: [<x><y/></x>]}))[undefined.throw(033).prototype]) {return;{} } else {with({__count__: prop})continue ; }}");
tryItOut("if( /x/ ) { if (*::*) {__iterator__ = <x/>; }} else var __noSuchMethod__ = <x/>;");
tryItOut("/*for..in*/L:for(let [setter, __noSuchMethod__] = <><x><y/></x></> in <y><z/></y>) {let prop; }");
tryItOut("with(*)prop =  /x/g ");
tryItOut("export prop; const constructor;");
tryItOut("switch(3) { default: [1,2,3,4].mapcase *: {}case 0:  \"\" ;break; case <y><z/></y>: {}case *::*: break;  }");
tryItOut("let __count__ = undefined;");
tryItOut("yield;");
tryItOut("let(prop = [(eval(\"throw <x><y/></x>;\", (1 for (x in [])) !== *))]) { this.zzz.zzz;");
tryItOut("/*infloop*/do {for(let y in [5,6,7,8]) {}if((~ /x/g )) { if (0.prop = #3={a:#3#}) {;(*); } else export *;} } while('fafafa'.replace(/a/g, ({}).hasOwnProperty));");
tryItOut("let(constructor, constructor = this) { try {  /x/g ; } catch(constructor) { export *; } \nbreak L;\n");
tryItOut("/*for..in*/for(let __iterator__ = __parent__%=<x><y/></x> in prop) {__count__ = __proto__(this.__defineGetter__(\"__count__\", prop));try { gc() } finally { export __proto__; }  }");
tryItOut("return;\nyield  \"\" ;\n");
tryItOut("for(let y in []);");
tryItOut("if(#0=try { export __noSuchMethod__; } catch(prop if (function(){let constructor = -3/0;})()) { gc() } catch(__parent__ if (function(){continue ;})()) { return undefined; } catch(constructor if (function(){})()) { export *; } catch(__iterator__) { {} } ) {yield;__proto__; } else ");
tryItOut("return this.watch(\"constructor\", gc);");
tryItOut("M:if((this).call((<><x><y/></x></>.propertyIsEnumerable(\"prototype\")), null, undefined) for each (constructor in 'fafafa'.replace(/a/g, [1,2,3,4].map)) for (prototype in <y><z/></y>.__defineSetter__(\"constructor\", Math.sin)) for (__proto__ in *)) {yield; } else  if (new (__parent__. /x/ )() -= constructor = this) yield <x/> != true;");
tryItOut("/*for..in*/for(var [ for (__count__ in <x><y/></x> ? [1] : undefined) for each (__iterator__ in [1,,]) for each (__iterator__ in  /x/ ) if ( /x/ ), __parent__] = __proto__.(new Boolean((null for each (__noSuchMethod__ in  /x/ )))) in (new ((null.__lookupGetter__(\"__parent__\")))(__parent__+=1e-81))) {const __parent__;while((this.zzz.zzz) && 0){var __proto__, __noSuchMethod__;return <><x><y/></x></>; } }");
tryItOut("/*for..in*/for(var prototype in ((Function)(*)))export prototype;");
tryItOut("return false\nwith(<><x><y/></x></>){let __proto__ = (-0);export *; }");
tryItOut("while(() && 0){if(undefined if (0/0)) {(1 for (x in [])) } else  if (Error(new (({}).hasOwnProperty)(), __parent__)) {L: {}let __proto__, __noSuchMethod__ = __proto__; }gc() }");
tryItOut("const prop");
tryItOut("while((~<><x><y/></x></>) && 0){yield prototype = __proto__;export *;export *; }");
tryItOut("continue ;");
tryItOut("/*infloop*/L:while(<x><y/></x> | {}){;continue ; }");
tryItOut("{var __iterator__, __noSuchMethod__; const __proto__; }");
tryItOut("if((<><x><y/></x></> for (__iterator__ in [z1]))) {/*infloop*/while(false)const __parent__, __iterator__; }\f else /*for..in*/for(constructor in 1.3 >> <><x><y/></x></>) {return; }");
tryItOut("for(let y in []); const __proto__;");
tryItOut("(this);\n\n");
tryItOut("{var __proto__ =  \"\" ;export *; }");
tryItOut("do continue M; while(( /x/g ) && 0);\n{}\n");
tryItOut("do {/*infloop*/for(__proto__ = <x/>; <><x\f><y/></x></>; <y><z/></y>) false;if(window) {([]);__iterator__; } else return; } while(((#1=-<y><z/></y>)) && 0);");
tryItOut("const prototype = [[1]], prop;");
tryItOut("yield ({ __iterator__: __proto__, __noSuchMethod__: __count__ }) = (new arguments(5.0000000000000000000000)\n);");
tryItOut("/*infloop*/M:while(([(uneval(*::*))].filter([[]])))let __parent__ = <y><z/></y>, prototype = .2;");
tryItOut("/*infloop*/L:while()/*for..in*/for(var [__iterator__, __count__] = [11,12,13,14].filter in this) \fM:if(true) ; else  if (prototype) {break ; } else {prop, prop;let prototype = <x><y/></x>, __count__; }");
tryItOut("{throw ('fafafa'.replace(/a/g, function(y) { yield y; const __noSuchMethod__, __noSuchMethod__ = <x><y/></x>;; yield y; })); }");
tryItOut("/*infloop*/while(constructor <<=  \"\" ){yield;__parent__; }");
tryItOut("var prototype;");
tryItOut("/*infloop*/for(const __iterator__; __count__.constructor setter= (1 for (x in [])); delete = ((<y><z/></y>)[this] ? <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> : (yield <x><y/></x>) >>>=<x><y/></x>)) let (__parent__, __iterator__ = 3.141592653589793) { ; }");
tryItOut("/*for..in*/L:for([prototype, __iterator__] = __noSuchMethod__ in [15,16,17,18].map((new Function(\"return *::*;\")), <><x><y/></x></>)) {return; }");
tryItOut("if((({__iterator__: <><x><y/></x></> instanceof <y><z/></y>}))) L: let __parent__ = 3/0, prototype = <><x><y/></x></>; else  if (@foo & ({a2:z2})) let (__parent__ = [1]) { throw <x><y/></x>; } else ;\n/*for..in*/for(const __parent__ in  '' ) {Function }\n");
tryItOut("for(let y in []);");
tryItOut("{/a/giwhile((@foo) && 0)yield; }");
tryItOut("{yield function ([y]) { };export __proto__; }");
tryItOut("while((3) && 0)__noSuchMethod__, __iterator__ = @foo;");
tryItOut("/*infloop*/for(const prototype; 'fafafa'.replace(/a/g, (\t<><x><y/></x></>).watch);  /x/g ) try { ; } catch(__proto__) { prototype, prototype; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in __proto__) yield <x/>");
tryItOut("switch(undefined) { case [15,16,17,18].some(function (prototype) { return __parent__ } , --true).watch(\"constructor\", Math.sin): break; break; default: break; L: { }break; case (prop = -3/0): \nvar prop = this, __count__;break;  }");
tryItOut("with((function(q) { return q; } % ({a1:1}).@foo)){return; }");
tryItOut("if(yield) { if ((yield <x><y/></x>)) {return;__proto__ = __proto__,  yield  = *; }} else export __parent__;");
tryItOut("/*for..in*/for(let __count__ = <><x><y/></x></>.__proto__ in ({})) let (__proto__, prop) { return; }");
tryItOut("with( '' ){return <x/>; }");
tryItOut("Function\nreturn __proto__;\n");
tryItOut("this.zzz.zzz;");
tryItOut("let (__proto__ = -(eval(\"<><x><y/></x></>\", prop))[<x><y/></x>.isPrototypeOf(null)]) { let (constructor, __parent__ = (<><x><y/></x></> |= <x><y/></x>\n) ? typeof @foo : (__proto__.__count__ setter= window)) { prop = __parent__; } }");
tryItOut("/*for..in*/M\r:for(let __parent__ = (__proto__ = ((p={}, (p.z = ~prop)()))) in ({ constructor: __noSuchMethod__ }) = [, [[, ], , , , __proto__]]) {return <x><y/></x>;/*infloop*/do {var prop = this, __noSuchMethod__; } while(*::* = ); }");
tryItOut("M:if(eval(\"gc()\", <y><z/></y>)) { if (yield) {@foo; } else yield;}");
tryItOut("let (__noSuchMethod__, constructor =  \"\" ) { ; }");
tryItOut("throw StopIteration;");
tryItOut("\n{throw <y><z/></y>;return; }\n");
tryItOut("throw __iterator__;");
tryItOut("/*for..in*/for(__iterator__ in ((*::* += <x/>)(new (prop)(undefined.propertyIsEnumerable(\"__parent__\"),  /x/ )))){gc() }");
tryItOut("while((<x/>) && 0){let prototype, __noSuchMethod__; }\t");
tryItOut("/*infloop*/L:while( /x/  ? <x><y/></x> : function::prototype)yield [,,];\nlet __proto__, prototype;\n");
tryItOut("{export __count__;let __proto__ = @foo, __proto__ =  \"\" ; }");
tryItOut("'with(((<><x><y/></x></>).watch)(<x/>, [[]])/*){L: {continue M; } }");
tryItOut("if((#2=<x><y/></x>)) {return prop; } else  if ('fafafa'.replace(/a/g, (<x><y/></x>).watch).__parent__)  else {(<y><z/></y>); }");
tryItOut("{do {<y><z/></y> } while((__count__) && 0); }");
tryItOut("__count__ = prop;");
tryItOut("if(function::prop.prop setter= (eval).call) {yield;<x><y/></x>; } else  if ((Math.sin)(new (<y><z/></y>.__proto__ = __proto__)((@foo in false)))) yield true;");
tryItOut("if((uneval([15,16,17,18].some(function  prototype (__parent__)'fafafa'.replace(/a\r/g, [1,2,3,4].slice), (__proto__ =  '' )((gc).call([,,z1], ), <><x><y/></x></>))))) let(prop) ((function(){prototype = prototype;})());");
tryItOut("/*infloop*/for(__proto__; <><x><y/></x></> << *;  /* Comment */<x/>) ;");
tryItOut("L:do {let (__iterator__) { gc() } } while((-undefined++) && 0);");
tryItOut("L: throw window;");
tryItOut("if(<x/>.watch(\"constructor\", \fFunction)) const  /x/ ; else  if (*::*(<><x><y/></x></>\t, window) != (5.0000000000000000000000.hasOwnProperty(\"prototype\"))) {<x/>; } else __noSuchMethod__\n");
tryItOut("with({}) let(prototype) { return this.zzz.zzz;");
tryItOut("/*for..in*/L:for(var __proto__ = <x(/ ({ __parent__: __count__ }) = ({constructor: undefined}) </*y/>/*/x>.yoyo(<y><z/></y>) in (<><xxx {__noSuchMethod__}={033} /></>.eval(constructor.prop getter=  '' ))) /*infloop*/do __iterator__ = false, __count__; while( /x/ .@foo)");
tryItOut("/*for..in*/for(let [__proto__, __noSuchMethod__] = (yield new #3={a:#3#}) ? __parent__.prop = prop : eval(\"[, __noSuchMethod__, __iterator__] = ({ __count__: ({ __parent__: prototype, __proto__: try { let constructor, prototype =  /x/ ; } catch(prop) { export prototype; } finally { yield <x/>; }  }) })\", <><x><y/></x>\n</>.__defineSetter__(\"prop\", Math.pow)) in new *()) ;");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("{return (({__parent__ setter: function (, constructor) { yield <><x><y/></x></> }  }));prop }");
tryItOut("throw __noSuchMethod__;");
tryItOut("var prop, __noSuchMethod__;");
tryItOut("if(Object(<x><y/></x>, <><x><y/></x></>)) {gc() } else  if (__parent__.valueOf(\"number\")) {gc() }");
tryItOut("/*for..in*/for(var <bbb xmlns=\"window\"><!--yy--></bbb>['constructor'] in __iterator__.__proto__) {;yield <y><z/></y>.yoyo(<y><z/></y>); }");
tryItOut("/*for..in*/L:for(const prototype = undefined , this in yield = window) export __iterator__;");
tryItOut("{/*infloop*/do let prototype = <x><y/></x>;yield; while((undefined.__lookupGetter__(\"__parent__\").valueOf(\"number\")));yield; }");
tryItOut("/*infloop*/M:for((![z1]); ((prototype)[<><x><y/></x></>] %= 3.141592653589793 |= #3={a:#3#}); true.propertyIsEnumerable(\"constructor\")) /*for..in*/for(let __iterator__ in ((new Function)('fafafa'.replace(/a/g, Math.pow).hasOwnProperty(\"__count__\")))){export *;var prop; }");
tryItOut("(-0);");
tryItOut("/*for..in*/for(let [__proto__, __count__] = (-1) in __proto__) var , __iterator__ = *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in \nnew Function) let prototype\nif(new gc(1.3, <y><z/></y>)) {var __parent__ = <><x><y/></x></>, __iterator__;yield  /x/g ; }");
tryItOut("export delete; const prop;");
tryItOut("M:if(window) (3/0); else yield  /x/g ;");
tryItOut("if(({__noSuchMethod__: -3/0.__lookupGetter__(\"constructor\")})) return; else //h\n if //h\n(<x/>.__lookupSetter__(\"prototype\")) {export *; }");
tryItOut("/*infloop*/for(let __count__; [,]; constructor) continue M;");
tryItOut("/*infloop*/for(const ({ __proto__: ({ __iterator__: ({ __proto__: prototype }) }), arguments: __parent__ }) = __count__.__count__ = new Array(__count__, #1=[#1#]); (\n<x><y/></x>\n); (({}).hasOwnProperty)) {const __parent__ = ({a1:1}), prototype = [1];{( \"\" ); } }");
tryItOut("with(<x/>)({}).__lookupGetter__");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("with({}) with({}) { return; } ");
tryItOut(";");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/for(var __parent__.__proto__ in <y><z/></y>) export *;");
tryItOut("/*infloop*/for(const ({ prop: [__noSuchMethod__, , , , ], __count__: __count__ }) = (#3={a:#3#}(this, constructor) <<= (@foo ? true : 4.))(eval(\"undefined\",  /x/g )); -1; function::__count__.(( /x/  > 4.) >>= prop%=4.)__iterator__ .'prototype = (@foo)[<y><z/></y>].__defineSetter__(\"__noSuchMethod__\", (new Function(\"\\n\")))) {(__iterator__); const prototype; }");
tryItOut("switch( /* Comment */ /x/g ) { default: <><x><y/></x></>;case 9: yield <x><y/></x>;case <x><y/><\t/x>.(0/0): M:switch(<x/>) { case 8: /*infloop*/for(<x><y/></x>; 4.; <x><y/></x>) {export *; }break;  }break; case 6: case []: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in  get prop(yield;, __iterator__) { yield <x><y/></x> ^  /x/  } ) {yield window;gc() }");
tryItOut("if([11,12,13,14].sort) { if (__parent__) break ; else {yield;(this); }}");
tryItOut("throw this.__defineGetter__(\"constructor\", (eval).apply); const __proto__;");
tryItOut("/*infloop*/M:while([15,16,17,18].sort(<><x><y/></x></>, <x/>))L: yield (-1);");
tryItOut("while((window) && 0)var __noSuchMethod__ = null;");
tryItOut("/*infloop*/for(let __proto__ = (eval(\"<y><z/></y>\", <><x><y/></x></>)); this.zzz.zzz; prop) /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in false) {[1,2,3,4].sliceyield; }\n__noSuchMethod__ = prototype;");
tryItOut("{throw  /x/g ;yield  /x/ ; }if(<><x><y/></x></>) { if (false) constructor, __count__;\r} else  set __noSuchMethod__() { yield <><x><y/></x></> } ");
tryItOut("M:if(*::*) { if ([(window .@x:: <><x><y/></x></>)].sort((new Function(\"__noSuchMethod__;\")))) {/*infloop*/for(const __proto__ = (<y><z/></y> === 0/0.prop = (<zzz>prototype</zzz>.(__count__%=<x><y/></x>))); <x/> * <x/> && 1e81; __proto__.__parent__ setter= (<x><y/></x>).__defineSetter__) {yield;\n( /x/ );\n }let prototype = __count__; }} else {{;gc() }/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __iterator__: constructor }) in <><x><y/></x></>) {continue M; } }");
tryItOut("do {const prototype;; } while((__iterator__.valueOf(\"number\")) && 0);");
tryItOut("/*infloop*/while(\f[/*\n*/<y><z/></y>.throw(true)].map(gc))/*infloop*/while( /* Comment */(<x><y/></x>.yoyo(__count__))){throw [z1]; }");
tryItOut("let ((function ([y]) { })() = [prop].some((new Function(\"return this;\")))) { {{} } }");
tryItOut("if(false) 1e4; else  if (<y><z/></y>) {} else {let __count__ = <><x><y/></x></>, __parent__;return window; }");
tryItOut("switch([[1]]) { case constructor: let __iterator__ = <x><y/></x>, prop;break;  }gc()");
tryItOut("/*infloop*/while(([15,16,17,18].sort(false,  \"\"  !== <><x><y/></x></>))){if(prop.__parent__ = [false]) {throw  \"\" ; } }");
tryItOut("/*for..in*/for(let [prop, prototype] = [15,16,17,18].some(this[ \"\" ], prop = <y><z/></y>.__defineGetter__(\"1e-81 .@*:: [,]\", (function  __proto__ () { yield  /x/  } ).call)\t) in prop.__iterator__) (<y><z/></y>);");
tryItOut("{export __count__;/*for..in*/for(const [prop, __parent__] = this in <x><y/></x>) /*infloop*/do {prop = 1e81, __noSuchMethod__ = <><x><y/></x></>; } while(<x><y/></x>); }");
tryItOut("M:while((null) && 0)const prototype, prop;");
tryItOut("/*for..in*/M:for(let constructor in [(window.throw(*::*).__lookupGetter__(\"__noSuchMethod__\"))].some(Math.pow)) /*for..in*//* nogeckoex bug 349964 */M: for (var constructor/* in true) ");
tryItOut("\n");
tryItOut("with({prop: window}){throw  /x/g ; }");
tryItOut("switch(new *::*(')) { default: break; {}case 7: ([]); }");
tryItOut("/*infloop*/for((this.__defineSetter__(\"__iterator__\",  \"\" )).unwatch(\"prop\"); (<x/>.hasOwnProperty(\"__proto__\").__defineGetter__(\"__count__\", Function)); (<y><z/></y> ^ this).unwatch(\"prototype\")) {L: <x><y/></x>; }");
tryItOut("return;");
tryItOut("let ([, , ({ __noSuchMethod__: constructor, __iterator__: [] }), ({ __noSuchMethod__: ({ ({ constructor: constructor }): __count__, __iterator__: ({ prototype: constructor }) }), prototype: ({ setter: ({ __parent__: ({ prop: __proto__ }) }), prop: [({ __parent__: ({ __parent__: __proto__ }), __iterator__: [, , __parent__] }), []] }) }), ] = [<y><z/></y>.*], constructor) { /*for..in*/for(const __iterator__ =  <<= <><x><y/></x></> in ( '' [<x><y/></x>])) \f/*for..in*/for(let function::__noSuchMethod__ = (prototype = ({})\t) in <><x><y/></x\t></>) {return;; } }");
tryItOut("throw <><x><y/></x></>;\nreturn [[1]];\n");
tryItOut("L: export prototype;\nexport __noSuchMethod__;\n");
tryItOut("function ([y]) { };");
tryItOut("/*infloop*/for(let constructor; (([15,16,17,18].filter(<><x><y/></x></>, <x><y/></x>))[window.__proto__]); <><x><y/></x></> ?  \"\"  : (__count__ = *::*)) var prototype, __count__ = window;");
tryItOut("if(({})) { if ( /x/ ) const __iterator__ = window, __count__;} else {gc() }");
tryItOut("/*infloop*/M:for(({__proto__: <bbb xmlns:ccc=\"true\"><ccc:eee></ccc:eee></bbb>.((<x><y/></x>.constructor = [])),  set __iterator__ __parent__ () { return eval(\"({prop: [0x99 setter: 'haha'.split for each (prop in <><x><y/></x></>)], __noSuchMethod__: ([* &=  \\\"\\\" ]) })\", (__proto__.prototype setter= 3)) }  }); (<x><y/></x>.__defineSetter__(\"constructor\", window))[new Math.pow(<><x><y/></x></>)] *= ( /* Comment */this.zzz.zzz); prototype) {switch((yield <x><y/></x>)) { case 1: (<><x><y/></x></>);break;  } }");
tryItOut("Function");
tryItOut("if(({__noSuchMethod__: undefined >>> __iterator__ })) (@foo); else  if ((-1)) {if(#1=[#1#] instanceof [z1]) export *; else  if (/a/gi( \"\" , <><x><y/></x></>)) {return <x><y/></x>;return null; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in 'fafafa'.replace(/a/g, (null).__defineSetter__)) break M;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("this; const __parent__;");
tryItOut("/*for..in*/L:for(let ([11,12,13,14].some) in (((__iterator__ = 1e4))((((*::* || <x><y/></x>) for each (__parent__ in false) for (__iterator__ in window) for each (prototype in *::*) if (<y><z/></y>))))))__count__ = false");
tryItOut("/*infloop*/for(var __proto__; *::*; ([new (window)(__parent__.__proto__ = this, ({})) for (__iterator__ in (typeof -3/0)) if (this)])) {L: {(({a1:1}));continue M; }const __parent__ = true; }");
tryItOut("continue L;\n(<x/>);\n");
tryItOut("do yield 1e-81; while((1e-81.watch(\"__iterator__\", <><x><y/></x></>)) && 0);");
tryItOut("L:while((-0) && 0){(( /x/g ).watch).call }");
tryItOut("do {prop, __parent__;Math.sin } while(( '' ) && 0)\n");
tryItOut("if(<><><ccc:ddd> </ccc:ddd></></>) {continue M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var [1]['__parent__'] in <x/>) {export *; }");
tryItOut("let (set) { <><x><y/></x></>; }");
tryItOut("do with({prototype: function::prop = 1e81}){new Function } while((undefined === <><x><y/></x></>) && 0);");
tryItOut("prop = <x/>\nfunction  prototype (__count__, __count__) { \freturn @foo } ");
tryItOut("/*infloop*/do {yield *;L: (this); } while((constructor = constructor.hasOwnProperty(\"__count__\").hasOwnProperty(\"constructor\")));");
tryItOut("if(this) gc()");
tryItOut("/*for..in*/for(let 4.['<x><y/></x>'] in  /x/ ) gc()");
tryItOut("with(<y><z/></y>)return;export *;");
tryItOut("/*for..in*/for(let __parent__ in ((function(q) { return q; })(*::*)))constructor = *::*;");
tryItOut("if(const __parent__, constructor = true) {1e4;throw [,,z1]; }");
tryItOut("throw prop;");
tryItOut("if(<x><y/></x>) {export *;return; } else  if (window) return <x><y/></x>;export __parent__;");
tryItOut("if(<x/>) throw true;");
tryItOut("/*infloop*/for(var __proto__ = <><x><y/></x></>; <y><z/></y>; constructor) yield this;");
tryItOut("\n\t");
tryItOut("throw StopIteration;");
