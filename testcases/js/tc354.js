tryItOut("__parent__ = .2, __count__;");
tryItOut("continue ;continue \nreturn <x><y/></x>;");
tryItOut("/*for..in*/for(var __count__ = this.__defineGetter__(\"__parent__\", eval) in  '' ) {gc()yield; }");
tryItOut("/*infloop*/for((#1#) .. (p={}, (p.z = new RegExp(this, @foo))()); ( ''  << __count__); (1.3)()) {{}constructorfunction  __proto__ () { yield * }  }");
tryItOut("{gc()return @foo; }");
tryItOut("/*infloop*/M:do {var __count__, __count__;({}).hasOwnProperty } while(<x><y/></x>);");
tryItOut("break ;");
tryItOut("/*for..in*/for(let prop in (([1,2,3,4].slice)( /x/g )))({ get __iterator__() { yield 4. }  }) const function::__parent__\n");
tryItOut("L:with(window.__iterator__){export prototype;let prop, function::getter =  '' ; }");
tryItOut("{ '' {throw true;(<><x><y/></x></>); } }\fM:if(__noSuchMethod__.throw(<><x><y/></x></>)) { if (( '' [<y><z/></y>])) <><x><y/></x></>; else ({});}");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = #0=<><x><y/></x></>-- in true) export __proto__");
tryItOut("with(<x><y/></x>){return #3={a:#3#}; }");
tryItOut("with({__parent__: prop})/*for..in*/for(let constructor =  \"\"  in this) {{}; }");
tryItOut("{return;; }");
tryItOut("L:if([15,16,17,18].map((null).watch, <><x><y/></x></>).__lookupSetter__(\"__proto__\")) { if (<><x><y/></x></>.valueOf(\"number\")) yield []; else L: export *;}");
tryItOut("{let (function::__proto__ = this && {}) { return; }if(<x><y/></x>.prop = true) { if (prototype = *) {} else ;} }");
tryItOut("if(__count__) {export constructor; } else  if (<y><z/></y>) {return true;yield  \"\" ; } else ([]);\n/*for..in*/M:for(<><x><y/></x></>.__proto__ in ((({}).__lookupGetter__)(__parent__ = new __noSuchMethod__(@foo))));\n");
tryItOut("/*infloop*/while(( /* Comment */__proto__.(__noSuchMethod__ %= [,,])) << <x/>)export __count__;");
tryItOut("L: {gc() }");
tryItOut("/*infloop*/while(((@foo))){yield <y><z/></y>; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __parent__] = yield  \"\"  in *.__iterator__) {if(({})) return __parent__;let {{} }; }");
tryItOut("/*infloop*/do while((new function ([y]) { }(__proto__, __proto__)) && 0)yield; while((prototype)%=__iterator__.@* .@*:: eval(\"(3);\", *::*));");
tryItOut("if(true.__defineGetter__(\"constructor\", new Function).hasOwnProperty(\"(undefined @ <><x><y/></x></>)\")) const prop = <><x><y/></x></>, prototype; else  if (((*::*)[<><x><y/></x></> *= <y><z/></y>].__defineSetter__(\"function::__proto__\", 'haha'.split))) {false;throw false; }");
tryItOut("if(.2) { if ([,]) <><x><y/></x></>; else yield;}");
tryItOut("let(__proto__, __iterator__ = <x><y/></x>) ((function(){yield;})());");
tryItOut("/*infloop*/for(let prop; yield [z1,,]; this.zzz.zzz.yoyo(( /x/  for (constructor in  '' )))) {throw (<x/>)[__parent__]; }");
tryItOut("/*infloop*/for(({ constructor: ({ __parent__: ({ prototype: __count__ }), getter: ({ delete: constructor, constructor: Math.pow }) }) }) = (constructor :: <><x><y/></x></>.hasOwnProperty(\"prop\"))\f; (constructor = 4.) *= this.__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)\f; (this.__defineGetter__(\"__iterator__\", [1,2,3,4].slice))) {__count__gc() }");
tryItOut("/*infloop*/L:for(let __iterator__; *::*; (throw window)) with(<><x><y/></x></>)var __proto__ =  /x/ , __parent__ =  /x/g ;");
tryItOut("/*for..in*/L:for(let try { yield; } catch(__iterator__) { return  /x/ ; } finally { export *; }  in ((function  __iterator__ (x::__count__, __parent__)prop.__parent__ getter= new Function)(set <<= <><x><y/></x></>)))export *;");
tryItOut("[[({ prop: [, ({ __proto__: ({ function::constructor: [({ constructor: ({ prototype: ({ __parent__: constructor, __parent__: __count__ }), __count__: __count__ }), prototype: constructor }), , , , ] }) }), , , ], __iterator__: ({ __proto__: ({ __proto__: ({ __parent__: [] }) }), constructor: ({ __proto__: [], prop: __parent__ }) }) }), \t({ \f__proto__: ({ __count__: __proto__, __noSuchMethod__: ({ prop: constructor }) }) }), [.constructor, ({ prop: ({ prototype: constructor, __noSuchMethod__: [({ __proto__: [__noSuchMethod__, prototype, , ], constructor: prototype }), __count__, __proto__] }), ({ __count__: __count__ }): ({ prototype: constructor }) }), [, function::prototype, constructor], [], ], , ]]");
tryItOut("function ([y]) { }\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__.__proto__ in __count__) return  /x/ ;\n");
tryItOut("switch((constructor-= /x/  ? (<x><y/></x>.(-0)) : [].propertyIsEnumerable(\"__iterator__\"))) { default:  const __iterator__;let ([]) { /*infloop*/L:do {return window;throw *; } while((*)[false]); }case 7: break;  }");
tryItOut("{(*::*);; } \"\" ");
tryItOut("{/*infloop*/for(var prototype; new (([1,2,3,4].slice).call)( /x/ ); getter.hasOwnProperty(\"__count__\")) export __count__; }");
tryItOut("/*for..in*/for(constructor in ((undefined)((RangeError()))))return (p={}, (p.z = *::*)());");
tryItOut("do {; } while((<x><y/></x>) && 0);");
tryItOut("/*infloop*/do (-3/0); while(function(id) { return id })\n");
tryItOut("{const __parent__ = #1#, __noSuchMethod__ = L:if((new @foo(this, *::*))) {gc()yield; } else yield;;export x::__parent__; }");
tryItOut("__iterator__");
tryItOut("M:while(((-1)) && 0)yield;");
tryItOut("L: /*for..in*/for(let __iterator__ in ((uneval(<x/>)))) {L:if(3/0 ||  /x/ ) {yield; } else export *;");
tryItOut("throw true\n\ngc()\n");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = @ in [(this.__defineGetter__(\"__proto__\", ( \"\" ).__defineSetter__))].eval(<x><y/></x>.(false))) if(true) { if (*::*) {var __proto__ = this; }} else {{}export *; }");
tryItOut("/*infloop*/for(const __noSuchMethod__; (__parent__ || #1#); this.__defineGetter__(\"__count__\", (__count__) = __proto__(*::*) = <><x><y/></x></>)) /*infloop*/for(yield (<><x><y/></x></>.@foo); __count__.((-1)); (<x><y/></x> == window).yoyo(function::__parent__.__parent__ =  /x/g )) {/*infloop*/while(//h\n<x><y/></x>)(new Function(\"let __iterator__, __noSuchMethod__ =  '' ;\"))yield; }");
tryItOut("false(<x><y/></x>) = constructor;");
tryItOut("let (__parent__ = @foo.yoyo(*::*)) {  }");
tryItOut("with({__count__: (__proto__) = <x/>.throw(<><x><y/></x></>)})return;");
tryItOut("throw @foo; const constructor;");
tryItOut("while((<xxx {__proto__}={- /x/ } />.__lookupSetter__\n(\"function::prop\")) && 0){if(yield [11,12,13,14].some) { if (this.zzz.zzz) export *; else with(<x><y/></x>){{}(window).__defineSetter__ }} }");
tryItOut("/*infloop*/for(({ __iterator__: ({ constructor: constructor, __parent__: __noSuchMethod__ }) }) =  /* Comment */this ? function ([y]) { } : *.eval(); (<x><y/></x>.(3)).yoyo((((({}).__lookupGetter__).apply)(<y><z/></y>, <><x><y/></x></>))); __count__) {gc() }");
tryItOut("/*infloop*/do {(null); } while(new (prop = __parent__)((('haha'.split).call).call((__iterator__.__parent__ = <x><y/></x>.eval((p={}, (p.z = this)()))), <x/>)));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each((constructor) in (uneval(yield *::*))) /*infloop*/L:while(eval(\"new Function\", __iterator__)){__proto__;[1,2,3,4].map }");
tryItOut("L: {break M; }");
tryItOut("/*for..in*/for(const __iterator__ in <x><y\t/></x>) \n{; }");
tryItOut("M:if(<x><y/></x>.unwatch(\"__count__\")) __noSuchMethod__; else  if (<><><x><y/></x></></>) {yield undefined; } else gc()");
tryItOut("switch(__proto__) { case (this.__defineSetter__(\"__parent__\", ({}).__lookupGetter__)): break; case 0: default: \f{}export prop;break; break; ;case this.__defineGetter__(\"function::prop\", gc): break; case 0: throw __noSuchMethod__;\nconst prop = <x><y/></x>;\nbreak; break; case let (prototype, __parent__) *: break;  }");
tryItOut("if(3) let (({ __iterator__: __parent__ })) { {const prototype =  set prop __proto__ (prototype) { var __count__ = true; } , prop; } }");
tryItOut("if(this.__defineSetter__(\"__iterator__\", <x><y/></x>) === this.__defineSetter__(\"prototype\", ({}).hasOwnProperty).isPrototypeOf( \"\"  != <x/>)) { if (<><x><y/></x></>.propertyIsEnumerable(\"prop\").constructor) constructor = <><x><y/></x></>, __iterator__ = [,,]; else 'haha'.split}");
tryItOut("gc()\n");
tryItOut("{return <y><z/></y>;let __noSuchMethod__ = <x/> }");
tryItOut("__proto__, __proto__\n{}");
tryItOut("if(((<><x><y/></x></>.watch(\"__proto__\", (Function).apply)) if (<y><z/></y>))) {/*for..in*/for(let [*::*, __parent__] = __proto__ in true) break M; } else  if ((constructor = constructor)) {return  \"\" ;\t }");
tryItOut("try { this.zzz.zzz; } catch(prop) { for(let y in []); } finally\f { for(let y in []); } ");
tryItOut("M:if(prototype) { if ([15,16,17,18].sort(function(q) { return q; }, [1]) ?  \"\"  : (__parent__ = <y><z/></y>)) /*for..in*/M:for([__iterator__, __parent__] = __parent__ in prototype) {yield; }} else let __noSuchMethod__ = <x><y/></x>;");
tryItOut("/*infloop*/for(let ({ prototype: ({ case 5: break; case 'fafafa'.replace(/a/g, (new Function(\"{}\"))): {let (__proto__, __parent__) { throw <x/>; } }__proto__ = constructor;break; default: case this for (__parent__ in null) .@*:: __noSuchMethod__: /*for..in*/for(let __proto__ in ((Math.pow)(__noSuchMethod__ = <x/>)))arguments;case ((eval(\"().__defineSetter__\", new Array()))( /* Comment */false, false(*))): case 9: (<><x><y/></x></>).watchbreak; case 2: __count__;yield;break; case 0: __parent__, __count__;break; break; : [, ], __iterator__: __proto__ }), __parent__: [] }) = <><x><y/></x><//>/[false]; this.zzz.zzz;++; __iterator__.(0/0)) yield;");
tryItOut("M:while((-3/0) && 0)yield;");
tryItOut("/*infloop*/for(const constructor = prop; <><>true</></>.propertyIsEnumerable(\"__count__\"); (break )) (<y><z/></y>)\nyield undefined;");
tryItOut("/*for..in*/for(const __count__ = <x><y/></x>, prototype = @foo in ((Math.pow)( /x/ )))if(new (new Function(\"yield;\"))(undefined.prototype = window, __count__.constructor)) { if (constructor * <><x><y/></x></>) {([[1]]); }} else export *;");
tryItOut("let(prototype = 0.1) ((function(){})());");
tryItOut("/*for..in*/for(__parent__ in ((function(q) { return q; })((this.__defineGetter__(\"function::constructor\", (@foo).__defineSetter__)))))<!--yy-->");
tryItOut("with([true].sort(*)){return (-0); }");
tryItOut("{export *;<x/>; }");
tryItOut("/*for..in*/M:for(var __iterator__ in ((({}).hasOwnProperty)(*)))yield;");
tryItOut("continue \n");
tryItOut("return;");
tryItOut("/*for..in*/for(const __parent__ in window) return <y><z/></y>;");
tryItOut("M:if([(yield <><x><y/></x></>)]) {yield  \"\" ; } else  if (window) {var __proto__ = <><x><y/></x></>//h\n, __count__ =  \"\" ; } else return prototype;");
tryItOut("L:if(1e81) ");
tryItOut("M:if((this).__proto__) { if ((function  prototype (__count__, __proto__) { yield  ''  } )) {yield  '' ;throw [,,]; }} else export __proto__;");
tryItOut("(this);export *;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("__parent__ = prototype, constructor = 4.;\nyield *::*;\n");
tryItOut("/*for..in*/for(var __count__.propertyIsEnumerable(\"__iterator__\") in @foo) {var __iterator__ = *::*, prototype =  '' \n(<y><z/></y>); }");
tryItOut("switch(<x/>) { case <><{prop}><ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd></{prop}></>: while(((__noSuchMethod__.(<><x><y/></x></>)).__lookupGetter__(\"prototype\")) && 0){{} }break; default: /*infloop*/for([]\f = [] = (new (.2)().@foo); (-0) & __iterator__++;  ) {if([]) { if (@foo) {const __parent__, prototype = *::*;export *; } else {break L; }}return *; }/*for..in*/for(const prototype in (((<x/>.__lookupGetter__(\"prop\")))([15,16,17,18].map(Function, ({a2:z2})).@foo)))return *;\fcase 7: break; case yield 0/0: while(((var prototype) in #3={a:#3#} .@ *) && 0){;if(__iterator__) {} else  if (<x><y/></x>) {(<><x><y/></x></>); } }break;  }");
tryItOut("return;");
tryItOut("/*infloop*/ { yield __count__.prototype } ");
tryItOut("switch(prototype+=constructor++) { case <x/>: do let __parent__, constructor = this; while((Iterator(<x/>)) && 0);break;  }");
tryItOut("if((yield)) {var __iterator__ = undefined, __parent__;try { (new Function(\"yield;\")) } catch(__count__) { gc() } finally { let prop, constructor; }  } else  if (<><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", eval)) {let constructor; } else \nreturn;\n");
tryItOut("/*infloop*/while((uneval( \"\" )))export __count__;");
tryItOut("if((new (@foo)(window, <><x><y/></x></>))) { if (prototype = <x><y/></x> .@ 1e+81) /*infloop*/for(yield (*.valueOf(\"number\")); <><x><y/></x></>.*; __proto__ = <x><y/></x>.watch(\"prototype\", <x><y/></x>)) {return  /x/g ; }} else {}");
tryItOut("/*for..in*/for(__noSuchMethod__.constructor in (((({a1:1}))++)(?)))((3).__defineSetter__).apply(__noSuchMethod__);");
tryItOut("if((new Number(@foo))) { if (__proto__ = 3.141592653589793) {return; } else let prop = <x/>;}");
tryItOut("yield\nthrow null;");
tryItOut("/*infloop*/while(<x/>)export prototype;\t\nfunction () { return true } \n\n");
tryItOut("");
tryItOut("/*for..in*/for(let __parent__ in constructor) {yield; }");
tryItOut("/*infloop*/while(('fafafa'.replace(/a/g, [1,2,3,4].map)))/*for..in*/M:for(var [constructor, __count__] = yield  /x/g  ^ (-1) in __iterator__) {'haha'.splitexport prototype; }\n/*for..in*/for(var __parent__ = <><x><y/></x></>.__iterator__ in window) {break ; }");
tryItOut("<x><y/></x>\n");
tryItOut("M:if(this.zzz.zzz) (yield <x/>),  /x/ ");
tryItOut("if(1e81.valueOf(\"number\")) yield\n");
tryItOut("/*for..in*/for([__noSuchMethod__, prop] = constructor-=<x><y/></x> in <\tx><y/\t></x>) {export __noSuchMethod__;; }");
tryItOut("/*infloop*/for(void (<><x><y/></x></>).call(null,  /x/ , window); __parent__.__noSuchMethod__ = Number( \"\" ) .@*:: undefined; ((function () { yield this } )/*\n*/.apply)() = @foo.*) {/*infloop*/L:do {return;export *; } while([]); }");
tryItOut("/*for..in*/for(prototype in [,,z1]) {gc() }");
tryItOut("if(<y><z/></y>) {if((p={}, (p.z = <><x><y/></x></>)())) yield; } else  if ((window.hasOwnProperty(\"__noSuchMethod__\"))() ? \fnew (__proto__ = true)(Math.sin) : null .@ *) {return;/*for..in*/L:for(var prop in (([1,2,3,4].map)(<x/>))){const __noSuchMethod__; } } else {__iterator__.__noSuchMethod__ }");
tryItOut("L: [1];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (\nconstructor)) (false);");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("yield undefined\nyield #3={a:#3#}\n__parent__ =  /x/ , __count__ = true;");
tryItOut("yield;var __iterator__, constructor;");
tryItOut("switch((uneval(<y><z/></y>))) { case 8: gc()break; default: {}break; case  /* Comment */delete  \"\" : yield;break; case __proto__.(constructor.__count__ = [z1]): break; L: {}break; /*for..in*/for(__proto__ in __count__) {}\t\nbreak; case <y><z/></y>(<x><y/></x>): throw  '' ;break; case constructor.prop = true: break; break;  }");
tryItOut("{throw __count__;L:if(<><xxx>{__parent__}</xxx></>) { if (new (gc)(.2, <x><y/></x>)) let 'prop;} else return __noSuchMethod__\nbreak M; }");
tryItOut("/*for..in*/M:for(let [({}).__lookupGetter__, __noSuchMethod__] = (new (__count__ = true)(this.unwatch(\"__proto__\"))) in (p={}, (p.z = *)())) ;");
tryItOut("if(--[(@foo , @foo)].map(function(y) { yield y; ((-1));; yield y; })) {var __parent__, __count__;/a/gi } else  if (new /a/gi(*::*.propertyIsEnumerable(\"__proto__\"))) {/*infloop*/L:for(let __count__ = (1e4++); __count__; prop.__iterator__ = <x><y/></x>) {return;{} }yield; } else return;");
tryItOut("L: {/*for..in*/for([__proto__, __parent__] = ((uneval(<><x><y/></x></>))) >>> yield 3/0 in  \"\" ) {return;1.2e3; } }");
tryItOut("M:if(<><x><y/></x></>) { if (<><x><y/></x></>) {export *;break ; }} else =");
tryItOut("return;");
tryItOut("/*infloop*/L:for(prototype.__parent__; new [1,2,3,4].slice(); (p={}, (p.z = <x><y/></x>)())) yield ({__iterator__ getter: (Math.pow).apply,  get ({ __parent__: __parent__ })(prop)__iterator__ = function(id) { return id } })\n");
tryItOut("let(__proto__) { prop = __iterator__;");
tryItOut("let(x::__parent__) { with({__count__: [,,z1]}){new Function }");
tryItOut("while((__count__ = undefined) && 0){/*for..in*/for(const __proto__ in []) (#1=[#1#]); }return  \"\" ;");
tryItOut("L: {return prop;yield <x><y/></x>; }");
tryItOut("yield false :: 0.1;");
tryItOut("/*infloop*/for(set = window; constructor; *) var __noSuchMethod__;");
tryItOut("var __noSuchMethod__ = -0, __proto__\nM:while((<y><z/></y>) && 0)/*for..in*/for(__iterator__ = @foo in __proto__) {(<x/>);gc() }");
tryItOut("/*for..in*/for(var prop in (<x><y/></x>)[<x/>]) {{return; }throw @foo; }");
tryItOut("{}\n");
tryItOut("let (__proto__ = this) { return; }let (__proto__ = <x><y/></x>) { M:if( /x/ ) {yield; } else  if (__noSuchMethod__ = this) {yield <x><y/></x>;__count__; } else {gc } }");
tryItOut("prop, __noSuchMethod__;");
tryItOut("/*infloop*/M:for(setter; prototype = undefined .. <x><y/></x> .@*:: (Function)() * var __noSuchMethod__; [1,2,3,4].slice((function ([y]) { })())) {do {throw __parent__; } while(((function () { yield this } )(-0, function ([y]) { })) && 0);; }");
tryItOut("L:while((this) && 0)const __proto__ = *;var prop;");
tryItOut("M:if(<><x><y/></x></> in <x/>.watch(\"__noSuchMethod__\", Math.pow)) {/*infloop*/M:do throw <y><z/></y>; while((uneval())); } else  if ((#0=[ ''  !== true])) {/*for..in*/for(const [__parent__, __parent__] = throw <x/>.__iterator__ = ({a1:1}); in [,,z1] && [,]) {/*infloop*/L:do {yield <x><y/></x>;var __iterator__ = <x/>, prop; } while(__noSuchMethod__);; } } else {var constructor = undefined;return [1,,]; }");
tryItOut("/*for..in*/for\t(const __proto__ in (((new Function(\"do {gc() } while(( /x/ ) && 0); const x::prototype;\")))(#0=({prop: *})))){/*infloop*/while( \"\" )undefined }");
tryItOut("throw *::*;");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let get.__parent__ in 'fafafa'.replace(/a/g, new Function)) {; }");
tryItOut(" '' ;");
tryItOut("L:switch(__proto__.function::__parent__) { default: try { throw StopIteration; } catch(constructor) { prototype = __count__; }  }");
tryItOut("/*infloop*/\fdo {yield <><x><y/></x></>; } while((({ __noSuchMethod__: ({ prop: ({ __parent__: ({ constructor: ({ __parent__: __proto__, prototype: setter }), prop: prop\r }) }), constructor: ({ __iterator__: ({ __proto__: prototype, __parent__: [, , __noSuchMethod__] }) }) }), constructor: prototype }) = __proto__));");
tryItOut("{{;\nexport *;\n } }");
tryItOut("(new (constructor)(<x/>, null));const prop = 4.\nexport *\nM:if(__count__) var constructor =  /x/g ; else  if ((p={}, (p.z = undefined)())) export prototype; else __iterator__\n");
tryItOut("while(( \"\"  -= 033) && 0){break L; }");
tryItOut("\tif(new (*::*.__iterator__)()) {eval } else  if (new Array(3.141592653589793)) {export *; } else {return false; }");
tryItOut("/*for..in*/for(const [prototype, __iterator__] = ((yield <x/>)) in *) {(<y><z/></y>); }");
tryItOut("for(let y in []);");
tryItOut("{}\nprop");
tryItOut("/*for..in*/for(__parent__ = constructor in function(id) { return id }) gc()");
tryItOut("let (({ __parent__: prop, __parent__: ({ __proto__: __count__ }) }) = ~(yield (<><x><y/></x></> .. 1e81))) { ({ __parent__: function::__count__ }) }");
tryItOut("{}\n(__parent__);");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("__count__: (Math.pow).call( /x/ , 3.141592653589793, undefined) * prop");
tryItOut("if(.2.*.@*) {;/a/gi } else {return; }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("/*for..in*/for(let __count__ = (([1e4.yoyo(.2) for (__iterator__.constructor in <x><y/></x>) for (__parent__ in <><x><y/></x></>) if (this)]).@*) in (__iterator__)) if((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(((yield <><x><y/></x></>))))) {return window; } else {return  \"\" ; }");
tryItOut("/*infloop*/M:for(var constructor; window; ~(<><x><y/></x></>.watch(\"__proto__\", *))) {yield;break ; }");
tryItOut("if((constructor.__iterator__ setter=  '' )) yield; else  if (*) {return; }");
tryItOut("/*infloop*/for(const prop; (__proto__ = <><x><y/></x></>.isPrototypeOf(null)); ( \"\"  > ({__parent__: 3/0}))) while((undefined) && 0)window;");
tryItOut("/*infloop*/do {export *; } while(new (__iterator__ = __noSuchMethod__ / window)(this.zzz.zzz));");
tryItOut("<><x><y/></x></>; const __proto__;");
tryItOut("M:do {} while((*) && 0);");
tryItOut("constructor = __iterator__;");
tryItOut("const __noSuchMethod__;");
tryItOut("/*infloop*/for([new ( /x/ .__count__)() for (( /* Comment */false)['prototype'] in <x><y/></x>) for (function(id) { return id }['__count__'] in <><x><y/></x></>) for (__iterator__ in <x><y/></x>)]; true; new @foo &= <x><y/></x>()) {{}export *; }");
tryItOut("/*infloop*/for(let __parent__; let (__count__ = <><x><y/></x></>)  \"\" ; gc().(this)) export *;");
tryItOut("/*for..in*/for(__noSuchMethod__ = <><x><y/></x></>.isPrototypeOf(<><x><y/></x></>) in (__noSuchMethod__ = <y><z/></y>)) /*infloop*/M:do {<x><y/></x>; } while(\n[z1]);");
tryItOut("L:while(((((@foo).call).call())) && 0)var __count__ =  '' ;");
tryItOut("while((~ /x/ ) && 0){}");
tryItOut("return;");
tryItOut("/*for..in*/for(var __iterator__ in ((function(y) { yield y; gc(); yield y; })(({ get prop prototype ([], constructor) { yield --[z1,,] } , __noSuchMethod__: (<><x><y/></x></>.__proto__) }))))0.1;");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("export __noSuchMethod__;");
tryItOut("L:if(<x><y/></x>) {; } else  if (1.3) {export __proto__; } else {prop = <>prop</>, prop = [1,,]; gc() arguments }");
tryItOut("if(0/0) { if (__proto__.(new ({a2:z2})(<x><y/></x>)--)) {return <x/>;gc() }} else {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (<x><y/></x>) in  /x/ .*) {switch(this) { case 0: <ccc:ddd></ccc:ddd> } } const __count__;\t");
tryItOut("/*infloop*/L:for(var __noSuchMethod__; (<zzz>[1,,]</zzz>.(__proto__ = prop)); (<><x><y/></x></> %= null)) M:with({__count__: __iterator__ = <x/>})(<x><y/></x>);");
tryItOut("/*for..in*/for(const __iterator__ in \n(-1)) {yield let; }");
tryItOut("M:if((\n<><x><y/></x></>).call( /x/  >>= <x/>, ((uneval(false))))) {var __iterator__ = this.__defineGetter__(\"constructor\", (1 for (x in []))), ({ prototype: ({ __noSuchMethod__: constructor }), __noSuchMethod__: ({ __noSuchMethod__: prototype, __noSuchMethod__: __noSuchMethod__ }) }) = (eval(\" '' \", 033)); }");
tryItOut("L: yield <><x><y/></x></>; const __parent__;");
tryItOut("if(({a2:z2})) {{continue ; }throw this; } else continue L;");
tryItOut("return;");
tryItOut("with({}) break ;");
tryItOut("if(<y><z/></y>) { if (*::* << <><x><y/></x></>) M:do __parent__ = <><x><y/></x></>; while(( \"\" ) && 0); else continue ;}");
tryItOut("if(.2) gc() else  if (true) {{} } else {gc()export __parent__; }\nif([]|=this.__defineSetter__(\"__count__\", function  __count__ (__count__) { yield ([1,,].*) } )) {yield; }");
tryItOut("/*infloop*/for(let constructor; (new __proto__ for each (__count__ in window)); this.zzz.zzz * new <><x><y/></x></>) with({prop: arguments}){__iterator__; }\nif(<><x><y/></x></>) {export *; } else  if (null) break L; else {gc() }");
tryItOut("/*infloop*/do {export *;continue M; } while(*.__parent__.@foo);");
tryItOut("let(__noSuchMethod__ = [__iterator__ setter: Math.pow], __noSuchMethod__) { __proto__ = prop;");
tryItOut("if(<y><z/></y>) { if ((yield (yield  /x/g )) .@  /x/  ? <y><z/></y> : window) yield;} else {export __proto__;/*infloop*/for((yield  \"\" ); ({__count__: __noSuchMethod__}); ~<><x><y/></x></>) {export __iterator__; } }");
tryItOut("/*for..in*/for(const [__iterator__, prop] = ((<y><z/></y> > __noSuchMethod__ >>>=(let (__iterator__ = window, __noSuchMethod__)  /x/g )).valueOf(\"number\"))\n in \n[]) return;");
tryItOut("M:if(3/0) {return;*::*; } else  if ((p={}, (p.z = <x><y/></x>)())) break L; else {return  \"\" ; }");
tryItOut("{yield 3.141592653589793;/*infloop*/L:for(__parent__; <><x><y/></x></>; undefined) {window } }");
tryItOut("/*infloop*/while( /* Comment */'fafafa'.replace(/a/g, null).hasOwnProperty(\"prop\")){M:with(eval(\"export __iterator__\\nconst __parent__, getter;\", <><x><y/></x></>)){constructor = 0;throw #1=[#1#]; }; }");
tryItOut("{ }");
tryItOut("return <><x><y/></x></>\ngc()");
tryItOut("let(__count__) ((function(){__iterator__ = __count__;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in __count__ = <x><y/></x>.__lookupGetter__(\"__proto__\") != ) L: {throw prop; }");
tryItOut("if((__count__ = <x/>)) while((prop = __parent__) && 0)let __proto__; else if(null) const prototype;");
tryItOut("return (eval(\"*::*;\", <x><y/></x>));");
tryItOut("/*for..in*/for(const __parent__ = yield <><x><y/></x></> in window) {throw window;throw function::__count__; }");
tryItOut("if((prototype = true)[(<y><z/></y>)]) return (function ([y]) { })(); else  if (new Error()) {yield }");
tryItOut("this.zzz.zzz;");
