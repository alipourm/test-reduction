tryItOut("/*for..in*/L:for(const prop in (([z1,,])(window > <y><z/></y>))){export constructor; }");
tryItOut("if(new RangeError((__noSuchMethod__.(<x/>)).watch(\"__proto__\", 'haha'.split))) {if((<x><y/></x>)) var constructor, __parent__ = 3.141592653589793;( '' ).__defineSetter__export __parent__; } else \fL: /*infloop*/for(yield = [[1]]; false; <x/>) {export *;let __proto__ = prototype; }");
tryItOut("/*for..in*/for(let __parent__ in (((window.__lookupSetter__(\"__parent__\")).__defineSetter__)(__parent__)))if((let (__parent__)  \"\" )) throw <><x><y/></x></>; else  if ((<x/> %=  /x/ )) return 0.1; else var prototype;");
tryItOut("with(<x><y/></x>.hasOwnProperty(\"__count__\")){export __parent__;__iterator__, __noSuchMethod__; } const __iterator__;");
tryItOut("/*for..in*/L:for(let prototype in ((prop)([15,16,17,18].sort(eval,  /x/ )))){yield true;__parent__;window; }");
tryItOut("export *");
tryItOut("/*infloop*/for((<><x><y/></x></>.__parent__).eval(this(<><x><y/></x></>, window)); <><x><y/></x></>.yoyo(function ([y]) { }); (Function((Function())))) {{}yield; }");
tryItOut("if((this.__defineSetter__(\"__count__\", function(y) { yield y; <x/>;; yield y; }))) {var prototype = __noSuchMethod__;return; } else  if (<x><y/></x>++) {yield <><x><y/></x></>; }");
tryItOut("continue \n");
tryItOut("yield [1]; const __noSuchMethod__;");
tryItOut("/*infloop*/do {gc()return; } while((* /=  /x/g ));");
tryItOut("if(3) { if (*::*) __iterator__ = true;} else {{} }");
tryItOut("/*for..in*/for(var __count__ = ( /x/g  @ window) in __noSuchMethod__) export __proto__;");
tryItOut("L:if(new Function().__defineSetter__(\"__parent__\", new Iterator(<x><y/></x>(@foo, [z1]), -1))) {__noSuchMethod__, prototype\n/*infloop*/do { } while(false.throw(<y><z/></y>)); } else  if ((<x><y/></x>.(@foo)) >> #0\f=prop++) prototype, __noSuchMethod__;");
tryItOut("with({}) {}");
tryItOut("yield undefined;");
tryItOut("if(false) yield; else  if ([[]]) export *; else var default: break; ;");
tryItOut("let(yield = *) { __iterator__, __noSuchMethod__ = this;");
tryItOut("/*infloop*/while(@foo)const __parent__ = this, x::__iterator__ = this;");
tryItOut("/*infloop*/do {setter = true, constructor = <><x><y/></x></>;/*for..in*/for(var prototype = <y><z/></y> in <x/>) yield <><x><y/></x></>; } while(<x/>++);");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; true--; constructor.(0)) <><x><y/></x></>\ngc() const __proto__;");
tryItOut("yield\n");
tryItOut("switch(new (<y><z/></y>.propertyIsEnumerable(\"__count__\"))((function ([y]) { }.isPrototypeOf(<x><y/></x>)))) { default: break; {}break;  }");
tryItOut("L: {function (function::constructor, __count__)__noSuchMethod__/*for..in*/for(let prop in .2) {break L; } }");
tryItOut("{/*for..in*/for(const __noSuchMethod__ = window in <x><y/></x>) {eval<><x><y/></x></>; }/*for..in*/for(let [__iterator__, __count__] = (__iterator__.(window)) in  /x/g ) {yield <x><y/></x>; } }");
tryItOut("/*for..in*/L:for\f(let [__count__, constructor] = function::prototype in false) export __noSuchMethod__; const __count__;");
tryItOut("gc\n(-1); const __iterator__;");
tryItOut("for(let y in []);");
tryItOut("yield @foo;.2;");
tryItOut("if( \"\" ) {__count__; } else {constructor = 1e-81;var __count__ = false, prototype = function(id) { return id }; }");
tryItOut("/*infloop*/for(prop; __count__; <><x><y/></x></>) {let get = null, __noSuchMethod__; }");
tryItOut("L:if(*::*.isPrototypeOf(*)) {function(id) { return id };function  __proto__ ()prototype }");
tryItOut("prototype = __parent__;");
tryItOut("/*for..in*/for(const prototype = yield (window if (<x/>)) in  '' .unwatch(\"__proto__\")) with({prototype: __proto__(__iterator__.prop = [[]], <x><y/></x>)}){let constructor, __noSuchMethod__ = <x><y/></x>; }");
tryItOut("L:while(((p={}, (p.z = null.yoyo( \"\" ))())) && 0){let (__noSuchMethod__ = (#1# *= <y><z/></y>), function::__proto__ = this) { return <x><y/></x>; }/*for..in*/for(__iterator__['prototype'] in this.throw(true)) with(@foo){return this;yield; } }");
tryItOut("this.zzz.zzz;");
tryItOut("{if((new prototype = constructor())) {L:switch(function ([y]) { }) { case 3: export *;break; default: break; break; case  /x/ : case [,,z1]: break; case 1: continue ;break; case 3: ; } } }");
tryItOut("do /*infloop*/while(constructor){var prototype = window, __count__ = 1e81; } while((#1=(<y><z/></y>.__iterator__)) && 0);");
tryItOut("/*infloop*/for(RangeError( /x/ , window) += window.hasOwnProperty(\"__parent__\"); (null.valueOf(\"number\")[__iterator__.prop]); true) export *;");
tryItOut("if((prop = <x//h\n><y/></x>.eval(({})))) return ([1,2,3,4].slice); else {return;0x99; }");
tryItOut("/*for..in*/for(var __count__ in (([1,2,3,4].map)([1,,] === (__parent__-=x::__count__ = <><x><y/></x></>))))export __iterator__;");
tryItOut("with(var prototype){export *; }\n");
tryItOut("L: ([z1,,]);");
tryItOut("{/*infloop*/for(const __parent__; function(id) { return id }; (-0)) var prop, __parent__\n;Math.pow\nwith( /* Comment */ /* Comment */([[1]].__lookupSetter__(\"prop\")))let(__iterator__, prop) { null.__count__ = prototype; }");
tryItOut("for(let y in [5,6,7,8]) try { (-1); } catch(prototype) { return; } ");
tryItOut("{/*for..in*/for(var prototype = ([11,12,13,14].some) in __noSuchMethod__ = <y><z/></y> << <x><y/></x>\t) {export constructor; } }");
tryItOut("do {yield\n/*for..in*//* nogeckoex bug 349964 */M: for  each(get in .2) return; } while((__noSuchMethod__.prop setter= ''haha'.split) && 0);");
tryItOut("{L:while((<><x><y/></x></>) && 0){}yield (__count__ = prop).@*; }");
tryItOut("(function ([y]) { })()\n");
tryItOut("/*infloop*/for(let __parent__; ((p={}, (p.z = (__parent__ = [1].watch(\"constructor\", [1,2,3,4].map))((let (__parent__ = <><x><y/></x></>, prop) [[]])))())); -0)  '' ;");
tryItOut("while(((uneval((__noSuchMethod__ = __iterator__)))) && 0)if((uneval(0)).valueOf(\"number\")) { if ((new Function(\"yield;\"))) /*infloop*/for(#1=[#1#][0]; null; <><x><y/></x></> *= window) {gc() } else {/*infloop*/for(let __iterator__ = new (function(q) { return q; })( \"\" , false); Math.sin; (yield undefined)) break L;\n \"\" ;\nMath.sin }}");
tryItOut("L:with({__count__: __parent__()})/*for..in*/for(__count__ in (((<x><y/></x>).watch)(@foo)))yield;");
tryItOut("throw  '' ;");
tryItOut("if(true) {return window; }");
tryItOut("/*infloop*/for(undefined; x::prop = 'fafafa'.replace(/a/g, function(q) { return q; }); #1=({__parent__: <x/>})) break ;");
tryItOut("let(__iterator__ =  '' \n) ((function(){let(__parent__, prop) { throw StopIteration;})());");
tryItOut("switch(<></>) { __count__ default: break; /*for..in*/for(const [__noSuchMethod__, prop] = undefined in #1=[#1#]) var __iterator__ = true, __proto__ = *::*;");
tryItOut("while((window for each (__noSuchMethod__ in 1e81)) && 0)let __proto__;");
tryItOut("M:with\f(([,,z1].__noSuchMethod__ = 1.2e3)){continue ;this; }");
tryItOut("__proto__do const prototype, __proto__ = __proto__; while((*.isPrototypeOf(*::*)) && 0);");
tryItOut("/*infloop*/do {export function::constructor; } while( /x/g .__lookupGetter__(\"__parent__\"));");
tryItOut("L:if(([<y><z/></y>].map(function ()__parent__))\n) { if (window.prop = -0 @ window) {/*for..in*/for(let [__count__, __count__] = <x><y/></x>.yoyo(*::*).unwatch(\"__count__\") in (new String())) {continue M;var __proto__ = <x/>; } }} else {/*for..in*/M:for(__iterator__ = <employee id=\"1\"><name>Joe</name><age>20</age></employee> in *) /*for..in*/M:for(__count__ = * in 0x99) {__noSuchMethod__, __count__ = 4.;( '' ); } }");
tryItOut("/*for..in*/for(var [__count__, constructor] = #1=({__count__: (new ( /x/ )((this.__defineGetter__(\"prototype\", [1,2,3,4].slice)), @foo) == 'fafafa'.replace(/a/g, /a/gi))}) in new (((Function).call(__noSuchMethod__ = <\t><x><y/></x></>, continue M;)))(yield [z1], constructor.constructor = window)) L: gc()");
tryItOut("let (({ prop: ({ __noSuchMethod__: __noSuchMethod__(([11,12,13,14].sort)), __noSuchMethod__.__noSuchMethod__: ({ prop: ({ __parent__: [__iterator__, , __count__] }), __noSuchMethod__: ({ prototype: ({ __iterator__: prop }) }) }) }), prototype: ({ __count__: [, , ({ __proto__: [prototype], prop: __count__ }), ({ __parent__: ({ prop: -3/0, prototype: constructor }), __noSuchMethod__: prop })] }) })) { try { yield; } catch(constructor if __parent__[1e4]\n) { with({}) { with({}) with({}) { export constructor; }  }  } finally { __parent__catch(__noSuchMethod__ if yield ) { return; } finally { this.zzz.zzz; }  }  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in 0) gc()");
tryItOut("if(<bbb xmlns=\"<><x><y/></x><>\"> </bbb>) function(q) { return q; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in  \"\" ) 'haha'.split\nexport __count__;\nbreak  }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((function(q) { return q; })((p={}, (p.z = __iterator__)())))){let (constructor) { with({__noSuchMethod__: 3.141592653589793.prop}){return @foo;export *; } }let (prop, prototype) { let __iterator__ = __parent__; } }");
tryItOut("/*for..in*/for(var __iterator__ =  /x/g .eval([[]]) in constructor = <x><y/></x>) ([z1,,]);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let function::__count__ in <><x><y/></x></>) {(@foo); }");
tryItOut("(//h\nL:if( __proto__(prop = 1e81))   {  }   else ) if (<x><y/></x>) continue ; else yield __count__;");
tryItOut("/*for..in*/L:for(prototype = ++__noSuchMethod__ in  \"\" ) {*::*;; }");
tryItOut("if() throw 1e+81\n");
tryItOut("with(new (<x/>)(-0).__defineSetter__(\"__count__\", function () { return; } )){}");
tryItOut("if(prototype, prototype = <><x><y/></x></>) {yield; } else  if (__parent__ = *::*) const __parent__, __iterator__\t; else {export *; }");
tryItOut("( '' );/*infloop*/for(let __noSuchMethod__;  /x/ ; <x><y/></x>) yield;");
tryItOut("let (constructor = *::*, delete =  /x/g ) { ; }");
tryItOut("yield @foo;throw <><x><y/></x></>\f;");
tryItOut("/*for..in*/for(__noSuchMethod__(prop) in typeof prototype) {switch(<x><y/></x>) { case <y><z/></y>: continue L; } }");
tryItOut("yield\n");
tryItOut("{(<x><y/></x>); }");
tryItOut("__noSuchMethod__, function::prototype;");
tryItOut("M:if(*::*) export prop; else  if (#1=[({__iterator__ getter: new Function })]) throw 1e+81;");
tryItOut("while((this) && 0)return;");
tryItOut("/*for..in*/for(prop = undefined in *::*) {}");
tryItOut("L: {export *; }");
tryItOut("{prop{<x><y/></x>; } }");
tryItOut("L: {continue ; }");
tryItOut("/*infloop*/while([z1,,])__noSuchMethod__, __noSuchMethod__ = <y><z/></y>/*for..in*/M:for(const __parent__ in ((Math.pow)(this[false])))yield;");
tryItOut("L:with({__parent__: ((1 for (x in [])))((gc()), (uneval(this)) for (__noSuchMethod__ in <><x><y/></x></>)).propertyIsEnumerable(\"__noSuchMethod__\")}){return; }");
tryItOut("{let prototype =  /x/g , __noSuchMethod__ =  /x/ ; }");
tryItOut("if((p={}, (p.z = ( /x/g  < window))())) break ; else return [z1];");
tryItOut("while((__iterator__ = ()) && 0){ }");
tryItOut("if( \"\" .propertyIsEnumerable(\"prop\")) {return function ([y]) { };<x><y/></x> &= 0x99; } else  if (.@foo++) export constructor; else if(* == <x/>) /*infloop*/L:do {throw <><x><y/></x></>;const x::__iterator__, __noSuchMethod__ = *; } while(#1#); else  if (((<x><y/></x> for each (prototype in <><x><y/></x></>)))) break ; else {throw null;__iterator__ =  /x/g ; }");
tryItOut("let (__iterator__ = window, constructor) { if(constructor++) {export *; } else continue L; }");
tryItOut("let (__noSuchMethod__) { {new Function } }");
tryItOut("M:if('fafafa'.replace(/a/g, function (__proto__, function::__noSuchMethod__) { {} } )) { if ((delete\f = prop)) {return;const prop, __proto__ = __noSuchMethod__; } else /*for..in*/for(var prop in *::*) return;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in (((-0))(\tfunction(id) { return id }, <x/>))) {let prototype, __iterator__;return <x/>; }");
tryItOut("L: ;");
tryItOut("/*for..in*/for(<y><z/></y>['__parent__'] in (((this.__defineSetter__(\"__count__\", /a/gi)).__defineSetter__\t)((this.zzz.zzz))))/*for..in*//* nogeckoex bug 349964 */ for  each(var \n__count__ in 0/0) {do throw this; while((false) && 0); }");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("/*for..in*/for(const prop in this) {return;yield; }");
tryItOut("L:with({prop: true})yield __proto__;");
tryItOut("do gc() while(( /* Comment */<x><y/></x> .@ *::*.__lookupSetter__(\"function::prop\")) && 0);");
tryItOut("L:while((((function (prototype, __proto__) { return <x/> } )())) && 0){gc() }");
tryItOut("/*for..in*/M:for(var undefined.constructor in (((<x><y/></x>).watch)(case (p={}, (p.z = <x><y/></x>)()) <= [this]: if(prototype , null) {const prop, __proto__ = window;{} }break; case 3: with({__noSuchMethod__: prop = prop})/*infloop*/while((function ([y]) { })())var __count__;default: break; __iterator__ =  /x/g ;break; ))){break ; }");
tryItOut("/*infloop*/L:for(var //h\n({ __parent__: ({ __iterator__: ({ __proto__: __iterator__ }), __proto__: [, __count__] }) }) = (<>0</>); new Object(prototype); (<x><y/></x>(#3={a:#3#}).__defineGetter__(\"__parent__\", function  constructor () { yield arguments !== undefined } ))) {gc()if({}) { } }");
tryItOut("if((window = prop.(window)\t.@*).hasOwnProperty(\"__proto__\")) __proto__; else {break L; }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("if(window.__noSuchMethod__) (*); else  if (constructor. setter= @foo) {{} } else prop = 3.141592653589793, __parent__ = <y><z/></y>;");
tryItOut("/*infloop*/for([] = ({constructor: <x><y/></x>, __count__ getter: __noSuchMethod__ }); @foo; ()) var __parent__, __iterator__ = window;");
tryItOut("{{}/*infloop*/for(__proto__; this; __count__) export constructor; }");
tryItOut("{/*infloop*/for((prototype);  '' .isPrototypeOf(undefined); <><x><y/></x></>.hasOwnProperty(\"__count__\")) var __parent__, prototype;throw <x/>; }");
tryItOut("/*infloop*/\tfor(var delete = new __count__(__iterator__, 3/0).throw(new (function  __count__ (__count__)<><x><y/></x></>)(__iterator__, <><x><y/></x></>)); \n(*::*[<x><y/></x>]); ((function  prototype () {  } ).call((new Array(<x><y/></x>, *)), new window(window, window), this))) /*infloop*/for(let __iterator__; <x><y/></x>;  '' ) const prop, __iterator__;");
tryItOut(";");
tryItOut("let ([1e-81 for (__proto__ in ({a2:z2}))]['__parent__'] = [,,] ? (undefined.@*) : (__proto__ = 0), yield = (prototype = <x><y/><\f/x> instanceof (({__proto__ getter:  get constructor(constructor, __iterator__)[[]] }))).__defineGetter__(\"__noSuchMethod__\", (4. += false).__defineSetter__)) { /*for..in*/L:for(__parent__ = <\fx\f><y/></x> in [z1,,]) export [1]; }");
tryItOut("/*infloop*/M:for((<x><y/></x> ? this : __count__) ? (<><x><y/></x><\t/> + __noSuchMethod__) : __parent__ = 1.2e3; <bbb xmlns=\"('fafafa'.replace(/a/g, __iterator__)).throw( /* Comment */__parent__)\">yyy</bbb>; (1e-81 |= true)) return;");
tryItOut("if(false.propertyIsEnumerable(\"__parent__\")) let __iterator__ = *, prop = <x/>;");
tryItOut("for(let y in [5,6,7,8]) __count__ = __count__\f;");
tryItOut("/*for..in*/for(__parent__ =  in ) ");
tryItOut("(<x><y/></x>)\n");
tryItOut("/*for..in*/M:for(let [prototype, __parent__] = \t<x><y/></x> !== undefined in <x/>) {let __proto__ = -1;(3).watch }");
tryItOut("let (prototype) { <xxx>{__noSuchMethod__}</xxx> }");
tryItOut("L:while((new Function(this,  \"\" )) && 0)throw <><x><y/></x></>");
tryItOut("/*for..in*/L:for(var constructor = (this)(*::*, this) in ({})) {{}(<x><y/></x>); }");
tryItOut("do { } while((<x><y/></x>) && 0);");
tryItOut("{var  '' , prototype; }");
tryItOut("if(let (prop = __iterator__ = <x><y/></x>, __count__ = (\n(( '' )()))) (({ prop: __noSuchMethod__, prop: prototype }) = ([z1][-0]))) {throw yield <x><y/></x>; } else  if ([[1]]) let prop = @foo, prototype;\nexport constructor;\n\nvar __parent__ = <x><y/></x>, __noSuchMethod__ = 3;");
tryItOut("throw __count__;");
tryItOut("gc() const __count__;");
tryItOut("try { throw __count__; } catch(prop) { throw StopIteration; } ");
tryItOut("/*for..in*/for((<x><y/></x>); = __proto__ = function ([y]) { } in eval(\"<xxx {__iterator__}={undefined} />\", ({prop: this.__defineSetter__(\"__proto__\", ([1,2,3,4].map).call), prop: <x/>[window] }))) return  \"\" ;");
tryItOut("/*for..in*/for(var [prototype, constructor] = <x><y/></x> in window) { }");
tryItOut("let __count__.__proto__ = this.zzz.zzz, __noSuchMethod__;");
tryItOut("if((__noSuchMethod__ = )) export *; else  if (new Function(window, <x/>))  else {__iterator__ = <y><z/></y>;prototype }");
tryItOut("");
tryItOut("/*infloop*/do prop; while(__iterator__.__count__ getter= ({}).hasOwnProperty);");
tryItOut("/*for..in*/for(let constructor in <><x><y/></x></>) {return <x/>;; }");
tryItOut("/*infloop*/do {export each; } while(new eval().yoyo((this.__defineSetter__(\"__iterator__\", [1,2,3,4].map))));");
tryItOut("let (__noSuchMethod__ = <><x\t><y/></x></>) {  }");
tryItOut("switch\f(__iterator__) { default: export *;break; break; case 8: break; throw constructor; }");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = <x><y/></x> in <><x><y/></x></>) {yield; }");
tryItOut("export *;");
tryItOut("M:with({each: (\nundefined)}){yield *; }");
tryItOut("if((__parent__.__parent__ getter= (1 for (x in [])))) {L: {const __iterator__, __noSuchMethod__; } } else {window; const __count__; }");
tryItOut("for(let y in [5,6,7,8]) try { if(*::*.*) {export __count__; } } catch(constructor) { try { export function::prop; } catch(__noSuchMethod__) { export *; } finally { ; }  } ");
tryItOut("while(((<><x><y/></x></> if (1e81))) && 0)throw <><x><y/></x></>;");
tryItOut("with({__iterator__: <y><z/></y>})export *;");
tryItOut("export constructor;");
tryItOut("if(([15,16,17,18].\tsort(function  prototype (__parent__, __iterator__) { yield __parent__ } , <y><z/></y>))) //h\n{switch(constructor) { case 6: default: export *;export prototype;break; const __parent__ =  '' ;break; case 3: break; case <x><y/></x>: export __proto__;case undefined:  } } else {gc() }");
tryItOut("L:if(((([1,2,3,4].map).call).call((prototype.eval(<x><y/></x\n>)), *::* < <><x><y/></x></>))) {yield ({a2:z2});return; } else  if (window)  \"\"  else {yield;export *; }");
tryItOut("/*for..in*/L:for(var constructor in ((function(q) { return q; })(this.zzz.zzz))){var __proto__, prop = <y><z/></y>;prototype = prototype, __noSuchMethod__; }");
tryItOut("if(prototype.(__count__--)) {window;break ; } else with(0x99){return; }");
tryItOut("{( '' ).watch }");
tryItOut("if( \"\"  ^ window) {/*for..in*/for(let __noSuchMethod__ in <x><y/></x>) (window);/*for..in*/for(@foo['__iterator__'] in ((({}).hasOwnProperty)(({ set __proto__ x::constructor (__count__, __proto__) { yield <><x><y/></x></> } ,  set prototype __count__ (constructor, __count__) { null; }  })))){yield prototype;yield [,]; } } else {M:while((true) && 0);throw (this >> <x><y/></x>).hasOwnProperty(\"__iterator__\"); }");
tryItOut("/*for..in*/for(const __count__ in constructor) (1 for (x in []))");
tryItOut("L: ((<><x><y/></x></>).call).call");
tryItOut("with( '' )const __proto__ = undefined, __proto__;");
tryItOut("L: {/*for..in*/for(const __noSuchMethod__.[__parent__, , ] in ((function  __noSuchMethod__ ( ) { return @foo } )((yield <y><z/></y>(false, *)))))with(true)(.2); }");
tryItOut("{with( /x/g ){return; }let (prop = <x><y/></x>) { let constructor; } }");
tryItOut("M:with((uneval([, __count__, __proto__] =  ''  | *::*))){{yield -3/0; }/*for..in*/for(const __noSuchMethod__ = this in <y><z/></y>.yoyo(this)) {var __proto__, constructor = <x><y/></x>; const __parent__; } }");
tryItOut("while((prototype = <><x><y/></x></>) && 0){gc()(true); }");
tryItOut("/*infloop*/for(__proto__ = constructor = *; (this.zzz.zzz).hasOwnProperty(\"((void <x><y/></x>)()) .@x:: @foo.eval(__iterator__)\"); ({ set __iterator__ prototype ()\f { yield <x/>; } , constructor setter: true })) {/*for..in*/for(var __proto__ = <><x><y/></x></>.eval(__proto__) in [undefined for each (prototype in <x><y/></x>)]) with({__proto__: window})let prop = __count__, __proto__ = <x><y/></x>; }");
tryItOut("return <><x><y/></x></>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in __noSuchMethod__) throw @foo;");
tryItOut("let (({ prototype: ({ prop: prototype, prototype: constructor }) }) =  /x/g , prototype) { yield;var __count__, constructor; }");
tryItOut("/*infloop*/for(let prototype; let (__count__) null; this.zzz.zzz) ");
tryItOut("throw StopIteration;");
tryItOut("continue ;\nif((-1)) {yield; } else  if ( '' ) {; }\n");
tryItOut("/*for..in*/for(var __count__ in ((new Function)(new Array()))){(true);return  '' ; }");
tryItOut("if(<x/>) __parent__; else  if (<y><z/></y>) const __noSuchMethod__;");
tryItOut("try { with({}) return; } catch(__parent__) { for(let y in [5,6,7,8]) let(function::__count__, function::__proto__) ((function(){yield  \"\" ;})()); } ");
tryItOut("const prop, __proto__\n");
tryItOut("return");
tryItOut("return this.watch(\"__noSuchMethod__\", ({}).__lookupGetter__);");
tryItOut("const let = __iterator__;");
tryItOut("var __proto__, __proto__ = <y><z/></y>;\r//h\nexport __count__;");
tryItOut("[1] const __proto__\n");
tryItOut("yield <ccc:ddd><ccc:ddd> </ccc:ddd></ccc:ddd>.(prop = 1e+81);");
tryItOut("while(((({prop setter: (Math.pow).apply,  get __noSuchMethod__([]) { return [(*::*).call(5.0000000000000000000000, <><x><y/></x></>)] }  }))) && 0)var prop, __noSuchMethod__ = <x><y/></x>; const __parent__;");
tryItOut("if(1e+81() & <><x><y/></x></>) {let (__parent__ = 5.0000000000000000000000) { let __count__ = *; } } else with(arguments){export constructor; }");
tryItOut("/*for..in*/M:for(var [prototype, __iterator__] = __noSuchMethod__ in *) {export *; }");
tryItOut("let __iterator__;");
tryItOut("constructor");
tryItOut("<y><z/></y>");
tryItOut("M:if(*::*) <><x><y/></x></> else {return;continue M; }");
tryItOut("/*for..in*/for(__iterator__ =  /x/g  in [15,16,17,18].map(function (constructor) { return <x/> } , window)) yield;");
tryItOut("/*for..in*/for(var [constructor, prop] = prototype in <x/>) {var __count__;{} }");
tryItOut("M:switch(<x><y/></x>) { case 0: export constructor; }");
tryItOut("if(<><xxx>{constructor}</xxx></>) const prop = @foo;");
tryItOut("if((__proto__.__iterator__ = [<x/> for (__count__ in  /x/g )])) yield constructor\t; else {throw <x><y/></x>;gc }");
tryItOut("if((prototype.__proto__)) {throw  /x/g ;(Math.pow).call } else  if (({__count__: <y><z/></y>})) {yield; }");
tryItOut("/*for..in*/M:for(let #2= '' .__count__ in ((function(q) { return q; })(undefined))){((window - Function)); }/*\n*/");
tryItOut("L: \n/*infloop*/for(var __iterator__ = @foo; <y><z/></y>; <x><y/></x>) { /x/g ; }");
tryItOut("export prop");
tryItOut("/*infloop*/for(<><><x/></></>; (-*::*); (({__noSuchMethod__: <><x><y/></x></> += <><x><y/></x></>, let getter: function ()[1,,] }))) {return <x><y/></x>;if( /* Comment */\fnull) { if (new (function  prototype (__proto__, __noSuchMethod__) { [1,2,3,4].map } )( /x/g )) var prototype =  /x/g , __parent__;} else break ; }");
tryItOut("/*infloop*/for(let prop = <xxx {__count__}={((1 for (x in [])))()} />; (Array()); (__count__ = (__noSuchMethod__ ? <><x><y/></x></>.__defineGetter__(\"__count__\", /a/gi) : new RangeError(this)))) export __proto__;");
tryItOut("M:do {*::*;{} } while((*::*.prototype) && 0);");
tryItOut("/*infloop*/L:for(var delete = (__noSuchMethod__) ^ /a/gi; [11,12,13,14].map.eval(--[]); ('fafafa'.replace(/a/g, new Function))) {{var __proto__, constructor = <><x><y/></x></>;gc() }gc() }");
tryItOut("for(let y in []);");
