tryItOut("for(let y in [5,6,7,8]) var __count__ =  /x/ , __iterator__;");
tryItOut("while((this()) && 0){yield true; }");
tryItOut("/*infloop*/while(<><xxx>{__noSuchMethod__}</xxx></>){let constructor = <x><y/></x>;; }");
tryItOut("prototype = __proto__;");
tryItOut("/*for..in*/L:for(var __iterator__ in .2) {let __proto__ = this;return; }\nbreak ;");
tryItOut("while((prototype) && 0){;; }");
tryItOut("L: {yield  '' ;(__count__); }");
tryItOut("M:if([undefined for each (__noSuchMethod__ in <x><y/></x>[__parent__ = window])]) {var __iterator__ = <><x>\t<y/></x></>, __noSuchMethod__; } else  if (Function() - ({__noSuchMethod__: <><x><y/></x></>})) if(<x><y/></x>) {(#1=[#1#]);return; } else {if(<><x><y/></x></>) {return;return; } else  if (<x><y/></x>) __iterator__; else return window; }");
tryItOut("let () { this.prototype }");
tryItOut("/*infloop*/do {let (__iterator__, __count__ = <><x><y/></x></>) { yield [[1]]; }<x><y/></x>; } while((prop = <x/>).throw(<x><y/></x> = 0.1));");
tryItOut("yield;");
tryItOut("yield <y><z/></y>;");
tryItOut("L:if(constructor.prop) gc() else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) break M;");
tryItOut("/*for..in*/for(const [__proto__, __proto__] = (new (({}).__lookupGetter__)(true)) in typeof [(yield ({a1:1}))].map(().watch)) {yieldconst constructor = *::* -= @foo; }");
tryItOut("if(this) { if ((\n<x/>)) continue L; else {{} }}");
tryItOut("/*infloop*/for(const [prototype, __proto__] = new (1e4)(0.1); <x><y/></x>(this, @foo); __noSuchMethod__.constructor) let __noSuchMethod__;");
tryItOut("gc()\n");
tryItOut("/*for..in*/for(let __count__.__iterator__ in (({__iterator__: 0.1, prop: <x><y/></x> }))) do return; while((<><x><y/></x></>) && 0);");
tryItOut("with({__noSuchMethod__: yield [1,2,3,4].slice()})let __iterator__ = this, __proto__ = null;");
tryItOut("\nL:if(null.constructor = prop) const __noSuchMethod__ = ({a2:z2}); else {return; }\n");
tryItOut("L: return <x/>;");
tryItOut("/*infloop*/for(let __iterator__; 1.2e3; (__proto__.((constructor. (__proto__) __noSuchMethod__)))) {({}).__lookupGetter__ }");
tryItOut("if( '' ) {export __iterator__;{} } else throw <x><y/></x>;");
tryItOut("/*infloop*/for(let getter; false; .2) { }\n/*for..in*/for(var [__noSuchMethod__, __iterator__] = function::prop in  '' ) {{} }");
tryItOut("L:with({__iterator__: <><x><y/></x></> *= []}){/*for..in*/L:for([__noSuchMethod__, __count__] = prop = window in <x/>) {<x><y/></x>; }/*for..in*/L:for(var __proto__ in window++) //h\n{yield \t<x><y/></x>; } }");
tryItOut("{/*infloop*/do __parent__ = *; while(this); }");
tryItOut("let (__noSuchMethod__ = #1#) { /*for..in*/M:for(prototype = \r in <x/> ? __noSuchMethod__ :  /x/g ) {function  prop (__count__) { return  ''  }  } }");
tryItOut("/*for..in*/for(__parent__ = __iterator__ >= <x/>(({ __count__: __proto__, __count__: __count__ }) = true ? window : constructor).__count__ in (*::* @ <x><y/></x>).__lookupSetter__(\"__parent__\")) {with(((<y><z/></y>.prop = ({function::constructor setter: @foo, __count__: prototype })))[*::*]){if(*::*) return <x/>; else  if ( \"\" ) {export __count__;yield; } else var __count__, prototype; } }");
tryItOut("/*infloop*/L:for(this.__defineGetter__(\"prototype\", function  prototype () { return this } ); this.__defineSetter__(\"prop\", function(q) { return q; }); [z1,,] ? window : <><x><y/></x></>) { \"\" ; }\n");
tryItOut("/*for..in*/M:for(const [prop, prototype] = <><x><y/></x></> in #1=[#1#]) {var prop =  /x/ ;undefined; }");
tryItOut("/*for..in*/for(let constructor in ((gc)((__parent__) = )))return;continue ;");
tryItOut("/*infloop*/for([__iterator__] = (({}).hasOwnProperty)(#1#); [15,16,17,18].filter(Function,  .((yield  \"\" )) .@x:: ([,,z1] * ({a1:1}) | ({}).hasOwnProperty)); typeof prop.__proto__) {{} }");
tryItOut("let (({ /*\n*/prop: ({ __count__: [] }), __parent__: ({ __count__: ({ prototype: __iterator__ }), prop: [({ __proto__: __count__, __proto__: ({ prop: prototype, prototype: prop }) }), , , ({ prototype: prop }), ({ constructor: ({ __noSuchMethod__: __parent__, __parent__: prototype }) })] }) }) = constructor.__noSuchMethod__) { \n }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/L:for(let constructor = __count__ = <y><z/></y>.propertyIsEnumerable(\"__count__\") in new ((__iterator__ = <x/>))()) {prop; }");
tryItOut("{yield @foo; /x/g ; }");
tryItOut("L: ({ __parent__: ({ __noSuchMethod__: [, , __proto__] }), constructor: __iterator__ })");
tryItOut("if(<x/>.__defineSetter__(\"__parent__\", (<><\fx><y/></x></>).__defineSetter__)) {} else {/*for..in*/for(let (__noSuchMethod__ .@*:: __count__).constructor in prop) {({ prototype: __noSuchMethod__ })/*for..in*/for(let [prop, getter] = <><x><y/></x></> in window) return; } }");
tryItOut("gc()");
tryItOut("{}\nconst __parent__ = __iterator__, prop = <y><z/></y>\nvar __iterator__, __iterator__ =  \"\" ;");
tryItOut("L:do /*for..in*/L:for(const prototype = (-0) in function::__noSuchMethod__) {yield;constructor = <x><y/></x>; } while(([,,]) && 0);");
tryItOut("1e4;\nexport *;\n");
tryItOut("with([z1,,]){yield this;continue M; }");
tryItOut("if(#2=[yield [<y><z/></y> if (null)]].__noSuchMethod__) {yield false; } else  if (prototype.prototype =  '' ) throw each;");
tryItOut("/*infloop*/do {{export __parent__; } } while(*::*.__lookupSetter__(\"constructor\"));");
tryItOut("/*infloop*/do {return true; } while((({a1:1}) .@ (-1)));");
tryItOut("switch((default: yield;break; )()) { default: (*::*);break; break; throw <x/>;break; case <x><y/></x>\n: export *;break;  }");
tryItOut("do var __proto__ = undefined; while(((__parent__ =  __proto__, __proto__ __iterator__)) && 0);");
tryItOut("gc()");
tryItOut("M:while((@foo) && 0)M:with( /x/g ){((<><x><y/></x></>yyy);)function(q) { return q; } }");
tryItOut("/*infloop*/L:do constructor &= (<><x><y/></x></>)[<><x><y/></x></>]; while(this());");
tryItOut("let(__parent__, constructor = <><xxx {__iterator__}={(__count__ = function::constructor)} /></>.__defineSetter__(\"prototype\", function () { yield  \"\"  > <x><y/></x>.__lookupSetter__(\"__count__\") } )) { yield ( /* Comment */constructor);");
tryItOut("/*for..in*/for(var [constructor, __count__] = export __proto__; in (yield <><x><y/></x></>)) throw <><x><y/></x></>;");
tryItOut(";");
tryItOut("/*infloop*/for(var __proto__ = this; <x/>; true) throw __parent__;");
tryItOut("L:while((\n<y><z/></y>) && 0){ }");
tryItOut("let([] =  /x/g , __proto__ = <>/></x> { yield ['haha'.split( { /*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in *::*) {(function(id) { return id }); } } ) for each (__iterator__ in <><x><y/></x></>[<x><y/></x>])] }  </> <  /x/g ) ((function(){return 'fafafa'.replace(/a/g, .2);})());");
tryItOut("/*infloop*/while(*::* .@ <x><y/></x>)var constructor;");
tryItOut("/*infloop*/for(__iterator__; [,,][let (__iterator__, __noSuchMethod__ = <x\f><y/></x>) 1.2e3]; (null)(function(id) { return id }) = window.__lookupGetter__(\"__iterator__\")) throw <x><y/></x>;");
tryItOut("/*for..in*/M:for(const prop = ({a1:1}) in <y><z/></y>) {break ; }");
tryItOut("/*for..in*/for(constructor = ((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.( /* Comment */this.__defineGetter__(\"constructor\", function  __iterator__ ()<x><y/></x>))))[__noSuchMethod__.__count__ setter= (new Function(\"return 1.2e3;\"))] in \ntrue) if( \"\" ) { if ({}) {(<y><z/></y>);return; } else {return; }}");
tryItOut("let prototype = [,,], prop = *");
tryItOut("if(1e81) {(033);throw this; } else  if (3) {break L; } else throw null;");
tryItOut("if(<y><z/></y>) (function \f() { return ({a2:z2}) } ).apply else ;/*infloop*/for(const __iterator__; [11,12,13,14].some; ([11,12,13,14].map).propertyIsEnumerable(\"__parent__\")) yield;");
tryItOut("throw StopIteration;");
tryItOut("(*::*);");
tryItOut("M:switch(*.__defineSetter__(\"prototype\", (1 for (x in [])))) { case ( \"\" ).__defineSetter__((this ? __iterator__ : null))(function(q) { return q; }\n): if((-0) .@x:: @foo) {var __parent__, prototype; } else  if (<x><y/></x>) {{}return *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in  '' ) {export __parent__;let __iterator__ = *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in +( /* Comment */*::*)) with({}) gc()");
tryItOut("/*for..in*/for(const [prop, function::__iterator__] = #3={a:#3#} in false.__lookupGetter__(\"__iterator__\")) <>(( /x/  for each (prop in prototype)))</>.(__count__ = <><x><y/></x></>)\n<{__proto__}>yyy</{__proto__}>");
tryItOut("/*for..in*/for(var constructor = new ((({ __iterator__: __count__, prop: __noSuchMethod__ }) = __parent__))() in this(*::*)) ;\nyield;\n");
tryItOut("if([__iterator__.( /x/ )]) {gc()/*infloop*/for(({ prop: __iterator__, prop: __count__ }) = constructor; -0.valueOf(\"number\"); try { ; } catch(__iterator__ if [[]]) { throw <x><y/></x>; } catch(__noSuchMethod__) { prototype = @foo, prototype =  '' ; } ) {break ;throw <><x><y/></x></>; } } else continue L;");
tryItOut("/*for..in*/for(let __proto__ in ((/a/gi)(this)))yield;");
tryItOut("{throw this; }\nlet (__parent__) { function  __parent__ (<x><y/></x>, constructor)-0 }\n");
tryItOut("/*for..in*/M:for([__proto__, prop] = *::*++ in (+[1])) while((<y><z/></y> += window) && 0){ }");
tryItOut("/*infloop*/for(let prop; true; __count__ = 'fafafa'.replace(/a/g, window)) ({a1:1});");
tryItOut("throw __iterator__;");
tryItOut("L: {L:if(void  /x/g ) { if (-0.__defineGetter__(\"__parent__\", function(q) { return q; }) ? (window.__lookupGetter__(\"__noSuchMethod__\")) : ({ set constructor() { yield true } ,  get prototype __count__ (prototype, prop) { let __proto__ = <><x><y/></x></>, __parent__ = <y><z/></y>; }  })) /*infloop*/do {{} } while(<><x><y/></x></>); else {}\n;}yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (*)( \"\" ) in 'fafafa'.replace(/a/g, function (prop)null)) {/*for..in*/for(let __iterator__ in ((constructor.__noSuchMethod__)([3 for each (__parent__ in __noSuchMethod__)] / <bbb xmlns:ccc=\"function(id) { return id }\"><\fccc:eee></ccc:eee></bbb>.((new (function (__proto__, prototype) { return  \"\"  } )(\f)))))){if(export *) { if (<x/>.watch(\"constructor\", ({}).__lookupGetter__)) ; else prop, prop} } }");
tryItOut("{([z1,,]);L: yield (function ([y]) { })(); }");
tryItOut("if(1.3--) { if (.2 % <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) ;} else {break L;let __noSuchMethod__; }");
tryItOut("/*for..in*/for(var __count__ =  in ('fafafa'.replace(/a/g, (1 for (x in [])))) ? __count__ = this : (3/0)()) {export *; }");
tryItOut("if((yield ) | (1.2e3 >= (-0).prototype).__defineGetter__(\"__proto__\", Math.sin)) { if ((<x><y/></x> % {})) {const constructor; this /*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x/>) return this; } else /*infloop*/do var prop, __noSuchMethod__; while(((function \t() { yield this } )(function::__parent__ = window)));}");
tryItOut("switch(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></> *= [[1,,].isPrototypeOf( /x/ )]) { default: with({__proto__: 3}){return undefined;prototype; }/*infloop*/for(let ({ x::__iterator__: __noSuchMethod__, __count__: __count__ }) = true; eval(\"return *;\", this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; const constructor, __count__;; yield y; })); __iterator__.__count__) {[,,z1]; }break; {}case 1: with(#1#)with(//h\n{prop: <x><y/></x>})let __parent__ = <y><z/></y>, constructor = <x><y/></x>;break; break; <><x><y/></x></> const constructor;case 5: continue M;break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var [prop, __proto__] = 5.0000000000000000000000 == <x><y/></x> in @foo) (__proto__).__defineSetter__");
tryItOut("if(new ((new (function ([y]) { })()()))()) export *; else  if (@foo()) {[1,2,3,4].sliceyield; } else {var break M;; }");
tryItOut("if(this) {yield prop; } else {__count__, prop }");
tryItOut("/*for..in*/for(var __count__\t in ((Function)(__proto__.__proto__ = (-1).constructor))){prototype = __proto__, prop = 3.141592653589793;; }");
tryItOut("if([function::prototype].some([1,2,3,4].slice)) (<><x><y/></x></>); else  if (((yield (this.zzz.zzz)))) ; else yield;");
tryItOut("/*infloop*/for(constructor;  \"\" .hasOwnProperty(\"prop\"); (__parent__ = this) for (__proto__ in *::*) for each (__parent__ in [1,,])) {}");
tryItOut("if(constructor.(prop)) {for(let y in []);M:do {let prop, __noSuchMethod__ = false;let __parent__ =  '' , __noSuchMethod__; } while((new *() %= (({__iterator__: x::__iterator__}))) && 0); }\nthis.zzz.zzz;");
tryItOut("switch(<xxx {prototype}={prop.__defineGetter__(\"__count__\", function  __noSuchMethod__ () { yield <y><z/></y> } )} />) { case 5: prop, __proto__break; break; default: break;  }");
tryItOut("/*infloop*/for([({ (__iterator__ = __iterator__-=#1=[#1#]['__parent__']): [], __count__, prop: ({ return ((#1=[#1#])[function(id) { return id }]);: [({ __iterator__: x::__proto__, prop: __proto__ }), ({ __proto__: __count__, __count__: __proto__ })], __parent__: __count__ }) })] = eval(\"gc()\", <x><y/></x>) |= (prop.(__proto__.__noSuchMethod__ = window)); let (__count__, __iterator__) (this.__defineGetter__(\"__noSuchMethod__\", Math.sin)); (<>__parent__.propertyIsEnumerable(\"prototype\")</>.(this.__defineSetter__(\"constructor\", __proto__)))//h\n) throw false;");
tryItOut("M:do let prop = @foo, __proto__ = window; while((eval(\"export *;\", (__count__)(undefined)) >>= [<x><y/></x> >>>=0] = ((p={}, (p.z = <x>y/>/x>)()).valueOf(\"number\").__lookupSetter__(\"constructor\"))) && 0);");
tryItOut("L:with(prototype.( \"\" ))");
tryItOut("L:do {export *;var constructor = null; } while((window) && 0);");
tryItOut("/*for..in*/for(const constructor in ((__count__ = <><x><y/></x></>)(*::* <= prototype = undefined, * .. function(id) { return id }))) {}");
tryItOut("/*infloop*/for(let __proto__; (({__parent__: ([z1]).call(false !== function ([y]) { }, ) })); new (((p={}, (p.z = <><x><y/></x></>)()))[(<><x><y/></x></>.eval(__proto__))])(prop *= *, __iterator__)) {export __iterator__;/*for..in*/for(let __parent__ = __iterator__ in <><x><y/></x></>)  }");
tryItOut("if(new ([1])()) {continue ;return window; } else  if ([z1,,].eval({})) {throw window;with({function::constructor: [z1].isPrototypeOf(window)}){throw window\n } } else {}\n");
tryItOut("+window");
tryItOut("let(__proto__ = <><x><y/></x></>.watch(\"__noSuchMethod__\", (window)\f.__defineSetter__), __parent__) ((function(){this.zzz.zzz;})());");
tryItOut("{} const __iterator__;");
tryItOut("M:do \t__count__; while((({ set __noSuchMethod__() { break M; } /*\n*/, __parent__: undefined .@ prototype })) && 0);");
tryItOut("L:with((({a2:z2}))[ \"\" ])/*for..in*/for(const <x><y/></x> in this) {function (__proto__) { return <x><y/></x> }  }");
tryItOut("while(((\n<y><z/></y>)) && 0)(0/0);");
tryItOut("/*infloop*/while(<y><z/></y>.isPrototypeOf(<x><y/></x>))export *;throw [z1];");
tryItOut("var constructor = <y><z/></y>, __proto__ = null;");
tryItOut(" const __count__;");
tryItOut("/*for..in*/for(prototype = <><x><y/></x></> in false) break L");
tryItOut("with({}) { return  /x/ ; } ");
tryItOut("M:if(\nconstructor.eval(3/0).@foo) { if (this.__defineSetter__(\"__noSuchMethod__\", function  __iterator__ (prop) { return #1# if (<x/>) } )) switch(__proto__) { default: break; throw this;return;throw [,,];break;  } else {while((({a2:z2})) && 0)return  \"\" ; }}");
tryItOut("M:switch((((new (1.3)()))[[11,12,13,14].filter])) { case [[]]: throw *::*;let __parent__, prop = <><x><y/></x></>; }");
tryItOut("if(window) { if (false()) {gc() } else yield window;}");
tryItOut("do {__iterator__;/*for..in*/for(const __iterator__ in 1e+81)  } while((<>__iterator__ = __noSuchMethod__</>) && 0);");
tryItOut("{yield;var __iterator__, __parent__; }");
tryItOut("\fif((-1)) {var prototype = <><x><y/></x></>;(\n /x/g ); }");
tryItOut("return (null)[__parent__];");
tryItOut("{gc()if(prototype) let __proto__, __iterator__; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = __iterator__ in 033) {__parent__ = <x><y/></x>, __parent__ = []; }");
tryItOut("{if(((-0));) gc() else  if (true--) var __noSuchMethod__, __parent__ = <x><y/></x>;return; }__parent__; }");
tryItOut("{/*infloop*/for(var __proto__ = (this.isPrototypeOf( '' )); __noSuchMethod__.__iterator__; [,,z1] @  /x/g ) {; }continue M; }");
tryItOut("do {gc } while((<bbb xmlns:ccc=\"(({__noSuchMethod__: __iterator__.prop, set setter: (1 for (x in [])) }))\"><ccc:eee></ccc:eee></bbb>) && 0);");
tryItOut("switch(this) { default: {/*infloop*/for(var prototype; <x><y/></x>; ({a2:z2})) {function::__parent__ = *::*; } } }");
tryItOut("/*for..in*/for(var constructor in this) yield delete *::*;");
tryItOut("M:if(({constructor getter: Math.sin,  get constructor(__iterator__)@foo })) { if (this.zzz.zzz) {do {throw [1,,];return; } while(((uneval(@foo))\n) && 0); } else /*infloop*/while(( /x/ .eval(null))){Function }}");
tryItOut("let (__count__ = (*::*.__defineSetter__(\"constructor\", function(y) { yield y; yield;; yield y; }).throw(constructor))) {  }");
tryItOut("/*for..in*/for(let constructor = <x><y/></x> in ((function(q) { return q; })((new function  __count__ ()<><x><y/></x></>())))){ for (prop in <x/>) for (__noSuchMethod__\r in *::*) for (__iterator__ in __count__)/*for..in*/L:for(__noSuchMethod__ = 033 in <x><y/></x>) { } }");
tryItOut("if(new (__proto__)(1e81.eval([,,]), [z1,,]) && *.__parent__ , __iterator__ = <x/>) yield; const __parent__;");
tryItOut("/*infloop*/M:for((uneval(({}))) &= undefined.__defineGetter__(\"prototype\", gc); (__count__); 'fafafa'.replace(/a/g, ('haha'.split).call)) {const constructor = (-0), __noSuchMethod__;yield window; }");
tryItOut("if(-1 >= new #1=[#1#] >>> null(undefined.hasOwnProperty(\"__proto__\"))) /*infloop*/L:while(var constructor = #1=[#1#];){; } else {/*for..in*/for(var constructor in ((function(q) { return q; })(window))){throw <><x><y/></x></>; }yield; }");
tryItOut("L: ");
tryItOut("if(false.hasOwnProperty(\"prop\")) { if (<x/> >= <><x><y/></x></>) const __noSuchMethod__;} else <bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb>");
tryItOut("/*infloop*/for(({ __iterator__: ({ __noSuchMethod__: [({ __iterator__: (prop), __count__: [] }), , __iterator__, , ] }) }) = ( '' ).call(3, this, window); prop|= /x/g ; true) if(export *;.(-0).__count__) __count__, __count__ = <x/>; else  if (3/0++) var function::__noSuchMethod__; else {gc()(__count__); }");
tryItOut("/*infloop*/for(( /x/  !== true); function(id) { return id }; ((Function( /x/ , this)) | (prototype = __noSuchMethod__))) throw [,];");
tryItOut("/*infloop*/M:for(var __iterator__; (1e81) > ( /* Comment */ /x/g ); new (<x/>).watch()) {{}if(__noSuchMethod__ = ({a2:z2})) {return; } else  if ((\ntrue)) {yield <><x><y/></x></>;continue L; } else {gc()gc() } }");
tryItOut("{}\nexport constructor;\n");
tryItOut("{let __parent__ = <x><y/></x>; const __parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in ([11,12,13,14].sort)) {return <><x><y/></x></>;<><x><y/></x></>; }");
tryItOut("this.zzz.zzz\n/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in [[]]) /*infloop*/L:for(__iterator__ = true; <><x><y/></x></>; <x/>) continue M;");
tryItOut("let(({ __iterator__: __proto__ })) { throw StopIteration;");
tryItOut("if(<x/>) { if ( /x/ )  else ;}");
tryItOut("{throw this;if() { if (*::* >>>=[z1]) var constructor = <><x><y/></x></>, __iterator__ = __count__, __noSuchMethod__ = false; else {/*infloop*/for(var prototype = <x><y/></x>; this; <><x><y/></x></>) function  __iterator__ (constructor) { return window }  }} }");
tryItOut("let __parent__ = prop, __noSuchMethod__ = <x><y/></x>; const __parent__;");
tryItOut("while((<x><y/></x>) && 0){ '' ;window; }");
tryItOut("{yield;export *; }");
tryItOut("throw constructor;");
tryItOut("/*infloop*/for(__proto__; //h\n(undefined.prop); this ?  ''  : 5.0000000000000000000000.unwatch(\"constructor\")) {return;throw function ([y]) { }; }");
tryItOut("export *;let __iterator__ = <x><y/></x>, __proto__;");
tryItOut("/*infloop*/while( \"\" ){/*for..in*/for(const __noSuchMethod__ = 'fafafa'.replace(/a/g, (*::*).watch) in <y><z/></y>) {yield; }switch(*::*) { case *::*: export constructor;break; case <x><y/></x>: break; default: __parent__;break;  } }");
tryItOut("return;throw <><x\f><y/></x></>;");
tryItOut("/*infloop*/for(let __iterator__ = [,,]; __count__; 1e-81) {throw <x><y/></x>;gc() }");
tryItOut("/*infloop*/L:for(({__iterator__ setter: [1,2,3,4].slice }) - (<x/> >>= null); this; false) {__noSuchMethod__, __proto__let __iterator__, __count__ = <><x><y/></x></>\n'haha'.split }");
tryItOut("<><x><y/></x></>;");
tryItOut("__iterator__ = prototype");
tryItOut("/*for..in*/for(var prototype\r = (Math.pow) in (__parent__)) /*infloop*/for(let (__iterator__ = <><x><y/></x></>, prop) 3.141592653589793; [<><x><y/></x></>].map((-0)); *::* ? 1e4 : 5.0000000000000000000000) gc()");
tryItOut("/*for..in*/for(let {/*for..in*/for(let __noSuchMethod__ in window) *; } in <y><z/></y>) let (constructor = <y><z/></y>, __noSuchMethod__ = <y><z/></y>) { let __parent__, __proto__ = ({a2:z2}); }");
tryItOut("{{#3={a:#3#} }const prop }");
tryItOut("/*infloop*/for(const __noSuchMethod__; ((__iterator__[<x><y/></x>]).eval(window | __noSuchMethod__)); <y><z/></y>.isPrototypeOf(({a2:z2}) ^ <x/>)) export *;");
tryItOut("L: var __iterator__;");
tryItOut("/*for..in*/for(var prop in *::*) return (-1);");
tryItOut("if(!(* + <x><y/></x>)) {prototype; }");
tryItOut("do {/*infloop*/for(var ({ __iterator__: __parent__, ({ __proto__: constructor, __noSuchMethod__: __count__ }): each }) = __iterator__; (this.__defineGetter__(\"__noSuchMethod__\", gc))\f , -<><x><y/></x></>;  \"\"  >>>=<y><z/></y>) return <><x><y/></\tx></>; } while(((({function::__noSuchMethod__: (new (Math.sin)(default: window;)) }))) && 0);");
tryItOut("do {} while((__iterator__ = 3.141592653589793) && 0);");
tryItOut("return; const try { break ; } catch(__count__) { throw <y><z/></y>; } ;");
tryItOut("{with({prop: <><x><y/></x></>}) }");
tryItOut("if((<><x><y/></x></> if ( /x/g ))) { if ((new (#1#)(\t))) {throw true;<><x><y/></x></>; } else {;; }}");
tryItOut("if(([,].__lookupSetter__(\"__noSuchMethod__\"))) { if (1.2e3) __noSuchMethod__ = 1.2e3;} else {export *; }");
tryItOut("/*infloop*/for(((prop)|=<x><y/></x>.(null));  /* Comment */<><x><y/></x></>; [1]) {yield; }");
tryItOut("M:switch( '' .@foo) { case undefined.valueOf(\"number\"): break;  }");
tryItOut("/*infloop*/do /*for..in*/for(const constructor = 0x99 in <x><y/></x>) {let prop;export *; } while(new (new Function(\"window\"))());throw <x><y/></x>;");
tryItOut("L: switch(<x><y/></x>.__defineGetter__(\"__count__\", <y><z/></y>)) { case 7: break; default: if(1e-81) <y><z/></y>; else  if (window) {throw true\t; }case 7: break;  }");
tryItOut("throw StopIteration;");
tryItOut("gc()");
tryItOut("var __count__;");
tryItOut("with({prototype: ((null)(<x/>))}){yield  \"\" ;export __parent__; }");
tryItOut("if(false) { if (return *;) function(q) { return q; } else {(prop);throw  /x/ ; }}");
tryItOut("with(null)throw 4.;");
tryItOut("with(<x><y/></x>)[1,,]");
tryItOut("L: {/*for..in*/for(let (-0)(__iterator__) !==  \"\" ['__noSuchMethod__'] in *::*.yoyo()) {continue L; } }");
tryItOut("prototype, __count__ = <y><z/></y>;");
tryItOut("const constructor, __proto__ = try { let __noSuchMethod__; } catch(constructor if <x/>) { throw __parent__; } catch(__iterator__) { export prop; } ;with( /x/g ){export *;yield; }");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = -3/0[<x><y/></x>] in <y><z/></y>) var __proto__ = null, __iterator__;");
tryItOut("/*for..in*/L:for(var __proto__ in eval(\"let prop = prop, __iterator__;\", this.__defineSetter__(\"__count__\", <><x><y/></x></>))) with(<><x><y/></x></>.__parent__)const prototype, prop;");
tryItOut("/*infloop*/M:for(let prototype; gc(); new (function (__parent__, prototype) { return ({a1:1}) } ).call(<x/>, {}) >>= (-0) >> [,,z1](constructor.constructor = *::*.__lookupGetter__(\"__noSuchMethod__\"), (Object()))) let(constructor: <><x><y/></x></>) { throw StopIteration;");
tryItOut("switch(this) { case <y><z/></y>:  }");
tryItOut("if(<y><z/></y>) { if ((@foo >>> (this.__defineGetter__(\"prop\", new Function)))) return *::*\nif( /x/g ) { if (1.2e3) yield;} else export constructor;} else yield;");
tryItOut("{with({__iterator__: <y><z/></y>})gc() } const __proto__;");
tryItOut("M:with(<><x><y/></x></>){{}throw <x/>; }\n/*for..in*/for(var prototype = prop, __iterator__ in (__proto__ ? 3.141592653589793 :  \"\" )) ;\n");
tryItOut("with( /x/ ){{}export *; }\n\n{}\n");
tryItOut("/*for..in*/for(var prop in <y><z/></y>.eval(*::*)) {gc() }");
tryItOut("gc()");
tryItOut("/*for..in*/M:for(prop in ((({}).hasOwnProperty)(<><x><y/></x></>)));");
tryItOut("/*for..in*/for(let function::__noSuchMethod__ = (( /* Comment */#1=[#1#])--) in @foo << this) {if(<><x><y/></x></>) {{} }let (__noSuchMethod__ = constructor.yoyo(<><x><y/></x></>)) { /*for..in*/for(let [setter, constructor] = (this.yoyo(*)) in *) {return #3={a:#3#};export *; } } }");
tryItOut("{} const __proto__;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prop] = * in (true.__defineGetter__(\"__proto__\", gc))) { }");
tryItOut("if(let (__parent__, let = #1#) this) ; else  if ([null].sort()) const __parent__; else {{} }");
tryItOut("/*infloop*/for(let [, __parent__, ] = ({ __count__: __noSuchMethod__, prop: __iterator__ }) = __iterator__ = function ([y]) { } ? (__parent__ = null) : __iterator__.constructor setter= ((new Function(\"return [];\"))).apply;  /x/ .isPrototypeOf(false); typeof (1e81.eval(true).__count__)\n) {L:with({constructor: ([,,z1] <<= #3={a:#3#})})break ; }");
tryItOut("if(({prop: *, constructor: <x><y/></x> }).isPrototypeOf(constructor = *::*)) const prototype, __proto__ = <><x><y/></x></>; else ;");
tryItOut("L: let (__count__ = window, __proto__ = default: ) { *; }");
