tryItOut("if(function ([y]) { }) {(window); } else  if (*) {export *; } else (<x><y/></x>);");
tryItOut("{}");
tryItOut("L: {/*infloop*/L:for(const __noSuchMethod__ = -3/0; <><x><y/></x></>; [,]) {var __iterator__, __parent__;{} }M:if(<><x><y/></x></>\r) { if ( /x/g ) gc()} else {return @foo\t;export prototype; } }");
tryItOut("/*infloop*/do gc() while(<><x><y/></x></>);\nreturn;\n");
tryItOut("/*infloop*/L:while(this)export prop;");
tryItOut("gc()");
tryItOut("switch(((function  __parent__ (prototype, prototype\n) { yield [,,] } ).call).call( /x/ ,  /x/g , <x/>).throw(<x/>)) { default: let __iterator__ = <x/>, prop;break; case 9: break; break; case 9: break; yield\n<employee id=\"1\"><name>Joe</name><age>20</age></employee> }");
tryItOut("M:with({__count__: prop = __proto__ = <y><z/></y>})this;");
tryItOut("if(#1# ? function(q) { return q; }(null, <y><z/></y>) : this) { if (new Math.sin( \"\" )) {;yield; }} else throw <x><y/></x>;");
tryItOut("/*infloop*/M:for(const __parent__; <x/>.throw( '' ) < @foo.__count__; this) L:with((false.unwatch(\"__count__\")))prototype = prototype");
tryItOut("if(__proto__--) { if (({prop: <y><z/></y> @ false}).*) export __proto__; else (this);}");
tryItOut("const prop, constructor;\n/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in constructor) ; const __iterator__;\n");
tryItOut("if([z1,,] .@*:: 1e4) {let constructor = *::*; }");
tryItOut("{yield @foo; }");
tryItOut("{export *; }");
tryItOut("/*for..in*/for(var prototype = this.zzz.zzz in <><x><y/></x></>) export prop;");
tryItOut("/*infloop*/for(let ({ __parent__: ({ window: constructor }), function  __parent__ (__iterator__, prop) {  } : ({ __count__: __count__ }) }) = @foo; ({a1:1}); (prototype = [].prop)) {-3/0;; }");
tryItOut("/*for..in*/for(const prop in ((Math.pow)(let ([, prop, , , prototype] = <y><z/></y>) (return __noSuchMethod__))))while(((yield (this.__defineSetter__(\"constructor\", ((function ([y]) { })()).watch)))) && 0)export prop;\f");
tryItOut("/*for..in*/for(const __parent__ in (((<x/>).watch)((( '' ).__defineSetter__).call(__iterator__, <x><y/></x>)))) '' ");
tryItOut("/*infloop*/for((eval); (uneval(new [constructor].some(function  prop () { yield; } )(([11,12,13,14].some))));  /x/g ) /*for..in*/L:for(__noSuchMethod__ in  /x/g  | <><x><y/></x></>) if(('haha'.split).call(<><x><y/></x></>, <y><z/></y>))  else  if (__noSuchMethod__.constructor = #3={a:#3#}) ");
tryItOut("return false;");
tryItOut("yield; const __iterator__\n const prototype;");
tryItOut("if() {let __proto__; } else  if (yyy.(__parent__.__noSuchMethod__ setter\n= 1e81 .. ((function(q) { return q; }).call(({a1:1}),  '' , prop)) ^ (undefined || <x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\")))) throw  '' ;");
tryItOut(";");
tryItOut("L: /*infloop*/M:\fdo {return this;(@foo); } while(null);");
tryItOut("([15,16,17,18].sort((this).__defineSetter__, (String((window.valueOf(\"number\") .@x::  /* Comment */this))) <= (window.@*)))");
tryItOut("if(((new Number(Function(), <><x><y/></x></>)).call(void yield -0 instanceof __noSuchMethod__, ({ __parent__: __count__ }) = true))) export *;");
tryItOut("let([({ __proto__: __count__, prototype: ({ __proto__: prototype, prop: __proto__ }) }), , ({ __parent__: [constructor, constructor, , , ] }), , ] = ((<x><y/></x>);.({})) .@*::  /x/  = <>yield <x/></>, [, prototype] =  '' ) ((function(){with({}) { gc() } })());");
tryItOut("{}\ngc()\n");
tryItOut("if([,][<x/>]) true; else  if (((uneval(0x99)))) {} else {const __proto__;let prop = prototype, __parent__; }");
tryItOut("/*infloop*/while((Math.sin).call((this.zzz.zzz), )){}");
tryItOut("let ([, __proto__, , ] = new function  __noSuchMethod__ (constructor) { yield *::* } ()) { throw window; }");
tryItOut("return; const __iterator__;");
tryItOut("/*for..in*/for(const __proto__ in [ /x/g .__defineGetter__(\"__proto__\", function (__proto__) { var constructor; } ) for each (__iterator__ in <y><z/></y>) for (prop.__proto__ in *) for each (prop in  /x/g )]) {const __iterator__ = *::*; }");
tryItOut("{const __noSuchMethod__ = <x><y/></x>;export function::prototype; }");
tryItOut("let (__iterator__, prop = this) { gc() }");
tryItOut("let(__parent__) ((function(){;})());");
tryItOut("/*infloop*/for(var __proto__ = (p={}, (p.z = @foo)()); __iterator__++; 'fafafa'.replace(/a/g, (1 for (x in [])))) {@foo; }\ngc()");
tryItOut("export __parent__\nyield this; const __proto__;");
tryItOut("__count__");
tryItOut("/*infloop*/for(const ({ prototype: __noSuchMethod__ }) = (let (prototype = (this.yoyo(<x><y/></x>))) __iterator__.constructor); (++0.1)--; function () { return const __proto__ } ((({__proto__: <y><z/></y>,  get __count__ prop (__noSuchMethod__, function::prototype) { yield 1e+81 }  })).propertyIsEnumerable(\"__noSuchMethod__\"),  /x/  |= prop)) /*for..in*/for(const __parent__ in ((function(y) { yield y; break ;; yield y; })(({constructor getter: Math.pow,  get __iterator__ prop (constructor) { return -1 }  }))))throw true\n");
tryItOut("throw prop;");
tryItOut("if([z1,,]) {return;with({({ __noSuchMethod__: ({ __iterator__: __count__ }), __proto__: __count__ }): (__count__.__proto__ = (4..throw(__iterator__)))}){with({prototype: undefined}){(-0) } } } else  if (({a2:z2})) \f{export *\n } else /*for..in*/L:for(var [getter, __proto__] = 1.2e3 in window) switch([[]]) { default: throw <x/>;break;  }");
tryItOut("gc()\nlet constructor;");
tryItOut("export __iterator__; const constructor;");
tryItOut("/a/gi");
tryItOut("let (constructor = ([1e-81])(*::* /= false, <><x><y/></x></>)) { /*infloop*/M:while(*::*){export *; } }");
tryItOut("if( /x/ ) { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop( \"\" ) in ((<y><z/></y>))) {while((-1) && 0){try { throw function ([y]) { }; } finally { function () { yield [1,,] }  }  }if((yield __noSuchMethod__)) {yield <x><y/></x>; } }");
tryItOut("{}\nswitch( \"\" .__iterator__ =  /x/g ) { case 7: break; case (new function(y) { yield y; var __iterator__, prototype = <y><z/></y>;; yield y; }(-0)): default: return;break; case new (<x><y/></x>)(<><x><y/></x></>):  }");
tryItOut("return .__defineSetter__(\"__iterator__\", function (__proto__, __noSuchMethod__) { return <> export </> } );");
tryItOut("/*for..in*/for(__count__ = @foo.__lookupGetter__(\"constructor\") in *) do return __noSuchMethod__; while((0.1) && 0);");
tryItOut("do constructor = __count__; while(((prototype.constructor getter= ({}).hasOwnProperty *= this % <x><y/></x>)) && 0);");
tryItOut("let (({ __parent__: ({ prototype: ({ __parent__: ({ __count__: __proto__, __proto__: __count__ }) }), prototype: ({ __noSuchMethod__: [], __proto__: [, constructor, , prototype, ] }) }) }), __parent__) { with((~@foo))if(<><x><y/></x></>) {constructor = false, constructor = <y><z/></y>; } else  if (<x><y/></x>) gc() else {export *;yield <><x><y/></x></>; } }");
tryItOut("let ({ __noSuchMethod__: constructor }) = 3/0;");
tryItOut("switch([\f({ __proto__: __parent__ }) = ({ get constructor __parent__ (prop, prototype)@foo }) if (<><x><y/></x></>)]) { default: break;  }");
tryItOut("/*infloop*/L:while(<x/> |= constructor.(<x><y/></x>)){continue ;return 3; }");
tryItOut("/*infloop*/for(const constructor; <x/>; *::*.hasOwnProperty(\"prop\")) yield;");
tryItOut("return true;");
tryItOut("/*for..in*/for(const __parent__ = (1e-81.__lookupSetter__(\"prop\")) < @foo in new (0.1)(#1=[#1#], function ([y]) { })) {if(<x><y/></x>) { if (__noSuchMethod__) return;} else {throw <y><z/></y>;throw  /x/g ; }throw <><x><y/></x></>; }");
tryItOut("if(\n<x><y/></x> % prop = *) M:if( \"\" ) export __noSuchMethod__; else  if ((({constructor: -0, __noSuchMethod__ setter: (1 for (x in [])) }).__parent__ = (({__proto__: *\t}))) %= <><x><y/></x></>\n) continue M; else Number()");
tryItOut("while(([__iterator__, __proto__] = (({prop: [1,,], each: window }))) && 0)L:if((let (__noSuchMethod__) function(id) { return id }[true])) {let prototype; } else {return; }");
tryItOut("__parent__ = __proto__;");
tryItOut("L:switch( /x/ .watch(\"prototype\",  for ((__noSuchMethod__) in <x><y/></x>) for each (__parent__ in  /x/ ) for each (__noSuchMethod__ in <x/>))) { case 5: gc()default: /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <x><y/></x>) {break M; }break;  }");
tryItOut("__iterator__ = __parent__;");
tryItOut("undefined;return;");
tryItOut("let (<><x><y/></x><x><y/></x><!--yy--></> = (<x/>++)) { yield; }");
tryItOut("M:if(( /x/g .hasOwnProperty(\"constructor\") instanceof (uneval(__proto__)))) { if ((<x><y/></x>.__count__)) yield window;\r else return;}");
tryItOut("for(let y in []);");
tryItOut("{if(3/0) return h; else  if ( /x/ ) ; }");
tryItOut("do gc() while(((let (__proto__ = <><x><y/></x></>) ++undefined)) && 0);");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(\tconst ((*))(window--) in (<><x><y/></x></> ^ *)) /*for..in*/for(var prototype in ((gc)(window))){033; }");
tryItOut("yield *::*.watch(\"function::yield\", new Function);");
tryItOut("return;");
tryItOut("/*infloop*/for(var __noSuchMethod__; <x/>; <x><y/></x>) {export *;throw 5.0000000000000000000000; }");
tryItOut("if((Function())) {yield;export *; } else  if ((__noSuchMethod__.__lookupGetter__(\"__proto__\").__lookupGetter__(\"prop\"))) {let __iterator__ = [1,,], constructor = <>{(-0);<><x><y/></x></>; }</>; }");
tryItOut("M:if(__count__ = \n(undefined ? 0/0 : <x/>)) { if ((new Function(\"gc()\"))) const __proto__; else export *;}");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*infloop*/for('fafafa'.replace(/a/g, ({a2:z2})); <x/>.watch(\"__count__\", __proto__); constructor) let (prototype = <x><y/></x>) { var constructor = <x><y/></x>, __proto__; }");
tryItOut("L: {break ; } const constructor;");
tryItOut("/*infloop*/do break ; while(#1=[#1#] = (-1));");
tryItOut("do {let __proto__ = __noSuchMethod__;, prop = false; } while(([15,16,17,18].map(function  __count__ () { return; } , __count__ = null)) && 0);");
tryItOut("if((uneval(window))) {gc() }");
tryItOut("prop;");
tryItOut("/*for..in*/for(let __iterator__ in (('haha'.split)(3))){if(window([1,,])) { if (prop) var function::prop, __noSuchMethod__; else }__count__ }");
tryItOut("L: {if(false) {export prototype; } else  if (prop = <y><z/></y>) {export __parent__;throw <x><y/></x>; } }");
tryItOut("/*infloop*/for(let prop = 3.141592653589793;  /x/ ; 4.) this;");
tryItOut("do L: {const __iterator__ = return  \"\" ;;var __proto__; } while(((uneval(<><x><y/></x></>))) && 0);");
tryItOut("with({prop: this.zzz.zzz}){<y><z/></y>throw  '' ; }");
tryItOut("var function::x::prototype = *;");
tryItOut("{;\tcontinue ; }");
tryItOut("prop = __proto__;");
tryItOut("/*infloop*/M:for(let __count__; *; <x/>) {function  __iterator__ (constructor) { return this }  }");
tryItOut("if((function ([y]) { } >> null.throw((*.hasOwnProperty(\"prop\"))))) { if () {( \"\" );{} } else yield;\nthrow <><x><y/></x></>;\n}");
tryItOut("this.zzz.zzz;");
tryItOut("if(function(id) { return id }) ;");
tryItOut("/*for..in*/for(prototype = ((-@foo) | ( ''  % window)) in null) export constructor;");
tryItOut("if(((uneval((p={}, (p.z = *)()))))) yield __iterator__;");
tryItOut("/*for..in*/for([__iterator__, prop] = <x><y/></x> , function::__count__ in <x><y/></x>.watch(\"constructor\", this)) do {if(__parent__) { if (this) {throw  '' ;; }} else let __count__, prototype; } while((@foo) && 0);");
tryItOut("/*infloop*/L:for(Function(true, 0x99); ((<><x><y/></x></>).__defineSetter__)(); __iterator__\n) let __count__;");
tryItOut("while((constructor =  \"\" .isPrototypeOf([<><x><y/></x></>].some((true).apply))) && 0){this;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __proto__ in <><\fx><y/></x></>) (*::*);");
tryItOut("if(*::*) constructor, prototype = <><//h\nx><y/></x></>; else {{} }");
tryItOut("{__noSuchMethod__ = <x><y/></x>, __iterator__ = arguments\n/*for..in*/for(let __parent__ = <><x><y/></x></> in *) ; }");
tryItOut("{yield <x/>;/*infloop*/for(<><x><y/></x></>; __noSuchMethod__; <><x><y/></x></>) var __proto__ = yield, prop; }");
tryItOut("/*for..in*/L:for(var [prop, prop] = let constructor; & ((p={}, (p.z = [])())) in __iterator__|=true) throw  '' ;");
tryItOut("let(__iterator__) ((function(){let(__iterator__) { for(let y in []);})());");
tryItOut("let (@foo, __iterator__) { yield; }");
tryItOut("/*for..in*/L:for([prototype, __noSuchMethod__] = (__parent__.prop = undefined\n\f\n) in new (window)() @ [z1] >=  \"\" ) continue ;");
tryItOut("L:if(<y><z/></y>) return <y><z/></y>; else {}");
tryItOut("with(yield (new Function(\"const __noSuchMethod__, __parent__;\"))(<x><y/></x>)/*\n*/)this.zzz.zzz;");
tryItOut("/*for..in*/for(get = this.__defineGetter__(\"__parent__\", function (__iterator__, __count__)prototype) in <y><z/></y>) continue ;");
tryItOut("{; }");
tryItOut("/*infloop*/while(true) { return (delete ([1] for (__noSuchMethod__ in  '' ))) } ");
tryItOut("if((undefined ^ __noSuchMethod__ = __count__)) {; } else  if (<><x><y/></x></>(<y><z/></y>, 3) {export *; }");
tryItOut("L:if(@foo) { if (<x/>) export *; else }");
tryItOut("with([[1]] -  '' ){{(new Function(\";\")) }__noSuchMethod__ = constructor; }");
tryItOut("/*for..in*/for(let constructor in ((function(q) { return q; })(__proto__.unwatch(\"__noSuchMethod__\")))){(0.1);return; }");
tryItOut("yield;");
tryItOut("/*infloop*/L:for(var ({ prototype: prop, try { true; } finally { {} } : constructor }) = ((let (__noSuchMethod__ = __noSuchMethod__) <><x><y/></x></>).yoyo((__parent__.__count__ = *))); __parent__.constructor = window.__defineSetter__(\"prototype\", Math.sin); [__noSuchMethod__.( /x/g )]) {yield *::*;with(false)export *; }");
tryItOut("if(new ({}).hasOwnProperty( /x/ )) {/*infloop*/for(__count__ =  '' ; @foo; 033) export *;switch((this.__defineSetter__(\"prop\", (function(q) { return q; }).call))) { case 6:  } }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: prototype }) = __noSuchMethod__ = true.valueOf(\"number\"); *::*; __count__(<><x><y/></x></>) = __parent__.function:: '' , {} getter= [1,2,3,4].slice) const __count__;");
tryItOut("if(<x/>) {break ; } else  if (this.__defineGetter__(\"__proto__\",  \"\"  || null)) {yield; } else return;");
tryItOut("M:do {#1#; } while(((new Function).call(<x><y/>\t</x>, window)) && 0);");
tryItOut("continue L");
tryItOut("/*for..in*/for(__iterator__ in ((Math.pow)([__count__] = __count__))){window/*infloop*/M:for(__iterator__ =  '' ; prop; 1.3) return; }");
tryItOut("with({x::__noSuchMethod__:  /x/ .__lookupGetter__(\"__noSuchMethod__\")}){Math.sin }");
tryItOut("while((__iterator__.__defineGetter__(\"__parent__\", (new ((1 for (x in [])))(* &= <x/>)).call)) && 0){M:with(yield [z1,,]){{}*::* } }");
tryItOut("/*for..in*/M:for([__noSuchMethod__, constructor] = function(id) { return id } in <!--yy-->.((eval(\"[prop].filter(gc)\", __count__.hasOwnProperty(\"__proto__\"))))) {let(__noSuchMethod__ = <><x><y/></x></>, __parent__) { return window; }");
tryItOut("'haha'.split");
tryItOut("{<x><y/><\t/x>return <x/>; }");
tryItOut("/*infloop*/L:for(const __iterator__ = {} != window; <y><z/></y>([,,]); ({set: window ==  \"\" })) {L:with({__iterator__: __noSuchMethod__})throw <><x><y/></x></>; }");
tryItOut("if(eval(\"({ prototype: ({ constructor: __iterator__, __noSuchMethod__: __noSuchMethod__ }) }) = <x/>\", (function  __noSuchMethod__ (__parent__)__noSuchMethod__).call([z1,,], ))) let(constructor = 1.3, prop) { return;");
tryItOut("with(<x><y/></x>){throw __proto__; }");
tryItOut("/*for..in*/for(let prototype = new ({}) in [z1].eval(window).isPrototypeOf(this.zzz.zzz)) /*for..in*/M:for(const __parent__ in ((Math.pow)(@foo.__count__ =  \"\" ))){ }");
tryItOut("; const __noSuchMethod__;");
tryItOut("/*infloop*/do {__noSuchMethod__ } while(1.2e3);");
tryItOut("switch((({__parent__ setter: 'haha'.split }))) { default: break; /*infloop*/for(__proto__ = *; new (function(y) { yield y; break ;; yield y; })(); __count__ = new <y><z/></y>(false, null)) continue L;case 0: L:if(null) {gc()export prop; } else  if (window) throw <x><y/></x>; else {yield <x><y/></x>;{} }break;  }");
tryItOut("/*infloop*/for(let __noSuchMethod__ = prototype = ([] ^ <x/>)[new (eval)()]; (__iterator__ = prop\n); ([z1,,].watch(\"prototype\", [1,2,3,4].slice))) {prototypegc() }");
tryItOut("let __noSuchMethod__ = this, prop =  '' ");
tryItOut("/*for..in*/for(var __parent__ in __parent__ = #1=({constructor:  /x/ })) {(prototype); }");
tryItOut("continue ; const __iterator__;");
tryItOut("/*for..in*/L:for(var /a/gi.constructor =  /x/g [<y><z/></y>] in window.prototype = true( \"\" )) /*infloop*/for(var ({ prototype: constructor, prototype: prototype }) = ([z1,,]).__defineSetter__; (undefined | null); eval(\"\", __iterator__)) ;");
tryItOut("/*for..in*/for(var [__count__, __count__] = -1 in <x><y/></x>) {yield;var __count__ =  \"\" ; }\nthrow __proto__;yield\nwith(0x99)yield  '' ;");
tryItOut("{ }");
tryItOut("let(__iterator__ = ([*::*(/.__parent__ = __iterator__), prototype) ((function(){return this;})());");
tryItOut("switch([<y><z/></y>.__noSuchMethod__].filter(function  __iterator__ (({ __count__: __iterator__, prop: __noSuchMethod__ })) { yield *::*.__noSuchMethod__ } )) { case function(id) { return id }: default: ;case 1: break;  }");
tryItOut("gc()if(\n@foo.__defineGetter__(\"prop\", Math.pow) ^ (((new Function(\"\"))).apply).call(4., this)) { if (<x><y/></x>.__lookupGetter__(\"__count__\") ?  ''  : (*::* = <x><y/></x>)) { /x/g yield 3/0; } else return;}");
tryItOut("constructor;yield window;");
tryItOut("for(let y in []);");
tryItOut("switch((+__iterator__)) { case 3: var <x><y/></x>;break; /*for..in*/for(prototype in <y><z/></y>) {yield; }yield; }");
tryItOut("{L: {return constructor;let (prop = [1], constructor = true) { L: gc() } } }");
tryItOut("if((((__noSuchMethod__.function::prototype))(const __count__))) { if (function  prototype (prototype, prototype) { yield <><x><y/></x></> } (<x><y/></x>,  /x/ )) /*for..in*/for(let constructor in ((Math.pow)(this))){yield (function ([y]) { })(); }} else {/*infloop*/for(var __iterator__; *; <><x><y/></x></>) {Function } }");
tryItOut("throw prop;");
tryItOut("if(((-0).*)) {yield; } else ;");
tryItOut("do {if(prototype) { if ((({}).hasOwnProperty(null, 1e4))) {gc() } else {export *;const , __iterator__; }}let  /x/g  =  /x/g ; } while((( \"\"  .@*:: <><x><y/></x></>)) && 0);");
tryItOut("if((true.watch(\"__noSuchMethod__\", <><x><y/></x></>))) /*for..in*/M:for(var constructor =  ''  in <x><y/></x>)  else  if (__parent__ *= undefined) /*for..in*/L:for(var prop in ((Function)(__noSuchMethod__)))gc()");
tryItOut("/*for..in*/for(var [__parent__, __proto__] = new <><x><y/></x></>(__noSuchMethod__, 1.2e3).__parent__( /* Comment */__parent__.(<><x><y/></x></>\t)\f) in this) if(this) break ; else  if ((null)\f()) function (prop) { return  /x/  }  const prop;");
tryItOut("\nreturn;\n");
tryItOut("if(<bbb xmlns=\"-033 <<  /x/ [4.]\">yyy</bbb>) {constructor, __parent__; } else \t if (constructor.( /x/ )) for(let y in []); else {export *;constructor = #1#; }");
tryItOut("/*infloop*/while(({ set prototype(__proto__) { return return } , __iterator__ setter: function ()*.yoyo(this) })){true;let (__iterator__) { export *; } }");
tryItOut("/*for..in*/for(const [prototype, __count__] = (delete <><x><y/></x></>) in -3/0) (window, 0\t);");
tryItOut("/*for..in*/for(const prototype in (++prop)) {(__parent__); }");
tryItOut("throw __count__;");
tryItOut("if((prototype = <><x><y/></x></>)) return; else  if (--<><x><y/></x></>) {yield; } else {gc(){} }");
tryItOut("/*for..in*/for(let __iterator__ = {} in  /* Comment */(-0)) {/*infloop*/for(var prototype;  /x/g ; {}) {; }<><x><y/></x></>; }");
tryItOut("do {export *;function(y) { yield y; return  \"\" ;; yield y; } } while((__iterator__ = window) && 0);");
tryItOut("export __noSuchMethod__\nconst __parent__ = 0x99, prop;");
tryItOut("/*infloop*/for(({ prop: __parent__ }) = ([this]); <><x><y/></x></>.isPrototypeOf(__proto__); this.__defineGetter__(\"\", /a/gi))  /x/ ");
tryItOut("{E }\ndo {__count__ = __iterator__; }\t while((new Number(default: ;break; , this)) && 0);");
tryItOut("L:switch(__count__) { case <y><z/></y> ^=  /x/g : default: break; break;  }");
tryItOut("{eval/*infloop*/M:for(new ({}).hasOwnProperty(new Function( /x/  - true, (-0)), new 1e-81()); prop.((((false).watch).call(null, ))); __proto__.__iterator__ setter= function(y) { yield y; yield *::*;; yield y; }.__defineSetter__(\"__proto__\", new Function)) export *; }");
tryItOut("/*infloop*/L:for(let constructor = false; <y><z/></y>; <x><y/></x>) yield;");
tryItOut("/*infloop*/for(var __noSuchMethod__; +\nnew Iterator(); __count__.__iterator__) {if((1 for (x in []))) if(<><x><y/></x></>) { if (<><x><y/></x></>) {throw  /x/g ;throw __proto__; }} else {; } else  if (<></*x>__iterator__: <x/>\n<y/></x></>()) {;{return <><x><y/></x></>; } } else <x\t><y/></x>; }");
tryItOut("{};");
tryItOut("with((-()))if([,]) throw <x><y/></x>; else {continue ;; }");
tryItOut("L:if(__noSuchMethod__ = ([__parent__ =  \"\"  if (window)])) { if (Array()) throw ({a2:z2});} else {/*infloop*/do return true; while([,,].@foo); }");
tryItOut("/*infloop*/for(const __iterator__; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; __count__.__count__ setter= ({}).__lookupGetter__) {<x><y/></x> }");
tryItOut("gc()");
tryItOut("switch() { case __parent__.__iterator__ = null[__parent__.valueOf(\"number\")]: break; break; default: with(<x/>.propertyIsEnumerable(\"__noSuchMethod__\")){export *; }break; case (this.__defineSetter__(\"<><x><y/></x></>\", [1,2,3,4].map)): /*for..in*//* nogeckoex bug 349964 */ for  each(__proto__.__proto__ in  '' ) {export *; }let (__count__) { /*for..in*/M:for(constructor =  ''  in -0)  }\ncase 5: case 1: {} }");
tryItOut("/*for..in*/for([prop, prop] = function::prototype\f.__proto__ = [] in (+<><x><y/></x></>)) for(let y in [5,6,7,8]) let prop = <x/>;\n__iterator__ = false;\n");
tryItOut("/*for..in*/for(var [__count__, __noSuchMethod__] =  /x/  in window) return  /x/ ;");
tryItOut("if(([true >>>=<x><y/></x>])) { if (<><x><y/></x></>.__defineGetter__(\"false\", Math.sin)) *::*; else \ndo {} while((__proto__) && 0);}");
tryItOut("do export __count__; while((let (__noSuchMethod__ = __iterator__, prototype = this) <x/>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const  /x/  ? __parent__ : <x/> in <>yyy</>[__proto__ === window]) {{} }");
tryItOut("switch( '' ) { default:  }");
tryItOut("if(*) { if (*::*) {throw 4.;throw this; } else {yield;return; }}");
tryItOut("if(this | <x><y/></x>) throw  \"\" ; else export *;");
tryItOut("if((__count__)) { if (new prototype.prop()) {break M; } else export *;}");
tryItOut("/*for..in*/for(var __proto__ = <x><y/></x> &  /x/ () in yield;) {throw *::*;let __proto__, __count__ = <><x><y/></x></>; }");
tryItOut("var __parent__ = <><x><y/></x></>;");
tryItOut("let (__proto__ =  \"\" , __iterator__ = __iterator__) { (-3/0); }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__.__iterator__ in <x/>) {\tyield <><x><y/></x></>;(<y><z/></y>); }");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <><x><y/></x></>) let prop = constructor, prop;let prototype; } while(((prop =  '' )) && 0);");
tryItOut("/*for..in*/M:for(const __count__ = this in prototype) {L: {} }");
tryItOut("<>__count__ = this.zzz.zzz</>");
tryItOut("throw StopIteration; const __proto__;");
tryItOut("if((yield (<x><y/></x>.eval(<x><y/></x>))).@*) {export __iterator__;yield (<y><z/></y> *= null); } else  if ((this.__defineGetter__(\"__proto__\", Math.sin)).@foo) /*\n*/return *");
tryItOut("if(<y><z/></y> <=  /x/ ) { if ((constructor.__lookupGetter__(\"__count__\"))(({constructor: 1e-81})).__defineSetter__(\"__parent__\", (uneval(window)))) {yield __noSuchMethod__; } else {return; { yield  /x/  } ; }}");
