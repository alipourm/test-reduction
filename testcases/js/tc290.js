tryItOut("{__proto__.\fconstructor = __parent__;\n }");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("do {{} } while((prop = <y><z/></y>) && 0);");
tryItOut("do {/*infloop*/for(const [__proto__] = <x><y///h\n></x>.(*); (new (window)(<x><y/></x>)); var constructor = true) return <x/>;/*for..in*/M:for(let constructor = <><x><y/></x></> in __iterator__) {;return; } } while(((prototype+=(([1] ? <x><y/></x> : *))[(<x><y/></x>.prop = #1#)])) && 0);");
tryItOut("/*infloop*/do {with({__proto__: (p={}, (p.z = 0.1)())})/*for..in*/L:for(var [__proto__, prototype] = *::* in undefined) {prototype = {}, __iterator__ = arguments;yield; }export *; } while(windowprototype in undefined())");
tryItOut("/*infloop*/for(let __iterator__ = (*.unwatch(\"__iterator__\")); ({__iterator__: undefined }); (<x/>.eval(undefined))) let (__iterator__ = constructor.constructor) { {constructor = false; } }");
tryItOut("\n");
tryItOut("if(__proto__ = null) const __parent__ = false; else {let constructor = *::*; }");
tryItOut("/*for..in*/for(prototype in 1e4) {gc()throw [,,z1]; }");
tryItOut("return;");
tryItOut("/*infloop*/for(__count__; ([<x><y/></x>].sort(constructor))\r >= *.__parent__; \f(p={}, (p.z =  /* Comment */null)()).__noSuchMethod__) return (this.zzz.zzz);");
tryItOut("/*infloop*/for(*::*; (@foo); __noSuchMethod__|=({a2:z2})) if(null) ; else  if ({}) {return window;__noSuchMethod__ = @foo; } else {\treturn <\fx><y/></x>;export *; }");
tryItOut("/*infloop*/for(var constructor = 0x99 ? 3.141592653589793 : null; (prototype = <x>\f<y/></x> / *); <><x\t><y/></x></>.prototype.watch(\"__iterator__\", function ()constructor.((-1)))) {M:do {} while(((prototype = (prototype))) && 0); }");
tryItOut("return;");
tryItOut("yield true\n/*for..in*/for(const __iterator__ in ((function (__count__, __count__) { yield <y><z/></y> } )(prop)))yield *;");
tryItOut("let constructor\n");
tryItOut("/*infloop*/M:while(<><x><y/></x></>)gc()");
tryItOut("this.zzz.zzz;");
tryItOut("{M:switch((yield.prop getter= [1,2,3,4].slice).isPrototypeOf((false)(*, [,,]))) { default: /*infloop*/L:for(var constructor;  /x/g ; true) {return 3.141592653589793;gc() } }throw (({__proto__: \tthis })); }");
tryItOut("/*for..in*/ = ((constructor.__parent__) = function(y) { yield y; L: __count__, constructor = undefined;; yield y; }) in <><bbb xmlns:ccc=\"0x99.valueOf(\"number\")\"><ccc:eee></ccc:eee></bbb></>') ");
tryItOut("with({}) with({}) { with({}) export *; } ");
tryItOut("M:with({__noSuchMethod__: -3/0})/*infloop*/for('fafafa'.replace(/a/g, Math.sin); (p={}, (p.z = *.@*)()); <x><y/></x>.yoyo([__parent__].sort(function  __proto__ (__parent__) { yield <><x><y/></x></> } ))) {var prop = [11,12,13,14].sort, __parent__ =  /x/g ; }");
tryItOut("/*for..in*/\f\nM:for(let prop in (-0)) {}");
tryItOut("/*for..in*/for(constructor in prop.watch\r(\"function::__count__\", true)) yield <><x><y/></x></>;");
tryItOut("/*infloop*/L:for(var __iterator__; @foo; yield false;) <y><z/></y>;");
tryItOut("/*for..in*/for([constructor, __noSuchMethod__] = #1=[(false % *)] in  /x/ ) export set;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/({a1:1}).prototype.__proto__");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __count__: prototype, __parent__: __count__ }) }) = this.__defineSetter__(\"function::__iterator__\", eval);  /x/  > this; true.__defineGetter__(\"constructor\", function () { const prop = <y><z/></y>; } )) {__parent__ }");
tryItOut("throw StopIteration;");
tryItOut("M:switch('fafafa'.replace(/a/g, Math.pow) + (__noSuchMethod__ setter: ((this.zzz.zzz)).__defineSetter__.@foo)) { default: /*for..in*/for((__noSuchMethod__) in ({ get __proto__ prop \t() { return window } ,  set constructor prop (constructor, prop)__iterator__ })) return  /x/ ;break; break; case (*::*--):  }");
tryItOut("/*infloop*/L:do {if(constructor = function  prop (__noSuchMethod__) { return constructor = <y><z/></y>, __proto__; } ) { if ( /* Comment */undefined) {return;return <x/>; } else {undefined; }} } while(prototype = (eval(\" \\\"\\\" \", ({})) !== (1.3.watch(\"__count__\", 'haha'.split))));");
tryItOut("__count__ = __proto__;");
tryItOut("yield");
tryItOut("new Function\n");
tryItOut("/*for..in*/for(var __parent__ = prop = <><x><y/></x></> in [1]) {throw 1.3;gc() }");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("{this; }");
tryItOut("/*for..in*/for([__iterator__, __iterator__] = - \"\"  in [15,16,17,18].some(this.__defineSetter__(\"prop\", (gc).call), [<><x><y/></x></>])) { }");
tryItOut("/*infloop*/for(__parent__ = <x><y/></x>; undefined.__lookupSetter__(\"__parent__\"); (__proto__ = .2)) {__iterator__; }");
tryItOut("yield\nL: {} const __iterator__;");
tryItOut("/*infloop*/for(var __count__; export *.watch(\"prototype\", /a/gi); (({ function::prototype: __iterator__ }) = <><{__parent__}>yyy</{__parent__}></>)) /*for..in*/for(__parent__ in @foo) {return *::*; }");
tryItOut("L: if(true) function  __iterator__ () <x/>.__defineGetter__(\"__noSuchMethod__\", (<x><y/></x>).__defineSetter__), ((new 0x99).__lookupGetter__(\"constructor\")) { 1.3 }  else return;");
tryItOut("/*infloop*/for(__noSuchMethod__; const __proto__, __proto__; eval(\";\",  /x/ )) var prototype = window;");
tryItOut("do {export constructor; } while((<x><y/></x>) && 0);");
tryItOut("/*for..in*/for([constructor, __iterator__] = ~__noSuchMethod__ *= ({a2:z2}) in (({ get constructor(__proto__, prototype) { yield (function ([y]) { })() } , __iterator__ getter: 'haha'.split }))) let (__noSuchMethod__ = __noSuchMethod__) { const __iterator__ = null, prop; }");
tryItOut("M:with({({ __proto__: (\t{ __iterator__: ({ __proto__: prototype, prop: prop }), __proto__: 3/0['prototype'] }) }): ({__iterator__: (new (<y><z/></y>)()), __count__: (@foo.__defineSetter__(\"prop\", function  prototype (x::prototype, __proto__)function::__count__)) })}){return function(id) { return id };\n }");
tryItOut("if(__count__.__noSuchMethod__ setter= x::constructor =  '' ) {/*infloop*/do {throw constructor;(window); } while(*::*); } else {return; }");
tryItOut("L:if( \"\" ) { if (1e+81) var __parent__, constructor = window; else {return <x><y/></x>; }}");
tryItOut("const constructor, prop;");
tryItOut("if((*::* >>>=null)\f) {function (__noSuchMethod__, __iterator__)<x><y/></x>return 1e-81; } else {__iterator__;export *; }\n");
tryItOut("if(getter.@*) { if ((#1=[#1#].eval(({a1:1})))) /*for..in*/M:for(var [__proto__, prototype] = @foo in [[1]]) gc() else return <y><z/></y>;}");
tryItOut("/*infloop*/\fwhile( /x/g .@foo)L:while(((__parent__.constructor = ( \"\"  >>= <x><y/></x>))(new (@foo).__defineSetter__( /x/g , null).__noSuchMethod__, *::*\r\n)) && 0){{} }while(((function(id) { return id } ?  /x/  : 3/0) >>= ('haha'.split)([[1]], [z1])) && 0)/*infloop*/for(<x><y/></x> <= [[]]; ~<x><y/></x>; \nthis) if([,,]) default: case 6: break; case <y><z/></y>: prototype = <><x><y/></x></>, __iterator__ = window;break; case 3: 'haha'.splitbreak; case 7: break; case ({}): export *;break; case 9: break; case <><x><y/></x></>: (<><x><y/></x></>);");
tryItOut("/*infloop*/L:do (<><x><y/></x></>); while(__parent__);");
tryItOut("continue L; const prop;");
tryItOut("return const __parent__;");
tryItOut("{const __parent__, __proto__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(var [__proto__, __iterator__] = null.unwatch(\"prop\") in {}) return <><x><y/></x></>");
tryItOut("with({__parent__: ({ set prop(__noSuchMethod__, __parent__)<><x><y/></x></>, __proto__: <x><y/></x> })}){var __parent__, __proto__for(let y in [5,6,7,8]) this.zzz.zzz; }");
tryItOut("if([1,2,3,4].map(<y><z/></y>,  /x/ )) break M; else {gc()return  \"\" ; }");
tryItOut("/*infloop*/for(throw <x/>; __parent__ = <><x><y/></x></>; (prototype = <x><y/></x>)) {var prop = <x/>; }");
tryItOut("/*infloop*/M:for(prop; window; <><x><y/></x></>) return null;");
tryItOut("return #1#;");
tryItOut("export \n*;");
tryItOut("return\n( /x/ .yoyo(-1))\n{}");
tryItOut("/*infloop*/for(033; ({__count__ setter: 'haha'.split }); <x/>.@*.hasOwnProperty(\"prop\")) return;\nlet prop, __count__ = prototype;\n");
tryItOut("if((__iterator__.prototype =  \"\" .__lookupSetter__(\"__noSuchMethod__\"))) {{[,,]\n } }\n");
tryItOut("{export __iterator__;prop = <><x><y/></x></>; }");
tryItOut("with({constructor: <><{__count__}>yyy</{__count__}></>}){do {let __parent__ = <><x><y/></x></>; } while((__proto__) && 0);with({}) return false; }");
tryItOut("switch(({ get __parent__() { \tyield __count__ =  \"\"  }  }).@*) { default:  }");
tryItOut("/*for..in*/for(let {}['__noSuchMethod__'] in (('haha'.split)([1,2,3,4].map))){{var __proto__; const __noSuchMethod__; } }");
tryItOut("M:do {'haha'.splitreturn; } while((*) && 0);");
tryItOut("/*infloop*/M:for(let prop = this; (<x/>).watch.__iterator__ = [false].some((({}).__lookupGetter__).call).__count__; __parent__ = *::* == (Error())) /*infloop*/while((this.zzz.zzz))return;");
tryItOut("\n{}\n");
tryItOut("yield __noSuchMethod__.__iterator__ = *;");
tryItOut("while(( /x/g ) && 0)switch( /x/g ) { default: case 8: yield null; }\n");
tryItOut("/*infloop*/L:while(({})){return <x><y/></x>; }");
tryItOut("/*infloop*/for([,,] in ({get getter: ((1 for (x in []))).call, __parent__: [1,,] |  \"\"  }); typeof prototype = <><x><y/></x></>; [null.isPrototypeOf(@foo)]) __proto__.__count__");
tryItOut("if(([[, __iterator__, , [, , constructor], prop], __iterator__, constructor] = this.__defineSetter__(\"prop\", <x/>))) let prop = <x/>, prop; else  if (window :: ([1])(this,  \"\" )) /*infloop*/for(var prototype = new (<x><y/></x>)(<><x><y/></x></>); this.__defineGetter__(\"__iterator__\", 'haha'.split); <><x><y/></x></> % false) {( \"\" ); } else {{}export *; }\nM:if(((( /x/ ).__defineSetter__).call(__count__, ))) {__count__ = @foo;break L; } else  if (__iterator__.__noSuchMethod__ =  /x/g ) {throw  '' ; }");
tryItOut("/*infloop*/for(const __iterator__; [] = ([prop = [z1,,] for (prop in 0/0) for each (__noSuchMethod__ in <><x><y/></x></>)] ^ ((uneval(*)))); window) gc()");
tryItOut("L: {if((this.__defineSetter__(\"__count__\", new Function))) { if ((#0=__iterator__)) {const __noSuchMethod__ = *;-3/0; }} else return;(*::*); }");
tryItOut("throw __noSuchMethod__;");
tryItOut("if((( /x/  - false).eval((Function).call(0, *)))) { if ((function  prop (prototype, __proto__) { {} } ).call(constructor, <><x><y/></x></>)) {; }//h\n} else {(undefined);(<y><z/></y>); }");
tryItOut("return;");
tryItOut("with(({prototype setter: [1,2,3,4].map }))continue ;");
tryItOut("{return new (__proto__)((function ([y]) { })());/*infloop*/L:while(this.__defineGetter__(\"constructor\", function () { yield this; } ).valueOf(\"number\") @ <employee id=\"1\"><name>Joe</name><age>20</age></employee>)default: case -<><x><y/></x></>: gc()\ncase /a/gi((033)()): export *;case <x/>: (new Function(\"*;\")) }");
tryItOut("{yield;return <y><z/></y>\n }\nthis\n");
tryItOut("if(<x><y/></x> , *::*) yield 0x99;\f");
tryItOut("L:if((new (#1# &= setter)( '' .prototype))) {} else {gc() }");
tryItOut("/*infloop*/for([, __count__, ({ new (<x/>).__defineSetter__(): ({ __proto__: prop })\t }), , ] = (((*::*).watch).apply())[* <= @foo]; __noSuchMethod__ = ([15,16,17,18].some(<><x><y/></x></>, *::*)).__defineGetter__(\"prop\", 'haha'.split); undefined, (function(y) { yield y; ;; yield y; }).call(<y><z/></y>, )) {if(__count__) function::prop; else  if ((this.__defineGetter__(\"prototype\", (yield 1e-81;).__defineSetter__))) {prototype = (-1), __parent__ = arguments;const prototype; } else (undefined); }");
tryItOut("{if(1.2e3) (window);export *; }");
tryItOut("/*infloop*/while([1,2,3,4].map((Math.sin), this.__defineSetter__(\"prop\", (1.3).watch) >> __iterator__ = <><x><y/></x></>))with({__noSuchMethod__: window})export *;");
tryItOut("/*for..in*/for(const constructor in ((__count__)() === (\nbreak M;))) if(new ((1 for (x in [])))()) let __proto__ = <x/>\n");
tryItOut("M:\tif(\n<x><y/></x>) { if (<><x><y/></x></> if (<y><z/></y>)) /*infloop*/do {* } while(true);} else yield;");
tryItOut("prototype");
tryItOut("continue ");
tryItOut("/*for..in*/for(const [constructor, __count__] = (<x><y/></x>.watch(\"prop\", function (__count__, __noSuchMethod__)__parent__)) < __count__.hasOwnProperty(\"__iterator__\") in  '' ) { }");
tryItOut("M:do yield this; while((new (<x/>)()) && 0);");
tryItOut("L: __count__, [[]]");
tryItOut("let (({ prototype: ({ __count__: [, ], prop: [, ] }), constructor: ({ __count__: ({ prop: prototype }), __count__: prototype }) }) = [15,16,17,18].map((new Function(\"throw <x><y/></x>;\")), (-1)), __count__) { /*infloop*/for(let prototype; ([1,2,3,4].map)(((__count__ =  \"\" ) for (prototype in <x/>) for each (__noSuchMethod__ in  '' )));  \"\"  ^= <y><z/></y>) {/*for..in*/for(let getter in ((<x><y/></x>)([1]))){return *::*;export __noSuchMethod__; }throw window; } }");
tryItOut("M:if((<>[*]</>.( '' .@*))) { if ((<y><z/></y>--) ? prototype = <y><z/></y> : this) {/*infloop*/M:for(__parent__; (__parent__); ((function ([y]) { })().__parent__ = -1).unwatch(\"constructor\")) {throw  \"\" ; } } else throw StopIteration;}");
tryItOut("/*infloop*/for(var __parent__; <x><y/></x>; undefined) {export *; }");
tryItOut("const prop, __noSuchMethod__ = prop;\n;\n");
tryItOut("");
tryItOut("if(__count__.prop setter= Function.__defineGetter__(\"prototype\", (__iterator__ = window).watch)) { if ((p={}, (p.z = 1.3)())) ;} else {var function::__iterator__ = @foo, __count__;const constructor =  /x/g ; }");
tryItOut("if(<><!--yy--></>) {/*infloop*/M:for(const __noSuchMethod__; (window for each (__count__ in this)); #1=[#1#]) {L:do {return;continue ; } while(( /x/g ) && 0); } }");
tryItOut("/*infloop*/for(__noSuchMethod__; new (gc).apply(<y><z/></y>); (typeof ((false.watch(\"__count__\", function(q) { return q; })) ? (new (__count__)([[1]])) : (Math.pow)() if (true)))) if(__noSuchMethod__.prop = *::* :: this) return <><x><y/></x></>; else  if (*::*) {export prototype; } else (*);");
tryItOut("L:if(@foo) let __noSuchMethod__, function::__iterator__ = *; else with({yield: [1,,]})let constructor = <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(var true['prop'] in <x><y/></x>) {__iterator__ =  '' , var __count__ = <><x><y/></x></>, constructor = <x/>;;throw undefined; }");
tryItOut("/*infloop*/L:for(let prototype; ({__count__: @foo }); (prop.prop = ({a1:1}) < new Number(<y><z/></y>, true).yoyo(function  prototype ()__iterator__ = <x><y/></x>(constructor = <><x><y/></x></>)))) {; }");
tryItOut("gc()");
tryItOut("/*for..in*/for(const [prototype, __proto__] = window in window) throw <y><z/></y>;");
tryItOut("/*for..in*/for(const [__count__, __parent__] = x::__parent__.__count__ setter= ({}).__lookupGetter__ in ([__noSuchMethod__, __proto__, ] = prototype = )) {/*for..in*/for(var [__iterator__, constructor]\f = this.zzz.zzz.* in this) prop; }");
tryItOut("{}");
tryItOut("/*infloop*/while(({a1:1}))gc()");
tryItOut("/*infloop*/M:for(let ({ prop: __noSuchMethod__ }) = let (constructor, prototype) __iterator__; (prototype--); [15,16,17,18].some((function (__parent__, __count__) { return 1.2e3 } ).apply,  /* Comment */[z1,,])) {; }");
tryItOut("with(true)");
tryItOut("{\n }");
tryItOut("with({}) return ((({}).propertyIsEnumerable(\"constructor\")) if (*::*))/*\n*/;");
tryItOut("L:if(*) { if ((<><x><y/></x></>[ /x/g ] .@*:: ({__proto__ getter: [1,2,3,4].slice }))) {/*for..in*/L:for(let constructor in <x><y/></x>) {export prototype; } } else {throw *; }}");
tryItOut("yield;for(let y in [5,6,7,8]) throw constructor;");
tryItOut("if((uneval(prototype.('fafafa'.replace(/a/g, (Function).apply))))) {return; } else  if ((delete @foo)) { '' ; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in @foo) {;return; }return 0.1; }");
tryItOut("break \tL; const __proto__;");
tryItOut("L: {; }\n");
tryItOut("with({}) <x/>;");
tryItOut("if([1,,]) { if (this.__defineGetter__(\"__iterator__\", new Function) ? <> </> : ([,,z1].__lookupGetter__(\"__parent__\")) * prop.__parent__) {with([,] - this)const prop;/*infloop*/for(let constructor; (<x><y/></x> ? window : prototype); __count__ = (String())) {(prototype); } } else {return;continue ; }}");
tryItOut("gc()\nconst prototype, prop;\n");
tryItOut("__proto__;");
tryItOut("if(<><x><y/></x></>) { /x/ ; } else throw  \"\" ;");
tryItOut("/*for..in*/for(__proto__ in (prop.((yield <><x><y/></x></>)))) /*infloop*/for(let ({ prototype: prototype }) = ([].yoyo(<x><y/></x>)); (<x><y/></x> += this); (window = __count__)) __parent__ = true, delete = <y><z/></y>;");
tryItOut("/*infloop*/for(var __iterator__; (false *= <y><z/></y>); (undefined %= this) = this.zzz.zzz) {var prototype = window, __parent__; }");
tryItOut("/*for..in*/for(const [__proto__, __count__] = <></>.(((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)[Function(*::*.unwatch(\"constructor\"),  /x/g )])) in (prototype += __proto__.@foo)[(Math.pow)()\f |= __proto__|=0/0]) {return; }");
tryItOut("return;");
tryItOut("return  \"\" ;");
tryItOut("/*for..in*/L:for(__parent__ = this.__defineGetter__(\"__count__\", (1 for (x in []))) %= new (<><x><y/></x></>).__defineSetter__(/*\n*/)() in ({})()) {/*for..in*/for(const [<><x><y/><//h\n/x></>, constructor] = <><bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb></> in <><><y/></x(constructor), window[undefined] ^= function(q) { return q; }() ></>) {{} }(window); }\n");
tryItOut("/*infloop*/do {let(__parent__, __proto__) ((function(){yield <x><y/></x>;})()); } while(new ([1,2,3,4].map)());");
tryItOut("let(__noSuchMethod__ = ) { this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in (prototype = <y><z/></y>)) {export *; }");
tryItOut("/*infloop*/while(/a/gi(<><x><y/></x></>)){}");
tryItOut("if(({prop: #1# })) {return null;return; } else {/*infloop*/while(true)Function\nL:try {  } catch(__parent__ if false) { export prop; } catch(__parent__) { break ; } finally { gc() } with(this)export __noSuchMethod__;(true); }");
tryItOut("if(eval(\"let __count__, __proto__ = 1e4;\", __noSuchMethod__ = 0)) { if ((this.__defineSetter__(\"__count__\", [,,])).__noSuchMethod__ = <x/> >>>  '' ) /*infloop*/for(\n#1#; 'fafafa'.replace(/a/g, function () { while((window) && 0)return 0/0; } ); (*)[try { __parent__ = <y><z/></y>, prototype = *; } catch(prop if (function(){export function::__noSuchMethod__;})()) {  } ]) return;} else prototype = -1, ;");
tryItOut("return");
tryItOut("if() prototype else ; case 7:  ");
tryItOut("/*for..in*/for(var //h\n__proto__/*\n*/ in [,]) {function  constructor (__noSuchMethod__) { yield @foo } this; }");
tryItOut("/*for..in*/for(const prop in !undefined) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in ~*::*.eval((void false[( /x/  && <><x><y/></x></>)]))) {return; }");
tryItOut("if(*::*.unwatch(\"__parent__\").propertyIsEnumerable(\"__count__\")) { if ([[[]]]) export __proto__;} else throw function::constructor; const prop;");
tryItOut("prop = __count__;");
tryItOut("while((\n<><></></>) && 0)return;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(const constructor in (\neval(\" /x/g \", new String(<><x><y/></x></>)))) M:if(window) { if (constructor = 'fafafa'.replace(/a/g, new Function)) {/*for..in*/for(let [prototype, __proto__] = #1# in __iterator__) var __parent__, __count__; } else { }}");
tryItOut("M:if(__parent__ = prop) {yield (-1);yield; } if (getter.isPrototypeOf(#3={a:#3#})) {return\nif(<x><y/></x>) {let prop;return; } }");
tryItOut("do /*infloop*/for(<y><z/></y>; <><x><y/></x></>; #1#) {}\n{} while((eval(\" /x/g \", undefined)) && 0);");
tryItOut("if(constructor.__proto__) {export constructor; } else ;");
tryItOut("if((new Function)()) /*for..in*/L:for(const __count__\t in (((prototypefunction (prop) { yield __count__ } ).apply)(this.zzz.zzz))){new Function } else  if (( \"\"  ? 0/0 : [[1]])[ \"\" ]) {{}{} } else {try { ; } catch(__count__) { yield; } finally { (new Function).apply }  }");
tryItOut("do {var __noSuchMethod__, prototype = function(id) { return id };/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <><x><y/></x></>) {<x/>;return [[1]]; } } while((window.valueOf(\"number\")) && 0);");
tryItOut("throw StopIteration;");
tryItOut("try { window.prop = __proto__; } finally { throw StopIteration; } ");
tryItOut("with({__proto__: eval(\"__proto__\", <x><y/></x> for each (prototype in __iterator__))})gc()");
tryItOut("/*infloop*/M:do yield; while(window ? [z1,,] : [,]);");
tryItOut("if((window for (function  function::__parent__ () {  }  in #3={a:#3#}))) { if (u) {export set; }} else {throw <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(let [__proto__, __proto__] = (uneval(__noSuchMethod__ = 0.1)) in  /x/ ) export __noSuchMethod__;");
tryItOut("switch(this.valueOf(\"number\")) { default: break;  break case __iterator__ =  '' : break; break \ncase 8: yield true;case 3.141592653589793.watch(\"__count__\", [1,2,3,4].slice): [1,2,3,4].slicebreak;  }");
tryItOut("*::*");
tryItOut("yield ;");
tryItOut("/*for..in*/for(var [,] in (((5.0000000000000000000000).watch)(([[]] ^ *))))let yield; const __iterator__;");
tryItOut("if(this) {gc() } else  if (window) return <x><y/></x>; else {continue ; }");
tryItOut("/*infloop*/\ffor(var __parent__ = ('haha'.split)((new @foo;(.2, undefined))); ((1 for (x in []))).call(new String(), ( \"\"  if (true))); (*::* /= <x><y/></x>[let (prop = prototype) undefined])) throw @foo;");
tryItOut("/*infloop*/for(const constructor = constructor(<x/>, <><x><y/></x></>); <x><y/></x> ^ (this += <x><y/></x>); (Math.sin).call(-0, )) {;export __parent__; }");
tryItOut("let (prototype, prototype = window ^= <x/>) { let prototype; }");
tryItOut("\n const __iterator__");
tryItOut("break M;L:if(<x><y/></x>) { if (*) {export __iterator__;\nconst <x><y/></x> = <y><z/></y>; }} else throw (-1);");
tryItOut("yield\n");
tryItOut("L: {(0.1).watch }");
tryItOut("{return; const prop; }");
tryItOut("/*infloop*/do return ([__proto__].sort(function(id) { return id })); while(prototype = <y><z/></y> + prop);");
tryItOut("/*infloop*/for(let __iterator__ = eval(\"-1\", false.__defineGetter__(\"prop\", [1,2,3,4].slice)); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; (constructor)) {3/0;/*infloop*/do {const __iterator__ = __proto__, __iterator__ = <><x><y/></x></>; } while(this.__defineGetter__(\"x::prop\", <x><y/></x>)); }");
tryItOut("/*for..in*/for(__iterator__ = (__count__ ? (__parent__ = <x/>) ? (continue L;)[<y><z/></y>] : ('fafafa'.replace(/a/g, eval)) : [[]].valueOf(\"number\")) in (constructor.__noSuchMethod__+=(__count__+=<><x><y/></x></>))) function (__noSuchMethod__, __iterator__) { return <\fx><y/></x> } ");
tryItOut("{do yield; while((((-1).eval( /x/g ))) && 0);this.zzz.zzz; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x/>) while((*::*) && 0)let constructor;");
tryItOut("/*infloop*/do L:while((<><x><y/></x></>) && 0){} while((({a1:1}))(this) = @foo--);");
tryItOut("let (prop = Boolean(<x/>,  /x/g ) >>>  /x/  |  \"\" , constructor) { continue L; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for \f each(__count__ in function(id) { return id }) __proto__, constructor = function ([y]) { };");
tryItOut("/*infloop*/for(var __parent__ = (yield window); 5.0000000000000000000000.valueOf(\"number\"); __parent__.__iterator__ = (#2=[false])) export __parent__;prototype, __proto__ = false;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in (({__noSuchMethod__: ((yield <y><z/></y>))}))((prototype = [[]]).__proto__)) {gc()const prototype; }");
tryItOut("new Functionyield;");
tryItOut("switch([1,,].prototype) { case 4: L: ({}).__lookupGetter__ }");
tryItOut("let (function::__count__) { /*for..in*/for(const prop in <><x><y/></x></>) {; } }");
tryItOut("L:if(({ prototype: prototype, constructor: __noSuchMethod__ }) = <><x><y/></x></>.__defineSetter__(\"__proto__\", [1,2,3,4].slice)) eval else  if ((-3/0 * window) != .watch(\"prop\", <x><y/></x>)) {const prop, constructor; }");
tryItOut("let __parent__ = window;");
tryItOut("window;");
tryItOut("M:if((({ get __count__ prototype ()(<><x><y/></x></> ^= this) }))) { if (new ((1 for (x in [])))(null,  \"\" )) return; else {yield; }}");
tryItOut("yield __count__.__parent__ = (<x><y/></x>.(function (x::prototype, __parent__)[,,z1]));");
tryItOut("switch([[1]] %= -1 /= (*.prop)(undefined, (prop) = new (new Function(\"return (function ([y]) { })();\"))(*, this))) { case @foo:  }");
tryItOut("prop(*) = __iterator__;");
tryItOut("{}\nlet __noSuchMethod__, yield = @foo;\n const constructor;\nyield; const __noSuchMethod__;\n");
tryItOut("if(//h\n([11,12,13,14].sort)) if(\tnew false(*::*) ^= (__noSuchMethod__ = (function ([y]) { })())) { if (this.__defineGetter__\r(\"__proto__\", (window).__defineSetter__)) {(<><x><y/></x></>); }} else {break ;return (-1); } else  if ((@foo)()) if(-3/0) {(__proto__);gc() } else  if (null) {return 0/0; } else {yield *\n(*); }");
tryItOut("yield eval(\"arguments\", prototype);");
tryItOut("/*infloop*/M:do <ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd>\nconst __parent__ = <y><z/></y>;\n while(eval(\"([z1,,]) + gc()\", window));");
tryItOut("with({__proto__: <><x>\f<y/></x></> - window.*}){if(<x><y/></x>) { if (<x/>) export *;} else {__iterator__; }export *; }");
