tryItOut("/*for..in*/L:for(__proto__ =  /x/  in window) {__iterator__; }");
tryItOut("return (function  __count__ () { return <><x><y/></x></> } )(); const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in  /x/g ) ;");
tryItOut("for(let y in []);");
tryItOut("L:while(((#1=({__parent__: <y><z/></y>})).isPrototypeOf((<y><z/></y> < <y><z/></y>))) && 0)if(false) { if ( \"\" ) {(*::*).__defineSetter__ } else ;}");
tryItOut("[, , __iterator__]");
tryItOut("yield  /x/g ; const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 033) const __proto__, prototype =  /x/ ;");
tryItOut("/*for..in*/for(var __proto__ in eval(\"this\", undefined).eval({}.constructor = __count__)) {}");
tryItOut("with({}) { export *; } ");
tryItOut("if(this) { if (prototype.__count__) {prop = *::*, constructor; } else if(true) { if (-0) {const __parent__ = <x/>, constructor;yield; } else {continue ; }}}");
tryItOut("{__count__ = prototype; }");
tryItOut("/*infloop*/M:for(const prototype; (<x/> .@x:: *::*--); __noSuchMethod__.prototype getter= eval) {if(@foo.__lookupGetter__(\"__noSuchMethod__\"(__iterator__)(prop))) { if (([1,2,3,4].map)(*::*)) {{} }} else (<x><y/></x>);{let (let __iterator__, constructor;) { gc() } } }");
tryItOut("{let __parent__ = #1=[#1#]; }");
tryItOut("return null; const __iterator__;");
tryItOut("export __parent__\n");
tryItOut("L:while(( '' .unwatch(\"__iterator__\")) && 0){([z1]);Function }");
tryItOut("continue ");
tryItOut("if(this.__defineSetter__(\"__parent__\", (new Function(\"if(<><x><y/></x></>) export *; else \\r{const __count__;yield this;\\t }\")))) { if (prototype.(@foo)) {return  '' [1e81];return; } else ;}");
tryItOut("L:if(<><><xxx>{__proto__}</xxx></>.__lookupGetter__(\"function::__noSuchMethod__\")</>) with(prototype-=<x><y/></x> in eval(\"const __iterator__;\", <x><y/></x>))({ constructor: ({ __proto__: __proto__, __iterator__: __iterator__ }) }) else /*infloop*/do {export *;(3); } while(*);");
tryItOut("this.zzz.zzz;");
tryItOut("M:if(eval(\"null\", <x><y/></x>)) { if (( /* Comment */++[1,,])) {yield =  /x/g , prop; }} else {yield prototype;(0.1); }");
tryItOut("continue ;\n(-0);\n");
tryItOut("(__proto__);");
tryItOut("L: if(<x><y/></x>) yield __proto__; else {export *; }");
tryItOut("L:if(__iterator__, __noSuchMethod__) { if ((#1#.throw((this.watch(\"__parent__\", /a/gi).valueOf(\"number\"))))) do {continue M;; } while((this) && 0); else if(<x><y/></x>) gc() else  if (this)  /x/ }");
tryItOut("yield\n");
tryItOut("M:do export *; while((function ([y]) { }) && 0);");
tryItOut("yield undefined;");
tryItOut("/*for..in*/L:for(var null.prop = <><x><y/></x></> in this) {yield window;\f }");
tryItOut("gc() const constructor;");
tryItOut("L:if(<><x><y/></x></>.throw(undefined)) { if ((new undefined())) return;} else {yield @foo;continue ; }");
tryItOut("while((1e81) && 0){return; }");
tryItOut("L: {/*infloop*/for(({ __iterator__: __proto__, prop: prop }) = ({ __noSuchMethod__: prototype }); eval(\" /* Comment */*::*\", [__iterator__].sort( /x/g )); (<y><z/></y>)(prop, <y><z/></y>)) {export __proto__;\flet __count__ = prop;\t } }");
tryItOut("switch(new Number(({ __noSuchMethod__: [constructor] }),  \"\" )) { case <ccc:ddd> </ccc:ddd>: if((-0).__proto__) export *; else  if ((yield (<x><y/></x>.(<x><y/></x>)))) {\f{} }break; case __noSuchMethod__: break; case 6: switch(__parent__.constructor getter= function(y) { yield y; /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in true) yield <x><y/></x>;; yield y; }) { case <x><y/></x>.@foo.propertyIsEnumerable(\"__iterator__\"): default: gc()break; break;  }\fcase new Exception(): with({__iterator__: [false].map(({}).__lookupGetter__) ? \n<x><y/></x> : true << <x><y/></x>}){throw constructor;switch(true) { case window: ({ __iterator__: __count__ }) } }break; break; default: break; case 2: case 0: break; case 4: yield ({});break; ; const prototype;break; while((<x/>) && 0){let __proto__; }break;  }");
tryItOut("L: with(({} for each (__iterator__ in  set __parent__(__count__, __proto__) { yield <><x><y/></x></> } ) for each (each in this <  '' ) for (constructor.prop in __parent__/*\n*/))){yield constructor.constructor; }");
tryItOut("L: var prop = <x/>;");
tryItOut("M:do {yield {}; } while(((<y><z/></y> -= 5.0000000000000000000000)) && 0); const constructor;");
tryItOut("export __noSuchMethod__;");
tryItOut("window; const __noSuchMethod__;");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*for..in*/M:for(let [prototype, __iterator__] = (#2=({constructor: arguments.valueOf(\"number\")})) in eval(\"{}\", ())) let prototype;");
tryItOut("yield;");
tryItOut("if(__noSuchMethod__ = false) {return; } else  if (Iterator()) {export prototype; } else const __iterator__ = <x><y/></x>, prototype = <y><z/></y>;");
tryItOut("with({}) for(let y in [5,6,7,8]) let(__noSuchMethod__) ((function(){export __count__;})());");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(prototype['get'] in 033.@foo) return *;");
tryItOut("do {gc(); } while(((<><x><y/></x></>).call(__count__, __proto__)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(\t__noSuchMethod__ in undefined) {; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((<x/>)([11,12,13,14].some)))var __count__;");
tryItOut("/*for..in*/for(const __parent__ = this.__defineGetter__(\"__parent__\", new Function) in  '' ) {export prototype; }");
tryItOut("if( \"\" ) {(1 for (x in []))<><x><y/></x></>; } else gc()");
tryItOut("while((window) && 0)M:if(0/0(<y><z/></y>)) {__parent__;return  '' ; } else  if ((<>\t<x><y/></x></> >>>=033)) (1 for (x in []))");
tryItOut("return;");
tryItOut("/*infloop*/do throw  '' ; while([1,,] >> <x><y/></x>);");
tryItOut("new Functionreturn;");
tryItOut("M:if(<x/>) with({prototype: *::*.__lookupGetter__(\"prop\")}){throw this;export __proto__; }\n else {for(let y in []); }");
tryItOut("/*infloop*/for(new Function(*::*, constructor) == constructor = null; (1e+81 %= <y><z/></y>.eval(<x/>.watch(\"__proto__\", <><x><y/></x></>))); *.__defineGetter__(\"set\", ({}).hasOwnProperty)) {prop\nexport *;throw null; }");
tryItOut("{return;yield; }");
tryItOut("/*infloop*/do gc()/*for..in*/for(let __parent__ = <><x><y/></x></> in prop) {__count__ = null; } while(((Math.sin).call).call(this, <><x><y/></x></>, <y><z/></y>) ^= prototype);");
tryItOut("let (prop = (__iterator__).prototype, prop) { /*infloop*/do export __parent__\nM:if(arguments) { if ([[1]]) {function ([y]) { };__parent__ = 0.1, __count__ }} else export constructor; while(undefined > <x><y/></x>); }");
tryItOut("if(#0=({__parent__: <><x><y/></x></>})) <x/>; else  if (__noSuchMethod__.propertyIsEnumerable(\"__noSuchMethod__\")) export *;");
tryItOut("if([-3/0]) {;export *; } else  if ([z1] != [,]) var __count__ = undefined, prototype; else (window || undefined), constructor =  /x/ ");
tryItOut("__count__ = #3={a:#3#}, prototype = [,,]\nthrow <x/>;");
tryItOut("\n/*infloop*/for(var __iterator__ = @foo[[1,,]]; *::*; ) let prototype, x::constructor =  \"\" ;");
tryItOut("while(((new (<><x><y/></x></>).apply(<y><z/></y>))) && 0){{}return 0; }");
tryItOut("{const __count__ = *, __proto__ = this; }");
tryItOut("if(new RegExp(<y><z/></y>)) {/*infloop*/do {break ;//h\n } while(this(<><x><y/></x></>));; }");
tryItOut("if([()(\f)]) throw constructor = *; else {export *;( /x/ ); }");
tryItOut("/*infloop*/for(__parent__; constructor = __parent__.constructor = (\n<><x\n><y/></x></>)\n; ({ __noSuchMethod__: ({ prop: __noSuchMethod__, prop: get }), prop: ({ prototype: __proto__, __proto__: constructor }) }) = ((<y><z/></y>)([(__noSuchMethod__ >>>=this)].some(__count__), 5.0000000000000000000000))) return <><x><y/></x></>;");
tryItOut("{new Function }");
tryItOut("yield `;");
tryItOut("if(yield; ? (#1=[#1#]--).__lookupSetter__(\"constructor\") : <{__parent__}><xxx>{__proto__}</xxx> </{__parent__}>) {return; } else {/*infloop*/do { /x/ ; } while('fafafa'.replace(/a/g, Math.pow)); }");
tryItOut("/*infloop*/do {let __proto__ = 4.; } while(<x/>);");
tryItOut("/*infloop*/L:for((__iterator__.(window)); (new ( for (__iterator__ in <><x><y/></x></>) << this)()); [-0].sort(Math.sin)) yield  /x/ ;");
tryItOut("{/*for..in*/for(__count__ = __noSuchMethod__, ({ __proto__: __proto__ }) in __noSuchMethod__ = __count__) let (function::prototype, __count__ = [1,,]) { /*for..in*//* nogeckoex bug 349964 */ for  each(prop in true) {__count__ = -1; } } }");
tryItOut("with({constructor: 4.}){let __noSuchMethod__, prop = undefined; }");
tryItOut("if(window) let __parent__ = window; else gc()");
tryItOut("if(<><x><y/></x></>.__noSuchMethod__) { if ((function ([y]) { } ?  \"\"  : <x/>)) const __parent__ = this;} else {prototype;break ; }");
tryItOut("/*infloop*/L:for(prop = <x><y/></x>; window; <x><y/></x>) undefined;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in [15,16,17,18].map(Function,  \"\" )) { }");
tryItOut("if(yield [.2 for (__parent__ in null)]) with({__proto__: let (prototype = true, __parent__) this})yield; else  if (this.zzz.zzz.@*) {-3/0;\nconst __count__;\n__proto__; }");
tryItOut("/*for..in*/for(let  = 1e4 in false) yield;");
tryItOut("gc()");
tryItOut("/*infloop*/for(var __count__; *; null) {gc() }");
tryItOut("let (__count__ = __parent__ = <y><z/></y>, __parent__ = <x><y/></x> ? *::* : [z1,,]) { /*infloop*/for((p={}, (p.z = undefined)()); {}.isPrototypeOf(__proto__); this.zzz.zzz) {yield -1; } }");
tryItOut("{/*infloop*/for(constructor;  \"\" ; *::*) {export *; }{} }");
tryItOut("Math.pow");
tryItOut("/*for..in*/for(const <x><y/></x>\f in ((gc\t)(prop.__proto__ =  '' )))throw true;");
tryItOut("{{let __count__;let constructor, __proto__ = <x/> = <x><y/></x>; } }");
tryItOut("if(__count__.__lookupSetter__(\"prototype\")) {throw <><x><y/></x></>;return; } else {do {constructor = arguments; } while(( \"\" ) && 0); }");
tryItOut("/*for..in*/for(prop in (((*::*.valueOf(\"number\")))(arguments))){gc() }\nL: {return; }\n");
tryItOut("if(((__count__: <x/>)( /x/g ))) /*for..in*/for(var __proto__ = <y><z/></y> in <><x><y/></x></>) {export __count__; } else  if (__iterator__ = *::* instanceof [15,16,17,18].map(eval, (__proto__ ? __noSuchMethod__ : <><x><y/></x></>)) >= __count__) return;");
tryItOut("/*infloop*/for((({__noSuchMethod__: <x/> ^ null})); ({ function::prop: __iterator__ }) = (); __proto__) this;");
tryItOut("return (r & ({__iterator__: <x><y/></x> }));");
tryItOut("with((yyy ^= (<y><z/></y>.@*)[this.__defineGetter__(\"__parent__\", 'haha'.split)] for each (this in *::*) if ([,,])))with({}) return;");
tryItOut("if(#0=[*] !== new undefined()) {/*infloop*/L:for(const function::__noSuchMethod__ = <y><z/></y>.isPrototypeOf(true); (prototype)[<x><y/></x>]; (Exception( /x/g ))) ({ prototype: ({ prototype: [__parent__, __count__, , prototype, prop] }), __noSuchMethod__: ({ prop: ({ __proto__: constructor, constructor: __iterator__ }), __count__: ({ __proto__: __count__ }) }) })const __iterator__ = null, prototype = window; } else {const constructor = <><x><y/></x></>;@foo; }");
tryItOut("return <x/>; const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in __proto__) {throw <x><y/></x>; }");
tryItOut("__noSuchMethod__ = <x/>yield <x><y/></x>;");
tryItOut("if(({ __proto__: __proto__, __parent__: __parent__ }) = ({ prop:  get get(__count__) { yield let (prototype, prototype = __proto__) true }  })) {/*for..in*/for([__parent__, __parent__] = (prototype) in <><x><y/></x></>) {yield __count__; }return true; } else  if (({ prototype: ({ __iterator__: ({ constructor: __noSuchMethod__ }) }) }) = (undefined.__noSuchMethod__)[window <= <><x><y/></x></>]) {/*infloop*/M:for(undefined; ({a2:z2}); 1.2e3) continue L; } else var __proto__, prop = <y><z/></y>;");
tryItOut("/*infloop*/for(const ({ prop: prop, prop: __iterator__ }) = false for (__parent__ in ({})); [,].yoyo(<><x><y/></x></>); (-3/0.propertyIsEnumerable(\"prototype\"))) export *;");
tryItOut("/*infloop*/while(__proto__ = <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")){/*for..in*/M:for([prop, __iterator__] = ({}) in prop) {{} } }");
tryItOut("if(((function (__noSuchMethod__, __noSuchMethod__) { yield <x/> } )(__noSuchMethod__))) {/*for..in*/M:for(prototype in ((function(q) { return q; })(<><x><y/></x></>))){this;@foo; } }");
tryItOut("return;");
tryItOut("with({}) { return; } ");
tryItOut("/*for..in*/for(__proto__([[1]]) in true) {function  __parent__ (__parent__) { yield this }  }let (prop = <y><z/></y>) { let __count__, __parent__; } const __count__.__count__;");
tryItOut("L:while(((new (<y><z/></y>).__defineSetter__(<x><y/></x>))) && 0){L:if(<x><y/></x>) { if (__parent__) {const __noSuchMethod__ = 5.0000000000000000000000, constructor; } else (__proto__);}export *; }");
tryItOut("/*infloop*/for(([this for (constructor in <><x><y/></x></>)]); eval(\"<><x><y/></x></>.*\", ({constructor: <><x><y/></x></> })); ) {throw  /x/g ;return; }let (__proto__, delete) { var __proto__; }");
tryItOut("{/*infloop*/while(1e81)export __parent__;while((this.__defineGetter__(\"__parent__\", ({a2:z2}))) && 0){yield;break M; } }");
tryItOut("/*infloop*/for(-- /x/g  <= \n__parent__; @foo.yoyo(\tnew (function  prototype (prototype)(function ([y]) { })()).apply((__iterator__: -1.__proto__ = window))); this.__defineGetter__(\"prop\", function  __parent__ (__count__, __parent__) { return __noSuchMethod__ = <x><y/></x> } )) {__noSuchMethod__, __parent__; }");
tryItOut("/*infloop*/M:for(({prototype: true.__iterator__}); (prototype|=<y><z/></y> % <><x><y/></x></>); this.__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)) yield  /x/g ;");
tryItOut("return [z1,,];");
tryItOut("if(true) /*infloop*/while((- /x/ ))if([z1]) { if (<x/>) {yield false; } else {export prop;yield; }}\n<><x><y/></x></>;\n\n");
tryItOut("with({__noSuchMethod__: yield})for(let y in [5,6,7,8]) let(__count__) ((function(){__proto__ = __count__;})());");
tryItOut("(__proto__);");
tryItOut("with({__parent__: *(<><x><y/></x></>, *::*)}){var prototype; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(const set; (__noSuchMethod__)%= /x/ ; yield (0/0.unwatch(\"__count__\")) .@x:: (constructor = <><x><y/></x></>)[<><x><y/></x><\t/>.propertyIsEnumerable(\"__proto__\")]) var __iterator__ = <x><y/></x>;");
tryItOut("continue L;");
tryItOut("this.zzz.zzz;");
tryItOut("return <x/>;");
tryItOut("L:while((<><x><y/></x> </>) && 0){}");
tryItOut("with({__iterator__: <x><y/></x>}){gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__parent__) in *) {continue ;export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in #0=<x><y/></x>) yield <x><y/></x>;");
tryItOut("/*infloop*/while((eval(\"<><x><y/></x></>\", [[1]])))__iterator__, __count__;");
tryItOut("(<><x><y/></x></>);\nbreak ;\n");
tryItOut("/*infloop*/L:do  while(new RangeError(this));");
tryItOut("for(let y in []);");
tryItOut("<x/> &= <x><y/></x>['__noSuchMethod__'] = constructor;");
tryItOut("\nyield __iterator__;\n");
tryItOut("/*for..in*/for(var prototype in ((({}).hasOwnProperty)([@foo].some((new Function(\"return __noSuchMethod__;\")))))){{} }");
tryItOut("with(<><{__noSuchMethod__}><!--yy--></{__noSuchMethod__}></>)const constructor = [1,,], constructor =  /x/ ;");
tryItOut("continue ;/*\n*/with({__count__: window})break L;");
tryItOut("/*infloop*/for(const  for (__count__ in 3) for each (prop in  /x/ ) = [1]; <y><z/></y>; 1e-81) {}");
tryItOut("with({__iterator__: <> </>})(<x><y/></x>);");
tryItOut("switch(<><x><y/></x></>\n) { case ((<x/>)()): if(prototype) {var prototype = undefined, prop = *::*;{} } else  if (this) export __proto__; else {;throw 1.3; }break;  }");
tryItOut("if(window) {let __noSuchMethod__ = <y><z/></y>; } else {<><x><y/></x></>;let window, __iterator__; } const function::__parent__;");
tryItOut("try { throw StopIteration; } finally { return -(({a1:1}))(); } ");
tryItOut("if( /x/ ) yield; else  if (null([])) {yield true;yield @foo; }");
tryItOut("while((#0=*::*) && 0){if(__count__) {return __noSuchMethod__; } else gc() }");
tryItOut("{yield window;<x/>; }");
tryItOut("L:if(@foo .@  /x/g ) <x><y/></x> else  if (((new Function).call([,,z1], (<x><y/></x> >>> [[]] ^ window\n), (window.__count__)))) {for(let y in []); }");
tryItOut("with({__noSuchMethod__: 1e-81}){throw <x><y/></x>;var prop, prototype; }");
tryItOut("with(((__count__\t =  \"\" ) - __proto__\n)){if((<><x><y/></x>< if (<x/>) /)) { if (window) var prop; else { }} }");
tryItOut("return;");
tryItOut("if(Boolean()) false; else  if (this.zzz.zzz) {continue ; } else {<><x><y/></x></>;throw *; }");
tryItOut("L: {let(prop = (p={}, (p.z = #1#)())) { return  /x/g ;__proto__; }");
tryItOut("with({}) with({}) export __parent__;");
tryItOut("/*infloop*/do export __parent__; while( '' );");
tryItOut("(Object());");
tryItOut("/*infloop*/do {} while((new Function(\"let __count__ =  '' ;\"))());");
tryItOut("/*infloop*/do {export *; } while(prop = prop\t);");
tryItOut("/*for..in*/for(const this.zzz.zzz['prop'] in prop) {;const __count__; }");
tryItOut("/*infloop*/for(const [, [], __proto__, [({ __proto__: constructor }), , __proto__, ({ __count__: __proto__ }), ({ __parent__: [, ], __count__: ({ prop: ({ __count__: __parent__, __noSuchMethod__: constructor }), x::__iterator__: __noSuchMethod__ }) })], ({ prototype: ({ __count__: ({ __proto__: ({ __noSuchMethod__: prop }) }) }), prop: ({ function::__parent__: ({ constructor: ({ prop: __count__ }) }), __count__: [] }) })] = <><xxx>{__noSuchMethod__}</xxx></>; (__iterator__.__lookupSetter__(\"__proto__\")).propertyIsEnumerable(\"__noSuchMethod__\"); false) eval");
tryItOut("do prototype: [z1] << (<x><y/></x>.valueOf(\"number\") :: __iterator__ instanceof <><x><y/></x></>) while((((uneval(({__proto__: __parent__, __proto__: false })))).unwatch(\"__parent__\")) && 0);");
tryItOut("yield {}");
tryItOut("if(@foo) {return; } else  if (<y><z/></y>) throw <x/>;");
tryItOut("yield <x><y/></x>;\nexport __count__;\n");
tryItOut("while((yield (__noSuchMethod__ >>>=this)) && 0){throw this;export __noSuchMethod__; }");
tryItOut("L:while((__count__) && 0){/*infloop*/do {gc() } while(__proto__ = <x/>); }");
tryItOut("yield new ((this).__defineSetter__)( /x/g ,  '' );");
tryItOut("L: {export __proto__; }");
tryItOut("/*infloop*/while(( ''  = ({a1:1}))){gc() }");
tryItOut("/*for..in*/M:for(var this = 0x99++ in prop-=RegExp(3/0)) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in ((prototype.isPrototypeOf(<><x><y/></x></>) * <x><y/></x>.throw(<><x><y/></x></>)) :: 0 if (false) +=  \"\" .throw(<x/>))) {gc()export *; } }");
tryItOut("if(<><x><y/></x></>) { if ( '' ) prop = <x><y/></x>; else {const __noSuchMethod__ = (function ([y]) { })(), __noSuchMethod__;__parent__; }}");
tryItOut("if(<y><z/></y>) {if( /x/ ) {break L;yield [z1]; }\nbreak L; } else  if ((0/0.__noSuchMethod__ for each (prop in this) for each (__count__ in 033))) let __proto__, __count__ else {break M;gc() }");
tryItOut("M:if(() ? <x><\ty/></x>.__lookupSetter__(\"__iterator__\") : this === <><x><y/></x></>) {return <y><z/></y>;yield; }\n");
tryItOut("if(('fafafa'.replace(/a/g, function(y) { yield y; return undefined;; yield y; }) ? ( /x/g (0.1)) :  \"\" )) {return *;gc() }");
tryItOut("for(let y in [5,6,7,8]) yield *;");
tryItOut("gc()");
tryItOut("try { ; } finally { let __proto__; } \n{constructor = 3\nbreak ; }");
tryItOut("for(let y in [5,6,7,8]) {}");
tryItOut("/*infloop*/L:for(const [, __proto__, , ] = ; [z1,,]; ({ __parent__: prototype }) = constructor.__proto__) return;");
tryItOut("/*for..in*/for(var __proto__ = constructor in \n<x><y/></x>) {}");
tryItOut("L:if([,,z1]) ; const constructor; else return <x><y/></x>;");
tryItOut("for(let y in []);");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("/*infloop*/for(+this.__defineSetter__(\"setter\", eval); (__proto__ = yyy); function::__count__.__noSuchMethod__ = (p={}, (p.z = undefined)())) {L:  }");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("/*infloop*/while((<><x><y/></x></>.valueOf(\"number\")))/*for..in*/L:for(__proto__ in true) {break ;constructor; }");
tryItOut("if(<x/>) { if ((yield let (prototype, __iterator__) __count__)) constructor: ([[, , , ]] = __proto__)} else {yield (new (function () { 'haha'.split } )(<x/>));throw (([1,2,3,4].slice)()); }");
tryItOut("with({__noSuchMethod__: [(uneval( \"\" )) ^= [*::*].filter(window)].filter(gc)})/*infloop*/M:for(let function::prop; (Object(__noSuchMethod__) ^= new prototype()); 'fafafa'.replace(/a/g, gc)[( /* Comment */false)]) {let __proto__ = <x><y/></x>, __proto__ = constructor;gc() }");
tryItOut("/*infloop*/while(<xxx {__proto__}={true.__parent__} />){gc()yield prototype; }");
tryItOut("return __proto__ = #1=[#1#];");
tryItOut("for(let y in [5,6,7,8]) with({}) { let(prototype = ([11,12,13,14].filter)) { return ((__proto__ = window))(null); } ");
tryItOut("return <x/>.hasOwnProperty(\"function::__count__\") + Iterator( /x/ , -1);");
tryItOut("prop = __iterator__, __proto__\n");
tryItOut("/*for..in*/M:for(var __count__ = this in this) {(<><x><y/></x></>); }");
tryItOut("while((__parent__) && 0){/*infloop*/for(var prop = this; [z1]; 4.) export prop;; }");
tryItOut("/*infloop*/L:for(__count__; __proto__ = this; (({__parent__: [[1]] }))) {export prop; }");
tryItOut("/*infloop*/for((* || <\tx><y/></x>); ((uneval(3))); (prototype.__defineSetter__(\"__noSuchMethod__\", function(id) { return id }))) {/*infloop*/L:for(var __count__ = <><x><y/></x></>; <x/>; prop) return  /x/ ;; }");
tryItOut("switch( '' ) { default: export __proto__;break;  }\n");
tryItOut(".2;\n/*for..in*/for(var prototype = [ \"\" ]\t in  /x/ ) {(new Function(\"/a/gi\")) }\n");
tryItOut("let (prop = constructor) { var __iterator__; }");
tryItOut("switch(function  constructor (__iterator__ = __iterator__;) { {} } (*, * * *::*)) { default: break;  }");
tryItOut("if((this.zzz.zzz)) /*for..in*/L:for(let [constructor, __iterator__] = new RangeError() in <><x><y/></x></>) export constructor;");
tryItOut("/*infloop*/for(const __noSuchMethod__; 'fafafa'.replace(/a/g, [1,2,3,4].slice); \n* ? ((1e-81)()) : 1e4.valueOf(\"number\")) window;");
tryItOut("M:if(prop.@*) {let __proto__, constructor; } else  if ((<xxx {__noSuchMethod__}={@foo} />.((window.propertyIsEnumerable(\"__count__\"))))) yield *::*; else let prototype = prop, 1e81 = ({});");
