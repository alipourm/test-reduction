tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in (@foo.*.__defineSetter__(\"constructor\", new Function))) with({constructor: this.zzz.zzz}){return; }");
tryItOut("if(<x/>) { if (eval(\"(\\n<><x><y/></x></>)\", prop)) {let __iterator__;function(y) { yield y; yield;; yield y; } }} else {yield  /x/ ; }");
tryItOut("if((function(y) { yield y; yield <><x><y/></x></>;; yield y; }())) {export __proto__;export *; } else  if (<><x><y/></x></> < [,,z1].@*) {yield;return <x/>; }");
tryItOut("M:with({__noSuchMethod__: *::*}){break ; }");
tryItOut("yield");
tryItOut("/*for..in*/for(var __noSuchMethod__ = (function ([y]) { })() in [1]) export *;");
tryItOut("if((p={}, (p.z = <x><y/></x>.__iterator__)())) { if (((window.__noSuchMethod__))([15,16,17,18].some(([,]).apply,  \"\" ), [z1,,])) {yield; } else (window);}");
tryItOut("yield false");
tryItOut("if(0.1) {\t if (({prop: __count__|=(new (function  __parent__ (__proto__) { throw <x><y/></x>; } )()) })) {[, ] } else eval}");
tryItOut("return prototype;");
tryItOut("/*infloop*/do L:while((export *) && 0){/*infloop*/for(var __iterator__; [,,]; (this.__defineGetter__(\"__count__\", <><x><y/></x></>))) export *; } while((uneval((window instanceof 0.1))));");
tryItOut("if((uneval(let (prototype = <><x><y/></x></>, prop)  \"\" ))) { if ( /* Comment */<x><y/></x> instanceof (new (prototype)()) :: * .@x:: try { {} } catch(prototype) { __count__ = <x><y/></x>, constructor; }  && (++case 3: )) {var prototype\n{} } else {yield; }}");
tryItOut("");
tryItOut("/*for..in*/for(const prototype = () in {}) {export *;yield; }\n");
tryItOut("/*infloop*/L:for(.@*; (({ __noSuchMethod__: __iterator__ })\f = <x><y/></x\f>); ({prototype: [[] for (__count__ in prototype)]})) if(prototype) yield; else  if (3.propertyIsEnumerable(\"prototype\")) ;");
tryItOut("/*infloop*/for((033.hasOwnProperty(\"__proto__\")); 3/0 ? [15,16,17,18].some(*::*, *::*) : function(id) { return id }; __noSuchMethod__ .@x:: ((uneval(<><x><y/></x></>)))) with(*::*){export __count__;{} }");
tryItOut("try { throw StopIteration; } catch(prop if (constructor.prop setter= <x><y/></x>)) { __parent__ = __noSuchMethod__; } finally { \n } ");
tryItOut("switch('fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; })) { default:  }");
tryItOut("M:if('fafafa'.replace(/a/g, (1 for (x in [])))) {/*infloop*/do {export *;{} } while(let.__defineGetter__(\"__proto__\", ({}).hasOwnProperty));yield 0/0; } else  if (prop.__parent__) (@foo); else /*infloop*/do {yield;\r } while([[]] |= null :: M:if(0.1) {gc() } else  if (*::*) {; } else const __count__, constructor = *;);");
tryItOut("/*for..in*/for(var prototype = [11,12,13,14].filter in false) yield constructor;");
tryItOut("/*for..in*/for(__proto__ = 0/0 | [z1,,] :: #1=({__proto__: *::*}) in yield yield <x/>) with(@foo)return <y><z/></y>;");
tryItOut("/*for..in*/M:for(const __proto__ in null) gc()");
tryItOut("if('fafafa'.replace(/a/g, <x><y/></x> += [])) {({ __parent__: ({ prototype: prototype }), __count__\t: ({ __noSuchMethod__: __parent__ }) }), __parent__ } else  if ((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(prop))) {Math.powwhile((<x><y/></x>) && 0){break \nM; } } else with({constructor: <x/> / <><x><y/></x></>.@*}){const __count__, __noSuchMethod__;const <x><y/></x> < <x/>, window; }");
tryItOut("if((<x><y/></x> ^ 1.3.__defineGetter__(\"constructor\", eval)).valueOf(\"number\")) {{return 033;(this); } } else  if (<y><z/></y>) {/*for..in*/for(var (constructor) in (([1,2,3,4].map)(prop = window))){prop;export __proto__; } } else {M:if(prototype) \t(033); else  if (<><x><y/></x></>) return; else return; }");
tryItOut("/*infloop*/do yield; while(null.unwatch(\"prototype\"));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in window) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__((this.zzz.zzz)) in window) L:if({yield __proto__ = *::*; }) { if (0/0) { }} else {{} } }");
tryItOut("export *");
tryItOut("return ({__noSuchMethod__ setter: __iterator__ });");
tryItOut("let(constructor, __iterator__ = (( \"\" .propertyIsEnumerable(\"__proto__\")).isPrototypeOf((this *= <y><z/></y>)))) ((function(){__parent__ = prototype;})());");
tryItOut("/*infloop*/\tfor(undefined; (#1#).__defineSetter__; __proto__.(#1=[#1#])) {(<y><z/></y>);export *; }");
tryItOut("(#3={a:#3#}); const __count__;");
tryItOut("do return  '' ; while((null) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(window in <x/>) let constructor, constructor = [z1]\ngc");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in [( /x/g  ? <x/> : prop) if (<x><y/></x> <  /x/g .@foo)]) {{}/*infloop*/for(*.unwatch(\"prop\"); (true == -1 *= <x><y/></x>); __parent__ = __noSuchMethod__) {} }");
tryItOut("return this.__defineGetter__(\"function::__proto__\", 3);");
tryItOut("prop = prototype;");
tryItOut("while((__noSuchMethod__.constructor) && 0)if(this) { /x/g ; } else ( '' );");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in function(id) { return id }) {return <x><y/></x>;export *; }");
tryItOut("export __parent__;");
tryItOut("{L:with(function::prototype = function ([y]) { })__iterator__ }");
tryItOut("{__iterator__\n }");
tryItOut("if(5.0000000000000000000000 === __iterator__) { if ([window for each (prop in <><x><y/></x></>)]) {__noSuchMethod__ = @foo, prototype; }\n} else {;__noSuchMethod__ = __proto__, __count__ = prototype, constructor = this; }");
tryItOut("5");
tryItOut("return;\nyield;\n\n");
tryItOut("/*for..in*/for(__noSuchMethod__ in \fnew false) <x><y/></x>;");
tryItOut("prototype");
tryItOut("return false;");
tryItOut("if(*::*) {yield *; } else {gc()gc() }\n");
tryItOut("/*for..in*/for(const [prototype, <><x><y/></x></> .@ this] = <><x><y/></x></> in <x/>) {@foo; }");
tryItOut("if(window) (<x/>); else  if (__parent__) ;");
tryItOut("do {/*infloop*/for((<x/>)(<zzz>0</zzz>) = 3/0; new (<x/>.watch(\"__count__\", function (__noSuchMethod__) { yield  /x/  } ))(<x><y/></x> +  /x/g ); [] = prototype.unwatch(\"__noSuchMethod__\")) var prop; } while(((({__noSuchMethod__: __proto__ = false\f instanceof  '' , __count__ setter: (function  __proto__ (prototype, __iterator__) { return each %= this } ).apply }))) && 0);if(*::*) export __count__; else  if (__iterator__ = (__noSuchMethod__ = constructor = <x/>)) if(({a2:z2})) throw false; else {yield window;function  __iterator__ (__count__, constructor) { yield; }  }");
tryItOut("/*infloop*/for(let __proto__ = new function (prototype) { return [11,12,13,14].map } (<y><z/></y>, 1.2e3.__lookupSetter__(\"prototype\")); !this.__defineSetter__(\"__iterator__\", /a/gi); null || <x/>) gc()");
tryItOut("break \t;export *;");
tryItOut("M:if('fafafa'.replace(/a/g, new Function)) {throw <><x><y/></x></>;return window; } else  if (eval(\"<x><y/></x>;\", __proto__)) {let  /x/g , constructor = this; } else break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<x><y/></x>['__iterator__'] in __count__) {yield arguments;return  '' ; }");
tryItOut("throw __parent__;");
tryItOut("switch( '' .yoyo(undefined)) { default: export __parent__; }");
tryItOut("if(<y><z/></y>) {<><x><y/></x></> } else  if (<><x><y/></x></>) {const __parent__;prototype, __iterator__ = window; } else yield (-1);");
tryItOut("/*for..in*/for(var prototype in (('haha'.split)(((__iterator__.(++ /x/g ))(<><x><y/></x></>(false), window.isPrototypeOf(constructor)))))){/*for..in*/L:for(const [__noSuchMethod__, getter] = (this.zzz.zzz) in <><x><y/></x></>.eval(<x><y/></x>)) {/*for..in*/M:for(let __proto__ in ((__proto__ = <x><y/></x>)((('haha'.split)(3, <y><z/></y>))))){throw (-1)\nthrow __iterator__; } } }");
tryItOut("do {yield;return; } while((new Function(prototype)) && 0);");
tryItOut("/*infloop*/M:for(__noSuchMethod__; (true.__lookupGetter__(\"__parent__\")) == (new Error()) += (constructor = (<x/> = <y><z/></y>.valueOf(\"number\"))); (constructor.(\n(*::*.isPrototypeOf(<><x><y/></x></>))))) ({ constructor: (1e81 ? * : <y><z/></y>).prototype })");
tryItOut("{let constructor;( /x/g ); } const __parent__;");
tryItOut("break ;");
tryItOut("if(yield \f \"\" .constructor) {with({}) __noSuchMethod__ = <x><y/></x>; } else {continue ;\ngc()\n }");
tryItOut("let (__noSuchMethod__ = this[*::*] >>= (<y><z/></y>\n)) { with({constructor:  /x/ .@*}){yield [];window } }");
tryItOut("if(function ([y]) { }) {export constructor; }");
tryItOut("while((((p={}, (p.z = window)()) ? -*::* : <x/>.propertyIsEnumerable(\"prop\"))) && 0)yield;");
tryItOut("({}).__lookupGetter__");
tryItOut("prototype, __iterator__ = <x/>;");
tryItOut("M:switch(<><xxx {prototype//h\n}={null} /></>) { case 2: case yield *::*: if(__proto__) {export 0;return; } }");
tryItOut("/*infloop*/L:for(let __noSuchMethod__; undefined.valueOf(\"number\"); #1# for each (__parent__ in <x><y/></x>)prototype) try { throw constructor; } catch(set) { {} } ");
tryItOut("if(prototype = ({})) { } } else  if (new function (__noSuchMethod__, __proto__) { return 5.0000000000000000000000.throw(window) } ((eval(\"<><x><y/></x></>.__defineSetter__(\\\"__parent__\\\", function  __iterator__ (__proto__, constructor)[[1]])\", (\n if (undefined)).__parent__ = __parent__ @  /x/ )))) export *;");
tryItOut("L:if(*::*) /*infloop*/L:do {while((__parent__ = []) && 0)throw 1e81; } while((function  constructor (__iterator__, __iterator__)<><x><y/></x></>\n)); else  if (--@foo || ) {/*infloop*/L:while(<y><z/></y>){with({__proto__: ([11,12,13,14].filter)}){;yield; } } }");
tryItOut("/*for..in*/for(({ prototype: ({ constructor: constructor }) }) in (yield arguments) >>>=('fafafa'.replace(/a/g, (undefined).watch))) ( '' );");
tryItOut("/*for..in*/for(let __parent__ in <><x><y/></x></>) {(new Function(\"\")) }\r\n");
tryItOut("/*infloop*/for(__proto__; (uneval(constructor%=@foo)); throw [function ([y]) { } if (<x><y/></x>)].__defineSetter__(\"constructor\", (<x><y/></x>).__defineSetter__)) {switch(__iterator__.__noSuchMethod__ = prototype) { default: <x/>;break;  } }");
tryItOut("M:if((([1,2,3,4].slice).apply).call(<y><z/></y>, <><x><y/></x></>).@*) { if (\nundefined) Math.sin} else {gc() }");
tryItOut("L: L: {{}/*for..in*/for(let __noSuchMethod__ = window in  /x/g ) var __parent__ =  set prop(__proto__, prop) { return @foo } ; }");
tryItOut("M:if((prototype = (function ([y]) { })())(yield <y><z/></y> != 1e+81 < (__noSuchMethod__.__iterator__ setter= [z1,,]), <><{prototype}></{prototype}></>) ? (((let (prop) []).__lookupGetter__(\"prototype\"))(([constructor * this / <><x><y/></x></> - (delete <x><y/></x>)]))) : (p={}, (p.z = (yield <><x><y/></x></>))())) export prop; else export *;");
tryItOut("do {; } while((let (({ __parent__: function::prop, function::x::prototype: __count__ })) window :: false) && 0);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = this in prototype) {var __iterator__ = *; }");
tryItOut("if([prototype].sort(window)) {} else  if (<><ccc:ddd> </ccc:ddd></>) {var prop = <y><z/></y>, __noSuchMethod__;yield [,]; }");
tryItOut("while(((__noSuchMethod__ == window)) && 0)return;");
tryItOut("throw <><x><y/></x></>; const <y><z/></y> + @foo;");
tryItOut("L:if(yield <x/> if (<><x><y/></x></> |= <><x><y/></x></>)) gc else  if ((-1) && window) {export prop; } else {throw <x><y/></x>;var __proto__; }");
tryItOut("/*infloop*/for(let [] = (--({ get __proto__(function::constructor) { return (-0) } , __iterator__: [] })); __iterator__; (*.hasOwnProperty(\"__iterator__\")[window.throw(<y><z/></y>) / 'fafafa'.replace(/a/g, (0/0).__defineSetter__)])) throw <y><z/></y>;");
tryItOut("/*infloop*/while( '' ){yield;export __noSuchMethod__; }");
tryItOut("/*for..in*/for(var __parent__ in @foo) \ryield true;");
tryItOut("do {{}(({a1:1})); } while(((function () { return 033 } ).call(this, )) && 0);");
tryItOut("/*infloop*/while(Iterator())export *;");
tryItOut("M:if(__count__) { } else  if ( /x/g ) {export __proto__;export *; }\nreturn;\n");
tryItOut("let [constructor, , prototype, __proto__, __noSuchMethod__]\nyield <x><y/></x>;");
tryItOut("let(function::__proto__, each = (__noSuchMethod__.(<y><z/></y>))(({}) |= <x><y/></x>)) ((function(){for(let y in [5,6,7,8]) try { this.zzz.zzz; } finally { throw prototype; } })());");
tryItOut("while((4.) && 0)/*infloop*/M:do /*infloop*/M:for(([undefined]); new (new Function)(); let (__noSuchMethod__) prototype[prototype|=<><x><y/></x></>]) break ; while((this.zzz.zzz)(prototype | [[]] >>= <><x><y/></x></>));");
tryItOut("{[1,2,3,4].slicevar __noSuchMethod__; }");
tryItOut("for(let y in []);");
tryItOut("while(([1].yoyo(#1=[#1#])) && 0)");
tryItOut("for(let y in [5,6,7,8]) with({}) { export *; } ");
tryItOut("/*for..in*/for(let __noSuchMethod__ in *) {<><x><y/></x></>; }");
tryItOut("/*infloop*/do {throw constructor; } while(window);");
tryItOut("this.zzz.zzz;");
tryItOut("if((({prop getter: (new Function(\"export *;\")) })).throw((<x><y/></x> >>> window))) {M:with({prototype: <x/>}){;<x><y/></x>; } } else ");
tryItOut("if((null)(null, ({a2:z2}))) { if ((this)) {if(*) export *; else  if (this) {yield;gc() } } else {function  prototype (__parent__) { yield -1 } throw 1.2e3; }}");
tryItOut("switch(1e+81) { case Math.pow: /*infloop*/M:for(var __proto__; (__iterator__.__defineGetter__(\"__iterator__\", (//h\nfalse).watch)); window.__lookupSetter__(\"__noSuchMethod__\")) true;case 5: case 5: break; case this:  }");
tryItOut("gc()var constructor = *, __count__;");
tryItOut("M:do  while((window) && 0)");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __parent__] = __parent__.__parent__ setter= Math.pow.__iterator__ = <><xxx {constructor}={((Math.pow)(default: \nthrow null;\nbreak; ;break; ))} /></> in 1e4--) /*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.__iterator__ in prop) while((<><x><y/></x></>) && 0){var prototype; }");
tryItOut("let (__proto__ = false) { do {break ; } while((<><x><y/></x></>) && 0); }");
tryItOut("yield;");
tryItOut("/*infloop*/do {( /x/ ); } while((true if (<><x><y/></x></>)));");
tryItOut("{}");
tryItOut("if(<><x><y/></x></> == constructor) { if (<y><z/></y> |= null) return;} else {return <><x><y/></x></>; } const __proto__;");
tryItOut("/*infloop*/do yield; while(prop)L: let (__parent__ = <x><y/></x>) { /*for..in*/for(const __proto__ in ((eval)(prototype))) }");
tryItOut("do \t{with((new [1,2,3,4].map(this.zzz.zzz .@  /x/g .@foo))){yield <y><z/></y>;const __iterator__ = function ([y]) { }, constructor = this; }/*for..in*/for(let [constructor, prop] = __count__ = __noSuchMethod__ in  /x/ ) {__count__ = undefined, prop = *::*;\t } } while(((<><zzz><x><y/></x></zzz></>\n.eval(__parent__ = __count__ ? ({a1:1}) & 033 : (this &= constructor))).@foo) && 0);");
tryItOut("if(<x><y/></x>) export *;");
tryItOut("new Function\n\nyield;\n");
tryItOut("return @foo;");
tryItOut("\n<x/>;\n");
tryItOut("L:with([[1]] == ([prototype for each (__noSuchMethod__ in *)].isPrototypeOf((yield <><x><y/></x></>))).constructor)/*for..in*/for(const (p={}, (p.z =  '' )()) in ((*::*)((-1)--))){gc() }");
tryItOut("{return;return <><x><y/></x></>; }\nthisMath.pow\n");
tryItOut("with((([11,12,13,14].filter) ? prototype = 0.1 : [11,12,13,14].map).prop)__noSuchMethod__ = __proto__; const __iterator__;");
tryItOut("let (__noSuchMethod__, ({ __proto__: <x/>.__proto__ }) = new ({}).hasOwnProperty(<x><y/></x>).__count__ = let (__noSuchMethod__ = *::*, __count__)  /x/g ) { yield [[]];M:if( /x/ ) { if (null) {return;gc() }} else {gc()throw <x/>; } }");
tryItOut("prop = <><x><y/></x></> >>>=( /x/ \n)");
tryItOut("/*infloop*/do {break ;; } while(__count__);");
tryItOut("/*infloop*/do {} while(((p={}, (p.z = <x><y/></x>)())));");
tryItOut("M:while((([11,12,13,14].map)) && 0)break ;");
tryItOut("");
tryItOut("for(let y in []);");
tryItOut("");
tryItOut("{/*infloop*/for(__count__ = prop; (); 3/0( \"\" )) {break ; }{@foo; } for each (__parent__ in ((__parent__)[<><x><y/></x></>])) for (__count__ in <y><z/></y>) for each (__noSuchMethod__ in prototype = <y><z/></y>, __proto__ = false) for (get in 3.141592653589793) }");
tryItOut("/*infloop*/while(#0=[undefined]){\tcontinue M;; }");
tryItOut("L:if((<\t><x><y/></x></>).watch ? ({}).__lookupGetter__( /* Comment */033).unwatch(\"constructor\") : prototype = [[]] % window) export x::__iterator__; else  if (([] :: true)) let prop;");
tryItOut("try { (({})); } catch'(__iterator__ /x/g  { let prop; } catch(function::__proto__ if <><x><y/></x></>) { yield <><x><y/></x></>; } catch(__iterator__) { return; } finally { return  \"\" ; } ");
tryItOut("\tlet (({ prototype: [, prototype, ] }), prototype) { /*infloop*/for(constructor; [[]].propertyIsEnumerable(\"__iterator__\"); __proto__ = @foo) yield; }");
tryItOut("[1]\n<x><y/></x>;");
tryItOut("/*for..in*/for(let __iterator__ = <x><y/></x> in *) if( /x/g ) {throw <><x><y/></x></>\t; }");
tryItOut("if([(uneval(false)) for each (__iterator__ in this)]) {let (__proto__, __count__ = <y><z/></y>) { __parent__; } }");
tryItOut("M:if(*::*) return <x/>; else  if (<x/>) let prop, __proto__ = [1,,];");
tryItOut("export *;");
tryItOut("throw StopIteration;");
tryItOut("let (__iterator__ = (yield true.__defineGetter__\f(\"prototype\", (new Function(\"yield ({a2:z2});\")))), __proto__ = #3={a:#3#}) { /*infloop*/do {\nfunction  __proto__ (prototype, __parent__) { export each; }  } while(({ __proto__: delete }) = <y><z/></y>); }");
tryItOut("yield\n");
tryItOut("M:while((__parent__ = constructor) && 0)__count__\n");
tryItOut("/*infloop*/for(var __noSuchMethod__; (yield __parent__).constructor; (__iterator__)[<x><y/></x\f>]) {/*infloop*/for(let (constructor = __count__, constructor) 1e+81; prop = window; (function ([y]) { })(.2)) {{yield; } } }");
tryItOut("if((__parent__ === false) ^ new null(<x><y/></x>, <x><y/></x>)) throw <x><y/></x>;\n{}\n else  if (__iterator__ <<= new function (constructor, constructor) { yield constructor = __proto__ } ()) {(<><x><y/></x></>); }");
tryItOut("L:if(1e-81) { if (([11,12,13,14].filter)) /*infloop*/for(let ({ __noSuchMethod__: ({ __parent__: __proto__, __iterator__: __iterator__ }), constructor: ({ prototype: prototype, __noSuchMethod__: prop }) }) = *::*.__noSuchMethod__; eval(\"throw *;\", <x><y/></x>).__noSuchMethod__; eval(\"[z1,,]\", window)) {{} } else {L:if(yield  /x/ ) M:switch(<><x><y/></x></>) { case <x><y/></x>:  } }}");
tryItOut("switch(<><x><y/></x>yyy</>) { default: export prop;break; case 7:  }");
tryItOut("with({}) export *\nexport *; const __proto__;");
tryItOut("/*for..in*/for(var __parent__(eval(\"return window;\", __iterator__)) in *::*) /*for..in*/for(var __proto__ in ((Math.sin)(<x><y/></x>)))return;");
tryItOut("let(__proto__ = ({ set prototype() { continue L;\f } ,  get __proto__ __proto__ (prototype) { yield @foo(); }  }), prototype) ((function(){this.zzz.zzz;})());");
tryItOut("with({__noSuchMethod__: new (@foo)(*::*, this)}){; }");
tryItOut("if([__count__, __parent__] = ({constructor: <x><y/></x>})) { if (<><x><y/></x></>.@foo) {yield;var __iterator__ = true, __count__;\ngc()\n\f }} else {}");
tryItOut("if(prototype = .2) yield;");
tryItOut("{(<x><y/></x>); }");
tryItOut("with(new ({})((x::prop))){\flet __parent__, __parent__ =  /x/ ;var __parent__ = 1e-81; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let default: break;  in <x><y/></x>) {var constructor, __noSuchMethod__ = *::*; }");
tryItOut("{<employee id=\"1\"><name>Joe</name><age>20</age></employee> }");
tryItOut("/*for..in*/for(var __count__ in new (({}).hasOwnProperty)((\r[,,] >> <x><y/></x>))) return;");
tryItOut("gc()");
tryItOut("if(\n1.3) {export *; }");
tryItOut("yield *;continue M;");
tryItOut("/*infloop*/for(__iterator__ = [(new Error(window, <x><y/></x>))].filter(Function); (-0).__iterator__;  /x/g .__lookupGetter__(\"prototype\")) throw [1];");
tryItOut("let __parent__;/*for..in*/for(const prototype = __parent__ = __iterator__ in []) {return  /x/g ; }");
tryItOut("/*infloop*/for(const prototype = null; <x><y/></x>;  '' ) __proto__ = undefined;");
tryItOut("M:with({__count__: @foo}){gc() }");
tryItOut("/*for..in*/M:for(var prototype.__proto__ in (([1,2,3,4].map)(__count__ = <y><z/></y>.hasOwnProperty(\"__iterator__\"))))gc()");
tryItOut("with({}) { var __count__ = <><x><y/></x></>, __count__ = <x><y/></x>; }  const prop;");
tryItOut(" else {}}");
tryItOut("continue M;/*for..in*/for(var [__parent__, prototype] = <><x><y/></x></>.eval(constructor) in <><x><y/></x></>) {{<x/>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let  \"\" .__proto__ in 1e-81) {<><x><y/></x></>; }");
tryItOut("if( '' ) const __iterator__ = true, __proto__ = false;");
tryItOut("{if((new ((@foo)[prototype])()).valueOf(\"number\")) {yield; } else ({}).hasOwnProperty }");
tryItOut("gc()\n/*for..in*/for(__iterator__ = <y><z/></y> in __noSuchMethod__) export function::__parent__;\n");
tryItOut("with(((eval)((let (constructor = -1, prop =  /x/ ) [[]]), <><x><y/></x></>))){if(new [1,2,3,4].slice(<x><y/\f></x>)) { if (--<y><z/></y>\t) ;} else let (__noSuchMethod__, __parent__ = <x><y/></x>) { {do break ; while((<x/>) && 0); } } }");
tryItOut("with({prototype: eval(\"null\", window)}){return [,,z1];break ; }");
tryItOut("/*for..in*/for(const (({ prop: ({ prop: __parent__, __count__: constructor }), __parent__: constructor })) in (((({}).__lookupGetter__).apply)(let (constructor) *::*)))/*infloop*/while((<x><y/></x> || [z1])) ");
tryItOut("if(<y><z/></y>) yield *::*;");
tryItOut("{*::*;while((*::*) && 0){let constructor, __noSuchMethod__ =  /x/ ; } }");
tryItOut("/*infloop*/do {return; } while(window)\nwith({__proto__: 3.141592653589793.__defineSetter__(\"setter\", 'haha'.split)})__parent__ = <><x><y/></x></>, __count__ = <y><z/></y>");
tryItOut("/*for..in*/for(@foo.__count__/*\n*/ in (('haha'.split)(prop = __iterator__)))throw __count__;");
tryItOut("{M:if(undefined) { if (0.__lookupGetter__(\"prop\")) {/*infloop*/for(const __iterator__ = __parent__; <x><y/></x>; <><x><y/></x></>) 1e+81; }} else {this.zzz.zzz; } }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("/*for..in*/M:for(var [__parent__, __noSuchMethod__] = <y><z/></y> in __noSuchMethod__|=window) {with({getter: __proto__.constructor})(*::*);\n\n }");
tryItOut("if(__noSuchMethod__ = <x><y/></x> for (prop in @foo)) return; else  if ((null++)) if(eval(\"[,,]\", -0)) { if (#1=[#1#]) /*for..in*/for(__parent__ = window in #1=[#1#]) {gc() } else {/*for..in*/for(let  in ((undefined)(<x><y/></x>))){gc() } }}");
tryItOut("{ \"\" ;__noSuchMethod__ }");
tryItOut("/*infloop*/for(let [, ({ prop: ({ __proto__: ({ __noSuchMethod__: ({ __count__: [__parent__, prop, prop, prototype, __iterator__], each: constructor }) }), __parent__: ({ __count__: [, __count__, ({ prototype: __count__, prototype: prop }), ], constructor: [] })\t }) }), ] = @foo; ((*).call(({__count__: __parent__, __noSuchMethod__: undefined }), )); __proto__ = [3/0 if (__count__)]) 0x99;");
tryItOut("if(<><x><y/></x></>.__defineGetter__(\"__count__\", [1,2,3,4].slice)) {__count__;yield; }");
tryItOut("if(Error(-3/0, (yield [15,16,17,18].sort((function  prototype (prototype, prototype)<><x><y/></x></>).call,  /x/ )))) { if (eval(\"\", window) <<=  /x/g ) {({}).hasOwnProperty }} else {; }");
tryItOut("/*infloop*/M:for(let __proto__; (yield undefined); true) return;");
tryItOut("for(let y in [5,6,7,8]) var __count__;");
tryItOut("with(<x/>)return __count__;");
tryItOut("while(() && 0)/*for..in*/for(let __proto__ = this.__defineGetter__(\"function::__noSuchMethod__\", prototype = __iterator__) in  \"\" ) export __noSuchMethod__; const function::__noSuchMethod__;");
tryItOut("return const constructor;");
tryItOut("L:if(<><x><y/></x></>) {gc()<x><y/></x>; } else  if ( /x/g ) try { ( \"\" ); } catch(__parent__) {  /x/g ; }  else {return  \"\" ;export *; }");
tryItOut("if((-1)) throw <><x><y/></x></>; else  if (#3={a:#3#}) {export *;return; } else {return <><x><y/></x></>; }");
tryItOut("M:if((uneval(window))) {let (__count__ = (-0), prototype) { __parent__[<y><z/></y>] } }");
tryItOut("/*for..in*/for(var prototype = this in prototype) const constructor = [1,,];");
tryItOut("export __parent__; const __proto__;");
tryItOut("throw constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (undefined)) /*infloop*/while(#3={a:#3#}){throw <><x><y/></x></>; }");
