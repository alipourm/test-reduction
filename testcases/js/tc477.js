tryItOut("constructor = function::prop;");
tryItOut("while((prototype = (__noSuchMethod__.prop)) && 0)if(<x/>) yield @foo; else  if (this) { } else var __proto__ =  /x/ ;");
tryItOut("yield null;");
tryItOut("\tdo ; while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/for([(eval(\"prop\", __proto__)) if (__count__)]\n; <x/>; ({ __count__: __parent__ }) = (<x/> ==  /x/g )) {if(new ((<x><y/></x> instanceof __iterator__))((Boolean(prototype)), <><x><y/></x></>)) {__proto__ = , __parent__;(null); } else {/*for..in*/for(const [prototype, constructor] = * in #1=[#1#]) {{} } }/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in -0) {__parent__, __parent__;return <x><y/></x>; } }");
tryItOut("{if((uneval(true)).__defineGetter__(\"prototype\", function () { return --window } )) { if (<><bbb xmlns=\"case 0: break; break; default: return;throw 1.2e3;break; \"><!--yy--></bbb></>) { } else return __proto__;} }");
tryItOut("if((window()--)) ");
tryItOut("if(('fafafa'.replace(/a/g, function(y) { yield y; const __iterator__ = window, prototype =  /x/ ;; yield y; })({}))) { if ((this.__defineGetter__(\"__count__\", [,,]))) function\t  __iterator__ (__noSuchMethod__, __iterator__ = __count__, __parent__ = window;) { yield @foo } } else { }");
tryItOut("/*for..in*/L:for([__count__, prototype] = -0.__lookupSetter__(\"__noSuchMethod__\") in this.__defineSetter__(\"function::__count__\", function(y) { yield y; 'haha'.split; yield y; })) {{} }");
tryItOut("M:if((function::__iterator__+=this.zzz.zzz)) gc else  if (break ) {return <x><y/></x>;L: export *; } else {/*infloop*/L:for\r(let __parent__; yield <><x><y/></x></>; window instanceof 4.) (<><x><y/></x></>); }");
tryItOut("/*for..in*/M:for(let __iterator__ in #0=true instanceof (new String())) with({}) { for(let y in [5,6,7,8]) this.zzz.zzz; } ");
tryItOut("/*for..in*/for(var prototype = __count__.eval(-0) in <x><y/></x>) /*for..in*/for([__iterator__, prop] = <><x><y/></x></> in <y><z/></y>) var __count__, __proto__ = arguments;");
tryItOut("/*for..in*/for(var prop in  /x/g ) {let __count__ = <><x><y/></x></>\n }");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("M:switch([11,12,13,14].map .@ ((constructor)(, window))) { default: const function::__parent__ = #1#, prototype;case 3: break;  }");
tryItOut("(-1 ? undefined : <><x><y/></x></>)['prop']");
tryItOut("L:if(yield <x/>) { /x/ ;\nreturn;\n } else  if (let (constructor) (('haha'.split).apply)) {(Math.pow).callexport *; } else <y><z/></y>");
tryItOut("/*for..in*/for(let __count__((<><x><y/></x></>.@foo)) in Error()) {L:switch(<><x><y/></x></>) { default: case 9: break; case 5: break; case *: ({}).__lookupGetter__break;  } }");
tryItOut("<y><z/></y>.__count__ = prop; const __iterator__;");
tryItOut("if((constructor) = prop.@*) <x/>;");
tryItOut("yield;\n__parent__ = 1e+81, __count__;\n");
tryItOut("L:if( /* Comment */this) { if (([15,16,17,18].map(return undefined, 'fafafa'.replace(/a/g, window) >= new constructor ,  ''  && *))) <x><y/></x>} else break ;");
tryItOut("{L:with((((<><x><y/></x></>)()) ? (__iterator__ = [,,]) : (__proto__ = <x><y/></x>)).isPrototypeOf(prototype.__noSuchMethod__ getter= gc))yield; }");
tryItOut("while((new ((*::*.watch(\"__count__\", function ()(__parent__ = (function ([y]) { })()))))( /* Comment */<><x><y/></x></> << window)) && 0)throw StopIteration;");
tryItOut("with(<y><z/></y>)/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in true) {export *;__count__; }");
tryItOut("if((prototype = __parent__)export *; else /*");
tryItOut("return;");
tryItOut("prop = __noSuchMethod__;");
tryItOut("if((Math.sin).propertyIsEnumerable(\"__iterator__\").__lookupGetter__(\"__iterator__\")) {<bbb xmlns=\"(<x/> - arguments)\"><bbb xmlns=\"(this .@x:: <x/>)\"></\tbbb><bbb xmlns:ccc=\"__iterator__\"><ccc:eee></ccc:eee></bbb>yyy</bbb>/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in null) {__noSuchMethod__; } } else {yield;if((default: with({}) { prototype = <x><y/></x>, constructor =  '' ; } case 6: /*infloop*/for([z1].__count__; this; this.__defineSetter__(\"__count__\", <x/>)) with(__noSuchMethod__)export __proto__;break; case 9: export __noSuchMethod__;break; (eval(\";\", this), <x/>)) |= this >> yield) {yield;with(<y><z/></y>)gc() } else  if ([this *= 1e81 if (__count__)] += <> /x/g </>) {throw window; } else \n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in __noSuchMethod__) {let constructor;continue ; }");
tryItOut("while(((({}).__lookupGetter__.unwatch(\"__noSuchMethod__\"))) && 0){{var __count__, prop;return; }/*infloop*/do {throw <y><z/></y>;(<x/>); } while(<><x><y/></x></>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in Date()) {export *; }");
tryItOut("if((__parent__ || []).valueOf(\"number\")) {(new Function(\"continue ;\")) } else  if (<x<y/><__parent__/>.(<x><y/></x>).__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map)) {/*infloop*/M:while(<x/>){var prototype; }yield <y><z/></y>; } else {gc()function (__parent__)<y><z/></y> }");
tryItOut("/*infloop*/do yield; while((export prototype));");
tryItOut("<{__proto__}><>\f<x><y/></x></>++.__defineSetter__(\"__noSuchMethod__\", <><x><y/></x></>.hasOwnProperty(\"prop\")) </{__proto__}>");
tryItOut("switch(<><x><y/></x></>) { case <y><z/></y>:  }");
tryItOut("/*infloop*/while(((Boolean()) ? (<y><z/></y>.yoyo(<x><y/></x>)) : (<x/>.__proto__))){continue L; }");
tryItOut("yield <x><y/></x>;");
tryItOut("{yield  \"\" ;var prop = <x><y/></x>; }");
tryItOut("let(prop, __iterator__) ((function(){for(let y in []);})());");
tryItOut("throw <x/>;function(q) { return q; }");
tryItOut("throw @foo\n");
tryItOut("/*infloop*/do __iterator__ while(eval(\"return;\", (#1=({__iterator__: this}))));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__(<y><z/></y>) in ((uneval(null)).watch(\"__iterator__\", @foo))) /*infloop*/for(var constructor = (yield __parent__); null;  /* Comment */({a1:1})) {(__noSuchMethod__);prop, __iterator__; }");
tryItOut("with(new Iterator())__count__: <x><y/></x> || @foo.@*");
tryItOut("if(#1#.throw( /x/g )) let prop = this, __proto__; else  if (__parent__ = <><x><y/></x></>) {(<x><y/></x>); } else ");
tryItOut("/*infloop*/for(let __parent__ = <><x><y/></x></>.__noSuchMethod__ = [, ]; <x><y/></x>.__lookupSetter__(\"__count__\").hasOwnProperty(\"__iterator__\"); prop = 3) gc()");
tryItOut("L:if(__parent__.__noSuchMethod__) /*infloop*/do <y><z/></y> while(((({ set __noSuchMethod__() { return  /x/  }  }))[('haha'.split(__proto__))])); else  if (((Function)())) switch(new ({}).hasOwnProperty()) { case 5: var __count__ = <y><z/></y>;break;  }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/for(getter in ((<x/>)(<><x><y/></x></>.isPrototypeOf(<x><y/></x>))))return ;");
tryItOut("/*for..in*/");
tryItOut("M:switch(__noSuchMethod__ = *) { case #1=({__noSuchMethod__: this}): yield this;default:  }");
tryItOut("if(__proto__) { if (constructor = (-0).__proto__) /*for..in*/for(const __proto__ in true) {let __proto__ =  \"\" , __proto__ = <x><y/></x>;yield; }continue L;} else __parent__;");
tryItOut("/*infloop*/L:for(({ __count__: [({ __proto__: [prototype, ] })], __count__: [, , constructor] }) = (yield (({ __noSuchMethod__: __count__ }) = ((1 for (x in [])))(true, window))); ({ __noSuchMethod__: __parent__, __count__: prototype }) = <><x><y/></x></>.__lookupSetter__(\"constructor\"); __parent__) __parent__ =  \"\" ;");
tryItOut("/*for..in*/for(var [__parent__, constructor] = * in __parent__) {({a2:z2});; }");
tryItOut("/*infloop*/L:for(new RegExp(prop); yield 3; <x/> instanceof __parent__) {Math.powconst __proto__; }");
tryItOut("if((<y><z/></y>.watch(\"__noSuchMethod__\", Math.pow))) return; else  if (-0) return;");
tryItOut("new Function");
tryItOut("do {let constructor, __parent__;export *; } while(((<><x><y/></x></>.throw(case [,]: let __proto__ = [[1]];undefined;default: break; const constructor, __noSuchMethod__ = <><x><y/></x></>;case <y><z/></y>: case 2: ))) && 0);");
tryItOut("M:while((eval(\"__noSuchMethod__\", <x/>)) && 0){export __noSuchMethod__; }");
tryItOut("L:if((p={}, (p.z = yield 0.1)())) { if ((__count__ = (undefined.yoyo([]))\n).prop = false) {yield -0; } else new Function}");
tryItOut("M:while((( /x/  ? <y><z/></y> : __iterator__).__defineSetter__(\"constructor\", function(y) { yield y; return;; yield y; })) && 0)break ;/*infloop*/for(__count__ = __noSuchMethod__; <x/>; 1e81) yield *;");
tryItOut("__parent__ = constructor;");
tryItOut("{while((eval(\"window.@foo\", (function::__parent__ .@ <x><y/></x>))) && 0){} }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__(({prop: <><x><y/></x></>}))) with(new  \"\" ()){{if([[]]) yield .2; } } }");
tryItOut("let (constructor = <x/>, prototype) { throw prototype; }");
tryItOut("for(let y in []);");
tryItOut("do {let __iterator__, __noSuchMethod__; } while(((({ prototype: __noSuchMethod__, __count__: ({ prop: this.zzz.zzz, __parent__: ({ __count__: ({ __noSuchMethod__: __count__, yield: __parent__ }), __proto__: __count__ }) }) }) = (yield yyy))) && 0);");
tryItOut("/*infloop*/L:for(var __proto__; #1#; <><x><y/></x></>) {return; }");
tryItOut("M:if((new (prototype = 1.2e3) - [, __noSuchMethod__, , __noSuchMethod__, ] = <><x><y/></x></> !== (-0)())) yield __iterator__; else  if (false\n.throw( '' )) yield else {if(-0) { if (*::*) __noSuchMethod__ = undefined; else {export __parent__;break ; }}gc() }");
tryItOut("yield\n");
tryItOut("continue ;");
tryItOut("/*for..in*/L:for(var __proto__ =  \"\" .__count__ in __iterator__ = __iterator__) __proto__ = #0=[constructor]");
tryItOut("/*infloop*/for(const constructor; this; false) {export __parent__;null; }");
tryItOut("{prop, constructor;if(<><x><y/></x></>) { if ( \"\" ) yield;} else {var __parent__, constructor;gc() }\nconst __parent__, prop = this; }");
tryItOut("{function  prototype (__count__) { gc() } continue M; }");
tryItOut("with({}) { if(constructor = 1.3) yield 4. } ");
tryItOut("L: {return <x/>;export prototype; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; __proto__.__noSuchMethod__ setter= (new Function(\"continue M;\")); ((uneval(<><x><y/></x></> .@*:: <x><y/></x>)) -= prop = [, ])) L:if((this.@foo)) {;gc } else let __proto__ = <><x><y/></x></>;");
tryItOut("with({}) throw @foo\nwhile(([15,16,17,18].map(eval, null)) && 0){break ;{} }");
tryItOut("if(yield @foo) (window); else yield constructor;");
tryItOut("do yield <><x><y/></x></>; while((function ([y]) { }) && 0);");
tryItOut("if((({constructor: --<y><z/></y>.* }))) {if(({prop: __proto__.set })) gc()/*infloop*/for(prototype; <><x><y/></x></>; #3={a:#3#}) yield; } else  if ((new (({}).hasOwnProperty)((<y><z/></y>.watch(\"constructor\", function(q) { return q; }))))) var __noSuchMethod__ = true;");
tryItOut("/*infloop*/do /*for..in*/for(const __noSuchMethod__ in ((Math.pow)(*))){yield;yield; } while(((yield <><x><y/></x></>)));");
tryItOut("/*infloop*/for(__count__ = (window.isPrototypeOf(undefined)); <zzz>[,,]</zzz> ; (\n[,,z1])) {const prototype;0/0; const __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in 0) {return function ([y]) { };__parent__ = <x><y/></x> }");
tryItOut("let(prototype = <><x><y/></x></>.eval(<><x><y/></x></>)) ((function(){let(__noSuchMethod__) { var __noSuchMethod__ = [,];})());");
tryItOut("break ;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("let (prototype = prototype) { return; }");
tryItOut("let (__count__ = Math.pow, __parent__) { __iterator__ = constructor, prop; }");
tryItOut("let (__count__ = (1e4)[<x/>]) { return; }");
tryItOut("let prototype, __parent__ = <><x><y/></x></>;\nvar __iterator__, constructor = <y><z/></y>;\n");
tryItOut("switch(null) { default: ; }");
tryItOut("L: {/*for..in*/for(prop in ((function  x::__count__ ()<x><y/></x>)(__count__.__parent__ = -3/0))) }");
tryItOut("yield <><x><y/></x></> <<=  '' [<y><z/></y>];");
tryItOut("with(((yield false)) * true){let __count__ = 0.1, constructor = __parent__; }");
tryItOut("do {__count__, __proto__;export __iterator__; } while(( '' ) && 0);");
tryItOut("export *;");
tryItOut("/*infloop*/L:while(#3={a:#3#} %= [ ''  if (null)]){if(<y><z/></y>) return; else  if (*) export __iterator__; }");
tryItOut("if(__parent__ = prop) { if ((new this)) {return;yield; }} else L: let try { return; } catch(prop) { ; } ;");
tryItOut("/*infloop*/L:do do {continue L; } while((__noSuchMethod__ = (yield <x><y/></x>)) && 0); while(this.__defineGetter__(\"prototype\", Math.pow));");
tryItOut("/*for..in*/L:for( prototypeconstructor = (-0) in x::constructor = prototype) { }");
tryItOut("for(let y in []);");
tryItOut("M:if(function  __count__ (__count__) { return  /x/g  }  == (prototype.prop)) {export __iterator__; } else  if (((++*::*).@foo)) ;");
tryItOut("{export __proto__;export __parent__; }");
tryItOut("\nif(*::*.throw(prop)) {throw <x/>;yield this; } else while((((<x><y/></x>)[<x><y/></x>])) && 0){yield; }");
tryItOut("\n");
tryItOut("if( \"\"  ? 5.0000000000000000000000 : <x/>) /*infloop*/for(__count__;  '' .__lookupSetter__(\"__count__\"); @foo.__defineSetter__(\"__parent__\", <x><y/></x>)) {yield;let prop = <x/>; } else  if ((({__noSuchMethod__:  '' }))) break L;");
tryItOut("L: (<x><y/></x>)\n");
tryItOut("if(let) return  /x/g .__lookupGetter__(\"constructor\")//h\n;\t else  if ([1e81] @ prototype = __proto__) {export *; }");
tryItOut("export prototype");
tryItOut("throw <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var __noSuchMethod__ in <y><z/></y>) {export __noSuchMethod__; }");
tryItOut("export constructor;");
tryItOut("/*infloop*/for(({constructor: <x><y/></x> }) .@ yield.([,,]); <x/>.*; this) yield;");
tryItOut("{if((Error())) gc() else const <><x><y/></x></> = <x/>;{export *; } }");
tryItOut("\n{/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x/>) const __parent__;throw \fthis;\n/*for..in*/for(const __noSuchMethod__ in  '' ) throw *;\n }");
tryItOut("/*for..in*/for(prototype = @foo in (this.zzz.zzz)) {/*infloop*/for(let constructor; <><x><y/></x></>[<x><y/></x>]; <y><z/></y>) ;/*infloop*/for([<x><y/></x>]; *.unwatch(\"__iterator__\"); <x/>.__noSuchMethod__ = <><x><y/></x></> ? <><x><y/></x></> : ({})) {let __parent__; } }");
tryItOut("if(eval(\"(-0)\", @foo)\n) prototype = [[]]; else  if (@foo) {gc() } else /*for..in*/for([__parent__, __iterator__] = (prototype = constructor) in this) {export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (0.1)[(function ([y]) { })()] { }['__proto__'] in (eval)((__proto__.prototype =  '' .watch(\"__parent__\", (1 for (x in [])))), eval(\"/*for..in*/L:for(var __count__ = <><x><y/></x></> in export __noSuchMethod__;) {; }\", <y><z/></y>))) {let __noSuchMethod__ = <x><y/></x>; }");
tryItOut("with(this)break ;");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = false in [1,,]) {return;; }");
tryItOut("switch(this) { default: __iterator__ = <><x><y/></x></>, __parent__;break;  }");
tryItOut("for(let y in []);");
tryItOut("{/*for..in*/for(let [prop, constructor] = __proto__ & function ([y]) { } in \nthis) /*for..in*/for(__parent__ in <><x><y/></x></>) {(new Function).\tapply }let ([({ prototype: constructor }), ]) { let constructor; } }");
tryItOut("/*for..in*/M:for(const prop =  ''  | {} in constructor) ;");
tryItOut("/*for..in*/L:for(const ({ __count__: ({ __noSuchMethod__: ({ constructor: __count__, __count__: __parent__ }), constructor: ({ get: __parent__, __parent__: prop }) }), constructor.__iterator__: __iterator__ }) in ((yield -0) +  /* Comment */@foo & [1,2,3,4].slice(<x><y/></x>, -3/0))) {/*infloop*/do {yield ; } while(({prop: <><x><y/></x></>,  get prop(prop, __parent__)<y><z/></y> }));if(#3={a:#3#}) { if (__count__) {__noSuchMethod__yield *; }} else let constructor = #1=[#1#], prototype; }");
tryItOut("/*for..in*/for(const __count__ in (([1,2,3,4].slice)(({__parent__ setter: Function, constructor: yield [,,z1].propertyIsEnumerable(\"constructor\") })))){return null; }");
tryItOut("switch(eval(\"{}\", <x><y/></x>)) { case 9: break; default: return <x><y/></x>; }");
tryItOut("export *\nreturn <x><y/></x>;");
tryItOut("/*infloop*/M:for([,]; prop; function ([y]) { }) {gc() }");
tryItOut("export *\n/*infloop*/for(true; <x><y/></x>; <><x><y/></x></>) (undefined)\n");
tryItOut("L:if((-1)) { if ( '' ) {return <x/>;break ; }} else <><><ccc:ddd><!--yy--></ccc:ddd></>\t</>");
tryItOut("if(({}).__lookupGetter__) { if ((this.zzz.zzz)) \fcontinue M; const __proto__;} else /*infloop*/for(let __parent__; ({ __noSuchMethod__: function::constructor }) = [].__lookupSetter__(\"__parent__\"); (__proto__.(prop).propertyIsEnumerable(\"prop\"))) {yield __iterator__; }");
tryItOut("/*infloop*/for(let ({ __parent__: __proto__, __proto__: ({ prototype: constructor }) }) = [<y><z/></y>]; undefined.propertyIsEnumerable(\"__noSuchMethod__\"); prototype.prop) {throw __noSuchMethod__;if(__noSuchMethod__) export setter; else  if ((function ([y]) { })()) {__proto__ = 0;throw true; } }");
tryItOut("if(<><{__noSuchMethod__}>yyy</{__noSuchMethod__}></>) { } else  if (new (1.2e3)((-0), <bbb xmlns=\n\"*::*\"> </bbb>)) {const __iterator__ = <><x><y/></x></>, __count__ = <><x><y/></x></>; } else {return __count__; }");
tryItOut("return;");
tryItOut("L:if(<x/>) { if (new (undefined)(false/*\n*/)\n) {([]); }} else {prototype = *; }with({})  /x/ ;");
tryItOut("L:while((@foo) && 0){throw @foo;continue L; }{\tprototype = *::*;yield; }");
tryItOut("/*infloop*/L:for(const [] =  /* Comment */ /x/ .__lookupSetter__(\"prototype\"); .2 ? this == -0.__defineGetter__(\"__parent__\", gc) : true; ( \"\" .@foo)) yield;");
tryItOut("with({function::__iterator__: <y><z/></y>.throw(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)[((uneval(prop > this)))].@foo}){if(this) {var prop, __noSuchMethod__ = 3; } else {yield undefined; }if( \"\" ) { if (prototype) {continue L;const __noSuchMethod__ = __count__, __iterator__; } else {;this; }} }");
tryItOut("while((<x/>++) && 0)let __noSuchMethod__ = <x><y/></x>, __noSuchMethod__ = constructor;");
tryItOut("/*infloop*/while(prop =  /x/g ){const constructor = <y><z/></y>, prop; }");
tryItOut("L:if(--( /* Comment */ /x/ )) /*infloop*/for(var constructor; __parent__; <><x><y/></x></>)  else /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__.__parent__ in @foo) break L;");
tryItOut("if(({ __proto__: false })) yield  '' .__noSuchMethod__;");
tryItOut("{if(<y><z/></y>) {__count__ = prop, __noSuchMethod__; } else {var constructor;gc() }M:if(function::prototype = (constructor.prop)\f) { if (eval(\"(<><x><y/></x></>);\", (constructor.__iterator__ setter= ({}).hasOwnProperty))) {{return *::*; }yield; } else {yield __parent__;gc() }} }");
tryItOut("/*infloop*/for([,,]; __parent__ = (function ([y]) { })(); 1e-81 > 3) {/*infloop*/for(const __iterator__; *; *) this;; }");
tryItOut("{{{return;undefined; } }/*infloop*/do null :: true while(true); }");
tryItOut("with(( set __iterator__(__count__, prototype)*::*.@*)){return\n }");
tryItOut("let(constructor, __count__) { this.zzz.zzz;");
tryItOut("return;");
tryItOut("if(false) (window); else  if ( \"\" ) {const __iterator__ = window, __parent__; } else {const prototype =  \"\" , __proto__; }");
tryItOut("/*for..in*/for(let __proto__ = ( /* Comment */({ __noSuchMethod__: __parent__\f }) = function::prototype.@foo) in this.__defineSetter__(\"constructor\", [1,2,3,4].slice)) {L:if(<y><z/></y> <=  /x/g ) {<><x><y/></x></>; } else  if ((undefined for (prop in  \"\" ))) /*\n*/\nreturn <x><y/></x>;\n__noSuchMethod__ = <x><y/></x>; }");
tryItOut("if((p={}, (p.z = new ((function  prototype (__noSuchMethod__) { return function ([y]) { }; } ).call)(<x/>).__parent__)())) { if (new null(new (eval)())) if(new \tfunction  __parent__ () {  } (function::__proto__)) return <><x><y/></x></>; else continue L; else yield;}");
tryItOut("if((([z1,,] =  /x/g ).@*).__defineSetter__(\"__proto__\", Math.pow)) { if (eval(\"return prop\", [constructor = [[]].__lookupSetter__(\"__parent__\") if ([, prototype, prototype, __proto__, ])]).__count__) {if(each)  /x/ \n }} else {{}\nswitch(*::*) { default: break;  } }");
tryItOut("if(<y><z/></y>) { if ((_.@foo)) (*);\n;\n else var constructor;}");
tryItOut("const __parent__ = <><x><y/></x></>, __iterator__ = <x/>;");
tryItOut("/*infloop*/M:while([[]])var prototype = [1,,], __parent__ = undefined;");
tryItOut("if(*::*) yield; else gc()");
tryItOut("L:do {return;export prototype; } while(( { return [[]] } ) && 0);");
tryItOut("{(<><x><y/></x></>); }");
tryItOut("with({}) L: {break M;export *; }");
tryItOut("M:if(__count__) { } else  if (__count__+= /x/g .__lookupGetter__(\"constructor\")) {yield <><x><y/></x></>; }");
tryItOut("(if(<x><y/></x>{ if (false) export *;}) else {constructor = this, __parent__; }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ in (('haha'.split)( \"\"  += window.__lookupSetter__(\"prop\"))))continue L;");
tryItOut("throw constructor;");
tryItOut("/*for..in*/M:for(const (<x/>)(__parent__) in let (__iterator__ = <x/>) true\f.__lookupGetter__(\"__iterator__\")) {/*infloop*/while(prototype = <x/>){yield;return *::*; }export *; }");
tryItOut("switch(([,,] & *::*)) { default: /*infloop*/M:do const constructor; while(window , false.__defineGetter__(\"__count__\", [1,2,3,4].slice));break; case Function().unwatch(\"__proto__\"): L:while(((__parent__.propertyIsEnumerable(\"prototype\"))) && 0)yield;break; case prototype = 0.1: __parent__ = 1e81, __parent__ = window;yield;case [[1]]:  }");
tryItOut("/*for..in*/for(const __parent__ in (('haha'.split)((true)(<y><z/></y>, 3.141592653589793) .@*:: ((<y><z/></y>).__defineSetter__)())))break L;");
tryItOut("__iterator__;");
tryItOut("with({yield: ({ constructor: ({ __parent__: prototype }) }) = <x/>}){/*infloop*/M:for(\n<x><y/></x>; undefined; <y><z/></y>) {let __proto__ =  '' ;let __count__; const prop; } }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __iterator__] = __iterator__.yoyo(false) in __proto__ = <y><z/></y>.__lookupSetter__(\"__count__\")) {gc()if(*::*) {throw prop; } const constructor; }");
tryItOut("if() {return <x><y/></x>; } else @foo");
tryItOut("/*infloop*/M:for(let [, , ({ constructor: prototype, __parent__: prop }), , ] = __proto__ = false;  /x/ ; ((eval).call(<x/>, \t))) while((<x/>) && 0){(window).__defineSetter__ }");
tryItOut("throw __iterator__;");
tryItOut("for(let y in []);");
tryItOut("let (prototype, try { export *; } catch(__count__) { yield; } finally { (<><x><\ty/></x></>); }  = 033) { (0/0); }");
tryItOut("/*for..in*/for(var prop = (<x/>).watch(<x><y/></x>, ({a2:z2})) in prop) {let __proto__ = <y><z/></y>, __proto__;export prop; }");
tryItOut("for(let y in [5,6,7,8])  \"\"  = constructor;");
tryItOut("/*infloop*/for(({ __proto__: __noSuchMethod__ }) = <><x><y/></x></> >>>=@foo; ( /* Comment */3.141592653589793 +=  \"\" .isPrototypeOf(<x><y/></x>)); Date(undefined)) /*infloop*/for(var ({ __iterator__: ({ __parent__: prototype, __proto__: __noSuchMethod__ }) }) = [1,,].valueOf(\"number\"); prop.prototype getter= ++; ({ __proto__: prototype, constructor: constructor }) = ({ __iterator__: __iterator__, prototype: prop })) {const constructor; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let (undefined)(1e4) in <y><z/></y>) ( /x/g );/*infloop*/for(__parent__; (__parent__%=([11,12,13,14].map).@foo); (window++)) {/*for..in*//* nogeckoex bug 349964 */ for  each(constructor.__count__ in this) {undefined; } } }");
tryItOut("/*infloop*/L:for(var [, ({ function::case 1: L:if(false) {export __proto__;this; } else  if (-0) {yield; }default: break; : ({ __iterator__: set, __count__: ({ __proto__: __proto__ }) }) }), __noSuchMethod__, [constructor, , ({ delete: ({ __iterator__: __parent__ }), __count__: get }), , ]] = break ; (<><x><y/></x></>.__lookupGetter__(\"function::__proto__\")); ) M:while(( /x/ ) && 0){((1 for (x in []))).apply }");
tryItOut("with([<><x><y/></x></>\f])export __proto__;");
tryItOut("/*infloop*/for(let ( \"\" (arguments)['prototype'] = *; (#1=[prop = @foo])(); this) {yield; }");
tryItOut("return;\nexport *;\n");
tryItOut("return -1");
tryItOut("/*infloop*/while([,,]\t)(this);");
tryItOut("M:if(eval(\" \\\"\\\" .__defineGetter__(\\\"prototype\\\", eval)\", prop = <><x><y/></x></>)) { if ( if ((__parent__ = 0/0))) new Function} else {(1e+81);(__count__); }");
tryItOut("return Iterator((<><x><y/></x></> ^ window)) >>>=#2=({__proto__: <x><y/></x> -= ({}) === (new Array(0,  /x/g ))});");
tryItOut("/*infloop*/while([__noSuchMethod__ = *].sort((__count__).watch))const __parent__ =  \"\" , __iterator__;");
tryItOut("this.zzz.zzz; const __count__;");
tryItOut("/*infloop*/for(var __noSuchMethod__; __iterator__; <x><y/></x>) {return;gc() }");
tryItOut("for(let y in []);");
tryItOut("return  /x/g ;\nif(<y><z/></y>) {__noSuchMethod__, __parent__; } else export prototype;\n");
tryItOut("/*infloop*/for((new ((({}).hasOwnProperty).apply).call\f(constructor = window.@foo)(let (\t({ __noSuchMethod__: constructor }) = this.__defineSetter__(\"prop\", (1 for (x in []))), prototype = <><x><y/></x></>) [function::__noSuchMethod__, constructor, prop, each] = )); (uneval(1e4)) += (<><x><y/></x></>.watch(\"__iterator__\", gc)) - yield <><x><y/></x></>++; constructor['__count__'] - @foo) /*infloop*/for(({ constructor: __parent__ }) = (__count__ =  '' ); new (null)(); (this.__defineSetter__(\"__parent__\", eval))) {yield;; }");
tryItOut("let(__count__, [, [], ] = (1e4)[__count__ = @foo]) ((function(){with({}) { constructor, __noSuchMethod__ = <><x><y/></x></>; } })());");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(__proto__ in ({ constructor: constructor }) =  /* Comment */033) /*for..in*/for(var [,,]['__iterator__'] in ((/a/gi)(((yield <x><y/></x>))))){\tvar __count__; }");
tryItOut("/*for..in*/for(const __parent__ in (([1,2,3,4].map)(( ''  = <><x><y/></x></>( /x/ , <><x><y/></x></>)))))break ;");
