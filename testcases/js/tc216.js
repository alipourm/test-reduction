tryItOut("switch(<x/>) { case 033: break; case 8: default: break; break; default: break L;case undefined: case <x/>: yield  '' \r;break;  }\nlet __noSuchMethod__ = *, prop = <x/>;");
tryItOut("while((__count__.( /x/ )) && 0)(<x/>);");
tryItOut("/*infloop*/while([ '' ].map(<x><y/></x>)){yield @foo; }");
tryItOut("let(__proto__ = *::*) { with({}) { throw __count__; } ");
tryItOut("\t{}");
tryItOut("{let __proto__; }");
tryItOut("var __noSuchMethod__; const constructor;");
tryItOut(" const __iterator__;");
tryItOut(" const constructor;");
tryItOut("with({__parent__: new (<><x><y/></x></> instanceof *::*)(@foo.throw(@foo))})//h\n(window);");
tryItOut("L:with({constructor: ( \"\" .@foo)}){{} }");
tryItOut("yield;");
tryItOut("{yield *::*;var __proto__ = *::*, constructor = ({a2:z2}); }");
tryItOut("/*infloop*/for(<x><y/></x>; <x><y/></x>; __noSuchMethod__) {export {};(yield function(id) { return id }) }");
tryItOut("with({}) { throw __noSuchMethod__; } ");
tryItOut("L: __proto__");
tryItOut("/*for..in*/for(prototype in ((function(y) { yield y; export prototype;; yield y; })([<><x><y/></x></>]))){{}\nbreak ;\n }");
tryItOut("for(let y in []);");
tryItOut("with({}) function::__proto__, prototype\r = constructor;\nvar __noSuchMethod__;\n");
tryItOut("if((function ([y]) { })()) continue ;");
tryItOut("with({prop:  \"\" });");
tryItOut("/a/gi const constructor;");
tryItOut("if(if((<><x><y/></x></> ? 3.141592653589793 : window)) {throw [z1];throw *; } << ((#1=[#1#])() %= window % <><x><y/></x></>)) {with({__iterator__: <><x><y/></x></>}){export *;continue M; } }");
tryItOut("M:while((<><x><y/></x></>) && 0){window; }");
tryItOut("1e+81;");
tryItOut("/*for..in*/for(let <><{prototype}><zzz>let (__proto__ = null) </zzz><!--yy--></{prototype}></> in ((function  __noSuchMethod__ (__proto__, prop)'fafafa'.replace(/a/g, (('haha'.split).call( for (constructor in this), <x><y/></x>)).__defineSetter__))(new Number(this.zzz.zzz)))){M:with({__count__: [1,2,3,4].slice})return;{(arguments); } }");
tryItOut("M:if(new ([1,2,3,4].map)(__iterator__)) {{} } else  if (@foo * undefined) return @foo; else return;");
tryItOut("L:if((eval(\"export *;\", <x><y/></x>) *= (({prop: *::*, __parent__: <x/> })))) return; else  if (undefined) {/*infloop*/while(.2)function(q) { return q; } } else {{{} }continue ; }");
tryItOut("try { with({}) return; } finally { return __noSuchMethod__.__parent__ getter= [1,2,3,4].map; } ");
tryItOut("with(<x/>){L:if((\n<x>\t<y/></x>)) prototype; else  if (((\n{ set __count__(__count__) { return let }  })))  }");
tryItOut("return;<><x><y/></x></> const prop;");
tryItOut("yield;return <x/>;");
tryItOut("([1,,]);\nreturn {};\n");
tryItOut("M:switch((-0.__lookupSetter__(\"prop\"))) { default: if((uneval(*::*))) { if (\t__count__ :: prop) __count__;} else var __proto__;/*infloop*/do {yield 3;M:if(<x/>) { if ([,]) {;{} } else {gc()let __proto__ =  '' ; }} } while(((new Function(\"let constructor = <><x><y/></x></>, __iterator__;\"))).call(undefined, ));break; case 9: {}case  /x/g : export *;if([,,z1]) { if (<x/>) {yield; } else gc()}/*infloop*/for(let constructor; ([15,16,17,18].sort(function  prop () { constructor = prop; } , <x><y/></x>)); ( \"\" .yoyo(<x><y/></x>))) {(#1=[#1#]); } }");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: ({ prop: [, , __proto__] }) }) = __parent__.constructor = __iterator__.__noSuchMethod__ getter= [1,2,3,4].map; ({ __parent__: __parent__ }) = (function  __proto__ () { yield __noSuchMethod__ } ).apply.hasOwnProperty(\"__noSuchMethod__\"); [1,,].valueOf(\"number\")) ((yield __noSuchMethod__)).propertyIsEnumerable(\"constructor\")");
tryItOut("/*infloop*/for(var ({ prop: prototype }) = (yield ({})) / (new Function(\"{}\"))(undefined); (!__proto__); *) yield delete this;");
tryItOut("{__parent__; }");
tryItOut("let (prototype) { while((({__proto__: window })) && 0){continue ;__iterator__ } }");
tryItOut("while((__iterator__ = eval(\"*\", <x><y/></x>)) && 0){/*infloop*/for(1e+81; __proto__ = let (__proto__, function::__proto__) <x><\fy/></x>; (__parent__ = __count__.__defineGetter__(\"__parent__\", function(y) { yield y; export *;; yield y; }))) with(__count__: <y><z/></y>.unwatch(\"__parent__\")) }");
tryItOut("if(prototype) /*for..in*/for(let [__noSuchMethod__, __proto__] = ((yield [1,,])) in __parent__) {export prototype;continue ; } else {yield <x><y/></x>;return; }");
tryItOut("{}");
tryItOut("/*infloop*/while(\nnull)throw <><x><y/></x></>;");
tryItOut("with(prop){return false; }");
tryItOut("/*infloop*/L:for(var [[({ prop: __count__ }), ({ prop: prototype, __noSuchMethod__: __parent__ }), ({ constructor: __proto__, __proto__: __parent__ }), __proto__, []], [[__parent__, constructor, __proto__, __parent__]], prototype] = (<x/>--); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; (p={}, (p.z = (p={}, (p.z = this)()))())) \f/*for..in*/for(var constructor in (([1,2,3,4].slice)(1e81)))export constructor;");
tryItOut("with({constructor: false}){gc()yield  /x/g ; }");
tryItOut("/*for..in*/M:for(true in @foo > *::*) {@foo;const \r__proto__ = window; }\nlet (__proto__) { throw <><x><y/></x></>; }");
tryItOut("while((({ get constructor() { yield <><x><y/></x></> ? prop : *::* } , __proto__: ((1 for (x in [])))(-1) }).unwatch(\"__parent__\")) && 0){export __noSuchMethod__; }");
tryItOut("L:if(__noSuchMethod__.prop.hasOwnProperty(\"prop\")) { if (__proto__ =  '' .*) {}} else {throw <x/>; }");
tryItOut("if([ /x/g ].filter(@foo)) { if (<x><y/></x> ?  \"\"  : <><x><y/></x></>) break ; else return;}");
tryItOut("if(1e81) { if (<x><y/></x>) {var __proto__ =  /x/g , __proto__;return <x><y/></x>; } else {export __iterator__; }}");
tryItOut("if((({__noSuchMethod__: prop.__iterator__ getter= function(y) { yield y; ;; yield y; }, __parent__ }))) { if ((constructor setter: function  __proto__ () { __proto__, prototype; }  = ({ __noSuchMethod__: ({ function::prop: __proto__ }), prototype: gc() }))) {gc() } else yield;}; }");
tryItOut("yield eval(\"<x/>\", false).__parent__;");
tryItOut("/*for..in*/for(let __parent__ = <xxx>{prop}</xxx> in new Array()) {if([11,12,13,14].sort) {(<x/>); } else  if ('fafafa'.replace(/a/g, ({}).__lookupGetter__)) (<><x><y/></x></>); else {break ; } }");
tryItOut("while(((__parent__.__noSuchMethod__ setter= Math.sin)) && 0)if(<><x><y/></x></>) export *; else  if (window) {(<y><z/></y>); }\n");
tryItOut("prop;");
tryItOut("/*for..in*/L:for(const __iterator__ in (([1,2,3,4].map)( \"\"  >>= arguments)))/*for..in*/for(let prototype = <y><z/></y> in 0/0) yield [1]");
tryItOut("with((({ __count__: [({ __parent__: ({ constructor: ({ __noSuchMethod__: __proto__, constructor: prop }), __proto__: [, , ] }), __noSuchMethod__: ({ constructor: __proto__ }) }), []], __proto__: [constructor, , ({ constructor: constructor }), , ({ prototype: ({ prototype: prop, __iterator__: [, , __iterator__, ] }) })] }) = __iterator__.prototype = ((([1,2,3,4].slice)())(\n<><x><y/></x></>, eval(\"{}\", #3={a:#3#}))))){do if(<><x><y/></x></>) yield <x><y/></x>; else  if (1.3) ({}).hasOwnProperty else yield; while(((<x>\t<y/></x> for (function::__proto__ in  /x/ ))) && 0);throw <x/>; }");
tryItOut("/*infloop*/L:for(var constructor; constructor = prototype = #3={a:#3#}; <y><z/></y>) const __count__;");
tryItOut("with(yield (({ __parent__: __noSuchMethod__ }) = [, , , , __iterator__] = (this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"0x99;\")))) :: ((__noSuchMethod__.(@foo))--))){L: for(let y in [5,6,7,8]) return constructor; }");
tryItOut("{{__noSuchMethod__if(*::*) {{}{} } }switch((<x/>.propertyIsEnumerable(\"__parent__\"))) { case (<x><y/></x>.yoyo( /x/g )): var __proto__ = @foo, prototype = __count__;break;  } }");
tryItOut("if((__noSuchMethod__.__proto__ = 3/0)) { if ((<><x><y/></x></\f> for (\nconstructor in  /x/ ))) {\t }} else {<><x><y/></x></>; }");
tryItOut("( /* Comment */<x/>) >= <x><y/></x>.yoyo(1e-81)");
tryItOut("let prototype, __parent__ = function ([y]) { };continue ;");
tryItOut("try { {} } catch(prop) { return __count__; } ");
tryItOut("/*infloop*/M:for(let __proto__; false; (yield <y><z/></y>) ? prop : <><x><y/></x\n></> in [__iterator__, ] = (Math.pow).call(*::*, <x><y/></x>)) {continue L;export *; }");
tryItOut("prop;switch(1.2e3 - <><x><y/></x></>) { default:  }");
tryItOut("let(prototype, __proto__) ((function(){throw this;})());");
tryItOut("if(__proto__) {throw <><x><y/></x></>\f; } else {__count__ = *\t }");
tryItOut("while(((new (Math.pow)())) && 0){if(0.1) { if (( /x/g .propertyIsEnumerable(\"constructor\"))) {yield *::*; }} else {{}{} }yield <x><y/></x> }");
tryItOut("with(('fafafa'.replace(/a/g, <><x><y/></x></>) |=  '' ))(<x><y/></x>).watch");
tryItOut("/*for..in*/for(let (false)(@foo) in  /x/g ) yield;");
tryItOut("/*for..in*/for(__iterator__.__count__ in ((new Function)(prototype.(<x/>).propertyIsEnumerable(\"__parent__\")))){/*infloop*/do new Function while(undefined); }");
tryItOut("/*for..in*/for(var prototype in <y><z/></y>) const prop = true, prototype = 033\nthis;");
tryItOut("/*infloop*/do {yield @foo;__iterator__\nyield;\n } while(+ /x/g );");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(prototype; <x><y/></x>; *) {var __proto__ = *::*, __proto__ = 3; }");
tryItOut("with({}) { return (prototype--); } ");
tryItOut("{/*infloop*/for(const prop = 033; false; window) {}M:if(__proto__ = prototype) ; else  if ((<><x><y/></x></>.yoyo(undefined))) gc() }");
tryItOut("if(<><x><y/></x></>) { if ( '' ) gc() else {<><x><y/></x></>; }}");
tryItOut("export *;");
tryItOut("/*infloop*/for(__noSuchMethod__; [((@foo).__defineSetter__(<y><z/></y>, @foo))].some(/a/gi); ((-1).call((new Function).call(null, null), ))) let (prop) { ([1]);export __noSuchMethod__; }");
tryItOut("/*infloop*/for(constructor; (function ()this)(<><x><y/></x></> > <y><z/></y>, function::__noSuchMethod__); ((((eval)(<><x><y/></x></>, [z1,,]))) >> ({}).yoyo('fafafa'.replace(/a/g, (null).watch)))) { }");
tryItOut("return\n");
tryItOut("/*for..in*/for(let constructor =  /x/  in <><x><y/></x></>) gc()");
tryItOut("/*for..in*/M:for(const (~033 ? (prop =  /x/g ) : __iterator__%=__count__)((p={}, (p.z = 3.141592653589793)())) in ((((p={}, (p.z = this.zzz.zzz)())))((false >>= *)))){return; }");
tryItOut("/*for..in*/for(var x::__parent__ in <x><y/></x>) {yield {}; }");
tryItOut("return;");
tryItOut("prototype = prototype;");
tryItOut("{;let __proto__; }");
tryItOut("continue ;");
tryItOut("/*infloop*/M:for(__count__; __count__.__proto__; return [[1]]) {M:if(*) const prototype = window; else  if (-0) {} }");
tryItOut("let(constructor = __noSuchMethod__ = -1) { let(constructor = window) { export prototype;");
tryItOut("/*infloop*/for((uneval( /x/g )).__proto__; (@foo.__defineSetter__(\"__count__\", ({}).__lookupGetter__)); __noSuchMethod__ = [11,12,13,14].map.hasOwnProperty(\"__count__\")) {if(new (__count__.yoyo(__proto__))(({__noSuchMethod__: <><x><y/></x></>}), [[1]])) Math.sin else  if (RangeError( '' , ({a1:1}))) {continue ;\fbreak M; } else {yield; } }");
tryItOut("switch(yield) { default: if(({})) {yield <><x><y/></x></>; }return;break; case -1: break; case 5: break;  }");
tryItOut("break L;");
tryItOut("function ()(-1)break ;");
tryItOut("L:if(+<x><y/></x>) {{} }");
tryItOut("if((yield undefined)) {constructor; } else  if (((yield 1e4))) {gc() } else export constructor;");
tryItOut("/*infloop*/for(const [, , ] = ((false.unwatch(\"__iterator__\")) if ()); (new (Function)().__lookupGetter__(\"__noSuchMethod__\")) / new eval( /x/ , <x><y/></x>); [(constructor).__count__ ? ({__proto__: [__iterator__].sort(Function) }) : #1#]) {M:switch(((__iterator__.(<y><z/></y>) if (<y><z/></y>)))) { case eval(\"return;\", (this += __iterator__)): default: export *;break; var __iterator__ =  /x/g ,  set __proto__ prototype (__proto__, __iterator__) { yield *::* } ;break;  }\tif( /x/g ) {;\f } else  if (<y><z/></y>) (window); else {yield; } }");
tryItOut("yield \t<y><z/></y>.throw(@foo)--;");
tryItOut("/*for..in*/for(var __count__ = [delete] = <><><!--yy--></></> in (yield  /x/g )) throw null;");
tryItOut("{}\n/*for..in*/(__parent__ = (new (function () { export prototype; } )((<x><y/></x>), @foo)) in <x><y/></x>) (.2);\n");
tryItOut("/*infloop*/for(__noSuchMethod__; prop.__iterator__ getter= function(y) { yield y; break M;; yield y; }; ([])[function ([y]) { }] / (window.__lookupGetter__(\"__iterator__\"))) {export *; }");
tryItOut("let (prototype, ^ = Array(<x/>)) { if(@foo) export __count__; else ; }");
tryItOut("if([,,z1]) export *; else  if (arguments) {let constructor, prototype;gc() } else {yield window; }");
tryItOut("/*for..in*/for(const constructor\f = <y><z/></y> in <x/>) {yield (*::*)(constructor =  /x/ , *::*);/*for..in*/for(const (uneval(<><x><y/></x></>)).__noSuchMethod__ in <x><y/></x> in prop) return *::*; }");
tryItOut("throw  \"\" \ngc()");
tryItOut("/*for..in*/L:for(var __parent__ in ((<y><z/></y>)(<><x><y/></x></>))){yield; }");
tryItOut("if(__noSuchMethod__(<x/>\n) = (prop = <x><y/></x>)(function(id) { return id }))  else { \"\" ;export __iterator__; }");
tryItOut("while((eval(\"(__noSuchMethod__, function::__noSuchMethod__);\", new Function(_)) for each (__proto__ in +1.3 >>>=<><x><y/></x></>)) && 0){ /x/g ;throw <><x><y/></x></>; }");
tryItOut("<x><y/></x>;");
tryItOut("if([15,16,17,18].some((<><x><y/></x></>.unwatch(\"__proto__\").valueOf(\"number\")), ({ prop: ({ __noSuchMethod__: __noSuchMethod__, __iterator__: __noSuchMethod__ }) }) = [] = ({ prototype: constructor, prototype: __iterator__ }).yoyo(<x><y/></x> , {} ^= 5.0000000000000000000000))) {return #1=[#1#];yield true; } else {var prop, __count__; }");
tryItOut("M:with(Math.sin()){if(typeof __count__) yield; }");
tryItOut("let constructor, __parent__;");
tryItOut("do {for(let y in [5,6,7,8]) __noSuchMethod__ = 0/0; } while((__noSuchMethod__ = window @ __parent__ = @foo.@foo) && 0);");
tryItOut("if(<><><xxx>{prop}</xxx>yyy</></>.unwatch(\"__proto__\")) { }");
tryItOut("M:if(new Array(this, 1.2e3)) <x/>; else  if (__iterator__.prop = @foo.__lookupSetter__(\"__parent__\")) M:if(window) {} else (__count__).__defineSetter__ else {return;return [z1,,]; }");
tryItOut("return;");
tryItOut("throw null; const __iterator__;");
tryItOut("do {gc(); } while((prototype = __parent__ << *) && 0);");
tryItOut("{}\n");
tryItOut("/*infloop*/for(__count__, __count__ = 0/0; new -0(); (yield <><x><y/></x></>)) {yield; }");
tryItOut("/*infloop*/do {const constructor = 1e+81; } while(++prop);");
tryItOut("/*infloop*/for(const prototype = (-1 / (-1)); __count__ | 0; this[(-0)]) yield <x/>;");
tryItOut("\tM:while((true) && 0)");
tryItOut("/*for..in*/for(var [constructor, __proto__] = <x><y/></x>.watch(\"prototype\", ({}).hasOwnProperty) in 0) /*for..in*/for(var new Iterator((3 , ({a2:z2})), this) in ((Math.pow)([11,12,13,14].some ^ .2 % <><x><y/></x></>)))__proto__ = #3={a:#3#};");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(3.141592653589793; this; <x><y/></x> = false) return (__parent__ = __proto__);");
tryItOut("do {export  for (Function ? o : prop = *.__parent__ in -- /x/ ) for (__parent__ in <y><z/></y> |  /x/ )yield;; } while(([Function].map((__proto__ = __iterator__))) && 0);");
tryItOut("if(((( if ( /x/ ))))) yield;//h\n else  if (__parent__ = (<y><z/></y> <<= this) > (({__parent__: <x><y/></x>})).__defineGetter__(\"x::*::*\", Math.sin)) {if(0.1.prop =  /x/ ) return; else  if (<><x><y/></x></> /= <x><y/></x>) eval else {}/*infloop*/while(__noSuchMethod__.__iterator__ = this){export *;var prototype = -3/0; } }");
tryItOut("/*infloop*/L:for(let __iterator__ = 0; <x/>; true) [1,2,3,4].slice");
tryItOut("L:if(null.propertyIsEnumerable(\"__parent__\")) {/*for..in*/for(const prototype in (((1 for (x in [])))(<x><y/></x>))){}throw <x/>; } else (<x><y/></x>)\ndo {; } while((this.__defineGetter__(\"__parent__\", (window).__defineSetter__)) && 0);");
tryItOut("{{function (__noSuchMethod__, __iterator__) { return 033 } const constructor, x::prototype; } }");
tryItOut("let (constructor = @foo) { ({}).hasOwnProperty }");
tryItOut("{prop;function::__count__; }");
tryItOut("throw __count__;");
tryItOut("/*infloop*/for(x::__iterator__ = <y><z/></y>; *; this) break L;");
tryItOut("/*for..in*/for(__count__ in ((Math.pow)([z1]))){([]); }");
tryItOut("/*infloop*/do {yield prop; } while((function () { return null }  , (uneval(<x/>))));");
tryItOut("new Function\n");
tryItOut("/*for..in*/L:for(let prop in new this[-3/0]((p={}, (p.z = (Array()))()), this.__defineSetter__(\"__proto__\", window))) {if(eval(\"<x/>\", false)) {let constructor = 3.141592653589793, __iterator__ = true;return; } else  if ((undefined >= <x/>))  else {(constructor); }let (prototype, constructor = prototype) { yield; } }");
tryItOut("(#3={a:#3#});");
tryItOut("/*for..in*/for(const __proto__ = <{__noSuchMethod__}> </{__noSuchMethod__}> in <xxx {prop}={ /x/g } />.(<x/>.yoyo(window))) {{} }");
tryItOut("with({}) { export __noSuchMethod__; } ");
tryItOut("__count__ setter: function  constructor () { L:with({__proto__: __count__}\f){return; } } ");
tryItOut("if(!<x><y/></x>.@foo) var try { let prop = this\t; } finally {  } ; else  if ((new (window)(this))[null]) {<><x><//h\ny/></x></> }");
tryItOut("/*for..in*/for(var prop in  \"\" ) {export *;export */*\n*/; }");
tryItOut("/*infloop*/do {return;export *; } while(__noSuchMethod__ >>> 1.3);");
tryItOut("/*infloop*/L:for( \"\"  != @foo++; (~[1,,]); \n__noSuchMethod__ = <x><y/></x> >>> ([__parent__, __noSuchMethod__, ] = window ? @foo : [[]]).eval((new ({}).__lookupGetter__()))) {export *;/*for..in*/for(var __noSuchMethod__ in *) var __count__, constructor = <x><y/></x>; }");
tryItOut("return\nexport *;");
tryItOut("export *");
tryItOut("if([11,12,13,14].filter) {{}/*for..in*/for(prop in <x/>) {{} } }");
tryItOut("[, __proto__, , ({ __parent__: ({ prop: constructor }), __parent__: prop }), __count__]");
tryItOut("/*infloop*/M:do gc() while((<><x><y/></x></>\n));");
tryItOut("{yield; }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ = this in null) Math.sin");
tryItOut("/*infloop*/M:do {;throw *::*; } while(gc(const __count__ = 3;));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var new RangeError() in  ''  == -1) export *;");
tryItOut("M:with({__count__: null &= <><x><y/></x></>}){{} }");
tryItOut("{} const __proto__;");
tryItOut("let (__proto__ = <y><z/></y>, function::__parent__ = <x/>) { gc }");
tryItOut("if(({}).hasOwnProperty) {const __count__;/*infloop*/M:for(let __count__; @foo; __count__) {const __count__, __noSuchMethod__; } } else  if ((constructor(1.3))) { constructor(1 for (x in []))\nreturn 1e81;\n@foo; }");
tryItOut("let (__count__, constructor = <y><z/></y>) {  }");
tryItOut("with({}) { let(({ __proto__: __noSuchMethod__ }) = (#1=<y><z/></y>)) { __parent__ = __noSuchMethod__; } ");
tryItOut("/*infloop*/for(let prototype; /*\n*/(new Function(\"var prototype, setter;\"));  /x/g .hasOwnProperty(\"__proto__\") !== prototype.__count__ = window) (-1);");
tryItOut("/*infloop*/for((5.0000000000000000000000 &= [].*); *.__parent__.__lookupSetter__(\"prototype\").__defineGetter__(\"constructor\", constructor.__proto__ getter= ({}).hasOwnProperty); (yield __count__.__proto__)) { }");
tryItOut("let (__parent__, __count__) { M:if(prop) (*::*); else  if ([11,12,13,14].filter.eval( '' .__lookupGetter__(\"__iterator__\"))) continue L; }");
tryItOut("export __noSuchMethod__;");
tryItOut("/*infloop*/while((<y><z/></y>.*))yield;\nM:if(__count__) __count__; else  if (<x/>) {var prop = this;var __parent__ =  '' ; } else continue ;\n");
tryItOut("let(__noSuchMethod__ = (true++)) ((function(){prototype = constructor;})());");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:do {continue M; } while((1e+81.*));");
tryItOut("while((<><x><y/></x></>; * undefined for ([z1,,].function::__noSuchMethod__ in arguments) for each (prop in *).propertyIsEnumerable(\"__parent__\")) && 0)new Function\nyield;\n");
tryItOut("M:if(null) {function(y) { yield y; continue M;; yield y; } } else  if (null) {yield;var __proto__, __count__ = this; }");
tryItOut("let ([, , , , ] = (p={}, (p.z = (((__proto__ = 3)).__defineSetter__(.2(true))))())) { /*infloop*/M:for(([Exception([1], [1]) for (__noSuchMethod__ in @foo.eval(<x/>)) if ( /x/g )]); (__parent__ = (new <><x><y/></x></>(window)).isPrototypeOf(<><x><y/></x></>.unwatch(\"__proto__\"))); __proto__.prototype getter= (new Function(\";\")) , true -= 1e-81.propertyIsEnumerable(\"prototype\")) {return;gc() }\r }");
tryItOut("{export each; }");
tryItOut("with(__proto__ .@ 0/0){{} const __noSuchMethod__;{} }");
tryItOut("throw  '' \n;");
tryItOut("let __count__;");
tryItOut("let (__count__ = (arguments.valueOf(\"number\")((<><x><y/></x></>.eval(<x><y/></x>)), [[]]))) { /*infloop*/for((__noSuchMethod__.(<x><y/></x>)); true; false.yoyo({})) {var __proto__ = <><x><y/></x></>, __count__ = <><x><y/></x></>;gc() } }");
tryItOut("{/*for..in*/for(const [__parent__, __proto__] = new /a/gi( /x/g , window) in undefined) const constructor, constructor = *; }");
tryItOut("constructor");
tryItOut("yield <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <y><z/></y>.prototype in  /x/ .__defineSetter__(\"try {  } catch(__count__) { constructor = 3.141592653589793; } \", Function)) if(([15,16,17,18].filter((1 for (x in [])), <x/>))) { if (([ /x/ ])) {throw true; } else export __parent__;}");
tryItOut("/*infloop*/for(const __parent__; prototype = prototype; [15,16,17,18].map('haha'.split, __iterator__.prototype)) {let __count__, __count__;__iterator__ = 1e4; }");
tryItOut("L:with((1e4.__count__ = [[]]\n.isPrototypeOf((\n[z1,,] ? <x><y/></x> : @foo))))do (__proto__); while((__parent__ ?  /x/  : @foo) && 0);");
tryItOut("let (__proto__ = true) { (<><x><y/></x></>); }");
tryItOut("/*for..in*/L:for([__proto__, __count__] = constructor%=(__parent__.__iterator__ = @foo).valueOf(\"number\") in __iterator__) {if(()) {} }");
tryItOut("/*infloop*/do /*infloop*/do {let __proto__, __iterator__;{return  /x/g ; } } while(<x><y/></x>.( '' )); while((p={}, (p.z = <><x><y/></x></>)()).__defineGetter__(\"constructor\", function  __iterator__ (__count__) { return [,,z1] } ));");
tryItOut("(<><x><y/></x></>)\n");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in *::*) (3.141592653589793); } while((prototype = prop) && 0);/*infloop*/for(this ,  /x/g ; (4.).__defineSetter__(<x><y/></x>, <x><y/>\t</x>); (#1\t=({__parent__: <x/>}))) __noSuchMethod__, __proto__/*for..in*/for(__proto__ in ((function  constructor () { yield null } )((constructor+=0))))yield 3/0;");
tryItOut("do {(new Function(\"gc()\")) } while((prototype.__count__ = <x/>) && 0);");
tryItOut("try\t { with({}) { {} }  } catch(__iterator__) { try { let __parent__;\f } finally { const __parent__, __noSuchMethod__; }  } finally { for(let y in []); } L:if(null) {'haha'.split } else  if ((<x/>.valueOf(\"number\"))) while((<x/>) && 0){} const __noSuchMethod__;");
tryItOut("return;");
tryItOut("export *; const __proto__;");
tryItOut("/*infloop*/while(yield (__proto__ = ([<><x><y/></x></>])))\n");
tryItOut("break M\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><x>/*\n*/<y/></x></>.__iterator__ in <><x><y/></x></>[(prototype = this)]) {continue ; }");
tryItOut("let ([[__noSuchMethod__]]) { export *; }");
tryItOut("L:if((([]).call).call(__iterator__, )) {/*infloop*/while(<x/> ? arguments : window){yield __proto__;yield; }L:if(this.zzz.zzz) {export *; } else  if (new (function(q) { return q; }).apply(undefined, false)) const constructor = window; else {return;export *; } }");
