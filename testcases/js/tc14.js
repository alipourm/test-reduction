tryItOut("switch(__proto__.__noSuchMethod__) { default: break M\ncase (Math.pow)(<><x><y/></x></>): break; if((<{prop}><ccc:ddd> </ccc:ddd></{prop}>.(@foo))) { if (((<>case 6: </>)[ /x/ ])) {L:if(__noSuchMethod__) #3={a:#3#}; }} else gcbreak;  }");
tryItOut("M:with(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>)return;");
tryItOut("/*for..in*/L:for(prototype in *) return <x/>;");
tryItOut("L:if(3.141592653589793) { if (0) __proto__ = [1,,];} else {throw [,,z1]; }");
tryItOut("L: yield  /x/g ;");
tryItOut("function  const constructor = [[1]], getter; (__proto__, __iterator__) { yield *::* } let prop;");
tryItOut("if(eval(\"if(<x><y/></x>) {export __parent__;return [z1]; } else  if (<y><z/></y>) {yield [[1]];Function }\",  /x/ ) /  /* Comment */.2) function(q) { return q; } else  if ([11,12,13,14].map) {export __proto__;<><x><y/></x></>; }");
tryItOut("switch((__noSuchMethod__ = arguments)) { case  \"\" .__defineSetter__(\"__count__\", ( /x/g ).watch):  }");
tryItOut("{/a/giif(({ set constructor __iterator__ ()({__parent__: *}).__iterator__ })) with((\n '' ))0/0;\nyield #3={a:#3#};\n else  if (this) {var constructor, __count__ = -1; } }");
tryItOut("constructor = __count__;");
tryItOut("/*for..in*/for(__parent__ = <><x><y/></x></> in [1,,]) {(-0); }");
tryItOut("/*for..in*/for([constructor, __count__] = <><x><y/></x></> in null) {yield; }");
tryItOut("while(([] >>>  /x/g ) && 0){export constructor; }");
tryItOut("gc()\n\n");
tryItOut("with({__count__: (get = this)['__iterator__']-=true ? __parent__ : {let __iterator__ = undefined, prop;export __count__; } :: <x><y/></x> ? <x/> : <><x><y/></x></>}){export *; }");
tryItOut("let (__iterator__) {  }");
tryItOut("__parent__ = prop;");
tryItOut("L:if(delete \fnew (false)(033)) {with({}) { try { yield <><x><y/></x></\f>; } finally { return 0.1; }  } let (__parent__, constructor = \r<><x><y/></x></>) { throw 1e81; } } else {export *;const prop = 3.141592653589793; }");
tryItOut("/*for..in*/for(const [__count__, constructor] = new RangeError() in (<y><z/></y>.@foo)) export prop;");
tryItOut("let ([({ __noSuchMethod__: __proto__.__parent__, __iterator__: ({ constructor: ({ __proto__: ({ __noSuchMethod__: __proto__ }) }) }) }), ({ __count__: ({ __count__: [, constructor], prop: ({ __iterator__: ({ constructor: __proto__ }) }) }) }), prop, ({ prototype: ({ prop: __parent__.__count__ }) })] = (#2=(* >>> [z1] instanceof 1.3).*), prop = (+(new ((<><x><y/></x></>).watch)()))) { var __noSuchMethod__, prop; }");
tryItOut("yyy");
tryItOut("let(({ prototype: __iterator__ }), __proto__ = prop, __noSuchMethod__ = *) { let(__parent__ = <><x><y/></x></>) ((function(){yield;})());");
tryItOut("if(([1,2,3,4].slice)(<x><y/></x>)) {export *;throw prototype; } else  if ( /x/ (\n([<><x><y/></x></>].sort(__noSuchMethod__)).__defineGetter__(\"__noSuchMethod__\", Math.sin)){return;const __count__; } else {yield; }<>__parent__.\tvalueOf(\"number\")</>");
tryItOut("{return; }");
tryItOut("/*infloop*/do for(let y in []); while(<><x><y/></x></> ? <x><y/></x> : __iterator__);");
tryItOut("const __count__, __iterator__; const __noSuchMethod__;");
tryItOut("{L:with(false){throw __iterator__;break M; }var function::__count__ = 1e-81;\nvar __iterator__ = undefined, constructor;\n }");
tryItOut("return;");
tryItOut("if((let (__parent__(<x><y/></x>)) window)) ; const __parent__; else  if ((prop.constructor = <xxx {__parent__}={3/0} />)) ([,,z1] ===  /x/g );");
tryItOut("if((constructor)) export *;");
tryItOut("L:with({prop: yield <y><z/></y>.prop}){{/*for..in*/L:for(var [__count__, prop] = --*::*.__defineGetter__(\"prototype\", new Function) in []) {const __count__ = this; }var prop, prop =  '' ; } }");
tryItOut("L:with({constructor: (gc).call(constructor,  /x/g )}){const __count__ = <><x><y/></x></>, __proto__ = <y><z/></y>; }");
tryItOut("export *\n3;");
tryItOut("__count__ = __noSuchMethod__\n__iterator__.eval( '' ).watch(\"prop\", new Function);");
tryItOut("/*infloop*/for(let __noSuchMethod__; <x><y/></x>.([1]); prototype) {yield <y><z/></y>;L: {return;yield; } }");
tryItOut("L: {var __count__;/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in __count__) {return @foo;let constructor, __parent__ = null; } }");
tryItOut("return;");
tryItOut("return this");
tryItOut("/*for..in*/M:for(__iterator__.constructor in ((function(y) { yield y; /*for..in*/M:for(var __noSuchMethod__ in ((eval)( /x/g .eval(@foo)))){({})return; }; yield y; })((__proto__) = prop = <y><z/></y> && (__proto__ = __noSuchMethod__))))<xxx>{__noSuchMethod__}</xxx>");
tryItOut("/*infloop*/for(var prototype; (! /x/ ) <= *::*.__parent__; <x><y/></x> % *) {{} }");
tryItOut("/*infloop*/L:while(yield ({ __parent__: __noSuchMethod__ }) = (@foo &= prop)){/*for..in*/M:for(let prop(<x/>) in (('haha'.split)(constructor.__noSuchMethod__ = <x/>)))( \"\" );return <><x><y/></x></>; }");
tryItOut("M:if((__count__ = prop if (033)).hasOwnProperty(\"prop\")) {if(window) yield; } else {{return;yield; } }");
tryItOut("/*infloop*/L:for(#2=[<><x><y/></x></> :: @foo]; __parent__ = false; [15,16,17,18].filter(function  __noSuchMethod__ (__noSuchMethod__) { yield * } , arguments ? <y><z/></y> : null)) M:do {export constructor; } while(((<><x><y/></x></> ? __parent__ : (-0))) && 0);");
tryItOut("if() { if (new ([1,2,3,4].map)(prototype = 5.0000000000000000000000)) {yield window; }} else (5.0000000000000000000000);");
tryItOut("with(){;let yield =  /x/ , __proto__ = <><x><y/></x></>; }");
tryItOut("M:with((({ __noSuchMethod__: prop }) = --constructor)){}");
tryItOut("/*infloop*/for(var __iterator__; RangeError(*::*,  /x/ ); new ('haha'.split)(new RegExp(prop = 1e4,  /x/ ), (new <><x><y/></x></>))) {yield; }");
tryItOut("gc()\nexport *;\n const __count__;");
tryItOut("/*for..in*/M:for(var prototype((({ set constructor() { return (this.__defineSetter__(\"__parent__\", (new Function(\"yield;\")))) }  }))) in  '' .watch(\"__proto__\", <><x><y/></x></>)) {this;var __parent__ = *;\f }");
tryItOut("this.zzz.zzz;");
tryItOut("while((*::*) && 0)let (__count__) { {M:switch(<x/>) { case 033: truebreak; default: (<x><y/></x>); } } }");
tryItOut("switch(__parent__ = <x/>()) { default: break; case <x/>: return;break; {}\n(-1);\ncase [<y><z/></y> if (<x><y/></x>)]: break; break L;case 1: break; case ( \"\" .\t__parent__): case 0: break \nbreak;  }");
tryItOut("M:if(<bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>.__lookupSetter__(\"prototype\")) if(<><x><y/></x></>) { if ( '' ) var __noSuchMethod__ = <x><y/></x>; else {\f__iterator__, constructor;var __parent__; }} else if(__noSuchMethod__) return; else  if ( /x/g ) let __iterator__, __noSuchMethod__ = prototype;");
tryItOut("let(__noSuchMethod__ = this.zzz.zzz @ this.zzz.zzz & false.watch(\"prototype\", constructor)\t, constructor = (window.unwatch(\"prototype\")).hasOwnProperty(\"__proto__\")) { with({}) with({}) { yield  /x/  | this , 0/0; } ");
tryItOut("if((window.__lookupGetter__(\"__noSuchMethod__\"))) { if ( /* Comment */<x><y/></x>) export __proto__; else {{} }}");
tryItOut("with(*::*)");
tryItOut("throw __parent__;");
tryItOut("{}\n\n const __iterator__(/;");
tryItOut("let \n(__iterator__, __parent__ = #3={a:#3#}) { \f }");
tryItOut("if(<x/>) {/a/giexport *; } else {}");
tryItOut("with({constructor:  /x/ }){const __parent__; }");
tryItOut("/*for..in*/for(constructor = new ([1,2,3,4].slice).apply( \"\" ) in  /x/ ) {export *;yield; }");
tryItOut("while((this) && 0){const __noSuchMethod__ = <><x><y/></x></>;if(constructor) { if ((-0)) export *; else yield true;} }");
tryItOut("/*infloop*/for(let __parent__ = constructor = <><x><y/></x></>; (uneval((function::__count__).constructor = ([<><x><y/></x></>]))); 1e+81 || __count__.__parent__ getter= -0) {return <y><z/></y>;*::*; }");
tryItOut("M:if(<><x><y/></x></>) const prop = true; else  if (({})) <{prop}>yyy</{prop}>");
tryItOut("if(<><x><y/></x></>) return <y><z/></y>; else ( /x/g );");
tryItOut("{if(constructor = <x><y/></x\f>) { if ((__noSuchMethod__ = __iterator__)) (true); else {const __iterator__, __parent__;__proto__ }} }");
tryItOut("/*for..in*/for(const [prop, __proto__] = <x><y/></x> in <x\r><y/></x>) {break ;yield <x/>; }");
tryItOut("/*for..in*/for(var [constructor, constructor] = __proto__ = ( /* Comment */constructor--) in new (<x/>)(prototype = __noSuchMethod__, (<><x><y/></x></> *= window))) {with({prop: false})prototype = <><x><y/></x></>; }");
tryItOut("if(.2.*)  else {M:if(([1,2,3,4].slice).call( '' , *,  /x/ ).valueOf(\"number\")) (.2);1.2e3\n }");
tryItOut("try { with({}) { let(constructor = [[1]]) ((function(){for(let y in [5,6,7,8]) constructor = __parent__;})()); }  } finally { throw StopIteration; } ");
tryItOut("try { {} } finally { (@foo); } ");
tryItOut("with({}) __count__ = __parent__;");
tryItOut("yield;");
tryItOut("if(prototype)  else  if ([,]) prop; else {throw __parent__;let __proto__ = , __noSuchMethod__; }");
tryItOut("/*for..in*/for(const prop = <><x><y/></x></> || undefined ? this.__defineGetter__(\"constructor\", gc) : <y><z/></y> in (__parent__|=<><x><y/></x></>).__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; throw *::*;; yield y; })) /*infloop*/for(( \"\" .throw(__parent__).__proto__ = ([11,12,13,14].some)); [null]; <xxx {__iterator__}={(-0)} />.((__proto__.__count__ = <x><y/></x>))) (<y><z/></y>);");
tryItOut("return <x><y/></x>\nyield;");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("if('fafafa'.replace(/a/g, [1,2,3,4].slice)) {{} const prop; } else  if ((prototype)) {{}L\n:if(*::*) { if (0x99) export __count__; else {([1,2,3,4].slice).apply }} }");
tryItOut("L: throw [,,z1]\n");
tryItOut("__iterator__");
tryItOut("with({__iterator__: (void new Boolean(Array(), (this.zzz.zzz)))}){yield (prototype.__iterator__ = <y><z/></y>); }");
tryItOut("switch(true--) { case new RangeError([z1], window): /*infloop*/for(var __proto__; __noSuchMethod__.x::prototype setter= Function; ({ get __parent__ prototype (__count__, constructor) { yield window }  }))  for (__iterator__ in __count__) if (<y><z/></y>)break; break;  }");
tryItOut("M:if((yield ((/a/gi).call(1e4, <x/>, <x><y/></x>)))) { if (<><>__iterator__.__parent__ setter= 0x99</></>) {let (prototype, __noSuchMethod__ = <x><y/></x>) { let __count__; } } else {return; }}");
tryItOut("let(__proto__ = (__noSuchMethod__ ^= (new [1,2,3,4].map()))) ((function(){try { ; } catch(prototype) { return; } })());");
tryItOut("yield @foo; const __noSuchMethod__;");
tryItOut("return;");
tryItOut("/*infloop*/for(<x><y/></x>; <><x><y/></x></>; this) {}");
tryItOut("__iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in {}) {yield; }");
tryItOut("Math.sin const prototype;");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__) { export __noSuchMethod__;");
tryItOut("{}\nyield;");
tryItOut("/*infloop*/do {if((window.isPrototypeOf(__count__))) { if ((*::*.isPrototypeOf(<><x><y/></x></>))) {var __iterator__ =  /x/g , constructor; } else }/*infloop*/L:for(<x/>; this; 0/0) {return; } } while(*);");
tryItOut("L: var __noSuchMethod__;");
tryItOut("/*for..in*/for(var prototype in <><x><y/></x></> /  \"\" .throw(window)) {if(({__iterator__: *::*, __count__: -0 })) { if ( ) ;} else {(<x><y/></x>);export *; } }");
tryItOut("continue L;\nnull\n");
tryItOut("/*infloop*/M:for(let constructor = [[,,z1]]; __parent__ = @foo; ((yield  '' ))) /*infloop*/for(const ({ prop: __proto__\f, 1e4: __noSuchMethod__ }) = ((function ([y]) { }).call(({a1:1}), 0.1, <x><y/></x>)); (-0); (prototype = __parent__)) {export prototype; }");
tryItOut("if((eval(\"new ({}).__lookupGetter__(new ((function (prototype) { yield 5.0000000000000000000000 } ).call)((({prop setter: function () { export constructor; }  })), [,,]), [z1])\", true))) yield; else /*for..in*/for(__noSuchMethod__ = (<><x><y/></x></>.*) in [z1]) {if(1e+81) (<y><z/></y>); }");
tryItOut("/*infloop*/do {if(yield <y><z/></y>) { if (@foo) ; else yield;} } while(([#0=[#3={a:#3#} , export constructor]].sort(((constructor = undefined)).apply)));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ( \"\" )(*::*) in (function () { yield prototype } (this))) if([15,16,17,18].filter(prop, window)) { if ([,,].propertyIsEnumerable(\"__proto__\")) {let __count__, __proto__ = undefined; }} else let __count__ =  /x/g \n{__proto__, __count__ =  \"\" ; }");
tryItOut("{}\nM:if((null)[0]) { if (this) {gc()return; } else ;}");
tryItOut("{if(<ccc:ddd><x><y/></x> </ccc:ddd>) { if ( '' .yoyo(constructor)) gc()} else {prototype;let __iterator__ = window; } }");
tryItOut("if([15,16,17,18].sort('haha'.split, )) return; else  if (*::* <= 1.2e3) {return  \"\" ; }");
tryItOut("/*infloop*/while(3/0 ? 'fafafa'.replace(/a/g, (1 for (x in []))) : arguments){(<><x><y/></x></>\f); }");
tryItOut("do export *; while((<x/>[constructor]) && 0);");
tryItOut("/*infloop*/for(this; new null(*, *); <y><z/></y> >>>=undefined) export __iterator__;");
tryItOut("with({__proto__: ( /* Comment */<x><y/></x>) if (<x><y/></x>)}){export *; }\ndo {return; } while((new 'fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; })().__lookupSetter__(\"prop\")) && 0);\n");
tryItOut("/*infloop*/for(var __parent__;  \"\"  !== false.__defineGetter__(\"__proto__\", ((function(y) { yield y; export *;; yield y; }).apply).call); (-0).propertyIsEnumerable(\"constructor\")\n) {export *;/*for..in*/for(const __parent__ in ((gc)(false))){yield; } }");
tryItOut("{let __iterator__, __noSuchMethod__ = false; }");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/for(const __count__; <bbb xmlns=\"((null)(<x><y/></x>)) == (yield  \"\" )\"><ccc:ddd><bbb xmlns=\"<x><y/></x>\"><ccc:ddd>yyy</ccc:ddd></bbb></ccc:ddd></bbb>yyy; this) {Ethrow {}; }");
tryItOut("/*infloop*/for(__count__; function::constructor.__count__.constructor setter= function  prop ()(new Iterator()); __proto__( default ) = [15,16,17,18].some(({}).__lookupGetter__, this.zzz.zzz)) {if(__count__) { if (\f(-1)) {yield; } else } }");
tryItOut("return true;");
tryItOut("/*infloop*/for([__noSuchMethod__.__count__] = /*\n*/let (__iterator__ = #3={a:#3#}) (0).@*; __proto__ = __parent__; (throw <><x><y/></x></>)) if(*::*) {continue L;continue ; } else  if (-1) {__count__, __proto__ = true; }");
tryItOut("with({-1: this}){export constructor; }");
tryItOut("{yield __count__ = 'fafafa'.replace(/a/g, <x><y/></x>); }");
tryItOut("/*infloop*/for(var prop = ((__noSuchMethod__+=(this.__defineGetter__(\"function::constructor\", function\t (prototype) { return <x><y/></x> } ))))(#1=({prototype: <><x><y/></x></>}), (function::x::__iterator__ = ( '' [<x/>]))) ^= prototype.constructor = []; #0=({constructor: (* % <x/>)}); ([11,12,13,14].filter)) {with({}) { return; }  }");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ = this in null) {; }");
tryItOut("return;");
tryItOut("/*for..in*/for(var ({ prop: [, ({ function::__iterator__: __count__ })] }) in __iterator__) {/*infloop*/do let __iterator__; while(3/0); }");
tryItOut("yield;");
tryItOut("throw __iterator__;");
tryItOut("if(window) { if ( \"\"  /=  /x/  & <x/>) (<x><y/></x>); else continue L;}");
tryItOut("switch(__iterator__ = ((uneval((__count__ >= <x><y/></x>))))) { case <x/>: {if(([, , [, __parent__, __iterator__], , ] = ({ __parent__: ({ __noSuchMethod__: constructor }), __proto__: __parent__ }))) {/*infloop*/do {( /x/g );\f } while(*::*);gc() } else  if (((p={}, (p.z = (4. if ( /x/g )))()))) { } else {[1,2,3,4].mapexport *; }try { const __parent__; } finally { return; } export *; }case [15,16,17,18].map((new Function(\"L:if(*) yield; else  if ( '' ) gc() else {break ; }\")), (constructor = __noSuchMethod__)).hasOwnProperty(\"constructor\"): M:if(<zzz><x/></zzz>.(__count__ = __count__ = <><x><y/></x></>)) return; else  if (__count__) { } else {([,,]).__defineSetter__ } const prototype;case 9:  '' ;break; default: if(new ('haha'.split).apply([[1]], <><x><y/></x></>)) {export __proto__; '' ; } else  if ((let (__proto__ = <x/>) [ /x/g ]\t)) var __noSuchMethod__ = undefined, x::constructor; }");
tryItOut("/*infloop*/for(var constructor = <xxx>{throw this;}</xxx>; (#1=({__noSuchMethod__: <x/>}\t)); undefined.@foo.@*) return;");
tryItOut("switch(Number(eval(\"this.isPrototypeOf(<y><z/></y>)\", #1#))) { case (let (__count__, __count__ = *) __count__: <x><y/></x>[ /x/g  = 0/0]): (1 for (x in []))yield <><x><y/></x></>;break; break; case 0: break; default: /*infloop*/for(var __noSuchMethod__; 5.0000000000000000000000; [15,16,17,18].filter(function  x::prop () { return false } , <x/>)) {;throw 4.; }case let (prototype) -0: break; case 3: break; case window.yoyo([,,]): case constructor >>>=true: break;  }");
tryItOut("for(let y in []);");
tryItOut("return");
tryItOut("{return; }");
tryItOut("this.zzz.zzz;");
tryItOut("");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("if(-1) { if (<y><z/></y>) let prototype; else {yield; }}");
tryItOut("switch( /x/ ) { case 9: yield false;break; default: case 5: this;break; case 9: yield;break; gc()break; case 9: break; yield;case 7: break;  }");
tryItOut("for(let y in []);");
tryItOut("switch(function::prop =  '' .valueOf(\"number\")) { default: function (constructor, prototype) { return __count__ } break; case 5: break; function ()__iterator__ }");
tryItOut("yield arguments;");
tryItOut("/*infloop*/L:for(__noSuchMethod__; 1.2e3 @ <><x><y/></x></>; ({__iterator__: <x><y/></x>, __parent__: <x/> })) /*infloop*/L:while(prototype.prop = ([yield if (<y><z/></y>)]) | new Number(<x><y/></x>, 033)){export __parent__;yield window; }");
tryItOut("switch(typeof break ;) { case __noSuchMethod__ =  /x/ : case #0=({__proto__: *::*}) %= [[]]: break; break;  }");
tryItOut("if((__count__)) { if (1.2e3.__defineGetter__(\"__parent__\", (new Function(\"\")))) [z1,,]; else }\n/*infloop*/while(yield false.watch(\"__parent__\", [1,2,3,4].slice)){(__proto__ /= #3={a:#3#});/*infloop*/for(var prototype; (*::* || __iterator__.__count__ setter= function  __parent__ (__noSuchMethod__) { throw @foo; } ); [constructor, __noSuchMethod__, __noSuchMethod__] =  '' ) {*::*; } }");
tryItOut("if((this , __count__)) ( /x/ ); else  if (<><x><y/></x></>) {continue ; }");
tryItOut("try { {} } catch(prototype if (function(){<x><y/></x>;})()) { yield; } ");
tryItOut("/*for..in*/for(prototype in <x><y/></x>) /*infloop*/do {return; } while((-1));");
tryItOut("throw 3.141592653589793;");
tryItOut("with(prop){{this; } }");
tryItOut("if([new null() if (<y><z/></y>)]) { if ((/a/gi).call(<x/>.unwatch(\"__count__\"), eval(\"this\", <x><y/></x>), *::*)) return; else return  /x/g ;}");
tryItOut("if(undefined < prop) { if ((__parent__.valueOf())) {const __count__, __proto__;return; }} else return;");
tryItOut("/*for..in*/for(let (<><x><y/></x></>\t)(<x><y/></x>) in __noSuchMethod__ getter: ((this).watch).apply) export *;");
tryItOut("for(let y in []);");
tryItOut("eval(\"throw <x><y/></x>;\", function(id) { return id })\nlet (prototype, yyy) { if(this) { if (@foo) ( '' );} else {@foo; } }");
tryItOut("L:if((#1=[#1#]).__defineSetter__(\"prop\", (@foo ^= <x><y/></x> for ((window)(<><x><y/></x></>) in __count__)))) {constructor; } else if(<x><y/></x>) { if (1e81) export __count__;} else gc()");
tryItOut("yield false;");
tryItOut("while((({a2:z2})) && 0)yield;");
tryItOut("/*infloop*/for(const \t[, , ({ prop: __iterator__ })] = 033; <y><z/></y> &&  ''  - delete *::*;  /x/g \n.hasOwnProperty(\"__proto__\")) L: gc()");
tryItOut("yield;");
tryItOut("let (__proto__) { /*infloop*/L:while(constructor = (-0)){[z1]; } }");
tryItOut("let (({ __count__: ({ prototype: ({ __parent__: __noSuchMethod__\t }), __iterator__: ({ *.prototype: ({ __parent__: ({ prototype: __noSuchMethod__, constructor: __count__ }), __noSuchMethod__: __noSuchMethod__ }) }) }), getter: ({ __proto__\f: ({ prototype: ({ __noSuchMethod__: this, prototype: function::__noSuchMethod__ }), __count__: ({ __count__: [prototype] }) }) }) }) = false, __noSuchMethod__) { return\n<y><z/></y>//h\n;export __proto__; }");
tryItOut("(1 for (x in []))\n");
tryItOut("L: /*for..in*/for(const __noSuchMethod__ = this .@*::  /x/  in <x><y/></x>) {prototype }");
tryItOut("let(__proto__ = __iterator__.__noSuchMethod__ setter= /a/gi.valueOf(\"number\"), ({ __count__: __iterator__ }) = 0/0 .@ null.__proto__ = <><x><y/></x></> .@*:: <y><z/></y>) { return;");
tryItOut("yield <x><y/></x>;");
tryItOut("let (x::prop = 'fafafa'.replace(/a/g, [1,2,3,4].slice), prop) { throw <><x><y/></x></>; }");
tryItOut("export *");
tryItOut("/*infloop*/for(__count__; function  constructor (prop) { return  \"\"  } .__lookupGetter__(\"__parent__\"); ({__noSuchMethod__: *::* })) {export __parent__; }");
tryItOut("do {throw *::*;export *; } while(([15,16,17,18].sort([1,2,3,4].slice, @foo)) && 0);");
tryItOut("throw [,,];");
tryItOut("return (window.__noSuchMethod__ = 1e81);");
tryItOut("/*infloop*/for(var __proto__; (({__proto__: 0x99, __iterator__: <x/> })); __iterator__ = *::*.watch(\"prototype\", (<><x><y/></x></>).watch)) {const prop, __noSuchMethod__; }");
tryItOut("if(new (null)(3.141592653589793)) <x/>; else {return;__iterator__ = <y><z/></y>; }");
tryItOut("switch(let (prototype) <><x><y/></x></>) { case 0:  }");
tryItOut("/*infloop*/do export *; while((<><x><y/></x></>--)([@foo], <x/>;));");
tryItOut("if(this) return arguments; else  if (this) {Math.pow }\n(033);\n\n/*infloop*/do var constructor; while(function  __noSuchMethod__ () { yield (__proto__.__proto__) } );");
tryItOut("return yield\n");
tryItOut("while(( \"\" ) && 0){let __parent__ = <x/>, __iterator__; }");
tryItOut("if(__count__) { if (this.zzz.zzz) {(this);; }} else {, __count__;function  __parent__ () { return <x><y/></x> }  }");
tryItOut("/*for..in*/for(var [constructor, constructor] = <><zzz>0.1</zzz></> in @foo) {__noSuchMethod__;gc() }");
tryItOut("( /x/ );;");
tryItOut(" const __parent__;");
tryItOut("yield");
tryItOut("if( /* Comment */[<x><y/></x>]{{} } else {var __parent__, get;__count__ = #3={a:#3#}, __noSuchMethod__; }");
tryItOut("if(<x><y/></x>.(<><x><y/></x></>)) {return;(undefined); } else  if (<><x><y/></x></>) return;");
tryItOut("/*infloop*/for((({ __count__: (#1=<x><y/></x>), __count__: [, []] }) =  /x/ \t.isPrototypeOf( /x/g )); eval(\"return;\", yield ((yield *::* & <x><y/></x>))); this.__defineSetter__(\"constructor\", Function)) {__count__: new  \"\" ((* for (__noSuchMethod__ in true)), this)export *; }");
tryItOut("with(yield arguments){yield __noSuchMethod__;\nvar __parent__ =  \"\" ;\n }do (*); while(([z1,,]) && 0);");
tryItOut("const __count__; const __count__;");
tryItOut("/*for..in*/for(prototype in [z1]) {gc()(__count__); }");
tryItOut("let(__count__ = <><x><y/></x></> ? constructor : <x><y/></x>) { try { continue M; } catch(__parent__ if (function(){break M;})()) { var prop = <><x><y/></x></>; } catch(prototype if (window.watch(\"this\", Function))) { export prop; } catch(__parent__ if (function(){yield;})()) { (*::*); } finally { continue L; } ");
tryItOut("function () { return <x><y/></x> }  const __proto__;");
tryItOut("M:with({__parent__: <y><z/></y>}){var delete = <y><z/></y>, constructor;{/*infloop*/while(<y><z/></y>){break L; } } }");
tryItOut("do ; while(((( /x/  || @foo for each (__iterator__ in <><x><y/></x></>) for each (prop in 1e81) for (__iterator__ in  /x/g )))) && 0);");
tryItOut("do yield this; while(( /x/g  *= true) && 0);");
tryItOut("switch(*::*) { default: (false);break;  }");
tryItOut("export *;do {if(function ([y]) { }) {return <><x><y/></x></>; } else  if (<><x><y/></x></>) yield (-1); else break M; } while((__proto__ = <y><z/></y>) && 0);");
tryItOut("/*infloop*/while(#0=({ \"\" : __proto__.yoyo( /x/g )})){<!--yy--> }");
tryItOut("/*infloop*/for(const ({ __count__: __count__ }) = ( /x/ --); window; @foo) {(__noSuchMethod__); }");
tryItOut("/*for..in*/for(var [__count__, prop] = __count__ = (eval(\"<><x><y/></x></>\",  /x/ ).__lookupGetter__(\"__count__\")) for (.2 in undefined) for (prototype in <x/>) if (*) in <x><y/\r></x>.(1e+81) &= __count__ = @foo) __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("L:with({getter: ({__proto__: #0=*::*, constructor: (<x><y/></x>)[<x><y/></x>] })}){break ;yield true; }");
tryItOut("/*for..in*/for(let __count__ in (uneval(*.__defineSetter__(\"__proto__\", [1,2,3,4].slice)))) {export prototype; }");
tryItOut("/*infloop*/do break L; while((({__parent__ getter: eval })));");
tryItOut("yield ((<x><y/></x> >> <x><y/></x>).__lookupSetter__(\"constructor\"));");
