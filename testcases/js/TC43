
tryItOut("/*infloop*/M:for(const constructor = __iterator__; <x><y/\f></x>; constructor) export *; const __iterator__; const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__: case <employee id=\"1\"><name>Joe</name><age>20</age></employee>: default: case 7: break; .__proto__ in (false)(constructor)) return;");
tryItOut("/*infloop*/for(var __noSuchMethod__; -0 * ([__iterator__].sort(function  __count__ ()-3/0)); @foo) L:with({prototype: @foo.propertyIsEnumerable(\"prototype\")})gc()\n/*infloop*/for(var __parent__; [].watch(\"__iterator__\", <x/>); __count__ =  ''  %= new [1,2,3,4].slice(function ([y]) { }, [z1,,])) continue L;");
tryItOut("let (__parent__, prop =  /x/ ) {  }");
tryItOut("/*infloop*/for((return -1); <x/>; prototype = --<><x><y/></x></>) {continue ;const __parent__, __noSuchMethod__;\nyield;;\n }");
tryItOut("/*for..in*/for(let __parent__ = /a/gi()\t === (__iterator__ = __parent__) in (typeof *)) gc()");
tryItOut("with(function::x::__noSuchMethod__){throw <x/>; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:while(<x/>.__defineGetter__(\"__parent__\", #1#)) if (this.__defineSetter__(\"__proto__\", [1,2,3,4].map))\n const __parent__\n");
tryItOut("with({}) for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("M:if((p={}, (p.z = @foo)())) { if (\n__proto__-=<><x><y/></x></>.eval(--*)) const prop, __noSuchMethod__;} else M:if(#3={a:#3#}.@foo) {var __iterator__, __proto__ = <x><y/></x>; } else {(Math.sin).apply<><x><y/></x></>; }");
tryItOut("/*infloop*/while( /x/ )with({constructor: yield let (__parent__ =  /x/ , __count__) this})L:if(__proto__) { if (@foo) break ;} else __parent__ = #1#, __noSuchMethod__ = *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in arguments) {return;continue M; }");
tryItOut("M:if((false.throw(<x><y/></x>))) { if ((yield  /x/ )) let (<x/>) { continue M; }} else gc()");
tryItOut("if((this.__defineGetter__(\"__count__\", eval))) <x/> else  if (window.prototype) {{} } else {undefined;undefined }");
tryItOut("switch(new \n<y><z/></y>(this, ( /x/ )(<><x><y/></x></>))) { default: if(<x><y/></x>) { if (<x><y/></x> .@x::  '' ) let __proto__, prototype; else function (__count__, __iterator__) { return __iterator__ } }break; case 9: /*infloop*/for(__proto__; __parent__ = prop; return true) {/*infloop*/for(__iterator__ = window; *; function ([y]) { }) yield <><x><y/></x></>; }break; case 0: yield;break; case 3: break M\nexport *;case 6: break;  }");
tryItOut(" /x/g ;");
tryItOut("/*for..in*/L:for(var (__iterator__) in ((eval)(arguments)))/*for..in*/for(@foo in (((*::*).watch)( /x/g .yoyo(window)))default: prototype = *;break; case this: /*for..in*/for(let [prototype, prototype] = __count__ in <x><y/></x>) {const __iterator__ =  /x/ ; }break; case (function(y) { yield y; let x::__noSuchMethod__ = *::*;; yield y; }()): window;break; )__parent__");
tryItOut("\fif((__noSuchMethod__ = __count__)) { if ([[,]].some((__parent__).watch)) {export *;__parent__ = #3={a:#3#}; }} else ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in 4.) \f{export *;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in *) if([1]) { if (<x><y/></x>) {; }} else {return constructor\r; }");
tryItOut("/*infloop*/M:do {{} }\t while(({ get __count__(constructor, __count__) { return (<y><z/></y>.__lookupGetter__(\"__noSuchMethod__\")) >> <x><y/></x> }  }));");
tryItOut("while((<x/>.__defineGetter__(\"yield\", (__noSuchMethod__ = <x><y/></x>))) && 0){}");
tryItOut("/*infloop*/do {var constructor; } while((window.valueOf(\"number\")));");
tryItOut("continue \nreturn;");
tryItOut("let (__count__ = (__count__), constructor) { {} }");
tryItOut("with({prototype: [undefined]}){gc() }");
tryItOut("with({}) for(let y in [5,6,7,8]) let(({ prototype: [] }), __parent__) ((function(){for(let y in []);})());");
tryItOut("if( /x/g ) {var __parent__,  { yield <><x><y/></x></> } ; }\f");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var this['__iterator__'] in prop = <x><y/></x>) {let __parent__;let constructor; }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = null; @foo; this) prototype = <><x><y/></x></>, __noSuchMethod__ = <x><y/></x>;");
tryItOut("{}\n\n");
tryItOut("/*for..in*/L:for(const (__iterator__) in constructor = *) {{}return *; }");
tryItOut("L: L:while(((eval(\"/*for..in*/for(__noSuchMethod__ = 3/0 in false) {export *; }\", <><x><y/></x></> >>> undefined))) && 0){{yield  \"\" ;gc() const prototype; } }");
tryItOut("yield __noSuchMethod__;");
tryItOut("if(((__parent__ = eval(\"@foo\", (-0.valueOf(\"number\")))))) __parent__");
tryItOut("while(((<x/>[<x><y/></x>]).__proto__) && 0){export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor in [15,16,17,18].map((function  prop (\f)window).apply, (__iterator__ - [z1,,]))) {/*infloop*/for(var __iterator__; this;  \"\" ) gc()<><x><y/></x></>; const __noSuchMethod__; }");
tryItOut("/*infloop*/while(__iterator__.({ function::__noSuchMethod__: window, __iterator__: __proto__ }))<x/>;");
tryItOut("__count__ = __parent__;");
tryItOut("break M;");
tryItOut("");
tryItOut("{while(((new 1.3())) && 0)yield; }");
tryItOut("switch((__count__.constructor = <y><z/></y>)) { default: yield;break;  }");
tryItOut("/*infloop*/while(<><x><y/></x></>.__defineGetter__(\"constructor\", function (__parent__, prop) { ; } ))export __count__;");
tryItOut("L: {\t }");
tryItOut("M:switch( \"\" ) { case [z1] | null: break;  }");
tryItOut("/*for..in*/for(const [__parent__, __noSuchMethod__] = (<x><y/></x>)(<><x><y/></x></>) ||  '' .__iterator__.__defineGetter__(\"__count__\", 'haha'.split) in undefined) {M:with({__parent__: {}}){undefined;; }{yield;var prototype; } }");
tryItOut("/*infloop*/for((( /x/g  = this) .. new (function(y) { yield y; do { } while((*::*) && 0);(true);; yield y; })((1e81 >> <x><y/></x>), (prop = __proto__))); (yield *::*); Exception().yoyo((({ prototype: __count__ }) = ([1,,].valueOf(\"number\"))))) {return;continue M; }");
tryItOut("/*infloop*/do while((__count__) && 0){export constructor; } while(*::*);");
tryItOut("L:if(( '' .yoyo(<x><y/></x>))[1.2e3]) { if () {/*infloop*/for(__parent__; __proto__; __proto__ =  '' ) {continue ; } }} else gc()");
tryItOut("");
tryItOut("with({prototype: 0x99})yield\n");
tryItOut("let constructor;");
tryItOut("if(void this) throw @foo; else  if (new Function) { '' return\n__parent__ = <x/>; } else const prototype = window, __proto__;");
tryItOut("if(this) {} else  if (<><x><y/></x></>) {yield  '' ; } else throw (-0);");
tryItOut("if( \"\" ) if(<><x><y/></x></>.unwatch(\"constructor\")) {yield; } else  if (true << ({})) {Math.pow(<x><y/></x>); } else  if (*::*) /*for..in*//* nogeckoex bug 349964 */ for  each(let ( = <y><z/></y>) in <><x><y/></x></>) ({}).__lookupGetter__");
tryItOut("let(__iterator__ =  /* Comment */ /x/g ) ((function(){try { yield; } catch(prop) { return; } finally { export prototype; } })());");
tryItOut("return;continue ;");
tryItOut("{const __noSuchMethod__, constructor;033; }");
tryItOut("{export *\n }");
tryItOut("/*infloop*/for([[, , [, __parent__, , , __iterator__], ({ prop: __noSuchMethod__ }), __iterator__], ] = <!--yy-->; <y><z/></y>; @fooprototype: <x><y/></x> !== __parent__) {({}).__lookupGetter__ }");
tryItOut("M:if(try { with({}) { /*infloop*/L:for(__parent__; <x><y/></x>; <>\f<x><y/></x></>) {{}prototype =  \"\" , __count__ = <><x><y/></x></>; } }  } catch(__noSuchMethod__ if undefined) { for(let y in []); } catch(prototype) { throw StopIteration; } ) {gc()let (constructor = this) { /*infloop*/while(this) throw  '' ; {} } } else  if (//h\n(this <<= <y><z/></y>)++.eval(__iterator__)) {L: {( /x/g ); }new Function } else yield this.__defineGetter__(\"export *;\", new Function);");
tryItOut("__noSuchMethod__ = constructor;");
tryItOut("if(<xxx>{__proto__}</xxx>) {} else while((function ([y]) { }) && 0){}");
tryItOut("/*for..in*/for(let prop.__iterator__ in ((3 if (<><x><y/></x></>)))(<><x><y/></x></> ? <y><z/></y> : window)) export *;");
tryItOut("{}if(undefined\t) { if (<><x><y/></x></>) throw <><x><y/></x></>; else yield (function ([y]) { })();}");
tryItOut("with(*){ }");
tryItOut("L:if((<> /x/g  <= this</>.(__iterator__ = 'fafafa'.replace(/a/g, 'haha'.split)))) { if (1e4) {if(<x><y/></x>) {@foo; } else  if (<><x><y/></x></>) gc() else new Function } else gc()}");
tryItOut("return; const __noSuchMethod__;");
tryItOut("switch(<x><y/></x>) { case  /x/ : case __parent__: let __noSuchMethod__ = function ([y]) { };case 9: yield <x><y/></x>;break; case window: var __noSuchMethod__ = .2, constructor =  /x/ ;*;break; const __parent__ = \t<><x><y/></x></>, __count__; }");
tryItOut("/*for..in*/for(const prop = [11,12,13,14].sort in <x/>) {gc() }");
tryItOut("");
tryItOut("with(({ function::prototype: ({ prototype: [constructor.prototype, ], prop: ({ prototype: __iterator__ }) }) })){/*for..in*/for(__iterator__ = [,] in <y><z/></y>) continue ; }");
tryItOut("M:if(<><x><y/></x></>) { if (1.3) {return *; } else export ;}");
tryItOut("/*infloop*/__iterator__");
tryItOut("/*for..in*/M:for(var (({}).__lookupGetter__)(<y><z/></y>)['__noSuchMethod__'] in (<><x><y/></x></>.throw(this))) {export *; }");
tryItOut("/a/gi");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></x>) {\tyield *::*; }\nM:with({prop: <><x><y/></x></>})<y><z/></y>");
tryItOut("let (prop =  \"\" , __proto__) { (Function).apply }");
tryItOut("L: yield;");
tryItOut("/*infloop*/for(var prototype; <y><z/></y>.eval(<x><y/></x>).prototype;  for (__iterator__ in <><x><y/></x></>)) {break L\n }");
tryItOut("function(q) { return q; }M:while(([[1]]) && 0){var constructor = __parent__; }");
tryItOut("/*infloop*/for(var __count__; #0=({prototype: <><x><y/></x></>}) = let (__parent__ = (-0), __count__) this; (prop\n)) let(prototype = [z1,,], x::__count__ = (<x/>[<x/>])) { for(let y in []);");
tryItOut("let (prototype = __proto__.__noSuchMethod__) { {} }");
tryItOut("M:while((__noSuchMethod__ = 0) && 0){{(false); }if(<x><y/></x>) {window; } else  if ( /x/ ) gc() else __proto__ }");
tryItOut("/*infloop*/for(const ({  /x/ : ({ __parent__: __noSuchMethod__ }) }) = @foo; new ((-1(<y><z/></y>)))(\n[[1]], this); []) {L: {({a1:1}); }return #3={a:#3#}; }");
tryItOut("\n;");
tryItOut("L:switch(__count__.__proto__ getter= [1,2,3,4].map) { case ( '' .__iterator__ = *::*): break;  }");
tryItOut("/*for..in*/L:for(const __count__ = __iterator__.__proto__ = \f(uneval(-1)).prototype =  /x/g  in <x><y/></x>.(__iterator__)) { }");
tryItOut("let(__noSuchMethod__ = (window).watch) ((function(){for(let y in []);})());");
tryItOut("if(*) function (__count__, prop) { yield 3 }  else  if (<><x><y/></x></>) export *;");
tryItOut("switch([,,] in window) { default: case 1: ; }");
tryItOut("try { yield; } catch(__iterator__, ({ __iterator__: prop })) { throw <y><z/></y>; } ");
tryItOut("/*for..in*/for(const [__count__, __noSuchMethod__] = 3 in <x/>) (prototype).__defineSetter__");
tryItOut("let (__count__, prop = __noSuchMethod__.prop getter= gc) { while((__count__) && 0) }");
tryItOut("let(prop, prototype = [] = __parent__) { with({}) for(let y in []);");
tryItOut("const constructor;");
tryItOut("if(<><x><y/></x></>) { if (<x/>) yield;} else export *;\r const __parent__;");
tryItOut("throw prop");
tryItOut("return new (({}).__lookupGetter__)(undefined) <<= __count__.(__proto__).__defineGetter__(\"__noSuchMethod__\", <xxx {__proto__}={*} />.(new (<y><z/></y>)(0x99)));");
tryItOut("M:switch(new \f(window)(<x><y/></x>, <x><y/></x>)) { case (((uneval(prop)).@*).unwatch(\"prop\")): break; default: break; case (((-0) %= ({a1:1})).constructor = yield <x><y/></x>): case 8: do window; while((prototype) && 0);break; case (<x><y/></x>.isPrototypeOf(<x><y/></x>)): {} }");
tryItOut("return;");
tryItOut("/*infloop*/for(const [, , __noSuchMethod__] = (new (<><x><y/></x></>)()); @foo; ((<><x><y/></x></>)())) export *;");
tryItOut("do {yield <x/>;yield; } while((let (constructor = [[]], prop = (function ([y]) { })()) <x/>) && 0);");
tryItOut("if([[]]) { if (({})) continue L; else {(3); }}");
tryItOut("with({}) { __parent__ = __noSuchMethod__; } ");
tryItOut("if(__parent__.__lookupGetter__(\"__count__\")) this; else  if ([[]]) ;");
tryItOut("{continue L;L:switch(/a/gi) { default: break;  } }");
tryItOut("{gc(){} }");
tryItOut("if( \"\" ) { if (true) {var prop = *;yield <y><z/></y>; } else  \"\" ;}\nwith({__count__:  /x/g })(3);");
tryItOut("return; const prototype;");
tryItOut("let (({ __iterator__: __parent__ }) = --[].eval((new Function(\"return;\")))) { if(function::__iterator__.prop getter= (([1].propertyIsEnumerable(\"getter\"))).watch) L:switch( /x/g ) { default: let prop; } }");
tryItOut("let @foo = @foo, __noSuchMethod__");
tryItOut("return __iterator__ <= <y><z/></y>;");
tryItOut("/*infloop*/for((this.valueOf(\"number\"))[null].prototype; 1e+81; [11,12,13,14].filter) { }");
tryItOut("export __parent__;");
tryItOut("with({}) (<x><y/></x> |= __noSuchMethod__);");
tryItOut("if(eval(\"<><x><y/></x></> ? [[1]] : <x><y/></x>\", (__count__()))) gc()");
tryItOut("{}");
tryItOut("{export *; } const __count__;");
tryItOut("do {let constructor = <y><z/></y>, __noSuchMethod__; } while((__proto__) && 0);");
tryItOut("return;");
tryItOut("if((function ([y]) { })()) let __proto__ = new (eval)();");
tryItOut("if(((function ([y]) { })()().prop = (<x><y/></x>(arguments, <x><y/></x>)))) {5.0000000000000000000000;\n\nconst prototype = *::*, constructor; } else  if ([__noSuchMethod__, __parent__, , prototype, ] = <x><y/></x>) \n else break ;");
tryItOut("/*infloop*/for(__proto__ = <x><y/></x>; null /= *::*; ('fafafa'.replace(/a/g, function (__iterator__, prop) { (prop); } ))) {yield; }");
tryItOut("export *; const x::prop;");
tryItOut("/*infloop*/for(this[window]; ([*::*]); (p={}, (p.z = __noSuchMethod__)())) return;");
tryItOut("if(({__parent__: new new (0x99)() *= (-3/0++)})) { if (this ^ __proto__.unwatch(\"__iterator__\")) throw constructor.__count__ = <y><z/></y>; else var __parent__, prop;}");
tryItOut("/*for..in*/for(const __noSuchMethod__ = new (true != <><x><y/></x></>)(yield constructor = undefined) in (({prototype getter: function (prop, prop) { yield @foo }  }))) /*infloop*/M:for(let ({ prototype: prop }) = <y><z/></y> != <x><y/></x>; window <<= false; (<><x><y/><\f/x></>.hasOwnProperty(\"__parent__\"))) {return; }");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((new ((prototype()))(<x><y/></x>) >>> this)['__noSuchMethod__'] in __count__ = <x/>) (window).__defineSetter__");
tryItOut("/*for..in*/for(constructor = [11,12,13,14].filter in \t<x><y/></x>.__count__) {if( /x/ .yoyo( /x/ )) { if ((@foo.throw(1e4))) continue M;} else const prop = <x/>, __proto__ = <x/>;var __noSuchMethod__; }");
tryItOut("throw StopIteration;");
tryItOut("with({prop: ('fafafa'.replace(/a/g, 'haha'.split))}){export *; }\nyield __count__;\n");
tryItOut("L:if(undefined) { if (<x><y/></x>) {(<><x><y/></x></>); } else yield true;}");
tryItOut("return;");
tryItOut("let (constructor, prop) { L: ; }");
tryItOut("/*for..in*/L:for(const __count__ = <x/>.__defineSetter__(\"prop\", ({}).hasOwnProperty) in  /x/ ) {while((\nundefined , <y><z/></y>) && 0){return; }with({prop: (({ set constructor __proto__ () { const prop; }  }))})let __count__ = <x><y/></x>; }");
tryItOut("if([11,12,13,14].map) <><x><y/></x></>; else {const __proto__ = <y><z/></y>; }");
tryItOut("if(*) {; } else return;");
tryItOut("{(0);/*for..in*/M:for([__noSuchMethod__, __parent__] = <x/> in <y><z/></y> -= [1]) {yield;export *; } }");
tryItOut("/*infloop*/L:for(const [, ] = <bbb xmlns=\"new ([1,2,3,4].slice)(__noSuchMethod__)\"></bbb>.(window); this.zzz.zzz; ([(({__noSuchMethod__: <y><z/></y>,  set __proto__ prop (prop, prototype) { yield  ''  }  })).__count__])) {let(__proto__ = prototype) ((function(){{}})());/*infloop*/M:while(({setter setter: (new Function(\"gc()\")): -1, constructor: #1# }))return *; }");
tryItOut("while((* instanceof *) && 0)0.1;");
tryItOut("{(<y><z/></y>); }");
tryItOut("/*infloop*/for(<zzz>[[]]</zzz>.(false ? #3={a:#3#} : constructor); this.__defineSetter__(\"__proto__\", 'haha'.split) += (<x><y/></x>.isPrototypeOf(window)); false.propertyIsEnumerable(\"constructor\") instanceof [11,12,13,14].sort) return [z1] % <x/>\n;");
tryItOut("if(\n(-0)) { if (+__iterator__) yield;} else [1,2,3,4].slice");
tryItOut("switch(<x><y/></x>) { case  /x/g : if(undefined) { if (<><x><y/></x></>) {throw @foo; }} else {gc() } }\nwith(*::*){gc()let __noSuchMethod__ =  /x/g ;; }\n");
tryItOut("L:switch((yield false)) { default: (__iterator__);break;  }");
tryItOut("if((new Iterator()( /x/g  & 0/0.__parent__ = new (Math.pow//h\n)()))) (-0)\n");
tryItOut("let __count__ = 1e+81, __parent__ = <><x><y/></x></>;yield 1e-81;");
tryItOut("with(1.3.*.@foo)if(<x/>) { if (<x/>) (<x><y/></x>);} else {prop, prop([[1]]); }");
tryItOut("(prop, [1,,]).watch");
tryItOut("while((3.141592653589793) && 0){(true);yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var ((__iterator__ =  /x/ ))([@foo].map('haha'.split)) in this .. <y><z/></y>) {/*infloop*/M:while(prop.__parent__ =  \"\" ){return <x/>;null; } }\t");
tryItOut("try { this.zzz.zzz; } catch(prototype if (eval(\"(__noSuchMethod__.prototype getter= ({}).__lookupGetter__).watch(\\\"yield\\\", /a/gi)\", __iterator__ = (__proto__ for each (__count__ in @foo))))) { for(let y in []); } catch(prototype if  \"\" .hasOwnProperty(\"prototype\")()) { return function  __noSuchMethod__ () { yield <x><y/></x> } ( '' ); } catch(__proto__ if (function(){this.zzz.zzz;})()) { throw StopIteration; } ");
tryItOut("/*for..in*/for(__count__ in ((window.propertyIsEnumerable(\"__iterator__\"))(((#0=( /x/g  %= *)) for ((prop) in (({ __proto__: __count__ }) = prototype--)))))){/*for..in*/for(var __iterator__ in ((Function)(<x/>))){prototype; } /x/ ; }");
tryItOut("let(__iterator__, ({ prototype: prop }) = <><x><y/></x></>.throw(<y><z/></y>)) ((function(){with({}) yield (function::constructor.__noSuchMethod__);})())\n");
tryItOut("/*for..in*/M:for(var [prop, prop] = (((__noSuchMethod__ = constructor))[((yield [z1]))\n]\n) in [function(q) { return q; }(-3/0, <>try { /a/gi } catch(__iterator__ if (function(){return -0;})()) { gc } catch(function::__noSuchMethod__) { export __iterator__; } </>\t)]) {{} }");
tryItOut("/*for..in*/for(let ({ __proto__: constructor, __proto__: constructor }) in  '' ) {break M; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in 033) (<x><y/></x>);");
tryItOut("L:if(prototype = <><x><y/></x></>.isPrototypeOf(Date().propertyIsEnumerable(\"__parent__\"))) yield this\n else <xxx>{__noSuchMethod__}</xxx>");
tryItOut("/*infloop*/L:do {export prop;__noSuchMethod__, prototype = __parent__; } while((uneval((([1,2,3,4].slice).call(<><x><y/></x></>, <><x><y/></x></>, window)))));");
tryItOut("return [,,]; const __noSuchMethod__;");
tryItOut("/*for..in*/");
tryItOut("while(( /x/ ) && 0)do {  } while((true) && 0);");
tryItOut("{throw 1.3;throw window; }");
tryItOut("return;__proto__; const constructor;");
tryItOut("yield *::*;");
tryItOut("let(__iterator__) { return;");
tryItOut("for(let y in []);");
tryItOut("return;");
tryItOut("/*infloop*/do {return 1.2e3; } while(this == -1);");
tryItOut("/*infloop*/M:for(<{__noSuchMethod__}><!--yy--></{__noSuchMethod__}> = this.__defineSetter__(\"__iterator__\", ([1,2,3,4].slice).apply) | (__iterator__.((this.__iterator__ = arguments))); (-0) ? [11,12,13,14].filter : prop = window | (__iterator__ = <><x><y/></x></>); ((new prop = ({constructor getter: (@foo).watch })('fafafa'.replace(/a/g, (<x/> *= this)))).valueOf(\"number\"))) {/*for..in*/M:for(var [prop, prototype] = <x/> in  /x/g ) gc() }");
tryItOut("return; const __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(((prop = (\n[[1]].__lookupSetter__(\"__parent__\")--))(window)) in delete <x/>) L: \t*;");
tryItOut("()do ( '' .*) while((__iterator__.(eval(\"{}\", window))) && 0);");
tryItOut("/*infloop*/for([({ __proto__: [constructor, , __parent__, constructor, ], __parent__: [] }), , __iterator__] = !033; [15,16,17,18].filter( /x/ , prototype = -3/0); yield function(id) { return id }) while(() && 0){__parent__ = 0; }\ngc()\n");
tryItOut("if(((eval(\"(-0)\", __noSuchMethod__)).valueOf(\"number\"))) { if (__count__.__noSuchMethod__ = *::*.__parent__) } else {return __count__; }");
tryItOut("throw <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in this) {{} }");
tryItOut("export *");
tryItOut("while((*) && 0){}");
tryItOut("if( /x/g ) {export *; } else  if (__proto__) var constructor = <x><y/></x>; else {var prop = __parent__, prop;export prototype; }");
tryItOut("/*infloop*/for((Math.pow)((5.0000000000000000000000 ?  /x/g  :  /x/ )); (new Function); (function () { yield; } ())) export constructor;");
tryItOut("/*for..in*/M:for(const try { const \ffunction(q) { return q; }; } catch(__proto__ if (function(){<x><y/></x>})()) { var constructor; } catch(prop) { yield; } finally { ; }  in ((/a/gi)('fafafa'.replace(/a/g, Math.pow\t)))){let __noSuchMethod__ = function::prop, prototype = window;yield *; }");
tryItOut("M:if((__proto__.unwatch(\"__iterator__\")) &= (constructor.constructor = this) .. __count__) return; else  if ((__iterator__|=(#2=[1e-81\t] ^ gc()))) {if((eval(\" '' \", #1=[#1#]))) { if (\t( /x/ ).call( /x/ , )) {yield;(false); } else {export *; }} }");
tryItOut("L: const prop = *;");
tryItOut("L: return 033;");
tryItOut("{(1e-81); }");
tryItOut("let (__parent__ = (false << *::*)) { throw *::*\n }");
tryItOut("M:if(null) ;");
tryItOut("/*infloop*/do  while((__iterator__.__parent__ >= new (.2)(<x/>)));");
tryItOut("/*infloop*/L:do {switch( '' ) { case constructor:  }\nreturn;\nreturn;; } while( /x/ );");
tryItOut("/*infloop*/for(<y><z/></y>; yield window; prop = __count__) {export __count__; }");
tryItOut("if(1e+81 >>> __proto__) {let prototype = *;let constructor =  \"\" ; }");
tryItOut("/*infloop*/for(({ __proto__: [({ prop: ({ __noSuchMethod__: ({ prototype: ({ constructor: [] }), prototype: ({ prop: [__parent__, __iterator__, , __iterator__], __count__: ({ __iterator__: prototype, __iterator__: __noSuchMethod__ }) }) }), __count__: ({ __iterator__: [__count__, __parent__, ({ __parent__: prototype }), , prop], __noSuchMethod__: [({ __count__: __parent__ }), __count__] }) }), __parent__: prop }), [, ({ function::__proto__: ({ prop: ({ __noSuchMethod__ = <y><z/></y>: ({ __count__: __proto__, __noSuchMethod__: prototype }) }), x::__proto__: __parent__ }), constructor: __count__ }), prop, ({ prop = __noSuchMethod__.__noSuchMethod__: constructor, constructor: @foo })], [, ({ __iterator__: ({ prop: __proto__, prop: prop }) })]] }) = ((({<x><y/></x>: __noSuchMethod__}).*.__count__)(#1=[#1#], eval(\"(prototype+=<x/>)\", (this ? <><x><y/></x></> : @foo)))); prototype//h\n; [[]]) {/*for..in*/for(var __noSuchMethod__ = __noSuchMethod__ in <y><z/></y> += <><x><y/></x></>) switch((__count__ = [])) { default: break;  } }");
tryItOut("with({}) for(let y in []);");
tryItOut("throw \t__iterator__;");
tryItOut("/*infloop*/do return undefined; while((__noSuchMethod__ = <x><y/></x> += [11,12,13,14].map)); const __noSuchMethod__;");
