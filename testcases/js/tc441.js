tryItOut("{if(4.) { if (<><x><y/></x></>) {throw <x><y/></x>;export yield; } else {return; }} }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */L: for  each(const constructor in *::*) try { continue ; } catch(__proto__ if (function(){for(let y in []);})()) { this.zzz.zzz; }  }");
tryItOut("/*infloop*/while(x::constructor){yield; }");
tryItOut("/*infloop*/for(__noSuchMethod__; (function  __noSuchMethod__ (({ __proto__: constructor.__noSuchMethod__, __count__: prop }), __iterator__) { return @foo } (('fafafa'.replace(/a/g, (1 for (x in [])))))); [false]) {break ;{} }");
tryItOut("{ }");
tryItOut("/*infloop*/while((( /* Comment */true)[(eval(\"return;\", <x><y/></x>))]))if(prop = window, __parent__) {{} }");
tryItOut("yield;const __count__ = this;");
tryItOut("/*infloop*/L:for(const [, , , ({ __count__: ({ __parent__: ({ __proto__: __parent__, prop: ({ prototype: __noSuchMethod__ }) }) }) })] = (function  __proto__ (\t) { return (<{constructor}><ccc:ddd>yyy</ccc:ddd></{constructor}>.valueOf(\"number\")) } ()); __parent__ = delete <y><z/></y>; [#1=[#1#] for (__parent__ in [,,z1])]) {/*for..in*/for(const __count__ = <x/> in 1.2e3) {continue M; }continue ; }");
tryItOut("{{{} }gc() }");
tryItOut("L: {if(({})) { if (<><x><y/></x></>) {const prototype;set; } else {break ; }} }");
tryItOut("/*infloop*/for(@foo.__proto__.(({__iterator__: this})); (constructor = *::*); [].__lookupSetter__(\"__count__\").yoyo(((uneval((#3={a:#3#}.valueOf(\"number\"))))))) {yield <x><y/></x>;\freturn; }");
tryItOut("");
tryItOut("/*for..in*/L:for(var default: break; {}\nconst __parent__ = #1#, __noSuchMethod__ = __parent__;\ncase 7: case __parent__.__defineGetter__(\"prop\", function(q) { return q; }): /*for..in*/L:for(let [prototype, prop] = (__count__.prop setter= (eval).call) !== (window( /x/g , __count__)) in window) {const __iterator__;return; }break; case (new (true)(<x/>)): <y><z/></y>;break;  =  '' +=(<xxx {__noSuchMethod__}={new this(<x><y/></x>)} />)((#2=({__count__: true}) ?  /* Comment */this : (({a2:z2}) /=  '' )), Number(this.zzz.zzz.hasOwnProperty(\"__parent__\"))) in new ([1,2,3,4].map).call(<x/>) for (constructor in <x><y/></x>) if (arguments)) export __proto__;");
tryItOut("M:switch( /* Comment */<y><z/></y>) { default: const __count__\nbreak; case 1: (/a/gi).callbreak; break;  }");
tryItOut("/*for..in*/for([prop, __proto__] = let (__noSuchMethod__ = false, __noSuchMethod__ = *) eval(\"window\", 5.0000000000000000000000) in @foo) if(<x><y/></x>) const prop, __noSuchMethod__; else  if ( { return (-3/0 == @foo) } ) {export *; } else {__iterator__, __count__ = true; }");
tryItOut("throw ;");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = constructor = __parent__ in <><x><y/></x></>) let __iterator__ = <x><y/></x>;");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(var prototype = true; ({a2:z2}); [1,,]) const __iterator__;");
tryItOut("throw __count__;");
tryItOut("/*for..in*/for(var __parent__ in ((({}).__lookupGetter__)((p={}, (p.z = <x><y/></x>)())))){/*infloop*/do {continue ;yield this; } while(<x/>); }");
tryItOut("for(let y in []);");
tryItOut("if(__proto__) export *; else  if (<><x><y/></x></>) {return  '' ;var __noSuchMethod__ = @foo, prop = constructor; } const __iterator__;");
tryItOut("with({constructor: [, , prototype, , __parent__] = __noSuchMethod__--})export __proto__;");
tryItOut("/*for..in*/for(__count__.__parent__ in ( /* Comment */window .@ -1)) {{export __count__; }\n }");
tryItOut("{prototype = prototype, constructor\nyield <y><z/></y>;yield <><x><y/></x></>; }");
tryItOut("L: {M:with(eval(\"break L;\", --({})))/*for..in*//* nogeckoex bug 349964 */L: for  each(var __iterator__ in  '' ) {throw <><x><y/></x></>; }/*infloop*/for(true; [z1]; [1,,])   }");
tryItOut("let (__iterator__, __proto__ =  for (prop in this)) { /*infloop*/M:do {return *;export *; } while(<x><y/></x>); }");
tryItOut("L: export prop;");
tryItOut("with({__noSuchMethod__: [[]]}){return;export constructor; }");
tryItOut("if([null]) let (prototype) { <x/>; }");
tryItOut("/*infloop*/L:do (Array(<x><y/></x>, <><x><y/></x><///h\n>)); while(new ()(prototype = prototype));");
tryItOut("if(\tfalse -= 1.3) /*infloop*/for(var prototype = (@foo.@*); window.__proto__;  /x/  ? __count__ : @foo) var __count__ = @foo; else  if (*.isPrototypeOf(new (function (__noSuchMethod__) { return <x><y/></x> } )(prototype, prototype))) {var prototype = @foo, __iterator__; }");
tryItOut("if(try { return -0; } catch(__noSuchMethod__) { throw prototype; } ) { if (new (({}).hasOwnProperty)(prop,  \"\" )) {/*infloop*/for(<x/>; prop; <><x><y/></x></>) {export *; }\n/*infloop*/L:for(<><x><y/></x></>; ({a2:z2}); <x><y/></x>) {}\n/*for..in*/L:for(const __parent__ in ((/a/gi)(undefined))){(true);return; } } else {((-0));/*infloop*/do {let constructor = __count__, __noSuchMethod__; } while(*);gc() }}");
tryItOut("/*infloop*/for(var function::__iterator__; @foo; (({ \r__parent__: ({ __proto__: __iterator__, __noSuchMethod__: prototype }) }) = \nthis)) {/*for..in*/M:for(const __iterator__ in __iterator__) {{}return; } }");
tryItOut("/*infloop*/L:while(<><x><y/></x></> >> <><x><y/></x></>.__noSuchMethod__ = Number().__iterator__){/*infloop*/for(3.141592653589793.isPrototypeOf(false); (<x/> != -3/0); new ('haha'.split)( /x/ )) export *; }");
tryItOut("\tL:switch(\f__proto__.__parent__ = prototype =  '' ) { case 4: break; return this;default: export *; }\ndo false\f; while(([new ((false).__defineSetter__)(0x99, true) if (this)]) && 0);");
tryItOut("/*for..in*/for(const __iterator__ = this ^ false in <x><y/></x>) yield;");
tryItOut("M:while((@foo) && 0)if(<><x><y/></x></>.eval(false)) { if ([z1].hasOwnProperty(\"prototype\")) {var __noSuchMethod__ = {}; }} else yield \f<x><y/></x>;");
tryItOut("{export __parent__; }");
tryItOut("{export prop; }");
tryItOut("with({__proto__: (__proto__)}){}");
tryItOut("M:with({prop: this}){return  /x/g ; }");
tryItOut("with({ '' ['__iterator__']: #3={a:#3#}[ '' ]}){;1e81; }");
tryItOut("switch(((<x><y/></x>)(<x/>) ? ((-1)(<><x><y/></x></>) = undefined.propertyIsEnumerable(\"prototype\")) : (this.zzz.zzz))) { case #0=({x::__iterator__: (__noSuchMethod__.prop)}): case (new [1,2,3,4].slice(yyy)): let (constructor =  \"\" ) { /*for..in*/for(const __iterator__ in (((1 for (x in [])))(<y><z/></y>)))gc() }case 8: throw StopIteration;case 6: break; let(__count__ = <y><z/></y>) { ;break; default: case 4: export *;break;  }\n");
tryItOut("constructor = prop;");
tryItOut("/*for..in*/for(let prototype = typeof <><x><y/></x></> in (new  /x/g (true, 1e81))) {/*for..in*/for(var prototype = 5.0000000000000000000000 in <x><y/></x>) {export __proto__; } }if(prop = (uneval(<x><y/></x>))) {} else  if (yield (this)(*, this)) {{yield;export __proto__; }\n/*infloop*/L:for(let prop; <x/>.hasOwnProperty(\"__proto__\"); <x><y/></x> if (<y><z/></y>)) {/*for..in*/for(let constructor in (-0)) {gc()var prototype = __iterator__; } }\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in  /x/  if (constructor)) {/*infloop*/for(prop; /a/gi(<x/>); new (window)(<x><y/></x>,  /x/g )) continue L;let prop; }");
tryItOut("throw __parent__;");
tryItOut("/*infloop*/L:for(const __proto__; -*::*; new window()) {L:with(eval(\"const __proto__, __noSuchMethod__ = 1e+81;\", 0.1))<y><z/></y>; }");
tryItOut("/*for..in*/for(var __iterator__ = <><x><y/></x></> in (function ([y]) { })()) let __iterator__ = @foo, __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in 1.3) {continue L;<x><y/></x>; }");
tryItOut("{export __iterator__; }");
tryItOut("/*infloop*/L:for(({ __parent__: __noSuchMethod__ }) = 033.constructor = -1; (yield 0x99); [[]] += null) {}");
tryItOut("throw StopIteration;");
tryItOut("prototype;");
tryItOut("do  while((((.2.eval(-0))[this.__defineSetter__(\"__count__\", <x><y/></x>)])) && 0);");
tryItOut("return @foo;\nvar __parent__, constructor\nexport *;\n");
tryItOut("yield <y><z/></y>.throw(__count__);\ngc()\n");
tryItOut("const __count__ = <><x><y/></x></>;");
tryItOut("if(RegExp()) { if (<><zzz>*::*</zzz></>.((yield window))) {gc() }} else {const __parent__, __parent__ = #1#;throw 1e4; }");
tryItOut("while((prototype = undefined) && 0){if(undefined) { } else  if (<y><z/></y>) export *; else var __iterator__, prototype = <x/>; }");
tryItOut("gc()");
tryItOut("this.zzz.zzz;");
tryItOut(" /x/g ");
tryItOut("/*for..in*/for(var __proto__ = <x><y/></x> ? <x/> : function(id) { return id } in (({prototype setter: (*::*).__defineSetter__, constructor: <x/> }))) __parent__");
tryItOut("/*infloop*/L:while( '' ){(__proto__); }");
tryItOut("/*for..in*/for(__proto__ =  /x/g  in __parent__) {{yield; }throw 1e81; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__.__iterator__ in new (<><x><y/></x></>)()) {(window).watchcontinue ; }L: return;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = new (function  __proto__ () { return <x><y/></x>-- } )() in ([11,12,13,14].some)) \tL: if(<x><y/></x>[0]) { if (#2=({constructor: __count__})) {return; } else let __iterator__;}");
tryItOut("/*infloop*/while((((new Function(\";\")))( /x/ )))export constructor;");
tryItOut("throw ( for (__proto__ in 4.)(<><x><y/></x></>,  /x/g ));/*infloop*/for(var ({ __proto__: ({ constructor: __proto__, __parent__: ({ __parent__: __noSuchMethod__ }) }), prop\t: __parent__ }) = <x><y/></x>.throw(arguments); this.zzz.zzz.throw((<x/> .@*:: <x/>)); @foo === (((__parent__ = __parent__) for each (prop in this)prop) << ++<x><y/></x>)) yield <x><y/></x>;");
tryItOut("/*for..in*/for(__proto__ in new eval(<{__proto__}><employee id=\"1\"><name>Joe</name><age>20</age></employee>yyy</{__proto__}>, <><\fx><y/></x></> >>> arguments++)) {return;if(<x><y/></x>) {yield; } else  if (<><x><y/></x></>) return; }\f");
tryItOut("/*for..in*/for(const prototype in  '' ) {export *; }");
tryItOut("if(__iterator__(Array(this, *::*))) { if ((((window ? #3={a:#3#} : <x/>))())) throw [1,,]; else  \"\" ; const __parent__;}");
tryItOut("/*infloop*/for(let __proto__; <><x><y/></x></>.__defineSetter__(\"prop\", ({}).__lookupGetter__); [<><x><y/></x></>]) {yield [z1]; }");
tryItOut("{prop = __count__ }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in <x><y/></x>) {yield *; }");
tryItOut("const , prototype = window;");
tryItOut("switch(__iterator__ = 'fafafa'.replace(/a/g, 5.0000000000000000000000)) { case 1: case ([1,2,3,4].slice).call((1e-81\n).__defineGetter__(\"__noSuchMethod__\", function  constructor ([constructor]) { (undefined); } ),  \"\"  >> undefined, (-*::*)): prop }");
tryItOut("do {;var ({a2:z2}); } while((prototype = (<x><y/></x>.valueOf(\"number\"))) && 0);");
tryItOut("__proto__, prototype = (__proto__ *= __parent__)");
tryItOut("try { let __parent__ = true, prop = __parent__; } finally { continue ; } ");
tryItOut("if(#1#) let (__noSuchMethod__ = __noSuchMethod__, true) { let prop; }");
tryItOut("if(({ __iterator__: __parent__ }) =  /* Comment */constructor.(<x><y/></x>)) { if (<><>(prop).@*</></>) var __count__, prop = []; else const prototype = {};}");
tryItOut("/*for..in*/for(const prop in (([1,2,3,4].slice)(<y><z/></y>)))return;");
tryItOut("");
tryItOut("switch(<zzz>{}</zzz>) { default:  /x/ ;break; export prop;case 9: (1 for (x in []))case 9: ;break;  }");
tryItOut("if(((<y><z/></y>)())) gc() else  if (<y><z/></y>) let constructor = 1e+81;");
tryItOut("L:if(new (({}).__lookupGetter__)()) {(true);{} }");
tryItOut("while((new ((new Function(\"yield ;;\")))()) && 0)this;");
tryItOut("L:if(([(__noSuchMethod__.constructor = #1#) for (constructor['__iterator__'] in  /x/g ) for each (__parent__ in arguments) for each (__proto__ in *)])) continue M;");
tryItOut("L:if(false) { if (<y><z/></y>\n.eval(//h\n__proto__).hasOwnProperty(\"__count__\")) {prototype = false, prop; }} else {( /x/g ); }");
tryItOut("if(({})) { if (<xxx>{prototype}</xxx>) {continue ; }} else {export *;prototype; }");
tryItOut(" const __proto__;");
tryItOut("return;");
tryItOut("/*infloop*/M:do {const __noSuchMethod__; } while(__noSuchMethod__ = <x><y/></x>.valueOf(\"number\"));");
tryItOut("{L: { }{throw *::*;yield <x><y/></x>; } }");
tryItOut("/*infloop*/while( '' )yield\n");
tryItOut("return <bbb xmlns=\"\tfunction::constructor.__noSuchMethod__ = -0\">yyy</bbb>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in (((new <><x><y/></x></>()))[1e-81])) {return; }");
tryItOut("/*for..in*/M:for(let __parent__ in  /x/g ) {{} }");
tryItOut("/*for..in*/for(const (yield <x/>) in this) {__parent__;return; }");
tryItOut("/*infloop*/do {yield;export *; } while([[z1]].sort((null).__defineSetter__));");
tryItOut("if(#1=[(constructor)]) {gc()yield; } else  if (#1=[#1#].throw(*)) {let __iterator__ = <x><y/></x>; } else prop;");
tryItOut("");
tryItOut("{}\nreturn;\n");
tryItOut("try { var #; } catch(prototype if __parent__ = ( /x/g ++)) { for(let y in []); } catch(__proto__ if constructor = #1=[#1#]) {  if (*::*)/*\n*/ } \tcatch(prototype) { for(let y in [5,6,7,8]) let(__proto__) ((function(){export *;})()); } ");
tryItOut(" ");
tryItOut("/*infloop*/L:while(<x><y/></x>)");
tryItOut("if(Date(((window).call).call(true, ))) yield <><x><y/></x></>;");
tryItOut("L:if(__proto__.watch(\"__count__\", ({}).hasOwnProperty)) constructor;");
tryItOut("if(@foo) break M; else  if (<><x><y/></x></>) {return; }");
tryItOut("/*infloop*/for(__iterator__.__noSuchMethod__ setter= <x/>; (__iterator__) = new [z1](prototype.propertyIsEnumerable(\"__noSuchMethod__\"), 4.); <y><z/></y>.__proto__ = new ( \"\" )((-1))) let(__parent__ = 3, __iterator__ = arguments) { yield;");
tryItOut("M:with(<><x><y/></x></> < <><x><y\r/></x></> ^= new Function){;var constructor = ~true; }");
tryItOut("export prop;");
tryItOut("/*infloop*/while(undefined ? <><x><y/></x></> : __count__)L: {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in true) {break L;undefined; }\nyield;\n");
tryItOut("<ccc:ddd>yyy</ccc:ddd>");
tryItOut("if(prop.constructor = constructor = undefined) { if (([15,16,17,18].sort(constructor, window).propertyIsEnumerable(\"__noSuchMethod__\"))) {return ({a2:z2}); } else var __iterator__;}");
tryItOut("if(({ get __proto__(constructor) { yield  /x/g  }  }).__lookupGetter__(\"prop\")) { if (++__proto__) 'haha'.split else throw @foo;}");
tryItOut("if(({__parent__ setter: function  __noSuchMethod__ (\tconstructor, ({ __noSuchMethod__: ({ prototype: ({ __count__: __count__, __parent__: __parent__ }), prop: [] }), __parent__: ({ __parent__: __count__ }) })) { return * }  })) if((<><x><y/></x></> ? <x><y></x> : true)) { if (( ''  in  '' )) {return; }} else {yield; } else {/*for..in*/for(let __proto__ = undefined in <bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb>.([false])) {throw new (function  __iterator__ () '' )(); } }");
tryItOut("/*infloop*/for(var __proto__; (window |= <><x><y/></x></>); new (new Function(\"1e81;\"))(null, <><x><y/></x></>)) {let prototype =  /x/g ;return; }");
tryItOut("(this);");
tryItOut("/*infloop*/for(true; let (__proto__) constructor = (window.__lookupSetter__(\"__count__\")).__parent__ + false - function(id) { return id }; undefined = <x><y/></x>) with(prop.__noSuchMethod__ = <zzz><y><z/></y></zzz>\t){with({}) { 1.2e3; } /*for..in*/for(let __noSuchMethod__ in ((__proto__)([11,12,13,14].sort))){throw window; } }");
tryItOut("return [(eval(\"const __count__, constructor = #1=[#1#];\", __proto__))];");
tryItOut("L: /*infloop*/for(var __proto__ = ([1] <<= <x/>); false.valueOf(\"number\"); (( /x/ )[(-0)])) ;");
tryItOut("export __parent__\nreturn *::*;\n");
tryItOut("throw __noSuchMethod__;");
tryItOut("/*infloop*/do (<x/>); while((eval(\"constructor = [[]];\", <y><z/></y>)) >= (true));");
tryItOut("/*for..in*/for(__proto__ in ((function  prop (prop)null)( /x/g ))){break L;const constructor = <><x><y/></x></>, __iterator__; }");
tryItOut("yield constructor; const true\n");
tryItOut("let (({ __parent__: constructor, __count__: ({ __proto__: __count__, __iterator__: __noSuchMethod__ }) }) = __proto__.__iterator__, constructor = (prototype)) { break M; }");
tryItOut("L:do {gc() } while((({__parent__: (new (({}).__lookupGetter__)(3, <y><z/></y>).watch(\"yield\", gc))})) && 0);");
tryItOut("{gc() }");
tryItOut("/*for..in*/for(__count__ in (*(function ([y]) { }.__lookupGetter__(\"prototype\")))) {/*infloop*/L:do {export *; } while(prop%=<><x><y/></x></>); }");
tryItOut("with({__iterator__: <x><y/></x>}){export set;( /x/g ); }");
tryItOut("if(window.__lookupSetter__(\"prototype\")) {( /x/ ).watch/*for..in*/M:for(let (__noSuchMethod__) in (([1,2,3,4].slice)(prototype))){gc()/*throw <x><y/></x>; } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.([null.*])) /*for..in*//* nogeckoex bug 349964 */M: for  each(prototype in <><x><y/></x></>) /*for..in*/for(var prop = constructor in this) {yield; } else return <y><z/></y>;");
tryItOut("/*infloop*/for((({prototype: (--0) })); <x><y/></x>; <{__parent__}><ccc:ddd><ccc:ddd><x><y/></x></ccc:ddd></ccc:ddd></{__parent__}>.(-3/0)) {continue ; }");
tryItOut("");
tryItOut("M:with({__count__: ('fafafa'.replace(/a/g, ({}).__lookupGetter__))})__noSuchMethod__ = prop;");
tryItOut("/*for..in*/L:for((((__count__.constructor = window).hasOwnProperty(\"__iterator__\")))(Array().throw((<><x><y/></x></> instanceof <><x><y/></x></>))) in ((function  __parent__ () { return ++this.zzz.zzz.throw(undefined) } )((((<><x><y/></x></>) if (0))))))function(y) { yield y; (new Function(\"([1,2,3,4].slice).call\")); yield y; }");
tryItOut("with({__noSuchMethod__: ((-3/0)[<x><y/></x>])})export __proto__;");
tryItOut("/*infloop*/L:for(__noSuchMethod__; new [1,2,3,4].map(); <><x><y/></x></>) export __iterator__;");
tryItOut("with({constructor: (__parent__ = <y><z/></y>)()})export *;");
tryItOut("__count__ = *::*;return;");
tryItOut("/*infloop*/while(([1,2,3,4].slice).call((<><>yyy</><x><y/></x>yyy</>.( super )), false , undefined)){/*for..in*/L:for(let set = window in <x><y/></x>) ({}).hasOwnProperty(new Function(\"function  delete (__count__, __count__) {  } \")) }");
tryItOut("/*infloop*/L:for(const each; __parent__; @foo) /*infloop*/L:while(typeof (@foo).call(-3/0,  '' , window)){\n{}yield; }");
tryItOut("if(constructor) break L;");
tryItOut("/*for..in*/for(var constructor = (prototype for each (__count__ in (function ([y]) { })())try { export *; } catch(__parent__ if (function(){continue ;})()) { new Function } catch(__iterator__) { const each; } finally { break M; } ) in <><x>y/></x></>) return <y><z/></y>;");
tryItOut("try { throw StopIteration; } catch(constructor if (function(){return;})()) { with({}) try { eval } catch(constructor if -0) { throw this; } catch(__noSuchMethod__ if (function(){ '' })()) { gc() } catch(__iterator__ if <><x><y/></x></>)this { / } catch(__count__ if (function(){gc()})()) {  }  } catch(__iterator__ if [,,][*::*]) { throw __noSuchMethod__; } catch(prop) { with({}) for(let y in [5,6,7,8]) gc() } ");
tryItOut("L:if(null) { if ( { return <x/> } ) {__parent__ = <y><z/></y>, constructor = <x><y/></x>;(-1); }} else {(#1#); }");
tryItOut("with({__iterator__: x::__noSuchMethod__})gc()");
tryItOut("/*infloop*/for(<><{__count__}>yyy</{__count__}></>; continue L\t;  '' ) {/a/gi }");
tryItOut("throw StopIteration;");
tryItOut("let ([,] = ([11,12,13,14].map[\t(yield 1e81)]), __parent__) { yield <><x><y/></x></>; }");
tryItOut("{*; } const __proto__;");
tryItOut("(<><x><y/></x></>);");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = true.watch(\"__proto__\", [1,2,3,4].slice) in this) yield *;");
tryItOut("/*infloop*/for(new Date((yield <x><y/></x>.__count__)); ('fafafa'.replace(/a/g, Function))[<y><z/></y>\n]() !== <>yyy</>; (__iterator__ = -3/0)\n) {do /*for..in*/for(const __noSuchMethod__ = @foo in *) {export *; } while((([15,16,17,18].some(Function, <x/>))) && 0); }");
tryItOut("/*infloop*/for(window; (eval(\"gc()\", -0)); prop = null ? typeof @foo : ({__iterator__\r: ?,  get prototype __parent__ (__proto__, prototype) { return <><x><y/></x></> }  })) L:if(((3)())) { if ((new {}(eval(\"<x><y/></x>\",  /x/g )))) 'haha'.split} else return;");
tryItOut("let (__count__, prop) { L:if(([15,16,17,18].some(__iterator__, ((<y><z/></y>)(false, this))))) { if (__noSuchMethod__ = [15,16,17,18].sort(function (__noSuchMethod__) { const prototype = true; } , __proto__ = ((uneval(__parent__))))) {gc() }} else continue ; }");
tryItOut("/*infloop*/for(let [] = window; window; 1e4) {throw @foo; }");
tryItOut("/*for..in*/for(\tx::prop = (#0=({__iterator__: (__parent__.__noSuchMethod__)()})) in this.zzz.zzz) <><x><y/></x></>");
tryItOut("L: return -3/0\nL:if(this) { if (@foo) var prop, prototype = <x><y/></x>; else {}}");
tryItOut("/*infloop*/M:while(__parent__ += 0){/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in this) {return; } }");
tryItOut("/*infloop*/M:do {export *; } while(__noSuchMethod__.__noSuchMethod__ getter= <x><y/></x>);");
tryItOut("/*for..in*/for(const __parent__ in ((function ()true , *)(#0=0)))gc()");
tryItOut("if(default: break; const __proto__, prototype = <x><y/></x>;break; return;break; break; ( '' );break; ;break; .isPrototypeOf(<x><y/></x>).throw(([11,12,13,14].filter))) { if (<ccc:ddd><ccc:ddd> </ccc:ddd><ccc:ddd><x><y/></x>yyy</ccc:ddd></ccc:ddd>) const __iterator__ = null\nyield; else constructor = [1]}");
tryItOut("this.zzz.zzz;");
tryItOut("if(prototype.function::__noSuchMethod__ getter= [1,2,3,4].map) return;");
tryItOut("if(prop) yield; else  if (<y><z/></y>) (this);");
tryItOut("/*for..in*/for(var prop in new String()) throw __count__;");
tryItOut("Function\nL: function(y) { yield y; var constructor = prototype, __proto__;; yield y; }");
tryItOut("let(__proto__ = __count__-=<y><z/></y>.hasOwnProperty(\"prop\"), constructor = @foo) { let(__noSuchMethod__) ((function(){yield;})());");
tryItOut("with(({prototype: <x/>}))yield false;");
tryItOut("throw StopIteration; const __count__;");
tryItOut("/*for..in*/for(let [prop, __noSuchMethod__] =  ''  in 4.) \freturn <><x><y/></x></>\nL: ");
tryItOut("/*infloop*/M:while((#1=[__iterator__])){function::__count__ }");
tryItOut("M:with({prop: (1 for (x in [])) ^= this.zzz.zzz.unwatch(\"__iterator__\")}){//h\n{export *;return -0; } }");
tryItOut("let(__count__) ((function(){throw prototype;})());");
tryItOut("if(1.3) { if (<xxx>{__iterator__}</xxx>) {{} }} else {with({__count__: new ( '' )()})continue M; }");
tryItOut("do __count__ while(((this.__defineSetter__(\"constructor\", gc))) && 0);");
tryItOut("let __count__ = *::*;\nyield;\n");
tryItOut("do {return function(id) { return id }; } while((this.zzz.zzz) && 0);");
tryItOut("var __count__ = <x><y/></x>, __count__;");
tryItOut("/*infloop*/M:do {with({prototype:  /x/g })throw this; } while((function::prop.__parent__));");
tryItOut("try { (({prop: undefined}))['prototype'] = __parent__; } catch(constructor if (function(){constructor = __proto__.prototype;})()) { let(__iterator__ = <><y><z/></y></>) ((function(){for(let y in []);})()); } finally { this.zzz.zzz; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop.constructor in __parent__ = window) let __count__ = [1,,], __count__;");
tryItOut("if((-1)) {[, ] = <><x><y/></x></>.valueOf(\"number\"), constructor } else  if (((( /x/g .prototype)()).watch(\"__iterator__\", Function)))  else const constructor;");
tryItOut("if(3/0 - <x/>.valueOf(\"number\").__defineSetter__(\"prop\", function(q) { return q; })) { if (__noSuchMethod__ = ((null)(<x/>)).__noSuchMethod__.propertyIsEnumerable(\"__parent__\")) {;yield <x><y/></x>; } else let __parent__ = arguments, prop;}");
tryItOut("do (__proto__); while(( '' ) && 0);");
tryItOut("export *\f;");
tryItOut("/*infloop*/while(<x><y/></x>.(<x><y/></x>))M:if((function (__iterator__) { yield; } ).call(constructor, )) return window; else  if ((<x><y/></x>)[<><x><y/></x></>]) ; else let prop;return;");
tryItOut("/*infloop*/for(var __iterator__; [__iterator__ = eval(\"let (__iterator__, prototype) { gc() }throw prop;\", (*::* .@ <><x><y/></x></>)) for each (__parent__ in __iterator__ = this) if (let (__count__ = prop, prototype) undefined)]; ((this.zzz.zzz).__lookupSetter__(\"__iterator__\") .@ (p={}, (p.z = false)()))) {/*for..in*/for(const prop = (window).call(<><x><y/></x></>.watch(\"__parent__\", function  __count__ (prototype) { yield 0/0 } ), ) in (<><x><y/></x></> .@ {})[//h\nwindow]) if(<x><y/></x>) { if ([,]) {var __parent__ = false; } else break L;}if(*) { if (window) {return; } else yield;}@foo; }");
tryItOut("with((<x><y/></x> ?  : <><x><y/></x></\f> += 1e4)){export *;return @foo; }");
tryItOut("if(false) { if (new (__iterator__)(<x><y/></x>)) yield <y><z/></y>;} else { }");
tryItOut("return;");
tryItOut("L:if(<x><y/></x>.unwatch(\"__proto__\")) {this;continue M; } else  if ((<x><y/></x>.@foo.__noSuchMethod__).unwatch(\"prototype\")) {{} }");
tryItOut("/*infloop*/do { } while(window);");
