tryItOut("switch(gc(//h\n) |= (p={}, (p.z = false)())) { default: export *\nreturn window;break \nbreak; case 3: case x::prototype = (uneval((delete <><x><y/></x></>))):  }");
tryItOut("prototype = __count__;");
tryItOut("if((.2['__noSuchMethod__'] = this <<= ({})).watch(\"constructor\", [1,2,3,4].map)) { if ((__iterator__ = this)) {; } else {(window); }\r}\n");
tryItOut("/*infloop*/while(<x><y/></x>)var __count__\nconst __parent__;");
tryItOut("let(({ constructor: __proto__ }) = __noSuchMethod__.([] = __noSuchMethod__)) { let(((prop)) = __parent__ = *::*, __count__ = [({ try { let yyy = undefined, __count__; } catch(__iterator__) { (<><x><y/></x></>); } finally { prototype; } : __proto__ })] = ({ set __iterator__(__count__) { return <x><y/></x> }  })) { with({}) { let(__iterator__) { this.zzz.zzz; } ");
tryItOut("L\f: {do {export *;({}); } while((prop) && 0);{} }");
tryItOut("\texport function::__parent__");
tryItOut("__iterator__ = prototype");
tryItOut("{}");
tryItOut("/*infloop*/for(-1; <><x><y/></x></>; __noSuchMethod__) {({});return @foo; }");
tryItOut("/*for..in*/for(var [__parent__, prop] = constructor.__proto__ = 0/0 in this) gc()");
tryItOut("try { (window); } catch(return <x/>; if new Number()) { return <y><z/></y>; } catch(__count__ if constructor.(<x><y/></x>)) { Function } finally { let prototype, prototype; } ");
tryItOut("__count__, prop const prop;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = prototype = <y><z/></y> in (__noSuchMethod__+=__iterator__ = <><x><y/></x></>)) with({__count__: this})\fthrow this;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = __iterator__['__count__'] in default: L: {var x::__iterator__, default: throw  /x/ ;case __parent__: break; return 3.141592653589793;break; case <x/>: break; case __count__: break; ;undefined;; }break;  *= null ? __noSuchMethod__ : *::*) {/*infloop*/L:do  while(({a2:z2}));(new Function(\"return;\")) }");
tryItOut("if((new ()(((((<x/>).__defineSetter__).call(5.0000000000000000000000, )).hasOwnProperty(\"prototype\")))) if(null) { if (new this , true .. <><x><y/></x></>()) {continue L;(<><x><y/></x></>); } else \n(window);\n}");
tryItOut("while(((<y><z/></y>.__lookupGetter__(\"__proto__\") <= <x><y/></x> ::  /x/ )) && 0){if( \"\" ) {<x><y/></x>;; } else  if (new Boolean(<><x><y/></x></>).__lookupGetter__(\"__noSuchMethod__\")) {yield *;; } }");
tryItOut("return *\n{}");
tryItOut("var <x><y/></x>, prototype;");
tryItOut("with({__proto__: (new (prop.constructor = *::*)(<x/>))})/*infloop*/for(var __noSuchMethod__ = prototype = prototype; (yield <x/>); ( /* Comment */<x><y/></x>)) {(__count__); }");
tryItOut("do {var __iterator__; } while(('fafafa'.replace(/a/g, Math.sin)) && 0);");
tryItOut("/*for..in*/for(var __proto__ in <><x><y/></x></>.valueOf(\"number\")\n) {throw <x><y/></x>; }");
tryItOut("/*infloop*/M:for(<x/>.__iterator__; eval(\"null\",  /x/ ); Math.sin(@foo)) {;0/0; }");
tryItOut("{(-0);let prop, __proto__; }");
tryItOut("yield;");
tryItOut("/*for..in*/for(__parent__ in (((prop).__defineSetter__)((void <bbb xmlns:ccc=\"window\"><ccc:eee></ccc:eee></bbb><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd>))))return;");
tryItOut("yield ; const __parent__;");
tryItOut("/*infloop*/do {function (__proto__, __count__) { return  /x/g ; } return <x><y/></x>; } while(<x><y/></x>);");
tryItOut("if(__proto__%=*.__lookupSetter__(\"prop\")) {var __parent__, __noSuchMethod__ = *::*;export *; } else {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in null) (<y><z/></y>);");
tryItOut("with({__noSuchMethod__: this}){break ;__noSuchMethod__ = #1=[#1#]; }");
tryItOut("M:do /*for..in*/for(var __proto__ = (__count__)() in -1) ++ while((__parent__ =  \"\" ) && 0);");
tryItOut("M:while((((false << *::*.yoyo((__noSuchMethod__.__iterator__ = prototype))).eval(0.1.watch(\"__count__\", true)))) && 0)export *\ncontinue M;");
tryItOut("if((function ([y]) { })()) {break M;throw function(id) { return id }; } else <x><y/></x>");
tryItOut("(.2);export *;");
tryItOut("M:with(Exception(true)){export *; }");
tryItOut("/*infloop*/M:while(false.isPrototypeOf(<><x><y/></x></>))return;");
tryItOut("{}/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in @foo) {__proto__;gc() }");
tryItOut("/*for..in*/for(let __proto__ = this.__defineSetter__(\"__noSuchMethod__\", (*).watch) in case 3: default: return;case 8: break; ) ;");
tryItOut("/*for..in*/for(var yield = (@foo)[function ([y]) { }]\f in \n3.141592653589793) yield;");
tryItOut("let(yield, prop) ((function(){throw StopIteration;})());");
tryItOut("L: ;");
tryItOut("return;");
tryItOut("/*infloop*/while(constructor = <x/>){gc()break ; }");
tryItOut("truelet (__iterator__ = (new Function(<y><z/></y>, 5.0000000000000000000000)).isPrototypeOf(new (/a/gi).apply( /x/ )) < ((yield ((({}).hasOwnProperty)( '' )))) for (__proto__ in this)) { M:if(0x99.__noSuchMethod__ = <><x><y/></x></>) export prop; else  if ( /x/g ) yield 0 }");
tryItOut("let ([]) { /*for..in*//* nogeckoex bug 349964 */L: for  each(let @foo in __iterator__ = (prop .@*:: prop)) {/*for..in*/for(const [__proto__, function::__iterator__] = eval(\"{}\", (__parent__ = true)) in true) ; } }");
tryItOut("[1,2,3,4].map");
tryItOut("/*infloop*/M:for(var ({ prop: ({ __parent__: ({ : __noSuchMethod__ }) }), []: __count__ }) = \n__parent__\n != (prop.__lookupSetter__(\"prop\")); (this < \n<><x><y/></x></>); eval(\"(new Date(prop = __proto__))\", false << [])) {; }");
tryItOut("L:if(\n<x><y/></x>.isPrototypeOf(this.__defineSetter__(\"__iterator__\", gc))) throw __iterator__; else  if (constructor((p={}, (p.z = prototype)()))) gc() else {(\n '' );/*for..in*/for(var [__parent__, constructor] = (<y><z/></y>(1e81, <y><z/></y>)) in <x><y/></x>) {var this; } }");
tryItOut("{/*infloop*/for(-3/0; (-0);  /x/ ) {//h\n; }throw new (yield __noSuchMethod__.prop)(window.hasOwnProperty(\"prop\") |= window); }");
tryItOut("{const __parent__,  /x/g  =  '' ;export __proto__; }\nL:switch(<><x><y/></x></>.*) { default:  }");
tryItOut("const __parent__ = *, prop = <x/>;");
tryItOut("\n");
tryItOut("/*for..in*/M:for(const [constructor, __noSuchMethod__] = Function in <x/>) ");
tryItOut("{export *; }");
tryItOut("0; const __proto__;");
tryItOut("L: while((<x><y/></x>) && 0){export *; }");
tryItOut("/*infloop*/for(var [[({ __noSuchMethod__: __count__, prop: __parent__ }), ({ constructor: __parent__, prop: {}['__proto__'] }), []]\f, ({ __noSuchMethod__: prototype })] = (p={}, (p.z = <x><y/></x\t>)()).isPrototypeOf((uneval(<><x><y/></x></>))); <><zzz>({ constructor: prototype, prop: ({ prototype: constructor }) }) = new constructor( \"\" )</zzz></>; ((function (__iterator__) { let __noSuchMethod__, __proto__; } )( '' ))) let  get prop(__iterator__, __parent__) { return <x><y/></x> }  = false;");
tryItOut("/*for..in*/for(__iterator__ = __parent__|=window in [11,12,13,14].map) {let (__noSuchMethod__) {  } }");
tryItOut("M:if([1]) {} else {throw <><x><y/>\t</x></>; }");
tryItOut("/*infloop*/for(prop; #1=[ /x/ ]\t; 3) ;");
tryItOut("do function(y) { yield y; export *;; yield y; } while((new function(q) { return q; }(__proto__)) && 0);");
tryItOut("M:if(this.__defineSetter__(\"__proto__\", false)) { if (<x><y/></x> <<= #1=[#1#]) {(<y><z/></y>);return constructor; } else {return undefined; }}");
tryItOut("while((( /x/g  ,  \"\" )) && 0)yield;");
tryItOut("/*for..in*/for(var [prototype, __parent__] = 1e+81 >>>=<><x><y/></x></> in this.__defineSetter__(\"constructor\", /a/gi)) /*infloop*/while([11,12,13,14].filter)throw  '' ;");
tryItOut("if([(constructor.__proto__)]) { if (<><x><y/></x></> === <x><y/></x>) { }} else {gc() }");
tryItOut("yield __parent__\n;");
tryItOut("M:with((__parent__.prop)){continue ; }");
tryItOut("{with(*)__count__ = this; }");
tryItOut("export *;\ngc()\n");
tryItOut("if(<x><y/></x>) export *; else  if (prop) continue ; else {export *; }");
tryItOut("M:switch((let (({ prototype: constructor }), prop) (let (prototype = this)  /x/g ) >> <x/> << *::*)) { case 2: return;default: break; break; case 9: ( \"\" );break; case [z1,,]: while(((<><x><y/></x></>.unwatch(\"__iterator__\"))) && 0)return this; }");
tryItOut("M:if(__noSuchMethod__ = 5.0000000000000000000000) { if (3/0.unwatch(\"__noSuchMethod__\")) return;} else gc()");
tryItOut("{while((<x><y/></x>) && 0){continue ; } } const __noSuchMethod__;");
tryItOut("yield ((function ([y]) { })() === #1=[#1#]);");
tryItOut("switch(<x/>) { default: (window); }");
tryItOut("if(<y><z/></y>) export *; else yield;");
tryItOut("while(([11,12,13,14].sort) && 0)yield; const __noSuchMethod__;");
tryItOut("/*infloop*/for(var __iterator__; __parent__; (yield true)) ");
tryItOut("with(__noSuchMethod__){<x><y/></x>.__iterator__export __count__;\nyield  '' ;\n }");
tryItOut("L: {export __noSuchMethod__;break M; }");
tryItOut("/*infloop*/for(<x><y/></x>; (<><x><y/></x></>.unwatch(\"__parent__\")); Array( \"\" , <x><y/></x>)) {continue ; }\n");
tryItOut("{<x><y/></x>;return [,,]; }\nyield; const __noSuchMethod__;\n");
tryItOut("constructor, break ;\nyield *::*;");
tryItOut("/*infloop*/for(var [undefined].map(new Function).delete = ; constructor = ({ __noSuchMethod__: __iterator__ }) = (new Number()); eval(\"\", <><x><y/></x></>)) gc()");
tryItOut("/*infloop*/for((__proto__.constructor getter= Math.pow); (__parent__(<x><y/></x>)) = (p={}, (p.z = *::*)()); (((gc)(<x/>)).isPrototypeOf(([,] for each (__count__ in <><x><y/></x></>)<x/>)))(({ set __proto__ __noSuchMethod__ (prop) { yield (return;.isPrototypeOf(__iterator__.__proto__ setter= function () { new Function } )) } , constructor: __noSuchMethod__ = <><x><y/></x></>.@* }))) {/*for..in*/for(var [constructor, prototype] = constructor = this.__defineGetter__(\"prop\", Function) in Error(<><x><y/></x></>)) {/*infloop*/for(*::*;  { yield ({ __noSuchMethod__: constructor }) = <><x><y/></x></> ? <><x><y\f/></x></> : -1 } prototype; <y><z/></y>) return; }/*for..in*/M:for([\f__noSuchMethod__, prototype] = ([5.0000000000000000000000]) in [z1]) {/*infloop*/do {; } while( '' ); } }");
tryItOut("/*for..in*/for(null['__iterator__'] in 0.1) ");
tryItOut("L: return;");
tryItOut("{{}prop; }");
tryItOut("{([1,,]); const __count__; }");
tryItOut("/*for..in*/for(__count__ = new (/a/gi)() in ({})) {export __proto__;gc }");
tryItOut("/*infloop*/do throw <><x><y/></x></>; while((undefined :: <y><z/></y>));");
tryItOut("switch(__proto__ = @foo) { default: for(let y in [5,6,7,8]) var __noSuchMethod__ = <x><y/></x>;break; /*infloop*/M:for(let __count__ = arguments; <y><z/></y>; <><x><y/></x></>) {; }break; case 7: break; gc() }");
tryItOut("{const __noSuchMethod__, __noSuchMethod__; }");
tryItOut("/*infloop*/for(__iterator__ = (-0); [true].some(gc); ((let (__parent__ =  '' , set) [[]]).isPrototypeOf('fafafa'.replace(/a/g, window)))) {\rdo return; while(((#3={a:#3#} % 5.0000000000000000000000[ '' ])) && 0); }");
tryItOut("if((-0)) {let <x/> = [,,z1], __noSuchMethod__ = 5.0000000000000000000000;{} }");
tryItOut("/*for..in*/for(let [prop, function::__noSuchMethod__] = [,,] in <x/>) {throw @foo;export *; }");
tryItOut("\nwindow;\n");
tryItOut("{return @foo;let __count__; }");
tryItOut("if(\teval(\"function ([y]) { }\", <><x><y/></x></>)) return;");
tryItOut("with(({__proto__: yield (function (__proto__, prop) { return <x/> } )( /x/g , <x/>).prop = (let (constructor, constructor@foo) }))/*infloop*/for(__iterator__ = <><x><y/></x></>; *;  /x/ ) {return  /x/ ;yield; }");
tryItOut("with({constructor: (@foo--)}){yield; }");
tryItOut("L:do (<x><y/></x>); while(((this === window)) && 0);");
tryItOut("if(--this) {if((-0)) { if (<><x><y/></x></>) const prop = <y><z/></y>, __parent__; else {const __noSuchMethod__;yield; }} } else  if (__parent__) {{}\treturn; }\n(Math.pow).apply\n");
tryItOut("L: {export *;throw <x><y/></x>; }");
tryItOut("L: with({}) {}");
tryItOut("let (__proto__) { const prototype = null, __parent__; }");
tryItOut("if(setter = [,,z1]) {{} }");
tryItOut("if(<x><y/></x>) {__noSuchMethod__;{} } else {\fyield <x><y/></x>; }");
tryItOut("if(__count__.(export prop; const x::delete;).propertyIsEnumerable(\"__count__\")) {switch(4.) { case false: gc()case  \"\" : yield;var __parent__ = window;break;  }\nthis{export constructor; } } else  if (( \"\"  <= <x/>).__lookupSetter__(\"constructor\")) __proto__");
tryItOut("var __iterator__, __parent__ = <y><z/></y>;\nbreak ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in ({ __iterator__: __iterator__, prototype: prototype }) = this) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.__noSuchMethod__ in <><x><y/></x></>) const constructor, __noSuchMethod__ =  \"\" ;gc() }");
tryItOut("if(this++) { if (eval(\"const __iterator__;\", <x><y/></x>)) {function  __iterator__ ()try { case 0: break;  } finally { ('haha'.split).apply }  }} else 5.0000000000000000000000;");
tryItOut("/*for..in*/for(var __count__ = *::*.prop in __proto__) {/*infloop*/for(const prototype; prototype; 1.2e3) __proto__, __parent__ = [,]; }");
tryItOut("{#1=({__count__: <x><y/></x>.(<y><z/></y>)});let __count__ = window, __parent__; }");
tryItOut("__count__ = __iterator__;");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(*::*.constructor in @foo) ; }\n/*infloop*/for(let ({ prop: [[__count__, prop], function::prop, , [, ({ __parent__: __iterator__, prop: ({ x::constructor: __parent__, __noSuchMethod__: __noSuchMethod__ }) }), __noSuchMethod__], [__iterator__]] }) = yield __parent__.__iterator__ setter= ({}).hasOwnProperty; <><>yyy</></>; \fprototype = <x><y/></x> > __parent__ = *::*.propertyIsEnumerable(\"prop\")) /*for..in*/for(let prototype in ((function::__count__)(yield <y><z/></y>))){__iterator__;export *; }");
tryItOut("if(<y><z/></y>) {;export *; }");
tryItOut("const __proto__ const __parent__;");
tryItOut("/*for..in*/for(let __parent__ in <x><y/></x>) {return; }");
tryItOut("M:if(<><x><y/></x></> && * >>>=null ^= ~<y><z/></y>) __iterator__, constructor;");
tryItOut("/*for..in*/M:for(let 0 in ((( \"\" ).__defineSetter__)(this.__defineGetter__(\"__count__\", #1#))))throw false;");
tryItOut("/*for..in*/for([__iterator__, prop] = <><x><y/></x></> in <><x><y/></x></>) {; }");
tryItOut("<><x><y/></x></> = constructor;");
tryItOut("{break M; }");
tryItOut("-");
tryItOut("while(( /x/g ) && 0)throw *::*;");
tryItOut("with(('fafafa'.replace(/a/g, Math.sin)))(<><x><y/></x></>).watch");
tryItOut("/*for..in*/for(let [prototype, __parent__] = (<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\").hasOwnProperty(\"__proto__\")) in (0.1 if (<x><y/></x>))) export prototype;");
tryItOut("/*for..in*/for(const (__noSuchMethod__.__count__) in ((([1,,].prop).watch)(#2=* in 1e4)))return;");
tryItOut("if((true <<= <x><y/></x>)) { if (({})) {return;/*for..in*/for(const yield in ((([[]]).watch)( /x/ )))throw  /x/g ; }} else {__noSuchMethod__, __noSuchMethod__return .2; }");
tryItOut("yield;");
tryItOut("const __proto__, prop = <x><y/></x>\n;");
tryItOut("L:with({__noSuchMethod__: *}){yield <x/>;return <y><z/></y>; }");
tryItOut("throw StopIteration;");
tryItOut("throw this;");
tryItOut("let(prop = -0, __proto__) { let(__iterator__ = <><x><y/></x></>.throw(prop), __proto__) { this.zzz.zzz;");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ = (prop++) in <y><z/></y> < false\t) L:do {var __proto__, __noSuchMethod__ = 3;\t } while((<x/>) && 0);");
tryItOut("if((eval(\"export __count__;\", [z1,,]))) { if (__count__ = undefined) throw this; else return\n([z1]);}");
tryItOut("return ~*::* ^ <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in window) throw <x/>;");
tryItOut("const __parent__ = <x/>");
tryItOut("do {yield; } while((5.0000000000000000000000) && 0);");
tryItOut("/*for..in*/for(const __count__ in ((({}).__lookupGetter__)([15,16,17,18].some(function (\tprop, __parent__) { return prototype } , ({__noSuchMethod__ getter: (<><x><y/></x></>).__defineSetter__, __count__ setter: function(q) { return q; } }))))){{export *;const prop; } }");
tryItOut("yield; const __iterator__;");
tryItOut("do {export *;{} } while((__count__ & prototype) && 0)\n");
tryItOut("{{<x/>(<><x\r><y/></x></>).__defineSetter__ } }");
tryItOut("L: {gc() }");
tryItOut("if((#0=[(new (this)(3/0))])) {if(<x><y/></x>.eval( /x/ )) <x><y/></x> else  if (eval(\"__noSuchMethod__\", @foo))  else \fwith({__parent__: ((eval(\"yield;\", <x/>)) *= arguments.__lookupGetter__(\"prop\"))}){const __iterator__, __noSuchMethod__ =  /x/g ;const __count__, __noSuchMethod__; } } else  if ((eval(\"#1=[#1#]\", ((__iterator__)(*::*, window).__lookupSetter__(\"__count__\").hasOwnProperty(\"__iterator__\"))))) {export __proto__; }");
tryItOut("while((__proto__ = <y><z/></y>) && 0){var __count__; }");
tryItOut("with({constructor: yield prototype = <x/>--})gc()");
tryItOut("with(new ( \"\" ).__defineSetter__(<><x><y/></x></>))(<><x><y/></x></>);");
tryItOut("do { } while(((yield <><x><y/></x></>)) && 0);");
tryItOut("with(( /x/  <= (function ([y]) { })().yoyo((1e4))).__parent__ = (__noSuchMethod__ = this.@*))gc()");
tryItOut("{/*infloop*/for(__count__; (yield  /x/g ); @foo) (false);if(<><x>y/ export prop; >/x</>) ({}).__lookupGetter__ else  if ((__noSuchMethod__.__noSuchMethod__ getter= function(q) { return q; })) var __count__ = <><x><y/></x></>; else var prop; }");
tryItOut("do  while(( /x/g ) && 0);");
tryItOut("/*for..in*/for(let (__count__) in ((eval)((this)(false, 0/0)))){with(__noSuchMethod__)yield <y><z/></y>; }");
tryItOut("[z1].__noSuchMethod__.__lookupGetter__(\"__proto__\")");
tryItOut("/*infloop*/for(let prototype = *::*; -1;  '' ) {continue ; }");
tryItOut("export prototype\n");
tryItOut("/*infloop*/for(var __proto__; [__proto__ for each (constructor in <><x><y/></x></>)]; this) ");
tryItOut("var prototype = @foo; const __parent__;");
tryItOut("const prototype;\ngc()\n");
tryItOut("{;/*infloop*/do if(function(id) { return id }) { if (<x><y/></x>) yield; else return;} while(<x><y/></x>(__noSuchMethod__, @foo)); }");
tryItOut("let __count__ = ({a2:z2}); const prop;");
tryItOut("return;");
tryItOut("M:switch((__parent__ = ({ __iterator__: ({ get: __iterator__ }) }))) { case 8: break; case ({__proto__: undefined}).yoyo(new Function(false, @foo)): {gc()yield; }/*infloop*/for(const __count__ = (-1); *::*; 3.141592653589793) {;export *; }default: throw <x/>;case 8: if(( /* Comment */<><x><y/></x></>.valueOf(\"number\"))) { if ([<><x><y/></x></> for (__proto__ in window)].propertyIsEnumerable(\"__parent__\")) {} else throw <x/>;}break; case (({ prop: __proto__, prop: __parent__ })\f = __parent__) instanceof ((true).watch): export __iterator__;break; case prop(prototype = <x><y/></x>) = prop.constructor setter= [1,2,3,4].slice.__proto__: {}{-3/0; }\nreturn this;\nbreak;  }");
tryItOut("if(<><\rx><y/></x></>) {(Function).apply } else  if (<><x><y/></x></>) return;");
tryItOut("with({}) { return ({ __parent__: __count__, __iterator__: __noSuchMethod__ }) = eval(\"const __parent__ = <x/>;\",  '' ); } ");
tryItOut("if([15,16,17,18].some(new Function, true).isPrototypeOf(__proto__.constructor = <><x><y/></x></>)) { if (([11,12,13,14].filter)) {(<x/>).__defineSetter__ }} else return;");
tryItOut("yield\n__iterator__;");
tryItOut("M:if(#1=({__count__: (new <><\fx><y/></x></>(this,  /x/g )) & (arguments ===  /x/g )}\f)) { if (new Function(0/0)) {while(( '' .watch(\"__count__\", ( \"\" ).watch)) && 0){this.__defineSetter__(\"prototype\", [1,2,3,4].map) <= (__proto__.prototype setter= (<x/>).__defineSetter__), <><x><y/></x> </>;yield; }{} }} else let(({ __parent__: constructor, prototype: __iterator__ }), __count__ = <x/>) ((function(){with({}) var prop = *;})());");
tryItOut("with((([,] %  /x/g ) += (0 <= @foo)(__iterator__ = this, prototype = 3/0)))return [1]\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <> if (({ set __count__ prop (prop, __iterator__ = <><x><y/></x></>, prop = <x/>) { __proto__ = ({}), constructor; } ,  get __proto__() { ((-0)); }  }))</>) {(<x><y/></x>); }");
tryItOut("/*for..in*/for(const prototype in 3) L:do {__parent__, prototype; } while((<><x><y/></x></>) && 0);");
tryItOut("M:switch(3/0 ^ this) { case <x><y/></x> > <y><z/></y>: default: {throw <><x><y/></x></>; }case ((((({ prop: [[], ] })).@foo) ? 4. , @foo : var get = undefined, prototype = .2;[constructor] @ (__count__ = prop)) >> new (function  prop () { let prototype = __proto__; } )(({ __count__: __parent__, let: __noSuchMethod__ }) = __iterator__)): break;  }");
tryItOut("L:with({false: <><x><y/></x></>})var prototype = <><x><y/></x></>;");
tryItOut("yield;\nthrow undefined;\n");
tryItOut("throw StopIteration;");
tryItOut("{__noSuchMethod__");
tryItOut("if((__count__ = (yield 0.1.unwatch(\"let\")))) { if (({prop setter: @foo })) gc() else yield this;}");
tryItOut("let (({ constructor: prototype, ({ __parent__: ({ prop: __count__, constructor: ({ __iterator__: constructor, __proto__: prop }) }), __noSuchMethod__: [, ({ prototype: __iterator__ })] }): ({ prop: __parent__\t }) }) = ((prop = __iterator__).eval(undefined)), constructor = getter =  \"\" ) { /*infloop*/L:for(function::prototype; eval(\"export *;\", 3.141592653589793); (new __count__.__iterator__(this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }), __count__))) {yield \f<x><y/></x>; }\t }");
tryItOut("/*for..in*/for(const [function::({ __proto__: prototype, __count__: __proto__ }), __iterator__] = (#3={a:#3#}.watch(\"prop\", gc).watch(\"__parent__\", true\f))[ @ (-1)] in <><x><y/></x></>) {L: ;return; }");
tryItOut("with({__count__: eval(\"yield -3/0\", *::*)}){M:if(#1#) {break ;yield *::*; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in x::__proto__;) if((-1)) break ;");
tryItOut("do {const __iterator__, __parent__ = @foo; } while(((__noSuchMethod__.__count__ setter= (gc).call)) && 0);");
tryItOut("throw StopIteration;");
tryItOut("{yield <y><z/></y>.__lookupSetter__(\"__parent__\"); }");
tryItOut("for(let y in []);");
tryItOut("if(@foo) { if (-1) {yield *::*; }} else {<x><y/></x>continue L; }");
tryItOut("L:if(({each: constructor = <><x><y/></x></>\f })) { if ((this.__defineSetter__(\"prototype\", ({}).__lookupGetter__))) {const prototype = 1e+81; }} else {/*infloop*/for(__iterator__; <><x><y/></x></>; <><x><y/></x></>) {break M; }gc() const __parent__; }");
tryItOut("yield [*::*].@*;");
tryItOut("{; }");
tryItOut("with({}) let(({ __count__: __proto__ }) = <x><y/></x>, __proto__ = <x><y/></x>) ((function(){with({}) export *;})());");
tryItOut("/*for..in*/L:for(let __parent__ in __noSuchMethod__) {let (__iterator__ = <y><z/></y>) { const __proto__ = <x><y/></x>, __parent__; }export *; } const __parent__;");
tryItOut("const constructor = <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let [__proto__, prototype] = \f in ({ __proto__: __noSuchMethod__ }) = __noSuchMethod__) {yield;; }");
tryItOut("/*infloop*/M:for(var ({ prop: ({ prop: ({ __proto__: ({ __proto__: __count__, __iterator__: ({ __proto__: prototype, __count__: [, , ] }) }), prototype: __noSuchMethod__ }) }) }) = (yield (new Function(\"let prototype = 0, __iterator__ = <x/>;\"))(try { throw prop; } finally { return; } ,  '' ) ^= [15,16,17,18].map(function () { yield true } , 1.3).unwatch(\"__parent__\")); [11,12,13,14].filter.throw(constructor.@*); new RangeError([11,12,13,14].some, <x/>)) do {true;<bbb xmlns=\"new (({}).hasOwnProperty)(<><x><y/></x></>, <x><y/></x>)\"><!--yy--></bbb> } while((new RegExp()) && 0);");
tryItOut("switch((prop = ({}))) { default: break;  } const __count__;");
