tryItOut("if(*::*) { if (this.zzz.zzz) if(true)  else  if (1e4.yoyo(<y><z/></y>)) let __noSuchMethod__ = __proto__, \"; else ;}");
tryItOut("if((let (__parent__, __noSuchMethod__) false)) { if (<><x><y/></x></>.valueOf(\"number\")) {return; } else return __count__;}");
tryItOut("if([<y><z/></y>.__lookupSetter__(\"constructor\")]) { if (prop.constructor = [11,12,13,14].map) {export prototype; } else break ;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in false) yield;");
tryItOut("for(let y in []);");
tryItOut("<y><z/></y>\n");
tryItOut("if( /* Comment */(prop = <x/>)) {export constructor; } else gc()");
tryItOut("/*infloop*/for([15,16,17,18].sort\f('haha'.split, prop = <x/>); prop.__iterator__; x::__iterator__) throw <><x><y/></x></\t>;\n[, , ]\n");
tryItOut("with(this.yoyo(({})))yield *;");
tryItOut("if((uneval(<x><y/></x>))) {/*\n*/ if ((@foo.__noSuchMethod__\t)) return true;} else {return [[]];throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __proto__ }) = this.zzz.zzz.valueOf(\"number\"); (<><x><y/></x>\n</>.__defineGetter__(\"__noSuchMethod__\", ((new Function(\"{}\"))).call)); <><{__count__}><!--yy--></{__count__}></>) {}");
tryItOut("if(true) (*); else ;");
tryItOut("with({}) { try { gc() } catch(__proto__) { var constructor = <><x><y/></x></>; }  } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in function(id) { return id } > <><x><y/></x></>) {{}let prototype; }");
tryItOut("gc()");
tryItOut("throw function::__count__;");
tryItOut("with({__parent__: ('fafafa'.replace(/a/g, [1,2,3,4].map))})return *::*;");
tryItOut("if(<x><y/></x> -= <x/>) \t{gc()gc() } else  if (Iterator(__iterator__)) {<x><y/></x>;export *; } else {const __parent__, constructor = __proto__; }");
tryItOut("yield (<y><z/></y>.constructor).prop;");
tryItOut("with({__proto__: (this.__defineSetter__(\"__iterator__\", Function))})L:switch((<y><z/></y>.watch(\"__parent__\", function  constructor ()undefined))) { case (__parent__ = [[1]]): prototype;break;  }");
tryItOut("do /*for..in*/for(__noSuchMethod__ = 0/0 in 033) {gc()yield window; } while((__proto__.prop = (*['__iterator__'] = (yield __parent__: (this.yoyo(<><x><y/></x></>))))) && 0);");
tryItOut("/*infloop*/while(((__proto__.__count__ setter= function(y) { yield y; @foo;; yield y; })[])){/*infloop*/while([this].filter(function  __proto__ (__iterator__, __proto__) { return <><x><y/></x></> } ))L: ;yield __count__ = constructor; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in [,,z1]) \t{let __noSuchMethod__, __parent__; }");
tryItOut("L:if(constructor) { if (((undefined++).@foo)) {{}0x99; } else {gc() }}");
tryItOut("prop, constructor = prototype;");
tryItOut("if(__parent__.__noSuchMethod__ = null) {export __count__; }");
tryItOut("L:if((this.__defineSetter__(\"constructor\", gc))) {const prop, __parent__ = true; } else  if ([].hasOwnProperty(\"constructor\")) const __count__ = <><x><y/></x></>;");
tryItOut("if(true) ; else {yield this; }");
tryItOut("if(([1,2,3,4].map)().__defineSetter__(\"__parent__\", function () { throw undefined; } )) { if (prototype.__proto__ = \f<xxx>{prop}</xxx>)  else ;}\nvar __noSuchMethod__ =  /x/g ;");
tryItOut("L: let (__parent__) { with({__proto__: *::*})return <x><y/></x>; }");
tryItOut("switch(prop, prototype) { case 1: /*infloop*/for(let __iterator__; <><x><y/></x></>; [,]) var __proto__ =  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var this['__proto__'] in <>false</>.([this].sort((new Function(\"continue M;\"))))) {return;return this; }");
tryItOut("/*infloop*/for(null.prop; (<y><z/></y>.eval(@foo.propertyIsEnumerable(\"__count__\"))); <employee id=\"1\"><name>Joe</name><age>20</age></employee> ) export *;");
tryItOut("L: {with({__proto__: ({a1:1})}){const __iterator__ =  '' , constructor = case true: break; default: break; var prop;;\rreturn <x/>; } }");
tryItOut("{/*for..in*/for(let __proto__ in (((constructor getter: ( \"\" ).__defineSetter__).call)(\t5.0000000000000000000000))){(window);throw prop; }if(__noSuchMethod__) {0/0\nexport function::__count__\n } }");
tryItOut("if(__count__) {return;var __proto__ = true; } else  if ( \"\" ) {export *; finally ; }\nif(this.zzz.zzz) { if (<><x><y/></x></>(null,  '' )) with({__count__: *}){break L; } else Function}");
tryItOut("with(({__proto__: prototype})){function(id) { return id };var constructor; }__parent__;");
tryItOut("(true)(1e81) = prototype;");
tryItOut("/*for..in*/for(const ({ __parent__: ({ __noSuchMethod__: [, ({ delete: <><x><y/></x></>['prop'] }), prototype], prop: [, __iterator__.function::prop] }), __noSuchMethod__: ({ __iterator__: __count__ }) }) in ((eval)(eval(\"(#2=this.zzz.zzz)\", prototype)))){/*for..in*/for(const __proto__ in ((undefined)(prop\n)))function(q) { return q; } }");
tryItOut("if(<x/>) { } else  if (3.141592653589793) {break ; const __parent__;\tconst prop = <><x><y/></x></>, __iterator__ = <x/>; } else {}");
tryItOut("L: {export *; }");
tryItOut("\nbreak L;\n");
tryItOut("/*infloop*/for(({ __noSuchMethod__: ({ __proto__: prototype }) }) = <x/>; typeof yield.__defineGetter__(\"constructor\", <><x><y/></x></>.unwatch(\"prototype\")); undefined >>= this[false]) throw ((p={}, (p.z =  '' )()));");
tryItOut("let (__iterator__) { /*infloop*/for(var constructor = <><x><y/></x></>; 1e4; .2) {; } }");
tryItOut("/*infloop*/while((prototype|=<><x><y/></x></>) || *::*){export __iterator__; }");
tryItOut("with((new (__noSuchMethod__)(window)))(1e-81);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__.constructor in null) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in *) yield <x/>;export *; }");
tryItOut("return window;");
tryItOut("/*infloop*/do {switch(prototype.yoyo(null)) { case 2: break ;break; break;  } } while(window.valueOf(\"number\"));");
tryItOut("if((({__iterator__ setter: ({}).__lookupGetter__, prototype setter: /a/gi })).valueOf(\"number\")\t ? ({ get __iterator__(prototype, <x><y/></x>) { return __parent__ }  }) | this.__defineSetter__(\"__proto__\", <x/>) :  /* Comment */'fafafa'.replace(/a/g, new Function)) {prop } else  if (__proto__ = 1.3.propertyIsEnumerableconstructor.__parent__ \"prop\")) {export prop;/*for..in*/(for(__proto__ in  \"\" ) /*for..in*/for(var __noSuchMethod__ = .2 in __noSuchMethod__) {__iterator__ = [[1]];-3/0; }) } else {/*for..in*/for(let [prop, __noSuchMethod__] = this.__defineSetter__(\"constructor\", gc) in <x><y/></x>) {export prop;yield <>yyy</>; }yield; }");
tryItOut("break ;");
tryItOut("{gc()/*infloop*/for(({ prop: __iterator__, constructor: constructor }) = *.__defineGetter__(\"constructor\", (1 for (x in []))); new Date(function ([y]) { }); __parent__ = *) let prototype; }");
tryItOut("var constructor = null;gc()");
tryItOut("let (function::__iterator__, __parent__) { yield __parent__; }\nif(true) (__noSuchMethod__);");
tryItOut("[[]]");
tryItOut("while(((prop = prototype)) && 0){if(prop = <y><z/></y>) { if (((uneval(*)))) prototype = *, __parent__;} else const  /x/g  = 1e81, __noSuchMethod__;default: case <y><z/></y>: break; case 2: return; }");
tryItOut("try { var __noSuchMethod__; } finally { gc() } ");
tryItOut("if((<x><y/></x>.(window))) { if (__iterator__++) {throw <x><y/></*\n*//x>; }} else export *;");
tryItOut("M:if(Exception(__count__, __count__)) {yield @foo; }");
tryItOut("return <x><y/></x>;\nbreak M;\n");
tryItOut("let prototype = prototype, prototype;");
tryItOut("/*infloop*/M:for(prototype; <x><y/></x> in __proto__; null[<x/>]) return;");
tryItOut("/*for..in*/prototype = ('fafafa'.replace(/a/g, eval))([11,12,13,14].map >> <x><y/></x>\f) in ([this].map((function  prop (__iterator__) { return prototype } ).call))) { }");
tryItOut("/*for..in*/for(const [prototype, __count__] = --<x><y/></x> in ( /x/  %= 1.3) || [z1,,].yoyo(null)) ");
tryItOut("L:with({__count__: Error([__count__, , ] = 'fafafa'.replace(/a/g, undefined), (Math.pow))}){with(this.zzz.zzz){/*infloop*/for(const __count__ = <><x><y/></x></>; <><x><y/></x></>; 1e+81) \f }export *; }");
tryItOut("with\f(((__iterator__.constructor).__defineSetter__(\"constructor\", ({}).__lookupGetter__))){throw StopIteration;L:do {var __count__, __proto__; } while(( /x/  && this.__defineSetter__(\"__count__\", /a/gi)) && 0); }");
tryItOut("(3.141592653589793);");
tryItOut("for(let y in [5,6,7,8]) with({}) prototype");
tryItOut("yield [1,,];");
tryItOut("while((new Array()) && 0)while((function ([y]) { }) && 0){yield; }");
tryItOut("throw StopIteration;");
tryItOut("let (__proto__) { /*infloop*/while(*::* *= <x><y/></x>)__iterator__ = * }");
tryItOut("export *\n{}");
tryItOut("/*infloop*/for(let ({ prop: __noSuchMethod__ }) = (this.zzz.zzz >>> <y><z/></y>.__defineSetter__(\"__proto__\", <x/>)); *::*; /*\n*/__proto__ ^ true ? 0.1.hasOwnProperty(\"__proto__\") : __parent__()) {do yield; while((<y><z/></y>) && 0); }");
tryItOut("function () { return <y><z/></y> }  const __iterator__;");
tryItOut("{gc() }");
tryItOut("try { throw __proto__; } finally { let(prototype) { throw prop; } ");
tryItOut("M:if(this.__defineGetter__(\"constructor\", window))  else {{}break M; }");
tryItOut("yield;");
tryItOut("{do __noSuchMethod__ while(((-0)) && 0);throw window; }");
tryItOut("L: let (__noSuchMethod__ = 1e-81) { ; }");
tryItOut("switch(new (new Function(\"\\r\"))(yield <x/>)) { default: let (__proto__, constructor) { yield *; }break; case this.__defineGetter__(\"__parent__\", function () { return <y><z/></y> } ): return;\nthrow __count__;\n const __parent__; }");
tryItOut("throw StopIteration;");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in window) {return [,]; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(let (prototype = *, __iterator__ = @foo) *) ; else  if (<x><y/></x>) return __iterator__;");
tryItOut("if(((eval)(__count__))) {} else  if (constructor) __count__ = this, prop; else gc()");
tryItOut("yield 0;");
tryItOut("/*infloop*/for(var __noSuchMethod__; #0=[(constructor = __noSuchMethod__).yoyo(__proto__)]; <x>\r<y\f/></x>.__count__ = false ? true : @foo) {/*infloop*/while( '' ){(null); } }");
tryItOut("/*infloop*/do export *; while(yield <bbb xmlns:ccc=\"new @foo(*)\"><ccc:eee></ccc:eee></bbb>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((this.__defineSetter__(\"prototype\", (<><x><y/></x></>).__defineSetter__)))(__count__.(this)) in <x><y/></x>) {with({constructor: *::*})export prototype; }");
tryItOut("<x><y/></x>");
tryItOut("if((<><x><y/></x></> ? __parent__ : *)) { if (@foo) {yield; } else {(<x/>);; }}");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __proto__.prototype in (((\n5.0000000000000000000000).watch)(\n1.2e3))){; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x><y/></x>) {; }");
tryItOut("let(yield = (-1), yield <x/>;) ((function(){return [15,16,17,18].some((yield true), ([15,16,17,18].filter(/a/gi, __parent__ = 1e81)));})());");
tryItOut("if(<x><y/></x> = window.prototype != ({__count__: function(y) { yield y; export __proto__;; yield y; }})) {{<><x><y/></x></\t>; } } else  if ((#0=<x/> >>>=__noSuchMethod__ = window.watch(\"prop\", <x><y/></x>))) {while(() && 0){(*); }let (__proto__, __iterator__ = true) { return 1e+81; } } else {yield;export *; }");
tryItOut("while((delete false.__lookupGetter__(\"prop\")) && 0){{const __noSuchMethod__, constructor;(this); }\flet __proto__ = 1e+81; }");
tryItOut("throw __proto__;var __proto__, __iterator__;");
tryItOut("with({}) { try { <x><y/></x> } catch(__iterator__ if <x><y/></x>) { yield; } catch(__iterator__) { {} }  { yield; } ");
tryItOut("with((({__noSuchMethod__: <x/>}))(<x/> <<= window, 3.141592653589793).@foo){return;({}).__lookupGetter__ }\nthrow StopIteration;");
tryItOut("if(false <= (({prototype: this += <x><y/></x>.__proto__ }))) { if ((new (<x><y/></x>)())) switch(-0) { case 5: break; case true: yield;case 3.141592653589793: case 2:  }} else {return <><bbb xmlns=\"*\"><x><y/></x>yyy</bbb></>;; }");
tryItOut("gc()");
tryItOut("L: {yield <x/>; }__count__ = __proto__;");
tryItOut("L: { }");
tryItOut("/*for..in*/M:for(const prototype in <x><y/></x>) export __proto__\n");
tryItOut("/*infloop*/while(1.3)throw <x/>;");
tryItOut("/*for..in*/M:for(__iterator__ in ((__noSuchMethod__-=({a2:z2}))(prototype.__noSuchMethod__)))");
tryItOut("/*infloop*/L:while(<x><y/></x>\n.*){L: {gc()return  '' ; } }");
tryItOut("{Math.sin/*infloop*/while(<><x><y/></x></>){gc()export constructor; } }");
tryItOut("/*infloop*/for((((p={}, (p.z =  \"\" )())).throw(*::*)); (( '' .__defineGetter__(\"constructor\", (function () { yield *::* } ).apply)).propertyIsEnumerable(\"__iterator__\")); ) {return *::*; }");
tryItOut("/*for..in*/for(const prop =  ''  in null) {<><x><y/></x></>;{}; }");
tryItOut("if(let (__parent__ =  /x/ , __noSuchMethod__) <x/> === (({__noSuchMethod__: #1#,  get prototype __count__ (__parent__) { export *; }  }))) {yield <x><y/></x>;export __noSuchMethod__; } else  if ((this\n)) (1 for (x in []))");
tryItOut("continue L;");
tryItOut("do {/*infloop*/for(var ({ function::__proto__: __proto__ }) = (__noSuchMethod__\n); [<x/>]; (<><x><y/></x></> return ( \"\"  @ (function ([y]) { })()); >= true)) var __proto__, __iterator__ = <x><y/></x>;yield; } while((yield <x><y/></*\n*//x>.valueOf(\"number\")) && 0);");
tryItOut("/*infloop*/do /*infloop*/for(*::* ? [[1]] : #1#; window(window, window);  '' .hasOwnProperty(\"prototype\")) continue M; while(<x><y/></x> - <><x><y/></x></>);");
tryItOut("do /*infloop*/for(var __parent__; \r(__proto__.yoyo(undefined).valueOf(\"number\")); constructor) __iterator__; while((({ __noSuchMethod__: [], prototype: [__count__, prototype] }) = ((<x><y/></x>.prototype) ? this : 1e4.eval(constructor))) && 0);");
tryItOut("x::__parent__ = __noSuchMethod__ = __proto__, constructor = -0;");
tryItOut("{{} }");
tryItOut("yield __proto__;");
tryItOut("/*infloop*/for(const __noSuchMethod__; <y><z/></y>; <x><y/></x>) {return;yield; }");
tryItOut("\n");
tryItOut("L:with(__proto__){let __count__ = [,]; }");
tryItOut("if((prop =  \"\"  , {})((Math.sin)(<><x><y/></x></> | __noSuchMethod__.prototype,  /x/ ))) { if (this.__defineGetter__(\"__noSuchMethod__\", eval).propertyIsEnumerable(\"__noSuchMethod__\")) try { break ; } finally { var __count__, __count__ = <><x><y/></x></>//h\n; } } else /*infloop*/for(__proto__; [,,z1]; <><x><y/></x></>) {yield this; }\nreturn window;");
tryItOut("for(let y in [5,6,7,8]) throw __noSuchMethod__;");
tryItOut("do {{}{} } while(((p={}, (p.z =  \"\" )()).__lookupGetter__(\"constructor\")) && 0);");
tryItOut("return ({ __count__: __noSuchMethod__ });");
tryItOut("/*for..in*/for(let prop = <zzz>prop</zzz> in <><x><y/></x></>) {{export __iterator__; }yield  \"\" ; }");
tryItOut("/*for..in*/for(var prop((-1)) in (((return undefined))(new (@foo.isPrototypeOf(<x><y/></x>))((<x/> - <x/>), <x><y/></x>)))){return *;/*for..in*/M:for(const __noSuchMethod__ = -[z1] in <x><y/></x>) {/*infloop*/L:for(undefined; <x><y/></x>; false) {var X, prop = undefined;export *; } } }");
tryItOut("do export *; while(((__proto__.hasOwnProperty(\"__parent__\"))) && 0);");
tryItOut("/*infloop*/do continue M\t; while(yield ([function(id) { return id } for each (__count__ in <x><y/></x>)]));");
tryItOut("/*infloop*/for(let prototype; (__proto__.__parent__ getter= [1,2,3,4].map); prop = window) throw  \"\" ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let getter in @foo) {{__iterator__ = ({}); }export __proto__; }");
tryItOut("/*for..in*/for(var __parent__ in ((<x/>)(true))){yield;return {}//h\n; }");
tryItOut("with({__proto__: @foo}){let prop = <><x><y/></x></>; }");
tryItOut("/*infloop*/for(let __parent__ = eval(\"__proto__: __proto__\", <x/>); eval(\"(*::*);\", -0); <x><y/\t></x>., __noSuchMethod__ = <y><z/></y>) export *\n{}");
tryItOut("/*for..in*/for(let undefined = (gc(eval(\"constructor = <><x><y/></x></>\", <x><y/></x>.__parent__), [ '' ].sort((<x><y/></x>).watch) >= (-1 ? window : <x/>))) in new (\f({__count__: <x><y/></x>}) |= *::* = window)([return].some((Math.pow).apply), ({__parent__:  /x/g  }))) {const ({ __iterator__: (Math.pow\t).call(__iterator__, ): __iterator__, prop: prop }) = new Function(<x><y/></x>, <y><z/></y>), prototype = [1]; }");
tryItOut("/*infloop*/while(this += /*<x><y/></x> ? --((p={}, (p.z = constructor = __parent__)())) != <x><y/></x>.(1e+81) ? (__count__.__noSuchMethod__ setter= ({}).__lookupGetter__) : #0=this : prototype)yield *;");
tryItOut("yield [11,12,13,14].sort;");
tryItOut("/*for..in*/L:for([__count__, prop] = (new [1,2,3,4].slice()) .@ ({__noSuchMethod__: @foo}) in <x><y/></x>) {yield; }");
tryItOut("if(null) continue M; else  if (<x><y/></x>) {export *; } else yield;");
tryItOut("if(yield *::*) if((__proto__ = <x><y/></x>)) break L; else  if (__parent__+=@foo) break L; else  if ((new (({ prop: constructor }) = ({ prototype\t: __parent__ }))(<xxx {__iterator__={//h\n}/><zzz>__iterator__.eval(<x><y/></x>)</zzz>yyy))) {/*infloop*/do {{} } while(this); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(prop in  '' ) gc()");
tryItOut("try { try { with({}) { with({}) let(prop) ((function(){let __iterator__;})()); }  } finally { with({}) for(let y in [5,6,7,8]) let(__parent__ = true, __noSuchMethod__ = 0x99) ((function(){[[]]})()); }  } catch(({ constructor: __proto__ })) { constructor = prop; } finally { yield <><x><y/></x></> ? <><x><y/></x></> : <x/>; } ");
tryItOut("export *;");
tryItOut("/*for..in*/for(let __parent__ = prototype in prop getter: *::*) return");
tryItOut("let (__count__) { /*for..in*/for(var [function::__parent__, constructor] = 0.1 in (function ([y]) { })()) yield window; }");
tryItOut("while(((Iterator())) && 0){M:do {;((1 for (x in []))).apply } while((<x/>) && 0);__proto__ }");
tryItOut("if(window) {return <x/>;{} } else  if (__count__) function ([y]) { };");
tryItOut("L:if(@foo += function ([y]) { }) return; else  if (({__noSuchMethod__: const prop = __proto__ =  typeof , prototype;})) {with({constructor:  /x/ })return;return <><x><y/></x></>; } else {while((033) && 0){continue L;{} } }/*for..in*/for(const __count__ in ((function (constructor, prop)window)(<><x><y/></x></>)))__iterator__;");
tryItOut("__count__, __noSuchMethod__;/*for..in*/M:for(let <><x><y/></x></>.__proto__ in ((/a/gi)((each.(false)))))");
tryItOut("let(__parent__ = prototype *= window) ((function(){try { return; } catch(__proto__ if (function(){})()) { continue M; } finally { const __parent__, function::constructor =  \"\" ; } })());");
tryItOut("if(<y><z/></y>) {<></>;throw this; }");
tryItOut("/*for..in*/for(const __count__.prototype = <y><z/></y> in 1e-81) if( /* Comment */this.__defineGetter__(\"__noSuchMethod__\",  '' )) {break M;return <x/>; } else  if (__iterator__ ? this : <><x><y/></x></>) {function(q) { return q; }return; } else throw [,,];");
tryItOut("/*infloop*/do gc()\n while(((></> if (this)))(this.__defineGetter__(\"__proto__\", (1 for (x in []))))prop: eval(\"throw function(id) { return id };\", 1e81));");
tryItOut("__count__ = *, __noSuchMethod__;");
tryItOut("if(({__noSuchMethod__: (0 != <y><z/></y>), __iterator__ setter: @foo })) { if ((~((({ get __proto__ constructor () { gc() } , __proto__ getter: (new Function(\"/*for..in*/M:for(constructor in (-1)) {throw this; }\")) })).yoyo(Function(<><x><y/></x></>,  /x/ ))))) {/*for..in*/for(var prototype in ((gc)((({}).hasOwnProperty))))yield @foo;with({__parent__: window instanceof const __parent__ = undefined, delete;})gc() }} else /*for..in*/for([__iterator__, ({ __iterator__: __iterator__, prop: __proto__ })] = new (@foo)(.2, <y><z/></y>) in *) { }");
tryItOut("/*infloop*/for(var ({ prop: [, , __noSuchMethod__], __count__: __proto__ }) = (uneval(__proto__ = <x><y/></x>)); [11,12,13,14].map; (__noSuchMethod__ =  /x/ )) {const prototype = prototype, prop = *; }");
tryItOut("{}\n({}).__lookupGetter__");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype['__proto__'] in [z1,,]) yield;;");
tryItOut("switch(window * ( /x/g .throw(true)\n ^= let)) { case 6: if((<x><y/></x>())) { if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {/*infloop*/for(const __parent__ = __iterator__; [1]; this) {{}var __proto__, prop; } } else {(undefined); }}break; default: /*for..in*/for(prototype = <><y><z/></y></> in []) {export *;yield null; }case 5: __count__break; return;break; case __count__ = (export *): break; case 6: (<><x><y/></x></>);break;  }");
tryItOut("<><x><y/></x></>;");
tryItOut("(@foo)");
tryItOut("M:if(__parent__.__iterator__) {prototype = <y><z/></y>; } else \n{let __count__ = constructor;(this); }");
tryItOut("do {export *; } while((undefined) && 0)\n");
tryItOut("this.zzz.zzz;");
tryItOut("L:if((delete <><x><y/></x></> %= 3.hasOwnProperty(\"prototype\")).call((uneval(@foo)), new window(), <><x><y/></x></>.propertyIsEnumerable(\"prototype\").__defineSetter__(\"constructor\", ({}).__lookupGetter__))) {let __count__ = <y><z/></y>;with({__proto__: <><x><y/></x></>}){return constructor; } } else  if ((--[(++1e-81)][#0=[<><x><y/></x></>]])) {M:do {continue M; } while((@foo) && 0);return; } else {for(let y in [5,6,7,8]) throw <x><y/></x>; }");
tryItOut("L: {while((([1]).watch(<><y><z/></y></>)) && 0)(this);yield <y><z/></y>; }");
tryItOut("{gc() }");
tryItOut(";");
tryItOut("if((( !== __noSuchMethod__.@*).unwatch(\"constructor\"))) {for(let y in []);return <><{__count__}><employee id=\"1\"><name>Joe</name><age>20</age></employee> </{__count__}></>; }");
tryItOut("/*infloop*/do export __parent__; while([11,12,13,14].some)");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("if(( /* Comment */*)) ; else return;");
tryItOut("1.3\n");
tryItOut("/*infloop*/while(<><x><y/></x></>)var __proto__ = #1=[#1#];");
tryItOut("gc()\n/*infloop*/for(this; <x><y/></x>; <y><z/></y>) {gc() }\n");
tryItOut("with({}) <><x><y/></x></>;");
tryItOut("let (__noSuchMethod__, ({ __iterator__: [[__iterator__, , , , [, ]], , ({ __parent__: constructor getter: Function }), ], prototype: constructor })) { if(--5.0000000000000000000000) ; }");
tryItOut("throw prototype;");
tryItOut("if(( /x/ .__defineSetter__(\"prop\", false))) throw <x><y/></x>; else  if ((yield [1]())) export *; else  set __proto__ prototype (__parent__) { yield false } ");
tryItOut("function ()0.1\ngc()let __proto__, prop;");
tryItOut("/*infloop*/while(new (<x><y/></x>).watch(window, <y><z/></y>\f))if(<x/>) {return <x/>;prototype, __parent__ = #3={a:#3#}; } else {([1,,]);export *; }");
tryItOut("([z1,,]);\n{}\n");
tryItOut("throw <><x><y/></x></>;");
tryItOut("if((new (eval)(prototype = <x><y/></x>) ? ~Function : (0 ? <><x><y/></x></> : constructor .@ (p={}, (p.z =  '' )()) !== __proto__ = [1]))) let constructor, prop;\nwhile((__parent__) && 0){throw <x/>;\f }\n else  if (#1=(prop.__count__)) yield; else if((<x/> + #1=[#1#])) {} else  if (<><x><y/></x></>) //h\n{yield undefined; }");
tryItOut("{}");
tryItOut("throw constructor;");
tryItOut("for(let y in []);");
tryItOut("if((__count__.__proto__+=(+this--))) { if ((((uneval( \"\" ))) for each (prototype in (({}).hasOwnProperty).call(<><x><y/></x><//>.throw(<x/>), true , window)))) L:with(__noSuchMethod__ = (<y><z/></y>--)){var prototype; }} else {L:if(__count__ = prop) { if ((.isPrototypeOf((-1))) yield;} else {var __proto__, constructor; }gc() }");
tryItOut("__proto__ = ({ __parent__: __count__ });");
tryItOut("/*infloop*/do {/*infloop*/M:do switch( /x/ ) { case 2: break; false;case 6: case 4: const __noSuchMethod__ = <x><y/></x>;break; case 3: case 7: export *;break; let __iterator__ = #1#, __count__;break;  } while((1.3 = <x/>)); } while(__proto__);");
tryItOut("/*infloop*/for(undefined >= <x><y/></x>.(false)(prototype = constructor); eval(\"if(1e4) {; /x/ ; }\", <><x><y/></x></>); ({prop: ({ __parent__: ({ prototype: ({ prop: prop, __count__: __iterator__ }), prop: prop }), prototype: __iterator__ }) = [[]]})) {return [*::*].filter(({}).hasOwnProperty)();if((Number(\f(function  prop (constructor) { yield null } )(true), new  __proto__: <y><z/></y> <y><z/></y>(window)))) /*infloop*/do {__proto__throw prototype; } while(@foo); else  if (null.propertyIsEnumerable(\"__proto__\")) {continue M;throw null; } else  set prop(try { (<x/>); } finally {  } ) { (__noSuchMethod__); }  }");
tryItOut("/*for..in*/for(var constructor = (({ __iterator__: prop }) = <x><y/></x>) in <><x><y/></x></>) (<x><y/></x>);");
tryItOut("/*infloop*/for((__iterator__ if (@foo)); __count__ = []; window) {break L;return; }\n/*for..in*/for(let ['prototype'] in ) {prop = __proto__; }");
tryItOut("<x><y/></x>; const __count__;");
tryItOut("/*infloop*/while( \"\" )<x><y/></x>;");
