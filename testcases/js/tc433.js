tryItOut("/*infloop*/M:for([(function (__proto__) { return [] } )((function(id) { return id })()) if (Array())]; new (window)(*::*, <><x><y/></x></>) >>>=__noSuchMethod__ = 1e4.unwatch(\"__proto__\"); new void <x/>(([<x><y/></x>].filter([1,2,3,4].map)),  /x/g )) {/*for..in*/for(const __count__ =  \"\"  in window) this; }");
tryItOut("/*infloop*/for(var ({ prototype: __count__, __noSuchMethod__: [, , __noSuchMethod__, ] }) = constructor.__iterator__ = eval(\"export __count__;\", <x/>); new (delete window.__lookupGetter__(\"__parent__\"))(); __noSuchMethod__ = [function(id) { return id }].some(eval)) {break L; }");
tryItOut("let(__count__ = prop >= <y><z/></y>) ((function(){throw __proto__;})());");
tryItOut("M:switch((new <x><y/></x>()\n)) { default: break; break L\f;break; break; switch(@foo) { case <y><z/></y>: break;  }throw 033;break; case 9: function () { yield @foo } break; case 8: return <><x><y/></x></>;case 5: while((0.1) && 0)gcbreak; case 4: /*for..in*/for(let prototype = <x/> in <><x><y/></x></>) break;  }");
tryItOut("/*infloop*/M:do M:switch((({__iterator__ getter: ((prototype).__defineSetter__).call })) % <xxx>{__count__}</xxx>.( '' )) { default: /*infloop*/L:do yield undefined; while(<><x><y/></x></>); } while( \"\" .watch(\"prototype\", (<x><y/></x>).watch));");
tryItOut("{if((__proto__ =  /x/ )) { if ((__parent__ = false)[delete  \"\" ].prop = (null ^= false)) gc() else {return; }}if(3/0 > __iterator__) {;export *; } }");
tryItOut("/*infloop*/while((new (function  prototype (function::__count__) { throw  get constructor(__count__)__iterator__+=[{}].sort(({}).hasOwnProperty); } )()))let (({ __iterator__: \t__proto__ }) = , prototype) { if(<y><z/></y>) return @foo; else {(<><x><y/></x></>);gc() } }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:for(let [, constructor] = ( if (({} >>> constructor)).hasOwnProperty(\"__noSuchMethod__\")); __noSuchMethod__ ? __count__.prop = <>null</>[<x/>.__parent__ = [,,z1]] : *::* <<= *::* <= (__iterator__, __parent__); []) export constructor;");
tryItOut("/*infloop*/for(({ constructor: [], prop: ({ __noSuchMethod__: function::delete, constructor: constructor }) }) = ([11,12,13,14].map); (<x/>\n || 5.0000000000000000000000.unwatch(\"__parent__\")); __iterator__) let __proto__ = function ([y]) { }, __proto__;");
tryItOut("/*infloop*/L:for(this.__defineSetter__(\"__noSuchMethod__\", Math.sin); [[1]] ? undefined : ( \"\"  instanceof  \"\" ); (({ prototype: ({ prop: __count__ }) }) = constructor.__count__ = __proto__ =  /x/g )) {var prototype =  /x/ ;let (constructor = <><x><y/></x></>, __parent__ = 1.3) { {export __proto__; } } }");
tryItOut("if((this.__defineGetter__(\"__iterator__\", prop))) { if ((this.zzz.zzz.hasOwnProperty(\"__noSuchMethod__\"))) eval} else let __count__ = __noSuchMethod__, __count__;");
tryItOut("/*for..in*/for(const constructor['prop'] in (('haha'.split)((window ? <x/> : __proto__)))){break \f;{} }");
tryItOut("do {{if(<x><y/></x>) {var constructor = true, prototype; } else  if (this) {export *; }return <><x><y/></x></>; }if(*::*) {return; } } while((@foo) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L:\f for  each(var prop in eval(\"yield;\",  '' )) {/*infloop*/while(this)switch(<><x><y/></x></>) { case 9: break; default: case __noSuchMethod__: case 5: case 8: break;  }\t }");
tryItOut("/*for..in*/for(let x::prototype(0x99) in ((gc)(#2=({set: <x><y/></x>})))){;(@foo); }");
tryItOut("/*for..in*/for(var __proto__(__proto__) in <y><z/></y>.__lookupSetter__(\"__iterator__\")) {/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = ({ __noSuchMethod__: [], __iterator__: ({ __count__: __count__, prototype: prototype }) }) = <><x><y/></x></> .@  \"\" .valueOf(\"number\") in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) gc()");
tryItOut("gc()");
tryItOut("/*infloop*/for(__parent__ = <zzz>let (__iterator__ = <><x><y/></x></>, __noSuchMethod__) this</zzz>.(__count__.__count__ setter= function(q) { return q; }); __noSuchMethod__.__noSuchMethod__\f \tsetter= function  __proto__ (constructor, __count__) { (constructor); }  ^= true; <><x><y/></x></> ? <x/> : null) return undefined;");
tryItOut("yield undefined;\nvar prop = true, __count__;\n const prop;");
tryItOut("/*infloop*/while(((<x/>)[3/0]) ? this == @foo : 'fafafa'.replace(/a/g, eval) ? prop : @foo + 0.1){; }");
tryItOut("\r{export *;prop }\n");
tryItOut("return;");
tryItOut("({ __noSuchMethod__: __count__ }) = constructor;");
tryItOut("let ([__noSuchMethod__, __noSuchMethod__, , prop, ] = <x><y/></x> + __proto__) { return *::*; }");
tryItOut("M:if((new Function).call(__parent__ = <><x><y/></x></>.prop, ((uneval(<x/>))), constructor = <><x><y/></x></>)) return; else  if (()) export __parent__;");
tryItOut("return [3/0];");
tryItOut("{gc()export prop; }");
tryItOut("return false;");
tryItOut("throw *;");
tryItOut("switch(1e-81) { case (gc).call(__count__ = __count__, <><x><y/></x></>.__lookupSetter__(\"__count__\")): break ;case (constructor = __count__.unwatch(\"__iterator__\")): break;  }");
tryItOut("with({__iterator__: (__iterator__.(<><x><y/></x></>))}){var __proto__; }");
tryItOut("throw this");
tryItOut("while(([ /x/g ]) && 0){export *;let prop = ({}); }");
tryItOut("if(let (constructor) @foo.isPrototypeOf(constructor =  /x/g ) &= window) {{} } else  if (((prop = window).*)) {do return *; while((1e81) && 0);yield this;\t }");
tryItOut("L:do {export *; } while((<x/>.prototype = window) && 0);");
tryItOut("if(1.2e3.@*) const __noSuchMethod__ = <y><z/></y>, __parent__;");
tryItOut("{L:if(<x><y/></x>) yield prototype; else  if (prop) {export __parent__; } else {gc() } }");
tryItOut("switch(#3={a:#3#}) { default: break; [];break; case 4: ;break;  }");
tryItOut("throw __parent__;\nswitch(this) { default: break; case 5: yield;'haha'.splityield;throw -0;case  '' :  }\n");
tryItOut("throw __iterator__;\nthrow  set prototype constructor (prop) { return this } ;\n");
tryItOut("return;");
tryItOut("throw *");
tryItOut("M:if((((prototype.__count__))(<y><z/></y> instanceof  '' , __count__.constructor))) { if ((prototype: ([,].__lookupGetter__(\"__proto__\")).unwatch(\"__proto__\")[(this.__lookupGetter__(\"__proto__\"))])) /*for..in*/for(var prototype = try { var constructor = function(id) { return id }; } catch(__iterator__ if *::*) { var __proto__ = <><x><y/></x></>; } catch(prototype) { yield this; }  in (p={}, (p.z = __iterator__: <><x><y/></x></>)())) {return;const prop, __proto__; }} else {/*for..in*/L:for(const prototype in ((({}).__lookupGetter__)(prototype))){{}yield; } const __count__; }");
tryItOut("if(<y><z/></y>) { if (true) {let __iterator__ = <y><z/></y>;var constructor, __proto__; } else yield;}");
tryItOut("let(prototype = __iterator__ = prop, function::window(prop - new (prop)(<y><z/></y>, <x><y/></x>)) = (prototype :: (yield __parent__ = <y><z/></y>))) ((function(){return eval(\"RangeError().unwatch(\\\"prototype\\\")\", (*.throw(<x><y/></x>)));})());");
tryItOut("/*infloop*/M:for(new (<x><y/></x>)(<x><y/></x>, this); ((4..eval(this)) instanceof -3/0.watch(\"prop\", (__count__).watch)); __parent__) gc()");
tryItOut("do yield; while((-*) && 0);");
tryItOut("throw prototype;");
tryItOut("if(__proto__ = this) (constructor)");
tryItOut("{const prop; }");
tryItOut("do throw  \"\" ; while((0x99) && 0);\f const constructor\n/*for..in*/for([constructor, __noSuchMethod__] = ({}) for (033.__lookupSetter__(\"__count__\"), <><x><y/></x></> in  \"\" ) in *::*) null;");
tryItOut("if(/) return; else export __parent__; const prop;");
tryItOut("let ([, [, , , , __proto__], [__parent__, ({ __noSuchMethod__: ({ #1#: ({ prop: __proto__, prop: ({ prop: __parent__, __parent__: prop }) }), __proto__: prop }), __iterator__: ({ __noSuchMethod__: [__noSuchMethod__], __iterator__: ({ prop: [__iterator__, __noSuchMethod__, ],  /x/ : __count__ }) }) })], []]) { {} const __noSuchMethod__; }");
tryItOut("if(Object()) break ; else  if (true) {throw <x><y/></x>; } else {gc(__noSuchMethod__); }");
tryItOut(";\nif(<x><y/></x>['__count__'] = [<x><y/></x>]) /*for..in*/for(let [__proto__, __iterator__] = * in []) function(q) { return q; }\n");
tryItOut("/*infloop*/do break ; while((__proto__ = *::*) , __parent__.isPrototypeOf(({a2:z2})));");
tryItOut("/*infloop*/for(({ prop: __parent__ }) = [11,12,13,14].some; constructor = [,]; (<><x><y/></x></> @ <y><z/></y>)) {throw this;let __parent__; }");
tryItOut("/*infloop*/do __parent__, __noSuchMethod__ =  '' ; while(({ __proto__: __proto__ })\f = (undefined >>= <x><y/></x>));");
tryItOut("switch(Error((033 :: <x><y/></x>.unwatch(\"prototype\"))) &= this.watch(\"function::__proto__\", (new Function(\"const __count__ = this, __proto__ =  /x/g ;\")))) { default: switch(prototype\r = (<x><y/></x> for (constructor in <x/>))) { default: /*for..in*/L:for(const __proto__ in <><x><y/></x></>) {;switch(null) { case ({a1:1}): return; } }break; case (#1=[\nundefined]()): case  /* Comment */<x><y/></x>: break;  }break;  }");
tryItOut("if((<x/> .@x:: (prototype for (constructor in [z1])))) { if ((({}).yoyo(<>//h\n<x><y/></x></>))) [[]];} else yield <x><y/></x>;");
tryItOut("return;");
tryItOut("gc()");
tryItOut("let (__parent__ = 3.141592653589793.__count__, constructor = <x><y/></x> - __count__) { {constructor =  '' ; } }");
tryItOut("switch(([-3/0])) { case 9: break; case <y><z/></y>: break; prop, __iterator__ }");
tryItOut("if((Object((eval(window))))) let __proto__; else  if (this.zzz.zzz) var prototype, __count__ = <x><y/></x>;");
tryItOut("with(__iterator__)yield;");
tryItOut("do return; while((([window << *])) && 0);");
tryItOut("var __iterator__ = (function ([y]) { })();");
tryItOut("/*for..in*/M:for(var function::__parent__ = ( .((yield -1))) in (p={}, (p.z = ([,,] .@ <x><y/></x>))())) \fvar __count__ = -0;");
tryItOut("M:if(yield <y><z/></y>) return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__ in (new (<><x><y/></x></>)(__proto__, <x><y/></x>))(, *)()) {/*for..in*/for(<><x><y/></x></> in  \"\" ) {export *;export __count__; }return <x><y/></x>; }");
tryItOut("L:switch((RangeError( /* Comment */constructor.<ccc:ddd><x><y/></x>yyy</ccc:ddd>, ((*::*)())))) { case 6: break;  }");
tryItOut("/*infloop*/L:do export prototype; while(4.);");
tryItOut("{switch(@foo) { default: *;case 5: break; ;case  /x/g : break;  } }");
tryItOut("return\n{return *::*; }(<><x><y/></x></>\f);");
tryItOut("L: {throw __noSuchMethod__; }");
tryItOut("if(prototype || -0) if(( /x/ .__defineGetter__(\"__count__\", gc))) { if ((new function  __parent__ () { export *; } (window,  \"\" )).watch()) constructor, __parent__ = <x><y/></x>; else {__parent__ =  '' ; }}");
tryItOut("do {gc() } while((false) && 0);");
tryItOut("if((!(function  constructor (__parent__, __proto__) { yield __parent__; } )())) { if (new ((function ([y]) { })())(<><x>\f<y/></x></>, [,,])) gc()} else {yield; }");
tryItOut("/*infloop*/while(__iterator__)/*infloop*/({ constructor: __proto__ })");
tryItOut("if(#0=[(({__iterator__: [,,] }))]) getter else {return; }");
tryItOut("if(<>yyy</>.(false)) { if (prop.__lookupGetter__(\"__noSuchMethod__\")) /*for..in*//* nogeckoex bug 349964 */ for  each(var prop in prototype) {(<><x><y/></x></>); }} else {{}export *; }");
tryItOut("if((1.2e3 for (null.__count__ in <><x><y/></x></>) for (__noSuchMethod__ in true))) { if (//h\nnew (Function)(window ? <><x><y/></x></> : <><x><y/></x></>)) {(undefined); } else continue M;}");
tryItOut(" super ");
tryItOut("do { }\f while(((new new Function(((1.3)[<x/>]).__lookupSetter__(\"__proto__\"), __iterator__ = *::*))) && 0);");
tryItOut("/*infloop*/L:do {{} } while(__proto__.constructor = new undefined());");
tryItOut("/*infloop*/for(__proto__; <></>; null) {throw <x><y/></x>;( /x/g ); }");
tryItOut("L: {export *;window;\nyield;\n }");
tryItOut("M:with((new (<><x><y/></x></>)(true, <><x><y/></x></>)) .@x:: <y><z/></y>)/*infloop*/for(var __iterator__ = __count__;  /x/ ; <y><z/></y>) {yield ({}); }");
tryItOut(";\nthrow function(id) { return id };\n");
tryItOut("/*for..in*/M:for(var __count__ in (-1)) throw <><x><y/></x></>;");
tryItOut("gc()");
tryItOut("switch((~new (eval(\"let prototype = prototype;\",  /x/g ))(~(RegExp(prototype, prop)), (let (constructor) -1 >>>= '' )))) { case 3: switch(__proto__) { case null: gc() }break; default: /*infloop*/M:while([[]])yield __proto__;break;  }");
tryItOut("let (__count__) { while((1e-81) && 0)var prop; }");
tryItOut("([[]]);");
tryItOut("if(__proto__) {return arguments; } else  if (<x><y/></x>) {{} } else break M;");
tryItOut("<{__parent__}><!--yy--></{__parent__}>");
tryItOut("L: {{}yield  /x/ ; }");
tryItOut("{yield __count__; }\n;");
tryItOut("/*infloop*/while(undefined)yield;");
tryItOut("return;");
tryItOut("switch([([prototype for (__noSuchMethod__ in <y><z/></y>)])].__lookupGetter__(\"__proto__\")) { default: case (*.@foo) =  /x/g : throw undefined.yoyo(<><x><y/></x></>//h\n);break; var constructor, prototype;case __iterator__.prop.prototype: break; case 7: {return; } }\n");
tryItOut("L: __count__, constructor;");
tryItOut("if(*) { if (eval(\"yield (function ([y]) { })();\", null)) {gc() }} else {(undefined);return; } const constructor\n/*infloop*/for(const __proto__; ; __iterator__) try { return (yield *); } catch(prop if (function(){;})()) { ; } finally { with({}) export *; } ");
tryItOut("/*infloop*/L:for(let ({ __iterator__: __parent__, __parent__: ({ constructor: prop }) }) =  /x/g  -= <><x><y/></x></>; (true.__defineGetter__(\"prototype\",  \"\" )); constructor((({}).__lookupGetter__)(__iterator__, function ([y]) { }))) {export *;yield; }\nif(prop = 0x99) { if ([*::*].sort(/a/gi)) {export prototype;export *; }} else {*::*;yield; }");
tryItOut("({  { return 5.0000000000000000000000 } : constructor, __parent__: function::3/0 }) = <x><y/></x>.(0x99), __parent__;\nM:if((eval(\"yield;\",  /x/ ))) { if (yield-=null) {let __count__, constructor; }} else {return  '' ; }\n");
tryItOut("export *;var __parent__;");
tryItOut("try { (<x><y/></x>\f); } catch(constructor) { __proto__ = window, constructor =  '' ; } ");
tryItOut("/*for..in*/for(const __iterator__ in ((Math.sin)(prop.valueOf(\"number\") >>= [this if (__iterator__)]))){each getter: ({}).hasOwnProperty }");
tryItOut("/*infloop*/while([, __noSuchMethod__, , __noSuchMethod__].__proto__ setter= eval){gc() }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in *::*) var constructor = <x/>;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((((Function()) instanceof __iterator__.isPrototypeOf(__noSuchMethod__)))((constructor.__count__ getter= ( '' \n).__defineSetter__).__iterator__))){with( /x/g )return; }");
tryItOut("/*infloop*/for(const ({ __count__: constructor.prototype, __parent__: ({ prototype: , __count__: constructor }) }) = (uneval(prototype.(*))); this.__defineGetter__(\"function::prop\", ({}).hasOwnProperty); default: export *;case 9: /*for..in*/M:for(const __proto__.constructor in (((<employee id=\"1\"><name>Joe</name><age>20</age></employee>).__defineSetter__)([,,z1].*))){const __parent__, constructor = 1.3;const prop, __parent__ = <><x><y/></\rx></>; }case 4: {/*for..in*/for(let [__parent__, __parent__] = eval(\"__count__\", this & constructor) in <><x><y/></x></>) {prototype, __parent__;(<><x><y/></x></>); } }break; case 9: if(((new Function)( \"\"  == <x><y/></x>))\n) { if () {let (__count__, prototype) { var prop = undefined; } } else yield #3={a:#3#};}case 8: case 7: return;if( \"\" ) {return <x/>; } else {let __noSuchMethod__, prototype; }break; export __iterator__;case (__noSuchMethod__%=__noSuchMethod__): ) yield");
tryItOut("export *; const __parent__;");
tryItOut("/*infloop*/while(new (function  __proto__ (__iterator__, prop) { return __iterator__ } )(<x/>)){(*).watch }");
tryItOut("eval");
tryItOut("/*for..in*/for(const __parent__ = ((true)[1e-81]) in <x><y/></x> |  /x/g .__defineGetter__(\"__count__\", 'haha'.split)) {(*); }");
tryItOut("while((__noSuchMethod__ = @foo.watch(\"__iterator__\", (1 for (x in []))) >> prop =  '' ) && 0){{} }");
tryItOut("/*infloop*/for(const ({ __noSuchMethod__: __count__, constructor:  /x/  }) = (p={}, (p.z = (eval)(5.0000000000000000000000, <y><z/></y>)(__count__, #0=({__noSuchMethod__:  '' })))()); Math.pow.prop\n; (uneval([[1]] | [z1]))) let (__proto__, throw <><x><y/></x></>;) { ([[]]).__defineSetter__ }");
tryItOut("throw  \"\" ;window;");
tryItOut("with({__count__: <x><y/></x>}){const __iterator__, __noSuchMethod__ = 3/0;gc() } const __proto__;");
tryItOut("do {let prototype = [,]; } while((( \"\" .valueOf(\"number\")--)) && 0);");
tryItOut("{throw StopIteration;/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <y><z/></y>) break L; }");
tryItOut("if(({prototype: __count__ })) if(<x/> in <x><y/></x> in window++) constructor else  if (new @foo != *( '' )) {yield <x><y/></x>;-1\n/*infloop*/for(let x::constructor = *; <x><y/></x>; 1e-81) \fyield; } else {({}).__lookupGetter__{} }");
tryItOut("while((__count__.*::*['__parent__'] getter= (*::*()).watch) && 0){L: gc() }");
tryItOut("with(<y><z/></y>){export __parent__;const __noSuchMethod__, __count__ = <x/>; }");
tryItOut("export function::__count__; const __parent__;");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] =  ''  in null) (this);");
tryItOut("__count__ = __parent__;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in <xxx>{__proto__}</xxx>.(__parent__%=window)) (<x><y/></x>)\n/*for..in*/for(prototype in <x><y/></x>) {break ;yield; }");
tryItOut("if(#2=({__parent__:  \"\"  ? *::* : prop})) /*infloop*/M:while(constructor.__lookupSetter__(\"__proto__\"))\n else  if (constructor.isPrototypeOf(null)) ; else yield  /x/g ;\nyield;\n");
tryItOut("with({__count__: (({ prop: __noSuchMethod__ }) = try { <><x><y/></x></> } finally { let __proto__; } )}){{} }");
tryItOut("/*for..in*/for(window in ((null for each (function::__noSuchMethod__ in 5.0000000000000000000000))(({}) ? <><x><y/></x></> : 1.3.@*))){__proto__; }\nwith({__parent__: ( \"\" (5.0000000000000000000000, prototype))}){}\n");
tryItOut("export x::__iterator__\n const __noSuchMethod__;");
tryItOut("{}");
tryItOut("switch(this.*) { default: yield window;case 5: break; case ({constructor: this.__defineSetter__(\"__parent__\", new Function)}): /*infloop*/for(var __proto__; 1e-81; [1,,]) __noSuchMethod__, __count__;break; case 1.3: break; case this.zzz.zzz: yield <><x><y/></x></>;break;  }");
tryItOut("var __noSuchMethod__ = function ([y]) { }");
tryItOut("if((new (gc)())()) { if ( /x/ ) {;<x><y/></x>; } else (<x/>);}/*for..in*/M:for(const __count__ in (__count__.__parent__ getter= function  prop () { yield <x/> } )) throw eval(\"gc()\", <x/>);");
tryItOut("with({}) with({}) { with({}) return; } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in 1.3) break M;");
tryItOut("__iterator__ = delete;");
tryItOut("if(( /x/g .isPrototypeOf(<><x><y/></x></>))) { if ((prop) = x::prototype) let __parent__, constructor; else /*infloop*/do true; while(033);}");
tryItOut("let constructor = *, __noSuchMethod__ =  '' \n");
tryItOut("{continue ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((<y><z/></y>.__parent__) in .2) {var __noSuchMethod__ = <x><y/></x>, __noSuchMethod__; }");
tryItOut("/*infloop*/while(({__noSuchMethod__: undefined})){export constructor;; }");
tryItOut("do {} while(((({} for each (__count__ in  /x/ )))) && 0);");
tryItOut("if(<y><z/></y>) { if (<y><z/></y>) export *; else function  __noSuchMethod__ () { yield *::* } }");
tryItOut("throw prop;");
tryItOut("with({__iterator__: new (eval)()}){ }");
tryItOut("{this['constructor'], __noSuchMethod__; }");
tryItOut("/*infloop*/\ffor(window ?  /x/  : <><x><y/></x></>\n; <x/>; ((({}).__lookupGetter__).call(*, #3={a:#3#})constructor)) {return; }\n");
tryItOut("/*infloop*/for(prop; __noSuchMethod__; undefined) return <x><y/></x>;");
tryItOut("for(let y in [5,6,7,8]) yield (let (function::__proto__ =  '' , constructor) <x><y/></x>);");
tryItOut("\n");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = (-3/0)(<x/>).__defineSetter__(\"constructor\", gc) in  \"\" ) {return;<x><y/></x>; }");
tryItOut("L:do /*for..in*/for(prop = -3/0 in [,,]) {throw 1.3;throw  '' ; } while(((new @foo * 0/0())) && 0);");
tryItOut("/*infloop*/for((yield [15,16,17,18].map('haha'.split, __iterator__).@*); __proto__-=eval(\"undefined\",  \"\" ); (((__count__ if (window))) == this |= [[]])) let (constructor, __proto__ = <><x><y/></x></>.constructor = this) { /*infloop*/for(prop; <><x><y/></x></>; [z1,,]) {(<x><y/></*\n*//x>);{} } }");
tryItOut("L: {/*infloop*/do continue L; while(constructor = <x><y/></x>); }");
tryItOut("M:do throw @foo; while((033) && 0);");
tryItOut("L: M:with( \"\" ){<y><z/></y>; }");
tryItOut("/*infloop*/for([] = ([(false.yoyo(<y><z/></y>))]);  /x/g  < <x/>; [(new RegExp(3/0))].map((Math.pow).apply)) {<!--yy-->export *; const __proto__; }");
tryItOut("/*infloop*/M:for(let __parent__; ([11,12,13,14].filter); (-0).throw(<x/>)) {yield <><x><y/></x></>;; }");
tryItOut("/*infloop*/while(window)return this;");
tryItOut("throw __noSuchMethod__;");
tryItOut("");
tryItOut("<xxx>{__parent__}<\f/xxx>");
tryItOut("if(arguments) { if (window) ;} else {(undefined); }");
tryItOut("switch(( for each (__iterator__ in __count__) for (__count__ in @foo) for (__count__ in  '' ))) { default: break;  }");
tryItOut("prop, (<x><y/></x>)(this);3");
tryItOut("with( /x/ ){/*for..in*/for(let __iterator__ in ((Math.pow)(null))){var constructor; } }");
tryItOut("yield (this >>>=<><x><y/></x></>);");
tryItOut("/*infloop*/for(prototype = constructor = prototype.__defineSetter__(\"__iterator__\", function(q) { return q; }); __proto__ = -0; +false :: this.__defineSetter__(\"__iterator__\", <></>)) if(<>\n<x><y/></x></>) var __iterator__ = true;");
tryItOut("yield;");
tryItOut("/*for..in*/for(var prototype = ((__count__ = eval(\"<x><y/></x>\", <y><z/></y>)).__lookupSetter__(\"__noSuchMethod__\")) in  /* Comment */__iterator__ = <x/>) {break L;\rlet(constructor) { break ; }");
tryItOut("/*infloop*/while(new ((__parent__).call)())let __iterator__ = <x><y/></x>;");
tryItOut("M:do let (__count__, __iterator__ =  \"\" ) { export __parent__; } while((<x><y/></x>.__lookupSetter__(\"__proto__\") if (function(id) { return id })) && 0);throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in __iterator__) gc()");
tryItOut("return;");
tryItOut("if((<x><y/></x>.isPrototypeOf(this)).__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)) {if(constructor) yield *; else  if ((({__iterator__: undefined, __iterator__: __proto__ })).watch(\"__count__\", function () { throw <y><z/></y>; } )) (<><x><y/></x></>); else yield <x><y/></x>;\nthrow  \"\" \n } else {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ constructor: , function::__proto__: prototype }) in <x/>) do gc() while(((({ get __parent__() { {} }  }))) && 0);\nM:if(((function ([y]) { })()(__noSuchMethod__))) {<x><y/></x>; } else ;\n");
tryItOut("/*infloop*/for(const __iterator__ = @foo; this; <x><y/></x>) {continue L; }");
tryItOut("return;");
tryItOut("L: {if((Math.sin)(null)) yield; else  }");
tryItOut("/*for..in*/for(const [__iterator__, constructor] = ({ __iterator__: [] }) = <x><y/></x>.__parent__ = <y><z/></y> |= <><x><y/></x></> in ([<x><y/></x>])) if(__noSuchMethod__ = {}) (<><x><y/></x></>);");
tryItOut("if(<x><y/></x>) { if (*::*) {0.1; } else {yield;return; }}");
tryItOut("__parent__ = __parent__;/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in true) {return;yield <y><z/></y>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__ in (yield (prop.__defineSetter__(\"constructor\", <x/>)))) {export __proto__; }");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = [z1].eval( /x/g ) in eval(\"<><x><y/></x></>\", this)) yield prop\n");
tryItOut("M:if(([, ({ prop: ({ prop: prop, __proto__: __count__ }) })]) !== [,,].eval(*::*)) {__count__ =  '' ;/*infloop*/for(var prototype = <><x><y/></x></>; this; 0/0) yield; } else  if (((yield new Error(<> </>)))) export *; else {const constructor;/*infloop*/for(let __parent__; false; 3) return <x/>; }");
tryItOut("do  while(() && 0);");
tryItOut("/*for..in*/for(let (3.141592653589793 if ()).constructor in ((#1#.valueOf(\"number\")) >>>=__iterator__.__proto__(new (\tnew Function)(window)))) export *;");
tryItOut("{/*for..in*/for(let prop = null in <x/>) yield; }");
tryItOut("do {(<x><y/></x>); } while((<><x><y/></x></>) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in ((this.__defineSetter__(\"__parent__\", function(y) { yield y; export __parent__;; yield y; }).__lookupSetter__(\"__parent__\")) |= (this.__defineGetter__(\"prototype\", eval)))) /*infloop*/for(let __count__; (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(null.valueOf(\"number\") = (++-0))); undefined) {/*infloop*/do {export constructor; } while(__noSuchMethod__);<><x><y/></x></>; }");
tryItOut("let (constructor = *::*.__lookupSetter__(\"__parent__\"), ({ __proto__: ({ __noSuchMethod__: __count__, prototype: __iterator__ }), __proto__: [prototype, , prototype, , __noSuchMethod__] })) { throw ({__noSuchMethod__: __proto__}); }");
tryItOut("{export constructor;yield; }");
tryItOut("while((window) && 0){/*infloop*/for(const ({ __count__: [__proto__, prop, constructor, , ] }) = false.constructor = 0; yield window; prop.__parent__ setter= window .@x:: *::* % false) const \t__count__ = window; }");
tryItOut("/*infloop*/for(eval(\"return <x><y/></x>;\", false.watch(\"prototype\", /a/gi))\f; (function  prototype (prop, prop) \"\" )( \"\" , @foo) = <y><z/></y>.unwatch(\"set\").propertyIsEnumerable(\"__parent__\"); (\n(new new Function(__parent__)).*)) { }");
