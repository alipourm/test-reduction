tryItOut("with( \"\" )(@foo);");
tryItOut("/*for..in*/for(let __proto__.__iterator__ in (prototype.throw(<x><y/></x>))) with(__noSuchMethod__.propertyIsEnumerable(\"constructor\")){; }");
tryItOut("/*for..in*/L:for(var [prop, constructor] = @foo in this) {yield false;export *; }let __iterator__;");
tryItOut("let (({ __count__: ({ __proto__: __parent__ }), prototype: ({  { yield <x><y/></x> ^= 3.141592653589793.unwatch(\"prop\") } : prototype, prop: __count__ }) }) = var prop, __parent__, prototype) { /*for..in*/M:for(let __iterator__ = this.__defineGetter__(\"prototype\", function(y) { yield y; {}; yield y; }) in __iterator__) yield; }");
tryItOut("L:if((__iterator__.valueOf(\"number\").__lookupSetter__(\"prop\"))) { if ( \"\" ) continue ;} else {/*for..in*/for(const __count__ in [[1]]) {throw this;let __parent__ = {}, prototype; } }");
tryItOut(", __proto__;");
tryItOut("throw StopIteration;");
tryItOut("function::__noSuchMethod__");
tryItOut("/*for..in*/for(let __noSuchMethod__ in <x><y\f/></x>) {gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in ((uneval(<><x><y/></x></>)) for (prop in *::*) for each (__proto__ in 1.2e3))) {(*::*);export *; }");
tryItOut("let(__parent__, prototype = /a/gi) ((function(){throw constructor;})());");
tryItOut("if(<><bbb xmlns=\"<{__iterator__}></{__iterator__}>\">yyy</bbb></>.unwatch(\"__iterator__\")) (1 for (x in [])) else  if ((String())) let prototype;");
tryItOut("let ([prop, , constructor, prop, ] =  /x/g  -= *::*, __count__) { function  prop (__parent__)this }");
tryItOut("for(let y in [5,6,7,8]) ( '' )");
tryItOut("while((new RegExp(null, <><x><y/></x></>)) && 0){return;[, , , ] = prop; }");
tryItOut("yield;");
tryItOut("__parent__ = __noSuchMethod__; const __noSuchMethod__;");
tryItOut("/*infloop*/while(+<employee id=\"1\"><name>Joe</name><age>20</age></employee>)/*infloop*/M:for(var constructor; (( /x/g )[window--]); *::*.throw(true)) {gc() }");
tryItOut("while((false.__lookupSetter__(\"prototype\").__defineGetter__(\"__iterator__\", function(q) { return q; })) && 0)L:switch(continue ;) { \tdefault: case  /* Comment */<x><y/></x>: export *; }");
tryItOut("/*infloop*/for(var prototype; ;  /x/ .__noSuchMethod__) ;");
tryItOut("do {return <x><y/></x>; } while((new (1 for (x in []))(__iterator__, <><x><y/></x></>) for (__proto__.__iterator__ in window/*\n*/) if (window)) && 0);");
tryItOut("L:with((new [1,,](null, __proto__))){/*infloop*/M:for(({ constructor: prototype, __noSuchMethod__: prop }) = (<><x><y/></x></>.__defineGetter__(\"__parent__\", Function)); [[]]; (eval(\"@foo\", <x><y/></x>))) const prototype, prototype;/*for..in*/L:for(var __count__ = [ for each (__iterator__ in <x/>)] in <x><y/></x>) {/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__ in <x><y/></x>) {(__count__); } } }");
tryItOut("var prototype =  /x/g , __proto__;");
tryItOut("return (#1=[#1#].watch(\"prototype\", ({}).hasOwnProperty));");
tryItOut("/*for..in*/for(this.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }).__defineSetter__(\"x::__iterator__\", (<x/>).__defineSetter__).__iterator__ in ((gc)(<x/>)))throw true;");
tryItOut("throw prop;");
tryItOut("/*infloop*/L:do  while((<x><y/></x> == window));");
tryItOut("/*for..in*/for(let [__count__, __parent__] = (this.__defineGetter__(\"__noSuchMethod__\", function  __parent__ (__count__, constructor) /x/g )) in ({a2:z2})) /*infloop*/for((function ([y]) { })(); true; <><x><y/></x></>) throw  /x/g ;");
tryItOut("export prop;");
tryItOut("for(let y in [5,6,7,8]) let(__iterator__) { break ;");
tryItOut("if(<><x><y/></x></>) { if ([z1]) {var __parent__, __iterator__; } else }");
tryItOut("/*infloop*/for(const prototype; (true)(({a1:1}), null); ({a1:1}).__defineSetter__(\"prop\", (1 for (x in [])))) {;/*for..in*/M:for(let [__proto__, __iterator__] = <><x><y/></x></> in <x/>) { } }");
tryItOut("if(((p={}, (p.z = <x><y/></x>)()))) { if ([11,12,13,14].map.yoyo((prop)((([1,,] if (__proto__))), <><x><y/></x></>))) {return undefined; }} else /*infloop*/do {;yield null; } while([11,12,13,14].sort);");
tryItOut("/*for..in*/for(__count__ = *::* .@*:: <y><z/></y> in -3/0) return;");
tryItOut("yield <y><z/></y>;");
tryItOut("{let (prop = <><x><y/></x></>) { var prototype, __iterator__; } }");
tryItOut("return (/a/gi)(<x><y/></x>)\n");
tryItOut("[1,,] const constructor;");
tryItOut("throw StopIteration;");
tryItOut("M:if((<x/>)[<x/>]) try { export __parent__; } finally { return; }  else  if (new ({ delete: [z1] }) = function ([y]) { }.isPrototypeOf(false)) {/*infloop*/do { } while(<x><y/></x>)\n/*for..in*/for(let __count__ = <x><y/></x> in __proto__) {throw  /x/g ; } }");
tryItOut(" const __parent__;");
tryItOut("{{/*infloop*/M:for(false; []; <x/>) {export *; }({}); }/*infloop*/do {__count__ = <x/>; } while(true); }");
tryItOut("/*for..in*/for(const __proto__ = (*::* .@x:: <><x><y/></x></>) in <><x><y/></x></>\n) {let prototype = ,, function::__noSuchMethod__ =  '' ;yield; }");
tryItOut("return;");
tryItOut("yield;");
tryItOut("if((__proto__.__count__ = ({__noSuchMethod__: prototype = true}))) { if (([__iterator__, , ({ __count__: [] }), prop] = (null.hasOwnProperty(\"__iterator__\")))) {with(@foo){continue ;yield; } } else /*infloop*/while(true){with({__parent__: [null].map(__iterator__)})@fooM:while((false.prototype =  /x/ ) && 0){(); } }}");
tryItOut("/*for..in*/for(const __parent__ in (((p={}, (p.z =  /x/ )())))[*::* > 1e+81]) throw #1=<><x><y/></x></>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for(prototype; function ([y]) { }; undefined) const prototype, __iterator__ =  \"\" ;");
tryItOut("if((3/0.__defineGetter__(\"prototype\", (/a/gi).apply))) { if () /*infloop*/while(constructor.__count__){continue ;export constructor; }} else (prop);");
tryItOut("this.zzz.zzz;");
tryItOut("L:switch(4.) { default: break; return;break; case [@foo].some(<x><y/></x>).__defineGetter__(\"({ prototype: __parent__ })\", gc): if((1e-81)[<><x><y/></x></>]) { if (prop = undefined) {export *;throw @foo; } else {return <x/>; }}break; break; case 3:  }");
tryItOut("L:with(.2)do ; while((window) && 0);");
tryItOut("/*for..in*/for(const [prototype, constructor] = ({ set constructor(__proto__, constructor) { if(__parent__ | null) {yield; } }  }) in ([11,12,13,14].some)) {with({__noSuchMethod__: (<x><y/></x> ? arguments : *::*)}){export __proto__; }(*); }");
tryItOut("/*for..in*/for(var <><x><y/></x></>.hasOwnProperty(\"__count__\") in ((Math.sin)(this))){(*::*);(function () { prop } ).apply }");
tryItOut("M:if(__proto__ ? true : undefined)  else let prototype = <x><y/></x>, __proto__ = <x><y/></x>;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("yield <x><y/></x>;/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor['prototype'] in *) return;");
tryItOut("export __noSuchMethod__");
tryItOut("(0.1)\nbreak M;");
tryItOut("{{}export ({a2:z2}); }");
tryItOut("if(__count__) {this;continue ; }");
tryItOut("if([(<><x><y/></x></> if ( '' ).__count__)]) {return new <x/>(*); } else  if ((RangeError(window, *))[Error()].yoyo(([11,12,13,14].sort))) {var __iterator__ = window;return __parent__; } else const __parent__ = let (prop = <x/>, __proto__) <x><y/></x>;");
tryItOut("var * = *::*, __proto__\n");
tryItOut("if(M:while((<x><y/></x>) && 0)return;(__parent__ for each (__count__ in *), 0x99)) gc()return; else  if ((prototype.__proto__ =  /x/ ) & (\n<y><z/></y>)) const __parent__, __proto__;");
tryItOut("with({constructor: <><x><y/></x></>}){break ;yield  else ; }");
tryItOut("if(('fafafa'.replace(/a/g, function ([y]) { }))) /*for..in*/for([prop, __iterator__] = constructor in (function ([y]) { })()) {}");
tryItOut("/*for..in*/M:for(let constructor in <x><y/></x>) yield function::__iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <x/>) yield; const prop;");
tryItOut("gc() const constructor;");
tryItOut("M:do {const __count__ = *, __proto__; } while((  %= this) && 0);");
tryItOut("prototype");
tryItOut("([z1]);const __noSuchMethod__ = window, prop");
tryItOut("{continue M; }");
tryItOut("let (prototype, __iterator__ = __noSuchMethod__) { gc() }\n");
tryItOut("{L: {{}var __proto__, __proto__; } }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = null in (({__parent__: <><x><y/></x></> >>= <><x><y/></x></>, constructor: \n*::* }))) {with({setter: <x/>}) }");
tryItOut("/*infloop*/for(eval(\"([z1,,]).watch\", [z1]); __parent__; <x><y/></x> ? false :  '' ) gc()");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((<x><y/></x>)(let (__proto__) <x><y/></x>)))yield 4.;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in ((Math.sin)(([15,16,17,18].map(Math.pow\t, (yield ([*::*].filter(({}).__lookupGetter__))))))))if(constructor.__proto__ getter= function(q) { return q; } *= <employee id=\"1\"><name>Joe</name><age>20</age></employee>) {export each; } else {}");
tryItOut("{} const __count__;");
tryItOut("if( /x/ ) { if ((new (#1#)())) {prop = this;__count__ }} else {(0/0); }");
tryItOut("if((({}).hasOwnProperty)()) return; else  if (<><></></>) {if(null) yield; else {export __count__;yield; }\nreturn <x><y/></x>; const constructor;\n }");
tryItOut("{}\nexport __noSuchMethod__;");
tryItOut("(arguments).watch\n");
tryItOut("/*infloop*/L:for( /x/ ; (this.unwatch(\"__noSuchMethod__\")\n); prototype = 033) {/*for..in*/for(constructor = {} in <><x><y/></x></>) __parent__, constructor\n\f/*infloop*/M:for(const __proto__; this; (this || *)) {} } const prototype;");
tryItOut("with({__proto__: (({}).hasOwnProperty).call(this.__defineSetter__(\"__parent__\", true), prototype = <><x><y/></x></>, *::*)}){if(<x><y/></x>) {<><x><y/></x></>; } else  if (*::*) {gc(){} } }");
tryItOut("{prototypethrow <><x><y/></x></>; }");
tryItOut("/*infloop*/L:for(--window; (null[3.141592653589793(@foo, this)]); <x><y/></x>.hasOwnProperty(\"constructor\") !== __noSuchMethod__ = <x><y/></x> <<= [<y><z/></y>].eval(this * this)) /*infloop*/for(var constructor = true; true; null) (@foo);");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __parent__] = __proto__ in <x><y/></x>) yield;");
tryItOut("/*for..in*/for(var __iterator__ in (((<x><y/></x> != <y><z/></y>).__defineSetter__)(window))){({}).__lookupGetter__ }\nfalse");
tryItOut("{}");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(this; this.__defineSetter__(\"__proto__\", 'haha'.split); (function::__noSuchMethod__ = 0) %= ( \"\"  *= new (({}).hasOwnProperty)())) /*for..in*/for(constructor in ((<x><y/></x>)(*))){let __noSuchMethod__ = <x><y/></x>;const prototype; }");
tryItOut("export __noSuchMethod__\nyield;");
tryItOut("/*infloop*/for(let [, , __count__] = ('haha'.split(__iterator__)); <x><y/></x>.(__parent__); ({prop: 3.141592653589793, __parent__: ({}) })) prototype = 033;");
tryItOut("let (__proto__) { {(<x/>); }\n }");
tryItOut("/*for..in*/M:for(const [, , ] in <y><z/></y>) {*::*;yield window; }");
tryItOut("let (prototype, __proto__ = [,,]) { yield; }");
tryItOut("/*for..in*/for(const prop in ((<><x><y/></x></>.__lookupSetter__(\"prop\"))(new this(<><x><y/></x></>).__lookupSetter__(\"__parent__\")))){yield; }");
tryItOut("{L:if( /* Comment */this) const __parent__ = prototype; else  if (({ get constructor(<\nx><y/><\f/x>) { yield <x><y/></x> } ,  get __parent__ __iterator__ (__proto__) { yield; }  })) yield __noSuchMethod__; else {__iterator__ = this;throw  \"\" ; }false; }");
tryItOut("<x><y/></x>\n");
tryItOut("continue \nM:if((prop.( '' ))) { if ((( '' \t)(033))) yield <y><z/></y>;} else {}");
tryItOut("export *; const prop;");
tryItOut("do {yield; } while(((( __iterator__ = (__noSuchMethod__ if (<><x><y/></x></>))+=<>/a/gi</>.prototype{eval(\" .@*:: constructor\", -3/0) getter: gc, __noSuchMethod__: (1.2e3 >= [<x/> if ( /x/ )].__lookupSetter__(\"prop\")) }))[undefined < this]) && 0);");
tryItOut("M:do {;1e-81 } while((__iterator__) && 0);");
tryItOut("const __proto__ = <x/>;\nwhile((<x><y/></x>) && 0){} const prop;\n");
tryItOut("let(x::__noSuchMethod__) { throw (({ get __proto__(__parent__: __iterator__) { ((-1)); }  })\n);");
tryItOut("yield #1=[(p={}, (p.z = 1.3)())];");
tryItOut("{export *; }");
tryItOut("if( '' ) do return [z1,,]; while((<><x><y/></x></>) && 0); else  if (*::* % arguments) return;");
tryItOut("/*infloop*/for(let \fprototype; #0=({prop: undefined}); ((<x><y/></x> if (-0)).watch(\"x::constructor\", 'haha'.split))) {yield -0;break L; }");
tryItOut("/*infloop*/while(<><><!--yy-->\f</></>){export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in <bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee><\t/bbb>.(Math.sin .@*::  /x/g  .@*::  /x/g )) do let __noSuchMethod__ = this, prop = *::*; while((({__noSuchMethod__: ({}),  get __noSuchMethod__(__noSuchMethod__, __parent__) { return *::*; }  })) && 0);");
tryItOut("let (__iterator__ = <y><z/></y>.__parent__ = 0/0, __noSuchMethod__ = <x/>) { /*infloop*/L:do {export *; } while((this)()); }\n/*for..in*/for(const __noSuchMethod__ in ((({}).hasOwnProperty)(false)))/*infloop*/for(true; @foo; false) var __noSuchMethod__ = <><x><y/></x></>, __iterator__;");
tryItOut("throw (~this);");
tryItOut("/*infloop*/M:for(prop =  '' ; -3/0; false) {var setter;return; }");
tryItOut("return 3\n");
tryItOut("throw StopIteration;");
tryItOut("{L: {if(new function  __count__ () { __proto__ constructor } ()) {<ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd>export prop; } else {var __noSuchMethod__; } }with({prototype: <x><y/></x>}){; } const __iterator__; }");
tryItOut("L:if(-- '' ) { if ((constructor = undefined)) {gc() }} else return; const __iterator__;");
tryItOut("const __noSuchMethod__;");
tryItOut("throw __noSuchMethod__;");
tryItOut("let (__noSuchMethod__ = this.__defineSetter__(\"__parent__\", 'haha'.split), set) { with({delete: window ? *::* : window})return -0; }");
tryItOut("try { __count__ = __proto__;\n } finally { let(({ __noSuchMethod__: __noSuchMethod__, constructor: __iterator__ }), __iterator__) { let(__count__) { break ; } ");
tryItOut("for(let y in []);");
tryItOut("L: /*infloop*/while((__iterator__.__iterator__)){export prop; }");
tryItOut("return this.zzz.zzz.isPrototypeOf(({}).hasOwnProperty);");
tryItOut("if((new Function(\"yield window;\"))) {export *;\tprop = *; } else  if (__count__.__noSuchMethod__ setter= ({}).hasOwnProperty) return ");
tryItOut("{}");
tryItOut("if((*::*)(<><x><y/></x></>)) {export *; } else {if(<x><y/></x>) continue M; else  if (5.0000000000000000000000) {; }{} }");
tryItOut(";break L;");
tryItOut("while((constructor = arguments.__defineSetter__(\"__noSuchMethod__\"\f, function(q) { return q; })) && 0)with({function::__proto__: __proto__.( '' )})__parent__ = window;\f");
tryItOut("this.zzz.zzz;");
tryItOut("try { export prototype; } finally { throw *::*; } ");
tryItOut("let(__noSuchMethod__, __iterator__ = eval(\"(<x><y/></x>.(window))\", constructor)) ((function(){let(({ __iterator__: ({ __proto__: ({ prop: ({ prototype: __proto__ }), __proto__: [__noSuchMethod__] }) }), __count__: [] }) = ([1,2,3,4].map())(this).__iterator__ = (), prop) ((function(){with({}) { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) yield; } })());})());");
tryItOut("/*for..in*/M:for(var prototype = (<x><y/></x>.__count__)[<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>] in <y><z/></y>.__lookupGetter__(\"__noSuchMethod__\") ^ ({})) {while((true) && 0)* }");
tryItOut("Function");
tryItOut("let (__noSuchMethod__) { /*infloop*/L:do {(<x><y/></x>).watch } while(__parent__ = <x><y/></x>); }");
tryItOut("{yield; }");
tryItOut("with({}) { with({}) yield; } ");
tryItOut("/*infloop*/L:for(4 = undefined.prop .@ <x/>; ((<x><y/></x>.(yyy))()); __noSuchMethod__ = <><x><y/></x></>) {__parent__yield <><x><y/></x></>; }");
tryItOut("L:if([1,,]) export __count__; else  if (<x\f><y/></x>) export prop;");
tryItOut("with(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>){__proto__ = __proto__, __noSuchMethod__; }");
tryItOut("/*for..in*/M:for(let prototype = prototype in null) var __iterator__, __count__;");
tryItOut("while((this.zzz.zzz) && 0)const __parent__ = *;\nexport *;\n");
tryItOut("(this.__defineGetter__(\"__parent__\", function (__iterator__)<y><z/></y>))(__noSuchMethod__ = getter) = prototype;");
tryItOut("({ __iterator__: ({ __parent__: __count__ }), constructor: [(<x/>)(__proto__), ] }) = window.valueOf(\"number\")");
tryItOut("/*infloop*/for(; prop|=function(id) { return id } .. function(id) { return id }\n; ({ __proto__: __noSuchMethod__ }) = ([__iterator__.__iterator__ = __noSuchMethod__.__count__ getter= (new Function(\"var constructor, __iterator__ = __parent__;\"))].sort(<x/> >>>=null))) yield undefined;");
tryItOut("/*infloop*/while((this.yoyo(prop))){{export x::__noSuchMethod__;gc() }; }\n/*infloop*/for(const prototype = let (__proto__ = true, prototype) ({a2:z2}); __count__ = -3/0; undefined()) {{} }\n");
tryItOut("/*infloop*/for(const ({ __iterator__: [, , prototype, ], __iterator__: [[__iterator__, [try { const prop; } finally { const __noSuchMethod__ = *::*, constructor = 1.2e3; } , __proto__, constructor, prop], , ], ] }) = new [1,2,3,4].map(function  prop (prop, __parent__) { yield 5.0000000000000000000000 }  ? (<x><y/><\f/x>) : __count__, <><x><y/></x></>.yoyo(<x/>)); this.__defineGetter__(\"__count__\", function  __noSuchMethod__ () { return prototype } ); <y><z/></y>) /*for..in*//* nogeckoex bug 349964 */L: for  each(const this.__defineSetter__(\"constructor\", ([1,2,3,4].slice).call)['prototype'] in <y><z/></y>) {__proto__ = __count__, __noSuchMethod__;export *; }");
tryItOut("(<x/>); const __parent__;");
tryItOut("L:if(@foo) { if ( ''  >>>=arguments) try { return  '' ; } catch(__count__) { prop, constructor; } } else continue ;");
tryItOut("/*for..in*/for(var prop.prop in (([let (prototype = ((<x><y/></x>))) window.__lookupSetter__(\"__iterator__\")])(({constructor: window}).prop = constructor.__noSuchMethod__ setter= function (prototype) { return (<x><y/></x>)[true].__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; /*for..in*/for(__iterator__ = <x><y/></x> in *) { }; yield y; }) } ))){export *; /x/g \nyield; }");
tryItOut("L:if( /x/ ) let __iterator__; else  if (__parent__.([(__parent__) < false])) gc() else ;");
tryItOut("L:with({function::prop: ((1 for (x in []))).call(__parent__-=*::* .@*::  ''  >> <x><y/></x>.hasOwnProperty(\"__count__\"), <><bbb xmlns=\"new (function(y) { yield y; export *;; yield y; })((* %= true), 1.2e3)\"><!--yy--></bbb></>, <{constructor}></{constructor}>)}){gc() }");
tryItOut("/*infloop*/for(var [({ __proto__: __proto__ }), , ({ __noSuchMethod__: 1e-81 }), [, , ({ __count__: ({ <employee id=\"1\"><name>Joe</name><age>20</age></employee>: [function ()prototype = this, __iterator__ = <x/>], prop: __proto__ }) })]] = !<y><z/></y>.unwatch(\"__iterator__\"); eval(\"new (function ([y]) { }.__defineSetter__(\\\"__proto__\\\", (new Function(\\\"export *;\\\"))))(({}).__lookupGetter__.unwatch(\\\"__iterator__\\\"), this.zzz.zzz)\", ({__noSuchMethod__:  '' })); var __iterator__, prop;) {throw <><x><y/></x></>; const delete;/*infloop*/for(prototype ? this : window; __proto__(__count__); (<x><y/></x> .. continue ;)) (0.1); }");
tryItOut("throw prototype;");
tryItOut("/*infloop*/for(this.throw( /x/ ); 4.; (prop = window) .@ __iterator__ = __parent__) {return *;return; }");
tryItOut("if(<x><y/></x>) ");
tryItOut("throw StopIteration;");
tryItOut("if(__iterator__) yield;");
tryItOut("do __count__, constructor while((eval(\"({});\", (__noSuchMethod__ = this))) && 0);");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) with({}) { let prop; } ");
tryItOut("throw prop;");
tryItOut("/*infloop*/do  while(  );");
tryItOut("/*infloop*/for(var __parent__; [15,16,17,18].some(window, <x/>);  /* Comment */[z1,,]) {(.2); }");
tryItOut("L: {}");
tryItOut("if(<x><y/></x>) {break L; } else  if (__count__) {gc() }");
tryItOut("M:if((__noSuchMethod__ = yield (true)(__iterator__))) { if (.__count__ %= ((.2)(*::*,  /x/ ))) {while(([[1]]) && 0){export __iterator__; } }} else {continue M; }");
tryItOut("switch((new (<y><z/></y>)(window)).unwatch(\"__parent__\")) { case ([15,16,17,18].sort(<x><y/></x>, undefined).__defineGetter__(\"prototype\", 'haha'.split)): yield;break; default: M:with({__proto__: window}){{} }case 8: break;  }");
tryItOut("{[1,2,3,4].map }");
tryItOut("{} const __noSuchMethod__;\n{}\n");
tryItOut("/*infloop*/for(const constructor; false; __noSuchMethod__) {return -0; }");
tryItOut("let(({ __parent__: ({ prop: ({ prop: (__parent__)(this) }), prop: [, ({ __proto__: [prop, constructor], __iterator__: ({ __proto__: __parent__, constructor: __proto__ }) }), ({ prototype: ({ __parent__: prop, __noSuchMethod__: prop }), __iterator__: ({ prototype: constructor, __count__: __count__ }) })] }) }) = (prop + ( \"\" .unwatch(\"constructor\").propertyIsEnumerable(\"__proto__\")).__defineGetter__(\"prototype\", ({}).hasOwnProperty))) { with({}) { for(let y in [5,6,7,8]) let(__iterator__) ((function(){<x><y/></x>.__iterator__ = __proto__;})()); } ");
tryItOut("/*infloop*/for(var prototype; [__parent__].filter(({}).hasOwnProperty); [[]].*) switch(0) { default: throw (function ([y]) { })();break;  }");
tryItOut("if([15,16,17,18].some(function(q) { return q; }, new (((1 for (x in []))).apply)(<><x><y/></x></>, <><x><y/></x></>))) {gc()let __parent__ = @foo, __proto__ = <x/>; }");
tryItOut("( /x/ );");
tryItOut("const constructor;\n(new Function(\"let __count__ = false, __parent__;\"))\n");
tryItOut("gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__ in *::*--) if((__parent__ = prop)) {Math.powgc() } else export __proto__;");
tryItOut("/*infloop*/do return;(<><x><y/></x></>); while((function () { gc() } ).call(prop, ));");
tryItOut("return\nthrow <y><z/></y>;");
tryItOut("with({constructor: #1=(p={}, (p.z =  /x/ )())}){ }");
tryItOut("switch(({a1:1})) { case 2: yield;case 0: return __count__;break;  }");
tryItOut("do L:while((((__proto__ :: function(id) { return id }))[]) && 0)with({prototype: (@foo ^= true)})null while((({__iterator__: ({__proto__: prop})})) && 0);");
tryItOut("/*infloop*/for((uneval( { yield this.__defineGetter__(\"prop\", eval) } )); [15,16,17,18].map((new ((/a/gi).call)((window for (__proto__ in [z1,,])), __count__)), window.watch(\"__proto__\", Function)); function  constructor (__noSuchMethod__) { return ((yield undefined)) } (<><bbb xmlns=\"<><x><y/></x></>\"><!--yy--></bbb></>)) break M;");
tryItOut("/*infloop*/L:for(((__iterator__.__parent__ setter= new Function).__noSuchMethod__ = constructor = function ([y]) { }); (this ? typeof (<><x><y/></x></>)() : window.unwatch(\"__parent__\")); [] = (({__parent__: __proto__ instanceof null, __iterator__: prop = [z1,,] }).unwatch(\"__iterator__\")).unwatch(\"prototype\")) {yield (<bbb xmlns=\"<><x><y/></x></>\"><x><y/></x><ccc:ddd> </ccc:ddd></bbb>.((void window)));__iterator__ =  \"\" ; }");
tryItOut("switch(<><x><y/></x></>.watch(\"constructor\", Math.sin)) { case 0: yield;break; case 7: if(__iterator__) {return;{} } else  if (constructor) {yield <y><z/></y>; } else {return ({}); }break; gc()break; break; case 4: break; case 2: (3.141592653589793); }");
tryItOut("if([[]]) {}");
tryItOut("M:if(undefined) {yield; } else  if (*) {gc()break M; } else throw #3={a:#3#};");
tryItOut("/*infloop*/for([({ __proto__: __proto__ })] = (uneval(new (<><x><y/></x></>)())); prototype; ({prop: __iterator__ = <><x><y/></x></>})) {throw <x><y/></x>; }");
tryItOut("if((({ __noSuchMethod__: __parent__, prototype: prototype }) = #1=[[1,,]])) { if (prototype.__noSuchMethod__) {; } else yield;}");
tryItOut("/*infloop*/for(<x><y/></x>; __proto__; <><x><y/></x></>) {}");
tryItOut("/*for..in*/L:for(const (<x><y/></x>.(__count__))((yield <x/>)) in (function ([y]) { })()) {__parent__ = thislet prototype; }");
tryItOut("/*infloop*/do @foo; while( /x/ );");
tryItOut("with({}) { var prototype, __iterator__ = (function ([y]) { })(); } ");
tryItOut("for(let y in []);");
tryItOut("M:do {switch(__count__.unwatch(\"setter\")) { default: __noSuchMethod__break;  }/*infloop*/do {yield;var prototype = *; } while( /x/g ); } while((((window)(undefined)) = (prototype = @foo)) && 0);");
