tryItOut("/*for..in*/for(const prop = 4. in __noSuchMethod__) {const prototype = <y><z/></y>, yield = <x><y/></x>; }\n/*for..in*/for(var __proto__ in ((function(y) { yield y; throw __iterator__;; yield y; })((eval(\"[[1]].eval(null)\", this.zzz.zzz)))))return 5.0000000000000000000000;");
tryItOut("gc()");
tryItOut("throw @foo++;\nbreak ;\n");
tryItOut("{/*infloop*/M:for(let __noSuchMethod__ = (<x/> - this); [1,2,3,4].slice.__proto__; (__proto__.prototype)) {; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(( /x/ )(<><x><y/></x></>) in __proto__) {function  constructor (__iterator__, constructor) { yield #3={a:#3#} }  }");
tryItOut("let (new (function(q) { return q; }).call(@foo) = __proto__ = @foo < this.__parent__, prop = <zzz>1.3</zzz>) { ;\n(*).call\n }");
tryItOut("throw __count__/*\n*/;");
tryItOut("if([z1,,].prototype) <><default: case 0: break; case !this.hasOwnProperty(\"yield <><x><y/></x></>;\"): break; case new this ? <x><y/></x>.propertyIsEnumerable(\"__parent__\") : 0.1: gc()case <y><z/></y>: ;throw __iterator__;break; /*for..in*/for(let prototype in <><x><y/></x></>) {const prototype;; }break; x><y/></ <x><y/></x> x></>; else  if ((false.@foo)) ;");
tryItOut("/*for..in*/for(var __iterator__ = (1.3 ? <x><y/></x> : *::*) in 0.1) {while((undefined) && 0){yield <x><y/></x>;throw <\t><x><y/></x></>; } }");
tryItOut("/*for..in*/for([__noSuchMethod__, __iterator__] = function (__count__, __parent__) { yield ((function (__proto__, __proto__) { L: {var constructor =  /x/g ;yield; } } )([15,16,17,18].sort(eval, this.zzz.zzz), [15,16,17,18].map(({}).__lookupGetter__, -1))) } (\nundefined[<><x><y/></x></>] >>>=prop.prototype =  \"\" ) in __noSuchMethod__ = <x><y/></x>) {let ([, , prototype] = (window >>> \f<x><y/></x>), __parent__) { yield <><x><y/></x></>; }while((<y><z/></y>) && 0)yield; }");
tryItOut("let (({ __iterator__: ({ __parent__: __parent__.prop, prototype: __parent__ }), constructor: prop }) = (this.__defineSetter__(\"__count__\", Math.sin) instanceof window\t.throw([__proto__] = __count__).hasOwnProperty(\"prototype\"))) { with({__parent__: (<x><y/></x> @ [z1])}); }");
tryItOut("for(let y in [5,6,7,8]) /*infloop*/for( \"\" ; __noSuchMethod__; prop) {return *;; }");
tryItOut("switch(false) { case 9:  }\nwhile((*::*) && 0){const prototype = *::*, __parent__ = false; } const __count__;");
tryItOut("/*for..in*/L:for(var prop =  for (__iterator__.prop in __parent__.__noSuchMethod__) if (({a1:1}) = #1#) in <x/>) {<bbb xmlns:ccc=\"+ /* Comment */__count__\"><ccc:eee></ccc:eee></bbb>do /*infloop*/for(<x/> |= this; constructor = __parent__; prototype) {export *; for each (__count__ in <y><z/></y>) for (prototype in 1e81) } while((let (__proto__ = eval(\"1e81\",  '' ), function::__parent__) (true(*))) && 0);/*for..in*/L:for(var [prop, __noSuchMethod__] = Object( /x/ , <x><y/></x>) in <x/>) with({__count__:  '' }){} }");
tryItOut("let (__noSuchMethod__ = <y><z/></y>, prop = <x/>) { return; }");
tryItOut("this.zzz.zzz\nthis.zzz.zzz;");
tryItOut("with({__proto__: constructor})<ccc:ddd></ccc:ddd>");
tryItOut("{[1,2,3,4].slice\nexport prototype; }");
tryItOut("if(1.3) {; } else  if (<y><z/></y>) let prototype, prop;");
tryItOut("return arguments;");
tryItOut("/*infloop*/for(const __parent__; false.unwatch(\"__parent__\"); (#3={a:#3#}.*.watch(\"__count__\", Function))) {var __iterator__ = #1#;return; }");
tryItOut("switch(*) { default: break;  }yield null;");
tryItOut("/*for..in*/for(let constructor = (({ get x::constructor constructor (__iterator__) { yield __proto__ } , constructor: <y><z/></y> }) << (new  '' (<x><y/></x>,  \"\" ))) in ({a1:1})) gc()\ncontinue M;\n");
tryItOut("if(((({ __count__: constructor }) = __noSuchMethod__)) * (yield undefined >>= return;[(({__noSuchMethod__: window}))])) { if (<x><y/></x>.isPrototypeOf(3.141592653589793)) (1e+81)\n else {this.zzz.zzz; }}");
tryItOut("{/*infloop*/M:do break M; while(*::*);gc() const __noSuchMethod__; }");
tryItOut("L:if(<x><y/></x>.@foo) return <><x><y/></x></>;");
tryItOut("if(arguments.__lookupGetter__(\"prop\")) { if ([[1]][({a1:1})].valueOf(\"number\")) {}} else {gc() }\nvar __parent__ = __parent__ = <><x><y/></x>\f</>, prop = prototype, __proto__");
tryItOut("/*for..in*/for(var __noSuchMethod__ |= false.__parent__ in ((eval)((<x><y/></x>.(*)))))if(this) {gc()yield; } else export *;");
tryItOut("M:if((*.valueOf(\"number\"))) {export __parent__;; }");
tryItOut("/*for..in*/for(let __parent__ = <><x><y/></x></> in m) continue ;\r");
tryItOut("L: {gc()var __proto__ = prototype, __parent__ = undefined; }");
tryItOut("L:if([yield new Math.sin()]) throw @foo; else (null.yoyo(({})));");
tryItOut("function  __noSuchMethod__ (__proto__)<><x><y/></x></>\nyield;\n");
tryItOut("/*for..in*/L:for(const __proto__ = (uneval(prop)) in Exception(let __count__ =  '' ;.__count__)) /*for..in*/M:for(var <><x><y/></x></> in prop) yield null;");
tryItOut("break ;");
tryItOut("M:if(prototype.constructor = true) { if (((uneval(this)))) {var __noSuchMethod__, ;{} }} else return <x/>;");
tryItOut("{}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <x><y\n/></x>.prototype % new 4.(3/0)) {L: /*for..in*/for([prop, prop] = 1.3 in <x><y/></x>) 1.3; }");
tryItOut("\nprototype = function ([y]) { };");
tryItOut("const __parent__ = null;yield;");
tryItOut("/*infloop*/for(let __proto__; (__count__.__parent__); [15,16,17,18].filter(, [15,16,17,18].sort(#1=[#1#], __count__))) continue ;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return 1.2e3;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in get) L:switch(let) { case <><x><y/></x></>: break; default: constructor;yield true; }");
tryItOut("if(-new Function()) { if (( /* Comment */((p={}, (p.z = ((p={}, (p.z = <><x><y/></x></>)())))())))) /*infloop*/for(let prototype = 0; new ([1,2,3,4].map)(); __parent__ = this) { }} else ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in  /x/g ) {const prop = <x><y/></x>;yield __count__; }");
tryItOut("if(\n*::*.__noSuchMethod__) export __count__; else {gc()var __parent__ = (); }");
tryItOut("prototype = __count__;");
tryItOut("if(window) { if (undefined) {function(q) { return q; }(<><x><y/></x></>); } else gc()}");
tryItOut("M:while(((__parent__ = <y><z/></y>)) && 0)return <x><y/></x>;");
tryItOut("{export *; }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(false(true)[new Number((this.__parent__), [[]]).__parent__ = new Number(<><x><y/></x></>, prop)]; [11,12,13,14].some; (new ((<x><y/></x> >>  \"\" ))(\f))) {klet __iterator__ = __noSuchMethod__, yield = [z1,,]; } const __proto__;");
tryItOut("switch(1e4) { default: \treturn *;break; return <x/>;break; case 6: yield  /x/g ;break; case constructor: break; case 8: break; case 2: case 9: break; case 2: <y><z/></y>;break; break;  }return true; const __noSuchMethod__;");
tryItOut("return;");
tryItOut("if((Math.pow())++) {export __proto__; } else  if ([ /x/  ? <x><y/></x> : @foo.unwatch(\"__count__\")].map(<ccc:ddd><!--yy--></ccc:ddd>)) {M:if(<x><y/></x> <= @foo) { if (5.0000000000000000000000) } else {yield  '' ; /x/g ; } }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("return;");
tryItOut("return (__parent__ = true).propertyIsEnumerable(\"prototype\");");
tryItOut("with(((<y><z/></y>).__defineSetter__).call(<x/>, 1e-81, <>\t<x><y/></x></>).valueOf(\"number\") instanceof ((__noSuchMethod__)()))continue ;\nif((typeof <x><y/></x>)) yield; else  if ((function  continue ; () { ; } )) prop, __iterator__;\n");
tryItOut("M:while((((yield 0))) && 0){return 5.0000000000000000000000;let __iterator__, __proto__; }");
tryItOut("/*for..in*/M:for(let __proto__ = undefined in <><x><y/></x></>) return <><x><y/></x></>;");
tryItOut("if(undefined += prop) break ; else  if ({}) {return <><x><y/></x></>; }");
tryItOut("/*for..in*/L:for(const [__noSuchMethod__, __proto__] = let (__iterator__ = prototype)  '' .unwatch(\"__count__\") in __count__\n) {if(<y><z/></y>) {true } else  if ( \"\" ) ; }");
tryItOut("var function::__iterator__ = function ([y]) { }, __noSuchMethod__;");
tryItOut("/*for..in*/for(var constructor in (([<><x><y/></x></>.eval(<>//h\n<x><y/></x></>) .@ ((constructor))])((((Function)(<x><y/></x>)).throw\n(*::* >>> <y><z/></y>)))))var constructor;");
tryItOut("if(((true[[1]].*).constructor = this.__defineSetter__(\"constructor\", (<x/>).__defineSetter__).throw(constructor = (this.__defineGetter__(\"prototype\", eval)) .@ ([__count__ if (1e81)])))) {( '' ); const prototype;yield 0/0; } else throw undefined;");
tryItOut("with({}) (-*::*);");
tryItOut("/*for..in*/for(const __noSuchMethod__ in __count__ = (-1)) continue L;");
tryItOut("let(__noSuchMethod__ = <y><z/></y>) ((function(){with({}) { \t{} } })());");
tryItOut("yield\n{}");
tryItOut("/*for..in*/L:for(var (constructor) in ((eval)(()))){{; }\n }");
tryItOut(" /x/ ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (__noSuchMethod__)((new (<y><z/></y>)())) in (__count__ = 1e-81.isPrototypeOf(__parent__))) throw prototype\n");
tryItOut("M:while((#1=[constructor]\f) && 0)/*for..in*/__noSuchMethod__for(const __count__ in ((-0)(window))){return;gc() }");
tryItOut(" if (prototype.(<x><y/></x> ? true : __proto__))");
tryItOut("yield;/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in *::*) {continue M;const prototype; }");
tryItOut("if(yield window) { if (let (prototype = @foo, __proto__ = false) ([z1].hasOwnProperty(\"__iterator__\"))) {export *; }} else throw *;");
tryItOut("/*infloop*/for(var __count__ = (eval(\"return;\", 1.2e3)); new <x/>; (@foo <= #3={a:#3#}.prototype)) ;");
tryItOut("with({__proto__: <>__proto__: __noSuchMethod__.__count__ = [__proto__, ({ __parent__: prototype }), , ({ prop: __iterator__, __count__: constructor }), ]</>}){/*for..in*/for(prototype = (uneval(.2)) in <x><y/></x>) {throw  \"\" ;export *; }throw window; }");
tryItOut("{/*infloop*/do {(constructor);yield null; } while( /x/g );export *; }");
tryItOut("if([(--false)].__defineSetter__(\"x::prop\", eval).isPrototypeOf(prop.(null))) {M:if((__noSuchMethod__, __iterator__ =  /* Comment */0x99.eval(this))) {yield; }/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in #1=[#1#]) export *; }");
tryItOut("if(@foo &= this) {continue L; } else  if (__proto__.__parent__ = <x><y/></x>) {(({}));return; } else { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in let (__iterator__, prop) this) __parent__ = window, continue ;;");
tryItOut("/*for..in*/for(var (({a2:z2}).prototype).throw(this) in ((new Function)(([undefined]))))if([15,16,17,18].filter(<><\tx><y/></x></>, (({}).__lookupGetter__)(<x><y/></x>, undefined))) {} else if(new .2( \"\" , [])) const constructor = 0.1; else  if (__proto__ = this) break M; else continue M;");
tryItOut("/*infloop*/L:for(<x><y/></x>.__lookupGetter__(\"prototype\"); __count__.prototype setter= -3/0; ({ __count__: ({ __count__: prototype }) }) = <y><z/></y> > <x><y/></x> |= <y><z/></y>.__parent__) return;");
tryItOut("gc()\n\n");
tryItOut("/*infloop*/L:while((({}).hasOwnProperty)(([1,2,3,4].map).call(<><x><y/></x></>, <x><y/></x>),  \"\" ))__parent__ = prop;");
tryItOut("/*infloop*/for(__noSuchMethod__; 5.0000000000000000000000; (uneval(<><x><y/></x></> = __parent__.__count__ = this))) with(prototype = <x><y/></x>){throw constructor\n }");
tryItOut("L: {(0.1); }");
tryItOut("do var prop, __proto__; while((@foo) && 0);");
tryItOut("/*for..in*/M:for(let [yield, __proto__] = this.__defineSetter__(\"prop\", (new Function(\"return;\"))).throw((<x><y/></x> in 1e-81 ? __count__.(<x/>) : <><x><y/></x></>.constructor)) in <x/>) ({) }");
tryItOut("/*for..in*/for(__count__ in ([__iterator__ for each (prop in 0.1)])) return @foo;");
tryItOut("__count__ = <x><y/></x>, true, <x/> = window");
tryItOut("if(this.__defineGetter__(\"__proto__\", Function)) { if ([15,16,17,18].filter(eval, #3={a:#3#})) {export *; } else {return; /x/ ; }}");
tryItOut("1.2e3");
tryItOut("");
tryItOut("/*infloop*/while(([1] !== window)){break L;return <x><y/></x>; }");
tryItOut("M:if(( /x/g .valueOf(\"number\"))) { if ((({ constructor: ({ __proto__: __parent__, __iterator__: ({ __parent__: __iterator__, constructor: __iterator__ }) }) }) = (__count__.__count__ setter= [1,2,3,4].slice.__lookupGetter__(\"__proto__\")).throw(new (({}).__lookupGetter__)()))) {throw (function ([y]) { })();yield; } else {return;/*infloop*/while(__proto__){<x><y/></x> } }}");
tryItOut("/*for..in*/M:for(prop in ((function ()__count__ if (this))(<zzz><><x><y/></x></></zzz>)))new Function");
tryItOut("/*infloop*/M:for(var __iterator__; (<y><z/></y> .@ prototype); [,,]) {; }");
tryItOut("gc()");
tryItOut("/*for..in*/for([__proto__,  /x/g .throw(window)] =  /* Comment */4. && new Boolean() in .2) {/*for..in*/for(let get in (((window).watch)(<><x><y/></x></>))){__count__; }window =  \"\" , constructor = -1; }");
tryItOut("/*for..in*/M:for(let constructor = ({__proto__: ({a1:1}), __proto__:  /x/g  }) = throw #1# in ('fafafa'.replace(/a/g, gc))) {if([({})].some((/a/gi).call)) { if ( ''  && <x/>) {gc() } else export prototype;} }");
tryItOut("/*for..in*/for(var __noSuchMethod__(false) = constructor.__parent__ setter= (1 for (x in [])) in ((yield 3.141592653589793))) {M:if((0 for (__proto__ in 0.1))) { if (<y><z/></y> && __iterator__) {export *;gc() }} else gc() } const __parent__;");
tryItOut("return;");
tryItOut("{throw false; }");
tryItOut("with({__noSuchMethod__: (prop)(window, *::*)})return function(id) { return id };");
tryItOut("let (__noSuchMethod__ =  /* Comment */033) { gc() }\f");
tryItOut("/*for..in*/for(let __parent__ in ((((this.__defineGetter__(\"__parent__\", ({}).hasOwnProperty) instanceof true)[this.__defineSetter__(\"prop\", [1,2,3,4].slice)]))([11,12,13,14].some.unwatch(\"__noSuchMethod__\")))){let (prop, constructor) { return; }<x><y/></x>; }");
tryItOut("/*infloop*/while(.2){let __proto__; }");
tryItOut("/*infloop*/for((1.2e3.*); new @foo() >>= ((({}).__lookupGetter__).call).call(({a2:z2}), <><x><y/></x></>, this) for each (__noSuchMethod__ in  /x/ ) for each (__noSuchMethod__ in *); <x/>--) {/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in [z1]) 'haha'.split(<><x><y/></x></>); }");
tryItOut("/*infloop*/L:while((uneval(\n<y><z/></y>\t.valueOf(\"number\")))){}");
tryItOut("with( { yield (constructor|=<x/>.yoyo(return <y><z/></y>)) } ){if(<><x><y/></x></>) yield <x><y/></x>; else {(prototype);let __iterator__ = @foo; }; }");
tryItOut("yield");
tryItOut("export *;\nlet __count__ = window, __parent__;\n");
tryItOut("if(prototype.constructor) undefined else return <><x><y/></x></>;");
tryItOut("if(constructor = __proto__ = @foo) #1#");
tryItOut("({}).hasOwnPropertylet prototype = <><x><y/></x></>, __parent__ = function::function::constructor;");
tryItOut("M:if(<><xxx {__parent__}={<x/>} /></>) return; else {export __proto__;break L; }");
tryItOut("yield ({prototype: new 'haha'.split(),  get constructor() { 0x99 }  });");
tryItOut("with({each: @foo >>= <employee id=\"1\"><name>Joe</name><age>20</age></employee>})yield prototype;");
tryItOut("/*infloop*/for(__proto__; ((*[undefined]) .@ [,].__proto__); __noSuchMethod__ = (this)(__parent__) = prototype = __proto__) {yield prop;/*for..in*/for(let [] in <y><z/></y>) function (__iterator__, __iterator__)<x><y/></x> }");
tryItOut("M:with( \"\" ){{}throw this; }");
tryItOut("L: while((null) && 0){{}var constructor =  /x/ \f;\t }");
tryItOut("/*for..in*/for(let constructor in [] = eval(\"new <x/>( /x/g )\", new (<x><y/></x>)())) M:with(function::constructor = 3.141592653589793){}");
tryItOut("if( \"\" ) {switch((__iterator__.unwatch(\"prototype\"))) { case 7: yield <y><z/></y>; }constructor; } else  if (undefined.watch(\"__count__\", [1,2,3,4].map)) /*infloop*/while(new (prototype)(prop, <><x><y/></x></>))( \"\" ); else M:do {return;export __proto__; } while((((__proto__ if (this)\f))) && 0);");
tryItOut("let (__iterator__ = (this.__lookupSetter__(\"__iterator__\") === constructor = __noSuchMethod__)) { gc() }");
tryItOut("yield\nreturn;");
tryItOut("/*infloop*/for(var __parent__; yield [,,].isPrototypeOf((<x><y/></x>).__defineSetter__()); let (__count__) 1.2e3 + (<x><y/></x>)[ /x/g ]) let (constructor, __count__) { yield; }");
tryItOut("L:with({__parent__: new ((<><x><y/></x></>.__parent__))( /x/  !== __noSuchMethod__,  \"\" )})(<><x><y/></x></>);");
tryItOut("/*for..in*/for(__proto__ in ((<y><z/></y>)((eval(\"<><x><y/></x></>\", <><x><y/></x></>)))))gc()\nyield;");
tryItOut("throw constructor;");
tryItOut("with({__proto__: <x/>});");
tryItOut(" const constructor\n");
tryItOut("do {return;this } while((constructor = <x><y/></x>.hasOwnProperty(\"__proto__\")) && 0);");
tryItOut("with({}) { ({}).__lookupGetter__ } ");
tryItOut("/*infloop*/while(window)export *;");
tryItOut("return yield 0.watch(\"prop\", function(q) { return q; });");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <><x><y/></x></>) {constructor =  /x/ , __noSuchMethod__;continue ; }");
tryItOut("let(({ prototype: __count__ }) = (({ set __count__() { ; }  })), constructor = <>*</>.(constructor =  \"\" )) { return;");
tryItOut("with({__noSuchMethod__: window.__lookupGetter__(\"constructor\")}){gc()/*for..in*/for(__parent__ = export __count__ in (-0))  }\nreturn eval(\"gc()\", eval(\"*::*;\", this));");
tryItOut("L:if( \"\" .prop) { if ([__count__, , , ] = 0/0) yield *;\nexport *;\n else {gc() }}");
tryItOut("const __parent__ =  '' ;");
tryItOut("{}/*infloop*/L:for(prototype =  /x/ .constructor =  /x/ ; yield true; (delete (function ([y]) { })())) {break M;<x/>; }");
tryItOut("return this\nexport __proto__\n");
tryItOut("return [1]\nL: { \"\"  }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({__proto__ setter: function  prototype (__proto__) { return; }  }) in (true[<x><y/></x>]) >= ({__parent__ setter: undefined,  set __proto__ prototype (__iterator__) { return try { yield ({a1:1}); } finally { export *; } \n }  })) {constructor, constructor = constructor }");
tryItOut("return;");
tryItOut("{throw *;continue ; }");
tryItOut("{Math.pow }");
tryItOut("let (constructor = eval(\"( /x/g  .@*:: <><x><y/></x></>.*).eval((new true(<<x><y/></x></>)))\", <employee id=\"1\"><name>Joe</name><age>20</age></employee>), __parent__ = __noSuchMethod__.((__noSuchMethod__ = <><x><y/></x></>))) { export constructor; }");
tryItOut("with(!undefined)[({ constructor: ({ __iterator__: [] }), (__iterator__): constructor }), ]");
tryItOut("if(((false.isPrototypeOf(this)))((3.141592653589793 for (__count__ in [z1,,])))%=__iterator__[this] .@*:: ((Math.pow).call( \"\" , *))) return; else  if ((__proto__.__parent__ = ( /x/ .__lookupGetter__(\"constructor\"))(new RangeError(true),  '' )).throw(new ((new Function(\"export prototype;\")))(<x/>))) export *;");
tryItOut("/*infloop*/for(var __parent__; [11,12,13,14].filter; *.@*/*\n*/ >> ()) {const prototype = null;L: {{}{} } }");
tryItOut("if(*::*)  else  if ((__iterator__ = this)[(yield @foo)]) {return;[1]; }");
tryItOut(" get c()@foo");
tryItOut("with({}) { continue ; } ");
tryItOut("{with({__parent__: (( /x/g )(eval(\"throw ({a1:1});\", false)) = __iterator__.(((p={}, (p.z = prototype)()))))})__iterator__.__noSuchMethod__ setter= Function; }");
tryItOut("while((((window)([__iterator__, constructor, constructor, __noSuchMethod__] = (#1#(<><x><y/></x></>))) <<= L:if(this) { if ((-0)) let __count__; else {export *; }})) && 0)/*infloop*/for((function(q) { return q; })([[]]); 3/0; new (*)(__parent__, <y><z/></y>)) throw  '' ");
tryItOut("try { with({}) { throw prototype; }  } catch(__parent__ if (function(){throw StopIteration;})()) { return <y><z/></y>; const __noSuchMethod__; } ");
tryItOut("if(\fnew (<><x><y/></x></>)(<><x><y/></x></>, [,,])) { if (new (constructor = ( /x/g (@foo, __proto__)))) {-3/0 } else {const prototype = *::*;M:if(<><x><y/></x></>.__defineSetter__(\"__noSuchMethod__\", {}))  else  if (new <><x><y/></x></>) export prototype; }}");
tryItOut("if( '' ) {return;continue M; } else  if (__count__) {return  \"\" ; } const __proto__;");
tryItOut("yield;");
tryItOut("{M\t:if(((-0).watch(\"prop\", function (constructor, __noSuchMethod__) { yield *::* } ))) {break M;yield window\n; } else (@foo);\nyield null;\n }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = [(function ([y]) { })()].map(function () { yield undefined } ) in (new false(__proto__) > <><x><y/><\t/x></>++)) __count__");
tryItOut("if(new ((function  __count__ (prop, __count__) { yield window } ).call)()) throw <><x><y/></x></>;");
tryItOut("/*infloop*/for(0; eval(\"this\", constructor).__iterator__ = new __noSuchMethod__(); (continue ; = *::*)) {;/*infloop*/M:for(let [constructor, , , , ]\t = __count__ =  '' ; <x><y/></x> << true.watch(\"__iterator__\", this);  '' )  }");
tryItOut("/*for..in*/for(var [constructor, prop] = null++ in  '' ) {let(__proto__, __count__) { this.zzz.zzz;if(({prototype: prop = [1,,]\t, __count__: typeof -1 })) var __count__ = -3/0, prop = <y><z/></y>; else {export __proto__; } }");
tryItOut("/*for..in*/for(const ( { return 0 } )(<x><y/></x>) in ((window['__noSuchMethod__'] = <x><y/></x> + .2)(([(__parent__) >>= -__iterator__])))){M:with(<><x><y/></x></>){return; }var constructor = <y><z/></y>; }");
tryItOut("yield [15,16,17,18].sort([1,2,3,4].map, -1);");
tryItOut("if('fafafa'.replace(/a/g,  /x/g ).propertyIsEnumerable(\"__parent__\")) { if (@foo + *::*) const prop, prototype;} else {yield this;export *; }");
tryItOut("M:if((new true .. window(<><x><y/></x></>, -0)) .. <x/>.isPrototypeOf(\f<x><y/></x>)) {/*infloop*/for(const constructor; window; window) throw <><x><y/></x></>; } else  if (true.__lookupGetter__(\"prop\")) export *; else {<!--yy--> }");
tryItOut("with({__noSuchMethod__: (void prototype.constructor = true)})return __count__.constructor = __noSuchMethod__;");
tryItOut("/*for..in*/for(var prop in (((undefined).watch)(( /* Comment */<x><y/></x>.(<x/>))(function ([y]) { }.throw(prop)))))if('fafafa'.replace(/a/g, gc)) {let __noSuchMethod__;break ; } else  if (0/0) const prototype = this, constructor; else const prototype, prototype = false;");
tryItOut("with(<><x><y/></x></> for each (__iterator__ in *::*)){(1.2e3); }");
tryItOut("/*for..in*/L:for(var prop =  /x/  in (-0)) ");
tryItOut("L: ({a2:z2})");
tryItOut("if(([<x><y/></x>])) { if ((this -= (function ([y]) { })())) /*for..in*/for(let __proto__ = 1e81 > <><x><y/></x></> in this) <x><y/></x> else {return; }}");
tryItOut("this.zzz.zzz;");
tryItOut("return;");
tryItOut("(<x/>)\n<x/>; const prototype;");
tryItOut("try { yield <y><z/></y>; } catch(prototype) {  } finally { function  prototype (__count__) { yield <x/> }  } ");
tryItOut("L:if((eval(\"false.isPrototypeOf(window)\", (__proto__(*::*))++)).eval(String(*::*,  /x/g ).hasOwnProperty(\"__parent__\"))) {return false;(-0); } else  if (__proto__ = prototype =  /x/ ) /*for..in*//* nogeckoex bug 349964 */ for  each(let <x/>.isPrototypeOf(undefined)['prop'] in -0) {gc } else /*for..in*//* nogeckoex bug 349964 */ for  each(const <x/> in <><x><y/></x></>) {false;while(( /x/g ) && 0)\n }");
tryItOut("if((this.__defineGetter__(\"__proto__\", window)).throw(({constructor: [,,z1], __proto__ setter: function  __parent__ (prop, __parent__) { yield; }  })).__defineSetter__(\"__proto__\", function(y) { yield y; (1 for (x in [])); yield y; })) { if (#1#) ;} else {(throw this);function (__proto__)<x/> }");
tryItOut("M:with(this.__defineSetter__(\"__count__\", function  constructor () { yield __noSuchMethod__ } )){@foo, __count__; }");
tryItOut("/*infloop*/while(__iterator__){break M; }");
tryItOut("\n");
tryItOut("with({__iterator__: ([15,16,17,18].map(null, new RegExp()))})var prototype =  /x/ ;");
tryItOut("gc()");
tryItOut("while((true) && 0){const __proto__;return; }");
tryItOut("for(let y in []);");
tryItOut("{let __iterator__ = constructor; }\nL: {gc() }\n");
tryItOut("/*infloop*/for(var __iterator__; null.yoyo(prototype).__noSuchMethod__; ) {return; }");
tryItOut("return [15,16,17,18].filter(this, let (__count__ = constructor) *::*);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (constructor)(this) in window) {yield 1e-81; }");
tryItOut("return <x/>\nthrow this;");
tryItOut("return;");
tryItOut("<><x><y/></x></>");
tryItOut("if(*) { if ([1]) __proto__ = this, prototype; else }");
