tryItOut("let (prototype) { /*for..in*/for(const prop = __count__|=window in function (__iterator__, prototype) { return <x/> } ) /a/gi }");
tryItOut("constructor");
tryItOut("var prop;if(__proto__) gc() else  if (<><x><y/></x>\f</>) {return  '' ; } else {{} }");
tryItOut("{{} }");
tryItOut("do return @foo; while(((-1 != <x/>.isPrototypeOf(window).__lookupSetter__(\"prop\"))) && 0);");
tryItOut("/*infloop*/for(\t(\n<x/>.throw( /x/ )); (*::*).__defineSetter__; undefined) /*for..in*/for(let [__count__, constructor] =  \"\"  in this) ;");
tryItOut("{prop(__proto__) getter: new Functionreturn  /x/ ; }");
tryItOut("while((__proto__ :: true === 'fafafa'.replace(/a/g, (__parent__).watch)) && 0)__iterator__, __parent__");
tryItOut("/*for..in*/for(let prototype = <x/> .@ __noSuchMethod__-- in window) export __noSuchMethod__;");
tryItOut("return (((try { yield window; } finally { let prototype = 3/0; }  if (<y><z/></y>)))[(__count__.((([1,2,3,4].slice)( '' ))))]);");
tryItOut("/*infloop*/for(this.__defineGetter__(\"__proto__\", *::*) |= window; (function ([y]) { })(); ~(true\n)) /*for..in*/for(__proto__ = __parent__.__parent__ in (Function())) {if(#1=null.unwatch(\"constructor\")) /*infloop*/for([,]; @foo; 5.0000000000000000000000) {__proto__ setter: (<><x><y/></x></>).__defineSetter__ } }");
tryItOut("throw #1=[#1#]; const prototype; const constructor;");
tryItOut("L:if(<><bbb xmlns=\"[, , ] = <y><z/></y>\f\">yyy</bbb></>) { if ( \"\" ) {/*infloop*/for(let __proto__; 0.1; 3.141592653589793) let __count__ = *::*;let __iterator__; }} else (*);");
tryItOut("M:while(( /x/g : (<x><y/></x>.(null)).prototype = 1e81) && 0){export *;(this); }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = <><x><y/></x></>.__parent__//h\n; #0=*::*; (__noSuchMethod__ =  /x/ )) yield;");
tryItOut("break M;\n(new Function(\"\"))\n");
tryItOut("for(let y in [5,6,7,8]) yield;");
tryItOut("/*for..in*/for(const __proto__ in (__noSuchMethod__)) {export *;\nyield window;\n }/*infloop*/while(new (constructor)(undefined)){ }");
tryItOut("/*infloop*/L:for(var ({ __proto__: __parent__, __count__: constructor }) = 'fafafa'.replace(/a/g, [1,2,3,4].slice); (__proto__++); (prototype = <><x><y/></x></>)) {{} }");
tryItOut("(new Function).apply");
tryItOut("/*infloop*/for(3/0; (<x/> ^= <><x><y/></x></>); [* for (__parent__ in  \"\" )]) <y><z/></y>;");
tryItOut("if(<y><z/></y>--) yield window\nlet(prototype, function::__iterator__ = true) ((function(){return;})());");
tryItOut("{if((eval)) { if ((3)(null)) ({}).__lookupGetter__ else {continue ;(<x><y/></x>); }}throw <x/>; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((! { yield null .@*:: <x><y/></x> } )(this.__defineGetter__(\"prop\", <><x><y/></x></> = <><x><y/></x></>)))){yield; }");
tryItOut("with(<><x><y/></x></>){ }\nwith([,] ? [] : <y><z/></y>)M:if(<x><y/></x>) export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in prop = 0/0) {{while((prototype) && 0); }throw (<y><z/></y>)(*::*, this); }");
tryItOut("if(true) { if ([15,16,17,18].map(gc, prototype+=__iterator__)) with(!*::*)export *; else {/*for..in*/for(const __iterator__ in ((<><x><y/></x></>)(true))){const  /x/g ; } }}");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((<x/>).__defineSetter__)(__proto__))){yield; } const __proto__;");
tryItOut("/*for..in*/for([__iterator__ = __proto__;, __proto__] = ({ prototype: __count__, __noSuchMethod__: __noSuchMethod__ }) in  \"\" ) /*for..in*//* nogeckoex bug 349964 */M: for  each(let ({a2:z2})['prop'] in window) {return; }");
tryItOut("gc()\nwith(constructor.prop getter= (new Function(\"yield null;\"))){undefined;return this; }\n");
tryItOut("yield; const __noSuchMethod__;");
tryItOut("with(yield <><x><y/></x></> < ({__iterator__: <><bbb xmlns=//h\n\"(+ /x/g )\">yyy</bbb></>})){/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x/>) {throw <><x><y/></x></>; };(window)(<><x><y/></x></>).__parent__ = constructor = -1");
tryItOut("L:if(<x><y/></x>) {export __proto__; }");
tryItOut("let (default: /*for..in*/for(const __parent__ = #3={a:#3#} ? <x><y/></x> : <><x><y/></x></> in *) {return;export __parent__; }/*for..in*/for(let constructor = (this)() in __count__) new Functionyield this.__defineGetter__(\"prototype\", function(y) { yield y; ; yield y; });break; case 0: break; case ((p={}, (p.z = (+prototype))())): , ({ __noSuchMethod__: ({ prop: [, ] }//h\n), getter: ({ prop: constructor, __parent__: constructor }) })) { return; }");
tryItOut("(<x><y/></x>);\n{}\n");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in  /x/ ) const __noSuchMethod__;(__noSuchMethod__ = <x><y/></x>); }");
tryItOut("/*for..in*/for(let __proto__ = (uneval(undefined)) in (-1)) {throw <><xxx {\t__count__}={window} /></>;\nyield  '' ;\n }");
tryItOut("M:if((--__noSuchMethod__++)) { if ((--window.__defineGetter__(\" \", ({}).hasOwnProperty))) yield;} else export *;");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("export *; const constructor;");
tryItOut("/*infloop*/do {do window; while((({})) && 0); } while((((<><x><y/></x></>))));");
tryItOut("L:if( ''  <<= (\fvoid <><x><y/></x></>)) { if (__noSuchMethod__.(__count__.(((<x><y/></x>)[.2])))) return;\n{}\n} else with( '' ){var __parent__ = <y><z/></y>, constructor = (-0);yield; }");
tryItOut("{let(each = <x><y/></x>, __parent__ = <x/>) ((function(){const get;})());if(<><x><y/></x></>) {<><x><y/></x></>; } }");
tryItOut("while((<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(__proto__ = 033.valueOf(\"number\").__lookupGetter__(\"__iterator__\"))) && 0)for(let y in [5,6,7,8])  \"\" ;");
tryItOut("{continue ;let constructor = <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(var __parent__ = ([] = __iterator__.(undefined)) - constructor+=<y><z/></y>.isPrototypeOf(__count__ = #3={a:#3#}.yoyo(<x><y/></x>) :: __parent__ = null) in (constructor.(window))) {switch(__proto__ = true) { default: prop } }");
tryItOut("this;");
tryItOut("if(null.__lookupSetter__(\"__count__\")) {/*infloop*/for(const prototype = false; <><x><y/></x></>; window) throw false } else /*infloop*/do constructor.prototype while(<y><z/></y>);");
tryItOut("/*infloop*/for((window).call(null, __noSuchMethod__, window); ; new (-3/0)(prop)) {yield;__count__ =  /x/ ; }");
tryItOut("with({__iterator__: [15,16,17,18].map(function  constructor (prototype) { return set; } , @foo.hasOwnProperty(\"__parent__\"))})with(<x><y/></x>){(<y><z/></y>); }");
tryItOut("L: {const __proto__ =  \"\" ; }");
tryItOut("with('fafafa'.replace(/a/g, new Function))yield;");
tryItOut("/*for..in*/for(const [__count__, __parent__] = [15,16,17,18].some([1,2,3,4].map, (this.__defineGetter__(\"__noSuchMethod__\", 3/0))) - (<x><y/></x>.watch(\"constructor\", (window).__defineSetter__) @ __noSuchMethod__ = this) in ({ constructor: __proto__ }) = this.__defineGetter__(\"constructor\", (Function).apply)) /*for..in*//* nogeckoex bug 349964 */\fL: for  each((function::__iterator__) in [ /x/g  ? [z1,,] : <x><y/></x>]) __parent__, __count__ = <y><z/></y>;");
tryItOut("while(((__iterator__ = __iterator__)) && 0)/*infloop*/for(; -(<x><y/></x> for each (prototype in prop)); [15,16,17,18].filter( \"\" ,  \"\" )) { }");
tryItOut("continue \nthis;");
tryItOut("if(with({}) return (5.0000000000000000000000.__proto__);) {let (__count__ = false) { switch(*) { case 6: export *;break;  } } }");
tryItOut("throw StopIteration;");
tryItOut("try { prop.prop = constructor; } catch(constructor) { return (__noSuchMethod__ = __noSuchMethod__); } finally { for(let y in [5,6,7,8]) Function } ");
tryItOut("/*for..in*/for(let [__count__, getter] = (yield (+([, , constructor] = (Error(arguments, <y><z/></y>))))) in ({__proto__: null <=  '' .__lookupSetter__(\"prototype\")})) if( '' ) { if (#3={a:#3#}) yield <x><y/></x>; else continue ;}\n;");
tryItOut("return ({});");
tryItOut("/*for..in*/for(let [__parent__, __parent__] = <x><y/></x>yyy in *) {return; }");
tryItOut("yield <x/>;");
tryItOut("/*infloop*/for(var prop = ((-1) for (__proto__ in function(id) { return id })); __count__; (function(y) { yield y; export *;; yield y; }(<y><z/></y>))\t) {const constructor = __parent__, prop; }");
tryItOut("/*infloop*/do {return; } while(((function ([y]) { })() * window));");
tryItOut("/*for..in*/for(prop in (false && prop)) /*infloop*/do (this); while((({ set prototype(prop, constructor) { ; } ,  get prop __iterator__ (prototype, __proto__) { yield null }  }).@foo));");
tryItOut("if((new (((yield <><x><y/></x></>)))( /* Comment */__parent__ = <><x><y/></x></>, <><x><y/></x></>.hasOwnProperty(\"__count__\"))).prototype = <><{prop}><!--yy--></{prop}></>) {/*infloop*/do {var __iterator__ = *::*, prototype;export *; } while(<x><y/></x>);false } else  if ((new (({}).__lookupGetter__)(<y><z/></y>, (uneval(window)))) += (this.zzz.zzz)) prototype = <></>; else function::setter");
tryItOut("/*infloop*/L:do L:switch(-1.__defineSetter__(\"prop\", (this).watch).@*) { case 2: (function () { throw #1#; } ).callbreak;  } while((prop.__noSuchMethod__ = prop.(__parent__)).__defineGetter__(\"__noSuchMethod__\", (<><x><y/></x></>)([z1,,])));");
tryItOut("if(new (*)(1e4, window)) {{} } else  if (<bbb xmlns=\"[z1,,]\"><!--yy--></bbb>) break L; else gc()");
tryItOut("prop = __noSuchMethod__;");
tryItOut("/*infloop*/L:do break ; while(__count__)");
tryItOut("L:  const __proto__;");
tryItOut("if(__iterator__) export *; else export *;");
tryItOut("L: {/*for..in*/for(const [__iterator__, prototype] = prop !== 1e4 in this) return; }");
tryItOut("throw __noSuchMethod__;");
tryItOut(" ;");
tryItOut("do {} while((#1=[#1#]) && 0);");
tryItOut("return;");
tryItOut("return new (*::*)(({a2:z2}));");
tryItOut("{yield ({a2:z2});let __iterator__; }");
tryItOut("{;continue ; }");
tryItOut("/*infloop*/do {L:if(prototype = window) { if (<><x><y/></x></>()) yield; else (false);}for(let y in [5,6,7,8]) let(__count__) { <x><y/></x> } while(__count__ setter: ({}).__lookupGetter__ = @foo.@*);");
tryItOut("/*for..in*/for(__noSuchMethod__ in true) export *;");
tryItOut("/*infloop*/for(({ __count__: (prop), constructor: constructor }) = <x><y/></x>( \"\" , __parent__).throw(\f(prop.prop)); var prototype = <x/>; __proto__.(undefined)[(-prototype, prototype)]) if((eval).call(constructor = prop, typeof undefined)) { if (({*::* getter: function(q) { return q; } })) {\fyield 0/0; }} else \t<y><z/></y>;");
tryItOut("/*infloop*/for(let __parent__; (@foo[*::*]); __iterator__ = (let (constructor = this) __iterator__) && [<x><y/></x>].filter((function (prototype) '' ).apply)) const __parent__\n;");
tryItOut("if(__iterator__ instanceof (get.constructor)) {yield;let __parent__; } else  if ((<x><y/></x>)(null, this)) yyy");
tryItOut("if(((uneval(-1)))) /*for..in*/for(const prototype = __noSuchMethod__ in <y><z/></y>) __parent__, __proto__;");
tryItOut("/*infloop*/L:for(var constructor; <><x><y/></x></>.constructor = constructor; __proto__.__iterator__) /*infloop*/for(this; true;  /x/ ) __noSuchMethod__, __iterator__ = 1e+81;");
tryItOut("let (({ __iterator__: constructor })) { for(let y in [5,6,7,8]) yield; }");
tryItOut("/*infloop*/for(var ({ __iterator__: __noSuchMethod__, \t__count__: ({ __noSuchMethod__: __iterator__ }) }) = try { export *; } finally { gc() } ; ('fafafa'.replace(/a/g, (*).call)); <x/>.unwatch(\"__parent__\")) \farguments;/*\n*/");
tryItOut("M:with(<x/> = __parent__.__iterator__)if(true) gc else  if (<x/>) {<x><y/></x>; }");
tryItOut("L: gc()");
tryItOut("L: {if(this) export function::__iterator__; else yield 0x99; }");
tryItOut("if([z1].__lookupGetter__(\"__proto__\")) { if (!window.propertyIsEnumerable(\"prototype\")) {return 1e81;M:if( '' ) { if (prototype) {return <x><y/></x>;{} } else __parent__;} } else {export *;\n(@foo);\n/*infloop*/for(__parent__; ( /x/ .__lookupGetter__(\"__noSuchMethod__\")); #0=({constructor: __iterator__})) {export *;; } }}");
tryItOut("while((<><x><y/></x></>) && 0){return <x><y/></x>;(function ([y]) { }); }");
tryItOut("L:if(new ([<x><y/></x>])) if(<x/>) yield; else  if (null) \nreturn <y><z/></y>; else {(null).watch }");
tryItOut("while((prop = (this % <><x><y/></x></>.yoyo(({prop: 1e4,  set prototype(__proto__, delete) { yield __count__ }  }))) = ([,].isPrototypeOf(([__iterator__].some((new Function(\"continue L;\"))))[*::*])) ? @foo.yoyo(this) : prototype ? <><x><y/></x></> :  /x/g .prop) && 0){yield constructor = <y><z/></y>;throw <x><y/></x>; const prop; }");
tryItOut("/*infloop*/L:for(let __iterator__; <y><z/></y> ? <x>\t<y/></x> : <x><y/></x> >= this ^= <x/>; ({__count__/*\n*/ setter: 'haha'.split, prototype: ((new (/a/gi)(function(id) { return id }))[__iterator__-=(this >= *::*)])(<x/> /= <x/>)/*\n*/ })) /*infloop*/L:while(0x99 || <x><y/></x>)function(y) { yield y; let __proto__, __parent__;; yield y; }");
tryItOut("with({__parent__: 'fafafa'.replace(/a/g, ({a2:z2}))\f}){continue M; }");
tryItOut("/*for..in*/for(prototype: [15,16,17,18].some((constructor.__parent__ = *, <><x><y/></x></> - (-1)).__defineSetter__, (<x><y/></x> &&  /x/g )) in ((('fafafa'.replace(/a/g, ({__noSuchMethod__ getter: function  __iterator__ (constructor, prop) { yield <><x><\ty/></x></>; }  }))).call)(undefined))){{export __parent__;var prototype = prototype, __iterator__; }if(eval(\"({}).hasOwnProperty\", this))  else  if ((<><x><y/></x></>.prototype)) function(y) { yield y; export prototype;; yield y; }//h\n }");
tryItOut("{}\nlet prototype = <x/>;");
tryItOut("return;");
tryItOut("/*for..in*/for([__count__, __count__] = (*::*\n) in [1]) {( /x/g );break M; }");
tryItOut("let ([prop, ({ __parent__: prototype }), ({ constructor: ({ __count__: __count__, __proto__/*\n*/: __count__ }), __proto__: ({ __proto__: __parent__ }) }), ], prototype = ([1,2,3,4].map)()) { return <x><y/></x>; }");
tryItOut("(this);");
tryItOut("if(([({a1:1})].sort(( /x/g ).apply))) {return;break L; } else  if (__parent__) export *;");
tryItOut("do {{}return; } while(((yield window)) && 0)");
tryItOut("throw this");
tryItOut("try { __iterator__, __parent__ =  '' ; } catch(__parent__ if (function(){yield this;})()) { ; } ");
tryItOut("/*for..in*/for(prop = (yield <x/>).__iterator__ = undefined[(( /x/g )(<><x><y/></x></>))] in <x><y/></x>) {export __iterator__; }\nL: {__parent__ = __proto__; }");
tryItOut("M:switch((<bbb xmlns=)<x><y/></x>.(__proto__)\">yyy</bbb>(prop = prototype).watch) { case 1:  }");
tryItOut("/*for..in*/for(__parent__ in ((#2=({setter: (* << (function ([y]) { })())}))((this.__defineSetter__(\"prototype\", (new Function(\"yield;\")))))))");
tryItOut("/*infloop*/do {return; } while(new #3={a:#3#}(undefined,  \"\" ) == yield <x><y///h\n></x>);");
tryItOut("({ __noSuchMethod__: prototype, __noSuchMethod__: [, __noSuchMethod__, , [, , ({ __parent__: constructor, prototype: \t__noSuchMethod__ }), ], [({ __proto__: prop, __proto__: prop })]] })");
tryItOut("return true;");
tryItOut("with({__count__: prototype})0.1;");
tryItOut("/*infloop*/do \fwhile((window) && 0); while(this);");
tryItOut("this.zzz.zzz;");
tryItOut("do {/*infloop*/do {;\f } while(<x/> ? [*].map((function (__noSuchMethod__, __proto__)null).apply) : new String(__noSuchMethod__ = __proto__)); } while((\f<ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd>.(prop = <y><z/></y>)) && 0);");
tryItOut("L:with({prop: (p={}, (p.z = ([11,12,13,14].map)(prototype ? [[1]] : 0))())}){return;const __proto__ = <x><y/></x>, let; }");
tryItOut("if(__parent__ = (yield <x><y/></x>).propertyIsEnumerable(\"function::constructor\")) { if (__noSuchMethod__ = window) {windowL:if(033) {throw prop; } else  if (<x><y/></x>) {;__iterator__ = true; } else throw *::*; } else yield 0/0.yoyo(<x><y/></x>);}");
tryItOut("/*infloop*/do export *; while([z1]);");
tryItOut("/*for..in*/L:for(let (__count__) in (([1,2,3,4].slice)(constructor.())))/*for..in*/for(const [constructor, __proto__] = __proto__ = 1e-81 in <><x><y/></x></>) {var delete, set = <y><z/></y>; }");
tryItOut("if((Function)( /x/  /  '' ) @ [] = ({ prop: [, prototype] })) {gc()/*infloop*/do let constructor =  /x/ ; while(<x/>); } else M:do gc() while(([[1]];");
tryItOut("/*infloop*/do arguments while(3.141592653589793);");
tryItOut("while((<><x><y/></x></>) && 0){__proto__, __proto__ = <y><z/></y>; }");
tryItOut("L:with((* >>> <><x><y/></x></>))/*infloop*/while((<y><z/></y> .@*:: true))yield;");
tryItOut("/*for..in*/for([__proto__, __count__] = (<y><z/></y> for each (__iterator__ in this)) in __iterator__) {return; }");
tryItOut("with({setter: <employee id=\"1\"><name>Joe</name><age>20</age></employee>}){switch(constructor.(this) %= prototype = window) { default: break;  } }");
tryItOut("if((function () { return <x/> } ).call(((new Iterator()) ? [11,12,13,14].some : __parent__ = [,]), __count__, [11,12,13,14].filter)) yield else {with(1e4){}const prototype = __parent__, __proto__ = __proto__; }");
tryItOut("/*infloop*/do export __parent__; while((( /x/g )()));");
tryItOut("let (prototype = 0/0) { {} }");
tryItOut("L:if(undefined) if([<x><y/></x> if (window)]) Math.sin else (<x><y/></x>); else  if ((p={}, (p.z = (/a/gi)(<y><z/></y>(__proto__), __proto__).__lookupGetter__(\"__count__\"))())) return;");
tryItOut("let (prototype = 'fafafa'.replace(/a/g, ({}).__lookupGetter__), __iterator__ = (* <<= 1e4)) { throw this >>> [1]; } const __count__;");
tryItOut("do {/*for..in*/for(let prop = ((__proto__)( /x/ , @foo).@foo) in #3={a:#3#}) {{}( \"\" ); } } while(([({ get __iterator__ prop (__proto__, __count__) { yield 0/0 } , __parent__: __iterator__+= \"\"  }) for (__iterator__ in __proto__ = (<x/>)(this) = [1]) for (__proto__ in prototype = prototype) for (__noSuchMethod__.__parent__ in prototype) if (<x><y/></x>)]) && 0);");
tryItOut("/*infloop*/do {__count__;gc() } while(<x><y/></x>.hasOwnProperty(\"__parent__\"));");
tryItOut("if((({__proto__: 3.141592653589793,  set __count__(__iterator__) { yield this.__defineGetter__(\" { yield __iterator__.__iterator__ getter= \\t({}).__lookupGetter__ } \", gc) }  }))) { if (4.) ;} else {(*::*); }");
tryItOut("if(if([11,12,13,14].map) { if ((let __iterator__, each)) {export function::constructor; } else {;return <><x><y/></x></>; }}()) { if ( /* Comment */1.3.__count__ = <x><y/></x>.(__parent__)) prop; else while(([,]) && 0){try { export __noSuchMethod__; } finally { return undefined; }  }}");
tryItOut("switch(*::*) { case 2: break; case ((new Function(\"null;\")))((__parent__ = *::*), get): break; if(@foo) var __noSuchMethod__ = [z1]; else  if (constructor) {yield <x/>; }break;  }");
tryItOut("/*infloop*/M:while(new *::*((__count__.(prototype))[<>undefined</>.(prototype =  /x/g )], (__noSuchMethod__.__count__ =  \"\" .__defineGetter__(\"prop\", function (prop, __iterator__) { gc } )))){this.zzz.zzz;/*for..in*/for(__noSuchMethod__ in ((*::*)(window))){break ; } }");
tryItOut("/*for..in*/for(const  { return 1e4 }  in ((function (constructor) { yield this.__defineSetter__(\"function::__noSuchMethod__\", Math.pow) } )([<x><y/></x> for (__iterator__ in <><x><y/></x></>)].propertyIsEnumerable(\"__parent__\"))))<>(prototype = <><x><y/></x></>)</> ");
tryItOut("'haha'.split\n");
tryItOut("let (__noSuchMethod__, __parent__) { if(window.x::__noSuchMethod__.hasOwnProperty(\"__proto__\")) { if (eval(\"{\\t}\",  \"\"  , false)) return window;prototype; else yield;} }");
tryItOut("let (__noSuchMethod__, constructor = prop.constructor) { L:if(<x><y/></x>) { if (<><x><y/></x></>) {return; } else {yield; }} }");
tryItOut("/*infloop*/while(033)/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in *::*) { }");
tryItOut("L: {break Mconst prop = this, __parent__; }");
tryItOut("return;");
tryItOut("L:switch((({ set <ccc:ddd> </ccc:ddd> __noSuchMethod__ ()<><x><y/></x></>, __iterator__ setter: function  __proto__ (__proto__ getter: [1,2,3,4].map) { yield ({a1:1}) }  }))) { default: case 1: break;  }");
tryItOut("M:while((prototype.((.2.valueOf(\"number\")))) && 0){yield;const __parent__, __count__ = undefined; }");
tryItOut("if(0x99 , <x/>) { if (this.zzz.zzz) ;} else export *;");
tryItOut("for(let y in []);");
tryItOut("let (__count__, __proto__(*) = new (__iterator__ = prototype)(new (prototype+=false)(*::*.eval(prop), <><x><y/></x></>), __count__ = this)) { if((<x/>)(<x><y/></x>, <y><z/></y>)) throw window\n }");
tryItOut("if(0/0) { if (window) ;} else {<><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(let [prototype, __iterator__] = (__noSuchMethod__ = prototype) in <x><y/></x>) {window;yield (-1); }");
tryItOut("prop = __count__;");
tryItOut("export __proto__\t;");
tryItOut("/*for..in*/for(var __iterator__ = (<y><z/></y>)(true, @foo) in new ([15,16,17,18].sort((function(q) { return q; }).apply, prop / <y><z/></y>))()) {gc() }");
tryItOut("{(({a1:1}));yield [,,z1]; }");
tryItOut("/*infloop*/L:do {let (__parent__) { return; }for(let y in []); } while([undefined for each (prop in 3/0)]);");
tryItOut("{with(*::*){throw 1e-81; } }");
tryItOut("if(((({prop: (yield (prop).__defineSetter__)})).__lookupGetter__(\"constructor\"))) { if (<><!--yy--></>) (try { yield <x><y/></x>; } catch(__count__ if (function(){yield false;})()) { return window; } catch(__proto__) { throw 1e+81; } finally { break ; } );} else {(-1); }{__proto__; }");
tryItOut("if( /x/ var prototype = <><x><y/></x></>, __iterator__ = .2;\r else {prop = this; }");
tryItOut("throw StopIteration;");
tryItOut("{L:if(__proto__.@*) {let __noSuchMethod__, __noSuchMethod__ = <x><y/></x>;false; } else  if ((<x/> , *::*)) export *; }");
tryItOut("(this);L:if(<y><z/></y>)  { export //h\n__noSuchMethod__; } ");
tryItOut("/*for..in*/M:for(prototype in (new (undefined)(5.0000000000000000000000))) {break L; }");
tryItOut("with(function(id) { return id }){switch((prop)[default: break;  = 5.0000000000000000000000]) { case (( /x/g  if (window))): /*infloop*/for(prop = 0x99/*; @foo; ) {yield;var __parent__, prop; } } }");
tryItOut("if( /x/ ) {} else  if (null) return;");
tryItOut("if(yield) { if (@foo.__proto__) {{}var __parent__, __noSuchMethod__ = \f<><x><y/></x></>; }\f else {('haha'.split).callexport *; }}");
tryItOut("/*for..in*/L:for(let __parent__ in [15,16,17,18].sort( '' , constructor)) {gc()return; }");
tryItOut("/*infloop*/for(let [__noSuchMethod__, ({ __count__: prop, constructor: [({ __iterator__: ({ __count__: prototype, __parent__: \n({ __parent__: constructor, __noSuchMethod__: ({ __noSuchMethod__: constructor }) }) }), __parent__: ({ __count__: ({ __iterator__: __iterator__, prop: ({ __count__: constructor }) }), __proto__: ({ __iterator__: __proto__ }) }) }), [__proto__.__iterator__, ({ prototype: ({ __count__: prop }) }), ({ __iterator__: ([z1,,])(*), __noSuchMethod__: [[prop, prop, prop, x::prop, ], , , ({ __iterator__: __count__ }), ] }), , ({ __proto__: [, ] })], , ] }), ({ function::({ prototype: ({ prototype: ({ __noSuchMethod__: prop, constructor: [] }), constructor: __proto__ }), constructor: prop }): ({ __proto__: ({ prototype: ({ __parent__: prop }) }) }) }), ] = (((eval(\"var __count__;\", <x/>.@*)))[Object() = (<y><z/></y>).call(this, __count__)]['prop']); __noSuchMethod__ = ({ __proto__: __count__, prop: constructor }); new Number(__noSuchMethod__,  /x/ )) let([__parent__, __parent__, ({ __parent__: prototype }), prototype, [__iterator__, ]] = undefined ^ <y><z/></y>) ((function(){throw constructor;})());");
tryItOut("/*infloop*/for(var __count__; (yield <x><y/></x>); prototype%=<x><y/></x>) {{} }");
tryItOut("export *;return;");
tryItOut("/*for..in*/for(__parent__ in String(__noSuchMethod__) if (1e-81)) {(<><x><y/></x></>); }");
tryItOut("/*infloop*/do  while(<><zzz>([] = )</zzz></>);");
tryItOut("{yield; }");
tryItOut("let __iterator__, __parent__ = 1e-81");
tryItOut("/*for..in*/M:for(const __count__ = (\n \"\" ) in (({ __proto__: __count__, constructor: prop }) = prototype & <><x><y/></x></>)) {if(<x><y/></x>)  '' ; else ( '' ).__defineSetter__ }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = (__proto__-=0.1.valueOf(\"number\")) in Iterator()) /*infloop*/while(('haha'.split( \"\" ))){gc() }");
tryItOut("{(<> prop.__proto__ <x><y/></x>'/>);/*infloop*/L:do {throw ;continue M; } while(window); };");
tryItOut("/*for..in*/for(__proto__ in ((function (constructor, prototype) { return [1] } )(constructor))){export *; }");
tryItOut("/*for..in*/for(const __count__ = ({ constructor: prop }) = (*::* ? * :  '' ) in 1e4.__defineGetter__(\"prototype\", ((null).apply).call)) get;");
tryItOut("if((yield \r'fafafa'.replace(/a/g, gc): (<><x><y/></x></>--))) {}");
tryItOut("var __proto__;\n/*infloop*/for( \"\" ; this; *::*) {<><x><y/></x></>; }\n");
tryItOut("L: ;");
tryItOut("/*infloop*/M\n:for(const constructor; -3/0; window) {if( /x/g ) {gc()return @foo; }(true); }");
tryItOut("for(let y in [5,6,7,8]) return <y><z/></y>[<x><y/></x>];");
tryItOut("L:do {{}throw [[1]]; } while((__iterator__ |= undefined) && 0);");
tryItOut("/*for..in*/L:for(var constructor = (<x><y/></x>.valueOf(\"number\").eval((new (function  prototype (__proto__) { throw true; } )()))) in <x/>.eval([z1])) let (__count__) { let , __count__ = <x><y/></x>; }");
tryItOut("switch(__iterator__.__iterator__) { case (Function).call([11,12,13,14].some, @foo): break;  }");
tryItOut("for(let y in [5,6,7,8]) __noSuchMethod__ = __parent__;");
tryItOut("/*for..in*/for(let __iterator__ =  /x/  * <!--yy--> in ((((new Function(\"new Function\"))).apply).apply).call(( '' .yoyo(window)).hasOwnProperty(\"prototype\"), ( = __parent__ .@*::  \"\" ))) /*for..in*/for(let ({a2:z2})['prototype'] in <><x><y/></x></> < <><x><y/></x></>) {/*infloop*/L:for(__noSuchMethod__ = <x><y/></x>; <x><y/></x>; (-0)) export *;if([[1]]) throw <><x><y/></x></>; else {continue L; } }");
tryItOut("with((p={}, (p.z = ({a1:1}))())){; }");
tryItOut("/*infloop*/for((({__iterator__: new ({}).watch(!-1), prototype: (<x></*\n*/y/></x>.yoyo( /x/g )).eval((window.isPrototypeOf(this))) })).__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }); [#3={a:#3#} *= <><x><y/></x></> for each (__noSuchMethod__ in function ([y]) { }) if (prop)]; (p={}, (p.z = <x>/*\n*/<y/></x>)())) if(undefined) {undefined;throw #3={a:#3#}; } else  if (({ get __iterator__  \"\"  (__proto__, prop) { export __noSuchMethod__; } ,  get prototype(__noSuchMethod__, constructor)<><x><y/></x></> }).unwatch(\"prototype\")) {break ; } else continue M;");
tryItOut("L:if(<x/>) { if (constructor) export prototype; else {function(y) { yield y; export *;; yield y; }return prop; }}");
tryItOut("L:if(new (({ set function::prop(__iterator__) { return __parent__.constructor }  }))((uneval(@foo)), 3.141592653589793.eval(<x/>))) break ; else  if (prop.__defineSetter__(\"__proto__\", eval)) ;");
tryItOut("let(__iterator__ = __parent__, __noSuchMethod__) { const __proto__, prototype;");
tryItOut("if( { yield  /x/  } ) {__parent__yield *; }");
tryItOut("break L;");
tryItOut("if((([this.__defineSetter__(\"__proto__\", function (prop, __iterator__)<><x><y/></x></>)]).@foo)) {export constructor;gc()\nyield true, window; } else  if (new Array((Math.sin).apply(), <x><y/></x> .@x::  \"\" ).propertyIsEnumerable(\"constructor\")) {if(3/0 ?  \"\"  : 0x99) export __proto__;continue ; }");
tryItOut("/*infloop*/for(var [[, ({ __proto__: ({ __count__: (yield *).window }) }), ({ __parent__: [], __count__: __iterator__ }), ]] = <x><y/></x>.* /= [prototype for (prop in @foo)]; <x/>/*\n*/; constructor.__proto__ getter= ({__iterator__: (-0), __noSuchMethod__: *::* }) <= 'fafafa'.replace(/a/g, (1 for (x in [])))) break ");
