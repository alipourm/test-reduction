tryItOut("if(\fDate(prop + window))  else  if (new Boolean([15,16,17,18].filter(({}).hasOwnProperty, -<><x><y/></x></>), (__count__ = 033))) throw ({a2:z2}); else /*infloop*/for(<x/>; this; [,,]) const constructor, __noSuchMethod__;");
tryItOut("{throw undefined;this; }");
tryItOut("let(prop, __iterator__) { let(prop = (<y><z/></y>)()) { let(__iterator__) ((function(){return <x/>\f;})());");
tryItOut("throw window;");
tryItOut("gc()");
tryItOut("/*for..in*/for[, prototype] =  try  = [,].* in constructor");
tryItOut("/*infloop*/for(const __count__; (true)[3.141592653589793]; __parent__.( /x/ )) {(function(id) { return id }); }");
tryItOut("/*infloop*/L:for(prop; (this.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice).eval((function(y) { yield y; true;; yield y; }).call(true, ))); [[]]) if(this.__defineSetter__(\"__proto__\", 'haha'.split) .@*:: *::*) { if ((<><x><y/></x></>\n == (__iterator__.__lookupGetter__(\"__proto__\")))) {const __parent__ = ({}); } else export __parent__;}");
tryItOut("/*infloop*/for([, __count__, constructor, , ] = (prop ? window : __noSuchMethod__); 3; (null |= <><x><y/></x></>)) {const __count__, __noSuchMethod__ = true;function(y) { yield y; export *;; yield y; } }");
tryItOut("with({}) __noSuchMethod__ = 'fafafa'.replace(/a/g, (1 for (x in [])));");
tryItOut("with({__proto__: __proto__.__defineSetter__(\"__parent__\",  '' )}){/*for..in*/L:for(let [prop, __noSuchMethod__] = [1,2,3,4].map in function(id) { return id }) gc() }");
tryItOut("/*for..in*/L:for(const __parent__ in <><!--yy--></>) var constructor = <><x><y/></x></>, constructor = window;");
tryItOut("if((__parent__.([))) {yield  '' ;<y><z/></y> }");
tryItOut("gc()\nundefined;");
tryItOut("{__noSuchMethod__ = {}, __parent__;L: const prop\n }");
tryItOut("if((<x/> for (__count__.prototype in null) if (<x><y/></x>))) { if (__count__.__count__ setter= function () { return <><x><y/></x></> } ) yield;} else {/*infloop*/L:for(false; window; -1) {export *; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let delete in <><x><y/></x></>) yield;");
tryItOut("switch(<x/>) { default: break;  }");
tryItOut("let (__count__ = __noSuchMethod__ =  '' , prototype) { /*infloop*/{export *;function  __proto__ (__noSuchMethod__)<x><y/></x> }(( '' .yoyo(<x/>))); }");
tryItOut("M:if(new (((function  constructor (__proto__) { prop, constructor; } ).apply)())()) yield let (__noSuchMethod__ = #1=[#1#], __proto__)  \"\" ; else {return;return <x/>; }");
tryItOut("switch((!*::*)) { \fdefault: break; case 6: /*infloop*/for(var prop; window; 3/0) break; break;  }");
tryItOut("let (constructor, prop = (Iterator())) { (__noSuchMethod__)\n/*infloop*/while(#3={a:#3#})export *; }");
tryItOut("{/*for..in*/M:for(__noSuchMethod__.__count__ in ((Function)((#2=[this])))){/*infloop*/for(#3={a:#3#}.watch(\"__noSuchMethod__\", this); eval(\"__parent__\", undefined); this) {var function::__noSuchMethod__ = *::*;; } } }");
tryItOut("if(null) export *; else  if (<y><z/></y>++ >> (('haha'.split).call).call(<><x><y/></x></>, )) {continue M;({}).__lookupGetter__ }");
tryItOut("if(__parent__.prop getter= (new Function(\"__count__;\"))) {throw 1e-81;continue ; }");
tryItOut("M:while((__noSuchMethod__.watch(\"constructor\", function (__proto__, constructor) { yield <><x><y/></x></> } )) && 0){(<bbb xmlns=\"this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice)\"></bbb>.hasOwnProperty(\"<x/>\")), (<x/>)[@foo]throw <y><z/></y>;\ngc()\n/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <y><z/></y>) {(false);return [1]; } }");
tryItOut("L:if(__count__.yoyo(<y><z/></y>)) { if (gc(1.3)) try { ; } finally { function  <><x><y/></x></\r> () { return 0 }  } \f} else {/*for..in*/for(const __iterator__ in ((<x/>)(*::*)))export *;L:with((this)(arguments, <x><y/></x>)){var __iterator__ = *, __parent__ = <y><z/></y>; } }");
tryItOut("gc()");
tryItOut("{try { export getter; } catch(__proto__) { ({}).__lookupGetter__ } ; }");
tryItOut("throw StopIteration;");
tryItOut("switch(<></>) { case @foo: while((false) && 0)return;break; break; gc()break; break; case 9: var __proto__, get;break; case <y><z/></y>: export __noSuchMethod__;break; case 8: case @foo: continue M;break; break; break; case <><x><y/></x></>: break;  } const prop;");
tryItOut("/*infloop*/do {{} }\f while(([1e4].filter(({}).__lookupGetter__)));");
tryItOut("/*for..in*/for(let [__iterator__, prototype] = eval(\"{}\", ('fafafa'.replace(/a/g,  \"\" ))) in new (undefined)()) yield 1e81.hasOwnProperty(\"__iterator__\");");
tryItOut("/*infloop*/for(var __iterator__; <> </>.( '' [null]);  '' .__defineSetter__(\"x::__count__\", function  prototype (prototype, constructor)0)) {L: ; }");
tryItOut("if(function(id) { return id } -= 5.0000000000000000000000) { if (false >> window) ;} else (@foo);");
tryItOut("M:if(window - prop = __parent__) M:if(__iterator__.__count__) { if ((constructor.__proto__ = yyy)) {( '' ).watchreturn; }} else {{}gc() } else return;");
tryItOut("if(<><x><y/></x></>) {break L;(this); } else <x/>;");
tryItOut("/*for..in*/for(let __parent__ in ((function  prop (__count__, constructor) { return  /x/g  } )(({})))){yield <x/>; }\nvar __noSuchMethod__;");
tryItOut("return;");
tryItOut("L:switch(<xxx>{__parent__}</xxx>) { case !null: case 7:  }");
tryItOut("break L;");
tryItOut("L: prototype = __iterator__;");
tryItOut("return;");
tryItOut("do {yield; } while((__iterator__) && 0);");
tryItOut("if((new Function(\"const prop, __noSuchMethod__;\"))(this).*) /*infloop*/for(({ __parent__: __iterator__ }) = window; prop.(<x><y/></x>); ()) yield window;");
tryItOut("M:do {gc() } while(( /* Comment */window) && 0);");
tryItOut("export __parent__; const prop\nyield <><x><y/></x></>\nif((( for (__noSuchMethod__ in [,,])))) { if (false.*) {(<><x><y/></x></>); }} else {let (__parent__, __count__) { ; } }");
tryItOut("/*infloop*/M:for(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(([1e81]).propertyIsEnumerable(\"__iterator__\")); yield ((033.constructor = __iterator__))[new RegExp(<><x><y/></x></>, true)].throw(this.__parent__); ((p={}, (p.z = yield (({ set __parent__ __iterator__ (__count__, __count__) { yield 3.141592653589793 } ,  get __proto__  (__count__, __proto__) { return prototype }  })))()))) {do L:if(prop.yoyo(0.1)) {return .2; } while(((__parent__.(((yield prototype))))) && 0); }");
tryItOut("throw prototype;");
tryItOut("{(constructor);/*for..in*/M:for(var prototype in ((function(q) { return q; })(0.__count__ = )))gc() }");
tryItOut("(new Function(\";\"))");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = (({__noSuchMethod__:  /x/ })) in -1.unwatch(\"prop\")) \fexport *;");
tryItOut("/*infloop*/while(constructor['prop']+=constructor){}");
tryItOut("L:if( '' ) { if ((uneval((<><x><y/></x></> <= *)))) {( \"\" );let __noSuchMethod__; } else {\f; }}");
tryItOut("try { let(({ __count__: __count__ }) = ({ get constructor()__iterator__.__proto__ })) ((function(){throw StopIteration;})()); } catch(__count__) { try { yield  /x/g ; } catch(constructor) { with({}) throw <x><y/></x>; } finally { with({}) __parent__, __noSuchMethod__; }  } ");
tryItOut("constructor = __parent__;");
tryItOut("L: export __iterator__;");
tryItOut("/*infloop*/while(1.2e3.eval((<x><y/></x>\n)).__noSuchMethod__ = ({ __count__: __parent__, __noSuchMethod__: __proto__ }) = (<><x><y/></x></> .@x:: <y><z/></y>)){throw [z1,,]; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in null) {; }");
tryItOut("/*infloop*/do ; while((<xxx {__parent__}={this.@*} />.(this.__defineGetter__(\"constructor\", ({}).hasOwnProperty))));");
tryItOut("/*infloop*/M:while( /* Comment */(__noSuchMethod__ = <><x><y/></x></>))return <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("L: /*for..in*/for(const prop in <x/>) {}");
tryItOut("");
tryItOut("with([,,z1])yield __proto__;");
tryItOut("let __noSuchMethod__\n");
tryItOut("/*infloop*/M:do case 8: return;break; default: {}break;  while((new (window)([[]].watch(\"__noSuchMethod__\", Math.sin\f))).prop = ({}).__lookupGetter__(<><x><y/></x></>));");
tryItOut("if(({ set __noSuchMethod__(__noSuchMethod__, __count__) { let __parent__, __noSuchMethod__ = <><x><y/></x></>; }  })++) {export *;{} } else  if ((uneval([.2]))) let __noSuchMethod__, __count__;");
tryItOut("let ([[prop, , ({ ([1,,]).call(window, *): [, , ] }), ({ __proto__: ({ __count__: __noSuchMethod__ }) }), ], ({ prototype: ({ __noSuchMethod__: [constructor, function::__noSuchMethod__, ({ prop.__parent__: prototype }), __count__.prop, ({ constructor: ({ prototype: __iterator__ }) })], constructor: [({ __count__: ({ prop: __proto__ }) }), , constructor] }), prop: [({ __noSuchMethod__: __noSuchMethod__ }), , , , ] })] = constructor.throw(<xxx {__noSuchMethod__}={{}} />.(*::*.__defineGetter__(\"__count__\", /a/gi)))) { with({constructor:  ''  ? <x/> : @foo}){gc()var const __count__;, __proto__ = @foo; } }");
tryItOut("{var function ([y]) { } =  /x/g ; }");
tryItOut("prop");
tryItOut("/*infloop*/for(const constructor; (\n__proto__.@*); typeof (constructor = {})) throw <><x><y/></x></>;\n__noSuchMethod__;\n");
tryItOut("/*infloop*/do {export __noSuchMethod__; } while(<x/>);");
tryItOut("/*infloop*/for(const ({ __count__: __proto__ }) = window.eval( /x/g ); ((function ([y]) { })[<y><z/></y>]); <!--yy--> < function(id) { return id }) ;");
tryItOut("let ( { yield <y><z/></y> } ) { yield true; }");
tryItOut("if(#1#|=[15,16,17,18].filter([1,2,3,4].slice\t, *::*).throw(({ prototype: prop, constructor: __noSuchMethod__ }) = prop)) { if ((new (__count__.yoyo(prototype))(( /* Comment */<x><y/></x>)))) return prop;} else /*for..in*/L:for(var __iterator__ =  /x/  in -3/0) {throw prop;return; }");
tryItOut("{while((constructor.(this)) && 0){ } }");
tryItOut("throw prop; const __noSuchMethod__;");
tryItOut("/*infloop*/do {} while(<><></></>);");
tryItOut("(__iterator__);break ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((Math.sin)(('haha'.split).call(*::*, 0)))){{} }");
tryItOut("{ with(.2 if ( /x/ ))return;with({prop: <><x><y/></x></>}); }/*");
tryItOut("__proto__ = prototype;");
tryItOut("<x><y/></x>;");
tryItOut("break \nexport __count__;");
tryItOut("do {M:if([1]) return; else  if (<x/>) {throw -3/0; } else {let prototype =  '' , __proto__ = <x><y/></x>; }[1,2,3,4].map } while((((__iterator__ = *) - __iterator__)) && 0);");
tryItOut("return;");
tryItOut("/*infloop*/while(this.__defineSetter__(\"prop\", function () { yield *::*.@* } )){let __proto__, constructor; }");
tryItOut("{return (function ([y]) { })(); }");
tryItOut("switch((((new Function(\"with({prop: [z1]}){prop = case 4: continue ;break; default: break; case 9: case @foo: case 6: return;break; case 9: gc()break; return  \\\"\\\" ;;return <y><z/></y>; }\"))).call([,], ))) { default: case 1: break; case 1: let prop, prop;/*infloop*/while(__proto__){let __count__, constructor;var constructor; }break; case false :: [,,]: break;  }");
tryItOut("while(((__proto__ = <><x><y/></x></>) >= <><x><y/></x></>) && 0)export *;");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; eval(\"<x><y/></x>\", <><x><y/></x></>) >= #2=({__proto__: __count__}); /*infloop*/for(let __count__; <x><y/></x>; __proto__) {3 }.__lookupGetter__(\"__parent__\")) {/*for..in*/for([__count__, __iterator__] = (({a2:z2}) for (window in __count__)) in window.propertyIsEnumerable(\"constructor\")) [1,2,3,4].slice }");
tryItOut("/*infloop*/for(const __parent__ = new <x><y/></x>(this ? <x><y/></x> : <x><y/></x>); ([[#2=3/0 for (constructor in undefined) for (__count__ in *::*)] if (@foo)]); (__count__.__defineGetter__(\"prop\", [1,2,3,4].map))) return @foo;");
tryItOut("try { {} } catch(__proto__) { export *; } finally { break L; } ");
tryItOut("var __parent__ = [[1]], prototype;");
tryItOut("/*infloop*/L:for(let __count__ = <><x><y/></x></>.prototype; true == *; false.yoyo(<x><y/></x>)) let __noSuchMethod__;");
tryItOut("constructor");
tryItOut("/*for..in*/for(let [set, constructor] = new ( \"\" )() in (yield this).*) /*infloop*/for(@foo.*; <x/>; <x/>) return;");
tryItOut("/*for..in*/for(var ({ __noSuchMethod__: ({ __parent__: [], window, 4.: ({ __noSuchMethod__: __noSuchMethod__ }) }) }) in <x><y/></x>.(<y><z/></y>)) ");
tryItOut("/*infloop*/for(const ({ __parent__: ({ prop: ({ __noSuchMethod__: [({ __proto__: __noSuchMethod__, __proto__: ({ __noSuchMethod__: prop, prop: ({ __parent__: prototype }) }) })], prototype: ({ constructor: __parent__ }) }) }) }) = <x><y/></x> && <><x><y/></x></>; *::* == this.zzz.zzz; <><bbb xmlns=\"null\"> </bbb></>) {yield;{[] } }");
tryItOut("/*infloop*/for((this.zzz.zzz); undefined; 1e4) {return; }");
tryItOut("prop = set;");
tryItOut("switch([,,]) { default: break; break;  }");
tryItOut("/*infloop*/M:for(var prototype; (yield (false)(^)); (window.prop)) {return;export __count__; }\n");
tryItOut("L:if(prop+=Function) { if (__iterator__) {with({__parent__: ((function(q) { return q; })())}){Math.powreturn *::*; }var constructor = null; } else {/*infloop*/for(new (__noSuchMethod__)();  \"\" ; ({prop: <x/>})) {if(null) { if (null) {{}{} } else yield *::*;} } }}");
tryItOut("/*for..in*/for(__noSuchMethod__ in this.zzz.zzz) M:if((yield  { yield prototype; } )) ; else  if (null for (__iterator__ in  /x/ )) yield undefined; else L: {{}{} }");
tryItOut("for(let y in []);");
tryItOut("{ }");
tryItOut("if(<x/>) {var __proto__ = false; } else {; }\nreturn;");
tryItOut("if(<x><y/></x> ? <x/> : 033) {*const __iterator__, prototype; } else  if ((#1=({prop: <x><y/></x>.hasOwnProperty(\"prop\")}))) if(undefined) { if (<>/*\n*/<x><y/></x></>) let prop, __parent__; else {var prop = null; }} else {{}gc() }");
tryItOut("{return *::*; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let [prop, , __count__] = Error(<x><y/></x>, 0); (new window\n(#0=({__noSuchMethod__: undefined}),  \"\" )); (new Number(<x/>).__lookupGetter__(\"prototype\"))) /*infloop*/for(__iterator__; *; <x/>) gc\n");
tryItOut("with( /x/g ){eval\nif((window.unwatch(\"constructor\"))) {return;return (function ([y]) { })(); } else  if (prop .@*:: (-1)) {continue M;return this; } else  }");
tryItOut("if((__iterator__ = __iterator__)) { } else  if ((p={}, (p.z = <x><y/></x>.(<y><z/></y>))())) M:switch(__count__.prototype) { default: case 7: break ;break;  } else {{export __iterator__; } }");
tryItOut("/*for..in*/for(constructor.__iterator__ in *) return;");
tryItOut("/*for..in*/for(let constructor in (([1,2,3,4].map)(__parent__ =  /x/ .valueOf(\"number\")++))){yield;export *; }");
tryItOut("{yield; }");
tryItOut("/*for..in*/L:for([prop, __parent__] = (({__noSuchMethod__: [z1] })).__lookupSetter__(\"__proto__\") in __noSuchMethod__.__proto__ getter= ({}).hasOwnProperty) {if(null) {throw arguments; } else  if (yield *) export *; else throw this;const __proto__ = *, constructor; }");
tryItOut("/*infloop*/do /*infloop*/for(let __noSuchMethod__; #2=({setter: @foo}).unwatch(\"__parent__\"); eval(\"3/0\", 1.3)) return; while(({ constructor: constructor, prop: __count__ }) = ({ prototype: __parent__, __count__: __noSuchMethod__ }).prototype);");
tryItOut("/*infloop*/do {L:with(<x><y/></x>.__lookupGetter__(\"__proto__\"));/*infloop*/for(const prop = RangeError(); <x\t><y/></x>; [,,])  } while([__count__.__noSuchMethod__].filter([1,2,3,4].slice));");
tryItOut("/*for..in*/for(const prototype.__parent__ in ((function(y) { yield y; /*infloop*/L:do prototype while( /* Comment */__count__);; yield y; })(({constructor: (0x99 /= this)[prototype = prototype] })))){<x><y/></x> }");
tryItOut("/*infloop*/while('haha'.split){gc() }");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("let(__count__ = __parent__) { ;");
tryItOut("if(this.__defineSetter__(\"__proto__\", (1 for (x in []))))  /x/ ; else do {{} } while((__noSuchMethod__[this]) && 0);");
tryItOut("/*for..in*/for(let [__parent__, __proto__] = <x><y/></x> in [[1]]) ");
tryItOut("/*infloop*/while(let (__parent__) (__proto__.(3/0)));");
tryItOut("{gc()yield 1e+81; }");
tryItOut("/*for..in*/for(const constructor in true) {let __count__ = <y><z/></y>; }");
tryItOut("with({}) { throw __iterator__; } ");
tryItOut("/*infloop*/for(var prototype; (([1,2,3,4].slice)()).@foo; .2) if((#0=({__noSuchMethod__: -3/0}))) { if () throw __proto__;} else {{}(1 for (x in [])) }");
tryItOut("throw constructor");
tryItOut("/*for..in*/for(var set in (([1,2,3,4].map)(__count__+= /x/ ))){let __count__, prop; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(<x/>) {;var __iterator__ = <x><y/></x>, prototype; } else {export *; }");
tryItOut("L: yield;");
tryItOut("if(( /* Comment */true).throw( /* Comment */eval(\"<><x><y/></x></>\", this) | [<x/>])) {/*for..in*/for(let prototype.constructor in [z1,,] & *) {return; } }");
tryItOut("L:if( \"\" ) return;if(7) { if (undefined) __parent__;} else ; else  if ((1e4.*) /= this) {return __iterator__;L: {continue ;return <>//h\n<x><y/></x></>; } }");
tryItOut("if(<><x><y/></x></>) {throw [[]];throw __proto__; }");
tryItOut("if((yield *::*)) { if (( '' .unwatch(\"__count__\") != prototype = null).yoyo(<x/>)) eval} else ;");
tryItOut("M:if(*::*) with({__count__: *})var each, __count__ =  \"\" ; else  if (3.141592653589793.*) gc()");
tryItOut("switch(*) { default: case (-0): export [,];case <x/>: break; case ({}): export *;break; ((*::*).apply).call(false, )break; break; case <x/>: const __iterator__, prototype = <x><y/></x>;break; break; function (__count__, __parent__) { break ; } break; break;  }");
tryItOut("for(let y in []);");
tryItOut("delete");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let if(constructor = <y><z/></y>) return *; else  in eval(\"(<><x><y/></x></>);\", new (function(q) { return q; })((uneval(*::*))))) {export __count__;/*for..in*//* nogeckoex bug 349964 */ for  each(let  '' .__noSuchMethod__ in  \"\" ) function(y) { yield y; gc(); yield y; } }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("{}");
tryItOut("if(#1=[#1#]) let __count__ = -1; else yield ");
tryItOut("/*for..in*/for(var (<x><y/></x>)(5.0000000000000000000000) in ((function ([({ __parent__: ({ __noSuchMethod__: __iterator__ }) }), ({ prototype: [({ prop: ({ prop: ({ prototype: __noSuchMethod__, this: __count__ }) }), prop: [__noSuchMethod__, __parent__, __noSuchMethod__] }), ({ prop: ({ prop: ({ prototype: __parent__, constructor: prototype }), [1].__noSuchMethod__: __noSuchMethod__ }), __count__: [[prop], []] }), , , ], constructor: ({ prototype: prototype, prop: ({ prototype: [], __noSuchMethod__: ({ constructor: [, , prop, ] }) }) }) })], prop) { if(eval(\"throw -0;\", null)) { if (1.2e3+=<y><z/></y>.isPrototypeOf( \"\" )) return *::*;} else {var x::__noSuchMethod__ = <><x><y/></x></>, constructor; } } )([15,16,17,18].filter((new Function(\"__iterator__ = __iterator__;\")), prototype()))))export *");
tryItOut("if(( /x/g  && *)) {{} } else  if ((__iterator__-=<y><z/></y>)) yield __proto__;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/L:for(#0=null * (new (<x/>)(false)); new (0.1)(<><x><y/></x></>, <y><z/></y>) if (false); (uneval(({prototype:  '' })))) ;");
tryItOut("L:while(((\n<><x><y/></x></>)) && 0)/*infloop*/while(eval(\"let __iterator__ =  '' , prototype;\", window)){<x><y/></x>;return constructor; }");
tryItOut("{return; }");
tryItOut("/*infloop*/for(var prop; setter+=true if (<x><y/></x>); [15,16,17,18].map(function (__count__, constructor) { yield  \"\"  } , new eval(({}), 1.3))) {throw @foo\f;gc() }");
tryItOut("with({constructor: *}){let __count__; }");
tryItOut("throw StopIteration;");
tryItOut("switch( /x/ ) { default: break; case <y><z/></y>: break; {}break; break; prototype;break; case <><x><y/></x></>: break; this;/*\n*/break;  }");
tryItOut("with({[(__count__), ({ constructor: [set, prop, __parent__], *::*: prop }), __count__, , ]: yield #1#.__defineSetter__(\"get\", Math.pow)}){eval const constructor;with({constructor: ('fafafa'.replace(/a/g, gc))}){(constructor);\nfunction(y) { yield y; return [1,,];; yield y; }\n/*infloop*/M:for(var function::__iterator__; #1=[#1#]; null) ; } }");
tryItOut("return this , @foo;");
tryItOut("/*infloop*/M:do export constructor; while([,]);");
tryItOut("let constructor = <><x><y/></x></>, constructor = <x><y/></x>;");
tryItOut("yield undefined ?  ''  : <x><y/></x>;");
tryItOut("/*for..in*/L:for(__iterator__ in ((/a/gi)( /* Comment */constructor .@ <x/>)))if(false) const __count__; else  if (window) {( \"\" );gc() }");
tryItOut("if((<x><y/></x> || this.prop)) { if (__iterator__ = this) break ;} else gc()");
tryItOut("/*infloop*/do {export *;window; } while(<><x><y/></x></>);");
tryItOut("L:if((<x><y/></x>.__defineGetter__(\"__noSuchMethod__\", __noSuchMethod__))) {yield; /x/g  } else (1e+81);");
tryItOut("/*infloop*/for(__count__.isPrototypeOf(undefined); __parent__ ^ false; eval(\"<y><z/></y>\", <x/>)) export constructor\nreturn function(id) { return id }\n");
tryItOut("let __proto__ = <x><y/></x>, prop = window;");
tryItOut("constructor; const constructor;");
tryItOut("yield (<x/>.__defineGetter__(\"__proto__\", (*).__defineSetter__))--;");
tryItOut("for(let y in []);");
tryItOut("yield window;");
tryItOut("\rif(<><x><y/></x></> ^ <x/>)  else {function (__proto__) { yield (-1) } yield @foo; }");
tryItOut("/*for..in*/for(var [constructor, constructor] = ({__proto__ setter: [1,2,3,4].slice }).throw('fafafa'.replace(/a/g, function(y) { yield y; return <x/>;; yield y; })\n) in (<zzz>-3/0</zzz>.(prototype-=1e+81))) export *;");
tryItOut("L: {with({__proto__: <><x><y/></x></> .@x:: <><x><y/></x></>.__lookupSetter__(\"__parent__\")})throw undefined; }");
tryItOut("while((<><x><y/></x></>) && 0){(<><x><y/></x></>); }");
tryItOut("do {{} } while((window) && 0);");
tryItOut("continue ; const constructor");
tryItOut("with(__parent__ = (Array(prototype, prototype, <y><z/></y>))){while((__iterator__ = <><x><y/></x></>) && 0){return 1.3; } }");
tryItOut("/*for..in*/for(var prototype =  in (p={}, (p.z = (__count__ ^= constructor))())) \ncontinue M;");
tryItOut("if(<><bbb xmlns=\"<y><z/></y>.throw(<x><y/></x>)\"> </bbb></>) {if([15,16,17,18].filter(Math.sin, this)) throw *::*; else  if ((yield <><x><y/></x></> = __proto__ = <x><y/></x>)) {prop; } else return *;return 3/0; } else  if ([<xxx {__iterator__}={*} />].some(gc)/*\n*/ + 1e+81) while((0x99) && 0){continue ;break L\n } else {return;constructor, setter; }");
tryItOut("/*infloop*/while( /x/ ){export prototype; }");
tryItOut("/*for..in*/for(var (window)(1.2e3) in ((__parent__ = <y><z/></y>)((((function (__count__)0/0)(__count__, this)) for each (__proto__ in 1e81) for (__noSuchMethod__ in __proto__))))){(window);{} }");
tryItOut("continue M; const __noSuchMethod__;");
tryItOut("/*for..in*/for(__count__ in new (<><x><y/></x></>)([], <y><z/></y>)) return <y><z/></y>;");
tryItOut("if((++this &  \"\"  -= <x/>)) window else  if (<y><z/></y>.eval(<><x><y/></x></>)) let(__count__ = <x><y/></x>) { function(y) { yield y; gc; yield y; }M:do yield; while(([,,] /=  '' ) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__.__count__ in prototype = (function ([y]) { })()) { }");
tryItOut("do const __proto__ = <><x><y/></x></>; while((<><{__count__}></{__count__}></>) && 0);");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in -[z1,,]) /*for..in*/for(var __iterator__ in  \"\" ) {export prototype;yield; }");
tryItOut("yield;");
tryItOut("with({__parent__: eval(\"yield [z1];\", __noSuchMethod__) > *.valueOf(\"number\")})/*infloop*/do {} while(<><x><y/></x></>);");
tryItOut("this.zzz.zzz;");
tryItOut("continue M\n");
tryItOut("if(__proto__ / constructor) { if (<>yyy</>.(new (undefined)(false))) {/*infloop*/for(let prototype; (-1); *) {export prototype; } } else export this;}");
tryItOut("if(@foo) {export __parent__; const __proto__; } else  if ([<x><y/></x>].sort((function(q) { return q; }).apply)()) var __count__, __noSuchMethod__ = *;");
tryItOut("switch(*::*) { default: return;break;  }");
tryItOut("/*for..in*/for(const prop in +<y><z/></y>.__defineGetter__(\"__iterator__\", function (constructor, prop)undefined)) {throw constructor;yield null; }");
