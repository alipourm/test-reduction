tryItOut("with((let (__noSuchMethod__ = 1e81, __proto__ = <y><z/></y>) each))const ({ prototype: __parent__, <!--yy-->: __count__ }), constructor;");
tryItOut("/*for..in*/for(var (__parent__) in __parent__ =  /x/ ) {(<x><y/></x>);let prototype; }");
tryItOut("switch(new Boolean((*); && yield 3/0, <><x><y/></x></>.yoyo(<y><z/></y>))) { case 8: break; /*for..in*/for(let [__proto__, prop] = __parent__ in {}) {\tlet __count__, __iterator__ = @foo; }default: ;break;  }");
tryItOut("M:with(window = [[]]){let constructor =  '' ; }");
tryItOut("if(this) __count__; else  if (<><x><y/></x></>) {return true; }");
tryItOut("if(([11,12,13,14].some(({ __parent__: __noSuchMethod__, __count__: __proto__ }) = ((\tfunction (__noSuchMethod__, prototype) { var __count__ = <><x><y/></x></>, __count__; } ).call(0--, (true.throw(<><x><y/></x></>)), <x/>))\t, [[1]]--//h\n))) var prop = function(id) { return id }, prop =  \"\" ;");
tryItOut("do ( /x/g ); while(((( /* Comment */<y><z/></y>) & let () { ({}).__lookupGetter__ })) && 0);");
tryItOut("while((0.1 > <y><z/></y>) && 0)if(<x/>) {yield ({}); } else ");
tryItOut("/*for..in*/for([constructor, __parent__] =  in constructor.__proto__ getter= this.__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)) {({}).__lookupGetter__yield (<><\fx><y/></x></>.hasOwnProperty(\"constructor\") >> <x><y/></x>); }");
tryItOut("throw (-0);");
tryItOut("let(__proto__ = ([] = *.@*)) { let([constructor, , ], constructor = eval(\"true\",  '' )) ((function(){with({}) return;})());");
tryItOut("L: __noSuchMethod__ = this.zzz.zzz");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(eval(\"<x/>\", [z1,,]); ++<><x><y/></x></>; (<bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb>.(((({}).__lookupGetter__)())))) {prototype, __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let constructor in __count__ = __noSuchMethod__) export *;");
tryItOut("this.__defineGetter__(\"__parent__\", Function)");
tryItOut("L:if([11,12,13,14].filter) {}\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let constructor in null) {(*::*); }\nexport prop;\n");
tryItOut("/*for..in*/for(let <><x><y/></x></>.__noSuchMethod__ in ((\f((__parent__.((-1)))).watch)(constructor = 0/0))){M:switch(window) { case null: export *;case <><x><y/></x></>: break; case true: break; case <x><y/></x>: yield <y><z/></y>;break; break; default: break; case prototype: break; case 2: return 1.3;case [1,,]: return;break; case *: case __proto__: return;break; break; #1=[#1#]break; break;  }throw prop; }");
tryItOut("throw __parent__;");
tryItOut("M:if(3.__defineSetter__(\"x::prototype\", [1,2,3,4].map).prototype = <><ccc:ddd> </ccc:ddd></>) { if (prototype =  = *) return <x><y/></x>;} else {(#1=[#1#]); }");
tryItOut("/*for..in*/for(var __count__ in (<x><y/></x> if ([z1]))) yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <><x><y/></x></>) {yield  /x/g ; }");
tryItOut("with((1 for (x in []))(<x><y/></x>).watch(\"prop\", Math.sin))/*for..in*/for(var __iterator__ in __count__) return  /x/g ;");
tryItOut("/*for..in*/for(const (p={}, (p.z = let (constructor, __noSuchMethod__ = <><x><y/></x></>) prop)()) in (new eval(\"*\", [,,z1])()) ? ([null]) : 0 += <x/>) {M:if(eval(\"new Array()\", ({__iterator__ setter: (new Function(\"var __proto__ = constructor;\")) }))) gc{} }");
tryItOut("for(let y in []);");
tryItOut("do {/*for..in*/for(var [__noSuchMethod__, prop] = 1e81 in <y><z/></y>) {export *;gc() }this; } while(([1,,]) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in true) {yield <x/>;yield null; }");
tryItOut("{}");
tryItOut("this.zzz.zzz;");
tryItOut("let (prototype, prototype = <{__parent__}><xxx>{__proto__}</xxx><!--yy--></{__parent__\n}>.(prop.__iterator__ = 0x99)) { let __count__ = window, __parent__: __noSuchMethod__\n }\f");
tryItOut("/*infloop*/while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>){throw  /x/ ;break ; }");
tryItOut("L:with((__count__.__count__ getter= [,,z1].__lookupGetter__(\"prop\"))){L: {gc()let __parent__ = <x/>; }export __parent__; }\ncontinue M;\n");
tryItOut("gc()");
tryItOut("let (prop = __noSuchMethod__) { export prototype; }");
tryItOut("/*infloop*/while([(__count__+=__noSuchMethod__)]){switch( \"\"  <<  '' ) { default: break; export *;break; prop\nbreak;  }{yield;{} } }");
tryItOut("yield\n");
tryItOut("/*for..in*/for(const undefined .@x:: .2 in (__noSuchMethod__ = false)) {'haha'.split }");
tryItOut("let (constructor, __iterator__ = <><zzz>true</zzz></>) { yield *; }");
tryItOut("/*infloop*/do __iterator__; while((new RegExp(-1)));");
tryItOut("{{L: evallet prototype = ({a2:z2}); }{} }");
tryItOut("function () { yield __proto__ } ");
tryItOut("()switch((({__noSuchMethod__: Exception(window <<= <x/>)}))) { default: break; case (yield this.__defineSetter__(\"__noSuchMethod__\", function(q) { return q; }))[<><xxx {constructor}={*::*} /></>]: L:if(<x/>) {{} } else  if (<x><y/></x>) constructor else export *;case 3:  }");
tryItOut("with({prototype: 3.141592653589793 |= <x><y/></x>})return;");
tryItOut("{;yield; }");
tryItOut("switch(undefined) { case false: yield {};break; case 8: ;default: prototype;case constructor: case <><x><y/></x></>: break; case 2: return;break; case <><x><y/></x></>:  }");
tryItOut("/*for..in*/for(prop in this) {export __iterator__;__count__ = null, __iterator__ = this; }");
tryItOut("continue M;");
tryItOut("{/*infloop*/L:while(-1 |= true.prototype)__iterator__ }");
tryItOut("L:if((uneval(({})))) {(@foo);function (__count__)__iterator__ }");
tryItOut("if(((prop)(({a2:z2})) for (constructor in prototype) for each (__parent__ in <x/>))) {{var __parent__ = window;export __parent__; }if(window\t) { if (3/0) {; } else yield <x><y/></x>;} } else  if ([1,,])  '' ; else { }");
tryItOut("\twhile(([1,,]) && 0)return  \"\" ;");
tryItOut("/*for..in*/for(var (@foo ? null : 1e+81)['function::__proto__'] in __noSuchMethod__ = (([1,2,3,4].slice)( )) %= <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) __iterator__ = (-0);continue ;");
tryItOut("/*infloop*/do { } while(__count__ - 3.141592653589793);");
tryItOut("if(( /x/g .eval(constructor)) ? constructor+=this : new (*)(<x/>)) {return; } else  if (undefined.throw(<x/>)) {export *\n } else {return; }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("throw 3/0;/*infloop*/for(const __parent__; *; __parent__) {__count__, __count__; }");
tryItOut("/*infloop*/do {throw ((<><x><y/></x></>)); } while((uneval([,])).prop);");
tryItOut("/*for..in*/M:for(var [__noSuchMethod__, __parent__] = 1.3.__proto__ in <><{prop}> </{prop}></>) if(3) export __proto__\n");
tryItOut("L: if(\t#3={a:#3#}) { if ( '' ) gc()} else yield <><x><y/></x></>;");
tryItOut("continue L\n<><x><y/></x></>;");
tryItOut("if(--3/0.__parent__ = (__parent__ = (p={}, (p.z = <><x><y/></x></>)()))) { if (try { yield undefined; } finally { continue ; } .hasOwnProperty(\"constructor\").@foo) {if(+this) { if (new RegExp()) return;} else var __noSuchMethod__ = <x><y/></x>;(p={}, (p.z = [[]])()); } else {return  '' ;switch(__noSuchMethod__) { case *: __proto__case 8:  } }}");
tryItOut("/*infloop*/L:for(return .. (prototype = [[]]); this.zzz.zzz.*; <><{__proto__}><x><y/></x><ccc:ddd>yyy</ccc:ddd></{__proto__}></>) {break ; }");
tryItOut("/*infloop*/for(__iterator__.constructor setter= (this).watch; <x><y/></x> >> @foo; \tthis.__lookupSetter__(\"__iterator__\")) yield;");
tryItOut("continue \n(#1=[#1#]);");
tryItOut("do {break ; } while((<><ccc:/*\n*/ddd><ccc:ddd><x><y/></x><x><y/></x>yyy</ccc:ddd></ccc:ddd></>;");
tryItOut("while(() && 0)export prop;");
tryItOut("/*infloop*/for(<y><z/></y>;  /x/g  |  '' ; eval(\"__proto__, __iterator__ = <x><y/></x>;\", __noSuchMethod__).eval( /x/ ) &= (uneval(true))) { const __iterator__ = window['each']; }");
tryItOut("export constructor;export prop;gc()");
tryItOut("/*infloop*/for(let function::__proto__; @foo.constructor.unwatch(\"__count__\"); (-#2=({each: <x/>}).eval(__iterator__.(*)))) {L: {<x><y/></x>;gc() }{} }");
tryItOut("M\f:switch((constructor = <x><y/></x> <= new 0/0 for each (__noSuchMethod__ in null)(__proto__ = constructor))) { default: case (const __iterator__;): break; case 5: L:if(<><x><y/></x></>) var constructor, prototype; else  if ( /x/g ) {__parent__;; }break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><x><y/></x>\f</> in [,]) {}");
tryItOut("/*for..in*/for(let  '' ['constructor'] in <><x><y/><//h\n/x></>.*) {gc()throw <x><y/></x>; }\n/*for..in*/for(var prototype('fafafa'.replace(/a/g\t, Math.pow)) in ([this].some((__count__ = <x><y/></x>)))) {switch([11,12,13,14].map) { case 3: \tfunction  constructor (__proto__, prototype)thisdefault: break;  } }");
tryItOut("continue ;");
tryItOut("gc()return;");
tryItOut("var __count__ = <><x><y/></x></>, prop = prototype;\n(null);\n const prop\n");
tryItOut("/*infloop*/for(prop; <x><y/></x>; <x><y/></x>) __noSuchMethod__;");
tryItOut("");
tryItOut("/*for..in*/M:for(let set = <bbb/*\n*/ xmlns:ccc=\"0\"><ccc:eee></ccc:eee></bbb>.@*.yoyo([(new (function  constructor () { return * } )(033, <x><y/></x>)) for ([,,] in  \"\" )]) in (!__parent__ < [15,16,17,18].map(eval, <><x><y/></x></>))) {/*infloop*/{} while(); }");
tryItOut("/*for..in*/M:for(prop in ((/a/gi)((/a/gi()))))L:if(true) {{}; } else  if (window) {}");
tryItOut("/*for..in*/for(const __proto__ = <x/> == (*.propertyIsEnumerable(\"__count__\")) in [,,]) ++");
tryItOut("L:if(constructor = prototype.__lookupGetter__(\"__count__\")) {<x><y/></x> } else {return  \"\" ; }");
tryItOut("if(1e4) {return;var prop, __noSuchMethod__ = <><x><y/></x></>; } else  if (@foo) { }");
tryItOut("throw [[1]];");
tryItOut("{033; }");
tryItOut("if(var __parent__) __iterator__ = <x><y/></x>, prop = <x><y/></x>;");
tryItOut("if(1e81) { if ( '' ) {{} }} else {(false);(<x><y/></x>); }");
tryItOut("let __count__;yield constructor;");
tryItOut("for(let y in [5,6,7,8]) yield [11,12,13,14].sort;");
tryItOut("/*infloop*/L:for(({ __count__: __parent__, prototype: constructor }) = (prototype = <x/>); constructor =  \"\" ; (4.++)) {throw undefined;return <y><z/></y>; }");
tryItOut("let(__noSuchMethod__ =  /x/  <<= undefined) ((function(){let(constructor = ([<x><y/></x>[<><x><y/></x></>]].sort(new Function))) ((function(){with({}) for(let y in []);})());})());");
tryItOut("this.zzz.zzz;");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in eval(\"this\", [1])) {/*for..in*/for(const constructor in ((({}).hasOwnProperty)([(-1)].some(prop setter: ((new Function(\"throw 0/0;\"))).apply))))gc() }");
tryItOut("export *\nreturn (prop = constructor)");
tryItOut("return\n");
tryItOut("prop.prototype = __parent__;");
tryItOut("{yield ({a2:z2}); }");
tryItOut("/*infloop*/for(var prototype; prop.(<x><y/></x>); (let (__proto__ = 3) (-0))) {[[]]; }");
tryItOut("L:with(prop)gc() const __parent__");
tryItOut("if((eval(\"prop\", this))) { if (<x/> >= [,,z1]) L:with({prototype: __count__ = ({ __noSuchMethod__: prototype, __proto__: __noSuchMethod__ })}){throw [z1,,];export prop; } else {export *;let (__iterator__ = false, prototype) { let __parent__ = <x><y/></x>; }return @foo; }}");
tryItOut("if(__noSuchMethod__ = ({ __count__: __iterator__, __iterator__: __proto__ })) {let (function::__parent__, __parent__) { yield; } } else  if (__iterator__.prototype = __noSuchMethod__ instanceof __parent__) {__iterator__, __noSuchMethod__ = true; } else {return -1; }");
tryItOut("__proto__;\ngc()\n");
tryItOut("try { const __proto__ = <x><y/></x>, prop; } catch(constructor) {  } ");
tryItOut("do {(<y><z/></y>); } while((prop.@*) && 0);");
tryItOut("/*infloop*/for(let __proto__; <bbb xmlns:ccc=\"Number(window, *)\"><ccc:eee></ccc:eee></bbb>; (yield __iterator__ = 1e+81)) {export *;{} }");
tryItOut("export *");
tryItOut("prop = __proto__;");
tryItOut("with((((<x><y/></x>).watch).call((x::prop+=*), (eval(\"export *;\", <x/>)))))with({__iterator__: window})constructor\n");
tryItOut("constructor");
tryItOut("M:if(new Function) {function (prop, __iterator__) { return * } return; } else  if (1e+81) export *;");
tryItOut("throw StopIteration;");
tryItOut("throw __noSuchMethod__;");
tryItOut("for(let y in []);");
tryItOut("M:if((this.unwatch(\"__count__\"))) {return; } else  if (eval(\"{}\", new Function([z1], window))) return; else throw windowif(({})) {yield (-0); } else  if (<x><y/></x>) {yield;function(y) { yield y; var __noSuchMethod__ =  \"\" ;; yield y; } } else export *;;");
tryItOut("if(__parent__) {yield <y><z/></y>;let (({ __proto__: [], __noSuchMethod__: [__noSuchMethod__, , undefined, __count__, constructor] }) = (this ? <><x><y/></x></>.prototype = [z1] : function::function::__count__.(<><x><y/></x></>))) { export __proto__; } } else {; }");
tryItOut("return delete <y><z/></y>;");
tryItOut("{L:if((case 9: break ;break; default: <x><y/></x>;case this: return [z1];break; case 4: export constructor;case window: export \f*;case 8: var constructor;yield;.propertyIsEnumerable(\"__iterator__\"))) export *; }");
tryItOut("with({__proto__: default: return __parent__ = null\t;case ([<><x><y/></x></> , <y><z/></y> for each (__proto__ in <><x><y/></x></>.\r__lookupSetter__(\"prop\")) for each (__parent__ in <x><y/></x>) for (__noSuchMethod__ in <x><y/></x>) for each (prop in this)].watch(\"__iterator__\", [1,2,3,4].slice)): while(((eval(\"\", <x/>\n))) && 0){throw true; }//h\nbreak; case 9: break; }){/*for..in*/L:for(let [__parent__, prototype] = this in *) {throw false;export *; } }");
tryItOut("switch(<x><y/></x>) { case 0: let __count__ = true;default: const __count__, function::constructor = <x><y/></x>;case 3: <x><y/></x>;break;  }");
tryItOut("/*infloop*/for(<x><y/></x>; <>__parent__</>;  '' ) {var __count__; }");
tryItOut("__parent__ = prototype;");
tryItOut("M:if((uneval(<><x><y/></x></>))) export *; else  if (('fafafa'.replace(/a/g, function () { function (getter) { return; }  } ).unwatch(\"__noSuchMethod__\"))) {return;export prop; } else {{} }var __count__, __count__;");
tryItOut("/*infloop*/for(const __proto__ = undefined; false; window) {return false; }");
tryItOut("/*infloop*/for(const ({ prototype: __iterator__, constructor: __noSuchMethod__ }) = (<y><z/></y>(<x><y/></x>)); yield | <><x><y/></x></>; prototype) {export prop;throw null; } const constructor;");
tryItOut("while((*::*) && 0)throw  /x/ ;");
tryItOut("with({}) return;");
tryItOut("/*infloop*/do return; while(<y><z/></y>.yoyo(window)\n);");
tryItOut("/*infloop*/{if( \"\" ) { if ( /x/ ) __iterator__, __parent__; else (function (constructor, prototype) { <><x><y/></x></>; } ).call} }let (prop =  \"\" , __count__ = 0x99) { eval } while(1e+81 instanceof  /x/ ());");
tryItOut("with({constructor: null.throw(arguments)}){| }");
tryItOut("/*infloop*/while(true.throw([(<><x><y/></x></>.@foo.hasOwnProperty(\"__noSuchMethod__\"))])){let (__proto__ = prop) { export __iterator__; } const __iterator__;yield <><x><y/></x></>; }");
tryItOut("switch(__count__.__proto__ getter= new Function) { case ([#1#].some(<><x><y/></x><>)//h\n((yield  /x/g ))).valueOf(\"number\"): break \n/*infloop*/do {yield;__count__ = [,,z1]; } while(<x><y/></x>);break; default: throw <><x><y/></x></>;\n{}\nbreak; case 0: break;  }");
tryItOut("if((function (__iterator__, constructor) { yield this } ).call(<x><y/></x>, __iterator__)--) {var prototype, __count__ = <x><y/></x>; } else  if (__noSuchMethod__) return; else {__proto__ =  /x/g , __parent__; }");
tryItOut("L:do {{} } while(( \"\" ) && 0);");
tryItOut("(<y><z/></y>)\nvar __proto__ = this, prop =  '' ;");
tryItOut("/*infloop*/for(function::prop = __iterator__.((new (function () { yield <><x><y/></x></> } )(<><x><y/></x></>))); ({ __parent__: constructor, __proto__: prop }) = ({__noSuchMethod__: <x><y/></x> }); __parent__ = [,,z1]--) return;");
tryItOut("/*for..in*/for(prototype = <x/> in prototype !== this <= (__parent__ = <x><y/></x>)) return;");
tryItOut("if(*::*) {M:with(<><x><y/></x></>)[1,2,3,4].slicewhile((eval(\"/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in <><x><y/></x></>) {export __count__;(<><x><y/></x></>); }\", 3.141592653589793)) && 0)throw (yield 3/0); }");
tryItOut("/*infloop*/for(const __count__; __parent__; [11,12,13,14].sort) {gc() }");
tryItOut("L:if(constructor = (this.__lookupGetter__(\"__count__\") ^=  \"\" )) {}");
tryItOut("yield new (function  prototype () { yield this } )( '' , this);");
tryItOut("{while((__parent__ = [[]]) && 0)continue L; }");
tryItOut("/*infloop*/for(const __noSuchMethod__ =  /x/g ; [,]; 033) continue L;");
tryItOut("throw __iterator__;");
tryItOut("(-1);let constructor = __parent__, function::prototype = *::*;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(__count__ in ((function  __count__ (__iterator__, constructor)(p={}, (p.z = <><x><y/></x></>)()).@*)(({prop: (eval(\"(1e81 -= *::*)\", this.__defineGetter__(\"constructor\", [1,2,3,4].slice)))})))){/*for..in*/for(prop in function (prop) { yield  ''  } ) {yield <><x><y/></x></>; }continue ; }");
tryItOut("window;");
tryItOut(";");
tryItOut("M:if(__parent__) let __proto__, __proto__; else  if (((function (__iterator__))(new 'haha'.split(), ({__count__ setter: eval, prototype: 3 })))) ");
tryItOut("try { __parent__; } catch(__count__) { export constructor; } ");
tryItOut("/*infloop*/M:for([] = new (new Function)((<x/> >> @foo[ \"\" ])); eval(\"(__noSuchMethod__);\", 1e-81); prototype.prop = @foo) ({}).hasOwnProperty");
tryItOut("(window %= <><x><y/></x></>).__parent__ = __count__;");
tryItOut("/*for..in*/for(const <y><z/></y>['prop'] in (((<y><z/></y>).watch)(([(__parent__ = [,,z1])].filter((eval).apply)))))(this);");
tryItOut("/*infloop*/L:for(var __parent__; this.__defineGetter__(\"__count__\", /a/gi); (window.__lookupGetter__(\"constructor\"))) {/*infloop*/for(const constructor(__noSuchMethod__ = 1.2e3) = this; (this.__defineSetter__(\"__proto__\", prop)) != __parent__ =  \"\" ; (*::*.__count__ == [1].valueOf(\"number\") :: (__proto__.__proto__))) {/*for..in*//* nogeckoex bug 349964 */M: for  each(<y><z/></y> in <x/>) {constructor; } } }");
tryItOut("{__count__(<><x><y/></x></>); }");
tryItOut("if(((uneval(__count__(<y><z/></y>))))) /*infloop*/for(({__count__: [,] }); #2=({prototype: -0}); <><x><y/></x></> >>>=false) {; }");
tryItOut("if(! '' ) export *; else  if (new Error()) {prototype; } else {gc() }");
tryItOut("if(try { gc() } catch(prop if *) { {} } .yoyo((function(q) { return q; }))) break ; else  if () //h\n\ntry { (1 for (x in [])) } catch(prop) { gc() } ");
tryItOut("/*infloop*/do gc while((this[__iterator__]));");
tryItOut("while((undefined.__proto__) && 0)break L;");
tryItOut("try { throw __proto__; } catch(__noSuchMethod__ if (function(){let(__iterator__, prop = __proto__) { export __proto__;})()) { return <x><y/></x>.__parent__ setter= /a/gi; } catch(__parent__ if (function(){throw __count__;\t})()) { __proto__ = __count__; } catch(constructor if (function(){let(__noSuchMethod__) ((function(){<x><y/></x>})());})()) { for(let y in [5,6,7,8]) (#1=[#1#])\t; } catch(__parent__ if ('fafafa'.replace(/a/g, (function ([y]) { })()))) { throw StopIteration; } ");
tryItOut("{/*for..in*/for(const [prototype, prototype] = (null << <x><y/></x>)[<x><y/></x>.__lookupGetter__(\"prop\")] in  /x/ \f) prop;\r }");
tryItOut("/*infloop*/for(const prototype; (([<y><z/></y>]).isPrototypeOf(((uneval( \"\" ))))); function::__iterator__ =  \"\"  ? __parent__ = 1.3 : (constructor = 1.3)) L:if(#1#) return; else  if (#1#) return #3={a:#3#};");
tryItOut("<bbb xmlns=\"Date((1.2e3 if (<><x><y/></x></>)), __iterator__)\"><bbb xmlns:ccc=\"[15,16,17,18].sort([1,2,3,4].map, (<><x><y/></x></>.watch(\"__iterator__\", function (prop, __noSuchMethod__) {  } ) .@*:: ([<><x><y/></x></>])))\"><ccc:eee></ccc:eee></bbb><bbb xmlns:ccc=\"null\"><ccc:eee></ccc:eee></bbb><ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd></bbb>");
tryItOut("if(((this.zzz.zzz if (default: case #1=[#1#]:  = <x><y/></x>)))) var __iterator__, __proto__\nyield <x><y/></x>; else  if (undefined .. __proto__) {\tthrow (true if (<y><z/></y>));{} }");
tryItOut("/*for..in*/M:for(const [] in (((1 for (x in [])))(0)))");
tryItOut("if(<><x><y/></x></>) {break L; }\n else {yield;return @foo; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <y><z/></y>) yield this;");
tryItOut("with({prop:  \"\" .__parent__ = this})");
tryItOut("let (prop) { /*infloop*/do /a/gi while( \"\" .valueOf(\"number\")); }");
tryItOut("");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ = <x/> in [z1,,]) yield arguments;");
tryItOut("/*for..in*/for(var [prototype, __count__] = this in __noSuchMethod__) {;return [,]; }");
tryItOut("M:if(<y><z/></y>) {prototype = *::* } else  if (0/0) {yield }");
tryItOut("{{}export __parent__; }");
tryItOut("break M;");
tryItOut("L:if((<x/>.*)) (<><x><y/></x></>);");
tryItOut("export *;");
tryItOut("let(__count__) ((function(){const prop = <x><y/></x>;})());");
tryItOut("if([null if (undefined)]) /*infloop*/L:for(let ({ __parent__: [, __parent__] }) = ({__noSuchMethod__ setter: [1,2,3,4].slice, __iterator__: <x><y/></x> }); <>1.2e3</>.(undefined); <ccc:ddd></ccc:ddd>) break M;");
tryItOut("M:if(#2=[ /x/ ]) (window); else  if (\t[1.3].map(function(q) { return q; })) throw [,,];");
tryItOut("if(window) { if ((new (Function)((-1))) * ((function (__count__, __count__) { const prop, constructor; } )())) gc() else {;export prop; }}");
tryItOut("L:with({__count__: <y><z/></y>})\n\n\n");
tryItOut("/*for..in*/for(let [__parent__, __proto__] =  in <x><y/></x>) {@foo; }");
tryItOut("/*infloop*/for(var __parent__; new RegExp((Function( '' , <x><y/></x>))); let (constructor = ((p={}, (p.z = <><x><y/></x></>)())), ({ __noSuchMethod__: __count__, __parent__: prototype }) = __parent__ || <><x><y/></x></>) ({a1:1})) ;");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while((yield (({ get let(__count__) { yield (null.@*) } , __noSuchMethod__: ((<><x><y/></x></>)[<x><y/></x>]) })))){do {yield <y><z/></y>;const __proto__; } while(((function ([y]) { })()) && 0); }\n");
tryItOut("L:if(5.0000000000000000000000 |  '' .unwatch(\"constructor\")) L: const __proto__, prop\nreturn  '' ; else  if ((__count__.__count__)) {/*infloop*/L:do  while(* && window);do []; while((window) && 0); }");
tryItOut("with(this.zzz.zzz){}");
tryItOut("/*infloop*/do break ; while(@foo);");
tryItOut("/*for..in*/M:for(let prop in (('fafafa'.replace(/a/g,  \"\" )constructor = this))) {throw true; }");
tryItOut("export __count__;\nreturn;\n");
tryItOut("let ((prop = ({ get __iterator__ __parent__ ()\t { return *::* }  }))) { yield <x><y/></x>; }");
tryItOut("with({__noSuchMethod__: eval(\";\", null)})const prop;");
tryItOut("(*)");
tryItOut("with({__noSuchMethod__: (({a2:z2}) .@ [z1,,]).*})return prototype;/*for..in*/for(const __count__ = undefined in window) yield function ([y]) { };");
tryItOut("while((<y><z/></y> / ({}) + #1#.__lookupSetter__(\"__proto__\")) && 0){; }");
tryItOut("\nreturn <x><y/></x>;");
tryItOut("yield");
