tryItOut("/*infloop*/for((new (<><x><y/></x></>)(undefined, false)); (__parent__ = <x><y/></x>); (@foo++)) yield this;");
tryItOut("return (*::*.throw(0));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __iterator__ in constructor) L:if((eval).call((null + <x><y/></x>.__defineSetter__(\"__parent__\", Math.sin)),  /x/ , ({__parent__ setter: function  __noSuchMethod__ ()false }))) with((p={}, (p.z = <x><y/></x>)())){(window);gc() } else gc()");
tryItOut("{}");
tryItOut("try { try { try { return; } finally { throw  '' ; }  } catch(__parent__\t if (function(){return;})()) { return -3/0 for (__parent__ in true); } catch(prop if ({ __iterator__: [constructor, , __proto__, constructor, ] }) = ({ constructor: prototype, function::<y><z/></y>['__count__']: ({ __noSuchMethod__: prop }) })) { for(let y in [5,6,7,8]) let(__parent__, constructor = 5.0000000000000000000000) { yield false; } finally { with({}) return; }  } catch(eval) { throw __noSuchMethod__; } ");
tryItOut("let(__iterator__ = new (<y><z/></y>)()) { this.zzz.zzz;");
tryItOut("L:with({__iterator__: *::* in [z1,,]}){let (__noSuchMethod__ =  /x/g ) { var function::__iterator__; }/*infloop*/do {throw *;; } while(<x><y/></x>); }");
tryItOut("/*infloop*/M:while(033.prop){yield null; }");
tryItOut("M:with({__iterator__: (window.yoyo( '' ))}){break \n }");
tryItOut("({}).hasOwnProperty");
tryItOut("if(__parent__:  /* Comment */prop.yoyo(undefined)) {const __parent__;arguments }");
tryItOut("M:if(new (<y><z/></y> /= <x><y/></x>)(<x><y/></x> %= <><x><y/></x></>)) { if (<><x><y/></x></> <= <><x><y/></x></>) {M:if(\n<><x><y/></x></>) { if (0x99 <=  /x/g ) {gc()return; }} else ({a1:1}); }} else yield;");
tryItOut("(function (prototype) { return  \"\"  } ).apply");
tryItOut("while((<x><y/></x>) && 0)const __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("let(__count__ = prop = undefined) { for(let y in [5,6,7,8]) return this.__defineGetter__(\"__noSuchMethod__\", \t(null >>= window));");
tryItOut("with(undefined)if(*.__defineSetter__(\"__count__\", gc)) {} else {gc()yield <><x><y/></x></>; }\n");
tryItOut("with({__proto__: ([11,12,13,14].filter)[(this.__defineSetter__(\"prop\", /a/gi))]}){if(this.zzz.zzz) {export *;(3); } else {{}{} } }");
tryItOut("/*infloop*/while(( \"\" [ '' ])){return [,]; }");
tryItOut("/*infloop*/for(([arguments].map(( '' ).__defineSetter__)); true\n *= new (-1)(@foo, 1e81); __count__ = 1.3) {}\n/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in [[]]) break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x/>) throw <><x><y/></x></>;");
tryItOut("while((this) && 0)throw <><x><y/></x></>;\n{}\n");
tryItOut("{return;<><x><y/></x></>; }");
tryItOut("return;");
tryItOut("/*infloop*/for(( '' )++; (false.isPrototypeOf(__iterator__) .@ new Date(this >= @foo, #1#)); <x><y/></x>.valueOf(\"number\").valueOf(\"number\")) /*infloop*/L:do const __parent__ = 3.141592653589793, prototype; while(undefined);");
tryItOut("while((__count__) && 0){yield;let prop; }");
tryItOut("if(prop) return <x><y/></x>; else  if (<x><y/></x>) {export constructor;return; }");
tryItOut("{let (prop) { export *\n/*infloop*/while(this)break L; }; }");
tryItOut("let(break ; = (prop.__parent__ setter= ((@foo).watch).call), __proto__) { for(let y in [5,6,7,8]) gc()");
tryItOut("if((this.__defineSetter__(\"constructor\", new Function))) (this >  \"\" ); else  if (<><xxx {__proto__}={(p={}, (p.z =  '' )())} /></>) {gc()\n } else {{/*for..in*/M:for(__iterator__ in ((Function)(null))){ } } }");
tryItOut(" '' ;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prop] = (null)[this] in new (function(q) { return q; })()) /*infloop*/M:for(*::*; true; this) {{} }");
tryItOut("do gc while((({ prototype: ({ __count__: [__iterator__, , , , ({ __count__: __iterator__ })] }) }) = ('haha'.split)(([ /x/g  for each (__noSuchMethod__ in <x><y/></x>)]), @foo) >= prop.__count__ getter= function(y) { yield y; throw <x/>;; yield y; }) && 0);");
tryItOut("(__count__); const __iterator__\n/*infloop*/M:for((-1 <<= <x/>()); typeof (/<><x><y/></x></>; (( /* Comment */__proto__) ^ (<x><y/></x>.(<><x><y/></x></>)))) let __proto__ =  '' , prop =  '' ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const <bbb xmlns=\"__noSuchMethod__\"><!--yy--></bbb>.__noSuchMethod__ in <><x><y/></x></>) {gc()return -3/0; }");
tryItOut("/*infloop*/L:for([[1]]; true; constructor) {export __noSuchMethod__; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__proto__ = arguments[@foo] ? void <><x><y/></x></> || (eval).call(<y><z/></y>, \f) : <><x><y/></x></>.@* in <x><y/></x> -= -0) {default: break; break; const __noSuchMethod__ = <y><z/></y>, __proto__ =  \"\" ;case ([11,12,13,14].filter): return;case 0: /*for..in*/for(prop in <x><y/></x>) ({}).hasOwnPropertybreak; L:with({__noSuchMethod__: <y><z/></y>.yoyo(undefined)})return 1e4; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\t for  each(let constructor.__iterator__ in this.__defineSetter__(\"__proto__\", (@foo).__defineSetter__)) const __noSuchMethod__ =  /x/g ;");
tryItOut("/*for..in*/for(let constructor = * ? __noSuchMethod__ : <y><z/></y> in (p={}, (p.z =  /x/ --)())) {throw StopIteration; }");
tryItOut("/*infloop*/for(var constructor = this; <x><y/></x>; <x><y/></x>) return #1=[#1#];");
tryItOut("(Math.sin).call\n__count__ = window, prop = *;{}");
tryItOut("M:if((.__lookupSetter__(\"__noSuchMethod__\"))) { if ((let (__iterator__) #3={a:#3#}).@foo) M:if( \"\"  %= *::*) {export *; } else  if ((<x><y/></x> + #1#)) let __count__, __count__; else export __parent__; else let __count__ = false, __proto__;}");
tryItOut("/*infloop*/while(__count__.__noSuchMethod__ getter= __noSuchMethod__)/*infloop*/M:do {yield prototype; }\n while(prototype, prop)\n");
tryItOut("with(new ((new Function(\"continue M;\")))(*)){var __noSuchMethod__ = <><x><y/></x></>, __noSuchMethod__; \"\"  }");
tryItOut(" export ");
tryItOut("try { prototype = constructor; } catch(__iterator__) { for(let y in []); } ");
tryItOut("for(let y in [])\n/*for..in*/for(var [prototype, prototype] = <x><y/></x>.__parent__ = this in prop) {if() gc() else throw this; }\t");
tryItOut("/*infloop*/for(let constructor = (eval)(*::* = prototype, #1#); (*::*.unwatch(\"__proto__\").__defineSetter__(\"__parent__\", (new Function(\"constructor, prototype\")))); (p={}, (p.z = __parent__ = <><x><y\t/></x></>)())) continue L;");
tryItOut("with(true.__defineSetter__(\"prop\", (new Function(\"eval\")))){export *;(this); }");
tryItOut("{const __noSuchMethod__\nlet __proto__, __noSuchMethod__ = <x><y/></x>; }");
tryItOut("return __iterator__;");
tryItOut("/*infloop*/for(var let; __proto__ =  /x/g ; window = (export *)) {break ; }");
tryItOut("throw StopIteration;");
tryItOut("return");
tryItOut("/*infloop*/do yield; while((return constructor; instanceof <ccc:ddd> </ccc:ddd>))");
tryItOut("/*for..in*/L:for(__count__((@foo())) in ( /x/ .propertyIsEnumerable(\"__iterator__\"))) {function (__count__) { __proto__ = [,]; } ( \"\" ); }");
tryItOut("/*infloop*/for(let __count__; (function  prop ()@foo) + \tfunction(q) { return q; }(#3={a:#3#}).yoyo(this); (new ({ set __count__()\r { yield [ ''  for (prototype in <x><y/></x>)] } , constructor: <x/> }))) {this;L: case 8: ([1]).watchbreak;  }");
tryItOut("__count__ = prop;");
tryItOut("if(window) {{} } else  if ([[]]) {{} } else {continue ;throw <y><z/></y>; }");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = typeof ((uneval(window))).hasOwnProperty(\"__noSuchMethod__\") in __parent__ = null) this.zzz.zzz;");
tryItOut("try { for(let y in []); } catch(prototype) { continue M; } finally { throw StopIteration; } ");
tryItOut("{yield;var prototype, __noSuchMethod__; }");
tryItOut("yield [1];");
tryItOut("/*infloop*/M:for(const prop; ({__count__ getter: function (prototype)(undefined)++, __count__: (Function).call })(constructor.__iterator__ = @foo); <>(__proto__-=(Math.sin).call(__count__ = *::*, )).__proto__ = (set += __iterator__)\n<!--yy--></>) {if(false) continue L; else  if ([[]]) continue ; else export *;function(q) { return q; } }");
tryItOut("/*infloop*/M:do return *; while(([this].map((new Function(\"return;\")))))\n");
tryItOut("/*for..in*/for(var [prototype, __proto__] = -{} in prototype) {let (prop, __proto__) { __noSuchMethod__ } }");
tryItOut("/*infloop*/while(#1=[#1#])");
tryItOut("if(({a2:z2}).__iterator__) ;; else <y><z/></y>;");
tryItOut("/*for..in*/\ffor(const new (<><x><y/></x></>)(__count__) .@ this.__defineSetter__(\"__noSuchMethod__\", Math.sin) in (((1 for (x in [])))(typeof prop.yoyo( /x/g )))){var __noSuchMethod__ = #1=[#1#], __noSuchMethod__ = false;; }");
tryItOut("while((eval(\"x::__parent__, prop = @foo;\", (__noSuchMethod__ = <y><z/></y>))) && 0){{/*for..in*/for(var [prototype, prototype] =  /x/g  in [1]) { }break M; } }\n/*for..in*/M:for(const constructor.prop in <x><y/></x>) gc()");
tryItOut("if(let (__parent__, __noSuchMethod__) (new Function(\"throw <x/>;\"))) {if(<y><z/></y>) { if (constructor) export *;} else {return arguments; }([1,2,3,4].slice).apply } else  if (__proto__)  { let (__count__ = (-0)) { break M; } }  else {{}prototype; }");
tryItOut("/*for..in*/for( /x/  in (((*::*.@*))(yield ;.__noSuchMethod__ %= (<y><z/></y>).call(<x/>,  \"\" , @foo) << <x/>))){var __noSuchMethod__;{yield <><x><y/></x></>; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in <><x><y/></x></>) {function(id) { return id }; } }");
tryItOut("if(([1]).propertyIsEnumerable(\"prop\"))  else  if (<xxx>{__parent__}</xxx> == <x/> .@ <><x><y/></x></>) {/*infloop*/M:for(const ({ constructor: __iterator__, __parent__: prop }) = false; ((/a/gi)([,,],  set prop prototype () { {} } )); @foo\n) break L; } else {throw <><x><y/></x></>;__noSuchMethod__.((uneval(*::*))) }");
tryItOut("if(prototype = *::*) {var constructor; } else  if (#2=[(function ([y]) { })()]) yield; else ;");
tryItOut("L:if(throw window;) /*infloop*/for(var __noSuchMethod__; <x/>; false) yield\n{}");
tryItOut("/*infloop*/for(@foo; @foo; <><x><y/></x></>) {;__noSuchMethod__ = true, __noSuchMethod__; }\n/*infloop*/for(new (new Function)(); ( ''  ? __iterator__ : try { ; } catch(__proto__) { const __proto__; } );  /* Comment */window) {export prop; }\n");
tryItOut("/*for..in*/for(let prop in <x><y/></x>.throw( /x/ )) {return *; }\n");
tryItOut("__parent__ =  /x/g ");
tryItOut("with({}) { try { yield new (constructor.__proto__ = *::* > __noSuchMethod__)(__proto__, ((yield (new (<>x></>)(false, @foo))))); } finally { return ([prop].map(<x><y/></x>)); }  } ");
tryItOut("({delete:  /x/g , prop: <><x><y/></x></> })\n");
tryItOut("if(--__iterator__ = undefined) prop");
tryItOut("yield ({ get __parent__() { return <x><y/></x> }  });");
tryItOut("return <x><y/></x>\n");
tryItOut("/*for..in*/for([prop, prop] = ([15,16,17,18].filter('/a/gi, eval(\"if(__count__) {var constructor; }\", prop))) in (__iterator__ = *)) /*infloop*/while(<><x><y/></x></>)export *;");
tryItOut("this.zzz.zzz;");
tryItOut("continue L;\nfunction  __proto__ (__iterator__) { yield *::* } \n");
tryItOut("/*infloop*/M:for(const ({ __noSuchMethod__: __proto__ }) = null(<x/>, <x><\fy/></x>); 3.141592653589793;  '' ) yield this\n");
tryItOut("(<><x><y/></x></> / true.__lookupSetter__(\"prop\"))([@foo].filter((new Function(\"{}\")))) = __proto__;");
tryItOut("{ }");
tryItOut(" /x/g ;");
tryItOut("M:if((__noSuchMethod__ || <x/>)) {/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in this) \freturn false; } else  if (new true(window)) {break L; }");
tryItOut("while((prop.*::* setter= __count__) && 0)var __iterator__ = <><x><y/></x></>, constructor = <x><y/></x>");
tryItOut("/*infloop*/while((this[<x><y/></x>])){constructor = <><x><y/></x></>, __proto__;return; }");
tryItOut("/*infloop*/for( /x/ .propertyIsEnumerable(\"__parent__\"); prop.( '' ); ({__iterator__: window })) {<><x><y/></x></>; }");
tryItOut("\f(__iterator__)\n");
tryItOut("/*for..in*/L:for(let this['__noSuchMethod__'] in [,]) ");
tryItOut("{(\fthis > undefined);L: {<y><z/></y>{} } }");
tryItOut("var constructor; const __proto__;");
tryItOut("L:while(((yield window)) && 0){return ({a2:z2}); }");
tryItOut("if((\t<x><y/></x>(__parent__))) {yield <x><y/></x>;const __count__; } else  if (this.zzz.zzz) __proto__ =  /x/ , __count__ = <x/>;");
tryItOut("if(__count__.__parent__\n) {\fvar prototype, true; }");
tryItOut("/*infloop*/for(__iterator__; ; String(__count__ = *,  \"\" )) {return 3; const constructor;/a/gi }");
tryItOut("__noSuchMethod__.__parent__ = __noSuchMethod__;");
tryItOut("switch(this.__defineGetter__(\"__count__\", window)) { case (prop.((yield  /x/ ))): with({__iterator__: <><x><y/></x></>}){yield window; }break; ;break; default: break;  }");
tryItOut("if(<><x><y/></x></>.valueOf(\"number\").watch(\"constructor\", 'haha'.split)) {yield; } else  if (<><x><y/></x></> @ ([,]++)) \f{(@foo); } else return <y><z/></y>;");
tryItOut("export *;");
tryItOut("/*infloop*/while( \"\" )const prototype = prop;");
tryItOut("/*infloop*/while(){export __parent__;return; }");
tryItOut("/*infloop*/for(const __parent__; ((uneval(@foo)));  '' (#1=[#1#])) {;__parent__; }L: export *;");
tryItOut("/*for..in*/for(let __parent__.prop in (((new (Function())()))(((function  prop () { yield [,,] } )\f.call)))){__count__ =  \"\" , __proto__; }");
tryItOut("/*infloop*/while((--<><x><y/></x></>.isPrototypeOf(<><x><y/></x></>).yoyo(\t(0 |=  /x/g ).watch(\"prop\", eval))))/*infloop*/M:for(const prop = __parent__; false; __iterator__) {let  /x/g ; }");
tryItOut("if((yield  /x/g )) export *;");
tryItOut("<x><y/></x>");
tryItOut("if(constructor.__count__++) {null } else  if (((1 for (x in [])))()) /*infloop*/for(let prototype; prop; __parent__) {(@foo); }");
tryItOut("throw StopIteration;");
tryItOut("L:if([11,12,13,14].some) { if ((.propertyIsEnumerable(\"__iterator__\"))) /*infloop*/for(const __proto__; <y><z/></y>; [,]) (<><x><y/></x></>); else {export *; }} const __proto__;");
tryItOut("/*infloop*/for(let ({ prototype: ({ __parent__: constructor }) }) = (<x><y/></x>.(5.0000000000000000000000)).unwatch(\"prototype\"); (<xxx>{prototype}</xxx>.(-3/0.unwatch(\"__noSuchMethod__\"))); 5.0000000000000000000000.eval((function ([y]) { })()).__lookupSetter__(\"each\")) if(new __iterator__ = <y><z/></y>) { if ((new 1e4\n)) {gc()true; } else {yield; }}\nthrow __count__;");
tryItOut("/*infloop*/M:for((__parent__);; false;  /x/ ) {{} }");
tryItOut("L:with(-(__parent__ = *))if(<x/>.watch(\"__iterator__\", (function ([y]) { })())) { if ([15,16,17,18].sort(Math.pow, [,])) {export constructor;export *; } else {yield window; }}");
tryItOut("{([z1,,]); }");
tryItOut("switch((__noSuchMethod__.prop)) { case //h\n\n<x><y/></x>.__lookupSetter__(\"prototype\"): /*for..in*/L:for(const prop = [*::*].sort(function(y) { yield y; ; yield y; }) in ((function ([y]) { })().propertyIsEnumerable(\"prototype\") ::  '' \n)) /*for..in*//* nogeckoex bug 349964 */ for  each(let  /x/g .__iterator__ in <x><y/></x>) {{}throw [,,];; }break; L:switch(constructor = *) { case {}.__defineSetter__(\"@foo\", function (\x7f) { ; } ):  }break; default: if(window) undefined else  if (1.3) {var ;return <y><z/></y>; } else {; }break;  }");
tryItOut("/*infloop*/while(5.0000000000000000000000((null)) == (4.++ <= function (__iterator__, prototype) { yield true } ))/*for..in*/for(let __proto__ = delete (* ^ constructor) in ([1,,].__proto__%=<><x><y/></x></> += <><x><y/></x></>)) {export prop;throw undefined; }");
tryItOut("{with({__proto__: *::* >> <x><y/></x>}){export __proto__; }export *; }");
tryItOut("do yield <><x><y/></x></>; while((-constructor) && 0); const __proto__;");
tryItOut("({}).__lookupGetter__\n");
tryItOut(" const __proto__;");
tryItOut("return;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(const __parent__ in 4.) {export *;return; }");
tryItOut("/*for..in*/for(prop in *) {constructor = <y><z/></y>; }");
tryItOut("{return; }");
tryItOut("/*for..in*/for(let __count__ in <x/>) export __noSuchMethod__;");
tryItOut("return;");
tryItOut("with({}) with({}) { let(__proto__) { (<x><y/></x>); } ");
tryItOut("do __proto__, __iterator__; while((prototype = #1=[#1#]) && 0);");
tryItOut("/*infloop*/for([ \"\" ].hasOwnProperty(\"delete\"); (prototype) = ('fafafa'.replace(/a/g, new Date())); (-0)+=(<y><z/></y> = new ((<x><y/></x>).apply)())) if(__proto__ = <><x><y/></x></>.x::__count__) constructor = window else {throw <x><y/></x>;export __noSuchMethod__; }");
tryItOut("/*infloop*/M:for(\n<><x><y/></x></> = @foo; new [1,2,3,4].slice(<x/>(<zzz>1e-81</zzz>, (++<x><y/></x>)), ((1.2e3).watch).call((prototype = 1e4), yield 1e+81)); false) {return;{} }");
tryItOut("with({__noSuchMethod__: (yield __proto__)})<xxx {prop}={(new Boolean(prototype.propertyIsEnumerable(\"constructor\")))} \r/>");
tryItOut("/*infloop*/for(window.unwatch(\"prop\"); let (__iterator__) <x><y/></x>; *::*) {({}).hasOwnProperty }");
tryItOut("/*infloop*/L:for(let constructor; ((<y><z/></y>)[__iterator__ = <x><y/></x>]); __proto__ = [11,12,13,14].some) /*infloop*/M:for(prototype = true; 0.1; *::*) let constructor, constructor;");
tryItOut("/*for..in*/for([constructor, prop] = eval(\"<><x><y/></x></> ? 1.2e3 : {}.*\", [<x><y/></x> for each (__noSuchMethod__ in *::*)]) in (prototype.delete)[this.zzz.zzz] in (<x><y/></x>\n)) {({}).__lookupGetter__ }");
tryItOut("let (__iterator__) {  }");
tryItOut("with((({a1:1}).isPrototypeOf(undefined)\n ^ ([@foo])))L:switch((uneval( /* Comment */@foo.__defineGetter__(\"prop\", <x><y/></x>)))) { case typeof [window].filter(<x><y/></x>): __count__;break;  }");
tryItOut("with(({ constructor: __iterator__, function::__proto__: __iterator__ }) = <x><y/></x>--)L:with({__count__: <x><y/></x>}){const __noSuchMethod__, __proto__ = ({a1:1});export prototype; }");
tryItOut("/*infloop*/for( /x/ .isPrototypeOf(1e81); window.eval(__count__).__defineGetter__(\"prototype\", new Function); new new Function(true, gc)) {with({__parent__: this}){; } }");
tryItOut("with(<><x><y/></x></>.isPrototypeOf(this))L:yield window) return true; else () {return ({a2:z2}); }");
tryItOut("/*for..in*/for(let __count__ in ((({}).throw(1.2e3))((x::prototype = __proto__).watch(\"__count__\", gc))))continue M;");
tryItOut("throw {};\nbreak L;\n");
tryItOut("{/*infloop*/do var __iterator__ = window; while(yield this.__defineSetter__(\"prop\", Math.sin););let(prototype) { throw StopIteration; }");
tryItOut("/*for..in*/for(__count__ = constructor.((prototype+=#0=[(-1)])) in @foo.__lookupSetter__(\"__count__\")) M:if(this.zzz.zzz) {} else  if ((; =  /x/g )) {prototype;let prop = <><x><y/></x></>, prototype; }");
tryItOut("if(function::__count__.__noSuchMethod__) {/*for..in*/M:for([__count__, prop] = @foo in *) return default: export *;; } else yield;");
tryItOut("L:while(((#3={a:#3#} >= 033)) && 0){{const __count__; } }");
tryItOut("try { let(__iterator__) { export __count__; } catch(prototype if (function(){ '' ;})()) { this.zzz.zzz; } catch(prototype) { __count__ = constructor; } ");
tryItOut("L: eval");
tryItOut("return [, ({ prototype: ({ __count__: prototype }) }), ] = #1=((<y><z/></y>)(1.2e3)%=*.__iterator__);");
tryItOut("/*for..in*/for(let constructor in constructor = (function ([y]) { })()) export __parent__;");
tryItOut("if([(p={}, (p.z =  /x/ )())]) {return;const __proto__ = *; } else {/*for..in*/M:for(var prop in ((-0)(undefined >> 1.3)))this }");
tryItOut("{prototype = __count__;{} }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in [1,,] ? const __noSuchMethod__ : <><x><y/></x></> !== false) {__count__;return; }throw __parent__; const __noSuchMethod__; }");
tryItOut("L: let __iterator__ = undefined;");
tryItOut("/*infloop*/for(var prop; <y><z/></y>; this) return;");
tryItOut("yield window;\nyield __proto__;\n");
tryItOut("yield");
tryItOut("L:if(prototype) { if (<x><y/></x>) {1e81;<y><z/></y>; }} else break L;");
tryItOut("return __count__;\nbreak ;\n");
tryItOut("with({constructor: constructor = __iterator__})var __parent__ = <x><y/></x>, __noSuchMethod__ = *;");
tryItOut("M:if([,,]) {<bbb xmlns=\"\n<x><y/></x>.hasOwnProperty(\"prop\")\"><ccc:ddd> </ccc:ddd></bbb><bbb xmlns:ccc=\"*.__lookupSetter__(\"__proto__\")\"><ccc:eee></ccc:eee></bbb> } else  if ((prototype.(<><xxx>{prototype}</xxx></>.__lookupSetter__(\"prop\"))--)) {prototype = __proto__\n } else throw  '' ;");
tryItOut("{/*infloop*/L:while(\n#1=[#1#])if(<y><z/></y>) { if (true)  else {yield [1]; }}\t }");
tryItOut("if(__count__ /  '' ) { if (<><x><y/></x></> > ) {gc()gc() }} else gc()");
tryItOut("__count__ = window, prop;");
tryItOut("/*for..in*/L:for(let __parent__ = ((#1=({prop: true})))(window.__noSuchMethod__ =  /x/ , new Array(this)) in (eval(\"const constructor, __iterator__;\", undefined))) if(window.__lookupGetter__(\"prototype\")) ");
tryItOut("if([__iterator__, function::__proto__, __iterator__, ] = __parent__) * else  if (#1=({__noSuchMethod__: null})) <x/>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in @foo) {throw <x><y/></x>;continue M; }");
tryItOut("let __parent__, __count__ = <><x><y/></x></>; const __count__;");
tryItOut("/*for..in*/M:for(let __noSuchMethod__ = window in (<x><y/></x> >>> #1#).watch(\"prototype\", Math.pow)) {gc() }");
tryItOut("/*infloop*/do {var __parent__;return @foo; } while((*));");
tryItOut("export *\nthrow arguments;");
tryItOut("L:with(<x/>)prototype");
tryItOut("/*infloop*/do {__iterator__ = <><x><y/></x></>;export __iterator__; } while((0/0)[true]);");
tryItOut("/*infloop*/M:while((constructor.prototype getter= new Function , __count__ = <><x><y/></x></>).__proto__){L: \t{__noSuchMethod__ = ({}), prototype; } }");
tryItOut("L:while((([ /x/g ].sort(({}).__lookupGetter__))) && 0){this; }");
tryItOut("if(null ::  \"\" ) { if (prop.constructor) {const yield = [1,,]; } else yield <x/>;}");
tryItOut("let (__iterator__ = *::*) { {} }");
tryItOut("L: {(@foo); }");
tryItOut("/*for..in*/for(var __iterator__ = <x><y/></x> in this) return [1,,];\n__proto__\n");
tryItOut("with((new function ()new Function(window)\n(<><zzz>window = @foo</zzz>\r</>, <x/>)))/*for..in*/for(constructor.__iterator__ in ((-1)--) = <x/> !== <x><y/></x>) {export *;/*for..in*/M:for(__parent__ = true in 1e81) continue L; }");
tryItOut("if(((uneval((<y><z/></y>.__lookupGetter__(\"prop\")))))) { if ((({ get prototype x::__parent__ (constructor) { yield  /x/  }  })) ? 3 .. function(id) { return id } : let (__parent__ = <x><y/></x>) undefined &=  /* Comment */(__proto__.__defineGetter__(\"__iterator__\", function(y) { yield y; throw -0;; yield y; }))) /*infloop*/for(let __iterator__; .2; []) function () { return  /x/g  } } else __iterator__.__proto__");
tryItOut("[1,2,3,4].map\nreturn this;\n");
tryItOut("{return 0;(<y><z/></y>); }");
tryItOut("/*for..in*/for(const prop in prop) let __iterator__;");
tryItOut("/*infloop*/L:while(yield this.__defineSetter__(\"__parent__\", Function))M:with({__iterator__: (prop = null)}){let __count__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in new (({}).hasOwnProperty)(*,  /x/g ) == *::*.__defineSetter__(\"__parent__\", new Function)) {/*infloop*/do  while(__proto__ = this.__lookupGetter__(\"prop\")--); }");
tryItOut("if(prop%=<x/>) <x/>; else var __noSuchMethod__, __noSuchMethod__;");
tryItOut("/*infloop*/while((\t<x/>.__iterator__ && prototype%=[z1,,] ^= this)){const __noSuchMethod__, __noSuchMethod__ = true;with({prototype: ('haha'.split)}) }");
tryItOut("with(true)continue ;");
tryItOut("/*for..in*/for(var (p={}, (p.z = (prop = constructor))()).__count__ in __iterator__.__parent__) {while((undefined) && 0){return;throw constructor; }gc() }");
tryItOut("/*infloop*/for(let __noSuchMethod__; (3 ^ 1.3.propertyIsEnumerable(\"__noSuchMethod__\")); delete @foo.prototype) {return; }");
tryItOut("/*infloop*/while((__iterator__ = (*::* & <x><y/></x>) in <{__noSuchMethod__}><!--yy--></{__noSuchMethod__}>.(__noSuchMethod__\n.(<><x><y/></x></>))))M:while(((function () { export prototype; } ).call((this.__defineSetter__(\"__proto__\", function  __noSuchMethod__ () { yield @foo } )), )) && 0){/*infloop*/L:for(const prototype; window; __iterator__.(<x><y/></x>);) {( /x/ ).__defineSetter__<><x><y/></x></>; } }");
tryItOut("M:if((<x><y/></x>.eval(@foo))) { if (Error((prop =  \"\" ), <x><y/></x>)) export *;} else ([1,,]);");
