tryItOut("/*for..in*/L:for(var __parent__ in (([1,2,3,4].map(new eval(([1,,])[ '' ])))(<>  </>)))throw 033;");
tryItOut("with(__count__.prop|=(window.prop = [[1]]).yoyo((new (true).__defineSetter__(<><x><y/></x></>)))){return <y><z/></y>; ''  }");
tryItOut("{{}with(#1=[#1#]--){return false;return window; } }");
tryItOut("if(\n1e+81) { if (\f1.2e3) {(<x><y/></x>);throw  /x/g ; } else }");
tryItOut("/*infloop*/do {{}\nvar __proto__ = arguments, prototype = <y><z/></y>;\nvar __iterator__ =  '' ; } while(((({ prop: prototype, prototype: ({ prototype: __iterator__ }) })).call(<x><y/></x>,  )\n));");
tryItOut("/*for..in*/for(const *::* = __count__.(<><x><y/></x></>) in window) \nyield this;");
tryItOut("/*infloop*/for(var ({ __noSuchMethod__: [__parent__, prototype] }) = (new Number())[<><x><y/></x></>(__proto__)];  /* Comment */<><x><y/></x></>; -0 >= <><x><y/></x></>) const prop;");
tryItOut("export *;");
tryItOut("{/*for..in*/for(var [prop, __iterator__] = (<x><y/></x> ..  '' ).eval(*()) in constructor.hasOwnProperty(\"__iterator__\")) {false; } }");
tryItOut("while(((( /x/g ++).isPrototypeOf(yield 3;\t) ? ({__count__: prop.__proto__ }) : <x/>--)) && 0)/*infloop*/M:do try {  } finally { return <x><y/></x>; }  while((<x/>));");
tryItOut("do var prototype = ((*::*)()); while(( /* Comment */@foo) && 0);");
tryItOut("function  prop (<y><z/></y>) { ; } yield <x/>;");
tryItOut("{<x><y/></x>;yield; }");
tryItOut("throw <y><z/></y>;yield ({});");
tryItOut("with({}) { let(__noSuchMethod__ = (function(y) { yield y; ;; yield y; }).call(window, false), prototype = new Number(<y><z/></y>)) { yield <><{prop}><!--yy--></{prop}></>; } ");
tryItOut("/*infloop*/while(this.__defineGetter__(\"prop\", new Function)){if([<x><y/></x> for each (prop in function(id) { return id })]) L:if(1e-81) \r{ if (<y><z/></y>) {yield; } else {const prop, prop;gc() }} else  if ((function(y) { yield y; return;; yield y; }(<x/>))) ;\n{}\n }");
tryItOut("/*infloop*/for(const __proto__; (({ __iterator__: ({ constructor: ({ __parent__: __noSuchMethod__, __count__: ({ constructor: [constructor, , __noSuchMethod__] }) }) }), __proto__, prototype: [] }) =  /x/g ['__parent__']-=__iterator__.__count__ = <>__proto__ getter: eval(\"\", 0x99)</>\n); undefined) {for(let y in []); }");
tryItOut("throw prop;");
tryItOut("\nthrow __count__;\n");
tryItOut("/*infloop*/M:for(let __iterator__; *; __iterator__ = this) throw <><x><y/></x></>;");
tryItOut("M:if(<><x><y/></x></>) {/a/gigc() } else  if (__proto__ = 1e4) ; else {<><x><y/></x></>;return true; }");
tryItOut("switch(arguments) { default: case 9: return __count__;break; case 5: gc()break;  }");
tryItOut("/*infloop*/L:while(1e+81 && <x><y/></x>)*;");
tryItOut("/*for..in*/for(var [__iterator__, __noSuchMethod__] = #3={a:#3#}.throw([,,z1]) in <x><y/></x>) return __parent__\nprop = <x/>;");
tryItOut("/*for..in*/for(var __count__.__proto__ in (([1,2,3,4].map)(undefined.isPrototypeOf(<x/>) %= ((default:  for (constructor in null)))))){break ; }");
tryItOut("with({__count__: [11,12,13,14].some})gc()");
tryItOut("/*for..in*/for(let [constructor, prototype] = true in (__iterator__ = <><x><y/></x></>)) yield;");
tryItOut("do {break L;; } while((new (@foo).__defineSetter__(window)) && 0);");
tryItOut("prototype = constructor;");
tryItOut("with({}) { return  \"\" ; } ");
tryItOut("/*infloop*/L:while((uneval(__proto__))){/*infloop*/for(Function(constructor = <x/>); this.__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__); new undefined > <x><y/></x>//h\n(([11,12,13,14].some),  '' )) {{}throw this; } }");
tryItOut("/*for..in*/M:for(var [__count__, prop] = .2 in this) {{} }");
tryItOut("/*infloop*/\tfor(function::__noSuchMethod__; [ /x/ ]; prop.__noSuchMethod__) /*for..in*/for(var [__iterator__, __count__] = ((gc).call(window, )) in  \"\" ) {yield 1.2e3; }");
tryItOut("switch((try { constructor, prop; } catch(__noSuchMethod__ if <x/>) { yield <><x><y/></x></>; } catch(__parent__) { gc() } finally { export *; } (({prototype: window}), <><x><y/></x></>))) { case  '' :  }");
tryItOut("if(<x><y/></x>) { if (prototype) let __iterator__, __iterator__ = this; else {throw *::*;null; }}");
tryItOut("L: {yield; }");
tryItOut("if(@foo.__iterator__.unwatch(\"prop\")) { if (([undefined.unwatch(\"__proto__\") if ( \"\"  <= <><x><y/></x></>)])) if(prop = <y><z/></y>) { if (<y><z/></y> ^  '' ) {L:if(undefined) { if (033) gc() else gc()} } else {var function::let, __proto__;__iterator__, __noSuchMethod__; }} else /*for..in*/for(let __count__.prototype in ((Function)(\n@foo .@x:: __noSuchMethod__ = false)))M:switch(null) { case 0: return;break;  }}");
tryItOut("if([] = constructor = <><x><y/></x></>) {/*infloop*/for(const prototype = <><x><y/></x></>; null;  '' ) {{} }L: {L: let __proto__; } } else  if (constructor = this.__defineGetter__(\"constructor\", ({}).hasOwnProperty)) __iterator__ = ({});");
tryItOut("/*infloop*/for(var prototype: (function::prop.prop setter= function (prop) { yield null } ) ^ @foo.__defineGetter__(\"__proto__\", function  prototype (__count__) { yield window } ) = ({ set prop __proto__ (__parent__, __parent__)((<x><y/></x>\f)( /x/ , )),  get prototype __iterator__ (prototype, __count__) { return (__iterator__ = <x><y/></x>) }  }); null; #3={a:#3#}(<x/>).propertyIsEnumerable(\"__proto__\")) {export constructor;/*infloop*/M:for(({ __count__: prototype })\f = function(q) { return q; }; function::constructor @ <><x><y/></x></>; ((1 for (x in [])))) yield <x><y/></x>; }");
tryItOut("do {function  __iterator__ (__proto__)this } while((<><x><y/></x></> == __iterator__) && 0);\n");
tryItOut("let(({ constructor: __iterator__, __noSuchMethod__: ({ __parent__: prop, __count__: prototype }) }), constructor = *::*) ((function(){let(__iterator__, __parent__ = <><x><y/></x></>) ((function(){throw StopIteration;})());})());");
tryItOut("/*for..in*/for(let __proto__ in ((1e-81)( \"\"  , [,,]))){return;const prototype; }");
tryItOut("/*infloop*/for(const __iterator__; ((function (prototype) { yield [[]] } )(undefined)); ( /x/g  >>>=this)) return;");
tryItOut("L:if(({__noSuchMethod__: true})) export __iterator__; else {var prop;\f; }");
tryItOut("/*for..in*/for(let __proto__ = ([@foo]) in \teval(\"<x><y/></x>\", <x><y/></x>)) /*infloop*/for([] = this.zzz.zzz; [15,16,17,18].sort(/a/gi, [,] ^= true); 'fafafa'.replace(/a/g, ({}).__lookupGetter__)) const constructor, __count__ = *::*;");
tryItOut("\nconst __iterator__ = <x/>, constructor = #1=[#1#];\n");
tryItOut("/*for..in*/M:for(var @foo.__noSuchMethod__ ;  in *) __noSuchMethod__ = <x><y/></x>;");
tryItOut("M:while((*) && 0)let __proto__ = <><x><y/></x></>, __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in <x><y/></x>) throw @foo;");
tryItOut("/*infloop*/for(1e-81( \"\" ) ? * : function ([y]) { }.hasOwnProperty(\"prototype\"); new <><x><y/></x></> - __parent__.__noSuchMethod__;  ''  / null) {yield undefined;return; }");
tryItOut("M:with(\f{__iterator__: ({constructor: arguments, <><x><y/></x></>, [,,z1]: <><x><y/></x></> })}){return -3/0 > -3/0; }");
tryItOut("const  __iterator__.x::constructor;\nconstructor = __parent__-=4., __noSuchMethod__ = prototype;\n");
tryItOut("let (__count__, ({ __count__: __noSuchMethod__, __noSuchMethod__: prototype })) { yield; }");
tryItOut("L:while(((function () { yield (__proto__.((this.__parent__))) } )()) && 0)export *;");
tryItOut("/*infloop*/for(__iterator__; (this.__defineGetter__(\"__proto__\", function (constructor) { yield constructor } ) >= 'haha'.split(<x><y/></x>).__lookupSetter__(\"__parent__\")); new (function  __noSuchMethod__ (({ function::__iterator__: __iterator__, __count__: __noSuchMethod__ }), __parent__) { return __proto__ = __iterator__ } ).call(undefined, 3.141592653589793 %= __count__)) const __count__ = <x><y/></x>, __proto__;");
tryItOut("let(({ constructor: ({ __iterator__: ({ prototype: __parent__, prop: ({ constructor: __noSuchMethod__, prop: prototype }) }), let: prototype }) })) { yield ((function(q) { return q; }).call).call(eval(\"throw [z1];\", *::*), (-1 for each (constructor in )), window);");
tryItOut("if(<><>(<><x>\t<y/></x></>.isPrototypeOf( /x/ )) *= yield <y><z/></y></></>) /*infloop*//*\n*/for(__count__; ( /* Comment */<><x><y/></x></>); new function  __parent__ (__parent__, __parent__) { return prototype } ()) {yield; } else {; }");
tryItOut("L:if(@foo) { if ((new Array(<y><z/></y>, @foo))) false; else {constructor;break ; }}");
tryItOut("yield __parent__;");
tryItOut("/*infloop*/for(let \f({ __noSuchMethod__: ({ __parent__: [__count__, __parent__, , ], constructor: ({ __iterator__: __count__, constructor: __proto__ }) }) }) = Iterator(); ({__count__: __proto__}); ( /x/ )) {}");
tryItOut("/*for..in*/L:for(const Object(prototype,  '' ) in void ([11,12,13,14].sort)) {/*infloop*/L:while(([1,2,3,4].map).call\r(__proto__, <y><z/></y>))return -1;/*for..in*/for(__iterator__ in ((eval)(constructor.constructor getter= Math.pow))){const __count__ = <>{;continue ; }</>, __count__;return; } }");
tryItOut("return prop = ({prop: (undefined for (prop in this) for each (__iterator__ in @foo)),  set prop ({ __count__: __parent__ }) (({ __proto__: function::prototype }), __noSuchMethod__) { export *; }  });");
tryItOut("(<x/>)() try { yield []; } finally { const case new (-0)(__noSuchMethod__, [,,z1]): throw 1.3;break; ; }   = *::*.isPrototypeOf(*::*)['__noSuchMethod__'];");
tryItOut("return;");
tryItOut("while((<x><y/></x>) && 0)__noSuchMethod__");
tryItOut("constructor");
tryItOut("/*infloop*/L:do {({}).hasOwnProperty } while(false);");
tryItOut("/*infloop*/for(let [({ {}: __proto__ }), , [, , prop, , ], constructor] = ({prototype: eval(\"let __count__;\", ) for each (constructor in prop), function::prop: (uneval(__count__.__proto__ getter= <x/>)) }); <x/>; let (__iterator__ = this) <x><y/></x>) {if(({constructor: this, __iterator__: this })) return; else  if (undefined.hasOwnProperty(\"prop\")) let __parent__ = ({a2:z2}); else ; }");
tryItOut("/*infloop*/while(window)return;");
tryItOut("{/*infloop*/do {__noSuchMethod__;return ; const __proto__; } while(0.1.__lookupGetter__(\"__parent__\"));let(__iterator__ = eval(\"throw *::*;\", <><x><y/></x></>)) ((function(){with({}) { {} } })()); }");
tryItOut("if((new ( \"\" ).__defineSetter__())) ([,]);");
tryItOut("{with({__count__: (([15,16,17,18].map((function  prop (__iterator__, prototype)<><x><y/></x></>).call, <><x><y/></x></>)).unwatch(\"prototype\"))}){let __proto__ = prototype, __iterator__;return <><x><y/></x></>; }/*for..in*/for(const [__iterator__, constructor] = (eval(\"-0.__noSuchMethod__\", (function ([y]) { })() /= true)) in ([1,2,3,4].map).call(1e81, window, 3)) window; }");
tryItOut("while(((@foo %= window)) && 0){let ([__iterator__, , function::prop]) { {prototypeyield <y><z/></y>; } } }");
tryItOut("/*for..in*/for(var [__proto__, constructor] = __count__.constructor = ( ''  >>= 4.) in <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) /*for..in*/M:for(let __iterator__ in undefined) ");
tryItOut("M:if((this.__defineGetter__(\"prop\", <x/>) %= (function (constructor, try { const function::prototype = function ([y]) { }; } catch(__noSuchMethod__ if (function(){yield this;})()) { <x><y/></x>; } finally { continue M; } ) { yield @foo } )(function::__iterator__, []) |= [] , <><x><y/></x></>)) /*for..in*/for(var __noSuchMethod__ in __proto__) throw __proto__; else {throw *::*; }");
tryItOut("if((new Object())) { } else {Math.sin }");
tryItOut("for(let y in []);");
tryItOut("if(this) {const __count__ = -1; } else {export *; }");
tryItOut("/*infloop*/for(<x><y/></x>; window.throw([1]); (<><x><y/></x></> for (__iterator__ in 033))) {(undefined); }");
tryItOut("if((function ([y]) { } % false .@*:: (<x><y/></x>.eval(<><x><y/></x></>))) & (function(y) { yield y; return prop;; yield y; }).call((*.unwatch(\"__proto__\")), )) { if ((__count__ = *::*)[(null.valueOf(\"number\"))]) {return  yield ;{continue ;return; } } else <><x><y/></x></>;}");
tryItOut("with({}) return;");
tryItOut("let(prototype = new ('fafafa'.replace(/a/g, gc) * (* if (<><x><y/></x></>))), __iterator__) ((function(){prop = prototype;})());");
tryItOut("/*infloop*/for(var __count__; window; [15,16,17,18].filter(([15,16,17,18].sort(\nfunction ()null, __iterator__)).__defineSetter__, (yield <><x><y/></x></>).__lookupGetter__(\"function::__noSuchMethod__\"))) { }");
tryItOut("(false);");
tryItOut("/*infloop*/for(__noSuchMethod__ = (<><x><y/></x></>)( \"\" ); [__iterator__.__proto__ getter= *].map(new Function); <>(Function)(( ''  / <x/>))</>) {/*for..in*//* nogeckoex bug 349964 */ for  each(var [11,12,13,14].some['__iterator__'] in ) \x00/*for..in*/for(__parent__ = (new (Function)()) in this) \tthrow undefined; }");
tryItOut("");
tryItOut("L:if(<x><y/></x>.eval(__proto__)) {yield; } else  if (<><x><y/></x></>) {let __count__;const prototype = prototype, __parent__ = try { break\n ; } catch(__noSuchMethod__) { throw __proto__; } finally { gc() } ; } else {var constructor, __count__ = <><x><y/></x></>; }");
tryItOut("while((@foo) && 0){return [[1]]; }");
tryItOut("if(__count__ = [,  else if , ]) { if ((__iterator__)) {export prop;5.0000000000000000000000; }} else {export *; }");
tryItOut("with(-1)let (prop) { export *; }");
tryItOut("L: continue \n{undefined; }");
tryItOut("/*for..in*/L:for(var prop = prop.__noSuchMethod__ in 0.1) export constructor;");
tryItOut("L: {gc() }\n");
tryItOut("{__iterator__, constructor;; }");
tryItOut("");
tryItOut("L:with({constructor: (yield <><x><y/></x></>)(-3/0.__defineSetter__(\"__count__\", function  constructor () { yield *::* } ), 1.3.valueOf(\"number\") & (false.@foo))}){\nreturn *;var constructor; }");
tryItOut("let (__iterator__ = <y><z/></y>) { gc() }");
tryItOut("export *;");
tryItOut("(#1=[#1#])try { this.zzz.zzz; } catch(prototype) { this.zzz.zzz; } ;");
tryItOut("{with({prototype: \n /x/ })yield *; }");
tryItOut("{throw return 0/0;;<x><y/></x>; }");
tryItOut("/*for..in*/for(let __iterator__.prototype in window) prop");
tryItOut("let (prop, prototype) { /*for..in*/for([__iterator__, __parent__] = ([, __count__, , prototype, __noSuchMethod__] = prototype = default: case 7: throw  /x/g ;break; yield;break; case 8: return;break; yield <x><y/></x>;yield <><x><y/></x></>;case 9: ;break; case 7: var __count__, __count__;var __noSuchMethod__;case 4: ) in ((({}) for (let in  /x/g )))) const __noSuchMethod__; }");
tryItOut("if(<><>[(undefined %= 0/0) for each (__parent__ in __count__.propertyIsEnumerable(\"constructor\")) if ( '' )]</></>) {this.zzz.zzz; } else  if ((gc().watch(\"__count__\", ({}).hasOwnProperty))[4.]) {{}\n } else if(window.propertyIsEnumerable(\"prototype\")) {{}export __noSuchMethod__; } else  if (({ set __count__ constructor () { yield __proto__ } , \tprototype: (-0) })) {__parent__; }");
tryItOut("switch(Exception() & ((yield (__noSuchMethod__.let = prop)))) { default: /*infloop*/for(([11,12,13,14].some); (p={}, (p.z = __iterator__ = __noSuchMethod__)()); ({ get __noSuchMethod__(constructor)\n@foo })) {for(let y in []); }case [this.__defineSetter__(\"__proto__\", /a/gi) for (prototype in new gc(<><x><y/></x></>)) for each ((<><x><y/></x></>)(*) in yield (new function (__noSuchMethod__, __iterator__) { return ({ setter: @foo }) = __noSuchMethod__ } (<><x><y/></x></>, *)) .@*:: ({a2:z2}).prototype) if (\n<y><z/></y>.watch(\"__noSuchMethod__\", eval))]: case <x/>.isPrototypeOf(((<xxx>{prototype}</xxx> ^ return).isPrototypeOf(eval(\";\", __noSuchMethod__ instanceof <><x><y/></x></>.isPrototypeOf(__proto__))))): case 0: break; case 1:  }");
tryItOut("with((new (([@foo].filter(function  __noSuchMethod__ (__proto__, __iterator__)([ /x/ ]))))(__iterator__.(<x/>)++).hasOwnProperty(\"__count__\")))/*for..in*/L:for(var prop = true in undefined) {break ; }");
tryItOut("{/*for..in*/for(const (__proto__) in ((prop)(constructor\t = __noSuchMethod__.hasOwnProperty(\"__iterator__\")))){return <y><z/></y>;prop =  '' ; } }");
tryItOut("for(let y in [5,6,7,8]) with({}) { <><x><y/></x></> = prop; } ");
tryItOut("/*infloop*/for(prototype; __count__ = 1e+81.throw((<><x><y/></x></>.__lookupSetter__(\"__parent__\"))); window <= <x\t><y/></x>) {new Function }\n");
tryItOut("/*for..in*/for(const setter in ((function(q) { return q; })([<x><y/></x> for each (prop in window)].valueOf(\"number\"))))while(([z1,,]) && 0)throw @foo;");
tryItOut("/*infloop*/for(const [] = constructor == <x><y/></x> ^= ( \"\" )[this].__noSuchMethod__; (prop = ({ __proto__: prop, prototype: __count__ }) = <y><z/></y> ^ 3/0) == ({ __count__: __iterator__ }) = [prop, __proto__]; *::*) const prototype;");
tryItOut("with({__noSuchMethod__: function (constructor, __count__) { yield; } ( /x/g , this)})export *;");
tryItOut(" { return 3.141592653589793 } \n");
tryItOut("/*for..in*/for((__proto__) in false) {(<y><z/></y>); }\n");
tryItOut("{;(<x><y/></x>); }");
tryItOut("__iterator__");
tryItOut("/*for..in*/for(let __count__ in new  if (<><x><y/></x></>)) yield  \"\" ;");
tryItOut("M:if(0) {yield this.zzz.zzz;export constructor; }");
tryItOut("export __iterator__;");
tryItOut("{yield; }");
tryItOut("with({__noSuchMethod__: ((<x><y/></x>).call(<><x><y/></x></>, /a/gi, null))})return;");
tryItOut("__noSuchMethod__ = @foo\n");
tryItOut("L:with({__parent__:  /* Comment */<><x><y/></x></>}){yield; }");
tryItOut("with(null.@foo.yoyo(1e+81))/*infloop*/for(<x><y/></x>.(<y><z/></y>) @ this.__defineSetter__(\"__parent__\", null); (({}) >>> <x><y/></x>); new (<y><z/></y>)()) export *; const prop;");
tryItOut("continue L\n\t__parent__");
tryItOut("{}");
tryItOut("let(__proto__ = <x><y/></x>) { let __parent__;");
tryItOut("/*infloop*/while(__count__){export *; }");
tryItOut("/*for..in*/M:for(const __proto__ in <x><y/></x>) let __iterator__ = <x/>, __count__ =  \"\" ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in *::*) {yield ({});export *; };");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((undefined['({ __proto__: ({ __parent__: ({ prototype: ({ constructor: __count__, __iterator__: __proto__ }), __parent__: ({ __proto__: prototype }) }), prop: ({ __iterator__: ({ constructor: constructor, constructor: __iterator__ }) }) }) })']) in  /* Comment */undefined) {yield;switch(\n /x/g ) { default:  } }");
tryItOut("const constructor = <><x><y/></x></>;");
tryItOut("with({}) throw StopIteration;");
tryItOut("do {throw <><x><y/></x></>; } while(((__count__.(this.__defineSetter__(\"1.2e3\", true)).yoyo([,,z1]));");
tryItOut("this.prop = prototype;");
tryItOut("yield;");
tryItOut("/*infloop*/for(x::prototype; [(delete <y><z/></y> <<  \"\"  .@ new ('fafafa'.replace(/a/g, <x/>))(('fafafa'.replace(/a/g, <x><y/></x>))))]; yield false) {/*for..in*/for(var __count__ in ((function  __parent__ () { yield <y><z/></y>; } )( \"\" ))){with({__parent__: this}){return;export prototype; }/*infloop*/for(let prop = undefined; __iterator__; constructor) export prop } }");
tryItOut("/*for..in*/for(var [x::constructor, __iterator__] = [15,16,17,18].some(({}).__lookupGetter__, undefined) === __proto__ =  /x/ .valueOf(\"number\").propertyIsEnumerable(\"__parent__\") in new Function( { yield <x><y/></x> } )) gc()");
tryItOut("for(let y in [5,6,7,8]) throw constructor;");
tryItOut("return <><x><y/></x></>;");
tryItOut("if(<><zzz><x/>.yoyo(true).throw(undefined ^ <y><z/></y>)</zzz></>) {return;\nyield  \"\" ;\nvar __proto__ = <x/>; } else  if (RegExp(3.141592653589793.__lookupSetter__(\"__proto__\"))) {/*for..in*/for(const __count__ in <><x><y/></x></>) {continue M; }gc() } else  /x/ ;");
tryItOut("/*for..in*/for(const [prototype, __proto__] = (<x/>.__lookupSetter__(\"__proto__\").@foo) in __count__ = prop) {}");
tryItOut("L: break ;");
tryItOut("/*infloop*/for(let [] = __iterator__ = __parent__; /*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in *::*) return null; __count__) L:while((yield <><x><y/></x></> <<  /x/g ) && 0)var prototype = <><x><y/></x></>, prototype");
tryItOut("/*infloop*/M:for(let constructor; (@foo).__defineSetter__(\"__parent__\", function (({ prototype: __proto__, prototype: __iterator__ }), <x><y/></x> = __count__)prop = \n<y><z/></y>); __iterator__ ? <y><z/></y> : 0x99) throw #1=[#1#];");
tryItOut("#2=[window] = prop;");
tryItOut("if(<x><y/></x>) yield;");
tryItOut("L:switch(({__parent__: .2, constructor getter: [1,2,3,4].map })) { default: break; break; ;break; case __parent__: /*for..in*/L:for(constructor in ((function  __proto__ (__parent__) { yield <y><z/></y> } )(1e4))){break M; }(*::*);case 9:  }");
tryItOut("{} const __count__;");
tryItOut("M:while(('fafafa'.replace(/a/g, Math.pow)) && 0)break ;");
tryItOut("/*infloop*/M:for(let __iterator__; ({__count__ setter: ('haha'.split).apply }).__lookupGetter__(\"prop\")\n; #1=[[1]]['prototype']%=__proto__) L:if(null) {continue ;switch(__iterator__ = *::*) { default: break;  } } else  if (<x><y/></x>.__defineGetter__(\"__proto__\", (function(q) { return q; }).call)) {return  \"\" ; }");
tryItOut("if(__iterator__ =  \"\" ) break L; else  if (<x/> &= 1.3) export delete; else const __proto__ = #3={a:#3#};");
tryItOut("{; }");
tryItOut("yield (<><x><y/></x></>).watch;");
tryItOut("var prop;");
tryItOut("throw prototype;");
tryItOut("/*for..in*/for(var prototype in ((({__proto__: <><x><y/></x></>.unwatch(\"__count__\"), __iterator__: #1=[<y><z/></y>] }) ^=  /* Comment */<x/> >>= (<y><z/></y>\n & <y><z/></y> .@x:: false))(((prop).apply)))){[1,2,3,4].slicewhile(((@foo)[ /x/ ]) && 0){export *; } }");
tryItOut("if(this) { if (<x><y/></x>) ( '' \t);} else var prototype = [,]\n/*infloop*/for(const __noSuchMethod__; ({__parent__: <x><y/></x>}); ([@foo++])) return <x/>;");
tryItOut("/*for..in*/M:for(var __count__ = (new (Math.sin)(((@foo)[null]),  /x/g )).__defineSetter__() in  /* Comment */yield (*::*)(this, null)) return undefined;\n__proto__, __iterator__ = 1.2e3;\n");
tryItOut("L:if(<x><y/></x>) {this; } else  if (<><x><y/></x></>) export *; else {throw ;var x::__proto__; }");
tryItOut("with({}) for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("do {/*infloop*/for(const ({ __iterator__: ({ __parent__: ({ __count__: __iterator__, prototype: ({ constructor: __parent__, __proto__: __count__ }) =  \"\"  }) }) }) = ( /x/g  * * === 'fafafa'.replace(/a/g, <y><z/></y>)); (new ( '' )().throw(\n /x/  :: <x/>++)); (constructor.__noSuchMethod__ = ([[<><x><y/></x></>]])).__count__) {} } while(((({prototype:  '' , constructor: <><x><y/></x></> })) *= +(false.@*)) && 0);");
tryItOut("{(<x><y/></x>); }");
tryItOut("");
tryItOut("with({prototype: (new (/a/gi)())(__iterator__-=(p={}, (p.z = <><x><y/></x></>)()), (__noSuchMethod__ = this))})/*infloop*/for(var [__noSuchMethod__, , __parent__, ] = __proto__ = [,,]; window--; (__count__ ? *::* :  /x/g )) {var prototype, constructor = prop;const return __iterator__;; }");
tryItOut("{5.0000000000000000000000;export *; }");
tryItOut("/*infloop*/for(__parent__ = null %= window; (({}) <= __noSuchMethod__ for ((__proto__)(<><x><y/></x></>)\r in  /x/ ) for (__noSuchMethod__ in window)).isPrototypeOf([15,16,17,18].sort(({}).hasOwnProperty, [,])); ( /* Comment */@foo)) {if(*::*) { if ((prototype = <><x><y/></x></>.propertyIsEnumerable(\"__parent__\"))) var prop = <><x><y/></x></>; else  \"\" ;} }");
tryItOut("let(prop = <y><z/></y>[this], constructor =  /x/ ) ((function(){yield prop.watch(\"__proto__\", Math.pow);})());");
tryItOut("M:with({__iterator__: \f{return;{gc() } }}){export __noSuchMethod__;({}).__lookupGetter__ }\n");
tryItOut("{yield  /x/g ;export *; }");
tryItOut("L:if(<><><ccc:ddd>yyy</ccc:ddd></></>) {function  __iterator__ (__count__) { yield <y><z/></y> } (<><x><y/></x></>); }");
tryItOut("/*infloop*/for(({ __proto__: [, , , ] }) = constructor; (__parent__ = [15,16,17,18].sort([1,2,3,4].slice, [,,])); ({prototype: (__proto__ = [[]]), __parent__: (prototype.__count__ setter= ((new Function(\"/a/gi\"))).apply) })) {throw <><x><y/></x></>\n{throw prototype;__noSuchMethod__; } }");
tryItOut("return;");
tryItOut("gc()\n");
tryItOut("return 'fafafa'.replace(/a/g, function (__parent__, __iterator__)__parent__);");
tryItOut("with({}) return;");
tryItOut("if((eval(\";\", (__noSuchMethod__ = prop.@*)))) { if ((eval(\"*\", [,,]))) yield <x><y/></x>; else {([1,2,3,4].slice).applyL: {export *;{} } }}");
tryItOut("/*infloop*/for(let prototype = __parent__.__noSuchMethod__ getter= <y><z/></y>.yoyo((<x/>)[<x/>]); (eval(\"this\", \t<x><y/></x>))(function::prototype.@foo); (yield false)) yield true;");
tryItOut("if(prop() >= (null.__lookupGetter__(\"__count__\")++)) { if (false) {(@foo); } else return;}");
tryItOut("do {__count__, __count__; } while((_ .. this.zzz.zzz) && 0);");
tryItOut("return true\n");
tryItOut("if(window[ \"\" ]) {{}__parent__; }");
tryItOut("while((new eval(\"this\", __count__)()) && 0){return; const __noSuchMethod__;/*infloop*/for(var prop; <x><y/></x>; prop) {export prop;export __noSuchMethod__; } }");
tryItOut("/*for..in*/for(const __proto__ in ({__count__: * })) {export constructor;(*::*); }");
tryItOut("{{}(true); }");
tryItOut("/*for..in*/\ffor((<y><z/></y>)(@foo) in (((({}).hasOwnProperty).apply)(new __parent__(*::*, <x><y/></x>)))){}");
tryItOut("/*infloop*/while(('fafafa'.replace(/a/g, function  __proto__ ()<x><y/></x> >>>=<x><y/></x>) === (uneval(<><x><y/></x></>))(<><x><y/></x></> ? * : *::*, this).propertyIsEnumerable(\"__proto__\"))){if(-1) { if (typeof (__count__|=-3/0)) function (constructor, __proto__) { let __noSuchMethod__ = prop, __proto__ = this; }  else __count__}/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__([,]) in  ''  & <><x><y/></x></>) {export *; } }");
tryItOut("/*for..in*/L:for(let \rprototype in  '' ) {let __noSuchMethod__, __iterator__;prop =  /x/ ; }");
tryItOut("/*infloop*/do let __parent__, __proto__;\t while(true);");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let prototype in <><x><y/></x></>) {}let __noSuchMethod__ = [,,];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in (constructor.__noSuchMethod__)) ;");
tryItOut("if(yield <y><z/></y> in ([3.141592653589793])) { if (constructor.unwatch(\"__iterator__\")) {/a/giyield null; }} else let __noSuchMethod__ = <x><y/></x>;");
tryItOut("with({__iterator__: @foo.__defineGetter__(\"__proto__\", function  prop (prototype) { yield window } ) .@x:: (arguments)(__noSuchMethod__)}){; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("with({}) throw StopIteration;");
tryItOut("this.zzz.zzz;");
tryItOut(";");
tryItOut("with(<><{__proto__}></{__proto__}></>){yield window;L: gc() }");
tryItOut("/*for..in*/for(const prop in (window.__defineSetter__(\"prop\"\n, (constructor).__defineSetter__))) const __noSuchMethod__ = *, __proto__;");
