tryItOut("yield [(new Object(<x><y/></x>, <x><y/></x>))].sort(function  prototype (<ccc:ddd>yyy</ccc:ddd>)*);");
tryItOut("__parent__");
tryItOut("/*infloop*/do {} while(5.0000000000000000000000);");
tryItOut("return  /x/g ; const __iterator__;");
tryItOut("do {yield (#1=[#1#] < __iterator__)\n; } while((__count__ = <x><y/></x>) && 0);");
tryItOut("window.hasOwnProperty(\"prop\")\nreturn (prop\t);");
tryItOut("yield  /x/g ;");
tryItOut("if(__proto__%=<x/> ? * : 0) function(y) { yield y; return window;; yield y; } else {/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in prototype) {yield <x/>; } }");
tryItOut("if(1e4) export __parent__; else {export \t*; }");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in <x/>) {}\nlet(__proto__, __count__) ((function(){export *;})());\n }");
tryItOut("with({}) throw StopIteration;");
tryItOut("let __parent__, __count__ =  /x/ ;");
tryItOut("return window;");
tryItOut(" const constructor;");
tryItOut("L:if([z1].__lookupGetter__(\"constructor\")) {return __iterator__;prop = window, prototype; }");
tryItOut("M:if(({a1:1}) && <x><y/></x>) {/*for..in*/L:for(let [constructor, __parent__] = ([15,16,17,18].some(/a/gi, __proto__.isPrototypeOf(*::*))) in (<x/>)[null]) {{gc()prototype = <><x><y/></x></>; } }L:with()return <x/>; }");
tryItOut("let (__count__) { export *; }");
tryItOut("/*infloop*/for(prototype.<>yyy</>; [(((<y><z/></y>.prototype))(\n__parent__, this))].sort(gc); __noSuchMethod__.prop setter= (__noSuchMethod__ = (({ get __proto__ __proto__ () { return  /x/g  } ,  get __proto__() { yield window }  }))).__defineSetter__) /*infloop*/for(__noSuchMethod__; <x><y/></x>; <x/>) {{} }");
tryItOut("if(__parent__) export *;");
tryItOut("if(-0) {Function } else  if (@foo) {'haha'.split__noSuchMethod__ } else yield <x><y/></x>;");
tryItOut("(<x><y/></x> ? window : <x/>)\n(@foo);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop.__noSuchMethod__ in *::*.isPrototypeOf( '' )) gc()\nif((p={}, (p.z =  /x/g )())) {} const __iterator__;");
tryItOut("do if(<x><y/></x>.(<><x><y/></x></>)) { if ((yield constructor)) <><x><y/></x></>; else {<y><z/></y>; }}/*for..in*/for(let __noSuchMethod__ = <><x><y\f/></x></> in  '' ) ; while((__count__.__noSuchMethod__ setter= this.zzz.zzz) && 0);");
tryItOut("/*for..in*/for(let __parent__ = this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map) << this.__defineSetter__(\"prototype\", [1,2,3,4].slice) ? *::* + #1=[#1#] : <x><y/></x> >= window in (({__noSuchMethod__: 1.2e3}))) {gc()continue ; }");
tryItOut("(this)");
tryItOut("if(*.@foo) {var prototype = <><x><y/></x></>, prototype = 1e81\n } else { const __iterator__\nL: L:if(constructor) {this;return; } }");
tryItOut("{if(__noSuchMethod__ = prototype) { if (this) {( \"\" ); } else throw this;} }");
tryItOut("L:if(undefined *= 0.1 += (function  __proto__ ()false).call\t(<x><y/></x>, <x/>, __iterator__)) {return;yield undefined; }\t else  if (( ''  > 1e4)) const __count__ = <><x><y/></x></>;");
tryItOut("while(((__count__ = this)) && 0)/*for..in*/for(let prototype in (([1,2,3,4].slice)(this))){__noSuchMethod__;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__proto__(3/0 -= this) in ((prop = ({})).throw(@foo))) {L:if(({ get __noSuchMethod__ __proto__ (__count__, constructor) { yield __proto__ = *::* } , prop setter: [1,2,3,4].slice })) {; } else  if (\n*::*) __proto__(window); }");
tryItOut("{try { 1.3; } finally { ; } continue ; }");
tryItOut("/*infloop*/for(const prop; <x><y/></x> ? <><x><y/></x></> : <x><y/></x>; __parent__.__parent__ getter= ({}).__lookupGetter__) {} const __noSuchMethod__\n");
tryItOut("/*infloop*/M:for((1.2e3.hasOwnProperty(\"function::delete\")) >>>=(this.zzz.zzz); __iterator__.valueOf(\"number\"); (<y><z/></y>.eval( /x/  *=  /x/ ))((({ __count__: ({ : prop, __noSuchMethod__: constructor }), __parent__: constructor }) = (({ __iterator__: __count__ }) = ([11,12,13,14].some))), *::* -= *)) {yield;/*infloop*/while(-<x><y/></x> <= ({ set prop __parent__ (__parent__, __count__) ''  })){(/a/gi).applybreak L; } }");
tryItOut("L:if((this.__defineGetter__(\"__count__\", [15,16,17,18].sort((new Function(\"\")),  /x/g  >>  \"\" )))) { if (*::*) throw (0.1[*]);} else {/*infloop*/for(const prototype = (window.yoyo(<x><y/></x>)); new (Math.sin)(prop = <y><z/></y>, __count__ = <><x><y/></x></>, @foo); __iterator__.__proto__) {Math.pow; }break ; }");
tryItOut("/*for..in*/for(const [__count__, constructor] = let (prototype) (__noSuchMethod__ = prop) in  /* Comment */<><x><y/></x></>) {;throw -1; }");
tryItOut("if((this.__defineGetter__(\"prototype\", #1#))) [[1]]");
tryItOut("M:if((new (Math.sin)())) { if ( /x/  .. __iterator__ !== <x/> || *) export __iterator__; else {return; }}");
tryItOut("/*for..in*/for(let prop in <></>.(this[<y><z/></y>])) __iterator__ = __count__");
tryItOut("if((typeof -1 if (<y><z/></y>))) throw __parent__;");
tryItOut("L:if((__iterator__(\tconstructor = window))) {yield <><x><y/></x></>;throw  '' ; } else /*for..in*/for(let prop in (((new Function(\"yield;\")))(__noSuchMethod__ = <x/>))){export *;\n(__iterator__);\n }");
tryItOut("continue \nreturn;");
tryItOut("/*infloop*/for(--(undefined.__noSuchMethod__)((function ([y]) { }()),  /x/ ); ({ __iterator__: [], constructor: __count__ }) = ((new Function)(([15,16,17,18].map(eval, eval(@foo))), Iterator(0x99, true))); (uneval(<y><z/></y> < <x><y/></x>))) yield;\n/*infloop*/for(prototype = <><x><y/></x></>.__proto__ = <><x><y/></x></> && [1,,]; (__count__.prop); (\narguments.yoyo( /x/g ))) export __proto__;\n");
tryItOut("/*infloop*/while((Function).call){return; }");
tryItOut("if(this) {/*infloop*/while(((yield  /x/ )).hasOwnProperty(\"__count__\"))return true; }");
tryItOut("[];");
tryItOut("/*infloop*/M:for(let __iterator__; (eval(\"3.141592653589793\", 1e+81)); <x/> % [,]) ");
tryItOut("let(prop) ((function(){let __parent__ = *::*, __noSuchMethod__;})());");
tryItOut("if(Math.sin(<><x><y/></x></>.__defineSetter__(\"__proto__\", ({}).hasOwnProperty))) { if \f(function ([y]) { }) {throw #3={a:#3#};const __noSuchMethod__; } else /*infloop*/for(const constructor; __iterator__ = [1,,]; <x><y/></x> | <x/>) {const prop;prop; }\nwith(function(id) { return id })export *;}");
tryItOut("");
tryItOut("/*for..in*/for(let constructor in ((this)(prop+=*::*)))break M;");
tryItOut("L:switch(eval(\"3\", <x><y/></x>).*) { case + '' : with(+(0/0.@foo(__count__ = <x><y/></x>, @foo))){throw this; }break; *::*break; case *::* || ({}): default: case 2: /*infloop*/while(<><x><y/><///h\nx></>){; } }");
tryItOut("/*infloop*/for(null; \f<><x><y/></x></>; window) {__parent__; }");
tryItOut("M:if((Math.sin)(yield this :: (-1), <x><y/></x>)) {break L; } else {if(*(prop, (-1))) {const constructor = null, prototype = <><x><y/></x></>;__iterator__, __parent__; } else  if (new Error()\n) {gc()(/a/gi); } }");
tryItOut("yield\n");
tryItOut("(window)\n/*for..in*/L:for(const prototype in 5.0000000000000000000000) {}\nlet (({ __parent__: [], __proto__: __proto__ })) { /*infloop*/while(<><x><y/></x></>){const , __proto__;(<x/>); } }");
tryItOut("/*infloop*/for(const [, , ] = (this.__defineSetter__(\"__proto__\", function () { return null } )) <  \"\" .valueOf(\"number\"); __count__ >= function ([y]) { } !== 4.; new (((1 for (x in []))).apply)(0/0.watch(\"__proto__\", function (prop, constructor) { yield __proto__ } ), this)) var prototype;");
tryItOut("/*infloop*/M:for(let [, ({ (({ prop: __iterator__, __noSuchMethod__: constructor }) = (#0=[[,,z1]])): [], __proto__: [[__count__], ({ prop: ({ __iterator__: ({ prototype: prototype }), __proto__: [prototype, __iterator__] }) }), ] }), [, ({ __noSuchMethod__: [[], , ], prototype: prototype }), ({ __proto__: ({ <x><y/></x> : ({ prototype: [, , , prop, prop], __parent__: constructor }), __parent__: ({ constructor: __count__, __iterator__: [, , , , ] }) }), __count__: [, , ({ prop: ({ __proto__: __count__ }), __noSuchMethod__: __noSuchMethod__ })] })], ({ prop: __parent__, __iterator__: ({ case (-1): default: break; case window: break;  .@*:: <y><z/></y>['constructor']: function(id) { return id } }) }), __count__] = ({ get __proto__(__count__)this.__defineGetter__(\"__noSuchMethod__\", (new Function(\"gc\"))) });  '' ; constructor = function::prototype.__lookupSetter__(\"__proto__\").constructor) @foo;");
tryItOut("/*infloop*/for(var constructor = [15,16,17,18].filter/*\n*/((1 for (x in [])), ({a1:1}).__lookupSetter__(\"prototype\")); eval(\"if([[1]]) {return <><x><y/></x></>; }\", <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")); undefined(__count__, (new Function(\"function(id) { return id };\"))().valueOf(\"number\"))) {return (yield <x><y/></x>);continue ;M:switch(new (<x/>)(, 0/0)) { default: L: ;break; case 5: 0x99;throw __iterator__;break;  } }");
tryItOut("L: /*infloop*/M:while(@foo){continue ;var __parent__ = [z1], prop\n(function(id) { return id }); }");
tryItOut("if(.2) {(({a1:1})); /x/ ; } else  if (@foo) prototype; else ( \"\" );");
tryItOut("/*for..in*/L:for(__iterator__ = let (default: ) <y><z/></y> in (__parent__ = [#0=[ /x/ ]])) break ;");
tryItOut("if((new window.hasOwnProperty(\"__noSuchMethod__\")(<x><y/></x>.isPrototypeOf(<><x><y/></x></>)))) { if (<> </>) {*::*;M:if(<x><y/></x>[undefined]) {} }} else /*for..in*/for(const [__noSuchMethod__, __proto__] = *::* in this) continue M\n");
tryItOut("/*infloop*/do prop; while(__count__ ? __iterator__ : this.watch(\"__proto__\", 'haha'.split));");
tryItOut("throw window\nfor(let y in [5,6,7,8]) yield;");
tryItOut("if((window ? eval(\"yield <y><z/></y>;\", 0/0) : new <y><z/></y>() ? ([,,].* = new Iterator(<><x><y/></x></>)) : --false)) { if ((let (__parent__ = @foo >>= *::*, ({ prop: __iterator__, __proto__: prop }) = !null) ('fafafa'.replace(/a/g, ({a1:1}))))) L:if(<><x><y/></x></>) {{}__proto__ } else  if (-1) [1,2,3,4].slice else return arguments;}");
tryItOut("/*for..in*/for(let constructor in ((({}).__lookupGetter__)((({__proto__: new <><x><y/></x></>()})))))if([15,16,17,18].map((({a1:1})).apply, <><x><y/></x></>)) { if ((prototype = __count__|=<><x><y/></x></>.*)) yield\n else return;}");
tryItOut("let(({ __iterator__: ({ __proto__: __noSuchMethod__ }), prop: ({ __parent__: __noSuchMethod__ }) })) ((function(){{/*infloop*/for(let [] = return  /x/ ; ({constructor: (*::* == <><x><y/></x></>), prototype: ( /x/ .valueOf(\"number\")) }); (uneval(<y><z/></y>)) || <x><y/></x>) L:do function (__count__) { gc() }  while((<\f><x><y/></x></>) && 0); }})());");
tryItOut("if([undefined].map(function (prop, __count__) { yield <x><y/></x>; } )) { if ([<x/>]) {break ; }} else export __iterator__;");
tryItOut("while(((<bbb xmlns:ccc=\"1e81\"><ccc:eee></ccc:eee></bbb>.((delete window))) << new Iterator(this)) && 0)/*infloop*/for(<x><y/></x>; 'fafafa'.replace(/a/g, [z1,,]); <x/>) ");
tryItOut("/*for..in*/M:for(__count__ = [ '' ] in (yield *::* != <><x><y/></x></>)) /*for..in*/for(const prop in ((gc)(this))){<><x><y/></x></>; '' ; }");
tryItOut("/*for..in*/L:for(var [__noSuchMethod__, prop] = (<><x><y/></x></>.unwatch(\"constructor\")).__defineGetter__(\"__proto__\", Math.pow) in 033) ");
tryItOut("with({prototype: (function ([y]) { })()})yield;");
tryItOut("/*infloop*/for(let ({ constructor: [({ __noSuchMethod__: prototype }), , __iterator__] }) = ([11,12,13,14].some) :: prop|=new (eval)(@foo).__lookupSetter__(\"prototype\"); new (1e+81.watch(\"__parent__\", function(q) { return q; }))(); \f({__parent__: typeof #1=({__parent__: ((this)[__parent__] .. 'fafafa'.replace(/a/g, function () { return prototype } ))}), prototype: yield ({__noSuchMethod__: <><x><y/></x></> }) })) ");
tryItOut("L:switch( \"\" ) { case 3: (3/0);break;  }");
tryItOut("with({}) { let(__proto__) ((function(){;})()); } ");
tryItOut("const __count__, prop = <x><y/></x>\n");
tryItOut("let (constructor, __iterator__ =  /x/g [<x><y/></x>]) { return\n/*for..in*/for(let prop in ((Math.sin)(prop.prop = undefined))) }\n\n");
tryItOut("if(new ({<x/>: \t<x><y/></x> })()) export *; else  if (+/a/gi()(__proto__,  else  try { return; } catch(__noSuchMethod__) { (<><x><y/></x></>); }  ) {let prop, __iterator__;return\n } else {/*infloop*/M:for(let setter; undefined; *.__proto__) {{} }(*::*); }");
tryItOut("L:if(<><x><y/></x></>) yield; else var __noSuchMethod__ = <x><y/></x>");
tryItOut("switch( /x/g .__defineSetter__(\"__iterator__\", ({}).hasOwnProperty)) { default: if(prop = prototype) {let __parent__; } else (<x><y/></x>);break; break; case new (<><xxx {__count__}={.2} /></>)(): break; {export *; }case 2: M:with({__parent__: #1#}){break L; }break;  }");
tryItOut("with({prototype: <x/> %  '' }){if([,,z1][false].propertyIsEnumerable(\"prop\")) {break ;return <y><z/></y>; } else  if (<x/>) with( /x/g ){ } }");
tryItOut("L:while((return) && 0){/*for..in*//* nogeckoex bug 349964 */(__noSuchMethod__); }");
tryItOut("{; \"\"  }");
tryItOut("return;");
tryItOut("/*infloop*/for([true]; ( /x/  + @foo); (__parent__ for each (prototype in @foo))) {( /x/g ) }");
tryItOut("/*for..in*/L:for(let __count__ in this) {gc() }");
tryItOut("/*infloop*/L:for(__iterator__; <x/>; new (new (this).watch(<><x><y/></x></>, this))) prototype = undefined;");
tryItOut("if(this) {(@foo); } else {gc()return; }");
tryItOut("if([<x><y/></x>.watch(\"__count__\", <x/>)]) <>([undefined])</> else /*infloop*/L:for(var __noSuchMethod__; function(id) { return id }; 1e+81) {;let __noSuchMethod__ = 3, __proto__ = prototype; }");
tryItOut("const __count__ = 1e4, __count__\n\nexport *;\n");
tryItOut("/*infloop*/do yield; while((new (-__iterator__ = 3)( \"\" .throw([1,,][true]),  /* Comment */#1# :: __iterator__ = __noSuchMethod__)));");
tryItOut("with({constructor: *}){switch(<x><y/></x>) { default: (window);break; break; case 0: {}case 3: var __parent__ = <x><y/></x>, prop;yield <x/>;break; return null; }/*for..in*/for(let __noSuchMethod__ in <x/>) {let (prototype = <x/>, __parent__ =  /x/g ) { (<x><y/></x>); } } }");
tryItOut("let (prototype = new constructor( /x/g )(), constructor = __noSuchMethod__.throw(__iterator__)) { {} }");
tryItOut("__count__ = __count__;");
tryItOut("/*infloop*/while(( \"\" )(true))while((Date(undefined, *)) && 0)\texport __parent__;");
tryItOut("M:if((({ __proto__: __proto__, prop: prototype }) = (<><><x><y/></x></>;</>.__lookupSetter__(\"__noSuchMethod__\"))) < (new Function(\"continue ;\"))((__count__ = @foo), *::*)) {return; } else /*infloop*/for(prop; this; window %= __parent__) { with  }");
tryItOut("if((#0=({__noSuchMethod__: @foo}))) __iterator__, __iterator__ else gc()");
tryItOut("if( \"\" .__count__) { if (([z1,,]++)) yield this;} else {constructor = ({a1:1}), prop; }");
tryItOut("/*infloop*/while(this){let __noSuchMethod__; }");
tryItOut("if(( /x/ ).__defineGetter__(\"__iterator__\", /a/gi)) {(([11,12,13,14].map)); }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/M:for(var [__parent__, prototype] = arguments in  /x/g ) ;");
tryItOut("/*for..in*/for(let [__count__, prototype] = null in null) {yield; }");
tryItOut("/*infloop*/M:for(let ({ __proto__: [__count__, constructor, new Function, __count__] }) = (<><x><y/></x></>.isPrototypeOf(\n(-1))); (prototype.(<><x><y/></x></>)); (prototype if (<x><y/></x>)).__lookupGetter__(\"__proto__\")) var __proto__ = <x><y/></x>, prop;");
tryItOut("with({}) export __iterator__;");
tryItOut("/*infloop*/M:for(@foo; <x><y/></x>; [z1,,]) const function::prototype = 033;");
tryItOut("if((<x><y/></x> | [,,z1])) { if (<><x><y/></x></> & function(id) { return id }) [1,2,3,4].map} else ( { yield <x><y/></x> } );L:if(yield ((yield false))) {export *; } else  if (1.3) /*for..in*/for(prop = ({a2:z2}) in undefined) ; else {(0x99);<y><z/></y>; }");
tryItOut("with({__proto__: <x><y/></x>.(<><x><y/></x></>)})L: {gc()return  /x/g ; }");
tryItOut(" const __iterator__;");
tryItOut("/*for..in*/for(__noSuchMethod__ = (true = __parent__ for each (prototype in this)) in (<><x><y/></x></>.isPrototypeOf(false))) {gc() for (constructor in !) }");
tryItOut("if(this) {gc() }");
tryItOut("if(<zzz>__iterator__</zzz>) let __iterator__ = undefined, __iterator__;");
tryItOut("with((-1)\n - __iterator__.prop = *::*){constructor, __parent__ = this; }");
tryItOut("do {L: {(<y><z/></y>); '' ; }/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in undefined) {export __proto__; } } while((this.__defineGetter__(\"constructor\", [1,2,3,4].map)) && 0);");
tryItOut("/*for..in*/for(const prop.prop in (constructor.__iterator__ = #1# >= <x><y/></x>) % new [z1,,](__parent__)) {if(window ? true : prototype) { if ((return)) <y><z/></y>; else {{}return true; }}\twith({__proto__: * *= <x><y/></x>}) }");
tryItOut("try { for(let y in [5,6,7,8]) try { throw StopIteration; } catch(__proto__ if (function(){export *;})()) { do {__proto__;eval } while((<x><y/></x>) && 0); } catch(prop) { throw StopIteration; } finally { let([, , prop, , __iterator__], __iterator__) { __proto__ = constructor; }  } finally { return; } ");
tryItOut("let(x::__count__, __parent__) ((function(){gc()})());");
tryItOut("constructor = prototype;");
tryItOut("if([, (__parent__ = *::*.eval(*::* * window))['__iterator__'], , ({ __noSuchMethod__: ({ __proto__: prop }), __iterator__: prop }), ({ let: [, , ] })] = __proto__) if((<x><y/></x>.yoyo( '' ).@*)) { if (__parent__) {gc() }} else /*infloop*/L:do { } while(eval(\"<><x><y/></x></>\",  /x/ ));");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; /a/gi = constructor; window) {yield;export *; }");
tryItOut("with({prototype: this.zzz.zzz}){switch((new Math.sin(__noSuchMethod__, .2))) { default: break;  } }");
tryItOut("if(({ __proto__: function::__noSuchMethod__ }) = (__proto__ =  /x/g ).__lookupSetter__(\"function::constructor\")) { if (new (.2 !== <><x><y/*\n*//></x></>)( /x/g , 1e81)) /*for..in*/for(__count__ = * << this in <x><y/></x>) continue L; else {(<y><z/></y>);const prototype =  /x/ ; }}");
tryItOut("/*infloop*/L:for(var prop; ([undefined].filter(([[1]]).watch).__lookupSetter__(\"__count__\")); <y><z/></y>) const prop = @foo.hasOwnProperty(\"prototype\");");
tryItOut("L:if(this) return <x><y/></x>;\t else {; }");
tryItOut("/*for..in*/L:for([function::prototype, __count__] = (delete prototype) in true) return;");
tryItOut("/*infloop*/for(let prop = *; function(id) { return id }; <x><y/></x>) {continue ; }");
tryItOut("L:if((<x><y/></x>)[1e+81]) gc() else return ( \"\" )(5.0000000000000000000000, this);");
tryItOut("if((<x><y/></x>(constructor, window))) /*for..in*/for(var __iterator__ in ((null)(<x><y/></x>))){const __parent__; } else { }");
tryItOut("return\nreturn <y><z/></y>;\nwith(arguments)<><x><y/></x></>;\n");
tryItOut("/*for..in*/L:for(var prototype = constructor in __count__) {return; }");
tryItOut("L: /*for..in*/for(var prototype = (((yield <x><y/></x>) <= <y><z/></y>.isPrototypeOf({})).propertyIsEnumerable(\"function::prop\")) in (<x><y/></x>)) var constructor, __parent__ =  '' ;");
tryItOut("/*infloop*/while(.2(*::*)){var __noSuchMethod__ = 0/0, prop; }");
tryItOut("/*infloop*/do {prototype = ({}), constructor = (-1);export *; } while(this.__defineGetter__(\"prop\", function  __parent__ () { yield undefined } ));");
tryItOut("/*for..in*/for(let __proto__ in (([1,2,3,4].slice)([ /* Comment */@foo].sort(((3/0).__defineSetter__))++)))L: {yield;export *; }");
tryItOut("throw [z1,,];switch(0x99.__defineSetter__(\"constructor\", ({}).__lookupGetter__).watch(\"__iterator__\", function(y) { yield y; return this;; yield y; })) { default: export prototype;break; /*infloop*/for([*::* for (__parent__ in ({a1:1}))]; (__noSuchMethod__.__count__); (new <y><z/></y>)) var __proto__ = [1], __parent__\f; }");
tryItOut("M:with({prop:  /x/g })M:with(eval(\"return;\", new (null)(*::*, [1])))/*for..in*/for(const prototype in (((new Function(\"{}\")))([1])))var prop;");
tryItOut("let ([({ __parent__: prop }), ({ prototype: __parent__, __count__: prop }), ] = __parent__ = <x><y/></x>) { const __parent__ = this; }");
tryItOut("with({}) { with({}) for(let y in []); } ");
tryItOut("/*infloop*/while((function ([y]) { })()){throw [<x/> for each (__proto__ in (-1))];yield; }");
tryItOut("switch(({__parent__: __count__ = ({ constructor: ({ constructor: prototype }) }), __count__: return; })) { default: <xxx {constructor}={prototype} />break; function (prototype) { return  /x/  } case <y><z/></y>.eval([,,]).__proto__ = 5.0000000000000000000000: break;  }");
tryItOut("/*for..in*/for(var (__parent__) in ((gc)(((uneval(<x/>)))))){let __noSuchMethod__, __proto__; }");
tryItOut("/*infloop*/for(let __parent__ = [\f'fafafa'.replace(/a/g, function () { (3/0); } )]; <x><y/></x>.isPrototypeOf(new (({a1:1}))(<><x><y/></x></>)); this.__defineGetter__(\"__noSuchMethod__\", #1#)) const __noSuchMethod__ = *;");
tryItOut("let ([({ constructor: prop, __count__: [] })]) { {} }");
tryItOut("with({__count__: })");
tryItOut("M:with({__parent__: 3.141592653589793 -= <><x><y/></x></>})export *;");
tryItOut("default: if(true) {export *; } else  if (1e+81) export __iterator__;//h\nbreak; case  /* Comment */([1,,] if (prototype)): case prototype: break; case *::*\n: ;break; case : return <x><y/></x>;if(window) { if ([z1,,]) (<x><y/></x>); else }break; function ()windowbreak; with({prop: false});");
tryItOut("Function\n\rif(true) {export *; } else gc()\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <><x><y/></x></>) {export __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__.__parent__ in ({a2:z2})) {var function::__iterator__ = -0; }");
tryItOut("/*infloop*/do {; } while(try { return; } finally { for(let y in []); } );");
tryItOut("if(0x99.__lookupGetter__(\"__count__\")) {export __parent__; } else  if (function(id) { return id }((p={}, (p.z = <><x><y/></x></>)()), constructor)) break M; else {L:if(false.yoyo(<x><y/></x>)) throw *; else  if (([11,12,13,14].filter)) yield __count__; }");
tryItOut("M:switch(<y><z/></y>) { default: false;break;  }");
tryItOut("switch((prototype.prototype = prop = 0/0)) { default: break; case <x><y/></x>.( /x/ ): yield;break; break L;break;  }");
tryItOut("try { gc() } finally { let prototype; } ");
tryItOut("/*for..in*/for(__iterator__ =  /x/g  || <x/> /= <y><z/></y> < <><x><y/></x></> in window) {export constructor;break M; }");
tryItOut("return __proto__ = 1e-81 .@x:: <x><y/></x>;");
tryItOut("/*infloop*/while(prototype.__iterator__ = (constructor = @foo)){export __parent__;return; }");
tryItOut("/*infloop*/for(const prototype, ({ prototype: ({ __proto__: constructor, __noSuchMethod__: ({ prototype: [__count__], constructor: ({ prop: __noSuchMethod__, __count__: prop }) }) }) }) = throw *; !== true &= @foo.__lookupGetter__(\"__proto__\"); this.__defineGetter__(\"__noSuchMethod__\", function(y) { yield y; continue L;; yield y; })[({})]; (eval(\" \\\"\\\"  += <x><y/></x> in (__iterator__ =  '' --)\", ([z1,,] == 5.0000000000000000000000(<y><z/></y>))))) { }");
tryItOut("if(__count__ = __iterator__.isPrototypeOf(1e81.__defineGetter__(\"prop\", [1,2,3,4].map) >>> ( /x/  .@x:: null))) { if (Math.sin) (*::*);} else {/*infloop*/for(__noSuchMethod__ = -3/0; constructor; <x><y/></x>) {let export __proto__; = __count__, __count__; }export *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in -0) {__parent__; }");
tryItOut("with(<x><y/></x>.unwatch(\"__iterator__\") ? (function (prototype) { return <y><z/></y> } ).call( '' , *, -0) : [,] = <><x><y/></x></>//h\n)return;");
tryItOut("/*infloop*/for(const prototype = [undefined().*\n if (<y><z/></y>.__lookupSetter__(\"constructor\").yoyo([,,z1] <<= *::*))]; --(((1 for (x in []))).call\f(this, )); (3.141592653589793.eval( /* Comment */3/0))) (constructor).watch");
tryItOut("/*infloop*/for(let __noSuchMethod__; new /a/gi(__iterator__); null) /a/gi\nreturn;\n");
tryItOut("L:with(this.__defineSetter__(\"new <y><z/></y>(false, null)\", (new Function(\"var __iterator__, prop = <x><y/></x>;\"))))if(__proto__ = prototype) throw -3/0; else  if ([({a1:1})].filter(({}).__lookupGetter__)) ");
tryItOut("{const constructor, prototype; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((#0=*) ? ([15,16,17,18].filter(Math.pow, )) : (\n@foo) in  /* Comment */(0.1.throw(<x><y/></x>))) {{break ;export prop; }export *; }");
tryItOut("if((yield function ([y]) { })) { if ((constructor.__parent__ setter= (new Function(\"/*infloop*/for(__parent__; __proto__ ? <><x><y/></x></>\\f : 0; *::* >>= \\f<><x><y/></x></>) {yield prototype;yield; }\")))) {gc()(1.2e3); } else {const __noSuchMethod__ = <y><z/></y>, constructor; }}");
tryItOut("let((__noSuchMethod__ = (eval(\"export __proto__;\", [,,z1])))(let (-)  /x/ )) ((function(){return 'fafafa'.replace(/a/g, function(y) { yield y; if(@foo) {{} }; yield y; });})());");
tryItOut("/*infloop*/do throw this; while(((function ([y]) { })().__proto__ = <y><z/></y>\n));");
tryItOut("yield 'fafafa'.replace(/a/g, function (__iterator__, __proto__) { let __count__ = <x><y/></x>; } );");
tryItOut("{}\nexport *;\t");
tryItOut("/*for..in*/L:for([__iterator__, __proto__] = prototype = __noSuchMethod__ = (yield  /x/ ) if (__proto__) in (new Object())) case 4: {if(<x><y/></x>.unwatch(\"__count__\")) {let __proto__;__count__ = #1#; } else {([1,2,3,4].slice).applylet __parent__ = undefined, prototype = prop; }if(<><x><y/></x></>) { if ((new Function(\"export __iterator__;\"))) export __noSuchMethod__;} else {break L;export *; } }break; break; break; default: ");
tryItOut("/*for..in*/for(const prop.each in null) {throw  /x/ ; }");
tryItOut("/*infloop*/for(eval(\"yield (eval(\\\"(function ([y]) { })()\\\", __proto__(\\t*::*,  \\\"\\\" )));\", (this.zzz.zzz)); (eval(\"yield;\", <><x><y/></x></>)()++); [15,16,17,18]\t.sort([1,2,3,4].slice, typeof __noSuchMethod__)) {with(window\n)(function::__iterator__); }");
tryItOut("for(let y in []);");
tryItOut("{var __proto__, __count__;(({a2:z2})); }");
tryItOut("/*infloop*/do {(<x/>); }\r while(__parent__.__noSuchMethod__ -= [11,12,13,14].sort.valueOf(\"number\"));");
tryItOut("L:if((function  prop (prototype\f) { export *; } )(this.valueOf(\"number\") || <x/>.constructor, (( \"\" )(<x><y/></x>, function ([y]) { })[[11,12,13,14].map]))) {switch( /x/ ) { case 1: default:  } } else {L:switch(((-1).__lookupGetter__(\"__count__\"))) { default:  } }");
tryItOut("/*for..in*/for(const [__count__, prop] = <><bbb xmlns:ccc=\"-1\"><ccc:eee></ccc:eee></bbb></> in <><x><y/></x></>) {true }");
tryItOut("with((eval(\"undefined\", <x><y/></x>))){/*for..in*/for(var ({ constructor: __parent__, __iterator__: constructor }) in *) {(<y><z/></y>);{} } }");
tryItOut("let(__noSuchMethod__, __noSuchMethod__) { export __proto__;");
tryItOut("let (prototype = undefined.__count__, ({ __proto__: prototype })) { {} }");
tryItOut("let __proto__;");
tryItOut("L: {var __parent__;var prototype; }");
tryItOut("{this.zzz.zzz;switch((uneval(<x/>.*.__defineGetter__(\"prototype\", __parent__)))) { case  /* Comment */([11,12,13,14].sort.yoyo((__proto__|=@foo))): break;  } }");
tryItOut("\ncontinue L;\n");
tryItOut("with(__iterator__){yield; }");
tryItOut("M:if((new  '' )) {yield; } else  if (({ __iterator__: prototype, prop: __proto__ }) = __count__ .@x::  /x/ ) {var __iterator__ = <><x><y/></x></>, __proto__\n/*for..in*/for(var prototype in true) const prop, prototype = __parent__; } else ");
tryItOut("throw prototype;");
tryItOut("/*infloop*/for(let prop = <><><x><y/></x>yyy</></>; function(id) { return id }(); this.zzz.zzz) {return  '' ; }");
tryItOut("__count__ = __iterator__;");
tryItOut("/*infloop*/do {throw <x><y/></x>; } while(( \"\"  & this));");
tryItOut("{/*for..in*/L:for([__iterator__, prop] = 'fafafa'.replace(/a/g, gc) in  \"\" )  } const __proto__;");
tryItOut("return window;");
tryItOut("let(prop = <y><z/></y>) { export __noSuchMethod__;");
tryItOut("if(<x/>.propertyIsEnumerable(\"constructor\")) { if (prop = <><x><y/></x>\f</>) {var prototype = __noSuchMethod__;break ; } else \t{M:if(prop.__iterator__ setter= true) { if (#1=0/0 > 1.3) {let constructor; } else ;}yield false; }}");
tryItOut("let(__noSuchMethod__ = __parent__.__noSuchMethod__ getter= function(q) { return q; } !=  /x/g  === <x/>, ({ prop: ({ __iterator__: constructor }) }) = (<><x><y/></x></> || <x><y/></x>\f)) ((function(){let prop;})());");
tryItOut("for(let y in []);");
tryItOut("break ; const constructor;");
tryItOut("{yield <>x><y/ get __count__ prototype (__iterator__) { yield @foo }  ></x></>;{} }");
