tryItOut("do {{}var __proto__ = this; } while(((<>*</>.watch(\"__count__\", function (constructor) { yield this -= prototype } ))) && 0);");
tryItOut("if(__proto__) { if (<x/>) var constructor, constructor; else {; }}");
tryItOut("prop(__noSuchMethod__ = *\t)");
tryItOut("if(([#1=[#1#]].filter(function(y) { yield y; export *;; yield y; }))) yield <x><y/></x>;");
tryItOut("/*for..in*/for(__count__ in <><x><y/></x></>.__lookupGetter__(\"__count__\")) {throw __proto__; }");
tryItOut("");
tryItOut("L: var __parent__ = undefined\n{{} }");
tryItOut("export prototype\n");
tryItOut("let (__noSuchMethod__ = ('fafafa'.replace(/a/g, Math.sin))) { throw <x><y/></x>; }");
tryItOut("/*for..in*/for(var __proto__ in \n\f<x/>.__iterator__ = __parent__ .@*:: false) {if(#1=[#1#]) { if (this) ; else break M;}const prop = __noSuchMethod__, __noSuchMethod__; }");
tryItOut("yield <y><z/></y>;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = ('fafafa'.replace(/a/g, true)) *= (yield <x><y/></x>) in (1 for (x in []))) /*infloop*/for(({ __iterator__: __proto__, __proto__: constructor }) = prototype =  /x/g ; ( /* Comment */ '' ); __proto__) {(<x><y/></x>\t); }M:do if(<x><y/\n></x>) { if (({a1:1})) {export __parent__;export prototype; }} else 'haha'.split while((let (__parent__) new Date( '' , <x/>)) && 0);");
tryItOut("if((yield __count__.prop getter= (<x/>).__defineSetter__)) {/*infloop*/do {constructor; } while(new Object() !== yield null); }");
tryItOut("yield delete  /x/ ;");
tryItOut("if(*::*) {break M; }");
tryItOut("const __count__ = window;");
tryItOut("/*infloop*/while((uneval(<y><z/></y>))){<x><y/></x> }");
tryItOut("let(({ __proto__: __iterator__ }) = ([,,].__lookupGetter__(\"prototype\")), ({ constructor: [], setter: ({ __parent__: __iterator__, constructor: prototype }) })) { let(__parent__, __parent__) ((function(){yield constructor = (-0);})());");
tryItOut("/*infloop*/do do {(<y><z/></y>); } while((<y><z/></y>) && 0); while(({ get constructor __proto__ ()[1] }));");
tryItOut("L:if(([1,2,3,4].slice)(3/0 === 1.2e3 *= <x><y/></x> || window, <x><y/></x>.prototype = <y><z/></y>)\f) if(this.__defineGetter__(\"function::function::prop\", (<><x><y/></x></>).watch)) { if (prop%=<x><y/></x>) __noSuchMethod__, __parent__; else {var prototype, __count__ = <x><y/></x>;gc() }}");
tryItOut("if(\neval(\"__parent__\", <x/>)) gc() else  if (__count__ instanceof <x/>) {( /x/ );export prop; }");
tryItOut("with([z1] for (__noSuchMethod__ in [[]])){[1,2,3,4].map[1,2,3,4].map\nreturn;\n }");
tryItOut("/*for..in*/for(const __parent__ in ((function(q) { return q; })([,,z1])))break M;");
tryItOut("/*for..in*/for(__parent__ = (this.__defineGetter__(\"constructor\", function  x::__count__ (each, __count__) { return; } )) in this) with({prop:  '' })return null;");
tryItOut("L:if(prop) { if (+window) {return; } else {{}export *\f; }}");
tryItOut("/*for..in*/for(const __proto__ in ((eval(\"window in <x/>\", (this.isPrototypeOf(*))))(Number(5.0000000000000000000000).__lookupSetter__(\"__count__\"))))yield;");
tryItOut("function::__parent__;");
tryItOut("let (({ __parent__: ({ prototype: prop }), __proto__: __proto__ }) = (eval(\"<x/>\", <x><y/></x>)), ({ __noSuchMethod__: __parent__ }) = setter.__lookupSetter__(\"__noSuchMethod__\")) { {} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x/>) const __parent__;");
tryItOut("with(#3={a:#3#})/*infloop*/while(constructor)return window;");
tryItOut("let (prop =  '' ) { 1.3; }");
tryItOut("/*for..in*/for(var prop in this) /*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in  '' ) {yield [[]];gc() }");
tryItOut("M:with(<xxx {__proto__}={function::prototype = [z1]} />.([11,12,13,14].filter)){{let __parent__; } }");
tryItOut("(false)[<><x><y/></x></>]\n");
tryItOut("/*infloop*/for(let constructor; ((p={}, (p.z = __count__ = )())) .@ ((({__proto__:  /x/g , prop}))()); ([z1,,] ? <><x><y/></x></>.propertyIsEnumerable(\"__proto__\") : this.__defineSetter__(\"__noSuchMethod__\", <x><y/></x>))) break L;");
tryItOut("{return;var prototype; }\n/*infloop*/for(const __noSuchMethod__; #3={a:#3#}; [z1,,], prop) export __iterator__;");
tryItOut("__iterator__; const __parent__;");
tryItOut("export yield; const __noSuchMethod__; const __noSuchMethod__;");
tryItOut("/*for..in*/for(const [__parent__, __iterator__] = (<><x><y/></x></>)(__iterator__, <x/>) in (<><x><y/></x></>.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice))) if((<><x><y/></x></>.watch(\"constructor\", eval)) .@*:: prop+=this) { if ([this].some(function(y) { yield y; (this);; yield y; }) |= 'fafafa'.replace(/a/g, ((function(q) { return q; }).apply).call)) {yield;throw <><\nx><y/></x></>; }} else {}\n");
tryItOut("if(((yield <x/>))) {break L; const *; }");
tryItOut("L: /*infloop*/for(var __noSuchMethod__; prop.( \"\" ); (p={}, (p.z =  /x/g )())) let constructor, constructor =  '' ;\nexport *;\n");
tryItOut("break L;");
tryItOut("if(({ get __count__ __count__ (({ __iterator__: __proto__, __proto__: constructor }))window, function::__parent__ setter: function(y) { yield y; (<x/>);; yield y; } })) /*infloop*/while(prototype){yield; } else  if (([11,12,13,14].some -= (p={}, (p.z = this)()))) {export __iterator__; } else M:if(this) { if ([[1]]) {/*infloop*/for(var __count__; <x><y/></x>;  /x/g ) {throw  /x/ ;constructor } } else {{} }}");
tryItOut("if(<>prop.(eval(\"throw undefined;\", [<x/>].map((Math.pow).apply).(1e+81.isPrototypeOf(undefined))))</>) { if (__count__) {M:if(__iterator__.__parent__) const __proto__;\t } else {return delete <x><y/></x>.(this);if(new (function (x::function::prop, __noSuchMethod__) { continue L; } )(prop, <x><y/></x>)) {return [* if ( this )], (yield null); } else  if (<x><y/></x>.(<y><z/></y>)) {undefined; } else {var __parent__, prototype; } }}");
tryItOut("if(<x><y/></x> >>> undefined.eval(3/0.__proto__)) {windowM:switch(prop) { default: yield;break;  } } else  if (*::*) {const function::prop;gc() }");
tryItOut("continue L\n");
tryItOut("M:with([15,16,17,18].some((__parent__ = <x><y/></x>.__lookupGetter__(\"get\")).watch, [, ])){var __proto__ = x::constructor.__iterator__.__lookupSetter__(\"__noSuchMethod__\"), <x><y/></x>.prototype = return;() % <y><z/></y> ^= *::*; }");
tryItOut("/*for..in*/for(var prop in (((Math.pow).apply)([z1] = <x><y/></x>))){; }");
tryItOut("/*for..in*/for(const [prototype, __proto__] = ((p={}, (p.z = <bbb xmlns:ccc=\"#2=[(this.isPrototypeOf(window))]\"><ccc:eee></ccc:eee></bbb>.(constructor[*]))())) in (__count__ = this + (<><x><y/></x></> && <x/>))) {export __proto__ }");
tryItOut("M:if((__noSuchMethod__ =  '' )) {(4.).apply } else  if ((--<x/>)(<x><y/></x> == prop, undefined)) {{} }\n/*infloop*/for(let __parent__; this.__defineSetter__(\"__iterator__\", Math.sin); ({ set __count__() { export __count__; }  })) {prototype = __iterator__;; }\n");
tryItOut("throw StopIteration;");
tryItOut("with(<x/>){export *;return <y><z/></y>; }");
tryItOut("/*for..in*/L:for(var [__count__, x::__count__] = #2=window in <x><y/></x>) /*for..in*/for(const [prototype, __iterator__] = __proto__ in __parent__) throw <x><y/></x>\nreturn \n1e-81;");
tryItOut("\rswitch((prop.__defineSetter__(\"constructor\", 'haha'.split))) { default: break; case 7: export prototype;break; /*for..in*/M:for(var __parent__ in (([1,2,3,4].map)(undefined)))export __noSuchMethod__;break; case new 0((function ([y]) { })()): break; case <><x><y/></x></>.__iterator__: yield;break; break; (<><x><y/></x></>);break; case 5: break M;break; break;  }");
tryItOut("if((__parent__.(eval(\"\", *::*)))) { } else {3;switch(@foo) { default: break; {}case ({a1:1}): gc()break; <x><y/></x>yield #3={a:#3#};break; case 4: break; case  /x/ : this;break; <y><z/></y>;break; case 3/0: yield;break; case <><x><y/></x></>: let prototype = window;break; case  '' : break ; } }");
tryItOut("/*infloop*/do ; while(<><x><y/></x></> << @foo);");
tryItOut("if(yield [ \"\" ]) {export *; } else  if (return;) {{} } else throw  \"\" ;");
tryItOut("{[1,2,3,4].slicevar __count__ = 1e-81; }");
tryItOut("L:with({__parent__: __noSuchMethod__.constructor = <><x><y/\t></x></>.constructor = this *= new (*)()})default: __parent__ = window;this;break; case 7: break; ;");
tryItOut("(this);");
tryItOut("\n");
tryItOut("let (__count__ = prop = (new <y><z/></y>( '' ).__lookupSetter__(\"__proto__\"))) { {/*infloop*/for(var __iterator__ = this; <x><y/></x>;  /x/g ) return .2; } }");
tryItOut("continue M\nlet prop, prototype = 1.3;");
tryItOut("/*for..in*/M:for(const [__parent__, prototype] = @foo.constructor in \f<><x><y/></x></>) {export *; }");
tryItOut("yield (true !== 1e-81) >>> (uneval(1.2e3))");
tryItOut("M:with({__parent__: 1e81}){/*for..in*/L:for(let prop = this.__lookupSetter__(\"__noSuchMethod__\") in <x/>) const prototype = -0, __parent__;export *; }");
tryItOut("yield null;");
tryItOut("/*for..in*/for(const [__parent__, __proto__] = .2//h\n in <x/> && undefined.eval(([15,16,17,18].sort((new Function(\"return;\")), this)))) throw constructor.(false);");
tryItOut("M:do export __noSuchMethod__; while((__noSuchMethod__ = new false(1.2e3)) && 0);");
tryItOut("/*infloop*/do {null; } while(yield new ((1 for (x in [])))(__iterator__));");
tryItOut("L:do  while(( /x/g .__lookupSetter__(\"prototype\") / __parent__) && 0);");
tryItOut("{; }");
tryItOut("if(window) { if (*) {export prop;return <><x><y/></x></>; }} else (true);");
tryItOut("{const [], __iterator__ = ({}); }");
tryItOut("if((<><x><y/></x></>.__lookupSetter__(\"__iterator__\")).*.__lookupSetter__(\"prototype\")) { if (((window instanceof <x/>) < (__proto__ = <x><y/></x>)) ^ ({ get __proto__ prototype (constructor)#2=({__count__: this}), __count__: (yield  /x/ ) })) <x/>; const __proto__; else const prototype =  /x/ , __parent__;}");
tryItOut("M:if(<x><y/></x>)  else __parent__return;");
tryItOut("while((function ()[[1]]) && 0){}");
tryItOut("let (__parent__, prototype) { /*infloop*/do /*infloop*/L:for(let __parent__; this; this) {let __proto__ =  '' ; } while(((<><x><y/></x></>)[this].hasOwnProperty(\"constructor\"))); }");
tryItOut("/*for..in*/for(let prop in ((function  __noSuchMethod__ (prototype, prototype)*::*)(__noSuchMethod__)))return null;");
tryItOut("let (__parent__ = prototype, __iterator__) { yield; }\nexport __proto__;\n");
tryItOut("export *; const prototype;");
tryItOut("/*for..in*/for(var ({})(null) in ((try { __count__ = __proto__; } finally { for(let y in [5,6,7,8]) return; } )([1].constructor)))var __noSuchMethod__ =  \"\" , __parent__ = constructor;");
tryItOut("/*for..in*/L:for(var (0).call(({set getter: window })) = @foo in yield <><x><y/></x></>) return;");
tryItOut("if((<><x><y/></x></> >= <x/>)) { if (window) switch(0x99) { case 4: break; return <x><y/></x>;break; default: gc()case 2: throw @foo;break; break; case 4:  } else {const prototype; }}");
tryItOut("/*for..in*/for(function::constructor/*\n*/.__proto__ in (((new Function(\"gc()\\n{yield;yield 1e-81; }\\n\")))((#3={a:#3#}.eval(<x><y/></x>))[(3[yield null])]))){if(eval(\"[]\", *::*).__defineSetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)(yield true)) { if (2.__lookupGetter__(\"__parent__\")) {return; }} else {/*for..in*/for(constructor in  '' ) {<x/>, prototype = ({}); } } }");
tryItOut("const __proto__, __proto__ = 1e+81;var __noSuchMethod__ = true, prop\nlet __count__, prop;");
tryItOut("this.zzz.zzz;");
tryItOut("if(( /x/g  >>= true.propertyIsEnumerable(\"__count__\").propertyIsEnumerable(\"x::__noSuchMethod__\"))) {export constructor;L:switch(null) { default: yield;break;  } } else  if ((new (Math.pow)(this.__defineSetter__(\"__proto__\", new Function), ( '' .throw(__iterator__%= /x/ ()))))) /*for..in*/for(let __count__ in (((__parent__).__defineSetter__)(((export *).eval(*::*.unwatch(\"__count__\"))))))");
tryItOut("switch(this - false) { case 3: __parent__ = true, __count__;break; L: let constructor;break; yield {};default: function(y) { yield y; __iterator__ = [[]];; yield y; }break; case 7:  }");
tryItOut("with({}) yield ((new Function(\"throw this;\"))).call([<><x><y/></x></>].sort((Math.sin).call), var constructor = window, <x/>) > ((.2)[#1#\t]);");
tryItOut("if(<><xxx {prop}={(Function).call( /x/ , ) :: <x><y/></x>.unwatch(\"__parent__\")} /></>) { if ( /* Comment */<x><y/></x>) {\f /x/ ;gc() } else {; }}");
tryItOut("L: let (prop, __parent__) { ; }\n");
tryItOut("/*infloop*/M:for(var __noSuchMethod__; (String(<x/> , prop,  /x/ ))[((p={}, (p.z = prototype)()))]; (RangeError((true++[(yield ([__count__ = prop].sort(\r[11,12,13,14].sort.prop)))]), yyy[(#3={a:#3#} ? window : [,])]))) {yield;for(let y in []); }");
tryItOut("/*infloop*/M:for(var [[], __noSuchMethod__(false << -0), prop, , \t[, ]] = (function ([y]) { })(); new Function((__count__ = Function(@foo, <x/>))); let (__count__ =  \"\" , __parent__ = 3/0) false) return;let __count__ = <y><z/></y>, prop = *;");
tryItOut("do {/*infloop*/do {/*for..in*/for(prototype in ((function(y) { yield y; ;; yield y; })(<x/>)))yield 3.141592653589793; } while(__noSuchMethod__ = true >>= #1=[#1#]); } while(((__count__.prop setter= (function ([y]) { })())) && 0);");
tryItOut("/*infloop*/while(prototype.(this))export __parent__;");
tryItOut("M:with('fafafa'.replace(/a/g, new Function).throw(this.zzz.zzz))const [__parent__, ] =  for (prop in @foo instanceof \f.2) for (__noSuchMethod__ in constructor = <\tx><y/></x>) if (<x><y/></x>);");
tryItOut("{if( \"\" ) yield; else  if (true) __proto__ = 3.141592653589793, prop = *::*;\n else {continue ; }return; }");
tryItOut("let (constructor = (({__proto__: new ([1,2,3,4].slice)(<x><y/></x>)}))) { /*infloop*/for(const __noSuchMethod__ =  /x/  - window; __parent__[prototype]; undefined(this) -= __noSuchMethod__ = __iterator__) __proto__; }");
tryItOut("switch([,,]) { default:  }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let __count__ = 3/0 .@x:: (-1)\t in (__iterator__.eval(({a1:1})))) {export __proto__;(*); }");
tryItOut("return;");
tryItOut("/*infloop*/for(var ({ constructor: let }) = <y><z/></y>; (<x><y/></x>.( \"\" )); __count__ |= <><x><y/></x></>) {yield .2;gc() }<y><z/></y>;");
tryItOut("/*infloop*/for(let prop; ((({__count__: <x><y/></x> }).@foo) for (__count__ in  /x/ ) if (<x><y/></x>)); (constructor.(<x><y/></x>))) yield  /x/ ;");
tryItOut("gc()\n");
tryItOut("with( '' )/*for..in*/for(const __count__ in this) {/*infloop*/do const __parent__ = <><x><y/></x></>, __count__ = window; while(function ([y]) { }); }");
tryItOut("(#1#);return -0;");
tryItOut("L: export constructor;");
tryItOut("constructor = constructor;");
tryItOut("if(__noSuchMethod__ = [15,16,17,18].map(new Function, (yield <y><z/></y>))) (window); else  if (this.__count__ = 0/0.*) {return;{} }\n/*infloop*/for(__noSuchMethod__ = <x><y/></x>; null; @foo) export prototype;\n");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var __parent__ in  /x/g ) throw __count__;");
tryItOut("return <x><y/></x>;");
tryItOut("export *\nreturn undefined");
tryItOut("if(*.__count__) {(<x><y/></x>);throw 0x99; } else {;continue M; }");
tryItOut("export *; const __count__;");
tryItOut("/*infloop*/L:do {@foo;(5.0000000000000000000000); } while(<x><y/></x>);");
tryItOut("L: {yield; }");
tryItOut("/*infloop*/for(var ({ prop: let }) = new (function(q) { return q; })() for each (constructor in <x/>) for each (__proto__ in 1e4); ( \"\"  for each (__iterator__ in 5.0000000000000000000000)); __count__.__proto__ = @foo) {var __count__ = *::*; }");
tryItOut("let(__proto__) ((function(){Math.pow})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in #1#) export prop");
tryItOut("if(true *=  \"\" ) {throw null;(false); } else  if (\t<xxx>{__count__}</xxx>) {if(\t<x><y/></x>.([1,,])) {return;export *; } else { /x/g yield; }/*for..in*/for([__proto__, __proto__] = true in <><x><y/></x></>) gc() } else {yield; }");
tryItOut("{; }");
tryItOut("M:if(* if (<x><y/></x>)) { if (<x/> == (constructor = this === <x/> instanceof 3/0 ^= ({constructor: __count__}) * @foo .@*:: arguments)) {/*infloop*/while(({}).propertyIsEnumerable(\"__iterator__\"))let __proto__, constructor; } else {L:if(('fafafa'.replace(/a/g, function (prop) { yield <x><y/></x> } ))) { if (<x><y/></x>.__lookupSetter__(\"__proto__\")) {continue ; }} else {__parent__ } }}");
tryItOut("/*infloop*/do /*for..in*/for(let [__noSuchMethod__, __iterator__] = prototype =  /x/g \f in __parent__.__count__) export prop; while(__iterator__.__iterator__+=__iterator__.__proto__ getter= constructor);");
tryItOut("/*infloop*/do {if(<><x><y/></x></>) {{} } else  if (3) throw 1e4; } while((window)(<><y><z/></y></>));");
tryItOut("/*for..in*/for([__count__, prop] =  /x/  in <><x><y/></x></>) {__iterator__: <{constructor}> </{constructor}>yield 3.141592653589793; }");
tryItOut("/*for..in*/for([__noSuchMethod__, prop] = this in <>\r<x><y/></x></>) {__count__ = this, __proto__; }\n");
tryItOut("__iterator__");
tryItOut("for(let y in []);");
tryItOut("try { try { yield; } catch(__noSuchMethod__) { return; } finally { with({}) { yield; }  }  } finally { let(constructor = ([window if (*::*)]).__lookupSetter__(\"__noSuchMethod__\"), __iterator__) { let(function::__iterator__) ((function(){try { let prototype = #1#; } catch(prop) { var prop =  /x/ ; } finally { let __count__ = undefined; } })()); } ");
tryItOut("function  __proto__ (__noSuchMethod__, __iterator__) { return <x/> } ");
tryItOut("if(window.__proto__ :: \n '' ) { if (throw window == 5.0000000000000000000000.@foo) {window; }} else {gc()\n }");
tryItOut("/*infloop*/for(<><x><y/></x></>; -3/0 &= this; yield *::*) {}");
tryItOut("{var constructor = <y><z/></y>;yield; }");
tryItOut("with({prop: ([(prototype = <x><y/></x>)].filter(({}).hasOwnProperty))})M:while((window) && 0){function  __parent__ () { yield [1,,] } throw 3.141592653589793; }");
tryItOut("yield (-1)\n");
tryItOut("{constructor; }");
tryItOut("if(yield -3/0.throw((p={}, (p.z = @foo)()))) {__parent__;/*infloop*/__noSuchMethod__: 'fafafa'.replace(/a/g, __parent__)do yield; while(*); } else  if (Iterator(__proto__[<bbb xmlns=\"({constructor getter: /a/gi })\"><!--yy--></bbb>])) {{} }");
tryItOut("throw (-0);\r\n/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in /) ;\n");
tryItOut("gc()\nthrow null;");
tryItOut("");
tryItOut("/*for..in*/L:for(__iterator__ = new ( '' .__count__ = <x/>).eval(( /* Comment */constructor = constructor))(null, <y><z/></y>) in (<y><z/></y> ^ 3)) {\n } const prototype;");
tryItOut("({ prop: ({ constructor: ({ __iterator__: [] }) }) }) = delete  /x/g .__iterator__");
tryItOut("if(__proto__.__count__ = __proto__\n) let(__parent__ = <x><y/></x>) { var prop = @foo;");
tryItOut("L:if([<x><y/></x>]) {const __parent__, __noSuchMethod__; } else  if (<x/>) {throw \t@foo; } else {{(<x><y/></x>); }break ; }");
tryItOut("return;");
tryItOut("with((this.__defineSetter__(\"__noSuchMethod__\", prototype.constructor))){export *;{{}const ; } }");
tryItOut("switch(function::__parent__.__count__) { case (eval(\"export *;\", false)): return null;break;  } const constructor;");
tryItOut("while((this.__parent__) && 0)prop;");
tryItOut("M:if((__parent__.prop = undefined)) { if (prototype.__iterator__ = delete (__parent__.__parent__)) {(<>yield <x/></>); }} else M:if((prototype - [1,,])) ");
tryItOut("/*infloop*/for(__count__ = prop; <><x><y/></x></>; <><x><y/></x></>;) {gc() }");
tryItOut("L:with(<><x><y/></x></>){<y><z/></y>; }");
tryItOut("with({}) { let(gc(), <><x><y/></x></> = <><x><y/></x></>.watch(\"prop\", function  constructor () { ; } )) { this.zzz.zzz; } ");
tryItOut("/*for..in*/yyy");
tryItOut("throw 1.2e3\n");
tryItOut("{}");
tryItOut("do export *; while((this.zzz.zzz) && 0);");
tryItOut("/*infloop*/do {let (__noSuchMethod__ = __count__, prototype = <y><z/></y>) { return ({a1:1}); } } while(<x><y/></x>.__lookupGetter__(\"function::__iterator__\"));");
tryItOut("/*infloop*/for([1]; prototype; <x><y/></x>) { }");
tryItOut("/*infloop*/while((RegExp()))__count__: constructor += (function  __parent__ ()<x><y/></x>)((nullpropertyIsEnumerable(\"__count__\")))");
tryItOut("with({__iterator__: (window !== 3/0.watch(\"__noSuchMethod__\", function  prototype (constructor, constructor) { \tif(*::*) export *; else __iterator__ = <x><y/></x>; } ))})with('fafafa'.replace(/a/g, __parent__)){const constructor = 3/0, __parent__ }");
tryItOut("export x::prototype;\n/*infloop*/L:do throw [[]]; while(prototype);\n");
tryItOut("if( \"\" ) { if (window) ; else __parent__, prop;}");
tryItOut("with(eval(\"<><x></> &=  /x/ \", [1,,].__defineGetter__(\"__proto__\"\t, gc)))export __proto__");
tryItOut("do  while(('fafafa'.replace(/a/g, ({}).hasOwnProperty)) && 0);");
tryItOut("L:if(eval.watch(\"constructor\", ({}).hasOwnProperty)) /*infloop*/for(var constructor; (this.__defineSetter__(\"__noSuchMethod__\", /a/gi)); (__noSuchMethod__.constructor)) {/*infloop*/while([1,,])gc() } else  if (prop) {const prototype =  \"\" ;prop; } else {(<y><z/></y>) }");
tryItOut("M:with({prototype: null})prototype.prop");
tryItOut("with({__noSuchMethod__: (@foo instanceof *::*)})default: gc()break; with({__count__: <x><y/></x>}){\n__parent__ = <><x><y/></x></>, __iterator__ = true; }");
tryItOut("/*for..in*/M:for(var [prototype, __count__] = false in  '' ) {gc()__noSuchMethod__; }");
tryItOut("if(__proto__ = <x><y/></x>) {throw function ([y]) { };export prototype; }");
tryItOut("let (__proto__ = this.__defineSetter__(\"prototype\", function(q) { return q; }).__proto__) { <x><y/></x><!--yy--> const constructor; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("<y><z/></y>");
tryItOut("let (prop = [[]] if (__proto__), ({ __parent__: ({ __iterator__: prototype, __count__: function::__noSuchMethod__ }) })) { if(constructor) {(<y><z/></y>)\f;; } else  if (<y><z/></y>.throw(null)) {{} } }\n");
tryItOut("if(return (__parent__|=3)) { if (3 <= window) {} else ;}");
tryItOut("L: M:while(( '' ) && 0)( '' ).watch/*infloop*/for(const constructor = (new -0); window; ((eval(\"return  \\\"\\\" ;\", __count__)).__defineSetter__(\"__proto__\", function () /* Comment */__parent__ = this))) {yield; }");
tryItOut("/*for..in*/for(var prototype in <y><z/></y>) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const (__count__) in prototype) {break ; }");
tryItOut("M:do ; while(( /* Comment */<bbb xmlns:ccc=\"false++\"><ccc:eee></ccc:eee></bbb>) && 0);");
tryItOut("with({}) for(let y in []);");
tryItOut("/*infloop*/for(let prop = (prop = *::*); Date(undefined); __parent__ =  /x/g ) <><x><y/></x></>");
tryItOut("L:while((({a2:z2})) && 0)let constructor;");
tryItOut("{@fooexport __proto__; }");
tryItOut("let (__noSuchMethod__, prop) { gc() }");
tryItOut("L:with(eval(\"__proto__\", [1,,] ? [1] : this)){{}yield; }");
tryItOut("/*for..in*/L:for(const 1e81.constructor in constructor.(<><x><y/></x></>).yoyo(__iterator__+=<y><z/></y>)) /*for..in*/for(__count__ = null in <x/>) let (__noSuchMethod__, __iterator__) { {} }");
tryItOut("if((<y><z/></y>.hasOwnProperty(\"__iterator__\"))) throw constructor; else  if (eval(\"const prototype =  '' , __iterator__ = <><x><y/></x></>;\", <y><z/></y>)) {return; }");
tryItOut("yield; const __noSuchMethod__;");
tryItOut("/*for..in*/for(let __iterator__.prototype in <y><z/></y>) this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:do return <\tx><y/></x>;\n\n while(__proto__ setter: *);");
tryItOut("/*infloop*/M:for(void [z1,,] for (constructor in <><x><y/></x></>); (<x><y/></x>.eval(__iterator__ = *.__parent__.throw(constructor += <x/>.@*))); __parent__) return\ncontinue M;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (constructor) in  \"\" ) {if((eval(\";\", yield  \"\" ))) {throw window; } else  if (\n /x/ ) {switch(<><x><y/></x></>) { case 0: throw true; } } }");
tryItOut(" { yield 1.3 } ");
tryItOut("if((new __noSuchMethod__(constructor: (), prop))) {__parent__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let delete in (++(null)())) {continue M; }");
tryItOut("M:do L:with({__iterator__: })\n; while((yield null %= window ? ((__parent__.x::prototype)[(0\n)]) : (prop)[1e+81]) && 0);");
tryItOut("M:switch(this.__defineGetter__(\"prototype\", /a/gi)) { default: export *;case RegExp(__iterator__ = <y><z/></y>): return;case (constructor = *::*): case (yield undefined): break; case new new Function(<x><y/></x>, <x><y/></x>): break; break;  }");
