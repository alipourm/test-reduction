tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:do {/*for..in*/for(const [__count__, __count__] = <><x><y/></x></> |= <x><y/></x> in (prototype = [1,,])) ; } while((@foo)[false].@foo);");
tryItOut("let constructor;export prop\n");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while((-1))export *;");
tryItOut("true.__count__ = __parent__;");
tryItOut("L: {continue ; }");
tryItOut("/*infloop*/while(prototype.yoyo( /x/g ).__defineSetter__(\"__noSuchMethod__\", gc)++)if(1e+81) { if (__iterator__) export __parent__; else {var prop = *, __parent__;gc() }}(<x><y/></x>);");
tryItOut("/*infloop*/for([<><xxx>{__proto__}</xxx></>].some((1 for (x in []))) .@ this.__defineSetter__(\"__proto__\", function(y) { yield y; ; yield y; }); (prop = <x><y/></x>--); @foo != (( ''  for each (prop in 033))).valueOf(\"number\")) {}");
tryItOut("with( /x/g  - 3.141592653589793)switch(constructor) { case 9: (<x/>);break;  }");
tryItOut("if(prop.valueOf(\"number\").valueOf(\"number\")) {(false); } else {var window = <x><y/></x>;return  \"\" ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__.prop in null) {let __parent__ = null, __noSuchMethod__;export *; }");
tryItOut("M:while((new *(window, this)) && 0)const __noSuchMethod__, prop\n");
tryItOut("with({constructor: (this.__iterator__).__defineGetter__(\"prototype\", __proto__)}){( \"\" );yield [1]; }");
tryItOut("(*);");
tryItOut("M:switch(__iterator__ = <><x><y/></x></>) { default: /*infloop*/M:for(let [constructor] = window; ([<x/>].sort((1 for (x in [])))); (arguments ? <x><y/></x> : null)) {export *;yield 1.3; }break;  }");
tryItOut("/*infloop*/do {;\nreturn <><x><y/></x></>;\n{} } while\t(*::*)\n/*infloop*/(const __proto__; (false = *); (__proto__ = window for each (prototype in <x><y/></x>))) {{} }");
tryItOut("{-1; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in ([,].(('fafafa'.replace(/a/g, new Function))))) if(\n<>\x7f</>) { if (*\r()) {L:while((<><x><y/></x></>) && 0)yield prop;yield; }} else return;");
tryItOut("return; const prop;");
tryItOut("/*for..in*/for(let <x><y/></x>.__iterator__ in <x><y/></x>) {/*for..in*/for(let [prototype, prototype] =  ''  in 1.3) (prototype).watch }");
tryItOut("{*::* }");
tryItOut("{with(\n__count__){const constructor, __proto__ = <y><z/></y>;export *; } }");
tryItOut("return (let (__iterator__, prototype) <x/>).unwatch(\"__parent__\");");
tryItOut("let (__proto__, __parent__ = [1]) { var function::prototype = null, __iterator__ = 4.;\nyield;\n }");
tryItOut("throw StopIteration;");
tryItOut("with({[({ __iterator__: __count__, __proto__: ({ prop: [, , prop, __noSuchMethod__, ], constructor: ({ __iterator__: __proto__, __iterator__: __proto__ }) }) }), , ({ __noSuchMethod__: ({ __parent__: constructor, setter: ({ constructor: __count__ }) }), constructor: prototype }), __proto__]: <></>}){const prop; }");
tryItOut("if(eval(\"return;\", (__proto__ = this) && <y><z/></y>, undefined)) { if ((* | {}--)((#0=[({a1:1})] in undefined .@x:: <x/>)--, ((delete new (033)()).hasOwnProperty(\"prototype\")))) /*for..in*/L:for(prop in 1e-81.unwatch(\"constructor\")) {prototype = <x><y/></x>; }} else throw ({ __iterator__: __noSuchMethod__, constructor: prototype });");
tryItOut("if(false)  else  if (<><x><y/></x></>) {continue ; } else {yield 0; }");
tryItOut("M:with({let: window.__defineSetter__(\"constructor\", (__noSuchMethod__).__defineSetter__)}){yield <x/>; }");
tryItOut("yield prop;");
tryItOut("for(let y in [5,6,7,8]) try { return; } catch(prototype if (function(){let(prototype = [[]], __noSuchMethod__) { function(id) { return id };})()) { let(__count__) { yield -3/0; } catch(__proto__ if eval(\"<y><z/></y>\", <x/>)) { with({}) const __iterator__ = *, __count__ = <x><y/></x>; } catch(__count__) { tryconstructor  { break ; } catch(__count__ if (function(){{}})()) { prop; } catch(constructor) { const __proto__, __parent__ = *::*; }  } finally { function(y) { yield y; <><x><y/></x></>;; yield y; } } ");
tryItOut("L:if((@foo)(<y><z/></y>)) { if ((({setter: null,  get constructor constructor (constructor) { yield; }  })[*++])) {yield;let __count__; }} else ");
tryItOut("return;");
tryItOut("if(__iterator__) { if ( \"\" ) {yield; }} else {gc()return; }");
tryItOut("/*infloop*/do ((__proto__-=@foo)).watch while(({a1:1}).hasOwnProperty(\"__noSuchMethod__\"));");
tryItOut("[1,2,3,4].slice");
tryItOut("L:with(*::*){throw (-0); }");
tryItOut("this; const prop;");
tryItOut("if(__parent__, __iterator__) { if (null) var constructor = null, prop = <x><y/></x>;} else {}");
tryItOut("if(window--) { if ((({ __count__: __proto__, __iterator__: constructor }) = [, ])) undefined; else {[1,2,3,4].slicebreak ; }}");
tryItOut("return this; const __proto__;");
tryItOut(" set constructor([, , , [], ], prototype)<x/>while((((<x><y/></x>)(#1#) = @foo.isPrototypeOf([,])++)[\f(<x><y/></x> ^ (p={}, (p.z =  \"\" )()))()]) && 0)export __noSuchMethod__;");
tryItOut("if(((Math.sin)())) throw <x/>; else  if ([(<y><z/></y>.hasOwnProperty(\"__count__\")).__proto__ = (({prototype: this}))]) {}");
tryItOut("/*infloop*/M:for(const [] = <>__parent__</>; [__parent__ = <x><y/></x>]; undefined & <><x><y/></x></>) let __parent____count__ = __proto__, prototype;");
tryItOut("{gc() }M:while((<y><z/></y>.__defineSetter__(\"__proto__.__iterator__\", function  prototype (__proto__, prototype)window)) && 0)if(0x99) ( '' ); else  if (<x><y/></x>) eval;");
tryItOut("M:do let prototype, __proto__; while(((*.__noSuchMethod__ = set = <x><y/></x>)) && 0);");
tryItOut("while((eval(\"return;\", (((<x/>).watch)()))) && 0)/*infloop*/for(let __count__ = (yield <><x><y/></x></>.watch(\"__count__\", ({}).__lookupGetter__); + [,,z1].yoyo(0)); [[]].valueOf(\"number\"); (yield __iterator__.*)) /*infloop*/do throw this; while(<><x><y/></x></>);");
tryItOut("if((({a1:1}) ? undefined : <x><y/></x>)) { if (prop && this.prototype) (#3={a:#3#});} else __parent__;");
tryItOut("with(({ get __parent__(__iterator__) { yield (prototype = [,,]) } , __proto__: constructor = __count__ })){yield; }");
tryItOut("with({__noSuchMethod__: *::*})export *;throw  '' ;");
tryItOut("/*for..in*/for(var __proto__ in (('haha'.split)([,,z1])))gc()");
tryItOut("L: {return; }");
tryItOut("with(window\n){gc() }");
tryItOut("/*infloop*/for(var ({ __parent__: __proto__, __parent__: ({ constructor: prototype }) }) = <bbb xmlns=\"*::*\"></bbb>; 3; ({ prototype: __count__ }) = __count__) return;");
tryItOut("{throw [1,,];{} }");
tryItOut("if(this.__defineGetter__(\"constructor\", new Function)) { if ((uneval(<><x><y/></x></>\n))) switch(true) { default: /*infloop*/M:do ( \"\" ); while(null);break; case 8: export prop;export __proto__;case  /x/g : try { return __noSuchMethod__; } finally {  } break; case 6: (@foo);break; gc()break; case [z1]: let prototype = <x/>, prop;case 3: break; nullcase 4: case [,]: (1e-81);break;  }} else \t{/*infloop*/for(this; <><x><y/></x></>; <x/>) return window; }");
tryItOut("{/*infloop*/for(let __iterator__; -1; <><x><y/></x></>) {continue M;export *; }(/a/gi).call }");
tryItOut("{(.2); }");
tryItOut("while((({})) && 0){__parent__, constructor = *::*;let __iterator__; }");
tryItOut("export *;");
tryItOut("/*infloop*/L:do {throw __iterator__;yield; } while( /* Comment */\t@foo !== window);");
tryItOut("/*infloop*/for(__parent__; ({ prop: constructor }) = __iterator__ + prop; __count__ = <x><y/></x>) {yield;switch(({}).__lookupGetter__) { case 3: let __count__;break;  } }");
tryItOut("this.zzz.zzz;/*infloop*/for(let __parent__; [,]; [z1,,]) yield <x><y/></x>;");
tryItOut("/*for..in*/for(let __iterator__ = eval(\"(<><x><y/></x></>);\", true) in window) let constructor = this, __proto__;\n[,,z1];\n");
tryItOut("yield [1,,];");
tryItOut("/*infloop*/for(\n(function(y) { yield y; gc(); yield y; })(<x><y/></x>); this; (<><x><y/></x></> === #3={a:#3#})) yield __count__;");
tryItOut("with({constructor: @foo}){const prop = ({a2:z2});const #1#, __count__; }");
tryItOut("if((prototype.__count__ setter= Math.pow) for each (set in this) if (#1#)) {let prototype;{} } else  if ([] <= window) let \t__noSuchMethod__ = <x><y/></x>; else {/*for..in*/for(let __noSuchMethod__ in ((function  __proto__ ()false)((window)(<y><z/></y>))))gc() }");
tryItOut("export *; const __proto__;");
tryItOut("with({}) let((__count__) = (Boolean(#1=[#1#]) !== null)) { return __count__ = <><x><y/></x></>;");
tryItOut("{M:do throw <y><z/></y>; while((this) && 0); }");
tryItOut("with({}) constructor = prop;");
tryItOut("return new Exception((<x><y/></x>.throw( /x/ )));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x/>) {throw #3={a:#3#};var prop, __parent__ = <><x><y/></x></>; }");
tryItOut("{throw *::*; }");
tryItOut("if([ ].sort(this)) { if ([z1,,] if (<x><y/></x>)) var constructor =  /x/ ;} else __noSuchMethod__;");
tryItOut("/*infloop*/while(yield true)/*for..in*/for(let __parent__ = (false >= <x><y/></x>) in __parent__) {var __noSuchMethod__, __parent__ = <><x><y/></x></>\t;/*for..in*/for(__count__ in __proto__) {yield <x><y/></x>;/*infloop*/while(this) for each (__iterator__ in *) } }");
tryItOut("(.2)\n");
tryItOut("/*infloop*/for(let __proto__; Date() /= [<x><y/></x> for (__count__ in this)]; this.zzz.zzz) {gc() }\f");
tryItOut("throw @foo;");
tryItOut("{eval }");
tryItOut("M:if(<x><y/></x>.__defineGetter__(\"constructor\",  /x/g )) {yield window;export *; }");
tryItOut("if(__proto__.__noSuchMethod__) { if (yield (function ([y]) { })()) {switch([1,,]) { case *: default: export __count__;case 3: break;  } }} else switch(eval) { default:  }");
tryItOut("gc()");
tryItOut("if(( '' .__iterator__)) {/*for..in*/for(__proto__ = [<><bbb xmlns=\"[1,2,3,4].map()\"> </bbb></>] in <x><y/></x>.@foo) {{}{} } } else  if ((false(<y><z/></y>, this).propertyIsEnumerable(//h\n\"__count__\"))) {export __iterator__;{throw this;yield; } }");
tryItOut("while(((new new Function() , false)) && 0)<y><z/></y>;");
tryItOut("switch(__noSuchMethod__) { case 5:  }");
tryItOut("return;");
tryItOut("with({*: (p={}, (p.z = undefined)())})export __iterator__;");
tryItOut("L: {yield; }");
tryItOut("for(let y in []);");
tryItOut("with({}) gc()");
tryItOut("yield <y><z/></y>");
tryItOut("throw __noSuchMethod__\n/*for..in*/L:for(const __iterator__ in window) {export *;export __iterator__; }");
tryItOut("if(this.__defineGetter__(\"__iterator__\", __iterator__ = __noSuchMethod__ = 4.)) function () { yield ( /x/g .__proto__ =  /x/ )[.2[[(@foo -= <x><y/></x>)]]] }  else  if \t(<x/>) if(1e+81) var prop,  get __iterator__(__noSuchMethod__, constructor)<x><y/></x>; else export __parent__; else yield;");
tryItOut("/*infloop*/for(function::__iterator__; *::*; window) {var prototype;{} }");
tryItOut("while((@foo) && 0){gc() }");
tryItOut("; const prototype;");
tryItOut("/*for..in*/for([prop, prototype\t] = (-1) /=  \"\"  in <x><y/></x>) __proto__ = *;");
tryItOut("/*infloop*/do /*for..in*/for(let __count__ = gc in [1,,]) {const __parent__, prop = window;throw window; } while(true);");
tryItOut("/*for..in*/for(const __count__ in (('haha'.split)(constructor =  \"\" ))){}");
tryItOut("/*for..in*/L:for(var __parent__ in ((__proto__.prototype = __count__)(.2 !== [])))do {continue L;{} } while(([z1]) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in (typeof (__count__.prototype = true))) {(1 for (x in []))while((yield <><x><y/></x></>) && 0)yield; }");
tryItOut("M:if(*.__defineSetter__(\"__parent__\", eval).__lookupGetter__(\"__proto__\")) {return <y><z/></y>; }");
tryItOut("{/*for..in*/for(var prop in ((eval)(<x><y/></x>)))gc()(prop); }");
tryItOut("/*for..in*/for(const __count__ in ((({}).hasOwnProperty)(<><x><y/></x></>)))yield;");
tryItOut("/*for..in*/for(const constructor = ({ set __count__ constructor (set) { /*infloop*/while([,,]){\nthrow <x><y/></x>; } } , constructor: let (__noSuchMethod__ = window, __count__) /*<x><y/></x> }) in <x><y/></x>.prop) yield *;");
tryItOut("if(prop:  /* Comment */-1[window]) {{} } else  if (('fafafa'.replace\t(/a/g, eval))) const __parent__;");
tryItOut("for(let y in [5,6,7,8]) with({}) { yield  \"\" ; } ");
tryItOut("/*for..in*/for(const let in ((eval)(@foo))){export __iterator__;prototype = <x><y/></x>, __iterator__; }");
tryItOut("with({}) return;");
tryItOut("/*infloop*/for(var constructor; #3={a:#3#}; true if (<><x><y/></x></>)) export *;");
tryItOut("/*for..in*/for(getter = this in constructor = window) {/*for..in*/for(const __parent__ in <x/>) return prop; }");
tryItOut("L: export *;");
tryItOut("do {export __count__; } while((<><x><y/></x></>) && 0);");
tryItOut("/*for..in*/for(let prototype in (((( /* Comment */prop @ (-0)) ? yield = ({ __proto__: __proto__, __count__: prototype }) : __proto__))((function(y) { yield y; throw function(id) { return id };; yield y; })(<><x><y/></x></>, window)))){prop, constructor = prop;return; }");
tryItOut("L:if(let (__noSuchMethod__) * += __proto__ = <><x><y/></x></>) {export *;yield; } else  if ((yield null)[*::*.unwatch(\"prototype\")]) //h\n{break M; } else /*infloop*/while(this)yield <x/>;");
tryItOut("with( /x/ ){yield <x/>; }");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("let (__proto__, __parent__) {  }");
tryItOut("throw StopIteration;");
tryItOut("with(undefined)export __proto__;");
tryItOut("/*infloop*/M:for(var ({ __proto__: ({ constructor: prototype, __parent__: ({ prototype: ({ prop: ({ prototype: prototype, __count__: prototype }) }), constructor: __iterator__ }) }), constructor: ({ __count__: ({ prototype: __parent__ }), __noSuchMethod__: prop }) }) = __proto__['prop\f'] = new #1#( /x/g ); <><x><y/></x></>.__defineGetter__(\"prop\", 'haha'.split); (new Exception())) export constructor;");
tryItOut("with({prop: }){return <x/>;/*for..in*/L:for(let prop in  /x/ )  }");
tryItOut("switch([, , __proto__, [__noSuchMethod__, , prop, get, ]] = __noSuchMethod__ = (* ^= this)) { default: (false);break; case ({constructor: @foo-- }): /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in #3={a:#3#}) {var __iterator__, prop = <x><y/></x>; set __parent__ function::prototype (constructor, constructor) { yield false } ; }break; continue L;case <zzz><x/></zzz>: continue ;break; case <y><z/></y>: case  /x/  >= #1#: export *;break;  }");
tryItOut("while((([<><x><y/></x></> for (__iterator__.__parent__ in @foo) if (null)])) && 0){with(<><bbb xmlns=\" /x/ \"><x><y/></x><x><y/></x><ccc:ddd></ccc:ddd></bbb></>)Math.pow }");
tryItOut("__proto__ = window;");
tryItOut("if(window) {}");
tryItOut(";");
tryItOut("let(__parent__) ((function(){return (({ set __proto__ prop (__iterator__, prototype) { return prototype }  }));})());");
tryItOut("yield (<x><y/></x> for each (__parent__ in -1))(((eval).call((* !== this), (window - 1e4))));");
tryItOut("if(<><>(<><x><y/></x></> for each (prop in this))</></>) /*infloop*//*\n*/for(let prop; -1; __parent__) continue L; else const function::__parent__, ((1e81.__defineGetter__(\"__noSuchMethod__\", function  __proto__ () { return window } )) > (1 for (x in []))(__noSuchMethod__, true)) = new ((new Function(\"break ;\")))(window, <x/>);");
tryItOut("prototype;\nthrow <y><z/></y>;\n");
tryItOut("let function::prop, __iterator__;\nreturn;\n");
tryItOut("if([]) return 1e4;");
tryItOut("M:switch(window) { case 0: (window);break; case  if : <><x><y/></x></>;break; default: throw <x/>;case *: gc()break; prototype, __proto__ = [,,z1];break; yield [,,];case [z1]: let prop, __noSuchMethod__; }");
tryItOut("return;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(var __parent__ in (([1,2,3,4].map)( /x/g  / *::*))){<x><y/></x>;break L; }");
tryItOut("L: {( '' );export *; }");
tryItOut("/*for..in*/for(__count__ = window in <y><z/></y>) /*infloop*/for(var constructor = <y><z/></y>; 033; this) export constructor;");
tryItOut("/*for..in*/for(let constructor = __parent__.__proto__ = (\n(<><x><y/></x></>[export __proto__;])) in window) {return (1e4); }");
tryItOut("let __iterator__ = 1e81, __noSuchMethod__ = arguments;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, constructor] = [,] in new function  __noSuchMethod__ () { continue M; } ( /x/g )) if(([let (__count__) 1.3])) return __count__; else  if ('fafafa'.replace(/a/g, 'haha'.split)) {return <x><y/></x>; }");
tryItOut("const __count__;");
tryItOut("L: prop = prop;");
tryItOut("if(<><zzz>__count__.constructor getter= function (__parent__) { return true } </zzz></>) { if ((p={}, (p.z = (__parent__ > <x><y/></x>))())) var __noSuchMethod__ = false, constructor; else {{; } }}");
tryItOut("let constructor\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in this) yield undefined;");
tryItOut("");
tryItOut("switch((__count__.__proto__[ ''  = <><x><y/></x></>]) >>> false) { default: break; case new Date(__noSuchMethod__|=<x/>): break; case 6: case (new (<y><z/></y>;)(({a2:z2}), <x><y/></x>)): __noSuchMethod__;case 4: continue ;break;  }");
tryItOut("/*for..in*/M:for(let prop = (__count__.__iterator__)[<><xxx>{__count__}</xxx></>] in __proto__ = <x><y/></x>.(undefined)) {throw 0/0;yield <x/>;throw @foo; }");
tryItOut("do {export *;<y><z/></y>; } while((((* instanceof ({a1:1})))()) && 0);");
tryItOut("{this;yield <x><y/></x>; }");
tryItOut("gc()");
tryItOut("return;\n( \"\" );\n");
tryItOut("if((function (__parent__, __iterator__) { return [1] } )(<><x><y/></x></>, <x><y/></x>)) { if (<><x><y/></x></>) {return window;throw <><x><y/></x></>; }} else {;; }\nprototype = __noSuchMethod__, constructor = <><x><y/></x></>");
tryItOut("/*infloop*/for(this.__defineGetter__(\"prop\", 'haha'.split); <xxx>{constructor}</xxx>.(<x><y/></x>.isPrototypeOf(-1)); ({ __count__: __proto__, __iterator__: __iterator__ }) = 'fafafa'.replace(/a/g\f, <y><z/></y>)) /*for..in*/for(const prop in *::*) export *;");
tryItOut("L: {let (prototype =  /x/g , __parent__ = *) { var prop =  /x/g ; }while((<><x><y/></x></>) && 0)return null; }");
tryItOut("while((<x><y/><//h\n/x> ^= 0) && 0)[__proto__, setter]");
tryItOut("if(__proto__ = <\f><x><y/></x></>) {;export *; } const prop;");
tryItOut("/*infloop*/for(<x><y/></x>.prototype = 3.141592653589793.__proto__ = eval(\"let __parent__ = @foo, constructor;\", this); this.__defineSetter__(\"prop\", Function); __parent__ = 3.141592653589793) {var __iterator__; }");
tryItOut("let(prop = [@foo.__defineSetter__(\"__noSuchMethod__\", function (__iterator__) { yield (<x><y/></x>); } ).isPrototypeOf((<y><z/></y>)[#1=[#1#]])].some(Math.pow), [, , [], ([(-1)])((<x><y/></x> -= <x><y/></x>)), constructor] = new ( \"\" )(4.)) { (this.eval(__count__)) = __count__;");
tryItOut("M:do {if(arguments) __noSuchMethod__; else  if (<x><y/></x>) {export *;var prop = <x/>, constructor = false; } } while((__parent__.constructor getter= (gc).call) && 0);");
tryItOut("/*infloop*/do {} while(\n(({a1:1}).__defineGetter__(\"__parent__\", \t(true).call)))\n");
tryItOut("L: {/*for..in*/for(constructor in null) {__noSuchMethod__, __count__;yield null; } }");
tryItOut("L:with(this){([,,]).__defineSetter__ }");
tryItOut("/*for..in*/for(var [prop, prototype] =  '' .unwatch(\"__proto__\") in false) {const __count__;(__noSuchMethod__); }");
tryItOut("if(<x><y/></x>.@*) {do {throw <x><y/></x>;export *; } while((({prop: ({a1:1}),  get __noSuchMethod__ __parent__ (__iterator__, constructor) { return true }  })) && 0);/*infloop*/while(__proto__ |= [1,,]){M:if(constructor) { if (<x><y/></x>)  else {{} }}{} } } else  if ((-0)) [[]] else do yield  /x/g ; while((0.1) && 0);");
tryItOut("with({}) for(let y in [5,6,7,8]) return (((<><x><y/></x></>).call)(1e-81.yoyo(__iterator__)));");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\",  /x/g )) { if (({constructor:  \"\" })) {}yield; else {L:if(<x/> > __iterator__) {const x::__iterator__; } else  if (((-1) for each (__count__ in -0))) return window; else const __parent__ = <y><z/></y>;{return;if(this) {const prop, __iterator__ = <x/>;; } else  if (__noSuchMethod__) let __proto__; else continue L; } }}");
tryItOut("/*infloop*/L:do {return window;{} } while([null].sort(gc)--);\n*::*;\n");
tryItOut("do {throw window; } while((*) && 0);");
tryItOut("while(( if (<x/>)) && 0){continue ;yield; }");
tryItOut("with({__iterator__: ( '' .unwatch(\"__count__\") << prop.(__proto__))})if(((<x/>).call(<x><y/></x>, ))) export *;");
tryItOut("/*infloop*/do {continue ;export *; } while(constructor((false - prop)) = new ([z1,,])());");
tryItOut("if(((1 for (x in []))).call(function ([y]) { }, )) /*for..in*/for([prototype, __proto__] = *::* in prop) {} else  if ((window\n)) {/*infloop*/do {; } while((return window)); } else {/*for..in*/()for([constructor, constructor] = constructor in [1,,]) (function ([y]) { }); }");
tryItOut("/*infloop*/for(({ __count__: __count__, __parent__: prototype })\f = eval(\"L:if((let __count__, function::__noSuchMethod__ = true , #1=[#1#])) { if (<bbb xmlns=\\\"(prototype.__count__)\\\"> </bbb>.((__iterator__ = (<x><y/></x> *=  /x/ )))) } else __noSuchMethod__ = *;\", __noSuchMethod__.eval(this)--); (new (delete <x><y/></x>)(constructor.__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].map) <  \"\" ).__lookupGetter__(\"__proto__(<x><y/></x>++)\")); (eval(\"window\", (constructor = new (<x><y/></x>)())))) M:\fswitch(<y><z/></y>.eval(this)) { default: case 5:  }");
tryItOut("with({}) ");
tryItOut("/*infloop*/M:for((p={}, (p.z = (new (Function)()))()); (__count__.(*::*)); new <><>3.141592653589793</></>((function::__count__) && @foo, __proto__)) {/*infloop*/L:do constructor; while((new <><x><y/></x></>(default: ;case 7: break; case 4: <y><z/></y>;__count__;case 5: break; __count__ = (-1), <x><y/></x>;break; case 8: case <x><y/></x>: ;))); }");
tryItOut("do <x><y/></x> while(({} % <><x><y/></x></>) && 0);");
tryItOut("/*infloop*/while( /* Comment */<x><y/></x>){export __parent__; }");
tryItOut("{try { export __proto__; } catch(prop if function(id) { return id }.__noSuchMethod__) { yield <y><z/></y>; } finally { var __parent__, prop; } let(prop, __iterator__) ((function(){export *;})()); }");
tryItOut("switch([window for each (__iterator__ in [[1]])] &= yield  /x/g ) { case (-1) === *.unwatch(\"__proto__\"): export prop; }");
tryItOut("let (__proto__ = constructor) { var __count__; }\n");
tryItOut("if((5.0000000000000000000000 .. 0/0) - ) { /x/ ;let __parent__, __noSuchMethod__; } else  if ([11,12,13,14].sort) {prop;{} } else continue L;");
tryItOut("throw constructor;");
tryItOut("with({}) yield (({__iterator__: [[1]] }));");
tryItOut("if(-3/0) {/*for..in*/for(let __noSuchMethod__ in *) { /x/g ; }let __count__ = <x><y/></x>, function::__proto__; } else  if (__noSuchMethod__) {/*infloop*/do yield; while(( \"\"  % @foo)\n); }");
tryItOut("/*infloop*/L:for(let ({ __parent__: __parent__.constructor }) = <y><z/></y>; ({ __parent__: __parent__ }) = this.__defineSetter__(\"prop\", ({}).__lookupGetter__); [<><x><y/></x></> < <><x><y/></x></>].map(new Function)) prop");
tryItOut("/*infloop*/while(( '' .hasOwnProperty(\"__parent__\"))){(this); }");
tryItOut("with((prototype.prop setter= function (__proto__, __noSuchMethod__) { yield <x><y/></x> } )){M:if(__iterator__.__count__ = 3/0) { if ( ''  for each (prop in 0/0)) throw *;} else {{} }({constructor getter: eval, __count__:  /x/g  }); }");
tryItOut("/*infloop*/while([({ __count__: ({ prototype: prototype }) })] = -this)gc()");
tryItOut("let(prop, __noSuchMethod__ = (eval(\"(prototype = *::*)\", ((constructor.__lookupGetter__(\"constructor\")) ? prototype = * : ( /* Comment */try { <x>//h\n<y/></x>; } catch(__count__) { var prop, __parent__ = undefined; }  ? undefined : 3.141592653589793))))) { let(constructor, ({ prototype: __iterator__, __iterator__: [, , prop, [__count__]] })) { export *;");
tryItOut("with(<y><z/></y>)const __iterator__, default: __proto__;case <y><z/></y>: const __proto__ = <><x><y/></x></>, prototype = <><x><y/></x></>;case this: break; case __proto__: break; (3.141592653589793);case 6: break; ;");
tryItOut("do {if(.2) yield __noSuchMethod__; else  if ( /x/g ) [,];; } while(((<><x><y/></x></> | constructor).__noSuchMethod__ = (@foo === (<x/>)).__defineGetter__(\"__noSuchMethod__\", (false++)\f.yoyo(new Object( '' , true)))) && 0);");
tryItOut("switch(__count__.__parent__ setter= *::* = <><ccc:ddd></ccc:ddd></>) { case null: Math.sin/*infloop*/for(const __iterator__; <x><y/></x>.isPrototypeOf(window); [0]) {({}).__lookupGetter__constructor, __noSuchMethod__ = -3/0; }break; default: break; case ([11,12,13,14].some): /*for..in*/for(var prop = 1e+81.throw(undefined) in false) {break ; }break;  }");
tryItOut("do (<x><y/></x>); while((new ('haha'.split)()) && 0);");
