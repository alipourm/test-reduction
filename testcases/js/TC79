
tryItOut("{var prototype, __parent__;let __count__; }");
tryItOut("L:with({__count__: constructor});");
tryItOut("M:if(this.zzz.zzz.isPrototypeOf(__count__ | window)) { if (({ set constructor(prop, __parent__) { return [, ({ __iterator__: [, ] }), ({ __iterator__: ({ __iterator__: __parent__, prop: [, , , ({ prototype: constructor }), prop] }), prototype: (prototype) })] = (return new ([1,2,3,4].slice)()) } , prototype getter: ({}).__lookupGetter__ })) /*infloop*/while(<><x><y/></x></>(<><x><y/></x></>))export *; else {/*infloop*/M:while((this ^= [[1]]))constructor = <><x><y/></x></>;\f }}");
tryItOut("{}export *;");
tryItOut("if(new function  function::__proto__ () { return  ''  } ()) { if ((0 -= <><x><y/></x></>).@foo) {yield;export __count__; }} else {return;export __iterator__; }");
tryItOut(" \"\" if( /x/g ) { if (<><x><y/></x></>) {constructor = (-0)[,] }} else {throw *::*;({}).__lookupGetter__ }");
tryItOut("/*for..in*/L:for(const [constructor, __iterator__] = this in __parent__) ");
tryItOut("L:if((-0)) export constructor;");
tryItOut("continue ");
tryItOut("let(prototype, [1,2,3,4].slice) ((function(){this.zzz.zzz;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var <><x><y/></x></>.__noSuchMethod__ in __proto__ =  '' ) {return; }");
tryItOut("if(Math.sin) {throw [[1]]; }");
tryItOut("var constructor = <x><y/></x>");
tryItOut("/*infloop*/L:for(var constructor = (([<y><z/></y> for (constructor in constructor)]).throw(({constructor: <x><y/></x>.@foo }))); [1,2,3,4].slice; case 7: while(((yield ( /* Comment */<x><y/></x>))) && 0){return  /x/g ; }break; return *;case 7: /*for..in*/for(__count__ = 5.0000000000000000000000 in @foo) {/*for..in*//* nogeckoex bug 349964 */L: for  each(var __count__ in <x><y/></x>) {( '' ); } }L: {(__parent__);M:if((function ([y]) { })()) throw __iterator__; }/*for..in*//* nogeckoex bug 349964 */ for  each(const (<y><z/></y>)(<><x><y/></x></>) in arguments) {return  \"\" ; }break; case  \"\"  .@ undefined: break; break; break ;) {if(0) { if (<x><y/></x>) {export __proto__; }} else {__noSuchMethod__; }try { return; } finally { export __count__; }  }");
tryItOut("if((this.__defineGetter__(\"__iterator__\", /a/gi))) ; else  if (__iterator__.throw(false)) {eval } else {export *;export *; }");
tryItOut("export __parent__; const __noSuchMethod__;");
tryItOut("/*infloop*/for(const __proto__; ({ __count__: [, , ] }) = ({ prop: ({ \f__proto__: ({ prop: ({ prototype: __parent__, constructor: prop }), prototype: [] }), prop: [({ constructor: __proto__ }), [function::prototype, , constructor, ]] }) }); (null @  /x/g )[*::* ^= []]) {/*infloop*/for(var __noSuchMethod__; (function::prop.prototype setter= ({}).hasOwnProperty) / prop =  /x/ ; ( /* Comment */function ([y]) { }.hasOwnProperty(\"__proto__\"))) export *; }");
tryItOut("do let <><x><y/></x></> = <x/>; while(((prop = {}.throw(<><xxx {__iterator__}={window >>> *::*} /></>))) && 0);");
tryItOut("/*infloop*/while((({a1:1}).__lookupGetter__(\"constructor\")) ? (eval(\"(yield undefined)\", <><x><y/></x></>\n)) : *.propertyIsEnumerable(\"prototype\")){/*for..in*/for(let [prototype, prop] = <y><z/></y>.__defineSetter__(\"__proto__\", function (prop, __iterator__) { break ; } ) in false) {yield <y><z/></y>; } }");
tryItOut(")");
tryItOut("if((prototype.([1,,]))) {return; } else  if (\n(prop.*)) {/*infloop*/do var __noSuchMethod__ = ({a1:1}), prop; while(false); }");
tryItOut("/*infloop*/L:for(__noSuchMethod__; prop = <x/>.unwatch(\"__noSuchMethod__\"); (true !== this.yoyo((<x><y/></x>.isPrototypeOf(<y><z/></y>))))) {( /* Comment */<x><y/></x>); }");
tryItOut("L:with({prototype: undefined = window}){/*for..in*/L:for(var [__parent__, __count__] = 0x99 in 1.2e3) {[1,2,3,4].map }return @foo; }");
tryItOut("switch(__count__.unwatch(\"__noSuchMethod__\")) { default: {throw 0x99;return *::*; }break; case [ for (constructor in case <x/>: break; export *;case 0: __parent__ = __iterator__;<x/>;break; case 9: (#1=[#1#]);break; (window);case this: yield [,,];)].sort((__proto__.__noSuchMethod__ getter= 0/0).watch): break; case __iterator__.__lookupSetter__(\"function::__proto__\"): case (({__count__: <x><y/></x>, constructor: let (__count__ = <y><z/></y>) <><x><y/></x></> })): ;break; /*infloop*/L:do const __iterator__, prototype; while(this);case (<><x><y/></x></>)[*]: break; gc()break;  }");
tryItOut("/*for..in*/for(const __parent__ in *::*) {;\f }");
tryItOut("/*infloop*/while(([] = [(this.__defineGetter__(\"__proto__\", Math.sin))].sort(function (constructor) { return __noSuchMethod__ } ))){/*infloop*/M:for(__noSuchMethod__; ({prototype setter: [1,2,3,4].slice, __count__: 1e-81 }); [this]) {let prop =  /x/g ;(false); } }\n");
tryItOut("let (__parent__) { gc() }");
tryItOut("L:switch((window(((p={}, (p.z = *)())), [,,])).yoyo(([1,2,3,4].slice)(-0))) { case delete (0/0 instanceof <x><y/></x>) % *::* || __proto__ = [[]]: L:while((<x><y/></x>) && 0){let __proto__;continue M; } }");
tryItOut("{}\nconst __proto__ = window;");
tryItOut("L:with({constructor: (((\f(yield <x/>))).call(\n<><x><y/></x></> >> ({__iterator__: null }), ))})this ^ *::*.__count__;");
tryItOut("{}");
tryItOut("{L: {export __noSuchMethod__;throw <y><z/></y>; }/*for..in*/for(const __noSuchMethod__ in ((function  __noSuchMethod__ (__proto__) { yield prototype } )((constructor.__parent__ = <x><y/></x>)))); }");
tryItOut("L:if((__count__ =  '' )) /*infloop*/for((new ('haha'.split)(__noSuchMethod__.__parent__ = undefined)); @foo - <y><z/></y>; prototype = <y><z/></y>) default: break; case (this.__defineGetter__(\"__noSuchMethod__\", function (__proto__, __parent__) '' ))(({__iterator__ getter: 'haha'.split, __parent__: (eval(\"gc()\", @foo)) })):  else {const prototype = 0.1, __proto__ = <x><y/></x>\n.2; }");
tryItOut("with({__count__: *.unwatch(\"constructor\")}){let __parent__ = <x><y/></x>, __proto__ = <><x><y/></x></>;\n\treturn <><x><y/></x></>;\n }");
tryItOut("if(let (__proto__ = (-0.constructor),  for ((p={}, (p.z =  \"\" )())['__iterator__'] in this) for (__iterator__.__count__ in false) for (prop in #1#) for (prop in <y><z/></y>) =  '' ) new (1 for (x in []))().throw(__proto__.((<y><z/></y>)))) {{}export __count__; }");
tryItOut("let(__parent__) ((function(){for(let y in []);})());");
tryItOut("switch((window & window)) { default: break; break;  }\n");
tryItOut("if(( \"\" .__lookupSetter__(\"prototype\"\r).constructor).__parent__ = prop = <x><y/></x>) {return;M:\rif(<><x><y/></x></>) {export prototype; } } else {yield  \"\" ; }");
tryItOut("/*infloop*/while((this))/*for..in*/L:for(var __proto__ in ((({}).__lookupGetter__)(window))){}");
tryItOut("if(({ __count__: ({ __count__: ({ __iterator__: ({ prop: __count__ }) }) }) }) = [11,12,13,14].map) /*for..in*/M:for(var __count__ = \ftrue in this) export constructor; else  if ((({__iterator__: set = <><x><y/></x></>[()]}))) {var __proto__, __parent__; } else switch([this]) { case (yield 1e4): break;  }");
tryItOut("if(new (true)(this.__defineSetter__(\"__count__\", eval), <><x><y/></x></>)) { if ((this.prototype = [1,,]).watch(\"__proto__\", (({})).__defineSetter__)) {throw <x><y/></x>;(<x/>); }} else {L: {} }");
tryItOut("with(<y><z/></y> > 3/0)if(@foo) { if (5.0000000000000000000000 <= <x><y/></x>) {var __iterator__;{} }} else {return;const __iterator__ = function::__proto__; }");
tryItOut("let (<x><y/></x>) { export constructor; }");
tryItOut("if(0/0) { if ([1]) yield;} else yield 1e-81;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in ({a1:1})) return <y><z/></y>;");
tryItOut("if(({ __parent__: constructor, __parent__: __proto__ }\f) = window.watch(\"__iterator__\", function ([y]) { })( \"\" .unwatch(\"prop\"), 1e81.__defineGetter__(\"delete\", (1 for (x in []))))) {const prop = this; } else  if ([[1]](<x/>, false)) prop = <y><z/></y>;");
tryItOut("M:if(yield [({__count__: (Boolean(-3/0))})].sort(/*\n*/(1 for (x in [])))) {/*infloop*/for(prototype; -3/0; []) {Math.pow }; } else const __noSuchMethod__ = window;");
tryItOut("if(<><x><y/></x></>) export __iterator__; else  if (1e+81) (<y><z/></y>); else {return;return <x><y/></x>; }");
tryItOut("if(( \"\"  < <x/>.watch(\"__iterator__\", undefined))) {return [,,];(<x/>); } else  if ((<y><z/></y> :: __proto__)) {do { } while((<>{__proto__, __parent__;var __proto__ = this, __noSuchMethod__; }</>) && 0); } else {window; }");
tryItOut("/*for..in*/for(let * = __proto__ in <x/>) ({}).watch\nif(<><x><y/></x></>()) constructor; else  if ((#0=({__proto__: *::*}))) {; } else ");
tryItOut("/*for..in*/for(const __parent__ = *::* in ({})) \nM:if(prop) yield; else {;throw {}; }");
tryItOut("try { return; } finally { this.zzz.zzz; } ");
tryItOut("let (__noSuchMethod__) { if(<>< __count__x<y></x></>) { if (<x><y/></x>) {export prop; } else var __count__ = <><x><y/></x></>, __iterator__;} }");
tryItOut("return");
tryItOut("({ constructor: prop, prototype: __proto__ })");
tryItOut("while(((null ? undefined : __noSuchMethod__ >>= (\n1.3).@*)) && 0){(3);var constructor, __proto__ =  /x/g ; }");
tryItOut("with({__count__: let (__proto__, prototype) null}){{{}; } }");
tryItOut("L:switch(false) { case 8:  }");
tryItOut("M:switch(prop = [1] & (this.propertyIsEnumerable(\"__noSuchMethod__\"))(('fafafa'.replace(/a\f/g, 'haha'.split)))) { case new ((1 for (x in [])))( \"\"  .@x:: *): /*infloop*/for(__proto__; undefined;  /x/g ) {(arguments); }break; break; case 1: throw StopIteration;with((yield (<><x><y/></x></> instanceof  in )))/*infloop*/M:for(const prototype = <><x><y/></x></>; *::*; <y><z/></y>) (4.);default: /*infloop*/while(__iterator__)(window); }");
tryItOut("{with({__count__: ([this].some(eval))})1e+81;/*for..in*/for(const __noSuchMethod__ in window) {*;const prototype, __iterator__ = undefined; } }");
tryItOut("let([]) ((function(){__noSuchMethod__ = prop;})());");
tryItOut("L:while((<><x><y/></x></>.yoyo(<><x><y/></x></>\f)\n) && 0){}");
tryItOut("{}");
tryItOut("if( '' ) {; } else Math.pow");
tryItOut("/*for..in*/for(const [__parent__, __noSuchMethod__] = this in <><x><y/></x></>) __proto__");
tryItOut("let (__proto__ = 0.1, __parent__) { let prop = 3/0, __parent__ =  /x/g ; }");
tryItOut("let (__noSuchMethod__, constructor = this) { continue L; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = <x/> > <x><y/></x> in 0.1) L:with({prop: this})(__count__)");
tryItOut("throw false\nthrow __count__;");
tryItOut("/*infloop*/for(({__proto__: __noSuchMethod__ = (), __iterator__: function(q) { return q; }(yield) >>>=(({}).hasOwnProperty)(window, window) }); <><x><y/></x></>.unwatch(\"__parent__\") instanceof (<x><y/></x>)[*]; prop+=__parent__.(window.__count__)) {/*infloop*/for(__count__; [1] .@ (eval(\"let __iterator__, __proto__;\", -3/0)); <y><z/></y> >= *::*.propertyIsEnumerable(\"constructor\")) ; }");
tryItOut("/*infloop*/for(let [({ __iterator__: prop, __parent__: [({ __parent__: ({ __parent__: ({ __count__: __count__ }), __proto__: [] }) }), , ] })] = <x/>; 0;  /x/g ) {export *;L: {yield #3={a:#3#}; }\f }");
tryItOut("M:if([[]]) { if (undefined / __iterator__, __count__.__parent__) /*infloop*/for(<><x><y/></x></>; @foo; *::*) return undefined; else var __parent__ = @foo, __proto__;}");
tryItOut("{return <x><y/></x>; const __proto__;/*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in ({})) ( get prototype __parent__ (__proto__, prop) { yield <><x><y/></x></> } ); }");
tryItOut("throw (constructor = @foo);{var __parent__ =  /x/ ; }");
tryItOut("/*for..in*/for(const function::__parent__ in <><x><y/></x></> ? new (<><x><y/></x></>.isPrototypeOf([,]))(__proto__ in true,  \"\" ) : (function  __noSuchMethod__ ()__iterator__ = false)()) /*for..in*/M:for(var __iterator__ in (((new Function(\"yield null;\")))((false if (true))))){yield; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((Function)(yield ++*::*))){throw <><x><y/></x></>; }");
tryItOut("let (__proto__ = 1e-81) { throw <x/>; }/*infloop*/L:for([] = __count__.constructor = [ \"\"  if (@foo)]; prototype >>= [[1]]; (<{prop\t}></{prop}>.(this.__defineSetter__(\"__parent__\", function (__proto__)window)))) {yield; }");
tryItOut("switch(((prop.__iterator__ = <><x><y/></x></>)[(((1 for (x in [])))())])) { default:  } const constructor;");
tryItOut("return  '' ");
tryItOut("<y><z/></y>");
tryItOut("/*for..in*/L:for([1.3, constructor] = [,,] in <x/>) {var __parent__ = window, constructor; }");
tryItOut("/*for..in*/for(const set in (({prop:  \"\" , __count__ getter: function(y) { yield y; case true: ; yield y; } }))) {__proto__ = false, __parent__ =  '' ;export prototype; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((new Function).call)( /x/ .__defineGetter__(\"__count__\", new Function)))){__parent__ = prototype, constructor = @foo;return; }");
tryItOut("/*infloop*/for(__count__ = (<><x><y/></x></>['__iterator__'] = eval(\"<><x><y/></x></>\",  /x/ ).watch(\"__proto__\", function(q) { return q; })); ({<x><y/></x> setter: __iterator__, __noSuchMethod__: <y><z/></y> }); eval(\"continue ;\", (<x><y/></x> >>>=null))) {export __noSuchMethod__;throw <x><y/></x>; }");
tryItOut("with({prototype: <y><z/></y>})const prototype =  \"\" ;");
tryItOut("do constructor; while((true) && 0);");
tryItOut("while((<x><y/></x>++.eval(this.__defineGetter__(\"constructor\", <x><y/></x>))) && 0){break ;/*infloop*/while(<><x><y/></x></> %= <x><y/></x>)yield; }");
tryItOut("/*for..in*/for(let ({ __count__: prototype, __proto__: prototype }) in ((function(q) { return q; })((function(q) { return q; }).call(<x><y/></x>, false))))return __proto__ =  /x/g \n");
tryItOut("if(prop\n) { if (Number(((uneval(<><x><y/></x></>))).constructor)) {/*infloop*/do gc() while(null); }} else {return;/*for..in*/M:for(let __iterator__ in window) return; }");
tryItOut("do var __count__ = this, __noSuchMethod__; while(((__count__.__iterator__\t = __proto__ = prototype = true)) && 0);");
tryItOut("yield  /x/g ;");
tryItOut("{if(delete 3/0) { if (true.propertyIsEnumerable(\"each\")) {gc()let __parent__, prototype = __count__; } else {export *; }}return\n }");
tryItOut("{(setter = function ([y]) { }); }");
tryItOut(" /x/ ");
tryItOut("<><x><y/></x></>;");
tryItOut("{do L: { } while(([prototype(({({ __count__: prop, constructor: __count__ }) })) for (prop in <x><y/></x>) if (({a2:z2}))]) && 0); }");
tryItOut("if(new (__proto__)(@foo)) {var prop; } else  if (*::*) export __noSuchMethod__; else {let __iterator__ = <x/>, prototype; }");
tryItOut("/*for..in*/for(const prototype = *.__defineGetter__(\"prototype\", (new Function(\";\"))) in undefined) {yield;gc() }");
tryItOut("let (__count__) { yield; }");
tryItOut("if(__count__.__parent__ getter= 'haha'.split) return prop; else  if ((((null >>>= /x/ ))[yield  \"\" ]) && __iterator__ ? ((yield *::*)) :  /x/g ) ;");
tryItOut("throw window\n");
tryItOut("let __count__");
tryItOut("if(<x><y/></x>) {; } else  if (constructor) {let __iterator__ = prop; } else let __parent__ =  /x/ ;");
tryItOut("if((function(q) { return q; })) { if (#1=(<><x><y/></x></>)) const constructor = 3;} else export *;");
tryItOut("/*infloop*/for(var __count__; <x/> * (<x/>++); (Array(([null])))) /*for..in*/L:for(let __count__ = function::__iterator__ in  /x/ ) {let __iterator__, constructor; }");
tryItOut("L:do return ((function ([y]) { })() = <><x><y/></x></>); while((((__iterator__ = prototype))[(([1,2,3,4].slice).call)]) && 0);");
tryItOut("L: /*for..in*/for(var __count__ in this) export *;");
tryItOut("throw StopIteration;");
tryItOut("if((yield <x/>)) { if (()) gc() else {Math.sinconst prop, __iterator__; }}");
tryItOut("/*infloop*/for(const __noSuchMethod__; ; ({}) ? new (function(q) { return q; })(new *::*(), 3) : @foo) {let (__count__) { {} }__iterator__ = [, , , , ]; }");
tryItOut("if(<y><z/></y>) {<x><y/></x>\nyield 1.3;\n } else return\n");
tryItOut("let (__count__, prototype) { [[]]; const __parent__; }");
tryItOut("/*infloop*/for(__parent__ = <y><z/></y>; this; __proto__) return <><x><y/></x></>\n");
tryItOut("with({constructor: <x/>.isPrototypeOf( /x/g )}){<x><y/></x>;const constructor, prototype; }");
tryItOut("/*infloop*/while(<x/>){return; }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = ([(function  __iterator__ (prototype, prototype) { yield window } ).call.propertyIsEnumerable(\"constructor\")]) = (prop.__parent__ = <><x><y/></x></>) in (this\n)) if((({a2:z2})\n)) { if (( /x/ .throw(-1))) export __proto__;} else var prototype;");
tryItOut(" \"\" ");
tryItOut("{M:switch(window) { default: ; }do throw <x><y/></x>; while((@foo) && 0); }");
tryItOut("with()yield;");
tryItOut("yield false\n{}\n");
tryItOut("if(1e+81) { if (__noSuchMethod__.__proto__ = __iterator__) return {}; else {let (__iterator__) { export __parent__; } }}");
tryItOut("if(typeof *::* .@ prototype.propertyIsEnumerable(\"prop\")) (true);");
tryItOut("{gc() }");
tryItOut("__noSuchMethod__ = prototype;");
tryItOut("do {/*infloop*/do {gc()yield; } while( /x/ );export __parent__; } while(((let (prototype = undefined, __parent__) undefined).__proto__ = ([({ set __proto__ __iterator__ (__proto__) { return <><x><y/></x></> / this }  }) for (((__count__ if (<x><y/></x>))) in new Iterator([z1,,]))])) && 0);");
tryItOut("/*infloop*/for(const __noSuchMethod__; ((yield (@foo.__defineSetter__(\"prop\", function(q) { return q; })))); prop = 1.3.__defineGetter__(\"__iterator__\", function(y) { yield y; yield __parent__;; yield y; })) switch(4.) { case (1 for (x in []))\f(({})): break;  }");
tryItOut("gc()");
tryItOut("*::*;");
tryItOut("return;window;");
tryItOut("try { let prop; } catch(__noSuchMethod__) { (<><x><y/></x></>); } ");
tryItOut("L:if(Math.sin) __parent__ =  \"\" ; else  if ( /x/g .unwatch(\"function:: /x/g \")) yield set;");
tryItOut("/*infloop*/for((__proto__) = __proto__([[]]) ? (eval(\" /x/ \", *)) : Exception(*); ({ prototype: constructor, constructor: __proto__ }) = new (<x><y/></x>)(); (__count__: *::*.*)) {throw __proto__;export __noSuchMethod__; }");
tryItOut("do gc() while((Math.sin(new String(<><x><y/></x></>, this), <x/>)) && 0);");
tryItOut("/*infloop*/for(let __noSuchMethod__; delete ({ __noSuchMethod__: ({ __count__: __proto__ }) }); [*].filter(this)) {export prototype;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in  /x/ ) <y><z/></y>");
tryItOut("export <x><y/></x>;");
tryItOut("/*infloop*/L:do {gc()\nfalse;\n/*infloop*/while(this.*)throw  /x/g ; } while((__count__));");
tryItOut("return (__noSuchMethod__) = this.__defineSetter__(\"constructor\", *::*);");
tryItOut("/*infloop*/\tfor((<y><z/></y>.propertyIsEnumerable(\"prototype\")); (-0) for each (__proto__ in <><x><y/></x></>); (__iterator__ = prop)) {break L;yield true; }");
tryItOut("({ __parent__: __iterator__, __proto__: prototype })");
tryItOut("if(#1=[#1#].__count__) { if ((<><x><y/></x></> && 1e4.valueOf(\"number\") .@*:: (yield true == true))) throw 1.3;} else {with({}) { yield  '' ; }  }");
tryItOut("while(((function  prototype (constructor) { export __proto__; } ).call((<y><z/></y> >>>=<x><y/></x>), ((yield <><x><y/></x></>)))) && 0){(*);return <><x><y/></x></>; }");
tryItOut("let (__noSuchMethod__ =  \"\" --) { ({}).hasOwnProperty }");
tryItOut("with({}) { yield null; } ");
tryItOut("if(\f*::* + <x><y/></x> &= ( /x/g  , window) << ((<x><y/></x>.__defineGetter__(\"__iterator__\", [[]])) === prop = 0/0)) const __parent__; else  if ((yield __iterator__.__parent__ = 1e+81)) (*::*);");
tryItOut("return;throw false; const __iterator__;");
tryItOut("/*for..in*/for(__noSuchMethod__ = ({constructor: <y><z/></y>\t })\t'<><x><y/></x></>) ;");
tryItOut("while(( /x/g ) && 0){{} }");
tryItOut("let (__parent__ = (function ([y]) { })() %= true, [, ({ constructor: constructor }), ] = ({ __iterator__: ({ __iterator__: ({ __noSuchMethod__: __iterator__ }), __noSuchMethod__: [prototype] }), prototype: prop }) = ({ prop: __noSuchMethod__, __count__: [__parent__, __noSuchMethod__, , ] })) { with({prop: this.__defineGetter__(\"__noSuchMethod__\", gc)}){continue M;gc() } }");
tryItOut("{; }");
tryItOut("return  /x/ ");
tryItOut("M:if(this.__defineGetter__(\"__count__\", <y><z/></y>)) {gc() } else ");
tryItOut("let (__iterator__.__count__) { (@foo / <><x><y/></x></>); }");
tryItOut("{/*for..in*/for(var [prop, __proto__] = constructor.__proto__ = <><x><y/></x></> in false) { }/*for..in*/L:for(__iterator__ = <><xxx>{prop}</xxx></> in <x/>) break ; }");
tryItOut("return null");
tryItOut("/*infloop*/for(let true; ( /* Comment */4.); prototype[*]) {export prototype;(<x/>); }");
tryItOut("L:if(constructor = ({function::__proto__ setter: function(y) { yield y; {}; yield y; }, prop setter: /a/gi }) .@ ((({constructor: (__iterator__++)})).yoyo(void <x/>))) try { try { let(prototype = ([15,16,17,18].map(eval, <><x><y/></x></>)), prototype = <y><z/></y>) { try { export *; } catch(function::__parent__) {  }  } finally { for(let y in []); }  } finally { return new ; }  else M:if((p={}, (p.z = <y><z/></y>(<><x><y/></x/*\n*/></>,  \"\" ))())) { if (yield <x><y/></x>\t) /*for..in*/for(let constructor in ((((function ([y]) { })()).watch)(<><x><y/></x></>))){gc() } else let __parent__ = [[]];}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in undefined) (<x><y/></x>);");
tryItOut("if(yield 0/0) break M; else  if (__count__ = __noSuchMethod__) {; } else gc()");
tryItOut("M:if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>)  '' ");
tryItOut("/*infloop*/for(const __count__ = @foo; 1.2e3; .2) return *;");
tryItOut("{*L: {if( '' ) return; else  if (this) {( /x/ ); }constructor = 1e-81, constructor;\f } }");
tryItOut("/*infloop*/for(let [, , , ({ __iterator__: __proto__ })] = void window; ((uneval((__iterator__ =  \"\" )))); ({ prototype: ({ __iterator__: __parent__, __parent__: prototype }) }) = ({ __iterator__: ({ prop: prototype, prop: prototype }) })) {throw *::*; }");
tryItOut("let([, [], , ({ __proto__: function(q) { return q; }\n{gc() } })]) { return;");
tryItOut("let (__iterator__ = <x><y/></x>) { yield; }");
tryItOut("/*infloop*/do @foo; while((3.141592653589793));");
tryItOut("if(window ? 0x99 : this) {const __iterator__;const prototype; }");
tryItOut("return; const prop;");
tryItOut("/*infloop*/do return #1=[#1#]; while(");
tryItOut("while((__proto__ = ({a2:z2})) && 0)export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in undefined >>= prop) {yield; }");
tryItOut("if(-1[<x><y/></x>/*\n*/]()) {export *;export __iterator__; } else {/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <><x><y/></x></>) {return <y><z/></y>; } }");
tryItOut("with(__iterator__){}");
tryItOut("/*for..in*/for(var prototype in ((Function)(eval(\"this\", window))))yield <><x><y/></x></>;");
tryItOut("let(__iterator__ = null) { break L;");
tryItOut("/*for..in*/L:for(const  /x/  in ((([,,]).watch)(true - 0.1)))let __count__, prototype;");
tryItOut("with()033\nreturn undefined;");
tryItOut("L: {(<x><y/></x>).watch }");
tryItOut("{var __iterator__ = window\n }");
tryItOut("{if(__iterator__.prop) ({ __iterator__: ({ ({ constructor: constructor })\n: prototype, __noSuchMethod__: ({ constructor: constructor, __count__: prop }) }), __count__: [, ] }) else  if ((new Array(<x><y/></x>))( /* Comment */#1#, arguments)) __iterator__ else yield <x><y/></x>\n }");
tryItOut("if((([__proto__].filter(new Function)).yoyo(__noSuchMethod__ <<= <y><z/></y>))) {return *; } else  if (new <><x><y/></x></> ,  /x/g ((function ([y]) { }))) {Math.powMath.pow }");
tryItOut("__count__;");
tryItOut("M:if([prototype].some([1,2,3,4].map)) return;");
tryItOut("/*infloop*/do {return; } while(({\t__noSuchMethod__: <><x><y/></x></>}))\t\n");
tryItOut("do ; while((#1=[#1#]) && 0);");
tryItOut("export __parent__\nyield;");
tryItOut("/*infloop*/L:while(prototype){const __proto__;yield window; }");
tryItOut("var __proto__, __iterator__ = <><x><y/></x></>;");
tryItOut("if( /x/ ) { if ( /x/g ) prototype; else throw @foo;}");
tryItOut("/*infloop*/while(({__count__: (RegExp())})){/*for..in*/for(const __proto__(@foo) in @foo) {; } }");
tryItOut("/*for..in*/for(( /x/ )( /x/ ) in ((function(q) { return q; })([window].filter(eval)))){return; }");
tryItOut("switch(undefined) { default: if(new (Math.sin)(<x/>)) (<><x><y/></x></>); else  if (#1=[[1]]) (1 for (x in []))case 7: let (constructor = prop = true, constructor) {  }/*for..in*/for(__proto__ in ((<x><y/></x>)(this.__defineGetter__(\"__proto__\", Math.sin)))){*;L: function (__count__) { yield; }  }case (((__proto__ = __noSuchMethod__))): yield\nlet {throw __iterator__; };case 8:  }");
tryItOut("if(this.__defineGetter__(\"__iterator__\", <x/>.yoyo(<x><y/></x>))) {L: {function  constructor (__parent__, __iterator__) { yield; } yield; } } else  if (([void * % window]))  else {L:with([z1,,])return <><x><y/></x></>; }");
tryItOut("{export __proto__;throw null; }");
tryItOut("with(__proto__ = [, ({ constructor: ({ constructor: ({ __noSuchMethod__: __iterator__, __noSuchMethod__: __parent__ }), constructor: ({ __noSuchMethod__: __count__ }) }) }), function::__count__]){gc() }");
tryItOut(";");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in (-1)) {}");
tryItOut("do {switch(<><x><y/></x></>) { default: let (prop, __noSuchMethod__ = ({a1:1}))//h\n { return undefined; }break;  }if(*::*) export __parent__; } while((({ __parent__: __proto__, constructor: __iterator__ }) = (delete 3) /= new function (x::__count__)<><x><y/></x></>(<><x><y/></x></>, @foo)) && 0);");
tryItOut("if((__proto__ /  /x/g )) { if (__parent__ =  /x/g ) {; } else {return  \"\" ;(null); }} const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__.prototype in prototype.__parent__ = *) ");
