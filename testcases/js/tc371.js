tryItOut("if(<x><y/></x><!--yy-->) {__proto__;yield; } else  if (this.throw(<y><z/></y>)) {yield; }");
tryItOut("if(({ prop: ({ constructor: constructor }), __noSuchMethod__: prop }) = ('fafafa'.replace(/a/g, Function))[constructor.prototype]) { if ([,,z1])  for each (__noSuchMethod__ in 1.3) for (prototype.__noSuchMethod__ in <x/>) for (constructor in this)} else yield constructor;");
tryItOut("return null; const prototype;");
tryItOut("/*for..in*/for([__parent__, __iterator__] = <x/> in undefined) ");
tryItOut("\nyield;");
tryItOut("try { return new RangeError(); } catch(__iterator__ if (function(){with({}) (<x><y/></x>);})()) { try { __parent__, __iterator__; } finally { export *;//h\n }  } finally { eval } ");
tryItOut("{();if(undefined) {yield; } else {return this;(4.); } }");
tryItOut("{ }");
tryItOut("let (prototype = <><x><y/></x></>) { yield prototype; }");
tryItOut("if(this) { if (-3/0) __noSuchMethod__ else {window;export __noSuchMethod__; }}");
tryItOut("{yield; }");
tryItOut(";/*for..in*/for(var  in ((/a/gi)(({ get __parent__ <y><z/></y>; (prop)<><x><y/></x></>, prop:  /x/  }))))yield;");
tryItOut("{var __parent__, __parent__;/*infloop*/L:for(eval(\"<><x><y/></x></>\", constructor); <x/>.__lookupGetter__(\"__count__\"); <y><z/></y>) {yield;gc() } }");
tryItOut("this.zzz.zzz;");
tryItOut("if((p={}, (p.z = eval(\" /x/g .valueOf(\\\"number\\\")\", <x><y/></x> ? prop : 1e+81))())) __noSuchMethod__ = __proto__, __parent__ =  \"\" ; else  if (({__proto__: +__iterator__})) {return;; }");
tryItOut("let (__proto__) { /*for..in*/for(const [__noSuchMethod__, prop] = <y><z/></y> in <x><y/></x>) {return; } }");
tryItOut("{/*for..in*/for(const prototype = ('haha'.split)(<x/>, [z1,,]) in  /x/g  == <x/>) {return;return <x/>; } }");
tryItOut("if((-<>yield;</>) &= this\n) { if ((undefined)) {L:with(0);return 0; } else <ccc:ddd></ccc:ddd>}");
tryItOut("M:if(({ prop: [, , prototype, ], constructor: ({ __proto__: __iterator__ }) }) = eval(\"__count__\",  \"\" )) { if (([3.141592653589793].map(({}).__lookupGetter__))) <x/>} else ;");
tryItOut("with(undefined -= <y><z/></y>)function(id) { return id };");
tryItOut("({ constructor: prop }) = this.prototype, __iterator__;");
tryItOut("/*infloop*/while(+<x><y/></x>)throw undefined;");
tryItOut("/*infloop*/for(eval(\"constructor.prop\", (#2=[<x><y/></x>])); new Error(<><x><y/></x></> - __proto__); (((1 for (x in []))).call(prop, __parent__,  \"\" .__defineGetter__(\"__noSuchMethod__\", (function::__parent__, setter).watch)))) {while(((__noSuchMethod__.__proto__)) && 0){{}\t(window); } }");
tryItOut("with(<><x><y/></x></>){gc() }");
tryItOut("__count__ = prototype;");
tryItOut("{let __proto__ = true;\nreturn;\n }");
tryItOut("this.zzz.zzz;");
tryItOut("while((let (prop, prototype = -1)  /x/ ) && 0){{export *; }while((*) && 0){} }with({__iterator__: <bbb xmlns:ccc\t=\"*::*>/{__count__}><ccc:ddd></ccc:ddd> <ccc:eee><(//ccc:eee>/bbb>}){ }");
tryItOut("break ;");
tryItOut("switch\t(window) { case this.eval(*).prop: /*infloop*/for(let [, __proto__, prop, , ] = __count__ .@ <x><y/></x>.propertyIsEnumerable(\"__count__\").__noSuchMethod__; prototype = ((1 for (x in []))).call(*,  /x/ , <x><y/></x>) .. let (__parent__) *::*; export __iterator__) {(__noSuchMethod__); }export *;if(({})) yield; else {({}).__lookupGetter__ }break; default: return; }");
tryItOut("L: L: {{} }");
tryItOut("switch(((-1) instanceof __count__)[prototype = <><x><y/></x></>]) { case 6: ({}).hasOwnPropertycase  /* Comment */<x/>: yield;break; default: [1,2,3,4].slicebreak;  }");
tryItOut("for(let y in [5,6,7,8]) throw -0\n");
tryItOut("L:with({__count__: yield window})return true;\nreturn true;\n");
tryItOut("/*infloop*/L:while( /x/ )(#1#);");
tryItOut("/*for..in*/M:for(let prototype = constructor in ( /* Comment */<><x><y/></x></>)) {/*for..in*/for(var [__noSuchMethod__, prototype] = [15,16,17,18].sort(eval, constructor, __proto__) | (this.zzz.zzz) in window.eval(*)) {throw arguments;let __proto__ = [z1], __iterator__; }yield -0.__parent__; }");
tryItOut("break L");
tryItOut(";");
tryItOut("with({__noSuchMethod__: (yyy = *)}){;with(this)break L; }");
tryItOut("return <><>[1,,]</></>;");
tryItOut("export __proto__;export __iterator__;");
tryItOut("/*for..in*/for(let __iterator__ = <><x><y/></x></>.prototype in (__parent__ =  \"\" )()) ((constructor.__count__ getter= new Function));");
tryItOut("try { for(let y in [5,6,7,8]) for(let y in []); } catch(__noSuchMethod__ if (function(){throw __count__;})()) { ({ constructor: __iterator__ }) = prototype; } catch(__count__) {  } finally { for(let y in [5,6,7,8]) let(__iterator__) { return; } ");
tryItOut("throw __proto__;\nif(__proto__.__parent__ = __proto__) break L; else ;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in [,,]) 1.2e3\n");
tryItOut("for(let y in [5,6,7,8]) let(prototype) { throw StopIteration;");
tryItOut("if(({prototype getter: new Function }).__defineSetter__(\"__noSuchMethod__\", __parent__-=(prototype.__defineGetter__(\"prototype\", function(q) { return q; })))) {export *;const __noSuchMethod__, __noSuchMethod__; }");
tryItOut("");
tryItOut("break ;");
tryItOut("break L;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in undefined) yield [z1];");
tryItOut("switch((try { yield (undefined.propertyIsEnumerable(\"constructor\")); } catch(__iterator__ if (function(){return;})()) { with({}) let __proto__ = [[1]]; } catch(prop) { try { ; } catch(prop) { {} } finally { (*::*); }  } finally {  } .__iterator__%=prop = +__iterator__)) { default: break; break; case __parent__ = ({a2:z2}).__proto__: throw @foo;break; case [15,16,17,18].some((new Function(\"__count__\")), @foo): if( /* Comment */<><x><y/></x></>) return; else  if ((^.propertyIsEnumerable(\"prototype\"))) ; else {constructor = 0.1, __proto__ = <\rx><y/></x>;gc() }if(<x/>) \f{export __noSuchMethod__;'haha'.split } else  if (<><x><y/></x></>) {{} } else var __iterator__;break; case this: break;  }");
tryItOut("if(this.zzz.zzz) {yield <><x><y/></x></>; } else  if ((yield @foo = <><x><y/></x></>))  /x/g  else {(this); }");
tryItOut("let ([prop, __iterator__, ] = __iterator__) { continue L; }");
tryItOut("if(<><x><y/></x></> ^= <><x><y/></x></>\f) { if ([]) try { let __count__ = <x/>; } finally { gc() } } else {gc() }");
tryItOut("/*for..in*/for(var prop = () in (this.__defineGetter__(\"__count__\", ('haha'.split).call))) yield void constructor;");
tryItOut("if(<x/>.__lookupSetter__(\"__count__\") .@x:: \t__parent__ = __parent__) {let __count__ = @foo; } else const __iterator__ = *;");
tryItOut("constructor: [[1]]\n/*for..in*/for(const prop in (([1,2,3,4].map)(<><x><y/></x></>)))export *;\n");
tryItOut("if(__iterator__ = prototype) {{yield <><x><y/></x></>; } } else if(<x/>.watch(\"__count__\",  /x/g )) {yield #1=[#1#];throw @foo; } else  if (__iterator__ = (0.1);) {; } else export *;");
tryItOut("for(let y in [5,6,7,8]) for(let y in []);");
tryItOut("var constructor, __noSuchMethod__ =  \"\" ;\n\n");
tryItOut("/*infloop*/L:for(constructor = (var prototype = 4., __noSuchMethod__ =  ''  >>>=<><x><y/></x></>.__lookupSetter__(\"constructor\")); (( \"\" )(<x/>, <x/>).hasOwnProperty(\"__iterator__\")); constructor.([]).unwatch(\"__proto__\").*) /*for..in*/for(__iterator__ = this ? 0x99 : * in  /x/g ) {let x::constructor = __proto__, prototype = __count__; }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("/*for..in*/M:for(let __parent__ = __noSuchMethod__ in undefined) continue ;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/while(<x/>){let prototype; }");
tryItOut("M:if(([15,16,17,18].sort((1 for (x in [])), [15,16,17,18].sort(@foo, void <y><z/></y>)))) /*for..in*/for(let __noSuchMethod__ in *) {return <x><y/></x>;(new Function(\"const __noSuchMethod__;\")) } else yield; const __proto__;");
tryItOut("function (constructor) { return  typeof  } ");
tryItOut("L:while((((function(y) { yield y; return;; yield y; }) == prototype = <x/>)) && 0)let (__iterator__) { if((({ set __count__() { return * }  }))) continue ; else  if (__proto__.prop) const delete = *::*; else export __iterator__; }");
tryItOut("");
tryItOut("/*infloop*/L:for(constructor; ({ __proto__: constructor, constructor: __iterator__ }) = Function(<x><y/></x>, this); new ('haha'.split)(#1#, 0/0)(0.1)) let (__iterator__ = *, prop) { gc() } const prop;");
tryItOut("if(( /x/  if (<x><y/></x>))) (this); else  if (new (this)(*::*)) {<><x><y/></x></>(<x><y/></x>).__defineSetter__ }");
tryItOut("let ([constructor, x::prop, , constructor]) { return; }");
tryItOut("do gc() while((@foo) && 0);");
tryItOut("L: {L:while((*.__defineSetter__(\"__noSuchMethod__\", (*).watch)) && 0){/*infloop*/while(false){var prop = 0.1, __proto__; } }return;\t }");
tryItOut("");
tryItOut("L: /*for..in*/M:for(let prop in ((('haha'.split).apply)((function ([y]) { })())))return @foo;");
tryItOut("L:do ; while(( '' (null)) && 0);");
tryItOut("try { export *; } catch(prototype if window.__count__) { var prop, __iterator__ = undefined; } catch(constructor(undefined) if (function(){let __iterator__ = <x><y/></x>, __noSuchMethod__;})()) { #3={a:#3#}; } catch(__parent__ if (function  __iterator__ (prototype) { yield -0 } )) { throw <><x><y/></x></>; } catch(__proto__ if (new Number(constructor))) { break M; } catch(__noSuchMethod__) { yield __proto__; } finally { export *; } ");
tryItOut("/*infloop*/for(__proto__ = (uneval((( /x/g )))); this.__defineSetter__(\"constructor\", new Function); __proto__.\ftrue getter= Math.pow)  for each (__noSuchMethod__ in __count__) for (__iterator__ in .2)\t\n");
tryItOut("{/*infloop*/for(prototype = *.__lookupSetter__(\"prop\").__defineGetter__(\"prop\", ((*::*)).__defineSetter__); (<x><y/></x>.valueOf(\"number\")); true) return; }");
tryItOut("/*for..in*/for(const __parent__ = 5.0000000000000000000000 in 1e81) throw this;");
tryItOut("/*infloop*/for(const ({ __proto__: prop }) = <x><y/></x>.hasOwnProperty(\"__iterator__\"); __parent__ = <x><y/></x>; ((function  x::__parent__ (__proto__) { return <><x><y/></x></> } )(\nnull, <x><y/></x>))) {L: {var constructor = this; } }");
tryItOut("M:if(((([<><x><y/></x></> for each (__noSuchMethod__ in arguments)]) for each (__iterator__ in *) if (*)).isPrototypeOf(((__parent__.__proto__) & constructor = function::__noSuchMethod__)))) ([,]); else  if (new ( /x/g )(<x/>, 0x99)) return; else {{export __count__; } }");
tryItOut("with({prop: <x><y/></x> -  \"\" })let __count__ = <y><z/></y>;");
tryItOut("if((this;.watch(\"__iterator__\", function(y) { yield y; break ;; yield y; }))) {<><x><y/></x></>;{throw <><x><y/></x></>; }\n }");
tryItOut("{with({__iterator__: __proto__}){var constructor =  /x/ , prop; }/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = ({a1:1}) in window) {*::*;continue ; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in [,,z1]) yield;");
tryItOut("/*infloop*/do {break ; } while( ''  ?  \"\"  : __count__);");
tryItOut("/*for..in*/__parent__\nwith({__parent__: this.zzz.zzz ? (!<x/>) : @foo}){return;yield this; }");
tryItOut("__proto__ = constructor;");
tryItOut("export __proto__;");
tryItOut("/*infloop*/prop");
tryItOut("do yield; while(((undefined instanceof @foo.throw(( /* Comment */({a1:1}))))) && 0);");
tryItOut("/*infloop*//*\n*/do with({prop: <><x><y/></x></>[[,,z1]]})yield false; while(--[[,,]]);");
tryItOut("with(Function(false)){continue M;gc() }");
tryItOut("if(yield 1e4) {window; } else  if \n(*) {yield; } else {yield <y><z/></y>;__parent__ = prototype,  = <x/>; }");
tryItOut("/*infloop*/M:do return prototype =  \"\" ; while((uneval(constructor = __count__)));");
tryItOut("for(let y in [5,6,7,8]) if(<x/>) { if (@foo) {__count__{} }} else {; }");
tryItOut("/*for..in*/for(var [prototype, __count__] = (<y><z/></y>++.@*) in <x><y/></x>.throw(prototype).watch(\"__count__\", Math.pow)) {({ __parent__: __noSuchMethod__ }) }");
tryItOut("{/*infloop*/do {return this;{} } while(RangeError()); }");
tryItOut("return\n");
tryItOut("do throw __count__; while((~<><x><y/></x></>) && 0);");
tryItOut("var __proto__ = __parent__, __count__ =  /x/g ;");
tryItOut("__parent__ = prop;");
tryItOut("if(this >> *::*) { if (<><x><y/></x></> <= true.__iterator__) <x/>; else <><x><y/></x></>}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop.prop in (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.([<><x><y/></x></>]\t))) {/*for..in*/for(const [__parent__, function::prop] = <x><y/></x> , @foo in 'fafafa'.replace(/a/g, gc)) \f{__noSuchMethod__ = false }3; }");
tryItOut("if(new Boolean((p={}, (p.z = <><x><y/></x></>.valueOf(\"number\")[(*::*.__lookupGetter__(\"prototype\"))])()), __iterator__.__iterator__+=this.__defineGetter__(\"__count__\", gc))) { if (__proto__ = <x/>.unwatch(\"prototype\")) {prop, __noSuchMethod__ =  \"\" ; }} else {__parent__/*infloop*/do {yield <x/>;return; } while(<y><z/></y>); }");
tryItOut("{}\n");
tryItOut("/*for..in*/L:for(var (__iterator__)(window) in ((window)(constructor =  /x/ ))){throw false; }");
tryItOut("/*for..in*/for(var constructor = <y><z/></y> in window) yield __noSuchMethod__;");
tryItOut("M:with({__proto__: <x><y/></x>})var __noSuchMethod__ =  \"\" , __count__;");
tryItOut("/*infloop*/do return; while(prototype+=window &= 033);");
tryItOut("/*for..in*/M:for(let __count__ = __noSuchMethod__ = __proto__ in (__iterator__ = -1)) {yield;/*infloop*/for(constructor; \n(++ >>>=window); ((p={}, (p.z =  '' )()) ? false : [15,16,17,18].map(Function, @foo))) continue L; }");
tryItOut("let (__count__, __iterator__) { /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in this) let __noSuchMethod__; }");
tryItOut("do {export __noSuchMethod__; } while((true) && 0);");
tryItOut("while(((true | *).__iterator__) && 0)let (__noSuchMethod__ = typeof <x><y/></x>) { ; }");
tryItOut("if((({}).hasOwnProperty(*, __parent__))) const <><x><y/\t></x></>; else throw (function ([y]) { })();");
tryItOut("__proto__ = <x><y/></x>, __parent__ = @foo\nexport prop;");
tryItOut("{{} }\n/*for..in*/for(let prop in *::*) try { export *; } catch(prototype if <><x><y/></x></>) { yield; } catch(__noSuchMethod__) { ({}); } ");
tryItOut("L: {{break L;yield null; } }");
tryItOut("/*infloop*/L:for(let (<x><y/></x>.(<x><y/></x>))().__proto__; ((__proto__ = <><x><y/></x></>).watch(\"__proto__\", *::*)); typeof true) {/*for..in*/M:for(let __iterator__ = (prop-=(let prototype, __count__; for each (constructor in ({a1:1}))).hasOwnProperty(\"__noSuchMethod__\")) in ([(<x><y/></x>.__defineSetter__(\"__parent__\", 'haha'.split)) for each (__parent__ in [,,]) if (<x><y/></x>)])) /*for..in*/L:for(prototype([,]) in  \"\" ) ;__proto__; }");
tryItOut("for(let y in []);");
tryItOut("return;throw prototype;");
tryItOut("/*infloop*/L:for(let prototype; window; <><x><y/></x></>++) {throw  /x/ ; }throw #1#;");
tryItOut("while((*.throw(@foo)) && 0){export *; const __count__;return 0x99; }");
tryItOut("yield <><x><y/></x></>");
tryItOut("let(prop = <x/>) { gc()");
tryItOut("/*for..in*/for(let __proto__ in ((function(q) { return q; })(({ __noSuchMethod__: ({ constructor: x::__iterator__ }), __count__: ({ __parent__: __parent__ }) }) = window(null))))break ;");
tryItOut("/*infloop*/while(prototype = 1e+81)/*for..in*/M:for(const <><x><y/></x></> in ((({}).hasOwnProperty)(new <x><y/></x>))){return; }");
tryItOut("L: {<><x><y/></x></>;return [,,z1]; }");
tryItOut("/*infloop*/M:for(__iterator__ = (__noSuchMethod__ = <x/>); this ^= (uneval(window)).unwatch(\"__parent__\"); (constructor)(new Math.pow(new RegExp(__count__)), eval(\"const function::__noSuchMethod__ = null;\", 3.141592653589793))) {return *::* const constructor; }");
tryItOut("if(({ get constructor __parent__ ()window })) { if ((true.propertyIsEnumerable(\"__parent__\"))) {(#1#); }} else {export *;yield 1.2e3; }M:do __parent__ = try { {} } catch(constructor) { return; } finally { ; } , __count__ = window;\f while(([[]]) && 0);");
tryItOut("/*infloop*/for(<y><z/></y>; (undefined.watch(\"constructor\", 'haha'.split)); *.prop) ");
tryItOut("/*for..in*/for(let __iterator__ in (((1 for (x in [])))(5.0000000000000000000000)))const constructor;");
tryItOut("__count__ = prop;");
tryItOut("while(((Function((<x><y/></x>.(<x><y/></x>)), 5.0000000000000000000000))) && 0){throw *; }");
tryItOut("/*infloop*/do {yield *::*; } while((({constructor: #1=('fafafa'.replace(/a/g, (<><x><y/><\f/x></>).__defineSetter__))})));");
tryItOut("M:while((prototype = @foo) && 0)throw undefined;");
tryItOut("L:with({constructor: this.__defineSetter__(\"constructor\",  '' )})L:while((true) && 0)var __iterator__ =  /x/g , prototype;");
tryItOut("L:if(new ((this for each (__count__ in <x><y/></x>)))((<><x><y/></x></>()), ((function ([y]) { })() & this))) if(<><x><y/></x></>) { if ((-0)) {yield 1.3;\f }} else break L; else export *;");
tryItOut("if(this) { if (((<x><y/></x>)[<x><y/></x>]).__lookupSetter__(\"__proto__\").__noSuchMethod__ = [11,12,13,14].map) (<x><y/></x>);} else {if(arguments) { if (__count__) {yield; } else {return;({}).__lookupGetter__ }} }");
tryItOut("L:if((null.@foo)) { if ((yield .2)) ;} else (__noSuchMethod__);");
tryItOut("with({__parent__: function () { return <x><y/></x> } })return undefined;");
tryItOut("{while((([this])) && 0)with(<x/>)var __parent__, constructor = 0; }");
tryItOut("return;throw (-0);");
tryItOut("yield;\nreturn;\n");
tryItOut("M:with({prop: #2=[yield 1e+81]}){export __parent__;M:if(({ get __proto__ constructor (__noSuchMethod__, __proto__) { yield this } ,  set __parent__ x::prop (prototype) {  }  })) let (__noSuchMethod__ = __proto__, __iterator__) { const __iterator__ =  '' , __count__ =  /x/g ; } else  if () {return 033;/*for..in*/for(var __proto__ in ((({a1:1}))([[1]])))yield; } }");
tryItOut("with({}) export __count__;");
tryItOut("/*infloop*/do {throw [z1,,];throw @foo; } while(false);");
tryItOut("return __parent__\n");
tryItOut("__iterator__");
tryItOut(" const each;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<x/> in this) __noSuchMethod__");
tryItOut("{return <><x><y/></x></>; }");
tryItOut("if((((yield <x><y/></x>)) %= window .. window - true)) {while((<x/> *  /x/ ) && 0)\twith({prop: <><x><y/></x></> >= <y><z/></y>})with({constructor: <x/>})export *; } else  if ((window.*).@foo) export *;");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/L:for(__iterator__( '' .__lookupGetter__(\"__iterator__\").__lookupSetter__(\"__noSuchMethod__\")) in ([] = yield  /x/g )) {prototype }");
tryItOut("/*for..in*/for(var (({}))(function(id) { return id }) in eval(\"prototype\", @foo)) ");
tryItOut("with(__proto__ = (function::constructor = <y><z/></y>)[[,]]){<x/>; }");
tryItOut("if(~window === <><x><y/></x></>) export *;");
tryItOut("{ }");
tryItOut("{(@foo);while(((__proto__ = <x><y/></x>)[(new <x/>(<x/>,  \"\" ))]) && 0){(<x><y/></x>); } }");
tryItOut("/*infloop*/for((__count__-=false.eval([this].some(function(q) { return q; }))); new /*\n*/(<y><z/></y>)(__parent__, *); __count__ = new ((constructor))\n(window <<= <x/>)) {{gc(); }var prop = false; const constructor; }");
tryItOut("/*for..in*/for(let __parent__ in undefined) {*::*;var __iterator__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/for(var prop in 0/0) export *;");
tryItOut("M:with({constructor: +(function ([y]) { })()});");
tryItOut("if(({__iterator__: function(id) { return id } })) {return 0.1;return  /x/g ; }");
tryItOut("do M:\tif(<x><y/></x>) {#1=[#1#];<><x><y/></x></>; } else  if (undefined) throw *; while(( /x/ .@*) && 0);");
tryItOut("throw constructor;");
tryItOut("{function  function::__count__ () { return (/a/gi).call } yield;\nbreak L;\n }");
tryItOut("{ }");
tryItOut("L:with( '' )");
tryItOut("/*infloop*/while(new Error(<><x><y/></x></>, [,,z1])){gclet __parent__ = <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__ in Math.sin) {var constructor = 1.3, __iterator__ = null;yield @foo; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in <><x><y/></x></>.isPrototypeOf(__proto__)) /*for..in*/for(__noSuchMethod__ in .2) {}");
tryItOut("/*for..in*/for(let [__parent__, __noSuchMethod__] = __parent__ =  /x/g  * export prototype in [11,12,13,14].some) {/*for..in*/M:for(var __noSuchMethod__ in ((__noSuchMethod__)(prop))); }");
tryItOut("{gc()break L; }\nL:if((<bbb xmlns=\"[11,12,13,14].sort\"><!--yy--></bbb>).call(@foo, <><x><y/></x></>)) export __parent__\n");
tryItOut("let __parent__, __parent__\nL:with({__iterator__: 3/0})prototype");
tryItOut("/*infloop*/M:for('fafafa'.replace(/a/g, 'haha'.split); __proto__; <bbb xmlns=\"(function (__noSuchMethod__, prototype) { yield <x><y/></x> } ).call(false, )\"> </bbb>) {var prop = function(id) { return id }, prop; } const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in @foo++) {{}if(<y><z/></y>) { if ('fafafa'.replace(/a/g, gc)) {continue L;return; }} else {constructor = arguments, __count__ = *;__iterator__ = this; } }");
tryItOut("prop.__iterator__ = constructor");
tryItOut("/*for..in*/for(let constructor in null.watch(\"__noSuchMethod__\", this) + [1,2,3,4].map) __iterator__;(1 for (x in []))");
tryItOut("/*infloop*/for(prop; [__count__, ({ prototype: __noSuchMethod__,  /x/g : __count__ }), ] = window.__parent__; __count__.__proto__ = prop: <y><z/></y> |= (<><x><y/></x></> .. <x/>)) /*infloop*/do {export *; } while(__parent__.__parent__ getter= function (__count__, constructor)<><x><y/></x></>);");
tryItOut("/*infloop*/do M:if(__noSuchMethod__ = <x><y/></x>) {{}export *; } else  if (((yield this))) {((window).watch).callyield; } while(<y><z/></y>);");
tryItOut("L:if(<x/>) {{constructor, prop = <><x><y/></x></>; }<><x><y/></x></> } else  if ((__noSuchMethod__ =  /x/g  ?  '' .*.isPrototypeOf(({})) : ({ constructor: prop, __proto__: prop }) = 1.3)) let (function::__parent__ = *::*, prop =  '' ) { yield; }");
tryItOut("if(({a1:1})) {export *;Math.pow } else  if (this) {const __iterator__;(false); } else var __noSuchMethod__\nconst __count__ = window, __count__ = true;");
tryItOut("with({}) break M;");
tryItOut("let constructor = <><x><y/></x></>, __parent__ = <><x><y/></x></>\n");
tryItOut("return;");
tryItOut("do (this); while((Date()) && 0);");
tryItOut("{(3--).@foo; }");
tryItOut("/*infloop*/do ; while(((p={}, (p.z = <x><y/><\t/x>)())));");
tryItOut("/*for..in*/for([__parent__, constructor] = window in *::*) gc() const __proto__.constructor;");
tryItOut("M:switch( /* Comment */*) { default: this.zzz.zzz;/*for..in*/for(__noSuchMethod__ = try { return; } catch(__count__ if (new Error())) { return; } catch(__count__ if (function () { const prototype = #3={a:#3#}; } ).call(<><x><y/></x></>, )) { let(constructor) { return <> { throw undefined; } </>; } catch(__parent__ if (function(){__noSuchMethod__.__noSuchMethod__ = prop;})()) { prototype = __proto__; } .__iterator__\f in this.zzz.zzz) {continue ;export *; } }");
tryItOut("if([[1]]) {<y><z/></y>\n{} } else  if (*) const __noSuchMethod__ = window;");
tryItOut("L:if((<><x><y/></x></>\n)) return  /x/g ; else  if (prop.__noSuchMethod__ = <><x><y/></x></>) {prop;\f }\n");
tryItOut("if(__count__.__iterator__ = <y><z/></y>) { if (<x><y/></x> >> 3.141592653589793) {export *;return window; } else M:while((__proto__) && 0)(1 for (x in []))}");
tryItOut("/*for..in*/L:for(const prototype in (([])(<y><z/></y>)))return []\n(<y><z/></y>);");
tryItOut("/*for..in*/for(var [constructor, __count__] = this.__defineGetter__(\"__count__\", ({}).hasOwnProperty) in ((x::constructor\n) /= let (constructor, __noSuchMethod__) 3)[this.__defineGetter__(\"prop\", (( \"\" ).__defineSetter__).call).valueOf(\"number\")]) /*for..in*/L:for(constructor in *.@foo) {return;export prototype; }");
