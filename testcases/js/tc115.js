tryItOut("/*for..in*/for(constructor in ((function () { yield; } )(window)))var __count__, __count__");
tryItOut("/*infloop*/for(let __proto__ = <><x><y/></x></>; 3/0; <x><y/></x>) return;");
tryItOut("var __iterator__; const prop;");
tryItOut("M:with(null){;yield; }");
tryItOut("do {/*infloop*/do {} while(<><bbb xmlns:ccc=\"<><x><y/></x></>.yoyo(<y><z/></y>)\"><ccc:eee></ccc:eee></bbb></>); } while((++( /x/g .prototype = (-1))) && 0);");
tryItOut("let (__parent__, __count__ = this) { export *; }\n(*);\n\n/*for..in*/for(constructor = *::* for each (constructor in window) in false) {{} }");
tryItOut("/*for..in*/for(let prototype = *::*.__lookupSetter__(\"prototype\") in window) continue M<ccc:ddd><!--yy--></ccc:ddd>; with({}) { throw __iterator__; }  \n");
tryItOut("/*infloop*/while((void <><x><y/></x></> instanceof window))/*infloop*/for(({ x::__noSuchMethod__: __iterator__ }) = (<><x><y/></x></> & <x><y/></x>); yield -1; (#1=[#1#])[3]) ;");
tryItOut("/*for..in*/for(let [__iterator__, __proto__] = 0 in prototype) function ()true");
tryItOut("/*infloop*/for( /x/g ; prototype; this) function ([y]) { };");
tryItOut("{let __proto__; }");
tryItOut("throw StopIteration;");
tryItOut("gc()\n{/*infloop*/L:for(constructor; <x><y/></x>; <><x><y/></x></>) throw [,,z1];return; }\n");
tryItOut("let ([__proto__, , [], __proto__, ] = (this += 'fafafa'.replace(/a/g, function(q) { return q; })[<x><y/></x> for (prop in  \"\" )]), __count__) { if(({__iterator__: <y><z/></y>})) return  /x/ ; else  if ([<x/>].map(/a/gi)) {yield;export \r*; } }");
tryItOut("export __count__\n");
tryItOut("do constructor; while((<x/>) && 0);");
tryItOut("/*for..in*/M:for(var [__iterator__, __proto__] = (undefined.propertyIsEnumerable(\"@foo\") *= (new ((3/0).__defineSetter__)(this))) in  \"\"  + *) /*infloop*/L:for(const prototype = __iterator__; window; __proto__) {; }");
tryItOut("__parent__ = __iterator__;");
tryItOut("; const __noSuchMethod__;");
tryItOut("{let prototype = ({}); }");
tryItOut("/*infloop*/while(null)L: {; }");
tryItOut("");
tryItOut("window");
tryItOut(";/*for..in*/L:for(const prop in ((function(y) { yield y; return;; yield y; })(<><x><y/></x></>))){(<y><z/></y>); }");
tryItOut("/*for..in*/L:for(__parent__ in ((Function)((this--)))){export *; }");
tryItOut("if((<x><y/></x> <<= 1.3)) {export *;return; }");
tryItOut("L:switch(([* if (<y><z/></y>)])) { case 5: export *; const prototype;break; default: break; evalbreak; case #1#: let __count__, __parent__ = [z1,,];break; case 7: /*infloop*/for( /x/ ; <><x><y/></x></>;  /x/g ) {return constructor; } }");
tryItOut("if(*::*) ({ __count__: constructor, __noSuchMethod__: prop }) = ({ set prop()@foo })\f");
tryItOut("yield *;var prototype;");
tryItOut("if(this.zzz.zzz) {} else {yield -0; }");
tryItOut("var __noSuchMethod__ = *;");
tryItOut("L:if((<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.eval((new window(<x><y/></x>, <y><z/></y>))))) {/*infloop*/M:while(prototype = .2.watch(\"__count__\", /a/gi)){while((<x/> instanceof [z1,,]) && 0){if(<x><y/></x>) {const prototype = function::prototype, __proto__; } else  if (<x/>) ; }export *; } }");
tryItOut("if(({ set prototype(__parent__) if ( \"\" ) })) {*::*;/*infloop*/while(__parent__)break ; } else {yield <x><y/></x>;return <x><y/></x>; }");
tryItOut("L: {gc() }");
tryItOut("/*infloop*/do {var __proto__, __count__; } while( /x/g );");
tryItOut("try { /*for..in*/for(let [__iterator__, prototype] = (__count__ = constructor) in constructor) {throw  \"\" ;export constructor; } } catch(__iterator__ if (( \"\"  for (__parent__ in 3.141592653589793)))) { let(({ constructor: ({ prototype: x::prop }) }) = (({ __proto__: prop }) = (false)(<x><y/></x>))) ((function(){return;})()); } finally { for(let y in [5,6,7,8]) throw StopIteration; } ");
tryItOut("/*for..in*/for(const __noSuchMethod__ in  \"\" ) continue L;");
tryItOut("export __iterator__;\n{ }\n");
tryItOut("{gc()if( /x/g \f) {export *;{} } else  if (prop) {([[]]); } else ((1 for (x in []))).call }");
tryItOut("switch(5.0000000000000000000000) { case 4: break; default: break; <><x><y/></x></> }");
tryItOut("let(__iterator__ = __parent__-=<x><y/></x>, __parent__) ((function(){for(let y in []);})());");
tryItOut("L:switch(constructor) { default: break;  }");
tryItOut("var prop, __iterator__;");
tryItOut("5");
tryItOut("with({prop: this.__defineSetter__(\"__iterator__\", function  __parent__ (__noSuchMethod__) { yield constructor } )}){/*infloop*/do __proto__; while(1e4); }");
tryItOut("(false);");
tryItOut("{;continue ; }");
tryItOut("( /x/  +  \"\" )\nthrow *::*;");
tryItOut("if(<><x><y/></x></>[ /x/ ]) {gc(){} } else  if (({__noSuchMethod__: 3.141592653589793,  set __proto__(__count__)window })) {continue L;{} }");
tryItOut("if('fafafa'.replace(/a/g, function (__parent__) { continue M; } )) { if (false.throw((({}) ? __iterator__ : <x/>))) {gc() }} else break L;");
tryItOut("for(let y in []);");
tryItOut("return *::*\n\n/*for..in*/for(const __noSuchMethod__ in <><x><y/></x></>) export *;{'haha'.split }");
tryItOut("/*for..in*/for(let (function (constructor, [, ]) { __count__ } ).apply\t in (uneval((eval(\"undefined\", <x><y/></x>))))) while((__proto__ = <x/>) && 0)yield <x><y/></x>;");
tryItOut("let (__proto__ =  \"\" , prototype) { [11,12,13,14].filter }\n");
tryItOut("while((prop = <y><z/></y>) && 0);");
tryItOut("with({}) { ; } ");
tryItOut("if([({ constructor: prop, __parent__: ({ __noSuchMethod__: ({ __count__: [constructor], prototype: prototype }) }) }), , ({ prototype: ({ __parent__: [, ({ __parent__: __proto__, __count__: ({ __parent__: __count__, __proto__: __noSuchMethod__//h\n }) }), (\t{ __noSuchMethod__.__noSuchMethod__: ({ __noSuchMethod__: constructor }) }), ] }) }), ] = <><x><y/></x></> |= 0.1) {while((({ x::__iterator__: __proto__ }) = ({ __proto__: __noSuchMethod__, \fprop: __count__ })) && 0){yield window;{} }if(function ([y]) { }) { if ((function ([y]) { })()) Math.sin else return <><x><y/></x></>;\n{}\n} }");
tryItOut("L:if(( /* Comment */var constructor = -3/0;) != new ({})(<><x><y/></x></>)) {/*for..in*/for(const prototype in  '' ) var constructor;let prop, prop; }");
tryItOut("return;");
tryItOut("constructor = __parent__;");
tryItOut("/*for..in*/for(const (constructor = function::constructor)(__noSuchMethod__ && <x><y/></x>) in ((Function)(<x/>))){(<x><y/></x>).__defineSetter__ }");
tryItOut("/*infloop*/M:do return; while(<x><y/></x>);");
tryItOut("thiswith({__proto__:  ^= -0.valueOf(\"number\")}){const __noSuchMethod__; }");
tryItOut("/*infloop*/do var prop = <><x><y/></x></>, constructor = __parent__ = <><x><y/></x></>, __count__ = [z1]; while((p={}, (p.z = <x><y/></x><x><y/></x><!--yy-->.propertyIsEnumerable(\"__parent__\").throw(('fafafa'.replace(/a/g, (new Function(\"\"))))))()));");
tryItOut("");
tryItOut("function  prop ()0{}");
tryItOut("if(prototype setter: (1 for (x in [])) :: [z1]) { if (__parent__.prototype = false) {let prototype = true; }} else {export *; }");
tryItOut("/*for..in*/for(var constructor = (<x/>)[<x><y/></x>] ? Boolean() : [//h\n[,,]].filter(function (__noSuchMethod__, __noSuchMethod__) { //h\nyield; } ) in (<x><y/><\t/x>.watch(\"__noSuchMethod__\", Math.pow))) export *;");
tryItOut("prop, __parent__ = true;\nexport *;\n\f");
tryItOut("/*infloop*/do {yield; } while((constructor.__proto__.prop = yield ((<x><y/></x>)())));");
tryItOut("");
tryItOut("(<y><z/></y>);switch(<x><y/></x>) { default: if(false) return __parent__;break;  }");
tryItOut("export *;throw #1#;");
tryItOut("M:with({__parent__: this}){gc() }");
tryItOut("/*infloop*/do __iterator__ while(__iterator__);");
tryItOut("export *;");
tryItOut("/*infloop*/for(const __noSuchMethod__; __proto__ = this.__defineSetter__(\"prototype\", <x/>); void {}) {const prop, __iterator__ = null;/*infloop*/try { try { export *; } catch(prototype) { let constructor; } finally { yield 0/0; }  } catch(__count__ if (function(){for(let y in []);})()) { let(__parent__, __proto__ = <y><z/></y>) { var __count__, constructor = -1; } finally { {} } for(const __iterator__; *::*; \f0/0) {gc() } }");
tryItOut("let (constructor = ~prop, prop) {  }");
tryItOut("{(033); }");
tryItOut("let (\f__proto__ =  /x/g , __iterator__) { throw *::*; }");
tryItOut("while((((({}).hasOwnProperty).call([], <xxx>{prop}</xxx>,  '' ))) && 0)(<x><y/></x>);");
tryItOut("if(<></>) { if (throw <x><y/></x> ? (constructor) : this.zzz.zzz) {/*infloop*/while( '' ){{} } } else <x/>;}");
tryItOut("if(__count__.prototype getter= (gc).apply) { if (#3={a:#3#}.@*) eval else eval}");
tryItOut("/*infloop*/for(const __iterator__; ++*.eval([15,16,17,18].filter(/a/gi, window)); \n<><x><y/></x></> *= \n*::*) /*infloop*/do {gc(){} } while(true);");
tryItOut("if(yield (new (<y><z/></y>)(<x><y/></x>, @foo))) { if ((({__iterator__: <y><z/></y>,  get __count__ prototype () { export *; }  }))) {gc() } else throw __noSuchMethod__;}");
tryItOut("throw StopIteration;");
tryItOut("if(({__parent__ getter:  '' ,  set set(prototype) { /*for..in*/for(const <y><z/></y> in (((function ([y]) { })())(<x><y/></x>)))<><x><y/></x></>; }  })) if((prototype =  /x/ )) { if ( \"\"  ^= <x/>) {{} } else yield;} else  if (<><xxx>{constructor}</xxx></>) M:switch(prop) { case 6: throw true; } else {constructor{} }");
tryItOut("return \n.2;");
tryItOut("/*for..in*/M:for(var [3.141592653589793, __proto__] =  /x/  in false) export *;");
tryItOut("M:switch(Object((((Function(<><x><y/></x></>) == ))(eval(\"this\", prototype.__proto__.unwatch(\"constructor\")), (\t(eval(\"null\", <y><z/></y>)).isPrototypeOf((({prop: window })))))), (({ prototype: prop, delete: __noSuchMethod__ }) = (@foo) for each (__count__ in .2)))) { case 6: break; default: case (gc()): break;  }");
tryItOut("/*infloop*/L:while((<x><y/></x>.valueOf(\"number\")))return;");
tryItOut("/*for..in*/for(let __iterator__ in <x/>) /*infloop*/for(var ({ __iterator__: __parent__ }) = (/a/gi)(true); new (({}))(); ({constructor: __iterator__, __noSuchMethod__ setter: 1e81 })) throw *;");
tryItOut("const __proto__;");
tryItOut("__parent__");
tryItOut("switch(new (*)(<y><z/></y>,  '' ) if (*.yoyo(__iterator__))) { default: M:if(__noSuchMethod__ = this.valueOf(\"number\")) throw [[1]]; else  if (<x/> for each (__noSuchMethod__ in prototype)) break M; else __parent__ = <><x><y/></x></>; }");
tryItOut("do export __parent__; while((__iterator__ = <x><y/></x>) && 0);");
tryItOut("var __proto__\nM:with(<y><z/></y>);");
tryItOut("return;");
tryItOut("export __count__\n\nlet \n(__parent__ = <><x><y/></x></>) { ();\n{}\n }\n");
tryItOut("/*for..in*/for(let *::*['__count__'] in (((eval(\"continue M;\\ngc()\\n\", [1,,])).call)(<><bbb xmlns=\"([(let (__parent__ = prop) []) if ( /x/g )])\"><zzz>__parent__.eval(window)</zzz><!--yy--></bbb></>)))/*for..in*/for(let __count__ in (((0x99)((new Function(<x/>))))(new (/a/gi).call(delete undefined, (-1))))){gc()let prototype, prototype; }");
tryItOut("/*infloop*/for(const __proto__ = new Object((0.1.__count__).@foo, true.__parent__); try { gc() } catch( if __noSuchMethod__) { var function::__parent__ = prototype, constructor; } finally { yield  /x/g ; } ; <><ccc:ddd></ccc:ddd></>) {yield; }\n");
tryItOut("/*infloop*/for(prop && true; (p={}, (p.z =  '' )()); this) var __count__;");
tryItOut("{{} }");
tryItOut("do return; while((<><x><y/></x></>.eval(<x><y/></x>)) && 0);//h\n");
tryItOut("var __iterator__ = __parent__;");
tryItOut("\tM:while(((<><x><y/></x></>).call(@foo, <x><y/></x>)) && 0){const __proto__ = <x><y/></x>, prototype = *; }\n");
tryItOut("if(<y><z/></y> < window) {continue M;export *; } else (<><x><y/></x></>);");
tryItOut("L:if(([1])[<x><y/></x>]) if( /x/ ) { if (false) throw this;} else ;");
tryItOut("/*for..in*/(for(const prop in [[1]].prop = __iterator__.propertyIsEnumerable(\"prop\")) ;)");
tryItOut("with({}) { return; } ");
tryItOut("if(*) yield 4.; else  if (('fafafa'.replace(/a/g, ({}).hasOwnProperty))) {__iterator__, __noSuchMethod__ = <x/>;throw arguments; }");
tryItOut("if(#0=({__proto__: <><x><y/></x></>})) {export *;const __proto__, __proto__; } else  if ( \"\"  |  \"\" ) throw <y><z/></y>;");
tryItOut("if(let (prop = <><x><y/></x></>) (Date(__parent__))\n) {L:if(Error((<x/> <<= <x><y/></x>), {})) { if (__proto__.prop setter= function (__parent__, __iterator__) { return <x/> } ) {yield; }} else {(<><x><y/></x></>); } } else {export *;var __noSuchMethod__, constructor = eval(\"gc()\", <x><y/></x>); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in window) \n");
tryItOut("for(let y in []);");
tryItOut("[z1,,];");
tryItOut("/*infloop*/while([, , ({ __count__: __count__ }), []] = true.eval([[]])){ this  }");
tryItOut("switch((<x><y/></x> for (__parent__ in ))) { case 2: /*for..in*/M:for\f(var \t<><x><y/></x></>.__proto__ in [,]) {{}let constructor; }break; case 7: /*for..in*/for([__parent__, __noSuchMethod__] = true ? __count__ : * in __parent__) {throw undefined; }/*infloop*/while( /x/ ){this;continue M; }break;  }");
tryItOut("if((__iterator__.prototype = (({ set __proto__(prototype)prop,  set prop __count__ () { return false }  })))) {let (__count__ = prop, __noSuchMethod__ = <y><z/></y>) { export *; }return false; } else  if (1e+81) {let (constructor, __iterator__) { ; } }");
tryItOut("if(null) return; else  if (prototype = <><x><y/></x></>) __proto__, __iterator__;");
tryItOut("/*for..in*/for(prop in (((function(y) { yield y; gc(); yield y; }).apply)(prop))){let constructor = null, __count__ =  '' ;export constructor; }");
tryItOut("if(__parent__) this const \nconstructor;");
tryItOut("with({}) with({}) { let(function::__proto__ = new @foo(__parent__ = 3, *), prop = undefined.__lookupSetter__(\"__proto__\")) { return ( /x/g  ? ( '' .propertyIsEnumerable(\"__iterator__\")) : *); } ");
tryItOut("if(3/0) {export prototype;throw @foo; } else {let constructor, constructor;export __proto__; }\n;");
tryItOut("/*infloop*/for((__proto__ = new Object()); (yield [z1].__defineGetter__(\"prop\", function  __noSuchMethod__ (__proto__, __count__)<x/>)); ({ __noSuchMethod__: function::prototype, __count__: __proto__ }) = <><x><y/></x></>.__lookupGetter__(\"__proto__\")) __proto__;");
tryItOut("/*for..in*/for([__parent__, __noSuchMethod__] = true in *) {yield;gc() }");
tryItOut("var __proto__, __parent__ = __proto__");
tryItOut("/*for..in*/for(const prototype = <bbb xmlns=\"(<x/>.unwatch(\"__noSuchMethod__\") >>= true.eval(*))\"><ccc:ddd></ccc:ddd></bbb> in let (prop, __noSuchMethod__) new Boolean(<><x><y/></x></>)) {/*for..in*//* nogeckoex bug 349964 */ for  each\f(\rvar __iterator__ in 1e-81) {[1,2,3,4].slice } }");
tryItOut("throw __iterator__;");
tryItOut("while((let (({ prototype: ({ prototype: [] }) }), __iterator__ = (constructor.__proto__)--) \nnew [1,2,3,4].slice()) && 0)var ;");
tryItOut("if( '' ) {yield __noSuchMethod__; }");
tryItOut("export prop");
tryItOut("{let prop;if(5.0000000000000000000000) continue L; else  if ( '' ) const function::prototype; else  }\n");
tryItOut("if((__noSuchMethod__)) { if (new RangeError()) if(<x><y\f/></x>) { if (window) (*::*);} else {return; }\n} else {window.isPrototypeOf(this);let (__count__) { 0/0; } }");
tryItOut("M:do {(\r-0); } while(((__count__.__proto__ = __iterator__)) && 0);");
tryItOut("prop");
tryItOut("/*for..in*/for(let [prototype, x::__count__] = [[]] in [,,z1]) (@foo);");
tryItOut("{throw this;with(#1#){__noSuchMethod__ } }");
tryItOut("/*for..in*/for(var false.@foo.__count__ in ((( '' ++).__defineSetter__)( /* Comment */<><x><y/></x></>.throw([1]))))\n{}");
tryItOut("while((new <x><y/></x>()) && 0)let (constructor = <x><y/></x>) {  /x/g ; }");
tryItOut("<y><z/></y>;");
tryItOut("/*for..in*/M:for(const constructor.prototype in window ? window :  '' .propertyIsEnumerable(\"__noSuchMethod__\")) {export *; }");
tryItOut("if(RangeError().throw(__iterator__)) {this.zzz.zzz; } else  if ((constructor) >>>=0x99 /= [,,]) yield prop; else {/*for..in*/for(const __proto__ in (([1,2,3,4].map)(<x><y/></x>)))export *;export prototype; }");
tryItOut("let(prop) ((function(){try { for(let y in []); } catch(__count__) { with({}) let __parent__; } finally { with({}) ; } })());");
tryItOut("/*infloop*/while(<><x><y/></x></>){{}false; }");
tryItOut("while(((constructor.prototype = <y><z/></y>)) && 0)");
tryItOut("var constructor =  '' ;\nL:while(((-0)) && 0){var __count__ = *::*; }\n");
tryItOut("{{{} }export *; }");
tryItOut("switch((delete (true || prototype).isPrototypeOf((<y><z/></y> :: *::*)))) { default: /*infloop*/L:for(var __proto__; 1e+81; window) yield;break; case 2: M:switch(undefined) { case (.2): break; case this.@foo:  }break; break; case (constructor.(undefined)): export __noSuchMethod__;break; case 9: case [15,16,17,18].filter([z1], (new RegExp(__count__, undefined))): (*);break;  }");
tryItOut("/*infloop*/for(let prop; __parent__ = <x><y\n/></x>; new new Function(<x><y/></x>.hasOwnProperty(\"__parent__\"), prototype)) (this);");
tryItOut("{continue ; }");
tryItOut("if(constructor = (this.eval(1e+81))) /*for..in*/for(const __noSuchMethod__ in ((gc)(window))){window;(-0); }\n");
tryItOut("/*for..in*/for(const __proto__ = ({ prototype: prop, __parent__: __noSuchMethod__ }) = __proto__ in <y><z/></y> ? undefined : function ([y]) { }) {yield; }");
tryItOut("");
tryItOut("L:while((('fafafa'.replace(/a/g, function(q) { return q; }))) && 0)const __proto__;");
tryItOut("do {export *; } while((((1e+81).__defineSetter__((gc)\t.call( \"\" , <y><z/></y>), window))\n) && 0)\nthrow prop;");
tryItOut("if((Object(<x/>.throw(<><x><y/></x></>)))) {; } else  if (5.0000000000000000000000) var prototype, prop = function::constructor; else {(*::*);if((new function (__noSuchMethod__) { return null } (1.2e3) !== window .@ this)) {/*infloop*/for(undefined; __iterator__;  '' ) {let constructor; } } else  if (true.__defineGetter__(\"prototype\", function (__parent__, __noSuchMethod__) { yield <x><y/></x> } )) return undefined; }");
tryItOut("yield false; const /*\n*/prop;");
tryItOut("let __parent__, __parent__ = <y><z/></y>\n");
tryItOut("/*infloop*/while(new 1e+81( '' ))var \tprototype, constructor;");
tryItOut("gc()");
tryItOut("/*infloop*/while((uneval(<x/>))){null; }");
tryItOut("export *;");
tryItOut("do return 1e4; while((0) && 0)\n");
tryItOut("L:with({__noSuchMethod__: #2= '' });");
tryItOut("/*infloop*/while(<zzz>__noSuchMethod__ = function ([y]) { }</zzz>){return; }");
tryItOut("continue ;");
tryItOut("break M");
tryItOut("/*for..in*/for(var __count__ = <y><z/></y> in __count__) yield;");
tryItOut("{/*for..in*/for( /x/g ['__noSuchMethod__'] in (([1,2,3,4].map)(1.2e3.__defineSetter__(\"prop\", function (__iterator__)<x><y/></x>))))gc() }\t");
tryItOut("let (prop, __proto__) { let (prototype = this, __parent__) { gc() } }");
tryItOut("constructor");
tryItOut("M:if(-0) { if (.__lookupSetter__(\"__noSuchMethod__\")) {__iterator__yield; }} else ;");
tryItOut("with({}) for(let y in [5,6,7,8]) this");
tryItOut("{return;/*for..in*//* nogeckoex bug 349964 */ for  each(const @foo.__noSuchMethod__ in  /x/ \f) continue L; }");
tryItOut("prototype = prop;");
tryItOut("L: yield;");
tryItOut("/*for..in*/for(const prop in <x><y/></x>) {yield; }");
tryItOut("if(@foo) {}");
tryItOut("/*infloop*/for([*::* for each (prop in <x/>)]; ( /x/g  .. null); ({__noSuchMethod__:  /x/g  })) {yield  '' ;export *; }\nwith({__noSuchMethod__: ([__noSuchMethod__.@*].filter(function(y) { yield y; export prototype;; yield y; }))})var prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <><x><y/></x></>) {/*infloop*/L:do {{}(undefined); } while(<x><y/></x>); }");
tryItOut("if((yield (-0))) { if ((yield [z1,,]() % <x><y/></x> & *)) {function(y) { yield y; continue M;; yield y; }; } else {switch(*) { default: ;break;  }\t }}");
tryItOut("let (({ __noSuchMethod__: ({ __iterator__: constructor }) }) = <><x><y/></x></>./*\n*/yoyo(*::*)) { yield *::*; }");
tryItOut("M:with(case 0: ( /x/ ); -= *.prototype){yield;\nreturn;\n }");
tryItOut("let constructor\nM:if(<xxx>{constructor}</xxx>.((__parent__ ? <x><y/></x> : <y><z/></y>))) return  \"\" ; else {function () { ({a1:1}); } throw __count__; }");
tryItOut("M:while((prop = 0/0.unwatch(\"__parent__\")) && 0){((new Function).apply).call{} }");
tryItOut("(this);");
tryItOut("{switch((<><x><y/></x></>.__proto__ = window).__lookupGetter__(\"prototype\"))\t { case Math.pow(((this.__lookupSetter__(\"prototype\"))())): export *;case (({}).__lookupGetter__).call(({a1:1}), ).@foo: break;  }/*infloop*/for(const __iterator__; (1e4 -= <x/>); delete <x><y/></x>) {return;export __noSuchMethod__; } }");
tryItOut("export  get __proto__(constructor) { yield; } ; const __noSuchMethod__;var constructor;");
tryItOut("L:do {({ prop: [] })/*infloop*/while('fafafa'.replace(/a/g, new Function))constructor; } while(((({constructor: <x><y/></x>delete  /x/  }))) && 0);");
tryItOut("switch((gc())) { default: prototype; } const __parent__;");
tryItOut("with({}) throw __iterator__;");
tryItOut("/*infloop*/do {let prototype = this;; } while(<><><!--yy--></></>);");
tryItOut("gc()");
tryItOut("__parent__; const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in *::*) {const __proto__;yield #1=[#1#]; }");
tryItOut("yield (prop &= <x><y\t/></x>);");
tryItOut("/*for..in*/for([__noSuchMethod__, constructor] = null[this] <<= (<y><z/></y> & -0) in <><x><y/></x></>.*) { /x/g ; }");
tryItOut("/*for..in*/for(const __count__ in this) {yield <><x><y/></x></>; }");
tryItOut("return false;");
