tryItOut("return;");
tryItOut("M:do {throw 0;export *; } while((false) && 0);");
tryItOut("M:if((({prototype: __iterator__ / [[]]}))) if(3/0)  { return <x/> }  else {export *; }");
tryItOut("switch(prop.__parent__ = null.__defineGetter__(\"__parent__\", <x><y/></x>)) { case 1: return;break; /*for..in*/L:for(prototype = (__count__ = <><x><y/></x></>) in 0) yield 1e81;break; gc()break;  }");
tryItOut("while((\n<><x><y/></x></>) && 0){/*infloop*/for(__parent__ = ([15,16,17,18].sort(Function, <y><z/></y>)); 0.1; __parent__) {return @foo; } }");
tryItOut("{with(--@foo.isPrototypeOf(this)){throw this;yield *; }(({prototype: <y><z/></y> })), [11,12,13,14].sort }");
tryItOut("if(this.__defineGetter__(\"[__count__, ]\", (1 for (x in [])))) {let (__count__ = @foo) { L:if(null) {return  /x/ ;;yield <x/>; } }\n } else  if (false) { } else {/*for..in*/M:for(var __noSuchMethod__ in ((function ((__iterator__), __parent__)prototype = this |= new RangeError(__noSuchMethod__, *))(<><x><y/></x></> = window)))return <x><y/></x>; }");
tryItOut("/*infloop*/for(let prototype; ({constructor: <!--yy-->.(arguments)}); (([1,2,3,4].map)(([<y><z/></y>])))) {\n }");
tryItOut("{while((window.propertyIsEnumerable(\"__proto__\")) && 0){{{}\nexport *;\n }if(([15,16,17,18].sort((gc).apply, <><x><y/></x></>))) {; } else {;throw  \"\" ; } } }");
tryItOut("L:with(false)for(let y in []);");
tryItOut("M:do {with({}) { continue ; }  } while(((({ prototype: ({ x::prototype: __iterator__, constructor: [, __noSuchMethod__, __iterator__, \f, ] }) }) = __noSuchMethod__)) && 0);");
tryItOut("while((*) && 0){{}yield 0.1; }");
tryItOut("M:with(<x><y/></x>){arguments;yield <x/>; }");
tryItOut("/*for..in*/for(<><x><y/></x></> in ((/a/gi)(getter <<= <y><z/></y>)))function ([y]) { };");
tryItOut("__proto__ = *, prop = constructor");
tryItOut("M:do L:if(__noSuchMethod__ = ({a1:1}).__defineSetter__(\"__parent__\", Function)) {export *;export __count__; } else  if (yield try {  } catch(__proto__ if (p={}, (p.z = *::*)())) { throw  { /*infloop*/while(__iterator__){__proto__, __count__ = @foo; } } ; } catch(constructor if (function(){<><x><y/></x></>;})()) { constructor = <><x><y/></x></>, __count__ = <x/>; } catch(__noSuchMethod__) {  } finally { break ; }  <x/>)  while((([*::*].sort( /x/ )) && (true.__parent__)) && 0);");
tryItOut("if(({ __proto__: __proto__, __count__: prototype }) = @foo ^  \"\" ) {} else {{}const constructor = <x><y/></x>, __count__; }");
tryItOut("\n");
tryItOut("/*infloop*/do {throw this;; } while((new RangeError(this, .2)));");
tryItOut("var __iterator__ = <><x><y/></x></>, __noSuchMethod__ = <y><z/></y>;");
tryItOut("try { export *; } finally { export *; } ");
tryItOut("return;");
tryItOut("switch(new ((<><x><y/></x></>).__defineSetter__)(__parent__ < this)) { case 9:  }");
tryItOut("/*infloop*/M:while((uneval( /x/  <<= this++))){<x><y/></x>;export *; }");
tryItOut("if(var constructor, __noSuchMethod__ = this) /*infloop*/L:for( \"\" ; (default: throw function ([y]) { };break; case <x><y/></x>: return;break; case 3: let __iterator__ = return __count__;;case <x><y/></x>: ((-0));case <><x><y/></x></>: case 0: case 2: yield;case 1: break; case 8: let __noSuchMethod__ = <><x><y/></x></>;break; case -3/0: break; yield @foo;case *: {}.__defineSetter__(\"__noSuchMethod__\", false)); ('fafafa'.replace(/a/g, (null).apply))) const prototype, __iterator__ = [,,]; else  if (__count__.__proto__ setter= ({}).__lookupGetter__) {gc()throw (window\n); }");
tryItOut("try { yield (__count__ = __noSuchMethod__); } catch(__parent__) { yield constructor; } ");
tryItOut("if(({__count__: ( /x/g ).__defineSetter__ })) {export __count__;export prop; } else {yield <x><y/></x>;export __iterator__; }");
tryItOut("/*for..in*/for(const __iterator__ in undefined) {gc() }");
tryItOut("L:with((<x><y/></x>.__iterator__)){export constructor; }");
tryItOut("L:if((1e+81 *= @foo .@ ((p={}, (p.z = <><x><y/></x></>)())))) { if (prop, __count__ += <x><y/></x>) {yield <><x><y/></x></>;/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in this) {break ; } }} else export __parent__;");
tryItOut("/*for..in*/for(var ( /x/g )(<x><y/></x>) in (((new Function(\"throw <><x><y/></x></>;\")))((({a2:z2})())))){let (prop, prop = 1e+81) { export *; } }");
tryItOut("if((__count__ = __proto__ .@ (__count__ = <x><y/></x>))) { if (__iterator__ = <x/>.@*) {/*infloop*/for(__iterator__ = (this.zzz.zzz.propertyIsEnumerable(\"prototype\")); prop.__count__ = window; eval(\";\", __noSuchMethod__ *= false)) {export __count__;yield  /x/ ; } }} else const __proto__,  { {} } ;");
tryItOut("M:if(eval(\"{}\", <x/>[this])) { if (__noSuchMethod__.((<><x><y/></x></>.isPrototypeOf(__count__)))) {gc()return; }} else {gc() }");
tryItOut("with({}) var __proto__;");
tryItOut("throw StopIteration; const __parent__;");
tryItOut("(@foo);");
tryItOut("with({prototype: ({a1:1}).isPrototypeOf(true)}){{continue ; } }");
tryItOut("return;");
tryItOut("M:if((true .@ (__proto__|=1.2e3.__parent__))) {\fgc()/*infloop*/M:for\t(//h\n({__proto__: yield this}); window; __proto__ .@  \"\" ) with({}) {} }");
tryItOut("__parent__;\n;\n");
tryItOut("with({}) yield (new (constructor)(*, <x/>));");
tryItOut("/*infloop*/L:for(__iterator__; __parent__ = this; (new 1.3 != <x/>.__parent__ = [,,] :: 3/0(#0=({__proto__: ( /x/ .eval(constructor))}) ? @foo\n : ((*.unwatch(\"prototype\")) .@x:: new __proto__), <x/>))) {return <y><z/></y>; }");
tryItOut("L:do  while(((<x><y/></x>.(*::*))) && 0);/*for..in*/M:for(var [prototype, __noSuchMethod__] = prop.propertyIsEnumerable(\"__parent__\")['prototype'] = (this.__defineSetter__(\"__proto__\", [1,2,3,4].slice)) in __iterator__) {{}*::*;M:if( '' ) {break ; } else {return; } }");
tryItOut("/*infloop*/while((function(y) { yield y; return;; yield y; })()\n)/*infloop*/for(let [] = 1e81.__defineSetter__(\"__proto__\", function(y) { yield y; gc(); yield y; }); __parent__ = new <x/>();  /x/ .@foo) {export *;return; }");
tryItOut("{with(export __noSuchMethod__;); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in -1) break L;");
tryItOut("/*infloop*/for(let __parent__; true; function ([y]) { }) {throw __iterator__; }");
tryItOut("/*infloop*/for(var function::__iterator__; (new gc(({__parent__ getter: (new Function(\"let function::constructor;\")) }), <bbb xmlns:ccc=\"@foo\"><ccc:eee></ccc:eee></bbb><ccc:ddd></ccc:ddd>).__defineSetter__(\"prop\", /a/gi)); new (constructor.__proto__ = (arguments == __proto__)).watch()) if((#0=[( '' .__parent__.*)])) * else __count__;");
tryItOut("/*for..in*/for(var __count__ = 033.propertyIsEnumerable(\"constructor\") in <x><y/></x>) break ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__.prototype in ((undefined)[1e-81])) {export *;yield 1.2e3; }");
tryItOut("while((([[1]] >>>=this) != this.__defineGetter__(\"__count__\", false)) && 0)/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in <y><z/></y>) {}");
tryItOut("while((new (<><x><y/></x></>).__defineSetter__()) && 0)<x><y/></x>;");
tryItOut("/*infloop*/for(constructor; (@foo ? [11,12,13,14].filter : @foo); this) {/*for..in*/for(let x::function::__parent__ = <x><y/></x> in true) {; } }");
tryItOut("yield *\n");
tryItOut("if((delete <x><y/></x> ? true : <x><y/></x>)) yyy else yield prototype;");
tryItOut("\t{M:switch([, ] = new (({}).__lookupGetter__).apply()) { default: throw StopIteration;break; case [__proto__, , , ] = undefined.isPrototypeOf(({a2:z2})) @ __parent__ = 5.0000000000000000000000: break;  }gc() const __parent__; }");
tryItOut("/*infloop*/for(null;  '' ; <><x><y/></x></>) {undefined;{} }");
tryItOut("if(((let (prop = false, constructor =  '' ) <x><y/></x>).@*)) {(__noSuchMethod__).watch }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, constructor] = false[ '' ].__lookupSetter__(\"constructor\")++ in (__proto__ = __proto__)) const prototype, __iterator__ = prototype;");
tryItOut("/*infloop*/L:do with(__iterator__)gc() while((function  __proto__ (__parent__;) { continue ; } ).call(false, undefined.__lookupSetter__(\"__iterator__\") instanceof (eval(\"{return;__noSuchMethod__; }\", <x/>)), (p={}, (p.z = <><x><y/></x></>)())));");
tryItOut("with(function(id) { return id })yield;");
tryItOut("return *::*;\n__noSuchMethod__\n");
tryItOut("L:if((Exception() + (<x><y/></x>)[this] += eval(\"constructor;\", @ || <><x><y/></x></>))) if(<x/>) { if (*::*) {gc() }} else return window;");
tryItOut("L:with({prop: <x/>}){{} }");
tryItOut("yield;\nvar constructor =  /x/ ;\n");
tryItOut("constructor.__count__ = [<x><y/></x>].some(({}).__lookupGetter__)\n");
tryItOut("M:with({__noSuchMethod__: (null.__proto__ for each (prototype in [,,]) for each (__noSuchMethod__ in window))}){if([1].throw(3.141592653589793)) yield @foo; else {let __iterator__, prop = ({a2:z2}); } }");
tryItOut("export *\n");
tryItOut("if(prop) { if (-3/0) {gc() } else {var /*\n =  /x/g ;return; }}");
tryItOut("export __noSuchMethod__\n");
tryItOut("/*for..in*/for(const __parent__ in ((undefined.watch(\"__iterator__\", gc))((p={}, (p.z = function ([y]) { })()).__proto__))){/*for..in*/for(const __proto__ = constructor.__noSuchMethod__ setter= function(q) { return q; } in undefined ?  /x/  : <><x><y/></x></>) export *;{} }return yield prototype =  '' ;");
tryItOut("let (__parent__) { ([z1,,]); }");
tryItOut("L:if((this.__defineGetter__(\"__parent__\", this))) { if (__count__ = <><x><y/\t></x></>) L:if( /* Comment */__proto__) {export __proto__; } else  if (#1#.prop) {export __iterator__; } else {L: <y><z/></y>; }}");
tryItOut("L:if(<x><y/>//h\n</x>) {break ; } else  if (true) {var __count__ =  /x/g ;return <x><y/></x>; }");
tryItOut("while(([(this.__defineSetter__(\"__parent__\", (yield  \"\" ).watch))]) && 0){if(__proto__ = <x><y\f/></x>) ; }");
tryItOut("{export *;/*for..in*/for([prototype, __parent__] = (prop.__lookupSetter__(\"prototype\")) in <><x><y/></x></>) with({__proto__: prototype})throw this; }");
tryItOut("yield __proto__ = ({constructor: default: let (__parent__ =  '' , prototype/*\n*/) { export *; }break; , __proto__: window }).yoyo(new (-true)());");
tryItOut("/*for..in*/for(var __iterator__ = (p={}, (p.z = (__noSuchMethod__.constructor))()) in new {}(this)) {/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in  /x/ ) {}return __noSuchMethod__; }");
tryItOut("/*infloop*/L:for(var __count__; <><!--yy--></> for ((prop) in <y><z/></y>) if (this) %= export *; = -1 + (Error()); ([11,12,13,14].map[(__proto__ = <><x><y/></x></>)].yoyo(((new Function(\"var __noSuchMethod__ =  /x/ , |;\")))(<x><y/></x>) + <><x><y/></x></>\f = __count__))) {export *;yield *::*; }");
tryItOut("__parent__ = *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ( '' )(prototype) in __noSuchMethod__) {yield __parent__;(<x><y/></x>);\t }");
tryItOut("/*for..in*/for(const __noSuchMethod__ in __parent__.__iterator__ = 0/0) {if(@foo)  else  if (4.) {<x/> } else {yield; }\ncontinue ; }");
tryItOut("gc()\n[,];\n");
tryItOut("gc()export __parent__;");
tryItOut(";");
tryItOut("yield @foo;");
tryItOut("{}");
tryItOut("/*for..in*/M:for(let constructor = 0.__noSuchMethod__ in (([1,2,3,4].slice)((new function (__proto__)<x><y/></x>(<><x><y/></x></>, __iterator__).__lookupGetter__(\"function::__parent__\"))\t)))var prototype, constructor = [1,,];");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in <x><y/></x>) return;");
tryItOut("{/*for..in*/\f(let [prop = __proto__, __iterator__;, constructor] = <x><y/></x> in   for ([1]['__parent__'] in #2=({constructor: <><x><y/></x></>})) for (__iterator__ in <x/>) for ((prop)(<x><y/></x>)\t in <x/>) if ( '' ) (-1)) {continue ;const prototype = *::*; } }");
tryItOut("let (function::__iterator__ = ({ set __iterator__ __count__ () { yield <><x><y/></x></>() }  }), prop = __noSuchMethod__ = <><x><y/></x></>) { constructor }");
tryItOut("if((Object(<y><z/></y>))) { if (this in {}) } else const __iterator__ = (-0)\nthrow ++[, ] = ({ __iterator__: __parent__, prototype: __proto__ });");
tryItOut("M:if(false |= ({ get x::constructor prop (__count__) { let prototype; }  }\t)) {/*infloop*/while(#0=({constructor: <><x><y/></x></>})); } else  if ([#0=({__noSuchMethod__:  \"\" .eval(undefined)}) for (__proto__ in prototype) for (__parent__ in prototype) if (<x/>)]) {var __parent__, __iterator__; }");
tryItOut("for(let y in [5,6,7,8]) constructor = __parent__;");
tryItOut("/*for..in*/for(var constructor = (__parent__ = __proto__ >= ('fafafa'.replace(/a/g, Math.pow)) <= -<><x><y/></x></>) in (RangeError())) let __parent__ = *, constructor;");
tryItOut("/*for..in*/for(var __parent__ in ((Math.sin())(let (prop =  \"\" .__defineSetter__(\"prototype\", ({}).__lookupGetter__)) ([__count__ for each (__noSuchMethod__ in window)])\n)))/*for..in*/for(const __noSuchMethod__ in function(id) { return id } for each (constructor in this)) throw prototype;");
tryItOut("throw StopIteration;");
tryItOut("{if( /x/ ) { if (3) gc()} else {var __parent__, __proto__ = <x><y/></x>; }/*infloop*/L:for(var __proto__; [z1,,]; (return)) return; }");
tryItOut("let __iterator__, prop\nthrow <x><y/></x>;\nthrow __iterator__;\n");
tryItOut("this.zzz.zzz;");
tryItOut("yield undefined.valueOf(\"number\");");
tryItOut("with(*){yield; }");
tryItOut("var x::prop,  '' ;");
tryItOut("for(let y in [5,6,7,8]) yield prop;");
tryItOut("if(let (__noSuchMethod__ = (new (this.zzz.zzz)(*.@*, function(q) { return q; }))) .2--) export *; else {__iterator__ = constructor; }");
tryItOut("/*for..in*/for(const  /x/g ['__parent__'] in *) M:while((<y><z/></y>) && 0);");
tryItOut("/*for..in*/for(let [__proto__, __iterator__] = __parent__ = constructor in []) {/a/gi }");
tryItOut("(prototype)\n/*infloop*/for(let __iterator__ = delete <><x><y/></x></>; new ((1 for (x in [])))().__parent__; __proto__.__defineGetter__(\"__iterator__\", Math.sin)) {return; }");
tryItOut("switch( \"\" ) { case *::*: export __count__;case window: const constructor =  '' , prop;break;  }if(constructor =  /x/g ) while(((<><x><y/></x></> ? 3 : <><x><y/></x></>.__lookupSetter__(\"__parent__\"))) && 0){yield; } else {if(<><x><y/></x></>) {yield <x><y/></x>; } else  if (constructor) var set, prototype = [1]\n{} }");
tryItOut("/*infloop*/while(( /x/g .__lookupSetter__(\"prop\") &= __proto__ = <x/>))return;");
tryItOut("/*for..in*/for(const __parent__ = (constructor = [, , , constructor, ]) in (constructor.(*) .. ({ get delete __count__ (constructor, prop) { return ([1,,] ^= 1e-81) } , __parent__: undefined }))) /*infloop*/do {/*infloop*/for(this.__defineSetter__(\"__iterator__\", /a/gi); constructor = <><x><y/></x></>; *::*) return;(<><x><y/></x></>); } while((#3={a:#3#})());");
tryItOut("with([undefined.__lookupSetter__(\"__proto__\")])/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__.__noSuchMethod__ in (uneval(<x><y/></x>))) /*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__ in <x><y/></x>) return;");
tryItOut("if((null.unwatch(\"__proto__\"))) { if ([null]) {{}/*for..in*/for(__noSuchMethod__.__noSuchMethod__ in Math.pow) {yield;throw this; } }} else L:if(<x><y/></x>) {return; } else  if (*::*) {return; }");
tryItOut("break ;\n/*for..in*//* nogeckoex bug 349964 */ for  each(let (prop) in ({} += [z1])) {return undefined; }\n");
tryItOut("if(this) if(<y><z/></y>) { if (([([window].some((5.0000000000000000000000).__defineSetter__))])) return; else {}} else {/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in <y><z/></y>) switch(033) { default:  } }");
tryItOut("/*infloop*/L:for([15,16,17,18].map('haha'.split, (<x/>)) >>> [1,,]\n; this; (*.__lookupGetter__(\"prop\"))) {/*infloop*/for(const prototype; eval(\"__proto__ = prop\", (*.watch(\"__parent__\", <><x><y/></x>\t</>))); (+<><x><y/></x></>)) throw  /x/ ;function ([y]) { }; }");
tryItOut("/*for..in*/for(let __noSuchMethod__(((uneval((false.valueOf(\"number\")))))) in (('haha'.split()) <<= (<><x><y/></x></>\n))) /*for..in*//* nogeckoex bug 349964 */ for  each(constructor in  '' ) var constructor;");
tryItOut("continue ;");
tryItOut("__parent__ = __noSuchMethod__;");
tryItOut("L: {\nbreak ; }\f");
tryItOut("/*infloop*/for(({ prop: ({ prototype: __iterator__, __noSuchMethod__: ({ __iterator__: let }) }) }) = true & __iterator__.@foo; let (__proto__, __iterator__ = window) this; __iterator__ = *::*) {/*infloop*/for(3.141592653589793; __proto__; \f(-0)) {continue ;throw  /x/g ; } }");
tryItOut("/*infloop*/for(const ({ constructor: ({ eval(\"return;\", constructor = window)['__parent__']: prop }) }) = (<xxx {prototype}={<x><y/></x>} />.hasOwnProperty(\"__iterator__\")); (( /* Comment */<x><y/></x>).__defineSetter__((__proto__ = [true]), ((p={}, (p.z = <><x><y/><\t/x></>)())))); (__parent__.__noSuchMethod__ = constructor)) L:switch((-1)) { default: <x/>; }");
tryItOut("yield;");
tryItOut("/*for..in*/for((*::*)(0/0) in (((function (prop, function::__count__) { yield @foo\r } ).apply)(prop))){yield; }\n/*infloop*/for(let [__count__, __count__, ] = @foo = 3.141592653589793; 1e-81; var __proto__, __parent__ = *) throw this;");
tryItOut("L:if(({ __count__: __noSuchMethod__ }) = ({ constructor: __count__ })) if(<x/>) { if ((<><x><y/></x></>.valueOf(\"number\"))) eval else {gc() }} else  if ((*.yoyo(*::*))) M:if(false)  else return 3;");
tryItOut("L:if(window+=true) { if (let (prototype, __iterator__) @foo.__defineSetter__(\"prop\", function () { yield ({a2:z2}) } )) let prototype;} else {__count__ = __parent__, prop; }");
tryItOut("{/*infloop*/for((<x><y/></x> || <x><y/></x>); window; __count__ = @foo.__defineSetter__(\"__iterator__\", /a/gi)) /*for..in*/for(const [__proto__, __iterator__] = <><x><y/></x></> in false) (<y><z/></y>) }");
tryItOut("\n/*infloop*/do gc() while([15,16,17,18].some(Function, *))\n");
tryItOut("with({}) { with({}) for(let y in []); } /*for..in*/for(var __iterator__ in (((<x><y/></x>).watch)(<x/>)))throw true\n");
tryItOut("L: __iterator__");
tryItOut("{/*for..in*/for(prop in eval(\"new (function ([y]) { })()()\", @foo)) yield <><x><y/></x></>; }");
tryItOut("if((this && *::*())) /*for..in*/for(const [__count__, __proto__] =  /x/  |  \"\"  in null) gc() else  if ((<x><y/></x>.hasOwnProperty(\"constructor\"))) {/*for..in*/L:for(prop in  '' ) let prototype; } else prototype = (-1), __parent__ = null;\neval\n");
tryItOut("Function\n(*::*);\n");
tryItOut("yield  \"\" ;");
tryItOut("for(let y in []);");
tryItOut("[]");
tryItOut("prototype");
tryItOut("with(this){(__noSuchMethod__).__defineSetter__ }");
tryItOut("if((-1)) return this;");
tryItOut("while(((Math.pow).call(*, )) && 0){export *;throw function(id) { return id }; }");
tryItOut("let(prototype) ((function(){yield new -1.propertyIsEnumerable(\"__iterator__\")();})());");
tryItOut("do return; while((*::*.yoyo(0x99)) && 0);");
tryItOut("with({}) { let(__noSuchMethod__, (constructor)) { yield (String( /x/g )); } ");
tryItOut("{/*infloop*/do ((this.__lookupGetter__(\"prototype\"))); while((({a2:z2})).__defineSetter__());var __iterator__, prop; }");
tryItOut("switch(*) { default: /*infloop*/M:for(let __noSuchMethod__ = *; <x/>; <><\fx><y/></x></>) return;break; with({prop: window}){yield <y><z/></y>;export __parent__; }case 4: /*infloop*/for(let prop; 1e+81; ({a1:1})) {return this; }break;  }");
tryItOut("/*for..in*/for(const __parent__ in (<><x><y/></x></> if \t(this))) gc()");
tryItOut("yield <><x><y/></x></>\nprop\n");
tryItOut("");
tryItOut("return;/*for..in*/export prototype;for(let __proto__ in (__parent__ = #1=[#1#])) ;");
tryItOut("if((try { __parent__, __count__; } finally { let(__proto__ = (function ([y]) { })(), __count__) { (<x><y/></x>); } .__proto__)) { if (<>(__parent__ = prop.yoyo((({prop:  '' , __proto__ getter: function(q) { return q; } }))))</>) return; else {return \t<><x><y/></x></>; }}");
tryItOut("with(<x><y/></x>){}");
tryItOut("do {M:if(<y><z/></y>) let __parent__ = *::*, prop = 3/0; else  if () {{} } else let __count__ = @foo; const __iterator__; } while((__noSuchMethod__.__count__ = *::* ? ([<x/>].some((({}).hasOwnProperty).apply\f).(<bbb xmlns:ccc=\"null\"><ccc:eee></ccc:eee></bbb>)) : <bbb xmlns=\"window > 0/0\"><ccc:ddd><ccc:ddd><x><y/></x>yyy</ccc:ddd></ccc:ddd></bbb>) && 0);");
tryItOut("__iterator__, get = <x><y/></x>;");
tryItOut("do {export *; } while(( \"\" ) && 0);");
tryItOut("if(constructor = <x/>) gc() else  if (this.__defineSetter__(\"prototype\", function  constructor () { gc() } )) {export *;yield; } else {var __iterator__ = undefined, __parent__ = this;(1 for (x in [])) }");
tryItOut("{/*for..in*/for(window in ((({}).hasOwnProperty)(0/0.yoyo(<x><y/></x>))))const __count__ =  /x/ ; }");
tryItOut("{break ; }");
tryItOut("if(new (gc)().prototype = ({prop: <x><y/></x>})) {{}\n\n\n }");
tryItOut("{new Function/*infloop*/for(<><x><y/></x></>; <y><z/></y>; this) {; } }");
tryItOut("if((*::*.__lookupGetter__(\"__proto__\"))) return  else if ; else  if (new window(0x99, <x/>)) {[1,2,3,4].map }");
tryItOut("let(x::__proto__) { return;");
tryItOut("/*infloop*/do throw false; while(<><x><y/></x></>);");
tryItOut("with({__noSuchMethod__: ((__parent__)[null]) || (-0)}){for(let y in []); }");
tryItOut("/*for..in*/for(constructor in ((function(q) { return q; })(<{prop}><!--yy--></{prop}>.((__noSuchMethod__ if (*)))\t)))gc()\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let function::__count__ in <y><z/></y>) M:with({-: (<x><y/></x>.__iterator__)})return;");
tryItOut("switch(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) { case ('haha'.split)( /x/ , function ([y]) { }): /*infloop*/M:while(window){var __count__, __parent__;throw 1e+81; }break;  }export *;");
tryItOut("(<x/>);throw 1e4;");
tryItOut("/*for..in*/for(const prop in ((function  prop () { return this } )(this))){({}).__lookupGetter__{} }");
tryItOut("\fwhile((__parent__ = this) && 0)/*infloop*/do {export *\n } while(__parent__ = <x/>);");
tryItOut(";");
tryItOut("/*for..in*/for(var [prop, __count__] = (([1,2,3,4].map).call(#3={a:#3#}, prop, function(id) { return id })) in this.zzz.zzz) for(let y in [5,6,7,8]) prototype = constructor;");
tryItOut("if((yield eval(\"<x/>\", *::*))) { if (this.__defineSetter__(\"__count__\", eval)) {prop = this, __count__; }} else {export __count__;yield  '' ; }");
tryItOut(";\nwith({prop: (prop.yoyo(*::*) >>> *::* < [1])})L: {3.141592653589793yield null; }\n");
tryItOut("/*for..in*/M:for(const [prop, prop] = (\n<><x><y/></x></>) in __iterator__) *");
tryItOut("while(([1]) && 0)return (yield  /x/g );");
tryItOut("1e81['__proto__'] = __noSuchMethod__;");
tryItOut("Math.sin const prototype;");
tryItOut("/*for..in*/for(constructor in (( '' )(this.__defineGetter__(\"prototype\", new Function)))){throw #1=[#1#];return; }");
tryItOut("/*infloop*/M:for(__noSuchMethod__; *; <x> // <y/></x>) { }\nlet __proto__, prop;\n\n(__noSuchMethod__ = <x><y/></x>);");
tryItOut("var prototype;");
tryItOut("do let __proto__ = <x><y/></x>; while(((function ([y]) { })().__defineGetter__(\"prototype\", [1,2,3,4].map).__lookupGetter__(\"__parent__\")) && 0);");
tryItOut("\tif((!new (<><x><y/></x></>)(*, *))) { if (__proto__.((<x/>.prop))) ;} else {yield null;\fif(window) { if (this) true;} else {(gc).apply } }");
tryItOut("{gc()(<><x><y/></x></>).__defineSetter__ }");
tryItOut("/*for..in*/for(var [__proto__, prototype] = <x><y/></x>.@foo in <y><z/></y>) {return;export prop; }\ngc()\n");
tryItOut("/*for..in*/L:for(var __proto__ = [<x><y/></x> if (<><x><y/></x></>)] in <><x><y/></x></>) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in eval(\"gc()\", prototype)) if(<x><y/></x>.isPrototypeOf( if (0.1.__lookupGetter__(\"function::prototype\"))this)) (<x><y/></x>); else  if (__noSuchMethod__+=this) { }");
tryItOut("if(<><x><y/></x></>.constructor) { if (*.valueOf(\"number\")) const __parent__ = <x/>; else }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(__count__ = __count__; <><x><y/></x></>; <y><z/></y>) {<><x><y/></x></>;gc() }");
tryItOut("let constructor = @foo, __count__ = <><x><y/></x></>;");
tryItOut("with((__iterator__ @ @foo))yield");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(__count__; <><xxx {__iterator__}={__iterator__ = @foo} /></>; 1e-81) {/*infloop*/for(*; <><x><y/></x></>; window) export __count__;L:if((__iterator__ <= false)) 'haha'.split else  }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(var __parent__; this.__defineGetter__(\"constructor\", ({}).__lookupGetter__); eval(\"prop = <><x><y/></x></>\", this.__defineSetter__(\"__noSuchMethod__\", new (function  __iterator__ (__noSuchMethod__, prototype)\r { return * } )(({a2:z2}))))) {while((<><x><y/></x></>) && 0){return <x/>; } }");
tryItOut("/*infloop*/M:for(let [] = this; __parent__.__count__.__defineSetter__(\"__iterator__\", [1,2,3,4].map); (function(q) { return q; })) {return; }");
tryItOut("L:if(function ([y]) { } /= typeof ({a1:1})) {(constructor);__parent__ =  '' ; } else  if ((({__count__: <x><y/></x> }))) ;");
tryItOut("/*for..in*/for(var [__proto__, __noSuchMethod__] = this in (function ([y]) { })()) undefined\nL: ([[]])\nthrow StopIteration;");
tryItOut("/*infloop*/do if(let (__proto__ = <x/>) true & window) { \"\" ; } else return <><x><y/></x></>; while(eval(\"(new Iterator())\", ( \"\" .isPrototypeOf((uneval(window))))));");
tryItOut("{{} }");
