tryItOut("L:if((( '' )())) yield; else  if (__noSuchMethod__ = undefined) let prop, __parent__; else /a/gi");
tryItOut("{propL:if(<x><y/></x>)  else gc() }");
tryItOut("with({}) { ;\f } ");
tryItOut("throw __iterator__;");
tryItOut("/*for..in*/for(let set = <><x><y/></x></>\n in \n[11,12,13,14].some) {/*for..in*/for(let __parent__ in ((eval)(__noSuchMethod__))){throw <x/>; } }");
tryItOut("/*infloop*/for(true; <x><y/></x>; <><x><y/></x></>) __iterator__;");
tryItOut("switch(((yield 'fafafa'.replace(/a/g, (({__count__ setter: /a/gi,  get __parent__ __count__ (__iterator__, <x><y/></x>) { (*::*); }  })).__defineSetter__)))) { default: break;  }");
tryItOut("/*for..in*/for(prop in (+[false].map(window\f))) {}");
tryItOut("break ;\nthrow <y><z/></y>;\n");
tryItOut("if( \"\" .valueOf(\"number\")) /*infloop*/for(([3 for each (constructor in __count__)]); (></x>); (constructor)(__count__, 1e-81)) {export *;gc() } else {export each; }");
tryItOut("throw StopIteration;");
tryItOut("if(@foo.__defineSetter__(\"__iterator__\", new Function)) yield <><x><y/></x></>; else  if (<><x><y/></x></>) {export constructor;{} }");
tryItOut("M:if((RangeError(yield <x><y/></x>, <x/>).prototype = (__parent__ = 033))) { if ((prop.__proto__)) {/*for..in*/for(__iterator__ in <><x><y/></x></>) {__parent__ = <x/>, __iterator__ =  /x/g ; }yield; }} else yield (<x><y/></x> instanceof window);");
tryItOut("break ;throw <x><y/></x>;");
tryItOut("M:if(prototype ? ([[]], (let (__proto__) <x><y/></x>.__lookupGetter__(\"constructor\")).eval([1.3 for (prop in  /x/ )])) : (__proto__.prop = ([((1 for (x in []))).call(*::*, true) for (__noSuchMethod__ in this)]))) {/*infloop*/for(const constructor; false; 0.1) __iterator__ = <x><y/></x>;return function(id) { return id }; } else {{}case 3: export *;break; default: /*infloop*/M:while(<><x><y/></x></>)prototypebreak;  }");
tryItOut("yield;let __proto__ = false, prop;");
tryItOut("if((\n({__count__: <><x><y/></x></>})).*) L:if(({ __count__: __noSuchMethod__ }) = (<x><y/></x>.throw(<x/>))) { if (let (__noSuchMethod__ = 1.2e3, __proto__ = <><x><y/></x></>) __iterator__ = [[]]) {{} }} else {return  '' ;export *; } else L:with((prop)[<y><z/></y>]){gc() }");
tryItOut("switch(*) { case (p={}, (p.z = false.valueOf(\"number\")\f)()): /*for..in*/L:for(var __parent__ = __noSuchMethod__ in *) {(<x/>);/*infloop*/M:for(<x/>; true; window) {prop = 1e81;var __noSuchMethod__ = __parent__; } } }");
tryItOut("if(*()) { if (*::*.__lookupGetter__(\"prototype\").eval(this %= -1)) {/*infloop*/while([]){*::*;export *; }<x/>; } else prototype}");
tryItOut("switch((<x/>.__parent__)) { default: break; case <><xxx {prop}={({ get prototype(__proto__, __parent__) { yield new Function }  })} /></>: do {throw  \"\" ; } while((typeof 5.0000000000000000000000) && 0);break; gc()break; break; case 8: \r( /x/g );break; __count__ = 0;case 7: break; case 6: break;  }");
tryItOut("if(<x/>) { if (__noSuchMethod__) {; }} else {true; }");
tryItOut("yield;yield  /x/ ;");
tryItOut("/*for..in*/for(prop in (<xxx>{constructor}\r</xxx>.(\t(prototype.(__noSuchMethod__)) :: (Date())))) M:if(( /x/g )) #1=[#1#]; else  if (__proto__%=1e81) {([,,z1]);({}).__lookupGetter__ }\nthrow __iterator__;/*for..in*/M:for(let __noSuchMethod__ in (((new Function(\"{\\t}\")))(((<x/> for (__iterator__ in <><x\f><y/></x></>)))))){throw ({a1:1});(__count__); }");
tryItOut("this.zzz.zzz;");
tryItOut("let (__proto__, prototype = const __iterator__;) { (false); }");
tryItOut("/*for..in*/for(const [__parent__, __count__] = <><xxx {__noSuchMethod__}={<x><y\t/></x> == <x/>} /></> in (<><x><y/></x></>.valueOf(\"number\"))) yield;");
tryItOut("/*for..in*/for(let __count__ = 1e4 in <x><y/></x>) true;");
tryItOut("if(__count__ = true) {; }");
tryItOut("with({}) { __parent__ = __parent__; } ");
tryItOut("if(__count__.@foo >= __proto__ = null) {{} }");
tryItOut("var constructor = ({}), __count__ = -1;");
tryItOut("yield <y><z/></y>;");
tryItOut("switch( \"\" .__lookupSetter__(\"__iterator__\") .. *::*.prop) { case [[1,,]] in ({__noSuchMethod__: <x/>,  get __count__(prototype, __proto__) { {} }  }): export __parent__;default: /*for..in*/for(const __parent__['constructor'] in ((({}).__lookupGetter__)((<y><z/></y>--))))export constructor;case prop: ([z1,,]).watchbreak; yield;case 4: if(<x/>) { if (undefined) {throw <x><y/></x>;<><x><y/></x></>; } else export *;}break; break;  }");
tryItOut("if(<x><y/></x>.constructor = *::*) {return;true; }");
tryItOut("if(\n \"\"  ? #1=[<x><y/></x>] : <><x><y/></x></>.__lookupGetter__(\"__parent__\")) {export *; } else  if ((uneval(<x><y/></x>))) window; else {export __noSuchMethod__; }");
tryItOut("let (yield =  '' , __parent__) { yield *::*; }");
tryItOut("yield [ \"\" ].sort(function(q) { return q; });");
tryItOut("M:if(<y><z/></y>--) var constructor;throw <x><y/></x> < <x><y/></x>;");
tryItOut("do {/*infloop*/M:do return <y><z/></y>; while(<x/> >  { {} } ); } while((__noSuchMethod__ = 033) && 0);");
tryItOut("let(__iterator__ = this.__defineSetter__(\"__noSuchMethod__\", (true).call)[[ /x/g ].filter('haha'.split)\n .@x:: (new Boolean( '' ))], __noSuchMethod__ = new (window.hasOwnProperty(\"constructor\")).watch(({ (-0): prototype, __count__: constructor }) = constructor)) { constructor = prototype;");
tryItOut("/*infloop*/while([(@foo >>> <><x><y/></x></>)].map((null).watch)){if( \"\" ) { if (<x><y/></x>) {export *; }} else {const __noSuchMethod__;var __noSuchMethod__; } }");
tryItOut("switch(new  '' ()) { default:  }");
tryItOut("function  prop (({ __proto__: __proto__ }))eval(\"true\", this).propertyIsEnumerable(\"prop\")");
tryItOut("let(({ __count__: prop })) { yield new ( /x/g )();");
tryItOut("let(getter = 3/0, yield) { with({}) export *;");
tryItOut("throw  /x/g ;");
tryItOut("if(new (({}).__lookupGetter__)()) { if (new -1(true, <><x><y/></x></>)) /*for..in*/for(let [prop, __iterator__] = 4. in  /x/ ) {__iterator__ } else {gc()const __proto__ =  \"\" ; }}");
tryItOut("\n\n;\n");
tryItOut("__noSuchMethod__");
tryItOut("/*infloop*/for(; __proto__.prototype = [prop].filter(function (__parent__, __count__)__noSuchMethod__); __noSuchMethod__ = prop) const __count__ = [[]];");
tryItOut("if(window) break L; else  if (.2 >= <><x><y/></x></> /= new Iterator()) {return <x><y/></x>;break M; }");
tryItOut("/*infloop*/for(({ __proto__: ({ __parent__: constructor }), prototype: ({ prototype: ({ prototype: ({ __proto__: [__count__, function::prototype, , __count__, ({ __iterator__: [] })], __parent__: ({ prop: ({ __count__: __noSuchMethod__, prop: ({ __count__: constructor, __count__: prototype }) }) }) }), __proto__:  if (__proto__.prototype =  '' ) }), __proto__: ({ __proto__: __parent__ }) }) }) = ( ''  % constructor.__defineSetter__(\"__iterator__\"\f, prop)); *; #1= /x/ ) constructor = __noSuchMethod__;");
tryItOut("do yield <x><y/></x>; while(((0x99.propertyIsEnumerable(\"constructor\")).isPrototypeOf(__count__ = prototype)) && 0);");
tryItOut("/*infloop*/for(prototype = *; <x><y/></x>; #3={a:#3#}) <x/>");
tryItOut("function ()(({constructor getter: /a/gi }))");
tryItOut("M:if(<x/>) {return window;if( /x/ ) export __parent__; else  if (window) {{}yield; } }");
tryItOut("switch((undefined +=  /x/g )) { default: case (__parent__ !== [<><x><y/></x></>]\f.__lookupGetter__(\"yield\")): break; /*for..in*/L:for(let [export __proto__;, [constructor]] = (*::*--) in null) yield; }");
tryItOut("do {(<x><y/></x>);let __noSuchMethod__; }/*\n*/ while(([15,16,17,18].map('haha'.split, <x><y/></x>)) && 0);");
tryItOut("/*infloop*/for(var __count__; [[1]]; <><x><y/></x></>) {throw 3/0;Math.pow }");
tryItOut("{}");
tryItOut("{gc() }");
tryItOut("M:while(((__noSuchMethod__|=@foo.eval([Math.pow for each (__count__ in *::*) if (__iterator__)]))) && 0){export *; }");
tryItOut("if( /* Comment */<x><y/></x> |= *) { if ((eval(\" \\\"\\\" \", <><x><y/></x></>).yoyo(<><x><y/></x></> ? <x><y/></x> : <x/>))) {M:if(null) {export *; } else \texport __count__; }} else yield  \"\" ");
tryItOut("for(let y in []); const setter;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(({ __parent__: ({ __iterator__: prototype }), __count__: ({ prototype: __parent__, __parent__: __proto__ }) }) in <><x><y/></x></> ? true : *) yield <x><y/></x>; }");
tryItOut("<xxx>{prop}</xxx>yyy");
tryItOut("do {; } while((<xxx>{__proto__}</xxx>.(prototype = *)) && 0)\ncontinue ;");
tryItOut("with(((1 for (x in [])))()){let([({ __parent__: __noSuchMethod__ }), , ], __proto__) { for(let y in []); }");
tryItOut("while((({__count__: 'fafafa'.replace(/a/g, (1 for (x in []))),  get __parent__(({ __proto__: [, ], __parent__: ({ prop: __noSuchMethod__, constructor: get }) })) { if(false.__noSuchMethod__) {break ; } else  if ((function ([y]) { })().hasOwnProperty(\"__parent__\")) {return; } else {export *; } }  })) && 0)<bbb xmlns=\"__proto__\"><!--yy--></bbb>");
tryItOut("/*infloop*/while(prop = __proto__)export constructor;");
tryItOut("if(this.__defineGetter__(\"prop\", (new Function(\"undefined;\")))) {return <x/>;yield *; } else {this;var function::__iterator__ = window, prototype; }");
tryItOut("do /*infloop*/M:do gc() while(*::*); while(((window || 1.2e3)) && 0);");
tryItOut("with({}) throw StopIteration;");
tryItOut("if(<x><y/></x>) ; else  if (false) { switch return; }");
tryItOut("/*for..in*/for([__count__, constructor] = (function(y) { yield y; /*infloop*/for(__count__; *; ({a1:1})) export __noSuchMethod__\t;; yield y; })() in \n__count__) ;");
tryItOut("return;");
tryItOut("if(<>\t<x><y/></x></>) {export *;throw undefined\f; } else  if (*::*) let __noSuchMethod__, __proto__ = null;");
tryItOut("L: {gc() }");
tryItOut("L:if((__proto__+=false)) { if (<><x><y/></x></>.__count__) {} else {throw <x><y/></x>;return <x><y/></x>; }}");
tryItOut(";");
tryItOut("/*for..in*/for(constructor = ~((((-0)).apply)(<y><z/></y>, <><x><y/></x></>)) in eval(\"function(q) { return q; }\", #1=[#1#]) ? (this.__defineSetter__(\t\"__iterator__\", <><x><y/></x></>)) : (new <y><z/></y>(<y><z/></y>, <><x><y/></x></>))) {throw <y><z/></y>\f/*infloop*/for(var __iterator__; ({ prototype: prop }) = <x><y/></x> / this; new (<><x><y/></x></>)()) {var __iterator__ = *::*;continue L; } }");
tryItOut("{yield;yield <><x><y/></x></>; }");
tryItOut("while(((prop)[<><x><y/></x></>]) && 0)([,]);");
tryItOut("try { for(let y in []); } catch(prop) { return; } finally { with({}) { <y><z/></y>; }  } ");
tryItOut("if((({constructor: (new (function  __parent__ (__parent__ =  /x/g ) {  } )(undefined)[(*::*.propertyIsEnumerable(\"__proto__\"))]), __proto__: yield (<y><z/></y>)( /x/ ) }))) { if (- '' .watch(\"prop\", ({}).__lookupGetter__)) {/*for..in*/for(let __proto__ in {yield this;yield; }) ({})\t; } else /*for..in*/L:for(<><x><y/></x></> in (([1,2,3,4].map)(new (this).__defineSetter__(#1=({prop: constructor}), false))\f)){const __iterator__, __iterator__; }}");
tryItOut("throw StopIteration;");
tryItOut("if(0/0) {yield; } else  if (null) ; else ;");
tryItOut("/*infloop*/for(prototype = ((__parent__(-0).prop) = <x/>.isPrototypeOf(false)); [15,16,17,18].sort([1,2,3,4].map, __proto__ = ([(constructor.propertyIsEnumerable(\"__count__\"))]));  ) {return <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in [,,]) throw <y><z/></y>; const __iterator__;");
tryItOut("yield <><x><y/></x></>");
tryItOut("let(x::__parent__, __proto__ = -1) ((function(){var prop = , constructor;})());");
tryItOut("\nvar ({ prototype: __parent__, __iterator__: constructor }), prop = false;");
tryItOut("{}\f");
tryItOut("with({}) <x><y/></x>;");
tryItOut("with({}) { let(__count__ = \n__parent__.isPrototypeOf(eval(\"(\\n<><x><y/></x></>)\", let (prototype =  /x/g , __count__ = <><x><y/></x></>) 033)), __proto__) ((function(){__parent__ = function::__parent__;})()); } ");
tryItOut("__parent__ = __parent__;");
tryItOut("L:if( /x/ ) {__count__ }try { try { (); } catch(__iterator__) { export constructor; } finally { return; }  } finally { for(let y in [5,6,7,8]) yield; } ");
tryItOut("/*infloop*/for([__iterator__ = __count__ >> <>try { (-0); } catch(__noSuchMethod__) { return; } finally { break ; } </>].map(Math.sin); new RangeError(try { return this; } catch(__parent__) { {} } , <><x><y/></x></>); (__iterator__ = __iterator__.*)) (new Function(\"export __iterator__;\"))");
tryItOut("/*for..in*/for(let [__iterator__, __parent__] = #1# in 4..isPrototypeOf(\f /x/ )) {throw StopIteration; }");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: __parent__ }) = ([15,16,17,18].filter(function(q) { return q; }, __parent__ = 1.2e3)); (__iterator__.__proto__ =  /x/ ); *) ;");
tryItOut("with({__parent__: ((uneval(let (window) <x/>)))}){{__proto__, prop = <><x><y/></x></>; }throw *::*; const __parent__; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:while(((yield yield window)))x::__iterator__ = null");
tryItOut("L:while(( '' ) && 0){yield;{} }");
tryItOut("__noSuchMethod__ = [1,,]<>(arguments)(window, *)</>");
tryItOut("/*for..in*/for(let constructor in @foo % <x><y/></x>) break ;");
tryItOut("/*for..in*/for(let constructor in (('haha'.split)((gc(constructor.__parent__, @foo))))){while((true.prop = [,,z1]) && 0)yield prop;return __iterator__; }");
tryItOut("1.3['constructor'] = __proto__;");
tryItOut("/*infloop*/M:for(var prototype; <x/>; <x><y/></x>) {yield __proto__; }");
tryItOut("/*for..in*/M:for([<><x><y/></x></>, __count__] = function ([y]) { } in  \"\" ) {yield (-1);const prop = <y><z/></y>, constructor =  /x/g ; }\n");
tryItOut("{gc()__iterator__ = <x/>, prop = window; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__proto__ = 'fafafa'.replace(/a/g, Math.pow).valueOf(\"number\") in false) let(__noSuchMethod__ = *, __parent__ = prototype) { prop = __count__;");
tryItOut("gc()window;");
tryItOut("");
tryItOut("return (#1=[#1#].yoyo(0.1));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in  /x/ ) gc()");
tryItOut("{if(-3/0) \nconst __proto__, constructor =  /x/ ; else  if ( '' ) yield *::*; else {(this); } }");
tryItOut("switch( /x/ .watch(\"prototype\", \f[1,2,3,4].slice)) { case 0: break; let __proto__ = <y><z/></y>, __iterator__ =  /x/g ;break;  }");
tryItOut(";\nif(({})) export let; else {return; }\n");
tryItOut("if(undefined) {} else let __noSuchMethod__;/*infloop*/for(const __proto__ = 033; *; window) {{} }");
tryItOut("/*infloop*/for(<bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee></ccc:eee></bbb>; (constructor|=({a1:1})) instanceof (__noSuchMethod__ =  /x/g ); (this.__defineSetter__(\"prototype\", (1 for (x in []))))) with({constructor: (function ([y]) { })()}) \nfor(let y in [5,6,7,8]) __proto__.prop = __noSuchMethod__;");
tryItOut("switch((this .@*:: <x><y/></x>)) { default: break; case function(y) { yield y; export *;; yield y; }: gc()break; case 1:  }");
tryItOut("/*for..in*/for(var [constructor, __iterator__] = <y><z/></y> in arguments) var constructor, prop;");
tryItOut("/*for..in*/L:for([prototype, __noSuchMethod__] = let (__noSuchMethod__, prototype) <x><y/></x> in *.yoyo( /x/g )) M:if(true.*) {__parent__\t: __parent__ = <x><y/></x>yield function ([y]) { }; }");
tryItOut("gc()");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const __count__ = (prop.@foo) in window .. (this.propertyIsEnumerable(\"__count__\")) in [<x><y/></x>].sort( \"\" ).@foo -= ()) /*infloop*/while(new ((<x><y/></x>).call)()){__proto__ = false, __count__ = null; }");
tryItOut("this.zzz.zzz;");
tryItOut("");
tryItOut("if((<x><y/></x>.throw(this.__defineSetter__(\"prop\", 'haha'.split))++)) {;(window); } else ");
tryItOut("with({__count__: *::*}){do {continue L;yield *::*; } while((false) && 0);return; }");
tryItOut("/*for..in*/L:for(let constructor = ((this)( \"\" ) =  { continue L; } ) in __iterator__) {/*infloop*/for(__parent__; @foo; this) export __parent__; }");
tryItOut("/*infloop*/do {({a2:z2}); } while(<><x><y/></x></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */\f for  each(const __proto__ in ({ set prop __noSuchMethod__ (__iterator__) {  } ,  get [, ({ __count__: __count__\f, prototype: prop })](__iterator__) { return eval(\"if(<x><y/></x>) {gc()return; } else  if (<x/>) {var __proto__ = <><x><y/></x></>, __noSuchMethod__; } else {break M; }\", window) = new ( /x/g )(0x99) }  })) return [1].@*;");
tryItOut("throw StopIteration;");
tryItOut("if((yield true) >>=  '' .prop) {if({}) {; }gc()/*infloop*/for(var prototype = this; __parent__; <x><y/></x>) var ; } else  if ((this.__defineGetter__(\"constructor\", ({}).__lookupGetter__))) {if(((p={}, (p.z =  \"\" )()))) { if (@foo[@foo]) {export __count__; } else {__proto__; }}throw __iterator__; } else {if(undefined) {\t /x/ ;yield; } else  if ( '' ) gc() }");
tryItOut("/*infloop*/for((yield <><x><y/></x></>); prototype.__parent__; [__parent__ if (<><x><y/></x></>)]) {}");
tryItOut("/*infloop*/while(#1=[#1#])return;");
tryItOut("do with((uneval( '' )))let __noSuchMethod__, prop = 1e81; while(((p={}, (p.z = ++function(id) { return id }.@foo)())) && 0);");
tryItOut("let(prop) { yield;");
tryItOut("let(constructor) ((function(){this.zzz.zzz;})());");
tryItOut("gc()\nexport *;\n");
tryItOut("if(*) { } else  if (*) {let prop = <y><z/></y>;\fvar __noSuchMethod__; } else {__count__;gc() }");
tryItOut("yield;\nfunction  prop (prototype, __parent__) { continue ; } \n");
tryItOut("/*infloop*/do {; } while(this.__defineSetter__(\"__iterator__\", new Function).__defineSetter__(\"prototype\", (gc).call));");
tryItOut("M:with({__count__ getter: Math.pow: ((constructor.__iterator__))(function(id) { return id }, null)}){export * }");
tryItOut("{(({}).hasOwnProperty); }");
tryItOut("with({__count__: window})");
tryItOut("/*for..in*/for(const [__proto__, __noSuchMethod__] = (*::*.throw( /x/g )) for (__iterator__.prop in __count__) for (prop in *::*) in <x><y/></x>) prop, __iterator__;");
tryItOut("__iterator__ = __parent__;");
tryItOut("if(0x99) throw <x><y/></x>;return function::prop;");
tryItOut("while(( { return  '' .watch(\"__iterator__\", [,,z1]) > (__iterator__ ^ <y><z/></y>) } ) && 0){__noSuchMethod__ = -1, __proto__;return; }");
tryItOut("yield <x><y/></x>;");
tryItOut("with({}) { let prototype; } ");
tryItOut("L: {/*infloop*/for(var __iterator__; constructor; null) {export __proto__;{} } }");
tryItOut("M:if((Math.pow)) yield window;<x><y/></x>");
tryItOut("return @foo;");
tryItOut("/*infloop*/while(( /x/  if (<x><y/></x>)))continue L\n;");
tryItOut("if(undefined) { if (new (Math.sin)(@foo < this,  '' )) {let (__noSuchMethod__ = <y><z/></y>, __parent__) {  } }} else (<x><y/></x>);");
tryItOut("/*infloop*/while(<><xxx {prototype}={<><zzz>({a1:1}).__lookupGetter__(\"__count__\")</zzz></>} /></>){prototype.prop = __proto__; }");
tryItOut("switch(null.__iterator__) { default: break; case 5: (yield  '' );const __proto__;break; if([11,12,13,14].some) { if (this.__defineGetter__(\"__parent__\", <x/>)) if([,,z1] /= -0) throw <x/>; else {yield @foo; } else /*infloop*/M:for(let prop = 1.2e3; (__iterator__ = *); <x><y/></x>[0x99]) {'haha'.split }}case this in #1#: if(<x/>) var __proto__, __noSuchMethod__; else  if (<x/>) {throw @foo;{} }break; case 3: break; case 3: case prop = *.unwatch(\"__iterator__\"): \fyield new 1e81.prototype;case Function: case new *(): ( \"\" );break;  }");
tryItOut("while(([<x><y/></x>].filter(__iterator__)) && 0){var prototype; }");
tryItOut("Math.pow");
tryItOut("if(<x><y/></x>) (__parent__).watch");
tryItOut("/*for..in*/()for(let __proto__ =  in 'new ()(return;)) /*infloop*/for(const constructor = true; export __noSuchMethod__;; <><x><y/></x></>) {\tconstructor = <y><z/></y>, __parent__; }");
tryItOut("{yield @foo;L:if((getter.__noSuchMethod__ getter= [1,2,3,4].map)) {return;yield false; } else  if (yield (< 1e81 x><y/__iterator__<)/'x>) gc() }");
tryItOut("/*infloop*/while(){while((constructor) && 0)if(__parent__) { if (window) { } else {}} }");
tryItOut("return constructor;");
tryItOut("/*infloop*/for(var ({ prop: __iterator__ }) = RegExp(); ({prototype: 1.2e3}); ((uneval(prop = true, __count__ = null)))) {<x/>; }");
tryItOut("/*for..in*/for(var constructor = (((let prototype = 0.1)).watch)() in new \n(yield [,])(([15,16,17,18].some(function (__parent__) { throw *; } , let (constructor, __count__ = window) undefined)))) return;");
tryItOut("yield;\nvar __parent__ = , __iterator__ = <x><y/></x>;\n");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while((yield (-1).__lookupSetter__(\"__noSuchMethod__\").valueOf(\"number\")))export __proto__;");
tryItOut("{break ; { return prop } \n{}\n }");
tryItOut("switch([this].map((1 for (x in [])))) { case *::* .@*:: @foo: __noSuchMethod__; }");
tryItOut("if((let (prototype, prototype = constructor) null)) { if (*::*) {; }} else {/*infloop*/L:for(__parent__; (undefined)[#1#] in ({__noSuchMethod__ getter: [1,2,3,4].slice, prototype setter: Math.sin }); ({ delete: __parent__ }) = (<x/>[<x><y/></x>]))  }");
tryItOut("let(prop = new function(y) { yield y; if( \"\" ) {return;throw function(id) { return id }; } else {[1,2,3,4].slice }; yield y; }(this.__defineGetter__(\"__proto__\", [1,2,3,4].map), <><x><y/></x></>), __parent__ = ( /* Comment */__parent__).__lookupGetter__(\"prop\")) { throw StopIteration;");
tryItOut("with({__count__: <x><y/></x>}){(window); }");
tryItOut("if(<><xxx {__parent__}={ /x/g } /></> &= (prop.__noSuchMethod__ setter= Function).propertyIsEnumerable(\"prop\")) {}");
tryItOut("/*for..in*/for(let prop = (__parent__.__count__ getter= ({}).__lookupGetter__) in __parent__ = <y><z/></y>) { const this;export __iterator__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__proto__) in (Function).call(undefined\t, )) /*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in undefined in 1e-81 >>= __count__) (false.propertyIsEnumerable(\"prototype\"));");
tryItOut("if(constructor.prototype = *::*) { } else  if (prop = *::*) gc()");
tryItOut("let (prototype = @foo, __iterator__) { const __parent__ = __iterator__; }");
tryItOut("/*infloop*/M:do  while(<employee id=\"1\"><name>Joe</name><age>20</age></employee>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in prototype) continue M;");
tryItOut("/*for..in*/M:for(var [__iterator__, constructor] = yield <y><z/></y> in <x/>) {throw <x/>; }");
tryItOut("{{export *; } }");
tryItOut("L:if(prop.prototype = ({a2:z2})) { if (#1#) /*for..in*/for(let __parent__ = [z1] in false) {(<><x><y/></x></>); }} else /*for..in*/for(let prototype = <x/> in true) let __count__ = <x><y/></x>;");
tryItOut("M:if((function (__proto__, prop) { yield  ''  } )(0x99)) {continue L;var prototype, __noSuchMethod__; } else  if ((<y><z/></y>.__count__ = <x><y/></x>)) {break ; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ prop: __iterator__, function::__proto__: [__parent__, __parent__, ] }) }) = true; prototype; \r033.throw(__iterator__) ? <x><y/></x> ? <x/> : <><x><y/></x></> : (undefined++){throw <x><y/\t></x>;export prop; }");
tryItOut("/*infloop*/for(var \f({ __count__: __noSuchMethod__ }) = new <><x><y/></x></>() .@x:: window ? <y><z/></y> : {; }; ({constructor: -3/0}); <y><z/></y>) M:with(Number(__proto__, window)){export *; }");
tryItOut("prototype = __iterator__;");
tryItOut("/*infloop*/while((<\f><>yyy</></>)[(__iterator__.(function(y) { yield y; {}; yield y; }()))].valueOf(\"number\"))/*infloop*/L:for((__proto__ >>>=null) & ([1,,] & *::*); <x/>; ((__count__ = <><x><y/></x></>))[<x/>.hasOwnProperty(\"__iterator__\")]) {}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in  /x/ ) {(new Function(\"this;\")){} }\ntrue\n");
tryItOut("if(new (*::* |= <x/>)(<x><y/></x> >>>=<><x><y/></x></>)) {{}throw <><x><y/></x></>; } else  if ((prop).call(window, <x><y/></x>, <><x><y/></x></>)) {}");
tryItOut("/*for..in*/for(const ({ prop: __parent__, __noSuchMethod__: __iterator__ }) in this.zzz.zzz)  const __parent__;");
tryItOut("let (prototype = constructor, __count__ = this) { new Function }");
tryItOut("let __noSuchMethod__");
