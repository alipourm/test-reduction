
tryItOut("/*for..in*/for(let constructor in #1=[#1#]) yield;");
tryItOut("this.zzz.zzz;");
tryItOut("if(4. / this) return; else {(this); }");
tryItOut("switch([1,,]) { default: __parent__ = constructor, __proto__; }");
tryItOut("/*for..in*/M:for(const ((constructor)) in ((function(y) { yield y; return *;; yield y; })(eval(\"throw <x/>;\", <x><y/></x>)))){const __iterator__;return *; }");
tryItOut("null;");
tryItOut("L: {if(({prototype: <><x><y/></x></> })) false; else  if (<x/>.__defineSetter__(\"__count__\", ({}).hasOwnProperty)) var ; }");
tryItOut("\nreturn;");
tryItOut("");
tryItOut("do {if(0/0.yoyo(this)) (<><x><y/></x></>); else  if (eval(\"gc()\", (function ([y]) { })())) ; else 033{} } while((((<x/>)())) && 0);");
tryItOut("return;");
tryItOut("with({}) { constructor =  /x/g ; } ");
tryItOut("/*for..in*/for(var [prototype, function::__proto__] = ((({a2:z2}) for each (constructor in __noSuchMethod__)) instanceof <y><z/></y> + null) in *::* > <x/>) {gc() }");
tryItOut("L:with(__count__-=prop.yoyo((__parent__ if ( \"\" )))){{}(x::__count__);gc() }\n");
tryItOut("let ((1e4);) {  }");
tryItOut("L:with({__iterator__: window ? 033 : 1e4.yoyo(<x><y/></x>.isPrototypeOf(function(id) { return id }))}){if((this.eval(arguments))) { if (*::* %= <x><y/></x>) {}} else const constructor;L: {throw *;continue M; } }");
tryItOut("/*infloop*/do {let __count__ = @foo, __parent__;return *::*; } while(this);");
tryItOut("/*for..in*/for(const __proto__ = __parent__ = false in __count__) {return true;(<><x><y/></x></>); }");
tryItOut("let(__proto__) { throw StopIteration;");
tryItOut("let __noSuchMethod__, setter = null\n");
tryItOut("export __iterator__; const __parent__;");
tryItOut("this.zzz.zzz;");
tryItOut("this.zzz.zzz;");
tryItOut("do M:switch( /x/ ) { case 5: if(constructor) { if (*::*) {let constructor = true; } else {yield <x><y/></x>; }} } while((__noSuchMethod__ = prop) && 0);");
tryItOut("{}\n;\n\n");
tryItOut("L:if((true /= [,,].watch(\"__count__\", ([z1]).watch))) { if ((<><x><y/></x></>)\n) <x><y/></x>; else {yield;continue L; }}/*for..in*/for(var [__count__, prototype] = <x><y/></x>.watch(\"__noSuchMethod__\", function  __proto__ (__noSuchMethod__, __parent__) { return <><x><y/></x></> } ) in  /x/ ) constructor");
tryItOut("if((1 for (x in []))(( /x/  .@*:: <>\f<x><\ry/></x></>), <><x><y/></x></>)) {(constructor); } else  if (<x><y/></x> for (__proto__ in false).__iterator__ &= (prototype.constructor = <x/>\n)) M:if(3) {}");
tryItOut("M:if((__parent__.__count__ = <>#1=[#1#]</>)) (new Function(\"throw <><x><y\\n/></x></>;\")) else  if (new function  prototype () { yield 1e-81 } (, false) ? ((gc)((<x/>.constructor),  '' )) : prop.prop) yield <><x><y/></x></>; else ");
tryItOut("/*for..in*/for(let __count__ = [<><x><y/></x></>] in <><x><y/></x>\t</>) ;");
tryItOut("const __parent__, prototype;export *;");
tryItOut("return -033.isPrototypeOf(constructor = (-1));");
tryItOut("if((1e-81) === <xxx>{__parent__}</xxx>) { if ((new <x/>())) {while((__count__) && 0)return; }} else yield;");
tryItOut("if( '' ) {return; }");
tryItOut("/*infloop*/do {continue M;eval } while(window)");
tryItOut("if( \"\" ) yield <y><z/></y>; else {export *; }");
tryItOut("yield ((null)(#1#) = this.__defineGetter__(\"__iterator__\", (Math.pow).apply)).eval(__proto__ = eval(\"export *;\", eval(\";\", [1])));");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = ({constructor getter: (new Function(\"function(q) { return q; }\")) }) if (-3/0) in (<x><y/></x>.@*)) {{}yield; }");
tryItOut("with({}) let(__proto__ = *::* for (getter in <><x><y/></x></>)) { return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const this in <x><y/></x>) {const prop, __count__; }\nif(({prototype getter: [1]/*\n*/, __count__: <x><y/></x> })) {export __noSuchMethod__; }\n");
tryItOut("#3={a:#3#};");
tryItOut("{throw <x><y/></x>; }");
tryItOut("{yield <x><y/></x>;const __count__; }");
tryItOut("/*for..in*/L:for(const __iterator__ = (window)[ /x/g ] in prototype.__count__ getter= *::* ? window : *::*) {M:if(((__count__ %= window)--)) { if ([15,16,17,18].sort(function (__noSuchMethod__) { return 1e-81 } , null)) (3/0); else with(false){let constructor;; }} }");
tryItOut("continue L;");
tryItOut("/*for..in*/for(const [prototype, prop] = (new (-3/0 >>= <x/>)) in new (constructor)()) {break ;break M; }");
tryItOut("/*for..in*/L:for(*.__noSuchMethod__ in return <x/>;) {throw window; }");
tryItOut("(window.unwatch(\"__proto__\").isPrototypeOf(false))");
tryItOut("M:if(([][<x/>])) /*infloop*/M:for(({prop: window}); (__count__.prop); <x/>.eval(window)) {gc() } else  if (<employee id=\"1\"><name>Joe</name><age>20</age></employee>) @foo;");
tryItOut("; const __parent__;");
tryItOut("L:while((@foo) && 0)with({constructor: <x><y/></x>}){<y><z/></y>;export *; }");
tryItOut("L:do {;const __proto__; } while((*::*) && 0);");
tryItOut("{__proto__.prototypevar __proto__, prop = <x><y/></x>; }");
tryItOut("if(((p={}, (p.z = 1e81)())) ? [11,12,13,14].sort : <zzz><y><z/></y></zzz>) /*infloop*/do {function  prototype () { (<><x><y/></x></>); } \n((-0)); } while((<x><y/></x>));");
tryItOut("let __iterator__\n{return; }");
tryItOut("while((<x/>.hasOwnProperty(\"__noSuchMethod__\")) && 0){}");
tryItOut("if(eval(\"__parent__++\", ({__iterator__ getter: (eval).call, __iterator__: <x><y/></x> }) >>> (let (prototype =  '' , __count__ = <><x><y/></x></>) __proto__))) {/*for..in*/for(var __parent__ in window) throw <x><y/></x>;L: {this; } } else {if(new 1e+81()) {yield  \"\" ; } else  if ((uneval(<x/>))) prototype;return  /x/g ; }");
tryItOut("/*for..in*/for(let __count__ in ((__iterator__ if (<y><z/></y>))).@*) {let __parent__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/for(const [constructor, __iterator__(__iterator__ = ({constructor: 5.0000000000000000000000.propertyIsEnumerable(\"__count__\") }))] = [*::*] in constructor) L: yield;");
tryItOut("let (__iterator__, ({ __parent__: __iterator__, prop: constructor }) = ((function (constructor)<><x><y/></x></>).call(({a2:z2}), <x><y/></x>))) { with(*::*) }");
tryItOut("/*for..in*/for(const x::__noSuchMethod__.function::__parent__ in ((/a/gi)(\n[15,16,17,18].some([1,2,3,4].slice, false) .@ (prop =  /x/ )))){/*for..in*/M:for(let -1 in <x><y/></x>) [1,2,3,4].slicevar prop, __iterator__ = undefined; }");
tryItOut("0x99");
tryItOut("yield; const ({ __count__: [], prop: ({ __parent__: ({ constructor: constructor, prop: __count__ }) }) });");
tryItOut("{/*infloop*/while((<><x><y/></x></>)[this]){return 5.0000000000000000000000;[1,2,3,4].map } }");
tryItOut("{if((eval(\"<y><z/></y>.yoyo(<x><y/></x>)\", (uneval(window))))) {\f if (__noSuchMethod__ .@*:: arguments) {break ; } else {(<><x><y/></x></>); }}/*for..in*/\ffor([__parent__, prototype] = function ([y]) { } in __parent__) continue L\n; }");
tryItOut("L:if(({ get __noSuchMethod__() { yield  /x/g  }  })) { if ((false .@*::  ''  for (constructor in <x><y/></x//h\n>) for (__proto__ in <x><y/></x>))) const __parent__; else {(this); }}");
tryItOut("/*for..in*/for(let prop\f = (prototype.propertyIsEnumerable(\"prop\").throw([1] == <><x><y/></x></>)) in ({ prop: __count__, __iterator__: __noSuchMethod__ }) = ({ __noSuchMethod__: constructor })) {return this;(<x/>); }");
tryItOut("/*infloop*/for((<x><y/></x> || <y><z/></y> /= (prototype = 3)) for each (__iterator__ in window) ^ <y><z/></y>; new String(); ) if(<><x><y/></x></>) {new Function } else  if (null) {continue ;\t{} }\n");
tryItOut("let (__count__ = function(id) { return id }.hasOwnProperty(\"this\"), prop) { if(<><x><y/></x></> !== <x><y/></x>) ; }");
tryItOut("{} const prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var constructor((new (__proto__ = <x><y/></x>))) in ({ set x::__count__() { return <x><y/></x> }  })) {if(<y><z/></y>) {throw this; } }");
tryItOut("/*for..in*/for(let __count__ in (((({ prop: prop, constructor: [, __iterator__, __iterator__] }) = __noSuchMethod__|=(__proto__ = window)))(prototype = 3.141592653589793))){export prototype; }");
tryItOut("switch(__parent__) { default: return .2;case <x/> |= <y><z/></y>: /*for..in*/for(const __count__ in (((new Function(\"/*infloop*/for([prop, __parent__] = prototype.__defineSetter__(\\\"__iterator__\\\", ({}).hasOwnProperty); <>\\f<x><y/></x></> ? [,,] : <x><y/></x>; (new RegExp(.2))) {const __iterator__, constructor = <x><y/></x>; }\")))(eval(\"(window).call(({a1:1}), <><x><y/></x></>)\", prop.( '' ))))){const __proto__; }break; case <x><y/></x> >>= <><x><y/></x></>+=(#1#.eval((let (prop = <x><y/></x>) <><x><y/></x></>))): let (__parent__ = new ({}).hasOwnProperty((this.zzz.zzz),  '' ), prop) {  }case 5: /*for..in*/for(__proto__ = *::* in  \"\" ) let constructor;break; return;(*);Functionbreak;  }");
tryItOut("__noSuchMethod__");
tryItOut("L: {[arguments for each (constructor in 0x99)];(export *;); }");
tryItOut("if(__parent__) {yield; } else  if (<x><y/></x>) {return <x/>; } else var __iterator__, prop = @foo;");
tryItOut("{{} const __parent__;export __count__; }");
tryItOut("if((/a/gi).call([(RegExp(<x><y/></x>)) if (3 * <><x><y/></x></>)], __proto__.prop getter= function ([,,z1], __count__) { throw <x><y/></x>; } , ((<y><z/></y>).call(__noSuchMethod__, constructor)).__proto__\r)) { if (__noSuchMethod__+=prop) yield;} else {/*infloop*/M:for(const [, __noSuchMethod__, ({ prop: __iterator__ }), __count__, ] = (false instanceof *::*);  \"\" .@foo; (function ([y]) { })()) __count__ = yield prop.unwatch(\"__count__\") }");
tryItOut("/*infloop*/do {{}yield; } while((null)());");
tryItOut("const __count__ = <x/>;");
tryItOut("/*infloop*/for(var \n[({ constructor: *::*, __parent__: [__iterator__] })] = __proto__ = __iterator__; (constructor.__parent__ getter= (Function).call); (new ((<><x><y/></x></>).__defineSetter__)([z1], *::*))) {let (__count__ = __iterator__ = *) { gc() } }");
tryItOut("if(__iterator__.__iterator__) {return; }");
tryItOut("if(--constructor = <><x><y/></x></>) __count__ = #1=[#1#], __count__; else  if ((__noSuchMethod__.constructor = __count__ = __proto__)) gc() else yield __noSuchMethod__ >>>=__parent__;");
tryItOut("if(<><x><y/></x></>) { if (this) {return; }} else {return <x><y/></x>; }");
tryItOut("/*for..in*/for(__parent__.__proto__ in true) {{} }");
tryItOut("yield [[1]];");
tryItOut("/*for..in*/for(const __count__ in ({a1:1})) const __proto__ = (arguments)[this];");
tryItOut("/*infloop*/L:do {var __count__ = [[1]], __proto__ = window;*::*; } while((function  prop (prop) /x/ )((__noSuchMethod__.__noSuchMethod__ getter= (new Function(\"continue ;\"))), constructor));");
tryItOut("const delete, __noSuchMethod__");
tryItOut("export *;");
tryItOut("throw <><x><y/></x></>; const __noSuchMethod__;L: /*infloop*/for(var __noSuchMethod__; #1=[#1#]; #1#) {{} }");
tryItOut("switch(1.2e3) { default: with({constructor: eval(\"constructor = [,,];\", -3/0)}){return; }break; case 7: if(__parent__) { if (arguments) {let prototype = true;prototype } else {prototype = window;var prototype, __iterator__; }}break;  }");
tryItOut("with({constructor: (uneval(<><y/><x>))})<x/>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (new (__noSuchMethod__)(__noSuchMethod__))([prop if (<><x><y/></x></>)\t]) in this.zzz.zzz) { /x/g ; }");
tryItOut("/*infloop*/for(const prop = *;  /x/g ; <x><y/></x>) {throw <x/>; }");
tryItOut("try { @foo; } finally { const constructor = (function ([y]) { })(), prototype: *::* = *::*; } ");
tryItOut("<>(<x><y/></x>.(true))</><ccc:ddd><!--yy--></ccc:ddd>");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(constructor.__iterator__ in  /x/ ) function(y) { yield y; yield <x/>;; yield y; }");
tryItOut("/*infloop*/for((new [1,,](false) += @foo /= <y><z/></y>) - (({__iterator__: @foo})); Date((<><x><y/></x></> || 3.141592653589793)); ({__count__ setter: __noSuchMethod__ =  ''  })) {{(this);{} } }");
tryItOut("setter = __proto__;");
tryItOut("L:if(__iterator__ =  '' ) { if (window) arguments else {}\f}");
tryItOut("if(window) { if (this) {break L; }} else throw <y><z/></y>;");
tryItOut("do __proto__, prop = *; while(((#3={a:#3#} && prop)) && 0);");
tryItOut("/*infloop*/for(const __proto__ = <y><z/></y>; <y><z/></y>; ({a2:z2})) {__iterator__ }");
tryItOut("let prop");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({}) * <y><z/></y>.__noSuchMethod__ in __parent__ /=  '' .yoyo(({prop: prototype }))) return [[1]];");
tryItOut("gc\n<><x><y/></x></>\n");
tryItOut("{}");
tryItOut("/*infloop*/L:\ffor(const ({ []: [, , constructor, __noSuchMethod__, ], prop: [, , __proto__, __parent__, ] }) =  \"\" .@* .. (<x><y/></x> % [,,]); ((uneval([1,,])).constructor); this.__defineGetter__(\"__iterator__\", gc)) {throw -1;const __parent__, prop; }");
tryItOut("with(0/0)yield 5.0000000000000000000000;");
tryItOut("if((({}).__lookupGetter__)(undefined.__defineGetter__(\"break ;\", (1 for (x in []))))) (<><x><y/></x></>)\n else  if (this) {var __parent__, __parent__ = <x><y/></x>\nreturn true; } else ;");
tryItOut("/*infloop*/for(var [({ __iterator__: __iterator__ }), __noSuchMethod__, constructor, prototype] = <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>; __count__.hasOwnProperty(\"prop\"); <><x><y/></x></> ^= false) if(<><x><y/></x></>) { if (*::*) {}} else {gc()__parent__ = window; }");
tryItOut("M:if(<bbb xmlns:ccc=\"{} ? [[]] : <x/>\"><ccc:eee></ccc:eee></bbb>.( \"\" )) { if ( /* Comment */prototype = <><x><y/></x></> ^ [15,16,17,18].some(function(id) { return id }.@*, (false--).__defineGetter__(\"__noSuchMethod__\", function () { export *; } )) >>>=constructor = __parent__) {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <><x><y/></x></>) {gc(){} } }} else (@foo)");
tryItOut("yield\n({}).__lookupGetter__");
tryItOut("gc()\n");
tryItOut("export *;");
tryItOut("L: {}");
tryItOut("let (__noSuchMethod__) { var constructor = *; }");
tryItOut("if(Function(window,  \"\" ) :: <x><y/></x> <<= (new ( \"\" )(*, null))) { if (@foo == *::*) if(null) { if (window) {const __iterator__ = <><x><y/></x></>;const  { return {} } , getter; } else }} else {const prop = window, __proto__\nyield (({prototype getter: this })); }");
tryItOut("((-0));");
tryItOut("break M;");
tryItOut("/*for..in*/for(var prototype in (<x><y/></x>.(*))) {{}/*infloop*/for(const constructor = -0; <x/>; undefined) {export __iterator__; } }");
tryItOut("/*for..in*/L:for(constructor in ((/a/gi)((<x><y/></x>.propertyIsEnumerable(\"__noSuchMethod__\"))))){continue L;switch(<x/>) { case 9:  } }");
tryItOut("/*infloop*/L:while(this.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }))while(((new Boolean())) && 0)export *;\n");
tryItOut("L: this.zzz.zzz;\nlet __iterator__ = (<x><y/></x>.(<x/>)), __noSuchMethod__;\n");
tryItOut("for(let y in []);");
tryItOut("if(new ((<x><y/></x>).__defineSetter__)()) { if (__parent__(this) = <x/>.watch(\"__parent__\", (new Function(\"return 1.3;\")))) gc()} else {; }");
tryItOut("switch((p={}, (p.z = (<x/> for (__parent__ in <x/>)))())) { case ({ __proto__: __count__ }) = ({ __noSuchMethod__: prop, prop: __parent__ }): switch(this.__defineGetter__(\"__parent__\", (Math.pow).call)) { default: break; case 2: M:with({constructor: *}){yield <x/>;__noSuchMethod__, __noSuchMethod__ = true; }break; case 9:  }break;  }");
tryItOut("L: {return <x><y/></x>;yield <x><y/></x>; }return;let(__iterator__ = <><x><y/></\fx></>, prototype) ((function(){ /x/ })());");
tryItOut("{<y><z/></y>;/*infloop*/for(var __count__;  /x/g ; #3={a:#3#}) {{}let __count__, __proto__ = true; }\r }");
tryItOut("if([( /* Comment */ '' )]) { if (<><ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd></>.propertyIsEnumerable(\"__noSuchMethod__\")) <><x><y/></x></>\n1e81\n else {export *; /x/g  }}");
tryItOut("M:while(((constructor)) && 0){break ;export __noSuchMethod__; }");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*for..in*/for(const function::__count__ = 0.1 !== undefined == __iterator__.__count__ in this) const __parent__;");
tryItOut("/*infloop*/for(<y><z/></y>; <x><y/></x>; function ([y]) { }) {gc()return *::*; }");
tryItOut("/*for..in*/for(var ({ __count__: prototype }) in null) break ;");
tryItOut("/*infloop*/for(++(window ? * : <x><y/></x>).__noSuchMethod__; __parent__; (prop(__count__) = null)) { }");
tryItOut("if(#1=[#1#]) { if (function::__noSuchMethod__) {yield;; }} else yield @foo;");
tryItOut("with({}) { with({}) for(let y in []); } ");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((eval)( /* Comment */[[1]].valueOf(\"number\"))))/*for..in*/for(let __proto__ in (((function ()).call)(( /x/ .isPrototypeOf(window))[(uneval(prop = true))]))){eval(\"([z1,,]);\", 033.unwatch(\"__iterator__\")); }");
tryItOut("export *;");
tryItOut("*; const __parent__;");
tryItOut("let (prototype, __noSuchMethod__) { const constructor, prototype = (-1); }");
tryItOut("let(__parent__ = __noSuchMethod__.([,,z1])) ((function(){this.zzz.zzz;})());");
tryItOut("/*infloop*/for(__count__; [15,16,17,18].some(return windowfunction  constructor ()([[,,z1]].some(({}).hasOwnProperty)), eval(\"#3={a:#3#}\", <> for (__noSuchMethod__ in <x/>)</>)); (Math.sin)( /* Comment */<y><z/></y>)) {try { let __count__; } finally { let constructor = <x><y/></x>, __iterator__ = window; } ; }");
tryItOut("L:do /*for..in*/for(let prop = ({a2:z2}) in prop) {; } while((__parent__ = __noSuchMethod__, constructor) && 0);");
tryItOut("/*for..in*/for(var prop = *.__iterator__ in <x/>) return;");
tryItOut("do \fdefault:  while((@foo <<= 033) && 0);");
tryItOut("with(true <= let (__count__) ( /x/g ++)){if((yield <><x><y/></x></>)) switch(@foo) { case <y><z/></y>:  return  } else  if (new Function(<x><y/></x>).__lookupSetter__(\"prototype\")) /*infloop*/do {throw this\t; } while([[]]); }");
tryItOut("let __proto__, __parent__;");
tryItOut("with(__count__|=*::*.eval((window.propertyIsEnumerable(\"__iterator__\"))).@foo){<x><y/></x>; } const __parent__;");
tryItOut("do {({}).hasOwnPropertyreturn <x/>; } while((('fafafa'.replace(/a/g, function  __parent__ (constructor, __count__)null))) && 0);");
tryItOut("if((prototype = <><x><y/></x></> ? ({a2:z2}) : window)) { if (#0=[[1,,]].prototype = <><>new (<y><z/></y>)(window, true)</></>) while((prototype) && 0); else /*infloop*/for( /x/g ; ([,])[#3={a:#3#}]; __parent__.propertyIsEnumerable(\"__noSuchMethod__\")) {let constructor, default: break; break; case <x><y/></x>: __noSuchMethod__;break; break; break; throw  '' ;break; let __proto__; }}");
tryItOut("throw undefined;\nyield;\n");
tryItOut("try { <x/> } catch(setter if <><x><y/></x></>) { __parent__ = undefined, constructor; } catch(__iterator__) {  } ");
tryItOut("return (({a1:1}) for (prop in __proto__));");
tryItOut("yield <x><y/></x>;");
tryItOut("/*infloop*/L:for(var __count__; __proto__ = 0.1 === window\n.propertyIsEnumerable(\"set\") <= ( /* Comment */-__iterator__ = false); <y><z/></y>) /*infloop*/L:for(let ({ prototype: ({ [, __proto__, __parent__]: let }), constructor: try {  } catch(__noSuchMethod__) { export __iterator__; }  }) = __parent__ = <><x><y/></x></>; (function(id) { return id } for each (__count__ in __proto__) for (prop in this)) |= this.__defineGetter__(\"__proto__\", [,]); (constructor = ({ constructor: prototype }))) gc()");
tryItOut("M:do {__count__ = <x/>; } while(({}) && 0);");
tryItOut("while((4..unwatch(\"delete\") -=  \"\" ) && 0){let __proto__ = <x><y/></x>;return undefined; }");
tryItOut("/*infloop*/for(__noSuchMethod__; [11,12,13,14].filter; (*.@* > window)) {prototype; } const constructor;");
tryItOut("/*infloop*/for(var prop; (__count__ = #3={a:#3#}) .@x:: (__proto__.__lookupGetter__(\"__parent__\")); (eval(\"null -= __noSuchMethod__\", undefined.__lookupSetter__(\"__noSuchMethod__\")))) case @foo + *: break; break; ");
tryItOut("/*infloop*/M:for(const __proto__; yield this.zzz.zzz; this.zzz.zzz) return this.zzz.zzz;with({}) return ({__iterator__: <><zzz>*</zzz></>, (<x><y/></x>)(.2): ((uneval([,]))) });");
tryItOut("do /*for..in*/L:for(const __iterator__ = <x><y/></x> in <><x><y/></x></>)   while(((function::prototype for each (__parent__ in <x><y/></x>))) && 0);");
tryItOut("/*for..in*/for(let ({ 'haha'.split: prototype, __iterator__: __iterator__ }) in (([1,2,3,4].map)(function ([y]) { } * this.hasOwnProperty(\"__count__\"))))with({__noSuchMethod__: undefined.@foo}){gc() }");
tryItOut("switch(let (__parent__ = <x/>, prop) (({}).__lookupGetter__())) { default: switch((<x/>)//h\n( '' , <y><z/></y>)) { default: if(0) break L; else  if (*::*) {{} } }break;  }");
tryItOut("/*for..in*/for(let [__parent__, prop] = (<x/>['__count__'] = this <= undefined != <x><y/></x>[-1]) in <x/>) /*infloop*/for(__noSuchMethod__; #0=({__proto__:  /x/g }); #0=[new (<x/>)()]) L: {yield  \"\" ; }");
tryItOut("L:with({__iterator__: *})__proto__, __iterator__;");
tryItOut("yield yield __iterator__;");
tryItOut("while((<><xxx>{__iterator__}</xxx></>) && 0)yield;\n /x/ ;\n");
tryItOut("return (-1);");
tryItOut("/*infloop*/for(3.141592653589793 ? @foo : window; \n({})++; window) throw function(id) { return id };");
tryItOut("/*for..in*/for(__iterator__ in ((yield [] & [1]).__lookupSetter__(\"__parent__\"))) /*for..in*/M:for(constructor.__parent__ in \n4. < this) yield;");
tryItOut("with((new Boolean())){throw this;gc() }");
tryItOut("L: {{} }");
tryItOut("with({}) try { prop } finally { (window); } ");
tryItOut("yield (eval(\"while(( /x/ ) && 0){continue ; }\", new Error(<><x><y/></x></>))) > ([('fafafa'.replace(\n/a/g, function  x::__parent__ (__noSuchMethod__) { (3); } )).watch]);");
tryItOut("/*infloop*/L:for(let ({ __noSuchMethod__: ({ __iterator__: [, ({ __iterator__: prop, prototype: prototype })], __iterator__: __iterator__ }) }) = ({ __parent__: x::get }) = (function(y) { yield y; break M;; yield y; }).call(<><x><y/></x></>, <x/>,  /x/g ).yoyo([11,12,13,14].sort); eval(\"(this.yoyo(<x/>))\", this.zzz.zzz); 5) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in *::*) /*infloop*/for(const getter = 0/0; <x/>; false) throw <><x><y/></x></>; }\n");
tryItOut("gc()");
tryItOut("/*infloop*/do {;Math.pow } while(__proto__/*); const prop;");
tryItOut("yield;");
tryItOut("let (__noSuchMethod__) { yield window; }");
tryItOut("with({}) { with({}) { throw StopIteration; }  } ");
tryItOut("{throw prototype; }");
tryItOut("yield;");
tryItOut("L:if(\r[__proto__].throw((__iterator__\n)).__parent__) {new Functionwith({}) { return; }  } else  if (\t<>this</>.prop) gc()");
tryItOut("L:switch(__count__ = ({ __proto__: [__parent__] })) { case 8: break; default: break; break; case 8: /*for..in*/for(constructor in 033) {(new Function).call }break; case new eval(): case #2=constructor = {}: break; {throw 1e4; }case (this.zzz.zzz / (*::*--)): case 5: break; break; return 1e81; }");
tryItOut("/*infloop*/L:for( /x/g .__noSuchMethod__; __iterator__ = #1#; ({__iterator__: null})) {const prototype; }");
tryItOut("let([(__count__.constructor), __count__.__parent__, [({ prototype: prototype, __noSuchMethod__: [constructor, ] }), ({ __iterator__: ({ __count__: prop }), prototype: ({ __proto__: prop, __parent__: function::__proto__ }) }), , , ], ], __proto__ = (((Math.pow)(<x><y/>\t</x>, <x/>)).eval(<x/>.yoyo(<x><y/></x>)) / __parent__ =  /x/ )) { export *;");
tryItOut("/*infloop*/M:do {export prototype; } while(<><x><y/></x></>(1.2e3, true).__parent__ = ((<><x><y/></x></>\n)--));");
tryItOut("if((__noSuchMethod__ = (p={}, (p.z = <x><y/></x>)()))) {var prototype; } else  if (window) with({__count__: <y><z/></y>}){gc()export __noSuchMethod__; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let __proto__; (*.isPrototypeOf((p={}, (p.z = ~eval(\"*\", this))()))); new String().__lookupSetter__(\"prototype\")) {({}).__lookupGetter__export *;__proto__;-=  }");
tryItOut("/*infloop*/while(<><x><y/></x></>)const __parent__;");
tryItOut("if(prototype.({ __iterator__: ({ __iterator__: ({ __iterator__: prototype, __count__: __noSuchMethod__ }), function::__noSuchMethod__: ({ prototype: prop }) }) })) (1.2e3); else {yield <x><y/></x>;4.; }");
tryItOut("/*for..in*/M:for(var prototype in (((1 for (x in [])))(-<><x><y/></x></>.unwatch(\"constructor\")))){{}L: {/*\n*/return  /x/ ; } }");
tryItOut("/*infloop*/__count__");
tryItOut("/*infloop*/for(__iterator__; null; <><x><y/></x></>) let prototype;");
tryItOut("/*infloop*/M:while(yield <><x><y/></x></>)window;");
tryItOut("let (__count__ = yield * -= false, prop) { return; }");
