tryItOut("if((__noSuchMethod__)( \"\" )) /*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in <x><y/></x>) {const __proto__ = <><x><y/></x></>;var __count__, __noSuchMethod__ =  '' ; } else {switch( /x/ ) { case 5.0000000000000000000000:  } }");
tryItOut("/*for..in*/for(let __count__ in (__parent__.prototype getter= __count__ = <x><y/></x>) & 5.0000000000000000000000( /x/ , [z1])) {let (__proto__, __parent__) { if(033) continue ; else {const __noSuchMethod__ =  /x/g ;{} } } }");
tryItOut(";");
tryItOut("var __proto__ = __proto__; const prop;");
tryItOut("return;");
tryItOut("__iterator__ = (window.watch(\"__proto__\", new Function)); const constructor;");
tryItOut("with({}) { return; } ");
tryItOut("let (__parent__) {  }");
tryItOut("let(({ __iterator__: __noSuchMethod__, constructor: __noSuchMethod__ }) = true.isPrototypeOf( /x/ )) ((function(){throw constructor;})());");
tryItOut("L:if(new Function(<y><z/></y>, __noSuchMethod__)) { if (true) {}} else {export *;__iterator__; }");
tryItOut("/*infloop*/while(@foo)export *;");
tryItOut("if(constructor) {export __iterator__\t\n\ngc() } else with([[,].hasOwnProperty(\"__noSuchMethod__\") if (({}))]){const __parent__, prop;break M; }return;");
tryItOut("{/*for..in*/M:for(let [__noSuchMethod__, __parent__] = null in false) {/*infloop*/while(0/0){(<><x><y/></x></>);(@foo); } } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in <y><z/></y>) {with(true)((*).watch).call }try { return <><x><y/></x></>; } catch(prototype) { {} } finally { export prop; } ");
tryItOut("if(#2=({constructor: [,]})) {/*infloop*/M:for(this; <x><y/></x>; window) {yield false;return -0; } } else  if (yield -<y><z/></y>) {}");
tryItOut("{if((window)(<x><y/></x>)) { if ( '' ) export constructor; else {__count__, __parent__;; }}return; }");
tryItOut("if(this) throw <x><y/></x>; else continue M;");
tryItOut("L:while((( \"\" .yoyo(<><x><y/></x></>)\n)) && 0)L:with((\n<x/>))Math.sin");
tryItOut("throw StopIteration;");
tryItOut("yield @foo;");
tryItOut("L: {yield; }");
tryItOut("const get = <y><z/></y>;");
tryItOut("if(-3/0.__defineSetter__(\"__count__\", 'haha'.split)) throw __iterator__\n else M:with({constructor: 'fafafa'.replace(/a/g, 'haha'.split)})");
tryItOut("if(((p={}, (p.z = this.__defineSetter__(\"prototype\", (new Function(\"export __noSuchMethod__;\"))))()))) L:if(<x><y/></x>) { if (prototype) {return; }} else break M; else  if (undefined.yoyo(1e81)) {let constructor = <x><y/></x>;/*infloop*/while(( for each (__noSuchMethod__ in true))(<y><z/></y>))export __iterator__; } else {{} }");
tryItOut("with(())yield;");
tryItOut("L:if(__proto__ = false[<x><y/></x>]) {gc() } else let __noSuchMethod__;");
tryItOut("if(new (function(q) { return q; })(( /* Comment */__iterator__))) const prop = this; else  if () {do {break M;{} } while((*::*) && 0); }");
tryItOut("switch(this) { default: break; case let (__proto__) ({constructor: *, __iterator__: (-0) }).__iterator__ = Iterator(): do return  '' ; while((( /* Comment */<y><z/></y>)) && 0);break; case (<><x><y/></x></>.yoyo(<><x><y/></x></>) instanceof 0/0.__parent__): <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) {} else  if (<x/>) export constructor;case __proto__: case 6: const prototype: <x/>;case 6: throw window; }");
tryItOut("/*infloop*/for(let ({ constructor: ({ function::prop: ({a2:z2}), __count__: __parent__ }) }) = constructor.__iterator__ = <x><y/></x>.propertyIsEnumerable(\"constructor\"); ((p={}, (p.z = this)()).__parent__); (!.2)(each, [z1,,])) /*infloop*/do {export prototype; } while((\n3));");
tryItOut("with(3/0.prop){if(@foo) { if (({})) {var constructor =  /x/ , __parent__;export *::*; } else window} }");
tryItOut("(<><x><y/></x></>);");
tryItOut("with(this.zzz.zzz)yield  '' ;\n{}\n");
tryItOut("M:with({prop: 'fafafa'.replace(/a/g, ([1,2,3,4].slice).call)}){export __parent__; }");
tryItOut("M:do yield; while((@foo) && 0);");
tryItOut("/*for..in*/M:for([__noSuchMethod__, __noSuchMethod__] = 3/0 in function(id) { return id }) {; }\ngc()");
tryItOut("for(let y in []);");
tryItOut("with({constructor: (( \"\"  ^= <x><y/></x>)--)}){return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in this) { }\n");
tryItOut("export gc();");
tryItOut("/*infloop*/M:for((<x><y/></x>)(@foo); __count__.(( /x/ .__iterator__)); --<y><z/></y>\n &= false) {gc()/*for..in*/for(let __iterator__ in (('fafafa'.replace(/a/g, (constructor).__defineSetter__))((<x><y/></x>)(<x><y/></x>, undefined) in yield true)))yield; }");
tryItOut("if(__iterator__) { if ( '' ) {yield; }} else {throw *::*; }");
tryItOut("with({__proto__: (new (function ([y]) { })())}){throw null; }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(<x><y/></x> + true.__defineGetter__(\"prototype\", Function); \nfunction(id) { return id } | eval(\"prototype\", function(id) { return id }); prototype.prototype setter= (__iterator__).call) var __noSuchMethod__ = -3/0;");
tryItOut("L:if((Object())) {{} } else  if (( /x/ .__defineSetter__(\"__proto__\", (function(q) { return q; }).apply), <x><y/></x>).__iterator__ =  get __noSuchMethod__ setter (__parent__) { return constructor } ) {export prototype; } else {{} }");
tryItOut("L:with({__noSuchMethod__: prototype = [ \"\"  >>>=<x><y/></x>] * prop = window.__lookupGetter__(\"__count__\")}) \"\" \n");
tryItOut("try { __noSuchMethod__ = prototype; } finally { return (window.throw(({a2:z2}))); } ");
tryItOut("prop([z1].__defineSetter__(\"__count__\", <x/>))");
tryItOut("let (constructor = <y><z/></y>, constructor = constructor.function::constructor) { throw window\f;; }");
tryItOut("export  { yield <x><y/></x>.__parent__ } \n");
tryItOut("[, [, ], ({ __noSuchMethod__: __proto__, prop: __proto__ })]");
tryItOut("if((Math.sin)(new this() |=  /x/g .__iterator__)) {/*infloop*/for(const __proto__ = true; true; 1e+81) (@foo); } else  if (*::*) break L; else {yield window; }");
tryItOut("throw function::__iterator__\t;");
tryItOut("with(eval(\"( \\\"\\\" .throw(<><x><y/></x></>).__defineGetter__(\\\"constructor\\\", function  prop (__proto__) { return [-3/0].filter(Math.pow) } ))\", 'fafafa'.replace(/a/g, function(q) { return q; }).throw(<x><y/></x> .@ true ? (yield __iterator__) : ({prop }))))__count__ =  '' , 'fafafa'.replace(/a/g, Function)");
tryItOut("/*for..in*/for(let prototype = eval(\"while((prop) && 0){throw undefined;let __count__ = this, __iterator__; }\", ((null))) in ({__count__: this}).hasOwnProperty(\"__count__\")) {/*infloop*/for(var __noSuchMethod__ =  '' .throw(@foo.__defineGetter__(\"__count__\", new Function)); {} .@*:: <><x><y/></x></>; ((p={}, (p.z = <y><z/></y>)()))) (((<x/> ? this : *) for each (prototype in [1,,]) if (<y><z/></y>))); }");
tryItOut("with({__proto__: this.__defineSetter__(\"prop\", function (__iterator__)prop)})var constructor =  /x/g , function::constructor;");
tryItOut("/*infloop*/while(new  '' \t.*(true)){yield;var prototype = constructor, prototype; }");
tryItOut("L:if(prototype.constructor = <y><z/></y>) {const __noSuchMethod__ = __count__, __noSuchMethod__;return; } else  if (undefined) {({}).hasOwnProperty } else \n/*infloop*/while(<x><y/></x>)yield;");
tryItOut("for(let y in [5,6,7,8]) __count__ = constructor;");
tryItOut("M:if((p={}, (p.z = <><x><y/></x></>)())) { if (((this)(*, -1) ? null.__count__ =  \"\"  : constructor.__iterator__ setter= gc)) {gc()export *; }} else {function ([y]) { };{} }\nwith(([1,2,3,4].slice)(undefined, <><x><y/></x></>)){;var prototype = function ([y]) { }, prop = <><x><y/></x></>; }\n");
tryItOut("L: {yield  /x/ ;let (__noSuchMethod__ = __proto__, prototype = __count__) { export __iterator__; } }");
tryItOut("while((#2=true) && 0){{throw <><x><y/></x></>;; }(@foo); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in (prop = .2)) L:with(<><x><y/></x></>.isPrototypeOf(constructor))L:do {constructor = @foo; } while(((-0)) && 0);");
tryItOut("let (constructor = window, prototype = null) {  set prop() { yield <y><z/></y> }  }");
tryItOut("{yield undefined;throw <x/>; }\n");
tryItOut("L:if((!<x><y/></x>)) {if(let (__count__, __parent__ = <x/>) <><x><y/></x></>) let __proto__; else  if (<y><z/></y>.throw(<x><y/></x>)) export prototype; } else  if (@foo) __iterator__, constructor; else {__proto__, __noSuchMethod__; }");
tryItOut("/*for..in*/for(prototype in (((eval(prototype.__proto__ getter= [1,2,3,4].slice, <><x><y/></x></>)).watch)(<bbb xmlns:ccc=\"({ __proto__: __parent__, prop: __count__ }) = this\"><ccc:eee></ccc:eee></bbb>))){throw -0; }");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("/*infloop*/for(var ({ constructor: ({ function::function::__parent__: ({ __iterator__: function::__iterator__, __noSuchMethod__: __proto__ }) }), __iterator__: ({ prototype: <bbb xmlns=\"<><x><y/></x></>\">yyy</bbb>, __noSuchMethod__: __parent__ }) }) = this.yoyo(undefined).isPrototypeOf(({}.valueOf(\"number\"))); this.__lookupSetter__(\"__proto__\"); new (undefined)(this, -1)) {if([,,z1]) {{} } else prop = <y><z/></y>, constructor; }");
tryItOut("/*for..in*/for(let prop(5.0000000000000000000000) in <x><y/></x>.__defineSetter__(\"__proto__\", ({}).__lookupGetter__)) {gc() }\nlet (({$: __noSuchMethod__,  get __iterator__ prop (__proto__, function::constructor) { return @foo }  }), __proto__) { break ; }");
tryItOut("M:switch(( /* Comment */(prop = 5.0000000000000000000000))) { case 8: /*for..in*/for(const prototype in <y><z/></y>) /*infloop*/L:for(__proto__ =  /x/g ; <x><y/></x>; <y><z/></y>) {export *; }break; case (delete <><x><y/></x></>): break; case 0: break; case 3/0: break;  }");
tryItOut("let( set __parent__ constructor () { __count__, constructor = this; }  = this.__defineGetter__(\"constructor\", (1e4).__defineSetter__), function::prototype = *::*.throw(__proto__)) ((function(){yield yield constructor =  /x/ ;})());");
tryItOut("do /*infloop*/for(let prop; (<><x><y/></x></> !== true); (<x/>\n)) {({}).hasOwnPropertyyield; } while(((prototype = <><x><y/></x></>)) && 0);\n{throw  /x/g ; }\n");
tryItOut("L:with({__parent__: (((#1#)(0.1) = ((p={}, (p.z = #1=[#1#])()))) - null.__lookupSetter__(\"__iterator__\"))})M:if(([15,16,17,18].sort(/a/gi, (-1)))) {yield [,,z1]; } else {continue ;throw this; }");
tryItOut("\fM:if(@foo.propertyIsEnumerable(\"prop\")) {__proto__;yield; }");
tryItOut("M:do  while(((let (__count__) <y><z/></y>)--) && 0);");
tryItOut("L:if(<><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\")) { if (<x><y/></x>.__iterator__) { } else yield;}");
tryItOut("<y><z/></y>\nlet __parent__ =  \"\" ;");
tryItOut("try { gc() } catch(function::constructor) { yield true; } ");
tryItOut("L: ");
tryItOut("yield this ? [z1] :  /x/ ;");
tryItOut("/*infloop*/for(var __proto__ =  '' ; <y><z/></y>; null) {export *; }");
tryItOut("if(<><x><y/></x></>) 3;");
tryItOut("{function(q) { return q; }\nvar constructor =  '' , getter; }");
tryItOut("/*for..in*/for(let [, prototype] = 1e+81.__noSuchMethod__ = (let (({ __count__: constructor, prototype: __noSuchMethod__ })) new function(q) { return q; }( '' , *::*)) in [(<><x><y/></x></> for (__parent__ in -0))].map(({}).hasOwnProperty)) new Function");
tryItOut("M:if([true].some((*).call)) {M:with(new (@foo)()){(*); } } else  if (prop) {gc()yield window; } else {return *::*;({a2:z2}); }\n");
tryItOut("if( '' .prop = <><x\r><y/></x></>) {if(()) { if ( /x/ ) (({a1:1})).watch else {continue ; }} } else  if (-3/0.watch(\"__count__\", (gc).apply)) {while(( '' ) && 0)export constructor; } else {with([1,,]){prop; } }");
tryItOut("/*for..in*/for(const (<x><y/></x>)(1e4) in (([1,2,3,4].slice)( /* Comment */<><x><y/></x></> ? * : 1.3(*::*)))){gc() }");
tryItOut("if(({__noSuchMethod__: * })) {/*for..in*/for([__iterator__, prototype] = <x><y/></x> in [1,,]) __noSuchMethod__: (-1) } else /*for..in*/for(__count__ = prototype = <x><y/></x>.([,,z1]) in this) continue M;");
tryItOut("M:with(*){var __parent__; }\n{prototype = <y><z/></y>;<x/>; }\n");
tryItOut("break M;");
tryItOut("L:with({__count__: (__noSuchMethod__) == <x/>.@*\t}){let prototype = <><x><y/></x></>; }\nyield  /x/ ;");
tryItOut("with(__parent__){; }\nbreak L;");
tryItOut("/*infloop*/for(const __iterator__ = ( ''  >= <x/>); (uneval((function ([y]) { })())); (<><x><y/></x>\t</>)(__proto__) = ({})) /*for..in*/for(let __proto__ in constructor) {yield <x><y/></x>;export prototype; }");
tryItOut("M:while((yield ({a2:z2})--) && 0){break ;return ({a1:1}); }");
tryItOut("with(.@foo)let constructor = <><x><y/></x></>;");
tryItOut("while((<><\fx><y/></x></>) && 0)const __noSuchMethod__ = <x/>, constructor;");
tryItOut("/*infloop*/L:for(void * .@x:: (constructor != <x><y/></x>); (prototype.(1e+81)); (constructor = <y><z/></y>)) {; }");
tryItOut("/*for..in*/for(var __parent__ = <x/> in <x><y/></x>) {{} }\nthrow prototype\nL:with({prototype: __proto__.prop})gc()\n");
tryItOut("L:if([prop = window if (function ([y]) { })]) { if ((function (__parent__) { return __noSuchMethod__ } )())  /x/ ;} else {}");
tryItOut("/*for..in*/M:for(__iterator__//h\n = prop =  '' (+<y><z/></y>) in window) (arguments);");
tryItOut("/*for..in*/L:for([__parent__, prop] = (this.__defineGetter__(\"__count__\", (new Function(\"1.3;\")))) in <x><y/></x>) let(__noSuchMethod__ = <y><z/></y>, __proto__) { prop = <x><y/></x>;");
tryItOut("{} const __noSuchMethod__;");
tryItOut("{}\nreturn\nbreak M;\n");
tryItOut("yield __count__.unwatch(\"prototype\");");
tryItOut("if(prop.prop = <x/>.__lookupSetter__(\"__iterator__\"))  else  if ((( /* Comment */__parent__)((\n<><x><y/></x></>)(), new Exception()))) {L:with({__proto__: @foo}){yield; } }");
tryItOut("__parent__ = __count__;");
tryItOut("/*for..in*/for(let prop, function::__iterator__ = [<y><z/></y>].sort((<y><z/></y>).watch) in ) let __noSuchMethod__ = __parent__, __proto__;");
tryItOut("let (prop) { export __parent__; }");
tryItOut("do {export __noSuchMethod__; } while(((window for (__parent__ in constructor)//h\n)) && 0);");
tryItOut("if(<><bbb xmlns:ccc=\"(__proto__.(__iterator__ = <><x><y/></x></>))\"><ccc:eee></ccc:eee></bbb></>) { if (((return) for each (__noSuchMethod__ in -0 %=  /x/g ) for each (__iterator__ in prop = __parent__) for each (__iterator__ in [[1]]) for ( \"\"  in @foo) if (*::*))) {throw  /x/g ;\nexport *;\n }} else let __count__ = window;");
tryItOut("if(constructor.valueOf(\"number\")) throw this;");
tryItOut("while(((eval(\"<x><y/></x>\", (eval(\"<x/>\", <><x><y/></x></>))))) && 0)gc()");
tryItOut("do let __parent__; while((<><x><y/></x></> === <y><z/></y>) && 0);");
tryItOut("if(<><>yyy</></>) break ; else if(null % [1]) { if (null) gc()} else {export prototype; }");
tryItOut("if(eval(\"<x/>;\", (null.hasOwnProperty(\"__count__\") ? <x><y/></x>.(-1) : (eval(\"var prototype = <><x><y/></x></>;\", *::*))))) { if (((eval(\"(__proto__.prototype = this)\", (3.watch(\"prop\", *)))) if ((({a2:z2}).__lookupSetter__(\"prototype\")).yoyo([null])))) {gc() } else /*infloop*/while(<><x><y/></x></>)return;}");
tryItOut("/a/gi\n;");
tryItOut("with({}) __iterator__ = prototype;");
tryItOut("yield;/*infloop*/for(prop = (eval(\"/*infloop*/for(*; <y><z/></y>; window) {yield 0.1; }\", this)); ({__proto__: true}); ([15,16,17,18].map((null).__defineSetter__, 033))) var __count__, constructor = [1];");
tryItOut("L: {yield; }");
tryItOut("#1=[#1#];");
tryItOut(";");
tryItOut("L: ;");
tryItOut("/*infloop*/do throw <x/>; while(Number(*::*.throw(window)));");
tryItOut("/*for..in*/for(let [__proto__, __iterator__] = <>constructor = <><bbb xmlns=\"<y><z/></y>\"><x><y/></x></bbb></></> in ({__noSuchMethod__ setter: <x><y/></x>\r, __proto__ getter: [1,2,3,4].map })) L: {constructor, __parent__ = this;gc() }");
tryItOut("let prop = <y><z/></y>, prototype;");
tryItOut("L:do {return undefined; } while((<y><z/></y> ? Iterator(<x><y/></x>) : * -= prototype ? ((0/0 if (1.2e3))) : *) && 0);");
tryItOut("if(__iterator__.__iterator__) {/*infloop*/for(function ([y]) { }; true; window) {; } } else {gc()continue L;(1 for (x in [])) const constructor; }");
tryItOut("with({}) { window; } ");
tryItOut("/*infloop*/({ prototype: __proto__, __proto__: prototype })");
tryItOut("with({constructor: <><xxx>{()}</xxx></>.eval(eval(\"yield (-0);\", (__noSuchMethod__\n)))}){L: {prop; }[1,2,3,4].slice }");
tryItOut("while((\t__count__) && 0){return 3;function  function::prop (__parent__) { yield <><x><y/></x></> }  }\n/*for..in*/for(const [constructor, __iterator__] = this in <><xxx {__count__}={><x><y/></x><[] =  \"\" .eval(<x/>)/>} /></>) {__count__let (constructor = window, constructor) { export *; } }\n");
tryItOut("L: {export prototype;yield; }");
tryItOut("if(( '' .__defineSetter__(\"__parent__\", Math.pow))) if((<y><z/></y>).__defineSetter__(this, <x><y/></x>)) throw  \"\" ; else  if (<xxx>{__noSuchMethod__}</xxx>) /*\n*//*infloop*/while(<>(-0)</>)export __proto__; else {try { (1 for (x in [])) } catch(__noSuchMethod__ if get) { return 0.1; }  }");
tryItOut("/*for..in*/for(let __noSuchMethod__.__iterator__ in (-3/0.watch(\"__proto__\", [1,2,3,4].slice))) gc()");
tryItOut("let(constructor = __count__.unwatch(\"prop\") %= (<x/>\t)[#3={a:#3#}]) ((function(){with({}) { return; } })());");
tryItOut("throw __count__;");
tryItOut("{{} }");
tryItOut("__count__ = __iterator__;");
tryItOut("with({}) { try { with({}) { return window; }  } finally { for(let y in [5,6,7,8])  ''  = #3={a:#3#}; }  } ");
tryItOut("__iterator__ = __iterator__;");
tryItOut("/*infloop*/L:do {for(let y in [5,6,7,8]) return ({a1:1}); } while((((constructor.(*))(undefined, __iterator__ = (function ([y]) { })()))().eval(yield  \"\" , (({a1:1}))[this])));");
tryItOut("for(let y in []);");
tryItOut("");
tryItOut("L:if(<>(__count__) =  { yield -3/0; } .__defineSetter__(\"__count__\"/, [1,2,3,4].map)</>) yield; else  if (((this.zzz.zzz)).yoyo((<><x><y/></x></>.watch(\"constructor\", *::*) .@ 'fafafa'.replace(/a/g, undefined)))) {switch((window.valueOf(\"number\"))) { case @foo: break;  }<><x><y/></x></> = true; }");
tryItOut("do /*infloop*/for(var ({ __noSuchMethod__: /*\n*/({ __iterator__: __iterator__, __noSuchMethod__: __proto__ }) }) = __proto__[window]; ([,,z1]).call([[1]], ) ? __parent__ = <><x><y/></x></> : (RangeError()); <x><y/></x>.watch(\"__proto__\", Math.pow)) export * while((({ constructor: prototype }) = __iterator__.__iterator__) && 0);");
tryItOut("if((p={}, (p.z = #2=[__parent__ = this for each (constructor in null)])()))  else {(undefined).__defineSetter__ }");
tryItOut("/*for..in*/for(const [constructor, __noSuchMethod__] = [constructor.prototype = window for ((__parent__.new Iterator(<x><y/></x>, [,])) in (.__noSuchMethod__)) for each (__proto__ in __noSuchMethod__ <=  ''  :: ([prop]))] in ((({__noSuchMethod__ getter: 1.3 }).valueOf(\"number\")) >>> __noSuchMethod__ =  \"\" .__lookupSetter__(\"__noSuchMethod__\"))) {var prototype = 3/0, __noSuchMethod__;if(let (function::__parent__ = @foo, constructor = [,]) window) export __count__; }");
tryItOut("__noSuchMethod__");
tryItOut("return");
tryItOut("if(undefined) return; else  if (prop = prop) {__proto____iterator__; } else  if (<y><z/></y>.@*)");
tryItOut("");
tryItOut("/*infloop*/for(const __parent__ = [constructor, ({ constructor: __proto__ }), __parent__] = ; typeof this; (<><x><y/></x></> for (prototype in false)).__defineGetter__(\"__noSuchMethod__\", gc) && (( /* Comment */([true for each (__noSuchMethod__ in window)])).__defineSetter__(\"__count__\", [1,2,3,4].map))) {for(let y in []); }");
tryItOut("this.zzz.zzz;");
tryItOut("const __count__, __count__\n");
tryItOut("if(<{__parent__}>yyy</{__parent__}\t>) { if (( /x/g .valueOf(\"number\")).throw( \"\" .prop)) /*infloop*/while(<x><y/></x> / window){yield; } else return\n}");
tryItOut("with({}) {}");
tryItOut("with({constructor: ((__count__ += ({})) /= let (__parent__, prop) @foo)}){[1,2,3,4].map }");
tryItOut("if(-0) { if ((function ([y]) { })()) yield\n else ;}");
tryItOut("/*for..in*/for( in ((eval)(prototype = window)))throw StopIteration;");
tryItOut("/*infloop*/for(<y><z/></y>; window; \t<x><y/></x>) const __count__ = [1], __proto__ = <x><y/></x>;return *;");
tryItOut("/*for..in*/for(var [__iterator__, prop] = (p={}, (p.z = ((uneval(<x><y/></x>)) if ( '' )))()) in (__count__ = this)( /x/  << false)) {if(<><x><y/></x></>) yield #1=[#1#]; else {}if(<x><y/></x>) { if (<><x><y/></x></>) {} else export prop;} }");
tryItOut("if((throw constructor = __parent__ = window--)) /*for..in*/for(const (constructor) in @foo) export *;");
tryItOut("M:if(yield ((new (<x><y/></x>)(3)) >= new Date())) yyy/*\n*/ else  if (__count__.isPrototypeOf(prop -  /x/ )) {(<><x><y/></x></>);gc() } else (<><x><y/></x></>);");
tryItOut("with({}) { for(let y in [5,6,7,8]) {} } ");
tryItOut(";");
tryItOut("if(new Date({function(y) { yield y; var __iterator__ = ({a2:z2}); yield y; } })) { if ([1]) {const __proto__;\ncontinue ;\nexport __noSuchMethod__; } else with\r(this){let constructor, __proto__ = [z1,,];return; }}");
tryItOut("export *;prototype;");
tryItOut("do {if(<><x><y/></x></>) constructor = *::* else {{yield;return __count__; }gc() } } while((let (prop, __iterator__ = 4.) (<x><y/></x>--)) && 0);");
tryItOut("\nexport *;");
tryItOut("");
tryItOut("L: var __noSuchMethod__, __proto__;");
tryItOut("/*infloop*/for((prototype = ([11,12,13,14].some)); ((#2=<><x><y/></x></> |= __noSuchMethod__)); (* > [,,z1].unwatch(\"__noSuchMethod__\") ? 1e+81.__noSuchMethod__ :  '' |=(__proto__.__proto__ = <><x><y/></x></>))) {((1 for (x in []))).callwith({}) {} }");
tryItOut("/*infloop*/L:do {yield window;let __iterator__; } while((yield <x><y/></x>.yoyo(<x><y/></x>)));");
tryItOut("yield __proto__;");
tryItOut("let(({ [({ constructor: prototype }), []]: getter, __iterator__: ({ prototype: prototype }) }) = <y><z/></y>) { let(constructor = (({__parent__ getter: function () { yield constructor }  })), constructor) { with({}) throw StopIteration;");
tryItOut("/*for..in*/for(var \nlet (constructor) 1e-81 = __noSuchMethod__.__lookupSetter__(\"x::constructor\") in false( /x/g , window)) {var __proto__, __iterator__ =  /x/g ; }");
tryItOut("{{export __noSuchMethod__;continue ; } }");
tryItOut("if((<{__parent__}>yyy</{__parent__}>.(new <x/>()))) ");
tryItOut("/*infloop*/for([prop if (@foo)]; __iterator__.throw( /x/g ); (new [1,2,3,4].slice(__noSuchMethod__(3/0) = false.__lookupGetter__(\"__iterator__\"), prop))) {return;/*for..in*/for(let __count__ in ((!3.141592653589793)((<><x><y/></x></>.eval(function(id) { return id })))))gc() }");
tryItOut("while(((<x><y/></x>.yoyo(__iterator__))[(__parent__ =  /x/g ).valueOf(\"number\")]) && 0){{yield; }return\n  }");
tryItOut("if((({ __iterator__: prop }) = ({ __noSuchMethod__: prop }))) { if (prototype = Boolean()) {yield <x><y/></x>;<x/>; }} else ( '' );");
tryItOut("{let (__noSuchMethod__ = __count__ = __iterator__) { continue ; } }");
tryItOut("if((this.__defineGetter__(\"prop\", (4.).watch))(__proto__.isPrototypeOf(<y><z/></y>.eval( '' )), __proto__.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)\n)) {prototype;/*for..in*/M:for( ''  in \t<x/>) const __count__ = null, constructor; } else {if(window.__lookupGetter__(\"__parent__\")) { if (<x/>--) {throw <y><z/></y>;let __iterator__, __noSuchMethod__; }} else {return; }export __count__; }");
tryItOut("{{}{} }");
tryItOut("L:if(('haha'.split).call(window, ).propertyIsEnumerable(\"prototype\")) {L/*\n*/: {var constructor, __noSuchMethod__; } } else  if () {continue ; }");
tryItOut("yield <x><y/></x>\n");
tryItOut("L:switch(yield) { default: case (Function): break; /*infloop*/while(null){const prop = <x><y/></x>; }break; case yield false: yield; }");
tryItOut("/*infloop*/for((export __noSuchMethod__); ( /x/  if (3)); 1e+81) {yield; }");
tryItOut("/*for..in*/for(var [constructor, __noSuchMethod__] = constructor.__proto__ in <x><y/></x>) {yield __iterator__;let delete, <y><z/></y>; }");
tryItOut("L:while((null) && 0){ }");
tryItOut("{(( /x/ .isPrototypeOf(<x><y/></x>)).isPrototypeOf(new ((new Function(\"prop;\")))( /x/ ))); }");
tryItOut("{}");
tryItOut("new Function\n");
tryItOut("/*for..in*/for(var constructor.prototype in <x/> *=  /x/g ) {L:if(*::*) {prop, prop = true;var __noSuchMethod__ = __iterator__, __count__; } else {yield -0; }yield; }");
tryItOut("M:switch(+false %= @foo) { case 2: case 7: yield;break; default: __count__;break; case yield gc().unwatch(\"prop\"): ; }");
tryItOut("{{export __count__; } }");
tryItOut("/*infloop*/M:do {with(<><x><y/></x></>){const __count__, __count__; } } while((__proto__.__parent__)[[[]]]);");
tryItOut("/*infloop*/while(__parent__)L:if([,,z1]) return <><x><y/></x></>; else  if (true) return \ntrue; else ;");
tryItOut("/*for..in*/for(const prop(this) in null) {return window; }");
