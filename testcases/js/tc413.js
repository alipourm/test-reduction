tryItOut("/*for..in*/L:for(let __parent__ = <x><y/></x> in undefined) {export __noSuchMethod__;return; }");
tryItOut("var prototype = *::*;");
tryItOut("(1e+81); const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop['__count__'] in (new Iterator())) prototype");
tryItOut("{let(prop = null, __noSuchMethod__ = ( \"\"  for (__proto__ in *)) for ( /x/g .//h\nprop in false)) ((function(){let(__iterator__ = (<><x><y/></x></>)[<y><z/></y>], __proto__ = (x::prototype = x::__count__)) ((function(){throw StopIteration;})());})()); }");
tryItOut("for(let y in []);");
tryItOut("{{export *;yield *::*; } }");
tryItOut("switch((return (uneval(__proto__.(prop))))) { default: break;  }");
tryItOut("yield\nfor(let y in []);");
tryItOut("/*infloop*/for(const prop; <><x><y/></x></>; window) {[,,]var __noSuchMethod__; }");
tryItOut("/*infloop*/M:do {throw <y><z/></y>;yield; } while( \"\" .__lookupSetter__(\"__parent__\"));");
tryItOut("return;");
tryItOut("if(<x/>.hasOwnProperty(\"prototype\").hasOwnProperty(\"prototype\")) { if ( /* Comment */(yield <><y><z/></y></>)) with(<x><y/></x>){yield this;; } else {/*for..in*/for(__iterator__ = window in <y><z/></y>) ; }}");
tryItOut("with(<> </>)M:do {} while(( '' ) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in prototype.__defineSetter__(\"__parent__\", \tfunction(q) { return q; })) {if((__iterator__\f = <x/>)) { if (eval(\"this\", <><x><y/></x></>)) export *; else export constructor;}var ({ __parent__: prop }) = (__parent__), __proto__; }");
tryItOut("while((__noSuchMethod__ = prop) && 0)switch((prop.@*)) { default: case __noSuchMethod__ = <><x><y/></x></>:  }");
tryItOut("/*for..in*/for(var constructor = \t1.3 = (([true].map(({}).__lookupGetter__)))(<x><y/></x> || [[]], <x><y/></x>).@foo in new ((new Function(\"break ;\")))(-1, @foo).__lookupGetter__(\"__count__\")) if([,,z1] if (null)) {<x><y/></x> } else  if ((eval(\"*::*;\", yield constructor))) {yield;([[1]]); } else {export constructor; }");
tryItOut("/*for..in*/M:for(prototype =  \"\" .eval(__noSuchMethod__ &= *) in (p={}, (p.z =  \"\" )())) {if([11,12,13,14].map) { if (((p={}, (p.z = <><x><y/></x></>)()))) {var prototype; }} else {return; }yield  /x/ ; }");
tryItOut("/*for..in*/for(prototype in 5.0000000000000000000000) export *; const prop;");
tryItOut("/*infloop*/while(((new Function(\"export *;\")))((function(y) { yield y; return;; yield y; }), prop)){yield undefined; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for((undefined); <x><y/></x> .@*:: <x><y/></x>; <x/>\n) {return; }");
tryItOut("/*infloop*/while( \"\" )/*infloop*/for(let ({ __iterator__: (<x/>)(function ([y]) { }), __count__: ({ constructor: prototype, prototype: function::prop }) }) = ({constructor getter: new Function }); <><x><y/></x></>++; [] = ({ prop: [__proto__, , __noSuchMethod__, constructor, ], __noSuchMethod__: prototype })) {M:if(<x><y/></x>) { if (0/0) {gc() }} else <x><y/></x> }");
tryItOut("\tif(window.propertyIsEnumerable(\"constructor\")) <x><y/></x>");
tryItOut("__proto__");
tryItOut("if(__parent__.__noSuchMethod__ setter= [,]) {gc() } else  if (__noSuchMethod__.(*::*)) {prop; }");
tryItOut("{}");
tryItOut("{yield  \"\" ;return; }");
tryItOut("/*for..in*/L:for(let [__proto__, __parent__] = (yield false) in (p={}, (p.z = <><x\f><y/></x></>)())) {let (constructor, __parent__ = null) {  { yield __parent__.unwatch(\"constructor\") }  } }");
tryItOut("{/*infloop*/M:for(const {}; 1.2e3.yoyo( catch );  \"\" .eval(__noSuchMethod__)) {yield __iterator__; } }");
tryItOut("/*for..in*/L:for(__iterator__(prototype = prop.__lookupSetter__(\"__noSuchMethod__\").unwatch(\"__parent__\")) in window) do /*for..in*/for(let __noSuchMethod__ in *) {throw [[1]]; } while((window < window) && 0);");
tryItOut("L:if(eval(\"prototype = @foo\", *)) yield; else {/*infloop*/for(window; this;  '' ) {throw [,]; } }");
tryItOut("false\n([<x><y/></x>].filter(Math.pow));\n");
tryItOut("L:with({function::__iterator__: @foo})M:if((yield <y><z/></y>)) {} else  if (window) __noSuchMethod__ else throw constructor;");
tryItOut("/*for..in*/for(__iterator__ = <><x><y/></x></> in @foo) {throw <><x><y/></x></>; }");
tryItOut("if(prop) { if (__iterator__ = prototype = <x><y/></x>) {/*infloop*/do {__iterator__ for (__iterator__ in ({})) } while( '' ); } else {export *;((new Function(\"{}\"))).call }}");
tryItOut("prototype = __iterator__;");
tryItOut("throw <x/>;");
tryItOut("if(constructor) {;{} }\f else #1=[#1#];");
tryItOut("M:if((this.__defineSetter__(\"constructor\", \n-0)))  else  if (this.__defineGetter__(\"prop\", 1.3)) (1 for (x in []))");
tryItOut("\n");
tryItOut("/*for..in*/for(let __parent__ = !() in (function (__parent__)(((1 for (x in [])))(<x><y/></x>)))((__iterator__ =  /x/g ))) {let(prop) ((function(){prop = prop;})());L:if(((uneval(<x/> < #1=[#1#])))) {export prototype;throw <x><y/></x>; } else  if (new RegExp(prop, 0x99)) export *; else {gc(){} } }");
tryItOut("while(((constructor * constructor)) && 0)gc()");
tryItOut("let (__count__) { gc() }");
tryItOut("/*infloop*/while((\n /* Comment */window)){export *; }");
tryItOut("/*infloop*/do let (prop, prototype = -0) { <y><z/></y>; } while([15,16,17,18].sort((new Function(\"__proto__\")), <><x><y/></x></>.hasOwnProperty(\"__noSuchMethod__\")));");
tryItOut("let (__noSuchMethod__) { /*infloop*/for(get; undefined @ <x><y/></x> .@x:: (*::*++)[(\nconstructor)]; [ /x/ ]) export prop; }");
tryItOut("L:with(new RegExp(('fafafa'.replace(/a/g, Function)), this))let __noSuchMethod__ = window;");
tryItOut("do break L; while(( '' ) && 0);");
tryItOut("/*for..in*/for(let constructor in ((({}).hasOwnProperty)(<y><z/></y>))){ }");
tryItOut("let(__count__ = ((this).call(1.2e3,  /x/ , <x><y/></x>) - <><x><y/></x></> if (this)), __iterator__) { const constructor;");
tryItOut("/*infloop*/for(let ({ prototype: __noSuchMethod__ }) = null.unwatch(\"__proto__\"); ((uneval(<x><y/></x>)));  \"\"  << null) {return;get }");
tryItOut("switch(this) { case prop: export *;break;  }");
tryItOut("/*for..in*/for(const prop = prop in (<y><z/></y> <<= *)) return this;");
tryItOut("__proto__ = constructor;");
tryItOut("let (constructor = [1,,]) { {export *; } }");
tryItOut("L:if([(delete <><x><y/></x></>) for (prop in <x><y/></x>) for (__proto__ in <><x><y/></x></>)]) { if (this.__defineGetter__(\"prototype\", [1,2,3,4].map))  else if(<y><z/></y>) gc() else  if (constructor) yield  '' ;}");
tryItOut("{if(1e-81) {export *\nreturn;continue ; } else {( '' );(this); } }");
tryItOut("if(*::*) ; else  if (((new Function(\"( '' );\"))).call(new function(q) { return q; }(), ({ get constructor prop (__parent__) { return this }  }), function(id) { return id })) /*for..in*/for(let constructor = <x/> in <x><y/></x>) __proto__; else {throw false;export *; }");
tryItOut("L:do {if((3)[*]) { if (function(id) { return id }.isPrototypeOf(<y><z/></y>)) yield;} else <x><y/></x>;/*for..in*/for(let __proto__ = (<x/>).watch in *::*)  } while(((__noSuchMethod__ = (constructor.prototype))) && 0);");
tryItOut("switch(this.__defineGetter__(\"__count__\", Function)) { case <x/> < 1e+81: /*for..in*/L:for(var [__parent__, __parent__] = (#0=[@foo]) in 1e4) <y><z/></y>;default: /*infloop*/for(let ({ __iterator__:  \"\" , constructor: __count__ }) = __parent__.__noSuchMethod__; [11,12,13,14].sort; prototype !== window\f) {(window);@foo }break; yieldbreak;  }");
tryItOut("/*for..in*/L:for([constructor, get] = this in (({prototype: constructor[constructor] }))) {window;do {export *\n-1; } while((constructor @ true) && 0)\n }");
tryItOut("let (prototype = ({a2:z2})) { yield; }");
tryItOut("/*infloop*/L:do { } while((<><x><y/></x></>)[-1]);");
tryItOut("if(prototype) {yield;__parent__; } else  if (\tthis.prop) continue ;");
tryItOut("let(__count__, prototype) { for(let y in []);");
tryItOut("yield (let (__count__ = null) function ([y]) { }.__lookupGetter__(\"__noSuchMethod__\"));");
tryItOut("/*for..in*/for([__iterator__, __proto__] = prototype in <><x><y/></x></>) \t");
tryItOut("/*for..in*/for(let __count__ = (__count__ = ({ __count__: [[, ({ prop: ({ function::__proto__: __noSuchMethod__, __parent__: __proto__ }) }), ], [__noSuchMethod__, ({ __noSuchMethod__: [constructor], prop: __parent__ })]], __proto__: constructor })) in null) __count__ = prop;");
tryItOut(" get ");
tryItOut("var constructor, __iterator__ = <><x><y/></x></>");
tryItOut("if(@foo >>> undefined) throw window; else {();; }");
tryItOut("export *\n");
tryItOut("/*for..in*/L:for(let default: /*infloop*/for(const __iterator__ = <><x><y/></x></>; <><x><y/></x></>; 1e-81) {export constructor; }case 6: export __proto__;break; break; continue L; in ((function  __proto__ (__noSuchMethod__) { return; } )( \"\" --)))gc()");
tryItOut("do  while((RegExp()) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in 3.141592653589793) ");
tryItOut("{/*infloop*/while(false.prototype = <x><\fy/></x>){(1e4)\r.__defineSetter__ }gc() }");
tryItOut("if(( /* Comment */* .. constructor.hasOwnProperty(\"__proto__\"))) { if (function (__noSuchMethod__, __iterator__) { M:switch(undefined) { case <x/>:  } const prop; }  = ({__iterator__: 3.141592653589793}).@foo) {return ({});L:if(false) { if (__noSuchMethod__) yield; else {yield; }} } else {switch(window.eval(*::*)) { case  /x/g : /*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in #1#) {gc()yield; }break; yield @foo;case : const __count__ = 0/0;break; break;  } }}");
tryItOut("if(this ? true : prototype) break M; else  if ([<><x><y/></x><\n/>].filter(({}).__lookupGetter__)) ( /x/g );");
tryItOut("M:if(*.eval(__parent__)) return; else  if ((prop = undefined)) {break ; } else ();");
tryItOut("if(<><x><y/></x></>) //h\n{ if (window) break M;} else var prototype = <x><y/></x>;");
tryItOut("/*infloop*/for(constructor.prop setter= <x><y/></x>['__parent__'] = delete (new Function(\"break ;\")); (void ((uneval((__count__.__count__ = (this)[null]))) ? * : typeof ( '' .@*))); <x><y/></x>.__defineSetter__(\"constructor\", <><x><y/></x>//h\n</>).valueOf(\"number\")) export prop;");
tryItOut("return;");
tryItOut("/*for..in*/for([__parent__, __proto__] = window in <y><z/></y>) {window }");
tryItOut("if(( /* Comment */true) > get.constructor = 3.141592653589793 %= true) { if ((p={}, (p.z = [1,,])()).watch(\"__count__\", (new Function(\"{}\")))) {if(window) {[]return 1e4; } else  if ( /x/ ) export __proto__; else gc() } else {switch( \"\" ) { case 3: ; } }}");
tryItOut("{(yield;);\nreturn;\nM:while(( /x/g ) && 0)<><x><y/></x></>; }");
tryItOut("export __iterator__;");
tryItOut("constructor");
tryItOut(";");
tryItOut("if((__noSuchMethod__ = <x/>)) /*infloop*/\tfor(constructor; window; <><x><y/></x></>) Math.pow else throw <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in (<x><y/></x> for \teach (prop in 3.141592653589793))) with(-1 in #1#)throw StopIteration\nif(<x><y/></x>) {export __count__;gc() } else  if (<y><z/></y>) yield false;");
tryItOut("with(this.zzz.zzz)/*infloop*/M:for(let prop; <x><y/></x>; [1,,]) yield;");
tryItOut("switch(<x><y/></x>.isPrototypeOf(<><x><y/></x></>).watch(\"__noSuchMethod__\", function(q) { return q; })) { default: new Functionexport *;break; break;  }with({constructor: true})prop, __iterator__");
tryItOut("/a/gi\n;\n");
tryItOut("__parent__ = __iterator__;");
tryItOut("M:switch((({__parent__: (constructor)[{}] }) >>> (yield  /x/g ), <x/>)) { case 8: if((window ^ <y><z/></y>) -= (({ __iterator__: {yield __parent__; }, __parent__: constructor }) = yield <y><z/></y>)) {return  /x/ ; } else  if ([/a/gi([1])]) {throw <y><z/></y>;gc() } else {\n }break; break; /*infloop*/for(__noSuchMethod__; window; <><x><y/></x></>) {<x/> } const __parent__;break; break;  }");
tryItOut("/*infloop*/do if(new [@foo for each (prop in @foo)]//h\n()) export *; while([11,12,13,14].map);");
tryItOut("{yield; }");
tryItOut("{L:with({__iterator__: -0})yield; }");
tryItOut("if(*::*.hasOwnProperty(\"setter\")\n === (<y><z/></y>.__parent__)) { if ((__noSuchMethod__)) while((prop) && 0)yield -0; else /*infloop*/do [,]; while(this);}");
tryItOut("/*infloop*/L:for((prop = __proto__.throw(new <><zzz><><x><y/></x></></zzz></>())); 5.0000000000000000000000; new [11,12,13,14].some ? [15,16,17,18].filter(({}).hasOwnProperty, function ([y]) { }) : *.isPrototypeOf()()) L: {if(window) function  __parent__ () { yield (-0) }  else  if (this) {yield <><x><y/></x></>;throw <x/>; }prop =  /x/ , prop = false; }");
tryItOut("while((<x><y/></x>[<x><y/></x>].__lookupGetter__(\"__count__\")) && 0)L:if(eval(\"0\",  \"\" )) { if (undefined.__count__) {throw 0x99\t; } else }");
tryItOut("{try { return; } catch(__count__) { for(let y in []); } finally { M:if(constructor) { if ([z1]) {return .2; } else export __parent__;} }  }");
tryItOut("M:with(#2=({__parent__: __count__}))continue ;");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("L:with({__proto__: (({ __proto__: [], __count__: ({ __count__:  yield , each: __parent__ }) }) = __iterator__.__iterator__ = 0x99 >> ( /x/ .__lookupGetter__(\"__noSuchMethod__\")))})export prop;");
tryItOut("/*infloop*/while(5.0000000000000000000000)if(this.propertyIsEnumerable(\"__iterator__\")) { if ((__noSuchMethod__.unwatch(\"constructor\") , {}.__defineSetter__(\"__parent__\",  \"\" ))) break ;} else gc()");
tryItOut("/*for..in*/for([__iterator__, , prop(\t(arguments.prototype).__lookupSetter__(\"constructor\")), ({ __noSuchMethod__: prop, constructor: ({ prototype: ({ __proto__: case 6:  }), constructor: __count__ }) }), ] in ((Math.pow)(/*\n*/(this.zzz.zzz))))let __proto__;");
tryItOut("with( { __iterator__ } )(__parent__);");
tryItOut("export prop;");
tryItOut("L:do {return; } while((<x/>) && 0);");
tryItOut("/*for..in*/for(const constructor((this.zzz.zzz)) in ((/a/gi)((eval(\"gc()\", window) ? x::__parent__ = prop : function(y) { yield y; return *;; yield y; })))){(<y><z/></y>)\nreturn; }");
tryItOut("let ([, [prototype, , __proto__, , []], ]) { yield; }");
tryItOut("M:if((let (setter) new (*::*)(3/0))) { if (if(*::*) { if (* << 0) {break M; } else return undefined;}) {export *;if(undefined) ({}).hasOwnProperty else  if (\n<y><z/></y>) {(arguments); } else { '' ; } }} else {return;let __noSuchMethod__ = (function ([y]) { })(), __parent__; }");
tryItOut("if(function::__count__.prototype = 0) export *; else  if (let (__proto__, set)  { return  \"\" .yoyo((function ([y]) { })()) } ) return 1e81; else var constructor, __noSuchMethod__ =  /x/ ;");
tryItOut("throw *\n");
tryItOut("if((new (<x/>)(constructor.yoyo(null), (({prop setter: new Function }))))) { if (window) {if(((p={}, (p.z = __count__)()))) window; else  if ((-3/0 >> @foo)) continue L; }} else {return; }");
tryItOut("prototype = __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in false) return");
tryItOut("throw *::*;");
tryItOut("/*for..in*/for(let __parent__.prototype in ((({a1:1}).__defineSetter__(\"__count__\", ((prop).watch).apply))((false <<  \"\" .valueOf(\"number\"))--))){continue L; const constructor;if(1e81()) switch(<x/>) { default:  } else  if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) yield false; }");
tryItOut("/*for..in*/M:for(let (new window()())(yield #0=({function::__iterator__: *::*}).isPrototypeOf((this.zzz.zzz))) in ((function  constructor (/*infloop*/do {continue ;break M; } while((#0=({constructor: <><x><y/></x></>.__defineSetter__(\"function::__iterator__\", function  prop (__parent__, prototype) { var __count__; } )})));) { yield __noSuchMethod__ = 1e-81.__lookupGetter__(\"__proto__\") } )())){__parent__ = constructor;let __noSuchMethod__, get; }");
tryItOut("/*for..in*/L:for(var function::__noSuchMethod__ in ((yield 1e+81))) if(__proto__) return; else  if (function::prototype) {continue M;throw <x><y/></x>; } else break ; const __iterator__;");
tryItOut("/*infloop*/for(var __iterator__; window ? <><x><y/></x></> : null; <><x><y/></x></> in <x><y/></x>) {do continue ; while((033) && 0); }");
tryItOut("L:with(__parent__ << __parent__){export __parent__; }");
tryItOut("/*for..in*/for(prototype = /a/gi in true) var \t__proto__ = -3/0;");
tryItOut("L: yield;");
tryItOut("{throw <x><y/></x> .@ <x><y/></x>;gc() }");
tryItOut("/*for..in*/for(let __parent__ = __count__ = window in <x><y/></x>) (<x><y/></x>);");
tryItOut("/*infloop*/do {; } while((\n\f<x><y/></x>));");
tryItOut("yield;\n;\n");
tryItOut("throw prop;");
tryItOut("with({}) return;");
tryItOut("if('fafafa'.replace(/a/g, function  __proto__ (__count__, __noSuchMethod__) { yield \t[,,z1] } ).* * (undefined.prop)) let __proto__, __parent__ = function ([y]) { }; else  if (window instanceof (eval(\"({ __parent__: prop, __iterator__: __proto__ }) = window <<= [1]\", (*::*)))) /*for..in*/for(let __iterator__ in  /x/g ) throw <x/>;");
tryItOut("if(eval(\" '' \", window)) {; } else  if (1.2e3.__defineGetter__(\"constructor\", ({}).hasOwnProperty)) {return;gc() }");
tryItOut("M:if(<x/>.__parent__) switch(undefined) { default: __noSuchMethod__ }");
tryItOut("return prop;");
tryItOut("/*for..in*/for(const __iterator__.constructor in (return.__noSuchMethod__)) {L:do let constructor; while(((prototype = (-1)).__lookupSetter__(\"constructor\")) && 0); }//h\n");
tryItOut("/*for..in*/for([constructor, prototype] = ({ get prototype __iterator__ () { return (<><x><y/></x></>([1,,], *))[1e4] }  }) in __proto__ =  \"\" \t) ((-0)); for each (__iterator__ in (({__count__: <x/>}))) for (( /x/g )(true) in (<y><z/></y>.hasOwnProperty(\"__parent__\"))) for each (__parent__ in *::*) if ([1])");
tryItOut("let([function::prototype, ({ prototype: /*for..in*/for(var __parent__ in ((function  constructor (prop) { return (({ set constructor(__parent__) { throw <y><z/></y>; }  })) } )(<x><y/></x>.yoyo(<x><y/></x>))))gc(), constructor: ({ __noSuchMethod__: this, __proto__: ({ constructor: __proto__ }) }) }), __proto__\f, ] = (Math.pow).call(new ('haha'.split)((<x><y/></x>.__defineGetter__(\"constructor\", prop))) .@x:: constructor.__iterator__ = __count__ = <><x><y/></x></>--, __parent__.__parent__ setter= function  constructor (__iterator__, constructor) { yield __parent__ } , 1e+81 & ([15,16,17,18].filter('haha'.split, window)))) ((function(){with({}) with({}) { M:switch(@foo) { case 9: export *; } } })());");
tryItOut("/*infloop*/while(new __count__: (prop.__iterator__ = [,])(<y><z/></y>, [1])['__count__'] = ( /* Comment */#1=[#1#].__defineSetter__(\"__parent__\", [1,2,3,4].map)))constructor");
tryItOut("L:if(prop = <><x><y\t/></x></>) { if (#0=({__parent__: (new ([[]])(<y><z/></y>))})) {const constructor; } else /*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <><x><y/></x></>) {export *;yield false; }}");
tryItOut("");
tryItOut("let(__noSuchMethod__ = __count__.delete getter= function(q) { return q; }.throw(__count__ = <x/>)) { constructor = prop;");
tryItOut("/*infloop*/for(const ({ prop\f: ({ __proto__: ({ x::prop: __proto__ }) }), __proto__: ({ __count__: constructor, __count__: prop }) }) = <><xxx>{prototype}</xxx></>; (/a/gi); export *--) var __proto__ = *;\n__noSuchMethod__, constructor;\n");
tryItOut("if((({a2:z2}) ==  '' )) if(*) { if (<><x><y/></x></>) {(this);export *; } else {return;export *; }}");
tryItOut("'haha'.split");
tryItOut("/*for..in*/for(let [prop, __count__] = [*::*].filter(function  __proto__ (__iterator__, __count__) { return constructor } ) in  \"\" ) ( /x/ );/*infloop*/for(const __proto__ = <x><y/></x>; window; *) {{} }\n");
tryItOut("/*for..in*/for(const constructor = ([11,12,13,14].some).throw(3 % [15,16,17,18].filter(function  prop () { return  ''  } , null)) ? return.__defineSetter__(\"prop\", function(q) { return q; }).propertyIsEnumerable(\"__count__\") : <y><z/></y> in prop.constructor.*) {/*for..in*//* nogeckoex bug 349964 */M: for  each(const __noSuchMethod__ in constructor) {yield window; }{} }");
tryItOut("{let (__proto__) {  }\n }");
tryItOut("do prototype = 3.141592653589793; while((<y><z/></y>) && 0);");
tryItOut("M:with(((window for each (__parent__ in 3)).@*)){throw 0.1;do  while((*) && 0); }\nlet(__proto__, prototype =  /x/ ) ((function(){__iterator__ = 1e81;})());\n");
tryItOut("/*infloop*/while(\n__count__((__noSuchMethod__.*)))try { ; } catch(prototype) { export *;\f } finally {  } ");
tryItOut("try { let(({ __iterator__: ({ __parent__: __parent__ }), prototype: ({ prop: prototype })//h\n })) { try { constructor.prototype = __proto__; } catch(__iterator__) { let(__parent__) { try { return <y><z/></y>; } catch(prototype) { return /*\n*/[[1]]; } finally { let __iterator__ =  /x/g , prototype = 0.1; }  } .constructor = getter; } catch(setter) { __noSuchMethod__.prototype = <><x><y/></x></>; } ");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in ((true if (window)))) yield [];L: {/*infloop*/M:for(var __proto__ = <><x><y/></x></>; __proto__; (-1)) gc()const __count__ = @foo, constructor =  /x/g ; } }");
tryItOut("while((<xxx>{__proto__}</xxx>) && 0){Math.pow }");
tryItOut("{<x/>; }");
tryItOut("let (__noSuchMethod__) { {function::constructor, constructor;\tgc() } }");
tryItOut("{constructor, __count__ = {};/*infloop*/while(({a2:z2}))return <x><y/></x>; }");
tryItOut("let(__iterator__) ((function(){{}})());");
tryItOut("/*infloop*/for(let ({ constructor: ({ __iterator__: prop }), __noSuchMethod__: ({ __count__: ({ __count__: ({ __proto__: prototype, __count__: __proto__ }) }), constructor: __parent__ }) }) = prop; typeof __count__ = window; (__proto__ for each (prototype in <x/>) for each (__count__ in (-1)) for each (delete in  /x/ ))) {/*for..in*/for(var __parent__ in (((__noSuchMethod__).apply)(\n1e4))){return -3/0; }; }");
tryItOut("M:with({__noSuchMethod__: (<y><z/></y> ? <x><y/></x> : undefined)})with({__parent__: __iterator__})const __noSuchMethod__ = 1e-81;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let \t__proto__.__count__ in ((uneval(*))).propertyIsEnumerable(\"__noSuchMethod__, setter\")) {for(let y in []);if(([15,16,17,18].some( '' , 1e4.isPrototypeOf(<x><y/></x>)))) { if (((-1))()[(yield <><x><y/></x></>)]) export __count__; else {(window); }} }");
tryItOut("let (__proto__ = __iterator__\f) { return {}; }");
tryItOut("let (__parent__) { if( /x/ ) const __iterator__; else  if (__parent__.prototype) {let __noSuchMethod__ =  '' , __iterator__; }\t }");
tryItOut("L:if(*::*) const constructor; else  if (<>__parent__.constructor</>\t) export constructor;");
tryItOut("new Function\ncontinue M; const __count__;");
tryItOut("with({__iterator__: (({ prototype: __parent__, __noSuchMethod__: __proto__ }) = *::*.yoyo(@foo))})const function::__iterator__ = [,];");
tryItOut("/*for..in*/for([prototype, __proto__] = <bbb xmlns=\"false.__defineGetter__(\"__proto__\", ({}).__lookupGetter__).__defineGetter__(\"__count__\", function  __count__ ()*)\"><xxx>{@foo}</xxx><{function::__count__}><ccc:ddd> </ccc:ddd></{function::__count__}><!--yy--></bbb>.((let (__count__ = [[1]])  ''  << *::*)) in function(q) { return q; }) /*infloop*/for(prototype = [1,,]; 1e+81;  \"\" ) export *;");
tryItOut("__iterator__;\n(<x/>).watch\n");
tryItOut("try { throw StopIteration; } catch(prototype if (function(){__iterator__ = prototype;})()) { throw 5.0000000000000000000000; } catch(__noSuchMethod__ if (function(){with({}) { with({}) yield (window)[(-3/0).call( '' , #3={a:#3#}.watch(\"prototype\", (eval).apply), *::*)]; } })()) { prototype = prototype; } catch(__parent__ if __iterator__ setter: eval) { for(let y in [5,6,7,8]) with({}) gc()\nyield  /x/ ; } catch(__proto__ if (function(){throw StopIteration;})()) { let(__count__, prototype = (void (({}).throw('fafafa'.replace(/a/g, 'haha'.split))))) { with({}) { let(constructor.prop) { throw ({ __noSuchMethod__: ({ __parent__: [, ], constructor: [, __noSuchMethod__, , prop] }) }); }  } ");
tryItOut("if([,,]) return; else  if (3.141592653589793) { } else {{} }\nif((new ( 1 )(<y><z/></y>, 0x99))) {throw *::*;export __parent__; } else {throw prop;__noSuchMethod__ }\n");
tryItOut("{/*infloop*/for(new (-0)() instanceof <x><y/></x>; ([1,2,3,4].map); (~@foo)) {return; } }");
tryItOut("for(let y in [5,6,7,8]) with({}) __parent__ = prop;");
tryItOut("with( /* Comment */@foo ? 1.2e3 : [,,z1]){export *; }");
tryItOut("const __proto__ = getter;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in  /x/ ) {export __parent__; }");
tryItOut("if(((new ([]).__defineSetter__(({}), prop)) for each (prototype in window))) return window; else  if (true) {} else {gc() }");
tryItOut("if((__noSuchMethod__.__lookupGetter__(\"prop\"))) if(window) ;");
tryItOut("with({constructor: __noSuchMethod__.yoyo( /x/ )}){throw *::*;{} }");
tryItOut("throw StopIteration;");
tryItOut("");
tryItOut("/*for..in*/for(var __parent__ in window >= <x><y/></x>) do {({}); } while((<><x><y/></x></>) && 0);");
tryItOut("let(function::prototype = ([-1].filter(function ()\t { yield this } )), prop) ((function(){with({}) { with({}) let(__proto__ = _, __noSuchMethod__ = this) ((function(){__count__ = __count__;})()); } })());");
tryItOut("/*for..in*/for(const [__count__, (prototype)] = ++<><x><y/></x></>.__lookupSetter__(\"__noSuchMethod__\") in -3/0 = window) {throw true; }");
tryItOut("if(({(-0):  /x/ })) { if ((Iterator(<y><z/></y>, @foo))) L: {var prop = <y><z/></y>; } else {/*infloop*/M:do {null;prop, __parent__; } while(<y><z/></y>); }}");
tryItOut("do {*::*;window;yield; } while((<><x><y/></x></>.prop) && 0);");
tryItOut("/*for..in*/for([__count__, __count__] = #1# ? this : false in 1.3) {return;<>x><y/</x</>; }");
tryItOut("/*for..in*/for(prop =  /x/g  @ 3.141592653589793 in prototype) {[1,2,3,4].map{} }throw <x/>; const __parent__;");
tryItOut("L:if(([, __parent__, , prop, __iterator__] = (yield __count__\r))) /*for..in*/L:for(var __count__(__count__ = @foo) in ((function (__count__, prop) { yield <y><z/></y>.__lookupSetter__(\"__noSuchMethod__\") } )(this.__defineSetter__(\"prop\", (<><x><y/></x></>).apply)))){throw this;; } else  if (<><x><y/></x></>(({a1:1}).valueOf(\"number\"))) continue L;");
tryItOut("return;");
tryItOut("/*for..in*/for([__proto__, __noSuchMethod__] = <x><y/></x>.(<><x><y/></x></>) in prop = (this.valueOf(\"number\")).__parent__ = )  /x/g ;");
tryItOut("if(this.valueOf(\"number\").watch(\"__count__\", ({}).__lookupGetter__) >> (let (prop) (__count__ = @foo)[__noSuchMethod__ = <y><z/></y>])) {var __count__ = 1e+81; }");
tryItOut("/*infloop*/do export *; while(({__iterator__: window }) @ (<x><y/></x\r>.isPrototypeOf(__iterator__)));\nlet prototype = ({a2:z2}), __iterator__;\n");
tryItOut("window");
tryItOut("do  while(([15,16,17,18].filter(new Function, ([11,12,13,14].filter))) && 0);");
tryItOut("/*for..in*/for(var [__count__, __proto__] = delete * in (return window;\f)(return;)) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 0.1) throw @foo;/*for..in*/for(constructor = <x/> in <y><z/></y>) {return constructor; } }");
tryItOut("return;");
