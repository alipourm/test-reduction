
tryItOut("if((__noSuchMethod__ = <x/>)) { if (-0.propertyIsEnumerable(\"prop\")) const __iterator__ = <x><y/></x>, constructor;} else gc()");
tryItOut("(1 for (x in []))return;");
tryItOut("/*infloop*/for(let __noSuchMethod__; (get.__iterator__ setter= function  prototype (__iterator__, __proto__) { yield; } .__lookupSetter__(\"<><x><y/></x></>.constructor\")); .yoyo((new ({}).__lookupGetter__((false), window)))) {gc() }");
tryItOut("/*for..in*/for(prototype in ((Function)(<y><z/></y>)))let __iterator__, prototype;");
tryItOut(" if (<><\fx><y/></x></>)let (__parent__ = __count__) { continue M; }");
tryItOut("export [1];");
tryItOut("/*infloop*/do export *; while(prop);");
tryItOut("/*infloop*/while(/a/gi())/*for..in*/for(const [prototype, __iterator__] = this.zzz.zzz in *::*) {const __parent__ = *; }");
tryItOut("if([undefined for (prop in  /x/ )]) export *; else  if (this.zzz.zzz) {;([]); } else return [];");
tryItOut("with({}) { prop = __parent__; } ");
tryItOut("/*for..in*/for([__iterator__, prototype] = true in eval(\"const constructor;\",  /* Comment */-0.*)) {if( { export *; }  ? 3/0 : <><x><y/></x></>) break ; else  if ([,,z1]) M:if( '' )  else do {yield @foo;var prop; } while((<><x><y/></x></>) && 0);break M;\ngc()\n }");
tryItOut("L: {yield \tundefined; }");
tryItOut("/*infloop*/for((delete *::*); #2=#3={a:#3#}; ( /x/g .__defineGetter__(\"__proto__\", /a/gi))) {if((<x><y/></x>)[ \"\" ]) {yield; } else  if (eval(\"*\", prop)) {} }");
tryItOut("if( \"\" ) { if (<x><y/></x> >>>=[[]]) {return; const __noSuchMethod__;L:if((new RegExp())) {__count__ = false, __iterator__; } else  if (__count__+=<y><z/></y>)  const  else {export *;gc() } } else (-0)}");
tryItOut("/*infloop*/for(let __proto__ = (__noSuchMethod__//h\n.__parent__); ({__proto__: [true] }); <y><z/></y> |= prototype.valueOf(\"number\")) \t{continue ;gc() const __noSuchMethod__; }");
tryItOut("{if(window) {continue L;yield; } }");
tryItOut("return;");
tryItOut("yield;\nconst prototype, let __parent__ =  '' , __iterator__ = this;;\n");
tryItOut("export __proto__;");
tryItOut("M:while(((eval(\"prop\", undefined).__lookupSetter__(\"constructor\"))) && 0){let __parent__;return this; }");
tryItOut("/*infloop*/M:for(var constructor; *; <x/>) {let __parent__ = *::*;const __count__ = <y><z/></y>, __proto__; }\n");
tryItOut("/*for..in*/for(var [__noSuchMethod__, prototype] = ([ '' ]) in <><x><{export *;return; } y/><'></>) {0.1;yield; }");
tryItOut("switch((({ prop: get }) =  /x/ ) &= (new (function  prop (prototype) { <><x><y/></x></>; } )((-1), [,,]))) { case 5: break; default: break; const prop;break; case 5: yield <x/>;case 7: break; <x><y/></x>;case 1: export constructor; }");
tryItOut("yield __count__.prop;");
tryItOut("return;");
tryItOut("/*infloop*/for(({ __parent__: __iterator__ })\f = (eval(\"<><x><y/></x></>\", #1#)); [[]];  '' ) {function //h\n() { return null } export *; }");
tryItOut("(constructor);");
tryItOut("M:if( for (constructor in 033)\f === new eval().__iterator__ ^ +String().@foo) {var __noSuchMethod__, prototype;return this; } else  if (eval(\"/*infloop*/while(<x/>){var function::__count__;\\t }\", (*.__defineGetter__(\"prototype\", /a/gi)))) /*infloop*/for( /x/g .unwatch(\"__proto__\"); ({prototype: #1#})\f; <x/>.__lookupGetter__(\"__count__\")) return *; else /*for..in*/for(var [__noSuchMethod__, prop] = ~--function ([y]) { } in <x><y/></x>) L:if(<><x><y/></x></>) yield; else  if (__noSuchMethod__) {;export __count__; } else export prop;");
tryItOut("/*for..in*/M:for(var [__proto__, __count__]true in [<><x><y/></x></>]) ;");
tryItOut("gc()");
tryItOut("/*infloop*/for(prop; *; window) gc()");
tryItOut("let(__iterator__ = {({}); }) { return;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/M:for(var [, , __count__, ] = continue ;; (({__parent__: (<><x><y/></x></> ? [,] : <x/>)})); void __parent__.isPrototypeOf(([(constructor = 1e4)].map((1 for (x in [])))))) {export __parent__; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in (__proto__.(1e-81))) {constructor =  \"\" , constructor;export *; }");
tryItOut("{yield;with(__proto__ = __count__){ { {{} } }  } }");
tryItOut("{<y><z/></y>;(<x/>); }\nswitch(-0 = <x/>) { default: /a/gi }");
tryItOut("{throw undefined;throw function(id) { return id }; }");
tryItOut("L:if((-1).@foo) [z1,,]; else  if ([, , ] = [constructor, , __parent__, constructor, ]) ;");
tryItOut("__proto__");
tryItOut("with({__iterator__: #2=(-0)}){yield <x><y/\f></x>;/*infloop*/for(let ({ function::constructor: prop, __iterator__: __proto__ }) = (arguments)[__proto__]; <><x><y/></x></>; ((#1=[#1#]).__defineSetter__).apply) { } }");
tryItOut("");
tryItOut("L:if((constructor.(let (__iterator__, prototype) [,,].__lookupSetter__(\"constructor\")))) {(1 for (x in []))gc()export prop; } else /*for..in*//* nogeckoex bug 349964 */ for  each(const prop in 3.141592653589793) {gc() }");
tryItOut("for(let y in [5,6,7,8]) with({}) prototype = __count__;");
tryItOut("if( /x/g ) { if (undefined) } else {var prototype = <x/>, __proto__;; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype.prop in ( /x/g  ? __count__|=[[]] : ([z1,,])[-0])) const function::__noSuchMethod__");
tryItOut("if( '' ) { if ((new 0.1())) {export __proto__;__parent__, prop = @foo; } else {(4.); }}");
tryItOut("/*infloop*/do {yield *;{} } while((((__iterator__ = undefined))[(yield *::* ? -0 : @foo)]));");
tryItOut("yield <y><z/></y>;\n\tM:if( /x/g ) export __iterator__; else  if (<y><z/></y>)  else __proto__;\n");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((function (prototype) { throw <x/>; } )((this.__defineGetter__(\"prototype\", (function  __iterator__ (__proto__)<y><z/></y>).apply))))){ get __parent__() { return <><x><y/></x></> } export __proto__; }");
tryItOut("while(((prop.prop)) && 0){(*); }");
tryItOut("if(__proto__(<x><y/></x>) .@*:: __iterator__.__parent__ = window) { if (({__parent__: <x><y/></x> })) {var prop = <x/>, __parent__;null; } else {break M;yield window; }}");
tryItOut("L: yield;");
tryItOut("{export *; }let (prototype = <x/> -= null) { if(null) {return;break M; } else  if (function ([y]) { }) let __parent__ = 033, __count__; else {gc() } const constructor; } const prototype;");
tryItOut("{}");
tryItOut("/*infloop*/L:do {throw __iterator__;var __proto__ =  \"\" , constructor = this; } while(({ __noSuchMethod__: [, __iterator__, __iterator__] }) = ({ __iterator__: ({ prototype: __parent__ }), __proto__: prop }));");
tryItOut("let( for each (__noSuchMethod__ in  /x/g )<><x><y/></x></>) { this.zzz.zzz");
tryItOut("{if('fafafa'.replace(/a/g, (new Function(\"throw .2;\")))) return; else  if (((({a1:1}))(undefined))) {return __parent__; }if(<><x><y/></x></>) { } else  if (this)  /x/g  }");
tryItOut("if(true) { if (( /* Comment */(this.__defineGetter__(\"constructor\", function (__proto__, prop) { return; } ))) ? yield undefined : ({ set __proto__(prop, prototype) { return  \"\"  } , __count__: this })) {{{}{yield this;export *; } }gc() } else /*for..in*/for(let __parent__ in (('haha'.split)(x::__iterator__ = (0.1.eval(-1)))))var __count__ = <x><y/></x>;}");
tryItOut("/*for..in*/for(x::__proto__ in null) x::__count__;");
tryItOut("/*infloop*/for(var prototype = [3].map(function(y) { yield y; export prototype;; yield y; }); (new Number()); *.watch(\"prop\", (Math.sin).call)) break L;");
tryItOut("(__proto__ = <><x><y/></x></>) == this");
tryItOut("if([]) {gc()/*for..in*/for(prototype in (([,,])(033))){export __proto__; } }");
tryItOut("do throw window; while((.2) && 0);");
tryItOut("if((({ __count__: __proto__, __iterator__: constructor }) =  /x/ .hasOwnProperty(\"__noSuchMethod__\"))) { } else  if (__parent__.yoyo(let (__iterator__, __iterator__ = *::*)  \"\"  .@ ((p={}, (p.z = prop.prototype getter= ({}).__lookupGetter__)())))) /*infloop*/while(<x><y/></x>)export *;");
tryItOut("let () { (-3/0) }");
tryItOut("/*infloop*/L:do L: {constructor } while((yield this.__defineSetter__(\"__count__\", (false)\t.call)));");
tryItOut("while(((__iterator__ = (false)(<x/>))) && 0){/*infloop*/for(prop; window;  \"\" ) constructor = __noSuchMethod__, __noSuchMethod__; }");
tryItOut("/*infloop*/do {return;{} } while(((new Function(\"{}\")))());");
tryItOut("{gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in prototype) {break ;this }");
tryItOut("/*for..in*/for(let __parent__ = 1.3-- in [11,12,13,14].some - (* & @foo != __parent__ = <><x><y/></x></>)) {return null;/*infloop*/M:while(<><x><y/></x></>.__defineSetter__(\"__proto__\", ({}).__lookupGetter__)){/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in <y><z/></y>) yield @foo; } }\nif(({a2:z2}).@foo.__defineSetter__(\"__proto__\", prototype|= /x/ )) { if ((null)[<x><y/></x>]) {prototype, prop; }} else let __parent__ = 1.3, constructor = <x><y/></x>;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((({__proto__: __parent__}))(({a1:1}).unwatch(\"__proto__\"))))\tthrow undefined;");
tryItOut("let (prototype = <><x/></>, __parent__ = (<y><z/></y>.*)) { ( \"\" )\nfunction (__count__, __parent__) { return <x/>; }  }");
tryItOut("throw __proto__;");
tryItOut("L: /*for..in*/for(prototype in  '' ) {const prop = null, constructor = function ([y]) { };(<x><y/></x>); }");
tryItOut("L:with((<x><y/></x>)(4.))return;");
tryItOut("L: (<y><z/></y>);");
tryItOut("/*infloop*/do {prototype, constructor;(false); } while(*::* instanceof [[]]);");
tryItOut("M:if(prototype.__iterator__ = false *= [[1]] ? (<x/>.__parent__) : <x/>\t) this const prototype;");
tryItOut("(*::*);");
tryItOut("/*for..in*/L:for(const <xxx>{__proto__}</xxx> in null) {{} }");
tryItOut("for(let y in []);");
tryItOut("let(__parent__, __proto__) { {}");
tryItOut("let __iterator__ = <><x><y/></x></>, __iterator__;\nprototype;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in [,]) default: {}case 1: switch(*::*) { default: var prototype = false, prop;break; break;  }break; ;");
tryItOut("with({prototype: (this.zzz.zzz)}){yield  /x/ ;; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__(\n(__iterator__ = this)) in  \"\" .valueOf(\"number\")) {yield <><x><y/></x></>; }");
tryItOut("(prop);");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __noSuchMethod__.prototype in window) ");
tryItOut("L:if(<y><z/></y>) {<y><z/></y>; } else  if (5.0000000000000000000000) {var constructor = <y><z/></y>, prototype;export *; } else gc");
tryItOut("M:if(({a1:1})) return; else  if (__iterator__.__noSuchMethod__ getter= ([1,2,3,4].slice)\t.apply.yoyo(new (<><x><y/></x></>).watch(<><x><y/></x></>, <x><y/></x>))) <y><z/></y> else {const prop; }");
tryItOut("if(([(0.1)(false, [1,,]).__defineGetter__(\"constructor\", function  __parent__ (__count__, __proto__) { return __proto__ } )])) M:switch(function(id) { return id }) { default:  }");
tryItOut("if(prop) {} else __noSuchMethod__");
tryItOut("with({}) try { gc() } finally { break M; } ");
tryItOut("while((constructor.constructor getter= gc :: this.__defineGetter__(\"__noSuchMethod__\", [[1]])) && 0)if(function ([y]) { }) { if (__parent__ *= this) {{}export *; } else 'haha'.split}");
tryItOut("for(let y in [5,6,7,8]) let(prototype = prop, __noSuchMethod__ = __parent__) { export __count__;");
tryItOut("if(<x/>) {gc() } else  if (({__count__: *::*, __parent__ getter: Function })) {with(({__iterator__ getter: ({}).hasOwnProperty }))L: ('haha'.split).call }");
tryItOut("/*infloop*/L:for(({ __count__: __noSuchMethod__, prototype: ({ prototype: ({ prototype: __iterator__ = 0/0 }) }) }) = (<><x><y/></x></> for each (constructor in <x><y/></x>)); <><xxx {__proto__}={(new (function  __parent__ (__proto__, prop) { (({})); } )(export __proto__;)).@*} /></>; ((({__parent__: false})).@*)) /*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in 3.141592653589793) prototype, __proto__ =  \"\" ;");
tryItOut("/*infloop*/L:for(let prop;  '' ; (prototype.__iterator__ = (__noSuchMethod__ = <x/>)--)) {; const function::prop;let (__noSuchMethod__ = eval(\"const __iterator__, __noSuchMethod__ = *::*;\", <x/>), ({ __iterator__: constructor, prototype: prop }) = .2.*) { return 1e+81; } }");
tryItOut("/*infloop*/do setter = @foo; while((-1)\n);export __parent__;");
tryItOut("/*infloop*/M:for((Date(({constructor:  \"\" , __proto__: this }), this)); ([,,z1].prototype = constructor = __parent__); (/a/gi).apply(this, *::*) != __parent__.(1e-81)) {return  \"\" ; }");
tryItOut("M:if(this.__defineSetter__(\"prop\", ((String())).__defineSetter__)) /*for..in*/for([__noSuchMethod__, __parent__] = <><x><y/></x></> in [z1,,]) {yield;let prop =  /x/g ; } else  if (\fconstructor =  /x/ .prototype) {yield;gc() } else __noSuchMethod__");
tryItOut("( /x/ );");
tryItOut("{}");
tryItOut("switch(( /* Comment */-3/0)) { case 5: default: case ([, , prop, ] = (yield = <x><y/></x>)): throw false; }");
tryItOut("if(--\n__count__.function::__noSuchMethod__ setter= Math.sin) gc() else  if (__proto__) {const prototype = <><x><y/></x></>, __proto__ = *::*;M:if(Number( /x/g )) {} else {var constructor, __parent__; } } else /*infloop*/while(*::*)return <><x><y/></x><;");
tryItOut("/*infloop*/while(this.__defineSetter__(\"constructor\", ([] &= [,,]).watch)){/*infloop*/for(const prototype = <x/>;  '' ; <><x><y/></x></>) {(new Function(\"yield  '' ;\"))<x/> }\f }");
tryItOut("export *\n{}");
tryItOut("if(prop) export *; else  if (<><x><y/></x></>) {export __noSuchMethod__; } else {}");
tryItOut("if(<><x><y/></x></>) {gc() }");
tryItOut("for(let y in [5,6,7,8]) yield *::* .. null;");
tryItOut("yield __proto__.hasOwnProperty(\"__proto__\");");
tryItOut("if(constructor = <x><y/></x>) {var __noSuchMethod__; } else  if (this) return [[1]]\nreturn; const prototype;");
tryItOut("var __proto__ = *; const __parent__;");
tryItOut("{}");
tryItOut("if(false ? constructor : prop = eval(\"return;\", <x/>)) yield <x/>; else ");
tryItOut("let([({ __iterator__: __count__ })] = constructor.propertyIsEnumerable(\"prop\"/*\n*/), __noSuchMethod__ = * ^= <x><y/></x>) ((function(){ /x/ })());");
tryItOut("/*infloop*/do {eval; } while(<x><y/></x>);");
tryItOut("L:if(<y><z/></y> for (__parent__ in <x/>)) {while((@foo) && 0){var __iterator__ = constructor, __count__ = <x><y/></x>; } } else  if ((prototype(prop(<y><z/></y>)) = this)) {/*for..in*/for(var prop = [,,z1] == [,,z1] in  /x/g ) {var __parent__;export __noSuchMethod__; } }");
tryItOut("export *\n(null)");
tryItOut("/*infloop*/for(var __count__; 1e-81\f; (this.@foo) instanceof <x/> @ (function ([y]) { })()) {continue ; }");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = new Exception() in <>({__noSuchMethod__ setter: ( \"\" ).watch, prototype setter: function(y) { yield y; ; yield y; } })</> <= this.zzz.zzz) let(constructor =  /x/  , window) { let(constructor) { true;");
tryItOut("var prototype = *::*");
tryItOut("if(*::*) { if (<y><z/></y>) {yield; } else export *;}");
tryItOut("/*for..in*/for([prop, constructor] = (constructor = __parent__) in  '' ) export __iterator__;");
tryItOut("switch(([] = .eval(((<><x><y/></x></>)[*])))) { default: throw StopIteration;break; case (this.zzz.zzz): case 5: break;  }");
tryItOut("with({__parent__: new ({__parent__: <><x><y/></x></> })()}){}");
tryItOut("/*for..in*/for(const __noSuchMethod__ = __parent__.constructor = this-- in this) [,,];");
tryItOut("for(let y in []);");
tryItOut("L:with({__count__: 033 >>> }){return;return <><x><y/></x></>; }");
tryItOut("{1.3 }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((Math.sin)((this\n = __noSuchMethod__ if (0.1)))))yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__.prototype in <x/>) export *;\n(this);\n");
tryItOut("if(<><x><y/></x></>) {prototype = #1=[#1#]; } else  if (true) {yield <y><z/></y>; } else {}return 1e-81;");
tryItOut("L: /*infloop*/do function  __proto__ (prop, prototype) ''  while(((true).call(function ([y]) { }, )\f.isPrototypeOf(<y><z/></y>)).__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty));");
tryItOut("/*infloop*/for((<y><z/></y>.hasOwnProperty(\"prototype\")).@*; (__parent__.yoyo(__iterator__ = this)); ([null].map(({}).__lookupGetter__)) | ({prop: window,  get prototype __noSuchMethod__ () ''  })) (__noSuchMethod__);");
tryItOut("L:if(\f(new (p={}, (p.z = ({}))())(\n0, @foo))) { if (function  __proto__ ([[, , prop, , __proto__], , , ({ constructor: __proto__ }), ]) { yield prototype.prototype setter= <y><z/></y> } (__iterator__ = [,].throw(<y><z/></y> * <x><y/></x>))) {{}return @foo; }} else let (__proto__ = prototype, __parent__ = <><x><y/></x></> = __iterator__ = *) { with({prototype:  \"\" \n})export *; }");
tryItOut("/*for..in*/for(let *::* in  \"\" ) function ()__proto__");
tryItOut("/*infloop*/for(var constructor; (((<><x><y/></x></>).watch).call(function ([y]) { } % [z1], let (__noSuchMethod__) <x><y/></x>)); <y><z/></y>\n[prototype /= window]) {yield null;yield; }");
tryItOut("M:if(false) { if (null) yield @foo;} else {function(y) { yield y; return (-1);; yield y; } }");
tryItOut("/*infloop*/M:for(undefined; eval(\"(\\n-3/0\\t).__proto__ = window.__defineGetter__(\\\"constructor\\\", [1,2,3,4].slice)\", [yield __parent__ -= []]); <bbb xmlns:ccc=\"new function(y) { yield y; break L;; yield y; }()\"><ccc:eee></ccc:eee></bbb>) with(<><x><y/></x></>++)");
tryItOut("return  ''  -= this;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in  '' .__lookupGetter__(\"prototype\")) let(__iterator__ = [,,], constructor) ((function(){([z1,,]);})());");
tryItOut("return;\n;\n");
tryItOut("if([<><x><y/></x></>]) { if (prop.constructor setter= (<x><y/></x>).__defineSetter__ = (new ([1,2,3,4].map)()) | (1e81 << this)) this} else export *;");
tryItOut("/*infloop*/do with(true)\f /x/g ; while(()\n);");
tryItOut("(<x><y/></x>)");
tryItOut("/*infloop*/M:for(let __parent__ = <x><y/></x>; *; this) yield;");
tryItOut("if(window.constructor = <y><z/></y>.prototype = <x/> - true.eval(window.eval(__noSuchMethod__))) export *;");
tryItOut("const prop");
tryItOut("const x::constructor = <y><z/></y> = __proto__;");
tryItOut("if(\f<x><y/></x>.__lookupSetter__(\"prototype\")\n) {()((yield -0)) } else  if ((yield prototype)) {{} }\f");
tryItOut("/*for..in*/for(( /x/ )(-3/0) in new (function (__parent__, __iterator__) { return __proto__ } )()) return  '' .__lookupGetter__(\"prop\");");
tryItOut("throw <><x><y/></x></>; const __parent__;");
tryItOut("");
tryItOut("if(<><x><y/></x></>) {\n if ( /x/ ) export <x><y/></x>;} else {export prop; }");
tryItOut("{}");
tryItOut("/*for..in*/for([prop, __noSuchMethod__] = <><x><y/></x></> in this) {export __proto__; }");
tryItOut("if(this.zzz.zzz) {export __iterator__; } else  if (1.3 >>= <x/>.unwatch(\"prototype\")) [], prop; else {/*for..in*/for(const __noSuchMethod__ in (((gc).apply)((delete  '' ))))throw prop; }");
tryItOut("/*infloop*/for(__proto__; prototype; new (Math.sin)(<y><z/></y>)) {throw __proto__; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((Math.sin)(((new (<x><y/></x>.prop)()) || [[]] ^= (<x/> &&  ''  .@*:: (__count__.prop))))))let __proto__, constructor = <y><z/></y>;");
tryItOut("let(delete 1e4) { <x><y/></x>;");
tryItOut("{;while((<><x><y/></x></>) && 0){throw <x/>; } }");
tryItOut("/*infloop*/do __noSuchMethod__ = <x><y/></x>, __parent__; while( \"\"  /= false);");
tryItOut("export *\ncontinue ;");
tryItOut("M:if(let (__count__ = (eval(\"/*for..in*/M:for(let __noSuchMethod__ in (('haha'.split)(*)))eval\", eval(\"[,]\", __iterator__)))) (new prop.prop = __parent__.@foo(__iterator__ = <x/>, <x/>[<x><y/></x>]))) with(<y><z/></y>)__count__");
tryItOut("if(\f(yield ((window).watch))\n) { if (({prototype: var __iterator__ =  '' ;})) {export constructor; } else {}\nconstructor;\n}");
tryItOut("yield; const [[, ({ __proto__: function::__count__ }), , ({ prototype: __noSuchMethod__ })], , ({ : [prop, ] })];");
tryItOut("L: ");
tryItOut("while((<x/>) && 0){({}).hasOwnPropertygc() }");
tryItOut("/*for..in*/for([__proto__, __parent__] = prop =  /x/g  in arguments) {}");
tryItOut("return constructor.constructor = (__parent__)(*::*);");
tryItOut("{; const prototype; }");
tryItOut("if((this.__defineGetter__(\"prop\", (__count__ = <><x><y/></x></>)))) {/*infloop*/L:for(<x><y/></x>; null; true) {var __noSuchMethod__; } } else {window;throw 0; }");
tryItOut("yield;\nyield *::*;\n");
tryItOut("yield;");
tryItOut("if( += ((-0).<x><y/></x>)[typeof __parent__]) { if ([z1] , undefined) return  '' ;} else if(({})) {const prop, __proto__ = 1.3; }");
tryItOut("L: {(<x><y/></x>);1e-81 }");
tryItOut("__proto__.__iterator__");
tryItOut("with((-1))(new Function(\"export constructor;\"))");
tryItOut("({}).__lookupGetter__");
tryItOut("__count__; const __iterator__;");
tryItOut("continue M;");
tryItOut("true");
tryItOut("/*for..in*/for(const __noSuchMethod__ = #0=({__proto__: <y><z/></y>}) in ((yield ( \"\"  === 3/0) ===  set __iterator__() \"\" ))) /*for..in*//* nogeckoex bug 349964 */ for  each(prop in 0.1) { }");
tryItOut("if(undefined) {(prop);throw 3.141592653589793; }");
tryItOut("(3.141592653589793);");
tryItOut("/*infloop*/for(var ({ __count__: [[, ({ __proto__: ({ prop: constructor, prop: prop }), prop: __noSuchMethod__ }), ({ prototype: __count__ })]] }) = <y><z/></y>; (let (prototype) (0.1 for (__parent__ in 1e4))); (p={}, (p.z = (__noSuchMethod__ = <><x><y/></x></>))()).__count__ = new Array()) if(<y><z/></y>) { if (<><x><y/></x></>) {yield;break L; }} else [1,,]/*for..in*/M:for(var prop = * in @foo) __iterator__;");
tryItOut("let (__noSuchMethod__ = eval(\"export __parent__;\", this), __count__) { /*for..in*/for(prototype = @foo in -1) __parent__ = <x><y/></x>, __proto__; }");
tryItOut("if(<><x><y/></x></>) <><x><y/></x></>; else  if (prototype) const constructor = <x><y/></x>; else {yield  /x/g ; }");
tryItOut("/*for..in*/for(var __count__ = (033 instanceof ({prototype setter: Function }) in ( /x/ \n)) in ({ prototype: prop//h\n }) = __parent__.__count__ = *::*) try { yield; } finally { return <y><z/></y>; } ");
tryItOut("<><bbb xmlns=\"({__count__ getter: Function })\">yyy<ccc:ddd><x><y/></x> </ccc:ddd></bbb> <///h\n>, __proto__");
tryItOut("let(prop) ((function(){throw StopIteration;})());");
tryItOut("(<x/> .@ __proto__)gc()");
tryItOut("if((\n /x/g .unwatch(\"constructor\").throw(( /x/ .*())))) { if (#2=(({})())) {let constructor;prototype = <y><z/></y>, __iterator__ = <><x><y/></x></>; }} else \f{L:if({}) { if ( '' ) false; else return;} }");
