tryItOut("export *;");
tryItOut("L:if(function ([y]) { }.@*) { if (({prop: false ^= *})) {throw <y><z/></y>;export *; }} else return;");
tryItOut("let([__iterator__]) { try { ; } finally { export *;prop } ");
tryItOut("if(((*::*).watch())) break ; else  if (null) ;");
tryItOut("/*for..in*/for(prop in <><ccc:ddd>yyy</ccc:ddd></>) {L:with({__parent__: this , #1=[#1#] ? (#1=[true]) : <y><z/></y>})/*infloop*/L:for(var [prototype, ({ constructor: __proto__ }), , __count__] = prototype = __noSuchMethod__ ^  /x/g ; __parent__++; typeof [false if (@foo)]) {throw 1e4; }if(function::__proto__ = <><x><y/></x></>) {} else return; }");
tryItOut("/*infloop*/for(var __iterator__; undefined; 3) export *;{}");
tryItOut("gc()\n/*for..in*/for(let constructor in ((Math.sin)(<x><y/></x>))){}\n");
tryItOut("/*for..in*/for(const __iterator__ = prototype in  \"\" /*\n*/) export prototype;");
tryItOut("if(((Function).call).call(<x><y/></x>, )) { if (([(-0)])) return; else {throw prop;yield window; }} const constructor;");
tryItOut("{export __parent__;let __iterator__ = -0; }");
tryItOut("/*infloop*/for((constructor = (1e+81 .@x:: *::*.__proto__ = [null//h\n]) <<= (__proto__)); prototype =  /x/g ; <employee id=\"1\"><name>Joe</name><age>20</age></employee>) /*for..in*/for(const prototype.__iterator__ in -1) gc()");
tryItOut("/*for..in*/L:for(let __proto__ in ((__count__)\f(<y><z/></y>)))break L;");
tryItOut("while(((yield this.__defineGetter__(\"__proto__\", (window).call))) && 0)return ((uneval(@foo)));");
tryItOut("{L: {throw <x/> % __count__; }for(let y in [5,6,7,8]) {}\nlet __parent__;\n }");
tryItOut("switch([z1] ?  \"\"  : <x><y/></x>.prop = new <><x><y/></x></> for (prop in <><x><y/></x></>)(([__parent__, , \f__proto__] = (#3={a:#3#} , <><x><y/></x></>)))) { default: gc()break; export prototype;break;  }");
tryItOut("yield;\nyield;\n");
tryItOut("if(<x><y/></x>) { if (#1=[#1#]) {break ; }} else <x><y/></x>;");
tryItOut(";");
tryItOut("let (__iterator__ = [,,z1] .@*:: <><x><y/></x></>, __noSuchMethod__ = __count__(3/0)) { if(([15,16,17,18].sort(function(y) { yield y; ;; yield y; }, (Date(1.2e3, <x><y/></x>))))) const prototype; else (false); }");
tryItOut("with({__count__: ({}) * <y><z/></y>[ \"\" .*]})(window);");
tryItOut("[1,2,3,4].map\nfunction  constructor () { yield @foo } ");
tryItOut("let ([], __count__ = <x/>) { with(prop){export *;__count__ =  /x/ ; }\n;\n }");
tryItOut("if((0.1 @ null) === ({__proto__: prototype })) {/*infloop*/do {window;return <y><z/></y>; } while(*::*);export *; } else  if (__count__) {yield\nvar prop = <><x><y/></x></>, __noSuchMethod__ = (-1); }");
tryItOut("/*for..in*/for(let (constructor = .2)(export *;) in ((((1e81).__defineSetter__).apply)(<{prop}> </{prop}>.((( '' ).call(<x><y/></x>, <><x><y/></x></>))))))with(<x/>){;; }");
tryItOut("/*for..in*/for(var yield in  \"\" ) {export __iterator__/*infloop*/M:while(((undefined)()))__iterator__ = <x><y/></x>; }");
tryItOut("if(false.isPrototypeOf(null)) {export *;{}\t } else  if (<y><z/></y>.valueOf(\"number\")) export prop; else {return [z1,,]; }");
tryItOut("/*for..in*/for(const [__iterator__, __parent__] = new this(*) in [z1]) {; }");
tryItOut("L:if(false.throw(function ([y]) { })) { if ( \"\" ) {continue ; }} else ");
tryItOut("/*for..in*/for(var prototype\f = 'fafafa'.replace(/a/g, gc) /= ((-1).watch(\"__proto__\", ((function ([y]) { })()).watch)) in ((<x><y/></x>.(<><x><y/></x></>))())) {let __noSuchMethod__ = <x/>, prop\f;__iterator__ = #1#, prop; }");
tryItOut("(false);");
tryItOut("return;");
tryItOut("/*infloop*/M:while(eval(\"([this].map(@foo))\", __noSuchMethod__ = this == <><x><y/></x></>))/*infloop*/for(const __iterator__; prototype = window; (new (<x><y/></x>)(window, this))) {Math.pow }");
tryItOut("/*for..in*/for([__iterator__, prototype] = window > ((function  __parent__ (__iterator__, __iterator__)(prototype\n))()) in (prop.__iterator__ = (({}).hasOwnProperty))) {return }");
tryItOut("/*infloop*/for(3; ( /x/  + <><x><y/></x></>); __parent__ =  '' ) break L;");
tryItOut("/*infloop*/for(const __count__; ({a2:z2}) instanceof this; new Math.sin([])) {throw 3/0; const prototype; }");
tryItOut("if((uneval(true & <><x><y/></x></>))) { if \t(eval(\"__proto__ = function(id) { return id }, __parent__;\", false).valueOf(\"number\").__proto__ = ({a2:z2})) { } else {/*for..in*/M:for(constructor in ((Function)(null++))){prototype = -1, __parent__ = true; } }}");
tryItOut("/*infloop*/for(-1; window; @foo) {yield  '' ; }");
tryItOut("gc()");
tryItOut("L:if((new ([1]).watch(<><x><y/></x></>))) { if (set = (<x/>)[ \"\" ]) with([z1,,]){export __proto__;var constructor = <x><y/></x>, __proto__ = #1#; }} else (#1#);");
tryItOut("/*infloop*/for(#0=[new *((<x><y/></x>.prop = 1e+81))]; [({ prototype: ({ prop: __noSuchMethod__ }), constructor: [] }) = *::*]; (({ //h\nfunction::__parent__: prop }) = [__count__, , , constructor, __proto__]) ? __count__\t = <x><y/></x>() : let (prop = __parent__) (-0).eval(__noSuchMethod__ = null)) return;");
tryItOut("export __iterator__;");
tryItOut("M:if(window.@*) {__proto__ = -3/0;; }");
tryItOut("L:switch(1.2e3) { default: {while((<y><z/></y>) && 0){const prototype;yield <x><y/></x>; } }break;  }");
tryItOut("M:if(<><x><y/></x></> , function::__count__) throw <y><z/></y>; else return function ([y]) { };");
tryItOut("let(set = *, constructor =  /x/ ) ((function(){})());");
tryItOut("yield\n");
tryItOut(";\nexport *;\n const __iterator__;");
tryItOut("{/*for..in*/for(var [__iterator__, prop] = this ? window : <x><y/></x> in 1e+81) {export __noSuchMethod__;eval }/*for..in*/M:for(var __noSuchMethod__ in ((this.__defineSetter__(\"__parent__\", (1 for (x in []))))(('fafafa'.replace(/a/g, (new Function(\"return;\"))))))){return *::*; } }");
tryItOut("{return *; }");
tryItOut("/*infloop*/L:for(const ({ __noSuchMethod__: __iterator__ }) = (new (<y><z/></y>)()); (function(id) { return id }['__count__'] = *.__count__.propertyIsEnumerable(\"__proto__\")); (__count__).watch(undefined\n)) {if((function ([y]) { })()) {const __noSuchMethod__, prototype =  /x/ ; }gc() }");
tryItOut("for(let y in [5,6,7,8]) return __parent__;");
tryItOut("/*for..in*/for([__parent__, prototype] = new String() in ({ prop: prop }) = this.zzz.zzz) {let (prototype, prototype) { yield; }break L\n<y><z/></y> }");
tryItOut("switch(__noSuchMethod__ = <y><z/></y>.eval(() |= (#1#)[<><x><y/></x></>])) { case ([({ __iterator__: ({ __iterator__: ({ __iterator__: constructor, prop: __iterator__ }), constructor: ({ prop: constructor }) }) }), , , , ({ constructor: ({ constructor: prop }), __iterator__: ({ __proto__: ({ __proto__: prototype, prop: __parent__ }) }) })] = +<y><z/></y>): /*infloop*/for((let (constructor) window); (String(<x><y/></x>, *::*)); [ '' ].sort(<x><y/></x>)) ;let (prototype = prototype = this, <><x><y/></x></>) {  }case this: default: const __proto__ = <><x><y/></x></>, prop;break; case 5: /*infloop*/for(<><x><y/></x></>; this;  '' ) gc()break; break; break; break; case undefined >>= <x><y/></x>: {} }");
tryItOut("if(( !== [1] % null).throw(--undefined)) { const __count__; }");
tryItOut(";");
tryItOut("L:if((<x><y/></x>.__count__.__defineSetter__(\"__proto__\", 'haha'.split))) let setter = <y><z/></y>; else  if (\n<><x><y/><\f/x></>) __parent__ else const constructor = *, __proto__ = <x><y/></x>;");
tryItOut("for(let y in []);");
tryItOut("with({}) { throw StopIteration; } ");
tryItOut("{export *;if(__proto__) { if ((new ((<x/> || __proto__))(this ?  ''  : __noSuchMethod__, <><x><y/></x></>))) {yield; }} else {(this) } }");
tryItOut("let (__parent__) { (<x><y/></x>); } const prop;");
tryItOut("yield window");
tryItOut("function(y) { yield y; export __proto__;; yield y; }");
tryItOut("let(prop = ([constructor] = 0/0), __proto__ = __count__ = <x><y/></x>) ((function(){for(let y in [5,6,7,8]) __parent__ = __count__;})());");
tryItOut("/*for..in*/L:for(const __iterator__ in (( )(__iterator__.constructor|=(Function(4.))))){yield  /x/ ; }");
tryItOut("{var __count__, __iterator__ =  set __noSuchMethod__ __iterator__ (__count__, __noSuchMethod__) { 'haha'.split } ; }");
tryItOut("{do {break M;gc() } while((<x><y/></x>.prop = <><x><y/></x></>) && 0);L: yield; }");
tryItOut("if(undefined) {\treturn *::*;@foo; }");
tryItOut("{break ;return *::*; }");
tryItOut("with(<x><y/></x>)let __iterator__;");
tryItOut("let (__proto__ = <y><z/></y>, __iterator__) { (-3/0); }\n");
tryItOut("/*infloop*/while(new [1,2,3,4].map(this.@*, ({__parent__: __iterator__ = ({}) }))){with({constructor: new @foo([[1]], <x><y/></x>)})[1,2,3,4].slicegc()export *; }");
tryItOut("L:with({__iterator__: this}){if(<y><z/></y>) {; } else {return prototype;yield window; } }");
tryItOut("prop = __parent__;");
tryItOut("with(yield){(<x><y/></x>);var prop; }");
tryItOut("/*infloop*/for(prop; this.__defineSetter__(\"__parent__\", function ((yield;)( \"\" )) { yield <x><y/></x>.(<x><y/></x>\t)\f } ); *) {__noSuchMethod__ =  /x/ , __iterator__;yield prop; }");
tryItOut("let(__proto__, __proto__ = ({a1:1})) { return this.zzz.zzz;");
tryItOut("/*for..in*/for(let \f__iterator__ in (*\n)) with(window.valueOf(\"number\"))throw 1e-81;");
tryItOut("/*for..in*/for(var prop in (((new Function(\"gc()\")))(({a2:z2})))){export *;const constructor, constructor; }");
tryItOut("/*for..in*/for(var __iterator__ in <y><z/></y>) {continue ; }");
tryItOut("export *;<x><y/></x>");
tryItOut("(-1);gc()");
tryItOut("with(prototype.__proto__ = window.__noSuchMethod__ = ([[1,,].valueOf(\"number\")])){gc()yield; }");
tryItOut("L: (1e+81,  /x/g );");
tryItOut("/*infloop*/M:for(<y><z/></y>.unwatch(\"__count__\"); ((p={}, (p.z = [[]])()).__lookupGetter__(\"__count__\")); (((window >= [z1]) if (this)))) let __parent__ = false;");
tryItOut("with({__iterator__: [15,16,17,18].map(('haha'.split).apply, 'haha'.split(__proto__,  /x/ ))}){[1,2,3,4].slice\nwith({prototype: <y><z/></y>}){break ; }gc()\ndo {var constructor;{} } while((<y><z/></y>) && 0);\n }");
tryItOut("(__proto__-= /x/ ) = delete {}");
tryItOut("with({prototype: ++(({constructor setter: Math.sin, constructor: (true % undefined) }))}){let(prototype, prop = null) ((function(){let(/>) ((function(){var function::let;})());})());var __iterator__ =  \"\" ; }");
tryItOut("if((( \"\" ++ for each (function::__noSuchMethod__ in  /x/g ) for (__parent__ in window)))) {if( \"\" ) {; } else  if (constructor) {; }<x><y/></x> } else yield <x/>;");
tryItOut("/*for..in*/for(let [__parent__, prototype] = __noSuchMethod__ in <x><y/></x>) {var prototype =  { yield true } ;let __count__ = <><x><y/></x></>; }");
tryItOut("if((yield <x><y/></x>)) {yield 1e+81;yield 0; } else  if (()) __count__ else export prototype;");
tryItOut("/*infloop*/M:for(let __count__; function::__noSuchMethod__.__noSuchMethod__; (const constructor, constructor = function(id) { return id })) /*for..in*/for([prop, prototype] = (window instanceof (this.zzz.zzz)) in <x/>.__lookupSetter__(\"__count__\")) return #1#;let __iterator__, __parent__ = <y><z/></y>;");
tryItOut("let __count__ = constructor, prototype = 1.2e3;");
tryItOut("/*for..in*/for(let __parent__ in ((eval)((function(y) { yield y; return <x><y/></x>;; yield y; }).apply())))@foo;");
tryItOut("with({}) with({}) return");
tryItOut("yield <x/>\n");
tryItOut("\nif((({ get __noSuchMethod__ __parent__ (constructor) { __noSuchMethod__; } , __count__ getter: function  prop (__proto__, __noSuchMethod__)__iterator__ }))) {gc() } else  if ((prop)) return <x><y/></x>;\n");
tryItOut("export __noSuchMethod__;{; }");
tryItOut("L: switch( /x/g ) { default: break; case 4: gc()case <y><z/></y>: break;  }");
tryItOut("yield function  __iterator__ () { yield <x/> } ();const __count__");
tryItOut("/*infloop*/for(let prop; new RegExp(); eval(\"/*infloop*/M:for([]; (-1); -0) <x><y/></x>;\", arguments)) break ;");
tryItOut("/*for..in*/M:for(var prototype in (((__parent__ | false).call)((((null).__defineSetter__).apply).call([,].prototype, ({__parent__ getter: Math.sin, __iterator__:  ''  }), [,])))){{}/*for..in*/for(const __parent__ = @foo in 1e4) yield; }");
tryItOut("while((constructor.((yield 033))) && 0){{}export *; }");
tryItOut("L: {((__count__)(this)); }");
tryItOut("let (__parent__, __parent__ = undefined.yoyo((void ))) { M:if(<x><y/></x>) export *\n{} }");
tryItOut("L:do {<y><z/></y>; } while((((function ([y]) { })())[ /x/ ]) && 0);export __count__;");
tryItOut("with({__proto__: (__count__.__proto__ setter= ({}))})prototype");
tryItOut("/*for..in*/for(prop = this in this.__defineGetter__(\"prototype\", ({}).__lookupGetter__)) {}");
tryItOut("try { with({}) { throw prop; }  } catch(__count__) { with({}) { return; }  } finally { constructor, __parent__ } ");
tryItOut("/*infloop*/do return <y><z/></y>; while((-1) && __parent__ ? this.valueOf(\"number\") : 3/0.__noSuchMethod__ = <x><y/></x>);");
tryItOut("this.zzz.zzz;");
tryItOut("while((#1#) && 0)Function");
tryItOut("/*infloop*/M:for(var prop; -\n<><x><y/></x></>;  \"\" ) {const __parent__, prop;L:while((1e4) && 0){export *;throw *::*; } }");
tryItOut("/*infloop*/do return undefined; while(this.zzz.zzz);");
tryItOut("do {for(let y in []); } while((((let (prototype, __iterator__ = *::*)  /x/ .hasOwnProperty(\"prop\")))(*, ((p={}, (p.z = this.zzz.zzz)())))) && 0);");
tryItOut("<><x><y/></x></>; const __iterator__; const constructor;");
tryItOut("yield (<\tx><y/></x>.__defineSetter__(\"__proto__\", [1,2,3,4].map)).eval( /* Comment */*::*).*;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(<><x><y/></x></>['__noSuchMethod__'] in ((yield <><x><y/></x></>))) {__proto__ = *::*;/*infloop*/while(eval(\"yield;\", delete))/*for..in*/for(let [__proto__, __parent__] = @foo in constructor) (1 for (x in [])) }");
tryItOut("if(<y><z/></y>[null]) { if ((.2())) let (__noSuchMethod__ = this) { ; } else {prototype, prop = <><x><y/></x></>;{} }}");
tryItOut("prop = this;");
tryItOut("(yield null) = __proto__;");
tryItOut("break ;");
tryItOut("gc();");
tryItOut("({a2:z2});/*infloop*/for(let constructor;  '' .__parent__; <x><y/></x>) export *");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(constructor in ((Math.sin)(<x/>))){gc() }");
tryItOut("do {evalreturn; } while(([<x><y/></x>.hasOwnProperty(\"__noSuchMethod__\")].sort((null).watch)) && 0);");
tryItOut("if((p={}, (p.z = (((new Function(\"/*for..in*/for(const prop in false) yield <y><z/></y>;\")))(this.zzz.zzz)))()) -= ((1 for (x in [])))) { if (([(({ set get(__proto__, __parent__) { yield [] }  }))[window.watch(\"prototype\", /a/gi)]].filter(/a/gi))) yield <x/>\n{}} else {(true)export __noSuchMethod__;\t }");
tryItOut("if(__count__|=__iterator__.yoyo(null)) /*for..in*/for(const [get, __noSuchMethod__] = ((prototype)) in true.@foo) return #1=[#1#]; else {{}{__count__ = [z1];export __count__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in 1e-81 .@*:: <x><y/></x>) {constructor }");
tryItOut("with({__noSuchMethod__: <x/>}){;gc() }");
tryItOut("with(yield <><x><y/></x></>[3]){export *;let __parent__; }");
tryItOut("/*for..in*/for(var prototype = ([1,2,3,4].slice)(this.zzz.zzz, (#1=[#1#].*)) in ((new Function(\"export __parent__;\"))).call(*.__proto__, )) export prototype;");
tryItOut("/*infloop*/for(var __parent__ = (constructor = window); ({a1:1}).propertyIsEnumerable(\"constructor\"); (yield function  __count__ ()*::*).unwatch(\"__noSuchMethod__\")) {gc() }");
tryItOut("/*infloop*/L:while(this\n){throw <x><y/></x>;yield; }");
tryItOut("let (__iterator__, ({ __count__: ({ __iterator__: ({ __parent__: *.__proto__, __parent__: ({ __count__: ({ __iterator__: prop }) }) }) }) })) { (1 for (x in [])) }");
tryItOut("if((<><x><y/></x></> << [[1]])) {}");
tryItOut("if(*::*) <x><y/></x> else  if (<y><z/></y>)  else {throw  /x/ ; }\n");
tryItOut("if(([[__proto__] === <y><z/></y> if (<x/>)]) %= this.__defineGetter__(\"__count__\", ({}).hasOwnProperty)) export *; else  if (({ __iterator__: __iterator__ }) = (__iterator__.__count__ = undefined).prototype) export *; const __noSuchMethod__; else /*infloop*/while(<><x><y/></x></>[window]){yield;<x><y/></x> }");
tryItOut("export *;({}).__lookupGetter__");
tryItOut("return;/a/gi");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__proto__ in <y><z/></y>) break M;");
tryItOut("if(++__iterator__ = (this.__defineGetter__(\"prototype\", [z1,,])), constructor = @foo) { } else  if ([, , ] = ({ prototype: prototype }).isPrototypeOf(([15,16,17,18].some(function  prop (__count__, __parent__) { return  /x/  } ,  '' )))) /*infloop*/M:for(__proto__; 5.0000000000000000000000; null) {__parent__: 4.yield constructor; } const prototype; else while((prototype) && 0)\nyield");
tryItOut("/*infloop*/while(1.3){; }\nthrow @foo;\n");
tryItOut("L: {/*infloop*/for(let constructor;  \"\" ; (eval(\"__iterator__\", constructor)++)) window;M:if(__proto__.([])) { if (((<><x><y/></x></>--) |= undefined.throw(<x><y/></x>))) {/*for..in*/L:for(let __count__ in ((<x><y/></x>)(*::*))){yield this;return; } } else { }} }");
tryItOut("{yield }");
tryItOut("/*infloop*/for(let __count__; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; ~((<y><z/></y>)[])[(new <x><y/></x\f>(true) .@ __parent__, __iterator__)]) {L: {; }x::prototype, __proto__ }");
tryItOut("/*infloop*/M:for(({ __count__: __proto__ }) = .2.__parent__; @foo; <x><y/></x>.throw(__iterator__)) {const __noSuchMethod__, __proto__ = @foo; }");
tryItOut("if((((-0) ? <><x><y/></x></> : this).propertyIsEnumerable(\"__parent__\"))) {propreturn __iterator__; } else  if ((({ prototype: prototype }) = __iterator__ = constructor\f)) export __count__; else {yield <y><z/></y>; }");
tryItOut("{} const prop;");
tryItOut("/*infloop*/M:for(let prototype = @foo[<x><y/></x>];  \"\" .__defineGetter__(\"__proto__\", ((new <><> </></>(new Function( '' ,  /x/ ), <><x><y/></x></>.eval(<y><z/></y>)))).__defineSetter__); __parent__.__parent__ getter= undefined ? (p={}, (p.z = __parent__)()) : <x><y/></x>.( /x/ )) yield;");
tryItOut("for(let y in []);");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/while((<x><y/></x>)(this));");
tryItOut("L:if(false) { if (null) {export prototype;export prototype; }} else {throw __count__; }");
tryItOut("for(let y in []);");
tryItOut("if(__count__ *= <y><z/></y>)  else  if (null & null) {}");
tryItOut("{yield  '' ;return; }");
tryItOut("{{} }L: { '' ; }");
tryItOut(" const __iterator__;");
tryItOut("export __proto__;");
tryItOut("M:while((((p={}, (p.z =  /x/g )()))) && 0){/*for..in*/for(const (__parent__) in (((<x><y/></x>.(window)))(@foo.yoyo(<><x><y/></x></>))))L:if(prop) { if (new <x/>()) yield window;} else {gc()yield; } }");
tryItOut("/*infloop*/while(__noSuchMethod__)const __count__;");
tryItOut("with(<y><z/></y>.__defineSetter__(\"__count__\", [1,2,3,4].map)){L:if(( /x/ )[(({__iterator__ setter: function(y) { yield y; yield <x><y/></x>;; yield y; } }))]--) {return prototype;return .2; } }");
tryItOut("{/*for..in*/L:for(__parent__ = (new ( /x/g )(*, @foo)) in <y><z/></y>) {export constructor;const constructor; } }");
tryItOut("/*for..in*/for(let __iterator__ in false)  for (constructor in [z1])/*for..in*/for(const [__noSuchMethod__, constructor] = #1=({__proto__: window}) in <x/>) {prototype = *; }");
tryItOut("if(({ __count__: __noSuchMethod__ }) = [11,12,13,14].map) { if (<><> </></>) yield; else const function::prop;}");
tryItOut("L:while((<><x><y/></x></>) && 0){{}{} }");
tryItOut("prototype = __parent__;");
tryItOut("/*infloop*/for(new (function  constructor (__parent__)(<x><y/></x> .. *::*).@foo)(eval(\"[11,12,13,14].sort\", #1#.throw( /x/g )).*, (__noSuchMethod__ =  \"\" .watch(\"constructor\", function(y) { yield y; ; yield y; }))); [__count__].map(function  function::__iterator__ () { return <x><y/></x> } ); function  prototype (({ __proto__: constructor, __iterator__: __noSuchMethod__ }), __proto__)(this.__count__ = window)) let(prop) ((function(){var prop = [,];})());");
tryItOut("let (constructor = ((p={}, (p.z = __count__)()))) { throw 1e4\ntry { {} } finally { prototype: <x/> } \n(constructor); }");
tryItOut("if({}) { if (undefined) const __noSuchMethod__;} else {return; }\n\n/*for..in*/L:for(const [__parent__, __noSuchMethod__] = undefined < <><x><y/></x></> in this) ;\n");
tryItOut("M:if(<><x><y/></x></> ? function::__proto__ : true.__lookupGetter__(\"__count__\")) { if () {[1,2,3,4].mapreturn  '' ; }} else yield  /x/g ;");
tryItOut("with(__iterator__){throw  \"\" ;var __count__ = window; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const false in <><x><y/></x></>\n) {/*infloop*/do {export constructor;; } while( \"\" .*); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var #3={a:#3#} in *::*) yield <x/>;");
tryItOut("/*infloop*/while(<x><y/></x>){export *;function (prop) { <y><z/></y> }  }");
tryItOut("");
tryItOut("M:if(__noSuchMethod__|=__parent__ = window.@*.unwatch(\"__iterator__\")) /*for..in*/L:for(const prototype in ((function () { yield this } \n)(<y><z/></y>)))return 033; else  if ((uneval( /x/ ))) {return; }");
tryItOut("yield <y><z/></y>;");
tryItOut("L: throw prototype;");
tryItOut("with(((({a1:1}) |= <x/>) ?  : <x><y/></x>.__lookupSetter__(\"__noSuchMethod__\"))){/*for..in*/for(__parent__ = (<><x><y/></x></>).__defineSetter__ in <x><y/></x>) case <x><y/></x>(this): prop = <><x><y/></x></>, constructor;case 4. ^= <x><y/></x>:  }");
tryItOut("do {L:if(<><x><y/></x></>) {} else  if (({a2:z2})) {yield; } else let __iterator__, __count__ =  /x/ ; } while((((yield <x><y/></x>))) && 0);");
tryItOut("{/*for..in*/for(const prop in ((Function)( /x/g .valueOf(\"number\")))){continue L; } }");
tryItOut("gc()export *;");
tryItOut("gc()\nreturn;\n");
tryItOut("while((<x><y/></x>.__count__ @ <x><y/></x> <<= <x><y/></x>) && 0){const __count__; }");
tryItOut("L:if(<y><z/></y>) { if (\n<x><y/></x>)  else {return; }}");
tryItOut("let (({ prop: __noSuchMethod__, __iterator__: __count__ })) { return; }");
tryItOut("/*infloop*/while(<y><z/></y> instanceof this)return;");
tryItOut("if(<y><z/></y> === window) {let prototype = <><x><y/></x></>; }");
tryItOut("gc()\n");
tryItOut("/*infloop*/while((new __count__.__parent__ getter= function (__noSuchMethod__) { yield undefined }  ? function::__iterator__ , yield 033 : <x><y/></x>.__defineGetter__(\"prototype\", [1])()))if(__noSuchMethod__) { if (<x><y/></x>) {return; }} else {return false;return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const @foo in @foo) /*for..in*/for(prototype = undefined in @foo) ");
tryItOut("if((!<x/>).yoyo((<x><y/></x> for each (constructor in window)))\t) {prop;this = <><x><y/></x></>, __proto__ = prototype; } else  if (undefined) {let prop = window; } else {return <x><y/></x>; }");
tryItOut("continue L;");
tryItOut("if((undefined.valueOf(\"number\"))) {export __iterator__;yield; } else  if ((constructor = <y><z/></y>)) {return;this; }");
tryItOut("/*for..in*/L:for(const prototype = (this = <><x><y/></x></> .@ eval(\";\", 0.1)) in @foo++) __count__;");
tryItOut("(<x/>);");
tryItOut("with({__noSuchMethod__:  \t .. (({}).__noSuchMethod__).prop}){*; }");
tryItOut("L:if(__count__ = yield prop) { if (eval(\"Array()\", <x/>.unwatch(\"__noSuchMethod__\"))) throw 5.0000000000000000000000;} else {; }\n");
