tryItOut("/*infloop*/while((new (window)(<x/>))){gc() }");
tryItOut("if(null.__defineSetter__(\"__noSuchMethod__\", gc)) {;; } else  if ( \"\" ++.@*) return  \"\" ; else break ;");
tryItOut("{{const prototype, prop =  \"\" ; }\n<y><z/></y>; }");
tryItOut("with({function::prototype: this.__defineGetter__(\"__count__\", (function(q) { return q; }).call)}){; }");
tryItOut("/*infloop*/M:do {gc()do {{}function::constructor, prop = <x/>; } while((({a1:1})) && 0); } while(({ get __iterator__ __count__ (__proto__, __noSuchMethod__) { yield  '' .throw(*) } , __noSuchMethod__: \t3/0 .@x:: [1] }));");
tryItOut("{yield this; }");
tryItOut(" { return <{prop}><ccc:ddd><!--yy--></ccc:ddd></{prop}> } ");
tryItOut("if(new Math.pow(false, <><x><y/></x>\n</>)) {const __iterator__ = *, __noSuchMethod__ = <y><z/></y>; } else  if ((function ([y]) { })([[1]], <x><y/></x>).__defineGetter__(\"prototype\", ({}).hasOwnProperty)) {throw undefined; } else gc()");
tryItOut("if(-eval(\"(-1)\", @foo)) var constructor, constructor; else  if (([({ __parent__: [\f__parent__] })] = -1)) if(\n__parent__ =  \"\" ) {let __count__ =  /x/g , prop = <><x><y/></x></>;export *; } else export *;");
tryItOut("for(let y in [5,6,7,8]) with({}) try { let(prototype = __iterator__ = this, __count__ = -1) ((function(){let(__iterator__, __count__) ((function(){<><x><y/></x></>})());})()); } catch(__proto__) { let(__proto__ = ({a1:1})) ((function(){yield @foo;})()); } ");
tryItOut("var __count__ = undefined, prototype = <x><y/></x>;");
tryItOut("/*for..in*/for(const constructor in ((new Function)(<><x><y/></x></>\n))){<xxx>{prototype}</xxx>return @foo; }");
tryItOut("with([<><x><y/></x></>].some(function(q) { return q; }))/*for..in*/for(var __parent__ in (([1,2,3,4].slice)(this)))export __proto__;");
tryItOut("/*for..in*/for(const __noSuchMethod__(<x><y/></x>) in *.unwatch(\"constructor\")) {; const prototype; }");
tryItOut("let (__iterator__) { /*for..in*/for(let prop = (true)() in <x><y/></x>) {gc() } }");
tryItOut("throw StopIteration;");
tryItOut("( \"\" );");
tryItOut("/*for..in*/M:for(var __iterator__ in ((function () { yield (constructor = ({ set prop __proto__ () { return <x><y/></x> }  })) } )(this.__defineSetter__(\"__iterator__\", /a/gi)\n)))let __parent__;");
tryItOut("(function(id) { return id });");
tryItOut("L: export __iterator__;");
tryItOut("if((-0)) break L; else  if (*) {const __noSuchMethod__, __iterator__ =  /x/ ;var __parent__; }");
tryItOut("/*infloop*/L:for(let __iterator__; __proto__.__noSuchMethod__ = +this.zzz.zzz; (<xxx {prop}={<x><y/></x>} />)[<><{__iterator__}><ccc:ddd></ccc:ddd></{__iterator__}></> = (prototype.constructor getter= (true).watch) .@ __iterator__ = *::*]) ( '' );");
tryItOut("yield; const constructor;");
tryItOut("switch(<><x><y/></x></>) { default:  }");
tryItOut("with((*::*.__lookupSetter__(\"__iterator__\")))yield;");
tryItOut("/*infloop*/for(<><x><y/></x></> *= @foo in function(id) { return id } !==  /x/g ; [11,12,13,14].sort; __iterator__) {yield window;return *; }");
tryItOut("/*infloop*/do {const constructor = <x/>, __count__; } while(*);");
tryItOut("switch(\n[[1]]) { case [z1]: break; default: if(__count__ = this ? constructor += this : __proto__) {export *;\f } else {export prototype; }break;  }");
tryItOut("if((__proto__ = true) >>> (__proto__ = __iterator__)) var __proto__;");
tryItOut("export *; const prototype;");
tryItOut("/*for..in*/for(var __iterator__ in ((Math.pow)(true in <x><y/></x> ? <><x><y/></x></>.__parent__ = export *; : undefined))){try { var __parent__; } finally { export __proto__; }  }");
tryItOut("with({__proto__: ((let (__parent__) <x><y/></x>\n)())})");
tryItOut("if(eval(\"\", 1e+81)) {;{} } else {export *;return; }");
tryItOut("/*infloop*/L:for(new new (#1#).call()() != (new (eval)()) for each (__noSuchMethod__ in new (*)()) if (4.); (null.@foo.__defineGetter__(\"prop\", /a/gi)); (yield true , 1.2e3)) /*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.__count__ in [false == window if (<x><y/></x>)]) let __noSuchMethod__ = <x><y/></x>;");
tryItOut("/*infloop*/for(var ({ prop: ({ __count__: [prototype, prop, __noSuchMethod__, prototype] }), __count__: ({ prop: constructor, __iterator__: [__noSuchMethod__] }) }) = (-0); <y><z/></y>; * / <><x><y/></x></>.isPrototypeOf(__iterator__)) {const __noSuchMethod__ = <x/>, [,];export *; }");
tryItOut("prototype = prop;");
tryItOut("if(<y><z/></y> == undefined) {export prototype;return false; } else  if ((p={}, (p.z = <y><z/></y>)())) {function (prop, yield)null } else export *;");
tryItOut("Math.pow");
tryItOut("/*infloop*/for(((<><x><y/></x></>)(@foo, this)((( /x/g ).watch)())); 1.3; prop = __count__.__defineSetter__(\"constructor\", [1,2,3,4].map)) if(this) {export *; } else  if (<><x><y/></x></>) yield window; else {yield;__parent__ = [z1,,], __noSuchMethod__; }");
tryItOut("while((__proto__ = <><x><y/></x></>) && 0)yield this;");
tryItOut("/*infloop*/for((this.__defineGetter__(\f\"prop\", __count__)); (<x><y/></x>.(@foo)); __parent__.(true)) yield window;");
tryItOut("{}");
tryItOut("do {const __iterator__ = -0, constructor = null; } while((\t(uneval(__count__))) && 0);");
tryItOut("/*infloop*/M:do {export __iterator__;if(*::*) { if ( \"\" ) } else \f{let __proto__ = prototype, __parent__ = <><x><y/></x></>;let __parent__ = @foo, prop = true; } } while(());");
tryItOut("do {export *;{/*infloop*/for(var __noSuchMethod__ =  \"\" .isPrototypeOf(*);  \"\"  .. <y><z/></y>; <y><z/></y> , true) __iterator__ } } while((__iterator__.prototype = [1,,]) && 0);");
tryItOut("prop = __parent__;");
tryItOut("return eval(\"__count__, constructor = <y><z/></y>;\", ({a1:1}));");
tryItOut("with(__noSuchMethod__default: window;){/*for..in*/M:for(const constructor =  in <x><y/></x>) {let __noSuchMethod__, __count__ = 0x99;; } }");
tryItOut("{constructor, prototype; }{constructor, constructor;yield  /x/g ; }");
tryItOut("if(new null.__count__) {/*infloop*/L:for(var constructor; window; undefined) {Math.powyield; }gc } else /*infloop*/while(undefined){export __parent__;let __iterator__, prototype; }");
tryItOut("/*for..in*/L:for(const  /* Comment */__parent__ in (('fafafa'.replace(/a/g, function(y) { yield y; let __noSuchMethod__;; yield y; }))((window)(window))))/*for..in*/for([__proto__, __noSuchMethod__] = ((prototype).watch)() in []) {export __iterator__;{} }");
tryItOut("/*for..in*/L:for(let [__parent__, __parent__] = (!window).__defineSetter__(\"__parent__()\", function () { yield <x><y/></x> } ) in true) {/*for..in*/L:for(prop in #1=[#1#].@foo) {gc()L: prototype = __count__ = window; } }");
tryItOut("/*for..in*/M:for(var prop in ((([1,2,3,4].slice).apply)(this @ null)))const __parent__;");
tryItOut("M:if((({__noSuchMethod__: [__iterator__]}))) export __parent__; else  if (\n<x><y/></x>) if(null) export *;");
tryItOut("/*for..in*/for([__proto__, prop] = (prototype.prototype.__defineGetter__(\"prototype\", ({}).__lookupGetter__).__defineSetter__(\"prototype\", ({}).hasOwnProperty)) in ((p={}, (p.z = (1.2e3 = *::*))()))) {/*for..in*/for(let prototype.constructor in false) {__parent__;yield; } }");
tryItOut("yield [1e4['__count__']] = window ? <><x><y/></x></> : [z1] & eval(\" set prototype(prototype)<y><z/></y>\", *::*);");
tryItOut("var __parent__ = undefined;\n/*infloop*/L:for(let prototype; <x><y/></x>.hasOwnProperty(\"__iterator__\"); this) {(*::*).__defineSetter__; }\n");
tryItOut("if(<><x><y/></x></>++) yield  /x/ ; else  if ((~(*::* == <x><y/></x>))) return @foo;");
tryItOut("/*infloop*/for((null !== 1e4); ((this ? [z1,,] : <><x><y/></x></>.isPrototypeOf())()); \n[[1]] * <><x><y/></x></>) /*for..in*/\tfor(const [__iterator__, prototype] = <x/> in <y><z/></y>) {null }");
tryItOut("/*for..in*/for(const constructor.__parent__ in yield [[]]) {return <x><y/></x>;continue M; }");
tryItOut("if(set.__count__|=((*::*)())) ; else const __noSuchMethod__ = default: break; case 7: case 4: break; return;break; , prop = <><x><y/></x></>;");
tryItOut("do let __parent__, <y><z/></y> = <y><z/></y>\nbreak ; while((/a/gi) && 0);");
tryItOut("if(@foo > @foo) { if (prototype = __noSuchMethod__) {{}; }} else {this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in this) {Math.powthrow <x><y/></x>; }");
tryItOut("return;");
tryItOut("throw prop;");
tryItOut("let(prototype) ((function(){with({}) { throw <><></></>; } })());");
tryItOut("throw ({ prop: __proto__ });");
tryItOut("if(window) {return; } else  if ((yield (<y><z/></y>.__defineGetter__(\"__iterator__\", eval)))) {function  __iterator__ () { return prototype; }  } else {/*\n*/(K); }\ndo (<x><y/></x>);\n*::*\n while((1e-81.valueOf(\"number\")) && 0);\n");
tryItOut("this.zzz.zzz.prototype");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in __proto__) export *;");
tryItOut("");
tryItOut("L: {const constructor = *;/*for..in*/for(const [__iterator__, constructor] = 1e81 in <x/>) { } }");
tryItOut("");
tryItOut("L: throw <x><y/></x>;\n;\n");
tryItOut("var __count__ = <x/>");
tryItOut("if((prop.__noSuchMethod__ = <><x><y/></x></>.@*) ? ((__count__.__defineGetter__(\"constructor\", ({}).__lookupGetter__)).hasOwnProperty(\"__iterator__\")) : try { eval } finally { yield; } .__proto__)  else return;");
tryItOut("export __count__;gc()");
tryItOut("/*infloop*/while(<x><y/></x>.yoyo(@foo))/*for..in*/for(var __noSuchMethod__ in (('haha'.split)(this)))");
tryItOut("if(([15,16,17,18].filter(function (constructor, prototype) { gc() } , -3/0) .. new RangeError([]).__noSuchMethod__ = ((true).watch).call\t(__parent__, <y><z/></y>, #3={a:#3#}).isPrototypeOf(<x><y/></x>.constructor))) { if (((__proto__.__lookupGetter__(\"__iterator__\")).__parent__ & (0/0.__defineSetter__(\"__noSuchMethod__\", (new Function(\"M:switch(<x><y/></x>) { case 9: break; case 4: ({a2:z2});break; case 1e81: break; Math.sinyield <y><z/></y>;break; break; case  '' : __iterator__ }\")))))) export __parent__;} else {yield true; }");
tryItOut("/*infloop*/for(var ({ __proto__: ({ __proto__: __count__, __parent__: __noSuchMethod__ }) }) = <x><y/></x>--; <y><z/></y>; this.zzz.zzz) {let (__count__ = <x/>) { ; } }");
tryItOut("L: export prototype;");
tryItOut("if(__count__.prototype) { if (().__defineGetter__(\"__parent__\", function  prop (function::__noSuchMethod__) { return  /x/g  } ).valueOf(\"number\")) {break \n }} else throw prototype;");
tryItOut("/*for..in*/M:for(const [constructor, (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice))] = (p={}, (p.z = window.hasOwnProperty(\"__parent__\"))()) in (new (function  __iterator__ () { yield <><x><y/></x></>.__noSuchMethod__ = this } )((__iterator__.__proto__)))) {if([-1 %= <x><y/></x> for (({ __count__: __proto__ }) in [1,,]) for (constructor in __count__) if ({})]) {this;gc() } else  if (\n<x><y/></x>.(<><x><y/></x></>)) yield;let (__proto__ = (__iterator__+=)) { return __count__; } }");
tryItOut("");
tryItOut("with(prop.__count__ =  /x/g ){/*infloop*/for(const __proto__ = eval(\"<x><y/></x>\", {}); 5.0000000000000000000000.@foo; undefined.yoyo(1e4)) {'haha'.split } }");
tryItOut("if([<x><y/></x>].some(({}).__lookupGetter__).*.prop) { if (prototype.throw(<y><z/></y>)) ;} else return [,,z1];");
tryItOut("/*infloop*/for(const __count__; true; <x><y/></x>) {}");
tryItOut("/*infloop*/ get constructor __iterator__ (constructor) { yield (this.propertyIsEnumerable(\"x::constructor\") = this.__defineSetter__(\"{(true); }\", __noSuchMethod__)) } ");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__parent__ in false) {yield *::*; }");
tryItOut("");
tryItOut("if(033.throw(<x><y/></x>)) { if (<bbb xmlns=\"033\"></bbb>) switch(constructor) { case 2: export prototype;break;  } else {/*infloop*/L:do ; while([11,12,13,14].filter); }}");
tryItOut("with({}) (__proto__) getter: (1 for (x in [])) = __parent__;");
tryItOut("/*infloop*/for(({ constructor: __proto__, __parent__: __parent__ }) = __proto__; <x/>; new Boolean()) let constructor = <x/>, __count__;");
tryItOut("this.zzz.zzz;");
tryItOut("while((( /x/g .yoyo( \"\" ))) && 0){}");
tryItOut("with((function ([y]) { };)){yield undefined; }");
tryItOut("M:if( /x/ ) {([]); } else __noSuchMethod__ = false\n");
tryItOut("if(null.__parent__ =  /x/g .valueOf(\"number\").__proto__) { if (__noSuchMethod__.__proto__ = ((1 for (x in [])))(new (function  __noSuchMethod__ (__proto__) { return prop } )(), .2)) {(undefined); }} else let (constructor = <x><y/></x>, __noSuchMethod__ = <x><y/></x>) { {} }");
tryItOut("while((*.__lookupSetter__(\"__count__\")) && 0){var constructor; }");
tryItOut("");
tryItOut("do {continue M; } while((<x><y/></x>) && 0)\nexport *;");
tryItOut("if(function::prototype(null) = __proto__) let (__noSuchMethod__ = @foo, prop) { export __iterator__; } else  if ((<y><z/></y> % this).__parent__ = <x/>.__proto__) {export *; } else export constructor;");
tryItOut("{}");
tryItOut("/*infloop*/do {switch(<x><y/></x>) { default: const __iterator__ =  /x/g ; } } while(window() .@ __proto__.propertyIsEnumerable(\"prop\"));");
tryItOut("/*infloop*/for(var ( (new Function(\"continue ;\"))(<><x><y/></x></>, <x><y/></x>) { __count__: __iterator__ }) = ( /* Comment */@foo); this; true.throw( /x/ )) {Uexport *; }");
tryItOut("return;");
tryItOut("M:do export __noSuchMethod__; while((this) && 0);");
tryItOut("export *;");
tryItOut("/*infloop*/do var __iterator__ = 1e4, __noSuchMethod__; while(~ '' );");
tryItOut("L:if(<><><xxx>{__proto__}</xxx><ccc:ddd></ccc:ddd></></>) return 1e-81; else  if (({prop getter: new Function })) {/*infloop*/M:do {__iterator__ =  /x/g , __count__ = <x><y/></x>; } while(__parent__); const __proto__; }");
tryItOut("if((__noSuchMethod__ = !<x/>)) if(__proto__) ; else  if (prop = null) {(false); }");
tryItOut("/*for..in*/M:for(const __count__ in ((new Function)( /x/g )))");
tryItOut("if(function () { <x><y/></x>; } ) { if (eval(\"(({ __count__: prop, constructor: __iterator__ }).__count__ = eval(\\\"export *;\\\",  \\\"\\\" ))\", (__count__.__noSuchMethod__ = <><x><y/></x></>))) {if(this) ; }} else return <y><z/></y>;");
tryItOut("M:if((({__iterator__: (__parent__ = ({a2:z2})) }))) { if (({prototype:  /x/g .unwatch(\"__proto__\")})) constructor;} else {__count__;(prop); }");
tryItOut("if(#3={a:#3#}.throw(undefined)) {break M; } else  if (prop) {let prop = <><x><y/></x></>;gc() }");
tryItOut("if(()) { if (([].@* < <ccc:ddd><ccc:ddd><x><y/></x><x><y/></x></ccc:ddd></ccc:ddd>)) {yield; } else {var __proto__ = prop;const prototype = <y><z/></y>; }}");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("/*infloop*/for(let prop; <x/>; (this.zzz.zzz)) \n");
tryItOut("with(__parent__--)let __proto__ = 0.1;");
tryItOut("if((false for (__iterator__ in <x><y/></x>)).__lookupSetter__(\"__parent__\")) { if (__parent__ = <y><z/></y>) {yield;{yield <x><y/></x>; } }} else {( /x/ ); }");
tryItOut("{(__iterator__);return; }");
tryItOut("{__parent__,  = window; }");
tryItOut("let (function::__count__ = (prototype.__parent__), __noSuchMethod__) { \fL:if(__noSuchMethod__) {throw {}; } else  if (true) {(4.);return this; } else ; const __count__; }M:switch(3.141592653589793) { default:  }");
tryItOut("with((__parent__).call(<><x><y/></x></>, )){function  prop (constructor, x::prototype) { yield  /x/g  }  }");
tryItOut("{if(<x><y/></x>) { if (<><x><y/></x></>) return;} else window;{} }");
tryItOut("{ /x/ let __count__; }");
tryItOut("do gc() while((new <x/>-=['fafafa'.replace(/a/g, /a/gi) for (__parent__ in arguments) for each (function::__parent__ in 3)]) && 0)\n/*infloop*/M:do {yield 033;return *; } while(<><x><y/></x></>);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in null) {({}).__lookupGetter__if(<x><y/></x>) { if (<x/>) export __noSuchMethod__;} else return window; }");
tryItOut("if(<x><y/></x>[[,]]) export *\n else  if ( /x/ ) break ;");
tryItOut("this\nreturn;");
tryItOut("/*for..in*/for(const constructor in ((().call)(<><x><y/></x></> &= <x><y/></x>)))yield #3={a:#3#}\nreturn\nwith({__iterator__: (({constructor: <><x><y/></x></> })) in *::*}){let (prototype, constructor) { gc() } }");
tryItOut("/*infloop*/L:while((* if (window)))continue ;");
tryItOut("/*for..in*/for(const __proto__ in ((({}).hasOwnProperty)(-3/0))){ }");
tryItOut("/*for..in*/for([x::constructor, prototype] = undefined in this.__defineGetter__(\"__count__\", ('haha'.split).call)[<x><y/></x>]) {/*for..in*/for(let __count__ in [1,,]) return; }");
tryItOut("{/*infloop*/for([({ __parent__: prototype }), ] = (<><x><y/></x></>.watch(\"__count__\", true)); __proto__; (<y><z/></y> for each (constructor in null))) export *;gc() }");
tryItOut("while((undefined) && 0){gc()var __proto__ = true; }");
tryItOut("/*for..in*/for(let [prop, ({ __noSuchMethod__: prop, prototype: __iterator__ })] = ( \"\" )(*.watch(\"prop\", function  __count__ (__count__) { yield; } ),  '' .isPrototypeOf({yield;var __proto__ =  /x/g , constructor = <x><y/></x>; })) in  '' .isPrototypeOf(<><x><y/></x></>)) function  __noSuchMethod__ ()<y><z/></y>");
tryItOut("M:with({__count__: window}){setter = window; }");
tryItOut("return\n{}");
tryItOut("return (this.__defineGetter__(\"prototype\", /a/gi));");
tryItOut("try { let([], __proto__ = *::*) { with({}) throw window; } catch(constructor if (function(){for(let y in []);})()) { throw prop; } catch(prototype if (function(){for(let y in [5,6,7,8]) yield this.zzz.zzz;})()) { var __iterator__, prototype =  /x/g ; } catch(constructor) { for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return; } finally { this.zzz.zzz; } ");
tryItOut("/*infloop*/do export constructor; while(<y><z/></y>);");
tryItOut("while((window) && 0)/*for..in*/for(const [__count__, __count__\f] = (__count__.delete setter= -1) in <><x><y/></x></>) {yield <x/>; }");
tryItOut("/*infloop*/L:while( /* Comment */(let (prop) __iterator__ ? <x><y/></x> : __noSuchMethod__))L:do {yield window;{} } while((__noSuchMethod__) && 0);");
tryItOut("while(([true.isPrototypeOf(({constructor: <x><y/></x>.@* }))]) && 0)/*for..in*/for(const constructor = this.zzz.zzz in <y><z/></y>) \tprop.__proto__{} }");
tryItOut("/*infloop*/do {let __noSuchMethod__ = @foo, __count__;const __iterator__ =  /x/ ; } while([,]);");
tryItOut("do return <x/>; while(((({__iterator__: true}).eval(__proto__ = <><x><y/></x></>))) && 0);");
tryItOut("(undefined); const __proto__;");
tryItOut("/*for..in*/for(var __iterator__ = arguments in __count__%=*::*) while((new function (__noSuchMethod__) { yield; } (this, null)) && 0){const prototype; }");
tryItOut("M:if(undefined) ");
tryItOut("with({}) { continue M; } \nlet __noSuchMethod__ = <><x><y/></x></>, __iterator__ = <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let eval(\"return;\", <><x><y/></x></>.yoyo(false)) in (<x><y/></x>)) {switch( /x/ ) { case 4:  } }");
tryItOut("M:while((this.zzz.zzz) && 0)(@foo);");
tryItOut("L:with(-1 / <><x><y/></x></> <= false)yield;");
tryItOut("let(({ __proto__: ({ __parent__: [, ({ __count__: ({ __count__: constructor, __iterator__: __noSuchMethod__ }), __noSuchMethod__: [__parent__, , __proto__, prototype, ] }), , ({ __iterator__: prototype })] }) }), prop) ((function(){throw StopIteration;})());");
tryItOut("");
tryItOut("export constructor;");
tryItOut("switch(((({ __proto__: __parent__ }) = void  /x/g ) >>= (\n((1 for (x in [])))(<x/>)))) { case 5: break; case 6: break; case new ({}).__lookupGetter__((__proto__ =  \"\" )): <><x><y/></x></>.watch(\"__noSuchMethod__\",  /x/g );{}break; break; with({}) { return false; } break;  }");
tryItOut("/*for..in*/for(let __iterator__ = undefined.__defineSetter__(\"__iterator__\", __proto__) >>>=prop = -1 in (@foo++)) {yield; }");
tryItOut("if((1e4 ^= <x><y/></x>)) M:do {export *;function  constructor (__parent__) { return <y><z/></y> }  } while((033) && 0);");
tryItOut("let (constructor, __count__) { (this); }");
tryItOut("if( /* Comment */<!--yy-->) {let (__noSuchMethod__, prototype = *) { yield; } } else M:if(typeof -3/0) {continue ; } else  if ((*::*)) {return; } else {; }");
tryItOut("(__noSuchMethod__);\nconst __noSuchMethod__ = __iterator__;\n");
tryItOut("if(new Exception()) { if (new (@foo)(<x><y/></x>, <x><y/></x>)) L:if(<><x><y/></x></>) { if (<><x><y/></x></>) {const constructor; } else prototype, <><x><y/></x></>}} else let prop, __count__ = true;");
tryItOut("/*for..in*/L:for(case window.__parent__ =  /x/g :  in ((/a/gi)(<><x><y/></x>\t</>.unwatch(\"prototype\"))))yield undefined;");
tryItOut("this.zzz.zzz;");
tryItOut("L: {yield <x/>; }");
tryItOut("let (prototype = <x><y/></x>) { let constructor; }");
tryItOut("with({}) { {} } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__.__noSuchMethod__ in  ''  -= <><x><y/></x></>.yoyo((({__noSuchMethod__: undefined})))) {export __iterator__{prop; } }");
tryItOut("L:with({prototype: (<x/> <<  /x/g )}){yield\nexport *; }");
tryItOut("/*infloop*/L:do /*infloop*/for(var [[prop, __parent__, , , ({ __proto__: prototype, prototype: __count__ })], __count__] = __count__ = (prop.__noSuchMethod__ setter= (new Function(\"(1 for (x in []))\"))) ^ Array(__noSuchMethod__,  /x/g ); ([1,2,3,4].slice).call((true.__defineGetter__(\"constructor\", Math.sin)), [constructor]); <x><y/></x>.hasOwnProperty(\"__noSuchMethod__\")) {export *; } while([15,16,17,18].filter(function(y) { yield y; let default: case this: <xxx>{prop}</xxx>break; case 2: yield;, prop;; yield y; }, (-1)).__parent__);");
tryItOut("return <y><z/></y>;");
tryItOut("prototype = prototype;");
tryItOut("/*infloop*/do /*for..in*/for(const prototype in  /x/g ) {return <x><y/></x>; } while(__count__);");
tryItOut("export __parent__;");
tryItOut("L:if((#2=[-0])) {M:if( /x/  *= constructor) ; else <x/>; }");
tryItOut("L: {/*infloop*/for((constructor if (constructor)) instanceof constructor; (yield __proto__); new Object(([,,z1]);)) switch(this) { case 2: break;  }/*for..in*/for(let __count__ = <x/> in true) var prototype = <><x><y/></x></>, __parent__; }");
tryItOut("/*infloop*/while(<x><y/></x\t>.(<x><y/></x>)){throw  /x/ ;yield; }");
tryItOut("__iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in ([15,16,17,18].some(function(y) { yield y; ;; yield y; }, window ? <x/> : undefined > (p={}, (p.z =  /x/ )())))) /*for..in*/for(const [__count__, __noSuchMethod__] = ((Error(<><x><y/></x></>, null) for each (__proto__ in arguments))) in (__iterator__ = <x/>)) {{}/*infloop*/L:while(prototype.throw(<><x><y/></x></\f>))/*infloop*/for(__noSuchMethod__ = <x><y/></x>; <x/>; __proto__) {return; } }");
tryItOut("{/*infloop*/for(((function ([y]) { })() - [1,,]); __noSuchMethod__ %= __parent__;  ''  /= __parent__) {function ()this }return; }");
tryItOut("while((([prototype].eval((constructor.(<y><z/></y>.isPrototypeOf(null)))).__proto__ = 4. , prop)) && 0)/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in @foo++) ;");
tryItOut("with({}) { /*for..in*/L:for(const (@foo ?  /x/g  :  '' )(this.__defineSetter__(\"prototype\", (({}).hasOwnProperty).apply)) in [,]) {} } ");
tryItOut("/*infloop*/do {(0x99);gc() } while((new ((<><x><y/></x></>.propertyIsEnumerable(\"prototype\")))(<y><z/></y>)));");
tryItOut("export *;false;\f{yield;switch(undefined)\t { case <y><z/></y>:  } }");
tryItOut("yield this; const __parent__;");
tryItOut("L:if(\ntrue %= (gc())) {( '' (__noSuchMethod__)); } else  if (<zzz>yield</zzz>.yoyo(__iterator__.__iterator__ =  \"\" ).yoyo(@foo && this[(<x><y/></x>.hasOwnProperty(\"prop\"))] % this.__defineGetter__(\"prop\", <xxx {__proto__}={ /x/ } />))) {/*for..in*/for(const __proto__ in ((eval)((constructor =  /x/g ) < prop))){constructor } }");
tryItOut("/*for..in*/for(let ({ __count__: ({ prop: __parent__, prop: ({ __iterator__: prototype }) }), __iterator__: ({ __parent__: prototype, __parent__: ({ constructor: __parent__, constructor:  }) }) }) in (((1 for (x in [])))(prop = undefined))){yield; }");
tryItOut("{const __noSuchMethod__ }");
tryItOut("if(<x/>) { if (new Array()) {(<y><z/></y>);export prototype; }} else return\n;");
tryItOut("/*for..in*/for(__noSuchMethod__ = new 1e4(0.1, <x><y/></x>) in 1e-81) {/*for..in*/L:for(var prototype.prototype in ((function (__noSuchMethod__, __count__) { yield (<x><y/></x>.(*::*)).yoyo(<x><y/></x>) } )(prop))); }");
tryItOut("{return prototype; }");
tryItOut("{__noSuchMethod__ = this, __iterator__ = -0;yield; }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = ({__parent__ getter: /a/gi, __count__: <x><y/></x> }) in [11,12,13,14].filter) {/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in false) \tyield; }");
tryItOut("/*infloop*/for(var __noSuchMethod__; ((constructor)[<><x><y/></x></>]); __proto__.__lookupSetter__(\"__iterator__\")) {(<x><y/></x>);yield; }");
tryItOut("/*infloop*/for(var prop; ((uneval(3/0))).unwatch(\"__noSuchMethod__\").yoyo(<y><z/></y> *= <x><y/></x> | <><x><y/></x></> ^= <><x><y/></x></>.__defineGetter__(\"constructor\", eval)); (<><x><y/></x></> &= return false;\nfunction::__count__, getter\n)) export *;");
tryItOut("M:\t/*do yield 1.3; while(('haha'.split) && 0)(/;");
