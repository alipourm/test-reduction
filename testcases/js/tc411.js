tryItOut("M:if(><x><y/></x><//*>) { if (this) constructor = prop;} else break ;");
tryItOut(".2;");
tryItOut("export __parent__;");
tryItOut("let (__count__ = yield.(constructor\t) ^= constructor = *::*) { if(*::*) throw *::*; else {throw window; } }");
tryItOut("do {prop, __proto__;export *; } while((RegExp()) && 0);");
tryItOut("/*infloop*/while(<y><z/></y>.*){let prototype, constructor = <y><z/></y>; }");
tryItOut("with(@foo)return;");
tryItOut("/*infloop*/while((0)){prototype;const prop, constructor; }");
tryItOut("switch(this.__defineGetter__(\"prototype\", ({}).__lookupGetter__)) { case (p={}, (p.z = [[1]])()) for each ( { return  /x/g  }  in this.__defineGetter__(\"__parent__\", function  prototype (__parent__, constructor) { return <x><y/></x> } )) if (undefined): break; default: break; case (({__noSuchMethod__: #1#}) .@x:: (new Function(__parent__, prop.__proto__ setter= (*).watch))): ;break; let (__iterator__) { throw  /x/g ; }break;  }");
tryItOut("/*infloop*/for(var constructor; [throw __noSuchMethod__;].sort(function(y) { yield y; let __parent__ = null, __count__;; yield y; }) ? ([[]] %= null).propertyIsEnumerable(\"__parent__\") : function(id) { return id } < (new (<><x><y/></x></>)(true)(-3/0.throw(<x/>), <x/>)); (<x><y/></x>.@*)) ((@foo).__defineSetter__).call");
tryItOut("let (__parent__, __proto__) { yield <x><y/></x>; }");
tryItOut("/*infloop*/for(var __parent__ = <x><y/></x>; (<><x><y/></x></>--); null * __parent__) var __proto__ = window;");
tryItOut("{M:if(<x><y/></x>) { if (<><x><y/></x></>.@*) {let prototype = window, __count__; }} else  get __count__ __count__ () { yield -3/0 } for(let y in [5,6,7,8]) export *; }");
tryItOut("if(([(new Array((Function).call(<><x><y/></x></>, [[]]), prototype))].filter((1 for (x in []))))) export __noSuchMethod__;");
tryItOut("/*infloop*/for(const __iterator__; <x><y/></x>; <x><y/></x>) {export *; }");
tryItOut("return (<><x><y/></x></>)(undefined, <x><y/></x>);");
tryItOut("/*for..in*/for(([11,12,13,14].filter)( /x/ ) in ((function (constructor = prop--, prototype) { return [constructor, function::<><x><y/></x></>, , __parent__, ({ __noSuchMethod__: __parent__, __count__: __count__ })] = [__proto__] } )(({ __iterator__: __parent__, __iterator__: ({ \f__parent__: __noSuchMethod__ }) }) = <zzz>@foo</zzz>())))if(.2) { \"\"  } else  if (1e+81) {}");
tryItOut("(window)\t;");
tryItOut("/*infloop*/for(({ __count__: ({ __count__: __parent__ }), __iterator__: __parent__ }) = (this.__defineGetter__(\"__noSuchMethod__\", ({}).hasOwnProperty)); function(id) { return id }; <x><y/></x>()) ;");
tryItOut("/*infloop*/for(('haha'.split).call(<><x><y/></x></>, <><x><y/></x></>, @foo); __count__.(new (prototype.@foo)((true.prototype = <x><y/></x>))) .. ! \"\" ; null) /*infloop*/for(<x><y/></x>;  '' ; <y><z/></y>) {return 1e+81;throw *; }");
tryItOut("/*infloop*/@foo");
tryItOut("if(__count__) {constructor getter: function  constructor () { [[1]](#0\t=<x/>)(window.prop)  } throw __count__.__iterator__ getter= (new Function(\"\")); }\f else M:do throw <x/>; while(((new [1]())) && 0);");
tryItOut("/*for..in*/M:for(const  = eval(\"yield <x><y/></x>;\", <x><y/></x>) in ({get getter: 3.141592653589793, __noSuchMethod__function  __count__ (__parent__, __count__) { (this); }  })) {export *; }");
tryItOut("/*for..in*/for(var prop in (prop.__count__ = <><x><y/></x></>)) const prototype;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) try { *::*; } catch(__noSuchMethod__) { export null; }  const prop;");
tryItOut(" \"\" \nif(constructor) { if (this) } else yield arguments;");
tryItOut("/*infloop*/M:do /*for..in*//* nogeckoex bug 349964 */L: for  each(let in window) var constructor = <><x><y/></x></>, __count__ =  \"\" ; while(<><zzz>function  __proto__ ()let (__proto__\f) [](new (Math.pow)(({__noSuchMethod__:  /x/  }), []))</zzz></>);");
tryItOut("let(prop) ((function(){return <y><z/></y>;})());");
tryItOut("(eval(\" \\\"\\\"  ? window :  '' \", <x/>.hasOwnProperty(\"prop\")));");
tryItOut("constructor = *::*");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(function::__iterator__.__noSuchMethod__ in ) {}");
tryItOut("{M:while((undefined) && 0){yield; } }");
tryItOut("/*infloop*/for(__proto__; new ((1 for (x in [])))(__parent__ = __parent__)\t; [eval(\"<x><y/></x>\", -[,,z1]) for each (__noSuchMethod__ in this) for each (constructor in <y><z/></y>) for each (__iterator__ in <><x><y/></x></>)]) {return <x><y/></x>; }");
tryItOut("if(({__parent__ setter: ((1 for (x in []))).call })) yield; else  if ((yield \ffalse in <><x><y/></x></> | ((uneval(<y><z/></y>))))) {yield;; }");
tryItOut("/*infloop*/L:for([] = this.__defineSetter__(\"__iterator__\", 'haha'.split); ({a2:z2}).__defineSetter__(\"__proto__\", eval).throw(let (__noSuchMethod__ = @foo) 1.2e3.__lookupGetter__(\"__noSuchMethod__\")); [(<y><z/></y>)[(-1).__defineGetter__(\"constructor\", (new ({a2:z2})(<><x><y/></x></>)).__defineSetter__)]]) /*infloop*/do {(prop); const prototype;const yield, __count__\n } while((Object(( ''  >> <y><z/></y>)[false])));");
tryItOut("switch(<y><z/></y>) { default:  }");
tryItOut("do export *; while((((uneval(false\n)))) && 0);");
tryItOut("<x/>;");
tryItOut("if(<x><y/></x> & <><x><y/></x></>) { } else  if ([11,12,13,14].some) {true }");
tryItOut("export *;");
tryItOut("1.2e3;");
tryItOut("M:if(__noSuchMethod__.constructor) export __iterator__; else  if (new Function) {return; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:for(({__proto__ setter: ((new Function(\"{}\"))).apply });  '' ().throw((1 for (x in []))); (--(function (prototype) { [1,2,3,4].map } ).call(const prop = true, ({__noSuchMethod__: null }), function::__proto__ = <x/>))) {return 1e-81;var __proto__ = this; }");
tryItOut("M:if( \"\" ) { if ((#1#.__lookupGetter__(\"prototype\"))) {{} }} else {(function(q) { return q; }).applyvar __proto__ = 033, prop = []; }");
tryItOut("L:if((let __noSuchMethod__ = <x/>, prop <=  '' )) {{; } }");
tryItOut("; const __iterator__;");
tryItOut("let(__proto__ = this, __iterator__ = __parent__) ((function(){throw 3/0;})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in <x><y/></x>) {__count__ = <x><y/></x>;__iterator__ = __proto__; }");
tryItOut("if(constructor) {M:switch(1.3.@foo) { default: /a/gi } } else  if (<y><z/></y> % window) L:with({constructor: prop})yield <x/>; else with({}) prototype, constructor;");
tryItOut("M:while((<x/>) && 0)throw this;");
tryItOut("if([([null for (constructor in 3/0)] -= (eval))].some(({}).hasOwnProperty)) if(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.__defineSetter__(\"__count__\", prototype)\n) ; else  if (false) {/*infloop*/L:while(<y><z/></y>){yield;{} } } else return;");
tryItOut("if((<x><y/></x>.eval(new (({}).__lookupGetter__)((-1), <x><y/></x>)))) { if ((let constructor, prototype = window)) {let (prototype) { /*infloop*/do export __noSuchMethod__; while(prop = <x><y/></x>); } }} else {{}return; }");
tryItOut("/*for..in*/for(let prototype = <x/> in (({prototype: this, __count__: <x><y/></x> }))) Math.pow");
tryItOut("/*infloop*/for(var prototype() = ; prototype = <><x><y/></x></>; (__count__ for each (__parent__ in ))) break M;");
tryItOut("with(<><xxx {__noSuchMethod__}={<x/>} /></>)with(1e81){{}const __noSuchMethod__ = <x/>; }");
tryItOut("/*infloop*/M:while(new Array())M:if(window) return <x><y/></x>; else  if (<x/>) {return window;const prop; }");
tryItOut("M:if(*::*) yield; else  if (<y><z/></y>) {yield;var __proto__, __iterator__; }\n");
tryItOut("M:if('fafafa'.replace(/a/g, eval)) /*for..in*//* nogeckoex bug 349964 */ for  each(var ({ __parent__: prop, __noSuchMethod__: __iterator__ }) in <y><z/></y>) {return;M:if(false) {return; } } else const ({ __iterator__: __iterator__ }), __noSuchMethod__;");
tryItOut("while((*::*) && 0)return;");
tryItOut("L:if(__proto__ = (1.2e3 for each (__noSuchMethod__ in <><x><y/></x></>))) if((__iterator__.__iterator__ getter= function (__proto__) { yield <y><z/></y> } )) var getter; else ({ __count__: __parent__ })");
tryItOut("/*for..in*/for(const __proto__ in (((1 for (x in [])))([1])))(Function).apply");
tryItOut("{const __noSuchMethod__, prototype\ngc() }");
tryItOut("/*infloop*/\ffor(prop; (__parent__); (((1.2e3 ? <x/> : true)).call((__parent__.eval(true)),  /x/ ))) __noSuchMethod__;");
tryItOut("L:switch((constructor = <><x><y/></x></> &= this)) { case 7: (<x><y/></x>);break; default: (@foo);break; case __parent__: break;  }");
tryItOut("if((prototype = <x/>.@*)) { if (constructor) while((@foo) && 0){const __count__ = prop; }} else yield;");
tryItOut("return null\nreturn");
tryItOut("/*infloop*/L:for(const constructor; __parent__ = <x><y/></x>; (window(@foo, (-0)))) ");
tryItOut("/*infloop*/for((-1); [15,16,17,18].sort([1,2,3,4].slice, (3.141592653589793\n .@ eval(\"(({__noSuchMethod__: __noSuchMethod__: {} }))\", (<x><y/></x>.__noSuchMethod__ = <><x><y/></x><\f/>)))); (yield false.__defineSetter__(\"constructor\", <y><z/></y>)).hasOwnProperty(\"prototype\")) throw <x><y/></x>;");
tryItOut("/*for..in*/for(const prototype = ({__iterator__: ({__parent__ setter: ({}).hasOwnProperty }) }) in @foo) {{__proto__ = ( =  '' ); }[1,2,3,4].slice }");
tryItOut("let (__noSuchMethod__ =  '' ) { continue L; }");
tryItOut("let(__iterator__ =  /x/g ) ((function(){yield ({a2:z2});})());");
tryItOut("M:if(__proto__) {yield; } else  if ( /x/g ) {function  __count__ () { return <><x><y/></x></> }  }");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = <x/> in <x><y/></x>) {yield; }");
tryItOut("yield ({__parent__: <x><y/></x> });");
tryItOut("if(3) let prototype, __parent__ = false;");
tryItOut("L:with(<><x><y/></x></>(window, window)){gc() }");
tryItOut("if(__proto__ = gc()) {gc() } else  if (function::constructor%=(yield #1=[#1#])) /*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in -0) {gc() }\n");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do var prototype; while(__iterator__)\nconst __count__, prototype = <><x><y/></x></>;\n1e81 === @foo.__parent__ = (eval(\"<ccc:ddd><employee id=\\\"1\\\"><name>Joe</name><age>20</age></employee><ccc:ddd><x><y/></x>yyy</ccc:ddd></ccc:ddd>\", ({}))), window %= <x><y/></x>\n");
tryItOut("do /*infloop*/while(__iterator__)const __iterator__ = <x/>; while((*) && 0);");
tryItOut("{return; }");
tryItOut("do {;return <x><y/></x>; } while((new ({a1:1})(<x><y/></x/*\n*/>, (function ([y]) { })())) && 0);");
tryItOut("var __proto__, prop =  /x/ ;");
tryItOut("/*for..in*/for(var [prototype, prop] = *::*.yoyo(<><x><y/></x></>) in [z1]) return;");
tryItOut("/*infloop*/while([prototype]){let (__count__ = *, __noSuchMethod__ = window) { throw null; }var __count__, __noSuchMethod__ = <x><y/></x>; }");
tryItOut("M:do \f{; } while(((-1)) && 0);");
tryItOut("break ; const prop;");
tryItOut("yield (p={}, (p.z = x::__iterator__)()) <=  = __parent__;");
tryItOut("/*for..in*/for([prop, __noSuchMethod__(this.zzz.zzz)] = [({ __parent__: __iterator__, constructor: __parent__ })] = __proto__.unwatch(\"__iterator__\") -=  ''  ? [,] : 1e-81 in <{window ? <><x><y/></x></> : <y><z/></y>}><!--yy--></{window ? <><x><y/></x></> : <y><z/></y>}>) __count__ = constructor;");
tryItOut("export *\n");
tryItOut("with({prop: (yield ({}).hasOwnProperty)}){const __iterator__ = .2, prototype = <x><y/></x>; const __proto__;/*for..in*/for(__noSuchMethod__ in <x><y/></x>) __iterator__; }");
tryItOut("if(new Array().prototype) {export prop;{} } else  if () /*for..in*/M:for(let <><x><y/></x></> >= window.constructor in (([1,2,3,4].map)(__iterator__.([,,z1])))){prototype = (__parent__.(false)), __noSuchMethod__function () { return function ([y]) { } }  } else {if((__noSuchMethod__.(#3={a:#3#}.hasOwnProperty(\"prototype\")))) /*for..in*/L:for(let prototype in (((@foo).__defineSetter__)(prop)))return <><x><y/></x></>; else  if (function  __parent__ (prototype)((<y><z/></y>)())(new (null)())) {( /x/g ).__defineSetter__return; } }");
tryItOut("if(this) {var constructor; }\nexport *;\n");
tryItOut("/*infloop*/for((this.__defineSetter__(\"prototype\", [1,2,3,4].map)); __noSuchMethod__ = (prototype = [] ? ({a1:1})\t : (<x><y/></x> >>>  '' )); (constructor|=( \"\" .__defineSetter__(\"__parent__\", (function(q) { return q; }).apply)).__lookupGetter__(\"__parent__\"))) {do {break ;{} } while((((false)(x::function::prop, __count__ = <x><y/></x>))) && 0); }");
tryItOut("let (function::prop, prototype) { switch(this.__defineSetter__(\"__proto__\", Math.sin)) { default: (({a1:1})); } }");
tryItOut("export __count__;\n/*for..in*/for(const prototype in ((function(y) { yield y; {};; yield y; })(<x><y/></x>))){;break ; }\n");
tryItOut("/*infloop*/for(prop; undefined; window) return <><x><y/></x></>;");
tryItOut("with(<><x><y/></x></>)-3/0;");
tryItOut("/*infloop*/do {} while(new this());");
tryItOut("if(<x><y/></x>) \t{export *;yield; }/*infloop*/while(<><{__parent__}><ccc:ddd><x><y/></x><x><y/></x></ccc:ddd></{__parent__}></>)(__parent__);");
tryItOut("/*infloop*/M:do {var __noSuchMethod__ = window, constructor = 0x99;return; } while(prototype = this);");
tryItOut("do export __proto__; while(((<>eval</>[({ __parent__: constructor, __proto__: prototype }) = ({ __parent__: __proto__ })])) && 0);");
tryItOut("while((@foo) && 0)export prototype;(<>\r<x><y/></x></> ..  '' );");
tryItOut("with(( /* Comment */true)){continue ; }");
tryItOut("/*infloop*/for(<x/>; (<x/>.@foo); (((( /* Comment */false))()).__proto__ = @foo &&  '' )) if(constructor = <x><y/></x>) { if ((p={}, (p.z = *::*)())) {return false;return undefined; } else yield;}");
tryItOut("/*for..in*/for(const function::prototype = (window.__defineGetter__(\"__iterator__\", Function) in <><x><y/></x></>.eval( /x/g )) in (constructor)) ");
tryItOut("{throw  '' ; }");
tryItOut("/*for..in*/for(var null['__parent__'] in (([,,z1])([15,16,17,18].map(eval, \ftypeof __iterator__.propertyIsEnumerable(\"__count__\"))))){/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in <x><y/></x>) yield;/*for..in*/\ffor(let prototype =  /x/  in  /x/g ) throw <x><y/></x>; }");
tryItOut("with({__proto__: __proto__.(S)})continue L;");
tryItOut("if(<y><z/></y>) (let (__iterator__ = [z1,,], __count__ = constructor) yield <x/>) else  if (<y><z/></y> =  /x/g ) {export *;3.141592653589793; }");
tryItOut("/*infloop*/for(let [__parent__, ({ __iterator__: prototype }), , ({ __proto__: prototype, __iterator__: prop })] = ((new Function(\"break M;\"))).call( '' , \r); (<><x><y/></x></>.yoyo(<x><y/></x\t>)); ( /* Comment */true)) {export __noSuchMethod__;<><x><y/></x></>; } const __iterator__;");
tryItOut("if((#1=({__count__: <><x><y/></x></>}))) return function::constructor; else export prototype;");
tryItOut("/*for..in*/for(__iterator__ = ((undefined.__iterator__) = \n[<x><y/></x>].filter(<y><z/></y>)) in 0.prop) {if(function  __proto__ (__count__) {  } .isPrototypeOf([z1,,])) { if (\t[1,2,3,4].slice(5.0000000000000000000000)) null} else x::__noSuchMethod__ = this; }");
tryItOut("if(RangeError()) { if ((<><x><y/></x></>)) throw false; else gc()}");
tryItOut("while((__proto__ = -0) && 0)return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in  /x/g ) (prototype);");
tryItOut("while(((let (prototype, prototype = [1])  /* Comment */(( '' )([1,2,3,4].map)))) && 0)return;");
tryItOut("/*infloop*/for(({ prototype: __noSuchMethod__, __iterator__: prototype }) = #1#; this.__defineSetter__(\"__parent__\", function(y) { yield y; yield constructor;; yield y; }); <x><y/></x>.(<><x><y/></x></>)) {/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in [15,16,17,18].some(window, __parent__)) {var __noSuchMethod__ = this, __proto__( \"\" ); }break ; } const prototype;");
tryItOut("const constructor, prop;");
tryItOut("/*infloop*/for(const prototype; __proto__-=3; window) {continue ;export __noSuchMethod__; }");
tryItOut("yield [,,z1].propertyIsEnumerable(\"constructor\");");
tryItOut("{}");
tryItOut("yield;yield;");
tryItOut("/*for..in*/for(let __noSuchMethod__['prototype'] in ((new Function)((<><x><y/></x></> <<= this.hasOwnProperty(\"function::__count__\")[__proto__ >>>= /x/g ]))))continue M;");
tryItOut("function(q) { return q; }");
tryItOut("with((__count__.prototype = (function ([y]) { })())){break M;; }");
tryItOut("M:if((__noSuchMethod__.prop = true)) {, function (__parent__) { yield #3={a:#3#} }  = undefined; } else  if (<y><z/></y>) continue M; else gc()");
tryItOut("with({}) __noSuchMethod__ setter: Math.sin");
tryItOut("switch((new String() .@*:: undefined)) { default:  }M:with({__count__: constructor = null}){switch([,,]) { case 6: __iterator__;break;  } }");
tryItOut("/*infloop*/while(__count__){truevar prototype, ; }");
tryItOut("{continue L;while((033) && 0)var @foo, __proto__ =  /x/ ;({}).hasOwnProperty }");
tryItOut("with((* /= function(q) { return q; }).__defineGetter__(\"__iterator__\", [1,2,3,4].slice)){switch([11,12,13,14].some) { default: return \t<x/>;break; case default: return;break; const __parent__ = undefined;break;  = function::__iterator__: {}case 7: break; case : do {yield *;gc() } while((<x/>) && 0);break;  } }({ __proto__: ({ constructor: ({ __count__: __count__, __proto__: constructor }) }) }) = __parent__;");
tryItOut("/*for..in*/M:for(const __iterator__ in ((gc)( /x/g  <= (@foo.throw( '' ))( /* Comment */false)))){switch(constructor) { case 0: export __count__;break;  }yield <><x><y/></x></>;if(3.141592653589793)  ''  else  if (<y><z/></y>) <y><z/></y> else case undefined:  }");
tryItOut("if(<><x><y/></x></>) { if ( '' ) gc()} else [1,2,3,4].slice");
tryItOut("return;");
tryItOut("{if((void -1)) throw <x><y/></x>; else \t if (__iterator__ :: [z1]) export *; else {return 1e+81;gc() } }");
tryItOut("L:if(delete) {if(eval(\"*::*[]\", )) { if ('fafafa'.replace(/a/g, ({}).__lookupGetter__)) {<x/> } else export prototype;}const __parent__, __proto__;\ncontinue L;\n } else  if (({ __parent__: constructor, delete: __proto__ }) = (p={}, (p.z = (window.valueOf(\"number\")))())[(this.zzz.zzz)]) return 0/0; else /*for..in*/for(const delete in (([[1]] >>>=5.0000000000000000000000)(window = *)))__iterator__ = <x><y/></x>;");
tryItOut("/*infloop*/for(let ({ let: ({ constructor: ({ __count__: prototype }), constructor: [, , ] }), constructor: ({ constructor: [], [prototype, __noSuchMethod__\t, prop, prop]: x::prototype }) }) = ((window)) for each (prototype\f in <><x><y/></x></>); (4..@*).unwatch(\"__iterator__\") .@*:: this.__defineGetter__(\"constructor\", function  prototype (__noSuchMethod__, constructor)undefined).watch(\"constructor\", Math.sin); null -= *) \n");
tryItOut("if((undefined ? <x/> : <x/> |= (-0).watch(\"prop\", (new Function(\"gc()\"))))) {return; }\t else continue M\n/*infloop*/for(const __noSuchMethod__; ([(* / 0)]); __parent__.prop) {yield; }");
tryItOut("{ \"\"  if (<x><y/></x>) }");
tryItOut("const __proto__ =  '' \nexport *;");
tryItOut("yield 1e-81;");
tryItOut("export *;");
tryItOut("let(getter) ((function(){throw __parent__;})());");
tryItOut("if(__noSuchMethod__.__proto__) {export constructor; } else  if (window) {throw *::*;return; }");
tryItOut(";let (__iterator__ = new (({}).__lookupGetter__)(), __iterator__ = constructor = <y><z/></y>) { /*infloop*/L:while(<><x><y/></x></>)this; }");
tryItOut("if((__proto__ = ( /x/ )(<><x><y/></x></>))) {} else ");
tryItOut("eval");
tryItOut("{-3/0; const __iterator__; }");
tryItOut("if(+<><x><y/></x></>) { if ('fafafa'.replace(/a/g, true)) gc()} else {let __proto__ = window, x::__iterator__ = <x/>; }");
tryItOut("for(let y in []);");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("/*infloop*/M:for(constructor; !*.valueOf(\"number\"); new (function(q) { return q; })(prop)) {export *;prototype = 3/0; }");
tryItOut("if(! /x/  > __noSuchMethod__ = <x><y/></x>) {gc() } else  if ((<y><z/></y>\n)) if(null) {[1,2,3,4].mapreturn 0.1; } else  if (true) false else {constructor__noSuchMethod__; } else {;break ; }");
tryItOut("M:switch([ /* Comment */@foo for (__proto__ in <x/>)] ^= eval(\" \\\"\\\" .__defineSetter__(\\\"__proto__\\\", ( /x/g ).watch)\", (eval(\"[1,,]\", <x/>)))) { case undefined: break; case 2: break; default: yield ( ''  ? -1 : 033); }");
tryItOut("let(__parent__, prototype = 3) { return <x><y/></x>;");
tryItOut("export *;\n/*infloop*/M:while(yield <><x><y/></x></> instanceof (__count__.(window.watch(\"__iterator__\", (#1=[#1#]).watch)))){/*infloop*/M:for(({prop getter: /a/gi, __parent__ setter: 033 }); <x><y/></x>.( \"\" ); <x><y/></x>)  }\n");
tryItOut("new function(q) { return q; }(__iterator__)['prop'] = __parent__;");
tryItOut("with({prototype: <x/>}){export *; }");
tryItOut("let(prototype) ((function(){with({}) {  } })());");
tryItOut("with({prototype:  \"\" })export prototype;");
tryItOut("/*infloop*/for(new (function(q) { return q; })(, prop)\t; (<x><y/></x>()); false.propertyIsEnumerable(\"__proto__\")) ");
tryItOut("M:do  while((*++) && 0);");
tryItOut("return [__count__.__count__ for each (prototype in window) for each (prototype in constructor getter: function () { yield \f<><x><y/></x></> } ) for each (__proto__ in  \"\" )];");
tryItOut("M:with({constructor: (!<y><z/></y>)})<x/>;");
tryItOut("while((\n) && 0)this.zzz.zzz;");
tryItOut("throw constructor;");
tryItOut("L:if([window , 1e-81]) { if (function  __noSuchMethod__ () { return @foo } )  else ;}");
tryItOut("{return;gc() }");
tryItOut("/*for..in*/for(const constructor; in ((Math.pow)([<><x><y/></x></> === <x><y/></x> += __count__.(null) for (<><x><y/></x></>['__proto__'] in this)]))){const prototype, __parent__ = __iterator__; const this; }");
tryItOut("/*for..in*/M:for(const [prop, __iterator__] = window / constructor in (({ prop: __noSuchMethod__ }) = #3={a:#3#})) ( \"\" ).watch");
tryItOut("{/*for..in*/for(var constructor = [ '' .isPrototypeOf(<><x><y/></x></>)] in false) {var prototype;case window: const __proto__ = undefined; } }");
tryItOut("__parent__(__parent__) = __count__;");
tryItOut("with(<y><z/></y>){yield <x/>; }");
tryItOut("if(()(__iterator__ = *)) { if ((new (#3={a:#3#})(-3/0))) {L:if(.2) {export //h\n*;/*for..in*//* nogeckoex bug 349964 */M: for  each(var __proto__ in this) {yield;\f } } }} else { if (prop = *::* >>>=(uneval(prototype)))/*for..in*/for(var __noSuchMethod__ in let (__iterator__, __iterator__) this) constructor, __iterator__ = <y><z/></y> }");
tryItOut(";\nexport *;\n");
tryItOut("while(([11,12,13,14].filter) && 0){*::*; }");
tryItOut("with({}) { ({}).hasOwnProperty } ");
tryItOut("/*infloop*/do {export *; } while(yield [1,2,3,4].map()[].valueOf(\"number\"));");
tryItOut("if('fafafa'.replace(/a/g, (1 for (x in [])))) { if (function::prop.propertyIsEnumerable(\"__parent__\")) {/*infloop*/for(__noSuchMethod__; window; \t__count__) {'haha'.splitbreak ; } } else {return <x><y/></x>; }}");
tryItOut("/*infloop*/for(var __parent__; (<x><y/></x> ? @foo :  '' ) @ true; ({ get __iterator__ prototype () { return __noSuchMethod__ = undefined }  })) (@foo-- << <x/>.yoyo(-1));");
tryItOut("for(let y in []);");
tryItOut("L\r: {export __count__;/*infloop*/L:do window; while(1e4); }");
tryItOut("/*for..in*/for(const prototype = [(yield <><x><y/></x></>)] in __proto__ = <y><z/></y>) {gc()/*for..in*/for(var prototype in ) {function ()undefined } }");
tryItOut("M:if(<><x><y/></x></>) yield;");
tryItOut("let (({ __iterator__:  /x/g .__parent__, __noSuchMethod__: prototype }) = ( '' .propertyIsEnumerable(\"prop\"))) { /*for..in*/for(const __parent__ =  \"\"  in -0) gc() }");
tryItOut("export __iterator__;");
tryItOut("L:if(#0=(\r{__parent__: 4.})) gc() else  if (undefined) {L:if(-0) {var prop =  /x/ ; } else  if (__noSuchMethod__) ({}).hasOwnProperty }");
tryItOut("yield <x/>;");
tryItOut("yield\n");
tryItOut("L: {gc()const prop = __count__; }");
tryItOut("/*infloop*/for(prop = (-<x><y/></x>); (new Function(\"#1#;\"))(prototype, <x><y/></x>); ([<x><y/></x>])) {var constructor;gc() }");
tryItOut("{yield; }return;");
tryItOut("L:with(window)const prop, __parent__ =  '' ;");
tryItOut("do {continue ; } while(( /* Comment */(function ([y]) { })()) && 0);");
tryItOut("if(*) { }");
tryItOut("\fyield <y><z/></y>;throw <x><y/></x>;");
tryItOut("if(*::*) {return;export *; } else  if (-let (({ prototype: [__noSuchMethod__], __proto__: __proto__ }), ({ prop: constructor }) = __proto__.__noSuchMethod__ = true) ( \"\" .watch(\"__count__\", *)).propertyIsEnumerable(\"__iterator__\").prop = Number() -= #1=[#1#] ? *.* : this.__defineSetter__(\"constructor\", [1,2,3,4].slice)) ([<y><z/></y>].map( '' ) >>>=0/0)");
