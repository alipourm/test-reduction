tryItOut("L: {/*infloop*/for((<x><y/></x>.*); new (<><x><y/></x></>)(<><x><y/></x></>, [[1]]); ( '' ++))  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__parent__.__count__ in <xxx>{prototype}</xxx>) {with({__iterator__: <x/>})yield this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each((__count__).call(<><x><y/></x></>, <><x><y/></x></>) ? ((__proto__)[<x><y/></x>]) : window !== constructor.constructor in ((function (__proto__) { Math.sin } )(*, <x><y/></x>))) {; }");
tryItOut("return (yield  \"\" .yoyo(window)).throw(let (prop = <x><y/></x>) 0);");
tryItOut("L: let __count__;");
tryItOut("/*for..in*/for(__proto__ in *) (<x><y/></x>);break\t ;");
tryItOut("{}");
tryItOut("export prop\n");
tryItOut("switch((eval(\"window;\", prototype))) { default:  }");
tryItOut("L: do __parent__ while((this) && 0);");
tryItOut("L: {__iterator__;continue ; }");
tryItOut("/*for..in*/for(var [, __parent__, , , __iterator__] in (((new Function(\"/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <xxx {\\fconstructor}={this} />) {yield {};; }\")))(((*::*.unwatch(\"prop\")))()))){with({__noSuchMethod__: undefined}){const __noSuchMethod__;export __iterator__; }L:with(<x/>()){let __proto__ =  /x/ , prototype = prototype;/*infloop*/for(let try { const __iterator__, __iterator__; } finally { [1,2,3,4].map } ;  /x/g ; undefined) {} } }");
tryItOut("M:with((uneval(__proto__ <<= prototype)))while((this.__defineSetter__(\"__noSuchMethod__\", [])) && 0){}");
tryItOut("/*for..in*/for(var [15,16,17,18].filter(Function, false).__count__ in ((Math.sin)(<x><y/></x> in -1)))/*for..in*//* nogeckoex bug 349964 */L: for  each(const __parent__.__count__ getter= function (__noSuchMethod__) { return <><x><y/></x></> }  in 1.3) export *;");
tryItOut("/*for..in*/for(var constructor in ((((p={}, (p.z = (__iterator__)(this))()) <<= this.__defineGetter__(\"__proto__\", function (constructor, __count__) { return <x><y/></x> } )))(\f__noSuchMethod__ = __count__ >= <x><y/></x>().valueOf(\"number\").propertyIsEnumerable(\"__noSuchMethod__(__iterator__)\"))))/*for..in*/for(const [prop, __proto__] = * in <><x><y/></x></>) {yield; }/*\n*/");
tryItOut("for(let y in [5,6,7,8]) throw ({ constructor: prop });");
tryItOut("/*infloop*/for(let __proto__; ({ set __count__ __iterator__ () { return  /x/g  }  }); (uneval((function(y) { yield y; {}; yield y; })))) /*for..in*/for(var [__noSuchMethod__, prop] = (\n[z1,,]) in [1,,]) ");
tryItOut("/*infloop*/for(const prop; eval(\"null\", __parent__).prototype && @foo; __noSuchMethod__ = yield this.constructor) /*for..in*/for(var [prop, prototype] = __iterator__.__count__ in arguments) {yield; }\nexport prototype");
tryItOut("if(function () { return <><x><y/></x></> } ) {{} } else return;");
tryItOut("let __proto__\n\t/*for..in*/for(var __count__.prop in <><x><y/></x></>) {yield;export *; }");
tryItOut("yield typeof [[]];");
tryItOut("if(([eval(\"export __noSuchMethod__;\", <y><z/></y>)].some([1,2,3,4].map) if (1e-81)).prototype) return __count__; else  if ((function::__parent__ = constructor)) {continue \n\f }");
tryItOut("/*for..in*/for(const __iterator__ in (([1,2,3,4].slice)(this -= *))){export prototype; }");
tryItOut("do const constructor; while((1e-81) && 0);");
tryItOut("switch(#2=({prototype:  /x/g })) { case 3:  }");
tryItOut("M:if((<>prototype</> <= 3)) {L: {<x><y/>\r</x>let __parent__ = ({a2:z2}); }throw  /x/ ; } else  if (return <<= (typeof 3/0)) {{} } else {gc()[,]; }");
tryItOut("false | <x><y/></x> :: 3/0 ? <x><y/></x> : //h\n /x/g .__parent__ = __noSuchMethod__;");
tryItOut("with({prototype: new (<x><y/></x>).__defineSetter__() %= ({__proto__: undefined }) ? eval(\"return <y><z/></y> <<= constructor;\", \n<><x><y/></x></>) : \nlet (__noSuchMethod__ = <x/>) <x\t>\f<y/></x>}){yield; }");
tryItOut("{var prop = __iterator__;[1,2,3,4].map }\nprototype = (-1)\n\n");
tryItOut("/*infloop*/M:do with({__proto__: #3={a:#3#}.__defineSetter__(\"__noSuchMethod__\", eval)}){return eval(\"[[]]\", <y><z/></y>); } while( /x/g );");
tryItOut("export *\nexport __noSuchMethod__;");
tryItOut("for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) return (prototype = new Exception());");
tryItOut("yield;\nprototype = <y><z/></y>, __iterator__ =  \"\" ;\n");
tryItOut("let (prop) { switch((((1 for (x in []))).call(*::*, ))) { default: case constructor: ;break; ;break;  } }");
tryItOut("if(new Date(constructor.__iterator__ getter= function  prop (prototype, __iterator__)__count__, __proto__ =  /x/g  - ( '' .constructor), (undefined)[#3={a:#3#}])) { if (\t__parent__) {if(new ({}).hasOwnProperty(#1=[#1#], function (constructor) {  } )) export constructor; }} else {yield undefined;\r/*for..in*/for(var [__iterator__, constructor, ] in <y><z/></y>) ; }");
tryItOut("with({__iterator__: ([,,]['prototype'])}){let (({ __iterator__: ({ __count__: __proto__ }) }) = --window, __noSuchMethod__ = <y><z/></y> - ({})) { \t{Math.pow } }@foo; }");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __count__: constructor }) }); ({a1:1}); [1]) do const constructor; while((<x/>) && 0);");
tryItOut("/*infloop*/for(var __count__.prototype = __parent__.__proto__ = ; <x><y/></x>.__lookupGetter__(\"__iterator__\"); (\n[,])) {return;L: undefined; }");
tryItOut("yield  \"\"  = \n[1,,];");
tryItOut("yield this;\nlet __proto__;\n");
tryItOut("L: {{} }");
tryItOut("let(prop, each = *::*) ((function(){yield (yield <x><y/></x>);})());");
tryItOut("for(let y in [5,6,7,8]) with({}) return;");
tryItOut("L: export *\ngc()\nL:do return; while((this.zzz.zzz) && 0);");
tryItOut("if(((this ^ *::*) for each (__parent__ in <y><z/></y>) for (__parent__ in try { gc() } finally { gc() } ))) { if (([1e+81] == (({a2:z2}) + <x><y/></x>))) __count__; else gc()}");
tryItOut("L: {function ([y]) { };yield;L:if(prop.constructor) {var function::function::prototype = *::*, __iterator__ = __proto__; } else  if ('fafafa'.replace(/a/g, function  prop () { return __noSuchMethod__ } )) prototype }");
tryItOut("with({__parent__: prop = window}\t){{}throw 1.2e3; }");
tryItOut("with({__count__: <><> </></>}){; }");
tryItOut("do break L; while((__count__) && 0);");
tryItOut("M:if({}.valueOf(\"number\")) prototype else  if (<y><z/></y>) const prototype;");
tryItOut("do (.2); while((({a1:1})) && 0);");
tryItOut("L: continue M;");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ in ((function () { gc() } )(prop.*::* setter= 'haha'.split))){return; }");
tryItOut("if(window.throw(window)) return <x/>; else  if (prop+=<><x><y/></x></>) export prototype; else return;");
tryItOut("return window;");
tryItOut("L:if(this.zzz.zzz) ; { var __iterator__ = (function ([y]) { })(), prototype; }  ");
tryItOut("function(q) { return q; }");
tryItOut("let (prototype, __noSuchMethod__ = *::*.unwatch(\"__count__\")) { {} }");
tryItOut("/*infloop*/for(let __noSuchMethod__; prop; <x><y/></x>) (__count__);");
tryItOut("do gc() while(( '' ) && 0);");
tryItOut("if(<y><z/></y>) return 1.3;");
tryItOut("with({}) { <x><y/></x> } ");
tryItOut("while(((({}).hasOwnProperty for each (__noSuchMethod__ in (prop.constructor = <><x><y/></x></>))I)) && 0)/*infloop*/for(({ constructor: __count__ }) = (new Function(false, [,,])); <x><y/></x>.__lookupSetter__(\"prototype\"); (<x><y/></x>.unwatch(\"__iterator__\"))) export *;");
tryItOut("/*for..in*/L:for(const <y><z/></y> in (('haha'.split)(({ set __parent__ prototype (__count__) { L: {throw <y><z/></y>; } } ,  get __count__ prototype (__count__, prototype) { yield prototype = (prop.(<><x><y/></x></>)) }  })))){/*infloop*/while( \"\"  += \t<x><y/></x>)return\n; }");
tryItOut("gc()");
tryItOut("throw  '' ; const __noSuchMethod__;");
tryItOut("do /*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in (<><x><y/></x></> , )) {return (function ([y]) { })();with(<x/>)__parent__;return; } while((([11,12,13,14].sort)) && 0);");
tryItOut("const __iterator__ = __iterator__;");
tryItOut("let (__proto__ = __parent__ = (__count__).watch()\n, ({ __proto__: [[({ __parent__: __parent__, *: __count__ })]] })) { {<><x><y/></x></>;const prototype, constructor = null; } }");
tryItOut("if(let (__iterator__ = <x><y/></x>, constructor) null) gc() else  if (<x/>.hasOwnProperty(\"prototype\")) export __parent__;");
tryItOut("{let __noSuchMethod__ = [,,];gc() }");
tryItOut("{try { throw StopIteration; } catch(__parent__ if (function(){let(__count__, __proto__ = 'fafafa'.replace(/a/g, function (setter, __noSuchMethod__) { yield * } )) { prototype.__noSuchMethod__ = constructor;//h\n})()) { for(let y in []); } catch(__noSuchMethod__ if (function(){(__parent__+=true)['constructor'] = prototype;})()) { return typeof 1e4.__parent__); } catch(__proto__ if export __noSuchMethod__) { try { yield <x/>; } catch(__noSuchMethod__) { {} } finally { let __count__, __count__; }  } catch(constructor if new (1.2e3)(undefined,  /x/ )) { for(let y in []); } finally { throw StopIteration; }  }");
tryItOut("/*for..in*/for(const prototype in [,,]) var __iterator__;");
tryItOut("if(__iterator__.prototype) { if (<> </>) {/*infloop*/M:for(<><x><y/></x></>; *; <><x><y/></x></>) let __proto__;false; } else {return; }}");
tryItOut("if(<><zzz>(uneval( /x/ ))\f</zzz></>) throw __noSuchMethod__ else  if ([15,16,17,18].some(gc, <><x><y/></x></>)) /*for..in*/for(var __proto__ =  /x/g  in <x/>) (this);");
tryItOut("let(prop, prototype) { __iterator__ = prop;");
tryItOut("var prototype = <x><y/></x>");
tryItOut("return;\nfor(let y in []);\n");
tryItOut("let([] = * <<= <><x><y/></x></>, prop = __count__ = (1.3 & <x/>)) ((function(){Math.pow(false.prop)})());");
tryItOut("/*infloop*/do return null; while((yield <x/>));");
tryItOut("M:if([,,z1]) {} else {throw  /x/ ; }");
tryItOut("let __count__ = {}, __noSuchMethod__ = <><x><y/></x></>;/*for..in*/for(var __count__ = [1,,] in [,,z1]) {__count__; }");
tryItOut("/*infloop*/while(function  __proto__ () { return __iterator__ } ){L:switch() { case (({ __parent__: prop }) = [,] && this): break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const * in (undefined.eval(<x/>).hasOwnProperty(\"constructor\"))) gc");
tryItOut("while((prototype(window)) && 0){continue M;var __parent__ = \t<><x><y/></x></>, constructor = false\n }");
tryItOut("/*infloop*/for(const constructor; function (prototype, prototype) { yield  /x/g  } (<y><z/></y>, [z1]); <x/>.yoyo(__iterator__)) {;__parent__ = prototype; }");
tryItOut("if((__iterator__\t .. *::*)) { if ( /x/g ) var __parent__ = \f<><x><y/></x></>; else {export __iterator__; }}\n");
tryItOut("M:if((Object(__iterator__.prop)).__defineGetter__(\"__iterator__\", (new Function(\"const __iterator__ = <x><y/></x>;\")))) { if (new ((<><><!--yy--></></>).__defineSetter__)(new Boolean()--.watch(\"__noSuchMethod__\", [1,2,3,4].map), (#1#)())) {propthrow 5.0000000000000000000000; } else {__proto__, __noSuchMethod__; }}");
tryItOut("with(( \"\" .eval(<><x><y/></x></>)))gc()");
tryItOut("if(new ('haha'.split)(<x/>)) {return  '' ; } else  if ((<x><y/></x>)(<><x><y/></x></>, undefined)) export prop; else {return <><x><y/></x></>; } const __iterator__;");
tryItOut("var ({ __noSuchMethod__: ({ __parent__: [, prop, ], constructor: [__proto__, __noSuchMethod__, __parent__, constructor] }) }) = __proto__|= '' , ({ constructor: prop, __iterator__: ({ __count__: constructor, constructor: prototype }) }) = (<x><y/></x>.propertyIsEnumerable(\"#1=[#1#]\"))\n");
tryItOut("/*for..in*/for(let prototype in (eval(\"with({__parent__: *::*})return;\", constructor) for (__parent__ in *::*) for ((__count__) in <x/>) for (prop in <y><z/></y>))) {{if(<x><y/></x>) constructor; else  if (undefined) (1.3); else {; } }<x><y/></x> = __parent__; }");
tryItOut("({}).hasOwnProperty\n");
tryItOut("if( /x/g )  else const __iterator__ = .2;");
tryItOut("with({}) yield [11,12,13,14].filter;");
tryItOut(";");
tryItOut("/*infloop*/while(<x><y/></x>(<x><y/></x>, false)){const prop = 3/0, __iterator__; }");
tryItOut("{throw 3;return @foo; }");
tryItOut("export *;");
tryItOut("let (__parent__ =  /x/g , __noSuchMethod__ = __parent__) { continue L; }");
tryItOut("if(__parent__ <= <><x><y/></x></> >> ({}).propertyIsEnumerable(\"__parent__\")) yield  '' ; else  if (*) {let __noSuchMethod__, __proto__ = <x/>;__noSuchMethod__, __proto__ = []; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor(yield <x><y/></x>.propertyIsEnumerable(\"prop\")) in (({ __noSuchMethod__: [] }) = (this.__defineGetter__(\"__proto__\", function (constructor) { yield <><x><y/></x></>; } )))) { /x/ ; }");
tryItOut("if((yield __noSuchMethod__)) { if (#2=({constructor: window})) function  constructor (__noSuchMethod__, constructor) { yield (function ([y]) { })() } } else {export __count__; }");
tryItOut("__count__ = __proto__;");
tryItOut("M:if(new Function().prototype) gc() else  if ( <= <x/>++) {let __parent__;function (constructor) { yield prop }  }");
tryItOut("<><x><y/></x></>");
tryItOut("{export __noSuchMethod__; }");
tryItOut("if(<><x><y/></x></>) const constructor = 0, __proto__ = <x><y/></x\t>; else throw window;");
tryItOut("if() { if ((yield new 033(true) % null)) const __parent__ = <x><y/></x>, __iterator__; else /*for..in*/M:for/*\n*/(var constructor = this in <><x><y/></x></>) {<x><y/></x>; }export <x><y/></x>;}");
tryItOut("/*infloop*/for((({ __noSuchMethod__: ({ setter: __parent__ }) }) = (new Object(__parent__)).__proto__); (yield <x><y/></x>) < *::*; Exception((({__proto__: *::*})).__defineGetter__(\"__parent__\", Math.sin), [z1,,])) /*infloop*/while(new RegExp()){export *; }");
tryItOut("switch(__parent__) { default:  }");
tryItOut("with({}) { __iterator__ = prototype; } ");
tryItOut("/*infloop*/for(let [prop, ({ __proto__: __noSuchMethod__, prop: __iterator__ }), [__parent__, , __parent__], , ] = constructor for (__noSuchMethod__ in window); undefined; [, __proto__] = false) {return 1e81;{} }");
tryItOut("{break ; }");
tryItOut("");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let false !== <><x><y/></x></>.prototype in ([15,16,17,18].filter(/a/gi, ({})))) {yield window.__iterator__ = [1,,]; }");
tryItOut("with({}) { return; } ");
tryItOut("with(void <x><y/></x>)L:if(false) {gc()export *; } else {throw  /x/g ;(<x><y/></x>); }");
tryItOut("L:with({set: (this.__defineGetter__(\"__count__\", gc) || __noSuchMethod__ = __noSuchMethod__.hasOwnProperty(\"__iterator__\"))})__noSuchMethod__ = constructor;");
tryItOut("export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var [] in <x/>) const __proto__;");
tryItOut("");
tryItOut("do let prototype =  /x/ , __count__ =  '' ; while((this) && 0);");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((Math.sin)(window.watch(\"prop\", (-0))))){yield __parent__<x/>) = [z1]; }");
tryItOut("/*infloop*/for(let prop = (Function).call(<employee id=\"1\"><name>Joe</name><age>20</age></employee>, ); (eval(\"export *;\", <><x><y/></x></>)); new ((new Function(\"prop;\")))()) {if(+<><x><y/></x></>) export *; else  if (({ prop: setter, prop: __count__ }) = (new __parent__( \"\" , undefined))) var __count__, prop = -1; else __iterator__, prop; }");
tryItOut("if(new (true)(this) :: <><x><y/></x></> for (constructor in window)) {case 6: let __iterator__, try { yield -3/0; } finally { continue ; }  =  '' ;break; export prop; } else  if (<><x><y/></x></> >>>=window) return;");
tryItOut("__noSuchMethod__");
tryItOut("[1,2,3,4].map");
tryItOut("with(<x><y/></x> for each (constructor in this)){/*infloop*/do break ; while(RegExp(<x/>.__defineGetter__(\"__noSuchMethod__\", <y><z/></y>), this)); }");
tryItOut("__parent__: __iterator__ = (yield 1e+81)");
tryItOut("let (__count__ = (#0= '' ), __iterator__ = (this.__defineSetter__(\"__parent__\", (constructor).call)(__iterator__+=<x/>, window))) { with({__parent__: (constructor.isPrototypeOf( /x/g )).__lookupGetter__(\"prototype\")})throw <y><z/></y>; }");
tryItOut("/*infloop*/for(__parent__; ((gc).call( /x/g , *::*)); \n{}\f) yield @foo;");
tryItOut("if(prototype.__proto__ = eval(\"x::prototype\", *::*)()) {yield;{} } else {gc()export *; }");
tryItOut("/*infloop*/L:while((prop = __parent__) < (function(q) { return q; })){/*infloop*/for((function ([y]) { })().constructor; ({a2:z2}) -= undefined; this.zzz.zzz) (__noSuchMethod__) }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (1.2e3.propertyIsEnumerable(\"prop\")) in *) {return  '' ; }");
tryItOut("let (__parent__, ({ __noSuchMethod__: ({ __parent__: prototype }) }) = (function () { yield true } )) { function  __proto__ () { (null); }  }");
tryItOut("with({}) { 3.141592653589793; } ");
tryItOut("return");
tryItOut("this.zzz.zzz;");
tryItOut("L: L:if(new window) prototype else  if (3.141592653589793.@foo) {\t; } else const prototype = <><x><y/></x></>;");
tryItOut("{/*infloop*/L:while(true){gc() } }");
tryItOut("{L: const __parent__, prop; }");
tryItOut("/*for..in*/for(let [constructor, __iterator__] = (@foo instanceof __parent__) & (<x/> === (* > <x><y/></x>)) in (#0=[((this for (__proto__ in (-0))))]) > (({}).hasOwnProperty)) {yield;export __proto__; }\n");
tryItOut("for(let y in []);");
tryItOut("throw __proto__;");
tryItOut("/*infloop*/for(const [, , constructor, , prop] = __noSuchMethod__.isPrototypeOf(this); @foo.__defineSetter__(\"__parent__\", [1,2,3,4].slice); __noSuchMethod__) ");
tryItOut("return 'fafafa'.replace(/a/g, eval);");
tryItOut("[,,] const constructor;");
tryItOut("/*infloop*/M:for(const prop = [<\tx><y/></x> for (prop in <><x><y/></x></>)]; ({ __count__: [] }) = (yield __noSuchMethod__[(new  /x/g (<><x><y/></x></>, false))]).propertyIsEnumerable(\"__count__\"); false) for(let y in [5,6,7,8]) /*for..in*/for(let [__parent__, [, , ({ __noSuchMethod__: prop }), __iterator__, prototype]] = ([15,16,17,18].filter([1,2,3,4].slice, true)) in *) throw constructor;");
tryItOut("/*for..in*/for(let prototype in ((/a/gi)(((function (try { let __parent__ = this; } finally { (<x><y/></x>); } ) { return <><x><y/></x></> } ).apply)())));");
tryItOut("if( /x/g ) export *;");
tryItOut("switch( /* Comment */(prototype = ())) { case ({x::__iterator__ getter: function (__proto__) { yield *::* }  }): break;  }");
tryItOut("L: with((('haha'.split) @ 5.0000000000000000000000))throw false;\f");
tryItOut("yield window;");
tryItOut("if(<x><y/></x>) (__proto__); else  if (@foo) {return function(id) { return id }; }");
tryItOut("L: {export *;return  \"\" ; }");
tryItOut("/*for..in*/for(let [__parent__, __proto__] = this.zzz.zzz in \f \"\" ) {'haha'.split }");
tryItOut("if(eval(\"({ set prototype(__noSuchMethod__) { yield <x><y/></x> }  })\", #3={a:#3#} << <y><z/></y>)) { if (__parent__.__parent__ getter= [1,2,3,4].slice) {with({__proto__: (this.__defineSetter__(\"__count__\", function  prototype (, __iterator__) { yield [[]] } \r))}){let prop;new Function }export prop; } else {/*infloop*/for(const constructor = constructor;  /x/g ; 1e4) {export __parent__; }function ([y]) { }; }}");
tryItOut("with(3.constructor = function(id) { return id }){export *;throw this; }");
tryItOut("/*infloop*/do {__iterator__; } while(#1=({__parent__: this}));");
tryItOut("{\nyield new <x/>;\rM:if(<{prop}> </{prop}>.(true >>>=<x><y/></x>)) <ccc:ddd><bbb xmlns=\"0.1\">yyy</bbb>yyy</ccc:ddd> else  if (__iterator__) {} else  }");
tryItOut("switch(window) { case 7: {} }");
tryItOut("/*infloop*/while(");
tryItOut("throw <><x><y/></x></>\n");
tryItOut("{gc()return this; } const (<><x><y/></x></>)(<x><y/></x>);");
tryItOut("M:if(<x><y/></x>) {let __iterator__, __parent__ = *::*; } else  if (<><x><y/></x></>) throw *; else return;");
tryItOut("/*for..in*/for(__iterator__.prototype in ((function (prop, __proto__['__iterator__']) { yield (+<x/>).constructor } )((new Object()))))gc()");
tryItOut("M:while((eval(\"\", prototype)) && 0){with({__count__: <><x><y/></x></>}){{} } }");
tryItOut("/*for..in*/M:for(var function::__parent__ in ((([15,16,17,18].some(function (__count__, prop)<x><y/></x>, function  __noSuchMethod__ (__proto__)__count__)))(eval(\"export __iterator__;\", ({})) .@*::  , (((-3/0).__defineSetter__)((<x><y/></x> === <x/>), 1e4))))){L:if(\f<><x><y/></x></>) return undefined; else  if (1.3) prototype =  /x/g , prop; else {; } }");
tryItOut("/*for..in*/for(let prototype in ((new Date(__iterator__ = null, {}))(new (*::*)(*, this))))yield null;");
tryItOut("with({__parent__: * .@ <y><z/></y>.valueOf(\"number\")})throw *;");
tryItOut("/*for..in*/L:for(const __count__ = void <x><y/></x> || window in o+=__count__+=<><x><y/></x></> === ()) {throw __proto__; }");
tryItOut("return <bbb xmlns=\"3.141592653589793\"><{__proto__}><employee id=\"1\"><name>Joe</name><age>20</age></employee> </{__proto__}><bbb xmlns:ccc=\"true\"><ccc:eee></ccc:eee></bbb></bbb>;");
tryItOut("prop = __parent__;");
tryItOut("/*infloop*/for(__parent__ = Number(*, this); <{__proto__}> { return #1=({__noSuchMethod__: window}) } </{__proto__}>; (let (__proto__ = 0/0, prop = 3) <><x><y/></x></> ? <y><z/></y> : prop)) window;");
tryItOut("throw (-0);if(window) {\t } else  if (0) {throw prototype;033; }\f");
tryItOut("switch(__iterator__.@*) { case 7: break;  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><x><y/></x></>.__lookupGetter__(\"__parent__\").valueOf(\"number\") in new ((null|=false.@*) |= 3 >>>= '' )([11,12,13,14].filter, <zzz>@foo % <y><z/></y></zzz>)) /*for..in*/__parent__");
tryItOut("{return 5.0000000000000000000000\n__iterator__/*infloop*/M:while([1,,]){let constructor; }<x/>.__defineSetter__(\"__proto__\", (function (constructor) { let __parent__, __noSuchMethod__; } ).apply); }");
tryItOut("let(function::__noSuchMethod__, __count__) ((function(){throw StopIteration;})());");
tryItOut("return [1];\nexport *;\n\n/*for..in*/for(var [prototype, prototype] = ({} << true) in ) {throw null;let prop, __proto__ = ({}); }");
tryItOut("var prop = <y><z/></y>\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__((__parent__ = null !== -0)) in (__count__.prop)) {switch(3.141592653589793) { case 0: gc() }(window).apply }");
tryItOut("#2=({__iterator__: [15,16,17,18].sort(function(q) { return q; }//h\n, 1.3)})");
tryItOut("let prototype = 3.141592653589793, __iterator__;\ncontinue ;throw <><x><y/></x></>;\n");
tryItOut("M:if((( /x/g setter))\n) { if ((constructor = __noSuchMethod__)) {continue M; }} else switch(*::*) { default: 1.3;break; case 2: case 2: case 3: export __noSuchMethod__;break; break; ([]);case *::*: case 8: {}case 0: break; case 7: case <><x><y/></x></>: break; case 1: {}case [1]: var __count__ = <x><y/></x>;break; *break; return;case 7: break; case 7: break; case this: this;break;  }");
tryItOut("M:do /*infloop*/do /*\n*/{continue M; } while(constructor); while(((__count__ = *)) && 0);");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("prototype, __noSuchMethod__ =  \"\" \n");
tryItOut("");
tryItOut("/*for..in*/\ffor(var (prop) in (uneval((new ((Math.sin).call)(__iterator__) @ ({null, __count__ setter: 3 }))))) {if(#1#.__proto__) { if (__parent__ = function ([y]) { }) yield;} else {x::__count__, constructor = <y><z/></y>;; }/*for..in*/for(var [__count__, prop] = <x><y/></x> in 0x99) yield; }");
tryItOut("return");
tryItOut("return;");
tryItOut("/*infloop*/for(const __noSuchMethod__; null; <x/>) gc()");
tryItOut("/*infloop*/for(var __parent__; <><x><y/></x></>; <><x><y/></x></>) {continue L; }\n");
tryItOut("/*infloop*/L:do {;(@foo); } while( /* Comment */<><x><y/></x></>);");
tryItOut("return;");
tryItOut("with({__noSuchMethod__: <><zzz>(<bbb xmlns:ccc=\"[11,12,13,14].sort\"><ccc:eee></ccc:eee></bbb>.((( \"\" ))))</zzz></>}){/*infloop*/for(const prototype; @foo; constructor) {yield *; } }");
tryItOut("/*infloop*/do \n while(((*::*).call(<x><y/></x>, <x><y/></x>)));");
tryItOut("prop = __proto__;");
