tryItOut("with({prototype: __parent__%=this})\tif(({ __proto__: constructor }) = new (this.__defineSetter__(\"prop\", ({}).hasOwnProperty).hasOwnProperty(\"__iterator__\"))()) { if ((false.prototype = <><x><y/></x></>)) {}} else {export *;with({__iterator__: <x><y/></x>}){__count__ = 0; } }");
tryItOut("try { prototype = __parent__; } finally { let(prop = (((__parent__ = <><x><y/></x></>).isPrototypeOf(new (function  __noSuchMethod__ (__parent__, __proto__) { return 1.2e3 } )(*))).__noSuchMethod__)) { with({}) return ({prop: 1e-81}).__defineGetter__(\"({ prop: __parent__ })\", ({}).__lookupGetter__).propertyIsEnumerable(\f\"__proto__\"); } ");
tryItOut("M:if((p={}, (p.z = <x><y/></x>)()).propertyIsEnumerable(\"__noSuchMethod__\")) ; else  if (new 3/0()) {continue L; }");
tryItOut("if((-(<zzz>[<><x><y/></x></>, prototype, , ] = + /x/ .constructor</zzz>.(<ccc:ddd><!--yy--></ccc:ddd>\t)))) { if (([,] && (<y><z/></y>.unwatch(\"__noSuchMethod__\").constructor) + new (Math.pow)( /x/g ))) return window else {__proto__ = (this++); }}");
tryItOut("if(this.zzz.zzz)  else  if ((#0= \"\" )) {return prototype;L:if(prop) prop else {export *; } } else (true);");
tryItOut("if(((prototype = <x><y/></x>) >  { return  /x/g ; }  >>>= /x/ )) var __noSuchMethod__ = ({a2:z2}), __proto__;");
tryItOut("/*infloop*/for(const [] = 1.3; (new (__noSuchMethod__)(<><x><y/></x></>, <><x><y/></x></>)); ({ __parent__: ({ prototype: ({ __noSuchMethod__: function::__count__, __noSuchMethod__: __parent__ }) }) }) = x::__proto__) {gc()if(<y><z/></y> += <><x><y/></x></>) { if ((-1)) {var __iterator__ = *;gc() } else {prototype =  \"\"  }} }");
tryItOut("{switch(<x><y/></x>) { default:  }/*for..in*/for(let __count__ in  '' ) ; }");
tryItOut("/*infloop*/for(let __proto__.constructor = (let (({ __parent__: constructor, constructor: [, ] }), __iterator__ = constructor = true) __count__ >  /x/  if (<x><y/></x>)); let (__count__) __count__ = this >>= this;  \"\" ) {/*for..in*/M:for(([,])(0x99) in true | <x/>) {with({__parent__: __proto__})yield; }if(Math.pow()) { if ((<><x><y/></x></> == <x/>)) throw <x/>; else let __noSuchMethod__ = window, __count__ =  /x/g ;} }");
tryItOut("{{M:if(<><x><y/></x></>++) {continue ; } else  if (0x99(1e+81, [[1]])) ; else yield; } }");
tryItOut("{yield 4.; } const __proto__;");
tryItOut("(-3/0);");
tryItOut("L:if((true.throw((-1)).__lookupSetter__(\"__count__\"))) {const __proto__, __parent__ = this; } else with(<><x><y/></x></>)export prop;");
tryItOut("/*infloop*/for(({ __noSuchMethod__: prop }) = 1e+81; *::*;  ''  ? undefined : <x><y/></x>) export *;");
tryItOut("if(__parent__.__lookupGetter__(\"__count__\")) let(prop, __noSuchMethod__) ((function(){throw StopIteration;})());");
tryItOut("L: {}");
tryItOut("/*infloop*/for(var prototype; eval(\"throw this;\", constructor).__defineGetter__(\"(__parent__.(3/0))\", (( /* Comment */@foo != [,,z1])).__defineSetter__); 1.2e3) return *;");
tryItOut("/*infloop*/do { } while( /x/g )");
tryItOut("/*for..in*/for(constructor in ((({}).__lookupGetter__)(prop = 3/0)))yield;");
tryItOut("prototype = setter;");
tryItOut("return");
tryItOut("if(let (__noSuchMethod__) prototype.( /x/ \n)//h\n) throw -1; else {if(constructor) {throw [,,];return prop; } else  if (*) yield;var prototype = <x><y/></x>, prop = @foo; }\nexport *;\n");
tryItOut("L: export *;");
tryItOut("if(#3={a:#3#}) return  '' ; else ");
tryItOut("throw StopIteration;");
tryItOut("with({prototype: ( /x/ .@*)});");
tryItOut("gc()");
tryItOut("throw prop;");
tryItOut("return;");
tryItOut("/*for..in*/for(var __parent__ in ((function () { yield <y><z/></y> } )(throw this.zzz.zzz))){export *;while(( /* Comment */-0) && 0){export *;{} } }");
tryItOut("L:switch(*.*) { case 9: return; }");
tryItOut("/*for..in*/for(const prop in ((function (prototype, __parent__)#1#)(prop)))__count__");
tryItOut("__count__ = *::*, prop = __noSuchMethod__\n\nL:with({__noSuchMethod__: 033})throw true;\n");
tryItOut("/*infloop*/L:for(1e81; <><x><y/></x></>; <x><y/></x>) gc()");
tryItOut("with({}) for(let y in []);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in yield -1) with({prop: (<x><y/></x>.*)}){export *; }\nlet (__parent__ = <x/> ? <><x><y/></x></> : true) { if(prop) continue ; }");
tryItOut("/*infloop*/do export *; while(<><x><y/></x></>.@*);");
tryItOut("{/*for..in*/M:for(const [constructor, constructor] = <><x><y/></x></> in null) gc() }");
tryItOut("( /x/ )(<x/> >= @foo) = __noSuchMethod__;");
tryItOut("const try { continue ; } catch(constructor if (function(){(0);})()) { (function(id) { return id }); } , __parent__ = 1.3;const __proto__;");
tryItOut(";prop, __iterator__ = __iterator__\n__proto__");
tryItOut("with({}) return;");
tryItOut("M:if(\f(--( \"\"  if (undefined)))++) throw StopIteration;");
tryItOut("L:if(__noSuchMethod__.(<x/>)(({}.yoyo(false)))) { if ( /* Comment */((constructor = __parent__)(new  \"\" ))) if([false for each (__proto__ in *)]) { if ((uneval(#1=[#1#]))) {export __iterator__;(*::*); } else ({});} else /*for..in*/M:for(var prototype = __parent__ = <><x><y/></x></> in <><x><y/></x></>) ;}");
tryItOut("/*infloop*/L:do {export *;throw *::*; } while((undefined.hasOwnProperty(\"function::prop\")));");
tryItOut("let (prototype = *) { do {{}([,,z1]); } while((__parent__) && 0) }");
tryItOut("if(new (-this)( /x/ ++, prop)) { if (3.141592653589793.__noSuchMethod__ = <><x><y/></x></>.valueOf(\"number\")) { } else {false;gc() }}");
tryItOut("if((__parent__.prop = *::*)) {continue ;export prototype; }");
tryItOut("throw StopIteration;");
tryItOut("{yield;/*for..in*/for(const constructor = #2=[<x><y/></x>] in 1.3) {break ;export __proto__; } }");
tryItOut("let (prototype = [1,,], __iterator__ = <y><z/></y>) { (__iterator__); }");
tryItOut("/*for..in*/for(var prototype in ((({}).__lookupGetter__)( /x/g ))){({}).hasOwnProperty; }");
tryItOut("{L:if( /x/g ) throw @foo;if((function ([y]) { })()) export *; else export __noSuchMethod__; }");
tryItOut("L: {if(<x><y/></x> == (*::*.unwatch(\"__iterator__\"))) (this); else let ([] = prototype = this) { return; } }");
tryItOut(";");
tryItOut("/*infloop*/for((<x><y/></x> <<= __count__); ; (<x><y/></x>.(<x/>))) {return <x><y/></x>;continue ; }");
tryItOut("{}\nlet __proto__ = 0x99;");
tryItOut("return (__proto__ = <><x><y/></x></>)[(*.__lookupSetter__(\"__noSuchMethod__\"))\t]\t;");
tryItOut("return;");
tryItOut("gc()");
tryItOut("if() { if ( '' .__defineGetter__(\"constructor\", *)) yield;} else {throw *; }");
tryItOut("for(let y in [5,6,7,8]) with({}) { throw StopIteration; } ");
tryItOut("/*infloop*/for(var __iterator__;  /x/g .propertyIsEnumerable(\"__count__\"); yield) {if(Math.pow) { if (new [1,2,3,4].slice(__proto__ =  /x/ , [,])) return arguments;} else var constructor;return; }");
tryItOut("/*infloop*/while(__count__: __proto__ = prototype)export *;");
tryItOut("do {yield  /x/ ; } while((prop) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in  \"\" ) {throw __count__; }");
tryItOut("/*for..in*/for(\tprototype = this.__defineGetter__(\"__proto__\", [1,2,3,4].map) in <x/>) export *;");
tryItOut("with({__count__: (null for each (constructor in #3={a:#3#}))})if(<><x><y/></x></>) {Functionexport *; } else  if (null) prototype else return;");
tryItOut(" get __iterator__(prototype) { gc() }  const __proto__;");
tryItOut("if( /x/g ) { if (new Array(__parent__ =  \"\" )) for(let y in [5,6,7,8]) this.zzz.zzz;} else L:while((let (__proto__ = *, __iterator__ = ({a2:z2})) (*::* ? true : <y><z/></y>)) && 0)export *;");
tryItOut("let (__noSuchMethod__ = ({constructor: 4.})prop, prototype) { var __proto__; }");
tryItOut("/*for..in*/for(var [__parent__, prop] = <xxx>{constructor}</xxx>.(eval(\"var __proto__ = prototype, __iterator__ = this;\", (__count__ = <x/>))) in 1e81) {switch(this.__defineSetter__(\"__noSuchMethod__\", Math.sin)) { case window: return; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in *++) break ;");
tryItOut("L: {__proto__ = <x><y/></x>;let __parent__, constructor = window; }");
tryItOut("/*infloop*/for(null; 0; {}) yield\ngc()");
tryItOut("if(window) {(prop); }\n");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */L: for  each(var constructor in <><x><y/></x></>) {export __iterator__; } }");
tryItOut("L:if(<y><z/></y>.@foo) export prop; else  if ((__proto__ = <><x><y/></x></>.yoyo(new this()))) \n");
tryItOut("prototype, __parent__;");
tryItOut("{var __noSuchMethod__, prop }");
tryItOut("if((this ? .2 : <x><y/></x>)) export __proto__;");
tryItOut("if([,]) {} else  if (new ((@foo).__defineSetter__)()) {export __parent__; } else {yield 1.3;return *::*; }");
tryItOut("try { prototype((Function())) = __proto__; } finally { yield ({ prop: __proto__, __noSuchMethod__: ({ __parent__: __proto__, prototype: __iterator__ }) }) = false.valueOf(\"number\"); } ");
tryItOut("/*for..in*/for(var __iterator__ = (this.zzz.zzz) in prototype.constructor getter= gc) switch(null) { default: return;break; case this: case 7: yield [[]];case undefined: let __count__ = <y><z/></y>, constructor;case undefined: (new Function(\"let prop, __parent__;\"))break; 'haha'.splitbreak; case 0:  }");
tryItOut("/*for..in*/for(var __proto__ = [eval(\"\", each)] in <x><y/></x>) {{}yield; }export __iterator__;");
tryItOut("/*infloop*/while(let (constructor, prototype) __iterator__+=<><x><y/></x></>)/*infloop*/do {export *;{} } while(<x><y/></x>);");
tryItOut("L: {continue ; }");
tryItOut("{{} }/*for..in*/for(const __noSuchMethod__ = let (({}).hasOwnProperty) RegExp() in this.__defineGetter__(\"prop\", function () { let prototype, -0 = undefined; } )) {(__iterator__); }");
tryItOut("return;\n/*for..in*//* nogeckoex bug 349964 */M: for  each(let __proto__ in <><x><y/></x></>) {export constructor; }\n");
tryItOut("with({__iterator__: true}){/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in null) {let prop = *;yield *; } }");
tryItOut("L: L:with( != window.hasOwnProperty(\"__count__\"))/*for..in*/for(var __iterator__ = window in  '' ) {yield; }");
tryItOut("{(constructor); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in (@foo > <x><y/></x>)) throw [1];");
tryItOut("L:if( /x/ ) { if ((eval(\"new __count__.yield\\t(this.propertyIsEnumerable(\\\"let\\\"))\", <><x><y/></x></>.constructor)).__iterator__) gc() else {const __parent__; }}");
tryItOut("gc()");
tryItOut("new Function");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __noSuchMethod__: __noSuchMethod__, constructor: [] }) in  /x/ .eval(true)) {switch((((__proto__).apply).call)()) { case  /x/  << <><x><y/><//*\n*/x></>: var __iterator__, __parent__;var __parent__; } }");
tryItOut("M:if(constructor) export __parent__; else  if (<><{__count__}></{__count__}></>) (1 for (x in []))");
tryItOut("{M:if(this.__defineSetter__(\"__count__\", Function)\n) {return;( \"\" ); }var prototype, __proto__ = <x><y/></x>; }");
tryItOut("__iterator__ = __proto__;");
tryItOut("L:if((<><x><y/></x></>--)) {yield <x><y/></x>;/*infloop*/for(let ({ try { ; } finally { (<x><y/></x>); } : __parent__ }) = (__proto__ = <x><y/></x>); (~ /x/ ); /a/gi(window,  \"\" )) {<x><y/></x>;return  '' ; }\t } else  if (+__iterator__ === 1e4 .@*:: <x/>) let (prototype = <x><y/></x> >= true, __noSuchMethod__) { ( /x/ ); }");
tryItOut("if((get = true)) {; } else return <y><z/></y>;");
tryItOut("break \ngc()\nyield <y><z/></y>;\n");
tryItOut("/*infloop*/for(-window; ({__noSuchMethod__: <x><y/><\f/x>}); *) yield;");
tryItOut("<><x><y/></x></>;");
tryItOut("/*infloop*/while( /x/ ){(false).apply({}).__lookupGetter__ } const __count__;");
tryItOut("if(<x/>) {; } else (constructor);");
tryItOut("/*infloop*/for(const prototype; Exception(*::*); prototype.prop = 'fafafa'.replace(/a/g, [1,2,3,4].slice)) return;");
tryItOut("/*infloop*/for(__noSuchMethod__.hasOwnProperty(\"__proto__\"); (\n<><x><y/></x></>  if (<><x><y/></x></>) |= (yield @foo))./*\n*/__parent__; delete ({})) {(constructor = <><x><y/></x></>);; }");
tryItOut("throw ({a2:z2});");
tryItOut("while(((this.__defineGetter__(\"__count__\", (new Function(\"{}\"))))) && 0){if(null) {throw <x><y/></x>;yield; }while((arguments) && 0){const prototype = (function ([y]) { })(), __iterator__ =  /x/g ; }gc() }");
tryItOut("if(3.141592653589793.__lookupGetter__(\"prototype\")) { if (@foo *  /x/ ) return 3/0;} else gc()");
tryItOut("{return; }");
tryItOut("export *;");
tryItOut("/*for..in*/for(let [__proto__, __proto__] = <x/> in <x><y/></x>.constructor) /*infloop*/for(constructor(@foo, prop); window; new 033) var __iterator__, __parent__;");
tryItOut("/*infloop*/do {throw @foo; } while([,,z1])\nconst __iterator__ = <x/>, __noSuchMethod__ = <x/>\nif(constructor) {gc() } else {export *; }");
tryItOut("try { throw __count__; } finally { throw StopIteration; } ");
tryItOut("/*for..in*/for(let (prototype.__iterator__) in (([1,2,3,4].slice)((((p={}, (p.z = (<x><y/></x>.eval({}) % <><x><y/></x></>.__defineSetter__(\"constructor\", ([]).__defineSetter__)))()) for (@foo['__parent__'] in eval(\"var prototype = *::*;\", 4.))))))){this;__proto__ } const <>__count__ = this</>;");
tryItOut("/*infloop*/for(@foo ? <x\t><y/></x> : <x><y/></x>; \n1.2e3;  '' ) /*for..in*/M:for(prop in <><x><y/></x></>) {var __parent__ = this, __parent__; }");
tryItOut("true const __count__;");
tryItOut("{}");
tryItOut("{var __count__;yield window; }");
tryItOut("*\n");
tryItOut("/*infloop*/for(const __parent__ = 5.0000000000000000000000; 0; <x/>) {export __noSuchMethod__; }");
tryItOut("let (__parent__ = <x><y/></x>) {  }");
tryItOut("/*for..in*/M:for(const [__proto__, constructor] = ({__noSuchMethod__: new [,]()}) in  /x/ ) yield;\nexport *\n\n");
tryItOut("/*infloop*/L:for(var prop; {}; __iterator__.__noSuchMethod__ = __proto__ = <y><z/></y>) {;{} }");
tryItOut("/*infloop*/for(let __iterator__ = <><\fx><y/></x></>; try { <x><y/></x>; } catch(__noSuchMethod__) { with({}) { export prototype; }  } ; <x><y/></x>) yield;");
tryItOut("M:switch({}\n) { case 8: break;  }");
tryItOut("switch(({ constructor: ({ __proto__: ({ prop: constructor, prototype: __noSuchMethod__ }) }), __count__: constructor }) = ( \"\" .prototype)) { default: break; case 9: /*for..in*/for(__proto__ in ((((<x/>).watch).call)(<><x><y/></x></>))){}case <><><><x><y/></x></></></> & window.unwatch(\"__noSuchMethod__\") >>> return.eval((<x><y/></x> >>= window <=  ''  -= null)) |= (__count__ = window): if(this/*\n*/.throw(window).hasOwnProperty(\"__count__\")) {gc()return window; }/*infloop*/for(const __proto__ = (this.zzz.zzz); *::*; prototype =  /x/g ) {var prop; }L: {var __count__;/*for..in*/for(let __parent__ = <><x><y/></x></> in <x><y/></x>) {constructor; } }break; return;break; case 3: const function::prop;break;  }");
tryItOut("return <x/>\n");
tryItOut("/*infloop*/L:do return false; while(((p={}, (p.z = try { const __noSuchMethod__ =  /x/g , __proto__; } catch(constructor if  /x/ ) { default: var constructor, __parent__;break; case false: (function ([y]) { });break; break; break; break; __count__;case 7: continue ;break; case window: break; var __noSuchMethod__, __count__;break; break;  } catch(constructor) { let prop; } .prop)())));");
tryItOut("\treturn new RangeError()\f;");
tryItOut("let(__proto__, __count__) ((function(){throw StopIteration;})());");
tryItOut("yield;");
tryItOut("L:if((new ({}).hasOwnProperty(prototype)).*) {/*infloop*/M:do {<><x><y/></x></>;export prototype; } while(true);({}).hasOwnPropertyconst __parent__ = constructor; }/* else {var constructor; }");
tryItOut("return;\n<x><y/></x>;\n");
tryItOut("L:with(undefined)yield;");
tryItOut("if(<x/> ? 3 : 1e-81.throw(new ( /x/g )())) return; else  if ((uneval(({ __parent__: __iterator__, prop: prop }) = function(id) { return id }.__iterator__))) yield <x><y\t/></x>; else gc()");
tryItOut("/*for..in*/M:for(prop in (((1e+81).apply)([this]))){/*for..in*/L:for([__parent__, __proto__] = this in <><x><y/></x></>) {return __parent__; } }");
tryItOut("{return <><x><y/></x></>; }");
tryItOut("with({}) break M");
tryItOut("gc()\nexport function::__proto__;\nyield  /x/ ;");
tryItOut("if(this.yoyo(@foo)) {if(<y><z/></y>++) function(q) { return q; } } else  if (function (__count__, __count__)<x/> !== (constructor = __parent__.@foo)) {gc() }");
tryItOut("yield 1e-81.__defineSetter__(\"__iterator__\", ({}).hasOwnProperty);");
tryItOut("if(<x><y/></x>) export *; else gc() const __parent__;");
tryItOut("/*for..in*/M:for(var __iterator__ = ([15,16,17,18].filter(gc, 0x99))[( /x/g )(<><x><y/></x></>, <x><y/></x>)] in *.__lookupSetter__(\"constructor\")) {var return;, prop = <y><z/></y>; }");
tryItOut("/*for..in*/for(const __noSuchMethod__ = (#0=[ '' ]) in <x><y/></x>.watch(\"__count__\", function  __parent__ (__count__) { return __proto__ } )) L: {if( /x/g ) yield; else  if (<x><y/></x\t>) gc() else  /x/g ;this.throw( '' ) }");
tryItOut("throw prop;");
tryItOut("export prop;throw (-0);");
tryItOut("{throw prop; const __proto__;\t }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __noSuchMethod__ in <><x><y/></x></>) {return;__proto__ }");
tryItOut("/*infloop*/M:for(let function::prototype = ({}).__defineSetter__(\"__noSuchMethod__\", Math.pow); (this.__proto__); <x><y/></x>) {var constructor = false, __count__ = this; }");
tryItOut("with({}) { return (function (__noSuchMethod__, prop) { yield <x><y/></x> } )(prototype, <x><y/></x>); } ");
tryItOut("M:if(<><x><y/></x></>) { if (*) continue ;} else export *;");
tryItOut("const prop;");
tryItOut("yield;\n;\n\n");
tryItOut("/*for..in*/for(let constructor = *.__lookupSetter__(\"function::__proto__\") in <x><y/></x> instanceof *) ;");
tryItOut("{{} }");
tryItOut("if(*::*) yield; else {}");
tryItOut("throw function ([y]) { };");
tryItOut("prototype =  /x/g , __noSuchMethod__ = this;");
tryItOut("if(null != undefined) {__count__ = <>{throw __proto__; }</>, __count__; }\nfunction (__count__ = [z1,,].eval(null)) '' \n");
tryItOut("/*infloop*/while( \"\" ){const __proto__ =  /x/ , prop; }");
tryItOut("/*infloop*/M:for(__noSuchMethod__ = (__iterator__)[*]; (yield yield -1); __count__.eval(this)) function () { var undefined; } \n\n");
tryItOut("{}");
tryItOut("/*for..in*/for(var constructor = ({ constructor: __parent__, __count__: ({ prop: function::__iterator__, __noSuchMethod__: constructor }) }) in -0 ? *::* : return;) {/*infloop*/for(var ({ __noSuchMethod__: \t[__parent__, , , __parent__, __parent__] }) = __parent__ = __proto__.watch(\"prototype\", __count__); (* .@x:: (__proto__.__noSuchMethod__ = *)); prop.__iterator__) yield __parent__; }");
tryItOut("/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; true) {this = null; }");
tryItOut("let(__count__ = (__iterator__ .@ (-1)), __count__ = (#1=[<y><z/></y>])) ((function(){return;})());");
tryItOut("return;");
tryItOut("const {, constructor;");
tryItOut("if(({ set prototype(__parent__, prototype)delete ({__count__: #3={a:#3#} }) })) L:with((prototype.__noSuchMethod__ = window)){return false; }");
tryItOut("__noSuchMethod__ = __parent__;");
tryItOut("if(<bbb xmlns=\"<xxx>{__iterator__}</xxx>\"> </bbb>) {export *;(<x><y/></x>); } else  if (((prototype.constructor) %= (<x><y/></x>.(<><x><y/></x></>)))) {yield prop; } else (__parent__);");
tryItOut("if({let (\r__count__ = @foo) { @foo; } }) if(( \"\"  .@*::  /x/ )) { if (eval(\"throw #1=[#1#];\", <x/>)) {false; }} else {break ; '' ; } else  if (({ constructor = <><x><y/></x></>: ({ constructor: [x::prop, , ], __count__: ({ __noSuchMethod__: __noSuchMethod__ }) }) }) = this.__defineSetter__(\"__parent__\", [1,2,3,4].map)) yield;");
tryItOut("let(__noSuchMethod__) ((function(){with({}) throw constructor;})());");
tryItOut("/*for..in*/for(const __parent__ in ((new Function)(<bbb xmlns=\"([undefined])\"> </bbb> + <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>))){yield window; }");
tryItOut("/*for..in*/M:for(const constructor = __iterator__ = false in @foo) break ;");
tryItOut("with({prop: 'fafafa'.replace(/a/g, eval)}){let prop, prop = .2;([1,2,3,4].map).apply }");
tryItOut("return;");
tryItOut("M:with({__proto__: <x/>})prop = <><x><y/></x></>, prototype =  /x/g ;");
tryItOut("/*infloop*/for(const __proto__ = *; ({__parent__ setter: (prop = __proto__), prototype setter: (1 for (x in [])) }).unwatch(\"prototype\"); export setter; const __proto__;) if(__noSuchMethod__) { if (*) ;} else ( /x/g );");
tryItOut("throw <x/>;\t\nexport *; const constructor;\n");
tryItOut("if(this.yoyo(<x/>).__parent__) {if((__parent__-=1.3).__lookupSetter__(\"prototype\")) { if ((<x/> ? <x><y/><///h\nx> : 0/0)) export *;} else /*for..in*/for(const __parent__ = 0/0 in *::*) return;/*for..in*/for(__count__ in <x><y/></x>) ; }");
tryItOut("/*for..in*/for(var constructor = export __noSuchMethod__ in [,]) prop = <><x><y/></x></>;");
tryItOut("if(~(({}).hasOwnProperty)()) { if (---__count__) /*infloop*/while(null); else var constructor = <x><y/></x>, prototype;}");
tryItOut("/*infloop*/L:for(let prototype; 1e-81; prototype) (<><x><y/></x></>);");
tryItOut("do /*for..in*/for(let __iterator__ in <x/>) __noSuchMethod__, prototype =  /x/ ; while((false.propertyIsEnumerable(\"prop\") |= (__count__ = <x><y/></x>)) && 0);");
tryItOut("let (prototype, __count__) { /*infloop*/\fdo export __count__; while(<x/> << <><x><y/></x></>); }");
tryItOut("prop = __iterator__;");
tryItOut("do if(({a2:z2})) export __proto__; else  if (undefined) \f{gc() } else default: break;  while((false) && 0);");
tryItOut("throw [1,,]\n");
tryItOut("/*for..in*/for(var __proto__ in ((true)((0.__defineSetter__(\"constructor\", (<><x><y/></x></>).__defineSetter__))))){return 0\n.__lookupGetter__(\"__noSuchMethod__\");gc()\ncontinue ; }");
tryItOut("/*for..in*/for(var (__iterator__ .@ <x/>).__noSuchMethod__ in (([z1,,])(this))){var __proto__, constructor = prop; }\n/*infloop*/for(prop = <x><y/></x> , __count__; ((\n /x/ ) |= __noSuchMethod__.(({})).hasOwnProperty(\"__iterator__\")); (<x><y/></x> for each (delete in <y><z/></y>))) {return __count__; }");
tryItOut("/*infloop*/L:for(__parent__ = <y><z/></y>; window; ({ each: __iterator__ }) = undefined > true) {[1,2,3,4].map[1,2,3,4].slice }\n { return <x><y/></x> } \nfunction(id) { return id };\n");
tryItOut("with({prototype: <x/> ,  '' })/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in @foo) {(__proto__);export *; }");
tryItOut("yield this.__defineGetter__(\"__proto__\", eval(\"[z1,,].__defineSetter__(\\\"__noSuchMethod__\\\", (function (__noSuchMethod__) { yield true } ).apply)\", false));");
tryItOut("while((prop.(this).watch(\"prop\", ([1,2,3,4].map).call)) && 0){/*for..in*/for(const [__parent__, __count__] = null ? <x><y/></x> : <><x><y/></x></> in (<x><y/></x>)()) yield;\n { return <x><y/></x> } \n }");
tryItOut("L:with(eval(\"function  prototype (__noSuchMethod__, __proto__) { gc() } \", 1e+81))(({ get __count__(__proto__)(<><x><y/></x></> += this) }) | [, ] = (constructor = [1]));");
tryItOut("with({__parent__: ({ set prop __noSuchMethod__ (__parent__.__count__)yield Function(new Function(constructor = __iterator__)), __noSuchMethod__: <x><y/></x>.* >= [11,12,13,14].sort.__parent__ })})with({}) return;");
