tryItOut("{/*infloop*/do yield; while(null); }");
tryItOut("/*for..in*/L:for(var __iterator__ = [[1]].@foo in <><x><y/></x></>) {new Function }");
tryItOut("if(new Function) { if (__iterator__ = []) {continue ; } else {const __noSuchMethod__;gc() }}");
tryItOut("let false, __noSuchMethod__;");
tryItOut("L: {function  __proto__ () { return <><x><y/></x></> } yield; };");
tryItOut("return <\n><zzz>this.__defineSetter__(\"__proto__\", Math.sin).isPrototypeOf(<x><y/></x>.__defineSetter__(\"__parent__\", ({}).hasOwnProperty).__defineSetter__(\"x::function::__proto__\", (this - undefined)))</zzz></>;");
tryItOut("{yield (-0); }");
tryItOut("if(([<x><y/></x>].map((new Function(\"let __proto__ = <y><z/></y>;\"))))()|=#2=([z1].watch(\"prototype\", Math.sin))) ;");
tryItOut("; const setter;");
tryItOut("return;/*infloop*/M:for(let prototype; #3={a:#3#}.yoyo(({})); <><x><y/></x></>.constructor) window;");
tryItOut("yield window\nexport *;");
tryItOut("let(constructor = yield 1.2e3) ((function(){let \u2028;})());");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(let constructor in (#1=({__count__: (new (*::*)(*, window)).yoyo((><x><y/></x></>.isPrototypeOf(true).unwatch(\"__count__\")))}))) {(*::*.throw(window));export *; }");
tryItOut("/*for..in*/for(const [__iterator__, __count__] = #1= /x/  in 1e81) <x><y/></x>");
tryItOut("M:do {{}/*infloop*/for(let prop; <y><z/></y>; <>x><{{}gc } y/></x></>.unwatch(\"constructor\")) export *; } while((function::__proto__) && 0);");
tryItOut("L:if((yield  '' )) /*infloop*/for(({ __noSuchMethod__: [] }) = (new prop = this() > ?); (let (__parent__) @foo); @foo.__lookupSetter__(\"constructor\").constructor) {{}/*for..in*/for(var __parent__ = ([<><x><y/></x></>].some(new Function)) in <x><y/></x>) export *; } else  if (<><{prototype}><ccc:ddd></ccc:ddd></{prototype}></>) {L: {return;gc() }return;\n(<x/>);\n } else L: {return __parent__;export *; }");
tryItOut("if(__count__ = __noSuchMethod__) { if (@foo) {}} else {const __noSuchMethod__ = <x><y/></x>, constructor; }");
tryItOut("export __proto__");
tryItOut("with({}) throw __count__;");
tryItOut("yield\nlet __noSuchMethod__ = <x/>, __proto__ = (-0)");
tryItOut("if(this.__defineGetter__(\"__count__\", <y><z/></y>)) {yield __noSuchMethod__;const __proto__ = 033; } else  if (((<x><y/></x>)(undefined) = (+undefined))) constructor =  '' , prototype; else {let __proto__;return undefined; }let(({ __proto__: ({ __proto__: __iterator__, __proto__: __noSuchMethod__ }) }), ({ __count__: prototype }) = this) ((function(){let(__parent__ = ) ((function(){let(prop) ((function(){prototype = <x><y/></x>, __count__ = constructor;})());})());})());");
tryItOut("with({__count__: ((yield new Object(1e4)).eval({}))}){var __noSuchMethod__ = undefined;/*infloop*/for(<x><y/></x>[<x><y/></x>].__defineGetter__(\"__count__\", function (__noSuchMethod__, constructor)<y><z/></y>); ;  '' .propertyIsEnumerable(\"__iterator__\")) {'haha'.splitFunction } }");
tryItOut("/*for..in*/for((prototype.prop) in ((function ()\t((__parent__)((null .. <x><y/></x>.__defineGetter__(\"__proto__\", ({}).hasOwnProperty)), (new (constructor)( '' )))))(this)))const constructor, prototype = *; const ;");
tryItOut("prop");
tryItOut("/*for..in*/for(const __count__ in <><x><y/></x></>) export __parent__;");
tryItOut("if(this.__defineGetter__(\"constructor\", (new Function(\"export *;\")))) {export ({ __parent__: prototype });if(<x><y/></x>) break L; else  if (<x><y/></x>) ; } else  if ((<y><z/></y>.__defineSetter__(\"__parent__\", [1,2,3,4].slice) ? *.__noSuchMethod__ = this.valueOf(\"number\") : 1e81.__noSuchMethod__)) {export *; }");
tryItOut("yield <x><y/></x>.__defineSetter__(\"__count__\", [1,2,3,4].map);");
tryItOut("if(<><x><y/></x></>) {throw  \"\" ; }");
tryItOut("/*infloop*/for(this/*\n*/; 1e81; true) (@foo);");
tryItOut("__noSuchMethod__.constructor = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in <x/>) gc()");
tryItOut("switch((__parent__.__iterator__)) { default: const __count__;case (eval(\"null.prop = <x><y/></x>\", <><x><y/></x></>;)): {}break; case 5: case 5: if(@foo(<x><y/></x>)) break; break; case null << <x/> * prototype: yield .2;break; case 9: break; yield *::*; }");
tryItOut("__iterator__ = __proto__;");
tryItOut("if(__proto__ += new <><x><y/></x></>) /*infloop*/M:for(__parent__; *::*; <><x><y/></x></>) const __iterator__ = window; else  if ((((<x><y/></x>)[ /x/g ]).isPrototypeOf( \"\" ))) {{}if(__count__) { if ([1]) {; }} else var prototype = 0.1, constructor; } else {}");
tryItOut("/*infloop*/for(__iterator__(__iterator__); void *::*; (<><x><y/></x></>;)(undefined)) return;");
tryItOut("/*for..in*/for([(__proto__), __proto__] = this.unwatch(\"prop\") in  /x/g ) {let __parent__;return; }");
tryItOut("L:if((<xxx {__noSuchMethod__}={<y><z/></y>} />\t.hasOwnProperty(\"__count__\"))) {(this);export __noSuchMethod__; } else /*for..in*/for([prototype, __iterator__] = ((uneval(null))).isPrototypeOf( /x/g .hasOwnProperty(\"__proto__\")) in <x><y/></x>(<><x><y/></x><\t/>)) {__iterator__ = @foo;gc() }");
tryItOut("{let __noSuchMethod__;M:if(<><x><y/></x></>) {\t if (.2) const __parent__; else {return ; }} }");
tryItOut("let (prototype) { {return  /x/g ; } }");
tryItOut("/*infloop*/do {throw prop;__proto__; const __iterator__; } while(undefined++);");
tryItOut("/*for..in*/for(const [constructor, prototype] = (.2 === <><x><y/><\t/x></>) in (\n(<x><y/></x> += *::*))) {export *; }");
tryItOut("with(gc().__defineSetter__(\"constructor\", (1 for (x in []))))export *\n");
tryItOut("/*for..in*/for(let __count__ in <x><y/></x>) prop:  /x/ ");
tryItOut("/*for..in*/for(let ({a2:z2}) in ((([1,2,3,4].slice).call)(~ /x/ ))){var __parent__, constructor; }");
tryItOut("do {return;gc() } while(((__noSuchMethod__.(<><x><y/></x></>))) && 0);");
tryItOut("/*for..in*/for(var (__parent__)(<x><y/></x>) in ((uneval((function ([y]) { })())))) gc()");
tryItOut("/*for..in*/for(var function::__iterator__ =  \"\"  in constructor+=__count__ = <x><y/></x>) {/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in this) export *; }");
tryItOut("export prototype\ncontinue ;");
tryItOut("L:with({__proto__: [*].map(function (function::__proto__) { return 1e-81 } )})\tyield <x><y/></x>\n__parent__, prototype\nthrow window;");
tryItOut("/*infloop*/do ; while(#1#);");
tryItOut("M:with({__proto__: this\n})__noSuchMethod__");
tryItOut("<x><y/></x>\n(new Function(\"return <x><y/></x>;\"))");
tryItOut("let(__proto__ = #1=[#1#]) { ");
tryItOut("/*for..in*/for(var (<x><y/></x>)((prop)) in ((Math.sin)(eval(\"undefined\",  \"\" ))))gc()");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in @foo) {gc() } } while((--1e4.propertyIsEnumerable(\"prototype\")));");
tryItOut("return ([11,12,13,14].filter);");
tryItOut("{export *;/*infloop*/L:while([<y><z/></y>])L: {prop;__proto__ = <><x><y/></x></>; } }");
tryItOut("let (__count__) { /*infloop*/L:for((function::function::prop = ); 3.141592653589793 >>> <y><z/></y>.__lookupGetter__(\"constructor\"); <><zzz>1.2e3</zzz></>) continue ; }");
tryItOut("throw []; else {{} }}\n");
tryItOut("with({__count__: +(<x><y/></x>.(<x><y/></x>) .. ((eval).apply)(__proto__, false))})L:switch(eval(\"let __proto__ = <x/>;\", __iterator__ = *::*)) { case 8: break; default: if(*) { if (true) {export *; } else return __iterator__;}break; throw @foo\nbreak; case 2: break; case 6:  }");
tryItOut("export *;");
tryItOut("/*for..in*/for([prototype, __iterator__] =  in  '' .hasOwnProperty(\"function::__noSuchMethod__\").propertyIsEnumerable(\"prop\")) if([undefined]) {var prototype = *, constructor; } else const __proto__;");
tryItOut("with({__noSuchMethod__: (\n(uneval(0/0)))})/*for..in*/for(let [__noSuchMethod__, __noSuchMethod__] = prototype = -3/0[<><x><y/></x></> ? <><x><y/></x></> : __noSuchMethod__] in <><x><y/></x></>.unwatch(\"__iterator__\")) throw  /x/g ;");
tryItOut("switch(this.__defineSetter__(\"__proto__\", (({}).__lookupGetter__).apply)) { default: /*infloop*/for(prop; __proto__ = <y><z/></y>; ((*)[return this;])) {function  __proto__ ()[,] }{yield [<x><y/></x>]; }break;  }");
tryItOut("return;\nexport *;\n");
tryItOut("if( '' ) { if (this) {export *; }} else {return #3={a:#3#}; }\n");
tryItOut("{return <x/>;(new Function(\"var __parent__, prototype = window;\")) }");
tryItOut("L: /*infloop*/for(let [] = <x><y/></x>.hasOwnProperty(\"__count__\"); (new function  __noSuchMethod__ () { #1=[#1#]; } ()); ({ __iterator__: __count__, __parent__: __count__ }) = 5.0000000000000000000000 > window) {;/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in #3={a:#3#}) {{} } }");
tryItOut("throw constructor;");
tryItOut("/*infloop*/for(__proto__; true; __count__) {var yield;var __noSuchMethod__ = @foo, __parent__ = window; }\n");
tryItOut("with({}) try { export __count__; } catch(constructor) {  } finally { export *; } ");
tryItOut("/*infloop*/for(let ({ function::__noSuchMethod__: do var constructor; while(([[1]]) && 0);, __count__: ({ __iterator__: prop, function::constructor: [prop, , prototype, , ({ __noSuchMethod__: __count__ })] }) })([<><x><y/></x></>]).__defineSetter__ == (* |= true -= <x/>[undefined]); ({}).hasOwnProperty(Date(*::*, __parent__ = false).hasOwnProperty(\"prototype\"), yield <><x><y/></x></>.hasOwnProperty(\"__iterator__\")); .unwatch(\"__parent__\")) {throw *; }");
tryItOut("L:with(({}))const __parent__ = *;");
tryItOut("{{/*for..in*/for(const ({a1:1}).constructor in [1,,]) yield false;return __parent__ = <x><y/></x>; } }");
tryItOut("if((({ <x><y/></x>: __noSuchMethod__.__iterator__, constructor: __parent__ }) = __noSuchMethod__ = <x><y/></x>)) (prototype.(<x><y/></x>)); else {if(( for each (__count__ in <><x><y/></x></>))) return; else  if (new function (__iterator__, __proto__)function ([y]) { }()) {__noSuchMethod__, __noSuchMethod__; } else {;let __proto__; } }");
tryItOut("export prototype\n;");
tryItOut("/*for..in*/L:for(let prototype.prop in ((({__proto__: __noSuchMethod__ = ( /x/  == (-0))}))(__proto__(function(id) { return id }))))if([15,16,17,18].map(function  __count__ (prop, prop) { return this } , (__proto__.eval(<y><z/></y>)))) throw  /x/g ;");
tryItOut("/*for..in*/for(let __count__ in (__count__)[window] ?  ''  : false.valueOf(\"number\").unwatch(\"prop\")) {(<x><y/></x>); }");
tryItOut("/*infloop*/while([11,12,13,14].some)continue L;");
tryItOut("if('fafafa'replace/a  { return prototype } /g, new Function)\t &=  /x/  , *.prop = if(null) {const constructor;gc() }) { if (window.propertyIsEnumerable(\"__noSuchMethod__\")) {M:if([,,]\n) export constructor; else  if ((__proto__ = (-0))) let __count__ = <x><y/></x>; } else {(4.);with({__count__: prototype.unwatch(\"__proto__\")}) get prop __noSuchMethod__ (__proto__, __iterator__)@foo{{}return <y><z/></y>; } }}");
tryItOut("if(( goto  for (window in <x><y/></x>) if (3/0))++) { if (this) <x/> else return ({a2:z2});}");
tryItOut("M:if((<y><z/></y>)[<x/>].__noSuchMethod__ = (#2=[true])) const prototype =  /x/ , prop;");
tryItOut("/*infloop*/do {try { return  /x/ ; } catch(prototype if (function(){<><x><y/></x></>;})()) { return; } finally { export *; }  } while([z1,,] /= <y><z/></y>);");
tryItOut("/*for..in*/for(var __iterator__ = [(<><x><y/></x></>.propertyIsEnumerable(\"prop\"))] in <x><y/></x>) yield *;");
tryItOut("if(-3/0) ");
tryItOut("/*for..in*/for(let prop in <><x><y/></x></>) \rexport *;");
tryItOut("if((eval(\"__proto__\", *::*).__lookupSetter__(\"__parent__\"))) {export *; } else  if (null ? 0/0 : @foo.eval([11,12,13,14].sort) |= [<><x><y/></x></>].throw(prototype.hasOwnProperty(\"__parent__\"))) {export __iterator__; }");
tryItOut("let (__noSuchMethod__ = (((this).watch).call(<x><y/></x>, <x><y/></x>, function ([y]) { })) != (yield null).__lookupGetter__(\"__proto__\") += RangeError(((1 for (x in []))).call(<y><z/></y>, *::*)), prototype = ([(__noSuchMethod__ = <y><z/></y>) for (window.prop in <x><y/></x>) for each (__count__ in <x/>)]).hasOwnProperty(\"__iterator__\")) { while((((5.0000000000000000000000).watch).call(-0, [,,])) && 0){export *; } }");
tryItOut("M:if(<><x><y/></x></>) [,,z1];");
tryItOut("if(constructor) { if ([[1]][<x><y/></x>]) prototype} else {(({}).__lookupGetter__);; }");
tryItOut("if((<x><y/></x> *=  /x/g )) export prop; else {{}continue L; }");
tryItOut("{}\n/*for..in*/for(let [constructor, __proto__] = window in <><x><y/></x></>) {export *;gc() }\n");
tryItOut("return\nreturn window;");
tryItOut("{yield let (prototype = __noSuchMethod__, __noSuchMethod__ = __count__) this;/*infloop*/for(<><x><y/></x></>;  /x/g ;  \"\" ) {{}return  /x/g ; } }");
tryItOut("/*for..in*/L:for(let [__proto__, __count__] = prototype:  /x/g  in <><x><y/></x></>) {throw  '' ;Math.pow }");
tryItOut("with({constructor: <x/>\n}){yield;yield; }");
tryItOut("let (constructor = (<x/>)((eval(\"h\", this)))) { yield <x><y/></x>\n }");
tryItOut("/*for..in*/for(var __iterator__ = <x><y/></x> in #3={a:#3#}) eval");
tryItOut("{/*for..in*/for(let [__parent__, __iterator__] = [1] in window) {var __proto__, __parent__ = <y><z/></y>;yield <><x><y/></x></>; } }\n");
tryItOut("throw __proto__;");
tryItOut("export delete;");
tryItOut("/*infloop*/for(window !== (-1 || function(id) { return id }.propertyIsEnumerable(\"prototype\") .. Date(<y><z/></y>) -= ((Math.sin)())); ({a1:1}); <x/>.unwatch(\"__iterator__\")) {throw (<x><y/></x>.eval(*).isPrototypeOf( \"\" ));yield <><x><y/></x></>; }");
tryItOut("L:with({prototype: *::*})export *;");
tryItOut("return;");
tryItOut("/*infloop*/for(const __noSuchMethod__;  /x/g ; 1e81) {var prop = <><x><y/></x></>, __iterator__ = undefined;{} }");
tryItOut("return; const __iterator__;\nM:if((delete [<x/>])) let (__proto__ = this) { var yield, constructor =  '' ; }\n");
tryItOut("/*infloop*/for(var ({ __iterator__: ({ __parent__: [, [prop, __noSuchMethod__, ({ __proto__: __iterator__, __parent__: ({ prototype: [, prototype] }) }), [, ({ function(id) { return id }: prop }), \n]]] }) }) = [<><{prop}> </{prop}></>]; + /x/ ; prop = <x><y/></x>) export *");
tryItOut("if(this.zzz.zzz) throw [z1,,]; const prototype;");
tryItOut("with({__count__: 1.2e3}){return <y><z/></y> , @foo;if((function (5, __iterator__) { yield window } ).call()) { if (0 .. *::*)  else {; }} }");
tryItOut("M:while(((({prop: __iterator__, __noSuchMethod__:  \"\"  }))) && 0){break L; }");
tryItOut("for(let y in [5,6,7,8]) yield 1e-81;");
tryItOut("(constructor);\nvar prop, constructor = this;\n");
tryItOut("let ([], __count__) { M:if([<x/>].filter((constructor).__defineSetter__)) { if ([]) gc()} else throw __noSuchMethod__; }");
tryItOut("/*for..in*/for(let prop = (eval(\"L: {;return  /x/g ; }\", ({__proto__: [15,16,17,18].filter(function(q) { return q; }, null),  set constructor(__count__)true }))) in  get __iterator__ __count__ ([__proto__, ({ __parent__: __proto__ }), ])prop = @foo !== [,,z1]) /*for..in*/for(const [prop, prop] = (<x/>.@foo for each ( <x><y/></x> __parent__ in []<y><z/></y>)) in <x><y/></x>) {let __count__, try { ([1,2,3,4].map).apply } catch(__count__ if (function(){0x99;})()) { export __iterator__; } catch(__parent__ if <y><z/></y>) { (1 for (x in [])) } catch(__noSuchMethod__ if (function(){0x99;})()) { export prop; } catch(constructor if (function(){;})()) { ; } catch(function::__iterator__ if (function(){[,,];})()) { let prop = #1#, constructor = null; }  = <x><y/></x>; }");
tryItOut("do {export constructor; } while((__count__) && 0);");
tryItOut("L:with({__proto__: .2}){Math.sin{}export prop; }\n");
tryItOut("with({}) ;");
tryItOut("/*infloop*/for(; (null); (({})['constructor']-=new (window).watch(<><x><y/></x></>))) {yield true; }");
tryItOut("/*for..in*/L:for(__iterator__ in __noSuchMethod__) { }");
tryItOut("L:if((function  prop (__noSuchMethod__) { return constructor } )) let prop; else  if ((Math.pow)((*.__defineGetter__(\"__parent__\", new Function)),  '' )) let prop; else gc()");
tryItOut("if( ''  ? <><x><y/></x></> : 3/0) { if ((<x><y/></x> ? undefined : #1#)) \f{<><x><y/></x></>;(window); } else {__noSuchMethod__; }}\nexport *\n\n");
tryItOut("let(__proto__ = (__proto__.__count__ getter= Function)) ((function(){let(constructor, constructor = (this.__lookupSetter__(\"constructor\"))) ((function(){with({}) throw __proto__;})());})());");
tryItOut("{const __iterator__;with({prototype: yield 1e-81;}){__iterator__, __iterator__ = 1e+81;const prop; } }");
tryItOut("/*for..in*/for([__count__, __iterator__] = ((<x><y/></x> += eval(\"gc()\",  '' )).watch(\"__iterator__\", Math.pow)) in (__count__ .@*:: <x><y/></x>)) {\tyield;const __count__ = <y><z/></y>, try { function () { yield <><x><y/></x></> }  } finally { const __count__; }  = window; }");
tryItOut("if((this.__defineSetter__(\"prototype\", function ([y]) { }))) { if ([11,12,13,14].map) export *; else {yield;0x99; }}");
tryItOut("L:with({prop: -prop.__defineGetter__(\"__proto__\", ({}).hasOwnProperty)})yield;");
tryItOut("/*infloop*/M:while(__noSuchMethod__.(<x><y/></x>.(*))){;with(<><x><y/></x></> = Array(false.__defineSetter__(\"prop\", function(y) { yield y; yield <y><z/></y>;; yield y; }), <><x><y/></x></>))return *; }");
tryItOut("var __parent__ = *::*, __iterator__");
tryItOut("/*for..in*/for(const constructor =  /x/  in !(<y><z/></y>.unwatch(\"__parent__\").hasOwnProperty(\"prototype\"))) {if(null.__noSuchMethod__) {M:if(<><x><y/></x></>) {prop;yield __iterator__; } else  if (null) {} }break L; }");
tryItOut("let(({ __iterator__: __parent__, prototype: [, ({ constructor: prototype, constructor: __noSuchMethod__ }), __proto__, ] })) ((function(){try { throw <x><y/></x>; } finally { yield ((uneval(this))); } })());");
tryItOut("{[1];(<x><y/></x>); }");
tryItOut("/*infloop*/for(const __parent__; __iterator__ = #1=[#1#].hasOwnProperty(\"__proto__\").isPrototypeOf(this.__defineGetter__(\"return #1=[#1#];\", Function)); new (<x/> /= <y><z/></y>)( \"\" .__lookupSetter__(\"__parent__\"), this)--) {const __iterator__ = ({a2:z2}), __iterator__; }/*for..in*/for([constructor, __proto__] = (yield __parent__) in []) {continue L;let __noSuchMethod__ = null; }");
tryItOut("try { let(__proto__) { let(5.0000000000000000000000 = ~constructor) { throw prop; } catch(__noSuchMethod__ if (function(){try { this.zzz.zzz; } catch(__count__ if ( '' .watch(\"__iterator__\", Math.pow) if (3/0))) { throw constructor; } catch(__parent__ if (function(){let(__proto__ = 033) ((function(){gc()})());})()) { with({}) {} } catch(__noSuchMethod__ if (function(){let(__noSuchMethod__) ((function(){export __count__;})());})()) { with({}) const __noSuchMethod__ = [1,,], prop =  \"\" ; } catch(__parent__) { this.zzz.zzz; } finally { gc() } })()) { __parent__ = prop; } catch(prototype) { return; } ");
tryItOut("L:if((<><x><y/></x></>.yoyo(3/0))) { if (__count__ = (<y><z/></y> ? .2 : <><x><y/></x></>).__defineSetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)) /*infloop*/for((window.watch(\"__noSuchMethod__\", ((new Function(\"function  __noSuchMethod__ (constructor, __parent__) { continue L; } \"))).call)); [,,]; (window)()) /*for..in*//* nogeckoex bug 349964 */M: for  each(const prototype in null) {export *; } else {while((4.) && 0)let (__parent__, prototype = this) { yield this; } }}");
tryItOut("with({__iterator__: (eval)})break M;");
tryItOut(";");
tryItOut("with({__parent__: <zzz>true != false</zzz>});");
tryItOut("with((3)[(\n '' )]){L:if(window) continue ; else  if (null) yield; else return <x/>;{} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__parent__) in #3={a:#3#}) {do {yield [,,];; } while((__iterator__ =  '' ) && 0);throw prototype;\ngc\nreturn <x><y/></x>;\t }");
tryItOut("this.zzz.zzz;");
tryItOut("prop = <x><y/></x>;\nif( /x/g ) { if ( \"\" ) continue ;} else {break ; }\n");
tryItOut("with({constructor: <x/>}){*; }");
tryItOut("if('fafafa'.replace(/a/g, prop)) {gc() } else  if ( { return (eval(\"function(id) { return id }\",  \"\" )) } ) gc");
tryItOut("/*infloop*/L:for(const __noSuchMethod__; yield @foo; 1e81) {( /x/g ); }");
tryItOut("/*for..in*/M:for(var ( \"\"  for (prop in this)['fafafa'.replace(/a/g, function(q) { return q; })]) in [constructor, , , prop, [, __iterator__, __iterator__, , prototype]] = prop.__noSuchMethod__) /*infloop*/M:for(__iterator__ |=  /x/g .__lookupGetter__(\"__parent__\"); ({ __noSuchMethod__: prototype }) = (/a/gi).call(this, ); 033) yield;");
tryItOut("L:if((({ set __parent__ constructor (function::__iterator__) { yield (@foo &= __proto__) } ,  get __count__(prototype) { yield ((uneval(false))) }  }))) { if ('fafafa'.replace(/a/g, (1 for (x in [])))) <x><y/></x>;} else {<><x><y/></x></>gc() }");
tryItOut("{function () { yield 4. } \n({});\n }");
tryItOut("switch((this.zzz.zzz)) { case ([11,12,13,14].filter): break ;break; case 3: case 0: ;break L;gc()break;  }");
tryItOut("let (__count__, prototype = ((__proto__.__iterator__ = [1,,])(~<x><y/></x>))) { /*infloop*/for(let ({ yield: let (__parent__ = <y><z/></y>) null, function::__iterator__: prototype }) = ((function  prototype (prop) { yield <x/> } ).call()); (<><x><y/></x></>\n).unwatch(\"prop\"); [11,12,13,14].some) {/*for..in*/for(var __iterator__ in ((/a/gi)(this))){export __parent__; }\nFunction } }");
tryItOut("/*for..in*/for(var __parent__ = __noSuchMethod__.constructor = [11,12,13,14].filter in !false) {const prop, __parent__ = __parent__;yield; }\nwith((default: break; case 5: break; (<x><y/></x>)).isPrototypeOf(033))L:if(((__parent__);.propertyIsEnumerable(\"__parent__\"))) export __iterator__; else  if (false) ;\n");
tryItOut("/*infloop*/for(const __proto__ = *::*; *; [,,]) {export *; }");
tryItOut("/*infloop*/M:do break ; while(__noSuchMethod__ = prop--);let __count__ = 0, prototype;");
tryItOut("/*for..in*/for(const [__proto__, __proto__] = new  /x/g () in new <><x><y/></x></>) switch(true) { case undefined: yield <x/>;break;  }");
tryItOut("/*infloop*/for(constructor; this; (void ((('fafafa'.replace(/a/g, (eval).apply)).watch(\"prop\", Math.pow))()))) {{<x><y/></x>; } }");
tryItOut("M:if(([15,16,17,18].sort(('haha'.split).apply, true))) { if (((prop = *::*)[--1.3])) {return;/*for..in*/for(const __iterator__ in <x><y/></x>) {throw null;return true; } }} else [[]];");
tryItOut("/*for..in*/for(const [__iterator__, __noSuchMethod__] = new gc()function  constructor (__count__) { return (-0) } (<y><z/></y>, <x><y/></x>) in (new Function).call(#1=[#1#], <x><y/></x>, 1.2e3)) {(<x><y/></x>);L:if(-1) { if (false) gc()} else export __iterator__; }");
tryItOut("with((this.zzz.zzz))with(__noSuchMethod__ = @foo)return null;");
tryItOut("throw (*.isPrototypeOf(1e4));\nyield  /x/ ;\n");
tryItOut("M:if([true].some(this)) { if ((__count__.(<x/>))) {export constructor;continue M; }} else {}");
tryItOut(";");
tryItOut("/*infloop*/L:for([({ __proto__: __parent__ }), __noSuchMethod__, , , ] = null; ( /x/ )(<x><y/></x>); [ /x/ ].yoyo((this.watch(\"constructor\", prop)))) yield;");
tryItOut("with({}) with({}) with({constructor: undefined.propertyIsEnumerable(\"__noSuchMethod__\")}){export __iterator__;function (__parent__, __proto__) { yield *::* }  }");
tryItOut("return;");
tryItOut("with({}) export *;");
tryItOut("/*for..in*/M:for(var __count__ = window in <x/>) {__count__, __proto__;*::*; }");
tryItOut("if((\narguments)) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var __parent__ in <y><z/></y>) {const __count__ = <x><y/></x>, true = <y><z/></y>;(<x/>); } } else return *::*;");
tryItOut("/*for..in*/for(const __proto__ = this in false) {export __noSuchMethod__; }");
tryItOut("let(prop, prototype) ((function(){export *\n})());");
tryItOut("break L;\n\n");
tryItOut("/*infloop*/L:while((yield *::*)){break ;/*infloop*/do {function(q) { return q; }; } while(__iterator__); }");
tryItOut("if((new Function(\";\"))().unwatch(\"prototype\").propertyIsEnumerable(\"__iterator__\").valueOf(\"number\")) (<x/>); else  if (#2=[<><x><y/></x></*/(/>]()) /*for..in*/for(<ccc:ddd></ccc:ddd> in ((Math.sin)(null))){}");
tryItOut("/*for..in*/for([__count__, __count__] = (*::* for each (__count__ in -3/0)).eval(\n /x/g ) in ({__iterator__: this, __noSuchMethod__ setter: ({}).hasOwnProperty })) return");
tryItOut("if(this.__defineGetter__(\"constructor\", function (__proto__, __count__) { gc() } )) {(__count__ = new ( '' )()); } else  if ((__iterator__ = __iterator__.*)) const __count__ = <><x><y/></x></>; else {break M;\fthrow #1=[#1#]; }");
tryItOut("let(constructor = [11,12,13,14].sort) { try { __iterator__; } catch(__iterator__ if this.zzz.zzz) { export *; } catch(__parent__ if (function(){export *;})()) { {} } catch(__iterator__ if function::__proto__ =  /x/g ) { ; } finally { const __parent__, __iterator__ = null; } ");
tryItOut("let (__parent__) { return prototype; }");
tryItOut("let (__parent__ = <><x><y/></x></>.__lookupGetter__(\"__iterator__\")) { yield; }");
tryItOut("{continue ; }");
tryItOut("return;");
tryItOut("while((<>true</>.(({ get __noSuchMethod__ __iterator__ (__proto__) { yield <><x><y/></x></> } , __count__: -0 }))) && 0)constructor");
tryItOut("<x><y/></x>\nif(<x><y/></x> >= *::*) (1 for (x in []))");
tryItOut("/*infloop*/for(throw prop;; (eval(\"return null;\", *::*)).__proto__; ({ set __iterator__(__count__)false, __count__: prototype })(<x><y/></x>.propertyIsEnumerable(\"constructor\") ^ constructor = [[1]])) gc()");
tryItOut("/*infloop*/while((<x/>.__iterator__))let __parent__ =  '' , __count__;");
tryItOut("with([15,16,17,18].some(function(q) { return q; }, <x/>))yield;");
tryItOut("if(( /x/g  for each (window in <><x><y/></x></>))) let prototype = *; else  if (<><x><y/></x></> & (function ([y]) { })()) {var ;return true; }");
tryItOut("/*for..in*/for(const let in __parent__.__noSuchMethod__ setter= \ffunction (__noSuchMethod__) { throw *::*; } ) {;__parent__ = (-0), __count__\n }");
tryItOut("(prototype = prop = <x><y/></x>.__defineSetter__(\"constructor\", <x/> & undefined))");
tryItOut("throw StopIteration;");
tryItOut("if(++__parent__ = <><x><y/></x></>) const __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (#1=[#1#]\n)(#0=[1,,]) in <y><z/></y>) {throw false; }");
tryItOut("/*infloop*/L:for//h\n(var ({ __proto__: __iterator__, __proto__: [] }) = new __proto__ = <x/>((1.2e3)[__parent__];.__defineGetter__(\"__proto__\", window)); ({}); (__iterator__ = false)) {var __iterator__ = function::__count__, __parent__ =  /x/g ; }");
tryItOut("if([15,16,17,18].sort([1,2,3,4].slice, prop).hasOwnProperty(\"constructor\")) { if ((let (__parent__ =  /x/ )  /x/ )) {if((<><x><y/></x></> for (prop in 1.3))) { if ( /* Comment */3.141592653589793) {}} else export *; }} else {[1,2,3,4].slice({}).hasOwnProperty }");
tryItOut("/*infloop*/for(var prop = <><x><y/></x></>; <x/>; <><x><y/></x></>) const __noSuchMethod__ = this, __parent__ = 1e81;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ((prop = *))(__iterator__ instanceof \f({__count__ getter: [1,2,3,4].slice, __iterator__: __iterator__ })) in (function ([y]) { } if ( '' ))) {export __noSuchMethod__;return; }");
tryItOut("export prototype;");
tryItOut("export prop\n{/*for..in*/for(var prop = <><x><y/></x></> in <x><y/></x>) yield __iterator__finally { (this); } ;gc() }");
tryItOut("<y><z/></y>;");
tryItOut("/*infloop*/for(__parent__; ([[1]]); this * prototype .@x:: __count__ = prototype) ({}).hasOwnProperty");
tryItOut("/*infloop*/for(const __iterator__; __count__.*::*; window) {/*infloop*/for(let prototype = function ([y]) { };  /x/ ;  /x/ ) {break ; } }");
