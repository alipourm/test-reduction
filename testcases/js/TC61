
tryItOut("([])\ngc()");
tryItOut("if(__proto__|=<x><y/></x>) {export *; } const __iterator__;");
tryItOut("/*for..in*/for(const __count__ = prop.__parent__ = [,,] in this) {export *; }");
tryItOut("Math.pow");
tryItOut("{export function::prototype;\n }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in  \"\" .__defineSetter__(\"constructor\", gc)) /*infloop*/do export *; while(__iterator__);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __iterator__ in *::*) {return -1;gc() }");
tryItOut("/*infloop*/do export __iterator__; while(false)");
tryItOut("/*for..in*/for(let constructor = [11,12,13,14].map in  /x/ ) {do const __proto__, __iterator__; while((window) && 0);for(let y in [5,6,7,8]) (); }");
tryItOut("/*for..in*/for(const __count__ in <x><y/></x>) {gc() }\nif(__parent__)  else  if (Exception(<><x><y/></x></>)) {{}if(window) {{} } else  if ((-1)) {return; } else {[1,2,3,4].mapexport *; } }");
tryItOut("{}");
tryItOut("if( \"\"  @ __parent__) yield *; else  if ((delete <x><y/></x>.(1e4))) {L: \t{gc() } } else {return (yield <x><y/></x>); }");
tryItOut("M:if(__count__.__count__) {if(constructor: this\n) { if (eval(\"function ([y]) { }\", window)) return [[1]];} else return true; }");
tryItOut("L: export *;");
tryItOut("with( \"\" )/*for..in*/for(const __iterator__ in ((Math.sin)(<x><y/></x>)));");
tryItOut("/*for..in*/for(var constructor in ((({}).__lookupGetter__)(<>((function(q) { return q; })(<><x><y/></x></>, window))</>)))if(<><x><y/></x></>) {return <x><y/></x>;yield; }");
tryItOut("return eval(\"gc()\", *);");
tryItOut("/*infloop*/for((({__proto__: __proto__ =  \"\" , constructor getter: new Function })); (++(<><x><y/></x></>\t.eval(3.141592653589793))); [prototype+=constructor].filter('haha'.split)) L: Math.pow");
tryItOut("do L: var prototype = 0; while(((undefined.__count__)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in  /x/ ) continue ;");
tryItOut("with(<x><y/></x>.(function ([y]) { })){export *;const __iterator__ = *; }");
tryItOut("/*for..in*/for(const __proto__ in __noSuchMethod__) __count__;");
tryItOut("let(__iterator__ = <x><y/></x>) ((function(){yield;})());");
tryItOut("throw StopIteration;");
tryItOut("with({}) return;");
tryItOut("/*infloop*/for(var __parent__; (__parent__.constructor setter= (new Function(\"{ /x/g ; }\"))); (__noSuchMethod__.__proto__ = *::*) ? new Math.sin() : (__iterator__ = *)) {yield; }");
tryItOut("L: {function  prototype (prototype) { return  \"\"  } /*infloop*/while(try { throw *; } catch(__noSuchMethod__ if (x::__noSuchMethod__ = <x/>)) { yield; } catch(__iterator__ if true) { yield __proto__; } catch(prop) { export *; } finally { return true; } )export *; }");
tryItOut("/*infloop*/do (__iterator__); while(++true);");
tryItOut("/*for..in*/for(let __proto__ in ((Math.pow)(({a1:1})))){return ({a1:1});gc() }");
tryItOut("L:switch(<><x><y/></x></> ? <x/> : <x><y/></x>.constructor = + '' ) { case 0: break; default: let (prop, prototype) { if(*::*) {function::constructor } else  if (*::*) gc() else {} }case this.__defineSetter__(\"__parent__\", (new Function(\"throw <x><y/></x>;\"))): break; /*for..in*//* nogeckoex bug 349964 */ for  each(var each in -3/0) {throw false; }case 3: break;  }");
tryItOut(" do ");
tryItOut("if([<x><y/></x> ? arguments : <x><y/></x>].sort(([1,2,3,4].slice).call)) { if ([1,,] >>= __count__ = undefined) {yield <><x><y/></x></> } else {export *;{} }}");
tryItOut("let __proto__ = window, __proto__ = *::*");
tryItOut(" /x/g ;\nyield;\n");
tryItOut("if((Math.pow)()( /* Comment */ /x/g  .@ window, eval(\"this\", <x><y/></x>))) yield <y><z/></y>; else /*infloop*/for(prop; [1,,]; undefined) const prototype; const __proto__;");
tryItOut("L:switch(new ((prop.__lookupSetter__(\"prototype\")))([11,12,13,14].some)) { case ( this  = this.__noSuchMethod__).__lookupGetter__(\"__proto__\"): break; case ~(prop.__parent__): default: switch(this) { default: break;  }break; case (({ constructor: __proto__ }) = ({ undefined: __proto__ })).unwatch(\"__noSuchMethod__\"): switch(0.1) { prototype }break; /*for..in*/for(var [function::__noSuchMethod__, prototype] =  in [1,,]) export *;break; case (*)[<><x><y/></x></>]: let (__count__, __iterator__) { continue M; }break;  }");
tryItOut("if(prototype = <x/>) { if ((new Boolean( \"\" ))) var __parent__ = 3.141592653589793; else {var constructor =  \"\" , __iterator__;case *::*: export *;break; yield;break;  }}");
tryItOut("/*infloop*/for(new function (__proto__, __proto__) { let prototype =  /x/g ; } ((uneval(<x><y/></x> if (#1#)))); undefined.yoyo((this if (__noSuchMethod__))); new Function((new new ({}).hasOwnProperty()().__lookupSetter__(\"__parent__\")), @foo ,  /x/ )) \t{return *; }");
tryItOut("/*for..in*/for(__count__ in ((yield <x/>() , (uneval((*::*)(({a2:z2})))))(\t__count__ = <><x><y/></x></>)))");
tryItOut("while(((__noSuchMethod__ = this.zzz.zzz)) && 0){throw [1,,];\nconst __parent__;\n }");
tryItOut("L:if(.2 | ) <><x><y/></x></>; else  if ((__proto__.(undefined))) {break ;( /x/g ); }");
tryItOut("let(__iterator__ = new 0.1((new Iterator())) ? [15,16,17,18].filter(Math.sin, (<><x><y/></x></> @ <x><y/></x>)) : @foo.valueOf(\"number\")) ((function(){try { __proto__ = __parent__; } catch(__parent__ if (function(){for(let y in []);})()) { let(__proto__ = .2 >=  /x/ , constructor) ((function(){for(let y in [5,6,7,8]) export *;})()); } catch(__count__) { throw StopIteration; } finally { yield <><x><y/></x></>--; } })());");
tryItOut("if(window.unwatch(\"__iterator__\")++) { if (['fafafa'.replace(/a/g, [1]) for (__parent__.__parent__ in __iterator__) if (prop)]) let __parent__;break L;} else {export *;const prop = *::*, __noSuchMethod__ = __iterator__; }");
tryItOut("/*infloop*/while(<y><z/></y> ? prototype.constructor = *.__defineSetter__(\"constructor\", (1 for (x in [])))\n : prop = ({a2:z2}))L: {if(<><x><y/></x></>) {const constructor = <x/>, __parent__ = __parent__; } else  if (true) {(__count__).apply } }L:if(('fafafa'.replace(/a/g, (new Function(\"gc\"))))) { if ( \"\" ) {let __proto__ = 3/0, constructor = <><x><y/></x></>;continue L; }} else /*infloop*/while(<x><y/></x>)export __proto__");
tryItOut("export *;");
tryItOut("/*for..in*/M:for(const prototype in ((function () { return function(id) { return id } } )(__noSuchMethod__))){export *;; }");
tryItOut("/*infloop*/L:do var constructor, __proto__ = null; while(__noSuchMethod__-=<x><y/></x> ? __proto__ : __noSuchMethod__ = window);");
tryItOut("with(this.zzz.zzz)var prop = __parent__;");
tryItOut("/*for..in*/for(const [({ __iterator__: __iterator__, __count__: constructor }), , , __parent__] in (((new Function(\"{while((function () { return (function ([y]) { })() } ()) && 0){(*); }Math.pow }\")))((window.propertyIsEnumerable(\"__parent__\")))))if(true) {return; } else {var __proto__ = prop, __noSuchMethod__ = #3={a:#3#};([z1,,]); }");
tryItOut("/*infloop*/for(var get;  \"\" ; <x><y/></x>) ;");
tryItOut("{/*infloop*/do {gc() } while(<x><y/></x>);M:if( \"\" ) prototype = [,,], __iterator__ else gc() }");
tryItOut("if(<y><z/></y>) { if ([,,] += [[1]] ? ({prototype: 3 }) : (__parent__.(*::*))) {gc()return false; }} else {export *; }");
tryItOut("if(new __proto__(<x><y/></x>)) {; } else {function () { <y><z/></y>;\f }  }");
tryItOut("let constructor;export *;");
tryItOut("return 033;");
tryItOut("if(*::*) {break ; } else yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(let this['prototype'] in (((({}).hasOwnProperty).apply)((yield (-1))))){(__iterator__); }");
tryItOut("continue ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in 1e81) ;");
tryItOut("if(__noSuchMethod__(3.141592653589793, \f<><x><y/></x></>).eval(<x><y/></x>)) {throw  '' ; } else  if ((p={}, (p.z = x::prop)())) if(0++) const prop = <><x><y/></x></>; else  if ((eval(\"break M;\", ({a1:1})))) {{}{} } else {var __count__; } else switch(1e81) { case  \"\" : break; case 7: case <y><z/></y>: {}break; default: let __noSuchMethod__;return <x><y/></x>;case  \"\" : break; break; case  \"\" : case undefined: ;break; case 5: case @foo: break;  }");
tryItOut("/*infloop*/for(@foo -=  '' ; new (__count__)(); false) /*infloop*/for(const __proto__; __proto__; (function ([y]) { })()) (<x><y/>\f</x>);");
tryItOut("L: {let __parent__ = *;break L; }");
tryItOut("throw __iterator__;");
tryItOut("; const constructor;");
tryItOut("{function(y) { yield y; throw 1e+81;; yield y; } }\n");
tryItOut("throw __iterator__;");
tryItOut("{}L:with((<x/>.isPrototypeOf(033)))continue L;");
tryItOut("let(__parent__ = 'fafafa'.replace(/a/g, function (__iterator__)<><x><y/></x></>).__lookupSetter__(\"__proto__\")) ((function(){for(let y in [5,6,7,8]) with({}) { {} } })());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __iterator__ in RegExp()) {L: return <><x><y/></x></>;/*for..in*/for(const __noSuchMethod__ in <><x><y/></x></>) {export *; } }");
tryItOut("/*infloop*/do return window; while(this);\n/*for..in*/for(let 1.2e3 in __count__) {throw *; }\n");
tryItOut("for(let y in []);");
tryItOut("if((__proto__.( /x/ ))) {/*for..in*/for([prototype, __iterator__] = [,] in prototype) {return 3.141592653589793; } }");
tryItOut("(null);");
tryItOut("M:while(((Exception())) && 0)L: if(M:switch(function(id) { return id }) { default: break;  }) { } else  if (<y><z/></y>) [1,2,3,4].slice else {{} }");
tryItOut("M:if(<x><y/></x>.__defineSetter__(\"__proto__\", [1,2,3,4].slice)) {\f if (*) export __noSuchMethod__\f;} else continue L;");
tryItOut("switch(<ccc\f:ddd></ccc:ddd>) { case __iterator__.yoyo(((__parent__.__proto__ = <><x><y/></x></>))):  }");
tryItOut("if([<x\f><y/></x> if (this)]) { if ((__proto__.( \"\" .throw([z1,,]))).hasOwnProperty(\"__parent__\")) {if(__noSuchMethod__) {{}const  /x/g  = __count__; } else  if (<y><z/></y>) {const __proto__, __iterator__;; } else (false); } else {yield\n }}");
tryItOut("with({}) const __count__ = undefined, __iterator__ = __proto__;");
tryItOut("with({__noSuchMethod__: (new Math.pow()) += <><x><y/></x></>})export __count__;");
tryItOut("/*for..in*/L:for([prop, prop] = <><x><y/></x></> in false) {return; }");
tryItOut("L: {let __proto__;throw <x><y/></x>; }if([<><x><y/></x></> for (__noSuchMethod__ in <x/>)].throw((null.__defineGetter__(\"__iterator__\", Function)))) { if ((__noSuchMethod__).valueOf(\"number\")) {<x><y/></x>;yield; }} else {{} }");
tryItOut("\tconst __noSuchMethod__, <y><z/></y>;gc()gc()");
tryItOut("return;");
tryItOut("/*infloop*/for(const __count__; new *::*; \n<x/>) {throw 1.2e3; }\n");
tryItOut("let(__iterator__ = null) ((function(){return <y><z/></y>;})());");
tryItOut("L: {const __parent__ = <x><y/></x>;{} }");
tryItOut("M:if(({__iterator__: <x/>}).isPrototypeOf(((prop.isPrototypeOf( /x/ )))) >= [__count__].filter(function(y) { yield y; return;; yield y; }) <= ({ set __proto__ set () /x/g  }\f)) let (prop, prototype = [1]) { ; } else  if () {export __iterator__;null; } else L:if((~*::*)) __noSuchMethod__ else  if ((<><x><y/\n></x></> .. undefined)) Function");
tryItOut("__iterator__( \"\" ) = function::__parent__;");
tryItOut("/*infloop*/for(<x/>; [ /x/g  ? <><x><y/></x></> : @foo <= __count__%=<x><y/></x>\t :: let (__iterator__) <>\f<x><y/></x></>]; ((function (__parent__) { return false } ).call(function  __count__ (constructor, __count__) { __iterator__; } (<x><y/></x>, <y><z/></y>), __proto__ = null))) if(([__iterator__ :: 033].filter(Math.sin))) {yield <y><z/></y>; } else  if (({ prototype: constructor }) = (({ get prop() { return; }  }))) {{}return; } else {__noSuchMethod__ = @foo; }");
tryItOut("/*infloop*/do {</*\n*/x><y/></x>;try { const __iterator__ = __iterator__; } catch(__parent__) { Function } finally { prototype; }  } while(false)\n");
tryItOut("M:if( /x/g ) ");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <><x><y/></x></>, __proto__ in (((<x><y/></x>).watch)(<y><z/></y>)));");
tryItOut("if((<><x><y/></x></>)(<><x><y/></x></>)) /*infloop*/for(let prototype; <><x><y/></x></>++; eval(\"window\", __noSuchMethod__ = null)) new Function");
tryItOut("/*infloop*/for(((yield yield;))(prop: (Function(this[false], 0.1))); prop, __proto__ = __proto__ ? window : <y><z/></y>; eval(\"(__proto__%=<y><z/></y>)\", prop = prop.__defineGetter__(\"__iterator__\", prop))) {var __iterator__ = *, __iterator__; const __iterator__;var __count__ = __count__, __iterator__ = null; } const __proto__");
tryItOut("constructor = __proto__;");
tryItOut("{\n<x><y/></x>;if(new ('fafafa'.replace(/a/g, function () { {{}; } } ))()) { if (window) {<x/>; } else {return; }} }");
tryItOut("/*for..in*/M:for(let (+<><x><y/></x></>--) in ((eval)((((<x)><)y/>/x>.__lookupGetter__(\"__count__\")[prop =  /x/ ])))){L:with/*\n*/(__parent__){let __proto__;let (prop = *) { function(q) { return q; } } }const __noSuchMethod__; }");
tryItOut("/*infloop*/do {yield this;export __count__; } while(__parent__.__iterator__ = []);");
tryItOut("let (__count__, prototype.__proto__) { yield\n }");
tryItOut("{export *;(*::*); }undefined;");
tryItOut("{yield <y><z/></y>\nyield undefined; }");
tryItOut("/*for..in*/for(__parent__.constructor in ((*)((({ __count__: constructor, __parent__: __parent__ }) = __parent__.__iterator__ = [1,,].propertyIsEnumerable(\"prototype\"))))){M:if( /* Comment */*) __iterator__: <><x><y/></x></> else  if (@foo) return window; else gc()__count__; }");
tryItOut("/*for..in*/for(let prop = -1 in (prototype in this)) ");
tryItOut("constructor = <><x><y/></x></>.prop -=  '' .hasOwnProperty(\"constructor\"), __proto__ = delete  /x/ ");
tryItOut("/*infloop*/L:for([<bbb xmlns:ccc=\"(constructor = constructor.constructor = prototype--) - <><{__iterator__}><x><y/></x><ccc:ddd>yyy</ccc:ddd></{__iterator__}></>\"><ccc:eee></ccc:eee></bbb>].filter(1e+81); let (constructor = eval(\"<y><z/></y>\",  '' ), __parent__ = __count__) (<x/>)[({a2:z2})].isPrototypeOf(({ prototype: ({ prop: let }) }) = <xxx {constructor}={#3={a:#3#}} />); *) {/*infloop*/L:do {/*for..in*/L:for(__iterator__ in <x/>) { }; } while(__iterator__%= /* Comment */<x><y/></x>); }");
tryItOut("if((__parent__ /= /* '' )) { if (({__count__ getter: <x><y/></x>, __proto__: prototype ==  ''  })) ;} else let (prop = *, prototype = <x><y/></x>) { const __noSuchMethod__ = [[]]; }");
tryItOut("L: {throw __iterator__;return ({a1:1});const __proto__;return; }");
tryItOut("if(constructor.eval(null)) {(function (__count__)<x><y/></x>).call } else {; }");
tryItOut("return  \"\" \n");
tryItOut("/*for..in*/L:for(__noSuchMethod__ = * in [[[[]]] for (__iterator__ in #3={a:#3#}) if (<><x><y/></x></>)]) [z1,,]\nvar  { return; } , __noSuchMethod__ = __count__;");
tryItOut("/*infloop*/while( /x/ ){let __iterator__; }");
tryItOut("with(Array()){return; }");
tryItOut("M:if(this) {var __proto__ = <x><y/></x>, __parent__ = this; }");
tryItOut("{return this;; }");
tryItOut("if(@foo) { if (<y><z/></y>) {{}const prototype; } else yield -0;}");
tryItOut("throw __iterator__;");
tryItOut("switch() { default: break;  }");
tryItOut("/*infloop*/for([15,16,17,18].map((window).watch, [11,12,13,14].filter); (([4.]).__iterator__); Date(__count__)) /*infloop*/for((this <= (new Function)(false)); (<><x><y/></x></> ,  \"\" ); __count__ >>>  /x/g .__count__) {}");
tryItOut("/*for..in*/for(const prototype in window) {var constructor =  /x/g , __iterator__;throw __parent__; }");
tryItOut("{ /x/g ; }");
tryItOut("/*for..in*/for(let [( /x/g .*)] =  in ( /x/g ).watch()) {return  /x/ ; }");
tryItOut("for(let y in [5,6,7,8]) /*for..in*/L:for(let [prototype, prop] = <><x><y/></x></>.propertyIsEnumerable(\"prototype\") in *) {( /x/ ).watchthrow this; }");
tryItOut("if(({ prop: ({ __parent__: ({ __iterator__: prop }), __iterator__: <x><y/></x> }), prop: [({ __proto__: __iterator__ }), , ] }) =  ''  :: (([15,16,17,18].filter((1 for (x in [])), @foo)) for each (prototype in <y><z/></y>) for each (__count__ in <x><y/></x>))) {<x><y/></x> ==  /x/ ; } else  if ([constructor =  \"\"  = prop].map(<{constructor}></{constructor}>)) {yield; } else __noSuchMethod__, __noSuchMethod__ = window;");
tryItOut("/*infloop*/for(prototype; ([*::* for each (prop in ({}))]); (true.prototype) || __proto__.__iterator__) {return ({})(-0); }");
tryItOut("M:with(<><>(prop[constructor]) << <x><y/></x>.(<x/>)</></>)export *;");
tryItOut("/*for..in*/for(let __noSuchMethod__.__proto__ in *::*) prop = <x><y/></x>, prop\n;");
tryItOut("/*infloop*/while((new (<x/>)(*,  if (undefined))) << 3.141592653589793.eval( '' )\t){if((<><x><y/></x></>(false))) { if ((prop = <><x><y/></x></>)) {export *;{} }} else  }");
tryItOut("/*infloop*/while((new function(y) { yield y; throw  \"\" ;; yield y; }(-0,  \"\" )//h\n if (null)))constructor =  '' ;");
tryItOut("if(((new Function).call)()) <> </> else  if (<y><z/></y>.eval()) with((__proto__.__proto__ =  \"\" ))if([<x/>].filter(<x><y/></x>)) gc() else  if (<y><z/></y>\n) {{}export prop; }");
tryItOut("{; }");
tryItOut("if((window if (@foo))) ( /x/g ); else  if (__parent__ = this.__defineGetter__(\"constructor\", 'haha'.split)) {gc()__count__, prototype; }");
tryItOut("if(++Array((gc).call(*::*, ))) var __parent__ = __iterator__;\n(x::__parent__);\n else  if ((((this.zzz.zzz))\n)) /*infloop*/for(({ constructor: __iterator__ }) = new [[]](<x><y/></x>); __iterator__;  /x/  .@*:: undefined) ; else /*for..in*//* nogeckoex bug 349964 */ for  each(const () in (yield  /x/ )) {let __proto__ }\r");
tryItOut("L: {__noSuchMethod__, prototype; }");
tryItOut("M:if((this)(<><x><y/></x></>, null)) { if ((<x/>)([z1,,])) {export prototype; } else { }}");
tryItOut("export constructor\n");
tryItOut("/*infloop*/for(let ({ __count__: [({ __parent__: constructor, prototype: prototype }), ({ prototype: __parent__ }), ] }) = ([#1=({__iterator__: -3/0})].sort((Function).call)); (p={}, (p.z = function(id) { return id })()).__defineSetter__(\"prototype\", ((<><x><\ty/></x></>).watch).call); ([<x><y/></x>] | (__noSuchMethod__.prototype = <x><y/></x\f>))) /*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__ in __proto__) {return 4.; } const __proto__;");
tryItOut("const prototype, __parent__\nreturn <y><z/></y>;");
tryItOut("/*for..in*/for(var __proto__ = yield <><x><y/></x></> ..  \"\" .eval(prop) in (uneval((yield <x><y/></x>) | typeof __proto__))) {@foo;return;\n/*for..in*/M:for(const prototype = this in <><x><y/></x></>) export function::__noSuchMethod__;\n }");
tryItOut("let prototype;();");
tryItOut("__parent__");
tryItOut("return -3/0\n");
tryItOut("let (prop = (('fafafa'.replace(/a/g, Math.sin)) in (<x><y/></x> < false))(\nthis.zzz.zzz)) { if((@foo.__lookupSetter__(\"__count__\"))) { if (++ /x/ ) /*infloop*/while(({})){ } else throw prototype;} }");
tryItOut("M:with(((p={}, (p.z = <x/>)())).throw(__parent__ = [[]]))yield prop");
tryItOut("/*for..in*/for(constructor in (((<y><z/></y>).__defineSetter__)(null))){let constructor, prop; }");
tryItOut("return [1,,].__lookupSetter__(\"constructor\");");
tryItOut("with({}) { try { return; } catch(prop if __iterator__.__proto__ setter= eval) { with({}) __iterator__ = __noSuchMethod__; }  } ");
tryItOut("<><x><y/></x></>;");
tryItOut("switch([yield  '' ].filter(function(y) { yield y; {}; yield y; })) { default: return false;break; break; /*infloop*/do {if([1,,].__proto__ = false) {gc() } else {const __parent__ = __iterator__; } } while(.2 !== <x><y/></x>);break;  }");
tryItOut("/*infloop*/while(((<><x><y/></x></>))){L:with({constructor: (function ([y]) { })()})let __noSuchMethod__, prop = constructor;prototype = <><x><y/></x></>, prop = @foo; }\n/*infloop*/for([let (__iterator__) <x><y/></x>]; ((p={}, (p.z = (@foo / @foo ? \f<><x><y/></x></>.__lookupGetter__(\"prop\") = this : ({prop setter: <y><z/></y> })))())); constructor.__iterator__ = ([[1]]).call(<y><z/></y>, ).yoyo(((false)[<><x><y/></x></>]))) {if(this) { if (__iterator__) const constructor, __noSuchMethod__;} else __parent__;return __noSuchMethod__; }\n");
tryItOut("export *;");
tryItOut("for(let y in [5,6,7,8]) if(()><x><y/></x></> >> <x><y/></x>) { if (( /x/ .__defineSetter__(\"prop\", ({}).hasOwnProperty)).__count__) let __iterator__ = window, __iterator__;} else ");
tryItOut("with(<x><y/></x>){return <y><z/></y>;; }");
tryItOut("");
tryItOut("L:with({prototype: (yield -* instanceof function(q) { return q; })});");
tryItOut("L: return [[]];");
tryItOut("L:do {do __proto__ while((@foo) && 0); } while((getter) && 0);");
tryItOut("L:with({prop: <y><z/></y>})let (__proto__) { export __iterator__; }");
tryItOut("let(({ __proto__: ({ __count__: __proto__ }), prop: ({ constructor: __noSuchMethod__, __iterator__: __count__ }) }), __parent__(<><x><y/></x></>//h\n) = [11,12,13,14].some) { prop = getter;");
tryItOut("gc()");
tryItOut("do {;return *::*;\nexport *;\n } while((( \"\" .throw(undefined -=  /x/ ))) && 0);");
tryItOut("throw <><x><y/></x></>;\n{}\n");
tryItOut("/*infloop*/while(<y><z/></y>){/*infloop*/for(const ({ __iterator__: ({ prototype: ({ __noSuchMethod__: [prop, yield, , __count__, __noSuchMethod__], prop: [] }) }), __proto__: prototype }) = (<><bbbprototype = (return <><x><y/></x></>)  xmlns=\"prop = false\"><ccc:ddd><ccc:ddd><x><y/></x>yyy</ccc:ddd></ccc:ddd></bbb/*></> ? <><employee id=\"1\"><name>Joe</name><age>20</age></employee></> : ((__iterator__).__defineSetter__)()); (( '' .__defineGetter__(\"__iterator__\", (<y><z/></y>).__defineSetter__))(([this * 1.3]))); (-1)) __count__ = -1, __proto__ = ({});/*for..in*/M:for(<\fx><y/></x>.constructor in {}) export *; }");
tryItOut("if((__parent__ = ({ __parent__: prop, __iterator__: [[], __parent__] }) = <{__parent__}>yyy</{__parent__}>)) { if ( /x/g .@*) //h\n{M:with({__count__: (this.__defineSetter__(\"constructor\", function  __parent__ (yield) { return #3={a:#3#} } ))}){yield;export *; } }} else {L:with(<><x><y/></x></> %=  /x/ )\n{@foo;{} }/*for..in*/L:for(__noSuchMethod__ in @foo) {; } }");
tryItOut("{*;yield <x><y/></x>; }");
tryItOut("/*infloop*/for(false *= <x/> >= ({__proto__ getter: (({}).__lookupGetter__).apply,  get prototype(__proto__) { return window .. undefined }  }); Exception([[]] &= <><x><y/></x></, constructor.(<><x><y/></x></> ? #1=[#1#] : (-0))); prototype = ({__iterator__ getter: ((-0)).watch })) {/*for..in*/for(let [prototype, __count__] = undefined in window) {return constructor; } }");
tryItOut("return __iterator__+=__count__.__iterator__ getter= function(q) { return q; };");
tryItOut("(<x><y/></x>)\nreturn ((<x><y/></x>\f).__defineSetter__( /x/ , null)); const __parent__;");
tryItOut("/*infloop*/do const constructor, __noSuchMethod__; while(<x><y/></x>);");
tryItOut("M:switch(([[z1,,]].filter(function (set, prop) { ; } ).__proto__)) { case (prototype = 0/0): M:switch(constructor) { case []: prop, prototype;break;  }break; return;break; break; __parent__ = *::*, __count__ =  '' ; }");
tryItOut("/*for..in*/for(var __iterator__.constructor in (([1,2,3,4].map)(#3={a:#3#})))break ;");
tryItOut("{with((((<x/>\r).watch).call([,,], ))){export __iterator__;throw prop; } }");
tryItOut("prop = __iterator__;");
tryItOut("export __noSuchMethod__;");
tryItOut("while(((-__iterator__ = __count__)) && 0)switch((__iterator__ = <><x><y/></x></>)) { null = ({a1:1}) *= [z1,,] }");
tryItOut("yield @foo;\n\n");
tryItOut("[[1]]\n\n/*infloop*/for(let __proto__; @foo; this) {throw window;export *; }\n");
tryItOut("if((new RangeError())) {L:if(((uneval((4. - [z1,,][ /x/g .throw(@foo)]))))) { if (\n(({__parent__: 1e+81 }))) throw  '' ; else {export __parent__; }} } else {gc()do return  /x/ ; while((<x><y/></x>) && 0); }");
tryItOut("/*infloop*/for(let __iterator__; prototype.(*::*); this += true) with({__parent__: ((gc).call(<><x><y/></x></>, null))}){const constructor = <><x><y/></x></>;export *; }");
tryItOut("{[1]; }if([()].sort(gc)) { if (<bbb xmlns:ccc=\"true\"><ccc:eee></ccc:eee></bbb>) export *;} else yield;");
tryItOut("if(1e4) return __parent__; else  if (<x><y/></x>) {throw 0/0;return; } else {window; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(<><><ccc:ddd> </ccc:ddd></></>) { if ((#0=<y><z/></y>.eval(<x><y/></x> :: *)\f % new true(1e-81, <x/>)(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>))) {M:while((gc()) && 0)(function (__iterator__, __proto__) { yield <x><y/></x> } ).apply }} else /*infloop*/for(const prototype; ([__parent__].filter((0).__defineSetter__)); this.__defineSetter__(\"__count__\", ({}).__lookupGetter__)) {gc()//h\nexport __iterator__; }");
tryItOut("/*infloop*/do {const __count__, prop = <><x><y/></x></>;return; } while((yield (/a/gi)()));");
tryItOut("if(+({constructor: <x><y/></x>.valueOf(\"number\") })) { if ([({})].filter(( \"\" ).__defineSetter__)) export __parent__;} else L:with(<y><z/></y>){function  prop () { return 0.1 } export *; }");
tryItOut("if((__noSuchMethod__.((__count__ = true)))) { if ([11,12,13,14].some) {while(( '' ) && 0){var __proto__; }; }} else {var ({ __iterator__: __count__, __count__: __parent__ }) = ( '' .__lookupGetter__(\"__proto__\")); }");
tryItOut("export *");
tryItOut("return (__noSuchMethod__).__defineSetter__(\"__proto__\", [1,2,3,4].slice);");
tryItOut("if(\n<x><y/></x>) { if (undefined >= <x/>.unwatch(\"prototype\")) {let constructor, constructor = <x><y/></x>; } else while((<x/>) && 0){; }}");
tryItOut("let ([({ __count__: __iterator__.__proto__, function::__iterator__: ({ __proto__: ({ __proto__: prototype }) }) }), , ({ prototype: prototype, __iterator__: each }), ({ __noSuchMethod__: \f({ function:: '' : ({ __iterator__: constructor, prop: setter }) }) }), prop] = this.__defineSetter__(\"prototype\", @foo, <x/>)) { const __proto__, __proto__; } const __iterator__;");
tryItOut("L: prop;");
tryItOut("/*infloop*/for(const [({ __parent__: ({ prototype: __proto__, __noSuchMethod__: constructor }), __iterator__: ({ __count__: __iterator__, __parent__: __parent__ }) })] = ((({constructor: (/a/gi).call(false, __parent__) })) && prop = [1,,]); *.throw(__count__ = ({__iterator__: window})); (yield prototype = <x><y/></x>)) {yield (eval(\"gc()\", new (window)(#1#, @foo)));L: prototype = this, __noSuchMethod__ = this; }");
tryItOut("export *;");
tryItOut("with({__iterator__:  '' .__lookupGetter__(\"function::__parent__\")}){/*infloop*/for(let [__proto__, __noSuchMethod__, __noSuchMethod__, , constructor] =  /x/g  /= #1#; (#3={a:#3#} for (__parent__ in 1.3)); this.zzz.zzz) {return window; } }");
tryItOut("M:if(constructor.__parent__) { if ((<x><y/></x>)[<x/>]) {function  prop (__noSuchMethod__) { yield __count__; } return; }} else {;{} }");
tryItOut("L:if(prop.__iterator__ setter= (__noSuchMethod__).watch) export *; else  if ((false.__noSuchMethod__ = <y><z/></y>.prototype)) {{}var constructor = <><x><y/></x></>, __noSuchMethod__; }");
tryItOut("throw StopIteration;");
tryItOut("\n/*infloop*/while(*::*)export prop;");
tryItOut("return #3={a:#3#}\n");
tryItOut("/*infloop*/L:for(; (const prop, __count__ = __proto__); (<x><y/></x>.(<><x><y/></x></>))) return <x><y/></x>;");
tryItOut("/*infloop*/M:do {var __iterator__ = [1,,], __parent__ = ({}); } while((__noSuchMethod__ = (prop)));");
