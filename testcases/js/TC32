
tryItOut("if((({constructor: function(y) { yield y; return;; yield y; }, __noSuchMethod__ setter: <x><y/></x> })) - new 0.1(((1 for (x in []))).apply) || ({__proto__: this })) {/*for..in*/L:for(__proto__ in <x><y/></x>) {{continue ;(<x><y/></x>); } } } else  if (constructor.__parent__ setter= ({__parent__:  '' })) gc() else {/*infloop*/for(prototype = window;  '' ; undefined) yield #3={a:#3#};; }");
tryItOut("{/*infloop*/for((yield __count__); __count__ + this.__defineSetter__(\"__count__\", (<x/>).__defineSetter__); RangeError([[]]).prop) (prop)(<x><y/></x>) = __iterator__; }");
tryItOut("/*infloop*/for(var [__parent__] = (eval(\"\\n\", <x><y/></x>)); ({ set prop __count__ () { export prop; }  }); (undefined(<x><y/></x>).__defineSetter__(\"prototype\", [1,2,3,4].slice))) with(__noSuchMethod__ = prototype)let __parent__ = __count__;");
tryItOut("M:if(<x><y/></x>) { if (1e81)  else {({}).hasOwnPropertylet constructor; }}while((let (__parent__) 1e81) && 0){(window); }");
tryItOut("/*for..in*/for(prototype in ((Math.pow)(({__proto__: ((uneval(window))).prop.eval([1,,].@foo) })))){return\nthrow ((<x><y/></x>)[__count__] for each (prop in undefined) for (__iterator__ in yield;)); }");
tryItOut("L:with( /* Comment */<x><y/></x>.__noSuchMethod__){[1,2,3,4].sliceprototype const setter; }");
tryItOut("/*infloop*/M:do if(__proto__.yoyo( /x/ )) {<><x><y/></x></>;yield; } else  if ([15,16,17,18].sort(Math.sin, 3)) let constructor = *::*; while((this.zzz.zzz).*);");
tryItOut("{prototype = __proto__;if(\f!0/0) break ; }");
tryItOut("{/*}\n");
tryItOut("/*for..in*/for([__iterator__, prop] = __parent__ = undefined in this) (new Function(\"var prop = #3={a:#3#};\"))");
tryItOut("/*for..in*/for(let __proto__ in  /x/ ) {\n }");
tryItOut("M:while((( /x/ )(1e-81, (-1))) && 0){yield  /x/ ;__proto__; }");
tryItOut("L:with({__count__:  '' .yoyo(<x><y/></x>) < __noSuchMethod__ = true}){}yield this;");
tryItOut("if((eval(\"constructor\",  '' ))) {gc() } else  if ((<x><y/></x>.*)) {throw  /x/ ; } else __proto__ = {};");
tryItOut("{const set = this; }");
tryItOut("for(let y in [5,6,7,8]) function::__noSuchMethod__ = __count__;");
tryItOut("M:do { } while(([,,z1].__noSuchMethod__//h\n = undefined @ [<><x><y/></x></> for (__parent__ in <x/>)].valueOf(\"number\")) && 0);");
tryItOut("/*infloop*/for((#2=[({a1:1})]); (function ([y]) { })()().*; <xxx {prop}={[z1]} />) return;");
tryItOut("{if(window) ; else  if (constructor.__iterator__ setter= 'haha'.split) function(y) { yield y; return <x><y/></x>;; yield y; } else break M;/*for..in*/prototype }");
tryItOut("/*for..in*/for(const (function::__proto__) in <><x><y/></x></>) {export constructor; }");
tryItOut("if(__parent__--) /*for..in*/for(let [prop, __proto__] = -1 in <><x><y/></x></>) {; }");
tryItOut(";\nreturn;\n");
tryItOut("{{}let constructor =  '' ; const __iterator__; }");
tryItOut("/*for..in*/for(__iterator__ = @foo , break L; in <x/>) {let prop, prop;{} }");
tryItOut("with({}) __count__ = constructor;");
tryItOut("while(( /x/g ) && 0)<x><y/></x>;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((1 for (x in [])))(<><x><y/></x></>.__noSuchMethod__[*::*] |= undefined)))export let\n");
tryItOut("/*for..in*/for(var (window | <x/>).({}).hasOwnProperty = -1(@foo, <x><y/></x>) in <>return;</>) {}");
tryItOut("M:if(*::*) return <x/>; else {; }");
tryItOut("const __proto__ = ({a2:z2});({}).__lookupGetter__");
tryItOut("with((*::*[prop] == {} == <x><y/></x>))(<x><y/></x>);");
tryItOut("let (__parent__ = ([1,2,3,4].map)(__proto__)) { return <y><z/></y>\n }");
tryItOut("L: yield;");
tryItOut("throw StopIteration;");
tryItOut("with(undefined)var __noSuchMethod__;");
tryItOut("/*infloop*/while((uneval(<><x><y/></x></> ? null : <><x><y/></x></>)))break M;");
tryItOut("if((prototype ? <y><z/></y> : 1e-81.valueOf(\"number\"))) {; } else  if ((new (\f<y><z/></y>)/*\n*/(<x><y/\t></x>\t)) |= [(__noSuchMethod__ = this)]) L: {break ;return; } else yield;");
tryItOut("/*for..in*/for(var this in prop / <x/>.__defineSetter__(\"__iterator__.prototype\",  '' )) {;return; }");
tryItOut("if((__proto__ = eval(\"gc()\", [1,,]) != yield window)) { if ((uneval(window))) yield; else L:with({constructor: <x><y/></x>});}");
tryItOut("/*infloop*/M:while(<x><y/></x>.__lookupSetter__(\"prototype\"))L: {if(<x><y/></x>) export __count__; else {let __parent__; }return; }");
tryItOut("/*for..in*/L:for(__count__ = [ \"\" ].sort(eval) in Error( /x/ )) constructor = <x><y/></x>;");
tryItOut("{do {var __noSuchMethod__;__parent__; } while((@foo.__defineGetter__(\"prop\", function(q) { return q; })) && 0); }\n<x/>.__lookupSetter__(\"x::constructor\")");
tryItOut("with({constructor:  \"\"  & <x><\ty/></x>\n})return;");
tryItOut("if(<><x><y/></x></>) return;");
tryItOut("L:while((try { gc() } catch(__noSuchMethod__) { return; }  = (#1=({__parent__: #1#}) for each (yield in 0.1 for each (__proto__ in  /x/g )))) && 0){with(\rtrue){<x><y/></x>export *; }L:with(prop = 0/0){ } }");
tryItOut("yield;");
tryItOut("/*for..in*/for(const ({  { yield 3/0 } : __proto__, constructor: __noSuchMethod__ }) in ((function  prototype (({ __iterator__: __noSuchMethod__, __parent__: __proto__ })) { yield +this } )(__iterator__ instanceof *::* &= true))){return <><x><y/></x></>;export __proto__; }");
tryItOut("/*for..in*/for(let window.__iterator__ in ((function  prototype ()<x><y/></x>)(function  constructor () { return this } (1e4)))){; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var prototype in ! \"\" ) {throw StopIteration; }");
tryItOut("/*infloop*/L:do constructor while(<><x><y/></x></>);");
tryItOut("yield; const constructor;");
tryItOut("/*infloop*/for(var ({ __parent__: ({ __parent__: ({ prototype: function::__parent__, prop: __proto__ }) }) }) = this; [,,z1]; ( /x/g () >>>=constructor)) const __noSuchMethod__, constructor;");
tryItOut("let (__parent__ = (undefined <= *::*), __parent__) { <y><z/></y>;return; }");
tryItOut("return;");
tryItOut("return;");
tryItOut("do { /x/ ;let prop = <y><z/></y>; } while((( /x/ ++)) && 0);");
tryItOut("/*for..in*/for([__proto__, prop] = prototype.__lookupSetter__(\"__proto__\") in [(({ __parent__: __proto__ }) = <x><y/></x>.([[]])) for each (__proto__ in ({a1:1})) for each (prototype in )]) /*for..in*/for(prototype = \fnew (Math.pow).apply() in <><x><y/></x></>) <x><y/></x>");
tryItOut("let (__iterator__, __parent__ = *) { yield #3={a:#3#}; }");
tryItOut("try { this.zzz.zzz; } finally { throw StopIteration; } ");
tryItOut("let (__noSuchMethod__ = ({ get __iterator__ __noSuchMethod__ (__noSuchMethod__) { yield constructor } , prop: ([<x/>].sort(<x/>)) }), constructor = ([__noSuchMethod__] = gc(window, *::*\t))) { ({ <x><y/></x>: [] }) }");
tryItOut("/*for..in*/for(constructor in (@foo <<= __iterator__)) let window.__parent__ = [*\n].some([1,2,3,4].map);");
tryItOut("if(typeof new Boolean([z1])) { if (window |= 1e-81.__iterator__) {((-1));__proto__ = null; }} else {; }");
tryItOut("export *");
tryItOut("with({prop: null}){const constructor, __noSuchMethod__ = 033; }");
tryItOut("/*infloop*/M:while(Function(window, __proto__ = __iterator__)){try { return; } finally { throw StopIteration; } export *; }");
tryItOut("/*infloop*/do if([<x/>]) { if (this.zzz.zzz) {return; }} else break L; while(((__parent__ = __iterator__).@foo));");
tryItOut("switch(eval(\"@foo\", false)) { case 0: break; case 4: export *;break;  }");
tryItOut("let (prop) { {} }");
tryItOut("/*infloop*/while([,,])M:if(<><x><y/></x></>) { if (window) {export __parent__; } else break L;}\n\nthrow ((true)[1e+81]);");
tryItOut("const constructor\n{{} }");
tryItOut("with({__noSuchMethod__: * = Exception(<><x><y/></x></>, <x><y/></x>).@*}){var __noSuchMethod__ = <x/>; }\nlet (__noSuchMethod__ = 0, prop = __noSuchMethod__) { true }\n");
tryItOut("{;do constructor = 0/0, getter = undefined while(( /x/g ) && 0); }");
tryItOut("if((undefined.isPrototypeOf\r(window) / ((yield -1)))) { if (new ({ get prop __count__ () ''  })(this.__defineGetter__(\"__parent__\", Math.sin), __count__)) {export *; }} else {(<><x><y/></x></>); }");
tryItOut("export *\n");
tryItOut("if((uneval(#1=[window]\f))) /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in <x/>) {export *; } else {/*infloop*/do 'haha'.split while((uneval(arguments))); }");
tryItOut("return 1e-81;");
tryItOut("with((function(id) { return id }).call(true, <><x><y/></x></>, <x/>))export __count__;");
tryItOut("return <><x><y/></x></> != <x><y/></x>;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(const constructor in [1]) {yield <x><y/></x>;throw null; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (true)((\n \"\" )) in  /* Comment */*::*) export constructor;");
tryItOut("");
tryItOut("L: {}");
tryItOut("throw StopIteration;");
tryItOut("while((new ([1,2,3,4].map)(@foo)) && 0)return (-1);");
tryItOut("with((*::*.yoyo([,])))export *;");
tryItOut("if((prototype.isPrototypeOf(({constructor:  /x/g  })))) { if (~__proto__) {export *;return <><x><y/></x></>; }} else if(<x/>) { if (__proto__) {<y><z/></y>; } else export __proto__;}");
tryItOut("for(let y in [5,6,7,8]) [<><x><y/></x></> for each (prototype in window)];");
tryItOut("/*infloop*/for(const ({ __count__: ({ __noSuchMethod__: __proto__, __proto__: getter }), __iterator__: each }) = (function  __parent__ (__proto__) { yield null; } ); 033 - <x/>; (false.prop.@*)) return [1,,];");
tryItOut("/*for..in*/for(const [constructor, ] = (p={}, (p.z = <x><y/></x> .. [z1,,])()) in (this\n)) {/*for..in*/for(var __noSuchMethod__ in <><zzz><><x><y/></x></></ let __proto__ = null, prototype = <x><y/></x>;></>) return this; }");
tryItOut("with(this.__defineGetter__(\"prop\", (__count__).watch))__noSuchMethod__");
tryItOut("let(__proto__ = new (window)((eval(\"throw  /x/ ;\", <x><y/></x>)), null), ({ constructor: ({ prop: __noSuchMethod__ }), constructor: [, , ] }) = ({ __noSuchMethod__: [__iterator__, , prototype, ], __proto__: ({ __count__: prop, __proto__: __iterator__ }) }) = new <x><y/></x>(<x><y/></x>, *)) ((function(){let(constructor = eval(\"<x><y/></x>;\", constructor.(__noSuchMethod__ = window)), __count__) { this.zzz.zzz;})());");
tryItOut("if( /x/ .prop)  else {yield <x><y/></x>; }");
tryItOut("let(__noSuchMethod__) { with({}) function::prop = prop;");
tryItOut("gc()");
tryItOut("if(eval(\"gc()\", <><x><y/></x></>) * ) { if (1e-81) {} else /*infloop*/for(--eval(\"var constructor = <x/>, prop = @foo;\", <x><y/></x>); 'fafafa'.replace(/a/g, function (constructor, __noSuchMethod__)(<x/>\n)); ((<x/>.__lookupGetter__(\"__iterator__\")).__defineSetter__(\"delete\", prototype))) {let constructor = <x><y/></x>, __parent__; }}");
tryItOut("/*infloop*/for(const ({ prototype: <x><y/></x>, prototype: ({ __parent__: __parent__, __iterator__: function::__parent__, __count__ }) }) = prop.(([1,2,3,4].slice).call(0x99, <y><z/></y>, window)); ((__parent__ = null) for each (constructor in null.prop)); Number(Boolean())) {return; }\nexport __count__;\n");
tryItOut("/*for..in*/for([__count__, __proto__] = ( \"\" .watch(\"__iterator__\", (window).__defineSetter__)) in <y><z/></y>) continue \nexport __count__;");
tryItOut("export __noSuchMethod__\n");
tryItOut("/*for..in*/L:for(var (prototype) in ([(function ([y]) { })() if (prototype)])) {;prototype }");
tryItOut("/*for..in*/M:for([__noSuchMethod__, __proto__] = false in ) ");
tryItOut("M:if(<><bbb xmlns:ccc=\"<x><y/></x>.throw(this)\"><ccc:eee>\f</ccc:eee></bbb></>) {if([1]) ; else  if (window) {return;const __noSuchMethod__, __noSuchMethod__ = *; } else {{} }break ; } else  if ((this.zzz.zzz)) {yield\ncontinue\t M; }");
tryItOut("gc()\nreturn;\n");
tryItOut("{export constructor;do {export *;export prototype; } while((new ({}).__lookupGetter__()) && 0); }");
tryItOut("/*for..in*/for(let constructor.prop in (('haha'.split)((yield true))))if((*::*.unwatch\"__iterator__\").__defineGetter__(\"__count__\", (0x99).call))) { if (__iterator__ = this) yield 3;} else {export prototype;export *; }");
tryItOut("let __iterator__, constructor;");
tryItOut("{var __proto__ = <><x><y/></x></>, __noSuchMethod__ = .2;continue L; }");
tryItOut("do {export constructor\n/*for..in*/for([__iterator__, \f__proto__] =  in [[1]]) {continue L;return  \"\" ; } } while((<><{__noSuchMethod__}>yyy</{__noSuchMethod__}></>) && 0);");
tryItOut("if(#2=(/*\n*/{__count__: -1})) do {return [1,,];continue ; } while((delete *) && 0); else  if ( \"\"  .@x:: true - null) {let constructor; } else {{} }");
tryItOut("with({__proto__: <x><y/></x>}){const __parent__ = 4., __proto__; }");
tryItOut("export *;/*for..in*/M:for(var __noSuchMethod__ = (!this)() in constructor.__iterator__\f) /*infloop*/L:for(const  constructor __iterator__; <y><z/></y>; function(id) { return id }) { }");
tryItOut("this.zzz.zzz;");
tryItOut("if((<x><y/></x>.prototype = 0/0) for each (prototype in <y><z/></y>) for each (__noSuchMethod__ in *::*)) { if (__parent__) break ; else return;}");
tryItOut("{{continue M;__proto__; }\nyield  /x/ ; }");
tryItOut("switch(([11,12,13,14].sort)) { default: case 4: break; /*infloop*/do {} while(false);break; case 3: {x::__noSuchMethod__ = 1e81{} }return __count__;break;  }");
tryItOut("{} const __count__\n");
tryItOut("L:if(let (__parent__ = (eval(\"__iterator__, __iterator__;\", 3/0))) false--) export prototype; else  if ((<x/>.__defineSetter__(\"__noSuchMethod__\", (*::*).__defineSetter__)).__parent__) {let __parent__; const __count__;window; }");
tryItOut("(true); const __parent__;");
tryItOut("gc()\n/*for..in*/for(var __noSuchMethod__ in true) gc()\n");
tryItOut("for(let y in [5,6,7,8]) ([1,,])(false) = __parent__;");
tryItOut("/*infloop*/while(/*\n*/new (__parent__ = \f<x><y/></x>)((constructor-=<x><y/></x>), [[]]))var __proto__ =  \"\" , prototype = <x><\ry/></x>;");
tryItOut("with(<x/>){; }");
tryItOut("/*infloop*/for(false(*::*, [z1,,]); undefined.valueOf(\"number\"); delete __noSuchMethod__) {(false);; }");
tryItOut("L: /*infloop*/for(<><x><y/><\f/x></>; <x><y/></x>; <x/>) { }");
tryItOut("/*infloop*/for(arguments; (function ([y]) { })()(prop, function(id) { return id }); (__parent__ = <x/>++[__iterator__.__proto__ getter= function(q) { return q; }.yoyo()])) export *;");
tryItOut("let (__proto__, __iterator__) { var prop; }");
tryItOut("M:if((__count__ = [({ __noSuchMethod__: prop }), constructor] = ((p={}, (p.z = -1)()).yoyo(Function(<x><y/></x>,  /x/ ))))) {let (__proto__ = <x><y/></x>, __noSuchMethod__ = <><x><y/></x></>) { export __parent__; }gc() }");
tryItOut("/*infloop*/for(const let; @foo; (<x/>.watch(\"__iterator__\", eval))) {({}).__lookupGetter__ }");
tryItOut("/*infloop*/for(const __count__; __iterator__ = <x/>.__proto__;  /x/g ) (__noSuchMethod__);");
tryItOut("{yield prop; }");
tryItOut("L: return;");
tryItOut("L: {throw this;continue M; }");
tryItOut("prototype = __parent__;");
tryItOut("{const __proto__; }");
tryItOut("for(let y in []);");
tryItOut("let (prop = __parent__++) { ; }");
tryItOut("with({prop: <x/>.valueOf(\"number\").__lookupSetter__(\"__count__\")}){for(let y in [5,6,7,8]) return; }");
tryItOut("let __proto__, prop");
tryItOut("/*for..in*/<xxx>{__iterator__}</xxx>");
tryItOut("/*for..in*/for(({ x::prop: [, , prototype, __proto__, ], __noSuchMethod__: ({ __count__: prototype }) }) in (([1,2,3,4].slice)(({constructor: __count__ }))))switch(__count__) { case 9: break; const __iterator__, __iterator__ = <x><y/></x>;break;  }");
tryItOut("if([,,z1]) {([z1,,]); } else {throw <>__proto__</>;return; }");
tryItOut("with({}) { export *; } ");
tryItOut("if([11,12,13,14].map.unwatch(\"__proto__\")) { if ((new true(this))) return \n<x><y/></x>; else {if(window) return [[1]]; else var prototype; }}");
tryItOut("switch(true) }");
tryItOut("new (function(q) { return q; })(null)})export prop;");
tryItOut("yield; const __noSuchMethod__\nreturn;");
tryItOut("/*for..in*/for(function::__count__(this.__defineGetter__(\"__count__\", function  prototype (prop, __parent__)<x/*\n*/><y/></x>)) in -~ /* Comment */((__iterator__).watch)((-1), <><x><y/></x></>) ?  /x/g  : (__noSuchMethod__ = <x><y/></x>)) {switch(null) { default:  } }");
tryItOut("/*for..in*/for([__iterator__, constructor] = x::__noSuchMethod__ = constructor in __noSuchMethod__) {throw @foo; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(var __count__.__iterator__ in (([1,2,3,4].slice)((,)))){__noSuchMethod__ = __noSuchMethod__;with({__count__: window; = (-1)})break L; }\nL:\nif(__parent__ = (function ([y]) { })() + /a/gi(0/0, -0)) throw window; else  if ( /* Comment */(__parent__ .@*:: *)) {export __iterator__;export *; }");
tryItOut("M:with(<y><z/></y>)function::__parent__, prototype = <><x><y/></x></>;");
tryItOut("{M:do {( \"\" ).__defineSetter__{} } while(([z1,,]) && 0);\twith({__parent__: [z1].__parent__ = <x><y/></x>}){<x><y/></x>; } }");
tryItOut("/*for..in*/for([__proto__, prop] = this.isPrototypeOf(({a1:1})) in window) {var get, prop = __iterator__;throw __proto__; }");
tryItOut("if(<x><y/></x> /= null) throw (function ([y]) { })(); else  if (0) null; else gc()");
tryItOut("if(prop) return  '' ; else {((@foo).watch).throw((-0))yield; }");
tryItOut("\tL:if(<x><y/></x>) { if ( '' ) yield; else export each;}");
tryItOut("if([,] += true) { if (constructor) {yield  /x/ ; }} else return;");
tryItOut("__count__ = prop;");
tryItOut("if(([,,z1].__parent__ getter= [,,z1])) { if (true ? <x><y/></x> : <x><y/></x>) __proto__ = <><x><y/></x></>; else do {<><x><y/></x></>;[1,2,3,4].map } while((<><x><y/></x></>) && 0);}");
tryItOut("L:if(true) gc() else  if ((-1).__count__) {; } else {yield 3.141592653589793;return; }\n");
tryItOut("(<><x><y/></x></>);");
tryItOut("/*for..in*/\tfor(prop in (((__proto__ for each (__count__ in (-1))))(this.__defineGetter__(\"__count__\",  /x/ ))))return;");
tryItOut("return;");
tryItOut("/*infloop*/L:for(const constructor = this; ([11,12,13,14].filter); (#1#.propertyIsEnumerable(\"prototype\").watch(\"__proto__\", Math.pow) for (prototype in <x/>) for (__count__ in  '' ).hasOwnProperty\f(\"prop\"))) {if(*::*) return; else throw <><x><y/></x></>;\f }");
tryItOut("L: /*infloop*/for(__proto__ = __proto__; []; *::*) {return;__noSuchMethod__ = undefined; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in <><x><y/></x></>) var __count__ = <x/>, __count__ = true;");
tryItOut("/*for..in*/M:for(let __iterator__ in ((function  __iterator__ (__proto__) { return ([(<y><z/></y>)[[]] for each (__parent__ in <x/>) if (<x><y/></x>)]) } )((yield (({__noSuchMethod__: (function(q) { return q; })(<x><y/></x>, #1#), prop setter: function (prototype) { yield  \"\" ; }  }))) === (__noSuchMethod__ = (<><x><y/></x><\f/>.isPrototypeOf(<><x><y/></x></>))))))/*for..in*/for(constructor = (undefined.isPrototypeOf((gc).call( \"\" , <x><y/></x>, *::*))) in  \"\" ) {__noSuchMethod__;export __noSuchMethod__; }");
tryItOut("/*infloop*/for(((<x><y/></x> << false)); (constructor = __count__ == __proto__); (__proto__ = <><x><y/></x></>)) {yield prototype.(undefined); }");
tryItOut("{do {{}const __proto__ = 1.3; } while((__parent__) && 0);/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in (-0)) {return 0;return [,,]; } }");
tryItOut("let (prototype) { yield; }");
tryItOut("let (prototype, __noSuchMethod__) { if((<x><y/></x>)) return this; else  if (*::*) return undefined; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const __count__ = __count__ = <x><y/></x> if (window) in ((function ([y]) { })() << [z1])(__iterator__.function::__proto__,  '' )) /*infloop*/for(var [__count__, ({ prop: prop, prop: __noSuchMethod__ }), *::*, , ] = <><zzz><y><z/></y></zzz></>; (__count__.propertyIsEnumerable(\"prop\")) >>> (__noSuchMethod__ >= case [11,12,13,14].map: throw <><x><y/></x></>;default: break; yield;); <><xxx {__parent__}={true} /></>) {yield window;return; }");
tryItOut("/*infloop*/for(let get; yield this; (({__proto__ getter: function  __noSuchMethod__ (__proto__, prototype) { yield <y><z/></y> } , __proto__ setter: [,] })) |= \nprop) {yield <x/>; }");
tryItOut("/*for..in*/for(const  <x><y/></x>.throw(<x/>.hasOwnProperty(\"prop\"))__proto__ in ((function (__iterator__) { /*infloop*/for(<y><z/></y>; *::*; <x><y/></x>) ; } )((\nnew Function(<x><y/></x>, ({})).__lookupSetter__(\"__iterator__\"))))if((p={}, (p.z = prop)())) yield\nif(__iterator__.prop =  /x/  & __count__) {L: return; } else  if (new (((false for each (__parent__ in *))))()) {\rreturn;export constructor; } else {;return; }");
tryItOut("/*infloop*/M:for(let __parent__; <><{prop}> </{prop}></>; ) {gc() }");
tryItOut("with(null)export *;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in (new ((function ([y]) { })())()\n)) {gc()__noSuchMethod__ = window, __count__; }");
tryItOut("if((function ([y]) { })[constructor]) { if (Date()) yield <x/>;} else return;/*for..in*//* nogeckoex bug 349964 */ for  each(const prop.prop in 5.0000000000000000000000) ;");
tryItOut("\flet (__proto__, __parent__ = <><x><y/></x></>) { yield; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ = <x/>.throw(<x><y/></x>) in <x><y/></x>) {yield  /x/g ; }");
tryItOut("let (__proto__ = (0.1 !== ({a2:z2})), __noSuchMethod__ = __parent__ = window.watch(\"__proto__\", ({}).hasOwnProperty)) { throw __parent__; }");
tryItOut("{if((yield * for (__parent__.__count__ in <x/> % *::*))) { if (new prop = <x><y/></x>((__noSuchMethod__.( '' ) for (constructor in <><x><y/></x></>) for (__proto__ in null)))) return @foo;} else export *;gc()if(({ __count__: constructor }) = (new Error())) {gc() } }");
tryItOut("(__iterator__)\n");
tryItOut("switch(constructor = <x><y/></x>) { default:  }");
tryItOut("/*for..in*/for(let prop in <x/>) {<x><y/></x>;export __count__; }");
tryItOut("/*infloop*/M:for(const __parent__; (function  prototype () { yield <y><z/></y> } )(); this.__defineSetter__(\"prop\", function (__noSuchMethod__, __count__) { return  /x/g  } )) {return;M:with(1e4)__iterator__ = <><x><y/></x></>; }");
tryItOut("/*for..in*/for( if (<><{__iterator__}><x><y/></x></{__iterator__}></>.valueOf(\"number\")).prop in ((({}).hasOwnProperty)(__noSuchMethod__ = \fnew ((<y><z/></y>).__defineSetter__)()))){};");
tryItOut("/*infloop*/L:do {function(y) { yield y; var __count__ = null, prototype = <x><\fy/></x>;; yield y; }let prop, __parent__; } while(function ([y]) { }\n);");
tryItOut("if([__parent__].sort(false)) {/*infloop*/for(let ({ constructor: ({ __proto__: prototype, __iterator__: prop }), prop: __proto__ }) = __count__ = (__count__ / <y><z/></y>); ; (<><x><y/></x></>.eval(__proto__.valueOf(\"number\")))) {return;-= } } else  if (__proto__ = constructor) { /x/  }");
tryItOut("/*infloop*/do let (__proto__ =  /x/g , __proto__ = function::__iterator__) { if(window) { if ((-1)) Math.pow} else  } while((eval(\"/*for..in*/L:for(constructor.constructor in (((1 for (x in [])))([15,16,17,18].map(@foo, this)))){export __parent__; }\", [z1,,])) + (new ((prototype+=[,]).__defineSetter__)({ __parent__: constructor, prop: __iterator__ }) ()));");
tryItOut("throw StopIteration;");
tryItOut("__count__ = __proto__;");
tryItOut("let (constructor) { let = undefined, prop; }");
tryItOut("/*infloop*/for(const prop; (yield (__noSuchMethod__)[[,,]]); __count__ >>>=undefined) /*infloop*/do {} while(<><x><y/\f></x></>);");
tryItOut("/*infloop*/for( '' ; __count__ = <xxx>{__iterator__}</xxx> ? prototype : <x><y/></x>.__lookupGetter__(\"__noSuchMethod__\") instanceof *::*.__lookupSetter__(\"constructor\"); (__iterator__ >= (new (<x><y/></x>)(this)).valueOf(\"number\").propertyIsEnumerable(\"__noSuchMethod__\"))) const <x><y/></x> = 3, __parent__;\nfunction(q) { return q; }\n");
tryItOut("yield __parent__;\nexport __iterator__;\n");
tryItOut("/*infloop*/L:for((<x><y/></x>().@*); let (prototype = <y><z/></y>) Array(); [, constructor, , constructor]) __count__;");
tryItOut("/*for..in*/for(let __iterator__.prop in ((function __count__ (prototype) { return this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__) } )(__count__ = <><x><y/></x></>.__defineSetter__(\"__proto__\", (new Function(\"let __proto__ = 1.3;\")))))){yield <x><y/></x>;let(constructor = <><x><y/></x></>--) { for(let y in [5,6,7,8]) return; }");
tryItOut("/*for..in*/M:for(let [__noSuchMethod__, constructor] = [__count__, , __noSuchMethod__, , __noSuchMethod__] = *::*.__parent__ in 1e81.__lookupSetter__(\"prototype\")) {if(__parent__.__proto__ = <x/>) {/*for..in*/for(const __proto__ in *)  { return true }  } else  if ( /x/g .watch(\"prop\", <x/>)) yield; else continue M; }");
