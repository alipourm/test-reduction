tryItOut("with({prop: (@foo--.__iterator__).valueOf(\"number\")}){<x/>;continue L; }");
tryItOut("yield 3.141592653589793 *= <><x><y/></x></>.__noSuchMethod__ = gc();");
tryItOut("/*for..in*/for(var __count__.__iterator__ in ((true)(yield <><x><y/></x></>))){continue ; }");
tryItOut("L:if('fafafa'.replace(/a/g, eval)) /*infloop*/while((@foo)())yield;");
tryItOut("throw StopIteration;");
tryItOut("with({}) { this.zzz.zzz; } ");
tryItOut("constructor = __iterator__;");
tryItOut("let([1,2,3,4].map) { export prototype\n/*infloop*/do export __noSuchMethod__; while(new (function(y) { yield y; yield;; yield y; })(({__proto__: export *;,  set __proto__ constructor (__iterator__, __noSuchMethod__) { return <><x><y/></x></> }  }), this));");
tryItOut("/*infloop*/M:for((prototype)[false]; __count__.__noSuchMethod__ getter= eval; <employee id=\"1\"><name>Joe</name><age>20</age></employee>) return  /x/ ;");
tryItOut("M:if((prototype.(<y><z/></y>))) {throw false; } else  if (__count__ = false) return this;\nM:with({constructor: <employee id=\"1\"><name>Joe</name><age>20</age></employee>.([11,12,13,14].some)}){throw 0x99;<x><y/></x>; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let (({ __count__: ({ __iterator__: __proto__, __parent__: __parent__ }), __count__: ({ __parent__: __proto__, prototype: __parent__ }) }) = {})['__iterator__'] in <>window % this</>) return undefined;");
tryItOut("throw StopIteration\n");
tryItOut("/*for..in*/for(var [__proto__, __proto__] = eval(\"new Math.sin() if (033[<x><y/></x>])\", constructor.__noSuchMethod__ = <x/>.watch(\"function::__count__\", function () { return prop } )) in (<><xxx {__noSuchMethod__}={__iterator__ = <><x><y/\f></x></>} /></>)) { }");
tryItOut("with(([1,2,3,4].map(this) .. <><x><y/></x></> || undefined.@foo))if(__iterator__) {(@foo).apply } else continue M;");
tryItOut("export *\n/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in null) {{}{} }");
tryItOut("{; const __noSuchMethod__;if(@foo) let prop; else {throw <x><y/></x>; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in ) {with(__proto__ + (-1)){return this; } }throw @foo;");
tryItOut(" /x/ ;\nprop = *;\n");
tryItOut("/*infloop*/M:for(var prop; <x><y/></x>.watch(\"__noSuchMethod__\", gc); __iterator__+=this / try { this.zzz.zzz; } finally { yield __noSuchMethod__.(__parent__); } ) {gc() }");
tryItOut("switch(__proto__ = <x/>.yoyo(<><x><y/></x></>)) { case (): throw  /x/ ;break;  }");
tryItOut("{/*infloop*/for(1e4; __iterator__; 3) { } }");
tryItOut("throw (function ([y]) { })(); const __proto__;");
tryItOut("if(3) {[z1];return .2; } else  if (<>eval(\"window.hasOwnProperty(\\\"prop\\\")\", this)</>) new Function else /*infloop*/M:for(let ({ __count__: __noSuchMethod__ }) = (let (prototype) function::__noSuchMethod__); (new (false)());  \"\" .__defineGetter__(\"__iterator__\",  '' )) eval");
tryItOut("L:if('fafafa'.replace(/a/g, (<y><z/></y>).__defineSetter__)) { if (#1# ^= \t__noSuchMethod__) export *; else {var constructor;gc() }}");
tryItOut("{; }");
tryItOut("let (prop = prototype, __noSuchMethod__) { with([z1]){yield <><x><y/></x></>; } }");
tryItOut("with(( \"\" .valueOf(\"number\") /= function(y) { yield y; __iterator__ = *::*, __iterator__;; yield y; }(*::*,  /x/ ))){return *::*;(#3={a:#3#}); }if(({__count__: (<y><z/></y>[<><x><y/></x></>]).__lookupGetter__(\"prototype\"),  set __count__ prop () { var __iterator__ = false, __count__ = 3/0; }  })) {export prototype;export __iterator__; } else {{} }return;");
tryItOut("/*for..in*/M:for(var constructor in @foo ?  \"\"  : constructor) {; }");
tryItOut("{/*for..in*/for(let constructor = null in \f__proto__) /*for..in*/for([constructor\t, __noSuchMethod__] = (undefined)() in yield <y><z/></y>) export *; }");
tryItOut("let (({ __parent__: prop }) = <x/>.watch(\"!\", (-1).__defineSetter__), __count__) { do { /x/ ; } while((3) && 0); }");
tryItOut("if( /x/g  & [15,16,17,18].some((1 for (x in [])), this)) with(<><x><y/></x></>)throw __count__;");
tryItOut("break M;");
tryItOut("switch((__parent__ = __iterator__)) { default: (#1=[#1#]).watch }");
tryItOut("yield <><x><y/></x></>;");
tryItOut("default: if(__proto__ || (prop = <y><z/></y>.hasOwnProperty(\"__count__\"))) {L: {.2 }/*infloop*/for(__noSuchMethod__; __noSuchMethod__ & <x/>; yield) {; } } else  if (prototype = (<>x><y/><x></>.prop)) /*infloop*/for(({ __noSuchMethod__: __count__, __count__: __parent__ }) = [1,2,3,4].slice; ( /x/g .__iterator__); new 'haha'.split()) yield; else ((<><x><y/></x></>)[true] for each ([] in window) for each (constructor in true))['constructor']break; case 4: gc()break; break; ");
tryItOut("L:with({__noSuchMethod__: (({ set prop __iterator__ (__count__)false, prop: false })) /= this.zzz.zzz}\t)yield __noSuchMethod__;");
tryItOut("/*infloop*/do export x::prop; while(3/0.isPrototypeOf( /x/g \f));");
tryItOut("/*for..in*/for(__count__ in ((({get:  /* Comment */0x99}))((({ __iterator__: ({ __count__: prop }), __iterator__: ({ prototype: __noSuchMethod__ }) }) = ( '' [@foo].propertyIsEnumerable(\"prototype\"))) ? ( /* Comment */1e4) : __count__['constructor']))){return;/*infloop*/while(){export __noSuchMethod__; } }");
tryItOut("M:if(let (({ prototype: constructor, __iterator__: __count__ }), prop) __iterator__.@*) M:if(new (function  constructor () { __noSuchMethod__; } )(<y><z/></y>)) { if ((uneval([z1,,]))) {continue L;gc() }} else {yield <x><y/></x>;yield  \"\" ; } else  if ((let (__noSuchMethod__ =  /x/ , __proto__) <x/>).yoyo((__proto__.@*))) return;");
tryItOut("while((<x><y/></x>++) && 0){throw 1.3;{} }");
tryItOut("switch(<x><y/></x> { yield eval(\"yield <x><y/></x>;\", [,,z1])\r }  ) { case 8: break;  }\n\nwith({}) { var __noSuchMethod__ = *::*,  = <><x><y/></x></>; } ");
tryItOut("(1e81);\nprototype;\n");
tryItOut("/*infloop*/while((<><x><y/></x></>)[<x><y/></x>])if(<><x><y/></x></>) break M; else  if (this) {const delete, __proto__ = <y><z/></y>;return; }");
tryItOut("/*infloop*/for(({prop: __iterator__}).unwatch(\"__count__\"); __count__ for (__iterator__.__parent__ in __proto__) for each (prop in  '' ); <>(( \"\"  .. <><x><y/></x></>).watch(\"constructor\", (new Function(\"throw __iterator__;\"))))</>) let (\t__proto__ = false, prop = @foo) { throw  '' ; }");
tryItOut("L: {(<!--yy-->);let (__proto__ = <><x><y/></x></>) { /*for..in*//* nogeckoex bug 349964 */ for  each(let getter in @foo) {false } } }");
tryItOut(" /x/ ");
tryItOut("return true;");
tryItOut("/*infloop*/do /*infloop*/for(__count__; window; false) {{}export *; } while([let (__parent__) <y><z/></y> .@ @foo for (1e81 |= undefined in (prop.__iterator__)) for (export *\n in ((__count__ =  /x/ ) ^ __iterator__-=({})))]);");
tryItOut("/*for..in*/for(__parent__ in ((Math.pow)(__count__ ^ this.__proto__ = prop = __noSuchMethod__)))/*infloop*/for(const __iterator__; (prop[this]) ? __iterator__ -= *::* : (p={}, (p.z =  /x/g )()); Math.sin()) {/continue L;export *;");
tryItOut("L: {/*infloop*/prototype }");
tryItOut("L:do {L: continue L;{; } } while((({__noSuchMethod__: <x><y/></x>.propertyIsEnumerable(\"__parent__\") }).unwatch(\"getter\")) && 0);");
tryItOut("with({__noSuchMethod__: false || <y><z/></y>}){return [z1,,]; }");
tryItOut("{(__proto__)\n\n//h\n{continue ; } }");
tryItOut("/*infloop*/for(.2.*;  '' +=new Boolean(); ((<x><y/></x> ^ (-0))[this.unwatch(\"__parent__\")])) function(q) { return q; } const __iterator__;");
tryItOut("with({__iterator__: 0/0})return;");
tryItOut("/*infloop*/while(window < <x><y/></x>){ }");
tryItOut("continue L;\n/*infloop*/while(true)let __parent__ = <x><y/></x>;\n");
tryItOut("if(<><xxx {constructor}={(new Object()) >>= <x/>} /></>) { if () {yield <y><z/></y>; }} else {L: {return [z1,,];return prop; } }");
tryItOut("");
tryItOut("\f");
tryItOut("/*infloop*/for(let __count__; [z1]; this) return;");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("yield undefined;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((Function)((({constructor: [<y><z/></y>].sort(function  prop () { return <><x><y/></x></>; } )}))))){{} }");
tryItOut("if((<y><z/></y> *= <><x><y/></x></> | <x/>) *= <><{__iterator__}><>[11,12,13,14].sort</><xxx {prototype}={ \"\" } /><ccc:ddd> </ccc:ddd> </{__iterator__}></>) let(__count__ = 0) ((function(){this.zzz.zzz;})()); else const prototype = __parent__;");
tryItOut("if(({ __noSuchMethod__: __noSuchMethod__, prop: [__iterator__, , , , prototype] }) = <><>1e+81</></>\f) { } else {export *; }");
tryItOut("if(x::__noSuchMethod__ =  { const __parent__, __iterator__ = <x><y/></x>; } ) {break ; } else gc()");
tryItOut("if(this.__defineGetter__(\"__count__\", window)) { if ([[]]) continue ;} else ");
tryItOut("/*infloop*/for(Function(); .2; [].__noSuchMethod__\f) {}");
tryItOut("/*for..in*/for(const __count__.prop in (((1 for (x in [])))(#0=({__noSuchMethod__: 1e4}))))throw  /x/ ;");
tryItOut("#3={a:#3#}\n");
tryItOut("/*infloop*/for(const ({ __count__: __parent__, __noSuchMethod__: ; }) = ({a1:1}) << window; 'fafafa'.replace(/a/g, function(y) { yield y; (<y><z/></y>);; yield y; }); ({ __count__: __proto__ }) = __parent__) {}");
tryItOut("if(<><x><y/></x></>.prototype) {L:if(<><x><y/></x></>) <y><z/></y> } else  if (( '' [null] instanceof prototype = undefined(__count__.constructor =  \"\" , __parent__-=__iterator__))) {const prototype, __parent__ =  '' ; }");
tryItOut("return;");
tryItOut("<x/>;");
tryItOut("if(typeof @foo) { if ((yield <x/>).hasOwnProperty(\"__proto__\")) {return *::*; }} else *;");
tryItOut("/*for..in*/for(var [\tconstructor, __count__] = (__proto__ , this) in <x/>) yield <x><y/></x>;");
tryItOut("M:if(constructor = *::*) continue M");
tryItOut("/*for..in*/for(const [prototype, prop] = yield (<x><y/></x>(__proto__, window)) in ((p={}, (p.z = <><x><y/></x></>)())).unwatch(\"__parent__\")) /*infloop*/for(let __iterator__ = 5.0000000000000000000000; window; prototype) ( /x/ );");
tryItOut("with({}) return <x><y/></x>.(false);");
tryItOut("/*infloop*/for(const ({ __count__: [] }) = (yield ({(false)( /x/g ): __iterator__+={}, __count__ setter: gc })); __count__.prop; prototype) /*for..in*/for([__proto__, ((__proto__ :: //h\n<><x><y/></x></> if (({a2:z2}))))] = __proto__ = prop - (<x><y/></x>)[*::*] in ( /x/g  - {})) setter, __noSuchMethod__;");
tryItOut("");
tryItOut("@foo;");
tryItOut("while(( /x/ ) && 0)export __parent__;");
tryItOut("if(( /* Comment */<><x><y/></x></>)) /*infloop*/do {gc(){} } while(prop%=@foo.constructor);");
tryItOut("L:do {yield; } while((<x/>) && 0);");
tryItOut("yield __parent__;\n__noSuchMethod__;\n\n");
tryItOut("return;");
tryItOut("var __iterator__, __noSuchMethod__;<bbb xmlns:ccc=\"*\"><ccc:eee></ccc:eee></bbb>");
tryItOut("M:with(([].__lookupSetter__(\"__proto__\")).@*)\r/*for..in*/for(var prop in 3) yield 3.141592653589793;");
tryItOut("if(new ([] = Function(1e81))()) {{export *;; } }/*for..in*/for([prototype, __count__] = function(q) { return q; }(window, void false) in ()) constructor = ({__iterator__ setter: [[1]] })");
tryItOut("{\nreturn *::* > 1e-81; }");
tryItOut(";");
tryItOut("/*infloop*/for(__parent__; (-1); this.__defineSetter__(\"prototype\", <x><y/></x>)) {{} }");
tryItOut("M:do {/*for..in*/for(let [prop, __iterator__] = constructor.__iterator__ in <y><z/></y>) export __iterator__; } while((((/a/gi(<><x><y/></x></>)) .@ @foo)) && 0);");
tryItOut("export prototype; const constructor;");
tryItOut("return;");
tryItOut("L: break M;");
tryItOut("L:if(([1,2,3,4].slice)(prototype = [, , [, __count__, ({ prototype: ({ __parent__: __iterator__, __parent__: <x><y/></x>, this }), __iterator__: __count__ })]], eval(\"(5.0000000000000000000000)(<x><y/></x>)\", window( /x/ ) ? \tprototype : ( \"\" .__proto__)))) {M:with({prop\r: [<><x><y/></x></\f>]})/*for..in*/for(var __count__ in ((Math.pow)(([window for (prototype in {})])))){ '' ; } } else  if (--constructor =  \"\" ) {let __proto__ = __parent__;/*infloop*/for(prop; 1e-81; 0) {break L; }export *; } else __parent__");
tryItOut("with(! /x/ ){[1,2,3,4].mapdefault: (false);;var let, constructor; }");
tryItOut("L:if(<y><z/></y>) { if (<x><y/></x> ? [,,z1] : __iterator__) continue ; else { }}");
tryItOut("if(let (__parent__, __count__) [__count__] |= (window = let = __iterator__)) {return;(new Function(\"yield 1e4;\")) } else  if ([[]].unwatch(\"__noSuchMethod__\")) return true;");
tryItOut("yield\nlet prop = <x><y/></x>\n");
tryItOut("L:if(this.zzz.zzz) { if ((prop.constructor setter= Math.pow).__lookupGetter__(\"prototype\") + __parent__.__count__ = this.zzz.zzz) {/*for..in*/for(let [__count__, constructor] = <x><y/></x>.valueOf(\"number\") in //h\n<x><y/><///h\nx>) {eval }return __count__; }} else {/*for..in*/for(let __noSuchMethod__ in ((function(q) { return q; })([[z1,,]].\ffilter(/a/gi))))({}).hasOwnProperty }");
tryItOut("gc() const __iterator__");
tryItOut("prototype = Function(undefined[this])if(null) function  __iterator__ () { let __count__, prototype; } ");
tryItOut("M:do {; } while((window) && 0);");
tryItOut("/*for..in*/for(prototype in this) {export *; }");
tryItOut("(((Function)(<x><y/></x>, @foo)))((({ __iterator__: __proto__ }) = Exception())) = __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __noSuchMethod__ in *) export constructor;");
tryItOut("/*for..in*/for([constructor, __iterator__] = function::__proto__ = <><x><y/></x></for(let y in [5,6,7,8]) ( \"\" );> in (yield [1].__defineSetter__(\"prototype\", Function))) var constructor = [,,], constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in <x><y/></x>) export constructor;");
tryItOut("/*infloop*/for(const prototype = (false.__parent__ = #3={a:#3#}); 1.3.prop; ((<><x><y/></x></>)(<><x><y/></x></>, true))) case 6: export __iterator__;default: break; case 2: return null;break; case prototype: case *: export constructor;break; case 6: throw <><x><y/></x></>;/*\n*/");
tryItOut("/*infloop*/for(__parent__ = (__proto__ = [,,]).valueOf(\"number\"); ((* in __noSuchMethod__)(/a/gi .@ (), <x><y/></x><ccc:ddd></ccc:ddd>)); this.zzz.zzz > (new function  prop \t(__parent__)this.__defineGetter__(\"__iterator__\", (new Function(\"yield <><x><y/></x></>;\")))(#3={a:#3#} in 3.141592653589793))) { }");
tryItOut("with({}) throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in (new (gc)(<>new Function()</>))) if(new [1,2,3,4].slice(try { {} } catch(__noSuchMethod__) { export __noSuchMethod__; } )) { if ((\f({ get __parent__ __count__ (prototype)<><x><y/></x></>, *.__defineGetter__(\"__noSuchMethod__\", function () { yield *::* } ): true })) !== ({\t__noSuchMethod__ setter: (<x><y/></x>).watch, __proto__ getter: (1 for (x in [])) })) (this);} else export __noSuchMethod__;");
tryItOut("/*for..in*/for(const default: (null);break; case 7: break;  in ((function () { <x/>; } )(((<x/> << <><x><y/></x></>) <<= *::*))));");
tryItOut("/*infloop*/for(<><x><y/></x></>; prototype = *::*; (prototype = <><x><y/></x/*\n*/></>)) {throw 1e-81;var __noSuchMethod__, __proto__ = @foo; }");
tryItOut(";<x/>;");
tryItOut("try { return delete ({prototype: *::*}); } finally { this.zzz.zzz; } ");
tryItOut("/*infloop*/for(const prototype = this.__defineSetter__(\"__parent__\", /a/gi); (this\t)(*) = ([z1,,] > 1e-81); (__noSuchMethod__.__lookupGetter__(\"__iterator__\"))) break L;");
tryItOut("{([[1]]); }");
tryItOut("if(prototype = *::*) {( /x/g ); } else {if(<x><y/></x>) { if (function(id) { return id }) {; }} else {throw -1;yield; } }do /*for..in*/M:for(const __iterator__ in ((({}).__lookupGetter__)(constructor)))\f{{} } while(((yield ++((prototype)(0.1, <x><y/></x>)))) && 0);");
tryItOut("let (prototype, __count__ = (++({__parent__: constructor = prototype }))) { with({__noSuchMethod__: (__count__.(((yield [1]))))});while((this.__defineGetter__(\"__count__\", ({}).__lookupGetter__)) && 0){export *;return; } }");
tryItOut("let (prototype) { yield let; }\n");
tryItOut("with({}) for(let y in []);");
tryItOut("if(this.propertyIsEnumerable(\"__noSuchMethod__\")) { if () {__iterator__return; } else {gc() }}");
tryItOut("/*infloop*/M:do /*for..in*/for(const constructor in <><x><y/></x></>) export *; while(<bbb xmlns=\"(*.constructor)\"> </bbb>.(this.__defineGetter__(\"__iterator__\", (1 for (x in [])))));");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/for(let ({ __parent__: prototype }) = (((<!--yy-->.([1,,] === <x/>)).__lookupSetter__(\"__iterator__\"))(0.__defineSetter__(\"__noSuchMethod__\", gc), <x><y/></x>.yoyo( /x/g ))); ((null.unwatch(\"__noSuchMethod__\")) &= prop = <x><y/></x>); <><>(this.yoyo(__count__))</></>) {if((this)(window)|= /x/g .__defineGetter__(\"__proto__\", eval)) {\tyield;; } else  if (({ __noSuchMethod__: __noSuchMethod__, prototype: __noSuchMethod__ }) = prototype) let prop = prototype, prototype; else (({}).hasOwnProperty).applyreturn; }");
tryItOut("return @foo.yoyo(true);");
tryItOut("with({}) [, , __iterator__, __noSuchMethod__]");
tryItOut("with({__count__: #1=[#1#]}){continue L;export __count__; }");
tryItOut("with({}) __iterator__.prototype = __noSuchMethod__;");
tryItOut("/*for..in*/for(const <x><y/></x>['constructor'] in ((new Function)(<><x><y/></x></> :: [])))function (prototype)<><x><y/></x></> const prototype;");
tryItOut("return;");
tryItOut("if(@foo) {return;/*for..in*/L:for(var __count__ in prototype) {var constructor = <x><y/></x>; } } else  if ((__iterator__ = <><x><y/></x></>)) {export *;{} } else if(<><x><y/></x></>) { if ( /x/ ) {;let prop; }} else yield;");
tryItOut("with(({ set __count__ __parent__ (__parent__, __parent__) { __count__; }  })){if(<x><y/></x>.valueOf(\"number\")) {var __proto__; }return; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const __proto__ in <bbb xmlns:ccc=\"this\"><ccc:eee></ccc:eee></bbb>) {}");
tryItOut("/*for..in*/for(let [__count__, __noSuchMethod__] = ({/*\n*/__proto__ getter: 'haha'.split, function::__count__: <><x><y/></x></> }) in null) ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in *) ");
tryItOut("{prototype, __iterator__;if(this.__defineGetter__(\"__noSuchMethod__\", new Function)) { if ((this *= <><x><y/></x></>)) {{} } else yield <x/>;} }");
tryItOut("let(prototype = __count__ = ((uneval( '' ))), set = __iterator__ =  \"\" ) ((function(){throw __proto__;})());");
tryItOut("{yield; }");
tryItOut("{/*infloop*/L:for(var <x/>; = <y><z/></y>; <x><y/></x>; <y><z/></y>) export false;const __parent__, __noSuchMethod__ = try { {} } catch(__proto__) { __iterator__; } finally { {} } ;return function ([y]) { }; }");
tryItOut("/*infloop*/\tM:for(({ __count__: ({ __iterator__: ({ __count__: ({ __proto__: prop, __noSuchMethod__: constructor }), prop: [] }), prototype: ({ let: [, constructor, prop, ], setter: ({ constructor: prop }) }) }), prototype: ({ __count__\t: prop }) }) = <><bbb xmlns=\"__proto__.__count__\"><!--yy--></bbb></>; __count__.prototype; try { __proto__ = __iterator__; } finally { let(__count__) ((function(){with({}) { throw StopIteration; } })()); } ) {gc() }");
tryItOut("do return; while((.2) && 0);");
tryItOut(";");
tryItOut("L: /*infloop*/M:while(undefined)continue L;");
tryItOut("switch(prototype >>=  /x/ ) { case <zzz> '' </zzz>.(<x><y/></x>): default: new Function }");
tryItOut("{continue M; } const __count__;");
tryItOut("/*for..in*/for(const ({ getter: __noSuchMethod__ }) in ((prototype//h\n = __count__.(true))((new (__noSuchMethod__+= \"\" )(constructor.((function ([y]) { } for each (prototype in  '' ))),  /x/ [1e-81]))))){yield 0/0;let prop; }");
tryItOut("with(<><x><y/></x></\t>){__noSuchMethod__ }");
tryItOut("if(RangeError(window, 4.)) {return; } else  if (this.__defineSetter__(\"prototype\", eval)) yield; else {return; }");
tryItOut("__proto__ = __count__;");
tryItOut("/*infloop*/for(var __iterator__ = ((<x/> - 1e4 for (__parent__ in  \"\" ) for each (constructor in +undefined) set constructor __count__ ()(*::*.@*) for (__iterator__ in function ([y]) { }) if (<y><z/></y>))); <x><y/></x>.(<y><z/></y>) |= __parent__ = <><x><y/></x></>; (@foo.__count__ = __noSuchMethod__)) with(let ((Iterator(*))) [11,12,13,14].sort){{} }");
tryItOut("/*for..in*/for(__parent__ in ((/a/gi)((<x/>) | <x><y/></x>\n ^= 3.141592653589793))){yield __iterator__ = false; }");
tryItOut("yield; const prototype;");
tryItOut("{throw <x><y/></x>;let (prototype = <x><y/></x>, __iterator__) { const __parent__ = window; }\ngc() }");
tryItOut("throw prototype;");
tryItOut("if(((yield ((<x/>)(null))).__defineSetter__(\"__iterator__\", 'haha'.split))) {;var constructor, prototype = <x/>; } else  if ({while((1e81(<x><y/></x>, <x/>) | 4.) && 0){(1e81); } }) /*for..in*/for(constructor =  /x/g  in  /x/g ) yield; else {(<><x><y/></x></>); }");
tryItOut("/*infloop*/L:for((__noSuchMethod__ = __noSuchMethod__); ; *) var prototype = <x><y/></x>, __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var new <><x><y/></x></>(1.3)['prototype'] in ('fafafa'.replace(/a/g, []))) {/*for..in*/for(const constructor in (((1 for (x in [])))(constructor ^= window))){; } }");
tryItOut("let (__noSuchMethod__, __iterator__) { const __proto__, constructor; }");
tryItOut("if(#1#) {} else  if (this.__defineGetter__(\"constructor\", this.__defineGetter__(\"__iterator__\", Math.pow)))  else {{}return <x/>; }");
tryItOut("with({}) with({}) with({}) let __iterator__ = <></> 0, __parent__;");
tryItOut(";/*infloop*/M:do export *; const __noSuchMethod__; while(({ get __iterator__ __proto__ (constructor)<><x><y/></x></> }));");
tryItOut("do {var __count__; } while((((__count__+=this).__lookupGetter__(\"__parent__\") in [(<y><z/></y>())].map((function(q) { return q; }).apply))) && 0);");
tryItOut("{/*infloop*/for(const let; 1e4 = true; <x/>.*) return this; }");
tryItOut("L:switch('fafafa'.replace(/a/g, (new Function(\"var __proto__;\")))) { default: break;  }");
tryItOut("if([15,16,17,18].filter((1 for (x in [])), [z1,,])) { if (<x><y/></x>) let __noSuchMethod__ = window, prop = prototype; else (<></>);}");
tryItOut("(*)\n");
tryItOut("/*for..in*/for(let \fconstructor in ((({}).__lookupGetter__)(yield (window = *) @ __noSuchMethod__ >= (__count__ = __noSuchMethod__)))){}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in 3.141592653589793) {__parent__this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(((function  x::__noSuchMethod__ (__noSuchMethod__, __parent__)1.3)(1e-81)) in __iterator__) if(<><x><y/></x>\t</> in <><x><y/></x></>) { if (<x/>) continue ; else {export __parent__; get x::__count__ __noSuchMethod__ (prop, __noSuchMethod__) { yield [] }  }}");
tryItOut("{var constructor = [,,z1]; }\nyield;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var <x><y/><\n/x>.__iterator__ in __iterator__) {}");
tryItOut("switch(new (().__defineSetter__)(__noSuchMethod__ ?  /x/  : (<x)><y/><xtry { var constructor; } finally { ; } >)) { case 1: break; case 8: default: break;  }\nreturn (function  constructor () { const constructor = <><x><y/></x></>, __iterator__ = *::*; } ).call( \"\" , true);");
tryItOut("gc()");
tryItOut("let (({ __noSuchMethod__: ({ set: __parent__, prototype: __iterator__ }) }) = new __iterator__.constructor(__parent__ = undefined)) { M:if((null === 4.)) yield; else (__iterator__); }");
tryItOut("M:if(function ([y]) { } ? @foo = [[1]] : (__noSuchMethod__.(this))) {throw <><x><y/></x></>;if(constructor = (__parent__ +=  '' ).*) {gc()(*::*); } else {with(<><x><y/></x></>)return undefined;export prototype; } }");
tryItOut("do {yield [[1]]; } while((\f<x><y/></x>) && 0);");
tryItOut("break /*\n*/;\nwith({__proto__: <><x><y/></x></>(prototype).__iterator__}){yield true;yield <x/>; }\n");
tryItOut("{export __count__; }");
tryItOut("throw ({a1:1})\n");
tryItOut("L:with({__count__: try { ; } catch(prototype) { export prototype; } }){break M; }");
tryItOut("/*infloop*/M:while((undefined-=(__parent__ :: __count__) % <x><y/></x>))L:with(<><x><y/></x></>){}");
tryItOut("do /*infloop*/for(constructor; prop; @foo) {return; } while((new (function(y) { yield y; return;; yield y; })( /x/ , *)) && 0);");
tryItOut("return window;");
tryItOut("return  /x/g ;");
tryItOut("with(let (__proto__) *::*)M:if(#1=__noSuchMethod__) {constructoryield null; } else  if (prototype = <x><y/></x>) export __proto__;");
tryItOut("let() { __noSuchMethod__ = prototype;");
tryItOut("let (__iterator__ = window, __parent__) { let __iterator__; }");
tryItOut("L:\fif(__proto__) { if ((__noSuchMethod__ = <x><y/></x>(<x><y/></\tx>.__lookupGetter__(\"__proto__\"), <x/>))) window; else {}}");
tryItOut("with({prototype: __parent__.__lookupGetter__(\"constructor\")})/*for..in*//* nogeckoex bug 349964 */ for  each( \"\"  in prop) /*for..in*/for([__iterator__, __iterator__] = *::* in -3/0) ");
tryItOut("with({}) let(__count__) ((function(){for(let y in [5,6,7,8]) throw StopIteration;})());");
tryItOut("if(Object()) { if ((-this.__defineGetter__(\"__parent__\", Function))) {*::*;{} }} else {yield <x><y/></x>;export __parent__; }");
tryItOut("/*for..in*/L:for([prop, __noSuchMethod__] = (new <><x><y/></x></>.@foo()).eval(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) in [z1,,](<x/>,  /x/g )) /*for..in*/for(var [prop, __parent__] = <><x><y/></x></> in 1e-81) export __noSuchMethod__;");
tryItOut("/*infloop*/for(({ __iterator__: __noSuchMethod__ }) = __iterator__ < <><x><y/></x></>.unwatch(\"__noSuchMethod__\"); typeof <x/> & constructor.throw(((function ([y]) { })() << (constructor = 3).__noSuchMethod__)); new (function () { return this /= @foo } )((function(q) { return q; })(<><x><y/></x></>, <>case <x><y/></x>: (<><x><y/></x></>);(__parent__).__defineSetter__break; throw <><x><y/></x></>;</>), window >> true)) try { for(let y in []); } finally { with({}) { continue ; }  } ");
tryItOut("/*infloop*/for(({ constructor: ({ function::__proto__: ({ __noSuchMethod__: __parent__.__noSuchMethod__ }), __iterator__: prop }), __noSuchMethod__: ({ __parent__: ({ constructor: __count__, prototype: [({ prop: __count__, __iterator__: constructor }), __noSuchMethod__, , , constructor] }) }) }) = \nnew Exception( /x/g , <><x><y/></x></>).valueOf(\"number\"); @foo &= <x><y/></x>.isPrototypeOf((new Iterator('fafafa'.replace(/\fa/g, function  __count__ (__proto__, prototype) /x/ ), <x/>))); __parent__.constructor) /*for..in*/for(prototype in true) {yield;const __iterator__ = <y><z/></y>, __iterator__; }");
