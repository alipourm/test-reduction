tryItOut("L:do {(({}));gc() } while((prop.(window)) && 0);");
tryItOut("/*for..in*/for([__proto__, __proto__] = new ((<x><y/></x>.throw(new (false)(window, <x><y/></x>))))(this) in ([[0].some('haha'.split) for (constructor in  /x/g ) for (__count__ in <><x><y/></x></>)])) {if(prototype) ({}).hasOwnProperty else  if (<><x><y/></x></>) {export __proto__;throw __noSuchMethod__; }\nlet __noSuchMethod__; }");
tryItOut("/*infloop*/M:\tfor(({ __parent__: ({ __count__: __noSuchMethod__ }) }) = (1.3.eval(@foo)); Function().watch(\"__iterator__\", 'haha'.split); prototype = <y><z/></y>\n[0x99.propertyIsEnumerable(\"constructor\")]) {M:if('fafafa'.replace(/a/g, ({}).hasOwnProperty)) {yield window;export *; } else  if (*) var __noSuchMethod__; else throw null;switch(__proto__.prop = (function(id) { return id })().yoyo(<x><y/></x>)) { default: break; var prototype;case --*: break; gc()case true for (__parent__ in false): break; case 0: break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in prototype) yield\n/*infloop*/for(<x><y/></x>; <y><z/></y>; <x><y/></x>) export *;\n");
tryItOut("with(this){continue L; }");
tryItOut("do var __noSuchMethod__ = __iterator__; while(((Math.pow(([ \"\" \f.prototype].some(Math.sin)), <><x><y/></x></>))) && 0);");
tryItOut("if(<><x><y/></x></>) yield; else  if (*::*) {return <y><z/></y>; }");
tryItOut("return <xxx>{prop}</xxx>;");
tryItOut("");
tryItOut("/*infloop*/M:for((*.@*); __proto__ = false; <x><y/></x>) export *;");
tryItOut("throw (<x><y/></\tx>.@foo);");
tryItOut("M:if([15,16,17,18].some((<><x><y/></x></>.__lookupSetter__(\"constructor\")).__defineSetter__, null[<x><y/></x>])) export __count__;");
tryItOut("L: {gc() }");
tryItOut("{export constructor;return @foo; }");
tryItOut("/*infloop*/L:for(this.__defineSetter__(\"prop\", gc); *::* != <x/>; window) {window }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let (__count__.prototype) in new 1e81 -= <><x><y/></x></>(gc)) return;\nyield *;\n");
tryItOut("/*for..in*/for(const __proto__ in ((function(y) { yield y; export constructor;; yield y; })(window))){export *;yield <\fx><y/></x>; }");
tryItOut("/*for..in*/for(var __proto__ = prop = *::* in prop = <y><z/></y>) {<y><z/></y>;/*infloop*/for(__count__ = __count__; <><x><y/></x></>; constructor) {yield;prop getter: 3 } }");
tryItOut("if(yield undefined.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__)) {}yield;");
tryItOut("{var prototype, __proto__;(<y><z/></y>); }");
tryItOut("yield <><x><y/></x></>; const function::__proto__;");
tryItOut("M:if(++[] = this[<y><z/></y>].prototype.__count__) { if (((({}).hasOwnProperty).call(<><x><y/></x></>, <><x><y/></x></>, <><x><y/></x></>) for each (__parent__ in <x><y/></x>)) ?  ''  : let (constructor =  \"\" , __count__) __parent__) {{let (function::__iterator__ = prop) { yield; }export *; } }} else throw  \"\" ;");
tryItOut("{[[1]];var __count__ = window, __iterator__; }");
tryItOut("if(Object(<x><y\f/></x> ^= __parent__.__iterator__)) {(<x><y/></x>);throw <><x><y/></x></>; }\n");
tryItOut("/*infloop*/for(constructor; ((gc).call( \"\" , __proto__, 0)); [[[]]].sort(function () { ( /x/g ); } )) yield;");
tryItOut(" for each (constructor in <><x><y/></x></>.__lookupGetter__(\"__parent__\") *= eval(\"export __noSuchMethod__;\", @foo))");
tryItOut("{/*infloop*/for(__parent__; prototype; <y><z/></y>) { } }");
tryItOut("switch(__proto__.__count__ setter= 0/0.@*) { case 0: break; default: /*for..in*/for(let prototype in ((undefined)(true))){(p={}, (p.z = window)()) }break;  }");
tryItOut("/*infloop*/for(*; .@*; __count__ = prop; = (* if ((({__noSuchMethod__ getter: ({}).__lookupGetter__, __count__: 0/0 }))))) {try { export *; } catch(prop) { {} } \rfinally { this; } if(this.__defineSetter__(\"__proto__\", ({}).__lookupGetter__)) /*infloop*/while([,])prop }");
tryItOut("L: {export *; __iterator__ }");
tryItOut("/*for..in*/for(__proto__ = ({}) .@ <><x><y/></x></> in 3.141592653589793) {yield;/*infloop*/while(false){{} } }");
tryItOut("/*infloop*/do {if((void function ([y]) { } | (__parent__.__count__ = *::*))) yield; } while([,].__proto__ = (<><x><y/></x></> < <x><y/></x>));");
tryItOut("/*infloop*/for(this.__defineSetter__(\"__count__\", function (__noSuchMethod__, constructor)\n { throw this; } ); Object(<x><y/></x>); (<><x><y/></x></> if ( /x/ ))) prop = __parent__;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("{return  '' ; }");
tryItOut("/*for..in*/for(__parent__ in 0x99 .. window) {{case constructor: ;(<x><y/></x>).applyreturn;case 2: windowcase 4: break; ;<y><z/></y> } }");
tryItOut("/*infloop*/M:for((__count__ ^ window)[this.zzz.zzz] in (*.__proto__ = \n*::*); <bbb xmlns=\"undefined\"><!--yy--></bbb>; 'fafafa'.replace(/a/g, function  __iterator__ (prop) { window; } )) let(__proto__ = (function ([y]) { })(), prop) { constructor;");
tryItOut("L: /*infloop*/for(1.2e3;  \"\" ; <><x><y/></x></>) {prototype = <x/>;1e-81; }/*infloop*/do continue ; while(prop);");
tryItOut("if((__iterator__.__count__ = 3)) { if (({} <<= true.eval(<x><y/></x>))) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in true) {export *; }with({prototype: <y><z/></y>}){__parent__; } } else {{}\f }}");
tryItOut("throw prototype;");
tryItOut("L:do (false); while(((constructor.( /* Comment */this))) && 0);");
tryItOut("/*infloop*/for(var __count__; ; (__proto__-=[z1])) yield {};");
tryItOut("return;");
tryItOut("L:if((function::prototype = [z1,,] = yield false)) {let [z1];\nconst prop = -0, constructor;\n } else  if (<x><y/></x>.unwatch(\"__parent__\")) {try { throw StopIteration; } finally { let(({ __noSuchMethod__: prototype }) = ({ set constructor __parent__ () { arguments; }  })) { let(prop, __count__) ((function(){yield *::*;})()); } /*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in arguments)  } else export constructor;");
tryItOut("L: {; }\n");
tryItOut("/*infloop*/L:for(let __parent__; (<x><y/></x>.eval(<x/>) .@*::  \"\" \n); this.__defineSetter__(\"__proto__\", function (__proto__, __noSuchMethod__) { return 0/0 } )) gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__.prop in ( return <x/>;)) continue ;");
tryItOut("/*for..in*/for(((Math.pow).call(undefined,  '' ))((__noSuchMethod__)[3.141592653589793]) in <y><z/></y>.eval(@foo)) {{} }");
tryItOut("let (__parent__ = this = <><x><y/></x></>, __parent__) { yield <x/>; }");
tryItOut("switch((function ([y]) { })()[undefined]) { default: ; }");
tryItOut("/*infloop*/fortrue; <x><y/></x>; false) {prop = <><x><y/></x></>, constructor; }");
tryItOut("with({__iterator__: *::* :: __proto__})continue ;");
tryItOut("");
tryItOut("if(prototype.(#1=[#1#])) { if (<><x><y/></x></>) continue ;} else {const prototype, __iterator__; }");
tryItOut("with({}) __count__ = __parent__;");
tryItOut("/*infloop*/ continue ");
tryItOut("if(<y><z/></y>.valueOf(\"number\") , (<x><y/></x>).eval(('haha'.split ^ 5.0000000000000000000000))) let __proto__;");
tryItOut("with((this.__defineGetter__(\"prototype\", gc))()){M:if(~undefined.eval(null |= <x><y/></>)) export *; else {var constructor = null, prototype; }/*for..in*/for(constructor = __iterator__ in new (<x/>).__defineSetter__()) {/*for..in*/L:for(this in (([1,2,3,4].map)(arguments || <><x><y/></x></>)))<ccc:ddd><ccc:ddd></ccc:ddd></ccc:ddd/*\n*/>yield; } }");
tryItOut("L:with({__count__:  '' }){export __proto__;(new Function(\"([,,]);\")) }");
tryItOut("/*for..in*/for(let __count__ in ((true)(<x><y/></x>)))export __parent__;");
tryItOut("L:if(__iterator__.@*) { if (3 instanceof <><x><y/></x></>\t) {{}<x/>; }} else ");
tryItOut(";yield;");
tryItOut("/*for..in*/for(var prop in ((Math.pow)(\f#2=<x/>))){/*infloop*/for({}; __iterator__; this) <x><y/></x>; }");
tryItOut("L:if(__iterator__.__parent__ setter= 'haha'.split) { if (((each.eval(<><x><y/></x></>)))()) {export prototype;export *; } else }");
tryItOut("let(__count__ = 'fafafa'.replace(/a/g, <><x><y/></x></>)) ((function(){const __iterator__;})());");
tryItOut("{} const prop;");
tryItOut("break L;");
tryItOut("if(((p={}, (p.z = __iterator__)()))) { if (__count__.([1,2,3,4].slice)) const __proto__ = window; else {yield <><x><y/></x></>;break ; }}");
tryItOut("if((Array())) { if (__iterator__) {continue L;{} } else {}}");
tryItOut("switch(prototype = (eval(\"export *;\", <><x><y/></x></>))) { default: return; }");
tryItOut("{/*for..in*/for(prototype = [z1] in @foo) return <><x><y/></x></>; }");
tryItOut("{{throw  /x/ ; }if(<><x><y\n/></x></>) { if (\t<><x><y/></x></>) {gc(); } else  { @foo; } } }");
tryItOut("if(constructor) {const __noSuchMethod__ = false; } else __count__, __count__ = 1.3;");
tryItOut("yield <y><z/></y>;\nreturn this;\n");
tryItOut("if(([__noSuchMethod__ =  /x/ ])) break ; else  if ((yield this.__defineGetter__(\"x::__parent__\", function (prop, __proto__)({a2:z2})))) throw window;");
tryItOut("/*for..in*/for(let __noSuchMethod__ = window in [[]]) {return;(<><x><y/></x></>); }");
tryItOut("M:if(<x><y/></x> ? @foo :  /x/  + ([true])[__iterator__ = 3.141592653589793.__defineGetter__(\"__count__\", function  __count__ ()prop = 3/0)]) return this.__defineGetter__(\"prop\", ('haha'.split).call).yoyo( /x/g ); else  if (prototype) L: {var __parent__; } else L:if(\n(<y><z/></y>)(<x><y/></x>, @foo)) { if (__noSuchMethod__.__iterator__.eval(#1=({__noSuchMethod__: *::*.__defineGetter__(\"__noSuchMethod__\", function  3/0 (__noSuchMethod__) { {} } )}))) /*infloop*/for(const prototype; <><x><y/></x></>; @foo) prototype} else { /x/g ; '' ; }");
tryItOut("/*infloop*/for((<x><y/></x>.hasOwnProperty(\"__parent__\") ^ __count__ = <><x><y/></x></>)\n; [15,16,17,18].filter(eval, *.__parent__ = <x><y/></x>); ((null ^ prop[(__parent__ = undefined)]).__defineSetter__).call((function (__iterator__, __count__)[1]((p={}, (p.z = {})()),  \"\" )), (new #2=Object(__proto__) if (window)()) ? (let (prototype = 3) [15,16,17,18].some(eval, __parent__) + [(<y><z/></y>)(prop, default: [[1]]break; case 1.3: break ;break; ) if (<><x>\f<y/></x></>)]) : <></>.(Number()), __proto__.constructor = [])) function  function::__count__ (prototype, __count__) { return __count__.constructor = <x><y/></x> } ");
tryItOut("M:with(<x><y/></x>)return; const __count__;");
tryItOut("L:switch(@foo) { case 2:  }");
tryItOut("");
tryItOut("if(<><x><y/></x></>) { if ( /x/g ) yield *;} else ");
tryItOut("/*for..in*/for(prototype = ((__noSuchMethod__)) <= undefined in *::*[<x><y/></x>].propertyIsEnumerable(\"prop\")) {with({prototype: 1e4}){ { yield this }  }/*infloop*/for(const <y><z/></y>; (Math.sin); (prop.watch(\"__parent__\", __count__)))  }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in <><x><y/></x></>) yield *::*;");
tryItOut("with({}) { __parent__ = prototype; } ");
tryItOut("if() {}");
tryItOut("/*infloop*/M:for(__count__; (new Function).call(({ __count__: __iterator__, __proto__: __parent__ }) = __count__ = #3={a:#3#}, ({ set prop(__parent__, [prototype, , prop, __count__, __noSuchMethod__])( \"\" .__defineGetter__(\"__iterator__\", *::*)), __noSuchMethod__: (new (eval(\"true\", [1,,])).__lookupGetter__(\"constructor\")(__iterator__ = __proto__.__iterator__)) })); \neval(\"1.3\",  '' ) >>> __proto__ @ <y><z/></y>) return window; const prototype;");
tryItOut("if('fafafa'.replace(/a/g, function () { export __count__; } )) {let __proto__ = false, __parent__ = <><x><y/></x></>;continue M; } else {{} }\nlet (__noSuchMethod__ = @foo, __proto__ = <y><z/></y>) { ( /x/ ); }");
tryItOut("return *");
tryItOut("/*for..in*/for(<x><y/></x> = __iterator__ = window in \twindow) {return 4.;(<x><y/></x>); }");
tryItOut("if() { if (prototype+=<y><z/></y>['__proto__'] = <x/>) {L:while((__count__) && 0){{}gc() } } else {/*for..in*/for((<x/>['__count__']) in ((gc)((__iterator__.__count__ = <x><y/></x>)))){continue L; }return; }}");
tryItOut("if((function (__iterator__, __parent__) { continue L; } )() - constructor - <y><z/></y>) let (__proto__) <y><z/></y>; else L:while((#1=[#1#].unwatch(\"__parent__\").@foo) && 0){var __count__ = *::*; }");
tryItOut("__iterator__ = <x/>, __parent__;");
tryItOut("return __noSuchMethod__.__lookupSetter__(\"prop\");");
tryItOut("L:if( /* Comment */<x><y/></x>) { if (__iterator__|=arguments) new Function else break ;}");
tryItOut("var prototype;");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/for(let prototype in (((1 for (x in [])))((__parent__ = (({}).__lookupGetter__)()))))undefined;");
tryItOut("{{} }");
tryItOut("L:while(((function  __noSuchMethod__ (prototype, __count__)3/0)) && 0){return <x/>; }");
tryItOut("yield this;");
tryItOut("/*infloop*/do {/*infloop*/L:for(var __proto__; <x><y/></\tx>; ({a2:z2})) {null; } } while((this).__defineSetter__(this, 0.1));");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __proto__ in --#0=[null]) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var <><x><y/></x></>.__count__['constructor'] in (__noSuchMethod__ = @foo.__defineSetter__(\"__count__\", (function  prop (__proto__) { yield 1e-81 } ).apply))) {/*infloop*/M:do let (__noSuchMethod__) { ; } const  { return (this.__defineSetter__(\"__count__\", @foo)) } ; while(prototype.(window) /= yield \f<><x><y/></x></>); } }");
tryItOut("if(this) { if ({}) yield; else {const prototype = <y><z/></y>, __noSuchMethod__; }}");
tryItOut("L: ();");
tryItOut("if([false]) {continue L;{} } else let __count__, __noSuchMethod__ = window;");
tryItOut("let (__count__ =  /x/ ) { return; }");
tryItOut("yield;");
tryItOut("switch((<x><y/></x> = prototype)[new function(y) { yield y; return __count__;; yield y; }().watch(\"__parent__\",  '' )]) { case 5: yield <x/>;case 7: continue M;default:  }");
tryItOut("with({}) ");
tryItOut("yield *::*");
tryItOut("/*infloop*/for(__count__; <x/>; new ((3/0 .@  { return <><x><y/></x></> ^=  /x/g [(* <= ({a1:1}))] } ))()) {return; }");
tryItOut("gc()<y><z/></y>; const __iterator__;");
tryItOut("return prop * __parent__;");
tryItOut("/*infloop*/L:do true;return [z1]; while(((<y><z/></y>)));");
tryItOut("with(__iterator__ % <><x><y/></x></>){export __iterator__; }");
tryItOut("/*for..in*/for(const __proto__ = prototype.propertyIsEnumerable(\"prop\") in  '' ) { for (__iterator__ in <x><y/></x>.__parent__) for (__noSuchMethod__ in null) \"\" ; }");
tryItOut("L:if(__count__.constructor.__noSuchMethod__) {(<x/>); } else  if (false <<=  '' ) {{export *; }continue ; } else L:while((prop.isPrototypeOf(({}))) && 0)gc()");
tryItOut("let __iterator__ = <x/>;");
tryItOut("if([11,12,13,14].map) {prototype = __iterator__; } else {; }");
tryItOut("/*for..in*/for(let [__parent__, constructor] = yield <y><z/></y> in (\n__iterator__)) {/*for..in*/for(let __count__ in ((window)(\ffalse(<x><y/></x>)))){{} } }");
tryItOut("(*::*); const __count__;");
tryItOut("/*infloop*/for(let [, ] =  /x/g .prop; eval(\"yield;\", 0); [<xxx>{constructor}</xxx>].map((new (this)()))) /*for..in*/for(var __iterator__ in window) {throw null; }");
tryItOut("/*infloop*/for(let __iterator__ = (p={}, (p.z = <><xxx>{__parent__}</xxx></>)()); ([<x><y/></x> for each (__noSuchMethod__ in undefined)]); (#2=window) >= (Math.sin)((eval(\"[({a1:1})]\", new @foo())), <x><y/></x>)) {}");
tryItOut("{throw 1.2e3; }");
tryItOut("L:if(new ((1 for (x in [])))()) {throw (Function)(null |  /x/g ); } else  if (this , null instanceof yield constructor = __proto__ = true .. <zzz>(uneval(prop = __parent__))</zzz>) {/*for..in*/for(const [constructor, prop] = undefined in this) (*::*\f);function(id) { return id }; } else {/*infloop*/for(__proto__ =  /x/g ; <x/>; this) {return; } }");
tryItOut("L: prototype;");
tryItOut("switch(__count__) { case prop:  }");
tryItOut("break M");
tryItOut("if(1e+81--.@*) {constructor, __iterator__;return <x><y/></x>; } else  if ([15,16,17,18].map(((arguments).watch).call,  /x/g  in <y><z/></y>)) {break M; }");
tryItOut("L:do return <><x><y/></x></>; while(( \"\" ) && 0);");
tryItOut("\n");
tryItOut("throw StopIteration;");
tryItOut("__proto__, __noSuchMethod__;\n(<x><y/></x>);\n");
tryItOut("<><x><y/></x></> = prototype;");
tryItOut("/*infloop*/while(let (constructor) new (false.__defineGetter__(\"'fafafa'.replace(/a/g, function  prototype (__proto__, prototype) { return constructor } )\",  /x/g )++)(((__parent__).apply)(new #3={a:#3#}(__count__)))){/*for..in*//* nogeckoex bug 349964 */ for  each(let <x><y/></x> in __count__.__noSuchMethod__) /*infloop*/for(({__proto__: ({a2:z2})}); new (function  prop (__iterator__, __iterator__)*::*)(@foo, <x/>); <y><z/></y>.unwatch(\"__parent__\")) *::*;if((this.zzz.zzz)) ({a1:1}); else  if ([<><x><y/></x></>.watch(\"__parent__\", function(q) { return q; }) for (__proto__ in <x/>) for each (function::prototype in <><x><y/></x></>)]) {throw false; }\ngc()\n }");
tryItOut("switch(-3/0) { case ({a2:z2}): break;  }");
tryItOut("if() (false); else  if ((<><x><y/></x></>, window//h\n__proto__ =  /x/ ).__lookupGetter__(\"function::prototype\")) ");
tryItOut("/*infloop*/M:/*\n*/for(*; <><x><y/></x></>;  /x/g ) {export *; }break M\nreturn <x><y/></x>;");
tryItOut("if([\t((1 for (x in []))).call(<><x><y/></x></>, __noSuchMethod__) != @foo__parent__]--) { if (<y><z/></y> <<= window .@ (constructor.prototype = (function  prototype ()<x><y/></x>).call(<x><y/>\f</x>, window,  \"\" ))) var __count__, __count__ = false;export *;} else {L:if(true) ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const ({ __count__: __noSuchMethod__ }) in (p={}, (p.z = <><x><y/></x></>)())) with(this.__defineGetter__(\"__iterator__\",  \"\" )){{}__iterator__ = prototype, __iterator__; }");
tryItOut("/*for..in*/for\t(let constructor in this) prototype = undefined, __proto__ = 5.0000000000000000000000;");
tryItOut("return\n");
tryItOut("M:if((<><x><y/></x></> |= <x/>.*)) {throw __iterator__; } else  if (({__count__: (<><x><y/></x></>\f for each (prop in <y><z/></y>) < false.__lookupSetter__(\"prototype\") in ++1e+81)})) export __proto__;");
tryItOut("/*for..in*/for(let __count__ = new RegExp(window, {gc() }) & (this.propertyIsEnumerable(\"__iterator__\")) in __count__ >>= <><x><y/></x></>) \n{(<x><y/></x>).__defineSetter__L:with({constructor: <><{constructor}><x><y/></x> </{constructor}></>}){return 1e4;yield; } }");
tryItOut("/*for..in*//*\n*/M:for(var prop in window) {export __noSuchMethod__;yield <><x><y/></x></>; }");
tryItOut("/*infloop*/M:do {; } while( /x/g  ? <x><y/></x> : this);");
tryItOut("/*for..in*/for(__count__.__count__ in ((Math.pow)((1e81))))var prop, __iterator__ = 1.3;");
tryItOut("/*infloop*/L:for(this for each (get in <><x><y/></x></>); ((function(q) { return q; }).call(<x><y/></x>, __iterator__)); ( .((this == this)))) {export *; }");
tryItOut("/*infloop*/do {; } while( /* Comment */#0=this.__defineSetter__(\"__parent__\", Math.pow).yoyo(window));");
tryItOut("if(constructor.__count__ = null += <><x><y/></x></>) { if (<x><y/></x>.__lookupSetter__(\"__count__\")) M:while((prototype) && 0){return;Math.sin } else {with('fafafa'.replace(/a/g, {}).unwatch(\"__count__\")){if(__parent__.prop) { if (__count__ = *) function::__iterator__ setter: function () { yield __parent__ }  else {return; }}yield <><x><y/></x></>;\nfunction  __noSuchMethod__ (function::__noSuchMethod__, constructor) { return <><x><y/></x></> } \n } }}");
tryItOut("yield <><x><y/></x></>;with({__noSuchMethod__: *})default: __noSuchMethod__, __parent__ = *::*break; case -0: {}case <y><z/></y>: break; case 6: break; case ({a2:z2}): ");
tryItOut("M:if(.2.__defineGetter__(\"__parent__\", new Function)) ");
tryItOut("/*infloop*/for(let (__iterator__, constructor)  /x/ ; __count__.watch(\"__parent__\", (function  prototype () { yield {} } ).apply);  \"\" .__defineSetter__(\"__proto__\", ({}).hasOwnProperty)) {const __noSuchMethod__ = undefined, __iterator__ = *::*;return <y><z/></y>; }");
tryItOut("if('fafafa'.replace(/ag, )) constructor, __proto__;");
tryItOut("if( { yield <x><y/></x> } ) ; else  if (__parent__ % *\f) break L; else { }");
tryItOut("while(( <= __count__+=<x><y/></x> !=  \"\" ) && 0){const __noSuchMethod__ = prototype, prop;export __iterator__; }");
tryItOut("/*for..in*/M:for(const prototype in (( /x/g )(1.2e3.eval(__proto__)))){export *; }");
tryItOut("switch((<y><z/></y>.hasOwnProperty(\"__count__\"))) { default: if(<x><y/></x>) { if ((({}).__lookupGetter__)((-1), <x/>)) {var /*\n, prop = <><x><y/></x></>;return __noSuchMethod__; }} else {yield;; }if(true) {{} } else {([[1]]);let prop = __noSuchMethod__; }break;  }");
tryItOut("/*for..in*/for(let function::__parent__ = ((({constructor setter: /a/gi, constructor getter: /a/gi }))\n).throw(constructor.prototype) in ((p={}, (p.z = <><x><y/></x></>--)()))) {this.zzz.zzz; }");
tryItOut("/*for..in*/L:for(__noSuchMethod__ in yield window) {(<><x><y/></x></>); }");
tryItOut("M:with(function(id) { return id }){export *; }");
tryItOut("if(({constructor: (3.141592653589793.throw( /x/ ))}) + __proto__ != @foo .. 1e81++) yield;");
tryItOut("with({__count__: (let (__noSuchMethod__) <><x><y/></x></>)}){gc()<x><y/></x>\nexport *;\n }");
tryItOut("/*infloop*/L:while(({constructor: #1=({__proto__: ((eval(\"do {return; } while((<x/>) && 0);\", 0/0)).valueOf(\"number\"))}), __count__: -3/0 }) ? (this.__defineGetter__(\"prop\", __count__)) : __proto__){if(true) {( \"\" );yield; } else return this; }");
tryItOut("try { try { gc() } catch(constructor if prototype.__parent__ = <x><y/></x>) { ; } \n } catch(__noSuchMethod__ if (function(){let(({ constructor: prototype }), __count__ = prop, __proto__) { for(let y in [5,6,7,8]) throw constructor;})()) { __noSuchMethod__\f = __parent__; } ");
tryItOut("do {export *; } while((__count__ = prop) && 0);");
tryItOut("/*infloop*/for(let __iterator__; false >>>=window; <><x><y/></x></> ^= @foo) throw this;");
tryItOut("/*infloop*/M:for((this > ( \"\" .yoyo( \"\" ))); window; constructor = ({ __parent__: prop })\t[(<><x><y/></x></>.__defineSetter__(\"__count__\", function (__iterator__) { yield; } ))]) {(function ([y]) { }); }");
tryItOut("let (__iterator__, prototype) { /*infloop*/for(const prototype; (*::*.@*); (uneval(0))) gc() }");
tryItOut("/*for..in*/for(const constructor in ((*::*)( /x/ ))){throw *::*;return true; }");
tryItOut("if(<y><z/></y>) {yield <x><y/></x>;throw  /x/ ; }");
tryItOut("/*for..in*/ { yield Math.sin(true.watch(\"__parent__\", ([1,2,3,4].slice).apply), <y><z/></y>) } ");
tryItOut("do gc() while(((<>new (this).__defineSetter__()</>.(__proto__ = null.isPrototypeOf((yield @foo; ^= .2))))) && 0);");
tryItOut("/*infloop*/for(const [[({ prototype: prop }), , prop, , ], __parent__, (prop)(<y><z/></y>), []] = (\ntrue); <><x><y/></x></> in <x/>; (({}).__lookupGetter__).call((({__iterator__ getter: [1,2,3,4].slice, __parent__ setter: function  __iterator__ (constructor, __proto__) { yield @foo }  })++), (<><x><y/></x></>.hasOwnProperty(\"constructor\")))) export *;let (__parent__) { throw <><x><y/></x></>; }");
tryItOut("/*infloop*/do {gc()export *; } while(<><x><y/></x></> ? this : ({a1:1}));");
tryItOut("/*infloop*/for(\nthis.__defineSetter__(/*\n*/\"prop\", Math.sin); ((__iterator__ for (__proto__ in this)).__defineGetter__(\"__iterator__\", *::*)); \n /x/g ) L: /*infloop*/M:while(this){(*); }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("let (({ __parent__: ({ prototype: function::__count__ }), __parent__: [__noSuchMethod__] }), [] = ((yield __noSuchMethod__ = delete  '' ))) { [[[1]] for each (constructor in *::*)]; }");
tryItOut("let prop;");
tryItOut("/*infloop*/while(prop.__proto__)if(<y><z/></y>) { if (({prototype: [,,z1], prop:  })) yield; else ;}");
tryItOut("switch(<x/>.__defineSetter__(\"__count__\", function  __count__ (__noSuchMethod__, __count__) { yield  } )) { case 1: /*for..in*/for(let [constructor, __noSuchMethod__] = __proto__.@* in __count__) {/*for..in*/M:for(prototype =  ''  in 3/0) {export __proto__;; } }break; ;break; case 8: break; break; break;  }");
tryItOut("if([] = function(id) { return id }.unwatch(\"__iterator__\")) {if(<x><y/></x>.(0.1))  else #1/*for..in*/for([ /x/ , __proto__] = * in <x/>) {export \t__count__; } } else yield;");
tryItOut("if([,,z1]) {throw <x/>; } else  if ( \"\" ) {break ;throw __count__ = 4.; }");
tryItOut("/*infloop*/for((<x><y/></x>.(<y><z/></y>)); <><xxx {__proto__}={ /x/g } /></>; ((function ([y]) { })().__lookupGetter__(\"__noSuchMethod__\"))) ;");
tryItOut("null");
tryItOut("/*infloop*/for(yield #0=window; @foo.throw(undefined); Boolean()) this;");
tryItOut("/*for..in*/for(var __noSuchMethod__ = yield <x/> in <><x><y/></x></>\f) {{} }");
tryItOut("if(-0 :: window) {export *;let __noSuchMethod__ = <><x><y/></x></\r>, __iterator__; } else  if (this.__noSuchMethod__) {break ;let constructor = .2, export prototype; = false; } else ");
tryItOut("/*infloop*/do /*infloop*/do export __count__; while(( for each (__count__ in function ([y]) { }) !== <><x><y/></x></>.prototype = <x/>)); while\t(({constructor: new Error(function ([y]) { })}).throw(((__iterator__ = <><x><y/></x></>).call((<><x><y/></x></>.hasOwnProperty(\"__parent__\")), ))));");
tryItOut("M:switch(0.1) { default: break; case 9: /*infloop*/for(arguments ? __proto__ : false.eval(this >>= @foo); #1#; Boolean( '' ) ^ *::*) M:if(<><x><y/></x></>) { if (<y><z/></y>) {gc() }} else return 1e81;case 0: break; gc()break; case this.__defineGetter__(\"__proto__\", eval): break; case 6: break; case 5: {{}/*for..in*/for(let [__parent__, __parent__] = __parent__ in [[1]]) {yield undefined;export __proto__; } }export *;;break; case 4: if(<x><y/></x>( /x/ , *::*)) {yield  /x/ ;{} } else  if (prop) yield;break;  }");
tryItOut("/*infloop*/M:do {export __parent__; } while(<><!--yy\f--></>);");
tryItOut("if(<x/>[*::* ? __parent__ : *]) { '' ;export *; }");
tryItOut("export *;\nyield  '' .valueOf(\"number\");\n");
tryItOut("let __proto__ = constructor, __count__;");
tryItOut("if(*) continue ; else (undefined)\n");
tryItOut("while((((yield this.__defineGetter__(\"__proto__\", ({}).hasOwnProperty)))) && 0)/*for..in*/for(__noSuchMethod__ in ((function ()function ([y]) { })(({}))))let constructor;");
tryItOut("prototype;\nexport *;\n");
tryItOut("L: {}");
tryItOut("{};");
