tryItOut("/*for..in*/M:for(let __count__ in ((Function)(constructor = constructor)));");
tryItOut("(*::*)\n");
tryItOut("return;yield;");
tryItOut("gc()L:if(\r /x/g ) {return; } else yield  /x/g ;");
tryItOut("if({} >>> true) {yield <><x\f><y/></x></>;export prototype; } else {1e+81let __noSuchMethod__ = @foo, __parent__ =  \"\" ; }");
tryItOut("/*for..in*/for(const __parent__ in ((function (({ __iterator__: __iterator__ })) { return <><x><y/></x></>.watch(\"__proto__\", Math.sin) } )(*::*.hasOwnProperty(\"__parent__\")[@foo ,  \"\" ]))){throw <x><y/></x>;yield  \"\" ; }");
tryItOut("/*infloop*/for(var __count__; (prop.__lookupSetter__(\"__noSuchMethod__\")) for each (prop in this) for (__noSuchMethod__ in <x><y/></x>); window) {return <x/>; }");
tryItOut("/*infloop*/for((delete (1e4 ^ <x><y/></x>)); __proto__; <> </>.(__proto__.__iterator__)) {; }");
tryItOut("with\r(constructor = ( '' .hasOwnProperty(\"__parent__\")))do gc() while((<y><z/></y> * __iterator__) && 0)\n");
tryItOut("/*infloop*/L:do {__proto__; } while( /x/ );");
tryItOut("prop = 3, constructor;");
tryItOut("for(let y in [5,6,7,8]) with({}) throw this;");
tryItOut("/*infloop*/for(var __iterator__; (__parent__.hasOwnProperty(\"__iterator__\")); @foo.__iterator__ = false) if( /x/ ) {throw <x><y/></x>;export __count__; } else  if (<y><z/></y>) {let __iterator__;export *; } else {var __count__; }");
tryItOut("/*infloop*/L:while(__count__.function::__count__){__noSuchMethod__, prototype = true; }");
tryItOut("L:if([11,12,13,14].sort.__lookupGetter__(\"constructor\")) {return \n<x><y/></x//h\n>; } else  if (({ __iterator__: [], constructor: prop }) = (\n(prop = [,,z1]))) /*infloop*/M:for((@foo)[3.141592653589793]; (__proto__.(__parent__));  /* Comment */<><x><y/></x></>) {export constructor;export __iterator__;\t }");
tryItOut("L: {if((constructor.__noSuchMethod__)) { if (__noSuchMethod__ = undefined) {return  '' ; }} else {(null);Math.pow } }");
tryItOut("/*infloop*/for(yield 4.; __count__; (uneval(this))) {return;/*infloop*/M:do <>__count__</> while(window); }");
tryItOut("const prototype = <x/>");
tryItOut("/*for..in*/for(var constructor = <><xxx>{__iterator__}</xxx></> in (uneval(<x/>))) {{} }");
tryItOut("/*for..in*/for(var __proto__((eval(\" /x/ \", __iterator__)).__noSuchMethod__) in ((function (({ prototype: [, (<x/>.__parent__ = (<><x><y/></x></> = window))] })) { switch(@foo) { default: {}break;  } } )(prop = <><x><y/></x></>)))if((new (function  __count__ (__noSuchMethod__, prop) { ({}).__lookupGetter__ } )(<y><z/></y>, <y><z/></y>))) {throw [[]]; } else  if ((<x><y/></x>)(<x><y/></x>)) export *; else {gc()( \"\" ); } const constructor;");
tryItOut("L:if(eval(\"*::*\",  '' )) { if ((({__noSuchMethod__: * }))()) {(__parent__); }} else {const __noSuchMethod__ = <x><y/></x>, __noSuchMethod__; }");
tryItOut("switch((<x><y/></x>.eval(<><x><y/></x></>)([this.zzz.zzz] - (<y><z/></y> * window)))) { case new (function  __iterator__ (prototype, __count__)<><x><y/></x>\f</>)(): break; case 8: break; break; break;  }");
tryItOut("let(__parent__ = window.isPrototypeOf(#3={a:#3#}), __count__) ((function(){<><x><y/></x></>;})());");
tryItOut("M:while((Math.pow) && 0){}");
tryItOut("M:switch(({ get __count__() { yield ((yield <y><z/></y>)) } , prop: x::__noSuchMethod__ = {} })) { case (<>{}</> !== ([(function  prop (function::__noSuchMethod__, prop)<x/>).call(new  \"\" (), __iterator__ |= null, true) for each (__noSuchMethod__ in eval(\"<y><z/></y>;\", [[]])) for each (__noSuchMethod__ in <><x><y/></x></>) for each (get in <x><y/></x>) for (__iterator__ in __proto__)])): case 5: break; \n\rbreak; case (({ prototype: prop, function::__parent__: prop }) = (yield 033)): {[,];export prop; }break; break;  }");
tryItOut("if(({ get __proto__ __iterator__ (prototype) { if(undefined) { if (*::*) ();} else {export constructor; } }  })) {const __noSuchMethod__; } else  if (__count__) export *; const __iterator__; else {continue ;export __noSuchMethod__;gc() }");
tryItOut("if(__iterator__) const 'haha'.split = __noSuchMethod__; else let __proto__, __count__;");
tryItOut("switch(yield eval(\"export *;\", null)) { case constructor ? [[1]] : [z1,,]: case 0: return #1=({__count__: null});throw false;break; /*infloop*/for(const __proto__; <x><y/></x>; <x><y/></x>) {let __count__, constructor; }case 6: L:if(__noSuchMethod__) { if ((window)) {prop = null;true; } else (<x/>);} }");
tryItOut("/*for..in*/for([constructor, __count__] = (uneval((__count__.prop = this))) in __iterator__.(<x><y/></x> *= [z1])) throw __proto__;");
tryItOut("{if(<><x><y/><//h\n/x></> && constructor) { } else  if (constructor: ([11,12,13,14].sort)) {return 1.3; } }");
tryItOut("/*infloop*/do {throw this; } while((let (prop, __iterator__ = Y) prop));");
tryItOut("/*infloop*/M:while(<zzz> /x/ </zzz>){/*infloop*/do {yield <x><y/></x>; } while((<x><y/></x>) !== __iterator__); }");
tryItOut("with({}) let(prop = (constructor+=constructor)) { throw StopIteration;");
tryItOut("M:do {{}{} } while((4. & <x><y/></x>) && 0);");
tryItOut("M:if(\n[ '' ].sort((<y><z/></y>).__defineSetter__)) switch(@foo) { default: gc() } else  if (((eval)())) /*infloop*/while(window){export prop;function  prop (prop) { gc() }  }");
tryItOut("if(<><x><y/></x></>) {{} } else  if (<x/>) ");
tryItOut("{return <><x><y/></x></>;export prop; }");
tryItOut("yield;__iterator__;");
tryItOut("{<ccc:ddd><ccc:ddd><ccc:ddd><!--yy--></ccc:ddd></ccc:ddd></ccc:ddd>if([-1\t] *= this.valueOf(\"number\")) {let __proto__; } else  if (*) {/*for..in*/for(let prop in this) {return  /x/ ; } } else  }");
tryItOut("(0);while((new *::*(({}), [,])) && 0){ }");
tryItOut("let __count__ = <x><y/></x>; const prop;let (__noSuchMethod__, prop) { let prop = [,,z1]; }");
tryItOut("for(let y in [5,6,7,8]) ({ prototype: ({ __parent__: [, , , constructor], prototype: [__count__, ] }) }) = __count__;");
tryItOut("with({constructor: !prop}){if(<x><y/></x>)  else  if (<y><z/></y>) {return [1]; } }");
tryItOut("/*for..in*/for(const ({ __iterator__: [({ __iterator__: [prototype] }), [({ __proto__: __proto__, __proto__: constructor }), , ({ __iterator__: __proto__, __count__: __iterator__ }), , ], ({ __iterator__: return;, prototype: ({ __parent__: constructor }) })] }) in 'fafafa'.replace(/a/g, ({a1:1}))) {prototype.(({a2:z2})); }");
tryItOut("__noSuchMethod__.__parent__ = function::prop;");
tryItOut("(prototype)");
tryItOut("/*for..in*/for(let __iterator__ in --@foo) {}");
tryItOut("/*infloop*/for( '' .__proto__ = @foo;  /* Comment */<><x><y/></x></>.unwatch(\"__proto__\"); (eval(\"__count__.watch(\\\"__count__\\\", (window).__defineSetter__)\", this.zzz.zzz))) let (constructor, prototype =  '' ) { M:switch(this) { case  '' : break; break; break; break; continue ;default: (*::*).callcase 0: case 7: this;break;  } }\nreturn;\n");
tryItOut("/*infloop*/for(const ({ __iterator__: [, ] }) = <x/>; 0 !=  \"\" ; <><x><y/></x> __parent__: prop.(new (function  __proto__ (__noSuchMethod__) { return window } )(<x><y/></x>, <x><y/></x>)).unwatch(\"(false === 1e4)([z1])\") </>.yoyo( '' )) {with({__count__: undefined ? <y><z/></y> : false}){var constructor, __parent__; } }");
tryItOut("let __parent__ = __noSuchMethod__;");
tryItOut("if(__noSuchMethod__) (this); else (1 for (x in []))");
tryItOut("yield false\n");
tryItOut("if(__noSuchMethod__.__proto__) { if (@foo) {yield *::*; }} else {var prototype, __parent__\nconst __noSuchMethod__, __proto__; }");
tryItOut("033");
tryItOut("with(new ((new Function(\"var __proto__;\")))(eval(\"[,,] for (prop in  \\\"\\\" )\", <x/> &= <x><y/></x>))){/*for..in*//* nogeckoex bug 349964 */ for  each(var setter in yield  \"\" ) yield; }");
tryItOut("switch((__parent__ .@ __parent__)) { case 7: break;  }");
tryItOut("/*for..in*/for(var __iterator__ in ((/a/gi)( '' )))(<><x><y/></x></>); const constructor;");
tryItOut("L: with({}) return function(id) { return id };");
tryItOut("var __proto__ = [[]], __iterator__ =  \"\" ;");
tryItOut("L: {export __iterator__; }");
tryItOut("let (__iterator__ = ('fafafa'.replace(/a/g, Math.pow))) { with({}) continue ; }");
tryItOut("/*infloop*/for(<x/>.valueOf(\"number\"); (window.unwatch(\"__count__\")); (uneval(*::*))) let __count__, constructor;");
tryItOut("/*infloop*/while( \"\" ){(({a2:z2})); }");
tryItOut("L: let (__parent__ = return <y><z/></y>, __iterator__) { break M; }");
tryItOut("while((function  prototype (__noSuchMethod__) { yield prop } (false, 3)) && 0){with(-1)__noSuchMethod__ = 0.1; }");
tryItOut("__iterator__ = eval(\"__iterator__;\", <x/>);");
tryItOut("if('fafafa'.replace(/a/g, <><x><y/></x></>)) {{} } else  if (function  prototype (__count__) '' ((*::*)(1.2e3, [,,z1]), <x><y\f/></x>)) gc()");
tryItOut("M:do while((__parent__ == <x/>) && 0){return  /x/g ; } while((prop = __parent__;) && 0);");
tryItOut("L: {break ;/*infloop*/do {(1e+81); } while(window); }");
tryItOut("/*infloop*/for(const __count__ = <><x><y/></x></>;  /x/ ; true) yield;");
tryItOut("yield false\n");
tryItOut("/*infloop*/for([,,]; this; <x><y/></x>) {( /x/g );throw function ([y]) { }; }");
tryItOut("/*infloop*/for([,,z1]; (__proto__.__count__).eval(constructor.__proto__ = __noSuchMethod__); <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(this)) gc()");
tryItOut("if(1e+81.__lookupGetter__(\"__parent__\")) { if ( /* Comment */null) {return <x/>; }} else break M;");
tryItOut("{/*infloop*/M:for(<><x><y/></x></>; *; window) __proto__ = <x><y/></x>; }");
tryItOut("M:do return ([11,12,13,14].filter); while((\t(\n__iterator__.__noSuchMethod__.yoyo(new (<x><y></x> ({ constructor: __count__, __count__: [] }))()) for each (__count__ in constructor))) && 0);");
tryItOut("if(([,].propertyIsEnumerable(\"__proto__\"))) {return this;let prop = <y><z/></y>, prop; } else {if((__count__.__noSuchMethod__ getter= (function (constructor, __noSuchMethod__) { yield <x><y/></x> } ).apply)) {{} } else {gc()var constructor = true; } }");
tryItOut("this.zzz.zzz;");
tryItOut("__iterator__, __proto__");
tryItOut("/*infloop*/L:for(var constructor = 1.2e3; prop;  '' ) {throw  '' ; } const __parent__;");
tryItOut("if(({yield: 'fafafa'.replace(/a/g, new Function).watch(\"__proto__\", null)})) { if (window === 1e+81) /*for..in*/for(var <{__noSuchMethod__}>yyy</{__noSuchMethod__}> in ((prototype)(new #3={a:#3#}(__proto__, 1.3))))} else ");
tryItOut("with({prop: <x/>}){export *; }");
tryItOut("/*for..in*/for(let prop in <x><y/></x> == *) {L:if(!__count__ = <x><y/></x>) {return false; } else  if (new RangeError(prop, window)) {<><x><y/></x></>\nconst delete = [,,z1]; } }");
tryItOut("; const prototype;");
tryItOut("try { prop = prototype; } \tfinally {  } ");
tryItOut("L: {const prototype = ({a1:1}); }");
tryItOut("__iterator__ = *::*\n");
tryItOut("if(window) { if (1e81) {function (prop) { throw <><x><y/></x></>; }  }} else let prototype;");
tryItOut("/*infloop*/for(let __proto__; __count__.__noSuchMethod__ = false.__defineGetter__(\"constructor\", function  __proto__ (__parent__) { return  /x/g  } ); (null * 3.141592653589793) instanceof <x><y/></x> <= <x/>) /*infloop*/while((*::*).call\n){throw <y><z/></y>; }");
tryItOut("L:if(([[]] | <y><z/></y>.__iterator__ = prop.(<x><y/></x>))) { if (--) constructor; else { }}");
tryItOut("with({}) { let prop, constructor = *::*; } ");
tryItOut("do ; while(( '' ) && 0);");
tryItOut("/*infloop*/for(const prototype; __parent__;  /x/ ) {export *;const __noSuchMethod__ =  /x/g , __noSuchMethod__; }");
tryItOut("/*infloop*/M:for(<><x><y/></x></>; @foo; function ([y]) { }) return;");
tryItOut("do {export *;{} } while((*::*) && 0);;");
tryItOut("try { ; } catch(__parent__ if undefined) { throw this; } catch(constructor if 1.3) {  } catch(__iterator__) { return prop; } ");
tryItOut("/*for..in*/for(let __proto__ in ((eval(\"let setter;\", ({})))(([1,2,3,4].slice).call(this, __count__, @foo))))gc()");
tryItOut("/*infloop*/for(let ({ __proto__: prototype, prototype: [__noSuchMethod__, ] }) = (<x/>).__defineSetter__; (null); __proto__(<><x><y/\f></x>\f</>)) return ({});");
tryItOut("/*infloop*/while(undefined .@*:: __count__ <<= __proto__ = [[1]])");
tryItOut("M:if(++ \"\" ) {{}yield __iterator__; } else export __proto__;");
tryItOut("yield");
tryItOut("with({prop: *::*}){return __noSuchMethod__;/*infloop*/for(true; <><x><y/></x></>; <><x><y/></x><///h\n>) {__noSuchMethod__(/export *; } }");
tryItOut("M:if('fafafa'.replace(/a/g, <><x><y/></x></>)) {/*infloop*/for(const __count__ = __noSuchMethod__; *::*;  /x/g ) {;export __noSuchMethod__; } }");
tryItOut("/*infloop*/while(3/0){gc()throw #1=[#1#]; }");
tryItOut("/*infloop*/M:for(const __iterator__.__noSuchMethod__ = __noSuchMethod__ = -0; <y><z/></y>; this.__defineGetter__(\"__iterator__\", (new Function(\"let prop = __count__, prop = 1e4;\")))) constructor/*for..in*/for(var __iterator__ =  /x/g  >= <x><y/></x> in 0.1) with(window){}");
tryItOut("{if(function(id) { return id }) {var __proto__ = -0;export __iterator__; } else (({a1:1}));var constructor; }");
tryItOut("M:if(({__proto__: (constructor.(* /= window))})) return\n else  '' ;");
tryItOut("with({}) yield\n");
tryItOut("{if(true , function ([y]) { }\f) { if ([11,12,13,14].filter) {throw <x><y/></x>;var function::<><x><y/><\n/x></> = <y><z/></y>; }} else {(<x/>); }export *; }");
tryItOut("__count__ = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in <><x><y/></x></>) {if(__parent__) return; else  if (constructor = <y><z/></y>)  else __noSuchMethod__ = <x><y/></x>; }");
tryItOut("return;");
tryItOut("M:if(<y><z/></y>) {export *;continue ; } else  if (<y><z/></y>) (*); else {{} }");
tryItOut("M:if(__parent__ = undefined.__lookupGetter__(\"constructor\")) throw [11,12,13,14].some; else  if (this.__defineGetter__(\"__noSuchMethod__\", ({}).__lookupGetter__).__lookupSetter__(\"__count__\")) L: L:if(new *((-1),  '' )) { if (eval(\"[,,]\",  \"\" )) {return; }} else {return; }");
tryItOut("let(__proto__ = __iterator__.eval({})) ((function(){yield (new null.__defineGetter__(\"<y><z/></y>\", [1,2,3,4].slice));})());");
tryItOut("switch([,,z1] <= (__noSuchMethod__ = prototype)) { default: break; case <><{__proto__}><!--yy--></{__proto__}></>: /*infloop*/for(let prototype; ([1,,] == this); \nyyy(<x><y/></x>) = prop.hasOwnProperty(\"__count__\")) {__noSuchMethod__function (constructor) { return \t \"\"  }  }break; case 8: break; case 9: L: return <x><y/></x>;break; case <x><y/></x>.hasOwnProperty(\"__noSuchMethod__\"): export constructor;break; case 5: break;  }");
tryItOut("with((function (export *;, prototype) { /*for..in*/for([gc(), prop] = <><x><y/></x></> in false) __iterator__: -3/0 const __count__; } (new [z1,,](<x><y/></x>, __parent__)))){L:switch((<x><y/></x>.unwatch(\"__parent__\"))) { case @foo: case __parent__ = {}: break; if(__count__) throw <><x><y/></x></>; else  if (new (0.1)(K)) {const __count__ = case __parent__: break L;break; default: (this);case __iterator__: case 3: break; break ;break; case <y><z/></y>: case 1: break; case 5: return <>default: break; case 7: </>;gc()break; ;<><x><y/></x></>; } else var constructor, __parent__;break;  }L: prop }");
tryItOut("{/*for..in*/for(const (true)(1.3) in  /x/ ) export *\n }");
tryItOut("{{gc() }yield; }");
tryItOut("{L:with(<x><y/></x>)<><x><y/></x><\t/> }");
tryItOut("{__iterator__ = window; }");
tryItOut("do let (function::prop = <><x><y/></x></>, prototype = undefined) { let constructor = *::*; } while(((prototype.__count__).@foo\t) && 0);");
tryItOut("L:if(@foo) yield; else  if (<><x><y/></x></>.__count__ = (({prop setter: ([1,2,3,4].map).apply }))) {return [[1]]; }");
tryItOut("L:while((Function( \"\" , <x><y/></x>)) && 0)return;");
tryItOut("gc()");
tryItOut("try { try { return <x/>.__defineGetter__(\"__count__\", Function); } catch(__parent__ if <x/>) { return (<x/> + <x/>)(); } catch(__noSuchMethod__) { ; } finally { throw __count__; }  } finally { __iterator__ = __noSuchMethod__; } ");
tryItOut("throw StopIteration;");
tryItOut("{return  '' ; }");
tryItOut("with({prototype: ({__noSuchMethod__ setter: \f({}).hasOwnProperty })})L:with((x::__proto__.@foo in prop = <><x><y/></x></>)){}");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("with({prop: (<x/>.prototype = \rthis.__defineGetter__(\"prop\", function (prop, __iterator__)undefined))})with({<!--yy-->: (new -3/0())}){ '' ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([({ __iterator__: [], __count__: ({ __iterator__: [__proto__, prototype, __iterator__], __parent__: ({ __iterator__: prop, __count__: constructor }) }) })] in [typeof undefined ? window : undefined]) {for(let y in []);export constructor\nvar __parent__; }");
tryItOut("if((function  function::prop (constructor) { yield [1] } )() === (-1)(null, -1).__defineGetter__(\"__parent__\", [1,2,3,4].slice)) gc() else  if (<y><z/></y>) {let prop;export __iterator__;export prop\n }");
tryItOut("__proto__ = __count__;");
tryItOut("if(+0x99 .@*:: window.yoyo(this)) /*infloop*/for(prototype.(arguments); ([[]].__defineSetter__(\"constructor\", Math.sin)); <x><y/></x>.(<></>)++) if(--__proto__) <x><y/></x> else ");
tryItOut("if( '' .*) { if (__proto__ = 1e81.prop = <y><z/></y>) var __count__; else {/*infloop*/for((<x><y/></x>.(<><x><y/></x></>)); [((new Function(\"yield <x><y/></x>;\"))).call(__parent__, )].map(gc); [(\n[[1]])].some(this)) gc() }}");
tryItOut("return;");
tryItOut("/*for..in*/M:for(const (prop = true) in ((eval)((prop = (eval(\";\", (<x><y/></x>.(-3/0))))\n)))){const constructor;{} }");
tryItOut("/*for..in*/for(let constructor = true ? +[z1] : <x><y/></x> .. <x><y/></x> in 4.) __count__;");
tryItOut("(({}).hasOwnProperty.propertyIsEnumerable(\"__proto__\"))");
tryItOut("throw *::*;");
tryItOut("if((delete (<y><z/></y>.hasOwnProperty(\"prototype\"))).hasOwnProperty(\"setter\")) { } else {export *;{(eval). } }");
tryItOut("__proto__ = [,,];");
tryItOut("/*for..in*/for(var [__noSuchMethod__, __iterator__] = [15,16,17,18].some(function(q) { return q; }, (((let (__parent__ = this, __parent__ = <y><z/></y>) this))[__iterator__ = __noSuchMethod__].@foo)) in var constructor = null.__noSuchMethod__, prop) {eval }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(var (yield undefined)['__count__'] in 'fafafa'.replace(/a/g, 'haha'.split)) {([1,,]).__defineSetter__ }");
tryItOut("if( /x/  -= window if ( /x/ ) >>= __parent__.__noSuchMethod__ setter= function(y) { yield y; gc(); yield y; } >> null\n) { if ((([1,2,3,4].slice(*::*))(<x/>, undefined))) ;} else var __count__, __proto__;");
tryItOut("const prototype\nif('fafafa'.replace(/a/g, Function)) {function (__iterator__) { yield -3/0; }  } else  if (0/0) {const __count__;continue L; } else {const __count__ = __noSuchMethod__, constructor; }");
tryItOut("{throw window\nconst prototype = <><x><y/></x></>; }");
tryItOut("while((<y><z/></y>) && 0)/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in \n(yield window)) {const prop;{} }");
tryItOut("L:if(@foo) { if (<x><y/></x>) {throw null;export *; } else {return ;(true); }}");
tryItOut("with({}) __iterator__catch(prop if (function(){this.zzz.zzz;})()) { __count__ = constructor; } catch(__parent__ if (function(){with({}) { for(let y in [5,6,7,8]) <{constructor}><bbb xmlns:ccc=\"<><x><y/></x></>.propertyIsEnumerable(\"__proto__\")\"><ccc:eee></ccc:eee></bbb><employee id=\"1\"><name>Joe</name><age>20</age></employee>yyy</{constructor}> } })()) { let(__count__ = 1e4\n, __proto__ = [,,z1]) ((function(){with({}) const __iterator__ = [,,], prototype;})()); } finally { for(let y in [5,6,7,8]) __proto__ = constructor; } ");
tryItOut("{L: {; } }");
tryItOut("do {const __parent__;while((*::*) && 0)continue ; } while(((function  __count__ (__count__, __proto__) { yield function ([y]) { } } )([1], this).hasOwnProperty(\"__proto__\")) && 0);");
tryItOut("/*infloop*/for(let [, , , , [__noSuchMethod__]] = (({__noSuchMethod__: <y><z/></y> })); this ? <x/> : null % 0 if (window).__lookupSetter__(\"__proto__\"); (<y><z/></y> !== <><x><y/></x></> .@*:: <><x><y/></x></>)) {(this).watch({a1:1}); }");
tryItOut("/*infloop*/for(__iterator__; null; 1.3) {const constructor = window, __proto__; } const constructor;");
tryItOut("\fthrow __proto__;");
tryItOut("{/*infloop*/do {let (<x><y/></x>);;export *; } while(<x><y/></x>); }");
tryItOut("/*for..in*/for(let prop in ((null)()))yield <><x><y/></x></>;");
tryItOut("L:if(__proto__.__proto__ getter= Function) {/*for..in*/M:for(constructor in <><x><y/></x></>) {export __parent__;let constructor = window, constructor = <x/>; }export *; } else  if (new window(<y><z/></y>, undefined)) return;\nbreak L;\n");
tryItOut("do eval while((<x/> @ (-1) < <><x><y/></x></> >>>=(yield <bbb xmlns:ccc=\"<y><z/></y>\"><ccc:eee></ccc:eee></bbb>)) && 0);");
tryItOut("undefined");
tryItOut("export __proto__;\tif(*::*) yield  /x/ ; else  if (undefined) {yield  \"\" ; }");
tryItOut("switch((({__iterator__: }))) { default: case 6: /*infloop*/do {yield false;(<><x><y/></x></>); } while(prototype.constructor getter= (1 for (x in [])));break; break; case 6: case 9:  }");
tryItOut("throw *;M:with({__iterator__:  /x/g }){(*); }");
tryItOut("let(prop = new [1,2,3,4].map(@foo, <><x><y/></x></>)) { for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/L:while(<x><y/></x>.constructor >= <x><y/></x>){const __count__ = *::*, __parent__;gc() }");
tryItOut("\n(true).watch");
tryItOut("/*infloop*/while(new <><x><y/></x></> <<= <><x><y/></x></>(Iterator(var constructor = <x/>;, 1e81)).__defineGetter__(\"__parent__\", [1,2,3,4].map)){/*infloop*/for(var <y><z/></y>.prop = ([constructor for (__noSuchMethod__ in [z1]) if (<><x><y/></x></>)]); (<><x><y/></x></>)() -=  '' ; [__noSuchMethod__ if (*::*)].__lookupSetter__(\"__iterator__\")) return <y><z/></y>; }");
tryItOut("with({}) { yield; } ");
tryItOut("if(new Array()) { if (__noSuchMethod__.__defineGetter__(\"prototype\", /a/gi)) with({__proto__:  '' }){break M; } else {return;return; }}");
tryItOut("while((__parent__) && 0){/*infloop*/for(let __iterator__ = <x><y/></x>; *; __parent__) {}gc() }");
tryItOut("if(({ constructor: constructor }) = <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")) {continue ;return; } else  if (-<y><z/></y>) {Math.powreturn *; }");
tryItOut("/*infloop*/for(const prop = <x><y/></x>; constructor; prop) {breakthis.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map) L;<><x><y/></x></>, __iterator__ = false; }");
tryItOut("if(<><x><y///h\n></x></>) var __iterator__ = <x/>; else  if (<y><z/></y>) yield window;");
tryItOut("if(<y><z/></y>.__lookupGetter__(\"prop\")) {export *;var __parent__ = __iterator__, __iterator__, __parent__; } else  if ((({prototype setter: {} }))) gc()");
tryItOut("/*infloop*/L:for(var constructor; +false.yoyo(*); true.__iterator__ >> *::*) gc()\n");
tryItOut("[1,2,3,4].map");
tryItOut("if(__noSuchMethod__ = false) yield; else  if (this *= __noSuchMethod__) {;const constructor, __parent__ = <><x><y/></x></>; }");
tryItOut("let (__parent__ = (yield this)) { export *; }");
tryItOut("L: {constructor = <x><y/></x>; }");
tryItOut("/*infloop*/M:for(const ({ __noSuchMethod__: __parent__ }) =  if ( \"\" );  /x/g ; undefined.__defineGetter__(\"__proto__\", /a/gi)) { }");
tryItOut("try { gc() } finally { const __iterator__; } ");
tryItOut("/*infloop*/while(undefined)");
tryItOut("M:if((__parent__.([[]]))) { if (this >>> 4.) {yield <x><y/></x>; } else gc()}\nL: {throw __parent__; }\n");
tryItOut("/*infloop*/M:for(({ prototype: prop }) = (function ([y]) { })(); __noSuchMethod__ = prop; [11,12,13,14].sort) {__iterator__, __count__; }");
tryItOut("do {;\n{}\n } while((null.__defineSetter__(\"__iterator__\", ('haha'.split).call)) && 0);\nexport __parent__;\n");
tryItOut("L:if([z1,,]) {} else  if ( /x/g ) {; }");
tryItOut("{(<><x><y/></x></>);return; }");
tryItOut("/*infloop*/do return; while(prototype)\nyield;");
tryItOut("let (__proto__ = (Math.pow).call(__proto__ = prototype, *)) { break \t; }with(((this for each (prop in arguments)))){return function(id) { return id }; }");
tryItOut("/*infloop*/for(__proto__ = __noSuchMethod__.__count__; window <<= yield __parent__; yield this.__defineSetter__(\"constructor\", <x><y/></x>)) return;");
tryItOut("/*infloop*/for( /x/  *= <x><y/></x>.valueOf(\"number\").constructor = constructor = <x><y/></x>[let (constructor = this, constructor) <x/>]; [new  /x/ ()].filter(({}).hasOwnProperty).unwatch(\"__parent__\"); (yield this.zzz.zzz)) ");
tryItOut("let(__count__, prototype) { return;");
tryItOut("for(let y in [5,6,7,8]) try { with({}) yield (gc).call( \"\" , ); } catch(__count__) { throw StopIteration; } ");
tryItOut("L:if((__parent__ = @foo)) { if (this.__defineSetter__(\"prototype\",  /x/g )) {yield 0/0;yield; }} else continue ;");
tryItOut("let(({ __iterator__: prop, prototype: __parent__ }) = window, prototype) ((function(){try { let(constructor =  /x/  << <x><y/></x>()) ((function(){for(let y in [5,6,7,8]) ({}).hasOwnProperty})()); } finally { return; } })());");
tryItOut("/*for..in*/M:for(let __proto__ in <y><z/></y>) throw __noSuchMethod__;");
tryItOut("return;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(const [prototype, __iterator__] = ({__noSuchMethod__: *}) in this) gc()");
