tryItOut("L:if(033)  else  if ([1]) return; else export __count__;");
tryItOut("yield  /x/ .isPrototypeOf([11,12,13,14].some);");
tryItOut("if((new <><bbb xmlns=\"<x><y/></x>\"><!--yy--></bbb></>)[(-- /x/ .propertyIsEnumerable(\"prototype\"))]) { if (([15,16,17,18].sort(function (__iterator__) { yield this } , 3.141592653589793)).propertyIsEnumerable(\"( '' )(__iterator__)\")) {/*infloop*/for(let __iterator__; ( /* Comment *//*\n*/__noSuchMethod__).__lookupGetter__(\"__proto__\"); (new (__proto__.(<x><y/></x>))([11,12,13,14].map))) {continue M;({}).__lookupGetter__ } } else M:if((<x/>.@foo)) {export *;return; } else  if (<x><y/></x>.watch(\"__parent__\", function (__noSuchMethod__) { return <x/> } )) {yield <x//h\n><y/></x>; }}");
tryItOut("/*infloop*/L:for(this; <y><z/></y>; <><x><y/></x></>) *::*;");
tryItOut("with({prop: arguments}){var __noSuchMethod__; }\n");
tryItOut("export *;/*infloop*/do throw <><x><y\t/></x></>; while((constructor()));");
tryItOut("let (__proto__) { with({}) const constructor, prop = 3/0; }");
tryItOut("/*for..in*/for(prop; in ((function(q) { return q; })(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(new ([z1])()))))return <x><y/></x>;");
tryItOut("L:if([({ prop: prototype, __iterator__: __count__ }), , , ({ __noSuchMethod__: [], __count__: [__proto__, [], , x::constructor] })] = prop) {{} }");
tryItOut("while((__iterator__ =  /x/g ) && 0){Math.pow }");
tryItOut("with(((uneval((this.zzz.zzz))))){const __proto__; }");
tryItOut("\n/*for..in*/for(const __iterator__ in ((<x><y/></x>)(<><x><y/></x></>)))gc");
tryItOut("return 1e+81");
tryItOut("\tM:if(__proto__) { if (<><x><y/></x></>) throw *::*;} else throw <x><y/></x>");
tryItOut("let (__count__ = <><x><y/></x></>) { throw undefined; }");
tryItOut("gc()");
tryItOut("if(__count__) { if ( /x/ ) {export __count__;var prop; }} else return 0x99;");
tryItOut("if(<>(p={}, (p.z = ({prototype setter: (function () { yield <x><y/></x> } ).apply }))())</>) /*infloop*/for(__iterator__; __noSuchMethod__ = 0/0; (constructor)) continue L; else  if (<zzz> /* Comment */(new  \"\" ())</zzz>.(({}.hasOwnProperty(\"__count__\")).isPrototypeOf(<bbb xmlns:ccc=\"*::*\"><ccc:eee></ccc:\teee></bbb>))) {gc()yield; }");
tryItOut("{if(<y><z/></y>) {(prototype); } }");
tryItOut("if(<xxx>{__iterator__}</xxx>) { if ( /x/g .constructor) /*for..in*//* nogeckoex bug 349964 */ for  each(var constructor in 1e-81) {yield #1#;return *; }} else return;");
tryItOut("/*for..in*/for([//h\n__proto__, __count__] = (~([1,2,3,4].slice)([])) in (void  '' __iterator__ = prop.hasOwnProperty(\"prototype\"))) gc()\nvar __proto__ = *::*, prop;\n");
tryItOut("/*for..in*/for(let [prototype, __proto__] = () in this.__defineGetter__(\"constructor\", this)) {return 1.3;(*); }");
tryItOut("if(this && this) ; else  if (( '' )) {let default: break; case *::*: return;break; , prototype = <x/>;; }");
tryItOut("/*for..in*/for([-0, prop] = (uneval( '' )) in new (false)((__noSuchMethod__.watch(\"__parent__\", (<><x><y/></x></>).apply) ? (this.__noSuchMethod__) : __noSuchMethod__.__parent__))) __parent__");
tryItOut("if((RangeError(033,  \"\" ))) { if ((undefined)()) {(__parent__); } else {( '' ); }}");
tryItOut("{L: var constructor = *;{{}yield #3={a:#3#}; } }\n");
tryItOut("/*for..in*/for(const [__count__, constructor] = __iterator__ <= <x/>.hasOwnProperty(\"__iterator__\") in ({__count__: @foo})) {yield;/*for..in*/for(const [__count__, __parent__] = <x><y/\f></x> in <><x><y/></x></>) {gc__noSuchMethod__ } }");
tryItOut("if((<x><y/></x>)(<y><z/></y>, *::*) % __iterator__.__lookupSetter__(\"__noSuchMethod__\")) {<y><z/></y>;yield; }");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = constructor in __iterator__) var __proto__ = 1e-81;");
tryItOut("for(let y in [5,6,7,8]) (undefined);");
tryItOut("/*for..in*/for(__parent__ = (((( \"\" .__lookupGetter__((/\"__count__\") <bbb xmlns:ccc=\"[11,12,13,14].filter\"><ccc:eee></ccc:eee></bbb><ccc:ddd>yyy</ccc:ddd> ) * [,])/*\n*/)(false)) in (true ? .2 : 1e4) , set) {gc()(-1); }");
tryItOut("let(__parent__ = constructor = 3/0, [, __iterator__, , [], ]) ((function(){with({}) { __iterator__ = __iterator__; } })())");
tryItOut("try { return; } catch(__noSuchMethod__) { throw StopIteration; } finally { __noSuchMethod__ = (constructor.(0/0)); } ");
tryItOut("throw __parent__\n");
tryItOut("/*for..in*/for(var [] in ((((new Function(\"/*for..in*//* nogeckoex bug 349964 */L: for  each(prototype in  /x/ ) {}\"))).call)((#2=<><x><y/></x></> !== <x><y/></x>)))){let (prototype = ([({ __parent__:  }) = [window].some((new Function(\"export *;\"))) for each (prototype in @foo) if (<y><z/></y>)])) { gc() }let(prop) { __count__ = #1=[#1#], __parent__; }");
tryItOut("throw __proto__;");
tryItOut("with({}) (*::*);");
tryItOut("/*for..in*/M:for(const constructor in ((function  constructor (prototype, __parent__) { return true } )( /x/g ))){0/0;function(y) { yield y; export __iterator__;; yield y; } }");
tryItOut("let(__noSuchMethod__ = <><xxx>{__noSuchMethod__}</xxx></>\n) ((function(){throw prop;})());");
tryItOut("do export prototype; while((undefined) && 0);");
tryItOut("if(\n(window)(3, null)) { if ((({ set constructor __proto__ (__count__) { yield  ''  } , __noSuchMethod__:  ''  })).__noSuchMethod__) throw <><x><y/></x></>;} else ; const prop;");
tryItOut("if(new eval(-1))  else  if (1e-81.__defineGetter__(\"window\", window)) {break L; } else {const prototype, __iterator__ = <><x><y/></x></>; }");
tryItOut("/*infloop*/M:do {L:switch(this) { case window: const __parent__, prototype = ({a1:1});break;  }function  __iterator__ () { let __noSuchMethod__; }  } while(this.zzz.zzz | function(y) { yield y; throw 1e+81;; yield y; });");
tryItOut("with(__count__.__noSuchMethod__){throw <x><y/></x>; }\nL: L: var constructor, __count__;");
tryItOut("with({__count__: this.__defineGetter__(\"__iterator__\", function  __proto__ (__noSuchMethod__) { yield * } )[[,,z1] /= *]});");
tryItOut("with((<x/>.propertyIsEnumerable(\"yield\")))gc()");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in <x><y/></x>) {throw *::*; }");
tryItOut("/*infloop*/do {/*for..in*/for(const __parent__ = <x/> in constructor) gc()\n{}\n } while([15,16,17,18].sort((1 for (x in [])), (@foo) + constructor = false));");
tryItOut("with({__iterator__: (1 for (x in []))}){prop = ; }");
tryItOut("if(0 *= <x><y/></x>[true]) {export *; } else  if ((this.prop =  { yield <y><z/></y> } ) instanceof new true()) {yield <x><y/></x>;({a2:z2}) }");
tryItOut("for(let y in []);");
tryItOut("for(let y in [5,6,7,8]) let(__noSuchMethod__) { throw <><x><y/></x></>;");
tryItOut("(__noSuchMethod__);/*infloop*/for(var constructor; (__proto__ = -3/0); <x/>([,,])) gc()");
tryItOut("if(__parent__) { if (true) ({ prop: constructor }) = (<x/>.hasOwnProperty(\"constructor\")), __noSuchMethod__ = <y><z/></y>; else { }}");
tryItOut("if(new (([[]].__defineSetter__(\"__parent__\", function  constructor (prop, __noSuchMethod__) { ; } )), <><x><y/></x></>)) { if (<y><z/></y>) {[z1]; }} else yield;");
tryItOut("/*for..in*/for(let [__count__, __proto__] = try { function (__count__, __parent__)window } catch(__noSuchMethod__ if (function(){})()) { export __iterator__; } finally { continue ; }  in undefined) if(<><x><y/></x></>) <x><y/></x>");
tryItOut("M:if((__parent__.isPrototypeOf(__noSuchMethod__ = 0))) {/*infloop*/for(var function::__count__; 1e4; false) {} }");
tryItOut("if(*::*) yield; else  if (this) throw <><x><y/></x></>;");
tryItOut("if(__parent__) { if (__iterator__ = #3={a:#3#}) {return;export *; [__count__, , , ({ __proto__: __iterator__, __iterator__: prototype })] else {const __iterator__ = __iterator__, prop; }}");
tryItOut("/*infloop*/for(var [] = <><!--yy--></>; (*::* for each (prop in prototype)).eval(((uneval(<><x><y/></x></>.yoyo(null))))); (<y><z/></y>.valueOf(\"number\"))) {}");
tryItOut("L: continue M; const prototype; const prop; const __count__;");
tryItOut("do ; while((({a2:z2})) && 0);");
tryItOut("/*for..in*/for(const [__parent__, , , __count__, [prototype]] in (--(<x/> >= __count__))) {{/a/gi(0.1); }{__noSuchMethod__, constructor; } }");
tryItOut("break M");
tryItOut("/*infloop*/for([1].eval(*::*); [5.0000000000000000000000__parent__];  /* Comment */ /x/ ) /*infloop*/for(prop = this.__defineSetter__(\"__noSuchMethod__\", __count__.prototype = <x><y/></x>); __proto__ = __proto__; ({})) {yield false; }");
tryItOut("if(constructor) ; else {return;function::prototype = <y><z/></y> }/*infloop*/do {throw <y><z/></y>; } while(#1=[#1#]);");
tryItOut("do {} while((<x/>.__lookupSetter__(\"constructor\")) && 0);");
tryItOut("{}");
tryItOut("/*for..in*/for(const [((<x/> if (<><x><y/></x></>))) >>> #1#].gc() in ((function(y) { yield y; {with({prototype: __parent__.__count__}){continue ; } }; yield y; })('fafafa'.replace/a/g,  /x/g ))))export *;");
tryItOut("/*for..in*/for(const [__iterator__, __proto__] = * in <y><z/></y>) {}");
tryItOut(";");
tryItOut("L:with(#1#.watch(\"__noSuchMethod__\", (([]).call).apply).isPrototypeOf(__iterator__.__defineGetter__(\"prop\", function(y) { yield y; undefined;; yield y; })))let __parent__ = <><x><y/></x></>;");
tryItOut("prototype = __proto__\n/*for..in*/M:for(const [__parent__, prop] = ({ __parent__: [__count__, , __noSuchMethod__, prop, __parent__] }) = undefined\n in (1e+81 @ 0/0)) {L:switch(((uneval( /x/g )))) { default: {} }let yield =  /x/g , prop; }");
tryItOut("/*infloop*/L:do {gc()function  __count__ (__noSuchMethod__) { return * }  } while(((yield (__count__ = ({a1:1})))));");
tryItOut("let(__iterator__) { yield;");
tryItOut("L:switch(this.__defineSetter__(\"__proto__\", function(y) { yield y; return __parent__;; yield y; })) { case (new Function)(): L:do {gc() } while(( '' ) && 0);\n/*infloop*/M:for(var __parent__; __count__; <><x><y/></x></>) {break M; }\nbreak; break; default: break; case __proto__.__proto__ getter= __count__: break; case (new [1,2,3,4].map(\nthis, <x><y/></x>)): break; case 7: break; @foo;break; case (window)(true++, <y><z/></y>): case 2: break; break;  }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in <x/>) (window)");
tryItOut("{if(<><x><y/></x></>) { if (@foo) __noSuchMethod__, __count__; else {gc() }} }");
tryItOut("/*for..in*/for(let [__proto__, constructor] = [ /x/  for each (__count__ in <x/>)]-- in <> </>) {/*for..in*/for(function::__count__ in ((function  __parent__ (__noSuchMethod__, __parent__)<x><y/></x>)(<><x><y/></x></>))){yield;[,]; }return; }");
tryItOut("with({__proto__: ((<><x><y/></x></> &= (-0) for each (__count__ in [1,,]) for each (setter\t in  \"\" )))}){var prop = prototype, constructor; }");
tryItOut("L:while((this.__defineGetter__(\"prop\", function(q) { return q; })) && 0){yield;return; }");
tryItOut("/*infloop*/for(const ({ prototype: [[, ({ __iterator__: ({ __iterator__: ({ __proto__: __count__ }), prototype: __iterator__ }) }), [], prop, ]], __iterator__: __iterator__ }) = [11,12,13,14].map; <y><z/></y>; [0].sort((<><x><y/></x></>).__defineSetter__) | 1.2e3) {yield <><x><y/></x></>;L:switch(<x><y/></x>.watch(\"__proto__\", (-1))) { default: break;  } }");
tryItOut("/*infloop*/while(<x><y/></x>){\f{}export *; }");
tryItOut("/*infloop*/for(var prop = <x/>; <x><y/></x>;  /x/g ) {export __parent__; }");
tryItOut("throw  /x/g ;");
tryItOut("L:while((export __noSuchMethod__) && 0)yyy");
tryItOut("var constructor\n/*infloop*/L:for(<><x><y/></x></>; this; undefined) yield;");
tryItOut("L: __count__ = this;");
tryItOut("/*infloop*/do {yield function ([y]) { };__proto__ = 0x99, __iterator__; } while(((eval(\"throw  /x/ ;\", @foo) if (false)).unwatch(\"__parent__\")));");
tryItOut("if(([( /x/  / <><x><y/></x></>) for each ((uneval(<x><y/></x>))['__count__'] in __noSuchMethod__) if (function ([y]) { })])) {switch(<x><y/></x>) { default:  } }");
tryItOut("while(( for (prop in *::*)) && 0){export prop;throw @foo; }");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(prop in *) {const prop = undefined;break L; }export *; }");
tryItOut("with(({ get prop prop (prototype)null })){/*infloop*/for(__noSuchMethod__.__iterator__ = null; -0; 0/0.*) break ;__proto__ =  '' , constructor; }");
tryItOut("/*infloop*/for(const __parent__;  '' .yoyo(prop =  /x/g ); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></*\n*//>) yield null;");
tryItOut("/*for..in*/for(let [__iterator__, __count__] = prop in ([eval(\"function () { return  /x/  } \", __parent__)])) /*infloop*/L:for({}; (this.zzz.zzz).__defineGetter__(\"__noSuchMethod__\", function () \"\" ); constructor =  /x/g ) {Math.pow }");
tryItOut("throw this\n");
tryItOut("do {{} } while((@foo == (yield *::*)%=~ /* Comment */ /x/ ) && 0);");
tryItOut("{export *;return; }");
tryItOut("M:if(<x/>.hasOwnProperty(\"function::__parent__\")) { if (constructor = constructor) export __parent__;} else constructor\nexport prop;\n__iterator__;\n\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (this)(null) in this) gc()");
tryItOut("/*infloop*/do gc() while((p={}, (p.z = 0.1)()));");
tryItOut("do {export *; } while((({__parent__: ,  get prop(__iterator__, __count__) { yield (new delete <x/>) }  })) && 0);");
tryItOut("/*infloop*/while(<><x><y/></x></>++){/*infloop*/for(({ constructor: get, __noSuchMethod__: __proto__ }) = <x><y/></x> /= [1,,]; __count__ ^= __iterator__.__proto__ = constructor; __noSuchMethod__ ? new Math.pow(<><x><y/><\f/x></>) : this.zzz.zzz) {throw  /x/g ; } }");
tryItOut("/*for..in*/for(__iterator__ in __noSuchMethod__ = __parent__) let __count__ = null, prop = <y><z/></y>;");
tryItOut("/*for..in*/for(__noSuchMethod__ = [z1] in <x><y/></x>) {export *; }\n");
tryItOut("M:with({prototype: <x/>()}){return *::*; }");
tryItOut("/*for..in*/for(const __parent__ in [-1].sort((function  __proto__ (__proto__) { return; } ).apply).isPrototypeOf(window == this)) switch(<x><y/></x>) { default: export constructor;break; case 3: break; case __parent__: ;break;  }");
tryItOut("var __iterator__;\nMath.pow\n");
tryItOut("/*for..in*/for(let __proto__ in (( \"\" )((({a2:z2}).__parent__ = this))))export __parent__;");
tryItOut("while(((__count__ = (__count__.yoyo(__iterator__)))) && 0)for(let y in [5,6,7,8]) var __parent__, prop;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__ in <x/>.propertyIsEnumerable(\"constructor\")) window");
tryItOut("/*infloop*/L:for(@foo.__defineGetter__(\"constructor\", [1,2,3,4].map); #1#.__lookupSetter__(\"__iterator__\");  /x/g .__defineSetter__(\"__proto__\", function(y) { yield y; return <x><y/></x>;; yield y; })) {/*infloop*/while(<><x><y/></x></>){gc()constructor = __iterator__, __proto__ = *; } }\n");
tryItOut("(function ([y]) { })\f");
tryItOut("with(@foo){const __iterator__ = .2, x::constructor; }");
tryItOut("/*for..in*/for(var [constructor, __count__] = (new (<x/>)(*::*, null)) ? @foo : null >>>=__parent__ = __noSuchMethod__\r in (this.__defineSetter__(\"__noSuchMethod__\", Math.sin))) {yield; }");
tryItOut("/*infloop*/do {return undefined; } while( /x/ );");
tryItOut("with({}) { yield __parent__.(#1#); } ");
tryItOut("if(0/0\n) {{}/*for..in*/M:(let [prototype/*, __count__] = <y><z/></y>.__defineSetter__(\"prop\", function  prototype () { ; } ) in  } else  if (@foo) continue ; else  \"\" ;");
tryItOut("let (__noSuchMethod__, __count__ = false) {  }");
tryItOut("if(*::*) yield;\n{;__iterator__ = *, __iterator__; }\n");
tryItOut("/*infloop*/while((new ( { return 1e+81 } )(<y><z/></y> >>>=__proto__))){throw undefined; }");
tryItOut("try { __proto__ = __proto__; } catch(__noSuchMethod__) { __proto__ = __proto__; } ");
tryItOut("{let (constructor = <><x><y/></x></>, __proto__) { yield  /x/g ; }/*for..in*/for(let __noSuchMethod__ = (p={}, (p.z = window)()) in *::*) ; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(\n[[,,] if (<y><z/></y>)]) { if (<y><z/></y> * __count__.unwatch(\"__noSuchMethod__\")) yield; else __count__}");
tryItOut("let(function::__noSuchMethod__, ({ prop: __count__ })) ((function(){let(__parent__, __proto__ = <><x><y/></x></>) ((function(){return prop;})());})());");
tryItOut("/*infloop*/do let (__count__ = constructor) { gc() } while(__noSuchMethod__%=*::*);");
tryItOut("/*infloop*/L:for(<employee id=\"1\"><name>Joe</name><age>20</age></employee>; (new window()); (({}).hasOwnProperty)(window, <><x><y/></x></>)) {const __parent__ = constructor, constructor; }");
tryItOut("L:switch((<x/> >> <y><z/></y>)) { case 2: with({__proto__: 0.1}){export __noSuchMethod__; }break;  }");
tryItOut("{throw *;if(<y><z/></y>) export *; else export *; }");
tryItOut("/*for..in*/for(const constructor(@foo)\f in <><x><y/></x></>) {}");
tryItOut("L: /*infloop*/for(true; window; prop) return <x><y/></x>;");
tryItOut("with((({}).__lookupGetter__).call(@foo, )){gc() }");
tryItOut("export *;");
tryItOut("export __iterator__;");
tryItOut("{(<x><y/></x>);let __count__, __iterator__ = <x/>; }");
tryItOut("let constructor = true, __count__; const __proto__;");
tryItOut("yield ({a2:z2});");
tryItOut("if(({ })) /*infloop*/while( \"\" ){; }false;");
tryItOut("/*infloop*/for(window; __count__.(new Array()).watch\f(\"__proto__\", ({}).__lookupGetter__).__lookupSetter__(\"__iterator__\"); this) continue L;/*infloop*/for( /x/ ; <y><z/></y>; 3) {export __noSuchMethod__; }");
tryItOut("if([11,12,13,14].sort <= ({ get constructor __noSuchMethod__ () { const prototype, __iterator__; } , constructor setter: function  __iterator__ () { return delete }  })) {;(undefined); }");
tryItOut("/*for..in*/L:for(constructor in ((/a/gi)(<y><z/></y>))){__count__;__parent__; }\nconst constructor;");
tryItOut("let (__noSuchMethod__ = (yield true)) { /*for..in*/for([__proto__, /*for..in*/for(var prototype = -3/0 in <x/>) {return undefined;throw  \"\" ; }] = 4. in <x><y/></x>) {gc()return <x><y/></x>; } }");
tryItOut("M:if( '' .unwatch(\"prop\")) yield; else throw null;");
tryItOut("if((<x><y/></x>.(false))) //h\n{;gc()\n }");
tryItOut("var prototype = window, prop =  /x/ ;");
tryItOut("L:if((eval(\"4.\",  '' ) !== <><x><y/></x></>.__defineSetter__(\"__iterator__\", 'haha'.split))) (<x><y/></x>); else  if ((* if ( \"\" ))) {export *;{} }\n");
tryItOut("/*infloop*/M:for(var [] = yield 0.1++; ({__count__: __iterator__+=[this] }); (this.__defineGetter__(\"__iterator__\", new Function))) with({prototype: __iterator__ = *})<y><z/></y> const constructor;");
tryItOut("/*infloop*/M:for(let constructor; __count__ = prototype; (<><x><y/></x></>.watch(\"prop\", function (function::__proto__, __noSuchMethod__)[,,]))[ \"\" ]) ( /x/ );");
tryItOut("/*infloop*/while(function ([y]) { })break \n\n");
tryItOut("{/*for..in*/for(const __iterator__ in ((var prototype = <><x><y/></x></>;function  __count__ ()<x><y/></x>\f)(<x><y/></x>)))gc() }");
tryItOut("{/*for..in*/for(const prototype in <y><z/></y>) {yield constructor; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for /*\n*/ each(<bbb xmlns:ccc=\"(--([[]] for each (__parent__ in 5.0000000000000000000000)))\"><ccc:eee></ccc:eee></bbb>.(({ __noSuchMethod__: [, ], __noSuchMethod__: constructor })).constructor in (prop = <><x><y/></x></>.*).eval([11,12,13,14].filter)) {/*for..in*/for(let prototype = ({a2:z2}) in __iterator__.prop = <><{function::__iterator__}><!--yy--></{function::__iterator__}></>) {return;/*infloop*/L:for((({}).__lookupGetter__)(<y><z/></y>, this); (uneval(({a1:1}))); *::*) let __count__ = <x/>, prop; } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let constructor = false.eval(<><x><y/></x></>); [[1]]; this) {if( '' ) {__count__, constructor = *; } else  if ( /x/g ) {yield <x><y/></x>; } else this;throw window; }");
tryItOut("{while((constructor[({ setter: ({ __count__: function::prototype }) })]) && 0){; } }");
tryItOut("/*for..in*/for(__count__ in <y><z/></y>) ");
tryItOut("const prototype, prop =  /x/ ;");
tryItOut("throw StopIteration;");
tryItOut("do {L:if(true) { \"\" ;yield; } else {const constructor = .2;return; } } while((__count__ -= true.unwatch(\"prototype\").throw(constructor = <><x><y/></x></>[(__iterator__.__parent__)])) && 0)\n/*for..in*/for(const [, , ({ __parent__: Function, __parent__: prototype }), ] in ((eval)(((yield <><x><y/></x></>)))))return <><x><y/></x></>;");
tryItOut("let ([, , , , ], case 5: ;default: break; ) { L:if(<x><y/></x> /= undefined) {{} } else  if (({}))  }");
tryItOut("/*for..in*/for(let __proto__.prop in ((Math.sin)(this.__defineSetter__(\"__count__\", Function)))){{ }{; } }");
tryItOut("/*infloop*/for(prop = ([*::*.watch(\" '' \"/*\n*/, gc)]); __iterator__; (@foo)[window].__iterator__) {export *;; }");
tryItOut("with([__noSuchMethod__%=*::* for each (prototype in this) for (__parent__( '' ) in -0)])/*infloop*/while(*::* * false){thisreturn; }");
tryItOut("for(let y in []);");
tryItOut("while((<><x><y/></x></>) && 0){prop, __iterator__; }");
tryItOut("with(undefined.__parent__){export __noSuchMethod__;; }");
tryItOut("with(({ prop: constructor, __count__: prototype }) = [, , ].__lookupGetter__(\"prototype\")){export prototype; }");
tryItOut("if((uneval(function  __proto__ () { yield null } ))) {export *;return; } else  if ((yield this)) let (__proto__, __noSuchMethod__) { ; }while((__iterator__ = <x/>) && 0){gc()export *; }");
tryItOut("if((new (true)())) { if ((prop = (<x><y/></x> .@x:: <x><y/></x>))) export __parent__; else {var constructor = -3/0; }}");
tryItOut("let __count__, prototype = <x><y/></x>;\ngc()\n");
tryItOut("/*for..in*/\ffor(const [__noSuchMethod__, prop] = \n* in ([15,16,17,18].map(new Function,  /x/g )).unwatch(\"constructor\")) {{let __parent__, __proto__;yield __noSuchMethod__; }if( \"\"  ? <zzz>@foo</zzz> : __iterator__.__iterator__ = 5.0000000000000000000000) { if (prop.prototype) {export __proto__;throw <y><z/></y>; }} else {var __count__, __proto__ = -1; } }");
tryItOut("if((<x><y/></x> * ({a1:1}))) { if (( /x/ .\nprop = __parent__.(__parent__).hasOwnProperty(\"prototype\"))) gc() else constructor, __count__;}");
tryItOut("with({__iterator__:  /x/g .isPrototypeOf(<x><y/></x> .@*:: function ([y]) { })}){{} }");
tryItOut("let (({ prop: prop, \tprop: ({ function::constructor: ({ __parent__: __proto__, __proto__: __parent__ }), __iterator__: ({ __count__: prototype, prop: __iterator__ }) }) })) { {<y><z/></y><y><z/></y>; } }");
tryItOut("if(([<x><y/></x>])) { if (__parent__.__parent__ = prop = prop >>= ({__parent__: 1e81, prototype getter: ( '' ).watch })) {let(__count__, __parent__ = <><x><y/></x></>) { yield;L:if(<zzz><x><y/></x></zzz>) { if (3) export *; else {let constructor, default: break; case 5: export *;break; case 5: @foocase <x><y/></x>:  /x/ break; ;gc() }} } else M:with((__parent__))return;}");
tryItOut("/*for..in*/for(var prototype in ((function(q) { return q; })((new null(__parent__ = window, <><x><y/></x></>)).__lookupGetter__(\"__proto__\")))){;gc() }");
tryItOut("/*infloop*/for(let __parent__; (* ? <y><z/></y> : this); ) {var __count__, prop = <><x><y/></x></>;return; }");
tryItOut("throw <x><y/></x>;");
tryItOut("{}\n(undefined).__defineSetter__");
tryItOut("__parent__ = __count__;");
tryItOut("yield [] = ((@foo)()).@foo\n");
tryItOut("/*for..in*/M:for(__iterator__ = __noSuchMethod__ = <x><y/></x> in  /x/ ) gc()");
tryItOut("/*infloop*/L:while(__proto__)let (__parent__) { yield <x><y/></x>; }");
tryItOut("if((RangeError( '' , this)) = (__noSuchMethod__ = true % (-0))) return;");
tryItOut("*;");
tryItOut("let __parent__ = false, prop = <><x><y/></x></>;\f");
tryItOut("while(( /x/ .__parent__) && 0)\r{throw __count__\n }");
tryItOut("let prop;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in *::*) {return;return; }M:with(constructor.__proto__){gc() } }");
tryItOut("this.zzz.zzz;");
tryItOut("let(__proto__) { with({constructor: <><xxx {prototype}={<y><z/></y>} /></>})(<><x><y/></x></>);");
tryItOut("/*for..in*/for(let __iterator__ in this) {yield <x><y/></x>;export __count__; }");
tryItOut("/*for..in*/for(prototype = let (__noSuchMethod__, prop = prototype) <y><z/></y> in @foo) *::*;");
tryItOut("throw StopIteration;");
tryItOut("while((<x><y/></x>) && 0)");
tryItOut("/*infloop*/L:while([1].__iterator__){/*infloop*/for(([undefined if ( /x/ )]); 0; (<x><y/></x>.(-1)).__noSuchMethod__) {return <x><y/></x>; } }");
tryItOut("if((uneval(delete))((@foo.__lookupSetter__(\"prop\")))) {(<><x><y/></x></>); } else  if ((new  /x/g () in [,,].__defineSetter__(\"__parent__\", [1,2,3,4].map))[(<><x><y/></x></>.__count__)]) {;(3); } else with((-0)(true, <x><y/></x>)){if(<x><y/></x>) return; else  if ( /x/ ) {{} } }");
tryItOut("/*for..in*/for(const [prototype, __noSuchMethod__] = (({prototype:  /x/  })).__lookupSetter__(\"function::prop\") in 1e4) if(true) {} else {gc() }");
