tryItOut("M:if([,]) {{} }");
tryItOut("M:if(__parent__.__parent__ = prototype-=<x><y/></x>) true else  if ((__parent__ = ({ prop: prop }))) {continue L;export __proto__; } else {return;window; }");
tryItOut("if(<><bbb xmlns=\"undefined &= 4.\">yyy</bbb></>) {L:if(true) { if ( '' ) export __count__; else {yield ({a2:z2});{} }} } else  if (({ constructor: prop, prop: __parent__ }) = ([,,] if (1.3))) {throw 3.141592653589793;gc() }");
tryItOut("L: break ;");
tryItOut("return;");
tryItOut("do {continue ;yield undefined; } while(((window.__proto__|=#1=[#1#])) && 0);");
tryItOut("M:with(*){__iterator__; }");
tryItOut("do (*); while((<><x><y/></x></>) && 0);");
tryItOut("/*infloop*/for(Function(<x/>, ) .@ *::*; <><zzz>__parent__ * window</zzz></>\t; constructor = true) with({}) export *;");
tryItOut("gc()yield\n");
tryItOut("try { yield; } catch(constructor) { {} } finally { export __iterator__; } ");
tryItOut("let (({ function::__count__: ({ prototype: __count__ }) }) = <x><y/></x>.(<x><y/></x>), __count__) { {throw ; } }");
tryItOut("L: {(function () { return #1# } ).call }");
tryItOut("/*for..in*/for(var __proto__ = prop in undefined) export prop;");
tryItOut("{let prototype; }");
tryItOut("prototype, constructor\ngc() const prop;");
tryItOut("/*for..in*/for([__iterator__, prototype] = [] instanceof (4. * [,,z1]) in (prop: <y><z/></y> >> function::constructor) - ([ \"\" ].some((function  prototype (__count__, {gc() }) { yield * } ).call))) return;");
tryItOut("/*for..in*/L:for(let __parent__ in ((function(q) { return q; })((new Function)((((eval).apply).call(this, )))))){L:if(<><x><y/></x></>) var __count__ = prop, constructor =  \"\" ; else  if \r( /x/g ) throw window; else (3).apply }");
tryItOut("with({}) { with({}) for(let y in [5,6,7,8])  } ");
tryItOut("{function (__proto__) { yield <x/> }  }");
tryItOut("/*for..in*/L:for(var __proto__ in ((undefined.__parent__)((this.zzz.zzz)))){try { throw __proto__; } catch(__parent__) { __iterator__ }  }");
tryItOut("yield;");
tryItOut("/*for..in*/L:for(const [__count__, __count__] = window.throw((__iterator__%=5.0000000000000000000000)) in yield;--) {(function(y) { yield y; ; yield y; }).applyvar prop, __parent__; }");
tryItOut("/*infloop*/do <><x><y/></x></>; while(this ^=  '' );");
tryItOut("/*infloop*/do {(<><x><y/></x></>);; } while(((yield (__iterator__)())));");
tryItOut("L: {__iterator__, __count__;export function::__count__\n }");
tryItOut("/*infloop*/do gc() while\f(({ prop: prototype\f }) = constructor = prototype++);");
tryItOut("L:if(yield constructor.(0/0 -=  \"\" )) {return; } else {prop, __parent__ = undefined; }");
tryItOut("yield __count__");
tryItOut("{let __count__, constructor; }");
tryItOut("prototype = __parent__;");
tryItOut("if([15,16,17,18].sort((new Function(\"(new Function(\\\"{}\\\"))\\n/*for..in*/L:for(const __proto__ = \\f\\n__iterator__+=(-0) in <x/>) eval\")), undefined)) { if ((<x><y/></x> = 0/0)) /*for..in*/for(const [prototype, prototype] = [1,,] in <y><z/></y>) const prototype = constructor; else {/*for..in*/for(var function::prototype in (((null[<x><y/></x>]))(({ __count__: constructor }) = prop))){break L;var __proto__ = window, __parent__; }const __proto__, __count__ = 0; }}");
tryItOut("if((window--.__count__)) { if ((null <<= prototype)) {/*infloop*/for(var prototype; (yield <x><y/></x>); (1.2e3 / <x><y/></x> >> *::*)) export *; } else let __proto__ = <y><z/></y>, __parent__;}");
tryItOut("this.zzz.zzz) {{}yield; }");
tryItOut("let(({ prop: [], constructor: __count__ }), __count__) { this.zzz.zzz");
tryItOut("( /x/ )\n");
tryItOut("continue ;");
tryItOut("/*infloop*/M:for(__count__ = [<x><y/></x>].filter(<><x><y/></\fx></>); 1e-81 .@x:: ( /x/ .__defineSetter__(\"__parent__\", ({}).hasOwnProperty)); (<><x><y/></x></> + <y><z/></y>)) {(<x><y/></x>); }");
tryItOut("/*for..in*/for(var prop = (-1) in -0) throw this;");
tryItOut("var __count__ = <><x><y/></x></>, __proto__\n");
tryItOut("L:with(((<x/>.yoyo(__proto__)).__defineSetter__(\"__iterator__\", (new Function(\";\"))))){gc()break L; }");
tryItOut("{gc() }");
tryItOut("do {/*for..in*/for(let [__iterator__, __proto__] = __iterator__ in <><x><y/></x></>) continue ; } while((this.__defineSetter__(\"({ constructor: [, ], prop: ({ __count__: __noSuchMethod__, __proto__: prototype.__proto__ }) })\", (1 for (x in [])))) && 0);");
tryItOut("continue \n");
tryItOut(";true;");
tryItOut("this.zzz.zzz;");
tryItOut("yield;\n{let __iterator__ = false, __proto__ = [];\t }\n");
tryItOut("let (__iterator__, prototype = ({constructor: (\r{prop getter: (new Function(\"{}\")) })})) { if([[]]) yield; else  if (true) {{}var __parent__ = -0, prop; } else  }");
tryItOut("while((//h\n([z1,,].__lookupGetter__(\"__parent__\"))) && 0){(@foo).watchexport __noSuchMethod__; }");
tryItOut("with({__count__: ({ set constructor __parent__ (__iterator__, prototype) { throw [,,]; }  })}){gc() }");
tryItOut("let(prototype) { throw StopIteration;");
tryItOut("/*infloop*/for(const function::__count__ = *; function::__noSuchMethod__; 1e81) const __proto__ = <><x><y/></x></>;");
tryItOut("/*infloop*/L:while((null)(<><x><y/></x></>)){const prop; }");
tryItOut("/*infloop*/for(const ({ __count__: constructor }) =  /x/  *= <x><y/></x>; this.__defineSetter__(\"__count__\", function  __parent__ (prop, __proto__) { yield constructor } ); <><x><y/></x></>) throw window;");
tryItOut("while(((__iterator__.__count__ setter= <x><y/></x>)) && 0){return @foo; }");
tryItOut("/*infloop*/L:for(let prop; ({__parent__: window}); ((yield __noSuchMethod__ ^= window) for (__proto__ in [[1]]) for ([].__noSuchMethod__ in 1e+81) for (__parent__ in 1e+81).propertyIsEnumerable(\"prop\")).valueOf(\"number\")) {(@foo);let (prop) { throw prototype; } }");
tryItOut("if(<y><z/></y>(@foo, this).*) {while((<x><y/></x>) && 0){{}function (__proto__) { yield (-1) }  } }");
tryItOut("L:if(((yield ({__count__: this, __iterator__ setter: Math.sin })))) /*for..in*/for(__proto__ = undefined in 3) { } else  if (( \"\"  ? window : 1e4)) throw this @ <x/>; else {/*for..in*/for(const (__count__) in (([1,2,3,4].map)((new (undefined)(*))))){}throw [,,]; }");
tryItOut("switch(__noSuchMethod__ = <><x><y/></x></>) { default: ([z1,,]);break; break;  }");
tryItOut("if(((([1,2,3,4].map).apply)(__proto__))) yield; else  if () {throw  '' ; } else {yield;return; }");
tryItOut("if(prop) { if ([z1,,].__defineGetter__(\"get\", <><x><y/></x></>)) {throw @foo;( /x/ ); }} else {break M; }");
tryItOut("export *;");
tryItOut("throw __iterator__;");
tryItOut("{return 3;/*for..in*/for(let __parent__ in <y><z/></y>\f) {{};<><x><y/></x></>; }yield __parent__; }");
tryItOut("with((* << @foo).__lookupGetter__(\"constructor\"))prototype");
tryItOut("if(prototype) constructor: null else  if (({})) {return; } else [1,2,3,4].map");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __proto__ in (window[arguments])) {return; }");
tryItOut("export *;");
tryItOut("/*infloop*/for((yield window); this.__defineSetter__(\"__noSuchMethod__\", \ffunction(y) { yield y;  /x/g ;; yield y; }); <y><z/></y>) {with({}) for(let y in []); }");
tryItOut("if(__iterator__ = <y><z/></y>--) {L: {export *; } } else  if (this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) return;\n;\n else yield;");
tryItOut("M:if(<y><z/></y>.__count__ = #1=[#1#]) {} else  if (__proto__)  else return;");
tryItOut("/*infloop*/for(const ({ arguments: ({ delete: [({ __iterator__: __iterator__, __proto__: __parent__ }), []] }) }) = (#1=[#1#].__defineGetter__(\"prototype\", function () { const prop = *, __parent__; } )).__lookupGetter__(\"__parent__\"); [15,16,17,18].filter('haha'.split, -1); eval(\"return;\", prop.isPrototypeOf(<y><z/></y>))) gc()");
tryItOut("yield true\n");
tryItOut("/*for..in*/L:for(const __parent__\f = this.eval(window) in 3.141592653589793) {}");
tryItOut("/*for..in*/M:for(const __noSuchMethod__ = __parent__.(<x><y/></x>) in new RangeError(function(id) { return id })) L:with(<x/>){ }");
tryItOut("/*infloop*/do /*infloop*/for((prop.__parent__); (@foo + <x><y/></x>); <><x><y/></x></> %  /x/g )  while(((__parent__ = <y><z/></y>).@* .@*:: ((prop)( \"\" , __noSuchMethod__)).propertyIsEnumerable(\"__iterator__\")));");
tryItOut("/*infloop*/do throw undefined; while(<y><z/></y>);");
tryItOut(" '' ");
tryItOut("{}");
tryItOut("/*for..in*/for([__count__, __parent__] = 1e81 in  /x/g ) {var constructor; }");
tryItOut("throw StopIteration;");
tryItOut("prop = __proto__;");
tryItOut("if((undefined.propertyIsEnumerable(\"__noSuchMethod__\")).* = (*::*.yoyo( /x/g ))) {/*for..in*/for(prototype in undefined()) continue M; } else {if(true) { if (true) throw <x><y/></x>; else } }");
tryItOut("return [11,12,13,14].filter;");
tryItOut("L:if(*.hasOwnProperty(\"__iterator__\")) yield __parent__ = __iterator__; else  if (new Array((__parent__ = []), )) {export __parent__;L:do with(arguments\f){return @foo; } while(((new (undefined)(arguments, 1.2e3))) && 0); }");
tryItOut("/*infloop*/do { } while(@foo);");
tryItOut("return prop.valueOf(\"number\");");
tryItOut("let (__parent__ = __parent__ = <y><z/></y>) { /*infloop*/for(const __count__; 0; <x/>) {var __iterator__ = true, __noSuchMethod__ =  /x/ ; } }");
tryItOut("prop = __count__;");
tryItOut("while(((true & [({ prototype: return;, __noSuchMethod__: ({ __count__: __parent__ }) }) = [, , M:with({__proto__: *}), constructor]])) && 0){if() 033 else  if (<y><z/></y>) {return; } }");
tryItOut("export *;");
tryItOut("M:switch( '' ) { case 1: with(prop instanceof *){throw 0/0; }break;  }");
tryItOut("switch(null) { default: break; case <x><y/></x>: case : ( /x/ );break; case 3/0: __noSuchMethod__ = [z1,,]; }");
tryItOut("M:do {([z1,,]); } while((__proto__ = (true ===  '' )) && 0);");
tryItOut("<y><z/></y>\n(window);if(<><x><y/></x></> ^ 0) var __parent__ = true; else  if (prototype-=[1]) {}//h\n");
tryItOut("if(this.zzz.zzz) ({}).__lookupGetter__ else  if (<y><z/></y>) continue M;");
tryItOut("if(yield ) { if (((({}).__lookupGetter__)(this, prop)) ? ( /x/  if (__proto__)) : #0=this) {{} } else {let constructor = <y><z/></y>;var prop; }\f}\nwith({constructor: (__proto__ =  '' )}){function  __proto__ (__proto__)-0 }\n");
tryItOut("return (new (-3/0)(this));");
tryItOut("for(let y in []);");
tryItOut("L:if(<x/>.eval(<y><z/></y>)) { if (this.zzz.zzz) let (constructor = (new ([1,2,3,4].slice)())) { gc() } else /*for..in*/for(const [each, __noSuchMethod__] = eval(\"gc()\", constructor) === ([,,z1](yield <x/>;, <x><y/></x>)) in function::__count__ = __iterator__) return true;}");
tryItOut("/*for..in*/for(const [__proto__, __proto__] = (eval(\"try { gc() } catch(prop) { throw false; } \", (new ( \"\"  for each (constructor in <y><z/></y>))(({__noSuchMethod__ setter: <><x><y/></x></> }))))) .. [15,16,17,18].filter(__count__, <><x><y/></x></>) in ((__noSuchMethod__+= /x/g ) for each (prop in <x><y/></x>) for each (prop in  '' )).__lookupGetter__(\"__noSuchMethod__\")) throw this.__defineGetter__(\"__noSuchMethod__\", function () /x/g );");
tryItOut("/*for..in*/for(const __parent__ in (('haha'.split)(-1)))if( \"\" ) ");
tryItOut("L: {var __proto__, __noSuchMethod__ = (-0); }");
tryItOut("L:if([<x><y/></x>].sort(Function)) { if ( ''  .@x:: *) {break ; }} else yield;");
tryItOut("M:if(this.isPrototypeOf(null)) export __parent__; else {{__proto__;yield; } const __proto__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in 'fafafa'.replace(/a/g, function(y) { yield y; gc(); yield y; })) (this.zzz.zzz);");
tryItOut("export *;\nexport __count__;\n");
tryItOut("const __iterator__, __noSuchMethod__ =  \"\" \n");
tryItOut("/*infloop*/do [1,2,3,4].slice while(__count__ =  \"\" );");
tryItOut("switch( /x/ .__defineSetter__(\"prop\", ({}).__lookupGetter__)) { default: case 5:  }");
tryItOut("M:with((!<x><y/></x>))this;");
tryItOut("prototype = prototype;");
tryItOut("if(__noSuchMethod__) {continue M; } else  if (<x><y/></x>) {var constructor, constructor; } else return <><x><y/></x></>\f;");
tryItOut("if(({a1:1}).__defineGetter__(\"__iterator__\", function  __parent__ (__parent__) { yield true; } ).__defineGetter__(\"__iterator__\", ({}).hasOwnProperty)) break M; else  if ( \"\"  ? ({}) :  \"\" ) {if(4.) 'haha'.split else  if (@foo) {throw window; } }");
tryItOut("{/*infloop*/while((new [[1]]())){return; }(window\t); }");
tryItOut("prototype\n");
tryItOut("while(( '' ) && 0)throw  /x/g ; const prototype;");
tryItOut("if(({ __noSuchMethod__: x::<x/>, __iterator__: __proto__ }) = 033) { if ([11,12,13,14].map) {function (__count__, prototype) { {} } yield; }} else ");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*for..in*/L:for(const prototype in 0x99) {{}yield; }");
tryItOut("L:if(new (__count__)(yield <x/>)) let __parent__; else {[1,2,3,4].slice }");
tryItOut("(3/0);");
tryItOut("if(this.__defineGetter__(\"prototype\", ((new Function(\"export *;\"))).call)) /*for..in*/for(let (1.3)(<x/>) in ((gc)(([11,12,13,14].sort).constructor = (<><x><y/></x></> & <y><z/></y>)))){export __proto__; }");
tryItOut("if(([] for (true in *) if (<><x><y/></x></>))) {L:if(true) {export *; }yield <><x><y/></x></>; } else  if (3/0) {yield -3/0;return true; }");
tryItOut("\n");
tryItOut("if(({ get prototype(constructor, __count__) { return window } ,  get x::({})(__count__) { return <x><y/></x> } /*\n*/ }) ? [[]]++ : false.hasOwnProperty(\"__iterator__\").hasOwnProperty(\"constructor\")) {with({__count__: this}){; } }");
tryItOut("yield\nyield 1e81;");
tryItOut("if(let (constructor =  /* Comment */(this.__defineGetter__(\"prototype\", Math.sin)), prototype) window.__parent__) { if (new Object(__iterator__ = this, <x><y/></x>)) {yield;window; } else prototype}");
tryItOut("this.zzz.zzz;");
tryItOut("with({}) { return (<x/>); } ");
tryItOut("/*infloop*/while( /x/g )yield <x/>;");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut(" const constructor;");
tryItOut("return;");
tryItOut("/*infloop*/for(let constructor; eval(\"undefined\", undefined);  /x/ ) {return;yield *; }");
tryItOut("M:while((*::* = true) && 0){yield;with({__parent__: (new @foo( /x/ , <><x><y/></x></>))}){return <><x><y/></x></>; } }");
tryItOut("{/*infloop*/for(let __iterator__ = <x><y/></x>; [[1]]; @foo) {} }");
tryItOut("throw __iterator__;");
tryItOut("if(<><x><y/></x></>) var prop = @foo, __noSuchMethod__ = constructor; else  if (<><x><y/></x></>) new Function else {return this; }");
tryItOut("/*infloop*/for(const prototype; <x><y/></x>; window) continue L;");
tryItOut("/*for..in*/M:for(const __proto__ in ((function () { yield  /x/g  } )(false))){ }export prototype;");
tryItOut("if(new __proto__) { if (\n4.) return <><x><y/></x></>;} else <><x><y/></x></>; }");
tryItOut("if(let (__noSuchMethod__ = <y><z/></y>, ) __parent__ >= undefined.__count__ ? 'fafafa'.replace(/a/g, ([1,2,3,4].slice).call) for each (__count__ in [z1]) if (<><x><y/></x></>) : <x><y/></x>.__defineSetter__(\"function::__proto__\", eval).__defineGetter__(\"prop\", (1 for (x in [])))) {{@foo;gc() } }\n");
tryItOut("with({}) { return (<x/>.throw(__parent__)); } ");
tryItOut("M:with(prop){var __parent__, __count__ = <x/>; }");
tryItOut("/*for..in*/M:for(const constructor.__count__ in []) let __proto__;");
tryItOut("(<><x><y/></x></>);export __noSuchMethod__;");
tryItOut("let (__iterator__ = (null[window])( %= true :: //h\n<><x><y/></x></>), __iterator__ = eval(\"(Number())\", (3.141592653589793 >>= undefined) > //h\n({a1:1}).unwatch(\"__noSuchMethod__\"))) { /*for..in*/for([prototype, yield] = *::* in (-0)) continue ; }");
tryItOut("{/*for..in*/for([__count__, constructor] = [15,16,17,18].some([[constructor], , __noSuchMethod__] = new (({}).hasOwnProperty)(<><x><y/></x></>, 1.2e3), prototype = @foo) in undefined\n) yield  '' ; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/for(const __iterator__ in ([1.3.*])) export *");
tryItOut("yield *; const __count__;");
tryItOut("yield <x><y/></x>(-3/0,  '' );");
tryItOut("/*for..in*/for(let this.__defineGetter__(\"__count__\", (false).__defineSetter__) in (((__proto__.(<><x><y/></x></>.throw(<></*\n*/x><y/></x></>))).__defineSetter__)(window))){/*for..in*/M:for(var [prop, __iterator__] = (function () { return <><x><y></x'</> } ).call(this,  /x/ )\t in  \"\" ) /*infloop*/M:while(<x/>){var __count__; }if(<><x><y/></x></>) {export __noSuchMethod__; } }");
tryItOut("/*infloop*/for((this.zzz.zzz);  /x/ ; ({__parent__: null}).__lookupGetter__(\"__noSuchMethod__\")) {{}yield; }");
tryItOut("{; }");
tryItOut(" const __proto__;");
tryItOut("let(__count__) { return;");
tryItOut("if(__count__ = constructor)  '' ; else  if (__parent__ = <x><y/></x>) gc()");
tryItOut("{{} }");
tryItOut("return <y><z/></y>\n");
tryItOut("let (__proto__ = <><x><y/></x></>,  for (__parent__ in  '' )) { if(false) { if ( /x/g ) yield <x><y/></x>; else {export *; }} } const prop;");
tryItOut("{return;with({prop: !*::*}){gc()yield; } }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prototype] = yield prototype in null) {(*::*); }");
tryItOut("var __count__; const __proto__;");
tryItOut("/*for..in*/for(prototype = Iterator(([15,16,17,18].some(({}).hasOwnProperty,  \"\" )), @foo) in ((({}).__lookupGetter__)()).*) {for(let y in [5,6,7,8]) with({}) { {} } while(( /x/ ) && 0){export *;throw 4.; } }");
tryItOut("export __noSuchMethod__;\n;\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in <bbb xmlns=\"null\"><!--yy--></bbb>.( /x/ .__lookupSetter__(\"__iterator__\"))) /*for..in*/for(let prototype in ((((*::*.hasOwnProperty(\"__parent__\"))).watch)(*))){export __proto__; }");
tryItOut("/*infloop*/for(prop; <x><y/></x>; undefined) export prop;");
tryItOut("let( , ({ __count__: __noSuchMethod__, constructor: __count__ })) { this.zzz.zzz;");
tryItOut("/*for..in*/L:for(var constructor((@foo)[true]) in ((Function)(1.3.@foo))){/*for..in*/for(const constructor in ((5.0000000000000000000000)(#3={a:#3#}))){yield <x><y/></x>; }__count__ = [], __noSuchMethod__; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__((yield undefined) & __parent__.__lookupSetter__(\"constructor\")) in ((yield __count__.__proto__ setter= function () { return <><x><y/></x></> } .isPrototypeOf(constructor & *::*)))) (4.);");
tryItOut("L: {export *;{} }");
tryItOut("return (<><x><y/></x></>.yoyo(__parent__));");
tryItOut("/*for..in*/for(const (__iterator__) in ((function  __iterator__ (({ constructor: [] })) { return new gc() } )((this.__defineGetter__(\"__count__\", ( /x/g \n).watch)))))\t{{3.141592653589793; } }");
tryItOut("({ __noSuchMethod__: [, __iterator__, ({ constructor: ({ __iterator__: ({ __count__: prototype }) }), prototype: prop }), , ], __parent__: [, , , ({ __noSuchMethod__: ({ prop: ({ function::constructor: prototype, __noSuchMethod__: __noSuchMethod__ }), <x><y/></x>['__iterator__']: Math.pow }), __proto__: __noSuchMethod__ }), [[[, ], ({ __proto__: __noSuchMethod__ }), , ({ __proto__: prototype })]]] }) = __noSuchMethod__;");
tryItOut("/*infloop*/M:while(0){const __proto__;;Math.sin }");
tryItOut("/*infloop*/while((constructor ^= null).throw([null])){L: { }__parent__, __proto__ }");
tryItOut("<><bbb xmlns:ccc=\"(uneval(*))\"><ccc:eee></ccc:eee></bbb></>");
tryItOut("/*infloop*/L:while( /x/g ){<y><z/></y>; }");
tryItOut("while((3) && 0)");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((5.0000000000000000000000.valueOf(\"number\"))(new <y><z/></y>()) in <x><y/></x>) {__iterator__;throw null; }");
tryItOut("yield <><x><y/></x></>\f;");
tryItOut("/*infloop*/L:for(__parent__; (prototype.(function(id) { return id }).__defineSetter__(\"__noSuchMethod__\", 'haha'.split)); ( '' .yoyo(*::*))) {({}).__lookupGetter__if(#0=<><x><y/></x></>) const __proto__, prototype = ({}); }");
tryItOut("__iterator__ = __count__;");
tryItOut("/*infloop*/L:do {gc() } while([z1,,])\n");
tryItOut("return;");
tryItOut("do gc() while((window) && 0); const constructor;with(<x><y/></x>)continue \ndo {return (*::*++); } while((@foo.yoyo(0)) && 0);");
tryItOut("if((__noSuchMethod__.__noSuchMethod__)) {/*infloop*/for(let prop = (function ([y]) { }.throw(*::*)); ++<><x><y/></x></>; (function (__count__)window\f).call(<x><y/></x>, -3/0, <x><y/></x>)) L:with(0x99)return  /x/g ;/*for..in*/for(const prototype in <x/>) {<x></*\n*/y/></x>; } } else {/*infloop*/L:do {gc() } while(new (1e81)()); /x/g ; }");
tryItOut("let (constructor) { {L:with({prototype: this})prototype = true; } }");
tryItOut("{/*infloop*/for(<><x><y/></x></>; <y><z/></y>; undefined) {(prop);yield; } }");
tryItOut("if(<><x><y/></x></>) {(<><y></x>);export __parent__; } else  if (*) export __count__; else \n");
tryItOut("if( /* Comment */true) { if (__noSuchMethod__ *= <x><y/></x> .@ this.zzz.zzz()) {break L; } else {0/0;__iterator__ = this, __proto__ = [,,]; }}");
tryItOut("continue M const constructor;");
tryItOut("/*for..in*/for([prop, prototype] = ((x::constructor = new Exception(false)) | (new Boolean([<employee id=\"1\"><name>Joe</name><age>20</age></employee>])(prototype-=<y><z/></y>, (({__noSuchMethod__: <x/> }))))) in (@foo.hasOwnProperty(\"prototype\"))(RangeError(), this.zzz.zzz)) return <x><y/></x>\n const __proto__;");
tryItOut("/*infloop*/for(let __iterator__ = __parent__; this; ({a1:1})) let __count__, constructor = <><x><y/></x></>;");
tryItOut("throw StopIteration;");
tryItOut("yield;");
tryItOut("/*for..in*/for(const prototype = eval(\"yield;\", ([z1,,].__lookupSetter__(\"constructor\"))) in (((<x/> << <><x><y/></x></>))[this]prop.__defineSetter__'(function  __proto__ (__parent__,  { return __parent__ } )((p={}, (p.z = <x><y/></x>)()))/*))) {{}\ndo {Function } while(( /* Comment */<><x><y/></x></>) && 0); }");
tryItOut("/*infloop*/while(){/*for..in*/for(var [__proto__, delete] = ((yield <x/>)) in [,,]) {; }if(*::* == this) gc() else  if (\n* instanceof [,]) ({}).__lookupGetter__ else {const prop = *{if(__parent__ >>= //h\n<y><z/></y>) { } else  if ([@foo].map((\n<><x><y/></x></>).__defineSetter__)) var prop, __noSuchMethod__ = 1e-81; else {'haha'.split }/*\n*/var constructor; } ; } }");
