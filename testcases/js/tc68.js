tryItOut("if((__proto__.prop = __iterator__).valueOf(\"number\")) {var __count__, __proto__ = prop = ({});const __count__, __noSuchMethod__; }");
tryItOut("/*infloop*/for(__iterator__; __iterator__.throw(<x/>.__lookupGetter__(\"__parent__\")); (__proto__ = function ([y]) { })(/[1.2e3.throw([1])) L:if( /x/g ) { if (3/0) {throw  /x/g ; } else __count__ = <x><y/></x>, __parent__;}");
tryItOut("let(__iterator__ = (this.__defineSetter__(\"__proto__\", ({}).__lookupGetter__)), prop) { yield prop = ({__proto__: #0=({__parent__: this}), __parent__ getter: function(q) { return q; } });");
tryItOut("/*infloop*/for(let prop; ([1,2,3,4].map).call(*::*, __parent__); (constructor = __count__) for each (__noSuchMethod__ in *::*.__lookupGetter__(\"__proto__\")) for (((([,]).watch)(function ([y]) { }, window))(__iterator__ = <><x><y/></x></>) in @foo) for (constructor.prototype in  /x/ ) if ( '' ) ? (({ __noSuchMethod__: __proto__ }) = new true((function ([y]) { })(), <x/>)) : (__noSuchMethod__)[( /x/ ).__defineSetter__]) function(q) { return q; }");
tryItOut("while((eval(\"<><x><y/></x></>\",  /x/ )) && 0){}");
tryItOut("\n");
tryItOut("if((((constructor = <y><z/></y>)((uneval(<x/>)), <y><z/></y>)) *= __iterator__.__noSuchMethod__ = new Boolean(null, [z1,,]))) { if ((function ([y]) { })().*[<y><z/></y>]) {return;<x><y/></x>; }} else ;");
tryItOut("{<><x><y/></x></>;throw window; }");
tryItOut("/*infloop*/for(*::*.__lookupSetter__(\"__proto__\"); [({ __noSuchMethod__: ({ constructor: [] }), __noSuchMethod__: prototype }), ({ __noSuchMethod__: [({ __parent__: __proto__ }), __noSuchMethod__, __noSuchMethod__, ({ constructor: constructor, __parent__\t: constructor }), __count__], __iterator__: true }), , , ({ prototype: __proto__, prop: [] })] = return window; (uneval(({__parent__ setter: -3/0 })))) return __noSuchMethod__ || __noSuchMethod__+=<x><y/></x>;");
tryItOut("if(<><x><y/*\n*//></x></>.@foo) {this.zzz.zzz; } else  if (((~this).@foo)) {{export prototype; } }");
tryItOut("if((new Array(constructor = undefined && null))((this.__defineSetter__(\"__proto__\", function(y) { yield y; return window;; yield y; })))) /*infloop*/for([, []] = [*.__parent__.(/a/gi); [,,z1]; eval(\"window\", false)) if(null) yield; else break L;");
tryItOut("M:if([11,12,13,14].filter) {yield (-1);yield *::*; } else  if ( /x/g .yoyo( '' )) {L:if(#1=({__noSuchMethod__: <x/>})) {} else return  \"\" ; } else const yield;");
tryItOut("switch(<{__parent__}><xxx {__proto__}={true} /> </{__parent__}>) { case yield __noSuchMethod__ = (set = this).(new (true)()): default: case __count__ = prop.constructor: __count__ = <x/>;/*infloop*/M:while(<x><y/></x>.unwatch(\"__parent__\"))function  prototype (constructor, __noSuchMethod__) { ; } break; if( /x/g ) return #1=[#1#];case (let __parent__, prototype): yield window;break; break; case 1:  }");
tryItOut("/*infloop*/for(let __proto__; [-3/0 for each (prop in ( /x/g (prototype))) for (__parent__ in ~null.isPrototypeOf(((function /* __count__ (__count__) {  } ).call(window, window, <x><y/></x>)))) for (__iterator__ in ({__parent__: <x><y/></x> })) if (<y><z/></y>)]; (<><zzz>this</zzz></>[false])) /*for..in*/for(const [prop, prop] = let (prop, constructor = __noSuchMethod__) 0/0 in RangeError(<><x><y/></x></>)) yield;");
tryItOut("yield\n\n/*for..in*/M:for(__noSuchMethod__ = (window.prop) in *) {}");
tryItOut("L: ");
tryItOut("L:if(<><x><y/></x></> > prop) {throw window;continue M; } else  if (0.1) [1,2,3,4].map");
tryItOut("/*for..in*/\tfor(prototype = __count__ = <x><y/></x> in *::*) {__proto__ }");
tryItOut("throw __count__;");
tryItOut("if((yield new (({ __iterator__: __parent__ }) = (window <<= false))((({prototype: undefined}).__defineGetter__(\"__iterator__\", gc)), prototype = null))) { if (({}.isPrototypeOf(prop))) /*for..in*/for(let constructor in ((function (function::prop)\fnew (function  __iterator__ () { export getter; } ).call((<><x><y/></x></> |= constructor), <y><z/></y>))(Date(*::*, [[]])))){}} else { }");
tryItOut("if(<x><y/></x> ^ <y><z/></y> >= constructor = constructor) { if (false) {yield\n }} else {/*infloop*/do { } while(__proto__);(*::*); }");
tryItOut("if(yield undefined.__defineSetter__(\"__iterator__\", new Function)) throw <y><z/></y>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in x::__parent__ %= ((this for each (__noSuchMethod__ in *::*))).@*) {/*infloop*/while(<x><y/></x>.watch(\"prop\", (null).watch))yield;{; } }");
tryItOut("for(let y in [5,6,7,8]) const __count__ = this;");
tryItOut("{var __parent__ =  /x/ ; }");
tryItOut("M:switch(<x><y/></x>.( '' )) { default: case eval(\"yield undefined;\", <x><y/></x>):  }");
tryItOut("");
tryItOut("/*infloop*/for(({ __parent__: [], __count__: __parent__ }) = 4. - <><x><y/></x></>; __noSuchMethod__.__defineGetter__(\"__parent__\", ({}).__lookupGetter__); ('fafafa'.replace(/a/g, *))) {export *;{} }");
tryItOut("throw <x><y/></x>;");
tryItOut("/*for..in*/__iterator__");
tryItOut("if([\t /x/ ].sort(Math.sin)) {throw <y><z/></y>;yield; } else {var __parent__; }");
tryItOut("/*for..in*/for(var [constructor, __parent__] = yield (function ([y]) { })() in ( \"\" )) yield * && function ([y]) { };");
tryItOut("yield <y><z/></y>\n");
tryItOut("return <>__iterator__ setter: <><x><y/></x></></>\n/*for..in*/for(x::constructor in ((function(y) { yield y; export __proto__;; yield y; })(<x><y/></x>))){break M;yield; }");
tryItOut("this.zzz.zzz;");
tryItOut("\n");
tryItOut("/*infloop*/while(({constructor: null,  get __noSuchMethod__(__noSuchMethod__)1e81 instanceof [,,z1].hasOwnProperty(\"__iterator__\") }))/*for..in*/for(__parent__ in ((Math.sin)(__proto__ = this)))var prop, __proto__ =  '' ;");
tryItOut("let (* =  \"\" ) { yield; }");
tryItOut("export *;");
tryItOut("while((('fafafa'.replace(/a/g, ((new Number(((yield (__count__.__noSuchMethod__ getter= function(q) { return q; }))), undefined))).apply))) && 0){return;\n/*for..in*/M:for(let prototype in ((function  prototype (constructor, prototype)0x99)(1.3)))continue M;\n }");
tryItOut("let(__count__, prop = (<><x><y/></x></>.unwatch(\"constructor\"))) { __count__((( /x/g ))) = prototype;");
tryItOut("/*infloop*/while(__iterator__ = 1e-81)while((<x/>) && 0)__proto__, __count__ = <y><z/></y>;");
tryItOut("/*infloop*/M:do { } while(<x><y/></x>.prop);");
tryItOut("with({__proto__: 'fafafa'.replace(/a/g, (<y><z/></y>).watch)}){let constructor; }");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) with({}) prototype = __parent__;");
tryItOut("while((({}).__lookupGetter__) && 0)");
tryItOut("/*for..in*/M:for(const __proto__ in  '' ) {__parent__ = undefined, __proto__ = null;{} } const __proto__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (prop(constructor)) in *::*) {yield #1# %= <y><z/></y>; }");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("let(prop = ()) { with({}) { try { {} } catch(__parent__ if (function(){break ;})()) { return @foo; } catch(__proto__ if ((yield  '' ))) { yield <x><y/></x>; } finally { var constructor = <><x><y/></x></>; }  } ");
tryItOut("L:if(-3/0) {return delete; } else  if (//h\n({ constructor:  '' ['prop'], yield: ({ __iterator__: __noSuchMethod__ }) }) = (constructor = <x><y/></x> .@ )\r.propertyIsEnumerable(\"prop\")) {yield; }");
tryItOut("if((uneval(<x/>))) {export __parent__; } else  if (this.__defineSetter__(\"__noSuchMethod__\", *)) yield window;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let ({ prop: __iterator__, setter: prototype }) in (__proto__ = <x/>)) export *;");
tryItOut("with((__proto__.__proto__ setter= function  prototype (prop)1.2e3)){yield <><x><y/></x></>;throw this; }");
tryItOut("throw <x><y/></x>;");
tryItOut("/*infloop*/do {var \r__proto__ = 0.1, __proto__ = *::*; } while(eval(\"<x/>;\", *));");
tryItOut("/*infloop*/for(var ({ __proto__: ({ __iterator__: [__noSuchMethod__, __noSuchMethod__, , , __parent__], __proto__: __count__ }) }) = [15,16,17,18].filter((new Function(\"let prototype =  '' ;\")), (new (__iterator__ * [])(yield (window)(1.3) = (1e-81++), new case 0: ;([,,z1].__count__)))); (<x><y/></x>.valueOf(\"number\"))[(p={}, (p.z = false)())].\fvalueOf(\"number\"); this) with({__noSuchMethod__: __noSuchMethod__ = (<><x><y/></x></> &= <><x><y/></x></>)}){if(__count__) yield *; else  if (<x/>) return; else ( /x/ );gc() }");
tryItOut("/*for..in*/for(let (__iterator__) in ((/a/gi)((p={}, (p.z = [1])())))){export [z1]; }");
tryItOut("/*for..in*/for(var prop = (prototype.__defineGetter__(\"prop\", 0/0).__parent__) in ({a1:1}) / __noSuchMethod__.__noSuchMethod__) {return arguments; }");
tryItOut("/*for..in*/M:for(var constructor = ((\r{__count__: (-1.prototype),  get __proto__ constructor (__proto__, prop) { return <x/>.unwatch(\"prop\") }  })) in #1=<x><y/></x>) {continue ; }");
tryItOut("throw  /x/ ;");
tryItOut("let({if((let prototype = <><x><y/></x></>;.eval(window))) [[1]] else  if ((prototype = 1e81)) {__proto__;const __parent__; }if(<y><z/></y>) { if (*::*) {yield constructor; } else break M;\f} }) ((function(){this.zzz.zzz;})());");
tryItOut("/*infloop*/do return constructor; while(<x><y/></x>);");
tryItOut("/*for..in*/L:for(var prop.__parent__ in (((Math.pow).apply)((this.__defineSetter__(\"prototype\", ({}).hasOwnProperty))))){yield 3/0; }");
tryItOut("if((<><x><y/></x></>.hasOwnProperty(\"__count__\").watch(\"__count__\", function  __parent__ () { return (yield *::*) } ))) return @foo;");
tryItOut("let (({ __iterator__: __proto__, constructor: [({ __iterator__: ({ __parent__: [, ({ __noSuchMethod__: prototype }), , __noSuchMethod__] }), __iterator__: ({ __iterator__: [({ __parent__: __parent__ }), ({ __noSuchMethod__: prototype }), ], __count__: __iterator__.prop }) }), [], ] })) { M:while(( \"\" ) && 0){let constructor = 0/0, prototype; }\t }");
tryItOut("return;");
tryItOut("try { let(try { with({}) { this.zzz.zzz; }  } catch(__iterator__) { export __iterator__; } , __iterator__ =  /x/g ) ((function(){prototype = constructor;})()); } finally { with({}) yield <><x><y/></x></>.propertyIsEnumerable(\"__count__\"); } ");
tryItOut("/*infloop*/for(let __proto__ = ~<x/>; @foo; <x><y/</x> ^ __proto__) {export *; }");
tryItOut("constructor = prototype;");
tryItOut("switch(<><x><y/></x></>) { case 2:  }\nL: {export *;gc() }");
tryItOut("{var __iterator__ = <x/>\n/*infloop*/do {<y><z/></y>, prototype;throw 0x99; } while(<y><z/></y>); }");
tryItOut("/*for..in*/for(__iterator__ in 0.1) export *;");
tryItOut("yield *\n");
tryItOut("(<x><y/></x>);");
tryItOut("let(prop = <x><y/></x>.( '' ), __proto__ = __parent__) ((function(){for(let y in [5,6,7,8]) with({}) export prop;})());");
tryItOut("do {/*for..in*/for(const prototype in (((__count__).watch)(window)))return;yield; } while(((typeof  /* Comment */@foo >>>=(function(q) { return q; })(this, *))) && 0);");
tryItOut("/*infloop*/for(<y><z/></y>.__iterator__ = prop = __count__; E; typeof this /= [,,]) {gc()0x99; }");
tryItOut("/*infloop*/M:for(const constructor; (yield ('haha'.split)()); ({ set constructor function::__count__ (__count__, ({ __count__: __parent__, prop: __parent__ }))(~__proto__.prototype =  '' ),  set __iterator__ __noSuchMethod__ (__iterator__, __parent__) { yield <employee id=\"1\"><name>Joe</name><age>20</age></employee> %=  }  })) {yield;with({}) { this.zzz.zzz; }  }");
tryItOut("if((this.__defineSetter__(\"__noSuchMethod__\", prop)).@foo) let (__proto__, __noSuchMethod__ = function(id) { return id }) { <x><y/></x>; }");
tryItOut("let(__noSuchMethod__ = <x><y/></x>.yoyo(4.), __noSuchMethod__) { for(let y in []);");
tryItOut("L: {{}; }");
tryItOut("L:switch((-1)) { case 6: #3={a:#3#}; } const prototype;");
tryItOut("/*infloop*/for(__parent__; (eval(\"([1,,])(<x/>, this)\", 4..valueOf(\"number\"))); __proto__.(( /* Comment */0.1))) export prop; const default: var __proto__, __proto__ = <y><z/></y>;case 7: ;break; case <x><y/></x>: case __noSuchMethod__: break; break; case undefined: break; ;");
tryItOut("/*infloop*/for(let __proto__; __proto__ = __proto__; (<><x><y/></x></>)[*::*]) {break ; }");
tryItOut("/*infloop*/do continue M\n while((__proto__.prop));");
tryItOut("if(<x><y/></x>) yield true;");
tryItOut("/*for..in*/for(var constructor = new ('fafafa'.replace(/a/g, ({}).hasOwnProperty))( /x/ .@foo) in *::*.__lookupGetter__(\"__proto__\")[(new (#3={a:#3#})())]) if(<x/>) { if (<><x><y/></x></>) {break ;var __count__; } else ([1,,]);}");
tryItOut("/*infloop*/M:while((<x><\ty/></x> instanceof <><x><y/></x></> >= <><x><y/></x></>)){continue L; }");
tryItOut("if(new new function (prop) { {} } ((-0),  \"\" ).watch(\"__proto__\", [11,12,13,14].sort)) { if ((prop <<= <x><y/></x> += __parent__.throw(<x><y/></x>)).__defineGetter__(\"prop\", 0 in <x/>)) {L: {.2; } const __count__; } else {export constructor;prototype = <x><y/></x> }}");
tryItOut("/*for..in*/for(var prototype = <x/>.__defineSetter__(\"prop\", false) @ <y><z/></y> in window.watch(\"__count__\", (<x><y/></x>).watch)) \t{/*for..in*/for(const [__proto__, __noSuchMethod__] = <x/> .@ 1.2e3 in <x><y/></x>) __count__; }");
tryItOut("try { for(let y in []); } finally { for(let y in [5,6,7,8]) return this.__defineSetter__(\"__parent__\", <></>); } ");
tryItOut("/*infloop*/L:for(const prototype = let __count__ = <\t><x><y/></x></>(@foo, [[]]); (__count__ = <><x><y/></x></>); (this.__defineGetter__(\"__parent__\", <x/>.valueOf(\"number\")))) return;");
tryItOut("return ({ get __parent__ __noSuchMethod__ (__count__)<><x><y/></x></>, prop getter: function  prop () { ({}); }  });");
tryItOut("/*for..in*/for(let [prototype, __count__] = (#1=[ /x/ ]) in  \"\" ) const __iterator__ = window, prototype;\n/*infloop*/while(prop){break M;const __parent__ = <x><y/></x>, x::prop; }\n");
tryItOut("yield\n");
tryItOut("/*for..in*/for(var (prototype) in (new ([,,z1])())) /*infloop*/while(<><x><y/></x></>){let __parent__, <x><y/></x>; }");
tryItOut("let(({ __count__: ({ __noSuchMethod__: 'fafafa'.replace(/a/g, function(y) { yield y; ; yield y; })['__parent__'] }) }), ({ prototype: [<x/>['prototype'], , ] }) = __count__.__iterator__ setter= function (__iterator__) { yield *::* } .eval(prop.constructor getter= Function)) { this.zzz.zzz;");
tryItOut("M:do {return; } while((<x/>) && 0);");
tryItOut("/*infloop*/for(var ({ [, , ]: ({ __parent__: [], __parent__: ({  '' .prop: ({ constructor: ({ __count__: __parent__ }), __parent__: __noSuchMethod__ }), __parent__: ({ prop: constructor, let: ({ __noSuchMethod__: constructor, constructor: __proto__ }) }) }) }), function::__proto__: ({ __count__: __proto__ }) }) = -this.hasOwnProperty(\"__count__\"); ((<x><y/></x>).watch); eval(\"{}\", eval(\"__noSuchMethod__\", (-1))) << [1,,]) {if((+(try { __iterator__, __parent__; } catch(__proto__ if (function(){@foo})()) { (window); } catch(__proto__ if (function(){let __noSuchMethod__ = __proto__;})()) { return; } catch(constructor) { gc() } .valueOf(\"number\")))) {yield __proto__; } else  if (new (window).__defineSetter__(true)) function(q) { return q; }if((arguments)[__noSuchMethod__]) export __noSuchMethod__; }");
tryItOut("\tthrow <x><y/></x>;");
tryItOut("/*for..in*/L:for(const __count__ in (-0).__noSuchMethod__) {\fL:while(((__count__()) / undefined.watch(\"__count__\", new Function)) && 0){return  '' ; }*; }");
tryItOut("while((prop =  /x/ .__lookupGetter__(\"__noSuchMethod__\") *= prop.__noSuchMethod__) && 0){continue ; }");
tryItOut("yield ;");
tryItOut("/*infloop*/L:do return; while(1e+81);");
tryItOut("if((* if (<><x><y/></x></>)) === (p={}, (p.z = *)())) { if ('haha'.split) //h\n{throw <x><y/></x>;(<x><y/></x>); }} else __proto__ = null, __parent__;");
tryItOut("if(0) {gc() } else {return;\nthrow prototype;\n{ } }");
tryItOut("/*for..in*/M:for(var [__count__, __noSuchMethod__] = <><x><y/></x></> for (prototype in <> window x><y/>< { return ( ''  in <x><y/></x>) } /x></>) in 3/0) {}");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in *::*) {return false; }\t");
tryItOut("/*for..in*/for(let prototype in <><x><y/></x></>) {}");
tryItOut("/*infloop*/for(let constructor; ( /x/g  .. <x><y/></x>.eval(prototype-- >>>=(true >>>=<x><y/></x>))); (<x><y/></x>.propertyIsEnumerable(\"__count__\")) <<= ) {__noSuchMethod__ = @foo;; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let window['prop'] in *::*) {return;; }");
tryItOut("with(<><x><y/></x></>)export __parent__\t;");
tryItOut("if(constructor) {( /x/ );export __count__; } else  if (<x/>) {throw 0x99;(this); }");
tryItOut("{let (prop = 0x99) {  }/*infloop*/for(prototype; (({ __iterator__: prototype, function::prop: prototype }) = <x><y/></x> &= __count__);  '' ) {var prop = 1.3;true; } }");
tryItOut("do function  prototype (__noSuchMethod__) { return (function ([y]) { })() }  while((true for (prop in <x><y/></x>)) && 0);");
tryItOut("__count__ = ((p={}, (p.z =  /* Comment */(--__parent__)())()))");
tryItOut("with(this)export *;");
tryItOut("/*infloop*/for(prototype =  /* Comment */this.__defineSetter__(\"__proto__\", Function); new String(window /= __parent__ , (0/0 % #3={a:#3#}), <x><y/></x>.eval([,,z1])); ('fafafa'.replace(/a/g, function () { return #1=[#1#] } ))) {yield; const prop; }");
tryItOut("/*infloop*/for(let __proto__ = *::*.__lookupGetter__(\"function::__count__\"); ([ /x/g \n for each (function::__proto__ in [15,16,17,18].map([1,2,3,4].slice, null))]); (__parent__ = *::*) ? ((<x><y/></x>).watch).call((\n<x/>), *.@*) : <><zzz><x/></zzz></>) ([,]);");
tryItOut("/*infloop*/M:do {/*infloop*/for(const prop; prop; {}) {continue M;var __noSuchMethod__; } } while(eval(\"(constructor setter: function(y) { yield y; if(<x><y/></x>) { if (<x><y/></x>) __proto__ else prop}; yield y; } /= [,,])\", (true)( '' , <x/>)));");
tryItOut("__noSuchMethod__, prop const __iterator__;");
tryItOut("L:if(__count__.__count__ setter= /a/gi) L:if(<><x><y/></x></>) {let __noSuchMethod__ = __count__; } else 033; else  if (<{__iterator__}> </{__iterator__}>.(\nfalse)) do {function (__proto__) { yield <><x><y/></x></> } let __count__, __parent__ = prototype; } while((3) && 0);");
tryItOut("L:if({}) {break L; } else  if (<x><y/></x>) {export __iterator__; } else { }(<><x><y/></x></>);");
tryItOut("export __proto__;");
tryItOut("let (__parent__ = <x/>) { var __iterator__ = (-0)\n<x><y/></x>; }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("export *;/*for..in*/for(const prototype = (__iterator__)(<x/>) = ((<><x><y/></x></>).call)(<x><y/></x>, <><x><y/></x></>).unwatch(\"prop\") in this.__defineSetter__(\"__count__\", <y><z/></y>).throw( /x/g  ? prototype : prop).prototype) return this.zzz.zzz;");
tryItOut("try { throw StopIteration; } catch(__proto__) { throw [<><x><y/></x></> for (__iterator__ in <><x><y/></x></>)]; } ");
tryItOut("/*infloop*/while(__count__ !== <y><z/></y>.constructor){while(( /x/g ) && 0)return;let get; }");
tryItOut("/*infloop*/M:while(prototype){throw [z1,,];{} }");
tryItOut("if(<><><!--yy--></></>) { if ((+*)) {with(window){ }.; }} else return;");
tryItOut("/*for..in*/for(const __iterator__ = <><x><y/></x></> ^= <><x><y/></x></> in [,,]) {yield;let __iterator__ = window; }");
tryItOut("/*infloop*/for(this.zzz.zzz; (prop = ((p={}, (p.z = <y><z/></y>)()))); (yield this.__defineSetter__(\"prototype\", <x><y/></x>))\t) ");
tryItOut("/*for..in*/for(__parent__ in ((function  constructor (__noSuchMethod__) { ({}).__lookupGetter__\f } )(*::*))){ }");
tryItOut("M:with({__count__: [z1] = this.__defineGetter__(\"prop\", function (case 9: break; default: yield <><x><y/></x></>;([11,12,13,14].filter)) { return this } )}){if(<><x><y/></x></>) { if (<><x><y/></x></>) {return this; } else var constructor;} }");
tryItOut("{let __iterator__ =  '' ;return null; }");
tryItOut("if((__count__.prototype setter= Math.sin.__lookupSetter__(\"__count__\") !== window.__defineSetter__(\"prop\", [,,z1]).unwatch(\"__parent__\"))) if(-0()) { if ( \"\"  :: window) {continue L; }} else continue L else {const __noSuchMethod__;const constructor = this, prop = (-1); }");
tryItOut("let(__noSuchMethod__) ((function(){for(let y in [5,6,7,8]) for(let y in [5,6,7,8]) this.zzz.zzz;})());");
tryItOut("yield .2\n");
tryItOut("with((<y><z/></y>.__defineSetter__\t(\"function::__proto__\", [,,z1])))var prototype = true, __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in  /x/g  > {}.unwatch(\"constructor\")) if(<x/>) { if (*::*) {__proto__ = null;return; } else { }}");
tryItOut("with(<x/>.watch(\"prototype\", Math.pow)){/*for..in*/for(const __noSuchMethod__ in false) {__parent__, __parent__;break M; } }");
tryItOut("L:if(*::*) {__count__ = <x/>;export __noSuchMethod__; }");
tryItOut("/*infloop*/do yield (({prop: *::*})); while(window);");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__count__) in undefined) /*for..in*/for(const __iterator__ in ((function (__noSuchMethod__) { return  ''  } )( /x/ ))){continue ;return; }");
tryItOut("L:if(<x/>) gc()");
tryItOut("{yield; }");
tryItOut("L:with({__parent__: __noSuchMethod__})var __noSuchMethod__ = __count__;");
tryItOut("return <><x><y/></x></>\n3;");
tryItOut("let (__parent__ = <x><y/></x>) { L: {yield; } }");
tryItOut("while((<x/>.propertyIsEnumerable(\"prototype\")) && 0)if(prop) {export prop; }");
tryItOut("[1,2,3,4].slice\n");
tryItOut("L: var prop, prop = __parent__;\nyield <x><y/></x>;\n");
tryItOut("return;");
tryItOut("if([arguments.__defineSetter__(\"__proto__\", /a/gi)].filter(function(q) { return q; })) { if (((p={}, (p.z = [[1]])()))) {L:if(@foo *= 3/0)  if (( ''  .@*:: *::*)) else gc() }} else prop");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((new Function(\"if(<y><z/></y>) { if (#1#.__iterator__) true;} else yield function(id) { return id };\")))(this.__defineSetter__(\"constructor\",  set __iterator__ __noSuchMethod__ (prototype, __iterator__) { if(__noSuchMethod__) {L:if(<><x><y/></x></>) { if ([,,]) continue ; else {export constructor;break ; }}; } else yield; } )))){break L;export __iterator__; const {}; }");
tryItOut("for(let y in [5,6,7,8]) let([__iterator__, ], [] = (undefined['__noSuchMethod__']-=4..__defineGetter__(\"__count__\", function(y) { yield y; function  __proto__ (__iterator__, __count__) { yield <><x><y/></x></> } ; yield y; }))) ((function(){return;})());");
tryItOut("with({}) {}");
tryItOut("M:with((uneval(new (new Function(\"{}\"))())))return;");
tryItOut("{} const constructor;{}\nlet prop = [[]];");
tryItOut("{return (uneval(null)); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prototype in (delete undefined)) ;");
tryItOut("prototype = __parent__;");
tryItOut("const prop, __parent__ = __noSuchMethod__; const constructor;");
tryItOut("/*for..in*/for(var __count__ in prop) function(q) { return q; }");
tryItOut("\twhile(( '' ) && 0)let prop = window;");
tryItOut("L:if(((eval(\"<><x><y/></x></>\", <y><z/></y>)) % *::*.__defineGetter__(\"__parent__\", (window).watch)).prop) {} else (<><x><y/></x></>);");
tryItOut("with({prop: prop = constructor})prop, __count__");
tryItOut("/*infloop*/do let __proto__; while(((\n /* Comment */<y><z/></y>).watch(\"__iterator__\", function(q) { return q; })));");
tryItOut("if('fafafa'.replace(/a/g, ([1,2,3,4].map).call)) /*infloop*/for(window; this; __iterator__) break L;");
tryItOut("/*infloop*/L:for((/a/gi(([15,16,17,18].some([1,2,3,4].map, __proto__)))); ((eval).call([<><>1e4</></>], this.__defineGetter__(\"__iterator__\", (__count__.__count__).__defineSetter__), (window[constructor]))); __proto__ = __count__) {/*for..in*/for(let prototype in *::*) ( /x/ ).watch }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const function  prototype ()@foo['__proto__'] in ((1 for (x in [])))([, ({ prototype: __count__, __noSuchMethod__: function::__count__ }), ] = )) {}");
tryItOut("");
tryItOut("if(Error(.2.__lookupGetter__(\"__count__\")).yoyo([ /x/  | 5.0000000000000000000000 for each (__iterator__ in <y><z/></y>) for each (prop in window)].constructor)) { if (((p={}, (p.z = arguments)()) += (@foo(<y><z/></y>, <y><z/></y>[<y><z/></y>])))) __iterator__ else export *;}");
tryItOut("if(yield this.__defineGetter__(\"__noSuchMethod__\", <><x><y/></x></>)) {export *;/*for..in*/M:\tfor(__proto__ = * *=  ''  in @foo) {; } } else  if (<y><z/></y>.constructor) {export *;return <x><y/></x>;export *; } else {yield;export prop; }");
tryItOut("let(prop, prototype) ((function(){;})());");
tryItOut("/*infloop*/for(const __parent__ = window; (<x><y/></x> == prop); function::__noSuchMethod__) ");
tryItOut("if( \"\" ) {return;; } else  if (__iterator__|=@foo) {with([,]){export function::__parent__; } } else {gc()throw <x><y/></x>; }\f");
tryItOut(" const prop;");
tryItOut("/*for..in*/for(__iterator__ in (('fafafa'.replace(/a/g, [1,2,3,4].map) ? prototype = window.hasOwnProperty(\"__iterator__\") : prototype = 3.141592653589793)((((prop|=__iterator__).isPrototypeOf(new (__proto__)([,,z1], <x><y/></x>)))).watch))){/*infloop*/M:for(let __proto__ = false; *::*; window) continue ; }");
tryItOut("while((__iterator__.unwatch(\"__proto__\")) && 0)yield <x><y/></x>;");
tryItOut("/*infloop*/while(<><x><y/></x></>)(@foo);");
tryItOut("return;");
tryItOut("/*infloop*/do {gc() } while(<x/>);");
tryItOut("/*infloop*/for(\tvar __parent__; [((__noSuchMethod__)[#1=[#1#]])]; (eval(\"Error(3/0)\", (p={}, (p.z = 0x99)())))) {;gc() }");
tryItOut("if( \"\" ) {let __noSuchMethod__ =  /x/g , constructor;return; } else  if (<x><y/></x>) {throw -1; }");
tryItOut("let (__iterator__ = true, __parent__ = constructor) { <><xxx {__iterator__}={(function  constructor (__proto__, prototype) { yield window } ())} /></> }");
tryItOut("/*for..in*/for(__iterator__ in (([15,16,17,18].some(\t(new Function(\"(false);\")),  /x/g ))( ''  != <><x><y/></x></>))){/*infloop*/L:do throw 1e4; let __proto__, __parent__ = __noSuchMethod__; } while(__iterator__);yield -3/0; }");
tryItOut("<y><z/></y>while((new Exception()) && 0)export __iterator__;");
tryItOut("M:if((yield false)) { if ((__parent__ = <><x><y/></x></>)) {({}).hasOwnProperty } else const __noSuchMethod__ = 3;}");
tryItOut("do  set constructor(prop) { gc() }  while((({})) && 0);");
tryItOut("{{} }");
tryItOut("/*for..in*/L:for(let __count__ = <><bbb xmlns=\"null\"><x><y/></x></bbb></>.unwatch(\"__count__\") in (prop) = (this.__lookupGetter__(\"__proto__\"))) {export __proto__\n }");
tryItOut("throw  ''  const constructor;");
tryItOut("with({}) prototype = __count__;");
tryItOut("if([ /x/g ].filter([[,]].map(function  prototype () { {} } ))) /*for..in*/L:for(let [prototype, __iterator__] = this in <x/>) break M;");
