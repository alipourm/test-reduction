
tryItOut("((gc))(this.zzz.zzz)");
tryItOut("if(\n@foo) { if (prototype = 1.3++) {/*infloop*/L:for((false); <y><z/></y>.__defineGetter__(\"prototype\", 0.1); (yield  /x/g )) { } }} else ");
tryItOut("L:if(__parent__ = ((yield yield __iterator__;))) ([(-0)] || __iterator__ = *::*) else  if (true.*) (<x><y/></x>);");
tryItOut("if(033) __count__; else  if (<><x><y/></x></>) {return this; }");
tryItOut("with(__iterator__.__parent__ = __count__){{} }");
tryItOut("/*for..in*/M:for(prop in ((eval)(null ? [[1]] : <><x><y/></x></>))){}");
tryItOut("while(((#0=({set: (__count__ = __iterator__[(4.)()])}))) && 0){yield 0;{yield; } }");
tryItOut("if((Object(#1=[#1#]))) { if (-0--.__proto__ = 0) {yield this;constructor = <x><y/></x>, __proto__ = __count__; } else {{} }}");
tryItOut("if(yield <><zzz><><x><y/></x></></zzz></>) { if (eval(\"-0;\", <y><z/></y>)) {/*for..in*/M:for(prototype in ((gc)(<><x><y/></x></>)))undefinedgc() } else for(let y in []);}");
tryItOut("with({}) this.zzz.zzz;");
tryItOut("constructor = __count__;");
tryItOut("if((5.0000000000000000000000 >= __parent__.yoyo(constructor.prototype = <x/>) / (true.propertyIsEnumerable(\"__proto__\")).__lookupSetter__(\"__proto__\"))) { if (#1=({prototype: ((#1#)([,,]))})) {/*infloop*/M:for(let [__parent__, __count__, , __proto__, ] = (new (Math.pow)(null)); Math.sin; -3/0) { case [11,12,13,14].sort: yield;gc() } }} else {throw <x><y/></x>;(-1); }");
tryItOut("/*infloop*/for((\n<x><y/></x>); [this.__noSuchMethod__ =  /x/g  for (__noSuchMethod__ in <x><y/></x>)]; (__parent__ === this)\f) continue ;");
tryItOut("continue M;");
tryItOut("{export *;L:with({getter: function::constructor = <y><z/></y>}){yield 4.;throw this; } }");
tryItOut("var constructor; const __parent__;");
tryItOut("__proto__ = <y><z/></y>\n");
tryItOut("L:if(((new (((<x><y/></x>).watch)\f.apply)(window)))) {(true).watch const constructor; } else  if (yield (<x><y/></x>.(0)).yoyo(__parent__ & <x><y/></x>)) {gc()true; } else /*for..in*/L:for(var __count__ = *::*.yoyo(prototype) in  /x/g ) gc()");
tryItOut("__parent__ = constructor;");
tryItOut("/*for..in*/for(let [prop, constructor] = ((p={}, (p.z = <><x><y/></x></>)())) in #1=prototype) L: M:if((prototype.__parent__ setter= ([z1,,]).watch)) {{} } else  if (false * ) {break L;throw [1]; } else {constructor }");
tryItOut("( \"\" )\nif(__noSuchMethod__) {gc() } else  if (@foo << <><x><y/></x></>) undefined");
tryItOut("L: {{} }");
tryItOut("if((({ set constructor(constructor, __noSuchMethod__)__count__ for (__count__ in  \"\" ) }))) {(#1#);const prop = *::*; }");
tryItOut("export *\n");
tryItOut("return *::*;");
tryItOut("this.zzz.zzz;");
tryItOut("while((__noSuchMethod__ = <y><z/></y>) && 0){{} }");
tryItOut("/*infloop*/do break ; while(<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);");
tryItOut("gc()");
tryItOut("{gc() }");
tryItOut("switch(null) { case 7: gc()case 8: break; default: break; case 1: break; break;  } const constructor;");
tryItOut("{if( /x/g ) { if (<><x><y/></x></>) <y><z/></y>} else const __noSuchMethod__;let setter = undefined; }");
tryItOut("/*for..in*/M:for(__noSuchMethod__ =  /x/  in ((x::<x><y/></x>: *::*)(<x/>.__lookupSetter__(\"__iterator__\")))){[1,,]; }");
tryItOut("/*for..in*/for(let prototype =  >>> (constructor >= this) in <x/>) {break ; \"\" ; }");
tryItOut("M:with({__parent__: if(#2=[<y><z/></y>]) { if (( /* Comment */gc())) {(null);const prototype, __iterator__; } else let __iterator__, __count__;}}){let __count__, __count__; }");
tryItOut("L: {-1;\freturn; }");
tryItOut("switch((+ /x/ .__iterator__ = __count__ = 1e4)) { default:  }");
tryItOut("Math.pow\n;\n\n/*for..in*/for(var prototype in (((null).__defineSetter__)(#1=[#1#]))){; }");
tryItOut("/*infloop*/M:for(const ({ __iterator__: [, ({ __parent__: [__parent__, , [({ constructor: __proto__ }), ({ __proto__: __count__ }), ], ] })], __count__: __noSuchMethod__ }) = (({prototype: gc})); new (function (__parent__, prototype) { <y><z/></y>; } )(this.hasOwnProperty(\"prototype\"), ([1] ? 3.141592653589793 : <x><y/></x>)); ('fafafa'.replace(/a/g, function (prototype, prop) { yield __count__ } ))) {( '' ); }");
tryItOut("L:if([[1]]) {yield; }\nL:if(@foo) { if (#1=[#1#]) {; }} else return;");
tryItOut("(<x><y/></x>);__iterator__, prototype");
tryItOut("/*infloop*/M:do {} while(<><bbb xmlns:ccc=\"(__parent__ = constructor)\"><ccc:eee></ccc:eee></bbb></>);");
tryItOut("{(undefined); }");
tryItOut("yield <x/>;");
tryItOut("if((let (prototype, __proto__) 3.141592653589793) .@x:: (<x><y/></x> ^ -3/0)) /*infloop*/do {let undefined, prototype; } while((function (constructor)@foo)()); else  if (__noSuchMethod__) {let prop = (-0); } else {const __proto__ = [15,16,17,18].some(({}).hasOwnProperty, *::*), __parent__ =  \"\" ; }");
tryItOut("gc() const constructor;");
tryItOut("if(this += 5.0000000000000000000000.__lookupSetter__(\"__parent__\")) { if (\nvoid <><x\t><y/></x></>) return;} else ({ prototype: __parent__ })");
tryItOut("return;");
tryItOut("{switch(<x><y/></x>) { default: break;  } }");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in this) Math.pow/*infloop*/do yield; while((<y><z/></y> === <x><y/></x>)); }");
tryItOut("{/*infloop*/for(({ prop: ({ prop: [], __count__: [({ prop: prototype }), ] }), __noSuchMethod__\f: constructor }) = (<bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>.(new function  __count__ () { (this).__defineSetter__ } ())); new ( /x/ )(); ({ get: ({ prop: __count__ }), __noSuchMethod__: __iterator__ })) {;export __noSuchMethod__; } }");
tryItOut("/*infloop*/M:while(#0=({__count__: undefined}).watch(\"constructor\", window))(try { var ; } catch(__noSuchMethod__ if window) { ( \"\" ); } finally { return (-0); } );");
tryItOut("throw prototype;");
tryItOut("return;");
tryItOut("with({__noSuchMethod__: (null ^= <y><z/></y> if (<><x><y/></x></>))})");
tryItOut("/*infloop*/L:do {export prototype; } while(<x><y/></x>)\n\n/*for..in*/for(const [constructor, __proto__] = undefined instanceof __iterator__ in \n<y><z/></y>) if(__iterator__.prototype setter= [1,2,3,4].map) {; } else  if (__parent__) {return;return; }");
tryItOut("with({}) { prototype = ; } ");
tryItOut("try { for(let y in [5,6,7,8]) <><x><y/></x></> } catch(__noSuchMethod__ if new Math.pow(true, <x><y/></x>) /= undefined % <><x><y/></x></>) { let(function::__count__ = true, __iterator__ = this) ((function(){const __iterator__ = function(id) { return id }, prototype = __count__;})()); } finally { try { __count__; } finally { ; }  } ");
tryItOut("__count__ = prototype;");
tryItOut("/*infloop*/for(__iterator__ = @foo; 0x99; <y><z/></y>) export *;");
tryItOut("try { throw __parent__; } catch(__proto__ if (function(){for(let y in []);})()) { let(__parent__) ((function(){throw constructor;})()); } ");
tryItOut("continue ;");
tryItOut("L:if(({ __iterator__: __parent__ }) = <y><z/></y>.yoyo(true)) this; else  if ((<> </> for (__iterator__(new (false)()) in [z1]) if ([]))) /*for..in*/for((033) in ((function () for each (__count__ in [,,]) for each (prototype in 0/0))(this.__defineSetter__(\"prototype\", (function  __iterator__ (constructor) \"\" ).apply)))){<x/>;__parent__ getter: /* }");
tryItOut("with(eval(\"this.__defineGetter__(\\\"__parent__\\\", /a/gi)\",  /x/ .__defineSetter__(\"__noSuchMethod__\", [1,,]))[(prototype =  /x/ )(__noSuchMethod__ = prototype, *::*)])/*for..in*/for(let __parent__.__iterator__ in ((function () { yield 1e-81 } )(prototype%=*))){/*for..in*/for(const __parent__ = this in  '' ) {gc() }export __count__; }");
tryItOut("with(false){export __count__; }");
tryItOut("M:if(((<><x><y/></x></>.__defineGetter__(\"prop\", <x><y/></x>) for each (prop in <x/>) for each (__iterator__ in <><x><y/></x></>)))()) /*infloop*/while(([1,2,3,4].map).call(__parent__, ))prototype = <><x><y/></x></>;");
tryItOut("with(({__parent__: [z1,,]})){gc()__proto__ = <x><y/></x>, __parent__; }\n");
tryItOut("switch(*) { default: {export __count__; }break; case 4: L:while((__count__.prop) && 0)/*for..in*/for(let __iterator__ in null) throw this; }");
tryItOut("if(*) { if (delete <x/> >> <x/>) {/*for..in*/for(const [prop, __parent__] = window.prototype >> undefined.watch(\"__parent__\", ([,]).__defineSetter__) in  \"\" ) L:if(<x/>) { if (<y><z/></y>) yield; else { }}L: {export __proto__; } }} else {continue ; }");
tryItOut("/*for..in*/for(var prop in ((function  __proto__ (constructor, __proto__) { yield @foo } )( /x/g ))){throw @foo; }");
tryItOut("do ; while(([15,16,17,18].some(Function, this) || prop = typeof function ([y]) { }) && 0);");
tryItOut("let(constructor) ((function(){ /x/ ;})());");
tryItOut("if( &= (yield prop.prototype setter= function ()__iterator__-=<x/> < (this.zzz.zzz), <><bbb xmlns=\" /x/ \"><ccc:ddd><!--yy--></ccc:ddd></bbb></>)) {yield;__proto__; } else  if (this.zzz.zzz) let __noSuchMethod__ = <><x><y/></x></>; else {x::__iterator__, constructor; }");
tryItOut("/*for..in*/for(const [__parent__, prop] = (__count__.__noSuchMethod__) in (@foo += <x/>)) (@foo);");
tryItOut("yield;");
tryItOut("/*infloop*/while(function ([y]) { }){break L;break ; }");
tryItOut("{}");
tryItOut("((new Function(\"[1,2,3,4].slice\"))).call(window, <x><y/></x>)\n");
tryItOut("{export *; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(window) {gc() }");
tryItOut("/*for..in*/for(__parent__ in (((([11,12,13,14].filter).__defineSetter__).apply)(( ''  & []) >>= __noSuchMethod__ = [11,12,13,14].filter)))__count__ = prototype;");
tryItOut("L:if(this.__defineGetter__(\"__iterator__\", Function)) let constructor; else  if (({ prototype: ({ __parent__: __proto__, __noSuchMethod__: constructor }), __parent__: ({ __count__: __iterator__, __count__: setter }) }) = yield ((1 for (x in [])))(<y><z/></y>, <><x><y/></x></>)) ;return  /x/g ;");
tryItOut("\n");
tryItOut("if( /x/g .throw(-0)) {gc() } else  if (new ((new Function(\"[,];\")))(*)) {export __noSuchMethod__; } else return window");
tryItOut("if((this.__defineGetter__(\"__noSuchMethod__\", (function (function::__proto__) { yield <x/> } ).apply))) {if(undefined) { if (window) this; else {{} }} } else  if (\n*) {/*infloop*/do {(<><x><y/></x></>); } while(this);yield 0; } else ;");
tryItOut("let([]) ((function(){yield;})());");
tryItOut("{switch((({}).hasOwnProperty).call(<x/>,  /x/ , prototype)) { default: case 8: break; {}break;  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__(new function  __iterator__ (constructor) { return 3.141592653589793 } (()[this], <><x><y/></x></>)) in -1) {/*infloop*/L:while( /x/ .__defineGetter__(\"prop\", (1 for (x in []))))__count__ = <x><y/></x>; }");
tryItOut("/*for..in*/for(const __noSuchMethod__(({ get __parent__ __noSuchMethod__ (__count__, __parent__) { return [,,] }  })) in __iterator__) {var __count__, __count__ = <x><y/></x>;([,]); }");
tryItOut("throw constructor;");
tryItOut("const ({ __noSuchMethod__: constructor, __parent__: __proto__ }) = eval(\"<><x><y/></x></>\", null)\nexport *;");
tryItOut("if(\f--({ __parent__: [], prototype: [, , ] }) = __parent__ = __noSuchMethod__) { if (__iterator__ setter: [(yield <x/>)]) (@foo).__defineSetter__let prototype = *, __iterator__; else /*infloop*/for(new false(-1).__proto__ = ; prototype = <x><y/></x>; \n@foo instanceof false) __proto__ = 1.2e3}");
tryItOut("constructor");
tryItOut("if(*) {return; } else  if (eval(\"throw  /x/g ;\", <y><z/></y>)) return this;");
tryItOut("/*for..in*/for(const __count__ in (function () { undefined } )().__defineGetter__(\"__noSuchMethod__\", [1,2,3,4].slice)) if(3.141592653589793.propertyIsEnumerable(\"__iterator__\")) { if ('fafafa'.replace(/a/g, /a/gi)) {gc() }} else {;export *; }");
tryItOut("__parent__ = prop;");
tryItOut("switch(*) { default: break;  }");
tryItOut("/*infloop*/for(const __iterator__;  /x/g  || -0; __noSuchMethod__) {if(default: export *;break; ) { if (<y><z/></y>) __iterator__ = /*\n*/<><x><y/></x></>;} else {export __proto__; } }");
tryItOut("break \n(<><x><y/></x></>);");
tryItOut("L: {}");
tryItOut("if(prop = *::*) {export <><x><y/></x></>;; }/*for..in*/for(var __count__ in ((/a/gi)(__parent__.(<x/>).eval(window)))){L: yield;let (constructor) { prop, __parent__ = *::*; } const prop;\f }");
tryItOut("gc()\nreturn;\n");
tryItOut("if(const __count__, __proto__ = <y><z/></y>) {var __parent__ =  '' , constructor; } else ;");
tryItOut("__iterator__: [1]");
tryItOut("M:if(<>yyy</>) yield this;throw [,]; else (true);");
tryItOut("/*infloop*/while(.2 ? <x><y/></x> : 5.0000000000000000000000 .@*:: ( ''  <<= #3={a:#3#}))[,,];");
tryItOut("{var __parent__, __iterator__; }");
tryItOut("/*for..in*/M:for([__count__, __noSuchMethod__] = *(this, *) in false) [1,2,3,4].map");
tryItOut("/*for..in*/for(let undefined in []) M:if(true) { if (<x><y/></x>) break M; else return;}");
tryItOut("/*for..in*/for(var [prototype, __iterator__] = ({__parent__: [11,12,13,14].some}) in 0) {L:if( /x/g ) {let constructor, __iterator__; } else  if (<><x><y/></x></>) {var __noSuchMethod__ = __noSuchMethod__;yield; } else ; }");
tryItOut("throw ({ prop: __proto__, prop: [__parent__, constructor, ] });");
tryItOut("{gc() }");
tryItOut("/*infloop*/L:while((let (try { gc() } finally { (this); }  = (new (true)(<x><y/></x>, <x><y/></x>)).prop = this.__noSuchMethod__, __parent__ = <y><z/></y>.@foo) (constructor <= <x><y/></x>.__defineGetter__(\"__iterator__\", new Function)).prop)){/*for..in*/for(const try { yield; } catch(prop if (function(){throw (-0);})()) { export *; } catch(constructor if (function(){*;})()) { throw  \"\" ; }  in undefined) L:do {var prototype, prop;yield <><x><y/></x><\t/>; } while((\r<x><y/></x>) && 0);yield false; }");
tryItOut("M:while(((new null()).propertyIsEnumerable(\"__count__\")) && 0){/*infloop*/for\f(<><x><y/></x></>; undefined; 0) {var prototype = false;let __noSuchMethod__; }/*for..in*/for(constructor = <><x><y/></x></> in <y><z/></y>) {gc()return <x><y/></x>; } }");
tryItOut("if(new /a/gi()) /*for..in*/L:for(const [__count__, __noSuchMethod__] = (-0) in <x><y/></x>) {return;return __iterator__; } else  if (<x/>.__defineSetter__(\"prototype\", ({}).__lookupGetter__) !==  /* Comment */window) {export *; } else ;");
tryItOut("with({}) { yield new [1,2,3,4].slice(<x/>, *::*); } ");
tryItOut("{/*for..in*/for(var [__iterator__, __iterator__] = (({__parent__ setter: new Function })) in <y><z/></y>) {L: {return; } }/*for..in*/for(const constructor = __proto__.__lookupSetter__(\"__proto__\") in ('fafafa'.replace(/a/g, (033).__defineSetter__))) {/*infloop*/M:while(<><x><y/></x></>)export *;/*for..in*/for(var [__proto__, constructor] = <><x><y/></x></>\t in .2) yield __count__; } }");
tryItOut("M:if(function(y) { yield y; this; yield y; }()) {/*infloop*/do {export constructor; } while(true);yield @foo;({}).__lookupGetter__ }");
tryItOut("/*for..in*/for(prototype = undefined in (((1 for (x in [])))((p={}, (p.z = ((uneval(@foo))))())))){/*for..in*/for(var __noSuchMethod__ = __noSuchMethod__ in true) var __parent__, prop = #1#;__count__; }");
tryItOut("/*for..in*/for(__proto__ =  /x/g  in [__count__, prototype, __noSuchMethod__, x::] = let (__parent__) 1.2e3) /*infloop*/for(this.__defineSetter__(\"__iterator__\", __proto__;function () { return <><x><y/></x></> } ) ^= ( for each (prop in this) = [,,]); <><ccc:ddd></ccc:ddd></>; delete this) let __iterator__;");
tryItOut("if([11,12,13,14].filter) {export constructor; } else  if (this.watch(\"prototype\", function(q) { return q; })) return  /x/ ;\nlet __iterator__ = <><x><y/></x></>, prototype = false;\n else {var prototype, prop;let (function::prop = <><x><y/></x></>, __parent__) { const prototype = <x><y/></x>; } }");
tryItOut("M:if([({ __parent__: ({ prototype: __parent__, __noSuchMethod__: ({ prototype: prop, \f__iterator__: __proto__ }) }), __noSuchMethod__: [] }) | \n(this.__defineSetter__(\"__proto__\", (/a/gi).call)) for (__count__ in window += this)]) { if ((window if (<y><z/></y>))) \t{{export *;return undefined; }([,,z1]); } else __noSuchMethod__}");
tryItOut("return\n__count__.__count__ = __count__;");
tryItOut("if(<x><y/></x>) ;");
tryItOut("gc()\nexport prototype;\n");
tryItOut("let(constructor) { ;");
tryItOut("throw __count__;");
tryItOut("1");
tryItOut("/*infloop*/M:do /*for..in*//* nogeckoex bug 349964 */ for  each(let yield = false, __proto__ = undefined in window//h\n) ; while([*].propertyIsEnumerable(\"__noSuchMethod__\"));");
tryItOut("M:if() {yield;if(*) ; else let __iterator__ = __count__, __proto__ = __proto__; } else {/*infloop*/while([z1])<x><y/></x>;/*for..in*/L:for(let [__iterator__, prop] = this.__defineGetter__(\"constructor\", do return; while((this.zzz.zzz) && 0);) in undefined) {export constructor;{var constructor, __count__; } } }");
tryItOut("let (__parent__ = <x/>) { with(~<><x><y/></x></> ? #1=[#1#] >>> *::* : (true ? 1e4 : <><x><y/></x></>))export *; }");
tryItOut("/*infloop*/do var prototype = __count__ getter: [1,2,3,4].slice; while(*::*);");
tryItOut("/*for..in*/for(const [__iterator__,  ''  &= #3={a:#3#}.prototype] = ([new undefined()]\t.sort((<><x><y/></x></>).__defineSetter__)) in constructor.unwatch(\"prop\")) {yield __noSuchMethod__; }");
tryItOut("/*infloop*/do export __iterator__; while(([__proto__, [, __count__], ] = ({ __proto__: ({ __noSuchMethod__: __iterator__, prototype: __proto__ }), __parent__: __count__ })));");
tryItOut("__proto__\n;\n");
tryItOut("/*for..in*/for(let __iterator__ in @foo) {function ()#1#__noSuchMethod__; }");
tryItOut("throw <x/>;");
tryItOut("let (constructor, __count__) { yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.__proto__ in (4.)(<><x><y/></x></>)) ");
tryItOut("do {do {break M;this; } while((<><x><y/></x></>) && 0); } while((this ? <x><y/></x> : undefined.__defineSetter__(\"__parent__\", <><x><y/></x></>)) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in eval(\"gc()\", [({a2:z2}) for each (__count__ in <x/>)])) let (__proto__, __noSuchMethod__) { (true); }");
tryItOut("/*for..in*/for(let [__noSuchMethod__, constructor] = default: break;  setter: ([,,z1] %=  '' ) ? <x><y/></x>[prototype] : (uneval(<x><y/></x>)).eval(new ( /x/ )(<x><y/></x>)) in false >>>=__count__ >>> (new ((<><x><y/></x></>).__defineSetter__)(1e4, @foo))) return \r@foo;");
tryItOut("this.zzz.zzz;");
tryItOut("\freturn  /x/ ");
tryItOut("L: while(('fafafa'.replace(/a/g, (1 for (x in [])))) && 0)return *::*;");
tryItOut("/*infloop*/while(((<><x><y/></x></>.prop = <x><y/></x>))){return; }");
tryItOut("/*for..in*/for(const prop = constructor in window - function(id) { return id }) {;yield true; }");
tryItOut("while(([z1]) && 0)yield;");
tryItOut("/*for..in*/for(const prop = new Date() in prototype) var prototype, __count__;");
tryItOut("M:if(([[]].__defineGetter__(\"prop\", .2))) { if ((*)()) while(() && 0)null; else /*infloop*/for(<x/>; [[1]]; <x><y/></x>) gc()}");
tryItOut("/*infloop*/L:while((@foo).watch(<x/>))false;");
tryItOut("let (__parent__, 'fafafa'.replace(/a/g, ({}).__lookupGetter__)['prop']) { this }");
tryItOut("{return 3; }");
tryItOut("{/*infloop*/for(var prop; new ((Math.pow)())(({__iterator__: this }) >>>=.2 *= new (({}) .@x:: <x/>)(), [,]); <y><z/></y>) let (+@foo.__parent__) { export __proto__; } }");
tryItOut("/*infloop*/for((undefined.__lookupSetter__(\"__proto__\")); ((<><x><y/></x></>)(<x><y\f/></x>) ^= [__parent__\n].sort(__noSuchMethod__)); __iterator__.__proto__ setter= eval) {return;prop; }");
tryItOut("if([15,16,17,18].map([,], undefined)) { if (__count__ = false) __count__ = __count__ = [,], __proto__} else {break ;(this); }");
tryItOut("switch(#1#) { case <x><y/\f></x>: function(q) { return q; }default: break; break; case null: break; break; break; case 0:  }");
tryItOut("/*for..in*/for(__proto__ in (function ([y]) { })()) {[1];throw  \"\" ; }");
tryItOut("export __proto__\nprototype;");
tryItOut("{/*for..in*/for(let __noSuchMethod__ in ((<><x><y/></x></>)(<><x><y/></x></>)))var function::constructor =  \"\" ; }");
tryItOut("M:if(<><x><y/></x></> > this.__lookupSetter__(\"__count__\")) { if (__count__ = <><x><y/></x></>) {export *;export *; } else {(@foo); }}");
tryItOut("if(([<y><z/></y>]\f !=  ''  <<= <y><z/></y>)) { if (<y><z/></y>.propertyIsEnumerable(\"constructor\")) {return;throw  \"\" ; }} else {gc()/*infloop*/for(let __proto__ = <x><y/></x>; <x><y/></x>;  /x/g ) {let __noSuchMethod__ = [z1]; } const return;; }");
tryItOut("with({prototype: <employee id=\"1\"><name>Joe</name><age>20</age></employee>.((function ([y]) { })())})if(*) gc() else ");
tryItOut("while((([<y><z/></y>])) && 0){export *;yield  '' ; }");
tryItOut("/*infloop*/do (<><x><y/></x></>); while((__noSuchMethod__ !== window));");
tryItOut("/*for..in*/for(__parent__ = [1,,] in prototype) ;");
tryItOut("yield ([15,16,17,18].map([1,2,3,4].map, 0));");
tryItOut("if(['fafafa'.replace(/a/\rg, ({}).hasOwnProperty)]) {/*infloop*/for(__noSuchMethod__; \nwindow; 'fafafa'.replace(/a/g, 'haha'.split)) export __parent__; } else  if (<><xxx>{constructor}</xxx></>) {(<x><y/></x>);if(3) { if (undefined) {this;export *; } else yield <y><z/></y>;} }");
tryItOut("while((__iterator__ *= <x/> ::  /x/g ) && 0){return;\ngc()\n{} }");
tryItOut("if(<x/>) return; else var @foo;");
tryItOut("{return; }");
tryItOut("if(<x><y/></x>) { if (*::*) constructor;} else {{} }\ngc() const constructor;");
tryItOut("/*for..in*/L:for(const [prototype, __iterator__] = (({prop: <y><z/></y>++ })) in (yield prop)) if((({}).yoyo(<y><z/></y>))) (<><x><y/></x></>); else  if (constructor.( /x/g ++))  else return;");
tryItOut("L:if(__parent__ = (<><x><y/></x></> + 033)) /*infloop*/L:for(const ({ __count__: constructor }) = __proto__ = 1.3; false; new Iterator(<x><y/></x>, __count__)) yield; else  if ((yield (this.__parent__ = prop))) yield 3.141592653589793; else {L:if([, prototype] = ((1 for (x in [])))) {yield 033;; } else  if ((typeof  /x/ .isPrototypeOf(((yield <y><z/></y>))))) <zzz>-1 === <><x><y\n/></x></></zzz> else export __proto__; }");
tryItOut("M:if(<><xxx {__noSuchMethod__}={this.zzz.zzz} /></>.valueOf(\"number\")) /*for..in*/for(const [__noSuchMethod__, constructor] = this in <x/>) export *;");
tryItOut("/*infloop*/for(prop = <><x><y/></x></>\n; (prop = @foo).*; prop = <x/>.isPrototypeOf(true.watch(\"prop\", function  prototype () { export __count__; } ))) (1e4);");
tryItOut("/*for..in*/L:\ffor(__iterator__ in (('haha'.split)((this.__defineGetter__(\"constructor\", function () { return 5.0000000000000000000000 } )))))export prototype");
tryItOut("export *;");
tryItOut("/*infloop*/L:for( /* Comment */<bbb xmlns=\"5.0000000000000000000000\">yyy</bbb>; true >>= undefined; (({__iterator__: <><x><y/></x></> }).valueOf(\"number\"))) const __count__;");
tryItOut("if(new gc()) try { with({}) __parent__; } finally { yield false; } ");
tryItOut("/*infloop*/for(<x><y/></x>; __count__; function ([y]) { }) {export *; }");
tryItOut("L: {throw window;gc()return;\nthrow window;\n }");
tryItOut("with((<y><z/></y> ? window : this.__defineGetter__(\"set\", function(q) { return q; }))){return __count__;prop = (-0), __proto__ = [1]; }");
tryItOut("L: {throw [,]; }");
tryItOut("L:if(constructor.prop getter= gc) return; else let (__proto__, __iterator__) { while((<><!--yy--></>.watch(\"__parent__\", function (__proto__) { return __iterator__ } )) && 0){*; } }");
tryItOut("L:with(<y><z/></y>)M:while(((<x><y/></x>)[<x/>].@foo) && 0) { continue M; } ");
tryItOut("const __count__ = <><x><y/></x></>\nthis.zzz.zzz;");
tryItOut("/*for..in*/for(var __iterator__ = <x><y/></x> ? window : 0x99 in *) {export *; }return;");
tryItOut("{/*infloop*/M:for(((continue ;) / (4..throw(4.))); (__parent__.hasOwnProperty(\"__parent__\").eval(eval(\"{}\", <><x><y/></x></>))); +1.2e3) yield *;M:while(((__proto__ = __count__ = <x><y/></x>)) && 0){;prototype } }");
tryItOut("/*infloop*/for(var __count__; (([[1]]\n) ^= #1=({__count__: <x/>})); 3/0 ^= false.__defineGetter__(\"prop\", function(y) { yield y; let __iterator__ = <><x><y/></x></>, constructor;; yield y; })) with(( /x/ .constructor).hasOwnProperty(\"__noSuchMethod__\")){(<x/>); }");
tryItOut("throw constructor;");
tryItOut("L:\fif({}) var __iterator__ =  \"\" ; else  if (4.) {export prototype; } else yield;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in  /x/ .unwatch(\"__proto__\")) {yield; }");
tryItOut("if(((this.__defineSetter__(\"__proto__\", window)).__lookupSetter__(\"constructor\"))) {var prop = -0\n } else  if (Array((undefined().__lookupSetter__(\"__iterator__\")), <x><y/></x> > __noSuchMethod__)) {\nthis }");
tryItOut("with(false.propertyIsEnumerable(\"__noSuchMethod__\")){{}{} }");
tryItOut("if(*) ; else ");
tryItOut("/*for..in*/for(let [__iterator__, prop] = 1.3 >>= __parent__++ in 1e81 == (Function())) L:if(((function(y) { yield y; return;; yield y; })(*,  /x/g ))) export *;");
tryItOut("__noSuchMethod__, __iterator__ = <><x><y/></x></>;");
tryItOut("/*infloop*/for(var (<x/>)(*::*) = <y><z/></y>; (<><x><y/></x></> ^= <><x><y/></x></>); new 'haha'.split(__noSuchMethod__.(this), __iterator__)) {gc()({}).hasOwnProperty }");
