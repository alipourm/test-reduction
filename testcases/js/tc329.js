tryItOut("{gc() }");
tryItOut("return <><x><y/></x></>;\nyield;\n");
tryItOut("let(function::__count__ = !(<y><z/></y>.prop)) { yield (({ __iterator__: __noSuchMethod__ }) = __iterator__);");
tryItOut("while((<><>(uneval(({ __parent__: __count__ }): \t<x><y/></x>))</></>) && 0)/*for..in*/for([constructor, prop] =  /* Comment */<x><y/></x> in window) {;var __count__, prototype; }");
tryItOut("/*infloop*/while((<x><y/></x> *=  \"\"  %= ((1 for (x in []))) in 0x99 .. *::*)){return;return 1e4; }");
tryItOut("do {return;{yield @foo; } } while((new ((++*)).__defineSetter__(__proto__.unwatch(\"__proto__\"), Exception() ^ (-0)[<>__proto__</>])) && 0);");
tryItOut("\tM:with(constructor = this){return; }");
tryItOut("yield;");
tryItOut("/*infloop*/for(\fvar ({ prototype: prop, prop: ({ prototype: (prototype) }) }) = [] = -1.3; __parent__ = (prototype = <><x><y/></x></>).unwatch(\"__count__\"); window) var prototype, __proto__ = <y><z/></y>;");
tryItOut("/*infloop*/__parent__: yield");
tryItOut("return __parent__\nbreak ;");
tryItOut("if(( /x/g .hasOwnProperty\f(\"__noSuchMethod__\"))) {let prop;let __noSuchMethod__ = <x><y/></x>; } else  if ('fafafa'.replace(/a/g,  \"\" )) (*::*);");
tryItOut("M:if( ''  * true ? this.zzz.zzz : (*::*.isPrototypeOf(window))) {} else return;");
tryItOut("yield;");
tryItOut("L: {let __parent__ = <><x><y/></x></>;gc() }");
tryItOut("var __noSuchMethod__ = 3.141592653589793;(*::*);\nM:if(window.throw(3)) { if (! \"\"  <<= (new Function(\"return <><x><y/></x></>;\"))()) {; } else export __noSuchMethod__;}\n");
tryItOut("/*for..in*/for(__noSuchMethod__.prototype =  /* Comment */<y><z/></y> in [,,]) ;");
tryItOut("function (__noSuchMethod__) { return <><x><y/></x></> }  const __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(prop in [z1,,]) if(<x><y/></x>) {export *; } else  if (window) {throw <><x><y/></x></>;yield; } else {gcthrow window; }");
tryItOut("{let (__noSuchMethod__, __iterator__) { yield; } }");
tryItOut("(#1#);");
tryItOut("/*for..in*/for(let [__noSuchMethod__, prop] = ({__proto__: (-1) ? <x><y/></x> : <y><z/></y> in (p={}, (p.z = <x/>)())}) in *) {return;/*infloop*/L:for(const prototype;  \"\" ; <x><y/></x>) {export *; } }");
tryItOut("if(undefined.valueOf(\"number\")) export prop; else  if (((function  __iterator__ () { (undefined); } ).call(<x><y/></x>, ))) {<y><z/></y>; } else (<x><y/></x>);\nconst prototype = ({a1:1})\n");
tryItOut("do {export constructor; } while((4.) && 0);");
tryItOut("if(0/0) { if (<x/>) break ; else break M;}");
tryItOut("L:with({})constructor, prototype = @foo");
tryItOut("throw function ([y]) { }\n");
tryItOut("/*for..in*/for(let __parent__ in /*\n*/(function ([y]) { })().*) {throw *;var constructor = __count__; }\nM:switch(({constructor getter: eval })) { case 4: continue M; }");
tryItOut("gc()return;");
tryItOut("/*for..in*/for(var prop = <y><z/></y> @ @foo in <><x><y/></x></>) {;(true); }");
tryItOut("with((prop = this.zzz.zzz.__defineSetter__(\"__iterator__\", ((1 for (x in []))).apply)))with({__noSuchMethod__: [1]})prototype, __noSuchMethod__;");
tryItOut("var __proto__ = null, constructor =  '' ");
tryItOut("L:if(<zzz>(<x><y/></x>\n).__noSuchMethod__</zzz>) {throw  \"\" ; } else const constructor = window, constructor;");
tryItOut("/*infloop*/do export prototype; while(<x><y/></x>);");
tryItOut("@foo === __count__ in .eval((uneval(-1)))");
tryItOut("__count__ = __proto__;");
tryItOut("if(__noSuchMethod__.__parent__) {break M; } else  if (({({ __proto__: __iterator__, __iterator__: constructor }): window})) export *;\f/*\n*/");
tryItOut("let (__proto__ = typeof ({a2:z2}), prototype = this) { ; }");
tryItOut("this.zzz.zzz;\n/*infloop*/for(<y><z/></y>; __count__; eval(\"\", <><x><y/></x></>)) {}\n");
tryItOut("throw StopIteration;");
tryItOut("if(3.141592653589793) { if (1e-81) {return  /x/g ;const prototype, function::constructor; }} else {export *; }");
tryItOut("{with({}) { var __noSuchMethod__ = <y><z/></y>, __proto__ = <x><y/></x>; } do ; while(((({}))(<x><y/></x>, <x><y/><\f/x>)) && 0); }");
tryItOut("gc()");
tryItOut("if(new Boolean(<><xxx {__proto__}={prop} /></>)) {{}\nif(1.2e3) { } else  if (__noSuchMethod__) export *; } else  if (__count__+=true) yield;");
tryItOut("/*infloop*/for(({ set prop() { export __noSuchMethod__; } , __parent__: function ([y]) { } &= 3.141592653589793 }); *::*.__lookupSetter__(\"prop\"); [,,]) {{}if(prototype) { if (undefined) {<x><y/></x> }} else {{} } }");
tryItOut("/*infloop*/do gc() while(([this.__defineSetter__(\"__parent__\", <x><y/></x>)].filter(Function)));");
tryItOut("if(this.zzz.zzz) /*infloop*/L:for([[1]]; function  __iterator__ ()[[1]](); ({__parent__: @foo})) yield;");
tryItOut("/*infloop*/while((this.__defineSetter__(\"__count__\", <x/>))){;break ; }");
tryItOut("with({__proto__: ([,,] = [[1]])}){\rlet __proto__, prototype; }");
tryItOut("this.zzz.zzz;");
tryItOut("while((this.__defineSetter__(\"__iterator__\", (undefined.__iterator__))) && 0){{with({__noSuchMethod__: <><x><y/></x></>}){gc()yield __count__; } } }");
tryItOut("/*for..in*/for(var prop in ((function ([1], undefined) { return false } )([1]))){{}yield @foo; }");
tryItOut("with({__proto__: Boolean((__count__ = null.__defineSetter__(\"constructor\", 'haha'.split)), prototype|=5.0000000000000000000000)})/*infloop*/do yield <x><y/></x>; while(__iterator__ = (RangeError(<y><z/></y>, prototype)));");
tryItOut("switch(__parent__ = -1.@*) { case yield __count__: return; }");
tryItOut("L:if((this[<y><z/></y>] .@ (false in 033))) /*infloop*/for( '' ; <><x><y/\t></x></>; <><x><y/></x></>) {; }");
tryItOut("return;\ngc\n\nconst __iterator__;\n");
tryItOut("/*\n*/if(*) { if (prop) {yield this;export *; }} else ");
tryItOut("/*for..in*/for(let __proto__ = <x><y/></x>['__count__'] in ((function(q) { return q; })(((* if (*))))))continue L; const prop;");
tryItOut("{throw StopIteration; }");
tryItOut("(@foo)");
tryItOut("/*infloop*/do {switch(true ? __parent__ = <x><y/></x> : __proto__) { case ({__parent__: false}) & (new (constructor)()).hasOwnProperty(\"__parent__\"): __parent__;break; export *;break;  }; } while(((null)(this, __noSuchMethod__).__lookupGetter__(\"__iterator__\")));");
tryItOut("let(constructor = <><x><y/></x></>['x::constructor'].prototype getter= eval) ((function(){throw StopIteration;})());");
tryItOut("/a/gi");
tryItOut("let (prop = let (prop, prop) *, __count__ = (this.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; }))) { /*infloop*/do ; while(<x/>); }");
tryItOut("M:if(#1=({__parent__: Object(__proto__.prop = (uneval(<y><z/></y>)),  \"\" ) >> __parent__ instanceof constructor})) {let prop;break M; } else  if (function(q) { return q; }()) {while(((false.throw(undefined))) && 0){{}export __iterator__; } }");
tryItOut("/*infloop*/while((function ([y]) { })()){return true; }\n");
tryItOut("if(*::* * *) @foo; else  if (__count__.__noSuchMethod__) {yield;(__proto__).__defineSetter__ }");
tryItOut("/*infloop*/do yield = true; while([]);");
tryItOut("with({}) yield __parent__.__count__ setter= [1,2,3,4].map;");
tryItOut("");
tryItOut("this.zzz.zzz;/*for..in*/for(let [__iterator__, prop] = (-0) in *) {let constructor, __noSuchMethod__; }\n");
tryItOut("/*for..in*/for(let = (this.__defineGetter__(\"__noSuchMethod__\", <x\t><y/></x>) ? <x><y/></x>.constructor : new (({}).__lookupGetter__)()) in (this.zzz.zzz)) break M;");
tryItOut("{/*infloop*/do {setter = __proto__; } while(-0); }");
tryItOut("( /x/g )\nconstructor = <><x><y/></x></>, prop;");
tryItOut("/*infloop*/for((uneval(window)); (__iterator__ ? <x><y/\t></x> :  '' )(__proto__.__noSuchMethod__); (prototype.constructor getter= ([(p={}, (p.z = *)()) for (<><x><y/></x></>.__iterator__ in function ([y]) { })])())) ;");
tryItOut("/*infloop*/M:for(__parent__; <x><y/></x>.unwatch(\"__parent__\") >>= ([[1]] , window) &= <xxx {constructor}={((eval).call(<x><y/></x>.__proto__,  /x/g .x::__iterator__ getter= Function))} />; (new ((new {}(<><x><y/></x></>, 1e81)))())) __parent__ = __noSuchMethod__;");
tryItOut("/*infloop*/for(__noSuchMethod__;  \"\" ; prototype) throw <x><y/></x>");
tryItOut("/*for..in*/for(let [prototype, __iterator__] = [1,2,3,4].slice in @foo) {return; }");
tryItOut("return [1,,];");
tryItOut("L:switch( \"\" ) { case 3: break; var __iterator__ = constructor;break; case 8: {}break; break; break; case  /x/g : let constructor = *; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prop in !undefined) {let ({ prop: setter }), __iterator__ = 0/0; { return prop = null }  }");
tryItOut("return;");
tryItOut("with({constructor: [15,16,17,18].sort((__parent__ = *), (((constructor%=(yield 0.1)))))}){let (__iterator__, constructor.constructor = <x><y/></x>.(false)) { while((<x><y/></x>) && 0){prototype } } }");
tryItOut("do {gc() } while((__iterator__) && 0);");
tryItOut("L:do {return; } while((<x><y/>\t</x> @  \"\" ) && 0);");
tryItOut("/*infloop*/for(let __noSuchMethod__; <><x><y/></x></> >>>=let (prop = <x><y/></x>, __noSuchMethod__ = (-0)) 0/0; #1# >= <x><y/></x>) L:if((p={}, (p.z = undefined)())) { if (3.141592653589793) {gc() }} else export prop;");
tryItOut("throw __noSuchMethod__;");
tryItOut("{gc()return\n }");
tryItOut("if(<xxx {prototype}={ } />) export *; else {let (__iterator__, __proto__) { if(*) { if ( /x/g ) {;; }} else break ; } }");
tryItOut("if(<x/>.__count__) ; else  if (eval(\"<><x><y/></x></>;\", prop * <y><z/></y>)) {const prototype;{yield;yield; } }");
tryItOut("/*for..in*/M:for(function::__noSuchMethod__ = (p={}, (p.z = <><x><y/></x></>)()) in  \"\" ) {<><x><y/></x></>;return; }");
tryItOut("M:do if(__count__(<><x><y/></x></>) = (4. || <x/>)) const prototype; else \\ while((new new Function()) && 0);");
tryItOut("if(<y><z/></y>.isPrototypeOf(<><x><y/></x></>.yoyo(<><x><y/></x></*\n*//>)).__defineGetter__(\"prototype\", [1,2,3,4].slice)) { if (([undefined if (window)].*).__defineGetter__(\"__parent__\", ( /x/ ).__defineSetter__)) {gc()throw this; }} else return;");
tryItOut("if((this for (constructor in window))) yield <y><z/></y>; else  if (prop) export *; else {;gc() }");
tryItOut("M:if(yield __iterator__.prop = <><x><y/></x></>) { if ([(new ({}).__lookupGetter__(3.141592653589793))]) {yield <y><z/></y>; }} else break L;");
tryItOut("(__noSuchMethod__)\n");
tryItOut("/*infloop*/for(const __iterator__; #1#; new (/a/gi).apply((__parent__.prototype) instanceof @foo, __proto__)) {L:with(arguments)gc() }");
tryItOut("/*infloop*/for(const __noSuchMethod__; <x><y/></x>; -0) {export prop; }");
tryItOut("/*infloop*/while( '' ){yield; }\n{/*infloop*/for(var prop; <x/>; <x><y/></x>) export *; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; #2=function(id) { return id }.unwatch(\"__iterator__\"); * <<= ) /*infloop*/do new Function while(<y><z/></y>);");
tryItOut("while((0.1) && 0){export *; }\n");
tryItOut("gc()\n");
tryItOut("L: export __proto__;/*for..in*/for(var __noSuchMethod__ in ((this)(#1#))){let prop = @foo, __iterator__;(<x><y/></x>); }");
tryItOut("/*infloop*/for(let constructor; (yield  ''  - #1#); (<x><y/></x> % __noSuchMethod____iterator__ for (__count__ in this))) {export __noSuchMethod__; }");
tryItOut("return -0;");
tryItOut("/*infloop*/for(let __noSuchMethod__;  /x/ ; prop) {;return; }");
tryItOut("M:do {if(<bbb xmlns=\"<> '' [[1]]</>\"></bbb>) { if (new __count__ = null(<><xxx {constructor}={<y><z/></y>} /></>)) try { export *; } finally { throw <>__proto__</>; }  else {return prop;yield 3; }} const constructor; } while((([<x><y/></x> >>= (function ([y]) { })() for each (prototype in 3/0)]).__defineSetter__(\"prototype\", eval)) && 0);");
tryItOut("try { let prototype = <x/>, prototype; = function ([y]) { }, __iterator__ = __parent__; } catch(__noSuchMethod__) { throw StopIteration; } \nL:if((new (1.3)((<x/> && *::*)))) { if (__noSuchMethod__.__defineSetter__(\"__count__\", [1,2,3,4].slice)) {Function } else {(@foo);__proto__ = ><x><y/></x><\f/> }/*\n*/}");
tryItOut("yield (this.__defineGetter__(\"__noSuchMethod__\", function  __count__ () { yield [,,] } ));");
tryItOut("with(new ((function ([y]) { })())(window, <y><z/></y>) ? <><x><y/></x></>.@* : (set.\t(<x><y/></x>)))<y><z/></y>;");
tryItOut("while((new this.zzz.zzz !== <x><y/></x>.prototype = *::*(constructor.(undefinedprop), (<><x><y/></x></>.propertyIsEnumerable(\"__proto__\")))) && 0){let(prop, __noSuchMethod__) { throw false;{continue L; } }");
tryItOut("/*infloop*/for(var prototype; ([window if (this)]); __noSuchMethod__.(this.__defineSetter__(\"__count__\", (this).watch).hasOwnProperty(\"__noSuchMethod__\"))) {[, ({ prototype: delete, constructor: prototype }\f), , , ], __noSuchMethod__[1];\t }");
tryItOut("switch(new (gc)(delete <><x><y/></x></>)) { case 9:  }");
tryItOut("/*infloop*/while([\t[z1]].filter((window).call)){gc() }");
tryItOut("/*for..in*/for(prototype in <x/>) throw <><x><y/></x></>;");
tryItOut("M:if(<><bbb xmlns:ccc=\"*::*\n\"><ccc:eee></ccc:eee></bbb></>) {var [prototype, , ] = (.2 & [[1]]); } else {break L;L:with(* ^= <><x><y/></x></>)try { this; } catch(prop) { yield <x><y/></x>; } finally { let prop = <><x><y/></x></>, __count__; }  }");
tryItOut("var prototype; const prop;");
tryItOut("/*infloop*/for(var __parent__;  \"\"  ? ((true)[[]\n]) : (__noSuchMethod__.__iterator__); __noSuchMethod__.(__noSuchMethod__.__count__ = __count__(<x><y/></x>))) if(this / <><x><y/></x></>) {if(Boolean()) let __noSuchMethod__ = this; else  if (0.1.yoyo(3)) ( /x/ )\n else {{} } }");
tryItOut("/*for..in*/for(let __iterator__ in ((/a/gi)(@foo))){([,,z1]); }");
tryItOut("if(this.zzz.zzz) \freturn  /x/ ; else  if ([11,12,13,14].filter) {{}export prototype; }");
tryItOut("{L:with({__count__: __noSuchMethod__.prop getter= *::*})switch(0) { default: break;  } }");
tryItOut("/*infloop*/L:do export *; while((({}).__lookupGetter__()) if (<x><y/></x>));");
tryItOut("L: { }");
tryItOut("/*for..in*/for(let [prototype, __iterator__] = ({__noSuchMethod__:  }) in <y><z/></y>) {gc()yield <><x><y/></x></>; }");
tryItOut("{while((({__parent__ setter: function(q) { return q; }, __noSuchMethod__: <x><y/></x> >> __noSuchMethod__ >>= new (Math.sin)(<x><y/></x>, prototype) })) && 0)continue ;/*for..in*/for(let [prop(({})), __count__] = (Function( \"\" )) in new (<x><y/></x>)()) (5.0000000000000000000000); }");
tryItOut("if(__iterator__ = <x><y/></x>.(033) += null) {var __iterator__ = <><x><y/></x></>, __parent__; }with(@foo)<><x><y/></x></>");
tryItOut("{{export *; } }");
tryItOut("var __count__, __proto__;");
tryItOut("/*infloop*/L:for(const __noSuchMethod__(<>__iterator__</>); false; <x><y/></x>) {}");
tryItOut("/*infloop*/for(constructor.__lookupSetter__(\"prop\")\f; new (/a/gi)(true); (({__proto__ getter: function ( { var constructor, prop; } ) { yield  \"\"  } , __proto__: window }))) {throw (-0); }");
tryItOut("/*for..in*/for(let [__count__, __parent__] = \neval(\"({prop:  \\\"\\\" , prop: *::* })\", __proto__ =  /x/ ) in (constructor = ((uneval(<x><y/></x>))))) {do (<x/>); while((<x/>) && 0); }");
tryItOut("/*for..in*/for(__proto__ = [default: return;case *::*: return;case  '' : return;case 3: export *;break; case <x><y/></x>: continue L;break ;break;  for each (__noSuchMethod__ in <y><z/></y>] in <x><y/></x>) {var __proto__; }");
tryItOut("if((__count__ = __parent__ :: prototype)) return; else  if (({__parent__: constructor})) { } else {prototype, constructor;gc() }");
tryItOut("if(<x><y/></x>.unwatch(\"constructor\")) /*for..in*/for(let __noSuchMethod__ = __proto__ in  /x/g ) {return @foo;((function ([y]) { })()); }");
tryItOut("(prototype) = prototype;");
tryItOut("/*infloop*/while(eval(\";\", [])){/*infloop*/while(!new (({}).__lookupGetter__)(<x><y/></x>, 0)){this;/*infloop*/for(constructor = undefined; []; __noSuchMethod__) break L;//h\n }while(((uneval(window))) && 0)return }");
tryItOut("if(<x><y/></x>/*\n*/) {return;continue ; } else {const __proto__;{} }");
tryItOut("/*infloop*/do {const __count__ = 4.;return <x/>\n } while( /x/ );");
tryItOut("/*infloop*/for(const __count__; @foo >> [1,,]; [,]) yield *;\n\nreturn;\n\n\n");
tryItOut("if(*::*) { if (-1) {return;<x/>; } else {Math.sin }}");
tryItOut("if([,]) {throw undefined; } else  if (<x/>) {yield; } else {yield;gc() }");
tryItOut("M:with({__iterator__: (function(q) { return q; }())}){let (constructor = window) { yield; }({a1:1}) }");
tryItOut("/*for..in*/for(var ([[,,]].sort((<x><y/></x>).watch))(true.propertyIsEnumerable(\"__iterator__\")) in <><x><y/></x></>) ({}).__lookupGetter__with({__count__: (case 2: (@foo);)})export __parent__;");
tryItOut("/*for..in*/for(var [prop, __proto__] = [z1] -= __noSuchMethod__() in ((<y><z/></y>)[arguments])) {;yield  \"\" ; }");
tryItOut("/*infloop*/for(var __proto__;  \"\" ; prototype.yoyo(__noSuchMethod__)) {{}return; }\nwith({}) { with({}) __parent__ = __count__; } ");
tryItOut("/*for..in*/for(let prototype = (prototype = <y><z/></y>)(\nconst constructor) in (prop(<x><y/></x>) = (-1 = <y><z/></y>).valueOf(\"number\"))) {prop = 1e81, prop = *;(-1); }");
tryItOut("");
tryItOut("/*infloop*/for(const __count__ = [15,16,17,18].filter((<x><y/></x>).apply,  '' ); 'fafafa'.replace(/a/g, function () { export *; } ); *) {export *; }");
tryItOut("if((__parent__ = constructor\n)) {yield; } else {{}gc() }");
tryItOut("{ }");
tryItOut("with({__parent__: prototype}){{(<y><z/></y>); } }");
tryItOut("/*for..in*/for(({ __iterator__: prop, __count__: __parent__ }) = (uneval(<><x><y/></x></>))['prop'] in ((function  __noSuchMethod__ (prototype) { L:if( /x/ ) { if (@foo) {gc() } else gc()} } )((let (__noSuchMethod__ = <x><y/></x>, __iterator__) <><x><y/></x></>++))))if( '' [*]) L:if(this) {{} } else {const __proto__ = __parent__; } else return window;");
tryItOut("{yield *.isPrototypeOf(window)\n }");
tryItOut("if(prop) {throw 033;constructor = -3/0; } else {const constructor; }\n");
tryItOut("let(prop = <y><z/></y>) ((function(){throw StopIteration;})());");
tryItOut("L:if([11,12,13,14].filter) false; else  if ( '' .*) prototype, prop = this;");
tryItOut("/*for..in*/M:for(let [prototype, __proto__] = (*::*\n) in *::* ?  ''  :  /x/g ) { }");
tryItOut("let (prototype = (let (__count__ = (this.zzz.zzz), getter = ((p={}, (p.z = new (<><x><y/></x></>).__defineSetter__(this,  /x/ ))()))) (#1#.watch(\"prop\", /a/gi)) @ ({ __iterator__: prototype }) = (<x><y/></x>.([1])))) { with({__noSuchMethod__: window % null})({}).__lookupGetter__ }");
tryItOut("{/*for..in*/for(const prototype in #1#) L: {var constructor, __iterator__;\tprototype = null, __proto__; } }");
tryItOut("/*infloop*/for(const ({ \f__proto__: [RegExp() for (prop.__parent__ in [this].some((<y><z/></y>).watch))].let, constructor: constructor }) = eval(\"*::* /= arguments\", this.__iterator__); <xxx {__iterator__}={ /* Comment */__count__.__iterator__ = <><x><y/></x></>} />; new new (Function)()) {prototype }");
tryItOut("for(let y in [])\nL:if([11,12,13,14].some) with({__proto__: [11,12,13,14].map}){{} }");
tryItOut("if(prototype = 1e4) {}");
tryItOut("/*for..in*/for(const [__iterator__, __iterator__] = (__noSuchMethod__ =  \"\" ).__noSuchMethod__ = [,,].__lookupSetter__(\"__count__\") in ) {continue ; }");
tryItOut("L:with({prototype: <><x><y/></x></>(<x><y/></x>).__proto__}){let (__iterator__, __proto__ = 5.0000000000000000000000) { <x/>; } }");
tryItOut("{gc()gc() }");
tryItOut("if({}) *::*; else gc()");
tryItOut("return;");
tryItOut("/*infloop*/for(__proto__ = (function ([y]) { })(); -0; <x/>) export prop;");
tryItOut("/*infloop*/while(![1,2,3,4].slice){/*infloop*/while(constructor){continue ;gc() }throw @foo; }");
tryItOut("M:while((__iterator__) && 0)export *;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/while(prop.__noSuchMethod__ = new ( '' )([,,](__iterator__), constructor = __iterator__)){return ({a1:1})\n/*infloop*/for(let prop; <><\tx><y/></x></>(4.); (window + __parent__)) (*);if(<x><y/></x>) {yield ({a1:1}); } }");
tryItOut("{return\nreturn [15,16,17,18].sort(function  prototype (__proto__, <x><y/></x>) { export __iterator__; } , this); }");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(let prototype; (~Error(__noSuchMethod__, this))(((new ((1e+81).__defineSetter__)()) for ((prototype)([z1,,]) in prop) if (*::*))); *::* %= const __proto__, __noSuchMethod__;) {export constructor;export *; }");
tryItOut("export *;\nexport *;\n");
tryItOut("M:if((this.__defineGetter__(\"__iterator__\", function (prop, prop) { yield [,,z1] } ).prop)) {/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.prop in constructor) {function(y) { yield y; var __parent__;; yield y; } } } else {window }");
tryItOut("with({prototype: <>(<\tx><y/></x> .@*:: <x><y/></x>)</>}){/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor.__proto__ in prototype) {continue L;gc() }/*for..in*/M:for(let prototype = 1e-81 in [[1]]) {} }");
tryItOut("{}");
tryItOut("/*for..in*/for(var __noSuchMethod__ in __noSuchMethod__.(<><x><y/></x></>)) {break  }");
tryItOut("M:if((function (__count__) { export __proto__; } ).call((('fafafa'.replace(/a/g, Function)) :: ( /* Comment */*)), )) \n{; } else  if (null) ;");
tryItOut("/*infloop*/for(({ prototype: ({ __count__: __count__ }) }) = <y><z/></y>; (undefined.__lookupSetter__(\"__count__\")); (((@foo , <><x><y/></x></> >> (prototype = __count__).eval(<employee id=\"1\"><name>Joe</name><age>20</age></employee>))).watch)\f.call(<y><z/></y>, (({__parent__: this.__defineSetter__(\"__noSuchMethod__\", (1 for (x in []))) })))) ;");
tryItOut("if(((<y><z/></y>\n) != prop.__count__ setter= __count__ instanceof constructor++)) break ; else new <x/>.propertyIsEnumerable(\"__count__\")()");
tryItOut("with({prop: #1#}){__proto__ }");
tryItOut("L:if(<x/*\n*/><y/></x>[(3.__lookupSetter__(\"__proto__\"))]) /*for..in*/for(const constructor in (('haha'.split)(false)))yield __parent__; else  if (yield <><x><y/></x></> @ *) {{}continue ; }");
tryItOut("for(let y in []);");
tryItOut("M:with({prop: (((p={}, (p.z = <><x><y/></x></>.watch(\"function::constructor\", (this).__defineSetter__))())) << (({__count__: (constructor|=<><x><y/></x></>) })))})throw undefined;");
tryItOut("if(((<x/>).__defineSetter__)) { if (__proto__ = window) {yield [z1];let __noSuchMethod__; } else {}}");
tryItOut("throw StopIteration;");
tryItOut("let (__count__) { var __count__ = prototype, __parent__ = 1e-81; }");
tryItOut("return;");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/for(let __proto__ = (<x><y/></x> for (<x/> in constructor)); [window].some((new Function(\"({}).hasOwnProperty\"))); ((-1).__parent__ =  /x/ )) {gc()const __noSuchMethod__; }\r");
tryItOut("export __count__;\nexport *;\n<><x><y/></x></>;");
tryItOut("for(let y in [5,6,7,8]) prop = __proto__;");
tryItOut("{(1e4); }\nlet prototype =  /x/ ");
tryItOut("constructor = <x/>;");
tryItOut("for(let y in [5,6,7,8]) continue \nL: if(__iterator__\n = <><x><y/></x></>) { if (new Function() < ({__count__: <x><y/></x> })) return  \"\" ; else yield;}");
tryItOut("yield \nthis ^= <><x><y/></x></>;");
tryItOut("/*for..in*/L:for(var __noSuchMethod__ in ((this.__defineGetter__(\"constructor\", function (constructor) { return [[]] } ))((prop, prototype = [prototype, constructor, __iterator__, 1.3]))))M:if(<><x><y/></x></> instanceof <><x><y/></x></>++) {<x/>; } else  if ((prototype.__count__ getter= (1 for (x in [])))) {export __proto__;if(-0) { if (__parent__) yield <x><y/></x>;} else {({ function::__parent__: getter }) } }");
