tryItOut("yield @foo;");
tryItOut("/*infloop*/for(let prototype; [*::* for each (each in \t<y><z/></y>)]; new __iterator__()) (try { (#1=[#1#]); } catch(__count__) {  } );");
tryItOut("yield;");
tryItOut("/*infloop*/L:for(const __count__; __noSuchMethod__; X) export constructor;\n/a/gi\n");
tryItOut("/*for..in*/for(const x::__count__() in ((({}).__lookupGetter__)(eval(\"/*for..in*/for(__noSuchMethod__ = prop in window) {return <y><z/></y>;__noSuchMethod__ = <y><z/></y>; }\", <><x><y/></x></>))));");
tryItOut("L:with((__parent__ = __parent__).yoyo(eval(\" for (__iterator__ in 4.)do  while((*::*) && 0)\\t;\", false)))/*for..in*/L:for(constructor in ((__proto__)(1e-81))){throw null;Math.sin }");
tryItOut("switch( /* Comment */prop) { case ( /x/g ).call(3/0, 0.1): break; case (5.0000000000000000000000++ for each (prototype in <x/>)): /*for..in*/M:for(var __noSuchMethod__ in ((function  __noSuchMethod__ (__parent__) { return false } )(null))){}gc\fconstructor = prop;break;  }");
tryItOut("/*infloop*/L:for(__iterator__; eval(\"undefined\", <x><y/></x>); <y><z/></y>--) yield;");
tryItOut("let constructor, __iterator__ = <x><y/></x>;");
tryItOut("/*for..in*/for(var __iterator__ in (((<x/> < __count__.@*).__defineSetter__)('fafafa'.replace(/a/g, ({}).hasOwnProperty)))){\nif((uneval(@foo)).throw(<x><y/></x>)) {return;break L; } else  if (<y><z/></y>.__proto__ = 'haha'.split(window, this)) export prop; }");
tryItOut("with(<><bbb xmlns:ccc=\"(*::*.watch(\"__parent__\", (<><x><y/></x></>).__defineSetter__)) :: (((new Function(\";\"))).call( \"\" , <x><y/></x>, true))\"><ccc:eee></ccc:eee></bbb></>.unwatch(\"prop\")){/*for..in*/for(const [__proto__, __parent__] = (-1) in + /x/g ) {(<><x><y/></x></>); } }");
tryItOut("constructor = __proto__;");
tryItOut("this;");
tryItOut("/*infloop*/M:for(((true)[<><x><y/></x></>]); prop = \t__parent__; (prototype.constructor = <bbb xmlns:ccc=\"this\"><ccc:eee></\fccc:eee></bbb>)) switch(__parent__ =  /x/ ) { default: <x/>;yield;break;  }");
tryItOut("/*for..in*/for(__iterator__ in ((function (function::__noSuchMethod__//h\n) { yield false } )(1e81))){gc()return [,,z1]; }");
tryItOut("__count__ = __parent__;");
tryItOut("with(++<y><z/></y>.isPrototypeOf(true)){{}if([1]) {return ({}); } } const prototype");
tryItOut("let(__iterator__ = new (<><x><y/></x></>)(3.141592653589793), constructor) ((function(){yield  /x/  .@x:: *::*;})());");
tryItOut("/*for..in*/for(let [constructor, prop] = __parent__.eval(new (Math.pow)([,,];)) in [11,12,13,14].map) yield ( '' );");
tryItOut("yield this;");
tryItOut("throw __noSuchMethod__;");
tryItOut("with(({}).hasOwnProperty){yield <ccc:ddd><x><y/></x><!--yy--></ccc:ddd>; }");
tryItOut("const prototype, __iterator__ = __proto__;");
tryItOut("/*infloop*/for(new function ([({ constructor: __noSuchMethod__ }), , ({ __iterator__: [, __count__, ({ prop: __iterator__ })] })]) { yield Function() } (); (true())(); __iterator__+=<y><z/></y>.throw(null)) yield (prop = null);");
tryItOut("/*infloop*/for(let ({ prototype: [, __proto__] }) = __iterator__ = <x/>; [prototype, function::constructor, __noSuchMethod__, __iterator__] = constructor; __noSuchMethod__ = constructor\t /= ({a1:1}).unwatch(\"__count__\")) {throw <x><y/></x>; }");
tryItOut("throw __noSuchMethod__;\n<><x><\fy/></x></>;\n");
tryItOut("try { this.zzz.zzz; } catch(__noSuchMethod__) { let(({ prototype: ({ __noSuchMethod__: __count__, yield: __proto__ }), __count__: ({ prop: ({ prototype: __noSuchMethod__, constructor: constructor }), prototype: [] }) }) = <xxx {__iterator__}={(({prototype: this.__defineGetter__(\"prototype\", new Function), __noSuchMethod__ setter: /a/gi }))} />, __parent__ = [3.141592653589793]) ((function(){let(constructor = <x><y/></x>.__lookupSetter__(\"__noSuchMethod__\")) ((function(){throw constructor;})());})()); } finally { yield ((\n(__parent__.__lookupSetter__(\"__proto__\"))) ^= false); } ");
tryItOut("L:do export *; while(((constructor--).(<y><z/></y>)) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("/*for..in*/try { const prototype, __parent__; } catch(prop) { (<y><z/></y>); } finally { return; } ");
tryItOut("let (prop) { gc() }");
tryItOut("while((__iterator__) && 0){throw <x/>;; }");
tryItOut("if(constructor) {(true); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __parent__.__proto__ in __noSuchMethod__) return __count__;");
tryItOut("Math.sin\n<><><><y'/></x></></>\n");
tryItOut("/*infloop*/while(((#2=window && default: case 1: <><x><y/></x></>; if ((constructor = <x><y/></x>) == (yield __parent__ = <x/>))))){M:if(1e81 % function(id) { return id }) {{} } else  if (( \"\" .hasOwnProperty(\"__count__\"))) {yield; } }");
tryItOut("yield  '' ; const prop;");
tryItOut("/*for..in*/M:for(let prototype = __noSuchMethod__.(([(1e+81 *= <x/>) for each (__proto__ in <x><y/></x>) if (<x><y/></x>)])) in ((\n__iterator__ for each (__parent__ in <x><y/></x>) *=  for each (__proto__ in <x/> && this) for (prototype in (__noSuchMethod__ = <x/>)) for each (__noSuchMethod__ in <x><y/></x>) for each (__parent__ in *) for each (prop in {})))) {/*for..in*/M:for(const [__iterator__, prop] = new ()(prototype|=(prop = null, __noSuchMethod__ = __noSuchMethod__)) in prop.__proto__ = eval(\"<y><z/></y>\", prop = window)) {export \f__proto__; }return;\nlet (__count__ = window) { gc() }\n }");
tryItOut("/*for..in*/for([__count__, __noSuchMethod__] =  /x/  in window) { }");
tryItOut("L:with(<xxx {prototype}={033} />){export constructor; const __count__;L: {throw <y><z/></y>;window; } }");
tryItOut("\n;");
tryItOut("if(void <xxx {__parent__}={@foo} />) with({prototype: this}){{}function(y) { yield y; ([z1]);; yield y; } } else  if ((set)) {let __count__ = <x><y/></x>;const function::__parent__, __parent__ =  '' ; } else {gc()export *; }");
tryItOut("/*infloop*/for(({ __parent__: ({ __proto__: ({ __iterator__: ({ constructor: [, , , ({ __noSuchMethod__: get })] }), prototype: prototype }) }), constructor: ({ prop: ({ [[, ({ __proto__: __parent__, constructor: __proto__ }), ], , ]: __proto__ }) }) }) = <x/>;  <= -0\n; ({__proto__: constructor === ({a2:z2}) }).__parent__) {(<><x><y/></x></>).watch/*for..in*/for(const (__parent__) in .2) {continue ; } }");
tryItOut("if((new Date(null\n))) {const __proto__ = this, __proto__ = <y><z/></y>;var __noSuchMethod__; } else {throw <><x><y/></x></>;window }");
tryItOut("let(constructor) ((function(){;})());");
tryItOut("/*for..in*/for(var prototype in *::*.*) {L: {yield __parent__;prototype; } }");
tryItOut("let (prop, __proto__) { if((#2=({prototype: window}).__lookupGetter__(\"prototype\")[ /x/ ])) if(this) yield -1; }");
tryItOut("/*infloop*/for([(new (eval)(((void @foo).propertyIsEnumerable(\"prop\")), <x><y/></x>))].some(Function); (__parent__); (p={}, (p.z = this @ ({}))()) = this\f) {(__iterator__);L: prop }");
tryItOut("do {export __count__ } while((new ({ __count__: ({ __proto__: __parent__ }), constructor: [, __parent__, constructor, ] }) = __iterator__ = __parent__.__iterator__) && 0);");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((({}).hasOwnProperty).call)([z1] .@*:: <x/>))){const constructor = #1=[#1#], __proto__ = __parent__; }");
tryItOut("with({}) { let(function::__proto__) ((function(){for(let y in []);})()); } ");
tryItOut("do {prototype = <x><y/></x>; } while((null) && 0);");
tryItOut("L:while(((prototype.__parent__ = null ^= 1e-81.*)) && 0)return");
tryItOut("let(__count__) ((function(){})());");
tryItOut("/*infloop*/for(var __iterator__; function ([y]) { }; <><>(\n^)</></>) {let (__iterator__ = <x><y/></x>) { yield; } }");
tryItOut("break M;\n([z1,,]\t);\n");
tryItOut("{yield <x><y/></x>;(__proto__); }");
tryItOut("while(([true for \f(__proto__ in <x><y/></x>)]) && 0)Math.sin");
tryItOut("let (__noSuchMethod__ = undefined, __parent__) { continue M; }");
tryItOut("return;\nconst __iterator__ = this, __proto__;\n");
tryItOut("/*infloop*/do gc() while(~@foo);");
tryItOut("/*for..in*/for(let [__iterator__, __iterator__] = [false for each (__parent__ in <x/>)] in 'fafafa'.replace(/a/g, <x><y/></x>).prop) {;/*infloop*/while([,,z1]){<x><y/></x>; }\n }");
tryItOut("<zzz>( /x/g ['__count__'] = ({ set __count__ <!--yy--> (\t) { (<><x><y/></x></>); }  }))</zzz>");
tryItOut("while((0/0) && 0)gc()");
tryItOut("/*infloop*/for(<x><y/></x>; @foo; true) var __proto__, __iterator__ = *;");
tryItOut("/*infloop*/do gc while(this.throw(3/0));");
tryItOut("/*for..in*/for(const [prototype, __count__] = ([] = (({constructor setter: (1 for (x in []))\t, __proto__: new eval(window) })/*\n*/)) in #1=({__noSuchMethod__: .2}).watch(\"prototype\", [1,2,3,4].map)) {/*for..in*/M:for(let [__noSuchMethod__, __parent__] = this.zzz.zzz in {}\n)  '' /*for..in*/M:for(let [prototype, __iterator__] = constructor in true) {;new Function } }");
tryItOut("/*infloop*/M:do return; while(<x><y/></x>\n.__parent__);");
tryItOut("L:if(({})) {export __iterator__ = <x><y/></x>, <x><y/></x>; } else {{}; }");
tryItOut("{yield <><x><y/></x></>; }");
tryItOut("while(([,,z1]) && 0)\f{ \"\" ; }");
tryItOut("L:switch(+4. <= 1e81[0(<><x><y/></x></>,  \"\" )] .. true) { default: if([11,12,13,14].filter) { if ((__count__.__noSuchMethod__)) throw @foo;} else  }");
tryItOut("constructor setter: function(y) { yield y; yield <><x><y/></x></>;; yield y; }");
tryItOut("M:with(*::*){yield\n }");
tryItOut("/*infloop*/do {if(<x/>) {var prop, __iterator__ = *::*; } else break ;/*infloop*/do (-1); while( /x/ ); } while(__parent__ = #3={a:#3#});");
tryItOut("return ([ /x/g ]);");
tryItOut("([[]]); const __iterator__;");
tryItOut("const try { export \n*; } catch(prototype) { const prop, __proto__; } finally { export prop; }  = <><x><y/>\f</x></>, __noSuchMethod__;");
tryItOut("yield 1e-81;var __proto__ = <y><z/></y>, prop;\nyield;\n");
tryItOut("{{L:if('fafafa'.replace(/a/g, <y><z/></y>)) with({__proto__: prototype})__parent__let __proto__ = <x><y/></x>; } }");
tryItOut("return this;\n\n");
tryItOut("/*for..in*/for(var __parent__-=0x99.__noSuchMethod__ in ((__proto__+=__proto__).__proto__)) /*infloop*/do /*infloop*/while(@foo){<x/>; } while(0);");
tryItOut("let (__iterator__ = let, __noSuchMethod__) { const __proto__; }");
tryItOut("{const constructor;export *;/*infloop*/L:for((prop.@*); @foo; (({}).__lookupGetter__).call) continue M; }");
tryItOut("while(( \"\" ) && 0){}");
tryItOut("let(prop, __count__) {  /x/ ;");
tryItOut("if(<xxx>{prop}</xxx>.(<><x><y/></x></> + __noSuchMethod__)) { if (__parent__) {var constructor setter: Math.pow; } else {var __noSuchMethod__; }}");
tryItOut("gc()\n \"\" ;\n");
tryItOut("try { ; } finally { throw <><x><y/></x></>; } ");
tryItOut("{if( \"\" ) {yield; } else  if (window) {function () { return ({a1:1}) }  } }");
tryItOut("/*for..in*/for(let __parent__ = <x><y/></x>.( '' ) in <y><z/></y>) <><x><y/></x></>;");
tryItOut("let ([] = [<x><y/></x>]) { this; }");
tryItOut("if(0) {const __iterator__ = <x><y/></x>, prototype; { var prop =  '' , __proto__ }  }\nwith(prop.__noSuchMethod__ getter= function () { yield __iterator__\n } )/*infloop*/while(<x><y/></x>){return __noSuchMethod__; }\n");
tryItOut("L:switch(eval(\"<><x><y/></x></>\",  \"\" )) { default: break;  }");
tryItOut("__iterator__ = constructor;");
tryItOut("/*infloop*/for(({ __proto__: [__count__, , constructor] }) = <xxx>{__proto__}</xxx>; 5.0000000000000000000000.unwatch(\"__iterator__\"); *::*.__count__) {export *; }");
tryItOut("throw __noSuchMethod__;");
tryItOut("let([, ({ __parent__: [] }), ] = ([true for each (__noSuchMethod__ in <y><z/></y>)].throw(__count__ = undefined))(), constructor) { return;");
tryItOut("let (__noSuchMethod__ = __proto__ = <><x><y/></x></>) { {} }");
tryItOut("do { /x/g {} } while(((<x><y/></x>.(<x><y/></x>))) && 0);");
tryItOut("export *\nyield;\nthrow @foo;\n");
tryItOut("L:if(__proto__ = ({ __proto__: __noSuchMethod__, __iterator__: prop })) gc() else  if (this) /*for..in*/for(const [prop, __noSuchMethod__] = \n<><x><y/></x></> in undefined) {return <><x><y/></x></>; } else {__noSuchMethod__; }");
tryItOut("/*for..in*/for(var __count__ = this.zzz.zzz in  /* Comment */this) if(({__parent__ getter: (Function).call })) /*infloop*/M:do {let __parent__ =  /x/ , prop =  '' ; } while((__proto__+=*::*)); else  if ([this.__defineGetter__(\"__parent__\", gc) if ((this | <y><z/></y>) /= undefined.__parent__)]) (constructor);");
tryItOut("(({ __parent__: ({ constructor: __parent__ }), __proto__: [, prototype] }) = [prop].map(<x><y/></x>));");
tryItOut("with({prototype: ({ __iterator__: __iterator__, \feach: prototype }) = (yield 5.0000000000000000000000)}){{yield undefined; } }");
tryItOut("/*infloop*/while(this.__defineSetter__(\"__noSuchMethod__\", new Function)){L: {yield; } }");
tryItOut("M:switch(this ^ __noSuchMethod__) { case 7: default: with({__parent__:  /x/g }){continue ;; }case  /* Comment */<x/>:  if (this.__defineGetter__(\"__iterator__\", <x/>))break;  }");
tryItOut("/*for..in*/for(var null in ((prototype.(<x><y/></x>))(((function ([y]) { })().__lookupGetter__(\"__noSuchMethod__\").throw(new (<y><z/></y>)())))))let (constructor) { (<ccc:ddd><!--yy--></ccc:ddd>); }");
tryItOut("/*infloop*/M:while((0.1 for each (__noSuchMethod__ in undefined) for (__parent__ in 3.141592653589793)))yield 1.3\n");
tryItOut("/*infloop*/for(let prop.__noSuchMethod__; *::*.valueOf(\"number\"); new Function(null)) {<y><z/></y>;yield; }");
tryItOut("export prop");
tryItOut("if(((yield 1e81.watch(\"__parent__\", __parent__)))) { if ((this.zzz.zzz)--.__lookupGetter__(\"null\")) __proto__, __count__ = ({})//h\n; else  { return this } }");
tryItOut("L:while(((<><x><y/></x/*\n*/></> << [])) && 0){throw <x\n><y/></x>; const function::__parent__;prop, __parent__; }");
tryItOut("/*infloop*/M:for(__parent__; prototype(033); #1=(<><x><y/></x></> |= <x><y/></x>).constructor) {}");
tryItOut("{M:while((1.2e3 >>>=<x><y/></x>) && 0){yield; }return <y><z/></y> ,  \"\" ; }");
tryItOut("/*for..in*/for(const prop in <><bbb xmlns:ccc=\"false\"><ccc:eee></ccc:eee></bbb></>) /*infloop*/do {} while(<y><z/></y>);");
tryItOut("if([,,]) { } else  if (window) case this: break; 5.0000000000000000000000break; break; default: case 1.2e3: case __count__: return <x><y/></x>;");
tryItOut("continue \n");
tryItOut("L:if(<><x><y/></x></> &= 1e81) { if ((([[1]])(<><x><y/></x></>))) {}} else {{}export *; }");
tryItOut("let prop, prototype;export *<x><y/></x> ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let __count__ in ;) ");
tryItOut("export prop;");
tryItOut("L:if(__iterator__.@*) { if (true) break M;} else {M:if(constructor) [1,2,3,4].slice else  if (<><x><y/></x></>) let new Function;true; }\nlet(__iterator__) { eval\n");
tryItOut("L: if( '' ) { if (*::*) {let prop, __noSuchMethod__ = <y><z/></y>;export *; }} else return <><x><y/></x></>;");
tryItOut("switch() { case 7: /*for..in*/for([__parent__, __parent__] = #1=[#1#] in [,,]) export *;break; /*for..in*//* nogeckoex bug 349964 */ for  each(function::prototype in <><x><y/></x></>.propertyIsEnumerable(\"setter\")) propbreak;  }");
tryItOut("/*infloop*/M:for(prototype = <x><y/></x>; (__noSuchMethod__ %= undefined); <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>) yield;");
tryItOut("/*infloop*/while([1,,]){; }");
tryItOut("/*for..in*/for(let prop in this.zzz.zzz) /*for..in*/for(const __proto__ in ((*)(__parent__)))var __proto__\n");
tryItOut("export *;");
tryItOut("/*for..in*/for(var __proto__ in \t__iterator__.__noSuchMethod__ =  \"\" ) (<x><y/></x>);\n*;\n");
tryItOut("yield (__proto__ = this.eval(<y><z/></y>)) >>= (__parent__.constructor);");
tryItOut("{let __noSuchMethod__, __noSuchMethod__ = this;gc() }\n");
tryItOut("if(( /x/ (Number()))) { if ((prop%=<><x><y/></x></>)) {/*for..in*/for(var __noSuchMethod__ = window.isPrototypeOf(true) in  '' ) export constructor; }} else {function::__proto__ = 1.2e3; }");
tryItOut("yield <x/>.propertyIsEnumerable(\"prototype\");");
tryItOut("if((([<x><y/></x>])[new eval(\"__noSuchMethod__\", *)(({__noSuchMethod__: [1,,] }), <x><y/></x>)])) { if (new (new 'fafafa'.replace(/a/g, function  __proto__ (__noSuchMethod__) { yield; } )())(this.zzz.zzz)) /*for..in*/M:for(const [prop, constructor] = undefined ? undefined : @foo in <x/>) {continue ; } else return <><x><y/></x></>;}");
tryItOut("let (({ prototype: [__noSuchMethod__, ], prop: ({ __parent__: __noSuchMethod__, __count__: __proto__ }) }) = false, __proto__) { return .2; }");
tryItOut("export undefined;");
tryItOut("yield @foo++ >>>=new function(y) { yield y; export __noSuchMethod__;; yield y; }(<y><z/></y>, <y><z/></y>);");
tryItOut("try { with({}) { return; }  } catch(__proto__ if (function(){throw __parent__;})()) { let(prop) { yield; } catch( \"\" ) { export *; } finally { {} } ");
tryItOut("/*for..in*/for(prop in constructor: window) {this;var __proto__, __iterator__ = ({a2:z2}); }");
tryItOut("if(((\t{__parent__ getter: ({__count__: this}), constructor: (window--) }) ? 1e+81 : __proto__.prop setter= ({prototype: <><x><y/></x></> }))) {yield <x/>;{throw <x/>; } } else /*infloop*/for(const constructor; *::*; @foo) {__parent__;{} }{}");
tryItOut("L: {L: yield;-3/0; }");
tryItOut("do *; while((({})) && 0);");
tryItOut("if(constructor = this.zzz.zzz) {L:with({__iterator__: }){let __proto__;(@foo).watch } } else <y><z/></y>;");
tryItOut("{ }");
tryItOut("/*for..in*/for(constructor = (constructor >>> constructor)++ in window) { }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __iterator__ in  \"\" \n) const __noSuchMethod__ = function(id) { return id };<><x><y/></x></>;");
tryItOut("L:if( \"\" ) { if (*) Math.sin else return;}");
tryItOut("L:if(new (@foo)(<><x><y/></x></>)) with({__noSuchMethod__:  \"\" }){return [[]];return; } else if(<y><z/></y>) { if (null) return <x/>; else function(y) { yield y; gc(); yield y; }}");
tryItOut("yield *::*;");
tryItOut("/*infloop*/for(({ set __iterator__(constructor, prototype)(5.0000000000000000000000.constructor), __proto__ getter: this.__defineGetter__(\"__noSuchMethod__\", function (__parent__) { return ({a1:1}) } ) }); new (prototype.prop)(this.__defineSetter__(\"__proto__\", function  prop () { return prop } ), new (*::*)(null)); new String()) {const __count__, constructor = 4.;/*for..in*/for(const [033].map(eval) in ((eval)((prototype = __parent__ = __count__))))gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in ({} | <x/>)) (*);if(+*) return; else  if (constructor) {export *;var __count__ = prototype, __parent__; }");
tryItOut("M:if(({ prototype: ({ __iterator__: [, __noSuchMethod__], prototype: prop }), __noSuchMethod__: [, , ({ __count__: __proto__ })] }) = function  prototype () { return null }  -= \f5.0000000000000000000000.__noSuchMethod__) /*for..in*/for([, __proto__, constructor] = <x/> in @foo) {const __count__, __proto__ = undefined;yield 0.1; } else {{while(((__iterator__ = #1#)) && 0)yield;let (__count__ = @foo) { function ()[,,] } } }");
tryItOut("L:if( /* Comment */window) { if (-(prop =  '' )) gc() const function::__iterator__; else (window);}");
tryItOut("if(<><zzz>new (window if (throw <><x><y/></x></>;)).watch(\"__iterator__\", [1,2,3,4].map)(<x><y/></x>.unwatch(\"__noSuchMethod__\"), null.__lookupSetter__(\"__proto__\"))</zzz></>) var __iterator__, constructor; else  if ([(Object((*::* << <y><z/></y>), ({a2:z2})))].filter((function  __parent__ (__proto__) { yield <x><y/></x> } ).call)) {/*infloop*/for(var prototype; <y><z/></y> ? undefined : <x><y/></x>; <x><y/></x> .. <><x><y/></x></>) {/*for..in*/L:for(let prop = 1e81 in -1) break L; } } else {yield\nL:if(undefined) {throw [z1]; } else  if (3) throw <x><y/></x>; else {yield;{} }\n }");
tryItOut("( /x/ )\n;");
tryItOut("/*infloop*/for((this.zzz.zzz); ({ get __count__ __proto__ (prop, __iterator__) { yield false ? <><x><y/></x></> : <x/> }  }); prop = <x/>) let(constructor = (this.zzz.zzz)) ((function(){})());");
tryItOut("{/*infloop*/for(let ({ prop: [] }) = __noSuchMethod__; __proto__|=<><x><y/></x></>; ((new (({}).hasOwnProperty)()).propertyIsEnumerable(\"__iterator__\"))) /*infloop*/L:for(let __count__ = 1e81; window; <\f><x><y/></x></>) <><x><y/></x></>; }");
tryItOut("/*infloop*/M:for([15,16,17,18].some(constructor, (function ([y]) { })()); new Boolean(<><x><y/></x></>, *)\r.throw( /x/g .__lookupGetter__(\"__count__\")); __proto__.prop) {with({prototype: new Function(({a1:1}))}){ } }");
tryItOut("{gc() }");
tryItOut("(*::*);");
tryItOut("if(<><xxx {__proto__}={ /x/g .unwatch(\"constructor\")} /></>) {gcgc() } else  if (('haha'.split)()) {return prop;throw <><x><y/></x></>; } else {switch((__proto__ = prototype)) { default: function () { return @foo } \nyield *::*;\ncase ( ''  .@ __count__): throw 0x99; } }");
tryItOut("/*infloop*/L:for(window.unwatch(\"prototype\") /= (Iterator()); ({ prop: __proto__ }) = new (function  prop (prop, constructor) { throw *::*; } )(__noSuchMethod__); eval(\"(function(q) { return q; }(new (<y><z/></y>)(<><x><y/></x></>)))\", ( /x/g ))) {export __noSuchMethod__\nreturn <><x><y/>/x>/*\n*/</>; }");
tryItOut("if((prototype = __noSuchMethod__) :: ({__parent__: [,,]})) function(y) { yield y; ({});; yield y; } else  if (false) yield;");
tryItOut("/*infloop*/L:do export *; while([11,12,13,14].sort);");
tryItOut("/*infloop*/for(var __parent__ = const __noSuchMethod__; <x><y/></x>.throw(-3/0); ( { return gc() } )) __iterator__(this) = constructor;");
tryItOut("L: ");
tryItOut("{}\ncontinue L;\n");
tryItOut("/*for..in*/for(let __noSuchMethod__.__noSuchMethod__ in (\n(function  __iterator__ (__noSuchMethod__, prop) { return\n } )(this u)))(<x><y/></x>)\n const prop;");
tryItOut("export prop;yield;");
tryItOut("return;");
tryItOut("L: export *;");
tryItOut("if(((function(q) { return q; }).call(prop.__noSuchMethod__ = 1e+81, \t))) { if /*\n*/( /x/ ) {M:with( \"\" (*::*, <><x><y/></x></>))yield this;/*infloop*/L:for(({ __proto__: __count__, prop: prop }) = (#1#.watch(\"prop\", [1,2,3,4].map)); ({__parent__: <><x><y/></x></>});  /x/ ) gc() }} else new Function");
tryItOut("/*for..in*/L:for([__noSuchMethod__, , ] in prop .@x:: this) let (\f__count__ =  '' \f) { var prop = false, prototype = prop; }");
tryItOut("M:if((({prototype getter: [1,2,3,4].slice }))) /*for..in*/for(const constructor = null ^  /x/g  in *) {prototype = <y><z/></y>, __proto__; } else  if (( \"\" .isPrototypeOf(1.3))) {yield;L: continue L; }");
tryItOut("while((__parent__ = __proto__) && 0)break L;gc() }");
tryItOut("prop");
tryItOut(";");
tryItOut("/*infloop*/for(var prop = 3.141592653589793; \n(1e81 | ); ({} !== prototype)) {if(~<y><z/></y>) {export *; } else  if ((__parent__ = <><x><y/></x></>)) ; }");
tryItOut("M:while(([(this.constructor = 3/0 for (__count__ in <><x><y/></x></>) for (__proto__ in  \"\" ))].sort((this.zzz.zzz) && true ^= __iterator__)) && 0){L: {break ; }L:if(<x><y/></x>) { if (3) __parent__ else ;} }");
tryItOut("{break M; }");
tryItOut("/*infloop*/for(const __iterator__; (this.zzz.zzz.yoyo('fafafa'.replace(/a/g, /a/gi))); ([new (*)(({a2:z2}))].some(([1,2,3,4].slice).apply))) {{}/*for..in*/for(__noSuchMethod__ in ((function  __proto__ ()window)(<x><y/></x>)))export *; }");
tryItOut("/*infloop*/while(null){(<><x><y/></x></>);break L; }");
tryItOut("{}");
tryItOut("L: if(*::*++.@foo) {const __noSuchMethod__; } else  if ((gc).call(#1=[#1#].yoyo((__proto__ = *)), )) const __count__ = false;");
tryItOut("gc()\n");
tryItOut("(__noSuchMethod__);");
tryItOut("/*infloop*/for(arguments; @foo; <x/>) /*\n*/let prototype;");
tryItOut("if(({ __noSuchMethod__: ({ __parent__: ({ __count__: ({ __iterator__: __parent__, __parent__: __iterator__ }), __proto__: ({ __proto__: __count__, getter: constructor }) }) }), __parent__: [<><x><y/></x></>['function::__iterator__'], constructor, ] }) = ((window.watch(\"__iterator__\", null))[(prop.__noSuchMethod__ setter= (<y><z/></y>).call)])) { if (new (undefined)((p={}, (p.z = __parent__)()), function::constructor.constructor = <y><z/></y>)) /*for..in*/for(const __noSuchMethod__ in <y><z/></y>) {gc()gc() } else let __iterator__ = 1e4, __parent__ = <x/>;}");
tryItOut("if((('fafafa'.replace(/a/g, new Function).hasOwnProperty(\"!(this.zzz.zzz)\")) |= ({ setter: __count__ }) = 0)) {\t if ((@foo)(({ prop: prop, __count__: __count__ }).__noSuchMethod__ = undefined.__lookupSetter__(\"__parent__\"))) {if(undefined) { if (this) {; } else {return; }}__proto__; } else {/*infloop*/for(this; /*\n*/<><x><y/></x></>; <x/>) return  /x/ ;continue L; }}");
tryItOut("let (({ __proto__: __count__ }), __count__ = __iterator__.__proto__) { /*infloop*/for(let constructor = ; ++eval(\"this--.isPrototypeOf ({ __parent__: prototype, __parent__: ({ __proto__: let }) })\\t <><x><y/></x></>)\", <x><y/></x>(this)); (__count__.__proto__ = ((yield <x><y/></x>)))) {\nM:if(*::*.__iterator__ = #2=({__count__: (<><x><y/></x></> @ [,])})) yield; else  if (constructor = true.yoyo(<><x><y/></x></> != *)) __parent__, prop = __noSuchMethod__\n; } }");
tryItOut("if(__parent__.((new (<x/>.__defineGetter__(\"__iterator__\", (1 for (x in []))))()))) { if ([] = ( \"\" .watch(\"prototype\", Function))) continue L;} else {{}yield this; }");
tryItOut("if('fafafa'.replace(/a/g, constructor = (RegExp() ^ this))) {return; } else  if (((<y><z/></y> |= __iterator__).throw(<x/>.watch(\"__iterator__\", __iterator__)))) /*infloop*/while( '' ){let __parent__ = -3/0; }");
tryItOut("{M:if(__parent__ = __noSuchMethod__.constructor) { if (prototype = [1]) {;{} }} else {; } const __count__; }");
tryItOut("switch(([, __proto__, , __proto__, __proto__] = (__noSuchMethod__ = <><x><y/></x></>))) { case  /x/g : return; }");
tryItOut("let delete, function::prop = <x/>;('haha'.split).apply");
tryItOut("L: /*infloop*/do {(<y><z/></y>); } while(window);");
tryItOut("L:if(return.__iterator__) yield undefined;");
tryItOut("/*for..in*/for(var constructor = <y><z/></y> in *) <y><z/></y>");
tryItOut("return new ((\ntrue === undefined) = (<y><z/></y>.*));");
