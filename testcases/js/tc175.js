tryItOut("let (\tprototype =  continue , constructor) { if(__iterator__.__count__ / (<x><y/></x>.(<x/>).__defineSetter__(\"__count__\", Function))) { if ( { return 5.0000000000000000000000.watch(\"prop\", function  prop (__proto__, __parent__) { yield 033 } ) } ) /*infloop*/for(this.isPrototypeOf(@foo);  /x/g .__iterator__ = prototype; this.__defineGetter__(\"__parent__\", (1 for (x in [])))) {return *; }} else {yield constructor; } }");
tryItOut("/*infloop*/for(constructor; <y><z/></y>; -1) if(window) { if (*::*) ; else {throw null; }}");
tryItOut("{}\n{}");
tryItOut("if(<x/>.prop = <><x><y/></x></>) {return null; } else  if (this.__defineSetter__(\"constructor\", eval)) return;");
tryItOut("L:do {with({}) { yield window; } /*infloop*/for(const __parent__; <ccc:ddd></ccc:ddd>; prototype) {throw window; } } while((this.isPrototypeOf(arguments)) && 0);");
tryItOut("/*for..in*/L:for(prop in (([1,2,3,4].slice)(Boolean(__iterator__)))){L:with({__proto__: 3}) }");
tryItOut("throw StopIteration;/*for..in*/for(let [__proto__, __noSuchMethod__] = __count__.constructor = __count__ in  /x/g ) {;(constructor); }");
tryItOut("return null;");
tryItOut("L: return <><x><y/></x></>;");
tryItOut("/*infloop*/for(__parent__.__iterator__; ({__parent__: @foo, prop setter: function  __noSuchMethod__ () { Math.sin }  }); (undefined.yoyo(__iterator__))) {yield;const prototype; }");
tryItOut("if(((yield (new (#3={a:#3#})( /x/g , <><x><y/></x></>)\t)).__lookupGetter__(\"__noSuchMethod__\"))) { if (((p={}, (p.z = ((this)[#3={a:#3#}]))()))) {; } else {/*infloop*/while((prop = <><x><y/></x></>)){yield; } }}");
tryItOut("{M:if( \"\"  & ( /x/g  ? <x/> : [,,])) /*infloop*/for(let prop = [,,z1];  /x/g ; *::*) export *;/*infloop*/do { } while(__proto__); }");
tryItOut("/*infloop*/for(const (__iterator__)(@foo) = *.__parent__.__lookupGetter__(\"__count__\"); __parent__; this.__defineSetter__(\"prototype\", (1e81).watch)) {continue L; }");
tryItOut("");
tryItOut("L:if(([15,16,17,18].some([1,2,3,4].slice, *)--)) var __iterator__ = this, __proto__ =  /x/g ; else  if ( \"\" .__count__) {do export __iterator__; while((<y><z/></y>) && 0);while((( /x/ .constructor = <><x><y/></x></>)\r) && 0){__count__yield <x/>; } }");
tryItOut("\n");
tryItOut("/*infloop*/do {} while(((p={}, (p.z = const __noSuchMethod__, __proto__ = undefined)())));");
tryItOut("if(((eval).call(true instanceof *::*(), ([15,16,17,18].some((@foo).__defineSetter__,  '' ))))) export *; else  if (__proto__ =  { export *; } ) const __noSuchMethod__ = window, __noSuchMethod__ = false; else prop, prop;");
tryItOut("let(__proto__ = true) { export function::__parent__;");
tryItOut("L: {yield;/*for..in*//* nogeckoex bug 349964 */L: for  each(let __count__ in ({a1:1})) return <x><y/></x>; }");
tryItOut("L//h\n:if(<employee id=\"1\"><name>Joe</name><age>20</age></employee>) {throw <x/>;; } else  if ((({__count__: @foo++, __count__: ([1].unwatch(\"prototype\")) })((uneval(__noSuchMethod__%=(function ([y]) { })())),  /x/ ) for (prototype in * -= <><x><\ty/></x\f></>))) {const constructor; } else {{var constructor = __proto__\f;yield <><x><y/></x></>; } }");
tryItOut("with({}) { {continue M; } } ");
tryItOut("/*for..in*/for(let [, , prop, constructor, __iterator__] in (__count__)) /*for..in*/L:for(var [__count__, __count__] = this in 1.2e3) {const prop;<><x><y/></x></>; }");
tryItOut("/*infloop*/for(let prop; [[,]].sort(<x><y/></x>).watch(\"__count__\", new Function); (this.zzz.zzz)) /*for..in*/for(constructor in ((function (__parent__) { 1e4; } \t)(false))){export function::prop; }yield this; const __parent__;");
tryItOut("if((<>@foo</>.(3.141592653589793) .@ (RegExp(RangeError(<x><y/></x>, #1#), this)))) return  \"\" ; else  if ((uneval(<><x><y/></x></>))) M:switch(<x><y/></x>) { default: break;  }\n");
tryItOut("if(this) { if (window) *::*} else {return;yield <><x><y/></x></>; }");
tryItOut("/*for..in*/M:for(var [prototype, __noSuchMethod__] = (((p={}, (p.z = <zzz>#3={a:#3#}</zzz>.(prop|=<><x><y/></x></>))()) for (__proto__ in (window[<y><z/></y>])) for (prototype in null) if (*::*))) in (gc())) __parent__, __iterator__;");
tryItOut("{yield (uneval([1,,])); }");
tryItOut("/*infloop*/L:for(const ({ __noSuchMethod__: 1e4 }) = [11,12,13,14].some; Iterator(.2);  '' .__lookupSetter__(\"__proto__\")) break ;");
tryItOut("/*infloop*/do {{}{return  /x/ ; } } while(\n(function(y) { yield y; __count__;; yield y; })((<><x><y/></x></>)[<x><y/></x>], 3.141592653589793));");
tryItOut("return;\nexport *;\n");
tryItOut("/*for..in*/for(let prop in (('haha'.split)(\nconstructor.prop = <x><y/></x>.__lookupSetter__(\"__count__\")))){throw __parent__; }");
tryItOut("switch(<x/>) { case 0: return;break; {}default: ;break; case 4: break;  }");
tryItOut("throw @foo");
tryItOut("export __proto__\nL:\rwith([, , __parent__, , []] = \f__noSuchMethod__ = __proto__ ? --(-1) : (5.0000000000000000000000.isPrototypeOf(<><x><y/></x></>))){L: continue ; }");
tryItOut("for(let y in [5,6,7,8]) with({}) { let(__parent__, __count__ = (p={}, (p.z = <x><y/></x>)())) { return new Function(<y><z/></y>); } ");
tryItOut("export __parent__;throw *::*;");
tryItOut("switch((<x><y/></x>.@foo).__lookupGetter__(\"__proto__\")) { case __parent__: gc()break; default: yield true;break;  }");
tryItOut("/*for..in*/for(var prototype in @foo += <x><y/></x>) do {return *::*; } while((false) && 0);");
tryItOut("L: {yield;throw  /x/g ; }");
tryItOut("yield; const __parent__;");
tryItOut("/*for..in*/for(let [constructor, __parent__] = [11,12,13,14].filter in  '' ) function(y) { yield y; (<y><z/></y>);; yield y; }");
tryItOut("try { throw __count__; } catch(__noSuchMethod__ if (function(){this.zzz.zzz;})()) { yield \n-1; } catch(__count__) { const constructor, __noSuchMethod__; } finally { with({}) { try { var __noSuchMethod__; } catch(__proto__) {  }  }  } ");
tryItOut("M:if('fafafa'.replace(/a/g, /a/gi)) { if (({ prototype: ({ __count__: ({ __iterator__: ({ __parent__: [, constructor, , set] }), prop: __count__ }) }) }) = (let constructor = <x><y/></x>)) /*infloop*/L:for(prototype = (uneval(window)); prop >> function ([y]) { }; (3.141592653589793 + *)) export *; else {throw *::*; }}");
tryItOut("do {/*for..in*/for(__count__ = (__iterator__\t.__iterator__ getter= Function) in  /x/ ) {export *;prototype = <y><z/></y>; }/*infloop*/for(; (*::*.watch(\"prop\", gc)) || constructor = \fthis; (true().prototype = (__proto__ = __count__))) {<x><y/></x>; } } while(((\r({ prototype: -3/0 }) = (yield  '' ) || <x/> .@*:: function::__noSuchMethod__)) && 0);");
tryItOut("/*for..in*/for(const [__proto__, prop] = 5.0000000000000000000000.valueOf(\"number\") in this) return;");
tryItOut("/*for..in*/for(const (+0).throw((new Function(\"let __parent__, __count__ = <x/>;\"))(function(id) { return id })).constructor in ((eval)(((0x99 if (<><x><y\f/></x></>))))))continue ;");
tryItOut("if(@foo.@*) var prop = [1,,]; else {{} }");
tryItOut("L:do export *; while((((__count__.(*))[(this.__defineGetter__(\"__proto__\", eval))])) && 0);");
tryItOut("if((++function::__count__ = (-0))) {export *; const __proto__; }");
tryItOut("if(window.watch(\"constructor\", (new Function(\"/*infloop*/do {const __parent__;export __parent__; } while(new @foo().__defineGetter__(\\\"__iterator__\\\", /a/gi));\")))) {return;{gc()export __count__; } } else  if (({ constructor: [({ constructor: __parent__ }), , __count__] }) = yield ([11,12,13,14].some)) let \t(({ prop: [], __count__: ({ constructor: __noSuchMethod__ }) }) = (-1), ({ prop: __noSuchMethod__ })) { return; }");
tryItOut("{/*infloop*/while((this.__defineGetter__(\"__parent__\", function  __iterator__ ()<x/>))[yield #0=<x/>])/*infloop*/L:for(var __iterator__; <x><y/></x>; @foo)  }");
tryItOut("\n");
tryItOut("if(<y><z/></y>) return this; else /*infloop*/for( /x/g  = <y><z/></y>; window; this) {export *;{} }");
tryItOut("const constructor;");
tryItOut("return;");
tryItOut("/*infloop*/M:for(prototype; prototype = (yield __proto__); <> </>) {return;function(y) { yield y; ;; yield y; } }");
tryItOut("function(y) { yield y; return (-0);; yield y; }\nyield;\n");
tryItOut("let (__proto__ = <><x><y/>\t</x></>) { const __parent__, __proto__ = <><x><y/></x></>; }");
tryItOut("{}let prototype;");
tryItOut("if(__noSuchMethod__ = (uneval( /x/ ))) { if (prop = <y><z/></y>) {yield __iterator__/*infloop*/for(const __count__; ( \"\" ); new \t(/a/gi\t).call()) { } } else /*for..in*/L:for(let get = let __noSuchMethod__ = @foo in ({a2:z2})) with([,,z1]){let prop = __proto__; }}");
tryItOut("if((<x><y/></x>[({})])) {(<x/>); } else  if (prototype.__noSuchMethod__ setter= __count__) {{}\flet __count__; } else {;gc() }");
tryItOut("/*infloop*/for(yield <><x><y/></x></>; <><x><y/></x></>.((({a2:z2}) <<= prototype)); [(#0=({__noSuchMethod__: __parent__.constructor = false}))]) /*for..in*/for(const prop in [z1]) Math.pow\n{let __count__, yield null;;export prop; }");
tryItOut("L:if(<><x><y/></x></>) return true; else  if ((*::*)(this)) {Math.pow } else {const constructor, __iterator__ = 0; }");
tryItOut("with(<><x><y/></x></> && [,]){ in gc() }");
tryItOut("do {/*for..in*//* nogeckoex bug 349964 */M: for  each(__count__(<><x><y/></x></>) in <><x><y/></x></>) {}yield; } while((new RangeError()) && 0);");
tryItOut("throw StopIteration;");
tryItOut("switch(<><ccc:ddd><ccc:ddd><!--yyprop = true></ccc:ddd></ccc:ddd></>) { default: with({prototype: <x><y/></x>}){continue M; }break; if(this.__defineSetter__(\"__iterator__\", /a/gi)) switch(033.@foo) { case 3: break;  }L:while((constructor) && 0){window }break; case 9:  }");
tryItOut("{\t}\nreturn;\n");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((Math.sin)(1e-81))){const __proto__; }");
tryItOut("");
tryItOut("let(__parent__) { ((function ([y]) { })());");
tryItOut("(((eval(\"[,,z1]\", undefined))(()))); const ({ __iterator__: __parent__.prop });");
tryItOut("with(<x><y/></x>)/a/gi");
tryItOut("<x><y/></x>");
tryItOut("if( /x/  & null) L: export __proto__;if(prototype)  else  if (((*::*)[-0])[((__parent__ if (false)))]) ({}); else {constructor =  '' , prop = <x><y/></x>; /x/g  }");
tryItOut("with({__noSuchMethod__: ((uneval(prop-=<x><y/></x>.(({a2:z2})))))}){/*for..in*/for(__iterator__ in ((function(y) { yield y; gc(); yield y; })( /x/ ))){function  __parent__ (prop)* }\n }");
tryItOut("L:if(__count__) { if ( \"\" ) {M:with({prototype: @foo}){; } } else {export *;yield *; }} const __noSuchMethod__;");
tryItOut("/*infloop*/for(var ({ __iterator__: yield\f, __parent__: prop }) =  /x/g .isPrototypeOf(3/0); (<><x><y/></x></>.throw(this)); undefined.__count__) export __proto__\n");
tryItOut("/*infloop*/for(let [({ prop: [constructor, constructor, ] }), <employee id=\"1\"><name>Joe</name><age>20</age></employee>] = (prop = (({}).__lookupGetter__)()); [prototype] = ({ set prototype prototype (__count__, __count__)(prop = prop) }); ( ''  >>>=033)) {; }");
tryItOut("/*for..in*/for(var [prototype, __iterator__] = (__noSuchMethod__-=\t[033].sort(({}).__defineSetter__)) in gc()) {return;eval }");
tryItOut("do {/*for..in*/for(prop in ((new Function)(#1#))){return; }yield function ([y]) { }; } while(((typeof this)) && 0);");
tryItOut("if(prototype = <><x><y/></x></>) {__parent__let prototype; } else  if ( /* Comment */__iterator__) const __proto__;");
tryItOut("/*for..in*/for(var ({ __iterator__: __noSuchMethod__ }) in (<><x><y/></x></>.__lookupSetter__(\"__iterator__\"))) {var __proto__, __count__; }");
tryItOut("(<y><z/></y>);");
tryItOut("{let constructor, __iterator__ = <x/>;export __proto__; }");
tryItOut("if((<><x><y/></x></> for (yield in <x><y/></x>)) ? <x/>.@* : Iterator() *= 3\n) /*infloop*/for(__proto__; (new Function(\"let __parent__;\"))(yyy); <zzz>[11,12,13,14].filter</zzz>) {{} } else L: {gc()<x><y/></x> }");
tryItOut("L:with({__parent__: false}){return; }");
tryItOut("/*infloop*/while([1] *= <><x><y/></x></>\n){__noSuchMethod__;if((this)(true)) { if (__noSuchMethod__ %= constructor) (<x/>);} else {export *; } }");
tryItOut("export prop");
tryItOut("{new Function\n; }");
tryItOut("{(<><x><y/></x></>);\n[[1]];\ntrue; }");
tryItOut("while((delete  /x/g ) && 0)return function ([y]) { };\n(null);\n");
tryItOut("/*for..in*/L:for(prototype in undefined) <><x><y/></x></>;");
tryItOut("with({constructor: __count__ = <x><y/></x>.eval((yield __iterator__ ? * : <x><y/></x>))}){/*infloop*/do {;yield undefined; } while(__parent__.(new Iterator())); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in *) var __parent__;");
tryItOut("return;");
tryItOut("/*for..in*/for(__count__ in __parent__|=#3={a:#3#} ? (eval(\"[1]\", ({a1:1}))) : ({a2:z2}) , ) switch(<x><y/></x> &= 3.141592653589793) { case 6: break;  }");
tryItOut("const __parent__ = <x/>;");
tryItOut("/*infloop*/for(var prototype; new RegExp(new (*)(constructor, <x><y/></x>),  '' ); ({prototype: <><x><y/></x></>})\n.__defineGetter__(\"__parent__\", new Function)) __noSuchMethod__");
tryItOut("{prototype = *::*, prop = falsereturn <x><y/></x> }");
tryItOut("-0;");
tryItOut("{while((prop) && 0)window; }");
tryItOut("/*infloop*/while(\n<y><z/></y>)constructor = undefined;");
tryItOut("gc()");
tryItOut("/*for..in*/\ffor(__iterator__ in ((Math.sin)( \"\" .__defineSetter__(\"__parent__\", 'haha'.split))))L:if( /x/g ) var __iterator__ = <x><y/></x>, __proto__; else  if (-1) {var prop;function  __noSuchMethod__ (__parent__, __proto__) { function(y) { yield y; return undefined;; yield y; } }  } else yield;");
tryItOut("gc()\nfunction  __count__ (__parent__)__noSuchMethod__");
tryItOut("if(*.constructor = window) {yield;export __proto__; } else  if (window &= [[]]) {(this); }");
tryItOut(" const __noSuchMethod__;");
tryItOut("/*infloop*/for(const ({ prototype: ({ __parent__: __proto__, __count__: __noSuchMethod__ }) }) = @foo; (constructor.(constructor = true.hasOwnProperty(\"__noSuchMethod__\").watch(\"__iterator__\", ({}).hasOwnProperty))); ((yield )) ? *::* : (*::*)[ /x/ ] | [[15,16,17,18].map(Math.pow, <><x><y/></x></>)].filter((window).watch)) /*infloop*/do {} while(__proto__);\r");
tryItOut("delete = __proto__;");
tryItOut("/*infloop*/for(const  }) = ({prototype: [true]}); [15,16,17,18].some((eval).apply, prototype); (Function).apply) {yield; const constructor; }");
tryItOut("/*infloop*/for(const constructor; <y><z/></y>; [({constructor setter: /a/gi })]) if([]) { if ((undefined.@foo)) {let __iterator__, constructor = 4.; }} else {yield <><x><y/></x></>; }");
tryItOut("for(let y in [5,6,7,8]) throw StopIteration;");
tryItOut("if(((uneval(@foo)).__iterator__ = (p={}, (p.z = [[]])())).hasOwnProperty(\"__noSuchMethod__\")) { if ((({ prop: ({ __parent__: __count__(this) }), prototype: ({ prop: ({ prop: prototype, __parent__: prop }), __noSuchMethod__: __proto__ }) }) = ~( /x/g )[null] += <x><y/></x>.(<y><z/></y>))) L:if(([]())) { if ((prop = __proto__)) {const __iterator__;; }} else const __iterator__ = <y><z/></y>;} else {const delete;throw <x/>; }");
tryItOut("while((*) && 0)prototype = prototype;");
tryItOut("if(1e81) {(@foo); '' ;/*\n*/ } else  if (<y><z/></y>) yield undefined; else gc()");
tryItOut("with({__proto__:  \"\" })if( /x/g ) {yield @foo;yield <x/>; } else {return;{} }");
tryItOut("if([11,12,13,14].filter) {(try { (prototype;); } catch(constructor if <><x><y/></x></>) { gc() } );break ; } else  if ((new (({}).hasOwnProperty)(\n[15,16,17,18].map(function  prop () { return *::* } , 1.3)))) {; } else continue ;");
tryItOut("/*infloop*/while(new /a/gi(new (({}).__lookupGetter__)(<x><y/></x>, <><x><y/></x></>), undefined))");
tryItOut("{*; }");
tryItOut("if([[]]) {true; } else yield;");
tryItOut("/*infloop*/do 1e+81; while(<x><y/></x> ? <y><z/></y> : <y><z/></y>);");
tryItOut("return;");
tryItOut("if(false.unwatch(\"__parent__\")) var prototype, prop; else {continue ; }");
tryItOut("this.zzz.zzz;");
tryItOut("do \n{(typeof <x/>);var __count__\n } while(((Math.sin)()) && 0);");
tryItOut("this.zzz.zzz;");
tryItOut("gc()");
tryItOut("/*infloop*/L:for(let ({ __iterator__: ({ prototype: [__iterator__, __iterator__], constructor: [({ __proto__: __parent__, __proto__: __iterator__ }), ] }) })\f = @foo; 'fafafa'.replace(/a/g, [1,,]); (yield (/*\n*/new function(y) { yield y;  { continue L; } ; yield y; }(<x><y/></x>)))) {if(this.__defineGetter__(\"function::__parent__\", <x/>)) {{}throw __noSuchMethod__; } else  if ((([15,16,17,18].some((<x/>).__defineSetter__, *::*))++))  if (<x><y/></x>) else  }");
tryItOut("{export *\nlet (constructor, prototype = 1e+81) { export __proto__; } }");
tryItOut("continue ; const __noSuchMethod__;");
tryItOut("try { let(__proto__ = <y><z/></y>, ({ __noSuchMethod__: __count__ })) { throw StopIteration; } finally { throw __noSuchMethod__; } ");
tryItOut("{0.1; const <><x><y/></x></>; }");
tryItOut("<>yyy</>");
tryItOut("/*for..in*/for(prop.constructor in (({__parent__: 1e-81 }))[1.2e3--]) {{ }var __noSuchMethod__ =  /x/g ,  { yield <x><y/></x> } ; }");
tryItOut("/*infloop*/for(__iterator__.((((new Function(\"return;\"))).call(<x><y/></x>,  \"\" ))); var __noSuchMethod__.unwatch(\"yield\"); ((uneval(false)))) {M:if(<x><y/></x>) { if (case [,]: continue M;break; ;default: case 6: return;case 9: let __proto__, __parent__ = #3={a:#3#};break; ) let constructor;} else (<y><z/></y>); }");
tryItOut("M:if(3.141592653589793) { if ((yield false)) {((-1)); }} else {yield;throw __noSuchMethod__; }/*for..in*/for(var prototype in (([1,2,3,4].slice)(@foo.prop)))export *;");
tryItOut("L:switch( /x/ ) { default: break; break; case 8: M:switch(#0=[(this.yoyo(*))]) { case 4: export *;break;  } }");
tryItOut("__count__ = __noSuchMethod__\n");
tryItOut("/*for..in*/L:for(let [__parent__, __iterator__] = (__iterator__ = <x><y/></x>) in __proto__) {/*for..in*//* nogeckoex bug 349964 */ for  each(const __count__\n in undefined) {const prop =  /x/ , get; }(<><x><y/></x></>); }");
tryItOut("/*for..in*/for(let __iterator__ in ((function (let (__count__, __proto__) [11,12,13,14].some, __proto__)((function(q) { return q; }).call(<><x><y/></x></> ^= <x><y/></x>, <bbb xmlns=\"(({ __proto__: ({ prop: prototype }), prototype: [] }) = ({ __proto__.constructor: ({ __iterator__: constructor, function::prop: prototype }) }))\"><ccc:ddd><!--yy--></ccc:ddd></bbb>[undefined])))((<>this</>.([<></>])))))let (__count__ = (void <x><y/></x>)) { /*infloop*/L:for(<y><z/></y>; <y><z/></y>; *) {yield [,,];let set = #1=[#1#]; } }");
tryItOut("do {prop, prototype = (function ([y]) { })();return *; } while(((new (\nthis.zzz.zzz))) && 0); const get;");
tryItOut("{if(((function ([y]) { })()['__parent__'])\n) throw <x><y/></x>; else  if ((&)) L:if(<><x><y/></x></>) {} else  if (1.3) {yield; } }");
tryItOut("{yield;@foo }");
tryItOut("switch(({ __noSuchMethod__: prop }) = (this.zzz.zzz)) { default: break;  }");
tryItOut("switch((([1,2,3,4].slice).call(<x><y/></x>, <x><y/></x>, [z1]).__lookupGetter__(\"__count__\"))) { default: break; case 0: break; case !this , arguments: export *;break; break; case ('fafafa'.replace(/a/g, Math.sin)): break; case 1: export *;break; if(new /a/gi()) { if (this) {export __count__; }} else {export __count__;gc() } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in ([, constructor] = constructor)) if(<><x><y/></x></>) {yield;throw window; } else continue ;");
tryItOut("let ((*.__iterator__)(({constructor: [,,z1].@*}).valueOf(\"number\")) = prop, __proto__) { {gc()L: __count__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <><x><y/></x></>) return;");
tryItOut("with({__noSuchMethod__: this}){throw this;window; }");
tryItOut("/*for..in*/L:for(case 1: break; default: break; break; break; break; case 5: for(let y in []); = ((p={}, (p.z =  switch )())) in (({ __proto__: [], constructor: ({ prop: constructor, prototype: __count__ }) }) = <><x><y/></x></>\n)) export *;");
tryItOut("switch((delete <><x><y/></x></>).throw(new Function(<><x><y/></x></>))) { case (__parent__.__parent__ getter= <x><y/></x>): /*for..in*//* nogeckoex bug 349964 */ for  each(var __noSuchMethod__ in <x><y/></x>) yield function(id) { return id };default: break;  }");
tryItOut("/*for..in*/for(var [__proto__, prototype] = ({__parent__: __iterator__ }) in (<x><y/></x>.__defineGetter__(\"prop\", Math.sin)).__defineGetter__(\"__iterator__\", function (case 0: ) { export *; } )) /*for..in*/for(const [prop, constructor] = 0x99 % true && \nthis in <x/> ? <y><z/></y> : window) {export *; }");
tryItOut("switch((({a1:1}))[<x><y/></x>]) { default: break ; }");
tryItOut("/*for..in*/for([__count__, __parent__] =  \"\"  in [[]]) {;yield <><x><y/></x></>; }");
tryItOut("/*infloop*/M:for(\f(constructor)[<x/>]++; (__iterator__-=033)\n .@x:: ((__noSuchMethod__ = -3/0)--); (new (<y><z/></y>).watch())) L: (<y><z/></y>);");
tryItOut("yield (window %= 1e-81);");
tryItOut("try {  } finally { export *; } ");
tryItOut("switch(true) { case 5: break;  }");
tryItOut("/*infloop*/do {var __proto__, __proto__;yield true; } while(__parent__);");
tryItOut("let (__proto__) { export * }");
tryItOut("with({prop: __iterator__ @ <x><y/></x>}){__iterator__: <><x><y/></x></>{} }");
tryItOut("let(getter) { return;");
tryItOut("do {{}yield; } while(((false.__lookupSetter__(\"prototype\"))) && 0);");
tryItOut("L: {if(__iterator__ = <x><y/></x> .@ window) return; else  if (({__noSuchMethod__ getter: ({}).hasOwnProperty })) {yield; } else {export *;return -0; } }");
tryItOut("throw __parent__;");
tryItOut("(Error(1e4, (-0)))\n");
tryItOut("{L: {const prototype = __iterator__; } }");
tryItOut("/*infloop*/while(^)throw *");
tryItOut("__count__ = __iterator__;");
tryItOut("{}");
tryItOut("L:if(window) {\t; }");
tryItOut("var constructor, ({ __noSuchMethod__: __count__ }) = __proto__ = undefined;\nif(let (prototype) arguments\n) { if ( /x/g \n) {export *; }} else 0/0;\n");
tryItOut("gc()");
tryItOut("L:if((function  __count__ (__parent__, __parent__) { return <x><y/></x> } )()) {{}throw *::*; } else  if ([(4..__iterator__) for (prop(<{__iterator__}><ccc:ddd></ccc:ddd></{__iterator__}>) in this--) for each (__proto__ in  /x/g ) for each (__parent__ in <y><z/></y>)])  else \f{(window);export *; }");
tryItOut("/*for..in*/L:for(const __proto__ = --window\f in __parent__ = 1e4) {[1] }");
tryItOut("/*infloop*/for(let <x><y/></x>['prototype'] = (constructor = constructor); 'fafafa'.replace(/a/g, function(y) { yield y; const __iterator__ = @foo, __parent__;; yield y; }); (__noSuchMethod__ >> ((yield __proto__)))) let prop;");
tryItOut("if(false.__count__\f = <><x><y/\r></x></>.watch(\"prototype\", [,]: __iterator__)) const __proto__, __proto__ = ({a1:1}); else  if ( /* Comment */(({}) .. <x><y/></x>)) {let __parent__ =  /x/ ;__count__, prop; }");
tryItOut("case 4: constructor = prop;break; /*infloop*/for(__parent__; (new Number(<!--yy-->)); [*::* <= __iterator__]) __count__ = \n__count__break; ");
tryItOut("M:switch(function  constructor (__parent__, __proto__) { <><x><y/></x></>; } ) { case __parent__ = __parent__: /*infloop*/M:do {(*);throw window; } while(*::*);break; default: export *; }");
tryItOut("let(__count__) ((function(){yield;})());");
tryItOut("/*infloop*/\tfor(__noSuchMethod__ = eval(\"<x><\\ry/></x>.@*\", [__iterator__]);  '' ; (-1) -= [<><x><y/></x></>].some(function(q) { return q; })) {(1 for (x in [])) }");
tryItOut("throw StopIteration;");
tryItOut("while((__proto__ = <y><z/></y>) && 0)function  __parent__ (__noSuchMethod__, __noSuchMethod__) { export *; } \n");
tryItOut("if((({ __parent__: ({ constructor: constructor, __noSuchMethod__: [[]] }) }) = __count__.prop)) /*for..in*/for(var prop = (prototype.__defineSetter__(\"__parent__\", ((1 for (x in []))).call\f)) in __noSuchMethod__) {var __iterator__, __proto__ = <><x><y/></x></>export __count__; } else with({}) (*::*);");
tryItOut("try { Function } catch(constructor) { gc() } ");
tryItOut("{(this);L: {const __noSuchMethod__ = <x/>; } }");
tryItOut("if((let (prototype = <x><y/></x>, __iterator__) window)(({__proto__: 1e81 })) < (new (({}).hasOwnProperty)( /x/g , <><x><y/></x></>)++)) return; else export __count__;");
tryItOut("try {  } finally {  } ");
tryItOut("__count__ = <x><y/></x>; const prop;");
tryItOut("L:if((__noSuchMethod__ = __parent__.__count__ = [z1,,].constructor.__lookupGetter__(\"__proto__\"))) M:if(window)  else  if (*) yield; else {export __iterator__; } else  if ((Boolean(3.141592653589793, 1e4)) %= [11,12,13,14].map) {throw undefined; } else gc()");
tryItOut("let (this = true = @foo) { ({ constructor: ({ __count__: ({ __count__: __proto__ }), __proto__: __count__ }) }), prototype = export *; }");
tryItOut("/*infloop*/M:do \n while(((p={}, (p.z = __proto__)()) for (__parent__ in <y><z/></y>) if (constructor).prototype++));");
tryItOut("if(<y><z/></y>) {yield;let __count__, __parent__ = <x><y/></x>; }\nyield;");
tryItOut("\n");
tryItOut("constructor.__noSuchMethod__ = __iterator__;");
tryItOut("if(( /* Comment */((uneval(@foo))))) gc()");
tryItOut("while((({a2:z2})) && 0){if(\t<y><z/></y>) export __proto__; else  if (<x/>) {yield undefined;return; } else continue M;throw  /x/g ; }");
tryItOut("this.zzz.zzz;");
