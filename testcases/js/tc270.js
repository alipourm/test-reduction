tryItOut("M:if((({prop: (<y><z/></y>(prop)).isPrototypeOf(<x/> -= <y><z/></y>)}))) return @foo; else ");
tryItOut("\n");
tryItOut("throw -1;export *;");
tryItOut("while((Iterator((constructor.(@foo)), new (~__parent__)())) && 0){() = constructor; }");
tryItOut("/*for..in*/for(var __parent__ in 1e-81)  /x/g ");
tryItOut("/*for..in*/L:for(var __proto__ in this) {gc() }");
tryItOut("/*infloop*/L:for(var prop = <><x><y/></x></>; function(id) { return id }; __iterator__) export __parent__;");
tryItOut("this.zzz.zzz;if(<x><y/></x>.__lookupSetter__(\"constructor\").yoyo(<><{__iterator__}>yyy</{__iterator__}></>)) { if (#1=[__parent__ = null]) ;} else throw prop;");
tryItOut("\n<x><y/></x>;\n\t");
tryItOut("/*for..in*/for(const __parent__ = __parent__ in \tundefined) gc()");
tryItOut("gc() const prototype;");
tryItOut("/*for..in*/M:for(let __parent__ =  /* Comment */<y><z/></y>.@* in yield window for each (__proto__ in [[]])) L:if(__count__ = <x><y/></x>) { if (null) {continue L; } else {{} }}");
tryItOut("if( /* Comment */<x><y/></x>[({a1:1})]/*\n*/.isPrototypeOf((constructor = [,]))) {__count__;<y><z/></y>; }");
tryItOut("if(constructor = @foo) let constructor, __parent__;");
tryItOut("/*for..in*/for(var constructor in __count__) {export *; }");
tryItOut("/*infloop*/do break ; while(eval(\"<><x><y/></x></>.__lookupSetter__(\\\"__count__\\\")\", (null +=  /x/g )));let ({ prototype: __noSuchMethod__, prototype: __count__ }) = true.hasOwnProperty(\"__parent__\"), constructor;");
tryItOut("/*infloop*/M:for(__proto__ = 0/0; <><x><y/></x></>; [,]) (<y><z/></y>);\nif(<><x><y/></x></>) {} else return <x/>;\n const __iterator__;");
tryItOut("with({}) try { yield @foo; } finally { with({}) { try { continue ; } catch(__iterator__ if (function(){__parent__})()) { <x><y/></x>; } try { throw prototype; } finally { with({}) this.__proto__ = __noSuchMethod__; }  }  } ");
tryItOut("let constructor = window, constructor = __count__; const __noSuchMethod__;");
tryItOut("L: return;");
tryItOut("if(<><x><y/></x></>) { if (*) {break M;const __count__ = <x/>, prototype =  /x/g ; }} else ;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in (__count__ -= (new  \"\" .hasOwnProperty(\"__iterator__\")))) {__proto__; }");
tryItOut("if(<><x><y/></x></> /= <y><z/></y>.throw(#2=[<><x><y/></x></>])) gc() else  if (<y><z/></y>.__defineSetter__(\"constructor\", eval)) {var constructor = null;return; }");
tryItOut("for(let y in [5,6,7,8]) export __proto__;");
tryItOut("__iterator__");
tryItOut("\ngc");
tryItOut("/*infloop*/for(((<y><z/></y> if (constructor))); 3; (@foo.eval(0))) {propconstructor, prop = <y><z/></y>; }");
tryItOut("if(({__parent__ getter: (\ntrue), prop: throw window })) {break ;return window\n } else  if ([, , , ] = this ? -1 : <><x><y/></x></>) {__count__(false)\t{} }");
tryItOut("if([this].sort((function () { yield *::* } ).call)) {gc()with({__proto__: ((0.1 if (<x/>)))}){export __noSuchMethod__; } }");
tryItOut("let(constructor) { __noSuchMethod__ =  \"\" , constructor;");
tryItOut("prototype, __noSuchMethod__ = 0.1\n(window);let __iterator__ = <x/>;");
tryItOut("/*infloop*/do {continue L; }if(<><x><y/></x></> instanceof  \"\" ) {} else throw <x><y/></x>; while(<><xxx {prototype}={[let (__proto__ = <><x><y/></x></>, prop) true].map((yield <x><y/></x>)--)} /></>);");
tryItOut("/*infloop*/while(1e81 = ({ get __count__(__iterator__) { /*for..in*/for(let prototype in __proto__) {__noSuchMethod__;gc() } }  })){{} }");
tryItOut("with({prototype: *::* instanceof <x><y/></x>}){return;<x><y/></x> }");
tryItOut("if(-0) {} else  if (<><x><y/></x></>) return; else 5.0000000000000000000000;");
tryItOut("return <y><z/></y>;");
tryItOut("/*for..in*/for(const __iterator__ in (((<y><z/></y>).watch)(@foo))){(prototype); }");
tryItOut("/*infloop*/L:for(this.__defineSetter__(\"__count__\", function  prop (__parent__)/*infloop*/M:do {export __iterator__;gc } while(!this);); [@foo].some(((-3/0).watch).call); ~<><x><y/></x></> .. false) {}");
tryItOut("/*for..in*/for(var __count__ in <x><y/></x>) {(window).__defineSetter__ }");
tryItOut("do {/*infloop*/for(let __count__; void false; void @foo) {undefined;throw <x><y/></x>; } } while(((({__parent__: <><x><y/></x></>}) + (\n3.141592653589793)) -= <y><z/></y>) && 0);");
tryItOut("while((((delete  '' ).isPrototypeOf((uneval(<><x><y/></x></>))))) && 0){;throw <y><z/></y>; }\n");
tryItOut("L:while(((new (1 for (x in []))()).propertyIsEnumerable(\"__iterator__\")) && 0){throw <x/>;//h\n1.3; }\nif(this.unwatch(\"__iterator__\").__parent__) { if (new (Math.sin).apply()) {3.141592653589793;( /x/g ); }} else yield this;\n");
tryItOut("return __count__ = __proto__\n");
tryItOut("/*for..in*/for(__noSuchMethod__.prototype in *) /*infloop*/M:do {{} } while(({a2:z2}));");
tryItOut("L:switch(new Iterator(__parent__.__count__ setter= function  __parent__ (__noSuchMethod__, __count__) { yield (this.@foo) } )) { case 7: break; L:with(<zzz> /x/ </zzz> >>>  /x/  <= <><x><y/></x></>)/*infloop*/while((new RegExp((<><x><y/></x></>)[<x><y/></x>], ({a2:z2})))){export *;export prototype; }break; default: case  /x/g : case  /x/g : /*infloop*/do yield <x><y/></x>; while(({})) }");
tryItOut("yield ({ set __noSuchMethod__(__parent__, prop)*, __iterator__ setter: Function });");
tryItOut("/*for..in*/for(const __proto__ = 3 in \t__parent__) {const constructor = [,,], prop = window; }");
tryItOut("L:do if(this.__defineSetter__(\"constructor\", ((1 for (x in []))).apply)) {throw null;return  \"\" ; } while(((delete ((p={}, (p.z = return)()))) >>= {} ? <><x><y/></x></> =  /* Comment */<x/> : (({}) < 4. < <><x><y/></x></>)) && 0);");
tryItOut("M:do if(window) { if (<y><z/></y>) { }} else {var __proto__ = <><x><y/></x></>, prototype = <><x><y/></x></>;yield; } while(((~typeof *::*)) && 0);");
tryItOut("while((<><x><y/></x></>.yoyo(4.)++) && 0)var prop, __noSuchMethod__;");
tryItOut("if(0.1 === <x><y/></x>) { if ((new [1,2,3,4].map(constructor))) {[,]; } else (<x><y/></x>);}");
tryItOut("/*infloop*/do {var prop, setter = @foo; } while(new (<><x><y/></x></>)());");
tryItOut("if(({})) { if (__parent__ = *::*) gc() else gc()}\nyield null;\n");
tryItOut("/*for..in*/for(let [__parent__, __count__] = __count__.__noSuchMethod__ getter= ({}).__lookupGetter__ in __noSuchMethod__ = (Function())) {return <y><z/></y>;export prop; }");
tryItOut("/*for..in*/for(let __iterator__.prop in  '' ) /*for..in*/for(const [__proto__, __count__] = #1# in #1=[#1#]) var x::__parent__ = false;");
tryItOut("{continue ;return <x><y/></x>; }");
tryItOut("{if(window .@ this) (4.); else {export *; }yield true; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __proto__] = #1=[<> /x/  instanceof {return; }</>] in @foo) {__noSuchMethod__ = *;const __count__, __noSuchMethod__ = <y><z/></y>; }");
tryItOut("with({}) { for(let y in [5,6,7,8]) let(prototype, constructor = .2) { return __noSuchMethod__; } ");
tryItOut("this.zzz.zzz;");
tryItOut("M:with({__proto__: eval(\"__count__.__proto__ setter= (<y><z/></y>).__defineSetter__\", this.zzz.zzz)}){if((*::* for (__noSuchMethod__ in this))) {([1]);let x::prop = -0, __parent__ = *; } else <x><y/></x>; }");
tryItOut("{throw [] = new RangeError(__noSuchMethod__, (x::__noSuchMethod__ ? <><x><y/></x></> : this))\n }");
tryItOut("/*infloop*/do const prop, __noSuchMethod__ = __iterator__; while(__count__ = <x><y/></x> , __proto__ = new [1,2,3,4].map(#1#,  /x/ ))\n");
tryItOut("if((('haha'.split)((({ set __parent__() { {} }  })) + <x><y/></x>.hasOwnProperty(\"__proto__\")))) { if (5.0000000000000000000000) do {export *;return; } while(([z1]) && 0); else {return true;yield; }}");
tryItOut("export *");
tryItOut(" const prototype;");
tryItOut("let (prop) { L:if(<><x><y/></x></>) (<></>); else  if (<><x><y/></x></>) {__parent__, __iterator__;let __count__ = prop, constructor, __iterator__ = __noSuchMethod__; } else {yield;return; } }");
tryItOut("/*infloop*/for(prop;  \"\" ; <x><y/></x>) throw  \"\" ;");
tryItOut("with(!\ffunction(id) { return id } >>> *.throw(*::*).__lookupSetter__(\"__parent__\") >> null){let (__iterator__, __parent__ = (-1)) { /*infloop*/while(__count__)gc() } }");
tryItOut("if((new prototype = #1#(((033)(<x/>, true))))) continue L; else  if (({__count__ setter: (/a/gi).apply })) yield *; else {throw *::*;const __count__; }");
tryItOut("if(<x><y/></x> >>> new __count__()) { if (('haha'.split).call((__iterator__ = <x><y/><///h\nx>))) {{}(<y><z/></y>); }} else function  __iterator__ ()<x/>");
tryItOut("/*for..in*/for(var [prototype, __parent__] = <x><y/></x> in false) {; }");
tryItOut("/*for..in*/M:for(const __proto__ = undefined.yoyo(<x/>) in <><x><y/></x></>) {__iterator__, prototype = <><x><y/></x></>;yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var __count__ in ({ set __count__ __count__ () { return ( /x/ )[[,,]] } , __proto__: -3/0.hasOwnProperty(\"prototype\") })) {return ({ set  ''  __count__ ()<x/> });{{} } }");
tryItOut("");
tryItOut("if(true) {/*for..in*//* nogeckoex bug 349964 */L: for  each(let x::__parent__ in -3/0) if( /x/g ) {throw [[]];prop = <x><y/></x>; }throw window; }");
tryItOut("/*infloop*/for( set __proto__ prop (__noSuchMethod__) { yield ({a2:z2}) } ; yield (-0)++; window) switch(<><x><y/></x></>) { default: break; yield ;case __count__: ;case 9: break; case <><x><y/></x></>\f: break L;break; prop = prototype, constructor = false; }\nyield;\n");
tryItOut("/*infloop*/L:for(prototype; <><x><y/></x></>; function ([y]) { }.prototype) case *.yoyo(__count__): break; yield;");
tryItOut("/*for..in*/M:for(var __parent__ in ((eval(\"(__proto__);\", prototype.__noSuchMethod__))(([__proto__ =  \"\" ])(window)))){; }");
tryItOut("if(new (({}).hasOwnProperty)(<><{prop}>yyy</{prop}>.((constructor = /a/gi).isPrototypeOf((new Function(__parent__, gc()))))</>, ({}).__lookupGetter__)) {<x/>;\nexport *;\nif(__iterator__) __iterator__; else  if ( /x/g ) (<x><y/></x>); else yield; } else /*for..in*/for(const [prototype, __count__] = constructor.__parent__ setter= Math.sin in 5.0000000000000000000000.eval(*)) {true }");
tryItOut("/*for..in*/for(__noSuchMethod__ in (((function ()true *= [15,16,17,18].sort(function () { yield null } , arguments)).apply)([[1]] && <y><z/></y>.watch(\"prototype\", (prototype).apply).__noSuchMethod__ = [ '' .hasOwnProperty(\"prototype\") for (__count__.__proto__ in <x/>)]))){/*for..in*/for(var __count__ = window in *) __count__ = <><x><y/></x></>, __proto__;export prototype; }");
tryItOut("L:if((((new Function)())() < new  \"\" .isPrototypeOf(++({ get set() { yield * } , __parent__: <><x><y/></x></> })))) { if ((yield {})) {var __proto__ = <x><y/></x>, __iterator__; } else \tthrow <x/>;}\ncontinue ");
tryItOut("/*infloop*/L:for((\n<y><z/></y>); __parent__.prototype[__count__ = ({a1:1})]; (__noSuchMethod__)()) prop;");
tryItOut("return; const prop;");
tryItOut("M:if(window) {yield;break ; }");
tryItOut("with({}) with({}) { for(let y in [5,6,7,8]) null; } ");
tryItOut("L:switch((__parent__.__iterator__ = __count__)) { default: {} }");
tryItOut("__proto__ = prototype;");
tryItOut("if(__proto__ = (-0)) const function::__count__, prop = true;");
tryItOut("return; const __proto__;");
tryItOut("/*for..in*/for(let yield in *::*) ;");
tryItOut("let(prop = true) { yield (p={}, (p.z = __parent__.((function ([y]) { })()))());");
tryItOut("/*for..in*/for(var prototype = (*.prototype) in #1#) ");
tryItOut("/*for..in*/for(let prototype.default: break; \tif(new ([,])(function ([y]) { }, this)) return;break; export prop;case <x><y/></x>: L: {(<x><y/></x>); }break; case 6: export *;break;  in ((({}).hasOwnProperty)(undefined.hasOwnProperty(\"__count__\"))))M:switch( '' ) { case <><x><y/></x></>: default: break; case 7: const __proto__ = @foo, __parent__;break; export *;break;  }");
tryItOut("let (__proto__) { const constructor = this; }");
tryItOut("L: __parent__ = <><x><y/></x></>, __parent__ = undefined;");
tryItOut("this.zzz.zzz;");
tryItOut("{while((arguments++) && 0)(<><x><y/></x></>); }");
tryItOut("throw StopIteration;");
tryItOut("with({}) var prop = constructor;");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = (__count__ = constructor) in (yield)) [1,2,3,4].map");
tryItOut("if(((((yield *::*)).isPrototypeOf(<x><y/></x> !== undefined))[([z1].isPrototypeOf(<><x><y/></x></>) |= <x><y/></x> .@ undefined)])) { if (null.throw(<y><z/></y>)) {/*infloop*/do <><x><y/></x></>; while( '' );prop = @foo; }} else yield;export *; __parent__");
tryItOut("/*infloop*/for(let __count__.__iterator__ = [11,12,13,14].some; [[]].watch(\"__noSuchMethod__\", eval); <x/>.propertyIsEnumerable(\"constructor\")) {return;; }");
tryItOut("let (prop = ({ __noSuchMethod__: __iterator__, __count__: ({ __noSuchMethod__ = (1e81.__lookupSetter__(\"__parent__\")): __count__ }) }) = (), __noSuchMethod__) { (1 for (x in [])) }");
tryItOut("/*\n*/with((({ get prototype prop (__proto__, __noSuchMethod__) { yield [false if (<><x><y/></x></>)] }  }))){(<x/>).__defineSetter__ }");
tryItOut("return <x/>;");
tryItOut("/*for..in*/for(let __iterator__ = <xxx>{__parent__}</xxx> in prototype.((function  constructor (function::constructor)<><x><y/></x></>)(this))) {__noSuchMethod__ }");
tryItOut("{throw [[]];return; }\n");
tryItOut("/*for..in*/M:for(__parent__ = window.propertyIsEnumerable(\"__parent__\") in ) \n{let window;throw <x><y/></x>; }");
tryItOut("/*for..in*/for(let [prop, constructor] = __parent__\n in __count__.(this).__lookupGetter__(\"__count__\")) {gc() }");
tryItOut("switch(('haha'.split())) { case yield <x><y/></x>: let (__noSuchMethod__, constructor) { M:if( '' ) {{} } else  if (__parent__) /*\n*/return  '' ; else __proto__; }break; if(<><><!--yy--></></>) {return  /x/ ;var __noSuchMethod__ = <x><y/></x>, constructor; } else  if (yield  '' ) {export __proto__;throw prototype; } else continue L;break; default: if(1e+81) { if (__noSuchMethod__) throw prototype; else }break;  }");
tryItOut("var __iterator__ = [[]];\n{export *;throw <><x><y/></x></>; }\n");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(([z1,,].unwatch(\"prototype\")).prototype in <x><y/></x>) __count__, __proto__;");
tryItOut("let(constructor) ((function(){return <><x><y/></x></>;})());");
tryItOut("switch((__parent__ = [1,,])) { default: break;  }");
tryItOut("M:if((++<><x><y/></x></>)) { if ([, , , ]) {/*for..in*/for(__proto__ =  /x/  in <x/>) yield <x><y/></x>; }} else ([z1]);");
tryItOut("export constructor;");
tryItOut("if(prototype = __parent__.(<x/>)) throw  /x/g ; else  if ([prototype instanceof .2]) {export *;gc() } else {/*infloop*/L:while(true) for (<><x><y/></x></> in function(id) { return id }) for (prototype in <x><y/></x>) }");
tryItOut("return <x><y/></x>;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var ({ __noSuchMethod__: ({ __noSuchMethod__: __noSuchMethod__, constructor: ({ constructor: __iterator__ }) }), __parent__: [, , , , ] }) in (__parent__.__proto__ getter= function (constructor) { yield this ? true : [1,,] } )) {this.__defineSetter__(\"constructor\", (new Function(\"return __parent__;\"))); }");
tryItOut("this.zzz.zzz;");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; ((<><x><y/></x></>.unwatch(\"prop\")).@*)((false.__proto__), <y><z/></y>); ({constructor: (-0)++ })) /*infloop*/L:for(null <= <><x><y/></x></>.throw( /x/ .@foo); (!window).__defineGetter__(\"prototype\", window); __count__ = (<y><z/></y>.throw(<><x><y/></x></>))) {gc()with({prototype: false}){continue M; } }");
tryItOut("with((__proto__.__noSuchMethod__ = .2)\f(eval(\"null\", <x><y/></x>), (Math.pow( '' ))[ ]))throw StopIteration;");
tryItOut("/*for..in*/for(var __parent__ in  \"\" ) {yield ;/*for..in*/M:for(var __parent__(*::*) in <x/>) {return true; } }");
tryItOut("M:if() {return; }(/ if (constructor(1e4);");
tryItOut("L/*\n*/:if((<><> /* Comment */*::*</></>)) /*infloop*/for(const __proto__ = @foo; <><x><y\r/></x></>; window)  else  if (<><bbb xmlns:ccc=\"__count__\"><ccc:eee></ccc:eee></bbb></> /= <x/>.isPrototypeOf(@foo)\n) {(window);; } else  /x/g ");
tryItOut("throw StopIteration;");
tryItOut("with({__count__: (prototype.valueOf(\"number\"))})");
tryItOut("switch(window) { case 4: __count__; } const __noSuchMethod__;");
tryItOut("/*for..in*/for(const ({  /x/ : __parent__, __count__: constructor }) in ((function(q) { return q; })(((1 for (x in [])))(<><x><y/></x></>, <x><y/></x>) !== false[window])))<x><y/></x>;");
tryItOut("let(prop) ((function(){yield __proto__;})());");
tryItOut("/*infloop*/for(var undefined; <x><y/></x> .@ [1,,]; (-0) ? <x><y/></x> : (__noSuchMethod__)) gc()");
tryItOut("prop = prop;");
tryItOut("if((new (<><x><y/></x>\f</>)((<x/>).call(window, true, <><x><y/></x></>)))) {this.zzz.zzz; } else  if (((__parent__.prototype = <x><y/></x> .@ (__noSuchMethod__ = )))((eval(\"throw <x><y/></x>;\", try { ; } finally { const __iterator__, __iterator__ = *::*; } ))) , ({prototype: __parent__ = 1.2e3 != [z1,,]})) {return __noSuchMethod__ = <><x><y/></x></>; }");
tryItOut("throw StopIteration;");
tryItOut("try { export *; } catch(prop if (function(){yield;})()) { (<><x><y/></x></>); } catch(prop) { yield 1e-81; } ");
tryItOut("L:if(this.zzz.zzz) { if (this) {const __count__, __noSuchMethod__;export *; } else ({}).__lookupGetter__\nprototype = <x><y/></x>;}");
tryItOut("");
tryItOut("if() {let __proto__, constructor; } else  if (__count__ |= <\tx><y/></x>) window;");
tryItOut("let([, ({ constructor: [constructor, , __parent__, constructor], function::__iterator__: prop }), __noSuchMethod__, \f] = *, __iterator__) { yield ({prototype setter: (<x><y/></x>).watch, prop setter: function (__proto__) { yield <><x><y/></x></> }  });");
tryItOut("return;");
tryItOut("L:if((p={}, (p.z = eval(\"<y><z/></y>\", #1#))())) {__parent__ } else  if (this.unwatch(\"prop\")) <x><y/></x>;");
tryItOut("{{}prop; } { return [ /x/ ].filter(gc) } ");
tryItOut("L:with(__noSuchMethod__.__iterator__ = <x/>.__noSuchMethod__ = )");
tryItOut("/*for..in*/for(var (__parent__) in ((function  __iterator__ () { new Function } )(((*)(#3={a:#3#})))))__parent__ = *::*, constructor = undefined;");
tryItOut("if(true.__proto__ = __noSuchMethod__ = window) {export __noSuchMethod__: [,]; }");
tryItOut("let (constructor) { yield (yield undefined); }");
tryItOut("if((yield *::*)) {*; /x/g ; } else  if (*::* >>=  '' ) {break ;let constructor = <x><y/></x>\t;L:if(1e4) { if (constructor) {throw  /x/g ; }} else <><x><y/></x></>; } else {{}M:if(<x><y/></x>) break ; }");
tryItOut("continue L;");
tryItOut("throw <x><y/></x>; const prop;");
tryItOut("switch(*::*) { default: break;  }");
tryItOut("/*infloop*/for(new (eval)(prototype, <x/>); <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (new  /* Comment */<><x><y/></x></>())) with({__noSuchMethod__: String(1e-81)}){let (constructor) { ( \"\" ); } }");
tryItOut("if([11,12,13,14].filter) { if ((false.__lookupGetter__(\"constructor\"))) {M:with({__noSuchMethod__: <y><z/></y> ? <x><y/></x> : true}){__noSuchMethod__ = <><x><y/></x></>; } } else {if(((( /x/g ).__defineSetter__).apply)()) { if (true\n.__lookupSetter__(\"prototype\")) {@foo;(this); } else {let prop =  '' , prototype = (function ([y]) { })();export *; }} }}");
tryItOut("throw [,];");
tryItOut("L:if(1e-81) {continue ; } else  if (1e-81 -=  /x/g ) Math.pow");
tryItOut("let (prototype) { <><x><y/></x></>; }");
tryItOut("if(constructor ? \n<><x><y/></x></> : ({ prop: __parent__, __noSuchMethod__: __proto__ }) = (prototype)[__iterator__/*\n*/] == !3) { if (((@foo.__lookupGetter__(\"__parent__\").__defineGetter__(\"__count__\", eval)) @ <x><y/></x>.(3))) {(-1); } else (<x/>);}");
tryItOut("with({}) var prototype;");
tryItOut("/*infloop*/for(constructor; <x><y/></x>;  /x/g ) {export prototype; }");
tryItOut("/*infloop*/L:for((<x><y/></x>\n); [z1]; (<><x><y/></x></> ^ 1.2e3)) (<x><y/></x>);");
tryItOut("({a1:1}) /= this");
tryItOut("let (prototype) { yield [z1,,]; }");
tryItOut("with({}) gc()with(<y><z/></y>)yield null;");
tryItOut("if((__noSuchMethod__ = <><x><y/></x></> === window)) {<><x><y/></x></>; }");
tryItOut("return ((prototype.constructor getter= (({}).hasOwnProperty).apply).@foo);");
tryItOut("for(let y in [5,6,7,8]) throw prop;");
tryItOut("/*for..in*/for(let constructor = ([let (__iterator__ = prototype, constructor) (function ([y]) { })()].some((new Function(\"\")))) in <x><y/></x>.valueOf(\"number\")) {const __iterator__, __noSuchMethod__ =  /x/ return; }");
tryItOut("if(window ? [z1] :  /x/g ) { if (((<y><z/></y> if (#1=[#1#])).__lookupGetter__(\"constructor\"))) {return;(__parent__); } else yield *;}");
tryItOut("L:while(((__proto__ = 1e4)) && 0){/a/gi }");
tryItOut("let (prop = this) { {} }\n\n");
tryItOut("M:if(<x><y/></x>) throw #1=[#1#]; else {;yield <y><z/></y>; }\n;\n");
tryItOut("if([<><x><y/></x></>].some(<x><y/></x>)) {throw <y><z/></y>; }");
tryItOut("if((let (prototype = ({prop: 1e4.unwatch(\"__parent__\") }), [, ({ __parent__: prototype }), [__parent__, , , __count__, ], (//h\n{ constructor: prototype, x::constructor: __noSuchMethod__ })]) (new (#0=[,,])()))) {L: {const prototype; } } else  if (({a2:z2}) += window |= *) {if([z1]) { if ( \"\" ) yield  \"\" ;} else gc() } else {(<x/>);export *; }");
tryItOut("{((<><x><y/></x></>).__defineSetter__).apply }");
tryItOut("return;");
tryItOut("{*::*;window }");
tryItOut("/*infloop*/for([[]]; 0x99; this) {<x><y/></x>;throw ; }\nconstructor\nexport *;");
tryItOut("if(constructor) { if (constructor) <><x><y/></x></>; else {1.3; }}");
tryItOut("return prop;");
tryItOut("/*for..in*/for(let prop.__parent__ in ((gc)(__parent__+=__noSuchMethod__.__iterator__ = __iterator__ = <x><y/></x>)))L:if(\n@foo)  else  if ((++this)) {({}).__lookupGetter__yield 1e81; } else yield true;\nwhile((__noSuchMethod__) && 0){/a/giexport prototype; }\n");
tryItOut("/*for..in*/for(var __parent__ = false &= __proto__['constructor'] in ((function ()<x/> ? <><x><y/></x></> : <x><y/></x> ^ new (3)())(eval(\"__noSuchMethod__\", (__proto__.(<y><z/></y> = true)))))){let __proto__;break L;\n/*infloop*/for(var __noSuchMethod__; 1e4; __proto__) {{} }\n }");
tryItOut("\twith({__noSuchMethod__: /*\n*/({__parent__: __iterator__ })}){export prop; } const prototype;");
tryItOut("/*for..in*/for(let __noSuchMethod__ in (((1 for (x in [])))((/a/gi).call(<x/>, prototype))))throw [,];");
tryItOut("if( '' ) {; } else gc()");
tryItOut("if( <= this ? 5.0000000000000000000000 : *.hasOwnProperty(\"prop\")) case (((p={}, (p.z = <><x><y/></x></>)())) @ __parent__.__proto__): break L;break; default:  else  if (<y><z/></y> .@*:: (-1 >>>= /x/ )) const prototype, __proto__;");
tryItOut("let([({ __iterator__:  if ((this.throw(<y><z/></y>) != this.__defineGetter__(\"__iterator__\", (true).apply))), constructor: ({ __proto__: ({ prop: ({ prototype: __proto__, __proto__: __count__ }), prototype: ({ __noSuchMethod__: prop, prototype: __count__ }) }) }) }), , ] = (([eval(\"return true;\", <x><y/></x>)]))[({ __count__: ({ __iterator__: prop, __count__: __noSuchMethod__ }), __iterator__: <><x><y/></x></> }) = []], prototype) ((function(){__parent__ = [prototype, prop];})());");
tryItOut("M:if(((__parent__ = <x/> for each (__proto__ in __count__) if (1.2e3)))) {gc() } else  if ([15,16,17,18].filter(Function, ( set constructor __noSuchMethod__ ()(#0=({prop: (#0=window)}))))) {true;{} }");
tryItOut("{throw window;/*infloop*/for(<><x><y/></x></>; undefined; *::*) break ; }");
tryItOut("switch(({ get __noSuchMethod__(prop, __parent__) { yield [, [__noSuchMethod__, , ], ] = ({ __noSuchMethod__: function  __parent__ () { ; } , __proto__: [, ] }) }  })) { default: {with({__parent__:  /x/g })[[1]];(constructor); }/*infloop*/for(constructor; (this.__defineSetter__(\"__iterator__\", new Function)); (<><x><y/></x></>)[ '' ]--) {export *; }case 0: case 2: break;  }");
tryItOut("/*infloop*/for(const prop = eval(\"gc()\", []); (yield this.__defineSetter__(\"__count__\", (<y><z/></y>).watch));  /* Comment */<x><y/></x>.eval(*)) __parent__ =  \"\" ;");
tryItOut("<x/>");
tryItOut("{}var __noSuchMethod__ = 0;prototype =  \"\" , __iterator__;");
tryItOut("/*for..in*/for(__count__ in ((this.yoyo(<><x><y/></x></>).@*)(())))/*for..in*/for(let = __iterator__.constructor = <y><z/></y> in  /x/ ) {gc() } const __noSuchMethod__;");
tryItOut("M:if( \"\" ) export __count__;");
tryItOut("switch(function  __count__ () { yield <x/> } ) { case 7: {} }");
tryItOut("let(x::__parent__ = (const __parent__ = <x><y/></x>, prototype), __count__ = <{__proto__}><employee id=\"1\"><name>Joe</name><age>20</age></employee> </{__proto__}>) ((function(){this.zzz.zzz;})());");
tryItOut("/*for..in*/for(var __count__.__count__ in <><x><y/></x></> .@*:: window) {return; }");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("for(let y in []);");
tryItOut("if(*) {yield  '' ;yield; } else  if (this) {throw @foo;var __count__; } else {__proto__ =  /x/ ; }\n;");
