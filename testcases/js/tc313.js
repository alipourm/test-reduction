tryItOut("var __proto__, prop; const __count__;");
tryItOut("if((void [(undefined.__lookupSetter__(\"__parent__\"))])) { if (this.zzz.zzz) {return <x><y/></x>;let __count__, constructor =  '' ; } else {yield; }}");
tryItOut("/*for..in*/L:for(let __proto__ = (this--.isPrototypeOf((1e81 |= prop.throw(prototype =  /x/ )))) in eval(\"if(function::__parent__ = window) export *;\", undefined.__lookupSetter__(\"__parent__\"))) while((<><bbb xmlns=\"<y><z/></y>\">yyy</bbb></>) && 0){if(<><x><y/></x></>) {Math.powbreak L; } else {yield;; }; }");
tryItOut("");
tryItOut("\fif((Function).call(#1=({prop: ({ __noSuchMethod__: constructor }) = (constructor = prop)}), )) { if (<x/>) L: {__noSuchMethod__ = prototype, prototype = <x/>;yield; } else do {{} } while((constructor) && 0);}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.constructor in window) var __iterator__ = @foo, __iterator__;");
tryItOut("L:while((constructor = (([1,2,3,4].slice).apply)(\n<x><y/></x>, @foo)) && 0){; }");
tryItOut("with('fafafa'.replace(/a/g, Math.sin)){__iterator__eval }\nL:with({__count__ =  /* Comment */<><x><y/></x></>: <x/>.watch(\"__iterator__\"new Function)});\n");
tryItOut("switch([, ({ __noSuchMethod__: __proto__ }), ({ __parent__: __iterator__, __iterator__: __noSuchMethod__ }), , ({ __iterator__: prop })] = eval(\"__count__ = __iterator__\", undefined)) { default: __proto__ = function::prototype;break;  }");
tryItOut("/*infloop*/for(constructor; (true, window .. <><x>\f<y/></x></>)[(uneval((-1)))].valueOf(\"number\"); typeof  ''  .. <y><z/></y> , <x><y/></x>) {continue ;/*infloop*/for(var __noSuchMethod__;  '' ; 0.1) {return window;throw <y><z/></y>; } }");
tryItOut("/*infloop*/for(var ({ constructor: ({ get: [[__proto__, __parent__]], __count__: prototype([z1]) }), __iterator__: prototype }) = -1; (({__iterator__ setter: ({}).__lookupGetter__ })); (this.__defineGetter__(\"prototype\", <x/>)) .@x:: (( /x/  != this) .@ ((1 for (x in [])))(null, <x/>))) {( '' );\nthrow <x/>; const __noSuchMethod__;\n }/*infloop*/for(__count__ = <><x><y/></x></>; window;  '' ) __proto__");
tryItOut("if(return @foo;) throw window; else  if (new prototype =  /x/g (__proto__)) {default: break; case 7: break; yield {};break; case this: case <y><z/></y>: export *;break; case <y><z/></y>: ;break; case 1: break; return <x><y/></x>;break ; }");
tryItOut("with({}) { let(__count__, __noSuchMethod__) ((function(){for(let y in [5,6,7,8]) with({}) yield <><x><y/></x></>.unwatch(\"__proto__\");})()); } ");
tryItOut("let (prop = (<x><y/></x>), prototype) { let(__noSuchMethod__, prototype) { yield (function () { let __proto__ = prop, __iterator__; } (this, false)); }");
tryItOut("{/*infloop*/do var __proto__ =  '' ; while(__parent__ = <><x><y/></x></>);/*infloop*/while([1,2,3,4].slice(this.@foo, 3.141592653589793))let __parent__; }");
tryItOut("/*infloop*/for(var ({ constructor: ({ __noSuchMethod__: ({ __noSuchMethod__: __proto__, __parent__: ({ __count__: __proto__ }) }), constructor: ({ prop: __parent__ }) }), __count__: __parent__ }) = (false(<x><y/></x>, @foo)\n); __parent__; new ((0 for (__iterator__ in *::*)))(false)) {export *; }");
tryItOut("if([[({ __parent__: __proto__, __iterator__: __noSuchMethod__ }), __noSuchMethod__, ], , ({ __iterator__: constructor, __count__: __proto__ })] = (p={}, (p.z = window)())) { if (-(<x><y/></x>.__count__) %= void void getter) return <x><y/></x>;} else { }");
tryItOut("/*for..in*/M:for(var __proto__ in (-0)) {\r([,,z1]);export *; }");
tryItOut("\tif((__iterator__ != [15,16,17,18].map(function(y) { yield y; yield;; yield y; }, -3/0))) export try { \n } catch(__proto__) {  } ; else  if (<><x><y/></x></>/*\n*/ ? prop : <y><z/></y>) return function ([y]) { };");
tryItOut("/*infloop*/do let constructor = undefined; while();");
tryItOut("yield window;");
tryItOut("break ; const __proto__;");
tryItOut("do yield; while((<><x><y/></x></>(*,  \"\" ).hasOwnProperty(\"__proto__\")) && 0);");
tryItOut("let (__parent__) { export *; }");
tryItOut("/*infloop*/L:for(let ({ constructor: prototype, __parent__: ({ constructor: __noSuchMethod__, __parent__: __proto__ }) }) = (gc).call(__parent__ = -0, window[3.141592653589793]); null && @foo.@*; new Date(*::*, <y><z/></y>) || this.__defineGetter__(\"constructor\", window)) try { export __iterator__; } catch(__proto__ if <><x><y/></x></>.throw(<x><y/></x>)) { break L; } ");
tryItOut("{let __noSuchMethod__, __noSuchMethod__; }");
tryItOut("/*for..in*/for(__noSuchMethod__ =  ''  in *::*) __iterator__, prop;");
tryItOut("/*infloop*/for(var __noSuchMethod__ = (gc).call(([,] -= __count__ ? #1# : []), #1=[#1#], true); [z1,,]; <>yyy</>.watch(\"__proto__\", function (({ __count__: prop, function::constructor: __noSuchMethod__ }), __count__) { let __iterator__ =  /x/ ; } )) {/*for..in*/L:for(const [__iterator__, function::__count__] = prototype in <x><y/></x>) yield <x/>; const __iterator__; }");
tryItOut("with({}) yield <><><><x><y/></x></></></>;");
tryItOut("export prop;");
tryItOut("*;");
tryItOut("throw <x><y/></x>;");
tryItOut("/*for..in*/for(const __proto__ in (__parent__.(3.141592653589793))) {throw (<x><y/></x>[<x><y/></x>].@*); }");
tryItOut("let (__proto__) { export __proto__; }");
tryItOut("/*infloop*/for(getter.__proto__ setter= eval(\"(__count__ = constructor).__defineGetter__(\\\"__parent__\\\", this.__defineSetter__(\\\"__count__\\\", -0))\", (<><x><y/></x></>.yoyo(__count__))); constructor; ([11,12,13,14].sort)) L:if(#3={a:#3#}) { if (constructor) export <x/>; else {([,]); }\t}");
tryItOut("if('fafafa'.replace(/a/g, 'haha'.split)) { if ((p={}, (p.z = constructor)())) [1,2,3,4].slice} else {return <><x><y/></x></>; }");
tryItOut("/*infloop*/L:while( /x/g ){/*infloop*/L:do {0.1 } while(@foo); }");
tryItOut("M:if(__iterator__ = (*::*)) { if (0) {/*infloop*/do return; while( /x/g );(this); } else {(undefined)\nvar prop; }}");
tryItOut("/*infloop*/for(var __proto__;  '' ; <><>undefined</></>) let __iterator__;");
tryItOut("/*infloop*/L:for(const __iterator__ = (new (function  __proto__ (constructor, __proto__) { return #1# } )([11,12,13,14].map, *)); __parent__ = <x><y/></x>; (( /x/ )[__iterator__])) {/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype in <x><y/></x>) gc()if(true) { if (<x/>) {continue ;export *; }} else {__count__ } }");
tryItOut("return\n");
tryItOut("__proto__");
tryItOut("if(true.valueOf(\"number\").valueOf(\"number\")) (<x/>); else  if (<><employee id=\"1\"><name>Joe</name><age>20</age></employee></>.__proto__) export *; else const x::__parent__;");
tryItOut("if((<y><z/></y>)([1]['prop'] = <x><y/></x>, #1# * constructor)) function::__proto__ getter: Math.sin else  if (<><y><z/></y></>.@*) constructor");
tryItOut("/*for..in*/for(constructor in ((function (prototype) { (new Function(\"\")) } )(true))){yield undefined; }");
tryItOut("__parent__ = constructor;");
tryItOut("let(__parent__ = <ccc:ddd><x><y/></x> </ccc:ddd>, __iterator__) { throw prop;");
tryItOut("switch(false) { default: Math.powbreak; yield -0;break; case <x><y/></x>: break; case 6: ;case 0: break; case 2: <y><z/></y>;break; break; {}return; }");
tryItOut("break M");
tryItOut("if(arguments) {{} }");
tryItOut("if(<x><y/></x> @ null) { if ((let (__noSuchMethod__ = (function ([y]) { })()) *)) var __noSuchMethod__, __count__;\nthrow this;\n else (this);}");
tryItOut("return;");
tryItOut("M:if(<x><y/></x>.__count__) {yield;return; } else gc()");
tryItOut("/*for..in*/L:for(__parent__ in ((p={}, (p.z = <><x><y/></x></>)()))) ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in 1e81) @foo;");
tryItOut("{}{}");
tryItOut("/*infloop*/M:for(const __noSuchMethod__; prototype; (yield __count__.watch(\"false\", gc))) /*infloop*/L:for(let prop; <x><y/></x>.constructor; (Math.sin())) Function");
tryItOut("/*infloop*/for(__count__ = prop; (yield __noSuchMethod__[[,,]]); prop.(<x><y/></x>)) {yield <x/>;yield; } const function::__noSuchMethod__;");
tryItOut("/*infloop*/M:for((__proto__.__proto__ = <><x><y/></x></>); (({}).hasOwnProperty)(); (__parent__.__proto__)) continue ;");
tryItOut("if(new true(true,  /x/ ).prototype) L:switch({} <<= <x><y/></x> <<= <x/>) { case this:  } else  if (prop) {#3={a:#3#}; }");
tryItOut("for(let y in [5,6,7,8]) throw __iterator__;");
tryItOut("/*infloop*/L:for(__proto__; [,,]; window) yield *::*;");
tryItOut("/*for..in*/for(var true in (((try {  } finally { *; } [this]))((new Function()))));for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*infloop*/do gc() while(window);yield\nyield #1#;");
tryItOut("with(__parent__)var __parent__ = @foo, __iterator__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(__count__ in <y><z/></y>) {const prototype =  /x/g ;; }");
tryItOut("/*for..in*/for(const [constructor, prototype] = (yield x::__iterator__ = <><x><y/></x></> | prop\n) in (<x/>.unwatch(\"__noSuchMethod__\"))) if(<><x><y/></x></>) __iterator__ = [,], __iterator__ = __iterator__;");
tryItOut("do M:with(<x><y/></x>;)return; while((window.yoyo(*::*)) && 0);");
tryItOut("if((<><x><y/></x></>++)) return  /x/ ; else  if (this.__defineGetter__(\"__parent__\", function(y) { yield y; __iterator__ = {}, __proto__;; yield y; })) {gc() }");
tryItOut("/*infloop*/for(__count__.__proto__;  \"\" --; (Math.pow).apply(__parent__, false)) {{}yield; }");
tryItOut("__count__ = __count__/*\n*/;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(__noSuchMethod__.constructor['set'] in {}.__lookupSetter__(\"prop\")) {prototype = null; }");
tryItOut("with(#1=[#1#]){/a/gi }");
tryItOut("/*infloop*/for((arguments(<><x><y/></x></>, constructor)); this.__defineSetter__(\"let\",  /x/g )\f; ([1,2,3,4].map)) {return;{gc(); } }");
tryItOut("prop");
tryItOut("while(((({ __count__: __iterator__, __noSuchMethod__: __parent__ }) = gc++ + <x/>)) && 0){let prop = <><x><y/></x></>, prop\nwith({__noSuchMethod__: <x/>\n}){function(y) { yield y; ; yield y; }*; } }");
tryItOut("throw StopIteration;");
tryItOut("return;");
tryItOut("\nreturn;");
tryItOut("{ }");
tryItOut("(<x><y/></x>);");
tryItOut("throw __count__;");
tryItOut("return;");
tryItOut("/*for..in*/for(let __parent__ = [15,16,17,18].sort(function  prototype (__count__, prototype) { {}' } , #1#) in  '' ) {const __noSuchMethod__;gc() }");
tryItOut("throw undefined;");
tryItOut("throw <x/>; const __noSuchMethod__;");
tryItOut("/*for..in*/L:for(__parent__ in <x/>) __proto__ = <x><y/></x>, prop = <><x><y/></x></>;");
tryItOut("for(let y in []);");
tryItOut("L: (1 for (x in []))");
tryItOut("if(@foo) { if (<x/>) Function} else {<><x><y/></x></> }/*\n*/\nlet prototype\nconstructor: (window)() || (new Function)(__parent__);");
tryItOut("if(((<><x><y/></x></>).call([z1], window\t))) { if (<x><y/></x>--) {var prototype, prototype;(*::*); } else break L;}");
tryItOut("with((constructor.prototype getter= (window + 1e81))((uneval((p={}, (p.z = prop)()))), Date(window)))if(#0=<x><y/></x>) { if ([15,16,17,18].filter([1,2,3,4].map, false)) break M;} else {export *;let  = <y><z/></y>; }");
tryItOut("try { ; } finally { let(__count__, prototype = (function ([y]) { })()) { var prop; } ");
tryItOut("let (prop = [,,z1]) { export __iterator__; }");
tryItOut(";gc()");
tryItOut("/*infloop*/\fM:do {; } while(new (<x/>--.propertyIsEnumerable(\"__iterator__\")).[[prototype, constructor, prototype, __proto__, constructor], ](<!--yy--\n>));");
tryItOut("prototype");
tryItOut("/*infloop*/for(var __count__; function::prop.prototype setter= function(q) { return q; }; this.__defineGetter__(\"prototype\", Math.pow)) {/*for..in*/for(let [constructor, prototype] = this in __iterator__)  }");
tryItOut("if(-3/0.__defineGetter__(\"__noSuchMethod__\", (new Function(\"return;\")))) (constructor); else  if (Math.pow(3/0)) {__count__, prop; }");
tryItOut("if([z1]) {return <x><y/></x>;M:if(@foo) return this; else  if (<y><z/></y>) return @foo; }");
tryItOut("with((eval(\"var __parent__, function::prototype = [,];\", constructor.__proto__ getter= <y><z/></y>)) ? (<x><y/></x>.(window)) : <x/>){([,]); }");
tryItOut("return;");
tryItOut("L: {/*infloop*/for(undefined; <><x><y/></x></>; __proto__) break ;throw <y><z/></y>; }");
tryItOut("{throw StopIteration; }");
tryItOut("/*for..in*/for(const __parent__ in ((function  constructor (prop) { return prototype.__iterator__ = #3={a:#3#} <<= window } )(function(q) { return q; }(*, <x><y/></x>))))");
tryItOut("let (__proto__) { let prototype = <x><y/></x>, __parent__; }");
tryItOut("export *\nexport yield;");
tryItOut("/*infloop*/for(({ __iterator__: ({ __proto__: ({ constructor: ({ __iterator__: function::__noSuchMethod__, __count__: __count__ }) }), __noSuchMethod__: [, , , ] }), __noSuchMethod__: [, , ] }) = (((undefined)(#1#, <><x><y/></x></>) .. *) < [([15,16,17,18].filter\f(Math.pow, 4.))[yield *] for ([, , constructor, , __proto__] in @foo)]); false.yoyo(<><x><y/></x></>--); prop = <y><z/></y>) {/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in  \"\" ) {var function::prototype = 0;var prototype = *::*, __noSuchMethod__; }((yield  /x/ )); }");
tryItOut("if(prop.__defineGetter__(\"__iterator__\", Function)) (*::*); else  if (<x/>) {/*for..in*//* nogeckoex bug 349964 */M: for  each(var prop in  '' ) throw -1\n } else return;");
tryItOut("setter = prototype;");
tryItOut("yield <x\t><y/></x>;");
tryItOut("switch((<><><x><y/></x></></>.( /x/ .propertyIsEnumerable(\"constructor\")))( \"\" .__lookupGetter__(\"__iterator__\")) = <><x><y/></x></>.(__count__ = undefined)) { default: #1#, __iterator__break; gc()break; case ('haha'.split)(): with({__iterator__: window}){Function }break; break; case [11,12,13,14].map: ;break; case <><x><y/></x></>.propertyIsEnumerable(\"prototype\") /=  ''  .@ 0x99: L:with({constructor:  /x/ }) { return null } case ({__iterator__: \t*::*}): __count__, __count__; }");
tryItOut("throw <y><z/></y>");
tryItOut("/*infloop*/M:while(\f({ set prop prototype (__parent__) { yield *::* }  }) &= ({ constructor: __iterator__ }) = __parent__|=this){prop; }");
tryItOut("constructor = __proto__;");
tryItOut("if(function::constructor.yoyo(<x/>)) {{}\nyield;\n } else {yield gc(); }");
tryItOut("/*for..in*/M:for(let (<y><z/></y>)(*) in <y><z/></y> /= prototype) {with({__iterator__: undefined})yield;gc() }");
tryItOut("/*infloop*/while(function ([y]) { }){( \"\" );gc() }");
tryItOut("with({}) export __parent__;");
tryItOut("if(prop) { if (window\n) {const prototype, prototype = 3.141592653589793; }} else ");
tryItOut("/*infloop*/L:do  /x/g \n{} const __parent__; while(__parent__ = [1]);");
tryItOut("{/*infloop*/for(__noSuchMethod__.unwatch(\"__iterator__\"); (<x><y/></x>++); [[1]].yoyo(<><x><y/></x></>)) \n\n }");
tryItOut("/*infloop*/do return <x><y/></x>; while('haha'.split);");
tryItOut("__iterator__ = __noSuchMethod__;");
tryItOut("M:with({__count__: (yield 1e81)})var __noSuchMethod__, prop;");
tryItOut("switch(window) { default: var __count__, __parent__; }");
tryItOut("[[1]]\n");
tryItOut("/*for..in*/L:for(__proto__ = __proto__.__iterator__ in <x><y/></x>) yield;");
tryItOut("with((((p={}, (p.z = <x/>)())) | *))(<x><y/></x>);");
tryItOut("return;");
tryItOut("__proto__; const __iterator__;");
tryItOut("/*infloop*/do {throw  \"\" ; } while((<x><y/></x> << *::*));");
tryItOut("if((#1=({__noSuchMethod__: prototype}).watch(\"prototype\", \f(Math.sin).apply))) if((<x/>)()) {throw (-0);throw this; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let __parent__ in window) {export __iterator__; }");
tryItOut("M:switch(@foo) { case 4: break; case <x><y/></x>:  }");
tryItOut("/*for..in*/for(const __parent__ in null) {x::prototype = true, __proto__; }");
tryItOut("/*infloop*/M:for(new <x/>(true); \n \"\"  += 0.1; <><x><y/></x></> =  /x/ ) ;");
tryItOut("/*infloop*/L:while(<x/>(*))/*infloop*/L:for(<x/>; null; this) {Functionthrow <x/>; }");
tryItOut("let __count__, prop =  '' ");
tryItOut("while((<x><y/></x>.unwatch(\"__count__\")) && 0){const __noSuchMethod__ = window;\f\nlet __iterator__ = undefined, prop = this;if(/*infloop*/while(({a2:z2})){/*\n*/export *;(arguments); }) {export prototype; } else  if (__parent__) var __parent__ = <x><y/></x>; }");
tryItOut("/*for..in*/M:for(let __count__ in this) {const __count__ = __proto__; }");
tryItOut("return (({ set: [({ __proto__: __parent__ })] }) = 1e81 || <y><z/></y>);");
tryItOut("/*infloop*/for(<x><y/></x> ? true : <><x><y/></x></>; this; __iterator__) {break M;continue ; } const prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop in (<x><y/></x> in *)) {this }");
tryItOut("L:if(yield <x><y/></x>) {(1 for (x in []))return; } else  if ([,,z1]) {gc() }");
tryItOut("M:if(<x/>) const __parent__; else  if (const __proto__ = <x/>;.*) let let =  \"\" ; else {yield;throw this; }");
tryItOut("/*infloop*/while( \"\"  >= __noSuchMethod__){var constructor; const prop; }");
tryItOut("/*infloop*/for( /x/g ; Object(true, <><x><y/></x></>)++; 'fafafa'.replace(/a/g, window.__noSuchMethod__)) \f{/*infloop*/do export constructor; while([1.2e3]); }");
tryItOut("/*for..in*/for(var (__proto__) in (return constructor)) {if( '' .isPrototypeOf(<x><y/></x>) >= <x/>.__iterator__) return; else  if (let (__iterator__ = (function ([y]) { })())  /x/ ) {export *; }yield; }");
tryItOut("/*for..in*/for(__count__ in ((function(q) { return q; })( /x/g [<y><z/></y>]))){{} }");
tryItOut("/*infloop*/for(let ({ __noSuchMethod__: ({ prop: ({ __proto__: prototype }), constructor: [prop] }) }) = (;); [11,12,13,14].map; new RegExp()) L: gc");
tryItOut("yield window\n;");
tryItOut("var constructor = +;export *;");
tryItOut("/*for..in*/for(var [__proto__, __count__] = <><x><y/></x></> in null) {{} }");
tryItOut("with({}) { throw __proto__; } ");
tryItOut("/*for..in*/M:for(var __noSuchMethod__.__noSuchMethod__ in ((function  prop (__noSuchMethod__) { return; } )(<x/>))){{} }");
tryItOut("/*infloop*/M:do {export __iterator__; } while(__count__);");
tryItOut("/*infloop*/for((function(y) { yield y; yield;; yield y; })(); ([(prop >= * .@x:: <x><y/></x>)].some((1 for (x in [])))); ((p={}, (p.z = __iterator__.(<x><y/></x>) .. <y><z/></y>)()))) {try { for(let y in [5,6,7,8]) [1,2,3,4].slice } finally { for(let y in []); }  }");
tryItOut("/*for..in*/for(let this in __count__ = this, __proto__.__defineGetter__(\"constructor\", (new Function(\"let __noSuchMethod__, prop;\")))) {L:do {gc() } while((*) && 0); }");
tryItOut("break /*\n*/\n");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/L:while(window .. (function ([y]) { })())gc()");
tryItOut(" '' ");
tryItOut("return\nexport *;");
tryItOut("return window\n/*for..in*/for(var prop(1.3) in ((({}).__lookupGetter__)(@foo)))prototype, __count__");
tryItOut("/*for..in*/for(let __proto__.prop in ((eval)(<><bbb xmlns=\" /x/ \"><ccc:ddd>yyy</ccc:ddd></bbb></>))){({}).hasOwnProperty }");
tryItOut("/*infloop*/for(__proto__; new constructor(+*::*, (<x><y/></x>)[<><x><y/></x></>]); (uneval( '' ))) [11,12,13,14].filter");
tryItOut("/*for..in*/for(const __proto__ = @foo in  /x/g ) let x::constructor;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in this) {export __parent__; }__iterator__ = [1,,]\n{}\nlet(__iterator__ = window <<= false, __iterator__) { __noSuchMethod__ = __iterator__;\n");
tryItOut("/*for..in*/for(const __iterator__ = Math.sin in <></>) let (__count__) { break L; }");
tryItOut("L: export *;");
tryItOut("continue \n");
tryItOut("/*infloop*/do default: (<y><z/></y>);break; case 8: export __proto__;case true < true: break; return 1.3\n/*for..in*/M:for([constructor, __parent__] = <><x><y/></x></> in <><x><y/></x></>) {continue ; } while(prop = \f__proto__.propertyIsEnumerable(\"delete <x><y/></x>\"));");
tryItOut("M:with(\n{__noSuchMethod__: ({ prototype: ({ prop: [prop, prototype], prop: ({ __proto__: __proto__//h\n, __proto__: constructor }) }), __parent__: (__proto__) }) = [ { const constructor, __parent__; } ]})/*infloop*/M:for(const ({ constructor: __noSuchMethod__ }) = (p={}, (p.z = false)()); __noSuchMethod__ = .2; (<y><z/></y>.__noSuchMethod__)) /*for..in*/for(prototype = [1] in <x/>) <x/>");
tryItOut("{yield \f((yield <x><y/></x>));break L; }");
tryItOut("if(*) { if (this << null) {[,,z1]; }} else {yield; }");
tryItOut("if({}) var prototype, __count__ = <><x><y/></x></>;");
tryItOut("switch(__proto__.prop | <y><z/></y>) { default: break; break;  }");
tryItOut("{<><x><y/></x></>; }");
tryItOut("yield this.zzz.zzz;");
tryItOut("/*infloop*/for(const __parent__; <><x><y/></x></>.isPrototypeOf(<x><y/></x>); constructor.__parent__) M:while((*::*) && 0)yield <x><y/></x>;");
tryItOut("let (__proto__ = (@foo)[1.2e3], __iterator__ =  /x/g ) { export prop; }");
tryItOut("L:with({__count__: prototype}){M:if(__count__.__lookupSetter__(\"__proto__\")) { if (undefined) let prop, constructor = window; else let __count__, __proto__;} }");
tryItOut("\nswitch( /x/ ) { case <><x><y/></x></>:  }");
tryItOut("throw __iterator__");
tryItOut("/*infloop*/for(const __count__; new String(([11,12,13,14].map), ([15,16,17,18].\fsort(function (__parent__, __proto__) { yield <x/> } , (__count__ = this)))); (true); = ( /* Comment */{})) __count__\nthrow <>__count__ = ({})</>;");
tryItOut("while((<><!--yy--></>) && 0)throw  /x/ ;");
tryItOut("/*for..in*/M:for(constructor = 1.2e3 in (<x><y/></x> /=  /x/ )) {let __count__ = __count__; }");
tryItOut("while((let(__count__, __iterator__) { return;) && 0){.return;\nexport *;\n }\nif() {var constructor; } else  if (<x/>.__count__) {throw #3={a:#3#};__count__; } else throw prototype;");
tryItOut("/*for..in*/for(__parent__ in *::*) {(<y><z/></y>); }");
tryItOut("(<y><z/></y>)");
tryItOut("L:with({__count__: ((window > __proto__))() = __iterator__.(#1#)}){yield __proto__; }");
tryItOut("L:do return (-0); while(((<x/>.hasOwnProperty(\"__iterator__\"))) && 0);");
tryItOut("return;");
tryItOut("L: {; }");
tryItOut("return;");
tryItOut("L:do ; while(((__noSuchMethod__.__proto__).propertyIsEnumerable(\"prop\")) && 0);");
tryItOut("M:with({prop: ({__count__: 0, function::x::prototype setter: ({}).hasOwnProperty })})function(y) { yield y; return;; yield y; }");
tryItOut("throw StopIteration;");
