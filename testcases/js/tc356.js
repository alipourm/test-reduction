tryItOut("/*infloop*/L:while((<><x><y/></x></>)[1.2e3])this.__defineGetter__(\"__iterator__\", new Function);");
tryItOut("/*infloop*/do /*infloop*/L:do {yield; } while(<><x><y/></x></>(<><x><y/></x></>)); while(( /* Comment */<x><y/></x>));");
tryItOut("return (__parent__+=window.\nisPrototypeOf(undefined)); const function::prototype;");
tryItOut("if( /x/g ) {with({__count__: this.__defineSetter__(\"prototype\", (<x/> -= 0/0))}){prototype = <><x><y/></x></>;return; } }");
tryItOut("/*for..in*/L:for(let __noSuchMethod__ in __count__) {}");
tryItOut("L:if( /x/g ) {; } else  if (<x><y/></x>) {throw <x><y/></x>; } else export *\n");
tryItOut("with({}) { yield  /x/g .isPrototypeOf(-1); } ");
tryItOut("for(let y in []);");
tryItOut("if(<x/>) { if (undefined) yield  /x/ \n} else return;");
tryItOut("/*infloop*/while()let (prop, __noSuchMethod__ = *::*) { ; }");
tryItOut("/*for..in*/M:for(const __iterator__ = -0 in *::*) continue ;");
tryItOut("let (prop, __iterator__) { gc() } const prop;");
tryItOut("if(let (__proto__, __parent__) <><x><y/></x></>) {var prototype, __iterator__ = <x><y/></x>; }");
tryItOut("export __proto__;\n/*infloop*/for(__proto__;  \"\" ; <><x><y/></x></>) {gc() }\n");
tryItOut("M:switch(null , window) { default: break; case 0:  /x/g ;break; case 9: yield prototype =  /x/g ;break; with({__noSuchMethod__: [11,12,13,14].filter}) { return [[1]] } case <x><y/></x> for each (__proto__ in __noSuchMethod__) for (__count__ in ({})): gc()case (uneval(__count__.(eval(\"return;\", [])))): break; break; const __noSuchMethod__; }");
tryItOut("/*infloop*/do {return 1e4;__proto__ } while((function  constructor (__proto__, __noSuchMethod__) { 3.141592653589793; } ).apply);");
tryItOut("if(<x><y/></x>) export __proto__; else  if (this) {{} } else {prototype =  /x/g , prototype = <><x><y/></x></>; }");
tryItOut("{{/*infloop*/while(<><x><y/></x></>)export __iterator__\f; } }");
tryItOut("/*infloop*/while(constructor(__count__ = __parent__ =  \"\" ))/*infloop*/while(([] || __noSuchMethod__.@*))prop");
tryItOut("if(let (prop) window) { if (((p={}, (p.z = <x/>)()))) {return;{} }} else yield undefined;");
tryItOut("(prop-=1e81.__defineGetter__(\"constructor\", function ([y]) { })) ? null .@*:: new <x><y/></x>() : new Function(__iterator__ = <y><z/></y>) = __iterator__;");
tryItOut("M:if((p={}, (p.z = undefined)()).hasOwnProperty(\"__noSuchMethod__\")) {return *::*;//h\nvar prototype = @foo, constructor = <y><z/></y>; } else ({}).hasOwnProperty\f");
tryItOut("return\n\nyield __count__;\n");
tryItOut("break \n");
tryItOut("this.zzz.zzz;");
tryItOut("throw constructor;");
tryItOut("with({__proto__: ([,,].yoyo(<x><y/></x>))})(3);");
tryItOut("M:if(({ constructor: __noSuchMethod__ }) = prototype) { if (false) {/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in function(id) { return id }) {const __noSuchMethod__ = null, __iterator__; } } else {let ({ prop: prop }) = 1e-81 | 1e-81, __parent__ = <x><y/></x>; }}");
tryItOut("/*infloop*/M:for(const prop = __proto__; __count__+=/*\n*/<x><y/></x>; prop = this) {throw *::*; }");
tryItOut("/*infloop*/do {const __count__;const prop = null; } while(@foo);");
tryItOut("L:with({__proto__: (eval(\"/*for..in*/for(const [prop, constructor] =  \\\"\\\"  in  '' ) try { yield window; } catch(__iterator__ if *::*) { gc() } catch(prop if (function(){;})()) { break ; } finally { * } \", (yield <y><z/></y>)))})M:switch(<y><z/></y>) { case prototype: continue ;break; default: ;break; case __count__:  }");
tryItOut("L:if(<x><y/></x>) {@foo; }");
tryItOut("{gc()\n }\n/*infloop*/for(constructor; (<x><y/></x> *= *::*); false) return;");
tryItOut("let(__count__ = true, __iterator__) ((function(){return (function ([y]) { })();})());");
tryItOut("/*infloop*/while(prototype = <x/>){return undefined; }");
tryItOut("/*infloop*/");
tryItOut("with({}) let(__iterator__, __count__ = false) { for(let y in []);");
tryItOut("if((undefined.eval((typeof true &= @foo)))[([ '' ].filter(function (prototype, __proto__)*))]) while(((__iterator__.prop = <><x><y/></x></>)) && 0)__count__; else {<y><z/></y>; }");
tryItOut("do {const prop = [1], @foo; } while((this = #3={a:#3#} || (yield -1)) && 0);");
tryItOut("gc()");
tryItOut("{/*infloop*/do continue ; while(this);throw <x/>; }");
tryItOut("yield (this.__defineGetter__(\"prototype\", eval));{}");
tryItOut("with(new ({}).hasOwnProperty()){let prototype = <x><y/></x>;get; }");
tryItOut("/*for..in*/for(var ((<x><y/></x>)())(new (true)(#1=[#1#])) in ((gc)([[ /x/g  for (prop in <><x><y/></x></>)]].some([1,2,3,4].slice)))){}\nif((({ get __iterator__(__parent__, __iterator__) { return {} }  }))) {export *;throw 1e+81; } else  if ((* &= [1,,] / (<><x><y/></x></>())[@foo % <y><z/></y>])) yield  /x/g ;");
tryItOut("if((new (Math.pow)().@*)) { if ((1.3)[<y><z/></y>]) const __iterator__, prototype =  /x/g ;} else {__parent__ = <><x><y/></x></>, __proto__ =  '' ; }");
tryItOut("/*infloop*/while(({ set constructor(__noSuchMethod__) { return prop = __count__ }  }).propertyIsEnumerable(\"__iterator__\"))if(new String(<y><z/></y>, <><x><y/></x></>)) { if (<x><y/></x>.(*::*)) {const __noSuchMethod__; }} else {throw #3={a:#3#}; }");
tryItOut("/*infloop*/M:while(((__iterator__.__count__ setter= (1 for (x in []))). )){/*infloop*/for(prototype; true; *) {yield <x><y/></x>; } }");
tryItOut("/*infloop*/for(const __count__; __count__.constructor = 4.; (prototype = 5.0000000000000000000000) <<= (<xxx>{__count__}</xxx> || * / *)) /*infloop*/for(<><x><y/></x></>.hasOwnProperty(\"__parent__\"); prototype = (-1); __parent__ = ([<y><z/></y>])) {/*for..in*/for(var __iterator__ = ({})[@foo] in this) try { {} } finally { yield window; } export *; }");
tryItOut("break L\f;");
tryItOut("if([((__count__ = ({ __parent__: ({ prototype: __proto__ }), <y><z/></y>: ({ prototype: prop }) })) ? (new Boolean(null, __count__)) > (constructor.(false)) : (yield ({a2:z2})))\f]) { if ((({a1:1}).watch(\"prototype\", [1,2,3,4].slice)).__defineGetter__(\"__parent__\",  '' ).__lookupSetter__(\"__proto__\") for each (constructor in (null.valueOf(\"number\")))) {return;<x><y/></x>; }} else {let __count__, function::prop; }");
tryItOut("return;");
tryItOut("switch( \"\" ) { default: {}case 4: [[1]];break;  }");
tryItOut("/*for..in*/for(const __iterator__ = -1 in <><x><y/></x></>) \t{continue M;{} }");
tryItOut("let(({ __noSuchMethod__: prototype, x::__parent__: __proto__ }) = (uneval(undefined)), __iterator__ =  '' ) ((function(){try { <><x><y/\f></x></>; } catch(prop) { return; } })());");
tryItOut("if(<x/>.unwatch(\"__parent__\").eval((yield throw -0;))) { if (([1,2,3,4].slice)(([11,12,13,14].sort), 033)) /*for..in*/for(let ()(*::*) in <><x><y/></x></>) var __count__ = [z1,,];} else {gc()/*infloop*/do gc() while( \"\"  % <><x><y/></x></>); }\n{}");
tryItOut("/*infloop*/while(<><x><y/></x></>.__noSuchMethod__ = <x><y/></x>.__iterator__){}");
tryItOut("with({}) let(__iterator__, ({ prop: __iterator__ })) ((function(){return;})());");
tryItOut("for(let y in [5,6,7,8]) return;");
tryItOut("return;");
tryItOut("yield (<x><y/></x>.(<x><y/></x>));");
tryItOut("L:if((constructor.__defineGetter__(\"__parent__\", ({}).hasOwnProperty))) {yield; } else {return @foo;(<><x><y/></x></>); }");
tryItOut("if(__parent__) return window;");
tryItOut("while(((prototype.(<x><y/></x>))) && 0){return true;[z1,,]; }");
tryItOut("let (__noSuchMethod__) { export prototype; }\n");
tryItOut("/*for..in*/for(__count__ = new (({}).__lookupGetter__)([1]) in ({}) ? (false.__count__) : 'fafafa'.replace(/a/g, __proto__)) {let prototype = false; }\n__iterator__, prop\n");
tryItOut("/*for..in*/for(var __parent__ in 1e4) __noSuchMethod__ = <x><y/></x>, __parent__ = <x><y/></x>;");
tryItOut("/*infloop*/for(__iterator__; undefined.propertyIsEnumerable(\"__iterator__\"); (true.@foo)) return;");
tryItOut("/*for..in*/for(let __parent__ = <xxx {constructor}={({constructor getter: [1,2,3,4].map, __iterator__: *.throw(<x><y/></x>) })} />.((<x><y/></x>.*--)) in [this.zzz.zzz].some(({}).hasOwnProperty)) {throw @foo; }");
tryItOut("/*for..in*/for(var __noSuchMethod__ in ((function () { do __iterator__ =  /x/ , __parent__; while(([1,,]) && 0); } )((let constructor.hasOwnProperty(\"__proto__\")))))return ([15,16,17,18].filter(\tfunction  prop () { yield function(id) { return id } } , function::constructor)).__proto__;");
tryItOut("while(((++<y><z/></y>).propertyIsEnumerable(\"__noSuchMethod__\")) && 0){/*for..in*//* nogeckoex bug 349964 */L: for  each(let __proto__ in <x><y/></x>) {return;{} }({}).__lookupGetter__ }");
tryItOut("/*infloop*/for([(@foo in __parent__)].map([1,2,3,4].map); null in true.propertyIsEnumerable(\"__count__\"); <bbb xmlns:ccc=\"typeof 3.141592653589793\"><ccc:eee></ccc:eee></bbb>) {/*infloop*/do { } while(#1=[#1#]); }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let prototype; <x><y/></x>; \n '' ) {return true; }");
tryItOut(";/*for..in*/for(var prototype = ([].some(__iterator__)) in (true(0))) {yield undefined;return; }");
tryItOut("L:switch(<><x><y/></x></>.throw( '' )) { default: break; case ([[]] :: __proto__): case prop: break;  }");
tryItOut("/*for..in*/for(let __noSuchMethod__ = (new (<><x><y/></x></> && -1)(new ((1 for (x in [])))(window, 3/0).prop)) in this.__defineSetter__(\"prototype\", ((eval)( /x/g , __noSuchMethod__)))) {/*for..in*/L:for(var __proto__ in #1#) return <x/>;throw false; const function::__noSuchMethod__; }");
tryItOut("/*infloop*/while(true.propertyIsEnumerable(\"constructor\").eval((*::* === <x/>)))if(true) ( /x/ ); else  if (('fafafa'.replace(/a/g, /a/gi))) {<y><z/></y>;yield false; }");
tryItOut("throw __iterator__;");
tryItOut("if( /* Comment */#1=[#1#]) { if ((window)[<><x><y/></x></>]) export __parent__;} else {Functionexport *; }\n/*infloop*/M:while(__parent__ = ([1,2,3,4].map))/*for..in*/M:for(let __proto__ in (((<><x><y/></x</>).__defineSetter__)(0x99)))yield <x/>;\n");
tryItOut("{} const constructor\nyield  /x/ ");
tryItOut("/*for..in*/M:for(const __count__ in this.zzz.zzz) {with((eval(\"undefined\", true)))yield; }");
tryItOut("if(@foo) { if (<><x><y/></x></> && window) let (__parent__ = @foo, __count__) { {} }} else switch(constructor.valueOf(\"number\").hasOwnProperty(\"__proto__\")) { default: break; const __proto__; }");
tryItOut("/*infloop*/while([,].unwatch(\"__noSuchMethod__\").__lookupSetter__(\"constructor\"))break ;");
tryItOut("/*infloop*/for(let prototype; (undefined.valueOf(\"number\")); (__proto__ = *)) export *;");
tryItOut("return\n/*for..in*/for(const prop = ({prop: ({__proto__: 0x99 }), constructor: __count__.__proto__ = false }) in (this.__defineSetter__(\"__noSuchMethod__\", function  prototype () { return __parent__ } ))) {(__count__).__defineSetter__; }");
tryItOut("let (__noSuchMethod__ = 1e+81) { let __count__, prototype; }");
tryItOut("yield");
tryItOut("with({}) let(__count__ = ([this])) { return prop = (uneval(0x99));");
tryItOut("switch(()) { default: yield <x/>;break;  }");
tryItOut("while((<x><y/></x>) && 0)gc()");
tryItOut("/*infloop*/for([] = __noSuchMethod__ = <><x><y/></x></>(__iterator__, 3/0); new ((( get __iterator__ __iterator__ () { return (--<x><y/></x>) }  < constructor).eval(<x/>.__lookupGetter__(\"constructor\"))))(); 'fafafa'.replace(/a/g, function(q) { return q; })) let prop = <x/>,  { return <x><y/></x> } ;");
tryItOut("if(#1=[#1#]) gc() else yield;");
tryItOut("prop = __parent__;\nif((({__iterator__ setter: constructor, __proto__: <x/> }))) {__count__ = __iterator__; } else {export __count__; }\n");
tryItOut("if(new ~<x><y/></x>/(0.1['prop'] = [ \"\" ].map(window))) M:with({__iterator__: prop}){let prop,  = false;case 5: {}break; return  '' ;var constructor = this;break; ;<x><y/></x>break;  } else  if ((let (__proto__, ({ __iterator__: __parent__, __parent__: constructor })) __iterator__ =  \"\" )) {M:with({__parent__: <x><y/></x>}\t)throw <x><y/></x>; } else {{} }");
tryItOut("return;");
tryItOut("if(window) yield; else  if ( /x/ ) {return @foo; } else {let constructor = window, prop = <x><y/></x>, constructor;{} }");
tryItOut("/*for..in*/for(var ({ constructor: ({ __proto__: ({ __count__: ({ prototype: constructor, __proto__: __iterator__ }), __parent__: __parent__ }), prototype: ({ __parent__: [__count__, __proto__] }) }) }) = true.throw(<x/>) in <><x><y/></x></> >>>=window) /*infloop*/for(const prop; <x/>; window) let 3.141592653589793, __proto__ = <x><y/></x>;{}");
tryItOut("while(((delete @foo)) && 0){return;return *; }");
tryItOut("{prototype;; }");
tryItOut("if(<x/>) { if (0/0) {let prototype = @foo, __noSuchMethod__; } else {}}");
tryItOut("if(this.__defineGetter__(\"__noSuchMethod__\", (new Function(\";\")))) { /x/ ; }");
tryItOut("{__parent__; }");
tryItOut("while((window) && 0)function(q) { return q; }");
tryItOut("/*for..in*/for(prop in [,]) \n{return;function (__count__, __iterator__) { return <x><y/></x> }  }");
tryItOut("yield #0=({__count__: __parent__.__noSuchMethod__ setter= function  __count__ (__count__, prop)({}.__parent__)});");
tryItOut("do /gc() while((*::*) && 0);");
tryItOut("with((constructor = this.__defineSetter__(\"__proto__\",  '' ))){function(y) { yield y; {}; yield y; } }");
tryItOut("if(__proto__ =  \"\" ) { if ((new ({a1:1})([1,,]))\n) {const __noSuchMethod__;throw 1e81; }} else const prop;");
tryItOut("export prop;");
tryItOut("/*for..in*/L:for(function::__proto__ in ((({}).__lookupGetter__)(\t(uneval(<><x><y/></x></>))))){let prop = window, __iterator__ =  /x/g ; }");
tryItOut("M:if((<xxx>{({ __count__: ({ prototype: constructor, prototype/*\n*/: prop.__lookupGetter__(\"3.141592653589793\") }), __proto__: [{{} }, , x::__iterator__, prop] })}</xxx> )) gc() else export __proto__;");
tryItOut("switch(\n \"\"  , ((@foo for (prototype in *)))) { default: /*infloop*/for(let ({ constructor: __proto__, __noSuchMethod__: ({ function::__iterator__: constructor, constructor: __proto__ }) }) = ~@foo.__noSuchMethod__; (p={}, (p.z = [,,z1])()); __count__ = <><x><y/></x></>) constructorbreak;  }");
tryItOut("if(3) { if (__count__) export *; else export *;}");
tryItOut("/*infloop*/do /*for..in*/for(__iterator__ in window) {return; } while(__count__ = * =  \"\" );");
tryItOut("/*infloop*/M:for(<x><y/></x>.__parent__; (*.@*); (([1,2,3,4].slice).call( /x/g , @foo, <x><y/></x>))) {throw -3/0;var __proto__, __count__ =  \"\" ; }");
tryItOut("if(({__proto__: <x><y/></\tx>\t})) { if ([1]) export *; else {export *; }}");
tryItOut("/*infloop*/while(constructor.__count__)let (prototype) { yield; }");
tryItOut("/*infloop*/do export *; while(((window)));");
tryItOut("return ((Function).call(({}), [[1]], <y><z/></y>));");
tryItOut("/*infloop*/for(var __parent__(<x><y/></x>) = \n-0; __noSuchMethod__ = undefined\n; __noSuchMethod__.prototype) {throw @foo;continue ; }");
tryItOut("if(__parent__) {throw <x><y/></x>;true; } else  if (window) {(window); }");
tryItOut("if(this) { if ((new  /x/g  .@*:: function(id) { return id }((*::*)))) export *; else {5.0000000000000000000000; }}");
tryItOut("__iterator__ = constructor;");
tryItOut("L:with({prototype: (yield ({a2:z2}))}){(this).__defineSetter__{} }");
tryItOut("if(null) export __iterator__; else {L: /*infloop*/while(<x/>){export prop; }return window; }");
tryItOut("if(yield  /x/g  ? __noSuchMethod__ : false) {/*for..in*//* nogeckoex bug 349964 */L: for  each(__iterator__ in <y><z/></y>) yield (-0); } else gc()");
tryItOut("/*infloop*/for(prototype; (<x/>.yoyo(<x><y/></x>)).hasOwnProperty(\"prototype\"); set) {__parent__ = window;/*infloop*/M:for((constructor = constructor); (({constructor: prop @ <x><y/></x> })); ((this.__defineGetter__(\"prototype\", [1,2,3,4].map)).@foo)) var prototype = -0; }");
tryItOut("\ngc()\n");
tryItOut("M:do L:do {function ([y]) { } } while((case *: let __proto__ = *, prototype;break; ) && 0); while((__count__.__count__) && 0);export __proto__;");
tryItOut("L:if((yield ({constructor: *::*, prop setter: function  prototype (__iterator__)this })) ^ new \n#1=[#1#]()) {/*infloop*/for(var ({ __count__: __count__ }) = [(~<><x><y/></x></>) || (this.__defineSetter__(\"prop\", Function)) for each (function::__count__ in <x><y/></x>) for (1.2e3.__noSuchMethod__ in function ([y]) { }) for (__iterator__ in <x/>)]; ((function ([y]) { })() ? <y><z/></y> : <y><z/></y>); new Date(window) instanceof this.throw(this)) {yield; }L: return @foo; } else ");
tryItOut("/*infloop*/for((new Function(\"yield <y><z/></y>;\"))(+<><x><y/></x></> ? @foo : <x/>); ((p={}, (p.z = <y><z/></y>)()).<><x><y/></x></>.__lookupGetter__(\"__iterator__\") = (this.__defineSetter__(\"__count__\", <x/>))); \n[<><x><y/></x></>].watch(\"prop\", Math.pow)) if(<y><z/></y>.__defineSetter__(\"__iterator__\", new Function)) { if (((p={}, (p.z = (window + *::*))()))) break M;} else {export *; }");
tryItOut("for(let y in [5,6,7,8]) let(constructor = <x/>, __count__ = <><x><y/></x></>) ((function(){return __parent__;})());");
tryItOut("L: {/*for..in*/for(var __iterator__ in ((function () { return <><x><y/></x></> } )(<x><y/></x>))){let prop;(<><x><y/></x></>); } }");
tryItOut("while((constructor(undefined) || (<x/>.throw(033)) >>= (prototype.prototype getter= function(y) { yield y; throw *::*;; yield y; })) && 0)export __parent__;");
tryItOut("L:if((undefined.prop)) { if ((new Boolean()))  else break L;}");
tryItOut("/*for..in*/for(var ( /x/g ) in <x/>) L:\fswitch(false) { case 8: break;  }\nyield;");
tryItOut("with({__noSuchMethod__: eval(\"yield;\", export __iterator__;).__parent__ = (([1,2,3,4].slice).call(( /* Comment */ \"\" ), (<x/>)))})/*for..in*/L:for(const export __iterator__; in ((Function)(false)))return *::*;");
tryItOut("L:do {yield __iterator__; } while(( '' ) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const Function in null) constructor = <y><z/></y>;");
tryItOut("M:with({__noSuchMethod__.prop: (<xxx>{prototype}</xxx>.(<x><y/></x>.(<><x><y/></x></>)))}){break M;{} }");
tryItOut("while((true /= null) && 0){var __count__, __noSuchMethod__ = true; }");
tryItOut(" /x/g ; const <x/>;");
tryItOut("if( \"\" ) { if (arguments) return false; else const prototype;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __parent__ in <x><y/></x>) var constructor = window;");
tryItOut("break ;<x><y/></x>;");
tryItOut("switch((__parent__.__lookupGetter__(\"__noSuchMethod__\"))) { default: gc()case __parent__:  }");
tryItOut("do {if(0x99) { if (false) {gc() }} else break ;const prop\n } while(((uneval((1 for (x in []))( /x/ ,  \"\" )))) && 0);");
tryItOut("/*for..in*/for(let [__count__, set] = *::* in *) yield window;{gc() }");
tryItOut("switch(prop.hasOwnProperty(\"__count__\")) { case __count__%=true: case <><{function::__parent__}> </{function::__parent__}></>: return prototype;default: break; case ({prop: \nprop.__defineGetter__(\"prototype\", (new Function(\"__parent__\")))}): try { 1 } catch(__proto__ if [1]) { (this); } catch(prop) { (<x/>); }  }");
tryItOut("/*infloop*/for(; Iterator(); <><x><y/></x></> .@*:: <x/> ? (__noSuchMethod__ / ) : new (function ([y]) { })()()) prop;");
tryItOut("with(this){; }");
tryItOut("/*infloop*/for(var constructor = [15,16,17,18].sort(undefined > <x/>, (yield (__count__ =  /x/g ))) >= *::*;  \"\" ; ((constructor =  '' ).valueOf(\"number\")).__defineGetter__(\"__count__\", ([1,2,3,4].map).call)) switch(true) { default: break; return undefined;break; case <><x><y/></x></>: yield;break; case 8: continue ;case 0: break; case 0: export *;break; case 0: break; break L;var prototype, prototype = __noSuchMethod__;break; break; break; break; case 4: export *;case 5: case 8: gc()break; case __noSuchMethod__: break;  }");
tryItOut("if((<y><z/></y>).call(( /* Comment */[z1]), 'fafafa'.replace(/a/g, ({}).__lookupGetter__), undefined)) if(<x><y/></x>) { if ([[]]) {({}).hasOwnPropertythrow [1]; } else {gc() }} else /*infloop*/for(let prototype; <x/>; <x><y/></x>) return;");
tryItOut("/*infloop*/for(__parent__ =  /x/g ; window; <y><z/></y>) {let prototype, __count__ =  \"\" ;[1,2,3,4].map }\n");
tryItOut("throw <x/>; const __proto__");
tryItOut("let prop = <><x><y/></x></>, __count__; const set;");
tryItOut("with({}) return  /x/ ;");
tryItOut("/*infloop*/for([[]] || this; let (constructor) <x/>; (<x/>)[ /x/ ]) \r{{\n}export __noSuchMethod__; }");
tryItOut("if(function::__iterator__ = window.watch(\"delete\", __proto__))  else  if (<x/>) ;");
tryItOut("/*for..in*/for(let [prototype, prop] = (* % 5.0000000000000000000000) in  '' ) {yield <x><y/></x>; } const __iterator__;");
tryItOut("M:if((<x><y/></x> .@*::  /x/g ).__defineGetter__(\"constructor\", function ()this)) {var constructor = this, [z1,,] = *::*; } else  if (({constructor: [11,12,13,14].map })) /*for..in*/for(__iterator__ in <><x><y/></x></>) break \n");
tryItOut("for(let y in []);");
tryItOut("__iterator__ = __parent__;");
tryItOut("yield ((undefined .. <x><y/></x>) .@x:: constructor.prototype);");
tryItOut("{if(window.valueOf(\"number\")) (window); else {do {([1,2,3,4].slice).applyconst __noSuchMethod__, __parent__; } while((0x99) && 0); } }");
tryItOut("/*for..in*/for(let (-1)(<><x><y/></x></>) in ((Math.sin)((p={}, (p.z = [[1]])())))){/*for..in*/L:for(var __parent__ in <><x><y/></x></>) gc() }");
tryItOut("throw prototype;");
tryItOut("constructor = function ([y]) { }([[]]) >> window >= <x><y/></x//h\n> = __proto__;");
tryItOut("if(0/0) {export __proto__;export *; } else  if (<><x><y/></x></>) <x><y/></x>");
tryItOut("throw StopIteration;");
tryItOut("with({prop: ({__iterator__: <><x><y/></x></>})})");
tryItOut("for(let y in []);");
tryItOut("gc()");
tryItOut("do export *; while((1e-81) && 0);");
tryItOut("let ((__iterator__.function::__count__ getter= function (prop)[1])(({ get __parent__ __proto__ () { export prototype; }  })) = @foo, prop) { /*for..in*/for(([,,z1])(<x><y/></x>) in <x/>)  '' ; }");
tryItOut("yield;");
tryItOut("yield prop = __iterator__;");
tryItOut("with({}) with({}) { for(let y in []); } ");
tryItOut("/*infloop*/L:for(var constructor; new __count__(3.141592653589793//h\n); undefined -= <><x><y/></x></>) var __noSuchMethod__ = @foo;");
tryItOut("gc()");
tryItOut("switch([,,z1]) { default: export *;break; case <><x><y/></x></>:  }");
tryItOut("while((<xxx>{prop}</xxx>yyy((({prop getter: /a/gi, delete: ({ __proto__: ({ __count__: constructor, prototype: __proto__ }) }) = let (__count__ = 1e81, prototype) (<x><y/></x>.hasOwnProperty(\"prototype\")) })), ({ get prop __noSuchMethod__ (__parent__) { return  { break L; } .__iterator__ = <x><y/></x> } , __proto__: (p={}, (p.z = <y><z/></y>)()) }))) && 0)gc() const constructor;");
tryItOut("throw  \"\" ;");
tryItOut("<><x><y/></x></>++;");
tryItOut("yield;");
tryItOut("(*)\n");
tryItOut("/*for..in*/L:for(prototype = this.__defineSetter__(\"__count__\", <y><z/></y>) in prototype.__parent__ setter= (function(q) { return q; }).call) {/*infloop*/M:for(undefined; <x><y/></x>; <x><y/></x>) {throw -3/0; } }");
tryItOut("/*infloop*/for(let ({ __proto__: prop }) = false; [11,12,13,14].some;  \"\" .isPrototypeOf(<y><z/></y>)) {var prop = 1e+81;gc() }");
tryItOut("export __proto__");
tryItOut("if(this.zzz.zzz) yield 1.3 >>= <x><y/></x>; else {try { __count__ } catch(({ __count__: constructor, \f__proto__: __count__ })) { __parent__ = 1e-81, constructor; }  }");
tryItOut("let (gc()) { gc() }");
tryItOut("/*infloop*/for(constructor = <><x><y/></x></>; window; *) return  /x/g ;");
tryItOut("with({__noSuchMethod__:  /x/ .__defineSetter__(\"constructor\", (function  __parent__ (;) /x/g ).call)}){return; }");
tryItOut("{export *; }");
tryItOut("try { return <x/>; } catch(__proto__: (( /x/g )(<x><y/></x>))) { return; } finally { return __proto__.propertyIsEnumerable(\"0.1\"); } ");
tryItOut("{{} }");
tryItOut("with(__parent__.__iterator__ = [<y><z/></y>].sort('haha'.split)){break ;yield; }");
tryItOut("/*for..in*/for(var *::* in <><x><y/></x></>) {<x/>;*; }");
tryItOut("switch(((uneval([1,,])) += 'fafafa'.replace(/a/g, new Function))) { case (new ((<><x><y/></x></>\n))(this.__defineGetter__(\"constructor\", function(q) { return q; }))): /*for..in*/L:for(var prototype(<x/>) in @foo && 0.1) export prototype;break; if(window) { if (1.3) {yield constructor;throw  \"\" ; }} else {return; }break; case 8: let (__noSuchMethod__ = __iterator__++, yield = -0) { ; }break;  }");
tryItOut("/*infloop*/for(var prototype = <y><z/></y>; true;  '' ) { }");
