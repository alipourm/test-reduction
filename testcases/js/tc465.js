tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(prop in (const __proto__, constructor)) ");
tryItOut("export __iterator__;");
tryItOut("while((new ( /x/g  << function ([y]) { }.__lookupSetter__(\"__iterator__\"//h\n)).__defineSetter__()) && 0){}");
tryItOut("let (prop = #0=({constructor: constructor .@ this})) { throw ; }");
tryItOut("return (this.__defineSetter__(\"prop\", ({}).hasOwnProperty) .. new 'haha'.split([z1]));");
tryItOut("__proto__ = [1], __iterator__");
tryItOut("prop = (-0);\nthrow ({});\n\n");
tryItOut("__noSuchMethod__ = __iterator__;");
tryItOut("/*infloop*/for(__noSuchMethod__; eval(\"L: {var __noSuchMethod__ = true, __count__ = undefined; }\",  /x/ );  /* Comment */<y><z/></y>) {yield;\n{}\n }");
tryItOut("yield prop__iterator__ = true; const prop;");
tryItOut("/*for..in*/for(var prototype = (new Iterator()) in 1.3) {continue M; }");
tryItOut("/*infloop*/for(RegExp(this.__defineGetter__(\"__proto__\", Math.pow)); new  /x/g () for each (__parent__ in *::*) if (<></>); export prototype;) if(([15,16,17,18].filter(({}).__lookupGetter__, [z1]))) { if (function  setter (__count__) { return <x><y/></x> } ) {(<><x><y/></x></>);(1 for (x in [])) }} else {<><x><y/></x></>;yield throw 1e81;; }");
tryItOut("/*infloop*/M:for(const __count__ = false; this; window) {function  prototype () { return [z1] }  }");
tryItOut("(<y><z/></y>); const __proto__\nif(yield @foo)  else ");
tryItOut("L: {export *; }");
tryItOut("if(#3={a:#3#}) continue ; else  if ([15,16,17,18].map(({}).__lookupGetter__, new Number([11,12,13,14].map, null).unwatch(\"__iterator__\"))) if(({ constructor: __proto__ }) = prop) {{} }");
tryItOut("L: {/*for..in*//* nogeckoex bug 349964 */ for  each(var __parent__ in <x/>) break L; }");
tryItOut("let(prototype) { throw StopIteration;");
tryItOut("switch([11,12,13,14].filter) { default: break;  }");
tryItOut("with(let (__iterator__(1e-81), ({ __parent__: __parent__, __proto__: prop })) __iterator__ = (<x/>\n))let(prototype = ( /x/g ), __count__) ((function(){yield RangeError();})());");
tryItOut("return;");
tryItOut("if((constructor.propertyIsEnumerable(\"__parent__\"))) {1e-81; } else /*infloop*/for( /x/ ; <><x><y/></x></>; <><x><y/><\f/x></>) {const __noSuchMethod__;gc }");
tryItOut("if((__proto__.__count__)) {if((Boolean())) {yield window;/*infloop*/while(*::*){gc()yield; } } else {yield <><x><y/></x></>;return [[]]; }const __parent__ = 4.; }");
tryItOut("with({__iterator__: [15,16,17,18].some((1 for (x in [])), (1e-81 += <x><y/></x>))})prototype =  \"\" , ;");
tryItOut("{__count__ }");
tryItOut("if(false .@ *.unwatch(\"prototype\")) yield <y><z/></y>; else {if((!__count__)) { if (<><x><y/></x></>) {yield <><x><y/></x></>; } else {{} }} }");
tryItOut("/*infloop*/M:for(__proto__; (new ((new Function(\"(function(id) { return id });\")))(*)); ( & <><x><y/></x></>) += (__iterator__ = [,,z1])) {__parent__ }");
tryItOut("/*infloop*/do (this); while(__count__)\n");
tryItOut("/*for..in*/for(var [__count__, __proto__] = this in {}) {[1,2,3,4].map(this); }yield  \"\" ;");
tryItOut("if(__noSuchMethod__ =  /x/ ) { if (<><x><y/></x></>.( /x/g )) return #3={a:#3#}; else {}}");
tryItOut("{{} }");
tryItOut("{{}\n{const constructor; };\n(function(q) { return q; }).call }");
tryItOut("const prop;");
tryItOut("\n");
tryItOut("function (__parent__, __proto__) { throw \f033; } ");
tryItOut("if((<y><z/></y>.*)) {continue ; } else  if (eval(\"null\",  \"\" )) {gc() }");
tryItOut("\tL:if(new ({}).__lookupGetter__(@foo)) { if ((((undefined |  /x/g ))('fafafa'.replace(/a/g, Math.sin))).eval((0/0[.2])) ? void gc() <<= <x/>.__defineSetter__(\"__iterator__\", <x><y/></x>) : this) {(constructor-=<><x><y/></x></>.__iterator__);let constructor = <x><y/></x>, __iterator__; const prop; }} else prop");
tryItOut("while(((<><x><y/></x></>.hasOwnProperty(\"__proto__\")).eval(__count__ = (new //h\n[,,z1]))) && 0)if(__parent__.(<x/>)) { if (let (prop = __noSuchMethod__) (4.[<y><z/></y>])) yield @foo;} else {do {let __noSuchMethod__ = window; } while((<x><y/></x>) && 0);yield; }");
tryItOut("const prototype, __count__\n__iterator__, __parent__; const __count__;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in (((Math.sin).call)( '' ))){yield; }");
tryItOut("continue \n");
tryItOut("{; } const __parent__;");
tryItOut("return *::*;yield;");
tryItOut("with((this.__defineGetter__(\"__count__\", gc))){ /x/g ; }");
tryItOut("return this.__defineSetter__(\"__noSuchMethod__\", Math.pow);");
tryItOut("let (__count__ = <x/>) { const prop = <x><y/></x>, constructor = [z1]; }\nL: export constructor;\n");
tryItOut("{}");
tryItOut("while((((__iterator__.(function::getter) += prototype).__defineSetter__(\"constructor\", (<{__noSuchMethod__}>yyy</{__noSuchMethod__}>.(__parent__)).watch))) && 0)return");
tryItOut("/*infloop*/for(const prop = (function ([y]) { })();  '' ; true) {return; }");
tryItOut("yield constructor;");
tryItOut("let(prototype = (__parent__.prototype.@*), prototype) { var __count__ = 0/0;");
tryItOut("L:if((__count__ = prototype = let (case 0: break; (__parent__);default: export *;case 6: return;case 3: break; case false: export prototype;this;break; break; case 7: break; ( \"\" ).watchvar constructor = [,,], prop = *::*;case 3: {}case try { ; } catch(__proto__) { var __iterator__ = <><x><y/></x></>, prop = 3/0; } : case *: return;break; {}break; case <y><z/></y>: break; ) 1e81)) {export *;(false); } else  if (#0=[[,,]].eval((gc()))) throw -0;");
tryItOut("/*for..in*/for(var prop in ((function (__iterator__, __proto__)function  __iterator__ () { export *; } )(window ? (prototype = __iterator__) : [15,16,17,18].sort(gc, *))))switch([15,16,17,18].map(function  constructor (__count__, __count__) { return  /x/g  } , [1,,]) <= ([11,12,13,14].sort)) { case 6: break; M:if(( /x/g  >>> @foo)) { if (3/0.watch(\"__proto__\", 0x99)) {export \fprototype;null; } else {var __proto__ = null, prototype;let __noSuchMethod__ = 0; }};break;  }");
tryItOut("/*for..in*/for(__count__ in 'fafafa'.replace(/a/g, [1,2,3,4].slice) + 'fafafa'.replace(/a/g, <y><z/></y>)\n) {var constructor = <><x><y/></x></>.@* @ \n(true)(<><x><y/></x></>); }");
tryItOut("{(<x><y/></x>);if((-1)) {export __proto__; } }");
tryItOut("/*for..in*/for(__proto__ = (export __proto__;) in __parent__) {var __iterator__ = this;return constructor; }");
tryItOut("let([__proto__, __iterator__], __count__ = <x><y/></x>) ((function(){return new String(false, false);})());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype.(constructor ? __count__ : null += (({}).hasOwnProperty))['function::__iterator__'] in 0x99 | (new \f0.1.valueOf(\"number\")( /* Comment */<y><z/></y>))) {/*infloop*/L:for(const __noSuchMethod__; (__iterator__ =  /x/g ); <x><y/></x>.(<x><y/></x>)) {gc()throw 3; } }");
tryItOut("if(__count__) {yield <x><y/></x>;export *; }");
tryItOut("L: {}");
tryItOut("let(prop, __noSuchMethod__ = new [1,,](<><x><y/></x></>, <><x><y/></x></>)) ((function(){for(let y in []);})());");
tryItOut("export __proto__\n/*infloop*/for(let constructor = __parent__; \n(getter = <><x><y/></x></> > (-0)); __iterator__.(true /  '' )) {<x><y/></x>;[[1]]; }");
tryItOut(";");
tryItOut("/*infloop*/M:while(__noSuchMethod__.prop = #1=[#1#].valueOf(\"number\"))let prototype = __proto__, __count__ = __parent__;");
tryItOut("/*infloop*/for(const prototype; <y><z/></y> , ({__count__ getter: undefined }); __count__+=( /x/ ).call( /x/g , new (-0)(__count__)())) {if(__proto__ = <x/>) {export get; } else  if (true[<x><y/></x>]) {let __parent__; } else \nif((__iterator__ = this)) ({a2:z2}); else throw <x><y/></x>; }");
tryItOut("gc()");
tryItOut("L:switch(this.__defineSetter__(\"__parent__\", [1,2,3,4].slice)) { default: if(((p={}, (p.z = *)()))\n.__lookupSetter__(\"__noSuchMethod__\")) { if ([constructor]) return;} else {export __noSuchMethod__; }break; /*for..in*/for(var __proto__ in prop) ;break; []case 8: return;break; case 9: break; case 4: {}break;  }\r");
tryItOut("/*infloop*/for(const __iterator__; this += (prototype =  '' ).__lookupGetter__(\"prototype\"); \t(<x/>)) /*infloop*/L:while((constructor.((__proto__ = __proto__)))){/*infloop*/for(this; *; undefined) export *;; }return;");
tryItOut("if( '' ) {(<><x><y/></x></>); } else  if (<x/>) {throw null;gc() } else {[1,2,3,4].map }");
tryItOut("/*infloop*/while([1,,]){}\n\nthrow __parent__ = <>__count__</>;\n");
tryItOut("switch(window) { default: break; case 0: throw 3;case *::*: export *;break; break; export __parent__;break; case 3: break;  }");
tryItOut("if( \"\" )  else  if (__noSuchMethod__ /  /x/ ) ; else return prototype;");
tryItOut("/*infloop*/M:for( /* Comment */ /x/  >>>=<y><z/></y>.propertyIsEnumerable(\"__noSuchMethod__\"); ({ prototype: constructor, prop: __proto__ }) = window <= 0; ([15,16,17,18].some(function  __noSuchMethod__ () { yield; } , ({ get __noSuchMethod__ __count__ (__parent__, __proto__) { return  \"\"  }  }))(([.2.__defineGetter__(\"__count__\", ([1,2,3,4].map).apply)])))) {var __noSuchMethod__, constructor = null;(__noSuchMethod__, __iterator__ = undefined); }");
tryItOut("M:if([ /x/g ].filter((<><x><y/></x></>).watch)) break \n else  if ((__proto__([1,,]))) {throw <y><z/></y>\n__parent__; }");
tryItOut("{prop: new ({a2:z2}) }");
tryItOut("/*for..in*/for(const [prop, function::prototype] = void ({__count__: window, __proto__ setter: 'haha'.split }) in __proto__) ");
tryItOut("/*for..in*/for(const __proto__ = window in  /x/g ) {return __noSuchMethod__;return; }");
tryItOut("return;\nthrow null;\n\n(arguments)");
tryItOut(";");
tryItOut("L: /*for..in*/for([__count__, __proto__] = new this(<x><y/></x>).propertyIsEnumerable(\"__noSuchMethod__\"\f) in (<x/> % 0.1) & __parent__ = <><x><y/></x></>) throw 3/0;");
tryItOut("M:if(({ __count__: constructor, prototype: __parent__ }) = __proto__) { if (<x><y/></x>.(<x/>)\f) {{}yield false; }} else {return -0; }");
tryItOut("let (constructor) { /*infloop*/for(var __count__; function  prop (__count__) /x/ ;  /x/g  .@x:: __proto__) {throw []; } }");
tryItOut("if(window) { if () { }} else yield [,,]; const __count__;");
tryItOut("{__proto__;([1,2,3,4].map).call }");
tryItOut("{{throw __proto__;<x><y/></x> } }");
tryItOut("yield; const constructor;");
tryItOut(";");
tryItOut("window");
tryItOut("__parent__, constructor = <x/>");
tryItOut("{export *;/*infloop*/M:do {gc()yield; } while(@foo);\nexport *;\n }");
tryItOut("__iterator__");
tryItOut("M:while((prototype+=[11,12,13,14].map) && 0){//h\n(__parent__)\n }");
tryItOut("with({__parent__: (@foo ? prototype : <x/>.@foo).__lookupSetter__(\"constructor\")})let (constructor = constructor, constructor) { yield; }");
tryItOut("/*infloop*/M:for( /x/g ; 0x99; __parent__) [1,2,3,4].slice");
tryItOut("if((-1)) {(__count__); }");
tryItOut("{; }");
tryItOut("/*infloop*/M:do {switch(<x/>) { case 9: (*);break;  }{} } while((__parent__.prop = <><x><y/></x></>));");
tryItOut("/*infloop*/while(([yield this.isPrototypeOf(*::*)])){const __count__ = <x/> }");
tryItOut("prop");
tryItOut("const __count__ = false, __proto__;");
tryItOut("if((-3/0\n)) { if (<><x><y/></x></>.valueOf(\"number\")) ;} else {export __parent__;gc() }");
tryItOut("/*infloop*/while(<x><y/></x> < <><x><y/></x></> != (yield (prop.__count__))){__noSuchMethod__ = window;<><employee id=\"1\"><name>Joe</name><age>20</age></employee></> }");
tryItOut("/*infloop*/do if((\n(Math.pow).call(undefined--, (*::*.__defineGetter__(\"__proto__\", (({}).__lookupGetter__).call)).__defineGetter__(\"__proto__\", gc)))) {case 6: 1e81case <><zzz>(constructor.__iterator__ getter= 'haha'.split)</zzz></>: break; break;  } else  if ((((uneval(-0))).isPrototypeOf((__parent__ instanceof prototype)))) {export __parent__;/*for..in*/for(__parent__ in undefined) {let __noSuchMethod__ = *::*;; } } else {/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in  \"\" ) {yield 0; }L:do {return <x><y/></x>; } while(((-0)) && 0); } while((+new (function(y) { yield y; export __parent__;; yield y; })( \"\" )));");
tryItOut("{if((__iterator__.__noSuchMethod__ = __count__.valueOf(\"number\"))) {constructor;function(y) { yield y; export prop;; yield y; } } else  if () {let yield, prototype; }{return __noSuchMethod__; } }");
tryItOut("if((uneval((new (*)(<><x><y/></x></>).*)))) { if (constructor = <x/>()) /*for..in*/for(const prototype in <y><z/></y>) } else {throw <><x><y/></x></>;return 4.; }");
tryItOut("/*for..in*/for(let __proto__ in <><x><y/></x></> instanceof constructor++) {__parent__ = (-1), prop; }");
tryItOut("/*infloop*/M:do {export prop;var __parent__; } while(<y><z/></y>);");
tryItOut("if((uneval(<x/>))) { if (this.zzz.zzz) {yield;export function::delete; }} else {yield 3/0; }");
tryItOut("(({__iterator__: -undefined }))([[]]) = __iterator__;");
tryItOut("{var prop;/*infloop*/for(let __iterator__; #1#; .2) {export *; } }");
tryItOut("while((this + __proto__) && 0)/*infloop*/do  while([11,12,13,14].some);");
tryItOut("/*for..in*/for(let [__parent__, __parent__] = (1.2e3-- !==  /x/ ).__lookupGetter__(\"__count__\") in (!*)) /*infloop*/M:do return window; while(false);");
tryItOut("if((({prototype: (this.__defineGetter__(\"prop\",  '' ))}))) {/*for..in*/for(const __noSuchMethod__.__count__ in __proto__) gc() }");
tryItOut("/*for..in*/for(let __count__.__iterator__ in ((({}).hasOwnProperty)(((__iterator__ = Number(*, false)[({__noSuchMethod__: prototype })]) for (prop in __noSuchMethod__ ?  : <x><y/></x>) for each (__proto__ in __noSuchMethod__(null, prop)) for (__parent__ in  \"\" )))))/*for..in*/for(const prototype(( /x/g .hasOwnProperty(\"@foo\"))) in ((<x><y/></x> :: 1e4)(( /* Comment */1.2e3)[prototype = constructor]))){return <x><y/></x>; }");
tryItOut("if((*++).__parent__) {export *; } else gc");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var [1,,].__noSuchMethod__ in 1e81) with({<><x><y/></x></>: <x/>})yield undefined;");
tryItOut("/*infloop*/for(let constructor = ( /* Comment */null); (eval(\"(yield 1.2e3)\", [])); ) export prop;");
tryItOut("/*for..in*/for((* , <x><y/></x>)['__count__'] = window in ({prototype getter: function(q) { return q; } })) {; }");
tryItOut("with({}) let(({ __parent__: __iterator__, prototype: __noSuchMethod__ }) = 'fafafa'.replace(/a/g, function(y) { yield y; continue ;; yield y; }), prop) ((function(){for(let y in [5,6,7,8]) continue ;})())");
tryItOut("return ({})");
tryItOut("with(<x><y/></x>\f .@x:: this){break ; }");
tryItOut("let(set) ((function(){let(__proto__ = __noSuchMethod__.prop) { with({}) let(constructor = @foo) ((function(){var __iterator__ = 0.1, __noSuchMethod__;})());})());");
tryItOut("let (function::__count__, __noSuchMethod__ = <><x><y/></x></>.eval([z1])) { ((Math.sin).call); }");
tryItOut("let (constructor = <y><z/></y> /= (function ([y]) { })(), prop) { if(<><x><y/></x></>) ; else  if (0/0) <x/>; else {export *; } }");
tryItOut("let (__proto__) { if((this.__defineSetter__(\"__iterator__\", (<x/>).watch))) { if ((default: this;case this: prototype;break; case 7: break; break; ) >= *.constructor) {;(new Function).call } else =} }");
tryItOut("/*for..in*/for(var __proto__ = <><x><y/\f></x></> in undefined) {((-1)); }");
tryItOut("\tif(<y><z/></y>) {gc() } else \f if (undefined) -3/0; else {return null; }\n");
tryItOut("if((yield 0x99)) {gc() } else \f{const prototype = <y><z/></y>, __iterator__; }");
tryItOut("/*infloop*/M:while('fafafa'.replace(/a/g, function  prop () { export __noSuchMethod__; } ))var __parent__;");
tryItOut("let (__count__) { /*infloop*/do ; while((\fthrow <y><z/></y>;.propertyIsEnumerable(\"__parent__\")))\n }");
tryItOut("return false.prototype;");
tryItOut("yield constructor;");
tryItOut("/*for..in*/for(let null in (3/0++)) {let __proto__, __count__ =  /x/ ; }");
tryItOut("L:if(prototype =  '' ) {} else {let prototype = <x/>, prop; }");
tryItOut("if(undefined) __count__");
tryItOut("throw __proto__;");
tryItOut("M:while(([z1,,] , ({})) && 0){{return <><x><y/></x></>;gc() } }");
tryItOut("(@foo);try { Math.pow } catch(__parent__ if *::*) { var __iterator__; } \nconstructor\n{}\n\n");
tryItOut("if((constructor)) { if (__count__ && prototype) {return <><x><y/></x></>;(<><x><y/></x></>); }} else const __iterator__, constructor;");
tryItOut("/*for..in*/M:for(var prototype(@foo) in  \"\" ) {gc()const constructor, __iterator__ = __iterator__; }");
tryItOut("do {export *;return; } while((new (<><x><y/></x></>).watch(arguments, <x/>)) && 0);");
tryItOut("with(window >> <><x>\t<y/></x></>)return <><x><y/></x></>;");
tryItOut("/*infloop*/while((prop = prop))yield;");
tryItOut("with({__iterator__: __noSuchMethod__.(0/0)})gc()");
tryItOut("/*infloop*/for([11,12,13,14].map; (0.1.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map).__proto__); __noSuchMethod__ = null %= prototype) throw 1e4;");
tryItOut("/*for..in*/for(let __iterator__ in 0.1) export __proto__;");
tryItOut("do  while(([__count__ = window]) && 0);");
tryItOut("L: {__noSuchMethod__ = <x/>, __iterator__; }");
tryItOut("export yield");
tryItOut("/*for..in*/for(const [__count__, __iterator__] = eval(\"prototype = *\", ((yield undefined))) in ((p={}, (p.z =  \"\" )())--)) yield; const __count__;");
tryItOut("yield <><x><y/></x></>.__lookupGetter__(\"constructor\");");
tryItOut("while((__count__ = __noSuchMethod__) && 0){break ;yield; }");
tryItOut("/*infloop*//*\n*/while(true.prototype = true){yield <x><y/></x>; }");
tryItOut("if((prop) = eval(\"<><x><y/></x></>;\", @foo).eval(<>__iterator__</>++)) { if (({prop setter: Function,  get prototype __proto__ (__proto__, __iterator__) { return yield <y><z/></y>.prototype }  })) {{}yield; }} else {(*::*); }");
tryItOut("/*for..in*/for(__parent__ = null.watch(\"__count__\", Math.sin) in <y><z/></y>) \f{return 1e81; }");
tryItOut("if(<><x><y/></x></>) { } else  if (false\t) let __iterator__, prototype = __iterator__: 1e+81\n\n\fyield *::*.yoyo(0/0);\n");
tryItOut("/*infloop*/for(__iterator__; undefined; <x/>) __count__ = <><x><y/></x></>, __parent__;");
tryItOut("L:if(<x><y/></x>) {;<x><y/></x>; } else  if (*\n) gc()");
tryItOut("export __iterator__;");
tryItOut("/*infloop*/M:for(prototype;  /x/g ; eval(\"__noSuchMethod__\", 1e81)) __iterator__ = <><x><y/></x></>;");
tryItOut("M:with(((function(y) { yield y; ;; yield y; })())){}");
tryItOut("switch(undefined.isPrototypeOf(window)) { case 4: throw [1];default:  }");
tryItOut("M:while((<x/>) && 0){export *; }");
tryItOut("/*infloop*/do {export *;/*for..in*//* nogeckoex bug 349964 */L: for  each(__noSuchMethod__ in <x><y/></x>) {const __proto__ = window, constructor = __iterator__; } } while(this);");
tryItOut("switch((__proto__.unwatch(\"__parent__\"))) { case 2: prototype, __parent__ = 5.0000000000000000000000;break;  }");
tryItOut("/*for..in*/for(const null in <><x><y/></x></>) export prop;");
tryItOut("/*infloop*/for(__parent__; ; new ((this).watch).call(({__proto__: this.__defineSetter__(\"__iterator__\", [1,,])}))) {return (<><x><y/></x></> in <x><y/></x>);\r/*for..in*//* nogeckoex bug 349964 */M: for  each(const prop in __noSuchMethod__) {{}([1]); }\f\nyield  /x/g ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each((__proto__.prototype = 1e-81)((new (<><x><y/></x></>)(constructor))) in (uneval((setter = <x><y/></x>)))) {{__iterator__;export *; } }");
tryItOut("/*for..in*/for(let prototype __count__ in 'constructor = #3={a:#3#}) { }");
tryItOut("let(prototype) ((function(){export *;})());");
tryItOut("/*for..in*/L:for(var __count__ = __count__.eval(*) in <y><z/></y>) {yield; }");
tryItOut("/*infloop*/do {const prop, constructor = window; }\t while(({ set __count__(prototype, prototype) { return (#1=[#1#] for each (function::__iterator__ in 1.3)) } , __count__: (true ^ 3/0) }));");
tryItOut("if((new (<y><z/></y>)(//h\n{}, this))) {gc()yield; }");
tryItOut("M:do with({__count__: ((__parent__) < (window for (prop in  \"\" )<x><y/></x>))}){return; } while((__count__) && 0);");
tryItOut("if((({__iterator__: 4.\t,  get constructor __noSuchMethod__ () { yield true }  }))) constructor = [1]; else  if ((new <x/>(setter, window))) {__proto__; }");
tryItOut("with((uneval(true))){/*infloop*/for(var prop; window; [z1,,]) export __parent__; }");
tryItOut("constructorreturn <x><y/></x>;");
tryItOut("const __noSuchMethod__\n");
tryItOut("/*infloop*/for(var __count__; (<><x><y/></x></> + <><x><y/></x></>); ((uneval((new String(false)))))) {}");
tryItOut("if(arguments) /*for..in*/for(let __count__ = (__parent__ =  /x/ ) in undefined) /*for..in*/for(let [__parent__, __iterator__] = *::* in #3={a:#3#}) {export __proto__; }\f else /*for..in*/for(var prop in <x><y/></x>) (-3/0);");
tryItOut("/*infloop*/for(__count__; ((())([[]], [,,])); prototype.(*::*).__lookupGetter__(\"__count__\")) <employee id=\"1\"><name>Joe</name><age>20</age></employee>.(((<x/>)(function(id) { return id }, prop)));");
tryItOut("L: {M:if((__proto__ = <x><y/></x>)) { if (<><x><y/></x></>.watch(\"__parent__\", function  __noSuchMethod__ (prop) { return true } )) {var const const constructor;;; } else /*for..in*/for([constructor, __proto__] = #3={a:#3#}.unwatch(\"__iterator__\") in (-1)) /*for..in*/for(let constructor = -3/0 in <x><y/></x>) {var prototype; }} }");
tryItOut("if(constructor = prototype(__count__, __noSuchMethod__)) return @foo;");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ in (((new Function(\"yield <x/>;\")))(<x><y/></x>)))yield <><x><y/></x></>;\f");
tryItOut("/*infloop*/while(__iterator__.(__noSuchMethod__ = window)){with({}) { for(let y in [5,6,7,8]) ; } /*for..in*/for(constructor = this in [z1]) throw <x\t><y/></x>; }");
tryItOut("M:if([,,]) {export prop; }");
tryItOut("let (__count__ = __count__) { with(false){gc()gc() } }");
tryItOut("return;");
tryItOut("{function  __noSuchMethod__ (__proto__, constructor) { __count__; } let (__iterator__, __iterator__) {  '' ; } }let prop = this;gc()");
tryItOut("with(<><{prop}>yyy</{prop}></>)do break ; while(((*::* ? this :  /x/g  ? ( '' )(__proto__, true) : prop.@*)) && 0);");
tryItOut("/*for..in*/for(const [__noSuchMethod__, prototype] =  /x/g  in prop.__count__ = #1#.* for ([__iterator__, , prop] in 1.3) for each (__count__ in this) for (constructor in true)) /*infloop*/for(function::__proto__; <x><y/></x>; <x/>) var prototype = @foo;");
tryItOut("M:if((#1=[#1#].@foo)[[__proto__ for (prototype in this)]]) continue L; else  if (new ((<><x><y/></x></>.__count__))()) {M:if(@foo /= <><x><y/></x></>) {;yield; } else  if ([1] % yield) {(*::*); } else try {  } finally { prop; } L:if(constructor) (@foo); }");
tryItOut("let(__iterator__) ((function(){for(let y in []);})());");
tryItOut("M:switch(__proto__) { __noSuchMethod__: (uneval(new (@foo)())) }");
tryItOut("/*for..in*/for(var __parent__ in [1,,]\n) {M:if(<y><z/></y>) {gc } else const __count__ = this;const __noSuchMethod__, constructor = *::*; }");
tryItOut("/*for..in*/for(var setter in (((function (({ prop: prop, __proto__: ({ __parent__: __iterator__ }) }), __proto__)constructor .@ window.hasOwnProperty(\"__noSuchMethod__\")).apply)( /* Comment */__proto__ = __parent__)))return;");
tryItOut("/*infloop*/for(var constructor = *::* !=  \"\" ; ((true)[<x><y/></x>]); (window.__defineGetter__(\"__count__\", (new Function(\"\"))))) continue L;");
tryItOut("/*for..in*/for(var [__parent__, __noSuchMethod__] =  ''  in undefined) {eval<x><y/></x>; }");
tryItOut("let(throw prototype;) { for(let y in []);");
tryItOut("/*infloop*/for(const prop = <><x><y/></x></>; undefined; <y><z/></y>) ((eval).apply).apply");
