tryItOut("/*for..in*/L:for(var [__count__, __proto__] = (!window < *) in ) /*infloop*/for(let prototype; function ([y]) { }; !<><x><y/></x></> & 1e-81) export *;");
tryItOut("/*for..in*/M:for(var __noSuchMethod__ in this.__parent__) {break M;continue ; }");
tryItOut("{break L;export *; }");
tryItOut("let (__iterator__) { /*infloop*/while(prototype = __proto__)throw ({a2:z2});//h\n }");
tryItOut("switch(((*::*)[*::*])) { default: break; with([,]){export *; }break;  }\n((function ([y]) { })()); const __noSuchMethod__;");
tryItOut("with(new (eval(\" /x/g .propertyIsEnumerable(\\\"__iterator__\\\")\", <y><z/></y>))((((*::*)(undefined, [,,z1])) in (1.2e3.__lookupSetter__(\"constructor\")))()))/*infloop*/for(*; *; false) __count__");
tryItOut("with({__count__: window}){export *;/*for..in*/M:for([__proto__, __noSuchMethod__] =  in setter) export *; }");
tryItOut("/*infloop*/do *; while((({}).__lookupGetter__).call(__parent__, window));");
tryItOut("L:do {(<x><y/></x>);yield #1#\f; } while((+undefined) && 0);");
tryItOut("/*infloop*/for(__noSuchMethod__; #2=this.__defineGetter__(\"null\", function (prop, prop) { yield @foo } ); \n(true &=  /x/g  .@x:: ((({}).__lookupGetter__).call(true, <x/>))).eval([,,])) L:with({__proto__: @foo}){const prop; }");
tryItOut("/*for..in*/for(var constructor in <x/>) {M:with({__parent__: <><x><y/></x></>}){; }let (\fprop) { prototype } }");
tryItOut("if(function::<><x><y/></x></> = *::*.__defineSetter__(\"__noSuchMethod__\", function ()<x><y/></x>) += (@foo |= <x><y/></x>)) { if (yield prop = <x/>.prototype) break ; else {if(<x><y/></x>) yield *; else  if (<x><y/></x>) {({}).hasOwnProperty } }}");
tryItOut("/*for..in*/for(let [prop, __count__] = ([ { return (<x/> ? arguments :  '' ) .@ [15,16,17,18].some(((new Function(\"return  /x/g ;\"))).apply,  \"\" ) } ].sort((<x/>).__defineSetter__)) in __count__) /*for..in*/M:for(let [__count__, prop] = true in this) {export __proto__; }");
tryItOut("L: /*infloop*/for(const __parent__ = this; function::constructor; window) { } const __parent__;");
tryItOut("with([,])");
tryItOut("/*for..in*/for(let [__iterator__, __proto__] = this in 3/0) {this }");
tryItOut("L:if([15,16,17,18].sort(new Function, <x/>)) {( /x/ );const prototype; } else {continue M; }");
tryItOut("if((<x/> in @foo)) yield <x><y/></x>; else  if ([] = 0/0(*, <x><y/></x>)) {gc(){} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(let ((<x><y/></x>.throw(this)))(prop.propertyIsEnumerable(\"__proto__\")) in *) {export __parent__; }");
tryItOut("/*infloop*/for(<><bbb xmlns:ccc=\"@foo\"><ccc:eee></ccc:eee></bbb></>; window; (const __noSuchMethod__, prototype = <><x><y/></x></> @ (p={}, (p.z = <x/> <<=  '' )()))) let (__proto__ = (eval(\"break ;\", prop)), constructor) { export __count__; }");
tryItOut("M:with({prop: __count__.constructor}){{}return; }");
tryItOut("while((( /x/g )) && 0)prototype, __count__ = __noSuchMethod__;");
tryItOut("L:if( /x/g  & <><x><y/></x></>) {throw <x/>;export prototype; }\n/*for..in*//* nogeckoex bug 349964 */ for  each(let [,,]['prototype'] in true) {{} }\n");
tryItOut("L: {throw __noSuchMethod__; }");
tryItOut("/*infloop*/for(let __noSuchMethod__; this.hasOwnProperty(\"__count__\"); (1 for (x in []))) /*infloop*/L:for(__parent__; 0; this) {return;true; }");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(var __count__ = .2 | __parent__ /= (__noSuchMethod__.prop setter= function  constructor (__count__)<><x>\n<y/></x></>) in (constructor, __iterator__ for (prop in __iterator__)) != false.__lookupSetter__(\"__noSuchMethod__\")) {yield<><employee id=\"1\"><name>Joe</name><age>20</age></employee>yyy</> }");
tryItOut("return\n__count__, prototype;");
tryItOut("__parent__ = constructor;");
tryItOut("yield true.throw(this);");
tryItOut("while((window) && 0){{} }");
tryItOut("this.zzz.zzz;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in <y><z/></y>) ; }");
tryItOut("prototype = __count__;");
tryItOut("__proto__ = prototype;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(1e4.__parent__ in ({a2:z2})) {{}yield <x/>; }");
tryItOut("yield typeof <x><y/></x>.yoyo((|));");
tryItOut("while((undefined * ({a2:z2})--) && 0){export *;var __parent__, constructor = .2; }");
tryItOut("with(<y><z/></y>){\nfunction  __count__ (__noSuchMethod__, __parent__) { return  \"\"  } \n }");
tryItOut("__count__");
tryItOut("/*for..in*/M:for(__parent__ = --+this in ~prop.constructor = __count__) gc() const __iterator__;");
tryItOut("L: ");
tryItOut("{}\nreturn prop for (prop in [1]);");
tryItOut("prop\nif(<x/>) with({}){ } else  if ((@foo * window)) {/*infloop*/do {{} } while(__iterator__); }");
tryItOut("try { for(let y in []); } finally { throw StopIteration; } ");
tryItOut("with({__noSuchMethod__: {}})/*infloop*/while( '' ){gc()if(<><x><y/></x></>) \t; else  if (<x/>) {let constructor, constructor;return function(id) { return id }; } }return (this |= <x><y/></x>);");
tryItOut("/*for..in*/for(var do yield {__count__ = <><x><y/></x></>, prototype = *::*; }; while(([11,12,13,14].map) && 0); = this in ((__parent__.__iterator__.unwatch(\"__parent__\"))[(prototype = [,,])])) continue M;");
tryItOut("let (__parent__, __count__) { var prototype = 3.141592653589793; }");
tryItOut("/*infloop*/for(const __parent__ = (\n<y><z/></y> ? #3={a:#3#} | -3/0 : (<x><y/></x>)(*)); <y><z/></y>; __noSuchMethod__ = __count__.yoyo([11,12,13,14].some)) {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var (function (__iterator__, __proto__)prototype).apply.__parent__ in (yield ([[[1]]]).prototype)) with({__iterator__: false}){yield; /x/ , -3/0 }");
tryItOut("return @foo\n");
tryItOut("/*for..in*/for(var __count__.\t__proto__ in <><x><y/></x></> ||  '' ) {/*for..in*/for(let prop = this in this) yield <x><y/></x>;do {export __iterator__; } while(([15,16,17,18].sort(this.zzz.zzz, <x><y/></x>, <><x><y/></x></>)) && 0); }");
tryItOut("constructor = 0x99");
tryItOut("while(( /x/g ) && 0){export constructor; }");
tryItOut("/*for..in*/for(var __proto__.prototype in ((new Function)(this.__defineGetter__(\"__proto__\", ({}).__lookupGetter__)))){gc()return <x><y/></x>; }");
tryItOut("with({}) prop = ;");
tryItOut("const constructor, __noSuchMethod__ = 3\nL:if(let (constructor = this) <x/>) yield; else  if (*::*) {; }");
tryItOut("if(__count__) {\nwhile((#3={a:#3#}) && 0){yield;/*for..in*/for(const __noSuchMethod__ in (('haha'.split)(*::*)))*::*; }(<xxx>{prop}</xxx>.(constructor = null)).watch } else while((#0=[<x><y/></x>]) && 0)function (constructor) {  } ");
tryItOut("\rM:switch(new (prop = Math.sin)(__iterator__.(*), __parent__ <= 3/0)) { case 5: {yield; }if(<x/>.valueOf(\"number\")) { if (0/0.__proto__) {prototype;var __parent__ = ({a2:z2}); } else {{} }}break; /*for..in*/for(let prototype.prop in (({})( .(#1=({__count__: <><x><y/></x></> ? [z1,,] : <y><z/></y>}))))){{gc()let __parent__, constructor = @foo;/*for..in*/for(prototype in -3/0) throw this; } }default: break; case new ({}).hasOwnProperty(__count__.__noSuchMethod__, ): break;  }");
tryItOut("if( /x/g .* %= yield 0.1) {let (prototype = prototype) { gc()\nyield __parent__;\n } } else  if ((function  __count__ (prototype) { gc()\f } ())\f) {yield;gc() }");
tryItOut("/*for..in*/for([__parent__, __count__] = (eval(\"this\",  /x/ )) >= let (__proto__ = <x/>, prop) this in (((p={}, (p.z = <><x><y/></x></>)()))\n)) M:if(yield var __parent__, __parent__) {*::*;{} } else  if (Array((\n( /x/  ^  '' )))) { } else {export __parent__;yield  /x/ ; }");
tryItOut("if(({})) { if ((#1=[#1#] -= @foo)) {/*for..in*/L:for(const __count__ = new (<x><y/></x>)(window) in <><x><y/></x></>) yield; } else yield;}");
tryItOut("__parent__ = __parent__;");
tryItOut("do {var __parent__ = window = <x/>; } while((*::*.__defineSetter__(\"delete\", Function)) && 0);\f");
tryItOut("M:while((window) && 0)L: {let __parent__, __iterator__ = <><x><y/></x></>; }");
tryItOut("switch( '' ) { case 0: break; default: with(__proto__.((<><x><y/></x></>['prop'] = prototype = prototype))){continue L; }break;  }");
tryItOut("for(let y in []);");
tryItOut("{export constructor;(*::*); }");
tryItOut("if( /x/ ) { if (window) {gc()throw #3={a:#3#}; } else yield ({a1:1});}");
tryItOut("/*for..in*/for(const __noSuchMethod__ in ((gc)(<y><z/></y>))){throw *;const __count__ =  /x/ ; }");
tryItOut("do yield this; while((prototype) && 0);");
tryItOut("/*infloop*/for(let prop; [[1]]; <><x><y/></x></>) {;constructor; }");
tryItOut("if([__parent__]) {return; } else throw function ([y]) { };var __iterator__ = window;");
tryItOut("if( /x/ .propertyIsEnumerable(\"<><x><y/></x></>\")) export __iterator__; else ");
tryItOut("if(<x/>) throw <x><y/></x>;");
tryItOut("if(({}) = <x/>) {/*for..in*/for(__proto__.prototype in ( /x/ /*\n*/.yoyo(<><x><y/></x></>))) {return <x/>; }if(eval(<x/>, 4.)) M:with(<y><z/></y>)(*::*); else  if ([15,16,17,18].some(new Function, new <x><y/></x>(<y><z/></y>, #1#))[<><x><y/></x></> <= 0]) ; else [1,2,3,4].map } else  if ((constructor = ({ constructor: prop }))) {throw true; } else Math.pow");
tryItOut("/*infloop*/L:for(<bbb xmlns:ccc=\"<x><y/></x>.__defineSetter__(\"prototype\", true).__lookupSetter__(\"__parent__\")\"><ccc:eee></ccc:eee></bbb>.(((<y><z/></y>.isPrototypeOf(arguments))(prop = -3/0, true))); prototype; [eval(\"<><x><y/></x></>\", function(id) { return id })].some(function  prototype (__noSuchMethod__, __parent__)@foo)) (-0).__defineSetter__");
tryItOut("let(__noSuchMethod__, __proto__) { let(__proto__ = [1].propertyIsEnumerable(\"constructor\")) { with({}) { with({}) this.zzz.zzz; } ");
tryItOut("let __noSuchMethod__, __parent__\n([,]);");
tryItOut("*::*.constructor = constructor;");
tryItOut("M:if(constructor.valueOf(\"number\")) { if (#1=[#1#] ? #1# :  '' \n) {if((<x><y/></x>.__lookupSetter__(\"constructor\"))) { if (( /* Comment */constructor)) {constructor; }Function} else \tfunction  x::__iterator__ (yield) { {} } const constructor; const __iterator__; }} else do L:if(<><x><y/></x></>)  else  if (<y><z/></y>) export prop; while(([1,,] >>>=([1][__parent__])) && 0);");
tryItOut("{eval(\"return <><x><y/></x></>;\", null); } const constructor;");
tryItOut("/*infloop*/L:while(constructor){return;let __parent__ = __noSuchMethod__; }");
tryItOut("/*infloop*/for(<x><y/></x>; prop; *::*) {{} }");
tryItOut("/*for..in*/for(let prop = window in true) (<y><z/></y>);\n(* * this).__defineSetter__ const __count__;\n");
tryItOut("<x/>");
tryItOut("while(([[]]) && 0){break ;\t }");
tryItOut("/*for..in*/for(__parent__ in this) {export __proto__; }");
tryItOut("/*for..in*/for(let __iterator__ in (([1,2,3,4].slice)((((getter = __iterator__) for each (__proto__ in [,,]) for (__parent__ in @foo))))))yield [].map(Function); const __count__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in prop) {5 }");
tryItOut("do return this; while((prototype) && 0);");
tryItOut("/*infloop*/while(window){{}return; }");
tryItOut("break M;");
tryItOut("with({__parent__: <x><y/></x>})return;");
tryItOut("M:if(<bbb xmlns=\"([11,12,13,14].some)\"><employee id=\"1\"><name>Joe</name><age>20</age></employee><ccc:ddd>yyy</ccc:ddd></bbb>) {} else  if ([undefined.prototype].sort([1,2,3,4].map)) return;");
tryItOut("/*for..in*/L:for([({ __noSuchMethod__: [, __iterator__, prototype, ], prop: prop })] = *::* in ({a1:1})) const prototype = <x><y/></x>.isPrototypeOf(__parent__), __count__ = ;, false");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in [this].map((window).watch)) {/*infloop*/for(<><x><y/></x></>; <><x><y/></x></>; this) export *;throw <><x><y/></x></>; }");
tryItOut("{L: yield; }");
tryItOut("<><x><y/></x></>;");
tryItOut("{({}).hasOwnProperty }");
tryItOut("L: yield;");
tryItOut("L: {yield <y><z/></y>; }");
tryItOut("/*infloop*/while((__count__ = __count__)){do {{}undefined; } while((({a2:z2})) && 0);return; }");
tryItOut("if((-3/0 << __noSuchMethod__.isPrototypeOf([]))) { if ((<><xxx>{prototype}</xxx></>.eval((function::prop.prototype = \t-1)))) {/*for..in*/for(var __iterator__ = __parent__ = <><x><y/></x></> in  '' ) /*infloop*/do  while((@foo.@foo)); } else gc()}");
tryItOut("switch(<x><y/></x>.(false)) { case __parent__: break;  }");
tryItOut("{}");
tryItOut("(<x/>)");
tryItOut("/*infloop*/M:for(const prop; (<!--yy-->.yoyo(((prototype.__proto__ setter= gc) ? ({} instanceof <x><y/></x>) : (<x><y/></x>.((-0)))))); String(<><x><y/></x></> -= 3)) {var __noSuchMethod__ = this, __parent__ = <><x><y/></x></>; }");
tryItOut("do {/*for..in*/L:for(const @foo in constructor) return 1e+81;'haha'.split } while(((export __iterator__).__lookupSetter__(\"__count__\")) && 0);");
tryItOut("export __iterator__;");
tryItOut("/*for..in*/for(let [__count__, constructor] = yield  \"\"  in <x><y/></x>()) {const __proto__ = null, __noSuchMethod__ =  /x/g ; }");
tryItOut("/*infloop*/for(const __iterator__ = ({}); ((({\tprototype setter: (1 for (x in [])) }))); __proto__ = ({ __parent__: __iterator__, __proto__: prototype })) yield;\n for (__noSuchMethod__ in *::*)\n");
tryItOut("L: {return;return window; }");
tryItOut("__proto__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__.constructor in prototype = -1, __parent__ = __iterator__) {L: /*for..in*/for(__noSuchMethod__ = (<y><z/></y>++) in  /x/ ) gc() }");
tryItOut("break M");
tryItOut("do {{return; }throw constructor } while((Iterator()) && 0);");
tryItOut("if(({prototype: this.__defineGetter__(\"__proto__\", <x><y/></x> >> 1e-81)})) yield <x><y/></x>;");
tryItOut("{}");
tryItOut("if((__count__).valueOf(\"number\")) { if ( \"\" ) {return undefined;{propreturn; } } else { }}");
tryItOut("if(([3/0].map(function(id) { return id })).prototype) { if (@foo .@*:: <x><y/></x>) {({});#3={a:#3#}; } else {gc() }");
tryItOut("/*for..in*/L:for(var [prototype, __noSuchMethod__] = ({ constructor: __count__, __parent__: [({ prototype: ({ prototype: __count__, __proto__: prop }) }), (prop)(\t '' ), , __parent__, __noSuchMethod__] }) = this.zzz.zzz.([false].map((<x<y/</x>).__defineSetter__)(({set: <x><y/></x>}), undefined)) in  /* Comment */this.__defineGetter__(\"__proto__\", (1 for (x in [])))) {with({}) { let prototype = [,,z1], __proto__; } if(Function) { if (*::*) const __iterator__ = .2, __noSuchMethod__;} else var __parent__; }");
tryItOut("/*infloop*/while(constructor = prototype){while((undefined.isPrototypeOf(window)) && 0)continue ; }");
tryItOut("for(let y in []);");
tryItOut("; = prop;");
tryItOut("continue \n");
tryItOut("/*for..in*/L:for(let (*::*)( '' ) in eval(\"\", [,,z1] * window).hasOwnProperty(\"__proto__\")) __iterator__");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop = Object() in ((<><x><y/></x></>)(@foo) = /a/gi.eval(__proto__\f =  '' ))) {throw this;([[1]]).watch }");
tryItOut("/*infloop*/do ! while(0)");
tryItOut("if((eval(\"/*for..in*/for(const this.__proto__ in (function ([y]) { })()) let (__proto__ = null, __count__ = true) { return; }\", (p={}, (p.z = <y><z/></y>.__iterator__)()) .@x:: __parent__ - <x/>) ? yield false : new ((new Function(\"return;\")))())) { if ((__proto__.__noSuchMethod__ getter= function () { throw <y><z/></y>; }  <= (new window( '' , <><x><y/></x></>))//h\n)) M:\fdo yield arguments; while(((uneval(this))) && 0);} else {;/*for..in*/M:for(constructor = *::* in constructor|=<><x><y/></x></>) {{throw window; } } }");
tryItOut("yield;arguments.__noSuchMethod__\n");
tryItOut("/*for..in*/M:for(var ([1,2,3,4].map(x::prototype, <x/>))['__proto__']\t in ((Math.pow)(new Function()))){const __parent__ = 1e+81, constructor = *::*; }");
tryItOut("with({constructor: this.zzz.zzz}){; }");
tryItOut("let (prototype = __noSuchMethod__ * undefined, constructor = <x><y/></x>) { /*for..in*/for(var prop in this) const constructor, prop; }");
tryItOut("yield prop = *;");
tryItOut("/*for..in*/for(var __iterator__ in (function ([y]) { })()) { }{let prop = this, __count__; }");
tryItOut("yield (new (<><x><y/></x></>)());");
tryItOut("/*for..in*/for(prototype.__iterator__ in ((function  constructor (prototype) { throw Math.sin; } )(#1#.throw(<x/>) <<= new ((*).__defineSetter__)(window))))return\n");
tryItOut("while((( /* Comment */window).isPrototypeOf((<y><z/></y> instanceof  /x/ ))) && 0){;do {Math.sinFunction } while((constructor) && 0); } const constructor;");
tryItOut("/*infloop*/do {const __count__;yield <y><z/></y>; } while((prop = prop));");
tryItOut("{return __count__;; }\n");
tryItOut("/*infloop*/for(@foo; Exception(); new (prop)(({prototype: 3/0, __iterator__: window }), new Exception())) /*for..in*/for(var [constructor, constructor] = [,,] in <>__parent__</> + <y><z/></y>) gc()");
tryItOut("M:with({false: eval(\"yield;\", __noSuchMethod__)}){while((__noSuchMethod__) && 0){throw <x/>; }return <x/>; }");
tryItOut("with({}) for(let y in []);");
tryItOut("with({constructor: *})/*for..in*/for([__noSuchMethod__, constructor] = <y><z/></y> in [,,]) \f{yield; }");
tryItOut("return;");
tryItOut(" { yield function::__proto__ } ");
tryItOut("{}");
tryItOut("with(let (__proto__) prototype)return prototype;");
tryItOut("let (__proto__ = 5.0000000000000000000000, __iterator__ = prototype) { ; }");
tryItOut("if(({a2:z2}))  else  if (<><x><y/></x></>) {export __proto__; }");
tryItOut("L:if([[1]]) { if (<x><y/></x>) {; } else __iterator__;}");
tryItOut("{/*infloop*/do {let __iterator__ = @foo, __proto__ = 5.0000000000000000000000; } while(__iterator__); }");
tryItOut("let (__parent__) { /*infloop*/do throw {}; while(4.); }");
tryItOut("L:if((yield (__iterator__ = <x/>))) const __iterator__ = (null.__defineSetter__(\"__proto__\", function(q) { return q; })); else {\n }\n");
tryItOut("break ;throw this;");
tryItOut("M:while(((({__noSuchMethod__: <><x><y/></x></>}))) && 0){if( '' ) { if (<x><y/></x>) var prototype = window, prop = <x><y/></x>;} else {(prop); } }");
tryItOut("throw __parent__;");
tryItOut("M:with({__noSuchMethod__: ({ prop: __proto__ }) =  /x/g .propertyIsEnumerable(\"__parent__\")})return  /x/g 1e4 ;");
tryItOut("/*for..in*/for(const __noSuchMethod__ in null) <x/>;");
tryItOut("do {export __iterator__;yield <x><y/></x>; } while((this.__defineSetter__(\"__parent__\", ({}).__lookupGetter__)) && 0); const __iterator__;");
tryItOut("M:while((new undefined ^=  \"\" ()) && 0){var prop, constructor;if((window[<x/>])) /*infloop*/L:do {export *;return; } while(<x><\ty/></x>); }");
tryItOut("while(((function(y) { yield y; {}; yield y; }([1]).@*)) && 0){(this); }");
tryItOut("/*infloop*/for(__count__ = <><x><y/></x></>; undefined; 5.0000000000000000000000) gc()");
tryItOut("let(prop = (function (constructor)this.zzz.zzz)(this)) { with({}) let(constructor, __noSuchMethod__) { throw StopIteration;");
tryItOut("/*infloop*/M:for(let prototype; __proto__ = __iterator__; (1.2e3 >>= window.watch(\"__iterator__\", (1 for (x in []))))) L: ;");
tryItOut("{M:if((window for (__parent__ in window)).isPrototypeOf(eval(\"export __parent__;\", __noSuchMethod__))) {function(y) { yield y; export __proto__;; yield y; }var __parent__ = window, __noSuchMethod__ = *; } }");
tryItOut("let(prop) ((function(){getter = prototype;})());");
tryItOut("\tif(undefined) /*for..in*/for(const __proto__ = 3/0.__defineGetter__(\"__noSuchMethod__\", function  constructor (__noSuchMethod__)).@foo in <x><y/></x>.(this)) {yield;do (<><x><y/></x></>); while((<><x><y/></x></>) && 0); } else {{}/*for..in*/for(let [prop, __proto__] = ([0.1.__proto__].some(Math.sin)) in  /x/ ) {export *;yield <><x><y/></x></>;\f } }");
tryItOut("export __noSuchMethod__;let constructor = __count__;");
tryItOut("if(<x/>) { if \r(<x/>) {(<x/>);prototype; } else yield;}");
tryItOut(" /x/ ;");
tryItOut("/*infloop*/do {/*infloop*/L:do {prop(this); } while(((<><x><y/></x></> >= <y><z/></y>).throw(#2=({__count__:  /x/g }))));do {}\nlet prototype; while(((new (<><x><y/></x></>)(false, <x><y/>\f</x>)[(__count__)])) && 0); } while(x::function::prototype = ({ set constructor() { return this }  }));");
tryItOut("for(let y in []);");
tryItOut("if(4.) 1.3; else export __noSuchMethod__;");
tryItOut("/*infloop*//*\n*/M:for\f(var __noSuchMethod__; [[1]].watch(\"__noSuchMethod__\", 0.1); prop.__iterator__) let __proto__, __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let constructor in ({prop: @foo })) {M:if( '' ) {__noSuchMethod__ } else (<><x><y/></x></>) }");
tryItOut("throw StopIteration;");
tryItOut("let (__noSuchMethod__, __parent__) { return; }");
tryItOut("[1,2,3,4].slice{} const __count__;");
tryItOut("if(null) {(@foo); const __count__\n/*for..in*//* nogeckoex bug 349964 */ for  each(let __noSuchMethod__ in  /x/g ) {(*::*); } } else  if (gc) ( /x/ ).watch");
tryItOut("throw StopIteration;");
tryItOut("if([,](prop)) {<x><y/></x>; } else  if ((({}).__lookupGetter__)) {({});(null); } else {return;var constructor; }");
tryItOut("(false);var getter, __proto__;");
tryItOut("/*for..in*/L:for(let prototype in ~arguments) {throw 3.141592653589793;__iterator__ }");
tryItOut("/*for..in*/for(let [__iterator__, __proto__] = ([1,2,3,4].slice).call(1e-81, ).function::constructor in \nnew (function () { continue L; } )(3.141592653589793)) {return;yield [,,z1]; }");
tryItOut("with({}) { return; } ");
tryItOut("{yield }");
tryItOut("M:if(eval(\"let constructor = *, constructor;\", constructor)) {throw window;constructor; } else  if (prototype.__iterator__)  else (window);");
tryItOut("__iterator__ = constructor;");
tryItOut("/*infloop*/for(*; (p={}, (p.z =  /* Comment */<>constructor</>)()); new Function(((p={}, (p.z = *)())))) __proto__, __parent__ = <><x><y/></x></>;");
tryItOut("<!--");
tryItOut("L:if( for (x::prototype in *::*) for each (prop in __proto__).@foo) {#1# } else {let ({}).hasOwnProperty = false; }");
tryItOut("while(((p={}, (p.z = )())) && 0){/*for..in*/for(var [constructor, __noSuchMethod__, prop] =  \"\"  in __proto__) yield true;( \"\" ); }");
tryItOut("/*infloop*/while(__parent__){with({__parent__: window}){return <><x><y/></x></>;export *; }return;gc() }");
tryItOut("/*infloop*/while(this){; }");
tryItOut("if([11,12,13,14].map) {M:if(<x/>) { if (5.0000000000000000000000) export prototype;} else {{}export prop; }var @foo; } else  if ((uneval(1e4[constructor])).__noSuchMethod__ = [<y><z/></y> for each (prototype in  /x/ ) for ([,] in *::*) if (null)]) L: {return <x><y/></x>;yield; }");
tryItOut("if(this.__defineGetter__(\"getter\", ((new Function(\"0;\"))).apply).__lookupGetter__(\"__proto__\").__count__) {/*infloop*/while((({let: undefined })) == (<x><y/></x> >= *).watch(\"__count__\", gc)){yield; } } else  if ([,,].isPrototypeOf([1])) export prototype; else {}");
tryItOut("while((([(new (__parent__)(true)).propertyIsEnumerable(\"eval(\\\"{}\\\",  \\\"\\\" )\")])) && 0)/*for..in*/for([__proto__, prop] = yield (new (undefined.constructor)(*, <x><y/></x>\n)) in [,,] != [[1]]) ([1,,]);");
tryItOut("(<y><z/></y>)");
