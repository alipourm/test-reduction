
tryItOut("__parent__ = __count__;");
tryItOut("if(<y><z/></y>) { if ((undefined ? <><x><y/></x></> : __parent__)) yield 3/0; else if(null) { if (*::*) {const __parent__ = (function ([y]) { })(), __parent__; } else ( \"\" );}}");
tryItOut("do {with({__parent__: true})throw 0; } while((__proto__) && 0);");
tryItOut("{return @foo;return @foo\n__iterator__; }");
tryItOut("/*for..in*/for(const  = [((p={}, (p.z = (eval(\"-0\", *::*)))()))] in (__noSuchMethod__ = <x><y/></x>)) {}");
tryItOut("__count__ = __parent__;");
tryItOut("/*for..in*/for(__count__ = (/*\n*/prop for (__iterator__ in function(id) { return id })) in *::*) prototype");
tryItOut("if(((('fafafa'.replace(/a/g, (((new Function(\"__parent__ = <y><z/></y>, __iterator__ = @foo;\"))).call).call))).__defineSetter__).call((yield <y><z/></y>), ( /* Comment */<><x><y/></x></>))) yield @foo; else  if (({prototype: (<><x><y/></x></>.@foo)})) {/*infloop*/for(<><x><y/></x></>; [1,,]; *) {{} }yield window; } else yield  \"\" ;");
tryItOut("with(__parent__ = 0.1){export *;do {return; } while((@foo) && 0);if(0.1) { if ((!__proto__)) ;} else {break ; } }");
tryItOut("with((__parent__ /= <><x><y/></x></>)){throw 0x99; }\nwhile((this.__defineSetter__(\"__count__\", function  __count__ () { return <x><y/></x> } )) && 0)\n");
tryItOut("if('fafafa'.replace(/a/g, /a/gi)++) {if(new new Array(@foo, this)()) export __proto__; }");
tryItOut("L:switch(__iterator__.prototype) { case 7: /*for..in*/for(var __count__.__count__ in true) {#1#;break L; }break; throw *;gc()break; /*infloop*/for(const __proto__; prop; __noSuchMethod__) gc()break M; }");
tryItOut("{{}export constructor; }");
tryItOut("return;");
tryItOut("__noSuchMethod__ = __proto__;");
tryItOut("L:if((__count__ =  /x/g )) /*infloop*/L:for(var __noSuchMethod__; false; __count__) <y><z/></y>; else  if ([] = null.yoyo( \"\" )) *;");
tryItOut("this.zzz.zzz");
tryItOut(";");
tryItOut("if((prop =  /x/ )) this; else  if (({__proto__: 3/0\r })) {yield; }");
tryItOut("/*for..in*/for(var [each, __proto__] = [prop] = <><x><y/></x></> >= prototype in ((/a/gi)(<x><y/></x>, undefined))) ;*::*;");
tryItOut("do throw <x><y/></x>; while(((({__proto__: (__parent__ = window), __iterator__: [11,12,13,14].filter }))) && 0);");
tryItOut("let(__parent__) ((function(){false})());");
tryItOut("/*for..in*/for(var __parent__ in .watch(\"prop\", ({}).hasOwnProperty)) {break ; }");
tryItOut("let [, __noSuchMethod__, , __count__, __count__] = (__iterator__ = 1e81), function::__iterator__ = <x><y/></x>;");
tryItOut("{(((new Function(\"let __count__;\"))).call).applylet (prop, prop = <y><z/></y>) { {} } }");
tryItOut("{<x><y/></x>;(({})); }");
tryItOut("if(<x/>[prop = __count__]) { if ((__proto__ = __proto__)) break ; else export prop;}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __iterator__ in ((function  __noSuchMethod__ (yield, window) { return false } ((function ([y]) { })(), 4.)).__proto__ = this.__defineSetter__(\"__count__\", function () { return ({a2:z2}) } ))) {export __proto__; }");
tryItOut("with({__noSuchMethod__: yield arguments})yield;");
tryItOut("do M:if( /x/g  = undefined) {return;<x><y/></x>; } while((((__proto__.__parent__ getter= gc).valueOf(\"number\"))) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let (__proto__) in  /x/g ) {{} }");
tryItOut("throw this;");
tryItOut("if(!delete {}) ; else  /x/ ;");
tryItOut("return window;\n/*for..in*/for([__parent__, __noSuchMethod__] = x::__count__.prop in let prototype) gc() const __proto__;\n");
tryItOut("/*for..in*/for(let __parent__ = ([].eval(constructor)) in <><x><y/></x></>.__defineSetter__(\"__count__\", 'haha'.split)) {return <x/>; }");
tryItOut("if((void window.@foo)) { if ( /* Comment */( \"\" )) {try { continue M; } catch(__proto__ if null) { return; } finally { let __iterator__ = <x><y/></x>; }  }} else {L:if(Function()) { if (this.__defineSetter__(\"prototype\", Math.pow)) [,,]; else {yield  /x/ ; }} }");
tryItOut("with(<employee id=\"1\"><name>Joe</name><age>20</age></employee>.((<x><y/></x>.(@foo)))++)return 033\n\nconst __proto__ = #1=[#1#];");
tryItOut("while((<><x><y/></x></>) && 0)");
tryItOut("/*infloop*/while(this){(<x/>);yield <x><y/></x>; }");
tryItOut("throw StopIteration;");
tryItOut("/*for..in*/M:for(let this in ((Function)(prop = prototype))){return; }");
tryItOut("/*for..in*/for(const [constructor, __iterator__] = <employee id=\"1\"><name>Joe</name><age>20</age></employee> in __iterator__) ");
tryItOut("{L: return <y><z/></y>;yield; }");
tryItOut("M:if(function::prototype = 1e4 && __iterator__ = 4.) let (__proto__ =  /x/ , __count__) {  } else /*infloop*/for((<x><y/></x> for (__noSuchMethod__ in <x/>)); ({ constructor: constructor }) = <x><y/></x>.throw(window); *.valueOf(\"number\")) {throw @foo;export *; }");
tryItOut("prop = function::prototype;");
tryItOut("L: {window;(<x><y/></x>); }");
tryItOut("/*infloop*/M:for(var __parent__; Function(<x><y/></x>, @foo); constructor) export prop;");
tryItOut("{}");
tryItOut("/*infloop*/for((__iterator__ = null).*; <><{function::constructor}>yyy</{function::constructor}></>; -1) with({constructor: <y><z/></y>}){throw false;yield; }");
tryItOut("export __parent__;");
tryItOut("if('haha'.split) {;(__noSuchMethod__); } else  if (-3/0) {function(q) { return q; } }");
tryItOut("switch('fafafa'.replace(/a/g, [1,2,3,4].slice)) { case 1: /*infloop*/for(<x><y/></x> ^= <x><y/></x>; .2\n; \t0x99) 1e+81\n\nbreak; case (prop = __proto__).__lookupSetter__(\"__iterator__\"): break; default: /*infloop*/while(return)export *; }");
tryItOut("return <x/>;");
tryItOut("L: { \"\" ;; }");
tryItOut("switch(({ set prop(prototype, __proto__)@foo, __parent__: return @foo; })) { default: /*infloop*/L:for(this; <><x><y/></x></>; this) ;break; break; case 7: /*infloop*/for(const prop; #1=[#1#]; @foo) {throw  /x/g ; }\nbreak; case 4: throw @foo;case 1: /*for..in*//* nogeckoex bug 349964 */ for  each(const (<x/>)(<><x><y/></x></>) in arguments) yield;break;  }");
tryItOut("do  while(((__count__.\t__parent__)) && 0);");
tryItOut("case 4: export *;break; export __proto__;");
tryItOut("if(@foo) {/*infloop*/L:while(false){window } }");
tryItOut("return this.__defineGetter__(\"__iterator__\", /a/gi);");
tryItOut(";\nthrow [[1]];\n");
tryItOut("if(__iterator__) { if ( '' ) {continue ;*::*; }} else throw __count__;");
tryItOut("if([<x><y/></x>].filter(0.1)) {return; } else gc()");
tryItOut("/*for..in*/for(let __count__ = <bbb xmlns:ccc=\"constructor = 5.0000000000000000000000\"><ccc:eee></ccc:eee></bbb> in <x>__proto__ <y/></x &= <y><z/></y>) let __iterator__ = <><x><y/></x></>;");
tryItOut("");
tryItOut("if(window <<= 1e+81\n %= ([11,12,13,14].filter)) {M:if(null.__noSuchMethod__) {yield this; } else  if (<y><z/></y> + -1) {yield;var __parent__ = <x><y/></x>, prototype; }; }");
tryItOut("{let constructor;({}).hasOwnProperty }");
tryItOut("");
tryItOut("const prop, __proto__\nexport constructor;");
tryItOut("\nconst __noSuchMethod__ = <><x><y/></x></>;");
tryItOut("while((<x/>.eval(3/0)) && 0){gc()return ({}); }");
tryItOut("if(__proto__ =  '' ) { if (((<><\tx><y/></x></> for each (__noSuchMethod__ in prototype)))) } else return;");
tryItOut("switch((function  prop (__noSuchMethod__, __parent__) { export *; } ).apply) { case 4: break; default: if(prop = function (({ prototype: __iterator__, __proto__: __noSuchMethod__ })) { yield true.constructor } (@foo || null.__lookupSetter__(\"__proto__\"))) /*for..in*/for(var [__noSuchMethod__, __proto__] = * in 3/0) {yield; } else {return; }break; case ((<x/> | __noSuchMethod__).eval(prop;)): break; yield;case ([<x><y/></x>]): break; if(@foo\f) ; else {prop;throw null; }break; break;  }");
tryItOut("/*for..in*/for(var [constructor, delete] = new function  constructor () { yield <x/>; } ().__lookupGetter__(\"[]\") in <x><y/></x>) /*for..in*/for(const __proto__ in @foo) {yield;constructor; }");
tryItOut("export *::*;");
tryItOut("var __parent__ = @foo, __iterator__ = this;\n/a/gi\n");
tryItOut("(<x><y/></x>); const __noSuchMethod__\n");
tryItOut("L:with(void undefined){yield <><x><y/></x></>; }");
tryItOut("/*for..in*/for(let prop in <x><y/></x>) gc()");
tryItOut("/*infloop*/M:do {;export *; } while([1,,]);");
tryItOut("/*for..in*/for(const [__parent__, prop] = window in (function(y) { yield y; ; yield y; })) {let __noSuchMethod__ = 3, __iterator__ = constructor; }");
tryItOut("/*infloop*/for(const __count__ = for(let y in []);; <x><y/></x> ^ prototype = <x/>\n; (\n<x/>).constructor) L:if(window) { if ( '' ) {return; }} else {return; }");
tryItOut("return;");
tryItOut("while((__count__.__noSuchMethod__ getter= (1 for (x in []))) && 0)const <y><z/></y> = constructor;");
tryItOut("/*for..in*/for(const [prop, __noSuchMethod__] = ({ __proto__: __parent__, constructor: __count__ }) = ({constructor: true }) in undefined) {if(1.2e3) {}yield; }");
tryItOut("/*infloop*/while(1e+81)function(q) { return q; }");
tryItOut("with({__iterator__: this.__defineSetter__(\"__parent__\", new Function) , @foo.valueOf(\"number\")})/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in 033) ;");
tryItOut("for(let y in []);");
tryItOut("export *; const __iterator__;");
tryItOut("/*for..in*/for(constructor = undefined in [,,z1] == ({})) {export *; }");
tryItOut("/*infloop*/while(__iterator__){var __noSuchMethod__, __noSuchMethod__ = [1,,]; }");
tryItOut("/*infloop*/for(; <><x><y/>//h\n</x></>.@*; /*\n*/ '' ) {return;__noSuchMethod__; }\n");
tryItOut("this.zzz.zzz;");
tryItOut("if(<><x><y/></x></>.eval( /x/ ).constructor = <x/>()) {throw (<y><z/></y>)[<x><y/></x>];break ; } else export __count__;");
tryItOut("with(#1=[#1#]);");
tryItOut("/*for..in*/for(let __proto__ = /a/gi in true) ");
tryItOut("/*for..in*/L:for(constructor.__parent__ in (((null).watch)((__proto__.__iterator__ = ((-0))[#1=[#1#]])))){if() { if (({constructor: eval(\"break M;\", [[]])})) /*infloop*/for(1e-81; <><x><y/></x></>; this) __proto__, __proto__ = this;} else {yield; }gc() }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in null) gc() const __noSuchMethod__;");
tryItOut("yield new Date();");
tryItOut("L: /*infloop*/while(arguments)export *;");
tryItOut("/*for..in*/for(prop in -3/0 !== window) /*infloop*/while(function ([y]) { } &= <x><y/></x>){export *;<y><z/></y>; }");
tryItOut("L: {{throw window; } }");
tryItOut("L:\tif(<x/>) {return; } else let constructor = *::*, prototype = <><x><y/></x></>;");
tryItOut("L:if(eval(\"/*for..in*/for([__count__, __iterator__] = <xxx>{__proto__}</xxx>.(*::* ? <x/> : __proto__) in [undefined]) export *;\", (let (constructor = <><x><y/></x></>) window :: [({})].sort([1,2,3,4].map)))) { if (((new ([,,z1])(*)) /= new true && <x><y/></x>(<><x><y/></x></>))) constructor else /*infloop*/for(prop; <x><y/></x>; <><x><y/></x\f></>) {return <><x><y/></x></>;return <x><y/></x>; }}");
tryItOut("const constructor = (<x><y/></x> .. constructor);\n/*for..in*//* nogeckoex bug 349964 */ for  each([__proto__, __iterator__, , __iterator__, ] in (prop['__noSuchMethod__'] = false.__defineSetter__(\"__iterator__\", function (constructor, constructor)<><x><y/></x></>))) {{}{} }\n");
tryItOut("/*infloop*/do /*infloop*/for(var __noSuchMethod__;  /* Comment */this.zzz.zzz.__lookupGetter__(\"prop\"); __parent__) {} while(((uneval((yield (p={}, (p.z = <x><y/></x>)()))))));");
tryItOut("/*for..in*/for([prop, x::__proto__] = prototype in <><x><y/></x></>) Math.sin");
tryItOut("switch(*) { default: case undefined: break;  }return;");
tryItOut("{const constructor =  \"\" , __iterator__ = window;\n;\nyield  /x/g ; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 *///h\n for  each((window.__noSuchMethod__)(prototype = (({ get __iterator__()<y><z/></y>,  set __count__(__count__, prop) { export *; }  }))) in (__count__.throw({}))) {export __parent__; }");
tryItOut("L:if((eval(\"(true);\", <y><z/></y>))) { if ((function (constructor)<x><y/></x>).call(<><bbb xmlns=\"this\"><x><y/></x> </bbb></>, )) var __proto__, __count__ = [z1];} else {var __parent__, __proto__ = @foo;throw <x/>; }\nreturn;");
tryItOut("if(<x/>) {let __proto__; }");
tryItOut("L: {if( /x/g ) return <x><y/></x>; else return;L:while((<x/>) && 0)export *; }");
tryItOut("__proto__ = __noSuchMethod__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(({ prototype: <x><y/></x> }) in __iterator__.__iterator__ getter= [1,2,3,4].map) yield;");
tryItOut("M:if(<><><!--yy--></></>) { if ( /* Comment */*.prop = ({__count__: __count__ = <x><y/></x> })) yield; else ;\nexport __noSuchMethod__;\n}throw __count__");
tryItOut("/*infloop*/M:for(var prop; (__noSuchMethod__ = __noSuchMethod__ <=  /x/g .__parent__)( { yield <x/> } .*); (({ get prop()new ('haha'.split)(true, 1e4).yoyo(prop.__noSuchMethod__ = <x><y/></x>) ? ({ constructor: __noSuchMethod__, prop: __parent__ }) = (uneval(true)) : ({prop: undefined}) }))) {export __count__; }");
tryItOut("\f<x/>\n");
tryItOut("/*infloop*/for(const __parent__; (let (__noSuchMethod__, __count__) (RegExp((-1).*, __parent__)).watch(\"__proto__\", let (prototype = *, prototype = <y><z/></y>) *)); (yield <!--yy-->)) for(let y in []);");
tryItOut("/*infloop*/for(const prototype; <y><z/></y> <= [1]; __iterator__.__lookupSetter__(\"prop\")) prototype = this;");
tryItOut("if((({yield getter: function(q) { return q; } }))--) /*infloop*/while(__parent__.__noSuchMethod__ setter= 'haha'.split)gc() else var prop; const __iterator__;");
tryItOut("this");
tryItOut("let(x::constructor, __proto__ = (.2.propertyIsEnumerable(\"__iterator__\"))) ((function(){__parent__ = prop;})());");
tryItOut("M:if(<><zzz>(new <y><z/></y>(<><x><y/></x></>, <x><y/></x>))</zzz></>) { if (yield;.isPrototypeOf(([,,z1]))) {prop =  /x/g ;throw @foo; } else {gc() }}");
tryItOut("switch((([11,12,13,14].map ? (let (constructor) true) : true ? <><x><y/></x></> : <x><y/></x>) || (eval(\"export *;\",  /x/g ) |= 3.141592653589793))) { case 3.watch(\"__proto__\", function(y) { yield y; ;; yield y; }): L:while((<x/>) && 0){return; } }");
tryItOut("this.zzz.zzz;");
tryItOut("return <y><z/></y>['__count__'/ = __parent__ ?  '' -- : window.__defineGetter__(\"prop\", (new Function(\"gc()\")))\n;");
tryItOut("/*for..in*/for(var continue ; in [,]) {return; }");
tryItOut("/*for..in*/for(var [constructor, prop] = __noSuchMethod__ = undefined in @foo) export prop;");
tryItOut("this.zzz.zzz;");
tryItOut("{/*for..in*/for(const prop in  \"\" ) {0;export *; } }");
tryItOut("if((new (<x><y/></x>)())((({}).throw(__count__))).@*) { if ((prop.__iterator__ = undefined)) {M:if(prototype.constructor = true) { if (<><x><y/></x></> * undefined) {prototype = arguments, function::__count__;(<x/>); }} else {( /x/g );export prop; } }} else ");
tryItOut("/*infloop*/M:do {L:  } while( /x/ );");
tryItOut("let(({ __count__: ({ prototype: prototype }) }) = __parent__ = [,,]) { for(let y in [5,6,7,8]) with({}) { continue L; } ");
tryItOut("constructor");
tryItOut("L:do {(({a2:z2}));yield -0; } while((function ([y]) { }) && 0);");
tryItOut("({ ((yield this.__defineGetter__(\"*::*\", function (prototype) { return ((uneval(*::*))) } ))): ({ __parent__: ({ __parent__: ({ __noSuchMethod__: [, ({ __iterator__: [, [, , ({ prototype: __count__, __proto__: __count__ })]] }), __proto__, ({ prototype: __noSuchMethod__ })] }), __noSuchMethod__: ({ __noSuchMethod__: [], __iterator__: ({ __iterator__: __parent__ }) }) }), prototype: __count__ }) })");
tryItOut("null;");
tryItOut("try { let(({ __noSuchMethod__: __count__, __noSuchMethod__: prototype }) = (<y><z/></y> ? [z1] : setter)) { let(__proto__, __proto__ = 5.0000000000000000000000) ((function(){let __parent__ = [], __count__ = prop;})()); } catch(__iterator__) { for(let y in []); } finally { return ({ __proto__: __parent__, __proto__: constructor })\t = 1e-81; } ");
tryItOut("throw constructor;");
tryItOut("/*infloop*/for(<{constructor}><!--yy--></{constructor}>.(((yield <x><y/></x>))); (function::<><x><y/></x></>['constructor'] = (true += 1e-81).isPrototypeOf((p={}, (p.z = [z1,,])()))); (new <><x><y/></x></>().__proto__ = [0.1 .@*:: (-1)].sort(function ([y]) { }))) {}");
tryItOut("/*for..in*/\ffor(let ((({ set prototype __noSuchMethod__ (constructor)String(<x/>.__lookupSetter__(\"constructor\"), false) })))(([[1]] /= @foo))['prototype'] in (#2=({constructor:  \"\" }))) let (prop, constructor = null) { yield; }");
tryItOut("L:do {var constructor = <x><y/></x>, __noSuchMethod__;return; } while(((<x/>.yoyo(4.)).hasOwnProperty(\"__count__\")) && 0);");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(constructor in #2=({__proto__: this})) export constructor;");
tryItOut("null;");
tryItOut("/*for..in*/M:for([__proto__, prop] = eval(\"if(<x><y/></x>) {throw -3/0;let __proto__ = 0/0; } else {return <><x><y/></x></>; }\", false) in -3/0) ");
tryItOut("__noSuchMethod__");
tryItOut("throw ((({constructor: true})).__lookupGetter__(\"__parent__\"));");
tryItOut("M:switch(prop.(([null if (false)])) & this) { default: return;break; case __noSuchMethod__.((<><x>\t<y/><\t/x></> for (__iterator__ in <><x><y/></x></>))): break; case (<x><y/></x>.__count__) | ([15,16,17,18].sort( \"\" , (prop.*))): throw <x><y/></x>;\nvar prototype = window, prop = <y><z/></y>;\n\n{switch(1.2e3) { case <y><z/></y>: return *::*;break; export *;break;  }undefined; }\fbreak; this; }");
tryItOut("gc() const __iterator__;");
tryItOut("let([prop, prototype, , this, __parent__] = (prototype = @foo), __noSuchMethod__) { with({}) throw <x><y/></x>;");
tryItOut("return;");
tryItOut("{gc()throw <><x><y/></x></>; } const __proto__;");
tryItOut("{/*for..in*/for(const 1e4 in (((new Function(\"return;\")))(__count__.(-0)))){return (-0); }if(#1=()) { if (false) export *;} else const __noSuchMethod__ =  \"\" , __count__ = prop; }");
tryItOut("if(__noSuchMethod__ = <><x><y/></x></>) return; else continue L;");
tryItOut("L: {export __iterator__;{} }");
tryItOut("with()  ");
tryItOut("{true;/*for..in*/L:for(var __count__ in ((/a/gi)(<x/>)))__iterator__, __parent__ = *::*; }");
tryItOut("let (__noSuchMethod__) { export *; }");
tryItOut("if() {M:if((window %= <><x><y/></x></>)) { if ((typeof __noSuchMethod__)) constructor = *::* else }export __iterator__; } else {return; }");
tryItOut("/*infloop*/for(const __count__ = ( /x/g [this]); ++<x><y/></x>; undefined.__parent__) {export *\nthrow this; }");
tryItOut("if(1e+81) { if (<y><z/></y>) {{} } else {/*for..in*/M:for(var function::__iterator__ = (({prototype: 0/0, __proto__: <><x><y/></x></> })) in <><x><y/></x></>) break M; }}");
tryItOut("/*infloop*/for((eval(\"const prototype;\", -1)); ((gc)(\t)); ({}).__lookupGetter__((window.__defineSetter__(\"__parent__\", true))).throw(((\nwindow ^= <x/>)\n))) /*infloop*/while(([11,12,13,14].some))return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in prop) return;\f");
tryItOut("with({prototype: ((__noSuchMethod__+=<!--yy-->) = ((new Function(\"export prop;\")))(<><x><y/></x></>, {}))()}){L:with(eval(\"__parent__\", false)){yield;if(<x><y/></x>) { if (<x/>) continue ; else break ;} } }");
tryItOut("/*infloop*/while(eval(\"[z1,,]\", ({a2:z2})).constructor){let((prop), prototype) { return; }");
tryItOut("/*infloop*/for(let constructor = (new Boolean((('haha'.split)(<><x><y/></x></>)), ( /x/ .__proto__))); new Number(<x><y/></x>); [3.141592653589793]) /*infloop*/L:for((\f{ @foo: x::prototype }) = prop; (<><x><y/></x></>); (new ([,,])())) {constructor = <x><y/></x>; }");
tryItOut("M:with({prop: new Function})break ;");
tryItOut("{; }");
tryItOut("with({function::__iterator__: yield  /* Comment */true in __count__}){/*infloop*/for(var prototype; ((<><x><y/></x></> for (prototype in <><x><y/></x></>)) for (prototype in <><x><y/></x></>)).\f__parent__; __parent__.isPrototypeOf( /x/ ).eval((yield (-1)))) with(\fwindow.throw(<x/>)){const each = <x><y/></x>, __noSuchMethod__ = true; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in (p={}, (p.z = [].__lookupSetter__(\"__count__\"))())[this.__lookupSetter__(\"__iterator__\").__lookupGetter__(\"__noSuchMethod__\")]) if(<x><y/></x> :: window) { if () {throw *::*; }} else {var __noSuchMethod__, __count__ = <x/>; }");
tryItOut("do {return;\ngc()\n } while(((uneval((this.constructor.valueOf(\"number\"))))) && 0);");
tryItOut("const prototype, __count__ = __count__;");
tryItOut("if(let (__count__ =  ''  += __iterator__) [15,16,17,18].map((false).watch, *::*).prop) {export __parent__;const prototype, __count__; } else yield <><x><y/></x></>;");
tryItOut("/*for..in*/for(var __count__.__noSuchMethod__ in ((prop = 1e+81) for each (constructor in <x><y/></x>) if (033))) {__count__: <><x><y/></x></>gc() }");
tryItOut("/*infloop*/for(new (window)(); (undefined >= (__noSuchMethod__.__noSuchMethod__\t setter= [1,2,3,4].slice)); (null.unwatch(\"prop\"))) {Math.sinthrow *; }");
tryItOut("/*for..in*/for(prop in  \"\" ) yield;");
tryItOut("throw __count__;");
tryItOut("if(([z1].constructor)) { } else  if (\f(<x><y/></x> > <><x><y/></x></>) < --#3={a:#3#}) return; else {export *; }");
tryItOut("{throw window; }");
tryItOut("if( /* Comment */*::*) { if (window !== @foo) {(<y><z/></y>);return window; }} else {(<x/>); }\nexport *;\n[1,2,3,4].slice\n");
tryItOut("return __iterator__;");
tryItOut("let((__parent__), __proto__ = <x><y/></x>.(<x/>)) { try { with({}) { yield; }  } catch(__noSuchMethod__ if (function(){with({}) { var prop, constructor; } })()) { prop } \ffinally { let( { return <><x><y/></x></> } ) ((function(){let __noSuchMethod__;})()); }  = __noSuchMethod__//h\n;");
tryItOut("let(prototype =  \"\" , __iterator__) ((function(){with({}) { yield false.__lookupGetter__(\"__count__\"); } })());");
tryItOut("if(new (({}).__lookupGetter__)(<><x><y/></x></>, <x/>)) {export *;(<x><y/></x>); }");
tryItOut("with(#2=({constructor: [,,z1]['__iterator__'] = this.zzz.zzz})){function::__proto__ = [,]; }while(( /x/ ) && 0)return  \"\" ;");
tryItOut("/*infloop*/L:for(var prop = eval(\"0\", []).__defineSetter__(\"prop\", /a/gi); window; this.__defineSetter__(\"prop\", (1 for (x in [])))) return <><x><y/></x></>.watch(\"__count__\", new Function);");
tryItOut("/*for..in*/for(let constructor in @foo) let prototype = prototype;");
tryItOut("M:if(({prototype: [[]], constructor: this }).__proto__.unwatch(\"__parent__\")) /*for..in*/L:for(let [prop, __iterator__] = 3.141592653589793 in <x><y/></x>) {yield <y><z/></y>; } else { }");
tryItOut("/*for..in*/for(let constructor in Object(3/0)) throw prototype; const __iterator__;");
tryItOut("/*infloop*/while(<><x><y/></x></> -= null){throw StopIteration;/*for..in*//* nogeckoex bug 349964 */M: for  each(constructor in -3/0) {export __noSuchMethod__;const __parent__ = *::*; } }");
tryItOut("M:if((new this.__defineGetter__(\"constructor\", (('fafafa'.replace(/a/g, ((.2).__defineSetter__).apply))).__defineSetter__)((({__count__: #1=[#1#],  set prototype __count__ (__noSuchMethod__, __iterator__) { return try { yield  /x/ ; } catch(prop if (function(){{}})()) { yield __noSuchMethod__; } catch(__noSuchMethod__ if 1.2e3) { yield; } catch(__proto__<x><y/></x>) {  <x/> return true; } catch(prototype) { (<><x><y/></x></>); } finally { __noSuchMethod__ }  }  })), --__iterator__++))) { if ((<x><y/></x>.@*)) /*infloop*/for(let constructor; <x/>; <x/>) null;} else [1,2,3,4].map\n");
tryItOut("/*for..in*/for(var [prop, __count__] = -null in (#1=({__proto__: (__proto__) = __proto__[ \"\" ]}))) L: return <><x><y/></x></>;");
tryItOut("while((__parent__) && 0)return;");
tryItOut("if(3.propertyIsEnumerable(\"__parent__\").__lookupSetter__(\"prop\")) {} else {yield __iterator__ = this; }");
tryItOut("/*infloop*/L:for(var __iterator__ = <><x><y/></x></>; @foo; [1]) {export prototype; }");
tryItOut("/*infloop*/do {export *\nbreak ;let __proto__; } while(true);");
tryItOut("with({__noSuchMethod__: [15,16,17,18].some(<><x><y/></x></>.__noSuchMethod__, @foo.__count__)}){gc() }");
tryItOut("/*infloop*/do yield 0/0; while( \"\"  if (<y><z/></y>));");
tryItOut("/*for..in*/for(const prototype = #1# in  '' ) {return undefined;var __iterator__ = <><x><y/></x></>, __proto__ = <x><y/></x>; }");
tryItOut("(Function)()");
