tryItOut("this.zzz.zzz;");
tryItOut("{{}if(__count__ = <y><z/></y>) {return; } else  if ((<><x><y/></x></>.__count__)) {yield *::*;{} } else {yield;const __parent__ = @foo; } }");
tryItOut("/*infloop*/for(var constructor;  /x/ .__defineGetter__(\"__iterator__\", <bbb xmlns:ccc=\"[11,12,13,14].sort\"><ccc:eee></ccc:eee></bbb>); (let (__noSuchMethod__, __noSuchMethod__ = <x/>) 3.141592653589793)) ({ __parent__: [] }) = prop;");
tryItOut("yield;");
tryItOut("if([[]]) (<><x><y/></x></>); else <x><y/></x>;");
tryItOut("[1] += <y><z/></y>");
tryItOut("let (__noSuchMethod__, constructor) { export *; }");
tryItOut("if(this) (1e81); else  if ( /x/ ) ;");
tryItOut("/*for..in*/M:for(var constructor in (undefined :: ({}))) var __iterator__ = undefined;");
tryItOut("{/*for..in*//* nogeckoex bug 349964 */ for  each(var prototype.__proto__ in @foo) __parent__, prop;switch(<bbb xmlns=\"<x><y/></x>\"> </bbb>.(({ get constructor constructor () { return <x/> }  }))) { case 3: export __proto__; } }");
tryItOut("while(((((window).__defineSetter__)(<><x><y/></x></>))) && 0){5.0000000000000000000000; }");
tryItOut("/*infloop*/for(\t({ __noSuchMethod__: /*\n*/__parent__, constructor: [prototype] }) = <><x><y/></x></> >=  /x/g  ? x::__noSuchMethod__ = this : (((1 for (x in [])))()); new RegExp([,,z1]); (\n-1--)) {gc()\nvar __count__, __proto__; }");
tryItOut("if(({prototype: <x/>})) (undefined); else  if ((true *= null)) {__parent__;throw <x><y/></x>; } else {yield;return <x/>; }");
tryItOut("((function(id) { return id })(__proto__, <x/>))\nreturn;");
tryItOut("throw ({}) = null.__lookupSetter__(\"prototype\");");
tryItOut("/*infloop*/do gc() while(++__proto__ + yield __proto__ = window);");
tryItOut("if(window.isPrototypeOf([,,z1])) { if (<><x><y/></x></>.__parent__ = __iterator__ ? 'fafafa'.replace(/a/g,  \"\" ) : yield true.__lookupGetter__(\"__parent__\")) return <><x><y/></x></>;} else {gc() }");
tryItOut("with((<x><y/></x> > [[1]] & __parent__ = null.__lookupSetter__(\"__parent__\")))/*infloop*/do {/*for..in*/for(const __iterator__ in <y><z/></y>) {export __parent__; }/*infloop*/for(const __noSuchMethod__; 1e81; <x><y/></x>) __parent__\n } while((new  /x/ .valueOf(\"number\")));");
tryItOut("/*infloop*/while(this -= <><x><y/></x></>.hasOwnProperty(\"prototype\")){/*for..in*/L:for([__iterator__, __parent__] = this.__defineGetter__(\"prop\", (new Function(\"prototype;\"))) in ({__proto__: *})) {throw <><x><y/></x></>;return false; }return yyy; }");
tryItOut("with({__proto__: <y><z/></y>})throw <y><z/></y>;");
tryItOut("with({__parent__: prop = @foo}){yield <x><y/></x>; }");
tryItOut("L:if([<x><y/></x>]) { if ((( /x/ ).call(<><x><y/></x></> >= <><x><y\t/></x></>, (false === <x><y/></x>)))) {return [[]];yield; }} else continue ;");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, Function))throw ({let __proto__, constructor = <y><z/></y>;return <><x><y/></x></>; }).__defineGetter__(\"constructor\", Function);");
tryItOut("for(let y in [5,6,7,8]) return *::*;");
tryItOut("if(#1=(*::*)()) (<x><y/></x>); else  if ((<x><y/></x>)(\f__proto__ = function::__parent__, (function ([y]) { })())) return;");
tryItOut("let(__parent__, __proto__) ((function(){return <x><y/></x>;})());L:do this.zzz.zzz; while((__parent__ = 1e+81.\rpropertyIsEnumerable(\"prototype\")) && 0);");
tryItOut("let (prop, prop = #1#) { {} }");
tryItOut("prototype = constructor");
tryItOut("with( /x/ )gc()");
tryItOut("M:switch(-1) { case ({__iterator__: <x/>.throw(__parent__)}):  }");
tryItOut("/*for..in*/L:for(const [constructor, __proto__] = (constructor > __count__) === (<x><y/></x> <=  '' ) in #3={a:#3#}) gc()");
tryItOut("if([,,z1]) return __iterator__; else {}");
tryItOut("return;\n(<><x><y/></x></>);\n");
tryItOut("with({__parent__: (this.__defineGetter__(\"__parent__\", (function ()window).apply))})return;");
tryItOut("with(1e+81.throw(function(id) { return id }) <<= __count__){return <x><y/></x>; }");
tryItOut("do {return constructor; }\t while(( /x/ ) && 0);");
tryItOut("L:if( /* Comment */<x><y/><\n/x>) { if ((*::* / __parent__)) {Math.pow; }} else ;");
tryItOut("if(({prop getter: [1,2,3,4].map })) { if ((__noSuchMethod__ = constructor)) {prototypegc() }} else throw __proto__;");
tryItOut("for(let y in [5,6,7,8]) gc()");
tryItOut("with({}) yield this.zzz.zzz;");
tryItOut("{with(true){}Math.sin } const __noSuchMethod__;");
tryItOut("L:switch( /* Comment */(p={}, (p.z = [,])())) { case <y><z/></y> != #3={a:#3#}([1,2,3,4].slice() in this.zzz.zzz): /*infloop*/do {yield; } while((yield 0)); }");
tryItOut("L:while((({__count__: __proto__})) && 0)constructor = __parent__, __iterator__ = *::*;");
tryItOut("if(*::*.throw(this[[,]])) { if (constructor = null) return 0.1; else {(1 for (x in [])) }}\n");
tryItOut("L: { }");
tryItOut("export *;");
tryItOut("export prototype;");
tryItOut("/*for..in*/for(constructor in <y><z/></y>) return\n");
tryItOut("{if(window) { if ( /x/g ) {} else {(this); }} }");
tryItOut("while((eval(\"@foo\", @foo)) && 0)__count__");
tryItOut("\nexport prop;\n");
tryItOut("/*infloop*/for(( /* Comment */windowwith({}) { ; }  ); ({ set delete() { export *; } ,  get constructor\t() { yield <x/>; }  }); (yield <y><z/></y>)\t) {let __parent__ = <x><y/></x>, __iterator__ = __noSuchMethod__;<x><y/></x>; }");
tryItOut("this.zzz.zzz;");
tryItOut("with({constructor: __parent__(#3={a:#3#} += <x/>) = <><xxx {prototype}={window.watch(\"constructor\", new Function)} /></>}){if(<x/>) { if (undefined) {}} else gc() }");
tryItOut("if(<x/>([,,z1], ({ __count__: constructor, prop: __count__ }))) {if(((__proto__ = @foo) .. this.zzz.zzz)) yield; else \t{Functionreturn __noSuchMethod__; } } else  if ([({ __parent__: ({ __noSuchMethod__: x::__proto__ }), __iterator__: ({ __count__: __parent__ }) })].hasOwnProperty(\"prototype\")) {if(constructor) { if (<><x><y/></x></>) {export function::__parent__;; } else yield [1,,];} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__iterator__ in ) {; }");
tryItOut("/*for..in*/for(__noSuchMethod__ = <x/> in <x><y/></x>) {break ;throw <><x><y/></x></>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var (this.__defineGetter__(\"__count__\", yield this))((([1])(window.yoyo([[]])))) in (function ([y]) { })() ? <><x><y/></x></> : <x><y/></x>.__defineGetter__(\"__proto__\", (<><x><y/></x></>).watch)) export *;");
tryItOut("try { yield ; } finally { <{__noSuchMethod__}>yyy</{__noSuchMethod__}> } ");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__count__ in prototype) yield;");
tryItOut("/*for..in*/for(((function ([y]) { })())(@foo) in ((function () { return  ''  } )(((uneval(<x><y/></x>))))))gc()");
tryItOut("with({prop: yield *})function ()[z1]");
tryItOut("if(//h\n<>yyy</>.(Exception())\f) export *; else {gc()(null); }");
tryItOut("with((__parent__ = __iterator__ >= <y><z/></y>)){throw __proto__; }");
tryItOut("L:switch(({a1:1})) { default: __iterator__; }");
tryItOut("/*infloop*/[1,2,3,4].mapfor(window; prototype; (<y><z/></y> :: [,,])) {throw <zzz> \"\" </zzz>; }");
tryItOut("/*infloop*/L:for((({__iterator__ getter: ({}).__lookupGetter__ })).yoyo(this.zzz.zzz); new window({}); [1,,]) {(( /x/ )[3]); }");
tryItOut("let (__parent__) { yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const __iterator__ in this.__defineSetter__(\"prop\", __parent__)) if(( /* Comment */true.hasOwnProperty(\"__proto__\"))) <x/>;");
tryItOut("for(let y in []);");
tryItOut("if(__count__) {(true); } else  if (*::*) {var __noSuchMethod__;export prop; }");
tryItOut("do {const __count__, constructor;\f } while(((__parent__ = <x/>)) && 0);(null);");
tryItOut("L:with((yield  '' )){throw  /x/g ;(1 for (x in [])) }");
tryItOut("L: {yield window; }");
tryItOut("throw prop;yield;");
tryItOut("return\nexport prop;");
tryItOut("return;");
tryItOut("if(prop = void 1.2e3) { if (__count__ = __noSuchMethod__.__iterator__) __noSuchMethod__; else {{}(<y><z/></y>); }}");
tryItOut("/*for..in*/for([__iterator__, __proto__] = (yield (new ( /x/g )(__parent__, #1#))) in __proto__.(window)) throw  /x/ ;");
tryItOut("/*for..in*/L:for(const [__parent__, constructor] =  \"\" .@* in null) {var constructor =  /x/ , __noSuchMethod__ = @foo;{} }");
tryItOut("L: {export *; }");
tryItOut("/*infloop*/do ; while(*);");
tryItOut("with({prototype: ( /x/g  || this)})(undefined);");
tryItOut("var __iterator__ = false, __count__\n");
tryItOut("/*infloop*/for(1e-81.@*; (arguments <<= [1]); *) (<y><z/></y>);");
tryItOut("M:switch(*.__defineGetter__(\"__noSuchMethod__\", function(q) { return q; })) { default: break; case (({a1:1})++): break;  }");
tryItOut("throw <><x><y/></x></>;");
tryItOut("/*for..in*/for([__count__, __noSuchMethod__] = *::*[<><x><y/></x></>] in <x><y/></x>) __noSuchMethod__;");
tryItOut("/*infloop*/for(var with({}) { return *; }  = <x><y/></x>.__defineSetter__(\"__parent__\", [[1]])++; (<><x><y/></x></> & (-0))\n; <{prototype}><ccc:ddd>yyy</ccc:ddd></{prototype}>) {__parent__ }");
tryItOut("let(__count__ = function::__parent__ = <><x\t><y/></x></>) ((function(){throw __count__;})());");
tryItOut(";");
tryItOut("/*for..in*/for((-0) in (((true).watch)((*.hasOwnProperty(\"prototype\"))))){true['prototype'] }");
tryItOut("/*for..in*/for(let [x::__parent__, __iterator__] =  /x/  in prop) {yield #1=[#1#]; }");
tryItOut("gc() const __noSuchMethod__;");
tryItOut("/*for..in*/for(constructor in ((eval)(*::*.__lookupSetter__(\"constructor\").__parent__ =  \"\"  @ 1e-81 .. [1,2,3,4].slice)))return; const __iterator__;");
tryItOut("if('fafafa'.replace(/a/g, new Function)) { if ( /* Comment */true.__defineGetter__(\"__parent__\", eval)) return [[]];} else {}");
tryItOut("switch(true.__lookupSetter__(\"prop\").prototype) { default: break; (__iterator__);break; const __proto__, __proto__ = <><x><y/></x></>; }");
tryItOut("if((this.zzz.zzz)) {/*for..in*/for(const __proto__ = <y><z/></y> in -1) <><x><y/></x></>; } else  if ((([11,12,13,14].some for (__proto__ in this)))) *; else {return;/*for..in*/for(let prop in (((<><x><y/></x></>).__defineSetter__)( \"\" ))){let \f__proto__ = arguments, let __proto__ = <x><y/></x>; = @foo; } }");
tryItOut("/*infloop*/while(<><x><y/></x></>){return; }");
tryItOut("/*infloop*/while((<><x><y/></x></>.__lookupSetter__(\"constructor\"))){yield __parent__;let 3.141592653589793 = 4., __iterator__; }");
tryItOut("return (-1);");
tryItOut("if(new function  __proto__ (prop, set)[1,,]() + <><x><y/></x></> ^= <y><z/></y>.__defineGetter__(\"prop\", ('haha'.split).__defineSetter__)) {} else const constructor;");
tryItOut("if(<y><z/></y>) { if (undefined) yield __count__; else return;}");
tryItOut("for(let y in [5,6,7,8]) throw prototype;");
tryItOut("with({}) yield;");
tryItOut("continue L\n");
tryItOut("[];yield  /x/ ;");
tryItOut("if((yield (function  constructor ([, , , ]) { throw <x><y/></x>; } ))) { if ((null.__lookupGetter__(\"__iterator__\")) == prototype.isPrototypeOf(@foo)()) {continue ;break ; }} else {Math.powexport @foo, null; }");
tryItOut("for(let y in [5,6,7,8]) this.zzz.zzz;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (@foo.__count__)['__noSuchMethod__'] in <y><z/></y>) yield;");
tryItOut("if(*) export *; else  if (([\n<y><z/></y> for each (constructor in  /x/ ) for each (prop in this)])) yield <x><y/></x>; else {(*::*);const prop = window, __noSuchMethod__; }");
tryItOut("/*infloop*/for(*; <><x><y/></x></>; [[1]]) {; }");
tryItOut("<>(function ([y]) { })().hasOwnProperty(\"__count__\") + (this.__defineSetter__(\"prototype\", new Function))</>");
tryItOut("L:if(constructor &  /x/ ) gc()");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/for(var constructor = false in <y><z/></y>) (__count__);");
tryItOut("this.zzz.zzz;");
tryItOut("if(new Function) return <x/>; else  if ((*.__defineSetter__(\"__count__\", [1,2,3,4].slice))) {yield; } const constructor;");
tryItOut("/*infloop*/for(let ({ __parent__: [({ prop: ({ __count__: function::__parent__, __proto__: ({ __iterator__: __proto__, constructor: __count__ }) }) }), , ], __iterator__: ({ prop: [], prop: constructor }) }) = (({ setter: __parent__ }) = new ( \"\" )().__lookupGetter__(\"__noSuchMethod__\")); eval(\"1e-81\",  '' ).constructor; (__noSuchMethod__.prop.__defineSetter__(\"__iterator__\", __proto__, <><x><y/></x></>))) {return window;(this); }");
tryItOut("if(this.zzz.zzz) { if (new ([[1]])()) __noSuchMethod__; else  \"\" ;}");
tryItOut("export __count__;");
tryItOut("/*for..in*/L:for([prototype, __iterator__] = <x><y/></x> in <y><z/></y>) __count__ =  /x/g , __count__ = @foo\nexport __iterator__;");
tryItOut("L: __iterator__([z1], window);");
tryItOut("{({}).hasOwnProperty }");
tryItOut("if(!__parent__((undefined -=  /x/ ), <x><y/></x>)) { if (let (prop = <x><y/></x>) true << {}--) export __count__;} else gc()");
tryItOut(";");
tryItOut("if((p={}, (p.z = window)())) {(function(id) { return id });return; } else  if ((3.valueOf(\"number\"))) export *; else {return  \"\" ;return null; }");
tryItOut("/*for..in*/for(let __count__ = ((1 for (x in []))).call(undefined, arguments) >= prototype ? this :  /x/  in <x><y/></x> .@ <><x><y/></x></>.*++) continue L;");
tryItOut("/*infloop*/for(let prop; this.isPrototypeOf(@foo); (<x/>.__lookupGetter__(\"constructor\"))) __iterator__ = <><x><y/></x></>, prop = false;");
tryItOut("for(let y in []);");
tryItOut("/*for..in*/L:for(const prototype = this.__defineGetter__(\"__iterator__\", (<y><z/></y>).__defineSetter__) in prop\n) {return <><x><y/></x></>; }");
tryItOut("if(((__count__ for each (__proto__ in <x><y/></x>)))) { if (#0=[<><x><y/></x></>].isPrototypeOf(yyy.(null))) if([z1]) __noSuchMethod__.__noSuchMethod__ else  if (<><x><y/></x></>) {__iterator__return <y><z/></y>; } else return;} else {return;/*infloop*/do  while(@foo ^ <y><z/></y>); }");
tryItOut("{throw window\f; }");
tryItOut("if(<><x><y/></x></>) { if ((<><x><y/></x></>)[<x><y\t/></x>]) {yield __count__; }} else {return 4.;yield; }");
tryItOut("while(((eval(\"this.__defineSetter__(\\\"prop\\\", Function)\", new <x><y/></x>)).__iterator__) && 0){/*for..in*/for(var __iterator__ in (((([15,16,17,18].filter([1,2,3,4].slice,  '' )))[(this).call(*, <><x><y/></x></>,  /x/ )])((new Function).__noSuchMethod__)))M:if(<><ccc:ddd><!--yy--></ccc:ddd></>) { if ((function(y) { yield y; while((*::*) && 0)function(y) { yield y; yield <><x><y/></x></>;; yield y; }; yield y; }).call((-1) if (function::prop), <x/>)) gc() else {}} }");
tryItOut("/*infloop*/while(__noSuchMethod__++){/*infloop*/for(__parent__; this; <x><y/></x>) {gc() }var __parent__; }");
tryItOut("gc()");
tryItOut("if(#0=({__noSuchMethod__: <><x><y/></x></>})) { if (<><{__proto__}><!--yy--></{__proto__}></>) {return @foo;var __parent__ = <x/>, __count__ = __parent__; } else {return;{} }}");
tryItOut("yield;");
tryItOut("/*infloop*/for( /x/g ; arguments['__proto__']; (this.zzz.zzz).__lookupGetter__(\"prop\")) constructor =  \"\"  if (<y><z/></y>), __noSuchMethod__ = this");
tryItOut("/*for..in*/for(constructor in ((function (__proto__, <{__proto__}><!--yy--></{__proto__}>) { yield ((prop) .@x:: (yield <x/>)) } )((__count__.constructor getter= <x><y/></x>.throw(<zzz>__iterator__ = prop = 3.141592653589793</zzz>)))))/*infloop*/for(const [, , [, __proto__], ] = undefined; (<x><y/></x>); (<xxx>{prototype}</xxx>.(<x><y/></x>)).__defineSetter__(\"__proto__\", __iterator__)) with({prototype: *})const __iterator__, prototype;");
tryItOut("L:if((false =  '' )) {export *; } else ");
tryItOut("{export __proto__;/*for..in*//* nogeckoex bug 349964 */ for  each(var prop in <><x><y/></x></>) {yield __proto__; } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const (__count__) in (new <y><z/></y>) >= * , __parent__) return;");
tryItOut("__noSuchMethod__ = __noSuchMethod__;");
tryItOut("if(window += true) { if (function ([y]) { }) {prototype, prototype = *::*; }} else ");
tryItOut("L:if(false.__iterator__ = undefined) { if (<x/> % *::*) {gc }} else export *;");
tryItOut("/*for..in*/L:for(prototype.__proto__ in <y><z/></y>) {true;export *;/*for..in*/for(const __count__ = null in window) {yield;function (__noSuchMethod__) { yield 033 }  } }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in prototype) {return <x><y/></x>;export getter;yield <x><y/></x>; }");
tryItOut("switch(<> </>) { default: break;  }");
tryItOut("yield <x/> % <y><z/></y>;\n{yield;return <x/>; }\n");
tryItOut("try { with({}) { return (__iterator__ =  '' ); }  } catch(__parent__ if (let (prototype = @foo, __proto__) <x><y/></x>)) { with({}) { let(__proto__ = false, __noSuchMethod__ = *) { (<><x><y/></x></>); }  } catch(__parent__ if (function(){with({}) { let(this) ((function(){x})()); } })()) { for(let y in []); } catch(__parent__ if (function(){for(let y in [5,6,7,8]) ;})()) { throw __iterator__; } catch(prototype if (function(){throw StopIteration;})()) { yield this; } catch(constructor) { this.zzz.zzz; } finally { return (__count__ = ({})); } ");
tryItOut("{throw  /x/ ;return  \"\" ; }");
tryItOut("with({}) { for(let y in []); } ");
tryItOut("/*for..in*/for(const __proto__ in -1) return window\n(window)\n\nbreak M\n{}");
tryItOut("if(<x/>) export __count__; else  if (__parent__) ; else return;");
tryItOut("L:if((this.__defineGetter__(\"prototype\", function(y) { yield y; export __noSuchMethod__;; yield y; }) * @foo)) throw __parent__; else  if ([__iterator__]) {(<><x><y/></x></>); } else L: __count__; const __proto__;");
tryItOut("if([,]) { if (<x><y/></x>) const this, __proto__; else yield;}");
tryItOut("L:if(false = ( /x/g .@foo)) let constructor, __count__; else  if ((arguments.throw(<x><y/></x/*\n*/>))) {export __noSuchMethod__;([[]]); }");
tryItOut("let(constructor) ((function(){let(__iterator__ = yield __count__, __noSuchMethod__ = window) ((function(){for(let y in [5,6,7,8]) function::(p={}, (p.z = [[1]])()) &= ([z1].eval(<x><y/></x>)) = __iterator__;})());})());");
tryItOut("L: return");
tryItOut("L: __iterator__ = <x/>;");
tryItOut("/*for..in*/for(var function::__iterator__ = ({ yield __parent__: __iterator__ }) = (this >>>=[1,,]) in <><bbb xmlns:ccc=\"__count__\"><ccc:eee></ccc:eee></bbb></>) {yield;export *; }");
tryItOut("this.zzz.zzz;");
tryItOut("if(prototype.__lookupSetter__(\"__count__\")) {constructor;let each; } else {break ; }");
tryItOut("this.zzz.zzz;");
tryItOut("let __count__, __proto__; const function::__proto__;");
tryItOut("<{constructor}><!--yy--></{constructor}> = prototype\f;");
tryItOut("__iterator__");
tryItOut("const __parent__, constructor = <>><y/></ for each (__noSuchMethod__ in window)x></>;");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/L:for(prototype = (new function(q) { return q; }(<><x><y/></x></>)); void <x><y/></x>.eval([[]]); (true ? undefined :  /x/ ).__lookupSetter__(\"__iterator__\")) try { (<y><z/></y>); } catch(__proto__) { throw <><x><y/></x></>; } ");
tryItOut("L: {}");
tryItOut("/*infloop*/M:while( /x/ .propertyIsEnumerable(\"prototype\"))<><x><y/></x></>;");
tryItOut("{return <x/>; }");
tryItOut("this.zzz.zzz;");
tryItOut("return;/*infloop*/do {true; } while(yield [,,z1])");
tryItOut("/*infloop*/M:while([11,12,13,14].filter.constructor){gc()( /x/ ); }");
tryItOut("{break L; }");
tryItOut("");
tryItOut("M:if(3.141592653589793) { if (({__iterator__: 1e4 &= <y><z/></y>}) || yield *) ;} else {gc()export prop; }");
tryItOut("M:while((<><ccc:ddd><x><y/></x><x><y/></x><!--yy--></ccc:ddd></>.(<><x><y/></x></>.prop = 0.1)) && 0){if(let __parent__ =  /x/ ;) { if ((<y><z/></y>.yoyo(null) ? <x><y/></x>.unwatch(\"__noSuchMethod__\") : (yield  '' ))) gc() else {__noSuchMethod__, window = <x><y/></x>; }} }");
tryItOut("{yield;{} }");
tryItOut("if((<y><z/></y>).__lookupSetter__(\"__iterator__\")) M:switch((new [1,2,3,4].map())) { default: yield;break; case (window .@*:: [] >= (033(false, <y><z/></y>))): break;  } else  if (null.yoyo(this.zzz.zzz)) {if(__parent__ = undefined) {return [z1]; } else  if (-0) {return <><x><y/></x></>; } else yield window;\f\nif([1]) { if ([,,z1]) {}} else {(eval).apply__proto__ = *::*, constructor; } } else if(window.eval(<x><y/></x>)) { if (<><x><y/></x></>) var __parent__ = window;} else {;( /x/g ); }");
tryItOut("with({}) { gc()\nexport *;\n } ");
tryItOut("L:if(([throw  /x/  for each (__parent__ in <y><z/></y>) for ((*::*)(1e+81) in ({}))])) {#1; } else {*;<x><y/></x>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prop in (++<x/>).constructor = [15,16,17,18].sort(function () { yield (__noSuchMethod__.__iterator__) } , window)) {gc() }");
tryItOut(" { <></>; } ");
tryItOut("/*infloop*/do  while(<x><y/></x>);");
tryItOut("/*infloop*/do {gc() } while(false ? <x><y/></x> :  \"\" );");
tryItOut("L:with({__parent__: (p={}, (p.z = <x/>)()).propertyIsEnumerable(\"__iterator__\")}){prop = #1=[#1#]; }");
tryItOut("if(#2=({constructor: <x><y/></x>})) {;let prototype, get; } else {gc(){} }");
tryItOut("{}");
tryItOut("if(--null.unwatch(\"prop\")) {; } else {yield; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(__noSuchMethod__ in *) {{} }");
tryItOut("M:if([1e+81]) { if (@foo <= [1] :: (<x/> ? constructor : -3/0)) return;} else {gc() }");
tryItOut("switch(3.141592653589793) { case ([function(id) { return id } if ( \"\" )]).unwatch(\"prop\") ^ <xxx {__parent__}={<><x><y/></x></>} />: /*infloop*/for(new Error(window,  '' ); <x><y/></x>.watch(\"prototype\", eval); <><x><y/></x></>\f) constructorbreak; L:if((new Iterator(*::*))) { if ((prototype)()) {export __proto__;\f }} else {yield; }break; L: {gc() }break;  }");
tryItOut("/*for..in*/M:for(const __iterator__ = new Iterator(this) in function ([y]) { }) {if(([15,16,17,18].filter(({}).__lookupGetter__, window))) undefined; else (new Function(\"(undefined);\"))if((p={}, (p.z = <y><z/></y>)())) {{} } else ((-0)); }\n/*for..in*//* nogeckoex bug 349964 */ for  each(const prop.__parent__ in undefined) {throw 0; } const __proto__;");
tryItOut("L: break ;");
tryItOut("do ((true)(window))['prop'] while((__iterator__.__count__ = [z1]) && 0);");
