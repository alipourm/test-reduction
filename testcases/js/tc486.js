tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(var __iterator__ in (__proto__.__parent__).yoyo(<><x><y/></x></>[<x/>])) {/*infloop*/L:for(const __proto__ = *['constructor'] = ~__iterator__ .@*:: *::*; __iterator__; ({__parent__: undefined})) {export *;; } }");
tryItOut("/*for..in*/L:for(var prop in constructor = <x><y/></x>) {/*infloop*/do yield *; while((__noSuchMethod__ =  \"\" ));[1,2,3,4].slice }");
tryItOut("L:with({prop: !(yield prop !== this)}){(<x/>);/*for..in*//* nogeckoex bug 349964 */ for  each(__proto__ in (function ([y]) { })()) const constructor = <y><z/></y>; }");
tryItOut("return;\nexport *;\n");
tryItOut("do {yield false;\nvar constructor = <x><y/></x>;\n \"\" ; } while((__noSuchMethod__.__parent__ = [<x><y/></x> if (null)] <= (null.eval(__iterator__) >>= ({__parent__ getter: function () { return <x><y/></x> } , constructor: prototype }))) && 0);");
tryItOut("while((<x><y/></x> >> undefined) && 0)let (//h\nprop, __parent__ = (<x><y/></)x>) { continue ; }");
tryItOut("with(null)(new Function(\"return;\"))");
tryItOut("/*infloop*/M:while( /x/ ){yield; }");
tryItOut("if()  else  if ((true['__iterator__'] = <y><z/></y>.* /= @foo.__defineSetter__(\"__iterator__\", gc))) {}\ncontinue ;\n else {yyyM:with(let (__iterator__ = (function ([y]) { })(), constructor = this) <x><y/></x>){throw <><x><y/></x></>; } }");
tryItOut("/*for..in*/L:for(let [prototype, [[1]]] = prop-=(eval)(function::__iterator__ = <x><y/></x>, @foo) in __iterator__ =  /x/g ) { }");
tryItOut("do {prototype = __proto__; } while((/a/gi) && 0);");
tryItOut("(window)\n;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let <><x><y/></x></>.valueOf(\"number\") in eval(\"this\", @foo) += (yield <x><y/></x>)) /*infloop*/for(let [[1]]; <zzz>__iterator__ = #2=({__noSuchMethod__: <y><z/></y>})</zzz>; <x/>) {return __count__;M:if( \"\" ) {export __count__; } }for(let y in []);");
tryItOut("/*for..in*/window: ((({}).__lookupGetter__).call(<x/>, ))");
tryItOut("/*infloop*/L:for(var __proto__; (window.__count__)++; [1,,].prototype) ");
tryItOut("__noSuchMethod__ = __count__;");
tryItOut("export ;");
tryItOut("if(__proto__.(this)) { if (([true])) return  '' ;} else {throw <><x><y/></x></>;return __iterator__; }");
tryItOut("/*for..in*/M:for(var __proto__ = prototype = <><>yyy</></> in <y><z/></y>) {M:if(constructor) { if (<y><z/></y>) {export *; } else {prototype, __proto__ =  \"\" ;(1e+81); }} }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __count__ in window) {yield -1;yield; }");
tryItOut("with((this.__defineGetter__(\"__iterator__\", (-0).call)))let function::__count__ = 1e81;");
tryItOut("/*infloop*/while(prototype = [(__count__.(<><x><y/></x></>)) for (1e+81 in __noSuchMethod__) if (false)])yield;");
tryItOut("{return <x><y/></x>;\nconst __proto__, __count__;\n }");
tryItOut("/*infloop*/M:for(var __parent__ = (033)(); delete (Exception(__parent__))(); (undefined(\n@foo, ((yield <x><y/></x>\n))))) let __parent__, prototype;");
tryItOut("/*infloop*/L:for(const function::prototype; <employee id=\"1\"><name>Joe</name><age>20</age></employee>; (RangeError((p={}, (p.z = <x/>)())))) {if(<><x><y/></x></>.unwatch(\"__noSuchMethod__\")) {break L;return null; } else {(<><x><y/></x></>); } }");
tryItOut("yield __count__;");
tryItOut("/*for..in*/for(var [__count__, prop] = (eval(\" \\\"\\\" \", <x><y/></x>))\f in null) {yield @foo; }");
tryItOut("this.zzz.zzz;");
tryItOut("{L: M:while((<x/>) && 0){return;return @foo; }/*infloop*/for(let prototype = this.zzz.zzz; .@foo; yield <><x><y/></x></>) {yield <y><z/></y>;export *; } }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/M:do {yield = 0x99, __count__ = this; } while(({a1:1}));");
tryItOut("3.141592653589793;\n(<x/>);\n");
tryItOut("return [z1,,];");
tryItOut("{}");
tryItOut("L:while((({ get __count__() { return (yield this) } , __count__ getter: new Function })) && 0){/*infloop*/do export *; while([this]);\ngc()\nyield (<employee id=\"1\"><name>Joe</name><age>20</age></employee>.(window)); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */L: for  each(const prop.__proto__ in undefined .. this) yield;");
tryItOut("/*infloop*/for(var prototype; prototype; []) do {break ; } while(((prop.__noSuchMethod__.__defineGetter__(\"constructor\", gc))) && 0);");
tryItOut("/*for..in*/for([__parent__, prop] = 1e4 - (uneval(this ? __count__ :  '' )) in prototype.__noSuchMethod__) {return <x><y/></x>;yield; }\nlet(__noSuchMethod__ = <x/>[@foo], export __noSuchMethod__; = false) { var prop, constructor;\n");
tryItOut("gc()return <y><z/></y>;");
tryItOut("with({prototype: eval().__noSuchMethod__ = (constructor = __count__)})/*infloop*/M:for(<y><z/></y>; <><x><y/></x></>; #1#) {prop = ({a2:z2}), __parent__ = *::*; }");
tryItOut("\nMath.pow");
tryItOut("\fwith({__count__: (uneval(@foo))})@foo;");
tryItOut("if(((uneval((eval(\"throw <><x><y/></x></>;\", (function ([y]) { })())))))) { if ( /* Comment */ /x/  .@*:: __count__) {yield; } else M:with(<x><y/></x>){}\nprototype;}\t");
tryItOut("if(this.__lookupSetter__(\"__parent__\") ? (false.__defineSetter__(\"__proto__\", ( /x/ ).watch)) : yield undefined) continue \t;\n/*for..in*/L:for(const prop in ((Math.pow)(let (prop) window)))yield;\n else  if ((new ([1,2,3,4].map)(0, (3 === (uneval(1.3)))))) {{} } else with({}) { for(let y in [5,6,7,8]) return null ? true : null; } ");
tryItOut("/*for..in*/for(({ prop: __noSuchMethod__ }) in ((Math.sin)([15,16,17,18].filter(function (__parent__, __count__) { export __iterator__; } , \n@foo)))){(0/0)\t;\f{} }");
tryItOut("while((<x><y/></x>.@foo) && 0){@foo;(window); }");
tryItOut("let([], __iterator__) ((function(){try { export prototype; } catch(prototype if @foo) { return __iterator__; } catch(__iterator__ if this) { return <x><y/></x>; } catch(constructor) { yield <><x><y/></x></>; } })());");
tryItOut("{return undefined; }");
tryItOut("/*for..in*/L:for(const __noSuchMethod__ = (*.yoyo(@foo)).@foo in <x/> << [z1]) L: ");
tryItOut("(__parent__) = prototype;");
tryItOut("with({}) { __count__ = prototype; } ");
tryItOut("continue ;");
tryItOut("if(((window.throw(((eval).call(<x><y/></x>, )))).isPrototypeOf(null , <><x><y/></x></>))) { if (<{__proto__}><bbb xmlns:ccc=\"<x><y/></x>\"><ccc:eee\t></ccc:eee></bbb>yyy</{__proto__}>) export __iterator__; const __count__; else {throw <x/>;[, ] }}");
tryItOut("M:do yield; while((@foo[ '' ]) && 0);");
tryItOut("/*for..in*/L:for(const <><x><y/></x></> in (( /x/ )([1]))){yield;__iterator__ = <x><y/></x>, __parent__ = window; }");
tryItOut("if(<{prop}></{prop}>) export *; else  if ([constructor] = ((prop)|=-3/0.yoyo( '' ))) {export prototype;switch(<><x><y/></x></>) { case this: throw null; } } else {if(*::*) { if (eval(\"'haha'.split\", __proto__)) {;(function(y) { yield y; ; yield y; }).call }} else yield; }");
tryItOut("__noSuchMethod__.__iterator__ = constructor");
tryItOut("let (__parent__, __parent__) { /*for..in*/for([__parent__, constructor] = *.hasOwnProperty(\"constructor\") in <><x><y/></x></>) const __noSuchMethod__; }");
tryItOut("while((__iterator__ = true.__parent__ = export *) && 0){throw <><x><y/></x></>;{break ; } }");
tryItOut("if(<y><z/></y>) {export *; } else  if (this) {return;; }");
tryItOut("let([constructor, ({ __proto__: (function ([y]) { })()[@foo]['__count__'], constructor: __iterator__ }), prop, , ({ prop: ({ constructor: __iterator__ }) })] = constructor-=yield __noSuchMethod__, __iterator__ = ( ''  ? <><x><y/></x></> :  '' -=[*])) ((function(){return;})());");
tryItOut("/*infloop*/for(const set; eval(\";\", (__iterator__)); RegExp(('fafafa'.replace(/a/g, 'haha'.split)))) {/*infloop*/M:while(<x/>)do yield; while((({prop: undefined })) && 0); }");
tryItOut("{let __noSuchMethod__; }");
tryItOut("for(let y in []);");
tryItOut("if((p={}, (p.z = __parent__ = <y><z/></y>)())) throw  '' ; else  if (__iterator__%=*::*) if( '' ) { if (@foo) export *; else {{}export *; }} else export *;");
tryItOut("/*infloop*/do while((({__iterator__: [], __count__: <x/> }).__parent__) && 0){0/0;let __parent__ = 1e-81, __count__; } while(typeof (this.__defineSetter__(\"__proto__\", (eval).call)));");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(let [__iterator__, ({ __noSuchMethod__: constructor, __proto__: prop })] = __proto__%=this += null; eval(\"{throw <x><y/></\\fx>;<y><z/></y>; }\", (yield <><x><y/></x></>)); ((uneval(function(id) { return id }.propertyIsEnumerable(\"__proto__\"))))) {__parent__; }");
tryItOut("{/*for..in*/for(const prop = undefined in <><x><y/></x></>) {gc()const constructor = @foo; }/*for..in*/M:for(var [__parent__, __iterator__] =  { yield; }  = ({ \tconstructor: __parent__, __iterator__: prop }) in ( \"\" .throw(__noSuchMethod__))) __parent__; }");
tryItOut("/*infloop*/while('fafafa'.replace(/a/g, eval)){export __iterator__;if(*) throw #1=[#1#]; }");
tryItOut("var __iterator__;");
tryItOut("/*infloop*/[, ({ __proto__: __proto__, __count__: __proto__ }), ]\n");
tryItOut("if(__iterator__) {yield; } else  if (<x><y/></x>) {gc()const prototype = __noSuchMethod__; }");
tryItOut("L: {{}yield; }");
tryItOut("return true;");
tryItOut("/*infloop*/while(new Boolean(( \"\"  * ( /* Comment */<y><z/></y>)), __noSuchMethod__ =  '' )){if(new function (__count__, prototype) { /a/gi } ()) { if (prototype <= prop) {([,,z1]);throw  '' ; }} else {export *;yield; } }");
tryItOut("L: ( /x/ )\n;");
tryItOut(";");
tryItOut("/a/gi");
tryItOut("var __iterator__ = <x/>, prop = @foo\n\nexport *;\n");
tryItOut("with(this.__defineSetter__(\"__parent__\", ( /x/ .eval(<x/>) >>> \f__noSuchMethod__ =  '' )))if((uneval(033.isPrototypeOf(__proto__ = <><x><\fy/></x></>)))) const __proto__, __iterator__ = <x/>;\t else  if (( '' )[window]) throw <x/>;");
tryItOut("/*for..in*/for(var __count__ = <><x><y/></x></> in <x><y/></x>) (<x/>);");
tryItOut("/*for..in*/for(const [__proto__, let] = 1e-81.__lookupGetter__(\"__noSuchMethod__\") in 0.1) {let __iterator__ = *::*; }");
tryItOut("throw StopIteration;");
tryItOut("switch(#1=({constructor: (new ([\nthis])(constructor.constructor = (<x><y/></x> for (constructor in <x><y/></x>)), @foo))})) { default: break \ngc()\n/*infloop*/do {{} } while(<x/>);\tcase __count__.__proto__: break;  }");
tryItOut("/*for..in*/M:for(var __parent__ in (this.@foo)) {gc()(undefined); }");
tryItOut("/*infloop*/; <x><y/></x>) yield {};");
tryItOut("if(<x><y/></x>) {L:with({__noSuchMethod__: eval(\"prop\", #3={a:#3#})})export __count__; } else if(undefined) \f{ if (__proto__ = 1.2e3) } else {;(__count__); }");
tryItOut("return (p={}, (p.z = __noSuchMethod__ = ({ __noSuchMethod__: __proto__ }))());");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const prototype in <zzz>[[]] >= *::*</zzz>) {let (__noSuchMethod__) { let __iterator__, prototype = \n<x><y/></x>; }\n }");
tryItOut("/*infloop*/for(const __parent__ = __noSuchMethod__ = [,]; <y><z/></y>; false & @foo) yield prototype;");
tryItOut("/*infloop*/for(__count__ = 5.0000000000000000000000; [].hasOwnProperty(\"prototype\"); *.__lookupGetter__(\"__iterator__\") <= <><x><y/></x></>\t.__parent__) try { 'haha'.split } catch(constructor if ([<x><y/></x>].map((new Function(\"yield;\"))))) { throw <x><//h\ny/></x>; } catch(__noSuchMethod__ if (3 ?  /x/  : __noSuchMethod__)) { return 1.3; } catch(__iterator__ if __noSuchMethod__ = 1.2e3) { throw false; } catch(__iterator__ if (constructor.prototype getter= 4.)) { continue ; } catch(constructor if (function(){var __iterator__;})()) { *::* } catch(__iterator__) { (<x><y/></x>); } ");
tryItOut("if((({prototype: (<x><y/></x>\n)}))) constructor, prototype; else  if (<x><y/></x> && (\nundefined)) {yield; }");
tryItOut(";\t const constructor;");
tryItOut("/*for..in*/M:for(let [__iterator__, __parent__] = ( /* Comment */(Array(<x/>))) in __proto__) {yield;; }");
tryItOut("/*infloop*/for(const ({ __parent__: prototype, __count__: __noSuchMethod__ }) = <><x><y/></x></> ? <><x><y/></x></> : <><x><y/></x></>; (new null([z1], (function ([y]) { })())); RangeError(-0, <y><z/></y>)) Math.pow");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __count__] = ({__noSuchMethod__: (yield) }) in [\n<y><z/></y>.unwatch(\"__count__\")].map([1,2,3,4].map)) {; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(var prop.prototype in [undefined].map(\fthis = <y><z/></y>)) {with({__count__: (yield  /x/ )}){}/*for..in*//* nogeckoex bug 349964 */ for  each(var \f__iterator__ in 0.1) {continue M; }undefined; }");
tryItOut("switch\f(this.__defineSetter__(\"__noSuchMethod__\", [1,2,3,4].map) .@x:: ++__proto__ .@*:: 3) { case (__parent__ = __iterator__): break; default: prop = eval(\"yield;\", {});case  /x/ : with({}) { with({}) return; } break;  }");
tryItOut("/*infloop*/for(let __noSuchMethod__; prototype; (*::*.__lookupSetter__(\"prototype\"))) { }");
tryItOut("switch([({a2:z2})]) { case 0: break; case 4: /*infloop*/L:while((__parent__%= /x/g ))return;case ( /x/g  ? <x><y/></x> : true , <x/> ? [,] : <x/>): with(({prop: (<x/>).__defineSetter__((@foo\n)) }))while((#1#) && 0)break; /*infloop*/do /*infloop*/while(<>\f<x><y/></x></>.__lookupGetter__(\"constructor\")){yield; } while(\n /x/ );break; break; default: case 1: case 2: ;if(delete ({})) if([,]) {continue ;{} } else \f if (*::*) case (yield constructor): break;  }");
tryItOut("if( /x/g ) let (__count__, ({ __iterator__: __count__ })) { /*infloop*/while(__parent__ = window); } else  if (-3/0) {M:do {break ; } while((#1#.isPrototypeOf(__proto__)) && 0); }");
tryItOut("if(((false for (({ __noSuchMethod__: __count__ }) in eval(\"gc()\", *::*))))) export __parent__; else  if (('fafafa'.replace(/a/g, ({a2:z2})))) {let __count__;let constructor = false; } else {let constructor;{function  prop (constructor) {  } \nvar __parent__;gc() } }");
tryItOut("/*infloop*/for(var __noSuchMethod__ = null; *; [1,,]) yield;");
tryItOut("M:if(#1=[#1#]) yield; else  if (null) {yield; }");
tryItOut("__count__");
tryItOut("/*for..in*/L:for(const __iterator__ in (((Function).call)(<><xxx {prop}={1e4.isPrototypeOf(1e+81)} /></>))){{}( /x/ ); }");
tryItOut("/*infloop*/for(let constructor; ((uneval(eval(\"prototype.constructor = \", ('haha'.split)(([this if (<><x><y/></x></>)]))(true >>= <x><y/></x>, function::__count__ = *::*))))); new RangeError([1,,])) {0x99; }");
tryItOut("with({}) { throw __noSuchMethod__; } ");
tryItOut("if(yield ([[]] <<= prototype = (eval(\";\", <><x><y/></x></>)))) { if (()) {yield 1.2e3; }} else switch(<><x><y/></x></>) { default: return @foo; }");
tryItOut("{{}/a/gi }");
tryItOut("L(/if((prototype .@x:: <x><y/></x>.yoyo((({ set __proto__ prop () { yield #1=[#1#] }  }))))) {/*infloop*/for(const prop; <><x><y/></x></>; __proto__ = null) {;prototype; } } else  if (__parent__)  else {continue M;if((new ((*).watch)(<><x><y/></x></>))) { if (true) export constructor; else {(<x/>);break ; }} }");
tryItOut("switch((new ((<><x><y/></x></>).__defineSetter__)(__count__ = <x/>, <x><y/></x>))) { default: break;  }");
tryItOut("with({__iterator__: window}){var prototype, __iterator__ = <><x><y/></x></>;return; }");
tryItOut("while(([11,12,13,14].some) && 0){; }");
tryItOut("if(__iterator__.__noSuchMethod__ = 1.2e3) {yield true; } else  if () M:with((yield ( /x/ .@foo))){export constructor; }");
tryItOut("__parent__\t;");
tryItOut("const prototype = undefined;");
tryItOut("throw StopIteration;");
tryItOut("let(prototype) { this.zzz.zzz;");
tryItOut("switch( /x/ ) { default: export *; }");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) (*::*);");
tryItOut("constructor = prototype;");
tryItOut("L:with({prototype: ((uneval(<><x><y/></x></>)))})export *;");
tryItOut("/*for..in*/for((*::*)(constructor.__proto__ getter= eval) in ((((yield #1=[#1#])))(window))){break M;throw <><x><y/></x></>; }");
tryItOut("/*infloop*/for(([__parent__, [, , ], __proto__, , ] = ([1].@foo)); __iterator__ = [,,z1]; true) continue M;");
tryItOut("M:do /*infloop*/M:do break L; while(@foo); while((this.hasOwnProperty(\"prototype\").__proto__%=\n<><x><y/></x></>) && 0);");
tryItOut("L:if((eval(\"<x><y/></x>\", null))) { if (-0) ; else continue ;}");
tryItOut("throw prop;");
tryItOut("/*for..in*/for(const __proto__.prototype in ((-let)(<><x><y/></x></> for (__count__ in <><x><y/></x></>)))){; }\nM:if(<x/>.throw(__parent__(__noSuchMethod__))) /*for..in*/for(let __count__ in constructor) {__parent__ = __proto__; } else  if ((({__count__ getter: (new Function(\"break ;\")) })) /= yield <y><z/></y>) {yield;export *\n{} }");
tryItOut("/*for..in*/M:for(const prototype in ((function  __proto__ (__parent__, prototype) { return window } )((({ __parent__: __iterator__ }) = (<><x><y/></x></>.hasOwnProperty(\"prop\"))))))throw  \"\" ;");
tryItOut("/*for..in*/for(let [prop, prototype] = this.__defineGetter__(\"__iterator__\", 'haha'.split) in setter =  '' ) this.__defineSetter__(\"__proto__\", 'haha'.split);");
tryItOut("/*for..in*/for(__count__ = ((constructor.hasOwnProperty(\"__iterator__\")) ? (prop-= \"\" .__defineSetter__(\"prop\", gc)) : <><x><y/></x></>.hasOwnProperty(\"prototype\")) in <>5.0000000000000000000000</>) {{;throw [1,,]; } }/*\n*/");
tryItOut("this.zzz.zzz;");
tryItOut("\n");
tryItOut("/*infloop*/L:for((__parent__ = __iterator__.__defineSetter__(\"__proto__\", (Function))) +  /x/ ; (gc()); (function (__count__) { yield window } ).call(prop = *::*, #3={a:#3#}).isPrototypeOf(void <y><z/></y>)) {let __noSuchMethod__; }");
tryItOut("/*for..in*/for(const [__noSuchMethod__, __proto__] = ({__noSuchMethod__: (__iterator__.prototype) }) in this) {return; }");
tryItOut("");
tryItOut("");
tryItOut("if([[1] for each (prop in __count__)]) { if ([11,12,13,14].filter.__proto__ = ) {throw undefined; } else {yield this }}");
tryItOut("<x><y/></x>;");
tryItOut("if(new ((new Function(\"{}\")))()) const prop = (-1), __count__ = null\n");
tryItOut("return;");
tryItOut("if(<x><y/></x>) { if (__count__) {yield; } else export *;}");
tryItOut("if(*::*++) export *;\nfunction  prototype ()prop\n else __count__;");
tryItOut("while((false) && 0)continue L;");
tryItOut("return;return;");
tryItOut("while(((this %= (-0).__lookupSetter__(\"function::__iterator__\")) &= (constructor =  /x/g )) && 0)([z1,,]);");
tryItOut("<x/>;while(([]) && 0)[1,2,3,4].slice");
tryItOut("export *;\nprototype = <y><z/></y>, __iterator__ = this;\n");
tryItOut("return <><x><y/></x></>;");
tryItOut("this.zzz.zzz;");
tryItOut("if(new (Math.pow)(constructor = <y><z/></y> in \f<><x><y/></x></>)) { if (undefined\f != this) {export __noSuchMethod__;/*for..in*/for(var [__proto__, prototype] = <><x><y/></x></>.@* in 3) return  '' ; } else }");
tryItOut("{return 1e-81.__defineGetter__(\"true\", ({}).__lookupGetter__); }");
tryItOut(" \"\" \n({}).hasOwnProperty\n");
tryItOut("let __count__ = window, __iterator__;");
tryItOut("/*for..in*/for(var [__iterator__, __iterator__] = false in constructor = __proto__) if(@foo) yield; else {continue ;return false; }");
tryItOut("do {var __parent__, __noSuchMethod__;gc() const prototype; } while((@foo) && 0);");
tryItOut("if(<x><y/></x>) { if (<x><y/></x>) let __count__, prop = __count__; else break M;}");
tryItOut("if(__parent__.__iterator__ setter= <><x><y/></x></>.propertyIsEnumerable(\"__noSuchMethod__\")) { if (({ ({ __iterator__: ({ __parent__: prop, __noSuchMethod__: __count__ }), __proto__: ({ __proto__: constructor, prop: __proto__ }) }): __iterator__, prop: ({ __noSuchMethod__: ({ constructor: __parent__, __noSuchMethod__: constructor }), __iterator__: ({ __count__: __count__ }) }) }) = #2=({__count__: <y><z/></y>}) &= (<><x><y/></x></>.prototype)) const __noSuchMethod__;} else (@foo);");
tryItOut("/*for..in*/for(__parent__ in ((new Function)( '' )))yield 1e4;");
tryItOut("with({}) { yield __proto__.__count__ setter= __noSuchMethod__; } ");
tryItOut("with({constructor: false}){(true); }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(const constructor in 1e-81) {export *; }");
tryItOut("if((p={}, (p.z = __iterator__ *  '' )())) {/*infloop*/while(<x><y/></x>)export *;throw prop; } else  if ((constructor !=  \"\" )) var prop = <><x><y/></x></>, __iterator__;");
tryItOut("switch(1e81) { default:  }");
tryItOut("if(true) { if ((uneval([11,12,13,14].filter))) {/*for..in*///h\nfor(const this in window) {return;return x::prototype; }\nexport __parent__; }} else return  /x/ \nif( \"\"  ? __parent__ : true) const __count__ =  /x/g , __proto__; else  if (window) {gc() } else let __proto__ = function(id) { return id }, __noSuchMethod__;");
tryItOut("/*for..in*/M:for(var [__parent__, __noSuchMethod__] = [1e+81.*] in __count__ = prop) ([]);");
tryItOut("/*for..in*/M:for(constructor = window in <><x><y/></x></>) {\f }");
tryItOut("/*for..in*/L:for(var [__count__, __noSuchMethod__] = __proto__ in [11,12,13,14].map) export *;");
tryItOut("L:if(* * 0) var __parent__ = __noSuchMethod__, __parent__; else  if (<><x><y/></x></>) {}");
tryItOut("export __parent__;\n[1,2,3,4].slice\nfor(let y in [5,6,7,8]) for(let y in []);");
tryItOut("*::*;");
tryItOut("if(*.isPrototypeOf(-1)) {__noSuchMethod__ = this;throw *; } else {constructor;export __count__; }");
tryItOut("with([z1] .@ 0.1)gc() const ;");
tryItOut("if(__parent__ = __proto__) /*for..in*/for([\tfunction::__iterator__, __noSuchMethod__] = (__count__.(4.)) in #3={a:#3#}) yield -3/0; else  if ([1] .. <x/>) {(<y><z/></y>);\ndo {throw <><x><y/></x></>; } while((__count__ = <><x><y/></x></>) && 0); } else do {yield constructor = <x/>; } while((null) && 0);");
tryItOut("try {  /x/g ; } finally { \fexport prototype; } ");
tryItOut("/*infloop*/for(const ({ \f__proto__: ({ __proto__: prototype, prop: prototype }) }) = function::__count__.__proto__ getter= <zzz>let (__parent__ = window) 0.1</zzz>\t; (prop >>> *); ((yield __iterator__))) gc()gc()");
tryItOut("L: {{}gc() }");
tryItOut("if((<><x><y/></x></>.@*)) { if (<x><y/></x> / window) {{} } else {const __iterator__, prototype;; }}");
tryItOut("/*infloop*/M:for( '' ; ((Function).call(<><x><y/></x></>, window)) = +true; window) break M;L:if((new [1,2,3,4].slice((window != __iterator__), (yield <x><y/></x>))) != <x><y/></x>.prop = [15,16,17,18].some(function  <x><y/></x> =  /x/g  (__parent__, constructor) { throw  set __parent__() { return @foo } ; } , <y><z/></y>) instanceof <y><z/></y>\f) {export *; } else  if ((window)(@foo, <x><y/></x>)) yield window; else {}");
tryItOut("L:with(eval(\"<x/>\", ({a1:1}))){break L;L:do [[1]]; while(((-1)) && 0); }");
tryItOut("/*for..in*/for(let [__count__, __iterator__] = <x/> .@x:: *::* ? (prototype.__defineSetter__(\"__proto__\", ({}).__lookupGetter__).propertyIsEnumerable(\"prop\")) : [,,] in <x><y/></x>) {<x><y/></x><x><y/></x>; }");
tryItOut("let([__proto__, , , ({ __iterator__: ({ prototype: __proto__, __proto__: ({ __noSuchMethod__: __parent__ }) }), __proto__: __proto__ })], constructor = <y><z/></y>.isPrototypeOf( '' )) { with({}) let(__iterator__ = undefined, ({ constructor: __noSuchMethod__ })) { throw StopIteration;");
tryItOut("with({}) return  \"\" ;");
tryItOut("if(Error((true.valueOf(\"number\")), new ([z1,,])([z1]) & __parent__ = [z1])) { if (prop = <x/>.yoyo(<y><z/></y>)) for(let y in [5,6,7,8]) __count__ = ({ constructor: [z1,,].propertyIsEnumerable(\"__iterator__\").__proto__ }); else {prototype, __noSuchMethod__ = 1e81;throw ; }}");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const [({ __iterator__: ({ __parent__: ({ __iterator__: __proto__ }), constructor: ({ __noSuchMethod__: ({ constructor: __proto__ }), prop: ({ prop: constructor, __parent__: __proto__ }) }) }), __noSuchMethod__: ({ prototype: ({ __count__: __count__ }), __count__: __iterator__ }) }), , , , __count__] in yield *) {/*infloop*/for(prop; new (<><x><y/></x></>)(); (__proto__ = constructor)) yield;/*infloop*/while(<y><z/></y>){yield; }\nreturn <><x><y/></x></>; }");
tryItOut("if((<><x><y/></x></>.hasOwnProperty(\"__proto__\")) << {}) {let __parent__ = __proto__;if(eval(\"throw <><x><y/></x></>\\f;\", (-1))) { if (__proto__.constructor) {{}{} } else yield;} } else \t{/*for..in*/for(let [__noSuchMethod__, prop] = * in *) if( \"\" ) { if ((-0)) return; else (null);} }");
tryItOut("if((__noSuchMethod__ = <x><y/></x>)) return <><x><y/></x></>; else  if (prototype.propertyIsEnumerable(\"__count__\")) {} else yield <x/>;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/do {try {  } catch(__iterator__ if <x><y/></x>) { ; } catch(__proto__) { export *; }  } while(3.141592653589793);\n\n\n");
tryItOut(";");
tryItOut("/*for..in*/for(const prop in ((Math.pow)(*)))L:do eval while((false) && 0); const __noSuchMethod__;");
tryItOut("/*for..in*/L:for(__proto__ in ((function(y) { yield y; prototype const __parent__;; yield y; })(__parent__ = ({}) >>= <x><y/></x>.prototype)))export *;let (__iterator__, prop) { /*for..in*//* nogeckoex bug 349964 */L: for  each(const __noSuchMethod__.constructor in -0) ; }");
tryItOut("export *;");
tryItOut("{'haha'.splitbreak M; }");
tryItOut("{if(-3/0.propertyIsEnumerable(\"constructor\")) { if (<y><z/></y>\n) const constructor, __iterator__;} else {yield  '' ; }export constructor; }");
tryItOut("/*for..in*/for([constructor, __proto__] = <y><z/></y>(prop++, true) in ({a1:1})) /*for..in*/M:for(const prototype in <y><z/></y>) <x><y/></x>");
tryItOut("/*infloop*/for(({ prop: prototype }) = ((3)[<y><z/></y>]); <y><z/></y> @ false; __proto__ = function::<x><y/></x>) const __noSuchMethod__, prop;");
