tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let prototype in (Array(__iterator__))) /*for..in*/L:for(const __count__ in delete false) {yield null;continue L; }");
tryItOut("L: throw StopIteration;");
tryItOut("{/*for..in*/for(const __proto__ = 0 in <y><z/></y>) break ;try { return; } catch(__parent__ if  /x/g ) { throw this; } catch(__noSuchMethod__) { function  __noSuchMethod__ (prototype) { yield <x><y/></x> }  } finally { throw <x/>; }  }");
tryItOut("if(<bbb xmlns:ccc=\"constructor\"><ccc:eee></ccc:eee></bbb>) {<><x><y/></x></>; } else  if (({__noSuchMethod__: arguments.__lookupSetter__(\"__noSuchMethod__\")})) \t{} else {(1.3); }");
tryItOut("let (({ constructor: ({ __parent__: ({ __count__: __iterator__ }), __noSuchMethod__: ({ __proto__: constructor }) }) }) = ({constructor getter: function () { /*for..in*//* nogeckoex bug 349964 */ for  each(prop in  \"\" ) prototype, prop }  })) { switch(<x><y/></x>) { case  /x/ : {}break;  } }");
tryItOut("/*infloop*/for(__iterator__; [11,12,13,14].some = this >= new @foo[<x/>](); <x/>) {/*infloop*/for(__noSuchMethod__ = <y><z/></y>; [<><x><y/></x></>]; ([*])) eval }");
tryItOut("M:if(this.__defineSetter__(\"__iterator__\", (function(y) { yield y; ;; yield y; }).apply)) ({}).hasOwnProperty{} else  if (yield (__noSuchMethod__ = <><x><y/></x></\f>)) ; else {yield <x/> * <><x><y/></x></>; }");
tryItOut("return __iterator__; const __parent__;");
tryItOut("/*for..in*/for(const __parent__ = ((prototype.yoyo(0) for each (prototype in 3) for each (prototype in undefined))) in ({a2:z2})) gc()");
tryItOut("while((prop = function::__noSuchMethod__) && 0)L:with({__proto__: @foo})__noSuchMethod__");
tryItOut("let( = new (<x><y/></x>)(<x/>, [,,z1]), constructor = __iterator__ = this) ((function(){let(__parent__ =  /x/g ) ((function(){yield <><x><y/></x></>.unwatch(\"__proto__\");})());})());");
tryItOut("M:if([[[1]] for each (prop in __iterator__)]) { if (<><x><y/></x></>.propertyIsEnumerable(\"__proto__\")) {yield; } else __noSuchMethod__}");
tryItOut("gc()");
tryItOut("while(([11,12,13,14].some) && 0)1.3;");
tryItOut("");
tryItOut("/*for..in*/for(var __count__ in <><x><y/></x></> |= __parent__) {{export __iterator__;{export *;yield; } } }\nwhile((<><xxx {constructor}={(eval(\"5.0000000000000000000000\", arguments).hasOwnProperty(\"__proto__\"))} /></>) && 0)let(undefined) ((function(){( /x/g );})());");
tryItOut("L:if(\r__parent__ = @foo) /*for..in*/L:for(const constructor in (((1 for (x in [])))(1e81))){gc() } else  if (<><xxx>{prop}</xxx></>) {yield;let (prop, constructor = *) { throw <><x><y/></x></>; } }");
tryItOut("with({}) yield false;");
tryItOut("with({constructor: __noSuchMethod__-=<x/> .. ({ set __parent__ __noSuchMethod__ (({ set: __noSuchMethod__, __proto__: __parent__ })) { return <x/>; } , constructor: (new Number(new (Function)(<><x><y/></x></>, __count__), 3)) })}){if(()) { if (false /= (function ([y]) { })()) (constructor);} else L:if(false) function  constructor () { return window }  else {let __parent__, constructor = [,,z1]; } }");
tryItOut("if((uneval([,,z1])))  else  if (this--) {const prototype = __iterator__;; } else {yield;throw null; }");
tryItOut("do {return 0/0;break \n } while((( /x/g .__defineSetter__(\"__parent__\", /a/gi))) && 0);");
tryItOut("{/*infloop*/L:while(<x/>){return;let prototype = null; } }");
tryItOut("prototype.__parent__ = prop;");
tryItOut("L: return null;");
tryItOut("if([__proto__] = constructor) /*for..in*//* nogeckoex bug 349964 */ for  each(prop in window) export constructor; else  if (new Function.throw(<x/>.hasOwnProperty(\"__proto__\"))) {return true;{const constructor, __noSuchMethod__; } }");
tryItOut("let(constructor = constructor.yoyo(@foo), constructor =  \"\" ) ((function(){this.zzz.zzz;})());");
tryItOut("let(__proto__ = false.propertyIsEnumerable(\"prototype\"), __parent__) { try { <y><z/></y>; } catch(constructor) { function () { try { const __noSuchMethod__; } catch(prop if @foo) { var __noSuchMethod__ = <x><y/></x>; } finally { gc() }  }  } ");
tryItOut("");
tryItOut("let ([, prototype] = __iterator__, prop = constructor) { ; }");
tryItOut("/*for..in*/M:for(const [__proto__, __proto__] = * in true) {return <x><y/></x>; }");
tryItOut("return;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(let prototype in (undefined--)) {gc() }");
tryItOut("return __noSuchMethod__\n");
tryItOut("*;");
tryItOut("try { let(prop = [z1,,], constructor) ((function(){yield;})()); } finally { //h\nprop(<y><z/></y>--) = \f__parent__; } ");
tryItOut("/*for..in*/for(__count__ in undefined) {yield;export __parent__; }");
tryItOut("{throw undefined; }");
tryItOut("with({}) { yield <x><y/></x>; } ");
tryItOut("throw prototype;");
tryItOut("; const __noSuchMethod__;");
tryItOut("if(-0) with(1e-81)(@foo);");
tryItOut("M:switch(prop) { case 8: /*for..in*//* nogeckoex bug 349964 */M: for  each(var __count__ in *) const __iterator__, __parent__; }\fyield <x/>;");
tryItOut("switch(\r(eval(\"true\", 0)).__lookupSetter__(\"prototype\")) { case 0: break; {yield undefined; }default: with({__proto__: (new (@foo)(constructor))})throw 3;break; case 5: return <x/>; }");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each(let __parent__ in undefined) ");
tryItOut("M:if( /* Comment */0.1) (<x><y/></x>); else  if ((p={}, (p.z =  /x/g )())) gc() else let __count__\nthrow ;");
tryItOut("with(<x><y/></x>.eval(@foo).throw(this))yield <><x><y/></x></>;");
tryItOut("L: {with({prototype: <x/>}){gc() } }");
tryItOut("/*infloop*/for((yield --<x><y/></x>); (<x><y/></x>.__defineGetter__(\"constructor\", <><x><y/></x></>)); <bbb xmlns:ccc=\"<><x><y/></x></>\"><ccc:eee></ccc:eee></bbb>) __iterator__, prop;");
tryItOut("yield\nFunction");
tryItOut("if(this.__defineSetter__(\"__noSuchMethod__\", this)) { if (__noSuchMethod__ = __parent__ = ) /*infloop*/for(let __proto__ = <><x><y/></x></>; <x><y/></x>; <><x><y/></x></>) yield;} else {gc() }");
tryItOut("/*infloop*/for(const prototype; #1=[#1#]; <y><z/></y>) {export *; }");
tryItOut("default: ");
tryItOut("if((({ set __count__ __noSuchMethod__ (__proto__, __proto__)[z1,,], __count__: 3.141592653589793 }) for (__noSuchMethod__ in (-1)) for (__proto__ in  '' ))) {yield (-0); } else  if (prototype = prop.yoyo(__proto__)) {; }M:while(((prop = false)) && 0)/*infloop*/do export prototype; while(false);");
tryItOut("{/*for..in*/for(prototype in @foo) yield;export __noSuchMethod__; }");
tryItOut("/*infloop*/for(var ({ constructor: __count__, __iterator__: constructor }) = (@foo)[[,,]]; new  '' (this); let __iterator__ = ({a2:z2}), prototype) return __parent__;");
tryItOut("/*infloop*/for(const __count__; window; 033) {yield ({a1:1});__iterator__ = window, prototype =  /x/g ; }");
tryItOut("with({prop: return ({})});");
tryItOut("/*infloop*/while( /* Comment */(function ([y]) { })() .@*:: undefined)do ; while((<x><y/></x>) && 0);");
tryItOut("{}\n<x><y/></x>");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(__parent__ in [,]) let prop = 1.3;");
tryItOut("/*infloop*/do {/*infloop*/L:for(let prop = ({ __iterator__: ({ prop: ({ constructor: __count__ }) }) }) = constructor-=constructor; (({ constructor: ({ constructor: [, , , , ] }) }) = <xxx>{prototype}</xxx>); ((p={}, (p.z = <x/> >>>=<y><z/></y>)()))) /*infloop*/L:for(var yield; window;  \"\" ) continue ; } while(@foo &= false);");
tryItOut("if(((<x/>)[1e4])) { if (([1].@*)) switch(<><xxx {prop}={<x><y/></x>} /></>) { default: return *;case new  '' (<y><z/></y>): yield @foo;case 9: (<x/>);break; L:if(<x><y/></x>) { if (null) {null; } else {}}case 'fafafa'.replace(/a/g, (function(q) { return q; }).apply): throw undefined; }} else let __proto__;");
tryItOut("if(.2) (this);//h\n else  if (this.__defineSetter__(\"__iterator__\", <x/>)) {gc()if(#2=[(uneval(__iterator__))]) { if (var __count__) {break ;; } else /*infloop*/for(false; 1.2e3; <x><y/></x>) \f#1=[#1#]: <x><y/></x>;} } else /*for..in*//* nogeckoex bug 349964 */ for  each(<><><x><y/></x></></>(). in  /* Comment */ '' .@*) {{0x99; } }");
tryItOut("{ /x/ ;export __proto__; }\t");
tryItOut("/*infloop*/for(let prop;  /x/g ; <y><z/></y>) export __parent__;");
tryItOut("continue L;");
tryItOut("{/*infloop*/L:for(this; function ([y]) { }; (-1)) return; }");
tryItOut("(new Function(\"gc()\"))\n\n");
tryItOut("__iterator__ = prop;");
tryItOut("L: export __parent__;");
tryItOut("if((* == (__noSuchMethod__ = !(<y><z/></y>\f ? true : prop =  '' )))) /*infloop*/for([__iterator__, __count__, constructor, __noSuchMethod__] = prototype.constructor getter= ( /x/g ).__defineSetter__; null;  \"\"  for (__noSuchMethod__ in __parent__)) {const __proto__ = .2; }");
tryItOut("/*infloop*/do  while(__proto__ = prop);");
tryItOut("with({prototype: (uneval(this *= <x><y/></x>))})/*infloop*/for(<><x><y/></x></> .. this; ((<x/>).apply()); (constructor = <x><y/></x>)) {__noSuchMethod__ = function(id) { return id };var __count__ = [,]; }");
tryItOut("L:if((uneval(__noSuchMethod__\n :: (__count__ = false)))) { if ([false].__lookupGetter__(\"__parent__\")) {/*for..in*/M:for(const __iterator__ in (((function(q) { return q; }).call)( \"\" ))){yield true;{} }return; }} else case new Object(): ");
tryItOut("/*for..in*/L:for(default: /*for..in*/for(var __parent__ = ( \"\" .unwatch(\"__iterator__\").valueOf(\"number\")) in window /= (this.*)) {{return;export __noSuchMethod__; }/*for..in*/L:for(const __noSuchMethod__ in (([1,2,3,4].slice)((new (gc\r)())))){export *; } } = null.__parent__ in ) /*for..in*/for(const prop in ((yield [];)((__parent__ % constructor)))){prop = <x/>, constructor = function::__iterator__; }");
tryItOut("L: continue L;");
tryItOut("do {throw return;; } while((false) && 0);");
tryItOut("/*for..in*/for(var __parent__ in ((function(y) { yield y; var __noSuchMethod__ =  /x/g ;; yield y; })( /x/ )))yield;");
tryItOut("/*for..in*/for(let [__parent__, __iterator__] = <>__proto__</> in this.__defineSetter__(\"__noSuchMethod__\", function(y) { yield y; export __parent__;; yield y; })) {/*for..in*/for(var __proto__ = --__parent__ in false) yield; }");
tryItOut("/*for..in*/for(const __parent__ = <x><y/></x> in <><x><y/></x></>) export __noSuchMethod__;");
tryItOut("{prop, function::__iterator__ = .2;for(let y in [5,6,7,8]) for(let y in [5,6,7,8])  }");
tryItOut("let(__iterator__, __parent__) { for(let y in []);");
tryItOut("/*infloop*/do const prop; while(<x/>);");
tryItOut("/*for..in*/M:for(const prop = ({a2:z2}) in [,]) { { return this }  }");
tryItOut("M:if(#0=({__proto__: [,]})) { if (function (prototype, prototype) { yield <x><y/></x> } (<y><z/></y>)) {L: {let __proto__;window; } }} else {throw  /x/ ;var prop =  \"\" ; }");
tryItOut("/*infloop*/while(__parent__){export __proto__; }");
tryItOut("with({}) { prototype = x::__count__; } ");
tryItOut("/*infloop*/while((<x/> != true)){gc() }");
tryItOut("M:switch(--window) { default:  }");
tryItOut("var constructor, __count__;");
tryItOut("/*for..in*/M:for(var [__parent__, __count__] = prop = <><x><y/></x></> in (__iterator__ = <y><z/></y>)) yield <x><y/></x>-- <= (uneval(__noSuchMethod__));");
tryItOut("/*for..in*/for([prop, prop] = ([] >>> (function ([y]) { })() for each (prototype in  /x/  % this) for each (prop in *)) in <xxx {prop}={<x/>} />.((p={}, (p.z =  /x/g )()))) {/*infloop*/M:do Function while(__noSuchMethod__ = this !== <y><z/></y>); }");
tryItOut("yield [#3={a:#3#}];");
tryItOut("/*for..in*/L:for(let [__iterator__, __proto__] = false in (@foo)[prop]) \t{__iterator__ = 3;return null; }");
tryItOut("L:switch(<{constructor}>yyy</{constructor}>.__proto__) { default: case 5: {(prototype);( /x/ ); } }");
tryItOut("/*infloop*/M:while(<y><z/></y> ? *::* :  /x/g ){yield; }\t");
tryItOut("do window; while((null) && 0);");
tryItOut("/*infloop*/while((eval(\"prototype\", []))){if(*) {const constructor = __iterator__; } else {{} } }");
tryItOut("/*infloop*/for(__proto__: this.@foo; ({__parent__: (Number(<x/>, undefined))()}).__lookupGetter__(\"prop\"); <><x><y/></x></> /= <y><z/></y>) /*infloop*/L:for(const (undefined)( '' ) = (new RangeError(__count__, <y><z/></y>)[<x/>.isPrototypeOf(__count__)]); <><x><y/></x></> & *; undefined) yield <x><y/></x>\n(false);");
tryItOut("/*for..in*/for(let __iterator__ = (p={}, (p.z = (p={}, (p.z = <y><z/></y>)()))()) in [, __noSuchMethod__, __count__, ] = __proto__) {if(<><x><y/></x></>) { if (<x><y/></x>) throw undefined; else {return *::*;(<><x><y/></x></>); }} }");
tryItOut(" const __noSuchMethod__;");
tryItOut("yield (<y><z/></y> &= <><employee id=\"1\"><name>Joe</name><age>20</age></employee></>);");
tryItOut("M:if((yield __iterator__).throw('fafafa'.replace(/a/g, undefined))) var __count__; else (*).__defineSetter__");
tryItOut("let (__iterator__) { var __noSuchMethod__; }");
tryItOut("/*infloop*/for(let __count__; 1e+81; <y><z/></y>) {;throw <x/>; }");
tryItOut("throw StopIteration;");
tryItOut("/*infloop*/for(\n__count__; (new Function()); (uneval(<y><z/></y>.@*))) {/*for..in*/for(const __count__ in (( /x/g )(__parent__))){var __proto__, prop = arguments; } }");
tryItOut("L: 'haha'.split");
tryItOut("{return this ^= window;0.1; const __iterator__; }");
tryItOut("yield *;");
tryItOut("; const __noSuchMethod__;");
tryItOut("with({__count__: __iterator__|=undefined--.isPrototypeOf(*)}){ }");
tryItOut("__count__ = *::*, __count__ = <x><y/></x>; const set;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */ for  each([z1,,] in (eval)()) \n");
tryItOut(";");
tryItOut("L:while((( /x/g ().isPrototypeOf((<x/>[__parent__])))) && 0){{(L: <><x><y/></x></>;) }\n[1,2,3,4].slice }");
tryItOut("__parent__ = __parent__;");
tryItOut("/*for..in*//* nogeckoex bug 349964 */M: for  each(const new (prop.(this))(@foo.__parent__ = <x/>.hasOwnProperty(\"prop\")) -= <>new Function()</>.__noSuchMethod__ in __proto__)  const __parent__;");
tryItOut("__proto__");
tryItOut("if(<><x><y/></x></>) { if ( '' ) {gc()break ; } else {;export __noSuchMethod__; }}");
tryItOut("let(__parent__, __parent__ =  /x/g ) ((function(){var __proto__ = <x/>;})())");
tryItOut("{}\n(1 for (x in []))");
tryItOut("/*infloop*/while(({a2:z2}).propertyIsEnumerable(\"__count__\")){yield; }");
tryItOut("const undefined, [z1], __proto__");
tryItOut("if(window) {export *; } else  if (undefined) true; else var __noSuchMethod__ = @foo;");
tryItOut("{yield;[1,2,3,4].slice }");
tryItOut("__iterator__ = __proto__;");
tryItOut("/*for..in*/for(var constructor in this) return;");
tryItOut("if(<y><z/></y>) { if ((prop.yoyo(0.1)).watch(\"prop\", 'haha'.split)) {\texport prop;break M; } else {{} }}");
tryItOut("L:if((([1,,] -= true *= new Function()).@*)) { if (this) <></>} else {export *;return;yield; }");
tryItOut("/*for..in*/for([prop, constructor] = <x/> % [].throw(__count__) in [ /x/g ])  /x/g ;");
tryItOut("L:while(([(<x><y/></x>)].some([1,2,3,4].map)) && 0){let (__proto__, constructor) { constructor, __iterator__; } }");
tryItOut("/*for..in*/L:for([__count__, __iterator__] = (uneval(#1#)).__defineGetter__(\"prototype\", ({}).__lookupGetter__) in eval(\"window\", arguments)) /*infloop*/for(let constructor =  /x/g ;  /x/ ;  /x/g ) break L;");
tryItOut("export prototype\n__noSuchMethod__");
tryItOut("/*infloop*/for(var constructor; ( /x/ .watch(\"__proto__\", [1,2,3,4].map) <<= yield 0.1); ((break )\n)) {{} }");
tryItOut("throw StopIteration;");
tryItOut("{yield <y><z/></y>; }");
tryItOut("let (function::prototype = <><x><y/></x></>, __parent__ = __iterator__) { let prop, __count__; }");
tryItOut("/*infloop*/L:while(((*::*)(<><x><y/></x></>(<x/>)) if ( ''  .@ prototype))){return; }");
tryItOut("/*for..in*/for(var [__count__, constructor] = 0.1 in window) continue ;");
tryItOut("/*infloop*/for(({ __parent__: [, , , , ], __proto__: ({ prop: constructor }) }) = ({0.1, <><x><y/></x></>, prop getter: ({}).hasOwnProperty }); (.2.@*); (Function())) {const __parent__ = @foo, constructor = __count__; }");
tryItOut("export __count__;__proto__;");
tryItOut("for(let y in [5,6,7,8]) with({}) { __parent__ = constructor; } throw StopIteration;");
tryItOut("/*for..in*/M:for(const [__noSuchMethod__, __count__] = ((<x><y/></x>.hasOwnProperty(\"__iterator__\") == __parent__) if ( /x/ )) in eval(\"{{}(*); }\", this)) if(-1) {{} } else {break ; } const <y><z/></y>;");
tryItOut("/*for..in*/for(var __count__ in ((({}).__lookupGetter__)(window))){window; }");
tryItOut("M:switch(__count__ =  /x/g ) { case 4: break; default: break; /*for..in*//* nogeckoex bug 349964 */M: for  each( ''  in this) {export *; }case 4: break; break; case __proto__(<x/>) =  \"\" .prototype: break; case 9: break; break; case  /x/ .__parent__: L: {{} }(window);break; case 5:  }");
tryItOut("L: {yield; }");
tryItOut("with({__iterator__: (#2=({__proto__: <y><z/></y>})).eval((this ? 1e4 :  /x/g ))}){{return window\n } }\n");
tryItOut("/*for..in*/for(let __noSuchMethod__ in ((/a/gi)((\n ''  ? <><x><y/></x></> :  /x/g )))){let prototype, prototype\n/*for..in*/for(var prop in ((<><x><y/></x></>)(this)))yield; }");
tryItOut("/*infloop*/for(var [] = <><x><y/></x></> :: <x/>; <y><z/></y> * @foo <= this.prototype = arguments; \n<x><y/></x>.(prototype)) yield *;");
tryItOut("throw StopIteration\nreturn;\nreturn <><x><y/></x></>;export *; \n");
tryItOut("this.zzz.zzz;");
tryItOut("for(let y in [5,6,7,8]) export *;");
tryItOut("prototype = prop;");
tryItOut("L:switch([,] >>>  /x/ ) { case (__iterator__ = [, constructor, __iterator__, __iterator__]): var constructor, constructor;break;  }");
tryItOut("if(@foo) ; else  if ( \"\" ) gc()");
tryItOut("while(( /x/ ) && 0){export getter;function  constructor () { return undefined }  }");
tryItOut("try { try { gc() } finally { throw <x><y/></x>; }  } catch(prototype) { try { throw <x><y/></x>; } finally { var __iterator__, constructor =  /x/g ; }  } ");
tryItOut("export *");
tryItOut("yield export *;");
tryItOut("/*infloop*/do {/*for..in*//* nogeckoex bug 349964 */ for  each(var __proto__ in <x/>) var __iterator__ = undefined; } while(((new ([1,2,3,4].slice)(((prototype)[<y><z/></y>])))[eval(\"return <><x><y/></x></>;\", function(id) { return id })]));");
tryItOut("/*infloop*/L:while((eval(\"<><x><y/></x></> += <y><z/></y>\", 033.prop = <x/>))){const __parent__, prop = <x><y/></x>;with([,,z1])export *; }");
tryItOut("L:do break ; while((this) && 0)\n");
tryItOut("if(eval(\"let __proto__;\", undefined).propertyIsEnumerable(\"__proto__\")) { if (((({delete setter: function(y) { yield y; export *;; yield y; }, __proto__: *::* }) if (yyy)))) export delete; else {/*for..in*/L:for(const __iterator__.__count__ in (([1,2,3,4].map)(1e-81 in *::*)))let prototype = <><x><y/></x></>, __count__;{yield constructor;export *; } }}");
tryItOut("switch(3/0) { default:  }");
tryItOut("/*infloop*/for(<x><y/></x>.unwatch(\"__proto__\"); __noSuchMethod__ = 4.; 5.0000000000000000000000 ? this : prop) ;");
tryItOut("M:if(this !== this) with(*::*)return  /x/ ; else break ;");
tryItOut("if((uneval( '' ))) { if (()) continue ; else const __noSuchMethod__ = window, __parent__;}");
tryItOut("\twith(((__iterator__.__proto__).call(__iterator__, ((p={}, (p.z = <y><z/></y>)())))))");
tryItOut("/*infloop*/for(const ({ \f__count__: __proto__ }) = this[<x><y/></x>]; (((p={}, (p.z = new RangeError( /x/ ))())) .. __count__ - new 'fafafa'.replace(/a/g, (gc).apply)()\t); let (__iterator__) (try {  '' ; } catch(__proto__) { export *; } finally { throw window; }  for each (constructor in  /x/g ).yoyo(__parent__ = ()([,,z1])))) if((new Math.pow())) {export *;prototype =  '' ; } else  if ((-0).propertyIsEnumerable(\"prototype\")) continue ; else {const prototype, prop =  /x/ ;export *; }");
tryItOut("yield <x><y/></x>");
tryItOut("let (__proto__ = <><x><y/></x></>, __noSuchMethod__ =  { gc() } ) { export *; }");
tryItOut("do switch(<x><y/></x>) { case 9: yield  \"\" ;break; throw 1.2e3;default: break; yield <><><{__proto__}><x><y/></x>yyy</{__proto__}></></>; } while(((0 <= prototype)) && 0);");
tryItOut("__proto__ = __iterator__;");
tryItOut("M:if(<x/>) \f{ if ( /x/g ) {return; }} else {yield window; }");
tryItOut("if(((undefined.watch(\"function::__parent__\", ((function ([y]) { })()).apply))).__defineSetter__()) { if ( /x/g .propertyIsEnumerable(\"__count__\")) {if(void <x><y/></x>) export *; else  if (<y><z/></y> >> {}) {throw <x><y/></x>; }export *; } else {return window /= <y><z/></y>; }}");
tryItOut("throw function::__count__;");
tryItOut("for(let y in []);");
tryItOut("with({}) {  } ");
tryItOut("/*for..in*/M:for(prop = window in true) {let prototype =  /x/g ;(-3/0); }");
tryItOut("/*infloop*/while(<><x><y/></x></> if (*)){033;Function }");
tryItOut("let(constructor = <><x><y/></x></>--, ({ __iterator__: __parent__, prop: ({ prop: __noSuchMethod__ }) }) = __noSuchMethod__ = (export __iterator__)) { __count__ = prop;");
tryItOut("function (__proto__) { export prototype; } this.zzz.zzz;");
tryItOut("/*for..in*/M:for(var prop in <><bbb xmlns:ccc=\"__count__\"><ccc:eee></ccc:eee></bbb> </>) export prototype;");
tryItOut("if(eval) { if (this.zzz.zzz) ([z1,,]);} else do {return constructor; } while((#3={a:#3#}\n) && 0);");
tryItOut("while(((<><x><y/></x></>)()) && 0)/*infloop*/for(const constructor;  /x/g ; this) {return *::*; }\n");
tryItOut("while((;) && 0)export prototype;");
tryItOut("/*for..in*/for(var [,].__count__ in (((function  __iterator__ (({ __iterator__: [, __noSuchMethod__, , __noSuchMethod__], prototype: __noSuchMethod__ }), __parent__) { return (undefined.__lookupGetter__(\"__noSuchMethod__\")).isPrototypeOf\t((p={}, (p.z = null)())) } ).call)(((Math.pow).call((0.1.__defineGetter__(\"__parent__\", *).propertyIsEnumerable(\"prototype\")), ).__defineGetter__(\"__iterator__\", Function)))))return;");
tryItOut("return;");
tryItOut("L:while((3/0 ? <x/> : {} ?  /* Comment */1.3 : __proto__ = false) && 0){let prop = <><x><\ty/></x></>;(<x><y/></x>); }");
tryItOut("while((<><x><y/></x></>) && 0){break M; }");
tryItOut("M:while((<x/>) && 0)L:with({prototype: }){__noSuchMethod__, __count__ }");
tryItOut("\tif(false) /*for..in*/for(let __proto__ = arguments in .2) {throw *::*;( \"\" ); } else  if ((new (function  prototype ([])(__iterator__ =  '' ))(Function(window, [,,]), this.__defineGetter__(\"prop\", function(y) { yield y; export *;; yield y; })))) {return;L:while((<><x><y/></x></>) && 0){export __iterator__; } }");
tryItOut("{var __parent__, __parent__; }");
tryItOut("return (<><x><y\t/></x></> -= <></> );");
tryItOut("/*infloop*/for(var __parent__; @foo; __proto__: #3={a:#3#}) *");
tryItOut("if(<y><z/></y>.propertyIsEnumerable(\"__proto__\")) (this) else  if (<x><y/></x>) {{}true; }");
tryItOut("if(([prototype].filter(function  constructor (function::prop) { return; } ))) if([[]]++) yield *::*; else switch(<x><y/></x>\f) { case 0:  } const prop;");
tryItOut("for(let y in []);");
tryItOut("/*infloop*/for(5.0000000000000000000000; (#2=({__count__: <><x><y/></x></>})) << true -= undefined; [<x/> for each (__noSuchMethod__ in @foo)]) var __noSuchMethod__;");
